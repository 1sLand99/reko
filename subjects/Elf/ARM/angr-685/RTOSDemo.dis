// prvUnlockQueue
// Return size: 0
void prvUnlockQueue()
prvUnlockQueue_entry:
	// succ:  l00000059
l00000059:
	sp = fp
	branch Test(NE,Z) l0000005D
	// succ:  l00000059_1 l0000005D
l00000059_1:
	Mem0[r6:word32] = r0
	Mem0[r6 - 4:word32] = r2
	Mem0[r6 - 8:word32] = r4
	Mem0[r6 - 12:word32] = r5
	Mem0[r6 - 16:word32] = r7
	Mem0[r6 - 20:word32] = r8
	Mem0[r6 - 24:word32] = r10
	// succ:  l0000005D
l0000005D:
	branch Test(UGT,ZC) l00000061
	// succ:  l0000005D_1 l00000061
l0000005D_1:
	r10 = r10 + 3312
	r8 = Mem0[r10:byte]
	// succ:  l00000061
l00000061:
	Mem0[r0:byte] = (byte) r4
	r0 = r0 - 0x000005F8
prvUnlockQueue_exit:


// prvCopyDataToQueue
// Return size: 0
void prvCopyDataToQueue()
prvCopyDataToQueue_entry:
	// succ:  l000000ED
l000000ED:
	sp = fp
	branch Test(NE,Z) l000000F1
	// succ:  l000000ED_1 l000000F1
l000000ED_1:
	Mem0[r6:word16] = (uint16) r0
	r6 = r6 + 0xFFFFFFBB
	// succ:  l000000F1
l000000F1:
	branch Test(ULT,C) l000000F5
	// succ:  l000000F1_1 l000000F5
l000000F1_1:
	Mem0[fp:word32] = r2
	Mem0[fp - 4:word32] = r3
	Mem0[fp - 8:word32] = r5
	Mem0[fp - 12:word32] = r6
	Mem0[fp - 16:word32] = r8
	Mem0[fp - 20:word32] = r10
	Mem0[fp - 24:word32] = sp
	Mem0[fp - 28:word32] = pc
	fp = fp - 32
	// succ:  l000000F5
l000000F5:
	branch Test(NE,Z) l000000F9
	// succ:  l000000F5_1 l000000F9
l000000F5_1:
	Mem0[r8:word16] = (uint16) r2
	r8 = r8 + 0x00000069
	// succ:  l000000F9
l000000F9:
	branch Test(NE,Z) l000000FD
	// succ:  l000000F9_1 l000000FD
l000000F9_1:
	r3 = r0 & ~(lr >>u 2)
	// succ:  l000000FD
l000000FD:
	branch Test(OV,V) l00000101
	// succ:  l000000FD_1 l00000101
l000000FD_1:
	r10 = r3 - (r5 >>u r5)
	// succ:  l00000101
l00000101:
	branch Test(NE,Z) l00000105
	// succ:  l00000101_1 l00000105
l00000101_1:
	r1 = r6 - 0x0BD00000
	// succ:  l00000105
l00000105:
	branch Test(LT,NV) l00000109
	// succ:  l00000105_1 l00000109
l00000105_1:
	r7 = r9 + (r6 >> 28) + C
	NZCV = cond(r7)
	// succ:  l00000109
l00000109:
	branch Test(LT,N) l0000010D
	// succ:  l00000109_1 l0000010D
l00000109_1:
	call fnFFC02AB1 (retsize: 0;)
	// succ:  l0000010D
l0000010D:
	branch Test(ULT,C) l00000111
	// succ:  l0000010D_1 l00000111
l0000010D_1:
	r8 = r8 + -58
	Mem0[r8:word64] = fp_r10
	// succ:  l00000111
l00000111:
	branch Test(NE,Z) l00000115
	// succ:  l00000111_1 l00000115
l00000111_1:
	call fn01A18AC9 (retsize: 0;)
	// succ:  l00000115
l00000115:
	branch Test(LT,NV) l00000119
	// succ:  l00000115_1 l00000119
l00000115_1:
	r9 = DPB(r9, 0x2344, 16)
	// succ:  l00000119
l00000119:
	branch Test(ULT,C) l0000011D
	// succ:  l00000119_1 l0000011D
l00000119_1:
	r1 = r3 & ~0x00180000
	// succ:  l0000011D
l0000011D:
	branch Test(UGE,C) l00000121
	// succ:  l0000011D_1 l00000121
l0000011D_1:
	r0 = r5 ^ __ror(r8, 2)
	NZCV = cond(r0)
	// succ:  l00000121
l00000121:
	branch Test(LT,NV) l00000125
	// succ:  l00000121_1 l00000125
l00000121_1:
	r0 = r0 + -838
	Mem0[r0:byte] = (byte) r10
	// succ:  l00000125
l00000125:
	r7 = sp + __ror(r3, 0) + C
	NZCV = cond(r7)
	branch Test(GT,NZ) l0000012D
	// succ:  l00000129_1 l0000012D
l00000129_1:
	call fnFFC02AD1 (retsize: 0;)
	// succ:  l0000012D
l0000012D:
prvCopyDataToQueue_exit:


// prvCopyDataFromQueue
// Return size: 0
void prvCopyDataFromQueue()
prvCopyDataFromQueue_entry:
	// succ:  l0000016D
l0000016D:
	sp = fp
	branch Test(NE,Z) l00000171
	// succ:  l0000016D_1 l00000171
l0000016D_1:
	call fnFEC5AB25 (retsize: 0;)
	// succ:  l00000171
l00000171:
prvCopyDataFromQueue_exit:


// xQueueGenericSend
// Return size: 0
void xQueueGenericSend()
xQueueGenericSend_entry:
	// succ:  l00000191
l00000191:
	sp = fp
	branch Test(NE,Z) l00000195
	// succ:  l00000191_1 l00000195
l00000191_1:
	pc = r7 - __ror(r9, 1)
	// succ:  l00000195
l00000195:
	branch Test(NE,Z) l00000199
	// succ:  l00000195_1 l00000199
l00000195_1:
	r8 = Mem0[r0:word32]
	r0 = r0 + 0x00000425
	// succ:  l00000199
l00000199:
xQueueGenericSend_exit:


// xQueuePeekFromISR
// Return size: 0
void xQueuePeekFromISR()
xQueuePeekFromISR_entry:
	// succ:  l000002A5
l000002A5:
	sp = fp
	branch Test(EQ,Z) l000002A9
	// succ:  l000002A5_1 l000002A9
l000002A5_1:
	r3 = r3 + 245
	lr = Mem0[r3:word16]
	// succ:  l000002A9
l000002A9:
	branch Test(GE,NZV) l000002AD
	// succ:  l000002A9_1 l000002AD
l000002A9_1:
	// succ:  l000002AD
l000002AD:
xQueuePeekFromISR_exit:


// xQueueGenericReceive
// Return size: 0
void xQueueGenericReceive()
xQueueGenericReceive_entry:
	// succ:  l000002D9
l000002D9:
	sp = fp
	branch Test(NE,Z) l000002DD
	// succ:  l000002D9_1 l000002DD
l000002D9_1:
	pc = r7 - __ror(r9, 1)
	// succ:  l000002DD
l000002DD:
	branch Test(NE,Z) l000002E1
	// succ:  l000002DD_1 l000002E1
l000002DD_1:
	r8 = Mem0[r0:word32]
	r0 = r0 + 0x00000425
	// succ:  l000002E1
l000002E1:
xQueueGenericReceive_exit:


// uxQueueMessagesWaiting
// Return size: 0
void uxQueueMessagesWaiting()
uxQueueMessagesWaiting_entry:
	// succ:  l00000429
l00000429:
	sp = fp
	branch Test(NE,Z) l0000042D
	// succ:  l00000429_1 l0000042D
l00000429_1:
	Mem0[r6:word32] = r0
	Mem0[r6 - 4:word32] = r2
	Mem0[r6 - 8:word32] = r4
	Mem0[r6 - 12:word32] = r5
	Mem0[r6 - 16:word32] = r7
	Mem0[r6 - 20:word32] = r10
	// succ:  l0000042D
l0000042D:
	branch Test(LT,NV) l00000431
	// succ:  l0000042D_1 l00000431
l0000042D_1:
	r10 = Mem0[r8:byte]
	r8 = r8 + 0x000004F0
	// succ:  l00000431
l00000431:
	branch Test(GE,NZV) l00000435
	// succ:  l00000431_1 l00000435
l00000431_1:
l00000435:
	branch Test(EQ,Z) l00000439
	// succ:  l00000435_1 l00000439
l00000435_1:
	Mem0[r6:word64] = r3_r2
	r6 = r6 + 0xFFFFFFF8
	// succ:  l00000439
l00000439:
	branch Test(UGE,C) l0000043D
	// succ:  l00000439_1 l00000439_thunk_uxQueueSpacesAvailable
l00000439_1:
	r0 = Mem0[pc:word32]
	r2 = Mem0[pc + 4:word32]
	r3 = Mem0[pc + 8:word32]
	r4 = Mem0[pc + 12:word32]
	r5 = Mem0[pc + 16:word32]
	r7 = Mem0[pc + 20:word32]
	pc = pc + 24
	// succ:  l00000439_thunk_uxQueueSpacesAvailable
l00000439_thunk_uxQueueSpacesAvailable:
	call uxQueueSpacesAvailable (retsize: 0;)
	return
	// succ:  uxQueueMessagesWaiting_exit
l00000439_thunk_uxQueueSpacesAvailable:
	call uxQueueSpacesAvailable (retsize: 0;)
	return
	// succ:  uxQueueMessagesWaiting_exit
uxQueueMessagesWaiting_exit:


// uxQueueSpacesAvailable
// Return size: 0
void uxQueueSpacesAvailable()
uxQueueSpacesAvailable_entry:
	// succ:  l0000043D
l0000043D:
	sp = fp
	branch Test(NE,Z) l00000441
	// succ:  l0000043D_1 l00000441
l0000043D_1:
	Mem0[r6:word32] = r0
	Mem0[r6 - 4:word32] = r2
	Mem0[r6 - 8:word32] = r4
	Mem0[r6 - 12:word32] = r5
	Mem0[r6 - 16:word32] = r7
	Mem0[r6 - 20:word32] = r8
	Mem0[r6 - 24:word32] = r10
	// succ:  l00000441
l00000441:
	branch Test(LT,NV) l00000445
	// succ:  l00000441_1 l00000445
l00000441_1:
	r4 = Mem0[r8:word32]
	r5 = Mem0[r8 + 4:word32]
	r6 = Mem0[r8 + 8:word32]
	r7 = Mem0[r8 + 12:word32]
	r9 = Mem0[r8 + 16:word32]
	fp = Mem0[r8 + 20:word32]
	ip = Mem0[r8 + 24:word32]
	r8 = r8 + 32
	return
	// succ:  uxQueueSpacesAvailable_exit
l00000445:
	branch Test(ULT,C) l00000449
	// succ:  l00000445_1 l00000449
l00000445_1:
	Mem0[fp:byte] = (byte) lr
	fp = fp - 0x00000C6B
	// succ:  l00000449
l00000449:
	branch Test(GE,NZV) l0000044D
	// succ:  l00000449_1 l0000044D
l00000449_1:
	r0 = !(r10 << r8)
	NZCV = cond(r0)
	// succ:  l0000044D
l0000044D:
	branch Test(UGE,C) l00000451
	// succ:  l0000044D_1 l00000451
l0000044D_1:
	Mem0[r6:word32] = r3
	Mem0[r6 - 4:word32] = r4
	Mem0[r6 - 8:word32] = r5
	Mem0[r6 - 12:word32] = r6
	Mem0[r6 - 16:word32] = r7
	Mem0[r6 - 20:word32] = sp
	// succ:  l00000451
l00000451:
	branch Test(NE,Z) l00000455
	// succ:  l00000451_1 l00000451_thunk_vQueueDelete
l00000451_1:
	r0 = Mem0[0x00000459:word16]
	// succ:  l00000451_thunk_vQueueDelete
l00000451_thunk_vQueueDelete:
	call vQueueDelete (retsize: 0;)
	return
	// succ:  uxQueueSpacesAvailable_exit
l00000451_thunk_vQueueDelete:
	call vQueueDelete (retsize: 0;)
	return
	// succ:  uxQueueSpacesAvailable_exit
uxQueueSpacesAvailable_exit:


// vQueueDelete
// Return size: 0
void vQueueDelete()
vQueueDelete_entry:
	// succ:  l00000455
l00000455:
	sp = fp
vQueueDelete_exit:


// xQueueGenericSendFromISR
// Return size: 0
void xQueueGenericSendFromISR()
xQueueGenericSendFromISR_entry:
	// succ:  l00000459
l00000459:
	sp = fp
	branch Test(EQ,Z) l0000045D
	// succ:  l00000459_1 l0000045D
l00000459_1:
	r3 = r3 + 245
	lr = Mem0[r3:word16]
	// succ:  l0000045D
l0000045D:
	branch Test(GE,NZV) l00000461
	// succ:  l0000045D_1 l00000461
l0000045D_1:
	// succ:  l00000461
l00000461:
xQueueGenericSendFromISR_exit:


// xQueueGiveFromISR
// Return size: 0
void xQueueGiveFromISR()
xQueueGiveFromISR_entry:
	// succ:  l000004C5
l000004C5:
	sp = fp
	branch Test(EQ,Z) l000004C9
	// succ:  l000004C5_1 l000004C9
l000004C5_1:
	r3 = r3 + 245
	lr = Mem0[r3:word16]
	// succ:  l000004C9
l000004C9:
	branch Test(GE,NZV) l000004CD
	// succ:  l000004C9_1 l000004CD
l000004C9_1:
	// succ:  l000004CD
l000004CD:
xQueueGiveFromISR_exit:


// xQueueReceiveFromISR
// Return size: 0
void xQueueReceiveFromISR()
xQueueReceiveFromISR_entry:
	// succ:  l00000525
l00000525:
	sp = fp
	branch Test(GT,NZ) l0000052D
	// succ:  l00000529_1 l0000052D
l00000529_1:
	// succ:  l0000052D
l0000052D:
	branch Test(ULE,ZC) l00000531
	// succ:  l0000052D_1 l00000531
l0000052D_1:
	Mem0[r4:word32] = fp
	r4 = r4 - 0x00000FF0
	// succ:  l00000531
l00000531:
	branch Test(GE,NZV) l00000535
	// succ:  l00000531_1 l00000535
l00000531_1:
	// succ:  l00000535
l00000535:
	branch Test(GE,NZV) l00000539
	// succ:  l00000535_1 l00000539
l00000535_1:
	// succ:  l00000539
l00000539:
	branch Test(ULE,ZC) l0000053D
	// succ:  l00000539_1 l0000053D
l00000539_1:
	Mem0[0x00000541:word32] = r4
	pc = pc + 0x00000FF3
	// succ:  l0000053D
l0000053D:
	branch Test(ULT,C) l00000541
	// succ:  l0000053D_1 l00000541
l0000053D_1:
	r2 = r9 + __ror(fp, 8) + C
	NZCV = cond(r2)
	// succ:  l00000541
l00000541:
xQueueReceiveFromISR_exit:


// xQueueIsQueueEmptyFromISR
// Return size: 0
void xQueueIsQueueEmptyFromISR()
xQueueIsQueueEmptyFromISR_entry:
	// succ:  l00000595
l00000595:
	sp = fp
	branch Test(ULE,ZC) l00000599
	// succ:  l00000595_1 l00000599
l00000595_1:
	fp = __ror(fp, 0) - r10 - C
	NZCV = cond(fp)
	// succ:  l00000599
l00000599:
	branch Test(OV,V) l0000059D
	// succ:  l00000599_1 l0000059D
l00000599_1:
	Mem0[r9:word64] = r5_r4
	r9 = r9 - r0
	// succ:  l0000059D
l0000059D:
xQueueIsQueueEmptyFromISR_exit:


// xQueueIsQueueFullFromISR
// Return size: 0
void xQueueIsQueueFullFromISR()
xQueueIsQueueFullFromISR_entry:
	// succ:  l000005A1
l000005A1:
	sp = fp
	branch Test(LE,NZV) l000005A5
	// succ:  l000005A1_1 l000005A5
l000005A1_1:
	ip = fp - __ror(fp, 0)
	// succ:  l000005A5
l000005A5:
	branch Test(ULE,ZC) l000005A9
	// succ:  l000005A5_1 l000005A9
l000005A5_1:
	fp = (r10 << r0) - r10 - C
	NZCV = cond(fp)
	// succ:  l000005A9
l000005A9:
	branch Test(OV,V) l000005AD
	// succ:  l000005A9_1 l000005AD
l000005A9_1:
	Mem0[r9:word64] = r5_r4
	r9 = r9 - r0
	// succ:  l000005AD
l000005AD:
	branch Test(ULE,ZC) l000005AD_thunk_uxQueueMessagesWaitingFromISR
	// succ:  l000005AD_1 l000005AD_thunk_uxQueueMessagesWaitingFromISR
l000005AD_1:
	r0 = pc + (r7 >> 32) + C
	NZCV = cond(r0)
	goto l000005AD_thunk_uxQueueMessagesWaitingFromISR
	// succ:  l000005AD_thunk_uxQueueMessagesWaitingFromISR
l000005AD_thunk_uxQueueMessagesWaitingFromISR:
	call uxQueueMessagesWaitingFromISR (retsize: 0;)
	return
	// succ:  xQueueIsQueueFullFromISR_exit
l000005AD_thunk_uxQueueMessagesWaitingFromISR:
	call uxQueueMessagesWaitingFromISR (retsize: 0;)
	return
	// succ:  xQueueIsQueueFullFromISR_exit
xQueueIsQueueFullFromISR_exit:


// uxQueueMessagesWaitingFromISR
// Return size: 0
void uxQueueMessagesWaitingFromISR()
uxQueueMessagesWaitingFromISR_entry:
	// succ:  l000005B1
l000005B1:
	sp = fp
	branch Test(EQ,Z) l000005B5
	// succ:  l000005B1_1 l000005B1_thunk_xQueueGetMutexHolder
l000005B1_1:
	r7 = r7 - __ror(fp, 0)
	// succ:  l000005B1_thunk_xQueueGetMutexHolder
l000005B1_thunk_xQueueGetMutexHolder:
	call xQueueGetMutexHolder (retsize: 0;)
	return
	// succ:  uxQueueMessagesWaitingFromISR_exit
l000005B1_thunk_xQueueGetMutexHolder:
	call xQueueGetMutexHolder (retsize: 0;)
	return
	// succ:  uxQueueMessagesWaitingFromISR_exit
uxQueueMessagesWaitingFromISR_exit:


// xQueueGetMutexHolder
// Return size: 0
void xQueueGetMutexHolder()
xQueueGetMutexHolder_entry:
	// succ:  l000005B5
l000005B5:
	sp = fp
xQueueGetMutexHolder_exit:


// xQueueTakeMutexRecursive
// Return size: 0
void xQueueTakeMutexRecursive()
xQueueTakeMutexRecursive_entry:
	// succ:  l000005D5
l000005D5:
	sp = fp
	branch Test(NE,Z) l000005D9
	// succ:  l000005D5_1 l000005D9
l000005D5_1:
	Mem0[r8:byte] = (byte) r4
	r8 = r8 - 0x000005B5
	// succ:  l000005D9
l000005D9:
	branch Test(NE,Z) l000005DD
	// succ:  l000005D9_1 l000005DD
l000005D9_1:
	r0 = r6 - (r6 >> 28)
	// succ:  l000005DD
l000005DD:
	branch Test(ULE,ZC) l000005E1
	// succ:  l000005DD_1 l000005E1
l000005DD_1:
	sp = sp + 3312
	r10 = Mem0[sp:byte]
	// succ:  l000005E1
l000005E1:
	branch Test(NE,Z) l000005E5
	// succ:  l000005E1_1 l000005E5
l000005E1_1:
	r0 = r0 - (r2 >> 20) - C
	NZCV = cond(r0)
	// succ:  l000005E5
l000005E5:
	branch Test(EQ,Z) l000005E9
	// succ:  l000005E5_1 l000005E9
l000005E5_1:
	Mem0[r6 - 4:word32] = r0
	Mem0[r6 - 8:word32] = r1
	Mem0[r6 - 12:word32] = r5
	Mem0[r6 - 16:word32] = r9
	Mem0[r6 - 20:word32] = ip
	Mem0[r6 - 24:word32] = sp
	// succ:  l000005E9
l000005E9:
xQueueTakeMutexRecursive_exit:


// xQueueGiveMutexRecursive
// Return size: 0
void xQueueGiveMutexRecursive()
xQueueGiveMutexRecursive_entry:
	// succ:  l00000605
l00000605:
	sp = fp
	branch Test(NE,Z) l00000609
	// succ:  l00000605_1 l00000609
l00000605_1:
	Mem0[r8:byte] = (byte) r4
	r8 = r8 - 0x000005B5
	// succ:  l00000609
l00000609:
	branch Test(UGT,ZC) l0000060D
	// succ:  l00000609_1 l0000060D
l00000609_1:
	r0 = r0 + 70
	r0 = Mem0[r0:byte]
	// succ:  l0000060D
l0000060D:
	branch Test(NE,Z) l00000611
	// succ:  l0000060D_1 l00000611
l0000060D_1:
	Mem0[r2 + -93:word64] = r9_r8
	// succ:  l00000611
l00000611:
	branch Test(UGE,C) l00000615
	// succ:  l00000611_1 l00000615
l00000611_1:
	Mem0[r0:word32] = r4
	Mem0[r0 - 4:word32] = r6
	Mem0[r0 - 8:word32] = r7
	r0 = r0 - 12
	// succ:  l00000615
l00000615:
	branch Test(NE,Z) l00000619
	// succ:  l00000615_1 l00000619
l00000615_1:
	r8 = r8 + -61
	Mem0[r8:word16] = (uint16) lr
	// succ:  l00000619
l00000619:
	branch Test(NE,Z) l0000061D
	// succ:  l00000619_1 l0000061D
l00000619_1:
	call fn0183930D (retsize: 0;)
	// succ:  l0000061D
l0000061D:
	branch Test(UGE,C) l00000621
	// succ:  l0000061D_1 l00000621
l0000061D_1:
	Mem0[r0:word32] = r0
	Mem0[r0 - 4:word32] = r4
	Mem0[r0 - 8:word32] = r5
	Mem0[r0 - 12:word32] = r7
	Mem0[r0 - 16:word32] = r8
	r0 = r0 - 20
	// succ:  l00000621
l00000621:
	branch Test(NE,Z) l00000621_then
	call fn0118891D (retsize: 0;)
	return
	// succ:  l00000625 l00000621_then
l00000621_then:
l00000625:
	// succ:  xQueueGiveMutexRecursive_exit
xQueueGiveMutexRecursive_exit:


// xQueueGenericReset
// Return size: 0
void xQueueGenericReset()
xQueueGenericReset_entry:
	// succ:  l00000631
l00000631:
	sp = fp
	branch Test(NE,Z) l00000635
	// succ:  l00000631_1 l00000635
l00000631_1:
	__mcr(0x04, 0x00000002, r0, 0x06, 0x05, 0x00000005)
	// succ:  l00000635
l00000635:
	branch Test(NE,Z) l00000639
	// succ:  l00000635_1 l00000639
l00000635_1:
	r5 = r5
	Mem0[r5:word32] = pc
	// succ:  l00000639
l00000639:
	branch Test(NE,Z) l0000063D
	// succ:  l00000639_1 l0000063D
l00000639_1:
	r9 = Mem0[0x00000641:int16]
	pc = pc + 0x000000E0
	// succ:  l0000063D
l0000063D:
	r2 = ip - 0x84000000
	branch Test(NE,Z) l00000645
	// succ:  l00000641_1 l00000645
l00000641_1:
	r2 = r8 - 0x0000006B
	// succ:  l00000645
l00000645:
xQueueGenericReset_exit:


// xQueueGenericCreate
// Return size: 0
void xQueueGenericCreate()
xQueueGenericCreate_entry:
	// succ:  l000006AD
l000006AD:
	sp = fp
	branch Test(NE,Z) l000006B1
	// succ:  l000006AD_1 l000006B1
l000006AD_1:
	Mem0[r6:word16] = (uint16) r0
	r6 = r6 + 0xFFFFFF9B
	// succ:  l000006B1
l000006B1:
	branch Test(GT,NZ) l000006B5
	// succ:  l000006B1_1 l000006B5
l000006B1_1:
	r0 = Mem0[r0:word32]
	r1 = Mem0[r0 + 4:word32]
	r3 = Mem0[r0 + 8:word32]
	r4 = Mem0[r0 + 12:word32]
	r5 = Mem0[r0 + 16:word32]
	r6 = Mem0[r0 + 20:word32]
	r7 = Mem0[r0 + 24:word32]
	r8 = Mem0[r0 + 28:word32]
	r0 = r0 + 32
	// succ:  l000006B5
l000006B5:
xQueueGenericCreate_exit:


// xQueueCreateMutex
// Return size: 0
void xQueueCreateMutex()
xQueueCreateMutex_entry:
	// succ:  l000006DD
l000006DD:
	sp = fp
	branch Test(NE,Z) l000006E1
	// succ:  l000006DD_1 l000006E1
l000006DD_1:
	Mem0[r6:word16] = (uint16) r0
	r6 = r6 + 0xFFFFFFDB
	// succ:  l000006E1
l000006E1:
xQueueCreateMutex_exit:


// prvInitialiseNewTask
// Return size: 0
void prvInitialiseNewTask()
prvInitialiseNewTask_entry:
	// succ:  l00000701
l00000701:
	sp = fp
	branch Test(NE,Z) l00000705
	// succ:  l00000701_1 l00000705
l00000701_1:
l00000705:
	branch Test(ULT,C) l00000709
	// succ:  l00000705_1 l00000709
l00000705_1:
	Mem0[r6 + -2460:byte] = (byte) r9
	// succ:  l00000709
l00000709:
	branch Test(ULE,ZC) l0000070D
	// succ:  l00000709_1 l0000070D
l00000709_1:
	r0 = __ror(sp, 4) - r1 - C
	NZCV = cond(r0)
	// succ:  l0000070D
l0000070D:
	branch Test(UGT,ZC) l00000711
	// succ:  l0000070D_1 l00000711
l0000070D_1:
	NZCV = cond(fp ^ 0xC0000010)
	// succ:  l00000711
l00000711:
	branch Test(NE,Z) l00000715
	// succ:  l00000711_1 l00000715
l00000711_1:
	r0 = Mem0[r10 + 2630:word32]
	// succ:  l00000715
l00000715:
	branch Test(ULE,ZC) l00000719
	// succ:  l00000715_1 l00000719
l00000715_1:
	r8 = r5 & __ror(fp, 7)
	// succ:  l00000719
l00000719:
	branch Test(GT,NZ) l0000071D
	// succ:  l00000719_1 l0000071D
l00000719_1:
	// succ:  l0000071D
l0000071D:
	branch Test(ULT,C) l00000721
	// succ:  l0000071D_1 l00000721
l0000071D_1:
	r10 = r10 + -746
	sp = Mem0[r10:byte]
	// succ:  l00000721
l00000721:
	branch Test(NE,Z) l00000725
	// succ:  l00000721_1 l00000725
l00000721_1:
	r0 = r5 & 0x03C00000
	// succ:  l00000725
l00000725:
	branch Test(LT,N) l00000729
	// succ:  l00000725_1 l00000729
l00000725_1:
	r0 = Mem0[r1:byte]
	r1 = r1 + 0x00000431
	// succ:  l00000729
l00000729:
	branch Test(NE,Z) l0000072D
	// succ:  l00000729_1 l0000072D
l00000729_1:
	r2 = (r0 << 4) - r0 - C
	NZCV = cond(r2)
	// succ:  l0000072D
l0000072D:
	branch Test(NE,Z) l00000731
	// succ:  l0000072D_1 l00000731
l0000072D_1:
	r5 = r8 - (r2 >> 28)
	NZCV = cond(r5)
	// succ:  l00000731
l00000731:
prvInitialiseNewTask_exit:


// prvAddNewTaskToReadyList
// Return size: 0
void prvAddNewTaskToReadyList()
prvAddNewTaskToReadyList_entry:
	// succ:  l00000799
l00000799:
	sp = fp
	branch Test(ULT,C) l0000079D
	// succ:  l00000799_1 l0000079D
l00000799_1:
	__stcl(0x00, 0x0F, Mem0[r1 + -932:void])
	Mem0[0x00:word32] = d1
	Mem0[0x00 + 4:word32] = r1
	// succ:  l0000079D
l0000079D:
	branch Test(NE,Z) l000007A1
	// succ:  l0000079D_1 l000007A1
l0000079D_1:
	Mem0[r6:byte] = (byte) r0
	// succ:  l000007A1
l000007A1:
prvAddNewTaskToReadyList_exit:


// prvAddCurrentTaskToDelayedList.isra.0
// Return size: 0
void prvAddCurrentTaskToDelayedList.isra.0()
prvAddCurrentTaskToDelayedList.isra.0_entry:
	// succ:  l0000085D
l0000085D:
	sp = fp
	branch Test(NE,Z) l00000861
	// succ:  l0000085D_1 l00000861
l0000085D_1:
	Mem0[ip + -1205:byte] = (byte) r1
	// succ:  l00000861
l00000861:
	branch Test(ULE,ZC) l00000865
	// succ:  l00000861_1 l00000865
l00000861_1:
	sp = (r6 >> 8) - r8 - C
	NZCV = cond(sp)
	// succ:  l00000865
l00000865:
	branch Test(ULT,C) l00000869
	// succ:  l00000865_1 l00000869
l00000865_1:
	Mem0[r8:byte] = (byte) r6
	r8 = r8 - 0x00000060
	// succ:  l00000869
l00000869:
	r4 = Mem0[r0 + 4:word32]
	r5 = Mem0[r0 + 8:word32]
	r8 = Mem0[r0 + 12:word32]
	r9 = Mem0[r0 + 16:word32]
	r10 = Mem0[r0 + 20:word32]
	r0 = r0 + 24
	branch Test(NE,Z) l00000871
	// succ:  l0000086D_1 l00000871
l0000086D_1:
	r9 = r9
	r3 = Mem0[r9:int16]
	// succ:  l00000871
l00000871:
prvAddCurrentTaskToDelayedList.isra.0_exit:


// xTaskCreate
// Return size: 0
void xTaskCreate()
xTaskCreate_entry:
	// succ:  l000008B5
l000008B5:
	sp = fp
	branch Test(ULE,ZC) l000008B9
	// succ:  l000008B5_1 l000008B9
l000008B5_1:
	pc = r7 - __ror(r9, 1)
	// succ:  l000008B9
l000008B9:
	branch Test(UGT,ZC) l000008BD
	// succ:  l000008B9_1 l000008BD
l000008B9_1:
	r8 = r0 + (r6 >> 8) + C
	NZCV = cond(r8)
	// succ:  l000008BD
l000008BD:
	branch Test(ULE,ZC) l000008C1
	// succ:  l000008BD_1 l000008C1
l000008BD_1:
	Mem0[r6 - 4:word32] = r9
	Mem0[r6 - 8:word32] = r10
	Mem0[r6 - 12:word32] = ip
	// succ:  l000008C1
l000008C1:
	branch Test(NE,Z) l000008C5
	// succ:  l000008C1_1 l000008C5
l000008C1_1:
	r9 = r6 - (r6 >> 20)
	// succ:  l000008C5
l000008C5:
	r3 = Mem0[0x000008CD:int16]
	pc = pc + 0x00000020
	Mem0[r6:word32] = r0
	Mem0[r6 - 4:word32] = r4
	Mem0[r6 - 8:word32] = r5
	Mem0[r6 - 12:word32] = r7
	Mem0[r6 - 16:word32] = r8
	Mem0[r6 - 20:word32] = r10
	branch Test(ULT,C) l000008D1
	// succ:  l000008CD_1 l000008D1
l000008CD_1:
l000008D1:
	branch Test(GT,NZV) l000008D5
	// succ:  l000008D1_1 l000008D5
l000008D1_1:
	Mem0[r6:word32] = r0
	Mem0[r6 - 4:word32] = r1
	Mem0[r6 - 8:word32] = r2
	Mem0[r6 - 12:word32] = r3
	Mem0[r6 - 16:word32] = r4
	Mem0[r6 - 20:word32] = r5
	Mem0[r6 - 24:word32] = r6
	Mem0[r6 - 28:word32] = r7
	Mem0[r6 - 32:word32] = r10
	// succ:  l000008D5
l000008D5:
	branch Test(NE,Z) l000008D9
	// succ:  l000008D5_1 l000008D9
l000008D5_1:
	r7 = r7 + -177
	Mem0[r7:word32] = r0
	// succ:  l000008D9
l000008D9:
	branch Test(ULE,ZC) l000008DD
	// succ:  l000008D9_1 l000008DD
l000008D9_1:
	r0 = Mem0[sp:word32]
	sp = sp + 0x00000D65
	// succ:  l000008DD
l000008DD:
	branch Test(NE,Z) l000008E1
	// succ:  l000008DD_1 l000008E1
l000008DD_1:
	r0 = r0 + -88
	r6 = Mem0[r0:int16]
	// succ:  l000008E1
l000008E1:
	branch Test(LT,N) l000008E5
	// succ:  l000008E1_1 l000008E5
l000008E1_1:
	r0 = sp | 0x00009500
	// succ:  l000008E5
l000008E5:
	branch Test(GT,NZ) l000008E9
	// succ:  l000008E5_1 l000008E9
l000008E5_1:
	Mem0[r6 - 4:word32] = r1
	Mem0[r6 - 8:word32] = r2
	Mem0[r6 - 12:word32] = r6
	Mem0[r6 - 16:word32] = r9
	Mem0[r6 - 20:word32] = ip
	Mem0[r6 - 24:word32] = sp
	// succ:  l000008E9
l000008E9:
	branch Test(NE,Z) l000008ED
	// succ:  l000008E9_1 l000008ED
l000008E9_1:
	r4 = DPB(r4, 0x6046, 16)
	// succ:  l000008ED
l000008ED:
	branch Test(NE,Z) l000008F1
	// succ:  l000008ED_1 l000008F1
l000008ED_1:
	r4_r0 = r2 *u r7
	NZCV = cond(r4_r0)
	// succ:  l000008F1
l000008F1:
	branch Test(NE,Z) l000008F5
	// succ:  l000008F1_1 l000008F5
l000008F1_1:
	r7 = r7 + 3989
	call Mem0[r7:byte] (retsize: 0;)
	return
	// succ:  xTaskCreate_exit
l000008F5:
xTaskCreate_exit:


// xTaskCreateRestricted
// Return size: 0
void xTaskCreateRestricted()
xTaskCreateRestricted_entry:
	// succ:  l0000091D
l0000091D:
	sp = fp
xTaskCreateRestricted_exit:


// vTaskAllocateMPURegions
// Return size: 0
void vTaskAllocateMPURegions()
vTaskAllocateMPURegions_entry:
	// succ:  l00000971
l00000971:
	sp = fp
	branch Test(NE,Z) l00000975
	// succ:  l00000971_1 l00000975
l00000971_1:
	Mem0[r3:word32] = r0
	r3 = r3 - 0x000000B1
	// succ:  l00000975
l00000975:
	branch Test(NE,Z) l00000979
	// succ:  l00000975_1 l00000979
l00000975_1:
	r1 = r6 - (r0 >>u r10)
	// succ:  l00000979
l00000979:
vTaskAllocateMPURegions_exit:


// vTaskStartScheduler
// Return size: 0
void vTaskStartScheduler()
vTaskStartScheduler_entry:
	// succ:  l00000991
l00000991:
	sp = fp
	branch Test(EQ,Z) l00000995
	// succ:  l00000991_1 l00000995
l00000991_1:
	Mem0[r3:word64] = r1_r0
	r3 = r3 + 0x00000000
	// succ:  l00000995
l00000995:
	branch Test(ULE,ZC) l00000999
	// succ:  l00000995_1 l00000999
l00000995_1:
	r1 = ip - 0x5000000B
	// succ:  l00000999
l00000999:
	branch Test(NE,Z) l0000099D
	// succ:  l00000999_1 l0000099D
l00000999_1:
	r0 = Mem0[r3:word32]
	r3 = r3 + 0x000000B0
	// succ:  l0000099D
l0000099D:
	branch Test(NE,Z) l000009A1
	// succ:  l0000099D_1 l000009A1
l0000099D_1:
	Mem0[r3:word64] = r9_r8
	// succ:  l000009A1
l000009A1:
	branch Test(NE,Z) l000009A5
	// succ:  l000009A1_1 l000009A5
l000009A1_1:
	r2 = r3 + r3 * fp
	// succ:  l000009A5
l000009A5:
	branch Test(NE,Z) l000009A9
	// succ:  l000009A5_1 l000009A9
l000009A5_1:
	// succ:  l000009A9
l000009A9:
vTaskStartScheduler_exit:


// vTaskEndScheduler
// Return size: 0
void vTaskEndScheduler()
vTaskEndScheduler_entry:
	// succ:  l000009ED
l000009ED:
	sp = fp
	branch Test(ULE,ZC) l000009F1
	// succ:  l000009ED_1 l000009F1
l000009ED_1:
	fp = 0x00003FF0
	// succ:  l000009F1
l000009F1:
	branch Test(GE,NZV) l000009F5
	// succ:  l000009F1_1 l000009F5
l000009F1_1:
	// succ:  l000009F5
l000009F5:
	branch Test(GE,NZV) l000009F9
	// succ:  l000009F5_1 l000009F9
l000009F5_1:
	// succ:  l000009F9
l000009F9:
	branch Test(NE,Z) l000009FD
	// succ:  l000009F9_1 l000009FD
l000009F9_1:
	Mem0[0x00000A01:word64] = r5_r4
	pc = pc + r3
	// succ:  l000009FD
l000009FD:
	branch Test(GT,NZ) l000009FD_then
	call fn012C128D (retsize: 0;)
	return
	// succ:  l00000A01 l000009FD_then
l000009FD_then:
l00000A01:
	branch Test(LT,NV) l00000A05
	// succ:  l00000A01_1 l00000A05
l00000A01_1:
	r0 = r0 + 103
	r0 = Mem0[r0:byte]
	// succ:  l00000A05
l00000A05:
	branch Test(LE,NZV) l00000A09
	// succ:  l00000A05_1 l00000A09
l00000A05_1:
	r0 = Mem0[0x00000A0D:word32]
	pc = pc + 0x000000BD
	// succ:  l00000A09
l00000A09:
	// succ:  vTaskEndScheduler_exit
vTaskEndScheduler_exit:


// vTaskSuspendAll
// Return size: 0
void vTaskSuspendAll()
vTaskSuspendAll_entry:
	// succ:  l00000A0D
l00000A0D:
	sp = fp
	branch Test(ULE,ZC) l00000A11
	// succ:  l00000A0D_1 l00000A11
l00000A0D_1:
l00000A11:
	branch Test(LE,NZV) l00000A15
	// succ:  l00000A11_1 l00000A15
l00000A11_1:
	r0 = r3 ^ 0x0000000C
	NZCV = cond(r0)
	// succ:  l00000A15
l00000A15:
	branch Test(OV,V) l00000A19
	// succ:  l00000A15_1 l00000A19
l00000A15_1:
	r8 = Mem0[r0:int16]
	r0 = r0 + r8
	// succ:  l00000A19
l00000A19:
	branch Test(LE,NZV) l00000A1D
	// succ:  l00000A19_1 l00000A1D
l00000A19_1:
	r0 = Mem0[0x00000A21:word32]
	pc = pc + 0x00000047
	// succ:  l00000A1D
l00000A1D:
vTaskSuspendAll_exit:


// xTaskGetTickCount
// Return size: 0
void xTaskGetTickCount()
xTaskGetTickCount_entry:
	// succ:  l00000A21
l00000A21:
	sp = fp
	branch Test(ULE,ZC) l00000A25
	// succ:  l00000A21_1 l00000A25
l00000A21_1:
	sp = (fp >> 6) - r8 - C
	NZCV = cond(sp)
	// succ:  l00000A25
l00000A25:
	branch Test(LE,NZV) l00000A29
	// succ:  l00000A25_1 l00000A29
l00000A25_1:
	Mem0[r7:byte] = (byte) r7
	r7 = r7 - 0x00000000
	// succ:  l00000A29
l00000A29:
xTaskGetTickCount_exit:


// xTaskGetTickCountFromISR
// Return size: 0
void xTaskGetTickCountFromISR()
xTaskGetTickCountFromISR_entry:
	// succ:  l00000A2D
l00000A2D:
	sp = fp
	branch Test(ULE,ZC) l00000A31
	// succ:  l00000A2D_1 l00000A31
l00000A2D_1:
	sp = (fp >> 6) - r8 - C
	NZCV = cond(sp)
	// succ:  l00000A31
l00000A31:
	branch Test(LE,NZV) l00000A35
	// succ:  l00000A31_1 l00000A35
l00000A31_1:
	Mem0[r7:byte] = (byte) r7
	r7 = r7 - 0x00000000
	// succ:  l00000A35
l00000A35:
xTaskGetTickCountFromISR_exit:


// uxTaskGetNumberOfTasks
// Return size: 0
void uxTaskGetNumberOfTasks()
uxTaskGetNumberOfTasks_entry:
	// succ:  l00000A39
l00000A39:
	sp = fp
	branch Test(OV,V) l00000A3D
	// succ:  l00000A39_1 l00000A3D
l00000A39_1:
	r1 = r8 - (fp >> 16)
	// succ:  l00000A3D
l00000A3D:
	branch Test(LE,NZV) l00000A41
	// succ:  l00000A3D_1 l00000A41
l00000A3D_1:
	r0 = Mem0[0x00000A45:word32]
	pc = pc + 0x00000047
	// succ:  l00000A41
l00000A41:
uxTaskGetNumberOfTasks_exit:


// pcTaskGetName
// Return size: 0
void pcTaskGetName()
pcTaskGetName_entry:
	// succ:  l00000A45
l00000A45:
	sp = fp
	branch Test(OV,V) l00000A49
	// succ:  l00000A45_1 l00000A49
l00000A45_1:
	r5 = Mem0[r0:word16]
	r0 = r0 + r1
	// succ:  l00000A49
l00000A49:
	branch Test(LT,N) l00000A4D
	// succ:  l00000A49_1 l00000A4D
l00000A49_1:
	Mem0[fp:word32] = r0
	Mem0[fp - 4:word32] = r1
	Mem0[fp - 8:word32] = r2
	Mem0[fp - 12:word32] = r6
	Mem0[fp - 16:word32] = r9
	// succ:  l00000A4D
l00000A4D:
	branch Test(OV,V) l00000A51
	// succ:  l00000A4D_1 l00000A51
l00000A4D_1:
	r5 = r0 ^ __ror(r8, 8)
	NZCV = cond(r5)
	// succ:  l00000A51
l00000A51:
	branch Test(LE,NZV) l00000A55
	// succ:  l00000A51_1 l00000A55
l00000A51_1:
	r0 = Mem0[0x00000A59:word32]
	pc = pc + 0x00000047
	// succ:  l00000A55
l00000A55:
pcTaskGetName_exit:


// xTaskGenericNotify
// Return size: 0
void xTaskGenericNotify()
xTaskGenericNotify_entry:
	// succ:  l00000A59
l00000A59:
	sp = fp
xTaskGenericNotify_exit:


// xTaskGenericNotifyFromISR
// Return size: 0
void xTaskGenericNotifyFromISR()
xTaskGenericNotifyFromISR_entry:
	// succ:  l00000B0D
l00000B0D:
	sp = fp
	branch Test(GT,NZ) l00000B15
	// succ:  l00000B11_1 l00000B15
l00000B11_1:
	// succ:  l00000B15
l00000B15:
	branch Test(ULE,ZC) l00000B19
	// succ:  l00000B15_1 l00000B19
l00000B15_1:
	Mem0[r4:word32] = fp
	r4 = r4 - 0x00000FF0
	// succ:  l00000B19
l00000B19:
	branch Test(GE,NZV) l00000B1D
	// succ:  l00000B19_1 l00000B1D
l00000B19_1:
	// succ:  l00000B1D
l00000B1D:
	branch Test(GE,NZV) l00000B21
	// succ:  l00000B1D_1 l00000B21
l00000B1D_1:
	// succ:  l00000B21
l00000B21:
	branch Test(NE,Z) l00000B25
	// succ:  l00000B21_1 l00000B25
l00000B21_1:
	call fnFE3D4AF5 (retsize: 0;)
	// succ:  l00000B25
l00000B25:
	branch Test(EQ,Z) l00000B29
	// succ:  l00000B25_1 l00000B29
l00000B25_1:
	lr = lr
	__stcl(0x04, 0x00, Mem0[lr:void])
	Mem0[0x04 + 4:word32] = lr
	0x04 = 0x04 + 8
	// succ:  l00000B29
l00000B29:
	branch Test(UGT,ZC) l00000B2D
	// succ:  l00000B29_1 l00000B2D
l00000B29_1:
	r0 = r3 ^ __ror(r0, 4)
	// succ:  l00000B2D
l00000B2D:
	branch Test(NE,Z) l00000B31
	// succ:  l00000B2D_1 l00000B31
l00000B2D_1:
	Mem0[r0 + -72:word64] = r7_r6
	// succ:  l00000B31
l00000B31:
	r8 = Mem0[r8:byte]
	r8 = r8 + 0x0000003A
xTaskGenericNotifyFromISR_exit:


// xTaskNotifyWait
// Return size: 0
void xTaskNotifyWait()
xTaskNotifyWait_entry:
	// succ:  l00000BD5
l00000BD5:
	sp = fp
	branch Test(EQ,Z) l00000BD9
	// succ:  l00000BD5_1 l00000BD9
l00000BD5_1:
	// succ:  l00000BD9
l00000BD9:
	branch Test(ULE,ZC) l00000BDD
	// succ:  l00000BD9_1 l00000BDD
l00000BD9_1:
	r1 = r6 - (ip >> 10)
	// succ:  l00000BDD
l00000BDD:
	branch Test(EQ,Z) l00000BE1
	// succ:  l00000BDD_1 l00000BE1
l00000BDD_1:
	// succ:  l00000BE1
l00000BE1:
	branch Test(LE,NZV) l00000BE5
	// succ:  l00000BE1_1 l00000BE5
l00000BE1_1:
	r1 = Mem0[r0 + 4:word32]
	r2 = Mem0[r0 + 8:word32]
	r6 = Mem0[r0 + 12:word32]
	r8 = Mem0[r0 + 16:word32]
	r9 = Mem0[r0 + 20:word32]
	r10 = Mem0[r0 + 24:word32]
	r0 = r0 + 28
	// succ:  l00000BE5
l00000BE5:
	branch Test(UGT,ZC) l00000BE9
	// succ:  l00000BE5_1 l00000BE9
l00000BE5_1:
	r6 = r8 - 0xC000000F
	// succ:  l00000BE9
l00000BE9:
	branch Test(NE,Z) l00000BED
	// succ:  l00000BE9_1 l00000BED
l00000BE9_1:
	r6 = r0 ^ 0xF8000000
	// succ:  l00000BED
l00000BED:
	branch Test(NE,Z) l00000BF1
	// succ:  l00000BED_1 l00000BF1
l00000BED_1:
	r0 = r0 & ~(r10 >>u 18)
	// succ:  l00000BF1
l00000BF1:
	branch Test(EQ,Z) l00000BF1_then
	call fn01A19079 (retsize: 0;)
	return
	// succ:  l00000BF5 l00000BF1_then
l00000BF1_then:
l00000BF5:
	branch Test(NE,Z) l00000BF9
	// succ:  l00000BF5_1 l00000BF9
l00000BF5_1:
	Mem0[r10:word32] = r1
	Mem0[r10 + 4:word32] = r2
	Mem0[r10 + 8:word32] = r3
	Mem0[r10 + 12:word32] = r5
	Mem0[r10 + 16:word32] = r6
	Mem0[r10 + 20:word32] = r9
	Mem0[r10 + 24:word32] = sp
	r10 = r10 + 28
	// succ:  l00000BF9
l00000BF9:
	// succ:  xTaskNotifyWait_exit
xTaskNotifyWait_exit:


// vTaskNotifyGiveFromISR
// Return size: 0
void vTaskNotifyGiveFromISR()
vTaskNotifyGiveFromISR_entry:
	// succ:  l00000C61
l00000C61:
	sp = fp
	branch Test(GT,NZ) l00000C69
	// succ:  l00000C65_1 l00000C69
l00000C65_1:
	// succ:  l00000C69
l00000C69:
	branch Test(ULE,ZC) l00000C6D
	// succ:  l00000C69_1 l00000C6D
l00000C69_1:
	fp = 0x00003FF0
	// succ:  l00000C6D
l00000C6D:
	branch Test(GE,NZV) l00000C71
	// succ:  l00000C6D_1 l00000C71
l00000C6D_1:
	// succ:  l00000C71
l00000C71:
	branch Test(GE,NZV) l00000C75
	// succ:  l00000C71_1 l00000C75
l00000C71_1:
	// succ:  l00000C75
l00000C75:
	branch Test(NE,Z) l00000C79
	// succ:  l00000C75_1 l00000C79
l00000C75_1:
	r4 = pc + 0x000003CC
	// succ:  l00000C79
l00000C79:
	r9 = Mem0[r8:byte]
	r8 = r8 + 0x00000023
	r8 = Mem0[r8:byte]
	r8 = r8 + 0x00000050
	lr = lr + -192
	__stcl(0x03, 0x00, Mem0[lr:void])
	Mem0[0x03 + 4:word32] = lr
	0x03 = 0x03 + 8
	branch Test(NE,Z) l00000C89
	// succ:  l00000C85_1 l00000C89
l00000C85_1:
	r3 = r3
	r0 = Mem0[r3:word16]
	// succ:  l00000C89
l00000C89:
vTaskNotifyGiveFromISR_exit:


// ulTaskNotifyTake
// Return size: 0
void ulTaskNotifyTake()
ulTaskNotifyTake_entry:
	// succ:  l00000D01
l00000D01:
	sp = fp
ulTaskNotifyTake_exit:


// xTaskIncrementTick
// Return size: 0
void xTaskIncrementTick()
xTaskIncrementTick_entry:
	// succ:  l00000D6D
l00000D6D:
	sp = fp
	branch Test(UGE,C) l00000D71
	// succ:  l00000D6D_1 l00000D71
l00000D6D_1:
l00000D71:
	branch Test(ULE,ZC) l00000D75
	// succ:  l00000D71_1 l00000D75
l00000D71_1:
l00000D75:
	branch Test(LT,N) l00000D79
	// succ:  l00000D75_1 l00000D79
l00000D75_1:
	__mcr(0x00, 0x00000001, r0, 0x0B, 0x00, 0x00000001)
	// succ:  l00000D79
l00000D79:
	branch Test(ULE,ZC) l00000D7D
	// succ:  l00000D79_1 l00000D7D
l00000D79_1:
	sp = Mem0[r8:int8]
	r8 = r8 + 0x00000041
	// succ:  l00000D7D
l00000D7D:
	branch Test(LE,NZV) l00000D81
	// succ:  l00000D7D_1 l00000D81
l00000D7D_1:
	r0 = Mem0[r7:word32]
	r7 = r7 - 0x00000170
	// succ:  l00000D81
l00000D81:
xTaskIncrementTick_exit:


// xTaskResumeAll
// Return size: 0
void xTaskResumeAll()
xTaskResumeAll_entry:
	// succ:  l00000E6D
l00000E6D:
	sp = fp
	branch Test(UGE,C) l00000E71
	// succ:  l00000E6D_1 l00000E71
l00000E6D_1:
	pc = DPB(pc, 0x10E9, 16)
	// succ:  l00000E71
l00000E71:
	branch Test(ULE,ZC) l00000E75
	// succ:  l00000E71_1 l00000E75
l00000E71_1:
	r0 = !(ip >> 14)
	NZCV = cond(r0)
	// succ:  l00000E75
l00000E75:
	branch Test(ULE,ZC) l00000E79
	// succ:  l00000E75_1 l00000E79
l00000E75_1:
l00000E79:
	branch Test(LE,NZV) l00000E7D
	// succ:  l00000E79_1 l00000E7D
l00000E79_1:
	r0 = Mem0[fp:word32]
	fp = fp - 0x00000130
	// succ:  l00000E7D
l00000E7D:
	branch Test(GT,NZV) l00000E81
	// succ:  l00000E7D_1 l00000E81
l00000E7D_1:
	r8 = Mem0[r0:word32]
	r0 = r0 - 0x00000CF8
	// succ:  l00000E81
l00000E81:
	branch Test(NE,Z) l00000E85
	// succ:  l00000E81_1 l00000E85
l00000E81_1:
	r8 = Mem0[r0:int16]
	r0 = r0 + 0xFFFFFF38
	// succ:  l00000E85
l00000E85:
	branch Test(ULT,C) l00000E89
	// succ:  l00000E85_1 l00000E89
l00000E85_1:
	r4 = r1 & ~0x000002D0
	// succ:  l00000E89
l00000E89:
	branch Test(GT,NZ) l00000E8D
	// succ:  l00000E89_1 l00000E8D
l00000E89_1:
	call fn00AC1031 (retsize: 0;)
	// succ:  l00000E8D
l00000E8D:
	branch Test(NE,Z) l00000E91
	// succ:  l00000E8D_1 l00000E91
l00000E8D_1:
	Mem0[r6:word32] = r0
	r6 = r6 - 0x000001D0
	// succ:  l00000E91
l00000E91:
	branch Test(EQ,Z) l00000E95
	// succ:  l00000E91_1 l00000E95
l00000E91_1:
	__mcr(0x08, 0x00000000, r0, 0x07, 0x01, 0x00000007)
	// succ:  l00000E95
l00000E95:
	branch Test(GT,NZV) l00000E99
	// succ:  l00000E95_1 l00000E99
l00000E95_1:
	lr = lr + -896
	__stcl(0x03, 0x06, Mem0[lr:void])
	Mem0[0x03:word32] = fpscr
	Mem0[0x03 + 4:word32] = lr
	0x03 = 0x03 + 8
	// succ:  l00000E99
l00000E99:
	branch Test(ULT,C) l00000E9D
	// succ:  l00000E99_1 l00000E9D
l00000E99_1:
	r0 = Mem0[r1:byte]
	r1 = r1 + 0x00000568
	// succ:  l00000E9D
l00000E9D:
	branch Test(UGE,C) l00000EA1
	// succ:  l00000E9D_1 l00000EA1
l00000E9D_1:
	r3 = Mem0[r1:word32]
	r8 = Mem0[r1 + 4:word32]
	r10 = Mem0[r1 + 8:word32]
	r1 = r1 + 12
	// succ:  l00000EA1
l00000EA1:
	branch Test(GT,NZ) l00000EA5
	// succ:  l00000EA1_1 l00000EA5
l00000EA1_1:
l00000EA5:
xTaskResumeAll_exit:


// vTaskDelay
// Return size: 0
void vTaskDelay()
vTaskDelay_entry:
	// succ:  l00000F49
l00000F49:
	sp = fp
	branch Test(GT,NZ) l00000F4D
	// succ:  l00000F49_1 l00000F4D
l00000F49_1:
	// succ:  l00000F4D
l00000F4D:
	branch Test(NE,Z) l00000F51
	// succ:  l00000F4D_1 l00000F51
l00000F4D_1:
	r4 = Mem0[r2 - -4:word32]
	r5 = Mem0[r2:word32]
	r6 = Mem0[r2 - 4:word32]
	r7 = Mem0[r2 - 8:word32]
	return
	// succ:  vTaskDelay_exit
l00000F51:
	branch Test(GE,NZV) l00000F55
	// succ:  l00000F51_1 l00000F55
l00000F51_1:
	// succ:  l00000F55
l00000F55:
	branch Test(GE,NZV) l00000F59
	// succ:  l00000F55_1 l00000F59
l00000F55_1:
	// succ:  l00000F59
l00000F59:
	branch Test(NE,Z) l00000F5D
	// succ:  l00000F59_1 l00000F5D
l00000F59_1:
	Mem0[pc:word32] = r0
	Mem0[pc + 4:word32] = r1
	Mem0[pc + 8:word32] = r4
	Mem0[pc + 12:word32] = r5
	Mem0[pc + 16:word32] = r6
	Mem0[pc + 20:word32] = r7
	Mem0[pc + 24:word32] = r8
	Mem0[pc + 28:word32] = r9
	Mem0[pc + 32:word32] = r10
	Mem0[pc + 36:word32] = fp
	Mem0[pc + 40:word32] = sp
	Mem0[pc + 44:word32] = lr
	// succ:  l00000F5D
l00000F5D:
	branch Test(GT,NZV) l00000F61
	// succ:  l00000F5D_1 l00000F61
l00000F5D_1:
	r0 = r10 - 0x02F40000
	// succ:  l00000F61
l00000F61:
	branch Test(NE,Z) l00000F65
	// succ:  l00000F61_1 l00000F65
l00000F61_1:
	r0 = r0
	r8 = Mem0[r0:int16]
	// succ:  l00000F65
l00000F65:
	branch Test(ULE,ZC) l00000F69
	// succ:  l00000F65_1 l00000F69
l00000F65_1:
l00000F69:
vTaskDelay_exit:


// vTaskDelayUntil
// Return size: 0
void vTaskDelayUntil()
vTaskDelayUntil_entry:
	// succ:  l00000F81
l00000F81:
	sp = fp
	branch Test(GT,NZV) l00000F85
	// succ:  l00000F81_1 l00000F85
l00000F81_1:
	r1 = r5 + 0x0000004A + C
	NZCV = cond(r1)
	// succ:  l00000F85
l00000F85:
	branch Test(NE,Z) l00000F89
	// succ:  l00000F85_1 l00000F89
l00000F85_1:
	r8 = DPB(r8, 0x0CF8, 16)
	// succ:  l00000F89
l00000F89:
	branch Test(LE,NZV) l00000F8D
	// succ:  l00000F89_1 l00000F8D
l00000F89_1:
	r0 = r4 ^ 0x0000001A
	NZCV = cond(r0)
	// succ:  l00000F8D
l00000F8D:
	branch Test(GT,NZV) l00000F91
	// succ:  l00000F8D_1 l00000F91
l00000F8D_1:
	r8 = r0 - 0x0000F800
	// succ:  l00000F91
l00000F91:
	branch Test(EQ,Z) l00000F95
	// succ:  l00000F91_1 l00000F95
l00000F91_1:
	Mem0[r0 - 4:word32] = r3
	Mem0[r0 - 8:word32] = r4
	Mem0[r0 - 12:word32] = r5
	Mem0[r0 - 16:word32] = r6
	Mem0[r0 - 20:word32] = r7
	Mem0[r0 - 24:word32] = pc
	r0 = r0 - 28
	// succ:  l00000F95
l00000F95:
	branch Test(NE,Z) l00000F99
	// succ:  l00000F95_1 l00000F99
l00000F95_1:
	s19 = __vmls_f32(s4, s8)
	// succ:  l00000F99
l00000F99:
vTaskDelayUntil_exit:


// vTaskPlaceOnEventList
// Return size: 0
void vTaskPlaceOnEventList()
vTaskPlaceOnEventList_entry:
	// succ:  l00000FDD
l00000FDD:
	sp = fp
	branch Test(NE,Z) l00000FE1
	// succ:  l00000FDD_1 l00000FE1
l00000FDD_1:
	Mem0[r6:byte] = (byte) r0
	r6 = r6 - 0x00000CB5
	// succ:  l00000FE1
l00000FE1:
	branch Test(UGE,C) l00000FE5
	// succ:  l00000FE1_1 l00000FE5
l00000FE1_1:
	Mem0[r8:word32] = r0
	Mem0[r8 - 4:word32] = r1
	Mem0[r8 - 8:word32] = r3
	Mem0[r8 - 12:word32] = r6
	Mem0[r8 - 16:word32] = r8
	Mem0[r8 - 20:word32] = fp
	Mem0[r8 - 24:word32] = ip
	Mem0[r8 - 28:word32] = lr
	r8 = r8 - 32
	// succ:  l00000FE5
l00000FE5:
	branch Test(UGT,ZC) l00000FE9
	// succ:  l00000FE5_1 l00000FE9
l00000FE5_1:
	r0 = !(r1 >>u r7)
	NZCV = cond(r0)
	// succ:  l00000FE9
l00000FE9:
	branch Test(GE,NZV) l00000FED
	// succ:  l00000FE9_1 l00000FED
l00000FE9_1:
	__stcl(0x00, 0x02, Mem0[r6 + -996:void])
	Mem0[0x00:word32] = cpsr
	Mem0[0x00 + 4:word32] = r6
	// succ:  l00000FED
l00000FED:
	branch Test(UGE,C) l00000FF1
	// succ:  l00000FED_1 l00000FF1
l00000FED_1:
	Mem0[r0:byte] = (byte) r1
	r0 = r0 - 0x000000E8
	// succ:  l00000FF1
l00000FF1:
	branch Test(LE,NZV) l00000FF5
	// succ:  l00000FF1_1 l00000FF5
l00000FF1_1:
	r0 = Mem0[0x00000FF9:word32]
	pc = pc + 0x000000E4
	// succ:  l00000FF5
l00000FF5:
vTaskPlaceOnEventList_exit:


// vTaskPlaceOnUnorderedEventList
// Return size: 0
void vTaskPlaceOnUnorderedEventList()
vTaskPlaceOnUnorderedEventList_entry:
	// succ:  l00000FF9
l00000FF9:
	sp = fp
vTaskPlaceOnUnorderedEventList_exit:


// xTaskRemoveFromEventList
// Return size: 0
void xTaskRemoveFromEventList()
xTaskRemoveFromEventList_entry:
	// succ:  l0000101D
l0000101D:
	sp = fp
xTaskRemoveFromEventList_exit:


// xTaskRemoveFromUnorderedEventList
// Return size: 0
void xTaskRemoveFromUnorderedEventList()
xTaskRemoveFromUnorderedEventList_entry:
	// succ:  l00001081
l00001081:
	sp = fp
xTaskRemoveFromUnorderedEventList_exit:


// vTaskSwitchContext
// Return size: 0
void vTaskSwitchContext()
vTaskSwitchContext_entry:
	// succ:  l000010D9
l000010D9:
	sp = fp
	branch Test(ULE,ZC) l000010DD
	// succ:  l000010D9_1 l000010DD
l000010D9_1:
l000010DD:
	branch Test(LE,NZV) l000010E1
	// succ:  l000010DD_1 l000010E1
l000010DD_1:
	ip = r9 + 0xC0000000 + C
	NZCV = cond(ip)
	// succ:  l000010E1
l000010E1:
	branch Test(GT,NZV) l000010E5
	// succ:  l000010E1_1 l000010E5
l000010E1_1:
	NZCV = cond(r0 ^ 0x000000F8)
	// succ:  l000010E5
l000010E5:
vTaskSwitchContext_exit:


// uxTaskResetEventItemValue
// Return size: 0
void uxTaskResetEventItemValue()
uxTaskResetEventItemValue_entry:
	// succ:  l00001121
l00001121:
	sp = fp
	branch Test(GT,NZ) l00001121_then
	call fn01A17655 (retsize: 0;)
	return
	// succ:  l00001125 l00001121_then
l00001121_then:
l00001125:
	branch Test(ULE,ZC) l00001129
	// succ:  l00001125_1 l00001129
l00001125_1:
	Mem0[r8:word32] = r3
	Mem0[r8 - 4:word32] = r5
	Mem0[r8 - 8:word32] = r6
	Mem0[r8 - 12:word32] = r8
	Mem0[r8 - 16:word32] = r9
	Mem0[r8 - 20:word32] = fp
	Mem0[r8 - 24:word32] = ip
	Mem0[r8 - 28:word32] = lr
	r8 = r8 - 32
	// succ:  l00001129
l00001129:
	// succ:  uxTaskResetEventItemValue_exit
uxTaskResetEventItemValue_exit:


// xTaskGetCurrentTaskHandle
// Return size: 0
void xTaskGetCurrentTaskHandle()
xTaskGetCurrentTaskHandle_entry:
	// succ:  l00001139
l00001139:
	sp = fp
	branch Test(OV,V) l0000113D
	// succ:  l00001139_1 l0000113D
l00001139_1:
	r5 = r8 - (fp >> 16)
	// succ:  l0000113D
l0000113D:
	branch Test(LE,NZV) l00001141
	// succ:  l0000113D_1 l00001141
l0000113D_1:
	r0 = Mem0[0x00001145:word32]
	pc = pc + 0x00000047
	// succ:  l00001141
l00001141:
xTaskGetCurrentTaskHandle_exit:


// vTaskSetTimeOutState
// Return size: 0
void vTaskSetTimeOutState()
vTaskSetTimeOutState_entry:
	// succ:  l00001145
l00001145:
	sp = fp
	branch Test(UGT,ZC) l00001149
	// succ:  l00001145_1 l00001149
l00001145_1:
	sp = Mem0[r8:byte]
	r8 = r8 + 0x0000034B
	// succ:  l00001149
l00001149:
	branch Test(ULE,ZC) l0000114D
	// succ:  l00001149_1 l0000114D
l00001149_1:
	sp = (r0 >>u 6) - r8 - C
	NZCV = cond(sp)
	// succ:  l0000114D
l0000114D:
	branch Test(NE,Z) l00001151
	// succ:  l0000114D_1 l00001151
l0000114D_1:
	r8 = r8
	__stcl(0x00, 0x08, Mem0[r8:void])
	Mem0[0x00 + 4:word32] = r8
	0x00 = 0x00 + 8
	// succ:  l00001151
l00001151:
	branch Test(LE,NZV) l00001155
	// succ:  l00001151_1 l00001155
l00001151_1:
	Mem0[r7:byte] = (byte) r7
	r7 = r7 - 0x00000000
	// succ:  l00001155
l00001155:
	branch Test(OV,V) l00001155_thunk_xTaskCheckForTimeOut
	// succ:  l00001155_1 l00001155_thunk_xTaskCheckForTimeOut
l00001155_1:
	r0 = r0 ^ r0
	goto l00001155_thunk_xTaskCheckForTimeOut
	// succ:  l00001155_thunk_xTaskCheckForTimeOut
l00001155_thunk_xTaskCheckForTimeOut:
	call xTaskCheckForTimeOut (retsize: 0;)
	return
	// succ:  vTaskSetTimeOutState_exit
l00001155_thunk_xTaskCheckForTimeOut:
	call xTaskCheckForTimeOut (retsize: 0;)
	return
	// succ:  vTaskSetTimeOutState_exit
vTaskSetTimeOutState_exit:


// xTaskCheckForTimeOut
// Return size: 0
void xTaskCheckForTimeOut()
xTaskCheckForTimeOut_entry:
	// succ:  l00001159
l00001159:
	sp = fp
	branch Test(NE,Z) l0000115D
	// succ:  l00001159_1 l0000115D
l00001159_1:
	__mcr(0x04, 0x00000002, r0, 0x06, 0x05, 0x00000005)
	// succ:  l0000115D
l0000115D:
	branch Test(NE,Z) l00001161
	// succ:  l0000115D_1 l00001161
l0000115D_1:
	call fnFFC02E7D (retsize: 0;)
	// succ:  l00001161
l00001161:
	branch Test(ULT,C) l00001165
	// succ:  l00001161_1 l00001165
l00001161_1:
	Mem0[fp + -26:word64] = r2_r1
	// succ:  l00001165
l00001165:
	branch Test(ULE,ZC) l00001169
	// succ:  l00001165_1 l00001169
l00001165_1:
	sp = __ror(r8, 6) - r8 - C
	NZCV = cond(sp)
	// succ:  l00001169
l00001169:
	branch Test(UGT,ZC) l0000116D
	// succ:  l00001169_1 l0000116D
l00001169_1:
	sp = Mem0[r8:byte]
	r8 = r8 + 0x00000350
	// succ:  l0000116D
l0000116D:
xTaskCheckForTimeOut_exit:


// vTaskMissedYield
// Return size: 0
void vTaskMissedYield()
vTaskMissedYield_entry:
	// succ:  l000011AD
l000011AD:
	sp = fp
	branch Test(LE,NZV) l000011B1
	// succ:  l000011AD_1 l000011B1
l000011AD_1:
	r0 = DPB(r0, 0xB222, 16)
	// succ:  l000011B1
l000011B1:
vTaskMissedYield_exit:


// vTaskPriorityInherit
// Return size: 0
void vTaskPriorityInherit()
vTaskPriorityInherit_entry:
	// succ:  l000011BD
l000011BD:
	sp = fp
vTaskPriorityInherit_exit:


// xTaskPriorityDisinherit
// Return size: 0
void xTaskPriorityDisinherit()
xTaskPriorityDisinherit_entry:
	// succ:  l00001251
l00001251:
	sp = fp
xTaskPriorityDisinherit_exit:


// pvTaskIncrementMutexHeldCount
// Return size: 0
void pvTaskIncrementMutexHeldCount()
pvTaskIncrementMutexHeldCount_entry:
	// succ:  l000012D5
l000012D5:
	sp = fp
	branch Test(NE,Z) l000012D5_then
	call fn01A17C09 (retsize: 0;)
	return
	// succ:  l000012D9 l000012D5_then
l000012D5_then:
l000012D9:
	branch Test(GT,NZV) l000012D9_then
	call fn01A179A5 (retsize: 0;)
	return
	// succ:  l000012DD l000012D9_then
l000012D9_then:
l000012DD:
	branch Test(GT,NZV) l000012DD_then
	call fn00C81899 (retsize: 0;)
	return
	// succ:  l000012E1 l000012DD_then
l000012DD_then:
l000012E1:
	branch Test(OV,V) l000012E5
	// succ:  l000012E1_1 l000012E5
l000012E1_1:
	r5 = r8 - __ror(r5, 16)
	// succ:  l000012E5
l000012E5:
	branch Test(LE,NZV) l000012E9
	// succ:  l000012E5_1 l000012E9
l000012E5_1:
	r0 = Mem0[0x000012ED:word32]
	pc = pc + 0x00000047
	// succ:  l000012E9
l000012E9:
	branch Test(NE,Z) l000012ED
	// succ:  l000012E9_1 l000012ED
l000012E9_1:
	r0 = r0 ^ r0
	// succ:  l000012ED
l000012ED:
	branch Test(GT,NZV) l000012ED_thunk_prvRestoreContextOfFirstTask
	// succ:  pvTaskIncrementMutexHeldCount_exit pvTaskIncrementMutexHeldCount_exit pvTaskIncrementMutexHeldCount_exit l000012ED_1 l000012ED_thunk_prvRestoreContextOfFirstTask
l000012ED_1:
	goto l000012ED_thunk_prvRestoreContextOfFirstTask
	// succ:  l000012ED_thunk_prvRestoreContextOfFirstTask
l000012ED_thunk_prvRestoreContextOfFirstTask:
	call prvRestoreContextOfFirstTask (retsize: 0;)
	return
	// succ:  pvTaskIncrementMutexHeldCount_exit
l000012ED_thunk_prvRestoreContextOfFirstTask:
	call prvRestoreContextOfFirstTask (retsize: 0;)
	return
	// succ:  pvTaskIncrementMutexHeldCount_exit
pvTaskIncrementMutexHeldCount_exit:


// prvRestoreContextOfFirstTask
// Return size: 0
void prvRestoreContextOfFirstTask()
prvRestoreContextOfFirstTask_entry:
	// succ:  l000012F1
l000012F1:
	sp = fp
	branch Test(NE,Z) l000012F5
	// succ:  l000012F1_1 l000012F5
l000012F1_1:
	Mem0[r4:word64] = r4_r3
	r4 = r4 - r8
	// succ:  l000012F5
l000012F5:
	branch Test(ULE,ZC) l000012F9
	// succ:  l000012F5_1 l000012F9
l000012F5_1:
	r0 = r8 - __ror(r8, 0)
	// succ:  l000012F9
l000012F9:
	branch Test(NE,Z) l000012FD
	// succ:  l000012F9_1 l000012FD
l000012F9_1:
l000012FD:
	branch Test(NE,Z) l00001301
	// succ:  l000012FD_1 l00001301
l000012FD_1:
	Mem0[r8:word32] = r0
	Mem0[r8 - 4:word32] = r1
	Mem0[r8 - 8:word32] = r3
	Mem0[r8 - 12:word32] = r6
	Mem0[r8 - 16:word32] = r8
	Mem0[r8 - 20:word32] = fp
	Mem0[r8 - 24:word32] = ip
	r8 = r8 - 28
	// succ:  l00001301
l00001301:
	branch Test(NE,Z) l00001305
	// succ:  l00001301_1 l00001305
l00001301_1:
	r0 = Mem0[r1:byte]
	r1 = r1 + 0x00000168
	// succ:  l00001305
l00001305:
	branch Test(ULT,C) l00001309
	// succ:  l00001305_1 l00001309
l00001305_1:
	sp = (r1 << 30) - r8 - C
	NZCV = cond(sp)
	// succ:  l00001309
l00001309:
prvRestoreContextOfFirstTask_exit:


// prvSVCHandler
// Return size: 0
void prvSVCHandler()
prvSVCHandler_entry:
	// succ:  l00001335
l00001335:
	sp = fp
	branch Test(NE,Z) l00001339
	// succ:  l00001335_1 l00001339
l00001335_1:
	r1 = 0xA4000001 - r8 - C
	NZCV = cond(r1)
	// succ:  l00001339
l00001339:
	branch Test(EQ,Z) l0000133D
	// succ:  l00001339_1 l0000133D
l00001339_1:
	r0 = fp ^ ip >>u r1
	// succ:  l0000133D
l0000133D:
	branch Test(NE,Z) l00001341
	// succ:  l0000133D_1 l00001341
l0000133D_1:
	r0 = r3 - 0x00340000 - C
	NZCV = cond(r0)
	// succ:  l00001341
l00001341:
	branch Test(ULT,C) l00001349
	// succ:  l00001345_1 l00001349
l00001345_1:
	Mem0[r1:word64] = r2_r1
	// succ:  l00001349
l00001349:
	branch Test(ULE,ZC) l0000134D
	// succ:  l00001349_1 l0000134D
l00001349_1:
	Mem0[r1:word64] = r1_r0
	// succ:  l0000134D
l0000134D:
	branch Test(OV,V) l00001351
	// succ:  l0000134D_1 l00001351
l0000134D_1:
	Mem0[r8:word64] = r2_r1
	r8 = r8 + r3
	// succ:  l00001351
l00001351:
	branch Test(NE,Z) l00001355
	// succ:  l00001351_1 l00001355
l00001351_1:
	Mem0[r7:byte] = (byte) r7
	// succ:  l00001355
l00001355:
prvSVCHandler_exit:


// pxPortInitialiseStack
// Return size: 0
void pxPortInitialiseStack()
pxPortInitialiseStack_entry:
	// succ:  l0000137D
l0000137D:
	sp = fp
	branch Test(NE,Z) l00001381
	// succ:  l0000137D_1 l00001381
l0000137D_1:
	r0 = Mem0[r4:word32]
	r1 = Mem0[r4 + 4:word32]
	r3 = Mem0[r4 + 8:word32]
	r5 = Mem0[r4 + 12:word32]
	ip = Mem0[r4 + 16:word32]
	sp = Mem0[r4 + 20:word32]
	r4 = r4 + 24
	// succ:  l00001381
l00001381:
	branch Test(GT,NZ) l00001385
	// succ:  l00001381_1 l00001385
l00001381_1:
	// succ:  l00001385
l00001385:
	branch Test(GT,NZ) l00001389
	// succ:  l00001385_1 l00001389
l00001385_1:
	// succ:  l00001389
l00001389:
	branch Test(EQ,Z) l0000138D
	// succ:  l00001389_1 l0000138D
l00001389_1:
	Mem0[r4:word32] = r4
	Mem0[r4 - 4:word32] = r5
	Mem0[r4 - 8:word32] = r6
	Mem0[r4 - 12:word32] = r7
	// succ:  l0000138D
l0000138D:
pxPortInitialiseStack_exit:


// xPortStartScheduler
// Return size: 0
void xPortStartScheduler()
xPortStartScheduler_entry:
	// succ:  l000013B1
l000013B1:
	sp = fp
	branch Test(NE,Z) l000013B1_then
	call fnFED1D4E5 (retsize: 0;)
	return
	// succ:  l000013B5 l000013B1_then
l000013B1_then:
l000013B5:
	branch Test(GT,NZ) l000013B9
	// succ:  l000013B5_1 l000013B9
l000013B5_1:
	r4 = r9 - 0x00001A00
	// succ:  l000013B9
l000013B9:
	branch Test(NE,Z) l000013B9_then
	call fn000A1391 (retsize: 0;)
	return
	// succ:  l000013BD l000013B9_then
l000013B9_then:
l000013BD:
	branch Test(GT,NZ) l000013C1
	// succ:  l000013BD_1 l000013C1
l000013BD_1:
	r1 = r8 - 0x00060000
	// succ:  l000013C1
l000013C1:
	branch Test(NE,Z) l000013C1_then
	call fn010A1389 (retsize: 0;)
	return
	// succ:  l000013C5 l000013C1_then
l000013C1_then:
l000013C5:
	// succ:  xPortStartScheduler_exit xPortStartScheduler_exit xPortStartScheduler_exit
xPortStartScheduler_exit:


// vPortEndScheduler
// Return size: 0
void vPortEndScheduler()
vPortEndScheduler_entry:
	// succ:  l00001551
l00001551:
	sp = fp
	branch Test(UGE,C) l00001551_thunk_vPortStoreTaskMPUSettings
	// succ:  l00001551_1 l00001551_thunk_vPortStoreTaskMPUSettings
l00001551_1:
	r0 = pc + (r7 >> 32) + C
	NZCV = cond(r0)
	goto l00001551_thunk_vPortStoreTaskMPUSettings
	// succ:  l00001551_thunk_vPortStoreTaskMPUSettings
l00001551_thunk_vPortStoreTaskMPUSettings:
	call vPortStoreTaskMPUSettings (retsize: 0;)
	return
	// succ:  vPortEndScheduler_exit
l00001551_thunk_vPortStoreTaskMPUSettings:
	call vPortStoreTaskMPUSettings (retsize: 0;)
	return
	// succ:  vPortEndScheduler_exit
vPortEndScheduler_exit:


// vPortStoreTaskMPUSettings
// Return size: 0
void vPortStoreTaskMPUSettings()
vPortStoreTaskMPUSettings_entry:
	// succ:  l00001555
l00001555:
	sp = fp
	branch Test(GT,NZ) l00001559
	// succ:  l00001555_1 l00001559
l00001555_1:
	r9 = r9
	Mem0[r9:word16] = (uint16) r0
	// succ:  l00001559
l00001559:
	branch Test(NE,Z) l0000155D
	// succ:  l00001559_1 l0000155D
l00001559_1:
	fp = fp + 3024
	r4 = Mem0[fp:word32]
	// succ:  l0000155D
l0000155D:
vPortStoreTaskMPUSettings_exit:


// xPortPendSVHandler
// Return size: 0
void xPortPendSVHandler()
xPortPendSVHandler_entry:
	// succ:  l00001689
l00001689:
	sp = fp
	branch Test(EQ,Z) l0000168D
	// succ:  l00001689_1 l0000168D
l00001689_1:
	Mem0[r0:word32] = r0
	r0 = r0 + 0x000009F3
	// succ:  l0000168D
l0000168D:
	branch Test(ULT,C) l00001695
	// succ:  l00001691_1 l00001695
l00001691_1:
	Mem0[r1:word64] = r2_r1
	r1 = r1 + r3
	// succ:  l00001695
l00001695:
	branch Test(EQ,Z) l00001699
	// succ:  l00001695_1 l00001699
l00001695_1:
	pc = pc & __ror(r9, 5)
	// succ:  l00001699
l00001699:
	branch Test(NE,Z) l0000169D
	// succ:  l00001699_1 l0000169D
l00001699_1:
	Mem0[r9:word32] = r5
	Mem0[r9 + 4:word32] = r6
	Mem0[r9 + 8:word32] = r8
	Mem0[r9 + 12:word32] = r10
	Mem0[r9 + 16:word32] = fp
	Mem0[r9 + 20:word32] = sp
	r9 = r9 + 24
	// succ:  l0000169D
l0000169D:
	branch Test(GE,NZV) l000016A1
	// succ:  l0000169D_1 l000016A1
l0000169D_1:
	// succ:  l000016A1
l000016A1:
xPortPendSVHandler_exit:


// xPortSysTickHandler
// Return size: 0
void xPortSysTickHandler()
xPortSysTickHandler_entry:
	// succ:  l000016E5
l000016E5:
	sp = fp
	branch Test(EQ,Z) l000016E9
	// succ:  l000016E5_1 l000016E9
l000016E5_1:
	r3 = r3 + 245
	lr = Mem0[r3:word16]
	// succ:  l000016E9
l000016E9:
	branch Test(GE,NZV) l000016ED
	// succ:  l000016E9_1 l000016ED
l000016E9_1:
	// succ:  l000016ED
l000016ED:
xPortSysTickHandler_exit:


// vPortSVCHandler
// Return size: 0
void vPortSVCHandler()
vPortSVCHandler_entry:
	// succ:  l00001715
l00001715:
	sp = fp
vPortSVCHandler_exit:


// pvPortMalloc
// Return size: 0
void pvPortMalloc()
pvPortMalloc_entry:
	// succ:  l0000172D
l0000172D:
	sp = fp
	branch Test(GT,NZ) l00001731
	// succ:  l0000172D_1 l00001731
l0000172D_1:
	r0 = DPB(r0, 0x64B5, 16)
	// succ:  l00001731
l00001731:
	branch Test(ULT,C) l00001735
	// succ:  l00001731_1 l00001735
l00001731_1:
	r1 = pc + (r7 << 24) + C
	NZCV = cond(r1)
	// succ:  l00001735
l00001735:
	branch Test(NE,Z) l00001739
	// succ:  l00001735_1 l00001739
l00001735_1:
	Mem0[r4:word32] = r4
	Mem0[r4 - 4:word32] = r5
	Mem0[r4 - 8:word32] = r6
	Mem0[r4 - 12:word32] = r7
	Mem0[r4 - 16:word32] = r8
	Mem0[r4 - 20:word32] = r9
	Mem0[r4 - 24:word32] = r10
	// succ:  l00001739
l00001739:
pvPortMalloc_exit:


// vPortFree
// Return size: 0
void vPortFree()
vPortFree_entry:
	// succ:  l00001781
l00001781:
	sp = fp
	branch Test(NE,Z) l00001781_thunk_vPortInitialiseBlocks
	// succ:  l00001781_1 l00001781_thunk_vPortInitialiseBlocks
l00001781_1:
	r0 = pc + (r7 >> 32) + C
	NZCV = cond(r0)
	goto l00001781_thunk_vPortInitialiseBlocks
	// succ:  l00001781_thunk_vPortInitialiseBlocks
l00001781_thunk_vPortInitialiseBlocks:
	call vPortInitialiseBlocks (retsize: 0;)
	return
	// succ:  vPortFree_exit
l00001781_thunk_vPortInitialiseBlocks:
	call vPortInitialiseBlocks (retsize: 0;)
	return
	// succ:  vPortFree_exit
vPortFree_exit:


// vPortInitialiseBlocks
// Return size: 0
void vPortInitialiseBlocks()
vPortInitialiseBlocks_entry:
	// succ:  l00001785
l00001785:
	sp = fp
	branch Test(LE,NZV) l00001789
	// succ:  l00001785_1 l00001789
l00001785_1:
	r0 = DPB(r0, 0xB222, 16)
	// succ:  l00001789
l00001789:
vPortInitialiseBlocks_exit:


// xPortGetFreeHeapSize
// Return size: 0
void xPortGetFreeHeapSize()
xPortGetFreeHeapSize_entry:
	// succ:  l00001795
l00001795:
	sp = fp
	branch Test(LE,NZV) l00001799
	// succ:  l00001795_1 l00001799
l00001795_1:
	sp = (fp >> 6) - r8 - C
	NZCV = cond(sp)
	// succ:  l00001799
l00001799:
	branch Test(GE,NZV) l0000179D
	// succ:  l00001799_1 l0000179D
l00001799_1:
	ip = Mem0[r5:byte]
	r5 = r5 + r5
	// succ:  l0000179D
l0000179D:
	branch Test(OV,V) l000017A1
	// succ:  l0000179D_1 l000017A1
l0000179D_1:
	r0 = r0 ^ __ror(r0, 8)
	NZCV = cond(r0)
	// succ:  l000017A1
l000017A1:
	branch Test(UGE,C) l000017A5
	// succ:  l000017A1_1 l000017A5
l000017A1_1:
	r0 = pc + (r7 >> 32) + C
	NZCV = cond(r0)
	// succ:  l000017A5
l000017A5:
	branch Test(EQ,Z) l000017A5_thunk_xEventGroupCreate
	// succ:  l000017A5_1 l000017A5_thunk_xEventGroupCreate
l000017A5_1:
	r0 = r0 ^ r2
	goto l000017A5_thunk_xEventGroupCreate
	// succ:  l000017A5_thunk_xEventGroupCreate
l000017A5_thunk_xEventGroupCreate:
	call xEventGroupCreate (retsize: 0;)
	return
	// succ:  xPortGetFreeHeapSize_exit
l000017A5_thunk_xEventGroupCreate:
	call xEventGroupCreate (retsize: 0;)
	return
	// succ:  xPortGetFreeHeapSize_exit
xPortGetFreeHeapSize_exit:


// xEventGroupCreate
// Return size: 0
void xEventGroupCreate()
xEventGroupCreate_entry:
	// succ:  l000017A9
l000017A9:
	sp = fp
xEventGroupCreate_exit:


// xEventGroupWaitBits
// Return size: 0
void xEventGroupWaitBits()
xEventGroupWaitBits_entry:
	// succ:  l000017C5
l000017C5:
	sp = fp
	branch Test(NE,Z) l000017C9
	// succ:  l000017C5_1 l000017C9
l000017C5_1:
	Mem0[r1:byte] = (byte) pc
	r1 = r1 - __ror(r9, 1)
	// succ:  l000017C9
l000017C9:
	branch Test(NE,Z) l000017CD
	// succ:  l000017C9_1 l000017CD
l000017C9_1:
	__stcl(0x0F, 0x01, Mem0[r6 + -280:void])
	Mem0[0x0F:word32] = cpsr
	Mem0[0x0F + 4:word32] = r6
	// succ:  l000017CD
l000017CD:
xEventGroupWaitBits_exit:


// xEventGroupClearBits
// Return size: 0
void xEventGroupClearBits()
xEventGroupClearBits_entry:
	// succ:  l00001875
l00001875:
	sp = fp
	branch Test(NE,Z) l00001879
	// succ:  l00001875_1 l00001879
l00001875_1:
l00001879:
	branch Test(OV,V) l0000187D
	// succ:  l00001879_1 l0000187D
l00001879_1:
l0000187D:
	branch Test(ULT,C) l00001881
	// succ:  l0000187D_1 l00001881
l0000187D_1:
	r8 = r8 + -1534
	Mem0[r8:byte] = (byte) r3
	// succ:  l00001881
l00001881:
	branch Test(UGE,C) l00001885
	// succ:  l00001881_1 l00001885
l00001881_1:
	Mem0[r4:word32] = r0
	r4 = r4 - 0x000004EA
	// succ:  l00001885
l00001885:
	branch Test(UGT,ZC) l00001889
	// succ:  l00001885_1 l00001889
l00001885_1:
	r0 = !0x06000000
	NZCV = cond(r0)
	// succ:  l00001889
l00001889:
	branch Test(OV,V) l0000188D
	// succ:  l00001889_1 l0000188D
l00001889_1:
	Mem0[r6:word64] = r3_r2
	r6 = r6 + 0xFFFFFF72
	// succ:  l0000188D
l0000188D:
xEventGroupClearBits_exit:


// xEventGroupSetBits
// Return size: 0
void xEventGroupSetBits()
xEventGroupSetBits_entry:
	// succ:  l00001891
l00001891:
	sp = fp
	branch Test(NE,Z) l00001895
	// succ:  l00001891_1 l00001895
l00001891_1:
l00001895:
	branch Test(GE,NZV) l00001899
	// succ:  l00001895_1 l00001899
l00001895_1:
	r1 = Mem0[r7 + 4:word32]
	r2 = Mem0[r7 + 8:word32]
	r6 = Mem0[r7 + 12:word32]
	r8 = Mem0[r7 + 16:word32]
	r9 = Mem0[r7 + 20:word32]
	r10 = Mem0[r7 + 24:word32]
	fp = Mem0[r7 + 28:word32]
	ip = Mem0[r7 + 32:word32]
	sp = Mem0[r7 + 36:word32]
	lr = Mem0[r7 + 40:word32]
	r7 = r7 + 48
	return
	// succ:  xEventGroupSetBits_exit
l00001899:
	branch Test(ULT,C) l0000189D
	// succ:  l00001899_1 l0000189D
l00001899_1:
	Mem0[r8:word32] = r3
	Mem0[r8 - 4:word32] = r4
	Mem0[r8 - 8:word32] = r5
	Mem0[r8 - 12:word32] = r6
	Mem0[r8 - 16:word32] = r7
	Mem0[r8 - 20:word32] = r8
	Mem0[r8 - 24:word32] = fp
	Mem0[r8 - 28:word32] = sp
	r8 = r8 - 32
	// succ:  l0000189D
l0000189D:
	branch Test(NE,Z) l000018A1
	// succ:  l0000189D_1 l000018A1
l0000189D_1:
l000018A1:
	branch Test(ULE,ZC) l000018A5
	// succ:  l000018A1_1 l000018A5
l000018A1_1:
	Mem0[r3:byte] = (byte) r2
	r3 = r3 - (r6 << 2)
	// succ:  l000018A5
l000018A5:
	branch Test(ULT,C) l000018A9
	// succ:  l000018A5_1 l000018A9
l000018A5_1:
	r2 = r0 - 0x00108000
	// succ:  l000018A9
l000018A9:
	branch Test(NE,Z) l000018AD
	// succ:  l000018A9_1 l000018AD
l000018A9_1:
l000018AD:
	branch Test(NE,Z) l000018B1
	// succ:  l000018AD_1 l000018B1
l000018AD_1:
	Mem0[r2:byte] = (byte) r0
	// succ:  l000018B1
l000018B1:
	branch Test(NE,Z) l000018B5
	// succ:  l000018B1_1 l000018B5
l000018B1_1:
	lr_sp = Mem0[r1:word64]
	r1 = r1 - r0
	// succ:  l000018B5
l000018B5:
	branch Test(GT,NZ) l000018B9
	// succ:  l000018B5_1 l000018B9
l000018B5_1:
	r2_r1 = Mem0[r3 + -117:word64]
	// succ:  l000018B9
l000018B9:
xEventGroupSetBits_exit:


// xEventGroupSync
// Return size: 0
void xEventGroupSync()
xEventGroupSync_entry:
	// succ:  l000018F9
l000018F9:
	sp = fp
	branch Test(ULE,ZC) l000018FD
	// succ:  l000018F9_1 l000018FD
l000018F9_1:
	Mem0[r1:word32] = r0
	Mem0[r1 - 4:word32] = r3
	Mem0[r1 - 8:word32] = r5
	Mem0[r1 - 12:word32] = r6
	Mem0[r1 - 16:word32] = r7
	Mem0[r1 - 20:word32] = ip
	Mem0[r1 - 24:word32] = sp
	Mem0[r1 - 28:word32] = lr
	Mem0[r1 - 32:word32] = pc
	// succ:  l000018FD
l000018FD:
	branch Test(EQ,Z) l00001901
	// succ:  l000018FD_1 l00001901
l000018FD_1:
	Mem0[r6:byte] = (byte) r0
	r6 = r6 - (r6 >> 10)
	// succ:  l00001901
l00001901:
xEventGroupSync_exit:


// xEventGroupGetBitsFromISR
// Return size: 0
void xEventGroupGetBitsFromISR()
xEventGroupGetBitsFromISR_entry:
	// succ:  l00001989
l00001989:
	sp = fp
	branch Test(GT,NZ) l0000198D
	// succ:  l00001989_1 l0000198D
l00001989_1:
	// succ:  l0000198D
l0000198D:
	branch Test(ULE,ZC) l00001991
	// succ:  l0000198D_1 l00001991
l0000198D_1:
	fp = r2 & 0x000003C0
	// succ:  l00001991
l00001991:
	branch Test(GE,NZV) l00001995
	// succ:  l00001991_1 l00001995
l00001991_1:
	// succ:  l00001995
l00001995:
	branch Test(GE,NZV) l00001999
	// succ:  l00001995_1 l00001999
l00001995_1:
	// succ:  l00001999
l00001999:
	branch Test(ULE,ZC) l0000199D
	// succ:  l00001999_1 l0000199D
l00001999_1:
	r4 = pc | 0x000003CC
	// succ:  l0000199D
l0000199D:
	branch Test(NE,Z) l000019A1
	// succ:  l0000199D_1 l000019A1
l0000199D_1:
	Mem0[r8:word64] = r2_r1
	r8 = r8 + r3
	// succ:  l000019A1
l000019A1:
	branch Test(EQ,Z) l000019A1_thunk_vEventGroupDelete
	// succ:  l000019A1_1 l000019A1_thunk_vEventGroupDelete
l000019A1_1:
	r7 = r7 - __ror(r8, 0)
	goto l000019A1_thunk_vEventGroupDelete
	// succ:  l000019A1_thunk_vEventGroupDelete
l000019A1_thunk_vEventGroupDelete:
	call vEventGroupDelete (retsize: 0;)
	return
	// succ:  xEventGroupGetBitsFromISR_exit
l000019A1_thunk_vEventGroupDelete:
	call vEventGroupDelete (retsize: 0;)
	return
	// succ:  xEventGroupGetBitsFromISR_exit
xEventGroupGetBitsFromISR_exit:


// vEventGroupDelete
// Return size: 0
void vEventGroupDelete()
vEventGroupDelete_entry:
	// succ:  l000019A5
l000019A5:
	sp = fp
vEventGroupDelete_exit:


// vEventGroupSetBitsCallback
// Return size: 0
void vEventGroupSetBitsCallback()
vEventGroupSetBitsCallback_entry:
	// succ:  l000019D1
l000019D1:
	sp = fp
	branch Test(UGE,C) l000019D1_thunk_vEventGroupClearBitsCallback
	// succ:  l000019D1_1 l000019D1_thunk_vEventGroupClearBitsCallback
l000019D1_1:
	r0 = Mem0[pc:word32]
	r1 = Mem0[pc + 4:word32]
	r2 = Mem0[pc + 8:word32]
	r4 = Mem0[pc + 12:word32]
	r5 = Mem0[pc + 16:word32]
	r6 = Mem0[pc + 20:word32]
	r7 = Mem0[pc + 24:word32]
	r9 = Mem0[pc + 28:word32]
	r10 = Mem0[pc + 32:word32]
	fp = Mem0[pc + 36:word32]
	ip = Mem0[pc + 40:word32]
	lr = Mem0[pc + 44:word32]
	pc = pc + 48
	goto l000019D1_thunk_vEventGroupClearBitsCallback
	// succ:  l000019D1_thunk_vEventGroupClearBitsCallback
l000019D1_thunk_vEventGroupClearBitsCallback:
	call vEventGroupClearBitsCallback (retsize: 0;)
	return
	// succ:  vEventGroupSetBitsCallback_exit
l000019D1_thunk_vEventGroupClearBitsCallback:
	call vEventGroupClearBitsCallback (retsize: 0;)
	return
	// succ:  vEventGroupSetBitsCallback_exit
vEventGroupSetBitsCallback_exit:


// vEventGroupClearBitsCallback
// Return size: 0
void vEventGroupClearBitsCallback()
vEventGroupClearBitsCallback_entry:
	// succ:  l000019D5
l000019D5:
	sp = fp
	branch Test(NE,Z) l000019D9
	// succ:  l000019D5_1 l000019D9
l000019D5_1:
	__stcl(0x04, 0x00, Mem0[r6 + -724:void])
	Mem0[0x04 + 4:word32] = r6
	// succ:  l000019D9
l000019D9:
	branch Test(LE,NZV) l000019DD
	// succ:  l000019D9_1 l000019DD
l000019D9_1:
l000019DD:
vEventGroupClearBitsCallback_exit:


// NmiSR
// Return size: 0
void NmiSR()
NmiSR_entry:
	// succ:  l00008001
l00008001:
	sp = fp
NmiSR_exit:


// FaultISR
// Return size: 0
void FaultISR()
FaultISR_entry:
	// succ:  l00008005
l00008005:
	sp = fp
	branch Test(NE,Z) l00008005_thunk_ResetISR
	// succ:  l00008005_1 l00008005_thunk_ResetISR
l00008005_1:
	r0 = Mem0[pc:word32]
	r1 = Mem0[pc + 4:word32]
	r2 = Mem0[pc + 8:word32]
	r5 = Mem0[pc + 12:word32]
	r6 = Mem0[pc + 16:word32]
	r7 = Mem0[pc + 20:word32]
	pc = pc + 24
	goto l00008005_thunk_ResetISR
	// succ:  l00008005_thunk_ResetISR
l00008005_thunk_ResetISR:
	call ResetISR (retsize: 0;)
	return
	// succ:  FaultISR_exit
l00008005_thunk_ResetISR:
	call ResetISR (retsize: 0;)
	return
	// succ:  FaultISR_exit
FaultISR_exit:


// ResetISR
// Return size: 0
void ResetISR()
ResetISR_entry:
	// succ:  l00008009
l00008009:
	sp = fp
	branch Test(ULE,ZC) l0000800D
	// succ:  l00008009_1 l0000800D
l00008009_1:
	r0 = DPB(r0, 0x894B, 16)
	// succ:  l0000800D
l0000800D:
	branch Test(LE,NZV) l0000800D_then
	call fnFF48A91D (retsize: 0;)
	return
	// succ:  l00008011 l0000800D_then
l0000800D_then:
l00008011:
	branch Test(NE,Z) l00008015
	// succ:  l00008011_1 l00008015
l00008011_1:
	r0 = r1 ^ 0x00000043
	// succ:  l00008015
l00008015:
	branch Test(NE,Z) l00008019
	// succ:  l00008015_1 l00008019
l00008015_1:
	r2 = !0x40000004
	NZCV = cond(r2)
	// succ:  l00008019
l00008019:
	branch Test(NE,Z) l00008019_then
	call fn00C89029 (retsize: 0;)
	return
	// succ:  l0000801D l00008019_then
l00008019_then:
l0000801D:
	branch Test(NE,Z) l00008021
	// succ:  l0000801D_1 l00008021
l0000801D_1:
	r4 = Mem0[r8:byte]
	r8 = r8 + 0x00000344
	// succ:  l00008021
l00008021:
	call fn010ACC97 (retsize: 0;)
	branch Test(UGE,C) l00008029
	// succ:  l00008025_1 l00008029
l00008025_1:
	call fnFFC08371 (retsize: 0;)
	// succ:  l00008029
l00008029:
	r0 = Mem0[0x00008031:word16]
	pc = pc + r8
	branch Test(ULE,ZC) l00008031
	// succ:  l0000802D_1 l00008031
l0000802D_1:
	r0 = r0 ^ r1
	// succ:  l00008031
l00008031:
	// succ:  ResetISR_exit ResetISR_exit
ResetISR_exit:


// raise
// Return size: 0
void raise()
raise_entry:
	// succ:  l00008035
l00008035:
	sp = fp
	branch Test(UGE,C) l00008035_thunk_vPrintTask
	// succ:  l00008035_1 l00008035_thunk_vPrintTask
l00008035_1:
	r0 = pc + __ror(r7, 1) + C
	NZCV = cond(r0)
	goto l00008035_thunk_vPrintTask
	// succ:  l00008035_thunk_vPrintTask
l00008035_thunk_vPrintTask:
	call vPrintTask (retsize: 0;)
	return
	// succ:  raise_exit
l00008035_thunk_vPrintTask:
	call vPrintTask (retsize: 0;)
	return
	// succ:  raise_exit
raise_exit:


// vPrintTask
// Return size: 0
void vPrintTask()
vPrintTask_entry:
	// succ:  l00008039
l00008039:
	sp = fp
	branch Test(NE,Z) l0000803D
	// succ:  l00008039_1 l0000803D
l00008039_1:
	Mem0[r4 - 4:word32] = r0
	Mem0[r4 - 8:word32] = r2
	Mem0[r4 - 12:word32] = r4
	Mem0[r4 - 16:word32] = r5
	Mem0[r4 - 20:word32] = r7
	r4 = r4 - 24
	// succ:  l0000803D
l0000803D:
	branch Test(NE,Z) l00008041
	// succ:  l0000803D_1 l00008041
l0000803D_1:
	r8 = sp >> 6
	// succ:  l00008041
l00008041:
	branch Test(NE,Z) l00008045
	// succ:  l00008041_1 l00008045
l00008041_1:
	r0 = r4 ^ r9 >>u 3
	NZCV = cond(r0)
	// succ:  l00008045
l00008045:
vPrintTask_exit:


// vCheckTask
// Return size: 0
void vCheckTask()
vCheckTask_entry:
	// succ:  l00008069
l00008069:
	sp = fp
	branch Test(ULE,ZC) l0000806D
	// succ:  l00008069_1 l0000806D
l00008069_1:
	r0 = DPB(r0, 0xBBB5, 16)
	// succ:  l0000806D
l0000806D:
	branch Test(NE,Z) l00008071
	// succ:  l0000806D_1 l00008071
l0000806D_1:
	r0 = Mem0[r3:word16]
	r3 = r3 + r0
	// succ:  l00008071
l00008071:
	branch Test(NE,Z) l00008075
	// succ:  l00008071_1 l00008075
l00008071_1:
	r4 = 0x00F00000 - ip - C
	NZCV = cond(r4)
	// succ:  l00008075
l00008075:
	branch Test(GT,NZ) l00008079
	// succ:  l00008075_1 l00008079
l00008075_1:
	Mem0[sp:byte] = (byte) r0
	sp = sp - 0x000009AC
	// succ:  l00008079
l00008079:
	branch Test(ULT,C) l0000807D
	// succ:  l00008079_1 l0000807D
l00008079_1:
	Mem0[sp:word64] = r1_r0
	sp = sp - r8
	// succ:  l0000807D
l0000807D:
	branch Test(ULE,ZC) l00008081
	// succ:  l0000807D_1 l00008081
l0000807D_1:
	r1 = Mem0[r2:word32]
	r2 = Mem0[r2 + 4:word32]
	r6 = Mem0[r2 + 8:word32]
	r8 = Mem0[r2 + 12:word32]
	lr = Mem0[r2 + 16:word32]
	r2 = r2 + 20
	// succ:  l00008081
l00008081:
vCheckTask_exit:


// Main
// Return size: 0
void Main()
Main_entry:
	// succ:  l000080A1
l000080A1:
	sp = fp
Main_exit:


// vUART_ISR
// Return size: 0
void vUART_ISR()
vUART_ISR_entry:
	// succ:  l00008109
l00008109:
	sp = fp
	branch Test(EQ,Z) l0000810D
	// succ:  l00008109_1 l0000810D
l00008109_1:
	Mem0[r6 - 4:word32] = r0
	Mem0[r6 - 8:word32] = r2
	Mem0[r6 - 12:word32] = r4
	Mem0[r6 - 16:word32] = r5
	Mem0[r6 - 20:word32] = r7
	r6 = r6 - 24
	// succ:  l0000810D
l0000810D:
	branch Test(NE,Z) l00008111
	// succ:  l0000810D_1 l00008111
l0000810D_1:
	r8 = sp >> 4
	// succ:  l00008111
l00008111:
vUART_ISR_exit:


// vSetErrorLED
// Return size: 0
void vSetErrorLED()
vSetErrorLED_entry:
	// succ:  l00008185
l00008185:
	sp = fp
	branch Test(NE,Z) l00008189
	// succ:  l00008185_1 l00008189
l00008185_1:
	r0 = r0 ^ r1 >>u 14
	// succ:  l00008189
l00008189:
	branch Test(GT,NZ) l00008189_thunk_prvSetAndCheckRegisters
	// succ:  l00008189_1 l00008189_thunk_prvSetAndCheckRegisters
l00008189_1:
	goto l00008189_thunk_prvSetAndCheckRegisters
	// succ:  l00008189_thunk_prvSetAndCheckRegisters
l00008189_thunk_prvSetAndCheckRegisters:
	call prvSetAndCheckRegisters (retsize: 0;)
	return
	// succ:  vSetErrorLED_exit
l00008189_thunk_prvSetAndCheckRegisters:
	call prvSetAndCheckRegisters (retsize: 0;)
	return
	// succ:  vSetErrorLED_exit
vSetErrorLED_exit:


// prvSetAndCheckRegisters
// Return size: 0
void prvSetAndCheckRegisters()
prvSetAndCheckRegisters_entry:
	// succ:  l0000818D
l0000818D:
	sp = fp
	branch Test(NE,Z) l00008191
	// succ:  l0000818D_1 l00008191
l0000818D_1:
	call fn002CAD55 (retsize: 0;)
	// succ:  l00008191
l00008191:
	branch Test(NE,Z) l00008195
	// succ:  l00008191_1 l00008195
l00008191_1:
	call fn0000895D (retsize: 0;)
	// succ:  l00008195
l00008195:
	branch Test(NE,Z) l00008199
	// succ:  l00008195_1 l00008199
l00008195_1:
	call fn00048D61 (retsize: 0;)
	// succ:  l00008199
l00008199:
	branch Test(NE,Z) l0000819D
	// succ:  l00008199_1 l0000819D
l00008199_1:
	call fn00089165 (retsize: 0;)
	// succ:  l0000819D
l0000819D:
	branch Test(NE,Z) l000081A1
	// succ:  l0000819D_1 l000081A1
l0000819D_1:
	call fn000C9569 (retsize: 0;)
	// succ:  l000081A1
l000081A1:
	branch Test(NE,Z) l000081A5
	// succ:  l000081A1_1 l000081A5
l000081A1_1:
	call fn0010996D (retsize: 0;)
	// succ:  l000081A5
l000081A5:
	branch Test(NE,Z) l000081A9
	// succ:  l000081A5_1 l000081A9
l000081A5_1:
	call fn00149D71 (retsize: 0;)
	// succ:  l000081A9
l000081A9:
	branch Test(NE,Z) l000081AD
	// succ:  l000081A9_1 l000081AD
l000081A9_1:
	call fn0018A175 (retsize: 0;)
	// succ:  l000081AD
l000081AD:
	branch Test(NE,Z) l000081B1
	// succ:  l000081AD_1 l000081B1
l000081AD_1:
	call fn001CA579 (retsize: 0;)
	// succ:  l000081B1
l000081B1:
	branch Test(NE,Z) l000081B5
	// succ:  l000081B1_1 l000081B5
l000081B1_1:
	call fn0020A97D (retsize: 0;)
	// succ:  l000081B5
l000081B5:
	branch Test(NE,Z) l000081B9
	// succ:  l000081B5_1 l000081B9
l000081B5_1:
	call fn0024AD81 (retsize: 0;)
	// succ:  l000081B9
l000081B9:
	branch Test(NE,Z) l000081BD
	// succ:  l000081B9_1 l000081BD
l000081B9_1:
	call fn0028B185 (retsize: 0;)
	// succ:  l000081BD
l000081BD:
	branch Test(GE,NZV) l000081C1
	// succ:  l000081BD_1 l000081C1
l000081BD_1:
	call fn0030B589 (retsize: 0;)
	// succ:  l000081C1
l000081C1:
prvSetAndCheckRegisters_exit:


// vApplicationIdleHook
// Return size: 0
void vApplicationIdleHook()
vApplicationIdleHook_entry:
	// succ:  l00008211
l00008211:
	sp = fp
	branch Test(ULE,ZC) l00008215
	// succ:  l00008211_1 l00008215
l00008211_1:
	call fnFFC084ED (retsize: 0;)
	// succ:  l00008215
l00008215:
	branch Test(GE,NZV) l00008219
	// succ:  l00008215_1 l00008219
l00008215_1:
	r1 = Mem0[r7 + 4:word32]
	r2 = Mem0[r7 + 8:word32]
	r3 = Mem0[r7 + 12:word32]
	r4 = Mem0[r7 + 16:word32]
	r5 = Mem0[r7 + 20:word32]
	r6 = Mem0[r7 + 24:word32]
	r7 = Mem0[r7 + 28:word32]
	r8 = Mem0[r7 + 32:word32]
	r9 = Mem0[r7 + 36:word32]
	r10 = Mem0[r7 + 40:word32]
	fp = Mem0[r7 + 44:word32]
	ip = Mem0[r7 + 48:word32]
	sp = Mem0[r7 + 52:word32]
	lr = Mem0[r7 + 56:word32]
	r7 = r7 + 64
	return
	// succ:  vApplicationIdleHook_exit
l00008219:
	branch Test(ULE,ZC) l0000821D
	// succ:  l00008219_1 l0000821D
l00008219_1:
	r7 = r7 + 2815
	Mem0[r7:byte] = (byte) pc
	// succ:  l0000821D
l0000821D:
	branch Test(UGE,C) l0000821D_thunk_PDCInit
	// succ:  l0000821D_1 l0000821D_thunk_PDCInit
l0000821D_1:
	r0 = r0 & r1 << 1
	goto l0000821D_thunk_PDCInit
	// succ:  l0000821D_thunk_PDCInit
l0000821D_thunk_PDCInit:
	call PDCInit (retsize: 0;)
	return
	// succ:  vApplicationIdleHook_exit
l0000821D_thunk_PDCInit:
	call PDCInit (retsize: 0;)
	return
	// succ:  vApplicationIdleHook_exit
vApplicationIdleHook_exit:


// PDCInit
// Return size: 0
void PDCInit()
PDCInit_entry:
	// succ:  l00008221
l00008221:
	sp = fp
	branch Test(ULE,ZC) l00008225
	// succ:  l00008221_1 l00008225
l00008221_1:
	r1 = DPB(r1, 0x8AB5, 16)
	// succ:  l00008225
l00008225:
	branch Test(LT,NV) l00008229
	// succ:  l00008225_1 l00008229
l00008225_1:
	r4 = Mem0[r0 + 4:word32]
	r5 = Mem0[r0 + 8:word32]
	r7 = Mem0[r0 + 12:word32]
	r8 = Mem0[r0 + 16:word32]
	r0 = r0 + 20
	// succ:  l00008229
l00008229:
	branch Test(NE,Z) l0000822D
	// succ:  l00008229_1 l0000822D
l00008229_1:
	Mem0[r8 + -156:word64] = r2_r1
	// succ:  l0000822D
l0000822D:
	branch Test(NE,Z) l00008231
	// succ:  l0000822D_1 l00008231
l0000822D_1:
	r10 = 0x0F000000 - ip - C
	NZCV = cond(r10)
	// succ:  l00008231
l00008231:
	branch Test(GT,NZ) l00008235
	// succ:  l00008231_1 l00008235
l00008231_1:
	// succ:  l00008235
l00008235:
PDCInit_exit:


// PDCWrite
// Return size: 0
void PDCWrite()
PDCWrite_entry:
	// succ:  l0000829D
l0000829D:
	sp = fp
	branch Test(EQ,Z) l0000829D_then
	call fn0118B979 (retsize: 0;)
	return
	// succ:  l000082A1 l0000829D_then
l0000829D_then:
l000082A1:
	branch Test(NE,Z) l000082A5
	// succ:  l000082A1_1 l000082A5
l000082A1_1:
	r8 = r0 + (ip >> 6) + C
	NZCV = cond(r8)
	// succ:  l000082A5
l000082A5:
	branch Test(ULT,C) l000082A9
	// succ:  l000082A5_1 l000082A9
l000082A5_1:
	Mem0[r1:word64] = r1_r0
	r1 = r1 - r0
	// succ:  l000082A9
l000082A9:
	// succ:  PDCWrite_exit
PDCWrite_exit:


// vListInitialise
// Return size: 0
void vListInitialise()
vListInitialise_entry:
	// succ:  l000082D1
l000082D1:
	sp = fp
	branch Test(NE,Z) l000082D5
	// succ:  l000082D1_1 l000082D5
l000082D1_1:
	call Mem0[r1:int16] (retsize: 0;)
	return
	// succ:  vListInitialise_exit
l000082D5:
	branch Test(NE,Z) l000082D9
	// succ:  l000082D5_1 l000082D9
l000082D5_1:
	r1 = Mem0[r1:word32]
	r5 = Mem0[r1 + 4:word32]
	r1 = r1 + 8
	// succ:  l000082D9
l000082D9:
	branch Test(ULE,ZC) l000082DD
	// succ:  l000082D9_1 l000082DD
l000082D9_1:
	r8 = r0 - (r3 << 2)
	// succ:  l000082DD
l000082DD:
	branch Test(LE,NZV) l000082E1
	// succ:  l000082DD_1 l000082E1
l000082DD_1:
	r0 = 0x00000CE8
	// succ:  l000082E1
l000082E1:
	branch Test(OV,V) l000082E5
	// succ:  l000082E1_1 l000082E5
l000082E1_1:
	r0 = r1 - __ror(r0, 6)
	// succ:  l000082E5
l000082E5:
	branch Test(NE,Z) l000082E5_thunk_vListInitialiseItem
	// succ:  l000082E5_1 l000082E5_thunk_vListInitialiseItem
l000082E5_1:
	r0 = pc + (r7 >> 32) + C
	NZCV = cond(r0)
	goto l000082E5_thunk_vListInitialiseItem
	// succ:  l000082E5_thunk_vListInitialiseItem
l000082E5_thunk_vListInitialiseItem:
	call vListInitialiseItem (retsize: 0;)
	return
	// succ:  vListInitialise_exit
l000082E5_thunk_vListInitialiseItem:
	call vListInitialiseItem (retsize: 0;)
	return
	// succ:  vListInitialise_exit
vListInitialise_exit:


// vListInitialiseItem
// Return size: 0
void vListInitialiseItem()
vListInitialiseItem_entry:
	// succ:  l000082E9
l000082E9:
	sp = fp
	branch Test(OV,V) l000082ED
	// succ:  l000082E9_1 l000082ED
l000082E9_1:
	r0 = r1 - (r3 >>u 6)
	// succ:  l000082ED
l000082ED:
	branch Test(UGT,ZC) l000082ED_thunk_vListInsertEnd
	// succ:  l000082ED_1 l000082ED_thunk_vListInsertEnd
l000082ED_1:
	r0 = pc + (r7 >> 32) + C
	NZCV = cond(r0)
	goto l000082ED_thunk_vListInsertEnd
	// succ:  l000082ED_thunk_vListInsertEnd
l000082ED_thunk_vListInsertEnd:
	call vListInsertEnd (retsize: 0;)
	return
	// succ:  vListInitialiseItem_exit
l000082ED_thunk_vListInsertEnd:
	call vListInsertEnd (retsize: 0;)
	return
	// succ:  vListInitialiseItem_exit
vListInitialiseItem_exit:


// vListInsertEnd
// Return size: 0
void vListInsertEnd()
vListInsertEnd_entry:
	// succ:  l000082F1
l000082F1:
	sp = fp
	branch Test(EQ,Z) l000082F5
	// succ:  l000082F1_1 l000082F5
l000082F1_1:
	r0 = r0 & __ror(r8, 25)
	// succ:  l000082F5
l000082F5:
	branch Test(NE,Z) l000082F9
	// succ:  l000082F5_1 l000082F9
l000082F5_1:
	r8 = r8 + -196
	Mem0[r8:word16] = (uint16) r9
	// succ:  l000082F9
l000082F9:
	branch Test(UGT,ZC) l000082FD
	// succ:  l000082F9_1 l000082FD
l000082F9_1:
	r0 = r0
	__stcl(0x0C, 0x08, Mem0[r0:void])
	Mem0[0x0C + 4:word32] = r0
	0x0C = 0x0C + 8
	// succ:  l000082FD
l000082FD:
vListInsertEnd_exit:


// vListInsert
// Return size: 0
void vListInsert()
vListInsert_entry:
	// succ:  l0000830D
l0000830D:
	sp = fp
	call fn01A0B9E5 (retsize: 0;)
	branch Test(NE,Z) l00008315
	// succ:  l00008311_1 l00008315
l00008311_1:
	r1 = r0 - (ip << r1) - C
	NZCV = cond(r1)
	// succ:  l00008315
l00008315:
	branch Test(NE,Z) l00008319
	// succ:  l00008315_1 l00008319
l00008315_1:
	Mem0[r2:word64] = r1_r0
	r2 = r2 - r1
	// succ:  l00008319
l00008319:
	branch Test(LT,N) l0000831D
	// succ:  l00008319_1 l0000831D
l00008319_1:
	r1 = DPB(r1, 0x6AE0, 16)
	// succ:  l0000831D
l0000831D:
	branch Test(LT,NV) l00008321
	// succ:  l0000831D_1 l00008321
l0000831D_1:
	r8 = r8 + -3176
	Mem0[r8:byte] = (byte) r1
	// succ:  l00008321
l00008321:
	branch Test(NE,Z) l00008325
	// succ:  l00008321_1 l00008325
l00008321_1:
	call Mem0[r2:byte] (retsize: 0;)
	return
	// succ:  vListInsert_exit
l00008325:
vListInsert_exit:


// uxListRemove
// Return size: 0
void uxListRemove()
uxListRemove_entry:
	// succ:  l00008341
l00008341:
	sp = fp
uxListRemove_exit:


// xQueueCRSend
// Return size: 0
void xQueueCRSend()
xQueueCRSend_entry:
	// succ:  l00008365
l00008365:
	sp = fp
	branch Test(NE,Z) l00008369
	// succ:  l00008365_1 l00008369
l00008365_1:
	__mcr(0x05, 0x00000002, r0, 0x06, 0x05, 0x00000005)
	// succ:  l00008369
l00008369:
	branch Test(GT,NZ) l0000836D
	// succ:  l00008369_1 l0000836D
l00008369_1:
	// succ:  l0000836D
l0000836D:
	branch Test(ULE,ZC) l00008371
	// succ:  l0000836D_1 l00008371
l0000836D_1:
	fp = 0x00003FF0
	// succ:  l00008371
l00008371:
	branch Test(GE,NZV) l00008375
	// succ:  l00008371_1 l00008375
l00008371_1:
	// succ:  l00008375
l00008375:
	branch Test(GE,NZV) l00008379
	// succ:  l00008375_1 l00008379
l00008375_1:
	// succ:  l00008379
l00008379:
	branch Test(NE,Z) l0000837D
	// succ:  l00008379_1 l0000837D
l00008379_1:
	Mem0[0x00008381:word64] = r5_r4
	pc = pc + r3
	// succ:  l0000837D
l0000837D:
	branch Test(GE,NZV) l0000837D_then
	call fnFFE47745 (retsize: 0;)
	return
	// succ:  l00008381 l0000837D_then
l0000837D_then:
l00008381:
	branch Test(ULE,ZC) l00008381_then
	call fn01B03135 (retsize: 0;)
	return
	// succ:  l00008385 l00008381_then
l00008381_then:
l00008385:
	branch Test(NE,Z) l00008389
	// succ:  l00008385_1 l00008389
l00008385_1:
	r1 = r0 - (r2 >> 8) - C
	NZCV = cond(r1)
	// succ:  l00008389
l00008389:
	branch Test(NE,Z) l0000838D
	// succ:  l00008389_1 l0000838D
l00008389_1:
	r1 = Mem0[r9:int16]
	r9 = r9 + 0x00000020
	// succ:  l0000838D
l0000838D:
	// succ:  xQueueCRSend_exit xQueueCRSend_exit
xQueueCRSend_exit:


// xQueueCRReceive
// Return size: 0
void xQueueCRReceive()
xQueueCRReceive_entry:
	// succ:  l00008401
l00008401:
	sp = fp
	branch Test(GT,NZ) l00008405
	// succ:  l00008401_1 l00008405
l00008401_1:
	// succ:  l00008405
l00008405:
	branch Test(ULE,ZC) l00008409
	// succ:  l00008405_1 l00008409
l00008405_1:
	fp = 0x00003FF0
	// succ:  l00008409
l00008409:
	branch Test(GE,NZV) l0000840D
	// succ:  l00008409_1 l0000840D
l00008409_1:
	// succ:  l0000840D
l0000840D:
	branch Test(GE,NZV) l00008411
	// succ:  l0000840D_1 l00008411
l0000840D_1:
	// succ:  l00008411
l00008411:
	branch Test(ULE,ZC) l00008415
	// succ:  l00008411_1 l00008415
l00008411_1:
	Mem0[0x0000940C:word32] = r4
	// succ:  l00008415
l00008415:
	branch Test(NE,Z) l00008419
	// succ:  l00008415_1 l00008419
l00008415_1:
	r2 = r9 + __ror(fp, 26) + C
	NZCV = cond(r2)
	// succ:  l00008419
l00008419:
	branch Test(ULE,ZC) l0000841D
	// succ:  l00008419_1 l0000841D
l00008419_1:
	r3 = r1 - 0x02A00000 - C
	NZCV = cond(r3)
	// succ:  l0000841D
l0000841D:
	branch Test(EQ,Z) l00008421
	// succ:  l0000841D_1 l00008421
l0000841D_1:
	Mem0[r8:word64] = r2_r1
	r8 = r8 + r3
	// succ:  l00008421
l00008421:
	branch Test(NE,Z) l00008425
	// succ:  l00008421_1 l00008425
l00008421_1:
	r3 = sp + (r6 >> 16) + C
	NZCV = cond(r3)
	// succ:  l00008425
l00008425:
xQueueCRReceive_exit:


// xQueueCRSendFromISR
// Return size: 0
void xQueueCRSendFromISR()
xQueueCRSendFromISR_entry:
	// succ:  l000084A1
l000084A1:
	sp = fp
xQueueCRSendFromISR_exit:


// xQueueCRReceiveFromISR
// Return size: 0
void xQueueCRReceiveFromISR()
xQueueCRReceiveFromISR_entry:
	// succ:  l000084D5
l000084D5:
	sp = fp
xQueueCRReceiveFromISR_exit:


// prvIdleTask
// Return size: 0
void prvIdleTask()
prvIdleTask_entry:
	// succ:  l0000852D
l0000852D:
	sp = fp
	branch Test(UGE,C) l00008531_thunk_xTaskNotifyStateClear
	// succ:  l00008531_1 l00008531_thunk_xTaskNotifyStateClear
l00008531_1:
	Mem0[r7:word32] = r1
	Mem0[r7 + 4:word32] = r2
	Mem0[r7 + 8:word32] = r3
	Mem0[r7 + 12:word32] = r4
	Mem0[r7 + 16:word32] = r5
	Mem0[r7 + 20:word32] = r6
	Mem0[r7 + 24:word32] = r7
	Mem0[r7 + 28:word32] = r10
	Mem0[r7 + 32:word32] = fp
	Mem0[r7 + 36:word32] = ip
	Mem0[r7 + 40:word32] = sp
	Mem0[r7 + 44:word32] = lr
	Mem0[r7 + 48:word32] = pc
	r7 = r7 + 52
	goto l00008531_thunk_xTaskNotifyStateClear
	// succ:  l00008531_thunk_xTaskNotifyStateClear
l00008531_thunk_xTaskNotifyStateClear:
	call xTaskNotifyStateClear (retsize: 0;)
	return
	// succ:  prvIdleTask_exit
l00008531_thunk_xTaskNotifyStateClear:
	call xTaskNotifyStateClear (retsize: 0;)
	return
	// succ:  prvIdleTask_exit
prvIdleTask_exit:


// xTaskNotifyStateClear
// Return size: 0
void xTaskNotifyStateClear()
xTaskNotifyStateClear_entry:
	// succ:  l00008535
l00008535:
	sp = fp
	branch Test(NE,Z) l00008539
	// succ:  l00008535_1 l00008539
l00008535_1:
	r7 = Mem0[r1:word32]
	r1 = r1 + 0x000008B5
	// succ:  l00008539
l00008539:
	branch Test(EQ,Z) l0000853D
	// succ:  l00008539_1 l0000853D
l00008539_1:
l0000853D:
	r9 = Mem0[r8:byte]
	r8 = r8 + 0x000004F8
	branch Test(NE,Z) l00008545
	// succ:  l00008541_1 l00008545
l00008541_1:
	fp = fp + -560
	Mem0[fp:word32] = r0
	// succ:  l00008545
l00008545:
	branch Test(NE,Z) l00008549
	// succ:  l00008545_1 l00008549
l00008545_1:
	r3 = r3
	Mem0[r3:word16] = (uint16) r0
	// succ:  l00008549
l00008549:
	branch Test(ULE,ZC) l0000854D
	// succ:  l00008549_1 l0000854D
l00008549_1:
	Mem0[r5:word32] = r0
	r5 = r5 - 0x00000025
	// succ:  l0000854D
l0000854D:
	branch Test(NE,Z) l00008551
	// succ:  l0000854D_1 l00008551
l0000854D_1:
	r6 = Mem0[r0:int16]
	r0 = r0 + r8
	// succ:  l00008551
l00008551:
	branch Test(ULT,C) l00008555
	// succ:  l00008551_1 l00008555
l00008551_1:
	r4 = Mem0[r8:word32]
	r5 = Mem0[r8 + 4:word32]
	r6 = Mem0[r8 + 8:word32]
	r7 = Mem0[r8 + 12:word32]
	r9 = Mem0[r8 + 16:word32]
	r10 = Mem0[r8 + 20:word32]
	fp = Mem0[r8 + 24:word32]
	sp = Mem0[r8 + 28:word32]
	r8 = r8 + 32
	// succ:  l00008555
l00008555:
xTaskNotifyStateClear_exit:


// xPortRaisePrivilege
// Return size: 0
void xPortRaisePrivilege()
xPortRaisePrivilege_entry:
	// succ:  l00008565
l00008565:
	sp = fp
	branch Test(EQ,Z) l00008569
	// succ:  l00008565_1 l00008569
l00008565_1:
	Mem0[r0:word64] = r2_r1
	r0 = r0 + r3
	// succ:  l00008569
l00008569:
	branch Test(NE,Z) l00008569_then
	call fn003C8D31 (retsize: 0;)
	return
	// succ:  l0000856D l00008569_then
l00008569_then:
l0000856D:
	branch Test(NE,Z) l00008571
	// succ:  l0000856D_1 l00008571
l0000856D_1:
	r0 = r0 ^ 0x000000BF
	// succ:  l00008571
l00008571:
	// succ:  xPortRaisePrivilege_exit
xPortRaisePrivilege_exit:


// vPortEnterCritical
// Return size: 0
void vPortEnterCritical()
vPortEnterCritical_entry:
	// succ:  l00008579
l00008579:
	sp = fp
vPortEnterCritical_exit:


// vPortExitCritical
// Return size: 0
void vPortExitCritical()
vPortExitCritical_entry:
	// succ:  l000085B1
l000085B1:
	sp = fp
vPortExitCritical_exit:


// vParTestInitialise
// Return size: 0
void vParTestInitialise()
vParTestInitialise_entry:
	// succ:  l000085DD
l000085DD:
	sp = fp
	branch Test(EQ,Z) l000085E1
	// succ:  l000085DD_1 l000085E1
l000085DD_1:
	// succ:  l000085E1
l000085E1:
	branch Test(NE,Z) l000085E5
	// succ:  l000085E1_1 l000085E5
l000085E1_1:
	Mem0[fp + -1022:byte] = (byte) r0
	// succ:  l000085E5
l000085E5:
	branch Test(GE,NZV) l000085E9
	// succ:  l000085E5_1 l000085E9
l000085E5_1:
l000085E9:
vParTestInitialise_exit:


// vParTestSetLED
// Return size: 0
void vParTestSetLED()
vParTestSetLED_entry:
	// succ:  l000085F5
l000085F5:
	sp = fp
	branch Test(NE,Z) l000085F9
	// succ:  l000085F5_1 l000085F9
l000085F5_1:
	__stcl(0x04, 0x00, Mem0[r6 + -724:void])
	Mem0[0x04 + 4:word32] = r6
	// succ:  l000085F9
l000085F9:
	r0 = !(r6 >> 32)
	NZCV = cond(r0)
	branch Test(NE,Z) l00008601
	// succ:  l000085FD_1 l00008601
l000085FD_1:
l00008601:
vParTestSetLED_exit:


// vParTestToggleLED
// Return size: 0
void vParTestToggleLED()
vParTestToggleLED_entry:
	// succ:  l00008631
l00008631:
	sp = fp
	branch Test(NE,Z) l00008635
	// succ:  l00008631_1 l00008635
l00008631_1:
	Mem0[r6:word16] = (uint16) r0
	r6 = r6 + 0xFFFFFFBB
	// succ:  l00008635
l00008635:
vParTestToggleLED_exit:


// prvFlashCoRoutine
// Return size: 0
void prvFlashCoRoutine()
prvFlashCoRoutine_entry:
	// succ:  l00008671
l00008671:
	sp = fp
	branch Test(ULE,ZC) l00008675
	// succ:  l00008671_1 l00008675
l00008671_1:
	r8 = lr + 0xD4000002
	// succ:  l00008675
l00008675:
	r5 = r5 + 48
	fp = Mem0[r5:word16]
	branch Test(EQ,Z) l0000867D
	// succ:  l00008679_1 l0000867D
l00008679_1:
	call fn0118987D (retsize: 0;)
	// succ:  l0000867D
l0000867D:
prvFlashCoRoutine_exit:


// prvFixedDelayCoRoutine
// Return size: 0
void prvFixedDelayCoRoutine()
prvFixedDelayCoRoutine_entry:
	// succ:  l000086E9
l000086E9:
	sp = fp
	branch Test(ULE,ZC) l000086ED
	// succ:  l000086E9_1 l000086ED
l000086E9_1:
	r8 = lr + 0xD4000002
	// succ:  l000086ED
l000086ED:
	branch Test(LE,NZV) l000086F1
	// succ:  l000086ED_1 l000086F1
l000086ED_1:
	r5 = r5 + 48
	fp = Mem0[r5:word16]
	// succ:  l000086F1
l000086F1:
prvFixedDelayCoRoutine_exit:


// vStartFlashCoRoutines
// Return size: 0
void vStartFlashCoRoutines()
vStartFlashCoRoutines_entry:
	// succ:  l00008785
l00008785:
	sp = fp
	branch Test(NE,Z) l00008789
	// succ:  l00008785_1 l00008789
l00008785_1:
	r3 = Mem0[pc:word32]
	r5 = Mem0[pc + 4:word32]
	fp = Mem0[pc + 8:word32]
	sp = Mem0[pc + 12:word32]
	pc = pc + 16
	// succ:  l00008789
l00008789:
	branch Test(NE,Z) l0000878D
	// succ:  l00008789_1 l0000878D
l00008789_1:
	r7 = r5 + (r0 >>u 32) + C
	NZCV = cond(r7)
	// succ:  l0000878D
l0000878D:
	branch Test(NE,Z) l00008791
	// succ:  l0000878D_1 l00008791
l0000878D_1:
	Mem0[r6:byte] = (byte) r0
	r6 = r6 - 0x00000522
	// succ:  l00008791
l00008791:
	branch Test(NE,Z) l00008795
	// succ:  l00008791_1 l00008795
l00008791_1:
	r0 = r0 ^ r1 >>u 2
	// succ:  l00008795
l00008795:
	branch Test(EQ,Z) l00008795_then
	call fnFFE66B5D (retsize: 0;)
	return
	// succ:  l00008799 l00008795_then
l00008795_then:
l00008799:
	branch Test(ULE,ZC) l0000879D
	// succ:  l00008799_1 l0000879D
l00008799_1:
	Mem0[r0:word32] = r0
	Mem0[r0 - 4:word32] = r1
	Mem0[r0 - 8:word32] = r3
	Mem0[r0 - 12:word32] = r6
	Mem0[r0 - 16:word32] = fp
	Mem0[r0 - 20:word32] = ip
	r0 = r0 - 24
	// succ:  l0000879D
l0000879D:
	branch Test(NE,Z) l000087A1
	// succ:  l0000879D_1 l000087A1
l0000879D_1:
	r4 = Mem0[r1:word16]
	r1 = r1 + r1
	// succ:  l000087A1
l000087A1:
	branch Test(ULT,C) l000087A5
	// succ:  l000087A1_1 l000087A5
l000087A1_1:
	r0 = lr - 0x00090000
	// succ:  l000087A5
l000087A5:
	// succ:  vStartFlashCoRoutines_exit
vStartFlashCoRoutines_exit:


// xAreFlashCoRoutinesStillRunning
// Return size: 0
void xAreFlashCoRoutinesStillRunning()
xAreFlashCoRoutinesStillRunning_entry:
	// succ:  l000087D1
l000087D1:
	sp = fp
	branch Test(OV,V) l000087D5
	// succ:  l000087D1_1 l000087D5
l000087D1_1:
	r1 = r8 - (fp >> 16)
	// succ:  l000087D5
l000087D5:
	branch Test(LE,NZV) l000087D9
	// succ:  l000087D5_1 l000087D9
l000087D5_1:
	r0 = pc + (r7 >> 32) + C
	NZCV = cond(r0)
	// succ:  l000087D9
l000087D9:
	branch Test(OV,V) l000087D9_thunk_MPU_xTaskCreateRestricted
	// succ:  l000087D9_1 l000087D9_thunk_MPU_xTaskCreateRestricted
l000087D9_1:
	r0 = r0 ^ r0
	goto l000087D9_thunk_MPU_xTaskCreateRestricted
	// succ:  l000087D9_thunk_MPU_xTaskCreateRestricted
l000087D9_thunk_MPU_xTaskCreateRestricted:
	call MPU_xTaskCreateRestricted (retsize: 0;)
	return
	// succ:  xAreFlashCoRoutinesStillRunning_exit
l000087D9_thunk_MPU_xTaskCreateRestricted:
	call MPU_xTaskCreateRestricted (retsize: 0;)
	return
	// succ:  xAreFlashCoRoutinesStillRunning_exit
xAreFlashCoRoutinesStillRunning_exit:


// MPU_xTaskCreateRestricted
// Return size: 0
void MPU_xTaskCreateRestricted()
MPU_xTaskCreateRestricted_entry:
	// succ:  l000087DD
l000087DD:
	sp = fp
	branch Test(NE,Z) l000087E1
	// succ:  l000087DD_1 l000087E1
l000087DD_1:
	__mcr(0x05, 0x00000002, r0, 0x06, 0x05, 0x00000005)
	// succ:  l000087E1
l000087E1:
	branch Test(GE,NZV) l000087E5
	// succ:  l000087E1_1 l000087E5
l000087E1_1:
	// succ:  l000087E5
l000087E5:
	branch Test(NE,Z) l000087E9
	// succ:  l000087E5_1 l000087E9
l000087E5_1:
	Mem0[r6:byte] = (byte) r3
	r6 = r6 - 0x000001FE
	// succ:  l000087E9
l000087E9:
MPU_xTaskCreateRestricted_exit:


// MPU_xTaskCreate
// Return size: 0
void MPU_xTaskCreate()
MPU_xTaskCreate_entry:
	// succ:  l00008809
l00008809:
	sp = fp
	branch Test(ULE,ZC) l0000880D
	// succ:  l00008809_1 l0000880D
l00008809_1:
	pc = r7 - 0x000000E9
	// succ:  l0000880D
l0000880D:
	branch Test(ULE,ZC) l00008811
	// succ:  l0000880D_1 l00008811
l0000880D_1:
	Mem0[r6:word32] = r4
	Mem0[r6 - 4:word32] = r5
	Mem0[r6 - 8:word32] = r7
	Mem0[r6 - 12:word32] = r8
	Mem0[r6 - 16:word32] = r10
	// succ:  l00008811
l00008811:
	branch Test(ULE,ZC) l00008811_then
	call fn011ACD31 (retsize: 0;)
	return
	// succ:  l00008815 l00008811_then
l00008811_then:
l00008815:
	branch Test(NE,Z) l00008819
	// succ:  l00008815_1 l00008819
l00008815_1:
	call fnFE7CB135 (retsize: 0;)
	// succ:  l00008819
l00008819:
	// succ:  MPU_xTaskCreate_exit
MPU_xTaskCreate_exit:


// MPU_vTaskAllocateMPURegions
// Return size: 0
void MPU_vTaskAllocateMPURegions()
MPU_vTaskAllocateMPURegions_entry:
	// succ:  l0000884D
l0000884D:
	sp = fp
	branch Test(NE,Z) l00008851
	// succ:  l0000884D_1 l00008851
l0000884D_1:
	__mcr(0x05, 0x00000002, r0, 0x06, 0x05, 0x00000005)
	// succ:  l00008851
l00008851:
	branch Test(ULE,ZC) l00008855
	// succ:  l00008851_1 l00008855
l00008851_1:
	r7 = r7
	call Mem0[r7:byte] (retsize: 0;)
	return
	// succ:  MPU_vTaskAllocateMPURegions_exit
l00008855:
	branch Test(UGE,C) l00008859
	// succ:  l00008855_1 l00008859
l00008855_1:
	Mem0[r6 + -78:word64] = r1_r0
	// succ:  l00008859
l00008859:
MPU_vTaskAllocateMPURegions_exit:


// MPU_vTaskDelayUntil
// Return size: 0
void MPU_vTaskDelayUntil()
MPU_vTaskDelayUntil_entry:
	// succ:  l00008875
l00008875:
	sp = fp
	branch Test(NE,Z) l00008879
	// succ:  l00008875_1 l00008879
l00008875_1:
	__mcr(0x05, 0x00000002, r0, 0x06, 0x05, 0x00000005)
	// succ:  l00008879
l00008879:
MPU_vTaskDelayUntil_exit:


// MPU_vTaskDelay
// Return size: 0
void MPU_vTaskDelay()
MPU_vTaskDelay_entry:
	// succ:  l0000889D
l0000889D:
	sp = fp
MPU_vTaskDelay_exit:


// MPU_vTaskSuspendAll
// Return size: 0
void MPU_vTaskSuspendAll()
MPU_vTaskSuspendAll_entry:
	// succ:  l000088C1
l000088C1:
	sp = fp
	branch Test(GT,NZ) l000088C5
	// succ:  l000088C1_1 l000088C5
l000088C1_1:
	// succ:  l000088C5
l000088C5:
MPU_vTaskSuspendAll_exit:


// MPU_xTaskResumeAll
// Return size: 0
void MPU_xTaskResumeAll()
MPU_xTaskResumeAll_entry:
	// succ:  l000088E1
l000088E1:
	sp = fp
	branch Test(UGE,C) l000088E5
	// succ:  l000088E1_1 l000088E5
l000088E1_1:
	// succ:  l000088E5
l000088E5:
MPU_xTaskResumeAll_exit:


// MPU_xTaskGetTickCount
// Return size: 0
void MPU_xTaskGetTickCount()
MPU_xTaskGetTickCount_entry:
	// succ:  l00008905
l00008905:
	sp = fp
	branch Test(ULT,C) l00008909
	// succ:  l00008905_1 l00008909
l00008905_1:
l00008909:
MPU_xTaskGetTickCount_exit:


// MPU_uxTaskGetNumberOfTasks
// Return size: 0
void MPU_uxTaskGetNumberOfTasks()
MPU_uxTaskGetNumberOfTasks_entry:
	// succ:  l00008929
l00008929:
	sp = fp
	branch Test(EQ,Z) l0000892D
	// succ:  l00008929_1 l0000892D
l00008929_1:
	call fnFFE08805 (retsize: 0;)
	// succ:  l0000892D
l0000892D:
MPU_uxTaskGetNumberOfTasks_exit:


// MPU_pcTaskGetName
// Return size: 0
void MPU_pcTaskGetName()
MPU_pcTaskGetName_entry:
	// succ:  l0000894D
l0000894D:
	sp = fp
MPU_pcTaskGetName_exit:


// fn0000895D
// Return size: 0
void fn0000895D()
fn0000895D_entry:
	// succ:  l0000895D
l0000895D:
	sp = fp
	branch Test(NE,Z) l00008961
	// succ:  l0000895D_1 l00008961
l0000895D_1:
	Mem0[r6 + -812:byte] = (byte) r0
	// succ:  l00008961
l00008961:
	branch Test(EQ,Z) l00008965
	// succ:  l00008961_1 l00008965
l00008961_1:
	lr = Mem0[r3:byte]
	r3 = r3 + 0x00000FD0
	// succ:  l00008965
l00008965:
	branch Test(NE,Z) l00008969
	// succ:  l00008965_1 l00008969
l00008965_1:
	r4 = !(r0 << 1)
	NZCV = cond(r4)
	// succ:  l00008969
l00008969:
	branch Test(EQ,Z) l0000896D
	// succ:  l00008969_1 l0000896D
l00008969_1:
	r8 = Mem0[r3:byte]
	r3 = r3 + 0x00000000
	// succ:  l0000896D
l0000896D:
	branch Test(UGE,C) l00008971
	// succ:  l0000896D_1 l00008971
l0000896D_1:
	Mem0[r6:word32] = r3
	Mem0[r6 - 4:word32] = r7
	Mem0[r6 - 8:word32] = fp
	Mem0[r6 - 12:word32] = ip
	// succ:  l00008971
l00008971:
	branch Test(UGE,C) l00008971_thunk_MPU_vTaskSetTimeOutState
	// succ:  l00008971_1 l00008971_thunk_MPU_vTaskSetTimeOutState
l00008971_1:
	r0 = Mem0[pc:word32]
	r2 = Mem0[pc + 4:word32]
	r3 = Mem0[pc + 8:word32]
	r4 = Mem0[pc + 12:word32]
	r5 = Mem0[pc + 16:word32]
	r7 = Mem0[pc + 20:word32]
	pc = pc + 24
	goto l00008971_thunk_MPU_vTaskSetTimeOutState
	// succ:  l00008971_thunk_MPU_vTaskSetTimeOutState
l00008971_thunk_MPU_vTaskSetTimeOutState:
	call MPU_vTaskSetTimeOutState (retsize: 0;)
	return
	// succ:  fn0000895D_exit
l00008971_thunk_MPU_vTaskSetTimeOutState:
	call MPU_vTaskSetTimeOutState (retsize: 0;)
	return
	// succ:  fn0000895D_exit
fn0000895D_exit:


// MPU_vTaskSetTimeOutState
// Return size: 0
void MPU_vTaskSetTimeOutState()
MPU_vTaskSetTimeOutState_entry:
	// succ:  l00008975
l00008975:
	sp = fp
MPU_vTaskSetTimeOutState_exit:


// MPU_xTaskCheckForTimeOut
// Return size: 0
void MPU_xTaskCheckForTimeOut()
MPU_xTaskCheckForTimeOut_entry:
	// succ:  l00008999
l00008999:
	sp = fp
	branch Test(NE,Z) l0000899D
	// succ:  l00008999_1 l0000899D
l00008999_1:
	__mcr(0x05, 0x00000002, r0, 0x06, 0x05, 0x00000005)
	// succ:  l0000899D
l0000899D:
MPU_xTaskCheckForTimeOut_exit:


// MPU_xTaskGenericNotify
// Return size: 0
void MPU_xTaskGenericNotify()
MPU_xTaskGenericNotify_entry:
	// succ:  l000089C5
l000089C5:
	sp = fp
	branch Test(NE,Z) l000089C9
	// succ:  l000089C5_1 l000089C9
l000089C5_1:
	Mem0[r1 + -233:byte] = (byte) pc
	// succ:  l000089C9
l000089C9:
	branch Test(EQ,Z) l000089CD
	// succ:  l000089C9_1 l000089CD
l000089C9_1:
	Mem0[r6:byte] = (byte) r0
	// succ:  l000089CD
l000089CD:
MPU_xTaskGenericNotify_exit:


// MPU_xTaskNotifyWait
// Return size: 0
void MPU_xTaskNotifyWait()
MPU_xTaskNotifyWait_entry:
	// succ:  l000089FD
l000089FD:
	sp = fp
	branch Test(NE,Z) l00008A01
	// succ:  l000089FD_1 l00008A01
l000089FD_1:
	Mem0[r1 + -233:byte] = (byte) pc
	// succ:  l00008A01
l00008A01:
	branch Test(EQ,Z) l00008A05
	// succ:  l00008A01_1 l00008A05
l00008A01_1:
	Mem0[r6:byte] = (byte) r0
	// succ:  l00008A05
l00008A05:
MPU_xTaskNotifyWait_exit:


// MPU_ulTaskNotifyTake
// Return size: 0
void MPU_ulTaskNotifyTake()
MPU_ulTaskNotifyTake_entry:
	// succ:  l00008A35
l00008A35:
	sp = fp
	branch Test(NE,Z) l00008A39
	// succ:  l00008A35_1 l00008A39
l00008A35_1:
	__mcr(0x05, 0x00000002, r0, 0x06, 0x05, 0x00000005)
	// succ:  l00008A39
l00008A39:
MPU_ulTaskNotifyTake_exit:


// MPU_xTaskNotifyStateClear
// Return size: 0
void MPU_xTaskNotifyStateClear()
MPU_xTaskNotifyStateClear_entry:
	// succ:  l00008A61
l00008A61:
	sp = fp
MPU_xTaskNotifyStateClear_exit:


// MPU_xQueueGenericCreate
// Return size: 0
void MPU_xQueueGenericCreate()
MPU_xQueueGenericCreate_entry:
	// succ:  l00008A89
l00008A89:
	sp = fp
	branch Test(NE,Z) l00008A8D
	// succ:  l00008A89_1 l00008A8D
l00008A89_1:
	__mcr(0x05, 0x00000002, r0, 0x06, 0x05, 0x00000005)
	// succ:  l00008A8D
l00008A8D:
MPU_xQueueGenericCreate_exit:


// MPU_xQueueGenericReset
// Return size: 0
void MPU_xQueueGenericReset()
MPU_xQueueGenericReset_entry:
	// succ:  l00008AB9
l00008AB9:
	sp = fp
	branch Test(NE,Z) l00008ABD
	// succ:  l00008AB9_1 l00008ABD
l00008AB9_1:
	__mcr(0x05, 0x00000002, r0, 0x06, 0x05, 0x00000005)
	// succ:  l00008ABD
l00008ABD:
MPU_xQueueGenericReset_exit:


// MPU_xQueueGenericSend
// Return size: 0
void MPU_xQueueGenericSend()
MPU_xQueueGenericSend_entry:
	// succ:  l00008AE5
l00008AE5:
	sp = fp
	branch Test(NE,Z) l00008AE9
	// succ:  l00008AE5_1 l00008AE9
l00008AE5_1:
	Mem0[r1 + -233:byte] = (byte) pc
	// succ:  l00008AE9
l00008AE9:
	branch Test(EQ,Z) l00008AED
	// succ:  l00008AE9_1 l00008AED
l00008AE9_1:
	Mem0[r6:byte] = (byte) r0
	// succ:  l00008AED
l00008AED:
MPU_xQueueGenericSend_exit:


// MPU_uxQueueMessagesWaiting
// Return size: 0
void MPU_uxQueueMessagesWaiting()
MPU_uxQueueMessagesWaiting_entry:
	// succ:  l00008B1D
l00008B1D:
	sp = fp
MPU_uxQueueMessagesWaiting_exit:


// MPU_uxQueueSpacesAvailable
// Return size: 0
void MPU_uxQueueSpacesAvailable()
MPU_uxQueueSpacesAvailable_entry:
	// succ:  l00008B45
l00008B45:
	sp = fp
MPU_uxQueueSpacesAvailable_exit:


// MPU_xQueueGenericReceive
// Return size: 0
void MPU_xQueueGenericReceive()
MPU_xQueueGenericReceive_entry:
	// succ:  l00008B6D
l00008B6D:
	sp = fp
	branch Test(NE,Z) l00008B71
	// succ:  l00008B6D_1 l00008B71
l00008B6D_1:
	Mem0[r1 + -233:byte] = (byte) pc
	// succ:  l00008B71
l00008B71:
	branch Test(EQ,Z) l00008B75
	// succ:  l00008B71_1 l00008B75
l00008B71_1:
	Mem0[r6:byte] = (byte) r0
	// succ:  l00008B75
l00008B75:
MPU_xQueueGenericReceive_exit:


// MPU_xQueuePeekFromISR
// Return size: 0
void MPU_xQueuePeekFromISR()
MPU_xQueuePeekFromISR_entry:
	// succ:  l00008BA5
l00008BA5:
	sp = fp
	branch Test(NE,Z) l00008BA9
	// succ:  l00008BA5_1 l00008BA9
l00008BA5_1:
	__mcr(0x05, 0x00000002, r0, 0x06, 0x05, 0x00000005)
	// succ:  l00008BA9
l00008BA9:
	branch Test(GT,NZV) l00008BAD
	// succ:  l00008BA9_1 l00008BAD
l00008BA9_1:
	call fnFFE088C9 (retsize: 0;)
	// succ:  l00008BAD
l00008BAD:
	branch Test(NE,Z) l00008BB1
	// succ:  l00008BAD_1 l00008BB1
l00008BAD_1:
	Mem0[r6:byte] = (byte) r3
	r6 = r6 - 0x000001FC
	// succ:  l00008BB1
l00008BB1:
MPU_xQueuePeekFromISR_exit:


// MPU_xQueueGetMutexHolder
// Return size: 0
void MPU_xQueueGetMutexHolder()
MPU_xQueueGetMutexHolder_entry:
	// succ:  l00008BD1
l00008BD1:
	sp = fp
MPU_xQueueGetMutexHolder_exit:


// MPU_xQueueCreateMutex
// Return size: 0
void MPU_xQueueCreateMutex()
MPU_xQueueCreateMutex_entry:
	// succ:  l00008BF9
l00008BF9:
	sp = fp
MPU_xQueueCreateMutex_exit:


// MPU_xQueueTakeMutexRecursive
// Return size: 0
void MPU_xQueueTakeMutexRecursive()
MPU_xQueueTakeMutexRecursive_entry:
	// succ:  l00008C21
l00008C21:
	sp = fp
	branch Test(NE,Z) l00008C25
	// succ:  l00008C21_1 l00008C25
l00008C21_1:
	__mcr(0x05, 0x00000002, r0, 0x06, 0x05, 0x00000005)
	// succ:  l00008C25
l00008C25:
	branch Test(UGT,ZC) l00008C29
	// succ:  l00008C25_1 l00008C29
l00008C25_1:
l00008C29:
	branch Test(NE,Z) l00008C2D
	// succ:  l00008C29_1 l00008C2D
l00008C29_1:
	Mem0[r6:byte] = (byte) r3
	r6 = r6 - 0x000001FC
	// succ:  l00008C2D
l00008C2D:
MPU_xQueueTakeMutexRecursive_exit:


// MPU_xQueueGiveMutexRecursive
// Return size: 0
void MPU_xQueueGiveMutexRecursive()
MPU_xQueueGiveMutexRecursive_entry:
	// succ:  l00008C4D
l00008C4D:
	sp = fp
MPU_xQueueGiveMutexRecursive_exit:


// MPU_vQueueDelete
// Return size: 0
void MPU_vQueueDelete()
MPU_vQueueDelete_entry:
	// succ:  l00008C75
l00008C75:
	sp = fp
MPU_vQueueDelete_exit:


// MPU_pvPortMalloc
// Return size: 0
void MPU_pvPortMalloc()
MPU_pvPortMalloc_entry:
	// succ:  l00008C99
l00008C99:
	sp = fp
MPU_pvPortMalloc_exit:


// MPU_vPortFree
// Return size: 0
void MPU_vPortFree()
MPU_vPortFree_entry:
	// succ:  l00008CC1
l00008CC1:
	sp = fp
MPU_vPortFree_exit:


// MPU_vPortInitialiseBlocks
// Return size: 0
void MPU_vPortInitialiseBlocks()
MPU_vPortInitialiseBlocks_entry:
	// succ:  l00008CE5
l00008CE5:
	sp = fp
	branch Test(UGE,C) l00008CE9
	// succ:  l00008CE5_1 l00008CE9
l00008CE5_1:
l00008CE9:
MPU_vPortInitialiseBlocks_exit:


// MPU_xPortGetFreeHeapSize
// Return size: 0
void MPU_xPortGetFreeHeapSize()
MPU_xPortGetFreeHeapSize_entry:
	// succ:  l00008D05
l00008D05:
	sp = fp
	branch Test(ULT,C) l00008D09
	// succ:  l00008D05_1 l00008D09
l00008D05_1:
l00008D09:
MPU_xPortGetFreeHeapSize_exit:


// MPU_xEventGroupCreate
// Return size: 0
void MPU_xEventGroupCreate()
MPU_xEventGroupCreate_entry:
	// succ:  l00008D29
l00008D29:
	sp = fp
	branch Test(EQ,Z) l00008D2D
	// succ:  l00008D29_1 l00008D2D
l00008D29_1:
	call fnFFE08C05 (retsize: 0;)
	// succ:  l00008D2D
l00008D2D:
MPU_xEventGroupCreate_exit:


// MPU_xEventGroupWaitBits
// Return size: 0
void MPU_xEventGroupWaitBits()
MPU_xEventGroupWaitBits_entry:
	// succ:  l00008D4D
l00008D4D:
	sp = fp
	branch Test(ULE,ZC) l00008D51
	// succ:  l00008D4D_1 l00008D51
l00008D4D_1:
	pc = DPB(pc, 0x30E9, 16)
	// succ:  l00008D51
l00008D51:
	branch Test(NE,Z) l00008D55
	// succ:  l00008D51_1 l00008D55
l00008D51_1:
	__mcr(0x05, 0x00000002, r0, 0x06, 0x00, 0x00000005)
	// succ:  l00008D55
l00008D55:
	branch Test(UGT,ZC) l00008D59
	// succ:  l00008D55_1 l00008D59
l00008D55_1:
	Mem0[r6 - 4:word32] = r1
	Mem0[r6 - 8:word32] = r2
	Mem0[r6 - 12:word32] = r6
	Mem0[r6 - 16:word32] = ip
	Mem0[r6 - 20:word32] = pc
	// succ:  l00008D59
l00008D59:
MPU_xEventGroupWaitBits_exit:


// MPU_xEventGroupClearBits
// Return size: 0
void MPU_xEventGroupClearBits()
MPU_xEventGroupClearBits_entry:
	// succ:  l00008D8D
l00008D8D:
	sp = fp
	branch Test(NE,Z) l00008D91
	// succ:  l00008D8D_1 l00008D91
l00008D8D_1:
	__mcr(0x05, 0x00000002, r0, 0x06, 0x05, 0x00000005)
	// succ:  l00008D91
l00008D91:
	r7 = r7
	call Mem0[r7:byte] (retsize: 0;)
	return
	// succ:  MPU_xEventGroupClearBits_exit
MPU_xEventGroupClearBits_exit:


// MPU_xEventGroupSetBits
// Return size: 0
void MPU_xEventGroupSetBits()
MPU_xEventGroupSetBits_entry:
	// succ:  l00008DB9
l00008DB9:
	sp = fp
	branch Test(NE,Z) l00008DBD
	// succ:  l00008DB9_1 l00008DBD
l00008DB9_1:
	__mcr(0x05, 0x00000002, r0, 0x06, 0x05, 0x00000005)
	// succ:  l00008DBD
l00008DBD:
MPU_xEventGroupSetBits_exit:


// MPU_xEventGroupSync
// Return size: 0
void MPU_xEventGroupSync()
MPU_xEventGroupSync_entry:
	// succ:  l00008DE5
l00008DE5:
	sp = fp
	branch Test(NE,Z) l00008DE9
	// succ:  l00008DE5_1 l00008DE9
l00008DE5_1:
	Mem0[r1 + -233:byte] = (byte) pc
	// succ:  l00008DE9
l00008DE9:
	branch Test(EQ,Z) l00008DED
	// succ:  l00008DE9_1 l00008DED
l00008DE9_1:
	Mem0[r6:byte] = (byte) r0
	// succ:  l00008DED
l00008DED:
MPU_xEventGroupSync_exit:


// MPU_vEventGroupDelete
// Return size: 0
void MPU_vEventGroupDelete()
MPU_vEventGroupDelete_entry:
	// succ:  l00008E1D
l00008E1D:
	sp = fp
MPU_vEventGroupDelete_exit:


// xCoRoutineCreate
// Return size: 0
void xCoRoutineCreate()
xCoRoutineCreate_entry:
	// succ:  l00008E41
l00008E41:
	sp = fp
	branch Test(ULE,ZC) l00008E45
	// succ:  l00008E41_1 l00008E45
l00008E41_1:
	pc_pc = (int16) (r9 >> 16) *s (int16) (r8 >> 16) + pc_pc
	// succ:  l00008E45
l00008E45:
	branch Test(NE,Z) l00008E49
	// succ:  l00008E45_1 l00008E49
l00008E45_1:
l00008E49:
xCoRoutineCreate_exit:


// vCoRoutineAddToDelayedList
// Return size: 0
void vCoRoutineAddToDelayedList()
vCoRoutineAddToDelayedList_entry:
	// succ:  l00008EF1
l00008EF1:
	sp = fp
	branch Test(NE,Z) l00008EF5
	// succ:  l00008EF1_1 l00008EF5
l00008EF1_1:
l00008EF5:
	r8 = r8 + -844
	Mem0[r8:byte] = (byte) r2
	branch Test(EQ,Z) l00008EFD
	// succ:  l00008EF9_1 l00008EFD
l00008EF9_1:
	Mem0[r4:word32] = r0
	Mem0[r4 - 4:word32] = r1
	Mem0[r4 - 8:word32] = r2
	Mem0[r4 - 12:word32] = r3
	Mem0[r4 - 16:word32] = r5
	Mem0[r4 - 20:word32] = r6
	Mem0[r4 - 24:word32] = r8
	Mem0[r4 - 28:word32] = r10
	// succ:  l00008EFD
l00008EFD:
	branch Test(EQ,Z) l00008F01
	// succ:  l00008EFD_1 l00008F01
l00008EFD_1:
	// succ:  l00008F01
l00008F01:
	branch Test(ULT,C) l00008F05
	// succ:  l00008F01_1 l00008F05
l00008F01_1:
	Mem0[0x00008ECF:word64] = r7_r6
	// succ:  l00008F05
l00008F05:
	branch Test(GT,NZ) l00008F09
	// succ:  l00008F05_1 l00008F09
l00008F05_1:
	__stcl(0x0D, 0x09, Mem0[r2 + -416:void])
	Mem0[0x0D + 4:word32] = r2
	// succ:  l00008F09
l00008F09:
	r3 = pc + __ror(r0, 8) + C
	NZCV = cond(r3)
	branch Test(NE,Z) l00008F11
	// succ:  l00008F0D_1 l00008F11
l00008F0D_1:
	Mem0[lr:byte] = (byte) r10
	lr = lr - 0x0000006E
	// succ:  l00008F11
l00008F11:
	call fnFFE08BDF (retsize: 0;)
	branch Test(ULT,C) l00008F19
	// succ:  l00008F15_1 l00008F19
l00008F15_1:
	r1 = r1
	r3 = Mem0[r1:int16]
	// succ:  l00008F19
l00008F19:
	branch Test(GE,NZV) l00008F1D
	// succ:  l00008F19_1 l00008F1D
l00008F19_1:
	__stcl(0x00, 0x03, Mem0[r6 + -416:void])
	Mem0[0x00:word32] = cpsr
	Mem0[0x00 + 4:word32] = r6
	// succ:  l00008F1D
l00008F1D:
	branch Test(EQ,Z) l00008F21
	// succ:  l00008F1D_1 l00008F21
l00008F1D_1:
	Mem0[r0:word32] = r3
	Mem0[r0 - 4:word32] = r5
	Mem0[r0 - 8:word32] = r6
	Mem0[r0 - 12:word32] = r7
	Mem0[r0 - 16:word32] = ip
	Mem0[r0 - 20:word32] = sp
	Mem0[r0 - 24:word32] = lr
	// succ:  l00008F21
l00008F21:
vCoRoutineAddToDelayedList_exit:


// vCoRoutineSchedule
// Return size: 0
void vCoRoutineSchedule()
vCoRoutineSchedule_entry:
	// succ:  l00008F2D
l00008F2D:
	sp = fp
	branch Test(LT,N) l00008F31
	// succ:  l00008F2D_1 l00008F31
l00008F2D_1:
	Mem0[r1 + -233:byte] = (byte) pc
	// succ:  l00008F31
l00008F31:
	branch Test(ULT,C) l00008F35
	// succ:  l00008F31_1 l00008F35
l00008F31_1:
	call fn01B63C6D (retsize: 0;)
	// succ:  l00008F35
l00008F35:
	branch Test(NE,Z) l00008F39
	// succ:  l00008F35_1 l00008F39
l00008F35_1:
	r7 = r7 + -179
	Mem0[r7:word32] = r0
	// succ:  l00008F39
l00008F39:
	branch Test(GT,NZ) l00008F3D
	// succ:  l00008F39_1 l00008F3D
l00008F39_1:
	// succ:  l00008F3D
l00008F3D:
	branch Test(ULE,ZC) l00008F41
	// succ:  l00008F3D_1 l00008F41
l00008F3D_1:
	fp = 0x00003FF0
	// succ:  l00008F41
l00008F41:
	branch Test(GE,NZV) l00008F45
	// succ:  l00008F41_1 l00008F45
l00008F41_1:
	// succ:  l00008F45
l00008F45:
	branch Test(GE,NZV) l00008F49
	// succ:  l00008F45_1 l00008F49
l00008F45_1:
	// succ:  l00008F49
l00008F49:
	branch Test(ULT,C) l00008F4D
	// succ:  l00008F49_1 l00008F4D
l00008F49_1:
	call fnFE3DCF1D (retsize: 0;)
	// succ:  l00008F4D
l00008F4D:
	branch Test(NE,Z) l00008F51
	// succ:  l00008F4D_1 l00008F51
l00008F4D_1:
	Mem0[r8:byte] = (byte) sp
	r8 = r8 - 0x00000C6E
	// succ:  l00008F51
l00008F51:
vCoRoutineSchedule_exit:


// xCoRoutineRemoveFromEventList
// Return size: 0
void xCoRoutineRemoveFromEventList()
xCoRoutineRemoveFromEventList_entry:
	// succ:  l00009095
l00009095:
	sp = fp
	branch Test(GT,NZV) l00009099
	// succ:  l00009095_1 l00009099
l00009095_1:
l00009099:
	branch Test(NE,Z) l0000909D
	// succ:  l00009099_1 l0000909D
l00009099_1:
	Mem0[sp:byte] = (byte) r0
	sp = sp - 0x00000968
	// succ:  l0000909D
l0000909D:
	branch Test(UGE,C) l000090A1
	// succ:  l0000909D_1 l000090A1
l0000909D_1:
	Mem0[r6:word64] = r2_r1
	r6 = r6 - r1
	// succ:  l000090A1
l000090A1:
	branch Test(GT,NZ) l000090A5
	// succ:  l000090A1_1 l000090A5
l000090A1_1:
l000090A5:
	branch Test(LT,N) l000090A9
	// succ:  l000090A5_1 l000090A9
l000090A5_1:
	r0 = Mem0[r1:byte]
	r1 = r1 + 0x000005F9
	// succ:  l000090A9
l000090A9:
xCoRoutineRemoveFromEventList_exit:


// GPIOGetIntNumber
// Return size: 0
void GPIOGetIntNumber()
GPIOGetIntNumber_entry:
	// succ:  l000090C5
l000090C5:
	sp = fp
	branch Test(EQ,Z) l000090C9
	// succ:  l000090C5_1 l000090C9
l000090C5_1:
	Mem0[r2 - 4:word32] = r0
	Mem0[r2 - 8:word32] = r1
	Mem0[r2 - 12:word32] = r3
	Mem0[r2 - 16:word32] = r6
	Mem0[r2 - 20:word32] = fp
	Mem0[r2 - 24:word32] = ip
	Mem0[r2 - 28:word32] = pc
	// succ:  l000090C9
l000090C9:
	branch Test(GE,NZV) l000090CD
	// succ:  l000090C9_1 l000090CD
l000090C9_1:
	r0 = Mem0[r8:int8]
	r8 = r8 - 0x00000080
	// succ:  l000090CD
l000090CD:
GPIOGetIntNumber_exit:


// GPIODirModeSet
// Return size: 0
void GPIODirModeSet()
GPIODirModeSet_entry:
	// succ:  l0000910D
l0000910D:
	sp = fp
	branch Test(EQ,Z) l00009111
	// succ:  l0000910D_1 l00009111
l0000910D_1:
	r0 = r4 ^ 0x000000F8
	NZCV = cond(r0)
	// succ:  l00009111
l00009111:
	branch Test(EQ,Z) l00009115
	// succ:  l00009111_1 l00009115
l00009111_1:
	Mem0[0x00009119:word32] = r0
	pc = pc - 0x000001F0
	// succ:  l00009115
l00009115:
	branch Test(ULE,ZC) l00009119
	// succ:  l00009115_1 l00009119
l00009115_1:
	call fn010CC019 (retsize: 0;)
	// succ:  l00009119
l00009119:
	branch Test(NE,Z) l0000911D
	// succ:  l00009119_1 l0000911D
l00009119_1:
	ip = (r3 >> 32) - r8 - C
	NZCV = cond(ip)
	// succ:  l0000911D
l0000911D:
	branch Test(ULT,C) l00009121
	// succ:  l0000911D_1 l00009121
l0000911D_1:
	sp = (r4 >>u r0) - r8 - C
	NZCV = cond(sp)
	// succ:  l00009121
l00009121:
GPIODirModeSet_exit:


// GPIODirModeGet
// Return size: 0
void GPIODirModeGet()
GPIODirModeGet_entry:
	// succ:  l00009135
l00009135:
	sp = fp
GPIODirModeGet_exit:


// GPIOIntTypeSet
// Return size: 0
void GPIOIntTypeSet()
GPIOIntTypeSet_entry:
	// succ:  l0000915D
l0000915D:
	sp = fp
	branch Test(EQ,Z) l00009161
	// succ:  l0000915D_1 l00009161
l0000915D_1:
	r0 = r4 ^ 0x00F80000
	NZCV = cond(r0)
	// succ:  l00009161
l00009161:
	branch Test(EQ,Z) l00009165
	// succ:  l00009161_1 l00009165
l00009161_1:
	Mem0[0x00009169:word32] = r0
	pc = pc - 0x000001F0
	// succ:  l00009165
l00009165:
	branch Test(ULE,ZC) l00009169
	// succ:  l00009165_1 l00009169
l00009165_1:
	call fn010CC069 (retsize: 0;)
	// succ:  l00009169
l00009169:
	branch Test(NE,Z) l0000916D
	// succ:  l00009169_1 l0000916D
l00009169_1:
	r0 = Mem0[r8:word32]
	r1 = Mem0[r8 + 4:word32]
	r6 = Mem0[r8 + 8:word32]
	lr = Mem0[r8 + 12:word32]
	r8 = r8 + 20
	return
	// succ:  GPIOIntTypeSet_exit
l0000916D:
	branch Test(NE,Z) l00009171
	// succ:  l0000916D_1 l00009171
l0000916D_1:
	sp = Mem0[r8:byte]
	r8 = r8 + 0x00000034
	// succ:  l00009171
l00009171:
	branch Test(NE,Z) l00009175
	// succ:  l00009171_1 l00009175
l00009171_1:
	r1 = 0x40000003 - r0 - C
	NZCV = cond(r1)
	// succ:  l00009175
l00009175:
	branch Test(NE,Z) l00009179
	// succ:  l00009175_1 l00009179
l00009175_1:
	call fnFEFCE1B9 (retsize: 0;)
	// succ:  l00009179
l00009179:
	branch Test(LE,NZV) l0000917D
	// succ:  l00009179_1 l0000917D
l00009179_1:
	r8 = r3 - (r3 >> 22)
	// succ:  l0000917D
l0000917D:
	branch Test(GT,NZV) l00009181
	// succ:  l0000917D_1 l00009181
l0000917D_1:
	r0 = Mem0[r4:int16]
	r4 = r4 + r8
	// succ:  l00009181
l00009181:
	branch Test(LT,N) l00009185
	// succ:  l00009181_1 l00009185
l00009181_1:
	r0 = r4 ^ 0x0000F800
	NZCV = cond(r0)
	// succ:  l00009185
l00009185:
	branch Test(EQ,Z) l00009189
	// succ:  l00009185_1 l00009189
l00009185_1:
	r0 = Mem0[pc + 4:word32]
	r1 = Mem0[pc + 8:word32]
	r2 = Mem0[pc + 12:word32]
	r10 = Mem0[pc + 16:word32]
	fp = Mem0[pc + 20:word32]
	lr = Mem0[pc + 24:word32]
	pc = pc + 28
	// succ:  l00009189
l00009189:
GPIOIntTypeSet_exit:


// GPIOIntTypeGet
// Return size: 0
void GPIOIntTypeGet()
GPIOIntTypeGet_entry:
	// succ:  l00009195
l00009195:
	sp = fp
	branch Test(NE,Z) l00009199
	// succ:  l00009195_1 l00009199
l00009195_1:
	r0 = Mem0[r8:word32]
	r1 = Mem0[r8 + 4:word32]
	r5 = Mem0[r8 + 8:word32]
	ip = Mem0[r8 + 12:word32]
	lr = Mem0[r8 + 16:word32]
	r8 = r8 + 24
	return
	// succ:  GPIOIntTypeGet_exit
l00009199:
GPIOIntTypeGet_exit:


// GPIOPadConfigSet
// Return size: 0
void GPIOPadConfigSet()
GPIOPadConfigSet_entry:
	// succ:  l000091C9
l000091C9:
	sp = fp
	branch Test(NE,Z) l000091CD
	// succ:  l000091C9_1 l000091CD
l000091C9_1:
	sp = Mem0[r8:word16]
	r8 = r8 + 0x00000004
	// succ:  l000091CD
l000091CD:
	branch Test(NE,Z) l000091D1
	// succ:  l000091CD_1 l000091D1
l000091CD_1:
	r1 = !(r5 >> 4)
	NZCV = cond(r1)
	// succ:  l000091D1
l000091D1:
	branch Test(NE,Z) l000091D5
	// succ:  l000091D1_1 l000091D5
l000091D1_1:
l000091D5:
	branch Test(LE,NZV) l000091D9
	// succ:  l000091D5_1 l000091D9
l000091D5_1:
	r8 = r3 - (r3 >> 24)
	// succ:  l000091D9
l000091D9:
	branch Test(GT,NZV) l000091DD
	// succ:  l000091D9_1 l000091DD
l000091D9_1:
	Mem0[r5:word64] = r1_r0
	r5 = r5 + 0xFFFFFFF8
	// succ:  l000091DD
l000091DD:
	branch Test(EQ,Z) l000091E1
	// succ:  l000091DD_1 l000091E1
l000091DD_1:
	r0 = r5 - 0xF8000000
	// succ:  l000091E1
l000091E1:
	branch Test(EQ,Z) l000091E5
	// succ:  l000091E1_1 l000091E5
l000091E1_1:
	Mem0[0x000091E9:word32] = r0
	pc = pc - 0x000002F0
	// succ:  l000091E5
l000091E5:
	branch Test(ULE,ZC) l000091E9
	// succ:  l000091E5_1 l000091E9
l000091E5_1:
l000091E9:
	branch Test(NE,Z) l000091ED
	// succ:  l000091E9_1 l000091ED
l000091E9_1:
	ip = Mem0[r8:byte]
	r8 = r8 + 0x00000043
	// succ:  l000091ED
l000091ED:
	branch Test(NE,Z) l000091F1
	// succ:  l000091ED_1 l000091F1
l000091ED_1:
	r0 = Mem0[r8:word32]
	r2 = Mem0[r8 + 4:word32]
	r6 = Mem0[r8 + 8:word32]
	ip = Mem0[r8 + 12:word32]
	lr = Mem0[r8 + 16:word32]
	r8 = r8 + 24
	return
	// succ:  GPIOPadConfigSet_exit
l000091F1:
	branch Test(NE,Z) l000091F5
	// succ:  l000091F1_1 l000091F5
l000091F1_1:
	r1 = Mem0[r0:byte]
	r0 = r0 + 0x00000245
	// succ:  l000091F5
l000091F5:
	branch Test(NE,Z) l000091F9
	// succ:  l000091F5_1 l000091F9
l000091F5_1:
l000091F9:
	branch Test(LE,NZV) l000091FD
	// succ:  l000091F9_1 l000091FD
l000091F9_1:
	r8 = r3 - (r3 >> 24)
	// succ:  l000091FD
l000091FD:
	branch Test(EQ,Z) l00009201
	// succ:  l000091FD_1 l00009201
l000091FD_1:
	r0 = r5 - 0x00F80000
	// succ:  l00009201
l00009201:
	branch Test(GT,NZV) l00009205
	// succ:  l00009201_1 l00009205
l00009201_1:
	Mem0[0x00009209:word64] = r1_r0
	pc = pc - r0
	// succ:  l00009205
l00009205:
	branch Test(EQ,Z) l00009209
	// succ:  l00009205_1 l00009209
l00009205_1:
	Mem0[r5:word32] = r1
	r5 = r5 - 0x000008F8
	// succ:  l00009209
l00009209:
	branch Test(UGT,ZC) l00009209_then
	call fn010CBD0D (retsize: 0;)
	return
	// succ:  l0000920D l00009209_then
l00009209_then:
l0000920D:
	branch Test(EQ,Z) l00009211
	// succ:  l0000920D_1 l00009211
l0000920D_1:
	r0 = Mem0[r8:word32]
	r1 = Mem0[r8 + 4:word32]
	r6 = Mem0[r8 + 8:word32]
	lr = Mem0[r8 + 12:word32]
	r8 = r8 + 20
	return
	// succ:  GPIOPadConfigSet_exit
l00009211:
	branch Test(NE,Z) l00009215
	// succ:  l00009211_1 l00009215
l00009211_1:
l00009215:
	// succ:  GPIOPadConfigSet_exit
GPIOPadConfigSet_exit:


// GPIOPadConfigGet
// Return size: 0
void GPIOPadConfigGet()
GPIOPadConfigGet_entry:
	// succ:  l0000925D
l0000925D:
	sp = fp
GPIOPadConfigGet_exit:


// GPIOPinIntEnable
// Return size: 0
void GPIOPinIntEnable()
GPIOPinIntEnable_entry:
	// succ:  l000092E1
l000092E1:
	sp = fp
	branch Test(EQ,Z) l000092E5
	// succ:  l000092E1_1 l000092E5
l000092E1_1:
	r3 = Mem0[r4 - -4:word32]
	r4 = Mem0[r4:word32]
	r5 = Mem0[r4 - 4:word32]
	r6 = Mem0[r4 - 8:word32]
	r7 = Mem0[r4 - 12:word32]
	ip = Mem0[r4 - 16:word32]
	r4 = r4 + 20
	// succ:  l000092E5
l000092E5:
	branch Test(EQ,Z) l000092E9
	// succ:  l000092E5_1 l000092E9
l000092E5_1:
	ip = (r3 >> 32) - r8 - C
	NZCV = cond(ip)
	// succ:  l000092E9
l000092E9:
	branch Test(GT,NZV) l000092E9_thunk_GPIOPinIntDisable
	// succ:  l000092E9_1 l000092E9_thunk_GPIOPinIntDisable
l000092E9_1:
	r7 = r7 - (r4 << r0)
	goto l000092E9_thunk_GPIOPinIntDisable
	// succ:  l000092E9_thunk_GPIOPinIntDisable
l000092E9_thunk_GPIOPinIntDisable:
	call GPIOPinIntDisable (retsize: 0;)
	return
	// succ:  GPIOPinIntEnable_exit
l000092E9_thunk_GPIOPinIntDisable:
	call GPIOPinIntDisable (retsize: 0;)
	return
	// succ:  GPIOPinIntEnable_exit
GPIOPinIntEnable_exit:


// GPIOPinIntDisable
// Return size: 0
void GPIOPinIntDisable()
GPIOPinIntDisable_entry:
	// succ:  l000092ED
l000092ED:
	sp = fp
	branch Test(ULT,C) l000092F1
	// succ:  l000092ED_1 l000092F1
l000092ED_1:
	NZCV = cond(r4 ^ 0x000000F8)
	// succ:  l000092F1
l000092F1:
	branch Test(LE,NZV) l000092F5
	// succ:  l000092F1_1 l000092F5
l000092F1_1:
	r0 = r1 & __ror(r10, 3)
	// succ:  l000092F5
l000092F5:
	branch Test(OV,V) l000092F9
	// succ:  l000092F5_1 l000092F9
l000092F5_1:
	r1 = Mem0[r4:int16]
	r4 = r4 - r8
	// succ:  l000092F9
l000092F9:
GPIOPinIntDisable_exit:


// GPIOPinIntStatus
// Return size: 0
void GPIOPinIntStatus()
GPIOPinIntStatus_entry:
	// succ:  l000092FD
l000092FD:
	sp = fp
	branch Test(EQ,Z) l00009301
	// succ:  l000092FD_1 l00009301
l000092FD_1:
	sp = Mem0[r8:byte]
	r8 = r8 + 0x000000B9
	// succ:  l00009301
l00009301:
	branch Test(GT,NZV) l00009305
	// succ:  l00009301_1 l00009305
l00009301_1:
	r7 = r7 - r4
	// succ:  l00009305
l00009305:
	branch Test(OV,V) l00009309
	// succ:  l00009305_1 l00009309
l00009305_1:
	Mem0[r4:word64] = r2_r1
	r4 = r4 - r8
	// succ:  l00009309
l00009309:
	branch Test(LE,NZV) l00009309_thunk_GPIOPinIntClear
	// succ:  l00009309_1 l00009309_thunk_GPIOPinIntClear
l00009309_1:
	r0 = pc + (r7 >> 32) + C
	NZCV = cond(r0)
	goto l00009309_thunk_GPIOPinIntClear
	// succ:  l00009309_thunk_GPIOPinIntClear
l00009309_thunk_GPIOPinIntClear:
	call GPIOPinIntClear (retsize: 0;)
	return
	// succ:  GPIOPinIntStatus_exit
l00009309_thunk_GPIOPinIntClear:
	call GPIOPinIntClear (retsize: 0;)
	return
	// succ:  GPIOPinIntStatus_exit
GPIOPinIntStatus_exit:


// GPIOPinIntClear
// Return size: 0
void GPIOPinIntClear()
GPIOPinIntClear_entry:
	// succ:  l0000930D
l0000930D:
	sp = fp
	branch Test(OV,V) l00009311
	// succ:  l0000930D_1 l00009311
l0000930D_1:
	r1 = Mem0[r4:int16]
	r4 = r4 - r8
	// succ:  l00009311
l00009311:
	branch Test(ULT,C) l00009311_thunk_GPIOPortIntRegister
	// succ:  l00009311_1 l00009311_thunk_GPIOPortIntRegister
l00009311_1:
	r0 = Mem0[0x00009319:word32]
	pc = pc + 0x00000047
	goto l00009311_thunk_GPIOPortIntRegister
	// succ:  l00009311_thunk_GPIOPortIntRegister
l00009311_thunk_GPIOPortIntRegister:
	call GPIOPortIntRegister (retsize: 0;)
	return
	// succ:  GPIOPinIntClear_exit
l00009311_thunk_GPIOPortIntRegister:
	call GPIOPortIntRegister (retsize: 0;)
	return
	// succ:  GPIOPinIntClear_exit
GPIOPinIntClear_exit:


// GPIOPortIntRegister
// Return size: 0
void GPIOPortIntRegister()
GPIOPortIntRegister_entry:
	// succ:  l00009315
l00009315:
	sp = fp
	branch Test(UGT,ZC) l00009319
	// succ:  l00009315_1 l00009319
l00009315_1:
	r0 = Mem0[r5:word32]
	r1 = Mem0[r5 + 4:word32]
	r3 = Mem0[r5 + 8:word32]
	r6 = Mem0[r5 + 12:word32]
	ip = Mem0[r5 + 16:word32]
	r5 = r5 + 20
	// succ:  l00009319
l00009319:
	branch Test(NE,Z) l0000931D
	// succ:  l00009319_1 l0000931D
l00009319_1:
	// succ:  l0000931D
l0000931D:
	branch Test(GT,NZ) l00009321
	// succ:  l0000931D_1 l00009321
l0000931D_1:
	fp = Mem0[r1:int8]
	r1 = r1 + 0x00000008
	// succ:  l00009321
l00009321:
	branch Test(LT,NV) l00009325
	// succ:  l00009321_1 l00009325
l00009321_1:
	r2 = r0 & ~0x000000BC
	// succ:  l00009325
l00009325:
	branch Test(UGT,ZC) l00009329
	// succ:  l00009325_1 l00009329
l00009325_1:
	r0 = Mem0[r3:word32]
	r2 = Mem0[r3 - 4:word32]
	r4 = Mem0[r3 - 8:word32]
	r5 = Mem0[r3 - 12:word32]
	r6 = Mem0[r3 - 16:word32]
	r7 = Mem0[r3 - 20:word32]
	return
	// succ:  GPIOPortIntRegister_exit
l00009329:
	branch Test(EQ,Z) l0000932D
	// succ:  l00009329_1 l0000932D
l00009329_1:
	r1 = r1 & ~(r2 >> 16)
	// succ:  l0000932D
l0000932D:
	branch Test(NE,Z) l00009331
	// succ:  l0000932D_1 l00009331
l0000932D_1:
	r2 = r6 - (r4 >>u 32)
	// succ:  l00009331
l00009331:
	branch Test(ULT,C) l00009335
	// succ:  l00009331_1 l00009335
l00009331_1:
	lr = Mem0[r8:int16]
	r8 = r8 + 0x00000080
	// succ:  l00009335
l00009335:
	branch Test(EQ,Z) l00009339
	// succ:  l00009335_1 l00009339
l00009335_1:
	fp = (r6 >> 26) - r8 - C
	NZCV = cond(fp)
	// succ:  l00009339
l00009339:
	branch Test(GT,NZ) l0000933D
	// succ:  l00009339_1 l0000933D
l00009339_1:
	// succ:  l0000933D
l0000933D:
	branch Test(UGT,ZC) l00009341
	// succ:  l0000933D_1 l00009341
l0000933D_1:
	Mem0[fp:word32] = r0
	Mem0[fp - 4:word32] = r3
	Mem0[fp - 8:word32] = r4
	Mem0[fp - 12:word32] = r5
	Mem0[fp - 16:word32] = r7
	Mem0[fp - 20:word32] = r8
	Mem0[fp - 24:word32] = r9
	Mem0[fp - 28:word32] = fp
	Mem0[fp - 32:word32] = ip
	// succ:  l00009341
l00009341:
	branch Test(NE,Z) l00009345
	// succ:  l00009341_1 l00009345
l00009341_1:
	r1 = r0 & ~0x04200000
	// succ:  l00009345
l00009345:
	branch Test(UGT,ZC) l00009349
	// succ:  l00009345_1 l00009349
l00009345_1:
	r0 = Mem0[r3:word32]
	r2 = Mem0[r3 - 4:word32]
	r4 = Mem0[r3 - 8:word32]
	r5 = Mem0[r3 - 12:word32]
	r6 = Mem0[r3 - 16:word32]
	r7 = Mem0[r3 - 20:word32]
	fp = Mem0[r3 - 24:word32]
	sp = Mem0[r3 - 28:word32]
	lr = Mem0[r3 - 32:word32]
	r3 = r3 + 40
	return
	// succ:  GPIOPortIntRegister_exit
l00009349:
	branch Test(EQ,Z) l0000934D
	// succ:  l00009349_1 l0000934D
l00009349_1:
	r0 = Mem0[r1:byte]
	r1 = r1 + 0x00000842
	// succ:  l0000934D
l0000934D:
	branch Test(NE,Z) l00009351
	// succ:  l0000934D_1 l00009351
l0000934D_1:
	r2 = r6 - (r4 >>u 32)
	// succ:  l00009351
l00009351:
	branch Test(ULT,C) l00009355
	// succ:  l00009351_1 l00009355
l00009351_1:
	sp = Mem0[r8:int16]
	r8 = r8 + 0x00000080
	// succ:  l00009355
l00009355:
	branch Test(EQ,Z) l00009359
	// succ:  l00009355_1 l00009359
l00009355_1:
	fp = (r6 >> 26) - r8 - C
	NZCV = cond(fp)
	// succ:  l00009359
l00009359:
	branch Test(UGE,C) l0000935D
	// succ:  l00009359_1 l0000935D
l00009359_1:
	// succ:  l0000935D
l0000935D:
GPIOPortIntRegister_exit:


// GPIOPortIntUnregister
// Return size: 0
void GPIOPortIntUnregister()
GPIOPortIntUnregister_entry:
	// succ:  l000093B1
l000093B1:
	sp = fp
	branch Test(UGT,ZC) l000093B5
	// succ:  l000093B1_1 l000093B5
l000093B1_1:
	r0 = Mem0[r5:word32]
	r1 = Mem0[r5 + 4:word32]
	r3 = Mem0[r5 + 8:word32]
	r6 = Mem0[r5 + 12:word32]
	ip = Mem0[r5 + 16:word32]
	r5 = r5 + 20
	// succ:  l000093B5
l000093B5:
	branch Test(NE,Z) l000093B9
	// succ:  l000093B5_1 l000093B9
l000093B5_1:
	// succ:  l000093B9
l000093B9:
	branch Test(GT,NZ) l000093BD
	// succ:  l000093B9_1 l000093BD
l000093B9_1:
	fp = Mem0[r1:int8]
	r1 = r1 + 0x00000008
	// succ:  l000093BD
l000093BD:
	branch Test(LT,NV) l000093C1
	// succ:  l000093BD_1 l000093C1
l000093BD_1:
	r2 = r0 & ~0x000000BC
	// succ:  l000093C1
l000093C1:
	branch Test(UGT,ZC) l000093C5
	// succ:  l000093C1_1 l000093C5
l000093C1_1:
	r0 = Mem0[r3:word32]
	r2 = Mem0[r3 - 4:word32]
	r4 = Mem0[r3 - 8:word32]
	r5 = Mem0[r3 - 12:word32]
	r6 = Mem0[r3 - 16:word32]
	r7 = Mem0[r3 - 20:word32]
	return
	// succ:  GPIOPortIntUnregister_exit
l000093C5:
	branch Test(EQ,Z) l000093C9
	// succ:  l000093C5_1 l000093C9
l000093C5_1:
	r1 = r1 & ~(r2 >> 16)
	// succ:  l000093C9
l000093C9:
	branch Test(NE,Z) l000093CD
	// succ:  l000093C9_1 l000093CD
l000093C9_1:
	r2 = r6 - (r4 >>u 32)
	// succ:  l000093CD
l000093CD:
	branch Test(ULT,C) l000093D1
	// succ:  l000093CD_1 l000093D1
l000093CD_1:
	r3 = Mem0[r9:int16]
	r9 = r9 + 0x00000040
	// succ:  l000093D1
l000093D1:
	branch Test(EQ,Z) l000093D5
	// succ:  l000093D1_1 l000093D5
l000093D1_1:
	fp = (r6 >> 26) - r8 - C
	NZCV = cond(fp)
	// succ:  l000093D5
l000093D5:
	branch Test(LT,NV) l000093D9
	// succ:  l000093D5_1 l000093D9
l000093D5_1:
	// succ:  l000093D9
l000093D9:
	branch Test(UGT,ZC) l000093DD
	// succ:  l000093D9_1 l000093DD
l000093D9_1:
	Mem0[fp:word32] = r3
	Mem0[fp - 4:word32] = r4
	Mem0[fp - 8:word32] = r5
	Mem0[fp - 12:word32] = r7
	Mem0[fp - 16:word32] = r8
	Mem0[fp - 20:word32] = r9
	Mem0[fp - 24:word32] = fp
	Mem0[fp - 28:word32] = ip
	// succ:  l000093DD
l000093DD:
	branch Test(NE,Z) l000093E1
	// succ:  l000093DD_1 l000093E1
l000093DD_1:
	r1 = r0 & ~0x04200000
	// succ:  l000093E1
l000093E1:
	branch Test(UGT,ZC) l000093E5
	// succ:  l000093E1_1 l000093E5
l000093E1_1:
	r0 = Mem0[r3:word32]
	r2 = Mem0[r3 - 4:word32]
	r4 = Mem0[r3 - 8:word32]
	r5 = Mem0[r3 - 12:word32]
	r6 = Mem0[r3 - 16:word32]
	r7 = Mem0[r3 - 20:word32]
	fp = Mem0[r3 - 24:word32]
	sp = Mem0[r3 - 28:word32]
	lr = Mem0[r3 - 32:word32]
	r3 = r3 + 40
	return
	// succ:  GPIOPortIntUnregister_exit
l000093E5:
	branch Test(EQ,Z) l000093E9
	// succ:  l000093E5_1 l000093E9
l000093E5_1:
	r0 = Mem0[r1:byte]
	r1 = r1 + 0x00000842
	// succ:  l000093E9
l000093E9:
	branch Test(NE,Z) l000093ED
	// succ:  l000093E9_1 l000093ED
l000093E9_1:
	r2 = r6 - (r4 >>u 32)
	// succ:  l000093ED
l000093ED:
	branch Test(ULT,C) l000093F1
	// succ:  l000093ED_1 l000093F1
l000093ED_1:
	r2 = Mem0[r9:int16]
	r9 = r9 + 0x00000040
	// succ:  l000093F1
l000093F1:
	branch Test(EQ,Z) l000093F5
	// succ:  l000093F1_1 l000093F5
l000093F1_1:
	fp = (r6 >> 26) - r8 - C
	NZCV = cond(fp)
	// succ:  l000093F5
l000093F5:
	branch Test(UGT,ZC) l000093F9
	// succ:  l000093F5_1 l000093F9
l000093F5_1:
	// succ:  l000093F9
l000093F9:
GPIOPortIntUnregister_exit:


// GPIOPinRead
// Return size: 0
void GPIOPinRead()
GPIOPinRead_entry:
	// succ:  l0000944D
l0000944D:
	sp = fp
	branch Test(OV,V) l00009451
	// succ:  l0000944D_1 l00009451
l0000944D_1:
	Mem0[r0:word64] = r3_r2
	r0 = r0 - r8
	// succ:  l00009451
l00009451:
	branch Test(GT,NZ) l00009451_thunk_GPIOPinWrite
	// succ:  l00009451_1 l00009451_thunk_GPIOPinWrite
l00009451_1:
	r0 = pc + (r7 >> 32) + C
	NZCV = cond(r0)
	goto l00009451_thunk_GPIOPinWrite
	// succ:  l00009451_thunk_GPIOPinWrite
l00009451_thunk_GPIOPinWrite:
	call GPIOPinWrite (retsize: 0;)
	return
	// succ:  GPIOPinRead_exit
l00009451_thunk_GPIOPinWrite:
	call GPIOPinWrite (retsize: 0;)
	return
	// succ:  GPIOPinRead_exit
GPIOPinRead_exit:


// GPIOPinWrite
// Return size: 0
void GPIOPinWrite()
GPIOPinWrite_entry:
	// succ:  l00009455
l00009455:
	sp = fp
GPIOPinWrite_exit:


// GPIOPinTypeComparator
// Return size: 0
void GPIOPinTypeComparator()
GPIOPinTypeComparator_entry:
	// succ:  l0000945D
l0000945D:
	sp = fp
	branch Test(GT,NZV) l00009461
	// succ:  l0000945D_1 l00009461
l0000945D_1:
	Mem0[r3:word16] = (uint16) ip
	r3 = r3 + 0xFFFFFF2C
	// succ:  l00009461
l00009461:
GPIOPinTypeComparator_exit:


// GPIOPinTypeI2C
// Return size: 0
void GPIOPinTypeI2C()
GPIOPinTypeI2C_entry:
	// succ:  l00009481
l00009481:
	sp = fp
	branch Test(GT,NZV) l00009485
	// succ:  l00009481_1 l00009485
l00009481_1:
	Mem0[r6:word16] = (uint16) r0
	r6 = r6 + 0xFFFFFF2C
	// succ:  l00009485
l00009485:
	branch Test(NE,Z) l00009489
	// succ:  l00009485_1 l00009489
l00009485_1:
	call fn0090986D (retsize: 0;)
	// succ:  l00009489
l00009489:
GPIOPinTypeI2C_exit:


// GPIOPinTypeQEI
// Return size: 0
void GPIOPinTypeQEI()
GPIOPinTypeQEI_entry:
	// succ:  l000094A5
l000094A5:
	sp = fp
	branch Test(GT,NZV) l000094A9
	// succ:  l000094A5_1 l000094A9
l000094A5_1:
	Mem0[r6:word16] = (uint16) r0
	r6 = r6 + 0xFFFFFF2C
	// succ:  l000094A9
l000094A9:
	branch Test(EQ,Z) l000094A9_then
	call fn00909891 (retsize: 0;)
	return
	// succ:  l000094AD l000094A9_then
l000094A9_then:
l000094AD:
	// succ:  GPIOPinTypeQEI_exit
GPIOPinTypeQEI_exit:


// GPIOPinTypeUART
// Return size: 0
void GPIOPinTypeUART()
GPIOPinTypeUART_entry:
	// succ:  l000094C9
l000094C9:
	sp = fp
	branch Test(GT,NZV) l000094CD
	// succ:  l000094C9_1 l000094CD
l000094C9_1:
	Mem0[r6:word16] = (uint16) r0
	r6 = r6 + 0xFFFFFF2C
	// succ:  l000094CD
l000094CD:
	branch Test(NE,Z) l000094D1
	// succ:  l000094CD_1 l000094D1
l000094CD_1:
	Mem0[r4:word32] = r3
	Mem0[r4 - 4:word32] = r4
	Mem0[r4 - 8:word32] = r5
	Mem0[r4 - 12:word32] = r6
	Mem0[r4 - 16:word32] = r7
	r4 = r4 - 20
	// succ:  l000094D1
l000094D1:
GPIOPinTypeUART_exit:


// GPIOPinTypeTimer
// Return size: 0
void GPIOPinTypeTimer()
GPIOPinTypeTimer_entry:
	// succ:  l000094ED
l000094ED:
	sp = fp
GPIOPinTypeTimer_exit:


// GPIOPinTypeSSI
// Return size: 0
void GPIOPinTypeSSI()
GPIOPinTypeSSI_entry:
	// succ:  l000094F1
l000094F1:
	sp = fp
GPIOPinTypeSSI_exit:


// GPIOPinTypePWM
// Return size: 0
void GPIOPinTypePWM()
GPIOPinTypePWM_entry:
	// succ:  l000094F5
l000094F5:
	sp = fp
GPIOPinTypePWM_exit:


// IntDefaultHandler
// Return size: 0
void IntDefaultHandler()
IntDefaultHandler_entry:
	// succ:  l000094F9
l000094F9:
	sp = fp
	branch Test(NE,Z) l000094F9_thunk_IntMasterEnable
	// succ:  l000094F9_1 l000094F9_thunk_IntMasterEnable
l000094F9_1:
	r0 = pc + __ror(r7, 1) + C
	NZCV = cond(r0)
	goto l000094F9_thunk_IntMasterEnable
	// succ:  l000094F9_thunk_IntMasterEnable
l000094F9_thunk_IntMasterEnable:
	call IntMasterEnable (retsize: 0;)
	return
	// succ:  IntDefaultHandler_exit
l000094F9_thunk_IntMasterEnable:
	call IntMasterEnable (retsize: 0;)
	return
	// succ:  IntDefaultHandler_exit
IntDefaultHandler_exit:


// IntMasterEnable
// Return size: 0
void IntMasterEnable()
IntMasterEnable_entry:
	// succ:  l000094FD
l000094FD:
	sp = fp
	branch Test(NE,Z) l000094FD_thunk_IntMasterDisable
	// succ:  l000094FD_1 l000094FD_thunk_IntMasterDisable
l000094FD_1:
	lr = Mem0[sp:int16]
	sp = sp + r0
	goto l000094FD_thunk_IntMasterDisable
	// succ:  l000094FD_thunk_IntMasterDisable
l000094FD_thunk_IntMasterDisable:
	call IntMasterDisable (retsize: 0;)
	return
	// succ:  IntMasterEnable_exit
l000094FD_thunk_IntMasterDisable:
	call IntMasterDisable (retsize: 0;)
	return
	// succ:  IntMasterEnable_exit
IntMasterEnable_exit:


// IntMasterDisable
// Return size: 0
void IntMasterDisable()
IntMasterDisable_entry:
	// succ:  l00009501
l00009501:
	sp = fp
	branch Test(EQ,Z) l00009501_then
	call fnFEF858C9 (retsize: 0;)
	return
	// succ:  IntMasterDisable_exit l00009501_thunk_IntRegister l00009501_then
l00009501_then:
l00009501_thunk_IntRegister:
	call IntRegister (retsize: 0;)
	return
	// succ:  IntMasterDisable_exit
IntMasterDisable_exit:


// IntRegister
// Return size: 0
void IntRegister()
IntRegister_entry:
	// succ:  l00009505
l00009505:
	sp = fp
	branch Test(EQ,Z) l00009509
	// succ:  l00009505_1 l00009509
l00009505_1:
	call fnFED15639 (retsize: 0;)
	// succ:  l00009509
l00009509:
	branch Test(LT,NV) l0000950D
	// succ:  l00009509_1 l0000950D
l00009509_1:
	r0 = DPB(r0, 0xCA68, 16)
	// succ:  l0000950D
l0000950D:
	branch Test(ULT,C) l00009511
	// succ:  l0000950D_1 l00009511
l0000950D_1:
	r0 = r0 & ~0x00042000
	// succ:  l00009511
l00009511:
	branch Test(GE,NZV) l00009515
	// succ:  l00009511_1 l00009515
l00009511_1:
	r1 = Mem0[r1:word32]
	r2 = Mem0[r1 + 4:word32]
	r6 = Mem0[r1 + 8:word32]
	r10 = Mem0[r1 + 12:word32]
	r1 = r1 + 16
	// succ:  l00009515
l00009515:
	branch Test(EQ,Z) l00009519
	// succ:  l00009515_1 l00009519
l00009515_1:
	r1 = fp & 0x00005000
	NZCV = cond(r1)
	// succ:  l00009519
l00009519:
	branch Test(NE,Z) l0000951D
	// succ:  l00009519_1 l0000951D
l00009519_1:
	r4 = Mem0[r8:byte]
	r8 = r8 + 0x00000368
	// succ:  l0000951D
l0000951D:
IntRegister_exit:


// IntUnregister
// Return size: 0
void IntUnregister()
IntUnregister_entry:
	// succ:  l00009539
l00009539:
	sp = fp
	branch Test(GT,NZ) l0000953D
	// succ:  l00009539_1 l0000953D
l00009539_1:
	r0 = DPB(r0, 0xA34B, 16)
	// succ:  l0000953D
l0000953D:
IntUnregister_exit:


// IntPriorityGroupingSet
// Return size: 0
void IntPriorityGroupingSet()
IntPriorityGroupingSet_entry:
	// succ:  l0000954D
l0000954D:
	sp = fp
	branch Test(LT,N) l00009551
	// succ:  l0000954D_1 l00009551
l0000954D_1:
	r0 = DPB(r0, 0xA54B, 16)
	// succ:  l00009551
l00009551:
	branch Test(GT,NZ) l00009555
	// succ:  l00009551_1 l00009555
l00009551_1:
	NZCV = cond(r0 ^ 0x000000F8)
	// succ:  l00009555
l00009555:
IntPriorityGroupingSet_exit:


// IntPriorityGroupingGet
// Return size: 0
void IntPriorityGroupingGet()
IntPriorityGroupingGet_entry:
	// succ:  l00009569
l00009569:
	sp = fp
	branch Test(NE,Z) l0000956D
	// succ:  l00009569_1 l0000956D
l00009569_1:
l0000956D:
	branch Test(NE,Z) l00009571
	// succ:  l0000956D_1 l00009571
l0000956D_1:
	Mem0[r0 - 4:word32] = r0
	Mem0[r0 - 8:word32] = r3
	Mem0[r0 - 12:word32] = r6
	r0 = r0 - 16
	// succ:  l00009571
l00009571:
	branch Test(EQ,Z) l00009575
	// succ:  l00009571_1 l00009575
l00009571_1:
	Mem0[r10 - 4:word32] = r3
	Mem0[r10 - 8:word32] = r5
	Mem0[r10 - 12:word32] = r6
	Mem0[r10 - 16:word32] = r9
	Mem0[r10 - 20:word32] = r10
	// succ:  l00009575
l00009575:
	branch Test(LT,N) l00009579
	// succ:  l00009575_1 l00009579
l00009575_1:
	r0 = 0x00000010 - r0 - C
	NZCV = cond(r0)
	// succ:  l00009579
l00009579:
	branch Test(ULE,ZC) l0000957D
	// succ:  l00009579_1 l0000957D
l00009579_1:
	call fn00ECA961 (retsize: 0;)
	// succ:  l0000957D
l0000957D:
	branch Test(NE,Z) l00009581
	// succ:  l0000957D_1 l00009581
l0000957D_1:
	r0 = r0 & ~(r2 >> 4)
	// succ:  l00009581
l00009581:
IntPriorityGroupingGet_exit:


// IntPrioritySet
// Return size: 0
void IntPrioritySet()
IntPrioritySet_entry:
	// succ:  l00009591
l00009591:
	sp = fp
	branch Test(EQ,Z) l00009595
	// succ:  l00009591_1 l00009595
l00009591_1:
	r0 = fp - (r2 >>u 18)
	// succ:  l00009595
l00009595:
	branch Test(NE,Z) l00009599
	// succ:  l00009595_1 l00009599
l00009595_1:
	r2 = !0x000000B4
	NZCV = cond(r2)
	// succ:  l00009599
l00009599:
	branch Test(EQ,Z) l0000959D
	// succ:  l00009599_1 l0000959D
l00009599_1:
l0000959D:
	branch Test(NE,Z) l000095A1
	// succ:  l0000959D_1 l000095A1
l0000959D_1:
	r0 = !0x0000006A
	NZCV = cond(r0)
	// succ:  l000095A1
l000095A1:
	branch Test(LE,NZV) l000095A5
	// succ:  l000095A1_1 l000095A5
l000095A1_1:
	r2 = r8 - (r0 << 6)
	// succ:  l000095A5
l000095A5:
	branch Test(ULT,C) l000095A9
	// succ:  l000095A5_1 l000095A9
l000095A5_1:
	r8 = DPB(r8, 0x0200, 16)
	// succ:  l000095A9
l000095A9:
	branch Test(NE,Z) l000095AD
	// succ:  l000095A9_1 l000095AD
l000095A9_1:
	r3 = (int16) (r10 >> 16) *s (int16) (r2 >> 16) + r0
	Q = cond(r3)
	// succ:  l000095AD
l000095AD:
	branch Test(EQ,Z) l000095B1
	// succ:  l000095AD_1 l000095B1
l000095AD_1:
	r1 = Mem0[r0:word32]
	r3 = Mem0[r0 + 4:word32]
	r4 = Mem0[r0 + 8:word32]
	r5 = Mem0[r0 + 12:word32]
	r6 = Mem0[r0 + 16:word32]
	r7 = Mem0[r0 + 20:word32]
	r0 = r0 + 24
	// succ:  l000095B1
l000095B1:
	branch Test(EQ,Z) l000095B5
	// succ:  l000095B1_1 l000095B5
l000095B1_1:
	r2 = r0 - (r3 >> 32)
	// succ:  l000095B5
l000095B5:
	branch Test(LT,NV) l000095B9
	// succ:  l000095B5_1 l000095B9
l000095B5_1:
	Mem0[r7:byte] = (byte) r7
	r7 = r7 - 0x000000BC
	// succ:  l000095B9
l000095B9:
	branch Test(NE,Z) l000095B9_thunk_IntPriorityGet
	// succ:  l000095B9_1 l000095B9_thunk_IntPriorityGet
l000095B9_1:
	Mem0[r0:word32] = r0
	r0 = r0 - (r2 >>u 1)
	goto l000095B9_thunk_IntPriorityGet
	// succ:  l000095B9_thunk_IntPriorityGet
l000095B9_thunk_IntPriorityGet:
	call IntPriorityGet (retsize: 0;)
	return
	// succ:  IntPrioritySet_exit
l000095B9_thunk_IntPriorityGet:
	call IntPriorityGet (retsize: 0;)
	return
	// succ:  IntPrioritySet_exit
IntPrioritySet_exit:


// IntPriorityGet
// Return size: 0
void IntPriorityGet()
IntPriorityGet_entry:
	// succ:  l000095BD
l000095BD:
	sp = fp
	branch Test(NE,Z) l000095C1
	// succ:  l000095BD_1 l000095C1
l000095BD_1:
	r2 = !0x0000004B
	NZCV = cond(r2)
	// succ:  l000095C1
l000095C1:
	branch Test(EQ,Z) l000095C5
	// succ:  l000095C1_1 l000095C5
l000095C1_1:
	call fn0110E1D1 (retsize: 0;)
	// succ:  l000095C5
l000095C5:
	branch Test(NE,Z) l000095C9
	// succ:  l000095C5_1 l000095C9
l000095C5_1:
	r0 = !0x0000006A
	NZCV = cond(r0)
	// succ:  l000095C9
l000095C9:
	branch Test(LE,NZV) l000095CD
	// succ:  l000095C9_1 l000095CD
l000095C9_1:
	r1 = r8 - (r0 << 22)
	// succ:  l000095CD
l000095CD:
	branch Test(NE,Z) l000095D1
	// succ:  l000095CD_1 l000095D1
l000095CD_1:
	r2 = (r0 << 6) - r10 - C
	NZCV = cond(r2)
	// succ:  l000095D1
l000095D1:
	branch Test(OV,V) l000095D5
	// succ:  l000095D1_1 l000095D5
l000095D1_1:
	ip = Mem0[r2:int16]
	r2 = r2 + r0
	// succ:  l000095D5
l000095D5:
	branch Test(LT,NV) l000095D9
	// succ:  l000095D5_1 l000095D9
l000095D5_1:
	r0 = Mem0[0x000095DD:word32]
	pc = pc + 0x00000047
	// succ:  l000095D9
l000095D9:
	branch Test(NE,Z) l000095D9_thunk_IntEnable
	// succ:  l000095D9_1 l000095D9_thunk_IntEnable
l000095D9_1:
	Mem0[r0:word32] = r0
	r0 = r0 - 0x000000A2
	goto l000095D9_thunk_IntEnable
	// succ:  l000095D9_thunk_IntEnable
l000095D9_thunk_IntEnable:
	call IntEnable (retsize: 0;)
	return
	// succ:  IntPriorityGet_exit
l000095D9_thunk_IntEnable:
	call IntEnable (retsize: 0;)
	return
	// succ:  IntPriorityGet_exit
IntPriorityGet_exit:


// IntEnable
// Return size: 0
void IntEnable()
IntEnable_entry:
	// succ:  l000095DD
l000095DD:
	sp = fp
	branch Test(NE,Z) l000095E1
	// succ:  l000095DD_1 l000095E1
l000095DD_1:
	r1 = Mem0[r0 + 808:byte]
	// succ:  l000095E1
l000095E1:
	branch Test(NE,Z) l000095E5
	// succ:  l000095E1_1 l000095E5
l000095E1_1:
	r1 = Mem0[r0:byte]
	r0 = r0 + (r8 >>u 14)
	// succ:  l000095E5
l000095E5:
	branch Test(NE,Z) l000095E9
	// succ:  l000095E5_1 l000095E9
l000095E5_1:
	// succ:  l000095E9
l000095E9:
	branch Test(NE,Z) l000095ED
	// succ:  l000095E9_1 l000095ED
l000095E9_1:
	r0 = Mem0[r0 + 1832:byte]
	// succ:  l000095ED
l000095ED:
IntEnable_exit:


// IntDisable
// Return size: 0
void IntDisable()
IntDisable_entry:
	// succ:  l00009639
l00009639:
	sp = fp
	branch Test(NE,Z) l0000963D
	// succ:  l00009639_1 l0000963D
l00009639_1:
	r1 = Mem0[r0 + 808:byte]
	// succ:  l0000963D
l0000963D:
	branch Test(NE,Z) l00009641
	// succ:  l0000963D_1 l00009641
l0000963D_1:
	r1 = Mem0[r0:byte]
	r0 = r0 + (r8 >>u 14)
	// succ:  l00009641
l00009641:
	branch Test(NE,Z) l00009645
	// succ:  l00009641_1 l00009645
l00009641_1:
	// succ:  l00009645
l00009645:
	branch Test(NE,Z) l00009649
	// succ:  l00009645_1 l00009649
l00009645_1:
	r0 = Mem0[r0 + 1832:byte]
	// succ:  l00009649
l00009649:
IntDisable_exit:


// OSRAMDelay
// Return size: 0
void OSRAMDelay()
OSRAMDelay_entry:
	// succ:  l00009695
l00009695:
	sp = fp
	branch Test(OV,V) l00009699
	// succ:  l00009695_1 l00009699
l00009695_1:
	pc = r1 - (r8 >>u sp) - C
	NZCV = cond(pc)
	// succ:  l00009699
l00009699:
	branch Test(UGE,C) l00009699_thunk_OSRAMWriteFirst
	// succ:  l00009699_1 l00009699_thunk_OSRAMWriteFirst
l00009699_1:
	r0 = Mem0[pc:word32]
	r1 = Mem0[pc + 4:word32]
	r2 = Mem0[pc + 8:word32]
	r6 = Mem0[pc + 12:word32]
	pc = pc + 16
	goto l00009699_thunk_OSRAMWriteFirst
	// succ:  l00009699_thunk_OSRAMWriteFirst
l00009699_thunk_OSRAMWriteFirst:
	call OSRAMWriteFirst (retsize: 0;)
	return
	// succ:  OSRAMDelay_exit
l00009699_thunk_OSRAMWriteFirst:
	call OSRAMWriteFirst (retsize: 0;)
	return
	// succ:  OSRAMDelay_exit
OSRAMDelay_exit:


// OSRAMWriteFirst
// Return size: 0
void OSRAMWriteFirst()
OSRAMWriteFirst_entry:
	// succ:  l0000969D
l0000969D:
	sp = fp
OSRAMWriteFirst_exit:


// OSRAMWriteArray
// Return size: 0
void OSRAMWriteArray()
OSRAMWriteArray_entry:
	// succ:  l000096C5
l000096C5:
	sp = fp
	branch Test(NE,Z) l000096C9
	// succ:  l000096C5_1 l000096C9
l000096C5_1:
	r5 = r5 + 2225
	call Mem0[r5:word32] (retsize: 0;)
	return
	// succ:  OSRAMWriteArray_exit
l000096C9:
	branch Test(NE,Z) l000096CD
	// succ:  l000096C9_1 l000096CD
l000096C9_1:
l000096CD:
	branch Test(NE,Z) l000096D1
	// succ:  l000096CD_1 l000096D1
l000096CD_1:
	r4 = r8 & ip >> 12
	NZCV = cond(r4)
	// succ:  l000096D1
l000096D1:
	branch Test(NE,Z) l000096D5
	// succ:  l000096D1_1 l000096D5
l000096D1_1:
	r2 = r6 - (r1 >>u 32)
	// succ:  l000096D5
l000096D5:
	branch Test(NE,Z) l000096D9
	// succ:  l000096D5_1 l000096D9
l000096D5_1:
	r7 = Mem0[sp:int16]
	sp = sp + 0x00000080
	// succ:  l000096D9
l000096D9:
	branch Test(UGE,C) l000096DD
	// succ:  l000096D9_1 l000096DD
l000096D9_1:
	r3 = Mem0[r0:word32]
	r5 = Mem0[r0 + 4:word32]
	r8 = Mem0[r0 + 8:word32]
	fp = Mem0[r0 + 12:word32]
	ip = Mem0[r0 + 16:word32]
	sp = Mem0[r0 + 20:word32]
	lr = Mem0[r0 + 24:word32]
	return
	// succ:  OSRAMWriteArray_exit
l000096DD:
	branch Test(GT,NZV) l000096E1
	// succ:  l000096DD_1 l000096E1
l000096DD_1:
	r3 = Mem0[r7 + 4:word32]
	r5 = Mem0[r7 + 8:word32]
	r6 = Mem0[r7 + 12:word32]
	r8 = Mem0[r7 + 16:word32]
	r9 = Mem0[r7 + 20:word32]
	r10 = Mem0[r7 + 24:word32]
	fp = Mem0[r7 + 28:word32]
	ip = Mem0[r7 + 32:word32]
	sp = Mem0[r7 + 36:word32]
	lr = Mem0[r7 + 40:word32]
	r7 = r7 + 48
	return
	// succ:  OSRAMWriteArray_exit
l000096E1:
	branch Test(NE,Z) l000096E5
	// succ:  l000096E1_1 l000096E5
l000096E1_1:
	r8 = r8 + 95
	r1 = Mem0[r8:int16]
	// succ:  l000096E5
l000096E5:
	branch Test(NE,Z) l000096E9
	// succ:  l000096E5_1 l000096E9
l000096E5_1:
	r2 = r6 - (fp << r0)
	// succ:  l000096E9
l000096E9:
	branch Test(NE,Z) l000096ED
	// succ:  l000096E9_1 l000096ED
l000096E9_1:
	sp = sp + 128
	r10 = Mem0[sp:int16]
	// succ:  l000096ED
l000096ED:
	branch Test(NE,Z) l000096F1
	// succ:  l000096ED_1 l000096F1
l000096ED_1:
	r2 = r6 - (r1 >>u 32)
	// succ:  l000096F1
l000096F1:
	branch Test(LT,NV) l000096F5
	// succ:  l000096F1_1 l000096F5
l000096F1_1:
	r9 = __mrc(0x06, 0x00000007, 0x0D, 0x00, 0x00000007)
	// succ:  l000096F5
l000096F5:
OSRAMWriteArray_exit:


// OSRAMWriteByte
// Return size: 0
void OSRAMWriteByte()
OSRAMWriteByte_entry:
	// succ:  l00009705
l00009705:
	sp = fp
	branch Test(NE,Z) l00009709
	// succ:  l00009705_1 l00009709
l00009705_1:
	Mem0[r6:word16] = (uint16) r0
	r6 = r6 + 0xFFFFFFBB
	// succ:  l00009709
l00009709:
	branch Test(NE,Z) l0000970D
	// succ:  l00009709_1 l0000970D
l00009709_1:
	r0 = r8 - (r1 >>u 18)
	// succ:  l0000970D
l0000970D:
	branch Test(NE,Z) l00009711
	// succ:  l0000970D_1 l00009711
l0000970D_1:
	r5 = Mem0[sp:int16]
	sp = sp + 0x000000C0
	// succ:  l00009711
l00009711:
	branch Test(NE,Z) l00009715
	// succ:  l00009711_1 l00009715
l00009711_1:
	call Mem0[r0:byte] (retsize: 0;)
	return
	// succ:  OSRAMWriteByte_exit
l00009715:
OSRAMWriteByte_exit:


// OSRAMWriteFinal
// Return size: 0
void OSRAMWriteFinal()
OSRAMWriteFinal_entry:
	// succ:  l00009739
l00009739:
	sp = fp
	branch Test(NE,Z) l0000973D
	// succ:  l00009739_1 l0000973D
l00009739_1:
	__mcr(0x06, 0x00000002, r0, 0x06, 0x05, 0x00000005)
	// succ:  l0000973D
l0000973D:
	branch Test(ULT,C) l00009741
	// succ:  l0000973D_1 l00009741
l0000973D_1:
	r0 = r1 ^ ip >> 32
	// succ:  l00009741
l00009741:
	branch Test(GT,NZ) l00009745
	// succ:  l00009741_1 l00009745
l00009741_1:
	r0 = !(r6 >> 32)
	NZCV = cond(r0)
	// succ:  l00009745
l00009745:
OSRAMWriteFinal_exit:


// OSRAMClear
// Return size: 0
void OSRAMClear()
OSRAMClear_entry:
	// succ:  l00009781
l00009781:
	sp = fp
OSRAMClear_exit:


// OSRAMStringDraw
// Return size: 0
void OSRAMStringDraw()
OSRAMStringDraw_entry:
	// succ:  l000097CD
l000097CD:
	sp = fp
	branch Test(NE,Z) l000097D1
	// succ:  l000097CD_1 l000097D1
l000097CD_1:
l000097D1:
	branch Test(ULE,ZC) l000097D5
	// succ:  l000097D1_1 l000097D5
l000097D1_1:
	r0 = r6 - (r6 >> 10)
	// succ:  l000097D5
l000097D5:
OSRAMStringDraw_exit:


// OSRAMImageDraw
// Return size: 0
void OSRAMImageDraw()
OSRAMImageDraw_entry:
	// succ:  l00009881
l00009881:
	sp = fp
	branch Test(NE,Z) l00009885
	// succ:  l00009881_1 l00009885
l00009881_1:
	Mem0[r7:word32] = r0
	Mem0[r7 - 4:word32] = r3
	Mem0[r7 - 8:word32] = r5
	Mem0[r7 - 12:word32] = r6
	Mem0[r7 - 16:word32] = r7
	Mem0[r7 - 20:word32] = ip
	Mem0[r7 - 24:word32] = sp
	Mem0[r7 - 28:word32] = lr
	Mem0[r7 - 32:word32] = pc
	// succ:  l00009885
l00009885:
	branch Test(NE,Z) l00009889
	// succ:  l00009885_1 l00009889
l00009885_1:
	r3 = r3 + 1694
	r8 = Mem0[r3:word32]
	// succ:  l00009889
l00009889:
	branch Test(UGT,ZC) l0000988D
	// succ:  l00009889_1 l0000988D
l00009889_1:
	Mem0[r6 - 4:word32] = r1
	Mem0[r6 - 8:word32] = r2
	Mem0[r6 - 12:word32] = r6
	Mem0[r6 - 16:word32] = r10
	Mem0[r6 - 20:word32] = ip
	// succ:  l0000988D
l0000988D:
	branch Test(LE,NZV) l00009891
	// succ:  l0000988D_1 l00009891
l0000988D_1:
	NZCV = cond(r1 ^ r6 >> 8)
	// succ:  l00009891
l00009891:
	branch Test(EQ,Z) l00009895
	// succ:  l00009891_1 l00009895
l00009891_1:
l00009895:
	branch Test(EQ,Z) l00009899
	// succ:  l00009895_1 l00009899
l00009895_1:
	r4 = (r4 >> 16) - r0 - C
	NZCV = cond(r4)
	// succ:  l00009899
l00009899:
	branch Test(NE,Z) l0000989D
	// succ:  l00009899_1 l0000989D
l00009899_1:
	// succ:  l0000989D
l0000989D:
OSRAMImageDraw_exit:


// OSRAMInit
// Return size: 0
void OSRAMInit()
OSRAMInit_entry:
	// succ:  l000098F1
l000098F1:
	sp = fp
	branch Test(NE,Z) l000098F5
	// succ:  l000098F1_1 l000098F5
l000098F1_1:
	Mem0[r1:byte] = (byte) pc
	r1 = r1 - 0x000000E9
	// succ:  l000098F5
l000098F5:
	branch Test(EQ,Z) l000098F9
	// succ:  l000098F5_1 l000098F9
l000098F5_1:
	r4 = (r6 >> 30) - r0 - C
	NZCV = cond(r4)
	// succ:  l000098F9
l000098F9:
	branch Test(UGE,C) l000098FD
	// succ:  l000098F9_1 l000098FD
l000098F9_1:
	// succ:  l000098FD
l000098FD:
	branch Test(NE,Z) l00009901
	// succ:  l000098FD_1 l00009901
l000098FD_1:
	Mem0[r8:word64] = r2_r1
	r8 = r8 + 0xFFFFFF77
	// succ:  l00009901
l00009901:
	branch Test(NE,Z) l00009905
	// succ:  l00009901_1 l00009905
l00009901_1:
l00009905:
OSRAMInit_exit:


// OSRAMDisplayOn
// Return size: 0
void OSRAMDisplayOn()
OSRAMDisplayOn_entry:
	// succ:  l00009975
l00009975:
	sp = fp
	branch Test(EQ,Z) l00009979
	// succ:  l00009975_1 l00009979
l00009975_1:
	pc = r1 - __ror(r9, 1)
	// succ:  l00009979
l00009979:
	branch Test(NE,Z) l0000997D
	// succ:  l00009979_1 l0000997D
l00009979_1:
	Mem0[r6:word32] = lr
	r6 = r6 - 0x0000034F
	// succ:  l0000997D
l0000997D:
	branch Test(NE,Z) l00009981
	// succ:  l0000997D_1 l00009981
l0000997D_1:
	r8 = r0 ^ r4 >>u 32
	// succ:  l00009981
l00009981:
OSRAMDisplayOn_exit:


// OSRAMDisplayOff
// Return size: 0
void OSRAMDisplayOff()
OSRAMDisplayOff_entry:
	// succ:  l000099C1
l000099C1:
	sp = fp
OSRAMDisplayOff_exit:


// SSIConfig
// Return size: 0
void SSIConfig()
SSIConfig_entry:
	// succ:  l000099E9
l000099E9:
	sp = fp
	branch Test(EQ,Z) l000099ED
	// succ:  l000099E9_1 l000099ED
l000099E9_1:
	Mem0[r1:byte] = (byte) pc
	// succ:  l000099ED
l000099ED:
	branch Test(ULE,ZC) l000099F1
	// succ:  l000099ED_1 l000099F1
l000099ED_1:
	Mem0[r6:word32] = r1
	Mem0[r6 - 4:word32] = r2
	Mem0[r6 - 8:word32] = r6
	Mem0[r6 - 12:word32] = r9
	Mem0[r6 - 16:word32] = r10
	// succ:  l000099F1
l000099F1:
	branch Test(NE,Z) l000099F5
	// succ:  l000099F1_1 l000099F5
l000099F1_1:
	Mem0[r6:byte] = (byte) r1
	r6 = r6 - (r6 >> 24)
	// succ:  l000099F5
l000099F5:
	call fnFFC09C73 (retsize: 0;)
	branch Test(EQ,Z) l000099FD
	// succ:  l000099F9_1 l000099FD
l000099F9_1:
	Mem0[pc:word32] = r0
	Mem0[pc - 4:word32] = r3
	Mem0[pc - 8:word32] = r4
	Mem0[pc - 12:word32] = r5
	Mem0[pc - 16:word32] = r6
	Mem0[pc - 20:word32] = r7
	Mem0[pc - 24:word32] = r9
	pc = pc - 28
	// succ:  l000099FD
l000099FD:
	branch Test(EQ,Z) l00009A01
	// succ:  l000099FD_1 l00009A01
l000099FD_1:
	Mem0[pc:word32] = r4
	Mem0[pc - 4:word32] = r6
	Mem0[pc - 8:word32] = r7
	pc = pc - 12
	// succ:  l00009A01
l00009A01:
SSIConfig_exit:


// SSIEnable
// Return size: 0
void SSIEnable()
SSIEnable_entry:
	// succ:  l00009A35
l00009A35:
	sp = fp
	branch Test(NE,Z) l00009A39
	// succ:  l00009A35_1 l00009A39
l00009A35_1:
	r4 = 0xA0000001 - r0 - C
	NZCV = cond(r4)
	// succ:  l00009A39
l00009A39:
	branch Test(OV,V) l00009A3D
	// succ:  l00009A39_1 l00009A3D
l00009A39_1:
	r4 = r0 - (r3 << 6)
	// succ:  l00009A3D
l00009A3D:
SSIEnable_exit:


// SSIDisable
// Return size: 0
void SSIDisable()
SSIDisable_entry:
	// succ:  l00009A41
l00009A41:
	sp = fp
	branch Test(NE,Z) l00009A45
	// succ:  l00009A41_1 l00009A45
l00009A41_1:
	r2 = 0xA0000001 - r0 - C
	NZCV = cond(r2)
	// succ:  l00009A45
l00009A45:
	branch Test(OV,V) l00009A49
	// succ:  l00009A45_1 l00009A49
l00009A45_1:
	r4 = r0 - (r3 << 6)
	// succ:  l00009A49
l00009A49:
	branch Test(NE,Z) l00009A49_thunk_SSIIntRegister
	// succ:  l00009A49_1 l00009A49_thunk_SSIIntRegister
l00009A49_1:
	r0 = Mem0[pc:word32]
	r1 = Mem0[pc + 4:word32]
	r2 = Mem0[pc + 8:word32]
	r6 = Mem0[pc + 12:word32]
	pc = pc + 16
	goto l00009A49_thunk_SSIIntRegister
	// succ:  l00009A49_thunk_SSIIntRegister
l00009A49_thunk_SSIIntRegister:
	call SSIIntRegister (retsize: 0;)
	return
	// succ:  SSIDisable_exit
l00009A49_thunk_SSIIntRegister:
	call SSIIntRegister (retsize: 0;)
	return
	// succ:  SSIDisable_exit
SSIDisable_exit:


// SSIIntRegister
// Return size: 0
void SSIIntRegister()
SSIIntRegister_entry:
	// succ:  l00009A4D
l00009A4D:
	sp = fp
SSIIntRegister_exit:


// SSIIntUnregister
// Return size: 0
void SSIIntUnregister()
SSIIntUnregister_entry:
	// succ:  l00009A61
l00009A61:
	sp = fp
SSIIntUnregister_exit:


// SSIIntEnable
// Return size: 0
void SSIIntEnable()
SSIIntEnable_entry:
	// succ:  l00009A75
l00009A75:
	sp = fp
SSIIntEnable_exit:


// SSIIntDisable
// Return size: 0
void SSIIntDisable()
SSIIntDisable_entry:
	// succ:  l00009A7D
l00009A7D:
	sp = fp
SSIIntDisable_exit:


// SSIIntStatus
// Return size: 0
void SSIIntStatus()
SSIIntStatus_entry:
	// succ:  l00009A89
l00009A89:
	sp = fp
	branch Test(OV,V) l00009A8D
	// succ:  l00009A89_1 l00009A8D
l00009A89_1:
	Mem0[r9:word16] = (uint16) r8
	r9 = r9 + 0x00000009
	// succ:  l00009A8D
l00009A8D:
	branch Test(OV,V) l00009A91
	// succ:  l00009A8D_1 l00009A91
l00009A8D_1:
	ip = r9 - (r7 >> 32)
	// succ:  l00009A91
l00009A91:
SSIIntStatus_exit:


// SSIIntClear
// Return size: 0
void SSIIntClear()
SSIIntClear_entry:
	// succ:  l00009A95
l00009A95:
	sp = fp
	branch Test(NE,Z) l00009A95_thunk_SSIDataPut
	// succ:  l00009A95_1 l00009A95_thunk_SSIDataPut
l00009A95_1:
	r7 = r7 - __ror(r2, 0)
	goto l00009A95_thunk_SSIDataPut
	// succ:  l00009A95_thunk_SSIDataPut
l00009A95_thunk_SSIDataPut:
	call SSIDataPut (retsize: 0;)
	return
	// succ:  SSIIntClear_exit
l00009A95_thunk_SSIDataPut:
	call SSIDataPut (retsize: 0;)
	return
	// succ:  SSIIntClear_exit
SSIIntClear_exit:


// SSIDataPut
// Return size: 0
void SSIDataPut()
SSIDataPut_entry:
	// succ:  l00009A99
l00009A99:
	sp = fp
	branch Test(EQ,Z) l00009A9D
	// succ:  l00009A99_1 l00009A9D
l00009A99_1:
	r0 = 0x00002CF1
	// succ:  l00009A9D
l00009A9D:
SSIDataPut_exit:


// SSIDataNonBlockingPut
// Return size: 0
void SSIDataNonBlockingPut()
SSIDataNonBlockingPut_entry:
	// succ:  l00009AA9
l00009AA9:
	sp = fp
	branch Test(NE,Z) l00009AAD
	// succ:  l00009AA9_1 l00009AAD
l00009AA9_1:
	r1 = 0xA0000001 - r0 - C
	NZCV = cond(r1)
	// succ:  l00009AAD
l00009AAD:
SSIDataNonBlockingPut_exit:


// SSIDataGet
// Return size: 0
void SSIDataGet()
SSIDataGet_entry:
	// succ:  l00009AB9
l00009AB9:
	sp = fp
	branch Test(EQ,Z) l00009ABD
	// succ:  l00009AB9_1 l00009ABD
l00009AB9_1:
	r0 = 0x00002CF1
	// succ:  l00009ABD
l00009ABD:
SSIDataGet_exit:


// SSIDataNonBlockingGet
// Return size: 0
void SSIDataNonBlockingGet()
SSIDataNonBlockingGet_entry:
	// succ:  l00009AC9
l00009AC9:
	sp = fp
	branch Test(NE,Z) l00009ACD
	// succ:  l00009AC9_1 l00009ACD
l00009AC9_1:
	r1 = Mem0[r0:byte]
	r0 = r0 + 0x00000368
	// succ:  l00009ACD
l00009ACD:
SSIDataNonBlockingGet_exit:


// SysCtlSRAMSizeGet
// Return size: 0
void SysCtlSRAMSizeGet()
SysCtlSRAMSizeGet_entry:
	// succ:  l00009ADD
l00009ADD:
	sp = fp
	branch Test(EQ,Z) l00009AE1
	// succ:  l00009ADD_1 l00009AE1
l00009ADD_1:
	call fn0120AC11 (retsize: 0;)
	// succ:  l00009AE1
l00009AE1:
SysCtlSRAMSizeGet_exit:


// SysCtlFlashSizeGet
// Return size: 0
void SysCtlFlashSizeGet()
SysCtlFlashSizeGet_entry:
	// succ:  l00009AF5
l00009AF5:
	sp = fp
	branch Test(EQ,Z) l00009AF9
	// succ:  l00009AF5_1 l00009AF9
l00009AF5_1:
	call fn0120AC29 (retsize: 0;)
	// succ:  l00009AF9
l00009AF9:
SysCtlFlashSizeGet_exit:


// SysCtlPinPresent
// Return size: 0
void SysCtlPinPresent()
SysCtlPinPresent_entry:
	// succ:  l00009B0D
l00009B0D:
	sp = fp
SysCtlPinPresent_exit:


// SysCtlPeripheralPresent
// Return size: 0
void SysCtlPeripheralPresent()
SysCtlPeripheralPresent_entry:
	// succ:  l00009B21
l00009B21:
	sp = fp
	branch Test(LT,N) l00009B25
	// succ:  l00009B21_1 l00009B25
l00009B21_1:
	r0 = 0x0000F24B
	// succ:  l00009B25
l00009B25:
	branch Test(ULT,C) l00009B29
	// succ:  l00009B25_1 l00009B29
l00009B25_1:
	r2 = Mem0[r0:int16]
	r0 = r0 + r8
	// succ:  l00009B29
l00009B29:
	branch Test(EQ,Z) l00009B2D
	// succ:  l00009B29_1 l00009B2D
l00009B29_1:
	call fn01025EF1 (retsize: 0;)
	// succ:  l00009B2D
l00009B2D:
	branch Test(EQ,Z) l00009B31
	// succ:  l00009B2D_1 l00009B31
l00009B2D_1:
	Mem0[r2:byte] = (byte) r1
	r2 = r2 - 0x00000868
	// succ:  l00009B31
l00009B31:
SysCtlPeripheralPresent_exit:


// SysCtlPeripheralReset
// Return size: 0
void SysCtlPeripheralReset()
SysCtlPeripheralReset_entry:
	// succ:  l00009B3D
l00009B3D:
	sp = fp
	branch Test(NE,Z) l00009B41
	// succ:  l00009B3D_1 l00009B41
l00009B3D_1:
	r0 = fp - 0x00000210
	// succ:  l00009B41
l00009B41:
SysCtlPeripheralReset_exit:


// SysCtlPeripheralEnable
// Return size: 0
void SysCtlPeripheralEnable()
SysCtlPeripheralEnable_entry:
	// succ:  l00009B7D
l00009B7D:
	sp = fp
	branch Test(NE,Z) l00009B81
	// succ:  l00009B7D_1 l00009B81
l00009B7D_1:
	r0 = 0x0000F24B
	// succ:  l00009B81
l00009B81:
	branch Test(GT,NZV) l00009B85
	// succ:  l00009B81_1 l00009B85
l00009B81_1:
	call fn000EA735 (retsize: 0;)
	// succ:  l00009B85
l00009B85:
	branch Test(OV,V) l00009B89
	// succ:  l00009B85_1 l00009B89
l00009B85_1:
	r2 = __ror(r9, 0) - r0 - C
	NZCV = cond(r2)
	// succ:  l00009B89
l00009B89:
	branch Test(EQ,Z) l00009B8D
	// succ:  l00009B89_1 l00009B8D
l00009B89_1:
	r1 = r8 - (r0 >> 20)
	// succ:  l00009B8D
l00009B8D:
	branch Test(OV,V) l00009B91
	// succ:  l00009B8D_1 l00009B91
l00009B8D_1:
	r1 = r0 - (r3 >> 16)
	// succ:  l00009B91
l00009B91:
	branch Test(LT,N) l00009B95
	// succ:  l00009B91_1 l00009B95
l00009B91_1:
	r0 = Mem0[0x00009B99:word32]
	pc = pc + 0x00000047
	// succ:  l00009B95
l00009B95:
	branch Test(NE,Z) l00009B95_thunk_SysCtlPeripheralDisable
	// succ:  l00009B95_1 l00009B95_thunk_SysCtlPeripheralDisable
l00009B95_1:
	Mem0[r0 + -165:word32] = r0
	goto l00009B95_thunk_SysCtlPeripheralDisable
	// succ:  l00009B95_thunk_SysCtlPeripheralDisable
l00009B95_thunk_SysCtlPeripheralDisable:
	call SysCtlPeripheralDisable (retsize: 0;)
	return
	// succ:  SysCtlPeripheralEnable_exit
l00009B95_thunk_SysCtlPeripheralDisable:
	call SysCtlPeripheralDisable (retsize: 0;)
	return
	// succ:  SysCtlPeripheralEnable_exit
SysCtlPeripheralEnable_exit:


// SysCtlPeripheralDisable
// Return size: 0
void SysCtlPeripheralDisable()
SysCtlPeripheralDisable_entry:
	// succ:  l00009B99
l00009B99:
	sp = fp
	branch Test(NE,Z) l00009B9D
	// succ:  l00009B99_1 l00009B9D
l00009B99_1:
	r0 = 0x0000F24B
	// succ:  l00009B9D
l00009B9D:
	branch Test(LE,NZV) l00009B9D_then
	call fn000EA751 (retsize: 0;)
	return
	// succ:  l00009BA1 l00009B9D_then
l00009B9D_then:
l00009BA1:
	branch Test(OV,V) l00009BA5
	// succ:  l00009BA1_1 l00009BA5
l00009BA1_1:
	r2 = __ror(r9, 0) - r0 - C
	NZCV = cond(r2)
	// succ:  l00009BA5
l00009BA5:
	// succ:  SysCtlPeripheralDisable_exit
SysCtlPeripheralDisable_exit:


// SysCtlPeripheralSleepEnable
// Return size: 0
void SysCtlPeripheralSleepEnable()
SysCtlPeripheralSleepEnable_entry:
	// succ:  l00009BB5
l00009BB5:
	sp = fp
	branch Test(NE,Z) l00009BB9
	// succ:  l00009BB5_1 l00009BB9
l00009BB5_1:
	r0 = 0x0000F24B
	// succ:  l00009BB9
l00009BB9:
	branch Test(UGT,ZC) l00009BBD
	// succ:  l00009BB9_1 l00009BBD
l00009BB9_1:
	call fn000EA76D (retsize: 0;)
	// succ:  l00009BBD
l00009BBD:
	branch Test(OV,V) l00009BC1
	// succ:  l00009BBD_1 l00009BC1
l00009BBD_1:
	r2 = __ror(r10, 0) - r0 - C
	NZCV = cond(r2)
	// succ:  l00009BC1
l00009BC1:
	branch Test(EQ,Z) l00009BC5
	// succ:  l00009BC1_1 l00009BC5
l00009BC1_1:
	r1 = r8 - (r0 >> 20)
	// succ:  l00009BC5
l00009BC5:
	branch Test(OV,V) l00009BC9
	// succ:  l00009BC5_1 l00009BC9
l00009BC5_1:
	r1 = r0 - (r3 >> 16)
	// succ:  l00009BC9
l00009BC9:
	branch Test(LT,N) l00009BCD
	// succ:  l00009BC9_1 l00009BCD
l00009BC9_1:
	r0 = Mem0[0x00009BD1:word32]
	pc = pc + 0x00000047
	// succ:  l00009BCD
l00009BCD:
	branch Test(NE,Z) l00009BCD_thunk_SysCtlPeripheralSleepDisable
	// succ:  l00009BCD_1 l00009BCD_thunk_SysCtlPeripheralSleepDisable
l00009BCD_1:
	Mem0[r0 + -165:word32] = r0
	goto l00009BCD_thunk_SysCtlPeripheralSleepDisable
	// succ:  l00009BCD_thunk_SysCtlPeripheralSleepDisable
l00009BCD_thunk_SysCtlPeripheralSleepDisable:
	call SysCtlPeripheralSleepDisable (retsize: 0;)
	return
	// succ:  SysCtlPeripheralSleepEnable_exit
l00009BCD_thunk_SysCtlPeripheralSleepDisable:
	call SysCtlPeripheralSleepDisable (retsize: 0;)
	return
	// succ:  SysCtlPeripheralSleepEnable_exit
SysCtlPeripheralSleepEnable_exit:


// SysCtlPeripheralSleepDisable
// Return size: 0
void SysCtlPeripheralSleepDisable()
SysCtlPeripheralSleepDisable_entry:
	// succ:  l00009BD1
l00009BD1:
	sp = fp
	branch Test(NE,Z) l00009BD5
	// succ:  l00009BD1_1 l00009BD5
l00009BD1_1:
	r0 = 0x0000F24B
	// succ:  l00009BD5
l00009BD5:
	branch Test(ULE,ZC) l00009BD5_then
	call fn000EA789 (retsize: 0;)
	return
	// succ:  l00009BD9 l00009BD5_then
l00009BD5_then:
l00009BD9:
	branch Test(OV,V) l00009BDD
	// succ:  l00009BD9_1 l00009BDD
l00009BD9_1:
	r2 = __ror(r10, 0) - r0 - C
	NZCV = cond(r2)
	// succ:  l00009BDD
l00009BDD:
	// succ:  SysCtlPeripheralSleepDisable_exit
SysCtlPeripheralSleepDisable_exit:


// SysCtlPeripheralDeepSleepEnable
// Return size: 0
void SysCtlPeripheralDeepSleepEnable()
SysCtlPeripheralDeepSleepEnable_entry:
	// succ:  l00009BED
l00009BED:
	sp = fp
	branch Test(NE,Z) l00009BF1
	// succ:  l00009BED_1 l00009BF1
l00009BED_1:
	r0 = 0x0000F24B
	// succ:  l00009BF1
l00009BF1:
	branch Test(LT,N) l00009BF5
	// succ:  l00009BF1_1 l00009BF5
l00009BF1_1:
	call fn000EA7A5 (retsize: 0;)
	// succ:  l00009BF5
l00009BF5:
	branch Test(OV,V) l00009BF9
	// succ:  l00009BF5_1 l00009BF9
l00009BF5_1:
	r2 = __ror(fp, 0) - r0 - C
	NZCV = cond(r2)
	// succ:  l00009BF9
l00009BF9:
	branch Test(EQ,Z) l00009BFD
	// succ:  l00009BF9_1 l00009BFD
l00009BF9_1:
	r1 = r8 - (r0 >> 20)
	// succ:  l00009BFD
l00009BFD:
	branch Test(OV,V) l00009C01
	// succ:  l00009BFD_1 l00009C01
l00009BFD_1:
	r1 = r0 - (r3 >> 16)
	// succ:  l00009C01
l00009C01:
	branch Test(LT,N) l00009C05
	// succ:  l00009C01_1 l00009C05
l00009C01_1:
	r0 = Mem0[0x00009C09:word32]
	pc = pc + 0x00000047
	// succ:  l00009C05
l00009C05:
	branch Test(NE,Z) l00009C05_thunk_SysCtlPeripheralDeepSleepDisable
	// succ:  l00009C05_1 l00009C05_thunk_SysCtlPeripheralDeepSleepDisable
l00009C05_1:
	Mem0[r0 + -165:word32] = r0
	goto l00009C05_thunk_SysCtlPeripheralDeepSleepDisable
	// succ:  l00009C05_thunk_SysCtlPeripheralDeepSleepDisable
l00009C05_thunk_SysCtlPeripheralDeepSleepDisable:
	call SysCtlPeripheralDeepSleepDisable (retsize: 0;)
	return
	// succ:  SysCtlPeripheralDeepSleepEnable_exit
l00009C05_thunk_SysCtlPeripheralDeepSleepDisable:
	call SysCtlPeripheralDeepSleepDisable (retsize: 0;)
	return
	// succ:  SysCtlPeripheralDeepSleepEnable_exit
SysCtlPeripheralDeepSleepEnable_exit:


// SysCtlPeripheralDeepSleepDisable
// Return size: 0
void SysCtlPeripheralDeepSleepDisable()
SysCtlPeripheralDeepSleepDisable_entry:
	// succ:  l00009C09
l00009C09:
	sp = fp
	branch Test(NE,Z) l00009C0D
	// succ:  l00009C09_1 l00009C0D
l00009C09_1:
	r0 = 0x0000F24B
	// succ:  l00009C0D
l00009C0D:
	branch Test(GT,NZ) l00009C0D_then
	call fn000EA7C1 (retsize: 0;)
	return
	// succ:  l00009C11 l00009C0D_then
l00009C0D_then:
l00009C11:
	branch Test(OV,V) l00009C15
	// succ:  l00009C11_1 l00009C15
l00009C11_1:
	r2 = __ror(fp, 0) - r0 - C
	NZCV = cond(r2)
	// succ:  l00009C15
l00009C15:
	// succ:  SysCtlPeripheralDeepSleepDisable_exit
SysCtlPeripheralDeepSleepDisable_exit:


// SysCtlPeripheralClockGating
// Return size: 0
void SysCtlPeripheralClockGating()
SysCtlPeripheralClockGating_entry:
	// succ:  l00009C25
l00009C25:
	sp = fp
	branch Test(EQ,Z) l00009C29
	// succ:  l00009C25_1 l00009C29
l00009C25_1:
	Mem0[r8:word32] = r1
	Mem0[r8 - 4:word32] = r3
	Mem0[r8 - 8:word32] = r6
	Mem0[r8 - 12:word32] = r8
	Mem0[r8 - 16:word32] = r9
	Mem0[r8 - 20:word32] = ip
	r8 = r8 - 24
	// succ:  l00009C29
l00009C29:
	branch Test(NE,Z) l00009C2D
	// succ:  l00009C29_1 l00009C2D
l00009C29_1:
	r2 = Mem0[r0:word16]
	r0 = r0 + 0x00000039
	// succ:  l00009C2D
l00009C2D:
	branch Test(OV,V) l00009C31
	// succ:  l00009C2D_1 l00009C31
l00009C2D_1:
	r1 = r0 - __ror(r3, 6)
	// succ:  l00009C31
l00009C31:
	branch Test(NE,Z) l00009C35
	// succ:  l00009C31_1 l00009C35
l00009C31_1:
	r4 = (r7 >> 6) - r0 - C
	NZCV = cond(r4)
	// succ:  l00009C35
l00009C35:
	branch Test(OV,V) l00009C39
	// succ:  l00009C35_1 l00009C39
l00009C35_1:
	r1 = r0 - __ror(r3, 6)
	// succ:  l00009C39
l00009C39:
	r0 = pc + (r7 >> 32) + C
	NZCV = cond(r0)
	branch Test(NE,Z) l00009C3D_thunk_SysCtlIntRegister
	// succ:  l00009C3D_1 l00009C3D_thunk_SysCtlIntRegister
l00009C3D_1:
	Mem0[r0:word32] = r5
	Mem0[r0 - 4:word32] = r6
	Mem0[r0 - 8:word32] = r7
	Mem0[r0 - 12:word32] = r8
	Mem0[r0 - 16:word32] = r9
	Mem0[r0 - 20:word32] = r10
	Mem0[r0 - 24:word32] = fp
	goto l00009C3D_thunk_SysCtlIntRegister
	// succ:  l00009C3D_thunk_SysCtlIntRegister
l00009C3D_thunk_SysCtlIntRegister:
	call SysCtlIntRegister (retsize: 0;)
	return
	// succ:  SysCtlPeripheralClockGating_exit
l00009C3D_thunk_SysCtlIntRegister:
	call SysCtlIntRegister (retsize: 0;)
	return
	// succ:  SysCtlPeripheralClockGating_exit
SysCtlPeripheralClockGating_exit:


// SysCtlIntRegister
// Return size: 0
void SysCtlIntRegister()
SysCtlIntRegister_entry:
	// succ:  l00009C41
l00009C41:
	sp = fp
	branch Test(ULT,C) l00009C45
	// succ:  l00009C41_1 l00009C45
l00009C41_1:
l00009C45:
	branch Test(LT,N) l00009C49
	// succ:  l00009C45_1 l00009C49
l00009C45_1:
l00009C49:
	branch Test(NE,Z) l00009C4D
	// succ:  l00009C49_1 l00009C4D
l00009C49_1:
	Mem0[r8:word32] = r2
	Mem0[r8 + 4:word32] = r3
	Mem0[r8 + 8:word32] = r4
	Mem0[r8 + 12:word32] = r5
	Mem0[r8 + 16:word32] = r6
	Mem0[r8 + 20:word32] = r7
	Mem0[r8 + 24:word32] = r8
	Mem0[r8 + 28:word32] = r10
	Mem0[r8 + 32:word32] = fp
	Mem0[r8 + 36:word32] = ip
	Mem0[r8 + 40:word32] = sp
	Mem0[r8 + 44:word32] = pc
	r8 = r8 + 48
	// succ:  l00009C4D
l00009C4D:
SysCtlIntRegister_exit:


// SysCtlIntUnregister
// Return size: 0
void SysCtlIntUnregister()
SysCtlIntUnregister_entry:
	// succ:  l00009C55
l00009C55:
	sp = fp
SysCtlIntUnregister_exit:


// SysCtlIntEnable
// Return size: 0
void SysCtlIntEnable()
SysCtlIntEnable_entry:
	// succ:  l00009C69
l00009C69:
	sp = fp
	branch Test(EQ,Z) l00009C6D
	// succ:  l00009C69_1 l00009C6D
l00009C69_1:
	Mem0[r8:word32] = r1
	Mem0[r8 - 4:word32] = r3
	Mem0[r8 - 8:word32] = r6
	Mem0[r8 - 12:word32] = r8
	Mem0[r8 - 16:word32] = r9
	Mem0[r8 - 20:word32] = ip
	r8 = r8 - 24
	// succ:  l00009C6D
l00009C6D:
	branch Test(OV,V) l00009C71
	// succ:  l00009C6D_1 l00009C71
l00009C6D_1:
	r1 = r0 - (r3 >> 32)
	// succ:  l00009C71
l00009C71:
	branch Test(LT,N) l00009C75
	// succ:  l00009C71_1 l00009C75
l00009C71_1:
	r0 = Mem0[0x00009C79:word32]
	pc = pc + 0x00000047
	// succ:  l00009C75
l00009C75:
	branch Test(NE,Z) l00009C75_thunk_SysCtlIntDisable
	// succ:  l00009C75_1 l00009C75_thunk_SysCtlIntDisable
l00009C75_1:
	r0 = r0 - 0x00000380
	goto l00009C75_thunk_SysCtlIntDisable
	// succ:  l00009C75_thunk_SysCtlIntDisable
l00009C75_thunk_SysCtlIntDisable:
	call SysCtlIntDisable (retsize: 0;)
	return
	// succ:  SysCtlIntEnable_exit
l00009C75_thunk_SysCtlIntDisable:
	call SysCtlIntDisable (retsize: 0;)
	return
	// succ:  SysCtlIntEnable_exit
SysCtlIntEnable_exit:


// SysCtlIntDisable
// Return size: 0
void SysCtlIntDisable()
SysCtlIntDisable_entry:
	// succ:  l00009C79
l00009C79:
	sp = fp
SysCtlIntDisable_exit:


// SysCtlIntClear
// Return size: 0
void SysCtlIntClear()
SysCtlIntClear_entry:
	// succ:  l00009C89
l00009C89:
	sp = fp
	branch Test(OV,V) l00009C8D
	// succ:  l00009C89_1 l00009C8D
l00009C89_1:
	r1 = r0 - (fp >> 16)
	// succ:  l00009C8D
l00009C8D:
	branch Test(LT,N) l00009C91
	// succ:  l00009C8D_1 l00009C91
l00009C8D_1:
	r0 = Mem0[pc:word32]
	r1 = Mem0[pc + 4:word32]
	r2 = Mem0[pc + 8:word32]
	r6 = Mem0[pc + 12:word32]
	pc = pc + 16
	// succ:  l00009C91
l00009C91:
	branch Test(EQ,Z) l00009C91_thunk_SysCtlIntStatus
	// succ:  l00009C91_1 l00009C91_thunk_SysCtlIntStatus
l00009C91_1:
	r0 = r0 - __ror(r0, 31)
	goto l00009C91_thunk_SysCtlIntStatus
	// succ:  l00009C91_thunk_SysCtlIntStatus
l00009C91_thunk_SysCtlIntStatus:
	call SysCtlIntStatus (retsize: 0;)
	return
	// succ:  SysCtlIntClear_exit
l00009C91_thunk_SysCtlIntStatus:
	call SysCtlIntStatus (retsize: 0;)
	return
	// succ:  SysCtlIntClear_exit
SysCtlIntClear_exit:


// SysCtlIntStatus
// Return size: 0
void SysCtlIntStatus()
SysCtlIntStatus_entry:
	// succ:  l00009C95
l00009C95:
	sp = fp
	branch Test(EQ,Z) l00009C99
	// succ:  l00009C95_1 l00009C99
l00009C95_1:
	Mem0[fp:word32] = r0
	Mem0[fp - 4:word32] = r3
	Mem0[fp - 8:word32] = r4
	Mem0[fp - 12:word32] = r5
	Mem0[fp - 16:word32] = r7
	Mem0[fp - 20:word32] = r8
	Mem0[fp - 24:word32] = r9
	// succ:  l00009C99
l00009C99:
	branch Test(NE,Z) l00009C9D
	// succ:  l00009C99_1 l00009C9D
l00009C99_1:
	r7 = r7 - 0x00000068
	// succ:  l00009C9D
l00009C9D:
	branch Test(OV,V) l00009CA1
	// succ:  l00009C9D_1 l00009CA1
l00009C9D_1:
	r1 = r8 - (fp >> 16)
	// succ:  l00009CA1
l00009CA1:
	branch Test(LT,N) l00009CA5
	// succ:  l00009CA1_1 l00009CA5
l00009CA1_1:
	r0 = pc + (r7 >> 32) + C
	NZCV = cond(r0)
	// succ:  l00009CA5
l00009CA5:
	branch Test(LT,N) l00009CA9
	// succ:  l00009CA5_1 l00009CA9
l00009CA5_1:
	Mem0[r0:word32] = r5
	Mem0[r0 - 4:word32] = r6
	Mem0[r0 - 8:word32] = r7
	Mem0[r0 - 12:word32] = r8
	Mem0[r0 - 16:word32] = r9
	Mem0[r0 - 20:word32] = r10
	Mem0[r0 - 24:word32] = fp
	// succ:  l00009CA9
l00009CA9:
	branch Test(NE,Z) l00009CA9_thunk_SysCtlLDOSet
	// succ:  l00009CA9_1 l00009CA9_thunk_SysCtlLDOSet
l00009CA9_1:
	r0_r0 = (int16) (r0 >> 16) *s (int16) (pc >> 16) + r0_r0
	goto l00009CA9_thunk_SysCtlLDOSet
	// succ:  l00009CA9_thunk_SysCtlLDOSet
l00009CA9_thunk_SysCtlLDOSet:
	call SysCtlLDOSet (retsize: 0;)
	return
	// succ:  SysCtlIntStatus_exit
l00009CA9_thunk_SysCtlLDOSet:
	call SysCtlLDOSet (retsize: 0;)
	return
	// succ:  SysCtlIntStatus_exit
SysCtlIntStatus_exit:


// SysCtlLDOSet
// Return size: 0
void SysCtlLDOSet()
SysCtlLDOSet_entry:
	// succ:  l00009CAD
l00009CAD:
	sp = fp
	branch Test(OV,V) l00009CB1
	// succ:  l00009CAD_1 l00009CB1
l00009CAD_1:
	r1 = r0 - (fp >> 16)
	// succ:  l00009CB1
l00009CB1:
	branch Test(UGE,C) l00009CB5
	// succ:  l00009CB1_1 l00009CB5
l00009CB1_1:
	r0 = Mem0[0x00009CB9:word32]
	pc = pc + 0x00000047
	// succ:  l00009CB5
l00009CB5:
	branch Test(NE,Z) l00009CB5_thunk_SysCtlLDOGet
	// succ:  l00009CB5_1 l00009CB5_thunk_SysCtlLDOGet
l00009CB5_1:
	r0_r0 = (int16) (r0 >> 16) *s (int16) (pc >> 16) + r0_r0
	goto l00009CB5_thunk_SysCtlLDOGet
	// succ:  l00009CB5_thunk_SysCtlLDOGet
l00009CB5_thunk_SysCtlLDOGet:
	call SysCtlLDOGet (retsize: 0;)
	return
	// succ:  SysCtlLDOSet_exit
l00009CB5_thunk_SysCtlLDOGet:
	call SysCtlLDOGet (retsize: 0;)
	return
	// succ:  SysCtlLDOSet_exit
SysCtlLDOSet_exit:


// SysCtlLDOGet
// Return size: 0
void SysCtlLDOGet()
SysCtlLDOGet_entry:
	// succ:  l00009CB9
l00009CB9:
	sp = fp
	branch Test(OV,V) l00009CBD
	// succ:  l00009CB9_1 l00009CBD
l00009CB9_1:
	r1 = r8 - (fp >> 16)
	// succ:  l00009CBD
l00009CBD:
	branch Test(UGE,C) l00009CC1
	// succ:  l00009CBD_1 l00009CC1
l00009CBD_1:
	r0 = Mem0[0x00009CC5:word32]
	pc = pc + 0x00000047
	// succ:  l00009CC1
l00009CC1:
	branch Test(NE,Z) l00009CC1_thunk_SysCtlLDOConfigSet
	// succ:  l00009CC1_1 l00009CC1_thunk_SysCtlLDOConfigSet
l00009CC1_1:
	r0_r0 = (int16) (r0 >> 16) *s (int16) (pc >> 16) + r0_r0
	goto l00009CC1_thunk_SysCtlLDOConfigSet
	// succ:  l00009CC1_thunk_SysCtlLDOConfigSet
l00009CC1_thunk_SysCtlLDOConfigSet:
	call SysCtlLDOConfigSet (retsize: 0;)
	return
	// succ:  SysCtlLDOGet_exit
l00009CC1_thunk_SysCtlLDOConfigSet:
	call SysCtlLDOConfigSet (retsize: 0;)
	return
	// succ:  SysCtlLDOGet_exit
SysCtlLDOGet_exit:


// SysCtlLDOConfigSet
// Return size: 0
void SysCtlLDOConfigSet()
SysCtlLDOConfigSet_entry:
	// succ:  l00009CC5
l00009CC5:
	sp = fp
	branch Test(OV,V) l00009CC9
	// succ:  l00009CC5_1 l00009CC9
l00009CC5_1:
	r1 = r0 - (fp >> 16)
	// succ:  l00009CC9
l00009CC9:
	r0 = pc + (r7 >> 32) + C
	NZCV = cond(r0)
	branch Test(NE,Z) l00009CCD_thunk_SysCtlReset
	// succ:  l00009CCD_1 l00009CCD_thunk_SysCtlReset
l00009CCD_1:
	r0_r0 = (int16) (r1 >> 16) *s (int16) (pc >> 16) + r0_r0
	goto l00009CCD_thunk_SysCtlReset
	// succ:  l00009CCD_thunk_SysCtlReset
l00009CCD_thunk_SysCtlReset:
	call SysCtlReset (retsize: 0;)
	return
	// succ:  SysCtlLDOConfigSet_exit
l00009CCD_thunk_SysCtlReset:
	call SysCtlReset (retsize: 0;)
	return
	// succ:  SysCtlLDOConfigSet_exit
SysCtlLDOConfigSet_exit:


// SysCtlReset
// Return size: 0
void SysCtlReset()
SysCtlReset_entry:
	// succ:  l00009CD1
l00009CD1:
	sp = fp
	branch Test(NE,Z) l00009CD1_then
	call fn0128A605 (retsize: 0;)
	return
	// succ:  l00009CD5 l00009CD1_then
l00009CD1_then:
l00009CD5:
	branch Test(NE,Z) l00009CD9
	// succ:  l00009CD5_1 l00009CD9
l00009CD5_1:
	r7 = r7
	__stcl(0x0E, 0x0F, Mem0[r7:void])
	Mem0[0x0E:word32] = d1
	Mem0[0x0E + 4:word32] = r7
	0x0E = 0x0E + 8
	// succ:  l00009CD9
l00009CD9:
	branch Test(NE,Z) l00009CDD
	// succ:  l00009CD9_1 l00009CDD
l00009CD9_1:
	Mem0[r0:byte] = (byte) r0
	r0 = r0 + 0x000000ED
	// succ:  l00009CDD
l00009CDD:
	branch Test(NE,Z) l00009CDD_thunk_SysCtlSleep
	// succ:  SysCtlReset_exit l00009CDD_1 l00009CDD_thunk_SysCtlSleep
l00009CDD_1:
	pc = r5 & r0 << 20
	goto l00009CDD_thunk_SysCtlSleep
	// succ:  l00009CDD_thunk_SysCtlSleep
l00009CDD_thunk_SysCtlSleep:
	call SysCtlSleep (retsize: 0;)
	return
	// succ:  SysCtlReset_exit
l00009CDD_thunk_SysCtlSleep:
	call SysCtlSleep (retsize: 0;)
	return
	// succ:  SysCtlReset_exit
SysCtlReset_exit:


// SysCtlSleep
// Return size: 0
void SysCtlSleep()
SysCtlSleep_entry:
	// succ:  l00009CE1
l00009CE1:
	sp = fp
	branch Test(EQ,Z) l00009CE1_thunk_SysCtlDeepSleep
	// succ:  l00009CE1_1 l00009CE1_thunk_SysCtlDeepSleep
l00009CE1_1:
	r0 = Mem0[r10:int16]
	r10 = r10 + r0
	goto l00009CE1_thunk_SysCtlDeepSleep
	// succ:  l00009CE1_thunk_SysCtlDeepSleep
l00009CE1_thunk_SysCtlDeepSleep:
	call SysCtlDeepSleep (retsize: 0;)
	return
	// succ:  SysCtlSleep_exit
l00009CE1_thunk_SysCtlDeepSleep:
	call SysCtlDeepSleep (retsize: 0;)
	return
	// succ:  SysCtlSleep_exit
SysCtlSleep_exit:


// SysCtlDeepSleep
// Return size: 0
void SysCtlDeepSleep()
SysCtlDeepSleep_entry:
	// succ:  l00009CE5
l00009CE5:
	sp = fp
	branch Test(ULT,C) l00009CE9
	// succ:  l00009CE5_1 l00009CE9
l00009CE5_1:
	r0 = DPB(r0, 0xC6B5, 16)
	// succ:  l00009CE9
l00009CE9:
	branch Test(NE,Z) l00009CED
	// succ:  l00009CE9_1 l00009CED
l00009CE9_1:
	r4 = Mem0[r0:byte]
	r0 = r0 + 0x00000368
	// succ:  l00009CED
l00009CED:
	branch Test(NE,Z) l00009CF1
	// succ:  l00009CED_1 l00009CF1
l00009CED_1:
	r2 = r0 - (r3 << 6)
	// succ:  l00009CF1
l00009CF1:
SysCtlDeepSleep_exit:


// SysCtlResetCauseGet
// Return size: 0
void SysCtlResetCauseGet()
SysCtlResetCauseGet_entry:
	// succ:  l00009D05
l00009D05:
	sp = fp
	branch Test(OV,V) l00009D09
	// succ:  l00009D05_1 l00009D09
l00009D05_1:
	r1 = r8 - (fp >> 16)
	// succ:  l00009D09
l00009D09:
	branch Test(LT,N) l00009D0D
	// succ:  l00009D09_1 l00009D0D
l00009D09_1:
l00009D0D:
	branch Test(NE,Z) l00009D0D_thunk_SysCtlResetCauseClear
	// succ:  l00009D0D_1 l00009D0D_thunk_SysCtlResetCauseClear
l00009D0D_1:
	r0 = r0 - 0x00000380
	goto l00009D0D_thunk_SysCtlResetCauseClear
	// succ:  l00009D0D_thunk_SysCtlResetCauseClear
l00009D0D_thunk_SysCtlResetCauseClear:
	call SysCtlResetCauseClear (retsize: 0;)
	return
	// succ:  SysCtlResetCauseGet_exit
l00009D0D_thunk_SysCtlResetCauseClear:
	call SysCtlResetCauseClear (retsize: 0;)
	return
	// succ:  SysCtlResetCauseGet_exit
SysCtlResetCauseGet_exit:


// SysCtlResetCauseClear
// Return size: 0
void SysCtlResetCauseClear()
SysCtlResetCauseClear_entry:
	// succ:  l00009D11
l00009D11:
	sp = fp
SysCtlResetCauseClear_exit:


// SysCtlBrownOutConfigSet
// Return size: 0
void SysCtlBrownOutConfigSet()
SysCtlBrownOutConfigSet_entry:
	// succ:  l00009D21
l00009D21:
	sp = fp
SysCtlBrownOutConfigSet_exit:


// SysCtlClockSet
// Return size: 0
void SysCtlClockSet()
SysCtlClockSet_entry:
	// succ:  l00009D31
l00009D31:
	sp = fp
SysCtlClockSet_exit:


// SysCtlClockGet
// Return size: 0
void SysCtlClockGet()
SysCtlClockGet_entry:
	// succ:  l00009DF1
l00009DF1:
	sp = fp
SysCtlClockGet_exit:


// SysCtlPWMClockSet
// Return size: 0
void SysCtlPWMClockSet()
SysCtlPWMClockSet_entry:
	// succ:  l00009E69
l00009E69:
	sp = fp
SysCtlPWMClockSet_exit:


// SysCtlPWMClockGet
// Return size: 0
void SysCtlPWMClockGet()
SysCtlPWMClockGet_entry:
	// succ:  l00009E7D
l00009E7D:
	sp = fp
	branch Test(NE,Z) l00009E81
	// succ:  l00009E7D_1 l00009E81
l00009E7D_1:
	r1 = r8 - (fp >> 16)
	// succ:  l00009E81
l00009E81:
	branch Test(OV,V) l00009E85
	// succ:  l00009E81_1 l00009E85
l00009E81_1:
	call Mem0[r0:int16] (retsize: 0;)
	return
	// succ:  SysCtlPWMClockGet_exit
l00009E85:
	r0 = pc + (r7 >> 32) + C
	NZCV = cond(r0)
	branch Test(EQ,Z) l00009E89_thunk_SysCtlADCSpeedSet
	// succ:  l00009E89_1 l00009E89_thunk_SysCtlADCSpeedSet
l00009E89_1:
	r0 = r0 - __ror(r0, 31)
	goto l00009E89_thunk_SysCtlADCSpeedSet
	// succ:  l00009E89_thunk_SysCtlADCSpeedSet
l00009E89_thunk_SysCtlADCSpeedSet:
	call SysCtlADCSpeedSet (retsize: 0;)
	return
	// succ:  SysCtlPWMClockGet_exit
l00009E89_thunk_SysCtlADCSpeedSet:
	call SysCtlADCSpeedSet (retsize: 0;)
	return
	// succ:  SysCtlPWMClockGet_exit
SysCtlPWMClockGet_exit:


// SysCtlADCSpeedSet
// Return size: 0
void SysCtlADCSpeedSet()
SysCtlADCSpeedSet_entry:
	// succ:  l00009E8D
l00009E8D:
	sp = fp
	branch Test(EQ,Z) l00009E8D_then
	call fn0130C965 (retsize: 0;)
	return
	// succ:  l00009E91 l00009E8D_then
l00009E8D_then:
l00009E91:
	branch Test(EQ,Z) l00009E91_then
	call fn01A12BBD (retsize: 0;)
	return
	// succ:  l00009E95 l00009E91_then
l00009E91_then:
l00009E95:
	branch Test(OV,V) l00009E99
	// succ:  l00009E95_1 l00009E99
l00009E95_1:
	r2 = (r10 >> 6) - r4 - C
	NZCV = cond(r2)
	// succ:  l00009E99
l00009E99:
	branch Test(ULT,C) l00009E9D
	// succ:  l00009E99_1 l00009E9D
l00009E99_1:
	r0 = DPB(r0, 0x3363, 16)
	// succ:  l00009E9D
l00009E9D:
	branch Test(EQ,Z) l00009EA1
	// succ:  l00009E9D_1 l00009EA1
l00009E9D_1:
	r0 = r8 - __ror(r0, 22)
	// succ:  l00009EA1
l00009EA1:
	branch Test(OV,V) l00009EA5
	// succ:  l00009EA1_1 l00009EA5
l00009EA1_1:
	r2 = Mem0[r4:word16]
	r4 = r4 + 0x0000003C
	// succ:  l00009EA5
l00009EA5:
	branch Test(NE,Z) l00009EA9
	// succ:  l00009EA5_1 l00009EA9
l00009EA5_1:
	call fn010CAC39 (retsize: 0;)
	// succ:  l00009EA9
l00009EA9:
	// succ:  SysCtlADCSpeedSet_exit SysCtlADCSpeedSet_exit
SysCtlADCSpeedSet_exit:


// SysCtlADCSpeedGet
// Return size: 0
void SysCtlADCSpeedGet()
SysCtlADCSpeedGet_entry:
	// succ:  l00009EC5
l00009EC5:
	sp = fp
	branch Test(NE,Z) l00009EC9
	// succ:  l00009EC5_1 l00009EC9
l00009EC5_1:
	r1 = r8 - (fp >> 16)
	// succ:  l00009EC9
l00009EC9:
SysCtlADCSpeedGet_exit:


// SysCtlIOSCVerificationSet
// Return size: 0
void SysCtlIOSCVerificationSet()
SysCtlIOSCVerificationSet_entry:
	// succ:  l00009ED5
l00009ED5:
	sp = fp
	branch Test(EQ,Z) l00009ED9
	// succ:  l00009ED5_1 l00009ED9
l00009ED5_1:
	Mem0[r8:word32] = r1
	Mem0[r8 - 4:word32] = r3
	Mem0[r8 - 8:word32] = r6
	Mem0[r8 - 12:word32] = r8
	Mem0[r8 - 16:word32] = r9
	Mem0[r8 - 20:word32] = ip
	r8 = r8 - 24
	// succ:  l00009ED9
l00009ED9:
	branch Test(NE,Z) l00009EDD
	// succ:  l00009ED9_1 l00009EDD
l00009ED9_1:
	r0 = Mem0[r0:word32]
	r3 = Mem0[r0 + 4:word32]
	r4 = Mem0[r0 + 8:word32]
	r5 = Mem0[r0 + 12:word32]
	r7 = Mem0[r0 + 16:word32]
	r8 = Mem0[r0 + 20:word32]
	r9 = Mem0[r0 + 24:word32]
	sp = Mem0[r0 + 28:word32]
	r0 = r0 + 32
	// succ:  l00009EDD
l00009EDD:
	branch Test(OV,V) l00009EE1
	// succ:  l00009EDD_1 l00009EE1
l00009EDD_1:
	r1 = r0 - (r3 << 6)
	// succ:  l00009EE1
l00009EE1:
	branch Test(NE,Z) l00009EE5
	// succ:  l00009EE1_1 l00009EE5
l00009EE1_1:
	r0 = Mem0[r0:word32]
	r1 = Mem0[r0 + 4:word32]
	r2 = Mem0[r0 + 8:word32]
	r6 = Mem0[r0 + 12:word32]
	r8 = Mem0[r0 + 16:word32]
	r9 = Mem0[r0 + 20:word32]
	lr = Mem0[r0 + 24:word32]
	r0 = r0 + 28
	// succ:  l00009EE5
l00009EE5:
	branch Test(OV,V) l00009EE9
	// succ:  l00009EE5_1 l00009EE9
l00009EE5_1:
	r1 = r0 - (r3 << 6)
	// succ:  l00009EE9
l00009EE9:
	r0 = pc + (r7 >> 32) + C
	NZCV = cond(r0)
	branch Test(NE,Z) l00009EED_thunk_SysCtlMOSCVerificationSet
	// succ:  l00009EED_1 l00009EED_thunk_SysCtlMOSCVerificationSet
l00009EED_1:
	Mem0[r0 + -4064:byte] = (byte) r0
	goto l00009EED_thunk_SysCtlMOSCVerificationSet
	// succ:  l00009EED_thunk_SysCtlMOSCVerificationSet
l00009EED_thunk_SysCtlMOSCVerificationSet:
	call SysCtlMOSCVerificationSet (retsize: 0;)
	return
	// succ:  SysCtlIOSCVerificationSet_exit
l00009EED_thunk_SysCtlMOSCVerificationSet:
	call SysCtlMOSCVerificationSet (retsize: 0;)
	return
	// succ:  SysCtlIOSCVerificationSet_exit
SysCtlIOSCVerificationSet_exit:


// SysCtlMOSCVerificationSet
// Return size: 0
void SysCtlMOSCVerificationSet()
SysCtlMOSCVerificationSet_entry:
	// succ:  l00009EF1
l00009EF1:
	sp = fp
	branch Test(EQ,Z) l00009EF5
	// succ:  l00009EF1_1 l00009EF5
l00009EF1_1:
	Mem0[r8:word32] = r1
	Mem0[r8 - 4:word32] = r3
	Mem0[r8 - 8:word32] = r6
	Mem0[r8 - 12:word32] = r8
	Mem0[r8 - 16:word32] = r9
	Mem0[r8 - 20:word32] = ip
	r8 = r8 - 24
	// succ:  l00009EF5
l00009EF5:
	branch Test(NE,Z) l00009EF9
	// succ:  l00009EF5_1 l00009EF9
l00009EF5_1:
	r2 = Mem0[r0:byte]
	r0 = r0 + 0x000003B9
	// succ:  l00009EF9
l00009EF9:
	branch Test(OV,V) l00009EFD
	// succ:  l00009EF9_1 l00009EFD
l00009EF9_1:
	r1 = r0 - (r3 << 6)
	// succ:  l00009EFD
l00009EFD:
	branch Test(NE,Z) l00009F01
	// succ:  l00009EFD_1 l00009F01
l00009EFD_1:
	r4 = Mem0[r0:byte]
	r0 = r0 + 0x00000347
	// succ:  l00009F01
l00009F01:
	branch Test(OV,V) l00009F05
	// succ:  l00009F01_1 l00009F05
l00009F01_1:
	r1 = r0 - (r3 << 6)
	// succ:  l00009F05
l00009F05:
	r0 = pc + (r7 >> 32) + C
	NZCV = cond(r0)
	branch Test(NE,Z) l00009F09_thunk_SysCtlPLLVerificationSet
	// succ:  l00009F09_1 l00009F09_thunk_SysCtlPLLVerificationSet
l00009F09_1:
	Mem0[r0 + -4064:byte] = (byte) r0
	goto l00009F09_thunk_SysCtlPLLVerificationSet
	// succ:  l00009F09_thunk_SysCtlPLLVerificationSet
l00009F09_thunk_SysCtlPLLVerificationSet:
	call SysCtlPLLVerificationSet (retsize: 0;)
	return
	// succ:  SysCtlMOSCVerificationSet_exit
l00009F09_thunk_SysCtlPLLVerificationSet:
	call SysCtlPLLVerificationSet (retsize: 0;)
	return
	// succ:  SysCtlMOSCVerificationSet_exit
SysCtlMOSCVerificationSet_exit:


// SysCtlPLLVerificationSet
// Return size: 0
void SysCtlPLLVerificationSet()
SysCtlPLLVerificationSet_entry:
	// succ:  l00009F0D
l00009F0D:
	sp = fp
	branch Test(EQ,Z) l00009F11
	// succ:  l00009F0D_1 l00009F11
l00009F0D_1:
	Mem0[r8:word32] = r1
	Mem0[r8 - 4:word32] = r3
	Mem0[r8 - 8:word32] = r6
	Mem0[r8 - 12:word32] = r8
	Mem0[r8 - 16:word32] = r9
	Mem0[r8 - 20:word32] = ip
	r8 = r8 - 24
	// succ:  l00009F11
l00009F11:
	branch Test(ULE,ZC) l00009F15
	// succ:  l00009F11_1 l00009F15
l00009F11_1:
	r2 = Mem0[r4:word16]
	r4 = r4 + 0x00000039
	// succ:  l00009F15
l00009F15:
	branch Test(OV,V) l00009F19
	// succ:  l00009F15_1 l00009F19
l00009F15_1:
	r1 = r0 - __ror(r3, 6)
	// succ:  l00009F19
l00009F19:
	branch Test(ULE,ZC) l00009F1D
	// succ:  l00009F19_1 l00009F1D
l00009F19_1:
	r4 = (r7 >> 6) - r4 - C
	NZCV = cond(r4)
	// succ:  l00009F1D
l00009F1D:
	branch Test(OV,V) l00009F21
	// succ:  l00009F1D_1 l00009F21
l00009F1D_1:
	r1 = r0 - __ror(r3, 6)
	// succ:  l00009F21
l00009F21:
	r0 = pc + (r7 >> 32) + C
	NZCV = cond(r0)
	branch Test(NE,Z) l00009F25_thunk_SysCtlClkVerificationClear
	// succ:  l00009F25_1 l00009F25_thunk_SysCtlClkVerificationClear
l00009F25_1:
	r0_r0 = (int16) (r0 >> 16) *s (int16) (pc >> 16) + r0_r0
	goto l00009F25_thunk_SysCtlClkVerificationClear
	// succ:  l00009F25_thunk_SysCtlClkVerificationClear
l00009F25_thunk_SysCtlClkVerificationClear:
	call SysCtlClkVerificationClear (retsize: 0;)
	return
	// succ:  SysCtlPLLVerificationSet_exit
l00009F25_thunk_SysCtlClkVerificationClear:
	call SysCtlClkVerificationClear (retsize: 0;)
	return
	// succ:  SysCtlPLLVerificationSet_exit
SysCtlPLLVerificationSet_exit:


// SysCtlClkVerificationClear
// Return size: 0
void SysCtlClkVerificationClear()
SysCtlClkVerificationClear_entry:
	// succ:  l00009F29
l00009F29:
	sp = fp
SysCtlClkVerificationClear_exit:


// UARTParityModeSet
// Return size: 0
void UARTParityModeSet()
UARTParityModeSet_entry:
	// succ:  l00009F39
l00009F39:
	sp = fp
	branch Test(ULE,ZC) l00009F3D
	// succ:  l00009F39_1 l00009F3D
l00009F39_1:
	r2 = Mem0[r0:byte]
	r0 = r0 + __ror(r10, 6)
	// succ:  l00009F3D
l00009F3D:
	branch Test(LE,NZV) l00009F41
	// succ:  l00009F3D_1 l00009F41
l00009F3D_1:
	r1 = __mrs()
	// succ:  l00009F41
l00009F41:
	branch Test(LE,NZV) l00009F41_thunk_UARTParityModeGet
	// succ:  l00009F41_1 l00009F41_thunk_UARTParityModeGet
l00009F41_1:
	r7 = r7 - __ror(r2, 0)
	goto l00009F41_thunk_UARTParityModeGet
	// succ:  l00009F41_thunk_UARTParityModeGet
l00009F41_thunk_UARTParityModeGet:
	call UARTParityModeGet (retsize: 0;)
	return
	// succ:  UARTParityModeSet_exit
l00009F41_thunk_UARTParityModeGet:
	call UARTParityModeGet (retsize: 0;)
	return
	// succ:  UARTParityModeSet_exit
UARTParityModeSet_exit:


// UARTParityModeGet
// Return size: 0
void UARTParityModeGet()
UARTParityModeGet_entry:
	// succ:  l00009F45
l00009F45:
	sp = fp
	branch Test(ULE,ZC) l00009F49
	// succ:  l00009F45_1 l00009F49
l00009F45_1:
	r0 = Mem0[r0:byte]
	r0 = r0 + __ror(r10, 0)
	// succ:  l00009F49
l00009F49:
UARTParityModeGet_exit:


// UARTConfigSet
// Return size: 0
void UARTConfigSet()
UARTConfigSet_entry:
	// succ:  l00009F4D
l00009F4D:
	sp = fp
UARTConfigSet_exit:


// UARTConfigGet
// Return size: 0
void UARTConfigGet()
UARTConfigGet_entry:
	// succ:  l00009FA9
l00009FA9:
	sp = fp
	branch Test(GT,NZV) l00009FAD
	// succ:  l00009FA9_1 l00009FAD
l00009FA9_1:
	pc = r1 - __ror(r9, 1)
	// succ:  l00009FAD
l00009FAD:
	branch Test(NE,Z) l00009FB1
	// succ:  l00009FAD_1 l00009FB1
l00009FAD_1:
	Mem0[r0:word32] = r2
	r0 = r0 + 0x000004F8
	// succ:  l00009FB1
l00009FB1:
	branch Test(EQ,Z) l00009FB5
	// succ:  l00009FB1_1 l00009FB5
l00009FB1_1:
	Mem0[r6:byte] = (byte) r0
	r6 = r6 - (r6 >> 30)
	// succ:  l00009FB5
l00009FB5:
UARTConfigGet_exit:


// UARTEnable
// Return size: 0
void UARTEnable()
UARTEnable_entry:
	// succ:  l00009FD5
l00009FD5:
	sp = fp
	branch Test(EQ,Z) l00009FD9
	// succ:  l00009FD5_1 l00009FD9
l00009FD5_1:
	r4 = __ror(r10, 6) - r0 - C
	NZCV = cond(r4)
	// succ:  l00009FD9
l00009FD9:
UARTEnable_exit:


// UARTDisable
// Return size: 0
void UARTDisable()
UARTDisable_entry:
	// succ:  l00009FED
l00009FED:
	sp = fp
	branch Test(EQ,Z) l00009FF1
	// succ:  l00009FED_1 l00009FF1
l00009FED_1:
	r1 = 0x000028F1
	// succ:  l00009FF1
l00009FF1:
UARTDisable_exit:


// UARTCharsAvail
// Return size: 0
void UARTCharsAvail()
UARTCharsAvail_entry:
	// succ:  l0000A00D
l0000A00D:
	sp = fp
	branch Test(EQ,Z) l0000A011
	// succ:  l0000A00D_1 l0000A011
l0000A00D_1:
	r8 = __ror(r9, 0) - r0 - C
	NZCV = cond(r8)
	// succ:  l0000A011
l0000A011:
	branch Test(NE,Z) l0000A015
	// succ:  l0000A011_1 l0000A015
l0000A011_1:
	ip = r0 - r3 - C
	NZCV = cond(ip)
	// succ:  l0000A015
l0000A015:
	branch Test(ULE,ZC) l0000A019
	// succ:  l0000A015_1 l0000A015_thunk_UARTSpaceAvail
l0000A015_1:
	r7 = r7 - (r0 << r0)
	// succ:  l0000A015_thunk_UARTSpaceAvail
l0000A015_thunk_UARTSpaceAvail:
	call UARTSpaceAvail (retsize: 0;)
	return
	// succ:  UARTCharsAvail_exit
l0000A015_thunk_UARTSpaceAvail:
	call UARTSpaceAvail (retsize: 0;)
	return
	// succ:  UARTCharsAvail_exit
UARTCharsAvail_exit:


// UARTSpaceAvail
// Return size: 0
void UARTSpaceAvail()
UARTSpaceAvail_entry:
	// succ:  l0000A019
l0000A019:
	sp = fp
	branch Test(ULT,C) l0000A01D
	// succ:  l0000A019_1 l0000A01D
l0000A019_1:
	r8 = __ror(r9, 0) - r0 - C
	NZCV = cond(r8)
	// succ:  l0000A01D
l0000A01D:
	branch Test(GT,NZ) l0000A021
	// succ:  l0000A01D_1 l0000A021
l0000A01D_1:
	ip = r0 - r3 - C
	NZCV = cond(ip)
	// succ:  l0000A021
l0000A021:
	branch Test(ULE,ZC) l0000A025
	// succ:  l0000A021_1 l0000A021_thunk_UARTCharNonBlockingGet
l0000A021_1:
	r7 = DPB(r7, 0x7010, 16)
	// succ:  l0000A021_thunk_UARTCharNonBlockingGet
l0000A021_thunk_UARTCharNonBlockingGet:
	call UARTCharNonBlockingGet (retsize: 0;)
	return
	// succ:  UARTSpaceAvail_exit
l0000A021_thunk_UARTCharNonBlockingGet:
	call UARTCharNonBlockingGet (retsize: 0;)
	return
	// succ:  UARTSpaceAvail_exit
UARTSpaceAvail_exit:


// UARTCharNonBlockingGet
// Return size: 0
void UARTCharNonBlockingGet()
UARTCharNonBlockingGet_entry:
	// succ:  l0000A025
l0000A025:
	sp = fp
	branch Test(LT,N) l0000A029
	// succ:  l0000A025_1 l0000A029
l0000A025_1:
	Mem0[r6:word32] = sp
	r6 = r6 - 0x00000B69
	// succ:  l0000A029
l0000A029:
	branch Test(GT,NZ) l0000A02D
	// succ:  l0000A029_1 l0000A02D
l0000A029_1:
	// succ:  l0000A02D
l0000A02D:
	branch Test(OV,V) l0000A031
	// succ:  l0000A02D_1 l0000A031
l0000A02D_1:
	call Mem0[r0:int16] (retsize: 0;)
	return
	// succ:  UARTCharNonBlockingGet_exit
l0000A031:
	branch Test(NE,Z) l0000A035
	// succ:  l0000A031_1 l0000A031_thunk_UARTCharGet
l0000A031_1:
	r0 = pc + (r7 >> 32) + C
	NZCV = cond(r0)
	// succ:  l0000A031_thunk_UARTCharGet
l0000A031_thunk_UARTCharGet:
	call UARTCharGet (retsize: 0;)
	return
	// succ:  UARTCharNonBlockingGet_exit
l0000A031_thunk_UARTCharGet:
	call UARTCharGet (retsize: 0;)
	return
	// succ:  UARTCharNonBlockingGet_exit
UARTCharNonBlockingGet_exit:


// UARTCharGet
// Return size: 0
void UARTCharGet()
UARTCharGet_entry:
	// succ:  l0000A035
l0000A035:
	sp = fp
	branch Test(EQ,Z) l0000A039
	// succ:  l0000A035_1 l0000A039
l0000A035_1:
	r1 = 0x000028F1
	// succ:  l0000A039
l0000A039:
UARTCharGet_exit:


// UARTCharNonBlockingPut
// Return size: 0
void UARTCharNonBlockingPut()
UARTCharNonBlockingPut_entry:
	// succ:  l0000A045
l0000A045:
	sp = fp
	branch Test(GT,NZ) l0000A045_then
	call fn001B0DF1 (retsize: 0;)
	return
	// succ:  l0000A049 l0000A045_then
l0000A045_then:
l0000A049:
	branch Test(NE,Z) l0000A04D
	// succ:  l0000A049_1 l0000A04D
l0000A049_1:
	r0 = r0 + -31
	Mem0[r0:word16] = (uint16) r0
	// succ:  l0000A04D
l0000A04D:
	branch Test(OV,V) l0000A051
	// succ:  l0000A04D_1 l0000A051
l0000A04D_1:
	r0 = r0 ^ r0 >>u 32
	// succ:  l0000A051
l0000A051:
	branch Test(NE,Z) l0000A051_thunk_UARTCharPut
	// succ:  UARTCharNonBlockingPut_exit l0000A051_1 l0000A051_thunk_UARTCharPut
l0000A051_1:
	r0 = pc + (r7 >> 32) + C
	NZCV = cond(r0)
	goto l0000A051_thunk_UARTCharPut
	// succ:  l0000A051_thunk_UARTCharPut
l0000A051_thunk_UARTCharPut:
	call UARTCharPut (retsize: 0;)
	return
	// succ:  UARTCharNonBlockingPut_exit
l0000A051_thunk_UARTCharPut:
	call UARTCharPut (retsize: 0;)
	return
	// succ:  UARTCharNonBlockingPut_exit
UARTCharNonBlockingPut_exit:


// UARTCharPut
// Return size: 0
void UARTCharPut()
UARTCharPut_entry:
	// succ:  l0000A055
l0000A055:
	sp = fp
	branch Test(EQ,Z) l0000A059
	// succ:  l0000A055_1 l0000A059
l0000A055_1:
	r1 = 0x000028F1
	// succ:  l0000A059
l0000A059:
UARTCharPut_exit:


// UARTBreakCtl
// Return size: 0
void UARTBreakCtl()
UARTBreakCtl_entry:
	// succ:  l0000A065
l0000A065:
	sp = fp
UARTBreakCtl_exit:


// UARTIntRegister
// Return size: 0
void UARTIntRegister()
UARTIntRegister_entry:
	// succ:  l0000A079
l0000A079:
	sp = fp
	branch Test(LT,NV) l0000A07D
	// succ:  l0000A079_1 l0000A07D
l0000A079_1:
	Mem0[ip:word16] = (uint16) r0
	ip = ip + 0xFFFFFF9B
	// succ:  l0000A07D
l0000A07D:
	branch Test(EQ,Z) l0000A081
	// succ:  l0000A07D_1 l0000A081
l0000A07D_1:
	r0 = Mem0[0x0000ACC7:word32]
	// succ:  l0000A081
l0000A081:
	branch Test(ULT,C) l0000A085
	// succ:  l0000A081_1 l0000A085
l0000A081_1:
	r1 = r4 ^ r4 >>u 12
	// succ:  l0000A085
l0000A085:
	branch Test(UGE,C) l0000A089
	// succ:  l0000A085_1 l0000A089
l0000A085_1:
l0000A089:
	branch Test(GE,NZV) l0000A08D
	// succ:  l0000A089_1 l0000A08D
l0000A089_1:
	__stcl(0x00, 0x02, Mem0[r6 + -1000:void])
	Mem0[0x00:word32] = cpsr
	Mem0[0x00 + 4:word32] = r6
	// succ:  l0000A08D
l0000A08D:
UARTIntRegister_exit:


// UARTIntUnregister
// Return size: 0
void UARTIntUnregister()
UARTIntUnregister_entry:
	// succ:  l0000A099
l0000A099:
	sp = fp
	branch Test(LT,NV) l0000A09D
	// succ:  l0000A099_1 l0000A09D
l0000A099_1:
	Mem0[ip:word16] = (uint16) r0
	ip = ip + 0xFFFFFF9B
	// succ:  l0000A09D
l0000A09D:
	branch Test(EQ,Z) l0000A0A1
	// succ:  l0000A09D_1 l0000A0A1
l0000A09D_1:
	r0 = Mem0[0x0000ACE7:word32]
	// succ:  l0000A0A1
l0000A0A1:
	branch Test(ULT,C) l0000A0A5
	// succ:  l0000A0A1_1 l0000A0A5
l0000A0A1_1:
	r1 = r4 ^ r4 >>u 12
	// succ:  l0000A0A5
l0000A0A5:
	branch Test(LE,NZV) l0000A0A9
	// succ:  l0000A0A5_1 l0000A0A9
l0000A0A5_1:
	r7 = r7
	call Mem0[r7:byte] (retsize: 0;)
	return
	// succ:  UARTIntUnregister_exit
l0000A0A9:
	branch Test(GE,NZV) l0000A0AD
	// succ:  l0000A0A9_1 l0000A0AD
l0000A0A9_1:
	__stcl(0x00, 0x02, Mem0[r6 + -1000:void])
	Mem0[0x00:word32] = cpsr
	Mem0[0x00 + 4:word32] = r6
	// succ:  l0000A0AD
l0000A0AD:
UARTIntUnregister_exit:


// UARTIntEnable
// Return size: 0
void UARTIntEnable()
UARTIntEnable_entry:
	// succ:  l0000A0B9
l0000A0B9:
	sp = fp
UARTIntEnable_exit:


// UARTIntDisable
// Return size: 0
void UARTIntDisable()
UARTIntDisable_entry:
	// succ:  l0000A0C1
l0000A0C1:
	sp = fp
UARTIntDisable_exit:


// UARTIntStatus
// Return size: 0
void UARTIntStatus()
UARTIntStatus_entry:
	// succ:  l0000A0CD
l0000A0CD:
	sp = fp
	branch Test(OV,V) l0000A0D1
	// succ:  l0000A0CD_1 l0000A0D1
l0000A0CD_1:
	Mem0[fp:word16] = (uint16) ip
	fp = fp + 0x00000009
	// succ:  l0000A0D1
l0000A0D1:
	branch Test(OV,V) l0000A0D5
	// succ:  l0000A0D1_1 l0000A0D5
l0000A0D1_1:
	r0 = ip - (r7 >> 32)
	// succ:  l0000A0D5
l0000A0D5:
UARTIntStatus_exit:


// UARTIntClear
// Return size: 0
void UARTIntClear()
UARTIntClear_entry:
	// succ:  l0000A0D9
l0000A0D9:
	sp = fp
	r7 = r7 - 0x00000064
	// succ:  l0000A0D9_thunk_CPUcpsie
l0000A0D9_thunk_CPUcpsie:
	call CPUcpsie (retsize: 0;)
	return
	// succ:  UARTIntClear_exit
UARTIntClear_exit:


// CPUcpsie
// Return size: 0
void CPUcpsie()
CPUcpsie_entry:
	// succ:  l0000A0DD
l0000A0DD:
	sp = fp
	branch Test(OV,V) l0000A0E1
	// succ:  l0000A0DD_1 l0000A0E1
l0000A0DD_1:
	Mem0[r7:word16] = (uint16) r7
	r7 = r7 + 0xFFFFFFFA
	// succ:  l0000A0E1
l0000A0E1:
	branch Test(OV,V) l0000A0E1_thunk_CPUcpsid
	// succ:  l0000A0E1_1 l0000A0E1_thunk_CPUcpsid
l0000A0E1_1:
	r0 = pc + 0x00000047 + C
	NZCV = cond(r0)
	goto l0000A0E1_thunk_CPUcpsid
	// succ:  l0000A0E1_thunk_CPUcpsid
l0000A0E1_thunk_CPUcpsid:
	call CPUcpsid (retsize: 0;)
	return
	// succ:  CPUcpsie_exit
l0000A0E1_thunk_CPUcpsid:
	call CPUcpsid (retsize: 0;)
	return
	// succ:  CPUcpsie_exit
CPUcpsie_exit:


// CPUcpsid
// Return size: 0
void CPUcpsid()
CPUcpsid_entry:
	// succ:  l0000A0E5
l0000A0E5:
	sp = fp
	branch Test(OV,V) l0000A0E9
	// succ:  l0000A0E5_1 l0000A0E9
l0000A0E5_1:
	Mem0[r7:word16] = (uint16) r7
	r7 = r7 + 0xFFFFFFFA
	// succ:  l0000A0E9
l0000A0E9:
	branch Test(UGE,C) l0000A0E9_thunk_CPUwfi
	// succ:  l0000A0E9_1 l0000A0E9_thunk_CPUwfi
l0000A0E9_1:
	r0 = pc + (r7 >> 32) + C
	NZCV = cond(r0)
	goto l0000A0E9_thunk_CPUwfi
	// succ:  l0000A0E9_thunk_CPUwfi
l0000A0E9_thunk_CPUwfi:
	call CPUwfi (retsize: 0;)
	return
	// succ:  CPUcpsid_exit
l0000A0E9_thunk_CPUwfi:
	call CPUwfi (retsize: 0;)
	return
	// succ:  CPUcpsid_exit
CPUcpsid_exit:


// CPUwfi
// Return size: 0
void CPUwfi()
CPUwfi_entry:
	// succ:  l0000A0ED
l0000A0ED:
	sp = fp
	branch Test(OV,V) l0000A0F1
	// succ:  l0000A0ED_1 l0000A0F1
l0000A0ED_1:
	Mem0[r7:word16] = (uint16) r7
	r7 = r7 + 0xFFFFFFF1
	// succ:  l0000A0F1
l0000A0F1:
	branch Test(UGE,C) l0000A0F1_thunk_I2CMasterInit
	// succ:  l0000A0F1_1 l0000A0F1_thunk_I2CMasterInit
l0000A0F1_1:
	r0 = Mem0[pc:word32]
	r1 = Mem0[pc + 4:word32]
	r2 = Mem0[pc + 8:word32]
	r6 = Mem0[pc + 12:word32]
	pc = pc + 16
	goto l0000A0F1_thunk_I2CMasterInit
	// succ:  l0000A0F1_thunk_I2CMasterInit
l0000A0F1_thunk_I2CMasterInit:
	call I2CMasterInit (retsize: 0;)
	return
	// succ:  CPUwfi_exit
l0000A0F1_thunk_I2CMasterInit:
	call I2CMasterInit (retsize: 0;)
	return
	// succ:  CPUwfi_exit
CPUwfi_exit:


// I2CMasterInit
// Return size: 0
void I2CMasterInit()
I2CMasterInit_entry:
	// succ:  l0000A0F5
l0000A0F5:
	sp = fp
	branch Test(NE,Z) l0000A0F9
	// succ:  l0000A0F5_1 l0000A0F9
l0000A0F5_1:
	r0 = r6 - 0x00002D40
	// succ:  l0000A0F9
l0000A0F9:
	branch Test(GT,NZ) l0000A0FD
	// succ:  l0000A0F9_1 l0000A0FD
l0000A0F9_1:
	r0 = r6 - 0x6A000000
	// succ:  l0000A0FD
l0000A0FD:
	branch Test(NE,Z) l0000A101
	// succ:  l0000A0FD_1 l0000A101
l0000A0FD_1:
	r1 = r2 & 0x000000F0
	// succ:  l0000A101
l0000A101:
	branch Test(OV,V) l0000A105
	// succ:  l0000A101_1 l0000A105
l0000A101_1:
	r7 = r7 + 3938
	call Mem0[r7:byte] (retsize: 0;)
	return
	// succ:  I2CMasterInit_exit
l0000A105:
I2CMasterInit_exit:


// I2CSlaveInit
// Return size: 0
void I2CSlaveInit()
I2CSlaveInit_entry:
	// succ:  l0000A129
l0000A129:
	sp = fp
I2CSlaveInit_exit:


// I2CMasterEnable
// Return size: 0
void I2CMasterEnable()
I2CMasterEnable_entry:
	// succ:  l0000A141
l0000A141:
	sp = fp
	branch Test(EQ,Z) l0000A145
	// succ:  l0000A141_1 l0000A145
l0000A141_1:
	r4 = __ror(r10, 6) - r0 - C
	NZCV = cond(r4)
	// succ:  l0000A145
l0000A145:
	branch Test(OV,V) l0000A149
	// succ:  l0000A145_1 l0000A149
l0000A145_1:
	r0 = r2 - (r3 << 6)
	// succ:  l0000A149
l0000A149:
I2CMasterEnable_exit:


// I2CSlaveEnable
// Return size: 0
void I2CSlaveEnable()
I2CSlaveEnable_entry:
	// succ:  l0000A14D
l0000A14D:
	sp = fp
I2CSlaveEnable_exit:


// I2CMasterDisable
// Return size: 0
void I2CMasterDisable()
I2CMasterDisable_entry:
	// succ:  l0000A161
l0000A161:
	sp = fp
	branch Test(EQ,Z) l0000A165
	// succ:  l0000A161_1 l0000A165
l0000A161_1:
	r2 = __ror(r10, 6) - r0 - C
	NZCV = cond(r2)
	// succ:  l0000A165
l0000A165:
	branch Test(OV,V) l0000A169
	// succ:  l0000A165_1 l0000A169
l0000A165_1:
	r0 = r2 - (r3 << 6)
	// succ:  l0000A169
l0000A169:
	branch Test(NE,Z) l0000A169_thunk_I2CSlaveDisable
	// succ:  l0000A169_1 l0000A169_thunk_I2CSlaveDisable
l0000A169_1:
	r0 = pc + (r7 >> 32) + C
	NZCV = cond(r0)
	goto l0000A169_thunk_I2CSlaveDisable
	// succ:  l0000A169_thunk_I2CSlaveDisable
l0000A169_thunk_I2CSlaveDisable:
	call I2CSlaveDisable (retsize: 0;)
	return
	// succ:  I2CMasterDisable_exit
l0000A169_thunk_I2CSlaveDisable:
	call I2CSlaveDisable (retsize: 0;)
	return
	// succ:  I2CMasterDisable_exit
I2CMasterDisable_exit:


// I2CSlaveDisable
// Return size: 0
void I2CSlaveDisable()
I2CSlaveDisable_entry:
	// succ:  l0000A16D
l0000A16D:
	sp = fp
I2CSlaveDisable_exit:


// I2CIntRegister
// Return size: 0
void I2CIntRegister()
I2CIntRegister_entry:
	// succ:  l0000A181
l0000A181:
	sp = fp
I2CIntRegister_exit:


// I2CIntUnregister
// Return size: 0
void I2CIntUnregister()
I2CIntUnregister_entry:
	// succ:  l0000A195
l0000A195:
	sp = fp
I2CIntUnregister_exit:


// I2CMasterIntEnable
// Return size: 0
void I2CMasterIntEnable()
I2CMasterIntEnable_entry:
	// succ:  l0000A1A9
l0000A1A9:
	sp = fp
	branch Test(OV,V) l0000A1AD
	// succ:  l0000A1A9_1 l0000A1AD
l0000A1A9_1:
	r0 = r1 - (r3 >>u 6)
	// succ:  l0000A1AD
l0000A1AD:
I2CMasterIntEnable_exit:


// I2CSlaveIntEnable
// Return size: 0
void I2CSlaveIntEnable()
I2CSlaveIntEnable_entry:
	// succ:  l0000A1B1
l0000A1B1:
	sp = fp
	branch Test(OV,V) l0000A1B5
	// succ:  l0000A1B1_1 l0000A1B5
l0000A1B1_1:
	ip = r0 - (r3 >>u 6)
	// succ:  l0000A1B5
l0000A1B5:
	branch Test(NE,Z) l0000A1B5_thunk_I2CMasterIntDisable
	// succ:  l0000A1B5_1 l0000A1B5_thunk_I2CMasterIntDisable
l0000A1B5_1:
	r0 = pc + (r7 >> 32) + C
	NZCV = cond(r0)
	goto l0000A1B5_thunk_I2CMasterIntDisable
	// succ:  l0000A1B5_thunk_I2CMasterIntDisable
l0000A1B5_thunk_I2CMasterIntDisable:
	call I2CMasterIntDisable (retsize: 0;)
	return
	// succ:  I2CSlaveIntEnable_exit
l0000A1B5_thunk_I2CMasterIntDisable:
	call I2CMasterIntDisable (retsize: 0;)
	return
	// succ:  I2CSlaveIntEnable_exit
I2CSlaveIntEnable_exit:


// I2CMasterIntDisable
// Return size: 0
void I2CMasterIntDisable()
I2CMasterIntDisable_entry:
	// succ:  l0000A1B9
l0000A1B9:
	sp = fp
	branch Test(OV,V) l0000A1BD
	// succ:  l0000A1B9_1 l0000A1BD
l0000A1B9_1:
	r0 = r1 - (r3 >>u 6)
	// succ:  l0000A1BD
l0000A1BD:
	branch Test(NE,Z) l0000A1BD_thunk_I2CSlaveIntDisable
	// succ:  l0000A1BD_1 l0000A1BD_thunk_I2CSlaveIntDisable
l0000A1BD_1:
	r0 = pc + (r7 >> 32) + C
	NZCV = cond(r0)
	goto l0000A1BD_thunk_I2CSlaveIntDisable
	// succ:  l0000A1BD_thunk_I2CSlaveIntDisable
l0000A1BD_thunk_I2CSlaveIntDisable:
	call I2CSlaveIntDisable (retsize: 0;)
	return
	// succ:  I2CMasterIntDisable_exit
l0000A1BD_thunk_I2CSlaveIntDisable:
	call I2CSlaveIntDisable (retsize: 0;)
	return
	// succ:  I2CMasterIntDisable_exit
I2CMasterIntDisable_exit:


// I2CSlaveIntDisable
// Return size: 0
void I2CSlaveIntDisable()
I2CSlaveIntDisable_entry:
	// succ:  l0000A1C1
l0000A1C1:
	sp = fp
	branch Test(OV,V) l0000A1C5
	// succ:  l0000A1C1_1 l0000A1C5
l0000A1C1_1:
	ip = r0 - (r3 >>u 6)
	// succ:  l0000A1C5
l0000A1C5:
I2CSlaveIntDisable_exit:


// I2CMasterIntStatus
// Return size: 0
void I2CMasterIntStatus()
I2CMasterIntStatus_entry:
	// succ:  l0000A1C9
l0000A1C9:
	sp = fp
	branch Test(NE,Z) l0000A1CD
	// succ:  l0000A1C9_1 l0000A1CD
l0000A1C9_1:
	Mem0[r9:word16] = (uint16) r4
	r9 = r9 + 0x00000009
	// succ:  l0000A1CD
l0000A1CD:
I2CMasterIntStatus_exit:


// I2CSlaveIntStatus
// Return size: 0
void I2CSlaveIntStatus()
I2CSlaveIntStatus_entry:
	// succ:  l0000A1E1
l0000A1E1:
	sp = fp
	branch Test(NE,Z) l0000A1E5
	// succ:  l0000A1E1_1 l0000A1E5
l0000A1E1_1:
	Mem0[r9:word16] = (uint16) r0
	r9 = r9 + 0x00000009
	// succ:  l0000A1E5
l0000A1E5:
I2CSlaveIntStatus_exit:


// I2CMasterIntClear
// Return size: 0
void I2CMasterIntClear()
I2CMasterIntClear_entry:
	// succ:  l0000A1F9
l0000A1F9:
	sp = fp
I2CMasterIntClear_exit:


// I2CSlaveIntClear
// Return size: 0
void I2CSlaveIntClear()
I2CSlaveIntClear_entry:
	// succ:  l0000A201
l0000A201:
	sp = fp
	branch Test(OV,V) l0000A205
	// succ:  l0000A201_1 l0000A205
l0000A201_1:
	r8 = r1 - (r3 >>u 6)
	// succ:  l0000A205
l0000A205:
	branch Test(GT,NZ) l0000A205_thunk_I2CMasterSlaveAddrSet
	// succ:  l0000A205_1 l0000A205_thunk_I2CMasterSlaveAddrSet
l0000A205_1:
	r0 = pc + 0x00000047 + C
	NZCV = cond(r0)
	goto l0000A205_thunk_I2CMasterSlaveAddrSet
	// succ:  l0000A205_thunk_I2CMasterSlaveAddrSet
l0000A205_thunk_I2CMasterSlaveAddrSet:
	call I2CMasterSlaveAddrSet (retsize: 0;)
	return
	// succ:  I2CSlaveIntClear_exit
l0000A205_thunk_I2CMasterSlaveAddrSet:
	call I2CMasterSlaveAddrSet (retsize: 0;)
	return
	// succ:  I2CSlaveIntClear_exit
I2CSlaveIntClear_exit:


// I2CMasterSlaveAddrSet
// Return size: 0
void I2CMasterSlaveAddrSet()
I2CMasterSlaveAddrSet_entry:
	// succ:  l0000A209
l0000A209:
	sp = fp
	branch Test(NE,Z) l0000A20D
	// succ:  l0000A209_1 l0000A20D
l0000A209_1:
	r4 = r2 & 0x8000003A
	// succ:  l0000A20D
l0000A20D:
	branch Test(GT,NZ) l0000A20D_thunk_I2CMasterBusy
	// succ:  l0000A20D_1 l0000A20D_thunk_I2CMasterBusy
l0000A20D_1:
	r7 = r7 - __ror(r0, 0)
	goto l0000A20D_thunk_I2CMasterBusy
	// succ:  l0000A20D_thunk_I2CMasterBusy
l0000A20D_thunk_I2CMasterBusy:
	call I2CMasterBusy (retsize: 0;)
	return
	// succ:  I2CMasterSlaveAddrSet_exit
l0000A20D_thunk_I2CMasterBusy:
	call I2CMasterBusy (retsize: 0;)
	return
	// succ:  I2CMasterSlaveAddrSet_exit
I2CMasterSlaveAddrSet_exit:


// I2CMasterBusy
// Return size: 0
void I2CMasterBusy()
I2CMasterBusy_entry:
	// succ:  l0000A211
l0000A211:
	sp = fp
	branch Test(NE,Z) l0000A215
	// succ:  l0000A211_1 l0000A215
l0000A211_1:
	r0 = !__ror(r8, 0)
	NZCV = cond(r0)
	// succ:  l0000A215
l0000A215:
	branch Test(GT,NZ) l0000A215_thunk_I2CMasterBusBusy
	// succ:  l0000A215_1 l0000A215_thunk_I2CMasterBusBusy
l0000A215_1:
	r7 = r7 - r0
	goto l0000A215_thunk_I2CMasterBusBusy
	// succ:  l0000A215_thunk_I2CMasterBusBusy
l0000A215_thunk_I2CMasterBusBusy:
	call I2CMasterBusBusy (retsize: 0;)
	return
	// succ:  I2CMasterBusy_exit
l0000A215_thunk_I2CMasterBusBusy:
	call I2CMasterBusBusy (retsize: 0;)
	return
	// succ:  I2CMasterBusy_exit
I2CMasterBusy_exit:


// I2CMasterBusBusy
// Return size: 0
void I2CMasterBusBusy()
I2CMasterBusBusy_entry:
	// succ:  l0000A219
l0000A219:
	sp = fp
	branch Test(ULE,ZC) l0000A21D
	// succ:  l0000A219_1 l0000A21D
l0000A219_1:
	ip = __ror(r8, 0) - r3 - C
	NZCV = cond(ip)
	// succ:  l0000A21D
l0000A21D:
I2CMasterBusBusy_exit:


// I2CMasterControl
// Return size: 0
void I2CMasterControl()
I2CMasterControl_entry:
	// succ:  l0000A221
l0000A221:
	sp = fp
	branch Test(GT,NZ) l0000A221_thunk_I2CMasterErr
	// succ:  l0000A221_1 l0000A221_thunk_I2CMasterErr
l0000A221_1:
	r7 = DPB(r7, 0x7060, 16)
	goto l0000A221_thunk_I2CMasterErr
	// succ:  l0000A221_thunk_I2CMasterErr
l0000A221_thunk_I2CMasterErr:
	call I2CMasterErr (retsize: 0;)
	return
	// succ:  I2CMasterControl_exit
l0000A221_thunk_I2CMasterErr:
	call I2CMasterErr (retsize: 0;)
	return
	// succ:  I2CMasterControl_exit
I2CMasterControl_exit:


// I2CMasterErr
// Return size: 0
void I2CMasterErr()
I2CMasterErr_entry:
	// succ:  l0000A225
l0000A225:
	sp = fp
	branch Test(NE,Z) l0000A229
	// succ:  l0000A225_1 l0000A229
l0000A225_1:
	Mem0[r7 + -2664:word32] = sp
	// succ:  l0000A229
l0000A229:
	branch Test(NE,Z) l0000A22D
	// succ:  l0000A229_1 l0000A22D
l0000A229_1:
	r1 = 0x50000003 - r0 - C
	NZCV = cond(r1)
	// succ:  l0000A22D
l0000A22D:
	branch Test(NE,Z) l0000A231
	// succ:  l0000A22D_1 l0000A231
l0000A22D_1:
	r0 = r0 & ~0x00000000
	// succ:  l0000A231
l0000A231:
	branch Test(OV,V) l0000A235
	// succ:  l0000A231_1 l0000A235
l0000A231_1:
	Mem0[r0:word64] = r2_r1
	r0 = r0 - r0
	// succ:  l0000A235
l0000A235:
	branch Test(OV,V) l0000A239
	// succ:  l0000A235_1 l0000A239
l0000A235_1:
	r0 = r0 ^ r7 >> 32
	// succ:  l0000A239
l0000A239:
I2CMasterErr_exit:


// I2CMasterDataPut
// Return size: 0
void I2CMasterDataPut()
I2CMasterDataPut_entry:
	// succ:  l0000A23D
l0000A23D:
	sp = fp
	branch Test(ULE,ZC) l0000A23D_thunk_I2CMasterDataGet
	// succ:  l0000A23D_1 l0000A23D_thunk_I2CMasterDataGet
l0000A23D_1:
	r7 = r7 - __ror(r0, 0)
	goto l0000A23D_thunk_I2CMasterDataGet
	// succ:  l0000A23D_thunk_I2CMasterDataGet
l0000A23D_thunk_I2CMasterDataGet:
	call I2CMasterDataGet (retsize: 0;)
	return
	// succ:  I2CMasterDataPut_exit
l0000A23D_thunk_I2CMasterDataGet:
	call I2CMasterDataGet (retsize: 0;)
	return
	// succ:  I2CMasterDataPut_exit
I2CMasterDataPut_exit:


// I2CMasterDataGet
// Return size: 0
void I2CMasterDataGet()
I2CMasterDataGet_entry:
	// succ:  l0000A241
l0000A241:
	sp = fp
	branch Test(GT,NZ) l0000A241_thunk_I2CSlaveStatus
	// succ:  l0000A241_1 l0000A241_thunk_I2CSlaveStatus
l0000A241_1:
	r7 = r7 - __ror(r8, 0)
	goto l0000A241_thunk_I2CSlaveStatus
	// succ:  l0000A241_thunk_I2CSlaveStatus
l0000A241_thunk_I2CSlaveStatus:
	call I2CSlaveStatus (retsize: 0;)
	return
	// succ:  I2CMasterDataGet_exit
l0000A241_thunk_I2CSlaveStatus:
	call I2CSlaveStatus (retsize: 0;)
	return
	// succ:  I2CMasterDataGet_exit
I2CMasterDataGet_exit:


// I2CSlaveStatus
// Return size: 0
void I2CSlaveStatus()
I2CSlaveStatus_entry:
	// succ:  l0000A245
l0000A245:
	sp = fp
I2CSlaveStatus_exit:


// I2CSlaveDataPut
// Return size: 0
void I2CSlaveDataPut()
I2CSlaveDataPut_entry:
	// succ:  l0000A249
l0000A249:
	sp = fp
	branch Test(ULE,ZC) l0000A249_thunk_I2CSlaveDataGet
	// succ:  l0000A249_1 l0000A249_thunk_I2CSlaveDataGet
l0000A249_1:
	r7 = r7 - __ror(r0, 0)
	goto l0000A249_thunk_I2CSlaveDataGet
	// succ:  l0000A249_thunk_I2CSlaveDataGet
l0000A249_thunk_I2CSlaveDataGet:
	call I2CSlaveDataGet (retsize: 0;)
	return
	// succ:  I2CSlaveDataPut_exit
l0000A249_thunk_I2CSlaveDataGet:
	call I2CSlaveDataGet (retsize: 0;)
	return
	// succ:  I2CSlaveDataPut_exit
I2CSlaveDataPut_exit:


// I2CSlaveDataGet
// Return size: 0
void I2CSlaveDataGet()
I2CSlaveDataGet_entry:
	// succ:  l0000A24D
l0000A24D:
	sp = fp
	branch Test(GT,NZ) l0000A251
	// succ:  l0000A24D_1 l0000A251
l0000A24D_1:
	Mem0[r7:word32] = r3
	Mem0[r7 - 4:word32] = r5
	Mem0[r7 - 8:word32] = r6
	Mem0[r7 - 12:word32] = ip
	Mem0[r7 - 16:word32] = sp
	Mem0[r7 - 20:word32] = lr
	// succ:  l0000A251
l0000A251:
	branch Test(GT,NZ) l0000A259
	// succ:  l0000A255_1 l0000A259
l0000A255_1:
	r0 = 0x00000000
	// succ:  l0000A259
l0000A259:
	call fn018E3801 (retsize: 0;)
	branch Test(LT,N) l0000A261
	// succ:  l0000A25D_1 l0000A261
l0000A25D_1:
	r0 = r0 & r0
	// succ:  l0000A261
l0000A261:
	branch Test(OV,V) l0000A265
	// succ:  l0000A261_1 l0000A265
l0000A261_1:
	Mem0[lr:byte] = (byte) r6
	lr = lr - 0x00000972
	// succ:  l0000A265
l0000A265:
	branch Test(LT,N) l0000A269
	// succ:  l0000A265_1 l0000A269
l0000A265_1:
	r0 = 0x00000000
	// succ:  l0000A269
l0000A269:
I2CSlaveDataGet_exit:


// memcpy
// Return size: 0
void memcpy()
memcpy_entry:
	// succ:  l0000A5C5
l0000A5C5:
	sp = fp
	branch Test(NE,Z) l0000A5C9
	// succ:  l0000A5C5_1 l0000A5C9
l0000A5C5_1:
	// succ:  l0000A5C9
l0000A5C9:
	branch Test(NE,Z) l0000A5CD
	// succ:  l0000A5C9_1 l0000A5CD
l0000A5C9_1:
	call fnFF656279 (retsize: 0;)
	// succ:  l0000A5CD
l0000A5CD:
	branch Test(UGT,ZC) l0000A5D1
	// succ:  l0000A5CD_1 l0000A5D1
l0000A5CD_1:
	call fn010CB1D5 (retsize: 0;)
	// succ:  l0000A5D1
l0000A5D1:
	branch Test(EQ,Z) l0000A5D5
	// succ:  l0000A5D1_1 l0000A5D5
l0000A5D1_1:
	r3 = Mem0[r1:byte]
	r1 = r1 + (r7 << 12)
	// succ:  l0000A5D5
l0000A5D5:
	branch Test(NE,Z) l0000A5D9
	// succ:  l0000A5D5_1 l0000A5D9
l0000A5D5_1:
	r0 = 0x00000C00
	// succ:  l0000A5D9
l0000A5D9:
	branch Test(UGE,C) l0000A5DD
	// succ:  l0000A5D9_1 l0000A5DD
l0000A5D9_1:
	lr = lr
	r1 = Mem0[lr:word32]
	// succ:  l0000A5DD
l0000A5DD:
	branch Test(ULT,C) l0000A5E1
	// succ:  l0000A5DD_1 l0000A5E1
l0000A5DD_1:
l0000A5E1:
	branch Test(ULT,C) l0000A5E5
	// succ:  l0000A5E1_1 l0000A5E5
l0000A5E1_1:
	r4 = Mem0[r9:word32]
	// succ:  l0000A5E5
l0000A5E5:
	r0 = r0
	Mem0[r0:byte] = (byte) r1
	branch Test(LT,NV) l0000A5ED
	// succ:  l0000A5E9_1 l0000A5ED
l0000A5E9_1:
	r0 = r0
	Mem0[r0:byte] = (byte) r5
	// succ:  l0000A5ED
l0000A5ED:
	r0 = r0
	Mem0[r0:byte] = (byte) r9
	branch Test(EQ,Z) l0000A5F5
	// succ:  l0000A5F1_1 l0000A5F5
l0000A5F1_1:
	sp = r0 - __ror(r8, 30)
	// succ:  l0000A5F5
l0000A5F5:
	branch Test(UGT,ZC) l0000A5F9
	// succ:  l0000A5F5_1 l0000A5F9
l0000A5F5_1:
l0000A5F9:
	branch Test(NE,Z) l0000A5FD
	// succ:  l0000A5F9_1 l0000A5FD
l0000A5F9_1:
	// succ:  l0000A5FD
l0000A5FD:
	branch Test(EQ,Z) l0000A601
	// succ:  l0000A5FD_1 l0000A601
l0000A5FD_1:
	r9 = r3 - (r3 >>u 28)
	// succ:  l0000A601
l0000A601:
	branch Test(ULE,ZC) l0000A605
	// succ:  l0000A601_1 l0000A605
l0000A601_1:
	r1 = Mem0[r9 - -4:word32]
	r2 = Mem0[r9:word32]
	r4 = Mem0[r9 - 4:word32]
	r5 = Mem0[r9 - 8:word32]
	r8 = Mem0[r9 - 12:word32]
	r10 = Mem0[r9 - 16:word32]
	return
	// succ:  memcpy_exit
l0000A605:
	branch Test(NE,Z) l0000A609
	// succ:  l0000A605_1 l0000A609
l0000A605_1:
	r1 = DPB(r1, 0x0319, 16)
	// succ:  l0000A609
l0000A609:
	branch Test(EQ,Z) l0000A60D
	// succ:  l0000A609_1 l0000A60D
l0000A609_1:
	__cdp(0x0C, 0x0000000D, 0x01, 0x09, 0x0B, 0x00000001)
	// succ:  l0000A60D
l0000A60D:
	branch Test(GE,NZV) l0000A611
	// succ:  l0000A60D_1 l0000A611
l0000A60D_1:
	Mem0[r3:word32] = r0
	r3 = r3 - 0x0000001F
	// succ:  l0000A611
l0000A611:
	branch Test(LT,NV) l0000A615
	// succ:  l0000A611_1 l0000A615
l0000A611_1:
	r0 = Mem0[r4:word32]
	r4 = r4 - 0x00000108
	// succ:  l0000A615
l0000A615:
	branch Test(LT,NV) l0000A61D
	// succ:  l0000A619_1 l0000A61D
l0000A619_1:
	NZCV = cond(r3 ^ 0x50000000)
	// succ:  l0000A61D
l0000A61D:
	branch Test(NE,Z) l0000A621
	// succ:  l0000A61D_1 l0000A621
l0000A61D_1:
	pc = r1 & ~0x00042000
	// succ:  l0000A621
l0000A621:
	branch Test(UGE,C) l0000A625
	// succ:  l0000A621_1 l0000A625
l0000A621_1:
	r10 = DPB(r10, 0x3624, 16)
	// succ:  l0000A625
l0000A625:
	branch Test(LE,NZV) l0000A629
	// succ:  l0000A625_1 l0000A629
l0000A625_1:
	Mem0[r0 - 4:word32] = r0
	Mem0[r0 - 8:word32] = r2
	Mem0[r0 - 12:word32] = r3
	Mem0[r0 - 16:word32] = r4
	Mem0[r0 - 20:word32] = r9
	Mem0[r0 - 24:word32] = sp
	// succ:  l0000A629
l0000A629:
	branch Test(NE,Z) l0000A62D
	// succ:  l0000A629_1 l0000A62D
l0000A629_1:
	lr = r8 & r8 << sp
	NZCV = cond(lr)
	// succ:  l0000A62D
l0000A62D:
	branch Test(NE,Z) l0000A631
	// succ:  l0000A62D_1 l0000A631
l0000A62D_1:
	r0 = r0 - (r10 >>u 10) - C
	NZCV = cond(r0)
	// succ:  l0000A631
l0000A631:
memcpy_exit:


