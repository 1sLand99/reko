// _init
// Return size: 0
define _init
_init_entry:
	r15 = fp
	r15 = fp - 160_i
	// succ:  l00000560
l00000560:
	v3 = r15 + 48_i64
	Mem0[v3:word64] = r6
	v3 = v3 + 8_i64
	Mem0[v3:word64] = r7
	v3 = v3 + 8_i64
	Mem0[v3:word64] = r8
	v3 = v3 + 8_i64
	Mem0[v3:word64] = r9
	v3 = v3 + 8_i64
	Mem0[v3:word64] = r10
	v3 = v3 + 8_i64
	Mem0[v3:word64] = r11
	v3 = v3 + 8_i64
	Mem0[v3:word64] = r12
	v3 = v3 + 8_i64
	Mem0[v3:word64] = r13
	v3 = v3 + 8_i64
	Mem0[v3:word64] = r14
	v3 = v3 + 8_i64
	Mem0[v3:word64] = r15
	r1 = r15
	r15 = r15 - 160_i64
	CC = cond(r15)
	Mem0[r15:word64] = r1
	r12 = DPB(r12, 0x00002000, 0)
	r1 = DPB(r1, 0x00002038, 0)
	r1 = Mem0[r1:word64]
	r1 = r1
	CC = cond(r1)
	branch Test(EQ,CC) l00000590
	// succ:  l0000058E l00000590
l0000058E:
	r14 = 0x00000590
	call r1 (retsize: 0;)
	// succ:  l00000590
l00000590:
	r4 = Mem0[r15 + 272_i64:word64]
	v16 = r15 + 208_i64
	r6 = Mem0[v16:word64]
	v16 = v16 + 8_i64
	r7 = Mem0[v16:word64]
	v16 = v16 + 8_i64
	r8 = Mem0[v16:word64]
	v16 = v16 + 8_i64
	r9 = Mem0[v16:word64]
	v16 = v16 + 8_i64
	r10 = Mem0[v16:word64]
	v16 = v16 + 8_i64
	r11 = Mem0[v16:word64]
	v16 = v16 + 8_i64
	r12 = Mem0[v16:word64]
	v16 = v16 + 8_i64
	r13 = Mem0[v16:word64]
	v16 = v16 + 8_i64
	r14 = Mem0[v16:word64]
	v16 = v16 + 8_i64
	r15 = Mem0[v16:word64]
	call r4 (retsize: 0;)
	return
	// succ:  _init_exit
_init_exit:


