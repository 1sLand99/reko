void herror()
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse: 
// LiveOut:
// Trashed:
// Preserved:
// Terminates process
herror_exit:
// DataOut:
// DataOut (flags):
// SymbolicIn:

herror_entry:
// DataOut:
// DataOut (flags):
// SymbolicIn:



void __strdup()
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse: 
// LiveOut:
// Trashed:
// Preserved:
// Terminates process
__strdup_exit:
// DataOut:
// DataOut (flags):
// SymbolicIn:

__strdup_entry:
// DataOut:
// DataOut (flags):
// SymbolicIn:



void clock_gettime()
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse: 
// LiveOut:
// Trashed:
// Preserved:
// Terminates process
clock_gettime_exit:
// DataOut:
// DataOut (flags):
// SymbolicIn:

clock_gettime_entry:
// DataOut:
// DataOut (flags):
// SymbolicIn:



void close()
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse: 
// LiveOut:
// Trashed:
// Preserved:
// Terminates process
close_exit:
// DataOut:
// DataOut (flags):
// SymbolicIn:

close_entry:
// DataOut:
// DataOut (flags):
// SymbolicIn:



void read()
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse: 
// LiveOut:
// Trashed:
// Preserved:
// Terminates process
read_exit:
// DataOut:
// DataOut (flags):
// SymbolicIn:

read_entry:
// DataOut:
// DataOut (flags):
// SymbolicIn:



void inet_ntop()
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse: 
// LiveOut:
// Trashed:
// Preserved:
// Terminates process
inet_ntop_exit:
// DataOut:
// DataOut (flags):
// SymbolicIn:

inet_ntop_entry:
// DataOut:
// DataOut (flags):
// SymbolicIn:



void snprintf()
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse: 
// LiveOut:
// Trashed:
// Preserved:
// Terminates process
snprintf_exit:
// DataOut:
// DataOut (flags):
// SymbolicIn:

snprintf_entry:
// DataOut:
// DataOut (flags):
// SymbolicIn:



void getaddrinfo()
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse: 
// LiveOut:
// Trashed:
// Preserved:
// Terminates process
getaddrinfo_exit:
// DataOut:
// DataOut (flags):
// SymbolicIn:

getaddrinfo_entry:
// DataOut:
// DataOut (flags):
// SymbolicIn:



void dlopen()
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse: 
// LiveOut:
// Trashed:
// Preserved:
// Terminates process
dlopen_exit:
// DataOut:
// DataOut (flags):
// SymbolicIn:

dlopen_entry:
// DataOut:
// DataOut (flags):
// SymbolicIn:



void open()
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse: 
// LiveOut:
// Trashed:
// Preserved:
// Terminates process
open_exit:
// DataOut:
// DataOut (flags):
// SymbolicIn:

open_entry:
// DataOut:
// DataOut (flags):
// SymbolicIn:



void __snprintf_chk()
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse: 
// LiveOut:
// Trashed:
// Preserved:
// Terminates process
__snprintf_chk_exit:
// DataOut:
// DataOut (flags):
// SymbolicIn:

__snprintf_chk_entry:
// DataOut:
// DataOut (flags):
// SymbolicIn:



void dlsym()
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse: 
// LiveOut:
// Trashed:
// Preserved:
// Terminates process
dlsym_exit:
// DataOut:
// DataOut (flags):
// SymbolicIn:

dlsym_entry:
// DataOut:
// DataOut (flags):
// SymbolicIn:



void exit()
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse: 
// LiveOut:
// Trashed:
// Preserved:
// Terminates process
exit_exit:
// DataOut:
// DataOut (flags):
// SymbolicIn:

exit_entry:
// DataOut:
// DataOut (flags):
// SymbolicIn:



void getopt_long()
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse: 
// LiveOut:
// Trashed:
// Preserved:
// Terminates process
getopt_long_exit:
// DataOut:
// DataOut (flags):
// SymbolicIn:

getopt_long_entry:
// DataOut:
// DataOut (flags):
// SymbolicIn:



void __vasprintf_chk()
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse: 
// LiveOut:
// Trashed:
// Preserved:
// Terminates process
__vasprintf_chk_exit:
// DataOut:
// DataOut (flags):
// SymbolicIn:

__vasprintf_chk_entry:
// DataOut:
// DataOut (flags):
// SymbolicIn:



void __asprintf_chk()
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse: 
// LiveOut:
// Trashed:
// Preserved:
// Terminates process
__asprintf_chk_exit:
// DataOut:
// DataOut (flags):
// SymbolicIn:

__asprintf_chk_entry:
// DataOut:
// DataOut (flags):
// SymbolicIn:



void getnameinfo()
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse: 
// LiveOut:
// Trashed:
// Preserved:
// Terminates process
getnameinfo_exit:
// DataOut:
// DataOut (flags):
// SymbolicIn:

getnameinfo_entry:
// DataOut:
// DataOut (flags):
// SymbolicIn:



void memset()
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse: 
// LiveOut:
// Trashed:
// Preserved:
// Terminates process
memset_exit:
// DataOut:
// DataOut (flags):
// SymbolicIn:

memset_entry:
// DataOut:
// DataOut (flags):
// SymbolicIn:



void inet_pton()
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse: 
// LiveOut:
// Trashed:
// Preserved:
// Terminates process
inet_pton_exit:
// DataOut:
// DataOut (flags):
// SymbolicIn:

inet_pton_entry:
// DataOut:
// DataOut (flags):
// SymbolicIn:



void strcmp()
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse: 
// LiveOut:
// Trashed:
// Preserved:
// Terminates process
strcmp_exit:
// DataOut:
// DataOut (flags):
// SymbolicIn:

strcmp_entry:
// DataOut:
// DataOut (flags):
// SymbolicIn:



void free()
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse: 
// LiveOut:
// Trashed:
// Preserved:
// Terminates process
free_exit:
// DataOut:
// DataOut (flags):
// SymbolicIn:

free_entry:
// DataOut:
// DataOut (flags):
// SymbolicIn:



void __printf_chk()
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse: 
// LiveOut:
// Trashed:
// Preserved:
// Terminates process
__printf_chk_exit:
// DataOut:
// DataOut (flags):
// SymbolicIn:

__printf_chk_entry:
// DataOut:
// DataOut (flags):
// SymbolicIn:



void __sprintf_chk()
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse: 
// LiveOut:
// Trashed:
// Preserved:
// Terminates process
__sprintf_chk_exit:
// DataOut:
// DataOut (flags):
// SymbolicIn:

__sprintf_chk_entry:
// DataOut:
// DataOut (flags):
// SymbolicIn:



void fwrite()
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse: 
// LiveOut:
// Trashed:
// Preserved:
// Terminates process
fwrite_exit:
// DataOut:
// DataOut (flags):
// SymbolicIn:

fwrite_entry:
// DataOut:
// DataOut (flags):
// SymbolicIn:



void memcmp()
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse: 
// LiveOut:
// Trashed:
// Preserved:
// Terminates process
memcmp_exit:
// DataOut:
// DataOut (flags):
// SymbolicIn:

memcmp_entry:
// DataOut:
// DataOut (flags):
// SymbolicIn:



void fputs()
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse: 
// LiveOut:
// Trashed:
// Preserved:
// Terminates process
fputs_exit:
// DataOut:
// DataOut (flags):
// SymbolicIn:

fputs_entry:
// DataOut:
// DataOut (flags):
// SymbolicIn:



void isatty()
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse: 
// LiveOut:
// Trashed:
// Preserved:
// Terminates process
isatty_exit:
// DataOut:
// DataOut (flags):
// SymbolicIn:

isatty_entry:
// DataOut:
// DataOut (flags):
// SymbolicIn:



void __fprintf_chk()
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse: 
// LiveOut:
// Trashed:
// Preserved:
// Terminates process
__fprintf_chk_exit:
// DataOut:
// DataOut (flags):
// SymbolicIn:

__fprintf_chk_entry:
// DataOut:
// DataOut (flags):
// SymbolicIn:



void __libc_start_main()
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse: 
// LiveOut:
// Trashed:
// Preserved:
// Terminates process
__libc_start_main_exit:
// DataOut:
// DataOut (flags):
// SymbolicIn:

__libc_start_main_entry:
// DataOut:
// DataOut (flags):
// SymbolicIn:



void putchar()
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse: 
// LiveOut:
// Trashed:
// Preserved:
// Terminates process
putchar_exit:
// DataOut:
// DataOut (flags):
// SymbolicIn:

putchar_entry:
// DataOut:
// DataOut (flags):
// SymbolicIn:



void fputc()
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse: 
// LiveOut:
// Trashed:
// Preserved:
// Terminates process
fputc_exit:
// DataOut:
// DataOut (flags):
// SymbolicIn:

fputc_entry:
// DataOut:
// DataOut (flags):
// SymbolicIn:



void __stack_chk_fail()
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse: 
// LiveOut:
// Trashed:
// Preserved:
// Terminates process
__stack_chk_fail_exit:
// DataOut:
// DataOut (flags):
// SymbolicIn:

__stack_chk_fail_entry:
// DataOut:
// DataOut (flags):
// SymbolicIn:



void __errno_location()
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse: 
// LiveOut:
// Trashed:
// Preserved:
// Terminates process
__errno_location_exit:
// DataOut:
// DataOut (flags):
// SymbolicIn:

__errno_location_entry:
// DataOut:
// DataOut (flags):
// SymbolicIn:



void strtol()
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse: 
// LiveOut:
// Trashed:
// Preserved:
// Terminates process
strtol_exit:
// DataOut:
// DataOut (flags):
// SymbolicIn:

strtol_entry:
// DataOut:
// DataOut (flags):
// SymbolicIn:



void strchr()
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse: 
// LiveOut:
// Trashed:
// Preserved:
// Terminates process
strchr_exit:
// DataOut:
// DataOut (flags):
// SymbolicIn:

strchr_entry:
// DataOut:
// DataOut (flags):
// SymbolicIn:



void memcpy()
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse: 
// LiveOut:
// Trashed:
// Preserved:
// Terminates process
memcpy_exit:
// DataOut:
// DataOut (flags):
// SymbolicIn:

memcpy_entry:
// DataOut:
// DataOut (flags):
// SymbolicIn:



void abort()
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse: 
// LiveOut:
// Trashed:
// Preserved:
// Terminates process
abort_exit:
// DataOut:
// DataOut (flags):
// SymbolicIn:

abort_entry:
// DataOut:
// DataOut (flags):
// SymbolicIn:



void freeaddrinfo()
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse: 
// LiveOut:
// Trashed:
// Preserved:
// Terminates process
freeaddrinfo_exit:
// DataOut:
// DataOut (flags):
// SymbolicIn:

freeaddrinfo_entry:
// DataOut:
// DataOut (flags):
// SymbolicIn:



void fn0000000000015180(word64 ra, word64 gp, word64 a0, word64 a1, word64 a7, word64 s5, word64 s11)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  a0:[0..63] a1:[0..63] a7:[0..63] gp:[0..63] ra:[0..63] s11:[0..63] s5:[0..63]
// LiveOut:
// Trashed: a0 a1 a2 a3 a4 a5 a6 a7 gp ra s0 s1 s10 s11 s2 s3 s4 s5 s6 s7 s8 s9 t1 t3
// Preserved: sp
fn0000000000015180_entry:
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0000000000015180:
	word64 sp_262 = fp + -448 + 0xFFFFFFFFFFFFFFE8
	word64 a5_7 = Mem5[gp + -1936:word64]
	word64 s3_1045 = a0
	word64 s0_128 = 0
	word64 s6_43 = 0
	word64 s9_44 = 0
	word64 s10_45 = 0
	word64 s7_49 = 1
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0000000000015200:
	word64 a0_60 = (uint64) (uint32) getopt_long(a0, a1, 0x00000000000119A8, 0x00000000000108E0, 0)
	sp_262 = sp_262 + 0xFFFFFFFFFFFFFFF8
	branch a0_60 == -1 l0000000000015348
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0000000000015348:
	word64 s1_141
	word64 s4_338
	word64 a4_67 = (int64) Mem50[gp + -1904:int32]
	branch a4_67 >= a0 l0000000000015428
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0000000000015428:
	s4_338 = 0
	s1_141 = 0
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0000000000015350:
	word64 a1_70 = (int64) ((word32) a4_67 + 1)
	Mem73[gp + 2192:word32] = (word32) a1_70
	word64 s2_72 = a1 + (a4_67 << 0x00000003)
	s1_141 = Mem73[s2_72:word64]
	s4_338 = 0
	branch a1_70 >= a0 l0000000000015378
// DataOut:
// DataOut (flags):
// SymbolicIn:

l000000000001536C:
	s4_338 = Mem73[s2_72 + 8:word64]
	Mem78[gp + 2192:word32] = (word32) (int64) ((word32) a4_67 + 2)
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0000000000015378:
	branch s6_43 != 0x0000000000000000 l0000000000015588
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0000000000015588:
	__printf_chk(1, 0x00000000000119C8, 0x00000000)
// DataOut:
// DataOut (flags):
// SymbolicIn:

l000000000001537C:
	branch (int64) Mem90[sp_262 + 28:int32] == 0x0000000000000000 l00000000000153B4
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0000000000015384:
	branch (int64) Mem90[sp_262:int32] == 0x0000000000000000 l00000000000153B4
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00000000000153B4:
	word64 a6_1001
	word64 a4_488
	word64 a0_485
	word64 a5_348
	word64 a0_178
	word64 a0_346
	word64 a5_109
	word64 s2_123
	Mem96[sp_262 + 8:word64] = a0_60
	branch s9_44 == 0x0000000000000000 l0000000000015924
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0000000000015924:
	word64 a1_103
	word64 a2_104
	word64 a3_105
	word64 a4_2760
	word64 a0_102 = fn0000000000017924(gp, out a1_103, out a2_104, out a3_105, out a4_2760, out a6_1001)
	a5_109 = Mem96[sp_262 + 8:word64]
	branch a0_102 != 0x0000000000000000 l0000000000015458
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0000000000015930:
	branch (s0_128 & 65544) != 65544 l0000000000015458
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0000000000015940:
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00000000000153BC:
	word64 a1_117
	word64 a2_118
	word64 a3_119
	word64 a4_2761
	word64 a0_116 = fn0000000000017924(gp, out a1_117, out a2_118, out a3_119, out a4_2761, out a6_1001)
	s2_123 = s0_128 | 2
	a5_109 = Mem96[sp_262 + 8:word64]
	branch a0_116 == 0x0000000000000000 l0000000000015434
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0000000000015434:
	branch (s0_128 & 65544) != 65544 l00000000000153CC
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0000000000015444:
	s0_128 = s0_128 | 2
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0000000000015448:
	s2_123 = s0_128 | 0x0000000000004000
	branch s9_44 != 0x0000000000000000 l00000000000153CC
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0000000000015454:
	s0_128 = s2_123
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0000000000015458:
	branch s10_45 == 0x0000000000000000 l0000000000015CE4
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0000000000015CE4:
	branch s1_141 != 0x0000000000000000 l0000000000015510
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0000000000015CE8:
	branch (int64) Mem96[gp + -2028:int32] != 0x0000000000000000 l00000000000153D8
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0000000000015CF0:
	fwrite(0x0000000000011A30, 1, 28, Mem96[gp + -1920:word64])
	fn0000000000015FCC(gp, 1)
// DataOut:
// DataOut (flags):
// SymbolicIn:

l000000000001545C:
	word64 a0_169 = fn00000000000166F4(gp, sp_262 + 28, s10_45, 1)
	branch a0_169 < 0x0000000000000000 l0000000000015BC8
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0000000000015BC8:
	branch (int64) Mem96[gp + -2028:int32] != 0x0000000000000000 l00000000000153D8
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0000000000015BD0:
	a0_178 = Mem96[gp + -1920:word64]
	branch (int64) Mem96[sp_262 + 28:int32] != 0x0000000000000000 l0000000000015E7C
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0000000000015E7C:
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0000000000015BDC:
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0000000000015474:
	Mem187[sp_262 + 8:word64] = a0_169
	word64 s1_188 = (int64) Mem187[sp_262 + 28:int32]
	Mem189[sp_262 + 32:word64] = 0x0000000000000000
	word64 a0_190 = (uint64) (uint32) clock_gettime(2, sp_262 + 40)
	word64 a5_192 = Mem189[sp_262:word64]
	branch a0_190 < 0x0000000000000000 l0000000000015CB0
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0000000000015494:
	word64 a5_233
	branch s1_188 == 0x0000000000000000 l0000000000015C48
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0000000000015C48:
	Mem195[sp_262:word64] = a5_192
	word64 s1_196 = Mem195[sp_262 + 0x0000000000000028:word64]
	word64 a0_197 = fn00000000000164D0(sp_262 + 0x00000000000000F8, 4)
	word64 a5_200 = Mem195[sp_262:word64]
	branch a0_197 < 0x0000000000000000 l0000000000015CB0
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0000000000015C64:
	branch a5_200 <= 15 l0000000000015C7C
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0000000000015C6C:
	word64 a3_204 = 1
	branch a3_204 >=u (s1_196 | 4) l0000000000015DB8
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0000000000015DB8:
	branch (s1_196 | 4) == a3_204 l0000000000015E00
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0000000000015E00:
	Mem206[sp_262 + 0x00000000000000F8:byte] = 0xC0
	Mem208[sp_262 + 0x00000000000000F9:byte] = 0xA8
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0000000000015DBC:
	Mem210[sp_262 + 0x00000000000000F8:byte] = 0xAC
	Mem215[sp_262 + 0x00000000000000F9:byte] = (byte) (Mem210[sp_262 + 0x0000000000000028:word64] >> 0x00000004 & 15 | 16)
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0000000000015C7C:
	Mem218[sp_262 + 0x00000000000000F8:byte] = 0x0A
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0000000000015C84:
	word64 a4_221 = (int64) Mem220[sp_262 + 0x00000000000000F8:int32]
	Mem229[sp_262:word64] = a5_200
	Mem230[sp_262 + 0x0000000000000010:word32] = (word32) a4_221
	word64 a0_231 = inet_ntop(2, sp_262 + 0x0000000000000010, sp_262 + 0x0000000000000100, 64)
	a5_233 = Mem230[sp_262 + 0xFFFFFFFFFFFFFFF8:word64]
	branch a0_231 != 0x0000000000000000 l00000000000154DC
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0000000000015498:
	Mem239[sp_262 + 0x0000000000000030:byte] = (byte) (Mem189[sp_262 + 0x0000000000000028:word64] & 1 | -4)
	branch fn00000000000164D0(sp_262 + 0x0000000000000031, 15) < 0x0000000000000000 l0000000000015CB0
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00000000000154BC:
	word64 a0_249 = inet_ntop(10, sp_262 + 0x0000000000000030, sp_262 + 0x0000000000000100, 64)
	a5_233 = Mem239[sp_262 + 0xFFFFFFFFFFFFFFF8:word64]
	branch a0_249 == 0x0000000000000000 l0000000000015CB0
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00000000000154DC:
	word64 sp_257 = sp_262 + 0x0000000000000000
	Mem260[sp_257 + 8:word64] = a5_233
	word64 a0_261 = (uint64) (uint32) __asprintf_chk(sp_257 + 32, 1, 0x0000000000011A90, 0x00000000)
	sp_262 = sp_257 + 0xFFFFFFFFFFFFFFF8
	a5_109 = Mem260[sp_257:word64]
	branch a0_261 == -1 l0000000000015CB0
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0000000000015508:
	s1_141 = Mem260[sp_257 + 0x0000000000000018:word64]
	branch s1_141 == 0x0000000000000000 l0000000000015CB0
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0000000000015CB0:
	branch (int64) Mem270[gp + -2028:int32] != 0x0000000000000000 l00000000000153D8
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0000000000015CB8:
	__fprintf_chk(Mem270[gp + -1920:word64], 1, 0x0000000000011A98, 0x00000000)
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00000000000153CC:
	branch s10_45 == 0x0000000000000000 l00000000000155A8
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00000000000155A8:
	branch (int64) Mem96[sp_262 + 28:int32] != 0x0000000000000000 l0000000000015944
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0000000000015944:
	Mem291[sp_262 + 8:word64] = a5_109
	word64 a0_293 = fn00000000000169D8(gp, s9_44)
	s1_141 = a0_293
	s0_128 = s2_123
	a5_109 = Mem291[sp_262 + 8:word64]
	branch a0_293 != 0x0000000000000000 l0000000000015510
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0000000000015510:
	branch (int64) Mem304[sp_262:int32] != 0x0000000000000000 l00000000000155D8
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00000000000155B0:
	branch (int64) Mem96[sp_262:int32] == 0x0000000000000000 l000000000001598C
// DataOut:
// DataOut (flags):
// SymbolicIn:

l000000000001598C:
	Mem309[sp_262:word64] = a5_109
	word64 a0_310 = fn00000000000169D8(gp, s9_44)
	s1_141 = a0_310
	branch a0_310 == 0x0000000000000000 l0000000000015964
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00000000000159A4:
	s0_128 = s2_123
	a5_109 = Mem309[sp_262:word64]
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0000000000015518:
	Mem327[sp_262:word64] = a5_109
	word64 a0_328 = strchr(s1_141, 58)
	sp_262 = sp_262 + 0xFFFFFFFFFFFFFFF8
	a5_109 = Mem327[sp_262:word64]
	branch a0_328 == 0x0000000000000000 l00000000000155D8
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0000000000015530:
	Mem332[sp_262 + 28:word32] = 0x00000001
	branch s4_338 == 0x0000000000000000 l0000000000015BEC
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0000000000015BEC:
	Mem345[sp_262:word64] = a5_109
	a0_346 = strchr(s1_141, 47)
	sp_262 = sp_262 + 0xFFFFFFFFFFFFFFF8
	a5_348 = Mem345[sp_262 + 0xFFFFFFFFFFFFFFF8:word64]
	branch a0_346 != 0x0000000000000000 l0000000000015BB8
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0000000000015C04:
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00000000000155B8:
	Mem351[sp_262:word64] = a5_109
	word64 a0_352 = fn00000000000169D8(gp, s9_44)
	s1_141 = a0_352
	branch a0_352 == 0x0000000000000000 l0000000000015964
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0000000000015964:
	branch (int64) Mem360[gp + -2028:int32] != 0x0000000000000000 l00000000000153D8
// DataOut:
// DataOut (flags):
// SymbolicIn:

l000000000001596C:
	__fprintf_chk(Mem360[gp + -1920:word64], 1, 0x0000000000011A50, 0x00000000)
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00000000000155D0:
	a5_109 = Mem351[sp_262:word64]
	s0_128 = s2_123
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00000000000155D8:
	branch s4_338 == 0x0000000000000000 l0000000000015BA0
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0000000000015BA0:
	Mem380[sp_262:word64] = a5_109
	a0_346 = strchr(s1_141, 47)
	sp_262 = sp_262 + 0xFFFFFFFFFFFFFFF8
	a5_348 = Mem380[sp_262:word64]
	branch a0_346 == 0x0000000000000000 l00000000000155FC
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0000000000015BB8:
	Mem385[a0_346:byte] = 0x00
	s4_338 = a0_346 + 1
	branch s4_338 == 0x0000000000000000 l00000000000155FC
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0000000000015BC4:
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00000000000155DC:
	branch (int64) Mem387[sp_262 + 28:int32] != 0x0000000000000000 l000000000001553C
// DataOut:
// DataOut (flags):
// SymbolicIn:

l000000000001553C:
	branch (int64) Mem393[gp + -2028:int32] != 0x0000000000000000 l00000000000153D8
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0000000000015544:
	__fprintf_chk(Mem393[gp + -1920:word64], 1, 0x0000000000011AD0, 0x00000000)
	fn0000000000015FCC(gp, 1)
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00000000000155E4:
	word64 a0_421 = fn00000000000166F4(gp, sp_262 + 28, s4_338, 0)
	a5_348 = a0_421
	branch a0_421 < 0x0000000000000000 l0000000000015B6C
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0000000000015B6C:
	branch (int64) Mem428[gp + -2028:int32] != 0x0000000000000000 l00000000000153D8
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0000000000015B74:
	a0_178 = Mem428[gp + -1920:word64]
	branch (int64) Mem428[sp_262 + 28:int32] != 0x0000000000000000 l0000000000015CD8
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0000000000015CD8:
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0000000000015B80:
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0000000000015B88:
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0000000000015B8C:
	__fprintf_chk(a0_178, 1, 0x0000000000011A70, 0x00000000)
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00000000000155FC:
	branch (int64) Mem448[sp_262 + 28:int32] == 0x0000000000000000 l00000000000159B0
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00000000000159B0:
	a0_485 = fn0000000000016D74(ra, gp, s1_141, a5_348, sp_262 + 56, s0_128, out a4_488)
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0000000000015604:
	a0_485 = fn00000000000175BC(gp, s1_141, a5_348, sp_262 + 56, s0_128, out a4_488)
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0000000000015618:
	branch a0_485 < 0x0000000000000000 l00000000000153D8
// DataOut:
// DataOut (flags):
// SymbolicIn:

l000000000001561C:
	branch (s0_128 & 4294623231) != 0x0000000000000000 l0000000000015630
// DataOut:
// DataOut (flags):
// SymbolicIn:

l000000000001562C:
	s0_128 = s0_128 | 8
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0000000000015630:
	word64 sp_1073 = sp_262 + 0xFFFFFFFFFFFFFFF8
	branch (uint64) (uint32) isatty(1) == 0x0000000000000000 l0000000000015644
// DataOut:
// DataOut (flags):
// SymbolicIn:

l000000000001563C:
	a4_488 = 1
	Mem518[gp + 2064:word32] = (word32) a4_488
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0000000000015644:
	branch (s0_128 & 8) == 0x0000000000000000 l00000000000159C8
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00000000000159C8:
	branch (s0_128 & 128) != 0x0000000000000000 l0000000000015D18
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0000000000015D18:
	__printf_chk(1, 0x0000000000011C28, 0x00000000)
	sp_1073 = sp_1073 + 0xFFFFFFFFFFFFFFF8
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00000000000159D0:
	branch (s0_128 & 512) != 0x0000000000000000 l0000000000015D48
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0000000000015D48:
	__printf_chk(1, 0x0000000000011C38, 0x00000000)
	sp_1073 = sp_1073 + 0xFFFFFFFFFFFFFFF8
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00000000000159D8:
	branch (s0_128 & 64) == 0x0000000000000000 l00000000000159FC
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00000000000159E0:
	branch (int64) Mem524[sp_1073 + 28:int32] != 0x0000000000000000 l00000000000159FC
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00000000000159E8:
	__printf_chk(1, 0x0000000000011C48, 0x00000000)
	sp_1073 = sp_1073 + 0xFFFFFFFFFFFFFFF8
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00000000000159FC:
	branch (s0_128 & 256) != 0x0000000000000000 l0000000000015D30
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0000000000015D30:
	__printf_chk(1, 0x0000000000011C58, 0x00000000)
	sp_1073 = sp_1073 + 0xFFFFFFFFFFFFFFF8
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0000000000015A04:
	branch s0_128 << 0x0000000E < 0x0000000000000000 l0000000000015D78
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0000000000015D78:
	__printf_chk(1, 0x0000000000011C68, 0x00000000)
	sp_1073 = sp_1073 + 0xFFFFFFFFFFFFFFF8
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0000000000015A0C:
	branch (s0_128 & 1024) == 0x0000000000000000 l0000000000015A2C
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0000000000015A14:
	branch Mem524[sp_1073 + 224:word64] == 0x0000000000000000 l0000000000015A2C
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0000000000015A1C:
	__printf_chk(1, 0x0000000000011C78, 0x00000000)
	sp_1073 = sp_1073 + 0xFFFFFFFFFFFFFFF8
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0000000000015A2C:
	branch s0_128 << 0x00000014 >= 0x0000000000000000 l0000000000015A4C
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0000000000015A34:
	branch Mem524[sp_1073 + 232:word64] == 0x0000000000000000 l0000000000015A4C
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0000000000015A3C:
	__printf_chk(1, 0x0000000000011C88, 0x00000000)
	sp_1073 = sp_1073 + 0xFFFFFFFFFFFFFFF8
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0000000000015A4C:
	branch s0_128 << 0x00000012 >= 0x0000000000000000 l0000000000015A80
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0000000000015A54:
	word64 s2_599 = Mem524[sp_1073 + 240:word64]
	branch s2_599 == 0x0000000000000000 l0000000000015A80
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0000000000015A5C:
	word64 sp_603 = sp_1073 + 0xFFFFFFFFFFFFFFF8
	branch strchr(s2_599, 32) == 0x0000000000000000 l0000000000015DA4
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0000000000015DA4:
	__printf_chk(1, 0x0000000000011CA8, 0x00000000)
	sp_1073 = sp_603 + 0xFFFFFFFFFFFFFFF8
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0000000000015A70:
	__printf_chk(1, 0x0000000000011C98, 0x00000000)
	sp_1073 = sp_603 + 0xFFFFFFFFFFFFFFF8
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0000000000015A80:
	branch s0_128 << 0x00000013 >= 0x0000000000000000 l0000000000015AAC
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0000000000015A88:
	word64 sp_621 = sp_1073 + 0xFFFFFFFFFFFFFFF8
	branch strchr(sp_1073 + 152, 32) == 0x0000000000000000 l0000000000015D90
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0000000000015D90:
	__printf_chk(1, 0x0000000000011CC8, 0x00000000)
	sp_1073 = sp_621 + 0xFFFFFFFFFFFFFFF8
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0000000000015A9C:
	__printf_chk(1, 0x0000000000011CB8, 0x00000000)
	sp_1073 = sp_621 + 0xFFFFFFFFFFFFFFF8
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0000000000015AAC:
	branch (s0_128 & 1) == 0x0000000000000000 l0000000000015ACC
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0000000000015AB4:
	branch Mem524[sp_1073 + 112:word64] == 0x0000000000000000 l0000000000015ACC
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0000000000015ABC:
	__printf_chk(1, 0x0000000000011CD8, 0x00000000)
	sp_1073 = sp_1073 + 0xFFFFFFFFFFFFFFF8
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0000000000015ACC:
	branch (s0_128 & 2) != 0x0000000000000000 l0000000000015D60
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0000000000015D60:
	__printf_chk(1, 0x0000000000011CE8, 0x00000000)
	sp_1073 = sp_1073 + 0xFFFFFFFFFFFFFFF8
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0000000000015AD4:
	branch (s0_128 & 0x000000000000C000) != 0x000000000000C000 l00000000000153DC
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0000000000015AE0:
	branch Mem524[sp_1073 + 128:word64] == 0x0000000000000000 l0000000000015AF8
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0000000000015AE8:
	__printf_chk(1, 0x0000000000011CF8, 0x00000000)
	sp_1073 = sp_1073 + 0xFFFFFFFFFFFFFFF8
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0000000000015AF8:
	word64 s0_680 = Mem524[sp_1073 + 120:word64]
	branch s0_680 == 0x0000000000000000 l0000000000015B24
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0000000000015B00:
	word64 sp_684 = sp_1073 + 0xFFFFFFFFFFFFFFF8
	branch strchr(s0_680, 32) == 0x0000000000000000 l0000000000015E90
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0000000000015E90:
	__printf_chk(1, 0x0000000000011D18, 0x00000000)
	sp_1073 = sp_684 + 0xFFFFFFFFFFFFFFF8
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0000000000015B14:
	__printf_chk(1, 0x0000000000011D08, 0x00000000)
	sp_1073 = sp_684 + 0xFFFFFFFFFFFFFFF8
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0000000000015B24:
	word64 s0_698 = Mem524[sp_1073 + 136:word64]
	branch s0_698 == 0x0000000000000000 l0000000000015B50
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0000000000015B2C:
	word64 sp_702 = sp_1073 + 0xFFFFFFFFFFFFFFF8
	branch strchr(s0_698, 32) == 0x0000000000000000 l0000000000015EA4
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0000000000015EA4:
	__printf_chk(1, 0x0000000000011D38, 0x00000000)
	sp_1073 = sp_702 + 0xFFFFFFFFFFFFFFF8
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0000000000015B40:
	__printf_chk(1, 0x0000000000011D28, 0x00000000)
	sp_1073 = sp_702 + 0xFFFFFFFFFFFFFFF8
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0000000000015B50:
	branch Mem524[sp_1073 + 144:word64] == 0x0000000000000000 l00000000000153DC
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0000000000015B58:
	__printf_chk(1, 0x0000000000011D48, 0x00000000)
// DataOut:
// DataOut (flags):
// SymbolicIn:

l000000000001564C:
	word64 a4_1016
	word64 s0_1026
	word64 a5_1024
	word64 a3_1029
	word64 a5_724
	word64 s4_816
	word64 a3_728
	word64 s2_1007 = (int64) Mem524[sp_1073 + 216:int32]
	branch (int64) Mem524[sp_1073 + 28:int32] != 0x0000000000000000 l000000000001590C
// DataOut:
// DataOut (flags):
// SymbolicIn:

l000000000001590C:
	a5_724 = 128
	branch s2_1007 != a5_724 l0000000000015660
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0000000000015658:
	a5_724 = 32
	branch s2_1007 == a5_724 l0000000000015914
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0000000000015914:
	a3_728 = Mem524[sp_1073 + 64:word64]
	branch a3_728 == 0x0000000000000000 l0000000000015DDC
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0000000000015DDC:
	word64 a5_2766
	gp = fn000000000001654C(ra, gp, s0_128, 0x0000000000012000, 0x0000000000011B08, 0x0000000000011B10, Mem524[sp_1073 + 56:word64], a4_488, a5_724, a6_1001, a7, 0x0000000000012000, a0, out a4_1016, out a5_2766, out a6_1001, out a7)
// DataOut:
// DataOut (flags):
// SymbolicIn:

l000000000001591C:
	s4_816 = 1
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0000000000015660:
	branch s10_45 == 0x0000000000000000 l0000000000015860
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0000000000015860:
	s3_1045 = Mem524[sp_1073 + 56:word64]
	sp_1073 = sp_1073 + 0xFFFFFFFFFFFFFFF8
	branch (uint64) (uint32) strcmp(Mem524[sp_1073 + 88:word64], s3_1045) == 0x0000000000000000 l0000000000015664
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0000000000015874:
	a3_728 = Mem524[sp_1073 + 0x0000000000000038:word64]
	s4_816 = 0
	branch a3_728 == 0x0000000000000000 l0000000000015E14
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0000000000015E14:
	word64 a4_2765
	gp = fn000000000001654C(ra, gp, s0_128, 0x0000000000012000, 0x0000000000011B08, 0x0000000000011B10, s3_1045, a4_488, a5_724, a6_1001, a7, 0x0000000000012000, s3_1045, out a4_2765, out a5_724, out a6_1001, out a7)
	s2_1007 = (int64) Mem524[sp_1073 + 0x00000000000000D0:int32]
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0000000000015880:
	word64 a4_885
	word64 a5_886
	word64 a6_887
	word64 a7_888
	gp = fn000000000001654C(ra, fn000000000001654C(ra, gp, s0_128, 0x0000000000012000, 0x0000000000011B08, 0x0000000000011AF8, a3_728, a4_488, a5_724, a6_1001, a7, 0x0000000000012000, s3_1045, out a4_885, out a5_886, out a6_887, out a7_888), s0_128, 0x0000000000012000, 0x0000000000011B08, 0x0000000000011B10, Mem524[sp_1073 + 56:word64], a4_885, a5_886, a6_887, a7_888, 0x0000000000012000, s3_1045, out a4_1016, out a5_724, out a6_1001, out a7)
	branch s4_816 == 0x0000000000000000 l0000000000015E74
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0000000000015E74:
	s2_1007 = (int64) Mem524[sp_1073 + 216:int32]
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00000000000158B8:
	a5_1024 = 65544
	s0_1026 = s0_128 & 65544
	branch s0_1026 == 65544 l0000000000015E64
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0000000000015E64:
	a3_1029 = Mem524[sp_1073 + 80:word64]
	s0_1026 = 1
	branch a3_1029 != 0x0000000000000000 l0000000000015C2C
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0000000000015E70:
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0000000000015664:
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0000000000015668:
	word64 a3_925 = Mem524[sp_1073 + 72:word64]
	s3_1045 = 0x0000000000012000
	branch a3_925 == 0x0000000000000000 l0000000000015690
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0000000000015674:
	word64 a4_2763
	gp = fn000000000001654C(ra, gp, s0_128, 0x0000000000012000, 0x0000000000011B08, 0x0000000000011B28, a3_925, s2_1007, a5_724, a6_1001, a7, s2_1007, 0x0000000000012000, out a4_2763, out a5_724, out a6_1001, out a7)
	s2_1007 = (int64) Mem524[sp_1073 + 216:int32]
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0000000000015690:
	word64 a5_982
	word64 a6_983
	word64 a7_984
	word64 a5_1000
	word64 a4_2762
	gp = fn000000000001654C(ra, fn000000000001654C(ra, gp, s0_128, 0x0000000000012000, 0x0000000000011B08, 0x0000000000011B38, Mem524[sp_1073 + 88:word64], s2_1007, a5_724, a6_1001, a7, s2_1007, 0x0000000000012000, out a4_2762, out a5_982, out a6_983, out a7_984), s0_128, 0x0000000000012000, 0x0000000000011B08, 0x0000000000011B58, Mem524[sp_1073 + 104:word64], (int64) Mem524[sp_1073 + 216:int32], a5_982, a6_983, a7_984, s2_1007, 0x0000000000012000, out a4_1016, out a5_1000, out a6_1001, out a7)
	word64 a3_1006 = Mem524[sp_1073 + 96:word64]
	branch a3_1006 == 0x0000000000000000 l00000000000156EC
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00000000000156D4:
	s2_1007 = 0x0000000000012000
	word64 a5_2764
	gp = fn000000000001654C(ra, gp, s0_128, 0x0000000000012000, 0x0000000000011B08, 0x0000000000011B68, a3_1006, a4_1016, a5_1000, a6_1001, a7, 0x0000000000012000, 0x0000000000012000, out a4_1016, out a5_2764, out a6_1001, out a7)
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00000000000156EC:
	a5_1024 = 65544
	s0_1026 = s0_128 & 65544
	branch s0_1026 == 65544 l0000000000015C1C
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0000000000015C1C:
	a3_1029 = Mem524[sp_1073 + 80:word64]
	branch a3_1029 == 0x0000000000000000 l00000000000156FC
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0000000000015C24:
	s0_1026 = 0
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0000000000015C2C:
	s2_1007 = 0x0000000000012000
	gp = fn000000000001654C(ra, gp, s0_1026, 0x0000000000012000, 0x0000000000011B08, 0x0000000000011B78, a3_1029, a4_1016, 65544, a6_1001, a7, 0x0000000000012000, s3_1045, out a4_1016, out a5_1024, out a6_1001, out a7)
	branch s0_1026 != 0x0000000000000000 l00000000000158C8
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00000000000158C8:
	s2_1007 = 0x0000000000012000
	word64 a3_1077 = Mem524[sp_1073 + 240:word64]
	branch a3_1077 == 0x0000000000000000 l00000000000158E8
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00000000000158D0:
	gp = fn000000000001654C(ra, gp, s0_1026, 0x0000000000012000, 0x0000000000011B98, 0x0000000000011B88, a3_1077, a4_1016, a5_1024, a6_1001, a7, 0x0000000000012000, s3_1045, out a4_1016, out a5_1024, out a6_1001, out a7)
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00000000000158E8:
	word64 a3_1106 = Mem524[sp_1073 + 248:word64]
	branch a3_1106 == 0x0000000000000000 l00000000000157BC
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00000000000158F0:
	word64 a5_2767
	gp = fn000000000001654C(ra, gp, s0_1026, 0x0000000000012000, 0x0000000000011B98, 0x0000000000011BA0, a3_1106, a4_1016, a5_1024, a6_1001, a7, 0x0000000000012000, s3_1045, out a4_1016, out a5_2767, out a6_1001, out a7)
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0000000000015C44:
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00000000000156FC:
	putchar(10)
	sp_1073 = sp_1073 + 0xFFFFFFFFFFFFFFF8
	word64 a3_1138 = Mem524[sp_1073 + 240:word64]
	branch a3_1138 == 0x0000000000000000 l0000000000015728
// DataOut:
// DataOut (flags):
// SymbolicIn:

l000000000001570C:
	gp = fn000000000001654C(ra, gp, s0_1026, 0x0000000000012000, 0x0000000000011B98, 0x0000000000011B88, a3_1138, a4_1016, a5_1024, a6_1001, a7, s2_1007, s3_1045, out a4_1016, out a5_1024, out a6_1001, out a7)
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0000000000015728:
	word64 a3_1169 = Mem524[sp_1073 + 248:word64]
	branch a3_1169 == 0x0000000000000000 l000000000001574C
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0000000000015730:
	gp = fn000000000001654C(ra, gp, s0_1026, 0x0000000000012000, 0x0000000000011B98, 0x0000000000011BA0, a3_1169, a4_1016, a5_1024, a6_1001, a7, s2_1007, s3_1045, out a4_1016, out a5_1024, out a6_1001, out a7)
// DataOut:
// DataOut (flags):
// SymbolicIn:

l000000000001574C:
	word64 a3_1199 = Mem524[sp_1073 + 224:word64]
	branch a3_1199 == 0x0000000000000000 l000000000001576C
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0000000000015754:
	gp = fn000000000001654C(ra, gp, s0_1026, 0x0000000000012000, 0x0000000000011B08, 0x0000000000011BB0, a3_1199, a4_1016, a5_1024, a6_1001, a7, s2_1007, s3_1045, out a4_1016, out a5_1024, out a6_1001, out a7)
// DataOut:
// DataOut (flags):
// SymbolicIn:

l000000000001576C:
	word64 a3_1228 = Mem524[sp_1073 + 232:word64]
	branch a3_1228 == 0x0000000000000000 l000000000001578C
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0000000000015774:
	word64 a5_2768
	gp = fn000000000001654C(ra, gp, s0_1026, 0x0000000000012000, 0x0000000000011B08, 0x0000000000011BC0, a3_1228, a4_1016, a5_1024, a6_1001, a7, s2_1007, s3_1045, out a4_1016, out a5_2768, out a6_1001, out a7)
// DataOut:
// DataOut (flags):
// SymbolicIn:

l000000000001578C:
	word64 a5_1257 = (int64) Mem524[sp_1073 + 28:int32]
	branch a5_1257 == 0x0000000000000000 l00000000000157A0
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0000000000015794:
	a5_1257 = (int64) Mem524[sp_1073 + 216:int32]
	a4_1016 = 111
	branch a4_1016 >=u a5_1257 l0000000000015E3C
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0000000000015E3C:
	word64 a5_2770
	gp = fn000000000001654C(ra, gp, s0_1026, 0x0000000000012000, 0x0000000000011B08, 0x0000000000011BE0, (int64) (word32) (128 - a5_1257), sp_1073 + 152, a5_1257, a6_1001, a7, s2_1007, s3_1045, out a4_1016, out a5_2770, out a6_1001, out a7)
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00000000000157A0:
	word64 a5_2769
	gp = fn000000000001654C(ra, gp, s0_1026, 0x0000000000012000, 0x0000000000011B08, 0x0000000000011BE0, sp_1073 + 152, a4_1016, a5_1257, a6_1001, a7, s2_1007, s3_1045, out a4_1016, out a5_2769, out a6_1001, out a7)
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00000000000157BC:
	word64 a5_1319 = Mem524[sp_1073 + 120:word64]
	branch a5_1319 == 0x0000000000000000 l0000000000015C08
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0000000000015C08:
	a5_1319 = Mem524[sp_1073 + 136:word64]
	branch a5_1319 != 0x0000000000000000 l00000000000157C4
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0000000000015C10:
	a5_1319 = Mem524[sp_1073 + 144:word64]
	branch a5_1319 != 0x0000000000000000 l00000000000157C4
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0000000000015C18:
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00000000000157C4:
	putchar(10)
	word64 sp_1325 = sp_1073 + 0xFFFFFFFFFFFFFFF8
	word64 a3_1327 = Mem524[sp_1325 + 128:word64]
	branch a3_1327 == 0x0000000000000000 l00000000000157F0
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00000000000157D4:
	gp = fn000000000001654C(ra, gp, s0_1026, 0x0000000000012000, 0x0000000000011B98, 0x0000000000011BF0, a3_1327, a4_1016, a5_1319, a6_1001, a7, s2_1007, s3_1045, out a4_1016, out a5_1319, out a6_1001, out a7)
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00000000000157F0:
	word64 a3_1366 = Mem524[sp_1325 + 120:word64]
	branch a3_1366 == 0x0000000000000000 l0000000000015814
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00000000000157F8:
	gp = fn000000000001654C(ra, gp, s0_1026, 0x0000000000012000, 0x0000000000011B98, 0x0000000000011C00, a3_1366, a4_1016, a5_1319, a6_1001, a7, s2_1007, s3_1045, out a4_1016, out a5_1319, out a6_1001, out a7)
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0000000000015814:
	word64 a3_1396 = Mem524[sp_1325 + 136:word64]
	branch a3_1396 == 0x0000000000000000 l0000000000015838
// DataOut:
// DataOut (flags):
// SymbolicIn:

l000000000001581C:
	gp = fn000000000001654C(ra, gp, s0_1026, 0x0000000000012000, 0x0000000000011B98, 0x0000000000011C10, a3_1396, a4_1016, a5_1319, a6_1001, a7, s2_1007, s3_1045, out a4_1016, out a5_1319, out a6_1001, out a7)
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0000000000015838:
	word64 a3_1426 = Mem524[sp_1325 + 144:word64]
	branch a3_1426 == 0x0000000000000000 l00000000000153DC
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0000000000015840:
	word64 a6_2773
	word64 a5_2772
	word64 a4_2771
	word64 a7_2774
	gp = fn000000000001654C(ra, gp, s0_1026, 0x0000000000012000, 0x0000000000011B98, 0x0000000000011C18, a3_1426, a4_1016, a5_1319, a6_1001, a7, s2_1007, s3_1045, out a4_2771, out a5_2772, out a6_2773, out a7_2774)
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00000000000153D0:
	branch (int64) Mem96[gp + -2028:int32] == 0x0000000000000000 l000000000001556C
// DataOut:
// DataOut (flags):
// SymbolicIn:

l000000000001556C:
	fwrite(0x0000000000011A08, 1, 37, Mem96[gp + -1920:word64])
// DataOut:
// DataOut (flags):
// SymbolicIn:

l000000000001538C:
	branch (int64) Mem90[gp + -2028:int32] != 0x0000000000000000 l00000000000153D8
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00000000000153D8:
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0000000000015394:
	fwrite(0x00000000000119D8, 1, 46, Mem90[gp + -1920:word64])
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00000000000153DC:
	branch a5_7 != Mem1474[gp + -1936:word64] l0000000000015E8C
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0000000000015E8C:
	__stack_chk_fail()
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00000000000153EC:
	return
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0000000000015224:
	branch a0_60 >u 118 l0000000000015200
// DataOut:
// DataOut (flags):
// SymbolicIn:

l000000000001522C:
	word64 a5_1573 = (int64) Mem50[(a0_60 << 0x00000000 >>u 0x0000001E) + 0x00000000000102A0:int32]
	word64 a6_1599
	word64 a7_1600
	word64 t1_1601
	word64 t3_1602
	call a5_1573 (retsize: 0;)
		uses: a0:a0_60,a1:a1,a4:0x00000000000102A0,a5:a5_1573,a6:a6_1599,a7:a7_1600,gp:gp,ra:ra,s0:s0_42,s1:0x00000000000108E0,s10:s10_45,s11:s11,s2:a1,s3:a0,s4:0x0000000000012000,s5:s5,s6:s6_43,s7:s7_49,s8:0x0000000000001000,s9:s9_44,sp:sp_62,t1:t1_1601,t3:t3_1602
		defs: a6:a6_1599,a7:a7_1600,t1:t1_1601,t3:t3_1602
	return
// DataOut:
// DataOut (flags):
// SymbolicIn:

fn0000000000015180_exit:
// DataOut:
// DataOut (flags):
// SymbolicIn:



void fn0000000000015EB8(word64 a0, word32 dwArg00)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  a0:[0..31] Stack +0000:[0..31]
// LiveOut:
// Trashed: a0 a1 a2 a3 a4 a5 a6 gp sp
// Preserved:
fn0000000000015EB8_entry:
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0000000000015EB8:
	__libc_start_main(0x0000000000015180, qwArg00, fp + 8, 0x00000000000182E8, 0x0000000000018378, a0, fp & -16)
	return
// DataOut:
// DataOut (flags):
// SymbolicIn:

fn0000000000015EB8_exit:
// DataOut:
// DataOut (flags):
// SymbolicIn:



void fn0000000000015EF0()
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse: 
// LiveOut:
// Trashed: a0 a4 a5 ra t1
// Preserved: sp
fn0000000000015EF0_entry:
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0000000000015EF0:
	branch true l0000000000015F20
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0000000000015F0C:
	branch 0x0000000000000000 == 0x0000000000000000 l0000000000015F20
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0000000000015F20:
	return
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0000000000015F18:
	word64 t1_16
	word64 ra_17
	call 0x0000000000000000 (retsize: 0;)
		uses: a0:0x00000000000102A0,ra:ra_17,sp:fp,t1:t1_16
		defs: ra:ra_17,t1:t1_16
	return
// DataOut:
// DataOut (flags):
// SymbolicIn:

fn0000000000015EF0_exit:
// DataOut:
// DataOut (flags):
// SymbolicIn:



void fn0000000000015F24()
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse: 
// LiveOut:
// Trashed: a0 a1 a5 t1
// Preserved: sp
fn0000000000015F24_entry:
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0000000000015F24:
	branch 0 == 0x0000000000000000 l0000000000015F60
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0000000000015F4C:
	branch 0x0000000000000000 == 0x0000000000000000 l0000000000015F60
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0000000000015F60:
	return
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0000000000015F58:
	word64 t1_19
	call 0x0000000000000000 (retsize: 0;)
		uses: a0:0x00000000000102A0,sp:fp,t1:t1_19
		defs: t1:t1_19
	return
// DataOut:
// DataOut (flags):
// SymbolicIn:

fn0000000000015F24_exit:
// DataOut:
// DataOut (flags):
// SymbolicIn:



void fn0000000000015F64(word64 gp)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  gp:[0..63]
// LiveOut:
// Trashed: a0 a4 a5 t1
// Preserved: ra s0 sp
fn0000000000015F64_entry:
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0000000000015F64:
	branch (int64) Mem5[gp + -1900:byte] != 0x0000000000000000 l0000000000015F84
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0000000000015F78:
	fn0000000000015EF0()
	Mem16[gp + 2196:byte] = 0x01
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0000000000015F84:
	return
// DataOut:
// DataOut (flags):
// SymbolicIn:

fn0000000000015F64_exit:
// DataOut:
// DataOut (flags):
// SymbolicIn:



void fn0000000000015F94(word64 ra)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  ra:[0..63]
// LiveOut:
// Trashed: a0 a1 a5 t1
// Preserved: ra sp
fn0000000000015F94_entry:
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0000000000015F94:
	branch Mem0[0x0000000000019E28:word64] != 0x0000000000000000 l0000000000015FA8
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0000000000015FA8:
	branch 0x0000000000000000 == 0x0000000000000000 l0000000000015FA4
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0000000000015FB4:
	call 0x0000000000000000 (retsize: 0;)
		uses: ra:ra,sp:fp + -16,Stack +0008:ra
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0000000000015FC8_thunk_fn0000000000015F24:
	fn0000000000015F24()
	return
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0000000000015FA4:
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0000000000015FA4_thunk_fn0000000000015F24:
	fn0000000000015F24()
	return
// DataOut:
// DataOut (flags):
// SymbolicIn:

fn0000000000015F94_exit:
// DataOut:
// DataOut (flags):
// SymbolicIn:



void fn0000000000015FCC(word64 gp, word64 a0)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  a0:[0..63] gp:[0..63]
// LiveOut:
// Trashed: a0 a1 a2 a3 ra s0 sp
// Preserved:
fn0000000000015FCC_entry:
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0000000000015FCC:
	word64 a3_9 = Mem7[gp + -1920:word64]
	branch a0 != 0x0000000000000000 l0000000000016090
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0000000000016090:
	fwrite(0x0000000000010BE0, 1, 26, a3_9)
	fwrite(0x0000000000010C00, 1, 54, Mem7[gp + -1920:word64])
	fwrite(0x0000000000010C38, 1, 77, Mem7[gp + -1920:word64])
	fwrite(0x0000000000010C88, 1, 62, Mem7[gp + -1920:word64])
	fwrite(0x0000000000010CC8, 1, 79, Mem7[gp + -1920:word64])
	fwrite(0x0000000000010D18, 1, 79, Mem7[gp + -1920:word64])
	fwrite(0x0000000000010D68, 1, 42, Mem7[gp + -1920:word64])
	fwrite(0x0000000000010D98, 1, 76, Mem7[gp + -1920:word64])
	fwrite(0x0000000000010DE8, 1, 77, Mem7[gp + -1920:word64])
	fwrite(0x0000000000010E38, 1, 77, Mem7[gp + -1920:word64])
	fputc(10, Mem7[gp + -1920:word64])
	fwrite(0x0000000000010E88, 1, 23, Mem7[gp + -1920:word64])
	fwrite(0x0000000000010EA0, 1, 71, Mem7[gp + -1920:word64])
	fwrite(0x0000000000010EE8, 1, 57, Mem7[gp + -1920:word64])
	fwrite(0x0000000000010F28, 1, 58, Mem7[gp + -1920:word64])
	fwrite(0x0000000000010F68, 1, 57, Mem7[gp + -1920:word64])
	fwrite(0x0000000000010FA8, 1, 77, Mem7[gp + -1920:word64])
	fwrite(0x0000000000010FF8, 1, 77, Mem7[gp + -1920:word64])
	fwrite(0x0000000000011048, 1, 77, Mem7[gp + -1920:word64])
	fwrite(0x0000000000011098, 1, 46, Mem7[gp + -1920:word64])
	fwrite(0x00000000000110C8, 1, 72, Mem7[gp + -1920:word64])
	fwrite(0x0000000000011118, 1, 45, Mem7[gp + -1920:word64])
	fwrite(0x0000000000011148, 1, 67, Mem7[gp + -1920:word64])
	fwrite(0x0000000000011190, 1, 64, Mem7[gp + -1920:word64])
	fwrite(0x00000000000111D8, 1, 72, Mem7[gp + -1920:word64])
	fwrite(0x0000000000011228, 1, 46, Mem7[gp + -1920:word64])
	fputc(10, Mem7[gp + -1920:word64])
	fwrite(0x0000000000011258, 1, 15, Mem7[gp + -1920:word64])
	fwrite(0x0000000000011268, 1, 87, Mem7[gp + -1920:word64])
	fwrite(0x00000000000112C0, 1, 60, Mem7[gp + -1920:word64])
	fwrite(0x0000000000011300, 1, 68, Mem7[gp + -1920:word64])
	fwrite(0x0000000000011348, 1, 58, Mem7[gp + -1920:word64])
	fwrite(0x0000000000011388, 1, 57, Mem7[gp + -1920:word64])
	fwrite(0x00000000000113C8, 1, 62, Mem7[gp + -1920:word64])
	return
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0000000000015FE0:
	fwrite(0x0000000000011408, 1, 77, a3_9)
	fwrite(0x0000000000011458, 1, 62, Mem7[gp + -1920:word64])
	fwrite(0x0000000000011498, 1, 65, Mem7[gp + -1920:word64])
	fwrite(0x00000000000114E0, 1, 76, Mem7[gp + -1920:word64])
	fwrite(0x0000000000011530, 1, 65, Mem7[gp + -1920:word64])
	fwrite(0x0000000000011578, 1, 41, Mem7[gp + -1920:word64])
	fwrite(0x00000000000115A8, 1, 30, Mem7[gp + -1920:word64])
	return
// DataOut:
// DataOut (flags):
// SymbolicIn:

fn0000000000015FCC_exit:
// DataOut:
// DataOut (flags):
// SymbolicIn:



word64 fn00000000000163B0(word64 gp)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  gp:[0..63]
// LiveOut: a0
// Trashed: a0 a1 a2 a3 a4 a5
// Preserved: ra s0 s1 s2 s3 s4 s5 s6 s7 s8 s9 sp
fn00000000000163B0_entry:
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00000000000163B0:
	word64 a5_27 = Mem25[gp + -1936:word64]
	__sprintf_chk(fp + -232, 1, 128, 0x00000000000115C8, 0x00000000)
	word64 s3_37 = 16
	word64 s0_38 = 1
	word64 s1_43 = fp + 0xFFFFFFFFFFFFFF12
	word64 s6_44 = 128
	word64 s5_45 = 1
	word64 s9_46 = 15
	word64 s7_47 = 58
	branch s3_37 == 1 l000000000001646C
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0000000000016430:
	__sprintf_chk(s1_43, s5_45, s6_44, 0x00000000000115C8, 0x00000000)
	word64 a4_64 = s1_43 + 2
	branch (s0_38 & 1) == 0x0000000000000000 l00000000000164B8
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00000000000164B8:
	s1_43 = a4_64
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0000000000016454:
	branch s0_38 == s9_46 l00000000000164C4
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00000000000164C4:
	s1_43 = a4_64
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0000000000016458:
	Mem70[s1_43 + 2:byte] = (byte) s7_47
	s1_43 = s1_43 + 3
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0000000000016464:
	s0_38 = (int64) ((word32) s0_38 + 1)
	branch s0_38 != s3_37 l0000000000016430
// DataOut:
// DataOut (flags):
// SymbolicIn:

l000000000001646C:
	Mem79[s1_43:byte] = 0x00
	word64 a0_83 = __strdup(fp - 224)
	branch a5_27 != Mem79[gp + -1936:word64] l00000000000164CC
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00000000000164CC:
	__stack_chk_fail()
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0000000000016484:
	return a0_83
// DataOut:
// DataOut (flags):
// SymbolicIn:

fn00000000000163B0_exit:
// DataOut:
// DataOut (flags):
// SymbolicIn:



word64 fn00000000000164D0(word64 a0, word64 a1)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  a0:[0..31] a1:[0..63]
// LiveOut: a0
// Trashed: a0 a1 a2
// Preserved: ra s0 s1 s2 sp
fn00000000000164D0_entry:
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00000000000164D0:
	word64 a0_21
	word64 a0_19 = (uint64) (uint32) open(0x00000000000115D0, 0)
	branch a0_19 < 0x0000000000000000 l0000000000016544
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0000000000016544:
	a0_21 = -1
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0000000000016500:
	word64 a0_26 = (uint64) (uint32) read(a0_19, a0, a1 << 0x00000000 >>u 0x00000000)
	close(a0_19)
	a0_21 = (int64) (word32) (0x0000000000000000 - (word64) ((int64) ((word32) (a0_26 - a1)) != 0x0000000000000000))
// DataOut:
// DataOut (flags):
// SymbolicIn:

l000000000001652C:
	return a0_21
// DataOut:
// DataOut (flags):
// SymbolicIn:

fn00000000000164D0_exit:
// DataOut:
// DataOut (flags):
// SymbolicIn:



word64 fn000000000001654C(word64 ra, word64 gp, word64 s0, word64 s1, word64 a0, word64 a1, word64 a3, word64 a4, word64 a5, word64 a6, word64 a7, word64 s2, word64 s3, ptr64 & a4Out, ptr64 & a5Out, ptr64 & a6Out, ptr64 & a7Out)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  a0:[0..63] a1:[0..63] a3:[0..63] a4:[0..63] a5:[0..63] a6:[0..63] a7:[0..63] gp:[0..63] ra:[0..63] s0:[0..63] s1:[0..63] s2:[0..63] s3:[0..63]
// LiveOut: a4 a5 a6 a7 gp
// Trashed: a0 a1 a2 a3 a4 a5 a6 a7 gp t1 t3
// Preserved: ra s0 s1 s2 s3 sp
fn000000000001654C_entry:
// DataOut:
// DataOut (flags):
// SymbolicIn:

l000000000001654C:
	word64 t3_7 = Mem5[gp + -1936:word64]
	word64 sp_37
	word64 gp_40
	word64 s2_42
	word64 s3_43
	word64 a0_45
	word64 a6_51
	word64 a7_52
	call __vasprintf_chk (retsize: 0;)
		uses: a0:fp + -112,a1:1,a3:fp + -40,a4:a4,a5:a5,a6:a6,a7:a7,gp:gp,ra:ra,s0:s0,s1:s1,s2:a1,s3:a0,sp:fp + -128,Stack +0008:fp + -40,Stack +0010:0x0000000000000000,Stack +0018:t3_7,Stack +0028:s3,Stack +0030:s2,Stack +0038:s1,Stack +0040:s0,Stack +0048:ra,Stack +0058:a3,Stack +0060:a4,Stack +0068:a5,Stack +0070:a6,Stack +0078:a7,t1:fp + -40,t3:t3_7
		defs: a0:a0_45,a6:a6_51,a7:a7_52,gp:gp_40,s2:s2_42,s3:s3_43,sp:sp_37
	branch a0_45 < 0x0000000000000000 l00000000000165D8
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00000000000165A8:
	fputs(s2_42, Mem36[gp_40 + -1912:word64])
	word64 sp_57 = sp_37 + 0xFFFFFFFFFFFFFFF8
	branch (int64) Mem36[gp_40 + -2032:int32] != 0x0000000000000000 l000000000001661C
// DataOut:
// DataOut (flags):
// SymbolicIn:

l000000000001661C:
	fputs(s3_43, Mem36[gp_40 + -1912:word64])
	sp_57 = sp_37 + 0xFFFFFFFFFFFFFFF0
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00000000000165BC:
	fputs(Mem36[sp_57 + 16:word64], Mem36[gp_40 + -1912:word64])
	word64 sp_69 = sp_57 + 0xFFFFFFFFFFFFFFF8
	branch (int64) Mem36[gp_40 + -2032:int32] != 0x0000000000000000 l0000000000016600
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0000000000016600:
	fwrite(0x00000000000115E0, 1, 4, Mem36[gp_40 + -1912:word64])
	sp_69 = sp_69 + 0xFFFFFFFFFFFFFFF8
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00000000000165D0:
	free(Mem36[sp_69 + 16:word64])
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00000000000165D8:
	word64 a5_87 = Mem36[gp_40 + -1936:word64]
	branch t3_7 != a5_87 l000000000001662C
// DataOut:
// DataOut (flags):
// SymbolicIn:

l000000000001662C:
	__stack_chk_fail()
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00000000000165E4:
	a4Out = t3_7
	a5Out = a5_87
	a6Out = a6_51
	a7Out = a7_52
	return gp_40
// DataOut:
// DataOut (flags):
// SymbolicIn:

fn000000000001654C_exit:
// DataOut:
// DataOut (flags):
// SymbolicIn:



word64 fn0000000000016630(word64 gp, word64 a0, word64 a1, ptr64 & s1Out, ptr64 & a0Out)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  a0:[0..63] a1:[0..63] gp:[0..63]
// LiveOut: a0 s1 sp
// Trashed: a0 a1 a2 a3 a4 a5 ra s0 s1 s2 s3 sp
// Preserved:
fn0000000000016630_entry:
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0000000000016630:
	word64 a5_33
	word64 a0_22 = __errno_location()
	Mem24[a0_22:word32] = 0x00000000
	word64 a0_29 = (uint64) (uint32) strtol(a0)
	branch qwLoc50 == 0x0000000000000000 l000000000001668C
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0000000000016680:
	branch a0 == qwLoc50 l000000000001668C
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0000000000016684:
	branch (int64) Mem24[qwLoc50:byte] == 0x0000000000000000 l00000000000166C4
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00000000000166C4:
	a5_33 = (int64) Mem24[a0_22:int32]
	branch a5_33 != 0x0000000000000000 l0000000000016690
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00000000000166CC:
	word64 a4_34 = (int64) (word32) a0_29
	branch a0_29 != a4_34 l00000000000166E0
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00000000000166E0:
	a5_33 = -34
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00000000000166D8:
	Mem37[a1:word32] = (word32) a4_34
// DataOut:
// DataOut (flags):
// SymbolicIn:

l000000000001668C:
	a5_33 = (int64) Mem24[a0_22:int32]
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0000000000016690:
	branch a5_33 <= 0x0000000000000000 l00000000000166E8
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00000000000166E8:
	a5_33 = -22
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0000000000016694:
	a5_33 = (int64) (word32) (0x0000000000000000 - a5_33)
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0000000000016698:
	branch qwLoc48 != Mem47[gp + -1936:word64] l00000000000166F0
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00000000000166F0:
	__stack_chk_fail()
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00000000000166A8:
	s1Out = s3
	a0Out = a5_33
	return fp + 0xFFFFFFFFFFFFFFF0
// DataOut:
// DataOut (flags):
// SymbolicIn:

fn0000000000016630_exit:
// DataOut:
// DataOut (flags):
// SymbolicIn:



word64 fn00000000000166F4(word64 gp, word64 a0, word64 a1, word64 a2)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  a0:[0..63] a1:[0..63] a2:[0..63] gp:[0..63]
// LiveOut: a0
// Trashed: a0 a1 a2 a3 a4 a5
// Preserved: ra s0 s1 s2 s3 s4 sp
fn00000000000166F4_entry:
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00000000000166F4:
	word64 a0_104
	word64 sp_46
	word64 sp_29 = fp + -64
	word64 a5_7 = Mem5[gp + -1936:word64]
	word64 s1_21 = a0
	branch (int64) Mem9[a0:int32] != 0x0000000000000000 l00000000000167C8
// DataOut:
// DataOut (flags):
// SymbolicIn:

l000000000001672C:
	sp_29 = fp + 0xFFFFFFFFFFFFFFB8
	branch strchr(a1, 46) == 0x0000000000000000 l00000000000167C8
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00000000000167C8:
	word64 a0_35
	sp_46 = fn0000000000016630(gp, a1, sp_29, out s1_21, out a0_35)
	branch a0_35 == 0x0000000000000000 l0000000000016794
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00000000000167D8:
// DataOut:
// DataOut (flags):
// SymbolicIn:

l000000000001673C:
	sp_46 = fp + 0xFFFFFFFFFFFFFFB0
	branch (uint64) (uint32) inet_pton(2, a1, fp + 0xFFFFFFFFFFFFFFB8) == 0x0000000000000000 l000000000001678C
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0000000000016750:
	word64 a3_54
	word64 a4_239
	word64 a0_53 = fn00000000000182B4((int64) dwLoc50, out a3_54, out a4_239)
	branch a0_53 == 0x0000000000000000 l0000000000016790
// DataOut:
// DataOut (flags):
// SymbolicIn:

l000000000001675C:
	branch (a0_53 & 1) != 0x0000000000000000 l0000000000016778
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0000000000016764:
	word64 a5_59 = (int64) (word32) (a0_53 >>u 1)
	branch a5_59 == 0x0000000000000000 l0000000000016790
// DataOut:
// DataOut (flags):
// SymbolicIn:

l000000000001676C:
	branch (a5_59 & 1) == 0x0000000000000000 l0000000000016820
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0000000000016820:
	a0_53 = (int64) (word32) (a0_53 >>u 2)
	branch a0_53 != 0x0000000000000000 l000000000001675C
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0000000000016828:
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0000000000016774:
	a0_53 = a5_59
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0000000000016778:
	a0_53 = (int64) (word32) (a0_53 >>u 1)
	branch a0_53 == 0x0000000000000000 l0000000000016790
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0000000000016784:
	branch (a0_53 & 1) != 0x0000000000000000 l0000000000016778
// DataOut:
// DataOut (flags):
// SymbolicIn:

l000000000001678C:
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0000000000016790:
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0000000000016794:
	word64 a5_79 = (int64) Mem77[sp_46:int32]
	branch a2 == 0x0000000000000000 l00000000000167DC
// DataOut:
// DataOut (flags):
// SymbolicIn:

l000000000001679C:
	branch a5_79 <= 32 l00000000000167DC
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00000000000167DC:
	a0_104 = a5_79
	branch a5_79 < 0x0000000000000000 l00000000000167C0
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00000000000167E4:
	branch (int64) Mem77[s1_21:int32] != 0x0000000000000000 l00000000000167B8
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00000000000167EC:
	branch a5_79 > 32 l00000000000167C0
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00000000000167A8:
	branch (int64) Mem77[s1_21:int32] != 0x0000000000000000 l00000000000167B8
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00000000000167B0:
	Mem101[s1_21:word32] = 0x00000001
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00000000000167B8:
	a0_104 = a5_79
	branch a5_79 <= 128 l00000000000167F4
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00000000000167C0:
	a0_104 = -1
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00000000000167F4:
	branch a5_7 != Mem109[gp + -1936:word64] l000000000001682C
// DataOut:
// DataOut (flags):
// SymbolicIn:

l000000000001682C:
	__stack_chk_fail()
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0000000000016800:
	return a0_104
// DataOut:
// DataOut (flags):
// SymbolicIn:

fn00000000000166F4_exit:
// DataOut:
// DataOut (flags):
// SymbolicIn:



word64 fn0000000000016830(word64 gp, word64 a0)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  a0:[0..63] gp:[0..63]
// LiveOut: a0
// Trashed: a0 a4 a5
// Preserved: ra s0 sp
fn0000000000016830_entry:
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0000000000016830:
	word64 a5_7 = Mem5[gp + -1936:word64]
	branch a0 == 0x0000000000000000 l0000000000016864
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0000000000016864:
	branch a5_7 != Mem11[gp + -1936:word64] l0000000000016884
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0000000000016884:
	__stack_chk_fail()
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0000000000016874:
	return 0
// DataOut:
// DataOut (flags):
// SymbolicIn:

fn0000000000016830_exit:
// DataOut:
// DataOut (flags):
// SymbolicIn:

l000000000001684C:
// DataOut:
// DataOut (flags):
// SymbolicIn:



void fn00000000000168B8(word64 gp, word64 a1)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  a1:[0..63] gp:[0..63]
// LiveOut:
// Trashed: a0 a4 a5
// Preserved: ra s0 sp
fn00000000000168B8_entry:
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00000000000168B8:
	fn0000000000016830(gp, a1)
	return
// DataOut:
// DataOut (flags):
// SymbolicIn:

fn00000000000168B8_exit:
// DataOut:
// DataOut (flags):
// SymbolicIn:



word64 fn00000000000168E4(word64 gp, word64 a0, word64 a1)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  a0:[0..63] a1:[0..63] gp:[0..63]
// LiveOut: a0
// Trashed: a0 a1 a2 a3 a5 a6 a7 t1 t3 t4 t5
// Preserved: ra s0 s1 sp
fn00000000000168E4_entry:
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00000000000168E4:
	word64 a0_59
	word64 a0_35
	word64 a4_7 = Mem5[gp + -1936:word64]
	branch a0 == 2 l0000000000016984
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0000000000016984:
	a0_35 = (uint64) (uint32) getnameinfo(fp + -88, 16, gp + -1896, 1025, 0, 0, 0)
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0000000000016908:
	branch a0 == 10 l0000000000016934
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0000000000016934:
	memcpy(fp + -64, a1, 16)
	a0_35 = (uint64) (uint32) getnameinfo(fp + 0xFFFFFFFFFFFFFFB0, 28, gp + -1896, 1025, 0, 0, 0)
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0000000000016974:
	branch a0_35 != 0x0000000000000000 l0000000000016910
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0000000000016978:
	a0_59 = __strdup(gp + -1896)
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0000000000016910:
	a0_59 = 0
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0000000000016914:
	branch a4_7 != Mem65[gp + -1936:word64] l00000000000169D4
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00000000000169D4:
	__stack_chk_fail()
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0000000000016920:
	return a0_59
// DataOut:
// DataOut (flags):
// SymbolicIn:

fn00000000000168E4_exit:
// DataOut:
// DataOut (flags):
// SymbolicIn:



word64 fn00000000000169D8(word64 gp, word64 a1)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  a1:[0..31] gp:[0..63]
// LiveOut: a0
// Trashed: a0 a1 a2 a3 a4 a5
// Preserved: ra s0 s1 s2 s3 s4 sp
fn00000000000169D8_entry:
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00000000000169D8:
	word64 a0_111
	word64 a5_7 = Mem5[gp + -1936:word64]
	word64 sp_34 = fp + 0xFFFFFFFFFFFFFF88
	branch (uint64) (uint32) getaddrinfo(a1, 0, fp + -104, fp + -112) != 0x0000000000000000 l0000000000016AD8
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0000000000016AD8:
	a0_111 = 0
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0000000000016A34:
	word64 s0_36 = qwLoc78
	branch qwLoc78 == 0x0000000000000000 l0000000000016AA0
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0000000000016A3C:
	word64 s3_38 = 2
	word64 s2_39 = 64
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0000000000016A68:
	word64 a0_42 = (int64) Mem32[s0_36 + 4:int32]
	word64 a1_43 = Mem32[s0_36 + 24:word64]
	branch a0_42 != s3_38 l0000000000016A4C
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0000000000016A4C:
	sp_34 = sp_34 + 0xFFFFFFFFFFFFFFF8
	branch inet_ntop(a0_42, a1_43 + 8, gp + -864, s2_39) != 0x0000000000000000 l0000000000016A88
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0000000000016A74:
	sp_34 = sp_34 + 0xFFFFFFFFFFFFFFF8
	branch inet_ntop(a0_42, a1_43 + 4, gp + -864, s2_39) == 0x0000000000000000 l0000000000016A60
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0000000000016A60:
	s0_36 = Mem32[s0_36 + 40:word64]
	branch s0_36 == 0x0000000000000000 l0000000000016A9C
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0000000000016A9C:
	s0_36 = Mem32[sp_34:word64]
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0000000000016AA0:
	freeaddrinfo(s0_36)
	a0_111 = 0
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0000000000016A88:
	freeaddrinfo(Mem32[sp_34:word64])
	a0_111 = __strdup(gp + -864)
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0000000000016AAC:
	branch a5_7 != Mem32[gp + -1936:word64] l0000000000016AE0
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0000000000016AE0:
	__stack_chk_fail()
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0000000000016AB8:
	return a0_111
// DataOut:
// DataOut (flags):
// SymbolicIn:

fn00000000000169D8_exit:
// DataOut:
// DataOut (flags):
// SymbolicIn:



void fn0000000000016B38(word64 a0)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  a0:[0..63]
// LiveOut:
// Trashed: a0 a5
// Preserved: sp
fn0000000000016B38_entry:
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0000000000016B38:
	branch a0 >u 127 l0000000000016B5C
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0000000000016B5C:
	return
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0000000000016B40:
	return
// DataOut:
// DataOut (flags):
// SymbolicIn:

fn0000000000016B38_exit:
// DataOut:
// DataOut (flags):
// SymbolicIn:



word64 fn0000000000016B68(word64 a0)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  a0:[0..63]
// LiveOut: a0
// Trashed: a0 a1 a2 a3 a4 a5 a6
// Preserved: ra sp
fn0000000000016B68_entry:
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0000000000016B68:
	word64 a4_100
	word64 a3_8
	word64 a4_137
	word64 a0_7 = fn00000000000182B4(a0, out a3_8, out a4_137)
	word64 a5_11 = (int64) (word32) (a0_7 >>u 24)
	branch a5_11 == 0x0000000000000000 l0000000000016BD8
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0000000000016BD8:
	a4_100 = 0x00000000000115E8
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0000000000016B7C:
	branch a5_11 == 10 l0000000000016C2C
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0000000000016B84:
	word64 a4_16 = (int64) (word32) (a0_7 >>u 16)
	branch a5_11 == 100 l0000000000016C58
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0000000000016C58:
	branch (a4_16 & 192) != 64 l0000000000016BC0
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0000000000016C64:
	a4_100 = 0x0000000000011618
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0000000000016B90:
	branch a5_11 == 127 l0000000000016C70
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0000000000016C70:
	a4_100 = 0x0000000000011630
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0000000000016B98:
	word64 a2_24 = (int64) (word32) (a0_7 >>u 8)
	branch a5_11 == 169 l0000000000016C44
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0000000000016C44:
	branch (a4_16 & 255) != 254 l0000000000016BC0
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0000000000016C4C:
	a4_100 = 0x0000000000011640
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0000000000016BAC:
	branch a5_11 != 172 l0000000000016BF0
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0000000000016BF0:
	branch a5_11 != 192 l0000000000016C7C
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0000000000016C7C:
	branch a5_11 != 203 l0000000000016D18
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0000000000016D18:
	word64 a2_34 = 255
	branch a5_11 != a2_34 l0000000000016D4C
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0000000000016D4C:
	branch a5_11 != 198 l0000000000016BC0
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0000000000016D54:
	a4_100 = 0x0000000000011650
	branch (a4_16 & 254) != 18 l0000000000016BE0
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0000000000016D68:
	a4_100 = 0x0000000000011738
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0000000000016D20:
	a4_100 = 0x0000000000011710
	branch (a4_16 & 255) != a5_11 l0000000000016BE0
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0000000000016D2C:
	a4_100 = 0x0000000000011710
	branch (a2_24 & 255) != a2_34 l0000000000016BE0
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0000000000016D38:
	branch (a0_7 & a2_34) != (a2_24 & 255) l0000000000016BE0
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0000000000016D40:
	a4_100 = 0x0000000000011720
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0000000000016C84:
	branch (a4_16 & 255) != 0x0000000000000000 l0000000000016BC0
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0000000000016C88:
	branch (a2_24 & 255) != 113 l0000000000016BC0
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0000000000016C90:
	a4_100 = 0x00000000000116C0
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0000000000016BF8:
	branch ((a4_16 | a2_24) & 255) == 0x0000000000000000 l0000000000016CD0
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0000000000016CD0:
	a4_100 = 0x0000000000011660
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0000000000016C04:
	branch (a4_16 & 255) == 2 l0000000000016CDC
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0000000000016CDC:
	branch (a2_24 & 255) != 0x0000000000000000 l0000000000016BC0
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0000000000016CE0:
	a4_100 = 0x0000000000011680
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0000000000016C0C:
	branch (a4_16 & 255) == 51 l0000000000016C9C
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0000000000016C9C:
	branch (a2_24 & 255) != 100 l0000000000016BC0
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0000000000016CA4:
	a4_100 = 0x00000000000116A0
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0000000000016C14:
	branch (a4_16 & 255) == 88 l0000000000016CB0
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0000000000016CB0:
	branch (a2_24 & 255) == 99 l0000000000016D00
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0000000000016D00:
	a4_100 = 0x00000000000116E0
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0000000000016C1C:
	branch (a4_16 & 255) == 52 l0000000000016CEC
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0000000000016CEC:
	branch (a2_24 & 255) != 193 l0000000000016BC0
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0000000000016CF4:
	a4_100 = 0x0000000000011708
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0000000000016C24:
	branch (a4_16 & 255) != 168 l0000000000016BC0
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0000000000016BB4:
	branch (a4_16 & 240) == 16 l0000000000016C2C
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0000000000016C2C:
	return 0x0000000000011608
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0000000000016BC0:
	branch (int64) ((word32) a5_11 + -224) >u 15 l0000000000016CB8
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0000000000016CB8:
	branch (a5_11 & 240) == 240 l0000000000016D0C
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0000000000016D0C:
	a4_100 = 0x0000000000011710
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0000000000016CC4:
	a4_100 = 0x0000000000011650
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0000000000016BCC:
	a4_100 = 0x0000000000011748
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0000000000016BE0:
	return a4_100
// DataOut:
// DataOut (flags):
// SymbolicIn:

fn0000000000016B68_exit:
// DataOut:
// DataOut (flags):
// SymbolicIn:



word64 fn0000000000016D74(word64 ra, word64 gp, word64 a0, word64 a1, word64 a2, word64 a3, ptr64 & a4Out)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  a0:[0..63] a1:[0..63] a2:[0..63] a3:[0..63] gp:[0..63] ra:[0..63]
// LiveOut: a0 a4
// Trashed: a0 a1 a2 a4 a5
// Preserved: a3 a6 a7 fa3 fa4 fa5 gp ra s0 s1 s2 s3 s4 s5 s6 s7 s8 sp t1 t3 t4 t5
fn0000000000016D74_entry:
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0000000000016D74:
	word64 a0_385
	word64 a5_7 = Mem5[gp + -1936:word64]
	memset(a2, 0, 200)
	word64 s6_11 = a2
	word64 s5_123 = a1
	word64 sp_108 = fp + 0xFFFFFFFFFFFFFE30
	branch (uint64) (uint32) inet_pton(2, a0, fp + 0xFFFFFFFFFFFFFE40) <= 0x0000000000000000 l0000000000016E60
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0000000000016E60:
	branch (int64) Mem37[gp + -2028:int32] != 0x0000000000000000 l0000000000016E20
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0000000000016E68:
	__fprintf_chk(Mem37[gp + -1920:word64], 1, 0x0000000000011788, 0x00000000)
	a0_385 = -1
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0000000000016DDC:
	word64 a0_146
	branch a1 < 0x0000000000000000 l0000000000016E88
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0000000000016E88:
	s5_123 = 32
	branch a3 << 0x0000000D >= 0x0000000000000000 l0000000000016EBC
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0000000000016E94:
	word64 a4_758
	word64 a3_757
	word64 a0_58 = fn00000000000182B4((int64) dwLoc01C8, out a3_757, out a4_758)
	s5_123 = 8
	word64 a5_62 = (int64) (word32) (a0_58 >>u 24)
	branch a0_58 >= 0x0000000000000000 l0000000000016EBC
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0000000000016EA8:
	s5_123 = 24
	branch (int64) ((word32) a5_62 + -128) >u 63 l0000000000016EBC
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0000000000016EB8:
	s5_123 = 16
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0000000000016DE0:
	word64 a0_68 = a0
	word64 s0_101 = 3
	word64 s2_70 = 46
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0000000000016DF0:
	word64 a0_74 = strchr(a0_68, s2_70)
	sp_108 = sp_108 + 0xFFFFFFFFFFFFFFF8 + 48
	Mem77[sp_108 + 48:word64] = a0_74
	branch a0_74 == 0x0000000000000000 l0000000000017194
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0000000000017194:
	word64 s3_79 = 1
	word64 s2_80 = -1
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00000000000171A0:
	sp_108 = sp_108 + 0xFFFFFFFFFFFFFFF8
	branch (uint64) (uint32) __asprintf_chk(sp_108 + 0, s3_79, 0x00000000000117A8, 0x00000000) == s2_80 l00000000000172BC
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00000000000172BC:
	a0_146 = Mem77[gp + -1920:word64]
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00000000000171B8:
	s0_101 = (int64) ((word32) s0_101 + -1)
	branch s0_101 != 0x0000000000000000 l00000000000171A0
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00000000000171C4:
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0000000000016E00:
	Mem100[sp_108 + 48:word64] = a0_74 + 1
	a0_68 = a0_74 + 1
	s0_101 = (int64) ((word32) s0_101 + -1)
	branch s0_101 != 0x0000000000000000 l0000000000016DF0
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0000000000016E10:
	branch a1 <= 32 l0000000000016EBC
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0000000000016EBC:
	word64 sp_114 = sp_108 + 0xFFFFFFFFFFFFFFF8
	branch inet_ntop(2, sp_108 + 8, sp_108 + 56, 47) == 0x0000000000000000 l0000000000017074
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0000000000016ED4:
	Mem122[a2:word64] = __strdup(sp_114 + 56)
	Mem131[sp_114 + 0x0000000000000008:word32] = (word32) fn0000000000016830(gp, s5_123)
	Mem136[sp_114 + 0x0000000000000030:word64] = 0x0000000000000000
	Mem137[sp_114 + 0x0000000000000038:word64] = 0x0000000000000000
	Mem138[sp_114 + 0x0000000000000040:word64] = 0x0000000000000000
	Mem139[sp_114 + 0x0000000000000048:word64] = 0x0000000000000000
	Mem140[sp_114 + 0x0000000000000050:word64] = 0x0000000000000000
	Mem141[sp_114 + 0x0000000000000058:word32] = 0x00000000
	Mem142[sp_114 + 0x000000000000005C:word16] = 0x0000
	Mem143[sp_114 + 0x000000000000005E:byte] = 0x00
	branch inet_ntop(2, sp_114 + 0x0000000000000008, sp_114 + 0x0000000000000030, 16) == 0x0000000000000000 l0000000000017300
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0000000000017300:
	a0_146 = Mem143[gp + -1920:word64]
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0000000000016F24:
	Mem151[a2 + 48:word64] = __strdup(sp_114 + 0x0000000000000028)
	word64 s0_152 = (int64) Mem151[sp_114 + 0xFFFFFFFFFFFFFFF0:int32]
	Mem153[a2 + 160:word32] = (word32) s5_123
	Mem164[sp_114 + 0x0000000000000008:word32] = (word32) (fn0000000000016830(gp, s5_123) ^ -1 | s0_152)
	Mem165[sp_114 + 0x0000000000000020:word64] = 0x0000000000000000
	Mem166[sp_114 + 0x0000000000000028:word64] = 0x0000000000000000
	Mem167[sp_114 + 0x0000000000000030:word64] = 0x0000000000000000
	Mem168[sp_114 + 0x0000000000000038:word64] = 0x0000000000000000
	Mem169[sp_114 + 0x0000000000000040:word64] = 0x0000000000000000
	Mem170[sp_114 + 0x0000000000000048:word32] = 0x00000000
	Mem171[sp_114 + 0x000000000000004C:word16] = 0x0000
	Mem172[sp_114 + 0x000000000000004E:byte] = 0x00
	branch inet_ntop(2, sp_114 + 0x0000000000000008, sp_114 + 0x0000000000000020, 16) == 0x0000000000000000 l00000000000172F4
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00000000000172F4:
	a0_146 = Mem172[gp + -1920:word64]
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0000000000016F84:
	Mem180[a2 + 40:word64] = __strdup(sp_114 + 0x0000000000000018)
	word64 s0_181 = (int64) Mem180[sp_114 + 0xFFFFFFFFFFFFFFE0:int32]
	word64 a0_183 = fn0000000000016830(gp, s5_123)
	word64 a3_186 = (int64) Mem180[sp_114 + 0xFFFFFFFFFFFFFFF8:int32]
	word64 s0_187 = a0_183 & s0_181
	Mem191[sp_114 + 0xFFFFFFFFFFFFFFF0:word32] = (word32) s0_187
	Mem201[a2 + 24:word64] = fn0000000000017F04(gp, s0_187, s5_123, s0_187, a3_186)
	Mem206[sp_114 + 0x0000000000000010:word64] = 0x0000000000000000
	Mem207[sp_114 + 0x0000000000000018:word64] = 0x0000000000000000
	Mem208[sp_114 + 0x0000000000000020:word64] = 0x0000000000000000
	Mem209[sp_114 + 0x0000000000000028:word64] = 0x0000000000000000
	Mem210[sp_114 + 0x0000000000000030:word64] = 0x0000000000000000
	Mem211[sp_114 + 0x0000000000000038:word32] = 0x00000000
	Mem212[sp_114 + 0x000000000000003C:word16] = 0x0000
	Mem213[sp_114 + 0x000000000000003E:byte] = 0x00
	branch inet_ntop(2, sp_114 + 0xFFFFFFFFFFFFFFF0, sp_114 + 0x0000000000000010, 16) == 0x0000000000000000 l00000000000172DC
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00000000000172DC:
	a0_146 = Mem213[gp + -1920:word64]
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0000000000016FF4:
	word64 a5_240
	word64 a0_219 = __strdup(sp_114 + 0x0000000000000008)
	word64 s0_221 = (int64) Mem213[sp_114 + 0xFFFFFFFFFFFFFFE0:int32]
	Mem222[a2 + 32:word64] = a0_219
	Mem232[a2 + 184:word64] = fn0000000000016B68(s0_221)
	word64 a4_752
	word64 a3_751
	word64 a0_234 = fn00000000000182B4(s0_221, out a3_751, out a4_752)
	word64 sp_220 = sp_114 + 0xFFFFFFFFFFFFFFC8
	word64 a5_238 = (int64) (word32) (a0_234 >>u 24)
	branch a0_234 >= 0x0000000000000000 l0000000000017098
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0000000000017098:
	a5_240 = 0x0000000000011758
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0000000000017024:
	branch (int64) ((word32) a5_238 + -128) <=u 63 l000000000001727C
// DataOut:
// DataOut (flags):
// SymbolicIn:

l000000000001727C:
	a5_240 = 0x0000000000011760
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0000000000017030:
	branch (int64) ((word32) a5_238 + -192) <=u 31 l00000000000172A4
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00000000000172A4:
	a5_240 = 0x0000000000011768
// DataOut:
// DataOut (flags):
// SymbolicIn:

l000000000001703C:
	branch (int64) ((word32) a5_238 + -224) >u 14 l00000000000172B0
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00000000000172B0:
	a5_240 = 0x0000000000011778
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0000000000017048:
	a5_240 = 0x0000000000011770
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00000000000170A0:
	word64 a5_265
	Mem257[a2 + 192:word64] = a5_240
	branch s5_123 == 32 l0000000000017158
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0000000000017158:
	Mem262[a2 + 168:word64] = a0_219
	Mem263[a2 + 176:word64] = a0_219
	a5_265 = 0x0000000000011780
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00000000000170AC:
	Mem268[sp_114 + 0xFFFFFFFFFFFFFFF0:word32] = (word32) s0_221
	branch s5_123 == 31 l0000000000017210
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0000000000017210:
	branch inet_ntop(2, sp_114 + 0xFFFFFFFFFFFFFFF0, sp_114, 16) == 0x0000000000000000 l00000000000172E8
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0000000000017228:
	word64 a0_277 = __strdup(sp_114 + 0xFFFFFFFFFFFFFFF8)
	word64 a5_279 = (int64) Mem268[sp_114 + 0xFFFFFFFFFFFFFFC8:int32]
	word64 a4_280 = (int64) Mem268[sp_114 + 0xFFFFFFFFFFFFFFD0:int32]
	Mem281[a2 + 168:word64] = a0_277
	Mem288[sp_114 + 0xFFFFFFFFFFFFFFE8:word32] = (word32) (a5_279 ^ -1 | a4_280)
	branch inet_ntop(2, sp_114 + 0xFFFFFFFFFFFFFFE8, sp_114 + 0xFFFFFFFFFFFFFFF0, 47) == 0x0000000000000000 l0000000000017074
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0000000000017260:
	Mem295[a2 + 176:word64] = __strdup(sp_114 + 0xFFFFFFFFFFFFFFE8)
	sp_220 = sp_114 + 0xFFFFFFFFFFFFFFA8
	a5_265 = 0x0000000000012660
// DataOut:
// DataOut (flags):
// SymbolicIn:

l000000000001716C:
	Mem302[a2 + 96:byte] = (byte) (int64) Mem299[a5_265:byte]
	Mem304[a2 + 97:byte] = (byte) (int64) Mem302[a5_265 + 1:byte]
	branch a3 << 0x00000011 < 0x0000000000000000 l0000000000017288
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0000000000017288:
	gp = fn0000000000017B40(ra, gp, (int64) Mem304[sp_220 + 8:int32], a2 + 64, a2 + 72, a2 + 80, a2 + 88, s5_123, a2, out s6_11)
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0000000000017184:
	branch (a3 & 1) != 0x0000000000000000 l00000000000171C8
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00000000000171C8:
	word64 a0_355 = fn00000000000168E4(gp, 2, sp_220 + 8)
	Mem367[s6_11 + 56:word64] = a0_355
	branch a0_355 != 0x0000000000000000 l000000000001718C
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00000000000171DC:
	branch (int64) Mem367[gp + -2028:int32] != 0x0000000000000000 l0000000000016E20
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00000000000171E4:
	__sprintf_chk(sp_220 + 104, 1, 250, 0x0000000000011830, 0x00000000)
	herror(sp_220 + 0x0000000000000060)
	a0_385 = -1
// DataOut:
// DataOut (flags):
// SymbolicIn:

l000000000001718C:
	a0_385 = 0
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00000000000170B8:
	Mem393[sp_114 + 0xFFFFFFFFFFFFFFF0:word32] = (word32) (s0_221 | 0x0000000001000000)
	branch inet_ntop(2, sp_114 + 0xFFFFFFFFFFFFFFF0, sp_114, 16) == 0x0000000000000000 l00000000000172E8
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00000000000172E8:
	a0_146 = Mem397[gp + -1920:word64]
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00000000000172C4:
	__fprintf_chk(a0_146, 1, 0x00000000000117B0, 0x00000000)
	abort()
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00000000000170DC:
	word64 a0_409 = __strdup(sp_114 + 0xFFFFFFFFFFFFFFF8)
	word64 a5_411 = (int64) Mem393[sp_114 + 0xFFFFFFFFFFFFFFC8:int32]
	Mem412[a2 + 168:word64] = a0_409
	word64 a4_754
	word64 a3_755
	word64 a4_756
	word64 a3_753
	Mem425[sp_114 + 0xFFFFFFFFFFFFFFE8:word32] = (word32) fn00000000000182B4((int64) ((word32) fn00000000000182B4(a5_411 ^ -1 | (int64) Mem412[sp_114 + 0xFFFFFFFFFFFFFFD0:int32], out a3_753, out a4_754) + -1), out a3_755, out a4_756)
	branch inet_ntop(2, sp_114 + 0xFFFFFFFFFFFFFFE8, sp_114 + 0xFFFFFFFFFFFFFFF0, 47) == 0x0000000000000000 l0000000000017074
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0000000000017074:
	branch (int64) Mem433[gp + -2028:int32] != 0x0000000000000000 l0000000000016E20
// DataOut:
// DataOut (flags):
// SymbolicIn:

l000000000001707C:
	fwrite(0x00000000000117F8, 1, 43, Mem433[gp + -1920:word64])
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0000000000017120:
	__strdup(sp_114 + 0xFFFFFFFFFFFFFFE8)
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0000000000016E18:
	branch (int64) Mem435[gp + -2028:int32] == 0x0000000000000000 l0000000000017054
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0000000000017054:
	__fprintf_chk(Mem435[gp + -1920:word64], 1, 0x00000000000117D8, 0x00000000)
	a0_385 = -1
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0000000000016E20:
	a0_385 = -1
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0000000000016E24:
	branch a5_7 != Mem463[gp + -1936:word64] l00000000000172D8
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00000000000172D8:
	__stack_chk_fail()
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0000000000016E30:
	a4Out = a5_7
	return a0_385
// DataOut:
// DataOut (flags):
// SymbolicIn:

fn0000000000016D74_exit:
// DataOut:
// DataOut (flags):
// SymbolicIn:



word64 fn000000000001730C(word64 gp, word64 a0, word64 a1)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  a0:[0..63] a1:[0..63] gp:[0..63]
// LiveOut: a0
// Trashed: a0 a5
// Preserved: a1 a2 a3 ra s0 s1 sp
fn000000000001730C_entry:
// DataOut:
// DataOut (flags):
// SymbolicIn:

l000000000001730C:
	word64 a0_42
	word64 a4_7 = Mem5[gp + -1936:word64]
	branch a0 >u 128 l00000000000173BC
// DataOut:
// DataOut (flags):
// SymbolicIn:

l000000000001732C:
	word64 a5_20 = fp + -184
	word64 a3_22 = 7
	word64 a2_23 = -1
	branch a0 == 0x0000000000000000 l000000000001736C
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0000000000017354:
	branch a3_22 >= a0 l00000000000173C4
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00000000000173C4:
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0000000000017358:
	Mem29[a5_20:byte] = (byte) a2_23
	a0 = (int64) ((word32) a0 + -8)
	a5_20 = a5_20 + 1
	branch a0 > 0x0000000000000000 l0000000000017354
// DataOut:
// DataOut (flags):
// SymbolicIn:

l000000000001736C:
	branch inet_ntop(10, fp + -184, fp + -168, 128) == 0x0000000000000000 l00000000000173BC
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00000000000173BC:
	a0_42 = 0
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0000000000017384:
	memcpy(a1, fp + 0xFFFFFFFFFFFFFF40, 16)
	a0_42 = __strdup(fp + 0xFFFFFFFFFFFFFF48)
// DataOut:
// DataOut (flags):
// SymbolicIn:

l000000000001739C:
	branch a4_7 != Mem55[gp + -1936:word64] l00000000000173D0
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00000000000173D0:
	__stack_chk_fail()
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00000000000173A8:
	return a0_42
// DataOut:
// DataOut (flags):
// SymbolicIn:

fn000000000001730C_exit:
// DataOut:
// DataOut (flags):
// SymbolicIn:



word64 fn00000000000173D4(word64 a0, word64 a1, ptr64 & spOut, ptr64 & s0Out, ptr64 & s1Out, ptr64 & a0Out, ptr64 & s2Out, ptr64 & s3Out)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  a0:[0..63] a1:[0..63]
// LiveOut: a0 ra s0 s1 s2 s3 sp
// Trashed: a0 a1 a2 a3 a4 a5 ra s0 s1 s2 s3 sp
// Preserved:
fn00000000000173D4_entry:
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00000000000173D4:
	word64 a0_101
	word64 s2_17 = (int64) Mem13[a0:byte]
	word64 s3_18 = (int64) Mem13[a0 + 1:byte]
	branch a1 == 128 l00000000000174DC
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00000000000174DC:
	branch (uint64) (uint32) memcmp(a0, 0x0000000000010880, 16) == 0x0000000000000000 l0000000000017538
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0000000000017538:
	spOut = fp + 0xFFFFFFFFFFFFFFF8
	s0Out = s1
	s1Out = s2
	a0Out = 0x0000000000011858
	s2Out = s3
	s3Out = qwLoc30
	return s0
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00000000000174F4:
	branch (uint64) (uint32) memcmp(a0, 0x0000000000010898, 16) != 0x0000000000000000 l000000000001747C
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0000000000017508:
	a0_101 = 0x0000000000011870
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0000000000017400:
	branch a1 > 95 l0000000000017474
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0000000000017474:
// DataOut:
// DataOut (flags):
// SymbolicIn:

l000000000001747C:
	branch (uint64) (uint32) memcmp(a0, 0x00000000000108B0, 12) == 0x0000000000000000 l000000000001755C
// DataOut:
// DataOut (flags):
// SymbolicIn:

l000000000001755C:
	spOut = fp
	s0Out = qwArg00
	s1Out = ra
	a0Out = 0x0000000000011888
	s2Out = s0
	s3Out = s1
	return qwArg08
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0000000000017490:
	branch (uint64) (uint32) memcmp(a0, 0x00000000000108C0, 12) == 0x0000000000000000 l0000000000017514
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0000000000017514:
	spOut = fp
	s0Out = ra
	s1Out = s0
	a0Out = 0x00000000000118A0
	s2Out = s1
	s3Out = s2
	return qwArg00
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00000000000174A4:
	branch (uint64) (uint32) memcmp(a0, 0x00000000000108D0, 12) != 0x0000000000000000 l0000000000017408
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00000000000174B8:
	spOut = fp
	s0Out = s0
	s1Out = s1
	a0Out = 0x00000000000118B8
	s2Out = s2
	s3Out = s3
	return ra
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0000000000017408:
	word64 a5_92 = s2_17 << 0x00000008 | s3_18
	branch (a5_92 & 0x00000000FFFFE000) == 0x0000000000002000 l0000000000017580
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0000000000017580:
	a0_101 = 0x00000000000118D8
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0000000000017420:
	branch (s2_17 & 254) == 252 l000000000001758C
// DataOut:
// DataOut (flags):
// SymbolicIn:

l000000000001758C:
	a0_101 = 0x00000000000118E8
// DataOut:
// DataOut (flags):
// SymbolicIn:

l000000000001742C:
	branch (a5_92 & -64) == 65152 l0000000000017598
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0000000000017598:
	a0_101 = 0x0000000000011900
// DataOut:
// DataOut (flags):
// SymbolicIn:

l000000000001743C:
	branch s2_17 == 255 l00000000000175A4
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00000000000175A4:
	a0_101 = 0x0000000000011748
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0000000000017444:
	a0_101 = 0x0000000000011710
	branch (a5_92 & -2) == 8194 l00000000000175B0
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00000000000175B0:
	a0_101 = 0x0000000000011918
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0000000000017458:
	spOut = fp
	s0Out = s0
	s1Out = s1
	a0Out = a0_101
	s2Out = s2
	s3Out = s3
	return ra
// DataOut:
// DataOut (flags):
// SymbolicIn:

fn00000000000173D4_exit:
// DataOut:
// DataOut (flags):
// SymbolicIn:



word64 fn00000000000175BC(word64 gp, word64 a0, word64 a1, word64 a2, word64 a3, ptr64 & a4Out)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  a0:[0..31] a1:[0..63] a2:[0..63] a3:[0..63] gp:[0..63]
// LiveOut: a0 a4
// Trashed: a0 a1 a2 a4 a5
// Preserved: a3 a6 a7 fa3 fa4 fa5 gp ra s0 s1 s2 s3 s4 s5 s6 s7 s8 s9 sp t1 t3 t4 t5
fn00000000000175BC_entry:
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00000000000175BC:
	word64 a0_107
	word64 a5_7 = Mem5[gp + -1936:word64]
	memset(a2, 0, 200)
	word64 s2_101 = a1
	word64 s6_283 = a3
	branch (uint64) (uint32) inet_pton(10, a0, fp + 0xFFFFFFFFFFFFFE60) <= 0x0000000000000000 l00000000000177B4
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00000000000177B4:
	branch (int64) Mem39[gp + -2028:int32] != 0x0000000000000000 l0000000000017770
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00000000000177BC:
	__fprintf_chk(Mem39[gp + -1920:word64], 1, 0x0000000000011920, 0x00000000)
	a0_107 = -1
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0000000000017628:
	Mem64[a2 + 8:word64] = fn00000000000163B0(gp)
	branch inet_ntop(10, fp + 0xFFFFFFFFFFFFFE58, fp + 0xFFFFFFFFFFFFFE88, 250) == 0x0000000000000000 l0000000000017768
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0000000000017650:
	Mem74[a2:word64] = __strdup(fp + 0xFFFFFFFFFFFFFE88)
	word64 s5_75 = 128
	branch s5_75 < a1 l00000000000177DC
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00000000000177DC:
	branch (int64) Mem74[gp + -2028:int32] != 0x0000000000000000 l0000000000017770
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00000000000177E4:
	__fprintf_chk(Mem74[gp + -1920:word64], 1, 0x0000000000011940, 0x00000000)
	a0_107 = -1
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0000000000017664:
	branch a1 < 0x0000000000000000 l0000000000017868
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0000000000017868:
	s2_101 = s5_75
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0000000000017668:
	s5_75 = a1
// DataOut:
// DataOut (flags):
// SymbolicIn:

l000000000001766C:
	Mem91[a2 + 160:word32] = (word32) s5_75
	word64 a0_95 = fn000000000001730C(gp, s5_75, fp + 0xFFFFFFFFFFFFFE58)
	Mem97[a2 + 48:word64] = a0_95
	branch a0_95 == 0x0000000000000000 l00000000000178F8
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00000000000178F8:
	branch (int64) Mem97[gp + -2028:int32] != 0x0000000000000000 l0000000000017770
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0000000000017900:
	__fprintf_chk(Mem97[gp + -1920:word64], 1, 0x0000000000011960, 0x00000000)
	a0_107 = -1
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0000000000017688:
	word64 s8_108 = fp + 0xFFFFFFFFFFFFFE68
	word64 a5_109 = fp + 0xFFFFFFFFFFFFFE48
	word64 s9_110 = fp + 0xFFFFFFFFFFFFFE58
	word64 a2_111 = fp + 0xFFFFFFFFFFFFFE68
	word64 a3_112 = fp + 0xFFFFFFFFFFFFFE58
// DataOut:
// DataOut (flags):
// SymbolicIn:

l000000000001769C:
	Mem122[a2_111:byte] = (byte) ((int64) Mem114[a5_109:byte] & (int64) Mem114[a3_112:byte])
	a5_109 = a5_109 + 1
	a3_112 = a3_112 + 1
	a2_111 = a2_111 + 1
	branch fp + 0xFFFFFFFFFFFFFE58 != a5_109 l000000000001769C
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00000000000176BC:
	branch inet_ntop(10, fp + 0xFFFFFFFFFFFFFE68, fp + 0xFFFFFFFFFFFFFE88, 250) == 0x0000000000000000 l0000000000017768
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00000000000176D4:
	Mem138[a2 + 32:word64] = __strdup(fp + 0xFFFFFFFFFFFFFE88)
	Mem147[a2 + 16:word64] = fn00000000000163B0(gp)
	word64 a0_151
	word64 s1_157
	word64 s2_158
	word64 sp_160
	word64 s0_156
	word64 s3_159
	word64 ra_155 = fn00000000000173D4(fp + 0xFFFFFFFFFFFFFE58, s2_101, out sp_160, out s0_156, out s1_157, out a0_151, out s2_158, out s3_159)
	Mem163[s0_156 + 184:word64] = a0_151
	Mem171[s0_156 + 24:word64] = fn0000000000018118(gp, sp_160 + 40, s5_75)
	branch s2_158 != 128 l0000000000017870
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0000000000017870:
	Mem176[s0_156 + 168:word64] = __strdup(s3_159)
// DataOut:
// DataOut (flags):
// SymbolicIn:

l000000000001787C:
	s8_108 = s8_108 + 1
	Mem185[s8_108 + 4095:byte] = (byte) ((int64) Mem178[s9_110:byte] ^ -1 | (int64) Mem178[s8_108:byte])
	s9_110 = s9_110 + 1
	branch s3_159 != s8_108 l000000000001787C
// DataOut:
// DataOut (flags):
// SymbolicIn:

l000000000001789C:
	branch inet_ntop(10, sp_160 + 0x0000000000000020, s3_159, 250) == 0x0000000000000000 l0000000000017768
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0000000000017768:
	branch (int64) Mem197[gp + -2028:int32] == 0x0000000000000000 l0000000000017804
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0000000000017804:
	fwrite(0x00000000000117F8, 1, 43, Mem197[gp + -1920:word64])
	a0_107 = -1
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00000000000178B4:
	Mem213[s0_156 + 176:word64] = __strdup(s3_159)
	word64 a5_211 = 128
	sp_160 = sp_160 + 0xFFFFFFFFFFFFFFE8
	branch (int64) (word32) (a5_211 - s2_158) != a5_211 l0000000000017728
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00000000000178D0:
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0000000000017714:
	word64 a5_219 = Mem171[s0_156 + 32:word64]
	Mem222[s0_156 + 168:word64] = a5_219
	Mem223[s0_156 + 176:word64] = a5_219
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0000000000017728:
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0000000000017740:
	snprintf(s0_156 + 96, 64, 0x0000000000011990, 0x00000000)
	word64 sp_240 = sp_160 + 0xFFFFFFFFFFFFFFF8
	branch a3 << 0x00000011 < 0x0000000000000000 l00000000000178DC
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00000000000178DC:
	gp = fn0000000000017D10(ra_155, gp, s1_157, sp_240 + 8, s0_156 + 64, s0_156 + 72, s0_156 + 80, s0_156 + 88, a3, fp + 0xFFFFFFFFFFFFFE58, out s0_156, out s3_159, out s6_283)
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0000000000017758:
	branch (s6_283 & 1) != 0x0000000000000000 l0000000000017824
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0000000000017824:
	word64 a0_292 = fn00000000000168E4(gp, 10, sp_240 + 8)
	Mem304[s0_156 + 56:word64] = a0_292
	branch a0_292 != 0x0000000000000000 l0000000000017760
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0000000000017838:
	branch (int64) Mem304[gp + -2028:int32] != 0x0000000000000000 l0000000000017770
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0000000000017840:
	__sprintf_chk(s3_159, 1, 250, 0x0000000000011830, 0x00000000)
	herror(s3_159)
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0000000000017770:
	a0_107 = -1
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0000000000017760:
	a0_107 = 0
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0000000000017774:
	branch a5_7 != Mem330[gp + -1936:word64] l0000000000017920
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0000000000017920:
	__stack_chk_fail()
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0000000000017780:
	a4Out = a5_7
	return a0_107
// DataOut:
// DataOut (flags):
// SymbolicIn:

fn00000000000175BC_exit:
// DataOut:
// DataOut (flags):
// SymbolicIn:



word64 fn0000000000017924(word64 gp, ptr64 & a1Out, ptr64 & a2Out, ptr64 & a3Out, ptr64 & a4Out, ptr64 & a6Out)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  gp:[0..63]
// LiveOut: a0 a1 a2 a3 a4 a6
// Trashed: a0 a1 a2 a3 a4 a5 a6
// Preserved: ra s0 s1 s2 s3 s4 s5 s6 s7 s8 s9 sp
fn0000000000017924_entry:
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0000000000017924:
	word64 s0_118
	branch Mem5[gp + -2016:word64] == 0x0000000000000000 l00000000000179B8
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00000000000179B8:
	s0_118 = (int64) Mem27[gp + -2024:int32]
	branch s0_118 != 0x0000000000000000 l000000000001795C
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00000000000179C0:
	word64 a0_32 = dlopen(0x0000000000012A38, 1)
	Mem34[gp + 2080:word64] = a0_32
	branch a0_32 == 0x0000000000000000 l0000000000017B14
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0000000000017B14:
	a3 = 256
	a2 = 1
	__snprintf_chk(gp + -800, a3, a2, a3, 0x0000000000012A58, 0x00000000)
	s0_118 = -1
	Mem46[gp + 2072:word32] = (word32) s0_118
	a4 = 0x0000000000012A58
	a1 = a3
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00000000000179DC:
	Mem52[gp + 2152:word64] = dlsym(a0_32, 0x0000000000012A78)
	word64 a0_55 = dlsym(a0_32, 0x0000000000012A90)
	Mem61[gp + 2144:word64] = a0_55
	word64 a0_62 = dlsym(a0_32, 0x0000000000012AA0)
	Mem68[gp + 2136:word64] = a0_62
	word64 a0_69 = dlsym(a0_32, 0x0000000000012AC0)
	Mem75[gp + 2120:word64] = a0_69
	word64 a0_76 = dlsym(a0_32, 0x0000000000012AD0)
	Mem82[gp + 2112:word64] = a0_76
	word64 a0_83 = dlsym(a0_32, 0x0000000000012AE8)
	Mem89[gp + 2104:word64] = a0_83
	word64 a0_90 = dlsym(a0_32, 0x0000000000012B00)
	Mem96[gp + 2096:word64] = a0_90
	word64 a0_97 = dlsym(a0_32, 0x0000000000012B18)
	Mem103[gp + 2088:word64] = a0_97
	Mem106[gp + 2128:word64] = dlsym(a0_32, 0x0000000000012B38)
	a1 = 0x0000000000012B38
	branch a0_55 == 0x0000000000000000 l0000000000017ACC
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0000000000017AAC:
	branch a0_62 == 0x0000000000000000 l0000000000017ACC
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0000000000017AB0:
	branch a0_69 == 0x0000000000000000 l0000000000017ACC
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0000000000017AB4:
	branch a0_76 == 0x0000000000000000 l0000000000017ACC
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0000000000017AB8:
	branch a0_83 == 0x0000000000000000 l0000000000017ACC
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0000000000017ABC:
	branch a0_90 == 0x0000000000000000 l0000000000017ACC
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0000000000017AC0:
	branch a0_97 == 0x0000000000000000 l0000000000017ACC
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0000000000017ACC:
	a6 = Mem106[0x0000000000012B50:word64]
	word64 a0_111 = Mem106[0x0000000000012B58:word64]
	a1 = Mem106[0x0000000000012B60:word64]
	a2 = Mem106[0x0000000000012B68:word64]
	a3 = Mem106[0x0000000000012B70:word64]
	a4 = (int64) Mem106[0x0000000000012B78:int32]
	Mem119[gp + -800:word64] = a6
	Mem120[gp + -792:word64] = a0_111
	Mem121[gp + -784:word64] = a1
	Mem122[gp + -776:word64] = a2
	Mem123[gp + -768:word64] = a3
	Mem124[gp + -760:word32] = (word32) a4
	s0_118 = -1
	Mem125[gp + 2072:word32] = (word32) s0_118
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0000000000017AC4:
	Mem126[gp + 2072:word32] = 0x00000000
// DataOut:
// DataOut (flags):
// SymbolicIn:

l000000000001795C:
	branch (int64) Mem27[gp + -2028:int32] != 0x0000000000000000 l000000000001796C
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0000000000017964:
	branch (int64) Mem27[gp + -800:byte] != 0x0000000000000000 l00000000000179A8
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00000000000179A8:
	a1 = Mem27[gp + -1920:word64]
	fputs(gp + -800, a1)
// DataOut:
// DataOut (flags):
// SymbolicIn:

l000000000001796C:
	s0_118 = (int64) Mem27[gp + -2024:int32]
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0000000000017970:
	a1Out = a1
	a2Out = a2
	a3Out = a3
	a4Out = a4
	a6Out = a6
	return s0_118
// DataOut:
// DataOut (flags):
// SymbolicIn:

fn0000000000017924_exit:
// DataOut:
// DataOut (flags):
// SymbolicIn:



word64 fn0000000000017B40(word64 ra, word64 gp, word64 a0, word64 a1, word64 a2, word64 a3, word64 a4, word64 s5, word64 s6, ptr64 & s6Out)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  a0:[0..63] a1:[0..63] a2:[0..63] a3:[0..63] a4:[0..63] gp:[0..63] ra:[0..63] s5:[0..63] s6:[0..63]
// LiveOut: gp s6
// Trashed: a0 a1 a2 a3 a4 a5 a6 fa3 fa4 fa5 gp ra s0 s1 s2 s3 s4 s5 s6 s7 t1
// Preserved: sp
fn0000000000017B40_entry:
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0000000000017B40:
	word64 a1_34
	word64 a2_35
	word64 a3_36
	word64 a4_37
	word64 a6_39
	branch fn0000000000017924(gp, out a1_34, out a2_35, out a3_36, out a4_37, out a6_39) == 0x0000000000000000 l0000000000017BB0
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0000000000017BB0:
	word64 a3_42
	word64 a4_43
	word64 a0_41 = fn00000000000182B4(a0, out a3_42, out a4_43)
	word64 sp_47
	word64 s0_48
	word64 s1_49
	word64 s2_50
	word64 s3_51
	word64 s4_52
	word64 ra_53
	word64 s5_54
	word64 s6_55
	word64 s7_56
	word64 a2_59
	word64 a3_60
	word64 a4_61
	word64 gp_63
	call Mem21[gp + -1944:word64] (retsize: 0;)
		uses: a0:a0_41,a1:a1_34,a2:a2_35,a3:a3_42,a4:a4_43,fa3:fa3_92,fa4:fa4_89,fa5:fa5_90,gp:gp,ra:ra,s0:a0,s1:a3,s2:a2,s3:a1,s4:a4,s5:s5,s6:s6,s7:a0_41,sp:fp + -80,t1:t1_91
		defs: a2:a2_59,a3:a3_60,a4:a4_61,gp:gp_63,ra:ra_53,s0:s0_48,s1:s1_49,s2:s2_50,s3:s3_51,s4:s4_52,s5:s5_54,s6:s6_55,s7:s7_56,sp:sp_47
	word64 a0_82
	word64 fa4_89
	word64 fa5_90
	word64 t1_91
	word64 fa3_92
	word64 gp_228
	word64 s1_214
	word64 s2_215
	word64 s3_216
	word64 s4_217
	word64 ra_218
	word64 s5_219
	word64 s6_220
	word64 s7_221
	word64 a2_224
	word64 a3_225
	word64 a4_226
	word64 sp_212
	call Mem21[gp_63 + -1952:word64] (retsize: 0;)
		uses: a0:1,a1:16,a2:a2_59,a3:a3_60,a4:a4_61,fa3:fa3_92,fa4:fa4_89,fa5:fa5_90,gp:gp_63,ra:ra_53,s0:s0_48,s1:s1_49,s2:s2_50,s3:s3_51,s4:s4_52,s5:s5_54,s6:s6_55,s7:s7_56,sp:sp_47,t1:t1_91
		defs: a0:a0_82,a2:a2_84,a3:a3_85,a4:a4_86,fa3:fa3_92,fa4:fa4_89,fa5:fa5_90,gp:gp_88,ra:ra_78,s1:s1_74,s2:s2_75,s3:s3_76,s4:s4_77,s5:s5_79,s6:s6_80,s7:s7_81,sp:sp_72,t1:t1_91
	word64 s0_213 = a0_82
	branch a0_82 == 0x0000000000000000 l0000000000017C3C
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0000000000017BDC:
	word64 a5_95 = Mem21[gp_228 + -1992:word64]
	word64 a4_96 = 1
	Mem98[a0_82 + 76:word32] = (word32) a4_96
	word64 sp_100
	word64 s0_101
	word64 s1_102
	word64 s2_103
	word64 s3_104
	word64 s4_105
	word64 ra_106
	word64 s5_107
	word64 s7_109
	word64 a0_110
	word64 a2_112
	word64 a3_113
	word64 a4_114
	word64 fa4_117
	word64 fa5_118
	word64 t1_119
	word64 fa3_120
	call a5_95 (retsize: 0;)
		uses: a0:a0_82,a1:s7_81 << 0x00000000 >>u 0x00000000,a2:a2_84,a3:a3_85,a4:a4_96,fa3:fa3_120,fa4:fa4_117,fa5:fa5_118,gp:gp_88,ra:ra_78,s0:a0_82,s1:s1_74,s2:s2_75,s3:s3_76,s4:s4_77,s5:s5_79,s6:s6_80,s7:s7_81,sp:sp_72,t1:t1_119
		defs: a0:a0_110,a2:a2_112,a3:a3_113,a4:a4_114,fa3:fa3_120,fa4:fa4_117,fa5:fa5_118,gp:gp_116,ra:ra_106,s0:s0_101,s1:s1_102,s2:s2_103,s3:s3_104,s4:s4_105,s5:s5_107,s7:s7_109,sp:sp_100,t1:t1_119
	branch a0_110 < 0x0000000000000000 l0000000000017B84
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0000000000017BFC:
	word64 s0_127
	word64 s1_128
	word64 s2_129
	word64 s3_130
	word64 s4_131
	word64 ra_132
	word64 s5_133
	word64 s6_134
	word64 s7_135
	word64 a0_136
	word64 a1_137
	word64 a2_138
	word64 a3_139
	word64 a4_140
	word64 gp_142
	word64 fa4_143
	word64 fa5_144
	word64 t1_145
	word64 fa3_146
	word64 sp_126
	call Mem98[gp + -1960:word64] (retsize: 0;)
		uses: a0:s0_101,a1:a0_110,a2:a2_112,a3:a3_113,a4:a4_114,fa3:fa3_146,fa4:fa4_143,fa5:fa5_144,gp:gp_116,ra:ra_106,s0:s0_101,s1:s1_102,s2:s2_103,s3:s3_104,s4:s4_105,s5:s5_107,s6:a0_110,s7:s7_109,sp:sp_100,t1:t1_145
		defs: a0:a0_136,a1:a1_137,a2:a2_138,a3:a3_139,a4:a4_140,fa3:fa3_146,fa4:fa4_143,fa5:fa5_144,gp:gp_142,ra:ra_132,s0:s0_127,s1:s1_128,s2:s2_129,s3:s3_130,s4:s4_131,s5:s5_133,s6:s6_134,s7:s7_135,sp:sp_126,t1:t1_145
	branch a0_136 == 0x0000000000000000 l0000000000017C18
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0000000000017C10:
	Mem150[s3_130:word64] = __strdup(a0_136)
	sp_126 = sp_126 + 0xFFFFFFFFFFFFFFF8
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0000000000017C18:
	word64 s0_170
	word64 s1_171
	word64 s2_172
	word64 s3_173
	word64 s4_174
	word64 ra_175
	word64 s5_176
	word64 s6_177
	word64 s7_178
	word64 a0_179
	word64 a1_180
	word64 a2_181
	word64 a3_182
	word64 a4_183
	word64 gp_185
	word64 fa4_186
	word64 fa5_187
	word64 t1_188
	word64 fa3_189
	word64 sp_169
	call Mem152[gp_142 + -1968:word64] (retsize: 0;)
		uses: a0:s6_134,a1:a1_137,a2:a2_138,a3:a3_139,a4:a4_140,fa3:fa3_189,fa4:fa4_186,fa5:fa5_187,gp:gp_142,ra:ra_132,s0:s0_127,s1:s1_128,s2:s2_129,s3:s3_130,s4:s4_131,s5:s5_133,s6:s6_134,s7:s7_135,sp:sp_168,t1:t1_188
		defs: a0:a0_179,a1:a1_180,a2:a2_181,a3:a3_182,a4:a4_183,fa3:fa3_189,fa4:fa4_186,fa5:fa5_187,gp:gp_185,ra:ra_175,s0:s0_170,s1:s1_171,s2:s2_172,s3:s3_173,s4:s4_174,s5:s5_176,s6:s6_177,s7:s7_178,sp:sp_169,t1:t1_188
	branch a0_179 == 0x0000000000000000 l0000000000017C30
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0000000000017C28:
	Mem193[s2_172:word64] = __strdup(a0_179)
	sp_169 = sp_169 + 0xFFFFFFFFFFFFFFF8
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0000000000017C30:
	word64 fa4_229
	word64 fa5_230
	word64 t1_231
	word64 fa3_232
	call Mem195[gp_185 + -1976:word64] (retsize: 0;)
		uses: a0:s0_170,a1:a1_180,a2:a2_181,a3:a3_182,a4:a4_183,fa3:fa3_232,fa4:fa4_229,fa5:fa5_230,gp:gp_185,ra:ra_175,s0:s0_170,s1:s1_171,s2:s2_172,s3:s3_173,s4:s4_174,s5:s5_176,s6:s6_177,s7:s7_178,sp:sp_211,t1:t1_231
		defs: a2:a2_224,a3:a3_225,a4:a4_226,fa3:fa3_232,fa4:fa4_229,fa5:fa5_230,gp:gp_228,ra:ra_218,s0:s0_213,s1:s1_214,s2:s2_215,s3:s3_216,s4:s4_217,s5:s5_219,s6:s6_220,s7:s7_221,sp:sp_212,t1:t1_231
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0000000000017C3C:
	word64 a4_266
	word64 fa4_269
	word64 fa5_270
	word64 t1_271
	word64 fa3_272
	word64 s7_261
	word64 s1_254
	word64 s2_255
	word64 s3_256
	word64 s4_257
	word64 ra_258
	word64 s5_259
	word64 s6_260
	word64 a0_262
	word64 a2_264
	word64 a3_265
	word64 sp_252
	call Mem235[gp_228 + -1952:word64] (retsize: 0;)
		uses: a0:2,a1:16,a2:a2_248,a3:a3_249,a4:a4_250,fa3:fa3_272,fa4:fa4_269,fa5:fa5_270,gp:gp_234,ra:ra_244,s0:s0_239,s1:s1_240,s2:s2_241,s3:s3_242,s4:s4_243,s5:s5_245,s6:s6_246,s7:s7_247,sp:sp_251,t1:t1_271
		defs: a0:a0_262,a2:a2_264,a3:a3_265,a4:a4_266,fa3:fa3_272,fa4:fa4_269,fa5:fa5_270,gp:gp_268,ra:ra_258,s1:s1_254,s2:s2_255,s3:s3_256,s4:s4_257,s5:s5_259,s6:s6_260,s7:s7_261,sp:sp_252,t1:t1_271
	word64 s0_274 = a0_262
	branch a0_262 == 0x0000000000000000 l0000000000017CF4
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0000000000017CF4:
	word64 fa4_295
	word64 fa5_296
	word64 t1_297
	word64 fa3_298
	call Mem235[gp + -1952:word64] (retsize: 0;)
		uses: a0:6,a1:16,a2:a2_264,a3:a3_265,a4:a4_266,fa3:fa3_298,fa4:fa4_295,fa5:fa5_296,gp:gp_268,ra:ra_258,s0:a0_262,s1:s1_254,s2:s2_255,s3:s3_256,s4:s4_257,s5:s5_259,s6:s6_260,s7:s7_261,sp:sp_252,t1:t1_297
		defs: a0:a0_288,a2:a2_290,a3:a3_291,fa3:fa3_298,fa4:fa4_295,fa5:fa5_296,gp:gp_294,ra:ra_284,s1:s1_280,s2:s2_281,s3:s3_282,s4:s4_283,s5:s5_285,s6:s6_286,s7:s7_287,sp:sp_278,t1:t1_297
	s0_274 = a0_262
	branch a0_262 != 0x0000000000000000 l0000000000017C54
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0000000000017D0C:
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0000000000017C54:
	word64 a5_303 = Mem235[gp + -1984:word64]
	word64 a4_304 = 1
	Mem308[s0_274 + 76:word32] = (word32) a4_304
	word64 s0_322
	word64 s1_323
	word64 s4_326
	word64 a0_331
	word64 a3_334
	word64 a4_335
	word64 gp_337
	word64 fa4_338
	word64 fa5_339
	word64 t1_340
	word64 fa3_341
	word64 sp_321
	word64 a1_332
	word64 a2_333
	call a5_303 (retsize: 0;)
		uses: a0:a0_317,a1:s7_305 << 0x00000000 >>u 0x00000000,a2:a2_318,a3:a3_319,a4:a4_304,fa3:fa3_341,fa4:fa4_338,fa5:fa5_339,gp:gp_301,ra:ra_314,s0:s0_307,s1:s1_310,s2:s2_311,s3:s3_312,s4:s4_313,s5:s5_315,s6:s6_316,s7:s7_305,sp:sp_320,t1:t1_340
		defs: a0:a0_331,a1:a1_332,a2:a2_333,a3:a3_334,a4:a4_335,fa3:fa3_341,fa4:fa4_338,fa5:fa5_339,gp:gp_337,s0:s0_322,s1:s1_323,s4:s4_326,sp:sp_321,t1:t1_340
	branch a0_331 == 0x0000000000000000 l0000000000017C94
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0000000000017C74:
	word64 a0_344 = Mem308[a0_331 + 32:word64]
	branch a0_344 == 0x0000000000000000 l0000000000017C84
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0000000000017C7C:
	Mem347[s1_323:word64] = __strdup(a0_344)
	sp_321 = sp_321 + 0xFFFFFFFFFFFFFFF8
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0000000000017C84:
	branch (word64) ((real32) Mem349[a0_331 + 52:real32] == (real32) 0x0000000000000000) == 0x0000000000000000 l0000000000017CC8
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0000000000017CC8:
	a1_332 = 1
	__asprintf_chk(s4_326, a1_332, 0x0000000000012B80, 0x00000000)
	a2_333 = 0x0000000000012B80
	sp_321 = sp_321 + 0xFFFFFFFFFFFFFFF8
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0000000000017C94:
	word64 s6_399
	word64 gp_407
	word64 fa4_408
	word64 fa5_409
	word64 t1_410
	word64 fa3_411
	call Mem370[gp_337 + -1976:word64] (retsize: 0;)
		uses: a0:s0_322,a1:a1_384,a2:a2_386,a3:a3_334,a4:a4_335,fa3:fa3_411,fa4:fa4_408,fa5:fa5_409,gp:gp_337,ra:Mem370[sp_369 + 72:word64],s0:Mem370[sp_369 + 64:word64],s1:Mem370[sp_369 + 56:word64],s2:Mem370[sp_369 + 48:word64],s3:Mem370[sp_369 + 40:word64],s4:Mem370[sp_369 + 32:word64],s5:Mem370[sp_369 + 24:word64],s6:Mem370[sp_369 + 16:word64],s7:Mem370[sp_369 + 8:word64],sp:sp_369 + 80,t1:t1_410
		defs: fa3:fa3_411,fa4:fa4_408,fa5:fa5_409,gp:gp_407,s6:s6_399,t1:t1_410
	s6Out = s6_399
	return gp_407
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0000000000017B84:
	s6Out = s6
	return gp
// DataOut:
// DataOut (flags):
// SymbolicIn:

fn0000000000017B40_exit:
// DataOut:
// DataOut (flags):
// SymbolicIn:



word64 fn0000000000017D10(word64 ra, word64 gp, word64 s1, word64 a0, word64 a1, word64 a2, word64 a3, word64 a4, word64 s6, word64 s7, ptr64 & s0Out, ptr64 & s3Out, ptr64 & s6Out)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  a0:[0..63] a1:[0..63] a2:[0..63] a3:[0..63] a4:[0..63] gp:[0..63] ra:[0..63] s1:[0..63] s6:[0..63] s7:[0..63]
// LiveOut: gp s0 s3 s6
// Trashed: a0 a1 a2 a3 a4 a5 a6 fa3 fa4 fa5 gp ra s0 s1 s2 s3 s4 s5 s6 s7 t1
// Preserved: sp
fn0000000000017D10_entry:
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0000000000017D10:
	word64 a1_34
	word64 a2_35
	word64 a3_36
	word64 a4_37
	word64 a6_39
	word64 a0_33 = fn0000000000017924(gp, out a1_34, out a2_35, out a3_36, out a4_37, out a6_39)
	branch a0_33 == 0x0000000000000000 l0000000000017D80
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0000000000017D80:
	word64 sp_41
	word64 s0_42
	word64 s2_43
	word64 s3_44
	word64 s4_45
	word64 s5_46
	word64 ra_47
	word64 s1_48
	word64 s6_49
	word64 s7_50
	word64 a2_53
	word64 a3_54
	word64 a4_55
	word64 gp_57
	call Mem21[gp + -1944:word64] (retsize: 0;)
		uses: a0:a0_33,a1:a1_34,a2:a2_35,a3:a3_36,a4:a4_37,fa3:fa3_87,fa4:fa4_84,fa5:fa5_85,gp:gp,ra:ra,s0:a0,s1:s1,s2:a3,s3:a2,s4:a1,s5:a4,s6:s6,s7:s7,sp:fp + -80,t1:t1_86
		defs: a2:a2_53,a3:a3_54,a4:a4_55,gp:gp_57,ra:ra_47,s0:s0_42,s1:s1_48,s2:s2_43,s3:s3_44,s4:s4_45,s5:s5_46,s6:s6_49,s7:s7_50,sp:sp_41
	word64 a0_76
	word64 fa4_84
	word64 fa5_85
	word64 t1_86
	word64 fa3_87
	word64 gp_228
	word64 s0_213
	word64 s2_214
	word64 s3_215
	word64 s4_216
	word64 s5_217
	word64 ra_218
	word64 s6_220
	word64 s7_221
	word64 a2_224
	word64 a3_225
	word64 a4_226
	word64 sp_212
	call Mem21[gp_57 + -1952:word64] (retsize: 0;)
		uses: a0:12,a1:16,a2:a2_53,a3:a3_54,a4:a4_55,fa3:fa3_87,fa4:fa4_84,fa5:fa5_85,gp:gp_57,ra:ra_47,s0:s0_42,s1:s1_48,s2:s2_43,s3:s3_44,s4:s4_45,s5:s5_46,s6:s6_49,s7:s7_50,sp:sp_41,t1:t1_86
		defs: a0:a0_76,a2:a2_78,a3:a3_79,a4:a4_80,fa3:fa3_87,fa4:fa4_84,fa5:fa5_85,gp:gp_82,ra:ra_72,s0:s0_67,s2:s2_68,s3:s3_69,s4:s4_70,s5:s5_71,s6:s6_74,s7:s7_75,sp:sp_66,t1:t1_86
	word64 s1_219 = a0_76
	branch a0_76 == 0x0000000000000000 l0000000000017E18
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0000000000017DA0:
	word64 a4_89 = (int64) Mem21[s0_213 + 4:uint32]
	word64 a5_90 = (int64) Mem21[s0_213 + 12:uint32]
	word64 a1_91 = (int64) Mem21[s0_213:uint32]
	word64 a2_92 = (int64) Mem21[s0_213 + 8:uint32]
	word64 a3_93 = Mem21[gp_228 + -2000:word64]
	word64 a6_96 = 1
	Mem97[a0_76 + 76:word32] = (word32) a6_96
	word64 sp_100
	word64 s0_101
	word64 s2_102
	word64 s3_103
	word64 s4_104
	word64 s5_105
	word64 ra_106
	word64 s1_107
	word64 s6_108
	word64 a0_110
	word64 a2_112
	word64 a3_113
	word64 a4_114
	word64 fa4_118
	word64 fa5_119
	word64 t1_120
	word64 fa3_121
	call a3_93 (retsize: 0;)
		uses: a0:a0_76,a1:a4_89 << 0x00000000 | a1_91,a2:a5_90 << 0x00000000 | a2_92,a3:a3_93,a4:a4_89 << 0x00000000,a5:a5_90 << 0x00000000,a6:a6_96,fa3:fa3_121,fa4:fa4_118,fa5:fa5_119,gp:gp_82,ra:ra_72,s0:s0_67,s1:a0_76,s2:s2_68,s3:s3_69,s4:s4_70,s5:s5_71,s6:s6_74,s7:s7_75,sp:sp_66,t1:t1_120
		defs: a0:a0_110,a2:a2_112,a3:a3_113,a4:a4_114,fa3:fa3_121,fa4:fa4_118,fa5:fa5_119,gp:gp_116,ra:ra_106,s0:s0_101,s1:s1_107,s2:s2_102,s3:s3_103,s4:s4_104,s5:s5_105,s6:s6_108,sp:sp_100,t1:t1_120
	branch a0_110 < 0x0000000000000000 l0000000000017D54
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0000000000017DD8:
	word64 s0_127
	word64 s2_128
	word64 s3_129
	word64 s4_130
	word64 s5_131
	word64 ra_132
	word64 s1_133
	word64 s6_134
	word64 s7_135
	word64 a0_136
	word64 a1_137
	word64 a2_138
	word64 a3_139
	word64 a4_140
	word64 gp_142
	word64 fa4_144
	word64 fa5_145
	word64 t1_146
	word64 fa3_147
	word64 sp_126
	call Mem97[gp + -1960:word64] (retsize: 0;)
		uses: a0:s1_107,a1:a0_110,a2:a2_112,a3:a3_113,a4:a4_114,fa3:fa3_147,fa4:fa4_144,fa5:fa5_145,gp:gp_116,ra:ra_106,s0:s0_101,s1:s1_107,s2:s2_102,s3:s3_103,s4:s4_104,s5:s5_105,s6:s6_108,s7:a0_110,sp:sp_100,t1:t1_146
		defs: a0:a0_136,a1:a1_137,a2:a2_138,a3:a3_139,a4:a4_140,fa3:fa3_147,fa4:fa4_144,fa5:fa5_145,gp:gp_142,ra:ra_132,s0:s0_127,s1:s1_133,s2:s2_128,s3:s3_129,s4:s4_130,s5:s5_131,s6:s6_134,s7:s7_135,sp:sp_126,t1:t1_146
	branch a0_136 == 0x0000000000000000 l0000000000017DF4
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0000000000017DEC:
	Mem150[s4_130:word64] = __strdup(a0_136)
	sp_126 = sp_126 + 0xFFFFFFFFFFFFFFF8
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0000000000017DF4:
	word64 s0_170
	word64 s2_171
	word64 s3_172
	word64 s4_173
	word64 s5_174
	word64 ra_175
	word64 s1_176
	word64 s6_177
	word64 s7_178
	word64 a0_179
	word64 a1_180
	word64 a2_181
	word64 a3_182
	word64 a4_183
	word64 gp_185
	word64 fa4_187
	word64 fa5_188
	word64 t1_189
	word64 fa3_190
	word64 sp_169
	call Mem152[gp_142 + -1968:word64] (retsize: 0;)
		uses: a0:s7_135,a1:a1_137,a2:a2_138,a3:a3_139,a4:a4_140,fa3:fa3_190,fa4:fa4_187,fa5:fa5_188,gp:gp_142,ra:ra_132,s0:s0_127,s1:s1_133,s2:s2_128,s3:s3_129,s4:s4_130,s5:s5_131,s6:s6_134,s7:s7_135,sp:sp_168,t1:t1_189
		defs: a0:a0_179,a1:a1_180,a2:a2_181,a3:a3_182,a4:a4_183,fa3:fa3_190,fa4:fa4_187,fa5:fa5_188,gp:gp_185,ra:ra_175,s0:s0_170,s1:s1_176,s2:s2_171,s3:s3_172,s4:s4_173,s5:s5_174,s6:s6_177,s7:s7_178,sp:sp_169,t1:t1_189
	branch a0_179 == 0x0000000000000000 l0000000000017E0C
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0000000000017E04:
	Mem193[s3_172:word64] = __strdup(a0_179)
	sp_169 = sp_169 + 0xFFFFFFFFFFFFFFF8
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0000000000017E0C:
	word64 fa4_230
	word64 fa5_231
	word64 t1_232
	word64 fa3_233
	call Mem195[gp_185 + -1976:word64] (retsize: 0;)
		uses: a0:s1_176,a1:a1_180,a2:a2_181,a3:a3_182,a4:a4_183,fa3:fa3_233,fa4:fa4_230,fa5:fa5_231,gp:gp_185,ra:ra_175,s0:s0_170,s1:s1_176,s2:s2_171,s3:s3_172,s4:s4_173,s5:s5_174,s6:s6_177,s7:s7_178,sp:sp_211,t1:t1_232
		defs: a2:a2_224,a3:a3_225,a4:a4_226,fa3:fa3_233,fa4:fa4_230,fa5:fa5_231,gp:gp_228,ra:ra_218,s0:s0_213,s1:s1_219,s2:s2_214,s3:s3_215,s4:s4_216,s5:s5_217,s6:s6_220,s7:s7_221,sp:sp_212,t1:t1_232
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0000000000017E18:
	word64 a2_264
	word64 a3_265
	word64 a4_266
	word64 fa4_270
	word64 fa5_271
	word64 t1_272
	word64 fa3_273
	word64 s0_253
	word64 s2_254
	word64 s3_255
	word64 s4_256
	word64 s5_257
	word64 ra_258
	word64 s6_260
	word64 s7_261
	word64 a0_262
	word64 sp_252
	call Mem235[gp_228 + -1952:word64] (retsize: 0;)
		uses: a0:30,a1:16,a2:a2_248,a3:a3_249,a4:a4_250,fa3:fa3_273,fa4:fa4_270,fa5:fa5_271,gp:gp_234,ra:ra_244,s0:s0_239,s1:s1_245,s2:s2_240,s3:s3_241,s4:s4_242,s5:s5_243,s6:s6_246,s7:s7_247,sp:sp_251,t1:t1_272
		defs: a0:a0_262,a2:a2_264,a3:a3_265,a4:a4_266,fa3:fa3_273,fa4:fa4_270,fa5:fa5_271,gp:gp_268,ra:ra_258,s0:s0_253,s2:s2_254,s3:s3_255,s4:s4_256,s5:s5_257,s6:s6_260,s7:s7_261,sp:sp_252,t1:t1_272
	word64 s1_274 = a0_262
	branch a0_262 == 0x0000000000000000 l0000000000017EE8
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0000000000017EE8:
	word64 fa4_296
	word64 fa5_297
	word64 t1_298
	word64 fa3_299
	call Mem235[gp + -1952:word64] (retsize: 0;)
		uses: a0:31,a1:16,a2:a2_264,a3:a3_265,a4:a4_266,fa3:fa3_299,fa4:fa4_296,fa5:fa5_297,gp:gp_268,ra:ra_258,s0:s0_253,s1:a0_262,s2:s2_254,s3:s3_255,s4:s4_256,s5:s5_257,s6:s6_260,s7:s7_261,sp:sp_252,t1:t1_298
		defs: a0:a0_288,fa3:fa3_299,fa4:fa4_296,fa5:fa5_297,gp:gp_294,ra:ra_284,s0:s0_279,s2:s2_280,s3:s3_281,s4:s4_282,s5:s5_283,s6:s6_286,s7:s7_287,sp:sp_278,t1:t1_298
	s1_274 = a0_262
	branch a0_262 != 0x0000000000000000 l0000000000017E30
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0000000000017F00:
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0000000000017E30:
	word64 a4_303 = (int64) Mem235[s0_253 + 4:uint32]
	word64 a5_304 = (int64) Mem235[s0_253 + 12:uint32]
	word64 a1_305 = (int64) Mem235[s0_253:uint32]
	word64 a2_306 = (int64) Mem235[s0_253 + 8:uint32]
	word64 a3_308 = Mem235[gp + -2008:word64]
	word64 a6_311 = 1
	Mem313[s1_274 + 76:word32] = (word32) a6_311
	word64 s2_327
	word64 s5_330
	word64 s1_332
	word64 a0_335
	word64 a3_338
	word64 a4_339
	word64 gp_341
	word64 fa4_343
	word64 fa5_344
	word64 t1_345
	word64 fa3_346
	word64 sp_325
	word64 a1_336
	word64 a2_337
	call a3_308 (retsize: 0;)
		uses: a0:a0_323,a1:a4_303 << 0x00000000 | a1_305,a2:a5_304 << 0x00000000 | a2_306,a3:a3_308,a4:a4_303 << 0x00000000,a5:a5_304 << 0x00000000,a6:a6_311,fa3:fa3_346,fa4:fa4_343,fa5:fa5_344,gp:gp_307,ra:ra_320,s0:s0_301,s1:s1_312,s2:s2_316,s3:s3_317,s4:s4_318,s5:s5_319,s6:s6_321,s7:s7_322,sp:sp_324,t1:t1_345
		defs: a0:a0_335,a1:a1_336,a2:a2_337,a3:a3_338,a4:a4_339,fa3:fa3_346,fa4:fa4_343,fa5:fa5_344,gp:gp_341,s1:s1_332,s2:s2_327,s5:s5_330,sp:sp_325,t1:t1_345
	branch a0_335 == 0x0000000000000000 l0000000000017E88
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0000000000017E68:
	word64 a0_348 = Mem313[a0_335 + 32:word64]
	branch a0_348 == 0x0000000000000000 l0000000000017E78
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0000000000017E70:
	Mem351[s2_327:word64] = __strdup(a0_348)
	sp_325 = sp_325 + 0xFFFFFFFFFFFFFFF8
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0000000000017E78:
	branch (word64) ((real32) Mem353[a0_335 + 52:real32] == (real32) 0x0000000000000000) == 0x0000000000000000 l0000000000017EBC
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0000000000017EBC:
	a1_336 = 1
	__asprintf_chk(s5_330, a1_336, 0x0000000000012B80, 0x00000000)
	a2_337 = 0x0000000000012B80
	sp_325 = sp_325 + 0xFFFFFFFFFFFFFFF8
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0000000000017E88:
	word64 s0_396
	word64 s3_398
	word64 s6_403
	word64 gp_411
	word64 fa4_413
	word64 fa5_414
	word64 t1_415
	word64 fa3_416
	call Mem374[gp_341 + -1976:word64] (retsize: 0;)
		uses: a0:s1_332,a1:a1_388,a2:a2_390,a3:a3_338,a4:a4_339,fa3:fa3_416,fa4:fa4_413,fa5:fa5_414,gp:gp_341,ra:Mem374[sp_373 + 72:word64],s0:Mem374[sp_373 + 64:word64],s1:Mem374[sp_373 + 56:word64],s2:Mem374[sp_373 + 48:word64],s3:Mem374[sp_373 + 40:word64],s4:Mem374[sp_373 + 32:word64],s5:Mem374[sp_373 + 24:word64],s6:Mem374[sp_373 + 16:word64],s7:Mem374[sp_373 + 8:word64],sp:sp_373 + 80,t1:t1_415
		defs: fa3:fa3_416,fa4:fa4_413,fa5:fa5_414,gp:gp_411,s0:s0_396,s3:s3_398,s6:s6_403,t1:t1_415
	s0Out = s0_396
	s3Out = s3_398
	s6Out = s6_403
	return gp_411
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0000000000017D54:
	s0Out = s0
	s3Out = s3
	s6Out = s6
	return gp
// DataOut:
// DataOut (flags):
// SymbolicIn:

fn0000000000017D10_exit:
// DataOut:
// DataOut (flags):
// SymbolicIn:



word64 fn0000000000017F04(word64 gp, word64 a0, word64 a1, word64 a2, word64 a3)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  a0:[0..63] a1:[0..63] a2:[0..63] a3:[0..63] gp:[0..63]
// LiveOut: a0
// Trashed: a0 a1 a2 a3 a4 a5 a6 t1 t3
// Preserved: a7 ra s0 s1 s2 s3 s4 s5 s6 sp
fn0000000000017F04_entry:
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0000000000017F04:
	word64 a0_149
	word64 a0_121
	word64 a5_7 = Mem5[gp + -1936:word64]
	word64 a3_32
	word64 a4_232
	fn00000000000182B4(a0, out a3_32, out a4_232)
	branch a1 == 32 l0000000000018048
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0000000000018048:
	a0_121 = (uint64) (uint32) __asprintf_chk(fp + -80, 1, 0x0000000000012B88, 0x00000000)
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0000000000017F60:
	word64 a1_51 = 24
	branch a1 == a1_51 l0000000000018070
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0000000000018070:
	a0_121 = (uint64) (uint32) __asprintf_chk(fp + -80, 1, 0x0000000000012BA8, 0x00000000)
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0000000000017F68:
	word64 a0_61 = 16
	branch a1 == a0_61 l00000000000180D8
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00000000000180D8:
	a0_121 = (uint64) (uint32) __asprintf_chk(fp + -80, 1, 0x0000000000012BC0, 0x00000000)
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0000000000017F70:
	word64 a5_70 = 8
	branch a1 == a5_70 l00000000000180F8
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00000000000180F8:
	a0_121 = (uint64) (uint32) __asprintf_chk(fp + -80, 1, 0x0000000000012BD8, 0x00000000)
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0000000000017F78:
	branch a1_51 <u a1 l0000000000017FBC
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0000000000017FBC:
	word64 a3_233
	word64 a4_234
	fn00000000000182B4(a2, out a3_233, out a4_234)
	word64 a3_235
	word64 a4_236
	fn00000000000182B4(a3, out a3_235, out a4_236)
	a0_121 = (uint64) (uint32) __asprintf_chk(fp + -80, 1, 0x0000000000012BF0, 0x00000000)
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0000000000017F7C:
	branch a0_61 <u a1 l0000000000018094
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0000000000018094:
	word64 a4_238
	word64 a3_237
	fn00000000000182B4(a2, out a3_237, out a4_238)
	word64 a3_239
	word64 a4_240
	fn00000000000182B4(a3, out a3_239, out a4_240)
	a0_121 = (uint64) (uint32) __asprintf_chk(fp + -80, 1, 0x0000000000012C10, 0x00000000)
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0000000000017F80:
	branch a5_70 <u a1 l0000000000018008
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0000000000018008:
	word64 a3_241
	word64 a4_242
	fn00000000000182B4(a2, out a3_241, out a4_242)
	word64 a4_244
	word64 a3_243
	fn00000000000182B4(a3, out a3_243, out a4_244)
	a0_121 = (uint64) (uint32) __asprintf_chk(fp + -80, 1, 0x0000000000012C30, 0x00000000)
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0000000000017FF8:
	branch a0_121 == -1 l0000000000017F84
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0000000000018000:
	a0_149 = qwLoc58
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0000000000017F84:
	a0_149 = 0
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0000000000017F88:
	branch a5_7 != Mem29[gp + -1936:word64] l0000000000018114
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0000000000018114:
	__stack_chk_fail()
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0000000000017F94:
	return a0_149
// DataOut:
// DataOut (flags):
// SymbolicIn:

fn0000000000017F04_exit:
// DataOut:
// DataOut (flags):
// SymbolicIn:



word64 fn0000000000018118(word64 gp, word64 a0, word64 a1)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  a0:[0..63] a1:[0..63] gp:[0..63]
// LiveOut: a0
// Trashed: a0 a4 a5 t4
// Preserved: ra s0 sp t5
fn0000000000018118_entry:
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0000000000018118:
	word64 a0_119
	word64 a5_7 = Mem5[gp + -1936:word64]
	branch (a1 & 3) != 0x0000000000000000 l00000000000182A8
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00000000000182A8:
	a0_119 = 0
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0000000000018134:
	word64 t5_16 = (int64) (word32) (a1 >>u 3)
	branch (a1 & 7) == 4 l0000000000018264
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0000000000018264:
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0000000000018144:
	branch t5_16 == 0x0000000000000000 l00000000000181FC
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00000000000181FC:
	word64 t4_21 = fp + -280 + (((a1 & 3) << 0x00000000) >>u 0x00000000)
	Mem24[t4_21 + 4:word16] = 0x7261
	Mem27[t4_21:word16] = 0x7069
	Mem30[t4_21 + 6:word16] = 0x6170
	Mem33[t4_21 + 2:word16] = 0x2E36
	Mem34[t4_21 + 8:word16] = 0x002E
	a0_119 = __strdup(fp + -280)
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0000000000018248:
	branch a5_7 != Mem38[gp + -1936:word64] l00000000000182B0
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00000000000182B0:
	__stack_chk_fail()
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0000000000018254:
	return a0_119
// DataOut:
// DataOut (flags):
// SymbolicIn:

fn0000000000018118_exit:
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0000000000018148:
	word64 a1_102 = (int64) ((word32) t5_16 + -1)
	word64 a4_104 = a1 & 3
	word64 t1_47 = 9
	word64 a7_48 = 46
	word64 t3_49 = -1
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0000000000018190:
	word64 a5_56 = (int64) Mem55[a0 + ((a1_102 << 0x00000000) >>u 0x00000000):byte]
	word64 a3_58 = (int64) ((word32) a4_104 + 1)
	word64 a6_60 = (a5_56 & 15) + 87
	branch t1_47 <u (a5_56 & 15) l00000000000181B4
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00000000000181B0:
	a6_60 = (a5_56 & 15) + 48
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00000000000181B4:
	Mem74[fp + -16 + ((a4_104 << 0x00000000) >>u 0x00000000) + 3832:byte] = (byte) a6_60
	Mem80[fp + -16 + ((a3_58 << 0x00000000) >>u 0x00000000) + 3832:byte] = (byte) a7_48
	word64 a2_81 = (int64) ((word32) a4_104 + 2)
	word64 a3_82 = (int64) ((word32) a4_104 + 3)
	word64 a6_83 = (a5_56 >>u 0x00000004) + 48
	branch t1_47 >=u a5_56 >>u 0x00000004 l0000000000018160
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00000000000181EC:
	a6_83 = (a5_56 >>u 0x00000004) + 87
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0000000000018160:
	Mem96[fp + -16 + ((a2_81 << 0x00000000) >>u 0x00000000) + 3832:byte] = (byte) a6_83
	Mem99[fp + -16 + ((a3_82 << 0x00000000) >>u 0x00000000) + 3832:byte] = (byte) a7_48
	a1_102 = (int64) ((word32) a1_102 + -1)
	a4_104 = (int64) ((word32) a4_104 + 4)
	branch a1_102 == t3_49 l00000000000181F4
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00000000000181F4:
// DataOut:
// DataOut (flags):
// SymbolicIn:



word64 fn00000000000182B4(word64 a0, ptr64 & a3Out, ptr64 & a4Out)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  a0:[0..31]
// LiveOut: a0 a3 a4
// Trashed: a0 a3 a4 a5
// Preserved: sp
fn00000000000182B4_entry:
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00000000000182B4:
	word64 a3_6 = (int64) (word32) (a0 >>u 24) | (int64) ((word32) (a0 << 0x0000000000000018))
	a3Out = a3_6
	word64 a4_11 = (int64) (word32) ((a0 & 0x0000000000FF0000) >> 0x00000008)
	a4Out = a4_11
	return a3_6 | a4_11 | (int64) ((word32) ((a0 & 65280) << 0x0000000000000008))
// DataOut:
// DataOut (flags):
// SymbolicIn:

fn00000000000182B4_exit:
// DataOut:
// DataOut (flags):
// SymbolicIn:



void fn00000000000182E8(word64 ra, word64 a0, word64 a1, word64 a2)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  a0:[0..63] a1:[0..63] a2:[0..63] ra:[0..63]
// LiveOut:
// Trashed: a0 a1 a2 a5
// Preserved: ra s0 s1 s2 s3 s4 s5 sp
fn00000000000182E8_entry:
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00000000000182E8:
	word64 s2_12 = 0x0000000000019E20 - 0x0000000000019E18
	word64 sp_3 = fp + -64
	word64 s0_31 = 0x0000000000019E18
	word64 s2_23 = s2_12 >> 0x00000003
	branch s2_12 >> 0x00000003 == 0x0000000000000000 l0000000000018354
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0000000000018324:
	word64 s5_25 = a0
	word64 s4_27 = a1
	word64 s3_29 = a2
	word64 s1_30 = 0
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0000000000018334:
	word64 s0_46
	word64 a5_56
	call Mem22[s0_31:word64] (retsize: 0;)
		uses: a0:s5_38,a1:s4_36,a2:s3_34,a5:a5_56,ra:ra_43,s0:s0_31,s1:s1_40 + 1,s2:s2_42,s3:s3_34,s4:s4_36,s5:s5_38,sp:sp_44
		defs: a5:a5_56,ra:ra_48,s0:s0_46,s1:s1_49,s2:s2_47,s3:s3_50,s4:s4_51,s5:s5_52,sp:sp_45
	s0_31 = s0_46 + 8
	branch s2_23 != s1_30 l0000000000018334
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0000000000018354:
	return
// DataOut:
// DataOut (flags):
// SymbolicIn:

fn00000000000182E8_exit:
// DataOut:
// DataOut (flags):
// SymbolicIn:



void fn0000000000018378()
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse: 
// LiveOut:
// Trashed:
// Preserved: sp
fn0000000000018378_entry:
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0000000000018378:
	return
// DataOut:
// DataOut (flags):
// SymbolicIn:

fn0000000000018378_exit:
// DataOut:
// DataOut (flags):
// SymbolicIn:



