void herror()
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse: 
// LiveOut:
// Trashed:
// Preserved:
// Terminates process
herror_exit:
// DataOut:
// DataOut (flags):
// SymbolicIn:

herror_entry:
// DataOut:
// DataOut (flags):
// SymbolicIn:



void __strdup()
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse: 
// LiveOut:
// Trashed:
// Preserved:
// Terminates process
__strdup_exit:
// DataOut:
// DataOut (flags):
// SymbolicIn:

__strdup_entry:
// DataOut:
// DataOut (flags):
// SymbolicIn:



void clock_gettime()
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse: 
// LiveOut:
// Trashed:
// Preserved:
// Terminates process
clock_gettime_exit:
// DataOut:
// DataOut (flags):
// SymbolicIn:

clock_gettime_entry:
// DataOut:
// DataOut (flags):
// SymbolicIn:



void close()
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse: 
// LiveOut:
// Trashed:
// Preserved:
// Terminates process
close_exit:
// DataOut:
// DataOut (flags):
// SymbolicIn:

close_entry:
// DataOut:
// DataOut (flags):
// SymbolicIn:



void read()
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse: 
// LiveOut:
// Trashed:
// Preserved:
// Terminates process
read_exit:
// DataOut:
// DataOut (flags):
// SymbolicIn:

read_entry:
// DataOut:
// DataOut (flags):
// SymbolicIn:



void inet_ntop()
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse: 
// LiveOut:
// Trashed:
// Preserved:
// Terminates process
inet_ntop_exit:
// DataOut:
// DataOut (flags):
// SymbolicIn:

inet_ntop_entry:
// DataOut:
// DataOut (flags):
// SymbolicIn:



void snprintf()
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse: 
// LiveOut:
// Trashed:
// Preserved:
// Terminates process
snprintf_exit:
// DataOut:
// DataOut (flags):
// SymbolicIn:

snprintf_entry:
// DataOut:
// DataOut (flags):
// SymbolicIn:



void getaddrinfo()
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse: 
// LiveOut:
// Trashed:
// Preserved:
// Terminates process
getaddrinfo_exit:
// DataOut:
// DataOut (flags):
// SymbolicIn:

getaddrinfo_entry:
// DataOut:
// DataOut (flags):
// SymbolicIn:



void dlopen()
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse: 
// LiveOut:
// Trashed:
// Preserved:
// Terminates process
dlopen_exit:
// DataOut:
// DataOut (flags):
// SymbolicIn:

dlopen_entry:
// DataOut:
// DataOut (flags):
// SymbolicIn:



void open()
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse: 
// LiveOut:
// Trashed:
// Preserved:
// Terminates process
open_exit:
// DataOut:
// DataOut (flags):
// SymbolicIn:

open_entry:
// DataOut:
// DataOut (flags):
// SymbolicIn:



void __snprintf_chk()
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse: 
// LiveOut:
// Trashed:
// Preserved:
// Terminates process
__snprintf_chk_exit:
// DataOut:
// DataOut (flags):
// SymbolicIn:

__snprintf_chk_entry:
// DataOut:
// DataOut (flags):
// SymbolicIn:



void dlsym()
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse: 
// LiveOut:
// Trashed:
// Preserved:
// Terminates process
dlsym_exit:
// DataOut:
// DataOut (flags):
// SymbolicIn:

dlsym_entry:
// DataOut:
// DataOut (flags):
// SymbolicIn:



void exit()
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse: 
// LiveOut:
// Trashed:
// Preserved:
// Terminates process
exit_exit:
// DataOut:
// DataOut (flags):
// SymbolicIn:

exit_entry:
// DataOut:
// DataOut (flags):
// SymbolicIn:



void getopt_long()
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse: 
// LiveOut:
// Trashed:
// Preserved:
// Terminates process
getopt_long_exit:
// DataOut:
// DataOut (flags):
// SymbolicIn:

getopt_long_entry:
// DataOut:
// DataOut (flags):
// SymbolicIn:



void __vasprintf_chk()
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse: 
// LiveOut:
// Trashed:
// Preserved:
// Terminates process
__vasprintf_chk_exit:
// DataOut:
// DataOut (flags):
// SymbolicIn:

__vasprintf_chk_entry:
// DataOut:
// DataOut (flags):
// SymbolicIn:



void __asprintf_chk()
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse: 
// LiveOut:
// Trashed:
// Preserved:
// Terminates process
__asprintf_chk_exit:
// DataOut:
// DataOut (flags):
// SymbolicIn:

__asprintf_chk_entry:
// DataOut:
// DataOut (flags):
// SymbolicIn:



void getnameinfo()
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse: 
// LiveOut:
// Trashed:
// Preserved:
// Terminates process
getnameinfo_exit:
// DataOut:
// DataOut (flags):
// SymbolicIn:

getnameinfo_entry:
// DataOut:
// DataOut (flags):
// SymbolicIn:



void memset()
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse: 
// LiveOut:
// Trashed:
// Preserved:
// Terminates process
memset_exit:
// DataOut:
// DataOut (flags):
// SymbolicIn:

memset_entry:
// DataOut:
// DataOut (flags):
// SymbolicIn:



void inet_pton()
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse: 
// LiveOut:
// Trashed:
// Preserved:
// Terminates process
inet_pton_exit:
// DataOut:
// DataOut (flags):
// SymbolicIn:

inet_pton_entry:
// DataOut:
// DataOut (flags):
// SymbolicIn:



void strcmp()
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse: 
// LiveOut:
// Trashed:
// Preserved:
// Terminates process
strcmp_exit:
// DataOut:
// DataOut (flags):
// SymbolicIn:

strcmp_entry:
// DataOut:
// DataOut (flags):
// SymbolicIn:



void free()
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse: 
// LiveOut:
// Trashed:
// Preserved:
// Terminates process
free_exit:
// DataOut:
// DataOut (flags):
// SymbolicIn:

free_entry:
// DataOut:
// DataOut (flags):
// SymbolicIn:



void __printf_chk()
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse: 
// LiveOut:
// Trashed:
// Preserved:
// Terminates process
__printf_chk_exit:
// DataOut:
// DataOut (flags):
// SymbolicIn:

__printf_chk_entry:
// DataOut:
// DataOut (flags):
// SymbolicIn:



void __sprintf_chk()
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse: 
// LiveOut:
// Trashed:
// Preserved:
// Terminates process
__sprintf_chk_exit:
// DataOut:
// DataOut (flags):
// SymbolicIn:

__sprintf_chk_entry:
// DataOut:
// DataOut (flags):
// SymbolicIn:



void fwrite()
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse: 
// LiveOut:
// Trashed:
// Preserved:
// Terminates process
fwrite_exit:
// DataOut:
// DataOut (flags):
// SymbolicIn:

fwrite_entry:
// DataOut:
// DataOut (flags):
// SymbolicIn:



void memcmp()
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse: 
// LiveOut:
// Trashed:
// Preserved:
// Terminates process
memcmp_exit:
// DataOut:
// DataOut (flags):
// SymbolicIn:

memcmp_entry:
// DataOut:
// DataOut (flags):
// SymbolicIn:



void fputs()
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse: 
// LiveOut:
// Trashed:
// Preserved:
// Terminates process
fputs_exit:
// DataOut:
// DataOut (flags):
// SymbolicIn:

fputs_entry:
// DataOut:
// DataOut (flags):
// SymbolicIn:



void isatty()
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse: 
// LiveOut:
// Trashed:
// Preserved:
// Terminates process
isatty_exit:
// DataOut:
// DataOut (flags):
// SymbolicIn:

isatty_entry:
// DataOut:
// DataOut (flags):
// SymbolicIn:



void __fprintf_chk()
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse: 
// LiveOut:
// Trashed:
// Preserved:
// Terminates process
__fprintf_chk_exit:
// DataOut:
// DataOut (flags):
// SymbolicIn:

__fprintf_chk_entry:
// DataOut:
// DataOut (flags):
// SymbolicIn:



void __libc_start_main()
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse: 
// LiveOut:
// Trashed:
// Preserved:
// Terminates process
__libc_start_main_exit:
// DataOut:
// DataOut (flags):
// SymbolicIn:

__libc_start_main_entry:
// DataOut:
// DataOut (flags):
// SymbolicIn:



void putchar()
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse: 
// LiveOut:
// Trashed:
// Preserved:
// Terminates process
putchar_exit:
// DataOut:
// DataOut (flags):
// SymbolicIn:

putchar_entry:
// DataOut:
// DataOut (flags):
// SymbolicIn:



void fputc()
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse: 
// LiveOut:
// Trashed:
// Preserved:
// Terminates process
fputc_exit:
// DataOut:
// DataOut (flags):
// SymbolicIn:

fputc_entry:
// DataOut:
// DataOut (flags):
// SymbolicIn:



void __stack_chk_fail()
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse: 
// LiveOut:
// Trashed:
// Preserved:
// Terminates process
__stack_chk_fail_exit:
// DataOut:
// DataOut (flags):
// SymbolicIn:

__stack_chk_fail_entry:
// DataOut:
// DataOut (flags):
// SymbolicIn:



void __errno_location()
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse: 
// LiveOut:
// Trashed:
// Preserved:
// Terminates process
__errno_location_exit:
// DataOut:
// DataOut (flags):
// SymbolicIn:

__errno_location_entry:
// DataOut:
// DataOut (flags):
// SymbolicIn:



void strtol()
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse: 
// LiveOut:
// Trashed:
// Preserved:
// Terminates process
strtol_exit:
// DataOut:
// DataOut (flags):
// SymbolicIn:

strtol_entry:
// DataOut:
// DataOut (flags):
// SymbolicIn:



void strchr()
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse: 
// LiveOut:
// Trashed:
// Preserved:
// Terminates process
strchr_exit:
// DataOut:
// DataOut (flags):
// SymbolicIn:

strchr_entry:
// DataOut:
// DataOut (flags):
// SymbolicIn:



void memcpy()
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse: 
// LiveOut:
// Trashed:
// Preserved:
// Terminates process
memcpy_exit:
// DataOut:
// DataOut (flags):
// SymbolicIn:

memcpy_entry:
// DataOut:
// DataOut (flags):
// SymbolicIn:



void abort()
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse: 
// LiveOut:
// Trashed:
// Preserved:
// Terminates process
abort_exit:
// DataOut:
// DataOut (flags):
// SymbolicIn:

abort_entry:
// DataOut:
// DataOut (flags):
// SymbolicIn:



void freeaddrinfo()
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse: 
// LiveOut:
// Trashed:
// Preserved:
// Terminates process
freeaddrinfo_exit:
// DataOut:
// DataOut (flags):
// SymbolicIn:

freeaddrinfo_entry:
// DataOut:
// DataOut (flags):
// SymbolicIn:



void fn0000000000015180(word64 ra, word64 gp, word64 t1, word64 s0, word64 s1, word64 a0, word64 a1, word64 a6, word64 a7, word64 s2, word64 s3, word64 s4, word64 s5, word64 s6, word64 s7, word64 s8, word64 s9, word64 s10, word64 s11, word64 t3, word64 fa3, word64 fa4, word64 fa5)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  a0:[0..63] a1:[0..63] a6:[0..63] a7:[0..63] fa3:[0..63] fa4:[0..63] fa5:[0..63] gp:[0..63] ra:[0..63] s0:[0..63] s1:[0..63] s10:[0..63] s11:[0..63] s2:[0..63] s3:[0..63] s4:[0..63] s5:[0..63] s6:[0..63] s7:[0..63] s8:[0..63] s9:[0..63] t1:[0..63] t3:[0..63]
// LiveOut:
// Trashed: a0 a1 a2 a3 a4 a5 a6 a7 fa3 fa4 fa5 gp ra s0 s1 s10 s11 s2 s3 s4 s5 s6 s7 s8 s9 t1 t3
// Preserved: sp
fn0000000000015180_entry:
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0000000000015180:
	word64 sp_290 = fp + -448 + 0xFFFFFFFFFFFFFFE8
	word64 a5_7 = Mem5[gp + -1936:word64]
	word64 s3_1018 = a0
	word64 s0_136 = 0
	word64 s6_43 = 0
	word64 s9_44 = 0
	word64 s10_45 = 0
	word64 s7_49 = 1
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0000000000015200:
	word64 a0_65 = (uint64) (uint32) getopt_long(a0, a1, 0x00000000000119A8, 0x00000000000108E0, 0)
	sp_290 = sp_290 + 0xFFFFFFFFFFFFFFF8
	branch a0_65 == -1 l0000000000015348
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0000000000015348:
	word64 s1_149
	word64 s4_373
	word64 a4_73 = (int64) Mem50[gp + -1904:int32]
	branch a4_73 >= a0 l0000000000015428
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0000000000015428:
	s4_373 = 0
	s1_149 = 0
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0000000000015350:
	word64 a1_76 = (int64) ((word32) a4_73 + 1)
	Mem79[gp + 2192:word32] = (word32) a1_76
	word64 s2_78 = a1 + (a4_73 << 0x00000003)
	s1_149 = Mem79[s2_78:word64]
	s4_373 = 0
	branch a1_76 >= a0 l0000000000015378
// DataOut:
// DataOut (flags):
// SymbolicIn:

l000000000001536C:
	s4_373 = Mem79[s2_78 + 8:word64]
	Mem84[gp + 2192:word32] = (word32) (int64) ((word32) a4_73 + 2)
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0000000000015378:
	branch s6_43 != 0x0000000000000000 l0000000000015588
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0000000000015588:
	__printf_chk(1, 0x00000000000119C8, 0x00000000)
// DataOut:
// DataOut (flags):
// SymbolicIn:

l000000000001537C:
	branch (int64) Mem98[sp_290 + 28:int32] == 0x0000000000000000 l00000000000153B4
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0000000000015384:
	branch (int64) Mem98[sp_290:int32] == 0x0000000000000000 l00000000000153B4
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00000000000153B4:
	word64 a6_1049
	word64 a4_600
	word64 a0_597
	word64 a5_385
	word64 a0_488
	word64 a0_386
	word64 a5_117
	word64 s2_131
	Mem104[sp_290 + 8:word64] = a0_65
	branch s9_44 == 0x0000000000000000 l0000000000015924
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0000000000015924:
	word64 a0_110 = fn0000000000017924(gp, out a1_111, out a2_112, out a3_113, out a4_3203, out a6_1049)
	a5_117 = Mem104[sp_290 + 8:word64]
	branch a0_110 != 0x0000000000000000 l0000000000015458
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0000000000015930:
	branch (s0_136 & 65544) != 65544 l0000000000015458
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0000000000015940:
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00000000000153BC:
	word64 a0_124 = fn0000000000017924(gp, out a1_125, out a2_126, out a3_127, out a4_3204, out a6_1049)
	s2_131 = s0_136 | 2
	a5_117 = Mem104[sp_290 + 8:word64]
	branch a0_124 == 0x0000000000000000 l0000000000015434
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0000000000015434:
	branch (s0_136 & 65544) != 65544 l00000000000153CC
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0000000000015444:
	s0_136 = s0_136 | 2
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0000000000015448:
	s2_131 = s0_136 | 0x0000000000004000
	branch s9_44 != 0x0000000000000000 l00000000000153CC
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0000000000015454:
	s0_136 = s2_131
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0000000000015458:
	branch s10_45 == 0x0000000000000000 l0000000000015CE4
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0000000000015CE4:
	branch s1_149 != 0x0000000000000000 l0000000000015510
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0000000000015CE8:
	branch (int64) Mem104[gp + -2028:int32] != 0x0000000000000000 l00000000000153D8
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0000000000015CF0:
	fwrite(0x0000000000011A30, 1, 28, Mem104[gp + -1920:word64])
	fn0000000000015FCC(gp, 1)
// DataOut:
// DataOut (flags):
// SymbolicIn:

l000000000001545C:
	word64 a0_181 = fn00000000000166F4(gp, sp_290 + 28, s10_45, 1)
	branch a0_181 < 0x0000000000000000 l0000000000015BC8
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0000000000015BC8:
	branch (int64) Mem104[gp + -2028:int32] != 0x0000000000000000 l00000000000153D8
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0000000000015BD0:
	a0_488 = Mem104[gp + -1920:word64] (alias)
	branch (int64) Mem104[sp_290 + 28:int32] != 0x0000000000000000 l0000000000015E7C
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0000000000015E7C:
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0000000000015BDC:
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0000000000015474:
	Mem199[sp_290 + 8:word64] = a0_181
	word64 s1_200 = (int64) Mem199[sp_290 + 28:int32]
	Mem201[sp_290 + 32:word64] = 0x0000000000000000
	word64 a0_204 = (uint64) (uint32) clock_gettime(2, sp_290 + 40)
	word64 a5_206 = Mem201[sp_290:word64]
	branch a0_204 < 0x0000000000000000 l0000000000015CB0
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0000000000015494:
	word64 a5_252
	branch s1_200 == 0x0000000000000000 l0000000000015C48
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0000000000015C48:
	Mem210[sp_290:word64] = a5_206
	word64 s1_211 = Mem210[sp_290 + 0x0000000000000028:word64]
	word64 a0_212 = fn00000000000164D0(sp_290 + 0x00000000000000F8, 4)
	word64 a5_215 = Mem210[sp_290:word64]
	branch a0_212 < 0x0000000000000000 l0000000000015CB0
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0000000000015C64:
	branch a5_215 <= 15 l0000000000015C7C
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0000000000015C6C:
	word64 a3_219 = 1
	branch a3_219 >=u (s1_211 | 4) l0000000000015DB8
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0000000000015DB8:
	branch (s1_211 | 4) == a3_219 l0000000000015E00
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0000000000015E00:
	Mem221[sp_290 + 0x00000000000000F8:byte] = 0xC0
	Mem223[sp_290 + 0x00000000000000F9:byte] = 0xA8
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0000000000015DBC:
	Mem225[sp_290 + 0x00000000000000F8:byte] = 0xAC
	Mem230[sp_290 + 0x00000000000000F9:byte] = (byte) (Mem225[sp_290 + 0x0000000000000028:word64] >> 0x00000004 & 15 | 16)
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0000000000015C7C:
	Mem233[sp_290 + 0x00000000000000F8:byte] = 0x0A
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0000000000015C84:
	word64 a4_236 = (int64) Mem235[sp_290 + 0x00000000000000F8:int32]
	Mem244[sp_290:word64] = a5_215
	Mem245[sp_290 + 0x0000000000000010:word32] = (word32) a4_236
	word64 a0_250 = inet_ntop(2, sp_290 + 0x0000000000000010, sp_290 + 0x0000000000000100, 64)
	a5_252 = Mem245[sp_290 + 0xFFFFFFFFFFFFFFF8:word64]
	branch a0_250 != 0x0000000000000000 l00000000000154DC
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0000000000015498:
	Mem259[sp_290 + 0x0000000000000030:byte] = (byte) (Mem201[sp_290 + 0x0000000000000028:word64] & 1 | -4)
	branch fn00000000000164D0(sp_290 + 0x0000000000000031, 15) < 0x0000000000000000 l0000000000015CB0
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00000000000154BC:
	word64 a0_273 = inet_ntop(10, sp_290 + 0x0000000000000030, sp_290 + 0x0000000000000100, 64)
	a5_252 = Mem259[sp_290 + 0xFFFFFFFFFFFFFFF8:word64]
	branch a0_273 == 0x0000000000000000 l0000000000015CB0
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00000000000154DC:
	word64 sp_282 = sp_290 + 0x0000000000000000
	Mem285[sp_282 + 8:word64] = a5_252
	word64 a0_289 = (uint64) (uint32) __asprintf_chk(sp_282 + 32, 1, 0x0000000000011A90, 0x00000000)
	sp_290 = sp_282 + 0xFFFFFFFFFFFFFFF8
	a5_117 = Mem285[sp_282:word64]
	branch a0_289 == -1 l0000000000015CB0
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0000000000015508:
	s1_149 = Mem285[sp_282 + 0x0000000000000018:word64]
	branch s1_149 == 0x0000000000000000 l0000000000015CB0
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0000000000015CB0:
	branch (int64) Mem299[gp + -2028:int32] != 0x0000000000000000 l00000000000153D8
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0000000000015CB8:
	__fprintf_chk(Mem299[gp + -1920:word64], 1, 0x0000000000011A98, 0x00000000)
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00000000000153CC:
	branch s10_45 == 0x0000000000000000 l00000000000155A8
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00000000000155A8:
	branch (int64) Mem104[sp_290 + 28:int32] != 0x0000000000000000 l0000000000015944
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0000000000015944:
	Mem323[sp_290 + 8:word64] = a5_117
	word64 a0_325 = fn00000000000169D8(gp, s9_44)
	s1_149 = a0_325
	s0_136 = s2_131
	a5_117 = Mem323[sp_290 + 8:word64]
	branch a0_325 != 0x0000000000000000 l0000000000015510
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0000000000015510:
	branch (int64) Mem336[sp_290:int32] != 0x0000000000000000 l00000000000155D8
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00000000000155B0:
	branch (int64) Mem104[sp_290:int32] == 0x0000000000000000 l000000000001598C
// DataOut:
// DataOut (flags):
// SymbolicIn:

l000000000001598C:
	Mem341[sp_290:word64] = a5_117
	word64 a0_342 = fn00000000000169D8(gp, s9_44)
	s1_149 = a0_342
	branch a0_342 == 0x0000000000000000 l0000000000015964
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00000000000159A4:
	s0_136 = s2_131
	a5_117 = Mem341[sp_290:word64]
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0000000000015518:
	Mem359[sp_290:word64] = a5_117
	word64 a0_362 = strchr(s1_149, 58)
	sp_290 = sp_290 + 0xFFFFFFFFFFFFFFF8
	a5_117 = Mem359[sp_290:word64]
	branch a0_362 == 0x0000000000000000 l00000000000155D8
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0000000000015530:
	Mem367[sp_290 + 28:word32] = 0x00000001
	branch s4_373 == 0x0000000000000000 l0000000000015BEC
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0000000000015BEC:
	Mem380[sp_290:word64] = a5_117
	word64 a0_383 = strchr(s1_149, 47)
	a0_386 = a0_383 (alias)
	sp_290 = sp_290 + 0xFFFFFFFFFFFFFFF8
	a5_385 = Mem380[sp_290 + 0xFFFFFFFFFFFFFFF8:word64]
	branch a0_383 != 0x0000000000000000 l0000000000015BB8
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0000000000015C04:
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00000000000155B8:
	Mem389[sp_290:word64] = a5_117
	word64 a0_390 = fn00000000000169D8(gp, s9_44)
	s1_149 = a0_390
	branch a0_390 == 0x0000000000000000 l0000000000015964
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0000000000015964:
	branch (int64) Mem398[gp + -2028:int32] != 0x0000000000000000 l00000000000153D8
// DataOut:
// DataOut (flags):
// SymbolicIn:

l000000000001596C:
	__fprintf_chk(Mem398[gp + -1920:word64], 1, 0x0000000000011A50, 0x00000000)
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00000000000155D0:
	a5_117 = Mem389[sp_290:word64]
	s0_136 = s2_131
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00000000000155D8:
	branch s4_373 == 0x0000000000000000 l0000000000015BA0
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0000000000015BA0:
	Mem421[sp_290:word64] = a5_117
	word64 a0_424 = strchr(s1_149, 47)
	sp_290 = sp_290 + 0xFFFFFFFFFFFFFFF8
	a0_386 = a0_424 (alias)
	a5_385 = Mem421[sp_290:word64]
	branch a0_424 == 0x0000000000000000 l00000000000155FC
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0000000000015BB8:
	Mem429[a0_386:byte] = 0x00
	s4_373 = a0_386 + 1
	branch s4_373 == 0x0000000000000000 l00000000000155FC
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0000000000015BC4:
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00000000000155DC:
	branch (int64) Mem431[sp_290 + 28:int32] != 0x0000000000000000 l000000000001553C
// DataOut:
// DataOut (flags):
// SymbolicIn:

l000000000001553C:
	branch (int64) Mem437[gp + -2028:int32] != 0x0000000000000000 l00000000000153D8
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0000000000015544:
	__fprintf_chk(Mem437[gp + -1920:word64], 1, 0x0000000000011AD0, 0x00000000)
	fn0000000000015FCC(gp, 1)
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00000000000155E4:
	word64 a0_468 = fn00000000000166F4(gp, sp_290 + 28, s4_373, 0)
	a5_385 = a0_468
	branch a0_468 < 0x0000000000000000 l0000000000015B6C
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0000000000015B6C:
	branch (int64) Mem475[gp + -2028:int32] != 0x0000000000000000 l00000000000153D8
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0000000000015B74:
	a0_488 = Mem475[gp + -1920:word64] (alias)
	branch (int64) Mem475[sp_290 + 28:int32] != 0x0000000000000000 l0000000000015CD8
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0000000000015CD8:
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0000000000015B80:
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0000000000015B88:
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0000000000015B8C:
	__fprintf_chk(a0_488, 1, 0x0000000000011A70, 0x00000000)
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00000000000155FC:
	branch (int64) Mem499[sp_290 + 28:int32] == 0x0000000000000000 l00000000000159B0
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00000000000159B0:
	a0_597 = fn0000000000016D74(ra, gp, s1_149, a5_385, sp_290 + 56, s0_136, s4_373, s7_49, fa3, fa4, fa5, out a4_600)
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0000000000015604:
	a0_597 = fn00000000000175BC(gp, t1, s1_149, a5_385, sp_290 + 56, s0_136, fa3, fa4, fa5, out a4_600)
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0000000000015618:
	branch a0_597 < 0x0000000000000000 l00000000000153D8
// DataOut:
// DataOut (flags):
// SymbolicIn:

l000000000001561C:
	branch (s0_136 & 4294623231) != 0x0000000000000000 l0000000000015630
// DataOut:
// DataOut (flags):
// SymbolicIn:

l000000000001562C:
	s0_136 = s0_136 | 8
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0000000000015630:
	word64 sp_1024 = sp_290 + 0xFFFFFFFFFFFFFFF8
	branch (uint64) (uint32) isatty(1) == 0x0000000000000000 l0000000000015644
// DataOut:
// DataOut (flags):
// SymbolicIn:

l000000000001563C:
	a4_600 = 1
	Mem652[gp + 2064:word32] = (word32) a4_600
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0000000000015644:
	branch (s0_136 & 8) == 0x0000000000000000 l00000000000159C8
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00000000000159C8:
	branch (s0_136 & 128) != 0x0000000000000000 l0000000000015D18
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0000000000015D18:
	__printf_chk(1, 0x0000000000011C28, 0x00000000)
	sp_1024 = sp_1024 + 0xFFFFFFFFFFFFFFF8
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00000000000159D0:
	branch (s0_136 & 512) != 0x0000000000000000 l0000000000015D48
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0000000000015D48:
	__printf_chk(1, 0x0000000000011C38, 0x00000000)
	sp_1024 = sp_1024 + 0xFFFFFFFFFFFFFFF8
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00000000000159D8:
	branch (s0_136 & 64) == 0x0000000000000000 l00000000000159FC
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00000000000159E0:
	branch (int64) Mem658[sp_1024 + 28:int32] != 0x0000000000000000 l00000000000159FC
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00000000000159E8:
	__printf_chk(1, 0x0000000000011C48, 0x00000000)
	sp_1024 = sp_1024 + 0xFFFFFFFFFFFFFFF8
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00000000000159FC:
	branch (s0_136 & 256) != 0x0000000000000000 l0000000000015D30
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0000000000015D30:
	__printf_chk(1, 0x0000000000011C58, 0x00000000)
	sp_1024 = sp_1024 + 0xFFFFFFFFFFFFFFF8
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0000000000015A04:
	branch s0_136 << 0x0000000E < 0x0000000000000000 l0000000000015D78
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0000000000015D78:
	__printf_chk(1, 0x0000000000011C68, 0x00000000)
	sp_1024 = sp_1024 + 0xFFFFFFFFFFFFFFF8
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0000000000015A0C:
	branch (s0_136 & 1024) == 0x0000000000000000 l0000000000015A2C
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0000000000015A14:
	branch Mem658[sp_1024 + 224:word64] == 0x0000000000000000 l0000000000015A2C
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0000000000015A1C:
	__printf_chk(1, 0x0000000000011C78, 0x00000000)
	sp_1024 = sp_1024 + 0xFFFFFFFFFFFFFFF8
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0000000000015A2C:
	branch s0_136 << 0x00000014 >= 0x0000000000000000 l0000000000015A4C
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0000000000015A34:
	branch Mem658[sp_1024 + 232:word64] == 0x0000000000000000 l0000000000015A4C
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0000000000015A3C:
	__printf_chk(1, 0x0000000000011C88, 0x00000000)
	sp_1024 = sp_1024 + 0xFFFFFFFFFFFFFFF8
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0000000000015A4C:
	branch s0_136 << 0x00000012 >= 0x0000000000000000 l0000000000015A80
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0000000000015A54:
	word64 s2_747 = Mem658[sp_1024 + 240:word64]
	branch s2_747 == 0x0000000000000000 l0000000000015A80
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0000000000015A5C:
	word64 sp_753 = sp_1024 + 0xFFFFFFFFFFFFFFF8
	branch strchr(s2_747, 32) == 0x0000000000000000 l0000000000015DA4
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0000000000015DA4:
	__printf_chk(1, 0x0000000000011CA8, 0x00000000)
	sp_1024 = sp_753 + 0xFFFFFFFFFFFFFFF8
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0000000000015A70:
	__printf_chk(1, 0x0000000000011C98, 0x00000000)
	sp_1024 = sp_753 + 0xFFFFFFFFFFFFFFF8
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0000000000015A80:
	branch s0_136 << 0x00000013 >= 0x0000000000000000 l0000000000015AAC
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0000000000015A88:
	word64 sp_778 = sp_1024 + 0xFFFFFFFFFFFFFFF8
	branch strchr(sp_1024 + 152, 32) == 0x0000000000000000 l0000000000015D90
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0000000000015D90:
	__printf_chk(1, 0x0000000000011CC8, 0x00000000)
	sp_1024 = sp_778 + 0xFFFFFFFFFFFFFFF8
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0000000000015A9C:
	__printf_chk(1, 0x0000000000011CB8, 0x00000000)
	sp_1024 = sp_778 + 0xFFFFFFFFFFFFFFF8
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0000000000015AAC:
	branch (s0_136 & 1) == 0x0000000000000000 l0000000000015ACC
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0000000000015AB4:
	branch Mem658[sp_1024 + 112:word64] == 0x0000000000000000 l0000000000015ACC
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0000000000015ABC:
	__printf_chk(1, 0x0000000000011CD8, 0x00000000)
	sp_1024 = sp_1024 + 0xFFFFFFFFFFFFFFF8
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0000000000015ACC:
	branch (s0_136 & 2) != 0x0000000000000000 l0000000000015D60
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0000000000015D60:
	__printf_chk(1, 0x0000000000011CE8, 0x00000000)
	sp_1024 = sp_1024 + 0xFFFFFFFFFFFFFFF8
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0000000000015AD4:
	branch (s0_136 & 0x000000000000C000) != 0x000000000000C000 l00000000000153DC
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0000000000015AE0:
	branch Mem658[sp_1024 + 128:word64] == 0x0000000000000000 l0000000000015AF8
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0000000000015AE8:
	__printf_chk(1, 0x0000000000011CF8, 0x00000000)
	sp_1024 = sp_1024 + 0xFFFFFFFFFFFFFFF8
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0000000000015AF8:
	word64 s0_848 = Mem658[sp_1024 + 120:word64]
	branch s0_848 == 0x0000000000000000 l0000000000015B24
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0000000000015B00:
	word64 sp_854 = sp_1024 + 0xFFFFFFFFFFFFFFF8
	branch strchr(s0_848, 32) == 0x0000000000000000 l0000000000015E90
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0000000000015E90:
	__printf_chk(1, 0x0000000000011D18, 0x00000000)
	sp_1024 = sp_854 + 0xFFFFFFFFFFFFFFF8
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0000000000015B14:
	__printf_chk(1, 0x0000000000011D08, 0x00000000)
	sp_1024 = sp_854 + 0xFFFFFFFFFFFFFFF8
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0000000000015B24:
	word64 s0_873 = Mem658[sp_1024 + 136:word64]
	branch s0_873 == 0x0000000000000000 l0000000000015B50
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0000000000015B2C:
	word64 sp_879 = sp_1024 + 0xFFFFFFFFFFFFFFF8
	branch strchr(s0_873, 32) == 0x0000000000000000 l0000000000015EA4
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0000000000015EA4:
	__printf_chk(1, 0x0000000000011D38, 0x00000000)
	sp_1024 = sp_879 + 0xFFFFFFFFFFFFFFF8
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0000000000015B40:
	__printf_chk(1, 0x0000000000011D28, 0x00000000)
	sp_1024 = sp_879 + 0xFFFFFFFFFFFFFFF8
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0000000000015B50:
	branch Mem658[sp_1024 + 144:word64] == 0x0000000000000000 l00000000000153DC
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0000000000015B58:
	__printf_chk(1, 0x0000000000011D48, 0x00000000)
// DataOut:
// DataOut (flags):
// SymbolicIn:

l000000000001564C:
	word64 a4_1094
	word64 s0_1106
	word64 a5_1104
	word64 a3_1109
	word64 a5_1039
	word64 s4_1001
	word64 a3_1026
	word64 s2_1054 = (int64) Mem658[sp_1024 + 216:int32]
	branch (int64) Mem658[sp_1024 + 28:int32] != 0x0000000000000000 l000000000001590C
// DataOut:
// DataOut (flags):
// SymbolicIn:

l000000000001590C:
	a5_1039 = 128
	branch s2_1054 != a5_1039 l0000000000015660
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0000000000015658:
	a5_1039 = 32
	branch s2_1054 == a5_1039 l0000000000015914
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0000000000015914:
	a3_1026 = Mem658[sp_1024 + 64:word64]
	branch a3_1026 == 0x0000000000000000 l0000000000015DDC
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0000000000015DDC:
	gp = fn000000000001654C(ra, gp, s0_136, 0x0000000000012000, 0x0000000000011B08, 0x0000000000011B10, 0x0000000000011C60, Mem658[sp_1024 + 56:word64], a4_600, a5_1039, a6_1049, a7, 0x0000000000012000, a0, out a4_1094, out a5_3209, out a6_1049, out a7)
// DataOut:
// DataOut (flags):
// SymbolicIn:

l000000000001591C:
	s4_1001 = 1
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0000000000015660:
	branch s10_45 == 0x0000000000000000 l0000000000015860
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0000000000015860:
	s3_1018 = Mem658[sp_1024 + 56:word64]
	sp_1024 = sp_1024 + 0xFFFFFFFFFFFFFFF8
	branch (uint64) (uint32) strcmp(Mem658[sp_1024 + 88:word64], s3_1018) == 0x0000000000000000 l0000000000015664
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0000000000015874:
	a3_1026 = Mem658[sp_1024 + 0x0000000000000038:word64]
	s4_1001 = 0
	branch a3_1026 == 0x0000000000000000 l0000000000015E14
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0000000000015E14:
	gp = fn000000000001654C(ra, gp, s0_136, 0x0000000000012000, 0x0000000000011B08, 0x0000000000011B10, 0x0000000000011C60, s3_1018, a4_600, a5_1039, a6_1049, a7, 0x0000000000012000, s3_1018, out a4_3208, out a5_1039, out a6_1049, out a7)
	s2_1054 = (int64) Mem658[sp_1024 + 0x00000000000000D0:int32]
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0000000000015880:
	word64 a4_1075
	word64 a5_1076
	word64 a6_1077
	word64 a7_1078
	gp = fn000000000001654C(ra, fn000000000001654C(ra, gp, s0_136, 0x0000000000012000, 0x0000000000011B08, 0x0000000000011AF8, 0x0000000000011C60, a3_1026, a4_600, a5_1039, a6_1049, a7, 0x0000000000012000, s3_1018, out a4_1075, out a5_1076, out a6_1077, out a7_1078), s0_136, 0x0000000000012000, 0x0000000000011B08, 0x0000000000011B10, 0x0000000000011C60, Mem658[sp_1024 + 56:word64], a4_1075, a5_1076, a6_1077, a7_1078, 0x0000000000012000, s3_1018, out a4_1094, out a5_1039, out a6_1049, out a7)
	branch s4_1001 == 0x0000000000000000 l0000000000015E74
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0000000000015E74:
	s2_1054 = (int64) Mem658[sp_1024 + 216:int32]
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00000000000158B8:
	a5_1104 = 65544
	s0_1106 = s0_136 & 65544
	branch s0_1106 == 65544 l0000000000015E64
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0000000000015E64:
	a3_1109 = Mem658[sp_1024 + 80:word64]
	s0_1106 = 1
	branch a3_1109 != 0x0000000000000000 l0000000000015C2C
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0000000000015E70:
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0000000000015664:
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0000000000015668:
	word64 a3_1116 = Mem658[sp_1024 + 72:word64]
	s3_1018 = 0x0000000000012000
	branch a3_1116 == 0x0000000000000000 l0000000000015690
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0000000000015674:
	gp = fn000000000001654C(ra, gp, s0_136, 0x0000000000012000, 0x0000000000011B08, 0x0000000000011B28, 0x0000000000011B20, a3_1116, s2_1054, a5_1039, a6_1049, a7, s2_1054, 0x0000000000012000, out a4_3206, out a5_1039, out a6_1049, out a7)
	s2_1054 = (int64) Mem658[sp_1024 + 216:int32]
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0000000000015690:
	word64 a5_1175
	word64 a6_1176
	word64 a7_1177
	word64 a5_1194
	gp = fn000000000001654C(ra, fn000000000001654C(ra, gp, s0_136, 0x0000000000012000, 0x0000000000011B08, 0x0000000000011B38, 0x0000000000011B20, Mem658[sp_1024 + 88:word64], s2_1054, a5_1039, a6_1049, a7, s2_1054, 0x0000000000012000, out a4_3205, out a5_1175, out a6_1176, out a7_1177), s0_136, 0x0000000000012000, 0x0000000000011B08, 0x0000000000011B58, 0x0000000000011B48, Mem658[sp_1024 + 104:word64], (int64) Mem658[sp_1024 + 216:int32], a5_1175, a6_1176, a7_1177, s2_1054, 0x0000000000012000, out a4_1094, out a5_1194, out a6_1049, out a7)
	word64 a3_1200 = Mem658[sp_1024 + 96:word64]
	branch a3_1200 == 0x0000000000000000 l00000000000156EC
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00000000000156D4:
	s2_1054 = 0x0000000000012000
	gp = fn000000000001654C(ra, gp, s0_136, 0x0000000000012000, 0x0000000000011B08, 0x0000000000011B68, 0x0000000000011C60, a3_1200, a4_1094, a5_1194, a6_1049, a7, 0x0000000000012000, 0x0000000000012000, out a4_1094, out a5_3207, out a6_1049, out a7)
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00000000000156EC:
	a5_1104 = 65544
	s0_1106 = s0_136 & 65544
	branch s0_1106 == 65544 l0000000000015C1C
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0000000000015C1C:
	a3_1109 = Mem658[sp_1024 + 80:word64]
	branch a3_1109 == 0x0000000000000000 l00000000000156FC
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0000000000015C24:
	s0_1106 = 0
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0000000000015C2C:
	s2_1054 = 0x0000000000012000
	gp = fn000000000001654C(ra, gp, s0_1106, 0x0000000000012000, 0x0000000000011B08, 0x0000000000011B78, 0x0000000000011C60, a3_1109, a4_1094, 65544, a6_1049, a7, 0x0000000000012000, s3_1018, out a4_1094, out a5_1104, out a6_1049, out a7)
	branch s0_1106 != 0x0000000000000000 l00000000000158C8
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00000000000158C8:
	s2_1054 = 0x0000000000012000
	word64 a3_1273 = Mem658[sp_1024 + 240:word64]
	branch a3_1273 == 0x0000000000000000 l00000000000158E8
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00000000000158D0:
	gp = fn000000000001654C(ra, gp, s0_1106, 0x0000000000012000, 0x0000000000011B98, 0x0000000000011B88, 0x0000000000011C60, a3_1273, a4_1094, a5_1104, a6_1049, a7, 0x0000000000012000, s3_1018, out a4_1094, out a5_1104, out a6_1049, out a7)
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00000000000158E8:
	word64 a3_1303 = Mem658[sp_1024 + 248:word64]
	branch a3_1303 == 0x0000000000000000 l00000000000157BC
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00000000000158F0:
	gp = fn000000000001654C(ra, gp, s0_1106, 0x0000000000012000, 0x0000000000011B98, 0x0000000000011BA0, 0x0000000000011C60, a3_1303, a4_1094, a5_1104, a6_1049, a7, 0x0000000000012000, s3_1018, out a4_1094, out a5_3210, out a6_1049, out a7)
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0000000000015C44:
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00000000000156FC:
	putchar(10)
	sp_1024 = sp_1024 + 0xFFFFFFFFFFFFFFF8
	word64 a3_1337 = Mem658[sp_1024 + 240:word64]
	branch a3_1337 == 0x0000000000000000 l0000000000015728
// DataOut:
// DataOut (flags):
// SymbolicIn:

l000000000001570C:
	gp = fn000000000001654C(ra, gp, s0_1106, 0x0000000000012000, 0x0000000000011B98, 0x0000000000011B88, 0x0000000000011C60, a3_1337, a4_1094, a5_1104, a6_1049, a7, s2_1054, s3_1018, out a4_1094, out a5_1104, out a6_1049, out a7)
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0000000000015728:
	word64 a3_1369 = Mem658[sp_1024 + 248:word64]
	branch a3_1369 == 0x0000000000000000 l000000000001574C
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0000000000015730:
	gp = fn000000000001654C(ra, gp, s0_1106, 0x0000000000012000, 0x0000000000011B98, 0x0000000000011BA0, 0x0000000000011C60, a3_1369, a4_1094, a5_1104, a6_1049, a7, s2_1054, s3_1018, out a4_1094, out a5_1104, out a6_1049, out a7)
// DataOut:
// DataOut (flags):
// SymbolicIn:

l000000000001574C:
	word64 a3_1400 = Mem658[sp_1024 + 224:word64]
	branch a3_1400 == 0x0000000000000000 l000000000001576C
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0000000000015754:
	gp = fn000000000001654C(ra, gp, s0_1106, 0x0000000000012000, 0x0000000000011B08, 0x0000000000011BB0, 0x0000000000011C60, a3_1400, a4_1094, a5_1104, a6_1049, a7, s2_1054, s3_1018, out a4_1094, out a5_1104, out a6_1049, out a7)
// DataOut:
// DataOut (flags):
// SymbolicIn:

l000000000001576C:
	word64 a3_1430 = Mem658[sp_1024 + 232:word64]
	branch a3_1430 == 0x0000000000000000 l000000000001578C
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0000000000015774:
	gp = fn000000000001654C(ra, gp, s0_1106, 0x0000000000012000, 0x0000000000011B08, 0x0000000000011BC0, 0x0000000000011C60, a3_1430, a4_1094, a5_1104, a6_1049, a7, s2_1054, s3_1018, out a4_1094, out a5_3211, out a6_1049, out a7)
// DataOut:
// DataOut (flags):
// SymbolicIn:

l000000000001578C:
	word64 a5_1460 = (int64) Mem658[sp_1024 + 28:int32]
	branch a5_1460 == 0x0000000000000000 l00000000000157A0
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0000000000015794:
	a5_1460 = (int64) Mem658[sp_1024 + 216:int32]
	a4_1094 = 111
	branch a4_1094 >=u a5_1460 l0000000000015E3C
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0000000000015E3C:
	gp = fn000000000001654C(ra, gp, s0_1106, 0x0000000000012000, 0x0000000000011B08, 0x0000000000011BE0, 0x0000000000011BD0, (int64) (word32) (128 - a5_1460), sp_1024 + 152, a5_1460, a6_1049, a7, s2_1054, s3_1018, out a4_1094, out a5_3213, out a6_1049, out a7)
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00000000000157A0:
	gp = fn000000000001654C(ra, gp, s0_1106, 0x0000000000012000, 0x0000000000011B08, 0x0000000000011BE0, 0x0000000000011C60, sp_1024 + 152, a4_1094, a5_1460, a6_1049, a7, s2_1054, s3_1018, out a4_1094, out a5_3212, out a6_1049, out a7)
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00000000000157BC:
	word64 a5_1524 = Mem658[sp_1024 + 120:word64]
	branch a5_1524 == 0x0000000000000000 l0000000000015C08
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0000000000015C08:
	a5_1524 = Mem658[sp_1024 + 136:word64]
	branch a5_1524 != 0x0000000000000000 l00000000000157C4
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0000000000015C10:
	a5_1524 = Mem658[sp_1024 + 144:word64]
	branch a5_1524 != 0x0000000000000000 l00000000000157C4
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0000000000015C18:
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00000000000157C4:
	putchar(10)
	word64 sp_1531 = sp_1024 + 0xFFFFFFFFFFFFFFF8
	word64 a3_1533 = Mem658[sp_1531 + 128:word64]
	branch a3_1533 == 0x0000000000000000 l00000000000157F0
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00000000000157D4:
	gp = fn000000000001654C(ra, gp, s0_1106, 0x0000000000012000, 0x0000000000011B98, 0x0000000000011BF0, 0x0000000000011C60, a3_1533, a4_1094, a5_1524, a6_1049, a7, s2_1054, s3_1018, out a4_1094, out a5_1524, out a6_1049, out a7)
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00000000000157F0:
	word64 a3_1573 = Mem658[sp_1531 + 120:word64]
	branch a3_1573 == 0x0000000000000000 l0000000000015814
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00000000000157F8:
	gp = fn000000000001654C(ra, gp, s0_1106, 0x0000000000012000, 0x0000000000011B98, 0x0000000000011C00, 0x0000000000011C60, a3_1573, a4_1094, a5_1524, a6_1049, a7, s2_1054, s3_1018, out a4_1094, out a5_1524, out a6_1049, out a7)
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0000000000015814:
	word64 a3_1604 = Mem658[sp_1531 + 136:word64]
	branch a3_1604 == 0x0000000000000000 l0000000000015838
// DataOut:
// DataOut (flags):
// SymbolicIn:

l000000000001581C:
	gp = fn000000000001654C(ra, gp, s0_1106, 0x0000000000012000, 0x0000000000011B98, 0x0000000000011C10, 0x0000000000011C60, a3_1604, a4_1094, a5_1524, a6_1049, a7, s2_1054, s3_1018, out a4_1094, out a5_1524, out a6_1049, out a7)
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0000000000015838:
	word64 a3_1635 = Mem658[sp_1531 + 144:word64]
	branch a3_1635 == 0x0000000000000000 l00000000000153DC
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0000000000015840:
	gp = fn000000000001654C(ra, gp, s0_1106, 0x0000000000012000, 0x0000000000011B98, 0x0000000000011C18, 0x0000000000011C60, a3_1635, a4_1094, a5_1524, a6_1049, a7, s2_1054, s3_1018, out a4_3214, out a5_3215, out a6_3216, out a7_3217)
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00000000000153D0:
	branch (int64) Mem104[gp + -2028:int32] == 0x0000000000000000 l000000000001556C
// DataOut:
// DataOut (flags):
// SymbolicIn:

l000000000001556C:
	fwrite(0x0000000000011A08, 1, 37, Mem104[gp + -1920:word64])
// DataOut:
// DataOut (flags):
// SymbolicIn:

l000000000001538C:
	branch (int64) Mem98[gp + -2028:int32] != 0x0000000000000000 l00000000000153D8
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00000000000153D8:
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0000000000015394:
	fwrite(0x00000000000119D8, 1, 46, Mem98[gp + -1920:word64])
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00000000000153DC:
	branch a5_7 != Mem1692[gp + -1936:word64] l0000000000015E8C
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0000000000015E8C:
	__stack_chk_fail()
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00000000000153EC:
	return
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0000000000015224:
	branch a0_65 >u 118 l0000000000015200
// DataOut:
// DataOut (flags):
// SymbolicIn:

l000000000001522C:
	word64 a5_1791 = (int64) Mem50[(a0_65 << 0x00000000 >>u 0x0000001E) + 0x00000000000102A0:int32]
	call a5_1791 (retsize: 0;)
		uses: a0:a0_65,a1:a1,a2:0x00000000000119A8,a3:0x00000000000108E0,a4:0x00000000000102A0,a5:a5_1791,a6:a6,a7:a7,fa3:fa3,fa4:fa4,fa5:fa5,gp:gp,ra:ra,s0:s0_42,s1:0x00000000000108E0,s10:s10_45,s11:s11,s2:a1,s3:a0,s4:0x0000000000012000,s5:s5,s6:s6_43,s7:s7_49,s8:0x0000000000001000,s9:s9_44,sp:sp_67,Stack +FFFFFE40:0x00000000,Stack +FFFFFE48:0x00010008,Stack +FFFFFE5C:0x00000000,Stack +FFFFFF88:a5_7,Stack +FFFFFF98:s11,Stack +FFFFFFA0:s10,Stack +FFFFFFA8:s9,Stack +FFFFFFB0:s8,Stack +FFFFFFB8:s7,Stack +FFFFFFC0:s6,Stack +FFFFFFC8:s5,Stack +FFFFFFD0:s4,Stack +FFFFFFD8:s3,Stack +FFFFFFE0:s2,Stack +FFFFFFE8:s1,Stack +FFFFFFF0:s0,Stack +FFFFFFF8:ra,t1:t1,t3:t3
	return
// DataOut:
// DataOut (flags):
// SymbolicIn:

fn0000000000015180_exit:
// DataOut:
// DataOut (flags):
// SymbolicIn:



void fn0000000000015EB8(word64 a0, word32 dwArg00)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  a0:[0..31] Stack +0000:[0..31]
// LiveOut:
// Trashed: a0 a1 a2 a3 a4 a5 a6 gp sp
// Preserved:
fn0000000000015EB8_entry:
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0000000000015EB8:
	__libc_start_main(0x0000000000015180, qwArg00, fp + 8, 0x00000000000182E8, 0x0000000000018378, a0, fp & -16)
	return
// DataOut:
// DataOut (flags):
// SymbolicIn:

fn0000000000015EB8_exit:
// DataOut:
// DataOut (flags):
// SymbolicIn:



void fn0000000000015EF0(word64 ra)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  ra:[0..63]
// LiveOut:
// Trashed: a0 a4 a5 ra t1
// Preserved: sp
fn0000000000015EF0_entry:
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0000000000015EF0:
	word64 a4_8 = 14
	branch a4_8 >=u 0x0000000000000007 l0000000000015F20
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0000000000015F0C:
	branch 0x0000000000000000 == 0x0000000000000000 l0000000000015F20
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0000000000015F20:
	return
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0000000000015F18:
	call 0x0000000000000000 (retsize: 0;)
		uses: a0:0x00000000000102A0,a4:a4_8,a5:0x0000000000000007,ra:ra,sp:fp,t1:0x0000000000000000
	return
// DataOut:
// DataOut (flags):
// SymbolicIn:

fn0000000000015EF0_exit:
// DataOut:
// DataOut (flags):
// SymbolicIn:



void fn0000000000015F24()
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse: 
// LiveOut:
// Trashed: a0 a1 a5 t1
// Preserved: sp
fn0000000000015F24_entry:
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0000000000015F24:
	branch 0 == 0x0000000000000000 l0000000000015F60
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0000000000015F4C:
	branch 0x0000000000000000 == 0x0000000000000000 l0000000000015F60
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0000000000015F60:
	return
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0000000000015F58:
	call 0x0000000000000000 (retsize: 0;)
		uses: a0:0x00000000000102A0,a1:0,a5:0,sp:fp,t1:0x0000000000000000
	return
// DataOut:
// DataOut (flags):
// SymbolicIn:

fn0000000000015F24_exit:
// DataOut:
// DataOut (flags):
// SymbolicIn:



void fn0000000000015F64(word64 ra, word64 gp)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  gp:[0..63] ra:[0..63]
// LiveOut:
// Trashed: a0 a4 a5 t1
// Preserved: ra s0 sp
fn0000000000015F64_entry:
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0000000000015F64:
	branch (int64) Mem5[gp + -1900:byte] != 0x0000000000000000 l0000000000015F84
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0000000000015F78:
	fn0000000000015EF0(ra)
	Mem16[gp + 2196:byte] = 0x01
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0000000000015F84:
	return
// DataOut:
// DataOut (flags):
// SymbolicIn:

fn0000000000015F64_exit:
// DataOut:
// DataOut (flags):
// SymbolicIn:



void fn0000000000015F94(word64 ra, word64 t1, word64 a1)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  a1:[0..63] ra:[0..63] t1:[0..63]
// LiveOut:
// Trashed: a0 a1 a5 t1
// Preserved: ra sp
fn0000000000015F94_entry:
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0000000000015F94:
	branch Mem0[0x0000000000019E28:word64] != 0x0000000000000000 l0000000000015FA8
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0000000000015FA8:
	branch 0x0000000000000000 == 0x0000000000000000 l0000000000015FA4
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0000000000015FB4:
	call 0x0000000000000000 (retsize: 0;)
		uses: a0:0x0000000000019E28,a1:a1,a5:0x0000000000000000,ra:ra,sp:fp + -16,Stack +0008:ra,t1:t1
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0000000000015FC8_thunk_fn0000000000015F24:
	fn0000000000015F24()
	return
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0000000000015FA4:
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0000000000015FA4_thunk_fn0000000000015F24:
	fn0000000000015F24()
	return
// DataOut:
// DataOut (flags):
// SymbolicIn:

fn0000000000015F94_exit:
// DataOut:
// DataOut (flags):
// SymbolicIn:



void fn0000000000015FCC(word64 gp, word64 a0)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  a0:[0..63] gp:[0..63]
// LiveOut:
// Trashed: a0 a1 a2 a3 ra s0 sp
// Preserved:
fn0000000000015FCC_entry:
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0000000000015FCC:
	word64 a3_9 = Mem7[gp + -1920:word64]
	branch a0 != 0x0000000000000000 l0000000000016090
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0000000000016090:
	fwrite(0x0000000000010BE0, 1, 26, a3_9)
	fwrite(0x0000000000010C00, 1, 54, Mem7[gp + -1920:word64])
	fwrite(0x0000000000010C38, 1, 77, Mem7[gp + -1920:word64])
	fwrite(0x0000000000010C88, 1, 62, Mem7[gp + -1920:word64])
	fwrite(0x0000000000010CC8, 1, 79, Mem7[gp + -1920:word64])
	fwrite(0x0000000000010D18, 1, 79, Mem7[gp + -1920:word64])
	fwrite(0x0000000000010D68, 1, 42, Mem7[gp + -1920:word64])
	fwrite(0x0000000000010D98, 1, 76, Mem7[gp + -1920:word64])
	fwrite(0x0000000000010DE8, 1, 77, Mem7[gp + -1920:word64])
	fwrite(0x0000000000010E38, 1, 77, Mem7[gp + -1920:word64])
	fputc(10, Mem7[gp + -1920:word64])
	fwrite(0x0000000000010E88, 1, 23, Mem7[gp + -1920:word64])
	fwrite(0x0000000000010EA0, 1, 71, Mem7[gp + -1920:word64])
	fwrite(0x0000000000010EE8, 1, 57, Mem7[gp + -1920:word64])
	fwrite(0x0000000000010F28, 1, 58, Mem7[gp + -1920:word64])
	fwrite(0x0000000000010F68, 1, 57, Mem7[gp + -1920:word64])
	fwrite(0x0000000000010FA8, 1, 77, Mem7[gp + -1920:word64])
	fwrite(0x0000000000010FF8, 1, 77, Mem7[gp + -1920:word64])
	fwrite(0x0000000000011048, 1, 77, Mem7[gp + -1920:word64])
	fwrite(0x0000000000011098, 1, 46, Mem7[gp + -1920:word64])
	fwrite(0x00000000000110C8, 1, 72, Mem7[gp + -1920:word64])
	fwrite(0x0000000000011118, 1, 45, Mem7[gp + -1920:word64])
	fwrite(0x0000000000011148, 1, 67, Mem7[gp + -1920:word64])
	fwrite(0x0000000000011190, 1, 64, Mem7[gp + -1920:word64])
	fwrite(0x00000000000111D8, 1, 72, Mem7[gp + -1920:word64])
	fwrite(0x0000000000011228, 1, 46, Mem7[gp + -1920:word64])
	fputc(10, Mem7[gp + -1920:word64])
	fwrite(0x0000000000011258, 1, 15, Mem7[gp + -1920:word64])
	fwrite(0x0000000000011268, 1, 87, Mem7[gp + -1920:word64])
	fwrite(0x00000000000112C0, 1, 60, Mem7[gp + -1920:word64])
	fwrite(0x0000000000011300, 1, 68, Mem7[gp + -1920:word64])
	fwrite(0x0000000000011348, 1, 58, Mem7[gp + -1920:word64])
	fwrite(0x0000000000011388, 1, 57, Mem7[gp + -1920:word64])
	fwrite(0x00000000000113C8, 1, 62, Mem7[gp + -1920:word64])
	return
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0000000000015FE0:
	fwrite(0x0000000000011408, 1, 77, a3_9)
	fwrite(0x0000000000011458, 1, 62, Mem7[gp + -1920:word64])
	fwrite(0x0000000000011498, 1, 65, Mem7[gp + -1920:word64])
	fwrite(0x00000000000114E0, 1, 76, Mem7[gp + -1920:word64])
	fwrite(0x0000000000011530, 1, 65, Mem7[gp + -1920:word64])
	fwrite(0x0000000000011578, 1, 41, Mem7[gp + -1920:word64])
	fwrite(0x00000000000115A8, 1, 30, Mem7[gp + -1920:word64])
	return
// DataOut:
// DataOut (flags):
// SymbolicIn:

fn0000000000015FCC_exit:
// DataOut:
// DataOut (flags):
// SymbolicIn:



word64 fn00000000000163B0(word64 gp)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  gp:[0..63]
// LiveOut: a0
// Trashed: a0 a1 a2 a3 a4 a5
// Preserved: ra s0 s1 s2 s3 s4 s5 s6 s7 s8 s9 sp
fn00000000000163B0_entry:
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00000000000163B0:
	word64 a5_27 = Mem25[gp + -1936:word64]
	__sprintf_chk(fp + -232, 1, 128, 0x00000000000115C8, 0x00000000)
	word64 s3_37 = 16
	word64 s0_38 = 1
	word64 s1_47 = fp + 0xFFFFFFFFFFFFFF12
	word64 s6_48 = 128
	word64 s5_49 = 1
	word64 s9_50 = 15
	word64 s7_51 = 58
	branch s3_37 == 1 l000000000001646C
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0000000000016430:
	__sprintf_chk(s1_47, s5_49, s6_48, 0x00000000000115C8, 0x00000000)
	word64 a4_72 = s1_47 + 2
	branch (s0_38 & 1) == 0x0000000000000000 l00000000000164B8
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00000000000164B8:
	s1_47 = a4_72
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0000000000016454:
	branch s0_38 == s9_50 l00000000000164C4
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00000000000164C4:
	s1_47 = a4_72
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0000000000016458:
	Mem78[s1_47 + 2:byte] = (byte) s7_51
	s1_47 = s1_47 + 3
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0000000000016464:
	s0_38 = (int64) ((word32) s0_38 + 1)
	branch s0_38 != s3_37 l0000000000016430
// DataOut:
// DataOut (flags):
// SymbolicIn:

l000000000001646C:
	Mem87[s1_47:byte] = 0x00
	word64 a0_92 = __strdup(fp - 224)
	branch a5_27 != Mem87[gp + -1936:word64] l00000000000164CC
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00000000000164CC:
	__stack_chk_fail()
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0000000000016484:
	return a0_92
// DataOut:
// DataOut (flags):
// SymbolicIn:

fn00000000000163B0_exit:
// DataOut:
// DataOut (flags):
// SymbolicIn:



word64 fn00000000000164D0(word64 a0, word64 a1)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  a0:[0..31] a1:[0..63]
// LiveOut: a0
// Trashed: a0 a1 a2
// Preserved: ra s0 s1 s2 sp
fn00000000000164D0_entry:
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00000000000164D0:
	word64 a0_24
	word64 a0_21 = (uint64) (uint32) open(0x00000000000115D0, 0)
	branch a0_21 < 0x0000000000000000 l0000000000016544
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0000000000016544:
	a0_24 = -1
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0000000000016500:
	word64 a0_32 = (uint64) (uint32) read(a0_21, a0, a1 << 0x00000000 >>u 0x00000000)
	close(a0_21)
	a0_24 = (int64) (word32) (0x0000000000000000 - (word64) ((int64) ((word32) (a0_32 - a1)) != 0x0000000000000000))
// DataOut:
// DataOut (flags):
// SymbolicIn:

l000000000001652C:
	return a0_24
// DataOut:
// DataOut (flags):
// SymbolicIn:

fn00000000000164D0_exit:
// DataOut:
// DataOut (flags):
// SymbolicIn:



word64 fn000000000001654C(word64 ra, word64 gp, word64 s0, word64 s1, word64 a0, word64 a1, word64 a2, word64 a3, word64 a4, word64 a5, word64 a6, word64 a7, word64 s2, word64 s3, ptr64 & a4Out, ptr64 & a5Out, ptr64 & a6Out, ptr64 & a7Out)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  a0:[0..63] a1:[0..63] a2:[0..63] a3:[0..63] a4:[0..63] a5:[0..63] a6:[0..63] a7:[0..63] gp:[0..63] ra:[0..63] s0:[0..63] s1:[0..63] s2:[0..63] s3:[0..63]
// LiveOut: a4 a5 a6 a7 gp
// Trashed: a0 a1 a2 a3 a4 a5 a6 a7 gp t1 t3
// Preserved: ra s0 s1 s2 s3 sp
fn000000000001654C_entry:
// DataOut:
// DataOut (flags):
// SymbolicIn:

l000000000001654C:
	word64 t3_7 = Mem5[gp + -1936:word64]
	word64 sp_37
	word64 gp_40
	word64 s2_42
	word64 s3_43
	word64 a0_47
	word64 a6_54
	word64 a7_55
	call __vasprintf_chk (retsize: 0;)
		uses: a0:fp + -112,a1:1,a2:a2,a3:fp + -40,a4:a4,a5:a5,a6:a6,a7:a7,gp:gp,ra:ra,s0:s0,s1:s1,s2:a1,s3:a0,sp:fp + -128,Stack +0008:fp + -40,Stack +0010:0x0000000000000000,Stack +0018:t3_7,Stack +0028:s3,Stack +0030:s2,Stack +0038:s1,Stack +0040:s0,Stack +0048:ra,Stack +0058:a3,Stack +0060:a4,Stack +0068:a5,Stack +0070:a6,Stack +0078:a7,t1:fp + -40,t3:t3_7
		defs: a0:a0_47,a6:a6_54,a7:a7_55,gp:gp_40,s2:s2_42,s3:s3_43,sp:sp_37
	branch a0_47 < 0x0000000000000000 l00000000000165D8
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00000000000165A8:
	fputs(s2_42, Mem36[gp_40 + -1912:word64])
	word64 sp_64 = sp_37 + 0xFFFFFFFFFFFFFFF8
	branch (int64) Mem36[gp_40 + -2032:int32] != 0x0000000000000000 l000000000001661C
// DataOut:
// DataOut (flags):
// SymbolicIn:

l000000000001661C:
	fputs(s3_43, Mem36[gp_40 + -1912:word64])
	sp_64 = sp_37 + 0xFFFFFFFFFFFFFFF0
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00000000000165BC:
	fputs(Mem36[sp_64 + 16:word64], Mem36[gp_40 + -1912:word64])
	word64 sp_80 = sp_64 + 0xFFFFFFFFFFFFFFF8
	branch (int64) Mem36[gp_40 + -2032:int32] != 0x0000000000000000 l0000000000016600
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0000000000016600:
	fwrite(0x00000000000115E0, 1, 4, Mem36[gp_40 + -1912:word64])
	sp_80 = sp_80 + 0xFFFFFFFFFFFFFFF8
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00000000000165D0:
	free(Mem36[sp_80 + 16:word64])
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00000000000165D8:
	word64 a5_103 = Mem36[gp_40 + -1936:word64]
	branch t3_7 != a5_103 l000000000001662C
// DataOut:
// DataOut (flags):
// SymbolicIn:

l000000000001662C:
	__stack_chk_fail()
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00000000000165E4:
	a4Out = t3_7
	a5Out = a5_103
	a6Out = a6_54
	a7Out = a7_55
	return gp_40
// DataOut:
// DataOut (flags):
// SymbolicIn:

fn000000000001654C_exit:
// DataOut:
// DataOut (flags):
// SymbolicIn:



word64 fn0000000000016630(word64 gp, word64 a0, word64 a1, ptr64 & s1Out, ptr64 & a0Out)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  a0:[0..63] a1:[0..63] gp:[0..63]
// LiveOut: a0 s1 sp
// Trashed: a0 a1 a2 a3 a4 a5 ra s0 s1 s2 s3 sp
// Preserved:
fn0000000000016630_entry:
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0000000000016630:
	word64 a5_35
	word64 a0_22 = __errno_location()
	Mem25[a0_22:word32] = 0x00000000
	word64 a0_31 = (uint64) (uint32) strtol(a0)
	branch qwLoc50 == 0x0000000000000000 l000000000001668C
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0000000000016680:
	branch a0 == qwLoc50 l000000000001668C
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0000000000016684:
	branch (int64) Mem25[qwLoc50:byte] == 0x0000000000000000 l00000000000166C4
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00000000000166C4:
	a5_35 = (int64) Mem25[a0_22:int32]
	branch a5_35 != 0x0000000000000000 l0000000000016690
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00000000000166CC:
	word64 a4_37 = (int64) (word32) a0_31
	branch a0_31 != a4_37 l00000000000166E0
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00000000000166E0:
	a5_35 = -34
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00000000000166D8:
	Mem40[a1:word32] = (word32) a4_37
// DataOut:
// DataOut (flags):
// SymbolicIn:

l000000000001668C:
	a5_35 = (int64) Mem25[a0_22:int32]
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0000000000016690:
	branch a5_35 <= 0x0000000000000000 l00000000000166E8
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00000000000166E8:
	a5_35 = -22
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0000000000016694:
	a5_35 = (int64) (word32) (0x0000000000000000 - a5_35)
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0000000000016698:
	branch qwLoc48 != Mem50[gp + -1936:word64] l00000000000166F0
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00000000000166F0:
	__stack_chk_fail()
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00000000000166A8:
	s1Out = s3
	a0Out = a5_35
	return fp + 0xFFFFFFFFFFFFFFF0
// DataOut:
// DataOut (flags):
// SymbolicIn:

fn0000000000016630_exit:
// DataOut:
// DataOut (flags):
// SymbolicIn:



word64 fn00000000000166F4(word64 gp, word64 a0, word64 a1, word64 a2)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  a0:[0..63] a1:[0..63] a2:[0..63] gp:[0..63]
// LiveOut: a0
// Trashed: a0 a1 a2 a3 a4 a5
// Preserved: ra s0 s1 s2 s3 s4 sp
fn00000000000166F4_entry:
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00000000000166F4:
	word64 a0_111
	word64 sp_49
	word64 sp_3 = fp + -64
	word64 a5_7 = Mem5[gp + -1936:word64]
	word64 s1_21 = a0
	branch (int64) Mem9[a0:int32] != 0x0000000000000000 l00000000000167C8
// DataOut:
// DataOut (flags):
// SymbolicIn:

l000000000001672C:
	sp_3 = fp + 0xFFFFFFFFFFFFFFB8
	branch strchr(a1, 46) == 0x0000000000000000 l00000000000167C8
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00000000000167C8:
	word64 a0_38
	sp_49 = fn0000000000016630(gp, a1, sp_3, out s1_21, out a0_38)
	branch a0_38 == 0x0000000000000000 l0000000000016794
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00000000000167D8:
// DataOut:
// DataOut (flags):
// SymbolicIn:

l000000000001673C:
	sp_49 = fp + 0xFFFFFFFFFFFFFFB0
	branch (uint64) (uint32) inet_pton(2, a1, fp + 0xFFFFFFFFFFFFFFB8) == 0x0000000000000000 l000000000001678C
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0000000000016750:
	word64 a0_60 = fn00000000000182B4((int64) dwLoc50, out a3_61, out a4_248)
	branch a0_60 == 0x0000000000000000 l0000000000016790
// DataOut:
// DataOut (flags):
// SymbolicIn:

l000000000001675C:
	branch (a0_60 & 1) != 0x0000000000000000 l0000000000016778
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0000000000016764:
	word64 a5_66 = (int64) (word32) (a0_60 >>u 1)
	branch a5_66 == 0x0000000000000000 l0000000000016790
// DataOut:
// DataOut (flags):
// SymbolicIn:

l000000000001676C:
	branch (a5_66 & 1) == 0x0000000000000000 l0000000000016820
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0000000000016820:
	a0_60 = (int64) (word32) (a0_60 >>u 2)
	branch a0_60 != 0x0000000000000000 l000000000001675C
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0000000000016828:
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0000000000016774:
	a0_60 = a5_66
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0000000000016778:
	a0_60 = (int64) (word32) (a0_60 >>u 1)
	branch a0_60 == 0x0000000000000000 l0000000000016790
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0000000000016784:
	branch (a0_60 & 1) != 0x0000000000000000 l0000000000016778
// DataOut:
// DataOut (flags):
// SymbolicIn:

l000000000001678C:
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0000000000016790:
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0000000000016794:
	word64 a5_86 = (int64) Mem84[sp_49:int32]
	branch a2 == 0x0000000000000000 l00000000000167DC
// DataOut:
// DataOut (flags):
// SymbolicIn:

l000000000001679C:
	branch a5_86 <= 32 l00000000000167DC
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00000000000167DC:
	a0_111 = a5_86
	branch a5_86 < 0x0000000000000000 l00000000000167C0
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00000000000167E4:
	branch (int64) Mem84[s1_21:int32] != 0x0000000000000000 l00000000000167B8
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00000000000167EC:
	branch a5_86 > 32 l00000000000167C0
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00000000000167A8:
	branch (int64) Mem84[s1_21:int32] != 0x0000000000000000 l00000000000167B8
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00000000000167B0:
	Mem108[s1_21:word32] = 0x00000001
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00000000000167B8:
	a0_111 = a5_86
	branch a5_86 <= 128 l00000000000167F4
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00000000000167C0:
	a0_111 = -1
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00000000000167F4:
	branch a5_7 != Mem116[gp + -1936:word64] l000000000001682C
// DataOut:
// DataOut (flags):
// SymbolicIn:

l000000000001682C:
	__stack_chk_fail()
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0000000000016800:
	return a0_111
// DataOut:
// DataOut (flags):
// SymbolicIn:

fn00000000000166F4_exit:
// DataOut:
// DataOut (flags):
// SymbolicIn:



word64 fn0000000000016830(word64 gp, word64 a0)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  a0:[0..63] gp:[0..63]
// LiveOut: a0
// Trashed: a0 a4 a5
// Preserved: ra s0 sp
fn0000000000016830_entry:
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0000000000016830:
	word64 a5_7 = Mem5[gp + -1936:word64]
	branch a0 == 0x0000000000000000 l0000000000016864
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0000000000016864:
	branch a5_7 != Mem11[gp + -1936:word64] l0000000000016884
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0000000000016884:
	__stack_chk_fail()
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0000000000016874:
	return 0
// DataOut:
// DataOut (flags):
// SymbolicIn:

fn0000000000016830_exit:
// DataOut:
// DataOut (flags):
// SymbolicIn:

l000000000001684C:
// DataOut:
// DataOut (flags):
// SymbolicIn:



void fn00000000000168B8(word64 gp, word64 a1)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  a1:[0..63] gp:[0..63]
// LiveOut:
// Trashed: a0 a4 a5
// Preserved: ra s0 sp
fn00000000000168B8_entry:
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00000000000168B8:
	fn0000000000016830(gp, a1)
	return
// DataOut:
// DataOut (flags):
// SymbolicIn:

fn00000000000168B8_exit:
// DataOut:
// DataOut (flags):
// SymbolicIn:



word64 fn00000000000168E4(word64 gp, word64 a0, word64 a1)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  a0:[0..63] a1:[0..63] gp:[0..63]
// LiveOut: a0
// Trashed: a0 a1 a2 a3 a5 a6 a7 t1 t3 t4 t5
// Preserved: ra s0 s1 sp
fn00000000000168E4_entry:
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00000000000168E4:
	word64 a0_112
	word64 a0_73
	word64 a4_7 = Mem5[gp + -1936:word64]
	branch a0 == 2 l0000000000016984
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0000000000016984:
	a0_73 = (uint64) (uint32) getnameinfo(fp + -88, 16, gp + -1896, 1025, 0, 0, 0) (alias)
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0000000000016908:
	branch a0 == 10 l0000000000016934
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0000000000016934:
	memcpy(fp + -64, a1, 16)
	a0_73 = (uint64) (uint32) getnameinfo(fp + 0xFFFFFFFFFFFFFFB0, 28, gp + -1896, 1025, 0, 0, 0) (alias)
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0000000000016974:
	branch a0_73 != 0x0000000000000000 l0000000000016910
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0000000000016978:
	a0_112 = __strdup(gp + -1896) (alias)
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0000000000016910:
	a0_112 = 0
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0000000000016914:
	branch a4_7 != Mem85[gp + -1936:word64] l00000000000169D4
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00000000000169D4:
	__stack_chk_fail()
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0000000000016920:
	return a0_112
// DataOut:
// DataOut (flags):
// SymbolicIn:

fn00000000000168E4_exit:
// DataOut:
// DataOut (flags):
// SymbolicIn:



word64 fn00000000000169D8(word64 gp, word64 a1)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  a1:[0..31] gp:[0..63]
// LiveOut: a0
// Trashed: a0 a1 a2 a3 a4 a5
// Preserved: ra s0 s1 s2 s3 s4 sp
fn00000000000169D8_entry:
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00000000000169D8:
	word64 a0_128
	word64 a5_7 = Mem5[gp + -1936:word64]
	word64 sp_38 = fp + 0xFFFFFFFFFFFFFF88
	branch (uint64) (uint32) getaddrinfo(a1, 0, fp + -104, fp + -112) != 0x0000000000000000 l0000000000016AD8
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0000000000016AD8:
	a0_128 = 0 (alias)
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0000000000016A34:
	word64 s0_41 = qwLoc78
	branch qwLoc78 == 0x0000000000000000 l0000000000016AA0
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0000000000016A3C:
	word64 s3_43 = 2
	word64 s2_44 = 64
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0000000000016A68:
	word64 a0_47 = (int64) Mem32[s0_41 + 4:int32]
	word64 a1_48 = Mem32[s0_41 + 24:word64]
	branch a0_47 != s3_43 l0000000000016A4C
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0000000000016A4C:
	sp_38 = sp_38 + 0xFFFFFFFFFFFFFFF8
	branch inet_ntop(a0_47, a1_48 + 8, gp + -864, s2_44) != 0x0000000000000000 l0000000000016A88
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0000000000016A74:
	sp_38 = sp_38 + 0xFFFFFFFFFFFFFFF8
	branch inet_ntop(a0_47, a1_48 + 4, gp + -864, s2_44) == 0x0000000000000000 l0000000000016A60
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0000000000016A60:
	s0_41 = Mem32[s0_41 + 40:word64]
	branch s0_41 == 0x0000000000000000 l0000000000016A9C
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0000000000016A9C:
	s0_41 = Mem32[sp_38:word64]
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0000000000016AA0:
	freeaddrinfo(s0_41)
	a0_128 = 0 (alias)
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0000000000016A88:
	freeaddrinfo(Mem32[sp_38:word64])
	a0_128 = __strdup(gp + -864)
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0000000000016AAC:
	branch a5_7 != Mem32[gp + -1936:word64] l0000000000016AE0
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0000000000016AE0:
	__stack_chk_fail()
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0000000000016AB8:
	return a0_128
// DataOut:
// DataOut (flags):
// SymbolicIn:

fn00000000000169D8_exit:
// DataOut:
// DataOut (flags):
// SymbolicIn:



void fn0000000000016B38(word64 a0)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  a0:[0..63]
// LiveOut:
// Trashed: a0 a5
// Preserved: sp
fn0000000000016B38_entry:
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0000000000016B38:
	branch a0 >u 127 l0000000000016B5C
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0000000000016B5C:
	return
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0000000000016B40:
	return
// DataOut:
// DataOut (flags):
// SymbolicIn:

fn0000000000016B38_exit:
// DataOut:
// DataOut (flags):
// SymbolicIn:



word64 fn0000000000016B68(word64 a0)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  a0:[0..63]
// LiveOut: a0
// Trashed: a0 a1 a2 a3 a4 a5 a6
// Preserved: ra sp
fn0000000000016B68_entry:
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0000000000016B68:
	word64 a4_100
	word64 a0_7 = fn00000000000182B4(a0, out a3_8, out a4_137)
	word64 a5_11 = (int64) (word32) (a0_7 >>u 24)
	branch a5_11 == 0x0000000000000000 l0000000000016BD8
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0000000000016BD8:
	a4_100 = 0x00000000000115E8
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0000000000016B7C:
	branch a5_11 == 10 l0000000000016C2C
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0000000000016B84:
	word64 a4_16 = (int64) (word32) (a0_7 >>u 16)
	branch a5_11 == 100 l0000000000016C58
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0000000000016C58:
	branch (a4_16 & 192) != 64 l0000000000016BC0
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0000000000016C64:
	a4_100 = 0x0000000000011618
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0000000000016B90:
	branch a5_11 == 127 l0000000000016C70
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0000000000016C70:
	a4_100 = 0x0000000000011630
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0000000000016B98:
	word64 a2_24 = (int64) (word32) (a0_7 >>u 8)
	branch a5_11 == 169 l0000000000016C44
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0000000000016C44:
	branch (a4_16 & 255) != 254 l0000000000016BC0
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0000000000016C4C:
	a4_100 = 0x0000000000011640
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0000000000016BAC:
	branch a5_11 != 172 l0000000000016BF0
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0000000000016BF0:
	branch a5_11 != 192 l0000000000016C7C
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0000000000016C7C:
	branch a5_11 != 203 l0000000000016D18
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0000000000016D18:
	word64 a2_34 = 255
	branch a5_11 != a2_34 l0000000000016D4C
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0000000000016D4C:
	branch a5_11 != 198 l0000000000016BC0
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0000000000016D54:
	a4_100 = 0x0000000000011650
	branch (a4_16 & 254) != 18 l0000000000016BE0
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0000000000016D68:
	a4_100 = 0x0000000000011738
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0000000000016D20:
	a4_100 = 0x0000000000011710
	branch (a4_16 & 255) != a5_11 l0000000000016BE0
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0000000000016D2C:
	a4_100 = 0x0000000000011710
	branch (a2_24 & 255) != a2_34 l0000000000016BE0
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0000000000016D38:
	branch (a0_7 & a2_34) != (a2_24 & 255) l0000000000016BE0
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0000000000016D40:
	a4_100 = 0x0000000000011720
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0000000000016C84:
	branch (a4_16 & 255) != 0x0000000000000000 l0000000000016BC0
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0000000000016C88:
	branch (a2_24 & 255) != 113 l0000000000016BC0
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0000000000016C90:
	a4_100 = 0x00000000000116C0
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0000000000016BF8:
	branch ((a4_16 | a2_24) & 255) == 0x0000000000000000 l0000000000016CD0
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0000000000016CD0:
	a4_100 = 0x0000000000011660
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0000000000016C04:
	branch (a4_16 & 255) == 2 l0000000000016CDC
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0000000000016CDC:
	branch (a2_24 & 255) != 0x0000000000000000 l0000000000016BC0
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0000000000016CE0:
	a4_100 = 0x0000000000011680
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0000000000016C0C:
	branch (a4_16 & 255) == 51 l0000000000016C9C
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0000000000016C9C:
	branch (a2_24 & 255) != 100 l0000000000016BC0
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0000000000016CA4:
	a4_100 = 0x00000000000116A0
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0000000000016C14:
	branch (a4_16 & 255) == 88 l0000000000016CB0
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0000000000016CB0:
	branch (a2_24 & 255) == 99 l0000000000016D00
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0000000000016D00:
	a4_100 = 0x00000000000116E0
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0000000000016C1C:
	branch (a4_16 & 255) == 52 l0000000000016CEC
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0000000000016CEC:
	branch (a2_24 & 255) != 193 l0000000000016BC0
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0000000000016CF4:
	a4_100 = 0x0000000000011708
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0000000000016C24:
	branch (a4_16 & 255) != 168 l0000000000016BC0
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0000000000016BB4:
	branch (a4_16 & 240) == 16 l0000000000016C2C
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0000000000016C2C:
	return 0x0000000000011608
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0000000000016BC0:
	branch (int64) ((word32) a5_11 + -224) >u 15 l0000000000016CB8
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0000000000016CB8:
	branch (a5_11 & 240) == 240 l0000000000016D0C
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0000000000016D0C:
	a4_100 = 0x0000000000011710
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0000000000016CC4:
	a4_100 = 0x0000000000011650
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0000000000016BCC:
	a4_100 = 0x0000000000011748
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0000000000016BE0:
	return a4_100
// DataOut:
// DataOut (flags):
// SymbolicIn:

fn0000000000016B68_exit:
// DataOut:
// DataOut (flags):
// SymbolicIn:



word64 fn0000000000016D74(word64 ra, word64 gp, word64 a0, word64 a1, word64 a2, word64 a3, word64 s4, word64 s7, word64 fa3, word64 fa4, word64 fa5, ptr64 & a4Out)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  a0:[0..63] a1:[0..63] a2:[0..63] a3:[0..63] fa3:[0..63] fa4:[0..63] fa5:[0..63] gp:[0..63] ra:[0..63] s4:[0..63] s7:[0..63]
// LiveOut: a0 a4
// Trashed: a0 a1 a2 a4 a5
// Preserved: a3 a6 a7 fa3 fa4 fa5 gp ra s0 s1 s2 s3 s4 s5 s6 s7 s8 sp t1 t3 t4 t5
fn0000000000016D74_entry:
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0000000000016D74:
	word64 a0_625
	word64 a5_7 = Mem5[gp + -1936:word64]
	memset(a2, 0, 200)
	word64 s6_11 = a2
	word64 s1_114 = a0
	word64 s5_146 = a1
	word64 sp_105 = fp + 0xFFFFFFFFFFFFFE30
	branch (uint64) (uint32) inet_pton(2, a0, fp + 0xFFFFFFFFFFFFFE40) <= 0x0000000000000000 l0000000000016E60
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0000000000016E60:
	branch (int64) Mem37[gp + -2028:int32] != 0x0000000000000000 l0000000000016E20
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0000000000016E68:
	__fprintf_chk(Mem37[gp + -1920:word64], 1, 0x0000000000011788, 0x00000000)
	a0_625 = -1 (alias)
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0000000000016DDC:
	word64 a0_508
	branch a1 < 0x0000000000000000 l0000000000016E88
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0000000000016E88:
	s5_146 = 32
	branch a3 << 0x0000000D >= 0x0000000000000000 l0000000000016EBC
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0000000000016E94:
	word64 a0_68 = fn00000000000182B4((int64) dwLoc01C8, out a3_874, out a4_875)
	s5_146 = 8
	word64 a5_72 = (int64) (word32) (a0_68 >>u 24)
	branch a0_68 >= 0x0000000000000000 l0000000000016EBC
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0000000000016EA8:
	s5_146 = 24
	branch (int64) ((word32) a5_72 + -128) >u 63 l0000000000016EBC
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0000000000016EB8:
	s5_146 = 16
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0000000000016DE0:
	word64 a0_610 = a0
	word64 s0_112 = 3
	word64 s2_80 = 46
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0000000000016DF0:
	word64 a0_85 = strchr(a0_610, s2_80)
	sp_105 = sp_105 + 0xFFFFFFFFFFFFFFF8 + 48
	Mem89[sp_105 + 48:word64] = a0_85
	branch a0_85 == 0x0000000000000000 l0000000000017194
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0000000000017194:
	s4 = 0x0000000000011000
	word64 s3_91 = 1
	word64 s2_92 = -1
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00000000000171A0:
	sp_105 = sp_105 + 0xFFFFFFFFFFFFFFF8
	branch (uint64) (uint32) __asprintf_chk(sp_105 + 0, s3_91, 0x00000000000117A8, 0x00000000) == s2_92 l00000000000172BC
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00000000000172BC:
	a0_508 = Mem89[gp + -1920:word64] (alias)
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00000000000171B8:
	s0_112 = (int64) ((word32) s0_112 + -1)
	s1_114 = Mem89[sp_105 + 48:word64]
	branch s0_112 != 0x0000000000000000 l00000000000171A0
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00000000000171C4:
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0000000000016E00:
	Mem116[sp_105 + 48:word64] = a0_85 + 1
	a0_610 = a0_85 + 1 (alias)
	s0_112 = (int64) ((word32) s0_112 + -1)
	branch s0_112 != 0x0000000000000000 l0000000000016DF0
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0000000000016E10:
	branch a1 <= 32 l0000000000016EBC
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0000000000016EBC:
	word64 sp_134 = sp_105 + 0xFFFFFFFFFFFFFFF8
	branch inet_ntop(2, sp_105 + 8, sp_105 + 56, 47) == 0x0000000000000000 l0000000000017074
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0000000000016ED4:
	Mem145[a2:word64] = __strdup(sp_134 + 56)
	Mem154[sp_134 + 0x0000000000000008:word32] = (word32) fn0000000000016830(gp, s5_146)
	Mem159[sp_134 + 0x0000000000000030:word64] = 0x0000000000000000
	Mem160[sp_134 + 0x0000000000000038:word64] = 0x0000000000000000
	Mem161[sp_134 + 0x0000000000000040:word64] = 0x0000000000000000
	Mem162[sp_134 + 0x0000000000000048:word64] = 0x0000000000000000
	Mem163[sp_134 + 0x0000000000000050:word64] = 0x0000000000000000
	Mem164[sp_134 + 0x0000000000000058:word32] = 0x00000000
	Mem165[sp_134 + 0x000000000000005C:word16] = 0x0000
	Mem166[sp_134 + 0x000000000000005E:byte] = 0x00
	branch inet_ntop(2, sp_134 + 0x0000000000000008, sp_134 + 0x0000000000000030, 16) == 0x0000000000000000 l0000000000017300
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0000000000017300:
	a0_508 = Mem166[gp + -1920:word64] (alias)
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0000000000016F24:
	Mem181[a2 + 48:word64] = __strdup(sp_134 + 0x0000000000000028)
	word64 s0_182 = (int64) Mem181[sp_134 + 0xFFFFFFFFFFFFFFF0:int32]
	Mem183[a2 + 160:word32] = (word32) s5_146
	Mem194[sp_134 + 0x0000000000000008:word32] = (word32) (fn0000000000016830(gp, s5_146) ^ -1 | s0_182)
	Mem195[sp_134 + 0x0000000000000020:word64] = 0x0000000000000000
	Mem196[sp_134 + 0x0000000000000028:word64] = 0x0000000000000000
	Mem197[sp_134 + 0x0000000000000030:word64] = 0x0000000000000000
	Mem198[sp_134 + 0x0000000000000038:word64] = 0x0000000000000000
	Mem199[sp_134 + 0x0000000000000040:word64] = 0x0000000000000000
	Mem200[sp_134 + 0x0000000000000048:word32] = 0x00000000
	Mem201[sp_134 + 0x000000000000004C:word16] = 0x0000
	Mem202[sp_134 + 0x000000000000004E:byte] = 0x00
	branch inet_ntop(2, sp_134 + 0x0000000000000008, sp_134 + 0x0000000000000020, 16) == 0x0000000000000000 l00000000000172F4
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00000000000172F4:
	a0_508 = Mem202[gp + -1920:word64] (alias)
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0000000000016F84:
	Mem217[a2 + 40:word64] = __strdup(sp_134 + 0x0000000000000018)
	word64 s0_218 = (int64) Mem217[sp_134 + 0xFFFFFFFFFFFFFFE0:int32]
	word64 a0_220 = fn0000000000016830(gp, s5_146)
	word64 a3_223 = (int64) Mem217[sp_134 + 0xFFFFFFFFFFFFFFF8:int32]
	word64 s0_224 = a0_220 & s0_218
	Mem228[sp_134 + 0xFFFFFFFFFFFFFFF0:word32] = (word32) s0_224
	word64 a0_229
	word64 t1_236 = fn0000000000017F04(gp, s0_224, s5_146, s0_224, a3_223, out a0_229)
	Mem238[a2 + 24:word64] = a0_229
	Mem243[sp_134 + 0x0000000000000010:word64] = 0x0000000000000000
	Mem244[sp_134 + 0x0000000000000018:word64] = 0x0000000000000000
	Mem245[sp_134 + 0x0000000000000020:word64] = 0x0000000000000000
	Mem246[sp_134 + 0x0000000000000028:word64] = 0x0000000000000000
	Mem247[sp_134 + 0x0000000000000030:word64] = 0x0000000000000000
	Mem248[sp_134 + 0x0000000000000038:word32] = 0x00000000
	Mem249[sp_134 + 0x000000000000003C:word16] = 0x0000
	Mem250[sp_134 + 0x000000000000003E:byte] = 0x00
	branch inet_ntop(2, sp_134 + 0xFFFFFFFFFFFFFFF0, sp_134 + 0x0000000000000010, 16) == 0x0000000000000000 l00000000000172DC
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00000000000172DC:
	a0_508 = Mem250[gp + -1920:word64] (alias)
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0000000000016FF4:
	word64 a5_284
	word64 a0_262 = __strdup(sp_134 + 0x0000000000000008)
	word64 s0_264 = (int64) Mem250[sp_134 + 0xFFFFFFFFFFFFFFE0:int32]
	Mem266[a2 + 32:word64] = a0_262
	Mem276[a2 + 184:word64] = fn0000000000016B68(s0_264)
	word64 a0_278 = fn00000000000182B4(s0_264, out a3_868, out a4_869)
	word64 sp_263 = sp_134 + 0xFFFFFFFFFFFFFFC8
	word64 a5_282 = (int64) (word32) (a0_278 >>u 24)
	branch a0_278 >= 0x0000000000000000 l0000000000017098
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0000000000017098:
	a5_284 = 0x0000000000011758
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0000000000017024:
	branch (int64) ((word32) a5_282 + -128) <=u 63 l000000000001727C
// DataOut:
// DataOut (flags):
// SymbolicIn:

l000000000001727C:
	a5_284 = 0x0000000000011760
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0000000000017030:
	branch (int64) ((word32) a5_282 + -192) <=u 31 l00000000000172A4
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00000000000172A4:
	a5_284 = 0x0000000000011768
// DataOut:
// DataOut (flags):
// SymbolicIn:

l000000000001703C:
	branch (int64) ((word32) a5_282 + -224) >u 14 l00000000000172B0
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00000000000172B0:
	a5_284 = 0x0000000000011778
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0000000000017048:
	a5_284 = 0x0000000000011770
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00000000000170A0:
	word64 a5_309
	Mem301[a2 + 192:word64] = a5_284
	word64 s2_302 = 32
	branch s5_146 == s2_302 l0000000000017158
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0000000000017158:
	Mem306[a2 + 168:word64] = a0_262
	Mem307[a2 + 176:word64] = a0_262
	a5_309 = 0x0000000000011780
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00000000000170AC:
	Mem312[sp_134 + 0xFFFFFFFFFFFFFFF0:word32] = (word32) s0_264
	branch s5_146 == 31 l0000000000017210
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0000000000017210:
	branch inet_ntop(2, sp_134 + 0xFFFFFFFFFFFFFFF0, sp_134, 16) == 0x0000000000000000 l00000000000172E8
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0000000000017228:
	word64 a0_327 = __strdup(sp_134 + 0xFFFFFFFFFFFFFFF8)
	word64 a5_329 = (int64) Mem312[sp_134 + 0xFFFFFFFFFFFFFFC8:int32]
	word64 a4_330 = (int64) Mem312[sp_134 + 0xFFFFFFFFFFFFFFD0:int32]
	Mem332[a2 + 168:word64] = a0_327
	Mem339[sp_134 + 0xFFFFFFFFFFFFFFE8:word32] = (word32) (a5_329 ^ -1 | a4_330)
	branch inet_ntop(2, sp_134 + 0xFFFFFFFFFFFFFFE8, sp_134 + 0xFFFFFFFFFFFFFFF0, 47) == 0x0000000000000000 l0000000000017074
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0000000000017260:
	Mem353[a2 + 176:word64] = __strdup(sp_134 + 0xFFFFFFFFFFFFFFE8)
	sp_263 = sp_134 + 0xFFFFFFFFFFFFFFA8
	a5_309 = 0x0000000000012660
// DataOut:
// DataOut (flags):
// SymbolicIn:

l000000000001716C:
	Mem360[a2 + 96:byte] = (byte) (int64) Mem357[a5_309:byte]
	Mem362[a2 + 97:byte] = (byte) (int64) Mem360[a5_309 + 1:byte]
	branch a3 << 0x00000011 < 0x0000000000000000 l0000000000017288
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0000000000017288:
	gp = fn0000000000017B40(ra, gp, t1_236, s0_264, s1_114, (int64) Mem362[sp_263 + 8:int32], a2 + 64, a2 + 72, a2 + 80, a2 + 88, s2_302, a0_262, s4, s5_146, a2, s7, fa3, fa4, fa5, out s6_11)
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0000000000017184:
	branch (a3 & 1) != 0x0000000000000000 l00000000000171C8
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00000000000171C8:
	word64 a0_455 = fn00000000000168E4(gp, 2, sp_263 + 8)
	Mem467[s6_11 + 56:word64] = a0_455
	branch a0_455 != 0x0000000000000000 l000000000001718C
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00000000000171DC:
	branch (int64) Mem467[gp + -2028:int32] != 0x0000000000000000 l0000000000016E20
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00000000000171E4:
	__sprintf_chk(sp_263 + 104, 1, 250, 0x0000000000011830, 0x00000000)
	herror(sp_263 + 0x0000000000000060)
	a0_625 = -1 (alias)
// DataOut:
// DataOut (flags):
// SymbolicIn:

l000000000001718C:
	a0_625 = 0 (alias)
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00000000000170B8:
	Mem493[sp_134 + 0xFFFFFFFFFFFFFFF0:word32] = (word32) (s0_264 | 0x0000000001000000)
	branch inet_ntop(2, sp_134 + 0xFFFFFFFFFFFFFFF0, sp_134, 16) == 0x0000000000000000 l00000000000172E8
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00000000000172E8:
	a0_508 = Mem502[gp + -1920:word64] (alias)
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00000000000172C4:
	__fprintf_chk(a0_508, 1, 0x00000000000117B0, 0x00000000)
	abort()
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00000000000170DC:
	word64 a0_522 = __strdup(sp_134 + 0xFFFFFFFFFFFFFFF8)
	word64 a5_524 = (int64) Mem493[sp_134 + 0xFFFFFFFFFFFFFFC8:int32]
	Mem526[a2 + 168:word64] = a0_522
	Mem539[sp_134 + 0xFFFFFFFFFFFFFFE8:word32] = (word32) fn00000000000182B4((int64) ((word32) fn00000000000182B4(a5_524 ^ -1 | (int64) Mem526[sp_134 + 0xFFFFFFFFFFFFFFD0:int32], out a3_870, out a4_871) + -1), out a3_872, out a4_873)
	branch inet_ntop(2, sp_134 + 0xFFFFFFFFFFFFFFE8, sp_134 + 0xFFFFFFFFFFFFFFF0, 47) == 0x0000000000000000 l0000000000017074
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0000000000017074:
	branch (int64) Mem552[gp + -2028:int32] != 0x0000000000000000 l0000000000016E20
// DataOut:
// DataOut (flags):
// SymbolicIn:

l000000000001707C:
	fwrite(0x00000000000117F8, 1, 43, Mem552[gp + -1920:word64])
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0000000000017120:
	__strdup(sp_134 + 0xFFFFFFFFFFFFFFE8)
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0000000000016E18:
	branch (int64) Mem554[gp + -2028:int32] == 0x0000000000000000 l0000000000017054
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0000000000017054:
	__fprintf_chk(Mem554[gp + -1920:word64], 1, 0x00000000000117D8, 0x00000000)
	a0_625 = -1 (alias)
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0000000000016E20:
	a0_625 = -1 (alias)
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0000000000016E24:
	branch a5_7 != Mem590[gp + -1936:word64] l00000000000172D8
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00000000000172D8:
	__stack_chk_fail()
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0000000000016E30:
	a4Out = a5_7
	return a0_625
// DataOut:
// DataOut (flags):
// SymbolicIn:

fn0000000000016D74_exit:
// DataOut:
// DataOut (flags):
// SymbolicIn:



word64 fn000000000001730C(word64 gp, word64 a0, word64 a1)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  a0:[0..63] a1:[0..63] gp:[0..63]
// LiveOut: a0
// Trashed: a0 a1 a5
// Preserved: a2 a3 ra s0 s1 sp
fn000000000001730C_entry:
// DataOut:
// DataOut (flags):
// SymbolicIn:

l000000000001730C:
	word64 a0_60
	word64 a4_7 = Mem5[gp + -1936:word64]
	branch a0 >u 128 l00000000000173BC
// DataOut:
// DataOut (flags):
// SymbolicIn:

l000000000001732C:
	word64 a5_20 = fp + -184
	word64 a3_22 = 7
	word64 a2_23 = -1
	branch a0 == 0x0000000000000000 l000000000001736C
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0000000000017354:
	branch a3_22 >= a0 l00000000000173C4
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00000000000173C4:
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0000000000017358:
	Mem29[a5_20:byte] = (byte) a2_23
	a0 = (int64) ((word32) a0 + -8)
	a5_20 = a5_20 + 1
	branch a0 > 0x0000000000000000 l0000000000017354
// DataOut:
// DataOut (flags):
// SymbolicIn:

l000000000001736C:
	branch inet_ntop(10, fp + -184, fp + -168, 128) == 0x0000000000000000 l00000000000173BC
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00000000000173BC:
	a0_60 = 0 (alias)
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0000000000017384:
	memcpy(a1, fp + 0xFFFFFFFFFFFFFF40, 16)
	a0_60 = __strdup(fp + 0xFFFFFFFFFFFFFF48)
// DataOut:
// DataOut (flags):
// SymbolicIn:

l000000000001739C:
	branch a4_7 != Mem64[gp + -1936:word64] l00000000000173D0
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00000000000173D0:
	__stack_chk_fail()
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00000000000173A8:
	return a0_60
// DataOut:
// DataOut (flags):
// SymbolicIn:

fn000000000001730C_exit:
// DataOut:
// DataOut (flags):
// SymbolicIn:



word64 fn00000000000173D4(word64 a0, word64 a1, ptr64 & spOut, ptr64 & s0Out, ptr64 & s1Out, ptr64 & a0Out, ptr64 & s2Out, ptr64 & s3Out)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  a0:[0..63] a1:[0..63]
// LiveOut: a0 ra s0 s1 s2 s3 sp
// Trashed: a0 a1 a2 a3 a4 a5 ra s0 s1 s2 s3 sp
// Preserved:
fn00000000000173D4_entry:
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00000000000173D4:
	word64 a0_117
	word64 s2_17 = (int64) Mem13[a0:byte]
	word64 s3_18 = (int64) Mem13[a0 + 1:byte]
	branch a1 == 128 l00000000000174DC
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00000000000174DC:
	branch (uint64) (uint32) memcmp(a0, 0x0000000000010880, 16) == 0x0000000000000000 l0000000000017538
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0000000000017538:
	spOut = fp + 0xFFFFFFFFFFFFFFF8
	s0Out = s1
	s1Out = s2
	a0Out = 0x0000000000011858
	s2Out = s3
	s3Out = qwLoc30
	return s0
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00000000000174F4:
	branch (uint64) (uint32) memcmp(a0, 0x0000000000010898, 16) != 0x0000000000000000 l000000000001747C
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0000000000017508:
	a0_117 = 0x0000000000011870
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0000000000017400:
	branch a1 > 95 l0000000000017474
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0000000000017474:
// DataOut:
// DataOut (flags):
// SymbolicIn:

l000000000001747C:
	branch (uint64) (uint32) memcmp(a0, 0x00000000000108B0, 12) == 0x0000000000000000 l000000000001755C
// DataOut:
// DataOut (flags):
// SymbolicIn:

l000000000001755C:
	spOut = fp
	s0Out = qwArg00
	s1Out = ra
	a0Out = 0x0000000000011888
	s2Out = s0
	s3Out = s1
	return qwArg08
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0000000000017490:
	branch (uint64) (uint32) memcmp(a0, 0x00000000000108C0, 12) == 0x0000000000000000 l0000000000017514
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0000000000017514:
	spOut = fp
	s0Out = ra
	s1Out = s0
	a0Out = 0x00000000000118A0
	s2Out = s1
	s3Out = s2
	return qwArg00
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00000000000174A4:
	branch (uint64) (uint32) memcmp(a0, 0x00000000000108D0, 12) != 0x0000000000000000 l0000000000017408
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00000000000174B8:
	spOut = fp
	s0Out = s0
	s1Out = s1
	a0Out = 0x00000000000118B8
	s2Out = s2
	s3Out = s3
	return ra
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0000000000017408:
	word64 a5_112 = s2_17 << 0x00000008 | s3_18
	branch (a5_112 & 0x00000000FFFFE000) == 0x0000000000002000 l0000000000017580
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0000000000017580:
	a0_117 = 0x00000000000118D8
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0000000000017420:
	branch (s2_17 & 254) == 252 l000000000001758C
// DataOut:
// DataOut (flags):
// SymbolicIn:

l000000000001758C:
	a0_117 = 0x00000000000118E8
// DataOut:
// DataOut (flags):
// SymbolicIn:

l000000000001742C:
	branch (a5_112 & -64) == 65152 l0000000000017598
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0000000000017598:
	a0_117 = 0x0000000000011900
// DataOut:
// DataOut (flags):
// SymbolicIn:

l000000000001743C:
	branch s2_17 == 255 l00000000000175A4
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00000000000175A4:
	a0_117 = 0x0000000000011748
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0000000000017444:
	a0_117 = 0x0000000000011710
	branch (a5_112 & -2) == 8194 l00000000000175B0
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00000000000175B0:
	a0_117 = 0x0000000000011918
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0000000000017458:
	spOut = fp
	s0Out = s0
	s1Out = s1
	a0Out = a0_117
	s2Out = s2
	s3Out = s3
	return ra
// DataOut:
// DataOut (flags):
// SymbolicIn:

fn00000000000173D4_exit:
// DataOut:
// DataOut (flags):
// SymbolicIn:



word64 fn00000000000175BC(word64 gp, word64 t1, word64 a0, word64 a1, word64 a2, word64 a3, word64 fa3, word64 fa4, word64 fa5, ptr64 & a4Out)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  a0:[0..63] a1:[0..63] a2:[0..63] a3:[0..63] fa3:[0..63] fa4:[0..63] fa5:[0..63] gp:[0..63] t1:[0..63]
// LiveOut: a0 a4
// Trashed: a0 a1 a2 a3 a4 a5
// Preserved: a6 a7 fa3 fa4 fa5 gp ra s0 s1 s2 s3 s4 s5 s6 s7 s8 s9 sp t1 t3 t4 t5
fn00000000000175BC_entry:
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00000000000175BC:
	word64 a0_104
	word64 a5_7 = Mem5[gp + -1936:word64]
	memset(a2, 0, 200)
	word64 s2_105 = a1
	word64 s6_366 = a3
	branch (uint64) (uint32) inet_pton(10, a0, fp + 0xFFFFFFFFFFFFFE60) <= 0x0000000000000000 l00000000000177B4
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00000000000177B4:
	branch (int64) Mem39[gp + -2028:int32] != 0x0000000000000000 l0000000000017770
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00000000000177BC:
	__fprintf_chk(Mem39[gp + -1920:word64], 1, 0x0000000000011920, 0x00000000)
	a0_104 = -1
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0000000000017628:
	Mem74[a2 + 8:word64] = fn00000000000163B0(gp)
	branch inet_ntop(10, fp + 0xFFFFFFFFFFFFFE58, fp + 0xFFFFFFFFFFFFFE88, 250) == 0x0000000000000000 l0000000000017768
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0000000000017650:
	Mem91[a2:word64] = __strdup(fp + 0xFFFFFFFFFFFFFE88)
	word64 s5_106 = 128
	branch s5_106 < a1 l00000000000177DC
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00000000000177DC:
	branch (int64) Mem91[gp + -2028:int32] != 0x0000000000000000 l0000000000017770
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00000000000177E4:
	__fprintf_chk(Mem91[gp + -1920:word64], 1, 0x0000000000011940, 0x00000000)
	a0_104 = -1
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0000000000017664:
	branch a1 < 0x0000000000000000 l0000000000017868
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0000000000017868:
	s2_105 = s5_106
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0000000000017668:
	s5_106 = a1
// DataOut:
// DataOut (flags):
// SymbolicIn:

l000000000001766C:
	Mem111[a2 + 160:word32] = (word32) s5_106
	word64 a0_115 = fn000000000001730C(gp, s5_106, fp + 0xFFFFFFFFFFFFFE58)
	Mem118[a2 + 48:word64] = a0_115
	branch a0_115 == 0x0000000000000000 l00000000000178F8
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00000000000178F8:
	branch (int64) Mem118[gp + -2028:int32] != 0x0000000000000000 l0000000000017770
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0000000000017900:
	__fprintf_chk(Mem118[gp + -1920:word64], 1, 0x0000000000011960, 0x00000000)
	a0_104 = -1
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0000000000017688:
	word64 s8_132 = fp + 0xFFFFFFFFFFFFFE68
	word64 a5_133 = fp + 0xFFFFFFFFFFFFFE48
	word64 s9_134 = fp + 0xFFFFFFFFFFFFFE58
	word64 a2_135 = fp + 0xFFFFFFFFFFFFFE68
	word64 a3_136 = fp + 0xFFFFFFFFFFFFFE58
// DataOut:
// DataOut (flags):
// SymbolicIn:

l000000000001769C:
	Mem146[a2_135:byte] = (byte) ((int64) Mem138[a5_133:byte] & (int64) Mem138[a3_136:byte])
	a5_133 = a5_133 + 1
	a3_136 = a3_136 + 1
	a2_135 = a2_135 + 1
	branch fp + 0xFFFFFFFFFFFFFE58 != a5_133 l000000000001769C
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00000000000176BC:
	branch inet_ntop(10, fp + 0xFFFFFFFFFFFFFE68, fp + 0xFFFFFFFFFFFFFE88, 250) == 0x0000000000000000 l0000000000017768
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00000000000176D4:
	word64 s2_259
	Mem169[a2 + 32:word64] = __strdup(fp + 0xFFFFFFFFFFFFFE88)
	Mem178[a2 + 16:word64] = fn00000000000163B0(gp)
	word64 a0_182
	word64 s1_188
	word64 s2_189
	word64 sp_191
	word64 s0_187
	word64 s3_190
	word64 ra_186 = fn00000000000173D4(fp + 0xFFFFFFFFFFFFFE58, s2_105, out sp_191, out s0_187, out s1_188, out a0_182, out s2_189, out s3_190)
	Mem194[s0_187 + 184:word64] = a0_182
	Mem202[s0_187 + 24:word64] = fn0000000000018118(gp, sp_191 + 40, s5_106)
	branch s2_189 != 128 l0000000000017870
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0000000000017870:
	Mem209[s0_187 + 168:word64] = __strdup(s3_190)
// DataOut:
// DataOut (flags):
// SymbolicIn:

l000000000001787C:
	s8_132 = s8_132 + 1
	Mem218[s8_132 + 4095:byte] = (byte) ((int64) Mem211[s9_134:byte] ^ -1 | (int64) Mem211[s8_132:byte])
	s9_134 = s9_134 + 1
	branch s3_190 != s8_132 l000000000001787C
// DataOut:
// DataOut (flags):
// SymbolicIn:

l000000000001789C:
	branch inet_ntop(10, sp_191 + 0x0000000000000020, s3_190, 250) == 0x0000000000000000 l0000000000017768
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0000000000017768:
	branch (int64) Mem235[gp + -2028:int32] == 0x0000000000000000 l0000000000017804
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0000000000017804:
	fwrite(0x00000000000117F8, 1, 43, Mem235[gp + -1920:word64])
	a0_104 = -1
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00000000000178B4:
	Mem257[s0_187 + 176:word64] = __strdup(s3_190)
	word64 a5_254 = 128
	sp_191 = sp_191 + 0xFFFFFFFFFFFFFFE8
	s2_259 = (int64) (word32) (a5_254 - s2_189)
	branch s2_259 != a5_254 l0000000000017728
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00000000000178D0:
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0000000000017714:
	word64 a5_263 = Mem202[s0_187 + 32:word64]
	Mem266[s0_187 + 168:word64] = a5_263
	Mem267[s0_187 + 176:word64] = a5_263
	s2_259 = 0
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0000000000017728:
	s2_259 = (s2_259 << 0x00000000 >>u 0x0000001D) + 0x0000000000010480
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0000000000017740:
	snprintf(s0_187 + 96, 64, 0x0000000000011990, 0x00000000)
	word64 sp_288 = sp_191 + 0xFFFFFFFFFFFFFFF8
	branch a3 << 0x00000011 < 0x0000000000000000 l00000000000178DC
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00000000000178DC:
	gp = fn0000000000017D10(ra_186, gp, t1, s0_187, s1_188, sp_288 + 8, s0_187 + 64, s0_187 + 72, s0_187 + 80, s0_187 + 88, s2_259, s3_190, a0, s5_106, a3, fp + 0xFFFFFFFFFFFFFE58, fa3, fa4, fa5, out s0_187, out s3_190, out s6_366)
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0000000000017758:
	branch (s6_366 & 1) != 0x0000000000000000 l0000000000017824
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0000000000017824:
	word64 a0_375 = fn00000000000168E4(gp, 10, sp_288 + 8)
	Mem387[s0_187 + 56:word64] = a0_375
	branch a0_375 != 0x0000000000000000 l0000000000017760
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0000000000017838:
	branch (int64) Mem387[gp + -2028:int32] != 0x0000000000000000 l0000000000017770
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0000000000017840:
	__sprintf_chk(s3_190, 1, 250, 0x0000000000011830, 0x00000000)
	herror(s3_190)
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0000000000017770:
	a0_104 = -1
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0000000000017760:
	a0_104 = 0
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0000000000017774:
	branch a5_7 != Mem411[gp + -1936:word64] l0000000000017920
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0000000000017920:
	__stack_chk_fail()
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0000000000017780:
	a4Out = a5_7
	return a0_104
// DataOut:
// DataOut (flags):
// SymbolicIn:

fn00000000000175BC_exit:
// DataOut:
// DataOut (flags):
// SymbolicIn:



word64 fn0000000000017924(word64 gp, ptr64 & a1Out, ptr64 & a2Out, ptr64 & a3Out, ptr64 & a4Out, ptr64 & a6Out)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  gp:[0..63]
// LiveOut: a0 a1 a2 a3 a4 a6
// Trashed: a0 a1 a2 a3 a4 a5 a6
// Preserved: ra s0 s1 s2 s3 s4 s5 s6 s7 s8 s9 sp
fn0000000000017924_entry:
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0000000000017924:
	word64 s0_152
	branch Mem5[gp + -2016:word64] == 0x0000000000000000 l00000000000179B8
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00000000000179B8:
	s0_152 = (int64) Mem27[gp + -2024:int32]
	branch s0_152 != 0x0000000000000000 l000000000001795C
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00000000000179C0:
	word64 a0_34 = dlopen(0x0000000000012A38, 1)
	Mem37[gp + 2080:word64] = a0_34
	branch a0_34 == 0x0000000000000000 l0000000000017B14
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0000000000017B14:
	a3 = 256
	a2 = 1
	__snprintf_chk(gp + -800, a3, a2, a3, 0x0000000000012A58, 0x00000000)
	s0_152 = -1
	Mem54[gp + 2072:word32] = (word32) s0_152
	a4 = 0x0000000000012A58
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00000000000179DC:
	Mem62[gp + 2152:word64] = dlsym(a0_34, 0x0000000000012A78)
	word64 a0_67 = dlsym(a0_34, 0x0000000000012A90)
	Mem74[gp + 2144:word64] = a0_67
	word64 a0_77 = dlsym(a0_34, 0x0000000000012AA0)
	Mem84[gp + 2136:word64] = a0_77
	word64 a0_87 = dlsym(a0_34, 0x0000000000012AC0)
	Mem94[gp + 2120:word64] = a0_87
	word64 a0_97 = dlsym(a0_34, 0x0000000000012AD0)
	Mem104[gp + 2112:word64] = a0_97
	word64 a0_107 = dlsym(a0_34, 0x0000000000012AE8)
	Mem114[gp + 2104:word64] = a0_107
	word64 a0_117 = dlsym(a0_34, 0x0000000000012B00)
	Mem124[gp + 2096:word64] = a0_117
	word64 a0_127 = dlsym(a0_34, 0x0000000000012B18)
	Mem134[gp + 2088:word64] = a0_127
	Mem140[gp + 2128:word64] = dlsym(a0_34, 0x0000000000012B38)
	branch a0_67 == 0x0000000000000000 l0000000000017ACC
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0000000000017AAC:
	branch a0_77 == 0x0000000000000000 l0000000000017ACC
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0000000000017AB0:
	branch a0_87 == 0x0000000000000000 l0000000000017ACC
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0000000000017AB4:
	branch a0_97 == 0x0000000000000000 l0000000000017ACC
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0000000000017AB8:
	branch a0_107 == 0x0000000000000000 l0000000000017ACC
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0000000000017ABC:
	branch a0_117 == 0x0000000000000000 l0000000000017ACC
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0000000000017AC0:
	branch a0_127 == 0x0000000000000000 l0000000000017ACC
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0000000000017ACC:
	a6 = Mem140[0x0000000000012B50:word64]
	word64 a0_145 = Mem140[0x0000000000012B58:word64]
	word64 a1_146 = Mem140[0x0000000000012B60:word64]
	a2 = Mem140[0x0000000000012B68:word64]
	a3 = Mem140[0x0000000000012B70:word64]
	a4 = (int64) Mem140[0x0000000000012B78:int32]
	Mem153[gp + -800:word64] = a6
	Mem154[gp + -792:word64] = a0_145
	Mem155[gp + -784:word64] = a1_146
	Mem156[gp + -776:word64] = a2
	Mem157[gp + -768:word64] = a3
	Mem158[gp + -760:word32] = (word32) a4
	s0_152 = -1
	Mem159[gp + 2072:word32] = (word32) s0_152
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0000000000017AC4:
	Mem160[gp + 2072:word32] = 0x00000000
// DataOut:
// DataOut (flags):
// SymbolicIn:

l000000000001795C:
	branch (int64) Mem27[gp + -2028:int32] != 0x0000000000000000 l000000000001796C
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0000000000017964:
	branch (int64) Mem27[gp + -800:byte] != 0x0000000000000000 l00000000000179A8
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00000000000179A8:
	fputs(gp + -800, Mem27[gp + -1920:word64])
// DataOut:
// DataOut (flags):
// SymbolicIn:

l000000000001796C:
	s0_152 = (int64) Mem27[gp + -2024:int32]
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0000000000017970:
	a1Out = <invalid>
	a2Out = a2
	a3Out = a3
	a4Out = a4
	a6Out = a6
	return s0_152
// DataOut:
// DataOut (flags):
// SymbolicIn:

fn0000000000017924_exit:
// DataOut:
// DataOut (flags):
// SymbolicIn:



word64 fn0000000000017B40(word64 ra, word64 gp, word64 t1, word64 s0, word64 s1, word64 a0, word64 a1, word64 a2, word64 a3, word64 a4, word64 s2, word64 s3, word64 s4, word64 s5, word64 s6, word64 s7, word64 fa3, word64 fa4, word64 fa5, ptr64 & s6Out)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  a0:[0..63] a1:[0..63] a2:[0..63] a3:[0..63] a4:[0..63] fa3:[0..63] fa4:[0..63] fa5:[0..63] gp:[0..63] ra:[0..63] s0:[0..63] s1:[0..63] s2:[0..63] s3:[0..63] s4:[0..63] s5:[0..63] s6:[0..63] s7:[0..63] t1:[0..63]
// LiveOut: gp s6
// Trashed: a0 a1 a2 a3 a4 a5 a6 fa3 fa4 fa5 gp ra s0 s1 s2 s3 s4 s5 s6 s7 t1
// Preserved: sp
fn0000000000017B40_entry:
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0000000000017B40:
	word64 a1_34
	word64 a2_35
	word64 a6_39
	branch fn0000000000017924(gp, out a1_34, out a2_35, out a3_36, out a4_37, out a6_39) == 0x0000000000000000 l0000000000017BB0
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0000000000017BB0:
	word64 a3_42
	word64 a4_43
	word64 a0_41 = fn00000000000182B4(a0, out a3_42, out a4_43)
	word64 a5_45 = Mem21[gp + -1944:word64]
	word64 sp_47
	word64 s0_48
	word64 s1_49
	word64 s2_50
	word64 s3_51
	word64 s4_52
	word64 ra_53
	word64 s5_54
	word64 s6_55
	word64 s7_56
	word64 a2_62
	word64 a3_63
	word64 a4_64
	word64 gp_66
	word64 fa4_68
	word64 fa5_70
	word64 t1_72
	word64 fa3_74
	word64 a6_75
	call a5_45 (retsize: 0;)
		uses: a0:a0_41,a1:a1_34,a2:a2_35,a3:a3_42,a4:a4_43,a5:a5_45,a6:a6_39,fa3:fa3,fa4:fa4,fa5:fa5,gp:gp,ra:ra,s0:a0,s1:a3,s2:a2,s3:a1,s4:a4,s5:s5,s6:s6,s7:a0_41,sp:fp + -80,Stack +0008:s7,Stack +0010:s6,Stack +0018:s5,Stack +0020:s4,Stack +0028:s3,Stack +0030:s2,Stack +0038:s1,Stack +0040:s0,Stack +0048:ra,t1:t1
		defs: a2:a2_62,a3:a3_63,a4:a4_64,a6:a6_75,fa3:fa3_74,fa4:fa4_68,fa5:fa5_70,gp:gp_66,ra:ra_53,s0:s0_48,s1:s1_49,s2:s2_50,s3:s3_51,s4:s4_52,s5:s5_54,s6:s6_55,s7:s7_56,sp:sp_47,t1:t1_72
	word64 a5_76 = Mem21[gp_66 + -1952:word64]
	word64 a0_90
	word64 gp_254
	word64 sp_225
	word64 s1_228
	word64 s2_230
	word64 s3_232
	word64 s4_234
	word64 ra_236
	word64 s5_238
	word64 s6_240
	word64 s7_242
	word64 a2_248
	word64 a3_250
	word64 a4_252
	word64 fa4_256
	word64 fa5_258
	word64 t1_100
	word64 fa3_101
	word64 a6_102
	call a5_76 (retsize: 0;)
		uses: a0:1,a1:16,a2:a2_62,a3:a3_63,a4:a4_64,a5:a5_76,a6:a6_75,fa3:fa3_74,fa4:fa4_68,fa5:fa5_70,gp:gp_66,ra:ra_53,s0:s0_48,s1:s1_49,s2:s2_50,s3:s3_51,s4:s4_52,s5:s5_54,s6:s6_55,s7:s7_56,sp:sp_47,Stack +FFFFFFB8:s7,Stack +FFFFFFC0:s6,Stack +FFFFFFC8:s5,Stack +FFFFFFD0:s4,Stack +FFFFFFD8:s3,Stack +FFFFFFE0:s2,Stack +FFFFFFE8:s1,Stack +FFFFFFF0:s0,Stack +FFFFFFF8:ra,t1:t1_72
		defs: a0:a0_90,a2:a2_93,a3:a3_94,a4:a4_95,a6:a6_102,fa3:fa3_101,fa4:fa4_98,fa5:fa5_99,gp:gp_97,ra:ra_85,s1:s1_81,s2:s2_82,s3:s3_83,s4:s4_84,s5:s5_86,s6:s6_87,s7:s7_88,sp:sp_79,t1:t1_100
	word64 s0_104 = a0_90
	branch a0_90 == 0x0000000000000000 l0000000000017C3C
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0000000000017BDC:
	word64 a5_105 = Mem21[gp_254 + -1992:word64]
	word64 a4_106 = 1
	Mem108[a0_90 + 76:word32] = (word32) a4_106
	word64 sp_110
	word64 s0_111
	word64 s1_112
	word64 s2_113
	word64 s3_114
	word64 s4_115
	word64 ra_116
	word64 s5_117
	word64 s7_119
	word64 a0_121
	word64 a2_124
	word64 a3_125
	word64 a4_126
	word64 fa4_129
	word64 fa5_130
	word64 t1_131
	word64 fa3_132
	word64 a6_133
	call a5_105 (retsize: 0;)
		uses: a0:a0_90,a1:s7_88 << 0x00000000 >>u 0x00000000,a2:a2_93,a3:a3_94,a4:a4_106,a5:a5_105,a6:a6_102,fa3:fa3_101,fa4:fa4_98,fa5:fa5_99,gp:gp_97,ra:ra_85,s0:a0_90,s1:s1_81,s2:s2_82,s3:s3_83,s4:s4_84,s5:s5_86,s6:s6_87,s7:s7_88,sp:sp_79,Stack +FFFFFFB8:s7,Stack +FFFFFFC0:s6,Stack +FFFFFFC8:s5,Stack +FFFFFFD0:s4,Stack +FFFFFFD8:s3,Stack +FFFFFFE0:s2,Stack +FFFFFFE8:s1,Stack +FFFFFFF0:s0,Stack +FFFFFFF8:ra,t1:t1_100
		defs: a0:a0_121,a2:a2_124,a3:a3_125,a4:a4_126,a6:a6_133,fa3:fa3_132,fa4:fa4_129,fa5:fa5_130,gp:gp_128,ra:ra_116,s0:s0_111,s1:s1_112,s2:s2_113,s3:s3_114,s4:s4_115,s5:s5_117,s7:s7_119,sp:sp_110,t1:t1_131
	branch a0_121 < 0x0000000000000000 l0000000000017B84
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0000000000017BFC:
	word64 a5_136 = Mem108[gp + -1960:word64]
	word64 s0_140
	word64 s1_141
	word64 s2_142
	word64 s3_143
	word64 s4_144
	word64 ra_145
	word64 s5_146
	word64 s6_147
	word64 s7_148
	word64 a0_150
	word64 a1_152
	word64 a2_153
	word64 a3_154
	word64 a4_155
	word64 gp_157
	word64 fa4_158
	word64 fa5_159
	word64 t1_160
	word64 fa3_161
	word64 a6_162
	word64 sp_139
	call a5_136 (retsize: 0;)
		uses: a0:s0_111,a1:a0_121,a2:a2_124,a3:a3_125,a4:a4_126,a5:a5_136,a6:a6_133,fa3:fa3_132,fa4:fa4_129,fa5:fa5_130,gp:gp_128,ra:ra_116,s0:s0_111,s1:s1_112,s2:s2_113,s3:s3_114,s4:s4_115,s5:s5_117,s6:a0_121,s7:s7_119,sp:sp_110,Stack +FFFFFFB8:s7,Stack +FFFFFFC0:s6,Stack +FFFFFFC8:s5,Stack +FFFFFFD0:s4,Stack +FFFFFFD8:s3,Stack +FFFFFFE0:s2,Stack +FFFFFFE8:s1,Stack +FFFFFFF0:s0,Stack +FFFFFFF8:ra,t1:t1_131
		defs: a0:a0_150,a1:a1_152,a2:a2_153,a3:a3_154,a4:a4_155,a6:a6_162,fa3:fa3_161,fa4:fa4_158,fa5:fa5_159,gp:gp_157,ra:ra_145,s0:s0_140,s1:s1_141,s2:s2_142,s3:s3_143,s4:s4_144,s5:s5_146,s6:s6_147,s7:s7_148,sp:sp_139,t1:t1_160
	branch a0_150 == 0x0000000000000000 l0000000000017C18
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0000000000017C10:
	Mem167[s3_143:word64] = __strdup(a0_150)
	sp_139 = sp_139 + 0xFFFFFFFFFFFFFFF8
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0000000000017C18:
	word64 a5_170 = Mem169[gp_157 + -1968:word64]
	word64 s0_176
	word64 s1_178
	word64 s2_180
	word64 s3_182
	word64 s4_184
	word64 ra_186
	word64 s5_188
	word64 s6_189
	word64 s7_191
	word64 a0_193
	word64 a1_195
	word64 a2_197
	word64 a3_199
	word64 a4_201
	word64 gp_203
	word64 fa4_205
	word64 fa5_207
	word64 t1_209
	word64 fa3_211
	word64 a6_213
	word64 sp_174
	call a5_170 (retsize: 0;)
		uses: a0:s6_147,a1:a1_152,a2:a2_153,a3:a3_154,a4:a4_155,a5:a5_170,a6:a6_162,fa3:fa3_161,fa4:fa4_158,fa5:fa5_159,gp:gp_157,ra:ra_145,s0:s0_140,s1:s1_141,s2:s2_142,s3:s3_143,s4:s4_144,s5:s5_146,s6:s6_147,s7:s7_148,sp:sp_173,Stack +FFFFFFB8:s7,Stack +FFFFFFC0:s6,Stack +FFFFFFC8:s5,Stack +FFFFFFD0:s4,Stack +FFFFFFD8:s3,Stack +FFFFFFE0:s2,Stack +FFFFFFE8:s1,Stack +FFFFFFF0:s0,Stack +FFFFFFF8:ra,t1:t1_160
		defs: a0:a0_193,a1:a1_195,a2:a2_197,a3:a3_199,a4:a4_201,a6:a6_213,fa3:fa3_211,fa4:fa4_205,fa5:fa5_207,gp:gp_203,ra:ra_186,s0:s0_176,s1:s1_178,s2:s2_180,s3:s3_182,s4:s4_184,s5:s5_188,s6:s6_189,s7:s7_191,sp:sp_174,t1:t1_209
	branch a0_193 == 0x0000000000000000 l0000000000017C30
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0000000000017C28:
	Mem218[s2_180:word64] = __strdup(a0_193)
	sp_174 = sp_174 + 0xFFFFFFFFFFFFFFF8
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0000000000017C30:
	word64 a5_221 = Mem220[gp_203 + -1976:word64]
	call a5_221 (retsize: 0;)
		uses: a0:s0_176,a1:a1_195,a2:a2_197,a3:a3_199,a4:a4_201,a5:a5_221,a6:a6_213,fa3:fa3_211,fa4:fa4_205,fa5:fa5_207,gp:gp_203,ra:ra_186,s0:s0_176,s1:s1_178,s2:s2_180,s3:s3_182,s4:s4_184,s5:s5_188,s6:s6_189,s7:s7_191,sp:sp_224,Stack +FFFFFFB8:s7,Stack +FFFFFFC0:s6,Stack +FFFFFFC8:s5,Stack +FFFFFFD0:s4,Stack +FFFFFFD8:s3,Stack +FFFFFFE0:s2,Stack +FFFFFFE8:s1,Stack +FFFFFFF0:s0,Stack +FFFFFFF8:ra,t1:t1_209
		defs: a2:a2_248,a3:a3_250,a4:a4_252,a6:a6_264,fa3:fa3_262,fa4:fa4_256,fa5:fa5_258,gp:gp_254,ra:ra_236,s0:s0_226,s1:s1_228,s2:s2_230,s3:s3_232,s4:s4_234,s5:s5_238,s6:s6_240,s7:s7_242,sp:sp_225,t1:t1_260
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0000000000017C3C:
	word64 a5_267 = Mem266[gp_254 + -1952:word64]
	word64 a4_299
	word64 s7_289
	word64 sp_271
	word64 s1_275
	word64 s2_277
	word64 s3_279
	word64 s4_281
	word64 ra_283
	word64 s5_285
	word64 s6_287
	word64 a0_291
	word64 a2_295
	word64 a3_297
	word64 fa4_303
	word64 fa5_305
	word64 t1_307
	word64 fa3_309
	word64 a6_311
	call a5_267 (retsize: 0;)
		uses: a0:2,a1:16,a2:a2_294,a3:a3_296,a4:a4_298,a5:a5_267,a6:a6_310,fa3:fa3_308,fa4:fa4_302,fa5:fa5_304,gp:gp_265,ra:ra_282,s0:s0_272,s1:s1_274,s2:s2_276,s3:s3_278,s4:s4_280,s5:s5_284,s6:s6_286,s7:s7_288,sp:sp_270,Stack +FFFFFFB8:s7,Stack +FFFFFFC0:s6,Stack +FFFFFFC8:s5,Stack +FFFFFFD0:s4,Stack +FFFFFFD8:s3,Stack +FFFFFFE0:s2,Stack +FFFFFFE8:s1,Stack +FFFFFFF0:s0,Stack +FFFFFFF8:ra,t1:t1_306
		defs: a0:a0_291,a2:a2_295,a3:a3_297,a4:a4_299,a6:a6_311,fa3:fa3_309,fa4:fa4_303,fa5:fa5_305,gp:gp_301,ra:ra_283,s1:s1_275,s2:s2_277,s3:s3_279,s4:s4_281,s5:s5_285,s6:s6_287,s7:s7_289,sp:sp_271,t1:t1_307
	word64 s0_313 = a0_291
	branch a0_291 == 0x0000000000000000 l0000000000017CF4
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0000000000017CF4:
	word64 a5_314 = Mem266[gp + -1952:word64]
	call a5_314 (retsize: 0;)
		uses: a0:6,a1:16,a2:a2_295,a3:a3_297,a4:a4_299,a5:a5_314,a6:a6_311,fa3:fa3_309,fa4:fa4_303,fa5:fa5_305,gp:gp_301,ra:ra_283,s0:a0_291,s1:s1_275,s2:s2_277,s3:s3_279,s4:s4_281,s5:s5_285,s6:s6_287,s7:s7_289,sp:sp_271,Stack +FFFFFFB8:s7,Stack +FFFFFFC0:s6,Stack +FFFFFFC8:s5,Stack +FFFFFFD0:s4,Stack +FFFFFFD8:s3,Stack +FFFFFFE0:s2,Stack +FFFFFFE8:s1,Stack +FFFFFFF0:s0,Stack +FFFFFFF8:ra,t1:t1_307
		defs: a0:a0_328,a2:a2_331,a3:a3_332,a6:a6_340,fa3:fa3_339,fa4:fa4_336,fa5:fa5_337,gp:gp_335,ra:ra_323,s1:s1_319,s2:s2_320,s3:s3_321,s4:s4_322,s5:s5_324,s6:s6_325,s7:s7_326,sp:sp_317,t1:t1_338
	s0_313 = a0_291
	branch a0_291 != 0x0000000000000000 l0000000000017C54
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0000000000017D0C:
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0000000000017C54:
	word64 a5_345 = Mem266[gp + -1984:word64]
	word64 a4_346 = 1
	Mem350[s0_313 + 76:word32] = (word32) a4_346
	word64 s0_354
	word64 s1_356
	word64 s4_362
	word64 a0_371
	word64 a3_377
	word64 a4_378
	word64 gp_380
	word64 a6_390
	word64 sp_353
	word64 a1_373
	word64 a2_375
	word64 a5_379
	word64 fa4_382
	word64 fa5_384
	word64 fa3_388
	call a5_345 (retsize: 0;)
		uses: a0:a0_370,a1:s7_347 << 0x00000000 >>u 0x00000000,a2:a2_374,a3:a3_376,a4:a4_346,a5:a5_345,a6:a6_389,fa3:fa3_387,fa4:fa4_381,fa5:fa5_383,gp:gp_343,ra:ra_363,s0:s0_349,s1:s1_355,s2:s2_357,s3:s3_359,s4:s4_361,s5:s5_365,s6:s6_367,s7:s7_347,sp:sp_352,Stack +FFFFFFB8:s7,Stack +FFFFFFC0:s6,Stack +FFFFFFC8:s5,Stack +FFFFFFD0:s4,Stack +FFFFFFD8:s3,Stack +FFFFFFE0:s2,Stack +FFFFFFE8:s1,Stack +FFFFFFF0:s0,Stack +FFFFFFF8:ra,t1:t1_385
		defs: a0:a0_371,a1:a1_373,a2:a2_375,a3:a3_377,a4:a4_378,a5:a5_379,a6:a6_390,fa3:fa3_388,fa4:fa4_382,fa5:fa5_384,gp:gp_380,s0:s0_354,s1:s1_356,s4:s4_362,sp:sp_353
	branch a0_371 == 0x0000000000000000 l0000000000017C94
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0000000000017C74:
	word64 a0_393 = Mem350[a0_371 + 32:word64]
	branch a0_393 == 0x0000000000000000 l0000000000017C84
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0000000000017C7C:
	Mem398[s1_356:word64] = __strdup(a0_393)
	sp_353 = sp_353 + 0xFFFFFFFFFFFFFFF8
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0000000000017C84:
	fa4_382 = Mem400[a0_371 + 52:real32]
	fa5_384 = (real32) 0x0000000000000000
	a5_379 = (word64) ((real32) fa4_382 == (real32) fa5_384)
	branch a5_379 == 0x0000000000000000 l0000000000017CC8
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0000000000017CC8:
	word64 a1_411 = 1
	fa5_384 = (real64) Mem400[a0_371 + 48:real32]
	__asprintf_chk(s4_362, a1_411, 0x0000000000012B80, 0x00000000)
	fa4_382 = (real64) a4_378
	a2_375 = 0x0000000000012B80 (alias)
	fa3_388 = (real64) a5_379
	a1_373 = a1_411 (alias)
	sp_353 = sp_353 + 0xFFFFFFFFFFFFFFF8
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0000000000017C94:
	word64 t1_436 = Mem424[gp_380 + -1976:word64]
	word64 s6_446
	word64 gp_463
	call t1_436 (retsize: 0;)
		uses: a0:s0_354,a1:a1_450,a2:a2_453,a3:a3_377,a4:a4_378,a5:a5_461,a6:a6_390,fa3:fa3_469,fa4:fa4_464,fa5:fa5_466,gp:gp_380,ra:Mem424[sp_423 + 72:word64],s0:Mem424[sp_423 + 64:word64],s1:Mem424[sp_423 + 56:word64],s2:Mem424[sp_423 + 48:word64],s3:Mem424[sp_423 + 40:word64],s4:Mem424[sp_423 + 32:word64],s5:Mem424[sp_423 + 24:word64],s6:Mem424[sp_423 + 16:word64],s7:Mem424[sp_423 + 8:word64],sp:sp_423 + 80,Stack +FFFFFFB8:s7,Stack +FFFFFFC0:s6,Stack +FFFFFFC8:s5,Stack +FFFFFFD0:s4,Stack +FFFFFFD8:s3,Stack +FFFFFFE0:s2,Stack +FFFFFFE8:s1,Stack +FFFFFFF0:s0,Stack +FFFFFFF8:ra,t1:t1_436
		defs: gp:gp_463,s6:s6_446
	s6Out = s6_446
	return gp_463
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0000000000017B84:
	s6Out = s6
	return gp
// DataOut:
// DataOut (flags):
// SymbolicIn:

fn0000000000017B40_exit:
// DataOut:
// DataOut (flags):
// SymbolicIn:



word64 fn0000000000017D10(word64 ra, word64 gp, word64 t1, word64 s0, word64 s1, word64 a0, word64 a1, word64 a2, word64 a3, word64 a4, word64 s2, word64 s3, word64 s4, word64 s5, word64 s6, word64 s7, word64 fa3, word64 fa4, word64 fa5, ptr64 & s0Out, ptr64 & s3Out, ptr64 & s6Out)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  a0:[0..63] a1:[0..63] a2:[0..63] a3:[0..63] a4:[0..63] fa3:[0..63] fa4:[0..63] fa5:[0..63] gp:[0..63] ra:[0..63] s0:[0..63] s1:[0..63] s2:[0..63] s3:[0..63] s4:[0..63] s5:[0..63] s6:[0..63] s7:[0..63] t1:[0..63]
// LiveOut: gp s0 s3 s6
// Trashed: a0 a1 a2 a3 a4 a5 a6 fa3 fa4 fa5 gp ra s0 s1 s2 s3 s4 s5 s6 s7 t1
// Preserved: sp
fn0000000000017D10_entry:
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0000000000017D10:
	word64 a1_34
	word64 a2_35
	word64 a3_36
	word64 a4_37
	word64 a6_39
	word64 a0_33 = fn0000000000017924(gp, out a1_34, out a2_35, out a3_36, out a4_37, out a6_39)
	branch a0_33 == 0x0000000000000000 l0000000000017D80
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0000000000017D80:
	word64 a5_40 = Mem21[gp + -1944:word64]
	word64 sp_41
	word64 s0_42
	word64 s2_43
	word64 s3_44
	word64 s4_45
	word64 s5_46
	word64 ra_47
	word64 s1_48
	word64 s6_49
	word64 s7_50
	word64 a2_56
	word64 a3_57
	word64 a4_58
	word64 gp_60
	word64 a6_61
	word64 fa4_63
	word64 fa5_65
	word64 t1_67
	word64 fa3_69
	call a5_40 (retsize: 0;)
		uses: a0:a0_33,a1:a1_34,a2:a2_35,a3:a3_36,a4:a4_37,a5:a5_40,a6:a6_39,fa3:fa3,fa4:fa4,fa5:fa5,gp:gp,ra:ra,s0:a0,s1:s1,s2:a3,s3:a2,s4:a1,s5:a4,s6:s6,s7:s7,sp:fp + -80,Stack +0008:s7,Stack +0010:s6,Stack +0018:s5,Stack +0020:s4,Stack +0028:s3,Stack +0030:s2,Stack +0038:s1,Stack +0040:s0,Stack +0048:ra,t1:t1
		defs: a2:a2_56,a3:a3_57,a4:a4_58,a6:a6_61,fa3:fa3_69,fa4:fa4_63,fa5:fa5_65,gp:gp_60,ra:ra_47,s0:s0_42,s1:s1_48,s2:s2_43,s3:s3_44,s4:s4_45,s5:s5_46,s6:s6_49,s7:s7_50,sp:sp_41,t1:t1_67
	word64 a5_70 = Mem21[gp_60 + -1952:word64]
	word64 a0_84
	word64 gp_255
	word64 sp_226
	word64 s0_228
	word64 s2_230
	word64 s3_232
	word64 s4_234
	word64 s5_236
	word64 ra_238
	word64 s6_241
	word64 s7_243
	word64 a2_249
	word64 a3_251
	word64 a4_253
	word64 a6_257
	word64 fa4_259
	word64 fa5_261
	word64 t1_263
	word64 fa3_265
	call a5_70 (retsize: 0;)
		uses: a0:12,a1:16,a2:a2_56,a3:a3_57,a4:a4_58,a5:a5_70,a6:a6_61,fa3:fa3_69,fa4:fa4_63,fa5:fa5_65,gp:gp_60,ra:ra_47,s0:s0_42,s1:s1_48,s2:s2_43,s3:s3_44,s4:s4_45,s5:s5_46,s6:s6_49,s7:s7_50,sp:sp_41,Stack +FFFFFFB8:s7,Stack +FFFFFFC0:s6,Stack +FFFFFFC8:s5,Stack +FFFFFFD0:s4,Stack +FFFFFFD8:s3,Stack +FFFFFFE0:s2,Stack +FFFFFFE8:s1,Stack +FFFFFFF0:s0,Stack +FFFFFFF8:ra,t1:t1_67
		defs: a0:a0_84,a2:a2_87,a3:a3_88,a4:a4_89,a6:a6_92,fa3:fa3_96,fa4:fa4_93,fa5:fa5_94,gp:gp_91,ra:ra_79,s0:s0_74,s2:s2_75,s3:s3_76,s4:s4_77,s5:s5_78,s6:s6_81,s7:s7_82,sp:sp_73,t1:t1_95
	word64 s1_239 = a0_84
	branch a0_84 == 0x0000000000000000 l0000000000017E18
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0000000000017DA0:
	word64 a4_99 = (int64) Mem21[s0_228 + 4:uint32]
	word64 a5_100 = (int64) Mem21[s0_228 + 12:uint32]
	word64 a1_101 = (int64) Mem21[s0_228:uint32]
	word64 a2_102 = (int64) Mem21[s0_228 + 8:uint32]
	word64 a3_103 = Mem21[gp_255 + -2000:word64]
	word64 a6_106 = 1
	Mem107[a0_84 + 76:word32] = (word32) a6_106
	word64 sp_110
	word64 s0_111
	word64 s2_112
	word64 s3_113
	word64 s4_114
	word64 s5_115
	word64 ra_116
	word64 s1_117
	word64 s6_118
	word64 a0_121
	word64 a2_125
	word64 a3_126
	word64 a4_127
	word64 a6_130
	word64 fa4_131
	word64 fa5_132
	word64 t1_133
	word64 fa3_134
	call a3_103 (retsize: 0;)
		uses: a0:a0_84,a1:a4_99 << 0x00000000 | a1_101,a2:a5_100 << 0x00000000 | a2_102,a3:a3_103,a4:a4_99 << 0x00000000,a5:a5_100 << 0x00000000,a6:a6_106,fa3:fa3_96,fa4:fa4_93,fa5:fa5_94,gp:gp_91,ra:ra_79,s0:s0_74,s1:a0_84,s2:s2_75,s3:s3_76,s4:s4_77,s5:s5_78,s6:s6_81,s7:s7_82,sp:sp_73,Stack +FFFFFFB8:s7,Stack +FFFFFFC0:s6,Stack +FFFFFFC8:s5,Stack +FFFFFFD0:s4,Stack +FFFFFFD8:s3,Stack +FFFFFFE0:s2,Stack +FFFFFFE8:s1,Stack +FFFFFFF0:s0,Stack +FFFFFFF8:ra,t1:t1_95
		defs: a0:a0_121,a2:a2_125,a3:a3_126,a4:a4_127,a6:a6_130,fa3:fa3_134,fa4:fa4_131,fa5:fa5_132,gp:gp_129,ra:ra_116,s0:s0_111,s1:s1_117,s2:s2_112,s3:s3_113,s4:s4_114,s5:s5_115,s6:s6_118,sp:sp_110,t1:t1_133
	branch a0_121 < 0x0000000000000000 l0000000000017D54
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0000000000017DD8:
	word64 a5_137 = Mem107[gp + -1960:word64]
	word64 s0_141
	word64 s2_142
	word64 s3_143
	word64 s4_144
	word64 s5_145
	word64 ra_146
	word64 s1_147
	word64 s6_148
	word64 s7_149
	word64 a0_151
	word64 a1_153
	word64 a2_154
	word64 a3_155
	word64 a4_156
	word64 gp_158
	word64 a6_159
	word64 fa4_160
	word64 fa5_161
	word64 t1_162
	word64 fa3_163
	word64 sp_140
	call a5_137 (retsize: 0;)
		uses: a0:s1_117,a1:a0_121,a2:a2_125,a3:a3_126,a4:a4_127,a5:a5_137,a6:a6_130,fa3:fa3_134,fa4:fa4_131,fa5:fa5_132,gp:gp_129,ra:ra_116,s0:s0_111,s1:s1_117,s2:s2_112,s3:s3_113,s4:s4_114,s5:s5_115,s6:s6_118,s7:a0_121,sp:sp_110,Stack +FFFFFFB8:s7,Stack +FFFFFFC0:s6,Stack +FFFFFFC8:s5,Stack +FFFFFFD0:s4,Stack +FFFFFFD8:s3,Stack +FFFFFFE0:s2,Stack +FFFFFFE8:s1,Stack +FFFFFFF0:s0,Stack +FFFFFFF8:ra,t1:t1_133
		defs: a0:a0_151,a1:a1_153,a2:a2_154,a3:a3_155,a4:a4_156,a6:a6_159,fa3:fa3_163,fa4:fa4_160,fa5:fa5_161,gp:gp_158,ra:ra_146,s0:s0_141,s1:s1_147,s2:s2_142,s3:s3_143,s4:s4_144,s5:s5_145,s6:s6_148,s7:s7_149,sp:sp_140,t1:t1_162
	branch a0_151 == 0x0000000000000000 l0000000000017DF4
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0000000000017DEC:
	Mem168[s4_144:word64] = __strdup(a0_151)
	sp_140 = sp_140 + 0xFFFFFFFFFFFFFFF8
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0000000000017DF4:
	word64 a5_171 = Mem170[gp_158 + -1968:word64]
	word64 s0_177
	word64 s2_179
	word64 s3_181
	word64 s4_183
	word64 s5_185
	word64 ra_187
	word64 s1_189
	word64 s6_191
	word64 s7_192
	word64 a0_194
	word64 a1_196
	word64 a2_198
	word64 a3_200
	word64 a4_202
	word64 gp_204
	word64 a6_206
	word64 fa4_208
	word64 fa5_210
	word64 t1_212
	word64 fa3_214
	word64 sp_175
	call a5_171 (retsize: 0;)
		uses: a0:s7_149,a1:a1_153,a2:a2_154,a3:a3_155,a4:a4_156,a5:a5_171,a6:a6_159,fa3:fa3_163,fa4:fa4_160,fa5:fa5_161,gp:gp_158,ra:ra_146,s0:s0_141,s1:s1_147,s2:s2_142,s3:s3_143,s4:s4_144,s5:s5_145,s6:s6_148,s7:s7_149,sp:sp_174,Stack +FFFFFFB8:s7,Stack +FFFFFFC0:s6,Stack +FFFFFFC8:s5,Stack +FFFFFFD0:s4,Stack +FFFFFFD8:s3,Stack +FFFFFFE0:s2,Stack +FFFFFFE8:s1,Stack +FFFFFFF0:s0,Stack +FFFFFFF8:ra,t1:t1_162
		defs: a0:a0_194,a1:a1_196,a2:a2_198,a3:a3_200,a4:a4_202,a6:a6_206,fa3:fa3_214,fa4:fa4_208,fa5:fa5_210,gp:gp_204,ra:ra_187,s0:s0_177,s1:s1_189,s2:s2_179,s3:s3_181,s4:s4_183,s5:s5_185,s6:s6_191,s7:s7_192,sp:sp_175,t1:t1_212
	branch a0_194 == 0x0000000000000000 l0000000000017E0C
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0000000000017E04:
	Mem219[s3_181:word64] = __strdup(a0_194)
	sp_175 = sp_175 + 0xFFFFFFFFFFFFFFF8
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0000000000017E0C:
	word64 a5_222 = Mem221[gp_204 + -1976:word64]
	call a5_222 (retsize: 0;)
		uses: a0:s1_189,a1:a1_196,a2:a2_198,a3:a3_200,a4:a4_202,a5:a5_222,a6:a6_206,fa3:fa3_214,fa4:fa4_208,fa5:fa5_210,gp:gp_204,ra:ra_187,s0:s0_177,s1:s1_189,s2:s2_179,s3:s3_181,s4:s4_183,s5:s5_185,s6:s6_191,s7:s7_192,sp:sp_225,Stack +FFFFFFB8:s7,Stack +FFFFFFC0:s6,Stack +FFFFFFC8:s5,Stack +FFFFFFD0:s4,Stack +FFFFFFD8:s3,Stack +FFFFFFE0:s2,Stack +FFFFFFE8:s1,Stack +FFFFFFF0:s0,Stack +FFFFFFF8:ra,t1:t1_212
		defs: a2:a2_249,a3:a3_251,a4:a4_253,a6:a6_257,fa3:fa3_265,fa4:fa4_259,fa5:fa5_261,gp:gp_255,ra:ra_238,s0:s0_228,s1:s1_239,s2:s2_230,s3:s3_232,s4:s4_234,s5:s5_236,s6:s6_241,s7:s7_243,sp:sp_226,t1:t1_263
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0000000000017E18:
	word64 a5_268 = Mem267[gp_255 + -1952:word64]
	word64 a2_296
	word64 a3_298
	word64 a4_300
	word64 a6_304
	word64 s0_274
	word64 sp_272
	word64 s2_276
	word64 s3_278
	word64 s4_280
	word64 s5_282
	word64 ra_284
	word64 s6_288
	word64 s7_290
	word64 a0_292
	word64 fa4_306
	word64 fa5_308
	word64 t1_310
	word64 fa3_312
	call a5_268 (retsize: 0;)
		uses: a0:30,a1:16,a2:a2_295,a3:a3_297,a4:a4_299,a5:a5_268,a6:a6_303,fa3:fa3_311,fa4:fa4_305,fa5:fa5_307,gp:gp_266,ra:ra_283,s0:s0_273,s1:s1_285,s2:s2_275,s3:s3_277,s4:s4_279,s5:s5_281,s6:s6_287,s7:s7_289,sp:sp_271,Stack +FFFFFFB8:s7,Stack +FFFFFFC0:s6,Stack +FFFFFFC8:s5,Stack +FFFFFFD0:s4,Stack +FFFFFFD8:s3,Stack +FFFFFFE0:s2,Stack +FFFFFFE8:s1,Stack +FFFFFFF0:s0,Stack +FFFFFFF8:ra,t1:t1_309
		defs: a0:a0_292,a2:a2_296,a3:a3_298,a4:a4_300,a6:a6_304,fa3:fa3_312,fa4:fa4_306,fa5:fa5_308,gp:gp_302,ra:ra_284,s0:s0_274,s2:s2_276,s3:s3_278,s4:s4_280,s5:s5_282,s6:s6_288,s7:s7_290,sp:sp_272,t1:t1_310
	word64 s1_314 = a0_292
	branch a0_292 == 0x0000000000000000 l0000000000017EE8
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0000000000017EE8:
	word64 a5_315 = Mem267[gp + -1952:word64]
	call a5_315 (retsize: 0;)
		uses: a0:31,a1:16,a2:a2_296,a3:a3_298,a4:a4_300,a5:a5_315,a6:a6_304,fa3:fa3_312,fa4:fa4_306,fa5:fa5_308,gp:gp_302,ra:ra_284,s0:s0_274,s1:a0_292,s2:s2_276,s3:s3_278,s4:s4_280,s5:s5_282,s6:s6_288,s7:s7_290,sp:sp_272,Stack +FFFFFFB8:s7,Stack +FFFFFFC0:s6,Stack +FFFFFFC8:s5,Stack +FFFFFFD0:s4,Stack +FFFFFFD8:s3,Stack +FFFFFFE0:s2,Stack +FFFFFFE8:s1,Stack +FFFFFFF0:s0,Stack +FFFFFFF8:ra,t1:t1_310
		defs: a0:a0_329,fa3:fa3_341,fa4:fa4_338,fa5:fa5_339,gp:gp_336,ra:ra_324,s0:s0_319,s2:s2_320,s3:s3_321,s4:s4_322,s5:s5_323,s6:s6_326,s7:s7_327,sp:sp_318,t1:t1_340
	s1_314 = a0_292
	branch a0_292 != 0x0000000000000000 l0000000000017E30
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0000000000017F00:
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0000000000017E30:
	word64 a4_346 = (int64) Mem267[s0_274 + 4:uint32]
	word64 a5_347 = (int64) Mem267[s0_274 + 12:uint32]
	word64 a1_348 = (int64) Mem267[s0_274:uint32]
	word64 a2_349 = (int64) Mem267[s0_274 + 8:uint32]
	word64 a3_351 = Mem267[gp + -2008:word64]
	word64 a6_354 = 1
	Mem356[s1_314 + 76:word32] = (word32) a6_354
	word64 s2_363
	word64 s5_369
	word64 s1_372
	word64 a0_378
	word64 a3_383
	word64 a4_384
	word64 gp_386
	word64 a6_387
	word64 sp_360
	word64 a1_380
	word64 a2_382
	word64 a5_385
	word64 fa4_389
	word64 fa5_391
	word64 fa3_395
	call a3_351 (retsize: 0;)
		uses: a0:a0_377,a1:a4_346 << 0x00000000 | a1_348,a2:a5_347 << 0x00000000 | a2_349,a3:a3_351,a4:a4_346 << 0x00000000,a5:a5_347 << 0x00000000,a6:a6_354,fa3:fa3_394,fa4:fa4_388,fa5:fa5_390,gp:gp_350,ra:ra_370,s0:s0_344,s1:s1_355,s2:s2_362,s3:s3_364,s4:s4_366,s5:s5_368,s6:s6_373,s7:s7_375,sp:sp_359,Stack +FFFFFFB8:s7,Stack +FFFFFFC0:s6,Stack +FFFFFFC8:s5,Stack +FFFFFFD0:s4,Stack +FFFFFFD8:s3,Stack +FFFFFFE0:s2,Stack +FFFFFFE8:s1,Stack +FFFFFFF0:s0,Stack +FFFFFFF8:ra,t1:t1_392
		defs: a0:a0_378,a1:a1_380,a2:a2_382,a3:a3_383,a4:a4_384,a5:a5_385,a6:a6_387,fa3:fa3_395,fa4:fa4_389,fa5:fa5_391,gp:gp_386,s1:s1_372,s2:s2_363,s5:s5_369,sp:sp_360
	branch a0_378 == 0x0000000000000000 l0000000000017E88
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0000000000017E68:
	word64 a0_398 = Mem356[a0_378 + 32:word64]
	branch a0_398 == 0x0000000000000000 l0000000000017E78
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0000000000017E70:
	Mem403[s2_363:word64] = __strdup(a0_398)
	sp_360 = sp_360 + 0xFFFFFFFFFFFFFFF8
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0000000000017E78:
	fa4_389 = Mem405[a0_378 + 52:real32]
	fa5_391 = (real32) 0x0000000000000000
	a5_385 = (word64) ((real32) fa4_389 == (real32) fa5_391)
	branch a5_385 == 0x0000000000000000 l0000000000017EBC
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0000000000017EBC:
	word64 a1_416 = 1
	fa5_391 = (real64) Mem405[a0_378 + 48:real32]
	__asprintf_chk(s5_369, a1_416, 0x0000000000012B80, 0x00000000)
	fa4_389 = (real64) a4_384
	a2_382 = 0x0000000000012B80 (alias)
	fa3_395 = (real64) a5_385
	a1_380 = a1_416 (alias)
	sp_360 = sp_360 + 0xFFFFFFFFFFFFFFF8
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0000000000017E88:
	word64 t1_441 = Mem429[gp_386 + -1976:word64]
	word64 s0_444
	word64 s3_446
	word64 s6_451
	word64 gp_468
	call t1_441 (retsize: 0;)
		uses: a0:s1_372,a1:a1_455,a2:a2_458,a3:a3_383,a4:a4_384,a5:a5_466,a6:a6_387,fa3:fa3_477,fa4:fa4_472,fa5:fa5_474,gp:gp_386,ra:Mem429[sp_428 + 72:word64],s0:Mem429[sp_428 + 64:word64],s1:Mem429[sp_428 + 56:word64],s2:Mem429[sp_428 + 48:word64],s3:Mem429[sp_428 + 40:word64],s4:Mem429[sp_428 + 32:word64],s5:Mem429[sp_428 + 24:word64],s6:Mem429[sp_428 + 16:word64],s7:Mem429[sp_428 + 8:word64],sp:sp_428 + 80,Stack +FFFFFFB8:s7,Stack +FFFFFFC0:s6,Stack +FFFFFFC8:s5,Stack +FFFFFFD0:s4,Stack +FFFFFFD8:s3,Stack +FFFFFFE0:s2,Stack +FFFFFFE8:s1,Stack +FFFFFFF0:s0,Stack +FFFFFFF8:ra,t1:t1_441
		defs: gp:gp_468,s0:s0_444,s3:s3_446,s6:s6_451
	s0Out = s0_444
	s3Out = s3_446
	s6Out = s6_451
	return gp_468
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0000000000017D54:
	s0Out = s0
	s3Out = s3
	s6Out = s6
	return gp
// DataOut:
// DataOut (flags):
// SymbolicIn:

fn0000000000017D10_exit:
// DataOut:
// DataOut (flags):
// SymbolicIn:



word64 fn0000000000017F04(word64 gp, word64 a0, word64 a1, word64 a2, word64 a3, ptr64 & a0Out)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  a0:[0..63] a1:[0..63] a2:[0..63] a3:[0..63] gp:[0..63]
// LiveOut: a0 t1
// Trashed: a0 a1 a2 a3 a4 a5 a6 t1 t3
// Preserved: a7 ra s0 s1 s2 s3 s4 s5 s6 sp
fn0000000000017F04_entry:
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0000000000017F04:
	word64 a0_177
	word64 a0_167
	word64 a5_7 = Mem5[gp + -1936:word64]
	word64 t1_36 = (int64) (word32) (fn00000000000182B4(a0, out a3_32, out a4_263) >>u 8)
	branch a1 == 32 l0000000000018048
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0000000000018048:
	a0_167 = (uint64) (uint32) __asprintf_chk(fp + -80, 1, 0x0000000000012B88, 0x00000000) (alias)
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0000000000017F60:
	word64 a1_54 = 24
	branch a1 == a1_54 l0000000000018070
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0000000000018070:
	a0_167 = (uint64) (uint32) __asprintf_chk(fp + -80, 1, 0x0000000000012BA8, 0x00000000) (alias)
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0000000000017F68:
	word64 a0_67 = 16
	branch a1 == a0_67 l00000000000180D8
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00000000000180D8:
	a0_167 = (uint64) (uint32) __asprintf_chk(fp + -80, 1, 0x0000000000012BC0, 0x00000000) (alias)
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0000000000017F70:
	word64 a5_79 = 8
	branch a1 == a5_79 l00000000000180F8
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00000000000180F8:
	a0_167 = (uint64) (uint32) __asprintf_chk(fp + -80, 1, 0x0000000000012BD8, 0x00000000) (alias)
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0000000000017F78:
	branch a1_54 <u a1 l0000000000017FBC
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0000000000017FBC:
	fn00000000000182B4(a2, out a3_264, out a4_265)
	fn00000000000182B4(a3, out a3_266, out a4_267)
	a0_167 = (uint64) (uint32) __asprintf_chk(fp + -80, 1, 0x0000000000012BF0, 0x00000000) (alias)
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0000000000017F7C:
	branch a0_67 <u a1 l0000000000018094
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0000000000018094:
	fn00000000000182B4(a2, out a3_268, out a4_269)
	fn00000000000182B4(a3, out a3_270, out a4_271)
	a0_167 = (uint64) (uint32) __asprintf_chk(fp + -80, 1, 0x0000000000012C10, 0x00000000) (alias)
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0000000000017F80:
	branch a5_79 <u a1 l0000000000018008
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0000000000018008:
	fn00000000000182B4(a2, out a3_272, out a4_273)
	fn00000000000182B4(a3, out a3_274, out a4_275)
	a0_167 = (uint64) (uint32) __asprintf_chk(fp + -80, 1, 0x0000000000012C30, 0x00000000) (alias)
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0000000000017FF8:
	branch a0_167 == -1 l0000000000017F84
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0000000000018000:
	a0_177 = qwLoc58
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0000000000017F84:
	a0_177 = 0
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0000000000017F88:
	branch a5_7 != Mem29[gp + -1936:word64] l0000000000018114
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0000000000018114:
	__stack_chk_fail()
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0000000000017F94:
	a0Out = a0_177
	return t1_36
// DataOut:
// DataOut (flags):
// SymbolicIn:

fn0000000000017F04_exit:
// DataOut:
// DataOut (flags):
// SymbolicIn:



word64 fn0000000000018118(word64 gp, word64 a0, word64 a1)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  a0:[0..63] a1:[0..63] gp:[0..63]
// LiveOut: a0
// Trashed: a0 a4 a5 t4
// Preserved: ra s0 sp t5
fn0000000000018118_entry:
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0000000000018118:
	word64 a0_120
	word64 a5_7 = Mem5[gp + -1936:word64]
	branch (a1 & 3) != 0x0000000000000000 l00000000000182A8
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00000000000182A8:
	a0_120 = 0 (alias)
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0000000000018134:
	word64 t5_16 = (int64) (word32) (a1 >>u 3)
	branch (a1 & 7) == 4 l0000000000018264
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0000000000018264:
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0000000000018144:
	branch t5_16 == 0x0000000000000000 l00000000000181FC
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00000000000181FC:
	word64 t4_21 = fp + -280 + (((a1 & 3) << 0x00000000) >>u 0x00000000)
	Mem24[t4_21 + 4:word16] = 0x7261
	Mem27[t4_21:word16] = 0x7069
	Mem30[t4_21 + 6:word16] = 0x6170
	Mem33[t4_21 + 2:word16] = 0x2E36
	Mem34[t4_21 + 8:word16] = 0x002E
	a0_120 = __strdup(fp + -280)
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0000000000018248:
	branch a5_7 != Mem39[gp + -1936:word64] l00000000000182B0
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00000000000182B0:
	__stack_chk_fail()
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0000000000018254:
	return a0_120
// DataOut:
// DataOut (flags):
// SymbolicIn:

fn0000000000018118_exit:
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0000000000018148:
	word64 a1_103 = (int64) ((word32) t5_16 + -1)
	word64 a4_105 = a1 & 3
	word64 t1_48 = 9
	word64 a7_49 = 46
	word64 t3_50 = -1
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0000000000018190:
	word64 a5_57 = (int64) Mem56[a0 + ((a1_103 << 0x00000000) >>u 0x00000000):byte]
	word64 a3_59 = (int64) ((word32) a4_105 + 1)
	word64 a6_61 = (a5_57 & 15) + 87
	branch t1_48 <u (a5_57 & 15) l00000000000181B4
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00000000000181B0:
	a6_61 = (a5_57 & 15) + 48
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00000000000181B4:
	Mem75[fp + -16 + ((a4_105 << 0x00000000) >>u 0x00000000) + 3832:byte] = (byte) a6_61
	Mem81[fp + -16 + ((a3_59 << 0x00000000) >>u 0x00000000) + 3832:byte] = (byte) a7_49
	word64 a2_82 = (int64) ((word32) a4_105 + 2)
	word64 a3_83 = (int64) ((word32) a4_105 + 3)
	word64 a6_84 = (a5_57 >>u 0x00000004) + 48
	branch t1_48 >=u a5_57 >>u 0x00000004 l0000000000018160
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00000000000181EC:
	a6_84 = (a5_57 >>u 0x00000004) + 87
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0000000000018160:
	Mem97[fp + -16 + ((a2_82 << 0x00000000) >>u 0x00000000) + 3832:byte] = (byte) a6_84
	Mem100[fp + -16 + ((a3_83 << 0x00000000) >>u 0x00000000) + 3832:byte] = (byte) a7_49
	a1_103 = (int64) ((word32) a1_103 + -1)
	a4_105 = (int64) ((word32) a4_105 + 4)
	branch a1_103 == t3_50 l00000000000181F4
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00000000000181F4:
// DataOut:
// DataOut (flags):
// SymbolicIn:



word64 fn00000000000182B4(word64 a0, ptr64 & a3Out, ptr64 & a4Out)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  a0:[0..31]
// LiveOut: a0 a3 a4
// Trashed: a0 a3 a4 a5
// Preserved: sp
fn00000000000182B4_entry:
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00000000000182B4:
	word64 a3_6 = (int64) (word32) (a0 >>u 24) | (int64) ((word32) (a0 << 0x0000000000000018))
	a3Out = a3_6
	word64 a4_11 = (int64) (word32) ((a0 & 0x0000000000FF0000) >> 0x00000008)
	a4Out = a4_11
	return a3_6 | a4_11 | (int64) ((word32) ((a0 & 65280) << 0x0000000000000008))
// DataOut:
// DataOut (flags):
// SymbolicIn:

fn00000000000182B4_exit:
// DataOut:
// DataOut (flags):
// SymbolicIn:



void fn00000000000182E8(word64 ra, word64 s0, word64 s1, word64 a0, word64 a1, word64 a2, word64 s2, word64 s3, word64 s4, word64 s5)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  a0:[0..63] a1:[0..63] a2:[0..63] ra:[0..63] s0:[0..63] s1:[0..63] s2:[0..63] s3:[0..63] s4:[0..63] s5:[0..63]
// LiveOut:
// Trashed: a0 a1 a2 a5
// Preserved: ra s0 s1 s2 s3 s4 s5 sp
fn00000000000182E8_entry:
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00000000000182E8:
	word64 s2_12 = 0x0000000000019E20 - 0x0000000000019E18
	word64 sp_3 = fp + -64
	word64 s0_31 = 0x0000000000019E18
	word64 s2_23 = s2_12 >> 0x00000003
	branch s2_12 >> 0x00000003 == 0x0000000000000000 l0000000000018354
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0000000000018324:
	word64 s5_25 = a0
	word64 s4_27 = a1
	word64 s3_29 = a2
	word64 s1_30 = 0
	ra_47 = ra
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0000000000018334:
	word64 ra_47
	word64 a5_33 = Mem22[s0_31:word64]
	word64 s0_44
	call a5_33 (retsize: 0;)
		uses: a0:s5_38,a1:s4_36,a2:s3_34,a5:a5_33,ra:ra_47,s0:s0_31,s1:s1_40 + 1,s2:s2_45,s3:s3_34,s4:s4_36,s5:s5_38,sp:sp_42,Stack +FFFFFFC8:s5,Stack +FFFFFFD0:s4,Stack +FFFFFFD8:s3,Stack +FFFFFFE0:s2,Stack +FFFFFFE8:s1,Stack +FFFFFFF0:s0,Stack +FFFFFFF8:ra
		defs: ra:ra_48,s0:s0_44,s1:s1_49,s2:s2_46,s3:s3_50,s4:s4_51,s5:s5_52,sp:sp_43
	s0_31 = s0_44 + 8
	branch s2_23 != s1_30 l0000000000018334
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0000000000018354:
	return
// DataOut:
// DataOut (flags):
// SymbolicIn:

fn00000000000182E8_exit:
// DataOut:
// DataOut (flags):
// SymbolicIn:



void fn0000000000018378()
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse: 
// LiveOut:
// Trashed:
// Preserved: sp
fn0000000000018378_entry:
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0000000000018378:
	return
// DataOut:
// DataOut (flags):
// SymbolicIn:

fn0000000000018378_exit:
// DataOut:
// DataOut (flags):
// SymbolicIn:



