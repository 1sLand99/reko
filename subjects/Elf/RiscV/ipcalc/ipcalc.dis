void herror()
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse: 
// LiveOut:
// Trashed:
// Preserved:
// Terminates process
herror_exit:
// DataOut:
// DataOut (flags):
// SymbolicIn:

herror_entry:
// DataOut:
// DataOut (flags):
// SymbolicIn:



void __strdup()
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse: 
// LiveOut:
// Trashed:
// Preserved:
// Terminates process
__strdup_exit:
// DataOut:
// DataOut (flags):
// SymbolicIn:

__strdup_entry:
// DataOut:
// DataOut (flags):
// SymbolicIn:



void clock_gettime()
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse: 
// LiveOut:
// Trashed:
// Preserved:
// Terminates process
clock_gettime_exit:
// DataOut:
// DataOut (flags):
// SymbolicIn:

clock_gettime_entry:
// DataOut:
// DataOut (flags):
// SymbolicIn:



void close()
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse: 
// LiveOut:
// Trashed:
// Preserved:
// Terminates process
close_exit:
// DataOut:
// DataOut (flags):
// SymbolicIn:

close_entry:
// DataOut:
// DataOut (flags):
// SymbolicIn:



void read()
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse: 
// LiveOut:
// Trashed:
// Preserved:
// Terminates process
read_exit:
// DataOut:
// DataOut (flags):
// SymbolicIn:

read_entry:
// DataOut:
// DataOut (flags):
// SymbolicIn:



void inet_ntop()
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse: 
// LiveOut:
// Trashed:
// Preserved:
// Terminates process
inet_ntop_exit:
// DataOut:
// DataOut (flags):
// SymbolicIn:

inet_ntop_entry:
// DataOut:
// DataOut (flags):
// SymbolicIn:



void snprintf()
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse: 
// LiveOut:
// Trashed:
// Preserved:
// Terminates process
snprintf_exit:
// DataOut:
// DataOut (flags):
// SymbolicIn:

snprintf_entry:
// DataOut:
// DataOut (flags):
// SymbolicIn:



void getaddrinfo()
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse: 
// LiveOut:
// Trashed:
// Preserved:
// Terminates process
getaddrinfo_exit:
// DataOut:
// DataOut (flags):
// SymbolicIn:

getaddrinfo_entry:
// DataOut:
// DataOut (flags):
// SymbolicIn:



void dlopen()
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse: 
// LiveOut:
// Trashed:
// Preserved:
// Terminates process
dlopen_exit:
// DataOut:
// DataOut (flags):
// SymbolicIn:

dlopen_entry:
// DataOut:
// DataOut (flags):
// SymbolicIn:



void open()
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse: 
// LiveOut:
// Trashed:
// Preserved:
// Terminates process
open_exit:
// DataOut:
// DataOut (flags):
// SymbolicIn:

open_entry:
// DataOut:
// DataOut (flags):
// SymbolicIn:



void __snprintf_chk()
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse: 
// LiveOut:
// Trashed:
// Preserved:
// Terminates process
__snprintf_chk_exit:
// DataOut:
// DataOut (flags):
// SymbolicIn:

__snprintf_chk_entry:
// DataOut:
// DataOut (flags):
// SymbolicIn:



void dlsym()
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse: 
// LiveOut:
// Trashed:
// Preserved:
// Terminates process
dlsym_exit:
// DataOut:
// DataOut (flags):
// SymbolicIn:

dlsym_entry:
// DataOut:
// DataOut (flags):
// SymbolicIn:



void exit()
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse: 
// LiveOut:
// Trashed:
// Preserved:
// Terminates process
exit_exit:
// DataOut:
// DataOut (flags):
// SymbolicIn:

exit_entry:
// DataOut:
// DataOut (flags):
// SymbolicIn:



void getopt_long()
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse: 
// LiveOut:
// Trashed:
// Preserved:
// Terminates process
getopt_long_exit:
// DataOut:
// DataOut (flags):
// SymbolicIn:

getopt_long_entry:
// DataOut:
// DataOut (flags):
// SymbolicIn:



void __vasprintf_chk()
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse: 
// LiveOut:
// Trashed:
// Preserved:
// Terminates process
__vasprintf_chk_exit:
// DataOut:
// DataOut (flags):
// SymbolicIn:

__vasprintf_chk_entry:
// DataOut:
// DataOut (flags):
// SymbolicIn:



void __asprintf_chk()
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse: 
// LiveOut:
// Trashed:
// Preserved:
// Terminates process
__asprintf_chk_exit:
// DataOut:
// DataOut (flags):
// SymbolicIn:

__asprintf_chk_entry:
// DataOut:
// DataOut (flags):
// SymbolicIn:



void getnameinfo()
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse: 
// LiveOut:
// Trashed:
// Preserved:
// Terminates process
getnameinfo_exit:
// DataOut:
// DataOut (flags):
// SymbolicIn:

getnameinfo_entry:
// DataOut:
// DataOut (flags):
// SymbolicIn:



void memset()
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse: 
// LiveOut:
// Trashed:
// Preserved:
// Terminates process
memset_exit:
// DataOut:
// DataOut (flags):
// SymbolicIn:

memset_entry:
// DataOut:
// DataOut (flags):
// SymbolicIn:



void inet_pton()
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse: 
// LiveOut:
// Trashed:
// Preserved:
// Terminates process
inet_pton_exit:
// DataOut:
// DataOut (flags):
// SymbolicIn:

inet_pton_entry:
// DataOut:
// DataOut (flags):
// SymbolicIn:



void strcmp()
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse: 
// LiveOut:
// Trashed:
// Preserved:
// Terminates process
strcmp_exit:
// DataOut:
// DataOut (flags):
// SymbolicIn:

strcmp_entry:
// DataOut:
// DataOut (flags):
// SymbolicIn:



void free()
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse: 
// LiveOut:
// Trashed:
// Preserved:
// Terminates process
free_exit:
// DataOut:
// DataOut (flags):
// SymbolicIn:

free_entry:
// DataOut:
// DataOut (flags):
// SymbolicIn:



void __printf_chk()
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse: 
// LiveOut:
// Trashed:
// Preserved:
// Terminates process
__printf_chk_exit:
// DataOut:
// DataOut (flags):
// SymbolicIn:

__printf_chk_entry:
// DataOut:
// DataOut (flags):
// SymbolicIn:



void __sprintf_chk()
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse: 
// LiveOut:
// Trashed:
// Preserved:
// Terminates process
__sprintf_chk_exit:
// DataOut:
// DataOut (flags):
// SymbolicIn:

__sprintf_chk_entry:
// DataOut:
// DataOut (flags):
// SymbolicIn:



void fwrite()
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse: 
// LiveOut:
// Trashed:
// Preserved:
// Terminates process
fwrite_exit:
// DataOut:
// DataOut (flags):
// SymbolicIn:

fwrite_entry:
// DataOut:
// DataOut (flags):
// SymbolicIn:



void memcmp()
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse: 
// LiveOut:
// Trashed:
// Preserved:
// Terminates process
memcmp_exit:
// DataOut:
// DataOut (flags):
// SymbolicIn:

memcmp_entry:
// DataOut:
// DataOut (flags):
// SymbolicIn:



void fputs()
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse: 
// LiveOut:
// Trashed:
// Preserved:
// Terminates process
fputs_exit:
// DataOut:
// DataOut (flags):
// SymbolicIn:

fputs_entry:
// DataOut:
// DataOut (flags):
// SymbolicIn:



void isatty()
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse: 
// LiveOut:
// Trashed:
// Preserved:
// Terminates process
isatty_exit:
// DataOut:
// DataOut (flags):
// SymbolicIn:

isatty_entry:
// DataOut:
// DataOut (flags):
// SymbolicIn:



void __fprintf_chk()
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse: 
// LiveOut:
// Trashed:
// Preserved:
// Terminates process
__fprintf_chk_exit:
// DataOut:
// DataOut (flags):
// SymbolicIn:

__fprintf_chk_entry:
// DataOut:
// DataOut (flags):
// SymbolicIn:



void __libc_start_main()
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse: 
// LiveOut:
// Trashed:
// Preserved:
// Terminates process
__libc_start_main_exit:
// DataOut:
// DataOut (flags):
// SymbolicIn:

__libc_start_main_entry:
// DataOut:
// DataOut (flags):
// SymbolicIn:



void putchar()
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse: 
// LiveOut:
// Trashed:
// Preserved:
// Terminates process
putchar_exit:
// DataOut:
// DataOut (flags):
// SymbolicIn:

putchar_entry:
// DataOut:
// DataOut (flags):
// SymbolicIn:



void fputc()
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse: 
// LiveOut:
// Trashed:
// Preserved:
// Terminates process
fputc_exit:
// DataOut:
// DataOut (flags):
// SymbolicIn:

fputc_entry:
// DataOut:
// DataOut (flags):
// SymbolicIn:



void __stack_chk_fail()
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse: 
// LiveOut:
// Trashed:
// Preserved:
// Terminates process
__stack_chk_fail_exit:
// DataOut:
// DataOut (flags):
// SymbolicIn:

__stack_chk_fail_entry:
// DataOut:
// DataOut (flags):
// SymbolicIn:



void __errno_location()
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse: 
// LiveOut:
// Trashed:
// Preserved:
// Terminates process
__errno_location_exit:
// DataOut:
// DataOut (flags):
// SymbolicIn:

__errno_location_entry:
// DataOut:
// DataOut (flags):
// SymbolicIn:



void strtol()
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse: 
// LiveOut:
// Trashed:
// Preserved:
// Terminates process
strtol_exit:
// DataOut:
// DataOut (flags):
// SymbolicIn:

strtol_entry:
// DataOut:
// DataOut (flags):
// SymbolicIn:



void strchr()
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse: 
// LiveOut:
// Trashed:
// Preserved:
// Terminates process
strchr_exit:
// DataOut:
// DataOut (flags):
// SymbolicIn:

strchr_entry:
// DataOut:
// DataOut (flags):
// SymbolicIn:



void memcpy()
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse: 
// LiveOut:
// Trashed:
// Preserved:
// Terminates process
memcpy_exit:
// DataOut:
// DataOut (flags):
// SymbolicIn:

memcpy_entry:
// DataOut:
// DataOut (flags):
// SymbolicIn:



void abort()
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse: 
// LiveOut:
// Trashed:
// Preserved:
// Terminates process
abort_exit:
// DataOut:
// DataOut (flags):
// SymbolicIn:

abort_entry:
// DataOut:
// DataOut (flags):
// SymbolicIn:



void freeaddrinfo()
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse: 
// LiveOut:
// Trashed:
// Preserved:
// Terminates process
freeaddrinfo_exit:
// DataOut:
// DataOut (flags):
// SymbolicIn:

freeaddrinfo_entry:
// DataOut:
// DataOut (flags):
// SymbolicIn:



void fn0000000000015180(word64 ra, word64 gp, word64 t1, word64 s0, word64 s1, word64 a0, word64 a1, word64 a6, word64 a7, word64 s2, word64 s3, word64 s4, word64 s5, word64 s6, word64 s7, word64 s8, word64 s9, word64 s10, word64 s11, word64 t3, word64 fa3, word64 fa4, word64 fa5)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  a0:[0..63] a1:[0..63] a6:[0..63] a7:[0..63] fa3:[0..63] fa4:[0..63] fa5:[0..63] gp:[0..63] ra:[0..63] s0:[0..63] s1:[0..63] s10:[0..63] s11:[0..63] s2:[0..63] s3:[0..63] s4:[0..63] s5:[0..63] s6:[0..63] s7:[0..63] s8:[0..63] s9:[0..63] t1:[0..63] t3:[0..63]
// LiveOut:
// Trashed: a0 a1 a2 a3 a4 a5 a6 a7 fa3 fa4 fa5 gp ra s0 s1 s10 s11 s2 s3 s4 s5 s6 s7 s8 s9 t1 t3
// Preserved: sp
fn0000000000015180_entry:
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0000000000015180:
	word64 sp_262 = fp + -448 + 0xFFFFFFFFFFFFFFE8
	word64 a5_7 = Mem5[gp + -1936:word64]
	word64 s3_1006 = a0
	word64 s0_128 = 0
	word64 s6_43 = 0
	word64 s9_44 = 0
	word64 s10_45 = 0
	word64 s7_49 = 1
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0000000000015200:
	word64 a0_60 = (uint64) (uint32) getopt_long(a0, a1, 0x00000000000119A8, 0x00000000000108E0, 0)
	sp_262 = sp_262 + 0xFFFFFFFFFFFFFFF8
	branch a0_60 == -1 l0000000000015348
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0000000000015348:
	word64 s1_141
	word64 s4_338
	word64 a4_67 = (int64) Mem50[gp + -1904:int32]
	branch a4_67 >= a0 l0000000000015428
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0000000000015428:
	s4_338 = 0
	s1_141 = 0
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0000000000015350:
	word64 a1_70 = (int64) ((word32) a4_67 + 1)
	Mem73[gp + 2192:word32] = (word32) a1_70
	word64 s2_72 = a1 + (a4_67 << 0x00000003)
	s1_141 = Mem73[s2_72:word64]
	s4_338 = 0
	branch a1_70 >= a0 l0000000000015378
// DataOut:
// DataOut (flags):
// SymbolicIn:

l000000000001536C:
	s4_338 = Mem73[s2_72 + 8:word64]
	Mem78[gp + 2192:word32] = (word32) (int64) ((word32) a4_67 + 2)
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0000000000015378:
	branch s6_43 != 0x0000000000000000 l0000000000015588
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0000000000015588:
	__printf_chk(1, 0x00000000000119C8, 0x00000000)
// DataOut:
// DataOut (flags):
// SymbolicIn:

l000000000001537C:
	branch (int64) Mem90[sp_262 + 28:int32] == 0x0000000000000000 l00000000000153B4
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0000000000015384:
	branch (int64) Mem90[sp_262:int32] == 0x0000000000000000 l00000000000153B4
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00000000000153B4:
	word64 a6_1024
	word64 a4_549
	word64 a0_546
	word64 a5_348
	word64 a0_178
	word64 a0_346
	word64 a5_109
	word64 s2_123
	Mem96[sp_262 + 8:word64] = a0_60
	branch s9_44 == 0x0000000000000000 l0000000000015924
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0000000000015924:
	word64 a1_103
	word64 a2_104
	word64 a3_105
	word64 a4_2973
	word64 a0_102 = fn0000000000017924(gp, out a1_103, out a2_104, out a3_105, out a4_2973, out a6_1024)
	a5_109 = Mem96[sp_262 + 8:word64]
	branch a0_102 != 0x0000000000000000 l0000000000015458
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0000000000015930:
	branch (s0_128 & 65544) != 65544 l0000000000015458
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0000000000015940:
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00000000000153BC:
	word64 a1_117
	word64 a2_118
	word64 a3_119
	word64 a4_2974
	word64 a0_116 = fn0000000000017924(gp, out a1_117, out a2_118, out a3_119, out a4_2974, out a6_1024)
	s2_123 = s0_128 | 2
	a5_109 = Mem96[sp_262 + 8:word64]
	branch a0_116 == 0x0000000000000000 l0000000000015434
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0000000000015434:
	branch (s0_128 & 65544) != 65544 l00000000000153CC
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0000000000015444:
	s0_128 = s0_128 | 2
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0000000000015448:
	s2_123 = s0_128 | 0x0000000000004000
	branch s9_44 != 0x0000000000000000 l00000000000153CC
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0000000000015454:
	s0_128 = s2_123
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0000000000015458:
	branch s10_45 == 0x0000000000000000 l0000000000015CE4
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0000000000015CE4:
	branch s1_141 != 0x0000000000000000 l0000000000015510
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0000000000015CE8:
	branch (int64) Mem96[gp + -2028:int32] != 0x0000000000000000 l00000000000153D8
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0000000000015CF0:
	fwrite(0x0000000000011A30, 1, 28, Mem96[gp + -1920:word64])
	fn0000000000015FCC(gp, 1)
// DataOut:
// DataOut (flags):
// SymbolicIn:

l000000000001545C:
	word64 a0_169 = fn00000000000166F4(gp, sp_262 + 28, s10_45, 1)
	branch a0_169 < 0x0000000000000000 l0000000000015BC8
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0000000000015BC8:
	branch (int64) Mem96[gp + -2028:int32] != 0x0000000000000000 l00000000000153D8
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0000000000015BD0:
	a0_178 = Mem96[gp + -1920:word64]
	branch (int64) Mem96[sp_262 + 28:int32] != 0x0000000000000000 l0000000000015E7C
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0000000000015E7C:
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0000000000015BDC:
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0000000000015474:
	Mem187[sp_262 + 8:word64] = a0_169
	word64 s1_188 = (int64) Mem187[sp_262 + 28:int32]
	Mem189[sp_262 + 32:word64] = 0x0000000000000000
	word64 a0_190 = (uint64) (uint32) clock_gettime(2, sp_262 + 40)
	word64 a5_192 = Mem189[sp_262:word64]
	branch a0_190 < 0x0000000000000000 l0000000000015CB0
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0000000000015494:
	word64 a5_233
	branch s1_188 == 0x0000000000000000 l0000000000015C48
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0000000000015C48:
	Mem195[sp_262:word64] = a5_192
	word64 s1_196 = Mem195[sp_262 + 0x0000000000000028:word64]
	word64 a0_197 = fn00000000000164D0(sp_262 + 0x00000000000000F8, 4)
	word64 a5_200 = Mem195[sp_262:word64]
	branch a0_197 < 0x0000000000000000 l0000000000015CB0
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0000000000015C64:
	branch a5_200 <= 15 l0000000000015C7C
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0000000000015C6C:
	word64 a3_204 = 1
	branch a3_204 >=u (s1_196 | 4) l0000000000015DB8
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0000000000015DB8:
	branch (s1_196 | 4) == a3_204 l0000000000015E00
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0000000000015E00:
	Mem206[sp_262 + 0x00000000000000F8:byte] = 0xC0
	Mem208[sp_262 + 0x00000000000000F9:byte] = 0xA8
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0000000000015DBC:
	Mem210[sp_262 + 0x00000000000000F8:byte] = 0xAC
	Mem215[sp_262 + 0x00000000000000F9:byte] = (byte) (Mem210[sp_262 + 0x0000000000000028:word64] >> 0x00000004 & 15 | 16)
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0000000000015C7C:
	Mem218[sp_262 + 0x00000000000000F8:byte] = 0x0A
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0000000000015C84:
	word64 a4_221 = (int64) Mem220[sp_262 + 0x00000000000000F8:int32]
	Mem229[sp_262:word64] = a5_200
	Mem230[sp_262 + 0x0000000000000010:word32] = (word32) a4_221
	word64 a0_231 = inet_ntop(2, sp_262 + 0x0000000000000010, sp_262 + 0x0000000000000100, 64)
	a5_233 = Mem230[sp_262 + 0xFFFFFFFFFFFFFFF8:word64]
	branch a0_231 != 0x0000000000000000 l00000000000154DC
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0000000000015498:
	Mem239[sp_262 + 0x0000000000000030:byte] = (byte) (Mem189[sp_262 + 0x0000000000000028:word64] & 1 | -4)
	branch fn00000000000164D0(sp_262 + 0x0000000000000031, 15) < 0x0000000000000000 l0000000000015CB0
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00000000000154BC:
	word64 a0_249 = inet_ntop(10, sp_262 + 0x0000000000000030, sp_262 + 0x0000000000000100, 64)
	a5_233 = Mem239[sp_262 + 0xFFFFFFFFFFFFFFF8:word64]
	branch a0_249 == 0x0000000000000000 l0000000000015CB0
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00000000000154DC:
	word64 sp_257 = sp_262 + 0x0000000000000000
	Mem260[sp_257 + 8:word64] = a5_233
	word64 a0_261 = (uint64) (uint32) __asprintf_chk(sp_257 + 32, 1, 0x0000000000011A90, 0x00000000)
	sp_262 = sp_257 + 0xFFFFFFFFFFFFFFF8
	a5_109 = Mem260[sp_257:word64]
	branch a0_261 == -1 l0000000000015CB0
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0000000000015508:
	s1_141 = Mem260[sp_257 + 0x0000000000000018:word64]
	branch s1_141 == 0x0000000000000000 l0000000000015CB0
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0000000000015CB0:
	branch (int64) Mem270[gp + -2028:int32] != 0x0000000000000000 l00000000000153D8
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0000000000015CB8:
	__fprintf_chk(Mem270[gp + -1920:word64], 1, 0x0000000000011A98, 0x00000000)
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00000000000153CC:
	branch s10_45 == 0x0000000000000000 l00000000000155A8
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00000000000155A8:
	branch (int64) Mem96[sp_262 + 28:int32] != 0x0000000000000000 l0000000000015944
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0000000000015944:
	Mem291[sp_262 + 8:word64] = a5_109
	word64 a0_293 = fn00000000000169D8(gp, s9_44)
	s1_141 = a0_293
	s0_128 = s2_123
	a5_109 = Mem291[sp_262 + 8:word64]
	branch a0_293 != 0x0000000000000000 l0000000000015510
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0000000000015510:
	branch (int64) Mem304[sp_262:int32] != 0x0000000000000000 l00000000000155D8
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00000000000155B0:
	branch (int64) Mem96[sp_262:int32] == 0x0000000000000000 l000000000001598C
// DataOut:
// DataOut (flags):
// SymbolicIn:

l000000000001598C:
	Mem309[sp_262:word64] = a5_109
	word64 a0_310 = fn00000000000169D8(gp, s9_44)
	s1_141 = a0_310
	branch a0_310 == 0x0000000000000000 l0000000000015964
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00000000000159A4:
	s0_128 = s2_123
	a5_109 = Mem309[sp_262:word64]
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0000000000015518:
	Mem327[sp_262:word64] = a5_109
	word64 a0_328 = strchr(s1_141, 58)
	sp_262 = sp_262 + 0xFFFFFFFFFFFFFFF8
	a5_109 = Mem327[sp_262:word64]
	branch a0_328 == 0x0000000000000000 l00000000000155D8
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0000000000015530:
	Mem332[sp_262 + 28:word32] = 0x00000001
	branch s4_338 == 0x0000000000000000 l0000000000015BEC
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0000000000015BEC:
	Mem345[sp_262:word64] = a5_109
	a0_346 = strchr(s1_141, 47)
	sp_262 = sp_262 + 0xFFFFFFFFFFFFFFF8
	a5_348 = Mem345[sp_262 + 0xFFFFFFFFFFFFFFF8:word64]
	branch a0_346 != 0x0000000000000000 l0000000000015BB8
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0000000000015C04:
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00000000000155B8:
	Mem351[sp_262:word64] = a5_109
	word64 a0_352 = fn00000000000169D8(gp, s9_44)
	s1_141 = a0_352
	branch a0_352 == 0x0000000000000000 l0000000000015964
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0000000000015964:
	branch (int64) Mem360[gp + -2028:int32] != 0x0000000000000000 l00000000000153D8
// DataOut:
// DataOut (flags):
// SymbolicIn:

l000000000001596C:
	__fprintf_chk(Mem360[gp + -1920:word64], 1, 0x0000000000011A50, 0x00000000)
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00000000000155D0:
	a5_109 = Mem351[sp_262:word64]
	s0_128 = s2_123
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00000000000155D8:
	branch s4_338 == 0x0000000000000000 l0000000000015BA0
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0000000000015BA0:
	Mem380[sp_262:word64] = a5_109
	a0_346 = strchr(s1_141, 47)
	sp_262 = sp_262 + 0xFFFFFFFFFFFFFFF8
	a5_348 = Mem380[sp_262:word64]
	branch a0_346 == 0x0000000000000000 l00000000000155FC
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0000000000015BB8:
	Mem385[a0_346:byte] = 0x00
	s4_338 = a0_346 + 1
	branch s4_338 == 0x0000000000000000 l00000000000155FC
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0000000000015BC4:
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00000000000155DC:
	branch (int64) Mem387[sp_262 + 28:int32] != 0x0000000000000000 l000000000001553C
// DataOut:
// DataOut (flags):
// SymbolicIn:

l000000000001553C:
	branch (int64) Mem393[gp + -2028:int32] != 0x0000000000000000 l00000000000153D8
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0000000000015544:
	__fprintf_chk(Mem393[gp + -1920:word64], 1, 0x0000000000011AD0, 0x00000000)
	fn0000000000015FCC(gp, 1)
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00000000000155E4:
	word64 a0_421 = fn00000000000166F4(gp, sp_262 + 28, s4_338, 0)
	a5_348 = a0_421
	branch a0_421 < 0x0000000000000000 l0000000000015B6C
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0000000000015B6C:
	branch (int64) Mem428[gp + -2028:int32] != 0x0000000000000000 l00000000000153D8
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0000000000015B74:
	a0_178 = Mem428[gp + -1920:word64]
	branch (int64) Mem428[sp_262 + 28:int32] != 0x0000000000000000 l0000000000015CD8
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0000000000015CD8:
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0000000000015B80:
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0000000000015B88:
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0000000000015B8C:
	__fprintf_chk(a0_178, 1, 0x0000000000011A70, 0x00000000)
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00000000000155FC:
	branch (int64) Mem448[sp_262 + 28:int32] == 0x0000000000000000 l00000000000159B0
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00000000000159B0:
	a0_546 = fn0000000000016D74(ra, gp, s1_141, a5_348, sp_262 + 56, s0_128, s4_338, s7_49, fa3, fa4, fa5, out a4_549)
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0000000000015604:
	a0_546 = fn00000000000175BC(gp, t1, s1_141, a5_348, sp_262 + 56, s0_128, fa3, fa4, fa5, out a4_549)
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0000000000015618:
	branch a0_546 < 0x0000000000000000 l00000000000153D8
// DataOut:
// DataOut (flags):
// SymbolicIn:

l000000000001561C:
	branch (s0_128 & 4294623231) != 0x0000000000000000 l0000000000015630
// DataOut:
// DataOut (flags):
// SymbolicIn:

l000000000001562C:
	s0_128 = s0_128 | 8
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0000000000015630:
	word64 sp_1001 = sp_262 + 0xFFFFFFFFFFFFFFF8
	branch (uint64) (uint32) isatty(1) == 0x0000000000000000 l0000000000015644
// DataOut:
// DataOut (flags):
// SymbolicIn:

l000000000001563C:
	a4_549 = 1
	Mem598[gp + 2064:word32] = (word32) a4_549
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0000000000015644:
	branch (s0_128 & 8) == 0x0000000000000000 l00000000000159C8
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00000000000159C8:
	branch (s0_128 & 128) != 0x0000000000000000 l0000000000015D18
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0000000000015D18:
	__printf_chk(1, 0x0000000000011C28, 0x00000000)
	sp_1001 = sp_1001 + 0xFFFFFFFFFFFFFFF8
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00000000000159D0:
	branch (s0_128 & 512) != 0x0000000000000000 l0000000000015D48
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0000000000015D48:
	__printf_chk(1, 0x0000000000011C38, 0x00000000)
	sp_1001 = sp_1001 + 0xFFFFFFFFFFFFFFF8
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00000000000159D8:
	branch (s0_128 & 64) == 0x0000000000000000 l00000000000159FC
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00000000000159E0:
	branch (int64) Mem604[sp_1001 + 28:int32] != 0x0000000000000000 l00000000000159FC
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00000000000159E8:
	__printf_chk(1, 0x0000000000011C48, 0x00000000)
	sp_1001 = sp_1001 + 0xFFFFFFFFFFFFFFF8
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00000000000159FC:
	branch (s0_128 & 256) != 0x0000000000000000 l0000000000015D30
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0000000000015D30:
	__printf_chk(1, 0x0000000000011C58, 0x00000000)
	sp_1001 = sp_1001 + 0xFFFFFFFFFFFFFFF8
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0000000000015A04:
	branch s0_128 << 0x0000000E < 0x0000000000000000 l0000000000015D78
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0000000000015D78:
	__printf_chk(1, 0x0000000000011C68, 0x00000000)
	sp_1001 = sp_1001 + 0xFFFFFFFFFFFFFFF8
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0000000000015A0C:
	branch (s0_128 & 1024) == 0x0000000000000000 l0000000000015A2C
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0000000000015A14:
	branch Mem604[sp_1001 + 224:word64] == 0x0000000000000000 l0000000000015A2C
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0000000000015A1C:
	__printf_chk(1, 0x0000000000011C78, 0x00000000)
	sp_1001 = sp_1001 + 0xFFFFFFFFFFFFFFF8
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0000000000015A2C:
	branch s0_128 << 0x00000014 >= 0x0000000000000000 l0000000000015A4C
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0000000000015A34:
	branch Mem604[sp_1001 + 232:word64] == 0x0000000000000000 l0000000000015A4C
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0000000000015A3C:
	__printf_chk(1, 0x0000000000011C88, 0x00000000)
	sp_1001 = sp_1001 + 0xFFFFFFFFFFFFFFF8
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0000000000015A4C:
	branch s0_128 << 0x00000012 >= 0x0000000000000000 l0000000000015A80
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0000000000015A54:
	word64 s2_679 = Mem604[sp_1001 + 240:word64]
	branch s2_679 == 0x0000000000000000 l0000000000015A80
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0000000000015A5C:
	word64 sp_683 = sp_1001 + 0xFFFFFFFFFFFFFFF8
	branch strchr(s2_679, 32) == 0x0000000000000000 l0000000000015DA4
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0000000000015DA4:
	__printf_chk(1, 0x0000000000011CA8, 0x00000000)
	sp_1001 = sp_683 + 0xFFFFFFFFFFFFFFF8
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0000000000015A70:
	__printf_chk(1, 0x0000000000011C98, 0x00000000)
	sp_1001 = sp_683 + 0xFFFFFFFFFFFFFFF8
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0000000000015A80:
	branch s0_128 << 0x00000013 >= 0x0000000000000000 l0000000000015AAC
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0000000000015A88:
	word64 sp_701 = sp_1001 + 0xFFFFFFFFFFFFFFF8
	branch strchr(sp_1001 + 152, 32) == 0x0000000000000000 l0000000000015D90
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0000000000015D90:
	__printf_chk(1, 0x0000000000011CC8, 0x00000000)
	sp_1001 = sp_701 + 0xFFFFFFFFFFFFFFF8
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0000000000015A9C:
	__printf_chk(1, 0x0000000000011CB8, 0x00000000)
	sp_1001 = sp_701 + 0xFFFFFFFFFFFFFFF8
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0000000000015AAC:
	branch (s0_128 & 1) == 0x0000000000000000 l0000000000015ACC
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0000000000015AB4:
	branch Mem604[sp_1001 + 112:word64] == 0x0000000000000000 l0000000000015ACC
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0000000000015ABC:
	__printf_chk(1, 0x0000000000011CD8, 0x00000000)
	sp_1001 = sp_1001 + 0xFFFFFFFFFFFFFFF8
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0000000000015ACC:
	branch (s0_128 & 2) != 0x0000000000000000 l0000000000015D60
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0000000000015D60:
	__printf_chk(1, 0x0000000000011CE8, 0x00000000)
	sp_1001 = sp_1001 + 0xFFFFFFFFFFFFFFF8
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0000000000015AD4:
	branch (s0_128 & 0x000000000000C000) != 0x000000000000C000 l00000000000153DC
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0000000000015AE0:
	branch Mem604[sp_1001 + 128:word64] == 0x0000000000000000 l0000000000015AF8
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0000000000015AE8:
	__printf_chk(1, 0x0000000000011CF8, 0x00000000)
	sp_1001 = sp_1001 + 0xFFFFFFFFFFFFFFF8
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0000000000015AF8:
	word64 s0_760 = Mem604[sp_1001 + 120:word64]
	branch s0_760 == 0x0000000000000000 l0000000000015B24
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0000000000015B00:
	word64 sp_764 = sp_1001 + 0xFFFFFFFFFFFFFFF8
	branch strchr(s0_760, 32) == 0x0000000000000000 l0000000000015E90
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0000000000015E90:
	__printf_chk(1, 0x0000000000011D18, 0x00000000)
	sp_1001 = sp_764 + 0xFFFFFFFFFFFFFFF8
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0000000000015B14:
	__printf_chk(1, 0x0000000000011D08, 0x00000000)
	sp_1001 = sp_764 + 0xFFFFFFFFFFFFFFF8
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0000000000015B24:
	word64 s0_778 = Mem604[sp_1001 + 136:word64]
	branch s0_778 == 0x0000000000000000 l0000000000015B50
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0000000000015B2C:
	word64 sp_782 = sp_1001 + 0xFFFFFFFFFFFFFFF8
	branch strchr(s0_778, 32) == 0x0000000000000000 l0000000000015EA4
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0000000000015EA4:
	__printf_chk(1, 0x0000000000011D38, 0x00000000)
	sp_1001 = sp_782 + 0xFFFFFFFFFFFFFFF8
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0000000000015B40:
	__printf_chk(1, 0x0000000000011D28, 0x00000000)
	sp_1001 = sp_782 + 0xFFFFFFFFFFFFFFF8
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0000000000015B50:
	branch Mem604[sp_1001 + 144:word64] == 0x0000000000000000 l00000000000153DC
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0000000000015B58:
	__printf_chk(1, 0x0000000000011D48, 0x00000000)
// DataOut:
// DataOut (flags):
// SymbolicIn:

l000000000001564C:
	word64 a4_1079
	word64 s0_1106
	word64 a5_1104
	word64 a3_1109
	word64 a5_1022
	word64 s4_896
	word64 a3_808
	word64 s2_1008 = (int64) Mem604[sp_1001 + 216:int32]
	branch (int64) Mem604[sp_1001 + 28:int32] != 0x0000000000000000 l000000000001590C
// DataOut:
// DataOut (flags):
// SymbolicIn:

l000000000001590C:
	a5_1022 = 128
	branch s2_1008 != a5_1022 l0000000000015660
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0000000000015658:
	a5_1022 = 32
	branch s2_1008 == a5_1022 l0000000000015914
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0000000000015914:
	a3_808 = Mem604[sp_1001 + 64:word64]
	branch a3_808 == 0x0000000000000000 l0000000000015DDC
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0000000000015DDC:
	word64 a5_2979
	gp = fn000000000001654C(ra, gp, s0_128, 0x0000000000012000, 0x0000000000011B08, 0x0000000000011B10, 0x0000000000011C60, Mem604[sp_1001 + 56:word64], a4_549, a5_1022, a6_1024, a7, 0x0000000000012000, a0, out a4_1079, out a5_2979, out a6_1024, out a7)
// DataOut:
// DataOut (flags):
// SymbolicIn:

l000000000001591C:
	s4_896 = 1
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0000000000015660:
	branch s10_45 == 0x0000000000000000 l0000000000015860
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0000000000015860:
	s3_1006 = Mem604[sp_1001 + 56:word64]
	sp_1001 = sp_1001 + 0xFFFFFFFFFFFFFFF8
	branch (uint64) (uint32) strcmp(Mem604[sp_1001 + 88:word64], s3_1006) == 0x0000000000000000 l0000000000015664
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0000000000015874:
	a3_808 = Mem604[sp_1001 + 0x0000000000000038:word64]
	s4_896 = 0
	branch a3_808 == 0x0000000000000000 l0000000000015E14
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0000000000015E14:
	word64 a4_2978
	gp = fn000000000001654C(ra, gp, s0_128, 0x0000000000012000, 0x0000000000011B08, 0x0000000000011B10, 0x0000000000011C60, s3_1006, a4_549, a5_1022, a6_1024, a7, 0x0000000000012000, s3_1006, out a4_2978, out a5_1022, out a6_1024, out a7)
	s2_1008 = (int64) Mem604[sp_1001 + 0x00000000000000D0:int32]
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0000000000015880:
	word64 a4_965
	word64 a5_966
	word64 a6_967
	word64 a7_968
	gp = fn000000000001654C(ra, fn000000000001654C(ra, gp, s0_128, 0x0000000000012000, 0x0000000000011B08, 0x0000000000011AF8, 0x0000000000011C60, a3_808, a4_549, a5_1022, a6_1024, a7, 0x0000000000012000, s3_1006, out a4_965, out a5_966, out a6_967, out a7_968), s0_128, 0x0000000000012000, 0x0000000000011B08, 0x0000000000011B10, 0x0000000000011C60, Mem604[sp_1001 + 56:word64], a4_965, a5_966, a6_967, a7_968, 0x0000000000012000, s3_1006, out a4_1079, out a5_1022, out a6_1024, out a7)
	branch s4_896 == 0x0000000000000000 l0000000000015E74
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0000000000015E74:
	s2_1008 = (int64) Mem604[sp_1001 + 216:int32]
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00000000000158B8:
	a5_1104 = 65544
	s0_1106 = s0_128 & 65544
	branch s0_1106 == 65544 l0000000000015E64
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0000000000015E64:
	a3_1109 = Mem604[sp_1001 + 80:word64]
	s0_1106 = 1
	branch a3_1109 != 0x0000000000000000 l0000000000015C2C
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0000000000015E70:
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0000000000015664:
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0000000000015668:
	word64 a3_1005 = Mem604[sp_1001 + 72:word64]
	s3_1006 = 0x0000000000012000
	branch a3_1005 == 0x0000000000000000 l0000000000015690
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0000000000015674:
	word64 a4_2976
	gp = fn000000000001654C(ra, gp, s0_128, 0x0000000000012000, 0x0000000000011B08, 0x0000000000011B28, 0x0000000000011B20, a3_1005, s2_1008, a5_1022, a6_1024, a7, s2_1008, 0x0000000000012000, out a4_2976, out a5_1022, out a6_1024, out a7)
	s2_1008 = (int64) Mem604[sp_1001 + 216:int32]
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0000000000015690:
	word64 a5_1062
	word64 a6_1063
	word64 a7_1064
	word64 a5_1080
	word64 a4_2975
	gp = fn000000000001654C(ra, fn000000000001654C(ra, gp, s0_128, 0x0000000000012000, 0x0000000000011B08, 0x0000000000011B38, 0x0000000000011B20, Mem604[sp_1001 + 88:word64], s2_1008, a5_1022, a6_1024, a7, s2_1008, 0x0000000000012000, out a4_2975, out a5_1062, out a6_1063, out a7_1064), s0_128, 0x0000000000012000, 0x0000000000011B08, 0x0000000000011B58, 0x0000000000011B48, Mem604[sp_1001 + 104:word64], (int64) Mem604[sp_1001 + 216:int32], a5_1062, a6_1063, a7_1064, s2_1008, 0x0000000000012000, out a4_1079, out a5_1080, out a6_1024, out a7)
	word64 a3_1086 = Mem604[sp_1001 + 96:word64]
	branch a3_1086 == 0x0000000000000000 l00000000000156EC
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00000000000156D4:
	s2_1008 = 0x0000000000012000
	word64 a5_2977
	gp = fn000000000001654C(ra, gp, s0_128, 0x0000000000012000, 0x0000000000011B08, 0x0000000000011B68, 0x0000000000011C60, a3_1086, a4_1079, a5_1080, a6_1024, a7, 0x0000000000012000, 0x0000000000012000, out a4_1079, out a5_2977, out a6_1024, out a7)
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00000000000156EC:
	a5_1104 = 65544
	s0_1106 = s0_128 & 65544
	branch s0_1106 == 65544 l0000000000015C1C
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0000000000015C1C:
	a3_1109 = Mem604[sp_1001 + 80:word64]
	branch a3_1109 == 0x0000000000000000 l00000000000156FC
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0000000000015C24:
	s0_1106 = 0
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0000000000015C2C:
	s2_1008 = 0x0000000000012000
	gp = fn000000000001654C(ra, gp, s0_1106, 0x0000000000012000, 0x0000000000011B08, 0x0000000000011B78, 0x0000000000011C60, a3_1109, a4_1079, 65544, a6_1024, a7, 0x0000000000012000, s3_1006, out a4_1079, out a5_1104, out a6_1024, out a7)
	branch s0_1106 != 0x0000000000000000 l00000000000158C8
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00000000000158C8:
	s2_1008 = 0x0000000000012000
	word64 a3_1157 = Mem604[sp_1001 + 240:word64]
	branch a3_1157 == 0x0000000000000000 l00000000000158E8
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00000000000158D0:
	gp = fn000000000001654C(ra, gp, s0_1106, 0x0000000000012000, 0x0000000000011B98, 0x0000000000011B88, 0x0000000000011C60, a3_1157, a4_1079, a5_1104, a6_1024, a7, 0x0000000000012000, s3_1006, out a4_1079, out a5_1104, out a6_1024, out a7)
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00000000000158E8:
	word64 a3_1186 = Mem604[sp_1001 + 248:word64]
	branch a3_1186 == 0x0000000000000000 l00000000000157BC
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00000000000158F0:
	word64 a5_2980
	gp = fn000000000001654C(ra, gp, s0_1106, 0x0000000000012000, 0x0000000000011B98, 0x0000000000011BA0, 0x0000000000011C60, a3_1186, a4_1079, a5_1104, a6_1024, a7, 0x0000000000012000, s3_1006, out a4_1079, out a5_2980, out a6_1024, out a7)
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0000000000015C44:
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00000000000156FC:
	putchar(10)
	sp_1001 = sp_1001 + 0xFFFFFFFFFFFFFFF8
	word64 a3_1218 = Mem604[sp_1001 + 240:word64]
	branch a3_1218 == 0x0000000000000000 l0000000000015728
// DataOut:
// DataOut (flags):
// SymbolicIn:

l000000000001570C:
	gp = fn000000000001654C(ra, gp, s0_1106, 0x0000000000012000, 0x0000000000011B98, 0x0000000000011B88, 0x0000000000011C60, a3_1218, a4_1079, a5_1104, a6_1024, a7, s2_1008, s3_1006, out a4_1079, out a5_1104, out a6_1024, out a7)
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0000000000015728:
	word64 a3_1249 = Mem604[sp_1001 + 248:word64]
	branch a3_1249 == 0x0000000000000000 l000000000001574C
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0000000000015730:
	gp = fn000000000001654C(ra, gp, s0_1106, 0x0000000000012000, 0x0000000000011B98, 0x0000000000011BA0, 0x0000000000011C60, a3_1249, a4_1079, a5_1104, a6_1024, a7, s2_1008, s3_1006, out a4_1079, out a5_1104, out a6_1024, out a7)
// DataOut:
// DataOut (flags):
// SymbolicIn:

l000000000001574C:
	word64 a3_1279 = Mem604[sp_1001 + 224:word64]
	branch a3_1279 == 0x0000000000000000 l000000000001576C
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0000000000015754:
	gp = fn000000000001654C(ra, gp, s0_1106, 0x0000000000012000, 0x0000000000011B08, 0x0000000000011BB0, 0x0000000000011C60, a3_1279, a4_1079, a5_1104, a6_1024, a7, s2_1008, s3_1006, out a4_1079, out a5_1104, out a6_1024, out a7)
// DataOut:
// DataOut (flags):
// SymbolicIn:

l000000000001576C:
	word64 a3_1308 = Mem604[sp_1001 + 232:word64]
	branch a3_1308 == 0x0000000000000000 l000000000001578C
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0000000000015774:
	word64 a5_2981
	gp = fn000000000001654C(ra, gp, s0_1106, 0x0000000000012000, 0x0000000000011B08, 0x0000000000011BC0, 0x0000000000011C60, a3_1308, a4_1079, a5_1104, a6_1024, a7, s2_1008, s3_1006, out a4_1079, out a5_2981, out a6_1024, out a7)
// DataOut:
// DataOut (flags):
// SymbolicIn:

l000000000001578C:
	word64 a5_1337 = (int64) Mem604[sp_1001 + 28:int32]
	branch a5_1337 == 0x0000000000000000 l00000000000157A0
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0000000000015794:
	a5_1337 = (int64) Mem604[sp_1001 + 216:int32]
	a4_1079 = 111
	branch a4_1079 >=u a5_1337 l0000000000015E3C
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0000000000015E3C:
	word64 a5_2983
	gp = fn000000000001654C(ra, gp, s0_1106, 0x0000000000012000, 0x0000000000011B08, 0x0000000000011BE0, 0x0000000000011BD0, (int64) (word32) (128 - a5_1337), sp_1001 + 152, a5_1337, a6_1024, a7, s2_1008, s3_1006, out a4_1079, out a5_2983, out a6_1024, out a7)
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00000000000157A0:
	word64 a5_2982
	gp = fn000000000001654C(ra, gp, s0_1106, 0x0000000000012000, 0x0000000000011B08, 0x0000000000011BE0, 0x0000000000011C60, sp_1001 + 152, a4_1079, a5_1337, a6_1024, a7, s2_1008, s3_1006, out a4_1079, out a5_2982, out a6_1024, out a7)
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00000000000157BC:
	word64 a5_1399 = Mem604[sp_1001 + 120:word64]
	branch a5_1399 == 0x0000000000000000 l0000000000015C08
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0000000000015C08:
	a5_1399 = Mem604[sp_1001 + 136:word64]
	branch a5_1399 != 0x0000000000000000 l00000000000157C4
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0000000000015C10:
	a5_1399 = Mem604[sp_1001 + 144:word64]
	branch a5_1399 != 0x0000000000000000 l00000000000157C4
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0000000000015C18:
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00000000000157C4:
	putchar(10)
	word64 sp_1405 = sp_1001 + 0xFFFFFFFFFFFFFFF8
	word64 a3_1407 = Mem604[sp_1405 + 128:word64]
	branch a3_1407 == 0x0000000000000000 l00000000000157F0
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00000000000157D4:
	gp = fn000000000001654C(ra, gp, s0_1106, 0x0000000000012000, 0x0000000000011B98, 0x0000000000011BF0, 0x0000000000011C60, a3_1407, a4_1079, a5_1399, a6_1024, a7, s2_1008, s3_1006, out a4_1079, out a5_1399, out a6_1024, out a7)
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00000000000157F0:
	word64 a3_1446 = Mem604[sp_1405 + 120:word64]
	branch a3_1446 == 0x0000000000000000 l0000000000015814
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00000000000157F8:
	gp = fn000000000001654C(ra, gp, s0_1106, 0x0000000000012000, 0x0000000000011B98, 0x0000000000011C00, 0x0000000000011C60, a3_1446, a4_1079, a5_1399, a6_1024, a7, s2_1008, s3_1006, out a4_1079, out a5_1399, out a6_1024, out a7)
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0000000000015814:
	word64 a3_1476 = Mem604[sp_1405 + 136:word64]
	branch a3_1476 == 0x0000000000000000 l0000000000015838
// DataOut:
// DataOut (flags):
// SymbolicIn:

l000000000001581C:
	gp = fn000000000001654C(ra, gp, s0_1106, 0x0000000000012000, 0x0000000000011B98, 0x0000000000011C10, 0x0000000000011C60, a3_1476, a4_1079, a5_1399, a6_1024, a7, s2_1008, s3_1006, out a4_1079, out a5_1399, out a6_1024, out a7)
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0000000000015838:
	word64 a3_1506 = Mem604[sp_1405 + 144:word64]
	branch a3_1506 == 0x0000000000000000 l00000000000153DC
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0000000000015840:
	word64 a4_2984
	word64 a5_2985
	word64 a6_2986
	word64 a7_2987
	gp = fn000000000001654C(ra, gp, s0_1106, 0x0000000000012000, 0x0000000000011B98, 0x0000000000011C18, 0x0000000000011C60, a3_1506, a4_1079, a5_1399, a6_1024, a7, s2_1008, s3_1006, out a4_2984, out a5_2985, out a6_2986, out a7_2987)
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00000000000153D0:
	branch (int64) Mem96[gp + -2028:int32] == 0x0000000000000000 l000000000001556C
// DataOut:
// DataOut (flags):
// SymbolicIn:

l000000000001556C:
	fwrite(0x0000000000011A08, 1, 37, Mem96[gp + -1920:word64])
// DataOut:
// DataOut (flags):
// SymbolicIn:

l000000000001538C:
	branch (int64) Mem90[gp + -2028:int32] != 0x0000000000000000 l00000000000153D8
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00000000000153D8:
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0000000000015394:
	fwrite(0x00000000000119D8, 1, 46, Mem90[gp + -1920:word64])
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00000000000153DC:
	branch a5_7 != Mem1554[gp + -1936:word64] l0000000000015E8C
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0000000000015E8C:
	__stack_chk_fail()
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00000000000153EC:
	return
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0000000000015224:
	branch a0_60 >u 118 l0000000000015200
// DataOut:
// DataOut (flags):
// SymbolicIn:

l000000000001522C:
	word64 a5_1653 = (int64) Mem50[(a0_60 << 0x00000000 >>u 0x0000001E) + 0x00000000000102A0:int32]
	call a5_1653 (retsize: 0;)
		uses: a0:a0_60,a1:a1,a2:0x00000000000119A8,a3:0x00000000000108E0,a4:0x00000000000102A0,a5:a5_1653,a6:a6,a7:a7,fa3:fa3,fa4:fa4,fa5:fa5,gp:gp,ra:ra,s0:s0_42,s1:0x00000000000108E0,s10:s10_45,s11:s11,s2:a1,s3:a0,s4:0x0000000000012000,s5:s5,s6:s6_43,s7:s7_49,s8:0x0000000000001000,s9:s9_44,sp:sp_62,Stack +FFFFFE40:0x00000000,Stack +FFFFFE48:0x00010008,Stack +FFFFFE5C:0x00000000,Stack +FFFFFF88:a5_7,Stack +FFFFFF98:s11,Stack +FFFFFFA0:s10,Stack +FFFFFFA8:s9,Stack +FFFFFFB0:s8,Stack +FFFFFFB8:s7,Stack +FFFFFFC0:s6,Stack +FFFFFFC8:s5,Stack +FFFFFFD0:s4,Stack +FFFFFFD8:s3,Stack +FFFFFFE0:s2,Stack +FFFFFFE8:s1,Stack +FFFFFFF0:s0,Stack +FFFFFFF8:ra,t1:t1,t3:t3
	return
// DataOut:
// DataOut (flags):
// SymbolicIn:

fn0000000000015180_exit:
// DataOut:
// DataOut (flags):
// SymbolicIn:



void fn0000000000015EB8(word64 a0, word32 dwArg00)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  a0:[0..31] Stack +0000:[0..31]
// LiveOut:
// Trashed: a0 a1 a2 a3 a4 a5 a6 gp sp
// Preserved:
fn0000000000015EB8_entry:
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0000000000015EB8:
	__libc_start_main(0x0000000000015180, qwArg00, fp + 8, 0x00000000000182E8, 0x0000000000018378, a0, fp & -16)
	return
// DataOut:
// DataOut (flags):
// SymbolicIn:

fn0000000000015EB8_exit:
// DataOut:
// DataOut (flags):
// SymbolicIn:



void fn0000000000015EF0(word64 ra)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  ra:[0..63]
// LiveOut:
// Trashed: a0 a4 a5 ra t1
// Preserved: sp
fn0000000000015EF0_entry:
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0000000000015EF0:
	word64 a4_8 = 14
	branch a4_8 >=u 0x0000000000000007 l0000000000015F20
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0000000000015F0C:
	branch 0x0000000000000000 == 0x0000000000000000 l0000000000015F20
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0000000000015F20:
	return
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0000000000015F18:
	call 0x0000000000000000 (retsize: 0;)
		uses: a0:0x00000000000102A0,a4:a4_8,a5:0x0000000000000007,ra:ra,sp:fp,t1:0x0000000000000000
	return
// DataOut:
// DataOut (flags):
// SymbolicIn:

fn0000000000015EF0_exit:
// DataOut:
// DataOut (flags):
// SymbolicIn:



void fn0000000000015F24()
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse: 
// LiveOut:
// Trashed: a0 a1 a5 t1
// Preserved: sp
fn0000000000015F24_entry:
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0000000000015F24:
	branch 0 == 0x0000000000000000 l0000000000015F60
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0000000000015F4C:
	branch 0x0000000000000000 == 0x0000000000000000 l0000000000015F60
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0000000000015F60:
	return
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0000000000015F58:
	call 0x0000000000000000 (retsize: 0;)
		uses: a0:0x00000000000102A0,a1:0,a5:0,sp:fp,t1:0x0000000000000000
	return
// DataOut:
// DataOut (flags):
// SymbolicIn:

fn0000000000015F24_exit:
// DataOut:
// DataOut (flags):
// SymbolicIn:



void fn0000000000015F64(word64 ra, word64 gp)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  gp:[0..63] ra:[0..63]
// LiveOut:
// Trashed: a0 a4 a5 t1
// Preserved: ra s0 sp
fn0000000000015F64_entry:
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0000000000015F64:
	branch (int64) Mem5[gp + -1900:byte] != 0x0000000000000000 l0000000000015F84
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0000000000015F78:
	fn0000000000015EF0(ra)
	Mem16[gp + 2196:byte] = 0x01
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0000000000015F84:
	return
// DataOut:
// DataOut (flags):
// SymbolicIn:

fn0000000000015F64_exit:
// DataOut:
// DataOut (flags):
// SymbolicIn:



void fn0000000000015F94(word64 ra, word64 t1, word64 a1)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  a1:[0..63] ra:[0..63] t1:[0..63]
// LiveOut:
// Trashed: a0 a1 a5 t1
// Preserved: ra sp
fn0000000000015F94_entry:
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0000000000015F94:
	branch Mem0[0x0000000000019E28:word64] != 0x0000000000000000 l0000000000015FA8
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0000000000015FA8:
	branch 0x0000000000000000 == 0x0000000000000000 l0000000000015FA4
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0000000000015FB4:
	call 0x0000000000000000 (retsize: 0;)
		uses: a0:0x0000000000019E28,a1:a1,a5:0x0000000000000000,ra:ra,sp:fp + -16,Stack +0008:ra,t1:t1
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0000000000015FC8_thunk_fn0000000000015F24:
	fn0000000000015F24()
	return
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0000000000015FA4:
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0000000000015FA4_thunk_fn0000000000015F24:
	fn0000000000015F24()
	return
// DataOut:
// DataOut (flags):
// SymbolicIn:

fn0000000000015F94_exit:
// DataOut:
// DataOut (flags):
// SymbolicIn:



void fn0000000000015FCC(word64 gp, word64 a0)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  a0:[0..63] gp:[0..63]
// LiveOut:
// Trashed: a0 a1 a2 a3 ra s0 sp
// Preserved:
fn0000000000015FCC_entry:
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0000000000015FCC:
	word64 a3_9 = Mem7[gp + -1920:word64]
	branch a0 != 0x0000000000000000 l0000000000016090
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0000000000016090:
	fwrite(0x0000000000010BE0, 1, 26, a3_9)
	fwrite(0x0000000000010C00, 1, 54, Mem7[gp + -1920:word64])
	fwrite(0x0000000000010C38, 1, 77, Mem7[gp + -1920:word64])
	fwrite(0x0000000000010C88, 1, 62, Mem7[gp + -1920:word64])
	fwrite(0x0000000000010CC8, 1, 79, Mem7[gp + -1920:word64])
	fwrite(0x0000000000010D18, 1, 79, Mem7[gp + -1920:word64])
	fwrite(0x0000000000010D68, 1, 42, Mem7[gp + -1920:word64])
	fwrite(0x0000000000010D98, 1, 76, Mem7[gp + -1920:word64])
	fwrite(0x0000000000010DE8, 1, 77, Mem7[gp + -1920:word64])
	fwrite(0x0000000000010E38, 1, 77, Mem7[gp + -1920:word64])
	fputc(10, Mem7[gp + -1920:word64])
	fwrite(0x0000000000010E88, 1, 23, Mem7[gp + -1920:word64])
	fwrite(0x0000000000010EA0, 1, 71, Mem7[gp + -1920:word64])
	fwrite(0x0000000000010EE8, 1, 57, Mem7[gp + -1920:word64])
	fwrite(0x0000000000010F28, 1, 58, Mem7[gp + -1920:word64])
	fwrite(0x0000000000010F68, 1, 57, Mem7[gp + -1920:word64])
	fwrite(0x0000000000010FA8, 1, 77, Mem7[gp + -1920:word64])
	fwrite(0x0000000000010FF8, 1, 77, Mem7[gp + -1920:word64])
	fwrite(0x0000000000011048, 1, 77, Mem7[gp + -1920:word64])
	fwrite(0x0000000000011098, 1, 46, Mem7[gp + -1920:word64])
	fwrite(0x00000000000110C8, 1, 72, Mem7[gp + -1920:word64])
	fwrite(0x0000000000011118, 1, 45, Mem7[gp + -1920:word64])
	fwrite(0x0000000000011148, 1, 67, Mem7[gp + -1920:word64])
	fwrite(0x0000000000011190, 1, 64, Mem7[gp + -1920:word64])
	fwrite(0x00000000000111D8, 1, 72, Mem7[gp + -1920:word64])
	fwrite(0x0000000000011228, 1, 46, Mem7[gp + -1920:word64])
	fputc(10, Mem7[gp + -1920:word64])
	fwrite(0x0000000000011258, 1, 15, Mem7[gp + -1920:word64])
	fwrite(0x0000000000011268, 1, 87, Mem7[gp + -1920:word64])
	fwrite(0x00000000000112C0, 1, 60, Mem7[gp + -1920:word64])
	fwrite(0x0000000000011300, 1, 68, Mem7[gp + -1920:word64])
	fwrite(0x0000000000011348, 1, 58, Mem7[gp + -1920:word64])
	fwrite(0x0000000000011388, 1, 57, Mem7[gp + -1920:word64])
	fwrite(0x00000000000113C8, 1, 62, Mem7[gp + -1920:word64])
	return
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0000000000015FE0:
	fwrite(0x0000000000011408, 1, 77, a3_9)
	fwrite(0x0000000000011458, 1, 62, Mem7[gp + -1920:word64])
	fwrite(0x0000000000011498, 1, 65, Mem7[gp + -1920:word64])
	fwrite(0x00000000000114E0, 1, 76, Mem7[gp + -1920:word64])
	fwrite(0x0000000000011530, 1, 65, Mem7[gp + -1920:word64])
	fwrite(0x0000000000011578, 1, 41, Mem7[gp + -1920:word64])
	fwrite(0x00000000000115A8, 1, 30, Mem7[gp + -1920:word64])
	return
// DataOut:
// DataOut (flags):
// SymbolicIn:

fn0000000000015FCC_exit:
// DataOut:
// DataOut (flags):
// SymbolicIn:



word64 fn00000000000163B0(word64 gp)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  gp:[0..63]
// LiveOut: a0
// Trashed: a0 a1 a2 a3 a4 a5
// Preserved: ra s0 s1 s2 s3 s4 s5 s6 s7 s8 s9 sp
fn00000000000163B0_entry:
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00000000000163B0:
	word64 a5_27 = Mem25[gp + -1936:word64]
	__sprintf_chk(fp + -232, 1, 128, 0x00000000000115C8, 0x00000000)
	word64 s3_37 = 16
	word64 s0_38 = 1
	word64 s1_43 = fp + 0xFFFFFFFFFFFFFF12
	word64 s6_44 = 128
	word64 s5_45 = 1
	word64 s9_46 = 15
	word64 s7_47 = 58
	branch s3_37 == 1 l000000000001646C
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0000000000016430:
	__sprintf_chk(s1_43, s5_45, s6_44, 0x00000000000115C8, 0x00000000)
	word64 a4_64 = s1_43 + 2
	branch (s0_38 & 1) == 0x0000000000000000 l00000000000164B8
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00000000000164B8:
	s1_43 = a4_64
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0000000000016454:
	branch s0_38 == s9_46 l00000000000164C4
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00000000000164C4:
	s1_43 = a4_64
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0000000000016458:
	Mem70[s1_43 + 2:byte] = (byte) s7_47
	s1_43 = s1_43 + 3
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0000000000016464:
	s0_38 = (int64) ((word32) s0_38 + 1)
	branch s0_38 != s3_37 l0000000000016430
// DataOut:
// DataOut (flags):
// SymbolicIn:

l000000000001646C:
	Mem79[s1_43:byte] = 0x00
	word64 a0_83 = __strdup(fp - 224)
	branch a5_27 != Mem79[gp + -1936:word64] l00000000000164CC
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00000000000164CC:
	__stack_chk_fail()
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0000000000016484:
	return a0_83
// DataOut:
// DataOut (flags):
// SymbolicIn:

fn00000000000163B0_exit:
// DataOut:
// DataOut (flags):
// SymbolicIn:



word64 fn00000000000164D0(word64 a0, word64 a1)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  a0:[0..31] a1:[0..63]
// LiveOut: a0
// Trashed: a0 a1 a2
// Preserved: ra s0 s1 s2 sp
fn00000000000164D0_entry:
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00000000000164D0:
	word64 a0_21
	word64 a0_19 = (uint64) (uint32) open(0x00000000000115D0, 0)
	branch a0_19 < 0x0000000000000000 l0000000000016544
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0000000000016544:
	a0_21 = -1
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0000000000016500:
	word64 a0_26 = (uint64) (uint32) read(a0_19, a0, a1 << 0x00000000 >>u 0x00000000)
	close(a0_19)
	a0_21 = (int64) (word32) (0x0000000000000000 - (word64) ((int64) ((word32) (a0_26 - a1)) != 0x0000000000000000))
// DataOut:
// DataOut (flags):
// SymbolicIn:

l000000000001652C:
	return a0_21
// DataOut:
// DataOut (flags):
// SymbolicIn:

fn00000000000164D0_exit:
// DataOut:
// DataOut (flags):
// SymbolicIn:



word64 fn000000000001654C(word64 ra, word64 gp, word64 s0, word64 s1, word64 a0, word64 a1, word64 a2, word64 a3, word64 a4, word64 a5, word64 a6, word64 a7, word64 s2, word64 s3, ptr64 & a4Out, ptr64 & a5Out, ptr64 & a6Out, ptr64 & a7Out)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  a0:[0..63] a1:[0..63] a2:[0..63] a3:[0..63] a4:[0..63] a5:[0..63] a6:[0..63] a7:[0..63] gp:[0..63] ra:[0..63] s0:[0..63] s1:[0..63] s2:[0..63] s3:[0..63]
// LiveOut: a4 a5 a6 a7 gp
// Trashed: a0 a1 a2 a3 a4 a5 a6 a7 gp t1 t3
// Preserved: ra s0 s1 s2 s3 sp
fn000000000001654C_entry:
// DataOut:
// DataOut (flags):
// SymbolicIn:

l000000000001654C:
	word64 t3_7 = Mem5[gp + -1936:word64]
	word64 sp_37
	word64 gp_40
	word64 s2_42
	word64 s3_43
	word64 a0_45
	word64 a6_51
	word64 a7_52
	call __vasprintf_chk (retsize: 0;)
		uses: a0:fp + -112,a1:1,a2:a2,a3:fp + -40,a4:a4,a5:a5,a6:a6,a7:a7,gp:gp,ra:ra,s0:s0,s1:s1,s2:a1,s3:a0,sp:fp + -128,Stack +0008:fp + -40,Stack +0010:0x0000000000000000,Stack +0018:t3_7,Stack +0028:s3,Stack +0030:s2,Stack +0038:s1,Stack +0040:s0,Stack +0048:ra,Stack +0058:a3,Stack +0060:a4,Stack +0068:a5,Stack +0070:a6,Stack +0078:a7,t1:fp + -40,t3:t3_7
		defs: a0:a0_45,a6:a6_51,a7:a7_52,gp:gp_40,s2:s2_42,s3:s3_43,sp:sp_37
	branch a0_45 < 0x0000000000000000 l00000000000165D8
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00000000000165A8:
	fputs(s2_42, Mem36[gp_40 + -1912:word64])
	word64 sp_58 = sp_37 + 0xFFFFFFFFFFFFFFF8
	branch (int64) Mem36[gp_40 + -2032:int32] != 0x0000000000000000 l000000000001661C
// DataOut:
// DataOut (flags):
// SymbolicIn:

l000000000001661C:
	fputs(s3_43, Mem36[gp_40 + -1912:word64])
	sp_58 = sp_37 + 0xFFFFFFFFFFFFFFF0
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00000000000165BC:
	fputs(Mem36[sp_58 + 16:word64], Mem36[gp_40 + -1912:word64])
	word64 sp_70 = sp_58 + 0xFFFFFFFFFFFFFFF8
	branch (int64) Mem36[gp_40 + -2032:int32] != 0x0000000000000000 l0000000000016600
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0000000000016600:
	fwrite(0x00000000000115E0, 1, 4, Mem36[gp_40 + -1912:word64])
	sp_70 = sp_70 + 0xFFFFFFFFFFFFFFF8
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00000000000165D0:
	free(Mem36[sp_70 + 16:word64])
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00000000000165D8:
	word64 a5_88 = Mem36[gp_40 + -1936:word64]
	branch t3_7 != a5_88 l000000000001662C
// DataOut:
// DataOut (flags):
// SymbolicIn:

l000000000001662C:
	__stack_chk_fail()
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00000000000165E4:
	a4Out = t3_7
	a5Out = a5_88
	a6Out = a6_51
	a7Out = a7_52
	return gp_40
// DataOut:
// DataOut (flags):
// SymbolicIn:

fn000000000001654C_exit:
// DataOut:
// DataOut (flags):
// SymbolicIn:



word64 fn0000000000016630(word64 gp, word64 a0, word64 a1, ptr64 & s1Out, ptr64 & a0Out)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  a0:[0..63] a1:[0..63] gp:[0..63]
// LiveOut: a0 s1 sp
// Trashed: a0 a1 a2 a3 a4 a5 ra s0 s1 s2 s3 sp
// Preserved:
fn0000000000016630_entry:
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0000000000016630:
	word64 a5_33
	word64 a0_22 = __errno_location()
	Mem24[a0_22:word32] = 0x00000000
	word64 a0_29 = (uint64) (uint32) strtol(a0)
	branch qwLoc50 == 0x0000000000000000 l000000000001668C
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0000000000016680:
	branch a0 == qwLoc50 l000000000001668C
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0000000000016684:
	branch (int64) Mem24[qwLoc50:byte] == 0x0000000000000000 l00000000000166C4
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00000000000166C4:
	a5_33 = (int64) Mem24[a0_22:int32]
	branch a5_33 != 0x0000000000000000 l0000000000016690
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00000000000166CC:
	word64 a4_34 = (int64) (word32) a0_29
	branch a0_29 != a4_34 l00000000000166E0
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00000000000166E0:
	a5_33 = -34
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00000000000166D8:
	Mem37[a1:word32] = (word32) a4_34
// DataOut:
// DataOut (flags):
// SymbolicIn:

l000000000001668C:
	a5_33 = (int64) Mem24[a0_22:int32]
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0000000000016690:
	branch a5_33 <= 0x0000000000000000 l00000000000166E8
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00000000000166E8:
	a5_33 = -22
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0000000000016694:
	a5_33 = (int64) (word32) (0x0000000000000000 - a5_33)
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0000000000016698:
	branch qwLoc48 != Mem47[gp + -1936:word64] l00000000000166F0
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00000000000166F0:
	__stack_chk_fail()
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00000000000166A8:
	s1Out = s3
	a0Out = a5_33
	return fp + 0xFFFFFFFFFFFFFFF0
// DataOut:
// DataOut (flags):
// SymbolicIn:

fn0000000000016630_exit:
// DataOut:
// DataOut (flags):
// SymbolicIn:



word64 fn00000000000166F4(word64 gp, word64 a0, word64 a1, word64 a2)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  a0:[0..63] a1:[0..63] a2:[0..63] gp:[0..63]
// LiveOut: a0
// Trashed: a0 a1 a2 a3 a4 a5
// Preserved: ra s0 s1 s2 s3 s4 sp
fn00000000000166F4_entry:
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00000000000166F4:
	word64 a0_104
	word64 sp_46
	word64 sp_29 = fp + -64
	word64 a5_7 = Mem5[gp + -1936:word64]
	word64 s1_21 = a0
	branch (int64) Mem9[a0:int32] != 0x0000000000000000 l00000000000167C8
// DataOut:
// DataOut (flags):
// SymbolicIn:

l000000000001672C:
	sp_29 = fp + 0xFFFFFFFFFFFFFFB8
	branch strchr(a1, 46) == 0x0000000000000000 l00000000000167C8
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00000000000167C8:
	word64 a0_35
	sp_46 = fn0000000000016630(gp, a1, sp_29, out s1_21, out a0_35)
	branch a0_35 == 0x0000000000000000 l0000000000016794
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00000000000167D8:
// DataOut:
// DataOut (flags):
// SymbolicIn:

l000000000001673C:
	sp_46 = fp + 0xFFFFFFFFFFFFFFB0
	branch (uint64) (uint32) inet_pton(2, a1, fp + 0xFFFFFFFFFFFFFFB8) == 0x0000000000000000 l000000000001678C
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0000000000016750:
	word64 a3_54
	word64 a4_239
	word64 a0_53 = fn00000000000182B4((int64) dwLoc50, out a3_54, out a4_239)
	branch a0_53 == 0x0000000000000000 l0000000000016790
// DataOut:
// DataOut (flags):
// SymbolicIn:

l000000000001675C:
	branch (a0_53 & 1) != 0x0000000000000000 l0000000000016778
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0000000000016764:
	word64 a5_59 = (int64) (word32) (a0_53 >>u 1)
	branch a5_59 == 0x0000000000000000 l0000000000016790
// DataOut:
// DataOut (flags):
// SymbolicIn:

l000000000001676C:
	branch (a5_59 & 1) == 0x0000000000000000 l0000000000016820
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0000000000016820:
	a0_53 = (int64) (word32) (a0_53 >>u 2)
	branch a0_53 != 0x0000000000000000 l000000000001675C
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0000000000016828:
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0000000000016774:
	a0_53 = a5_59
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0000000000016778:
	a0_53 = (int64) (word32) (a0_53 >>u 1)
	branch a0_53 == 0x0000000000000000 l0000000000016790
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0000000000016784:
	branch (a0_53 & 1) != 0x0000000000000000 l0000000000016778
// DataOut:
// DataOut (flags):
// SymbolicIn:

l000000000001678C:
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0000000000016790:
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0000000000016794:
	word64 a5_79 = (int64) Mem77[sp_46:int32]
	branch a2 == 0x0000000000000000 l00000000000167DC
// DataOut:
// DataOut (flags):
// SymbolicIn:

l000000000001679C:
	branch a5_79 <= 32 l00000000000167DC
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00000000000167DC:
	a0_104 = a5_79
	branch a5_79 < 0x0000000000000000 l00000000000167C0
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00000000000167E4:
	branch (int64) Mem77[s1_21:int32] != 0x0000000000000000 l00000000000167B8
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00000000000167EC:
	branch a5_79 > 32 l00000000000167C0
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00000000000167A8:
	branch (int64) Mem77[s1_21:int32] != 0x0000000000000000 l00000000000167B8
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00000000000167B0:
	Mem101[s1_21:word32] = 0x00000001
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00000000000167B8:
	a0_104 = a5_79
	branch a5_79 <= 128 l00000000000167F4
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00000000000167C0:
	a0_104 = -1
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00000000000167F4:
	branch a5_7 != Mem109[gp + -1936:word64] l000000000001682C
// DataOut:
// DataOut (flags):
// SymbolicIn:

l000000000001682C:
	__stack_chk_fail()
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0000000000016800:
	return a0_104
// DataOut:
// DataOut (flags):
// SymbolicIn:

fn00000000000166F4_exit:
// DataOut:
// DataOut (flags):
// SymbolicIn:



word64 fn0000000000016830(word64 gp, word64 a0)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  a0:[0..63] gp:[0..63]
// LiveOut: a0
// Trashed: a0 a4 a5
// Preserved: ra s0 sp
fn0000000000016830_entry:
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0000000000016830:
	word64 a5_7 = Mem5[gp + -1936:word64]
	branch a0 == 0x0000000000000000 l0000000000016864
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0000000000016864:
	branch a5_7 != Mem11[gp + -1936:word64] l0000000000016884
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0000000000016884:
	__stack_chk_fail()
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0000000000016874:
	return 0
// DataOut:
// DataOut (flags):
// SymbolicIn:

fn0000000000016830_exit:
// DataOut:
// DataOut (flags):
// SymbolicIn:

l000000000001684C:
// DataOut:
// DataOut (flags):
// SymbolicIn:



void fn00000000000168B8(word64 gp, word64 a1)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  a1:[0..63] gp:[0..63]
// LiveOut:
// Trashed: a0 a4 a5
// Preserved: ra s0 sp
fn00000000000168B8_entry:
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00000000000168B8:
	fn0000000000016830(gp, a1)
	return
// DataOut:
// DataOut (flags):
// SymbolicIn:

fn00000000000168B8_exit:
// DataOut:
// DataOut (flags):
// SymbolicIn:



word64 fn00000000000168E4(word64 gp, word64 a0, word64 a1)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  a0:[0..63] a1:[0..63] gp:[0..63]
// LiveOut: a0
// Trashed: a0 a1 a2 a3 a5 a6 a7 t1 t3 t4 t5
// Preserved: ra s0 s1 sp
fn00000000000168E4_entry:
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00000000000168E4:
	word64 a0_59
	word64 a0_35
	word64 a4_7 = Mem5[gp + -1936:word64]
	branch a0 == 2 l0000000000016984
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0000000000016984:
	a0_35 = (uint64) (uint32) getnameinfo(fp + -88, 16, gp + -1896, 1025, 0, 0, 0)
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0000000000016908:
	branch a0 == 10 l0000000000016934
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0000000000016934:
	memcpy(fp + -64, a1, 16)
	a0_35 = (uint64) (uint32) getnameinfo(fp + 0xFFFFFFFFFFFFFFB0, 28, gp + -1896, 1025, 0, 0, 0)
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0000000000016974:
	branch a0_35 != 0x0000000000000000 l0000000000016910
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0000000000016978:
	a0_59 = __strdup(gp + -1896)
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0000000000016910:
	a0_59 = 0
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0000000000016914:
	branch a4_7 != Mem65[gp + -1936:word64] l00000000000169D4
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00000000000169D4:
	__stack_chk_fail()
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0000000000016920:
	return a0_59
// DataOut:
// DataOut (flags):
// SymbolicIn:

fn00000000000168E4_exit:
// DataOut:
// DataOut (flags):
// SymbolicIn:



word64 fn00000000000169D8(word64 gp, word64 a1)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  a1:[0..31] gp:[0..63]
// LiveOut: a0
// Trashed: a0 a1 a2 a3 a4 a5
// Preserved: ra s0 s1 s2 s3 s4 sp
fn00000000000169D8_entry:
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00000000000169D8:
	word64 a0_111
	word64 a5_7 = Mem5[gp + -1936:word64]
	word64 sp_34 = fp + 0xFFFFFFFFFFFFFF88
	branch (uint64) (uint32) getaddrinfo(a1, 0, fp + -104, fp + -112) != 0x0000000000000000 l0000000000016AD8
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0000000000016AD8:
	a0_111 = 0
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0000000000016A34:
	word64 s0_36 = qwLoc78
	branch qwLoc78 == 0x0000000000000000 l0000000000016AA0
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0000000000016A3C:
	word64 s3_38 = 2
	word64 s2_39 = 64
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0000000000016A68:
	word64 a0_42 = (int64) Mem32[s0_36 + 4:int32]
	word64 a1_43 = Mem32[s0_36 + 24:word64]
	branch a0_42 != s3_38 l0000000000016A4C
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0000000000016A4C:
	sp_34 = sp_34 + 0xFFFFFFFFFFFFFFF8
	branch inet_ntop(a0_42, a1_43 + 8, gp + -864, s2_39) != 0x0000000000000000 l0000000000016A88
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0000000000016A74:
	sp_34 = sp_34 + 0xFFFFFFFFFFFFFFF8
	branch inet_ntop(a0_42, a1_43 + 4, gp + -864, s2_39) == 0x0000000000000000 l0000000000016A60
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0000000000016A60:
	s0_36 = Mem32[s0_36 + 40:word64]
	branch s0_36 == 0x0000000000000000 l0000000000016A9C
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0000000000016A9C:
	s0_36 = Mem32[sp_34:word64]
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0000000000016AA0:
	freeaddrinfo(s0_36)
	a0_111 = 0
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0000000000016A88:
	freeaddrinfo(Mem32[sp_34:word64])
	a0_111 = __strdup(gp + -864)
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0000000000016AAC:
	branch a5_7 != Mem32[gp + -1936:word64] l0000000000016AE0
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0000000000016AE0:
	__stack_chk_fail()
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0000000000016AB8:
	return a0_111
// DataOut:
// DataOut (flags):
// SymbolicIn:

fn00000000000169D8_exit:
// DataOut:
// DataOut (flags):
// SymbolicIn:



void fn0000000000016B38(word64 a0)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  a0:[0..63]
// LiveOut:
// Trashed: a0 a5
// Preserved: sp
fn0000000000016B38_entry:
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0000000000016B38:
	branch a0 >u 127 l0000000000016B5C
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0000000000016B5C:
	return
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0000000000016B40:
	return
// DataOut:
// DataOut (flags):
// SymbolicIn:

fn0000000000016B38_exit:
// DataOut:
// DataOut (flags):
// SymbolicIn:



word64 fn0000000000016B68(word64 a0)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  a0:[0..63]
// LiveOut: a0
// Trashed: a0 a1 a2 a3 a4 a5 a6
// Preserved: ra sp
fn0000000000016B68_entry:
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0000000000016B68:
	word64 a4_100
	word64 a3_8
	word64 a4_137
	word64 a0_7 = fn00000000000182B4(a0, out a3_8, out a4_137)
	word64 a5_11 = (int64) (word32) (a0_7 >>u 24)
	branch a5_11 == 0x0000000000000000 l0000000000016BD8
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0000000000016BD8:
	a4_100 = 0x00000000000115E8
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0000000000016B7C:
	branch a5_11 == 10 l0000000000016C2C
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0000000000016B84:
	word64 a4_16 = (int64) (word32) (a0_7 >>u 16)
	branch a5_11 == 100 l0000000000016C58
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0000000000016C58:
	branch (a4_16 & 192) != 64 l0000000000016BC0
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0000000000016C64:
	a4_100 = 0x0000000000011618
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0000000000016B90:
	branch a5_11 == 127 l0000000000016C70
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0000000000016C70:
	a4_100 = 0x0000000000011630
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0000000000016B98:
	word64 a2_24 = (int64) (word32) (a0_7 >>u 8)
	branch a5_11 == 169 l0000000000016C44
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0000000000016C44:
	branch (a4_16 & 255) != 254 l0000000000016BC0
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0000000000016C4C:
	a4_100 = 0x0000000000011640
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0000000000016BAC:
	branch a5_11 != 172 l0000000000016BF0
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0000000000016BF0:
	branch a5_11 != 192 l0000000000016C7C
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0000000000016C7C:
	branch a5_11 != 203 l0000000000016D18
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0000000000016D18:
	word64 a2_34 = 255
	branch a5_11 != a2_34 l0000000000016D4C
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0000000000016D4C:
	branch a5_11 != 198 l0000000000016BC0
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0000000000016D54:
	a4_100 = 0x0000000000011650
	branch (a4_16 & 254) != 18 l0000000000016BE0
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0000000000016D68:
	a4_100 = 0x0000000000011738
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0000000000016D20:
	a4_100 = 0x0000000000011710
	branch (a4_16 & 255) != a5_11 l0000000000016BE0
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0000000000016D2C:
	a4_100 = 0x0000000000011710
	branch (a2_24 & 255) != a2_34 l0000000000016BE0
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0000000000016D38:
	branch (a0_7 & a2_34) != (a2_24 & 255) l0000000000016BE0
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0000000000016D40:
	a4_100 = 0x0000000000011720
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0000000000016C84:
	branch (a4_16 & 255) != 0x0000000000000000 l0000000000016BC0
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0000000000016C88:
	branch (a2_24 & 255) != 113 l0000000000016BC0
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0000000000016C90:
	a4_100 = 0x00000000000116C0
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0000000000016BF8:
	branch ((a4_16 | a2_24) & 255) == 0x0000000000000000 l0000000000016CD0
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0000000000016CD0:
	a4_100 = 0x0000000000011660
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0000000000016C04:
	branch (a4_16 & 255) == 2 l0000000000016CDC
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0000000000016CDC:
	branch (a2_24 & 255) != 0x0000000000000000 l0000000000016BC0
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0000000000016CE0:
	a4_100 = 0x0000000000011680
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0000000000016C0C:
	branch (a4_16 & 255) == 51 l0000000000016C9C
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0000000000016C9C:
	branch (a2_24 & 255) != 100 l0000000000016BC0
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0000000000016CA4:
	a4_100 = 0x00000000000116A0
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0000000000016C14:
	branch (a4_16 & 255) == 88 l0000000000016CB0
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0000000000016CB0:
	branch (a2_24 & 255) == 99 l0000000000016D00
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0000000000016D00:
	a4_100 = 0x00000000000116E0
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0000000000016C1C:
	branch (a4_16 & 255) == 52 l0000000000016CEC
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0000000000016CEC:
	branch (a2_24 & 255) != 193 l0000000000016BC0
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0000000000016CF4:
	a4_100 = 0x0000000000011708
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0000000000016C24:
	branch (a4_16 & 255) != 168 l0000000000016BC0
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0000000000016BB4:
	branch (a4_16 & 240) == 16 l0000000000016C2C
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0000000000016C2C:
	return 0x0000000000011608
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0000000000016BC0:
	branch (int64) ((word32) a5_11 + -224) >u 15 l0000000000016CB8
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0000000000016CB8:
	branch (a5_11 & 240) == 240 l0000000000016D0C
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0000000000016D0C:
	a4_100 = 0x0000000000011710
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0000000000016CC4:
	a4_100 = 0x0000000000011650
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0000000000016BCC:
	a4_100 = 0x0000000000011748
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0000000000016BE0:
	return a4_100
// DataOut:
// DataOut (flags):
// SymbolicIn:

fn0000000000016B68_exit:
// DataOut:
// DataOut (flags):
// SymbolicIn:



word64 fn0000000000016D74(word64 ra, word64 gp, word64 a0, word64 a1, word64 a2, word64 a3, word64 s4, word64 s7, word64 fa3, word64 fa4, word64 fa5, ptr64 & a4Out)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  a0:[0..63] a1:[0..63] a2:[0..63] a3:[0..63] fa3:[0..63] fa4:[0..63] fa5:[0..63] gp:[0..63] ra:[0..63] s4:[0..63] s7:[0..63]
// LiveOut: a0 a4
// Trashed: a0 a1 a2 a4 a5
// Preserved: a3 a6 a7 fa3 fa4 fa5 gp ra s0 s1 s2 s3 s4 s5 s6 s7 s8 sp t1 t3 t4 t5
fn0000000000016D74_entry:
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0000000000016D74:
	word64 a0_422
	word64 a5_7 = Mem5[gp + -1936:word64]
	memset(a2, 0, 200)
	word64 s6_11 = a2
	word64 s1_17 = a0
	word64 s5_123 = a1
	word64 sp_108 = fp + 0xFFFFFFFFFFFFFE30
	branch (uint64) (uint32) inet_pton(2, a0, fp + 0xFFFFFFFFFFFFFE40) <= 0x0000000000000000 l0000000000016E60
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0000000000016E60:
	branch (int64) Mem37[gp + -2028:int32] != 0x0000000000000000 l0000000000016E20
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0000000000016E68:
	__fprintf_chk(Mem37[gp + -1920:word64], 1, 0x0000000000011788, 0x00000000)
	a0_422 = -1
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0000000000016DDC:
	word64 a0_146
	branch a1 < 0x0000000000000000 l0000000000016E88
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0000000000016E88:
	s5_123 = 32
	branch a3 << 0x0000000D >= 0x0000000000000000 l0000000000016EBC
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0000000000016E94:
	word64 a4_772
	word64 a3_771
	word64 a0_58 = fn00000000000182B4((int64) dwLoc01C8, out a3_771, out a4_772)
	s5_123 = 8
	word64 a5_62 = (int64) (word32) (a0_58 >>u 24)
	branch a0_58 >= 0x0000000000000000 l0000000000016EBC
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0000000000016EA8:
	s5_123 = 24
	branch (int64) ((word32) a5_62 + -128) >u 63 l0000000000016EBC
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0000000000016EB8:
	s5_123 = 16
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0000000000016DE0:
	word64 a0_68 = a0
	word64 s0_101 = 3
	word64 s2_70 = 46
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0000000000016DF0:
	word64 a0_74 = strchr(a0_68, s2_70)
	sp_108 = sp_108 + 0xFFFFFFFFFFFFFFF8 + 48
	Mem77[sp_108 + 48:word64] = a0_74
	branch a0_74 == 0x0000000000000000 l0000000000017194
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0000000000017194:
	s4 = 0x0000000000011000
	word64 s3_79 = 1
	word64 s2_80 = -1
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00000000000171A0:
	sp_108 = sp_108 + 0xFFFFFFFFFFFFFFF8
	branch (uint64) (uint32) __asprintf_chk(sp_108 + 0, s3_79, 0x00000000000117A8, 0x00000000) == s2_80 l00000000000172BC
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00000000000172BC:
	a0_146 = Mem77[gp + -1920:word64]
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00000000000171B8:
	s0_101 = (int64) ((word32) s0_101 + -1)
	s1_17 = Mem77[sp_108 + 48:word64]
	branch s0_101 != 0x0000000000000000 l00000000000171A0
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00000000000171C4:
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0000000000016E00:
	Mem100[sp_108 + 48:word64] = a0_74 + 1
	a0_68 = a0_74 + 1
	s0_101 = (int64) ((word32) s0_101 + -1)
	branch s0_101 != 0x0000000000000000 l0000000000016DF0
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0000000000016E10:
	branch a1 <= 32 l0000000000016EBC
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0000000000016EBC:
	word64 sp_114 = sp_108 + 0xFFFFFFFFFFFFFFF8
	branch inet_ntop(2, sp_108 + 8, sp_108 + 56, 47) == 0x0000000000000000 l0000000000017074
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0000000000016ED4:
	Mem122[a2:word64] = __strdup(sp_114 + 56)
	Mem131[sp_114 + 0x0000000000000008:word32] = (word32) fn0000000000016830(gp, s5_123)
	Mem136[sp_114 + 0x0000000000000030:word64] = 0x0000000000000000
	Mem137[sp_114 + 0x0000000000000038:word64] = 0x0000000000000000
	Mem138[sp_114 + 0x0000000000000040:word64] = 0x0000000000000000
	Mem139[sp_114 + 0x0000000000000048:word64] = 0x0000000000000000
	Mem140[sp_114 + 0x0000000000000050:word64] = 0x0000000000000000
	Mem141[sp_114 + 0x0000000000000058:word32] = 0x00000000
	Mem142[sp_114 + 0x000000000000005C:word16] = 0x0000
	Mem143[sp_114 + 0x000000000000005E:byte] = 0x00
	branch inet_ntop(2, sp_114 + 0x0000000000000008, sp_114 + 0x0000000000000030, 16) == 0x0000000000000000 l0000000000017300
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0000000000017300:
	a0_146 = Mem143[gp + -1920:word64]
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0000000000016F24:
	Mem151[a2 + 48:word64] = __strdup(sp_114 + 0x0000000000000028)
	word64 s0_152 = (int64) Mem151[sp_114 + 0xFFFFFFFFFFFFFFF0:int32]
	Mem153[a2 + 160:word32] = (word32) s5_123
	Mem164[sp_114 + 0x0000000000000008:word32] = (word32) (fn0000000000016830(gp, s5_123) ^ -1 | s0_152)
	Mem165[sp_114 + 0x0000000000000020:word64] = 0x0000000000000000
	Mem166[sp_114 + 0x0000000000000028:word64] = 0x0000000000000000
	Mem167[sp_114 + 0x0000000000000030:word64] = 0x0000000000000000
	Mem168[sp_114 + 0x0000000000000038:word64] = 0x0000000000000000
	Mem169[sp_114 + 0x0000000000000040:word64] = 0x0000000000000000
	Mem170[sp_114 + 0x0000000000000048:word32] = 0x00000000
	Mem171[sp_114 + 0x000000000000004C:word16] = 0x0000
	Mem172[sp_114 + 0x000000000000004E:byte] = 0x00
	branch inet_ntop(2, sp_114 + 0x0000000000000008, sp_114 + 0x0000000000000020, 16) == 0x0000000000000000 l00000000000172F4
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00000000000172F4:
	a0_146 = Mem172[gp + -1920:word64]
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0000000000016F84:
	Mem180[a2 + 40:word64] = __strdup(sp_114 + 0x0000000000000018)
	word64 s0_181 = (int64) Mem180[sp_114 + 0xFFFFFFFFFFFFFFE0:int32]
	word64 a0_183 = fn0000000000016830(gp, s5_123)
	word64 a3_186 = (int64) Mem180[sp_114 + 0xFFFFFFFFFFFFFFF8:int32]
	word64 s0_187 = a0_183 & s0_181
	Mem191[sp_114 + 0xFFFFFFFFFFFFFFF0:word32] = (word32) s0_187
	word64 a0_192
	word64 t1_199 = fn0000000000017F04(gp, s0_187, s5_123, s0_187, a3_186, out a0_192)
	Mem201[a2 + 24:word64] = a0_192
	Mem206[sp_114 + 0x0000000000000010:word64] = 0x0000000000000000
	Mem207[sp_114 + 0x0000000000000018:word64] = 0x0000000000000000
	Mem208[sp_114 + 0x0000000000000020:word64] = 0x0000000000000000
	Mem209[sp_114 + 0x0000000000000028:word64] = 0x0000000000000000
	Mem210[sp_114 + 0x0000000000000030:word64] = 0x0000000000000000
	Mem211[sp_114 + 0x0000000000000038:word32] = 0x00000000
	Mem212[sp_114 + 0x000000000000003C:word16] = 0x0000
	Mem213[sp_114 + 0x000000000000003E:byte] = 0x00
	branch inet_ntop(2, sp_114 + 0xFFFFFFFFFFFFFFF0, sp_114 + 0x0000000000000010, 16) == 0x0000000000000000 l00000000000172DC
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00000000000172DC:
	a0_146 = Mem213[gp + -1920:word64]
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0000000000016FF4:
	word64 a5_240
	word64 a0_219 = __strdup(sp_114 + 0x0000000000000008)
	word64 s0_221 = (int64) Mem213[sp_114 + 0xFFFFFFFFFFFFFFE0:int32]
	Mem222[a2 + 32:word64] = a0_219
	Mem232[a2 + 184:word64] = fn0000000000016B68(s0_221)
	word64 a4_766
	word64 a3_765
	word64 a0_234 = fn00000000000182B4(s0_221, out a3_765, out a4_766)
	word64 sp_220 = sp_114 + 0xFFFFFFFFFFFFFFC8
	word64 a5_238 = (int64) (word32) (a0_234 >>u 24)
	branch a0_234 >= 0x0000000000000000 l0000000000017098
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0000000000017098:
	a5_240 = 0x0000000000011758
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0000000000017024:
	branch (int64) ((word32) a5_238 + -128) <=u 63 l000000000001727C
// DataOut:
// DataOut (flags):
// SymbolicIn:

l000000000001727C:
	a5_240 = 0x0000000000011760
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0000000000017030:
	branch (int64) ((word32) a5_238 + -192) <=u 31 l00000000000172A4
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00000000000172A4:
	a5_240 = 0x0000000000011768
// DataOut:
// DataOut (flags):
// SymbolicIn:

l000000000001703C:
	branch (int64) ((word32) a5_238 + -224) >u 14 l00000000000172B0
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00000000000172B0:
	a5_240 = 0x0000000000011778
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0000000000017048:
	a5_240 = 0x0000000000011770
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00000000000170A0:
	word64 a5_265
	Mem257[a2 + 192:word64] = a5_240
	word64 s2_258 = 32
	branch s5_123 == s2_258 l0000000000017158
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0000000000017158:
	Mem262[a2 + 168:word64] = a0_219
	Mem263[a2 + 176:word64] = a0_219
	a5_265 = 0x0000000000011780
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00000000000170AC:
	Mem268[sp_114 + 0xFFFFFFFFFFFFFFF0:word32] = (word32) s0_221
	branch s5_123 == 31 l0000000000017210
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0000000000017210:
	branch inet_ntop(2, sp_114 + 0xFFFFFFFFFFFFFFF0, sp_114, 16) == 0x0000000000000000 l00000000000172E8
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0000000000017228:
	word64 a0_277 = __strdup(sp_114 + 0xFFFFFFFFFFFFFFF8)
	word64 a5_279 = (int64) Mem268[sp_114 + 0xFFFFFFFFFFFFFFC8:int32]
	word64 a4_280 = (int64) Mem268[sp_114 + 0xFFFFFFFFFFFFFFD0:int32]
	Mem281[a2 + 168:word64] = a0_277
	Mem288[sp_114 + 0xFFFFFFFFFFFFFFE8:word32] = (word32) (a5_279 ^ -1 | a4_280)
	branch inet_ntop(2, sp_114 + 0xFFFFFFFFFFFFFFE8, sp_114 + 0xFFFFFFFFFFFFFFF0, 47) == 0x0000000000000000 l0000000000017074
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0000000000017260:
	Mem295[a2 + 176:word64] = __strdup(sp_114 + 0xFFFFFFFFFFFFFFE8)
	sp_220 = sp_114 + 0xFFFFFFFFFFFFFFA8
	a5_265 = 0x0000000000012660
// DataOut:
// DataOut (flags):
// SymbolicIn:

l000000000001716C:
	Mem302[a2 + 96:byte] = (byte) (int64) Mem299[a5_265:byte]
	Mem304[a2 + 97:byte] = (byte) (int64) Mem302[a5_265 + 1:byte]
	branch a3 << 0x00000011 < 0x0000000000000000 l0000000000017288
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0000000000017288:
	gp = fn0000000000017B40(ra, gp, t1_199, s0_221, s1_17, (int64) Mem304[sp_220 + 8:int32], a2 + 64, a2 + 72, a2 + 80, a2 + 88, s2_258, a0_219, s4, s5_123, a2, s7, fa3, fa4, fa5, out s6_11)
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0000000000017184:
	branch (a3 & 1) != 0x0000000000000000 l00000000000171C8
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00000000000171C8:
	word64 a0_397 = fn00000000000168E4(gp, 2, sp_220 + 8)
	Mem409[s6_11 + 56:word64] = a0_397
	branch a0_397 != 0x0000000000000000 l000000000001718C
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00000000000171DC:
	branch (int64) Mem409[gp + -2028:int32] != 0x0000000000000000 l0000000000016E20
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00000000000171E4:
	__sprintf_chk(sp_220 + 104, 1, 250, 0x0000000000011830, 0x00000000)
	herror(sp_220 + 0x0000000000000060)
	a0_422 = -1
// DataOut:
// DataOut (flags):
// SymbolicIn:

l000000000001718C:
	a0_422 = 0
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00000000000170B8:
	Mem430[sp_114 + 0xFFFFFFFFFFFFFFF0:word32] = (word32) (s0_221 | 0x0000000001000000)
	branch inet_ntop(2, sp_114 + 0xFFFFFFFFFFFFFFF0, sp_114, 16) == 0x0000000000000000 l00000000000172E8
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00000000000172E8:
	a0_146 = Mem434[gp + -1920:word64]
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00000000000172C4:
	__fprintf_chk(a0_146, 1, 0x00000000000117B0, 0x00000000)
	abort()
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00000000000170DC:
	word64 a0_446 = __strdup(sp_114 + 0xFFFFFFFFFFFFFFF8)
	word64 a5_448 = (int64) Mem430[sp_114 + 0xFFFFFFFFFFFFFFC8:int32]
	Mem449[a2 + 168:word64] = a0_446
	word64 a4_768
	word64 a3_769
	word64 a4_770
	word64 a3_767
	Mem462[sp_114 + 0xFFFFFFFFFFFFFFE8:word32] = (word32) fn00000000000182B4((int64) ((word32) fn00000000000182B4(a5_448 ^ -1 | (int64) Mem449[sp_114 + 0xFFFFFFFFFFFFFFD0:int32], out a3_767, out a4_768) + -1), out a3_769, out a4_770)
	branch inet_ntop(2, sp_114 + 0xFFFFFFFFFFFFFFE8, sp_114 + 0xFFFFFFFFFFFFFFF0, 47) == 0x0000000000000000 l0000000000017074
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0000000000017074:
	branch (int64) Mem470[gp + -2028:int32] != 0x0000000000000000 l0000000000016E20
// DataOut:
// DataOut (flags):
// SymbolicIn:

l000000000001707C:
	fwrite(0x00000000000117F8, 1, 43, Mem470[gp + -1920:word64])
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0000000000017120:
	__strdup(sp_114 + 0xFFFFFFFFFFFFFFE8)
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0000000000016E18:
	branch (int64) Mem472[gp + -2028:int32] == 0x0000000000000000 l0000000000017054
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0000000000017054:
	__fprintf_chk(Mem472[gp + -1920:word64], 1, 0x00000000000117D8, 0x00000000)
	a0_422 = -1
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0000000000016E20:
	a0_422 = -1
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0000000000016E24:
	branch a5_7 != Mem500[gp + -1936:word64] l00000000000172D8
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00000000000172D8:
	__stack_chk_fail()
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0000000000016E30:
	a4Out = a5_7
	return a0_422
// DataOut:
// DataOut (flags):
// SymbolicIn:

fn0000000000016D74_exit:
// DataOut:
// DataOut (flags):
// SymbolicIn:



word64 fn000000000001730C(word64 gp, word64 a0, word64 a1)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  a0:[0..63] a1:[0..63] gp:[0..63]
// LiveOut: a0
// Trashed: a0 a5
// Preserved: a1 a2 a3 ra s0 s1 sp
fn000000000001730C_entry:
// DataOut:
// DataOut (flags):
// SymbolicIn:

l000000000001730C:
	word64 a0_42
	word64 a4_7 = Mem5[gp + -1936:word64]
	branch a0 >u 128 l00000000000173BC
// DataOut:
// DataOut (flags):
// SymbolicIn:

l000000000001732C:
	word64 a5_20 = fp + -184
	word64 a3_22 = 7
	word64 a2_23 = -1
	branch a0 == 0x0000000000000000 l000000000001736C
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0000000000017354:
	branch a3_22 >= a0 l00000000000173C4
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00000000000173C4:
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0000000000017358:
	Mem29[a5_20:byte] = (byte) a2_23
	a0 = (int64) ((word32) a0 + -8)
	a5_20 = a5_20 + 1
	branch a0 > 0x0000000000000000 l0000000000017354
// DataOut:
// DataOut (flags):
// SymbolicIn:

l000000000001736C:
	branch inet_ntop(10, fp + -184, fp + -168, 128) == 0x0000000000000000 l00000000000173BC
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00000000000173BC:
	a0_42 = 0
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0000000000017384:
	memcpy(a1, fp + 0xFFFFFFFFFFFFFF40, 16)
	a0_42 = __strdup(fp + 0xFFFFFFFFFFFFFF48)
// DataOut:
// DataOut (flags):
// SymbolicIn:

l000000000001739C:
	branch a4_7 != Mem55[gp + -1936:word64] l00000000000173D0
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00000000000173D0:
	__stack_chk_fail()
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00000000000173A8:
	return a0_42
// DataOut:
// DataOut (flags):
// SymbolicIn:

fn000000000001730C_exit:
// DataOut:
// DataOut (flags):
// SymbolicIn:



word64 fn00000000000173D4(word64 a0, word64 a1, ptr64 & spOut, ptr64 & s0Out, ptr64 & s1Out, ptr64 & a0Out, ptr64 & s2Out, ptr64 & s3Out)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  a0:[0..63] a1:[0..63]
// LiveOut: a0 ra s0 s1 s2 s3 sp
// Trashed: a0 a1 a2 a3 a4 a5 ra s0 s1 s2 s3 sp
// Preserved:
fn00000000000173D4_entry:
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00000000000173D4:
	word64 a0_101
	word64 s2_17 = (int64) Mem13[a0:byte]
	word64 s3_18 = (int64) Mem13[a0 + 1:byte]
	branch a1 == 128 l00000000000174DC
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00000000000174DC:
	branch (uint64) (uint32) memcmp(a0, 0x0000000000010880, 16) == 0x0000000000000000 l0000000000017538
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0000000000017538:
	spOut = fp + 0xFFFFFFFFFFFFFFF8
	s0Out = s1
	s1Out = s2
	a0Out = 0x0000000000011858
	s2Out = s3
	s3Out = qwLoc30
	return s0
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00000000000174F4:
	branch (uint64) (uint32) memcmp(a0, 0x0000000000010898, 16) != 0x0000000000000000 l000000000001747C
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0000000000017508:
	a0_101 = 0x0000000000011870
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0000000000017400:
	branch a1 > 95 l0000000000017474
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0000000000017474:
// DataOut:
// DataOut (flags):
// SymbolicIn:

l000000000001747C:
	branch (uint64) (uint32) memcmp(a0, 0x00000000000108B0, 12) == 0x0000000000000000 l000000000001755C
// DataOut:
// DataOut (flags):
// SymbolicIn:

l000000000001755C:
	spOut = fp
	s0Out = qwArg00
	s1Out = ra
	a0Out = 0x0000000000011888
	s2Out = s0
	s3Out = s1
	return qwArg08
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0000000000017490:
	branch (uint64) (uint32) memcmp(a0, 0x00000000000108C0, 12) == 0x0000000000000000 l0000000000017514
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0000000000017514:
	spOut = fp
	s0Out = ra
	s1Out = s0
	a0Out = 0x00000000000118A0
	s2Out = s1
	s3Out = s2
	return qwArg00
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00000000000174A4:
	branch (uint64) (uint32) memcmp(a0, 0x00000000000108D0, 12) != 0x0000000000000000 l0000000000017408
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00000000000174B8:
	spOut = fp
	s0Out = s0
	s1Out = s1
	a0Out = 0x00000000000118B8
	s2Out = s2
	s3Out = s3
	return ra
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0000000000017408:
	word64 a5_92 = s2_17 << 0x00000008 | s3_18
	branch (a5_92 & 0x00000000FFFFE000) == 0x0000000000002000 l0000000000017580
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0000000000017580:
	a0_101 = 0x00000000000118D8
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0000000000017420:
	branch (s2_17 & 254) == 252 l000000000001758C
// DataOut:
// DataOut (flags):
// SymbolicIn:

l000000000001758C:
	a0_101 = 0x00000000000118E8
// DataOut:
// DataOut (flags):
// SymbolicIn:

l000000000001742C:
	branch (a5_92 & -64) == 65152 l0000000000017598
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0000000000017598:
	a0_101 = 0x0000000000011900
// DataOut:
// DataOut (flags):
// SymbolicIn:

l000000000001743C:
	branch s2_17 == 255 l00000000000175A4
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00000000000175A4:
	a0_101 = 0x0000000000011748
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0000000000017444:
	a0_101 = 0x0000000000011710
	branch (a5_92 & -2) == 8194 l00000000000175B0
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00000000000175B0:
	a0_101 = 0x0000000000011918
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0000000000017458:
	spOut = fp
	s0Out = s0
	s1Out = s1
	a0Out = a0_101
	s2Out = s2
	s3Out = s3
	return ra
// DataOut:
// DataOut (flags):
// SymbolicIn:

fn00000000000173D4_exit:
// DataOut:
// DataOut (flags):
// SymbolicIn:



word64 fn00000000000175BC(word64 gp, word64 t1, word64 a0, word64 a1, word64 a2, word64 a3, word64 fa3, word64 fa4, word64 fa5, ptr64 & a4Out)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  a0:[0..63] a1:[0..63] a2:[0..63] a3:[0..63] fa3:[0..63] fa4:[0..63] fa5:[0..63] gp:[0..63] t1:[0..63]
// LiveOut: a0 a4
// Trashed: a0 a1 a2 a4 a5
// Preserved: a3 a6 a7 fa3 fa4 fa5 gp ra s0 s1 s2 s3 s4 s5 s6 s7 s8 s9 sp t1 t3 t4 t5
fn00000000000175BC_entry:
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00000000000175BC:
	word64 a0_107
	word64 a5_7 = Mem5[gp + -1936:word64]
	memset(a2, 0, 200)
	word64 s2_101 = a1
	word64 s6_318 = a3
	branch (uint64) (uint32) inet_pton(10, a0, fp + 0xFFFFFFFFFFFFFE60) <= 0x0000000000000000 l00000000000177B4
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00000000000177B4:
	branch (int64) Mem39[gp + -2028:int32] != 0x0000000000000000 l0000000000017770
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00000000000177BC:
	__fprintf_chk(Mem39[gp + -1920:word64], 1, 0x0000000000011920, 0x00000000)
	a0_107 = -1
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0000000000017628:
	Mem64[a2 + 8:word64] = fn00000000000163B0(gp)
	branch inet_ntop(10, fp + 0xFFFFFFFFFFFFFE58, fp + 0xFFFFFFFFFFFFFE88, 250) == 0x0000000000000000 l0000000000017768
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0000000000017650:
	Mem74[a2:word64] = __strdup(fp + 0xFFFFFFFFFFFFFE88)
	word64 s5_75 = 128
	branch s5_75 < a1 l00000000000177DC
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00000000000177DC:
	branch (int64) Mem74[gp + -2028:int32] != 0x0000000000000000 l0000000000017770
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00000000000177E4:
	__fprintf_chk(Mem74[gp + -1920:word64], 1, 0x0000000000011940, 0x00000000)
	a0_107 = -1
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0000000000017664:
	branch a1 < 0x0000000000000000 l0000000000017868
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0000000000017868:
	s2_101 = s5_75
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0000000000017668:
	s5_75 = a1
// DataOut:
// DataOut (flags):
// SymbolicIn:

l000000000001766C:
	Mem91[a2 + 160:word32] = (word32) s5_75
	word64 a0_95 = fn000000000001730C(gp, s5_75, fp + 0xFFFFFFFFFFFFFE58)
	Mem97[a2 + 48:word64] = a0_95
	branch a0_95 == 0x0000000000000000 l00000000000178F8
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00000000000178F8:
	branch (int64) Mem97[gp + -2028:int32] != 0x0000000000000000 l0000000000017770
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0000000000017900:
	__fprintf_chk(Mem97[gp + -1920:word64], 1, 0x0000000000011960, 0x00000000)
	a0_107 = -1
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0000000000017688:
	word64 s8_108 = fp + 0xFFFFFFFFFFFFFE68
	word64 a5_109 = fp + 0xFFFFFFFFFFFFFE48
	word64 s9_110 = fp + 0xFFFFFFFFFFFFFE58
	word64 a2_111 = fp + 0xFFFFFFFFFFFFFE68
	word64 a3_112 = fp + 0xFFFFFFFFFFFFFE58
// DataOut:
// DataOut (flags):
// SymbolicIn:

l000000000001769C:
	Mem122[a2_111:byte] = (byte) ((int64) Mem114[a5_109:byte] & (int64) Mem114[a3_112:byte])
	a5_109 = a5_109 + 1
	a3_112 = a3_112 + 1
	a2_111 = a2_111 + 1
	branch fp + 0xFFFFFFFFFFFFFE58 != a5_109 l000000000001769C
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00000000000176BC:
	branch inet_ntop(10, fp + 0xFFFFFFFFFFFFFE68, fp + 0xFFFFFFFFFFFFFE88, 250) == 0x0000000000000000 l0000000000017768
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00000000000176D4:
	word64 s2_215
	Mem138[a2 + 32:word64] = __strdup(fp + 0xFFFFFFFFFFFFFE88)
	Mem147[a2 + 16:word64] = fn00000000000163B0(gp)
	word64 a0_151
	word64 s1_157
	word64 s2_158
	word64 sp_160
	word64 s0_156
	word64 s3_159
	word64 ra_155 = fn00000000000173D4(fp + 0xFFFFFFFFFFFFFE58, s2_101, out sp_160, out s0_156, out s1_157, out a0_151, out s2_158, out s3_159)
	Mem163[s0_156 + 184:word64] = a0_151
	Mem171[s0_156 + 24:word64] = fn0000000000018118(gp, sp_160 + 40, s5_75)
	branch s2_158 != 128 l0000000000017870
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0000000000017870:
	Mem176[s0_156 + 168:word64] = __strdup(s3_159)
// DataOut:
// DataOut (flags):
// SymbolicIn:

l000000000001787C:
	s8_108 = s8_108 + 1
	Mem185[s8_108 + 4095:byte] = (byte) ((int64) Mem178[s9_110:byte] ^ -1 | (int64) Mem178[s8_108:byte])
	s9_110 = s9_110 + 1
	branch s3_159 != s8_108 l000000000001787C
// DataOut:
// DataOut (flags):
// SymbolicIn:

l000000000001789C:
	branch inet_ntop(10, sp_160 + 0x0000000000000020, s3_159, 250) == 0x0000000000000000 l0000000000017768
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0000000000017768:
	branch (int64) Mem197[gp + -2028:int32] == 0x0000000000000000 l0000000000017804
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0000000000017804:
	fwrite(0x00000000000117F8, 1, 43, Mem197[gp + -1920:word64])
	a0_107 = -1
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00000000000178B4:
	Mem213[s0_156 + 176:word64] = __strdup(s3_159)
	word64 a5_211 = 128
	sp_160 = sp_160 + 0xFFFFFFFFFFFFFFE8
	s2_215 = (int64) (word32) (a5_211 - s2_158)
	branch s2_215 != a5_211 l0000000000017728
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00000000000178D0:
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0000000000017714:
	word64 a5_219 = Mem171[s0_156 + 32:word64]
	Mem222[s0_156 + 168:word64] = a5_219
	Mem223[s0_156 + 176:word64] = a5_219
	s2_215 = 0
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0000000000017728:
	s2_215 = (s2_215 << 0x00000000 >>u 0x0000001D) + 0x0000000000010480
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0000000000017740:
	snprintf(s0_156 + 96, 64, 0x0000000000011990, 0x00000000)
	word64 sp_240 = sp_160 + 0xFFFFFFFFFFFFFFF8
	branch a3 << 0x00000011 < 0x0000000000000000 l00000000000178DC
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00000000000178DC:
	gp = fn0000000000017D10(ra_155, gp, t1, s0_156, s1_157, sp_240 + 8, s0_156 + 64, s0_156 + 72, s0_156 + 80, s0_156 + 88, s2_215, s3_159, a0, s5_75, a3, fp + 0xFFFFFFFFFFFFFE58, fa3, fa4, fa5, out s0_156, out s3_159, out s6_318)
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0000000000017758:
	branch (s6_318 & 1) != 0x0000000000000000 l0000000000017824
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0000000000017824:
	word64 a0_327 = fn00000000000168E4(gp, 10, sp_240 + 8)
	Mem339[s0_156 + 56:word64] = a0_327
	branch a0_327 != 0x0000000000000000 l0000000000017760
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0000000000017838:
	branch (int64) Mem339[gp + -2028:int32] != 0x0000000000000000 l0000000000017770
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0000000000017840:
	__sprintf_chk(s3_159, 1, 250, 0x0000000000011830, 0x00000000)
	herror(s3_159)
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0000000000017770:
	a0_107 = -1
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0000000000017760:
	a0_107 = 0
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0000000000017774:
	branch a5_7 != Mem358[gp + -1936:word64] l0000000000017920
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0000000000017920:
	__stack_chk_fail()
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0000000000017780:
	a4Out = a5_7
	return a0_107
// DataOut:
// DataOut (flags):
// SymbolicIn:

fn00000000000175BC_exit:
// DataOut:
// DataOut (flags):
// SymbolicIn:



word64 fn0000000000017924(word64 gp, ptr64 & a1Out, ptr64 & a2Out, ptr64 & a3Out, ptr64 & a4Out, ptr64 & a6Out)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  gp:[0..63]
// LiveOut: a0 a1 a2 a3 a4 a6
// Trashed: a0 a1 a2 a3 a4 a5 a6
// Preserved: ra s0 s1 s2 s3 s4 s5 s6 s7 s8 s9 sp
fn0000000000017924_entry:
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0000000000017924:
	word64 s0_118
	branch Mem5[gp + -2016:word64] == 0x0000000000000000 l00000000000179B8
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00000000000179B8:
	s0_118 = (int64) Mem27[gp + -2024:int32]
	branch s0_118 != 0x0000000000000000 l000000000001795C
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00000000000179C0:
	word64 a0_32 = dlopen(0x0000000000012A38, 1)
	Mem34[gp + 2080:word64] = a0_32
	branch a0_32 == 0x0000000000000000 l0000000000017B14
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0000000000017B14:
	a3 = 256
	a2 = 1
	__snprintf_chk(gp + -800, a3, a2, a3, 0x0000000000012A58, 0x00000000)
	s0_118 = -1
	Mem46[gp + 2072:word32] = (word32) s0_118
	a4 = 0x0000000000012A58
	a1 = a3
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00000000000179DC:
	Mem52[gp + 2152:word64] = dlsym(a0_32, 0x0000000000012A78)
	word64 a0_55 = dlsym(a0_32, 0x0000000000012A90)
	Mem61[gp + 2144:word64] = a0_55
	word64 a0_62 = dlsym(a0_32, 0x0000000000012AA0)
	Mem68[gp + 2136:word64] = a0_62
	word64 a0_69 = dlsym(a0_32, 0x0000000000012AC0)
	Mem75[gp + 2120:word64] = a0_69
	word64 a0_76 = dlsym(a0_32, 0x0000000000012AD0)
	Mem82[gp + 2112:word64] = a0_76
	word64 a0_83 = dlsym(a0_32, 0x0000000000012AE8)
	Mem89[gp + 2104:word64] = a0_83
	word64 a0_90 = dlsym(a0_32, 0x0000000000012B00)
	Mem96[gp + 2096:word64] = a0_90
	word64 a0_97 = dlsym(a0_32, 0x0000000000012B18)
	Mem103[gp + 2088:word64] = a0_97
	Mem106[gp + 2128:word64] = dlsym(a0_32, 0x0000000000012B38)
	a1 = 0x0000000000012B38
	branch a0_55 == 0x0000000000000000 l0000000000017ACC
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0000000000017AAC:
	branch a0_62 == 0x0000000000000000 l0000000000017ACC
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0000000000017AB0:
	branch a0_69 == 0x0000000000000000 l0000000000017ACC
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0000000000017AB4:
	branch a0_76 == 0x0000000000000000 l0000000000017ACC
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0000000000017AB8:
	branch a0_83 == 0x0000000000000000 l0000000000017ACC
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0000000000017ABC:
	branch a0_90 == 0x0000000000000000 l0000000000017ACC
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0000000000017AC0:
	branch a0_97 == 0x0000000000000000 l0000000000017ACC
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0000000000017ACC:
	a6 = Mem106[0x0000000000012B50:word64]
	word64 a0_111 = Mem106[0x0000000000012B58:word64]
	a1 = Mem106[0x0000000000012B60:word64]
	a2 = Mem106[0x0000000000012B68:word64]
	a3 = Mem106[0x0000000000012B70:word64]
	a4 = (int64) Mem106[0x0000000000012B78:int32]
	Mem119[gp + -800:word64] = a6
	Mem120[gp + -792:word64] = a0_111
	Mem121[gp + -784:word64] = a1
	Mem122[gp + -776:word64] = a2
	Mem123[gp + -768:word64] = a3
	Mem124[gp + -760:word32] = (word32) a4
	s0_118 = -1
	Mem125[gp + 2072:word32] = (word32) s0_118
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0000000000017AC4:
	Mem126[gp + 2072:word32] = 0x00000000
// DataOut:
// DataOut (flags):
// SymbolicIn:

l000000000001795C:
	branch (int64) Mem27[gp + -2028:int32] != 0x0000000000000000 l000000000001796C
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0000000000017964:
	branch (int64) Mem27[gp + -800:byte] != 0x0000000000000000 l00000000000179A8
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00000000000179A8:
	a1 = Mem27[gp + -1920:word64]
	fputs(gp + -800, a1)
// DataOut:
// DataOut (flags):
// SymbolicIn:

l000000000001796C:
	s0_118 = (int64) Mem27[gp + -2024:int32]
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0000000000017970:
	a1Out = a1
	a2Out = a2
	a3Out = a3
	a4Out = a4
	a6Out = a6
	return s0_118
// DataOut:
// DataOut (flags):
// SymbolicIn:

fn0000000000017924_exit:
// DataOut:
// DataOut (flags):
// SymbolicIn:



word64 fn0000000000017B40(word64 ra, word64 gp, word64 t1, word64 s0, word64 s1, word64 a0, word64 a1, word64 a2, word64 a3, word64 a4, word64 s2, word64 s3, word64 s4, word64 s5, word64 s6, word64 s7, word64 fa3, word64 fa4, word64 fa5, ptr64 & s6Out)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  a0:[0..63] a1:[0..63] a2:[0..63] a3:[0..63] a4:[0..63] fa3:[0..63] fa4:[0..63] fa5:[0..63] gp:[0..63] ra:[0..63] s0:[0..63] s1:[0..63] s2:[0..63] s3:[0..63] s4:[0..63] s5:[0..63] s6:[0..63] s7:[0..63] t1:[0..63]
// LiveOut: gp s6
// Trashed: a0 a1 a2 a3 a4 a5 a6 fa3 fa4 fa5 gp ra s0 s1 s2 s3 s4 s5 s6 s7 t1
// Preserved: sp
fn0000000000017B40_entry:
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0000000000017B40:
	word64 a1_34
	word64 a2_35
	word64 a3_36
	word64 a4_37
	word64 a6_39
	branch fn0000000000017924(gp, out a1_34, out a2_35, out a3_36, out a4_37, out a6_39) == 0x0000000000000000 l0000000000017BB0
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0000000000017BB0:
	word64 a3_42
	word64 a4_43
	word64 a0_41 = fn00000000000182B4(a0, out a3_42, out a4_43)
	word64 a5_45 = Mem21[gp + -1944:word64]
	word64 sp_47
	word64 s0_48
	word64 s1_49
	word64 s2_50
	word64 s3_51
	word64 s4_52
	word64 ra_53
	word64 s5_54
	word64 s6_55
	word64 s7_56
	word64 a2_59
	word64 a3_60
	word64 a4_61
	word64 gp_63
	word64 fa4_65
	word64 fa5_67
	word64 t1_69
	word64 fa3_71
	word64 a6_72
	call a5_45 (retsize: 0;)
		uses: a0:a0_41,a1:a1_34,a2:a2_35,a3:a3_42,a4:a4_43,a5:a5_45,a6:a6_39,fa3:fa3,fa4:fa4,fa5:fa5,gp:gp,ra:ra,s0:a0,s1:a3,s2:a2,s3:a1,s4:a4,s5:s5,s6:s6,s7:a0_41,sp:fp + -80,Stack +0008:s7,Stack +0010:s6,Stack +0018:s5,Stack +0020:s4,Stack +0028:s3,Stack +0030:s2,Stack +0038:s1,Stack +0040:s0,Stack +0048:ra,t1:t1
		defs: a2:a2_59,a3:a3_60,a4:a4_61,a6:a6_72,fa3:fa3_71,fa4:fa4_65,fa5:fa5_67,gp:gp_63,ra:ra_53,s0:s0_48,s1:s1_49,s2:s2_50,s3:s3_51,s4:s4_52,s5:s5_54,s6:s6_55,s7:s7_56,sp:sp_47,t1:t1_69
	word64 a5_73 = Mem21[gp_63 + -1952:word64]
	word64 a0_86
	word64 gp_237
	word64 sp_209
	word64 s1_212
	word64 s2_214
	word64 s3_216
	word64 s4_218
	word64 ra_220
	word64 s5_222
	word64 s6_224
	word64 s7_226
	word64 a2_231
	word64 a3_233
	word64 a4_235
	word64 fa4_239
	word64 fa5_241
	word64 t1_243
	word64 fa3_245
	word64 a6_247
	call a5_73 (retsize: 0;)
		uses: a0:1,a1:16,a2:a2_59,a3:a3_60,a4:a4_61,a5:a5_73,a6:a6_72,fa3:fa3_71,fa4:fa4_65,fa5:fa5_67,gp:gp_63,ra:ra_53,s0:s0_48,s1:s1_49,s2:s2_50,s3:s3_51,s4:s4_52,s5:s5_54,s6:s6_55,s7:s7_56,sp:sp_47,Stack +FFFFFFB8:s7,Stack +FFFFFFC0:s6,Stack +FFFFFFC8:s5,Stack +FFFFFFD0:s4,Stack +FFFFFFD8:s3,Stack +FFFFFFE0:s2,Stack +FFFFFFE8:s1,Stack +FFFFFFF0:s0,Stack +FFFFFFF8:ra,t1:t1_69
		defs: a0:a0_86,a2:a2_88,a3:a3_89,a4:a4_90,a6:a6_97,fa3:fa3_96,fa4:fa4_93,fa5:fa5_94,gp:gp_92,ra:ra_82,s1:s1_78,s2:s2_79,s3:s3_80,s4:s4_81,s5:s5_83,s6:s6_84,s7:s7_85,sp:sp_76,t1:t1_95
	word64 s0_210 = a0_86
	branch a0_86 == 0x0000000000000000 l0000000000017C3C
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0000000000017BDC:
	word64 a5_99 = Mem21[gp_237 + -1992:word64]
	word64 a4_100 = 1
	Mem102[a0_86 + 76:word32] = (word32) a4_100
	word64 sp_104
	word64 s0_105
	word64 s1_106
	word64 s2_107
	word64 s3_108
	word64 s4_109
	word64 ra_110
	word64 s5_111
	word64 s7_113
	word64 a0_114
	word64 a2_116
	word64 a3_117
	word64 a4_118
	word64 fa4_121
	word64 fa5_122
	word64 t1_123
	word64 fa3_124
	word64 a6_125
	call a5_99 (retsize: 0;)
		uses: a0:a0_86,a1:s7_85 << 0x00000000 >>u 0x00000000,a2:a2_88,a3:a3_89,a4:a4_100,a5:a5_99,a6:a6_97,fa3:fa3_96,fa4:fa4_93,fa5:fa5_94,gp:gp_92,ra:ra_82,s0:a0_86,s1:s1_78,s2:s2_79,s3:s3_80,s4:s4_81,s5:s5_83,s6:s6_84,s7:s7_85,sp:sp_76,Stack +FFFFFFB8:s7,Stack +FFFFFFC0:s6,Stack +FFFFFFC8:s5,Stack +FFFFFFD0:s4,Stack +FFFFFFD8:s3,Stack +FFFFFFE0:s2,Stack +FFFFFFE8:s1,Stack +FFFFFFF0:s0,Stack +FFFFFFF8:ra,t1:t1_95
		defs: a0:a0_114,a2:a2_116,a3:a3_117,a4:a4_118,a6:a6_125,fa3:fa3_124,fa4:fa4_121,fa5:fa5_122,gp:gp_120,ra:ra_110,s0:s0_105,s1:s1_106,s2:s2_107,s3:s3_108,s4:s4_109,s5:s5_111,s7:s7_113,sp:sp_104,t1:t1_123
	branch a0_114 < 0x0000000000000000 l0000000000017B84
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0000000000017BFC:
	word64 a5_127 = Mem102[gp + -1960:word64]
	word64 s0_131
	word64 s1_132
	word64 s2_133
	word64 s3_134
	word64 s4_135
	word64 ra_136
	word64 s5_137
	word64 s6_138
	word64 s7_139
	word64 a0_140
	word64 a1_141
	word64 a2_142
	word64 a3_143
	word64 a4_144
	word64 gp_146
	word64 fa4_147
	word64 fa5_148
	word64 t1_149
	word64 fa3_150
	word64 a6_151
	word64 sp_130
	call a5_127 (retsize: 0;)
		uses: a0:s0_105,a1:a0_114,a2:a2_116,a3:a3_117,a4:a4_118,a5:a5_127,a6:a6_125,fa3:fa3_124,fa4:fa4_121,fa5:fa5_122,gp:gp_120,ra:ra_110,s0:s0_105,s1:s1_106,s2:s2_107,s3:s3_108,s4:s4_109,s5:s5_111,s6:a0_114,s7:s7_113,sp:sp_104,Stack +FFFFFFB8:s7,Stack +FFFFFFC0:s6,Stack +FFFFFFC8:s5,Stack +FFFFFFD0:s4,Stack +FFFFFFD8:s3,Stack +FFFFFFE0:s2,Stack +FFFFFFE8:s1,Stack +FFFFFFF0:s0,Stack +FFFFFFF8:ra,t1:t1_123
		defs: a0:a0_140,a1:a1_141,a2:a2_142,a3:a3_143,a4:a4_144,a6:a6_151,fa3:fa3_150,fa4:fa4_147,fa5:fa5_148,gp:gp_146,ra:ra_136,s0:s0_131,s1:s1_132,s2:s2_133,s3:s3_134,s4:s4_135,s5:s5_137,s6:s6_138,s7:s7_139,sp:sp_130,t1:t1_149
	branch a0_140 == 0x0000000000000000 l0000000000017C18
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0000000000017C10:
	Mem154[s3_134:word64] = __strdup(a0_140)
	sp_130 = sp_130 + 0xFFFFFFFFFFFFFFF8
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0000000000017C18:
	word64 a5_157 = Mem156[gp_146 + -1968:word64]
	word64 s0_163
	word64 s1_165
	word64 s2_167
	word64 s3_169
	word64 s4_171
	word64 ra_173
	word64 s5_175
	word64 s6_176
	word64 s7_178
	word64 a0_179
	word64 a1_181
	word64 a2_183
	word64 a3_185
	word64 a4_187
	word64 gp_189
	word64 fa4_191
	word64 fa5_193
	word64 t1_195
	word64 fa3_197
	word64 a6_199
	word64 sp_161
	call a5_157 (retsize: 0;)
		uses: a0:s6_138,a1:a1_141,a2:a2_142,a3:a3_143,a4:a4_144,a5:a5_157,a6:a6_151,fa3:fa3_150,fa4:fa4_147,fa5:fa5_148,gp:gp_146,ra:ra_136,s0:s0_131,s1:s1_132,s2:s2_133,s3:s3_134,s4:s4_135,s5:s5_137,s6:s6_138,s7:s7_139,sp:sp_160,Stack +FFFFFFB8:s7,Stack +FFFFFFC0:s6,Stack +FFFFFFC8:s5,Stack +FFFFFFD0:s4,Stack +FFFFFFD8:s3,Stack +FFFFFFE0:s2,Stack +FFFFFFE8:s1,Stack +FFFFFFF0:s0,Stack +FFFFFFF8:ra,t1:t1_149
		defs: a0:a0_179,a1:a1_181,a2:a2_183,a3:a3_185,a4:a4_187,a6:a6_199,fa3:fa3_197,fa4:fa4_191,fa5:fa5_193,gp:gp_189,ra:ra_173,s0:s0_163,s1:s1_165,s2:s2_167,s3:s3_169,s4:s4_171,s5:s5_175,s6:s6_176,s7:s7_178,sp:sp_161,t1:t1_195
	branch a0_179 == 0x0000000000000000 l0000000000017C30
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0000000000017C28:
	Mem202[s2_167:word64] = __strdup(a0_179)
	sp_161 = sp_161 + 0xFFFFFFFFFFFFFFF8
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0000000000017C30:
	word64 a5_205 = Mem204[gp_189 + -1976:word64]
	call a5_205 (retsize: 0;)
		uses: a0:s0_163,a1:a1_181,a2:a2_183,a3:a3_185,a4:a4_187,a5:a5_205,a6:a6_199,fa3:fa3_197,fa4:fa4_191,fa5:fa5_193,gp:gp_189,ra:ra_173,s0:s0_163,s1:s1_165,s2:s2_167,s3:s3_169,s4:s4_171,s5:s5_175,s6:s6_176,s7:s7_178,sp:sp_208,Stack +FFFFFFB8:s7,Stack +FFFFFFC0:s6,Stack +FFFFFFC8:s5,Stack +FFFFFFD0:s4,Stack +FFFFFFD8:s3,Stack +FFFFFFE0:s2,Stack +FFFFFFE8:s1,Stack +FFFFFFF0:s0,Stack +FFFFFFF8:ra,t1:t1_195
		defs: a2:a2_231,a3:a3_233,a4:a4_235,a6:a6_247,fa3:fa3_245,fa4:fa4_239,fa5:fa5_241,gp:gp_237,ra:ra_220,s0:s0_210,s1:s1_212,s2:s2_214,s3:s3_216,s4:s4_218,s5:s5_222,s6:s6_224,s7:s7_226,sp:sp_209,t1:t1_243
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0000000000017C3C:
	word64 a5_250 = Mem249[gp_237 + -1952:word64]
	word64 a4_280
	word64 s7_272
	word64 sp_254
	word64 s1_258
	word64 s2_260
	word64 s3_262
	word64 s4_264
	word64 ra_266
	word64 s5_268
	word64 s6_270
	word64 a0_273
	word64 a2_276
	word64 a3_278
	word64 fa4_284
	word64 fa5_286
	word64 t1_288
	word64 fa3_290
	word64 a6_292
	call a5_250 (retsize: 0;)
		uses: a0:2,a1:16,a2:a2_275,a3:a3_277,a4:a4_279,a5:a5_250,a6:a6_291,fa3:fa3_289,fa4:fa4_283,fa5:fa5_285,gp:gp_248,ra:ra_265,s0:s0_255,s1:s1_257,s2:s2_259,s3:s3_261,s4:s4_263,s5:s5_267,s6:s6_269,s7:s7_271,sp:sp_253,Stack +FFFFFFB8:s7,Stack +FFFFFFC0:s6,Stack +FFFFFFC8:s5,Stack +FFFFFFD0:s4,Stack +FFFFFFD8:s3,Stack +FFFFFFE0:s2,Stack +FFFFFFE8:s1,Stack +FFFFFFF0:s0,Stack +FFFFFFF8:ra,t1:t1_287
		defs: a0:a0_273,a2:a2_276,a3:a3_278,a4:a4_280,a6:a6_292,fa3:fa3_290,fa4:fa4_284,fa5:fa5_286,gp:gp_282,ra:ra_266,s1:s1_258,s2:s2_260,s3:s3_262,s4:s4_264,s5:s5_268,s6:s6_270,s7:s7_272,sp:sp_254,t1:t1_288
	word64 s0_293 = a0_273
	branch a0_273 == 0x0000000000000000 l0000000000017CF4
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0000000000017CF4:
	word64 a5_294 = Mem249[gp + -1952:word64]
	call a5_294 (retsize: 0;)
		uses: a0:6,a1:16,a2:a2_276,a3:a3_278,a4:a4_280,a5:a5_294,a6:a6_292,fa3:fa3_290,fa4:fa4_284,fa5:fa5_286,gp:gp_282,ra:ra_266,s0:a0_273,s1:s1_258,s2:s2_260,s3:s3_262,s4:s4_264,s5:s5_268,s6:s6_270,s7:s7_272,sp:sp_254,Stack +FFFFFFB8:s7,Stack +FFFFFFC0:s6,Stack +FFFFFFC8:s5,Stack +FFFFFFD0:s4,Stack +FFFFFFD8:s3,Stack +FFFFFFE0:s2,Stack +FFFFFFE8:s1,Stack +FFFFFFF0:s0,Stack +FFFFFFF8:ra,t1:t1_288
		defs: a0:a0_307,a2:a2_309,a3:a3_310,a6:a6_318,fa3:fa3_317,fa4:fa4_314,fa5:fa5_315,gp:gp_313,ra:ra_303,s1:s1_299,s2:s2_300,s3:s3_301,s4:s4_302,s5:s5_304,s6:s6_305,s7:s7_306,sp:sp_297,t1:t1_316
	s0_293 = a0_273
	branch a0_273 != 0x0000000000000000 l0000000000017C54
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0000000000017D0C:
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0000000000017C54:
	word64 a5_322 = Mem249[gp + -1984:word64]
	word64 a4_323 = 1
	Mem327[s0_293 + 76:word32] = (word32) a4_323
	word64 s0_331
	word64 s1_333
	word64 s4_339
	word64 a0_348
	word64 a3_353
	word64 a4_354
	word64 gp_356
	word64 a6_366
	word64 sp_330
	word64 a1_349
	word64 a2_351
	word64 a5_355
	word64 fa4_358
	word64 fa5_360
	word64 fa3_364
	call a5_322 (retsize: 0;)
		uses: a0:a0_347,a1:s7_324 << 0x00000000 >>u 0x00000000,a2:a2_350,a3:a3_352,a4:a4_323,a5:a5_322,a6:a6_365,fa3:fa3_363,fa4:fa4_357,fa5:fa5_359,gp:gp_320,ra:ra_340,s0:s0_326,s1:s1_332,s2:s2_334,s3:s3_336,s4:s4_338,s5:s5_342,s6:s6_344,s7:s7_324,sp:sp_329,Stack +FFFFFFB8:s7,Stack +FFFFFFC0:s6,Stack +FFFFFFC8:s5,Stack +FFFFFFD0:s4,Stack +FFFFFFD8:s3,Stack +FFFFFFE0:s2,Stack +FFFFFFE8:s1,Stack +FFFFFFF0:s0,Stack +FFFFFFF8:ra,t1:t1_361
		defs: a0:a0_348,a1:a1_349,a2:a2_351,a3:a3_353,a4:a4_354,a5:a5_355,a6:a6_366,fa3:fa3_364,fa4:fa4_358,fa5:fa5_360,gp:gp_356,s0:s0_331,s1:s1_333,s4:s4_339,sp:sp_330
	branch a0_348 == 0x0000000000000000 l0000000000017C94
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0000000000017C74:
	word64 a0_368 = Mem327[a0_348 + 32:word64]
	branch a0_368 == 0x0000000000000000 l0000000000017C84
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0000000000017C7C:
	Mem371[s1_333:word64] = __strdup(a0_368)
	sp_330 = sp_330 + 0xFFFFFFFFFFFFFFF8
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0000000000017C84:
	fa4_358 = Mem373[a0_348 + 52:real32]
	fa5_360 = (real32) 0x0000000000000000
	a5_355 = (word64) ((real32) fa4_358 == (real32) fa5_360)
	branch a5_355 == 0x0000000000000000 l0000000000017CC8
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0000000000017CC8:
	fa5_360 = (real64) Mem373[a0_348 + 48:real32]
	a1_349 = 1
	__asprintf_chk(s4_339, a1_349, 0x0000000000012B80, 0x00000000)
	fa4_358 = (real64) a4_354
	a2_351 = 0x0000000000012B80
	fa3_364 = (real64) a5_355
	sp_330 = sp_330 + 0xFFFFFFFFFFFFFFF8
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0000000000017C94:
	word64 t1_406 = Mem394[gp_356 + -1976:word64]
	word64 s6_416
	word64 gp_432
	call t1_406 (retsize: 0;)
		uses: a0:s0_331,a1:a1_419,a2:a2_422,a3:a3_353,a4:a4_354,a5:a5_430,a6:a6_366,fa3:fa3_438,fa4:fa4_433,fa5:fa5_435,gp:gp_356,ra:Mem394[sp_393 + 72:word64],s0:Mem394[sp_393 + 64:word64],s1:Mem394[sp_393 + 56:word64],s2:Mem394[sp_393 + 48:word64],s3:Mem394[sp_393 + 40:word64],s4:Mem394[sp_393 + 32:word64],s5:Mem394[sp_393 + 24:word64],s6:Mem394[sp_393 + 16:word64],s7:Mem394[sp_393 + 8:word64],sp:sp_393 + 80,Stack +FFFFFFB8:s7,Stack +FFFFFFC0:s6,Stack +FFFFFFC8:s5,Stack +FFFFFFD0:s4,Stack +FFFFFFD8:s3,Stack +FFFFFFE0:s2,Stack +FFFFFFE8:s1,Stack +FFFFFFF0:s0,Stack +FFFFFFF8:ra,t1:t1_406
		defs: gp:gp_432,s6:s6_416
	s6Out = s6_416
	return gp_432
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0000000000017B84:
	s6Out = s6
	return gp
// DataOut:
// DataOut (flags):
// SymbolicIn:

fn0000000000017B40_exit:
// DataOut:
// DataOut (flags):
// SymbolicIn:



word64 fn0000000000017D10(word64 ra, word64 gp, word64 t1, word64 s0, word64 s1, word64 a0, word64 a1, word64 a2, word64 a3, word64 a4, word64 s2, word64 s3, word64 s4, word64 s5, word64 s6, word64 s7, word64 fa3, word64 fa4, word64 fa5, ptr64 & s0Out, ptr64 & s3Out, ptr64 & s6Out)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  a0:[0..63] a1:[0..63] a2:[0..63] a3:[0..63] a4:[0..63] fa3:[0..63] fa4:[0..63] fa5:[0..63] gp:[0..63] ra:[0..63] s0:[0..63] s1:[0..63] s2:[0..63] s3:[0..63] s4:[0..63] s5:[0..63] s6:[0..63] s7:[0..63] t1:[0..63]
// LiveOut: gp s0 s3 s6
// Trashed: a0 a1 a2 a3 a4 a5 a6 fa3 fa4 fa5 gp ra s0 s1 s2 s3 s4 s5 s6 s7 t1
// Preserved: sp
fn0000000000017D10_entry:
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0000000000017D10:
	word64 a1_34
	word64 a2_35
	word64 a3_36
	word64 a4_37
	word64 a6_39
	word64 a0_33 = fn0000000000017924(gp, out a1_34, out a2_35, out a3_36, out a4_37, out a6_39)
	branch a0_33 == 0x0000000000000000 l0000000000017D80
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0000000000017D80:
	word64 a5_40 = Mem21[gp + -1944:word64]
	word64 sp_41
	word64 s0_42
	word64 s2_43
	word64 s3_44
	word64 s4_45
	word64 s5_46
	word64 ra_47
	word64 s1_48
	word64 s6_49
	word64 s7_50
	word64 a2_53
	word64 a3_54
	word64 a4_55
	word64 gp_57
	word64 a6_58
	word64 fa4_60
	word64 fa5_62
	word64 t1_64
	word64 fa3_66
	call a5_40 (retsize: 0;)
		uses: a0:a0_33,a1:a1_34,a2:a2_35,a3:a3_36,a4:a4_37,a5:a5_40,a6:a6_39,fa3:fa3,fa4:fa4,fa5:fa5,gp:gp,ra:ra,s0:a0,s1:s1,s2:a3,s3:a2,s4:a1,s5:a4,s6:s6,s7:s7,sp:fp + -80,Stack +0008:s7,Stack +0010:s6,Stack +0018:s5,Stack +0020:s4,Stack +0028:s3,Stack +0030:s2,Stack +0038:s1,Stack +0040:s0,Stack +0048:ra,t1:t1
		defs: a2:a2_53,a3:a3_54,a4:a4_55,a6:a6_58,fa3:fa3_66,fa4:fa4_60,fa5:fa5_62,gp:gp_57,ra:ra_47,s0:s0_42,s1:s1_48,s2:s2_43,s3:s3_44,s4:s4_45,s5:s5_46,s6:s6_49,s7:s7_50,sp:sp_41,t1:t1_64
	word64 a5_67 = Mem21[gp_57 + -1952:word64]
	word64 a0_80
	word64 gp_237
	word64 sp_209
	word64 s0_211
	word64 s2_213
	word64 s3_215
	word64 s4_217
	word64 s5_219
	word64 ra_221
	word64 s6_224
	word64 s7_226
	word64 a2_231
	word64 a3_233
	word64 a4_235
	word64 a6_239
	word64 fa4_241
	word64 fa5_243
	word64 t1_245
	word64 fa3_247
	call a5_67 (retsize: 0;)
		uses: a0:12,a1:16,a2:a2_53,a3:a3_54,a4:a4_55,a5:a5_67,a6:a6_58,fa3:fa3_66,fa4:fa4_60,fa5:fa5_62,gp:gp_57,ra:ra_47,s0:s0_42,s1:s1_48,s2:s2_43,s3:s3_44,s4:s4_45,s5:s5_46,s6:s6_49,s7:s7_50,sp:sp_41,Stack +FFFFFFB8:s7,Stack +FFFFFFC0:s6,Stack +FFFFFFC8:s5,Stack +FFFFFFD0:s4,Stack +FFFFFFD8:s3,Stack +FFFFFFE0:s2,Stack +FFFFFFE8:s1,Stack +FFFFFFF0:s0,Stack +FFFFFFF8:ra,t1:t1_64
		defs: a0:a0_80,a2:a2_82,a3:a3_83,a4:a4_84,a6:a6_87,fa3:fa3_91,fa4:fa4_88,fa5:fa5_89,gp:gp_86,ra:ra_76,s0:s0_71,s2:s2_72,s3:s3_73,s4:s4_74,s5:s5_75,s6:s6_78,s7:s7_79,sp:sp_70,t1:t1_90
	word64 s1_222 = a0_80
	branch a0_80 == 0x0000000000000000 l0000000000017E18
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0000000000017DA0:
	word64 a4_93 = (int64) Mem21[s0_211 + 4:uint32]
	word64 a5_94 = (int64) Mem21[s0_211 + 12:uint32]
	word64 a1_95 = (int64) Mem21[s0_211:uint32]
	word64 a2_96 = (int64) Mem21[s0_211 + 8:uint32]
	word64 a3_97 = Mem21[gp_237 + -2000:word64]
	word64 a6_100 = 1
	Mem101[a0_80 + 76:word32] = (word32) a6_100
	word64 sp_104
	word64 s0_105
	word64 s2_106
	word64 s3_107
	word64 s4_108
	word64 s5_109
	word64 ra_110
	word64 s1_111
	word64 s6_112
	word64 a0_114
	word64 a2_116
	word64 a3_117
	word64 a4_118
	word64 a6_121
	word64 fa4_122
	word64 fa5_123
	word64 t1_124
	word64 fa3_125
	call a3_97 (retsize: 0;)
		uses: a0:a0_80,a1:a4_93 << 0x00000000 | a1_95,a2:a5_94 << 0x00000000 | a2_96,a3:a3_97,a4:a4_93 << 0x00000000,a5:a5_94 << 0x00000000,a6:a6_100,fa3:fa3_91,fa4:fa4_88,fa5:fa5_89,gp:gp_86,ra:ra_76,s0:s0_71,s1:a0_80,s2:s2_72,s3:s3_73,s4:s4_74,s5:s5_75,s6:s6_78,s7:s7_79,sp:sp_70,Stack +FFFFFFB8:s7,Stack +FFFFFFC0:s6,Stack +FFFFFFC8:s5,Stack +FFFFFFD0:s4,Stack +FFFFFFD8:s3,Stack +FFFFFFE0:s2,Stack +FFFFFFE8:s1,Stack +FFFFFFF0:s0,Stack +FFFFFFF8:ra,t1:t1_90
		defs: a0:a0_114,a2:a2_116,a3:a3_117,a4:a4_118,a6:a6_121,fa3:fa3_125,fa4:fa4_122,fa5:fa5_123,gp:gp_120,ra:ra_110,s0:s0_105,s1:s1_111,s2:s2_106,s3:s3_107,s4:s4_108,s5:s5_109,s6:s6_112,sp:sp_104,t1:t1_124
	branch a0_114 < 0x0000000000000000 l0000000000017D54
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0000000000017DD8:
	word64 a5_127 = Mem101[gp + -1960:word64]
	word64 s0_131
	word64 s2_132
	word64 s3_133
	word64 s4_134
	word64 s5_135
	word64 ra_136
	word64 s1_137
	word64 s6_138
	word64 s7_139
	word64 a0_140
	word64 a1_141
	word64 a2_142
	word64 a3_143
	word64 a4_144
	word64 gp_146
	word64 a6_147
	word64 fa4_148
	word64 fa5_149
	word64 t1_150
	word64 fa3_151
	word64 sp_130
	call a5_127 (retsize: 0;)
		uses: a0:s1_111,a1:a0_114,a2:a2_116,a3:a3_117,a4:a4_118,a5:a5_127,a6:a6_121,fa3:fa3_125,fa4:fa4_122,fa5:fa5_123,gp:gp_120,ra:ra_110,s0:s0_105,s1:s1_111,s2:s2_106,s3:s3_107,s4:s4_108,s5:s5_109,s6:s6_112,s7:a0_114,sp:sp_104,Stack +FFFFFFB8:s7,Stack +FFFFFFC0:s6,Stack +FFFFFFC8:s5,Stack +FFFFFFD0:s4,Stack +FFFFFFD8:s3,Stack +FFFFFFE0:s2,Stack +FFFFFFE8:s1,Stack +FFFFFFF0:s0,Stack +FFFFFFF8:ra,t1:t1_124
		defs: a0:a0_140,a1:a1_141,a2:a2_142,a3:a3_143,a4:a4_144,a6:a6_147,fa3:fa3_151,fa4:fa4_148,fa5:fa5_149,gp:gp_146,ra:ra_136,s0:s0_131,s1:s1_137,s2:s2_132,s3:s3_133,s4:s4_134,s5:s5_135,s6:s6_138,s7:s7_139,sp:sp_130,t1:t1_150
	branch a0_140 == 0x0000000000000000 l0000000000017DF4
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0000000000017DEC:
	Mem154[s4_134:word64] = __strdup(a0_140)
	sp_130 = sp_130 + 0xFFFFFFFFFFFFFFF8
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0000000000017DF4:
	word64 a5_157 = Mem156[gp_146 + -1968:word64]
	word64 s0_163
	word64 s2_165
	word64 s3_167
	word64 s4_169
	word64 s5_171
	word64 ra_173
	word64 s1_175
	word64 s6_177
	word64 s7_178
	word64 a0_179
	word64 a1_181
	word64 a2_183
	word64 a3_185
	word64 a4_187
	word64 gp_189
	word64 a6_191
	word64 fa4_193
	word64 fa5_195
	word64 t1_197
	word64 fa3_199
	word64 sp_161
	call a5_157 (retsize: 0;)
		uses: a0:s7_139,a1:a1_141,a2:a2_142,a3:a3_143,a4:a4_144,a5:a5_157,a6:a6_147,fa3:fa3_151,fa4:fa4_148,fa5:fa5_149,gp:gp_146,ra:ra_136,s0:s0_131,s1:s1_137,s2:s2_132,s3:s3_133,s4:s4_134,s5:s5_135,s6:s6_138,s7:s7_139,sp:sp_160,Stack +FFFFFFB8:s7,Stack +FFFFFFC0:s6,Stack +FFFFFFC8:s5,Stack +FFFFFFD0:s4,Stack +FFFFFFD8:s3,Stack +FFFFFFE0:s2,Stack +FFFFFFE8:s1,Stack +FFFFFFF0:s0,Stack +FFFFFFF8:ra,t1:t1_150
		defs: a0:a0_179,a1:a1_181,a2:a2_183,a3:a3_185,a4:a4_187,a6:a6_191,fa3:fa3_199,fa4:fa4_193,fa5:fa5_195,gp:gp_189,ra:ra_173,s0:s0_163,s1:s1_175,s2:s2_165,s3:s3_167,s4:s4_169,s5:s5_171,s6:s6_177,s7:s7_178,sp:sp_161,t1:t1_197
	branch a0_179 == 0x0000000000000000 l0000000000017E0C
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0000000000017E04:
	Mem202[s3_167:word64] = __strdup(a0_179)
	sp_161 = sp_161 + 0xFFFFFFFFFFFFFFF8
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0000000000017E0C:
	word64 a5_205 = Mem204[gp_189 + -1976:word64]
	call a5_205 (retsize: 0;)
		uses: a0:s1_175,a1:a1_181,a2:a2_183,a3:a3_185,a4:a4_187,a5:a5_205,a6:a6_191,fa3:fa3_199,fa4:fa4_193,fa5:fa5_195,gp:gp_189,ra:ra_173,s0:s0_163,s1:s1_175,s2:s2_165,s3:s3_167,s4:s4_169,s5:s5_171,s6:s6_177,s7:s7_178,sp:sp_208,Stack +FFFFFFB8:s7,Stack +FFFFFFC0:s6,Stack +FFFFFFC8:s5,Stack +FFFFFFD0:s4,Stack +FFFFFFD8:s3,Stack +FFFFFFE0:s2,Stack +FFFFFFE8:s1,Stack +FFFFFFF0:s0,Stack +FFFFFFF8:ra,t1:t1_197
		defs: a2:a2_231,a3:a3_233,a4:a4_235,a6:a6_239,fa3:fa3_247,fa4:fa4_241,fa5:fa5_243,gp:gp_237,ra:ra_221,s0:s0_211,s1:s1_222,s2:s2_213,s3:s3_215,s4:s4_217,s5:s5_219,s6:s6_224,s7:s7_226,sp:sp_209,t1:t1_245
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0000000000017E18:
	word64 a5_250 = Mem249[gp_237 + -1952:word64]
	word64 a2_276
	word64 a3_278
	word64 a4_280
	word64 a6_284
	word64 s0_256
	word64 sp_254
	word64 s2_258
	word64 s3_260
	word64 s4_262
	word64 s5_264
	word64 ra_266
	word64 s6_270
	word64 s7_272
	word64 a0_273
	word64 fa4_286
	word64 fa5_288
	word64 t1_290
	word64 fa3_292
	call a5_250 (retsize: 0;)
		uses: a0:30,a1:16,a2:a2_275,a3:a3_277,a4:a4_279,a5:a5_250,a6:a6_283,fa3:fa3_291,fa4:fa4_285,fa5:fa5_287,gp:gp_248,ra:ra_265,s0:s0_255,s1:s1_267,s2:s2_257,s3:s3_259,s4:s4_261,s5:s5_263,s6:s6_269,s7:s7_271,sp:sp_253,Stack +FFFFFFB8:s7,Stack +FFFFFFC0:s6,Stack +FFFFFFC8:s5,Stack +FFFFFFD0:s4,Stack +FFFFFFD8:s3,Stack +FFFFFFE0:s2,Stack +FFFFFFE8:s1,Stack +FFFFFFF0:s0,Stack +FFFFFFF8:ra,t1:t1_289
		defs: a0:a0_273,a2:a2_276,a3:a3_278,a4:a4_280,a6:a6_284,fa3:fa3_292,fa4:fa4_286,fa5:fa5_288,gp:gp_282,ra:ra_266,s0:s0_256,s2:s2_258,s3:s3_260,s4:s4_262,s5:s5_264,s6:s6_270,s7:s7_272,sp:sp_254,t1:t1_290
	word64 s1_293 = a0_273
	branch a0_273 == 0x0000000000000000 l0000000000017EE8
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0000000000017EE8:
	word64 a5_294 = Mem249[gp + -1952:word64]
	call a5_294 (retsize: 0;)
		uses: a0:31,a1:16,a2:a2_276,a3:a3_278,a4:a4_280,a5:a5_294,a6:a6_284,fa3:fa3_292,fa4:fa4_286,fa5:fa5_288,gp:gp_282,ra:ra_266,s0:s0_256,s1:a0_273,s2:s2_258,s3:s3_260,s4:s4_262,s5:s5_264,s6:s6_270,s7:s7_272,sp:sp_254,Stack +FFFFFFB8:s7,Stack +FFFFFFC0:s6,Stack +FFFFFFC8:s5,Stack +FFFFFFD0:s4,Stack +FFFFFFD8:s3,Stack +FFFFFFE0:s2,Stack +FFFFFFE8:s1,Stack +FFFFFFF0:s0,Stack +FFFFFFF8:ra,t1:t1_290
		defs: a0:a0_307,fa3:fa3_318,fa4:fa4_315,fa5:fa5_316,gp:gp_313,ra:ra_303,s0:s0_298,s2:s2_299,s3:s3_300,s4:s4_301,s5:s5_302,s6:s6_305,s7:s7_306,sp:sp_297,t1:t1_317
	s1_293 = a0_273
	branch a0_273 != 0x0000000000000000 l0000000000017E30
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0000000000017F00:
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0000000000017E30:
	word64 a4_322 = (int64) Mem249[s0_256 + 4:uint32]
	word64 a5_323 = (int64) Mem249[s0_256 + 12:uint32]
	word64 a1_324 = (int64) Mem249[s0_256:uint32]
	word64 a2_325 = (int64) Mem249[s0_256 + 8:uint32]
	word64 a3_327 = Mem249[gp + -2008:word64]
	word64 a6_330 = 1
	Mem332[s1_293 + 76:word32] = (word32) a6_330
	word64 s2_339
	word64 s5_345
	word64 s1_348
	word64 a0_354
	word64 a3_357
	word64 a4_358
	word64 gp_360
	word64 a6_361
	word64 sp_336
	word64 a1_355
	word64 a2_356
	word64 a5_359
	word64 fa4_363
	word64 fa5_365
	word64 fa3_369
	call a3_327 (retsize: 0;)
		uses: a0:a0_353,a1:a4_322 << 0x00000000 | a1_324,a2:a5_323 << 0x00000000 | a2_325,a3:a3_327,a4:a4_322 << 0x00000000,a5:a5_323 << 0x00000000,a6:a6_330,fa3:fa3_368,fa4:fa4_362,fa5:fa5_364,gp:gp_326,ra:ra_346,s0:s0_320,s1:s1_331,s2:s2_338,s3:s3_340,s4:s4_342,s5:s5_344,s6:s6_349,s7:s7_351,sp:sp_335,Stack +FFFFFFB8:s7,Stack +FFFFFFC0:s6,Stack +FFFFFFC8:s5,Stack +FFFFFFD0:s4,Stack +FFFFFFD8:s3,Stack +FFFFFFE0:s2,Stack +FFFFFFE8:s1,Stack +FFFFFFF0:s0,Stack +FFFFFFF8:ra,t1:t1_366
		defs: a0:a0_354,a1:a1_355,a2:a2_356,a3:a3_357,a4:a4_358,a5:a5_359,a6:a6_361,fa3:fa3_369,fa4:fa4_363,fa5:fa5_365,gp:gp_360,s1:s1_348,s2:s2_339,s5:s5_345,sp:sp_336
	branch a0_354 == 0x0000000000000000 l0000000000017E88
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0000000000017E68:
	word64 a0_371 = Mem332[a0_354 + 32:word64]
	branch a0_371 == 0x0000000000000000 l0000000000017E78
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0000000000017E70:
	Mem374[s2_339:word64] = __strdup(a0_371)
	sp_336 = sp_336 + 0xFFFFFFFFFFFFFFF8
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0000000000017E78:
	fa4_363 = Mem376[a0_354 + 52:real32]
	fa5_365 = (real32) 0x0000000000000000
	a5_359 = (word64) ((real32) fa4_363 == (real32) fa5_365)
	branch a5_359 == 0x0000000000000000 l0000000000017EBC
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0000000000017EBC:
	fa5_365 = (real64) Mem376[a0_354 + 48:real32]
	a1_355 = 1
	__asprintf_chk(s5_345, a1_355, 0x0000000000012B80, 0x00000000)
	fa4_363 = (real64) a4_358
	a2_356 = 0x0000000000012B80
	fa3_369 = (real64) a5_359
	sp_336 = sp_336 + 0xFFFFFFFFFFFFFFF8
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0000000000017E88:
	word64 t1_409 = Mem397[gp_360 + -1976:word64]
	word64 s0_412
	word64 s3_414
	word64 s6_419
	word64 gp_435
	call t1_409 (retsize: 0;)
		uses: a0:s1_348,a1:a1_422,a2:a2_425,a3:a3_357,a4:a4_358,a5:a5_433,a6:a6_361,fa3:fa3_444,fa4:fa4_439,fa5:fa5_441,gp:gp_360,ra:Mem397[sp_396 + 72:word64],s0:Mem397[sp_396 + 64:word64],s1:Mem397[sp_396 + 56:word64],s2:Mem397[sp_396 + 48:word64],s3:Mem397[sp_396 + 40:word64],s4:Mem397[sp_396 + 32:word64],s5:Mem397[sp_396 + 24:word64],s6:Mem397[sp_396 + 16:word64],s7:Mem397[sp_396 + 8:word64],sp:sp_396 + 80,Stack +FFFFFFB8:s7,Stack +FFFFFFC0:s6,Stack +FFFFFFC8:s5,Stack +FFFFFFD0:s4,Stack +FFFFFFD8:s3,Stack +FFFFFFE0:s2,Stack +FFFFFFE8:s1,Stack +FFFFFFF0:s0,Stack +FFFFFFF8:ra,t1:t1_409
		defs: gp:gp_435,s0:s0_412,s3:s3_414,s6:s6_419
	s0Out = s0_412
	s3Out = s3_414
	s6Out = s6_419
	return gp_435
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0000000000017D54:
	s0Out = s0
	s3Out = s3
	s6Out = s6
	return gp
// DataOut:
// DataOut (flags):
// SymbolicIn:

fn0000000000017D10_exit:
// DataOut:
// DataOut (flags):
// SymbolicIn:



word64 fn0000000000017F04(word64 gp, word64 a0, word64 a1, word64 a2, word64 a3, ptr64 & a0Out)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  a0:[0..63] a1:[0..63] a2:[0..63] a3:[0..63] gp:[0..63]
// LiveOut: a0 t1
// Trashed: a0 a1 a2 a3 a4 a5 a6 t1 t3
// Preserved: a7 ra s0 s1 s2 s3 s4 s5 s6 sp
fn0000000000017F04_entry:
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0000000000017F04:
	word64 a0_149
	word64 a0_121
	word64 a5_7 = Mem5[gp + -1936:word64]
	word64 a3_32
	word64 a4_233
	word64 t1_36 = (int64) (word32) (fn00000000000182B4(a0, out a3_32, out a4_233) >>u 8)
	branch a1 == 32 l0000000000018048
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0000000000018048:
	a0_121 = (uint64) (uint32) __asprintf_chk(fp + -80, 1, 0x0000000000012B88, 0x00000000)
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0000000000017F60:
	word64 a1_51 = 24
	branch a1 == a1_51 l0000000000018070
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0000000000018070:
	a0_121 = (uint64) (uint32) __asprintf_chk(fp + -80, 1, 0x0000000000012BA8, 0x00000000)
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0000000000017F68:
	word64 a0_61 = 16
	branch a1 == a0_61 l00000000000180D8
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00000000000180D8:
	a0_121 = (uint64) (uint32) __asprintf_chk(fp + -80, 1, 0x0000000000012BC0, 0x00000000)
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0000000000017F70:
	word64 a5_70 = 8
	branch a1 == a5_70 l00000000000180F8
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00000000000180F8:
	a0_121 = (uint64) (uint32) __asprintf_chk(fp + -80, 1, 0x0000000000012BD8, 0x00000000)
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0000000000017F78:
	branch a1_51 <u a1 l0000000000017FBC
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0000000000017FBC:
	word64 a4_235
	word64 a3_234
	fn00000000000182B4(a2, out a3_234, out a4_235)
	word64 a3_236
	word64 a4_237
	fn00000000000182B4(a3, out a3_236, out a4_237)
	a0_121 = (uint64) (uint32) __asprintf_chk(fp + -80, 1, 0x0000000000012BF0, 0x00000000)
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0000000000017F7C:
	branch a0_61 <u a1 l0000000000018094
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0000000000018094:
	word64 a3_238
	word64 a4_239
	fn00000000000182B4(a2, out a3_238, out a4_239)
	word64 a4_241
	word64 a3_240
	fn00000000000182B4(a3, out a3_240, out a4_241)
	a0_121 = (uint64) (uint32) __asprintf_chk(fp + -80, 1, 0x0000000000012C10, 0x00000000)
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0000000000017F80:
	branch a5_70 <u a1 l0000000000018008
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0000000000018008:
	word64 a3_242
	word64 a4_243
	fn00000000000182B4(a2, out a3_242, out a4_243)
	word64 a3_244
	word64 a4_245
	fn00000000000182B4(a3, out a3_244, out a4_245)
	a0_121 = (uint64) (uint32) __asprintf_chk(fp + -80, 1, 0x0000000000012C30, 0x00000000)
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0000000000017FF8:
	branch a0_121 == -1 l0000000000017F84
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0000000000018000:
	a0_149 = qwLoc58
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0000000000017F84:
	a0_149 = 0
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0000000000017F88:
	branch a5_7 != Mem29[gp + -1936:word64] l0000000000018114
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0000000000018114:
	__stack_chk_fail()
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0000000000017F94:
	a0Out = a0_149
	return t1_36
// DataOut:
// DataOut (flags):
// SymbolicIn:

fn0000000000017F04_exit:
// DataOut:
// DataOut (flags):
// SymbolicIn:



word64 fn0000000000018118(word64 gp, word64 a0, word64 a1)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  a0:[0..63] a1:[0..63] gp:[0..63]
// LiveOut: a0
// Trashed: a0 a4 a5 t4
// Preserved: ra s0 sp t5
fn0000000000018118_entry:
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0000000000018118:
	word64 a0_119
	word64 a5_7 = Mem5[gp + -1936:word64]
	branch (a1 & 3) != 0x0000000000000000 l00000000000182A8
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00000000000182A8:
	a0_119 = 0
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0000000000018134:
	word64 t5_16 = (int64) (word32) (a1 >>u 3)
	branch (a1 & 7) == 4 l0000000000018264
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0000000000018264:
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0000000000018144:
	branch t5_16 == 0x0000000000000000 l00000000000181FC
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00000000000181FC:
	word64 t4_21 = fp + -280 + (((a1 & 3) << 0x00000000) >>u 0x00000000)
	Mem24[t4_21 + 4:word16] = 0x7261
	Mem27[t4_21:word16] = 0x7069
	Mem30[t4_21 + 6:word16] = 0x6170
	Mem33[t4_21 + 2:word16] = 0x2E36
	Mem34[t4_21 + 8:word16] = 0x002E
	a0_119 = __strdup(fp + -280)
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0000000000018248:
	branch a5_7 != Mem38[gp + -1936:word64] l00000000000182B0
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00000000000182B0:
	__stack_chk_fail()
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0000000000018254:
	return a0_119
// DataOut:
// DataOut (flags):
// SymbolicIn:

fn0000000000018118_exit:
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0000000000018148:
	word64 a1_102 = (int64) ((word32) t5_16 + -1)
	word64 a4_104 = a1 & 3
	word64 t1_47 = 9
	word64 a7_48 = 46
	word64 t3_49 = -1
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0000000000018190:
	word64 a5_56 = (int64) Mem55[a0 + ((a1_102 << 0x00000000) >>u 0x00000000):byte]
	word64 a3_58 = (int64) ((word32) a4_104 + 1)
	word64 a6_60 = (a5_56 & 15) + 87
	branch t1_47 <u (a5_56 & 15) l00000000000181B4
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00000000000181B0:
	a6_60 = (a5_56 & 15) + 48
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00000000000181B4:
	Mem74[fp + -16 + ((a4_104 << 0x00000000) >>u 0x00000000) + 3832:byte] = (byte) a6_60
	Mem80[fp + -16 + ((a3_58 << 0x00000000) >>u 0x00000000) + 3832:byte] = (byte) a7_48
	word64 a2_81 = (int64) ((word32) a4_104 + 2)
	word64 a3_82 = (int64) ((word32) a4_104 + 3)
	word64 a6_83 = (a5_56 >>u 0x00000004) + 48
	branch t1_47 >=u a5_56 >>u 0x00000004 l0000000000018160
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00000000000181EC:
	a6_83 = (a5_56 >>u 0x00000004) + 87
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0000000000018160:
	Mem96[fp + -16 + ((a2_81 << 0x00000000) >>u 0x00000000) + 3832:byte] = (byte) a6_83
	Mem99[fp + -16 + ((a3_82 << 0x00000000) >>u 0x00000000) + 3832:byte] = (byte) a7_48
	a1_102 = (int64) ((word32) a1_102 + -1)
	a4_104 = (int64) ((word32) a4_104 + 4)
	branch a1_102 == t3_49 l00000000000181F4
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00000000000181F4:
// DataOut:
// DataOut (flags):
// SymbolicIn:



word64 fn00000000000182B4(word64 a0, ptr64 & a3Out, ptr64 & a4Out)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  a0:[0..31]
// LiveOut: a0 a3 a4
// Trashed: a0 a3 a4 a5
// Preserved: sp
fn00000000000182B4_entry:
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00000000000182B4:
	word64 a3_6 = (int64) (word32) (a0 >>u 24) | (int64) ((word32) (a0 << 0x0000000000000018))
	a3Out = a3_6
	word64 a4_11 = (int64) (word32) ((a0 & 0x0000000000FF0000) >> 0x00000008)
	a4Out = a4_11
	return a3_6 | a4_11 | (int64) ((word32) ((a0 & 65280) << 0x0000000000000008))
// DataOut:
// DataOut (flags):
// SymbolicIn:

fn00000000000182B4_exit:
// DataOut:
// DataOut (flags):
// SymbolicIn:



void fn00000000000182E8(word64 ra, word64 s0, word64 s1, word64 a0, word64 a1, word64 a2, word64 s2, word64 s3, word64 s4, word64 s5)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  a0:[0..63] a1:[0..63] a2:[0..63] ra:[0..63] s0:[0..63] s1:[0..63] s2:[0..63] s3:[0..63] s4:[0..63] s5:[0..63]
// LiveOut:
// Trashed: a0 a1 a2 a5
// Preserved: ra s0 s1 s2 s3 s4 s5 sp
fn00000000000182E8_entry:
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00000000000182E8:
	word64 s2_12 = 0x0000000000019E20 - 0x0000000000019E18
	word64 sp_3 = fp + -64
	word64 s0_31 = 0x0000000000019E18
	word64 s2_23 = s2_12 >> 0x00000003
	branch s2_12 >> 0x00000003 == 0x0000000000000000 l0000000000018354
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0000000000018324:
	word64 s5_25 = a0
	word64 s4_27 = a1
	word64 s3_29 = a2
	word64 s1_30 = 0
	ra_47 = ra
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0000000000018334:
	word64 ra_47
	word64 a5_33 = Mem22[s0_31:word64]
	word64 s0_44
	call a5_33 (retsize: 0;)
		uses: a0:s5_38,a1:s4_36,a2:s3_34,a5:a5_33,ra:ra_47,s0:s0_31,s1:s1_40 + 1,s2:s2_45,s3:s3_34,s4:s4_36,s5:s5_38,sp:sp_42,Stack +FFFFFFC8:s5,Stack +FFFFFFD0:s4,Stack +FFFFFFD8:s3,Stack +FFFFFFE0:s2,Stack +FFFFFFE8:s1,Stack +FFFFFFF0:s0,Stack +FFFFFFF8:ra
		defs: ra:ra_48,s0:s0_44,s1:s1_49,s2:s2_46,s3:s3_50,s4:s4_51,s5:s5_52,sp:sp_43
	s0_31 = s0_44 + 8
	branch s2_23 != s1_30 l0000000000018334
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0000000000018354:
	return
// DataOut:
// DataOut (flags):
// SymbolicIn:

fn00000000000182E8_exit:
// DataOut:
// DataOut (flags):
// SymbolicIn:



void fn0000000000018378()
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse: 
// LiveOut:
// Trashed:
// Preserved: sp
fn0000000000018378_entry:
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0000000000018378:
	return
// DataOut:
// DataOut (flags):
// SymbolicIn:

fn0000000000018378_exit:
// DataOut:
// DataOut (flags):
// SymbolicIn:



