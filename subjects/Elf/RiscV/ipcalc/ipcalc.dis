void herror()
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse: 
// LiveOut:
// Trashed:
// Preserved:
// Terminates process
herror_exit:
// DataOut:
// DataOut (flags):
// SymbolicIn:

herror_entry:
// DataOut:
// DataOut (flags):
// SymbolicIn:



void __strdup()
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse: 
// LiveOut:
// Trashed:
// Preserved:
// Terminates process
__strdup_exit:
// DataOut:
// DataOut (flags):
// SymbolicIn:

__strdup_entry:
// DataOut:
// DataOut (flags):
// SymbolicIn:



void clock_gettime()
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse: 
// LiveOut:
// Trashed:
// Preserved:
// Terminates process
clock_gettime_exit:
// DataOut:
// DataOut (flags):
// SymbolicIn:

clock_gettime_entry:
// DataOut:
// DataOut (flags):
// SymbolicIn:



void close()
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse: 
// LiveOut:
// Trashed:
// Preserved:
// Terminates process
close_exit:
// DataOut:
// DataOut (flags):
// SymbolicIn:

close_entry:
// DataOut:
// DataOut (flags):
// SymbolicIn:



void read()
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse: 
// LiveOut:
// Trashed:
// Preserved:
// Terminates process
read_exit:
// DataOut:
// DataOut (flags):
// SymbolicIn:

read_entry:
// DataOut:
// DataOut (flags):
// SymbolicIn:



void inet_ntop()
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse: 
// LiveOut:
// Trashed:
// Preserved:
// Terminates process
inet_ntop_exit:
// DataOut:
// DataOut (flags):
// SymbolicIn:

inet_ntop_entry:
// DataOut:
// DataOut (flags):
// SymbolicIn:



void snprintf()
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse: 
// LiveOut:
// Trashed:
// Preserved:
// Terminates process
snprintf_exit:
// DataOut:
// DataOut (flags):
// SymbolicIn:

snprintf_entry:
// DataOut:
// DataOut (flags):
// SymbolicIn:



void getaddrinfo()
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse: 
// LiveOut:
// Trashed:
// Preserved:
// Terminates process
getaddrinfo_exit:
// DataOut:
// DataOut (flags):
// SymbolicIn:

getaddrinfo_entry:
// DataOut:
// DataOut (flags):
// SymbolicIn:



void dlopen()
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse: 
// LiveOut:
// Trashed:
// Preserved:
// Terminates process
dlopen_exit:
// DataOut:
// DataOut (flags):
// SymbolicIn:

dlopen_entry:
// DataOut:
// DataOut (flags):
// SymbolicIn:



void open()
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse: 
// LiveOut:
// Trashed:
// Preserved:
// Terminates process
open_exit:
// DataOut:
// DataOut (flags):
// SymbolicIn:

open_entry:
// DataOut:
// DataOut (flags):
// SymbolicIn:



void __snprintf_chk()
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse: 
// LiveOut:
// Trashed:
// Preserved:
// Terminates process
__snprintf_chk_exit:
// DataOut:
// DataOut (flags):
// SymbolicIn:

__snprintf_chk_entry:
// DataOut:
// DataOut (flags):
// SymbolicIn:



void dlsym()
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse: 
// LiveOut:
// Trashed:
// Preserved:
// Terminates process
dlsym_exit:
// DataOut:
// DataOut (flags):
// SymbolicIn:

dlsym_entry:
// DataOut:
// DataOut (flags):
// SymbolicIn:



void exit()
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse: 
// LiveOut:
// Trashed:
// Preserved:
// Terminates process
exit_exit:
// DataOut:
// DataOut (flags):
// SymbolicIn:

exit_entry:
// DataOut:
// DataOut (flags):
// SymbolicIn:



void getopt_long()
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse: 
// LiveOut:
// Trashed:
// Preserved:
// Terminates process
getopt_long_exit:
// DataOut:
// DataOut (flags):
// SymbolicIn:

getopt_long_entry:
// DataOut:
// DataOut (flags):
// SymbolicIn:



void __vasprintf_chk()
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse: 
// LiveOut:
// Trashed:
// Preserved:
// Terminates process
__vasprintf_chk_exit:
// DataOut:
// DataOut (flags):
// SymbolicIn:

__vasprintf_chk_entry:
// DataOut:
// DataOut (flags):
// SymbolicIn:



void __asprintf_chk()
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse: 
// LiveOut:
// Trashed:
// Preserved:
// Terminates process
__asprintf_chk_exit:
// DataOut:
// DataOut (flags):
// SymbolicIn:

__asprintf_chk_entry:
// DataOut:
// DataOut (flags):
// SymbolicIn:



void getnameinfo()
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse: 
// LiveOut:
// Trashed:
// Preserved:
// Terminates process
getnameinfo_exit:
// DataOut:
// DataOut (flags):
// SymbolicIn:

getnameinfo_entry:
// DataOut:
// DataOut (flags):
// SymbolicIn:



void memset()
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse: 
// LiveOut:
// Trashed:
// Preserved:
// Terminates process
memset_exit:
// DataOut:
// DataOut (flags):
// SymbolicIn:

memset_entry:
// DataOut:
// DataOut (flags):
// SymbolicIn:



void inet_pton()
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse: 
// LiveOut:
// Trashed:
// Preserved:
// Terminates process
inet_pton_exit:
// DataOut:
// DataOut (flags):
// SymbolicIn:

inet_pton_entry:
// DataOut:
// DataOut (flags):
// SymbolicIn:



void strcmp()
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse: 
// LiveOut:
// Trashed:
// Preserved:
// Terminates process
strcmp_exit:
// DataOut:
// DataOut (flags):
// SymbolicIn:

strcmp_entry:
// DataOut:
// DataOut (flags):
// SymbolicIn:



void free()
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse: 
// LiveOut:
// Trashed:
// Preserved:
// Terminates process
free_exit:
// DataOut:
// DataOut (flags):
// SymbolicIn:

free_entry:
// DataOut:
// DataOut (flags):
// SymbolicIn:



void __printf_chk()
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse: 
// LiveOut:
// Trashed:
// Preserved:
// Terminates process
__printf_chk_exit:
// DataOut:
// DataOut (flags):
// SymbolicIn:

__printf_chk_entry:
// DataOut:
// DataOut (flags):
// SymbolicIn:



void __sprintf_chk()
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse: 
// LiveOut:
// Trashed:
// Preserved:
// Terminates process
__sprintf_chk_exit:
// DataOut:
// DataOut (flags):
// SymbolicIn:

__sprintf_chk_entry:
// DataOut:
// DataOut (flags):
// SymbolicIn:



void fwrite()
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse: 
// LiveOut:
// Trashed:
// Preserved:
// Terminates process
fwrite_exit:
// DataOut:
// DataOut (flags):
// SymbolicIn:

fwrite_entry:
// DataOut:
// DataOut (flags):
// SymbolicIn:



void memcmp()
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse: 
// LiveOut:
// Trashed:
// Preserved:
// Terminates process
memcmp_exit:
// DataOut:
// DataOut (flags):
// SymbolicIn:

memcmp_entry:
// DataOut:
// DataOut (flags):
// SymbolicIn:



void fputs()
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse: 
// LiveOut:
// Trashed:
// Preserved:
// Terminates process
fputs_exit:
// DataOut:
// DataOut (flags):
// SymbolicIn:

fputs_entry:
// DataOut:
// DataOut (flags):
// SymbolicIn:



void isatty()
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse: 
// LiveOut:
// Trashed:
// Preserved:
// Terminates process
isatty_exit:
// DataOut:
// DataOut (flags):
// SymbolicIn:

isatty_entry:
// DataOut:
// DataOut (flags):
// SymbolicIn:



void __fprintf_chk()
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse: 
// LiveOut:
// Trashed:
// Preserved:
// Terminates process
__fprintf_chk_exit:
// DataOut:
// DataOut (flags):
// SymbolicIn:

__fprintf_chk_entry:
// DataOut:
// DataOut (flags):
// SymbolicIn:



void __libc_start_main()
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse: 
// LiveOut:
// Trashed:
// Preserved:
// Terminates process
__libc_start_main_exit:
// DataOut:
// DataOut (flags):
// SymbolicIn:

__libc_start_main_entry:
// DataOut:
// DataOut (flags):
// SymbolicIn:



void putchar()
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse: 
// LiveOut:
// Trashed:
// Preserved:
// Terminates process
putchar_exit:
// DataOut:
// DataOut (flags):
// SymbolicIn:

putchar_entry:
// DataOut:
// DataOut (flags):
// SymbolicIn:



void fputc()
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse: 
// LiveOut:
// Trashed:
// Preserved:
// Terminates process
fputc_exit:
// DataOut:
// DataOut (flags):
// SymbolicIn:

fputc_entry:
// DataOut:
// DataOut (flags):
// SymbolicIn:



void __stack_chk_fail()
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse: 
// LiveOut:
// Trashed:
// Preserved:
// Terminates process
__stack_chk_fail_exit:
// DataOut:
// DataOut (flags):
// SymbolicIn:

__stack_chk_fail_entry:
// DataOut:
// DataOut (flags):
// SymbolicIn:



void __errno_location()
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse: 
// LiveOut:
// Trashed:
// Preserved:
// Terminates process
__errno_location_exit:
// DataOut:
// DataOut (flags):
// SymbolicIn:

__errno_location_entry:
// DataOut:
// DataOut (flags):
// SymbolicIn:



void strtol()
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse: 
// LiveOut:
// Trashed:
// Preserved:
// Terminates process
strtol_exit:
// DataOut:
// DataOut (flags):
// SymbolicIn:

strtol_entry:
// DataOut:
// DataOut (flags):
// SymbolicIn:



void strchr()
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse: 
// LiveOut:
// Trashed:
// Preserved:
// Terminates process
strchr_exit:
// DataOut:
// DataOut (flags):
// SymbolicIn:

strchr_entry:
// DataOut:
// DataOut (flags):
// SymbolicIn:



void memcpy()
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse: 
// LiveOut:
// Trashed:
// Preserved:
// Terminates process
memcpy_exit:
// DataOut:
// DataOut (flags):
// SymbolicIn:

memcpy_entry:
// DataOut:
// DataOut (flags):
// SymbolicIn:



void abort()
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse: 
// LiveOut:
// Trashed:
// Preserved:
// Terminates process
abort_exit:
// DataOut:
// DataOut (flags):
// SymbolicIn:

abort_entry:
// DataOut:
// DataOut (flags):
// SymbolicIn:



void freeaddrinfo()
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse: 
// LiveOut:
// Trashed:
// Preserved:
// Terminates process
freeaddrinfo_exit:
// DataOut:
// DataOut (flags):
// SymbolicIn:

freeaddrinfo_entry:
// DataOut:
// DataOut (flags):
// SymbolicIn:



void fn0000000000015180(word64 ra, word64 gp, word64 t1, word64 s0, word64 s1, word64 a0, word64 a1, word64 a6, word64 a7, word64 s2, word64 s3, word64 s4, word64 s5, word64 s6, word64 s7, word64 s8, word64 s9, word64 s10, word64 s11, word64 t3, word64 t4, word64 t5, word64 t6, word64 fa3, word64 fa4, word64 fa5)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  a0:[0..63] a1:[0..63] a6:[0..63] a7:[0..63] fa3:[0..63] fa4:[0..63] fa5:[0..63] gp:[0..63] ra:[0..63] s0:[0..63] s1:[0..63] s10:[0..63] s11:[0..63] s2:[0..63] s3:[0..63] s4:[0..63] s5:[0..63] s6:[0..63] s7:[0..63] s8:[0..63] s9:[0..63] t1:[0..63] t3:[0..63] t4:[0..63] t5:[0..63] t6:[0..63]
// LiveOut:
// Trashed: a0 a1 a2 a3 a4 a5 a6 a7 fa3 fa4 fa5 gp ra s0 s1 s10 s11 s2 s3 s4 s5 s6 s7 s8 s9 sp t1 t3 t4 t5 t6
// Preserved:
fn0000000000015180_entry:
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0000000000015180:
	word64 sp_290 = fp + -448 + 0xFFFFFFFFFFFFFFE8
	word64 a5_7 = Mem5[gp + -1936:word64]
	word64 s3_1157 = a0
	word64 s2_131 = a1
	word32 dwLoc01A4_1976 = 0x0000000000000000
	word64 s0_135 = 0
	word64 s6_43 = 0
	word64 s9_44 = 0
	word64 s10_45 = 0
	word32 dwLoc01C0_1977 = 0x0000000000000000
	word64 s7_49 = 1
	word32 dwLoc01B8_1978 = 65544
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0000000000015200:
	word64 a1_61 = (word64) a1
	word64 a0_60 = (word64) a0
	word64 a0_69 = (word64) DPB(a0_60, getopt_long(a0_60, a1_61, 0x00000000000119A8, 0x00000000000108E0, 0x0000000000000000), 0)
	word64 a0_1934 = (word64) a0_69
	sp_290 = sp_290 + 0xFFFFFFFFFFFFFFF8
	branch a0_69 == -1 l0000000000015348
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0000000000015348:
	word64 s4_326
	word64 s1_149
	word64 a4_73 = (word64) Mem50[gp + -1904:int32]
	branch a4_73 >= a0 l0000000000015428
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0000000000015428:
	s4_326 = 0
	s1_149 = 0
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0000000000015350:
	word64 a1_76 = (int64) ((word32) a4_73 + 1)
	Mem79[gp + 2192:word32] = a1_76
	s2_131 = a1 + (a4_73 << 0x00000003)
	s1_149 = Mem79[s2_131:word64]
	s4_326 = 0
	branch a1_76 >= a0 l0000000000015378
// DataOut:
// DataOut (flags):
// SymbolicIn:

l000000000001536C:
	s4_326 = Mem79[s2_131 + 8:word64]
	Mem84[gp + 2192:word32] = (int64) ((word32) a4_73 + 2)
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0000000000015378:
	branch s6_43 != 0x0000000000000000 l0000000000015588
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0000000000015588:
	a0_94 = DPB(0x0000000000000001, __printf_chk(0x0000000000000001, 0x00000000000119C8, 0x00000000), 0)
// DataOut:
// DataOut (flags):
// SymbolicIn:

l000000000001537C:
	branch (word64) Mem98[sp_290 + 28:int32] == 0x0000000000000000 l00000000000153B4
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0000000000015384:
	branch (word64) Mem98[sp_290:int32] == 0x0000000000000000 l00000000000153B4
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00000000000153B4:
	word64 a6_1123
	word64 a4_1116
	word64 a0_756
	word64 a5_396
	word64 a0_499
	word64 a0_397
	word64 a5_117
	Mem104[sp_290 + 8:word64] = a0_69
	branch s9_44 == 0x0000000000000000 l0000000000015924
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0000000000015924:
	word64 a0_110 = fn0000000000017924(gp, out a1_111, out a2_112, out a3_113, out a4_3456, out a6_1123)
	a5_117 = Mem104[sp_290 + 8:word64]
	branch a0_110 != 0x0000000000000000 l0000000000015458
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0000000000015930:
	branch (s0_135 & 65544) != 65544 l0000000000015458
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0000000000015940:
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00000000000153BC:
	word64 a0_124 = fn0000000000017924(gp, out a1_125, out a2_126, out a3_127, out a4_3457, out a6_1123)
	s2_131 = s0_135 | 2
	a5_117 = Mem104[sp_290 + 8:word64]
	branch a0_124 == 0x0000000000000000 l0000000000015434
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0000000000015434:
	s0_135 = s0_135 & 65544
	branch (s0_135 & 65544) != 65544 l00000000000153CC
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0000000000015444:
	s0_135 = s0_135 | 2
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0000000000015448:
	s2_131 = s0_135 | 0x0000000000004000
	branch s9_44 != 0x0000000000000000 l00000000000153CC
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0000000000015454:
	s0_135 = s2_131
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0000000000015458:
	branch s10_45 == 0x0000000000000000 l0000000000015CE4
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0000000000015CE4:
	branch s1_149 != 0x0000000000000000 l0000000000015510
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0000000000015CE8:
	branch (word64) Mem104[gp + -2028:int32] != 0x0000000000000000 l00000000000153D8
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0000000000015CF0:
	a0_165 = DPB(0x0000000000011A30, fwrite(0x0000000000011A30, 0x0000000000000001, 0x000000000000001C, (word64) Mem104[gp + -1920:word64]), 0)
	fn0000000000015FCC(gp, 1, out a2_172, out a3_173)
// DataOut:
// DataOut (flags):
// SymbolicIn:

l000000000001545C:
	word64 a0_181 = fn00000000000166F4(gp, sp_290 + 28, s10_45, 1, out a1_182, out a2_183, out a3_184)
	branch a0_181 < 0x0000000000000000 l0000000000015BC8
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0000000000015BC8:
	branch (word64) Mem104[gp + -2028:int32] != 0x0000000000000000 l00000000000153D8
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0000000000015BD0:
	a0_499 = (word64) Mem104[gp + -1920:word64] (alias)
	branch (word64) Mem104[sp_290 + 28:int32] != 0x0000000000000000 l0000000000015E7C
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0000000000015E7C:
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0000000000015BDC:
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0000000000015474:
	Mem199[sp_290 + 8:word64] = a0_181
	word64 s1_200 = (word64) Mem199[sp_290 + 28:int32]
	Mem201[sp_290 + 32:word64] = 0x0000000000000000
	word64 a0_207 = (word64) DPB(0x0000000000000002, clock_gettime(0x0000000000000002, (word64) (sp_290 + 40)), 0)
	word64 a5_206 = Mem201[sp_290:word64]
	branch a0_207 < 0x0000000000000000 l0000000000015CB0
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0000000000015494:
	word64 a5_252
	branch s1_200 == 0x0000000000000000 l0000000000015C48
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0000000000015C48:
	Mem210[sp_290:word64] = a5_206
	word64 s1_211 = Mem210[sp_290 + 0x0000000000000028:word64]
	word64 a0_212 = fn00000000000164D0(sp_290 + 0x00000000000000F8, 4, out a1_213, out a2_214)
	word64 a5_215 = Mem210[sp_290:word64]
	branch a0_212 < 0x0000000000000000 l0000000000015CB0
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0000000000015C64:
	branch a5_215 <= 15 l0000000000015C7C
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0000000000015C6C:
	word64 a3_219 = 1
	branch a3_219 >=u (s1_211 | 4) l0000000000015DB8
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0000000000015DB8:
	branch (s1_211 | 4) == a3_219 l0000000000015E00
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0000000000015E00:
	Mem221[sp_290 + 0x00000000000000F8:byte] = -64
	Mem223[sp_290 + 0x00000000000000F9:byte] = -88
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0000000000015DBC:
	Mem225[sp_290 + 0x00000000000000F8:byte] = -84
	Mem230[sp_290 + 0x00000000000000F9:byte] = Mem225[sp_290 + 0x0000000000000028:word64] >> 0x00000004 & 15 | 16
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0000000000015C7C:
	Mem233[sp_290 + 0x00000000000000F8:byte] = 10
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0000000000015C84:
	word64 a4_236 = (word64) Mem235[sp_290 + 0x00000000000000F8:int32]
	Mem244[sp_290:word64] = a5_215
	Mem245[sp_290 + 0x0000000000000010:word32] = a4_236
	word64 a0_253 = (word64) inet_ntop(0x0000000000000002, (word64) (sp_290 + 0x0000000000000010), (word64) (sp_290 + 0x0000000000000100), 0x0000000000000040)
	a5_252 = Mem245[sp_290 + 0xFFFFFFFFFFFFFFF8:word64]
	branch a0_253 != 0x0000000000000000 l00000000000154DC
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0000000000015498:
	Mem259[sp_290 + 0x0000000000000030:byte] = Mem201[sp_290 + 0x0000000000000028:word64] & 1 | -4
	branch fn00000000000164D0(sp_290 + 0x0000000000000031, 15, out a1_261, out a2_262) < 0x0000000000000000 l0000000000015CB0
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00000000000154BC:
	word64 a0_276 = (word64) inet_ntop(0x000000000000000A, (word64) (sp_290 + 0x0000000000000030), (word64) (sp_290 + 0x0000000000000100), 0x0000000000000040)
	a5_252 = Mem259[sp_290 + 0xFFFFFFFFFFFFFFF8:word64]
	branch a0_276 == 0x0000000000000000 l0000000000015CB0
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00000000000154DC:
	word64 sp_282 = sp_290 + 0x0000000000000000
	Mem285[sp_282 + 8:word64] = a5_252
	word64 a0_286 = (word64) (sp_282 + 32)
	word64 a0_293 = (word64) DPB(a0_286, __asprintf_chk(a0_286, 0x0000000000000001, 0x0000000000011A90, 0x00000000), 0)
	sp_290 = sp_282 + 0xFFFFFFFFFFFFFFF8
	a5_117 = Mem285[sp_282:word64]
	branch a0_293 == -1 l0000000000015CB0
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0000000000015508:
	s1_149 = Mem285[sp_282 + 0x0000000000000018:word64]
	branch s1_149 == 0x0000000000000000 l0000000000015CB0
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0000000000015CB0:
	branch (word64) Mem299[gp + -2028:int32] != 0x0000000000000000 l00000000000153D8
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0000000000015CB8:
	word64 a0_307 = (word64) Mem299[gp + -1920:word64]
	a0_310 = DPB(a0_307, __fprintf_chk(a0_307, 0x0000000000000001, 0x0000000000011A98, 0x00000000), 0)
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00000000000153CC:
	branch s10_45 == 0x0000000000000000 l00000000000155A8
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00000000000155A8:
	branch (word64) Mem104[sp_290 + 28:int32] != 0x0000000000000000 l0000000000015944
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0000000000015944:
	Mem323[sp_290 + 8:word64] = a5_117
	word64 a0_341 = fn00000000000169D8(ra, gp, s0_135, s1_149, 10, s9_44, s2_131, a0, s4_326, out a1_342, out a2_343, out a3_344)
	s1_149 = a0_341
	s0_135 = s2_131
	a5_117 = Mem323[sp_290 + 8:word64]
	branch a0_341 != 0x0000000000000000 l0000000000015510
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0000000000015510:
	branch (word64) Mem351[sp_290:int32] != 0x0000000000000000 l00000000000155D8
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00000000000155B0:
	branch (word64) Mem104[sp_290:int32] == 0x0000000000000000 l000000000001598C
// DataOut:
// DataOut (flags):
// SymbolicIn:

l000000000001598C:
	Mem356[sp_290:word64] = a5_117
	word64 a0_357 = fn00000000000169D8(ra, gp, s0_135, s1_149, 0, s9_44, s2_131, a0, s4_326, out a1_358, out a2_359, out a3_360)
	s1_149 = a0_357
	branch a0_357 == 0x0000000000000000 l0000000000015964
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00000000000159A4:
	s0_135 = s2_131
	a5_117 = Mem356[sp_290:word64]
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0000000000015518:
	Mem374[sp_290:word64] = a5_117
	word64 a0_380 = (word64) strchr((word64) s1_149, 0x000000000000003A)
	sp_290 = sp_290 + 0xFFFFFFFFFFFFFFF8
	a5_117 = Mem374[sp_290:word64]
	branch a0_380 == 0x0000000000000000 l00000000000155D8
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0000000000015530:
	Mem382[sp_290 + 28:word32] = 1
	branch s4_326 == 0x0000000000000000 l0000000000015BEC
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0000000000015BEC:
	Mem391[sp_290:word64] = a5_117
	a0_397 = (word64) strchr((word64) s1_149, 0x000000000000002F) (alias)
	sp_290 = sp_290 + 0xFFFFFFFFFFFFFFF8
	a5_396 = Mem391[sp_290 + 0xFFFFFFFFFFFFFFF8:word64]
	branch a0_397 != 0x0000000000000000 l0000000000015BB8
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0000000000015C04:
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00000000000155B8:
	Mem400[sp_290:word64] = a5_117
	word64 a0_401 = fn00000000000169D8(ra, gp, s0_135, s1_149, 2, s9_44, s2_131, a0, s4_326, out a1_402, out a2_403, out a3_404)
	s1_149 = a0_401
	branch a0_401 == 0x0000000000000000 l0000000000015964
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0000000000015964:
	branch (word64) Mem409[gp + -2028:int32] != 0x0000000000000000 l00000000000153D8
// DataOut:
// DataOut (flags):
// SymbolicIn:

l000000000001596C:
	word64 a0_417 = (word64) Mem409[gp + -1920:word64]
	a0_420 = DPB(a0_417, __fprintf_chk(a0_417, 0x0000000000000001, 0x0000000000011A50, 0x00000000), 0)
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00000000000155D0:
	a5_117 = Mem400[sp_290:word64]
	s0_135 = s2_131
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00000000000155D8:
	branch s4_326 == 0x0000000000000000 l0000000000015BA0
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0000000000015BA0:
	Mem432[sp_290:word64] = a5_117
	a0_397 = (word64) strchr((word64) s1_149, 0x000000000000002F) (alias)
	sp_290 = sp_290 + 0xFFFFFFFFFFFFFFF8
	a5_396 = Mem432[sp_290:word64]
	branch a0_397 == 0x0000000000000000 l00000000000155FC
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0000000000015BB8:
	Mem440[a0_397:byte] = 0x0000000000000000
	s4_326 = a0_397 + 1
	branch s4_326 == 0x0000000000000000 l00000000000155FC
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0000000000015BC4:
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00000000000155DC:
	branch (word64) Mem442[sp_290 + 28:int32] != 0x0000000000000000 l000000000001553C
// DataOut:
// DataOut (flags):
// SymbolicIn:

l000000000001553C:
	branch (word64) Mem448[gp + -2028:int32] != 0x0000000000000000 l00000000000153D8
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0000000000015544:
	word64 a0_456 = (word64) Mem448[gp + -1920:word64]
	a0_459 = DPB(a0_456, __fprintf_chk(a0_456, 0x0000000000000001, 0x0000000000011AD0, 0x00000000), 0)
	fn0000000000015FCC(gp, 1, out a2_465, out a3_466)
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00000000000155E4:
	word64 a0_479 = fn00000000000166F4(gp, sp_290 + 28, s4_326, 0, out a1_480, out a2_481, out a3_482)
	a5_396 = a0_479
	branch a0_479 < 0x0000000000000000 l0000000000015B6C
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0000000000015B6C:
	branch (word64) Mem486[gp + -2028:int32] != 0x0000000000000000 l00000000000153D8
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0000000000015B74:
	a0_499 = (word64) Mem486[gp + -1920:word64] (alias)
	branch (word64) Mem486[sp_290 + 28:int32] != 0x0000000000000000 l0000000000015CD8
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0000000000015CD8:
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0000000000015B80:
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0000000000015B88:
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0000000000015B8C:
	a0_505 = DPB(a0_499, __fprintf_chk(a0_499, 0x0000000000000001, 0x0000000000011A70, 0x00000000), 0)
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00000000000155FC:
	word64 a4_511 = (word64) Mem510[sp_290 + 28:int32]
	word64 a4_623 = (word64) a4_511
	branch a4_511 == 0x0000000000000000 l00000000000159B0
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00000000000159B0:
	a0_756 = fn0000000000016D74(ra, gp, t1, s0_135, s1_149, s1_149, a5_396, sp_290 + 56, s0_135, a4_623, a6_1123, a7, s2_131, a0, s4_326, s5, s6_43, s7_49, 0x0000000000001000, t3, t4, t5, fa3, fa4, fa5, out a1_757, out a2_758, out a4_1116)
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0000000000015604:
	a0_756 = fn00000000000175BC(ra, gp, t1, s0_135, s1_149, s1_149, a5_396, sp_290 + 56, s0_135, a6_1123, a7, s2_131, a0, s4_326, s5, s6_43, s7_49, 0x0000000000001000, s9_44, t3, t4, t5, t6, fa3, fa4, fa5, out a1_815, out a2_816, out a3_817, out a4_1116)
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0000000000015618:
	branch a0_756 < 0x0000000000000000 l00000000000153D8
// DataOut:
// DataOut (flags):
// SymbolicIn:

l000000000001561C:
	branch (s0_135 & 4294623231) != 0x0000000000000000 l0000000000015630
// DataOut:
// DataOut (flags):
// SymbolicIn:

l000000000001562C:
	s0_135 = s0_135 | 8
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0000000000015630:
	word64 sp_1014 = sp_290 + 0xFFFFFFFFFFFFFFF8
	branch (word64) DPB(0x0000000000000001, isatty(0x0000000000000001), 0) == 0x0000000000000000 l0000000000015644
// DataOut:
// DataOut (flags):
// SymbolicIn:

l000000000001563C:
	a4_1116 = 1
	Mem836[gp + 2064:word32] = a4_1116
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0000000000015644:
	branch (s0_135 & 8) == 0x0000000000000000 l00000000000159C8
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00000000000159C8:
	branch (s0_135 & 128) != 0x0000000000000000 l0000000000015D18
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0000000000015D18:
	a0_852 = DPB(0x0000000000000001, __printf_chk(0x0000000000000001, 0x0000000000011C28, 0x00000000), 0)
	sp_1014 = sp_1014 + 0xFFFFFFFFFFFFFFF8
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00000000000159D0:
	branch (s0_135 & 512) != 0x0000000000000000 l0000000000015D48
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0000000000015D48:
	a0_864 = DPB(0x0000000000000001, __printf_chk(0x0000000000000001, 0x0000000000011C38, 0x00000000), 0)
	sp_1014 = sp_1014 + 0xFFFFFFFFFFFFFFF8
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00000000000159D8:
	branch (s0_135 & 64) == 0x0000000000000000 l00000000000159FC
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00000000000159E0:
	branch (word64) Mem842[sp_1014 + 28:int32] != 0x0000000000000000 l00000000000159FC
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00000000000159E8:
	a0_877 = DPB(0x0000000000000001, __printf_chk(0x0000000000000001, 0x0000000000011C48, 0x00000000), 0)
	sp_1014 = sp_1014 + 0xFFFFFFFFFFFFFFF8
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00000000000159FC:
	branch (s0_135 & 256) != 0x0000000000000000 l0000000000015D30
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0000000000015D30:
	a0_889 = DPB(0x0000000000000001, __printf_chk(0x0000000000000001, 0x0000000000011C58, 0x00000000), 0)
	sp_1014 = sp_1014 + 0xFFFFFFFFFFFFFFF8
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0000000000015A04:
	branch s0_135 << 0x0000000E < 0x0000000000000000 l0000000000015D78
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0000000000015D78:
	a0_901 = DPB(0x0000000000000001, __printf_chk(0x0000000000000001, 0x0000000000011C68, 0x00000000), 0)
	sp_1014 = sp_1014 + 0xFFFFFFFFFFFFFFF8
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0000000000015A0C:
	branch (s0_135 & 1024) == 0x0000000000000000 l0000000000015A2C
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0000000000015A14:
	branch Mem842[sp_1014 + 224:word64] == 0x0000000000000000 l0000000000015A2C
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0000000000015A1C:
	a0_913 = DPB(0x0000000000000001, __printf_chk(0x0000000000000001, 0x0000000000011C78, 0x00000000), 0)
	sp_1014 = sp_1014 + 0xFFFFFFFFFFFFFFF8
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0000000000015A2C:
	branch s0_135 << 0x00000014 >= 0x0000000000000000 l0000000000015A4C
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0000000000015A34:
	branch Mem842[sp_1014 + 232:word64] == 0x0000000000000000 l0000000000015A4C
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0000000000015A3C:
	a0_925 = DPB(0x0000000000000001, __printf_chk(0x0000000000000001, 0x0000000000011C88, 0x00000000), 0)
	sp_1014 = sp_1014 + 0xFFFFFFFFFFFFFFF8
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0000000000015A4C:
	branch s0_135 << 0x00000012 >= 0x0000000000000000 l0000000000015A80
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0000000000015A54:
	word64 s2_931 = Mem842[sp_1014 + 240:word64]
	branch s2_931 == 0x0000000000000000 l0000000000015A80
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0000000000015A5C:
	word64 sp_937 = sp_1014 + 0xFFFFFFFFFFFFFFF8
	branch (word64) strchr((word64) s2_931, 0x0000000000000020) == 0x0000000000000000 l0000000000015DA4
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0000000000015DA4:
	a0_945 = DPB(0x0000000000000001, __printf_chk(0x0000000000000001, 0x0000000000011CA8, 0x00000000), 0)
	sp_1014 = sp_937 + 0xFFFFFFFFFFFFFFF8
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0000000000015A70:
	a0_952 = DPB(0x0000000000000001, __printf_chk(0x0000000000000001, 0x0000000000011C98, 0x00000000), 0)
	sp_1014 = sp_937 + 0xFFFFFFFFFFFFFFF8
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0000000000015A80:
	branch s0_135 << 0x00000013 >= 0x0000000000000000 l0000000000015AAC
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0000000000015A88:
	word64 sp_962 = sp_1014 + 0xFFFFFFFFFFFFFFF8
	branch (word64) strchr((word64) (sp_1014 + 152), 0x0000000000000020) == 0x0000000000000000 l0000000000015D90
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0000000000015D90:
	a0_970 = DPB(0x0000000000000001, __printf_chk(0x0000000000000001, 0x0000000000011CC8, 0x00000000), 0)
	sp_1014 = sp_962 + 0xFFFFFFFFFFFFFFF8
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0000000000015A9C:
	a0_977 = DPB(0x0000000000000001, __printf_chk(0x0000000000000001, 0x0000000000011CB8, 0x00000000), 0)
	sp_1014 = sp_962 + 0xFFFFFFFFFFFFFFF8
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0000000000015AAC:
	branch (s0_135 & 1) == 0x0000000000000000 l0000000000015ACC
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0000000000015AB4:
	branch Mem842[sp_1014 + 112:word64] == 0x0000000000000000 l0000000000015ACC
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0000000000015ABC:
	a0_990 = DPB(0x0000000000000001, __printf_chk(0x0000000000000001, 0x0000000000011CD8, 0x00000000), 0)
	sp_1014 = sp_1014 + 0xFFFFFFFFFFFFFFF8
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0000000000015ACC:
	branch (s0_135 & 2) != 0x0000000000000000 l0000000000015D60
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0000000000015D60:
	a0_1013 = DPB(0x0000000000000001, __printf_chk(0x0000000000000001, 0x0000000000011CE8, 0x00000000), 0)
	sp_1014 = sp_1014 + 0xFFFFFFFFFFFFFFF8
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0000000000015AD4:
	branch (s0_135 & 0x000000000000C000) != 0x000000000000C000 l00000000000153DC
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0000000000015AE0:
	branch Mem842[sp_1014 + 128:word64] == 0x0000000000000000 l0000000000015AF8
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0000000000015AE8:
	a0_1028 = DPB(0x0000000000000001, __printf_chk(0x0000000000000001, 0x0000000000011CF8, 0x00000000), 0)
	sp_1014 = sp_1014 + 0xFFFFFFFFFFFFFFF8
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0000000000015AF8:
	word64 s0_1032 = Mem842[sp_1014 + 120:word64]
	branch s0_1032 == 0x0000000000000000 l0000000000015B24
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0000000000015B00:
	word64 sp_1038 = sp_1014 + 0xFFFFFFFFFFFFFFF8
	branch (word64) strchr((word64) s0_1032, 0x0000000000000020) == 0x0000000000000000 l0000000000015E90
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0000000000015E90:
	a0_1046 = DPB(0x0000000000000001, __printf_chk(0x0000000000000001, 0x0000000000011D18, 0x00000000), 0)
	sp_1014 = sp_1038 + 0xFFFFFFFFFFFFFFF8
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0000000000015B14:
	a0_1053 = DPB(0x0000000000000001, __printf_chk(0x0000000000000001, 0x0000000000011D08, 0x00000000), 0)
	sp_1014 = sp_1038 + 0xFFFFFFFFFFFFFFF8
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0000000000015B24:
	word64 s0_1057 = Mem842[sp_1014 + 136:word64]
	branch s0_1057 == 0x0000000000000000 l0000000000015B50
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0000000000015B2C:
	word64 sp_1063 = sp_1014 + 0xFFFFFFFFFFFFFFF8
	branch (word64) strchr((word64) s0_1057, 0x0000000000000020) == 0x0000000000000000 l0000000000015EA4
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0000000000015EA4:
	a0_1071 = DPB(0x0000000000000001, __printf_chk(0x0000000000000001, 0x0000000000011D38, 0x00000000), 0)
	sp_1014 = sp_1063 + 0xFFFFFFFFFFFFFFF8
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0000000000015B40:
	a0_1078 = DPB(0x0000000000000001, __printf_chk(0x0000000000000001, 0x0000000000011D28, 0x00000000), 0)
	sp_1014 = sp_1063 + 0xFFFFFFFFFFFFFFF8
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0000000000015B50:
	branch Mem842[sp_1014 + 144:word64] == 0x0000000000000000 l00000000000153DC
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0000000000015B58:
	a0_1088 = DPB(0x0000000000000001, __printf_chk(0x0000000000000001, 0x0000000000011D48, 0x00000000), 0)
// DataOut:
// DataOut (flags):
// SymbolicIn:

l000000000001564C:
	word64 a4_1133
	word64 s0_1245
	word64 a5_1243
	word64 a3_1248
	word64 a5_1092
	word64 s4_1140
	word64 a3_1096
	word64 s2_1091 = (word64) Mem842[sp_1014 + 216:int32]
	branch (word64) Mem842[sp_1014 + 28:int32] != 0x0000000000000000 l000000000001590C
// DataOut:
// DataOut (flags):
// SymbolicIn:

l000000000001590C:
	a5_1092 = 128
	branch s2_1091 != a5_1092 l0000000000015660
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0000000000015658:
	a5_1092 = 32
	branch s2_1091 == a5_1092 l0000000000015914
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0000000000015914:
	a3_1096 = Mem842[sp_1014 + 64:word64]
	branch a3_1096 == 0x0000000000000000 l0000000000015DDC
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0000000000015DDC:
	gp = fn000000000001654C(ra, gp, s0_135, 0x0000000000012000, 0x0000000000011B08, 0x0000000000011B10, 0x0000000000011C60, Mem842[sp_1014 + 56:word64], a4_1116, a5_1092, a6_1123, a7, 0x0000000000012000, a0, out a1_1130, out a2_1131, out a3_3482, out a4_1133, out a5_3483, out a6_1123, out a7)
// DataOut:
// DataOut (flags):
// SymbolicIn:

l000000000001591C:
	s4_1140 = 1
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0000000000015660:
	branch s10_45 == 0x0000000000000000 l0000000000015860
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0000000000015860:
	s3_1157 = Mem842[sp_1014 + 56:word64]
	word64 a0_1160 = (word64) Mem842[sp_1014 + 88:word64]
	sp_1014 = sp_1014 + 0xFFFFFFFFFFFFFFF8
	branch (word64) DPB(a0_1160, strcmp(a0_1160, (word64) s3_1157), 0) == 0x0000000000000000 l0000000000015664
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0000000000015874:
	a3_1096 = Mem842[sp_1014 + 0x0000000000000038:word64]
	s4_1140 = 0
	branch a3_1096 == 0x0000000000000000 l0000000000015E14
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0000000000015E14:
	gp = fn000000000001654C(ra, gp, s0_135, 0x0000000000012000, 0x0000000000011B08, 0x0000000000011B10, 0x0000000000011C60, s3_1157, a4_1116, a5_1092, a6_1123, a7, 0x0000000000012000, s3_1157, out a1_3473, out a2_3474, out a3_3475, out a4_3476, out a5_1092, out a6_1123, out a7)
	s2_1091 = (word64) Mem842[sp_1014 + 0x00000000000000D0:int32]
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0000000000015880:
	word64 a4_1214
	word64 a5_1215
	word64 a6_1216
	word64 a7_1217
	gp = fn000000000001654C(ra, fn000000000001654C(ra, gp, s0_135, 0x0000000000012000, 0x0000000000011B08, 0x0000000000011AF8, 0x0000000000011C60, a3_1096, a4_1116, a5_1092, a6_1123, a7, 0x0000000000012000, s3_1157, out a1_3477, out a2_3478, out a3_3479, out a4_1214, out a5_1215, out a6_1216, out a7_1217), s0_135, 0x0000000000012000, 0x0000000000011B08, 0x0000000000011B10, 0x0000000000011C60, Mem842[sp_1014 + 56:word64], a4_1214, a5_1215, a6_1216, a7_1217, 0x0000000000012000, s3_1157, out a1_1230, out a2_1231, out a3_3480, out a4_1133, out a5_1092, out a6_1123, out a7)
	branch s4_1140 == 0x0000000000000000 l0000000000015E74
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0000000000015E74:
	s2_1091 = (word64) Mem842[sp_1014 + 216:int32]
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00000000000158B8:
	a5_1243 = 65544
	s0_1245 = s0_135 & 65544
	branch s0_1245 == 65544 l0000000000015E64
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0000000000015E64:
	a3_1248 = Mem842[sp_1014 + 80:word64]
	s0_1245 = 1
	branch a3_1248 != 0x0000000000000000 l0000000000015C2C
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0000000000015E70:
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0000000000015664:
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0000000000015668:
	word64 a3_1255 = Mem842[sp_1014 + 72:word64]
	s3_1157 = 0x0000000000012000
	branch a3_1255 == 0x0000000000000000 l0000000000015690
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0000000000015674:
	gp = fn000000000001654C(ra, gp, s0_135, 0x0000000000012000, 0x0000000000011B08, 0x0000000000011B28, 0x0000000000011B20, a3_1255, s2_1091, a5_1092, a6_1123, a7, s2_1091, 0x0000000000012000, out a1_3465, out a2_3466, out a3_3467, out a4_3468, out a5_1092, out a6_1123, out a7)
	s2_1091 = (word64) Mem842[sp_1014 + 216:int32]
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0000000000015690:
	word64 a5_1314
	word64 a6_1315
	word64 a7_1316
	word64 a5_1333
	gp = fn000000000001654C(ra, fn000000000001654C(ra, gp, s0_135, 0x0000000000012000, 0x0000000000011B08, 0x0000000000011B38, 0x0000000000011B20, Mem842[sp_1014 + 88:word64], s2_1091, a5_1092, a6_1123, a7, s2_1091, 0x0000000000012000, out a1_3458, out a2_3459, out a3_3460, out a4_3461, out a5_1314, out a6_1315, out a7_1316), s0_135, 0x0000000000012000, 0x0000000000011B08, 0x0000000000011B58, 0x0000000000011B48, Mem842[sp_1014 + 104:word64], (word64) Mem842[sp_1014 + 216:int32], a5_1314, a6_1315, a7_1316, s2_1091, 0x0000000000012000, out a1_3462, out a2_3463, out a3_3464, out a4_1133, out a5_1333, out a6_1123, out a7)
	word64 a3_1339 = Mem842[sp_1014 + 96:word64]
	branch a3_1339 == 0x0000000000000000 l00000000000156EC
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00000000000156D4:
	s2_1091 = 0x0000000000012000
	gp = fn000000000001654C(ra, gp, s0_135, 0x0000000000012000, 0x0000000000011B08, 0x0000000000011B68, 0x0000000000011C60, a3_1339, a4_1133, a5_1333, a6_1123, a7, 0x0000000000012000, 0x0000000000012000, out a1_3469, out a2_3470, out a3_3471, out a4_1133, out a5_3472, out a6_1123, out a7)
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00000000000156EC:
	a5_1243 = 65544
	s0_1245 = s0_135 & 65544
	branch s0_1245 == 65544 l0000000000015C1C
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0000000000015C1C:
	a3_1248 = Mem842[sp_1014 + 80:word64]
	branch a3_1248 == 0x0000000000000000 l00000000000156FC
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0000000000015C24:
	s0_1245 = 0
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0000000000015C2C:
	s2_1091 = 0x0000000000012000
	gp = fn000000000001654C(ra, gp, s0_1245, 0x0000000000012000, 0x0000000000011B08, 0x0000000000011B78, 0x0000000000011C60, a3_1248, a4_1133, 65544, a6_1123, a7, 0x0000000000012000, s3_1157, out a1_1398, out a2_1399, out a3_3492, out a4_1133, out a5_1243, out a6_1123, out a7)
	branch s0_1245 != 0x0000000000000000 l00000000000158C8
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00000000000158C8:
	s2_1091 = 0x0000000000012000
	word64 a3_1412 = Mem842[sp_1014 + 240:word64]
	branch a3_1412 == 0x0000000000000000 l00000000000158E8
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00000000000158D0:
	gp = fn000000000001654C(ra, gp, s0_1245, 0x0000000000012000, 0x0000000000011B98, 0x0000000000011B88, 0x0000000000011C60, a3_1412, a4_1133, a5_1243, a6_1123, a7, 0x0000000000012000, s3_1157, out a1_1430, out a2_1431, out a3_3481, out a4_1133, out a5_1243, out a6_1123, out a7)
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00000000000158E8:
	word64 a3_1442 = Mem842[sp_1014 + 248:word64]
	branch a3_1442 == 0x0000000000000000 l00000000000157BC
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00000000000158F0:
	gp = fn000000000001654C(ra, gp, s0_1245, 0x0000000000012000, 0x0000000000011B98, 0x0000000000011BA0, 0x0000000000011C60, a3_1442, a4_1133, a5_1243, a6_1123, a7, 0x0000000000012000, s3_1157, out a1_1460, out a2_1461, out a3_1462, out a4_1133, out a5_3487, out a6_1123, out a7)
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0000000000015C44:
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00000000000156FC:
	a0_1472 = DPB(0x000000000000000A, putchar(0x000000000000000A), 0)
	sp_1014 = sp_1014 + 0xFFFFFFFFFFFFFFF8
	word64 a3_1476 = Mem842[sp_1014 + 240:word64]
	branch a3_1476 == 0x0000000000000000 l0000000000015728
// DataOut:
// DataOut (flags):
// SymbolicIn:

l000000000001570C:
	gp = fn000000000001654C(ra, gp, s0_1245, 0x0000000000012000, 0x0000000000011B98, 0x0000000000011B88, 0x0000000000011C60, a3_1476, a4_1133, a5_1243, a6_1123, a7, s2_1091, s3_1157, out a1_3484, out a2_3485, out a3_3486, out a4_1133, out a5_1243, out a6_1123, out a7)
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0000000000015728:
	word64 a3_1508 = Mem842[sp_1014 + 248:word64]
	branch a3_1508 == 0x0000000000000000 l000000000001574C
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0000000000015730:
	gp = fn000000000001654C(ra, gp, s0_1245, 0x0000000000012000, 0x0000000000011B98, 0x0000000000011BA0, 0x0000000000011C60, a3_1508, a4_1133, a5_1243, a6_1123, a7, s2_1091, s3_1157, out a1_3488, out a2_3489, out a3_3490, out a4_1133, out a5_1243, out a6_1123, out a7)
// DataOut:
// DataOut (flags):
// SymbolicIn:

l000000000001574C:
	word64 a3_1539 = Mem842[sp_1014 + 224:word64]
	branch a3_1539 == 0x0000000000000000 l000000000001576C
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0000000000015754:
	gp = fn000000000001654C(ra, gp, s0_1245, 0x0000000000012000, 0x0000000000011B08, 0x0000000000011BB0, 0x0000000000011C60, a3_1539, a4_1133, a5_1243, a6_1123, a7, s2_1091, s3_1157, out a1_3493, out a2_3494, out a3_3495, out a4_1133, out a5_1243, out a6_1123, out a7)
// DataOut:
// DataOut (flags):
// SymbolicIn:

l000000000001576C:
	word64 a3_1569 = Mem842[sp_1014 + 232:word64]
	branch a3_1569 == 0x0000000000000000 l000000000001578C
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0000000000015774:
	gp = fn000000000001654C(ra, gp, s0_1245, 0x0000000000012000, 0x0000000000011B08, 0x0000000000011BC0, 0x0000000000011C60, a3_1569, a4_1133, a5_1243, a6_1123, a7, s2_1091, s3_1157, out a1_3497, out a2_3498, out a3_3499, out a4_1133, out a5_3500, out a6_1123, out a7)
// DataOut:
// DataOut (flags):
// SymbolicIn:

l000000000001578C:
	word64 a5_1599 = (word64) Mem842[sp_1014 + 28:int32]
	branch a5_1599 == 0x0000000000000000 l00000000000157A0
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0000000000015794:
	a5_1599 = (word64) Mem842[sp_1014 + 216:int32]
	a4_1133 = 111
	branch a4_1133 >=u a5_1599 l0000000000015E3C
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0000000000015E3C:
	gp = fn000000000001654C(ra, gp, s0_1245, 0x0000000000012000, 0x0000000000011B08, 0x0000000000011BE0, 0x0000000000011BD0, (int64) (128 - a5_1599), sp_1014 + 152, a5_1599, a6_1123, a7, s2_1091, s3_1157, out a1_1620, out a2_1621, out a3_1622, out a4_1133, out a5_3503, out a6_1123, out a7)
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00000000000157A0:
	gp = fn000000000001654C(ra, gp, s0_1245, 0x0000000000012000, 0x0000000000011B08, 0x0000000000011BE0, 0x0000000000011C60, sp_1014 + 152, a4_1133, a5_1599, a6_1123, a7, s2_1091, s3_1157, out a1_1650, out a2_1651, out a3_1652, out a4_1133, out a5_3502, out a6_1123, out a7)
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00000000000157BC:
	word64 a5_1663 = Mem842[sp_1014 + 120:word64]
	branch a5_1663 == 0x0000000000000000 l0000000000015C08
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0000000000015C08:
	a5_1663 = Mem842[sp_1014 + 136:word64]
	branch a5_1663 != 0x0000000000000000 l00000000000157C4
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0000000000015C10:
	a5_1663 = Mem842[sp_1014 + 144:word64]
	branch a5_1663 != 0x0000000000000000 l00000000000157C4
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0000000000015C18:
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00000000000157C4:
	a0_1668 = DPB(0x000000000000000A, putchar(0x000000000000000A), 0)
	word64 sp_1670 = sp_1014 + 0xFFFFFFFFFFFFFFF8
	word64 a3_1672 = Mem842[sp_1670 + 128:word64]
	branch a3_1672 == 0x0000000000000000 l00000000000157F0
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00000000000157D4:
	gp = fn000000000001654C(ra, gp, s0_1245, 0x0000000000012000, 0x0000000000011B98, 0x0000000000011BF0, 0x0000000000011C60, a3_1672, a4_1133, a5_1663, a6_1123, a7, s2_1091, s3_1157, out a1_1700, out a2_1701, out a3_3491, out a4_1133, out a5_1663, out a6_1123, out a7)
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00000000000157F0:
	word64 a3_1712 = Mem842[sp_1670 + 120:word64]
	branch a3_1712 == 0x0000000000000000 l0000000000015814
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00000000000157F8:
	gp = fn000000000001654C(ra, gp, s0_1245, 0x0000000000012000, 0x0000000000011B98, 0x0000000000011C00, 0x0000000000011C60, a3_1712, a4_1133, a5_1663, a6_1123, a7, s2_1091, s3_1157, out a1_1731, out a2_1732, out a3_3496, out a4_1133, out a5_1663, out a6_1123, out a7)
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0000000000015814:
	word64 a3_1743 = Mem842[sp_1670 + 136:word64]
	branch a3_1743 == 0x0000000000000000 l0000000000015838
// DataOut:
// DataOut (flags):
// SymbolicIn:

l000000000001581C:
	gp = fn000000000001654C(ra, gp, s0_1245, 0x0000000000012000, 0x0000000000011B98, 0x0000000000011C10, 0x0000000000011C60, a3_1743, a4_1133, a5_1663, a6_1123, a7, s2_1091, s3_1157, out a1_1762, out a2_1763, out a3_3501, out a4_1133, out a5_1663, out a6_1123, out a7)
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0000000000015838:
	word64 a3_1774 = Mem842[sp_1670 + 144:word64]
	branch a3_1774 == 0x0000000000000000 l00000000000153DC
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0000000000015840:
	gp = fn000000000001654C(ra, gp, s0_1245, 0x0000000000012000, 0x0000000000011B98, 0x0000000000011C18, 0x0000000000011C60, a3_1774, a4_1133, a5_1663, a6_1123, a7, s2_1091, s3_1157, out a1_1793, out a2_1794, out a3_1795, out a4_3504, out a5_3505, out a6_3506, out a7_3507)
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00000000000153D0:
	branch (word64) Mem104[gp + -2028:int32] == 0x0000000000000000 l000000000001556C
// DataOut:
// DataOut (flags):
// SymbolicIn:

l000000000001556C:
	a0_1813 = DPB(0x0000000000011A08, fwrite(0x0000000000011A08, 0x0000000000000001, 0x0000000000000025, (word64) Mem104[gp + -1920:word64]), 0)
// DataOut:
// DataOut (flags):
// SymbolicIn:

l000000000001538C:
	branch (word64) Mem98[gp + -2028:int32] != 0x0000000000000000 l00000000000153D8
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00000000000153D8:
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0000000000015394:
	a0_1826 = DPB(0x00000000000119D8, fwrite(0x00000000000119D8, 0x0000000000000001, 0x000000000000002E, (word64) Mem98[gp + -1920:word64]), 0)
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00000000000153DC:
	branch a5_7 != Mem1831[gp + -1936:word64] l0000000000015E8C
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0000000000015E8C:
	__stack_chk_fail()
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00000000000153EC:
	return
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0000000000015224:
	branch a0_69 >u 118 l0000000000015200
// DataOut:
// DataOut (flags):
// SymbolicIn:

l000000000001522C:
	word64 a5_1916 = (word64) Mem50[(a0_69 << 0x00000000 >>u 0x0000001E) + 0x00000000000102A0:int32]
	call a5_1916 (retsize: 0;)
		uses: a0:a0_1934,a1:a1_61,a2:0x00000000000119A8,a3:0x00000000000108E0,a4:0x00000000000102A0,a5:a5_1916,a6:a6,a7:a7,fa3:fa3,fa4:fa4,fa5:fa5,gp:gp,ra:ra,s0:s0_42,s1:0x00000000000108E0,s10:s10_45,s11:s11,s2:a1,s3:a0,s4:0x0000000000012000,s5:s5,s6:s6_43,s7:s7_49,s8:0x0000000000001000,s9:s9_44,sp:sp_67,Stack +FFFFFE40:dwLoc01C0_1977,Stack +FFFFFE48:dwLoc01B8_1978,Stack +FFFFFE5C:dwLoc01A4_1976,Stack +FFFFFF88:a5_7,Stack +FFFFFF98:s11,Stack +FFFFFFA0:s10,Stack +FFFFFFA8:s9,Stack +FFFFFFB0:s8,Stack +FFFFFFB8:s7,Stack +FFFFFFC0:s6,Stack +FFFFFFC8:s5,Stack +FFFFFFD0:s4,Stack +FFFFFFD8:s3,Stack +FFFFFFE0:s2,Stack +FFFFFFE8:s1,Stack +FFFFFFF0:s0,Stack +FFFFFFF8:ra,t1:t1,t3:t3,t4:t4,t5:t5,t6:t6
	return
// DataOut:
// DataOut (flags):
// SymbolicIn:

fn0000000000015180_exit:
// DataOut:
// DataOut (flags):
// SymbolicIn:



void fn0000000000015EB8(word64 a0, word64 qwArg00)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  a0:[0..63] Stack +0000:[0..63]
// LiveOut:
// Trashed: a0 a1 a2 a3 a4 a5 a6 gp sp
// Preserved:
fn0000000000015EB8_entry:
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0000000000015EB8:
	word64 a0_18 = (word64) 0x0000000000015180
	a0_25 = DPB(a0_18, __libc_start_main(a0_18, (word64) qwArg00, (word64) (fp + 8), (word64) 0x00000000000182E8, (word64) 0x0000000000018378, (word64) a0, (word64) (fp & -16)), 0)
	return
// DataOut:
// DataOut (flags):
// SymbolicIn:

fn0000000000015EB8_exit:
// DataOut:
// DataOut (flags):
// SymbolicIn:



void fn0000000000015EF0(word64 ra)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  ra:[0..63]
// LiveOut:
// Trashed: a0 a4 a5 ra sp t1
// Preserved:
fn0000000000015EF0_entry:
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0000000000015EF0:
	word64 a4_8 = 14
	branch a4_8 >=u 0x0000000000000007 l0000000000015F20
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0000000000015F0C:
	branch 0x0000000000000000 == 0x0000000000000000 l0000000000015F20
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0000000000015F20:
	return
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0000000000015F18:
	call 0x0000000000000000 (retsize: 0;)
		uses: a0:0x00000000000102A0,a4:a4_8,a5:0x0000000000000007,ra:ra,sp:fp,t1:0x0000000000000000
	return
// DataOut:
// DataOut (flags):
// SymbolicIn:

fn0000000000015EF0_exit:
// DataOut:
// DataOut (flags):
// SymbolicIn:



void fn0000000000015F24()
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse: 
// LiveOut:
// Trashed: a0 a1 a5 sp t1
// Preserved:
fn0000000000015F24_entry:
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0000000000015F24:
	word64 a5_8 = 0
	word64 a1_10 = (a5_8 >>u 0x0000001F) + a5_8
	branch a1_10 >> 0x00000001 == 0x0000000000000000 l0000000000015F60
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0000000000015F4C:
	branch 0x0000000000000000 == 0x0000000000000000 l0000000000015F60
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0000000000015F60:
	return
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0000000000015F58:
	call 0x0000000000000000 (retsize: 0;)
		uses: a0:0x00000000000102A0,a1:a1_10 >> 0x00000001,a5:a5_8,sp:fp,t1:0x0000000000000000
	return
// DataOut:
// DataOut (flags):
// SymbolicIn:

fn0000000000015F24_exit:
// DataOut:
// DataOut (flags):
// SymbolicIn:



void fn0000000000015F64(word64 ra, word64 gp)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  gp:[0..63] ra:[0..63]
// LiveOut:
// Trashed: a0 a4 a5 t1
// Preserved: ra s0 sp
fn0000000000015F64_entry:
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0000000000015F64:
	branch (word64) Mem5[gp + -1900:byte] != 0x0000000000000000 l0000000000015F84
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0000000000015F78:
	fn0000000000015EF0(ra)
	Mem17[gp + 2196:byte] = 1
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0000000000015F84:
	return
// DataOut:
// DataOut (flags):
// SymbolicIn:

fn0000000000015F64_exit:
// DataOut:
// DataOut (flags):
// SymbolicIn:



void fn0000000000015F94(word64 ra, word64 t1, word64 a1)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  a1:[0..63] ra:[0..63] t1:[0..63]
// LiveOut:
// Trashed: a0 a1 a5 ra sp t1
// Preserved:
fn0000000000015F94_entry:
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0000000000015F94:
	branch Mem0[0x0000000000019E28:word64] != 0x0000000000000000 l0000000000015FA8
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0000000000015FA8:
	branch 0x0000000000000000 == 0x0000000000000000 l0000000000015FA4
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0000000000015FB4:
	call 0x0000000000000000 (retsize: 0;)
		uses: a0:0x0000000000019E28,a1:a1,a5:0x0000000000000000,ra:ra,sp:fp + -16,Stack +0008:ra,t1:t1
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0000000000015FC8_thunk_fn0000000000015F24:
	fn0000000000015F24()
	return
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0000000000015FA4:
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0000000000015FA4_thunk_fn0000000000015F24:
	fn0000000000015F24()
	return
// DataOut:
// DataOut (flags):
// SymbolicIn:

fn0000000000015F94_exit:
// DataOut:
// DataOut (flags):
// SymbolicIn:



word64 fn0000000000015FCC(word64 gp, word64 a0, ptr64 & a2Out, ptr64 & a3Out)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  a0:[0..63] gp:[0..63]
// LiveOut: a1 a2 a3
// Trashed: a0 a1 a2 a3 ra s0 sp
// Preserved:
fn0000000000015FCC_entry:
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0000000000015FCC:
	word64 a3_18 = (word64) Mem7[gp + -1920:word64]
	branch a0 != 0x0000000000000000 l0000000000016090
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0000000000016090:
	a0_19 = DPB(0x0000000000010BE0, fwrite(0x0000000000010BE0, 0x0000000000000001, 0x000000000000001A, a3_18), 0)
	a0_30 = DPB(0x0000000000010C00, fwrite(0x0000000000010C00, 0x0000000000000001, 0x0000000000000036, (word64) Mem7[gp + -1920:word64]), 0)
	a0_41 = DPB(0x0000000000010C38, fwrite(0x0000000000010C38, 0x0000000000000001, 0x000000000000004D, (word64) Mem7[gp + -1920:word64]), 0)
	a0_52 = DPB(0x0000000000010C88, fwrite(0x0000000000010C88, 0x0000000000000001, 0x000000000000003E, (word64) Mem7[gp + -1920:word64]), 0)
	a0_63 = DPB(0x0000000000010CC8, fwrite(0x0000000000010CC8, 0x0000000000000001, 0x000000000000004F, (word64) Mem7[gp + -1920:word64]), 0)
	a0_74 = DPB(0x0000000000010D18, fwrite(0x0000000000010D18, 0x0000000000000001, 0x000000000000004F, (word64) Mem7[gp + -1920:word64]), 0)
	a0_85 = DPB(0x0000000000010D68, fwrite(0x0000000000010D68, 0x0000000000000001, 0x000000000000002A, (word64) Mem7[gp + -1920:word64]), 0)
	a0_96 = DPB(0x0000000000010D98, fwrite(0x0000000000010D98, 0x0000000000000001, 0x000000000000004C, (word64) Mem7[gp + -1920:word64]), 0)
	a0_107 = DPB(0x0000000000010DE8, fwrite(0x0000000000010DE8, 0x0000000000000001, 0x000000000000004D, (word64) Mem7[gp + -1920:word64]), 0)
	a0_118 = DPB(0x0000000000010E38, fwrite(0x0000000000010E38, 0x0000000000000001, 0x000000000000004D, (word64) Mem7[gp + -1920:word64]), 0)
	a0_124 = DPB(0x000000000000000A, fputc(0x000000000000000A, (word64) Mem7[gp + -1920:word64]), 0)
	a0_135 = DPB(0x0000000000010E88, fwrite(0x0000000000010E88, 0x0000000000000001, 0x0000000000000017, (word64) Mem7[gp + -1920:word64]), 0)
	a0_146 = DPB(0x0000000000010EA0, fwrite(0x0000000000010EA0, 0x0000000000000001, 0x0000000000000047, (word64) Mem7[gp + -1920:word64]), 0)
	a0_157 = DPB(0x0000000000010EE8, fwrite(0x0000000000010EE8, 0x0000000000000001, 0x0000000000000039, (word64) Mem7[gp + -1920:word64]), 0)
	a0_168 = DPB(0x0000000000010F28, fwrite(0x0000000000010F28, 0x0000000000000001, 0x000000000000003A, (word64) Mem7[gp + -1920:word64]), 0)
	a0_179 = DPB(0x0000000000010F68, fwrite(0x0000000000010F68, 0x0000000000000001, 0x0000000000000039, (word64) Mem7[gp + -1920:word64]), 0)
	a0_190 = DPB(0x0000000000010FA8, fwrite(0x0000000000010FA8, 0x0000000000000001, 0x000000000000004D, (word64) Mem7[gp + -1920:word64]), 0)
	a0_201 = DPB(0x0000000000010FF8, fwrite(0x0000000000010FF8, 0x0000000000000001, 0x000000000000004D, (word64) Mem7[gp + -1920:word64]), 0)
	a0_212 = DPB(0x0000000000011048, fwrite(0x0000000000011048, 0x0000000000000001, 0x000000000000004D, (word64) Mem7[gp + -1920:word64]), 0)
	a0_223 = DPB(0x0000000000011098, fwrite(0x0000000000011098, 0x0000000000000001, 0x000000000000002E, (word64) Mem7[gp + -1920:word64]), 0)
	a0_234 = DPB(0x00000000000110C8, fwrite(0x00000000000110C8, 0x0000000000000001, 0x0000000000000048, (word64) Mem7[gp + -1920:word64]), 0)
	a0_245 = DPB(0x0000000000011118, fwrite(0x0000000000011118, 0x0000000000000001, 0x000000000000002D, (word64) Mem7[gp + -1920:word64]), 0)
	a0_256 = DPB(0x0000000000011148, fwrite(0x0000000000011148, 0x0000000000000001, 0x0000000000000043, (word64) Mem7[gp + -1920:word64]), 0)
	a0_267 = DPB(0x0000000000011190, fwrite(0x0000000000011190, 0x0000000000000001, 0x0000000000000040, (word64) Mem7[gp + -1920:word64]), 0)
	a0_278 = DPB(0x00000000000111D8, fwrite(0x00000000000111D8, 0x0000000000000001, 0x0000000000000048, (word64) Mem7[gp + -1920:word64]), 0)
	a0_289 = DPB(0x0000000000011228, fwrite(0x0000000000011228, 0x0000000000000001, 0x000000000000002E, (word64) Mem7[gp + -1920:word64]), 0)
	a0_295 = DPB(0x000000000000000A, fputc(0x000000000000000A, (word64) Mem7[gp + -1920:word64]), 0)
	a0_306 = DPB(0x0000000000011258, fwrite(0x0000000000011258, 0x0000000000000001, 0x000000000000000F, (word64) Mem7[gp + -1920:word64]), 0)
	a0_317 = DPB(0x0000000000011268, fwrite(0x0000000000011268, 0x0000000000000001, 0x0000000000000057, (word64) Mem7[gp + -1920:word64]), 0)
	a0_328 = DPB(0x00000000000112C0, fwrite(0x00000000000112C0, 0x0000000000000001, 0x000000000000003C, (word64) Mem7[gp + -1920:word64]), 0)
	a0_339 = DPB(0x0000000000011300, fwrite(0x0000000000011300, 0x0000000000000001, 0x0000000000000044, (word64) Mem7[gp + -1920:word64]), 0)
	a0_350 = DPB(0x0000000000011348, fwrite(0x0000000000011348, 0x0000000000000001, 0x000000000000003A, (word64) Mem7[gp + -1920:word64]), 0)
	a0_361 = DPB(0x0000000000011388, fwrite(0x0000000000011388, 0x0000000000000001, 0x0000000000000039, (word64) Mem7[gp + -1920:word64]), 0)
	a0_375 = DPB(0x00000000000113C8, fwrite(0x00000000000113C8, 0x0000000000000001, 0x000000000000003E, (word64) Mem7[gp + -1920:word64]), 0)
	a2Out = <invalid>
	a3Out = <invalid>
	return 0x0000000000000001
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0000000000015FE0:
	a0_383 = DPB(0x0000000000011408, fwrite(0x0000000000011408, 0x0000000000000001, 0x000000000000004D, a3_18), 0)
	a0_394 = DPB(0x0000000000011458, fwrite(0x0000000000011458, 0x0000000000000001, 0x000000000000003E, (word64) Mem7[gp + -1920:word64]), 0)
	a0_405 = DPB(0x0000000000011498, fwrite(0x0000000000011498, 0x0000000000000001, 0x0000000000000041, (word64) Mem7[gp + -1920:word64]), 0)
	a0_416 = DPB(0x00000000000114E0, fwrite(0x00000000000114E0, 0x0000000000000001, 0x000000000000004C, (word64) Mem7[gp + -1920:word64]), 0)
	a0_427 = DPB(0x0000000000011530, fwrite(0x0000000000011530, 0x0000000000000001, 0x0000000000000041, (word64) Mem7[gp + -1920:word64]), 0)
	a0_438 = DPB(0x0000000000011578, fwrite(0x0000000000011578, 0x0000000000000001, 0x0000000000000029, (word64) Mem7[gp + -1920:word64]), 0)
	a0_452 = DPB(0x00000000000115A8, fwrite(0x00000000000115A8, 0x0000000000000001, 0x000000000000001E, (word64) Mem7[gp + -1920:word64]), 0)
	a2Out = <invalid>
	a3Out = <invalid>
	return 0x0000000000000001
// DataOut:
// DataOut (flags):
// SymbolicIn:

fn0000000000015FCC_exit:
// DataOut:
// DataOut (flags):
// SymbolicIn:



word64 fn00000000000163B0(word64 ra, word64 gp, word64 s0, word64 s1, word64 a0, word64 s2, word64 s3, word64 s4, word64 s5, word64 s6, word64 s7, word64 s8, word64 s9, ptr64 & a0Out, ptr64 & a4Out, ptr64 & a5Out)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  a0:[0..63] gp:[0..63] ra:[0..63] s0:[0..63] s1:[0..63] s2:[0..63] s3:[0..63] s4:[0..63] s5:[0..63] s6:[0..63] s7:[0..63] s8:[0..63] s9:[0..63]
// LiveOut: a0 a4 a5 gp
// Trashed: a0 a1 a2 a3 a4 a5 gp
// Preserved: ra s0 s1 s2 s3 s4 s5 s6 s7 s8 s9 sp
fn00000000000163B0_entry:
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00000000000163B0:
	word64 a5_123
	word64 a5_27 = Mem25[gp + -1936:word64]
	word64 a4_130 = (word64) Mem25[a0:byte]
	word64 a2_138 = 0x0000000000000080
	word64 a1_141 = 0x0000000000000001
	word64 a0_41 = (word64) (fp + -232)
	word64 s3_37 = 16
	word64 s0_38 = 1
	word64 s2_40 = a0 + 1
	a0_45 = DPB(a0_41, __sprintf_chk(a0_41, 0x0000000000000001, 0x0000000000000080, 0x00000000000115C8, 0x00000000), 0)
	word64 sp_46 = fp + 0xFFFFFFFFFFFFFF08
	word64 s1_47 = fp + 0xFFFFFFFFFFFFFF12
	word64 s6_48 = 128
	word64 s5_49 = 1
	word64 s9_50 = 15
	word64 s7_51 = 58
	a5_123 = a5_27
	branch s3_37 == 1 l000000000001646C
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0000000000016430:
	a2_138 = (word64) s6_48 (alias)
	a1_141 = (word64) s5_49 (alias)
	word64 a0_63 = (word64) s1_47
	a0_67 = DPB(a0_63, __sprintf_chk(a0_63, a1_141, a2_138, 0x00000000000115C8, 0x00000000), 0)
	sp_46 = sp_46 + 0xFFFFFFFFFFFFFFF8
	a5_123 = s0_38 & 1
	a4_130 = s1_47 + 2
	branch a5_123 == 0x0000000000000000 l00000000000164B8
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00000000000164B8:
	s1_47 = a4_130
	s2_40 = s2_40 + 1
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0000000000016454:
	branch s0_38 == s9_50 l00000000000164C4
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00000000000164C4:
	s1_47 = a4_130
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0000000000016458:
	Mem78[s1_47 + 2:byte] = s7_51
	s2_40 = s2_40 + 1
	s1_47 = s1_47 + 3
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0000000000016464:
	s0_38 = (int64) ((word32) s0_38 + 1)
	branch s0_38 != s3_37 l0000000000016430
// DataOut:
// DataOut (flags):
// SymbolicIn:

l000000000001646C:
	Mem87[s1_47:byte] = 0x0000000000000000
	word64 gp_129
	call __strdup (retsize: 0;)
		uses: a0:(word64) (sp_88 + 8),a1:a1_141,a2:a2_138,a3:0x00000000000115C8,a4:a4_130,a5:a5_123,gp:gp,ra:ra,s0:s0_92,s1:s1_85,s2:s2_95,s3:s3_37,s4:0x0000000000011000,s5:s5_49,s6:s6_48,s7:s7_51,s8:s8,s9:s9_50,sp:sp_88,Stack +FFFFFF98:a5_27,Stack +FFFFFFA8:s9,Stack +FFFFFFB0:s8,Stack +FFFFFFB8:s7,Stack +FFFFFFC0:s6,Stack +FFFFFFC8:s5,Stack +FFFFFFD0:s4,Stack +FFFFFFD8:s3,Stack +FFFFFFE0:s2,Stack +FFFFFFE8:s1,Stack +FFFFFFF0:s0,Stack +FFFFFFF8:ra
		defs: gp:gp_129
	word64 a5_145 = Mem87[gp_129 + -1936:word64]
	branch a5_27 != a5_145 l00000000000164CC
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00000000000164CC:
	__stack_chk_fail()
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0000000000016484:
	a0Out = <invalid>
	a4Out = a5_27
	a5Out = a5_145
	return gp_129
// DataOut:
// DataOut (flags):
// SymbolicIn:

fn00000000000163B0_exit:
// DataOut:
// DataOut (flags):
// SymbolicIn:



word64 fn00000000000164D0(word64 a0, word64 a1, ptr64 & a1Out, ptr64 & a2Out)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  a0:[0..63] a1:[0..63]
// LiveOut: a0 a1 a2
// Trashed: a0 a1 a2
// Preserved: ra s0 s1 s2 sp
fn00000000000164D0_entry:
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00000000000164D0:
	word64 a0_24
	word64 a0_23 = (word64) DPB(0x00000000000115D0, open(0x00000000000115D0, 0x0000000000000000), 0)
	word64 a0_29 = (word64) a0_23
	branch a0_23 < 0x0000000000000000 l0000000000016544
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0000000000016544:
	a0_24 = -1
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0000000000016500:
	word64 a0_34 = (word64) DPB(a0_29, read(a0_29, (word64) a0, (word64) (a1 << 0x00000000 >>u 0x00000000)), 0)
	word64 a0_37 = (word64) a0_23
	a0_38 = DPB(a0_37, close(a0_37), 0)
	a0_24 = (int64) (0x0000000000000000 - (word64) ((int64) (a0_34 - a1) != 0x0000000000000000))
// DataOut:
// DataOut (flags):
// SymbolicIn:

l000000000001652C:
	a1Out = <invalid>
	a2Out = <invalid>
	return a0_24
// DataOut:
// DataOut (flags):
// SymbolicIn:

fn00000000000164D0_exit:
// DataOut:
// DataOut (flags):
// SymbolicIn:



word64 fn000000000001654C(word64 ra, word64 gp, word64 s0, word64 s1, word64 a0, word64 a1, word64 a2, word64 a3, word64 a4, word64 a5, word64 a6, word64 a7, word64 s2, word64 s3, ptr64 & a1Out, ptr64 & a2Out, ptr64 & a3Out, ptr64 & a4Out, ptr64 & a5Out, ptr64 & a6Out, ptr64 & a7Out)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  a0:[0..63] a1:[0..63] a2:[0..63] a3:[0..63] a4:[0..63] a5:[0..63] a6:[0..63] a7:[0..63] gp:[0..63] ra:[0..63] s0:[0..63] s1:[0..63] s2:[0..63] s3:[0..63]
// LiveOut: a1 a2 a3 a4 a5 a6 a7 gp
// Trashed: a0 a1 a2 a3 a4 a5 a6 a7 gp t1 t3
// Preserved: ra s0 s1 s2 s3 sp
fn000000000001654C_entry:
// DataOut:
// DataOut (flags):
// SymbolicIn:

l000000000001654C:
	word64 t3_7 = Mem5[gp + -1936:word64]
	word64 sp_37
	word64 gp_40
	word64 s2_42
	word64 s3_43
	word64 a0_47
	word64 a6_54
	word64 a7_55
	call __vasprintf_chk (retsize: 0;)
		uses: a0:(word64) (fp + -112),a1:0x0000000000000001,a2:a2,a3:(word64) (fp + -40),a4:a4,a5:a5,a6:a6,a7:a7,gp:gp,ra:ra,s0:s0,s1:s1,s2:a1,s3:a0,sp:fp + -128,Stack +0008:fp + -40,Stack +0010:0x0000000000000000,Stack +0018:t3_7,Stack +0028:s3,Stack +0030:s2,Stack +0038:s1,Stack +0040:s0,Stack +0048:ra,Stack +0058:a3,Stack +0060:a4,Stack +0068:a5,Stack +0070:a6,Stack +0078:a7,t1:fp + -40,t3:t3_7
		defs: a0:a0_47,a6:a6_54,a7:a7_55,gp:gp_40,s2:s2_42,s3:s3_43,sp:sp_37
	branch (word64) a0_47 < 0x0000000000000000 l00000000000165D8
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00000000000165A8:
	word64 a0_61 = (word64) s2_42
	a0_63 = DPB(a0_61, fputs(a0_61, (word64) Mem36[gp_40 + -1912:word64]), 0)
	word64 sp_64 = sp_37 + 0xFFFFFFFFFFFFFFF8
	branch (word64) Mem36[gp_40 + -2032:int32] != 0x0000000000000000 l000000000001661C
// DataOut:
// DataOut (flags):
// SymbolicIn:

l000000000001661C:
	word64 a0_68 = (word64) s3_43
	a0_70 = DPB(a0_68, fputs(a0_68, (word64) Mem36[gp_40 + -1912:word64]), 0)
	sp_64 = sp_37 + 0xFFFFFFFFFFFFFFF0
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00000000000165BC:
	word64 a0_77 = (word64) Mem36[sp_64 + 16:word64]
	a0_79 = DPB(a0_77, fputs(a0_77, (word64) Mem36[gp_40 + -1912:word64]), 0)
	word64 sp_80 = sp_64 + 0xFFFFFFFFFFFFFFF8
	branch (word64) Mem36[gp_40 + -2032:int32] != 0x0000000000000000 l0000000000016600
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0000000000016600:
	a0_91 = DPB(0x00000000000115E0, fwrite(0x00000000000115E0, 0x0000000000000001, 0x0000000000000004, (word64) Mem36[gp_40 + -1912:word64]), 0)
	sp_80 = sp_80 + 0xFFFFFFFFFFFFFFF8
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00000000000165D0:
	free((word64) Mem36[sp_80 + 16:word64])
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00000000000165D8:
	word64 a5_103 = Mem36[gp_40 + -1936:word64]
	branch t3_7 != a5_103 l000000000001662C
// DataOut:
// DataOut (flags):
// SymbolicIn:

l000000000001662C:
	__stack_chk_fail()
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00000000000165E4:
	a1Out = <invalid>
	a2Out = <invalid>
	a3Out = <invalid>
	a4Out = t3_7
	a5Out = a5_103
	a6Out = a6_54
	a7Out = a7_55
	return gp_40
// DataOut:
// DataOut (flags):
// SymbolicIn:

fn000000000001654C_exit:
// DataOut:
// DataOut (flags):
// SymbolicIn:



word64 fn0000000000016630(word64 gp, word64 a0, word64 a1, ptr64 & s1Out, ptr64 & a0Out, ptr64 & a1Out, ptr64 & a2Out, ptr64 & a3Out)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  a0:[0..63] a1:[0..63] gp:[0..63]
// LiveOut: a0 a1 a2 a3 s1 sp
// Trashed: a0 a1 a2 a3 a4 a5 ra s0 s1 s2 s3 sp
// Preserved:
fn0000000000016630_entry:
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0000000000016630:
	word64 a5_35
	word64 a0_24 = (word64) __errno_location()
	Mem25[a0_24:word32] = 0x0000000000000000
	word64 a0_30 = (word64) a0
	word64 a2_27 = 0
	word64 a0_36 = (word64) DPB(a0_30, strtol(a0_30), 0)
	branch qwLoc50 == 0x0000000000000000 l000000000001668C
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0000000000016680:
	branch a0 == qwLoc50 l000000000001668C
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0000000000016684:
	branch (word64) Mem25[qwLoc50:byte] == 0x0000000000000000 l00000000000166C4
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00000000000166C4:
	a5_35 = (word64) Mem25[a0_24:int32]
	branch a5_35 != 0x0000000000000000 l0000000000016690
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00000000000166CC:
	word64 a4_37 = (int64) (word32) a0_36
	branch a0_36 != a4_37 l00000000000166E0
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00000000000166E0:
	a5_35 = -34
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00000000000166D8:
	Mem40[a1:word32] = a4_37
// DataOut:
// DataOut (flags):
// SymbolicIn:

l000000000001668C:
	a5_35 = (word64) Mem25[a0_24:int32]
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0000000000016690:
	branch a5_35 <= 0x0000000000000000 l00000000000166E8
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00000000000166E8:
	a5_35 = -22
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0000000000016694:
	a5_35 = (int64) (0x0000000000000000 - a5_35)
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0000000000016698:
	branch qwLoc48 != Mem50[gp + -1936:word64] l00000000000166F0
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00000000000166F0:
	__stack_chk_fail()
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00000000000166A8:
	s1Out = s3
	a0Out = a5_35
	a1Out = fp + 0xFFFFFFFFFFFFFFB8
	a2Out = a2_27
	a3Out = qwLoc48
	return fp + 0xFFFFFFFFFFFFFFF0
// DataOut:
// DataOut (flags):
// SymbolicIn:

fn0000000000016630_exit:
// DataOut:
// DataOut (flags):
// SymbolicIn:



word64 fn00000000000166F4(word64 gp, word64 a0, word64 a1, word64 a2, ptr64 & a1Out, ptr64 & a2Out, ptr64 & a3Out)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  a0:[0..63] a1:[0..63] a2:[0..63] gp:[0..63]
// LiveOut: a0 a1 a2 a3
// Trashed: a0 a1 a2 a3 a4 a5
// Preserved: ra s0 s1 s2 s3 s4 sp
fn00000000000166F4_entry:
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00000000000166F4:
	word64 a0_111
	word64 sp_49
	word64 sp_3 = fp + -64
	word64 a5_7 = Mem5[gp + -1936:word64]
	word64 s1_21 = a0
	branch (word64) Mem9[a0:int32] != 0x0000000000000000 l00000000000167C8
// DataOut:
// DataOut (flags):
// SymbolicIn:

l000000000001672C:
	sp_3 = fp + 0xFFFFFFFFFFFFFFB8
	branch (word64) strchr((word64) a1, 0x000000000000002E) == 0x0000000000000000 l00000000000167C8
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00000000000167C8:
	word64 a0_38
	sp_49 = fn0000000000016630(gp, a1, sp_3, out s1_21, out a0_38, out a1_39, out a2_40, out a3)
	branch a0_38 == 0x0000000000000000 l0000000000016794
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00000000000167D8:
// DataOut:
// DataOut (flags):
// SymbolicIn:

l000000000001673C:
	sp_49 = fp + 0xFFFFFFFFFFFFFFB0
	branch (word64) DPB(0x0000000000000002, inet_pton(0x0000000000000002, (word64) a1, (word64) (fp + 0xFFFFFFFFFFFFFFB8)), 0) == 0x0000000000000000 l000000000001678C
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0000000000016750:
	word64 a0_60 = fn00000000000182B4((word64) dwLoc50, out a3, out a4_251, out a5_252)
	branch a0_60 == 0x0000000000000000 l0000000000016790
// DataOut:
// DataOut (flags):
// SymbolicIn:

l000000000001675C:
	branch (a0_60 & 1) != 0x0000000000000000 l0000000000016778
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0000000000016764:
	word64 a5_66 = (int64) (int32) (a0_60 >>u 0x00000001)
	branch a5_66 == 0x0000000000000000 l0000000000016790
// DataOut:
// DataOut (flags):
// SymbolicIn:

l000000000001676C:
	branch (a5_66 & 1) == 0x0000000000000000 l0000000000016820
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0000000000016820:
	a0_60 = (int64) (int32) (a0_60 >>u 0x00000002)
	branch a0_60 != 0x0000000000000000 l000000000001675C
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0000000000016828:
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0000000000016774:
	a0_60 = a5_66
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0000000000016778:
	a0_60 = (int64) (int32) (a0_60 >>u 0x00000001)
	branch a0_60 == 0x0000000000000000 l0000000000016790
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0000000000016784:
	branch (a0_60 & 1) != 0x0000000000000000 l0000000000016778
// DataOut:
// DataOut (flags):
// SymbolicIn:

l000000000001678C:
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0000000000016790:
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0000000000016794:
	word64 a5_86 = (word64) Mem84[sp_49:int32]
	branch a2 == 0x0000000000000000 l00000000000167DC
// DataOut:
// DataOut (flags):
// SymbolicIn:

l000000000001679C:
	branch a5_86 <= 32 l00000000000167DC
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00000000000167DC:
	a0_111 = a5_86
	branch a5_86 < 0x0000000000000000 l00000000000167C0
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00000000000167E4:
	branch (word64) Mem84[s1_21:int32] != 0x0000000000000000 l00000000000167B8
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00000000000167EC:
	branch a5_86 > 32 l00000000000167C0
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00000000000167A8:
	branch (word64) Mem84[s1_21:int32] != 0x0000000000000000 l00000000000167B8
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00000000000167B0:
	Mem108[s1_21:word32] = 1
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00000000000167B8:
	a0_111 = a5_86
	branch a5_86 <= 128 l00000000000167F4
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00000000000167C0:
	a0_111 = -1
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00000000000167F4:
	branch a5_7 != Mem116[gp + -1936:word64] l000000000001682C
// DataOut:
// DataOut (flags):
// SymbolicIn:

l000000000001682C:
	__stack_chk_fail()
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0000000000016800:
	a1Out = <invalid>
	a2Out = <invalid>
	a3Out = a3
	return a0_111
// DataOut:
// DataOut (flags):
// SymbolicIn:

fn00000000000166F4_exit:
// DataOut:
// DataOut (flags):
// SymbolicIn:



word64 fn0000000000016830(word64 gp, word64 a0, ptr64 & a4Out, ptr64 & a5Out)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  a0:[0..63] gp:[0..63]
// LiveOut: a0 a4 a5
// Trashed: a0 a4 a5
// Preserved: a3 ra s0 sp
fn0000000000016830_entry:
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0000000000016830:
	word64 a5_7 = Mem5[gp + -1936:word64]
	word32 dwLoc20_33 = 0x0000000000000000
	branch a0 == 0x0000000000000000 l0000000000016864
// DataOut:
// DataOut (flags):
// SymbolicIn:

l000000000001684C:
	dwLoc20_33 = fn00000000000182B4((int64) (int32) (-1 << (int64) (32 - a0)), out a3_44, out a4_45, out a5_46)
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0000000000016864:
	word64 a5_26 = Mem23[gp + -1936:word64]
	word64 a0_27 = (word64) dwLoc20_33
	branch a5_7 != a5_26 l0000000000016884
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0000000000016884:
	__stack_chk_fail()
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0000000000016874:
	a4Out = a5_7
	a5Out = a5_26
	return a0_27
// DataOut:
// DataOut (flags):
// SymbolicIn:

fn0000000000016830_exit:
// DataOut:
// DataOut (flags):
// SymbolicIn:



void fn00000000000168B8(word64 gp, word64 a0, word64 a1)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  a0:[0..63] a1:[0..63] gp:[0..63]
// LiveOut:
// Trashed: a0 a4 a5
// Preserved: ra s0 sp
fn00000000000168B8_entry:
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00000000000168B8:
	fn0000000000016830(gp, a1, out a4_22, out a5_23)
	return
// DataOut:
// DataOut (flags):
// SymbolicIn:

fn00000000000168B8_exit:
// DataOut:
// DataOut (flags):
// SymbolicIn:



word64 fn00000000000168E4(word64 ra, word64 gp, word64 t1, word64 s0, word64 s1, word64 a0, word64 a1, word64 t3, word64 t4, word64 t5, ptr64 & a1Out, ptr64 & a2Out, ptr64 & a3Out)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  a0:[0..63] a1:[0..63] gp:[0..63] ra:[0..63] s0:[0..63] s1:[0..63] t1:[0..63] t3:[0..63] t4:[0..63] t5:[0..63]
// LiveOut: a0 a1 a2 a3
// Trashed: a0 a1 a2 a3 a5 a6 a7 t1 t3 t4 t5
// Preserved: gp ra s0 s1 sp
fn00000000000168E4_entry:
	word64 a1_53 = (word64) a1
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00000000000168E4:
	word64 a0_115
	word64 a2_113
	word64 a1_36
	word64 sp_43
	word64 a0_73
	word64 t1_20
	word64 t3_19
	word64 t4_18
	word64 t5_17
	word64 a4_7 = Mem5[gp + -1936:word64]
	branch a0 == 2 l0000000000016984
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0000000000016984:
	t5_17 = (word64) Mem13[a1:byte]
	t4_18 = (word64) Mem13[a1 + 1:byte]
	t3_19 = (word64) Mem13[a1 + 2:byte]
	t1_20 = (word64) Mem13[a1 + 3:byte]
	a2_113 = (word64) (gp + -1896) (alias)
	a1_36 = 0x0000000000000010 (alias)
	word64 a0_35 = (word64) (fp + -88)
	qwLoc50 = 0x0000000000000000
	a0_73 = (word64) DPB(a0_35, getnameinfo(a0_35, 0x0000000000000010, a2_113, 0x0000000000000401, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000), 0) (alias)
	sp_43 = fp + 0xFFFFFFFFFFFFFF98
	t5 = t5_17
	t4 = t4_18
	t3 = t3_19
	t1 = t1_20
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0000000000016908:
	branch a0 == 10 l0000000000016934
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0000000000016934:
	memcpy((word64) (fp + -64), a1_53, 0x0000000000000010)
	a2_113 = (word64) (gp + -1896) (alias)
	a1_36 = 0x000000000000001C (alias)
	word64 a0_64 = (word64) (fp + 0xFFFFFFFFFFFFFFB0)
	qwLoc40 = 0x0000000000000000
	qwLoc38 = 0x0000000000000000
	dwLoc30 = 0x0000000000000000
	a0_73 = (word64) DPB(a0_64, getnameinfo(a0_64, 0x000000000000001C, a2_113, 0x0000000000000401, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000), 0) (alias)
	sp_43 = fp + 0xFFFFFFFFFFFFFF90
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0000000000016974:
	branch a0_73 != 0x0000000000000000 l0000000000016910
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0000000000016978:
	word64 a0_94
	call __strdup (retsize: 0;)
		uses: a0:(word64) (gp + -1896),a1:a1_98,a2:a2_113,a3:0x0000000000000401,a4:0x0000000000000000,a5:0x0000000000000000,a6:0x0000000000000000,a7:a0,gp:gp,ra:ra,s0:s0,s1:s1,sp:sp_78,Stack +FFFFFFA8:qwLoc58_149,Stack +FFFFFFAC:qwLoc58_149,Stack +FFFFFFAD:qwLoc58_149,Stack +FFFFFFAE:qwLoc58_149,Stack +FFFFFFAF:qwLoc58_149,Stack +FFFFFFB0:qwLoc50_156,Stack +FFFFFFB8:qwLoc48_158,Stack +FFFFFFC0:qwLoc40_161,Stack +FFFFFFC8:qwLoc38_163,Stack +FFFFFFD0:dwLoc30_165,Stack +FFFFFFD8:a4_7,Stack +FFFFFFE8:s1,Stack +FFFFFFF0:s0,Stack +FFFFFFF8:ra,t1:t1_106,t3:t3_103,t4:t4_100,t5:t5_95
		defs: a0:a0_94,gp:gp_84
	qwLoc58 = DPB(DPB(DPB(DPB((word64) a0, t5_17, 4), t4_18, 5), t3_19, 6), t1_20, 7) (alias)
	qwLoc48 = (word64) a0 (alias)
	a0_115 = (word64) a0_94 (alias)
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0000000000016910:
	a0_115 = 0
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0000000000016914:
	branch a4_7 != Mem118[gp + -1936:word64] l00000000000169D4
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00000000000169D4:
	__stack_chk_fail()
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0000000000016920:
	a1Out = <invalid>
	a2Out = <invalid>
	a3Out = <invalid>
	return a0_115
// DataOut:
// DataOut (flags):
// SymbolicIn:

fn00000000000168E4_exit:
// DataOut:
// DataOut (flags):
// SymbolicIn:



word64 fn00000000000169D8(word64 ra, word64 gp, word64 s0, word64 s1, word64 a0, word64 a1, word64 s2, word64 s3, word64 s4, ptr64 & a1Out, ptr64 & a2Out, ptr64 & a3Out)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  a0:[0..3] a1:[0..63] gp:[0..63] ra:[0..63] s0:[0..63] s1:[0..63] s2:[0..63] s3:[0..63] s4:[0..63]
// LiveOut: a0 a1 a2 a3
// Trashed: a0 a1 a2 a3 a4 a5
// Preserved: gp ra s0 s1 s2 s3 s4 sp
fn00000000000169D8_entry:
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00000000000169D8:
	word64 a0_110
	word64 a5_7 = Mem5[gp + -1936:word64]
	word64 a0_33 = (word64) a1
	word64 sp_38 = fp + 0xFFFFFFFFFFFFFF88
	branch (word64) DPB(a0_33, getaddrinfo(a0_33, 0x0000000000000000, (word64) (fp + -104), (word64) (fp + -112)), 0) != 0x0000000000000000 l0000000000016AD8
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0000000000016AD8:
	a0_110 = 0x0000000000000000 (alias)
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0000000000016A34:
	word64 s0_41 = qwLoc78
	branch qwLoc78 == 0x0000000000000000 l0000000000016AA0
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0000000000016A3C:
	word64 s3_43 = 2
	word64 s2_44 = 64
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0000000000016A68:
	word64 a2_113
	word64 a3_111
	word64 a1_107
	word64 a0_47 = (word64) Mem32[s0_41 + 4:int32]
	word64 a0_55 = (word64) a0_47
	word64 a1_48 = Mem32[s0_41 + 24:word64]
	branch a0_47 != s3_43 l0000000000016A4C
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0000000000016A4C:
	a1_107 = (word64) (a1_48 + 8) (alias)
	a3_111 = (word64) s2_44 (alias)
	a2_113 = (word64) (gp + -864) (alias)
	sp_38 = sp_38 + 0xFFFFFFFFFFFFFFF8
	branch (word64) inet_ntop(a0_55, a1_107, a2_113, a3_111) != 0x0000000000000000 l0000000000016A88
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0000000000016A74:
	a1_107 = (word64) (a1_48 + 4) (alias)
	a3_111 = (word64) s2_44 (alias)
	a2_113 = (word64) (gp + -864) (alias)
	sp_38 = sp_38 + 0xFFFFFFFFFFFFFFF8
	branch (word64) inet_ntop(a0_55, a1_107, a2_113, a3_111) == 0x0000000000000000 l0000000000016A60
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0000000000016A60:
	s0_41 = Mem32[s0_41 + 40:word64]
	branch s0_41 == 0x0000000000000000 l0000000000016A9C
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0000000000016A9C:
	s0_41 = Mem32[sp_38:word64]
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0000000000016AA0:
	freeaddrinfo((word64) s0_41)
	a0_110 = 0x0000000000000000 (alias)
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0000000000016A88:
	freeaddrinfo((word64) Mem32[sp_38:word64])
	word64 qwLoc68_163 = DPB(0x0000000000000000, a0, 4)
	call __strdup (retsize: 0;)
		uses: a0:(word64) (gp + -864),a1:a1_107,a2:a2_113,a3:a3_111,a4:a1,a5:a5_7,gp:gp,ra:ra,s0:s0_45,s1:gp + -864,s2:s2_44,s3:s3_43,s4:s4,sp:sp_83 + 0xFFFFFFFFFFFFFFF8,Stack +FFFFFF88:qwLoc78,Stack +FFFFFF98:qwLoc68_163,Stack +FFFFFF9C:qwLoc68_163,Stack +FFFFFFA0:0x0000000000000000,Stack +FFFFFFA8:0x0000000000000000,Stack +FFFFFFB0:0x0000000000000000,Stack +FFFFFFB8:0x0000000000000000,Stack +FFFFFFC0:0x0000000000000000,Stack +FFFFFFC8:a5_7,Stack +FFFFFFD0:s4,Stack +FFFFFFD8:s3,Stack +FFFFFFE0:s2,Stack +FFFFFFE8:s1,Stack +FFFFFFF0:s0,Stack +FFFFFFF8:ra
		defs: a0:a0_110,gp:gp_102
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0000000000016AAC:
	branch a5_7 != Mem32[gp + -1936:word64] l0000000000016AE0
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0000000000016AE0:
	__stack_chk_fail()
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0000000000016AB8:
	a1Out = <invalid>
	a2Out = <invalid>
	a3Out = <invalid>
	return a0_110
// DataOut:
// DataOut (flags):
// SymbolicIn:

fn00000000000169D8_exit:
// DataOut:
// DataOut (flags):
// SymbolicIn:



void fn0000000000016B38(word64 a0)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  a0:[0..63]
// LiveOut:
// Trashed: a0 a5
// Preserved: sp
fn0000000000016B38_entry:
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0000000000016B38:
	branch a0 >u 127 l0000000000016B5C
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0000000000016B5C:
	return
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0000000000016B40:
	return
// DataOut:
// DataOut (flags):
// SymbolicIn:

fn0000000000016B38_exit:
// DataOut:
// DataOut (flags):
// SymbolicIn:



word64 fn0000000000016B68(word64 a0, ptr64 & a1Out, ptr64 & a2Out, ptr64 & a6Out)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  a0:[0..63]
// LiveOut: a0 a1 a2 a6
// Trashed: a0 a1 a2 a3 a4 a5 a6
// Preserved: ra sp
fn0000000000016B68_entry:
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0000000000016B68:
	word64 a4_100
	word64 a0_7 = fn00000000000182B4(a0, out a3_8, out a4_140, out a5_141)
	word64 a5_11 = (int64) (int32) (a0_7 >>u 0x00000018)
	branch a5_11 == 0x0000000000000000 l0000000000016BD8
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0000000000016BD8:
	a4_100 = 0x00000000000115E8
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0000000000016B7C:
	branch a5_11 == 10 l0000000000016C2C
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0000000000016B84:
	word64 a4_16 = (int64) (int32) (a0_7 >>u 0x00000010)
	branch a5_11 == 100 l0000000000016C58
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0000000000016C58:
	branch (a4_16 & 192) != 64 l0000000000016BC0
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0000000000016C64:
	a4_100 = 0x0000000000011618
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0000000000016B90:
	branch a5_11 == 127 l0000000000016C70
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0000000000016C70:
	a4_100 = 0x0000000000011630
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0000000000016B98:
	a2 = (int64) (int32) (a0_7 >>u 0x00000008)
	a1 = 169
	a6 = a2 & 255
	branch a5_11 == a1 l0000000000016C44
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0000000000016C44:
	branch (a4_16 & 255) != 254 l0000000000016BC0
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0000000000016C4C:
	a4_100 = 0x0000000000011640
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0000000000016BAC:
	a1 = 172
	branch a5_11 != a1 l0000000000016BF0
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0000000000016BF0:
	a1 = 192
	branch a5_11 != a1 l0000000000016C7C
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0000000000016C7C:
	a2 = 203
	branch a5_11 != a2 l0000000000016D18
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0000000000016D18:
	a2 = 255
	branch a5_11 != a2 l0000000000016D4C
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0000000000016D4C:
	branch a5_11 != 198 l0000000000016BC0
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0000000000016D54:
	a4_100 = 0x0000000000011650
	branch (a4_16 & 254) != 18 l0000000000016BE0
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0000000000016D68:
	a4_100 = 0x0000000000011738
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0000000000016D20:
	a4_100 = 0x0000000000011710
	branch (a4_16 & 255) != a5_11 l0000000000016BE0
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0000000000016D2C:
	a4_100 = 0x0000000000011710
	branch (a2 & 255) != a2 l0000000000016BE0
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0000000000016D38:
	branch (a0_7 & a2) != (a2 & 255) l0000000000016BE0
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0000000000016D40:
	a4_100 = 0x0000000000011720
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0000000000016C84:
	branch (a4_16 & 255) != 0x0000000000000000 l0000000000016BC0
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0000000000016C88:
	branch (a2 & 255) != 113 l0000000000016BC0
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0000000000016C90:
	a4_100 = 0x00000000000116C0
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0000000000016BF8:
	branch ((a4_16 | a2) & 255) == 0x0000000000000000 l0000000000016CD0
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0000000000016CD0:
	a4_100 = 0x0000000000011660
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0000000000016C04:
	branch (a4_16 & 255) == 2 l0000000000016CDC
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0000000000016CDC:
	branch (a2 & 255) != 0x0000000000000000 l0000000000016BC0
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0000000000016CE0:
	a4_100 = 0x0000000000011680
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0000000000016C0C:
	branch (a4_16 & 255) == 51 l0000000000016C9C
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0000000000016C9C:
	branch (a2 & 255) != 100 l0000000000016BC0
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0000000000016CA4:
	a4_100 = 0x00000000000116A0
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0000000000016C14:
	branch (a4_16 & 255) == 88 l0000000000016CB0
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0000000000016CB0:
	branch (a2 & 255) == 99 l0000000000016D00
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0000000000016D00:
	a4_100 = 0x00000000000116E0
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0000000000016C1C:
	branch (a4_16 & 255) == 52 l0000000000016CEC
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0000000000016CEC:
	branch (a2 & 255) != 193 l0000000000016BC0
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0000000000016CF4:
	a4_100 = 0x0000000000011708
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0000000000016C24:
	branch (a4_16 & 255) != 168 l0000000000016BC0
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0000000000016BB4:
	branch (a4_16 & 240) == 16 l0000000000016C2C
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0000000000016C2C:
	a1Out = a1
	a2Out = a2
	a6Out = a6
	return 0x0000000000011608
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0000000000016BC0:
	branch (int64) ((word32) a5_11 + -224) >u 15 l0000000000016CB8
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0000000000016CB8:
	branch (a5_11 & 240) == 240 l0000000000016D0C
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0000000000016D0C:
	a4_100 = 0x0000000000011710
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0000000000016CC4:
	a4_100 = 0x0000000000011650
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0000000000016BCC:
	a4_100 = 0x0000000000011748
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0000000000016BE0:
	a1Out = a1
	a2Out = a2
	a6Out = a6
	return a4_100
// DataOut:
// DataOut (flags):
// SymbolicIn:

fn0000000000016B68_exit:
// DataOut:
// DataOut (flags):
// SymbolicIn:



word64 fn0000000000016D74(word64 ra, word64 gp, word64 t1, word64 s0, word64 s1, word64 a0, word64 a1, word64 a2, word64 a3, word64 a4, word64 a6, word64 a7, word64 s2, word64 s3, word64 s4, word64 s5, word64 s6, word64 s7, word64 s8, word64 t3, word64 t4, word64 t5, word64 fa3, word64 fa4, word64 fa5, ptr64 & a1Out, ptr64 & a2Out, ptr64 & a4Out)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  a0:[0..63] a1:[0..63] a2:[0..63] a3:[0..63] a4:[0..63] a6:[0..63] a7:[0..63] fa3:[0..63] fa4:[0..63] fa5:[0..63] gp:[0..63] ra:[0..63] s0:[0..63] s1:[0..63] s2:[0..63] s3:[0..63] s4:[0..63] s5:[0..63] s6:[0..63] s7:[0..63] s8:[0..63] t1:[0..63] t3:[0..63] t4:[0..63] t5:[0..63]
// LiveOut: a0 a1 a2 a4
// Trashed: a0 a1 a2 a4 a5
// Preserved: a3 a6 a7 fa3 fa4 fa5 gp ra s0 s1 s2 s3 s4 s5 s6 s7 s8 sp t1 t3 t4 t5
fn0000000000016D74_entry:
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0000000000016D74:
	word64 a0_1000
	word64 a5_7 = Mem5[gp + -1936:word64]
	memset((word64) a2, 0x0000000000000000, 0x00000000000000C8)
	word64 s1_114 = a0
	word64 s5_159 = a1
	word64 sp_105 = fp + 0xFFFFFFFFFFFFFE30
	branch (word64) DPB(0x0000000000000002, inet_pton(0x0000000000000002, (word64) a0, (word64) (fp + 0xFFFFFFFFFFFFFE40)), 0) <= 0x0000000000000000 l0000000000016E60
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0000000000016E60:
	branch (word64) Mem37[gp + -2028:int32] != 0x0000000000000000 l0000000000016E20
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0000000000016E68:
	word64 a0_58 = (word64) Mem37[gp + -1920:word64]
	a0_61 = DPB(a0_58, __fprintf_chk(a0_58, 0x0000000000000001, 0x0000000000011788, 0x00000000), 0)
	a0_1000 = 0x00000000FFFFFFFF (alias)
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0000000000016DDC:
	word64 a0_540
	word64 s4_184
	word64 s3_180
	word64 s2_177
	word64 s0_112
	word64 a5_119
	branch a1 < 0x0000000000000000 l0000000000016E88
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0000000000016E88:
	a5_119 = a3 << 0x0000000D
	s5_159 = 32
	s0_112 = s0
	s2_177 = s2
	s3_180 = s3
	s4_184 = s4
	branch a3 << 0x0000000D >= 0x0000000000000000 l0000000000016EBC
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0000000000016E94:
	word64 a4_70
	word64 a0_68 = fn00000000000182B4((word64) dwLoc01C8, out a3_1171, out a4_70, out a5_1172)
	s5_159 = 8
	a4 = (word64) a4_70 (alias)
	a5_119 = (int64) (int32) (a0_68 >>u 0x00000018)
	s0_112 = s0
	s2_177 = s2
	s3_180 = s3
	s4_184 = s4
	branch a0_68 >= 0x0000000000000000 l0000000000016EBC
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0000000000016EA8:
	word64 a4_74 = 63
	a5_119 = (int64) ((word32) a5_119 + -128)
	a4 = (word64) a4_74 (alias)
	s5_159 = 24
	s0_112 = s0
	s2_177 = s2
	s3_180 = s3
	s4_184 = s4
	branch a4_74 <u a5_119 l0000000000016EBC
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0000000000016EB8:
	s5_159 = 16
	s0_112 = s0
	s2_177 = s2
	s3_180 = s3
	s4_184 = s4
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0000000000016DE0:
	qwLoc01A0 = a0
	word64 a0_83 = (word64) a0
	s0_112 = 3
	s2_177 = 46
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0000000000016DF0:
	word64 a0_88 = (word64) strchr(a0_83, (word64) s2_177)
	sp_105 = sp_105 + 0xFFFFFFFFFFFFFFF8 + 48
	Mem89[sp_105 + 48:word64] = a0_88
	branch a0_88 == 0x0000000000000000 l0000000000017194
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0000000000017194:
	s4_184 = 0x0000000000011000
	s3_180 = 1
	s2_177 = -1
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00000000000171A0:
	word64 a0_101 = (word64) (sp_105 + 0)
	sp_105 = sp_105 + 0xFFFFFFFFFFFFFFF8
	branch (word64) DPB(a0_101, __asprintf_chk(a0_101, (word64) s3_180, 0x00000000000117A8, 0x00000000), 0) == s2_177 l00000000000172BC
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00000000000172BC:
	a0_540 = (word64) Mem89[gp + -1920:word64] (alias)
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00000000000171B8:
	s0_112 = (int64) ((word32) s0_112 + -1)
	s1_114 = Mem89[sp_105 + 48:word64]
	branch s0_112 != 0x0000000000000000 l00000000000171A0
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00000000000171C4:
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0000000000016E00:
	Mem116[sp_105 + 48:word64] = a0_88 + 1
	a0_83 = (word64) (a0_88 + 1) (alias)
	s0_112 = (int64) ((word32) s0_112 + -1)
	s3_180 = s3
	s4_184 = s4
	branch s0_112 != 0x0000000000000000 l0000000000016DF0
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0000000000016E10:
	a5_119 = 32
	branch a5_119 >= a1 l0000000000016EBC
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0000000000016EBC:
	word64 a2_131 = (word64) (sp_105 + 56)
	word64 a1_130 = (word64) (sp_105 + 8)
	word64 sp_134 = sp_105 + 0xFFFFFFFFFFFFFFF8
	branch (word64) inet_ntop(0x0000000000000002, a1_130, a2_131, 0x000000000000002F) == 0x0000000000000000 l0000000000017074
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0000000000016ED4:
	word64 sp_137
	word64 s7_142
	word64 gp_148
	word64 s6_153
	word64 s1_158
	word64 s5_160
	word64 a0_162
	word64 s8_168
	word64 ra_173
	word64 s0_176
	word64 s2_179
	word64 s3_183
	word64 s4_187
	word64 a7_881
	word64 t3_870
	word64 t1_864
	word64 a6_858
	call __strdup (retsize: 0;)
		uses: a0:(word64) (sp_134 + 56),a1:a1_130,a2:a2_131,a3:0x000000000000002F,a4:a4_189,a5:a5_143,a6:a6,a7:a7,fa3:fa3,fa4:fa4,fa5:fa5,gp:gp,ra:ra,s0:s0_174,s1:s1_155,s2:s2_177,s3:s3_180,s4:s4_184,s5:s5_159,s6:a2,s7:s7,s8:a3,sp:sp_134,Stack +FFFFFE38:dwLoc01C8,Stack +FFFFFE60:qwLoc01A0_930,Stack +FFFFFFA8:a5_7,Stack +FFFFFFB0:s8,Stack +FFFFFFB8:s7,Stack +FFFFFFC0:s6,Stack +FFFFFFC8:s5,Stack +FFFFFFD0:s4,Stack +FFFFFFD8:s3,Stack +FFFFFFE0:s2,Stack +FFFFFFE8:s1,Stack +FFFFFFF0:s0,Stack +FFFFFFF8:ra,t1:t1,t3:t3,t4:t4,t5:t5
		defs: a0:a0_162,a6:a6_858,a7:a7_881,gp:gp_148,ra:ra_173,s0:s0_176,s1:s1_158,s2:s2_179,s3:s3_183,s4:s4_187,s5:s5_160,s6:s6_153,s7:s7_142,s8:s8_168,sp:sp_137,t1:t1_864,t3:t3_870
	Mem198[s6_153:word64] = (word64) a0_162
	word64 a4_201
	word64 a5_202
	Mem203[sp_137 + 16:word32] = fn0000000000016830(gp_148, s5_160, out a4_201, out a5_202)
	Mem208[sp_137 + 56:word64] = 0x0000000000000000
	Mem209[sp_137 + 64:word64] = 0x0000000000000000
	Mem210[sp_137 + 72:word64] = 0x0000000000000000
	Mem211[sp_137 + 80:word64] = 0x0000000000000000
	Mem212[sp_137 + 88:word64] = 0x0000000000000000
	Mem213[sp_137 + 96:word32] = 0x0000000000000000
	Mem214[sp_137 + 100:word16] = 0x0000000000000000
	Mem215[sp_137 + 102:byte] = 0x0000000000000000
	word64 a2_218 = (word64) (sp_137 + 56)
	word64 a1_217 = (word64) (sp_137 + 16)
	word64 a4_244 = (word64) a4_201
	branch (word64) inet_ntop(0x0000000000000002, a1_217, a2_218, 0x0000000000000010) == 0x0000000000000000 l0000000000017300
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0000000000017300:
	a0_540 = (word64) Mem215[gp_148 + -1920:word64] (alias)
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0000000000016F24:
	word64 sp_226
	word64 s7_227
	word64 gp_229
	word64 s6_230
	word64 s1_232
	word64 s5_233
	word64 a0_235
	word64 s8_237
	word64 ra_238
	word64 s2_240
	word64 s3_241
	word64 s4_242
	word64 a7_943
	call __strdup (retsize: 0;)
		uses: a0:(word64) (sp_137 + 0x0000000000000030),a1:a1_217,a2:a2_218,a3:0x0000000000000010,a4:a4_244,a5:a5_202,a6:a6_858,a7:a7_881,fa3:fa3,fa4:fa4,fa5:fa5,gp:gp_148,ra:ra_173,s0:s0_176,s1:s1_158,s2:s2_179,s3:s3_183,s4:s4_187,s5:s5_160,s6:s6_153,s7:s7_142,s8:s8_168,sp:sp_137 + 0xFFFFFFFFFFFFFFF8,Stack +FFFFFE38:dwLoc01C8,Stack +FFFFFE60:qwLoc01A0_930,Stack +FFFFFFA8:a5_7,Stack +FFFFFFB0:s8,Stack +FFFFFFB8:s7,Stack +FFFFFFC0:s6,Stack +FFFFFFC8:s5,Stack +FFFFFFD0:s4,Stack +FFFFFFD8:s3,Stack +FFFFFFE0:s2,Stack +FFFFFFE8:s1,Stack +FFFFFFF0:s0,Stack +FFFFFFF8:ra,t1:t1_864,t3:t3_870,t4:t4,t5:t5
		defs: a0:a0_235,a7:a7_943,gp:gp_229,ra:ra_238,s1:s1_232,s2:s2_240,s3:s3_241,s4:s4_242,s5:s5_233,s6:s6_230,s7:s7_227,s8:s8_237,sp:sp_226
	Mem247[s6_230 + 48:word64] = (word64) a0_235
	word64 s0_248 = (word64) Mem247[sp_226 + 8:int32]
	Mem249[s6_230 + 160:word32] = s5_233
	word64 a4_252
	word64 a5_255 = fn0000000000016830(gp_229, s5_233, out a4_252, out a5_1161) ^ -1 | s0_248
	Mem260[sp_226 + 32:word32] = a5_255
	Mem261[sp_226 + 56:word64] = 0x0000000000000000
	Mem262[sp_226 + 64:word64] = 0x0000000000000000
	Mem263[sp_226 + 72:word64] = 0x0000000000000000
	Mem264[sp_226 + 80:word64] = 0x0000000000000000
	Mem265[sp_226 + 88:word64] = 0x0000000000000000
	Mem266[sp_226 + 96:word32] = 0x0000000000000000
	Mem267[sp_226 + 100:word16] = 0x0000000000000000
	Mem268[sp_226 + 102:byte] = 0x0000000000000000
	word64 a2_271 = (word64) (sp_226 + 56)
	word64 a1_270 = (word64) (sp_226 + 32)
	word64 a4_297 = (word64) a4_252
	branch (word64) inet_ntop(0x0000000000000002, a1_270, a2_271, 0x0000000000000010) == 0x0000000000000000 l00000000000172F4
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00000000000172F4:
	a0_540 = (word64) Mem268[gp_229 + -1920:word64] (alias)
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0000000000016F84:
	word64 sp_279
	word64 s7_280
	word64 gp_282
	word64 s6_283
	word64 s1_285
	word64 s5_286
	word64 a0_288
	word64 s8_290
	word64 ra_291
	word64 s2_293
	word64 s3_294
	word64 s4_295
	word64 a7_952
	call __strdup (retsize: 0;)
		uses: a0:(word64) (sp_226 + 0x0000000000000030),a1:a1_270,a2:a2_271,a3:0x0000000000000010,a4:a4_297,a5:a5_255,a6:a6_318,a7:a7_943,fa3:fa3,fa4:fa4,fa5:fa5,gp:gp_229,ra:ra_238,s0:s0_248,s1:s1_232,s2:s2_240,s3:s3_241,s4:s4_242,s5:s5_233,s6:s6_230,s7:s7_227,s8:s8_237,sp:sp_226 + 0xFFFFFFFFFFFFFFF8,Stack +FFFFFE38:dwLoc01C8,Stack +FFFFFE60:qwLoc01A0_930,Stack +FFFFFFA8:a5_7,Stack +FFFFFFB0:s8,Stack +FFFFFFB8:s7,Stack +FFFFFFC0:s6,Stack +FFFFFFC8:s5,Stack +FFFFFFD0:s4,Stack +FFFFFFD8:s3,Stack +FFFFFFE0:s2,Stack +FFFFFFE8:s1,Stack +FFFFFFF0:s0,Stack +FFFFFFF8:ra,t1:t1_319,t3:t3_320,t4:t4,t5:t5
		defs: a0:a0_288,a7:a7_952,gp:gp_282,ra:ra_291,s1:s1_285,s2:s2_293,s3:s3_294,s4:s4_295,s5:s5_286,s6:s6_283,s7:s7_280,s8:s8_290,sp:sp_279
	Mem300[s6_283 + 40:word64] = (word64) a0_288
	word64 s0_301 = (word64) Mem300[sp_279 + 8:int32]
	word64 a0_303 = fn0000000000016830(gp_282, s5_286, out a4_1162, out a5_1163)
	word64 a3_306 = (word64) Mem300[sp_279 + 32:int32]
	word64 s0_307 = a0_303 & s0_301
	Mem311[sp_279 + 24:word32] = s0_307
	word64 a0_312
	word64 a4_316
	word64 a5_317
	word64 a6_318
	word64 t3_320
	word64 t1_319 = fn0000000000017F04(gp_282, s0_307, s5_286, s0_307, a3_306, out a0_312, out a4_316, out a5_317, out a6_318, out t3_320)
	Mem321[s6_283 + 24:word64] = a0_312
	Mem326[sp_279 + 56:word64] = 0x0000000000000000
	Mem327[sp_279 + 64:word64] = 0x0000000000000000
	Mem328[sp_279 + 72:word64] = 0x0000000000000000
	Mem329[sp_279 + 80:word64] = 0x0000000000000000
	Mem330[sp_279 + 88:word64] = 0x0000000000000000
	Mem331[sp_279 + 96:word32] = 0x0000000000000000
	Mem332[sp_279 + 100:word16] = 0x0000000000000000
	Mem333[sp_279 + 102:byte] = 0x0000000000000000
	word64 a2_336 = (word64) (sp_279 + 56)
	word64 a1_335 = (word64) (sp_279 + 24)
	word64 a4_362 = (word64) a4_316
	branch (word64) inet_ntop(0x0000000000000002, a1_335, a2_336, 0x0000000000000010) == 0x0000000000000000 l00000000000172DC
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00000000000172DC:
	a0_540 = (word64) Mem333[gp_282 + -1920:word64] (alias)
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0000000000016FF4:
	word64 a5_387
	word64 a0_353
	word64 a7_958
	word64 s8_355
	word64 s4_360
	word64 s5_351
	word64 s7_345
	word64 sp_344
	word64 ra_356
	word64 s1_350
	word64 t3_366
	word64 t1_365
	word64 s6_348
	call __strdup (retsize: 0;)
		uses: a0:(word64) (sp_279 + 0x0000000000000030),a1:a1_335,a2:a2_336,a3:0x0000000000000010,a4:a4_362,a5:a5_317,a6:a6_318,a7:a7_952,fa3:fa3,fa4:fa4,fa5:fa5,gp:gp_282,ra:ra_291,s0:s0_307,s1:s1_285,s2:s2_293,s3:s3_294,s4:s4_295,s5:s5_286,s6:s6_283,s7:s7_280,s8:s8_290,sp:sp_279 + 0xFFFFFFFFFFFFFFF8,Stack +FFFFFE38:dwLoc01C8,Stack +FFFFFE60:qwLoc01A0_930,Stack +FFFFFFA8:a5_7,Stack +FFFFFFB0:s8,Stack +FFFFFFB8:s7,Stack +FFFFFFC0:s6,Stack +FFFFFFC8:s5,Stack +FFFFFFD0:s4,Stack +FFFFFFD8:s3,Stack +FFFFFFE0:s2,Stack +FFFFFFE8:s1,Stack +FFFFFFF0:s0,Stack +FFFFFFF8:ra,t1:t1_319,t3:t3_320,t4:t4,t5:t5
		defs: a0:a0_353,a7:a7_958,gp:gp_347,ra:ra_356,s1:s1_350,s4:s4_360,s5:s5_351,s6:s6_348,s7:s7_345,s8:s8_355,sp:sp_344,t1:t1_365,t3:t3_366
	word64 a0_368 = (word64) a0_353
	word64 s0_367 = (word64) Mem333[sp_344 + 24:int32]
	Mem369[s6_348 + 32:word64] = a0_368
	word64 a6_378
	Mem379[s6_348 + 184:word64] = fn0000000000016B68(s0_367, out a1_376, out a2_377, out a6_378)
	word64 a4_383
	word64 a0_381 = fn00000000000182B4(s0_367, out a3_1164, out a4_383, out a5_1165)
	word64 s3_370 = a0_368
	word64 a4_453 = (word64) a4_383
	word64 a5_385 = (int64) (int32) (a0_381 >>u 0x00000018)
	branch a0_381 >= 0x0000000000000000 l0000000000017098
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0000000000017098:
	a5_387 = 0x0000000000011758
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0000000000017024:
	word64 a4_388 = (int64) ((word32) a5_385 + -128)
	a4_453 = (word64) a4_388 (alias)
	branch a4_388 <=u 63 l000000000001727C
// DataOut:
// DataOut (flags):
// SymbolicIn:

l000000000001727C:
	a5_387 = 0x0000000000011760
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0000000000017030:
	word64 a4_392 = (int64) ((word32) a5_385 + -192)
	a4_453 = (word64) a4_392 (alias)
	branch a4_392 <=u 31 l00000000000172A4
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00000000000172A4:
	a5_387 = 0x0000000000011768
// DataOut:
// DataOut (flags):
// SymbolicIn:

l000000000001703C:
	word64 a4_397 = 14
	a4_453 = (word64) a4_397 (alias)
	branch a4_397 <u (int64) ((word32) a5_385 + -224) l00000000000172B0
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00000000000172B0:
	a5_387 = 0x0000000000011778
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0000000000017048:
	a5_387 = 0x0000000000011770
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00000000000170A0:
	word64 a4_411
	word64 a5_412
	Mem404[s6_348 + 192:word64] = a5_387
	word64 s2_405 = 32
	branch s5_351 == s2_405 l0000000000017158
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0000000000017158:
	Mem409[s6_348 + 168:word64] = a0_368
	Mem410[s6_348 + 176:word64] = a0_368
	a4_411 = s6_348 + 96
	a5_412 = 0x0000000000011780
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00000000000170AC:
	Mem415[sp_344 + 40:word32] = s0_367
	word64 a5_416 = 31
	branch s5_351 == a5_416 l0000000000017210
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0000000000017210:
	word64 a2_423 = (word64) (sp_344 + 56)
	word64 a1_422 = (word64) (sp_344 + 40)
	branch (word64) inet_ntop(0x0000000000000002, a1_422, a2_423, 0x0000000000000010) == 0x0000000000000000 l00000000000172E8
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0000000000017228:
	word64 sp_429
	word64 s7_431
	word64 s6_435
	word64 s1_438
	word64 s5_439
	word64 a0_441
	word64 s8_444
	word64 ra_446
	word64 s0_447
	word64 s2_448
	word64 s3_449
	word64 s4_451
	word64 a6_460
	word64 t1_462
	word64 t3_464
	word64 a7_965
	call __strdup (retsize: 0;)
		uses: a0:(word64) (sp_344 + 0x0000000000000030),a1:a1_422,a2:a2_423,a3:0x0000000000000010,a4:a4_453,a5:a5_416,a6:a6_378,a7:a7_958,fa3:fa3,fa4:fa4,fa5:fa5,gp:gp_347,ra:ra_356,s0:s0_367,s1:s1_350,s2:s2_405,s3:a0_368,s4:s4_360,s5:s5_351,s6:s6_348,s7:s7_345,s8:s8_355,sp:sp_344 + 0xFFFFFFFFFFFFFFF8,Stack +FFFFFE38:dwLoc01C8,Stack +FFFFFE60:qwLoc01A0_930,Stack +FFFFFFA8:a5_7,Stack +FFFFFFB0:s8,Stack +FFFFFFB8:s7,Stack +FFFFFFC0:s6,Stack +FFFFFFC8:s5,Stack +FFFFFFD0:s4,Stack +FFFFFFD8:s3,Stack +FFFFFFE0:s2,Stack +FFFFFFE8:s1,Stack +FFFFFFF0:s0,Stack +FFFFFFF8:ra,t1:t1_365,t3:t3_366,t4:t4,t5:t5
		defs: a0:a0_441,a6:a6_460,a7:a7_965,gp:gp_434,ra:ra_446,s0:s0_447,s1:s1_438,s2:s2_448,s3:s3_449,s4:s4_451,s5:s5_439,s6:s6_435,s7:s7_431,s8:s8_444,sp:sp_429,t1:t1_462,t3:t3_464
	word64 a4_466 = (word64) Mem415[sp_429 + 24:int32]
	word64 a5_465 = (word64) Mem415[sp_429 + 16:int32]
	Mem468[s6_435 + 168:word64] = (word64) a0_441
	word64 a5_470 = a5_465 ^ -1 | a4_466
	Mem475[sp_429 + 48:word32] = a5_470
	word64 a2_478 = (word64) (sp_429 + 56)
	word64 a1_477 = (word64) (sp_429 + 48)
	word64 a4_502 = (word64) a4_466
	branch (word64) inet_ntop(0x0000000000000002, a1_477, a2_478, 0x000000000000002F) == 0x0000000000000000 l0000000000017074
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0000000000017260:
	word64 a0_493
	call __strdup (retsize: 0;)
		uses: a0:(word64) (sp_429 + 0x0000000000000030),a1:a1_477,a2:a2_478,a3:0x000000000000002F,a4:a4_502,a5:a5_470,a6:a6_460,a7:a7_965,fa3:fa3,fa4:fa4,fa5:fa5,gp:gp_434,ra:ra_446,s0:s0_447,s1:s1_438,s2:s2_448,s3:s3_449,s4:s4_451,s5:s5_439,s6:s6_435,s7:s7_431,s8:s8_444,sp:sp_429 + 0xFFFFFFFFFFFFFFF8,Stack +FFFFFE38:dwLoc01C8,Stack +FFFFFE60:qwLoc01A0_930,Stack +FFFFFFA8:a5_7,Stack +FFFFFFB0:s8,Stack +FFFFFFB8:s7,Stack +FFFFFFC0:s6,Stack +FFFFFFC8:s5,Stack +FFFFFFD0:s4,Stack +FFFFFFD8:s3,Stack +FFFFFFE0:s2,Stack +FFFFFFE8:s1,Stack +FFFFFFF0:s0,Stack +FFFFFFF8:ra,t1:t1_462,t3:t3_464,t4:t4,t5:t5
		defs: a0:a0_493,gp:gp_487,ra:ra_496,s0:s0_497,s1:s1_490,s2:s2_498,s3:s3_499,s4:s4_500,s5:s5_491,s6:s6_488,s7:s7_485,s8:s8_495,sp:sp_484,t1:t1_505,t3:t3_506
	Mem509[s6_348 + 176:word64] = (word64) a0_493
	a4_411 = s6_348 + 96
	a5_412 = 0x0000000000012660
// DataOut:
// DataOut (flags):
// SymbolicIn:

l000000000001716C:
	Mem516[a4_411:byte] = (word64) Mem513[a5_412:byte]
	Mem518[a4_411 + 1:byte] = (word64) Mem516[a5_412 + 1:byte]
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00000000000170B8:
	Mem525[sp_344 + 40:word32] = s0_367 | 0x0000000001000000
	word64 a2_528 = (word64) (sp_344 + 56)
	word64 a1_527 = (word64) (sp_344 + 40)
	branch (word64) inet_ntop(0x0000000000000002, a1_527, a2_528, 0x0000000000000010) == 0x0000000000000000 l00000000000172E8
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00000000000172E8:
	a0_540 = (word64) Mem534[gp + -1920:word64] (alias)
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00000000000172C4:
	a0_548 = DPB(a0_540, __fprintf_chk(a0_540, 0x0000000000000001, 0x00000000000117B0, 0x00000000), 0)
	abort()
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00000000000170DC:
	word64 sp_553
	word64 s7_554
	word64 s6_557
	word64 s1_559
	word64 s5_560
	word64 a0_562
	word64 s8_564
	word64 ra_565
	word64 s0_566
	word64 s2_567
	word64 s3_568
	word64 s4_569
	word64 a6_572
	word64 t1_573
	word64 t3_574
	word64 a7_990
	call __strdup (retsize: 0;)
		uses: a0:(word64) (sp_344 + 0x0000000000000030),a1:a1_527,a2:a2_528,a3:0x0000000000000010,a4:a4_453,a5:0x0000000001000000,a6:a6_378,a7:a7_958,fa3:fa3,fa4:fa4,fa5:fa5,gp:gp_347,ra:ra_356,s0:s0_367 | 0x0000000001000000,s1:s1_350,s2:s2_405,s3:a0_368,s4:s4_360,s5:s5_351,s6:s6_348,s7:s7_345,s8:s8_355,sp:sp_344 + 0xFFFFFFFFFFFFFFF8,Stack +FFFFFE38:dwLoc01C8,Stack +FFFFFE60:qwLoc01A0_930,Stack +FFFFFFA8:a5_7,Stack +FFFFFFB0:s8,Stack +FFFFFFB8:s7,Stack +FFFFFFC0:s6,Stack +FFFFFFC8:s5,Stack +FFFFFFD0:s4,Stack +FFFFFFD8:s3,Stack +FFFFFFE0:s2,Stack +FFFFFFE8:s1,Stack +FFFFFFF0:s0,Stack +FFFFFFF8:ra,t1:t1_365,t3:t3_366,t4:t4,t5:t5
		defs: a0:a0_562,a6:a6_572,a7:a7_990,gp:gp_556,ra:ra_565,s0:s0_566,s1:s1_559,s2:s2_567,s3:s3_568,s4:s4_569,s5:s5_560,s6:s6_557,s7:s7_554,s8:s8_564,sp:sp_553,t1:t1_573,t3:t3_574
	word64 a5_575 = (word64) Mem525[sp_553 + 16:int32]
	Mem577[s6_557 + 168:word64] = (word64) a0_562
	word64 a4_588
	word64 a5_589
	Mem590[sp_553 + 48:word32] = fn00000000000182B4((int64) ((word32) fn00000000000182B4(a5_575 ^ -1 | (word64) Mem577[sp_553 + 24:int32], out a3_1166, out a4_1167, out a5_1168) + -1), out a3_1169, out a4_588, out a5_589)
	word64 a2_597 = (word64) (sp_553 + 56)
	word64 a1_596 = (word64) (sp_553 + 48)
	word64 a4_638 = (word64) a4_588
	branch (word64) inet_ntop(0x0000000000000002, a1_596, a2_597, 0x000000000000002F) == 0x0000000000000000 l0000000000017074
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0000000000017074:
	branch (word64) Mem603[gp + -2028:int32] != 0x0000000000000000 l0000000000016E20
// DataOut:
// DataOut (flags):
// SymbolicIn:

l000000000001707C:
	a0_616 = DPB(0x00000000000117F8, fwrite(0x00000000000117F8, 0x0000000000000001, 0x000000000000002B, (word64) Mem603[gp + -1920:word64]), 0)
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0000000000017120:
	word64 sp_620
	word64 a0_629
	call __strdup (retsize: 0;)
		uses: a0:(word64) (sp_553 + 0x0000000000000030),a1:a1_596,a2:a2_597,a3:0x000000000000002F,a4:a4_638,a5:a5_589,a6:a6_572,a7:a7_990,fa3:fa3,fa4:fa4,fa5:fa5,gp:gp_556,ra:ra_565,s0:s0_566,s1:s1_559,s2:s2_567,s3:s3_568,s4:s4_569,s5:s5_560,s6:s6_557,s7:s7_554,s8:s8_564,sp:sp_553 + 0xFFFFFFFFFFFFFFF8,Stack +FFFFFE38:dwLoc01C8,Stack +FFFFFE60:qwLoc01A0_930,Stack +FFFFFFA8:a5_7,Stack +FFFFFFB0:s8,Stack +FFFFFFB8:s7,Stack +FFFFFFC0:s6,Stack +FFFFFFC8:s5,Stack +FFFFFFD0:s4,Stack +FFFFFFD8:s3,Stack +FFFFFFE0:s2,Stack +FFFFFFE8:s1,Stack +FFFFFFF0:s0,Stack +FFFFFFF8:ra,t1:t1_573,t3:t3_574,t4:t4,t5:t5
		defs: a0:a0_629,gp:gp_623,ra:ra_632,s0:s0_633,s1:s1_626,s2:s2_634,s3:s3_635,s4:s4_636,s5:s5_627,s6:s6_624,s7:s7_621,s8:s8_631,sp:sp_620,t1:t1_641,t3:t3_642
	Mem649[s6_348 + 176:word64] = (word64) a0_629
	word64 a3_646 = 64
	word64 a0_654 = (word64) (s6_348 + 96)
	a0_659 = DPB(a0_654, __snprintf_chk(a0_654, (word64) a3_646, 0x0000000000000001, (word64) a3_646, 0x0000000000011828, 0x00000000), 0)
	sp_344 = sp_620 + 0xFFFFFFFFFFFFFFF8
// DataOut:
// DataOut (flags):
// SymbolicIn:

l000000000001717C:
	branch s8_355 << 0x00000011 < 0x0000000000000000 l0000000000017288
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0000000000017288:
	ra_356 = fn0000000000017B40(ra_356, gp, t1_365, s0_367, s1_350, (word64) Mem666[sp_344 + 8:int32], s6_348 + 64, s6_348 + 72, s6_348 + 80, s6_348 + 88, s2_405, s3_370, s4_360, s5_351, s6_348, s7_345, fa3, fa4, fa5, out sp_344, out gp, out t1_365, out s0_367, out s1_350, out a1_719, out a2_720, out s6_348)
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0000000000017184:
	branch (s8_355 & 1) != 0x0000000000000000 l00000000000171C8
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00000000000171C8:
	word64 a0_771 = fn00000000000168E4(ra_356, gp, t1_365, s0_367, s1_350, 2, sp_344 + 8, t3_366, t4, t5, out a1_772, out a2_773, out a3_1170)
	Mem783[s6_348 + 56:word64] = a0_771
	branch a0_771 != 0x0000000000000000 l000000000001718C
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00000000000171DC:
	branch (word64) Mem783[gp + -2028:int32] != 0x0000000000000000 l0000000000016E20
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00000000000171E4:
	word64 a0_791 = (word64) (sp_344 + 104)
	a0_795 = DPB(a0_791, __sprintf_chk(a0_791, 0x0000000000000001, 0x00000000000000FA, 0x0000000000011830, 0x00000000), 0)
	herror((word64) (sp_344 + 0x0000000000000060))
	a0_1000 = 0x00000000FFFFFFFF (alias)
// DataOut:
// DataOut (flags):
// SymbolicIn:

l000000000001718C:
	a0_1000 = 0x0000000000000000 (alias)
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0000000000016E18:
	branch (word64) Mem605[gp + -2028:int32] == 0x0000000000000000 l0000000000017054
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0000000000017054:
	word64 a0_808 = (word64) Mem605[gp + -1920:word64]
	a0_811 = DPB(a0_808, __fprintf_chk(a0_808, 0x0000000000000001, 0x00000000000117D8, 0x00000000), 0)
	a0_1000 = 0x00000000FFFFFFFF (alias)
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0000000000016E20:
	a0_1000 = 0x00000000FFFFFFFF (alias)
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0000000000016E24:
	branch a5_7 != Mem818[gp + -1936:word64] l00000000000172D8
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00000000000172D8:
	__stack_chk_fail()
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0000000000016E30:
	a1Out = <invalid>
	a2Out = <invalid>
	a4Out = a5_7
	return a0_1000
// DataOut:
// DataOut (flags):
// SymbolicIn:

fn0000000000016D74_exit:
// DataOut:
// DataOut (flags):
// SymbolicIn:



word64 fn000000000001730C(word64 ra, word64 gp, word64 s0, word64 s1, word64 a0, word64 a1, word64 a6, ptr64 & a1Out)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  a0:[0..63] a1:[0..63] a6:[0..63] gp:[0..63] ra:[0..63] s0:[0..63] s1:[0..63]
// LiveOut: a0 a1
// Trashed: a0 a1 a5
// Preserved: a2 a3 a6 gp ra s0 s1 sp
fn000000000001730C_entry:
// DataOut:
// DataOut (flags):
// SymbolicIn:

l000000000001730C:
	word64 a0_136
	word64 a4_7 = Mem5[gp + -1936:word64]
	branch a0 >u 128 l00000000000173BC
// DataOut:
// DataOut (flags):
// SymbolicIn:

l000000000001732C:
	word64 a5_20 = fp + -184
	word64 a4_21 = (int64) (8 - a0)
	word64 a3_22 = 7
	word64 a2_23 = -1
	word64 a1_24 = 255
	branch a0 == 0x0000000000000000 l000000000001736C
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0000000000017354:
	branch a3_22 >= a0 l00000000000173C4
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00000000000173C4:
	a6 = (int64) (int32) (a1_24 << a4_21)
	Mem31[a5_20:byte] = a6
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0000000000017358:
	Mem33[a5_20:byte] = a2_23
// DataOut:
// DataOut (flags):
// SymbolicIn:

l000000000001735C:
	a0 = (int64) ((word32) a0 + -8)
	a5_20 = a5_20 + 1
	a4_21 = (int64) ((word32) a4_21 + 8)
	branch a0 > 0x0000000000000000 l0000000000017354
// DataOut:
// DataOut (flags):
// SymbolicIn:

l000000000001736C:
	branch (word64) inet_ntop(0x000000000000000A, (word64) (fp + -184), (word64) (fp + -168), 0x0000000000000080) == 0x0000000000000000 l00000000000173BC
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00000000000173BC:
	a0_136 = 0x0000000000000000 (alias)
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0000000000017384:
	word64 a1_62 = (word64) (fp + 0xFFFFFFFFFFFFFF40)
	memcpy((word64) a1, a1_62, 0x0000000000000010)
	call __strdup (retsize: 0;)
		uses: a0:(word64) (fp + 0xFFFFFFFFFFFFFF48),a1:a1_62,a2:0x0000000000000010,a3:0x0000000000000080,a4:a4_72,a5:a5_83,a6:a6_90,gp:gp,ra:ra,s0:s0,s1:a1,sp:fp + 0xFFFFFFFFFFFFFF30,Stack +0018:0x0000000000000000,Stack +0020:0x0000000000000000,Stack +00A8:a4_7,Stack +00B8:s1,Stack +00C0:s0,Stack +00C8:ra
		defs: a0:a0_86,gp:gp_77
// DataOut:
// DataOut (flags):
// SymbolicIn:

l000000000001739C:
	branch a4_7 != Mem97[gp + -1936:word64] l00000000000173D0
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00000000000173D0:
	__stack_chk_fail()
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00000000000173A8:
	a1Out = <invalid>
	return a0_136
// DataOut:
// DataOut (flags):
// SymbolicIn:

fn000000000001730C_exit:
// DataOut:
// DataOut (flags):
// SymbolicIn:



word64 fn00000000000173D4(word64 a0, word64 a1, ptr64 & spOut, ptr64 & s0Out, ptr64 & s1Out, ptr64 & a0Out, ptr64 & a2Out, ptr64 & a3Out, ptr64 & s2Out, ptr64 & s3Out)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  a0:[0..63] a1:[0..63]
// LiveOut: a0 a2 a3 ra s0 s1 s2 s3 sp
// Trashed: a0 a1 a2 a3 a4 a5 ra s0 s1 s2 s3 sp
// Preserved:
fn00000000000173D4_entry:
	word64 a0_24 = (word64) a0
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00000000000173D4:
	word64 a0_117
	word64 sp_3 = fp + -48
	word64 s2_17 = (word64) Mem13[a0:byte]
	word64 s3_18 = (word64) Mem13[a0 + 1:byte]
	branch a1 == 128 l00000000000174DC
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00000000000174DC:
	word64 a2_22 = 16
	branch (word64) DPB(a0_24, memcmp(a0_24, 0x0000000000010880, (word64) a2_22), 0) == 0x0000000000000000 l0000000000017538
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0000000000017538:
	spOut = fp + 0xFFFFFFFFFFFFFFF8
	s0Out = s1
	s1Out = s2
	a0Out = 0x0000000000011858
	a2Out = a2_22
	a3Out = a3
	s2Out = s3
	s3Out = qwLoc30
	return s0
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00000000000174F4:
	a2 = 16
	word64 a0_41 = (word64) a0
	sp_3 = fp + 0xFFFFFFFFFFFFFFC0
	branch (word64) DPB(a0_41, memcmp(a0_41, 0x0000000000010898, (word64) a2), 0) != 0x0000000000000000 l000000000001747C
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0000000000017508:
	a0_117 = 0x0000000000011870
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0000000000017400:
	branch a1 > 95 l0000000000017474
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0000000000017474:
// DataOut:
// DataOut (flags):
// SymbolicIn:

l000000000001747C:
	word64 a2_52 = 12
	word64 a0_57 = (word64) a0
	word64 sp_62 = sp_3 + 0xFFFFFFFFFFFFFFF8
	branch (word64) DPB(a0_57, memcmp(a0_57, 0x00000000000108B0, (word64) a2_52), 0) == 0x0000000000000000 l000000000001755C
// DataOut:
// DataOut (flags):
// SymbolicIn:

l000000000001755C:
	word64 ra_65 = Mem13[sp_62 + 40:word64]
	word64 s0_68 = Mem13[sp_62 + 32:word64]
	word64 s1_69 = Mem13[sp_62 + 24:word64]
	word64 s2_70 = Mem13[sp_62 + 16:word64]
	word64 s3_71 = Mem13[sp_62 + 8:word64]
	spOut = sp_62 + 48
	s0Out = s0_68
	s1Out = s1_69
	a0Out = 0x0000000000011888
	a2Out = a2_52
	a3Out = a3
	s2Out = s2_70
	s3Out = s3_71
	return ra_65
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0000000000017490:
	word64 a2_73 = 12
	word64 a0_76 = (word64) a0
	branch (word64) DPB(a0_76, memcmp(a0_76, 0x00000000000108C0, (word64) a2_73), 0) == 0x0000000000000000 l0000000000017514
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0000000000017514:
	word64 ra_82 = Mem13[sp_62 + 0x0000000000000020:word64]
	word64 s0_85 = Mem13[sp_62 + 0x0000000000000018:word64]
	word64 s1_86 = Mem13[sp_62 + 0x0000000000000010:word64]
	word64 s2_87 = Mem13[sp_62 + 0x0000000000000008:word64]
	word64 s3_88 = Mem13[sp_62:word64]
	spOut = sp_62 + 0x0000000000000028
	s0Out = s0_85
	s1Out = s1_86
	a0Out = 0x00000000000118A0
	a2Out = a2_73
	a3Out = a3
	s2Out = s2_87
	s3Out = s3_88
	return ra_82
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00000000000174A4:
	a2 = 12
	word64 a0_93 = (word64) a0
	branch (word64) DPB(a0_93, memcmp(a0_93, 0x00000000000108D0, (word64) a2), 0) != 0x0000000000000000 l0000000000017408
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00000000000174B8:
	word64 ra_99 = Mem13[sp_62 + 0x0000000000000018:word64]
	word64 s0_102 = Mem13[sp_62 + 0x0000000000000010:word64]
	word64 s1_103 = Mem13[sp_62 + 0x0000000000000008:word64]
	word64 s2_104 = Mem13[sp_62:word64]
	word64 s3_105 = Mem13[sp_62 + 0xFFFFFFFFFFFFFFF8:word64]
	spOut = sp_62 + 0x0000000000000020
	s0Out = s0_102
	s1Out = s1_103
	a0Out = 0x00000000000118B8
	a2Out = a2
	a3Out = a3
	s2Out = s2_104
	s3Out = s3_105
	return ra_99
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0000000000017408:
	word64 a5_112 = s2_17 << 0x00000008 | s3_18
	a3 = 0x0000000000002000
	branch (a5_112 & 0x00000000FFFFE000) == 0x0000000000002000 l0000000000017580
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0000000000017580:
	a0_117 = 0x00000000000118D8
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0000000000017420:
	a2 = 252
	branch (s2_17 & 254) == a2 l000000000001758C
// DataOut:
// DataOut (flags):
// SymbolicIn:

l000000000001758C:
	a0_117 = 0x00000000000118E8
// DataOut:
// DataOut (flags):
// SymbolicIn:

l000000000001742C:
	a2 = a5_112 & -64
	branch (a5_112 & -64) == 65152 l0000000000017598
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0000000000017598:
	a0_117 = 0x0000000000011900
// DataOut:
// DataOut (flags):
// SymbolicIn:

l000000000001743C:
	branch s2_17 == 255 l00000000000175A4
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00000000000175A4:
	a0_117 = 0x0000000000011748
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0000000000017444:
	a3 = 8194
	a0_117 = 0x0000000000011710
	branch (a5_112 & -2) == 8194 l00000000000175B0
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00000000000175B0:
	a0_117 = 0x0000000000011918
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0000000000017458:
	spOut = fp
	s0Out = s0
	s1Out = s1
	a0Out = a0_117
	a2Out = a2
	a3Out = a3
	s2Out = s2
	s3Out = s3
	return ra
// DataOut:
// DataOut (flags):
// SymbolicIn:

fn00000000000173D4_exit:
// DataOut:
// DataOut (flags):
// SymbolicIn:



word64 fn00000000000175BC(word64 ra, word64 gp, word64 t1, word64 s0, word64 s1, word64 a0, word64 a1, word64 a2, word64 a3, word64 a6, word64 a7, word64 s2, word64 s3, word64 s4, word64 s5, word64 s6, word64 s7, word64 s8, word64 s9, word64 t3, word64 t4, word64 t5, word64 t6, word64 fa3, word64 fa4, word64 fa5, ptr64 & a1Out, ptr64 & a2Out, ptr64 & a3Out, ptr64 & a4Out)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  a0:[0..63] a1:[0..63] a2:[0..63] a3:[0..63] a6:[0..63] a7:[0..63] fa3:[0..63] fa4:[0..63] fa5:[0..63] gp:[0..63] ra:[0..63] s0:[0..63] s1:[0..63] s2:[0..63] s3:[0..63] s4:[0..63] s5:[0..63] s6:[0..63] s7:[0..63] s8:[0..63] s9:[0..63] t1:[0..63] t3:[0..63] t4:[0..63] t5:[0..63] t6:[0..63]
// LiveOut: a0 a1 a2 a3 a4
// Trashed: a0 a1 a2 a3 a4 a5
// Preserved: a6 a7 fa3 fa4 fa5 gp ra s0 s1 s2 s3 s4 s5 s6 s7 s8 s9 sp t1 t3 t4 t5 t6
fn00000000000175BC_entry:
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00000000000175BC:
	word64 a0_122
	word64 a5_7 = Mem5[gp + -1936:word64]
	memset((word64) a2, 0x0000000000000000, 0x00000000000000C8)
	branch (word64) DPB(0x000000000000000A, inet_pton(0x000000000000000A, (word64) a0, (word64) (fp + 0xFFFFFFFFFFFFFE60)), 0) <= 0x0000000000000000 l00000000000177B4
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00000000000177B4:
	branch (word64) Mem39[gp + -2028:int32] != 0x0000000000000000 l0000000000017770
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00000000000177BC:
	word64 a0_60 = (word64) Mem39[gp + -1920:word64]
	a0_63 = DPB(a0_60, __fprintf_chk(a0_60, 0x0000000000000001, 0x0000000000011920, 0x00000000), 0)
	a0_122 = -1
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0000000000017628:
	word64 a0_67
	word64 a4_71
	word64 a5_72
	gp = fn00000000000163B0(ra, gp, a2, s1, fp + 0xFFFFFFFFFFFFFE58, a1, s3, a0, s5, a3, s7, s8, s9, out a0_67, out a4_71, out a5_72)
	Mem75[a2 + 8:word64] = a0_67
	word64 a2_82 = (word64) (fp + 0xFFFFFFFFFFFFFE88)
	word64 a1_81 = (word64) (fp + 0xFFFFFFFFFFFFFE58)
	branch (word64) inet_ntop(0x000000000000000A, a1_81, a2_82, 0x00000000000000FA) == 0x0000000000000000 l0000000000017768
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0000000000017650:
	word64 sp_88
	word64 s1_89
	word64 s0_92
	word64 s4_95
	word64 a0_97
	word64 s6_99
	word64 ra_100
	word64 s3_101
	word64 s2_123
	call __strdup (retsize: 0;)
		uses: a0:(word64) (fp + 0xFFFFFFFFFFFFFE88),a1:a1_81,a2:a2_82,a3:0x00000000000000FA,a4:a4_71,a5:a5_72,a6:a6,a7:a7,fa3:fa3,fa4:fa4,fa5:fa5,gp:gp_73,ra:ra,s0:a2,s1:s1,s2:a1,s3:fp + 0xFFFFFFFFFFFFFE88,s4:a0,s5:s5,s6:a3,s7:s7,s8:s8,s9:s9,sp:fp + 0xFFFFFFFFFFFFFE48,Stack +0150:a5_7,Stack +0160:s9,Stack +0168:s8,Stack +0170:s7,Stack +0178:s6,Stack +0180:s5,Stack +0188:s4,Stack +0190:s3,Stack +0198:s2,Stack +01A0:s1,Stack +01A8:s0,Stack +01B0:ra,t1:t1,t3:t3,t4:t4,t5:t5,t6:t6
		defs: a0:a0_97,gp:gp_91,ra:ra_100,s0:s0_92,s1:s1_89,s2:s2_94,s3:s3_101,s4:s4_95,s6:s6_99,sp:sp_88
	Mem109[s0_92:word64] = (word64) a0_97
	word64 s5_110 = 128
	branch s5_110 < s2_123 l00000000000177DC
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00000000000177DC:
	branch (word64) Mem109[gp + -2028:int32] != 0x0000000000000000 l0000000000017770
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00000000000177E4:
	word64 a0_117 = (word64) Mem109[gp + -1920:word64]
	a0_120 = DPB(a0_117, __fprintf_chk(a0_117, 0x0000000000000001, 0x0000000000011940, 0x00000000), 0)
	a0_122 = -1
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0000000000017664:
	branch s2_123 < 0x0000000000000000 l0000000000017868
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0000000000017868:
	s2_123 = s5_110
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0000000000017668:
	s5_110 = s2_123
// DataOut:
// DataOut (flags):
// SymbolicIn:

l000000000001766C:
	Mem129[s0_92 + 160:word32] = s5_110
	word64 a0_137 = fn000000000001730C(ra_100, gp, s0_92, s1_89, s5_110, sp_88 + 24, a6, out a1_138)
	Mem140[s0_92 + 48:word64] = a0_137
	branch a0_137 == 0x0000000000000000 l00000000000178F8
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00000000000178F8:
	branch (word64) Mem140[gp + -2028:int32] != 0x0000000000000000 l0000000000017770
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0000000000017900:
	word64 a0_148 = (word64) Mem140[gp + -1920:word64]
	a0_151 = DPB(a0_148, __fprintf_chk(a0_148, 0x0000000000000001, 0x0000000000011960, 0x00000000), 0)
	a0_122 = -1
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0000000000017688:
	word64 a5_155 = sp_88 + 8
	word64 a2_157 = sp_88 + 40
	word64 a3_158 = sp_88 + 24
// DataOut:
// DataOut (flags):
// SymbolicIn:

l000000000001769C:
	word64 a4_166 = (word64) Mem160[a5_155:byte] & (word64) Mem160[a3_158:byte]
	Mem168[a2_157:byte] = a4_166
	a5_155 = a5_155 + 1
	a3_158 = a3_158 + 1
	a2_157 = a2_157 + 1
	branch sp_88 + 24 != a5_155 l000000000001769C
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00000000000176BC:
	word64 a2_180 = (word64) s3_101
	word64 a1_179 = (word64) (sp_88 + 40)
	branch (word64) inet_ntop(0x000000000000000A, a1_179, a2_180, 0x00000000000000FA) == 0x0000000000000000 l0000000000017768
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00000000000176D4:
	word64 s2_382
	word64 a0_402
	word64 sp_186
	word64 s1_188
	word64 gp_191
	word64 s0_193
	word64 s2_196
	word64 a0_201
	word64 ra_207
	word64 s3_208
	word64 s8_213
	word64 s9_215
	word64 a6_219
	word64 s4_199
	word64 s5_210
	word64 s7_211
	word64 s6_205
	call __strdup (retsize: 0;)
		uses: a0:(word64) s3_101,a1:a1_179,a2:a2_180,a3:0x00000000000000FA,a4:a4_166,a5:a5_164,a6:a6,a7:a7,fa3:fa3,fa4:fa4,fa5:fa5,gp:gp_91,ra:ra_100,s0:s0_92,s1:s1_89,s2:s2_144,s3:s3_101,s4:s4_95,s5:s5_127,s6:s6_99,s7:sp_88 + 24,s8:sp_88 + 40,s9:sp_88 + 24,sp:sp_88 + 0xFFFFFFFFFFFFFFF8,Stack +FFFFFF98:a5_7,Stack +FFFFFFA8:s9,Stack +FFFFFFB0:s8,Stack +FFFFFFB8:s7,Stack +FFFFFFC0:s6,Stack +FFFFFFC8:s5,Stack +FFFFFFD0:s4,Stack +FFFFFFD8:s3,Stack +FFFFFFE0:s2,Stack +FFFFFFE8:s1,Stack +FFFFFFF0:s0,Stack +FFFFFFF8:ra,t1:t1,t3:t3,t4:t4_263,t5:t5,t6:t6
		defs: a0:a0_201,a6:a6_219,gp:gp_191,ra:ra_207,s0:s0_193,s1:s1_188,s2:s2_196,s3:s3_208,s4:s4_199,s5:s5_210,s6:s6_205,s7:s7_211,s8:s8_213,s9:s9_215,sp:sp_186
	Mem221[s0_193 + 32:word64] = (word64) a0_201
	word64 a0_223
	gp = fn00000000000163B0(ra_207, gp_191, s0_193, s1_188, sp_186 + 40, s2_196, s3_208, s4_199, s5_210, s6_205, s7_211, s8_213, s9_215, out a0_223, out a4_809, out a5_810)
	Mem230[s0_193 + 16:word64] = a0_223
	word64 a0_233
	word64 a2_235
	word64 s2_240
	word64 a3_243
	word64 sp_242
	word64 s0_238
	word64 s1_239
	word64 s3_241
	word64 ra_237 = fn00000000000173D4(sp_186 + 40, s2_196, out sp_242, out s0_238, out s1_239, out a0_233, out a2_235, out a3_243, out s2_240, out s3_241)
	Mem245[s0_238 + 184:word64] = a0_233
	word64 a4_261
	word64 t4_263
	Mem264[s0_238 + 24:word64] = fn0000000000018118(ra_237, gp, t1, s0_238, sp_242 + 40, s5_210, a2_235, a3_243, a6_219, a7, t3, t6, out a4_261, out t4_263)
	word64 a2_272 = (word64) a2_235
	word64 a3_287 = (word64) a3_243
	word64 a1_278 = (word64) s5_210
	word64 a5_265 = 128
	branch s2_240 != a5_265 l0000000000017870
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0000000000017870:
	word64 sp_267
	word64 s1_268
	word64 s0_271
	word64 s2_274
	word64 s4_275
	word64 a0_277
	word64 s6_280
	word64 ra_281
	word64 s3_282
	word64 s5_283
	word64 s7_284
	word64 a6_290
	word64 t1_291
	word64 a7_292
	word64 t3_293
	word64 t6_294
	word64 t4_295
	word64 s9_286
	word64 s8_285
	call __strdup (retsize: 0;)
		uses: a0:(word64) s3_241,a1:a1_278,a2:a2_272,a3:a3_287,a4:a4_261,a5:a5_265,a6:a6_219,a7:a7,fa3:fa3,fa4:fa4,fa5:fa5,gp:gp_229,ra:ra_237,s0:s0_238,s1:s1_239,s2:s2_240,s3:s3_241,s4:s4_199,s5:s5_210,s6:s6_205,s7:s7_211,s8:s8_213,s9:s9_215,sp:sp_242,Stack +FFFFFF98:a5_7,Stack +FFFFFFA8:s9,Stack +FFFFFFB0:s8,Stack +FFFFFFB8:s7,Stack +FFFFFFC0:s6,Stack +FFFFFFC8:s5,Stack +FFFFFFD0:s4,Stack +FFFFFFD8:s3,Stack +FFFFFFE0:s2,Stack +FFFFFFE8:s1,Stack +FFFFFFF0:s0,Stack +FFFFFFF8:ra,t1:t1,t3:t3,t4:t4_263,t5:t5,t6:t6
		defs: a0:a0_277,a6:a6_290,a7:a7_292,gp:gp_270,ra:ra_281,s0:s0_271,s1:s1_268,s2:s2_274,s3:s3_282,s4:s4_275,s5:s5_283,s6:s6_280,s7:s7_284,s8:s8_285,s9:s9_286,sp:sp_267,t1:t1_291,t3:t3_293,t4:t4_295,t6:t6_294
	Mem297[s0_271 + 168:word64] = (word64) a0_277
// DataOut:
// DataOut (flags):
// SymbolicIn:

l000000000001787C:
	word64 a4_302 = (word64) Mem299[s8_285:byte]
	s8_285 = s8_285 + 1
	word64 a5_305 = (word64) Mem299[s9_286:byte] ^ -1 | a4_302
	Mem306[s8_285 + 4095:byte] = a5_305
	s9_286 = s9_286 + 1
	branch s3_282 != s8_285 l000000000001787C
// DataOut:
// DataOut (flags):
// SymbolicIn:

l000000000001789C:
	word64 a2_316 = (word64) s3_282
	word64 a1_315 = (word64) (sp_267 + 40)
	branch (word64) inet_ntop(0x000000000000000A, a1_315, a2_316, 0x00000000000000FA) == 0x0000000000000000 l0000000000017768
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0000000000017768:
	branch (word64) Mem323[gp + -2028:int32] == 0x0000000000000000 l0000000000017804
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0000000000017804:
	a0_334 = DPB(0x00000000000117F8, fwrite(0x00000000000117F8, 0x0000000000000001, 0x000000000000002B, (word64) Mem323[gp + -1920:word64]), 0)
	a0_122 = -1
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00000000000178B4:
	word64 s2_348
	word64 a0_352
	call __strdup (retsize: 0;)
		uses: a0:(word64) s3_282,a1:a1_315,a2:a2_316,a3:0x00000000000000FA,a4:a4_302,a5:a5_305,a6:a6_290,a7:a7_292,fa3:fa3,fa4:fa4,fa5:fa5,gp:gp_270,ra:ra_281,s0:s0_271,s1:s1_268,s2:s2_274,s3:s3_282,s4:s4_275,s5:s5_283,s6:s6_280,s7:s7_284,s8:s8_303,s9:s9_307,sp:sp_267 + 0xFFFFFFFFFFFFFFF8,Stack +FFFFFF98:a5_7,Stack +FFFFFFA8:s9,Stack +FFFFFFB0:s8,Stack +FFFFFFB8:s7,Stack +FFFFFFC0:s6,Stack +FFFFFFC8:s5,Stack +FFFFFFD0:s4,Stack +FFFFFFD8:s3,Stack +FFFFFFE0:s2,Stack +FFFFFFE8:s1,Stack +FFFFFFF0:s0,Stack +FFFFFFF8:ra,t1:t1_291,t3:t3_293,t4:t4_295,t5:t5,t6:t6_294
		defs: a0:a0_352,gp:gp_343,ra:ra_357,s0:s0_345,s1:s1_341,s2:s2_348,s3:s3_358,s4:s4_350,s5:s5_360,s6:s6_355,s7:s7_362,sp:sp_339,t1:t1_370,t3:t3_374,t4:t4_378
	Mem381[s0_238 + 176:word64] = (word64) a0_352
	word64 a5_379 = 128
	s2_382 = (int64) (a5_379 - s2_348)
	a0_402 = (word64) (s0_238 + 96) (alias)
	branch s2_382 != a5_379 l0000000000017728
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00000000000178D0:
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0000000000017714:
	word64 a5_386 = Mem264[s0_238 + 32:word64]
	Mem389[s0_238 + 168:word64] = a5_386
	Mem390[s0_238 + 176:word64] = a5_386
	a0_402 = (word64) (s0_238 + 96) (alias)
	s2_382 = 0
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0000000000017728:
	s2_382 = (s2_382 << 0x00000000 >>u 0x0000001D) + 0x0000000000010480
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0000000000017740:
	a0_408 = DPB(a0_402, snprintf(a0_402, 0x0000000000000040, 0x0000000000011990, 0x00000000), 0)
	word64 sp_411 = sp_242 + 0xFFFFFFFFFFFFFFF8
	branch s6_205 << 0x00000011 < 0x0000000000000000 l00000000000178DC
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00000000000178DC:
	ra_237 = fn0000000000017D10(ra_237, gp, t1, s0_238, s1_239, sp_411 + 8, s0_238 + 64, s0_238 + 72, s0_238 + 80, s0_238 + 88, s2_382, s3_241, s4_199, s5_210, s6_205, s7_211, fa3, fa4, fa5, out sp_411, out gp, out t1, out s0_238, out s1_239, out a1_458, out a2_459, out a3_460, out s3_241, out s6_205)
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0000000000017758:
	branch (s6_205 & 1) != 0x0000000000000000 l0000000000017824
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0000000000017824:
	word64 a0_502 = fn00000000000168E4(ra_237, gp, t1, s0_238, s1_239, 10, sp_411 + 8, t3, t4_263, t5, out a1_503, out a2_504, out a3_505)
	Mem513[s0_238 + 56:word64] = a0_502
	branch a0_502 != 0x0000000000000000 l0000000000017760
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0000000000017838:
	branch (word64) Mem513[gp + -2028:int32] != 0x0000000000000000 l0000000000017770
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0000000000017840:
	word64 a0_523 = (word64) s3_241
	a0_527 = DPB(a0_523, __sprintf_chk(a0_523, 0x0000000000000001, 0x00000000000000FA, 0x0000000000011830, 0x00000000), 0)
	herror((word64) s3_241)
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0000000000017770:
	a0_122 = -1
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0000000000017760:
	a0_122 = 0
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0000000000017774:
	branch a5_7 != Mem537[gp + -1936:word64] l0000000000017920
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0000000000017920:
	__stack_chk_fail()
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0000000000017780:
	a1Out = <invalid>
	a2Out = <invalid>
	a3Out = <invalid>
	a4Out = a5_7
	return a0_122
// DataOut:
// DataOut (flags):
// SymbolicIn:

fn00000000000175BC_exit:
// DataOut:
// DataOut (flags):
// SymbolicIn:



word64 fn0000000000017924(word64 gp, ptr64 & a1Out, ptr64 & a2Out, ptr64 & a3Out, ptr64 & a4Out, ptr64 & a6Out)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  gp:[0..63]
// LiveOut: a0 a1 a2 a3 a4 a6
// Trashed: a0 a1 a2 a3 a4 a5 a6
// Preserved: ra s0 s1 s2 s3 s4 s5 s6 s7 s8 s9 sp
fn0000000000017924_entry:
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0000000000017924:
	word64 s0_152
	branch Mem5[gp + -2016:word64] == 0x0000000000000000 l00000000000179B8
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00000000000179B8:
	s0_152 = (word64) Mem27[gp + -2024:int32]
	branch s0_152 != 0x0000000000000000 l000000000001795C
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00000000000179C0:
	word64 a0_34 = dlopen(0x0000000000012A38, 0x0000000000000001)
	word64 a0_36 = (word64) a0_34
	Mem37[gp + 2080:word64] = a0_36
	branch a0_36 == 0x0000000000000000 l0000000000017B14
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0000000000017B14:
	a3 = 256
	a2 = 1
	word64 a0_47 = (word64) (gp + -800)
	s0_152 = -1
	a0_52 = DPB(a0_47, __snprintf_chk(a0_47, (word64) a3, (word64) a2, (word64) a3, 0x0000000000012A58, 0x00000000), 0)
	Mem54[gp + 2072:word32] = s0_152
	a4 = 0x0000000000012A58
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00000000000179DC:
	Mem62[gp + 2152:word64] = (word64) dlsym(a0_34, 0x0000000000012A78)
	word64 a0_70 = (word64) dlsym((word64) a0_36, 0x0000000000012A90)
	Mem74[gp + 2144:word64] = a0_70
	word64 a0_80 = (word64) dlsym((word64) a0_36, 0x0000000000012AA0)
	Mem84[gp + 2136:word64] = a0_80
	word64 a0_90 = (word64) dlsym((word64) a0_36, 0x0000000000012AC0)
	Mem94[gp + 2120:word64] = a0_90
	word64 a0_100 = (word64) dlsym((word64) a0_36, 0x0000000000012AD0)
	Mem104[gp + 2112:word64] = a0_100
	word64 a0_110 = (word64) dlsym((word64) a0_36, 0x0000000000012AE8)
	Mem114[gp + 2104:word64] = a0_110
	word64 a0_120 = (word64) dlsym((word64) a0_36, 0x0000000000012B00)
	Mem124[gp + 2096:word64] = a0_120
	word64 a0_130 = (word64) dlsym((word64) a0_36, 0x0000000000012B18)
	Mem134[gp + 2088:word64] = a0_130
	Mem140[gp + 2128:word64] = (word64) dlsym((word64) a0_36, 0x0000000000012B38)
	branch a0_70 == 0x0000000000000000 l0000000000017ACC
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0000000000017AAC:
	branch a0_80 == 0x0000000000000000 l0000000000017ACC
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0000000000017AB0:
	branch a0_90 == 0x0000000000000000 l0000000000017ACC
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0000000000017AB4:
	branch a0_100 == 0x0000000000000000 l0000000000017ACC
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0000000000017AB8:
	branch a0_110 == 0x0000000000000000 l0000000000017ACC
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0000000000017ABC:
	branch a0_120 == 0x0000000000000000 l0000000000017ACC
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0000000000017AC0:
	branch a0_130 == 0x0000000000000000 l0000000000017ACC
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0000000000017ACC:
	a6 = Mem140[0x0000000000012B50:word64]
	word64 a0_145 = Mem140[0x0000000000012B58:word64]
	word64 a1_146 = Mem140[0x0000000000012B60:word64]
	a2 = Mem140[0x0000000000012B68:word64]
	a3 = Mem140[0x0000000000012B70:word64]
	a4 = (word64) Mem140[0x0000000000012B78:int32]
	Mem153[gp + -800:word64] = a6
	Mem154[gp + -792:word64] = a0_145
	Mem155[gp + -784:word64] = a1_146
	Mem156[gp + -776:word64] = a2
	Mem157[gp + -768:word64] = a3
	Mem158[gp + -760:word32] = a4
	s0_152 = -1
	Mem159[gp + 2072:word32] = s0_152
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0000000000017AC4:
	Mem160[gp + 2072:word32] = 0x0000000000000000
// DataOut:
// DataOut (flags):
// SymbolicIn:

l000000000001795C:
	branch (word64) Mem27[gp + -2028:int32] != 0x0000000000000000 l000000000001796C
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0000000000017964:
	branch (word64) Mem27[gp + -800:byte] != 0x0000000000000000 l00000000000179A8
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00000000000179A8:
	word64 a0_167 = (word64) (gp + -800)
	a0_169 = DPB(a0_167, fputs(a0_167, (word64) Mem27[gp + -1920:word64]), 0)
// DataOut:
// DataOut (flags):
// SymbolicIn:

l000000000001796C:
	s0_152 = (word64) Mem27[gp + -2024:int32]
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0000000000017970:
	a1Out = <invalid>
	a2Out = a2
	a3Out = a3
	a4Out = a4
	a6Out = a6
	return s0_152
// DataOut:
// DataOut (flags):
// SymbolicIn:

fn0000000000017924_exit:
// DataOut:
// DataOut (flags):
// SymbolicIn:



word64 fn0000000000017B40(word64 ra, word64 gp, word64 t1, word64 s0, word64 s1, word64 a0, word64 a1, word64 a2, word64 a3, word64 a4, word64 s2, word64 s3, word64 s4, word64 s5, word64 s6, word64 s7, word64 fa3, word64 fa4, word64 fa5, ptr64 & spOut, ptr64 & gpOut, ptr64 & t1Out, ptr64 & s0Out, ptr64 & s1Out, ptr64 & a1Out, ptr64 & a2Out, ptr64 & s6Out)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  a0:[0..63] a1:[0..63] a2:[0..63] a3:[0..63] a4:[0..63] fa3:[0..63] fa4:[0..63] fa5:[0..63] gp:[0..63] ra:[0..63] s0:[0..63] s1:[0..63] s2:[0..63] s3:[0..63] s4:[0..63] s5:[0..63] s6:[0..63] s7:[0..63] t1:[0..63]
// LiveOut: a1 a2 gp ra s0 s1 s6 sp t1
// Trashed: a0 a1 a2 a3 a4 a5 a6 fa3 fa4 fa5 gp ra s0 s1 s2 s3 s4 s5 s6 s7 sp t1
// Preserved:
fn0000000000017B40_entry:
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0000000000017B40:
	word64 a1_59 = (word64) a1_34
	word64 a2_61 = (word64) a2_35
	word64 a1_34
	word64 a2_35
	word64 a6_39
	branch fn0000000000017924(gp, out a1_34, out a2_35, out a3_36, out a4_37, out a6_39) == 0x0000000000000000 l0000000000017BB0
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0000000000017BB0:
	word64 a3_42
	word64 a4_43
	word64 a0_41 = fn00000000000182B4(a0, out a3_42, out a4_43, out a5_662)
	word64 a5_45 = Mem21[gp + -1944:word64]
	word64 sp_47
	word64 s0_48
	word64 s1_49
	word64 s2_50
	word64 s3_51
	word64 s4_52
	word64 ra_53
	word64 s5_54
	word64 s6_55
	word64 s7_56
	word64 a2_62
	word64 a3_63
	word64 a4_64
	word64 gp_66
	word64 fa4_68
	word64 fa5_70
	word64 t1_72
	word64 fa3_74
	word64 a6_75
	call a5_45 (retsize: 0;)
		uses: a0:(word64) a0_41,a1:a1_59,a2:a2_61,a3:a3_42,a4:a4_43,a5:a5_45,a6:a6_39,fa3:fa3,fa4:fa4,fa5:fa5,gp:gp,ra:ra,s0:a0,s1:a3,s2:a2,s3:a1,s4:a4,s5:s5,s6:s6,s7:a0_41,sp:fp + -80,Stack +0008:s7,Stack +0010:s6,Stack +0018:s5,Stack +0020:s4,Stack +0028:s3,Stack +0030:s2,Stack +0038:s1,Stack +0040:s0,Stack +0048:ra,t1:t1
		defs: a2:a2_62,a3:a3_63,a4:a4_64,a6:a6_75,fa3:fa3_74,fa4:fa4_68,fa5:fa5_70,gp:gp_66,ra:ra_53,s0:s0_48,s1:s1_49,s2:s2_50,s3:s3_51,s4:s4_52,s5:s5_54,s6:s6_55,s7:s7_56,sp:sp_47,t1:t1_72
	word64 a5_76 = Mem21[gp_66 + -1952:word64]
	word64 a0_90
	word64 gp_294
	word64 sp_265
	word64 s1_268
	word64 s2_270
	word64 s3_272
	word64 s4_274
	word64 ra_276
	word64 s5_278
	word64 s6_280
	word64 s7_282
	word64 a2_288
	word64 a3_290
	word64 a4_292
	word64 fa4_296
	word64 fa5_298
	word64 t1_100
	word64 fa3_101
	word64 a6_102
	call a5_76 (retsize: 0;)
		uses: a0:0x0000000000000001,a1:0x0000000000000010,a2:a2_62,a3:a3_63,a4:a4_64,a5:a5_76,a6:a6_75,fa3:fa3_74,fa4:fa4_68,fa5:fa5_70,gp:gp_66,ra:ra_53,s0:s0_48,s1:s1_49,s2:s2_50,s3:s3_51,s4:s4_52,s5:s5_54,s6:s6_55,s7:s7_56,sp:sp_47,Stack +FFFFFFB8:s7,Stack +FFFFFFC0:s6,Stack +FFFFFFC8:s5,Stack +FFFFFFD0:s4,Stack +FFFFFFD8:s3,Stack +FFFFFFE0:s2,Stack +FFFFFFE8:s1,Stack +FFFFFFF0:s0,Stack +FFFFFFF8:ra,t1:t1_72
		defs: a0:a0_90,a2:a2_93,a3:a3_94,a4:a4_95,a6:a6_102,fa3:fa3_101,fa4:fa4_98,fa5:fa5_99,gp:gp_97,ra:ra_85,s1:s1_81,s2:s2_82,s3:s3_83,s4:s4_84,s5:s5_86,s6:s6_87,s7:s7_88,sp:sp_79,t1:t1_100
	word64 a0_103 = (word64) a0_90
	word64 a0_120 = (word64) a0_103
	word64 s0_104 = a0_103
	branch a0_103 == 0x0000000000000000 l0000000000017C3C
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0000000000017BDC:
	word64 a5_105 = Mem21[gp_294 + -1992:word64]
	word64 a4_106 = 1
	Mem108[a0_103 + 76:word32] = a4_106
	word64 sp_110
	word64 s0_111
	word64 s1_112
	word64 s2_113
	word64 s3_114
	word64 s4_115
	word64 ra_116
	word64 s5_117
	word64 s7_119
	word64 a0_121
	word64 a2_124
	word64 a3_125
	word64 a4_126
	word64 fa4_129
	word64 fa5_130
	word64 fa3_132
	word64 a6_133
	call a5_105 (retsize: 0;)
		uses: a0:a0_120,a1:(word64) (s7_88 << 0x00000000 >>u 0x00000000),a2:a2_93,a3:a3_94,a4:a4_106,a5:a5_105,a6:a6_102,fa3:fa3_101,fa4:fa4_98,fa5:fa5_99,gp:gp_97,ra:ra_85,s0:a0_103,s1:s1_81,s2:s2_82,s3:s3_83,s4:s4_84,s5:s5_86,s6:s6_87,s7:s7_88,sp:sp_79,Stack +FFFFFFB8:s7,Stack +FFFFFFC0:s6,Stack +FFFFFFC8:s5,Stack +FFFFFFD0:s4,Stack +FFFFFFD8:s3,Stack +FFFFFFE0:s2,Stack +FFFFFFE8:s1,Stack +FFFFFFF0:s0,Stack +FFFFFFF8:ra,t1:t1_100
		defs: a0:a0_121,a2:a2_124,a3:a3_125,a4:a4_126,a6:a6_133,fa3:fa3_132,fa4:fa4_129,fa5:fa5_130,gp:gp_128,ra:ra_116,s0:s0_111,s1:s1_112,s2:s2_113,s3:s3_114,s4:s4_115,s5:s5_117,s7:s7_119,sp:sp_110,t1:t1_131
	word64 a0_134 = (word64) a0_121
	branch a0_134 < 0x0000000000000000 l0000000000017B84
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0000000000017BFC:
	word64 a5_136 = Mem108[gp + -1960:word64]
	word64 a0_150
	word64 a5_156
	word64 gp_157
	word64 s6_147
	word64 sp_139
	word64 s0_140
	word64 s1_141
	word64 s2_142
	word64 s3_143
	word64 s4_144
	word64 ra_145
	word64 s5_146
	word64 s7_148
	word64 a1_152
	word64 a2_153
	word64 a3_154
	word64 a4_155
	word64 fa4_158
	word64 fa5_159
	word64 t1_160
	word64 fa3_161
	word64 a6_162
	call a5_136 (retsize: 0;)
		uses: a0:(word64) s0_111,a1:(word64) a0_134,a2:a2_124,a3:a3_125,a4:a4_126,a5:a5_136,a6:a6_133,fa3:fa3_132,fa4:fa4_129,fa5:fa5_130,gp:gp_128,ra:ra_116,s0:s0_111,s1:s1_112,s2:s2_113,s3:s3_114,s4:s4_115,s5:s5_117,s6:a0_134,s7:s7_119,sp:sp_110,Stack +FFFFFFB8:s7,Stack +FFFFFFC0:s6,Stack +FFFFFFC8:s5,Stack +FFFFFFD0:s4,Stack +FFFFFFD8:s3,Stack +FFFFFFE0:s2,Stack +FFFFFFE8:s1,Stack +FFFFFFF0:s0,Stack +FFFFFFF8:ra,t1:t1_131
		defs: a0:a0_150,a1:a1_152,a2:a2_153,a3:a3_154,a4:a4_155,a5:a5_156,a6:a6_162,fa3:fa3_161,fa4:fa4_158,fa5:fa5_159,gp:gp_157,ra:ra_145,s0:s0_140,s1:s1_141,s2:s2_142,s3:s3_143,s4:s4_144,s5:s5_146,s6:s6_147,s7:s7_148,sp:sp_139,t1:t1_160
	branch (word64) a0_150 == 0x0000000000000000 l0000000000017C18
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0000000000017C10:
	word64 a0_174
	call __strdup (retsize: 0;)
		uses: a0:a0_150,a1:a1_152,a2:a2_153,a3:a3_154,a4:a4_155,a5:a5_156,a6:a6_162,fa3:fa3_161,fa4:fa4_158,fa5:fa5_159,gp:gp_157,ra:ra_145,s0:s0_140,s1:s1_141,s2:s2_142,s3:s3_143,s4:s4_144,s5:s5_146,s6:s6_147,s7:s7_148,sp:sp_139,Stack +FFFFFFB8:s7,Stack +FFFFFFC0:s6,Stack +FFFFFFC8:s5,Stack +FFFFFFD0:s4,Stack +FFFFFFD8:s3,Stack +FFFFFFE0:s2,Stack +FFFFFFE8:s1,Stack +FFFFFFF0:s0,Stack +FFFFFFF8:ra,t1:t1_160
		defs: a0:a0_174,a1:a1_175,a2:a2_176,a3:a3_177,a4:a4_178,a6:a6_185,fa3:fa3_184,fa4:fa4_181,fa5:fa5_182,gp:gp_180,ra:ra_170,s0:s0_165,s1:s1_166,s2:s2_167,s3:s3_168,s4:s4_169,s5:s5_171,s6:s6_172,s7:s7_173,sp:sp_164,t1:t1_183
	Mem187[s3_143:word64] = (word64) a0_174
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0000000000017C18:
	word64 a5_190 = Mem189[gp_157 + -1968:word64]
	word64 a0_213
	word64 a5_222
	word64 gp_223
	word64 s0_196
	word64 sp_194
	word64 s1_198
	word64 s2_200
	word64 s3_202
	word64 s4_204
	word64 ra_206
	word64 s5_208
	word64 s6_209
	word64 s7_211
	word64 a1_215
	word64 a2_217
	word64 a3_219
	word64 a4_221
	word64 fa4_225
	word64 fa5_227
	word64 t1_229
	word64 fa3_231
	word64 a6_233
	call a5_190 (retsize: 0;)
		uses: a0:(word64) s6_191,a1:a1_214,a2:a2_216,a3:a3_218,a4:a4_220,a5:a5_190,a6:a6_232,fa3:fa3_230,fa4:fa4_224,fa5:fa5_226,gp:gp_188,ra:ra_205,s0:s0_195,s1:s1_197,s2:s2_199,s3:s3_201,s4:s4_203,s5:s5_207,s6:s6_191,s7:s7_210,sp:sp_193,Stack +FFFFFFB8:s7,Stack +FFFFFFC0:s6,Stack +FFFFFFC8:s5,Stack +FFFFFFD0:s4,Stack +FFFFFFD8:s3,Stack +FFFFFFE0:s2,Stack +FFFFFFE8:s1,Stack +FFFFFFF0:s0,Stack +FFFFFFF8:ra,t1:t1_228
		defs: a0:a0_213,a1:a1_215,a2:a2_217,a3:a3_219,a4:a4_221,a5:a5_222,a6:a6_233,fa3:fa3_231,fa4:fa4_225,fa5:fa5_227,gp:gp_223,ra:ra_206,s0:s0_196,s1:s1_198,s2:s2_200,s3:s3_202,s4:s4_204,s5:s5_208,s6:s6_209,s7:s7_211,sp:sp_194,t1:t1_229
	branch (word64) a0_213 == 0x0000000000000000 l0000000000017C30
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0000000000017C28:
	word64 a0_245
	call __strdup (retsize: 0;)
		uses: a0:a0_213,a1:a1_215,a2:a2_217,a3:a3_219,a4:a4_221,a5:a5_222,a6:a6_233,fa3:fa3_231,fa4:fa4_225,fa5:fa5_227,gp:gp_223,ra:ra_206,s0:s0_196,s1:s1_198,s2:s2_200,s3:s3_202,s4:s4_204,s5:s5_208,s6:s6_209,s7:s7_211,sp:sp_194,Stack +FFFFFFB8:s7,Stack +FFFFFFC0:s6,Stack +FFFFFFC8:s5,Stack +FFFFFFD0:s4,Stack +FFFFFFD8:s3,Stack +FFFFFFE0:s2,Stack +FFFFFFE8:s1,Stack +FFFFFFF0:s0,Stack +FFFFFFF8:ra,t1:t1_229
		defs: a0:a0_245,a1:a1_246,a2:a2_247,a3:a3_248,a4:a4_249,a6:a6_256,fa3:fa3_255,fa4:fa4_252,fa5:fa5_253,gp:gp_251,ra:ra_241,s0:s0_236,s1:s1_237,s2:s2_238,s3:s3_239,s4:s4_240,s5:s5_242,s6:s6_243,s7:s7_244,sp:sp_235,t1:t1_254
	Mem258[s2_200:word64] = (word64) a0_245
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0000000000017C30:
	word64 a5_261 = Mem260[gp_223 + -1976:word64]
	call a5_261 (retsize: 0;)
		uses: a0:(word64) s0_262,a1:a1_285,a2:a2_287,a3:a3_289,a4:a4_291,a5:a5_261,a6:a6_303,fa3:fa3_301,fa4:fa4_295,fa5:fa5_297,gp:gp_259,ra:ra_275,s0:s0_262,s1:s1_267,s2:s2_269,s3:s3_271,s4:s4_273,s5:s5_277,s6:s6_279,s7:s7_281,sp:sp_264,Stack +FFFFFFB8:s7,Stack +FFFFFFC0:s6,Stack +FFFFFFC8:s5,Stack +FFFFFFD0:s4,Stack +FFFFFFD8:s3,Stack +FFFFFFE0:s2,Stack +FFFFFFE8:s1,Stack +FFFFFFF0:s0,Stack +FFFFFFF8:ra,t1:t1_299
		defs: a2:a2_288,a3:a3_290,a4:a4_292,a6:a6_304,fa3:fa3_302,fa4:fa4_296,fa5:fa5_298,gp:gp_294,ra:ra_276,s0:s0_266,s1:s1_268,s2:s2_270,s3:s3_272,s4:s4_274,s5:s5_278,s6:s6_280,s7:s7_282,sp:sp_265,t1:t1_300
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0000000000017C3C:
	word64 a5_307 = Mem306[gp_294 + -1952:word64]
	word64 a4_339
	word64 s7_329
	word64 sp_311
	word64 s1_315
	word64 s2_317
	word64 s3_319
	word64 s4_321
	word64 ra_323
	word64 s5_325
	word64 s6_327
	word64 a0_331
	word64 a2_335
	word64 a3_337
	word64 fa4_343
	word64 fa5_345
	word64 fa3_349
	word64 a6_351
	call a5_307 (retsize: 0;)
		uses: a0:0x0000000000000002,a1:0x0000000000000010,a2:a2_334,a3:a3_336,a4:a4_338,a5:a5_307,a6:a6_350,fa3:fa3_348,fa4:fa4_342,fa5:fa5_344,gp:gp_305,ra:ra_322,s0:s0_312,s1:s1_314,s2:s2_316,s3:s3_318,s4:s4_320,s5:s5_324,s6:s6_326,s7:s7_328,sp:sp_310,Stack +FFFFFFB8:s7,Stack +FFFFFFC0:s6,Stack +FFFFFFC8:s5,Stack +FFFFFFD0:s4,Stack +FFFFFFD8:s3,Stack +FFFFFFE0:s2,Stack +FFFFFFE8:s1,Stack +FFFFFFF0:s0,Stack +FFFFFFF8:ra,t1:t1_346
		defs: a0:a0_331,a2:a2_335,a3:a3_337,a4:a4_339,a6:a6_351,fa3:fa3_349,fa4:fa4_343,fa5:fa5_345,gp:gp_341,ra:ra_323,s1:s1_315,s2:s2_317,s3:s3_319,s4:s4_321,s5:s5_325,s6:s6_327,s7:s7_329,sp:sp_311,t1:t1_347
	word64 a0_352 = (word64) a0_331
	word64 s0_353 = a0_352
	branch a0_352 == 0x0000000000000000 l0000000000017CF4
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0000000000017CF4:
	word64 a5_354 = Mem306[gp + -1952:word64]
	call a5_354 (retsize: 0;)
		uses: a0:0x0000000000000006,a1:0x0000000000000010,a2:a2_335,a3:a3_337,a4:a4_339,a5:a5_354,a6:a6_351,fa3:fa3_349,fa4:fa4_343,fa5:fa5_345,gp:gp_341,ra:ra_323,s0:a0_352,s1:s1_315,s2:s2_317,s3:s3_319,s4:s4_321,s5:s5_325,s6:s6_327,s7:s7_329,sp:sp_311,Stack +FFFFFFB8:s7,Stack +FFFFFFC0:s6,Stack +FFFFFFC8:s5,Stack +FFFFFFD0:s4,Stack +FFFFFFD8:s3,Stack +FFFFFFE0:s2,Stack +FFFFFFE8:s1,Stack +FFFFFFF0:s0,Stack +FFFFFFF8:ra,t1:t1_347
		defs: a0:a0_368,a2:a2_371,a3:a3_372,a6:a6_380,fa3:fa3_379,fa4:fa4_376,fa5:fa5_377,gp:gp_375,ra:ra_363,s1:s1_359,s2:s2_360,s3:s3_361,s4:s4_362,s5:s5_364,s6:s6_365,s7:s7_366,sp:sp_357,t1:t1_378
	word64 a0_381 = (word64) a0_331
	s0_353 = a0_381
	branch a0_381 != 0x0000000000000000 l0000000000017C54
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0000000000017D0C:
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0000000000017C54:
	word64 a5_385 = Mem306[gp + -1984:word64]
	word64 a4_386 = 1
	Mem390[s0_353 + 76:word32] = a4_386
	word64 s1_396
	word64 s3_400
	word64 ra_404
	word64 s5_406
	word64 s6_408
	word64 s7_409
	word64 a0_411
	word64 t1_426
	word64 s4_402
	word64 s0_394
	word64 sp_393
	word64 gp_420
	word64 a1_413
	word64 a2_415
	word64 a3_417
	word64 a4_418
	word64 a5_419
	word64 fa4_422
	word64 fa5_424
	word64 fa3_428
	word64 a6_430
	call a5_385 (retsize: 0;)
		uses: a0:a0_410,a1:(word64) (s7_387 << 0x00000000 >>u 0x00000000),a2:a2_414,a3:a3_416,a4:a4_386,a5:a5_385,a6:a6_429,fa3:fa3_427,fa4:fa4_421,fa5:fa5_423,gp:gp_383,ra:ra_403,s0:s0_389,s1:s1_395,s2:s2_397,s3:s3_399,s4:s4_401,s5:s5_405,s6:s6_407,s7:s7_387,sp:sp_392,Stack +FFFFFFB8:s7,Stack +FFFFFFC0:s6,Stack +FFFFFFC8:s5,Stack +FFFFFFD0:s4,Stack +FFFFFFD8:s3,Stack +FFFFFFE0:s2,Stack +FFFFFFE8:s1,Stack +FFFFFFF0:s0,Stack +FFFFFFF8:ra,t1:t1_425
		defs: a0:a0_411,a1:a1_413,a2:a2_415,a3:a3_417,a4:a4_418,a5:a5_419,a6:a6_430,fa3:fa3_428,fa4:fa4_422,fa5:fa5_424,gp:gp_420,ra:ra_404,s0:s0_394,s1:s1_396,s3:s3_400,s4:s4_402,s5:s5_406,s6:s6_408,s7:s7_409,sp:sp_393,t1:t1_426
	word64 a0_431 = (word64) a0_411
	word64 s2_432 = a0_431
	branch a0_431 == 0x0000000000000000 l0000000000017C94
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0000000000017C74:
	word64 a0_433 = Mem390[a0_431 + 32:word64]
	word64 a0_444 = (word64) a0_433
	branch a0_433 == 0x0000000000000000 l0000000000017C84
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0000000000017C7C:
	word64 s1_436
	word64 a0_445
	call __strdup (retsize: 0;)
		uses: a0:a0_444,a1:a1_413,a2:a2_415,a3:a3_417,a4:a4_418,a5:a5_419,a6:a6_430,fa3:fa3_428,fa4:fa4_422,fa5:fa5_424,gp:gp_420,ra:ra_404,s0:s0_394,s1:s1_396,s2:a0_431,s3:s3_400,s4:s4_402,s5:s5_406,s6:s6_408,s7:s7_409,sp:sp_393,Stack +FFFFFFB8:s7,Stack +FFFFFFC0:s6,Stack +FFFFFFC8:s5,Stack +FFFFFFD0:s4,Stack +FFFFFFD8:s3,Stack +FFFFFFE0:s2,Stack +FFFFFFE8:s1,Stack +FFFFFFF0:s0,Stack +FFFFFFF8:ra,t1:t1_426
		defs: a0:a0_445,a1:a1_446,a2:a2_447,a3:a3_448,a4:a4_449,a6:a6_456,fa3:fa3_455,gp:gp_451,s0:s0_435,s1:s1_436,s2:s2_437,s4:s4_439,sp:sp_434
	Mem458[s1_436:word64] = (word64) a0_445
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0000000000017C84:
	fa4_422 = Mem460[s2_432 + 52:real32]
	fa5_424 = (real32) 0x0000000000000000
	a5_419 = (word64) ((real32) fa4_422 == (real32) fa5_424)
	branch a5_419 == 0x0000000000000000 l0000000000017CC8
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0000000000017CC8:
	fa5_424 = (real64) Mem460[s2_432 + 48:real32]
	a1_413 = 0x0000000000000001 (alias)
	word64 a0_474 = (word64) s4_402
	fa4_422 = (real64) a4_418
	a2_415 = 0x0000000000012B80 (alias)
	fa3_428 = (real64) a5_419
	a0_477 = DPB(a0_474, __asprintf_chk(a0_474, 0x0000000000000001, 0x0000000000012B80, 0x00000000), 0)
	sp_393 = sp_393 + 0xFFFFFFFFFFFFFFF8
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0000000000017C94:
	word64 t1_496 = Mem484[gp_420 + -1976:word64]
	word64 sp_498
	word64 s0_499
	word64 s1_500
	word64 ra_504
	word64 s6_506
	word64 gp_523
	word64 t1_528
	call t1_496 (retsize: 0;)
		uses: a0:(word64) s0_480,a1:a1_510,a2:a2_513,a3:a3_516,a4:a4_519,a5:a5_521,a6:a6_532,fa3:fa3_529,fa4:fa4_524,fa5:fa5_526,gp:gp_494,ra:Mem484[sp_483 + 72:word64],s0:Mem484[sp_483 + 64:word64],s1:Mem484[sp_483 + 56:word64],s2:Mem484[sp_483 + 48:word64],s3:Mem484[sp_483 + 40:word64],s4:Mem484[sp_483 + 32:word64],s5:Mem484[sp_483 + 24:word64],s6:Mem484[sp_483 + 16:word64],s7:Mem484[sp_483 + 8:word64],sp:sp_483 + 80,Stack +FFFFFFB8:s7,Stack +FFFFFFC0:s6,Stack +FFFFFFC8:s5,Stack +FFFFFFD0:s4,Stack +FFFFFFD8:s3,Stack +FFFFFFE0:s2,Stack +FFFFFFE8:s1,Stack +FFFFFFF0:s0,Stack +FFFFFFF8:ra,t1:t1_496
		defs: gp:gp_523,ra:ra_504,s0:s0_499,s1:s1_500,s6:s6_506,sp:sp_498,t1:t1_528
	spOut = sp_498
	gpOut = gp_523
	t1Out = t1_528
	s0Out = s0_499
	s1Out = s1_500
	a1Out = <invalid>
	a2Out = <invalid>
	s6Out = s6_506
	return ra_504
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0000000000017B84:
	spOut = fp
	gpOut = gp
	t1Out = t1
	s0Out = s0
	s1Out = s1
	a1Out = <invalid>
	a2Out = <invalid>
	s6Out = s6
	return ra
// DataOut:
// DataOut (flags):
// SymbolicIn:

fn0000000000017B40_exit:
// DataOut:
// DataOut (flags):
// SymbolicIn:



word64 fn0000000000017D10(word64 ra, word64 gp, word64 t1, word64 s0, word64 s1, word64 a0, word64 a1, word64 a2, word64 a3, word64 a4, word64 s2, word64 s3, word64 s4, word64 s5, word64 s6, word64 s7, word64 fa3, word64 fa4, word64 fa5, ptr64 & spOut, ptr64 & gpOut, ptr64 & t1Out, ptr64 & s0Out, ptr64 & s1Out, ptr64 & a1Out, ptr64 & a2Out, ptr64 & a3Out, ptr64 & s3Out, ptr64 & s6Out)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  a0:[0..63] a1:[0..63] a2:[0..63] a3:[0..63] a4:[0..63] fa3:[0..63] fa4:[0..63] fa5:[0..63] gp:[0..63] ra:[0..63] s0:[0..63] s1:[0..63] s2:[0..63] s3:[0..63] s4:[0..63] s5:[0..63] s6:[0..63] s7:[0..63] t1:[0..63]
// LiveOut: a1 a2 a3 gp ra s0 s1 s3 s6 sp t1
// Trashed: a0 a1 a2 a3 a4 a5 a6 fa3 fa4 fa5 gp ra s0 s1 s2 s3 s4 s5 s6 s7 sp t1
// Preserved:
fn0000000000017D10_entry:
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0000000000017D10:
	word64 a1_34
	word64 a2_35
	word64 a4_37
	word64 a6_39
	word64 a3_126
	word64 a0_33 = fn0000000000017924(gp, out a1_34, out a2_35, out a3_126, out a4_37, out a6_39)
	word64 a0_51 = (word64) a0_33
	word64 a1_53 = (word64) a1_34
	word64 a2_55 = (word64) a2_35
	branch a0_33 == 0x0000000000000000 l0000000000017D80
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0000000000017D80:
	word64 a5_40 = Mem21[gp + -1944:word64]
	word64 sp_41
	word64 s0_42
	word64 s2_43
	word64 s3_44
	word64 s4_45
	word64 s5_46
	word64 ra_47
	word64 s1_48
	word64 s6_49
	word64 s7_50
	word64 a2_56
	word64 a3_57
	word64 a4_58
	word64 gp_60
	word64 a6_61
	word64 fa4_63
	word64 fa5_65
	word64 t1_67
	word64 fa3_69
	call a5_40 (retsize: 0;)
		uses: a0:a0_51,a1:a1_53,a2:a2_55,a3:a3_36,a4:a4_37,a5:a5_40,a6:a6_39,fa3:fa3,fa4:fa4,fa5:fa5,gp:gp,ra:ra,s0:a0,s1:s1,s2:a3,s3:a2,s4:a1,s5:a4,s6:s6,s7:s7,sp:fp + -80,Stack +0008:s7,Stack +0010:s6,Stack +0018:s5,Stack +0020:s4,Stack +0028:s3,Stack +0030:s2,Stack +0038:s1,Stack +0040:s0,Stack +0048:ra,t1:t1
		defs: a2:a2_56,a3:a3_57,a4:a4_58,a6:a6_61,fa3:fa3_69,fa4:fa4_63,fa5:fa5_65,gp:gp_60,ra:ra_47,s0:s0_42,s1:s1_48,s2:s2_43,s3:s3_44,s4:s4_45,s5:s5_46,s6:s6_49,s7:s7_50,sp:sp_41,t1:t1_67
	word64 a5_70 = Mem21[gp_60 + -1952:word64]
	word64 a0_84
	word64 gp_295
	word64 sp_266
	word64 s0_268
	word64 s2_270
	word64 s3_272
	word64 s4_274
	word64 s5_276
	word64 ra_278
	word64 s6_281
	word64 s7_283
	word64 a2_289
	word64 a3_291
	word64 a4_293
	word64 a6_297
	word64 fa4_299
	word64 fa5_301
	word64 t1_303
	word64 fa3_305
	call a5_70 (retsize: 0;)
		uses: a0:0x000000000000000C,a1:0x0000000000000010,a2:a2_56,a3:a3_57,a4:a4_58,a5:a5_70,a6:a6_61,fa3:fa3_69,fa4:fa4_63,fa5:fa5_65,gp:gp_60,ra:ra_47,s0:s0_42,s1:s1_48,s2:s2_43,s3:s3_44,s4:s4_45,s5:s5_46,s6:s6_49,s7:s7_50,sp:sp_41,Stack +FFFFFFB8:s7,Stack +FFFFFFC0:s6,Stack +FFFFFFC8:s5,Stack +FFFFFFD0:s4,Stack +FFFFFFD8:s3,Stack +FFFFFFE0:s2,Stack +FFFFFFE8:s1,Stack +FFFFFFF0:s0,Stack +FFFFFFF8:ra,t1:t1_67
		defs: a0:a0_84,a2:a2_87,a3:a3_88,a4:a4_89,a6:a6_92,fa3:fa3_96,fa4:fa4_93,fa5:fa5_94,gp:gp_91,ra:ra_79,s0:s0_74,s2:s2_75,s3:s3_76,s4:s4_77,s5:s5_78,s6:s6_81,s7:s7_82,sp:sp_73,t1:t1_95
	word64 a0_97 = (word64) a0_84
	word64 a0_120 = (word64) a0_97
	word64 s1_279 = a0_97
	branch a0_97 == 0x0000000000000000 l0000000000017E18
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0000000000017DA0:
	word64 a4_99 = (word64) Mem21[s0_268 + 4:uint32]
	word64 a5_100 = (word64) Mem21[s0_268 + 12:uint32]
	word64 a1_101 = (word64) Mem21[s0_268:uint32]
	word64 a2_102 = (word64) Mem21[s0_268 + 8:uint32]
	word64 a3_103 = Mem21[gp_295 + -2000:word64]
	word64 a6_106 = 1
	Mem107[a0_97 + 76:word32] = a6_106
	word64 sp_110
	word64 s0_111
	word64 s2_112
	word64 s3_113
	word64 s4_114
	word64 s5_115
	word64 ra_116
	word64 s1_117
	word64 s6_118
	word64 a0_121
	word64 a2_125
	word64 a4_127
	word64 a6_130
	word64 fa4_131
	word64 fa5_132
	word64 fa3_134
	call a3_103 (retsize: 0;)
		uses: a0:a0_120,a1:(word64) (a4_99 << 0x00000000 | a1_101),a2:(word64) (a5_100 << 0x00000000 | a2_102),a3:a3_103,a4:a4_99 << 0x00000000,a5:a5_100 << 0x00000000,a6:a6_106,fa3:fa3_96,fa4:fa4_93,fa5:fa5_94,gp:gp_91,ra:ra_79,s0:s0_74,s1:a0_97,s2:s2_75,s3:s3_76,s4:s4_77,s5:s5_78,s6:s6_81,s7:s7_82,sp:sp_73,Stack +FFFFFFB8:s7,Stack +FFFFFFC0:s6,Stack +FFFFFFC8:s5,Stack +FFFFFFD0:s4,Stack +FFFFFFD8:s3,Stack +FFFFFFE0:s2,Stack +FFFFFFE8:s1,Stack +FFFFFFF0:s0,Stack +FFFFFFF8:ra,t1:t1_95
		defs: a0:a0_121,a2:a2_125,a3:a3_126,a4:a4_127,a6:a6_130,fa3:fa3_134,fa4:fa4_131,fa5:fa5_132,gp:gp_129,ra:ra_116,s0:s0_111,s1:s1_117,s2:s2_112,s3:s3_113,s4:s4_114,s5:s5_115,s6:s6_118,sp:sp_110,t1:t1_133
	word64 a0_135 = (word64) a0_121
	branch a0_135 < 0x0000000000000000 l0000000000017D54
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0000000000017DD8:
	word64 a5_137 = Mem107[gp + -1960:word64]
	word64 a0_151
	word64 a5_157
	word64 gp_158
	word64 s7_149
	word64 sp_140
	word64 s0_141
	word64 s2_142
	word64 s3_143
	word64 s4_144
	word64 s5_145
	word64 ra_146
	word64 s1_147
	word64 s6_148
	word64 a1_153
	word64 a2_154
	word64 a3_155
	word64 a4_156
	word64 a6_159
	word64 fa4_160
	word64 fa5_161
	word64 t1_162
	word64 fa3_163
	call a5_137 (retsize: 0;)
		uses: a0:(word64) s1_117,a1:(word64) a0_135,a2:a2_125,a3:a3_126,a4:a4_127,a5:a5_137,a6:a6_130,fa3:fa3_134,fa4:fa4_131,fa5:fa5_132,gp:gp_129,ra:ra_116,s0:s0_111,s1:s1_117,s2:s2_112,s3:s3_113,s4:s4_114,s5:s5_115,s6:s6_118,s7:a0_135,sp:sp_110,Stack +FFFFFFB8:s7,Stack +FFFFFFC0:s6,Stack +FFFFFFC8:s5,Stack +FFFFFFD0:s4,Stack +FFFFFFD8:s3,Stack +FFFFFFE0:s2,Stack +FFFFFFE8:s1,Stack +FFFFFFF0:s0,Stack +FFFFFFF8:ra,t1:t1_133
		defs: a0:a0_151,a1:a1_153,a2:a2_154,a3:a3_155,a4:a4_156,a5:a5_157,a6:a6_159,fa3:fa3_163,fa4:fa4_160,fa5:fa5_161,gp:gp_158,ra:ra_146,s0:s0_141,s1:s1_147,s2:s2_142,s3:s3_143,s4:s4_144,s5:s5_145,s6:s6_148,s7:s7_149,sp:sp_140,t1:t1_162
	branch (word64) a0_151 == 0x0000000000000000 l0000000000017DF4
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0000000000017DEC:
	word64 a0_175
	call __strdup (retsize: 0;)
		uses: a0:a0_151,a1:a1_153,a2:a2_154,a3:a3_155,a4:a4_156,a5:a5_157,a6:a6_159,fa3:fa3_163,fa4:fa4_160,fa5:fa5_161,gp:gp_158,ra:ra_146,s0:s0_141,s1:s1_147,s2:s2_142,s3:s3_143,s4:s4_144,s5:s5_145,s6:s6_148,s7:s7_149,sp:sp_140,Stack +FFFFFFB8:s7,Stack +FFFFFFC0:s6,Stack +FFFFFFC8:s5,Stack +FFFFFFD0:s4,Stack +FFFFFFD8:s3,Stack +FFFFFFE0:s2,Stack +FFFFFFE8:s1,Stack +FFFFFFF0:s0,Stack +FFFFFFF8:ra,t1:t1_162
		defs: a0:a0_175,a1:a1_176,a2:a2_177,a3:a3_178,a4:a4_179,a6:a6_182,fa3:fa3_186,fa4:fa4_183,fa5:fa5_184,gp:gp_181,ra:ra_171,s0:s0_166,s1:s1_172,s2:s2_167,s3:s3_168,s4:s4_169,s5:s5_170,s6:s6_173,s7:s7_174,sp:sp_165,t1:t1_185
	Mem188[s4_144:word64] = (word64) a0_175
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0000000000017DF4:
	word64 a5_191 = Mem190[gp_158 + -1968:word64]
	word64 a0_214
	word64 a5_223
	word64 gp_224
	word64 s1_209
	word64 sp_195
	word64 s0_197
	word64 s2_199
	word64 s3_201
	word64 s4_203
	word64 s5_205
	word64 ra_207
	word64 s6_211
	word64 s7_212
	word64 a1_216
	word64 a2_218
	word64 a3_220
	word64 a4_222
	word64 a6_226
	word64 fa4_228
	word64 fa5_230
	word64 t1_232
	word64 fa3_234
	call a5_191 (retsize: 0;)
		uses: a0:(word64) s7_192,a1:a1_215,a2:a2_217,a3:a3_219,a4:a4_221,a5:a5_191,a6:a6_225,fa3:fa3_233,fa4:fa4_227,fa5:fa5_229,gp:gp_189,ra:ra_206,s0:s0_196,s1:s1_208,s2:s2_198,s3:s3_200,s4:s4_202,s5:s5_204,s6:s6_210,s7:s7_192,sp:sp_194,Stack +FFFFFFB8:s7,Stack +FFFFFFC0:s6,Stack +FFFFFFC8:s5,Stack +FFFFFFD0:s4,Stack +FFFFFFD8:s3,Stack +FFFFFFE0:s2,Stack +FFFFFFE8:s1,Stack +FFFFFFF0:s0,Stack +FFFFFFF8:ra,t1:t1_231
		defs: a0:a0_214,a1:a1_216,a2:a2_218,a3:a3_220,a4:a4_222,a5:a5_223,a6:a6_226,fa3:fa3_234,fa4:fa4_228,fa5:fa5_230,gp:gp_224,ra:ra_207,s0:s0_197,s1:s1_209,s2:s2_199,s3:s3_201,s4:s4_203,s5:s5_205,s6:s6_211,s7:s7_212,sp:sp_195,t1:t1_232
	branch (word64) a0_214 == 0x0000000000000000 l0000000000017E0C
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0000000000017E04:
	word64 a0_246
	call __strdup (retsize: 0;)
		uses: a0:a0_214,a1:a1_216,a2:a2_218,a3:a3_220,a4:a4_222,a5:a5_223,a6:a6_226,fa3:fa3_234,fa4:fa4_228,fa5:fa5_230,gp:gp_224,ra:ra_207,s0:s0_197,s1:s1_209,s2:s2_199,s3:s3_201,s4:s4_203,s5:s5_205,s6:s6_211,s7:s7_212,sp:sp_195,Stack +FFFFFFB8:s7,Stack +FFFFFFC0:s6,Stack +FFFFFFC8:s5,Stack +FFFFFFD0:s4,Stack +FFFFFFD8:s3,Stack +FFFFFFE0:s2,Stack +FFFFFFE8:s1,Stack +FFFFFFF0:s0,Stack +FFFFFFF8:ra,t1:t1_232
		defs: a0:a0_246,a1:a1_247,a2:a2_248,a3:a3_249,a4:a4_250,a6:a6_253,fa3:fa3_257,fa4:fa4_254,fa5:fa5_255,gp:gp_252,ra:ra_242,s0:s0_237,s1:s1_243,s2:s2_238,s3:s3_239,s4:s4_240,s5:s5_241,s6:s6_244,s7:s7_245,sp:sp_236,t1:t1_256
	Mem259[s3_201:word64] = (word64) a0_246
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0000000000017E0C:
	word64 a5_262 = Mem261[gp_224 + -1976:word64]
	call a5_262 (retsize: 0;)
		uses: a0:(word64) s1_263,a1:a1_286,a2:a2_288,a3:a3_290,a4:a4_292,a5:a5_262,a6:a6_296,fa3:fa3_304,fa4:fa4_298,fa5:fa5_300,gp:gp_260,ra:ra_277,s0:s0_267,s1:s1_263,s2:s2_269,s3:s3_271,s4:s4_273,s5:s5_275,s6:s6_280,s7:s7_282,sp:sp_265,Stack +FFFFFFB8:s7,Stack +FFFFFFC0:s6,Stack +FFFFFFC8:s5,Stack +FFFFFFD0:s4,Stack +FFFFFFD8:s3,Stack +FFFFFFE0:s2,Stack +FFFFFFE8:s1,Stack +FFFFFFF0:s0,Stack +FFFFFFF8:ra,t1:t1_302
		defs: a2:a2_289,a3:a3_291,a4:a4_293,a6:a6_297,fa3:fa3_305,fa4:fa4_299,fa5:fa5_301,gp:gp_295,ra:ra_278,s0:s0_268,s1:s1_279,s2:s2_270,s3:s3_272,s4:s4_274,s5:s5_276,s6:s6_281,s7:s7_283,sp:sp_266,t1:t1_303
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0000000000017E18:
	word64 a5_308 = Mem307[gp_295 + -1952:word64]
	word64 a2_336
	word64 a3_338
	word64 a4_340
	word64 a6_344
	word64 s0_314
	word64 sp_312
	word64 s2_316
	word64 s3_318
	word64 s4_320
	word64 s5_322
	word64 ra_324
	word64 s6_328
	word64 s7_330
	word64 a0_332
	word64 fa4_346
	word64 fa5_348
	word64 fa3_352
	call a5_308 (retsize: 0;)
		uses: a0:0x000000000000001E,a1:0x0000000000000010,a2:a2_335,a3:a3_337,a4:a4_339,a5:a5_308,a6:a6_343,fa3:fa3_351,fa4:fa4_345,fa5:fa5_347,gp:gp_306,ra:ra_323,s0:s0_313,s1:s1_325,s2:s2_315,s3:s3_317,s4:s4_319,s5:s5_321,s6:s6_327,s7:s7_329,sp:sp_311,Stack +FFFFFFB8:s7,Stack +FFFFFFC0:s6,Stack +FFFFFFC8:s5,Stack +FFFFFFD0:s4,Stack +FFFFFFD8:s3,Stack +FFFFFFE0:s2,Stack +FFFFFFE8:s1,Stack +FFFFFFF0:s0,Stack +FFFFFFF8:ra,t1:t1_349
		defs: a0:a0_332,a2:a2_336,a3:a3_338,a4:a4_340,a6:a6_344,fa3:fa3_352,fa4:fa4_346,fa5:fa5_348,gp:gp_342,ra:ra_324,s0:s0_314,s2:s2_316,s3:s3_318,s4:s4_320,s5:s5_322,s6:s6_328,s7:s7_330,sp:sp_312,t1:t1_350
	word64 a0_353 = (word64) a0_332
	word64 s1_354 = a0_353
	branch a0_353 == 0x0000000000000000 l0000000000017EE8
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0000000000017EE8:
	word64 a5_355 = Mem307[gp + -1952:word64]
	call a5_355 (retsize: 0;)
		uses: a0:0x000000000000001F,a1:0x0000000000000010,a2:a2_336,a3:a3_338,a4:a4_340,a5:a5_355,a6:a6_344,fa3:fa3_352,fa4:fa4_346,fa5:fa5_348,gp:gp_342,ra:ra_324,s0:s0_314,s1:a0_353,s2:s2_316,s3:s3_318,s4:s4_320,s5:s5_322,s6:s6_328,s7:s7_330,sp:sp_312,Stack +FFFFFFB8:s7,Stack +FFFFFFC0:s6,Stack +FFFFFFC8:s5,Stack +FFFFFFD0:s4,Stack +FFFFFFD8:s3,Stack +FFFFFFE0:s2,Stack +FFFFFFE8:s1,Stack +FFFFFFF0:s0,Stack +FFFFFFF8:ra,t1:t1_350
		defs: a0:a0_369,a3:a3_373,fa3:fa3_381,fa4:fa4_378,fa5:fa5_379,gp:gp_376,ra:ra_364,s0:s0_359,s2:s2_360,s3:s3_361,s4:s4_362,s5:s5_363,s6:s6_366,s7:s7_367,sp:sp_358,t1:t1_380
	word64 a0_382 = (word64) a0_332
	s1_354 = a0_382
	branch a0_382 != 0x0000000000000000 l0000000000017E30
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0000000000017F00:
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0000000000017E30:
	word64 a4_386 = (word64) Mem307[s0_314 + 4:uint32]
	word64 a5_387 = (word64) Mem307[s0_314 + 12:uint32]
	word64 a1_388 = (word64) Mem307[s0_314:uint32]
	word64 a2_389 = (word64) Mem307[s0_314 + 8:uint32]
	word64 a3_391 = Mem307[gp + -2008:word64]
	word64 a6_394 = 1
	Mem396[s1_354 + 76:word32] = a6_394
	word64 s2_403
	word64 s3_405
	word64 s4_407
	word64 ra_411
	word64 s6_414
	word64 s7_416
	word64 a0_418
	word64 t1_433
	word64 s5_409
	word64 s1_412
	word64 sp_400
	word64 gp_426
	word64 a1_420
	word64 a2_422
	word64 a3_423
	word64 a4_424
	word64 a5_425
	word64 a6_427
	word64 fa4_429
	word64 fa5_431
	word64 fa3_435
	call a3_391 (retsize: 0;)
		uses: a0:a0_417,a1:(word64) (a4_386 << 0x00000000 | a1_388),a2:(word64) (a5_387 << 0x00000000 | a2_389),a3:a3_391,a4:a4_386 << 0x00000000,a5:a5_387 << 0x00000000,a6:a6_394,fa3:fa3_434,fa4:fa4_428,fa5:fa5_430,gp:gp_390,ra:ra_410,s0:s0_384,s1:s1_395,s2:s2_402,s3:s3_404,s4:s4_406,s5:s5_408,s6:s6_413,s7:s7_415,sp:sp_399,Stack +FFFFFFB8:s7,Stack +FFFFFFC0:s6,Stack +FFFFFFC8:s5,Stack +FFFFFFD0:s4,Stack +FFFFFFD8:s3,Stack +FFFFFFE0:s2,Stack +FFFFFFE8:s1,Stack +FFFFFFF0:s0,Stack +FFFFFFF8:ra,t1:t1_432
		defs: a0:a0_418,a1:a1_420,a2:a2_422,a3:a3_423,a4:a4_424,a5:a5_425,a6:a6_427,fa3:fa3_435,fa4:fa4_429,fa5:fa5_431,gp:gp_426,ra:ra_411,s1:s1_412,s2:s2_403,s3:s3_405,s4:s4_407,s5:s5_409,s6:s6_414,s7:s7_416,sp:sp_400,t1:t1_433
	word64 a0_436 = (word64) a0_418
	word64 s0_437 = a0_436
	branch a0_436 == 0x0000000000000000 l0000000000017E88
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0000000000017E68:
	word64 a0_438 = Mem396[a0_436 + 32:word64]
	word64 a0_449 = (word64) a0_438
	branch a0_438 == 0x0000000000000000 l0000000000017E78
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0000000000017E70:
	word64 s2_441
	word64 a0_450
	call __strdup (retsize: 0;)
		uses: a0:a0_449,a1:a1_420,a2:a2_422,a3:a3_423,a4:a4_424,a5:a5_425,a6:a6_427,fa3:fa3_435,fa4:fa4_429,fa5:fa5_431,gp:gp_426,ra:ra_411,s0:a0_436,s1:s1_412,s2:s2_403,s3:s3_405,s4:s4_407,s5:s5_409,s6:s6_414,s7:s7_416,sp:sp_400,Stack +FFFFFFB8:s7,Stack +FFFFFFC0:s6,Stack +FFFFFFC8:s5,Stack +FFFFFFD0:s4,Stack +FFFFFFD8:s3,Stack +FFFFFFE0:s2,Stack +FFFFFFE8:s1,Stack +FFFFFFF0:s0,Stack +FFFFFFF8:ra,t1:t1_433
		defs: a0:a0_450,a1:a1_451,a2:a2_452,a3:a3_453,a4:a4_454,a6:a6_457,fa3:fa3_461,gp:gp_456,s0:s0_440,s1:s1_446,s2:s2_441,s5:s5_444,sp:sp_439
	Mem463[s2_441:word64] = (word64) a0_450
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0000000000017E78:
	fa4_429 = Mem465[s0_437 + 52:real32]
	fa5_431 = (real32) 0x0000000000000000
	a5_425 = (word64) ((real32) fa4_429 == (real32) fa5_431)
	branch a5_425 == 0x0000000000000000 l0000000000017EBC
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0000000000017EBC:
	fa5_431 = (real64) Mem465[s0_437 + 48:real32]
	a1_420 = 0x0000000000000001 (alias)
	word64 a0_479 = (word64) s5_409
	fa4_429 = (real64) a4_424
	a2_422 = 0x0000000000012B80 (alias)
	fa3_435 = (real64) a5_425
	a0_482 = DPB(a0_479, __asprintf_chk(a0_479, 0x0000000000000001, 0x0000000000012B80, 0x00000000), 0)
	sp_400 = sp_400 + 0xFFFFFFFFFFFFFFF8
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0000000000017E88:
	word64 t1_501 = Mem489[gp_426 + -1976:word64]
	word64 sp_503
	word64 s0_504
	word64 s3_506
	word64 ra_509
	word64 s1_510
	word64 s6_511
	word64 a3_523
	word64 gp_528
	word64 t1_536
	call t1_501 (retsize: 0;)
		uses: a0:(word64) s1_485,a1:a1_515,a2:a2_518,a3:a3_521,a4:a4_524,a5:a5_526,a6:a6_529,fa3:fa3_537,fa4:fa4_532,fa5:fa5_534,gp:gp_499,ra:Mem489[sp_488 + 72:word64],s0:Mem489[sp_488 + 64:word64],s1:Mem489[sp_488 + 56:word64],s2:Mem489[sp_488 + 48:word64],s3:Mem489[sp_488 + 40:word64],s4:Mem489[sp_488 + 32:word64],s5:Mem489[sp_488 + 24:word64],s6:Mem489[sp_488 + 16:word64],s7:Mem489[sp_488 + 8:word64],sp:sp_488 + 80,Stack +FFFFFFB8:s7,Stack +FFFFFFC0:s6,Stack +FFFFFFC8:s5,Stack +FFFFFFD0:s4,Stack +FFFFFFD8:s3,Stack +FFFFFFE0:s2,Stack +FFFFFFE8:s1,Stack +FFFFFFF0:s0,Stack +FFFFFFF8:ra,t1:t1_501
		defs: a3:a3_523,gp:gp_528,ra:ra_509,s0:s0_504,s1:s1_510,s3:s3_506,s6:s6_511,sp:sp_503,t1:t1_536
	spOut = sp_503
	gpOut = gp_528
	t1Out = t1_536
	s0Out = s0_504
	s1Out = s1_510
	a1Out = <invalid>
	a2Out = <invalid>
	a3Out = a3_523
	s3Out = s3_506
	s6Out = s6_511
	return ra_509
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0000000000017D54:
	spOut = fp
	gpOut = gp
	t1Out = t1
	s0Out = s0
	s1Out = s1
	a1Out = <invalid>
	a2Out = <invalid>
	a3Out = a3_126
	s3Out = s3
	s6Out = s6
	return ra
// DataOut:
// DataOut (flags):
// SymbolicIn:

fn0000000000017D10_exit:
// DataOut:
// DataOut (flags):
// SymbolicIn:



word64 fn0000000000017F04(word64 gp, word64 a0, word64 a1, word64 a2, word64 a3, ptr64 & a0Out, ptr64 & a4Out, ptr64 & a5Out, ptr64 & a6Out, ptr64 & t3Out)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  a0:[0..63] a1:[0..63] a2:[0..63] a3:[0..63] gp:[0..63]
// LiveOut: a0 a4 a5 a6 t1 t3
// Trashed: a0 a1 a2 a3 a4 a5 a6 t1 t3
// Preserved: a7 ra s0 s1 s2 s3 s4 s5 s6 sp
fn0000000000017F04_entry:
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0000000000017F04:
	word64 a0_177
	word64 a0_167
	word64 a5_7 = Mem5[gp + -1936:word64]
	word64 a0_31 = fn00000000000182B4(a0, out a3_32, out a4_267, out a5_268)
	word64 a1_35 = (int64) (int32) (a0_31 >>u 0x00000010)
	word64 t1_36 = (int64) (int32) (a0_31 >>u 0x00000008)
	word64 t3_37 = 32
	word64 s6_38 = (int64) (int32) (a0_31 >>u 0x00000018)
	branch a1 == t3_37 l0000000000018048
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0000000000018048:
	word64 a0_49 = (word64) (fp + -80)
	a6 = s6_38
	a0_167 = (word64) DPB(a0_49, __asprintf_chk(a0_49, 0x0000000000000001, 0x0000000000012B88, 0x00000000), 0) (alias)
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0000000000017F60:
	word64 a1_54 = 24
	branch a1 == a1_54 l0000000000018070
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0000000000018070:
	word64 a0_62 = (word64) (fp + -80)
	a0_167 = (word64) DPB(a0_62, __asprintf_chk(a0_62, 0x0000000000000001, 0x0000000000012BA8, 0x00000000), 0) (alias)
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0000000000017F68:
	word64 a0_67 = 16
	branch a1 == a0_67 l00000000000180D8
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00000000000180D8:
	word64 a0_74 = (word64) (fp + -80)
	a0_167 = (word64) DPB(a0_74, __asprintf_chk(a0_74, 0x0000000000000001, 0x0000000000012BC0, 0x00000000), 0) (alias)
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0000000000017F70:
	word64 a5_79 = 8
	branch a1 == a5_79 l00000000000180F8
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00000000000180F8:
	word64 a0_85 = (word64) (fp + -80)
	a0_167 = (word64) DPB(a0_85, __asprintf_chk(a0_85, 0x0000000000000001, 0x0000000000012BD8, 0x00000000), 0) (alias)
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0000000000017F78:
	branch a1_54 <u a1 l0000000000017FBC
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0000000000017FBC:
	fn00000000000182B4(a2, out a3_269, out a4_270, out a5_271)
	fn00000000000182B4(a3, out a3_272, out a4_273, out a5_274)
	word64 a0_110 = (word64) (fp + -80)
	a6 = a1_35 & 255
	a0_167 = (word64) DPB(a0_110, __asprintf_chk(a0_110, 0x0000000000000001, 0x0000000000012BF0, 0x00000000), 0) (alias)
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0000000000017F7C:
	branch a0_67 <u a1 l0000000000018094
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0000000000018094:
	fn00000000000182B4(a2, out a3_275, out a4_276, out a5_277)
	fn00000000000182B4(a3, out a3_278, out a4_279, out a5_280)
	word64 a0_136 = (word64) (fp + -80)
	a6 = s6_38
	a0_167 = (word64) DPB(a0_136, __asprintf_chk(a0_136, 0x0000000000000001, 0x0000000000012C10, 0x00000000), 0) (alias)
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0000000000017F80:
	branch a5_79 <u a1 l0000000000018008
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0000000000018008:
	fn00000000000182B4(a2, out a3_281, out a4_282, out a5_283)
	fn00000000000182B4(a3, out a3_284, out a4_285, out a5_286)
	word64 a0_161 = (word64) (fp + -80)
	a0_167 = (word64) DPB(a0_161, __asprintf_chk(a0_161, 0x0000000000000001, 0x0000000000012C30, 0x00000000), 0) (alias)
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0000000000017FF8:
	branch a0_167 == -1 l0000000000017F84
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0000000000018000:
	a0_177 = qwLoc58
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0000000000017F84:
	a0_177 = 0
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0000000000017F88:
	word64 a5_187 = Mem29[gp + -1936:word64]
	branch a5_7 != a5_187 l0000000000018114
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0000000000018114:
	__stack_chk_fail()
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0000000000017F94:
	a0Out = a0_177
	a4Out = a5_7
	a5Out = a5_187
	a6Out = a6
	t3Out = t3_37
	return t1_36
// DataOut:
// DataOut (flags):
// SymbolicIn:

fn0000000000017F04_exit:
// DataOut:
// DataOut (flags):
// SymbolicIn:



word64 fn0000000000018118(word64 ra, word64 gp, word64 t1, word64 s0, word64 a0, word64 a1, word64 a2, word64 a3, word64 a6, word64 a7, word64 t3, word64 t6, ptr64 & a4Out, ptr64 & t4Out)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  a0:[0..63] a1:[0..63] a2:[0..63] a3:[0..63] a6:[0..63] a7:[0..63] gp:[0..63] ra:[0..63] s0:[0..63] t1:[0..63] t3:[0..63] t6:[0..63]
// LiveOut: a0 a4 t4
// Trashed: a0 a4 a5 t4
// Preserved: a1 a2 a3 a6 a7 gp ra s0 sp t1 t3 t5 t6
fn0000000000018118_entry:
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0000000000018118:
	word64 a0_13
	word64 a5_7 = Mem5[gp + -1936:word64]
	word64 t4_108 = a1 & 3
	branch (a1 & 3) != 0x0000000000000000 l00000000000182A8
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00000000000182A8:
	a0_13 = 0
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0000000000018134:
	word64 a4_15 = 4
	word64 t5_104 = (int64) (int32) (a1 >>u 0x00000003)
	branch (a1 & 7) == a4_15 l0000000000018264
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0000000000018264:
	word64 a5_24 = (word64) Mem12[a0 + (((int64) ((word32) ((int64) ((int32) ((int64) ((word32) a1 + a4_15) >>u 0x00000003))) + -1) << 0x00000000) >>u 0x00000000):byte]
	a3 = 9
	word64 a4_27 = (a5_24 >>u 0x00000004) + 87
	branch a3 <u a5_24 >>u 0x00000004 l0000000000018294
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0000000000018290:
	a4_27 = (a5_24 >>u 0x00000004) + 48
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0000000000018294:
	bLoc0118 = a4_27
	bLoc0117 = 46
	t4_108 = 2
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0000000000018144:
	branch t5_104 == 0x0000000000000000 l00000000000181FC
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0000000000018148:
	a1 = (int64) ((word32) t5_104 + -1)
	word64 a4_39 = t4_108
	t1 = 9
	a7 = 46
	t3 = -1
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0000000000018190:
	word64 a5_49 = (word64) Mem48[a0 + ((a1 << 0x00000000) >>u 0x00000000):byte]
	word64 a3_51 = (int64) ((word32) a4_39 + 1)
	word64 a6_53 = (a5_49 & 15) + 87
	branch t1 <u (a5_49 & 15) l00000000000181B4
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00000000000181B0:
	a6_53 = (a5_49 & 15) + 48
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00000000000181B4:
	Mem67[fp + -16 + ((a4_39 << 0x00000000) >>u 0x00000000) + 3832:byte] = a6_53
	Mem73[fp + -16 + ((a3_51 << 0x00000000) >>u 0x00000000) + 3832:byte] = a7
	t6 = fp + -16
	word64 a2_74 = (int64) ((word32) a4_39 + 2)
	word64 a3_75 = (int64) ((word32) a4_39 + 3)
	a6 = (a5_49 >>u 0x00000004) + 48
	branch t1 >=u a5_49 >>u 0x00000004 l0000000000018160
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00000000000181EC:
	a6 = (a5_49 >>u 0x00000004) + 87
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0000000000018160:
	a2 = fp + -16 + ((a2_74 << 0x00000000) >>u 0x00000000)
	Mem89[a2 + 3832:byte] = a6
	a3 = fp + -16 + ((a3_75 << 0x00000000) >>u 0x00000000)
	Mem92[a3 + 3832:byte] = a7
	a1 = (int64) ((word32) a1 + -1)
	a4_39 = (int64) ((word32) a4_39 + 4)
	branch a1 == t3 l00000000000181F4
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00000000000181F4:
	t5_104 = (int64) (int32) (t5_104 << 0x00000002)
	t4_108 = (int64) ((word32) t4_108 + t5_104)
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00000000000181FC:
	word64 t4_116 = fp + -280 + ((t4_108 << 0x00000000) >>u 0x00000000)
	Mem119[t4_116 + 4:word16] = 29281
	Mem122[t4_116:word16] = 28777
	Mem125[t4_116 + 6:word16] = 24944
	Mem128[t4_116 + 2:word16] = 11830
	word64 a5_126 = 46
	Mem129[t4_116 + 8:word16] = a5_126
	call __strdup (retsize: 0;)
		uses: a0:fp + -280,a1:a1_154,a2:a2_183,a3:a3_178,a4:11830,a5:a5_126,a6:a6_188,a7:a7_167,gp:gp,ra:ra,s0:s0,sp:fp + -288,Stack +0008:bLoc0118_236,Stack +0009:bLoc0117_242,Stack +0108:a5_7,Stack +0110:s0,Stack +0118:ra,t1:t1_161,t3:t3_172,t4:t4_116,t5:t5_159,t6:t6_193
		defs: a0:a0_177,gp:gp_145,t4:t4_153
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0000000000018248:
	branch a5_7 != Mem200[gp + -1936:word64] l00000000000182B0
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00000000000182B0:
	__stack_chk_fail()
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0000000000018254:
	a4Out = a5_7
	t4Out = t4_108
	return a0_13
// DataOut:
// DataOut (flags):
// SymbolicIn:

fn0000000000018118_exit:
// DataOut:
// DataOut (flags):
// SymbolicIn:



word64 fn00000000000182B4(word64 a0, ptr64 & a3Out, ptr64 & a4Out, ptr64 & a5Out)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  a0:[0..31]
// LiveOut: a0 a3 a4 a5
// Trashed: a0 a3 a4 a5
// Preserved: sp
fn00000000000182B4_entry:
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00000000000182B4:
	word64 a3_6 = (int64) (int32) (a0 >>u 0x00000018) | (int64) ((int32) (a0 << 0x00000018))
	word64 a4_11 = (int64) (int32) ((a0 & 0x0000000000FF0000) >> 0x00000008)
	a3Out = a3_6
	a4Out = a4_11
	word64 a5_14 = a3_6 | a4_11
	a5Out = a5_14
	return a5_14 | (int64) ((int32) ((a0 & 65280) << 0x00000008))
// DataOut:
// DataOut (flags):
// SymbolicIn:

fn00000000000182B4_exit:
// DataOut:
// DataOut (flags):
// SymbolicIn:



void fn00000000000182E8(word64 ra, word64 s0, word64 s1, word64 a0, word64 a1, word64 a2, word64 s2, word64 s3, word64 s4, word64 s5)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  a0:[0..63] a1:[0..63] a2:[0..63] ra:[0..63] s0:[0..63] s1:[0..63] s2:[0..63] s3:[0..63] s4:[0..63] s5:[0..63]
// LiveOut:
// Trashed: a0 a1 a2 a5
// Preserved: ra s0 s1 s2 s3 s4 s5 sp
fn00000000000182E8_entry:
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00000000000182E8:
	word64 s2_12 = 0x0000000000019E20 - 0x0000000000019E18
	word64 sp_3 = fp + -64
	word64 s0_31 = 0x0000000000019E18
	word64 s2_23 = s2_12 >> 0x00000003
	branch s2_12 >> 0x00000003 == 0x0000000000000000 l0000000000018354
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0000000000018324:
	word64 s5_25 = a0
	word64 s4_27 = a1
	word64 s3_29 = a2
	word64 s1_30 = 0
	ra_47 = ra
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0000000000018334:
	word64 ra_47
	word64 a5_33 = Mem22[s0_31:word64]
	word64 s0_44
	call a5_33 (retsize: 0;)
		uses: a0:s5_38,a1:s4_36,a2:s3_34,a5:a5_33,ra:ra_47,s0:s0_31,s1:s1_40 + 1,s2:s2_45,s3:s3_34,s4:s4_36,s5:s5_38,sp:sp_42,Stack +FFFFFFC8:s5,Stack +FFFFFFD0:s4,Stack +FFFFFFD8:s3,Stack +FFFFFFE0:s2,Stack +FFFFFFE8:s1,Stack +FFFFFFF0:s0,Stack +FFFFFFF8:ra
		defs: ra:ra_48,s0:s0_44,s1:s1_49,s2:s2_46,s3:s3_50,s4:s4_51,s5:s5_52,sp:sp_43
	s0_31 = s0_44 + 8
	branch s2_23 != s1_30 l0000000000018334
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0000000000018354:
	return
// DataOut:
// DataOut (flags):
// SymbolicIn:

fn00000000000182E8_exit:
// DataOut:
// DataOut (flags):
// SymbolicIn:



void fn0000000000018378()
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse: 
// LiveOut:
// Trashed:
// Preserved: sp
fn0000000000018378_entry:
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0000000000018378:
	return
// DataOut:
// DataOut (flags):
// SymbolicIn:

fn0000000000018378_exit:
// DataOut:
// DataOut (flags):
// SymbolicIn:



