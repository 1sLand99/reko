// fn0000000000015180
// Return size: 0
define fn0000000000015180
fn0000000000015180_entry:
	sp = fp
	// succ:  l0000000000015180
l0000000000015180:
	sp = sp + -448<i64>
	Mem0[sp + 392<i64>:word64] = s5
	a5 = Mem0[gp + -1936<i64>:word64]
	Mem0[sp + 424<i64>:word64] = s1
	s1 = 0x11000<64>
	Mem0[sp + 328<i64>:word64] = a5
	a5 = 0x10000<64>
	v8 = SLICE(a5, word32, 0)
	a5 = CONVERT(v8 + 8<i32>, word32, int64)
	Mem0[sp + 432<i64>:word64] = s0
	Mem0[sp + 416<i64>:word64] = s2
	Mem0[sp + 408<i64>:word64] = s3
	Mem0[sp + 400<i64>:word64] = s4
	Mem0[sp + 384<i64>:word64] = s6
	Mem0[sp + 376<i64>:word64] = s7
	Mem0[sp + 368<i64>:word64] = s8
	Mem0[sp + 360<i64>:word64] = s9
	Mem0[sp + 352<i64>:word64] = s10
	Mem0[sp + 344<i64>:word64] = s11
	Mem0[sp + 440<i64>:word64] = ra
	s8 = 0x1000<64>
	s3 = a0
	s2 = a1
	Mem0[sp + 28<i64>:word32] = SLICE(0<64>, word32, 0)
	s0 = 0<i64>
	s6 = 0<i64>
	s9 = 0<i64>
	s10 = 0<i64>
	Mem0[sp:word32] = SLICE(0<64>, word32, 0)
	s1 = s1 + -1824<i64>
	s4 = 0x12000<64>
	s7 = 1<i64>
	Mem0[sp + 8<i64>:word32] = SLICE(a5, word32, 0)
	// succ:  l0000000000015200
l0000000000015200:
	a4 = 0<i64>
	a3 = s1
	a2 = s4 + -1624<i64>
	a1 = s2
	a0 = s3
	a0 = SEQ(0<32>, getopt_long(SLICE(a0, int32, 0), a1, a2, a3, a4))
	a4 = -1<i64>
	a5 = a0
	branch a0 == a4 l0000000000015348
	// succ:  l0000000000015224 l0000000000015348
l0000000000015224:
	a4 = 118<i64>
	branch a4 <u a0 l0000000000015200
	// succ:  l000000000001522C l0000000000015200
l000000000001522C:
	a5 = a5 << 0x20<u32>
	a4 = 0x10000<64>
	a5 = a5 >>u 0x1E<u32>
	a4 = a4 + 672<i64>
	a5 = a5 + a4
	a5 = CONVERT(Mem0[a5:int32], int32, int64)
	call a5 (retsize: 0;)
	return
	// succ:  fn0000000000015180_exit
l0000000000015348:
	a4 = CONVERT(Mem0[gp + -1904<i64>:int32], int32, int64)
	branch a4 >= s3 l0000000000015428
	// succ:  l0000000000015350 l0000000000015428
l0000000000015350:
	v30 = SLICE(a4, word32, 0)
	a1 = CONVERT(v30 + 1<i32>, word32, int64)
	a3 = a4 << 3<u32>
	s2 = s2 + a3
	Mem0[gp + -1904<i64>:word32] = SLICE(a1, word32, 0)
	s1 = Mem0[s2:word64]
	s4 = 0<i64>
	branch a1 >= s3 l0000000000015378
	// succ:  l000000000001536C l0000000000015378
l000000000001536C:
	s4 = Mem0[s2 + 8<i64>:word64]
	v31 = SLICE(a4, word32, 0)
	a4 = CONVERT(v31 + 2<i32>, word32, int64)
	Mem0[gp + -1904<i64>:word32] = SLICE(a4, word32, 0)
	// succ:  l0000000000015378
l0000000000015378:
	branch s6 != 0<64> l0000000000015588
	// succ:  l000000000001537C l0000000000015588
l000000000001537C:
	a4 = CONVERT(Mem0[sp + 28<i64>:int32], int32, int64)
	branch a4 == 0<64> l00000000000153B4
	// succ:  l0000000000015384 l00000000000153B4
l0000000000015384:
	a4 = CONVERT(Mem0[sp:int32], int32, int64)
	branch a4 == 0<64> l00000000000153B4
	// succ:  l000000000001538C l00000000000153B4
l000000000001538C:
	a5 = CONVERT(Mem0[gp + -2028<i64>:int32], int32, int64)
	branch a5 != 0<64> l00000000000153D8
	// succ:  l0000000000015394 l00000000000153D8
l0000000000015394:
	a3 = Mem0[gp + -1920<i64>:word64]
	a0 = 0x12000<64>
	a2 = 46<i64>
	a1 = 1<i64>
	a0 = a0 + -1576<i64>
	a0 = SEQ(0<64>, fwrite(a0, SLICE(a1, size_t, 0), SLICE(a2, size_t, 0), a3))
	s6 = CONVERT(Mem0[sp:int32], int32, int64)
	goto l00000000000153DC
	// succ:  l00000000000153DC
l00000000000153B4:
	Mem0[sp + 8<i64>:word64] = a5
	branch s9 == 0<64> l0000000000015924
	// succ:  l00000000000153BC l0000000000015924
l00000000000153BC:
	call fn0000000000017924 (retsize: 0;)
	s2 = s0 | 2<i64>
	a5 = Mem0[sp + 8<i64>:word64]
	branch a0 == 0<64> l0000000000015434
	// succ:  l00000000000153CC l0000000000015434
l00000000000153CC:
	branch s10 == 0<64> l00000000000155A8
	// succ:  l00000000000153D0 l00000000000155A8
l00000000000153D0:
	a5 = CONVERT(Mem0[gp + -2028<i64>:int32], int32, int64)
	branch a5 == 0<64> l000000000001556C
	// succ:  l00000000000153D8 l000000000001556C
l00000000000153D8:
	s6 = 1<i64>
	// succ:  l00000000000153DC
l00000000000153DC:
	a4 = Mem0[sp + 328<i64>:word64]
	a5 = Mem0[gp + -1936<i64>:word64]
	a0 = s6
	branch a4 != a5 l0000000000015E8C
	// succ:  l00000000000153EC l0000000000015E8C
l00000000000153EC:
	ra = Mem0[sp + 440<i64>:word64]
	s0 = Mem0[sp + 432<i64>:word64]
	s1 = Mem0[sp + 424<i64>:word64]
	s2 = Mem0[sp + 416<i64>:word64]
	s3 = Mem0[sp + 408<i64>:word64]
	s4 = Mem0[sp + 400<i64>:word64]
	s5 = Mem0[sp + 392<i64>:word64]
	s6 = Mem0[sp + 384<i64>:word64]
	s7 = Mem0[sp + 376<i64>:word64]
	s8 = Mem0[sp + 368<i64>:word64]
	s9 = Mem0[sp + 360<i64>:word64]
	s10 = Mem0[sp + 352<i64>:word64]
	s11 = Mem0[sp + 344<i64>:word64]
	sp = sp + 448<i64>
	return
	// succ:  fn0000000000015180_exit
l0000000000015428:
	s4 = 0<i64>
	s1 = 0<i64>
	goto l0000000000015378
	// succ:  l0000000000015378
l0000000000015434:
	a4 = 0x10000<64>
	v33 = SLICE(a4, word32, 0)
	a4 = CONVERT(v33 + 8<i32>, word32, int64)
	s0 = s0 & a4
	branch s0 != a4 l00000000000153CC
	// succ:  l0000000000015444 l00000000000153CC
l0000000000015444:
	s0 = s2
	// succ:  l0000000000015448
l0000000000015448:
	s2 = 0x4000<64>
	s2 = s0 | s2
	branch s9 != 0<64> l00000000000153CC
	// succ:  l0000000000015454 l00000000000153CC
l0000000000015454:
	s0 = s2
	// succ:  l0000000000015458
l0000000000015458:
	branch s10 == 0<64> l0000000000015CE4
	// succ:  l000000000001545C l0000000000015CE4
l000000000001545C:
	a2 = 1<i64>
	a1 = s10
	a0 = sp + 28<i64>
	call fn00000000000166F4 (retsize: 0;)
	a5 = a0
	branch a0 < 0<64> l0000000000015BC8
	// succ:  l0000000000015474 l0000000000015BC8
l0000000000015474:
	a1 = sp + 40<i64>
	a0 = 2<i64>
	Mem0[sp + 8<i64>:word64] = a5
	s1 = CONVERT(Mem0[sp + 28<i64>:int32], int32, int64)
	Mem0[sp + 32<i64>:word64] = 0<64>
	a0 = SEQ(0<32>, clock_gettime(SLICE(a0, clockid_t, 0), a1))
	a5 = Mem0[sp + 8<i64>:word64]
	branch a0 < 0<64> l0000000000015CB0
	// succ:  l0000000000015494 l0000000000015CB0
l0000000000015494:
	branch s1 == 0<64> l0000000000015C48
	// succ:  l0000000000015498 l0000000000015C48
l0000000000015498:
	a4 = Mem0[sp + 48<i64>:word64]
	a1 = 15<i64>
	a0 = sp + 57<i64>
	a4 = a4 & 1<i64>
	a4 = a4 | -4<i64>
	Mem0[sp + 56<i64>:byte] = SLICE(a4, byte, 0)
	call fn00000000000164D0 (retsize: 0;)
	a5 = Mem0[sp + 8<i64>:word64]
	branch a0 < 0<64> l0000000000015CB0
	// succ:  l00000000000154BC l0000000000015CB0
l00000000000154BC:
	s1 = sp + 264<i64>
	a3 = 64<i64>
	a2 = s1
	a1 = sp + 56<i64>
	a0 = 10<i64>
	a0 = inet_ntop(SLICE(a0, int32, 0), a1, a2, SLICE(a3, socklen_t, 0))
	a5 = Mem0[sp + 8<i64>:word64]
	branch a0 == 0<64> l0000000000015CB0
	// succ:  l00000000000154DC l0000000000015CB0
l00000000000154DC:
	a2 = 0x12000<64>
	a4 = a5
	a3 = s1
	a2 = a2 + -1392<i64>
	a1 = 1<i64>
	a0 = sp + 32<i64>
	Mem0[sp + 8<i64>:word64] = a5
	a0 = SEQ(0<32>, __asprintf_chk(a0, SLICE(a1, int32, 0), a2, a3, SLICE(a4, uint32, 0)))
	a4 = -1<i64>
	a5 = Mem0[sp + 8<i64>:word64]
	branch a0 == a4 l0000000000015CB0
	// succ:  l0000000000015508 l0000000000015CB0
l0000000000015508:
	s1 = Mem0[sp + 32<i64>:word64]
	branch s1 == 0<64> l0000000000015CB0
	// succ:  l0000000000015510 l0000000000015CB0
l0000000000015510:
	a4 = CONVERT(Mem0[sp:int32], int32, int64)
	branch a4 != 0<64> l00000000000155D8
	// succ:  l0000000000015518 l00000000000155D8
l0000000000015518:
	a1 = 58<i64>
	a0 = s1
	Mem0[sp:word64] = a5
	a0 = strchr(a0, SLICE(a1, char, 0))
	a5 = Mem0[sp:word64]
	branch a0 == 0<64> l00000000000155D8
	// succ:  l0000000000015530 l00000000000155D8
l0000000000015530:
	a4 = 1<i64>
	Mem0[sp + 28<i64>:word32] = SLICE(a4, word32, 0)
	branch s4 == 0<64> l0000000000015BEC
	// succ:  l000000000001553C l0000000000015BEC
l000000000001553C:
	a5 = CONVERT(Mem0[gp + -2028<i64>:int32], int32, int64)
	branch a5 != 0<64> l00000000000153D8
	// succ:  l0000000000015544 l00000000000153D8
l0000000000015544:
	a0 = Mem0[gp + -1920<i64>:word64]
	a2 = 0x12000<64>
	a3 = s4
	a2 = a2 + -1328<i64>
	a1 = 1<i64>
	a0 = SEQ(0<32>, __fprintf_chk(a0, SLICE(a1, int32, 0), a2, a3))
	a0 = 1<i64>
	call fn0000000000015FCC (retsize: 0;)
	s6 = 1<i64>
	goto l00000000000153DC
	// succ:  l00000000000153DC
l000000000001556C:
	a3 = Mem0[gp + -1920<i64>:word64]
	a0 = 0x12000<64>
	a2 = 37<i64>
	a1 = 1<i64>
	a0 = a0 + -1528<i64>
	a0 = SEQ(0<64>, fwrite(a0, SLICE(a1, size_t, 0), SLICE(a2, size_t, 0), a3))
	goto l00000000000153D8
	// succ:  l00000000000153D8
l0000000000015588:
	a2 = 0x12000<64>
	a1 = 0x12000<64>
	a2 = a2 + -1600<i64>
	a1 = a1 + -1592<i64>
	a0 = 1<i64>
	a0 = SEQ(0<32>, __printf_chk(SLICE(a0, int32, 0), a1, a2))
	s6 = 0<i64>
	goto l00000000000153DC
	// succ:  l00000000000153DC
l00000000000155A8:
	a4 = CONVERT(Mem0[sp + 28<i64>:int32], int32, int64)
	branch a4 != 0<64> l0000000000015944
	// succ:  l00000000000155B0 l0000000000015944
l00000000000155B0:
	a4 = CONVERT(Mem0[sp:int32], int32, int64)
	branch a4 == 0<64> l000000000001598C
	// succ:  l00000000000155B8 l000000000001598C
l00000000000155B8:
	a1 = s9
	a0 = 2<i64>
	Mem0[sp:word64] = a5
	call fn00000000000169D8 (retsize: 0;)
	s1 = a0
	branch a0 == 0<64> l0000000000015964
	// succ:  l00000000000155D0 l0000000000015964
l00000000000155D0:
	a5 = Mem0[sp:word64]
	s0 = s2
	// succ:  l00000000000155D8
l00000000000155D8:
	branch s4 == 0<64> l0000000000015BA0
	// succ:  l00000000000155DC l0000000000015BA0
l00000000000155DC:
	a5 = CONVERT(Mem0[sp + 28<i64>:int32], int32, int64)
	branch a5 != 0<64> l000000000001553C
	// succ:  l00000000000155E4 l000000000001553C
l00000000000155E4:
	a2 = 0<i64>
	a1 = s4
	a0 = sp + 28<i64>
	call fn00000000000166F4 (retsize: 0;)
	a5 = a0
	branch a0 < 0<64> l0000000000015B6C
	// succ:  l00000000000155FC l0000000000015B6C
l00000000000155FC:
	a4 = CONVERT(Mem0[sp + 28<i64>:int32], int32, int64)
	branch a4 == 0<64> l00000000000159B0
	// succ:  l0000000000015604 l00000000000159B0
l0000000000015604:
	a3 = s0
	a2 = sp + 56<i64>
	a1 = a5
	a0 = s1
	call fn00000000000175BC (retsize: 0;)
	// succ:  l0000000000015618
l0000000000015618:
	branch a0 < 0<64> l00000000000153D8
	// succ:  l000000000001561C l00000000000153D8
l000000000001561C:
	a5 = 0xFFFAC000<64>
	v34 = SLICE(a5, word32, 0)
	a5 = CONVERT(v34 - 1<i32>, word32, int64)
	a5 = s0 & a5
	branch a5 != 0<64> l0000000000015630
	// succ:  l000000000001562C l0000000000015630
l000000000001562C:
	s0 = s0 | 8<i64>
	// succ:  l0000000000015630
l0000000000015630:
	a0 = 1<i64>
	a0 = SEQ(0<32>, isatty(SLICE(a0, int32, 0)))
	branch a0 == 0<64> l0000000000015644
	// succ:  l000000000001563C l0000000000015644
l000000000001563C:
	a4 = 1<i64>
	Mem0[gp + -2032<i64>:word32] = SLICE(a4, word32, 0)
	// succ:  l0000000000015644
l0000000000015644:
	a5 = s0 & 8<i64>
	branch a5 == 0<64> l00000000000159C8
	// succ:  l000000000001564C l00000000000159C8
l000000000001564C:
	a5 = CONVERT(Mem0[sp + 28<i64>:int32], int32, int64)
	s2 = CONVERT(Mem0[sp + 216<i64>:int32], int32, int64)
	branch a5 != 0<64> l000000000001590C
	// succ:  l0000000000015658 l000000000001590C
l0000000000015658:
	a5 = 32<i64>
	branch s2 == a5 l0000000000015914
	// succ:  l0000000000015660 l0000000000015914
l0000000000015660:
	branch s10 == 0<64> l0000000000015860
	// succ:  l0000000000015664 l0000000000015860
l0000000000015664:
	s1 = 0x12000<64>
	// succ:  l0000000000015668
l0000000000015668:
	a3 = Mem0[sp + 72<i64>:word64]
	s3 = 0x12000<64>
	branch a3 == 0<64> l0000000000015690
	// succ:  l0000000000015674 l0000000000015690
l0000000000015674:
	a1 = 0x12000<64>
	a4 = s2
	a2 = s3 + -1248<i64>
	a1 = a1 + -1240<i64>
	a0 = s1 + -1272<i64>
	call fn000000000001654C (retsize: 0;)
	s2 = CONVERT(Mem0[sp + 216<i64>:int32], int32, int64)
	// succ:  l0000000000015690
l0000000000015690:
	a3 = Mem0[sp + 88<i64>:word64]
	a1 = 0x12000<64>
	a4 = s2
	a2 = s3 + -1248<i64>
	a1 = a1 + -1224<i64>
	a0 = s1 + -1272<i64>
	call fn000000000001654C (retsize: 0;)
	a3 = Mem0[sp + 104<i64>:word64]
	a4 = CONVERT(Mem0[sp + 216<i64>:int32], int32, int64)
	a2 = 0x12000<64>
	a1 = 0x12000<64>
	a2 = a2 + -1208<i64>
	a1 = a1 + -1192<i64>
	a0 = s1 + -1272<i64>
	call fn000000000001654C (retsize: 0;)
	a3 = Mem0[sp + 96<i64>:word64]
	branch a3 == 0<64> l00000000000156EC
	// succ:  l00000000000156D4 l00000000000156EC
l00000000000156D4:
	s2 = 0x12000<64>
	a1 = 0x12000<64>
	a2 = s2 + -928<i64>
	a1 = a1 + -1176<i64>
	a0 = s1 + -1272<i64>
	call fn000000000001654C (retsize: 0;)
	// succ:  l00000000000156EC
l00000000000156EC:
	a5 = 0x10000<64>
	v36 = SLICE(a5, word32, 0)
	a5 = CONVERT(v36 + 8<i32>, word32, int64)
	s0 = s0 & a5
	branch s0 == a5 l0000000000015C1C
	// succ:  l00000000000156FC l0000000000015C1C
l00000000000156FC:
	a0 = 10<i64>
	a0 = SEQ(0<32>, putchar(SLICE(a0, int32, 0)))
	a3 = Mem0[sp + 240<i64>:word64]
	branch a3 == 0<64> l0000000000015728
	// succ:  l000000000001570C l0000000000015728
l000000000001570C:
	a2 = 0x12000<64>
	a1 = 0x12000<64>
	a0 = 0x12000<64>
	a2 = a2 + -928<i64>
	a1 = a1 + -1144<i64>
	a0 = a0 + -1128<i64>
	call fn000000000001654C (retsize: 0;)
	// succ:  l0000000000015728
l0000000000015728:
	a3 = Mem0[sp + 248<i64>:word64]
	branch a3 == 0<64> l000000000001574C
	// succ:  l0000000000015730 l000000000001574C
l0000000000015730:
	a2 = 0x12000<64>
	a1 = 0x12000<64>
	a0 = 0x12000<64>
	a2 = a2 + -928<i64>
	a1 = a1 + -1120<i64>
	a0 = a0 + -1128<i64>
	call fn000000000001654C (retsize: 0;)
	// succ:  l000000000001574C
l000000000001574C:
	a3 = Mem0[sp + 224<i64>:word64]
	branch a3 == 0<64> l000000000001576C
	// succ:  l0000000000015754 l000000000001576C
l0000000000015754:
	a2 = 0x12000<64>
	a1 = 0x12000<64>
	a2 = a2 + -928<i64>
	a1 = a1 + -1104<i64>
	a0 = s1 + -1272<i64>
	call fn000000000001654C (retsize: 0;)
	// succ:  l000000000001576C
l000000000001576C:
	a3 = Mem0[sp + 232<i64>:word64]
	branch a3 == 0<64> l000000000001578C
	// succ:  l0000000000015774 l000000000001578C
l0000000000015774:
	a2 = 0x12000<64>
	a1 = 0x12000<64>
	a2 = a2 + -928<i64>
	a1 = a1 + -1088<i64>
	a0 = s1 + -1272<i64>
	call fn000000000001654C (retsize: 0;)
	// succ:  l000000000001578C
l000000000001578C:
	a5 = CONVERT(Mem0[sp + 28<i64>:int32], int32, int64)
	branch a5 == 0<64> l00000000000157A0
	// succ:  l0000000000015794 l00000000000157A0
l0000000000015794:
	a5 = CONVERT(Mem0[sp + 216<i64>:int32], int32, int64)
	a4 = 111<i64>
	branch a4 >=u a5 l0000000000015E3C
	// succ:  l00000000000157A0 l0000000000015E3C
l00000000000157A0:
	a2 = 0x12000<64>
	a1 = 0x12000<64>
	a3 = sp + 152<i64>
	a2 = a2 + -928<i64>
	a1 = a1 + -1056<i64>
	a0 = s1 + -1272<i64>
	call fn000000000001654C (retsize: 0;)
	// succ:  l00000000000157BC
l00000000000157BC:
	a5 = Mem0[sp + 120<i64>:word64]
	branch a5 == 0<64> l0000000000015C08
	// succ:  l00000000000157C4 l0000000000015C08
l00000000000157C4:
	a0 = 10<i64>
	a0 = SEQ(0<32>, putchar(SLICE(a0, int32, 0)))
	a3 = Mem0[sp + 128<i64>:word64]
	branch a3 == 0<64> l00000000000157F0
	// succ:  l00000000000157D4 l00000000000157F0
l00000000000157D4:
	a2 = 0x12000<64>
	a1 = 0x12000<64>
	a0 = 0x12000<64>
	a2 = a2 + -928<i64>
	a1 = a1 + -1040<i64>
	a0 = a0 + -1128<i64>
	call fn000000000001654C (retsize: 0;)
	// succ:  l00000000000157F0
l00000000000157F0:
	a3 = Mem0[sp + 120<i64>:word64]
	branch a3 == 0<64> l0000000000015814
	// succ:  l00000000000157F8 l0000000000015814
l00000000000157F8:
	a2 = 0x12000<64>
	a1 = 0x12000<64>
	a0 = 0x12000<64>
	a2 = a2 + -928<i64>
	a1 = a1 + -1024<i64>
	a0 = a0 + -1128<i64>
	call fn000000000001654C (retsize: 0;)
	// succ:  l0000000000015814
l0000000000015814:
	a3 = Mem0[sp + 136<i64>:word64]
	branch a3 == 0<64> l0000000000015838
	// succ:  l000000000001581C l0000000000015838
l000000000001581C:
	a2 = 0x12000<64>
	a1 = 0x12000<64>
	a0 = 0x12000<64>
	a2 = a2 + -928<i64>
	a1 = a1 + -1008<i64>
	a0 = a0 + -1128<i64>
	call fn000000000001654C (retsize: 0;)
	// succ:  l0000000000015838
l0000000000015838:
	a3 = Mem0[sp + 144<i64>:word64]
	branch a3 == 0<64> l00000000000153DC
	// succ:  l0000000000015840 l00000000000153DC
l0000000000015840:
	a2 = 0x12000<64>
	a1 = 0x12000<64>
	a0 = 0x12000<64>
	a2 = a2 + -928<i64>
	a1 = a1 + -1000<i64>
	a0 = a0 + -1128<i64>
	call fn000000000001654C (retsize: 0;)
	goto l00000000000153DC
	// succ:  l00000000000153DC
l0000000000015860:
	s3 = Mem0[sp + 56<i64>:word64]
	a0 = Mem0[sp + 88<i64>:word64]
	a1 = s3
	a0 = SEQ(0<32>, strcmp(a0, a1))
	branch a0 == 0<64> l0000000000015664
	// succ:  l0000000000015874 l0000000000015664
l0000000000015874:
	a3 = Mem0[sp + 64<i64>:word64]
	s4 = 0<i64>
	branch a3 == 0<64> l0000000000015E14
	// succ:  l0000000000015880 l0000000000015E14
l0000000000015880:
	s2 = 0x12000<64>
	s1 = 0x12000<64>
	a1 = 0x12000<64>
	a2 = s2 + -928<i64>
	a1 = a1 + -1288<i64>
	a0 = s1 + -1272<i64>
	call fn000000000001654C (retsize: 0;)
	a3 = Mem0[sp + 56<i64>:word64]
	a1 = 0x12000<64>
	a2 = s2 + -928<i64>
	a1 = a1 + -1264<i64>
	a0 = s1 + -1272<i64>
	call fn000000000001654C (retsize: 0;)
	branch s4 == 0<64> l0000000000015E74
	// succ:  l00000000000158B8 l0000000000015E74
l00000000000158B8:
	a5 = 0x10000<64>
	v35 = SLICE(a5, word32, 0)
	a5 = CONVERT(v35 + 8<i32>, word32, int64)
	s0 = s0 & a5
	branch s0 == a5 l0000000000015E64
	// succ:  l00000000000158C8 l0000000000015E64
l00000000000158C8:
	a3 = Mem0[sp + 240<i64>:word64]
	branch a3 == 0<64> l00000000000158E8
	// succ:  l00000000000158D0 l00000000000158E8
l00000000000158D0:
	a1 = 0x12000<64>
	a0 = 0x12000<64>
	a2 = s2 + -928<i64>
	a1 = a1 + -1144<i64>
	a0 = a0 + -1128<i64>
	call fn000000000001654C (retsize: 0;)
	// succ:  l00000000000158E8
l00000000000158E8:
	a3 = Mem0[sp + 248<i64>:word64]
	branch a3 == 0<64> l00000000000157BC
	// succ:  l00000000000158F0 l00000000000157BC
l00000000000158F0:
	a1 = 0x12000<64>
	a0 = 0x12000<64>
	a2 = s2 + -928<i64>
	a1 = a1 + -1120<i64>
	a0 = a0 + -1128<i64>
	call fn000000000001654C (retsize: 0;)
	goto l00000000000157BC
	// succ:  l00000000000157BC
l000000000001590C:
	a5 = 128<i64>
	branch s2 != a5 l0000000000015660
	// succ:  l0000000000015914 l0000000000015660
l0000000000015914:
	a3 = Mem0[sp + 64<i64>:word64]
	branch a3 == 0<64> l0000000000015DDC
	// succ:  l000000000001591C l0000000000015DDC
l000000000001591C:
	s4 = 1<i64>
	goto l0000000000015880
	// succ:  l0000000000015880
l0000000000015924:
	call fn0000000000017924 (retsize: 0;)
	a5 = Mem0[sp + 8<i64>:word64]
	branch a0 != 0<64> l0000000000015458
	// succ:  l0000000000015930 l0000000000015458
l0000000000015930:
	a4 = 0x10000<64>
	v32 = SLICE(a4, word32, 0)
	a4 = CONVERT(v32 + 8<i32>, word32, int64)
	a3 = s0 & a4
	branch a3 != a4 l0000000000015458
	// succ:  l0000000000015940 l0000000000015458
l0000000000015940:
	goto l0000000000015448
	// succ:  l0000000000015448
l0000000000015944:
	a1 = s9
	a0 = 10<i64>
	Mem0[sp + 8<i64>:word64] = a5
	call fn00000000000169D8 (retsize: 0;)
	s1 = a0
	s0 = s2
	a5 = Mem0[sp + 8<i64>:word64]
	branch a0 != 0<64> l0000000000015510
	// succ:  l0000000000015964 l0000000000015510
l0000000000015964:
	a5 = CONVERT(Mem0[gp + -2028<i64>:int32], int32, int64)
	branch a5 != 0<64> l00000000000153D8
	// succ:  l000000000001596C l00000000000153D8
l000000000001596C:
	a0 = Mem0[gp + -1920<i64>:word64]
	a2 = 0x12000<64>
	a3 = s9
	a2 = a2 + -1456<i64>
	a1 = 1<i64>
	a0 = SEQ(0<32>, __fprintf_chk(a0, SLICE(a1, int32, 0), a2, a3))
	s6 = 1<i64>
	goto l00000000000153DC
	// succ:  l00000000000153DC
l000000000001598C:
	a1 = s9
	a0 = 0<i64>
	Mem0[sp:word64] = a5
	call fn00000000000169D8 (retsize: 0;)
	s1 = a0
	branch a0 == 0<64> l0000000000015964
	// succ:  l00000000000159A4 l0000000000015964
l00000000000159A4:
	s0 = s2
	a5 = Mem0[sp:word64]
	goto l0000000000015518
	// succ:  l0000000000015518
l00000000000159B0:
	a3 = s0
	a2 = sp + 56<i64>
	a1 = a5
	a0 = s1
	call fn0000000000016D74 (retsize: 0;)
	goto l0000000000015618
	// succ:  l0000000000015618
l00000000000159C8:
	a5 = s0 & 128<i64>
	branch a5 != 0<64> l0000000000015D18
	// succ:  l00000000000159D0 l0000000000015D18
l00000000000159D0:
	a5 = s0 & 512<i64>
	branch a5 != 0<64> l0000000000015D48
	// succ:  l00000000000159D8 l0000000000015D48
l00000000000159D8:
	a5 = s0 & 64<i64>
	branch a5 == 0<64> l00000000000159FC
	// succ:  l00000000000159E0 l00000000000159FC
l00000000000159E0:
	a5 = CONVERT(Mem0[sp + 28<i64>:int32], int32, int64)
	branch a5 != 0<64> l00000000000159FC
	// succ:  l00000000000159E8 l00000000000159FC
l00000000000159E8:
	a2 = Mem0[sp + 96<i64>:word64]
	a1 = 0x12000<64>
	a1 = a1 + -952<i64>
	a0 = 1<i64>
	a0 = SEQ(0<32>, __printf_chk(SLICE(a0, int32, 0), a1, a2))
	// succ:  l00000000000159FC
l00000000000159FC:
	a5 = s0 & 256<i64>
	branch a5 != 0<64> l0000000000015D30
	// succ:  l0000000000015A04 l0000000000015D30
l0000000000015A04:
	a5 = s0 << 0x2E<u32>
	branch a5 < 0<64> l0000000000015D78
	// succ:  l0000000000015A0C l0000000000015D78
l0000000000015A0C:
	a5 = s0 & 1024<i64>
	branch a5 == 0<64> l0000000000015A2C
	// succ:  l0000000000015A14 l0000000000015A2C
l0000000000015A14:
	a2 = Mem0[sp + 224<i64>:word64]
	branch a2 == 0<64> l0000000000015A2C
	// succ:  l0000000000015A1C l0000000000015A2C
l0000000000015A1C:
	a1 = 0x12000<64>
	a1 = a1 + -904<i64>
	a0 = 1<i64>
	a0 = SEQ(0<32>, __printf_chk(SLICE(a0, int32, 0), a1, a2))
	// succ:  l0000000000015A2C
l0000000000015A2C:
	a5 = s0 << 0x34<u32>
	branch a5 >= 0<64> l0000000000015A4C
	// succ:  l0000000000015A34 l0000000000015A4C
l0000000000015A34:
	a2 = Mem0[sp + 232<i64>:word64]
	branch a2 == 0<64> l0000000000015A4C
	// succ:  l0000000000015A3C l0000000000015A4C
l0000000000015A3C:
	a1 = 0x12000<64>
	a1 = a1 + -888<i64>
	a0 = 1<i64>
	a0 = SEQ(0<32>, __printf_chk(SLICE(a0, int32, 0), a1, a2))
	// succ:  l0000000000015A4C
l0000000000015A4C:
	a5 = s0 << 0x32<u32>
	branch a5 >= 0<64> l0000000000015A80
	// succ:  l0000000000015A54 l0000000000015A80
l0000000000015A54:
	s2 = Mem0[sp + 240<i64>:word64]
	branch s2 == 0<64> l0000000000015A80
	// succ:  l0000000000015A5C l0000000000015A80
l0000000000015A5C:
	a1 = 32<i64>
	a0 = s2
	a0 = strchr(a0, SLICE(a1, char, 0))
	a2 = s2
	branch a0 == 0<64> l0000000000015DA4
	// succ:  l0000000000015A70 l0000000000015DA4
l0000000000015A70:
	a1 = 0x12000<64>
	a1 = a1 + -872<i64>
	a0 = 1<i64>
	a0 = SEQ(0<32>, __printf_chk(SLICE(a0, int32, 0), a1, a2))
	// succ:  l0000000000015A80
l0000000000015A80:
	a5 = s0 << 0x33<u32>
	branch a5 >= 0<64> l0000000000015AAC
	// succ:  l0000000000015A88 l0000000000015AAC
l0000000000015A88:
	a1 = 32<i64>
	a0 = sp + 152<i64>
	a0 = strchr(a0, SLICE(a1, char, 0))
	a2 = sp + 152<i64>
	branch a0 == 0<64> l0000000000015D90
	// succ:  l0000000000015A9C l0000000000015D90
l0000000000015A9C:
	a1 = 0x12000<64>
	a1 = a1 + -840<i64>
	a0 = 1<i64>
	a0 = SEQ(0<32>, __printf_chk(SLICE(a0, int32, 0), a1, a2))
	// succ:  l0000000000015AAC
l0000000000015AAC:
	a5 = s0 & 1<i64>
	branch a5 == 0<64> l0000000000015ACC
	// succ:  l0000000000015AB4 l0000000000015ACC
l0000000000015AB4:
	a2 = Mem0[sp + 112<i64>:word64]
	branch a2 == 0<64> l0000000000015ACC
	// succ:  l0000000000015ABC l0000000000015ACC
l0000000000015ABC:
	a1 = 0x12000<64>
	a1 = a1 + -808<i64>
	a0 = 1<i64>
	a0 = SEQ(0<32>, __printf_chk(SLICE(a0, int32, 0), a1, a2))
	// succ:  l0000000000015ACC
l0000000000015ACC:
	a5 = s0 & 2<i64>
	branch a5 != 0<64> l0000000000015D60
	// succ:  l0000000000015AD4 l0000000000015D60
l0000000000015AD4:
	a5 = 0xC000<64>
	s0 = s0 & a5
	branch s0 != a5 l00000000000153DC
	// succ:  l0000000000015AE0 l00000000000153DC
l0000000000015AE0:
	a2 = Mem0[sp + 128<i64>:word64]
	branch a2 == 0<64> l0000000000015AF8
	// succ:  l0000000000015AE8 l0000000000015AF8
l0000000000015AE8:
	a1 = 0x12000<64>
	a1 = a1 + -776<i64>
	a0 = 1<i64>
	a0 = SEQ(0<32>, __printf_chk(SLICE(a0, int32, 0), a1, a2))
	// succ:  l0000000000015AF8
l0000000000015AF8:
	s0 = Mem0[sp + 120<i64>:word64]
	branch s0 == 0<64> l0000000000015B24
	// succ:  l0000000000015B00 l0000000000015B24
l0000000000015B00:
	a1 = 32<i64>
	a0 = s0
	a0 = strchr(a0, SLICE(a1, char, 0))
	a2 = s0
	branch a0 == 0<64> l0000000000015E90
	// succ:  l0000000000015B14 l0000000000015E90
l0000000000015B14:
	a1 = 0x12000<64>
	a1 = a1 + -760<i64>
	a0 = 1<i64>
	a0 = SEQ(0<32>, __printf_chk(SLICE(a0, int32, 0), a1, a2))
	// succ:  l0000000000015B24
l0000000000015B24:
	s0 = Mem0[sp + 136<i64>:word64]
	branch s0 == 0<64> l0000000000015B50
	// succ:  l0000000000015B2C l0000000000015B50
l0000000000015B2C:
	a1 = 32<i64>
	a0 = s0
	a0 = strchr(a0, SLICE(a1, char, 0))
	a2 = s0
	branch a0 == 0<64> l0000000000015EA4
	// succ:  l0000000000015B40 l0000000000015EA4
l0000000000015B40:
	a1 = 0x12000<64>
	a1 = a1 + -728<i64>
	a0 = 1<i64>
	a0 = SEQ(0<32>, __printf_chk(SLICE(a0, int32, 0), a1, a2))
	// succ:  l0000000000015B50
l0000000000015B50:
	a2 = Mem0[sp + 144<i64>:word64]
	branch a2 == 0<64> l00000000000153DC
	// succ:  l0000000000015B58 l00000000000153DC
l0000000000015B58:
	a1 = 0x12000<64>
	a1 = a1 + -696<i64>
	a0 = 1<i64>
	a0 = SEQ(0<32>, __printf_chk(SLICE(a0, int32, 0), a1, a2))
	goto l00000000000153DC
	// succ:  l00000000000153DC
l0000000000015B6C:
	a5 = CONVERT(Mem0[gp + -2028<i64>:int32], int32, int64)
	branch a5 != 0<64> l00000000000153D8
	// succ:  l0000000000015B74 l00000000000153D8
l0000000000015B74:
	a5 = CONVERT(Mem0[sp + 28<i64>:int32], int32, int64)
	a0 = Mem0[gp + -1920<i64>:word64]
	branch a5 != 0<64> l0000000000015CD8
	// succ:  l0000000000015B80 l0000000000015CD8
l0000000000015B80:
	a3 = 0x12000<64>
	a3 = a3 + -1632<i64>
	// succ:  l0000000000015B88
l0000000000015B88:
	a4 = s4
	// succ:  l0000000000015B8C
l0000000000015B8C:
	a2 = 0x12000<64>
	a2 = a2 + -1424<i64>
	a1 = 1<i64>
	a0 = SEQ(0<32>, __fprintf_chk(a0, SLICE(a1, int32, 0), a2, a3, a4))
	goto l00000000000153D8
	// succ:  l00000000000153D8
l0000000000015BA0:
	a1 = 47<i64>
	a0 = s1
	Mem0[sp:word64] = a5
	a0 = strchr(a0, SLICE(a1, char, 0))
	a5 = Mem0[sp:word64]
	branch a0 == 0<64> l00000000000155FC
	// succ:  l0000000000015BB8 l00000000000155FC
l0000000000015BB8:
	Mem0[a0:byte] = SLICE(0<64>, byte, 0)
	s4 = a0 + 1<i64>
	branch s4 == 0<64> l00000000000155FC
	// succ:  l0000000000015BC4 l00000000000155FC
l0000000000015BC4:
	goto l00000000000155E4
	// succ:  l00000000000155E4
l0000000000015BC8:
	a5 = CONVERT(Mem0[gp + -2028<i64>:int32], int32, int64)
	branch a5 != 0<64> l00000000000153D8
	// succ:  l0000000000015BD0 l00000000000153D8
l0000000000015BD0:
	a5 = CONVERT(Mem0[sp + 28<i64>:int32], int32, int64)
	a0 = Mem0[gp + -1920<i64>:word64]
	branch a5 != 0<64> l0000000000015E7C
	// succ:  l0000000000015BDC l0000000000015E7C
l0000000000015BDC:
	a3 = 0x12000<64>
	a3 = a3 + -1632<i64>
	a4 = s10
	goto l0000000000015B8C
	// succ:  l0000000000015B8C
l0000000000015BEC:
	a1 = 47<i64>
	a0 = s1
	Mem0[sp:word64] = a5
	a0 = strchr(a0, SLICE(a1, char, 0))
	a5 = Mem0[sp:word64]
	branch a0 != 0<64> l0000000000015BB8
	// succ:  l0000000000015C04 l0000000000015BB8
l0000000000015C04:
	goto l0000000000015604
	// succ:  l0000000000015604
l0000000000015C08:
	a5 = Mem0[sp + 136<i64>:word64]
	branch a5 != 0<64> l00000000000157C4
	// succ:  l0000000000015C10 l00000000000157C4
l0000000000015C10:
	a5 = Mem0[sp + 144<i64>:word64]
	branch a5 != 0<64> l00000000000157C4
	// succ:  l0000000000015C18 l00000000000157C4
l0000000000015C18:
	goto l00000000000153DC
	// succ:  l00000000000153DC
l0000000000015C1C:
	a3 = Mem0[sp + 80<i64>:word64]
	branch a3 == 0<64> l00000000000156FC
	// succ:  l0000000000015C24 l00000000000156FC
l0000000000015C24:
	s0 = 0<i64>
	s2 = 0x12000<64>
	// succ:  l0000000000015C2C
l0000000000015C2C:
	a1 = 0x12000<64>
	a2 = s2 + -928<i64>
	a1 = a1 + -1160<i64>
	a0 = s1 + -1272<i64>
	call fn000000000001654C (retsize: 0;)
	branch s0 != 0<64> l00000000000158C8
	// succ:  l0000000000015C44 l00000000000158C8
l0000000000015C44:
	goto l00000000000156FC
	// succ:  l00000000000156FC
l0000000000015C48:
	a1 = 4<i64>
	a0 = sp + 256<i64>
	Mem0[sp + 8<i64>:word64] = a5
	s1 = Mem0[sp + 48<i64>:word64]
	call fn00000000000164D0 (retsize: 0;)
	a5 = Mem0[sp + 8<i64>:word64]
	branch a0 < 0<64> l0000000000015CB0
	// succ:  l0000000000015C64 l0000000000015CB0
l0000000000015C64:
	a4 = 15<i64>
	branch a4 >= a5 l0000000000015C7C
	// succ:  l0000000000015C6C l0000000000015C7C
l0000000000015C6C:
	a4 = 4<i64>
	a4 = s1 %s a4
	a3 = 1<i64>
	branch a3 >=u a4 l0000000000015DB8
	// succ:  l0000000000015C7C l0000000000015DB8
l0000000000015C7C:
	a4 = 10<i64>
	Mem0[sp + 256<i64>:byte] = SLICE(a4, byte, 0)
	// succ:  l0000000000015C84
l0000000000015C84:
	a4 = CONVERT(Mem0[sp + 256<i64>:int32], int32, int64)
	s1 = sp + 264<i64>
	a3 = 64<i64>
	a2 = s1
	a1 = sp + 24<i64>
	a0 = 2<i64>
	Mem0[sp + 8<i64>:word64] = a5
	Mem0[sp + 24<i64>:word32] = SLICE(a4, word32, 0)
	a0 = inet_ntop(SLICE(a0, int32, 0), a1, a2, SLICE(a3, socklen_t, 0))
	a5 = Mem0[sp + 8<i64>:word64]
	branch a0 != 0<64> l00000000000154DC
	// succ:  l0000000000015CB0 l00000000000154DC
l0000000000015CB0:
	a4 = CONVERT(Mem0[gp + -2028<i64>:int32], int32, int64)
	branch a4 != 0<64> l00000000000153D8
	// succ:  l0000000000015CB8 l00000000000153D8
l0000000000015CB8:
	a0 = Mem0[gp + -1920<i64>:word64]
	a2 = 0x12000<64>
	a3 = a5
	a2 = a2 + -1384<i64>
	a1 = 1<i64>
	a0 = SEQ(0<32>, __fprintf_chk(a0, SLICE(a1, int32, 0), a2, SLICE(a3, uint32, 0)))
	s6 = 1<i64>
	goto l00000000000153DC
	// succ:  l00000000000153DC
l0000000000015CD8:
	a3 = 0x12000<64>
	a3 = a3 + -1640<i64>
	goto l0000000000015B88
	// succ:  l0000000000015B88
l0000000000015CE4:
	branch s1 != 0<64> l0000000000015510
	// succ:  l0000000000015CE8 l0000000000015510
l0000000000015CE8:
	a5 = CONVERT(Mem0[gp + -2028<i64>:int32], int32, int64)
	branch a5 != 0<64> l00000000000153D8
	// succ:  l0000000000015CF0 l00000000000153D8
l0000000000015CF0:
	a3 = Mem0[gp + -1920<i64>:word64]
	a0 = 0x12000<64>
	a2 = 28<i64>
	a1 = 1<i64>
	a0 = a0 + -1488<i64>
	a0 = SEQ(0<64>, fwrite(a0, SLICE(a1, size_t, 0), SLICE(a2, size_t, 0), a3))
	a0 = 1<i64>
	call fn0000000000015FCC (retsize: 0;)
	s6 = 1<i64>
	goto l00000000000153DC
	// succ:  l00000000000153DC
l0000000000015D18:
	a2 = Mem0[sp + 104<i64>:word64]
	a1 = 0x12000<64>
	a1 = a1 + -984<i64>
	a0 = 1<i64>
	a0 = SEQ(0<32>, __printf_chk(SLICE(a0, int32, 0), a1, a2))
	goto l00000000000159D0
	// succ:  l00000000000159D0
l0000000000015D30:
	a2 = Mem0[sp + 88<i64>:word64]
	a1 = 0x12000<64>
	a1 = a1 + -936<i64>
	a0 = 1<i64>
	a0 = SEQ(0<32>, __printf_chk(SLICE(a0, int32, 0), a1, a2))
	goto l0000000000015A04
	// succ:  l0000000000015A04
l0000000000015D48:
	a2 = CONVERT(Mem0[sp + 216<i64>:int32], int32, int64)
	a1 = 0x12000<64>
	a1 = a1 + -968<i64>
	a0 = 1<i64>
	a0 = SEQ(0<32>, __printf_chk(SLICE(a0, int32, 0), a1, SLICE(a2, uint32, 0)))
	goto l00000000000159D8
	// succ:  l00000000000159D8
l0000000000015D60:
	a1 = 0x12000<64>
	a2 = s1
	a1 = a1 + -792<i64>
	a0 = 1<i64>
	a0 = SEQ(0<32>, __printf_chk(SLICE(a0, int32, 0), a1, a2))
	goto l0000000000015AD4
	// succ:  l0000000000015AD4
l0000000000015D78:
	a2 = Mem0[sp + 80<i64>:word64]
	a1 = 0x12000<64>
	a1 = a1 + -920<i64>
	a0 = 1<i64>
	a0 = SEQ(0<32>, __printf_chk(SLICE(a0, int32, 0), a1, a2))
	goto l0000000000015A0C
	// succ:  l0000000000015A0C
l0000000000015D90:
	a1 = 0x12000<64>
	a1 = a1 + -824<i64>
	a0 = 1<i64>
	a0 = SEQ(0<32>, __printf_chk(SLICE(a0, int32, 0), a1, a2))
	goto l0000000000015AAC
	// succ:  l0000000000015AAC
l0000000000015DA4:
	a1 = 0x12000<64>
	a1 = a1 + -856<i64>
	a0 = 1<i64>
	a0 = SEQ(0<32>, __printf_chk(SLICE(a0, int32, 0), a1, a2))
	goto l0000000000015A80
	// succ:  l0000000000015A80
l0000000000015DB8:
	branch a4 == a3 l0000000000015E00
	// succ:  l0000000000015DBC l0000000000015E00
l0000000000015DBC:
	a4 = -84<i64>
	Mem0[sp + 256<i64>:byte] = SLICE(a4, byte, 0)
	a4 = Mem0[sp + 48<i64>:word64]
	a4 = a4 >> 4<u32>
	a4 = a4 & 15<i64>
	a4 = a4 | 16<i64>
	Mem0[sp + 257<i64>:byte] = SLICE(a4, byte, 0)
	goto l0000000000015C84
	// succ:  l0000000000015C84
l0000000000015DDC:
	a3 = Mem0[sp + 56<i64>:word64]
	s2 = 0x12000<64>
	s1 = 0x12000<64>
	a1 = 0x12000<64>
	a2 = s2 + -928<i64>
	a1 = a1 + -1264<i64>
	a0 = s1 + -1272<i64>
	call fn000000000001654C (retsize: 0;)
	goto l00000000000158B8
	// succ:  l00000000000158B8
l0000000000015E00:
	a4 = -64<i64>
	Mem0[sp + 256<i64>:byte] = SLICE(a4, byte, 0)
	a4 = -88<i64>
	Mem0[sp + 257<i64>:byte] = SLICE(a4, byte, 0)
	goto l0000000000015C84
	// succ:  l0000000000015C84
l0000000000015E14:
	s2 = 0x12000<64>
	s1 = 0x12000<64>
	a1 = 0x12000<64>
	a2 = s2 + -928<i64>
	a3 = s3
	a1 = a1 + -1264<i64>
	a0 = s1 + -1272<i64>
	call fn000000000001654C (retsize: 0;)
	s2 = CONVERT(Mem0[sp + 216<i64>:int32], int32, int64)
	goto l0000000000015668
	// succ:  l0000000000015668
l0000000000015E3C:
	a3 = 128<i64>
	a2 = 0x12000<64>
	a1 = 0x12000<64>
	a4 = sp + 152<i64>
	v37 = SLICE(a3, word32, 0)
	v38 = SLICE(a5, word32, 0)
	a3 = CONVERT(v37 - v38, word32, int64)
	a2 = a2 + -1072<i64>
	a1 = a1 + -1056<i64>
	a0 = s1 + -1272<i64>
	call fn000000000001654C (retsize: 0;)
	goto l00000000000157BC
	// succ:  l00000000000157BC
l0000000000015E64:
	a3 = Mem0[sp + 80<i64>:word64]
	s0 = 1<i64>
	branch a3 != 0<64> l0000000000015C2C
	// succ:  l0000000000015E70 l0000000000015C2C
l0000000000015E70:
	goto l00000000000158C8
	// succ:  l00000000000158C8
l0000000000015E74:
	s2 = CONVERT(Mem0[sp + 216<i64>:int32], int32, int64)
	goto l0000000000015668
	// succ:  l0000000000015668
l0000000000015E7C:
	a3 = 0x12000<64>
	a3 = a3 + -1640<i64>
	a4 = s10
	goto l0000000000015B8C
	// succ:  l0000000000015B8C
l0000000000015E8C:
	__stack_chk_fail()
l0000000000015E90:
	a1 = 0x12000<64>
	a1 = a1 + -744<i64>
	a0 = 1<i64>
	a0 = SEQ(0<32>, __printf_chk(SLICE(a0, int32, 0), a1, a2))
	goto l0000000000015B24
	// succ:  l0000000000015B24
l0000000000015EA4:
	a1 = 0x12000<64>
	a1 = a1 + -712<i64>
	a0 = 1<i64>
	a0 = SEQ(0<32>, __printf_chk(SLICE(a0, int32, 0), a1, a2))
	goto l0000000000015B50
	// succ:  l0000000000015B50
fn0000000000015180_exit:


// fn0000000000015EB8
// Return size: 0
define fn0000000000015EB8
fn0000000000015EB8_entry:
	sp = fp
	// succ:  l0000000000015EB8
l0000000000015EB8:
	gp = 0x0000000000012EB8<p64>
	gp = gp + 1424<i64>
	a5 = a0
	a0 = 0x0000000000014EC4<p64>
	a0 = a0 + 700<i64>
	a1 = Mem0[sp:word64]
	a2 = sp + 8<i64>
	sp = sp & -16<i64>
	a3 = 0x0000000000017ED8<p64>
	a3 = a3 + 1040<i64>
	a4 = 0x0000000000017EE0<p64>
	a4 = a4 + 1176<i64>
	a6 = sp
	a0 = SEQ(0<32>, __libc_start_main(a0, SLICE(a1, int32, 0), a2, a3, a4, a5, a6))
	return
	// succ:  fn0000000000015EB8_exit
fn0000000000015EB8_exit:


// fn0000000000015EF0
// Return size: 0
define fn0000000000015EF0
fn0000000000015EF0_entry:
	sp = fp
	// succ:  l0000000000015EF0
l0000000000015EF0:
	a0 = 0x10000<64>
	a5 = 0x10000<64>
	a4 = a0 + 672<i64>
	a5 = a5 + 679<i64>
	a5 = a5 - a4
	a4 = 14<i64>
	branch a4 >=u a5 l0000000000015F20
	// succ:  l0000000000015F0C l0000000000015F20
l0000000000015F0C:
	t1 = 0<64>
	t1 = t1
	branch t1 == 0<64> l0000000000015F20
	// succ:  l0000000000015F18 l0000000000015F20
l0000000000015F18:
	a0 = a0 + 672<i64>
	call t1 (retsize: 0;)
	return
	// succ:  fn0000000000015EF0_exit
l0000000000015F20:
	return
	// succ:  fn0000000000015EF0_exit
fn0000000000015EF0_exit:


// fn0000000000015F24
// Return size: 0
define fn0000000000015F24
fn0000000000015F24_entry:
	sp = fp
	// succ:  l0000000000015F24
l0000000000015F24:
	a0 = 0x10000<64>
	a5 = 0x10000<64>
	a1 = a0 + 672<i64>
	a5 = a5 + 672<i64>
	a5 = a5 - a1
	a5 = a5 >> 3<u32>
	a1 = a5 >>u 0x3F<u32>
	a1 = a1 + a5
	a1 = a1 >> 1<u32>
	branch a1 == 0<64> l0000000000015F60
	// succ:  l0000000000015F4C l0000000000015F60
l0000000000015F4C:
	t1 = 0<64>
	t1 = t1
	branch t1 == 0<64> l0000000000015F60
	// succ:  l0000000000015F58 l0000000000015F60
l0000000000015F58:
	a0 = a0 + 672<i64>
	call t1 (retsize: 0;)
	return
	// succ:  fn0000000000015F24_exit
l0000000000015F60:
	return
	// succ:  fn0000000000015F24_exit
fn0000000000015F24_exit:


// fn0000000000015F64
// Return size: 0
define fn0000000000015F64
fn0000000000015F64_entry:
	sp = fp
	// succ:  l0000000000015F64
l0000000000015F64:
	sp = sp + -16<i64>
	Mem0[sp:word64] = s0
	a5 = CONVERT(Mem0[gp + -1900<i64>:byte], byte, word64)
	Mem0[sp + 8<i64>:word64] = ra
	branch a5 != 0<64> l0000000000015F84
	// succ:  l0000000000015F78 l0000000000015F84
l0000000000015F78:
	call fn0000000000015EF0 (retsize: 0;)
	a5 = 1<i64>
	Mem0[gp + -1900<i64>:byte] = SLICE(a5, byte, 0)
	// succ:  l0000000000015F84
l0000000000015F84:
	ra = Mem0[sp + 8<i64>:word64]
	s0 = Mem0[sp:word64]
	sp = sp + 16<i64>
	return
	// succ:  fn0000000000015F64_exit
fn0000000000015F64_exit:


// fn0000000000015F94
// Return size: 0
define fn0000000000015F94
fn0000000000015F94_entry:
	sp = fp
	// succ:  l0000000000015F94
l0000000000015F94:
	a5 = 0x1A000<64>
	a0 = a5 + -472<i64>
	a5 = Mem0[a0:word64]
	branch a5 != 0<64> l0000000000015FA8
	// succ:  l0000000000015FA4 l0000000000015FA8
l0000000000015FA4:
	// succ:  l0000000000015FA4_thunk_fn0000000000015F24
l0000000000015FA4_thunk_fn0000000000015F24:
	call fn0000000000015F24 (retsize: 0;)
	return
	// succ:  fn0000000000015F94_exit
l0000000000015FA8:
	a5 = 0<64>
	a5 = a5
	branch a5 == 0<64> l0000000000015FA4
	// succ:  l0000000000015FB4 l0000000000015FA4
l0000000000015FB4:
	sp = sp + -16<i64>
	Mem0[sp + 8<i64>:word64] = ra
	call fn0000000000000000 (retsize: 0;)
	ra = Mem0[sp + 8<i64>:word64]
	sp = sp + 16<i64>
	// succ:  l0000000000015FC8_thunk_fn0000000000015F24
l0000000000015FC8_thunk_fn0000000000015F24:
	call fn0000000000015F24 (retsize: 0;)
	return
	// succ:  fn0000000000015F94_exit
fn0000000000015F94_exit:


// fn0000000000015FCC
// Return size: 0
define fn0000000000015FCC
fn0000000000015FCC_entry:
	sp = fp
	// succ:  l0000000000015FCC
l0000000000015FCC:
	sp = sp + -16<i64>
	Mem0[sp:word64] = s0
	Mem0[sp + 8<i64>:word64] = ra
	a3 = Mem0[gp + -1920<i64>:word64]
	branch a0 != 0<64> l0000000000016090
	// succ:  l0000000000015FE0 l0000000000016090
l0000000000015FE0:
	a0 = 0x11000<64>
	a2 = 77<i64>
	a1 = 1<i64>
	a0 = a0 + 1032<i64>
	a0 = SEQ(0<64>, fwrite(a0, SLICE(a1, size_t, 0), SLICE(a2, size_t, 0), a3))
	a3 = Mem0[gp + -1920<i64>:word64]
	a0 = 0x11000<64>
	a2 = 62<i64>
	a1 = 1<i64>
	a0 = a0 + 1112<i64>
	a0 = SEQ(0<64>, fwrite(a0, SLICE(a1, size_t, 0), SLICE(a2, size_t, 0), a3))
	a3 = Mem0[gp + -1920<i64>:word64]
	a0 = 0x11000<64>
	a2 = 65<i64>
	a1 = 1<i64>
	a0 = a0 + 1176<i64>
	a0 = SEQ(0<64>, fwrite(a0, SLICE(a1, size_t, 0), SLICE(a2, size_t, 0), a3))
	a3 = Mem0[gp + -1920<i64>:word64]
	a0 = 0x11000<64>
	a2 = 76<i64>
	a1 = 1<i64>
	a0 = a0 + 1248<i64>
	a0 = SEQ(0<64>, fwrite(a0, SLICE(a1, size_t, 0), SLICE(a2, size_t, 0), a3))
	a3 = Mem0[gp + -1920<i64>:word64]
	a0 = 0x11000<64>
	a2 = 65<i64>
	a1 = 1<i64>
	a0 = a0 + 1328<i64>
	a0 = SEQ(0<64>, fwrite(a0, SLICE(a1, size_t, 0), SLICE(a2, size_t, 0), a3))
	a3 = Mem0[gp + -1920<i64>:word64]
	a0 = 0x11000<64>
	a2 = 41<i64>
	a1 = 1<i64>
	a0 = a0 + 1400<i64>
	a0 = SEQ(0<64>, fwrite(a0, SLICE(a1, size_t, 0), SLICE(a2, size_t, 0), a3))
	a3 = Mem0[gp + -1920<i64>:word64]
	ra = Mem0[sp + 8<i64>:word64]
	s0 = Mem0[sp:word64]
	a0 = 0x11000<64>
	a2 = 30<i64>
	a1 = 1<i64>
	a0 = a0 + 1448<i64>
	sp = sp + 16<i64>
	a0 = SEQ(0<64>, fwrite(a0, SLICE(a1, size_t, 0), SLICE(a2, size_t, 0), a3))
	return
	// succ:  fn0000000000015FCC_exit
l0000000000016090:
	a0 = 0x11000<64>
	a2 = 26<i64>
	a1 = 1<i64>
	a0 = a0 + -1056<i64>
	a0 = SEQ(0<64>, fwrite(a0, SLICE(a1, size_t, 0), SLICE(a2, size_t, 0), a3))
	a3 = Mem0[gp + -1920<i64>:word64]
	a0 = 0x11000<64>
	a2 = 54<i64>
	a1 = 1<i64>
	a0 = a0 + -1024<i64>
	a0 = SEQ(0<64>, fwrite(a0, SLICE(a1, size_t, 0), SLICE(a2, size_t, 0), a3))
	a3 = Mem0[gp + -1920<i64>:word64]
	a0 = 0x11000<64>
	a2 = 77<i64>
	a1 = 1<i64>
	a0 = a0 + -968<i64>
	a0 = SEQ(0<64>, fwrite(a0, SLICE(a1, size_t, 0), SLICE(a2, size_t, 0), a3))
	a3 = Mem0[gp + -1920<i64>:word64]
	a0 = 0x11000<64>
	a2 = 62<i64>
	a1 = 1<i64>
	a0 = a0 + -888<i64>
	a0 = SEQ(0<64>, fwrite(a0, SLICE(a1, size_t, 0), SLICE(a2, size_t, 0), a3))
	a3 = Mem0[gp + -1920<i64>:word64]
	a0 = 0x11000<64>
	a2 = 79<i64>
	a1 = 1<i64>
	a0 = a0 + -824<i64>
	a0 = SEQ(0<64>, fwrite(a0, SLICE(a1, size_t, 0), SLICE(a2, size_t, 0), a3))
	a3 = Mem0[gp + -1920<i64>:word64]
	a0 = 0x11000<64>
	a2 = 79<i64>
	a1 = 1<i64>
	a0 = a0 + -744<i64>
	a0 = SEQ(0<64>, fwrite(a0, SLICE(a1, size_t, 0), SLICE(a2, size_t, 0), a3))
	a3 = Mem0[gp + -1920<i64>:word64]
	a0 = 0x11000<64>
	a2 = 42<i64>
	a1 = 1<i64>
	a0 = a0 + -664<i64>
	a0 = SEQ(0<64>, fwrite(a0, SLICE(a1, size_t, 0), SLICE(a2, size_t, 0), a3))
	a3 = Mem0[gp + -1920<i64>:word64]
	a0 = 0x11000<64>
	a2 = 76<i64>
	a1 = 1<i64>
	a0 = a0 + -616<i64>
	a0 = SEQ(0<64>, fwrite(a0, SLICE(a1, size_t, 0), SLICE(a2, size_t, 0), a3))
	a3 = Mem0[gp + -1920<i64>:word64]
	a0 = 0x11000<64>
	a2 = 77<i64>
	a1 = 1<i64>
	a0 = a0 + -536<i64>
	a0 = SEQ(0<64>, fwrite(a0, SLICE(a1, size_t, 0), SLICE(a2, size_t, 0), a3))
	a3 = Mem0[gp + -1920<i64>:word64]
	a0 = 0x11000<64>
	a2 = 77<i64>
	a1 = 1<i64>
	a0 = a0 + -456<i64>
	a0 = SEQ(0<64>, fwrite(a0, SLICE(a1, size_t, 0), SLICE(a2, size_t, 0), a3))
	a1 = Mem0[gp + -1920<i64>:word64]
	a0 = 10<i64>
	call fputc (retsize: 0;)
	a3 = Mem0[gp + -1920<i64>:word64]
	a0 = 0x11000<64>
	a2 = 23<i64>
	a1 = 1<i64>
	a0 = a0 + -376<i64>
	a0 = SEQ(0<64>, fwrite(a0, SLICE(a1, size_t, 0), SLICE(a2, size_t, 0), a3))
	a3 = Mem0[gp + -1920<i64>:word64]
	a0 = 0x11000<64>
	a2 = 71<i64>
	a1 = 1<i64>
	a0 = a0 + -352<i64>
	a0 = SEQ(0<64>, fwrite(a0, SLICE(a1, size_t, 0), SLICE(a2, size_t, 0), a3))
	a3 = Mem0[gp + -1920<i64>:word64]
	a0 = 0x11000<64>
	a2 = 57<i64>
	a1 = 1<i64>
	a0 = a0 + -280<i64>
	a0 = SEQ(0<64>, fwrite(a0, SLICE(a1, size_t, 0), SLICE(a2, size_t, 0), a3))
	a3 = Mem0[gp + -1920<i64>:word64]
	a0 = 0x11000<64>
	a2 = 58<i64>
	a1 = 1<i64>
	a0 = a0 + -216<i64>
	a0 = SEQ(0<64>, fwrite(a0, SLICE(a1, size_t, 0), SLICE(a2, size_t, 0), a3))
	a3 = Mem0[gp + -1920<i64>:word64]
	a0 = 0x11000<64>
	a2 = 57<i64>
	a1 = 1<i64>
	a0 = a0 + -152<i64>
	a0 = SEQ(0<64>, fwrite(a0, SLICE(a1, size_t, 0), SLICE(a2, size_t, 0), a3))
	a3 = Mem0[gp + -1920<i64>:word64]
	a0 = 0x11000<64>
	a2 = 77<i64>
	a1 = 1<i64>
	a0 = a0 + -88<i64>
	a0 = SEQ(0<64>, fwrite(a0, SLICE(a1, size_t, 0), SLICE(a2, size_t, 0), a3))
	a3 = Mem0[gp + -1920<i64>:word64]
	a0 = 0x11000<64>
	a2 = 77<i64>
	a1 = 1<i64>
	a0 = a0 + -8<i64>
	a0 = SEQ(0<64>, fwrite(a0, SLICE(a1, size_t, 0), SLICE(a2, size_t, 0), a3))
	a3 = Mem0[gp + -1920<i64>:word64]
	a0 = 0x11000<64>
	a2 = 77<i64>
	a1 = 1<i64>
	a0 = a0 + 72<i64>
	a0 = SEQ(0<64>, fwrite(a0, SLICE(a1, size_t, 0), SLICE(a2, size_t, 0), a3))
	a3 = Mem0[gp + -1920<i64>:word64]
	a0 = 0x11000<64>
	a2 = 46<i64>
	a1 = 1<i64>
	a0 = a0 + 152<i64>
	a0 = SEQ(0<64>, fwrite(a0, SLICE(a1, size_t, 0), SLICE(a2, size_t, 0), a3))
	a3 = Mem0[gp + -1920<i64>:word64]
	a0 = 0x11000<64>
	a2 = 72<i64>
	a1 = 1<i64>
	a0 = a0 + 200<i64>
	a0 = SEQ(0<64>, fwrite(a0, SLICE(a1, size_t, 0), SLICE(a2, size_t, 0), a3))
	a3 = Mem0[gp + -1920<i64>:word64]
	a0 = 0x11000<64>
	a2 = 45<i64>
	a1 = 1<i64>
	a0 = a0 + 280<i64>
	a0 = SEQ(0<64>, fwrite(a0, SLICE(a1, size_t, 0), SLICE(a2, size_t, 0), a3))
	a3 = Mem0[gp + -1920<i64>:word64]
	a0 = 0x11000<64>
	a2 = 67<i64>
	a1 = 1<i64>
	a0 = a0 + 328<i64>
	a0 = SEQ(0<64>, fwrite(a0, SLICE(a1, size_t, 0), SLICE(a2, size_t, 0), a3))
	a3 = Mem0[gp + -1920<i64>:word64]
	a0 = 0x11000<64>
	a2 = 64<i64>
	a1 = 1<i64>
	a0 = a0 + 400<i64>
	a0 = SEQ(0<64>, fwrite(a0, SLICE(a1, size_t, 0), SLICE(a2, size_t, 0), a3))
	a3 = Mem0[gp + -1920<i64>:word64]
	a0 = 0x11000<64>
	a2 = 72<i64>
	a1 = 1<i64>
	a0 = a0 + 472<i64>
	a0 = SEQ(0<64>, fwrite(a0, SLICE(a1, size_t, 0), SLICE(a2, size_t, 0), a3))
	a3 = Mem0[gp + -1920<i64>:word64]
	a0 = 0x11000<64>
	a2 = 46<i64>
	a1 = 1<i64>
	a0 = a0 + 552<i64>
	a0 = SEQ(0<64>, fwrite(a0, SLICE(a1, size_t, 0), SLICE(a2, size_t, 0), a3))
	a1 = Mem0[gp + -1920<i64>:word64]
	a0 = 10<i64>
	call fputc (retsize: 0;)
	a3 = Mem0[gp + -1920<i64>:word64]
	a0 = 0x11000<64>
	a2 = 15<i64>
	a1 = 1<i64>
	a0 = a0 + 600<i64>
	a0 = SEQ(0<64>, fwrite(a0, SLICE(a1, size_t, 0), SLICE(a2, size_t, 0), a3))
	a3 = Mem0[gp + -1920<i64>:word64]
	a0 = 0x11000<64>
	a2 = 87<i64>
	a1 = 1<i64>
	a0 = a0 + 616<i64>
	a0 = SEQ(0<64>, fwrite(a0, SLICE(a1, size_t, 0), SLICE(a2, size_t, 0), a3))
	a3 = Mem0[gp + -1920<i64>:word64]
	a0 = 0x11000<64>
	a2 = 60<i64>
	a1 = 1<i64>
	a0 = a0 + 704<i64>
	a0 = SEQ(0<64>, fwrite(a0, SLICE(a1, size_t, 0), SLICE(a2, size_t, 0), a3))
	a3 = Mem0[gp + -1920<i64>:word64]
	a0 = 0x11000<64>
	a2 = 68<i64>
	a1 = 1<i64>
	a0 = a0 + 768<i64>
	a0 = SEQ(0<64>, fwrite(a0, SLICE(a1, size_t, 0), SLICE(a2, size_t, 0), a3))
	a3 = Mem0[gp + -1920<i64>:word64]
	a0 = 0x11000<64>
	a2 = 58<i64>
	a1 = 1<i64>
	a0 = a0 + 840<i64>
	a0 = SEQ(0<64>, fwrite(a0, SLICE(a1, size_t, 0), SLICE(a2, size_t, 0), a3))
	a3 = Mem0[gp + -1920<i64>:word64]
	a0 = 0x11000<64>
	a2 = 57<i64>
	a1 = 1<i64>
	a0 = a0 + 904<i64>
	a0 = SEQ(0<64>, fwrite(a0, SLICE(a1, size_t, 0), SLICE(a2, size_t, 0), a3))
	a3 = Mem0[gp + -1920<i64>:word64]
	ra = Mem0[sp + 8<i64>:word64]
	s0 = Mem0[sp:word64]
	a0 = 0x11000<64>
	a2 = 62<i64>
	a1 = 1<i64>
	a0 = a0 + 968<i64>
	sp = sp + 16<i64>
	a0 = SEQ(0<64>, fwrite(a0, SLICE(a1, size_t, 0), SLICE(a2, size_t, 0), a3))
	return
	// succ:  fn0000000000015FCC_exit
fn0000000000015FCC_exit:


// fn00000000000163B0
// Return size: 0
define fn00000000000163B0
fn00000000000163B0_entry:
	sp = fp
	// succ:  l00000000000163B0
l00000000000163B0:
	sp = sp + -240<i64>
	Mem0[sp + 224<i64>:word64] = s0
	Mem0[sp + 216<i64>:word64] = s1
	Mem0[sp + 208<i64>:word64] = s2
	Mem0[sp + 200<i64>:word64] = s3
	Mem0[sp + 192<i64>:word64] = s4
	Mem0[sp + 184<i64>:word64] = s5
	Mem0[sp + 176<i64>:word64] = s6
	Mem0[sp + 168<i64>:word64] = s7
	Mem0[sp + 160<i64>:word64] = s8
	Mem0[sp + 152<i64>:word64] = s9
	Mem0[sp + 232<i64>:word64] = ra
	a5 = Mem0[gp + -1936<i64>:word64]
	a4 = CONVERT(Mem0[a0:byte], byte, word64)
	s4 = 0x11000<64>
	s0 = 0<i64>
	s2 = a0
	a3 = s4 + 1480<i64>
	a2 = 128<i64>
	a1 = 1<i64>
	a0 = sp + 8<i64>
	s3 = 16<i64>
	v22 = SLICE(s0, word32, 0)
	s0 = CONVERT(v22 + 1<i32>, word32, int64)
	Mem0[sp + 136<i64>:word64] = a5
	s2 = s2 + 1<i64>
	a0 = SEQ(0<32>, __sprintf_chk(a0, SLICE(a1, int32, 0), SLICE(a2, size_t, 0), a3, SLICE(a4, uint32, 0)))
	s1 = sp + 10<i64>
	s6 = 128<i64>
	s5 = 1<i64>
	s9 = 15<i64>
	s7 = 58<i64>
	branch s0 == s3 l000000000001646C
	// succ:  l0000000000016430 l000000000001646C
l0000000000016430:
	a4 = CONVERT(Mem0[s2:byte], byte, word64)
	a3 = s4 + 1480<i64>
	a2 = s6
	a1 = s5
	a0 = s1
	a0 = SEQ(0<32>, __sprintf_chk(a0, SLICE(a1, int32, 0), SLICE(a2, size_t, 0), a3, SLICE(a4, uint32, 0)))
	a5 = s0 & 1<i64>
	a4 = s1 + 2<i64>
	branch a5 == 0<64> l00000000000164B8
	// succ:  l0000000000016454 l00000000000164B8
l0000000000016454:
	branch s0 == s9 l00000000000164C4
	// succ:  l0000000000016458 l00000000000164C4
l0000000000016458:
	Mem0[s1 + 2<i64>:byte] = SLICE(s7, byte, 0)
	s2 = s2 + 1<i64>
	s1 = s1 + 3<i64>
	// succ:  l0000000000016464
l0000000000016464:
	v27 = SLICE(s0, word32, 0)
	s0 = CONVERT(v27 + 1<i32>, word32, int64)
	branch s0 != s3 l0000000000016430
	// succ:  l000000000001646C l0000000000016430
l000000000001646C:
	Mem0[s1:byte] = SLICE(0<64>, byte, 0)
	a0 = sp + 8<i64>
	a0 = __strdup(a0)
	a4 = Mem0[sp + 136<i64>:word64]
	a5 = Mem0[gp + -1936<i64>:word64]
	branch a4 != a5 l00000000000164CC
	// succ:  l0000000000016484 l00000000000164CC
l0000000000016484:
	ra = Mem0[sp + 232<i64>:word64]
	s0 = Mem0[sp + 224<i64>:word64]
	s1 = Mem0[sp + 216<i64>:word64]
	s2 = Mem0[sp + 208<i64>:word64]
	s3 = Mem0[sp + 200<i64>:word64]
	s4 = Mem0[sp + 192<i64>:word64]
	s5 = Mem0[sp + 184<i64>:word64]
	s6 = Mem0[sp + 176<i64>:word64]
	s7 = Mem0[sp + 168<i64>:word64]
	s8 = Mem0[sp + 160<i64>:word64]
	s9 = Mem0[sp + 152<i64>:word64]
	sp = sp + 240<i64>
	return
	// succ:  fn00000000000163B0_exit
l00000000000164B8:
	s1 = a4
	s2 = s2 + 1<i64>
	goto l0000000000016464
	// succ:  l0000000000016464
l00000000000164C4:
	s1 = a4
	goto l000000000001646C
	// succ:  l000000000001646C
l00000000000164CC:
	__stack_chk_fail()
fn00000000000163B0_exit:


// fn00000000000164D0
// Return size: 0
define fn00000000000164D0
fn00000000000164D0_entry:
	sp = fp
	// succ:  l00000000000164D0
l00000000000164D0:
	sp = sp + -32<i64>
	Mem0[sp + 16<i64>:word64] = s0
	s0 = a0
	a0 = 0x11000<64>
	Mem0[sp:word64] = s2
	a0 = a0 + 1488<i64>
	s2 = a1
	a1 = 0<i64>
	Mem0[sp + 24<i64>:word64] = ra
	Mem0[sp + 8<i64>:word64] = s1
	a0 = SEQ(0<32>, open(a0, SLICE(a1, int32, 0)))
	branch a0 < 0<64> l0000000000016544
	// succ:  l0000000000016500 l0000000000016544
l0000000000016500:
	a2 = s2 << 0x20<u32>
	a1 = s0
	a2 = a2 >>u 0x20<u32>
	s1 = a0
	a0 = SEQ(0<64>, read(SLICE(a0, int32, 0), a1, SLICE(a2, size_t, 0)))
	s0 = a0
	a0 = s1
	a0 = SEQ(0<32>, close(SLICE(a0, int32, 0)))
	v14 = SLICE(s0, word32, 0)
	v15 = SLICE(s2, word32, 0)
	a0 = CONVERT(v14 - v15, word32, int64)
	a0 = CONVERT(a0 != 0<64>, bool, word64)
	v16 = 0<32>
	v17 = SLICE(a0, word32, 0)
	a0 = CONVERT(v16 - v17, word32, int64)
	// succ:  l000000000001652C
l000000000001652C:
	ra = Mem0[sp + 24<i64>:word64]
	s0 = Mem0[sp + 16<i64>:word64]
	s1 = Mem0[sp + 8<i64>:word64]
	s2 = Mem0[sp:word64]
	sp = sp + 32<i64>
	return
	// succ:  fn00000000000164D0_exit
l0000000000016544:
	a0 = -1<i64>
	goto l000000000001652C
	// succ:  l000000000001652C
fn00000000000164D0_exit:


// fn000000000001654C
// Return size: 0
define fn000000000001654C
fn000000000001654C_entry:
	sp = fp
	// succ:  l000000000001654C
l000000000001654C:
	sp = sp + -128<i64>
	Mem0[sp + 64<i64>:word64] = s0
	t3 = Mem0[gp + -1936<i64>:word64]
	t1 = sp + 88<i64>
	Mem0[sp + 48<i64>:word64] = s2
	Mem0[sp + 40<i64>:word64] = s3
	s2 = a1
	s3 = a0
	Mem0[sp + 88<i64>:word64] = a3
	a1 = 1<i64>
	a3 = t1
	a0 = sp + 16<i64>
	Mem0[sp + 72<i64>:word64] = ra
	Mem0[sp + 56<i64>:word64] = s1
	Mem0[sp + 96<i64>:word64] = a4
	Mem0[sp + 104<i64>:word64] = a5
	Mem0[sp + 112<i64>:word64] = a6
	Mem0[sp + 120<i64>:word64] = a7
	Mem0[sp + 24<i64>:word64] = t3
	Mem0[sp + 16<i64>:word64] = 0<64>
	Mem0[sp + 8<i64>:word64] = t1
	call __vasprintf_chk (retsize: 0;)
	branch a0 < 0<64> l00000000000165D8
	// succ:  l00000000000165A8 l00000000000165D8
l00000000000165A8:
	a1 = Mem0[gp + -1912<i64>:word64]
	a0 = s2
	a0 = SEQ(0<32>, fputs(a0, a1))
	a5 = CONVERT(Mem0[gp + -2032<i64>:int32], int32, int64)
	branch a5 != 0<64> l000000000001661C
	// succ:  l00000000000165BC l000000000001661C
l00000000000165BC:
	a1 = Mem0[gp + -1912<i64>:word64]
	a0 = Mem0[sp + 16<i64>:word64]
	a0 = SEQ(0<32>, fputs(a0, a1))
	a5 = CONVERT(Mem0[gp + -2032<i64>:int32], int32, int64)
	branch a5 != 0<64> l0000000000016600
	// succ:  l00000000000165D0 l0000000000016600
l00000000000165D0:
	a0 = Mem0[sp + 16<i64>:word64]
	free(a0)
	// succ:  l00000000000165D8
l00000000000165D8:
	a4 = Mem0[sp + 24<i64>:word64]
	a5 = Mem0[gp + -1936<i64>:word64]
	branch a4 != a5 l000000000001662C
	// succ:  l00000000000165E4 l000000000001662C
l00000000000165E4:
	ra = Mem0[sp + 72<i64>:word64]
	s0 = Mem0[sp + 64<i64>:word64]
	s1 = Mem0[sp + 56<i64>:word64]
	s2 = Mem0[sp + 48<i64>:word64]
	s3 = Mem0[sp + 40<i64>:word64]
	sp = sp + 128<i64>
	return
	// succ:  fn000000000001654C_exit
l0000000000016600:
	a3 = Mem0[gp + -1912<i64>:word64]
	a0 = 0x11000<64>
	a2 = 4<i64>
	a1 = 1<i64>
	a0 = a0 + 1504<i64>
	a0 = SEQ(0<64>, fwrite(a0, SLICE(a1, size_t, 0), SLICE(a2, size_t, 0), a3))
	goto l00000000000165D0
	// succ:  l00000000000165D0
l000000000001661C:
	a1 = Mem0[gp + -1912<i64>:word64]
	a0 = s3
	a0 = SEQ(0<32>, fputs(a0, a1))
	goto l00000000000165BC
	// succ:  l00000000000165BC
l000000000001662C:
	__stack_chk_fail()
fn000000000001654C_exit:


// fn0000000000016630
// Return size: 0
define fn0000000000016630
fn0000000000016630_entry:
	sp = fp
	// succ:  l0000000000016630
l0000000000016630:
	sp = sp + -64<i64>
	Mem0[sp + 48<i64>:word64] = s0
	a5 = Mem0[gp + -1936<i64>:word64]
	Mem0[sp + 56<i64>:word64] = ra
	Mem0[sp + 40<i64>:word64] = s1
	Mem0[sp + 8<i64>:word64] = a5
	Mem0[sp + 32<i64>:word64] = s2
	Mem0[sp + 24<i64>:word64] = s3
	s2 = a0
	s3 = a1
	Mem0[sp:word64] = 0<64>
	a0 = __errno_location()
	Mem0[a0:word32] = SLICE(0<64>, word32, 0)
	s1 = a0
	a2 = 0<i64>
	a1 = sp
	a0 = s2
	a0 = SEQ(0<32>, strtol(a0))
	a5 = Mem0[sp:word64]
	branch a5 == 0<64> l000000000001668C
	// succ:  l0000000000016680 l000000000001668C
l0000000000016680:
	branch s2 == a5 l000000000001668C
	// succ:  l0000000000016684 l000000000001668C
l0000000000016684:
	a5 = CONVERT(Mem0[a5:byte], byte, word64)
	branch a5 == 0<64> l00000000000166C4
	// succ:  l000000000001668C l00000000000166C4
l000000000001668C:
	a5 = CONVERT(Mem0[s1:int32], int32, int64)
	// succ:  l0000000000016690
l0000000000016690:
	branch 0<64> >= a5 l00000000000166E8
	// succ:  l0000000000016694 l00000000000166E8
l0000000000016694:
	v15 = 0<32>
	v16 = SLICE(a5, word32, 0)
	a5 = CONVERT(v15 - v16, word32, int64)
	// succ:  l0000000000016698
l0000000000016698:
	a3 = Mem0[sp + 8<i64>:word64]
	a4 = Mem0[gp + -1936<i64>:word64]
	a0 = a5
	branch a3 != a4 l00000000000166F0
	// succ:  l00000000000166A8 l00000000000166F0
l00000000000166A8:
	ra = Mem0[sp + 56<i64>:word64]
	s0 = Mem0[sp + 48<i64>:word64]
	s1 = Mem0[sp + 40<i64>:word64]
	s2 = Mem0[sp + 32<i64>:word64]
	s3 = Mem0[sp + 24<i64>:word64]
	sp = sp + 64<i64>
	return
	// succ:  fn0000000000016630_exit
l00000000000166C4:
	a5 = CONVERT(Mem0[s1:int32], int32, int64)
	branch a5 != 0<64> l0000000000016690
	// succ:  l00000000000166CC l0000000000016690
l00000000000166CC:
	v19 = SLICE(a0, word32, 0)
	a4 = CONVERT(v19, word32, int64)
	a3 = a4
	branch a0 != a3 l00000000000166E0
	// succ:  l00000000000166D8 l00000000000166E0
l00000000000166D8:
	Mem0[s3:word32] = SLICE(a4, word32, 0)
	goto l0000000000016698
	// succ:  l0000000000016698
l00000000000166E0:
	a5 = -34<i64>
	goto l0000000000016698
	// succ:  l0000000000016698
l00000000000166E8:
	a5 = -22<i64>
	goto l0000000000016698
	// succ:  l0000000000016698
l00000000000166F0:
	__stack_chk_fail()
fn0000000000016630_exit:


// fn00000000000166F4
// Return size: 0
define fn00000000000166F4
fn00000000000166F4_entry:
	sp = fp
	// succ:  l00000000000166F4
l00000000000166F4:
	sp = sp + -64<i64>
	Mem0[sp + 32<i64>:word64] = s2
	a5 = Mem0[gp + -1936<i64>:word64]
	Mem0[sp + 48<i64>:word64] = s0
	s0 = CONVERT(Mem0[a0:int32], int32, int64)
	Mem0[sp + 40<i64>:word64] = s1
	Mem0[sp + 24<i64>:word64] = s3
	Mem0[sp + 16<i64>:word64] = s4
	Mem0[sp + 56<i64>:word64] = ra
	Mem0[sp + 8<i64>:word64] = a5
	s1 = a0
	s3 = a1
	s4 = a2
	branch s0 != 0<64> l00000000000167C8
	// succ:  l000000000001672C l00000000000167C8
l000000000001672C:
	a1 = 46<i64>
	a0 = s3
	a0 = strchr(a0, SLICE(a1, char, 0))
	branch a0 == 0<64> l00000000000167C8
	// succ:  l000000000001673C l00000000000167C8
l000000000001673C:
	a2 = sp
	a1 = s3
	a0 = 2<i64>
	a0 = SEQ(0<32>, inet_pton(SLICE(a0, int32, 0), a1, a2))
	branch a0 == 0<64> l000000000001678C
	// succ:  l0000000000016750 l000000000001678C
l0000000000016750:
	a0 = CONVERT(Mem0[sp:int32], int32, int64)
	call fn00000000000182B4 (retsize: 0;)
	branch a0 == 0<64> l0000000000016790
	// succ:  l000000000001675C l0000000000016790
l000000000001675C:
	a5 = a0 & 1<i64>
	branch a5 != 0<64> l0000000000016778
	// succ:  l0000000000016764 l0000000000016778
l0000000000016764:
	a5 = CONVERT(SLICE(a0, word32, 0) >>u 1<i32>, word32, int64)
	branch a5 == 0<64> l0000000000016790
	// succ:  l000000000001676C l0000000000016790
l000000000001676C:
	a4 = a5 & 1<i64>
	branch a4 == 0<64> l0000000000016820
	// succ:  l0000000000016774 l0000000000016820
l0000000000016774:
	a0 = a5
	// succ:  l0000000000016778
l0000000000016778:
	a0 = CONVERT(SLICE(a0, word32, 0) >>u 1<i32>, word32, int64)
	v19 = SLICE(s0, word32, 0)
	s0 = CONVERT(v19 + 1<i32>, word32, int64)
	branch a0 == 0<64> l0000000000016790
	// succ:  l0000000000016784 l0000000000016790
l0000000000016784:
	a5 = a0 & 1<i64>
	branch a5 != 0<64> l0000000000016778
	// succ:  l000000000001678C l0000000000016778
l000000000001678C:
	s0 = -1<i64>
	// succ:  l0000000000016790
l0000000000016790:
	Mem0[sp:word32] = SLICE(s0, word32, 0)
	// succ:  l0000000000016794
l0000000000016794:
	a5 = CONVERT(Mem0[sp:int32], int32, int64)
	branch s4 == 0<64> l00000000000167DC
	// succ:  l000000000001679C l00000000000167DC
l000000000001679C:
	a4 = 32<i64>
	a0 = a5
	branch a4 >= a5 l00000000000167DC
	// succ:  l00000000000167A8 l00000000000167DC
l00000000000167A8:
	a4 = CONVERT(Mem0[s1:int32], int32, int64)
	branch a4 != 0<64> l00000000000167B8
	// succ:  l00000000000167B0 l00000000000167B8
l00000000000167B0:
	a4 = 1<i64>
	Mem0[s1:word32] = SLICE(a4, word32, 0)
	// succ:  l00000000000167B8
l00000000000167B8:
	a4 = 128<i64>
	branch a4 >= a5 l00000000000167F4
	// succ:  l00000000000167C0 l00000000000167F4
l00000000000167C0:
	a0 = -1<i64>
	goto l00000000000167F4
	// succ:  l00000000000167F4
l00000000000167C8:
	a1 = sp
	a0 = s3
	call fn0000000000016630 (retsize: 0;)
	branch a0 == 0<64> l0000000000016794
	// succ:  l00000000000167D8 l0000000000016794
l00000000000167D8:
	goto l00000000000167C0
	// succ:  l00000000000167C0
l00000000000167DC:
	a0 = a5
	branch a5 < 0<64> l00000000000167C0
	// succ:  l00000000000167E4 l00000000000167C0
l00000000000167E4:
	a4 = CONVERT(Mem0[s1:int32], int32, int64)
	branch a4 != 0<64> l00000000000167B8
	// succ:  l00000000000167EC l00000000000167B8
l00000000000167EC:
	a5 = 32<i64>
	branch a5 < a0 l00000000000167C0
	// succ:  l00000000000167F4 l00000000000167C0
l00000000000167F4:
	a4 = Mem0[sp + 8<i64>:word64]
	a5 = Mem0[gp + -1936<i64>:word64]
	branch a4 != a5 l000000000001682C
	// succ:  l0000000000016800 l000000000001682C
l0000000000016800:
	ra = Mem0[sp + 56<i64>:word64]
	s0 = Mem0[sp + 48<i64>:word64]
	s1 = Mem0[sp + 40<i64>:word64]
	s2 = Mem0[sp + 32<i64>:word64]
	s3 = Mem0[sp + 24<i64>:word64]
	s4 = Mem0[sp + 16<i64>:word64]
	sp = sp + 64<i64>
	return
	// succ:  fn00000000000166F4_exit
l0000000000016820:
	a0 = CONVERT(SLICE(a0, word32, 0) >>u 2<i32>, word32, int64)
	branch a0 != 0<64> l000000000001675C
	// succ:  l0000000000016828 l000000000001675C
l0000000000016828:
	goto l0000000000016790
	// succ:  l0000000000016790
l000000000001682C:
	__stack_chk_fail()
fn00000000000166F4_exit:


// fn0000000000016830
// Return size: 0
define fn0000000000016830
fn0000000000016830_entry:
	sp = fp
	// succ:  l0000000000016830
l0000000000016830:
	sp = sp + -32<i64>
	Mem0[sp + 16<i64>:word64] = s0
	a5 = Mem0[gp + -1936<i64>:word64]
	Mem0[sp + 24<i64>:word64] = ra
	Mem0[sp:word32] = SLICE(0<64>, word32, 0)
	Mem0[sp + 8<i64>:word64] = a5
	branch a0 == 0<64> l0000000000016864
	// succ:  l000000000001684C l0000000000016864
l000000000001684C:
	a5 = 32<i64>
	v9 = SLICE(a5, word32, 0)
	v10 = SLICE(a0, word32, 0)
	a0 = CONVERT(v9 - v10, word32, int64)
	a5 = -1<i64>
	a0 = CONVERT(SLICE(a5, word32, 0) << a0, word32, int64)
	call fn00000000000182B4 (retsize: 0;)
	Mem0[sp:word32] = SLICE(a0, word32, 0)
	// succ:  l0000000000016864
l0000000000016864:
	a4 = Mem0[sp + 8<i64>:word64]
	a5 = Mem0[gp + -1936<i64>:word64]
	a0 = CONVERT(Mem0[sp:int32], int32, int64)
	branch a4 != a5 l0000000000016884
	// succ:  l0000000000016874 l0000000000016884
l0000000000016874:
	ra = Mem0[sp + 24<i64>:word64]
	s0 = Mem0[sp + 16<i64>:word64]
	sp = sp + 32<i64>
	return
	// succ:  fn0000000000016830_exit
l0000000000016884:
	__stack_chk_fail()
fn0000000000016830_exit:


// fn00000000000168B8
// Return size: 0
define fn00000000000168B8
fn00000000000168B8_entry:
	sp = fp
	// succ:  l00000000000168B8
l00000000000168B8:
	sp = sp + -16<i64>
	Mem0[sp:word64] = s0
	s0 = a0
	a0 = a1
	Mem0[sp + 8<i64>:word64] = ra
	call fn0000000000016830 (retsize: 0;)
	ra = Mem0[sp + 8<i64>:word64]
	a0 = s0 & a0
	s0 = Mem0[sp:word64]
	sp = sp + 16<i64>
	return
	// succ:  fn00000000000168B8_exit
fn00000000000168B8_exit:


// fn00000000000168E4
// Return size: 0
define fn00000000000168E4
fn00000000000168E4_entry:
	sp = fp
	// succ:  l00000000000168E4
l00000000000168E4:
	sp = sp + -96<i64>
	Mem0[sp + 80<i64>:word64] = s0
	a4 = Mem0[gp + -1936<i64>:word64]
	Mem0[sp + 88<i64>:word64] = ra
	Mem0[sp + 72<i64>:word64] = s1
	a5 = 2<i64>
	Mem0[sp + 56<i64>:word64] = a4
	a7 = a0
	branch a0 == a5 l0000000000016984
	// succ:  l0000000000016908 l0000000000016984
l0000000000016908:
	a5 = 10<i64>
	branch a0 == a5 l0000000000016934
	// succ:  l0000000000016910 l0000000000016934
l0000000000016910:
	a0 = 0<i64>
	// succ:  l0000000000016914
l0000000000016914:
	a4 = Mem0[sp + 56<i64>:word64]
	a5 = Mem0[gp + -1936<i64>:word64]
	branch a4 != a5 l00000000000169D4
	// succ:  l0000000000016920 l00000000000169D4
l0000000000016920:
	ra = Mem0[sp + 88<i64>:word64]
	s0 = Mem0[sp + 80<i64>:word64]
	s1 = Mem0[sp + 72<i64>:word64]
	sp = sp + 96<i64>
	return
	// succ:  fn00000000000168E4_exit
l0000000000016934:
	Mem0[sp + 24<i64>:word64] = 0<64>
	a2 = 16<i64>
	a0 = sp + 32<i64>
	Mem0[sp + 32<i64>:word64] = 0<64>
	Mem0[sp + 40<i64>:word64] = 0<64>
	Mem0[sp + 48<i64>:word32] = SLICE(0<64>, word32, 0)
	Mem0[sp + 24<i64>:word16] = SLICE(a7, word16, 0)
	a0 = memcpy(a0, a1, SLICE(a2, size_t, 0))
	a6 = 0<i64>
	a5 = 0<i64>
	a4 = 0<i64>
	a3 = 1025<i64>
	a2 = gp + -1896<i64>
	a1 = 28<i64>
	a0 = sp + 24<i64>
	a0 = SEQ(0<32>, getnameinfo(a0, SLICE(a1, socklen_t, 0), a2, SLICE(a3, socklen_t, 0), a4, SLICE(a5, socklen_t, 0), SLICE(a6, int32, 0)))
	// succ:  l0000000000016974
l0000000000016974:
	branch a0 != 0<64> l0000000000016910
	// succ:  l0000000000016978 l0000000000016910
l0000000000016978:
	a0 = gp + -1896<i64>
	a0 = __strdup(a0)
	goto l0000000000016914
	// succ:  l0000000000016914
l0000000000016984:
	t5 = CONVERT(Mem0[a1:byte], byte, word64)
	t4 = CONVERT(Mem0[a1 + 1<i64>:byte], byte, word64)
	t3 = CONVERT(Mem0[a1 + 2<i64>:byte], byte, word64)
	t1 = CONVERT(Mem0[a1 + 3<i64>:byte], byte, word64)
	Mem0[sp + 8<i64>:word64] = 0<64>
	a6 = 0<i64>
	a5 = 0<i64>
	a4 = 0<i64>
	a3 = 1025<i64>
	a2 = gp + -1896<i64>
	a1 = 16<i64>
	a0 = sp + 8<i64>
	Mem0[sp + 16<i64>:word64] = 0<64>
	Mem0[sp + 8<i64>:word16] = SLICE(a7, word16, 0)
	Mem0[sp + 12<i64>:byte] = SLICE(t5, byte, 0)
	Mem0[sp + 13<i64>:byte] = SLICE(t4, byte, 0)
	Mem0[sp + 14<i64>:byte] = SLICE(t3, byte, 0)
	Mem0[sp + 15<i64>:byte] = SLICE(t1, byte, 0)
	a0 = SEQ(0<32>, getnameinfo(a0, SLICE(a1, socklen_t, 0), a2, SLICE(a3, socklen_t, 0), a4, SLICE(a5, socklen_t, 0), SLICE(a6, int32, 0)))
	goto l0000000000016974
	// succ:  l0000000000016974
l00000000000169D4:
	__stack_chk_fail()
fn00000000000168E4_exit:


// fn00000000000169D8
// Return size: 0
define fn00000000000169D8
fn00000000000169D8_entry:
	sp = fp
	// succ:  l00000000000169D8
l00000000000169D8:
	sp = sp + -112<i64>
	Mem0[sp + 64<i64>:word64] = s4
	a5 = Mem0[gp + -1936<i64>:word64]
	a4 = a1
	Mem0[sp + 8<i64>:word64] = 0<64>
	Mem0[sp + 12<i64>:word32] = SLICE(a0, word32, 0)
	a3 = sp
	a2 = sp + 8<i64>
	a1 = 0<i64>
	a0 = a4
	Mem0[sp + 104<i64>:word64] = ra
	Mem0[sp + 96<i64>:word64] = s0
	Mem0[sp + 88<i64>:word64] = s1
	Mem0[sp + 80<i64>:word64] = s2
	Mem0[sp + 72<i64>:word64] = s3
	Mem0[sp + 56<i64>:word64] = a5
	Mem0[sp + 16<i64>:word64] = 0<64>
	Mem0[sp + 24<i64>:word64] = 0<64>
	Mem0[sp + 32<i64>:word64] = 0<64>
	Mem0[sp + 40<i64>:word64] = 0<64>
	Mem0[sp + 48<i64>:word64] = 0<64>
	a0 = SEQ(0<32>, getaddrinfo(a0, a1, a2, a3))
	branch a0 != 0<64> l0000000000016AD8
	// succ:  l0000000000016A34 l0000000000016AD8
l0000000000016A34:
	s0 = Mem0[sp:word64]
	branch s0 == 0<64> l0000000000016AA0
	// succ:  l0000000000016A3C l0000000000016AA0
l0000000000016A3C:
	s1 = gp + -864<i64>
	s3 = 2<i64>
	s2 = 64<i64>
	goto l0000000000016A68
	// succ:  l0000000000016A68
l0000000000016A4C:
	a1 = a1 + 8<i64>
	a3 = s2
	a2 = s1
	a0 = inet_ntop(SLICE(a0, int32, 0), a1, a2, SLICE(a3, socklen_t, 0))
	branch a0 != 0<64> l0000000000016A88
	// succ:  l0000000000016A60 l0000000000016A88
l0000000000016A60:
	s0 = Mem0[s0 + 40<i64>:word64]
	branch s0 == 0<64> l0000000000016A9C
	// succ:  l0000000000016A68 l0000000000016A9C
l0000000000016A68:
	a0 = CONVERT(Mem0[s0 + 4<i64>:int32], int32, int64)
	a1 = Mem0[s0 + 24<i64>:word64]
	branch a0 != s3 l0000000000016A4C
	// succ:  l0000000000016A74 l0000000000016A4C
l0000000000016A74:
	a1 = a1 + 4<i64>
	a3 = s2
	a2 = s1
	a0 = inet_ntop(SLICE(a0, int32, 0), a1, a2, SLICE(a3, socklen_t, 0))
	branch a0 == 0<64> l0000000000016A60
	// succ:  l0000000000016A88 l0000000000016A60
l0000000000016A88:
	a0 = Mem0[sp:word64]
	freeaddrinfo(a0)
	a0 = s1
	a0 = __strdup(a0)
	goto l0000000000016AAC
	// succ:  l0000000000016AAC
l0000000000016A9C:
	s0 = Mem0[sp:word64]
	// succ:  l0000000000016AA0
l0000000000016AA0:
	a0 = s0
	freeaddrinfo(a0)
	a0 = 0<i64>
	// succ:  l0000000000016AAC
l0000000000016AAC:
	a4 = Mem0[sp + 56<i64>:word64]
	a5 = Mem0[gp + -1936<i64>:word64]
	branch a4 != a5 l0000000000016AE0
	// succ:  l0000000000016AB8 l0000000000016AE0
l0000000000016AB8:
	ra = Mem0[sp + 104<i64>:word64]
	s0 = Mem0[sp + 96<i64>:word64]
	s1 = Mem0[sp + 88<i64>:word64]
	s2 = Mem0[sp + 80<i64>:word64]
	s3 = Mem0[sp + 72<i64>:word64]
	s4 = Mem0[sp + 64<i64>:word64]
	sp = sp + 112<i64>
	return
	// succ:  fn00000000000169D8_exit
l0000000000016AD8:
	a0 = 0<i64>
	goto l0000000000016AAC
	// succ:  l0000000000016AAC
l0000000000016AE0:
	__stack_chk_fail()
fn00000000000169D8_exit:


// fn0000000000016B38
// Return size: 0
define fn0000000000016B38
fn0000000000016B38_entry:
	sp = fp
	// succ:  l0000000000016B38
l0000000000016B38:
	a5 = 127<i64>
	branch a5 <u a0 l0000000000016B5C
	// succ:  l0000000000016B40 l0000000000016B5C
l0000000000016B40:
	a0 = a0 << 0x20<u32>
	a5 = 0x10000<64>
	a5 = a5 + 1152<i64>
	a0 = a0 >>u 0x1D<u32>
	a0 = a5 + a0
	a0 = Mem0[a0:word64]
	return
	// succ:  fn0000000000016B38_exit
l0000000000016B5C:
	a0 = 0x11000<64>
	a0 = a0 + 464<i64>
	return
	// succ:  fn0000000000016B38_exit
fn0000000000016B38_exit:


// fn0000000000016B68
// Return size: 0
define fn0000000000016B68
fn0000000000016B68_entry:
	sp = fp
	// succ:  l0000000000016B68
l0000000000016B68:
	sp = sp + -16<i64>
	Mem0[sp + 8<i64>:word64] = ra
	call fn00000000000182B4 (retsize: 0;)
	a5 = CONVERT(SLICE(a0, word32, 0) >>u 24<i32>, word32, int64)
	branch a5 == 0<64> l0000000000016BD8
	// succ:  l0000000000016B7C l0000000000016BD8
l0000000000016B7C:
	a4 = 10<i64>
	branch a5 == a4 l0000000000016C2C
	// succ:  l0000000000016B84 l0000000000016C2C
l0000000000016B84:
	a3 = 100<i64>
	a4 = CONVERT(SLICE(a0, word32, 0) >>u 16<i32>, word32, int64)
	branch a5 == a3 l0000000000016C58
	// succ:  l0000000000016B90 l0000000000016C58
l0000000000016B90:
	a3 = 127<i64>
	branch a5 == a3 l0000000000016C70
	// succ:  l0000000000016B98 l0000000000016C70
l0000000000016B98:
	a2 = CONVERT(SLICE(a0, word32, 0) >>u 8<i32>, word32, int64)
	a1 = 169<i64>
	a3 = a4 & 255<i64>
	a6 = a2 & 255<i64>
	branch a5 == a1 l0000000000016C44
	// succ:  l0000000000016BAC l0000000000016C44
l0000000000016BAC:
	a1 = 172<i64>
	branch a5 != a1 l0000000000016BF0
	// succ:  l0000000000016BB4 l0000000000016BF0
l0000000000016BB4:
	a4 = a4 & 240<i64>
	a3 = 16<i64>
	branch a4 == a3 l0000000000016C2C
	// succ:  l0000000000016BC0 l0000000000016C2C
l0000000000016BC0:
	v12 = SLICE(a5, word32, 0)
	a4 = CONVERT(v12 - 224<i32>, word32, int64)
	a3 = 15<i64>
	branch a3 <u a4 l0000000000016CB8
	// succ:  l0000000000016BCC l0000000000016CB8
l0000000000016BCC:
	a4 = 0x11000<64>
	a4 = a4 + 1864<i64>
	goto l0000000000016BE0
	// succ:  l0000000000016BE0
l0000000000016BD8:
	a4 = 0x11000<64>
	a4 = a4 + 1512<i64>
	// succ:  l0000000000016BE0
l0000000000016BE0:
	ra = Mem0[sp + 8<i64>:word64]
	a0 = a4
	sp = sp + 16<i64>
	return
	// succ:  fn0000000000016B68_exit
l0000000000016BF0:
	a1 = 192<i64>
	branch a5 != a1 l0000000000016C7C
	// succ:  l0000000000016BF8 l0000000000016C7C
l0000000000016BF8:
	a4 = a4 | a2
	a4 = a4 & 255<i64>
	branch a4 == 0<64> l0000000000016CD0
	// succ:  l0000000000016C04 l0000000000016CD0
l0000000000016C04:
	a4 = 2<i64>
	branch a3 == a4 l0000000000016CDC
	// succ:  l0000000000016C0C l0000000000016CDC
l0000000000016C0C:
	a4 = 51<i64>
	branch a3 == a4 l0000000000016C9C
	// succ:  l0000000000016C14 l0000000000016C9C
l0000000000016C14:
	a4 = 88<i64>
	branch a3 == a4 l0000000000016CB0
	// succ:  l0000000000016C1C l0000000000016CB0
l0000000000016C1C:
	a4 = 52<i64>
	branch a3 == a4 l0000000000016CEC
	// succ:  l0000000000016C24 l0000000000016CEC
l0000000000016C24:
	a4 = 168<i64>
	branch a3 != a4 l0000000000016BC0
	// succ:  l0000000000016C2C l0000000000016BC0
l0000000000016C2C:
	ra = Mem0[sp + 8<i64>:word64]
	a4 = 0x11000<64>
	a4 = a4 + 1544<i64>
	a0 = a4
	sp = sp + 16<i64>
	return
	// succ:  fn0000000000016B68_exit
l0000000000016C44:
	a4 = 254<i64>
	branch a3 != a4 l0000000000016BC0
	// succ:  l0000000000016C4C l0000000000016BC0
l0000000000016C4C:
	a4 = 0x11000<64>
	a4 = a4 + 1600<i64>
	goto l0000000000016BE0
	// succ:  l0000000000016BE0
l0000000000016C58:
	a4 = a4 & 192<i64>
	a3 = 64<i64>
	branch a4 != a3 l0000000000016BC0
	// succ:  l0000000000016C64 l0000000000016BC0
l0000000000016C64:
	a4 = 0x11000<64>
	a4 = a4 + 1560<i64>
	goto l0000000000016BE0
	// succ:  l0000000000016BE0
l0000000000016C70:
	a4 = 0x11000<64>
	a4 = a4 + 1584<i64>
	goto l0000000000016BE0
	// succ:  l0000000000016BE0
l0000000000016C7C:
	a2 = 203<i64>
	branch a5 != a2 l0000000000016D18
	// succ:  l0000000000016C84 l0000000000016D18
l0000000000016C84:
	branch a3 != 0<64> l0000000000016BC0
	// succ:  l0000000000016C88 l0000000000016BC0
l0000000000016C88:
	a4 = 113<i64>
	branch a6 != a4 l0000000000016BC0
	// succ:  l0000000000016C90 l0000000000016BC0
l0000000000016C90:
	a4 = 0x11000<64>
	a4 = a4 + 1728<i64>
	goto l0000000000016BE0
	// succ:  l0000000000016BE0
l0000000000016C9C:
	a4 = 100<i64>
	branch a6 != a4 l0000000000016BC0
	// succ:  l0000000000016CA4 l0000000000016BC0
l0000000000016CA4:
	a4 = 0x11000<64>
	a4 = a4 + 1696<i64>
	goto l0000000000016BE0
	// succ:  l0000000000016BE0
l0000000000016CB0:
	a4 = 99<i64>
	branch a6 == a4 l0000000000016D00
	// succ:  l0000000000016CB8 l0000000000016D00
l0000000000016CB8:
	a5 = a5 & 240<i64>
	a4 = 240<i64>
	branch a5 == a4 l0000000000016D0C
	// succ:  l0000000000016CC4 l0000000000016D0C
l0000000000016CC4:
	a4 = 0x11000<64>
	a4 = a4 + 1616<i64>
	goto l0000000000016BE0
	// succ:  l0000000000016BE0
l0000000000016CD0:
	a4 = 0x11000<64>
	a4 = a4 + 1632<i64>
	goto l0000000000016BE0
	// succ:  l0000000000016BE0
l0000000000016CDC:
	branch a6 != 0<64> l0000000000016BC0
	// succ:  l0000000000016CE0 l0000000000016BC0
l0000000000016CE0:
	a4 = 0x11000<64>
	a4 = a4 + 1664<i64>
	goto l0000000000016BE0
	// succ:  l0000000000016BE0
l0000000000016CEC:
	a4 = 193<i64>
	branch a6 != a4 l0000000000016BC0
	// succ:  l0000000000016CF4 l0000000000016BC0
l0000000000016CF4:
	a4 = 0x11000<64>
	a4 = a4 + 1800<i64>
	goto l0000000000016BE0
	// succ:  l0000000000016BE0
l0000000000016D00:
	a4 = 0x11000<64>
	a4 = a4 + 1760<i64>
	goto l0000000000016BE0
	// succ:  l0000000000016BE0
l0000000000016D0C:
	a4 = 0x11000<64>
	a4 = a4 + 1808<i64>
	goto l0000000000016BE0
	// succ:  l0000000000016BE0
l0000000000016D18:
	a2 = 255<i64>
	branch a5 != a2 l0000000000016D4C
	// succ:  l0000000000016D20 l0000000000016D4C
l0000000000016D20:
	a4 = 0x11000<64>
	a4 = a4 + 1808<i64>
	branch a3 != a5 l0000000000016BE0
	// succ:  l0000000000016D2C l0000000000016BE0
l0000000000016D2C:
	a4 = 0x11000<64>
	a4 = a4 + 1808<i64>
	branch a6 != a2 l0000000000016BE0
	// succ:  l0000000000016D38 l0000000000016BE0
l0000000000016D38:
	a0 = a0 & a2
	branch a0 != a6 l0000000000016BE0
	// succ:  l0000000000016D40 l0000000000016BE0
l0000000000016D40:
	a4 = 0x11000<64>
	a4 = a4 + 1824<i64>
	goto l0000000000016BE0
	// succ:  l0000000000016BE0
l0000000000016D4C:
	a3 = 198<i64>
	branch a5 != a3 l0000000000016BC0
	// succ:  l0000000000016D54 l0000000000016BC0
l0000000000016D54:
	a5 = a4 & 254<i64>
	a3 = 18<i64>
	a4 = 0x11000<64>
	a4 = a4 + 1616<i64>
	branch a5 != a3 l0000000000016BE0
	// succ:  l0000000000016D68 l0000000000016BE0
l0000000000016D68:
	a4 = 0x11000<64>
	a4 = a4 + 1848<i64>
	goto l0000000000016BE0
	// succ:  l0000000000016BE0
fn0000000000016B68_exit:


// fn0000000000016D74
// Return size: 0
define fn0000000000016D74
fn0000000000016D74_entry:
	sp = fp
	// succ:  l0000000000016D74
l0000000000016D74:
	sp = sp + -448<i64>
	Mem0[sp + 376<i64>:word64] = s7
	a5 = Mem0[gp + -1936<i64>:word64]
	Mem0[sp + 384<i64>:word64] = s6
	s6 = a2
	Mem0[sp + 424<i64>:word64] = s1
	Mem0[sp + 392<i64>:word64] = s5
	s1 = a0
	a2 = 200<i64>
	s5 = a1
	a0 = s6
	a1 = 0<i64>
	Mem0[sp + 368<i64>:word64] = s8
	Mem0[sp + 440<i64>:word64] = ra
	Mem0[sp + 432<i64>:word64] = s0
	Mem0[sp + 416<i64>:word64] = s2
	Mem0[sp + 408<i64>:word64] = s3
	Mem0[sp + 400<i64>:word64] = s4
	s8 = a3
	Mem0[sp + 360<i64>:word64] = a5
	a0 = memset(a0, SLICE(a1, int32, 0), SLICE(a2, size_t, 0))
	a2 = sp + 8<i64>
	a1 = s1
	a0 = 2<i64>
	a0 = SEQ(0<32>, inet_pton(SLICE(a0, int32, 0), a1, a2))
	branch 0<64> >= a0 l0000000000016E60
	// succ:  l0000000000016DDC l0000000000016E60
l0000000000016DDC:
	branch s5 < 0<64> l0000000000016E88
	// succ:  l0000000000016DE0 l0000000000016E88
l0000000000016DE0:
	Mem0[sp + 48<i64>:word64] = s1
	a0 = s1
	s0 = 3<i64>
	s2 = 46<i64>
	// succ:  l0000000000016DF0
l0000000000016DF0:
	a1 = s2
	a0 = strchr(a0, SLICE(a1, char, 0))
	Mem0[sp + 48<i64>:word64] = a0
	branch a0 == 0<64> l0000000000017194
	// succ:  l0000000000016E00 l0000000000017194
l0000000000016E00:
	a0 = a0 + 1<i64>
	Mem0[sp + 48<i64>:word64] = a0
	v23 = SLICE(s0, word32, 0)
	s0 = CONVERT(v23 - 1<i32>, word32, int64)
	branch s0 != 0<64> l0000000000016DF0
	// succ:  l0000000000016E10 l0000000000016DF0
l0000000000016E10:
	a5 = 32<i64>
	branch a5 >= s5 l0000000000016EBC
	// succ:  l0000000000016E18 l0000000000016EBC
l0000000000016E18:
	a5 = CONVERT(Mem0[gp + -2028<i64>:int32], int32, int64)
	branch a5 == 0<64> l0000000000017054
	// succ:  l0000000000016E20 l0000000000017054
l0000000000016E20:
	a0 = -1<i64>
	// succ:  l0000000000016E24
l0000000000016E24:
	a4 = Mem0[sp + 360<i64>:word64]
	a5 = Mem0[gp + -1936<i64>:word64]
	branch a4 != a5 l00000000000172D8
	// succ:  l0000000000016E30 l00000000000172D8
l0000000000016E30:
	ra = Mem0[sp + 440<i64>:word64]
	s0 = Mem0[sp + 432<i64>:word64]
	s1 = Mem0[sp + 424<i64>:word64]
	s2 = Mem0[sp + 416<i64>:word64]
	s3 = Mem0[sp + 408<i64>:word64]
	s4 = Mem0[sp + 400<i64>:word64]
	s5 = Mem0[sp + 392<i64>:word64]
	s6 = Mem0[sp + 384<i64>:word64]
	s7 = Mem0[sp + 376<i64>:word64]
	s8 = Mem0[sp + 368<i64>:word64]
	sp = sp + 448<i64>
	return
	// succ:  fn0000000000016D74_exit
l0000000000016E60:
	a5 = CONVERT(Mem0[gp + -2028<i64>:int32], int32, int64)
	branch a5 != 0<64> l0000000000016E20
	// succ:  l0000000000016E68 l0000000000016E20
l0000000000016E68:
	a0 = Mem0[gp + -1920<i64>:word64]
	a2 = 0x11000<64>
	a3 = s1
	a2 = a2 + 1928<i64>
	a1 = 1<i64>
	a0 = SEQ(0<32>, __fprintf_chk(a0, SLICE(a1, int32, 0), a2, a3))
	a0 = -1<i64>
	goto l0000000000016E24
	// succ:  l0000000000016E24
l0000000000016E88:
	a5 = s8 << 0x2D<u32>
	s5 = 32<i64>
	branch a5 >= 0<64> l0000000000016EBC
	// succ:  l0000000000016E94 l0000000000016EBC
l0000000000016E94:
	a0 = CONVERT(Mem0[sp + 8<i64>:int32], int32, int64)
	s5 = 8<i64>
	call fn00000000000182B4 (retsize: 0;)
	a5 = CONVERT(SLICE(a0, word32, 0) >>u 24<i32>, word32, int64)
	branch a0 >= 0<64> l0000000000016EBC
	// succ:  l0000000000016EA8 l0000000000016EBC
l0000000000016EA8:
	v35 = SLICE(a5, word32, 0)
	a5 = CONVERT(v35 - 128<i32>, word32, int64)
	a4 = 63<i64>
	s5 = 24<i64>
	branch a4 <u a5 l0000000000016EBC
	// succ:  l0000000000016EB8 l0000000000016EBC
l0000000000016EB8:
	s5 = 16<i64>
	// succ:  l0000000000016EBC
l0000000000016EBC:
	a3 = 47<i64>
	a2 = sp + 56<i64>
	a1 = sp + 8<i64>
	a0 = 2<i64>
	a0 = inet_ntop(SLICE(a0, int32, 0), a1, a2, SLICE(a3, socklen_t, 0))
	branch a0 == 0<64> l0000000000017074
	// succ:  l0000000000016ED4 l0000000000017074
l0000000000016ED4:
	a0 = sp + 56<i64>
	a0 = __strdup(a0)
	Mem0[s6:word64] = a0
	a0 = s5
	call fn0000000000016830 (retsize: 0;)
	Mem0[sp + 16<i64>:word32] = SLICE(a0, word32, 0)
	a3 = 16<i64>
	a2 = sp + 56<i64>
	a1 = sp + 16<i64>
	a0 = 2<i64>
	Mem0[sp + 56<i64>:word64] = 0<64>
	Mem0[sp + 64<i64>:word64] = 0<64>
	Mem0[sp + 72<i64>:word64] = 0<64>
	Mem0[sp + 80<i64>:word64] = 0<64>
	Mem0[sp + 88<i64>:word64] = 0<64>
	Mem0[sp + 96<i64>:word32] = SLICE(0<64>, word32, 0)
	Mem0[sp + 100<i64>:word16] = SLICE(0<64>, word16, 0)
	Mem0[sp + 102<i64>:byte] = SLICE(0<64>, byte, 0)
	a0 = inet_ntop(SLICE(a0, int32, 0), a1, a2, SLICE(a3, socklen_t, 0))
	branch a0 == 0<64> l0000000000017300
	// succ:  l0000000000016F24 l0000000000017300
l0000000000016F24:
	a0 = sp + 56<i64>
	a0 = __strdup(a0)
	Mem0[s6 + 48<i64>:word64] = a0
	s0 = CONVERT(Mem0[sp + 8<i64>:int32], int32, int64)
	Mem0[s6 + 160<i64>:word32] = SLICE(s5, word32, 0)
	a0 = s5
	call fn0000000000016830 (retsize: 0;)
	a5 = a0 ^ -1<i64>
	a5 = a5 | s0
	a3 = 16<i64>
	a2 = sp + 56<i64>
	a1 = sp + 32<i64>
	a0 = 2<i64>
	Mem0[sp + 32<i64>:word32] = SLICE(a5, word32, 0)
	Mem0[sp + 56<i64>:word64] = 0<64>
	Mem0[sp + 64<i64>:word64] = 0<64>
	Mem0[sp + 72<i64>:word64] = 0<64>
	Mem0[sp + 80<i64>:word64] = 0<64>
	Mem0[sp + 88<i64>:word64] = 0<64>
	Mem0[sp + 96<i64>:word32] = SLICE(0<64>, word32, 0)
	Mem0[sp + 100<i64>:word16] = SLICE(0<64>, word16, 0)
	Mem0[sp + 102<i64>:byte] = SLICE(0<64>, byte, 0)
	a0 = inet_ntop(SLICE(a0, int32, 0), a1, a2, SLICE(a3, socklen_t, 0))
	branch a0 == 0<64> l00000000000172F4
	// succ:  l0000000000016F84 l00000000000172F4
l0000000000016F84:
	a0 = sp + 56<i64>
	a0 = __strdup(a0)
	Mem0[s6 + 40<i64>:word64] = a0
	s0 = CONVERT(Mem0[sp + 8<i64>:int32], int32, int64)
	a0 = s5
	call fn0000000000016830 (retsize: 0;)
	a3 = CONVERT(Mem0[sp + 32<i64>:int32], int32, int64)
	s0 = a0 & s0
	a2 = s0
	a1 = s5
	a0 = s0
	Mem0[sp + 24<i64>:word32] = SLICE(s0, word32, 0)
	call fn0000000000017F04 (retsize: 0;)
	Mem0[s6 + 24<i64>:word64] = a0
	a3 = 16<i64>
	a2 = sp + 56<i64>
	a1 = sp + 24<i64>
	a0 = 2<i64>
	Mem0[sp + 56<i64>:word64] = 0<64>
	Mem0[sp + 64<i64>:word64] = 0<64>
	Mem0[sp + 72<i64>:word64] = 0<64>
	Mem0[sp + 80<i64>:word64] = 0<64>
	Mem0[sp + 88<i64>:word64] = 0<64>
	Mem0[sp + 96<i64>:word32] = SLICE(0<64>, word32, 0)
	Mem0[sp + 100<i64>:word16] = SLICE(0<64>, word16, 0)
	Mem0[sp + 102<i64>:byte] = SLICE(0<64>, byte, 0)
	a0 = inet_ntop(SLICE(a0, int32, 0), a1, a2, SLICE(a3, socklen_t, 0))
	branch a0 == 0<64> l00000000000172DC
	// succ:  l0000000000016FF4 l00000000000172DC
l0000000000016FF4:
	a0 = sp + 56<i64>
	a0 = __strdup(a0)
	s0 = CONVERT(Mem0[sp + 24<i64>:int32], int32, int64)
	Mem0[s6 + 32<i64>:word64] = a0
	s3 = a0
	a0 = s0
	call fn0000000000016B68 (retsize: 0;)
	Mem0[s6 + 184<i64>:word64] = a0
	a0 = s0
	call fn00000000000182B4 (retsize: 0;)
	a5 = CONVERT(SLICE(a0, word32, 0) >>u 24<i32>, word32, int64)
	branch a0 >= 0<64> l0000000000017098
	// succ:  l0000000000017024 l0000000000017098
l0000000000017024:
	v26 = SLICE(a5, word32, 0)
	a4 = CONVERT(v26 - 128<i32>, word32, int64)
	a3 = 63<i64>
	branch a3 >=u a4 l000000000001727C
	// succ:  l0000000000017030 l000000000001727C
l0000000000017030:
	v27 = SLICE(a5, word32, 0)
	a4 = CONVERT(v27 - 192<i32>, word32, int64)
	a3 = 31<i64>
	branch a3 >=u a4 l00000000000172A4
	// succ:  l000000000001703C l00000000000172A4
l000000000001703C:
	v28 = SLICE(a5, word32, 0)
	a5 = CONVERT(v28 - 224<i32>, word32, int64)
	a4 = 14<i64>
	branch a4 <u a5 l00000000000172B0
	// succ:  l0000000000017048 l00000000000172B0
l0000000000017048:
	a5 = 0x11000<64>
	a5 = a5 + 1904<i64>
	goto l00000000000170A0
	// succ:  l00000000000170A0
l0000000000017054:
	a0 = Mem0[gp + -1920<i64>:word64]
	a2 = 0x11000<64>
	a3 = s5
	a2 = a2 + 2008<i64>
	a1 = 1<i64>
	a0 = SEQ(0<32>, __fprintf_chk(a0, SLICE(a1, int32, 0), a2, SLICE(a3, int32, 0)))
	a0 = -1<i64>
	goto l0000000000016E24
	// succ:  l0000000000016E24
l0000000000017074:
	a5 = CONVERT(Mem0[gp + -2028<i64>:int32], int32, int64)
	branch a5 != 0<64> l0000000000016E20
	// succ:  l000000000001707C l0000000000016E20
l000000000001707C:
	a3 = Mem0[gp + -1920<i64>:word64]
	a0 = 0x11000<64>
	a2 = 43<i64>
	a1 = 1<i64>
	a0 = a0 + 2040<i64>
	a0 = SEQ(0<64>, fwrite(a0, SLICE(a1, size_t, 0), SLICE(a2, size_t, 0), a3))
	goto l0000000000016E20
	// succ:  l0000000000016E20
l0000000000017098:
	a5 = 0x11000<64>
	a5 = a5 + 1880<i64>
	// succ:  l00000000000170A0
l00000000000170A0:
	Mem0[s6 + 192<i64>:word64] = a5
	s2 = 32<i64>
	branch s5 == s2 l0000000000017158
	// succ:  l00000000000170AC l0000000000017158
l00000000000170AC:
	Mem0[sp + 40<i64>:word32] = SLICE(s0, word32, 0)
	a5 = 31<i64>
	branch s5 == a5 l0000000000017210
	// succ:  l00000000000170B8 l0000000000017210
l00000000000170B8:
	a5 = 0x1000000<64>
	s0 = s0 | a5
	a3 = 16<i64>
	a2 = sp + 56<i64>
	a1 = sp + 40<i64>
	a0 = 2<i64>
	Mem0[sp + 40<i64>:word32] = SLICE(s0, word32, 0)
	a0 = inet_ntop(SLICE(a0, int32, 0), a1, a2, SLICE(a3, socklen_t, 0))
	branch a0 == 0<64> l00000000000172E8
	// succ:  l00000000000170DC l00000000000172E8
l00000000000170DC:
	a0 = sp + 56<i64>
	a0 = __strdup(a0)
	a5 = CONVERT(Mem0[sp + 16<i64>:int32], int32, int64)
	Mem0[s6 + 168<i64>:word64] = a0
	a0 = CONVERT(Mem0[sp + 24<i64>:int32], int32, int64)
	a5 = a5 ^ -1<i64>
	a0 = a5 | a0
	call fn00000000000182B4 (retsize: 0;)
	v30 = SLICE(a0, word32, 0)
	a0 = CONVERT(v30 - 1<i32>, word32, int64)
	call fn00000000000182B4 (retsize: 0;)
	Mem0[sp + 48<i64>:word32] = SLICE(a0, word32, 0)
	a3 = 47<i64>
	a2 = sp + 56<i64>
	a1 = sp + 48<i64>
	a0 = 2<i64>
	a0 = inet_ntop(SLICE(a0, int32, 0), a1, a2, SLICE(a3, socklen_t, 0))
	branch a0 == 0<64> l0000000000017074
	// succ:  l0000000000017120 l0000000000017074
l0000000000017120:
	a0 = sp + 56<i64>
	a0 = __strdup(a0)
	a2 = 1<i64>
	v31 = SLICE(s2, word32, 0)
	v32 = SLICE(s5, word32, 0)
	a5 = CONVERT(v31 - v32, word32, int64)
	a5 = CONVERT(SLICE(a2, word32, 0) << a5, word32, int64)
	a3 = 64<i64>
	a4 = 0x12000<64>
	Mem0[s6 + 176<i64>:word64] = a0
	v33 = SLICE(a5, word32, 0)
	a5 = CONVERT(v33 - 2<i32>, word32, int64)
	a4 = a4 + -2008<i64>
	a1 = a3
	a0 = s6 + 96<i64>
	a0 = SEQ(0<32>, __snprintf_chk(a0, SLICE(a1, size_t, 0), SLICE(a2, int32, 0), SLICE(a3, size_t, 0), a4, SLICE(a5, uint32, 0)))
	goto l000000000001717C
	// succ:  l000000000001717C
l0000000000017158:
	a5 = 0x11000<64>
	Mem0[s6 + 168<i64>:word64] = s3
	Mem0[s6 + 176<i64>:word64] = s3
	a4 = s6 + 96<i64>
	a5 = a5 + 1920<i64>
	// succ:  l000000000001716C
l000000000001716C:
	a3 = CONVERT(Mem0[a5:byte], byte, word64)
	Mem0[a4:byte] = SLICE(a3, byte, 0)
	a5 = CONVERT(Mem0[a5 + 1<i64>:byte], byte, word64)
	Mem0[a4 + 1<i64>:byte] = SLICE(a5, byte, 0)
	// succ:  l000000000001717C
l000000000001717C:
	a5 = s8 << 0x31<u32>
	branch a5 < 0<64> l0000000000017288
	// succ:  l0000000000017184 l0000000000017288
l0000000000017184:
	s8 = s8 & 1<i64>
	branch s8 != 0<64> l00000000000171C8
	// succ:  l000000000001718C l00000000000171C8
l000000000001718C:
	a0 = 0<i64>
	goto l0000000000016E24
	// succ:  l0000000000016E24
l0000000000017194:
	s4 = 0x11000<64>
	s3 = 1<i64>
	s2 = -1<i64>
	// succ:  l00000000000171A0
l00000000000171A0:
	a3 = s1
	a2 = s4 + 1960<i64>
	a1 = s3
	a0 = sp + 48<i64>
	a0 = SEQ(0<32>, __asprintf_chk(a0, SLICE(a1, int32, 0), a2, a3))
	branch a0 == s2 l00000000000172BC
	// succ:  l00000000000171B8 l00000000000172BC
l00000000000171B8:
	v29 = SLICE(s0, word32, 0)
	s0 = CONVERT(v29 - 1<i32>, word32, int64)
	s1 = Mem0[sp + 48<i64>:word64]
	branch s0 != 0<64> l00000000000171A0
	// succ:  l00000000000171C4 l00000000000171A0
l00000000000171C4:
	goto l0000000000016E10
	// succ:  l0000000000016E10
l00000000000171C8:
	a1 = sp + 8<i64>
	a0 = 2<i64>
	call fn00000000000168E4 (retsize: 0;)
	Mem0[s6 + 56<i64>:word64] = a0
	branch a0 != 0<64> l000000000001718C
	// succ:  l00000000000171DC l000000000001718C
l00000000000171DC:
	a5 = CONVERT(Mem0[gp + -2028<i64>:int32], int32, int64)
	branch a5 != 0<64> l0000000000016E20
	// succ:  l00000000000171E4 l0000000000016E20
l00000000000171E4:
	a3 = 0x12000<64>
	a4 = s1
	a3 = a3 + -2000<i64>
	a2 = 250<i64>
	a1 = 1<i64>
	a0 = sp + 104<i64>
	a0 = SEQ(0<32>, __sprintf_chk(a0, SLICE(a1, int32, 0), SLICE(a2, size_t, 0), a3, a4))
	a0 = sp + 104<i64>
	herror(a0)
	a0 = -1<i64>
	goto l0000000000016E24
	// succ:  l0000000000016E24
l0000000000017210:
	a3 = 16<i64>
	a2 = sp + 56<i64>
	a1 = sp + 40<i64>
	a0 = 2<i64>
	a0 = inet_ntop(SLICE(a0, int32, 0), a1, a2, SLICE(a3, socklen_t, 0))
	branch a0 == 0<64> l00000000000172E8
	// succ:  l0000000000017228 l00000000000172E8
l0000000000017228:
	a0 = sp + 56<i64>
	a0 = __strdup(a0)
	a5 = CONVERT(Mem0[sp + 16<i64>:int32], int32, int64)
	a4 = CONVERT(Mem0[sp + 24<i64>:int32], int32, int64)
	Mem0[s6 + 168<i64>:word64] = a0
	a5 = a5 ^ -1<i64>
	a5 = a5 | a4
	a3 = 47<i64>
	a2 = sp + 56<i64>
	a1 = sp + 48<i64>
	a0 = 2<i64>
	Mem0[sp + 48<i64>:word32] = SLICE(a5, word32, 0)
	a0 = inet_ntop(SLICE(a0, int32, 0), a1, a2, SLICE(a3, socklen_t, 0))
	branch a0 == 0<64> l0000000000017074
	// succ:  l0000000000017260 l0000000000017074
l0000000000017260:
	a0 = sp + 56<i64>
	a0 = __strdup(a0)
	a5 = 0x12000<64>
	Mem0[s6 + 176<i64>:word64] = a0
	a4 = s6 + 96<i64>
	a5 = a5 + 1632<i64>
	goto l000000000001716C
	// succ:  l000000000001716C
l000000000001727C:
	a5 = 0x11000<64>
	a5 = a5 + 1888<i64>
	goto l00000000000170A0
	// succ:  l00000000000170A0
l0000000000017288:
	a0 = CONVERT(Mem0[sp + 8<i64>:int32], int32, int64)
	a4 = s6 + 88<i64>
	a3 = s6 + 80<i64>
	a2 = s6 + 72<i64>
	a1 = s6 + 64<i64>
	call fn0000000000017B40 (retsize: 0;)
	goto l0000000000017184
	// succ:  l0000000000017184
l00000000000172A4:
	a5 = 0x11000<64>
	a5 = a5 + 1896<i64>
	goto l00000000000170A0
	// succ:  l00000000000170A0
l00000000000172B0:
	a5 = 0x11000<64>
	a5 = a5 + 1912<i64>
	goto l00000000000170A0
	// succ:  l00000000000170A0
l00000000000172BC:
	a0 = Mem0[gp + -1920<i64>:word64]
	a3 = 613<i64>
	// succ:  l00000000000172C4
l00000000000172C4:
	a2 = 0x11000<64>
	a2 = a2 + 1968<i64>
	a1 = 1<i64>
	a0 = SEQ(0<32>, __fprintf_chk(a0, SLICE(a1, int32, 0), a2, SLICE(a3, int32, 0)))
	abort()
l00000000000172D8:
	__stack_chk_fail()
l00000000000172DC:
	a0 = Mem0[gp + -1920<i64>:word64]
	a3 = 667<i64>
	goto l00000000000172C4
	// succ:  l00000000000172C4
l00000000000172E8:
	a0 = Mem0[gp + -1920<i64>:word64]
	a3 = 684<i64>
	goto l00000000000172C4
	// succ:  l00000000000172C4
l00000000000172F4:
	a0 = Mem0[gp + -1920<i64>:word64]
	a3 = 655<i64>
	goto l00000000000172C4
	// succ:  l00000000000172C4
l0000000000017300:
	a0 = Mem0[gp + -1920<i64>:word64]
	a3 = 644<i64>
	goto l00000000000172C4
	// succ:  l00000000000172C4
fn0000000000016D74_exit:


// fn000000000001730C
// Return size: 0
define fn000000000001730C
fn000000000001730C_entry:
	sp = fp
	// succ:  l000000000001730C
l000000000001730C:
	sp = sp + -192<i64>
	Mem0[sp + 176<i64>:word64] = s0
	a4 = Mem0[gp + -1936<i64>:word64]
	Mem0[sp + 184<i64>:word64] = ra
	Mem0[sp + 168<i64>:word64] = s1
	a5 = 128<i64>
	Mem0[sp + 152<i64>:word64] = a4
	branch a5 <u a0 l00000000000173BC
	// succ:  l000000000001732C l00000000000173BC
l000000000001732C:
	a4 = 8<i64>
	Mem0[sp + 8<i64>:word64] = 0<64>
	Mem0[sp + 16<i64>:word64] = 0<64>
	s1 = a1
	a5 = sp + 8<i64>
	v12 = SLICE(a4, word32, 0)
	v13 = SLICE(a0, word32, 0)
	a4 = CONVERT(v12 - v13, word32, int64)
	a3 = 7<i64>
	a2 = -1<i64>
	a1 = 255<i64>
	branch a0 == 0<64> l000000000001736C
	// succ:  l0000000000017354 l000000000001736C
l0000000000017354:
	branch a3 >= a0 l00000000000173C4
	// succ:  l0000000000017358 l00000000000173C4
l0000000000017358:
	Mem0[a5:byte] = SLICE(a2, byte, 0)
	// succ:  l000000000001735C
l000000000001735C:
	v16 = SLICE(a0, word32, 0)
	a0 = CONVERT(v16 - 8<i32>, word32, int64)
	a5 = a5 + 1<i64>
	v17 = SLICE(a4, word32, 0)
	a4 = CONVERT(v17 + 8<i32>, word32, int64)
	branch 0<64> < a0 l0000000000017354
	// succ:  l000000000001736C l0000000000017354
l000000000001736C:
	a3 = 128<i64>
	a2 = sp + 24<i64>
	a1 = sp + 8<i64>
	a0 = 10<i64>
	a0 = inet_ntop(SLICE(a0, int32, 0), a1, a2, SLICE(a3, socklen_t, 0))
	branch a0 == 0<64> l00000000000173BC
	// succ:  l0000000000017384 l00000000000173BC
l0000000000017384:
	a2 = 16<i64>
	a1 = sp + 8<i64>
	a0 = s1
	a0 = memcpy(a0, a1, SLICE(a2, size_t, 0))
	a0 = sp + 24<i64>
	a0 = __strdup(a0)
	// succ:  l000000000001739C
l000000000001739C:
	a4 = Mem0[sp + 152<i64>:word64]
	a5 = Mem0[gp + -1936<i64>:word64]
	branch a4 != a5 l00000000000173D0
	// succ:  l00000000000173A8 l00000000000173D0
l00000000000173A8:
	ra = Mem0[sp + 184<i64>:word64]
	s0 = Mem0[sp + 176<i64>:word64]
	s1 = Mem0[sp + 168<i64>:word64]
	sp = sp + 192<i64>
	return
	// succ:  fn000000000001730C_exit
l00000000000173BC:
	a0 = 0<i64>
	goto l000000000001739C
	// succ:  l000000000001739C
l00000000000173C4:
	a6 = CONVERT(SLICE(a1, word32, 0) << a4, word32, int64)
	Mem0[a5:byte] = SLICE(a6, byte, 0)
	goto l000000000001735C
	// succ:  l000000000001735C
l00000000000173D0:
	__stack_chk_fail()
fn000000000001730C_exit:


// fn00000000000173D4
// Return size: 0
define fn00000000000173D4
fn00000000000173D4_entry:
	sp = fp
	// succ:  l00000000000173D4
l00000000000173D4:
	sp = sp + -48<i64>
	Mem0[sp + 32<i64>:word64] = s0
	Mem0[sp + 40<i64>:word64] = ra
	Mem0[sp + 24<i64>:word64] = s1
	Mem0[sp + 16<i64>:word64] = s2
	Mem0[sp + 8<i64>:word64] = s3
	a5 = 128<i64>
	s0 = a0
	s2 = CONVERT(Mem0[a0:byte], byte, word64)
	s3 = CONVERT(Mem0[a0 + 1<i64>:byte], byte, word64)
	branch a1 == a5 l00000000000174DC
	// succ:  l0000000000017400 l00000000000174DC
l0000000000017400:
	a5 = 95<i64>
	branch a5 < a1 l0000000000017474
	// succ:  l0000000000017408 l0000000000017474
l0000000000017408:
	a5 = s2 << 8<u32>
	a5 = a5 | s3
	a4 = 0xFFFFE000<64>
	a4 = a4 & a5
	a3 = 0x2000<64>
	branch a4 == a3 l0000000000017580
	// succ:  l0000000000017420 l0000000000017580
l0000000000017420:
	a4 = s2 & 254<i64>
	a2 = 252<i64>
	branch a4 == a2 l000000000001758C
	// succ:  l000000000001742C l000000000001758C
l000000000001742C:
	a4 = 0x10000<64>
	a2 = a5 & -64<i64>
	v15 = SLICE(a4, word32, 0)
	a4 = CONVERT(v15 - 384<i32>, word32, int64)
	branch a2 == a4 l0000000000017598
	// succ:  l000000000001743C l0000000000017598
l000000000001743C:
	a4 = 255<i64>
	branch s2 == a4 l00000000000175A4
	// succ:  l0000000000017444 l00000000000175A4
l0000000000017444:
	a0 = 0x11000<64>
	a5 = a5 & -2<i64>
	v16 = SLICE(a3, word32, 0)
	a3 = CONVERT(v16 + 2<i32>, word32, int64)
	a0 = a0 + 1808<i64>
	branch a5 == a3 l00000000000175B0
	// succ:  l0000000000017458 l00000000000175B0
l0000000000017458:
	ra = Mem0[sp + 40<i64>:word64]
	s0 = Mem0[sp + 32<i64>:word64]
	s1 = Mem0[sp + 24<i64>:word64]
	s2 = Mem0[sp + 16<i64>:word64]
	s3 = Mem0[sp + 8<i64>:word64]
	sp = sp + 48<i64>
	return
	// succ:  fn00000000000173D4_exit
l0000000000017474:
	s1 = 0x10000<64>
	s1 = s1 + 1152<i64>
	// succ:  l000000000001747C
l000000000001747C:
	a2 = 12<i64>
	a1 = s1 + 1072<i64>
	a0 = s0
	a0 = SEQ(0<32>, memcmp(a0, a1, SLICE(a2, size_t, 0)))
	branch a0 == 0<64> l000000000001755C
	// succ:  l0000000000017490 l000000000001755C
l0000000000017490:
	a2 = 12<i64>
	a1 = s1 + 1088<i64>
	a0 = s0
	a0 = SEQ(0<32>, memcmp(a0, a1, SLICE(a2, size_t, 0)))
	branch a0 == 0<64> l0000000000017514
	// succ:  l00000000000174A4 l0000000000017514
l00000000000174A4:
	a2 = 12<i64>
	a1 = s1 + 1104<i64>
	a0 = s0
	a0 = SEQ(0<32>, memcmp(a0, a1, SLICE(a2, size_t, 0)))
	branch a0 != 0<64> l0000000000017408
	// succ:  l00000000000174B8 l0000000000017408
l00000000000174B8:
	ra = Mem0[sp + 40<i64>:word64]
	a0 = 0x12000<64>
	a0 = a0 + -1864<i64>
	s0 = Mem0[sp + 32<i64>:word64]
	s1 = Mem0[sp + 24<i64>:word64]
	s2 = Mem0[sp + 16<i64>:word64]
	s3 = Mem0[sp + 8<i64>:word64]
	sp = sp + 48<i64>
	return
	// succ:  fn00000000000173D4_exit
l00000000000174DC:
	s1 = 0x10000<64>
	s1 = s1 + 1152<i64>
	a2 = 16<i64>
	a1 = s1 + 1024<i64>
	a0 = SEQ(0<32>, memcmp(a0, a1, SLICE(a2, size_t, 0)))
	branch a0 == 0<64> l0000000000017538
	// succ:  l00000000000174F4 l0000000000017538
l00000000000174F4:
	a2 = 16<i64>
	a1 = s1 + 1048<i64>
	a0 = s0
	a0 = SEQ(0<32>, memcmp(a0, a1, SLICE(a2, size_t, 0)))
	branch a0 != 0<64> l000000000001747C
	// succ:  l0000000000017508 l000000000001747C
l0000000000017508:
	a0 = 0x12000<64>
	a0 = a0 + -1936<i64>
	goto l0000000000017458
	// succ:  l0000000000017458
l0000000000017514:
	ra = Mem0[sp + 40<i64>:word64]
	a0 = 0x12000<64>
	a0 = a0 + -1888<i64>
	s0 = Mem0[sp + 32<i64>:word64]
	s1 = Mem0[sp + 24<i64>:word64]
	s2 = Mem0[sp + 16<i64>:word64]
	s3 = Mem0[sp + 8<i64>:word64]
	sp = sp + 48<i64>
	return
	// succ:  fn00000000000173D4_exit
l0000000000017538:
	ra = Mem0[sp + 40<i64>:word64]
	a0 = 0x12000<64>
	a0 = a0 + -1960<i64>
	s0 = Mem0[sp + 32<i64>:word64]
	s1 = Mem0[sp + 24<i64>:word64]
	s2 = Mem0[sp + 16<i64>:word64]
	s3 = Mem0[sp + 8<i64>:word64]
	sp = sp + 48<i64>
	return
	// succ:  fn00000000000173D4_exit
l000000000001755C:
	ra = Mem0[sp + 40<i64>:word64]
	a0 = 0x12000<64>
	a0 = a0 + -1912<i64>
	s0 = Mem0[sp + 32<i64>:word64]
	s1 = Mem0[sp + 24<i64>:word64]
	s2 = Mem0[sp + 16<i64>:word64]
	s3 = Mem0[sp + 8<i64>:word64]
	sp = sp + 48<i64>
	return
	// succ:  fn00000000000173D4_exit
l0000000000017580:
	a0 = 0x12000<64>
	a0 = a0 + -1832<i64>
	goto l0000000000017458
	// succ:  l0000000000017458
l000000000001758C:
	a0 = 0x12000<64>
	a0 = a0 + -1816<i64>
	goto l0000000000017458
	// succ:  l0000000000017458
l0000000000017598:
	a0 = 0x12000<64>
	a0 = a0 + -1792<i64>
	goto l0000000000017458
	// succ:  l0000000000017458
l00000000000175A4:
	a0 = 0x11000<64>
	a0 = a0 + 1864<i64>
	goto l0000000000017458
	// succ:  l0000000000017458
l00000000000175B0:
	a0 = 0x12000<64>
	a0 = a0 + -1768<i64>
	goto l0000000000017458
	// succ:  l0000000000017458
fn00000000000173D4_exit:


// fn00000000000175BC
// Return size: 0
define fn00000000000175BC
fn00000000000175BC_entry:
	sp = fp
	// succ:  l00000000000175BC
l00000000000175BC:
	sp = sp + -416<i64>
	Mem0[sp + 392<i64>:word64] = s1
	a5 = Mem0[gp + -1936<i64>:word64]
	Mem0[sp + 400<i64>:word64] = s0
	s0 = a2
	Mem0[sp + 384<i64>:word64] = s2
	Mem0[sp + 368<i64>:word64] = s4
	a2 = 200<i64>
	s4 = a0
	s2 = a1
	a0 = s0
	a1 = 0<i64>
	Mem0[sp + 352<i64>:word64] = s6
	Mem0[sp + 408<i64>:word64] = ra
	Mem0[sp + 376<i64>:word64] = s3
	Mem0[sp + 360<i64>:word64] = s5
	Mem0[sp + 344<i64>:word64] = s7
	Mem0[sp + 336<i64>:word64] = s8
	Mem0[sp + 328<i64>:word64] = s9
	s6 = a3
	Mem0[sp + 312<i64>:word64] = a5
	a0 = memset(a0, SLICE(a1, int32, 0), SLICE(a2, size_t, 0))
	a2 = sp + 8<i64>
	a1 = s4
	a0 = 10<i64>
	a0 = SEQ(0<32>, inet_pton(SLICE(a0, int32, 0), a1, a2))
	branch 0<64> >= a0 l00000000000177B4
	// succ:  l0000000000017628 l00000000000177B4
l0000000000017628:
	a0 = sp + 8<i64>
	call fn00000000000163B0 (retsize: 0;)
	s3 = sp + 56<i64>
	Mem0[s0 + 8<i64>:word64] = a0
	a3 = 250<i64>
	a2 = s3
	a1 = sp + 8<i64>
	a0 = 10<i64>
	a0 = inet_ntop(SLICE(a0, int32, 0), a1, a2, SLICE(a3, socklen_t, 0))
	branch a0 == 0<64> l0000000000017768
	// succ:  l0000000000017650 l0000000000017768
l0000000000017650:
	a0 = s3
	a0 = __strdup(a0)
	Mem0[s0:word64] = a0
	s5 = 128<i64>
	branch s5 < s2 l00000000000177DC
	// succ:  l0000000000017664 l00000000000177DC
l0000000000017664:
	branch s2 < 0<64> l0000000000017868
	// succ:  l0000000000017668 l0000000000017868
l0000000000017668:
	s5 = s2
	// succ:  l000000000001766C
l000000000001766C:
	s7 = sp + 24<i64>
	Mem0[s0 + 160<i64>:word32] = SLICE(s5, word32, 0)
	a1 = s7
	a0 = s5
	call fn000000000001730C (retsize: 0;)
	Mem0[s0 + 48<i64>:word64] = a0
	branch a0 == 0<64> l00000000000178F8
	// succ:  l0000000000017688 l00000000000178F8
l0000000000017688:
	s8 = sp + 40<i64>
	a5 = sp + 8<i64>
	s9 = s7
	a2 = s8
	a3 = s7
	// succ:  l000000000001769C
l000000000001769C:
	a4 = CONVERT(Mem0[a5:byte], byte, word64)
	a1 = CONVERT(Mem0[a3:byte], byte, word64)
	a5 = a5 + 1<i64>
	a3 = a3 + 1<i64>
	a4 = a4 & a1
	Mem0[a2:byte] = SLICE(a4, byte, 0)
	a2 = a2 + 1<i64>
	branch s7 != a5 l000000000001769C
	// succ:  l00000000000176BC l000000000001769C
l00000000000176BC:
	a3 = 250<i64>
	a2 = s3
	a1 = sp + 40<i64>
	a0 = 10<i64>
	a0 = inet_ntop(SLICE(a0, int32, 0), a1, a2, SLICE(a3, socklen_t, 0))
	branch a0 == 0<64> l0000000000017768
	// succ:  l00000000000176D4 l0000000000017768
l00000000000176D4:
	a0 = s3
	a0 = __strdup(a0)
	Mem0[s0 + 32<i64>:word64] = a0
	a0 = sp + 40<i64>
	call fn00000000000163B0 (retsize: 0;)
	Mem0[s0 + 16<i64>:word64] = a0
	a1 = s2
	a0 = sp + 40<i64>
	call fn00000000000173D4 (retsize: 0;)
	Mem0[s0 + 184<i64>:word64] = a0
	a1 = s5
	a0 = sp + 40<i64>
	call fn0000000000018118 (retsize: 0;)
	Mem0[s0 + 24<i64>:word64] = a0
	a5 = 128<i64>
	branch s2 != a5 l0000000000017870
	// succ:  l0000000000017714 l0000000000017870
l0000000000017714:
	a5 = Mem0[s0 + 32<i64>:word64]
	a0 = s0 + 96<i64>
	s2 = 0<i64>
	Mem0[s0 + 168<i64>:word64] = a5
	Mem0[s0 + 176<i64>:word64] = a5
	// succ:  l0000000000017728
l0000000000017728:
	s2 = s2 << 0x20<u32>
	a5 = 0x10000<64>
	s2 = s2 >>u 0x1D<u32>
	a5 = a5 + 1152<i64>
	s2 = a5 + s2
	a3 = Mem0[s2:word64]
	// succ:  l0000000000017740
l0000000000017740:
	a2 = 0x12000<64>
	a2 = a2 + -1648<i64>
	a1 = 64<i64>
	a0 = SEQ(0<32>, snprintf(a0, SLICE(a1, size_t, 0), a2, 0<32>))
	a5 = s6 << 0x31<u32>
	branch a5 < 0<64> l00000000000178DC
	// succ:  l0000000000017758 l00000000000178DC
l0000000000017758:
	s6 = s6 & 1<i64>
	branch s6 != 0<64> l0000000000017824
	// succ:  l0000000000017760 l0000000000017824
l0000000000017760:
	a0 = 0<i64>
	goto l0000000000017774
	// succ:  l0000000000017774
l0000000000017768:
	a5 = CONVERT(Mem0[gp + -2028<i64>:int32], int32, int64)
	branch a5 == 0<64> l0000000000017804
	// succ:  l0000000000017770 l0000000000017804
l0000000000017770:
	a0 = -1<i64>
	// succ:  l0000000000017774
l0000000000017774:
	a4 = Mem0[sp + 312<i64>:word64]
	a5 = Mem0[gp + -1936<i64>:word64]
	branch a4 != a5 l0000000000017920
	// succ:  l0000000000017780 l0000000000017920
l0000000000017780:
	ra = Mem0[sp + 408<i64>:word64]
	s0 = Mem0[sp + 400<i64>:word64]
	s1 = Mem0[sp + 392<i64>:word64]
	s2 = Mem0[sp + 384<i64>:word64]
	s3 = Mem0[sp + 376<i64>:word64]
	s4 = Mem0[sp + 368<i64>:word64]
	s5 = Mem0[sp + 360<i64>:word64]
	s6 = Mem0[sp + 352<i64>:word64]
	s7 = Mem0[sp + 344<i64>:word64]
	s8 = Mem0[sp + 336<i64>:word64]
	s9 = Mem0[sp + 328<i64>:word64]
	sp = sp + 416<i64>
	return
	// succ:  fn00000000000175BC_exit
l00000000000177B4:
	a5 = CONVERT(Mem0[gp + -2028<i64>:int32], int32, int64)
	branch a5 != 0<64> l0000000000017770
	// succ:  l00000000000177BC l0000000000017770
l00000000000177BC:
	a0 = Mem0[gp + -1920<i64>:word64]
	a2 = 0x12000<64>
	a3 = s4
	a2 = a2 + -1760<i64>
	a1 = 1<i64>
	a0 = SEQ(0<32>, __fprintf_chk(a0, SLICE(a1, int32, 0), a2, a3))
	a0 = -1<i64>
	goto l0000000000017774
	// succ:  l0000000000017774
l00000000000177DC:
	a5 = CONVERT(Mem0[gp + -2028<i64>:int32], int32, int64)
	branch a5 != 0<64> l0000000000017770
	// succ:  l00000000000177E4 l0000000000017770
l00000000000177E4:
	a0 = Mem0[gp + -1920<i64>:word64]
	a2 = 0x12000<64>
	a3 = s2
	a2 = a2 + -1728<i64>
	a1 = 1<i64>
	a0 = SEQ(0<32>, __fprintf_chk(a0, SLICE(a1, int32, 0), a2, SLICE(a3, int32, 0)))
	a0 = -1<i64>
	goto l0000000000017774
	// succ:  l0000000000017774
l0000000000017804:
	a3 = Mem0[gp + -1920<i64>:word64]
	a0 = 0x11000<64>
	a2 = 43<i64>
	a1 = 1<i64>
	a0 = a0 + 2040<i64>
	a0 = SEQ(0<64>, fwrite(a0, SLICE(a1, size_t, 0), SLICE(a2, size_t, 0), a3))
	a0 = -1<i64>
	goto l0000000000017774
	// succ:  l0000000000017774
l0000000000017824:
	a1 = sp + 8<i64>
	a0 = 10<i64>
	call fn00000000000168E4 (retsize: 0;)
	Mem0[s0 + 56<i64>:word64] = a0
	branch a0 != 0<64> l0000000000017760
	// succ:  l0000000000017838 l0000000000017760
l0000000000017838:
	a5 = CONVERT(Mem0[gp + -2028<i64>:int32], int32, int64)
	branch a5 != 0<64> l0000000000017770
	// succ:  l0000000000017840 l0000000000017770
l0000000000017840:
	a3 = 0x12000<64>
	a4 = s4
	a3 = a3 + -2000<i64>
	a2 = 250<i64>
	a1 = 1<i64>
	a0 = s3
	a0 = SEQ(0<32>, __sprintf_chk(a0, SLICE(a1, int32, 0), SLICE(a2, size_t, 0), a3, a4))
	a0 = s3
	herror(a0)
	goto l0000000000017770
	// succ:  l0000000000017770
l0000000000017868:
	s2 = s5
	goto l000000000001766C
	// succ:  l000000000001766C
l0000000000017870:
	a0 = s3
	a0 = __strdup(a0)
	Mem0[s0 + 168<i64>:word64] = a0
	// succ:  l000000000001787C
l000000000001787C:
	a5 = CONVERT(Mem0[s9:byte], byte, word64)
	a4 = CONVERT(Mem0[s8:byte], byte, word64)
	s8 = s8 + 1<i64>
	a5 = a5 ^ -1<i64>
	a5 = a5 | a4
	Mem0[s8 + -1<i64>:byte] = SLICE(a5, byte, 0)
	s9 = s9 + 1<i64>
	branch s3 != s8 l000000000001787C
	// succ:  l000000000001789C l000000000001787C
l000000000001789C:
	a3 = 250<i64>
	a2 = s3
	a1 = sp + 40<i64>
	a0 = 10<i64>
	a0 = inet_ntop(SLICE(a0, int32, 0), a1, a2, SLICE(a3, socklen_t, 0))
	branch a0 == 0<64> l0000000000017768
	// succ:  l00000000000178B4 l0000000000017768
l00000000000178B4:
	a0 = s3
	a0 = __strdup(a0)
	a5 = 128<i64>
	Mem0[s0 + 176<i64>:word64] = a0
	v26 = SLICE(a5, word32, 0)
	v27 = SLICE(s2, word32, 0)
	s2 = CONVERT(v26 - v27, word32, int64)
	a0 = s0 + 96<i64>
	branch s2 != a5 l0000000000017728
	// succ:  l00000000000178D0 l0000000000017728
l00000000000178D0:
	a3 = 0x11000<64>
	a3 = a3 + 464<i64>
	goto l0000000000017740
	// succ:  l0000000000017740
l00000000000178DC:
	a4 = s0 + 88<i64>
	a3 = s0 + 80<i64>
	a2 = s0 + 72<i64>
	a1 = s0 + 64<i64>
	a0 = sp + 8<i64>
	call fn0000000000017D10 (retsize: 0;)
	goto l0000000000017758
	// succ:  l0000000000017758
l00000000000178F8:
	a5 = CONVERT(Mem0[gp + -2028<i64>:int32], int32, int64)
	branch a5 != 0<64> l0000000000017770
	// succ:  l0000000000017900 l0000000000017770
l0000000000017900:
	a0 = Mem0[gp + -1920<i64>:word64]
	a2 = 0x12000<64>
	a3 = s2
	a2 = a2 + -1696<i64>
	a1 = 1<i64>
	a0 = SEQ(0<32>, __fprintf_chk(a0, SLICE(a1, int32, 0), a2, SLICE(a3, int32, 0)))
	a0 = -1<i64>
	goto l0000000000017774
	// succ:  l0000000000017774
l0000000000017920:
	__stack_chk_fail()
fn00000000000175BC_exit:


// fn0000000000017924
// Return size: 0
define fn0000000000017924
fn0000000000017924_entry:
	sp = fp
	// succ:  l0000000000017924
l0000000000017924:
	sp = sp + -96<i64>
	Mem0[sp + 64<i64>:word64] = s2
	a5 = Mem0[gp + -2016<i64>:word64]
	Mem0[sp + 72<i64>:word64] = s1
	Mem0[sp + 88<i64>:word64] = ra
	Mem0[sp + 80<i64>:word64] = s0
	Mem0[sp + 56<i64>:word64] = s3
	Mem0[sp + 48<i64>:word64] = s4
	Mem0[sp + 40<i64>:word64] = s5
	Mem0[sp + 32<i64>:word64] = s6
	Mem0[sp + 24<i64>:word64] = s7
	Mem0[sp + 16<i64>:word64] = s8
	Mem0[sp + 8<i64>:word64] = s9
	branch a5 == 0<64> l00000000000179B8
	// succ:  l000000000001795C l00000000000179B8
l000000000001795C:
	a5 = CONVERT(Mem0[gp + -2028<i64>:int32], int32, int64)
	branch a5 != 0<64> l000000000001796C
	// succ:  l0000000000017964 l000000000001796C
l0000000000017964:
	a5 = CONVERT(Mem0[gp + -800<i64>:byte], byte, word64)
	branch a5 != 0<64> l00000000000179A8
	// succ:  l000000000001796C l00000000000179A8
l000000000001796C:
	s0 = CONVERT(Mem0[gp + -2024<i64>:int32], int32, int64)
	// succ:  l0000000000017970
l0000000000017970:
	ra = Mem0[sp + 88<i64>:word64]
	a0 = s0
	s1 = Mem0[sp + 72<i64>:word64]
	s0 = Mem0[sp + 80<i64>:word64]
	s2 = Mem0[sp + 64<i64>:word64]
	s3 = Mem0[sp + 56<i64>:word64]
	s4 = Mem0[sp + 48<i64>:word64]
	s5 = Mem0[sp + 40<i64>:word64]
	s6 = Mem0[sp + 32<i64>:word64]
	s7 = Mem0[sp + 24<i64>:word64]
	s8 = Mem0[sp + 16<i64>:word64]
	s9 = Mem0[sp + 8<i64>:word64]
	sp = sp + 96<i64>
	return
	// succ:  fn0000000000017924_exit
l00000000000179A8:
	a1 = Mem0[gp + -1920<i64>:word64]
	a0 = gp + -800<i64>
	a0 = SEQ(0<32>, fputs(a0, a1))
	goto l000000000001796C
	// succ:  l000000000001796C
l00000000000179B8:
	s0 = CONVERT(Mem0[gp + -2024<i64>:int32], int32, int64)
	branch s0 != 0<64> l000000000001795C
	// succ:  l00000000000179C0 l000000000001795C
l00000000000179C0:
	s4 = 0x13000<64>
	a1 = 1<i64>
	a0 = s4 + -1480<i64>
	a0 = dlopen(a0, SLICE(a1, int32, 0))
	Mem0[gp + -2016<i64>:word64] = a0
	s3 = a0
	branch a0 == 0<64> l0000000000017B14
	// succ:  l00000000000179DC l0000000000017B14
l00000000000179DC:
	a1 = 0x13000<64>
	a1 = a1 + -1416<i64>
	a0 = dlsym(a0, a1)
	a1 = 0x13000<64>
	Mem0[gp + -1944<i64>:word64] = a0
	a1 = a1 + -1392<i64>
	a0 = s3
	a0 = dlsym(a0, a1)
	a1 = 0x13000<64>
	s2 = a0
	a1 = a1 + -1376<i64>
	a0 = s3
	Mem0[gp + -1952<i64>:word64] = s2
	a0 = dlsym(a0, a1)
	a1 = 0x13000<64>
	s4 = a0
	a1 = a1 + -1344<i64>
	a0 = s3
	Mem0[gp + -1960<i64>:word64] = s4
	a0 = dlsym(a0, a1)
	a1 = 0x13000<64>
	s5 = a0
	a1 = a1 + -1328<i64>
	a0 = s3
	Mem0[gp + -1976<i64>:word64] = s5
	a0 = dlsym(a0, a1)
	a1 = 0x13000<64>
	s6 = a0
	a1 = a1 + -1304<i64>
	a0 = s3
	Mem0[gp + -1984<i64>:word64] = s6
	a0 = dlsym(a0, a1)
	a1 = 0x13000<64>
	s7 = a0
	a1 = a1 + -1280<i64>
	a0 = s3
	Mem0[gp + -1992<i64>:word64] = s7
	a0 = dlsym(a0, a1)
	a1 = 0x13000<64>
	s8 = a0
	a1 = a1 + -1256<i64>
	a0 = s3
	Mem0[gp + -2000<i64>:word64] = s8
	a0 = dlsym(a0, a1)
	a1 = 0x13000<64>
	s9 = a0
	a1 = a1 + -1224<i64>
	a0 = s3
	Mem0[gp + -2008<i64>:word64] = s9
	a0 = dlsym(a0, a1)
	Mem0[gp + -1968<i64>:word64] = a0
	branch s2 == 0<64> l0000000000017ACC
	// succ:  l0000000000017AAC l0000000000017ACC
l0000000000017AAC:
	branch s4 == 0<64> l0000000000017ACC
	// succ:  l0000000000017AB0 l0000000000017ACC
l0000000000017AB0:
	branch s5 == 0<64> l0000000000017ACC
	// succ:  l0000000000017AB4 l0000000000017ACC
l0000000000017AB4:
	branch s6 == 0<64> l0000000000017ACC
	// succ:  l0000000000017AB8 l0000000000017ACC
l0000000000017AB8:
	branch s7 == 0<64> l0000000000017ACC
	// succ:  l0000000000017ABC l0000000000017ACC
l0000000000017ABC:
	branch s8 == 0<64> l0000000000017ACC
	// succ:  l0000000000017AC0 l0000000000017ACC
l0000000000017AC0:
	branch s9 == 0<64> l0000000000017ACC
	// succ:  l0000000000017AC4 l0000000000017ACC
l0000000000017AC4:
	Mem0[gp + -2024<i64>:word32] = SLICE(0<64>, word32, 0)
	goto l0000000000017970
	// succ:  l0000000000017970
l0000000000017ACC:
	a4 = 0x13000<64>
	a5 = a4 + -1200<i64>
	a6 = Mem0[a4 + -1200<i64>:word64]
	a0 = Mem0[a5 + 8<i64>:word64]
	a1 = Mem0[a5 + 16<i64>:word64]
	a2 = Mem0[a5 + 24<i64>:word64]
	a3 = Mem0[a5 + 32<i64>:word64]
	a4 = CONVERT(Mem0[a5 + 40<i64>:int32], int32, int64)
	a5 = gp + -800<i64>
	s0 = -1<i64>
	Mem0[a5:word64] = a6
	Mem0[a5 + 8<i64>:word64] = a0
	Mem0[a5 + 16<i64>:word64] = a1
	Mem0[a5 + 24<i64>:word64] = a2
	Mem0[a5 + 32<i64>:word64] = a3
	Mem0[a5 + 40<i64>:word32] = SLICE(a4, word32, 0)
	Mem0[gp + -2024<i64>:word32] = SLICE(s0, word32, 0)
	goto l0000000000017970
	// succ:  l0000000000017970
l0000000000017B14:
	a3 = 256<i64>
	a4 = 0x13000<64>
	a5 = s4 + -1480<i64>
	a4 = a4 + -1448<i64>
	a2 = 1<i64>
	a1 = a3
	a0 = gp + -800<i64>
	s0 = -1<i64>
	a0 = SEQ(0<32>, __snprintf_chk(a0, SLICE(a1, size_t, 0), SLICE(a2, int32, 0), SLICE(a3, size_t, 0), a4, a5))
	Mem0[gp + -2024<i64>:word32] = SLICE(s0, word32, 0)
	goto l0000000000017970
	// succ:  l0000000000017970
fn0000000000017924_exit:


// fn0000000000017B40
// Return size: 0
define fn0000000000017B40
fn0000000000017B40_entry:
	sp = fp
	// succ:  l0000000000017B40
l0000000000017B40:
	sp = sp + -80<i64>
	Mem0[sp + 64<i64>:word64] = s0
	Mem0[sp + 56<i64>:word64] = s1
	Mem0[sp + 48<i64>:word64] = s2
	Mem0[sp + 40<i64>:word64] = s3
	Mem0[sp + 32<i64>:word64] = s4
	Mem0[sp + 72<i64>:word64] = ra
	Mem0[sp + 24<i64>:word64] = s5
	Mem0[sp + 16<i64>:word64] = s6
	Mem0[sp + 8<i64>:word64] = s7
	s0 = a0
	s3 = a1
	s2 = a2
	s1 = a3
	s4 = a4
	call fn0000000000017924 (retsize: 0;)
	branch a0 == 0<64> l0000000000017BB0
	// succ:  l0000000000017B84 l0000000000017BB0
l0000000000017B84:
	ra = Mem0[sp + 72<i64>:word64]
	s0 = Mem0[sp + 64<i64>:word64]
	s1 = Mem0[sp + 56<i64>:word64]
	s2 = Mem0[sp + 48<i64>:word64]
	s3 = Mem0[sp + 40<i64>:word64]
	s4 = Mem0[sp + 32<i64>:word64]
	s5 = Mem0[sp + 24<i64>:word64]
	s6 = Mem0[sp + 16<i64>:word64]
	s7 = Mem0[sp + 8<i64>:word64]
	sp = sp + 80<i64>
	return
	// succ:  fn0000000000017B40_exit
l0000000000017BB0:
	a0 = s0
	call fn00000000000182B4 (retsize: 0;)
	a5 = Mem0[gp + -1944<i64>:word64]
	s7 = a0
	call a5 (retsize: 0;)
	a5 = Mem0[gp + -1952<i64>:word64]
	a1 = 16<i64>
	a0 = 1<i64>
	call a5 (retsize: 0;)
	s0 = a0
	branch a0 == 0<64> l0000000000017C3C
	// succ:  l0000000000017BDC l0000000000017C3C
l0000000000017BDC:
	a5 = Mem0[gp + -1992<i64>:word64]
	a4 = 1<i64>
	a1 = s7 << 0x20<u32>
	Mem0[a0 + 76<i64>:word32] = SLICE(a4, word32, 0)
	a1 = a1 >>u 0x20<u32>
	call a5 (retsize: 0;)
	s6 = a0
	branch a0 < 0<64> l0000000000017B84
	// succ:  l0000000000017BFC l0000000000017B84
l0000000000017BFC:
	a5 = Mem0[gp + -1960<i64>:word64]
	a1 = a0
	a0 = s0
	call a5 (retsize: 0;)
	branch a0 == 0<64> l0000000000017C18
	// succ:  l0000000000017C10 l0000000000017C18
l0000000000017C10:
	a0 = __strdup(a0)
	Mem0[s3:word64] = a0
	// succ:  l0000000000017C18
l0000000000017C18:
	a5 = Mem0[gp + -1968<i64>:word64]
	a0 = s6
	call a5 (retsize: 0;)
	branch a0 == 0<64> l0000000000017C30
	// succ:  l0000000000017C28 l0000000000017C30
l0000000000017C28:
	a0 = __strdup(a0)
	Mem0[s2:word64] = a0
	// succ:  l0000000000017C30
l0000000000017C30:
	a5 = Mem0[gp + -1976<i64>:word64]
	a0 = s0
	call a5 (retsize: 0;)
	// succ:  l0000000000017C3C
l0000000000017C3C:
	a5 = Mem0[gp + -1952<i64>:word64]
	a1 = 16<i64>
	a0 = 2<i64>
	call a5 (retsize: 0;)
	s0 = a0
	branch a0 == 0<64> l0000000000017CF4
	// succ:  l0000000000017C54 l0000000000017CF4
l0000000000017C54:
	a5 = Mem0[gp + -1984<i64>:word64]
	a4 = 1<i64>
	a1 = s7 << 0x20<u32>
	Mem0[s0 + 76<i64>:word32] = SLICE(a4, word32, 0)
	a1 = a1 >>u 0x20<u32>
	call a5 (retsize: 0;)
	s2 = a0
	branch a0 == 0<64> l0000000000017C94
	// succ:  l0000000000017C74 l0000000000017C94
l0000000000017C74:
	a0 = Mem0[a0 + 32<i64>:word64]
	branch a0 == 0<64> l0000000000017C84
	// succ:  l0000000000017C7C l0000000000017C84
l0000000000017C7C:
	a0 = __strdup(a0)
	Mem0[s1:word64] = a0
	// succ:  l0000000000017C84
l0000000000017C84:
	fa4 = SEQ(0xFFFFFFFF<32>, Mem0[s2 + 52<i64>:real32])
	v23 = SLICE(0<64>, int32, 0)
	fa5 = SEQ(0xFFFFFFFF<32>, v23)
	a5 = CONVERT(SLICE(fa4, real32, 0) == SLICE(fa5, real32, 0), bool, word64)
	branch a5 == 0<64> l0000000000017CC8
	// succ:  l0000000000017C94 l0000000000017CC8
l0000000000017C94:
	a0 = s0
	ra = Mem0[sp + 72<i64>:word64]
	s0 = Mem0[sp + 64<i64>:word64]
	s1 = Mem0[sp + 56<i64>:word64]
	s2 = Mem0[sp + 48<i64>:word64]
	s3 = Mem0[sp + 40<i64>:word64]
	s4 = Mem0[sp + 32<i64>:word64]
	s5 = Mem0[sp + 24<i64>:word64]
	s6 = Mem0[sp + 16<i64>:word64]
	s7 = Mem0[sp + 8<i64>:word64]
	t1 = Mem0[gp + -1976<i64>:word64]
	sp = sp + 80<i64>
	call t1 (retsize: 0;)
	return
	// succ:  fn0000000000017B40_exit
l0000000000017CC8:
	fa5 = SEQ(0xFFFFFFFF<32>, Mem0[s2 + 48<i64>:real32])
	fa4 = CONVERT(SLICE(fa4, real32, 0), real32, real64)
	a2 = 0x13000<64>
	fa5 = CONVERT(SLICE(fa5, real32, 0), real32, real64)
	a4 = fa4
	a2 = a2 + -1152<i64>
	a3 = fa5
	a1 = 1<i64>
	a0 = s4
	a0 = SEQ(0<32>, __asprintf_chk(a0, SLICE(a1, int32, 0), a2, fa3, fa4))
	goto l0000000000017C94
	// succ:  l0000000000017C94
l0000000000017CF4:
	a5 = Mem0[gp + -1952<i64>:word64]
	a1 = 16<i64>
	a0 = 6<i64>
	call a5 (retsize: 0;)
	s0 = a0
	branch a0 != 0<64> l0000000000017C54
	// succ:  l0000000000017D0C l0000000000017C54
l0000000000017D0C:
	goto l0000000000017B84
	// succ:  l0000000000017B84
fn0000000000017B40_exit:


// fn0000000000017D10
// Return size: 0
define fn0000000000017D10
fn0000000000017D10_entry:
	sp = fp
	// succ:  l0000000000017D10
l0000000000017D10:
	sp = sp + -80<i64>
	Mem0[sp + 64<i64>:word64] = s0
	Mem0[sp + 48<i64>:word64] = s2
	Mem0[sp + 40<i64>:word64] = s3
	Mem0[sp + 32<i64>:word64] = s4
	Mem0[sp + 24<i64>:word64] = s5
	Mem0[sp + 72<i64>:word64] = ra
	Mem0[sp + 56<i64>:word64] = s1
	Mem0[sp + 16<i64>:word64] = s6
	Mem0[sp + 8<i64>:word64] = s7
	s0 = a0
	s4 = a1
	s3 = a2
	s2 = a3
	s5 = a4
	call fn0000000000017924 (retsize: 0;)
	branch a0 == 0<64> l0000000000017D80
	// succ:  l0000000000017D54 l0000000000017D80
l0000000000017D54:
	ra = Mem0[sp + 72<i64>:word64]
	s0 = Mem0[sp + 64<i64>:word64]
	s1 = Mem0[sp + 56<i64>:word64]
	s2 = Mem0[sp + 48<i64>:word64]
	s3 = Mem0[sp + 40<i64>:word64]
	s4 = Mem0[sp + 32<i64>:word64]
	s5 = Mem0[sp + 24<i64>:word64]
	s6 = Mem0[sp + 16<i64>:word64]
	s7 = Mem0[sp + 8<i64>:word64]
	sp = sp + 80<i64>
	return
	// succ:  fn0000000000017D10_exit
l0000000000017D80:
	a5 = Mem0[gp + -1944<i64>:word64]
	call a5 (retsize: 0;)
	a5 = Mem0[gp + -1952<i64>:word64]
	a1 = 16<i64>
	a0 = 12<i64>
	call a5 (retsize: 0;)
	s1 = a0
	branch a0 == 0<64> l0000000000017E18
	// succ:  l0000000000017DA0 l0000000000017E18
l0000000000017DA0:
	a4 = CONVERT(Mem0[s0 + 4<i64>:uint32], uint32, word64)
	a5 = CONVERT(Mem0[s0 + 12<i64>:uint32], uint32, word64)
	a1 = CONVERT(Mem0[s0:uint32], uint32, word64)
	a2 = CONVERT(Mem0[s0 + 8<i64>:uint32], uint32, word64)
	a3 = Mem0[gp + -2000<i64>:word64]
	a4 = a4 << 0x20<u32>
	a5 = a5 << 0x20<u32>
	a6 = 1<i64>
	Mem0[a0 + 76<i64>:word32] = SLICE(a6, word32, 0)
	a1 = a4 | a1
	a2 = a5 | a2
	call a3 (retsize: 0;)
	s7 = a0
	branch a0 < 0<64> l0000000000017D54
	// succ:  l0000000000017DD8 l0000000000017D54
l0000000000017DD8:
	a5 = Mem0[gp + -1960<i64>:word64]
	a1 = a0
	a0 = s1
	call a5 (retsize: 0;)
	branch a0 == 0<64> l0000000000017DF4
	// succ:  l0000000000017DEC l0000000000017DF4
l0000000000017DEC:
	a0 = __strdup(a0)
	Mem0[s4:word64] = a0
	// succ:  l0000000000017DF4
l0000000000017DF4:
	a5 = Mem0[gp + -1968<i64>:word64]
	a0 = s7
	call a5 (retsize: 0;)
	branch a0 == 0<64> l0000000000017E0C
	// succ:  l0000000000017E04 l0000000000017E0C
l0000000000017E04:
	a0 = __strdup(a0)
	Mem0[s3:word64] = a0
	// succ:  l0000000000017E0C
l0000000000017E0C:
	a5 = Mem0[gp + -1976<i64>:word64]
	a0 = s1
	call a5 (retsize: 0;)
	// succ:  l0000000000017E18
l0000000000017E18:
	a5 = Mem0[gp + -1952<i64>:word64]
	a1 = 16<i64>
	a0 = 30<i64>
	call a5 (retsize: 0;)
	s1 = a0
	branch a0 == 0<64> l0000000000017EE8
	// succ:  l0000000000017E30 l0000000000017EE8
l0000000000017E30:
	a4 = CONVERT(Mem0[s0 + 4<i64>:uint32], uint32, word64)
	a5 = CONVERT(Mem0[s0 + 12<i64>:uint32], uint32, word64)
	a1 = CONVERT(Mem0[s0:uint32], uint32, word64)
	a2 = CONVERT(Mem0[s0 + 8<i64>:uint32], uint32, word64)
	a3 = Mem0[gp + -2008<i64>:word64]
	a4 = a4 << 0x20<u32>
	a5 = a5 << 0x20<u32>
	a6 = 1<i64>
	Mem0[s1 + 76<i64>:word32] = SLICE(a6, word32, 0)
	a1 = a4 | a1
	a2 = a5 | a2
	call a3 (retsize: 0;)
	s0 = a0
	branch a0 == 0<64> l0000000000017E88
	// succ:  l0000000000017E68 l0000000000017E88
l0000000000017E68:
	a0 = Mem0[a0 + 32<i64>:word64]
	branch a0 == 0<64> l0000000000017E78
	// succ:  l0000000000017E70 l0000000000017E78
l0000000000017E70:
	a0 = __strdup(a0)
	Mem0[s2:word64] = a0
	// succ:  l0000000000017E78
l0000000000017E78:
	fa4 = SEQ(0xFFFFFFFF<32>, Mem0[s0 + 52<i64>:real32])
	v24 = SLICE(0<64>, int32, 0)
	fa5 = SEQ(0xFFFFFFFF<32>, v24)
	a5 = CONVERT(SLICE(fa4, real32, 0) == SLICE(fa5, real32, 0), bool, word64)
	branch a5 == 0<64> l0000000000017EBC
	// succ:  l0000000000017E88 l0000000000017EBC
l0000000000017E88:
	a0 = s1
	ra = Mem0[sp + 72<i64>:word64]
	s0 = Mem0[sp + 64<i64>:word64]
	s1 = Mem0[sp + 56<i64>:word64]
	s2 = Mem0[sp + 48<i64>:word64]
	s3 = Mem0[sp + 40<i64>:word64]
	s4 = Mem0[sp + 32<i64>:word64]
	s5 = Mem0[sp + 24<i64>:word64]
	s6 = Mem0[sp + 16<i64>:word64]
	s7 = Mem0[sp + 8<i64>:word64]
	t1 = Mem0[gp + -1976<i64>:word64]
	sp = sp + 80<i64>
	call t1 (retsize: 0;)
	return
	// succ:  fn0000000000017D10_exit
l0000000000017EBC:
	fa5 = SEQ(0xFFFFFFFF<32>, Mem0[s0 + 48<i64>:real32])
	fa4 = CONVERT(SLICE(fa4, real32, 0), real32, real64)
	a2 = 0x13000<64>
	fa5 = CONVERT(SLICE(fa5, real32, 0), real32, real64)
	a4 = fa4
	a2 = a2 + -1152<i64>
	a3 = fa5
	a1 = 1<i64>
	a0 = s5
	a0 = SEQ(0<32>, __asprintf_chk(a0, SLICE(a1, int32, 0), a2, fa3, fa4))
	goto l0000000000017E88
	// succ:  l0000000000017E88
l0000000000017EE8:
	a5 = Mem0[gp + -1952<i64>:word64]
	a1 = 16<i64>
	a0 = 31<i64>
	call a5 (retsize: 0;)
	s1 = a0
	branch a0 != 0<64> l0000000000017E30
	// succ:  l0000000000017F00 l0000000000017E30
l0000000000017F00:
	goto l0000000000017D54
	// succ:  l0000000000017D54
fn0000000000017D10_exit:


// fn0000000000017F04
// Return size: 0
define fn0000000000017F04
fn0000000000017F04_entry:
	sp = fp
	// succ:  l0000000000017F04
l0000000000017F04:
	sp = sp + -80<i64>
	Mem0[sp + 40<i64>:word64] = s3
	a5 = Mem0[gp + -1936<i64>:word64]
	Mem0[sp + 64<i64>:word64] = s0
	Mem0[sp + 56<i64>:word64] = s1
	Mem0[sp + 48<i64>:word64] = s2
	Mem0[sp + 32<i64>:word64] = s4
	Mem0[sp + 24<i64>:word64] = s5
	Mem0[sp + 16<i64>:word64] = s6
	s0 = a1
	Mem0[sp + 72<i64>:word64] = ra
	s5 = a2
	s4 = a3
	Mem0[sp + 8<i64>:word64] = a5
	Mem0[sp:word64] = 0<64>
	call fn00000000000182B4 (retsize: 0;)
	a1 = CONVERT(SLICE(a0, word32, 0) >>u 16<i32>, word32, int64)
	t1 = CONVERT(SLICE(a0, word32, 0) >>u 8<i32>, word32, int64)
	t3 = 32<i64>
	s6 = CONVERT(SLICE(a0, word32, 0) >>u 24<i32>, word32, int64)
	s1 = a1 & 255<i64>
	s2 = t1 & 255<i64>
	branch s0 == t3 l0000000000018048
	// succ:  l0000000000017F60 l0000000000018048
l0000000000017F60:
	a1 = 24<i64>
	branch s0 == a1 l0000000000018070
	// succ:  l0000000000017F68 l0000000000018070
l0000000000017F68:
	a0 = 16<i64>
	branch s0 == a0 l00000000000180D8
	// succ:  l0000000000017F70 l00000000000180D8
l0000000000017F70:
	a5 = 8<i64>
	branch s0 == a5 l00000000000180F8
	// succ:  l0000000000017F78 l00000000000180F8
l0000000000017F78:
	branch a1 <u s0 l0000000000017FBC
	// succ:  l0000000000017F7C l0000000000017FBC
l0000000000017F7C:
	branch a0 <u s0 l0000000000018094
	// succ:  l0000000000017F80 l0000000000018094
l0000000000017F80:
	branch a5 <u s0 l0000000000018008
	// succ:  l0000000000017F84 l0000000000018008
l0000000000017F84:
	a0 = 0<i64>
	// succ:  l0000000000017F88
l0000000000017F88:
	a4 = Mem0[sp + 8<i64>:word64]
	a5 = Mem0[gp + -1936<i64>:word64]
	branch a4 != a5 l0000000000018114
	// succ:  l0000000000017F94 l0000000000018114
l0000000000017F94:
	ra = Mem0[sp + 72<i64>:word64]
	s0 = Mem0[sp + 64<i64>:word64]
	s1 = Mem0[sp + 56<i64>:word64]
	s2 = Mem0[sp + 48<i64>:word64]
	s3 = Mem0[sp + 40<i64>:word64]
	s4 = Mem0[sp + 32<i64>:word64]
	s5 = Mem0[sp + 24<i64>:word64]
	s6 = Mem0[sp + 16<i64>:word64]
	sp = sp + 80<i64>
	return
	// succ:  fn0000000000017F04_exit
l0000000000017FBC:
	a0 = s5
	call fn00000000000182B4 (retsize: 0;)
	s0 = a0
	a0 = s4
	call fn00000000000182B4 (retsize: 0;)
	a2 = 0x13000<64>
	a4 = a0 & 255<i64>
	a7 = s6
	a6 = s1
	a5 = s2
	a3 = s0 & 255<i64>
	a2 = a2 + -1040<i64>
	a1 = 1<i64>
	a0 = sp
	a0 = SEQ(0<32>, __asprintf_chk(a0, SLICE(a1, int32, 0), a2, SLICE(a3, uint32, 0), SLICE(a4, uint32, 0), SLICE(a5, uint32, 0), SLICE(a6, uint32, 0), SLICE(a7, uint32, 0)))
	// succ:  l0000000000017FF8
l0000000000017FF8:
	a5 = -1<i64>
	branch a0 == a5 l0000000000017F84
	// succ:  l0000000000018000 l0000000000017F84
l0000000000018000:
	a0 = Mem0[sp:word64]
	goto l0000000000017F88
	// succ:  l0000000000017F88
l0000000000018008:
	a0 = s5
	call fn00000000000182B4 (retsize: 0;)
	s0 = a0
	a0 = s4
	call fn00000000000182B4 (retsize: 0;)
	a4 = CONVERT(SLICE(a0, word32, 0) >>u 16<i32>, word32, int64)
	a3 = CONVERT(SLICE(s0, word32, 0) >>u 16<i32>, word32, int64)
	a2 = 0x13000<64>
	a5 = s6
	a4 = a4 & 255<i64>
	a3 = a3 & 255<i64>
	a2 = a2 + -976<i64>
	a1 = 1<i64>
	a0 = sp
	a0 = SEQ(0<32>, __asprintf_chk(a0, SLICE(a1, int32, 0), a2, SLICE(a3, uint32, 0), SLICE(a4, uint32, 0), SLICE(a5, uint32, 0)))
	goto l0000000000017FF8
	// succ:  l0000000000017FF8
l0000000000018048:
	a2 = 0x13000<64>
	a3 = a0 & 255<i64>
	a6 = s6
	a5 = s1
	a4 = s2
	a2 = a2 + -1144<i64>
	a1 = 1<i64>
	a0 = sp
	a0 = SEQ(0<32>, __asprintf_chk(a0, SLICE(a1, int32, 0), a2, SLICE(a3, uint32, 0), SLICE(a4, uint32, 0), SLICE(a5, uint32, 0), SLICE(a6, uint32, 0)))
	goto l0000000000017FF8
	// succ:  l0000000000017FF8
l0000000000018070:
	a2 = 0x13000<64>
	a5 = s6
	a4 = s1
	a3 = s2
	a2 = a2 + -1112<i64>
	a1 = 1<i64>
	a0 = sp
	a0 = SEQ(0<32>, __asprintf_chk(a0, SLICE(a1, int32, 0), a2, SLICE(a3, uint32, 0), SLICE(a4, uint32, 0), SLICE(a5, uint32, 0)))
	goto l0000000000017FF8
	// succ:  l0000000000017FF8
l0000000000018094:
	a0 = s5
	call fn00000000000182B4 (retsize: 0;)
	s0 = a0
	a0 = s4
	call fn00000000000182B4 (retsize: 0;)
	a4 = CONVERT(SLICE(a0, word32, 0) >>u 8<i32>, word32, int64)
	a3 = CONVERT(SLICE(s0, word32, 0) >>u 8<i32>, word32, int64)
	a2 = 0x13000<64>
	a6 = s6
	a5 = s1
	a4 = a4 & 255<i64>
	a3 = a3 & 255<i64>
	a2 = a2 + -1008<i64>
	a1 = 1<i64>
	a0 = sp
	a0 = SEQ(0<32>, __asprintf_chk(a0, SLICE(a1, int32, 0), a2, SLICE(a3, uint32, 0), SLICE(a4, uint32, 0), SLICE(a5, uint32, 0), SLICE(a6, uint32, 0)))
	goto l0000000000017FF8
	// succ:  l0000000000017FF8
l00000000000180D8:
	a2 = 0x13000<64>
	a4 = s6
	a3 = s1
	a2 = a2 + -1088<i64>
	a1 = 1<i64>
	a0 = sp
	a0 = SEQ(0<32>, __asprintf_chk(a0, SLICE(a1, int32, 0), a2, SLICE(a3, uint32, 0), SLICE(a4, uint32, 0)))
	goto l0000000000017FF8
	// succ:  l0000000000017FF8
l00000000000180F8:
	a2 = 0x13000<64>
	a3 = s6
	a2 = a2 + -1064<i64>
	a1 = 1<i64>
	a0 = sp
	a0 = SEQ(0<32>, __asprintf_chk(a0, SLICE(a1, int32, 0), a2, SLICE(a3, uint32, 0)))
	goto l0000000000017FF8
	// succ:  l0000000000017FF8
l0000000000018114:
	__stack_chk_fail()
fn0000000000017F04_exit:


// fn0000000000018118
// Return size: 0
define fn0000000000018118
fn0000000000018118_entry:
	sp = fp
	// succ:  l0000000000018118
l0000000000018118:
	sp = sp + -288<i64>
	Mem0[sp + 272<i64>:word64] = s0
	a5 = Mem0[gp + -1936<i64>:word64]
	Mem0[sp + 280<i64>:word64] = ra
	t4 = a1 & 3<i64>
	Mem0[sp + 264<i64>:word64] = a5
	branch t4 != 0<64> l00000000000182A8
	// succ:  l0000000000018134 l00000000000182A8
l0000000000018134:
	a5 = a1 & 7<i64>
	a4 = 4<i64>
	t5 = CONVERT(SLICE(a1, word32, 0) >>u 3<i32>, word32, int64)
	branch a5 == a4 l0000000000018264
	// succ:  l0000000000018144 l0000000000018264
l0000000000018144:
	branch t5 == 0<64> l00000000000181FC
	// succ:  l0000000000018148 l00000000000181FC
l0000000000018148:
	v12 = SLICE(t5, word32, 0)
	a1 = CONVERT(v12 - 1<i32>, word32, int64)
	a4 = t4
	t1 = 9<i64>
	a7 = 46<i64>
	t3 = -1<i64>
	goto l0000000000018190
	// succ:  l0000000000018190
l0000000000018160:
	a2 = a2 << 0x20<u32>
	a5 = sp + 272<i64>
	a2 = a2 >>u 0x20<u32>
	a3 = a3 << 0x20<u32>
	a2 = a5 + a2
	a3 = a3 >>u 0x20<u32>
	Mem0[a2 + -264<i64>:byte] = SLICE(a6, byte, 0)
	a3 = a5 + a3
	Mem0[a3 + -264<i64>:byte] = SLICE(a7, byte, 0)
	v32 = SLICE(a1, word32, 0)
	a1 = CONVERT(v32 - 1<i32>, word32, int64)
	v33 = SLICE(a4, word32, 0)
	a4 = CONVERT(v33 + 4<i32>, word32, int64)
	branch a1 == t3 l00000000000181F4
	// succ:  l0000000000018190 l00000000000181F4
l0000000000018190:
	a5 = a1 << 0x20<u32>
	a5 = a5 >>u 0x20<u32>
	a5 = a0 + a5
	a5 = CONVERT(Mem0[a5:byte], byte, word64)
	v17 = SLICE(a4, word32, 0)
	a3 = CONVERT(v17 + 1<i32>, word32, int64)
	a2 = a5 & 15<i64>
	a6 = a2 + 87<i64>
	branch t1 <u a2 l00000000000181B4
	// succ:  l00000000000181B0 l00000000000181B4
l00000000000181B0:
	a6 = a2 + 48<i64>
	// succ:  l00000000000181B4
l00000000000181B4:
	a2 = a4 << 0x20<u32>
	t6 = sp + 272<i64>
	a2 = a2 >>u 0x20<u32>
	a3 = a3 << 0x20<u32>
	a2 = t6 + a2
	a3 = a3 >>u 0x20<u32>
	Mem0[a2 + -264<i64>:byte] = SLICE(a6, byte, 0)
	a3 = t6 + a3
	a5 = a5 >>u 4<u32>
	Mem0[a3 + -264<i64>:byte] = SLICE(a7, byte, 0)
	v27 = SLICE(a4, word32, 0)
	a2 = CONVERT(v27 + 2<i32>, word32, int64)
	v28 = SLICE(a4, word32, 0)
	a3 = CONVERT(v28 + 3<i32>, word32, int64)
	a6 = a5 + 48<i64>
	branch t1 >=u a5 l0000000000018160
	// succ:  l00000000000181EC l0000000000018160
l00000000000181EC:
	a6 = a5 + 87<i64>
	goto l0000000000018160
	// succ:  l0000000000018160
l00000000000181F4:
	t5 = CONVERT(SLICE(t5, word32, 0) << 2<64>, word32, int64)
	v34 = SLICE(t4, word32, 0)
	v35 = SLICE(t5, word32, 0)
	t4 = CONVERT(v34 + v35, word32, int64)
	// succ:  l00000000000181FC
l00000000000181FC:
	t4 = t4 << 0x20<u32>
	a5 = 0x7000<64>
	a4 = sp + 8<i64>
	t4 = t4 >>u 0x20<u32>
	t4 = a4 + t4
	v21 = SLICE(a5, word32, 0)
	a4 = CONVERT(v21 + 105<i32>, word32, int64)
	v22 = SLICE(a5, word32, 0)
	a5 = CONVERT(v22 + 609<i32>, word32, int64)
	Mem0[t4 + 4<i64>:word16] = SLICE(a5, word16, 0)
	a5 = 0x6000<64>
	v23 = SLICE(a5, word32, 0)
	a5 = CONVERT(v23 + 368<i32>, word32, int64)
	Mem0[t4:word16] = SLICE(a4, word16, 0)
	a4 = 0x3000<64>
	v24 = SLICE(a4, word32, 0)
	a4 = CONVERT(v24 - 458<i32>, word32, int64)
	Mem0[t4 + 6<i64>:word16] = SLICE(a5, word16, 0)
	a5 = 46<i64>
	a0 = sp + 8<i64>
	Mem0[t4 + 2<i64>:word16] = SLICE(a4, word16, 0)
	Mem0[t4 + 8<i64>:word16] = SLICE(a5, word16, 0)
	a0 = __strdup(a0)
	// succ:  l0000000000018248
l0000000000018248:
	a4 = Mem0[sp + 264<i64>:word64]
	a5 = Mem0[gp + -1936<i64>:word64]
	branch a4 != a5 l00000000000182B0
	// succ:  l0000000000018254 l00000000000182B0
l0000000000018254:
	ra = Mem0[sp + 280<i64>:word64]
	s0 = Mem0[sp + 272<i64>:word64]
	sp = sp + 288<i64>
	return
	// succ:  fn0000000000018118_exit
l0000000000018264:
	v29 = SLICE(a1, word32, 0)
	v30 = SLICE(a4, word32, 0)
	a5 = CONVERT(v29 + v30, word32, int64)
	a5 = CONVERT(SLICE(a5, word32, 0) >>u 3<i32>, word32, int64)
	v31 = SLICE(a5, word32, 0)
	a5 = CONVERT(v31 - 1<i32>, word32, int64)
	a5 = a5 << 0x20<u32>
	a5 = a5 >>u 0x20<u32>
	a5 = a0 + a5
	a5 = CONVERT(Mem0[a5:byte], byte, word64)
	a3 = 9<i64>
	a5 = a5 >>u 4<u32>
	a4 = a5 + 87<i64>
	branch a3 <u a5 l0000000000018294
	// succ:  l0000000000018290 l0000000000018294
l0000000000018290:
	a4 = a5 + 48<i64>
	// succ:  l0000000000018294
l0000000000018294:
	a5 = 46<i64>
	Mem0[sp + 8<i64>:byte] = SLICE(a4, byte, 0)
	Mem0[sp + 9<i64>:byte] = SLICE(a5, byte, 0)
	t4 = 2<i64>
	goto l0000000000018144
	// succ:  l0000000000018144
l00000000000182A8:
	a0 = 0<i64>
	goto l0000000000018248
	// succ:  l0000000000018248
l00000000000182B0:
	__stack_chk_fail()
fn0000000000018118_exit:


// fn00000000000182B4
// Return size: 0
define fn00000000000182B4
fn00000000000182B4_entry:
	sp = fp
	// succ:  l00000000000182B4
l00000000000182B4:
	a5 = CONVERT(SLICE(a0, word32, 0) << 0x18<64>, word32, int64)
	a3 = CONVERT(SLICE(a0, word32, 0) >>u 24<i32>, word32, int64)
	a3 = a3 | a5
	a4 = 0xFF0000<64>
	a5 = 0x10000<64>
	a4 = a0 & a4
	v8 = SLICE(a5, word32, 0)
	a5 = CONVERT(v8 - 256<i32>, word32, int64)
	a4 = CONVERT(SLICE(a4, word32, 0) >> 8<u32>, word32, int64)
	a0 = a0 & a5
	a0 = CONVERT(SLICE(a0, word32, 0) << 8<64>, word32, int64)
	a5 = a3 | a4
	a0 = a5 | a0
	return
	// succ:  fn00000000000182B4_exit
fn00000000000182B4_exit:


// fn00000000000182E8
// Return size: 0
define fn00000000000182E8
fn00000000000182E8_entry:
	sp = fp
	// succ:  l00000000000182E8
l00000000000182E8:
	sp = sp + -64<i64>
	Mem0[sp + 48<i64>:word64] = s0
	Mem0[sp + 32<i64>:word64] = s2
	s0 = 0x000000000001A2F4<p64>
	s0 = s0 + -1244<i64>
	s2 = 0x000000000001A2FC<p64>
	s2 = s2 + -1244<i64>
	s2 = s2 - s0
	Mem0[sp + 56<i64>:word64] = ra
	Mem0[sp + 40<i64>:word64] = s1
	Mem0[sp + 24<i64>:word64] = s3
	Mem0[sp + 16<i64>:word64] = s4
	Mem0[sp + 8<i64>:word64] = s5
	s2 = s2 >> 3<u32>
	branch s2 == 0<64> l0000000000018354
	// succ:  l0000000000018324 l0000000000018354
l0000000000018324:
	s5 = a0
	s4 = a1
	s3 = a2
	s1 = 0<i64>
	// succ:  l0000000000018334
l0000000000018334:
	a5 = Mem0[s0:word64]
	a2 = s3
	a1 = s4
	a0 = s5
	s1 = s1 + 1<i64>
	call a5 (retsize: 0;)
	s0 = s0 + 8<i64>
	branch s2 != s1 l0000000000018334
	// succ:  l0000000000018354 l0000000000018334
l0000000000018354:
	ra = Mem0[sp + 56<i64>:word64]
	s0 = Mem0[sp + 48<i64>:word64]
	s1 = Mem0[sp + 40<i64>:word64]
	s2 = Mem0[sp + 32<i64>:word64]
	s3 = Mem0[sp + 24<i64>:word64]
	s4 = Mem0[sp + 16<i64>:word64]
	s5 = Mem0[sp + 8<i64>:word64]
	sp = sp + 64<i64>
	return
	// succ:  fn00000000000182E8_exit
fn00000000000182E8_exit:


// fn0000000000018378
// Return size: 0
define fn0000000000018378
fn0000000000018378_entry:
	sp = fp
	// succ:  l0000000000018378
l0000000000018378:
	return
	// succ:  fn0000000000018378_exit
fn0000000000018378_exit:


