// _start
// Return size: 0
define _start
_start_entry:
	sp = fp
	// succ:  l00010958
l00010958:
	i6 = 0<32> | 0<32>
	l0 = Mem0[sp + 64<i32>:word32]
	l1 = sp + 0x44<32>
	o1 = 0x20C00<32>
	Mem0[o1 + 608<i32>:word32] = l1
	l2 = l0 << 2<32>
	l2 = l2 + 4<32>
	l2 = l1 + l2
	l3 = 0x20C00<32>
	Mem0[l3 + 572<i32>:word32] = l2
	l5 = 0<32>
	l5 = l5 | 0<32>
	g0 = 0<32> | l5
	NZVC = cond(g0)
	branch Test(EQ,Z) l000109F8
	// succ:  l00010994 l000109F8
l00010994:
	l6 = l5 << 2<32>
	l7 = l6 & 0x300<32>
	l6 = l5 & 0x3F<32>
	l7 = l6 | l7
	l5 = l7 << 0x16<32>
	l4 = 0x20C00<32>
	l4 = l4 | 0x258<32>
	Mem0[l4:word32] = fsr
	l6 = Mem0[l4:word32]
	l7 = 0x303FFC00<32>
	l7 = l7 | 0x3FF<32>
	l6 = l6 & l7
	l6 = l6 | l5
	Mem0[l4:word32] = l6
	fsr = Mem0[l4:word32]
	l5 = 0<32>
	l5 = l5 | 0<32>
	l5 = l5 & 0x3F<32>
	g0 = l5 - 0x35<32>
	NZVC = cond(g0)
	branch Test(NE,Z) l000109F8
	// succ:  l000109E8 l000109F8
l000109E8:
	l5 = 0x20C00<32>
	l5 = l5 | 0x25C<32>
	l4 = 0<32> | 1<32>
	Mem0[l5:word32] = l4
	// succ:  l000109F8
l000109F8:
	sp = sp - 0x20<32>
	g0 = 0<32> | g1
	NZVC = cond(g0)
	branch Test(EQ,Z) l00010A04_ds_t
	// succ:  l00010A04_ds_f l00010A04_ds_t
l00010A04_ds_f:
	o0 = 0<32> | g1
	goto l00010A08
	// succ:  l00010A08
l00010A04_ds_t:
	o0 = 0<32> | g1
	goto l00010A10
	// succ:  l00010A10
l00010A08:
	atexit(o0)
l00010A10:
	o0 = 0x10C00<32>
	o0 = o0 | 0xB8<32>
	atexit(o0)
	call _init (retsize: 0;)
	o0 = 0<32> | l0
	o1 = 0<32> | l1
	o2 = 0<32> | l2
	o3 = 0<32> | l3
	call main (retsize: 0;)
	exit(o0)
_start_exit:


// func1
// Return size: 0
define func1
func1_entry:
	sp = fp
	// succ:  l00010A5C
l00010A5C:
	return
	// succ:  func1_exit
func1_exit:


// func2
// Return size: 0
define func2
func2_entry:
	sp = fp
	// succ:  l00010A74
l00010A74:
	return
	// succ:  func2_exit
func2_exit:


// func3
// Return size: 0
define func3
func3_entry:
	sp = fp
	// succ:  l00010A8C
l00010A8C:
	return
	// succ:  func3_exit
func3_exit:


// func4
// Return size: 0
define func4
func4_entry:
	sp = fp
	// succ:  l00010AA4
l00010AA4:
	return
	// succ:  func4_exit
func4_exit:


// func5
// Return size: 0
define func5
func5_entry:
	sp = fp
	// succ:  l00010ABC
l00010ABC:
	return
	// succ:  func5_exit
func5_exit:


// func6
// Return size: 0
define func6
func6_entry:
	sp = fp
	// succ:  l00010AD4
l00010AD4:
	return
	// succ:  func6_exit
func6_exit:


// func7
// Return size: 0
define func7
func7_entry:
	sp = fp
	// succ:  l00010AEC
l00010AEC:
	return
	// succ:  func7_exit
func7_exit:


// func8
// Return size: 0
define func8
func8_entry:
	sp = fp
	// succ:  l00010B04
l00010B04:
	return
	// succ:  func8_exit
func8_exit:


// main
// Return size: 0
define main
main_entry:
	sp = fp
	// succ:  l00010B0C
l00010B0C:
	v4 = sp + 0xFFFFFFA0<32>
	Mem0[v4:word32] = i0
	Mem0[v4 + 4<i32>:word32] = i1
	Mem0[v4 + 8<i32>:word32] = i2
	Mem0[v4 + 12<i32>:word32] = i3
	Mem0[v4 + 16<i32>:word32] = i4
	Mem0[v4 + 20<i32>:word32] = i5
	Mem0[v4 + 24<i32>:word32] = i6
	Mem0[v4 + 28<i32>:word32] = i7
	Mem0[v4 + 32<i32>:word32] = l0
	Mem0[v4 + 36<i32>:word32] = l1
	Mem0[v4 + 40<i32>:word32] = l2
	Mem0[v4 + 44<i32>:word32] = l3
	Mem0[v4 + 48<i32>:word32] = l4
	Mem0[v4 + 52<i32>:word32] = l5
	Mem0[v4 + 56<i32>:word32] = l6
	Mem0[v4 + 60<i32>:word32] = l7
	i0 = o0
	i1 = o1
	i2 = o2
	i3 = o3
	i4 = o4
	i5 = o5
	i6 = sp
	i7 = o7
	sp = v4
	o0 = 0<32> | 1<32>
	g0 = i0 - 1<32>
	NZVC = cond(g0)
	branch Test(LE,NZV) l00010B1C_ds_t
	goto l00010B20
	// succ:  l00010B20 l00010B1C_ds_t
l00010B1C_ds_t:
	o0 = 0<32> | 0<32>
	// succ:  l00010B20
l00010B20:
	g0 = 0<32> | o0
	NZVC = cond(g0)
	branch Test(EQ,Z) l00010B28_ds_t
	// succ:  l00010B28_ds_f l00010B28_ds_t
l00010B28_ds_f:
	o0 = 0x10800<32>
	goto l00010B2C
	// succ:  l00010B2C
l00010B28_ds_t:
	o0 = 0x10800<32>
	goto l00010B34
	// succ:  l00010B34
l00010B2C:
	o0 = o0 + 0x25C<32>
	goto l00010B3C
	// succ:  l00010B3C
l00010B34:
	o0 = 0x10800<32>
	o0 = o0 + 0x274<32>
	// succ:  l00010B3C
l00010B3C:
	branch Test(EQ,Z) l00010B40_ds_t
	// succ:  l00010B40_ds_f l00010B40_ds_t
l00010B40_ds_f:
	o1 = 0x10800<32>
	goto l00010B44
	// succ:  l00010B44
l00010B40_ds_t:
	o1 = 0x10800<32>
	goto l00010B4C
	// succ:  l00010B4C
l00010B44:
	o3 = o1 + 0x28C<32>
	goto l00010B54
	// succ:  l00010B54
l00010B4C:
	o1 = 0x10800<32>
	o3 = o1 + 0x2A4<32>
	// succ:  l00010B54
l00010B54:
	branch Test(EQ,Z) l00010B58_ds_t
	// succ:  l00010B58_ds_f l00010B58_ds_t
l00010B58_ds_f:
	o1 = 0x10800<32>
	goto l00010B5C
	// succ:  l00010B5C
l00010B58_ds_t:
	o1 = 0x10800<32>
	goto l00010B64
	// succ:  l00010B64
l00010B5C:
	o2 = o1 + 0x2BC<32>
	goto l00010B6C
	// succ:  l00010B6C
l00010B64:
	o1 = 0x10800<32>
	o2 = o1 + 0x2D4<32>
	// succ:  l00010B6C
l00010B6C:
	branch Test(EQ,Z) l00010B70_ds_t
	// succ:  l00010B70_ds_f l00010B70_ds_t
l00010B70_ds_f:
	o1 = 0x10800<32>
	goto l00010B74
	// succ:  l00010B74
l00010B70_ds_t:
	o1 = 0x10800<32>
	goto l00010B7C
	// succ:  l00010B7C
l00010B74:
	o1 = o1 + 0x2EC<32>
	goto l00010B84
	// succ:  l00010B84
l00010B7C:
	o1 = 0x10800<32>
	o1 = o1 + 0x304<32>
	// succ:  l00010B84
l00010B84:
	branch Test(EQ,Z) l00010B88_ds_t
	// succ:  l00010B88_ds_f l00010B88_ds_t
l00010B88_ds_f:
	o4 = 0x10800<32>
	goto l00010B8C
	// succ:  l00010B8C
l00010B88_ds_t:
	o4 = 0x10800<32>
	goto l00010BE8
	// succ:  l00010BE8
l00010B8C:
	o4 = o4 + 0x25C<32>
	g0 = o0 - o4
	NZVC = cond(g0)
	branch Test(NE,Z) l00010B98_ds_t
	// succ:  l00010B98_ds_f l00010B98_ds_t
l00010B98_ds_f:
	o0 = 0x10800<32>
	goto l00010B9C
	// succ:  l00010B9C
l00010B98_ds_t:
	o0 = 0x10800<32>
	goto l00010BDC
	// succ:  l00010BDC
l00010B9C:
	o0 = o0 + 0x28C<32>
	g0 = o3 - o0
	NZVC = cond(g0)
	branch Test(NE,Z) l00010BA8_ds_t
	// succ:  l00010BA8_ds_f l00010BA8_ds_t
l00010BA8_ds_f:
	i1 = 0<32> | 0<32>
	goto l00010BAC
	// succ:  l00010BAC
l00010BA8_ds_t:
	i1 = 0<32> | 0<32>
	goto l00010BE0
	// succ:  l00010BE0
l00010BAC:
	o0 = 0x10800<32>
	o0 = o0 + 0x2BC<32>
	g0 = o2 - o0
	NZVC = cond(g0)
	branch Test(NE,Z) l00010BBC_ds_t
	// succ:  l00010BBC_ds_f l00010BBC_ds_t
l00010BBC_ds_f:
	i1 = 0<32> | 0<32>
	goto l00010BC0
	// succ:  l00010BC0
l00010BBC_ds_t:
	i1 = 0<32> | 0<32>
	goto l00010BE0
	// succ:  l00010BE0
l00010BC0:
	o0 = 0x10800<32>
	o0 = o0 + 0x2EC<32>
	g0 = o1 - o0
	NZVC = cond(g0)
	branch Test(NE,Z) l00010BD0_ds_t
	// succ:  l00010BD0_ds_f l00010BD0_ds_t
l00010BD0_ds_f:
	i1 = 0<32> | 0<32>
	goto l00010BD4
	// succ:  l00010BD4
l00010BD0_ds_t:
	i1 = 0<32> | 0<32>
	goto l00010BE0
	// succ:  l00010BE0
l00010BD4:
	i1 = 0<32> | 1<32>
	goto l00010C40
	// succ:  l00010C40
l00010BDC:
	i1 = 0<32> | 0<32>
	// succ:  l00010BE0
l00010BE0:
	g0 = i1 - 0<32>
	NZVC = cond(g0)
	goto l00010C44
	// succ:  l00010C44
l00010BE8:
	o4 = 0x10800<32>
	o4 = o4 + 0x274<32>
	g0 = o0 - o4
	NZVC = cond(g0)
	branch Test(NE,Z) l00010BF8_ds_t
	// succ:  l00010BF8_ds_f l00010BF8_ds_t
l00010BF8_ds_f:
	o0 = 0x10800<32>
	goto l00010BFC
	// succ:  l00010BFC
l00010BF8_ds_t:
	o0 = 0x10800<32>
	goto l00010C3C
	// succ:  l00010C3C
l00010BFC:
	o0 = o0 + 0x2A4<32>
	g0 = o3 - o0
	NZVC = cond(g0)
	branch Test(NE,Z) l00010C3C
	// succ:  l00010C0C l00010C3C
l00010C0C:
	o0 = 0x10800<32>
	o0 = o0 + 0x2D4<32>
	g0 = o2 - o0
	NZVC = cond(g0)
	branch Test(NE,Z) l00010C3C
	// succ:  l00010C20 l00010C3C
l00010C20:
	o0 = 0x10800<32>
	o0 = o0 + 0x304<32>
	g0 = o1 - o0
	NZVC = cond(g0)
	branch Test(NE,Z) l00010C3C
	// succ:  l00010C34 l00010C3C
l00010C34:
	i1 = 0<32> | 1<32>
	goto l00010C40
	// succ:  l00010C40
l00010C3C:
	i1 = 0<32> | 0<32>
	// succ:  l00010C40
l00010C40:
	g0 = i1 - 0<32>
	NZVC = cond(g0)
	// succ:  l00010C44
l00010C44:
	branch Test(EQ,Z) l00010C48_ds_t
	// succ:  l00010C48_ds_f l00010C48_ds_t
l00010C48_ds_f:
	g1 = 0x10C00<32>
	goto l00010C4C
	// succ:  l00010C4C
l00010C48_ds_t:
	g1 = 0x10C00<32>
	goto l00010C5C
	// succ:  l00010C5C
l00010C4C:
	o0 = g1 + 0xF8<32>
	o0 = printf("Pass\n")
	i0 = 0<32> | 0<32>
	goto l00010C6C
	// succ:  l00010C6C
l00010C5C:
	g1 = 0x10C00<32>
	o0 = g1 + 0x100<32>
	o0 = printf("Failed!\n")
	i0 = 0<32> | 0<32>
	// succ:  l00010C6C
l00010C6C:
	g0 = i1 - 0<32>
	NZVC = cond(g0)
	branch Test(EQ,Z) l00010C74_ds_t
	goto l00010C78
	// succ:  l00010C78 l00010C74_ds_t
l00010C74_ds_t:
	i0 = 0<32> | 1<32>
	// succ:  l00010C78
l00010C78:
	v33 = sp
	o0 = i0
	o1 = i1
	o2 = i2
	o3 = i3
	o4 = i4
	o5 = i5
	sp = i6
	o7 = i7
	i0 = Mem0[v33:word32]
	i1 = Mem0[v33 + 4<i32>:word32]
	i2 = Mem0[v33 + 8<i32>:word32]
	i3 = Mem0[v33 + 12<i32>:word32]
	i4 = Mem0[v33 + 16<i32>:word32]
	i5 = Mem0[v33 + 20<i32>:word32]
	i6 = Mem0[v33 + 24<i32>:word32]
	i7 = Mem0[v33 + 28<i32>:word32]
	l0 = Mem0[v33 + 32<i32>:word32]
	l1 = Mem0[v33 + 36<i32>:word32]
	l2 = Mem0[v33 + 40<i32>:word32]
	l3 = Mem0[v33 + 44<i32>:word32]
	l4 = Mem0[v33 + 48<i32>:word32]
	l5 = Mem0[v33 + 52<i32>:word32]
	l6 = Mem0[v33 + 56<i32>:word32]
	l7 = Mem0[v33 + 60<i32>:word32]
	return
	// succ:  main_exit
main_exit:


