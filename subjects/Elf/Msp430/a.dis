// __write_char
// Return size: 0
define __write_char
fn09B2_entry:
	// succ:  l09B2
l09B2:
	sp = fp
	v4 = Mem0[pc:word20]
	pc = v4
fn09B2_exit:


// fn00004000
// Return size: 2
define fn00004000
fn00004000_entry:
	// succ:  l00004000
l00004000:
	sp = fp
	Mem0[0x0120:ptr16] = 0x5A80
	r15 = 0x5B78
	r14 = 0x0200
	r13 = 0x021C
	VNZC = cond(r13 - r14)
	branch Test(EQ,Z) l00004020
	// succ:  l00004016 l00004020
l00004016:
	v8 = Mem0[r15:byte]
	r15 = r15 + 1
	v9 = Mem0[r14:byte]
	v9 = v8
	Mem0[r14:byte] = v9
	r14 = r14 + 0x0001
	VNZC = cond(r14)
	VNZC = cond(r14 - r13)
	branch Test(UGE,C) l00004016
	// succ:  l00004020 l00004016
l00004020:
	r15 = 0x021C
	r13 = 0x09B4
	VNZC = cond(r13 - r15)
	branch Test(EQ,Z) l00004036
	// succ:  l0000402C l00004036
l0000402C:
	v11 = Mem0[r15:byte]
	v11 = 0x00
	Mem0[r15:byte] = v11
	r15 = r15 + 0x0001
	VNZC = cond(r15)
	VNZC = cond(r15 - r13)
	branch Test(UGE,C) l0000402C
	// succ:  l00004036 l0000402C
l00004036:
	pc = 0x414C
	pc = 0x403E
	return
	// succ:  fn00004000_exit
fn00004000_exit:


// task_idle
// Return size: 0
define task_idle
task_idle_entry:
	// succ:  l4048
l4048:
	sp = fp
	sp = sp - 2
	Mem0[sp:word16] = r11
	sp = sp - 2
	Mem0[sp:word16] = r10
	sp = sp - 2
	Mem0[sp:word16] = r9
	call xTaskGetTickCount (retsize: 2;)
	r10 = r15
	r10 = r10 + 0x03E8
	VNZC = cond(r10)
	r9 = 0x0000
	// succ:  l405A
l405A:
	r9 = r9 + 0x0001
	VNZC = cond(r9)
	call xTaskGetTickCount (retsize: 2;)
	r11 = r15
	r15 = r10
	r15 = r15 - r11
	VNZC = cond(r15)
	VNZC = cond(r15 - 0x0001)
	branch Test(GE,VN) l4080
	// succ:  l406A l4080
l406A:
	sp = sp - 2
	Mem0[sp:word16] = r9
	sp = sp - 2
	Mem0[sp:word16] = 0x4040
	call printf (retsize: 2;)
	r10 = r11
	r10 = r10 + 0x03E8
	VNZC = cond(r10)
	r9 = 0x0000
	sp = sp + 0x0004
	VNZC = cond(sp)
	goto l405A
	// succ:  l405A
l4080:
	r15 = 0x0000
task_idle_exit:


// task_1
// Return size: 0
define task_1
task_1_entry:
	// succ:  l4096
l4096:
	sp = fp
	sp = sp - 0x0002
	VNZC = cond(sp)
	call xTaskGetTickCount (retsize: 2;)
	v5 = Mem0[sp:word16]
	v5 = r15
	Mem0[sp:word16] = v5
	// succ:  l40A0
l40A0:
	Mem0[0x0031:ptr16] = Mem0[0x0031:ptr16] ^ 0x01
	VNZC = cond(Mem0[0x0031:ptr16])
	r15 = 0x0058
	call putchar (retsize: 2;)
	r14 = 0x01F4
	r15 = sp
	call vTaskDelayUntil (retsize: 2;)
	goto l40A0
	// succ:  l40A0
task_1_exit:


// task_2
// Return size: 0
define task_2
task_2_entry:
	// succ:  l40BC
l40BC:
	sp = fp
	sp = sp - 0x0002
	VNZC = cond(sp)
	call xTaskGetTickCount (retsize: 2;)
	v5 = Mem0[sp:word16]
	v5 = r15
	Mem0[sp:word16] = v5
	// succ:  l40C6
l40C6:
	Mem0[0x0031:ptr16] = Mem0[0x0031:ptr16] ^ 0x02
	VNZC = cond(Mem0[0x0031:ptr16])
	r15 = 0x0059
	call putchar (retsize: 2;)
	r14 = 0x00FA
	r15 = sp
	call vTaskDelayUntil (retsize: 2;)
	goto l40C6
	// succ:  l40C6
task_2_exit:


// task_3
// Return size: 0
define task_3
task_3_entry:
	// succ:  l40E2
l40E2:
	sp = fp
	sp = sp - 0x0002
	VNZC = cond(sp)
	call xTaskGetTickCount (retsize: 2;)
	v5 = Mem0[sp:word16]
	v5 = r15
	Mem0[sp:word16] = v5
	// succ:  l40EC
l40EC:
	Mem0[0x0031:ptr16] = Mem0[0x0031:ptr16] ^ 0x04
	VNZC = cond(Mem0[0x0031:ptr16])
	r15 = 0x005A
	call putchar (retsize: 2;)
	r14 = 0x0019
	r15 = sp
	call vTaskDelayUntil (retsize: 2;)
	goto l40EC
	// succ:  l40EC
task_3_exit:


// main
// Return size: 2
define main
main_entry:
	// succ:  l414C
l414C:
	sp = fp
	sp = 0x0A00
	Mem0[0x0120:ptr16] = 0x5A80
	Mem0[0x0056:ptr16] = 0xFFE0
	Mem0[0x0057:ptr16] = 0x0007
	Mem0[0x0032:ptr16] = 0x0007
	Mem0[0x0031:ptr16] = 0x0007
	sp = sp - 2
	Mem0[sp:word16] = 0x0010
	sp = sp - 2
	Mem0[sp:word16] = 0x0000
	sp = sp - 2
	Mem0[sp:word16] = 0x8000
	r13 = 0x2580
	r14 = 0x0000
	r15 = 0x0010
	call init_uart_isr (retsize: 2;)
	r15 = 0x00
	call uart_putchar_isr_mode (retsize: 2;)
	sp = sp - 2
	Mem0[sp:word16] = 0x4108
	sp = sp - 2
	Mem0[sp:word16] = 0x4111
	sp = sp - 2
	Mem0[sp:word16] = 0x411D
	call printf (retsize: 2;)
	r15 = 0x01
	call uart_putchar_isr_mode (retsize: 2;)
	sp = sp - 2
	Mem0[sp:word16] = 0x0000
	sp = sp - 2
	Mem0[sp:word16] = 0x0003
	r12 = 0x0000
	r13 = 0x0032
	r14 = 0x414B
	r15 = 0x4096
	call xTaskCreate (retsize: 2;)
	sp = sp - 2
	Mem0[sp:word16] = 0x0000
	sp = sp - 2
	Mem0[sp:word16] = 0x0003
	r12 = 0x0000
	r13 = 0x0032
	r14 = 0x414B
	r15 = 0x40BC
	call xTaskCreate (retsize: 2;)
	sp = sp - 2
	Mem0[sp:word16] = 0x0000
	sp = sp - 2
	Mem0[sp:word16] = 0x0003
	r12 = 0x0000
	r13 = 0x0032
	r14 = 0x414B
	r15 = 0x40E2
	call xTaskCreate (retsize: 2;)
	sp = sp - 2
	Mem0[sp:word16] = 0x0000
	sp = sp - 2
	Mem0[sp:word16] = 0x0000
	r12 = 0x0000
	r13 = 0x0096
	r14 = 0x414B
	r15 = 0x4048
	call xTaskCreate (retsize: 2;)
	call vTaskStartScheduler (retsize: 2;)
	sp = sp + 0x001C
	VNZC = cond(sp)
	r15 = 0x0000
	pc = 0x5AD8
	// succ:  l420A_thunk_msp430_compute_modulator_bits
l420A_thunk_msp430_compute_modulator_bits:
	call msp430_compute_modulator_bits (retsize: 0;)
	return
	// succ:  main_exit
main_exit:


// msp430_compute_modulator_bits
// Return size: 2
define msp430_compute_modulator_bits
msp430_compute_modulator_bits_entry:
	// succ:  l420E
l420E:
	sp = fp
	sp = sp - 2
	Mem0[sp:word16] = r11
	sp = sp - 2
	Mem0[sp:word16] = r10
	sp = sp - 2
	Mem0[sp:word16] = r9
	sp = sp - 2
	Mem0[sp:word16] = r8
	sp = sp - 2
	Mem0[sp:word16] = r7
	sp = sp - 2
	Mem0[sp:word16] = r6
	sp = sp - 2
	Mem0[sp:word16] = r5
	sp = sp - 2
	Mem0[sp:word16] = r4
	sp = sp - 0x0006
	VNZC = cond(sp)
	r11 = 0x0018
	r11 = r11 + sp
	VNZC = cond(r11)
	r4 = r14
	r5 = r15
	r6 = r12
	r7 = r13
	v16 = Mem0[r11:word16]
	v17 = Mem0[sp:word16]
	v17 = v16
	Mem0[sp:word16] = v17
	r10 = r14
	r11 = r15
	call fn00005B04 (retsize: 2;)
	v18 = Mem0[sp + 2:word16]
	v18 = r12
	Mem0[sp + 2:word16] = v18
	v19 = Mem0[sp + 4:word16]
	v19 = r13
	Mem0[sp + 4:word16] = v19
	v20 = Mem0[sp + 2:word16]
	r15 = v20
	r14 = r15
	r15 = 0x0000
	r10 = r4
	r11 = r5
	r12 = r14
	r13 = r15
	sp = sp - 2
	Mem0[sp:word16] = sr
	sr = sr & ~0x0008
	call fn00005ADC (retsize: 2;)
	v22 = Mem0[sp:word16]
	sp = sp + 2
	sr = v22
	r8 = r14
	r9 = r15
	r8 = r8 - r6
	VNZC = cond(r8)
	r9 = r9 - r7 - C
	VNZC = cond(r9)
	v24 = Mem0[sp:word16]
	VNZC = cond(v24 - 0x0000)
	branch Test(EQ,Z) l4274
	// succ:  l426C l4274
l426C:
	v26 = Mem0[sp:word16]
	r15 = v26
	v27 = Mem0[sp + 2:word16]
	v28 = Mem0[r15:word16]
	v28 = v27
	Mem0[r15:word16] = v28
	// succ:  l4274
l4274:
	r7 = 0x00
	r10 = 0x0000
	r11 = 0x0000
	r6 = 0x00
	// succ:  l427C
l427C:
	r10 = r10 + r8
	VNZC = cond(r10)
	r11 = r11 + r9 + C
	VNZC = cond(r11)
	r14 = r4
	r15 = r5
	r14 = r14 ^ 0xFFFF
	VNZC = cond(r14)
	r15 = r15 ^ 0xFFFF
	VNZC = cond(r15)
	r14 = r14 + 0x0001
	VNZC = cond(r14)
	r15 = r15 + 0x0000 + C
	VNZC = cond(r15)
	r12 = r10
	r13 = r11
	r12 = r12 + r12
	VNZC = cond(r12)
	r13 = r13 + r13 + C
	VNZC = cond(r13)
	r12 = r12 - r14
	VNZC = cond(r12)
	r13 = r13 - r15 - C
	VNZC = cond(r13)
	branch Test(GE,VN) l42AE
	// succ:  l429A l42AE
l429A:
	r10 = r10 + r4
	VNZC = cond(r10)
	r11 = r11 + r5 + C
	VNZC = cond(r11)
	r15 = 0x0001
	r14 = r6
	VNZC = cond(r14 - 0x0000)
	branch Test(EQ,Z) l42AC
	// succ:  l42A6 l42AC
l42A6:
	r15 = r15 + r15
	VNZC = cond(r15)
	r14 = r14 - 0x0001
	VNZC = cond(r14)
	branch Test(NE,Z) l42A6
	// succ:  l42AC l42A6
l42AC:
	r7 = r7 | r15
	// succ:  l42AE
l42AE:
	r6 = r6 + 0x01
	VNZC = cond(r6)
	VNZC = cond(r6 - 0x08)
	branch Test(UGE,C) l427C
	// succ:  l42B4 l427C
l42B4:
	r15 = r7
	sp = sp + 0x0006
	VNZC = cond(sp)
	v30 = Mem0[sp:word16]
	sp = sp + 2
	r4 = v30
	v31 = Mem0[sp:word16]
	sp = sp + 2
	r5 = v31
	v32 = Mem0[sp:word16]
	sp = sp + 2
	r6 = v32
	v33 = Mem0[sp:word16]
	sp = sp + 2
	r7 = v33
	v34 = Mem0[sp:word16]
	sp = sp + 2
	r8 = v34
	v35 = Mem0[sp:word16]
	sp = sp + 2
	r9 = v35
	v36 = Mem0[sp:word16]
	sp = sp + 2
	r10 = v36
	v37 = Mem0[sp:word16]
	sp = sp + 2
	r11 = v37
	v38 = Mem0[sp:word16]
	sp = sp + 2
	return
	// succ:  msp430_compute_modulator_bits_exit
msp430_compute_modulator_bits_exit:


// init_uart_isr
// Return size: 2
define init_uart_isr
init_uart_isr_entry:
	// succ:  l42CC
l42CC:
	sp = fp
	sp = sp - 2
	Mem0[sp:word16] = r11
	sp = sp - 2
	Mem0[sp:word16] = r10
	sp = sp - 2
	Mem0[sp:word16] = r9
	sp = sp - 2
	Mem0[sp:word16] = r8
	sp = sp - 2
	Mem0[sp:word16] = r7
	sp = sp - 2
	Mem0[sp:word16] = r6
	sp = sp - 2
	Mem0[sp:word16] = r4
	sp = sp - 0x0002
	VNZC = cond(sp)
	r4 = sp
	r12 = 0x0012
	r12 = r12 + sp
	VNZC = cond(r12)
	r6 = r15
	r7 = r13
	r8 = r14
	v15 = Mem0[r12:word16]
	r12 = r12 + 2
	r9 = v15
	v16 = Mem0[r12:word16]
	r12 = r12 + 2
	r10 = v16
	r12 = r12 - 0x0004
	VNZC = cond(r12)
	v17 = Mem0[r12 + 4:byte]
	r15 = v17
	sr = sr & ~0x0008
	Mem0[0x0218:ptr16] = Mem0[0x0218:ptr16] + 0x0001
	VNZC = cond(Mem0[0x0218:ptr16])
	r11 = r15
	r14 = 0x0001
	call xQueueCreate (retsize: 2;)
	Mem0[0x021C:ptr16] = r15
	r14 = 0x0001
	r15 = r11
	call xQueueCreate (retsize: 2;)
	Mem0[0x021E:ptr16] = r15
	Mem0[0x0078:ptr16] = 0x01
	Mem0[0x0078:ptr16] = Mem0[0x0078:ptr16] | 0x0010
	r6 = r6 & 0x0030
	V = false
	NZC = cond(r6)
	Mem0[0x0079:ptr16] = r6
	sp = sp - 2
	Mem0[sp:word16] = r4
	r12 = r9
	r13 = r10
	r14 = r7
	r15 = r8
	call msp430_compute_modulator_bits (retsize: 2;)
	r14 = r15
	v21 = Mem0[r4:byte]
	Mem0[0x007C:ptr16] = v21
	v22 = Mem0[r4:word16]
	r15 = v22
	r15 = __swpb(r15)
	r15 = r15 & 0xFF
	V = false
	NZC = cond(r15)
	Mem0[0x007D:ptr16] = r15
	Mem0[0x007B:ptr16] = r14
	Mem0[0x0005:ptr16] = Mem0[0x0005:ptr16] | 0x0030
	Mem0[0x0078:ptr16] = 0x0010
	Mem0[0x001B:ptr16] = Mem0[0x001B:ptr16] | 0xFFC0
	Mem0[0x0001:ptr16] = Mem0[0x0001:ptr16] | 0x0030
	sp = sp + 0x0002
	VNZC = cond(sp)
	VNZC = cond(0x0218 - 0x0000)
	branch Test(EQ,Z) l436E
	// succ:  l4366 l436E
l4366:
	Mem0[0x0218:ptr16] = Mem0[0x0218:ptr16] + 0xFFFF
	VNZC = cond(Mem0[0x0218:ptr16])
	branch Test(NE,Z) l436E
	// succ:  l436C l436E
l436C:
	sr = sr | 0x0008
	// succ:  l436E
l436E:
	sp = sp + 0x0002
	VNZC = cond(sp)
	v24 = Mem0[sp:word16]
	sp = sp + 2
	r4 = v24
	v25 = Mem0[sp:word16]
	sp = sp + 2
	r6 = v25
	v26 = Mem0[sp:word16]
	sp = sp + 2
	r7 = v26
	v27 = Mem0[sp:word16]
	sp = sp + 2
	r8 = v27
	v28 = Mem0[sp:word16]
	sp = sp + 2
	r9 = v28
	v29 = Mem0[sp:word16]
	sp = sp + 2
	r10 = v29
	v30 = Mem0[sp:word16]
	sp = sp + 2
	r11 = v30
	v31 = Mem0[sp:word16]
	sp = sp + 2
	return
	// succ:  init_uart_isr_exit
init_uart_isr_exit:


// getchar
// Return size: 2
define getchar
getchar_entry:
	// succ:  l4380
l4380:
	sp = fp
	sp = sp - 0x0002
	VNZC = cond(sp)
	r14 = 0x0064
	r15 = sp
	call x_getchar (retsize: 2;)
	VNZC = cond(r15 - 0x0000)
	branch Test(EQ,Z) l4396
	// succ:  l4390 l4396
l4390:
	v7 = Mem0[sp:byte]
	r15 = v7
	v8 = SLICE(r15, byte, 0)
	r15 = (int16) v8
	V = false
	NZC = cond(r15)
	goto l4398
	// succ:  l4398
l4396:
	r15 = 0xFFFF
	// succ:  l4398
l4398:
	sp = sp + 0x0002
	VNZC = cond(sp)
	v11 = Mem0[sp:word16]
	sp = sp + 2
	return
	// succ:  getchar_exit
getchar_exit:


// uart_putchar_isr_mode
// Return size: 2
define uart_putchar_isr_mode
uart_putchar_isr_mode_entry:
	// succ:  l439C
l439C:
	sp = fp
	Mem0[0x0200:ptr16] = r15
	v4 = Mem0[sp:word16]
	sp = sp + 2
	return
	// succ:  uart_putchar_isr_mode_exit
uart_putchar_isr_mode_exit:


// putchar
// Return size: 2
define putchar
putchar_entry:
	// succ:  l000043A2
l000043A2:
	sp = fp
	sp = sp - 2
	Mem0[sp:word16] = r11
	r11 = r15
	VNZC = cond(r15 - 0x000A)
	branch Test(EQ,Z) l000043D6
	// succ:  l000043AC l000043D6
l000043AC:
	VNZC = cond(0x0200 - 0x00)
	branch Test(NE,Z) l000043CA
	// succ:  l000043B2 l000043CA
l000043B2:
	v7 = 0x0079 & 0x01
	NZ = cond(v7)
	C = Test(NE,v7)
	V = false
	branch Test(EQ,Z) l000043B2
	// succ:  l000043B8 l000043B2
l000043B8:
	Mem0[0x007F:ptr16] = r11
	r15 = 0x0001
	// succ:  l000043BE
l000043BE:
	VNZC = cond(r15 - 0x0000)
	branch Test(EQ,Z) l000043C6
	// succ:  l000043C2 l000043C6
l000043C2:
	r15 = r11
	goto l000043E0
	// succ:  l000043E0
l000043C6:
	r15 = 0xFFFF
	goto l000043E0
	// succ:  l000043E0
l000043CA:
	r14 = 0x0064
	r15 = r11
	call x_putchar (retsize: 2;)
	goto l000043BE
	// succ:  l000043BE
l000043D6:
	r15 = 0x000D
	call putchar (retsize: 2;)
	goto l000043AC
	// succ:  l000043AC
l000043E0:
	v11 = Mem0[sp:word16]
	sp = sp + 2
	r11 = v11
	v12 = Mem0[sp:word16]
	sp = sp + 2
	return
	// succ:  putchar_exit
putchar_exit:


// x_getchar
// Return size: 2
define x_getchar
x_getchar_entry:
	// succ:  l43E4
l43E4:
	sp = fp
	r13 = r14
	r14 = r15
	r15 = 0x021C
	call xQueueReceive (retsize: 2;)
	VNZC = cond(r15 - 0x0000)
	branch Test(EQ,Z) l43F8
	// succ:  l43F4 l43F8
l43F4:
	r15 = 0x0001
	v8 = Mem0[sp:word16]
	sp = sp + 2
	return
	// succ:  x_getchar_exit
l43F8:
	r15 = 0x0000
	v9 = Mem0[sp:word16]
	sp = sp + 2
	return
	// succ:  x_getchar_exit
x_getchar_exit:


// x_putchar
// Return size: 2
define x_putchar
x_putchar_entry:
	// succ:  l000043FC
l000043FC:
	sp = fp
	sp = sp - 0x0002
	VNZC = cond(sp)
	v5 = Mem0[sp:byte]
	v5 = r15
	Mem0[sp:byte] = v5
	r13 = r14
	sr = sr & ~0x0008
	Mem0[0x0218:ptr16] = Mem0[0x0218:ptr16] + 0x0001
	VNZC = cond(Mem0[0x0218:ptr16])
	VNZC = cond(0x0220 - 0x0001)
	branch Test(EQ,Z) l00004440
	// succ:  l00004410 l00004440
l00004410:
	r14 = sp
	r15 = 0x021E
	call xQueueSend (retsize: 2;)
	VNZC = cond(0x0220 - 0x0001)
	branch Test(EQ,Z) l00004430
	// succ:  l00004420 l00004430
l00004420:
	VNZC = cond(0x0218 - 0x0000)
	branch Test(EQ,Z) l0000444A
	// succ:  l00004426 l0000444A
l00004426:
	Mem0[0x0218:ptr16] = Mem0[0x0218:ptr16] + 0xFFFF
	VNZC = cond(Mem0[0x0218:ptr16])
	branch Test(NE,Z) l0000444A
	// succ:  l0000442C l0000444A
l0000442C:
	sr = sr | 0x0008
	goto l0000444A
	// succ:  l0000444A
l00004430:
	VNZC = cond(r15 - 0x0001)
	branch Test(NE,Z) l00004420
	// succ:  l00004434 l00004420
l00004434:
	r13 = 0x0000
	r14 = sp
	r15 = 0x021E
	call xQueueReceive (retsize: 2;)
	// succ:  l00004440
l00004440:
	Mem0[0x0220:ptr16] = 0x0000
	v10 = Mem0[sp:byte]
	Mem0[0x007F:ptr16] = v10
	goto l00004420
	// succ:  l00004420
l0000444A:
	r15 = 0x0001
	sp = sp + 0x0002
	VNZC = cond(sp)
	v11 = Mem0[sp:word16]
	sp = sp + 2
	return
	// succ:  x_putchar_exit
x_putchar_exit:


// vRxISR
// Return size: 2
define vRxISR
vRxISR_entry:
	// succ:  l4450
l4450:
	sp = fp
	sp = sp - 2
	Mem0[sp:word16] = r15
	sp = sp - 2
	Mem0[sp:word16] = r14
	sp = sp - 2
	Mem0[sp:word16] = r13
	sp = sp - 2
	Mem0[sp:word16] = r12
	sp = sp - 0x0002
	VNZC = cond(sp)
	v8 = Mem0[sp:byte]
	v8 = 0x007E
	Mem0[sp:byte] = v8
	r13 = 0x0000
	r14 = sp
	r15 = 0x021C
	call xQueueSendFromISR (retsize: 2;)
	VNZC = cond(r15 - 0x0000)
	branch Test(EQ,Z) l4474
	// succ:  l4470 l4474
l4470:
	call vPortYield (retsize: 2;)
	// succ:  l4474
l4474:
	sp = sp + 0x0002
	VNZC = cond(sp)
	v10 = Mem0[sp:word16]
	sp = sp + 2
	r12 = v10
	v11 = Mem0[sp:word16]
	sp = sp + 2
	r13 = v11
	v12 = Mem0[sp:word16]
	sp = sp + 2
	r14 = v12
	v13 = Mem0[sp:word16]
	sp = sp + 2
	r15 = v13
	return
	// succ:  vRxISR_exit
vRxISR_exit:


// vTxISR
// Return size: 2
define vTxISR
vTxISR_entry:
	// succ:  l4480
l4480:
	sp = fp
	sp = sp - 2
	Mem0[sp:word16] = r15
	sp = sp - 2
	Mem0[sp:word16] = r14
	sp = sp - 2
	Mem0[sp:word16] = r13
	sp = sp - 2
	Mem0[sp:word16] = r12
	sp = sp - 0x0004
	VNZC = cond(sp)
	r13 = sp
	r14 = sp
	r14 = r14 + 0x0002
	VNZC = cond(r14)
	r15 = 0x021E
	call xQueueReceiveFromISR (retsize: 2;)
	VNZC = cond(r15 - 0x0001)
	branch Test(EQ,Z) l44A2
	// succ:  l449C l44A2
l449C:
	Mem0[0x0220:ptr16] = 0x0001
	goto l44A8
	// succ:  l44A8
l44A2:
	v9 = Mem0[sp + 2:byte]
	Mem0[0x007F:ptr16] = v9
	// succ:  l44A8
l44A8:
	sp = sp + 0x0004
	VNZC = cond(sp)
	v10 = Mem0[sp:word16]
	sp = sp + 2
	r12 = v10
	v11 = Mem0[sp:word16]
	sp = sp + 2
	r13 = v11
	v12 = Mem0[sp:word16]
	sp = sp + 2
	r14 = v12
	v13 = Mem0[sp:word16]
	sp = sp + 2
	r15 = v13
	return
	// succ:  vTxISR_exit
vTxISR_exit:


// xTaskCreate
// Return size: 2
define xTaskCreate
xTaskCreate_entry:
	// succ:  l000044B4
l000044B4:
	sp = fp
	sp = sp - 2
	Mem0[sp:word16] = r11
	sp = sp - 2
	Mem0[sp:word16] = r10
	sp = sp - 2
	Mem0[sp:word16] = r9
	sp = sp - 2
	Mem0[sp:word16] = r8
	sp = sp - 2
	Mem0[sp:word16] = r7
	sp = sp - 2
	Mem0[sp:word16] = r6
	sp = sp - 2
	Mem0[sp:word16] = r5
	r11 = 0x0010
	r11 = r11 + sp
	VNZC = cond(r11)
	r6 = r15
	r9 = r14
	r10 = r13
	r7 = r12
	v15 = Mem0[r11:word16]
	r8 = v15
	v16 = Mem0[r11 + 2:word16]
	r5 = v16
	r15 = r13
	call prvAllocateTCBAndStack (retsize: 2;)
	r11 = r15
	VNZC = cond(r15 - 0x0000)
	branch Test(EQ,Z) l000045A0
	// succ:  l000044E2 l000045A0
l000044E2:
	r12 = r8
	r13 = r9
	r14 = r10
	call prvInitialiseTCBVariables (retsize: 2;)
	v18 = Mem0[r11 + 36:word16]
	r15 = v18
	r15 = r15 + r15
	VNZC = cond(r15)
	v19 = Mem0[r11 + 2:word16]
	r15 = r15 + v19
	VNZC = cond(r15)
	r15 = r15 - 0x0002
	VNZC = cond(r15)
	r13 = r7
	r14 = r6
	call pxPortInitialiseStack (retsize: 2;)
	v20 = Mem0[r11:word16]
	v20 = r15
	Mem0[r11:word16] = v20
	sr = sr & ~0x0008
	Mem0[0x0218:ptr16] = Mem0[0x0218:ptr16] + 0x0001
	VNZC = cond(Mem0[0x0218:ptr16])
	Mem0[0x0206:ptr16] = Mem0[0x0206:ptr16] + 0x0001
	VNZC = cond(Mem0[0x0206:ptr16])
	VNZC = cond(0x0206 - 0x0001)
	branch Test(EQ,Z) l00004596
	// succ:  l00004514 l00004596
l00004514:
	VNZC = cond(0x020E - 0x0000)
	branch Test(NE,Z) l0000452A
	// succ:  l0000451A l0000452A
l0000451A:
	r15 = 0x0202
	v22 = Mem0[r15 + 6:word16]
	r15 = v22
	VNZC = cond(r8 - r15)
	branch Test(UGE,C) l0000452A
	// succ:  l00004526 l0000452A
l00004526:
	Mem0[0x0202:ptr16] = r11
	// succ:  l0000452A
l0000452A:
	v25 = Mem0[r11 + 6:word16]
	r15 = v25
	VNZC = cond(0x020A - r15)
	branch Test(ULT,C) l00004538
	// succ:  l00004534 l00004538
l00004534:
	Mem0[0x020A:ptr16] = r15
	// succ:  l00004538
l00004538:
	v35 = Mem0[r11 + 4:word16]
	v35 = 0x0214
	Mem0[r11 + 4:word16] = v35
	Mem0[0x0214:ptr16] = Mem0[0x0214:ptr16] + 0x0001
	VNZC = cond(Mem0[0x0214:ptr16])
	v36 = Mem0[r11 + 8:word16]
	v36 = 0x0000
	Mem0[r11 + 8:word16] = v36
	VNZC = cond(0x020C - r15)
	branch Test(ULT,C) l00004550
	// succ:  l0000454C l00004550
l0000454C:
	Mem0[0x020C:ptr16] = r15
	// succ:  l00004550
l00004550:
	r14 = r11
	r14 = r14 + 0x0008
	VNZC = cond(r14)
	r15 = r15 + r15
	VNZC = cond(r15)
	r15 = r15 + r15
	VNZC = cond(r15)
	r15 = r15 + r15
	VNZC = cond(r15)
	r15 = r15 + r15
	VNZC = cond(r15)
	r15 = r15 + 0x0222
	VNZC = cond(r15)
	call vListInsertEnd (retsize: 2;)
	r10 = 0x0001
	VNZC = cond(0x0218 - 0x0000)
	branch Test(EQ,Z) l00004574
	// succ:  l0000456C l00004574
l0000456C:
	Mem0[0x0218:ptr16] = Mem0[0x0218:ptr16] + 0xFFFF
	VNZC = cond(Mem0[0x0218:ptr16])
	branch Test(NE,Z) l00004574
	// succ:  l00004572 l00004574
l00004572:
	sr = sr | 0x0008
	// succ:  l00004574
l00004574:
	VNZC = cond(r10 - 0x0001)
	branch Test(NE,Z) l000045A4
	// succ:  l00004578 l000045A4
l00004578:
	VNZC = cond(r5 - 0x0000)
	branch Test(EQ,Z) l00004580
	// succ:  l0000457C l00004580
l0000457C:
	v24 = Mem0[r5:word16]
	v24 = r11
	Mem0[r5:word16] = v24
	// succ:  l00004580
l00004580:
	VNZC = cond(0x020E - 0x0000)
	branch Test(EQ,Z) l000045A4
	// succ:  l00004586 l000045A4
l00004586:
	r15 = 0x0202
	v34 = Mem0[r15 + 6:word16]
	VNZC = cond(v34 - r8)
	branch Test(ULT,C) l000045A4
	// succ:  l00004590 l000045A4
l00004590:
	call vPortYield (retsize: 2;)
	goto l000045A4
	// succ:  l000045A4
l00004596:
	Mem0[0x0202:ptr16] = r11
	call prvInitialiseTaskLists (retsize: 2;)
	goto l0000452A
	// succ:  l0000452A
l000045A0:
	r10 = 0xFFFF
	goto l00004574
	// succ:  l00004574
l000045A4:
	r15 = r10
	v26 = Mem0[sp:word16]
	sp = sp + 2
	r5 = v26
	v27 = Mem0[sp:word16]
	sp = sp + 2
	r6 = v27
	v28 = Mem0[sp:word16]
	sp = sp + 2
	r7 = v28
	v29 = Mem0[sp:word16]
	sp = sp + 2
	r8 = v29
	v30 = Mem0[sp:word16]
	sp = sp + 2
	r9 = v30
	v31 = Mem0[sp:word16]
	sp = sp + 2
	r10 = v31
	v32 = Mem0[sp:word16]
	sp = sp + 2
	r11 = v32
	v33 = Mem0[sp:word16]
	sp = sp + 2
	return
	// succ:  xTaskCreate_exit
xTaskCreate_exit:


// vTaskDelete
// Return size: 2
define vTaskDelete
vTaskDelete_entry:
	// succ:  l45B6
l45B6:
	sp = fp
	sp = sp - 2
	Mem0[sp:word16] = r11
	sp = sp - 2
	Mem0[sp:word16] = r10
	sp = sp - 2
	Mem0[sp:word16] = r9
	r9 = r15
	sr = sr & ~0x0008
	Mem0[0x0218:ptr16] = Mem0[0x0218:ptr16] + 0x0001
	VNZC = cond(Mem0[0x0218:ptr16])
	r11 = r15
	VNZC = cond(r15 - 0x0000)
	branch Test(EQ,Z) l460C
	// succ:  l45CA l460C
l45CA:
	r10 = r11
	r10 = r10 + 0x0008
	VNZC = cond(r10)
	r15 = r10
	call vListRemove (retsize: 2;)
	v10 = Mem0[r11 + 26:word16]
	VNZC = cond(v10 - 0x0000)
	branch Test(NE,Z) l4600
	// succ:  l45DA l4600
l45DA:
	r14 = r10
	r15 = 0x0296
	call vListInsertEnd (retsize: 2;)
	Mem0[0x0204:ptr16] = Mem0[0x0204:ptr16] + 0x0001
	VNZC = cond(Mem0[0x0204:ptr16])
	VNZC = cond(0x0218 - 0x0000)
	branch Test(EQ,Z) l45F6
	// succ:  l45EE l45F6
l45EE:
	Mem0[0x0218:ptr16] = Mem0[0x0218:ptr16] + 0xFFFF
	VNZC = cond(Mem0[0x0218:ptr16])
	branch Test(NE,Z) l45F6
	// succ:  l45F4 l45F6
l45F4:
	sr = sr | 0x0008
	// succ:  l45F6
l45F6:
	VNZC = cond(r9 - 0x0000)
	branch Test(NE,Z) l4612
	// succ:  l45FA l4612
l45FA:
	call vPortYield (retsize: 2;)
	goto l4612
	// succ:  l4612
l4600:
	r11 = r11 + 0x0012
	VNZC = cond(r11)
	r15 = r11
	call vListRemove (retsize: 2;)
	goto l45DA
	// succ:  l45DA
l460C:
	r11 = 0x0202
	goto l45CA
	// succ:  l45CA
l4612:
	v12 = Mem0[sp:word16]
	sp = sp + 2
	r9 = v12
	v13 = Mem0[sp:word16]
	sp = sp + 2
	r10 = v13
	v14 = Mem0[sp:word16]
	sp = sp + 2
	r11 = v14
	v15 = Mem0[sp:word16]
	sp = sp + 2
	return
	// succ:  vTaskDelete_exit
vTaskDelete_exit:


// vTaskDelayUntil
// Return size: 2
define vTaskDelayUntil
vTaskDelayUntil_entry:
	// succ:  l0000461A
l0000461A:
	sp = fp
	sp = sp - 2
	Mem0[sp:word16] = r11
	sp = sp - 2
	Mem0[sp:word16] = r10
	sp = sp - 2
	Mem0[sp:word16] = r9
	r9 = r15
	r11 = r14
	r10 = 0x0000
	call vTaskSuspendAll (retsize: 2;)
	v8 = Mem0[r9:word16]
	r15 = v8
	r11 = r11 + r15
	VNZC = cond(r11)
	VNZC = cond(0x0208 - r15)
	branch Test(ULT,C) l00004690
	// succ:  l00004634 l00004690
l00004634:
	VNZC = cond(r11 - r15)
	branch Test(ULT,C) l00004640
	// succ:  l00004638 l00004640
l00004638:
	VNZC = cond(0x0208 - r11)
	branch Test(ULT,C) l00004640
	// succ:  l0000463E l00004640
l0000463E:
	r10 = 0x0001
	// succ:  l00004640
l00004640:
	v11 = Mem0[r9:word16]
	v11 = r11
	Mem0[r9:word16] = v11
	VNZC = cond(r10 - 0x0000)
	branch Test(NE,Z) l00004656
	// succ:  l00004648 l00004656
l00004648:
	call xTaskResumeAll (retsize: 2;)
	VNZC = cond(r15 - 0x0000)
	branch Test(NE,Z) l00004696
	// succ:  l00004650 l00004696
l00004650:
	call vPortYield (retsize: 2;)
	goto l00004696
	// succ:  l00004696
l00004656:
	r15 = 0x0202
	r15 = r15 + 0x0008
	VNZC = cond(r15)
	call vListRemove (retsize: 2;)
	r15 = 0x0202
	v13 = Mem0[r15 + 8:word16]
	v13 = r11
	Mem0[r15 + 8:word16] = v13
	r15 = 0x0208
	VNZC = cond(r11 - r15)
	branch Test(ULT,C) l00004682
	// succ:  l00004670 l00004682
l00004670:
	r15 = 0x0202
	r15 = r15 + 0x0008
	VNZC = cond(r15)
	r14 = r15
	r15 = 0x0284
	// succ:  l0000467C
l0000467C:
	call vListInsert (retsize: 2;)
	goto l00004648
	// succ:  l00004648
l00004682:
	r15 = 0x0202
	r15 = r15 + 0x0008
	VNZC = cond(r15)
	r14 = r15
	r15 = 0x0282
	goto l0000467C
	// succ:  l0000467C
l00004690:
	VNZC = cond(r11 - r15)
	branch Test(UGE,C) l0000463E
	// succ:  l00004694 l0000463E
l00004694:
	goto l00004638
	// succ:  l00004638
l00004696:
	v14 = Mem0[sp:word16]
	sp = sp + 2
	r9 = v14
	v15 = Mem0[sp:word16]
	sp = sp + 2
	r10 = v15
	v16 = Mem0[sp:word16]
	sp = sp + 2
	r11 = v16
	v17 = Mem0[sp:word16]
	sp = sp + 2
	return
	// succ:  vTaskDelayUntil_exit
vTaskDelayUntil_exit:


// vTaskDelay
// Return size: 2
define vTaskDelay
vTaskDelay_entry:
	// succ:  l469E
l469E:
	sp = fp
	sp = sp - 2
	Mem0[sp:word16] = r11
	r11 = r15
	r15 = 0x0000
	VNZC = cond(r11 - 0x0000)
	branch Test(NE,Z) l46B2
	// succ:  l46A8 l46B2
l46A8:
	VNZC = cond(r15 - 0x0000)
	branch Test(NE,Z) l46F8
	// succ:  l46AC l46F8
l46AC:
	call vPortYield (retsize: 2;)
	goto l46F8
	// succ:  l46F8
l46B2:
	call vTaskSuspendAll (retsize: 2;)
	r11 = r11 + 0x0208
	VNZC = cond(r11)
	r15 = 0x0202
	r15 = r15 + 0x0008
	VNZC = cond(r15)
	call vListRemove (retsize: 2;)
	r15 = 0x0202
	v7 = Mem0[r15 + 8:word16]
	v7 = r11
	Mem0[r15 + 8:word16] = v7
	r15 = 0x0208
	VNZC = cond(r11 - r15)
	branch Test(ULT,C) l46EA
	// succ:  l46D4 l46EA
l46D4:
	r15 = 0x0202
	r15 = r15 + 0x0008
	VNZC = cond(r15)
	r14 = r15
	r15 = 0x0284
	// succ:  l46E0
l46E0:
	call vListInsert (retsize: 2;)
	call xTaskResumeAll (retsize: 2;)
	goto l46A8
	// succ:  l46A8
l46EA:
	r15 = 0x0202
	r15 = r15 + 0x0008
	VNZC = cond(r15)
	r14 = r15
	r15 = 0x0282
	goto l46E0
	// succ:  l46E0
l46F8:
	v10 = Mem0[sp:word16]
	sp = sp + 2
	r11 = v10
	v11 = Mem0[sp:word16]
	sp = sp + 2
	return
	// succ:  vTaskDelay_exit
vTaskDelay_exit:


// vTaskStartScheduler
// Return size: 2
define vTaskStartScheduler
vTaskStartScheduler_entry:
	// succ:  l4702
l4702:
	sp = fp
	VNZC = cond(0x0202 - 0x0000)
	branch Test(NE,Z) l470A
	// succ:  l4708 l470A
l4708:
	v5 = Mem0[sp:word16]
	sp = sp + 2
	return
	// succ:  vTaskStartScheduler_exit
l470A:
	sp = sp - 2
	Mem0[sp:word16] = 0x0000
	sp = sp - 2
	Mem0[sp:word16] = 0x0000
	r12 = 0x0000
	r13 = 0x0032
	r14 = 0x46FC
	r15 = 0x49AC
	call xTaskCreate (retsize: 2;)
	sp = sp + 0x0004
	VNZC = cond(sp)
	VNZC = cond(r15 - 0x0001)
	branch Test(NE,Z) l4708
	// succ:  l4726 l4708
l4726:
	sr = sr & ~0x0008
	Mem0[0x020E:ptr16] = 0x0001
	Mem0[0x0208:ptr16] = 0x0000
	call xPortStartScheduler (retsize: 2;)
	goto l4708
	// succ:  l4708
vTaskStartScheduler_exit:


// vTaskEndScheduler
// Return size: 2
define vTaskEndScheduler
vTaskEndScheduler_entry:
	// succ:  l4736
l4736:
	sp = fp
	sr = sr & ~0x0008
	Mem0[0x020E:ptr16] = 0x0000
	call vPortEndScheduler (retsize: 2;)
	v4 = Mem0[sp:word16]
	sp = sp + 2
	return
	// succ:  vTaskEndScheduler_exit
vTaskEndScheduler_exit:


// vTaskSuspendAll
// Return size: 2
define vTaskSuspendAll
vTaskSuspendAll_entry:
	// succ:  l00004742
l00004742:
	sp = fp
	sr = sr & ~0x0008
	Mem0[0x0218:ptr16] = Mem0[0x0218:ptr16] + 0x0001
	VNZC = cond(Mem0[0x0218:ptr16])
	Mem0[0x0210:ptr16] = Mem0[0x0210:ptr16] + 0x0001
	VNZC = cond(Mem0[0x0210:ptr16])
	VNZC = cond(0x0218 - 0x0000)
	branch Test(EQ,Z) l0000475A
	// succ:  l00004752 l0000475A
l00004752:
	Mem0[0x0218:ptr16] = Mem0[0x0218:ptr16] + 0xFFFF
	VNZC = cond(Mem0[0x0218:ptr16])
	branch Test(NE,Z) l0000475A
	// succ:  l00004758 l0000475A
l00004758:
	sr = sr | 0x0008
	// succ:  l0000475A
l0000475A:
	v6 = Mem0[sp:word16]
	sp = sp + 2
	return
	// succ:  vTaskSuspendAll_exit
vTaskSuspendAll_exit:


// xTaskResumeAll
// Return size: 2
define xTaskResumeAll
xTaskResumeAll_entry:
	// succ:  l0000475C
l0000475C:
	sp = fp
	sp = sp - 2
	Mem0[sp:word16] = r11
	sp = sp - 2
	Mem0[sp:word16] = r10
	sp = sp - 2
	Mem0[sp:word16] = r9
	sp = sp - 2
	Mem0[sp:word16] = r8
	r8 = 0x0000
	sr = sr & ~0x0008
	Mem0[0x0218:ptr16] = Mem0[0x0218:ptr16] + 0x0001
	VNZC = cond(Mem0[0x0218:ptr16])
	Mem0[0x0210:ptr16] = Mem0[0x0210:ptr16] + 0xFFFF
	VNZC = cond(Mem0[0x0210:ptr16])
	branch Test(NE,Z) l000047EA
	// succ:  l00004772 l000047EA
l00004772:
	VNZC = cond(0x0206 - 0x0000)
	branch Test(EQ,Z) l000047EA
	// succ:  l00004778 l000047EA
l00004778:
	r9 = 0x0000
	// succ:  l0000477A
l0000477A:
	VNZC = cond(0x0286 - 0x0000)
	branch Test(EQ,Z) l0000480E
	// succ:  l00004780 l0000480E
l00004780:
	r15 = 0x0288
	v11 = Mem0[r15 + 2:word16]
	r15 = v11
	v12 = Mem0[r15 + 6:word16]
	r11 = v12
	// succ:  l0000478C
l0000478C:
	VNZC = cond(r11 - 0x0000)
	branch Test(EQ,Z) l000047D8
	// succ:  l00004790 l000047D8
l00004790:
	r15 = r11
	r15 = r15 + 0x0012
	VNZC = cond(r15)
	call vListRemove (retsize: 2;)
	r10 = r11
	r10 = r10 + 0x0008
	VNZC = cond(r10)
	r15 = r10
	call vListRemove (retsize: 2;)
	v13 = Mem0[r11 + 8:word16]
	v13 = 0x0000
	Mem0[r11 + 8:word16] = v13
	v14 = Mem0[r11 + 6:word16]
	r15 = v14
	VNZC = cond(0x020C - r15)
	branch Test(ULT,C) l000047B6
	// succ:  l000047B2 l000047B6
l000047B2:
	Mem0[0x020C:ptr16] = r15
	// succ:  l000047B6
l000047B6:
	r15 = r15 + r15
	VNZC = cond(r15)
	r15 = r15 + r15
	VNZC = cond(r15)
	r15 = r15 + r15
	VNZC = cond(r15)
	r15 = r15 + r15
	VNZC = cond(r15)
	r15 = r15 + 0x0222
	VNZC = cond(r15)
	r14 = r10
	call vListInsertEnd (retsize: 2;)
	r15 = 0x0202
	v17 = Mem0[r11 + 6:word16]
	v18 = Mem0[r15 + 6:word16]
	VNZC = cond(v18 - v17)
	branch Test(ULT,C) l0000477A
	// succ:  l000047D4 l0000477A
l000047D4:
	r9 = 0x0001
	goto l0000477A
	// succ:  l0000477A
l000047D8:
	VNZC = cond(0x0212 - 0x0000)
	branch Test(EQ,Z) l000047E6
	// succ:  l000047DE l000047E6
l000047DE:
	VNZC = cond(0x0212 - 0x0000)
	branch Test(NE,Z) l00004802
	// succ:  l000047E4 l00004802
l000047E4:
	r9 = 0x0001
	// succ:  l000047E6
l000047E6:
	VNZC = cond(r9 - 0x0001)
	branch Test(EQ,Z) l000047FA
	// succ:  l000047EA l000047FA
l000047EA:
	VNZC = cond(0x0218 - 0x0000)
	branch Test(EQ,Z) l00004812
	// succ:  l000047F0 l00004812
l000047F0:
	Mem0[0x0218:ptr16] = Mem0[0x0218:ptr16] + 0xFFFF
	VNZC = cond(Mem0[0x0218:ptr16])
	branch Test(NE,Z) l00004812
	// succ:  l000047F6 l00004812
l000047F6:
	sr = sr | 0x0008
	goto l00004812
	// succ:  l00004812
l000047FA:
	r8 = 0x0001
	call vPortYield (retsize: 2;)
	goto l000047EA
	// succ:  l000047EA
l00004802:
	call vTaskIncrementTick (retsize: 2;)
	Mem0[0x0212:ptr16] = Mem0[0x0212:ptr16] + 0xFFFF
	VNZC = cond(Mem0[0x0212:ptr16])
	branch Test(NE,Z) l00004802
	// succ:  l0000480C l00004802
l0000480C:
	goto l000047E4
	// succ:  l000047E4
l0000480E:
	r11 = 0x0000
	goto l0000478C
	// succ:  l0000478C
l00004812:
	r15 = r8
	v19 = Mem0[sp:word16]
	sp = sp + 2
	r8 = v19
	v20 = Mem0[sp:word16]
	sp = sp + 2
	r9 = v20
	v21 = Mem0[sp:word16]
	sp = sp + 2
	r10 = v21
	v22 = Mem0[sp:word16]
	sp = sp + 2
	r11 = v22
	v23 = Mem0[sp:word16]
	sp = sp + 2
	return
	// succ:  xTaskResumeAll_exit
xTaskResumeAll_exit:


// xTaskGetTickCount
// Return size: 2
define xTaskGetTickCount
xTaskGetTickCount_entry:
	// succ:  l0000481E
l0000481E:
	sp = fp
	sr = sr & ~0x0008
	Mem0[0x0218:ptr16] = Mem0[0x0218:ptr16] + 0x0001
	VNZC = cond(Mem0[0x0218:ptr16])
	r15 = 0x0208
	branch Test(EQ,Z) l00004832
	// succ:  l0000482A l00004832
l0000482A:
	Mem0[0x0218:ptr16] = Mem0[0x0218:ptr16] + 0xFFFF
	VNZC = cond(Mem0[0x0218:ptr16])
	branch Test(NE,Z) l00004832
	// succ:  l00004830 l00004832
l00004830:
	sr = sr | 0x0008
	// succ:  l00004832
l00004832:
	v7 = Mem0[sp:word16]
	sp = sp + 2
	return
	// succ:  xTaskGetTickCount_exit
xTaskGetTickCount_exit:


// uxTaskGetNumberOfTasks
// Return size: 2
define uxTaskGetNumberOfTasks
uxTaskGetNumberOfTasks_entry:
	// succ:  l4834
l4834:
	sp = fp
	sr = sr & ~0x0008
	Mem0[0x0218:ptr16] = Mem0[0x0218:ptr16] + 0x0001
	VNZC = cond(Mem0[0x0218:ptr16])
	r15 = 0x0206
	branch Test(EQ,Z) l4848
	// succ:  l4840 l4848
l4840:
	Mem0[0x0218:ptr16] = Mem0[0x0218:ptr16] + 0xFFFF
	VNZC = cond(Mem0[0x0218:ptr16])
	branch Test(NE,Z) l4848
	// succ:  l4846 l4848
l4846:
	sr = sr | 0x0008
	// succ:  l4848
l4848:
	v7 = Mem0[sp:word16]
	sp = sp + 2
	return
	// succ:  uxTaskGetNumberOfTasks_exit
uxTaskGetNumberOfTasks_exit:


// vTaskIncrementTick
// Return size: 2
define vTaskIncrementTick
vTaskIncrementTick_entry:
	// succ:  l0000484A
l0000484A:
	sp = fp
	sp = sp - 2
	Mem0[sp:word16] = r11
	sp = sp - 2
	Mem0[sp:word16] = r10
	VNZC = cond(0x0210 - 0x0000)
	branch Test(NE,Z) l000048D0
	// succ:  l00004854 l000048D0
l00004854:
	Mem0[0x0208:ptr16] = Mem0[0x0208:ptr16] + 0x0001
	VNZC = cond(Mem0[0x0208:ptr16])
	branch Test(NE,Z) l00004868
	// succ:  l0000485A l00004868
l0000485A:
	r15 = 0x0282
	Mem0[0x0282:ptr16] = 0x0284
	Mem0[0x0284:ptr16] = r15
	// succ:  l00004868
l00004868:
	r15 = 0x0282
	v11 = Mem0[r15:word16]
	VNZC = cond(v11 - 0x0000)
	branch Test(EQ,Z) l000048CC
	// succ:  l00004872 l000048CC
l00004872:
	v12 = Mem0[r15 + 2:word16]
	r15 = v12
	v13 = Mem0[r15 + 2:word16]
	r15 = v13
	v14 = Mem0[r15 + 6:word16]
	r11 = v14
	// succ:  l0000487E
l0000487E:
	VNZC = cond(r11 - 0x0000)
	branch Test(EQ,Z) l000048D4
	// succ:  l00004882 l000048D4
l00004882:
	v15 = Mem0[r11 + 8:word16]
	VNZC = cond(0x0208 - v15)
	branch Test(UGE,C) l000048D4
	// succ:  l0000488A l000048D4
l0000488A:
	r10 = r11
	r10 = r10 + 0x0008
	VNZC = cond(r10)
	r15 = r10
	call vListRemove (retsize: 2;)
	v17 = Mem0[r11 + 26:word16]
	VNZC = cond(v17 - 0x0000)
	branch Test(NE,Z) l000048C0
	// succ:  l0000489A l000048C0
l0000489A:
	v18 = Mem0[r11 + 8:word16]
	v18 = 0x0000
	Mem0[r11 + 8:word16] = v18
	v19 = Mem0[r11 + 6:word16]
	r15 = v19
	VNZC = cond(0x020C - r15)
	branch Test(ULT,C) l000048AC
	// succ:  l000048A8 l000048AC
l000048A8:
	Mem0[0x020C:ptr16] = r15
	// succ:  l000048AC
l000048AC:
	r15 = r15 + r15
	VNZC = cond(r15)
	r15 = r15 + r15
	VNZC = cond(r15)
	r15 = r15 + r15
	VNZC = cond(r15)
	r15 = r15 + r15
	VNZC = cond(r15)
	r15 = r15 + 0x0222
	VNZC = cond(r15)
	r14 = r10
	call vListInsertEnd (retsize: 2;)
	goto l00004868
	// succ:  l00004868
l000048C0:
	r15 = r11
	r15 = r15 + 0x0012
	VNZC = cond(r15)
	call vListRemove (retsize: 2;)
	goto l0000489A
	// succ:  l0000489A
l000048CC:
	r11 = 0x0000
	goto l0000487E
	// succ:  l0000487E
l000048D0:
	Mem0[0x0212:ptr16] = Mem0[0x0212:ptr16] + 0x0001
	VNZC = cond(Mem0[0x0212:ptr16])
	// succ:  l000048D4
l000048D4:
	v8 = Mem0[sp:word16]
	sp = sp + 2
	r10 = v8
	v9 = Mem0[sp:word16]
	sp = sp + 2
	r11 = v9
	v10 = Mem0[sp:word16]
	sp = sp + 2
	return
	// succ:  vTaskIncrementTick_exit
vTaskIncrementTick_exit:


// vTaskPlaceOnEventList
// Return size: 2
define vTaskPlaceOnEventList
vTaskPlaceOnEventList_entry:
	// succ:  l000048DA
l000048DA:
	sp = fp
	sp = sp - 2
	Mem0[sp:word16] = r11
	r13 = r15
	r11 = r14
	r15 = 0x0202
	r15 = r15 + 0x0012
	VNZC = cond(r15)
	r14 = r15
	r15 = r13
	call vListInsert (retsize: 2;)
	r11 = r11 + 0x0208
	VNZC = cond(r11)
	r15 = 0x0202
	r15 = r15 + 0x0008
	VNZC = cond(r15)
	call vListRemove (retsize: 2;)
	r15 = 0x0202
	v8 = Mem0[r15 + 8:word16]
	v8 = r11
	Mem0[r15 + 8:word16] = v8
	r15 = 0x0208
	VNZC = cond(r11 - r15)
	branch Test(ULT,C) l0000491C
	// succ:  l0000490E l0000491C
l0000490E:
	r15 = 0x0202
	r15 = r15 + 0x0008
	VNZC = cond(r15)
	r14 = r15
	r15 = 0x0284
	goto l00004928
	// succ:  l00004928
l0000491C:
	r15 = 0x0202
	r15 = r15 + 0x0008
	VNZC = cond(r15)
	r14 = r15
	r15 = 0x0282
	// succ:  l00004928
l00004928:
	call vListInsert (retsize: 2;)
	v10 = Mem0[sp:word16]
	sp = sp + 2
	r11 = v10
	v11 = Mem0[sp:word16]
	sp = sp + 2
	return
	// succ:  vTaskPlaceOnEventList_exit
vTaskPlaceOnEventList_exit:


// xTaskRemoveFromEventList
// Return size: 2
define xTaskRemoveFromEventList
xTaskRemoveFromEventList_entry:
	// succ:  l00004930
l00004930:
	sp = fp
	sp = sp - 2
	Mem0[sp:word16] = r11
	sp = sp - 2
	Mem0[sp:word16] = r10
	v6 = Mem0[r15:word16]
	VNZC = cond(v6 - 0x0000)
	branch Test(EQ,Z) l000049A2
	// succ:  l0000493A l000049A2
l0000493A:
	v9 = Mem0[r15 + 2:word16]
	r15 = v9
	v10 = Mem0[r15 + 2:word16]
	r15 = v10
	v11 = Mem0[r15 + 6:word16]
	r10 = v11
	// succ:  l00004946
l00004946:
	r11 = r10
	r11 = r11 + 0x0012
	VNZC = cond(r11)
	r15 = r11
	call vListRemove (retsize: 2;)
	VNZC = cond(0x0210 - 0x0000)
	branch Test(NE,Z) l0000499A
	// succ:  l00004958 l0000499A
l00004958:
	r11 = r11 + 0xFFF6
	VNZC = cond(r11)
	r15 = r11
	call vListRemove (retsize: 2;)
	v12 = Mem0[r10 + 8:word16]
	v12 = 0x0000
	Mem0[r10 + 8:word16] = v12
	v13 = Mem0[r10 + 6:word16]
	r15 = v13
	VNZC = cond(0x020C - r15)
	branch Test(ULT,C) l00004974
	// succ:  l00004970 l00004974
l00004970:
	Mem0[0x020C:ptr16] = r15
	// succ:  l00004974
l00004974:
	r15 = r15 + r15
	VNZC = cond(r15)
	r15 = r15 + r15
	VNZC = cond(r15)
	r15 = r15 + r15
	VNZC = cond(r15)
	r15 = r15 + r15
	VNZC = cond(r15)
	r15 = r15 + 0x0222
	VNZC = cond(r15)
	r14 = r11
	// succ:  l00004982
l00004982:
	call vListInsertEnd (retsize: 2;)
	r15 = 0x0202
	v16 = Mem0[r10 + 6:word16]
	v17 = Mem0[r15 + 6:word16]
	VNZC = cond(v17 - v16)
	branch Test(ULT,C) l00004996
	// succ:  l00004992 l00004996
l00004992:
	r15 = 0x0001
	goto l000049A6
	// succ:  l000049A6
l00004996:
	r15 = 0x0000
	goto l000049A6
	// succ:  l000049A6
l0000499A:
	r14 = r11
	r15 = 0x0286
	goto l00004982
	// succ:  l00004982
l000049A2:
	r10 = 0x0000
	goto l00004946
	// succ:  l00004946
l000049A6:
	v18 = Mem0[sp:word16]
	sp = sp + 2
	r10 = v18
	v19 = Mem0[sp:word16]
	sp = sp + 2
	r11 = v19
	v20 = Mem0[sp:word16]
	sp = sp + 2
	return
	// succ:  xTaskRemoveFromEventList_exit
xTaskRemoveFromEventList_exit:


// prvIdleTask
// Return size: 0
define prvIdleTask
prvIdleTask_entry:
	// succ:  l49AC
l49AC:
	sp = fp
	call prvCheckTasksWaitingTermination (retsize: 2;)
	VNZC = cond(0x0222 - 0x0002)
	branch Test(UGE,C) l49AC
	// succ:  l49B6 l49AC
l49B6:
	call vPortYield (retsize: 2;)
	goto l49AC
	// succ:  l49AC
prvIdleTask_exit:


// prvInitialiseTCBVariables
// Return size: 2
define prvInitialiseTCBVariables
prvInitialiseTCBVariables_entry:
	// succ:  l49BE
l49BE:
	sp = fp
	sp = sp - 2
	Mem0[sp:word16] = r11
	sp = sp - 2
	Mem0[sp:word16] = r10
	r11 = r15
	r15 = r14
	r14 = r13
	r10 = r12
	v9 = Mem0[r11 + 36:word16]
	v9 = r15
	Mem0[r11 + 36:word16] = v9
	r15 = r11
	r15 = r15 + 0x001C
	VNZC = cond(r15)
	r13 = 0x0008
	call strncpy (retsize: 2;)
	v11 = Mem0[r11 + 35:byte]
	v11 = 0x00
	Mem0[r11 + 35:byte] = v11
	VNZC = cond(r10 - 0x0004)
	branch Test(UGE,C) l49E6
	// succ:  l49E2 l49E6
l49E2:
	r10 = 0x0003
	// succ:  l49E6
l49E6:
	v13 = Mem0[r11 + 6:word16]
	v13 = r10
	Mem0[r11 + 6:word16] = v13
	r15 = r11
	r15 = r15 + 0x0008
	VNZC = cond(r15)
	call vListInitialiseItem (retsize: 2;)
	r15 = r11
	r15 = r15 + 0x0012
	VNZC = cond(r15)
	call vListInitialiseItem (retsize: 2;)
	v14 = Mem0[r11 + 14:word16]
	v14 = r11
	Mem0[r11 + 14:word16] = v14
	r15 = 0x0004
	r15 = r15 - r10
	VNZC = cond(r15)
	v15 = Mem0[r11 + 18:word16]
	v15 = r15
	Mem0[r11 + 18:word16] = v15
	v16 = Mem0[r11 + 24:word16]
	v16 = r11
	Mem0[r11 + 24:word16] = v16
	v17 = Mem0[sp:word16]
	sp = sp + 2
	r10 = v17
	v18 = Mem0[sp:word16]
	sp = sp + 2
	r11 = v18
	v19 = Mem0[sp:word16]
	sp = sp + 2
	return
	// succ:  prvInitialiseTCBVariables_exit
prvInitialiseTCBVariables_exit:


// prvInitialiseTaskLists
// Return size: 2
define prvInitialiseTaskLists
prvInitialiseTaskLists_entry:
	// succ:  l4A12
l4A12:
	sp = fp
	sp = sp - 2
	Mem0[sp:word16] = r11
	r11 = 0x0000
	// succ:  l4A16
l4A16:
	r15 = r11
	r15 = r15 + r15
	VNZC = cond(r15)
	r15 = r15 + r15
	VNZC = cond(r15)
	r15 = r15 + r15
	VNZC = cond(r15)
	r15 = r15 + r15
	VNZC = cond(r15)
	r15 = r15 + 0x0222
	VNZC = cond(r15)
	call vListInitialise (retsize: 2;)
	r11 = r11 + 0x0001
	VNZC = cond(r11)
	VNZC = cond(r11 - 0x0004)
	branch Test(UGE,C) l4A16
	// succ:  l4A2E l4A16
l4A2E:
	r15 = 0x0262
	call vListInitialise (retsize: 2;)
	r15 = 0x0272
	call vListInitialise (retsize: 2;)
	r15 = 0x0286
	call vListInitialise (retsize: 2;)
	r15 = 0x0296
	call vListInitialise (retsize: 2;)
	Mem0[0x0282:ptr16] = 0x0262
	Mem0[0x0284:ptr16] = 0x0272
	v7 = Mem0[sp:word16]
	sp = sp + 2
	r11 = v7
	v8 = Mem0[sp:word16]
	sp = sp + 2
	return
	// succ:  prvInitialiseTaskLists_exit
prvInitialiseTaskLists_exit:


// prvCheckTasksWaitingTermination
// Return size: 2
define prvCheckTasksWaitingTermination
prvCheckTasksWaitingTermination_entry:
	// succ:  l4A5E
l4A5E:
	sp = fp
	sp = sp - 2
	Mem0[sp:word16] = r11
	VNZC = cond(0x0204 - 0x0000)
	branch Test(EQ,Z) l4ABE
	// succ:  l4A66 l4ABE
l4A66:
	call vTaskSuspendAll (retsize: 2;)
	r11 = 0x0000
	VNZC = cond(0x0296 - 0x0000)
	branch Test(NE,Z) l4A74
	// succ:  l4A72 l4A74
l4A72:
	r11 = 0x0001
	// succ:  l4A74
l4A74:
	call xTaskResumeAll (retsize: 2;)
	VNZC = cond(r11 - 0x0000)
	branch Test(NE,Z) l4ABE
	// succ:  l4A7C l4ABE
l4A7C:
	sr = sr & ~0x0008
	Mem0[0x0218:ptr16] = Mem0[0x0218:ptr16] + 0x0001
	VNZC = cond(Mem0[0x0218:ptr16])
	VNZC = cond(0x0296 - 0x0000)
	branch Test(EQ,Z) l4ABA
	// succ:  l4A88 l4ABA
l4A88:
	r15 = 0x0298
	v10 = Mem0[r15 + 2:word16]
	r15 = v10
	v11 = Mem0[r15 + 6:word16]
	r11 = v11
	// succ:  l4A94
l4A94:
	r15 = r11
	r15 = r15 + 0x0008
	VNZC = cond(r15)
	call vListRemove (retsize: 2;)
	Mem0[0x0206:ptr16] = Mem0[0x0206:ptr16] + 0xFFFF
	VNZC = cond(Mem0[0x0206:ptr16])
	Mem0[0x0204:ptr16] = Mem0[0x0204:ptr16] + 0xFFFF
	VNZC = cond(Mem0[0x0204:ptr16])
	VNZC = cond(0x0218 - 0x0000)
	branch Test(EQ,Z) l4AB2
	// succ:  l4AAA l4AB2
l4AAA:
	Mem0[0x0218:ptr16] = Mem0[0x0218:ptr16] + 0xFFFF
	VNZC = cond(Mem0[0x0218:ptr16])
	branch Test(NE,Z) l4AB2
	// succ:  l4AB0 l4AB2
l4AB0:
	sr = sr | 0x0008
	// succ:  l4AB2
l4AB2:
	r15 = r11
	call prvDeleteTCB (retsize: 2;)
	goto l4ABE
	// succ:  l4ABE
l4ABA:
	r11 = 0x0000
	goto l4A94
	// succ:  l4A94
l4ABE:
	v6 = Mem0[sp:word16]
	sp = sp + 2
	r11 = v6
	v7 = Mem0[sp:word16]
	sp = sp + 2
	return
	// succ:  prvCheckTasksWaitingTermination_exit
prvCheckTasksWaitingTermination_exit:


// prvAllocateTCBAndStack
// Return size: 2
define prvAllocateTCBAndStack
prvAllocateTCBAndStack_entry:
	// succ:  l4AC2
l4AC2:
	sp = fp
	sp = sp - 2
	Mem0[sp:word16] = r11
	sp = sp - 2
	Mem0[sp:word16] = r10
	r10 = r15
	r15 = 0x0026
	call pvPortMalloc (retsize: 2;)
	r11 = r15
	VNZC = cond(r15 - 0x0000)
	branch Test(EQ,Z) l4AFA
	// succ:  l4AD6 l4AFA
l4AD6:
	r10 = r10 + r10
	VNZC = cond(r10)
	r15 = r10
	call pvPortMalloc (retsize: 2;)
	v8 = Mem0[r11 + 2:word16]
	v8 = r15
	Mem0[r11 + 2:word16] = v8
	VNZC = cond(r15 - 0x0000)
	branch Test(NE,Z) l4AF0
	// succ:  l4AE6 l4AF0
l4AE6:
	r15 = r11
	call vPortFree (retsize: 2;)
	r11 = 0x0000
	goto l4AFA
	// succ:  l4AFA
l4AF0:
	r13 = r10
	r14 = 0x00A5
	call memset (retsize: 2;)
	// succ:  l4AFA
l4AFA:
	r15 = r11
	v9 = Mem0[sp:word16]
	sp = sp + 2
	r10 = v9
	v10 = Mem0[sp:word16]
	sp = sp + 2
	r11 = v10
	v11 = Mem0[sp:word16]
	sp = sp + 2
	return
	// succ:  prvAllocateTCBAndStack_exit
prvAllocateTCBAndStack_exit:


// prvDeleteTCB
// Return size: 2
define prvDeleteTCB
prvDeleteTCB_entry:
	// succ:  l4B02
l4B02:
	sp = fp
	sp = sp - 2
	Mem0[sp:word16] = r11
	r11 = r15
	v5 = Mem0[r15 + 2:word16]
	r15 = v5
	call vPortFree (retsize: 2;)
	r15 = r11
	call vPortFree (retsize: 2;)
	v6 = Mem0[sp:word16]
	sp = sp + 2
	r11 = v6
	v7 = Mem0[sp:word16]
	sp = sp + 2
	return
	// succ:  prvDeleteTCB_exit
prvDeleteTCB_exit:


// vTaskSwitchContext
// Return size: 2
define vTaskSwitchContext
vTaskSwitchContext_entry:
	// succ:  l00004B18
l00004B18:
	sp = fp
	VNZC = cond(0x0210 - 0x0000)
	branch Test(NE,Z) l00004BAE
	// succ:  l00004B1E l00004BAE
l00004B1E:
	r15 = 0x020C
	r15 = r15 + r15
	VNZC = cond(r15)
	r15 = r15 + r15
	VNZC = cond(r15)
	r15 = r15 + r15
	VNZC = cond(r15)
	r15 = r15 + r15
	VNZC = cond(r15)
	v6 = Mem0[r15 + 546:word16]
	VNZC = cond(v6 - 0x0000)
	branch Test(NE,Z) l00004B46
	// succ:  l00004B30 l00004B46
l00004B30:
	Mem0[0x020C:ptr16] = Mem0[0x020C:ptr16] + 0xFFFF
	VNZC = cond(Mem0[0x020C:ptr16])
	r15 = 0x020C
	r15 = r15 + r15
	VNZC = cond(r15)
	r15 = r15 + r15
	VNZC = cond(r15)
	r15 = r15 + r15
	VNZC = cond(r15)
	r15 = r15 + r15
	VNZC = cond(r15)
	v7 = Mem0[r15 + 546:word16]
	VNZC = cond(v7 - 0x0000)
	branch Test(EQ,Z) l00004B30
	// succ:  l00004B46 l00004B30
l00004B46:
	r13 = 0x0222
	r14 = 0x020C
	r14 = r14 + r14
	VNZC = cond(r14)
	r14 = r14 + r14
	VNZC = cond(r14)
	r14 = r14 + r14
	VNZC = cond(r14)
	r14 = r14 + r14
	VNZC = cond(r14)
	r14 = r14 + r13
	VNZC = cond(r14)
	r15 = 0x020C
	r15 = r15 + r15
	VNZC = cond(r15)
	r15 = r15 + r15
	VNZC = cond(r15)
	r15 = r15 + r15
	VNZC = cond(r15)
	r15 = r15 + r15
	VNZC = cond(r15)
	r15 = r15 + r13
	VNZC = cond(r15)
	v10 = Mem0[r15 + 4:word16]
	r15 = v10
	v11 = Mem0[r15 + 2:word16]
	v12 = Mem0[r14 + 4:word16]
	v12 = v11
	Mem0[r14 + 4:word16] = v12
	r14 = 0x020C
	r14 = r14 + r14
	VNZC = cond(r14)
	r14 = r14 + r14
	VNZC = cond(r14)
	r14 = r14 + r14
	VNZC = cond(r14)
	r14 = r14 + r14
	VNZC = cond(r14)
	r14 = r14 + r13
	VNZC = cond(r14)
	r15 = 0x020C
	r15 = r15 + r15
	VNZC = cond(r15)
	r15 = r15 + r15
	VNZC = cond(r15)
	r15 = r15 + r15
	VNZC = cond(r15)
	r15 = r15 + r15
	VNZC = cond(r15)
	r15 = r15 + r13
	VNZC = cond(r15)
	v13 = Mem0[r14 + 4:word16]
	r14 = v13
	v14 = Mem0[r15 + 2:word16]
	r15 = v14
	VNZC = cond(r14 - r15)
	branch Test(EQ,Z) l00004BB0
	// succ:  l00004B98 l00004BB0
l00004B98:
	r15 = 0x020C
	r15 = r15 + r15
	VNZC = cond(r15)
	r15 = r15 + r15
	VNZC = cond(r15)
	r15 = r15 + r15
	VNZC = cond(r15)
	r15 = r15 + r15
	VNZC = cond(r15)
	v15 = Mem0[r15 + 550:word16]
	r15 = v15
	v16 = Mem0[r15 + 6:word16]
	Mem0[0x0202:ptr16] = v16
	// succ:  l00004BAE
l00004BAE:
	v17 = Mem0[sp:word16]
	sp = sp + 2
	return
	// succ:  vTaskSwitchContext_exit
l00004BB0:
	r15 = 0x020C
	r15 = r15 + r15
	VNZC = cond(r15)
	r15 = r15 + r15
	VNZC = cond(r15)
	r15 = r15 + r15
	VNZC = cond(r15)
	r15 = r15 + r15
	VNZC = cond(r15)
	r14 = 0x020C
	r14 = r14 + r14
	VNZC = cond(r14)
	r14 = r14 + r14
	VNZC = cond(r14)
	r14 = r14 + r14
	VNZC = cond(r14)
	r14 = r14 + r14
	VNZC = cond(r14)
	v18 = Mem0[r14 + 550:word16]
	r14 = v18
	v19 = Mem0[r14 + 2:word16]
	v20 = Mem0[r15 + 550:word16]
	v20 = v19
	Mem0[r15 + 550:word16] = v20
	goto l00004B98
	// succ:  l00004B98
vTaskSwitchContext_exit:


// vListInitialise
// Return size: 2
define vListInitialise
vListInitialise_entry:
	// succ:  l00004BD4
l00004BD4:
	sp = fp
	sp = sp - 2
	Mem0[sp:word16] = r11
	r11 = r15
	r15 = r15 + 0x0006
	VNZC = cond(r15)
	v6 = Mem0[r11 + 2:word16]
	v6 = r15
	Mem0[r11 + 2:word16] = v6
	v7 = Mem0[r11 + 4:word16]
	v7 = r15
	Mem0[r11 + 4:word16] = v7
	v8 = Mem0[r11 + 6:word16]
	v8 = 0xFFFF
	Mem0[r11 + 6:word16] = v8
	v9 = Mem0[r11 + 8:word16]
	v9 = r15
	Mem0[r11 + 8:word16] = v9
	v10 = Mem0[r11 + 10:word16]
	v10 = r15
	Mem0[r11 + 10:word16] = v10
	v11 = Mem0[r11 + 12:word16]
	v11 = 0x0000
	Mem0[r11 + 12:word16] = v11
	call vListInitialiseItem (retsize: 2;)
	v12 = Mem0[r11:word16]
	v12 = 0x0000
	Mem0[r11:word16] = v12
	v13 = Mem0[sp:word16]
	sp = sp + 2
	r11 = v13
	v14 = Mem0[sp:word16]
	sp = sp + 2
	return
	// succ:  vListInitialise_exit
vListInitialise_exit:


// vListInitialiseItem
// Return size: 2
define vListInitialiseItem
vListInitialiseItem_entry:
	// succ:  l00004C00
l00004C00:
	sp = fp
	v4 = Mem0[r15 + 8:word16]
	v4 = 0x0000
	Mem0[r15 + 8:word16] = v4
	v5 = Mem0[sp:word16]
	sp = sp + 2
	return
	// succ:  vListInitialiseItem_exit
vListInitialiseItem_exit:


// vListInsertEnd
// Return size: 2
define vListInsertEnd
vListInsertEnd_entry:
	// succ:  l00004C06
l00004C06:
	sp = fp
	r12 = r15
	v5 = Mem0[r15 + 4:word16]
	r13 = v5
	v7 = Mem0[r13 + 2:word16]
	v9 = Mem0[r14 + 2:word16]
	v9 = v7
	Mem0[r14 + 2:word16] = v9
	v10 = Mem0[r15 + 4:word16]
	v11 = Mem0[r14 + 4:word16]
	v11 = v10
	Mem0[r14 + 4:word16] = v11
	v12 = Mem0[r13 + 2:word16]
	r15 = v12
	v13 = Mem0[r15 + 4:word16]
	v13 = r14
	Mem0[r15 + 4:word16] = v13
	v14 = Mem0[r13 + 2:word16]
	v14 = r14
	Mem0[r13 + 2:word16] = v14
	v15 = Mem0[r12 + 4:word16]
	v15 = r14
	Mem0[r12 + 4:word16] = v15
	v16 = Mem0[r14 + 8:word16]
	v16 = r12
	Mem0[r14 + 8:word16] = v16
	v17 = Mem0[r12:word16]
	v17 = v17 + 0x0001
	Mem0[r12:word16] = v17
	VNZC = cond(v17)
	v19 = Mem0[sp:word16]
	sp = sp + 2
	return
	// succ:  vListInsertEnd_exit
vListInsertEnd_exit:


// vListInsert
// Return size: 2
define vListInsert
vListInsert_entry:
	// succ:  l00004C32
l00004C32:
	sp = fp
	sp = sp - 2
	Mem0[sp:word16] = r11
	r11 = r15
	v6 = Mem0[r14:word16]
	r12 = v6
	VNZC = cond(r12 - 0xFFFF)
	branch Test(EQ,Z) l00004C5A
	// succ:  l00004C3C l00004C5A
l00004C3C:
	v10 = Mem0[r15 + 2:word16]
	r13 = v10
	v12 = Mem0[r13 + 2:word16]
	r15 = v12
	v13 = Mem0[r15:word16]
	r15 = v13
	VNZC = cond(r12 - r15)
	branch Test(UGE,C) l00004C76
	// succ:  l00004C4A l00004C76
l00004C4A:
	v15 = Mem0[r13 + 2:word16]
	r13 = v15
	v16 = Mem0[r13 + 2:word16]
	r15 = v16
	v17 = Mem0[r15:word16]
	r15 = v17
	VNZC = cond(r12 - r15)
	branch Test(ULT,C) l00004C4A
	// succ:  l00004C58 l00004C4A
l00004C58:
	goto l00004C76
	// succ:  l00004C76
l00004C5A:
	v18 = Mem0[r15 + 2:word16]
	r13 = v18
	v19 = Mem0[r13 + 2:word16]
	r15 = v19
	v20 = Mem0[r15:word16]
	VNZC = cond(v20 - 0xFFFF)
	branch Test(ULT,C) l00004C76
	// succ:  l00004C68 l00004C76
l00004C68:
	v21 = Mem0[r13 + 2:word16]
	r13 = v21
	v22 = Mem0[r13 + 2:word16]
	r15 = v22
	v23 = Mem0[r15:word16]
	VNZC = cond(v23 - r12)
	branch Test(UGE,C) l00004C68
	// succ:  l00004C76 l00004C68
l00004C76:
	v24 = Mem0[r13 + 2:word16]
	v25 = Mem0[r14 + 2:word16]
	v25 = v24
	Mem0[r14 + 2:word16] = v25
	v26 = Mem0[r14 + 2:word16]
	r15 = v26
	v27 = Mem0[r15 + 4:word16]
	v27 = r14
	Mem0[r15 + 4:word16] = v27
	v28 = Mem0[r14 + 4:word16]
	v28 = r13
	Mem0[r14 + 4:word16] = v28
	v29 = Mem0[r13 + 2:word16]
	v29 = r14
	Mem0[r13 + 2:word16] = v29
	v30 = Mem0[r14 + 8:word16]
	v30 = r11
	Mem0[r14 + 8:word16] = v30
	v31 = Mem0[r11:word16]
	v31 = v31 + 0x0001
	Mem0[r11:word16] = v31
	VNZC = cond(v31)
	v32 = Mem0[sp:word16]
	sp = sp + 2
	r11 = v32
	v33 = Mem0[sp:word16]
	sp = sp + 2
	return
	// succ:  vListInsert_exit
vListInsert_exit:


// vListRemove
// Return size: 2
define vListRemove
vListRemove_entry:
	// succ:  l00004C98
l00004C98:
	sp = fp
	r14 = r15
	v5 = Mem0[r15 + 2:word16]
	r15 = v5
	v6 = Mem0[r14 + 4:word16]
	v7 = Mem0[r15 + 4:word16]
	v7 = v6
	Mem0[r15 + 4:word16] = v7
	v8 = Mem0[r14 + 4:word16]
	r13 = v8
	v10 = Mem0[r13 + 2:word16]
	v10 = r15
	Mem0[r13 + 2:word16] = v10
	v11 = Mem0[r14 + 8:word16]
	r15 = v11
	v12 = Mem0[r15 + 4:word16]
	VNZC = cond(v12 - r14)
	branch Test(NE,Z) l00004CBA
	// succ:  l00004CB6 l00004CBA
l00004CB6:
	v15 = Mem0[r15 + 4:word16]
	v15 = r13
	Mem0[r15 + 4:word16] = v15
	// succ:  l00004CBA
l00004CBA:
	v16 = Mem0[r14 + 8:word16]
	v16 = 0x0000
	Mem0[r14 + 8:word16] = v16
	v17 = Mem0[r15:word16]
	v17 = v17 + 0xFFFF
	Mem0[r15:word16] = v17
	VNZC = cond(v17)
	v18 = Mem0[sp:word16]
	sp = sp + 2
	return
	// succ:  vListRemove_exit
vListRemove_exit:


// xQueueCreate
// Return size: 2
define xQueueCreate
xQueueCreate_entry:
	// succ:  l4CC4
l4CC4:
	sp = fp
	sp = sp - 2
	Mem0[sp:word16] = r11
	sp = sp - 2
	Mem0[sp:word16] = r10
	sp = sp - 2
	Mem0[sp:word16] = r9
	r10 = r15
	r9 = r14
	VNZC = cond(r15 - 0x0000)
	branch Test(NE,Z) l4CD6
	// succ:  l4CD2 l4CD6
l4CD2:
	r15 = 0x0000
	goto l4D76
	// succ:  l4D76
l4CD6:
	r15 = 0x0032
	call pvPortMalloc (retsize: 2;)
	r11 = r15
	VNZC = cond(r15 - 0x0000)
	branch Test(EQ,Z) l4CD2
	// succ:  l4CE4 l4CD2
l4CE4:
	sp = sp - 2
	Mem0[sp:word16] = sr
	sr = sr & ~0x0008
l4D76:
	v11 = Mem0[sp:word16]
	sp = sp + 2
	r9 = v11
	v12 = Mem0[sp:word16]
	sp = sp + 2
	r10 = v12
	v13 = Mem0[sp:word16]
	sp = sp + 2
	r11 = v13
	v14 = Mem0[sp:word16]
	sp = sp + 2
	return
	// succ:  xQueueCreate_exit
xQueueCreate_exit:


// xQueueSend
// Return size: 2
define xQueueSend
xQueueSend_entry:
	// succ:  l00004D7E
l00004D7E:
	sp = fp
	sp = sp - 2
	Mem0[sp:word16] = r11
	sp = sp - 2
	Mem0[sp:word16] = r10
	sp = sp - 2
	Mem0[sp:word16] = r9
	r11 = r15
	r9 = r14
	r10 = r13
	call vTaskSuspendAll (retsize: 2;)
	sr = sr & ~0x0008
	Mem0[0x0218:ptr16] = Mem0[0x0218:ptr16] + 0x0001
	VNZC = cond(Mem0[0x0218:ptr16])
	v11 = Mem0[r11 + 46:word16]
	v11 = v11 + 0x0001
	Mem0[r11 + 46:word16] = v11
	VNZC = cond(v11)
	v12 = Mem0[r11 + 48:word16]
	v12 = v12 + 0x0001
	Mem0[r11 + 48:word16] = v12
	VNZC = cond(v12)
	VNZC = cond(0x0218 - 0x0000)
	branch Test(EQ,Z) l00004DAA
	// succ:  l00004DA2 l00004DAA
l00004DA2:
	Mem0[0x0218:ptr16] = Mem0[0x0218:ptr16] + 0xFFFF
	VNZC = cond(Mem0[0x0218:ptr16])
	branch Test(NE,Z) l00004DAA
	// succ:  l00004DA8 l00004DAA
l00004DA8:
	sr = sr | 0x0008
	// succ:  l00004DAA
l00004DAA:
	r15 = r11
	call prvIsQueueFull (retsize: 2;)
	VNZC = cond(r15 - 0x0000)
	branch Test(EQ,Z) l00004DB8
	// succ:  l00004DB4 l00004DB8
l00004DB4:
	VNZC = cond(r10 - 0x0000)
	branch Test(NE,Z) l00004E26
	// succ:  l00004DB8 l00004E26
l00004DB8:
	sr = sr & ~0x0008
	Mem0[0x0218:ptr16] = Mem0[0x0218:ptr16] + 0x0001
	VNZC = cond(Mem0[0x0218:ptr16])
	v14 = Mem0[r11 + 42:word16]
	v15 = Mem0[r11 + 40:word16]
	VNZC = cond(v15 - v14)
	branch Test(UGE,C) l00004DF6
	// succ:  l00004DC6 l00004DF6
l00004DC6:
	r10 = 0xFFFD
	// succ:  l00004DCA
l00004DCA:
	VNZC = cond(0x0218 - 0x0000)
	branch Test(EQ,Z) l00004DD8
	// succ:  l00004DD0 l00004DD8
l00004DD0:
	Mem0[0x0218:ptr16] = Mem0[0x0218:ptr16] + 0xFFFF
	VNZC = cond(Mem0[0x0218:ptr16])
	branch Test(NE,Z) l00004DD8
	// succ:  l00004DD6 l00004DD8
l00004DD6:
	sr = sr | 0x0008
	// succ:  l00004DD8
l00004DD8:
	r15 = r11
	call prvUnlockQueue (retsize: 2;)
	VNZC = cond(r15 - 0x0000)
	branch Test(EQ,Z) l00004DF0
	// succ:  l00004DE2 l00004DF0
l00004DE2:
	call xTaskResumeAll (retsize: 2;)
	VNZC = cond(r15 - 0x0000)
	branch Test(NE,Z) l00004E7A
	// succ:  l00004DEA l00004E7A
l00004DEA:
	call vPortYield (retsize: 2;)
	goto l00004E7A
	// succ:  l00004E7A
l00004DF0:
	call xTaskResumeAll (retsize: 2;)
	goto l00004E7A
	// succ:  l00004E7A
l00004DF6:
	v21 = Mem0[r11 + 4:word16]
	r15 = v21
	v22 = Mem0[r11 + 44:word16]
	r13 = v22
	r14 = r9
	call memcpy (retsize: 2;)
	v23 = Mem0[r11 + 40:word16]
	v23 = v23 + 0x0001
	Mem0[r11 + 40:word16] = v23
	VNZC = cond(v23)
	v24 = Mem0[r11 + 4:word16]
	r15 = v24
	v25 = Mem0[r11 + 44:word16]
	r15 = r15 + v25
	VNZC = cond(r15)
	v26 = Mem0[r11 + 4:word16]
	v26 = r15
	Mem0[r11 + 4:word16] = v26
	v27 = Mem0[r11 + 2:word16]
	VNZC = cond(r15 - v27)
	branch Test(UGE,C) l00004E1E
	// succ:  l00004E1A l00004E1E
l00004E1A:
	v28 = Mem0[r11:word16]
	v29 = Mem0[r11 + 4:word16]
	v29 = v28
	Mem0[r11 + 4:word16] = v29
	// succ:  l00004E1E
l00004E1E:
	r10 = 0x0001
	v32 = Mem0[r11 + 48:word16]
	v32 = v32 + 0x0001
	Mem0[r11 + 48:word16] = v32
	VNZC = cond(v32)
	goto l00004DCA
	// succ:  l00004DCA
l00004E26:
	r15 = r11
	r15 = r15 + 0x0008
	VNZC = cond(r15)
	r14 = r10
	call vTaskPlaceOnEventList (retsize: 2;)
	sr = sr & ~0x0008
	Mem0[0x0218:ptr16] = Mem0[0x0218:ptr16] + 0x0001
	VNZC = cond(Mem0[0x0218:ptr16])
	r15 = r11
	call prvUnlockQueue (retsize: 2;)
	call xTaskResumeAll (retsize: 2;)
	VNZC = cond(r15 - 0x0000)
	branch Test(EQ,Z) l00004E74
	// succ:  l00004E44 l00004E74
l00004E44:
	call vTaskSuspendAll (retsize: 2;)
	sr = sr & ~0x0008
	Mem0[0x0218:ptr16] = Mem0[0x0218:ptr16] + 0x0001
	VNZC = cond(Mem0[0x0218:ptr16])
	v30 = Mem0[r11 + 46:word16]
	v30 = v30 + 0x0001
	Mem0[r11 + 46:word16] = v30
	VNZC = cond(v30)
	v31 = Mem0[r11 + 48:word16]
	v31 = v31 + 0x0001
	Mem0[r11 + 48:word16] = v31
	VNZC = cond(v31)
	VNZC = cond(0x0218 - 0x0000)
	branch Test(EQ,Z) l00004E64
	// succ:  l00004E5C l00004E64
l00004E5C:
	Mem0[0x0218:ptr16] = Mem0[0x0218:ptr16] + 0xFFFF
	VNZC = cond(Mem0[0x0218:ptr16])
	branch Test(NE,Z) l00004E64
	// succ:  l00004E62 l00004E64
l00004E62:
	sr = sr | 0x0008
	// succ:  l00004E64
l00004E64:
	VNZC = cond(0x0218 - 0x0000)
	branch Test(EQ,Z) l00004DB8
	// succ:  l00004E6A l00004DB8
l00004E6A:
	Mem0[0x0218:ptr16] = Mem0[0x0218:ptr16] + 0xFFFF
	VNZC = cond(Mem0[0x0218:ptr16])
	branch Test(NE,Z) l00004DB8
	// succ:  l00004E70 l00004DB8
l00004E70:
	sr = sr | 0x0008
	goto l00004DB8
	// succ:  l00004DB8
l00004E74:
	call vPortYield (retsize: 2;)
	goto l00004E44
	// succ:  l00004E44
l00004E7A:
	r15 = r10
	v17 = Mem0[sp:word16]
	sp = sp + 2
	r9 = v17
	v18 = Mem0[sp:word16]
	sp = sp + 2
	r10 = v18
	v19 = Mem0[sp:word16]
	sp = sp + 2
	r11 = v19
	v20 = Mem0[sp:word16]
	sp = sp + 2
	return
	// succ:  xQueueSend_exit
xQueueSend_exit:


// xQueueSendFromISR
// Return size: 2
define xQueueSendFromISR
xQueueSendFromISR_entry:
	// succ:  l4E84
l4E84:
	sp = fp
	sp = sp - 2
	Mem0[sp:word16] = r11
	sp = sp - 2
	Mem0[sp:word16] = r10
	r11 = r15
	r10 = r13
	v7 = Mem0[r15 + 42:word16]
	v8 = Mem0[r15 + 40:word16]
	VNZC = cond(v8 - v7)
	branch Test(UGE,C) l4E98
	// succ:  l4E94 l4E98
l4E94:
	r13 = r10
	goto l4EE8
	// succ:  l4EE8
l4E98:
	v11 = Mem0[r15 + 4:word16]
	r15 = v11
	v12 = Mem0[r11 + 44:word16]
	r13 = v12
	call memcpy (retsize: 2;)
	v13 = Mem0[r11 + 40:word16]
	v13 = v13 + 0x0001
	Mem0[r11 + 40:word16] = v13
	VNZC = cond(v13)
	v14 = Mem0[r11 + 4:word16]
	r15 = v14
	v15 = Mem0[r11 + 44:word16]
	r15 = r15 + v15
	VNZC = cond(r15)
	v16 = Mem0[r11 + 4:word16]
	v16 = r15
	Mem0[r11 + 4:word16] = v16
	v17 = Mem0[r11 + 2:word16]
	VNZC = cond(r15 - v17)
	branch Test(UGE,C) l4EBE
	// succ:  l4EBA l4EBE
l4EBA:
	v18 = Mem0[r11:word16]
	v19 = Mem0[r11 + 4:word16]
	v19 = v18
	Mem0[r11 + 4:word16] = v19
	// succ:  l4EBE
l4EBE:
	v23 = Mem0[r11 + 48:word16]
	r15 = v23
	VNZC = cond(r15 - 0xFFFF)
	branch Test(EQ,Z) l4ECE
	// succ:  l4EC6 l4ECE
l4EC6:
	r15 = r15 + 0x0001
	VNZC = cond(r15)
	v25 = Mem0[r11 + 48:word16]
	v25 = r15
	Mem0[r11 + 48:word16] = v25
	goto l4E94
	// succ:  l4E94
l4ECE:
	VNZC = cond(r10 - 0x0000)
	branch Test(NE,Z) l4E94
	// succ:  l4ED2 l4E94
l4ED2:
	v26 = Mem0[r11 + 24:word16]
	VNZC = cond(v26 - 0x0000)
	branch Test(EQ,Z) l4E94
	// succ:  l4ED8 l4E94
l4ED8:
	r11 = r11 + 0x0018
	VNZC = cond(r11)
	r15 = r11
	call xTaskRemoveFromEventList (retsize: 2;)
	VNZC = cond(r15 - 0x0000)
	branch Test(EQ,Z) l4E94
	// succ:  l4EE6 l4E94
l4EE6:
	r13 = 0x0001
	// succ:  l4EE8
l4EE8:
	r15 = r13
	v20 = Mem0[sp:word16]
	sp = sp + 2
	r10 = v20
	v21 = Mem0[sp:word16]
	sp = sp + 2
	r11 = v21
	v22 = Mem0[sp:word16]
	sp = sp + 2
	return
	// succ:  xQueueSendFromISR_exit
xQueueSendFromISR_exit:


// xQueueReceive
// Return size: 2
define xQueueReceive
xQueueReceive_entry:
	// succ:  l00004EF0
l00004EF0:
	sp = fp
	sp = sp - 2
	Mem0[sp:word16] = r11
	sp = sp - 2
	Mem0[sp:word16] = r10
	sp = sp - 2
	Mem0[sp:word16] = r9
	r11 = r15
	r9 = r14
	r10 = r13
	call vTaskSuspendAll (retsize: 2;)
	sr = sr & ~0x0008
	Mem0[0x0218:ptr16] = Mem0[0x0218:ptr16] + 0x0001
	VNZC = cond(Mem0[0x0218:ptr16])
	v11 = Mem0[r11 + 46:word16]
	v11 = v11 + 0x0001
	Mem0[r11 + 46:word16] = v11
	VNZC = cond(v11)
	v12 = Mem0[r11 + 48:word16]
	v12 = v12 + 0x0001
	Mem0[r11 + 48:word16] = v12
	VNZC = cond(v12)
	VNZC = cond(0x0218 - 0x0000)
	branch Test(EQ,Z) l00004F1C
	// succ:  l00004F14 l00004F1C
l00004F14:
	Mem0[0x0218:ptr16] = Mem0[0x0218:ptr16] + 0xFFFF
	VNZC = cond(Mem0[0x0218:ptr16])
	branch Test(NE,Z) l00004F1C
	// succ:  l00004F1A l00004F1C
l00004F1A:
	sr = sr | 0x0008
	// succ:  l00004F1C
l00004F1C:
	r15 = r11
	call prvIsQueueEmpty (retsize: 2;)
	VNZC = cond(r15 - 0x0000)
	branch Test(EQ,Z) l00004F2A
	// succ:  l00004F26 l00004F2A
l00004F26:
	VNZC = cond(r10 - 0x0000)
	branch Test(NE,Z) l00004F96
	// succ:  l00004F2A l00004F96
l00004F2A:
	sr = sr & ~0x0008
	Mem0[0x0218:ptr16] = Mem0[0x0218:ptr16] + 0x0001
	VNZC = cond(Mem0[0x0218:ptr16])
	v14 = Mem0[r11 + 40:word16]
	r14 = v14
	VNZC = cond(r14 - 0x0000)
	branch Test(EQ,Z) l00004F92
	// succ:  l00004F38 l00004F92
l00004F38:
	v15 = Mem0[r11 + 44:word16]
	r13 = v15
	v16 = Mem0[r11 + 6:word16]
	r15 = v16
	r15 = r15 + r13
	VNZC = cond(r15)
	v17 = Mem0[r11 + 6:word16]
	v17 = r15
	Mem0[r11 + 6:word16] = v17
	v18 = Mem0[r11 + 2:word16]
	VNZC = cond(r15 - v18)
	branch Test(UGE,C) l00004F50
	// succ:  l00004F4C l00004F50
l00004F4C:
	v20 = Mem0[r11:word16]
	v21 = Mem0[r11 + 6:word16]
	v21 = v20
	Mem0[r11 + 6:word16] = v21
	// succ:  l00004F50
l00004F50:
	r14 = r14 + 0xFFFF
	VNZC = cond(r14)
	v22 = Mem0[r11 + 40:word16]
	v22 = r14
	Mem0[r11 + 40:word16] = v22
	v23 = Mem0[r11 + 6:word16]
	r14 = v23
	r15 = r9
	call memcpy (retsize: 2;)
	v24 = Mem0[r11 + 46:word16]
	v24 = v24 + 0x0001
	Mem0[r11 + 46:word16] = v24
	VNZC = cond(v24)
	r10 = 0x0001
	// succ:  l00004F66
l00004F66:
	VNZC = cond(0x0218 - 0x0000)
	branch Test(EQ,Z) l00004F74
	// succ:  l00004F6C l00004F74
l00004F6C:
	Mem0[0x0218:ptr16] = Mem0[0x0218:ptr16] + 0xFFFF
	VNZC = cond(Mem0[0x0218:ptr16])
	branch Test(NE,Z) l00004F74
	// succ:  l00004F72 l00004F74
l00004F72:
	sr = sr | 0x0008
	// succ:  l00004F74
l00004F74:
	r15 = r11
	call prvUnlockQueue (retsize: 2;)
	VNZC = cond(r15 - 0x0000)
	branch Test(EQ,Z) l00004F8C
	// succ:  l00004F7E l00004F8C
l00004F7E:
	call xTaskResumeAll (retsize: 2;)
	VNZC = cond(r15 - 0x0000)
	branch Test(NE,Z) l00004FEC
	// succ:  l00004F86 l00004FEC
l00004F86:
	call vPortYield (retsize: 2;)
	goto l00004FEC
	// succ:  l00004FEC
l00004F8C:
	call xTaskResumeAll (retsize: 2;)
	goto l00004FEC
	// succ:  l00004FEC
l00004F92:
	r10 = 0x0000
	goto l00004F66
	// succ:  l00004F66
l00004F96:
	r15 = r11
	r15 = r15 + 0x0018
	VNZC = cond(r15)
	r14 = r10
	call vTaskPlaceOnEventList (retsize: 2;)
	sr = sr & ~0x0008
	Mem0[0x0218:ptr16] = Mem0[0x0218:ptr16] + 0x0001
	VNZC = cond(Mem0[0x0218:ptr16])
	r15 = r11
	call prvUnlockQueue (retsize: 2;)
	call xTaskResumeAll (retsize: 2;)
	VNZC = cond(r15 - 0x0000)
	branch Test(EQ,Z) l00004FE6
	// succ:  l00004FB6 l00004FE6
l00004FB6:
	call vTaskSuspendAll (retsize: 2;)
	sr = sr & ~0x0008
	Mem0[0x0218:ptr16] = Mem0[0x0218:ptr16] + 0x0001
	VNZC = cond(Mem0[0x0218:ptr16])
	v25 = Mem0[r11 + 46:word16]
	v25 = v25 + 0x0001
	Mem0[r11 + 46:word16] = v25
	VNZC = cond(v25)
	v26 = Mem0[r11 + 48:word16]
	v26 = v26 + 0x0001
	Mem0[r11 + 48:word16] = v26
	VNZC = cond(v26)
	VNZC = cond(0x0218 - 0x0000)
	branch Test(EQ,Z) l00004FD6
	// succ:  l00004FCE l00004FD6
l00004FCE:
	Mem0[0x0218:ptr16] = Mem0[0x0218:ptr16] + 0xFFFF
	VNZC = cond(Mem0[0x0218:ptr16])
	branch Test(NE,Z) l00004FD6
	// succ:  l00004FD4 l00004FD6
l00004FD4:
	sr = sr | 0x0008
	// succ:  l00004FD6
l00004FD6:
	VNZC = cond(0x0218 - 0x0000)
	branch Test(EQ,Z) l00004F2A
	// succ:  l00004FDC l00004F2A
l00004FDC:
	Mem0[0x0218:ptr16] = Mem0[0x0218:ptr16] + 0xFFFF
	VNZC = cond(Mem0[0x0218:ptr16])
	branch Test(NE,Z) l00004F2A
	// succ:  l00004FE2 l00004F2A
l00004FE2:
	sr = sr | 0x0008
	goto l00004F2A
	// succ:  l00004F2A
l00004FE6:
	call vPortYield (retsize: 2;)
	goto l00004FB6
	// succ:  l00004FB6
l00004FEC:
	r15 = r10
	v27 = Mem0[sp:word16]
	sp = sp + 2
	r9 = v27
	v28 = Mem0[sp:word16]
	sp = sp + 2
	r10 = v28
	v29 = Mem0[sp:word16]
	sp = sp + 2
	r11 = v29
	v30 = Mem0[sp:word16]
	sp = sp + 2
	return
	// succ:  xQueueReceive_exit
xQueueReceive_exit:


// xQueueReceiveFromISR
// Return size: 2
define xQueueReceiveFromISR
xQueueReceiveFromISR_entry:
	// succ:  l00004FF6
l00004FF6:
	sp = fp
	sp = sp - 2
	Mem0[sp:word16] = r11
	sp = sp - 2
	Mem0[sp:word16] = r10
	r11 = r15
	r12 = r14
	r10 = r13
	v9 = Mem0[r15 + 40:word16]
	r14 = v9
	VNZC = cond(r14 - 0x0000)
	branch Test(EQ,Z) l00005060
	// succ:  l00005008 l00005060
l00005008:
	v12 = Mem0[r15 + 44:word16]
	r13 = v12
	v13 = Mem0[r15 + 6:word16]
	r15 = v13
	r15 = r15 + r13
	VNZC = cond(r15)
	v14 = Mem0[r11 + 6:word16]
	v14 = r15
	Mem0[r11 + 6:word16] = v14
	v15 = Mem0[r11 + 2:word16]
	VNZC = cond(r15 - v15)
	branch Test(UGE,C) l00005020
	// succ:  l0000501C l00005020
l0000501C:
	v17 = Mem0[r11:word16]
	v18 = Mem0[r11 + 6:word16]
	v18 = v17
	Mem0[r11 + 6:word16] = v18
	// succ:  l00005020
l00005020:
	r14 = r14 + 0xFFFF
	VNZC = cond(r14)
	v22 = Mem0[r11 + 40:word16]
	v22 = r14
	Mem0[r11 + 40:word16] = v22
	v23 = Mem0[r11 + 6:word16]
	r14 = v23
	r15 = r12
	call memcpy (retsize: 2;)
	v24 = Mem0[r11 + 46:word16]
	r15 = v24
	VNZC = cond(r15 - 0xFFFF)
	branch Test(EQ,Z) l00005042
	// succ:  l00005038 l00005042
l00005038:
	r15 = r15 + 0x0001
	VNZC = cond(r15)
	v25 = Mem0[r11 + 46:word16]
	v25 = r15
	Mem0[r11 + 46:word16] = v25
	// succ:  l0000503E
l0000503E:
	r15 = 0x0001
	goto l00005062
	// succ:  l00005062
l00005042:
	v26 = Mem0[r10:word16]
	VNZC = cond(v26 - 0x0000)
	branch Test(NE,Z) l0000503E
	// succ:  l00005048 l0000503E
l00005048:
	v27 = Mem0[r11 + 8:word16]
	VNZC = cond(v27 - 0x0000)
	branch Test(EQ,Z) l0000503E
	// succ:  l0000504E l0000503E
l0000504E:
	r11 = r11 + 0x0008
	VNZC = cond(r11)
	r15 = r11
	call xTaskRemoveFromEventList (retsize: 2;)
	VNZC = cond(r15 - 0x0000)
	branch Test(EQ,Z) l0000503E
	// succ:  l0000505A l0000503E
l0000505A:
	v28 = Mem0[r10:word16]
	v28 = 0x0001
	Mem0[r10:word16] = v28
	goto l0000503E
	// succ:  l0000503E
l00005060:
	r15 = 0x0000
	// succ:  l00005062
l00005062:
	v19 = Mem0[sp:word16]
	sp = sp + 2
	r10 = v19
	v20 = Mem0[sp:word16]
	sp = sp + 2
	r11 = v20
	v21 = Mem0[sp:word16]
	sp = sp + 2
	return
	// succ:  xQueueReceiveFromISR_exit
xQueueReceiveFromISR_exit:


// uxQueueMessagesWaiting
// Return size: 2
define uxQueueMessagesWaiting
uxQueueMessagesWaiting_entry:
	// succ:  l5068
l5068:
	sp = fp
	sr = sr & ~0x0008
	Mem0[0x0218:ptr16] = Mem0[0x0218:ptr16] + 0x0001
	VNZC = cond(Mem0[0x0218:ptr16])
	v6 = Mem0[r15 + 40:word16]
	r15 = v6
	branch Test(EQ,Z) l507C
	// succ:  l5074 l507C
l5074:
	Mem0[0x0218:ptr16] = Mem0[0x0218:ptr16] + 0xFFFF
	VNZC = cond(Mem0[0x0218:ptr16])
	branch Test(NE,Z) l507C
	// succ:  l507A l507C
l507A:
	sr = sr | 0x0008
	// succ:  l507C
l507C:
	v8 = Mem0[sp:word16]
	sp = sp + 2
	return
	// succ:  uxQueueMessagesWaiting_exit
uxQueueMessagesWaiting_exit:


// vQueueDelete
// Return size: 2
define vQueueDelete
vQueueDelete_entry:
	// succ:  l507E
l507E:
	sp = fp
	sp = sp - 2
	Mem0[sp:word16] = r11
	r11 = r15
	v5 = Mem0[r15:word16]
	r15 = v5
	call vPortFree (retsize: 2;)
	r15 = r11
	call vPortFree (retsize: 2;)
	v6 = Mem0[sp:word16]
	sp = sp + 2
	r11 = v6
	v7 = Mem0[sp:word16]
	sp = sp + 2
	return
	// succ:  vQueueDelete_exit
vQueueDelete_exit:


// prvUnlockQueue
// Return size: 2
define prvUnlockQueue
prvUnlockQueue_entry:
	// succ:  l00005092
l00005092:
	sp = fp
	sp = sp - 2
	Mem0[sp:word16] = r11
	sp = sp - 2
	Mem0[sp:word16] = r10
	r11 = r15
	r10 = 0x0000
	sr = sr & ~0x0008
	Mem0[0x0218:ptr16] = Mem0[0x0218:ptr16] + 0x0001
	VNZC = cond(Mem0[0x0218:ptr16])
	v8 = Mem0[r15 + 48:word16]
	v8 = v8 + 0xFFFF
	Mem0[r15 + 48:word16] = v8
	VNZC = cond(v8)
	branch Test(SG,N) l000050B0
	// succ:  l000050A6 l000050B0
l000050A6:
	v10 = Mem0[r15 + 48:word16]
	v10 = 0xFFFF
	Mem0[r15 + 48:word16] = v10
	v11 = Mem0[r15 + 24:word16]
	VNZC = cond(v11 - 0x0000)
	branch Test(NE,Z) l000050F4
	// succ:  l000050B0 l000050F4
l000050B0:
	VNZC = cond(0x0218 - 0x0000)
	branch Test(EQ,Z) l000050BE
	// succ:  l000050B6 l000050BE
l000050B6:
	Mem0[0x0218:ptr16] = Mem0[0x0218:ptr16] + 0xFFFF
	VNZC = cond(Mem0[0x0218:ptr16])
	branch Test(NE,Z) l000050BE
	// succ:  l000050BC l000050BE
l000050BC:
	sr = sr | 0x0008
	// succ:  l000050BE
l000050BE:
	sr = sr & ~0x0008
	Mem0[0x0218:ptr16] = Mem0[0x0218:ptr16] + 0x0001
	VNZC = cond(Mem0[0x0218:ptr16])
	v13 = Mem0[r11 + 46:word16]
	v13 = v13 + 0xFFFF
	Mem0[r11 + 46:word16] = v13
	VNZC = cond(v13)
	branch Test(SG,N) l000050D4
	// succ:  l000050CA l000050D4
l000050CA:
	v14 = Mem0[r11 + 46:word16]
	v14 = 0xFFFF
	Mem0[r11 + 46:word16] = v14
	v15 = Mem0[r11 + 8:word16]
	VNZC = cond(v15 - 0x0000)
	branch Test(NE,Z) l000050E4
	// succ:  l000050D4 l000050E4
l000050D4:
	VNZC = cond(0x0218 - 0x0000)
	branch Test(EQ,Z) l00005104
	// succ:  l000050DA l00005104
l000050DA:
	Mem0[0x0218:ptr16] = Mem0[0x0218:ptr16] + 0xFFFF
	VNZC = cond(Mem0[0x0218:ptr16])
	branch Test(NE,Z) l00005104
	// succ:  l000050E0 l00005104
l000050E0:
	sr = sr | 0x0008
	goto l00005104
	// succ:  l00005104
l000050E4:
	r11 = r11 + 0x0008
	VNZC = cond(r11)
	r15 = r11
	call xTaskRemoveFromEventList (retsize: 2;)
	VNZC = cond(r15 - 0x0000)
	branch Test(EQ,Z) l000050D4
	// succ:  l000050F0 l000050D4
l000050F0:
	r10 = 0x0001
	goto l000050D4
	// succ:  l000050D4
l000050F4:
	r15 = r15 + 0x0018
	VNZC = cond(r15)
	call xTaskRemoveFromEventList (retsize: 2;)
	VNZC = cond(r15 - 0x0000)
	branch Test(EQ,Z) l000050B0
	// succ:  l00005100 l000050B0
l00005100:
	r10 = 0x0001
	goto l000050B0
	// succ:  l000050B0
l00005104:
	r15 = r10
	v16 = Mem0[sp:word16]
	sp = sp + 2
	r10 = v16
	v17 = Mem0[sp:word16]
	sp = sp + 2
	r11 = v17
	v18 = Mem0[sp:word16]
	sp = sp + 2
	return
	// succ:  prvUnlockQueue_exit
prvUnlockQueue_exit:


// prvIsQueueEmpty
// Return size: 2
define prvIsQueueEmpty
prvIsQueueEmpty_entry:
	// succ:  l0000510C
l0000510C:
	sp = fp
	sr = sr & ~0x0008
	Mem0[0x0218:ptr16] = Mem0[0x0218:ptr16] + 0x0001
	VNZC = cond(Mem0[0x0218:ptr16])
	r14 = 0x0000
	v7 = Mem0[r15 + 40:word16]
	VNZC = cond(v7 - 0x0000)
	branch Test(NE,Z) l0000511C
	// succ:  l0000511A l0000511C
l0000511A:
	r14 = 0x0001
	// succ:  l0000511C
l0000511C:
	VNZC = cond(0x0218 - 0x0000)
	branch Test(EQ,Z) l0000512A
	// succ:  l00005122 l0000512A
l00005122:
	Mem0[0x0218:ptr16] = Mem0[0x0218:ptr16] + 0xFFFF
	VNZC = cond(Mem0[0x0218:ptr16])
	branch Test(NE,Z) l0000512A
	// succ:  l00005128 l0000512A
l00005128:
	sr = sr | 0x0008
	// succ:  l0000512A
l0000512A:
	r15 = r14
	v9 = Mem0[sp:word16]
	sp = sp + 2
	return
	// succ:  prvIsQueueEmpty_exit
prvIsQueueEmpty_exit:


// prvIsQueueFull
// Return size: 2
define prvIsQueueFull
prvIsQueueFull_entry:
	// succ:  l0000512E
l0000512E:
	sp = fp
	sr = sr & ~0x0008
	Mem0[0x0218:ptr16] = Mem0[0x0218:ptr16] + 0x0001
	VNZC = cond(Mem0[0x0218:ptr16])
	r14 = 0x0000
	v7 = Mem0[r15 + 42:word16]
	v8 = Mem0[r15 + 40:word16]
	VNZC = cond(v8 - v7)
	branch Test(EQ,Z) l0000514E
	// succ:  l0000513E l0000514E
l0000513E:
	VNZC = cond(0x0218 - 0x0000)
	branch Test(EQ,Z) l00005152
	// succ:  l00005144 l00005152
l00005144:
	Mem0[0x0218:ptr16] = Mem0[0x0218:ptr16] + 0xFFFF
	VNZC = cond(Mem0[0x0218:ptr16])
	branch Test(NE,Z) l00005152
	// succ:  l0000514A l00005152
l0000514A:
	sr = sr | 0x0008
	goto l00005152
	// succ:  l00005152
l0000514E:
	r14 = 0x0001
	goto l0000513E
	// succ:  l0000513E
l00005152:
	r15 = r14
	v10 = Mem0[sp:word16]
	sp = sp + 2
	return
	// succ:  prvIsQueueFull_exit
prvIsQueueFull_exit:


// pvPortMalloc
// Return size: 2
define pvPortMalloc
pvPortMalloc_entry:
	// succ:  l5156
l5156:
	sp = fp
	sp = sp - 2
	Mem0[sp:word16] = r11
	sp = sp - 2
	Mem0[sp:word16] = r10
	r11 = r15
	r10 = 0x0000
	r15 = r15 & 0x0001
	V = false
	NZC = cond(r15)
	branch Test(EQ,Z) l5166
	// succ:  l5162 l5166
l5162:
	r11 = r11 - r15
	VNZC = cond(r11)
	r11 = r11 + 0x0002
	VNZC = cond(r11)
	// succ:  l5166
l5166:
	call vTaskSuspendAll (retsize: 2;)
	r14 = 0x0216
	r15 = r14
	r15 = r15 + r11
	VNZC = cond(r15)
	VNZC = cond(r15 - 0x0708)
	branch Test(ULT,C) l5186
	// succ:  l5178 l5186
l5178:
	VNZC = cond(r14 - r15)
	branch Test(ULT,C) l5186
	// succ:  l517C l5186
l517C:
	r10 = r14
	r10 = r10 + 0x02AA
	VNZC = cond(r10)
	Mem0[0x0216:ptr16] = r15
	// succ:  l5186
l5186:
	call xTaskResumeAll (retsize: 2;)
	r15 = r10
	v12 = Mem0[sp:word16]
	sp = sp + 2
	r10 = v12
	v13 = Mem0[sp:word16]
	sp = sp + 2
	r11 = v13
	v14 = Mem0[sp:word16]
	sp = sp + 2
	return
	// succ:  pvPortMalloc_exit
pvPortMalloc_exit:


// vPortFree
// Return size: 2
define vPortFree
vPortFree_entry:
	// succ:  l5192
l5192:
	sp = fp
	v3 = Mem0[sp:word16]
	sp = sp + 2
	return
	// succ:  vPortFree_exit
vPortFree_exit:


// vPortInitialiseBlocks
// Return size: 2
define vPortInitialiseBlocks
vPortInitialiseBlocks_entry:
	// succ:  l5194
l5194:
	sp = fp
	Mem0[0x0216:ptr16] = 0x0000
	v3 = Mem0[sp:word16]
	sp = sp + 2
	return
	// succ:  vPortInitialiseBlocks_exit
vPortInitialiseBlocks_exit:


// pxPortInitialiseStack
// Return size: 2
define pxPortInitialiseStack
pxPortInitialiseStack_entry:
	// succ:  l519A
l519A:
	sp = fp
	v5 = Mem0[r15:word16]
	v5 = r14
	Mem0[r15:word16] = v5
	r15 = r15 - 0x0002
	VNZC = cond(r15)
	v7 = Mem0[r15:word16]
	v7 = 0x0008
	Mem0[r15:word16] = v7
	r15 = r15 - 0x0002
	VNZC = cond(r15)
	v8 = Mem0[r15:word16]
	v8 = 0x4444
	Mem0[r15:word16] = v8
	r15 = r15 - 0x0002
	VNZC = cond(r15)
	v9 = Mem0[r15:word16]
	v9 = 0x5555
	Mem0[r15:word16] = v9
	r15 = r15 - 0x0002
	VNZC = cond(r15)
	v10 = Mem0[r15:word16]
	v10 = 0x6666
	Mem0[r15:word16] = v10
	r15 = r15 - 0x0002
	VNZC = cond(r15)
	v11 = Mem0[r15:word16]
	v11 = 0x7777
	Mem0[r15:word16] = v11
	r15 = r15 - 0x0002
	VNZC = cond(r15)
	v12 = Mem0[r15:word16]
	v12 = 0x8888
	Mem0[r15:word16] = v12
	r15 = r15 - 0x0002
	VNZC = cond(r15)
	v13 = Mem0[r15:word16]
	v13 = 0x9999
	Mem0[r15:word16] = v13
	r15 = r15 - 0x0002
	VNZC = cond(r15)
	v14 = Mem0[r15:word16]
	v14 = 0xAAAA
	Mem0[r15:word16] = v14
	r15 = r15 - 0x0002
	VNZC = cond(r15)
	v15 = Mem0[r15:word16]
	v15 = 0xBBBB
	Mem0[r15:word16] = v15
	r15 = r15 - 0x0002
	VNZC = cond(r15)
	v16 = Mem0[r15:word16]
	v16 = 0xCCCC
	Mem0[r15:word16] = v16
	r15 = r15 - 0x0002
	VNZC = cond(r15)
	v17 = Mem0[r15:word16]
	v17 = 0xDDDD
	Mem0[r15:word16] = v17
	r15 = r15 - 0x0002
	VNZC = cond(r15)
	v18 = Mem0[r15:word16]
	v18 = 0xEEEE
	Mem0[r15:word16] = v18
	r15 = r15 - 0x0002
	VNZC = cond(r15)
	v20 = Mem0[r15:word16]
	v20 = r13
	Mem0[r15:word16] = v20
	r15 = r15 - 0x0002
	VNZC = cond(r15)
	v21 = Mem0[r15:word16]
	v21 = 0x0000
	Mem0[r15:word16] = v21
	v22 = Mem0[sp:word16]
	sp = sp + 2
	return
	// succ:  pxPortInitialiseStack_exit
pxPortInitialiseStack_exit:


// xPortStartScheduler
// Return size: 2
define xPortStartScheduler
xPortStartScheduler_entry:
	// succ:  l520A
l520A:
	sp = fp
	call prvSetupTimerInterrupt (retsize: 2;)
	v4 = Mem0[pc + -20494:word16]
	r12 = v4
	v6 = Mem0[r12:word16]
	sp = v6
	v7 = Mem0[sp:word16]
	sp = sp + 2
	r15 = v7
	v9 = Mem0[pc + -20480:word16]
	v9 = r15
	Mem0[pc + -20480:word16] = v9
	v10 = Mem0[sp:word16]
	sp = sp + 2
	r15 = v10
	v11 = Mem0[sp:word16]
	sp = sp + 2
	r14 = v11
	v13 = Mem0[sp:word16]
	sp = sp + 2
	r13 = v13
	v15 = Mem0[sp:word16]
	sp = sp + 2
	r12 = v15
	v16 = Mem0[sp:word16]
	sp = sp + 2
	r11 = v16
	v18 = Mem0[sp:word16]
	sp = sp + 2
	r10 = v18
	v20 = Mem0[sp:word16]
	sp = sp + 2
	r9 = v20
	v22 = Mem0[sp:word16]
	sp = sp + 2
	r8 = v22
	v24 = Mem0[sp:word16]
	sp = sp + 2
	r7 = v24
	v26 = Mem0[sp:word16]
	sp = sp + 2
	r6 = v26
	v28 = Mem0[sp:word16]
	sp = sp + 2
	r5 = v28
	v30 = Mem0[sp:word16]
	sp = sp + 2
	r4 = v30
	return
	// succ:  xPortStartScheduler_exit
xPortStartScheduler_exit:


// vPortEndScheduler
// Return size: 2
define vPortEndScheduler
vPortEndScheduler_entry:
	// succ:  l5238
l5238:
	sp = fp
	v3 = Mem0[sp:word16]
	sp = sp + 2
	return
	// succ:  vPortEndScheduler_exit
vPortEndScheduler_exit:


// vPortYield
// Return size: 2
define vPortYield
vPortYield_entry:
	// succ:  l0000523A
l0000523A:
	sp = fp
	sp = sp - 2
	Mem0[sp:word16] = sr
	sr = sr & ~0x0008
	sp = sp - 2
	Mem0[sp:word16] = r4
	sp = sp - 2
	Mem0[sp:word16] = r5
	sp = sp - 2
	Mem0[sp:word16] = r6
	sp = sp - 2
	Mem0[sp:word16] = r7
	sp = sp - 2
	Mem0[sp:word16] = r8
	sp = sp - 2
	Mem0[sp:word16] = r9
	sp = sp - 2
	Mem0[sp:word16] = r10
	sp = sp - 2
	Mem0[sp:word16] = r11
	sp = sp - 2
	Mem0[sp:word16] = r12
	sp = sp - 2
	Mem0[sp:word16] = r13
	sp = sp - 2
	Mem0[sp:word16] = r14
	sp = sp - 2
	Mem0[sp:word16] = r15
	v17 = Mem0[pc + -20544:word16]
	r14 = v17
	sp = sp - 2
	Mem0[sp:word16] = r14
	v18 = Mem0[pc + -20572:word16]
	r12 = v18
	v19 = Mem0[r12:word16]
	v19 = sp
	Mem0[r12:word16] = v19
	call vTaskSwitchContext (retsize: 2;)
	v20 = Mem0[pc + -20584:word16]
	r12 = v20
	v21 = Mem0[r12:word16]
	sp = v21
	v22 = Mem0[sp:word16]
	sp = sp + 2
	r15 = v22
	v23 = Mem0[pc + -20570:word16]
	v23 = r15
	Mem0[pc + -20570:word16] = v23
	v24 = Mem0[sp:word16]
	sp = sp + 2
	r15 = v24
	v25 = Mem0[sp:word16]
	sp = sp + 2
	r14 = v25
	v26 = Mem0[sp:word16]
	sp = sp + 2
	r13 = v26
	v27 = Mem0[sp:word16]
	sp = sp + 2
	r12 = v27
	v28 = Mem0[sp:word16]
	sp = sp + 2
	r11 = v28
	v29 = Mem0[sp:word16]
	sp = sp + 2
	r10 = v29
	v30 = Mem0[sp:word16]
	sp = sp + 2
	r9 = v30
	v31 = Mem0[sp:word16]
	sp = sp + 2
	r8 = v31
	v32 = Mem0[sp:word16]
	sp = sp + 2
	r7 = v32
	v33 = Mem0[sp:word16]
	sp = sp + 2
	r6 = v33
	v34 = Mem0[sp:word16]
	sp = sp + 2
	r5 = v34
	v35 = Mem0[sp:word16]
	sp = sp + 2
	r4 = v35
	return
	// succ:  vPortYield_exit
vPortYield_exit:


// prvSetupTimerInterrupt
// Return size: 2
define prvSetupTimerInterrupt
prvSetupTimerInterrupt_entry:
	// succ:  l528E
l528E:
	sp = fp
	Mem0[0x0160:ptr16] = 0x0000
	Mem0[0x0160:ptr16] = 0x0100
	Mem0[0x0160:ptr16] = Mem0[0x0160:ptr16] | 0x0004
	Mem0[0x0172:ptr16] = 0x0020
	Mem0[0x0162:ptr16] = 0x0010
	Mem0[0x0160:ptr16] = Mem0[0x0160:ptr16] | 0x0004
	Mem0[0x0160:ptr16] = Mem0[0x0160:ptr16] | 0x0010
	v3 = Mem0[sp:word16]
	sp = sp + 2
	return
	// succ:  prvSetupTimerInterrupt_exit
prvSetupTimerInterrupt_exit:


// prvTickISR
// Return size: 2
define prvTickISR
prvTickISR_entry:
	// succ:  l52B4
l52B4:
	sp = fp
	sp = sp - 2
	Mem0[sp:word16] = r4
	sp = sp - 2
	Mem0[sp:word16] = r5
	sp = sp - 2
	Mem0[sp:word16] = r6
	sp = sp - 2
	Mem0[sp:word16] = r7
	sp = sp - 2
	Mem0[sp:word16] = r8
	sp = sp - 2
	Mem0[sp:word16] = r9
	sp = sp - 2
	Mem0[sp:word16] = r10
	sp = sp - 2
	Mem0[sp:word16] = r11
	sp = sp - 2
	Mem0[sp:word16] = r12
	sp = sp - 2
	Mem0[sp:word16] = r13
	sp = sp - 2
	Mem0[sp:word16] = r14
	sp = sp - 2
	Mem0[sp:word16] = r15
	v16 = Mem0[pc + -20662:word16]
	r14 = v16
	sp = sp - 2
	Mem0[sp:word16] = r14
	v17 = Mem0[pc + -20690:word16]
	r12 = v17
	v18 = Mem0[r12:word16]
	v18 = sp
	Mem0[r12:word16] = v18
	call vTaskIncrementTick (retsize: 2;)
	call vTaskSwitchContext (retsize: 2;)
	v19 = Mem0[pc + -20706:word16]
	r12 = v19
	v20 = Mem0[r12:word16]
	sp = v20
	v21 = Mem0[sp:word16]
	sp = sp + 2
	r15 = v21
	v22 = Mem0[pc + -20692:word16]
	v22 = r15
	Mem0[pc + -20692:word16] = v22
	v23 = Mem0[sp:word16]
	sp = sp + 2
	r15 = v23
	v24 = Mem0[sp:word16]
	sp = sp + 2
	r14 = v24
	v25 = Mem0[sp:word16]
	sp = sp + 2
	r13 = v25
	v26 = Mem0[sp:word16]
	sp = sp + 2
	r12 = v26
	v27 = Mem0[sp:word16]
	sp = sp + 2
	r11 = v27
	v28 = Mem0[sp:word16]
	sp = sp + 2
	r10 = v28
	v29 = Mem0[sp:word16]
	sp = sp + 2
	r9 = v29
	v30 = Mem0[sp:word16]
	sp = sp + 2
	r8 = v30
	v31 = Mem0[sp:word16]
	sp = sp + 2
	r7 = v31
	v32 = Mem0[sp:word16]
	sp = sp + 2
	r6 = v32
	v33 = Mem0[sp:word16]
	sp = sp + 2
	r5 = v33
	v34 = Mem0[sp:word16]
	sp = sp + 2
	r4 = v34
	return
	// succ:  prvTickISR_exit
prvTickISR_exit:


// printf
// Return size: 2
define printf
printf_entry:
	// succ:  l5308
l5308:
	sp = fp
	r15 = 0x0002
	r15 = r15 + sp
	VNZC = cond(r15)
	v5 = Mem0[r15:word16]
	r15 = r15 + 2
	r14 = v5
	r13 = r15
	r15 = 0x43A2
	call vuprintf (retsize: 2;)
	v8 = Mem0[sp:word16]
	sp = sp + 2
	return
	// succ:  printf_exit
printf_exit:


// PRINT
// Return size: 2
define PRINT
PRINT_entry:
	// succ:  l0000531A
l0000531A:
	sp = fp
	sp = sp - 2
	Mem0[sp:word16] = r11
	sp = sp - 2
	Mem0[sp:word16] = r10
	r10 = r15
	r11 = r14
	VNZC = cond(r14 - 0x0000)
	branch Test(NE,Z) l0000532A
	// succ:  l00005326 l0000532A
l00005326:
	r15 = 0x0001
	goto l00005344
	// succ:  l00005344
l0000532A:
	v9 = Mem0[r10:byte]
	r15 = v9
	v10 = SLICE(r15, byte, 0)
	r15 = (int16) v10
	V = false
	NZC = cond(r15)
	r10 = r10 + 0x0001
	VNZC = cond(r10)
	call __write_char (retsize: 2;)
	VNZC = cond(r15 - 0x0000)
	branch Test(LT,VN) l00005342
	// succ:  l00005338 l00005342
l00005338:
	Mem0[0x021A:ptr16] = Mem0[0x021A:ptr16] + 0x0001
	VNZC = cond(Mem0[0x021A:ptr16])
	r11 = r11 + 0xFFFF
	VNZC = cond(r11)
	branch Test(NE,Z) l0000532A
	// succ:  l00005340 l0000532A
l00005340:
	goto l00005326
	// succ:  l00005326
l00005342:
	r15 = 0xFFFF
	// succ:  l00005344
l00005344:
	v14 = Mem0[sp:word16]
	sp = sp + 2
	r10 = v14
	v15 = Mem0[sp:word16]
	sp = sp + 2
	r11 = v15
	v16 = Mem0[sp:word16]
	sp = sp + 2
	return
	// succ:  PRINT_exit
PRINT_exit:


// __write_pad
// Return size: 2
define __write_pad
__write_pad_entry:
	// succ:  l0000534A
l0000534A:
	sp = fp
	sp = sp - 2
	Mem0[sp:word16] = r11
	sp = sp - 2
	Mem0[sp:word16] = r10
	sp = sp - 2
	Mem0[sp:word16] = r9
	r9 = r15
	r11 = r14
	VNZC = cond(r14 - 0x01)
	branch Test(LT,VN) l00005370
	// succ:  l00005358 l00005370
l00005358:
	r10 = r15
	v10 = SLICE(r10, byte, 0)
	r10 = (int16) v10
	V = false
	NZC = cond(r10)
	// succ:  l0000535C
l0000535C:
	r15 = r10
	call __write_char (retsize: 2;)
	VNZC = cond(r15 - 0x0000)
	branch Test(LT,VN) l00005374
	// succ:  l00005366 l00005374
l00005366:
	Mem0[0x021A:ptr16] = Mem0[0x021A:ptr16] + 0x0001
	VNZC = cond(Mem0[0x021A:ptr16])
	r11 = r11 + 0xFF
	VNZC = cond(r11)
	VNZC = cond(r11 - 0x01)
	branch Test(GE,VN) l0000535C
	// succ:  l00005370 l0000535C
l00005370:
	r15 = r9
	goto l00005376
	// succ:  l00005376
l00005374:
	r15 = 0xFFFF
	// succ:  l00005376
l00005376:
	v13 = Mem0[sp:word16]
	sp = sp + 2
	r9 = v13
	v14 = Mem0[sp:word16]
	sp = sp + 2
	r10 = v14
	v15 = Mem0[sp:word16]
	sp = sp + 2
	r11 = v15
	v16 = Mem0[sp:word16]
	sp = sp + 2
	return
	// succ:  __write_pad_exit
__write_pad_exit:


// vuprintf
// Return size: 2
define vuprintf
vuprintf_entry:
	// succ:  l537E
l537E:
	sp = fp
	sp = sp - 2
	Mem0[sp:word16] = r11
	sp = sp - 2
	Mem0[sp:word16] = r10
	sp = sp - 2
	Mem0[sp:word16] = r9
	sp = sp - 2
	Mem0[sp:word16] = r8
	sp = sp - 2
	Mem0[sp:word16] = r7
	sp = sp - 2
	Mem0[sp:word16] = r6
	sp = sp - 2
	Mem0[sp:word16] = r5
	sp = sp - 2
	Mem0[sp:word16] = r4
	sp = sp - 0x003C
	VNZC = cond(sp)
	r5 = r13
	v13 = Mem0[sp + 48:word16]
	v13 = 0x0000
	Mem0[sp + 48:word16] = v13
	v14 = Mem0[sp + 50:word16]
	v14 = 0x0000
	Mem0[sp + 50:word16] = v14
	Mem0[0x021A:ptr16] = 0x0000
	Mem0[0x09B2:ptr16] = r15
	r6 = r14
	// succ:  l53A6
l53A6:
	r15 = r6
	v17 = Mem0[r6:byte]
	r7 = v17
	VNZC = cond(r7 - 0x00)
	branch Test(EQ,Z) l53C2
	// succ:  l53AE l53C2
l53AE:
	VNZC = cond(r7 - 0x0025)
	branch Test(EQ,Z) l53C2
	// succ:  l53B4 l53C2
l53B4:
	r6 = r6 + 0x0001
	VNZC = cond(r6)
	v19 = Mem0[r6:byte]
	r7 = v19
	VNZC = cond(r7 - 0x00)
	branch Test(EQ,Z) l53C2
	// succ:  l53BC l53C2
l53BC:
	VNZC = cond(r7 - 0x0025)
	branch Test(NE,Z) l53B4
	// succ:  l53C2 l53B4
l53C2:
	r13 = r6
	r13 = r13 - r15
	VNZC = cond(r13)
	branch Test(EQ,Z) l53CC
	// succ:  l53C8 l53CC
l53C8:
	pc = 0x5916
	// succ:  l53CC
l53CC:
	VNZC = cond(r7 - 0x00)
	branch Test(NE,Z) l53D4
	// succ:  l53D0 l53D4
l53D0:
	pc = 0x5924
	// succ:  l53D4
l53D4:
	r6 = r6 + 0x0001
	VNZC = cond(r6)
	v21 = Mem0[sp + 46:byte]
	v21 = 0x00
	Mem0[sp + 46:byte] = v21
	v22 = Mem0[sp + 53:byte]
	v22 = 0x00
	Mem0[sp + 53:byte] = v22
	v23 = Mem0[sp + 47:byte]
	v23 = 0x00
	Mem0[sp + 47:byte] = v23
	r11 = 0xFF
	v24 = Mem0[sp + 40:byte]
	v24 = 0x00
	Mem0[sp + 40:byte] = v24
	// succ:  l53E8
l53E8:
	v25 = Mem0[r6:byte]
	r7 = v25
	r6 = r6 + 0x0001
	VNZC = cond(r6)
	// succ:  l53EC
l53EC:
	VNZC = cond(r7 - 0x0075)
	branch Test(NE,Z) l53F6
	// succ:  l53F2 l53F6
l53F2:
	pc = 0x58F0
	// succ:  l53F6
l53F6:
	r15 = r7
	r15 = r15 | 0x0020
	VNZC = cond(r15 - 0x0078)
	branch Test(NE,Z) l5406
	// succ:  l5402 l5406
l5402:
	pc = 0x58F0
	// succ:  l5406
l5406:
	VNZC = cond(r7 - 0x0020)
	branch Test(NE,Z) l5410
	// succ:  l540C l5410
l540C:
	pc = 0x58DC
	// succ:  l5410
l5410:
	VNZC = cond(r7 - 0x0023)
	branch Test(NE,Z) l541A
	// succ:  l5416 l541A
l5416:
	pc = 0x58D4
	// succ:  l541A
l541A:
	VNZC = cond(r7 - 0x002A)
	branch Test(NE,Z) l5424
	// succ:  l5420 l5424
l5420:
	pc = 0x58B8
	// succ:  l5424
l5424:
	VNZC = cond(r7 - 0x002D)
	branch Test(NE,Z) l542E
	// succ:  l542A l542E
l542A:
	pc = 0x58A8
	// succ:  l542E
l542E:
	VNZC = cond(r7 - 0x002B)
	branch Test(NE,Z) l5438
	// succ:  l5434 l5438
l5434:
	pc = 0x589E
	// succ:  l5438
l5438:
	VNZC = cond(r7 - 0x002E)
	branch Test(NE,Z) l5442
	// succ:  l543E l5442
l543E:
	pc = 0x5838
	// succ:  l5442
l5442:
	VNZC = cond(r7 - 0x0030)
	branch Test(NE,Z) l544C
	// succ:  l5448 l544C
l5448:
	pc = 0x5822
	// succ:  l544C
l544C:
	r15 = r7
	r15 = r15 + 0xFFCF
	VNZC = cond(r15)
	VNZC = cond(r15 - 0x0009)
	branch Test(ULT,C) l548C
	// succ:  l5458 l548C
l5458:
	r13 = 0x0000
	// succ:  l545A
l545A:
	r15 = r13
	r15 = r15 + r15
	VNZC = cond(r15)
	r15 = r15 + r15
	VNZC = cond(r15)
	r14 = r13
	r14 = r14 + r14
	VNZC = cond(r14)
	r13 = r15
	r13 = r13 + r14
	VNZC = cond(r13)
	r13 = r13 + r14
	VNZC = cond(r13)
	r13 = r13 + r14
	VNZC = cond(r13)
	r15 = r7
	v27 = SLICE(r15, byte, 0)
	r15 = (int16) v27
	V = false
	NZC = cond(r15)
	r13 = r13 + r15
	VNZC = cond(r13)
	r13 = r13 + 0xFFD0
	VNZC = cond(r13)
	v30 = Mem0[r6:byte]
	r7 = v30
	r6 = r6 + 0x0001
	VNZC = cond(r6)
	r15 = r7
	r15 = r15 + 0xFFD0
	VNZC = cond(r15)
	VNZC = cond(r15 - 0x000A)
	branch Test(UGE,C) l545A
	// succ:  l5486 l545A
l5486:
	v31 = Mem0[sp + 47:byte]
	v31 = r13
	Mem0[sp + 47:byte] = v31
	goto l53EC
	// succ:  l53EC
l548C:
	VNZC = cond(r7 - 0x0068)
	branch Test(EQ,Z) l581A
	// succ:  l5492 l581A
l5492:
	VNZC = cond(r7 - 0x006C)
	branch Test(NE,Z) l549E
	// succ:  l5498 l549E
l5498:
	v32 = Mem0[sp + 46:byte]
	v32 = v32 | 0x01
	Mem0[sp + 46:byte] = v32
	goto l53E8
	// succ:  l53E8
l549E:
	VNZC = cond(r7 - 0x0063)
	branch Test(EQ,Z) l580C
	// succ:  l54A4 l580C
l54A4:
	VNZC = cond(r7 - 0x0044)
	branch Test(EQ,Z) l5806
	// succ:  l54AA l5806
l54AA:
	VNZC = cond(r7 - 0x0064)
	branch Test(EQ,Z) l57AE
	// succ:  l54B0 l57AE
l54B0:
	VNZC = cond(r7 - 0x0069)
	branch Test(EQ,Z) l57AE
	// succ:  l54B6 l57AE
l54B6:
	VNZC = cond(r7 - 0x004F)
	branch Test(EQ,Z) l57A8
	// succ:  l54BC l57A8
l54BC:
	VNZC = cond(r7 - 0x006F)
	branch Test(EQ,Z) l57A2
	// succ:  l54C2 l57A2
l54C2:
	VNZC = cond(r7 - 0x0070)
	branch Test(EQ,Z) l5784
	// succ:  l54C8 l5784
l54C8:
	VNZC = cond(r7 - 0x0073)
	branch Test(EQ,Z) l570C
	// succ:  l54CE l570C
l54CE:
	VNZC = cond(r7 - 0x0055)
	branch Test(EQ,Z) l5706
	// succ:  l54D4 l5706
l54D4:
	VNZC = cond(r7 - 0x0075)
	branch Test(EQ,Z) l56FE
	// succ:  l54DA l56FE
l54DA:
	VNZC = cond(r7 - 0x0058)
	branch Test(EQ,Z) l55FE
	// succ:  l54E0 l55FE
l54E0:
	VNZC = cond(r7 - 0x0078)
	branch Test(EQ,Z) l55FE
	// succ:  l54E6 l55FE
l54E6:
	VNZC = cond(r7 - 0x00)
	branch Test(NE,Z) l54EE
	// succ:  l54EA l54EE
l54EA:
	pc = 0x5924
	// succ:  l54EE
l54EE:
	v49 = Mem0[sp + 44:word16]
	v49 = sp
	Mem0[sp + 44:word16] = v49
	v50 = Mem0[sp:byte]
	v50 = r7
	Mem0[sp:byte] = v50
	// succ:  l54F6
l54F6:
	r9 = 0x01
	// succ:  l54F8
l54F8:
	v51 = Mem0[sp + 40:byte]
	v51 = 0x00
	Mem0[sp + 40:byte] = v51
	// succ:  l54FC
l54FC:
	r11 = r9
	v52 = Mem0[sp + 53:byte]
	r10 = v52
	r10 = r10 - r9
	VNZC = cond(r10)
	branch Test(SG,N) l55FA
	// succ:  l5506 l55FA
l5506:
	v54 = Mem0[sp + 40:byte]
	r14 = v54
	VNZC = cond(r14 - 0x00)
	branch Test(EQ,Z) l55EE
	// succ:  l550E l55EE
l550E:
	r11 = r11 + 0x01
	VNZC = cond(r11)
	// succ:  l5510
l5510:
	r11 = r11 + r10
	VNZC = cond(r11)
	v55 = Mem0[sp + 46:byte]
	r8 = v55
	r8 = r8 & 0x0030
	V = false
	NZC = cond(r8)
	branch Test(NE,Z) l5542
	// succ:  l551C l5542
l551C:
	v56 = Mem0[sp + 47:byte]
	r13 = v56
	v57 = SLICE(r13, byte, 0)
	r13 = (int16) v57
	V = false
	NZC = cond(r13)
	r15 = r11
	v58 = SLICE(r15, byte, 0)
	r15 = (int16) v58
	V = false
	NZC = cond(r15)
	r13 = r13 - r15
	VNZC = cond(r13)
	VNZC = cond(r13 - 0x0001)
	branch Test(LT,VN) l5542
	// succ:  l552C l5542
l552C:
	r14 = r13
	r15 = 0x0020
	call __write_pad (retsize: 2;)
	VNZC = cond(r15 - 0x0000)
	branch Test(GE,VN) l553E
	// succ:  l553A l553E
l553A:
	pc = 0x5924
	// succ:  l553E
l553E:
	v89 = Mem0[sp + 40:byte]
	r14 = v89
	// succ:  l5542
l5542:
	VNZC = cond(r14 - 0x00)
	branch Test(NE,Z) l55E4
	// succ:  l5546 l55E4
l5546:
	v90 = Mem0[sp + 46:byte]
	v91 = v90 & 0x0040
	NZ = cond(v91)
	C = Test(NE,v91)
	V = false
	branch Test(EQ,Z) l5576
	// succ:  l554E l5576
l554E:
	v92 = Mem0[sp + 42:word16]
	r15 = v92
	r15 = r15 & 0xFF00
	V = false
	NZC = cond(r15)
	r15 = r15 | 0x0030
	v93 = Mem0[sp + 42:word16]
	v93 = r15
	Mem0[sp + 42:word16] = v93
	v94 = Mem0[sp + 43:byte]
	v94 = r7
	Mem0[sp + 43:byte] = v94
	r14 = 0x0002
	r15 = sp
	r15 = r15 + 0x002A
	VNZC = cond(r15)
	// succ:  l556A
l556A:
	call PRINT (retsize: 2;)
	VNZC = cond(r15 - 0x0000)
	branch Test(GE,VN) l5576
	// succ:  l5572 l5576
l5572:
	pc = 0x5924
	// succ:  l5576
l5576:
	VNZC = cond(r8 - 0x0020)
	branch Test(EQ,Z) l55C4
	// succ:  l557C l55C4
l557C:
	r14 = r10
	r15 = 0x0030
	call __write_pad (retsize: 2;)
	VNZC = cond(r15 - 0x0000)
	branch Test(LT,VN) l5924
	// succ:  l558A l5924
l558A:
	r15 = r9
	v112 = SLICE(r15, byte, 0)
	r15 = (int16) v112
	V = false
	NZC = cond(r15)
	r14 = r15
	v113 = Mem0[sp + 44:word16]
	r15 = v113
	call PRINT (retsize: 2;)
	VNZC = cond(r15 - 0x0000)
	branch Test(LT,VN) l5924
	// succ:  l559C l5924
l559C:
	v114 = Mem0[sp + 46:byte]
	v115 = v114 & 0x0010
	NZ = cond(v115)
	C = Test(NE,v115)
	V = false
	branch Test(EQ,Z) l53A6
	// succ:  l55A4 l53A6
l55A4:
	v116 = Mem0[sp + 47:byte]
	r13 = v116
	v117 = SLICE(r13, byte, 0)
	r13 = (int16) v117
	V = false
	NZC = cond(r13)
	r15 = r11
	v118 = SLICE(r15, byte, 0)
	r15 = (int16) v118
	V = false
	NZC = cond(r15)
	r13 = r13 - r15
	VNZC = cond(r13)
	VNZC = cond(r13 - 0x0001)
	branch Test(LT,VN) l53A6
	// succ:  l55B4 l53A6
l55B4:
	r14 = r13
	r15 = 0x0020
	call __write_pad (retsize: 2;)
	VNZC = cond(r15 - 0x0000)
	branch Test(GE,VN) l53A6
	// succ:  l55C2 l53A6
l55C2:
	goto l5924
	// succ:  l5924
l55C4:
	v133 = Mem0[sp + 47:byte]
	r13 = v133
	v134 = SLICE(r13, byte, 0)
	r13 = (int16) v134
	V = false
	NZC = cond(r13)
	r15 = r11
	v135 = SLICE(r15, byte, 0)
	r15 = (int16) v135
	V = false
	NZC = cond(r15)
	r13 = r13 - r15
	VNZC = cond(r13)
	VNZC = cond(r13 - 0x0001)
	branch Test(LT,VN) l557C
	// succ:  l55D4 l557C
l55D4:
	r14 = r13
	r15 = 0x0030
	call __write_pad (retsize: 2;)
	VNZC = cond(r15 - 0x0000)
	branch Test(GE,VN) l557C
	// succ:  l55E2 l557C
l55E2:
	goto l5924
	// succ:  l5924
l55E4:
	r14 = 0x0001
	r15 = sp
	r15 = r15 + 0x0028
	VNZC = cond(r15)
	goto l556A
	// succ:  l556A
l55EE:
	v136 = Mem0[sp + 46:byte]
	v137 = v136 & 0x0040
	NZ = cond(v137)
	C = Test(NE,v137)
	V = false
	branch Test(EQ,Z) l5510
	// succ:  l55F6 l5510
l55F6:
	r11 = r11 + 0x02
	VNZC = cond(r11)
	goto l5510
	// succ:  l5510
l55FA:
	r10 = 0x00
	goto l5506
	// succ:  l5506
l55FE:
	v142 = Mem0[sp + 52:byte]
	v142 = 0x0010
	Mem0[sp + 52:byte] = v142
	v143 = Mem0[sp + 46:byte]
	v144 = v143 & 0x08
	NZ = cond(v144)
	C = Test(NE,v144)
	V = false
	branch Test(EQ,Z) l561C
	// succ:  l560A l561C
l560A:
	v145 = Mem0[sp + 48:word16]
	VNZC = cond(v145 - 0x0000)
	branch Test(NE,Z) l5616
	// succ:  l5610 l5616
l5610:
	v146 = Mem0[sp + 50:word16]
	VNZC = cond(v146 - 0x0000)
	branch Test(EQ,Z) l561C
	// succ:  l5616 l561C
l5616:
	v147 = Mem0[sp + 46:byte]
	v147 = v147 | 0x0040
	Mem0[sp + 46:byte] = v147
	// succ:  l561C
l561C:
	v149 = Mem0[sp + 40:byte]
	v149 = 0x00
	Mem0[sp + 40:byte] = v149
	// succ:  l5620
l5620:
	v59 = Mem0[sp + 53:byte]
	v59 = r11
	Mem0[sp + 53:byte] = v59
	VNZC = cond(r11 - 0x00)
	branch Test(LT,VN) l562E
	// succ:  l5628 l562E
l5628:
	v60 = Mem0[sp + 46:byte]
	v60 = v60 & 0xFFDF
	Mem0[sp + 46:byte] = v60
	V = false
	NZC = cond(v60)
	// succ:  l562E
l562E:
	r15 = sp
	r15 = r15 + 0x0028
	VNZC = cond(r15)
	v75 = Mem0[sp + 44:word16]
	v75 = r15
	Mem0[sp + 44:word16] = v75
	v76 = Mem0[sp + 48:word16]
	VNZC = cond(v76 - 0x0000)
	branch Test(NE,Z) l564A
	// succ:  l563E l564A
l563E:
	v77 = Mem0[sp + 50:word16]
	VNZC = cond(v77 - 0x0000)
	branch Test(NE,Z) l564A
	// succ:  l5644 l564A
l5644:
	v78 = Mem0[sp + 53:byte]
	VNZC = cond(v78 - 0x00)
	branch Test(EQ,Z) l56C6
	// succ:  l564A l56C6
l564A:
	v79 = Mem0[sp + 52:byte]
	v80 = Mem0[sp + 56:byte]
	v80 = v79
	Mem0[sp + 56:byte] = v80
	v81 = Mem0[sp + 57:byte]
	v81 = 0x00
	Mem0[sp + 57:byte] = v81
	v82 = Mem0[sp + 58:word16]
	v82 = 0x0000
	Mem0[sp + 58:word16] = v82
	// succ:  l5658
l5658:
	v83 = Mem0[sp + 54:byte]
	v83 = 0x00
	Mem0[sp + 54:byte] = v83
	v84 = Mem0[sp + 48:word16]
	r14 = v84
	v85 = Mem0[sp + 50:word16]
	r15 = v85
	v86 = Mem0[sp + 56:word16]
	r14 = r14 - v86
	VNZC = cond(r14)
	v87 = Mem0[sp + 58:word16]
	r15 = r15 - v87 - C
	VNZC = cond(r15)
	branch Test(UGE,C) l5672
	// succ:  l566E l5672
l566E:
	v88 = Mem0[sp + 54:byte]
	v88 = 0x01
	Mem0[sp + 54:byte] = v88
	// succ:  l5672
l5672:
	v95 = Mem0[sp + 48:word16]
	r12 = v95
	v97 = Mem0[sp + 50:word16]
	r13 = v97
	v98 = Mem0[sp + 56:word16]
	r10 = v98
	v99 = Mem0[sp + 58:word16]
	r11 = v99
	call fn00005B4E (retsize: 2;)
	r4 = r14
	VNZC = cond(r14 - 0x000A)
	branch Test(ULT,C) l56EE
	// succ:  l568E l56EE
l568E:
	r4 = r4 + 0x0030
	VNZC = cond(r4)
	// succ:  l5692
l5692:
	v100 = Mem0[sp + 44:word16]
	v100 = v100 + 0xFFFF
	Mem0[sp + 44:word16] = v100
	VNZC = cond(v100)
	v101 = Mem0[sp + 44:word16]
	r15 = v101
	v102 = Mem0[r15:byte]
	v102 = r4
	Mem0[r15:byte] = v102
	v103 = Mem0[sp + 48:word16]
	r12 = v103
	v104 = Mem0[sp + 50:word16]
	r13 = v104
	v105 = Mem0[sp + 56:word16]
	r10 = v105
	v106 = Mem0[sp + 58:word16]
	r11 = v106
	call fn00005B4E (retsize: 2;)
	v107 = Mem0[sp + 48:word16]
	v107 = r12
	Mem0[sp + 48:word16] = v107
	v108 = Mem0[sp + 50:word16]
	v108 = r13
	Mem0[sp + 50:word16] = v108
	v109 = Mem0[sp + 54:byte]
	VNZC = cond(v109 - 0x00)
	branch Test(NE,Z) l5658
	// succ:  l56C0 l5658
l56C0:
	v110 = Mem0[sp + 52:byte]
	VNZC = cond(v110 - 0x08)
	branch Test(EQ,Z) l56D2
	// succ:  l56C6 l56D2
l56C6:
	r9 = sp
	v111 = Mem0[sp + 44:byte]
	r9 = r9 - v111
	VNZC = cond(r9)
	r9 = r9 + 0x0028
	VNZC = cond(r9)
	goto l54FC
	// succ:  l54FC
l56D2:
	v119 = Mem0[sp + 46:byte]
	v120 = v119 & 0x08
	NZ = cond(v120)
	C = Test(NE,v120)
	V = false
	branch Test(EQ,Z) l56C6
	// succ:  l56D8 l56C6
l56D8:
	VNZC = cond(r4 - 0x0030)
	branch Test(EQ,Z) l56C6
	// succ:  l56DE l56C6
l56DE:
	v121 = Mem0[sp + 44:word16]
	v121 = v121 + 0xFFFF
	Mem0[sp + 44:word16] = v121
	VNZC = cond(v121)
	v122 = Mem0[sp + 44:word16]
	r15 = v122
	v123 = Mem0[r15:byte]
	v123 = 0x0030
	Mem0[r15:byte] = v123
	goto l56C6
	// succ:  l56C6
l56EE:
	r4 = r4 + 0x0057
	VNZC = cond(r4)
	VNZC = cond(r7 - 0x0058)
	branch Test(NE,Z) l5692
	// succ:  l56F8 l5692
l56F8:
	r4 = r4 & 0xFFDF
	V = false
	NZC = cond(r4)
	goto l5692
	// succ:  l5692
l56FE:
	v148 = Mem0[sp + 52:byte]
	v148 = 0x000A
	Mem0[sp + 52:byte] = v148
	goto l561C
	// succ:  l561C
l5706:
	v151 = Mem0[sp + 46:byte]
	v151 = v151 | 0x01
	Mem0[sp + 46:byte] = v151
	goto l56FE
	// succ:  l56FE
l570C:
	r15 = r5
	r5 = r5 + 0x0002
	VNZC = cond(r5)
	v152 = Mem0[r15:word16]
	v153 = Mem0[sp + 44:word16]
	v153 = v152
	Mem0[sp + 44:word16] = v153
	v154 = Mem0[sp + 44:word16]
	VNZC = cond(v154 - 0x0000)
	branch Test(EQ,Z) l5756
	// succ:  l571A l5756
l571A:
	VNZC = cond(r11 - 0x00)
	branch Test(LT,VN) l5740
	// succ:  l571E l5740
l571E:
	r15 = r11
	v155 = SLICE(r15, byte, 0)
	r15 = (int16) v155
	V = false
	NZC = cond(r15)
	r13 = r15
	r14 = 0x0000
	v156 = Mem0[sp + 44:word16]
	r15 = v156
	call memchr (retsize: 2;)
	VNZC = cond(r15 - 0x0000)
	branch Test(EQ,Z) l573C
	// succ:  l5732 l573C
l5732:
	r9 = r15
	v157 = Mem0[sp + 44:byte]
	r9 = r9 - v157
	VNZC = cond(r9)
	VNZC = cond(r11 - r9)
	branch Test(GE,VN) l54F8
	// succ:  l573C l54F8
l573C:
	r9 = r11
	goto l54F8
	// succ:  l54F8
l5740:
	v169 = Mem0[sp + 44:word16]
	r15 = v169
	r15 = r15 - 0x0001
	VNZC = cond(r15)
	// succ:  l5746
l5746:
	r15 = r15 + 0x0001
	VNZC = cond(r15)
	v170 = Mem0[r15:byte]
	VNZC = cond(v170 - 0x00)
	branch Test(NE,Z) l5746
	// succ:  l574E l5746
l574E:
	r9 = r15
	v171 = Mem0[sp + 44:byte]
	r9 = r9 - v171
	VNZC = cond(r9)
	goto l54F8
	// succ:  l54F8
l5756:
	v174 = Mem0[sp + 44:word16]
	v174 = sp
	Mem0[sp + 44:word16] = v174
	v175 = Mem0[sp:byte]
	v175 = 0x0028
	Mem0[sp:byte] = v175
	v176 = Mem0[sp + 1:byte]
	v176 = 0x006E
	Mem0[sp + 1:byte] = v176
	v177 = Mem0[sp + 2:byte]
	v177 = 0x0075
	Mem0[sp + 2:byte] = v177
	v178 = Mem0[sp + 3:byte]
	v178 = 0x006C
	Mem0[sp + 3:byte] = v178
	v179 = Mem0[sp + 4:byte]
	v179 = 0x006C
	Mem0[sp + 4:byte] = v179
	v180 = Mem0[sp + 5:byte]
	v180 = 0x0029
	Mem0[sp + 5:byte] = v180
	v181 = Mem0[sp + 6:byte]
	v181 = 0x00
	Mem0[sp + 6:byte] = v181
	goto l571A
	// succ:  l571A
l5784:
	r15 = r5
	r5 = r5 + 0x0002
	VNZC = cond(r5)
	v164 = Mem0[r15:word16]
	v165 = Mem0[sp + 48:word16]
	v165 = v164
	Mem0[sp + 48:word16] = v165
	v166 = Mem0[sp + 50:word16]
	v166 = 0x0000
	Mem0[sp + 50:word16] = v166
	v167 = Mem0[sp + 52:byte]
	v167 = 0x0010
	Mem0[sp + 52:byte] = v167
	v168 = Mem0[sp + 46:byte]
	v168 = v168 | 0x0040
	Mem0[sp + 46:byte] = v168
	r7 = 0x0078
	goto l561C
	// succ:  l561C
l57A2:
	v182 = Mem0[sp + 52:byte]
	v182 = 0x08
	Mem0[sp + 52:byte] = v182
	goto l561C
	// succ:  l561C
l57A8:
	v183 = Mem0[sp + 46:byte]
	v183 = v183 | 0x01
	Mem0[sp + 46:byte] = v183
	goto l57A2
	// succ:  l57A2
l57AE:
	v40 = Mem0[sp + 46:byte]
	v41 = v40 & 0x01
	NZ = cond(v41)
	C = Test(NE,v41)
	V = false
	branch Test(EQ,Z) l57E6
	// succ:  l57B4 l57E6
l57B4:
	r15 = r5
	r5 = r5 + 0x0004
	VNZC = cond(r5)
	v42 = Mem0[r15:word16]
	r15 = r15 + 2
	v43 = Mem0[sp + 48:word16]
	v43 = v42
	Mem0[sp + 48:word16] = v43
	v44 = Mem0[r15:word16]
	r15 = r15 + 2
	v45 = Mem0[sp + 50:word16]
	v45 = v44
	Mem0[sp + 50:word16] = v45
	// succ:  l57C0
l57C0:
	v46 = Mem0[sp + 50:word16]
	VNZC = cond(v46 - 0x0000)
	branch Test(LT,VN) l57CE
	// succ:  l57C6 l57CE
l57C6:
	v48 = Mem0[sp + 52:byte]
	v48 = 0x000A
	Mem0[sp + 52:byte] = v48
	goto l5620
	// succ:  l5620
l57CE:
	v61 = Mem0[sp + 48:word16]
	v61 = v61 ^ 0xFFFF
	Mem0[sp + 48:word16] = v61
	VNZC = cond(v61)
	v62 = Mem0[sp + 50:word16]
	v62 = v62 ^ 0xFFFF
	Mem0[sp + 50:word16] = v62
	VNZC = cond(v62)
	v63 = Mem0[sp + 48:word16]
	v63 = v63 + 0x0001
	Mem0[sp + 48:word16] = v63
	VNZC = cond(v63)
	v64 = Mem0[sp + 50:word16]
	v64 = v64 + 0x0000 + C
	Mem0[sp + 50:word16] = v64
	VNZC = cond(v64)
	v65 = Mem0[sp + 40:byte]
	v65 = 0x002D
	Mem0[sp + 40:byte] = v65
	goto l57C6
	// succ:  l57C6
l57E6:
	r15 = r5
	r5 = r5 + 0x0002
	VNZC = cond(r5)
	v66 = Mem0[r15:word16]
	v67 = Mem0[sp + 48:word16]
	v67 = v66
	Mem0[sp + 48:word16] = v67
	v68 = Mem0[sp + 48:word16]
	v69 = Mem0[sp + 50:word16]
	v69 = v68
	Mem0[sp + 50:word16] = v69
	v70 = Mem0[sp + 50:word16]
	v71 = Mem0[sp + 50:word16]
	v71 = v71 + v70
	Mem0[sp + 50:word16] = v71
	VNZC = cond(v71)
	v72 = Mem0[sp + 50:word16]
	v73 = Mem0[sp + 50:word16]
	v73 = v73 - v72 - C
	Mem0[sp + 50:word16] = v73
	VNZC = cond(v73)
	v74 = Mem0[sp + 50:word16]
	v74 = v74 ^ 0xFFFF
	Mem0[sp + 50:word16] = v74
	VNZC = cond(v74)
	goto l57C0
	// succ:  l57C0
l5806:
	v184 = Mem0[sp + 46:byte]
	v184 = v184 | 0x01
	Mem0[sp + 46:byte] = v184
	goto l57AE
	// succ:  l57AE
l580C:
	v37 = Mem0[sp + 44:word16]
	v37 = sp
	Mem0[sp + 44:word16] = v37
	r15 = r5
	r5 = r5 + 0x0002
	VNZC = cond(r5)
	v38 = Mem0[r15:byte]
	v39 = Mem0[sp:byte]
	v39 = v38
	Mem0[sp:byte] = v39
	goto l54F6
	// succ:  l54F6
l581A:
	v33 = Mem0[sp + 46:byte]
	v33 = v33 | 0x04
	Mem0[sp + 46:byte] = v33
	pc = 0x53E8
	v34 = Mem0[sp + 46:byte]
	v35 = v34 & 0x0010
	NZ = cond(v35)
	C = Test(NE,v35)
	V = false
	branch Test(EQ,Z) l582E
	// succ:  l582A l582E
l582A:
	pc = 0x53E8
	// succ:  l582E
l582E:
	v138 = Mem0[sp + 46:byte]
	v138 = v138 | 0x0020
	Mem0[sp + 46:byte] = v138
	pc = 0x53E8
	v139 = Mem0[r6:byte]
	r7 = v139
	r6 = r6 + 0x0001
	VNZC = cond(r6)
	VNZC = cond(r7 - 0x002A)
	branch Test(EQ,Z) l588A
	// succ:  l5842 l588A
l5842:
	r13 = 0x0000
	r15 = r7
	r15 = r15 + 0xFFD0
	VNZC = cond(r15)
	VNZC = cond(r15 - 0x000A)
	branch Test(ULT,C) l587C
	// succ:  l5850 l587C
l5850:
	r15 = r13
	r15 = r15 + r15
	VNZC = cond(r15)
	r15 = r15 + r15
	VNZC = cond(r15)
	r14 = r13
	r14 = r14 + r14
	VNZC = cond(r14)
	r13 = r15
	r13 = r13 + r14
	VNZC = cond(r13)
	r13 = r13 + r14
	VNZC = cond(r13)
	r13 = r13 + r14
	VNZC = cond(r13)
	r15 = r7
	v140 = SLICE(r15, byte, 0)
	r15 = (int16) v140
	V = false
	NZC = cond(r15)
	r13 = r13 + r15
	VNZC = cond(r13)
	r13 = r13 + 0xFFD0
	VNZC = cond(r13)
	v141 = Mem0[r6:byte]
	r7 = v141
	r6 = r6 + 0x0001
	VNZC = cond(r6)
	r15 = r7
	r15 = r15 + 0xFFD0
	VNZC = cond(r15)
	VNZC = cond(r15 - 0x000A)
	branch Test(UGE,C) l5850
	// succ:  l587C l5850
l587C:
	r15 = r13
	VNZC = cond(r13 - 0xFFFF)
	branch Test(GE,VN) l5884
	// succ:  l5882 l5884
l5882:
	r15 = 0xFFFF
	// succ:  l5884
l5884:
	r11 = r15
	pc = 0x53EC
	// succ:  l588A
l588A:
	r15 = r5
	r5 = r5 + 0x0002
	VNZC = cond(r5)
	v150 = Mem0[r15:word16]
	r13 = v150
	r15 = r13
	VNZC = cond(r13 - 0xFFFF)
	branch Test(GE,VN) l5898
	// succ:  l5896 l5898
l5896:
	r15 = 0xFFFF
	// succ:  l5898
l5898:
	r11 = r15
	pc = 0x53E8
	v158 = Mem0[sp + 40:byte]
	v158 = 0x002B
	Mem0[sp + 40:byte] = v158
	pc = 0x53E8
	// succ:  l58A8
l58A8:
	v159 = Mem0[sp + 46:byte]
	v159 = v159 | 0x0010
	Mem0[sp + 46:byte] = v159
	v160 = Mem0[sp + 46:byte]
	v160 = v160 & 0xFFDF
	Mem0[sp + 46:byte] = v160
	V = false
	NZC = cond(v160)
	pc = 0x53E8
	r15 = r5
	r5 = r5 + 0x0002
	VNZC = cond(r5)
	v161 = Mem0[r15:byte]
	v162 = Mem0[sp + 47:byte]
	v162 = v161
	Mem0[sp + 47:byte] = v162
	v163 = Mem0[sp + 47:byte]
	VNZC = cond(v163 - 0x00)
	branch Test(LT,VN) l58CA
	// succ:  l58C6 l58CA
l58C6:
	pc = 0x53E8
	// succ:  l58CA
l58CA:
	v172 = Mem0[sp + 47:byte]
	v172 = v172 ^ 0xFF
	Mem0[sp + 47:byte] = v172
	VNZC = cond(v172)
	v173 = Mem0[sp + 47:byte]
	v173 = v173 + 0x01
	Mem0[sp + 47:byte] = v173
	VNZC = cond(v173)
	goto l58A8
	// succ:  l58A8
l5924:
	r15 = 0x021A
	sp = sp + 0x003C
	VNZC = cond(sp)
	v124 = Mem0[sp:word16]
	sp = sp + 2
	r4 = v124
	v125 = Mem0[sp:word16]
	sp = sp + 2
	r5 = v125
	v126 = Mem0[sp:word16]
	sp = sp + 2
	r6 = v126
	v127 = Mem0[sp:word16]
	sp = sp + 2
	r7 = v127
	v128 = Mem0[sp:word16]
	sp = sp + 2
	r8 = v128
	v129 = Mem0[sp:word16]
	sp = sp + 2
	r9 = v129
	v130 = Mem0[sp:word16]
	sp = sp + 2
	r10 = v130
	v131 = Mem0[sp:word16]
	sp = sp + 2
	r11 = v131
	v132 = Mem0[sp:word16]
	sp = sp + 2
	return
	// succ:  vuprintf_exit
vuprintf_exit:


// memchr
// Return size: 2
define memchr
memchr_entry:
	// succ:  l0000593E
l0000593E:
	sp = fp
	sp = sp - 2
	Mem0[sp:word16] = r11
	r11 = r15
	r12 = r14
	VNZC = cond(r13 - 0x0000)
	branch Test(EQ,Z) l00005956
	// succ:  l00005948 l00005956
l00005948:
	r14 = r11
	// succ:  l0000594A
l0000594A:
	v10 = Mem0[r14:byte]
	r15 = v10
	r14 = r14 + 0x0001
	VNZC = cond(r14)
	VNZC = cond(r15 - r12)
	branch Test(EQ,Z) l0000595A
	// succ:  l00005952 l0000595A
l00005952:
	r13 = r13 + 0xFFFF
	VNZC = cond(r13)
	branch Test(NE,Z) l0000594A
	// succ:  l00005956 l0000594A
l00005956:
	r15 = 0x0000
	goto l0000595E
	// succ:  l0000595E
l0000595A:
	r15 = r14
	r15 = r15 + 0xFFFF
	VNZC = cond(r15)
	// succ:  l0000595E
l0000595E:
	v11 = Mem0[sp:word16]
	sp = sp + 2
	r11 = v11
	v12 = Mem0[sp:word16]
	sp = sp + 2
	return
	// succ:  memchr_exit
memchr_exit:


// strncpy
// Return size: 2
define strncpy
strncpy_entry:
	// succ:  l5962
l5962:
	sp = fp
	sp = sp - 2
	Mem0[sp:word16] = r11
	r11 = r15
	VNZC = cond(r13 - 0x0000)
	branch Test(EQ,Z) l598E
	// succ:  l596A l598E
l596A:
	r12 = r15
	// succ:  l596C
l596C:
	v10 = Mem0[r14:byte]
	v11 = Mem0[r12:byte]
	v11 = v10
	Mem0[r12:byte] = v11
	v12 = Mem0[r12:byte]
	r15 = v12
	r14 = r14 + 0x0001
	VNZC = cond(r14)
	r12 = r12 + 0x0001
	VNZC = cond(r12)
	VNZC = cond(r15 - 0x00)
	branch Test(EQ,Z) l5980
	// succ:  l597A l5980
l597A:
	r13 = r13 + 0xFFFF
	VNZC = cond(r13)
	branch Test(NE,Z) l596C
	// succ:  l597E l596C
l597E:
	goto l598E
	// succ:  l598E
l5980:
	r13 = r13 + 0xFFFF
	VNZC = cond(r13)
	branch Test(EQ,Z) l598E
	// succ:  l5984 l598E
l5984:
	v15 = Mem0[r12:byte]
	v15 = 0x00
	Mem0[r12:byte] = v15
	r12 = r12 + 0x0001
	VNZC = cond(r12)
	r13 = r13 + 0xFFFF
	VNZC = cond(r13)
	branch Test(NE,Z) l5984
	// succ:  l598E l5984
l598E:
	r15 = r11
	v13 = Mem0[sp:word16]
	sp = sp + 2
	r11 = v13
	v14 = Mem0[sp:word16]
	sp = sp + 2
	return
	// succ:  strncpy_exit
strncpy_exit:


// memcpy
// Return size: 2
define memcpy
memcpy_entry:
	// succ:  l00005994
l00005994:
	sp = fp
	sp = sp - 2
	Mem0[sp:word16] = r11
	sp = sp - 2
	Mem0[sp:word16] = r10
	r10 = r15
	r11 = r13
	r13 = r15
	r12 = r14
	VNZC = cond(r11 - 0x0000)
	branch Test(EQ,Z) l00005A60
	// succ:  l000059A4 l00005A60
l000059A4:
	VNZC = cond(r15 - r14)
	branch Test(EQ,Z) l00005A60
	// succ:  l000059A8 l00005A60
l000059A8:
	VNZC = cond(r15 - r14)
	branch Test(ULT,C) l00005A02
	// succ:  l000059AC l00005A02
l000059AC:
	r15 = r14
	r15 = r15 | r10
	r15 = r15 & 0x0001
	V = false
	NZC = cond(r15)
	branch Test(EQ,Z) l000059D0
	// succ:  l000059B4 l000059D0
l000059B4:
	r15 = r14
	r15 = r15 ^ r10
	VNZC = cond(r15)
	r15 = r15 & 0x0001
	V = false
	NZC = cond(r15)
	branch Test(NE,Z) l000059C0
	// succ:  l000059BC l000059C0
l000059BC:
	VNZC = cond(r11 - 0x0002)
	branch Test(ULT,C) l000059F8
	// succ:  l000059C0 l000059F8
l000059C0:
	r14 = r11
	// succ:  l000059C2
l000059C2:
	r11 = r11 - r14
	VNZC = cond(r11)
	// succ:  l000059C4
l000059C4:
	v14 = Mem0[r12:byte]
	v15 = Mem0[r13:byte]
	v15 = v14
	Mem0[r13:byte] = v15
	r12 = r12 + 0x0001
	VNZC = cond(r12)
	r13 = r13 + 0x0001
	VNZC = cond(r13)
	r14 = r14 + 0xFFFF
	VNZC = cond(r14)
	branch Test(NE,Z) l000059C4
	// succ:  l000059D0 l000059C4
l000059D0:
	r14 = r11
	sr = sr & ~0x0001
	r14 = __rcr(r14, 0x01, C)
	V = false
	NZC = cond(r14)
	VNZC = cond(r14 - 0x0000)
	branch Test(EQ,Z) l000059E4
	// succ:  l000059DA l000059E4
l000059DA:
	v17 = Mem0[r12:word16]
	r12 = r12 + 2
	v18 = Mem0[r13:word16]
	v18 = v17
	Mem0[r13:word16] = v18
	r13 = r13 + 0x0002
	VNZC = cond(r13)
	r14 = r14 + 0xFFFF
	VNZC = cond(r14)
	branch Test(NE,Z) l000059DA
	// succ:  l000059E4 l000059DA
l000059E4:
	r14 = r11
	r14 = r14 & 0x0001
	V = false
	NZC = cond(r14)
	branch Test(EQ,Z) l00005A60
	// succ:  l000059EA l00005A60
l000059EA:
	v19 = Mem0[r12:byte]
	v20 = Mem0[r13:byte]
	v20 = v19
	Mem0[r13:byte] = v20
	r12 = r12 + 0x0001
	VNZC = cond(r12)
	r13 = r13 + 0x0001
	VNZC = cond(r13)
	r14 = r14 + 0xFFFF
	VNZC = cond(r14)
	branch Test(NE,Z) l000059EA
	// succ:  l000059F6 l000059EA
l000059F6:
	goto l00005A60
	// succ:  l00005A60
l000059F8:
	r15 = r14
	r15 = r15 & 0x0001
	V = false
	NZC = cond(r15)
	r14 = 0x0002
	r14 = r14 - r15
	VNZC = cond(r14)
	goto l000059C2
	// succ:  l000059C2
l00005A02:
	r12 = r14
	r12 = r12 + r11
	VNZC = cond(r12)
	r13 = r15
	r13 = r13 + r11
	VNZC = cond(r13)
	r15 = r12
	r15 = r15 | r13
	r15 = r15 & 0x0001
	V = false
	NZC = cond(r15)
	branch Test(EQ,Z) l00005A30
	// succ:  l00005A12 l00005A30
l00005A12:
	r15 = r12
	r15 = r15 ^ r13
	VNZC = cond(r15)
	r15 = r15 & 0x0001
	V = false
	NZC = cond(r15)
	branch Test(NE,Z) l00005A20
	// succ:  l00005A1A l00005A20
l00005A1A:
	VNZC = cond(r11 - 0x0003)
	branch Test(ULT,C) l00005A5A
	// succ:  l00005A20 l00005A5A
l00005A20:
	r14 = r11
	// succ:  l00005A22
l00005A22:
	r11 = r11 - r14
	VNZC = cond(r11)
	// succ:  l00005A24
l00005A24:
	r13 = r13 + 0xFFFF
	VNZC = cond(r13)
	r12 = r12 + 0xFFFF
	VNZC = cond(r12)
	v24 = Mem0[r12:byte]
	v25 = Mem0[r13:byte]
	v25 = v24
	Mem0[r13:byte] = v25
	r14 = r14 + 0xFFFF
	VNZC = cond(r14)
	branch Test(NE,Z) l00005A24
	// succ:  l00005A30 l00005A24
l00005A30:
	r14 = r11
	sr = sr & ~0x0001
	r14 = __rcr(r14, 0x01, C)
	V = false
	NZC = cond(r14)
	VNZC = cond(r14 - 0x0000)
	branch Test(EQ,Z) l00005A46
	// succ:  l00005A3A l00005A46
l00005A3A:
	r12 = r12 - 0x0002
	VNZC = cond(r12)
	r13 = r13 - 0x0002
	VNZC = cond(r13)
	v26 = Mem0[r12:word16]
	v27 = Mem0[r13:word16]
	v27 = v26
	Mem0[r13:word16] = v27
	r14 = r14 + 0xFFFF
	VNZC = cond(r14)
	branch Test(NE,Z) l00005A3A
	// succ:  l00005A46 l00005A3A
l00005A46:
	r14 = r11
	r14 = r14 & 0x0001
	V = false
	NZC = cond(r14)
	branch Test(EQ,Z) l00005A60
	// succ:  l00005A4C l00005A60
l00005A4C:
	r13 = r13 + 0xFFFF
	VNZC = cond(r13)
	r12 = r12 + 0xFFFF
	VNZC = cond(r12)
	v28 = Mem0[r12:byte]
	v29 = Mem0[r13:byte]
	v29 = v28
	Mem0[r13:byte] = v29
	r14 = r14 + 0xFFFF
	VNZC = cond(r14)
	branch Test(NE,Z) l00005A4C
	// succ:  l00005A58 l00005A4C
l00005A58:
	goto l00005A60
	// succ:  l00005A60
l00005A5A:
	r14 = r12
	r14 = r14 & 0x0001
	V = false
	NZC = cond(r14)
	goto l00005A22
	// succ:  l00005A22
l00005A60:
	r15 = r10
	v21 = Mem0[sp:word16]
	sp = sp + 2
	r10 = v21
	v22 = Mem0[sp:word16]
	sp = sp + 2
	r11 = v22
	v23 = Mem0[sp:word16]
	sp = sp + 2
	return
	// succ:  memcpy_exit
memcpy_exit:


// memset
// Return size: 2
define memset
memset_entry:
	// succ:  l5A68
l5A68:
	sp = fp
	sp = sp - 2
	Mem0[sp:word16] = r11
	sp = sp - 2
	Mem0[sp:word16] = r10
	sp = sp - 2
	Mem0[sp:word16] = r9
	r9 = r15
	r10 = r14
	r14 = r15
	VNZC = cond(r13 - 0x0006)
	branch Test(ULT,C) l5A8A
	// succ:  l5A7A l5A8A
l5A7A:
	VNZC = cond(r13 - 0x0000)
	branch Test(EQ,Z) l5ACE
	// succ:  l5A7E l5ACE
l5A7E:
	v12 = Mem0[r14:byte]
	v12 = r10
	Mem0[r14:byte] = v12
	r14 = r14 + 0x0001
	VNZC = cond(r14)
	r13 = r13 + 0xFFFF
	VNZC = cond(r13)
	branch Test(NE,Z) l5A7E
	// succ:  l5A88 l5A7E
l5A88:
	goto l5ACE
	// succ:  l5ACE
l5A8A:
	r11 = r10
	VNZC = cond(r11 - 0x0000)
	branch Test(EQ,Z) l5A96
	// succ:  l5A90 l5A96
l5A90:
	r15 = r11
	r15 = __swpb(r15)
	r11 = r11 | r15
	// succ:  l5A96
l5A96:
	r12 = r9
	r12 = r12 & 0x0001
	V = false
	NZC = cond(r12)
	branch Test(EQ,Z) l5AAE
	// succ:  l5A9C l5AAE
l5A9C:
	r15 = 0x0002
	r15 = r15 - r12
	VNZC = cond(r15)
	r12 = r15
	r13 = r13 - r15
	VNZC = cond(r13)
	// succ:  l5AA4
l5AA4:
	v16 = Mem0[r14:byte]
	v16 = r10
	Mem0[r14:byte] = v16
	r14 = r14 + 0x0001
	VNZC = cond(r14)
	r12 = r12 + 0xFFFF
	VNZC = cond(r12)
	branch Test(NE,Z) l5AA4
	// succ:  l5AAE l5AA4
l5AAE:
	r12 = r13
	sr = sr & ~0x0001
	r12 = __rcr(r12, 0x01, C)
	V = false
	NZC = cond(r12)
	// succ:  l5AB4
l5AB4:
	v18 = Mem0[r14:word16]
	v18 = r11
	Mem0[r14:word16] = v18
	r14 = r14 + 0x0002
	VNZC = cond(r14)
	r12 = r12 + 0xFFFF
	VNZC = cond(r12)
	branch Test(NE,Z) l5AB4
	// succ:  l5ABE l5AB4
l5ABE:
	r12 = r13
	r12 = r12 & 0x0001
	V = false
	NZC = cond(r12)
	branch Test(EQ,Z) l5ACE
	// succ:  l5AC4 l5ACE
l5AC4:
	v19 = Mem0[r14:byte]
	v19 = r10
	Mem0[r14:byte] = v19
	r14 = r14 + 0x0001
	VNZC = cond(r14)
	r12 = r12 + 0xFFFF
	VNZC = cond(r12)
	branch Test(NE,Z) l5AC4
	// succ:  l5ACE l5AC4
l5ACE:
	r15 = r9
	v20 = Mem0[sp:word16]
	sp = sp + 2
	r9 = v20
	v21 = Mem0[sp:word16]
	sp = sp + 2
	r10 = v21
	v22 = Mem0[sp:word16]
	sp = sp + 2
	r11 = v22
	v23 = Mem0[sp:word16]
	sp = sp + 2
	return
	// succ:  memset_exit
memset_exit:


// fn00005ADC
// Return size: 2
define fn00005ADC
fn00005ADC_entry:
	// succ:  l00005ADC
l00005ADC:
	sp = fp
	Mem0[0x0130:ptr16] = r12
	Mem0[0x0138:ptr16] = r10
	Mem0[0x0134:ptr16] = r12
	r14 = 0x013A
	Mem0[0x013A:ptr16] = 0x013C
	Mem0[0x0138:ptr16] = r11
	Mem0[0x0134:ptr16] = r13
	Mem0[0x0138:ptr16] = r10
	r15 = 0x013A
	v9 = Mem0[sp:word16]
	sp = sp + 2
	return
	// succ:  fn00005ADC_exit
fn00005ADC_exit:


// fn00005B04
// Return size: 2
define fn00005B04
fn00005B04_entry:
	// succ:  l00005B04
l00005B04:
	sp = fp
	r8 = 0x0000
	v5 = r13 & 0x8000
	NZ = cond(v5)
	C = Test(NE,v5)
	V = false
	branch Test(EQ,Z) l00005B16
	// succ:  l00005B0C l00005B16
l00005B0C:
	r13 = r13 ^ 0xFFFF
	VNZC = cond(r13)
	r12 = r12 ^ 0xFFFF
	VNZC = cond(r12)
	r12 = r12 + 0x0001
	VNZC = cond(r12)
	r13 = r13 + 0x0000 + C
	VNZC = cond(r13)
	r8 = r8 | 0x0004
	// succ:  l00005B16
l00005B16:
	v13 = r11 & 0x8000
	NZ = cond(v13)
	C = Test(NE,v13)
	V = false
	branch Test(EQ,Z) l00005B26
	// succ:  l00005B1C l00005B26
l00005B1C:
	r11 = r11 ^ 0xFFFF
	VNZC = cond(r11)
	r10 = r10 ^ 0xFFFF
	VNZC = cond(r10)
	r10 = r10 + 0x0001
	VNZC = cond(r10)
	r11 = r11 + 0x0000 + C
	VNZC = cond(r11)
	r8 = r8 | 0x0008
	// succ:  l00005B26
l00005B26:
	call fn00005B4E (retsize: 2;)
	r8 = __rcr(r8, 0x01, C)
	V = false
	NZC = cond(r8)
	v16 = r8 & 0x0004
	NZ = cond(v16)
	C = Test(NE,v16)
	V = false
	branch Test(EQ,Z) l00005B40
	// succ:  l00005B30 l00005B40
l00005B30:
	r14 = r14 ^ 0xFFFF
	VNZC = cond(r14)
	r15 = r15 ^ 0xFFFF
	VNZC = cond(r15)
	r14 = r14 + 0x0001
	VNZC = cond(r14)
	r15 = r15 + 0x0000 + C
	VNZC = cond(r15)
	r12 = r12 ^ 0xFFFF
	VNZC = cond(r12)
	r13 = r13 ^ 0xFFFF
	VNZC = cond(r13)
	r12 = r12 + 0x0001
	VNZC = cond(r12)
	r13 = r13 + 0x0000 + C
	VNZC = cond(r13)
	// succ:  l00005B40
l00005B40:
	v19 = r8 & 0x0008
	NZ = cond(v19)
	C = Test(NE,v19)
	V = false
	branch Test(EQ,Z) l00005B4C
	// succ:  l00005B44 l00005B4C
l00005B44:
	r12 = r12 ^ 0xFFFF
	VNZC = cond(r12)
	r13 = r13 ^ 0xFFFF
	VNZC = cond(r13)
	r12 = r12 + 0x0001
	VNZC = cond(r12)
	r13 = r13 + 0x0000 + C
	VNZC = cond(r13)
	// succ:  l00005B4C
l00005B4C:
	v20 = Mem0[sp:word16]
	sp = sp + 2
	return
	// succ:  fn00005B04_exit
fn00005B04_exit:


// fn00005B4E
// Return size: 2
define fn00005B4E
fn00005B4E_entry:
	// succ:  l00005B4E
l00005B4E:
	sp = fp
	r15 = r15 ^ r15
	VNZC = cond(r15)
	r14 = r14 ^ r14
	VNZC = cond(r14)
	r9 = 0x0021
	goto l00005B6C
	// succ:  l00005B6C
l00005B58:
	r8 = __rcr(r8, 0x01, C)
	V = false
	NZC = cond(r8)
	r14 = r14 + r14 + C
	VNZC = cond(r14)
	r15 = r15 + r15 + C
	VNZC = cond(r15)
	VNZC = cond(r15 - r11)
	branch Test(UGE,C) l00005B6C
	// succ:  l00005B62 l00005B6C
l00005B62:
	branch Test(NE,Z) l00005B68
	// succ:  l00005B64 l00005B68
l00005B64:
	VNZC = cond(r14 - r10)
	branch Test(UGE,C) l00005B6C
	// succ:  l00005B68 l00005B6C
l00005B68:
	r14 = r14 - r10
	VNZC = cond(r14)
	r15 = r15 - r11 - C
	VNZC = cond(r15)
	// succ:  l00005B6C
l00005B6C:
	r12 = r12 + r12 + C
	VNZC = cond(r12)
	r13 = r13 + r13 + C
	VNZC = cond(r13)
	r8 = r8 + r8 + C
	VNZC = cond(r8)
	r9 = r9 - 0x0001
	VNZC = cond(r9)
	branch Test(NE,Z) l00005B58
	// succ:  l00005B76 l00005B58
l00005B76:
	v12 = Mem0[sp:word16]
	sp = sp + 2
	return
	// succ:  fn00005B4E_exit
fn00005B4E_exit:


