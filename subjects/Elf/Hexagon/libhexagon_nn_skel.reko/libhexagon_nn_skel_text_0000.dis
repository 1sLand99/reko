// hexagon_nn_skel_invoke
// Return size: 0
define hexagon_nn_skel_invoke
hexagon_nn_skel_invoke_entry:
	r29 = fp
	// succ:  l00009840
l00009840:
	v4 = r29 - 8<i32>
	Mem0[v4:word32] = r30
	Mem0[v4 + 4<i32>:word32] = r31
	r30 = v4
	r29 = v4 - 120<i32>
	Mem0[r29 - 16<i32>:word64] = r17_r16
	r2 = 0x0002B110<p32>
	Mem0[r29 + 80<i32>:word64] = r25_r24
	Mem0[r29 + 88<i32>:word64] = r23_r22
	r17_r16 = r0_r1
	Mem0[r29 + 96<i32>:word64] = r21_r20
	Mem0[r29 + 104<i32>:word64] = r19_r18
	r18 = 0x14<32>
	r3 = CONVERT(SLICE(r17, ui29, 5), ui29, uint32)
	Mem0[r29 + 72<i32>:word64] = r27_r26
	r20 = Mem0[r2 - 80<i32>:word32]
	r21 = Mem0[r2 - 96<i32>:word32]
	r19 = Mem0[r2 - 128<i32>:word32]
	p0 = r3 >u 0x14<32>
	r2 = Mem0[r2 - 112<i32>:word32]
	branch p0 l0000A644
	// succ:  l00009890 l0000A644
l00009890:
	r4 = 0x0000A668<p32>
	r3 = Mem0[r14 + r3 * 4<32>:word32]
	r3 = r3 + r4
	call r3 (retsize: 0;)
	return
	// succ:  hexagon_nn_skel_invoke_exit
l0000A644:
	r0 = r18
	r19_r18 = Mem0[r29 + 104<i32>:word64]
	r17_r16 = Mem0[r29 + 112<i32>:word64]
	r23_r22 = Mem0[r29 + 88<i32>:word64]
	r21_r20 = Mem0[r29 + 96<i32>:word64]
	r27_r26 = Mem0[r29 + 72<i32>:word64]
	r25_r24 = Mem0[r29 + 80<i32>:word64]
	v27 = r30
	r31 = Mem0[v27 + 4<i32>:word32]
	r30 = Mem0[v27:word32]
	r29 = v27 + 8<i32>
	return
	// succ:  hexagon_nn_skel_invoke_exit
hexagon_nn_skel_invoke_exit:


// allocate_graph_storage
// Return size: 0
define allocate_graph_storage
allocate_graph_storage_entry:
	r29 = fp
	// succ:  l0000A6C0
l0000A6C0:
	v4 = r29 - 8<i32>
	Mem0[v4:word32] = r30
	Mem0[v4 + 4<i32>:word32] = r31
	r30 = v4
	r29 = v4 - 32<i32>
	r3 = 0x60000000<32>
	r2 = 0x80<32>
	Mem0[r29 + 16<i32>:word64] = r19_r18
	Mem0[r29 + 24<i32>:word64] = r17_r16
	r16 = r0
	r4 = 0x80<32>
	r1 = r16 + 0x28<32>
	Mem0[r16 + 48<i32>:word32] = r4
	Mem0[r29 + 8<i32>:word64] = r21_r20
	call prefree (retsize: 0;)
	r17 = Mem0[r16:word32]
	// succ:  l0000A6EC
l0000A6EC:
	r0 = r16 + 0<32>
	branch p0 l0000A7C0
	// succ:  l0000A6F4 l0000A7C0
l0000A6F4:
	p0 = r9 == 0<32>
	branch r2 == 0<32> l0000A7B8
	// succ:  l0000A700 l0000A7B8
l0000A700:
	r2 = Mem0[r17 + 20<i32>:word32]
	r3 = Mem0[r17 + 8<i32>:word32]
	// succ:  l0000A704
l0000A704:
	r3 = Mem0[r29 + r20:word32]
	branch r4 == 0<32> l0000A7AC
	// succ:  l0000A714 l0000A7AC
l0000A714:
	r4 = Mem0[r3 + 20<i32>:word32]
	branch r3 == 0<32> l0000A7B0
	// succ:  l0000A71C l0000A7B0
l0000A71C:
	r1_r0 = r17_r16
	r2 = r18
	r5_r4 = 0<64>
	r19 = r0
	r2 = 0x0002B110<p32>
	r1_r0 = SEQ(0<32>, r16)
	r6 = Mem0[r2 - 16<i32>:word32]
	r3_r2 = 0xD<64>
	r6 = Mem0[r6 + 52<i32>:word32]
	Mem0[r29 + 4<i32>:word32] = 0xFFFFFF80<32>
	r6 = Mem0[r6 + 8<i32>:word32]
	Mem0[r29:word32] = 0<32>
	call r6 (retsize: 0;)
	r2 = Mem0[r17 + 8<i32>:word32]
	branch p0 l0000A794
	// succ:  l0000A75C l0000A794
l0000A75C:
	p0 = r0 == 0<32>
	r2 = r16
	r1 = 0xF9<32>
	r3 = 0x0002535E<p32>
	call errlog_function (retsize: 0;)
	r2 = r16
	r1 = 0x110<32>
	r3 = 0x00025351<p32>
	call errlog_function (retsize: 0;)
	r1 = 0x14C<32>
	goto l0000A8E0
	// succ:  l0000A8E0
l0000A794:
	r2 = Mem0[r13 + r20:word32]
	Mem0[r0 + 2<i32>:byte] = r2
	r2 = r2 + 0x1C<32>
	Mem0[r19 + 36<i32>:word32] = r0
	Mem0[r0 + 36<i32>:word32] = r7
	r2 = Mem0[r17 + 20<i32>:word32]
	// succ:  l0000A7AC
l0000A7AC:
	branch r2 >u r18 l0000A700
	goto l0000A7BC
	// succ:  l0000A7BC l0000A700
l0000A7B0:
	branch r2 >u r18 l0000A704
	goto l0000A7BC
	// succ:  l0000A7BC l0000A704
l0000A7B8:
	r17 = Mem0[r17 + 36<i32>:word32]
	goto l0000A6EC
	// succ:  l0000A6EC
l0000A7BC:
	r18 = r18 + 1<32>
	r17 = Mem0[r17 + 36<i32>:word32]
	// succ:  l0000A7C0
l0000A7C0:
	call allocate_and_free (retsize: 0;)
	p0 = r0 == 0<32>
	r1 = 0x14E<32>
	r3 = 0x000251DA<p32>
	r2 = Mem0[r16:word32]
	branch p0 l0000A8E0
	// succ:  l0000A7DC l0000A8E0
l0000A7DC:
	r3 = Mem0[r2 + 24<i32>:word32]
	r0 = r16 + 0<32>
	branch p0 l0000A800
	// succ:  l0000A7E8 l0000A800
l0000A7E8:
	p0 = r2 == 0<32>
	p0 = r3 == 0xD<32>
	r3 = Mem0[r2 + 8<i32>:word32]
	r3 = Mem0[r3:word32]
	Mem0[r3 + 16<i32>:word32] = 0<32>
	r2 = Mem0[r2 + 36<i32>:word32]
	goto l0000A7DC
	// succ:  l0000A7DC
l0000A800:
	call check_allocations (retsize: 0;)
	p0 = r0 == 0<32>
	r1 = 0x155<32>
	r3 = 0x000251E5<p32>
	r0 = r16 + 0<32>
	branch p0 l0000A8E0
	// succ:  l0000A81C l0000A8E0
l0000A81C:
	call check_allocations (retsize: 0;)
	r1 = 0xCA<32>
	branch p0 l0000A848
	// succ:  l0000A828 l0000A848
l0000A828:
	p0 = r0 == 0<32>
	r3 = 0x00025213<p32>
	// succ:  l0000A830
l0000A830:
	r2 = r16
	call errlog_function (retsize: 0;)
	// succ:  l0000A834
l0000A834:
	r1 = 0x156<32>
	goto l0000A8E0
	// succ:  l0000A8E0
l0000A848:
	branch r2 == 0<32> l0000A860
	// succ:  l0000A858 l0000A860
l0000A858:
	r2 = Mem0[r16 + 44<i32>:word32]
	r1 = 0xCB<32>
	goto l0000A834
	// succ:  l0000A834
l0000A860:
	r17 = Mem0[r16 + 48<i32>:word32]
	r0 = r17
	call fn00009500 (retsize: 0;)
	Mem0[r16 + 44<i32>:word32] = r0
	r1 = 0xCD<32>
	branch p0 l0000A884
	// succ:  l0000A878 l0000A884
l0000A878:
	p0 = r0 == 0<32>
	goto l0000A830
	// succ:  l0000A830
l0000A884:
	Mem0[r29 + 4<i32>:word32] = r0
	r3_r2 = SEQ(2<32>, r16)
	r4 = 0x00025243<p32>
	Mem0[r29:word32] = r17
	r1 = 0xD1<32>
	call logmsg_function (retsize: 0;)
	r3 = Mem0[r16 + 8<i32>:word32]
	r2 = Mem0[r16 + 12<i32>:word32]
	r0 = r16
	r4 = r2 + 0x7F<32>
	Mem0[r3 + 1<i32>:byte] = r4
	r4 = r4 & 0xFFFFFF80<32>
	r4 = Mem0[r3 + 4<i32>:word32]
	r2 = r7 - r2
	Mem0[r3 + 2<i32>:byte] = r2
	r2 = r2 + r4
	call allocate_and_free (retsize: 0;)
	p0 = r0 == 0<32>
	r1 = 0x158<32>
	r3 = 0x0000A907<p32>
	branch p0 l0000A8F4
	// succ:  l0000A8E0 l0000A8F4
l0000A8E0:
	r17 = -1<i32>
	r2 = r16
	call errlog_function (retsize: 0;)
	// succ:  l0000A8E8
l0000A8E8:
	r19_r18 = Mem0[r29 + 16<i32>:word64]
	r17_r16 = Mem0[r29 + 24<i32>:word64]
	r0 = r17
	v27 = r30
	r31 = Mem0[v27 + 4<i32>:word32]
	r30 = Mem0[v27:word32]
	r29 = v27 + 8<i32>
	return
	// succ:  allocate_graph_storage_exit
l0000A8F4:
	branch r0 == 0<32> l0000A8E8
	// succ:  l0000A908 l0000A8E8
l0000A908:
	r0 = Mem0[r16:word32]
	r17 = 0<32>
	r18 = r16
	r18 = r0 + 0x24<32>
	// succ:  l0000A90C
l0000A90C:
	branch r0 == 0<32> l0000A8E8
	// succ:  l0000A918 l0000A8E8
l0000A918:
	r0 = Mem0[r18:word32]
	branch r2 == 0xD<32> l0000A90C
	// succ:  l0000A920 l0000A90C
l0000A920:
	Mem0[r18:byte] = r7
	r7 = Mem0[r0 + 36<i32>:word32]
	r2 = Mem0[r2 + 12<i32>:word32]
	call r2 (retsize: 0;)
	goto l0000A90C
	// succ:  l0000A90C
allocate_graph_storage_exit:


// errlog_function
// Return size: 0
define errlog_function
errlog_function_entry:
	r29 = fp
	// succ:  l0000A940
l0000A940:
	v4 = r29 - 8<i32>
	Mem0[v4:word32] = r30
	Mem0[v4 + 4<i32>:word32] = r31
	r30 = v4
	r29 = v4 - 8<i32>
	r4 = r3
	r0 = 0x000251B5<p32>
	Mem0[r29 + 1<i32>:byte] = r6
	r6 = r29 + 0x10<32>
	r5 = r29 + 0x10<32>
	r3 = 0<32>
	v13 = r30
	r31 = Mem0[v13 + 4<i32>:word32]
	r30 = Mem0[v13:word32]
	r29 = v13 + 8<i32>
	return
	// succ:  errlog_function_exit
errlog_function_exit:


// allocate_and_free
// Return size: 0
define allocate_and_free
allocate_and_free_entry:
	r29 = fp
	// succ:  l0000A964
l0000A964:
	v4 = r29 - 8<i32>
	Mem0[v4:word32] = r30
	Mem0[v4 + 4<i32>:word32] = r31
	r30 = v4
	r29 = v4 - 40<i32>
	Mem0[r29 - 16<i32>:word64] = r17_r16
	r17_r16 = SEQ(r0, 0<32>)
	Mem0[r29 + 24<i32>:word64] = r19_r18
	r19 = Mem0[r17:word32]
	Mem0[r29 + 16<i32>:word64] = r21_r20
	Mem0[r29 + 8<i32>:word64] = r23_r22
	r18 = r17 + 0x28<32>
	branch p0 l0000AAD4
	// succ:  l0000A980 l0000AAD4
l0000A980:
	p0 = r11 == 0<32>
	branch r2 == 0xD<32> l0000A9C8
l0000A984:
	branch r2 == 0xD<32> l0000A9CC
	// succ:  l0000A990 l0000A9C8 l0000A9CC
l0000A990:
	r2 = Mem0[r19 + 24<i32>:word32]
	r1_r0 = r18_r17
	branch r2 == 0<32> l0000AAD0
l0000A998:
	r3 = Mem0[r19 + 8<i32>:word32]
	// succ:  l0000A99C l0000AAD0
l0000A99C:
	r2 = Mem0[r19 + 20<i32>:word32]
	r21 = Mem0[r31 + r20 * 4<32>:word32]
	branch r3 == 0<32> l0000AAC4
	// succ:  l0000A9AC l0000AAC4
l0000A9AC:
	r3 = Mem0[r21 + 20<i32>:word32]
	branch r4 == 0<32> l0000AAC8
	// succ:  l0000A9B4 l0000AAC8
l0000A9B4:
	branch r4 == 0<32> l0000AAE8
	// succ:  l0000A9C0 l0000AAE8
l0000A9C0:
	r4 = Mem0[r18:word32]
	r2 = r2 & 0xFFFFFF80<32>
	goto l0000AA30
	// succ:  l0000AA30
l0000A9C8:
	r2 = Mem0[r19 + 8<i32>:word32]
	// succ:  l0000A9CC
l0000A9CC:
	r3 = Mem0[r2:word32]
	r3 = Mem0[r3 + 20<i32>:word32]
	r2 = Mem0[r3 + 16<i32>:word32]
	call prefree (retsize: 0;)
	r1 = 0x123<32>
	branch p0 l0000A9F4
	// succ:  l0000A9E0 l0000A9F4
l0000A9E0:
	p0 = r0 == 0<32>
	r3 = 0x000252D7<p32>
	// succ:  l0000A9E8
l0000A9E8:
	r16 = -1<i32>
	r2 = r17
	call errlog_function (retsize: 0;)
	goto l0000AAD4
	// succ:  l0000AAD4
l0000A9F4:
	r2 = Mem0[r19 + 8<i32>:word32]
	r1 = 0x127<32>
	r4 = 0x000252E5<p32>
	r5 = Mem0[r2:word32]
	r3_r2 = SEQ(3<32>, r17)
	r6 = Mem0[r5 + 20<i32>:word32]
	Mem0[r29 + 1<i32>:byte] = r5
	r5 = Mem0[r5 + 16<i32>:word32]
	Mem0[r29:word32] = r6
	goto l0000AACC
	// succ:  l0000AACC
l0000AA24:
	r4 = Mem0[r0:word32]
	r3 = r0
	branch p0 l0000AAE4
	// succ:  l0000AA30 l0000AAE4
l0000AA30:
	r0 = r4
	branch r2 >u r4 l0000AA24
	// succ:  l0000AA40 l0000AA24
l0000AA40:
	r4 = Mem0[r0 + 8<i32>:word32]
	r3 = r4 - r2
	branch p0 l0000AA58
	// succ:  l0000AA48 l0000AA58
l0000AA48:
	p0 = r4 == r2
	Mem0[r3:byte] = r2
	r2 = Mem0[r0:word32]
	call fn00009510 (retsize: 0;)
	// succ:  l0000AA58
l0000AA58:
	Mem0[r0 + 1<i32>:byte] = r2
	r2 = r22 + r2
	branch r2 >u r3 l0000AA8C
	// succ:  l0000AA70 l0000AA8C
l0000AA70:
	r3 = Mem0[r17 + 48<i32>:word32]
	Mem0[r17 + 48<i32>:word32] = r2
	r3_r2 = SEQ(3<32>, r17)
	r4 = 0x0000AA9A<p32>
	Mem0[r29:byte] = r5
	r5 = Mem0[r0 + 4<i32>:word32]
	r1 = 0x66<32>
	call logmsg_function (retsize: 0;)
	goto l0000AA90
	// succ:  l0000AA90
l0000AA8C:
	Mem0[r21 + 16<i32>:word32] = r22
	r1 = 0x135<32>
	branch p0 l0000AAA8
	goto l0000AA98
	// succ:  l0000AA98 l0000AAA8
l0000AA90:
	Mem0[r21 + 16<i32>:word32] = r22
	r1 = 0x135<32>
	// succ:  l0000AA98
l0000AA98:
	r1 = 0x131<32>
	goto l0000A9E8
	// succ:  l0000A9E8
l0000AAA8:
	Mem0[r29 + 4<i32>:word32] = r22
	r5 = Mem0[r21 + 20<i32>:word32]
	r4 = 0x00025302<p32>
	Mem0[r29:word32] = r5
	r3_r2 = SEQ(3<32>, r17)
	call logmsg_function (retsize: 0;)
	r2 = Mem0[r19 + 20<i32>:word32]
	// succ:  l0000AAC4
l0000AAC4:
	branch r2 >u r20 l0000A998
	goto l0000AAD0
	// succ:  l0000AAD0 l0000A998
l0000AAC8:
	branch r2 >u r20 l0000A99C
l0000AACC:
	branch r19 == 0<32> l0000A980
	// succ:  l0000AAD0 l0000A99C l0000AAD8 l0000A980
l0000AAD0:
	branch r19 == 0<32> l0000A984
	goto l0000AAD8
	// succ:  l0000AAD8 l0000A984
l0000AAD4:
	r19_r18 = Mem0[r29 + 24<i32>:word64]
	r17_r16 = Mem0[r29 + 32<i32>:word64]
	r0 = r16
	r23_r22 = Mem0[r29 + 8<i32>:word64]
	r21_r20 = Mem0[r29 + 16<i32>:word64]
	v25 = r30
	r31 = Mem0[v25 + 4<i32>:word32]
	r30 = Mem0[v25:word32]
	r29 = v25 + 8<i32>
	return
	// succ:  allocate_and_free_exit
l0000AAD8:
	r19_r18 = Mem0[r29 + 24<i32>:word64]
	r17_r16 = Mem0[r29 + 32<i32>:word64]
	r23_r22 = Mem0[r29 + 8<i32>:word64]
	r21_r20 = Mem0[r29 + 16<i32>:word64]
	v26 = r30
	r31 = Mem0[v26 + 4<i32>:word32]
	r30 = Mem0[v26:word32]
	r29 = v26 + 8<i32>
	return
	// succ:  allocate_and_free_exit
l0000AAE4:
	Mem0[r21 + 16<i32>:word32] = 0<32>
	goto l0000AA98
	// succ:  l0000AA98
l0000AAE8:
	Mem0[r21 + 16<i32>:word32] = 0<32>
	// succ:  l0000AAE8_thunk_check_allocations
l0000AAE8_thunk_check_allocations:
	call check_allocations (retsize: 0;)
	return
	// succ:  allocate_and_free_exit
allocate_and_free_exit:


// check_allocations
// Return size: 0
define check_allocations
check_allocations_entry:
	r29 = fp
	// succ:  l0000AAEC
l0000AAEC:
	v4 = r29 - 8<i32>
	Mem0[v4:word32] = r30
	Mem0[v4 + 4<i32>:word32] = r31
	r30 = v4
	r29 = v4 - 24<i32>
	r1 = 0xB8<32>
	r4 = 0x000252B2<p32>
	Mem0[r29 + 16<i32>:word64] = r17_r16
	r16 = r0
	r5 = Mem0[r16 + 40<i32>:word32]
	r3_r2 = SEQ(3<32>, r16)
	r7 = Mem0[r5 + 4<i32>:word32]
	r6 = Mem0[r5 + 8<i32>:word32]
	Mem0[r29 + 4<i32>:word32] = r7
	Mem0[r29 + 8<i32>:word32] = r6
	Mem0[r29:word32] = r5
	call logmsg_function (retsize: 0;)
	branch r2 == 0<32> l0000AB38
	// succ:  l0000AB24 l0000AB38
l0000AB24:
	r2 = Mem0[r16 + 40<i32>:word32]
	branch r4 == 0<32> l0000AB24
	// succ:  l0000AB34 l0000AB24
l0000AB34:
	r4 = Mem0[r4:word32]
	r3 = r3 + 0xFFFFFFFF<32>
	r2 = Mem0[r2 + 8<i32>:word32]
	// succ:  l0000AB38
l0000AB38:
	r2 = r16
	r1 = 0xBE<32>
	r3 = 0x00025271<p32>
	call errlog_function (retsize: 0;)
	v19 = r30
	r31 = Mem0[v19 + 4<i32>:word32]
	r30 = Mem0[v19:word32]
	r29 = v19 + 8<i32>
	return
	// succ:  check_allocations_exit
check_allocations_exit:


// allocator_teardown
// Return size: 0
define allocator_teardown
allocator_teardown_entry:
	r29 = fp
	// succ:  l0000ABA4
l0000ABA4:
	v4 = r29 - 8<i32>
	Mem0[v4:word32] = r30
	Mem0[v4 + 4<i32>:word32] = r31
	r30 = v4
	r29 = v4 - 8<i32>
	Mem0[r29 - 16<i32>:word64] = r17_r16
	r16 = r0
	branch r0 == 0<32> l0000ABC4
l0000ABB4:
	r17 = Mem0[r0:word32]
	call fn00009510 (retsize: 0;)
	// succ:  l0000ABB8 l0000ABC4 l0000ABBC
l0000ABB8:
	r0 = Mem0[r16 + 40<i32>:word32]
	r17 = Mem0[r0:word32]
	// succ:  l0000ABBC
l0000ABBC:
	p0 = r17 == 0<32>
	r0 = r17
	branch p0 l0000ABB4
	// succ:  l0000ABC4 l0000ABB4
l0000ABC4:
	Mem0[r16 + 40<i32>:word32] = 0<32>
	r0 = Mem0[r16 + 12<i32>:word32]
	branch p0 l0000ABD4
	// succ:  l0000ABD0 l0000ABD4
l0000ABD0:
	p0 = r0 == 0<32>
	v12 = r30
	r31 = Mem0[v12 + 4<i32>:word32]
	r30 = Mem0[v12:word32]
	r29 = v12 + 8<i32>
	return
	// succ:  allocator_teardown_exit
l0000ABD4:
	v13 = r30
	r31 = Mem0[v13 + 4<i32>:word32]
	r30 = Mem0[v13:word32]
	r29 = v13 + 8<i32>
	r17_r16 = Mem0[r29:word64]
	// succ:  l0000ABD4_thunk_fn00009510
l0000ABD4_thunk_fn00009510:
	call fn00009510 (retsize: 0;)
	return
	// succ:  allocator_teardown_exit
allocator_teardown_exit:


// logmsg_function
// Return size: 0
define logmsg_function
logmsg_function_entry:
	r29 = fp
	// succ:  l0000ABDC
l0000ABDC:
	v4 = r29 - 8<i32>
	Mem0[v4:word32] = r30
	Mem0[v4 + 4<i32>:word32] = r31
	r30 = v4
	r29 = v4 - 8<i32>
	branch r3 >u r5 l0000ABFC
	// succ:  l0000ABEC l0000ABFC
l0000ABEC:
	r5 = Mem0[r2 + 16<i32>:word32]
	r6 = r29 + 0x10<32>
	r5 = r29 + 0x10<32>
	r0 = 0x0000ABF9<p32>
	Mem0[r29 + 4<i32>:word32] = r6
	call logv (retsize: 0;)
	// succ:  l0000ABFC
l0000ABFC:
	v13 = r30
	r31 = Mem0[v13 + 4<i32>:word32]
	r30 = Mem0[v13:word32]
	r29 = v13 + 8<i32>
	return
	// succ:  logmsg_function_exit
logmsg_function_exit:


// prefree
// Return size: 0
define prefree
prefree_entry:
	r29 = fp
	// succ:  l0000AC00
l0000AC00:
	v4 = r29 - 8<i32>
	Mem0[v4:word32] = r30
	Mem0[v4 + 4<i32>:word32] = r31
	r30 = v4
	r29 = v4 - 16<i32>
	Mem0[r29 - 16<i32>:word64] = r17_r16
	r17_r16 = r2_r1
	r3 = r3 + 0x7F<32>
	Mem0[r29:word64] = r19_r18
	r4 = Mem0[r16:word32]
	r19 = r3 & 0xFFFFFF80<32>
	r18 = r0
	// succ:  l0000AC18
l0000AC18:
	r2 = r4
	branch p0 l0000AC50
	// succ:  l0000AC20 l0000AC50
l0000AC20:
	p0 = r4 == 0<32>
	r0 = 0xC<32>
	call fn00009500 (retsize: 0;)
	r17 = 0xFFFFFFFF<32>
	branch p0 l0000ACB4
	// succ:  l0000AC30 l0000ACB4
l0000AC30:
	p0 = r0 == 0<32>
	r2 = r18
	r1 = 0xA0<32>
	r3 = 0x0002533D<p32>
	call errlog_function (retsize: 0;)
	goto l0000ACC4
	// succ:  l0000ACC4
l0000AC48:
	r4 = Mem0[r2:word32]
	goto l0000AC18
	// succ:  l0000AC18
l0000AC50:
	r4 = Mem0[r2 + 4<i32>:word32]
	r3 = Mem0[r2 + 8<i32>:word32]
	branch r17 >u r5 l0000AC48
	// succ:  l0000AC60 l0000AC48
l0000AC60:
	r5 = r3 + r4
	Mem0[r2 + 2<i32>:byte] = r3
	r0 = Mem0[r2:word32]
	r17 = 0<32>
	r3 = r3 + r19
	r5 = Mem0[r0 + 4<i32>:word32]
	branch r4 == r5 l0000ACC4
	// succ:  l0000AC84 l0000ACC4
l0000AC84:
	r4 = r4 + r3
	Mem0[r2 + 2<i32>:byte] = r3
	r3 = r4 + r3
	Mem0[r2:word32] = r3
	call fn00009510 (retsize: 0;)
	goto l0000ACC4
	// succ:  l0000ACC4
l0000ACB4:
	Mem0[r0 + 8<i32>:word32] = r19
	Mem0[r0 + 4<i32>:word32] = r17
	r17 = 0<32>
	r2 = Mem0[r16:word32]
	Mem0[r16:word32] = r0
	Mem0[r0:word32] = r2
	// succ:  l0000ACC4
l0000ACC4:
	r19_r18 = Mem0[r29:word64]
	r17_r16 = Mem0[r29 + 8<i32>:word64]
	r0 = r17
	v22 = r30
	r31 = Mem0[v22 + 4<i32>:word32]
	r30 = Mem0[v22:word32]
	r29 = v22 + 8<i32>
	return
	// succ:  prefree_exit
prefree_exit:


// do_execute
// Return size: 0
define do_execute
do_execute_entry:
	r29 = fp
	// succ:  l0000ACD0
l0000ACD0:
	v4 = r29 - 8<i32>
	Mem0[v4:word32] = r30
	Mem0[v4 + 4<i32>:word32] = r31
	r30 = v4
	r29 = v4 - 32<i32>
	Mem0[r29 - 16<i32>:word64] = r17_r16
	r16 = r0
	Mem0[r29 + 8<i32>:word64] = r21_r20
	Mem0[r29 + 16<i32>:word64] = r19_r18
	Mem0[r16 + 28<i32>:word32] = r2
	Mem0[r29:word64] = r23_r22
	Mem0[r16 + 24<i32>:word32] = r3
	Mem0[r16 + 20<i32>:word32] = r1
	Mem0[r16 + 32<i32>:word32] = r4
	call nn_os_hvx_power_on (retsize: 0;)
	r0 = r16
	call nn_os_vector_workers_acquire (retsize: 0;)
	call fn00009530 (retsize: 0;)
	branch r17 == 0<32> l0000AD58
l0000AD08:
	r20 = 0<32>
	branch p0 l0000AD58
	// succ:  l0000AD0C l0000AD58 l0000AD10
l0000AD0C:
	r17 = Mem0[r16:word32]
	r19_r18 = r1_r0
	r20 = 0<32>
	r0 = r16
	call nn_os_get_perfcount (retsize: 0;)
	r2 = Mem0[r17:word32]
	r1_r0 = r16_r17
	r23_r22 = r1_r0
	r2 = Mem0[r2:word32]
	call r2 (retsize: 0;)
	branch r20 == 0<32> l0000AD58
	goto l0000AD38
	// succ:  l0000AD38 l0000AD58
l0000AD10:
	p0 = r9 == 0<32>
	r0 = r16
	call nn_os_get_perfcount (retsize: 0;)
	r2 = Mem0[r17:word32]
	r1_r0 = r16_r17
	r23_r22 = r1_r0
	r2 = Mem0[r2:word32]
	call r2 (retsize: 0;)
	branch r20 == 0<32> l0000AD58
	// succ:  l0000AD38 l0000AD58
l0000AD38:
	r20 = r0
	r0 = r16
	Mem0[r17 + 44<i32>:word32] = Mem0[r17 + 44<i32>:word32] + 1<32>
	r3_r2 = Mem0[r17 + 48<i32>:word64]
	r1_r0 = r1_r0 - r23_r22
	r1_r0 = r3_r2 + r1_r0
	Mem0[r17 + 48<i32>:word64] = r1_r0
	r17 = Mem0[r17 + 36<i32>:word32]
	goto l0000AD08
	// succ:  l0000AD08
l0000AD58:
	call fn00009530 (retsize: 0;)
	r0 = r16
	r3_r2 = r1_r0 - r19_r18
	Mem0[r16 + 80<i32>:word64] = r3_r2
	call nn_os_vector_workers_release (retsize: 0;)
	r0 = r16
	call nn_os_hvx_power_off (retsize: 0;)
	r19_r18 = Mem0[r29 + 16<i32>:word64]
	r17_r16 = Mem0[r29 + 24<i32>:word64]
	r0 = r20
	r23_r22 = Mem0[r29:word64]
	r21_r20 = Mem0[r29 + 8<i32>:word64]
	v22 = r30
	r31 = Mem0[v22 + 4<i32>:word32]
	r30 = Mem0[v22:word32]
	r29 = v22 + 8<i32>
	return
	// succ:  do_execute_exit
do_execute_exit:


// hexagon_nn_init
// Return size: 0
define hexagon_nn_init
hexagon_nn_init_entry:
	r29 = fp
	// succ:  l0000AD90
l0000AD90:
	v4 = r29 - 8<i32>
	Mem0[v4:word32] = r30
	Mem0[v4 + 4<i32>:word32] = r31
	r30 = v4
	r29 = v4 - 16<i32>
	Mem0[r29 - 16<i32>:word64] = r17_r16
	r1_r0 = 0x5800000001<64>
	Mem0[r29:word64] = r19_r18
	call fn00009540 (retsize: 0;)
	r17_r16 = SEQ(r0, 0<32>)
	Mem0[r17 - 28<i32>:byte] = 1<8>
	branch p0 l0000AE1C
	// succ:  l0000ADAC l0000AE1C
l0000ADAC:
	p0 = r9 == 0<32>
	r1 = 0x2000000<32>
	r0 = 0x80<32>
	call fn00009550 (retsize: 0;)
	Mem0[r17 + 1<i32>:byte] = r18
	r18 = r0
	Mem0[r17 + 33554440<i32>:word32] = 0<32>
	r0 = r17
	call fn00009510 (retsize: 0;)
	// succ:  l0000AE1C
l0000AE1C:
	r19_r18 = Mem0[r29:word64]
	r17_r16 = Mem0[r29 + 8<i32>:word64]
	r0 = r16
	v17 = r30
	r31 = Mem0[v17 + 4<i32>:word32]
	r30 = Mem0[v17:word32]
	r29 = v17 + 8<i32>
	return
	// succ:  hexagon_nn_init_exit
hexagon_nn_init_exit:


// hexagon_nn_getlog
// Return size: 0
define hexagon_nn_getlog
hexagon_nn_getlog_entry:
	r29 = fp
	// succ:  l0000AE30
l0000AE30:
	v4 = r29 - 8<i32>
	Mem0[v4:word32] = r30
	Mem0[v4 + 4<i32>:word32] = r31
	r30 = v4
	r29 = v4 - 16<i32>
	r4 = 0xE<32>
	r3 = 0x00025371<p32>
	Mem0[r29:word64] = r19_r18
	Mem0[r29 + 8<i32>:word64] = r17_r16
	r18 = r2
	r17_r16 = r1_r0
	r1_r0 = r3_r17
	call fn00009560 (retsize: 0;)
	r2 = min<int32>(r4, r18)
	r0 = 0xFFFFFFFF<32>
	branch p0 l0000AE90
	// succ:  l0000AE60 l0000AE90
l0000AE60:
	p0 = r8 == 0<32>
	r2 = r17 + (r18 + 0x3F<32>)
	Mem0[r2:byte] = 0<8>
	r19 = Mem0[r16 + 56<i32>:word32]
	r0 = r19
	call fn00009570 (retsize: 0;)
	r2 = r18
	r3 = r0
	r1_r0 = r19_r17
	call fn00009560 (retsize: 0;)
	r2 = min<int32>(r2, r3)
	Mem0[r16 + 64<i32>:word32] = 0<32>
	r2 = Mem0[r16 + 56<i32>:word32]
	r0 = 0<32>
	Mem0[r2:byte] = 0<8>
	// succ:  l0000AE90
l0000AE90:
	r19_r18 = Mem0[r29:word64]
	r17_r16 = Mem0[r29 + 8<i32>:word64]
	v24 = r30
	r31 = Mem0[v24 + 4<i32>:word32]
	r30 = Mem0[v24:word32]
	r29 = v24 + 8<i32>
	return
	// succ:  hexagon_nn_getlog_exit
hexagon_nn_getlog_exit:


// hexagon_nn_snpprint
// Return size: 0
define hexagon_nn_snpprint
hexagon_nn_snpprint_entry:
	r29 = fp
	// succ:  l0000AE98
l0000AE98:
	v4 = r29 - 8<i32>
	Mem0[v4:word32] = r30
	Mem0[v4 + 4<i32>:word32] = r31
	r30 = v4
	r29 = v4 - 16<i32>
	Mem0[r29 - 16<i32>:word64] = r17_r16
	r3 = 0x00025371<p32>
	r17_r16 = r1_r2
	Mem0[r29:word64] = r19_r18
	r18 = r0
	r1_r0 = r3_r17
	call fn00009580 (retsize: 0;)
	r2 = r16 + 0<32>
	r0 = 0xFFFFFFFF<32>
	branch p0 l0000AECC
	// succ:  l0000AEC0 l0000AECC
l0000AEC0:
	p0 = r10 == 0<32>
	r1_r0 = r17_r18
	call do_snpprint (retsize: 0;)
	r0 = 0<32>
	// succ:  l0000AECC
l0000AECC:
	r19_r18 = Mem0[r29:word64]
	r17_r16 = Mem0[r29 + 8<i32>:word64]
	v23 = r30
	r31 = Mem0[v23 + 4<i32>:word32]
	r30 = Mem0[v23:word32]
	r29 = v23 + 8<i32>
	return
	// succ:  hexagon_nn_snpprint_exit
hexagon_nn_snpprint_exit:


// hexagon_nn_set_debug_level
// Return size: 0
define hexagon_nn_set_debug_level
hexagon_nn_set_debug_level_entry:
	r29 = fp
	// succ:  l0000AED4
l0000AED4:
	p0 = r0 == 0<32>
	r3 = 0<32>
	r2 = 0xFFFFFFFF<32>
	r2 = r3 + 0<32>
	r3 = max<int32>(r1, r3)
	return
	// succ:  hexagon_nn_set_debug_level_exit
hexagon_nn_set_debug_level_exit:


// hexagon_nn_prepare
// Return size: 0
define hexagon_nn_prepare
hexagon_nn_prepare_entry:
	r29 = fp
	// succ:  l0000AEF0
l0000AEF0:
	v4 = r29 - 8<i32>
	Mem0[v4:word32] = r30
	Mem0[v4 + 4<i32>:word32] = r31
	r30 = v4
	r29 = v4 - 8<i32>
	branch p0 l0000AF14
	// succ:  l0000AEF8 l0000AF14
l0000AEF8:
	p0 = r0 == 0<32>
	r1 = 0x87<32>
	r2 = 0<32>
	r3 = 0x00025397<p32>
	Mem0[r29:word32] = 0<32>
	call errlog_function (retsize: 0;)
	v13 = r30
	r31 = Mem0[v13 + 4<i32>:word32]
	r30 = Mem0[v13:word32]
	r29 = v13 + 8<i32>
	return
	// succ:  hexagon_nn_prepare_exit
l0000AF14:
	v14 = r30
	r31 = Mem0[v14 + 4<i32>:word32]
	r30 = Mem0[v14:word32]
	r29 = v14 + 8<i32>
	// succ:  l0000AF14_thunk_do_prepare
l0000AF14_thunk_do_prepare:
	call do_prepare (retsize: 0;)
	return
	// succ:  hexagon_nn_prepare_exit
hexagon_nn_prepare_exit:


// errlog_function
// Return size: 0
define errlog_function
errlog_function_entry:
	r29 = fp
	// succ:  l0000AF1C
l0000AF1C:
	v4 = r29 - 8<i32>
	Mem0[v4:word32] = r30
	Mem0[v4 + 4<i32>:word32] = r31
	r30 = v4
	r29 = v4 - 8<i32>
	r4 = r3
	r0 = 0x0002537F<p32>
	Mem0[r29 + 1<i32>:byte] = r6
	r6 = r29 + 0x10<32>
	r5 = r29 + 0x10<32>
	r3 = 0<32>
	v13 = r30
	r31 = Mem0[v13 + 4<i32>:word32]
	r30 = Mem0[v13:word32]
	r29 = v13 + 8<i32>
	return
	// succ:  errlog_function_exit
errlog_function_exit:


// hexagon_nn_append_node
// Return size: 0
define hexagon_nn_append_node
hexagon_nn_append_node_entry:
	r29 = fp
	// succ:  l0000AF40
l0000AF40:
	v4 = r29 - 8<i32>
	Mem0[v4:word32] = r30
	Mem0[v4 + 4<i32>:word32] = r31
	r30 = v4
	r29 = v4 - 8<i32>
	r6 = r4
	branch p0 l0000AF60
	// succ:  l0000AF48 l0000AF60
l0000AF48:
	p0 = r0 == 0<32>
	r1 = 0x98<32>
	r2 = 0<32>
	r3 = 0x00025397<p32>
	Mem0[r29:word32] = 0<32>
	goto l0000AF78
	// succ:  l0000AF78
l0000AF60:
	branch r4 == 1<32> l0000AF80
	// succ:  l0000AF6C l0000AF80
l0000AF6C:
	r4 = Mem0[r0 + 36<i32>:int8]
	r2 = r0
	r1 = 0x9B<32>
	r3 = 0x0000AF6E<p32>
	// succ:  l0000AF78
l0000AF78:
	call errlog_function (retsize: 0;)
	v15 = r30
	r31 = Mem0[v15 + 4<i32>:word32]
	r30 = Mem0[v15:word32]
	r29 = v15 + 8<i32>
	return
	// succ:  hexagon_nn_append_node_exit
l0000AF80:
	r7 = Mem0[r29 + 20<i32>:word64]
	r4 = Mem0[r29 + 16<i32>:word64]
	Mem0[r29:word32] = r6
	Mem0[r29 + 4<i32>:word32] = r4
	r5_r4 = r7_r5
	call do_append_node (retsize: 0;)
	v20 = r30
	r31 = Mem0[v20 + 4<i32>:word32]
	r30 = Mem0[v20:word32]
	r29 = v20 + 8<i32>
	return
	// succ:  hexagon_nn_append_node_exit
hexagon_nn_append_node_exit:


// hexagon_nn_append_const_node
// Return size: 0
define hexagon_nn_append_const_node
hexagon_nn_append_const_node_entry:
	r29 = fp
	// succ:  l0000AF94
l0000AF94:
	v4 = r29 - 8<i32>
	Mem0[v4:word32] = r30
	Mem0[v4 + 4<i32>:word32] = r31
	r30 = v4
	r29 = v4 - 8<i32>
	branch p0 l0000AFB4
	// succ:  l0000AF9C l0000AFB4
l0000AF9C:
	p0 = r0 == 0<32>
	r1 = 0xB4<32>
	r2 = 0<32>
	r3 = 0x00025397<p32>
	Mem0[r29:word32] = 0<32>
	goto l0000AFCC
	// succ:  l0000AFCC
l0000AFB4:
	branch r6 == 1<32> l0000AFD4
	// succ:  l0000AFC0 l0000AFD4
l0000AFC0:
	r6 = Mem0[r0 + 36<i32>:int8]
	r2 = r0
	r1 = 0xB7<32>
	r3 = 0x0000AFEE<p32>
	// succ:  l0000AFCC
l0000AFCC:
	call errlog_function (retsize: 0;)
	v14 = r30
	r31 = Mem0[v14 + 4<i32>:word32]
	r30 = Mem0[v14:word32]
	r29 = v14 + 8<i32>
	return
	// succ:  hexagon_nn_append_const_node_exit
l0000AFD4:
	Mem0[r29 + 1<i32>:byte] = r7
	r7 = Mem0[r29 + 20<i32>:word32]
	Mem0[r29:word32] = r6
	call do_append_const_node (retsize: 0;)
	v16 = r30
	r31 = Mem0[v16 + 4<i32>:word32]
	r30 = Mem0[v16:word32]
	r29 = v16 + 8<i32>
	return
	// succ:  hexagon_nn_append_const_node_exit
hexagon_nn_append_const_node_exit:


// hexagon_nn_execute_new
// Return size: 0
define hexagon_nn_execute_new
hexagon_nn_execute_new_entry:
	r29 = fp
	// succ:  l0000AFEC
l0000AFEC:
	v4 = r29 - 8<i32>
	Mem0[v4:word32] = r30
	Mem0[v4 + 4<i32>:word32] = r31
	r30 = v4
	r29 = v4 - 32<i32>
	Mem0[r29 - 16<i32>:word64] = r17_r16
	Mem0[r29 + 16<i32>:word64] = r19_r18
	r19_r18 = r3_r2
	r17_r16 = r0_r1
	Mem0[r29 + 8<i32>:word64] = r21_r20
	r20 = r4
	branch p0 l0000B01C
	// succ:  l0000B004 l0000B01C
l0000B004:
	p0 = r9 == 0<32>
	r1 = 0xD5<32>
	r2 = 0<32>
	r3 = 0x00025397<p32>
	Mem0[r29:word32] = 0<32>
	goto l0000B034
	// succ:  l0000B034
l0000B01C:
	branch r2 == 2<32> l0000B044
	// succ:  l0000B028 l0000B044
l0000B028:
	r2 = Mem0[r17 + 36<i32>:int8]
	r2 = r17
	r1 = 0xD8<32>
	r3 = 0x0000B053<p32>
	// succ:  l0000B034
l0000B034:
	call errlog_function (retsize: 0;)
	r19_r18 = Mem0[r29 + 16<i32>:word64]
	r17_r16 = Mem0[r29 + 24<i32>:word64]
	r0 = 0xFFFFFFFF<32>
	v22 = r30
	r31 = Mem0[v22 + 4<i32>:word32]
	r30 = Mem0[v22:word32]
	r29 = v22 + 8<i32>
	return
	// succ:  hexagon_nn_execute_new_exit
l0000B044:
	Mem0[r29:word32] = r18
	Mem0[r29 + 4<i32>:word32] = r20
	r2 = r17
	call logmsg_function (retsize: 0;)
	r1_r0 = r16_r17
	r3_r2 = r19_r18
	r4 = r20
	r19_r18 = Mem0[r29 + 16<i32>:word64]
	r17_r16 = Mem0[r29 + 24<i32>:word64]
	v28 = r30
	r31 = Mem0[v28 + 4<i32>:word32]
	r30 = Mem0[v28:word32]
	r29 = v28 + 8<i32>
	r21_r20 = Mem0[r29 + 8<i32>:word64]
	// succ:  l0000B060_thunk_do_execute
l0000B060_thunk_do_execute:
	call do_execute (retsize: 0;)
	return
	// succ:  hexagon_nn_execute_new_exit
hexagon_nn_execute_new_exit:


// logmsg_function
// Return size: 0
define logmsg_function
logmsg_function_entry:
	r29 = fp
	// succ:  l0000B068
l0000B068:
	v4 = r29 - 8<i32>
	Mem0[v4:word32] = r30
	Mem0[v4 + 4<i32>:word32] = r31
	r30 = v4
	r29 = v4 - 8<i32>
	r4 = 2<32>
	branch r4 >u r3 l0000B098
	// succ:  l0000B078 l0000B098
l0000B078:
	r3 = Mem0[r2 + 16<i32>:word32]
	r5 = r29 + 0x10<32>
	r3 = 2<32>
	r0 = 0x0000B083<p32>
	r6 = r29 + 0x10<32>
	r1 = 0xDA<32>
	r4 = 0x000253E2<p32>
	Mem0[r29 + 4<i32>:word32] = r6
	call logv (retsize: 0;)
	// succ:  l0000B098
l0000B098:
	v15 = r30
	r31 = Mem0[v15 + 4<i32>:word32]
	r30 = Mem0[v15:word32]
	r29 = v15 + 8<i32>
	return
	// succ:  logmsg_function_exit
logmsg_function_exit:


// hexagon_nn_execute
// Return size: 0
define hexagon_nn_execute
hexagon_nn_execute_entry:
	r29 = fp
	// succ:  l0000B09C
l0000B09C:
	v4 = r29 - 8<i32>
	Mem0[v4:word32] = r30
	Mem0[v4 + 4<i32>:word32] = r31
	r30 = v4
	r29 = v4 - 96<i32>
	Mem0[r29 - 52<i32>:word32] = r4
	p0 = r0 == 0<32>
	Mem0[r29 + 44<i32>:word32] = r2
	r6 = Mem0[r29 + 104<i32>:word64]
	Mem0[r29 + 48<i32>:word32] = r3
	r4 = Mem0[r29 + 124<i32>:word64]
	Mem0[r29 + 60<i32>:word32] = r6
	r3 = Mem0[r29 + 128<i32>:word32]
	Mem0[r29 + 24<i32>:word32] = r4
	Mem0[r29 + 40<i32>:word32] = r1
	Mem0[r29 + 64<i32>:word32] = r6
	Mem0[r29 + 28<i32>:word32] = r3
	Mem0[r29 + 80<i32>:word64] = r19_r18
	Mem0[r29 + 88<i32>:word64] = r17_r16
	Mem0[r29 + 32<i32>:word32] = r3
	Mem0[r29 + 72<i32>:word64] = r21_r20
	Mem0[r29:word32] = 0<32>
	Mem0[r29 + 56<i32>:word32] = r5
	branch p0 l0000B0E8
	// succ:  l0000B0D4 l0000B0E8
l0000B0D4:
	r1 = 0xF9<32>
	r2 = 0<32>
	r3 = 0x00025397<p32>
	goto l0000B100
	// succ:  l0000B100
l0000B0E8:
	branch r2 == 2<32> l0000B10C
	// succ:  l0000B0F4 l0000B10C
l0000B0F4:
	r2 = Mem0[r0 + 36<i32>:int8]
	r2 = r0
	r1 = 0xFC<32>
	r3 = 0x0000B113<p32>
	// succ:  l0000B100
l0000B100:
	call errlog_function (retsize: 0;)
	r0 = 0xFFFFFFFF<32>
	goto l0000B144
	// succ:  l0000B144
l0000B10C:
	r1 = r29 + 0x28<32>
	r2 = 1<32>
	r3 = r29 + 8<32>
	r4 = 1<32>
	r17 = Mem0[r29 + 116<i32>:word64]
	r16 = Mem0[r29 + 108<i32>:word64]
	r19 = Mem0[r29 + 120<i32>:word64]
	r18 = Mem0[r29 + 112<i32>:word64]
	r20 = Mem0[r29 + 132<i32>:word32]
	call do_execute (retsize: 0;)
	Mem0[r16:byte] = r2
	r2 = Mem0[r29 + 8<i32>:word32]
	Mem0[r18:word32] = r5
	r4 = Mem0[r29 + 16<i32>:word64]
	Mem0[r19:word32] = r3
	Mem0[r17:word32] = r4
	Mem0[r20:byte] = r2
	r2 = Mem0[r29 + 32<i32>:word32]
	goto l0000B148
	// succ:  l0000B148
l0000B144:
	r19_r18 = Mem0[r29 + 80<i32>:word64]
	r17_r16 = Mem0[r29 + 88<i32>:word64]
	// succ:  l0000B148
l0000B148:
	v24 = r30
	r31 = Mem0[v24 + 4<i32>:word32]
	r30 = Mem0[v24:word32]
	r29 = v24 + 8<i32>
	return
	// succ:  hexagon_nn_execute_exit
hexagon_nn_execute_exit:


// hexagon_nn_teardown
// Return size: 0
define hexagon_nn_teardown
hexagon_nn_teardown_entry:
	r29 = fp
	// succ:  l0000B150
l0000B150:
	v4 = r29 - 8<i32>
	Mem0[v4:word32] = r30
	Mem0[v4 + 4<i32>:word32] = r31
	r30 = v4
	r29 = v4 - 8<i32>
	branch p0 l0000B174
	// succ:  l0000B158 l0000B174
l0000B158:
	p0 = r0 == 0<32>
	r1 = 0x10B<32>
	r2 = 0<32>
	r3 = 0x00025397<p32>
	Mem0[r29:word32] = 0<32>
	call errlog_function (retsize: 0;)
	v13 = r30
	r31 = Mem0[v13 + 4<i32>:word32]
	r30 = Mem0[v13:word32]
	r29 = v13 + 8<i32>
	return
	// succ:  hexagon_nn_teardown_exit
l0000B174:
	v14 = r30
	r31 = Mem0[v14 + 4<i32>:word32]
	r30 = Mem0[v14:word32]
	r29 = v14 + 8<i32>
	// succ:  l0000B174_thunk_do_teardown
l0000B174_thunk_do_teardown:
	call do_teardown (retsize: 0;)
	return
	// succ:  hexagon_nn_teardown_exit
hexagon_nn_teardown_exit:


// hexagon_nn_get_perfinfo
// Return size: 0
define hexagon_nn_get_perfinfo
hexagon_nn_get_perfinfo_entry:
	r29 = fp
	// succ:  l0000B17C
l0000B17C:
	v4 = r29 - 8<i32>
	Mem0[v4:word32] = r30
	Mem0[v4 + 4<i32>:word32] = r31
	r30 = v4
	r29 = v4 - 16<i32>
	Mem0[r29 - 16<i32>:word64] = r17_r16
	r16 = r3
	p0 = r0 == 0<32>
	Mem0[r29:word32] = 0<32>
	branch p0 l0000B1AC
	// succ:  l0000B190 l0000B1AC
l0000B190:
	call do_perfinfo_get (retsize: 0;)
	Mem0[r16:byte] = r2
	r17_r16 = Mem0[r29 + 8<i32>:word64]
	r0 = 0xFFFFFFFF<32>
	r2 = r0
	v13 = r30
	r31 = Mem0[v13 + 4<i32>:word32]
	r30 = Mem0[v13:word32]
	r29 = v13 + 8<i32>
	return
	// succ:  hexagon_nn_get_perfinfo_exit
l0000B1AC:
	r1 = 0x117<32>
	r2 = 0<32>
	r3 = 0x00025397<p32>
	call errlog_function (retsize: 0;)
	v16 = r30
	r31 = Mem0[v16 + 4<i32>:word32]
	r30 = Mem0[v16:word32]
	r29 = v16 + 8<i32>
	return
	// succ:  hexagon_nn_get_perfinfo_exit
hexagon_nn_get_perfinfo_exit:


// hexagon_nn_reset_perfinfo
// Return size: 0
define hexagon_nn_reset_perfinfo
hexagon_nn_reset_perfinfo_entry:
	r29 = fp
	// succ:  l0000B1C8
l0000B1C8:
	v4 = r29 - 8<i32>
	Mem0[v4:word32] = r30
	Mem0[v4 + 4<i32>:word32] = r31
	r30 = v4
	r29 = v4 - 8<i32>
	branch p0 l0000B1EC
	// succ:  l0000B1D0 l0000B1EC
l0000B1D0:
	p0 = r0 == 0<32>
	r1 = 0x124<32>
	r2 = 0<32>
	r3 = 0x00025397<p32>
	Mem0[r29:word32] = 0<32>
	call errlog_function (retsize: 0;)
	v13 = r30
	r31 = Mem0[v13 + 4<i32>:word32]
	r30 = Mem0[v13:word32]
	r29 = v13 + 8<i32>
	return
	// succ:  hexagon_nn_reset_perfinfo_exit
l0000B1EC:
	v14 = r30
	r31 = Mem0[v14 + 4<i32>:word32]
	r30 = Mem0[v14:word32]
	r29 = v14 + 8<i32>
	// succ:  l0000B1EC_thunk_do_perfinfo_reset
l0000B1EC_thunk_do_perfinfo_reset:
	call do_perfinfo_reset (retsize: 0;)
	return
	// succ:  hexagon_nn_reset_perfinfo_exit
hexagon_nn_reset_perfinfo_exit:


// hexagon_nn_version
// Return size: 0
define hexagon_nn_version
hexagon_nn_version_entry:
	r29 = fp
	// succ:  l0000B1F4
l0000B1F4:
	r2 = r0
	r0 = 0<32>
	Mem0[r2:word32] = 0x5A<32>
	return
	// succ:  hexagon_nn_version_exit
hexagon_nn_version_exit:


// hexagon_nn_last_execution_cycles
// Return size: 0
define hexagon_nn_last_execution_cycles
hexagon_nn_last_execution_cycles_entry:
	r29 = fp
	// succ:  l0000B200
l0000B200:
	v4 = r29 - 8<i32>
	Mem0[v4:word32] = r30
	Mem0[v4 + 4<i32>:word32] = r31
	r30 = v4
	r29 = v4 - 8<i32>
	branch p0 l0000B224
	// succ:  l0000B208 l0000B224
l0000B208:
	p0 = r0 == 0<32>
	r1 = 0x134<32>
	r2 = 0<32>
	r3 = 0x00025397<p32>
	Mem0[r29:word32] = 0<32>
	call errlog_function (retsize: 0;)
	v13 = r30
	r31 = Mem0[v13 + 4<i32>:word32]
	r30 = Mem0[v13:word32]
	r29 = v13 + 8<i32>
	return
	// succ:  hexagon_nn_last_execution_cycles_exit
l0000B224:
	r5_r4 = Mem0[r0 + 80<i32>:word64]
	r0 = 0<32>
	r7_r6 = r5_r4 >>u 0x20<32>
	Mem0[r1:word32] = r4
	Mem0[r2:word32] = r6
	v18 = r30
	r31 = Mem0[v18 + 4<i32>:word32]
	r30 = Mem0[v18:word32]
	r29 = v18 + 8<i32>
	return
	// succ:  hexagon_nn_last_execution_cycles_exit
hexagon_nn_last_execution_cycles_exit:


// hexagon_nn_GetHexagonBinaryVersion
// Return size: 0
define hexagon_nn_GetHexagonBinaryVersion
hexagon_nn_GetHexagonBinaryVersion_entry:
	r29 = fp
	// succ:  l0000B238
l0000B238:
	r2 = r0
	r0 = 0<32>
	Mem0[r2:word32] = 0x5A<32>
	return
	// succ:  hexagon_nn_GetHexagonBinaryVersion_exit
hexagon_nn_GetHexagonBinaryVersion_exit:


// hexagon_nn_PrintLog
// Return size: 0
define hexagon_nn_PrintLog
hexagon_nn_PrintLog_entry:
	r29 = fp
	// succ:  l0000B244
l0000B244:
	return
	// succ:  hexagon_nn_PrintLog_exit
hexagon_nn_PrintLog_exit:


// hexagon_nn_op_name_to_id
// Return size: 0
define hexagon_nn_op_name_to_id
hexagon_nn_op_name_to_id_entry:
	r29 = fp
	// succ:  l0000B250
l0000B250:
	v4 = r29 - 8<i32>
	Mem0[v4:word32] = r30
	Mem0[v4 + 4<i32>:word32] = r31
	r30 = v4
	r29 = v4 - 16<i32>
	Mem0[r29 - 16<i32>:word64] = r17_r16
	r2 = 0x0002B110<p32>
	Mem0[r29:word64] = r19_r18
	r18 = 0<32>
	r17_r16 = r0_r1
	r19 = Mem0[r2 - 64<i32>:word32]
	r1 = Mem0[r19:word32]
	r0 = r17
	call fn00009590 (retsize: 0;)
	branch p0 l0000B28C
	// succ:  l0000B278 l0000B28C
l0000B278:
	p0 = r0 == 0<32>
	r18 = r18
	r19 = r19 + 4<32>
	r0 = 0xFFFFFFFF<32>
	p0 = r18 > 0x72<32>
	goto l0000B290
	// succ:  l0000B290
l0000B28C:
	Mem0[r16:word32] = r18
	r0 = 0<32>
	// succ:  l0000B290
l0000B290:
	r19_r18 = Mem0[r29:word64]
	r17_r16 = Mem0[r29 + 8<i32>:word64]
	v19 = r30
	r31 = Mem0[v19 + 4<i32>:word32]
	r30 = Mem0[v19:word32]
	r29 = v19 + 8<i32>
	return
	// succ:  hexagon_nn_op_name_to_id_exit
hexagon_nn_op_name_to_id_exit:


// hexagon_nn_op_id_to_name
// Return size: 0
define hexagon_nn_op_id_to_name
hexagon_nn_op_id_to_name_entry:
	r29 = fp
	// succ:  l0000B298
l0000B298:
	v4 = r29 - 8<i32>
	Mem0[v4:word32] = r30
	Mem0[v4 + 4<i32>:word32] = r31
	r30 = v4
	r29 = v4 - 16<i32>
	Mem0[r29 - 16<i32>:word64] = r17_r16
	p0 = r0 >u 0x72<32>
	Mem0[r29:word64] = r19_r18
	r18 = r2
	r17_r16 = SEQ(r1, 0xFFFFFFFF<32>)
	branch p0 l0000B2DC
	// succ:  l0000B2AC l0000B2DC
l0000B2AC:
	r2 = 0x0002B110<p32>
	r2 = Mem0[r2 - 64<i32>:word32]
	r19 = Mem0[r14 + r0 * 4<32>:word32]
	r0 = r19
	call fn00009570 (retsize: 0;)
	branch r2 >u r18 l0000B2DC
	// succ:  l0000B2D4 l0000B2DC
l0000B2D4:
	r2 = r0 + 1<32>
	r16 = 0<32>
	r1_r0 = r19_r17
	// succ:  l0000B2DC
l0000B2DC:
	r19_r18 = Mem0[r29:word64]
	r17_r16 = Mem0[r29 + 8<i32>:word64]
	r0 = r16
	v21 = r30
	r31 = Mem0[v21 + 4<i32>:word32]
	r30 = Mem0[v21:word32]
	r29 = v21 + 8<i32>
	return
	// succ:  hexagon_nn_op_id_to_name_exit
hexagon_nn_op_id_to_name_exit:


// hexagon_nn_disable_dcvs
// Return size: 0
define hexagon_nn_disable_dcvs
hexagon_nn_disable_dcvs_entry:
	r29 = fp
	// succ:  l0000B2E8
l0000B2E8:
	v4 = r29 - 8<i32>
	Mem0[v4:word32] = r30
	Mem0[v4 + 4<i32>:word32] = r31
	r30 = v4
	r29 = v4 - 40<i32>
	r7 = 5<32>
	r0 = 0<32>
	Mem0[r29:byte] = r7
	r2 = r29 + 0<32>
	r1 = r29 + 0<32>
	Mem0[r2 + 264<i32>:word16] = 0<16>
	call fn000095B0 (retsize: 0;)
	v11 = r30
	r31 = Mem0[v11 + 4<i32>:word32]
	r30 = Mem0[v11:word32]
	r29 = v11 + 8<i32>
	return
	// succ:  hexagon_nn_disable_dcvs_exit
hexagon_nn_disable_dcvs_exit:


// hexagon_nn_set_powersave_level
// Return size: 0
define hexagon_nn_set_powersave_level
hexagon_nn_set_powersave_level_entry:
	r29 = fp
	// succ:  l0000B310
l0000B310:
	v4 = r29 - 8<i32>
	Mem0[v4:word32] = r30
	Mem0[v4 + 4<i32>:word32] = r31
	r30 = v4
	r29 = v4 - 40<i32>
	r2 = 0<32>
	branch p0 l0000B33C
	// succ:  l0000B318 l0000B33C
l0000B318:
	p0 = r0 == 0<32>
	Mem0[r29:byte] = r7
	r0 = 0<32>
	r2 = r29 + 0<32>
	r7 = 5<32>
	Mem0[r2 + 264<i32>:word16] = 0<16>
	r1 = r29 + 0<32>
	r2 = r0
	// succ:  l0000B33C
l0000B33C:
	v12 = r30
	r31 = Mem0[v12 + 4<i32>:word32]
	r30 = Mem0[v12:word32]
	r29 = v12 + 8<i32>
	return
	// succ:  hexagon_nn_set_powersave_level_exit
hexagon_nn_set_powersave_level_exit:


// hexagon_nn_config
// Return size: 0
define hexagon_nn_config
hexagon_nn_config_entry:
	r29 = fp
	// succ:  l0000B340
l0000B340:
	r1 = 0<32>
	r0 = 0x1000000<32>
	r3_r2 = 0xFFFFFFFFFFFFFFFF<64>
	v7 = r29 - 8<i32>
	Mem0[v7:word32] = r30
	Mem0[v7 + 4<i32>:word32] = r31
	r30 = v7
	r29 = v7 - 0<i32>
	call fn000095C0 (retsize: 0;)
	v10 = r30
	r31 = Mem0[v10 + 4<i32>:word32]
	r30 = Mem0[v10:word32]
	r29 = v10 + 8<i32>
	return
	// succ:  hexagon_nn_config_exit
hexagon_nn_config_exit:


// logv
// Return size: 0
define logv
logv_entry:
	r29 = fp
	// succ:  l0000B360
l0000B360:
	v4 = r29 - 8<i32>
	Mem0[v4:word32] = r30
	Mem0[v4 + 4<i32>:word32] = r31
	r30 = v4
	r29 = v4 - 40<i32>
	Mem0[r29 - 16<i32>:word64] = r17_r16
	r16 = r2
	Mem0[r29 + 8<i32>:word64] = r23_r22
	r22 = Mem0[r16 + 64<i32>:word32]
	r2 = 0x0002540A<p32>
	r7 = Mem0[r16 + 28<i32>:word32]
	r17 = Mem0[r16 + 24<i32>:word32]
	Mem0[r29 + 4<i32>:word32] = r1
	Mem0[r29 + 16<i32>:word64] = r21_r20
	r20 = r5
	r3 = r17 + r22
	r21 = r7 - r22
	Mem0[r29:word32] = r0
	Mem0[r29 + 24<i32>:word64] = r19_r18
	r1_r0 = r21_r3
	r19 = r4
	call fn000095D0 (retsize: 0;)
	branch r21 >u r18 l0000B3E8
	// succ:  l0000B3AC l0000B3E8
l0000B3AC:
	r18 = r0
	r3_r2 = r20_r19
	r1_r0 = r21_r17
	call fn000095E0 (retsize: 0;)
	r0 = r0 + (r18 + r22)
	branch r21 >u r19 l0000B3E8
	// succ:  l0000B3C8 l0000B3E8
l0000B3C8:
	r19 = r0
	r3 = r18 + r22
	r20 = r21 - r19
	r2 = 0x0000B3D5<p32>
	r17 = r17 + (r19 + r3)
	r1_r0 = r20_r17
	call fn000095D0 (retsize: 0;)
	r0 = r0 + (r19 + r18)
	Mem0[r16 + 64<i32>:word32] = Mem0[r16 + 64<i32>:word32] + r0
	// succ:  l0000B3E8
l0000B3E8:
	r19_r18 = Mem0[r29 + 24<i32>:word64]
	r17_r16 = Mem0[r29 + 32<i32>:word64]
	r23_r22 = Mem0[r29 + 8<i32>:word64]
	r21_r20 = Mem0[r29 + 16<i32>:word64]
	v32 = r30
	r31 = Mem0[v32 + 4<i32>:word32]
	r30 = Mem0[v32:word32]
	r29 = v32 + 8<i32>
	return
	// succ:  logv_exit
logv_exit:


// alloc_node
// Return size: 0
define alloc_node
alloc_node_entry:
	r29 = fp
	// succ:  l0000B400
l0000B400:
	v4 = r29 - 8<i32>
	Mem0[v4:word32] = r30
	Mem0[v4 + 4<i32>:word32] = r31
	r30 = v4
	r29 = v4 - 16<i32>
	Mem0[r29 - 24<i32>:word64] = r19_r18
	r0 = 0x38<32>
	r18 = r0
	Mem0[r29 + 8<i32>:word64] = r17_r16
	r17_r16 = r1_r2
	call fn00009500 (retsize: 0;)
	Mem0[r0 + 28<i32>:word32] = r18
	branch p0 l0000B444
	// succ:  l0000B420 l0000B444
l0000B420:
	p0 = r0 == 0<32>
	r2 = 0x0002B110<p32>
	r2 = Mem0[r2 - 16<i32>:word32]
	Mem0[r0 + 32<i32>:byte] = r16
	r2 = Mem0[r7 + r17 * 4<32>:word32]
	Mem0[r0 + 24<i32>:word32] = r17
	Mem0[r0:word32] = r2
	Mem0[r0 + 52<i32>:word32] = 0<32>
	Mem0[r0 + 44<i32>:word32] = 0<32>
	Mem0[r0 + 40<i32>:word32] = 0<32>
	Mem0[r0 + 48<i32>:word32] = 0<32>
	// succ:  l0000B444
l0000B444:
	r19_r18 = Mem0[r29:word64]
	r17_r16 = Mem0[r29 + 8<i32>:word64]
	v19 = r30
	r31 = Mem0[v19 + 4<i32>:word32]
	r30 = Mem0[v19:word32]
	r29 = v19 + 8<i32>
	return
	// succ:  alloc_node_exit
alloc_node_exit:


// node_alloc_common
// Return size: 0
define node_alloc_common
node_alloc_common_entry:
	r29 = fp
	// succ:  l0000B44C
l0000B44C:
	v4 = r29 - 8<i32>
	Mem0[v4:word32] = r30
	Mem0[v4 + 4<i32>:word32] = r31
	r30 = v4
	r29 = v4 - 56<i32>
	Mem0[r29 - 16<i32>:word64] = r17_r16
	r0 = 0x38<32>
	r16 = r0
	Mem0[r29 + 32<i32>:word64] = r21_r20
	Mem0[r29 + 40<i32>:word64] = r19_r18
	Mem0[r29 + 24<i32>:word64] = r23_r22
	r22 = r1
	r19_r18 = r4_r5
	r21_r20 = r2_r3
	call fn00009500 (retsize: 0;)
	branch r17 == 0<32> l0000B5E0
	// succ:  l0000B47C l0000B5E0
l0000B47C:
	r17 = r0
	r1 = 0xA0<32>
	r2 = 0x0000B494<p32>
	Mem0[r17 + 28<i32>:word32] = r22
	p0 = r19 == 0<32>
	r2 = Mem0[r2 - 16<i32>:word32]
	r2 = Mem0[r15 + r21 * 4<32>:word32]
	Mem0[r17 + 24<i32>:word32] = r21
	Mem0[r17:word32] = r2
	r21 = Mem0[r29 + 68<i32>:word32]
	Mem0[r17 + 44<i32>:word32] = 0xFFFFFF80<32>
	Mem0[r17 + 32<i32>:byte] = r20
	Mem0[r17 + 16<i32>:word32] = r19
	Mem0[r17 + 48<i32>:word32] = 0<32>
	Mem0[r17 + 52<i32>:word32] = 0<32>
	Mem0[r17 + 40<i32>:word32] = 0<32>
	branch p0 l0000B4B8
	// succ:  l0000B4B0 l0000B4B8
l0000B4B0:
	Mem0[r17 + 12<i32>:word32] = 0<32>
	Mem0[r17 + 4<i32>:word32] = 0<32>
	goto l0000B538
	// succ:  l0000B538
l0000B4B8:
	call fn00009500 (retsize: 0;)
	r0 = r19 << 3<32>
	Mem0[r17 + 3<i32>:byte] = r20
	r20 = r0
	r1 = 0x57<32>
	r3 = 0x000254EA<p32>
	r2 = r16
	call errlog_function (retsize: 0;)
	r1 = 0xA4<32>
	goto l0000B5EC
	// succ:  l0000B5EC
l0000B538:
	Mem0[r17 + 20<i32>:word32] = r18
	r1_r0 = 0<64>
	p0 = r18 == 0<32>
	Mem0[r29 + 8<i32>:word64] = r1_r0
	Mem0[r29 + 16<i32>:word64] = r1_r0
	branch p0 l0000B550
	// succ:  l0000B548 l0000B550
l0000B548:
	Mem0[r17 + 8<i32>:word32] = 0<32>
	goto l0000B5D0
	// succ:  l0000B5D0
l0000B550:
	call fn00009500 (retsize: 0;)
	r0 = r18 << 2<32>
	Mem0[r17 + 2<i32>:byte] = r19
	r19 = r0
	r1 = 0x84<32>
	r22 = 0<32>
	r20 = 0<32>
	// succ:  l0000B56C
l0000B56C:
	r0 = r29 + 8<32>
	r1 = 0<32>
	call tensor_alloc (retsize: 0;)
	Mem0[r19:word32] = r0
	r1 = 0x8D<32>
	branch p0 l0000B5AC
	// succ:  l0000B580 l0000B5AC
l0000B580:
	p0 = r0 == 0<32>
	// succ:  l0000B594
l0000B594:
	r2 = r16
	call errlog_function (retsize: 0;)
	r1 = 0xA8<32>
	goto l0000B5EC
	// succ:  l0000B5EC
l0000B5AC:
	r21 = r21 + 8<i32>
	r3 = Mem0[r21:word32]
	r2 = Mem0[r17 + 8<i32>:word32]
	r19 = r19 + 4<32>
	r22 = r22 + 1<32>
	p0 = r18 >u r22
	r2 = Mem0[r13 + r20:word32]
	r20 = r20 + 4<32>
	Mem0[r2 + 20<i32>:word32] = r3
	branch p0 l0000B56C
	// succ:  l0000B5D0 l0000B56C
l0000B5D0:
	r19_r18 = Mem0[r29 + 40<i32>:word64]
	r17_r16 = Mem0[r29 + 48<i32>:word64]
	r0 = r17
	r23_r22 = Mem0[r29 + 24<i32>:word64]
	r21_r20 = Mem0[r29 + 32<i32>:word64]
	v30 = r30
	r31 = Mem0[v30 + 4<i32>:word32]
	r30 = Mem0[v30:word32]
	r29 = v30 + 8<i32>
	return
	// succ:  node_alloc_common_exit
l0000B5E0:
	Mem0[r29:word32] = r22
	r3 = 0x00025429<p32>
	// succ:  l0000B5EC
l0000B5EC:
	r2 = r16
	r17 = 0<32>
	call errlog_function (retsize: 0;)
	goto l0000B5D0
	// succ:  l0000B5D0
node_alloc_common_exit:


// errlog_function
// Return size: 0
define errlog_function
errlog_function_entry:
	r29 = fp
	// succ:  l0000B604
l0000B604:
	v4 = r29 - 8<i32>
	Mem0[v4:word32] = r30
	Mem0[v4 + 4<i32>:word32] = r31
	r30 = v4
	r29 = v4 - 8<i32>
	r4 = r3
	r0 = 0x00025413<p32>
	Mem0[r29 + 1<i32>:byte] = r6
	r6 = r29 + 0x10<32>
	r5 = r29 + 0x10<32>
	r3 = 0<32>
	v13 = r30
	r31 = Mem0[v13 + 4<i32>:word32]
	r30 = Mem0[v13:word32]
	r29 = v13 + 8<i32>
	return
	// succ:  errlog_function_exit
errlog_function_exit:


// node_free_common
// Return size: 0
define node_free_common
node_free_common_entry:
	r29 = fp
	// succ:  l0000B628
l0000B628:
	v4 = r29 - 8<i32>
	Mem0[v4:word32] = r30
	Mem0[v4 + 4<i32>:word32] = r31
	r30 = v4
	r29 = v4 - 24<i32>
	Mem0[r29 - 16<i32>:word64] = r17_r16
	r16 = r0
	r2 = r1
	Mem0[r29:word32] = r16
	Mem0[r29 + 8<i32>:word64] = r19_r18
	call logmsg_function (retsize: 0;)
	branch r0 == 0<32> l0000B648
	// succ:  l0000B648 l0000B648
l0000B648:
	r0 = Mem0[r16 + 4<i32>:word32]
	branch r0 == 0<32> l0000B654
	// succ:  l0000B654 l0000B654
l0000B654:
	r0 = Mem0[r16 + 12<i32>:word32]
	branch r2 == 0<32> l0000B684
	// succ:  l0000B660 l0000B684
l0000B660:
	r2 = Mem0[r16 + 20<i32>:word32]
	r2 = Mem0[r16 + 8<i32>:word32]
	r2 = Mem0[r13 + r17:word32]
	Mem0[r2 + 16<i32>:word32] = 0<32>
	r2 = Mem0[r16 + 8<i32>:word32]
	r0 = Mem0[r13 + r17:word32]
	call tensor_free (retsize: 0;)
	r2 = Mem0[r16 + 20<i32>:word32]
	r17 = r17 + 4<32>
	branch r2 >u r18 l0000B660
	goto l0000B688
	// succ:  l0000B688 l0000B660
l0000B684:
	branch r0 == 0<32> l0000B690
	goto l0000B690
	// succ:  l0000B690 l0000B690
l0000B688:
	r18 = r18 + 1<32>
	branch r0 == 0<32> l0000B694
	// succ:  l0000B690 l0000B694
l0000B690:
	r0 = r16
	call fn00009510 (retsize: 0;)
	goto l0000B698
	// succ:  l0000B698
l0000B694:
	r0 = r16
	// succ:  l0000B698
l0000B698:
	r19_r18 = Mem0[r29 + 8<i32>:word64]
	r17_r16 = Mem0[r29 + 16<i32>:word64]
	r0 = 0<32>
	v16 = r30
	r31 = Mem0[v16 + 4<i32>:word32]
	r30 = Mem0[v16:word32]
	r29 = v16 + 8<i32>
	return
	// succ:  node_free_common_exit
node_free_common_exit:


// logmsg_function
// Return size: 0
define logmsg_function
logmsg_function_entry:
	r29 = fp
	// succ:  l0000B6A4
l0000B6A4:
	v4 = r29 - 8<i32>
	Mem0[v4:word32] = r30
	Mem0[v4 + 4<i32>:word32] = r31
	r30 = v4
	r29 = v4 - 8<i32>
	r4 = 3<32>
	branch r4 >u r3 l0000B6D4
	// succ:  l0000B6B4 l0000B6D4
l0000B6B4:
	r3 = Mem0[r2 + 16<i32>:word32]
	r5 = r29 + 0x10<32>
	r3 = 3<32>
	r0 = 0x0000B6D7<p32>
	r6 = r29 + 0x10<32>
	r1 = 0xB0<32>
	r4 = 0x0002546F<p32>
	Mem0[r29 + 4<i32>:word32] = r6
	call logv (retsize: 0;)
	// succ:  l0000B6D4
l0000B6D4:
	v15 = r30
	r31 = Mem0[v15 + 4<i32>:word32]
	r30 = Mem0[v15:word32]
	r29 = v15 + 8<i32>
	return
	// succ:  logmsg_function_exit
logmsg_function_exit:


// do_append_node
// Return size: 0
define do_append_node
do_append_node_entry:
	r29 = fp
	// succ:  l0000B6E0
l0000B6E0:
	v4 = r29 - 8<i32>
	Mem0[v4:word32] = r30
	Mem0[v4 + 4<i32>:word32] = r31
	r30 = v4
	r29 = v4 - 16<i32>
	Mem0[r29 - 16<i32>:word64] = r17_r16
	r6 = 0x0002B110<p32>
	r6 = Mem0[r6 - 16<i32>:word32]
	r17_r16 = r1_r0
	r6 = Mem0[r14 + r2 * 4<32>:word32]
	r7 = Mem0[r29 + 28<i32>:word32]
	Mem0[r29 + 4<i32>:word32] = r7
	r6 = Mem0[r6 + 8<i32>:word32]
	r7 = Mem0[r29 + 24<i32>:word32]
	Mem0[r29:word32] = r7
	call r6 (retsize: 0;)
	Mem0[r29:word32] = r17
	branch p0 l0000B738
	// succ:  l0000B718 l0000B738
l0000B718:
	p0 = r0 == 0<32>
	Mem0[r0 + 36<i32>:word32] = 0xFFFFFF80<32>
	branch r2 == 0<32> l0000B72C
	// succ:  l0000B728 l0000B72C
l0000B728:
	r2 = Mem0[r16:word32]
	r16 = r2 + 0x24<32>
	// succ:  l0000B72C
l0000B72C:
	Mem0[r16:word32] = r0
	r17_r16 = Mem0[r29 + 8<i32>:word64]
	r0 = 0<32>
	v21 = r30
	r31 = Mem0[v21 + 4<i32>:word32]
	r30 = Mem0[v21:word32]
	r29 = v21 + 8<i32>
	return
	// succ:  do_append_node_exit
l0000B738:
	r2 = r16
	r1 = 0xD5<32>
	r3 = 0x0002547F<p32>
	call errlog_function (retsize: 0;)
	r0 = 0xFFFFFFFF<32>
	v20 = r30
	r31 = Mem0[v20 + 4<i32>:word32]
	r30 = Mem0[v20:word32]
	r29 = v20 + 8<i32>
	return
	// succ:  do_append_node_exit
do_append_node_exit:


// do_append_const_node
// Return size: 0
define do_append_const_node
do_append_const_node_entry:
	r29 = fp
	// succ:  l0000B754
l0000B754:
	v4 = r29 - 8<i32>
	Mem0[v4:word32] = r30
	Mem0[v4 + 4<i32>:word32] = r31
	r30 = v4
	r29 = v4 - 16<i32>
	Mem0[r29 - 16<i32>:word64] = r17_r16
	r17_r16 = r1_r0
	r6 = Mem0[r29 + 28<i32>:word32]
	Mem0[r29 + 4<i32>:word32] = r6
	r6 = Mem0[r29 + 24<i32>:word64]
	Mem0[r29:word32] = r6
	call hexagon_nn_const_ctor (retsize: 0;)
	Mem0[r29:word32] = r17
	branch p0 l0000B794
	// succ:  l0000B774 l0000B794
l0000B774:
	p0 = r0 == 0<32>
	Mem0[r0 + 36<i32>:word32] = 0xFFFFFF80<32>
	branch r2 == 0<32> l0000B788
	// succ:  l0000B784 l0000B788
l0000B784:
	r2 = Mem0[r16:word32]
	r16 = r2 + 0x24<32>
	// succ:  l0000B788
l0000B788:
	Mem0[r16:word32] = r0
	r17_r16 = Mem0[r29 + 8<i32>:word64]
	r0 = 0<32>
	v19 = r30
	r31 = Mem0[v19 + 4<i32>:word32]
	r30 = Mem0[v19:word32]
	r29 = v19 + 8<i32>
	return
	// succ:  do_append_const_node_exit
l0000B794:
	r2 = r16
	r1 = 0xFC<32>
	r3 = 0x0002547F<p32>
	call errlog_function (retsize: 0;)
	r0 = 0xFFFFFFFF<32>
	v18 = r30
	r31 = Mem0[v18 + 4<i32>:word32]
	r30 = Mem0[v18:word32]
	r29 = v18 + 8<i32>
	return
	// succ:  do_append_const_node_exit
do_append_const_node_exit:


// do_teardown
// Return size: 0
define do_teardown
do_teardown_entry:
	r29 = fp
	// succ:  l0000B7B0
l0000B7B0:
	v4 = r29 - 8<i32>
	Mem0[v4:word32] = r30
	Mem0[v4 + 4<i32>:word32] = r31
	r30 = v4
	r29 = v4 - 8<i32>
	Mem0[r29 - 16<i32>:word64] = r17_r16
	r16 = r0
	call nn_os_workers_kill (retsize: 0;)
	Mem0[r16 - 28<i32>:byte] = 0<8>
	r2 = Mem0[r16:word32]
	// succ:  l0000B7C4
l0000B7C4:
	r1_r0 = r16_r2
	branch p0 l0000B7FC
	// succ:  l0000B7CC l0000B7FC
l0000B7CC:
	p0 = r2 == 0<32>
	r17 = Mem0[r2 + 4<i32>:word32]
	r3 = Mem0[r2:word32]
	r2 = Mem0[r3 + 12<i32>:word32]
	call r2 (retsize: 0;)
	r2 = r17
	branch p0 l0000B7C4
	// succ:  l0000B7E0 l0000B7C4
l0000B7E0:
	p0 = r0 == 0<32>
	r2 = r16
	r1 = 0x10E<32>
	r3 = 0x00025496<p32>
	call errlog_function (retsize: 0;)
	v18 = r30
	r31 = Mem0[v18 + 4<i32>:word32]
	r30 = Mem0[v18:word32]
	r29 = v18 + 8<i32>
	return
	// succ:  do_teardown_exit
l0000B7FC:
	r0 = r16
	call allocator_teardown (retsize: 0;)
	r0 = Mem0[r16 + 4<i32>:word32]
	call fn00009510 (retsize: 0;)
	r0 = r16
	call fn00009510 (retsize: 0;)
	v19 = r30
	r31 = Mem0[v19 + 4<i32>:word32]
	r30 = Mem0[v19:word32]
	r29 = v19 + 8<i32>
	return
	// succ:  do_teardown_exit
do_teardown_exit:


// do_snpprint
// Return size: 0
define do_snpprint
do_snpprint_entry:
	r29 = fp
	// succ:  l0000B820
l0000B820:
	v4 = r29 - 8<i32>
	Mem0[v4:word32] = r30
	Mem0[v4 + 4<i32>:word32] = r31
	r30 = v4
	r29 = v4 - 64<i32>
	Mem0[r29 - 24<i32>:word64] = r19_r18
	r3 = 0x00025546<p32>
	Mem0[r29 + 40<i32>:word64] = r21_r20
	r18 = r1
	Mem0[r29 + 56<i32>:word64] = r17_r16
	r16 = r0
	r17 = r2 + 0xFFFFFFFF<32>
	r4 = r18 + (r2 + 0x3F<32>)
	Mem0[r4:byte] = 0<32>
	Mem0[r29 + 32<i32>:word64] = r23_r22
	r1_r0 = r17_r18
	r7 = Mem0[r16 + 16<i32>:word32]
	r2 = Mem0[r16 + 12<i32>:word32]
	Mem0[r29:word32] = r16
	Mem0[r29 + 8<i32>:word32] = r7
	Mem0[r29 + 4<i32>:word32] = r2
	r2 = r3
	call fn000095D0 (retsize: 0;)
	r17 = r17 - r0
	branch p0 l0000B990
	// succ:  l0000B85C l0000B990
l0000B85C:
	p0 = r9 == r0
	r20 = Mem0[r16:word32]
	r18 = r18 + r0
	r19 = 0<32>
	// succ:  l0000B864
l0000B864:
	r7 = Mem0[r20 - 32<i32>:byte]
	r8 = Mem0[r20 + 16<i32>:word32]
	r1_r0 = r17_r18
	branch p0 l0000B97C
	// succ:  l0000B874 l0000B97C
l0000B874:
	p0 = r12 == 0<32>
	r5 = Mem0[r20 + 28<i32>:word32]
	r4 = Mem0[r20 + 24<i32>:word32]
	r3 = 0x0002B110<p32>
	r3 = Mem0[r3 - 64<i32>:word32]
	r6 = 0x0002B688<p32>
	r9 = Mem0[r20 + 20<i32>:word32]
	r2 = 0x00025568<p32>
	Mem0[r29 + 7<i32>:byte] = r6
	r6 = Mem0[r6 + r7 * 4<32>:word32]
	Mem0[r29 + 24<i32>:word32] = r7
	Mem0[r29 + 16<i32>:word32] = r8
	Mem0[r29 + 20<i32>:word32] = r9
	Mem0[r29 + 8<i32>:word32] = r4
	Mem0[r29 + 12<i32>:word32] = r3
	Mem0[r29:word32] = r20
	Mem0[r29 + 4<i32>:word32] = r5
	call fn000095D0 (retsize: 0;)
	r17 = r17 - r0
	branch p0 l0000B990
	// succ:  l0000B8C8 l0000B990
l0000B8C8:
	p0 = r9 == r0
	branch r2 == 0<32> l0000B974
	// succ:  l0000B8D8 l0000B974
l0000B8D8:
	r2 = Mem0[r16 + 16<i32>:word32]
	r18 = r18 + r0
	branch r2 == 0<32> l0000B938
	// succ:  l0000B8E0 l0000B938
l0000B8E0:
	r3 = Mem0[r20 + 12<i32>:word32]
	r4 = Mem0[r20 + 4<i32>:word32]
	r2 = 0x000255B2<p32>
	r4 = Mem0[r13 + r22:word32]
	r3 = Mem0[r21 + r21:word32]
	r5 = r3 + r21
	r1_r0 = r17_r18
	Mem0[r29 + 12<i32>:word32] = r3
	r5 = Mem0[r5 - 4<i32>:word32]
	Mem0[r29 + 4<i32>:word32] = r4
	Mem0[r29 + 8<i32>:word32] = r5
	Mem0[r29:word32] = r23
	call fn000095D0 (retsize: 0;)
	r17 = r17 - r0
	branch p0 l0000B990
	// succ:  l0000B918 l0000B990
l0000B918:
	p0 = r9 == r0
	r2 = Mem0[r20 + 16<i32>:word32]
	r21 = r21 + 8<32>
	r18 = r18 + r0
	r22 = r22 + 4<32>
	branch r2 >u r23 l0000B8E0
	// succ:  l0000B930 l0000B8E0
l0000B930:
	r23 = r23 + 1<32>
	branch r2 == 0<32> l0000B978
	// succ:  l0000B938 l0000B978
l0000B938:
	branch r2 == 0<32> l0000B978
	// succ:  l0000B940 l0000B978
l0000B940:
	r3 = Mem0[r20 + 8<i32>:word32]
	r1_r0 = r17_r18
	r2 = 0x000255DC<p32>
	r3 = Mem0[r29 + r21:word32]
	Mem0[r29:word32] = r22
	Mem0[r29 + 4<i32>:word32] = r3
	call fn000095D0 (retsize: 0;)
	r17 = r17 - r0
	branch p0 l0000B990
	// succ:  l0000B964 l0000B990
l0000B964:
	p0 = r9 == r0
	r2 = Mem0[r20 + 20<i32>:word32]
	r21 = r21 + 4<32>
	r18 = r18 + r0
	branch r2 >u r22 l0000B940
	goto l0000B978
	// succ:  l0000B978 l0000B940
l0000B974:
	r20 = Mem0[r20 + 4<i32>:word32]
	r19 = r19
	goto l0000B864
	// succ:  l0000B864
l0000B978:
	r22 = r22 + 1<32>
	r20 = Mem0[r20 + 4<i32>:word32]
	r19 = r19
	// succ:  l0000B97C
l0000B97C:
	Mem0[r29:word32] = r19
	r1_r0 = r17_r18
	r2 = 0x000255F0<p32>
	call fn000095D0 (retsize: 0;)
	// succ:  l0000B990
l0000B990:
	r19_r18 = Mem0[r29 + 48<i32>:word64]
	r17_r16 = Mem0[r29 + 56<i32>:word64]
	r23_r22 = Mem0[r29 + 32<i32>:word64]
	r21_r20 = Mem0[r29 + 40<i32>:word64]
	v35 = r30
	r31 = Mem0[v35 + 4<i32>:word32]
	r30 = Mem0[v35:word32]
	r29 = v35 + 8<i32>
	return
	// succ:  do_snpprint_exit
do_snpprint_exit:


// const_depth_extend_8
// Return size: 0
define const_depth_extend_8
const_depth_extend_8_entry:
	r29 = fp
	// succ:  l0000B9A0
l0000B9A0:
	v4 = r29 - 8<i32>
	Mem0[v4:word32] = r30
	Mem0[v4 + 4<i32>:word32] = r31
	r30 = v4
	r29 = v4 - 48<i32>
	Mem0[r29 - 16<i32>:word64] = r17_r16
	r17_r16 = r1_r0
	Mem0[r29 + 16<i32>:word64] = r23_r22
	r3 = Mem0[r16 + 8<i32>:word32]
	Mem0[r29 + 24<i32>:word64] = r21_r20
	r21 = r2
	Mem0[r29 + 32<i32>:word64] = r19_r18
	Mem0[r29 + 8<i32>:word64] = r25_r24
	r23 = Mem0[r3:word32]
	Mem0[r29:word64] = r27_r26
	r7 = Mem0[r23 + 8<i32>:word32]
	r2 = Mem0[r23:word32]
	r18 = Mem0[r23 + 12<i32>:word32]
	r4 = Mem0[r23 + 4<i32>:word32]
	r19 = Mem0[r23 + 16<i32>:word32]
	r24 = r18 + r17
	r2 = r7 * r2
	r25 = r2 * r4
	call fn00009500 (retsize: 0;)
	r0 = 0x80<32> + r24 * r25
	branch r20 == 0<32> l0000BA4C
	// succ:  l0000B9F4 l0000BA4C
l0000B9F4:
	r20 = r0
	r2 = 0xFFFFFFFF<32>
	p0 = r25 > 0<32>
	r26 = r25
	r21 = r21 & 0xFF<32>
	r22 = r20
	// succ:  l0000BA00
l0000BA00:
	r1_r0 = r19_r22
	r2 = r18
	call fn00009560 (retsize: 0;)
	r19 = r19 + r18
	r2 = r17
	r1 = r21
	r0 = r22 + r18
	r22 = r22 + r24
	call fn000095F0 (retsize: 0;)
	branch r26 == 0<32> l0000BA00
	// succ:  l0000BA2C l0000BA00
l0000BA2C:
	r26 = r26 + 0xFFFFFFFF<32>
	r0 = Mem0[r23 + 16<i32>:word32]
	call fn00009514 (retsize: 0;)
	Mem0[r23 + 12<i32>:word32] = r24
	Mem0[r23 + 16<i32>:word32] = r20
	r2 = 0<32>
	r3 = Mem0[r16 + 8<i32>:word32]
	r3 = Mem0[r3:word32]
	Mem0[r3 + 20<i32>:word32] = r17
	// succ:  l0000BA4C
l0000BA4C:
	r19_r18 = Mem0[r29 + 32<i32>:word64]
	r17_r16 = Mem0[r29 + 40<i32>:word64]
	r0 = r2
	r23_r22 = Mem0[r29 + 16<i32>:word64]
	r21_r20 = Mem0[r29 + 24<i32>:word64]
	r27_r26 = Mem0[r29:word64]
	r25_r24 = Mem0[r29 + 8<i32>:word64]
	v33 = r30
	r31 = Mem0[v33 + 4<i32>:word32]
	r30 = Mem0[v33:word32]
	r29 = v33 + 8<i32>
	return
	// succ:  const_depth_extend_8_exit
const_depth_extend_8_exit:


// const_width_extend_8
// Return size: 0
define const_width_extend_8
const_width_extend_8_entry:
	r29 = fp
	// succ:  l0000BA64
l0000BA64:
	v4 = r29 - 8<i32>
	Mem0[v4:word32] = r30
	Mem0[v4 + 4<i32>:word32] = r31
	r30 = v4
	r29 = v4 - 56<i32>
	Mem0[r29 - 56<i32>:word64] = r27_r26
	r27 = r0
	Mem0[r29 + 24<i32>:word64] = r23_r22
	r3 = Mem0[r27 + 8<i32>:word32]
	r22 = r2
	Mem0[r29 + 40<i32>:word64] = r19_r18
	r19 = r1
	Mem0[r29 + 48<i32>:word64] = r17_r16
	Mem0[r29 + 32<i32>:word64] = r21_r20
	r23 = Mem0[r3:word32]
	Mem0[r29 + 16<i32>:word64] = r25_r24
	r16 = Mem0[r23:word32]
	r21 = Mem0[r23 + 8<i32>:word32]
	r26 = Mem0[r23 + 12<i32>:word32]
	r20 = Mem0[r23 + 4<i32>:word32]
	r24 = r21 + r19
	r17 = Mem0[r23 + 16<i32>:word32]
	r3 = r24 * r16
	r25 = r3 * r20
	call fn00009500 (retsize: 0;)
	r0 = 0x80<32> + r25 * r26
	branch r18 == 0<32> l0000BB28
	// succ:  l0000BAC4 l0000BB28
l0000BAC4:
	r18 = r0
	r2 = 0xFFFFFFFF<32>
	branch r27 > 0<32> l0000BB04
	// succ:  l0000BAD4 l0000BB04
l0000BAD4:
	r27 = r20 * r16
	r19 = r26 * r19
	r22 = r22 & 0xFF<32>
	r20 = r18
	r21 = r26 * r21
	// succ:  l0000BADC
l0000BADC:
	r1_r0 = r17_r20
	r2 = r21
	call fn00009560 (retsize: 0;)
	r17 = r17 + r21
	r2 = r19
	r1 = r22
	r0 = r20 + r21
	r20 = r20 + r16
	call fn000095F0 (retsize: 0;)
	branch r27 == 0<32> l0000BADC
	goto l0000BB08
	// succ:  l0000BB08 l0000BADC
l0000BB04:
	r0 = Mem0[r23 + 16<i32>:word32]
	call fn00009510 (retsize: 0;)
	r16 = r25 * r26
	goto l0000BB10
	// succ:  l0000BB10
l0000BB08:
	r27 = r27 + 0xFFFFFFFF<32>
	r0 = Mem0[r23 + 16<i32>:word32]
	call fn00009514 (retsize: 0;)
	// succ:  l0000BB10
l0000BB10:
	Mem0[r23 + 16<i32>:word32] = r18
	r3 = Mem0[r29 + 4<i32>:word64]
	r2 = 0<32>
	Mem0[r23 + 8<i32>:word32] = r24
	r3 = Mem0[r3 + 8<i32>:word32]
	r3 = Mem0[r3:word32]
	Mem0[r3 + 20<i32>:word32] = r16
	// succ:  l0000BB28
l0000BB28:
	r19_r18 = Mem0[r29 + 40<i32>:word64]
	r17_r16 = Mem0[r29 + 48<i32>:word64]
	r0 = r2
	r23_r22 = Mem0[r29 + 24<i32>:word64]
	r21_r20 = Mem0[r29 + 32<i32>:word64]
	r27_r26 = Mem0[r29 + 8<i32>:word64]
	r25_r24 = Mem0[r29 + 16<i32>:word64]
	v31 = r30
	r31 = Mem0[v31 + 4<i32>:word32]
	r30 = Mem0[v31:word32]
	r29 = v31 + 8<i32>
	return
	// succ:  const_width_extend_8_exit
const_width_extend_8_exit:


// check_same_inputs
// Return size: 0
define check_same_inputs
check_same_inputs_entry:
	r29 = fp
	// succ:  l0000BB40
l0000BB40:
	branch r3 >u r4 l0000BB90
	// succ:  l0000BB4C l0000BB90
l0000BB4C:
	r4 = Mem0[r1 + 16<i32>:word32]
	branch r3 >u r4 l0000BB94
	// succ:  l0000BB58 l0000BB94
l0000BB58:
	r4 = Mem0[r2 + 16<i32>:word32]
	return
	// succ:  check_same_inputs_exit
l0000BB90:
	r0 = 0xFFFFFFFF<32>
	// succ:  l0000BB94
l0000BB94:
	return
	// succ:  check_same_inputs_exit
check_same_inputs_exit:


// try_pad_bad_supernodes
// Return size: 0
define try_pad_bad_supernodes
try_pad_bad_supernodes_entry:
	r29 = fp
	// succ:  l0000BB98
l0000BB98:
	v4 = r29 - 8<i32>
	Mem0[v4:word32] = r30
	Mem0[v4 + 4<i32>:word32] = r31
	r30 = v4
	r29 = v4 - 96<i32>
	Mem0[r29 - 16<i32>:word64] = r17_r16
	r16 = Mem0[r1:word32]
	r17 = r0
	Mem0[r29 + 72<i32>:word64] = r21_r20
	Mem0[r29 + 80<i32>:word64] = r19_r18
	r19 = 0<32>
	r2 = Mem0[r16 + 24<i32>:word32]
	Mem0[r29 + 56<i32>:word64] = r25_r24
	Mem0[r29 + 64<i32>:word64] = r23_r22
	r1_r0 = r16_r17
	p0 = r2 == 0x31<32>
	Mem0[r29 + 48<i32>:word64] = r27_r26
	branch p0 l0000BECC
	// succ:  l0000BBC4 l0000BECC
l0000BBC4:
	call find_first_consumer.1.2_i32_0 (retsize: 0;)
	branch r18 == r16 l0000BECC
	// succ:  l0000BBD4 l0000BECC
l0000BBD4:
	r18 = r0
	branch r2 == 0<32> l0000BC14
	// succ:  l0000BBDC l0000BC14
l0000BBDC:
	r19 = 0<32>
	// succ:  l0000BBE0
l0000BBE0:
	branch r2 >u r20 l0000BC10
	// succ:  l0000BBEC l0000BC10
l0000BBEC:
	r20 = r20 + 1<32>
	r1_r0 = r16_r17
	r2 = r20
	r1_r0 = r16_r17
	r2 = r20 + 0<32>
	branch p0 l0000BECC
	// succ:  l0000BC00 l0000BECC
l0000BC00:
	p0 = r0 == r10
	call find_last_consumer (retsize: 0;)
	r2 = Mem0[r16 + 20<i32>:word32]
	branch p0 l0000BBE0
	// succ:  l0000BC0C l0000BBE0
l0000BC0C:
	p0 = r0 == r10
	goto l0000BECC
	// succ:  l0000BECC
l0000BC10:
	r2 = Mem0[r18 + 24<i32>:word32]
	r19 = 0<32>
	// succ:  l0000BC14
l0000BC14:
	p0 = r2 == 0x31<32>
	branch p0 l0000BECC
	// succ:  l0000BC1C l0000BECC
l0000BC1C:
	branch r2 == 0<32> l0000BECC
	// succ:  l0000BC28 l0000BECC
l0000BC28:
	r2 = Mem0[r17:word32]
	r3 = Mem0[r4 + 56<i32>:word32]
	goto l0000BC38
	// succ:  l0000BC38
l0000BC30:
	branch r5 == 0<32> l0000BECC
l0000BC34:
	branch r5 == 0<32> l0000BED0
	// succ:  l0000BC3C l0000BECC l0000BED0
l0000BC38:
	branch r6 == r3 l0000BC30
	goto l0000BC44
	// succ:  l0000BC44 l0000BC30
l0000BC3C:
	r5 = Mem0[r5 + 36<i32>:word32]
	branch r6 == r3 l0000BC34
	// succ:  l0000BC44 l0000BC34
l0000BC44:
	r6 = Mem0[r5 + 28<i32>:word32]
	r5 = Mem0[r5:word32]
	r24 = Mem0[r5 + 12<i32>:word32]
	r26 = r2 + 0<32>
	r5 = r24 + 0x1F<32>
	branch p0 l0000BECC
	// succ:  l0000BC5C l0000BECC
l0000BC5C:
	p0 = __bitsclr(r24, 0x1F<32>)
	r4 = Mem0[r4 + 8<i32>:word32]
	r22 = r5 & 0xFFFFFFE0<32>
	r20 = r22 - r24
	goto l0000BC74
	// succ:  l0000BC74
l0000BC6C:
	branch r26 == 0<32> l0000BECC
l0000BC70:
	branch r26 == 0<32> l0000BED0
	// succ:  l0000BC78 l0000BECC l0000BED0
l0000BC74:
	branch r5 == r4 l0000BC6C
	goto l0000BC80
	// succ:  l0000BC80 l0000BC6C
l0000BC78:
	r26 = Mem0[r26 + 36<i32>:word32]
	branch r5 == r4 l0000BC70
	// succ:  l0000BC80 l0000BC70
l0000BC80:
	r5 = Mem0[r26 + 28<i32>:word32]
	r25 = r2
	branch r25 == 0<32> l0000BECC
l0000BC88:
	branch r25 == 0<32> l0000BED0
	// succ:  l0000BC90 l0000BECC l0000BED0
l0000BC90:
	r25 = Mem0[r25 + 36<i32>:word32]
	branch r4 == r3 l0000BC88
	// succ:  l0000BC98 l0000BC88
l0000BC98:
	r4 = Mem0[r3 + 8<i32>:word32]
	goto l0000BCA8
	// succ:  l0000BCA8
l0000BCA0:
	branch r21 == 0<32> l0000BECC
l0000BCA4:
	branch r21 == 0<32> l0000BED0
	// succ:  l0000BCAC l0000BECC l0000BED0
l0000BCA8:
	branch r5 == r4 l0000BCA0
	goto l0000BCB4
	// succ:  l0000BCB4 l0000BCA0
l0000BCAC:
	r21 = Mem0[r21 + 36<i32>:word32]
	branch r5 == r4 l0000BCA4
	// succ:  l0000BCB4 l0000BCA4
l0000BCB4:
	r5 = Mem0[r21 + 28<i32>:word32]
	r5 = Mem0[r3 + 32<i32>:word32]
	branch r4 == 0<32> l0000BECC
l0000BCBC:
	branch r4 == 0<32> l0000BED0
	// succ:  l0000BCC4 l0000BECC l0000BED0
l0000BCC4:
	r4 = Mem0[r4 + 36<i32>:word32]
	branch r6 == r5 l0000BCBC
	// succ:  l0000BCCC l0000BCBC
l0000BCCC:
	r3 = Mem0[r3 + 40<i32>:word32]
	branch r2 == 0<32> l0000BECC
l0000BCD4:
	branch r2 == 0<32> l0000BED0
	// succ:  l0000BCDC l0000BECC l0000BED0
l0000BCDC:
	r2 = Mem0[r2 + 36<i32>:word32]
	branch r5 == r3 l0000BCD4
	// succ:  l0000BCE4 l0000BCD4
l0000BCE4:
	r2 = Mem0[r2 + 8<i32>:word32]
	r3 = Mem0[r4 + 8<i32>:word32]
	r0 = 0x17<32>
	r3 = Mem0[r3:word32]
	r2 = Mem0[r2:word32]
	r3 = Mem0[r3 + 16<i32>:word32]
	r2 = Mem0[r2 + 16<i32>:word32]
	r19 = Mem0[r3:word32]
	r2 = Mem0[r2:word32]
	call fn00009600 (retsize: 0;)
	r1 = r2 - r19
	r2 = 0x437F0000<32>
	r1_r0 = r0_r2
	call fn00009610 (retsize: 0;)
	r2 = 0<32>
	r2 = r2 - r19
	call fn00009620 (retsize: 0;)
	r0 = r2 * r0
	r5 = Mem0[r16 + 28<i32>:word32]
	r2 = truncf(CONVERT(r0, uint32, real32))
	r4 = 0x0002564B<p32>
	Mem0[r29 + 12<i32>:word32] = r22
	p1 = r2 > 0xFFFFFFFF<32>
	r1 = 0x1C1<32>
	Mem0[r29 + 8<i32>:word32] = r20
	r3 = CONVERT(SLICE(r2, byte, 0), byte, uint32)
	r3 = 0xFF<32>
	p0 = r2 > 0xFF<32>
	Mem0[r29:word32] = r24
	Mem0[r29 + 4<i32>:word32] = r5
	r3 = 0<32>
	Mem0[r29 + 16<i32>:word32] = r3
	Mem0[r29 + 28<i32>:word32] = r3
	r3_r2 = SEQ(2<32>, r17)
	call logmsg_function (retsize: 0;)
	r2 = Mem0[r25 + 8<i32>:word32]
	r19 = 0xFFFFFFFF<32>
	r23 = Mem0[r2:word32]
	r6 = Mem0[r23 + 12<i32>:word32]
	r7 = Mem0[r23:word32]
	r4 = Mem0[r23 + 4<i32>:word32]
	r1 = Mem0[r23 + 8<i32>:word32]
	r3 = r6 + r20
	r5 = Mem0[r23 + 16<i32>:word32]
	r2 = r1 * r7
	Mem0[r29 + 40<i32>:word32] = r5
	Mem0[r29 + 32<i32>:word32] = r6
	Mem0[r29 + 44<i32>:word32] = r3
	r2 = r2 * r4
	Mem0[r29 + 36<i32>:word32] = r2
	r0 = 0x80<32> + r3 * r2
	call fn00009500 (retsize: 0;)
	branch r27 == 0<32> l0000BECC
	// succ:  l0000BDB8 l0000BECC
l0000BDB8:
	r27 = r0
	r0 = Mem0[r29 + 36<i32>:word64]
	r3 = Mem0[r29 + 44<i32>:word64]
	r2 = r20
	r5 = Mem0[r29 + 40<i32>:word64]
	r1 = Mem0[r29 + 32<i32>:word64]
	Mem0[r29 + 10<i32>:byte] = r6
	call try_pad_bad_supernodes.extracted_region (retsize: 0;)
	r6 = r3 * r0
	r0 = Mem0[r23 + 16<i32>:word32]
	Mem0[r23 + 16<i32>:word32] = r27
	r2 = Mem0[r29 + 44<i32>:word32]
	Mem0[r23 + 12<i32>:word32] = r2
	r3 = Mem0[r29 + 40<i32>:word32]
	r2 = Mem0[r25 + 8<i32>:word32]
	r2 = Mem0[r2:word32]
	Mem0[r2 + 20<i32>:word32] = r3
	r7 = Mem0[r26 + 8<i32>:word32]
	r25 = Mem0[r7:word32]
	r5 = Mem0[r25 + 12<i32>:word32]
	r2 = Mem0[r25 + 8<i32>:word32]
	r4 = Mem0[r25 + 4<i32>:word32]
	r7 = Mem0[r25:word32]
	r3 = Mem0[r25 + 16<i32>:word32]
	r23 = r5 + r20
	r2 = r2 * r7
	Mem0[r29 + 44<i32>:word32] = r3
	Mem0[r29 + 36<i32>:word32] = r5
	r2 = r2 * r4
	Mem0[r29 + 40<i32>:word32] = r2
	r0 = 0x80<32> + r23 * r2
	call fn00009500 (retsize: 0;)
	branch r27 == 0<32> l0000BECC
	// succ:  l0000BE40 l0000BECC
l0000BE40:
	r27 = r0
	r3_r2 = r23_r20
	r1 = Mem0[r29 + 36<i32>:word64]
	r0 = Mem0[r29 + 40<i32>:word64]
	r5 = Mem0[r29 + 44<i32>:word32]
	Mem0[r29 + 11<i32>:byte] = r6
	call try_pad_bad_supernodes.extracted_region (retsize: 0;)
	r6 = r23 * r0
	r0 = Mem0[r25 + 16<i32>:word32]
	Mem0[r25 + 12<i32>:word32] = r23
	Mem0[r25 + 16<i32>:word32] = r27
	r1_r0 = r20_r21
	r2 = Mem0[r29 + 28<i32>:word32]
	r3 = Mem0[r26 + 8<i32>:word32]
	r4 = Mem0[r29 + 44<i32>:word32]
	r3 = Mem0[r3:word32]
	Mem0[r3 + 20<i32>:word32] = r4
	call const_width_extend_8 (retsize: 0;)
	r2 = Mem0[r16 + 8<i32>:word32]
	branch p0 l0000BECC
	// succ:  l0000BE88 l0000BECC
l0000BE88:
	p0 = r0 == 0<32>
	r1_r0 = CONVERT(SLICE(r22, int32, 0), int32, int64)
	r19 = Mem0[r2:word32]
	r3_r2 = CONVERT(SLICE(r24, int32, 0), int32, int64)
	r4 = Mem0[r19 + 20<i32>:word32]
	r7_r6 = r4 *u64 r0
	r7 = r7 + r4 * r1
	r1_r0 = r7_r6
	call fn00009630 (retsize: 0;)
	Mem0[r19 + 20<i32>:word32] = r0
	r3_r2 = SEQ(2<32>, r17)
	r4 = 0x00025689<p32>
	r6 = Mem0[r18 + 28<i32>:word32]
	r5 = Mem0[r16 + 28<i32>:word32]
	r1 = 0x1C6<32>
	Mem0[r29 + 4<i32>:word32] = r6
	Mem0[r29:word32] = r5
	r19 = 0<32>
	call logmsg_function (retsize: 0;)
	// succ:  l0000BECC
l0000BECC:
	r27_r26 = Mem0[r29 + 48<i32>:word64]
	r25_r24 = Mem0[r29 + 56<i32>:word64]
	r0 = r19
	// succ:  l0000BED0
l0000BED0:
	r19_r18 = Mem0[r29 + 80<i32>:word64]
	r17_r16 = Mem0[r29 + 88<i32>:word64]
	r23_r22 = Mem0[r29 + 64<i32>:word64]
	r21_r20 = Mem0[r29 + 72<i32>:word64]
	v25 = r30
	r31 = Mem0[v25 + 4<i32>:word32]
	r30 = Mem0[v25:word32]
	r29 = v25 + 8<i32>
	return
	// succ:  try_pad_bad_supernodes_exit
try_pad_bad_supernodes_exit:


// logmsg_function
// Return size: 0
define logmsg_function
logmsg_function_entry:
	r29 = fp
	// succ:  l0000BEE4
l0000BEE4:
	v4 = r29 - 8<i32>
	Mem0[v4:word32] = r30
	Mem0[v4 + 4<i32>:word32] = r31
	r30 = v4
	r29 = v4 - 8<i32>
	branch r3 >u r5 l0000BF04
	// succ:  l0000BEF4 l0000BF04
l0000BEF4:
	r5 = Mem0[r2 + 16<i32>:word32]
	r6 = r29 + 0x10<32>
	r5 = r29 + 0x10<32>
	r0 = 0x0000BEF9<p32>
	Mem0[r29 + 4<i32>:word32] = r6
	call logv (retsize: 0;)
	// succ:  l0000BF04
l0000BF04:
	v13 = r30
	r31 = Mem0[v13 + 4<i32>:word32]
	r30 = Mem0[v13:word32]
	r29 = v13 + 8<i32>
	return
	// succ:  logmsg_function_exit
logmsg_function_exit:


// do_prepare
// Return size: 0
define do_prepare
do_prepare_entry:
	r29 = fp
	// succ:  l0000BF08
l0000BF08:
	v4 = r29 - 8<i32>
	Mem0[v4:word32] = r30
	Mem0[v4 + 4<i32>:word32] = r31
	r30 = v4
	r29 = v4 - 168<i32>
	Mem0[r29 - 16<i32>:word64] = r17_r16
	r16 = r0
	Mem0[r29 + 144<i32>:word64] = r21_r20
	Mem0[r29 + 152<i32>:word64] = r19_r18
	Mem0[r29 + 128<i32>:word64] = r25_r24
	Mem0[r29 + 136<i32>:word64] = r23_r22
	Mem0[r29 + 120<i32>:word64] = r27_r26
	call nn_os_hvx_power_on (retsize: 0;)
	branch r2 == 1<32> l0000BF48
	// succ:  l0000BF34 l0000BF48
l0000BF34:
	r2 = Mem0[r16 + 36<i32>:int8]
	r1 = 0x1E5<32>
	r3 = 0x0000BF3A<p32>
	// succ:  l0000BF38
l0000BF38:
	r2 = r16
	// succ:  l0000BF3C
l0000BF3C:
	call errlog_function (retsize: 0;)
	r0 = 0xFFFFFFFF<32>
	goto l0000C734
	// succ:  l0000C734
l0000BF48:
	branch r22 == 0<32> l0000BF98
	// succ:  l0000BF5C l0000BF98
l0000BF5C:
	r21 = r29 + 0x708<32>
	r17 = Mem0[r16:word32]
	r23 = 0xFFFFFFCC<32>
	// succ:  l0000BF64
l0000BF64:
	r2 = Mem0[r17 + 24<i32>:word32]
	r1 = 0xD1<32>
	p0 = r2 == 0x4D<32>
	branch p0 l0000C0F4
	// succ:  l0000BF74 l0000C0F4
l0000BF74:
	r3_r2 = SEQ(9<32>, r16)
	r4 = 0x00025827<p32>
	call logmsg_function (retsize: 0;)
	r1_r0 = r17_r16
	call find_first_consumer.1.2_i32_0 (retsize: 0;)
	branch r18 == r17 l0000C0F4
	// succ:  l0000BF98 l0000C0F4
l0000BF98:
	r18 = r0
	branch r2 == 0<32> l0000BFD8
	// succ:  l0000BFA4 l0000BFD8
l0000BFA4:
	r2 = Mem0[r17 + 20<i32>:word32]
	branch r2 >u r19 l0000BFD4
	// succ:  l0000BFB0 l0000BFD4
l0000BFB0:
	r19 = r19 + 1<32>
	r1_r0 = r17_r16
	r2 = r19
	r1_r0 = r17_r16
	r2 = r19 + 0<32>
	branch p0 l0000C0F4
	// succ:  l0000BFC4 l0000C0F4
l0000BFC4:
	p0 = r0 == r10
	call find_last_consumer (retsize: 0;)
	r2 = Mem0[r17 + 20<i32>:word32]
	branch p0 l0000BFA4
	// succ:  l0000BFD0 l0000BFA4
l0000BFD0:
	p0 = r0 == r10
	goto l0000C0F4
	// succ:  l0000C0F4
l0000BFD4:
	r2 = Mem0[r18 + 24<i32>:word32]
	// succ:  l0000BFD8
l0000BFD8:
	p0 = r2 == 0x4B<32>
	branch p0 l0000C0F4
	// succ:  l0000BFE0 l0000C0F4
l0000BFE0:
	branch r20 >u r2 l0000C0F4
	// succ:  l0000BFEC l0000C0F4
l0000BFEC:
	r2 = Mem0[r17 + 16<i32>:word32]
	branch r20 >u r2 l0000C0F8
	// succ:  l0000BFF4 l0000C0F8
l0000BFF4:
	r3 = Mem0[r18 + 12<i32>:word32]
	r4 = Mem0[r17 + 12<i32>:word32]
	r4 = r4 + 4<32>
	r3 = r3 + 4<32>
	goto l0000C010
	// succ:  l0000C010
l0000C000:
	branch r2 > 2<32> l0000C02C
	goto l0000C014
	// succ:  l0000C014 l0000C02C
l0000C010:
	r5 = Mem0[r4 - 4<i32>:word32]
	branch r6 == r5 l0000C0F4
	goto l0000C020
	// succ:  l0000C020 l0000C0F4
l0000C014:
	r2 = r2 + 1<32>
	r3 = r3 + 8<32>
	r4 = r4 + 8<32>
	branch r6 == r5 l0000C0F4
	// succ:  l0000C020 l0000C0F4
l0000C020:
	r6 = Mem0[r3 - 4<i32>:word32]
	branch r6 == r5 l0000C000
	// succ:  l0000C02C l0000C000
l0000C02C:
	r6 = Mem0[r3:word32]
	r1 = 0xD8<32>
	r3_r2 = SEQ(9<32>, r16)
	r4 = 0x00025841<p32>
	call logmsg_function (retsize: 0;)
	r2 = Mem0[r18 + 8<i32>:word32]
	r3 = __set_bit<word32,word32>(r21, 4<32>)
	r4 = 0x0002B110<p32>
	r0 = r16
	r5 = 3<32>
	r6 = Mem0[r2:word32]
	r2 = 0x13<32>
	r6 = Mem0[r6 + 20<i32>:word32]
	Mem0[r3:word32] = 0<32>
	Mem0[r29 + 8<i32>:word32] = r6
	r7 = Mem0[r18 + 8<i32>:word32]
	r1 = Mem0[r7 + 4<i32>:word32]
	Mem0[r29 + 4<i32>:byte] = r3
	r3 = Mem0[r1 + 20<i32>:word32]
	r7 = Mem0[r18 + 8<i32>:word32]
	r3 = Mem0[r7 + 8<i32>:word32]
	r3 = Mem0[r3 + 20<i32>:word32]
	Mem0[r21 + 20<i32>:word32] = 0<32>
	Mem0[r29 + 24<i32>:word32] = r3
	r6 = Mem0[r13 + r23:word32]
	r3 = Mem0[r18 + 32<i32>:byte]
	r6 = Mem0[r6 + 76<i32>:word32]
	r1 = Mem0[r18 + 28<i32>:word32]
	r4 = Mem0[r17 + 16<i32>:word32]
	r7 = Mem0[r17 + 12<i32>:word32]
	r6 = Mem0[r6 + 8<i32>:word32]
	Mem0[r29 + 4<i32>:word32] = r21
	Mem0[r29:word32] = r7
	call r6 (retsize: 0;)
	branch r19 == 0<32> l0000C0F4
	// succ:  l0000C0B0 l0000C0F4
l0000C0B0:
	r19 = r0
	Mem0[r22:word32] = r19
	Mem0[r19 + 9<i32>:byte] = r7
	r7 = Mem0[r18 + 36<i32>:word32]
	r2 = Mem0[r2 + 12<i32>:word32]
	call r2 (retsize: 0;)
	r2 = Mem0[r18:word32]
	r1_r0 = r16_r18
	r2 = Mem0[r2 + 12<i32>:word32]
	call r2 (retsize: 0;)
	r1 = 0xEB<32>
	r3_r2 = SEQ(3<32>, r16)
	r4 = 0x0002585B<p32>
	Mem0[r29:byte] = r5
	r5 = Mem0[r19 + 28<i32>:word32]
	call logmsg_function (retsize: 0;)
	goto l0000C0F8
	// succ:  l0000C0F8
l0000C0F4:
	r2 = Mem0[r22:word32]
	// succ:  l0000C0F8
l0000C0F8:
	r22 = r2 + 0x24<32>
	branch r17 == 0<32> l0000BF64
	// succ:  l0000C108 l0000BF64
l0000C108:
	r17 = Mem0[r2 + 36<i32>:word32]
	branch r22 == 0<32> l0000C168
	// succ:  l0000C118 l0000C168
l0000C118:
	r21 = r29 + 0x560<32>
	r2 = Mem0[r17 + 24<i32>:word32]
	r3 = Mem0[r17 + 12<i32>:word32]
	p0 = r2 == 0x4B<32>
	branch p0 l0000C29C
	// succ:  l0000C128 l0000C29C
l0000C128:
	branch r2 == 0<32> l0000C29C
	// succ:  l0000C134 l0000C29C
l0000C134:
	r2 = Mem0[r3 + 36<i32>:word32]
	branch r2 == 0<32> l0000C2A0
	// succ:  l0000C13C l0000C2A0
l0000C13C:
	r3 = Mem0[r3 + 32<i32>:word32]
	branch r2 == 0<32> l0000C29C
l0000C144:
	branch r2 == 0<32> l0000C2A0
	// succ:  l0000C14C l0000C29C l0000C2A0
l0000C14C:
	r2 = Mem0[r2 + 36<i32>:word32]
	branch r4 == r3 l0000C144
	// succ:  l0000C154 l0000C144
l0000C154:
	branch r2 == 3<32> l0000C2A0
	// succ:  l0000C15C l0000C2A0
l0000C15C:
	r1_r0 = r17_r16
	branch r18 == r17 l0000C29C
	goto l0000C16C
	// succ:  l0000C16C l0000C29C
l0000C168:
	branch r2 == 0<32> l0000C1A8
	goto l0000C178
	// succ:  l0000C178 l0000C1A8
l0000C16C:
	r18 = r0
	branch r2 == 0<32> l0000C1AC
	// succ:  l0000C178 l0000C1AC
l0000C178:
	r2 = Mem0[r17 + 20<i32>:word32]
	branch r2 >u r19 l0000C1A8
	// succ:  l0000C184 l0000C1A8
l0000C184:
	r19 = r19 + 1<32>
	r1_r0 = r17_r16
	r2 = r19
	r1_r0 = r17_r16
	r2 = r19 + 0<32>
	branch p0 l0000C29C
	// succ:  l0000C198 l0000C29C
l0000C198:
	p0 = r0 == r10
	call find_last_consumer (retsize: 0;)
	r2 = Mem0[r17 + 20<i32>:word32]
	branch p0 l0000C178
	// succ:  l0000C1A4 l0000C178
l0000C1A4:
	p0 = r0 == r10
	goto l0000C29C
	// succ:  l0000C29C
l0000C1A8:
	branch r2 == 0x15<32> l0000C29C
	goto l0000C1B8
	// succ:  l0000C1B8 l0000C29C
l0000C1AC:
	branch r2 == 0x15<32> l0000C2A0
	// succ:  l0000C1B8 l0000C2A0
l0000C1B8:
	r2 = Mem0[r18 + 24<i32>:word32]
	r1 = 0x106<32>
	r3_r2 = SEQ(9<32>, r16)
	r4 = 0x0000C1E1<p32>
	call logmsg_function (retsize: 0;)
	r2 = Mem0[r18 + 8<i32>:word32]
	r3 = __set_bit<word32,word32>(r20, 4<32>)
	r6 = 0x0002B110<p32>
	r2 = Mem0[r2:word32]
	r5_r4 = 0x300000004<64>
	r2 = Mem0[r2 + 20<i32>:word32]
	Mem0[r3:word32] = 0<32>
	Mem0[r29 + 8<i32>:word32] = r2
	r2 = 0x17<32>
	r3 = Mem0[r18 + 12<i32>:word32]
	r0 = Mem0[r3:word32]
	r1 = Mem0[r3 + 4<i32>:word32]
	Mem0[r29 + 32<i32>:word64] = r1_r0
	r7 = Mem0[r18 + 8<i32>:word32]
	r3 = Mem0[r7 + 4<i32>:word32]
	r3 = Mem0[r3 + 20<i32>:word32]
	Mem0[r20 + 12<i32>:word32] = 0<32>
	Mem0[r29 + 16<i32>:word32] = r3
	r7 = Mem0[r18 + 12<i32>:word32]
	r0 = Mem0[r7 + 8<i32>:word32]
	r1 = Mem0[r7 + 12<i32>:word32]
	Mem0[r29 + 40<i32>:word64] = r1_r0
	r3 = Mem0[r18 + 8<i32>:word32]
	r3 = Mem0[r3 + 8<i32>:word32]
	r3 = Mem0[r3 + 20<i32>:word32]
	Mem0[r20 + 20<i32>:word32] = 0<32>
	Mem0[r29 + 24<i32>:word32] = r3
	r7 = Mem0[r18 + 12<i32>:word32]
	r0 = Mem0[r7 + 16<i32>:word32]
	r1 = Mem0[r7 + 20<i32>:word32]
	Mem0[r29 + 48<i32>:word64] = r1_r0
	r3 = Mem0[r17 + 12<i32>:word32]
	r0 = Mem0[r3 + 32<i32>:word32]
	r1 = Mem0[r3 + 36<i32>:word32]
	Mem0[r29 + 56<i32>:word64] = r1_r0
	r6 = Mem0[r13 + r23:word32]
	r0 = r16
	r3 = Mem0[r17 + 32<i32>:byte]
	r6 = Mem0[r6 + 92<i32>:word32]
	r1 = Mem0[r18 + 28<i32>:word32]
	Mem0[r29 + 4<i32>:word32] = r20
	r6 = Mem0[r6 + 8<i32>:word32]
	Mem0[r29:word32] = r21
	call r6 (retsize: 0;)
	Mem0[r17 + 36<i32>:word32] = r0
	branch p0 l0000C29C
	// succ:  l0000C270 l0000C29C
l0000C270:
	p0 = r0 == 0<32>
	Mem0[r0 + 9<i32>:byte] = r7
	r7 = Mem0[r18 + 36<i32>:word32]
	r1_r0 = r16_r18
	r2 = Mem0[r2 + 12<i32>:word32]
	call r2 (retsize: 0;)
	r1 = 0x11A<32>
	r3_r2 = SEQ(3<32>, r16)
	r4 = 0x000257F1<p32>
	call logmsg_function (retsize: 0;)
	// succ:  l0000C29C
l0000C29C:
	r2 = Mem0[r22:word32]
	// succ:  l0000C2A0
l0000C2A0:
	r22 = r2 + 0x24<32>
	branch r17 == 0<32> l0000C118
	// succ:  l0000C2B0 l0000C118
l0000C2B0:
	r17 = Mem0[r2 + 36<i32>:word32]
	branch r17 == 0<32> l0000C660
	// succ:  l0000C2BC l0000C660
l0000C2BC:
	r17 = Mem0[r16:word32]
	r25 = r29 + 0x20<32>
	// succ:  l0000C2C0
l0000C2C0:
	branch r2 == 0xF<32> l0000C620
	// succ:  l0000C2D0 l0000C620
l0000C2D0:
	r2 = Mem0[r17 + 24<i32>:word32]
	r1 = 0x133<32>
	r3_r2 = SEQ(9<32>, r16)
	r4 = 0x0000C2F6<p32>
	call logmsg_function (retsize: 0;)
	r1_r0 = r17_r16
	call find_first_consumer.1.2_i32_0 (retsize: 0;)
	branch r18 == r17 l0000C620
	// succ:  l0000C2F0 l0000C620
l0000C2F0:
	r18 = r0
	branch r2 == 0<32> l0000C330
	// succ:  l0000C2FC l0000C330
l0000C2FC:
	r2 = Mem0[r17 + 20<i32>:word32]
	branch r2 >u r19 l0000C32C
	// succ:  l0000C308 l0000C32C
l0000C308:
	r19 = r19 + 1<32>
	r1_r0 = r17_r16
	r2 = r19
	r1_r0 = r17_r16
	r2 = r19 + 0<32>
	branch p0 l0000C620
	// succ:  l0000C31C l0000C620
l0000C31C:
	p0 = r0 == r10
	call find_last_consumer (retsize: 0;)
	r2 = Mem0[r17 + 20<i32>:word32]
	branch p0 l0000C2FC
	// succ:  l0000C328 l0000C2FC
l0000C328:
	p0 = r0 == r10
	goto l0000C620
	// succ:  l0000C620
l0000C32C:
	branch r2 == 0x13<32> l0000C33C
	goto l0000C338
	// succ:  l0000C338 l0000C33C
l0000C330:
	branch r2 == 0x13<32> l0000C340
	// succ:  l0000C338 l0000C340
l0000C338:
	p0 = r2 == 0x4B<32>
	// succ:  l0000C33C
l0000C33C:
	r1 = 0x13B<32>
	r3_r2 = SEQ(9<32>, r16)
	r4 = 0x00025780<p32>
	goto l0000C34C
	// succ:  l0000C34C
l0000C340:
	r1 = 0x13B<32>
	r3_r2 = SEQ(9<32>, r16)
	r4 = 0x0000C344<p32>
	// succ:  l0000C34C
l0000C34C:
	call logmsg_function (retsize: 0;)
	r1_r0 = r18_r16
	call find_first_consumer.1.2_i32_0 (retsize: 0;)
	branch r19 == r18 l0000C620
	// succ:  l0000C364 l0000C620
l0000C364:
	r19 = r0
	branch r2 == 0<32> l0000C3A4
	// succ:  l0000C370 l0000C3A4
l0000C370:
	r2 = Mem0[r18 + 20<i32>:word32]
	branch r2 >u r20 l0000C3A0
	// succ:  l0000C37C l0000C3A0
l0000C37C:
	r20 = r20 + 1<32>
	r1_r0 = r18_r16
	r2 = r20
	r1_r0 = r18_r16
	r2 = r20 + 0<32>
	branch p0 l0000C620
	// succ:  l0000C390 l0000C620
l0000C390:
	p0 = r0 == r11
	call find_last_consumer (retsize: 0;)
	r2 = Mem0[r18 + 20<i32>:word32]
	branch p0 l0000C370
	// succ:  l0000C39C l0000C370
l0000C39C:
	p0 = r0 == r11
	goto l0000C620
	// succ:  l0000C620
l0000C3A0:
	r2 = Mem0[r19 + 24<i32>:word32]
	// succ:  l0000C3A4
l0000C3A4:
	r1 = 0x140<32>
	p0 = r2 == 0x23<32>
	branch p0 l0000C620
	// succ:  l0000C3B0 l0000C620
l0000C3B0:
	r3_r2 = SEQ(9<32>, r16)
	r4 = 0x0002578E<p32>
	call logmsg_function (retsize: 0;)
	r1_r0 = r19_r16
	call find_first_consumer.1.2_i32_0 (retsize: 0;)
	branch r20 == r19 l0000C620
	// succ:  l0000C3D4 l0000C620
l0000C3D4:
	r20 = r0
	branch r2 == 0<32> l0000C414
	// succ:  l0000C3E0 l0000C414
l0000C3E0:
	r2 = Mem0[r19 + 20<i32>:word32]
	branch r2 >u r21 l0000C410
	// succ:  l0000C3EC l0000C410
l0000C3EC:
	r21 = r21 + 1<32>
	r1_r0 = r19_r16
	r2 = r21
	r1_r0 = r19_r16
	r2 = r21 + 0<32>
	branch p0 l0000C620
	// succ:  l0000C400 l0000C620
l0000C400:
	p0 = r0 == r12
	call find_last_consumer (retsize: 0;)
	r2 = Mem0[r19 + 20<i32>:word32]
	branch p0 l0000C3E0
	// succ:  l0000C40C l0000C3E0
l0000C40C:
	p0 = r0 == r12
	goto l0000C620
	// succ:  l0000C620
l0000C410:
	branch r2 == 0x13<32> l0000C420
	goto l0000C41C
	// succ:  l0000C41C l0000C420
l0000C414:
	branch r2 == 0x13<32> l0000C424
	// succ:  l0000C41C l0000C424
l0000C41C:
	r2 = Mem0[r18 + 24<i32>:word32]
	p0 = r2 == 0x4B<32>
	// succ:  l0000C420
l0000C420:
	r1 = 0x145<32>
	r3_r2 = SEQ(9<32>, r16)
	r4 = 0x0002579D<p32>
	goto l0000C430
	// succ:  l0000C430
l0000C424:
	r1 = 0x145<32>
	r3_r2 = SEQ(9<32>, r16)
	r4 = 0x0000C461<p32>
	// succ:  l0000C430
l0000C430:
	call logmsg_function (retsize: 0;)
	r1_r0 = r20_r16
	call find_first_consumer.1.2_i32_0 (retsize: 0;)
	branch r21 == r20 l0000C620
	// succ:  l0000C448 l0000C620
l0000C448:
	r21 = r0
	branch r2 == 0<32> l0000C488
	// succ:  l0000C454 l0000C488
l0000C454:
	r2 = Mem0[r20 + 20<i32>:word32]
	branch r2 >u r22 l0000C484
	// succ:  l0000C460 l0000C484
l0000C460:
	r22 = r22 + 1<32>
	r1_r0 = r20_r16
	r2 = r22
	r1_r0 = r20_r16
	r2 = r22 + 0<32>
	branch p0 l0000C620
	// succ:  l0000C474 l0000C620
l0000C474:
	p0 = r0 == r13
	call find_last_consumer (retsize: 0;)
	r2 = Mem0[r20 + 20<i32>:word32]
	branch p0 l0000C454
	// succ:  l0000C480 l0000C454
l0000C480:
	p0 = r0 == r13
	goto l0000C620
	// succ:  l0000C620
l0000C484:
	r2 = Mem0[r21 + 24<i32>:word32]
	// succ:  l0000C488
l0000C488:
	branch r2 == 0x17<32> l0000C620
	// succ:  l0000C494 l0000C620
l0000C494:
	r2 = __set_bit<word32,word32>(r2, 2<32>)
	r1 = 0x14B<32>
	r3_r2 = SEQ(9<32>, r16)
	r4 = 0x0000C4AF<p32>
	call logmsg_function (retsize: 0;)
	r2 = Mem0[r17 + 12<i32>:word32]
	r1 = Mem0[r2 + 4<i32>:word32]
	r0 = Mem0[r2:word32]
	Mem0[r29 + 32<i32>:word64] = r1_r0
	r7 = Mem0[r17 + 12<i32>:word32]
	r5 = Mem0[r7 + 12<i32>:word32]
	r4 = Mem0[r7 + 8<i32>:word32]
	Mem0[r29 + 40<i32>:word64] = r5_r4
	r2 = Mem0[r17 + 12<i32>:word32]
	r1 = Mem0[r2 + 20<i32>:word32]
	r0 = Mem0[r2 + 16<i32>:word32]
	Mem0[r29 + 48<i32>:word64] = r1_r0
	r7 = Mem0[r17 + 12<i32>:word32]
	r5 = Mem0[r7 + 28<i32>:word32]
	r4 = Mem0[r7 + 24<i32>:word32]
	Mem0[r29 + 56<i32>:word64] = r5_r4
	r2 = Mem0[r17 + 12<i32>:word32]
	r1 = Mem0[r2 + 4<i32>:word32]
	r0 = Mem0[r2:word32]
	Mem0[r29 + 64<i32>:word64] = r1_r0
	r7 = Mem0[r17 + 12<i32>:word32]
	r5 = Mem0[r7 + 12<i32>:word32]
	r4 = Mem0[r7 + 8<i32>:word32]
	Mem0[r29 + 72<i32>:word64] = r5_r4
	r2 = Mem0[r17 + 12<i32>:word32]
	r1 = Mem0[r2 + 20<i32>:word32]
	r0 = Mem0[r2 + 16<i32>:word32]
	Mem0[r29 + 80<i32>:word64] = r1_r0
	r7 = Mem0[r19 + 12<i32>:word32]
	r5 = Mem0[r7 + 12<i32>:word32]
	r4 = Mem0[r7 + 8<i32>:word32]
	Mem0[r29 + 88<i32>:word64] = r5_r4
	r4 = 0xA<32>
	r2 = Mem0[r19 + 12<i32>:word32]
	r1 = Mem0[r2 + 4<i32>:word32]
	r0 = Mem0[r2:word32]
	Mem0[r29 + 96<i32>:word64] = r1_r0
	r5 = Mem0[r19 + 12<i32>:word32]
	r7 = Mem0[r5 + 12<i32>:word32]
	r6 = Mem0[r5 + 8<i32>:word32]
	Mem0[r29 + 104<i32>:word64] = r7_r6
	branch r2 == 0x17<32> l0000C530
	// succ:  l0000C528 l0000C530
l0000C528:
	r2 = Mem0[r21 + 24<i32>:word32]
	r1 = Mem0[r2 + 28<i32>:word32]
	r0 = Mem0[r2 + 24<i32>:word32]
	Mem0[r29 + 112<i32>:word64] = r1_r0
	// succ:  l0000C530
l0000C530:
	r2 = Mem0[r21 + 8<i32>:word32]
	r3 = __set_bit<word32,word32>(r24, 4<32>)
	r6 = 0x0002B110<p32>
	r2 = Mem0[r2:word32]
	r5 = 3<32>
	Mem0[r29 + 2<i32>:byte] = r7
	r7 = Mem0[r2 + 20<i32>:word32]
	r2 = 0x31<32>
	r1 = Mem0[r21 + 8<i32>:word32]
	r0 = Mem0[r1 + 4<i32>:word32]
	Mem0[r29 + 4<i32>:byte] = r3
	r3 = Mem0[r0 + 20<i32>:word32]
	r0 = r16
	r7 = Mem0[r21 + 8<i32>:word32]
	r3 = Mem0[r7 + 8<i32>:word32]
	r3 = Mem0[r3 + 20<i32>:word32]
	Mem0[r24 + 20<i32>:word32] = 0xFFFFFF80<32>
	Mem0[r29 + 24<i32>:word32] = r3
	r6 = Mem0[r13 + r23:word32]
	r1 = Mem0[r21 + 28<i32>:word32]
	r6 = Mem0[r6 + 196<i32>:word32]
	r3 = Mem0[r17 + 32<i32>:byte]
	Mem0[r29 + 4<i32>:word32] = r24
	r6 = Mem0[r6 + 8<i32>:word32]
	Mem0[r29:word32] = r25
	call r6 (retsize: 0;)
	branch r22 == 0<32> l0000C620
	// succ:  l0000C5AC l0000C620
l0000C5AC:
	r22 = r0
	Mem0[r26:word32] = r22
	Mem0[r22 + 9<i32>:byte] = r7
	r7 = Mem0[r21 + 36<i32>:word32]
	r2 = Mem0[r2 + 12<i32>:word32]
	call r2 (retsize: 0;)
	r2 = Mem0[r18:word32]
	r1_r0 = r16_r18
	r2 = Mem0[r2 + 12<i32>:word32]
	call r2 (retsize: 0;)
	r2 = Mem0[r19:word32]
	r1_r0 = r16_r19
	r2 = Mem0[r2 + 12<i32>:word32]
	call r2 (retsize: 0;)
	r2 = Mem0[r20:word32]
	r1_r0 = r16_r20
	r2 = Mem0[r2 + 12<i32>:word32]
	call r2 (retsize: 0;)
	r2 = Mem0[r21:word32]
	r1_r0 = r16_r21
	r2 = Mem0[r2 + 12<i32>:word32]
	call r2 (retsize: 0;)
	r1 = 0x176<32>
	r3_r2 = SEQ(3<32>, r16)
	r4 = 0x000257B7<p32>
	Mem0[r29:byte] = r5
	r5 = Mem0[r22 + 28<i32>:word32]
	call logmsg_function (retsize: 0;)
	goto l0000C624
	// succ:  l0000C624
l0000C620:
	r2 = Mem0[r26:word32]
	// succ:  l0000C624
l0000C624:
	r26 = r2 + 0x24<32>
	branch r17 == 0<32> l0000C2C0
	// succ:  l0000C634 l0000C2C0
l0000C634:
	r17 = Mem0[r2 + 36<i32>:word32]
	r2 = Mem0[r17:word32]
	// succ:  l0000C638
l0000C638:
	r1_r0 = r17_r16
	branch p0 l0000C65C
	// succ:  l0000C640 l0000C65C
l0000C640:
	p0 = r2 == 0<32>
	call try_pad_bad_supernodes (retsize: 0;)
	r2 = Mem0[r17:word32]
	r1 = 0x1CE<32>
	branch p0 l0000C748
	// succ:  l0000C650 l0000C748
l0000C650:
	p0 = r0 == 0<32>
	r17 = r2 + 0x24<32>
	r2 = Mem0[r2 + 36<i32>:word32]
	goto l0000C638
	// succ:  l0000C638
l0000C65C:
	r0 = r16
	call allocate_graph_storage (retsize: 0;)
	goto l0000C664
	// succ:  l0000C664
l0000C660:
	r0 = r16
	// succ:  l0000C664
l0000C664:
	branch p0 l0000C734
	// succ:  l0000C668 l0000C734
l0000C668:
	p0 = r0 == 0<32>
	branch r17 == 0<32> l0000C714
	// succ:  l0000C674 l0000C714
l0000C674:
	r17 = Mem0[r16:word32]
	branch r2 == 0<32> l0000C700
l0000C67C:
	r3 = Mem0[r17 + 12<i32>:word32]
	// succ:  l0000C680 l0000C700
l0000C680:
	r2 = Mem0[r17 + 16<i32>:word32]
	branch r4 == 0<32> l0000C6DC
	// succ:  l0000C68C l0000C6DC
l0000C68C:
	r4 = Mem0[r23 + r18 * 8<32>:word32]
	branch r2 == 0<32> l0000C758
	// succ:  l0000C698 l0000C758
l0000C698:
	r2 = Mem0[r16:word32]
	r5 = Mem0[r3 + 4<i32>:word32]
	branch r2 == 0<32> l0000C754
l0000C6A0:
	branch r2 == 0<32> l0000C758
	// succ:  l0000C6A8 l0000C754 l0000C758
l0000C6A8:
	r2 = Mem0[r2 + 36<i32>:word32]
	branch r3 == r4 l0000C6A0
	// succ:  l0000C6B0 l0000C6A0
l0000C6B0:
	branch r3 >u r5 l0000C6D0
	// succ:  l0000C6B8 l0000C6D0
l0000C6B8:
	Mem0[r29 + 4<i32>:word32] = r4
	r1 = 0x7E<32>
	r3 = 0x0000C6D2<p32>
	Mem0[r29:word32] = r5
	r2 = r16
	goto l0000BF3C
	// succ:  l0000BF3C
l0000C6D0:
	r2 = Mem0[r14 + r5 * 4<32>:word32]
	Mem0[r31 + r18 * 4<32>:word32] = r2
	goto l0000C6F0
	// succ:  l0000C6F0
l0000C6DC:
	r1 = 0x83<32>
	r3_r2 = SEQ(1<32>, r16)
	r4 = 0x00025734<p32>
	call logmsg_function (retsize: 0;)
	// succ:  l0000C6F0
l0000C6F0:
	r2 = Mem0[r17 + 16<i32>:word32]
	branch r2 >u r18 l0000C67C
	// succ:  l0000C700 l0000C67C
l0000C700:
	r18 = r18 + 1<32>
	branch r17 == 0<32> l0000C674
	// succ:  l0000C708 l0000C674
l0000C708:
	r2 = Mem0[r17:word32]
	r1_r0 = r16_r17
	branch p0 l0000C724
	// succ:  l0000C714 l0000C724
l0000C714:
	p0 = r9 == 0<32>
	r0 = r16
	call nn_os_hvx_power_off (retsize: 0;)
	Mem0[r16 - 28<i32>:byte] = 2<8>
	goto l0000C734
	// succ:  l0000C734
l0000C724:
	r2 = Mem0[r2 + 4<i32>:word32]
	call r2 (retsize: 0;)
	r17 = Mem0[r17 + 36<i32>:word32]
	branch p0 l0000C708
	// succ:  l0000C734 l0000C708
l0000C734:
	r19_r18 = Mem0[r29 + 152<i32>:word64]
	r17_r16 = Mem0[r29 + 160<i32>:word64]
	r23_r22 = Mem0[r29 + 136<i32>:word64]
	r21_r20 = Mem0[r29 + 144<i32>:word64]
	r27_r26 = Mem0[r29 + 120<i32>:word64]
	r25_r24 = Mem0[r29 + 128<i32>:word64]
	v30 = r30
	r31 = Mem0[v30 + 4<i32>:word32]
	r30 = Mem0[v30:word32]
	r29 = v30 + 8<i32>
	return
	// succ:  do_prepare_exit
l0000C748:
	goto l0000BF38
	// succ:  l0000BF38
l0000C754:
	Mem0[r29 + 1<i32>:byte] = r2
	r2 = Mem0[r17 + 28<i32>:word32]
	r3 = 0x000256DC<p32>
	goto l0000C768
	// succ:  l0000C768
l0000C758:
	Mem0[r29 + 1<i32>:byte] = r2
	r2 = Mem0[r17 + 28<i32>:word32]
	r3 = 0x0000C760<p32>
	// succ:  l0000C768
l0000C768:
	r2 = r16
	Mem0[r29:word32] = r4
	goto l0000BF3C
	// succ:  l0000BF3C
do_prepare_exit:


// errlog_function
// Return size: 0
define errlog_function
errlog_function_entry:
	r29 = fp
	// succ:  l0000C774
l0000C774:
	v4 = r29 - 8<i32>
	Mem0[v4:word32] = r30
	Mem0[v4 + 4<i32>:word32] = r31
	r30 = v4
	r29 = v4 - 8<i32>
	r4 = r3
	r0 = 0x00025635<p32>
	Mem0[r29 + 1<i32>:byte] = r6
	r6 = r29 + 0x10<32>
	r5 = r29 + 0x10<32>
	r3 = 0<32>
	v13 = r30
	r31 = Mem0[v13 + 4<i32>:word32]
	r30 = Mem0[v13:word32]
	r29 = v13 + 8<i32>
	return
	// succ:  errlog_function_exit
errlog_function_exit:


// try_pad_bad_supernodes.extracted_region
// Return size: 0
define try_pad_bad_supernodes.extracted_region
try_pad_bad_supernodes.extracted_region_entry:
	r29 = fp
	// succ:  l0000C798
l0000C798:
	v4 = r29 - 8<i32>
	Mem0[v4:word32] = r30
	Mem0[v4 + 4<i32>:word32] = r31
	r30 = v4
	r29 = v4 - 24<i32>
	Mem0[r29 - 16<i32>:word64] = r17_r16
	Mem0[r29 + 8<i32>:word64] = r19_r18
	r19_r18 = r4_r3
	r17_r16 = r2_r1
	Mem0[r29:word64] = r21_r20
	r21_r20 = r0_r5
	branch p0 l0000C7DC
	// succ:  l0000C7B4 l0000C7DC
l0000C7B4:
	p0 = r13 > 0<32>
	r1_r0 = r20_r19
	r2 = r16
	call fn00009560 (retsize: 0;)
	r20 = r20 + r16
	r1 = 0<32>
	r2 = r17
	r0 = r19 + r16
	r19 = r19 + r18
	call fn000095F0 (retsize: 0;)
	branch r21 == 0<32> l0000C7B4
	goto l0000C7E0
	// succ:  l0000C7E0 l0000C7B4
l0000C7DC:
	r19_r18 = Mem0[r29 + 8<i32>:word64]
	r17_r16 = Mem0[r29 + 16<i32>:word64]
	// succ:  l0000C7E0
l0000C7E0:
	r21 = r21 + 0xFFFFFFFF<32>
	v29 = r30
	r31 = Mem0[v29 + 4<i32>:word32]
	r30 = Mem0[v29:word32]
	r29 = v29 + 8<i32>
	return
	// succ:  try_pad_bad_supernodes.extracted_region_exit
try_pad_bad_supernodes.extracted_region_exit:


// find_first_consumer.1.2_i32_0
// Return size: 0
define find_first_consumer.1.2_i32_0
find_first_consumer.1.2_i32_0_entry:
	r29 = fp
	// succ:  l0000C7E4
l0000C7E4:
	// succ:  l0000C854_in_find_first_consumer.1.2_i32_0
l0000C854_in_find_first_consumer.1.2_i32_0:
	v5 = r30
	r31 = Mem0[v5 + 4<i32>:word32]
	r30 = Mem0[v5:word32]
	r29 = v5 + 8<i32>
	return
	// succ:  find_first_consumer.1.2_i32_0_exit
find_first_consumer.1.2_i32_0_exit:


// tensor_alloc
// Return size: 0
define tensor_alloc
tensor_alloc_entry:
	r29 = fp
	// succ:  l0000C7F0
l0000C7F0:
	v4 = r29 - 8<i32>
	Mem0[v4:word32] = r30
	Mem0[v4 + 4<i32>:word32] = r31
	r30 = v4
	r29 = v4 - 16<i32>
	Mem0[r29 - 24<i32>:word64] = r19_r18
	r0 = 0x20<32>
	r18 = r0
	Mem0[r29 + 8<i32>:word64] = r17_r16
	r17 = r1
	call fn00009500 (retsize: 0;)
	branch r16 == 0<32> l0000C810
	// succ:  l0000C810 l0000C810
l0000C810:
	r16 = r0
	Mem0[r16 + 16<i32>:word32] = 0<32>
	branch p0 l0000C838
	// succ:  l0000C818 l0000C838
l0000C818:
	p0 = r9 == 0<32>
	r1_r0 = SEQ(r17, 0x80<32>)
	call fn00009550 (retsize: 0;)
	Mem0[r16 + 16<i32>:word32] = r0
	branch p0 l0000C838
	// succ:  l0000C82C l0000C838
l0000C82C:
	p0 = r0 == 0<32>
	r0 = r16
	r16 = 0<32>
	call fn00009510 (retsize: 0;)
	goto l0000C850
	// succ:  l0000C850
l0000C838:
	r3 = Mem0[r18 + 12<i32>:word32]
	r2 = Mem0[r18:word32]
	r4 = Mem0[r18 + 8<i32>:word32]
	r7 = Mem0[r18 + 4<i32>:word32]
	Mem0[r16 + 12<i32>:word32] = r3
	Mem0[r16:word32] = r2
	Mem0[r16 + 8<i32>:word32] = r4
	Mem0[r16 + 4<i32>:word32] = r7
	Mem0[r16 + 20<i32>:word32] = r17
	Mem0[r16 + 24<i32>:word32] = r17
	Mem0[r16 + 28<i32>:word32] = r16
	// succ:  l0000C850
l0000C850:
	r19_r18 = Mem0[r29:word64]
	r17_r16 = Mem0[r29 + 8<i32>:word64]
	r0 = r16
	// succ:  l0000C854
l0000C854:
	v21 = r30
	r31 = Mem0[v21 + 4<i32>:word32]
	r30 = Mem0[v21:word32]
	r29 = v21 + 8<i32>
	return
	// succ:  tensor_alloc_exit
tensor_alloc_exit:


// tensor_dup
// Return size: 0
define tensor_dup
tensor_dup_entry:
	r29 = fp
	// succ:  l0000C85C
l0000C85C:
	v4 = r29 - 8<i32>
	Mem0[v4:word32] = r30
	Mem0[v4 + 4<i32>:word32] = r31
	r30 = v4
	r29 = v4 - 16<i32>
	Mem0[r29 - 24<i32>:word64] = r19_r18
	r0 = 0x20<32>
	r18 = r0
	Mem0[r29 + 8<i32>:word64] = r17_r16
	r17 = Mem0[r18 + 24<i32>:word32]
	call fn00009500 (retsize: 0;)
	branch r16 == 0<32> l0000C87C
	// succ:  l0000C87C l0000C87C
l0000C87C:
	r16 = r0
	branch p0 l0000C8A8
	// succ:  l0000C880 l0000C8A8
l0000C880:
	p0 = r9 == 0<32>
	r1_r0 = SEQ(r17, 0x80<32>)
	call fn00009550 (retsize: 0;)
	Mem0[r16 + 16<i32>:word32] = r0
	branch p0 l0000C89C
	// succ:  l0000C894 l0000C89C
l0000C894:
	p0 = r0 == 0<32>
	r2 = Mem0[r18 + 24<i32>:word32]
	goto l0000C8B0
	// succ:  l0000C8B0
l0000C89C:
	r0 = r16
	r16 = 0<32>
	call fn00009510 (retsize: 0;)
	goto l0000C8CC
	// succ:  l0000C8CC
l0000C8A8:
	Mem0[r16 + 16<i32>:word32] = 0<32>
	r2 = 0<32>
	r0 = 0<32>
	// succ:  l0000C8B0
l0000C8B0:
	r4 = Mem0[r18 + 4<i32>:word32]
	r3 = Mem0[r18:word32]
	r5 = Mem0[r18 + 12<i32>:word32]
	r7 = Mem0[r18 + 8<i32>:word32]
	Mem0[r16 + 4<i32>:word32] = r4
	Mem0[r16:word32] = r3
	Mem0[r16 + 12<i32>:word32] = r5
	Mem0[r16 + 8<i32>:word32] = r7
	Mem0[r16 + 24<i32>:word32] = r17
	r1 = Mem0[r18 + 16<i32>:word32]
	Mem0[r16 + 28<i32>:word32] = r16
	Mem0[r16 + 20<i32>:word32] = r17
	call fn00009560 (retsize: 0;)
	// succ:  l0000C8CC
l0000C8CC:
	r19_r18 = Mem0[r29:word64]
	r17_r16 = Mem0[r29 + 8<i32>:word64]
	r0 = r16
	v22 = r30
	r31 = Mem0[v22 + 4<i32>:word32]
	r30 = Mem0[v22:word32]
	r29 = v22 + 8<i32>
	return
	// succ:  tensor_dup_exit
tensor_dup_exit:


// tensor_free
// Return size: 0
define tensor_free
tensor_free_entry:
	r29 = fp
	// succ:  l0000C8D8
l0000C8D8:
	v4 = r29 - 8<i32>
	Mem0[v4:word32] = r30
	Mem0[v4 + 4<i32>:word32] = r31
	r30 = v4
	r29 = v4 - 8<i32>
	Mem0[r29 - 16<i32>:word64] = r17_r16
	r16 = r0
	branch r0 == 0<32> l0000C8EC
	// succ:  l0000C8EC l0000C8EC
l0000C8EC:
	r0 = Mem0[r16 + 16<i32>:word32]
	v10 = r30
	r31 = Mem0[v10 + 4<i32>:word32]
	r30 = Mem0[v10:word32]
	r29 = v10 + 8<i32>
	r17_r16 = Mem0[r29:word64]
	// succ:  l0000C97C
l0000C97C:
	r0 = Mem0[r0:word32]
	r0 = Mem0[r0:word32]
	// succ:  l0000C97C_thunk_find_last_consumer
l0000C97C_thunk_find_last_consumer:
	call find_last_consumer (retsize: 0;)
	return
	// succ:  tensor_free_exit
tensor_free_exit:


// do_perfinfo_reset
// Return size: 0
define do_perfinfo_reset
do_perfinfo_reset_entry:
	r29 = fp
	// succ:  l0000C900
l0000C900:
	v4 = r29 - 8<i32>
	Mem0[v4:word32] = r30
	Mem0[v4 + 4<i32>:word32] = r31
	r30 = v4
	r29 = v4 - 0<i32>
	r2 = r0
	branch r3 == 0<32> l0000C91C
l0000C910:
	Mem0[r3 + 48<i32>:word64] = r5_r4
	// succ:  l0000C914 l0000C91C
l0000C914:
	r3 = Mem0[r2:word32]
	r5_r4 = 0<64>
	branch r3 == 0<32> l0000C910
	goto l0000C920
	// succ:  l0000C920 l0000C910
l0000C91C:
	Mem0[r2 + 52<i32>:word32] = r1
	r3 = r1 & 0xFF<32>
	r0 = 5<32>
	goto l0000C924
	// succ:  l0000C924
l0000C920:
	r3 = Mem0[r3 + 36<i32>:word32]
	Mem0[r2 + 52<i32>:word32] = r1
	r3 = r1 & 0xFF<32>
	// succ:  l0000C924
l0000C924:
	call fn00009640 (retsize: 0;)
	r1 = __set_bit<word32,word32>(r3, 0x10<32>)
	v12 = r30
	r31 = Mem0[v12 + 4<i32>:word32]
	r30 = Mem0[v12:word32]
	r29 = v12 + 8<i32>
	return
	// succ:  do_perfinfo_reset_exit
do_perfinfo_reset_exit:


// do_perfinfo_get
// Return size: 0
define do_perfinfo_get
do_perfinfo_get_entry:
	r29 = fp
	// succ:  l0000C930
l0000C930:
	r3 = Mem0[r0:word32]
	r0 = 0<32>
	r4 = r1 + 8<32>
	r0 = 0<32>
	branch p0 l0000C96C
	// succ:  l0000C940 l0000C96C
l0000C940:
	p0 = r3 == 0<32>
	Mem0[r4 - 2<i32>:byte] = r5
	r5 = Mem0[r3 + 28<i32>:word32]
	r0 = r0 + 1<32>
	Mem0[r4 - 4<i32>:word32] = r1
	r7_r6 = Mem0[r3 + 48<i32>:word64]
	Mem0[r4:word64] = r7_r6
	r4 = r4 + 0x10<32>
	branch r3 == 0<32> l0000C940
	goto l0000C970
	// succ:  l0000C970 l0000C940
l0000C96C:
	return
	// succ:  do_perfinfo_get_exit
l0000C970:
	r3 = Mem0[r3 + 36<i32>:word32]
	return
	// succ:  do_perfinfo_get_exit
do_perfinfo_get_exit:


// find_last_consumer
// Return size: 0
define find_last_consumer
find_last_consumer_entry:
	r29 = fp
	// succ:  l0000C980
l0000C980:
	v4 = r29 - 8<i32>
	Mem0[v4:word32] = r30
	Mem0[v4 + 4<i32>:word32] = r31
	r30 = v4
	r29 = v4 - 56<i32>
	Mem0[r29 - 16<i32>:word64] = r17_r16
	r17_r16 = r1_r0
	Mem0[r29 + 40<i32>:word64] = r19_r18
	r19 = Mem0[r16:word32]
	r18 = r2
	Mem0[r29 + 24<i32>:word64] = r23_r22
	Mem0[r29 + 32<i32>:word64] = r21_r20
	r0 = r17 + 0<32>
	p0 = r19 == 0<32>
	Mem0[r29 + 16<i32>:word64] = r25_r24
	// succ:  l0000CA2C
l0000CA2C:
	r19_r18 = Mem0[r29 + 40<i32>:word64]
	r17_r16 = Mem0[r29 + 48<i32>:word64]
	r23_r22 = Mem0[r29 + 24<i32>:word64]
	r21_r20 = Mem0[r29 + 32<i32>:word64]
	v21 = r30
	r31 = Mem0[v21 + 4<i32>:word32]
	r30 = Mem0[v21:word32]
	r29 = v21 + 8<i32>
	return
	// succ:  find_last_consumer_exit
find_last_consumer_exit:


// find_first_consumer
// Return size: 0
define find_first_consumer
find_first_consumer_entry:
	r29 = fp
	// succ:  l0000CA40
l0000CA40:
	v4 = r29 - 8<i32>
	Mem0[v4:word32] = r30
	Mem0[v4 + 4<i32>:word32] = r31
	r30 = v4
	r29 = v4 - 48<i32>
	Mem0[r29 - 16<i32>:word64] = r17_r16
	r17_r16 = r0_r1
	Mem0[r29 + 32<i32>:word64] = r19_r18
	r19 = Mem0[r17:word32]
	r18 = r2
	Mem0[r29 + 24<i32>:word64] = r21_r20
	Mem0[r29 + 16<i32>:word64] = r23_r22
	branch p0 l0000CAC4
	// succ:  l0000CA5C l0000CAC4
l0000CA5C:
	p0 = r11 == 0<32>
	r20 = Mem0[r16 + 28<i32>:word32]
	r21 = 0<32>
	// succ:  l0000CA60
l0000CA60:
	branch r2 == 0<32> l0000CAB4
l0000CA64:
	branch r2 == 0<32> l0000CAB8
	// succ:  l0000CA6C l0000CAB4 l0000CAB8
l0000CA6C:
	r2 = Mem0[r19 + 16<i32>:word32]
	r3 = Mem0[r19 + 12<i32>:word32]
	// succ:  l0000CA70
l0000CA70:
	r4 = r3 + r23
	branch r4 == r20 l0000CAA8
	// succ:  l0000CA80 l0000CAA8
l0000CA80:
	r4 = Mem0[r4 - 4<i32>:word32]
	branch r3 == r18 l0000CAAC
	// succ:  l0000CA88 l0000CAAC
l0000CA88:
	r16 = r19 + 0<32>
	goto l0000CAC8
	// succ:  l0000CAC8
l0000CAA8:
	branch r2 >u r22 l0000CA6C
	goto l0000CAB8
	// succ:  l0000CAB8 l0000CA6C
l0000CAAC:
	branch r2 >u r22 l0000CA70
	goto l0000CAB8
	// succ:  l0000CAB8 l0000CA70
l0000CAB4:
	branch r19 == 0<32> l0000CA60
	goto l0000CAC8
	// succ:  l0000CAC8 l0000CA60
l0000CAB8:
	r22 = r22 + 1<32>
	branch r19 == 0<32> l0000CA64
	goto l0000CAC8
	// succ:  l0000CAC8 l0000CA64
l0000CAC4:
	r19_r18 = Mem0[r29 + 32<i32>:word64]
	r17_r16 = Mem0[r29 + 40<i32>:word64]
	r0 = r16
	goto l0000CACC
	// succ:  l0000CACC
l0000CAC8:
	r19_r18 = Mem0[r29 + 32<i32>:word64]
	r17_r16 = Mem0[r29 + 40<i32>:word64]
	// succ:  l0000CACC
l0000CACC:
	r23_r22 = Mem0[r29 + 16<i32>:word64]
	r21_r20 = Mem0[r29 + 24<i32>:word64]
	v26 = r30
	r31 = Mem0[v26 + 4<i32>:word32]
	r30 = Mem0[v26:word32]
	r29 = v26 + 8<i32>
	return
	// succ:  find_first_consumer_exit
find_first_consumer_exit:


// logmsg_function
// Return size: 0
define logmsg_function
logmsg_function_entry:
	r29 = fp
	// succ:  l0000CAD4
l0000CAD4:
	v4 = r29 - 8<i32>
	Mem0[v4:word32] = r30
	Mem0[v4 + 4<i32>:word32] = r31
	r30 = v4
	r29 = v4 - 8<i32>
	r3 = 0<32>
	r0 = 0x00025894<p32>
	r5 = r29 + 0x10<32>
	r1 = 0x3C<32>
	r4 = 0x000258AB<p32>
	Mem0[r29 + 1<i32>:byte] = r6
	r6 = r29 + 0x10<32>
	call logv (retsize: 0;)
	r0 = Mem0[r0:word32]
	r0 = Mem0[r0:word32]
	// succ:  l0000CAFC_thunk_nn_os_workers_kill
l0000CAFC_thunk_nn_os_workers_kill:
	call nn_os_workers_kill (retsize: 0;)
	return
	// succ:  logmsg_function_exit
logmsg_function_exit:


// nn_os_workers_kill
// Return size: 0
define nn_os_workers_kill
nn_os_workers_kill_entry:
	r29 = fp
	// succ:  l0000CB00
l0000CB00:
	v4 = r29 - 8<i32>
	Mem0[v4:word32] = r30
	Mem0[v4 + 4<i32>:word32] = r31
	r30 = v4
	r29 = v4 - 8<i32>
	Mem0[r29 - 16<i32>:word64] = r17_r16
	r16 = r0
	r0 = Mem0[r16 + 68<i32>:word32]
	call qurt_pipe_send.1.1_i64_0 (retsize: 0;)
	r0 = Mem0[r16 + 72<i32>:word32]
	call qurt_pipe_send.1.1_i64_0 (retsize: 0;)
	r17_r16 = Mem0[r29:word64]
	r0 = Mem0[r16 + 72<i32>:word32]
	v10 = r30
	r31 = Mem0[v10 + 4<i32>:word32]
	r30 = Mem0[v10:word32]
	r29 = v10 + 8<i32>
	// succ:  l0000CB20_thunk_qurt_pipe_send.1.1_i64_0
l0000CB20_thunk_qurt_pipe_send.1.1_i64_0:
	call qurt_pipe_send.1.1_i64_0 (retsize: 0;)
	return
	// succ:  nn_os_workers_kill_exit
nn_os_workers_kill_exit:


// nn_os_work_for_vector
// Return size: 0
define nn_os_work_for_vector
nn_os_work_for_vector_entry:
	r29 = fp
	// succ:  l0000CB28
l0000CB28:
	r0 = Mem0[r0 + 68<i32>:word32]
	r3_r2 = r2_r1
	// succ:  l0000CB28_thunk_fn00009650
l0000CB28_thunk_fn00009650:
	call fn00009650 (retsize: 0;)
	return
	// succ:  nn_os_work_for_vector_exit
nn_os_work_for_vector_exit:


// nn_os_work_for_scalar
// Return size: 0
define nn_os_work_for_scalar
nn_os_work_for_scalar_entry:
	r29 = fp
	// succ:  l0000CB34
l0000CB34:
	r0 = Mem0[r0 + 72<i32>:word32]
	r3_r2 = r2_r1
	// succ:  l0000CB34_thunk_fn00009650
l0000CB34_thunk_fn00009650:
	call fn00009650 (retsize: 0;)
	return
	// succ:  nn_os_work_for_scalar_exit
nn_os_work_for_scalar_exit:


// nn_os_vector_acquire
// Return size: 0
define nn_os_vector_acquire
nn_os_vector_acquire_entry:
	r29 = fp
	// succ:  l0000CB40
l0000CB40:
	v4 = r29 - 8<i32>
	Mem0[v4:word32] = r30
	Mem0[v4 + 4<i32>:word32] = r31
	r30 = v4
	r29 = v4 - 0<i32>
	call dspCV_hvx_lock.1.0_i8_2.1_i32_0 (retsize: 0;)
	v7 = r30
	r31 = Mem0[v7 + 4<i32>:word32]
	r30 = Mem0[v7:word32]
	r29 = v7 + 8<i32>
	return
	// succ:  nn_os_vector_acquire_exit
nn_os_vector_acquire_exit:


// nn_os_vector_release
// Return size: 0
define nn_os_vector_release
nn_os_vector_release_entry:
	r29 = fp
	// succ:  l0000CB4C
l0000CB4C:
	// succ:  l0000CB4C_thunk_fn00009660
l0000CB4C_thunk_fn00009660:
	call fn00009660 (retsize: 0;)
	return
	// succ:  nn_os_vector_release_exit
nn_os_vector_release_exit:


// nn_os_workers_spawn
// Return size: 0
define nn_os_workers_spawn
nn_os_workers_spawn_entry:
	r29 = fp
	// succ:  l0000CB50
l0000CB50:
	v4 = r29 - 8<i32>
	Mem0[v4:word32] = r30
	Mem0[v4 + 4<i32>:word32] = r31
	r30 = v4
	r29 = v4 - 232<i32>
	Mem0[r29 + 224<i32>:word64] = r17_r16
	r2 = r29 + 0x90<32>
	Mem0[r29 + 192<i32>:word64] = r25_r24
	Mem0[r29 + 200<i32>:word64] = r23_r22
	r16 = r2 + 8<32>
	Mem0[r29 + 208<i32>:word64] = r21_r20
	Mem0[r29 + 216<i32>:word64] = r19_r18
	r0 = r16
	r18 = r0
	Mem0[r29 + 184<i32>:word64] = r27_r26
	call qurt_sem_init_val.1.1_i16_0 (retsize: 0;)
	r19 = r29 + 4<32>
	r0 = 0x20<32>
	Mem0[r19 + 8<i32>:byte] = 0<8>
	Mem0[r29 + 144<i32>:word32] = r18
	r17 = r18 + 0x44<32>
	call fn00009500 (retsize: 0;)
	Mem0[r19 + 4<i32>:word32] = 0xFFFFFF84<32>
	Mem0[r29 + 4<i32>:word32] = r0
	r0 = r17
	r1 = r29 + 4<32>
	call fn00009670 (retsize: 0;)
	Mem0[r19 + 8<i32>:byte] = 0<32>
	r0 = 0x20<32>
	r18 = r18 + 0x48<32>
	call fn00009500 (retsize: 0;)
	Mem0[r19 + 4<i32>:word32] = 0xFFFFFF84<32>
	Mem0[r29 + 4<i32>:word32] = r0
	r0 = r18
	r1 = r29 + 4<32>
	call fn00009670 (retsize: 0;)
	r3 = r29 + 0xA8<32>
	r2 = r29 + 0x10<32>
	r23 = 0x100<32>
	r22 = 0xFF<32>
	r27_r26 = 0x200000000001<64>
	r25_r24 = 0x8100000000<64>
	r21 = r2 + 0x3C<32>
	r19 = __set_bit<word32,word32>(r3, 4<32>)
	// succ:  l0000CBE4
l0000CBE4:
	Mem0[r21 - 28<i32>:byte] = r24
	r3 = 0xFFFE<32>
	r20 = r21 + 0xFFFFFFE4<32>
	Mem0[r21 - 11<i32>:byte] = r22
	Mem0[r21 - 8<i32>:byte] = r24
	r1 = 0x0002591A<p32>
	Mem0[r21 - 10<i32>:word16] = r23
	Mem0[r21 - 12<i32>:byte] = r24
	r0 = r20
	r2 = 0x10<32>
	Mem0[r21 - 6<i32>:word16] = r3
	Mem0[r21 - 7<i32>:byte] = r22
	Mem0[r21:word32] = 0<32>
	Mem0[r21 - 4<i32>:word32] = r24
	call fn00009680 (retsize: 0;)
	Mem0[r21 - 13<i32>:byte] = r24
	r0 = 0x2000<32>
	call fn00009500 (retsize: 0;)
	Mem0[r21:word32] = r0
	p0 = r26 > 1<32>
	r2 = 0x0000CC94<p32>
	Mem0[r21 - 10<i32>:word16] = r25
	Mem0[r21 - 4<i32>:word32] = r27
	r1_r0 = r20_r19
	r3 = r29 + 0x90<32>
	r4 = p0 ? r18 : r17
	Mem0[r29 + 37<i32>:byte] = r4
	r4 = Mem0[r4:word32]
	call fn00009690 (retsize: 0;)
	r0 = r16
	r19 = r19 + 4<32>
	r25 = r25 + 1<32>
	branch r26 == 4<32> l0000CBE4
	// succ:  l0000CC80 l0000CBE4
l0000CC80:
	r26 = r26 + 1<32>
	r21 = r21 + 0x20<32>
	r19_r18 = Mem0[r29 + 216<i32>:word64]
	r17_r16 = Mem0[r29 + 224<i32>:word64]
	r23_r22 = Mem0[r29 + 200<i32>:word64]
	r21_r20 = Mem0[r29 + 208<i32>:word64]
	r27_r26 = Mem0[r29 + 184<i32>:word64]
	r25_r24 = Mem0[r29 + 192<i32>:word64]
	v34 = r30
	r31 = Mem0[v34 + 4<i32>:word32]
	r30 = Mem0[v34:word32]
	r29 = v34 + 8<i32>
	return
	// succ:  nn_os_workers_spawn_exit
nn_os_workers_spawn_exit:


// qurt_worker
// Return size: 0
define qurt_worker
qurt_worker_entry:
	r29 = fp
	goto l0000CC94
	// succ:  l0000CC94
l000096C0:
	r14 = 0x0002B194<p32>
	r28 = Mem0[r14:word32]
	call r28 (retsize: 0;)
	return
	// succ:  qurt_worker_exit
l0000CC94:
	v4 = r29 - 8<i32>
	Mem0[v4:word32] = r30
	Mem0[v4 + 4<i32>:word32] = r31
	r30 = v4
	r29 = v4 - 16<i32>
	Mem0[r29 - 16<i32>:word64] = r17_r16
	r0 = r0 + 8<i32>
	r17 = Mem0[r0:word32]
	r16 = Mem0[r0 + 4<i32>:word32]
	Mem0[r29:word64] = r19_r18
	call qurt_sem_add.1.1_i32_1 (retsize: 0;)
	r0 = r16
	call fn000096B0 (retsize: 0;)
	r19_r18 = r1_r0
	branch p0 l0000CCD8
	// succ:  l0000CCBC l0000CCD8
l0000CCBC:
	p0 = r10 == 0<32>
	r3_r2 = r19_r18 >>u 0x20<32>
	call r18 (retsize: 0;)
	r1_r0 = r2_r17
	r0 = r16
	call fn000096B0 (retsize: 0;)
	r19_r18 = r1_r0
	branch p0 l0000CCBC
	// succ:  l0000CCD8 l0000CCBC
l0000CCD8:
	p0 = r10 == 0<32>
	r3_r2 = r19_r18 >>u 0x20<32>
	r19_r18 = Mem0[r29:word64]
	r17_r16 = Mem0[r29 + 8<i32>:word64]
	r0 = 0<32>
	v20 = r30
	r31 = Mem0[v20 + 4<i32>:word32]
	r30 = Mem0[v20:word32]
	r29 = v20 + 8<i32>
	goto l000096C0
	// succ:  l000096C0
qurt_worker_exit:


// nn_os_hvx_power_on
// Return size: 0
define nn_os_hvx_power_on
nn_os_hvx_power_on_entry:
	r29 = fp
	// succ:  l0000CCE8
l0000CCE8:
	v4 = r29 - 8<i32>
	Mem0[v4:word32] = r30
	Mem0[v4 + 4<i32>:word32] = r31
	r30 = v4
	r29 = v4 - 8<i32>
	Mem0[r29 - 16<i32>:word64] = r17_r16
	r16 = r0
	call fn000096D0 (retsize: 0;)
	r2 = r16 + 0<32>
	branch p0 l0000CD00
	// succ:  l0000CCFC l0000CD00
l0000CCFC:
	p0 = r0 == 0<32>
	call errlog_function (retsize: 0;)
	// succ:  l0000CD00
l0000CD00:
	v12 = r30
	r31 = Mem0[v12 + 4<i32>:word32]
	r30 = Mem0[v12:word32]
	r29 = v12 + 8<i32>
	return
	// succ:  nn_os_hvx_power_on_exit
nn_os_hvx_power_on_exit:


// errlog_function
// Return size: 0
define errlog_function
errlog_function_entry:
	r29 = fp
	// succ:  l0000CD04
l0000CD04:
	v4 = r29 - 8<i32>
	Mem0[v4:word32] = r30
	Mem0[v4 + 4<i32>:word32] = r31
	r30 = v4
	r29 = v4 - 8<i32>
	r3 = 0<32>
	r0 = 0x00025924<p32>
	r5 = r29 + 0x10<32>
	r1 = 0xC2<32>
	r4 = 0x00025938<p32>
	Mem0[r29 + 1<i32>:byte] = r6
	r6 = r29 + 0x10<32>
	call logv (retsize: 0;)
	// succ:  l0000CD20_thunk_nn_os_hvx_power_off
l0000CD20_thunk_nn_os_hvx_power_off:
	call nn_os_hvx_power_off (retsize: 0;)
	return
	// succ:  errlog_function_exit
errlog_function_exit:


// nn_os_hvx_power_off
// Return size: 0
define nn_os_hvx_power_off
nn_os_hvx_power_off_entry:
	r29 = fp
	goto l0000CD30
	// succ:  l0000CD30
l000096E0:
	r14 = 0x0002B19C<p32>
	r28 = Mem0[r14:word32]
	call r28 (retsize: 0;)
	return
	// succ:  nn_os_hvx_power_off_exit
l0000CD30:
	goto l000096E0
	// succ:  l000096E0
nn_os_hvx_power_off_exit:


// nn_os_get_perfcount
// Return size: 0
define nn_os_get_perfcount
nn_os_get_perfcount_entry:
	r29 = fp
	goto l0000CD34
	// succ:  l0000CD34
l00009700:
	r14 = 0x0002B1A4<p32>
	r28 = Mem0[r14:word32]
	call r28 (retsize: 0;)
	return
	// succ:  nn_os_get_perfcount_exit
l0000CD34:
	v4 = r29 - 8<i32>
	Mem0[v4:word32] = r30
	Mem0[v4 + 4<i32>:word32] = r31
	r30 = v4
	r29 = v4 - 8<i32>
	Mem0[r29:word64] = r17_r16
	r2 = Mem0[r0 + 20<i32>:word32]
	branch p0 l0000CD54
	// succ:  l0000CD44 l0000CD54
l0000CD44:
	p0 = r2 == 5<32>
	r0 = 0<32>
	branch p0 l0000CD60
	// succ:  l0000CD4C l0000CD60
l0000CD4C:
	p0 = r2 == 0<32>
	v11 = r30
	r31 = Mem0[v11 + 4<i32>:word32]
	r30 = Mem0[v11:word32]
	r29 = v11 + 8<i32>
	r17_r16 = Mem0[r29:word64]
	// succ:  l0000CD4C_thunk_fn00009530
l0000CD4C_thunk_fn00009530:
	call fn00009530 (retsize: 0;)
	return
	// succ:  nn_os_get_perfcount_exit
l0000CD54:
	call fn000096F0 (retsize: 0;)
	v12 = r30
	r31 = Mem0[v12 + 4<i32>:word32]
	r30 = Mem0[v12:word32]
	r29 = v12 + 8<i32>
	r17_r16 = Mem0[r29:word64]
	goto l00009700
	// succ:  l00009700
l0000CD60:
	call fn00009710 (retsize: 0;)
	r16 = r0
	r0 = 1<32>
	call fn00009710 (retsize: 0;)
	r17 = r0
	v18 = r30
	r31 = Mem0[v18 + 4<i32>:word32]
	r30 = Mem0[v18:word32]
	r29 = v18 + 8<i32>
	return
	// succ:  nn_os_get_perfcount_exit
nn_os_get_perfcount_exit:


// nn_os_vector_workers_acquire
// Return size: 0
define nn_os_vector_workers_acquire
nn_os_vector_workers_acquire_entry:
	r29 = fp
	// succ:  l0000CD80
l0000CD80:
	v4 = r29 - 8<i32>
	Mem0[v4:word32] = r30
	Mem0[v4 + 4<i32>:word32] = r31
	r30 = v4
	r29 = v4 - 16<i32>
	Mem0[r29 - 24<i32>:word64] = r19_r18
	r18 = 0x0002B110<p32>
	Mem0[r29 + 8<i32>:word64] = r17_r16
	r16 = r0
	r17 = Mem0[r18 - 48<i32>:word32]
	r0 = r17
	call qurt_sem_init_val.1.1_i16_0 (retsize: 0;)
	r18 = Mem0[r18 - 32<i32>:word32]
	r0 = r18
	call qurt_sem_init_val.1.1_i16_0 (retsize: 0;)
	r19 = 0x0002B6A0<p32>
	r0 = Mem0[r16 + 68<i32>:word32]
	r3 = r19 + 4<32>
	r2 = 0x0000CDE8<p32>
	call fn00009650 (retsize: 0;)
	r0 = r17
	call fn000096A0 (retsize: 0;)
	r0 = r18
	call qurt_sem_add.1.1_i32_1 (retsize: 0;)
	call dspCV_hvx_lock.1.0_i8_2.1_i32_0 (retsize: 0;)
	Mem0[r19:word32] = 0<32>
	r17_r16 = Mem0[r29 + 8<i32>:word64]
	v17 = r30
	r31 = Mem0[v17 + 4<i32>:word32]
	r30 = Mem0[v17:word32]
	r29 = v17 + 8<i32>
	return
	// succ:  nn_os_vector_workers_acquire_exit
nn_os_vector_workers_acquire_exit:


// worker_acquire
// Return size: 0
define worker_acquire
worker_acquire_entry:
	r29 = fp
	// succ:  l0000CDE8
l0000CDE8:
	v4 = r29 - 8<i32>
	Mem0[v4:word32] = r30
	Mem0[v4 + 4<i32>:word32] = r31
	r30 = v4
	r29 = v4 - 8<i32>
	Mem0[r29 - 16<i32>:word64] = r17_r16
	r16 = r1
	call dspCV_hvx_lock.1.0_i8_2.1_i32_0 (retsize: 0;)
	Mem0[r16:word32] = 0<32>
	r17 = 0x0002B110<p32>
	r0 = Mem0[r17 - 48<i32>:word32]
	call qurt_sem_add.1.1_i32_1 (retsize: 0;)
	r17_r16 = Mem0[r29:word64]
	r0 = Mem0[r17 - 32<i32>:word32]
	v13 = r30
	r31 = Mem0[v13 + 4<i32>:word32]
	r30 = Mem0[v13:word32]
	r29 = v13 + 8<i32>
	// succ:  l0000CE18_thunk_fn000096A0
l0000CE18_thunk_fn000096A0:
	call fn000096A0 (retsize: 0;)
	return
	// succ:  worker_acquire_exit
worker_acquire_exit:


// nn_os_vector_workers_release
// Return size: 0
define nn_os_vector_workers_release
nn_os_vector_workers_release_entry:
	r29 = fp
	// succ:  l0000CE20
l0000CE20:
	v4 = r29 - 8<i32>
	Mem0[v4:word32] = r30
	Mem0[v4 + 4<i32>:word32] = r31
	r30 = v4
	r29 = v4 - 16<i32>
	Mem0[r29 - 24<i32>:word64] = r19_r18
	r18 = 0x0002B110<p32>
	Mem0[r29 + 8<i32>:word64] = r17_r16
	r16 = r0
	r17 = Mem0[r18 - 48<i32>:word32]
	r0 = r17
	call qurt_sem_init_val.1.1_i16_0 (retsize: 0;)
	r18 = Mem0[r18 - 32<i32>:word32]
	r0 = r18
	call qurt_sem_init_val.1.1_i16_0 (retsize: 0;)
	r0 = Mem0[r16 + 68<i32>:word32]
	r4 = 0x0002B6A0<p32>
	r3 = r4 + 4<32>
	call fn00009650 (retsize: 0;)
	r2 = 0x0000CE88<p32>
	r0 = r17
	call fn000096A0 (retsize: 0;)
	r19_r18 = Mem0[r29:word64]
	r17_r16 = Mem0[r29 + 8<i32>:word64]
	r0 = r18
	call qurt_sem_add.1.1_i32_1 (retsize: 0;)
	v17 = r30
	r31 = Mem0[v17 + 4<i32>:word32]
	r30 = Mem0[v17:word32]
	r29 = v17 + 8<i32>
	// succ:  l0000CE80_thunk_fn00009660
l0000CE80_thunk_fn00009660:
	call fn00009660 (retsize: 0;)
	return
	// succ:  nn_os_vector_workers_release_exit
nn_os_vector_workers_release_exit:


// worker_release
// Return size: 0
define worker_release
worker_release_entry:
	r29 = fp
	// succ:  l0000CE88
l0000CE88:
	v4 = r29 - 8<i32>
	Mem0[v4:word32] = r30
	Mem0[v4 + 4<i32>:word32] = r31
	r30 = v4
	r29 = v4 - 8<i32>
	Mem0[r29 - 16<i32>:word64] = r17_r16
	call fn00009660 (retsize: 0;)
	r16 = 0x0002B110<p32>
	r0 = Mem0[r16 - 48<i32>:word32]
	call qurt_sem_add.1.1_i32_1 (retsize: 0;)
	r17_r16 = Mem0[r29:word64]
	r0 = Mem0[r16 - 32<i32>:word32]
	v11 = r30
	r31 = Mem0[v11 + 4<i32>:word32]
	r30 = Mem0[v11:word32]
	r29 = v11 + 8<i32>
	// succ:  l0000CEB0_thunk_fn000096A0
l0000CEB0_thunk_fn000096A0:
	call fn000096A0 (retsize: 0;)
	return
	// succ:  worker_release_exit
worker_release_exit:


// dspCV_hvx_lock.1.0_i8_2.1_i32_0
// Return size: 0
define dspCV_hvx_lock.1.0_i8_2.1_i32_0
dspCV_hvx_lock.1.0_i8_2.1_i32_0_entry:
	r29 = fp
	goto l0000CEB8
	// succ:  l0000CEB8
l00009720:
	r14 = 0x0002B1AC<p32>
	r28 = Mem0[r14:word32]
	call r28 (retsize: 0;)
	return
	// succ:  dspCV_hvx_lock.1.0_i8_2.1_i32_0_exit
l0000CEB8:
	r1_r0 = 2<64>
	goto l00009720
	// succ:  l00009720
dspCV_hvx_lock.1.0_i8_2.1_i32_0_exit:


// qurt_sem_add.1.1_i32_1
// Return size: 0
define qurt_sem_add.1.1_i32_1
qurt_sem_add.1.1_i32_1_entry:
	r29 = fp
	// succ:  l0000CEC0
l0000CEC0:
	// succ:  l0000CEC0_thunk_fn0000CF80
l0000CEC0_thunk_fn0000CF80:
	call fn0000CF80 (retsize: 0;)
	return
	// succ:  qurt_sem_add.1.1_i32_1_exit
qurt_sem_add.1.1_i32_1_exit:


// qurt_sem_init_val.1.1_i16_0
// Return size: 0
define qurt_sem_init_val.1.1_i16_0
qurt_sem_init_val.1.1_i16_0_entry:
	r29 = fp
	// succ:  l0000CEC8
l0000CEC8:
	// succ:  l0000CEC8_thunk_fn0000CFA8
l0000CEC8_thunk_fn0000CFA8:
	call fn0000CFA8 (retsize: 0;)
	return
	// succ:  qurt_sem_init_val.1.1_i16_0_exit
qurt_sem_init_val.1.1_i16_0_exit:


// qurt_pipe_send.1.1_i64_0
// Return size: 0
define qurt_pipe_send.1.1_i64_0
qurt_pipe_send.1.1_i64_0_entry:
	r29 = fp
	goto l0000CED0
	// succ:  l0000CED0
l00009650_in_qurt_pipe_send.1.1_i64_0:
	r14 = 0x0002B178<p32>
	r28 = Mem0[r14:word32]
	call r28 (retsize: 0;)
	return
	// succ:  qurt_pipe_send.1.1_i64_0_exit
l0000CED0:
	r3_r2 = 0<64>
	goto l00009650_in_qurt_pipe_send.1.1_i64_0
	// succ:  l00009650_in_qurt_pipe_send.1.1_i64_0
qurt_pipe_send.1.1_i64_0_exit:


// transpack
// Return size: 0
define transpack
transpack_entry:
	r29 = fp
	// succ:  l0000CEE0
l0000CEE0:
	branch p0 l0000CF74
	// succ:  l0000CEE8 l0000CF74
l0000CEE8:
	p0 = r2 > 0<32>
	r4 = r1 << 3<32>
	r5 = 0<32>
	r3 = r3 + 3<32>
	// succ:  l0000CEEC
l0000CEEC:
	r9 = r1 + 3<32>
	r8 = r5 + r2
	branch p0 l0000CF68
	// succ:  l0000CEF8 l0000CF68
l0000CEF8:
	p0 = r1 > 0<32>
	r7_r6 = SEQ(0<32>, r3)
	r9 = r9 >>u 2<32>
	__loop(1<i32>, 0x0000CF04<p32>, r9)
	r9 = r6
	r13 = r7 + 3<32>
	r12 = r7 + 2<32>
	r14 = r7 * r2
	r13_r12 = r0_r0
	r10 = r13 * r2
	r28 = r12 * r2
	r15_r14 = r0_r0
	r13 = r13 + (r14 + r5)
	r12 = r12 + (r8 + r14)
	r15 = r15 + (r10 + r5)
	r14 = r14 + (r28 + r5)
	__loop(0<i32>, 0x0000CF38<p32>, 0x10<32>)
	Mem0[r9 - 3<i32>:byte] = r28
	r13 = r13 + 1<i32>
	r28 = Mem0[r13:byte]
	Mem0[r9 - 2<i32>:byte] = r10
	r14 = r14 + 1<i32>
	r28 = Mem0[r14:byte]
	Mem0[r9 - 1<i32>:byte] = r28
	r15 = r15 + 1<i32>
	r10 = Mem0[r15:byte]
	Mem0[r9:byte] = r10
	r9 = r9 + 4<32>
	r6 = r6 + 0x80<32>
	r7 = r7 + 4<32>
	// succ:  l0000CF68
l0000CF68:
	branch r2 >u r5 l0000CEEC
	// succ:  l0000CF68_thunk_pad2d l0000CEEC
l0000CF68_thunk_pad2d:
	call pad2d (retsize: 0;)
	return
	// succ:  transpack_exit
l0000CF74:
	return
	// succ:  transpack_exit
transpack_exit:


// pad2d
// Return size: 0
define pad2d
pad2d_entry:
	r29 = fp
	// succ:  l0000CF78
l0000CF78:
	v4 = r29 - 8<i32>
	Mem0[v4:word32] = r30
	Mem0[v4 + 4<i32>:word32] = r31
	r30 = v4
	r29 = v4 - 48<i32>
	Mem0[r29 - 24<i32>:word64] = r19_r18
	Mem0[r29 + 40<i32>:word64] = r17_r16
	r19 = r4
	r17_r16 = r5_r3
	// succ:  l0000CF7C_thunk_fn0000CF80
l0000CF7C_thunk_fn0000CF80:
	call fn0000CF80 (retsize: 0;)
	return
	// succ:  pad2d_exit
l0000CFE8:
	r16 = r16 + r17
	r2 = r17
	r1_r0 = r18_r16
	call vmemset_asm (retsize: 0;)
	// succ:  l0000CFEC l0000CFFC l0000CFF4
l0000CFEC:
	r19 = r19 - r20
	r16 = r16 + r17
	r2 = r17
	r1_r0 = r18_r16
	// succ:  l0000CFF4
l0000CFF4:
	branch r19 == 0<32> l0000CFE8
	goto l0000D000
	// succ:  l0000D000 l0000CFE8
l0000CFFC:
	r19_r18 = Mem0[r29 + 32<i32>:word64]
	r17_r16 = Mem0[r29 + 40<i32>:word64]
	// succ:  l0000D000
l0000D000:
	r19 = r19 + 0xFFFFFFFF<32>
	r23_r22 = Mem0[r29 + 16<i32>:word64]
	r21_r20 = Mem0[r29 + 24<i32>:word64]
	r27_r26 = Mem0[r29:word64]
	r25_r24 = Mem0[r29 + 8<i32>:word64]
	v36 = r30
	r31 = Mem0[v36 + 4<i32>:word32]
	r30 = Mem0[v36:word32]
	r29 = v36 + 8<i32>
	return
	// succ:  pad2d_exit
pad2d_exit:


// fn0000CF80
// Return size: 0
define fn0000CF80
fn0000CF80_entry:
	r29 = fp
	// succ:  l0000CF80
l0000CF80:
	Mem0[r29 + 40<i32>:word64] = r17_r16
	r19 = r4
	Mem0[r29 + 8<i32>:word64] = r25_r24
	Mem0[r29 + 24<i32>:word64] = r21_r20
	Mem0[r29 + 16<i32>:word64] = r23_r22
	r22 = r2
	r21_r20 = r0_r1
	Mem0[r29:word64] = r27_r26
	r18 = Mem0[r29 + 56<i32>:word32]
	r23 = r16 + 0<32>
	p0 = r20 > 0<32>
	r24 = r17 - r22
	r25 = r20 + 0<32>
	branch p0 l0000CFA4_thunk_fn0000CFE0
	goto l0000CFA4_thunk_fn0000CFB0
	// succ:  l0000CFA4_thunk_fn0000CFB0 l0000CFA4_thunk_fn0000CFE0
l0000CF80:
	Mem0[r29 + 8<i32>:word64] = r25_r24
	Mem0[r29 + 24<i32>:word64] = r21_r20
	Mem0[r29 + 16<i32>:word64] = r23_r22
	r22 = r2
	r21_r20 = r0_r1
	Mem0[r29:word64] = r27_r26
	r18 = Mem0[r29 + 56<i32>:word32]
	r23 = r16 + 0<32>
	p0 = r20 > 0<32>
	r24 = r17 - r22
	r25 = r20 + 0<32>
	branch p0 l0000CFE0
l0000CFA4_thunk_fn0000CFB0:
	call fn0000CFB0 (retsize: 0;)
	return
	// succ:  fn0000CF80_exit
l0000CFA4_thunk_fn0000CFE0:
	call fn0000CFE0 (retsize: 0;)
	return
	// succ:  fn0000CF80_exit
fn0000CF80_exit:


// fn0000CFA8
// Return size: 0
define fn0000CFA8
fn0000CFA8_entry:
	r29 = fp
	// succ:  l0000CFA8
l0000CFA8:
	r24 = r17 - r22
	r25 = r20 + 0<32>
	goto l0000CFA8_thunk_fn0000CFB0
	// succ:  l0000CFA8_thunk_fn0000CFB0
l0000CFA8:
	call fn0000CFB0 (retsize: 0;)
	return
	// succ:  l0000CFA8_thunk_fn0000CFB0 l0000CFA8_thunk_fn0000CFB0 fn0000CFA8_exit
l0000CFA8_thunk_fn0000CFB0:
	call fn0000CFB0 (retsize: 0;)
	return
	// succ:  fn0000CFA8_exit
l0000CFA8_thunk_fn0000CFB0:
	call fn0000CFB0 (retsize: 0;)
	return
	// succ:  fn0000CFA8_exit
l0000CFA8_thunk_fn0000CFB0:
	call fn0000CFB0 (retsize: 0;)
	return
	// succ:  fn0000CFA8_exit
fn0000CFA8_exit:


// fn0000CFB0
// Return size: 0
define fn0000CFB0
fn0000CFB0_entry:
	r29 = fp
	// succ:  l0000CFB0
l0000CFB0:
	r26 = r17 * r20
	// succ:  l0000CFB4
l0000CFB4:
	r1_r0 = r21_r23
	r2 = r22
	call vmemcpy_asm (retsize: 0;)
	r21 = r21 + r22
	r1 = r18
	r2 = r24
	r0 = r23 + r22
	r23 = r23 + r17
	call vmemset_asm (retsize: 0;)
	branch r25 == 0<32> l0000CFB4
	// succ:  l0000CFD4_thunk_fn0000CFE0 l0000CFB4
l0000CFD4_thunk_fn0000CFE0:
	call fn0000CFE0 (retsize: 0;)
	return
	// succ:  fn0000CFB0_exit
fn0000CFB0_exit:


// fn0000CFE0
// Return size: 0
define fn0000CFE0
fn0000CFE0_entry:
	r29 = fp
	// succ:  l0000CFE0
l0000CFE0:
	r25 = r25 + 0xFFFFFFFF<32>
	branch r19 > 0<32> l0000CFFC
fn0000CFE0_exit:


// unpad2d
// Return size: 0
define unpad2d
unpad2d_entry:
	r29 = fp
	// succ:  l0000D010
l0000D010:
	v4 = r29 - 8<i32>
	Mem0[v4:word32] = r30
	Mem0[v4 + 4<i32>:word32] = r31
	r30 = v4
	r29 = v4 - 24<i32>
	Mem0[r29 - 16<i32>:word64] = r17_r16
	Mem0[r29:word64] = r21_r20
	Mem0[r29 + 8<i32>:word64] = r19_r18
	r19_r18 = r5_r3
	r17_r16 = r2_r0
	branch r20 > 0<32> l0000D048
l0000D02C:
	r1_r0 = r16_r18
	r2 = r21
	call vmemcpy_asm (retsize: 0;)
	r16 = r16 + (r17 << 2<32>)
	// succ:  l0000D030 l0000D048 l0000D03C
l0000D030:
	r20 = r4
	r21 = r19 << 2<32>
	r1_r0 = r16_r18
	r2 = r21
	call fn00022964 (retsize: 0;)
	// succ:  l0000D03C
l0000D03C:
	branch r20 == 0<32> l0000D02C
	goto l0000D04C
	// succ:  l0000D04C l0000D02C
l0000D048:
	r19_r18 = Mem0[r29 + 8<i32>:word64]
	r17_r16 = Mem0[r29 + 16<i32>:word64]
	// succ:  l0000D04C
l0000D04C:
	r20 = r20 + 0xFFFFFFFF<32>
	r18 = r18 + (r19 << 2<32>)
	v24 = r30
	r31 = Mem0[v24 + 4<i32>:word32]
	r30 = Mem0[v24:word32]
	r29 = v24 + 8<i32>
	return
	// succ:  unpad2d_exit
unpad2d_exit:


// unpad2d_bytes
// Return size: 0
define unpad2d_bytes
unpad2d_bytes_entry:
	r29 = fp
	// succ:  l0000D050
l0000D050:
	v4 = r29 - 8<i32>
	Mem0[v4:word32] = r30
	Mem0[v4 + 4<i32>:word32] = r31
	r30 = v4
	r29 = v4 - 24<i32>
	Mem0[r29 - 16<i32>:word64] = r17_r16
	Mem0[r29:word64] = r21_r20
	Mem0[r29 + 8<i32>:word64] = r19_r18
	r19_r18 = r5_r3
	r17_r16 = r2_r0
	branch r20 > 0<32> l0000D080
l0000D068:
	r16 = r16 + r17
	r2 = r19
	r1_r0 = r16_r18
	call vmemcpy_asm (retsize: 0;)
	// succ:  l0000D06C l0000D080 l0000D074
l0000D06C:
	r20 = r4
	r16 = r16 + r17
	r2 = r19
	r1_r0 = r16_r18
	// succ:  l0000D074
l0000D074:
	branch r20 == 0<32> l0000D068
	goto l0000D084
	// succ:  l0000D084 l0000D068
l0000D080:
	r19_r18 = Mem0[r29 + 8<i32>:word64]
	r17_r16 = Mem0[r29 + 16<i32>:word64]
	// succ:  l0000D084
l0000D084:
	r20 = r20 + 0xFFFFFFFF<32>
	r18 = r18 + r19
	v24 = r30
	r31 = Mem0[v24 + 4<i32>:word32]
	r30 = Mem0[v24:word32]
	r29 = v24 + 8<i32>
	return
	// succ:  unpad2d_bytes_exit
unpad2d_bytes_exit:


// gemm_cn
// Return size: 0
define gemm_cn
gemm_cn_entry:
	r29 = fp
	// succ:  l0000D0A0
l0000D0A0:
	v4 = r29 - 8<i32>
	Mem0[v4:word32] = r30
	Mem0[v4 + 4<i32>:word32] = r31
	r30 = v4
	r29 = v4 - 8<i32>
	Mem0[r29 - 16<i32>:word64] = r17_r16
	branch p0 l0000D12C
	// succ:  l0000D0A8 l0000D12C
l0000D0A8:
	p0 = r5 > 0<32>
	r7 = Mem0[r29 + 20<i32>:word64]
	r6 = Mem0[r29 + 16<i32>:word64]
	r8 = 0<32>
	// succ:  l0000D0B0
l0000D0B0:
	r12 = r8
	branch p0 l0000D124
	// succ:  l0000D0BC l0000D124
l0000D0BC:
	p0 = r6 > 0<32>
	r13 = r8 * r6
	r9 = r2
	__loop(1<i32>, 0x0000D0CC<p32>, r6)
	r12 = r0 + r12 * r7
	r13 = r4 + (r13 << 2<32>)
	r14 = 0<32>
	r11 = r7 + 0xFFFFFFFF<32>
	branch p0 l0000D118
	// succ:  l0000D0D8 l0000D118
l0000D0D8:
	p0 = r7 > 0<32>
	r10 = Mem0[r9:byte]
	p0 = r7 >u 1<32>
	r28 = r9 + r6
	r15_r14 = SEQ(r12, 0<32>)
	r15 = r15 + 1<i32>
	r16 = Mem0[r15:byte]
	r10 = r10 + r3
	__loop(0<i32>, 0x0000D0FC<p32>, r11)
	r11 = r16 + r1
	branch p0 l0000D114
	// succ:  l0000D0FC l0000D114
l0000D0FC:
	r15 = r15 + 1<i32>
	r17 = Mem0[r15:byte]
	r16 = Mem0[r28:byte]
	r28 = r28 + r6
	r14 = r14 + r10 * r11
	r11 = r17 + r1
	r10 = r16 + r3
	// succ:  l0000D114
l0000D114:
	r14 = r14 + r10 * r11
	// succ:  l0000D118
l0000D118:
	Mem0[r13:word32] = r14
	r13 = r13 + 4<i32>
	r9 = r9 + 1<32>
	// succ:  l0000D124
l0000D124:
	branch r8 == r5 l0000D0B0
	// succ:  l0000D124_thunk_gemm_co l0000D0B0
l0000D124_thunk_gemm_co:
	call gemm_co (retsize: 0;)
	return
	// succ:  gemm_cn_exit
l0000D12C:
	v29 = r30
	r31 = Mem0[v29 + 4<i32>:word32]
	r30 = Mem0[v29:word32]
	r29 = v29 + 8<i32>
	return
	// succ:  gemm_cn_exit
gemm_cn_exit:


// gemm_co
// Return size: 0
define gemm_co
gemm_co_entry:
	r29 = fp
	// succ:  l0000D130
l0000D130:
	v4 = r29 - 8<i32>
	Mem0[v4:word32] = r30
	Mem0[v4 + 4<i32>:word32] = r31
	r30 = v4
	r29 = v4 - 24<i32>
	Mem0[r29 + 16<i32>:word64] = r17_r16
	r6 = Mem0[r29 + 32<i32>:word64]
	Mem0[r29:word64] = r21_r20
	Mem0[r29 + 8<i32>:word64] = r19_r18
	r12 = 0<32>
	p0 = r6 > 0<32>
	r7 = Mem0[r29 + 36<i32>:word32]
	r9 = Mem0[r29 + 40<i32>:word32]
	branch p0 l0000D2D8
	// succ:  l0000D150 l0000D2D8
l0000D150:
	r8 = Mem0[r29 + 44<i32>:word32]
	p0 = r5 > 0<32>
	r13 = r3 * r1
	r13 = r13 * r7
	// succ:  l0000D160
l0000D160:
	r15_r14 = SEQ(0<32>, r2)
	p1 = !(r12 == 0<32>)
	r14 = 0<32>
	branch p1 l0000D1B0
	// succ:  l0000D174 l0000D1B0
l0000D174:
	p1 = p1 | !p0
	__loop(1<i32>, 0x0000D178<p32>, r5)
	Mem0[r30 + r14 * 4<32>:word32] = r13
	r10 = r14 + 0<32>
	r28 = r13
	r15 = r9 + (r14 << 2<32>)
	__loop(0<i32>, 0x0000D194<p32>, r7)
	r10 = r0 + r10 * r7
	r10 = r10 + 1<i32>
	r11 = Mem0[r10:byte]
	r28 = r28 + r11 * r3
	r15_r14 = SEQ(0<32>, r2)
	// succ:  l0000D1B0
l0000D1B0:
	r10 = r14 + 0<32>
	p1 = r7 > 0<32>
	r28 = 0<32>
	r11 = r15 + r12
	Mem0[r14 + r11 * 4<32>:word32] = r28
	branch p1 l0000D1E0
	// succ:  l0000D1C8 l0000D1E0
l0000D1C8:
	r11 = r8 + (r11 << 2<32>)
	__loop(0<i32>, 0x0000D1D0<p32>, r7)
	r16 = Mem0[r10:byte]
	r10 = r10 + r6
	r28 = r28 + r16 * r1
	goto l0000D1E4
	// succ:  l0000D1E4
l0000D1E0:
	r14 = r14 + 1<32>
	r15 = r15 + 1<32>
	goto l0000D1E8
	// succ:  l0000D1E8
l0000D1E4:
	r14 = r14 + 1<32>
	// succ:  l0000D1E8
l0000D1E8:
	r14 = 0<32>
	p2 = r15 == 0x20<32>
	branch p0 l0000D2CC
	// succ:  l0000D1F8 l0000D2CC l0000D1B0
l0000D1F8:
	branch p2 l0000D1B0
l0000D2CC:
	branch r6 >u r12 l0000D160
	goto l0000D2DC
	// succ:  l0000D2DC l0000D160
l0000D2D8:
	r19_r18 = Mem0[r29 + 8<i32>:word64]
	r17_r16 = Mem0[r29 + 16<i32>:word64]
	v29 = r30
	r31 = Mem0[v29 + 4<i32>:word32]
	r30 = Mem0[v29:word32]
	r29 = v29 + 8<i32>
	return
	// succ:  gemm_co_exit
l0000D2DC:
	r12 = r12 + 0x20<32>
	r2 = r2 + 0x20<32>
	v32 = r30
	r31 = Mem0[v32 + 4<i32>:word32]
	r30 = Mem0[v32:word32]
	r29 = v32 + 8<i32>
	return
	// succ:  gemm_co_exit
gemm_co_exit:


// gemsuma_cn
// Return size: 0
define gemsuma_cn
gemsuma_cn_entry:
	r29 = fp
	// succ:  l0000D2E0
l0000D2E0:
	r6 = 0<32>
	r12 = r2 + 0xFFFFFFFF<32>
	branch p0 l0000D334
	// succ:  l0000D2EC l0000D334
l0000D2EC:
	p0 = r1 > 0<32>
	__loop(1<i32>, 0x0000D2F0<p32>, r1)
	r7 = 0<32>
	r8 = r6
	branch p0 l0000D320
	// succ:  l0000D2FC l0000D320
l0000D2FC:
	p0 = r2 > 0<32>
	p0 = r2 >u 1<32>
	r7 = 0<32>
	__loop(0<i32>, 0x0000D314<p32>, r12)
	r8 = r0 + r8 * r2
	r8 = r8 + 1<i32>
	r9 = Mem0[r8:byte]
	branch p0 l0000D31C
	// succ:  l0000D314 l0000D31C
l0000D314:
	r8 = r8 + 1<i32>
	r9 = Mem0[r8:byte]
	r7 = r9 + r7
	// succ:  l0000D31C
l0000D31C:
	r7 = r9 + r7
	// succ:  l0000D320
l0000D320:
	r6 = r6 + 1<32>
	r8 = r5
	r8 = r8 + r7 * r4
l0000D334:
	return
	// succ:  gemsuma_cn_exit
gemsuma_cn_exit:


// gemsumb_cn
// Return size: 0
define gemsumb_cn
gemsumb_cn_entry:
	r29 = fp
	// succ:  l0000D340
l0000D340:
	r6 = r0
	r2 = 0<32>
	p0 = r3 > 0<32>
	r5 = 0<32>
	__loop(1<i32>, 0x0000D350<p32>, 0x10<32>)
	Mem0[r30 + r5 * 4<32>:word32] = r2
	r12 = r3 + 3<32>
	branch p0 l0000D3B8
	// succ:  l0000D35C l0000D3B8
l0000D35C:
	r9_r8 = SEQ(0<32>, r6)
	r7 = r1 + (r5 << 2<32>)
	r12 = r12 >>u 2<32>
	__loop(0<i32>, 0x0000D36C<p32>, r12)
	r12 = Mem0[r8 - 1<i32>:byte]
	r9 = r9 + r12 * r4
	r0 = Mem0[r8:byte]
	r12 = r0 * r4
	r13 = r13 + r0 * r4
	r14 = r14 * r4
	r15 = r14
	r15 = r15 + (r12 + r9)
	r9 = Mem0[r8 + 2<i32>:byte]
	r9 = r9 * r4
	r9 = r9 + (r13 + r14)
	Mem0[r7:word32] = r9
	// succ:  l0000D3B8
l0000D3B8:
	r5 = r5
	r6 = r6 + 4<32>
	return
	// succ:  gemsumb_cn_exit
gemsumb_cn_exit:


// gemmpybbw_cn
// Return size: 0
define gemmpybbw_cn
gemmpybbw_cn_entry:
	r29 = fp
	// succ:  l0000D3C8
l0000D3C8:
	return
	// succ:  gemmpybbw_cn_exit
gemmpybbw_cn_exit:


// gemaddvvm_cn
// Return size: 0
define gemaddvvm_cn
gemaddvvm_cn_entry:
	r29 = fp
	// succ:  l0000D474
l0000D474:
	r5 = 0<32>
	branch p0 l0000D4C8
	// succ:  l0000D480 l0000D4C8
l0000D480:
	p0 = r3 > 0<32>
	__loop(1<i32>, 0x0000D480<p32>, r3)
	r7 = r1
	r6 = r0 + (r5 << 2<32>)
	r3 = r5 * r4
	r8 = Mem0[r6:word32]
	r7 = r7 + 4<i32>
	r12 = Mem0[r7:word32]
	r3 = r2 + (r3 << 2<32>)
	__loop(0<i32>, 0x0000D4A0<p32>, 0xF<32>)
	r9 = Mem0[r3:word32]
	r13 = Mem0[r3 + 4<i32>:word32]
	r9 = r9 + (r12 + r8)
	r7 = r7 + 4<i32>
	r12 = Mem0[r7:word32]
	r8 = Mem0[r6:word32]
	r5 = r5 + 1<32>
	r13 = r13 + (r12 + r8)
	// succ:  l0000D4BC_thunk_gemm_asm
l0000D4BC_thunk_gemm_asm:
	call gemm_asm (retsize: 0;)
	return
	// succ:  gemaddvvm_cn_exit
l0000D4C8:
	return
	// succ:  gemaddvvm_cn_exit
gemaddvvm_cn_exit:


// gemm_asm
// Return size: 0
define gemm_asm
gemm_asm_entry:
	r29 = fp
	// succ:  l0000D4CC
l0000D4CC:
	v4 = r29 - 8<i32>
	Mem0[v4:word32] = r30
	Mem0[v4 + 4<i32>:word32] = r31
	r30 = v4
	r29 = v4 - 88<i32>
	Mem0[r29 - 16<i32>:word64] = r17_r16
	r16 = Mem0[r29 + 96<i32>:word64]
	r17 = r0
	Mem0[r29 + 64<i32>:word64] = r21_r20
	Mem0[r29 + 72<i32>:word64] = r19_r18
	p0 = r16 > 0<32>
	r19 = r2
	Mem0[r29 + 36<i32>:word32] = r1
	Mem0[r29 + 56<i32>:word64] = r23_r22
	Mem0[r29 + 40<i32>:word64] = r27_r26
	Mem0[r29 + 48<i32>:word64] = r25_r24
	Mem0[r29 + 32<i32>:word32] = r4
	Mem0[r29 + 12<i32>:word32] = r3
	r23 = Mem0[r29 + 104<i32>:word32]
	r25 = Mem0[r29 + 112<i32>:word32]
	branch p0 l0000D5A4
	// succ:  l0000D4FC l0000D5A4
l0000D4FC:
	r4 = Mem0[r29 + 12<i32>:word64]
	r3 = Mem0[r29 + 36<i32>:word64]
	r21 = 0<32>
	r18 = 0<32>
	r2 = Mem0[r29 + 100<i32>:word64]
	r22 = Mem0[r29 + 108<i32>:word64]
	r4 = Mem0[r29 + 120<i32>:word32]
	r26 = SEQ(SLICE(r25, word16, 0), SLICE(r2, word16, 0))
	r7 = r22 * r2
	r3 = r4 * r3
	Mem0[r29 + 28<i32>:word32] = r4
	r4 = Mem0[r29 + 124<i32>:word64]
	r2 = r3 * r2
	Mem0[r29 + 24<i32>:word32] = r4
	r24 = Mem0[r29 + 116<i32>:word32]
	r4 = r22 << 2<32>
	Mem0[r29 + 16<i32>:word32] = r4
	Mem0[r29 + 20<i32>:word32] = r7
	Mem0[r29 + 8<i32>:word32] = r2
	// succ:  l0000D538
l0000D538:
	r3_r2 = r24_r26
	r1_r0 = r23_r17
	branch p0 l0000D54C
	// succ:  l0000D544 l0000D54C
l0000D544:
	p0 = r13 == 0<32>
	r4 = Mem0[r29 + 12<i32>:word64]
	r5 = Mem0[r29 + 8<i32>:word64]
	call gemsuma_asm (retsize: 0;)
	// succ:  l0000D54C
l0000D54C:
	r3 = Mem0[r29 + 36<i32>:word64]
	r2 = Mem0[r29 + 28<i32>:word64]
	r2 = r25
	r20 = r2 + r18
	r1_r0 = r20_r19
	call gemsumb_asm (retsize: 0;)
	r2 = Mem0[r29 + 32<i32>:word32]
	r1_r0 = r19_r17
	r5_r4 = r26_r16
	r27 = r2 + r18
	r3_r2 = r23_r27
	call gemmpybbw_asm (retsize: 0;)
	r5 = Mem0[r29 + 24<i32>:word64]
	r4 = r16
	r1_r0 = r20_r24
	r3_r2 = r23_r27
	Mem0[r29:byte] = r6
	r6 = r21 == 0<32>
	call gemaddvvm_asm (retsize: 0;)
	r7 = Mem0[r29 + 20<i32>:word64]
	r18 = r18 + r2
	branch r16 >u r21 l0000D538
	goto l0000D5A8
	// succ:  l0000D5A8 l0000D538
l0000D5A4:
	r19_r18 = Mem0[r29 + 72<i32>:word64]
	r17_r16 = Mem0[r29 + 80<i32>:word64]
	r23_r22 = Mem0[r29 + 56<i32>:word64]
	r21_r20 = Mem0[r29 + 64<i32>:word64]
	r27_r26 = Mem0[r29 + 40<i32>:word64]
	r25_r24 = Mem0[r29 + 48<i32>:word64]
	v36 = r30
	r31 = Mem0[v36 + 4<i32>:word32]
	r30 = Mem0[v36:word32]
	r29 = v36 + 8<i32>
	return
	// succ:  gemm_asm_exit
l0000D5A8:
	r21 = r21 + r22
	r19 = r19 + r7
	r23_r22 = Mem0[r29 + 56<i32>:word64]
	r21_r20 = Mem0[r29 + 64<i32>:word64]
	r27_r26 = Mem0[r29 + 40<i32>:word64]
	r25_r24 = Mem0[r29 + 48<i32>:word64]
	v46 = r30
	r31 = Mem0[v46 + 4<i32>:word32]
	r30 = Mem0[v46:word32]
	r29 = v46 + 8<i32>
	return
	// succ:  gemm_asm_exit
gemm_asm_exit:


// im2col_co
// Return size: 0
define im2col_co
im2col_co_entry:
	r29 = fp
	// succ:  l0000D5B8
l0000D5B8:
	v4 = r29 - 8<i32>
	Mem0[v4:word32] = r30
	Mem0[v4 + 4<i32>:word32] = r31
	r30 = v4
	r29 = v4 - 192<i32>
	r8 = 0x20<32>
	Mem0[r29 + 144<i32>:word64] = r27_r26
	r7 = Mem0[r29 + 204<i32>:word32]
	r9 = Mem0[r29 + 216<i32>:word32]
	r12 = Mem0[r29 + 200<i32>:word32]
	Mem0[r29 + 176<i32>:word64] = r19_r18
	Mem0[r29 + 120<i32>:word32] = r5
	p0 = r9 > 0<32>
	r26 = r7 * r3
	Mem0[r29 + 184<i32>:word64] = r17_r16
	r16 = r4
	r6 = 0xF<32> + r26 * r12
	Mem0[r29 + 152<i32>:word64] = r25_r24
	r4 = Mem0[r29 + 212<i32>:word32]
	Mem0[r29 + 160<i32>:word64] = r23_r22
	Mem0[r29 + 168<i32>:word64] = r21_r20
	r5 = r6 & 0xFFFFFFF0<32>
	Mem0[r29 + 100<i32>:word32] = r26
	Mem0[r29 + 36<i32>:word32] = r9
	r9 = r2 + 0<32>
	r19 = max<int32>(r5, r8)
	Mem0[r29 + 8<i32>:word32] = r4
	Mem0[r29 + 56<i32>:word32] = r0
	Mem0[r29 + 32<i32>:word32] = r19
	r0 = Mem0[r29 + 36<i32>:word32]
	branch p0 l0000D954
	// succ:  l0000D614 l0000D954
l0000D614:
	r13 = Mem0[r29 + 220<i32>:word32]
	r24 = Mem0[r29 + 208<i32>:word32]
	r4 = r26 * r12
	r6 = r7 * r12
	Mem0[r29 + 112<i32>:word32] = r12
	r12 = Mem0[r29 + 8<i32>:word32]
	r14 = r19 - r4
	r2 = 0xF<32> + r6 * r3
	Mem0[r29 + 68<i32>:word32] = r3
	Mem0[r29 + 4<i32>:word32] = r4
	p1 = r14 > 0<32>
	p0 = r12 > 0<32>
	r6 = Mem0[r29 + 224<i32>:word32]
	r2 = r2 & 0xFFFFFFF0<32>
	p0 = !p0
	r4 = r3 * r9
	Mem0[r29 + 16<i32>:word32] = r13
	Mem0[r29 + 92<i32>:word32] = r6
	p0 = p0 | !p1
	r2 = max<int32>(r2, r8)
	Mem0[r29 + 28<i32>:word32] = r14
	r3 = r7 - r9
	r23 = r19 * r0
	r21 = r4 * r24
	Mem0[r29 + 52<i32>:word32] = r9
	Mem0[r29 + 12<i32>:word32] = r3
	r22 = r0 * r2
	Mem0[r29 + 48<i32>:word32] = r13
	r3 = r24 + 0xFFFFFFFF<32>
	Mem0[r29 + 80<i32>:word32] = r3
	Mem0[r29 + 20<i32>:word32] = r7
	r7 = r24 + r1
	r5 = r7 - r13
	Mem0[r29 + 96<i32>:word32] = r1
	r6 = 0<32>
	r4 = r5 - r9
	r1 = r1 + (r24 + 0xFFFFFFFF<32>)
	Mem0[r29 + 88<i32>:word32] = r7
	Mem0[r29 + 72<i32>:word32] = r1
	r1 = p0
	r3 = r12 * r24
	Mem0[r29 + 24<i32>:word32] = r1
	Mem0[r29 + 84<i32>:word32] = r3
	Mem0[r29 + 44<i32>:word32] = r4
	// succ:  l0000D6B0
l0000D6B0:
	Mem0[r29 + 40<i32>:word32] = r6
	r7 = Mem0[r29 + 112<i32>:word64]
	r8 = 0<32>
	r2 = r6 * r19
	Mem0[r29 + 116<i32>:word32] = r2
	p0 = r7 > 0<32>
	branch p0 l0000D904
	// succ:  l0000D6C8 l0000D904
l0000D6C8:
	r2 = Mem0[r29 + 40<i32>:word64]
	r3 = Mem0[r29 + 44<i32>:word64]
	r4 = Mem0[r29 + 48<i32>:word64]
	r5 = Mem0[r29 + 20<i32>:word64]
	r2 = r2 * r24
	r3 = max<int32>(r3, r8)
	r7 = Mem0[r29 + 68<i32>:word64]
	r1 = Mem0[r29 + 12<i32>:word64]
	r4 = max<int32>(r4, r8)
	r5 = Mem0[r29 + 16<i32>:word32]
	r3 = r5 - r3
	r4 = r7 * r4
	r2 = r2 - r5
	r3 = r7 * r3
	r1 = Mem0[r29 + 120<i32>:word32]
	r6 = 0<32> - r2
	r0 = r1 + r2
	r4 = r1 + r4
	r8 = 0<32>
	r6 = max<int32>(r6, r8)
	r5 = max<int32>(r0, r8)
	Mem0[r29 + 16<i32>:byte] = r2
	r27 = r6 * r7
	r2 = max<int32>(r2, r8)
	Mem0[r29 + 104<i32>:word32] = r27
	Mem0[r29 + 60<i32>:word32] = r4
	r2 = r1 + r3
	Mem0[r29 + 108<i32>:word32] = r0
	Mem0[r29 + 76<i32>:word32] = r2
	r2 = r5 + r6
	r2 = r2 * r7
	r20 = r26 - r2
	// succ:  l0000D73C
l0000D73C:
	r2 = Mem0[r29 + 92<i32>:word32]
	r4 = r8 - r2
	r2 = r8 * r26
	r3 = Mem0[r29 + 116<i32>:word32]
	r25 = r21 + 0<32>
	branch p0 l0000D764
	// succ:  l0000D754 l0000D764
l0000D754:
	p0 = r4 > -1<i32>
	Mem0[r29 + 128<i32>:word32] = r8
	r2 = r2 + r3
	Mem0[r29 + 136<i32>:word32] = r2
	goto l0000D7A0
	// succ:  l0000D7A0
l0000D764:
	r18 = Mem0[r29 + 120<i32>:word64]
	r3 = Mem0[r29 + 116<i32>:word64]
	r17 = r4
	r25 = r21
	Mem0[r29 + 128<i32>:word32] = r8
	r4 = r2 + r3
	r19 = r4
	r18 = r18 + (r2 + r3)
	Mem0[r29 + 136<i32>:word32] = r4
	// succ:  l0000D784
l0000D784:
	r18 = r18 + r23
	r1_r0 = r16_r18
	r2 = r26
	call vmemset_asm (retsize: 0;)
	branch r17 > -1<i32> l0000D784
	// succ:  l0000D7A0 l0000D784
l0000D7A0:
	Mem0[r29 + 124<i32>:word32] = r4
	r7 = Mem0[r29 + 84<i32>:word64]
	r1 = r24
	r2 = 0<32>
	r2 = Mem0[r29 + 96<i32>:word32]
	r19 = r4 + r7
	r17 = max<int32>(r4, r2)
	r0 = r17 - r4
	r26 = min<int32>(r2, r19)
	call fn00009750 (retsize: 0;)
	Mem0[r29 + 132<i32>:word32] = r0
	p0 = r27 > 0<32>
	branch p0 l0000D804
	// succ:  l0000D7D0 l0000D804
l0000D7D0:
	r2 = Mem0[r29 - 124<i32>:word32]
	r3 = Mem0[r29 - 120<i32>:word32]
	p0 = r26 > r17
	branch p0 l0000D804
	// succ:  l0000D7E0 l0000D804
l0000D7E0:
	r18 = Mem0[r29 + 120<i32>:word64]
	r21 = r17
	r2 = r2 * r23
	r18 = r18 + (r3 + r2)
	// succ:  l0000D7EC
l0000D7EC:
	r18 = r18 + r23
	r1_r0 = r16_r18
	r2 = r27
	call vmemset_asm (retsize: 0;)
	branch r26 >u r21 l0000D7EC
	goto l0000D808
	// succ:  l0000D808 l0000D7EC
l0000D804:
	r27 = r25
	r1 = r24
	branch p0 l0000D870
	goto l0000D810
	// succ:  l0000D810 l0000D870
l0000D808:
	r21 = r21 + r24
	r27 = r25
	r1 = r24
	r2 = Mem0[r29 + 80<i32>:word32]
	r2 = r2 - r17
	r0 = r2 + r26
	call fn00009750 (retsize: 0;)
	branch r21 > 0<32> l0000D870
	goto l0000D82C
	// succ:  l0000D82C l0000D870
l0000D810:
	p0 = r12 > 0<32>
	r2 = Mem0[r29 + 80<i32>:word32]
	r2 = r2 - r17
	r0 = r2 + r26
	call fn00009750 (retsize: 0;)
	branch r21 > 0<32> l0000D870
	// succ:  l0000D82C l0000D870
l0000D82C:
	r21 = r0
	r18 = Mem0[r29 + 64<i32>:word32]
	r25 = Mem0[r29 + 60<i32>:word32]
	r3 = Mem0[r29 + 52<i32>:word32]
	r2 = r22 * r2
	r7 = Mem0[r29 + 68<i32>:word32]
	r6 = Mem0[r29 + 136<i32>:word32]
	r3 = Mem0[r29 + 56<i32>:word32]
	r25 = r25 + (r6 + r2)
	r18 = r18 + r17 * r3
	r18 = r3 + r18 * r7
	// succ:  l0000D854
l0000D854:
	r25 = r25 + r22
	r1_r0 = r18_r25
	r2 = r20
	call vmemcpy_asm (retsize: 0;)
	branch r21 == 0<32> l0000D854
	goto l0000D874
	// succ:  l0000D874 l0000D854
l0000D870:
	branch r21 > 0<32> l0000D8A8
	goto l0000D87C
	// succ:  l0000D87C l0000D8A8
l0000D874:
	r21 = r21 + 0xFFFFFFFF<32>
	r18 = r18 + r27
	branch r21 > 0<32> l0000D8AC
	// succ:  l0000D87C l0000D8AC
l0000D87C:
	r2 = Mem0[r29 - 124<i32>:word32]
	r18 = Mem0[r29 + 76<i32>:word32]
	p0 = r26 > r17
	r3 = Mem0[r29 + 136<i32>:word32]
	r2 = r22 * r2
	r18 = r18 + (r3 + r2)
	// succ:  l0000D894
l0000D894:
	r18 = r18 + r22
	r2 = r21
	r1_r0 = r16_r18
	call vmemset_asm (retsize: 0;)
	branch r26 >u r17 l0000D894
l0000D8A8:
	r26 = Mem0[r29 + 100<i32>:word32]
	r2 = Mem0[r29 + 88<i32>:word32]
	r21 = r27
	r1 = r24
	// succ:  l0000D8AC l0000D894 l0000D8B8
l0000D8AC:
	r17 = r17 + r24
	r26 = Mem0[r29 + 100<i32>:word32]
	r2 = Mem0[r29 + 88<i32>:word32]
	r21 = r27
	// succ:  l0000D8B8
l0000D8B8:
	branch p0 l0000D8F0
	// succ:  l0000D8BC l0000D8F0
l0000D8BC:
	p0 = r2 > r11
	r2 = Mem0[r29 + 124<i32>:word64]
	r17 = Mem0[r29 + 72<i32>:word64]
	r0 = r17 - r2
	call fn00009750 (retsize: 0;)
	r3 = Mem0[r29 + 136<i32>:word32]
	r18 = Mem0[r29 + 120<i32>:word32]
	r2 = r0 * r23
	r18 = r18 + (r3 + r2)
	// succ:  l0000D8D8
l0000D8D8:
	r18 = r18 + r23
	r1_r0 = r16_r18
	r2 = r26
	call vmemset_asm (retsize: 0;)
	branch r19 >u r17 l0000D8D8
	goto l0000D8F4
	// succ:  l0000D8F4 l0000D8D8
l0000D8F0:
	r2 = Mem0[r29 + 112<i32>:word32]
	r8 = Mem0[r29 + 128<i32>:word32]
	goto l0000D8F8
	// succ:  l0000D8F8
l0000D8F4:
	r17 = r17 + r24
	r2 = Mem0[r29 + 112<i32>:word32]
	// succ:  l0000D8F8
l0000D8F8:
	branch r8 == r2 l0000D73C
	goto l0000D908
	// succ:  l0000D908 l0000D73C
l0000D904:
	r19 = Mem0[r29 + 28<i32>:word64]
	r0 = Mem0[r29 + 24<i32>:word64]
	// succ:  l0000D908
l0000D908:
	r27 = Mem0[r29 + 104<i32>:word32]
	r8 = r8 + 1<32>
	branch p0 l0000D930
	// succ:  l0000D910 l0000D930
l0000D910:
	p0 = r0
	r2 = Mem0[r29 + 4<i32>:word64]
	r17 = Mem0[r29 + 120<i32>:word64]
	r18 = Mem0[r29 + 8<i32>:word64]
	r3 = Mem0[r29 + 116<i32>:word64]
	r17 = r17 + (r3 + r2)
	// succ:  l0000D91C
l0000D91C:
	r17 = r17 + r23
	r2 = r19
	r1_r0 = r16_r17
	call vmemset_asm (retsize: 0;)
	branch r18 == 0<32> l0000D91C
	goto l0000D934
	// succ:  l0000D934 l0000D91C
l0000D930:
	r5 = Mem0[r29 + 36<i32>:word64]
	r6 = Mem0[r29 + 40<i32>:word64]
	// succ:  l0000D934
l0000D934:
	r18 = r18 + 0xFFFFFFFF<32>
	r7 = Mem0[r29 + 48<i32>:word64]
	r2 = Mem0[r29 + 44<i32>:word64]
	r6 = r6 + 1<32>
	r19 = Mem0[r29 + 32<i32>:word32]
	p0 = r6 == r5
	r4 = r7 - r24
	r2 = r2 + r24
	Mem0[r29 + 48<i32>:word32] = r4
	Mem0[r29 + 44<i32>:word32] = r2
	branch p0 l0000D6B0
	// succ:  l0000D954 l0000D6B0
l0000D954:
	r4 = Mem0[r29 + 8<i32>:word64]
	r2 = Mem0[r29 + 36<i32>:word64]
	r2 = r2 * r4
	r3 = 7<32> + r2 * r4
	r3 = r3 & 0xFFFFFFF8<32>
	branch r18 > 0<32> l0000D988
	// succ:  l0000D970 l0000D988
l0000D970:
	r18 = r3 - r2
	r17 = r3 + r17 * r2
	// succ:  l0000D974
l0000D974:
	r17 = r17 + r19
	r2 = r19
	r1_r0 = r16_r17
	call vmemset_asm (retsize: 0;)
	branch r18 == 0<32> l0000D974
	goto l0000D98C
	// succ:  l0000D98C l0000D974
l0000D988:
	r19_r18 = Mem0[r29 + 176<i32>:word64]
	r17_r16 = Mem0[r29 + 184<i32>:word64]
	// succ:  l0000D98C
l0000D98C:
	r18 = r18 + 0xFFFFFFFF<32>
	r23_r22 = Mem0[r29 + 160<i32>:word64]
	r21_r20 = Mem0[r29 + 168<i32>:word64]
	r27_r26 = Mem0[r29 + 144<i32>:word64]
	r25_r24 = Mem0[r29 + 152<i32>:word64]
	v42 = r30
	r31 = Mem0[v42 + 4<i32>:word32]
	r30 = Mem0[v42:word32]
	r29 = v42 + 8<i32>
	return
	// succ:  im2col_co_exit
im2col_co_exit:


// im2col_cn
// Return size: 0
define im2col_cn
im2col_cn_entry:
	r29 = fp
	// succ:  l0000D99C
l0000D99C:
	v4 = r29 - 8<i32>
	Mem0[v4:word32] = r30
	Mem0[v4 + 4<i32>:word32] = r31
	r30 = v4
	r29 = v4 - 184<i32>
	Mem0[r29 + 168<i32>:word64] = r19_r18
	r7 = Mem0[r29 + 196<i32>:word32]
	r18 = r4
	r12 = Mem0[r29 + 208<i32>:word32]
	r9 = Mem0[r29 + 192<i32>:word32]
	Mem0[r29 + 176<i32>:word64] = r17_r16
	r6 = Mem0[r29 + 204<i32>:word32]
	r16 = r5
	r19 = r7 * r3
	Mem0[r29 + 152<i32>:word64] = r23_r22
	Mem0[r29 + 160<i32>:word64] = r21_r20
	p0 = r6 > 0<32>
	r8 = 0xF<32> + r19 * r9
	Mem0[r29 + 92<i32>:word32] = r9
	Mem0[r29 + 144<i32>:word64] = r25_r24
	r28 = r7 - r2
	Mem0[r29 + 16<i32>:word32] = r6
	Mem0[r29 + 136<i32>:word64] = r27_r26
	r17 = r8 & 0xFFFFFFF0<32>
	Mem0[r29 + 40<i32>:word32] = r0
	Mem0[r29 + 72<i32>:word32] = r16
	Mem0[r29 + 64<i32>:word32] = r12
	Mem0[r29 + 132<i32>:word32] = r1
	Mem0[r29 + 68<i32>:word32] = r17
	r13 = Mem0[r29 - 44<i32>:word32]
	branch p0 l0000DC30
	// succ:  l0000DA00 l0000DC30
l0000DA00:
	r15 = Mem0[r29 + 200<i32>:word32]
	r4 = Mem0[r29 + 216<i32>:word32]
	r14 = r19 * r9
	r1 = r7 * r9
	Mem0[r29 + 96<i32>:word32] = r15
	r5 = r7 - r13
	r6 = r4 * r2
	r20 = r3 * r2
	Mem0[r29 + 32<i32>:word32] = r3
	Mem0[r29 + 36<i32>:word32] = r7
	r3 = 0<32>
	r8 = 0xF<32> + r1 * r3
	Mem0[r29 + 28<i32>:word32] = r28
	Mem0[r29 + 24<i32>:word32] = r16
	r7 = 0<32> - r4
	Mem0[r29 + 52<i32>:word32] = r7
	Mem0[r29 + 20<i32>:word32] = r3
	r3 = 0<32> - r13
	r0 = r8 >>u 4<32>
	Mem0[r29 + 60<i32>:word32] = r14
	Mem0[r29 + 44<i32>:word32] = r13
	r7 = r17 - r14
	Mem0[r29 + 56<i32>:word32] = r7
	Mem0[r29 + 8<i32>:word32] = r3
	r3 = r15 * r2
	r1 = r12 * r0
	Mem0[r29 + 12<i32>:word32] = r3
	r7 = 0<32> - r6
	r2 = r5 - r2
	Mem0[r29 + 48<i32>:word32] = r7
	Mem0[r29 + 4<i32>:word32] = r2
	r1_r0 = __simd_shl<word64,word32>(r1_r0, 2<32>)
	Mem0[r29 + 80<i32>:word64] = r1_r0
	// succ:  l0000DA74
l0000DA74:
	r7 = Mem0[r29 + 24<i32>:word32]
	p0 = r12 > 0<32>
	branch p0 l0000DC00
	// succ:  l0000DA80 l0000DC00
l0000DA80:
	Mem0[r29 + 29<i32>:byte] = r2
	r2 = Mem0[r29 + 44<i32>:word32]
	Mem0[r29 + 108<i32>:word32] = r2
	r2 = Mem0[r29 + 20<i32>:word64]
	r7 = Mem0[r29 + 8<i32>:word32]
	r2 = r2 * r12
	Mem0[r29 + 104<i32>:word32] = r7
	r7 = 0<32>
	Mem0[r29 + 100<i32>:word32] = r7
	Mem0[r29 + 76<i32>:word32] = r2
	// succ:  l0000DAA0
l0000DAA0:
	r8 = Mem0[r29 + 28<i32>:word32]
	r17 = Mem0[r29 + 52<i32>:word32]
	p0 = r9 > 0<32>
	branch p0 l0000DB9C
	// succ:  l0000DAB0 l0000DB9C
l0000DAB0:
	r3 = Mem0[r29 + 100<i32>:word64]
	r2 = Mem0[r29 + 96<i32>:word64]
	r7 = 0<32>
	r4 = Mem0[r29 + 44<i32>:word64]
	r6 = Mem0[r29 + 104<i32>:word64]
	r2 = r3 * r2
	r1 = Mem0[r29 + 116<i32>:word64]
	r5 = Mem0[r29 + 108<i32>:word64]
	r2 = r2 - r4
	r3 = max<int32>(r6, r7)
	r1 = Mem0[r29 + 32<i32>:word32]
	r2 = r8 + r2
	r6 = 0<32> - r2
	r0 = max<int32>(r1, r7)
	r6 = Mem0[r29 + 36<i32>:word32]
	r24 = r1
	r5 = max<int32>(r5, r7)
	r16 = max<int32>(r6, r7)
	r5 = Mem0[r29 + 40<i32>:word32]
	r2 = r6 - r5
	r7 = r1 * r0
	r22 = max<int32>(r2, r7)
	Mem0[r29 + 32<i32>:byte] = r2
	r23 = Mem0[r29 + 112<i32>:word32]
	r26 = r22 * r1
	r2 = r1 * r2
	Mem0[r29 + 124<i32>:word32] = r7
	r21 = Mem0[r29 + 92<i32>:word64]
	r2 = r2 + r3
	r7 = r16 * r1
	Mem0[r29 + 120<i32>:word32] = r7
	r2 = r6 - r16
	r24 = r5 + r24 * r2
	r25 = r2 - r22
	r27 = r25 * r1
	// succ:  l0000DB30
l0000DB30:
	branch p0 l0000DB40
	// succ:  l0000DB38 l0000DB40
l0000DB38:
	p0 = r9 > -1<i32>
	branch r2 > r17 l0000DB48
	goto l0000DB44
	// succ:  l0000DB44 l0000DB48
l0000DB40:
	r1 = r18 & 0xFF<32>
	r0 = r23
	goto l0000DB88
	// succ:  l0000DB88
l0000DB44:
	r2 = Mem0[r29 + 132<i32>:word32]
	r1 = r18 & 0xFF<32>
	r0 = r23
	// succ:  l0000DB48
l0000DB48:
	branch p0 l0000DB58
	// succ:  l0000DB4C l0000DB58
l0000DB4C:
	p0 = r8 > 0<32>
	r2 = Mem0[r29 + 120<i32>:word64]
	r1 = r18 & 0xFF<32>
	r0 = r23
	call fn000095F0 (retsize: 0;)
	// succ:  l0000DB58
l0000DB58:
	r2 = Mem0[r29 + 124<i32>:word32]
	p0 = r25 > 0<32>
	r1 = r24
	branch p0 l0000DB74
	// succ:  l0000DB68 l0000DB74
l0000DB68:
	r2 = r27
	r0 = r23 + r2
	call vmemcpy_asm (retsize: 0;)
	// succ:  l0000DB74
l0000DB74:
	r2 = Mem0[r29 - 128<i32>:word32]
	r1 = r18 & 0xFF<32>
	branch p0 l0000DB8C
	// succ:  l0000DB80 l0000DB8C
l0000DB80:
	p0 = r14 > 0<32>
	r2 = r26
	r0 = r23 + r2
	// succ:  l0000DB88
l0000DB88:
	call fn000095F0 (retsize: 0;)
	// succ:  l0000DB8C
l0000DB8C:
	r23 = r23 + r19
	r17 = r17
	r24 = r24 + r20
	branch r21 == 0<32> l0000DB30
	goto l0000DBA0
	// succ:  l0000DBA0 l0000DB30
l0000DB9C:
	r21 = Mem0[r29 + 100<i32>:word64]
	r2 = Mem0[r29 + 76<i32>:word64]
	r1 = r18 & 0xFF<32>
	r16 = Mem0[r29 + 72<i32>:word64]
	r17 = Mem0[r29 + 68<i32>:word64]
	r3 = r21 + r2
	r2 = Mem0[r29 + 56<i32>:word64]
	r4 = Mem0[r29 + 60<i32>:word64]
	r0 = r16
	r3 = r3 * r17
	call fn000095F0 (retsize: 0;)
	r0 = r0 + (r3 + r4)
	r3 = Mem0[r29 + 108<i32>:word64]
	r2 = Mem0[r29 + 96<i32>:word64]
	r21 = r21 + 1<32>
	r1_r0 = Mem0[r29 + 80<i32>:word64]
	r6 = Mem0[r29 + 112<i32>:word64]
	r3 = r3 + r2
	Mem0[r29 + 108<i32>:word32] = r3
	r12 = Mem0[r29 + 64<i32>:word32]
	r3 = r6 + (r0 << 2<32>)
	r9 = Mem0[r29 + 92<i32>:word32]
	r7 = Mem0[r29 + 116<i32>:word32]
	p0 = r21 == r12
	Mem0[r29 + 112<i32>:word32] = r3
	r6 = Mem0[r29 + 104<i32>:word64]
	r5 = r7 - r2
	r3 = r6 + r2
	Mem0[r29 + 116<i32>:word32] = r5
	Mem0[r29 + 100<i32>:word32] = r21
	Mem0[r29 + 104<i32>:word32] = r3
	branch p0 l0000DAA0
	goto l0000DC00
	// succ:  l0000DC00 l0000DAA0
l0000DBA0:
	r21 = r21 + 0xFFFFFFFF<32>
	r21 = Mem0[r29 + 100<i32>:word64]
	r2 = Mem0[r29 + 76<i32>:word64]
	r16 = Mem0[r29 + 72<i32>:word64]
	r17 = Mem0[r29 + 68<i32>:word64]
	r3 = r21 + r2
	r2 = Mem0[r29 + 56<i32>:word64]
	r4 = Mem0[r29 + 60<i32>:word64]
	r0 = r16
	r3 = r3 * r17
	call fn000095F0 (retsize: 0;)
	r0 = r0 + (r3 + r4)
	r3 = Mem0[r29 + 108<i32>:word64]
	r2 = Mem0[r29 + 96<i32>:word64]
	r21 = r21 + 1<32>
	r1_r0 = Mem0[r29 + 80<i32>:word64]
	r6 = Mem0[r29 + 112<i32>:word64]
	r3 = r3 + r2
	Mem0[r29 + 108<i32>:word32] = r3
	r12 = Mem0[r29 + 64<i32>:word32]
	r3 = r6 + (r0 << 2<32>)
	r9 = Mem0[r29 + 92<i32>:word32]
	r7 = Mem0[r29 + 116<i32>:word32]
	p0 = r21 == r12
	Mem0[r29 + 112<i32>:word32] = r3
	r6 = Mem0[r29 + 104<i32>:word64]
	r5 = r7 - r2
	r3 = r6 + r2
	Mem0[r29 + 116<i32>:word32] = r5
	Mem0[r29 + 100<i32>:word32] = r21
	Mem0[r29 + 104<i32>:word32] = r3
	branch p0 l0000DAA0
	// succ:  l0000DC00 l0000DAA0
l0000DC00:
	r1_r0 = Mem0[r29 + 80<i32>:word64]
	r2 = Mem0[r29 + 24<i32>:word64]
	r4 = Mem0[r29 + 48<i32>:word64]
	r7 = Mem0[r29 + 12<i32>:word64]
	r2 = r2 + (r1 << 2<32>)
	r7 = Mem0[r29 + 16<i32>:word64]
	r3 = Mem0[r29 + 20<i32>:word64]
	r4 = r4 + r7
	r6 = Mem0[r29 + 52<i32>:word64]
	r3 = r3
	Mem0[r29 + 24<i32>:word32] = r2
	r2 = Mem0[r29 + 96<i32>:word64]
	p0 = r3 == r7
	Mem0[r29 + 20<i32>:word32] = r3
	Mem0[r29 + 48<i32>:word32] = r4
	r4 = r6 + r2
	Mem0[r29 + 52<i32>:word32] = r4
	branch p0 l0000DA74
	// succ:  l0000DC30 l0000DA74
l0000DC30:
	r3 = Mem0[r29 + 16<i32>:word64]
	r1 = r18 & 0xFF<32>
	r0 = r12 * r3
	r2 = 7<32> + r12 * r3
	r2 = r2 & 0xFFFFFFF8<32>
	r2 = r2 - r0
	r0 = r16 + r0 * r17
	r2 = r2 * r17
	r19_r18 = Mem0[r29 + 168<i32>:word64]
	r17_r16 = Mem0[r29 + 176<i32>:word64]
	call fn000095F0 (retsize: 0;)
	r23_r22 = Mem0[r29 + 152<i32>:word64]
	r21_r20 = Mem0[r29 + 160<i32>:word64]
	r27_r26 = Mem0[r29 + 136<i32>:word64]
	r25_r24 = Mem0[r29 + 144<i32>:word64]
	v42 = r30
	r31 = Mem0[v42 + 4<i32>:word32]
	r30 = Mem0[v42:word32]
	r29 = v42 + 8<i32>
	return
	// succ:  im2col_cn_exit
im2col_cn_exit:


// im2col_slice_v0_co
// Return size: 0
define im2col_slice_v0_co
im2col_slice_v0_co_entry:
	r29 = fp
	// succ:  l0000DC64
l0000DC64:
	v4 = r29 - 8<i32>
	Mem0[v4:word32] = r30
	Mem0[v4 + 4<i32>:word32] = r31
	r30 = v4
	r29 = v4 - 200<i32>
	Mem0[r29 - 40<i32>:word64] = r23_r22
	Mem0[r29 + 184<i32>:word64] = r19_r18
	r23 = Mem0[r29 + 212<i32>:word32]
	Mem0[r29 + 152<i32>:word64] = r27_r26
	r7 = Mem0[r29 + 208<i32>:word32]
	r27 = r5
	Mem0[r29 + 104<i32>:word32] = r7
	r26 = Mem0[r29 + 224<i32>:word32]
	Mem0[r29 + 160<i32>:word64] = r25_r24
	r18 = Mem0[r29 + 220<i32>:word32]
	r19 = r23 * r3
	Mem0[r29 + 72<i32>:word32] = r3
	Mem0[r29 + 192<i32>:word64] = r17_r16
	r17 = r2
	r8 = r19 * r7
	r6 = Mem0[r29 + 240<i32>:word32]
	r2 = Mem0[r29 + 232<i32>:word32]
	r7 = 0xF<32> + r19 * r7
	r3 = 7<32> + r26 * r18
	Mem0[r29 + 144<i32>:word32] = r1
	Mem0[r29 + 176<i32>:word64] = r21_r20
	r20 = r26 * r18
	Mem0[r29 + 92<i32>:word32] = r8
	Mem0[r29 + 140<i32>:word32] = r2
	r2 = r3 & 0xFFFFFFF8<32>
	Mem0[r29 + 44<i32>:word32] = r26
	r24 = Mem0[r29 + 236<i32>:word32]
	r2 = r2 - r20
	r3 = r7 & 0xFFFFFFF0<32>
	Mem0[r29 + 68<i32>:word32] = r0
	r21 = r4
	r1_r0 = r26_r24
	Mem0[r29 + 96<i32>:word32] = r3
	Mem0[r29 + 4<i32>:word32] = r2
	r2 = r3 - r8
	Mem0[r29 + 88<i32>:word32] = r2
	r22 = r6 + r24
	r25 = Mem0[r29 + 216<i32>:word32]
	r16 = Mem0[r29 + 228<i32>:word32]
	call fn00009750 (retsize: 0;)
	Mem0[r29 + 40<i32>:word32] = r0
	r7 = r18 + 0xFFFFFFFF<32>
	p0 = r20 > r22
	r2 = r0 * r26
	r20 = r24 - r2
	Mem0[r29 + 36<i32>:word32] = r20
	r2 = p0
	Mem0[r29 + 8<i32>:word32] = r2
	// succ:  l0000DD40
l0000DD40:
	Mem0[r29 + 32<i32>:word32] = r7
	r6 = r25 + 0<32>
	branch p0 l0000DFB0
	// succ:  l0000DD4C l0000DFB0
l0000DD4C:
	p0 = r0 > r7
	r5 = Mem0[r29 + 72<i32>:word64]
	r2 = Mem0[r29 + 104<i32>:word64]
	r4 = r23 - r16
	r3 = r0 * r6
	Mem0[r29 + 108<i32>:word32] = r6
	r1 = Mem0[r29 + 140<i32>:word32]
	r9 = 0<32> - r16
	r2 = r23 * r2
	r8 = r0
	r3 = r3 - r1
	r2 = 0xF<32> + r2 * r5
	r6 = r6 * r17
	Mem0[r29 + 84<i32>:word32] = r3
	Mem0[r29 + 28<i32>:word32] = r9
	r9 = r23 - r17
	r25 = r5 * r17
	Mem0[r29 + 24<i32>:word32] = r6
	Mem0[r29 + 60<i32>:word32] = r9
	r4 = r4 - r17
	r3 = r17 * r3
	Mem0[r29 + 76<i32>:word32] = r16
	Mem0[r29 + 64<i32>:word32] = r23
	r2 = r2 >>u 4<32>
	Mem0[r29 + 80<i32>:word32] = r3
	Mem0[r29 + 20<i32>:word32] = r4
	Mem0[r29 + 16<i32>:word32] = r2
	p0 = r8 == r0
	r9 = r20
	r2 = r26
	branch p0 l0000DDC8
	// succ:  l0000DDB8 l0000DDC8
l0000DDB8:
	r2 = r26 + 0<32>
	r9 = 0<32>
	p0 = r8 == r7
	r2 = Mem0[r29 + 12<i32>:word32]
	// succ:  l0000DDC8
l0000DDC8:
	Mem0[r29 + 52<i32>:word32] = r8
	Mem0[r29 + 100<i32>:word32] = r2
	p0 = r2 > r9
	branch p0 l0000DF8C
	// succ:  l0000DDD8 l0000DF8C
l0000DDD8:
	r5 = Mem0[r29 + 16<i32>:word64]
	r4 = Mem0[r29 + 108<i32>:word64]
	r2 = r2 - r9
	r7 = Mem0[r29 + 20<i32>:word64]
	r6 = r4
	r3 = r4 * r9
	Mem0[r29 + 124<i32>:word32] = r27
	r5 = Mem0[r29 + 76<i32>:word32]
	r6 = r7 + r6 * r9
	r2 = r2 * r5
	Mem0[r29 + 56<i32>:word32] = r27
	r7 = Mem0[r29 + 28<i32>:word32]
	r3 = r5 - r3
	Mem0[r29 + 120<i32>:word32] = r3
	Mem0[r29 + 128<i32>:word32] = r6
	r2 = r2 << 4<32>
	r4 = r7 + r4 * r9
	Mem0[r29 + 48<i32>:word32] = r2
	Mem0[r29 + 116<i32>:word32] = r4
	// succ:  l0000DE18
l0000DE18:
	Mem0[r29 + 112<i32>:word32] = r9
	r2 = Mem0[r29 + 104<i32>:word32]
	r8 = 0<32>
	r6 = Mem0[r29 - 128<i32>:word32]
	r7 = Mem0[r29 + 120<i32>:word32]
	branch p0 l0000DF1C
	// succ:  l0000DE30 l0000DF1C
l0000DE30:
	p0 = r2 > 0<32>
	r3 = Mem0[r29 + 112<i32>:word64]
	r2 = Mem0[r29 + 108<i32>:word64]
	r1 = Mem0[r29 + 72<i32>:word64]
	r4 = Mem0[r29 + 76<i32>:word64]
	r3 = max<int32>(r6, r8)
	r2 = r3 * r2
	r16 = Mem0[r29 + 104<i32>:word64]
	r7 = Mem0[r29 + 60<i32>:word64]
	r2 = r2 - r4
	r0 = max<int32>(r7, r8)
	r4 = Mem0[r29 + 68<i32>:word64]
	r5 = Mem0[r29 + 116<i32>:word64]
	r2 = r7 + r2
	r6 = 0<32> - r2
	r6 = Mem0[r29 + 64<i32>:word32]
	r27 = r1
	r20 = max<int32>(r2, r8)
	r23 = max<int32>(r6, r8)
	r18 = Mem0[r29 + 84<i32>:word32]
	r2 = r6 - r3
	r7 = r1 * r0
	r5 = max<int32>(r5, r8)
	Mem0[r29 + 35<i32>:byte] = r2
	r26 = Mem0[r29 + 124<i32>:word32]
	r22 = r20 * r1
	r2 = r1 * r2
	Mem0[r29 + 136<i32>:word32] = r7
	r2 = r2 + r5
	r7 = r23 * r1
	Mem0[r29 + 132<i32>:word32] = r7
	r2 = r6 - r23
	r27 = r4 + r27 * r2
	r24 = r2 - r20
	r17 = r24 * r1
	// succ:  l0000DEAC
l0000DEAC:
	branch p0 l0000DEBC
	// succ:  l0000DEB4 l0000DEBC
l0000DEB4:
	p0 = r10 > -1<i32>
	branch r2 > r18 l0000DEC4
	goto l0000DEC0
	// succ:  l0000DEC0 l0000DEC4
l0000DEBC:
	r1_r0 = r21_r26
	goto l0000DF04
	// succ:  l0000DF04
l0000DEC0:
	r2 = Mem0[r29 + 144<i32>:word32]
	r1_r0 = r21_r26
	// succ:  l0000DEC4
l0000DEC4:
	r2 = Mem0[r29 - 124<i32>:word32]
	r1_r0 = r21_r26
	branch p0 l0000DED4
	// succ:  l0000DED0 l0000DED4
l0000DED0:
	p0 = r15 > 0<32>
	call vmemset_asm (retsize: 0;)
	// succ:  l0000DED4
l0000DED4:
	r2 = Mem0[r29 - 120<i32>:word32]
	r1 = r27 + 0<32>
	p0 = r24 > 0<32>
	branch p0 l0000DEF0
	// succ:  l0000DEE4 l0000DEF0
l0000DEE4:
	r2 = r17
	r0 = r26 + r2
	call vmemcpy_asm (retsize: 0;)
	// succ:  l0000DEF0
l0000DEF0:
	r2 = Mem0[r29 - 116<i32>:word32]
	r1 = r21 + 0<32>
	branch p0 l0000DF08
	// succ:  l0000DEFC l0000DF08
l0000DEFC:
	p0 = r12 > 0<32>
	r2 = r22
	r0 = r26 + r2
	// succ:  l0000DF04
l0000DF04:
	call vmemset_asm (retsize: 0;)
	// succ:  l0000DF08
l0000DF08:
	r26 = r26 + r19
	r18 = r18 + 1<32>
	r27 = r27 + r25
	branch r16 == 0<32> l0000DEAC
	goto l0000DF20
	// succ:  l0000DF20 l0000DEAC
l0000DF1C:
	r16 = Mem0[r29 + 124<i32>:word64]
	r2 = Mem0[r29 + 92<i32>:word64]
	r1 = r21
	goto l0000DF24
	// succ:  l0000DF24
l0000DF20:
	r16 = r16 + 0xFFFFFFFF<32>
	r16 = Mem0[r29 + 124<i32>:word64]
	r2 = Mem0[r29 + 92<i32>:word64]
	// succ:  l0000DF24
l0000DF24:
	r2 = Mem0[r29 + 88<i32>:word32]
	r0 = r16 + r2
	call vmemset_asm (retsize: 0;)
	r3 = Mem0[r29 + 116<i32>:word64]
	r2 = Mem0[r29 + 108<i32>:word64]
	r6 = Mem0[r29 + 128<i32>:word32]
	r7 = Mem0[r29 + 120<i32>:word32]
	r3 = r3 + r2
	Mem0[r29 + 116<i32>:word32] = r3
	r9 = Mem0[r29 + 112<i32>:word32]
	r3 = r6 + r2
	r5 = r7 - r2
	r7 = Mem0[r29 + 96<i32>:word64]
	r2 = Mem0[r29 + 100<i32>:word64]
	r9 = r9 + 1<32>
	Mem0[r29 + 128<i32>:word32] = r3
	Mem0[r29 + 120<i32>:word32] = r5
	p0 = r9 == r2
	r16 = r16 + r7
	Mem0[r29 + 124<i32>:word32] = r16
	r2 = Mem0[r29 + 48<i32>:word32]
	branch p0 l0000DE18
	// succ:  l0000DF74 l0000DE18
l0000DF74:
	r26 = Mem0[r29 + 44<i32>:word32]
	r27 = Mem0[r29 + 56<i32>:word32]
	r6 = Mem0[r29 + 24<i32>:word64]
	r0 = Mem0[r29 + 40<i32>:word64]
	r27 = r27 + r2
	r7 = Mem0[r29 + 32<i32>:word64]
	r20 = Mem0[r29 + 36<i32>:word64]
	r8 = Mem0[r29 + 52<i32>:word32]
	// succ:  l0000DF8C
l0000DF8C:
	r2 = Mem0[r29 + 80<i32>:word32]
	r3 = Mem0[r29 + 84<i32>:word64]
	r5 = Mem0[r29 + 108<i32>:word64]
	r8 = r8 + 1<32>
	p0 = r7 > r8
	Mem0[r29 + 20<i32>:byte] = r2
	r3 = r3 + r5
	r2 = r2 + r6
	Mem0[r29 + 84<i32>:word32] = r3
	// succ:  l0000DFB0
l0000DFB0:
	r0 = Mem0[r29 + 8<i32>:word32]
	r25_r24 = Mem0[r29 + 160<i32>:word64]
	r1_r0 = r21_r27
	branch p0 l0000DFD8
	// succ:  l0000DFC4 l0000DFD8
l0000DFC4:
	p0 = r0
	r19_r18 = Mem0[r29 + 184<i32>:word64]
	r17_r16 = Mem0[r29 + 192<i32>:word64]
	r23_r22 = Mem0[r29 + 168<i32>:word64]
	r21_r20 = Mem0[r29 + 176<i32>:word64]
	r27_r26 = Mem0[r29 + 152<i32>:word64]
	r25_r24 = Mem0[r29 + 160<i32>:word64]
	v39 = r30
	r31 = Mem0[v39 + 4<i32>:word32]
	r30 = Mem0[v39:word32]
	r29 = v39 + 8<i32>
	return
	// succ:  im2col_slice_v0_co_exit
l0000DFD8:
	r3 = Mem0[r29 + 4<i32>:word64]
	r2 = Mem0[r29 + 96<i32>:word64]
	r19_r18 = Mem0[r29 + 184<i32>:word64]
	r17_r16 = Mem0[r29 + 192<i32>:word64]
	r2 = r3 * r2
	r23_r22 = Mem0[r29 + 168<i32>:word64]
	r21_r20 = Mem0[r29 + 176<i32>:word64]
	r27_r26 = Mem0[r29 + 152<i32>:word64]
	v40 = r30
	r31 = Mem0[v40 + 4<i32>:word32]
	r30 = Mem0[v40:word32]
	r29 = v40 + 8<i32>
	// succ:  l0000DFEC_thunk_vmemset_asm
l0000DFEC_thunk_vmemset_asm:
	call vmemset_asm (retsize: 0;)
	return
	// succ:  im2col_slice_v0_co_exit
im2col_slice_v0_co_exit:


// im2col_slice_co
// Return size: 0
define im2col_slice_co
im2col_slice_co_entry:
	r29 = fp
	// succ:  l0000DFF4
l0000DFF4:
	v4 = r29 - 8<i32>
	Mem0[v4:word32] = r30
	Mem0[v4 + 4<i32>:word32] = r31
	r30 = v4
	r29 = v4 - 136<i32>
	Mem0[r29 + 112<i32>:word64] = r21_r20
	r6 = Mem0[r29 + 144<i32>:word32]
	r21 = r2
	Mem0[r29 + 88<i32>:word64] = r27_r26
	r2 = Mem0[r29 + 164<i32>:word32]
	Mem0[r29 + 48<i32>:word32] = r2
	r7 = Mem0[r29 + 168<i32>:word32]
	Mem0[r29 + 96<i32>:word64] = r25_r24
	r27 = Mem0[r29 + 148<i32>:word32]
	r2 = r6 * r3
	Mem0[r29 + 120<i32>:word64] = r19_r18
	Mem0[r29 + 104<i32>:word64] = r23_r22
	r22 = r1
	r19 = Mem0[r29 + 160<i32>:word32]
	r20 = Mem0[r29 + 176<i32>:word32]
	r23 = Mem0[r29 + 172<i32>:word32]
	r2 = 0xF<32> + r2 * r27
	Mem0[r29 + 128<i32>:word64] = r17_r16
	Mem0[r29 + 80<i32>:word32] = r0
	r2 = r2 & 0xFFFFFFF0<32>
	r1_r0 = r19_r23
	Mem0[r29 + 24<i32>:word32] = r19
	r16 = r5
	r18 = r20 + r23
	Mem0[r29 + 84<i32>:word32] = r3
	Mem0[r29 + 72<i32>:word32] = r6
	Mem0[r29 + 64<i32>:word32] = r2
	r17 = Mem0[r29 + 156<i32>:word32]
	Mem0[r29 + 68<i32>:word32] = r7
	Mem0[r29 + 76<i32>:word32] = r4
	r24 = Mem0[r29 + 152<i32>:word32]
	call fn00009750 (retsize: 0;)
	r25 = r0
	r2 = r19 * r17
	Mem0[r29 + 20<i32>:word32] = r25
	r3 = r25 * r19
	r23 = r18
	r26 = r23 - r3
	Mem0[r29 + 16<i32>:word32] = r26
	r1_r0 = r19_r23
	branch p0 l0000E090
	// succ:  l0000E088 l0000E090
l0000E088:
	p0 = r2 > r15
	Mem0[r29 + 40<i32>:word32] = r19
	r17 = r17
	goto l0000E0A4
	// succ:  l0000E0A4
l0000E090:
	call fn00009750 (retsize: 0;)
	r17 = r0
	r2 = r17 * r19
	r2 = r23 - r2
	Mem0[r29 + 40<i32>:word32] = r2
	// succ:  l0000E0A4
l0000E0A4:
	r1 = Mem0[r29 + 76<i32>:word64]
	r2 = Mem0[r29 + 64<i32>:word64]
	r0 = r16
	Mem0[r29 + 12<i32>:word32] = r17
	r2 = r2 * r20
	call vmemset_asm (retsize: 0;)
	p0 = r25 > r17
	r5 = r22
	branch p0 l0000E224
	// succ:  l0000E0C8 l0000E224
l0000E0C8:
	r3 = r25 * r24
	r0 = Mem0[r29 + 84<i32>:word64]
	r2 = Mem0[r29 + 72<i32>:word64]
	r4 = r27 - r21
	r7 = r24 * r21
	r1 = Mem0[r29 + 68<i32>:word64]
	r23 = 0<32>
	r6 = r25
	r2 = r27 * r2
	Mem0[r29 + 15<i32>:byte] = r3
	r3 = r3 - r1
	r2 = 0xF<32> + r2 * r0
	Mem0[r29 + 8<i32>:word32] = r7
	Mem0[r29 + 52<i32>:word32] = r24
	r2 = r2 >>u 4<32>
	Mem0[r29 + 56<i32>:word32] = r3
	Mem0[r29 + 44<i32>:word32] = r4
	Mem0[r29 + 4<i32>:word32] = r2
	r2 = Mem0[r29 + 40<i32>:word32]
	p0 = r6 == r17
	p1 = r6 == r25
	r4 = p1 ? r26 : 0<32>
	r2 = r19 + 0<32>
	r2 = r19 + 0<32>
	Mem0[r29 + 36<i32>:word32] = r16
	Mem0[r29 + 68<i32>:word32] = r2
	branch p0 l0000E200
	// succ:  l0000E128 l0000E200
l0000E128:
	p0 = r2 > r4
	Mem0[r29 + 32<i32>:word32] = r6
	r3 = Mem0[r29 + 4<i32>:word64]
	r22 = r16
	r2 = r2 - r4
	r2 = r2 * r3
	r2 = r2 << 4<32>
	Mem0[r29 + 28<i32>:word32] = r2
	// succ:  l0000E140
l0000E140:
	Mem0[r29 + 76<i32>:word32] = r4
	r2 = Mem0[r29 + 72<i32>:word64]
	r7 = Mem0[r29 + 48<i32>:word32]
	r25 = Mem0[r29 + 60<i32>:word32]
	branch p0 l0000E1D4
	// succ:  l0000E150 l0000E1D4
l0000E150:
	p0 = r2 > 0<32>
	r3 = Mem0[r29 + 76<i32>:word64]
	r2 = Mem0[r29 + 52<i32>:word64]
	r17 = 0<32>
	r20 = Mem0[r29 + 72<i32>:word32]
	r26 = Mem0[r29 + 56<i32>:word32]
	r2 = r3 * r2
	r2 = Mem0[r29 + 44<i32>:word32]
	r24 = r2 - r7
	r18 = r2 + r24
	r19 = 0<32> - r24
	// succ:  l0000E174
l0000E174:
	p0 = r25 > 0xFFFFFFFF<32>
	branch p0 l0000E1C0
	// succ:  l0000E17C l0000E1C0
l0000E17C:
	p0 = r5 > r25
	branch p0 l0000E1C0
	// succ:  l0000E188 l0000E1C0
l0000E188:
	r3 = max<int32>(r23, r19)
	r4 = r27 - r3
	r2 = max<int32>(r23, r18)
	branch r2 > 0<32> l0000E1C0
	// succ:  l0000E19C l0000E1C0
l0000E19C:
	r2 = r4 - r2
	r3 = Mem0[r29 + 80<i32>:word64]
	r6 = Mem0[r29 + 84<i32>:word64]
	r0 = r3 + r17
	r16 = r5
	r1 = r4 + r26
	r0 = r22 + r0 * r6
	r1 = r3 + r1 * r6
	r2 = r2 * r6
	call vmemcpy_asm (retsize: 0;)
	r5 = r16
	// succ:  l0000E1C0
l0000E1C0:
	r17 = r17 + r27
	r25 = r25 + 1<32>
	r26 = r26 + r21
	branch r20 == 0<32> l0000E174
	goto l0000E1D8
	// succ:  l0000E1D8 l0000E174
l0000E1D4:
	r2 = Mem0[r29 + 64<i32>:word64]
	r4 = Mem0[r29 + 76<i32>:word64]
	// succ:  l0000E1D8
l0000E1D8:
	r20 = r20 + 0xFFFFFFFF<32>
	r7 = Mem0[r29 + 68<i32>:word64]
	r22 = r22 + r2
	branch r4 == r7 l0000E140
	// succ:  l0000E1E8 l0000E140
l0000E1E8:
	r4 = r4 + 1<32>
	r25 = Mem0[r29 + 20<i32>:word32]
	r19 = Mem0[r29 + 24<i32>:word32]
	r16 = r16 + r2
	r17 = Mem0[r29 + 12<i32>:word32]
	r26 = Mem0[r29 + 16<i32>:word32]
	r7 = Mem0[r29 + 8<i32>:word64]
	r6 = Mem0[r29 + 32<i32>:word64]
	// succ:  l0000E200
l0000E200:
	r2 = Mem0[r29 + 56<i32>:word32]
	r3 = Mem0[r29 + 60<i32>:word64]
	r4 = Mem0[r29 + 52<i32>:word64]
	r6 = r6 + 1<32>
	p0 = r17 > r6
	Mem0[r29 + 14<i32>:byte] = r2
	r3 = r3 + r4
	r2 = r2 + r7
	Mem0[r29 + 60<i32>:word32] = r3
	// succ:  l0000E224
l0000E224:
	r19_r18 = Mem0[r29 + 120<i32>:word64]
	r17_r16 = Mem0[r29 + 128<i32>:word64]
	r23_r22 = Mem0[r29 + 104<i32>:word64]
	r21_r20 = Mem0[r29 + 112<i32>:word64]
	r27_r26 = Mem0[r29 + 88<i32>:word64]
	r25_r24 = Mem0[r29 + 96<i32>:word64]
	v38 = r30
	r31 = Mem0[v38 + 4<i32>:word32]
	r30 = Mem0[v38:word32]
	r29 = v38 + 8<i32>
	return
	// succ:  im2col_slice_co_exit
im2col_slice_co_exit:


// fast_im2col_co
// Return size: 0
define fast_im2col_co
fast_im2col_co_entry:
	r29 = fp
	// succ:  l0000E238
l0000E238:
	v4 = r29 - 8<i32>
	Mem0[v4:word32] = r30
	Mem0[v4 + 4<i32>:word32] = r31
	r30 = v4
	r29 = v4 - 104<i32>
	r6 = Mem0[r29 + 112<i32>:word32]
	r9 = Mem0[r29 + 124<i32>:word32]
	Mem0[r29 + 96<i32>:word64] = r17_r16
	r7 = Mem0[r29 + 128<i32>:word32]
	r17 = r3
	r6 = r6 + r9
	Mem0[r29 + 72<i32>:word64] = r23_r22
	Mem0[r29 + 88<i32>:word64] = r19_r18
	r19_r18 = r5_r4
	r7 = r7 + (r6 + 0xFFFFFFFF<32>)
	Mem0[r29 + 36<i32>:word32] = r7
	Mem0[r29 + 80<i32>:word64] = r21_r20
	r3 = r17 + 0xF<32>
	p0 = r9 > r7
	Mem0[r29 + 56<i32>:word64] = r27_r26
	Mem0[r29 + 64<i32>:word64] = r25_r24
	Mem0[r29 + 52<i32>:word32] = r1
	r8 = Mem0[r29 - 124<i32>:word32]
	branch p0 l0000E414
	// succ:  l0000E280 l0000E414
l0000E280:
	r5 = Mem0[r29 + 136<i32>:word32]
	r12 = Mem0[r29 + 120<i32>:word32]
	r4 = r3 >>u 4<32>
	r20 = r17 * r2
	r13 = Mem0[r29 + 140<i32>:word32]
	r27 = r3 & 0xFFFFFFF0<32>
	r6 = r9 * r12
	r4 = r4 * r8
	r14 = Mem0[r29 + 144<i32>:word32]
	r26 = r20
	r15 = r5 + r2
	r7 = r12 * r17
	r23 = r27 - r17
	r5 = r6 - r13
	r4 = r4 << 4<32>
	r21 = r5 * r17
	Mem0[r29 + 28<i32>:word32] = r14
	r14 = Mem0[r29 + 52<i32>:word32]
	r3 = r13 - r6
	r26 = r0 + r26 * r5
	Mem0[r29 + 32<i32>:word32] = r12
	Mem0[r29 + 4<i32>:word32] = r4
	r4 = 0xFFFFFFFF<32> - r3
	r22 = r15 * r17
	Mem0[r29 + 12<i32>:word32] = r8
	r16 = r13 + r14
	r8 = 0<32> - r12
	r2 = r7 * r2
	Mem0[r29 + 8<i32>:word32] = r8
	Mem0[r29 + 20<i32>:word32] = r13
	Mem0[r29 + 24<i32>:word32] = r2
	Mem0[r29 + 16<i32>:word32] = r16
	// succ:  l0000E2FC
l0000E2FC:
	branch r2 == 0<32> l0000E36C
	// succ:  l0000E308 l0000E36C
l0000E308:
	r2 = Mem0[r29 + 28<i32>:word32]
	r3 = Mem0[r29 + 20<i32>:word32]
	p0 = r12 > 0<32>
	branch p0 l0000E324
	// succ:  l0000E314 l0000E324
l0000E314:
	Mem0[r29 + 44<i32>:word32] = r5
	Mem0[r29 + 40<i32>:word32] = r4
	Mem0[r29 + 48<i32>:word32] = r9
	goto l0000E3E8
	// succ:  l0000E3E8
l0000E324:
	branch r25 >u r2 l0000E314
	// succ:  l0000E330 l0000E314
l0000E330:
	r2 = Mem0[r29 + 16<i32>:word32]
	Mem0[r29 + 48<i32>:word32] = r9
	r3 = Mem0[r29 + 8<i32>:word32]
	r24 = r26
	r2 = r4 - r2
	Mem0[r29 + 40<i32>:word32] = r4
	Mem0[r29 + 44<i32>:word32] = r5
	r2 = max<uint32>(r3, r2)
	r16 = 0<32> - r2
	// succ:  l0000E34C
l0000E34C:
	p0 = r25 > 0xFFFFFFFF<32>
	branch p0 l0000E35C
	// succ:  l0000E354 l0000E35C
l0000E354:
	branch r2 > r25 l0000E3B8
	goto l0000E360
	// succ:  l0000E360 l0000E3B8
l0000E35C:
	r1_r0 = r18_r19
	r2 = r22
	call vmemset_asm (retsize: 0;)
	goto l0000E368
	// succ:  l0000E368
l0000E360:
	r2 = Mem0[r29 + 52<i32>:word32]
	r1_r0 = r18_r19
	r2 = r22
	// succ:  l0000E368
l0000E368:
	goto l0000E3D4
	// succ:  l0000E3D4
l0000E36C:
	Mem0[r29 + 40<i32>:word32] = r4
	r2 = Mem0[r29 + 12<i32>:word64]
	r25_r24 = r19_r26
	Mem0[r29 + 44<i32>:word32] = r5
	r16 = r2
	p0 = r2 > 0<32>
	Mem0[r29 + 48<i32>:word32] = r9
	branch p0 l0000E3E8
	// succ:  l0000E384 l0000E3E8
l0000E384:
	r1_r0 = r24_r25
	r2 = r17
	call vmemcpy_asm (retsize: 0;)
	r1 = r18
	r2 = r23
	r0 = r25 + r17
	call vmemset_asm (retsize: 0;)
	branch r16 == 0<32> l0000E384
	// succ:  l0000E3B0 l0000E384
l0000E3B0:
	r16 = r16 + 0xFFFFFFFF<32>
	r25 = r25 + r27
	r24 = r24 + r17
	r19 = r19 + r2
	goto l0000E3E8
	// succ:  l0000E3E8
l0000E3B8:
	r1_r0 = r18_r19
	r2 = r21
	call vmemset_asm (retsize: 0;)
	r1 = r24
	r2 = r20
	r0 = r19 + r21
	call vmemcpy_asm (retsize: 0;)
	// succ:  l0000E3D4
l0000E3D4:
	r19 = r19 + r22
	r25 = r25 + 1<32>
	r24 = r24 + r20
	branch r16 == 0<32> l0000E34C
	goto l0000E3EC
	// succ:  l0000E3EC l0000E34C
l0000E3E8:
	r2 = Mem0[r29 + 36<i32>:word32]
	r9 = Mem0[r29 + 48<i32>:word32]
	r12 = Mem0[r29 + 32<i32>:word32]
	r7 = Mem0[r29 + 24<i32>:word32]
	r9 = r9 + 1<32>
	p0 = r2 > r9
	r4 = Mem0[r29 + 40<i32>:word64]
	r5 = Mem0[r29 + 44<i32>:word64]
	r26 = r26 + r7
	r4 = r4 + r12
	r5 = r5 + r12
	branch p0 l0000E2FC
	goto l0000E414
	// succ:  l0000E414 l0000E2FC
l0000E3EC:
	r16 = r16 + 0xFFFFFFFF<32>
	r2 = Mem0[r29 + 36<i32>:word32]
	r12 = Mem0[r29 + 32<i32>:word32]
	r7 = Mem0[r29 + 24<i32>:word32]
	r9 = r9 + 1<32>
	p0 = r2 > r9
	r4 = Mem0[r29 + 40<i32>:word64]
	r5 = Mem0[r29 + 44<i32>:word64]
	r26 = r26 + r7
	r4 = r4 + r12
	r5 = r5 + r12
	branch p0 l0000E2FC
	// succ:  l0000E414 l0000E2FC
l0000E414:
	r19_r18 = Mem0[r29 + 88<i32>:word64]
	r17_r16 = Mem0[r29 + 96<i32>:word64]
	r23_r22 = Mem0[r29 + 72<i32>:word64]
	r21_r20 = Mem0[r29 + 80<i32>:word64]
	r27_r26 = Mem0[r29 + 56<i32>:word64]
	r25_r24 = Mem0[r29 + 64<i32>:word64]
	v37 = r30
	r31 = Mem0[v37 + 4<i32>:word32]
	r30 = Mem0[v37:word32]
	r29 = v37 + 8<i32>
	return
	// succ:  fast_im2col_co_exit
fast_im2col_co_exit:


// deconv_execute_ref
// Return size: 0
define deconv_execute_ref
deconv_execute_ref_entry:
	r29 = fp
	// succ:  l0000E430
l0000E430:
	v4 = r29 - 8<i32>
	Mem0[v4:word32] = r30
	Mem0[v4 + 4<i32>:word32] = r31
	r30 = v4
	r29 = v4 - 184<i32>
	r3 = Mem0[r0 + 8<i32>:word32]
	r2 = Mem0[r0 + 4<i32>:word32]
	Mem0[r29 + 152<i32>:word64] = r23_r22
	Mem0[r29 + 176<i32>:word64] = r17_r16
	r16 = Mem0[r2:word32]
	r22 = Mem0[r0 + 32<i32>:int8]
	r7 = Mem0[r3:word32]
	r5 = Mem0[r2 + 24<i32>:word32]
	Mem0[r29 + 168<i32>:word64] = r19_r18
	r17 = Mem0[r2 + 4<i32>:word32]
	p0 = r22 == 0<32>
	Mem0[r29 + 144<i32>:word64] = r25_r24
	Mem0[r29 + 160<i32>:word64] = r21_r20
	Mem0[r29 + 104<i32>:word32] = r7
	r7 = Mem0[r16 + 4<i32>:word32]
	r20 = Mem0[r2 + 8<i32>:word32]
	r19 = Mem0[r2 + 12<i32>:word32]
	r24 = Mem0[r2 + 16<i32>:word32]
	r21 = Mem0[r2 + 20<i32>:word32]
	Mem0[r29 + 136<i32>:word64] = r27_r26
	r2 = Mem0[r16 + 12<i32>:word32]
	Mem0[r29 + 88<i32>:word32] = r0
	r0 = Mem0[r16 + 8<i32>:word32]
	Mem0[r29 + 92<i32>:word32] = r7
	r26 = Mem0[r16:word32]
	Mem0[r29 + 124<i32>:word32] = r2
	r7 = Mem0[r17 + 12<i32>:word32]
	r18 = Mem0[r5 + 8<i32>:word32]
	r2 = Mem0[r17:word32]
	r4 = Mem0[r3 + 8<i32>:word32]
	r27 = Mem0[r5 + 4<i32>:word32]
	Mem0[r29 + 16<i32>:word32] = r1
	r3 = Mem0[r3 + 4<i32>:word32]
	r1 = p0
	Mem0[r29 + 100<i32>:word32] = r7
	Mem0[r29 + 120<i32>:word32] = r2
	r7 = Mem0[r17 + 4<i32>:word32]
	r2 = Mem0[r17 + 8<i32>:word32]
	Mem0[r29 + 128<i32>:word32] = r0
	Mem0[r29 + 80<i32>:word32] = r5
	Mem0[r29 + 72<i32>:word32] = r3
	Mem0[r29 + 76<i32>:word32] = r4
	Mem0[r29 + 32<i32>:word32] = r7
	Mem0[r29 + 20<i32>:word32] = r26
	Mem0[r29 + 108<i32>:word32] = r1
	Mem0[r29 + 84<i32>:word32] = r2
	branch p0 l0000E4E4
	// succ:  l0000E4BC l0000E4E4
l0000E4BC:
	r2 = Mem0[r29 - 128<i32>:word32]
	r3 = Mem0[r29 + 32<i32>:word32]
	branch p0 l0000E4DC
	// succ:  l0000E4C8 l0000E4DC
l0000E4C8:
	p0 = r14 == 2<32>
	r0 = r18
	r23 = 0<32>
	branch p0 l0000E4F0
	// succ:  l0000E4D0 l0000E4F0
l0000E4D0:
	p0 = r14 == 1<32>
	r2 = Mem0[r29 + 128<i32>:word32]
	goto l0000E4E4
	// succ:  l0000E4E4
l0000E4DC:
	r2 = r2 - r3
	r0 = r2 + r18
	// succ:  l0000E4E4
l0000E4E4:
	r1 = r18
	call fn00009760 (retsize: 0;)
	r23 = r0
	// succ:  l0000E4F0
l0000E4F0:
	r1 = r27 + 0<32>
	p0 = r22 == 2<32>
	Mem0[r29 + 29<i32>:byte] = r0
	r1 = r27 + 0<32>
	branch p0 l0000E53C
	// succ:  l0000E50C l0000E53C
l0000E50C:
	r0 = p0
	r2 = Mem0[r29 + 92<i32>:word32]
	r1 = r27 + 0<32>
	Mem0[r29 + 11<i32>:byte] = r2
	r0 = Mem0[r29 + 108<i32>:word32]
	r2 = 0<32>
	r0 = Mem0[r29 + 92<i32>:word32]
	branch p0 l0000E554
	// succ:  l0000E52C l0000E554
l0000E52C:
	goto l0000E548
	// succ:  l0000E548
l0000E53C:
	r3 = Mem0[r29 + 120<i32>:word64]
	r2 = Mem0[r29 + 92<i32>:word64]
	r2 = r2 - r3
	r0 = r2 + r1
	// succ:  l0000E548
l0000E548:
	call fn00009760 (retsize: 0;)
	Mem0[r29 + 44<i32>:word32] = r0
	r3 = Mem0[r20 + 16<i32>:word32]
	r2 = Mem0[r19 + 16<i32>:word32]
	r20 = 0x437F0000<32>
	goto l0000E55C
	// succ:  l0000E55C
l0000E554:
	r3 = Mem0[r20 + 16<i32>:word32]
	r2 = Mem0[r19 + 16<i32>:word32]
	r20 = 0<32>
	// succ:  l0000E55C
l0000E55C:
	r4 = Mem0[r24 + 16<i32>:word32]
	r6 = Mem0[r17 + 16<i32>:word32]
	r17 = Mem0[r3:word32]
	r2 = Mem0[r2:word32]
	Mem0[r29 + 56<i32>:word32] = r6
	r5 = Mem0[r21 + 16<i32>:word32]
	r6 = Mem0[r29 + 104<i32>:word64]
	r7 = Mem0[r16 + 16<i32>:word32]
	r21 = r2 - r17
	r1_r0 = r20_r21
	Mem0[r29 + 96<i32>:word32] = r7
	r16 = Mem0[r5:word32]
	r6 = Mem0[r6 + 16<i32>:word32]
	Mem0[r29 + 52<i32>:word32] = r6
	r19 = Mem0[r4:word32]
	call fn00009610 (retsize: 0;)
	r25 = r20
	r16 = r0
	r24 = r16 - r19
	r1_r0 = r20_r24
	call fn00009610 (retsize: 0;)
	r3 = 0x38D1B717<32>
	r16 = r16 * r0
	r21 = r3
	r2 = 0x4F000000<32>
	r1_r0 = r21_r3
	Mem0[r29 + 17<i32>:byte] = r2
	call fn00009600 (retsize: 0;)
	r2 = r16 * r2
	r20 = 0<32>
	r1_r0 = r0_r25
	r2 = r20 - r17
	call fn00009620 (retsize: 0;)
	r0 = r2 * r0
	r0 = r21
	r24 = r0
	r1 = r24
	call fn00009600 (retsize: 0;)
	r1_r0 = r0_r25
	call fn00009610 (retsize: 0;)
	r2 = r20 - r19
	call fn00009620 (retsize: 0;)
	r0 = r2 * r0
	r2 = Mem0[r29 + 32<i32>:word64]
	r21 = r0
	r19 = r18 + 0xFFFFFFFF<32>
	r17 = r18 - r2
	// succ:  l0000E60C
l0000E60C:
	r0 = Mem0[r29 + 116<i32>:word64]
	r3 = r23
	r0 = r17 + r3
	branch p0 l0000E638
	// succ:  l0000E61C l0000E638
l0000E61C:
	p0 = r0
	r0 = r19 + r3
	branch p0 l0000E638
	// succ:  l0000E624 l0000E638
l0000E624:
	p0 = r14 == 1<32>
	r1 = Mem0[r29 + 108<i32>:word64]
	r0 = 0<32>
	r1_r0 = r18_r3
	branch p0 l0000E648
	// succ:  l0000E634 l0000E648
l0000E634:
	p0 = r1
	goto l0000E63C
	// succ:  l0000E63C
l0000E638:
	r1 = r18
	// succ:  l0000E63C
l0000E63C:
	r20 = r3
	call fn00009760 (retsize: 0;)
	r3 = r20
	// succ:  l0000E648
l0000E648:
	branch r2 == r0 l0000E60C
	// succ:  l0000E658 l0000E60C
l0000E658:
	r2 = Mem0[r29 + 128<i32>:word32]
	r23 = r3 + 1<32>
	Mem0[r29 + 64<i32>:word32] = r3
	r3 = Mem0[r29 + 120<i32>:word64]
	r2 = 0xCF000000<32>
	r21 = truncf(CONVERT(r24, uint32, real32))
	r23 = truncf(CONVERT(r21, uint32, real32))
	Mem0[r29 + 112<i32>:word32] = r20
	r19 = Mem0[r29 + 44<i32>:word64]
	r17 = r20 - r3
	r2 = r16 * r2
	Mem0[r29 + 60<i32>:word32] = r2
	// succ:  l0000E67C
l0000E67C:
	r0 = Mem0[r29 + 116<i32>:word32]
	r1_r0 = r20_r19
	branch p0 l0000E6AC
	// succ:  l0000E68C l0000E6AC
l0000E68C:
	p0 = r0
	branch p0 l0000E6A4
	// succ:  l0000E690 l0000E6A4
l0000E690:
	p0 = r14 == 1<32>
	r1 = Mem0[r29 + 108<i32>:word64]
	r0 = 0<32>
	r1_r0 = r20_r19
	branch p0 l0000E6B8
	// succ:  l0000E6A0 l0000E6B8
l0000E6A0:
	p0 = r1
	goto l0000E6B4
	// succ:  l0000E6B4
l0000E6A4:
	goto l0000E6B4
	// succ:  l0000E6B4
l0000E6AC:
	r1 = r20
	r0 = r17 + r19
	// succ:  l0000E6B4
l0000E6B4:
	call fn00009760 (retsize: 0;)
	// succ:  l0000E6B8
l0000E6B8:
	branch r2 == r0 l0000E67C
	// succ:  l0000E6C8 l0000E67C
l0000E6C8:
	r2 = Mem0[r29 + 92<i32>:word32]
	r19 = r19 + 1<32>
	r24 = Mem0[r29 + 16<i32>:word32]
	r16 = Mem0[r29 + 88<i32>:word32]
	r4 = 0x0000E6D2<p32>
	r22 = r19 + 0xFFFFFFFF<32>
	r1 = 0x8B<32>
	Mem0[r29 + 1<i32>:byte] = r2
	r2 = Mem0[r16 + 28<i32>:word32]
	Mem0[r29:word32] = r16
	call logmsg_function (retsize: 0;)
	r7 = Mem0[r29 + 128<i32>:word32]
	r17 = Mem0[r29 + 124<i32>:word32]
	r4 = 0x000259EC<p32>
	Mem0[r29 + 12<i32>:word32] = r17
	r2 = r24
	r1 = 0x8C<32>
	Mem0[r29 + 8<i32>:word32] = r7
	r3 = Mem0[r29 + 92<i32>:word64]
	Mem0[r29:word32] = r26
	Mem0[r29 + 4<i32>:word32] = r3
	call logmsg_function (retsize: 0;)
	r3 = Mem0[r29 + 32<i32>:word32]
	r25 = Mem0[r29 + 84<i32>:word32]
	r2 = r24
	r1 = 0x8D<32>
	Mem0[r29 + 12<i32>:word32] = r25
	r27 = Mem0[r29 + 100<i32>:word32]
	r4 = 0x00025A05<p32>
	Mem0[r29 + 8<i32>:word32] = r3
	r7 = Mem0[r29 + 120<i32>:word64]
	Mem0[r29:word32] = r27
	Mem0[r29 + 4<i32>:word32] = r7
	call logmsg_function (retsize: 0;)
	Mem0[r29 + 4<i32>:word32] = r18
	r1 = 0x8E<32>
	r4 = 0x00025A1D<p32>
	Mem0[r29:word32] = r20
	r2 = r24
	call logmsg_function (retsize: 0;)
	r2 = r24
	r1 = 0x8F<32>
	r4 = 0x00025A31<p32>
	Mem0[r29:byte] = r3
	r3 = Mem0[r16 + 32<i32>:byte]
	r16 = r24
	call logmsg_function (retsize: 0;)
	Mem0[r29 + 12<i32>:word32] = r27
	r24 = Mem0[r29 + 64<i32>:word32]
	r4 = 0x0000E7C7<p32>
	Mem0[r29:word32] = r26
	Mem0[r29 + 8<i32>:word32] = r24
	r1 = 0x90<32>
	Mem0[r29 + 4<i32>:word32] = r22
	r2 = r16
	call logmsg_function (retsize: 0;)
	p0 = r17 == r25
	r12 = r22
	branch p0 l0000E7D8
	// succ:  l0000E7BC l0000E7D8
l0000E7BC:
	r2 = r26 * r27
	r1 = 0x92<32>
	r3 = 0x00025A62<p32>
	r2 = r16
	// succ:  l0000E7CC
l0000E7CC:
	call errlog_function (retsize: 0;)
	r0 = 0xFFFFFFFF<32>
	goto l0000EAF0
	// succ:  l0000EAF0
l0000E7D8:
	Mem0[r29 + 24<i32>:word32] = r12
	r3 = Mem0[r29 + 104<i32>:word32]
	r9_r8 = r24_r27
	r4 = Mem0[r3 + 20<i32>:word32]
	r2 = r2 * r24
	r2 = r2 * r22
	branch r2 >u r4 l0000E810
	// succ:  l0000E7FC l0000E810
l0000E7FC:
	r2 = r2 << 2<32>
	Mem0[r29 + 4<i32>:word32] = r2
	r1 = 0x94<32>
	r3 = 0x0000E83B<p32>
	Mem0[r29:word32] = r4
	r2 = r16
	goto l0000E7CC
	// succ:  l0000E7CC
l0000E810:
	r4 = Mem0[r29 + 80<i32>:word32]
	branch r3 == 1<32> l0000E82C
	// succ:  l0000E820 l0000E82C
l0000E820:
	r3 = Mem0[r4:word32]
	r1 = 0x96<32>
	goto l0000E7CC
	// succ:  l0000E7CC
l0000E82C:
	branch r3 == 1<32> l0000E84C
	// succ:  l0000E840 l0000E84C
l0000E840:
	r3 = Mem0[r4 + 12<i32>:word32]
	r27 = r18
	p0 = r26 > 0<32>
	r1 = 0x97<32>
	goto l0000E7CC
	// succ:  l0000E7CC
l0000E84C:
	r7 = Mem0[r29 + 72<i32>:word64]
	r3 = Mem0[r29 + 104<i32>:word64]
	r4 = Mem0[r29 + 60<i32>:word32]
	Mem0[r3 + 12<i32>:word32] = r8
	Mem0[r3 + 4<i32>:word32] = r12
	Mem0[r3 + 24<i32>:word32] = r2
	Mem0[r3 + 8<i32>:word32] = r9
	Mem0[r3:word32] = r26
	r3 = Mem0[r29 + 76<i32>:word64]
	r2 = Mem0[r7 + 16<i32>:word32]
	Mem0[r7:word32] = 1<32>
	Mem0[r7 + 12<i32>:word32] = 1<32>
	Mem0[r7 + 8<i32>:word32] = 1<32>
	Mem0[r7 + 4<i32>:word32] = 1<32>
	Mem0[r7 + 24<i32>:word32] = 4<32>
	Mem0[r2:word32] = r4
	Mem0[r3:word32] = 1<32>
	r2 = Mem0[r3 + 16<i32>:word32]
	Mem0[r3 + 8<i32>:word32] = 1<32>
	Mem0[r3 + 4<i32>:word32] = 1<32>
	Mem0[r3 + 12<i32>:word32] = 1<32>
	r4 = Mem0[r29 + 68<i32>:word64]
	Mem0[r3 + 24<i32>:word32] = 4<32>
	Mem0[r2:word32] = r4
	branch p0 l0000EAC8
	// succ:  l0000E894 l0000EAC8
l0000E894:
	r6 = Mem0[r29 + 120<i32>:word64]
	r3 = Mem0[r29 + 92<i32>:word64]
	r2 = r20
	r5 = Mem0[r29 + 128<i32>:word32]
	r7 = Mem0[r29 + 32<i32>:word32]
	r3 = r3 + 0xFFFFFFFF<32>
	r18 = r7
	r4 = r7
	r5 = r5 + 0xFFFFFFFF<32>
	r2 = r6 + r2 * r3
	Mem0[r29 + 7<i32>:byte] = r5
	r5 = 0<32>
	r1 = r7 * r17
	r4 = r4 + r27 * r5
	r4 = r4 - r9
	r17 = r17 * r8
	Mem0[r29 + 27<i32>:byte] = r3
	r4 = r4 + (r4 >>u 0x1F<32>)
	r3 = r1 * r8
	Mem0[r29 + 12<i32>:byte] = r7
	r2 = r2 >> 1<32>
	r7 = r4 >> 1<32>
	// succ:  l0000E8F0
l0000E8F0:
	p0 = r12 > 0<32>
	branch p0 l0000EAAC
	// succ:  l0000E8F8 l0000EAAC
l0000E8F8:
	r3 = Mem0[r29 + 28<i32>:word64]
	r2 = Mem0[r29 + 92<i32>:word64]
	r6 = 0<32>
	Mem0[r29 + 116<i32>:word32] = r6
	r7 = Mem0[r29 + 24<i32>:word64]
	r2 = r3 * r2
	Mem0[r29 + 84<i32>:word32] = r2
	r5 = r3 * r7
	Mem0[r29 + 40<i32>:word32] = r5
	// succ:  l0000E914
l0000E914:
	Mem0[r29 + 44<i32>:word32] = r19
	p0 = r9 > 0<32>
	branch p0 l0000EA98
	// succ:  l0000E920 l0000EA98
l0000E920:
	r4 = Mem0[r29 + 116<i32>:word64]
	r2 = Mem0[r29 + 40<i32>:word64]
	r7 = 0<32>
	Mem0[r29 + 68<i32>:word32] = r7
	r3 = Mem0[r29 + 36<i32>:word64]
	r2 = r4 + r2
	r3 = r4 + r3
	r2 = r2 * r9
	Mem0[r29 + 60<i32>:word32] = r2
	Mem0[r29 + 88<i32>:word32] = r3
	// succ:  l0000E93C
l0000E93C:
	p0 = r8 > 0<32>
	branch p0 l0000EA80
	// succ:  l0000E944 l0000EA80
l0000E944:
	r2 = Mem0[r29 + 60<i32>:word64]
	r4 = Mem0[r29 + 68<i32>:word64]
	r5 = Mem0[r29 + 56<i32>:word64]
	r3 = Mem0[r29 + 48<i32>:word64]
	r2 = r4 + r2
	r3 = Mem0[r29 + 52<i32>:word64]
	r4 = 0<32>
	r19 = r4 + r3
	r2 = r2 * r8
	r2 = r3 + (r2 << 2<32>)
	// succ:  l0000E960
l0000E960:
	Mem0[r29 + 72<i32>:word32] = r2
	r2 = Mem0[r29 + 120<i32>:word64]
	r26 = 0<32>
	r25 = r5
	p0 = r2 > 0<32>
	r16 = 0<32>
	Mem0[r29 + 80<i32>:word32] = r5
	Mem0[r29 + 76<i32>:word32] = r4
	branch p0 l0000EA60
	// succ:  l0000E97C l0000EA60
l0000E97C:
	r2 = Mem0[r29 + 116<i32>:word64]
	r1 = r20
	r0 = r2 - r26
	call fn00009770 (retsize: 0;)
	branch p0 l0000EA4C
	// succ:  l0000E98C l0000EA4C
l0000E98C:
	p0 = r0 == 0<32>
	r2 = Mem0[r29 + 88<i32>:word64]
	r1 = r20
	r0 = r2 - r26
	call fn00009750 (retsize: 0;)
	branch r2 > r0 l0000EA4C
	// succ:  l0000E9A4 l0000EA4C
l0000E9A4:
	r2 = Mem0[r29 + 92<i32>:word32]
	r20 = r25 + 0<32>
	r24 = 0<32>
	r3 = Mem0[r29 - 128<i32>:word32]
	r2 = Mem0[r29 + 84<i32>:word32]
	branch p0 l0000EA4C
	// succ:  l0000E9B8 l0000EA4C
l0000E9B8:
	p0 = r10 > 0<32>
	r2 = r0 + r2
	Mem0[r29 + 26<i32>:byte] = r2
	r2 = r2 * r3
	// succ:  l0000E9C4
l0000E9C4:
	r1_r0 = r27_r22
	call fn00009770 (retsize: 0;)
	r1_r0 = r27_r22
	branch p0 l0000EA40
	// succ:  l0000E9D8 l0000EA40
l0000E9D8:
	p0 = r0 == 0<32>
	call fn00009750 (retsize: 0;)
	branch r2 > r0 l0000EA40
	// succ:  l0000E9E8 l0000EA40
l0000E9E8:
	r2 = Mem0[r29 + 128<i32>:word32]
	r3 = Mem0[r29 + 124<i32>:word32]
	r8 = Mem0[r29 + 100<i32>:word32]
	branch p0 l0000EA40
	// succ:  l0000E9F4 l0000EA40
l0000E9F4:
	p0 = r3 > 0<32>
	r4 = Mem0[r29 + 96<i32>:word64]
	r2 = Mem0[r29 + 104<i32>:word64]
	p0 = r3 >u 1<32>
	r6 = r3 + 0xFFFFFFFF<32>
	r2 = r0 + r2
	__loop(0<i32>, 0x0000EA24<p32>, r6)
	r4 = Mem0[r20:byte]
	r3 = r20 + r8
	r2 = r4 + r2 * r3
	r2 = r2 + 1<i32>
	r5 = Mem0[r2:byte]
	r4 = r4 - r23
	r5 = r5 - r21
	branch p0 l0000EA3C
	// succ:  l0000EA24 l0000EA3C
l0000EA24:
	r2 = r2 + 1<i32>
	r7 = Mem0[r2:byte]
	r6 = Mem0[r3:byte]
	r3 = r3 + r8
	r16 = r16 + r4 * r5
	r5 = r7 - r21
	r4 = r6 - r23
	// succ:  l0000EA3C
l0000EA3C:
	r16 = r16 + r4 * r5
	// succ:  l0000EA40
l0000EA40:
	branch r24 == r18 l0000E9C4
	goto l0000EA50
	// succ:  l0000EA50 l0000E9C4
l0000EA4C:
	r7 = Mem0[r29 + 120<i32>:word64]
	r2 = Mem0[r29 + 108<i32>:word64]
	// succ:  l0000EA50
l0000EA50:
	r24 = r24 + 1<32>
	r20 = r20 + r17
	branch r26 == r7 l0000E97C
	goto l0000EA64
	// succ:  l0000EA64 l0000E97C
l0000EA60:
	r5 = Mem0[r29 + 80<i32>:word64]
	r4 = Mem0[r29 + 76<i32>:word64]
	// succ:  l0000EA64
l0000EA64:
	r20 = Mem0[r29 + 112<i32>:word32]
	r26 = r26 + 1<32>
	r25 = r25 + r2
	r8 = Mem0[r29 + 100<i32>:word32]
	r2 = Mem0[r29 + 72<i32>:word32]
	r5 = r5 + 1<32>
	r4 = r4 + 1<32>
	Mem0[r2:word32] = r16
	r2 = r2 + 4<i32>
	p0 = r4 == r8
	branch p0 l0000E960
	// succ:  l0000EA80 l0000E960
l0000EA80:
	r9 = Mem0[r29 + 64<i32>:word32]
	r2 = Mem0[r29 + 68<i32>:word32]
	r2 = r2 + 1<32>
	Mem0[r29 + 68<i32>:word32] = r2
	p0 = r9 == r2
	branch p0 l0000E93C
	// succ:  l0000EA98 l0000E93C
l0000EA98:
	r19 = Mem0[r29 + 44<i32>:word64]
	r3 = Mem0[r29 + 116<i32>:word64]
	r3 = r3 + 1<32>
	r2 = r3 + 2<32>
	Mem0[r29 + 116<i32>:word32] = r3
	branch p0 l0000E914
	// succ:  l0000EAAC l0000E914
l0000EAAC:
	p0 = r2 == r11
	r26 = Mem0[r29 + 20<i32>:word32]
	r2 = Mem0[r29 + 28<i32>:word32]
	r12 = Mem0[r29 + 24<i32>:word32]
	r2 = r2 + 1<32>
	Mem0[r29 + 28<i32>:word32] = r2
	p0 = r2 == r26
	branch p0 l0000E8F0
	// succ:  l0000EAC8 l0000E8F0
l0000EAC8:
	Mem0[r29 + 12<i32>:word32] = r8
	r1 = 0xD3<32>
	r4 = 0x00025AB3<p32>
	Mem0[r29 + 8<i32>:word32] = r9
	r2 = Mem0[r29 + 16<i32>:word32]
	Mem0[r29:word32] = r26
	Mem0[r29 + 4<i32>:word32] = r12
	call logmsg_function (retsize: 0;)
	r0 = 0<32>
	// succ:  l0000EAF0
l0000EAF0:
	r19_r18 = Mem0[r29 + 168<i32>:word64]
	r17_r16 = Mem0[r29 + 176<i32>:word64]
	r23_r22 = Mem0[r29 + 152<i32>:word64]
	r21_r20 = Mem0[r29 + 160<i32>:word64]
	r27_r26 = Mem0[r29 + 136<i32>:word64]
	r25_r24 = Mem0[r29 + 144<i32>:word64]
	v46 = r30
	r31 = Mem0[v46 + 4<i32>:word32]
	r30 = Mem0[v46:word32]
	r29 = v46 + 8<i32>
	return
	// succ:  deconv_execute_ref_exit
deconv_execute_ref_exit:


// deconv_check_ref
// Return size: 0
define deconv_check_ref
deconv_check_ref_entry:
	r29 = fp
	// succ:  l0000EB04
l0000EB04:
	v4 = r29 - 8<i32>
	Mem0[v4:word32] = r30
	Mem0[v4 + 4<i32>:word32] = r31
	r30 = v4
	r29 = v4 - 16<i32>
	Mem0[r29 - 16<i32>:word64] = r17_r16
	r4 = 0x0002596B<p32>
	r17 = r0
	r16 = r1
	r1 = 0x202<32>
	Mem0[r29:word32] = r17
	r2 = r16
	call logmsg_function (retsize: 0;)
	branch r2 == 7<32> l0000EB40
	// succ:  l0000EB2C l0000EB40
l0000EB2C:
	r2 = Mem0[r17 + 16<i32>:word32]
	r2 = Mem0[r17 + 28<i32>:word32]
	r1 = 0x203<32>
	r3 = 0x0000EB47<p32>
	Mem0[r29:word32] = r2
	goto l0000EB54
	// succ:  l0000EB54
l0000EB40:
	branch r2 == 3<32> l0000EB64
	// succ:  l0000EB50 l0000EB64
l0000EB50:
	r2 = Mem0[r17 + 20<i32>:word32]
	r1 = 0x204<32>
	r3 = 0x0000EB63<p32>
	// succ:  l0000EB54
l0000EB54:
	r2 = r16
	call errlog_function (retsize: 0;)
	v16 = r30
	r31 = Mem0[v16 + 4<i32>:word32]
	r30 = Mem0[v16:word32]
	r29 = v16 + 8<i32>
	return
	// succ:  deconv_check_ref_exit
l0000EB64:
	r2 = r16
	r1 = 0x205<32>
	r4 = 0x000259B6<p32>
	Mem0[r29:word32] = r17
	call logmsg_function (retsize: 0;)
	r0 = 0<32>
	v17 = r30
	r31 = Mem0[v17 + 4<i32>:word32]
	r30 = Mem0[v17:word32]
	r29 = v17 + 8<i32>
	return
	// succ:  deconv_check_ref_exit
deconv_check_ref_exit:


// logmsg_function
// Return size: 0
define logmsg_function
logmsg_function_entry:
	r29 = fp
	// succ:  l0000EB84
l0000EB84:
	v4 = r29 - 8<i32>
	Mem0[v4:word32] = r30
	Mem0[v4 + 4<i32>:word32] = r31
	r30 = v4
	r29 = v4 - 8<i32>
	r3 = 2<32>
	branch r3 >u r5 l0000EBA8
	// succ:  l0000EB94 l0000EBA8
l0000EB94:
	r5 = Mem0[r2 + 16<i32>:word32]
	r5 = r29 + 0x10<32>
	r3 = 2<32>
	r0 = 0x0000EBD3<p32>
	Mem0[r29 + 1<i32>:byte] = r6
	r6 = r29 + 0x10<32>
	call logv (retsize: 0;)
	goto l0000EBAC
	// succ:  l0000EBAC
l0000EBA8:
	v13 = r30
	r31 = Mem0[v13 + 4<i32>:word32]
	r30 = Mem0[v13:word32]
	r29 = v13 + 8<i32>
	return
	// succ:  logmsg_function_exit
l0000EBAC:
	// succ:  l0000EBAC_thunk_errlog_function
l0000EBAC_thunk_errlog_function:
	call errlog_function (retsize: 0;)
	return
	// succ:  logmsg_function_exit
logmsg_function_exit:


// errlog_function
// Return size: 0
define errlog_function
errlog_function_entry:
	r29 = fp
	// succ:  l0000EBB0
l0000EBB0:
	v4 = r29 - 8<i32>
	Mem0[v4:word32] = r30
	Mem0[v4 + 4<i32>:word32] = r31
	r30 = v4
	r29 = v4 - 8<i32>
	r4 = r3
	r0 = 0x0002594F<p32>
	Mem0[r29 + 1<i32>:byte] = r6
	r6 = r29 + 0x10<32>
	r5 = r29 + 0x10<32>
	r3 = 0<32>
	v13 = r30
	r31 = Mem0[v13 + 4<i32>:word32]
	r30 = Mem0[v13:word32]
	r29 = v13 + 8<i32>
	return
	// succ:  errlog_function_exit
errlog_function_exit:


// deconv_f_execute_ref
// Return size: 0
define deconv_f_execute_ref
deconv_f_execute_ref_entry:
	r29 = fp
	// succ:  l0000EBE0
l0000EBE0:
	v4 = r29 - 8<i32>
	Mem0[v4:word32] = r30
	Mem0[v4 + 4<i32>:word32] = r31
	r30 = v4
	r29 = v4 - 176<i32>
	Mem0[r29 - 40<i32>:word64] = r23_r22
	r22 = r0
	Mem0[r29 + 168<i32>:word64] = r17_r16
	r2 = Mem0[r22 + 4<i32>:word32]
	r17 = Mem0[r22 + 32<i32>:int8]
	Mem0[r29 + 160<i32>:word64] = r19_r18
	r3 = Mem0[r22 + 8<i32>:word32]
	r4 = Mem0[r2 + 8<i32>:word32]
	r16 = Mem0[r2:word32]
	p0 = r17 == 0<32>
	Mem0[r29 + 152<i32>:word64] = r21_r20
	r19 = Mem0[r2 + 4<i32>:word32]
	r21 = r1
	Mem0[r29 + 128<i32>:word64] = r27_r26
	Mem0[r29 + 136<i32>:word64] = r25_r24
	r0 = Mem0[r16 + 8<i32>:word32]
	r1 = p0
	r2 = Mem0[r19 + 8<i32>:word32]
	r24 = Mem0[r16:word32]
	r20 = Mem0[r3:word32]
	r7 = Mem0[r19 + 4<i32>:word32]
	r18 = Mem0[r4 + 8<i32>:word32]
	r26 = Mem0[r19 + 12<i32>:word32]
	Mem0[r29 + 88<i32>:word32] = r2
	r27 = Mem0[r4 + 4<i32>:word32]
	Mem0[r29 + 32<i32>:word32] = r7
	r2 = Mem0[r19:word32]
	r7 = Mem0[r16 + 4<i32>:word32]
	r6 = Mem0[r16 + 12<i32>:word32]
	Mem0[r29 + 120<i32>:word32] = r0
	Mem0[r29 + 80<i32>:word32] = r4
	Mem0[r29 + 116<i32>:word32] = r2
	Mem0[r29 + 20<i32>:word32] = r24
	Mem0[r29 + 92<i32>:word32] = r7
	Mem0[r29 + 100<i32>:word32] = r6
	Mem0[r29 + 104<i32>:word32] = r1
	branch p0 l0000EC74
	// succ:  l0000EC50 l0000EC74
l0000EC50:
	branch p0 l0000EC68
	// succ:  l0000EC54 l0000EC68
l0000EC54:
	p0 = r9 == 2<32>
	r23 = 0<32>
	branch p0 l0000EC80
	// succ:  l0000EC5C l0000EC80
l0000EC5C:
	p0 = r9 == 1<32>
	r2 = Mem0[r29 + 120<i32>:word64]
	r0 = r18
	goto l0000EC74
	// succ:  l0000EC74
l0000EC68:
	r3 = Mem0[r29 + 32<i32>:word64]
	r2 = Mem0[r29 + 120<i32>:word64]
	r2 = r2 - r3
	r0 = r2 + r18
	// succ:  l0000EC74
l0000EC74:
	r1 = r18
	call fn00009760 (retsize: 0;)
	r23 = r0
	// succ:  l0000EC80
l0000EC80:
	p0 = r17 == 2<32>
	Mem0[r29 + 28<i32>:byte] = r0
	branch p0 l0000ECC0
	// succ:  l0000EC94 l0000ECC0
l0000EC94:
	r0 = p0
	r2 = Mem0[r29 + 92<i32>:word32]
	r1 = r27 + 0<32>
	r1 = Mem0[r29 + 104<i32>:word64]
	r0 = 0<32>
	r0 = Mem0[r29 + 92<i32>:word32]
	r1 = r27 + 0<32>
	branch p0 l0000ECD4
	// succ:  l0000ECB0 l0000ECD4
l0000ECB0:
	p0 = r1
	goto l0000ECD0
	// succ:  l0000ECD0
l0000ECC0:
	r3 = Mem0[r29 + 92<i32>:word64]
	r2 = Mem0[r29 + 116<i32>:word64]
	r1 = r27
	r2 = r3 - r2
	r0 = r2 + r1
	// succ:  l0000ECD0
l0000ECD0:
	call fn00009760 (retsize: 0;)
	// succ:  l0000ECD4
l0000ECD4:
	r7 = Mem0[r29 + 32<i32>:word64]
	r2 = Mem0[r20 + 16<i32>:word32]
	r25 = r0
	Mem0[r29 + 84<i32>:word32] = r20
	r7 = Mem0[r16 + 16<i32>:word32]
	r16 = r18 + 0xFFFFFFFF<32>
	r20 = r18 - r7
	Mem0[r29 + 56<i32>:word32] = r2
	r2 = Mem0[r19 + 16<i32>:word32]
	Mem0[r29 + 96<i32>:word32] = r7
	Mem0[r29 + 52<i32>:word32] = r2
	// succ:  l0000ECF0
l0000ECF0:
	r0 = Mem0[r29 + 112<i32>:word64]
	r3 = r23
	r0 = r20 + r3
	branch p0 l0000ED1C
	// succ:  l0000ED00 l0000ED1C
l0000ED00:
	p0 = r0
	r0 = r16 + r3
	branch p0 l0000ED1C
	// succ:  l0000ED08 l0000ED1C
l0000ED08:
	p0 = r9 == 1<32>
	r1 = Mem0[r29 + 104<i32>:word64]
	r0 = 0<32>
	r1_r0 = r18_r3
	branch p0 l0000ED2C
	// succ:  l0000ED18 l0000ED2C
l0000ED18:
	p0 = r1
	goto l0000ED20
	// succ:  l0000ED20
l0000ED1C:
	r1 = r18
	// succ:  l0000ED20
l0000ED20:
	r19 = r3
	call fn00009760 (retsize: 0;)
	r3 = r19
	// succ:  l0000ED2C
l0000ED2C:
	branch r2 == r0 l0000ECF0
	// succ:  l0000ED3C l0000ECF0
l0000ED3C:
	r2 = Mem0[r29 + 120<i32>:word32]
	r23 = r3 + 1<32>
	r2 = Mem0[r29 + 116<i32>:word64]
	r23 = r3
	r20 = r25
	Mem0[r29 + 108<i32>:word32] = r19
	r16 = r19 - r2
	// succ:  l0000ED4C
l0000ED4C:
	r0 = Mem0[r29 + 112<i32>:word32]
	r1_r0 = r19_r20
	branch p0 l0000ED7C
	// succ:  l0000ED5C l0000ED7C
l0000ED5C:
	p0 = r0
	branch p0 l0000ED74
	// succ:  l0000ED60 l0000ED74
l0000ED60:
	p0 = r9 == 1<32>
	r1 = Mem0[r29 + 104<i32>:word64]
	r0 = 0<32>
	r1_r0 = r19_r20
	branch p0 l0000ED88
	// succ:  l0000ED70 l0000ED88
l0000ED70:
	p0 = r1
	goto l0000ED84
	// succ:  l0000ED84
l0000ED74:
	goto l0000ED84
	// succ:  l0000ED84
l0000ED7C:
	r1 = r19
	r0 = r16 + r20
	// succ:  l0000ED84
l0000ED84:
	call fn00009760 (retsize: 0;)
	// succ:  l0000ED88
l0000ED88:
	branch r2 == r0 l0000ED4C
	// succ:  l0000ED98 l0000ED4C
l0000ED98:
	r2 = Mem0[r29 + 92<i32>:word32]
	r20 = r20 + 1<32>
	r2 = Mem0[r22 + 28<i32>:word32]
	r4 = 0x0000ED9F<p32>
	Mem0[r29 + 4<i32>:word32] = r2
	r1 = 0x76<32>
	r17 = r20
	r2 = r21
	Mem0[r29:word32] = r22
	Mem0[r29 + 24<i32>:word32] = r17
	call logmsg_function (retsize: 0;)
	r7 = Mem0[r29 + 120<i32>:word32]
	r25 = Mem0[r29 + 100<i32>:word32]
	r1 = 0x77<32>
	Mem0[r29:word32] = r24
	Mem0[r29 + 12<i32>:word32] = r25
	r4 = 0x00025B79<p32>
	Mem0[r29 + 8<i32>:word32] = r7
	r3 = Mem0[r29 + 92<i32>:word64]
	r2 = r21
	Mem0[r29 + 4<i32>:word32] = r3
	call logmsg_function (retsize: 0;)
	r7 = Mem0[r29 + 32<i32>:word32]
	r27 = Mem0[r29 + 88<i32>:word32]
	r1 = 0x78<32>
	Mem0[r29:word32] = r26
	Mem0[r29 + 12<i32>:word32] = r27
	r4 = 0x00025B92<p32>
	Mem0[r29 + 8<i32>:word32] = r7
	r3 = Mem0[r29 + 116<i32>:word64]
	r2 = r21
	Mem0[r29 + 4<i32>:word32] = r3
	call logmsg_function (retsize: 0;)
	Mem0[r29 + 4<i32>:word32] = r18
	r1 = 0x79<32>
	r4 = 0x00025BAA<p32>
	Mem0[r29:word32] = r19
	r2 = r21
	call logmsg_function (retsize: 0;)
	r2 = r21
	r1 = 0x7A<32>
	r4 = 0x00025BBE<p32>
	Mem0[r29:byte] = r3
	r3 = Mem0[r22 + 32<i32>:byte]
	r16 = r25
	call logmsg_function (retsize: 0;)
	Mem0[r29 + 12<i32>:word32] = r26
	r1 = 0x7B<32>
	r4 = 0x0000EE54<p32>
	Mem0[r29:word32] = r24
	r2 = r21
	Mem0[r29 + 4<i32>:word32] = r17
	Mem0[r29 + 8<i32>:word32] = r23
	call logmsg_function (retsize: 0;)
	r1 = 0x7D<32>
	p0 = r16 == r27
	branch p0 l0000EE8C
	// succ:  l0000EE74 l0000EE8C
l0000EE74:
	r2 = r24 * r26
	r3 = 0x00025BEF<p32>
	r2 = r21
	// succ:  l0000EE80
l0000EE80:
	call errlog_function (retsize: 0;)
	r0 = 0xFFFFFFFF<32>
	goto l0000F148
	// succ:  l0000F148
l0000EE8C:
	Mem0[r29 + 16<i32>:byte] = r7
	r3 = Mem0[r29 + 84<i32>:word32]
	r7 = r23
	r4 = Mem0[r3 + 20<i32>:word32]
	r2 = r2 * r17
	branch r2 >u r4 l0000EEC4
	// succ:  l0000EEB0 l0000EEC4
l0000EEB0:
	r2 = r2 << 2<32>
	Mem0[r29 + 4<i32>:word32] = r2
	r1 = 0x7F<32>
	r3 = 0x0000EEC8<p32>
	Mem0[r29:word32] = r4
	r2 = r21
	goto l0000EE80
	// succ:  l0000EE80
l0000EEC4:
	r4 = Mem0[r29 + 80<i32>:word32]
	branch r3 == 1<32> l0000EEE0
	// succ:  l0000EED4 l0000EEE0
l0000EED4:
	r3 = Mem0[r4:word32]
	r1 = 0x81<32>
	goto l0000EE80
	// succ:  l0000EE80
l0000EEE0:
	branch r3 == 1<32> l0000EEFC
	// succ:  l0000EEF0 l0000EEFC
l0000EEF0:
	r3 = Mem0[r4 + 12<i32>:word32]
	p0 = r24 > 0<32>
	r1 = 0x82<32>
	goto l0000EE80
	// succ:  l0000EE80
l0000EEFC:
	Mem0[r29 + 16<i32>:word32] = r21
	r3 = Mem0[r29 + 84<i32>:word64]
	Mem0[r3 + 4<i32>:word32] = r17
	Mem0[r3 + 24<i32>:word32] = r2
	Mem0[r3 + 8<i32>:word32] = r7
	Mem0[r3:word32] = r24
	Mem0[r3 + 12<i32>:word32] = r26
	branch p0 l0000F124
	// succ:  l0000EF14 l0000F124
l0000EF14:
	r6 = Mem0[r29 + 116<i32>:word64]
	r3 = Mem0[r29 + 92<i32>:word64]
	r2 = r19
	r23 = r16 * r26
	r5 = Mem0[r29 + 120<i32>:word32]
	r27 = Mem0[r29 + 32<i32>:word32]
	r3 = r3 + 0xFFFFFFFF<32>
	r5 = r5 + 0xFFFFFFFF<32>
	r4 = r27
	r1 = r27 * r16
	r2 = r6 + r2 * r3
	Mem0[r29 + 7<i32>:byte] = r5
	r5 = 0<32>
	r2 = r2 + (0x41<32> - r20)
	r4 = r4 + r18 * r5
	r4 = r4 - r7
	Mem0[r29 + 26<i32>:byte] = r3
	r4 = r4 + (r4 >>u 0x1F<32>)
	r3 = r1 * r26
	Mem0[r29 + 12<i32>:byte] = r6
	r2 = r2 >> 1<32>
	// succ:  l0000EF70
l0000EF70:
	branch p0 l0000F10C
	// succ:  l0000EF74 l0000F10C
l0000EF74:
	p0 = r9 > 0<32>
	r3 = Mem0[r29 + 28<i32>:word64]
	r2 = Mem0[r29 + 92<i32>:word64]
	r5 = 0<32>
	Mem0[r29 + 112<i32>:word32] = r5
	r6 = Mem0[r29 + 24<i32>:word64]
	r2 = r3 * r2
	Mem0[r29 + 84<i32>:word32] = r2
	r4 = r3 * r6
	Mem0[r29 + 40<i32>:word32] = r4
	// succ:  l0000EF90
l0000EF90:
	Mem0[r29 + 44<i32>:word32] = r20
	branch p0 l0000F0F8
	// succ:  l0000EF98 l0000F0F8
l0000EF98:
	p0 = r7 > 0<32>
	r4 = Mem0[r29 + 112<i32>:word64]
	r2 = Mem0[r29 + 40<i32>:word64]
	r6 = 0<32>
	Mem0[r29 + 68<i32>:word32] = r6
	r3 = Mem0[r29 + 36<i32>:word64]
	r2 = r4 + r2
	r3 = r4 + r3
	r2 = r2 * r7
	Mem0[r29 + 60<i32>:word32] = r2
	Mem0[r29 + 88<i32>:word32] = r3
	// succ:  l0000EFB4
l0000EFB4:
	p0 = r26 > 0<32>
	branch p0 l0000F0E8
	// succ:  l0000EFBC l0000F0E8
l0000EFBC:
	r2 = Mem0[r29 + 60<i32>:word64]
	r4 = Mem0[r29 + 68<i32>:word64]
	r5 = Mem0[r29 + 52<i32>:word64]
	r3 = Mem0[r29 + 48<i32>:word64]
	r2 = r4 + r2
	r3 = Mem0[r29 + 56<i32>:word64]
	r4 = 0<32>
	r20 = r4 + r3
	r2 = r2 * r26
	r2 = r3 + (r2 << 2<32>)
	// succ:  l0000EFD8
l0000EFD8:
	Mem0[r29 + 72<i32>:word32] = r2
	r2 = Mem0[r29 + 116<i32>:word64]
	r24 = 0<32>
	r17 = r5
	r21 = 0<32>
	p0 = r2 > 0<32>
	Mem0[r29 + 80<i32>:word32] = r5
	Mem0[r29 + 76<i32>:word32] = r4
	branch p0 l0000F0CC
	// succ:  l0000EFF4 l0000F0CC
l0000EFF4:
	r2 = Mem0[r29 + 112<i32>:word64]
	r1 = r19
	r0 = r2 - r21
	call fn00009770 (retsize: 0;)
	branch p0 l0000F0B8
	// succ:  l0000F004 l0000F0B8
l0000F004:
	p0 = r0 == 0<32>
	r2 = Mem0[r29 + 88<i32>:word64]
	r1 = r19
	r0 = r2 - r21
	call fn00009750 (retsize: 0;)
	branch r2 > r0 l0000F0B8
	// succ:  l0000F01C l0000F0B8
l0000F01C:
	r2 = Mem0[r29 + 92<i32>:word32]
	r25 = 0<32>
	p0 = r27 > 0<32>
	branch p0 l0000F0B8
	// succ:  l0000F028 l0000F0B8
l0000F028:
	r3 = Mem0[r29 + 120<i32>:word64]
	r2 = Mem0[r29 + 84<i32>:word64]
	r19 = r17
	r2 = r0 + r2
	Mem0[r29 + 25<i32>:byte] = r2
	r2 = r2 * r3
	// succ:  l0000F03C
l0000F03C:
	r1_r0 = r18_r22
	call fn00009770 (retsize: 0;)
	r1_r0 = r18_r22
	branch p0 l0000F0AC
	// succ:  l0000F050 l0000F0AC
l0000F050:
	p0 = r0 == 0<32>
	call fn00009750 (retsize: 0;)
	branch r2 > r0 l0000F0AC
	// succ:  l0000F060 l0000F0AC
l0000F060:
	r2 = Mem0[r29 + 120<i32>:word32]
	branch p0 l0000F0AC
	// succ:  l0000F068 l0000F0AC
l0000F068:
	p0 = r8 > 0<32>
	r4 = r19 + (r26 << 2<32>)
	r3 = Mem0[r29 + 96<i32>:word64]
	r2 = Mem0[r29 + 100<i32>:word64]
	p0 = r16 >u 1<32>
	r6 = r16 + 0xFFFFFFFF<32>
	r2 = r0 + r2
	__loop(0<i32>, 0x0000F094<p32>, r6)
	r2 = r2 * r16
	r3 = Mem0[r19:word32]
	r2 = r3 + (r2 << 2<32>)
	r2 = Mem0[r2:word32]
	r5 = r2 + 4<32>
	branch p0 l0000F0A8
	// succ:  l0000F094 l0000F0A8
l0000F094:
	r3 = Mem0[r4:word32]
	r2 = Mem0[r5:word32]
	r4 = r4 + (r26 << 2<32>)
	r24 = r24 + r2 * r3
	r5 = r5 + 4<32>
	// succ:  l0000F0A8
l0000F0A8:
	r24 = r24 + r2 * r3
	// succ:  l0000F0AC
l0000F0AC:
	branch r25 == r27 l0000F03C
	goto l0000F0BC
	// succ:  l0000F0BC l0000F03C
l0000F0B8:
	r7 = Mem0[r29 + 116<i32>:word64]
	r2 = Mem0[r29 + 104<i32>:word64]
	// succ:  l0000F0BC
l0000F0BC:
	r25 = r25 + 1<32>
	r19 = r19 + (r23 << 2<32>)
	r19 = Mem0[r29 + 108<i32>:word32]
	branch r21 == r7 l0000EFF4
	goto l0000F0D0
	// succ:  l0000F0D0 l0000EFF4
l0000F0CC:
	r4 = Mem0[r29 + 76<i32>:word64]
	r2 = Mem0[r29 + 72<i32>:word64]
	// succ:  l0000F0D0
l0000F0D0:
	r21 = r21 + 1<32>
	r17 = r17 + (r2 << 2<32>)
	r5 = Mem0[r29 + 80<i32>:word64]
	r4 = r4
	Mem0[r2:word32] = r24
	p0 = r4 == r26
	r2 = r2 + 4<32>
	r5 = r5 + 4<32>
	branch p0 l0000EFD8
	// succ:  l0000F0E8 l0000EFD8
l0000F0E8:
	r7 = Mem0[r29 + 64<i32>:word64]
	r2 = Mem0[r29 + 68<i32>:word64]
	r2 = r2 + 1<32>
	Mem0[r29 + 68<i32>:word32] = r2
	branch p0 l0000EFB4
	// succ:  l0000F0F8 l0000EFB4
l0000F0F8:
	p0 = r7 == r2
	r20 = Mem0[r29 + 44<i32>:word64]
	r3 = Mem0[r29 + 112<i32>:word64]
	r3 = r3 + 1<32>
	r2 = r3 + 2<32>
	Mem0[r29 + 112<i32>:word32] = r3
	branch p0 l0000EF90
	// succ:  l0000F10C l0000EF90
l0000F10C:
	p0 = r2 == r12
	r24 = Mem0[r29 + 20<i32>:word32]
	r2 = Mem0[r29 + 28<i32>:word32]
	r17 = Mem0[r29 + 24<i32>:word64]
	r2 = r2
	Mem0[r29 + 28<i32>:word32] = r2
	p0 = r2 == r24
	branch p0 l0000EF70
	// succ:  l0000F124 l0000EF70
l0000F124:
	Mem0[r29 + 12<i32>:word32] = r26
	r1 = 0xB3<32>
	r4 = 0x00025C40<p32>
	Mem0[r29:word32] = r24
	r2 = Mem0[r29 + 16<i32>:word32]
	Mem0[r29 + 4<i32>:word32] = r17
	Mem0[r29 + 8<i32>:word32] = r7
	call logmsg_function (retsize: 0;)
	r0 = 0<32>
	// succ:  l0000F148
l0000F148:
	r19_r18 = Mem0[r29 + 160<i32>:word64]
	r17_r16 = Mem0[r29 + 168<i32>:word64]
	r23_r22 = Mem0[r29 + 144<i32>:word64]
	r21_r20 = Mem0[r29 + 152<i32>:word64]
	r27_r26 = Mem0[r29 + 128<i32>:word64]
	r25_r24 = Mem0[r29 + 136<i32>:word64]
	v38 = r30
	r31 = Mem0[v38 + 4<i32>:word32]
	r30 = Mem0[v38:word32]
	r29 = v38 + 8<i32>
	return
	// succ:  deconv_f_execute_ref_exit
deconv_f_execute_ref_exit:


// deconv_check_ref
// Return size: 0
define deconv_check_ref
deconv_check_ref_entry:
	r29 = fp
	// succ:  l0000F160
l0000F160:
	v4 = r29 - 8<i32>
	Mem0[v4:word32] = r30
	Mem0[v4 + 4<i32>:word32] = r31
	r30 = v4
	r29 = v4 - 16<i32>
	Mem0[r29 - 16<i32>:word64] = r17_r16
	r4 = 0x00025AF8<p32>
	r17 = r0
	r16 = r1
	r1 = 0xBA<32>
	Mem0[r29:word32] = r17
	r2 = r16
	call logmsg_function (retsize: 0;)
	branch r2 == 3<32> l0000F19C
	// succ:  l0000F188 l0000F19C
l0000F188:
	r2 = Mem0[r17 + 16<i32>:word32]
	r2 = Mem0[r17 + 28<i32>:word32]
	r1 = 0xBB<32>
	r3 = 0x0000F194<p32>
	Mem0[r29:word32] = r2
	goto l0000F1B0
	// succ:  l0000F1B0
l0000F19C:
	branch r2 == 1<32> l0000F1C0
	// succ:  l0000F1AC l0000F1C0
l0000F1AC:
	r2 = Mem0[r17 + 20<i32>:word32]
	r1 = 0xBC<32>
	r3 = 0x0000F1B0<p32>
	// succ:  l0000F1B0
l0000F1B0:
	r2 = r16
	call errlog_function (retsize: 0;)
	v16 = r30
	r31 = Mem0[v16 + 4<i32>:word32]
	r30 = Mem0[v16:word32]
	r29 = v16 + 8<i32>
	return
	// succ:  deconv_check_ref_exit
l0000F1C0:
	r2 = r16
	r1 = 0xBD<32>
	r4 = 0x00025B43<p32>
	Mem0[r29:word32] = r17
	call logmsg_function (retsize: 0;)
	r0 = 0<32>
	v17 = r30
	r31 = Mem0[v17 + 4<i32>:word32]
	r30 = Mem0[v17:word32]
	r29 = v17 + 8<i32>
	return
	// succ:  deconv_check_ref_exit
deconv_check_ref_exit:


// logmsg_function
// Return size: 0
define logmsg_function
logmsg_function_entry:
	r29 = fp
	// succ:  l0000F1E0
l0000F1E0:
	v4 = r29 - 8<i32>
	Mem0[v4:word32] = r30
	Mem0[v4 + 4<i32>:word32] = r31
	r30 = v4
	r29 = v4 - 8<i32>
	r3 = 2<32>
	branch r3 >u r5 l0000F204
	// succ:  l0000F1F0 l0000F204
l0000F1F0:
	r5 = Mem0[r2 + 16<i32>:word32]
	r5 = r29 + 0x10<32>
	r3 = 2<32>
	r0 = 0x0000F21E<p32>
	Mem0[r29 + 1<i32>:byte] = r6
	r6 = r29 + 0x10<32>
	call logv (retsize: 0;)
	// succ:  l0000F1F8_thunk_errlog_function
l0000F1F8_thunk_errlog_function:
	call errlog_function (retsize: 0;)
	return
	// succ:  logmsg_function_exit
l0000F204:
	v13 = r30
	r31 = Mem0[v13 + 4<i32>:word32]
	r30 = Mem0[v13:word32]
	r29 = v13 + 8<i32>
	return
	// succ:  logmsg_function_exit
logmsg_function_exit:


// errlog_function
// Return size: 0
define errlog_function
errlog_function_entry:
	r29 = fp
	// succ:  l0000F208
l0000F208:
	v4 = r29 - 8<i32>
	Mem0[v4:word32] = r30
	Mem0[v4 + 4<i32>:word32] = r31
	r30 = v4
	r29 = v4 - 8<i32>
	r4 = r3
	r0 = 0x00025ADA<p32>
	Mem0[r29 + 1<i32>:byte] = r6
	r6 = r29 + 0x10<32>
	r5 = r29 + 0x10<32>
	r3 = 0<32>
	v13 = r30
	r31 = Mem0[v13 + 4<i32>:word32]
	r30 = Mem0[v13:word32]
	r29 = v13 + 8<i32>
	return
	// succ:  errlog_function_exit
errlog_function_exit:


// logsoftmax_execute
// Return size: 0
define logsoftmax_execute
logsoftmax_execute_entry:
	r29 = fp
	// succ:  l0000F230
l0000F230:
	v4 = r29 - 8<i32>
	Mem0[v4:word32] = r30
	Mem0[v4 + 4<i32>:word32] = r31
	r30 = v4
	r29 = v4 - 72<i32>
	r3 = Mem0[r0 + 4<i32>:word32]
	r2 = Mem0[r0 + 8<i32>:word32]
	Mem0[r29 + 64<i32>:word64] = r17_r16
	Mem0[r29 + 56<i32>:word64] = r19_r18
	r19 = Mem0[r3:word32]
	r5 = Mem0[r2:word32]
	r2 = r1
	Mem0[r29 + 40<i32>:word64] = r23_r22
	Mem0[r29 + 48<i32>:word64] = r21_r20
	r4 = Mem0[r19 + 24<i32>:word32]
	r7 = Mem0[r5 + 20<i32>:word32]
	Mem0[r29 + 24<i32>:word64] = r27_r26
	Mem0[r29 + 32<i32>:word64] = r25_r24
	r26 = 0<32>
	p0 = r4 >u r7
	r1 = 0x39<32>
	branch p0 l0000F3AC
	// succ:  l0000F264 l0000F3AC
l0000F264:
	r2 = Mem0[r19 + 4<i32>:word32]
	r4 = Mem0[r19:word32]
	Mem0[r29 + 8<i32>:word32] = r2
	r3 = Mem0[r19 + 8<i32>:word32]
	r2 = r2 * r4
	r22 = Mem0[r19 + 12<i32>:word32]
	Mem0[r29:word32] = r4
	Mem0[r29 + 12<i32>:word32] = r5
	Mem0[r29 + 4<i32>:word32] = r3
	branch r24 > 0<32> l0000F37C
	// succ:  l0000F28C l0000F37C
l0000F28C:
	r25 = Mem0[r19 + 16<i32>:word32]
	r24 = r2 * r3
	r2 = Mem0[r29 + 12<i32>:word64]
	r16 = 0<32>
	r27 = Mem0[r2 + 16<i32>:word32]
	// succ:  l0000F294
l0000F294:
	r2 = Mem0[r25:word32]
	p0 = r22 > 0<32>
	Mem0[r29 + 4<i32>:byte] = r0
	branch p0 l0000F2FC
	// succ:  l0000F2AC l0000F2FC
l0000F2AC:
	r0 = p0
	r21 = r2
	r4 = r2
	r3 = r20
	r5 = r3 + 4<32>
	r21 = fmaxf(r4, r21)
	// succ:  l0000F2C8
l0000F2C8:
	r0 = Mem0[r29 + 16<i32>:word64]
	r18 = r20
	r17 = r16
	r23 = r22
	branch p0 l0000F2FC
	// succ:  l0000F2DC l0000F2FC
l0000F2DC:
	p0 = r0
	call fn00009780 (retsize: 0;)
	r0 = r2 - r21
	branch r23 == 0<32> l0000F308
	// succ:  l0000F2F8 l0000F308
l0000F2F8:
	r23 = r23 + 0xFFFFFFFF<32>
	r3 = r18 + 4<32>
	r17 = r17 + r0
	goto l0000F2DC
	// succ:  l0000F2DC
l0000F2FC:
	r0 = r16
	call fn00009790 (retsize: 0;)
	goto l0000F368
	// succ:  l0000F368
l0000F308:
	r0 = r17
	call fn00009790 (retsize: 0;)
	r2 = Mem0[r29 + 16<i32>:word32]
	branch p0 l0000F368
	// succ:  l0000F31C l0000F368
l0000F31C:
	p0 = r2
	r5 = r22
	r3 = 0<32>
	p0 = r22 >u 1<32>
	r3 = r27 + r3
	r2 = r3 + 4<32>
	r4 = r25 + r3
	__loop(0<i32>, 0x0000F340<p32>, r5)
	r4 = Mem0[r4:word32]
	branch p0 l0000F360
	// succ:  l0000F340 l0000F360
l0000F340:
	r4 = r4 - r21
	Mem0[r3:byte] = r4
	r6 = r2 + 4<32>
	r5 = r25 + r2
	r4 = r4 - r0
	r7 = Mem0[r5:word32]
	r2 = r6
	r4 = r7 - r21
	// succ:  l0000F360
l0000F360:
	Mem0[r3:byte] = r2
	r2 = r4 - r0
	goto l0000F36C
	// succ:  l0000F36C
l0000F368:
	r20 = r20 + (r22 << 2<32>)
	r27 = r27 + (r22 << 2<32>)
	// succ:  l0000F36C
l0000F36C:
	branch r26 == r24 l0000F294
	goto l0000F380
	// succ:  l0000F380 l0000F294
l0000F37C:
	r2 = Mem0[r29:word64]
	r3 = Mem0[r29 + 12<i32>:word64]
	r0 = 0<32>
	goto l0000F384
	// succ:  l0000F384
l0000F380:
	r26 = r26 + 1<32>
	r25 = r25 + (r22 << 2<32>)
	r2 = Mem0[r29:word64]
	r3 = Mem0[r29 + 12<i32>:word64]
	// succ:  l0000F384
l0000F384:
	r6 = Mem0[r29 + 8<i32>:word64]
	r7 = Mem0[r29 + 4<i32>:word64]
	Mem0[r3:word32] = r2
	Mem0[r3 + 8<i32>:word32] = r7
	Mem0[r3 + 4<i32>:word32] = r6
	Mem0[r3 + 12<i32>:word32] = r22
	r2 = Mem0[r19 + 24<i32>:word32]
	Mem0[r3 + 24<i32>:word32] = r2
	// succ:  l0000F398
l0000F398:
	r19_r18 = Mem0[r29 + 56<i32>:word64]
	r17_r16 = Mem0[r29 + 64<i32>:word64]
	r23_r22 = Mem0[r29 + 40<i32>:word64]
	r21_r20 = Mem0[r29 + 48<i32>:word64]
	r27_r26 = Mem0[r29 + 24<i32>:word64]
	r25_r24 = Mem0[r29 + 32<i32>:word64]
	v35 = r30
	r31 = Mem0[v35 + 4<i32>:word32]
	r30 = Mem0[v35:word32]
	r29 = v35 + 8<i32>
	return
	// succ:  logsoftmax_execute_exit
l0000F3AC:
	call errlog_function (retsize: 0;)
	r3 = 0x00025CD0<p32>
	r0 = 0xFFFFFFFF<32>
	goto l0000F398
	// succ:  l0000F398
logsoftmax_execute_exit:


// logsoftmax_check
// Return size: 0
define logsoftmax_check
logsoftmax_check_entry:
	r29 = fp
	// succ:  l0000F3C0
l0000F3C0:
	v4 = r29 - 8<i32>
	Mem0[v4:word32] = r30
	Mem0[v4 + 4<i32>:word32] = r31
	r30 = v4
	r29 = v4 - 16<i32>
	Mem0[r29 - 16<i32>:word64] = r17_r16
	r4 = 0x00025C89<p32>
	r17 = r0
	r16 = r1
	r1 = 0x53<32>
	Mem0[r29:word32] = r17
	r2 = r16
	call logmsg_function (retsize: 0;)
	branch r2 == 1<32> l0000F400
	// succ:  l0000F3EC l0000F400
l0000F3EC:
	r2 = Mem0[r17 + 16<i32>:word32]
	r1 = 0x54<32>
	r3 = 0x0000F429<p32>
	r2 = r16
	call errlog_function (retsize: 0;)
	// succ:  l0000F3F4
l0000F3F4:
	v16 = r30
	r31 = Mem0[v16 + 4<i32>:word32]
	r30 = Mem0[v16:word32]
	r29 = v16 + 8<i32>
	return
	// succ:  logsoftmax_check_exit
l0000F400:
	branch r2 == 1<32> l0000F418
	// succ:  l0000F410 l0000F418
l0000F410:
	r2 = Mem0[r17 + 20<i32>:word32]
	r1 = 0x55<32>
	goto l0000F3F4
	// succ:  l0000F3F4
l0000F418:
	r2 = r16
	r1 = 0x56<32>
	r4 = 0x00025CB4<p32>
	Mem0[r29:word32] = r17
	call logmsg_function (retsize: 0;)
	r0 = 0<32>
	v17 = r30
	r31 = Mem0[v17 + 4<i32>:word32]
	r30 = Mem0[v17:word32]
	r29 = v17 + 8<i32>
	return
	// succ:  logsoftmax_check_exit
logsoftmax_check_exit:


// logmsg_function
// Return size: 0
define logmsg_function
logmsg_function_entry:
	r29 = fp
	// succ:  l0000F438
l0000F438:
	v4 = r29 - 8<i32>
	Mem0[v4:word32] = r30
	Mem0[v4 + 4<i32>:word32] = r31
	r30 = v4
	r29 = v4 - 8<i32>
	r3 = 2<32>
	branch r3 >u r5 l0000F45C
	// succ:  l0000F448 l0000F45C
l0000F448:
	r5 = Mem0[r2 + 16<i32>:word32]
	r5 = r29 + 0x10<32>
	r3 = 2<32>
	r0 = 0x0000F46D<p32>
	Mem0[r29 + 1<i32>:byte] = r6
	r6 = r29 + 0x10<32>
	call logv (retsize: 0;)
	// succ:  l0000F450_thunk_errlog_function
l0000F450_thunk_errlog_function:
	call errlog_function (retsize: 0;)
	return
	// succ:  logmsg_function_exit
l0000F45C:
	v13 = r30
	r31 = Mem0[v13 + 4<i32>:word32]
	r30 = Mem0[v13:word32]
	r29 = v13 + 8<i32>
	return
	// succ:  logmsg_function_exit
logmsg_function_exit:


// errlog_function
// Return size: 0
define errlog_function
errlog_function_entry:
	r29 = fp
	// succ:  l0000F460
l0000F460:
	v4 = r29 - 8<i32>
	Mem0[v4:word32] = r30
	Mem0[v4 + 4<i32>:word32] = r31
	r30 = v4
	r29 = v4 - 8<i32>
	r4 = r3
	r0 = 0x00025C69<p32>
	Mem0[r29 + 1<i32>:byte] = r6
	r6 = r29 + 0x10<32>
	r5 = r29 + 0x10<32>
	r3 = 0<32>
	v13 = r30
	r31 = Mem0[v13 + 4<i32>:word32]
	r30 = Mem0[v13:word32]
	r29 = v13 + 8<i32>
	return
	// succ:  errlog_function_exit
errlog_function_exit:


// expanddims_execute
// Return size: 0
define expanddims_execute
expanddims_execute_entry:
	r29 = fp
	// succ:  l0000F490
l0000F490:
	v4 = r29 - 8<i32>
	Mem0[v4:word32] = r30
	Mem0[v4 + 4<i32>:word32] = r31
	r30 = v4
	r29 = v4 - 0<i32>
	r2 = Mem0[r0 + 4<i32>:word32]
	r4 = Mem0[r0 + 8<i32>:word32]
	r4 = Mem0[r4:word32]
	r3 = Mem0[r2:word32]
	r5 = Mem0[r3 + 4<i32>:word32]
	r7 = Mem0[r3:word32]
	Mem0[r4:word32] = r7
	Mem0[r4 + 4<i32>:word32] = r5
	r0 = Mem0[r3 + 12<i32>:word32]
	r2 = Mem0[r3 + 8<i32>:word32]
	Mem0[r4 + 12<i32>:word32] = r0
	Mem0[r4 + 8<i32>:word32] = r2
	r2 = r1
	r5 = Mem0[r3 + 24<i32>:word32]
	branch r5 >u r6 l0000F4CC
	// succ:  l0000F4C0 l0000F4CC
l0000F4C0:
	r6 = Mem0[r4 + 20<i32>:word32]
	r1 = Mem0[r3 + 16<i32>:word32]
	r2 = Mem0[r3 + 24<i32>:word32]
	call fn00009560 (retsize: 0;)
	v15 = r30
	r31 = Mem0[v15 + 4<i32>:word32]
	r30 = Mem0[v15:word32]
	r29 = v15 + 8<i32>
	return
	// succ:  expanddims_execute_exit
l0000F4CC:
	r1 = 0x30<32>
	call errlog_function (retsize: 0;)
	r3 = 0x00025D57<p32>
	v17 = r30
	r31 = Mem0[v17 + 4<i32>:word32]
	r30 = Mem0[v17:word32]
	r29 = v17 + 8<i32>
	return
	// succ:  expanddims_execute_exit
expanddims_execute_exit:


// expanddims_check
// Return size: 0
define expanddims_check
expanddims_check_entry:
	r29 = fp
	// succ:  l0000F4E0
l0000F4E0:
	v4 = r29 - 8<i32>
	Mem0[v4:word32] = r30
	Mem0[v4 + 4<i32>:word32] = r31
	r30 = v4
	r29 = v4 - 16<i32>
	Mem0[r29 - 16<i32>:word64] = r17_r16
	r4 = 0x00025CFE<p32>
	r17 = r0
	r16 = r1
	r1 = 0x37<32>
	Mem0[r29:word32] = r17
	r2 = r16
	call logmsg_function (retsize: 0;)
	r2 = Mem0[r17 + 16<i32>:word32]
	branch r3 >u r2 l0000F524
	// succ:  l0000F50C l0000F524
l0000F50C:
	r3 = 4<32>
	r1 = 0x38<32>
	r3 = 0x0000F51F<p32>
	r2 = r16
	call errlog_function (retsize: 0;)
	// succ:  l0000F518
l0000F518:
	v16 = r30
	r31 = Mem0[v16 + 4<i32>:word32]
	r30 = Mem0[v16:word32]
	r29 = v16 + 8<i32>
	return
	// succ:  expanddims_check_exit
l0000F524:
	branch r2 == 1<32> l0000F53C
	// succ:  l0000F534 l0000F53C
l0000F534:
	r2 = Mem0[r17 + 20<i32>:word32]
	r1 = 0x39<32>
	goto l0000F518
	// succ:  l0000F518
l0000F53C:
	r2 = r16
	r1 = 0x3A<32>
	r4 = 0x00025D3A<p32>
	Mem0[r29:word32] = r17
	call logmsg_function (retsize: 0;)
	r0 = 0<32>
	v17 = r30
	r31 = Mem0[v17 + 4<i32>:word32]
	r30 = Mem0[v17:word32]
	r29 = v17 + 8<i32>
	return
	// succ:  expanddims_check_exit
expanddims_check_exit:


// logmsg_function
// Return size: 0
define logmsg_function
logmsg_function_entry:
	r29 = fp
	// succ:  l0000F558
l0000F558:
	v4 = r29 - 8<i32>
	Mem0[v4:word32] = r30
	Mem0[v4 + 4<i32>:word32] = r31
	r30 = v4
	r29 = v4 - 8<i32>
	r3 = 2<32>
	branch r3 >u r5 l0000F57C
	// succ:  l0000F568 l0000F57C
l0000F568:
	r5 = Mem0[r2 + 16<i32>:word32]
	r5 = r29 + 0x10<32>
	r3 = 2<32>
	r0 = 0x0000F5A2<p32>
	Mem0[r29 + 1<i32>:byte] = r6
	r6 = r29 + 0x10<32>
	call logv (retsize: 0;)
	// succ:  l0000F570_thunk_errlog_function
l0000F570_thunk_errlog_function:
	call errlog_function (retsize: 0;)
	return
	// succ:  logmsg_function_exit
l0000F57C:
	v13 = r30
	r31 = Mem0[v13 + 4<i32>:word32]
	r30 = Mem0[v13:word32]
	r29 = v13 + 8<i32>
	return
	// succ:  logmsg_function_exit
logmsg_function_exit:


// errlog_function
// Return size: 0
define errlog_function
errlog_function_entry:
	r29 = fp
	// succ:  l0000F580
l0000F580:
	v4 = r29 - 8<i32>
	Mem0[v4:word32] = r30
	Mem0[v4 + 4<i32>:word32] = r31
	r30 = v4
	r29 = v4 - 8<i32>
	r4 = r3
	r0 = 0x00025CDE<p32>
	Mem0[r29 + 1<i32>:byte] = r6
	r6 = r29 + 0x10<32>
	r5 = r29 + 0x10<32>
	r3 = 0<32>
	v13 = r30
	r31 = Mem0[v13 + 4<i32>:word32]
	r30 = Mem0[v13:word32]
	r29 = v13 + 8<i32>
	return
	// succ:  errlog_function_exit
errlog_function_exit:


// sslice_execute_4b
// Return size: 0
define sslice_execute_4b
sslice_execute_4b_entry:
	r29 = fp
	// succ:  l0000F5B0
l0000F5B0:
	// succ:  l0000F5B0_thunk_strided_slice_impl
l0000F5B0_thunk_strided_slice_impl:
	call strided_slice_impl (retsize: 0;)
	return
	// succ:  sslice_execute_4b_exit
sslice_execute_4b_exit:


// sslice_check
// Return size: 0
define sslice_check
sslice_check_entry:
	r29 = fp
	// succ:  l0000F5B4
l0000F5B4:
	v4 = r29 - 8<i32>
	Mem0[v4:word32] = r30
	Mem0[v4 + 4<i32>:word32] = r31
	r30 = v4
	r29 = v4 - 16<i32>
	Mem0[r29 - 16<i32>:word64] = r17_r16
	r4 = 0x00025D87<p32>
	r17 = r0
	r16 = r1
	r1 = 0x70<32>
	Mem0[r29:word32] = r17
	r2 = r16
	call logmsg_function (retsize: 0;)
	branch r2 == 4<32> l0000F5E8
	// succ:  l0000F5E0 l0000F5E8
l0000F5E0:
	r2 = Mem0[r17 + 16<i32>:word32]
	r1 = 0x71<32>
	goto l0000F604
	// succ:  l0000F604
l0000F5E8:
	branch r2 == 1<32> l0000F60C
	// succ:  l0000F5FC l0000F60C
l0000F5FC:
	r2 = Mem0[r17 + 20<i32>:word32]
	r0 = 0<32>
	r1 = 0x72<32>
	r3 = 0x0000F62D<p32>
	r2 = r16
	call errlog_function (retsize: 0;)
	goto l0000F608
	// succ:  l0000F608
l0000F604:
	r2 = r16
	// succ:  l0000F608
l0000F608:
	r0 = 0xFFFFFFFF<32>
	// succ:  l0000F60C
l0000F60C:
	v16 = r30
	r31 = Mem0[v16 + 4<i32>:word32]
	r30 = Mem0[v16:word32]
	r29 = v16 + 8<i32>
	return
	// succ:  sslice_check_exit
sslice_check_exit:


// sslice_execute_1b
// Return size: 0
define sslice_execute_1b
sslice_execute_1b_entry:
	r29 = fp
	// succ:  l0000F610
l0000F610:
	// succ:  l0000F610_thunk_strided_slice_impl
l0000F610_thunk_strided_slice_impl:
	call strided_slice_impl (retsize: 0;)
	return
	// succ:  sslice_execute_1b_exit
sslice_execute_1b_exit:


// sslice_execute_q8
// Return size: 0
define sslice_execute_q8
sslice_execute_q8_entry:
	r29 = fp
	// succ:  l0000F614
l0000F614:
	v4 = r29 - 8<i32>
	Mem0[v4:word32] = r30
	Mem0[v4 + 4<i32>:word32] = r31
	r30 = v4
	r29 = v4 - 8<i32>
	Mem0[r29 - 16<i32>:word64] = r17_r16
	r17_r16 = r1_r0
	r4 = Mem0[r16 + 8<i32>:word32]
	r2 = Mem0[r16 + 4<i32>:word32]
	r2 = Mem0[r4 + 4<i32>:word32]
	r3 = Mem0[r2 + 16<i32>:word32]
	r5 = Mem0[r3 + 4<i32>:word32]
	r7 = Mem0[r3:word32]
	Mem0[r2:word32] = r7
	Mem0[r2 + 4<i32>:word32] = r5
	r0 = Mem0[r3 + 12<i32>:word32]
	r4 = Mem0[r3 + 8<i32>:word32]
	Mem0[r2 + 8<i32>:word32] = r4
	Mem0[r2 + 12<i32>:word32] = r0
	r4 = Mem0[r3 + 24<i32>:word32]
	branch r4 >u r6 l0000F64C
	// succ:  l0000F644 l0000F64C
l0000F644:
	r6 = Mem0[r2 + 20<i32>:word32]
	r1 = Mem0[r3 + 16<i32>:word32]
	r2 = Mem0[r3 + 24<i32>:word32]
	call fn00009560 (retsize: 0;)
	// succ:  l0000F64C
l0000F64C:
	r3 = Mem0[r16 + 4<i32>:word32]
	r2 = Mem0[r16 + 8<i32>:word32]
	r2 = Mem0[r2 + 8<i32>:word32]
	r3 = Mem0[r3 + 20<i32>:word32]
	r5 = Mem0[r3 + 4<i32>:word32]
	r4 = Mem0[r3:word32]
	Mem0[r2:word32] = r4
	Mem0[r2 + 4<i32>:word32] = r5
	r1 = Mem0[r3 + 12<i32>:word32]
	r7 = Mem0[r3 + 8<i32>:word32]
	Mem0[r2 + 12<i32>:word32] = r1
	Mem0[r2 + 8<i32>:word32] = r7
	r4 = Mem0[r3 + 24<i32>:word32]
	branch r4 >u r6 l0000F67C
	// succ:  l0000F674 l0000F67C
l0000F674:
	r6 = Mem0[r2 + 20<i32>:word32]
	r1 = Mem0[r3 + 16<i32>:word32]
	r2 = Mem0[r3 + 24<i32>:word32]
	call fn00009560 (retsize: 0;)
	// succ:  l0000F67C
l0000F67C:
	v18 = r30
	r31 = Mem0[v18 + 4<i32>:word32]
	r30 = Mem0[v18:word32]
	r29 = v18 + 8<i32>
	r17_r16 = Mem0[r29:word64]
	r2 = 1<32>
	r1_r0 = r17_r16
	// succ:  l0000F688_thunk_strided_slice_impl
l0000F688_thunk_strided_slice_impl:
	call strided_slice_impl (retsize: 0;)
	return
	// succ:  sslice_execute_q8_exit
sslice_execute_q8_exit:


// sslice_check_q8
// Return size: 0
define sslice_check_q8
sslice_check_q8_entry:
	r29 = fp
	// succ:  l0000F690
l0000F690:
	v4 = r29 - 8<i32>
	Mem0[v4:word32] = r30
	Mem0[v4 + 4<i32>:word32] = r31
	r30 = v4
	r29 = v4 - 16<i32>
	Mem0[r29 - 16<i32>:word64] = r17_r16
	r4 = 0x00025D87<p32>
	r17 = r0
	r16 = r1
	r1 = 0x78<32>
	Mem0[r29:word32] = r17
	r2 = r16
	call logmsg_function (retsize: 0;)
	branch r2 == 6<32> l0000F6C4
	// succ:  l0000F6BC l0000F6C4
l0000F6BC:
	r2 = Mem0[r17 + 16<i32>:word32]
	r1 = 0x79<32>
	goto l0000F6E0
	// succ:  l0000F6E0
l0000F6C4:
	branch r2 == 3<32> l0000F6E8
	// succ:  l0000F6D8 l0000F6E8
l0000F6D8:
	r2 = Mem0[r17 + 20<i32>:word32]
	r0 = 0<32>
	r1 = 0x7A<32>
	r3 = 0x0000F6ED<p32>
	r2 = r16
	call errlog_function (retsize: 0;)
	goto l0000F6E4
	// succ:  l0000F6E4
l0000F6E0:
	r2 = r16
	// succ:  l0000F6E4
l0000F6E4:
	r0 = 0xFFFFFFFF<32>
	// succ:  l0000F6E8
l0000F6E8:
	v16 = r30
	r31 = Mem0[v16 + 4<i32>:word32]
	r30 = Mem0[v16:word32]
	r29 = v16 + 8<i32>
	return
	// succ:  sslice_check_q8_exit
sslice_check_q8_exit:


// logmsg_function
// Return size: 0
define logmsg_function
logmsg_function_entry:
	r29 = fp
	// succ:  l0000F6EC
l0000F6EC:
	v4 = r29 - 8<i32>
	Mem0[v4:word32] = r30
	Mem0[v4 + 4<i32>:word32] = r31
	r30 = v4
	r29 = v4 - 8<i32>
	r3 = 2<32>
	branch r3 >u r5 l0000F710
	// succ:  l0000F6FC l0000F710
l0000F6FC:
	r5 = Mem0[r2 + 16<i32>:word32]
	r5 = r29 + 0x10<32>
	r3 = 2<32>
	r0 = 0x0000F729<p32>
	Mem0[r29 + 1<i32>:byte] = r6
	r6 = r29 + 0x10<32>
	call logv (retsize: 0;)
	// succ:  l0000F704_thunk_errlog_function
l0000F704_thunk_errlog_function:
	call errlog_function (retsize: 0;)
	return
	// succ:  logmsg_function_exit
l0000F710:
	v13 = r30
	r31 = Mem0[v13 + 4<i32>:word32]
	r30 = Mem0[v13:word32]
	r29 = v13 + 8<i32>
	return
	// succ:  logmsg_function_exit
logmsg_function_exit:


// errlog_function
// Return size: 0
define errlog_function
errlog_function_entry:
	r29 = fp
	// succ:  l0000F714
l0000F714:
	v4 = r29 - 8<i32>
	Mem0[v4:word32] = r30
	Mem0[v4 + 4<i32>:word32] = r31
	r30 = v4
	r29 = v4 - 8<i32>
	r4 = r3
	r0 = 0x00025D65<p32>
	Mem0[r29 + 1<i32>:byte] = r6
	r6 = r29 + 0x10<32>
	r5 = r29 + 0x10<32>
	r3 = 0<32>
	v13 = r30
	r31 = Mem0[v13 + 4<i32>:word32]
	r30 = Mem0[v13:word32]
	r29 = v13 + 8<i32>
	return
	// succ:  errlog_function_exit
errlog_function_exit:


// strided_slice_impl
// Return size: 0
define strided_slice_impl
strided_slice_impl_entry:
	r29 = fp
	// succ:  l0000F738
l0000F738:
	v4 = r29 - 8<i32>
	Mem0[v4:word32] = r30
	Mem0[v4 + 4<i32>:word32] = r31
	r30 = v4
	r29 = v4 - 72<i32>
	Mem0[r29 - 24<i32>:word64] = r19_r18
	r19 = r0
	Mem0[r29 + 64<i32>:word64] = r17_r16
	r3 = Mem0[r19 + 4<i32>:word32]
	r17 = r2
	Mem0[r29 + 48<i32>:word64] = r21_r20
	r21 = r1
	Mem0[r29 + 32<i32>:word64] = r25_r24
	Mem0[r29 + 40<i32>:word64] = r23_r22
	r5 = Mem0[r3 + 8<i32>:word32]
	r7 = Mem0[r3 + 12<i32>:word32]
	r6 = Mem0[r3 + 4<i32>:word32]
	r0 = Mem0[r5 + 16<i32>:word32]
	r22 = Mem0[r3:word32]
	r6 = Mem0[r7 + 16<i32>:word32]
	r5 = Mem0[r6 + 16<i32>:word32]
	r4 = Mem0[r19 + 8<i32>:word32]
	r24 = Mem0[r0:word32]
	r16 = Mem0[r5:word32]
	Mem0[r29 + 24<i32>:word64] = r27_r26
	r20 = Mem0[r6:word32]
	r2 = 0xFFFFFFFF<32> - r16
	r23 = Mem0[r4:word32]
	r3 = Mem0[r22 + 12<i32>:word32]
	r1_r0 = r20_r20
	r27 = Mem0[r22 + 8<i32>:word32]
	r26 = Mem0[r22 + 4<i32>:word32]
	r0 = r0 + (r24 + r2)
	Mem0[r29 + 20<i32>:word32] = r3
	call fn00009750 (retsize: 0;)
	r2 = Mem0[r23 + 20<i32>:word32]
	r18 = r0
	r3 = 0x00025DB5<p32>
	branch r25 >u r2 l0000F810
	// succ:  l0000F7B0 l0000F810
l0000F7B0:
	r1 = 0x47<32>
	r25 = r18 * r17
	r1 = 0x48<32>
	p0 = r26 > 1<32>
	r3 = 0x0000F7C7<p32>
	branch r2 > 1<32> l0000F810
	// succ:  l0000F7C8 l0000F810
l0000F7C8:
	r2 = Mem0[r22:word32]
	r1 = 0x49<32>
	r3 = 0x0000F807<p32>
	r1 = 0x4A<32>
	branch p0 l0000F810
	// succ:  l0000F7D8 l0000F810
l0000F7D8:
	r1 = 0x4B<32>
	p0 = r27 > 1<32>
	r3 = 0x00025DC3<p32>
	branch p0 l0000F810
	// succ:  l0000F7EC l0000F810
l0000F7EC:
	r3 = 0x00025DE3<p32>
	branch r2 > r16 l0000F810
	// succ:  l0000F800 l0000F810
l0000F800:
	r2 = Mem0[r29 + 20<i32>:word32]
	r1 = 0x4C<32>
	r3 = 0x0000F831<p32>
	branch r24 >u r2 l0000F81C
	goto l0000F814
	// succ:  l0000F814 l0000F81C
l0000F810:
	r19 = -1<i32>
	r2 = r21
	call errlog_function (retsize: 0;)
	goto l0000F818
	// succ:  l0000F818
l0000F814:
	r2 = Mem0[r29 + 20<i32>:word32]
	r19 = -1<i32>
	r2 = r21
	// succ:  l0000F818
l0000F818:
	goto l0000F884
	// succ:  l0000F884
l0000F81C:
	r22 = Mem0[r23 + 16<i32>:word32]
	r26 = Mem0[r22 + 16<i32>:word32]
	r4 = 0x00025DF6<p32>
	Mem0[r29 + 8<i32>:word32] = r24
	Mem0[r29 + 12<i32>:word32] = r20
	r2 = r21
	r1 = 0x4F<32>
	Mem0[r29 + 4<i32>:word32] = r16
	Mem0[r29:word32] = r19
	r19 = 0<32>
	call logmsg_function (retsize: 0;)
	Mem0[r23:word32] = 1<32>
	Mem0[r23 + 24<i32>:word32] = r25
	p0 = r18 > 0<32>
	Mem0[r23 + 4<i32>:word32] = 0xFFFFFF81<32>
	Mem0[r23 + 12<i32>:word32] = r18
	Mem0[r23 + 8<i32>:word32] = 1<32>
	branch p0 l0000F884
	// succ:  l0000F864 l0000F884
l0000F864:
	r20 = r20 * r17
	r16 = r26 + r16 * r17
	// succ:  l0000F86C
l0000F86C:
	r22 = r22 + r17
	r2 = r17
	r1_r0 = r16_r22
	call fn00009560 (retsize: 0;)
	branch r18 == 0<32> l0000F86C
	goto l0000F888
	// succ:  l0000F888 l0000F86C
l0000F884:
	r19_r18 = Mem0[r29 + 56<i32>:word64]
	r17_r16 = Mem0[r29 + 64<i32>:word64]
	r0 = r19
	r23_r22 = Mem0[r29 + 40<i32>:word64]
	r21_r20 = Mem0[r29 + 48<i32>:word64]
	r27_r26 = Mem0[r29 + 24<i32>:word64]
	r25_r24 = Mem0[r29 + 32<i32>:word64]
	v37 = r30
	r31 = Mem0[v37 + 4<i32>:word32]
	r30 = Mem0[v37:word32]
	r29 = v37 + 8<i32>
	return
	// succ:  strided_slice_impl_exit
l0000F888:
	r18 = r18 + 0xFFFFFFFF<32>
	r16 = r16 + r20
	r19_r18 = Mem0[r29 + 56<i32>:word64]
	r17_r16 = Mem0[r29 + 64<i32>:word64]
	r23_r22 = Mem0[r29 + 40<i32>:word64]
	r21_r20 = Mem0[r29 + 48<i32>:word64]
	r27_r26 = Mem0[r29 + 24<i32>:word64]
	r25_r24 = Mem0[r29 + 32<i32>:word64]
	v39 = r30
	r31 = Mem0[v39 + 4<i32>:word32]
	r30 = Mem0[v39:word32]
	r29 = v39 + 8<i32>
	return
	// succ:  strided_slice_impl_exit
strided_slice_impl_exit:


// resizenear_f_execute
// Return size: 0
define resizenear_f_execute
resizenear_f_execute_entry:
	r29 = fp
	// succ:  l0000F8A0
l0000F8A0:
	v4 = r29 - 8<i32>
	Mem0[v4:word32] = r30
	Mem0[v4 + 4<i32>:word32] = r31
	r30 = v4
	r29 = v4 - 104<i32>
	r3 = Mem0[r0 + 8<i32>:word32]
	r7 = Mem0[r0 + 4<i32>:word32]
	Mem0[r29 + 64<i32>:word64] = r25_r24
	Mem0[r29 + 80<i32>:word64] = r21_r20
	r21 = Mem0[r7:word32]
	r4 = Mem0[r7 + 4<i32>:word32]
	Mem0[r29 + 88<i32>:word64] = r19_r18
	Mem0[r29 + 56<i32>:word64] = r27_r26
	r27 = r1
	r25 = Mem0[r21 + 8<i32>:word32]
	r2 = Mem0[r4 + 16<i32>:word32]
	Mem0[r29 + 96<i32>:word64] = r17_r16
	Mem0[r29 + 72<i32>:word64] = r23_r22
	r20 = Mem0[r3:word32]
	r24 = Mem0[r2 + 4<i32>:word32]
	r0 = CONVERT(r25, int32, real32)
	r26 = Mem0[r21 + 4<i32>:word32]
	r18 = Mem0[r21:word32]
	r19 = Mem0[r2:word32]
	r23 = Mem0[r21 + 12<i32>:word32]
	call fn00009610 (retsize: 0;)
	r1 = CONVERT(r24, int32, real32)
	r16 = r0
	r2 = CONVERT(r26, int32, real32)
	r0 = r2
	call fn00009610 (retsize: 0;)
	r1 = CONVERT(r19, int32, real32)
	r3 = Mem0[r20 + 20<i32>:word32]
	r1 = 0x44<32>
	r17 = r23 << 2<32>
	r2 = r24 * r19
	r2 = r2 * r18
	branch r22 >u r3 l0000F934
	// succ:  l0000F920 l0000F934
l0000F920:
	r22 = r2 * r17
	r2 = r27
	r3 = 0x0000F942<p32>
	call errlog_function (retsize: 0;)
	r0 = 0xFFFFFFFF<32>
	goto l0000FA44
	// succ:  l0000FA44
l0000F934:
	r21 = Mem0[r20 + 16<i32>:word32]
	r26 = Mem0[r21 + 16<i32>:word32]
	r2 = r27
	r3 = r26
	Mem0[r29 + 28<i32>:word32] = r23
	r1 = 0x45<32>
	r4 = 0x00025E8C<p32>
	Mem0[r29 + 24<i32>:word32] = r24
	Mem0[r29 + 48<i32>:word32] = r0
	Mem0[r29 + 20<i32>:word32] = r19
	Mem0[r29 + 36<i32>:word32] = r18
	Mem0[r29 + 16<i32>:word32] = r18
	Mem0[r29 + 32<i32>:word32] = r3
	Mem0[r29 + 4<i32>:word32] = r3
	Mem0[r29 + 12<i32>:word32] = r23
	Mem0[r29:word32] = r18
	Mem0[r29 + 8<i32>:word32] = r25
	call logmsg_function (retsize: 0;)
	Mem0[r20:word32] = r18
	Mem0[r20 + 24<i32>:word32] = r22
	r3 = r19
	r0 = 0<32>
	Mem0[r20 + 12<i32>:word32] = r23
	Mem0[r20 + 4<i32>:word32] = r19
	p0 = r18 > 0<32>
	Mem0[r20 + 8<i32>:word32] = r24
	branch p0 l0000FA44
	// succ:  l0000F990 l0000FA44
l0000F990:
	r4 = Mem0[r29 + 48<i32>:word64]
	r5 = 0<32>
	r2 = r24 * r23
	r2 = r2 << 2<32>
	Mem0[r29 + 44<i32>:word32] = r2
	// succ:  l0000F9A0
l0000F9A0:
	Mem0[r29 + 40<i32>:word32] = r5
	// succ:  l0000FA34
l0000FA34:
	r2 = Mem0[r29 + 36<i32>:word64]
	r5 = Mem0[r29 + 40<i32>:word64]
	branch r5 == r2 l0000F9A0
	// succ:  l0000FA44 l0000F9A0
l0000FA44:
	r19_r18 = Mem0[r29 + 88<i32>:word64]
	r17_r16 = Mem0[r29 + 96<i32>:word64]
	r23_r22 = Mem0[r29 + 72<i32>:word64]
	r21_r20 = Mem0[r29 + 80<i32>:word64]
	r27_r26 = Mem0[r29 + 56<i32>:word64]
	r25_r24 = Mem0[r29 + 64<i32>:word64]
	v34 = r30
	r31 = Mem0[v34 + 4<i32>:word32]
	r30 = Mem0[v34:word32]
	r29 = v34 + 8<i32>
	return
	// succ:  resizenear_f_execute_exit
resizenear_f_execute_exit:


// resizenear_f_check
// Return size: 0
define resizenear_f_check
resizenear_f_check_entry:
	r29 = fp
	// succ:  l0000FA60
l0000FA60:
	v4 = r29 - 8<i32>
	Mem0[v4:word32] = r30
	Mem0[v4 + 4<i32>:word32] = r31
	r30 = v4
	r29 = v4 - 16<i32>
	Mem0[r29 - 16<i32>:word64] = r17_r16
	r4 = 0x00025E35<p32>
	r17 = r0
	r16 = r1
	r1 = 0x5B<32>
	Mem0[r29:word32] = r17
	r2 = r16
	call logmsg_function (retsize: 0;)
	branch r2 == 2<32> l0000FAA0
	// succ:  l0000FA8C l0000FAA0
l0000FA8C:
	r2 = Mem0[r17 + 16<i32>:word32]
	r1 = 0x5C<32>
	r3 = 0x0000FA8C<p32>
	r2 = r16
	call errlog_function (retsize: 0;)
	// succ:  l0000FA94
l0000FA94:
	v16 = r30
	r31 = Mem0[v16 + 4<i32>:word32]
	r30 = Mem0[v16:word32]
	r29 = v16 + 8<i32>
	return
	// succ:  resizenear_f_check_exit
l0000FAA0:
	branch r2 == 1<32> l0000FAB8
	// succ:  l0000FAB0 l0000FAB8
l0000FAB0:
	r2 = Mem0[r17 + 20<i32>:word32]
	r1 = 0x5D<32>
	goto l0000FA94
	// succ:  l0000FA94
l0000FAB8:
	r2 = r16
	r1 = 0x5E<32>
	r4 = 0x00025E67<p32>
	Mem0[r29:word32] = r17
	call logmsg_function (retsize: 0;)
	r0 = 0<32>
	v17 = r30
	r31 = Mem0[v17 + 4<i32>:word32]
	r30 = Mem0[v17:word32]
	r29 = v17 + 8<i32>
	return
	// succ:  resizenear_f_check_exit
resizenear_f_check_exit:


// logmsg_function
// Return size: 0
define logmsg_function
logmsg_function_entry:
	r29 = fp
	// succ:  l0000FAD8
l0000FAD8:
	v4 = r29 - 8<i32>
	Mem0[v4:word32] = r30
	Mem0[v4 + 4<i32>:word32] = r31
	r30 = v4
	r29 = v4 - 8<i32>
	r3 = 2<32>
	branch r3 >u r5 l0000FAFC
	// succ:  l0000FAE8 l0000FAFC
l0000FAE8:
	r5 = Mem0[r2 + 16<i32>:word32]
	r5 = r29 + 0x10<32>
	r3 = 2<32>
	r0 = 0x0000FB19<p32>
	Mem0[r29 + 1<i32>:byte] = r6
	r6 = r29 + 0x10<32>
	call logv (retsize: 0;)
	// succ:  l0000FAF0_thunk_errlog_function
l0000FAF0_thunk_errlog_function:
	call errlog_function (retsize: 0;)
	return
	// succ:  logmsg_function_exit
l0000FAFC:
	v13 = r30
	r31 = Mem0[v13 + 4<i32>:word32]
	r30 = Mem0[v13:word32]
	r29 = v13 + 8<i32>
	return
	// succ:  logmsg_function_exit
logmsg_function_exit:


// errlog_function
// Return size: 0
define errlog_function
errlog_function_entry:
	r29 = fp
	// succ:  l0000FB00
l0000FB00:
	v4 = r29 - 8<i32>
	Mem0[v4:word32] = r30
	Mem0[v4 + 4<i32>:word32] = r31
	r30 = v4
	r29 = v4 - 8<i32>
	r4 = r3
	r0 = 0x00025E15<p32>
	Mem0[r29 + 1<i32>:byte] = r6
	r6 = r29 + 0x10<32>
	r5 = r29 + 0x10<32>
	r3 = 0<32>
	v13 = r30
	r31 = Mem0[v13 + 4<i32>:word32]
	r30 = Mem0[v13:word32]
	r29 = v13 + 8<i32>
	return
	// succ:  errlog_function_exit
errlog_function_exit:


// mirrorpad_f_execute
// Return size: 0
define mirrorpad_f_execute
mirrorpad_f_execute_entry:
	r29 = fp
	// succ:  l0000FB30
l0000FB30:
	v4 = r29 - 8<i32>
	Mem0[v4:word32] = r30
	Mem0[v4 + 4<i32>:word32] = r31
	r30 = v4
	r29 = v4 - 192<i32>
	r4 = 0x00025F22<p32>
	r3 = Mem0[r0 + 8<i32>:word32]
	r2 = Mem0[r0 + 4<i32>:word32]
	Mem0[r29 + 176<i32>:word64] = r19_r18
	Mem0[r29 + 152<i32>:word64] = r25_r24
	r2 = Mem0[r2:word32]
	r24 = Mem0[r2 + 4<i32>:word32]
	Mem0[r29 + 144<i32>:word64] = r27_r26
	r18 = Mem0[r3:word32]
	r7 = Mem0[r2 + 16<i32>:word32]
	r6 = Mem0[r24 + 16<i32>:word32]
	r25 = Mem0[r2 + 12<i32>:word32]
	r5 = Mem0[r2:word32]
	r27 = Mem0[r2 + 4<i32>:word32]
	r19 = Mem0[r2 + 8<i32>:word32]
	Mem0[r29 + 184<i32>:word64] = r17_r16
	r2 = Mem0[r6 + 20<i32>:word32]
	r1 = 0x85<32>
	r17 = r1
	Mem0[r29 + 160<i32>:word64] = r23_r22
	Mem0[r29 + 168<i32>:word64] = r21_r20
	Mem0[r29 + 124<i32>:word32] = r7
	r7 = Mem0[r18 + 16<i32>:word32]
	Mem0[r29 + 136<i32>:word32] = r2
	r2 = Mem0[r6 + 16<i32>:word32]
	r21 = Mem0[r6 + 28<i32>:word32]
	r20 = Mem0[r6 + 24<i32>:word32]
	r26 = Mem0[r6 + 8<i32>:word32]
	r16 = Mem0[r6 + 12<i32>:word32]
	r23 = Mem0[r6:word32]
	r22 = Mem0[r6 + 4<i32>:word32]
	Mem0[r29 + 140<i32>:word32] = r2
	Mem0[r29 + 12<i32>:word32] = r25
	r2 = r17
	Mem0[r29 + 120<i32>:word32] = r0
	Mem0[r29 + 8<i32>:word32] = r19
	Mem0[r29 + 132<i32>:word32] = r5
	Mem0[r29 + 4<i32>:word32] = r27
	Mem0[r29:word32] = r5
	Mem0[r29 + 128<i32>:word32] = r7
	call logmsg_function (retsize: 0;)
	r1 = 0x86<32>
	r3 = 0x00025F39<p32>
	branch r2 == 2<32> l0000FCC4
	// succ:  l0000FBD8 l0000FCC4
l0000FBD8:
	r2 = Mem0[r24 + 12<i32>:word32]
	r1 = 0x87<32>
	r3 = 0x0000FBFD<p32>
	branch r2 == 4<32> l0000FCC4
	// succ:  l0000FBEC l0000FCC4
l0000FBEC:
	r2 = Mem0[r24 + 8<i32>:word32]
	r1 = 0x88<32>
	r3 = 0x0000FC0B<p32>
	branch r2 == 0<32> l0000FCC4
	// succ:  l0000FC00 l0000FCC4
l0000FC00:
	r2 = r21 | r20
	r1 = 0x89<32>
	r3 = 0x0000FC1D<p32>
	branch r2 == 0<32> l0000FCC4
	// succ:  l0000FC14 l0000FCC4
l0000FC14:
	r2 = r22 | r23
	Mem0[r29:word32] = r26
	r2 = r17 + 0<32>
	p0 = r19 > r26
	Mem0[r29 + 4<i32>:word32] = r19
	r1 = 0x8A<32>
	r3 = 0x00025F69<p32>
	goto l0000FCC8
	// succ:  l0000FCC8
l0000FCC4:
	r2 = r17
	// succ:  l0000FCC8
l0000FCC8:
	call errlog_function (retsize: 0;)
	r0 = 0xFFFFFFFF<32>
	// succ:  l0000FF10
l0000FF10:
	r19_r18 = Mem0[r29 + 176<i32>:word64]
	r17_r16 = Mem0[r29 + 184<i32>:word64]
	r23_r22 = Mem0[r29 + 160<i32>:word64]
	r21_r20 = Mem0[r29 + 168<i32>:word64]
	r27_r26 = Mem0[r29 + 144<i32>:word64]
	r25_r24 = Mem0[r29 + 152<i32>:word64]
	v35 = r30
	r31 = Mem0[v35 + 4<i32>:word32]
	r30 = Mem0[v35:word32]
	r29 = v35 + 8<i32>
	return
	// succ:  mirrorpad_f_execute_exit
mirrorpad_f_execute_exit:


// mirrorpad_f_check
// Return size: 0
define mirrorpad_f_check
mirrorpad_f_check_entry:
	r29 = fp
	// succ:  l0000FFB0
l0000FFB0:
	v4 = r29 - 8<i32>
	Mem0[v4:word32] = r30
	Mem0[v4 + 4<i32>:word32] = r31
	r30 = v4
	r29 = v4 - 16<i32>
	Mem0[r29 - 16<i32>:word64] = r17_r16
	r4 = 0x00025EC7<p32>
	r17 = r0
	r16 = r1
	r1 = 0xA7<32>
	Mem0[r29:word32] = r17
	r2 = r16
	call logmsg_function (retsize: 0;)
	r2 = Mem0[r17 + 32<i32>:byte]
	r2 = r2 + 0xFFFFFFFD<32>
	r1 = 0xAA<32>
	branch p0 l0000FFF8
	// succ:  l0000FFE0 l0000FFF8
l0000FFE0:
	p0 = SLICE(r2, byte, 0) >u SLICE(1<8>, byte, 0)
	r3 = 0x00025ED9<p32>
	r2 = r16
	call errlog_function (retsize: 0;)
	// succ:  l0000FFEC
l0000FFEC:
	v17 = r30
	r31 = Mem0[v17 + 4<i32>:word32]
	r30 = Mem0[v17:word32]
	r29 = v17 + 8<i32>
	return
	// succ:  mirrorpad_f_check_exit
l0000FFF8:
	branch r2 == 2<32> l00010010
	// succ:  l00010008 l00010010
l00010008:
	r2 = Mem0[r17 + 16<i32>:word32]
	r1 = 0xAC<32>
	goto l0000FFEC
	// succ:  l0000FFEC
l00010010:
	branch r2 == 1<32> l00010028
	// succ:  l00010020 l00010028
l00010020:
	r2 = Mem0[r17 + 20<i32>:word32]
	r1 = 0xAD<32>
	goto l0000FFEC
	// succ:  l0000FFEC
l00010028:
	r2 = r16
	r1 = 0xAE<32>
	r4 = 0x00025F0C<p32>
	Mem0[r29:word32] = r17
	call logmsg_function (retsize: 0;)
	r0 = 0<32>
	v18 = r30
	r31 = Mem0[v18 + 4<i32>:word32]
	r30 = Mem0[v18:word32]
	r29 = v18 + 8<i32>
	return
	// succ:  mirrorpad_f_check_exit
mirrorpad_f_check_exit:


// logmsg_function
// Return size: 0
define logmsg_function
logmsg_function_entry:
	r29 = fp
	// succ:  l00010048
l00010048:
	v4 = r29 - 8<i32>
	Mem0[v4:word32] = r30
	Mem0[v4 + 4<i32>:word32] = r31
	r30 = v4
	r29 = v4 - 8<i32>
	r3 = 2<32>
	branch r3 >u r5 l0001006C
	// succ:  l00010058 l0001006C
l00010058:
	r5 = Mem0[r2 + 16<i32>:word32]
	r5 = r29 + 0x10<32>
	r3 = 2<32>
	r0 = 0x0001006C<p32>
	Mem0[r29 + 1<i32>:byte] = r6
	r6 = r29 + 0x10<32>
	call logv (retsize: 0;)
	// succ:  l00010060_thunk_errlog_function
l00010060_thunk_errlog_function:
	call errlog_function (retsize: 0;)
	return
	// succ:  logmsg_function_exit
l0001006C:
	v13 = r30
	r31 = Mem0[v13 + 4<i32>:word32]
	r30 = Mem0[v13:word32]
	r29 = v13 + 8<i32>
	return
	// succ:  logmsg_function_exit
logmsg_function_exit:


// errlog_function
// Return size: 0
define errlog_function
errlog_function_entry:
	r29 = fp
	// succ:  l00010070
l00010070:
	v4 = r29 - 8<i32>
	Mem0[v4:word32] = r30
	Mem0[v4 + 4<i32>:word32] = r31
	r30 = v4
	r29 = v4 - 8<i32>
	r4 = r3
	r0 = 0x00025EA8<p32>
	Mem0[r29 + 1<i32>:byte] = r6
	r6 = r29 + 0x10<32>
	r5 = r29 + 0x10<32>
	r3 = 0<32>
	v13 = r30
	r31 = Mem0[v13 + 4<i32>:word32]
	r30 = Mem0[v13:word32]
	r29 = v13 + 8<i32>
	return
	// succ:  errlog_function_exit
errlog_function_exit:


// add_int32_execute
// Return size: 0
define add_int32_execute
add_int32_execute_entry:
	r29 = fp
	// succ:  l000100A0
l000100A0:
	v4 = r29 - 8<i32>
	Mem0[v4:word32] = r30
	Mem0[v4 + 4<i32>:word32] = r31
	r30 = v4
	r29 = v4 - 160<i32>
	r5 = r0
	r3 = Mem0[r5 + 8<i32>:word32]
	r2 = Mem0[r5 + 4<i32>:word32]
	Mem0[r29 + 144<i32>:word64] = r19_r18
	Mem0[r29 + 112<i32>:word64] = r27_r26
	r19 = Mem0[r2 + 4<i32>:word32]
	r26 = Mem0[r2:word32]
	Mem0[r29 + 128<i32>:word64] = r23_r22
	Mem0[r29 + 136<i32>:word64] = r21_r20
	r22 = 0<32>
	r0 = Mem0[r26:word32]
	r6 = Mem0[r26 + 4<i32>:word32]
	r4 = Mem0[r19 + 4<i32>:word32]
	r8 = Mem0[r19:word32]
	p1 = r0 == 1<32>
	p0 = r6 == 1<32>
	r12 = Mem0[r26 + 8<i32>:word32]
	r10 = p1
	Mem0[r29 + 92<i32>:word32] = r4
	r9 = Mem0[r19 + 8<i32>:word32]
	p2 = r12 == 1<32>
	r18 = p0 ? r4 : r6
	r7 = Mem0[r26 + 12<i32>:word32]
	r4 = p1 ? r8 : r0
	r0 = Mem0[r19 + 12<i32>:word32]
	p1 = r7 == 1<32>
	r2 = r4 * r18
	Mem0[r29 + 76<i32>:word32] = r6
	Mem0[r29 + 120<i32>:word64] = r25_r24
	r20 = p2 ? r9 : r12
	r21 = p1 ? r0 : r7
	r2 = r2 * r20
	Mem0[r29 + 152<i32>:word64] = r17_r16
	r25 = Mem0[r3:word32]
	r6 = r1
	r2 = r2 * r21
	Mem0[r29 + 72<i32>:word32] = r8
	Mem0[r29 + 96<i32>:word32] = r10
	r10 = p2
	Mem0[r29 + 84<i32>:word32] = r10
	Mem0[r29 + 68<i32>:word32] = r9
	Mem0[r29 + 80<i32>:word32] = r0
	Mem0[r29 + 104<i32>:word32] = r4
	r16 = r2 << 2<32>
	branch p0 l0001014C
	// succ:  l00010148 l0001014C
l00010148:
	r22 = r7 * r12
	// succ:  l0001014C
l0001014C:
	r2 = r6
	r1 = 0xBD<32>
	r0 = 0x00025FF5<p32>
	Mem0[r29 + 64<i32>:word32] = r12
	r3 = Mem0[r19 + 16<i32>:word32]
	r4 = 0x00026014<p32>
	Mem0[r29 + 88<i32>:word32] = r7
	r23 = Mem0[r25 + 16<i32>:word32]
	r27 = r5
	r24 = r6
	r17 = Mem0[r26 + 16<i32>:word32]
	Mem0[r29:word32] = r5
	Mem0[r29 + 100<i32>:word32] = r3
	call logmsg_function (retsize: 0;)
	branch r16 >u r2 l000101B4
	// succ:  l00010198 l000101B4
l00010198:
	r2 = Mem0[r25 + 20<i32>:word32]
	r1 = 0xBD<32>
	r2 = r24
	r0 = 0x000101B9<p32>
	r3 = 0x00026032<p32>
	// succ:  l000101A8
l000101A8:
	call errlog_function (retsize: 0;)
	r0 = 0xFFFFFFFF<32>
	goto l000103E0
	// succ:  l000103E0
l000101B4:
	r5 = Mem0[r26:word32]
	r13 = Mem0[r19:word32]
	r2 = r24
	r7 = Mem0[r26 + 8<i32>:word32]
	r8 = Mem0[r26 + 12<i32>:word32]
	p0 = r5 == r13
	r12 = Mem0[r19 + 12<i32>:word32]
	r6 = Mem0[r26 + 4<i32>:word32]
	r3 = Mem0[r19 + 4<i32>:word32]
	r9 = Mem0[r19 + 8<i32>:word32]
	Mem0[r29 + 52<i32>:word32] = r16
	Mem0[r29 + 48<i32>:word32] = r25
	Mem0[r29 + 60<i32>:word32] = r27
	Mem0[r29 + 56<i32>:word32] = r17
	branch p0 l000101FC
	// succ:  l000101F0 l000101FC
l000101F0:
	branch p0 l000101FC
	// succ:  l000101F4 l000101FC
l000101F4:
	p0 = r5 == 1<32>
	p0 = r13 == 1<32>
	branch p0 l00010238
	// succ:  l000101FC l00010238
l000101FC:
	branch p0 l0001020C
	// succ:  l00010200 l0001020C
l00010200:
	p0 = r6 == r3
	branch p0 l0001020C
	// succ:  l00010204 l0001020C
l00010204:
	p0 = r6 == 1<32>
	branch p0 l00010238
	// succ:  l0001020C l00010238
l0001020C:
	p0 = r3 == 1<32>
	p0 = r7 == r9
	branch p0 l00010220
	// succ:  l00010214 l00010220
l00010214:
	branch p0 l00010220
	// succ:  l00010218 l00010220
l00010218:
	p0 = r7 == 1<32>
	p0 = r9 == 1<32>
	branch p0 l00010238
	// succ:  l00010220 l00010238
l00010220:
	p0 = r8 == r12
	branch p0 l0001026C
	// succ:  l00010228 l0001026C
l00010228:
	p0 = r8 == 1<32>
	branch p0 l0001026C
	// succ:  l00010230 l0001026C
l00010230:
	p0 = r12 == 1<32>
	branch p0 l0001026C
	// succ:  l00010238 l0001026C
l00010238:
	Mem0[r29 + 28<i32>:word32] = r12
	r1 = 0xBD<32>
	r0 = 0x00025FF5<p32>
	Mem0[r29 + 16<i32>:word32] = r13
	Mem0[r29 + 24<i32>:word32] = r9
	Mem0[r29 + 8<i32>:word32] = r7
	Mem0[r29 + 20<i32>:word32] = r3
	r3 = 0x00026040<p32>
	Mem0[r29 + 4<i32>:word32] = r6
	Mem0[r29 + 12<i32>:word32] = r8
	Mem0[r29:word32] = r5
	goto l000101A8
	// succ:  l000101A8
l0001026C:
	Mem0[r29 + 44<i32>:word32] = r21
	r24 = Mem0[r29 + 104<i32>:word32]
	r19 = r2
	Mem0[r29 + 20<i32>:word32] = r3
	Mem0[r29 + 36<i32>:word32] = r18
	r0 = 0x00025FF5<p32>
	Mem0[r29 + 40<i32>:word32] = r20
	r1 = 0xBD<32>
	r4 = 0x00026070<p32>
	Mem0[r29 + 28<i32>:word32] = r12
	Mem0[r29 + 32<i32>:word32] = r24
	Mem0[r29 + 16<i32>:word32] = r13
	Mem0[r29 + 24<i32>:word32] = r9
	Mem0[r29 + 8<i32>:word32] = r7
	Mem0[r29 + 12<i32>:word32] = r8
	Mem0[r29:word32] = r5
	Mem0[r29 + 4<i32>:word32] = r6
	call logmsg_function (retsize: 0;)
	r26 = Mem0[r29 + 100<i32>:word32]
	r3 = Mem0[r29 + 48<i32>:word32]
	r14 = 0<32>
	p0 = r24 > 0<32>
	r25 = Mem0[r29 + 56<i32>:word32]
	Mem0[r3 + 6<i32>:byte] = r2
	r2 = Mem0[r29 + 52<i32>:word32]
	Mem0[r3 + 4<i32>:word32] = r18
	Mem0[r3 + 12<i32>:word32] = r21
	Mem0[r3 + 8<i32>:word32] = r20
	r12 = Mem0[r29 + 88<i32>:word32]
	r13 = Mem0[r29 + 80<i32>:word32]
	branch p0 l000103B8
	// succ:  l000102E8 l000103B8
l000102E8:
	r7 = Mem0[r29 + 92<i32>:word64]
	r5 = Mem0[r29 + 68<i32>:word64]
	r6 = !(r13 == 1<32>)
	r2 = Mem0[r29 + 76<i32>:word64]
	r0 = Mem0[r29 + 84<i32>:word64]
	r9 = r5 * r7
	r4 = Mem0[r29 + 72<i32>:word64]
	r3 = Mem0[r29 + 64<i32>:word64]
	p0 = r5 == 1<32>
	p2 = r0
	r0 = Mem0[r29 + 96<i32>:word32]
	p1 = r4 == 1<32>
	r9 = r9 * r13
	r8 = r3 * r2
	r9 = r14 + 0<32>
	p2 = r7 == 1<32>
	r2 = p2 ? 0<32> : r12
	r4 = r13 * r5
	r5 = !(r12 == 1<32>)
	r3 = p0 ? 0<32> : r13
	p0 = r0
	r8 = r8 * r12
	r8 = r14 + 0<32>
	r4 = r14 + 0<32>
	r7 = 0<32>
	// succ:  l00010340
l00010340:
	r14 = 0<32>
	r13_r12 = r25_r26
	branch p0 l000103A8
l00010344:
	r14 = 0<32>
	r13_r12 = r25_r26
	// succ:  l0001034C l000103A8
l0001034C:
	p0 = r10 > 0<32>
	r15 = r13
	r28 = r12
	branch p0 l00010398
	// succ:  l00010358 l00010398
l00010358:
	p0 = r12 > 0<32>
	__loop(1<i32>, 0x0001035C<p32>, r20)
	r1_r0 = r15_r28
	r10 = r23
	branch p0 l0001038C
	// succ:  l00010368 l0001038C
l00010368:
	p0 = r13 > 0<32>
	__loop(0<i32>, 0x0001036C<p32>, r21)
	r16 = Mem0[r0:word32]
	r11 = Mem0[r1:word32]
	r1 = r1 + (r5 << 2<32>)
	r0 = r0 + (r6 << 2<32>)
	r11 = r16 + r11
	Mem0[r10:word32] = r11
	r10 = r10 + 4<i32>
	r23 = r23 + (r21 << 2<32>)
	// succ:  l0001038C
l0001038C:
	r15 = r15 + (r2 << 2<32>)
	r28 = r28 + (r3 << 2<32>)
	// succ:  l00010398
l00010398:
	branch r14 == r18 l0001034C
	goto l000103AC
	// succ:  l000103AC l0001034C
l000103A8:
	branch r7 == r24 l00010340
	goto l000103BC
	// succ:  l000103BC l00010340
l000103AC:
	r14 = r14 + 1<32>
	r12 = r12 + (r4 << 2<32>)
	r13 = r13 + (r22 << 2<32>)
	branch r7 == r24 l00010344
	goto l000103BC
	// succ:  l000103BC l00010344
l000103B8:
	Mem0[r29:byte] = r2
	r2 = Mem0[r29 + 60<i32>:word32]
	r0 = 0x00025FF5<p32>
	goto l000103CC
	// succ:  l000103CC
l000103BC:
	r7 = r7 + 1<32>
	r26 = r26 + (r9 << 2<32>)
	Mem0[r29:byte] = r2
	r2 = Mem0[r29 + 60<i32>:word32]
	r0 = 0x000103F9<p32>
	// succ:  l000103CC
l000103CC:
	r2 = r19
	r1 = 0xBD<32>
	r4 = 0x000103E4<p32>
	call logmsg_function (retsize: 0;)
	r0 = 0<32>
	// succ:  l000103E0
l000103E0:
	r19_r18 = Mem0[r29 + 144<i32>:word64]
	r17_r16 = Mem0[r29 + 152<i32>:word64]
	r23_r22 = Mem0[r29 + 128<i32>:word64]
	r21_r20 = Mem0[r29 + 136<i32>:word64]
	r27_r26 = Mem0[r29 + 112<i32>:word64]
	r25_r24 = Mem0[r29 + 120<i32>:word64]
	v42 = r30
	r31 = Mem0[v42 + 4<i32>:word32]
	r30 = Mem0[v42:word32]
	r29 = v42 + 8<i32>
	return
	// succ:  add_int32_execute_exit
add_int32_execute_exit:


// add_int32_check
// Return size: 0
define add_int32_check
add_int32_check_entry:
	r29 = fp
	// succ:  l000103F4
l000103F4:
	v4 = r29 - 8<i32>
	Mem0[v4:word32] = r30
	Mem0[v4 + 4<i32>:word32] = r31
	r30 = v4
	r29 = v4 - 16<i32>
	Mem0[r29 - 16<i32>:word64] = r17_r16
	r4 = 0x00025FBA<p32>
	r16 = r1
	r1 = 0x37<32>
	r17 = r0
	Mem0[r29:word32] = r17
	r2 = r16
	r0 = 0x00025FA1<p32>
	call logmsg_function (retsize: 0;)
	branch r2 == 2<32> l00010444
	// succ:  l00010428 l00010444
l00010428:
	r2 = Mem0[r17 + 16<i32>:word32]
	r1 = 0x38<32>
	r0 = 0x00010465<p32>
	r3 = 0x00025FC6<p32>
	// succ:  l00010434
l00010434:
	r2 = r16
	call errlog_function (retsize: 0;)
	v16 = r30
	r31 = Mem0[v16 + 4<i32>:word32]
	r30 = Mem0[v16:word32]
	r29 = v16 + 8<i32>
	return
	// succ:  add_int32_check_exit
l00010444:
	branch r2 == 1<32> l00010464
	// succ:  l00010454 l00010464
l00010454:
	r2 = Mem0[r17 + 20<i32>:word32]
	r1 = 0x39<32>
	r0 = 0x00010465<p32>
	goto l00010434
	// succ:  l00010434
l00010464:
	r2 = r16
	r1 = 0x3A<32>
	r0 = 0x00025FA1<p32>
	Mem0[r29:word32] = r17
	call logmsg_function (retsize: 0;)
	r4 = 0x00025FE5<p32>
	r0 = 0<32>
	v17 = r30
	r31 = Mem0[v17 + 4<i32>:word32]
	r30 = Mem0[v17:word32]
	r29 = v17 + 8<i32>
	return
	// succ:  add_int32_check_exit
add_int32_check_exit:


// logmsg_function
// Return size: 0
define logmsg_function
logmsg_function_entry:
	r29 = fp
	// succ:  l00010488
l00010488:
	v4 = r29 - 8<i32>
	Mem0[v4:word32] = r30
	Mem0[v4 + 4<i32>:word32] = r31
	r30 = v4
	r29 = v4 - 8<i32>
	r3 = 2<32>
	branch r3 >u r5 l000104A8
	// succ:  l00010498 l000104A8
l00010498:
	r5 = Mem0[r2 + 16<i32>:word32]
	Mem0[r29 + 1<i32>:byte] = r6
	r6 = r29 + 0x10<32>
	r5 = r29 + 0x10<32>
	// succ:  l000104A8
l000104A8:
	v11 = r30
	r31 = Mem0[v11 + 4<i32>:word32]
	r30 = Mem0[v11:word32]
	r29 = v11 + 8<i32>
	return
	// succ:  logmsg_function_exit
logmsg_function_exit:


// errlog_function
// Return size: 0
define errlog_function
errlog_function_entry:
	r29 = fp
	// succ:  l000104AC
l000104AC:
	v4 = r29 - 8<i32>
	Mem0[v4:word32] = r30
	Mem0[v4 + 4<i32>:word32] = r31
	r30 = v4
	r29 = v4 - 8<i32>
	r4 = r3
	r3 = 0<32>
	Mem0[r29 + 1<i32>:byte] = r6
	r6 = r29 + 0x10<32>
	r5 = r29 + 0x10<32>
	call logv (retsize: 0;)
	r0 = Mem0[r0:word32]
	r0 = Mem0[r0:word32]
	r0 = Mem0[r0:word32]
	r0 = Mem0[r0:word32]
errlog_function_exit:


// prod_f_execute
// Return size: 0
define prod_f_execute
prod_f_execute_entry:
	r29 = fp
	// succ:  l000104D0
l000104D0:
	v4 = r29 - 8<i32>
	Mem0[v4:word32] = r30
	Mem0[v4 + 4<i32>:word32] = r31
	r30 = v4
	r29 = v4 - 48<i32>
	r28 = 1<32>
	r8 = Mem0[r0 + 4<i32>:word32]
	r2 = Mem0[r0 + 8<i32>:word32]
	Mem0[r29 + 40<i32>:word64] = r17_r16
	r6 = Mem0[r0 + 16<i32>:word32]
	r14 = Mem0[r2:word32]
	r7 = Mem0[r8:word32]
	r2 = r1
	Mem0[r29 + 24<i32>:word64] = r21_r20
	Mem0[r29 + 32<i32>:word64] = r19_r18
	r17 = 1<32>
	p0 = r6 == 3<32>
	r3 = Mem0[r7 + 12<i32>:word32]
	r15 = Mem0[r7:word32]
	r10 = 1<32>
	r1 = 1<32>
	r5 = Mem0[r7 + 4<i32>:word32]
	r4 = Mem0[r7 + 8<i32>:word32]
	r13_r12 = r3_r15
	r18 = 0<32>
	r7 = Mem0[r14 + 16<i32>:word32]
	r6 = Mem0[r7 + 16<i32>:word32]
	Mem0[r29 + 8<i32>:word64] = r25_r24
	Mem0[r29 + 16<i32>:word64] = r23_r22
	Mem0[r29:word64] = r27_r26
	branch p0 l0001053C
	// succ:  l00010530 l0001053C
l00010530:
	r9_r8 = 0x100000001<64>
	r13_r12 = 0x100000001<64>
	goto l0001067C
	// succ:  l0001067C
l0001053C:
	r1 = Mem0[r8 + 4<i32>:word32]
	r10 = Mem0[r8 + 8<i32>:word32]
	r9_r8 = r4_r5
	r11 = Mem0[r1 + 12<i32>:word32]
	r10 = Mem0[r10 + 16<i32>:word32]
	r10 = Mem0[r10:word32]
	r1 = Mem0[r1 + 16<i32>:word32]
	r16 = r1 + 0<32>
	r9_r8 = r4_r5
	p0 = r11 == 0<32>
	branch p0 l000105B8
	// succ:  l00010568 l000105B8
l00010568:
	r13_r12 = r3_r15
	__loop(0<i32>, 0x00010570<p32>, r11)
	r16 = r16 + 4<i32>
	r17 = Mem0[r16:word32]
	branch r17 > 3<32> l0001058C
	// succ:  l00010580 l0001058C
l00010580:
	r17 = r10 + (0x7F<32> - r17)
	r12 = 1<32>
	r13 = 1<32>
	r9_r8 = 0x100000001<64>
	// succ:  l0001058C
l0001058C:
	r13 = 1<32>
	branch p0 l000105AC
	// succ:  l00010594 l000105AC
l00010594:
	p0 = r9 == 0<32>
	r9 = 1<32>
	branch p0 l000105AC
	// succ:  l0001059C l000105AC
l0001059C:
	p0 = r9 == 1<32>
	r8 = 1<32>
	branch p0 l000105AC
	// succ:  l000105A4 l000105AC
l000105A4:
	p0 = r9 == 2<32>
	r12 = 1<32>
	p0 = r17 == 3<32>
	// succ:  l000105AC
l000105AC:
	r18 = r11
	// succ:  l000105B8
l000105B8:
	branch r0 == 2<32> l000105DC
	// succ:  l000105CC l000105DC
l000105CC:
	r0 = Mem0[r0 + 32<i32>:int8]
	r11 = r9
	p0 = r18 == 0<32>
	r1 = r13
	r28 = r12
	r17 = r8
	goto l0001067C
	// succ:  l0001067C
l000105DC:
	r0 = r13
	r17_r16 = r8_r12
	r11 = r9 + 0<32>
	r17_r16 = r8_r12
	r0 = r13 + 0<32>
	branch p0 l00010638
	// succ:  l000105F4 l00010638
l000105F4:
	__loop(0<i32>, 0x000105F8<p32>, r18)
	r1 = r1 + 4<i32>
	r18 = Mem0[r1:word32]
	branch r18 > 3<32> l00010614
	// succ:  l00010608 l00010614
l00010608:
	r18 = r10 + (0x7F<32> - r18)
	r16 = 0<32>
	r0 = 0<32>
	r17 = 0<32>
	goto l00010630
	// succ:  l00010630
l00010614:
	r0 = 0<32>
	branch p0 l00010630
	// succ:  l0001061C l00010630
l0001061C:
	p0 = r10 == 0<32>
	r11 = 0<32>
	branch p0 l00010630
	// succ:  l00010624 l00010630
l00010624:
	p0 = r10 == 1<32>
	r17 = 0<32>
	branch p0 l00010630
	// succ:  l0001062C l00010630
l0001062C:
	p0 = r10 == 2<32>
	r16 = -1<i32>
	p0 = r18 == 3<32>
	// succ:  l00010630
l00010630:
	// succ:  l00010638
l00010638:
	p3 = r0 == 0<32>
	p0 = r11 == 0<32>
	p2 = r17 == 0<32>
	p1 = r16 == 0<32>
	r1 = p1 ? 1<32> : r16
	p1 = p1 | p2
	r10 = p1 ? 1<32> : r16
	r1 = r17 + 0<32>
	p2 = p1 | p0
	r17 = p2 ? 1<32> : r16
	r1 = r11 + 0<32>
	r10 = r1 + 0<32>
	branch p3 l0001067C
	// succ:  l0001066C l0001067C
l0001066C:
	r1 = r0
	r10 = r1
	r17 = r10
	r28 = r17
	// succ:  l0001067C
l0001067C:
	r11 = Mem0[r14 + 20<i32>:word32]
	p0 = r12 > 0<32>
	r0 = r13 * r9
	r0 = r0 * r8
	r0 = r0 * r12
	branch r0 >u r11 l000106B8
	// succ:  l0001069C l000106B8
l0001069C:
	r0 = r0 << 2<32>
	r1 = 0xC6<32>
	r0 = 0x000106D6<p32>
	call errlog_function (retsize: 0;)
	r3 = 0x00026131<p32>
	r0 = 0xFFFFFFFF<32>
	goto l00010814
	// succ:  l00010814
l000106B8:
	Mem0[r14 + 24<i32>:word32] = r0
	Mem0[r14 + 12<i32>:word32] = r1
	r0 = 0<32>
	Mem0[r14 + 4<i32>:word32] = r17
	Mem0[r14 + 8<i32>:word32] = r10
	r0 = 0<32>
	Mem0[r14:word32] = r28
	r1 = 0x3F800000<32>
	branch p0 l00010814
	// succ:  l000106E0 l00010814
l000106E0:
	p2 = r8 == 1<32>
	p1 = r13 == 1<32>
	p3 = r9 == 1<32>
	p0 = r12 == 1<32>
	r14 = p1 ? r3 : 1<32>
	r28 = p3 ? r4 : 1<32>
	r2 = p0 ? r15 : 1<32>
	r15 = p2 ? r5 : 1<32>
	// succ:  l00010700
l00010700:
	p0 = r8 > 0<32>
	r10 = 0<32>
	branch p0 l00010808
l00010704:
	p0 = r8 > 0<32>
	r10 = 0<32>
	// succ:  l0001070C l00010808
l0001070C:
	p0 = r9 > 0<32>
	r11 = 0<32>
	branch p0 l00010800
l00010710:
	p0 = r9 > 0<32>
	r11 = 0<32>
	// succ:  l00010718 l00010800
l00010718:
	p0 = r13 > 0<32>
	r17_r16 = SEQ(0<32>, r7)
	branch p0 l000107F8
	// succ:  l00010724 l000107F8
l00010724:
	r18 = r1
	branch p0 l000107E4
	// succ:  l0001072C l000107E4
l0001072C:
	p0 = r2 > 0<32>
	r19_r18 = SEQ(0<32>, r1)
	// succ:  l00010730
l00010730:
	p0 = r15 > 0<32>
	r22 = r19 + r0
	branch p0 l000107DC
l00010734:
	p0 = r15 > 0<32>
	r22 = r19 + r0
	// succ:  l0001073C l000107DC
l0001073C:
	r21_r20 = SEQ(r10, 0<32>)
	r21 = r21 + r22 * r5
	// succ:  l00010744
l00010744:
	p0 = r28 > 0<32>
	r24 = r21 + r20
	branch p0 l000107D4
	// succ:  l00010750 l000107D4
l00010750:
	r23_r22 = SEQ(r11, 0<32>)
	__loop(1<i32>, 0x0001075C<p32>, r28)
	r23 = r23 + r24 * r4
	p0 = r14 > 0<32>
	r24 = r17
	r25 = r23 + r22
	branch p0 l000107C8
	// succ:  l0001076C l000107C8
l0001076C:
	p0 = r14 >u 1<32>
	r26 = r14 + 0xFFFFFFFF<32>
	r27 = r26 + 0xFFFFFFFF<32>
	r24 = r24 + r25 * r3
	r25 = r6 + (r24 << 2<32>)
	r24 = r25 + 4<32>
	r25 = Mem0[r25:word32]
	branch p0 l00010794
	// succ:  l0001078C l00010794
l0001078C:
	r24 = r25
	goto l000107C4
	// succ:  l000107C4
l00010794:
	r24 = Mem0[r24:word32]
	r26 = r24 + 4<32>
	p0 = r26 >u 1<32>
	__loop(0<i32>, 0x000107A8<p32>, r27)
	branch p0 l000107C0
	// succ:  l000107A8 l000107C0
l000107A8:
	r24 = Mem0[r26:word32]
	r26 = r26 + 4<32>
	r27 = r24
	r18 = r18 * r25
	r25 = r27
	// succ:  l000107C0
l000107C0:
	r18 = r18 * r25
	// succ:  l000107C4
l000107C4:
	r18 = r18 * r24
	// succ:  l000107C8
l000107C8:
	r22 = r22 + 1<32>
	// succ:  l000107D4
l000107D4:
	branch r20 == r15 l00010744
	goto l000107E0
	// succ:  l000107E0 l00010744
l000107DC:
	branch r19 == r2 l00010730
	goto l000107E8
	// succ:  l000107E8 l00010730
l000107E0:
	r20 = r20 + 1<32>
	branch r19 == r2 l00010734
	goto l000107E8
	// succ:  l000107E8 l00010734
l000107E4:
	Mem0[r16:word32] = r18
	r17 = r17
	r16 = r16 + 4<32>
	goto l000107EC
	// succ:  l000107EC
l000107E8:
	Mem0[r16:word32] = r18
	r17 = r17
	// succ:  l000107EC
l000107EC:
	p0 = r17 == r13
	branch p0 l00010724
	// succ:  l000107F4 l00010724
l000107F4:
	r7 = r7 + (r13 << 2<32>)
	// succ:  l000107F8
l000107F8:
	branch r11 == r9 l00010718
	goto l00010804
	// succ:  l00010804 l00010718
l00010800:
	branch r10 == r8 l0001070C
	goto l0001080C
	// succ:  l0001080C l0001070C
l00010804:
	r11 = r11 + 1<32>
	branch r10 == r8 l00010710
	goto l0001080C
	// succ:  l0001080C l00010710
l00010808:
	branch r0 == r12 l00010700
	goto l00010814
	// succ:  l00010814 l00010700
l0001080C:
	branch r0 == r12 l00010704
	// succ:  l00010814 l00010704
l00010814:
	r19_r18 = Mem0[r29 + 32<i32>:word64]
	r17_r16 = Mem0[r29 + 40<i32>:word64]
	r23_r22 = Mem0[r29 + 16<i32>:word64]
	r21_r20 = Mem0[r29 + 24<i32>:word64]
	r27_r26 = Mem0[r29:word64]
	r25_r24 = Mem0[r29 + 8<i32>:word64]
	v39 = r30
	r31 = Mem0[v39 + 4<i32>:word32]
	r30 = Mem0[v39:word32]
	r29 = v39 + 8<i32>
	return
	// succ:  prod_f_execute_exit
prod_f_execute_exit:


// prod_f_check
// Return size: 0
define prod_f_check
prod_f_check_entry:
	r29 = fp
	// succ:  l00010830
l00010830:
	v4 = r29 - 8<i32>
	Mem0[v4:word32] = r30
	Mem0[v4 + 4<i32>:word32] = r31
	r30 = v4
	r29 = v4 - 16<i32>
	Mem0[r29 - 16<i32>:word64] = r17_r16
	r4 = 0x000260D7<p32>
	r17 = r0
	r16 = r1
	r1 = 0x37<32>
	Mem0[r29:word32] = r17
	r2 = r16
	call logmsg_function (retsize: 0;)
	r2 = Mem0[r17 + 16<i32>:word32]
	branch r3 >u r2 l0001087C
	// succ:  l0001085C l0001087C
l0001085C:
	r3 = 4<32>
	r1 = 0x38<32>
	r0 = 0x0001087F<p32>
	// succ:  l00010864
l00010864:
	r3 = 0x000260E3<p32>
	// succ:  l0001086C
l0001086C:
	r2 = r16
	call errlog_function (retsize: 0;)
	v16 = r30
	r31 = Mem0[v16 + 4<i32>:word32]
	r30 = Mem0[v16:word32]
	r29 = v16 + 8<i32>
	return
	// succ:  prod_f_check_exit
l0001087C:
	r1 = 0x39<32>
	branch p0 l00010890
	// succ:  l00010884 l00010890
l00010884:
	p0 = r2 == 0<32>
	goto l00010864
	// succ:  l00010864
l00010890:
	branch r2 == 1<32> l000108B0
	// succ:  l000108A0 l000108B0
l000108A0:
	r2 = Mem0[r17 + 20<i32>:word32]
	r1 = 0x3A<32>
	r0 = 0x000108BF<p32>
	goto l0001086C
	// succ:  l0001086C
l000108B0:
	r2 = r16
	r1 = 0x3B<32>
	r4 = 0x00026102<p32>
	Mem0[r29:word32] = r17
	call logmsg_function (retsize: 0;)
	r0 = 0<32>
	v18 = r30
	r31 = Mem0[v18 + 4<i32>:word32]
	r30 = Mem0[v18:word32]
	r29 = v18 + 8<i32>
	return
	// succ:  prod_f_check_exit
prod_f_check_exit:


// logmsg_function
// Return size: 0
define logmsg_function
logmsg_function_entry:
	r29 = fp
	// succ:  l000108CC
l000108CC:
	v4 = r29 - 8<i32>
	Mem0[v4:word32] = r30
	Mem0[v4 + 4<i32>:word32] = r31
	r30 = v4
	r29 = v4 - 8<i32>
	r3 = 2<32>
	branch r3 >u r5 l000108F0
	// succ:  l000108DC l000108F0
l000108DC:
	r5 = Mem0[r2 + 16<i32>:word32]
	r5 = r29 + 0x10<32>
	r3 = 2<32>
	r0 = 0x000108FF<p32>
	Mem0[r29 + 1<i32>:byte] = r6
	r6 = r29 + 0x10<32>
	call logv (retsize: 0;)
	// succ:  l000108E4_thunk_errlog_function
l000108E4_thunk_errlog_function:
	call errlog_function (retsize: 0;)
	return
	// succ:  logmsg_function_exit
l000108F0:
	v13 = r30
	r31 = Mem0[v13 + 4<i32>:word32]
	r30 = Mem0[v13:word32]
	r29 = v13 + 8<i32>
	return
	// succ:  logmsg_function_exit
logmsg_function_exit:


// errlog_function
// Return size: 0
define errlog_function
errlog_function_entry:
	r29 = fp
	// succ:  l000108F4
l000108F4:
	v4 = r29 - 8<i32>
	Mem0[v4:word32] = r30
	Mem0[v4 + 4<i32>:word32] = r31
	r30 = v4
	r29 = v4 - 8<i32>
	r4 = r3
	r3 = 0<32>
	Mem0[r29 + 1<i32>:byte] = r6
	r6 = r29 + 0x10<32>
	r5 = r29 + 0x10<32>
	call logv (retsize: 0;)
	// succ:  l000108FC_thunk_mul_int32_execute
l000108FC_thunk_mul_int32_execute:
	call mul_int32_execute (retsize: 0;)
	return
	// succ:  errlog_function_exit
errlog_function_exit:


// mul_int32_execute
// Return size: 0
define mul_int32_execute
mul_int32_execute_entry:
	r29 = fp
	// succ:  l00010910
l00010910:
	v4 = r29 - 8<i32>
	Mem0[v4:word32] = r30
	Mem0[v4 + 4<i32>:word32] = r31
	r30 = v4
	r29 = v4 - 160<i32>
	r5 = r0
	r3 = Mem0[r5 + 8<i32>:word32]
	r2 = Mem0[r5 + 4<i32>:word32]
	Mem0[r29 + 144<i32>:word64] = r19_r18
	Mem0[r29 + 112<i32>:word64] = r27_r26
	r19 = Mem0[r2 + 4<i32>:word32]
	r26 = Mem0[r2:word32]
	Mem0[r29 + 128<i32>:word64] = r23_r22
	Mem0[r29 + 136<i32>:word64] = r21_r20
	r22 = 0<32>
	r0 = Mem0[r26:word32]
	r6 = Mem0[r26 + 4<i32>:word32]
	r4 = Mem0[r19 + 4<i32>:word32]
	r8 = Mem0[r19:word32]
	p1 = r0 == 1<32>
	p0 = r6 == 1<32>
	r12 = Mem0[r26 + 8<i32>:word32]
	r10 = p1
	Mem0[r29 + 92<i32>:word32] = r4
	r9 = Mem0[r19 + 8<i32>:word32]
	p2 = r12 == 1<32>
	r18 = p0 ? r4 : r6
	r7 = Mem0[r26 + 12<i32>:word32]
	r4 = p1 ? r8 : r0
	r0 = Mem0[r19 + 12<i32>:word32]
	p1 = r7 == 1<32>
	r2 = r4 * r18
	Mem0[r29 + 76<i32>:word32] = r6
	Mem0[r29 + 120<i32>:word64] = r25_r24
	r20 = p2 ? r9 : r12
	r21 = p1 ? r0 : r7
	r2 = r2 * r20
	Mem0[r29 + 152<i32>:word64] = r17_r16
	r25 = Mem0[r3:word32]
	r6 = r1
	r2 = r2 * r21
	Mem0[r29 + 72<i32>:word32] = r8
	Mem0[r29 + 96<i32>:word32] = r10
	r10 = p2
	Mem0[r29 + 84<i32>:word32] = r10
	Mem0[r29 + 68<i32>:word32] = r9
	Mem0[r29 + 80<i32>:word32] = r0
	Mem0[r29 + 104<i32>:word32] = r4
	r16 = r2 << 2<32>
	branch p0 l000109BC
	// succ:  l000109B8 l000109BC
l000109B8:
	r22 = r7 * r12
	// succ:  l000109BC
l000109BC:
	r2 = r6
	r1 = 0xBD<32>
	r0 = 0x00026193<p32>
	Mem0[r29 + 64<i32>:word32] = r12
	r3 = Mem0[r19 + 16<i32>:word32]
	r4 = 0x000261B2<p32>
	Mem0[r29 + 88<i32>:word32] = r7
	r23 = Mem0[r25 + 16<i32>:word32]
	r27 = r5
	r24 = r6
	r17 = Mem0[r26 + 16<i32>:word32]
	Mem0[r29:word32] = r5
	Mem0[r29 + 100<i32>:word32] = r3
	call logmsg_function (retsize: 0;)
	branch r16 >u r2 l00010A24
	// succ:  l00010A08 l00010A24
l00010A08:
	r2 = Mem0[r25 + 20<i32>:word32]
	r1 = 0xBD<32>
	r2 = r24
	r0 = 0x00010A17<p32>
	r3 = 0x000261D0<p32>
	// succ:  l00010A18
l00010A18:
	call errlog_function (retsize: 0;)
	r0 = 0xFFFFFFFF<32>
	goto l00010C50
	// succ:  l00010C50
l00010A24:
	r5 = Mem0[r26:word32]
	r13 = Mem0[r19:word32]
	r2 = r24
	r7 = Mem0[r26 + 8<i32>:word32]
	r8 = Mem0[r26 + 12<i32>:word32]
	p0 = r5 == r13
	r12 = Mem0[r19 + 12<i32>:word32]
	r6 = Mem0[r26 + 4<i32>:word32]
	r3 = Mem0[r19 + 4<i32>:word32]
	r9 = Mem0[r19 + 8<i32>:word32]
	Mem0[r29 + 52<i32>:word32] = r16
	Mem0[r29 + 48<i32>:word32] = r25
	Mem0[r29 + 60<i32>:word32] = r27
	Mem0[r29 + 56<i32>:word32] = r17
	branch p0 l00010A6C
	// succ:  l00010A60 l00010A6C
l00010A60:
	branch p0 l00010A6C
	// succ:  l00010A64 l00010A6C
l00010A64:
	p0 = r5 == 1<32>
	p0 = r13 == 1<32>
	branch p0 l00010AA8
	// succ:  l00010A6C l00010AA8
l00010A6C:
	branch p0 l00010A7C
	// succ:  l00010A70 l00010A7C
l00010A70:
	p0 = r6 == r3
	branch p0 l00010A7C
	// succ:  l00010A74 l00010A7C
l00010A74:
	p0 = r6 == 1<32>
	branch p0 l00010AA8
	// succ:  l00010A7C l00010AA8
l00010A7C:
	p0 = r3 == 1<32>
	p0 = r7 == r9
	branch p0 l00010A90
	// succ:  l00010A84 l00010A90
l00010A84:
	branch p0 l00010A90
	// succ:  l00010A88 l00010A90
l00010A88:
	p0 = r7 == 1<32>
	p0 = r9 == 1<32>
	branch p0 l00010AA8
	// succ:  l00010A90 l00010AA8
l00010A90:
	p0 = r8 == r12
	branch p0 l00010ADC
	// succ:  l00010A98 l00010ADC
l00010A98:
	p0 = r8 == 1<32>
	branch p0 l00010ADC
	// succ:  l00010AA0 l00010ADC
l00010AA0:
	p0 = r12 == 1<32>
	branch p0 l00010ADC
	// succ:  l00010AA8 l00010ADC
l00010AA8:
	Mem0[r29 + 28<i32>:word32] = r12
	r1 = 0xBD<32>
	r0 = 0x00026193<p32>
	Mem0[r29 + 16<i32>:word32] = r13
	Mem0[r29 + 24<i32>:word32] = r9
	Mem0[r29 + 8<i32>:word32] = r7
	Mem0[r29 + 20<i32>:word32] = r3
	r3 = 0x000261DE<p32>
	Mem0[r29 + 4<i32>:word32] = r6
	Mem0[r29 + 12<i32>:word32] = r8
	Mem0[r29:word32] = r5
	goto l00010A18
	// succ:  l00010A18
l00010ADC:
	Mem0[r29 + 44<i32>:word32] = r21
	r24 = Mem0[r29 + 104<i32>:word32]
	r19 = r2
	Mem0[r29 + 20<i32>:word32] = r3
	Mem0[r29 + 36<i32>:word32] = r18
	r0 = 0x00026193<p32>
	Mem0[r29 + 40<i32>:word32] = r20
	r1 = 0xBD<32>
	r4 = 0x0002620E<p32>
	Mem0[r29 + 28<i32>:word32] = r12
	Mem0[r29 + 32<i32>:word32] = r24
	Mem0[r29 + 16<i32>:word32] = r13
	Mem0[r29 + 24<i32>:word32] = r9
	Mem0[r29 + 8<i32>:word32] = r7
	Mem0[r29 + 12<i32>:word32] = r8
	Mem0[r29:word32] = r5
	Mem0[r29 + 4<i32>:word32] = r6
	call logmsg_function (retsize: 0;)
	r26 = Mem0[r29 + 100<i32>:word32]
	r3 = Mem0[r29 + 48<i32>:word32]
	r14 = 0<32>
	p0 = r24 > 0<32>
	r25 = Mem0[r29 + 56<i32>:word32]
	Mem0[r3 + 6<i32>:byte] = r2
	r2 = Mem0[r29 + 52<i32>:word32]
	Mem0[r3 + 4<i32>:word32] = r18
	Mem0[r3 + 12<i32>:word32] = r21
	Mem0[r3 + 8<i32>:word32] = r20
	r12 = Mem0[r29 + 88<i32>:word32]
	r13 = Mem0[r29 + 80<i32>:word32]
	branch p0 l00010C28
	// succ:  l00010B58 l00010C28
l00010B58:
	r7 = Mem0[r29 + 92<i32>:word64]
	r5 = Mem0[r29 + 68<i32>:word64]
	r6 = !(r13 == 1<32>)
	r2 = Mem0[r29 + 76<i32>:word64]
	r0 = Mem0[r29 + 84<i32>:word64]
	r9 = r5 * r7
	r4 = Mem0[r29 + 72<i32>:word64]
	r3 = Mem0[r29 + 64<i32>:word64]
	p0 = r5 == 1<32>
	p2 = r0
	r0 = Mem0[r29 + 96<i32>:word32]
	p1 = r4 == 1<32>
	r9 = r9 * r13
	r8 = r3 * r2
	r9 = r14 + 0<32>
	p2 = r7 == 1<32>
	r2 = p2 ? 0<32> : r12
	r4 = r13 * r5
	r5 = !(r12 == 1<32>)
	r3 = p0 ? 0<32> : r13
	p0 = r0
	r8 = r8 * r12
	r8 = r14 + 0<32>
	r4 = r14 + 0<32>
	r7 = 0<32>
	// succ:  l00010BB0
l00010BB0:
	r14 = 0<32>
	r13_r12 = r25_r26
	branch p0 l00010C18
l00010BB4:
	r14 = 0<32>
	r13_r12 = r25_r26
	// succ:  l00010BBC l00010C18
l00010BBC:
	p0 = r10 > 0<32>
	r15 = r13
	r28 = r12
	branch p0 l00010C08
	// succ:  l00010BC8 l00010C08
l00010BC8:
	p0 = r12 > 0<32>
	__loop(1<i32>, 0x00010BCC<p32>, r20)
	r1_r0 = r15_r28
	r10 = r23
	branch p0 l00010BFC
	// succ:  l00010BD8 l00010BFC
l00010BD8:
	p0 = r13 > 0<32>
	__loop(0<i32>, 0x00010BDC<p32>, r21)
	r16 = Mem0[r0:word32]
	r11 = Mem0[r1:word32]
	r1 = r1 + (r5 << 2<32>)
	r0 = r0 + (r6 << 2<32>)
	r11 = r16 * r11
	Mem0[r10:word32] = r11
	r10 = r10 + 4<i32>
	r23 = r23 + (r21 << 2<32>)
	// succ:  l00010BFC
l00010BFC:
	r15 = r15 + (r2 << 2<32>)
	r28 = r28 + (r3 << 2<32>)
	// succ:  l00010C08
l00010C08:
	branch r14 == r18 l00010BBC
	goto l00010C1C
	// succ:  l00010C1C l00010BBC
l00010C18:
	branch r7 == r24 l00010BB0
	goto l00010C2C
	// succ:  l00010C2C l00010BB0
l00010C1C:
	r14 = r14 + 1<32>
	r12 = r12 + (r4 << 2<32>)
	r13 = r13 + (r22 << 2<32>)
	branch r7 == r24 l00010BB4
	goto l00010C2C
	// succ:  l00010C2C l00010BB4
l00010C28:
	Mem0[r29:byte] = r2
	r2 = Mem0[r29 + 60<i32>:word32]
	r0 = 0x00026193<p32>
	goto l00010C3C
	// succ:  l00010C3C
l00010C2C:
	r7 = r7 + 1<32>
	r26 = r26 + (r9 << 2<32>)
	Mem0[r29:byte] = r2
	r2 = Mem0[r29 + 60<i32>:word32]
	r0 = 0x00010C57<p32>
	// succ:  l00010C3C
l00010C3C:
	r2 = r19
	r1 = 0xBD<32>
	r4 = 0x00010C42<p32>
	call logmsg_function (retsize: 0;)
	r0 = 0<32>
	// succ:  l00010C50
l00010C50:
	r19_r18 = Mem0[r29 + 144<i32>:word64]
	r17_r16 = Mem0[r29 + 152<i32>:word64]
	r23_r22 = Mem0[r29 + 128<i32>:word64]
	r21_r20 = Mem0[r29 + 136<i32>:word64]
	r27_r26 = Mem0[r29 + 112<i32>:word64]
	r25_r24 = Mem0[r29 + 120<i32>:word64]
	v42 = r30
	r31 = Mem0[v42 + 4<i32>:word32]
	r30 = Mem0[v42:word32]
	r29 = v42 + 8<i32>
	return
	// succ:  mul_int32_execute_exit
mul_int32_execute_exit:


// mul_int32_check
// Return size: 0
define mul_int32_check
mul_int32_check_entry:
	r29 = fp
	// succ:  l00010C64
l00010C64:
	v4 = r29 - 8<i32>
	Mem0[v4:word32] = r30
	Mem0[v4 + 4<i32>:word32] = r31
	r30 = v4
	r29 = v4 - 16<i32>
	Mem0[r29 - 16<i32>:word64] = r17_r16
	r4 = 0x00026158<p32>
	r16 = r1
	r1 = 0x37<32>
	r17 = r0
	Mem0[r29:word32] = r17
	r2 = r16
	r0 = 0x0002613F<p32>
	call logmsg_function (retsize: 0;)
	branch r2 == 2<32> l00010CB4
	// succ:  l00010C98 l00010CB4
l00010C98:
	r2 = Mem0[r17 + 16<i32>:word32]
	r1 = 0x38<32>
	r0 = 0x00010CC3<p32>
	r3 = 0x00026164<p32>
	// succ:  l00010CA4
l00010CA4:
	r2 = r16
	call errlog_function (retsize: 0;)
	v16 = r30
	r31 = Mem0[v16 + 4<i32>:word32]
	r30 = Mem0[v16:word32]
	r29 = v16 + 8<i32>
	return
	// succ:  mul_int32_check_exit
l00010CB4:
	branch r2 == 1<32> l00010CD4
	// succ:  l00010CC4 l00010CD4
l00010CC4:
	r2 = Mem0[r17 + 20<i32>:word32]
	r1 = 0x39<32>
	r0 = 0x00010D03<p32>
	goto l00010CA4
	// succ:  l00010CA4
l00010CD4:
	r2 = r16
	r1 = 0x3A<32>
	r0 = 0x0002613F<p32>
	Mem0[r29:word32] = r17
	call logmsg_function (retsize: 0;)
	r4 = 0x00026183<p32>
	r0 = 0<32>
	v17 = r30
	r31 = Mem0[v17 + 4<i32>:word32]
	r30 = Mem0[v17:word32]
	r29 = v17 + 8<i32>
	return
	// succ:  mul_int32_check_exit
mul_int32_check_exit:


// logmsg_function
// Return size: 0
define logmsg_function
logmsg_function_entry:
	r29 = fp
	// succ:  l00010CF8
l00010CF8:
	v4 = r29 - 8<i32>
	Mem0[v4:word32] = r30
	Mem0[v4 + 4<i32>:word32] = r31
	r30 = v4
	r29 = v4 - 8<i32>
	r3 = 2<32>
	branch r3 >u r5 l00010D18
	// succ:  l00010D08 l00010D18
l00010D08:
	r5 = Mem0[r2 + 16<i32>:word32]
	Mem0[r29 + 1<i32>:byte] = r6
	r6 = r29 + 0x10<32>
	r5 = r29 + 0x10<32>
	// succ:  l00010D18
l00010D18:
	v11 = r30
	r31 = Mem0[v11 + 4<i32>:word32]
	r30 = Mem0[v11:word32]
	r29 = v11 + 8<i32>
	return
	// succ:  logmsg_function_exit
logmsg_function_exit:


// errlog_function
// Return size: 0
define errlog_function
errlog_function_entry:
	r29 = fp
	// succ:  l00010D1C
l00010D1C:
	v4 = r29 - 8<i32>
	Mem0[v4:word32] = r30
	Mem0[v4 + 4<i32>:word32] = r31
	r30 = v4
	r29 = v4 - 8<i32>
	r4 = r3
	r3 = 0<32>
	Mem0[r29 + 1<i32>:byte] = r6
	r6 = r29 + 0x10<32>
	r5 = r29 + 0x10<32>
	call logv (retsize: 0;)
	r0 = Mem0[r0:word32]
	r0 = Mem0[r0:word32]
	r0 = Mem0[r0:word32]
	r0 = Mem0[r0:word32]
	// succ:  l00010D3C_thunk_pack_execute
l00010D3C_thunk_pack_execute:
	call pack_execute (retsize: 0;)
	return
	// succ:  errlog_function_exit
errlog_function_exit:


// pack_execute
// Return size: 0
define pack_execute
pack_execute_entry:
	r29 = fp
	// succ:  l00010D40
l00010D40:
	v4 = r29 - 8<i32>
	Mem0[v4:word32] = r30
	Mem0[v4 + 4<i32>:word32] = r31
	r30 = v4
	r29 = v4 - 56<i32>
	Mem0[r29 - 16<i32>:word64] = r17_r16
	r17 = r0
	r7 = r1
	Mem0[r29 + 8<i32>:word64] = r27_r26
	r3 = Mem0[r17 + 4<i32>:word32]
	r2 = Mem0[r17 + 8<i32>:word32]
	Mem0[r29 + 32<i32>:word64] = r21_r20
	Mem0[r29 + 40<i32>:word64] = r19_r18
	r19 = Mem0[r2:word32]
	r26 = Mem0[r3:word32]
	Mem0[r29 + 24<i32>:word64] = r23_r22
	r20 = Mem0[r17 + 16<i32>:word32]
	r2 = Mem0[r26 + 24<i32>:word32]
	r4 = r3 + 4<32>
	p0 = r20 > 1<32>
	Mem0[r29 + 16<i32>:word64] = r25_r24
	r21 = Mem0[r26 + 8<i32>:word32]
	r23 = Mem0[r26 + 4<i32>:word32]
	r25 = Mem0[r26:word32]
	r24 = r2
	r18 = Mem0[r19 + 16<i32>:word32]
	r22 = Mem0[r26 + 12<i32>:word32]
	r5 = r20 + 0xFFFFFFFF<32>
	branch p0 l00010E24
	// succ:  l00010D98 l00010E24
l00010D98:
	r24 = r2
	__loop(0<i32>, 0x00010DA0<p32>, r5)
	r5 = Mem0[r4:word32]
	r3 = 0x000262A0<p32>
	branch r6 == r25 l00010DBC
	// succ:  l00010DB8 l00010DBC
l00010DB8:
	r6 = Mem0[r5:word32]
	r1 = 0x42<32>
	// succ:  l00010DBC
l00010DBC:
	branch r6 == r23 l00010DD4
	// succ:  l00010DD0 l00010DD4
l00010DD0:
	r6 = Mem0[r5 + 4<i32>:word32]
	r3 = 0x000262A0<p32>
	r1 = 0x43<32>
	// succ:  l00010DD4
l00010DD4:
	branch r6 == r21 l00010DEC
	// succ:  l00010DE8 l00010DEC
l00010DE8:
	r6 = Mem0[r5 + 8<i32>:word32]
	r3 = 0x000262A0<p32>
	r1 = 0x44<32>
	// succ:  l00010DEC
l00010DEC:
	branch r6 == r22 l00010E04
	// succ:  l00010E00 l00010E04
l00010E00:
	r6 = Mem0[r5 + 12<i32>:word32]
	r3 = 0x000262A0<p32>
	r1 = 0x45<32>
	// succ:  l00010E04
l00010E04:
	branch r5 == r2 l00010E1C
	// succ:  l00010E18 l00010E1C
l00010E18:
	r5 = Mem0[r5 + 24<i32>:word32]
	r3 = 0x000262AA<p32>
	r1 = 0x46<32>
	// succ:  l00010E1C
l00010E1C:
	r24 = r24 + r2
	r4 = r4 + 4<32>
	// succ:  l00010E24
l00010E24:
	r1 = 0x4A<32>
	r3 = 0x000262B3<p32>
	branch r24 >u r4 l00010EC0
	// succ:  l00010E3C l00010EC0
l00010E3C:
	r4 = Mem0[r19 + 20<i32>:word32]
	Mem0[r29 + 4<i32>:word32] = r7
	r16 = 4<32>
	r27 = r20
	// succ:  l00010E48
l00010E48:
	r1 = Mem0[r26 + 16<i32>:word32]
	r0 = r18
	call fn00009560 (retsize: 0;)
	branch r27 == 0<32> l00010E74
	// succ:  l00010E64 l00010E74
l00010E64:
	r3 = Mem0[r26 + 24<i32>:word32]
	r27 = r27 + 0xFFFFFFFF<32>
	r26 = Mem0[r13 + r16:word32]
	r16 = r16 + 4<32>
	r2 = Mem0[r26 + 24<i32>:word32]
	goto l00010E48
	// succ:  l00010E48
l00010E74:
	r22 = r20 + 0<32>
	branch p0 l00010E98
	// succ:  l00010E7C l00010E98
l00010E7C:
	p0 = r14 == 1<32>
	r20 = r25
	// succ:  l00010E80
l00010E80:
	Mem0[r19 + 4<i32>:word32] = r23
	Mem0[r19 + 24<i32>:word32] = r24
	r0 = 0<32>
	Mem0[r19 + 8<i32>:word32] = r21
	Mem0[r19:word32] = r20
	Mem0[r19 + 12<i32>:word32] = r22
	goto l00010ECC
	// succ:  l00010ECC
l00010E98:
	r21 = r20 + 0<32>
	branch p0 l00010E7C
	// succ:  l00010EA0 l00010E7C
l00010EA0:
	p0 = r13 == 1<32>
	r23 = r20 + 0<32>
	branch p0 l00010E7C
	// succ:  l00010EA8 l00010E7C
l00010EA8:
	p0 = r15 == 1<32>
	r7 = Mem0[r29 + 4<i32>:word32]
	r1 = 0x56<32>
	r3 = 0x000262C1<p32>
	p0 = r25 == 1<32>
	branch p0 l00010E80
	// succ:  l00010EC0 l00010E80
l00010EC0:
	r2 = r7
	call errlog_function (retsize: 0;)
	r0 = 0xFFFFFFFF<32>
	// succ:  l00010ECC
l00010ECC:
	r19_r18 = Mem0[r29 + 40<i32>:word64]
	r17_r16 = Mem0[r29 + 48<i32>:word64]
	r23_r22 = Mem0[r29 + 24<i32>:word64]
	r21_r20 = Mem0[r29 + 32<i32>:word64]
	r27_r26 = Mem0[r29 + 8<i32>:word64]
	r25_r24 = Mem0[r29 + 16<i32>:word64]
	v36 = r30
	r31 = Mem0[v36 + 4<i32>:word32]
	r30 = Mem0[v36:word32]
	r29 = v36 + 8<i32>
	return
	// succ:  pack_execute_exit
pack_execute_exit:


// pack_check
// Return size: 0
define pack_check
pack_check_entry:
	r29 = fp
	// succ:  l00010EE0
l00010EE0:
	v4 = r29 - 8<i32>
	Mem0[v4:word32] = r30
	Mem0[v4 + 4<i32>:word32] = r31
	r30 = v4
	r29 = v4 - 16<i32>
	Mem0[r29 - 16<i32>:word64] = r17_r16
	r17 = r0
	r16 = r1
	Mem0[r29:word32] = r17
	r2 = r16
	call logmsg_function (retsize: 0;)
	branch r2 == 0<32> l00010F0C
	// succ:  l00010F04 l00010F0C
l00010F04:
	r2 = Mem0[r17 + 16<i32>:word32]
	r1 = 0x5F<32>
	goto l00010F28
	// succ:  l00010F28
l00010F0C:
	branch r2 == 1<32> l00010F30
	// succ:  l00010F20 l00010F30
l00010F20:
	r2 = Mem0[r17 + 20<i32>:word32]
	r0 = 0<32>
	r1 = 0x60<32>
	r3 = 0x00010F58<p32>
	r2 = r16
	call errlog_function (retsize: 0;)
	goto l00010F2C
	// succ:  l00010F2C
l00010F28:
	r2 = r16
	// succ:  l00010F2C
l00010F2C:
	r0 = 0xFFFFFFFF<32>
	// succ:  l00010F30
l00010F30:
	v15 = r30
	r31 = Mem0[v15 + 4<i32>:word32]
	r30 = Mem0[v15:word32]
	r29 = v15 + 8<i32>
	return
	// succ:  pack_check_exit
pack_check_exit:


// logmsg_function
// Return size: 0
define logmsg_function
logmsg_function_entry:
	r29 = fp
	// succ:  l00010F34
l00010F34:
	v4 = r29 - 8<i32>
	Mem0[v4:word32] = r30
	Mem0[v4 + 4<i32>:word32] = r31
	r30 = v4
	r29 = v4 - 8<i32>
	r4 = 2<32>
	branch r4 >u r3 l00010F64
	// succ:  l00010F44 l00010F64
l00010F44:
	r3 = Mem0[r2 + 16<i32>:word32]
	r5 = r29 + 0x10<32>
	r3 = 2<32>
	r0 = 0x00010F5D<p32>
	r6 = r29 + 0x10<32>
	r1 = 0x5E<32>
	r4 = 0x00026273<p32>
	Mem0[r29 + 4<i32>:word32] = r6
	call logv (retsize: 0;)
	// succ:  l00010F64
l00010F64:
	v15 = r30
	r31 = Mem0[v15 + 4<i32>:word32]
	r30 = Mem0[v15:word32]
	r29 = v15 + 8<i32>
	return
	// succ:  logmsg_function_exit
logmsg_function_exit:


// errlog_function
// Return size: 0
define errlog_function
errlog_function_entry:
	r29 = fp
	// succ:  l00010F68
l00010F68:
	v4 = r29 - 8<i32>
	Mem0[v4:word32] = r30
	Mem0[v4 + 4<i32>:word32] = r31
	r30 = v4
	r29 = v4 - 8<i32>
	r4 = r3
	r0 = 0x00026259<p32>
	Mem0[r29 + 1<i32>:byte] = r6
	r6 = r29 + 0x10<32>
	r5 = r29 + 0x10<32>
	r3 = 0<32>
	v13 = r30
	r31 = Mem0[v13 + 4<i32>:word32]
	r30 = Mem0[v13:word32]
	r29 = v13 + 8<i32>
	return
	// succ:  errlog_function_exit
errlog_function_exit:


// shape_execute
// Return size: 0
define shape_execute
shape_execute_entry:
	r29 = fp
	// succ:  l00010F90
l00010F90:
	v4 = r29 - 8<i32>
	Mem0[v4:word32] = r30
	Mem0[v4 + 4<i32>:word32] = r31
	r30 = v4
	r29 = v4 - 24<i32>
	Mem0[r29 - 16<i32>:word64] = r17_r16
	r4 = 0x00026347<p32>
	r1 = 0x31<32>
	r17_r16 = r1_r0
	Mem0[r29 + 8<i32>:word64] = r19_r18
	r3 = Mem0[r16 + 4<i32>:word32]
	r5 = Mem0[r16 + 8<i32>:word32]
	r2 = r17
	r19 = Mem0[r3:word32]
	Mem0[r29:word32] = r16
	r18 = Mem0[r5:word32]
	call logmsg_function (retsize: 0;)
	branch r2 >u 0xF<32> l00010FD8
	// succ:  l00010FC4 l00010FD8
l00010FC4:
	r2 = Mem0[r18 + 20<i32>:word32]
	r2 = r17
	r1 = 0x33<32>
	r3 = 0x00010FE3<p32>
	call errlog_function (retsize: 0;)
	r0 = 0xFFFFFFFF<32>
	goto l00011024
	// succ:  l00011024
l00010FD8:
	Mem0[r18 + 4<i32>:word32] = 1<32>
	r2 = Mem0[r18 + 16<i32>:word32]
	r4 = 0x0002636D<p32>
	Mem0[r18 + 12<i32>:word32] = 0xFFFFFF84<32>
	Mem0[r18:word32] = 1<32>
	r1 = 0x3B<32>
	Mem0[r18 + 8<i32>:word32] = 1<32>
	Mem0[r2:byte] = r3
	r3 = Mem0[r19:word32]
	Mem0[r7 + 4<i32>:word32] = r6
	r2 = Mem0[r19 + 8<i32>:word32]
	r3 = Mem0[r18 + 16<i32>:word32]
	Mem0[r3 + 8<i32>:word32] = r2
	r2 = r17
	r7 = Mem0[r19 + 12<i32>:word32]
	r5 = Mem0[r18 + 16<i32>:word32]
	Mem0[r18 + 24<i32>:word32] = 0x10<32>
	Mem0[r5 + 12<i32>:word32] = r7
	Mem0[r29:word32] = r16
	call logmsg_function (retsize: 0;)
	r0 = 0<32>
	// succ:  l00011024
l00011024:
	r19_r18 = Mem0[r29 + 8<i32>:word64]
	r17_r16 = Mem0[r29 + 16<i32>:word64]
	v23 = r30
	r31 = Mem0[v23 + 4<i32>:word32]
	r30 = Mem0[v23:word32]
	r29 = v23 + 8<i32>
	return
	// succ:  shape_execute_exit
shape_execute_exit:


// shape_check
// Return size: 0
define shape_check
shape_check_entry:
	r29 = fp
	// succ:  l00011030
l00011030:
	v4 = r29 - 8<i32>
	Mem0[v4:word32] = r30
	Mem0[v4 + 4<i32>:word32] = r31
	r30 = v4
	r29 = v4 - 16<i32>
	Mem0[r29 - 16<i32>:word64] = r17_r16
	r4 = 0x000262FF<p32>
	r17 = r0
	r16 = r1
	r1 = 0x41<32>
	Mem0[r29:word32] = r17
	r2 = r16
	call logmsg_function (retsize: 0;)
	branch r2 == 1<32> l00011070
	// succ:  l0001105C l00011070
l0001105C:
	r2 = Mem0[r17 + 16<i32>:word32]
	r1 = 0x42<32>
	r3 = 0x0001109A<p32>
	r2 = r16
	call errlog_function (retsize: 0;)
	// succ:  l00011064
l00011064:
	v16 = r30
	r31 = Mem0[v16 + 4<i32>:word32]
	r30 = Mem0[v16:word32]
	r29 = v16 + 8<i32>
	return
	// succ:  shape_check_exit
l00011070:
	branch r2 == 1<32> l00011088
	// succ:  l00011080 l00011088
l00011080:
	r2 = Mem0[r17 + 20<i32>:word32]
	r1 = 0x43<32>
	goto l00011064
	// succ:  l00011064
l00011088:
	r2 = r16
	r1 = 0x44<32>
	r4 = 0x00026335<p32>
	Mem0[r29:word32] = r17
	call logmsg_function (retsize: 0;)
	r0 = 0<32>
	v17 = r30
	r31 = Mem0[v17 + 4<i32>:word32]
	r30 = Mem0[v17:word32]
	r29 = v17 + 8<i32>
	return
	// succ:  shape_check_exit
shape_check_exit:


// logmsg_function
// Return size: 0
define logmsg_function
logmsg_function_entry:
	r29 = fp
	// succ:  l000110A8
l000110A8:
	v4 = r29 - 8<i32>
	Mem0[v4:word32] = r30
	Mem0[v4 + 4<i32>:word32] = r31
	r30 = v4
	r29 = v4 - 8<i32>
	r3 = 2<32>
	branch r3 >u r5 l000110CC
	// succ:  l000110B8 l000110CC
l000110B8:
	r5 = Mem0[r2 + 16<i32>:word32]
	r5 = r29 + 0x10<32>
	r3 = 2<32>
	r0 = 0x000110E8<p32>
	Mem0[r29 + 1<i32>:byte] = r6
	r6 = r29 + 0x10<32>
	call logv (retsize: 0;)
	// succ:  l000110C0_thunk_errlog_function
l000110C0_thunk_errlog_function:
	call errlog_function (retsize: 0;)
	return
	// succ:  logmsg_function_exit
l000110CC:
	v13 = r30
	r31 = Mem0[v13 + 4<i32>:word32]
	r30 = Mem0[v13:word32]
	r29 = v13 + 8<i32>
	return
	// succ:  logmsg_function_exit
logmsg_function_exit:


// errlog_function
// Return size: 0
define errlog_function
errlog_function_entry:
	r29 = fp
	// succ:  l000110D0
l000110D0:
	v4 = r29 - 8<i32>
	Mem0[v4:word32] = r30
	Mem0[v4 + 4<i32>:word32] = r31
	r30 = v4
	r29 = v4 - 8<i32>
	r4 = r3
	r0 = 0x000262E4<p32>
	Mem0[r29 + 1<i32>:byte] = r6
	r6 = r29 + 0x10<32>
	r5 = r29 + 0x10<32>
	r3 = 0<32>
	v13 = r30
	r31 = Mem0[v13 + 4<i32>:word32]
	r30 = Mem0[v13:word32]
	r29 = v13 + 8<i32>
	return
	// succ:  errlog_function_exit
errlog_function_exit:


// and_int32_execute
// Return size: 0
define and_int32_execute
and_int32_execute_entry:
	r29 = fp
	// succ:  l00011100
l00011100:
	// succ:  l00011100_thunk_broadcast_elementwise_execute_int32
l00011100_thunk_broadcast_elementwise_execute_int32:
	call broadcast_elementwise_execute_int32 (retsize: 0;)
	return
	// succ:  and_int32_execute_exit
and_int32_execute_exit:


// logical_int32_check
// Return size: 0
define logical_int32_check
logical_int32_check_entry:
	r29 = fp
	// succ:  l0001110C
l0001110C:
	v4 = r29 - 8<i32>
	Mem0[v4:word32] = r30
	Mem0[v4 + 4<i32>:word32] = r31
	r30 = v4
	r29 = v4 - 16<i32>
	Mem0[r29 - 16<i32>:word64] = r17_r16
	r4 = 0x0002645E<p32>
	r16 = r1
	r1 = 0x3E<32>
	r17 = r0
	Mem0[r29:word32] = r17
	r2 = r16
	r0 = 0x00026441<p32>
	call logmsg_function (retsize: 0;)
	branch r2 == 2<32> l0001115C
	// succ:  l00011140 l0001115C
l00011140:
	r2 = Mem0[r17 + 16<i32>:word32]
	r1 = 0x3F<32>
	r0 = 0x00011145<p32>
	r3 = 0x00026471<p32>
	// succ:  l0001114C
l0001114C:
	r2 = r16
	call errlog_function (retsize: 0;)
	v16 = r30
	r31 = Mem0[v16 + 4<i32>:word32]
	r30 = Mem0[v16:word32]
	r29 = v16 + 8<i32>
	return
	// succ:  logical_int32_check_exit
l0001115C:
	branch r2 == 1<32> l0001117C
	// succ:  l0001116C l0001117C
l0001116C:
	r2 = Mem0[r17 + 20<i32>:word32]
	r1 = 0x40<32>
	r0 = 0x00011185<p32>
	goto l0001114C
	// succ:  l0001114C
l0001117C:
	r2 = r16
	r1 = 0x41<32>
	r0 = 0x00026441<p32>
	Mem0[r29:word32] = r17
	call logmsg_function (retsize: 0;)
	r4 = 0x00026490<p32>
	r0 = 0<32>
	v17 = r30
	r31 = Mem0[v17 + 4<i32>:word32]
	r30 = Mem0[v17:word32]
	r29 = v17 + 8<i32>
	return
	// succ:  logical_int32_check_exit
logical_int32_check_exit:


// ior_int32_execute
// Return size: 0
define ior_int32_execute
ior_int32_execute_entry:
	r29 = fp
	// succ:  l000111A4
l000111A4:
	// succ:  l000111A4_thunk_broadcast_elementwise_execute_int32
l000111A4_thunk_broadcast_elementwise_execute_int32:
	call broadcast_elementwise_execute_int32 (retsize: 0;)
	return
	// succ:  ior_int32_execute_exit
ior_int32_execute_exit:


// xor_int32_execute
// Return size: 0
define xor_int32_execute
xor_int32_execute_entry:
	r29 = fp
	// succ:  l000111B0
l000111B0:
	// succ:  l000111B0_thunk_broadcast_elementwise_execute_int32
l000111B0_thunk_broadcast_elementwise_execute_int32:
	call broadcast_elementwise_execute_int32 (retsize: 0;)
	return
	// succ:  xor_int32_execute_exit
xor_int32_execute_exit:


// broadcast_elementwise_execute_int32
// Return size: 0
define broadcast_elementwise_execute_int32
broadcast_elementwise_execute_int32_entry:
	r29 = fp
	// succ:  l000111C0
l000111C0:
	v4 = r29 - 8<i32>
	Mem0[v4:word32] = r30
	Mem0[v4 + 4<i32>:word32] = r31
	r30 = v4
	r29 = v4 - 168<i32>
	Mem0[r29 - 48<i32>:word64] = r25_r24
	r25_r24 = r1_r0
	Mem0[r29 + 136<i32>:word64] = r23_r22
	r3 = Mem0[r24 + 4<i32>:word32]
	Mem0[r29 + 152<i32>:word64] = r19_r18
	r18 = r2
	r2 = 0<32>
	Mem0[r29 + 144<i32>:word64] = r21_r20
	Mem0[r29 + 160<i32>:word64] = r17_r16
	r23 = Mem0[r3:word32]
	r4 = Mem0[r24 + 8<i32>:word32]
	r19 = Mem0[r3 + 4<i32>:word32]
	Mem0[r29 + 120<i32>:word64] = r27_r26
	r12 = Mem0[r23 + 4<i32>:word32]
	r7 = Mem0[r19:word32]
	r0 = Mem0[r23:word32]
	p0 = r12 == 1<32>
	r21 = Mem0[r23 + 8<i32>:word32]
	r5 = Mem0[r19 + 4<i32>:word32]
	p1 = r0 == 1<32>
	Mem0[r29 + 104<i32>:word32] = r5
	r9 = Mem0[r19 + 8<i32>:word32]
	p2 = r21 == 1<32>
	r6 = p0 ? r5 : r12
	r8 = Mem0[r23 + 12<i32>:word32]
	r5 = p1 ? r7 : r0
	r10 = p1
	Mem0[r29 + 72<i32>:word32] = r7
	r0 = Mem0[r19 + 12<i32>:word32]
	p1 = r8 == 1<32>
	r3 = r5 * r6
	r17 = Mem0[r4:word32]
	r7 = p2 ? r9 : r21
	Mem0[r29 + 60<i32>:word32] = r12
	Mem0[r29 + 100<i32>:word32] = r10
	r10 = p2
	r3 = r3 * r7
	Mem0[r29 + 88<i32>:word32] = r6
	Mem0[r29 + 68<i32>:word32] = r5
	r16 = p1 ? r0 : r8
	Mem0[r29 + 108<i32>:word32] = r10
	Mem0[r29 + 64<i32>:word32] = r9
	r3 = r3 * r16
	Mem0[r29 + 92<i32>:word32] = r0
	Mem0[r29 + 112<i32>:word32] = r7
	Mem0[r29 + 84<i32>:word32] = r2
	r22 = r3 << 2<32>
	branch p0 l00011270
	// succ:  l00011268 l00011270
l00011268:
	r2 = r8 * r21
	Mem0[r29 + 84<i32>:word32] = r2
	// succ:  l00011270
l00011270:
	r2 = r25
	r1 = 0xBD<32>
	r0 = 0x0002637B<p32>
	Mem0[r29 + 96<i32>:word32] = r8
	r27 = Mem0[r17 + 16<i32>:word32]
	r4 = 0x0002639A<p32>
	r26 = Mem0[r23 + 16<i32>:word32]
	r20 = Mem0[r19 + 16<i32>:word32]
	Mem0[r29:word32] = r24
	call logmsg_function (retsize: 0;)
	branch r22 >u r2 l000112CC
	// succ:  l000112B0 l000112CC
l000112B0:
	r2 = Mem0[r17 + 20<i32>:word32]
	r1 = 0xBD<32>
	r2 = r25
	r0 = 0x000112BF<p32>
	r3 = 0x000263B8<p32>
	// succ:  l000112C0
l000112C0:
	call errlog_function (retsize: 0;)
	r0 = 0xFFFFFFFF<32>
	goto l00011564
	// succ:  l00011564
l000112CC:
	r5 = Mem0[r23:word32]
	r2 = Mem0[r19:word32]
	r7 = Mem0[r23 + 8<i32>:word32]
	r8 = Mem0[r23 + 12<i32>:word32]
	p0 = r5 == r2
	r12 = Mem0[r19 + 12<i32>:word32]
	r6 = Mem0[r23 + 4<i32>:word32]
	r3 = Mem0[r19 + 4<i32>:word32]
	r9 = Mem0[r19 + 8<i32>:word32]
	Mem0[r29 + 76<i32>:word32] = r26
	Mem0[r29 + 56<i32>:word32] = r22
	Mem0[r29 + 80<i32>:word32] = r20
	branch p0 l00011304
	// succ:  l000112FC l00011304
l000112FC:
	branch p0 l00011304
	// succ:  l00011300 l00011304
l00011300:
	p0 = r5 == 1<32>
	branch p0 l00011340
	// succ:  l00011304 l00011340
l00011304:
	p0 = r2 == 1<32>
	branch p0 l00011314
	// succ:  l0001130C l00011314
l0001130C:
	p0 = r6 == r3
	branch p0 l00011314
	// succ:  l00011310 l00011314
l00011310:
	p0 = r6 == 1<32>
	branch p0 l00011340
	// succ:  l00011314 l00011340
l00011314:
	p0 = r3 == 1<32>
	p0 = r7 == r9
	branch p0 l00011328
	// succ:  l0001131C l00011328
l0001131C:
	branch p0 l00011328
	// succ:  l00011320 l00011328
l00011320:
	p0 = r7 == 1<32>
	p0 = r9 == 1<32>
	branch p0 l00011340
	// succ:  l00011328 l00011340
l00011328:
	p0 = r8 == r12
	branch p0 l00011374
	// succ:  l00011330 l00011374
l00011330:
	p0 = r8 == 1<32>
	branch p0 l00011374
	// succ:  l00011338 l00011374
l00011338:
	p0 = r12 == 1<32>
	branch p0 l00011374
	// succ:  l00011340 l00011374
l00011340:
	Mem0[r29 + 28<i32>:word32] = r12
	r1 = 0xBD<32>
	r0 = 0x0002637B<p32>
	Mem0[r29 + 12<i32>:word32] = r8
	Mem0[r29 + 24<i32>:word32] = r9
	Mem0[r29 + 8<i32>:word32] = r7
	Mem0[r29 + 20<i32>:word32] = r3
	r3 = 0x000263C6<p32>
	Mem0[r29 + 4<i32>:word32] = r6
	Mem0[r29 + 16<i32>:word32] = r2
	r2 = r25
	Mem0[r29:word32] = r5
	goto l000112C0
	// succ:  l000112C0
l00011374:
	Mem0[r29 + 44<i32>:word32] = r16
	r23 = Mem0[r29 + 112<i32>:word64]
	r0 = 0x0002637B<p32>
	r19 = Mem0[r29 + 68<i32>:word32]
	r1 = 0xBD<32>
	r4 = 0x000263F6<p32>
	Mem0[r29 + 40<i32>:word32] = r23
	r20 = Mem0[r29 + 88<i32>:word64]
	Mem0[r29 + 32<i32>:word32] = r19
	Mem0[r29 + 36<i32>:word32] = r20
	Mem0[r29 + 28<i32>:word32] = r12
	Mem0[r29 + 52<i32>:word32] = r24
	Mem0[r29 + 24<i32>:word32] = r9
	Mem0[r29 + 48<i32>:word32] = r25
	Mem0[r29 + 8<i32>:word32] = r7
	Mem0[r29 + 20<i32>:word32] = r3
	Mem0[r29 + 4<i32>:word32] = r6
	Mem0[r29 + 16<i32>:word32] = r2
	r2 = r25
	Mem0[r29:word32] = r5
	Mem0[r29 + 12<i32>:word32] = r8
	call logmsg_function (retsize: 0;)
	r4 = Mem0[r29 + 80<i32>:word32]
	p0 = r19 > 0<32>
	r2 = Mem0[r29 + 56<i32>:word64]
	r5 = Mem0[r29 + 76<i32>:word64]
	Mem0[r17:word32] = r19
	Mem0[r17 + 24<i32>:word32] = r2
	Mem0[r17 + 8<i32>:word32] = r23
	Mem0[r17 + 4<i32>:word32] = r20
	Mem0[r17 + 12<i32>:word32] = r16
	branch p0 l0001153C
	// succ:  l000113DC l0001153C
l000113DC:
	r9 = Mem0[r29 + 64<i32>:word32]
	r2 = Mem0[r29 + 60<i32>:word32]
	r1 = 0<32>
	r0 = Mem0[r29 + 108<i32>:word64]
	r6 = Mem0[r29 + 104<i32>:word64]
	p0 = r9 == 1<32>
	r2 = r21 * r2
	r8 = Mem0[r29 + 92<i32>:word32]
	r7 = Mem0[r29 + 72<i32>:word32]
	r3 = r9 * r6
	r0 = Mem0[r29 + 100<i32>:word32]
	r13 = p0 ? 0<32> : r8
	p2 = r0
	r9 = r8 * r9
	Mem0[r29 + 64<i32>:word32] = r1
	r7 = Mem0[r29 + 96<i32>:word64]
	p1 = r7 == 1<32>
	r3 = r3 * r8
	r25 = !(r7 == 1<32>)
	r6 = 0<32>
	p2 = r6 == 1<32>
	r12 = p2 ? 0<32> : r7
	r9 = r6 + 0<32>
	r26 = !(r8 == 1<32>)
	p0 = r0
	r2 = r2 * r7
	Mem0[r29 + 72<i32>:word32] = r9
	Mem0[r29 + 108<i32>:word32] = r12
	r2 = r6 + 0<32>
	r3 = r6 + 0<32>
	Mem0[r29 + 60<i32>:word32] = r2
	Mem0[r29 + 104<i32>:word32] = r13
	Mem0[r29 + 56<i32>:word32] = r3
	// succ:  l00011458
l00011458:
	Mem0[r29 + 76<i32>:word32] = r5
	r2 = Mem0[r29 + 88<i32>:word64]
	r7_r6 = SEQ(0<32>, r5)
	r3 = r4
	Mem0[r29 + 80<i32>:word32] = r4
	p0 = r2 > 0<32>
	branch p0 l0001151C
	// succ:  l00011470 l0001151C
l00011470:
	branch r2 > 0<32> l00011484
	// succ:  l0001147C l00011484
l0001147C:
	r2 = Mem0[r29 + 112<i32>:word32]
	Mem0[r29 + 100<i32>:word32] = r3
	goto l000114FC
	// succ:  l000114FC
l00011484:
	r21 = r6
	r23 = 0<32>
	r19 = r3
	Mem0[r29 + 96<i32>:word32] = r6
	Mem0[r29 + 92<i32>:word32] = r7
	Mem0[r29 + 100<i32>:word32] = r3
	// succ:  l00011494
l00011494:
	r22 = r16
	r17 = r19
	r24 = r27
	r20 = r21
	branch p0 l000114E4
	// succ:  l000114A4 l000114E4
l000114A4:
	p0 = r8 > 0<32>
	// succ:  l000114C0
l000114C0:
	r1 = Mem0[r17:word32]
	r0 = Mem0[r20:word32]
	call r18 (retsize: 0;)
	r22 = r22 + 0xFFFFFFFF<32>
	p0 = r22 == 0<32>
	r17 = r17 + (r26 << 2<32>)
	r20 = r20 + (r25 << 2<32>)
	Mem0[r24:word32] = r0
	r24 = r24 + 4<i32>
	branch p0 l000114C0
	// succ:  l000114E0 l000114C0
l000114E0:
	r27 = r27 + (r16 << 2<32>)
	// succ:  l000114E4
l000114E4:
	r7 = Mem0[r29 + 104<i32>:word64]
	r2 = Mem0[r29 + 108<i32>:word64]
	r23 = r23 + 1<32>
	r21 = r21 + (r2 << 2<32>)
	branch r2 == r23 l00011494
	goto l00011500
	// succ:  l00011500 l00011494
l000114FC:
	r6 = Mem0[r29 + 96<i32>:word64]
	r2 = Mem0[r29 + 84<i32>:word64]
	r3 = Mem0[r29 + 100<i32>:word64]
	r5 = Mem0[r29 + 72<i32>:word64]
	r2 = Mem0[r29 + 88<i32>:word64]
	r7 = Mem0[r29 + 92<i32>:word64]
	r6 = r6 + (r2 << 2<32>)
	r5 = Mem0[r29 + 76<i32>:word64]
	r4 = Mem0[r29 + 80<i32>:word64]
	r3 = r3 + (r5 << 2<32>)
	branch r7 == r2 l00011470
	goto l00011520
	// succ:  l00011520 l00011470
l00011500:
	r2 = Mem0[r29 + 112<i32>:word32]
	r19 = r19 + (r7 << 2<32>)
	r3 = Mem0[r29 + 100<i32>:word64]
	r5 = Mem0[r29 + 72<i32>:word64]
	r2 = Mem0[r29 + 88<i32>:word64]
	r7 = Mem0[r29 + 92<i32>:word64]
	r6 = r6 + (r2 << 2<32>)
	r5 = Mem0[r29 + 76<i32>:word64]
	r4 = Mem0[r29 + 80<i32>:word64]
	r3 = r3 + (r5 << 2<32>)
	branch r7 == r2 l00011470
	goto l00011520
	// succ:  l00011520 l00011470
l0001151C:
	r7 = Mem0[r29 + 56<i32>:word64]
	r2 = Mem0[r29 + 60<i32>:word64]
	// succ:  l00011520
l00011520:
	r7 = r7 + 1<32>
	r3 = Mem0[r29 + 64<i32>:word32]
	r2 = Mem0[r29 + 68<i32>:word64]
	r3 = r3
	r4 = r4 + (r7 << 2<32>)
	r5 = r5 + (r2 << 2<32>)
	Mem0[r29 + 64<i32>:word32] = r3
	p0 = r3 == r2
	branch p0 l00011458
	// succ:  l0001153C l00011458
l0001153C:
	Mem0[r29:byte] = r2
	r2 = Mem0[r29 + 52<i32>:word32]
	r0 = 0x0002637B<p32>
	r2 = Mem0[r29 + 48<i32>:word32]
	r1 = 0xBD<32>
	r4 = 0x0001156A<p32>
	call logmsg_function (retsize: 0;)
	r0 = 0<32>
	// succ:  l00011564
l00011564:
	r19_r18 = Mem0[r29 + 152<i32>:word64]
	r17_r16 = Mem0[r29 + 160<i32>:word64]
	r23_r22 = Mem0[r29 + 136<i32>:word64]
	r21_r20 = Mem0[r29 + 144<i32>:word64]
	r27_r26 = Mem0[r29 + 120<i32>:word64]
	r25_r24 = Mem0[r29 + 128<i32>:word64]
	v42 = r30
	r31 = Mem0[v42 + 4<i32>:word32]
	r30 = Mem0[v42:word32]
	r29 = v42 + 8<i32>
	return
	// succ:  broadcast_elementwise_execute_int32_exit
broadcast_elementwise_execute_int32_exit:


// xor_helper
// Return size: 0
define xor_helper
xor_helper_entry:
	r29 = fp
	// succ:  l00011578
l00011578:
	return
	// succ:  xor_helper_exit
xor_helper_exit:


// logmsg_function
// Return size: 0
define logmsg_function
logmsg_function_entry:
	r29 = fp
	// succ:  l00011580
l00011580:
	v4 = r29 - 8<i32>
	Mem0[v4:word32] = r30
	Mem0[v4 + 4<i32>:word32] = r31
	r30 = v4
	r29 = v4 - 8<i32>
	r3 = 2<32>
	branch r3 >u r5 l000115A0
	// succ:  l00011590 l000115A0
l00011590:
	r5 = Mem0[r2 + 16<i32>:word32]
	Mem0[r29 + 1<i32>:byte] = r6
	r6 = r29 + 0x10<32>
	r5 = r29 + 0x10<32>
	// succ:  l000115A0
l000115A0:
	v11 = r30
	r31 = Mem0[v11 + 4<i32>:word32]
	r30 = Mem0[v11:word32]
	r29 = v11 + 8<i32>
	return
	// succ:  logmsg_function_exit
logmsg_function_exit:


// errlog_function
// Return size: 0
define errlog_function
errlog_function_entry:
	r29 = fp
	// succ:  l000115A4
l000115A4:
	v4 = r29 - 8<i32>
	Mem0[v4:word32] = r30
	Mem0[v4 + 4<i32>:word32] = r31
	r30 = v4
	r29 = v4 - 8<i32>
	r4 = r3
	r3 = 0<32>
	Mem0[r29 + 1<i32>:byte] = r6
	r6 = r29 + 0x10<32>
	r5 = r29 + 0x10<32>
	call logv (retsize: 0;)
	// succ:  l000115AC_thunk_ior_helper
l000115AC_thunk_ior_helper:
	call ior_helper (retsize: 0;)
	return
	// succ:  errlog_function_exit
errlog_function_exit:


// ior_helper
// Return size: 0
define ior_helper
ior_helper_entry:
	r29 = fp
	// succ:  l000115C0
l000115C0:
	return
	// succ:  ior_helper_exit
ior_helper_exit:


// and_helper
// Return size: 0
define and_helper
and_helper_entry:
	r29 = fp
	// succ:  l000115C8
l000115C8:
	return
	// succ:  and_helper_exit
and_helper_exit:


// avgpool_execute_asm
// Return size: 0
define avgpool_execute_asm
avgpool_execute_asm_entry:
	r29 = fp
	// succ:  l000115D0
l000115D0:
	// succ:  l000115D0_thunk_avgpool_execute
l000115D0_thunk_avgpool_execute:
	call avgpool_execute (retsize: 0;)
	return
	// succ:  avgpool_execute_asm_exit
avgpool_execute_asm_exit:


// avgpool_check
// Return size: 0
define avgpool_check
avgpool_check_entry:
	r29 = fp
	// succ:  l000115DC
l000115DC:
	v4 = r29 - 8<i32>
	Mem0[v4:word32] = r30
	Mem0[v4 + 4<i32>:word32] = r31
	r30 = v4
	r29 = v4 - 48<i32>
	Mem0[r29 - 16<i32>:word64] = r17_r16
	r4 = 0x00026526<p32>
	r17 = r0
	r16 = r1
	r1 = 0x186<32>
	Mem0[r29:word32] = r17
	Mem0[r29 + 32<i32>:word64] = r19_r18
	r3_r2 = SEQ(2<32>, r16)
	call logmsg_function (retsize: 0;)
	branch r2 == 5<32> l00011620
	// succ:  l0001160C l00011620
l0001160C:
	r2 = Mem0[r17 + 16<i32>:word32]
	r1 = 0x187<32>
	r3 = 0x00011643<p32>
	// succ:  l00011610
l00011610:
	r2 = r16
	call errlog_function (retsize: 0;)
	// succ:  l00011614
l00011614:
	r0 = 0xFFFFFFFF<32>
	goto l00011718
	// succ:  l00011718
l00011620:
	branch r2 == 3<32> l0001163C
	// succ:  l00011630 l0001163C
l00011630:
	r2 = Mem0[r17 + 20<i32>:word32]
	r1 = 0x18B<32>
	r1 = 0x188<32>
	goto l00011614
	// succ:  l00011614
l0001163C:
	Mem0[r29:word32] = r17
	r3_r2 = SEQ(3<32>, r16)
	r4 = 0x0002656B<p32>
	call logmsg_function (retsize: 0;)
	branch r2 == 0<32> l000116C4
l0001165C:
	r2 = Mem0[r17 + 4<i32>:word32]
	// succ:  l00011660 l000116C4
l00011660:
	r2 = Mem0[r17 + 16<i32>:word32]
	r19_r18 = 0<64>
	branch r2 == 0<32> l0001167C
	// succ:  l0001166C l0001167C
l0001166C:
	r2 = Mem0[r5 + r18:word32]
	Mem0[r29:word32] = r19
	r1 = 0x18E<32>
	r3 = 0x0001166C<p32>
	goto l00011610
	// succ:  l00011610
l0001167C:
	r6 = Mem0[r2 + 4<i32>:word32]
	r5 = Mem0[r2:word32]
	r4 = 0x000265EE<p32>
	r8 = Mem0[r2 + 12<i32>:word32]
	r7 = Mem0[r2 + 8<i32>:word32]
	r1 = 0x180<32>
	r2 = Mem0[r2 + 16<i32>:word32]
	r9 = Mem0[r2 + 24<i32>:word32]
	Mem0[r29 + 12<i32>:word32] = r7
	Mem0[r29 + 24<i32>:word32] = r2
	r3_r2 = SEQ(3<32>, r16)
	Mem0[r29 + 16<i32>:word32] = r8
	Mem0[r29 + 20<i32>:word32] = r9
	Mem0[r29 + 4<i32>:word32] = r5
	Mem0[r29 + 8<i32>:word32] = r6
	Mem0[r29:word32] = r19
	call logmsg_function (retsize: 0;)
	r2 = Mem0[r17 + 16<i32>:word32]
	r18 = r18 + 4<32>
	branch r2 >u r19 l0001165C
	goto l000116C8
	// succ:  l000116C8 l0001165C
l000116C4:
	branch r2 == 0<32> l000116FC
	goto l000116D0
	// succ:  l000116D0 l000116FC
l000116C8:
	r19 = r19 + 1<32>
	branch r2 == 0<32> l00011700
	// succ:  l000116D0 l00011700
l000116D0:
	r2 = Mem0[r17 + 20<i32>:word32]
	r3 = Mem0[r17 + 8<i32>:word32]
	branch r2 >u r4 l000116FC
l000116D8:
	branch r2 >u r4 l00011700
	// succ:  l000116E4 l000116FC l00011700
l000116E4:
	r4 = r4 + 1<32>
	r3 = r3 + 4<32>
	branch r5 == 0<32> l000116D8
	// succ:  l000116EC l000116D8
l000116EC:
	Mem0[r29:word32] = r4
	r1 = 0x194<32>
	r3 = 0x00011702<p32>
	goto l00011610
	// succ:  l00011610
l000116FC:
	r1 = 0x197<32>
	r3_r2 = SEQ(2<32>, r16)
	r4 = 0x000265D5<p32>
	goto l0001170C
	// succ:  l0001170C
l00011700:
	r1 = 0x197<32>
	r3_r2 = SEQ(2<32>, r16)
	r4 = 0x00011719<p32>
	// succ:  l0001170C
l0001170C:
	Mem0[r29:word32] = r17
	call logmsg_function (retsize: 0;)
	r0 = 0<32>
	// succ:  l00011718
l00011718:
	r19_r18 = Mem0[r29 + 32<i32>:word64]
	r17_r16 = Mem0[r29 + 40<i32>:word64]
	v18 = r30
	r31 = Mem0[v18 + 4<i32>:word32]
	r30 = Mem0[v18:word32]
	r29 = v18 + 8<i32>
	return
	// succ:  avgpool_check_exit
avgpool_check_exit:


// avgpool_execute_ref
// Return size: 0
define avgpool_execute_ref
avgpool_execute_ref_entry:
	r29 = fp
	// succ:  l00011720
l00011720:
	// succ:  l00011720_thunk_avgpool_execute
l00011720_thunk_avgpool_execute:
	call avgpool_execute (retsize: 0;)
	return
	// succ:  avgpool_execute_ref_exit
avgpool_execute_ref_exit:


// avgpool_execute
// Return size: 0
define avgpool_execute
avgpool_execute_entry:
	r29 = fp
	// succ:  l00011730
l00011730:
	v4 = r29 - 8<i32>
	Mem0[v4:word32] = r30
	Mem0[v4 + 4<i32>:word32] = r31
	r30 = v4
	r29 = v4 - 136<i32>
	Mem0[r29 - 16<i32>:word64] = r17_r16
	r17_r16 = r0_r1
	Mem0[r29 + 112<i32>:word64] = r21_r20
	r3 = Mem0[r17 + 4<i32>:word32]
	r4 = Mem0[r17 + 8<i32>:word32]
	r21 = Mem0[r17 + 32<i32>:int8]
	Mem0[r29 + 96<i32>:word64] = r25_r24
	Mem0[r29 + 88<i32>:word64] = r27_r26
	r25 = Mem0[r3 + 16<i32>:word32]
	r5 = Mem0[r3:word32]
	p0 = r21 == 0<32>
	Mem0[r29 + 8<i32>:word32] = r2
	r2 = Mem0[r3 + 8<i32>:word32]
	r26 = Mem0[r3 + 12<i32>:word32]
	r0 = p0
	Mem0[r29 + 24<i32>:word32] = r2
	r2 = Mem0[r3 + 4<i32>:word32]
	Mem0[r29 + 120<i32>:word64] = r19_r18
	Mem0[r29 + 104<i32>:word64] = r23_r22
	Mem0[r29 + 12<i32>:word32] = r2
	r27 = Mem0[r4:word32]
	r2 = Mem0[r5 + 8<i32>:word32]
	r23 = Mem0[r5:word32]
	r24 = Mem0[r5 + 12<i32>:word32]
	r20 = Mem0[r5 + 4<i32>:word32]
	r22 = Mem0[r25 + 4<i32>:word32]
	r1 = Mem0[r25 + 8<i32>:word32]
	r6 = Mem0[r4 + 4<i32>:word32]
	r18 = Mem0[r26 + 4<i32>:word32]
	r7 = Mem0[r4 + 8<i32>:word32]
	Mem0[r29 + 20<i32>:word32] = r7
	Mem0[r29 + 16<i32>:word32] = r6
	Mem0[r29 + 28<i32>:word32] = r0
	branch p0 l000117A4
	// succ:  l000117A0 l000117A4
l000117A0:
	goto l000117C8
	// succ:  l000117C8
l000117A4:
	r3 = Mem0[r26 + 8<i32>:word32]
	r2 = r1 + r2
	branch p0 l000117C4
	// succ:  l000117B0 l000117C4
l000117B0:
	p0 = r13 == 2<32>
	r0 = r1 + 0<32>
	r19 = 0<32>
	branch p0 l000117D0
	// succ:  l000117BC l000117D0
l000117BC:
	p0 = r13 == 1<32>
	goto l000117C8
	// succ:  l000117C8
l000117C4:
	r0 = r2 - r3
	// succ:  l000117C8
l000117C8:
	call fn00009760 (retsize: 0;)
	r19 = r0
	// succ:  l000117D0
l000117D0:
	r1 = r22 + 0<32>
	r2 = r22 + r20
	branch p0 l00011800
	// succ:  l000117DC l00011800
l000117DC:
	p0 = r13 == 2<32>
	r1_r0 = r22_r22
	branch p0 l000117F8
	// succ:  l000117E4 l000117F8
l000117E4:
	p0 = r13 == 1<32>
	r0 = Mem0[r29 + 28<i32>:word64]
	r21 = 0<32>
	r1_r0 = r22_r20
	branch p0 l0001180C
	// succ:  l000117F4 l0001180C
l000117F4:
	p0 = r0
	goto l00011804
	// succ:  l00011804
l000117F8:
	goto l00011804
	// succ:  l00011804
l00011800:
	r0 = r2 - r18
	// succ:  l00011804
l00011804:
	call fn00009760 (retsize: 0;)
	r21 = r0
	// succ:  l0001180C
l0001180C:
	Mem0[r29 + 32<i32>:word32] = r17
	r3_r2 = 0<64>
	r5 = r29 + 0x38<32>
	r4 = r29 + 0x20<32>
	Mem0[r4 + 4<i32>:word32] = 0xFFFFFF81<32>
	r22 = r5 + 8<32>
	r20 = r4 + 8<32>
	Mem0[r29 + 56<i32>:word64] = r3_r2
	Mem0[r29 + 64<i32>:word64] = r3_r2
	r1_r0 = SEQ(0<32>, r20)
	Mem0[r4 + 20<i32>:word32] = 0<32>
	Mem0[r29 + 72<i32>:word64] = r3_r2
	Mem0[r4 + 12<i32>:word32] = 0<32>
	Mem0[r4 + 16<i32>:word32] = 0<32>
	Mem0[r29 + 56<i32>:word32] = r17
	Mem0[r4 + 8<i32>:word32] = 0<32>
	call fn00009740 (retsize: 0;)
	r1_r0 = SEQ(0<32>, r22)
	call fn00009740 (retsize: 0;)
	r1 = 0x151<32>
	r3_r2 = SEQ(2<32>, r16)
	r4 = 0x000264C4<p32>
	Mem0[r29:word32] = r17
	call logmsg_function (retsize: 0;)
	branch r2 == 1<32> l0001187C
	// succ:  l00011868 l0001187C
l00011868:
	r2 = Mem0[r26:word32]
	branch r2 == 1<32> l00011880
	// succ:  l00011870 l00011880
l00011870:
	branch r2 == 1<32> l00011880
	// succ:  l00011878 l00011880
l00011878:
	branch r2 == 1<32> l0001189C
	goto l00011880
	// succ:  l00011880 l0001189C
l0001187C:
	r1 = 0x156<32>
	r3 = 0x000264DE<p32>
	goto l00011888
	// succ:  l00011888
l00011880:
	r1 = 0x156<32>
	r3 = 0x000118A2<p32>
	// succ:  l00011888
l00011888:
	r2 = r16
	call errlog_function (retsize: 0;)
	// succ:  l0001188C
l0001188C:
	r0 = 0xFFFFFFFF<32>
	goto l0001199C
	// succ:  l0001199C
l0001189C:
	r4 = Mem0[r27 + 20<i32>:word32]
	r1 = 0x158<32>
	r2 = r2 * r19
	branch r3 >u r4 l000118BC
	// succ:  l000118B4 l000118BC
l000118B4:
	r3 = r2 * r21
	goto l0001188C
	// succ:  l0001188C
l000118BC:
	branch r2 == 0<32> l000118D4
	// succ:  l000118CC l000118D4
l000118CC:
	r2 = Mem0[r17 + 32<i32>:int8]
	r1 = 0x159<32>
	goto l0001188C
	// succ:  l0001188C
l000118D4:
	Mem0[r27 + 4<i32>:word32] = r21
	r18 = Mem0[r29 + 8<i32>:word32]
	r2 = r29 + 0x20<32>
	Mem0[r27 + 12<i32>:word32] = r24
	Mem0[r27:word32] = r23
	r1_r0 = r18_r16
	Mem0[r27 + 24<i32>:word32] = r3
	Mem0[r27 + 8<i32>:word32] = r19
	call nn_os_work_for_vector (retsize: 0;)
	r0 = r16
	r1 = r29 + 0x38<32>
	call r18 (retsize: 0;)
	r0 = r20
	call fn000096A0 (retsize: 0;)
	r4 = Mem0[r29 + 16<i32>:word64]
	r5 = Mem0[r29 + 12<i32>:word64]
	r2 = Mem0[r5:word32]
	Mem0[r4 + 1<i32>:byte] = r3
	r3 = Mem0[r5 + 4<i32>:word32]
	r2 = Mem0[r5 + 8<i32>:word32]
	Mem0[r4 + 8<i32>:word32] = r2
	r7 = Mem0[r5 + 12<i32>:word32]
	Mem0[r4 + 12<i32>:word32] = r7
	r2 = Mem0[r5 + 24<i32>:word32]
	branch r2 >u r6 l00011944
	// succ:  l0001193C l00011944
l0001193C:
	r6 = Mem0[r4 + 20<i32>:word32]
	r1 = Mem0[r5 + 16<i32>:word32]
	r2 = Mem0[r5 + 24<i32>:word32]
	call fn00009560 (retsize: 0;)
	// succ:  l00011944
l00011944:
	r5 = Mem0[r29 + 20<i32>:word64]
	r4 = Mem0[r29 + 24<i32>:word64]
	r2 = Mem0[r4:word32]
	Mem0[r5 + 1<i32>:byte] = r3
	r3 = Mem0[r4 + 4<i32>:word32]
	r2 = Mem0[r4 + 8<i32>:word32]
	Mem0[r5 + 8<i32>:word32] = r2
	r7 = Mem0[r4 + 12<i32>:word32]
	Mem0[r5 + 12<i32>:word32] = r7
	r2 = Mem0[r4 + 24<i32>:word32]
	branch r2 >u r6 l00011980
	// succ:  l00011978 l00011980
l00011978:
	r6 = Mem0[r5 + 20<i32>:word32]
	r1 = Mem0[r4 + 16<i32>:word32]
	r2 = Mem0[r4 + 24<i32>:word32]
	call fn00009560 (retsize: 0;)
	// succ:  l00011980
l00011980:
	r1 = 0x165<32>
	r3_r2 = SEQ(2<32>, r16)
	r4 = 0x00026516<p32>
	Mem0[r29:word32] = r17
	call logmsg_function (retsize: 0;)
	r0 = 0<32>
	// succ:  l0001199C
l0001199C:
	r19_r18 = Mem0[r29 + 120<i32>:word64]
	r17_r16 = Mem0[r29 + 128<i32>:word64]
	r23_r22 = Mem0[r29 + 104<i32>:word64]
	r21_r20 = Mem0[r29 + 112<i32>:word64]
	r27_r26 = Mem0[r29 + 88<i32>:word64]
	r25_r24 = Mem0[r29 + 96<i32>:word64]
	v41 = r30
	r31 = Mem0[v41 + 4<i32>:word32]
	r30 = Mem0[v41:word32]
	r29 = v41 + 8<i32>
	return
	// succ:  avgpool_execute_exit
avgpool_execute_exit:


// avgpool_execute_slice_ref
// Return size: 0
define avgpool_execute_slice_ref
avgpool_execute_slice_ref_entry:
	r29 = fp
	goto l000119B0
	// succ:  l000119B0
l00009730_in_avgpool_execute_slice_ref:
	r14 = 0x0002B1B0<p32>
	r28 = Mem0[r14:word32]
	call r28 (retsize: 0;)
	return
	// succ:  avgpool_execute_slice_ref_exit
l000119B0:
	v4 = r29 - 8<i32>
	Mem0[v4:word32] = r30
	Mem0[v4 + 4<i32>:word32] = r31
	r30 = v4
	r29 = v4 - 184<i32>
	r3 = Mem0[r1 + 4<i32>:word32]
	r2 = Mem0[r1:word32]
	Mem0[r29 + 176<i32>:word64] = r17_r16
	Mem0[r29 + 168<i32>:word64] = r19_r18
	r19 = Mem0[r2 + 32<i32>:int8]
	r7 = Mem0[r2 + 4<i32>:word32]
	Mem0[r29 + 24<i32>:word32] = r3
	r2 = Mem0[r2 + 8<i32>:word32]
	r4 = Mem0[r7 + 16<i32>:word32]
	r16 = Mem0[r7:word32]
	p0 = r19 == 0<32>
	Mem0[r29 + 152<i32>:word64] = r23_r22
	r3 = Mem0[r7 + 12<i32>:word32]
	r5 = Mem0[r16 + 8<i32>:word32]
	Mem0[r29 + 144<i32>:word64] = r25_r24
	Mem0[r29 + 160<i32>:word64] = r21_r20
	Mem0[r29 + 136<i32>:word64] = r27_r26
	r20 = r5
	r0 = r5
	Mem0[r29 + 4<i32>:word32] = r1
	r27 = Mem0[r2:word32]
	r1 = p0
	r21 = Mem0[r4 + 4<i32>:word32]
	r17 = Mem0[r4 + 8<i32>:word32]
	r22 = Mem0[r16 + 4<i32>:word32]
	r25 = Mem0[r16 + 12<i32>:word32]
	r2 = r17 + r20
	r24 = Mem0[r3 + 8<i32>:word32]
	r23 = Mem0[r3 + 4<i32>:word32]
	Mem0[r29 + 5<i32>:byte] = r7
	r7 = Mem0[r16:word32]
	Mem0[r29 + 116<i32>:word32] = r1
	r0 = r2 - r24
	r26 = 0<32>
	branch p0 l00011A38
	// succ:  l00011A2C l00011A38
l00011A2C:
	p0 = r11 == 2<32>
	r0 = r17
	branch p0 l00011A44
	// succ:  l00011A34 l00011A44
l00011A34:
	p0 = r11 == 1<32>
	r0 = r0 + (r20 + 0xFFFFFFFF<32>)
	// succ:  l00011A38
l00011A38:
	r1 = r17
	call fn00009760 (retsize: 0;)
	r26 = r0
	// succ:  l00011A44
l00011A44:
	r1 = r21 + 0<32>
	branch p0 l00011A7C
	// succ:  l00011A4C l00011A7C
l00011A4C:
	p0 = r11 == 2<32>
	r1 = r21 + 0<32>
	branch p0 l00011A70
	// succ:  l00011A54 l00011A70
l00011A54:
	p0 = r11 == 1<32>
	Mem0[r29 + 18<i32>:byte] = r2
	r0 = Mem0[r29 + 116<i32>:word32]
	r2 = 0<32>
	r1_r0 = r21_r22
	branch p0 l00011A90
	// succ:  l00011A6C l00011A90
l00011A6C:
	goto l00011A84
	// succ:  l00011A84
l00011A70:
	r0 = r1
	goto l00011A84
	// succ:  l00011A84
l00011A7C:
	r2 = r1 + r22
	r0 = r2 - r23
	// succ:  l00011A84
l00011A84:
	call fn00009760 (retsize: 0;)
	Mem0[r29 + 72<i32>:word32] = r0
	branch r2 > 0<32> l00011D34
	goto l00011A9C
	// succ:  l00011A9C l00011D34
l00011A90:
	branch r2 > 0<32> l00011D38
	// succ:  l00011A9C l00011D38
l00011A9C:
	r2 = Mem0[r29 + 20<i32>:word32]
	r3 = r23 - r22
	r2 = Mem0[r29 + 72<i32>:word32]
	r5 = r24 - r20
	r4 = r26 + 0xFFFFFFFF<32>
	r7 = Mem0[r29 + 24<i32>:word64]
	r2 = r2
	r5 = r25 * r20
	r4 = r5 + r4 * r17
	Mem0[r29 + 44<i32>:word32] = r6
	Mem0[r29 + 128<i32>:word32] = r26
	r4 = r4 + (r4 >>u 0x1F<32>)
	r2 = r3 + r2 * r21
	r7 = 0xFFFFFFFF<32> - r22
	r2 = r2 + (r2 >>u 0x1F<32>)
	r3 = r7 * r21
	Mem0[r29 + 40<i32>:word32] = r7
	r7 = Mem0[r16 + 16<i32>:word32]
	r4 = r4 >> 1<32>
	r6 = r21 << 1<32>
	Mem0[r29 + 108<i32>:word32] = r7
	r26 = Mem0[r27 + 16<i32>:word32]
	r7 = 0<32>
	r1 = r2 >> 1<32>
	Mem0[r29 + 52<i32>:word32] = r22
	Mem0[r29 + 112<i32>:word32] = r5
	r5 = r5 * r22
	Mem0[r29 + 48<i32>:word32] = r23
	Mem0[r29 + 60<i32>:word32] = r6
	r6 = 0xFFFFFFFF<32> - r20
	Mem0[r29 + 124<i32>:word32] = r20
	Mem0[r29 + 28<i32>:word32] = r7
	r3 = r3 - r1
	r2 = r1 + (0x7F<32> - r3)
	Mem0[r29 + 12<i32>:word32] = r3
	r2 = r2 - r23
	r3 = 0<32> - r4
	r7 = r4 + (0x7F<32> - r24)
	Mem0[r29 + 80<i32>:word32] = r21
	Mem0[r29 + 120<i32>:word32] = r24
	Mem0[r29 + 16<i32>:word32] = r5
	Mem0[r29 + 96<i32>:word32] = r6
	Mem0[r29 + 116<i32>:word32] = r4
	Mem0[r29 + 76<i32>:word32] = r1
	Mem0[r29 + 32<i32>:word32] = r3
	Mem0[r29 + 36<i32>:word32] = r7
	Mem0[r29 + 8<i32>:word32] = r2
	// succ:  l00011B30
l00011B30:
	r2 = Mem0[r29 + 24<i32>:word32]
	branch r3 > r2 l00011D24
	// succ:  l00011B40 l00011D24
l00011B40:
	r3 = Mem0[r29 + 72<i32>:word32]
	Mem0[r29 + 92<i32>:word32] = r3
	r7 = Mem0[r29 + 12<i32>:word64]
	r3 = Mem0[r29 + 72<i32>:word64]
	r4 = Mem0[r29 + 112<i32>:word64]
	Mem0[r29 + 88<i32>:word32] = r7
	r5 = Mem0[r29 + 28<i32>:word64]
	r2 = SEQ(SLICE(r4, word16, 0), SLICE(r2, word16, 0))
	r6 = Mem0[r29 + 24<i32>:word64]
	r7 = Mem0[r29 + 16<i32>:word64]
	r1_r0 = r4_r2
	Mem0[r29 + 14<i32>:byte] = r3
	r3 = r5 * r3
	Mem0[r29 + 64<i32>:word64] = r1_r0
	Mem0[r29 + 100<i32>:word32] = r3
	goto l00011B90
	// succ:  l00011B90
l00011B70:
	r5 = Mem0[r29 + 72<i32>:word64]
	r6 = Mem0[r29 + 84<i32>:word64]
	r3 = Mem0[r29 + 88<i32>:word64]
	r2 = Mem0[r29 + 60<i32>:word64]
	p0 = r5 > r6
	r7 = Mem0[r29 + 92<i32>:word64]
	r3 = r3 + r2
	Mem0[r29 + 88<i32>:word32] = r3
	r4 = r7 - r2
	Mem0[r29 + 92<i32>:word32] = r4
	branch p0 l00011D24
	// succ:  l00011B90 l00011D24
l00011B90:
	r2 = r6
	r7 = Mem0[r29 + 76<i32>:word64]
	r3 = Mem0[r29 + 80<i32>:word64]
	r4 = r2 + 2<32>
	Mem0[r29 + 84<i32>:word32] = r4
	r5 = Mem0[r29 + 108<i32>:word64]
	r3 = r4 * r3
	r1_r0 = Mem0[r29 + 64<i32>:word64]
	r4 = Mem0[r29 + 112<i32>:word64]
	r3 = r3 - r7
	r3 = r5 + r3 * r4
	__l2fetch<word32,word64>(r3, r1_r0)
	branch r3 > 0<32> l00011B70
	// succ:  l00011BC4 l00011B70
l00011BC4:
	r3 = Mem0[r29 + 128<i32>:word32]
	r27 = 0<32>
	r4 = Mem0[r29 + 40<i32>:word64]
	r3 = Mem0[r29 + 80<i32>:word64]
	r18 = 0<32>
	r7 = Mem0[r29 + 56<i32>:word64]
	r5 = Mem0[r29 + 92<i32>:word64]
	r1 = Mem0[r29 + 48<i32>:word64]
	r7 = Mem0[r29 + 88<i32>:word64]
	r2 = r2 + r7
	r3 = r2 * r3
	r16 = Mem0[r29 + 32<i32>:word64]
	r5 = Mem0[r29 + 76<i32>:word64]
	r4 = max<int32>(r5, r4)
	r7 = Mem0[r29 + 44<i32>:word32]
	r4 = 0xFFFFFFFF<32> - r4
	r3 = r3 - r5
	r5 = max<int32>(r7, r6)
	r21 = Mem0[r29 + 36<i32>:word64]
	r3 = Mem0[r29 + 52<i32>:word64]
	r0 = r3 + r1
	r6 = max<int32>(r3, r6)
	r7 = Mem0[r29 + 124<i32>:word32]
	r22 = r4 - r5
	r23 = r7 * r2
	r2 = min<int32>(r3, r0)
	Mem0[r29 + 26<i32>:byte] = r1
	r20 = r2 - r6
	r1 = r6 * r7
	r3 = Mem0[r29 + 116<i32>:word64]
	r0 = 0x8000<32>
	r2 = Mem0[r29 + 124<i32>:word64]
	r3 = Mem0[r29 + 120<i32>:word64]
	r7 = r2 - r3
	r3 = r7 + r3
	r19 = max<int32>(r7, r18)
	r2 = min<int32>(r2, r3)
	r24 = r2 - r19
	call fn00009760 (retsize: 0;)
	r1 = r24 * r20
	p0 = r25 > 0<32>
	branch p0 l00011D0C
	// succ:  l00011C54 l00011D0C
l00011C54:
	r8 = r24 * r25
	r4 = Mem0[r29 + 104<i32>:word64]
	r2 = Mem0[r29 + 96<i32>:word64]
	r3 = r27 * r25
	r7 = max<int32>(r16, r18)
	r1 = Mem0[r29 + 112<i32>:word64]
	r4 = 0<32>
	r6 = r19 + r4
	r2 = Mem0[r29 + 108<i32>:word32]
	r9 = r6 * r25
	r5 = max<int32>(r21, r2)
	r8 = Mem0[r29 + 100<i32>:word32]
	r5 = r1 - r8
	r6 = 0xFFFFFFFF<32> - r5
	r6 = r6 - r7
	r12 = r6 - r7
	r2 = r2 + (r9 + r8)
	r7 = r25 * r12
	// succ:  l00011C90
l00011C90:
	r8 = 0<32>
	branch p0 l00011CE4
	// succ:  l00011C98 l00011CE4
l00011C98:
	p0 = r12 > 0<32>
	r9_r8 = SEQ(r2, 0<32>)
	__loop(1<i32>, 0x00011CA0<p32>, r22)
	p0 = r24 > 0<32>
	r12 = r9 + r4
	r14 = r6 + 0xFFFFFFFF<32>
	branch p0 l00011CD8
	// succ:  l00011CB0 l00011CD8
l00011CB0:
	p0 = r6 >u 1<32>
	__loop(0<i32>, 0x00011CC4<p32>, r14)
	r12 = Mem0[r12:byte]
	r13 = r12 + r25
	branch p0 l00011CD0
	// succ:  l00011CC4 l00011CD0
l00011CC4:
	r12 = Mem0[r13:byte]
	r13 = r13 + r25
	r8 = r12 + r8
	// succ:  l00011CD0
l00011CD0:
	r9 = r9 + r7
	r8 = r12 + r8
	// succ:  l00011CD8
l00011CD8:
	r9 = r9 + r5
	// succ:  l00011CE4
l00011CE4:
	r12 = r26
	r9 = r4 + r3
	r8 = 0x4000<32> + r8 * r0
	r4 = r4 + 1<32>
	r12 = r12 + (r9 + r23)
	p0 = r4 == r25
	r8 = r8 >>u 0xF<32>
	Mem0[r12:byte] = r8
	branch p0 l00011C90
	// succ:  l00011D0C l00011C90
l00011D0C:
	r2 = Mem0[r29 + 128<i32>:word32]
	r21 = r21 - r17
	r16 = r16 + r17
	branch r27 == r2 l00011B70
	// succ:  l00011D24 l00011B70
l00011D24:
	r27 = r27 + 1<32>
	r2 = Mem0[r29 + 20<i32>:word64]
	r3 = Mem0[r29 + 28<i32>:word64]
	r3 = r3 + 1<32>
	Mem0[r29 + 28<i32>:word32] = r3
	branch p0 l00011B30
	// succ:  l00011D34 l00011B30
l00011D34:
	r17_r16 = Mem0[r29 + 176<i32>:word64]
	r2 = Mem0[r29 + 4<i32>:word64]
	r1 = 1<32>
	goto l00011D3C
	// succ:  l00011D3C
l00011D38:
	r17_r16 = Mem0[r29 + 176<i32>:word64]
	r2 = Mem0[r29 + 4<i32>:word64]
	// succ:  l00011D3C
l00011D3C:
	r21_r20 = Mem0[r29 + 160<i32>:word64]
	r19_r18 = Mem0[r29 + 168<i32>:word64]
	r0 = r2 + 8<32>
	r25_r24 = Mem0[r29 + 144<i32>:word64]
	r23_r22 = Mem0[r29 + 152<i32>:word64]
	v44 = r30
	r31 = Mem0[v44 + 4<i32>:word32]
	r30 = Mem0[v44:word32]
	r29 = v44 + 8<i32>
	r27_r26 = Mem0[r29 + 136<i32>:word64]
	goto l00009730_in_avgpool_execute_slice_ref
	// succ:  l00009730_in_avgpool_execute_slice_ref
avgpool_execute_slice_ref_exit:


// logmsg_function
// Return size: 0
define logmsg_function
logmsg_function_entry:
	r29 = fp
	// succ:  l00011D58
l00011D58:
	v4 = r29 - 8<i32>
	Mem0[v4:word32] = r30
	Mem0[v4 + 4<i32>:word32] = r31
	r30 = v4
	r29 = v4 - 8<i32>
	branch r3 >u r5 l00011D78
	// succ:  l00011D68 l00011D78
l00011D68:
	r5 = Mem0[r2 + 16<i32>:word32]
	r6 = r29 + 0x10<32>
	r5 = r29 + 0x10<32>
	r0 = 0x00011D6B<p32>
	Mem0[r29 + 4<i32>:word32] = r6
	call logv (retsize: 0;)
	// succ:  l00011D78
l00011D78:
	v13 = r30
	r31 = Mem0[v13 + 4<i32>:word32]
	r30 = Mem0[v13:word32]
	r29 = v13 + 8<i32>
	return
	// succ:  logmsg_function_exit
logmsg_function_exit:


// errlog_function
// Return size: 0
define errlog_function
errlog_function_entry:
	r29 = fp
	// succ:  l00011D7C
l00011D7C:
	v4 = r29 - 8<i32>
	Mem0[v4:word32] = r30
	Mem0[v4 + 4<i32>:word32] = r31
	r30 = v4
	r29 = v4 - 8<i32>
	r4 = r3
	r0 = 0x000264A7<p32>
	Mem0[r29 + 1<i32>:byte] = r6
	r6 = r29 + 0x10<32>
	r5 = r29 + 0x10<32>
	r3 = 0<32>
	v13 = r30
	r31 = Mem0[v13 + 4<i32>:word32]
	r30 = Mem0[v13:word32]
	r29 = v13 + 8<i32>
	return
	// succ:  errlog_function_exit
errlog_function_exit:


// avgpool_execute_slice_asm
// Return size: 0
define avgpool_execute_slice_asm
avgpool_execute_slice_asm_entry:
	r29 = fp
	goto l00011DA0
	// succ:  l00011DA0
l00009730_in_avgpool_execute_slice_asm:
	r14 = 0x0002B1B0<p32>
	r28 = Mem0[r14:word32]
	call r28 (retsize: 0;)
	return
	// succ:  avgpool_execute_slice_asm_exit
l00011DA0:
	v4 = r29 - 8<i32>
	Mem0[v4:word32] = r30
	Mem0[v4 + 4<i32>:word32] = r31
	r30 = v4
	r29 = v4 - 152<i32>
	r3 = Mem0[r1 + 4<i32>:word32]
	r2 = Mem0[r1:word32]
	Mem0[r29 + 112<i32>:word64] = r25_r24
	Mem0[r29 + 136<i32>:word64] = r19_r18
	r18 = Mem0[r2 + 32<i32>:int8]
	r7 = Mem0[r2 + 4<i32>:word32]
	Mem0[r29 + 144<i32>:word64] = r17_r16
	r2 = Mem0[r2 + 8<i32>:word32]
	r4 = Mem0[r7 + 16<i32>:word32]
	r24 = Mem0[r7:word32]
	p0 = r18 == 0<32>
	Mem0[r29 + 28<i32>:word32] = r3
	r3 = Mem0[r7 + 12<i32>:word32]
	r17 = Mem0[r24 + 8<i32>:word32]
	Mem0[r29 + 104<i32>:word64] = r27_r26
	Mem0[r29 + 128<i32>:word64] = r21_r20
	r7 = Mem0[r24:word32]
	r16 = Mem0[r2:word32]
	r0 = r17
	r26 = Mem0[r4 + 8<i32>:word32]
	r2 = Mem0[r4 + 4<i32>:word32]
	r19 = Mem0[r24 + 4<i32>:word32]
	r20 = Mem0[r24 + 12<i32>:word32]
	Mem0[r29 + 24<i32>:word32] = r7
	Mem0[r29 + 12<i32>:word32] = r1
	r1 = p0
	Mem0[r29 + 80<i32>:word32] = r2
	r2 = Mem0[r3 + 4<i32>:word32]
	r7 = Mem0[r3 + 8<i32>:word32]
	Mem0[r29 + 48<i32>:word32] = r2
	Mem0[r29 + 120<i32>:word64] = r23_r22
	r2 = r26 + r17
	Mem0[r29 + 92<i32>:word32] = r1
	Mem0[r29 + 96<i32>:word32] = r7
	branch p0 l00011E34
	// succ:  l00011E14 l00011E34
l00011E14:
	r3 = Mem0[r29 + 96<i32>:word32]
	r0 = r26 + 0<32>
	branch p0 l00011E30
	// succ:  l00011E20 l00011E30
l00011E20:
	p0 = r10 == 2<32>
	r21 = 0<32>
	branch p0 l00011E40
	// succ:  l00011E28 l00011E40
l00011E28:
	p0 = r10 == 1<32>
	goto l00011E34
	// succ:  l00011E34
l00011E30:
	r0 = r2 - r3
	// succ:  l00011E34
l00011E34:
	r1 = r26
	call fn00009760 (retsize: 0;)
	r21 = r0
	// succ:  l00011E40
l00011E40:
	branch p0 l00011E70
	// succ:  l00011E48 l00011E70
l00011E48:
	p0 = r10 == 2<32>
	r1 = Mem0[r29 + 80<i32>:word32]
	branch p0 l00011E64
	// succ:  l00011E50 l00011E64
l00011E50:
	p0 = r10 == 1<32>
	r1 = Mem0[r29 + 92<i32>:word64]
	r0 = 0<32>
	branch p0 l00011E80
	// succ:  l00011E5C l00011E80
l00011E5C:
	p0 = r1
	r1 = Mem0[r29 + 80<i32>:word32]
	goto l00011E7C
	// succ:  l00011E7C
l00011E64:
	r0 = r1
	goto l00011E7C
	// succ:  l00011E7C
l00011E70:
	r3 = Mem0[r29 + 48<i32>:word64]
	r1 = Mem0[r29 + 80<i32>:word64]
	r2 = r1 + r19
	r0 = r2 - r3
	// succ:  l00011E7C
l00011E7C:
	call fn00009760 (retsize: 0;)
	// succ:  l00011E80
l00011E80:
	branch r2 > 0<32> l00012050
	// succ:  l00011E94 l00012050
l00011E94:
	r2 = Mem0[r29 + 24<i32>:word32]
	r6 = r21 * r20
	r7 = r20 * r17
	r5 = Mem0[r29 + 48<i32>:word64]
	r3 = Mem0[r29 + 96<i32>:word64]
	r4 = r0 + 0xFFFFFFFF<32>
	r1 = Mem0[r29 + 80<i32>:word32]
	r8 = r20 & 0x7F<32>
	r5 = r5 - r19
	r3 = r3 - r17
	r16 = Mem0[r24 + 16<i32>:word32]
	r3 = Mem0[r16 + 16<i32>:word32]
	r9 = 0<32>
	r2 = r3 + r2 * r26
	Mem0[r29 + 64<i32>:word32] = r7
	Mem0[r29 + 76<i32>:word32] = r21
	r5 = r0 * r21
	r4 = r5 + r4 * r1
	Mem0[r29 + 13<i32>:byte] = r1
	r1 = r6 << 1<32>
	r2 = r2 + (r2 >>u 0x1F<32>)
	Mem0[r29 + 44<i32>:word32] = r19
	r1 = Mem0[r29 + 28<i32>:word64]
	r4 = r4 + (r4 >>u 0x1F<32>)
	Mem0[r29 + 68<i32>:word32] = r0
	Mem0[r29 + 20<i32>:word32] = r5
	r2 = r2 >> 1<32>
	r5 = r7 * r19
	Mem0[r29 + 92<i32>:word32] = r8
	r2 = 0<32> - r2
	r3 = r4 >> 1<32>
	r6 = r3 + r6 * r1
	Mem0[r29 + 16<i32>:word32] = r5
	Mem0[r29 + 32<i32>:word32] = r9
	Mem0[r29 + 72<i32>:word32] = r3
	Mem0[r29 + 36<i32>:word32] = r6
	Mem0[r29 + 40<i32>:word32] = r2
	// succ:  l00011F0C
l00011F0C:
	r2 = Mem0[r29 + 28<i32>:word32]
	branch r3 > r2 l00012034
	// succ:  l00011F1C l00012034
l00011F1C:
	r3 = Mem0[r29 + 68<i32>:word32]
	r5 = Mem0[r29 + 16<i32>:word64]
	r7 = Mem0[r29 + 32<i32>:word64]
	r2 = SEQ(SLICE(r3, word16, 0), SLICE(r2, word16, 0))
	Mem0[r29 + 22<i32>:byte] = r4
	r4 = Mem0[r29 + 36<i32>:word32]
	r1_r0 = r3_r2
	r22 = r5 * r7
	goto l00011F54
	// succ:  l00011F54
l00011F3C:
	r7 = Mem0[r29 + 68<i32>:word64]
	r6 = Mem0[r29 + 84<i32>:word64]
	r3 = Mem0[r29 + 88<i32>:word64]
	r2 = Mem0[r29 + 52<i32>:word64]
	p0 = r7 > r6
	r3 = r3 + r2
	Mem0[r29 + 88<i32>:word32] = r3
	branch p0 l00012034
	// succ:  l00011F54 l00012034
l00011F54:
	r2 = r6
	r7 = Mem0[r29 + 72<i32>:word64]
	r3 = Mem0[r29 + 80<i32>:word64]
	r4 = r2 + 2<32>
	Mem0[r29 + 84<i32>:word32] = r4
	r1_r0 = Mem0[r29 + 56<i32>:word64]
	r3 = r4 * r3
	r4 = Mem0[r29 + 64<i32>:word32]
	r3 = r3 - r7
	r3 = r16 + r3 * r4
	__l2fetch<word32,word64>(r3, r1_r0)
	branch r3 > 0<32> l00011F3C
	// succ:  l00011F84 l00011F3C
l00011F84:
	r3 = Mem0[r29 + 76<i32>:word32]
	r19 = Mem0[r29 + 76<i32>:word64]
	r4 = Mem0[r29 + 48<i32>:word64]
	r21 = Mem0[r29 + 40<i32>:word32]
	r24 = Mem0[r29 + 88<i32>:word32]
	r3 = 0<32>
	r2 = r2 * r3
	r7 = Mem0[r29 + 44<i32>:word32]
	r2 = r2 - r7
	r2 = r2 + r4
	r3 = max<int32>(r2, r3)
	r18 = r3 * r17
	r2 = min<int32>(r7, r2)
	r25 = r2 - r3
	r2 = Mem0[r29 + 96<i32>:word64]
	r3 = 0<32>
	r23 = r26
	r2 = r2 + r21
	r0 = 0x8000<32>
	r27 = max<int32>(r21, r3)
	r2 = min<int32>(r17, r2)
	r26 = r2 - r27
	call fn00009760 (retsize: 0;)
	r1 = r26 * r25
	r1 = r16
	r2 = r27 + r18
	r5_r4 = r17_r25
	r2 = r2 * r20
	branch r3 == 0<32> l0001200C
	// succ:  l00011FF8 l0001200C
l00011FF8:
	r3 = Mem0[r29 + 92<i32>:word32]
	r1 = r1 + (r2 + r22)
	Mem0[r29:word32] = r0
	r0 = r24
	r3_r2 = r26_r20
	call avgpool_aligned_hvx (retsize: 0;)
	goto l0001201C
	// succ:  l0001201C
l0001200C:
	Mem0[r29:word32] = r0
	r0 = r24
	r3_r2 = r26_r20
	call avgpool_nonaligned_hvx (retsize: 0;)
	// succ:  l0001201C
l0001201C:
	r24 = r24 + r20
	r26 = r23
	branch r19 == 0<32> l00011F3C
	// succ:  l00012034 l00011F3C
l00012034:
	r7 = Mem0[r29 + 24<i32>:word64]
	r3 = Mem0[r29 + 32<i32>:word64]
	r4 = Mem0[r29 + 20<i32>:word64]
	r2 = Mem0[r29 + 36<i32>:word64]
	r3 = r3 + 1<32>
	Mem0[r29 + 32<i32>:word32] = r3
	r2 = r2 + r4
	p0 = r3 == r7
	Mem0[r29 + 36<i32>:word32] = r2
	branch p0 l00011F0C
	// succ:  l00012050 l00011F0C
l00012050:
	r17_r16 = Mem0[r29 + 144<i32>:word64]
	r2 = Mem0[r29 + 12<i32>:word64]
	r1 = 1<32>
	r21_r20 = Mem0[r29 + 128<i32>:word64]
	r19_r18 = Mem0[r29 + 136<i32>:word64]
	r0 = r2 + 8<32>
	r25_r24 = Mem0[r29 + 112<i32>:word64]
	r23_r22 = Mem0[r29 + 120<i32>:word64]
	v43 = r30
	r31 = Mem0[v43 + 4<i32>:word32]
	r30 = Mem0[v43:word32]
	r29 = v43 + 8<i32>
	r27_r26 = Mem0[r29 + 104<i32>:word64]
	goto l00009730_in_avgpool_execute_slice_asm
	// succ:  l00009730_in_avgpool_execute_slice_asm
avgpool_execute_slice_asm_exit:


// biasadd_8p8to32_execute
// Return size: 0
define biasadd_8p8to32_execute
biasadd_8p8to32_execute_entry:
	r29 = fp
	// succ:  l00012080
l00012080:
	v4 = r29 - 8<i32>
	Mem0[v4:word32] = r30
	Mem0[v4 + 4<i32>:word32] = r31
	r30 = v4
	r29 = v4 - 144<i32>
	r3 = Mem0[r0 + 8<i32>:word32]
	r2 = Mem0[r0 + 4<i32>:word32]
	Mem0[r29 + 92<i32>:word32] = r1
	Mem0[r29 + 136<i32>:word64] = r17_r16
	r4 = Mem0[r2 + 8<i32>:word32]
	r5 = Mem0[r2 + 12<i32>:word32]
	r6 = Mem0[r2:word32]
	r8 = Mem0[r2 + 16<i32>:word32]
	r17 = Mem0[r2 + 4<i32>:word32]
	r1 = Mem0[r2 + 20<i32>:word32]
	r5 = Mem0[r5 + 16<i32>:word32]
	r2 = Mem0[r4 + 16<i32>:word32]
	Mem0[r29 + 96<i32>:word64] = r27_r26
	Mem0[r29 + 120<i32>:word64] = r21_r20
	r27 = Mem0[r5:word32]
	r21 = Mem0[r2:word32]
	Mem0[r29 + 76<i32>:word32] = r0
	r0 = Mem0[r1 + 16<i32>:word32]
	Mem0[r29 + 128<i32>:word64] = r19_r18
	Mem0[r29 + 112<i32>:word64] = r23_r22
	r18 = 0x437F0000<32>
	r23 = r27 - r21
	r2 = Mem0[r3 + 8<i32>:word32]
	r7 = Mem0[r8 + 16<i32>:word32]
	r22 = Mem0[r0:word32]
	r19 = Mem0[r3:word32]
	r1_r0 = r18_r23
	Mem0[r29 + 72<i32>:word32] = r2
	r5 = Mem0[r3 + 4<i32>:word32]
	r2 = Mem0[r6 + 8<i32>:word32]
	Mem0[r29 + 68<i32>:word32] = r5
	Mem0[r29 + 104<i32>:word64] = r25_r24
	Mem0[r29 + 84<i32>:word32] = r2
	r5 = Mem0[r6 + 4<i32>:word32]
	r26 = Mem0[r6 + 16<i32>:word32]
	r2 = Mem0[r17 + 16<i32>:word32]
	r20 = Mem0[r6:word32]
	r24 = Mem0[r6 + 12<i32>:word32]
	Mem0[r29 + 88<i32>:word32] = r2
	Mem0[r29 + 80<i32>:word32] = r5
	r25 = Mem0[r19 + 16<i32>:word32]
	Mem0[r29 + 64<i32>:word32] = r22
	r16 = Mem0[r7:word32]
	call fn00009610 (retsize: 0;)
	r18 = r0
	r1 = r18
	r22 = r22 - r16
	r0 = r22
	call fn00009610 (retsize: 0;)
	r1 = 0x66<32>
	r3 = 0x000266C4<p32>
	branch r2 == 1<32> l000121C4
	// succ:  l00012130 l000121C4
l00012130:
	r2 = Mem0[r17 + 4<i32>:word32]
	r1 = 0x67<32>
	r3 = 0x00012148<p32>
	branch r2 == 1<32> l000121C4
	// succ:  l00012144 l000121C4
l00012144:
	r2 = Mem0[r17:word32]
	r1 = 0x68<32>
	r3 = 0x00012148<p32>
	branch r2 == 1<32> l000121C4
	// succ:  l00012158 l000121C4
l00012158:
	r2 = Mem0[r17 + 8<i32>:word32]
	Mem0[r29 + 60<i32>:word32] = r0
	r4 = Mem0[r17 + 12<i32>:word32]
	Mem0[r29 + 4<i32>:word32] = r24
	r2 = Mem0[r29 + 92<i32>:word32]
	p0 = r4 == r24
	branch p0 l00012180
	// succ:  l0001216C l00012180
l0001216C:
	Mem0[r29:word32] = r4
	r1 = 0x6A<32>
	r3 = 0x000266CF<p32>
	goto l000121C8
	// succ:  l000121C8
l00012180:
	r3 = Mem0[r29 + 84<i32>:word64]
	r2 = Mem0[r29 + 80<i32>:word64]
	r4 = 0x000266E7<p32>
	r2 = r20 * r2
	r2 = Mem0[r29 + 76<i32>:word32]
	r5 = r2 * r3
	Mem0[r29:word32] = r2
	r2 = Mem0[r29 + 92<i32>:word64]
	r3 = 2<32>
	r5 = r5 * r24
	call logmsg_function (retsize: 0;)
	r17 = r5 << 2<32>
	r1 = 0x6E<32>
	r0 = __clear_bit<word32,word32>(r21, 0x1E<32>)
	r3 = 0x00026701<p32>
	branch r17 >u r2 l000121D4
	goto l000121C8
	// succ:  l000121C8 l000121D4
l000121C4:
	r2 = Mem0[r29 + 92<i32>:word32]
	// succ:  l000121C8
l000121C8:
	call errlog_function (retsize: 0;)
	r0 = 0xFFFFFFFF<32>
	goto l00012470
	// succ:  l00012470
l000121D4:
	r7 = Mem0[r29 + 84<i32>:word64]
	r3 = Mem0[r29 + 80<i32>:word64]
	r1 = r27
	Mem0[r29 + 48<i32>:word32] = r19
	Mem0[r29 + 36<i32>:word32] = r1
	Mem0[r19 + 24<i32>:word32] = r17
	Mem0[r29 + 52<i32>:word32] = r20
	Mem0[r19 + 4<i32>:word32] = r3
	Mem0[r19:word32] = r20
	Mem0[r29 + 56<i32>:word32] = r24
	Mem0[r19 + 8<i32>:word32] = r7
	Mem0[r19 + 12<i32>:word32] = r24
	call fn00009600 (retsize: 0;)
	r20 = Mem0[r29 + 64<i32>:word64]
	r19 = r0
	r2 = __clear_bit<word32,word32>(r16, 0x1E<32>)
	r1_r0 = r20_r2
	call fn00009600 (retsize: 0;)
	r1_r0 = r0_r19
	call fn00009600 (retsize: 0;)
	r5 = 0xC8000000<32>
	r3 = 0x48000000<32>
	r4 = 0x2F800000<32>
	r2 = 0x38D1B717<32>
	Mem0[r29 + 10<i32>:byte] = r5
	r1_r0 = r23_r2
	r5 = r0 * r5
	r3 = r0 * r3
	Mem0[r29 + 32<i32>:word32] = r3
	call fn00009600 (retsize: 0;)
	r19 = r2 * r4
	r2 = 0x437F0000<32>
	r1_r0 = r0_r2
	call fn00009610 (retsize: 0;)
	Mem0[r29 + 44<i32>:word32] = r17
	r17 = 0<32>
	r2 = r17 - r21
	call fn00009620 (retsize: 0;)
	r0 = r2 * r0
	r0 = 0x38D1B717<32>
	r27 = r18
	r2 = truncf(CONVERT(r0, uint32, real32))
	r1 = r22
	r23 = 0<32>
	p1 = r2 > 0xFFFFFFFF<32>
	r18 = CONVERT(SLICE(r2, byte, 0), byte, uint32)
	r18 = 0xFF<32>
	p0 = r2 > 0xFF<32>
	r18 = r23 + 0<32>
	call fn00009600 (retsize: 0;)
	r2 = 0x437F0000<32>
	r1_r0 = r0_r2
	call fn00009610 (retsize: 0;)
	r2 = r17 - r16
	call fn00009620 (retsize: 0;)
	r0 = r2 * r0
	r1_r0 = r19_r27
	r2 = truncf(CONVERT(r0, uint32, real32))
	call fn00009610 (retsize: 0;)
	r17 = max<int32>(r2, r23)
	r19 = Mem0[r29 + 60<i32>:word64]
	r1 = r19
	r22 = r0
	r24 = r19
	r0 = r19
	call fn00009610 (retsize: 0;)
	r16 = Mem0[r29 + 92<i32>:word64]
	r2 = Mem0[r29 + 36<i32>:word64]
	r9_r8 = CONVERT(r16, real32, real64)
	r7_r6 = CONVERT(r20, real32, real64)
	r1 = 0x8C<32>
	r15_r14 = CONVERT(r21, real32, real64)
	r4 = 0x0002670F<p32>
	Mem0[r29 + 24<i32>:word64] = r7_r6
	r20 = r0
	r3_r2 = SEQ(9<32>, r16)
	r13_r12 = CONVERT(r2, real32, real64)
	Mem0[r29 + 8<i32>:word64] = r13_r12
	Mem0[r29 + 16<i32>:word64] = r9_r8
	Mem0[r29:word64] = r15_r14
	call logmsg_function (retsize: 0;)
	r1 = 0x8D<32>
	r3_r2 = SEQ(9<32>, r16)
	r9_r8 = CONVERT(r19, real32, real64)
	r7_r6 = CONVERT(r24, real32, real64)
	Mem0[r29 + 16<i32>:word64] = r7_r6
	r13_r12 = CONVERT(r27, real32, real64)
	r4 = 0x0002673D<p32>
	Mem0[r29:word64] = r13_r12
	Mem0[r29 + 8<i32>:word64] = r9_r8
	call logmsg_function (retsize: 0;)
	r12 = Mem0[r29 + 68<i32>:word32]
	r9_r8 = CONVERT(r22, real32, real64)
	r7_r6 = CONVERT(r20, real32, real64)
	r3 = Mem0[r29 + 40<i32>:word64]
	r5 = Mem0[r29 + 72<i32>:word64]
	r4 = 0x00026767<p32>
	r0 = Mem0[r29 + 48<i32>:word32]
	r1 = 0x99<32>
	Mem0[r12 + 12<i32>:word32] = 0xFFFFFF81<32>
	r2 = Mem0[r12 + 16<i32>:word32]
	Mem0[r12 + 4<i32>:word32] = 0xFFFFFF81<32>
	Mem0[r12 + 8<i32>:word32] = 1<32>
	Mem0[r2:word32] = r3
	Mem0[r12:word32] = 1<32>
	r13 = Mem0[r29 + 32<i32>:word32]
	r2 = Mem0[r5 + 16<i32>:word32]
	Mem0[r5 + 8<i32>:word32] = 1<32>
	Mem0[r5 + 4<i32>:word32] = 1<32>
	Mem0[r5 + 12<i32>:word32] = 1<32>
	Mem0[r5:word32] = 1<32>
	Mem0[r2:word32] = r13
	r21 = Mem0[r29 + 52<i32>:word32]
	r3_r2 = SEQ(9<32>, r16)
	r27 = Mem0[r29 + 80<i32>:word32]
	r19 = Mem0[r29 + 84<i32>:word32]
	r24 = Mem0[r29 + 56<i32>:word32]
	r13 = Mem0[r29 + 44<i32>:word32]
	Mem0[r0 + 8<i32>:word32] = r19
	Mem0[r0:word32] = r21
	Mem0[r0 + 24<i32>:word32] = r13
	Mem0[r0 + 4<i32>:word32] = r27
	Mem0[r12 + 24<i32>:word32] = 4<32>
	Mem0[r0 + 12<i32>:word32] = r24
	Mem0[r29 + 24<i32>:word64] = r7_r6
	Mem0[r5 + 24<i32>:word32] = 4<32>
	Mem0[r29 + 8<i32>:word64] = r9_r8
	Mem0[r29 + 16<i32>:word32] = r17
	Mem0[r29:word32] = r18
	call logmsg_function (retsize: 0;)
	r16 = r24
	r2 = r27 * r21
	r2 = r2 * r19
	Mem0[r29 + 84<i32>:word32] = r2
	p0 = r2 == 0<32>
	branch p0 l0001244C
	// succ:  l000123EC l0001244C
l000123EC:
	r19 = Mem0[r29 + 88<i32>:word32]
	r24 = r25
	r27 = r16
	r21 = r26
	branch p0 l00012438
	// succ:  l00012400 l00012438
l00012400:
	p0 = r8 == 0<32>
	r21 = r21 + 1<i32>
	r3 = Mem0[r21:byte]
	r19 = r19 + 1<i32>
	r2 = Mem0[r19:byte]
	r3 = r3 - r18
	r2 = r2 - r17
	r3 = CONVERT(r3, int32, real32)
	r2 = CONVERT(r2, int32, real32)
	r0 = r20 * r2
	r27 = r27 + 0xFFFFFFFF<32>
	call fn00009620 (retsize: 0;)
	r0 = r0 + r22 * r3
	Mem0[r24:word32] = r2
	r24 = r24 + 4<i32>
	p0 = r27 == 0<32>
	branch p0 l00012400
	goto l0001243C
	// succ:  l0001243C l00012400
l00012438:
	r2 = Mem0[r29 + 84<i32>:word32]
	r26 = r26 + r16
	r25 = r25 + (r16 << 2<32>)
	goto l00012444
	// succ:  l00012444
l0001243C:
	r2 = truncf(CONVERT(r0, uint32, real32))
	r2 = Mem0[r29 + 84<i32>:word32]
	r26 = r26 + r16
	// succ:  l00012444
l00012444:
	branch r23 == r2 l000123EC
	goto l00012450
	// succ:  l00012450 l000123EC
l0001244C:
	Mem0[r29:byte] = r2
	r2 = Mem0[r29 + 76<i32>:word32]
	r4 = 0x00026796<p32>
	goto l00012460
	// succ:  l00012460
l00012450:
	r23 = r23 + 1<32>
	Mem0[r29:byte] = r2
	r2 = Mem0[r29 + 76<i32>:word32]
	r4 = 0x0001245A<p32>
	// succ:  l00012460
l00012460:
	r1 = 0xAC<32>
	r2 = Mem0[r29 + 92<i32>:word32]
	call logmsg_function (retsize: 0;)
	r0 = 0<32>
	// succ:  l00012470
l00012470:
	r19_r18 = Mem0[r29 + 128<i32>:word64]
	r17_r16 = Mem0[r29 + 136<i32>:word64]
	r23_r22 = Mem0[r29 + 112<i32>:word64]
	r21_r20 = Mem0[r29 + 120<i32>:word64]
	r27_r26 = Mem0[r29 + 96<i32>:word64]
	r25_r24 = Mem0[r29 + 104<i32>:word64]
	v38 = r30
	r31 = Mem0[v38 + 4<i32>:word32]
	r30 = Mem0[v38:word32]
	r29 = v38 + 8<i32>
	return
	// succ:  biasadd_8p8to32_execute_exit
biasadd_8p8to32_execute_exit:


// biasadd_check
// Return size: 0
define biasadd_check
biasadd_check_entry:
	r29 = fp
	// succ:  l00012484
l00012484:
	v4 = r29 - 8<i32>
	Mem0[v4:word32] = r30
	Mem0[v4 + 4<i32>:word32] = r31
	r30 = v4
	r29 = v4 - 16<i32>
	Mem0[r29 - 16<i32>:word64] = r17_r16
	r4 = 0x00026639<p32>
	r17 = r0
	r16 = r1
	r1 = 0xB3<32>
	Mem0[r29:word32] = r17
	r3_r2 = SEQ(2<32>, r16)
	call logmsg_function (retsize: 0;)
	branch r2 == 6<32> l000124C8
	// succ:  l000124B0 l000124C8
l000124B0:
	r2 = Mem0[r17 + 16<i32>:word32]
	r1 = 0xB4<32>
	r3 = 0x000124D6<p32>
	// succ:  l000124B8
l000124B8:
	r2 = r16
	call errlog_function (retsize: 0;)
	v17 = r30
	r31 = Mem0[v17 + 4<i32>:word32]
	r30 = Mem0[v17:word32]
	r29 = v17 + 8<i32>
	return
	// succ:  biasadd_check_exit
l000124C8:
	r2 = Mem0[r17 + 20<i32>:word32]
	r1 = 0xB5<32>
	branch p0 l000124FC
	// succ:  l000124D4 l000124FC
l000124D4:
	p0 = r2 == 3<32>
	r2 = Mem0[r17 + 4<i32>:word32]
	r4 = 0<32>
	__loop(0<i32>, 0x000124E0<p32>, 6<32>)
	r3 = r2
	branch r5 == 0<32> l00012508
	// succ:  l000124EC l00012508
l000124EC:
	r5 = Mem0[r3:word32]
	Mem0[r29:word32] = r4
	r1 = 0xB8<32>
	r3 = 0x00012502<p32>
	goto l000124B8
	// succ:  l000124B8
l000124FC:
	goto l000124B8
	// succ:  l000124B8
l00012508:
	r4 = r4
	r3 = r3 + 4<32>
	goto l00012520
	// succ:  l00012520
l00012514:
	branch r4 >u 5<32> l0001253C
l00012518:
	branch r4 >u 5<32> l00012540
	// succ:  l00012524 l0001253C l00012540
l00012520:
	branch r3 == 0<32> l00012514
	goto l0001252C
	// succ:  l0001252C l00012514
l00012524:
	r4 = r4 + 1<32>
	r2 = r2 + 4<32>
	branch r3 == 0<32> l00012518
	// succ:  l0001252C l00012518
l0001252C:
	r3 = Mem0[r2:word32]
	Mem0[r29:word32] = r4
	r1 = 0xBD<32>
	r3 = 0x00012558<p32>
	goto l000124B8
	// succ:  l000124B8
l0001253C:
	r1 = 0xC0<32>
	r3_r2 = SEQ(2<32>, r16)
	r4 = 0x000266AB<p32>
	// succ:  l00012540
l00012540:
	Mem0[r29:word32] = r17
	call logmsg_function (retsize: 0;)
	r0 = 0<32>
	v20 = r30
	r31 = Mem0[v20 + 4<i32>:word32]
	r30 = Mem0[v20:word32]
	r29 = v20 + 8<i32>
	return
	// succ:  biasadd_check_exit
biasadd_check_exit:


// logmsg_function
// Return size: 0
define logmsg_function
logmsg_function_entry:
	r29 = fp
	// succ:  l0001255C
l0001255C:
	v4 = r29 - 8<i32>
	Mem0[v4:word32] = r30
	Mem0[v4 + 4<i32>:word32] = r31
	r30 = v4
	r29 = v4 - 8<i32>
	branch r3 >u r5 l0001257C
	// succ:  l0001256C l0001257C
l0001256C:
	r5 = Mem0[r2 + 16<i32>:word32]
	r6 = r29 + 0x10<32>
	r5 = r29 + 0x10<32>
	r0 = 0x000125A0<p32>
	Mem0[r29 + 4<i32>:word32] = r6
	call logv (retsize: 0;)
	// succ:  l0001257C
l0001257C:
	v13 = r30
	r31 = Mem0[v13 + 4<i32>:word32]
	r30 = Mem0[v13:word32]
	r29 = v13 + 8<i32>
	return
	// succ:  logmsg_function_exit
logmsg_function_exit:


// errlog_function
// Return size: 0
define errlog_function
errlog_function_entry:
	r29 = fp
	// succ:  l00012580
l00012580:
	v4 = r29 - 8<i32>
	Mem0[v4:word32] = r30
	Mem0[v4 + 4<i32>:word32] = r31
	r30 = v4
	r29 = v4 - 8<i32>
	r4 = r3
	r0 = 0x0002661C<p32>
	Mem0[r29 + 1<i32>:byte] = r6
	r6 = r29 + 0x10<32>
	r5 = r29 + 0x10<32>
	r3 = 0<32>
	v13 = r30
	r31 = Mem0[v13 + 4<i32>:word32]
	r30 = Mem0[v13:word32]
	r29 = v13 + 8<i32>
	return
	// succ:  errlog_function_exit
errlog_function_exit:


// check_execute
// Return size: 0
define check_execute
check_execute_entry:
	r29 = fp
	// succ:  l000125B0
l000125B0:
	v4 = r29 - 8<i32>
	Mem0[v4:word32] = r30
	Mem0[v4 + 4<i32>:word32] = r31
	r30 = v4
	r29 = v4 - 24<i32>
	Mem0[r29 - 16<i32>:word64] = r17_r16
	r4 = 0x0002681C<p32>
	r1 = 0x36<32>
	r17_r16 = r0_r1
	Mem0[r29 + 8<i32>:word64] = r19_r18
	r3 = Mem0[r17 + 4<i32>:word32]
	r2 = r16
	r18 = Mem0[r3:word32]
	Mem0[r29:word32] = r17
	r19 = Mem0[r3 + 4<i32>:word32]
	call logmsg_function (retsize: 0;)
	r4 = Mem0[r18:word32]
	r1 = 0x38<32>
	r3 = 0x00026834<p32>
	branch r2 == r4 l0001263C
	// succ:  l000125F0 l0001263C
l000125F0:
	r2 = Mem0[r19:word32]
	r4 = Mem0[r18 + 4<i32>:word32]
	r1 = 0x39<32>
	r3 = 0x0001261B<p32>
	branch r2 == r4 l0001263C
	// succ:  l00012604 l0001263C
l00012604:
	r2 = Mem0[r19 + 4<i32>:word32]
	r4 = Mem0[r18 + 8<i32>:word32]
	r1 = 0x3A<32>
	r3 = 0x0001263D<p32>
	branch r2 == r4 l0001263C
	// succ:  l00012618 l0001263C
l00012618:
	r2 = Mem0[r19 + 8<i32>:word32]
	r4 = Mem0[r18 + 12<i32>:word32]
	r1 = 0x3B<32>
	r3 = 0x0001261E<p32>
	branch r2 == r4 l0001263C
	// succ:  l0001262C l0001263C
l0001262C:
	r2 = Mem0[r19 + 12<i32>:word32]
	r4 = Mem0[r18 + 24<i32>:word32]
	r1 = 0x3C<32>
	r3 = 0x0001263F<p32>
	branch r2 == r4 l00012644
	goto l00012640
	// succ:  l00012640 l00012644
l0001263C:
	Mem0[r29:word32] = r4
	Mem0[r29 + 4<i32>:word32] = r2
	goto l00012664
	// succ:  l00012664
l00012640:
	r2 = Mem0[r19 + 24<i32>:word32]
	Mem0[r29:word32] = r4
	Mem0[r29 + 4<i32>:word32] = r2
	// succ:  l00012644
l00012644:
	r1 = Mem0[r19 + 16<i32>:word32]
	r0 = Mem0[r18 + 16<i32>:word32]
	r2 = r4
	call fn000097A0 (retsize: 0;)
	Mem0[r29:word32] = r17
	branch p0 l00012670
	// succ:  l00012658 l00012670
l00012658:
	p0 = r0 == 0<32>
	r2 = r16
	r1 = 0x3E<32>
	r3 = 0x000268DA<p32>
	// succ:  l00012664
l00012664:
	call errlog_function (retsize: 0;)
	r0 = 0xFFFFFFFF<32>
	goto l00012688
	// succ:  l00012688
l00012670:
	r2 = r16
	r1 = 0x40<32>
	r4 = 0x000268E8<p32>
	call logmsg_function (retsize: 0;)
	r0 = 0<32>
	// succ:  l00012688
l00012688:
	r19_r18 = Mem0[r29 + 8<i32>:word64]
	r17_r16 = Mem0[r29 + 16<i32>:word64]
	v22 = r30
	r31 = Mem0[v22 + 4<i32>:word32]
	r30 = Mem0[v22:word32]
	r29 = v22 + 8<i32>
	return
	// succ:  check_execute_exit
check_execute_exit:


// check_check
// Return size: 0
define check_check
check_check_entry:
	r29 = fp
	// succ:  l00012690
l00012690:
	v4 = r29 - 8<i32>
	Mem0[v4:word32] = r30
	Mem0[v4 + 4<i32>:word32] = r31
	r30 = v4
	r29 = v4 - 16<i32>
	Mem0[r29 - 16<i32>:word64] = r17_r16
	r4 = 0x000267C1<p32>
	r17 = r0
	r16 = r1
	r1 = 0x46<32>
	Mem0[r29:word32] = r17
	r2 = r16
	call logmsg_function (retsize: 0;)
	branch r2 == 2<32> l000126D0
	// succ:  l000126BC l000126D0
l000126BC:
	r2 = Mem0[r17 + 16<i32>:word32]
	r1 = 0x47<32>
	r3 = 0x000126DC<p32>
	r2 = r16
	call errlog_function (retsize: 0;)
	// succ:  l000126C4
l000126C4:
	v16 = r30
	r31 = Mem0[v16 + 4<i32>:word32]
	r30 = Mem0[v16:word32]
	r29 = v16 + 8<i32>
	return
	// succ:  check_check_exit
l000126D0:
	branch r2 == 0<32> l000126E8
	// succ:  l000126E0 l000126E8
l000126E0:
	r2 = Mem0[r17 + 20<i32>:word32]
	r1 = 0x48<32>
	goto l000126C4
	// succ:  l000126C4
l000126E8:
	r2 = r16
	r1 = 0x49<32>
	r4 = 0x00026805<p32>
	Mem0[r29:word32] = r17
	call logmsg_function (retsize: 0;)
	r0 = 0<32>
	v17 = r30
	r31 = Mem0[v17 + 4<i32>:word32]
	r30 = Mem0[v17:word32]
	r29 = v17 + 8<i32>
	return
	// succ:  check_check_exit
check_check_exit:


// logmsg_function
// Return size: 0
define logmsg_function
logmsg_function_entry:
	r29 = fp
	// succ:  l00012708
l00012708:
	v4 = r29 - 8<i32>
	Mem0[v4:word32] = r30
	Mem0[v4 + 4<i32>:word32] = r31
	r30 = v4
	r29 = v4 - 8<i32>
	r3 = 2<32>
	branch r3 >u r5 l0001272C
	// succ:  l00012718 l0001272C
l00012718:
	r5 = Mem0[r2 + 16<i32>:word32]
	r5 = r29 + 0x10<32>
	r3 = 2<32>
	r0 = 0x0001272A<p32>
	Mem0[r29 + 1<i32>:byte] = r6
	r6 = r29 + 0x10<32>
	call logv (retsize: 0;)
	// succ:  l00012720_thunk_errlog_function
l00012720_thunk_errlog_function:
	call errlog_function (retsize: 0;)
	return
	// succ:  logmsg_function_exit
l0001272C:
	v13 = r30
	r31 = Mem0[v13 + 4<i32>:word32]
	r30 = Mem0[v13:word32]
	r29 = v13 + 8<i32>
	return
	// succ:  logmsg_function_exit
logmsg_function_exit:


// errlog_function
// Return size: 0
define errlog_function
errlog_function_entry:
	r29 = fp
	// succ:  l00012730
l00012730:
	v4 = r29 - 8<i32>
	Mem0[v4:word32] = r30
	Mem0[v4 + 4<i32>:word32] = r31
	r30 = v4
	r29 = v4 - 8<i32>
	r4 = r3
	r0 = 0x000267A6<p32>
	Mem0[r29 + 1<i32>:byte] = r6
	r6 = r29 + 0x10<32>
	r5 = r29 + 0x10<32>
	r3 = 0<32>
	v13 = r30
	r31 = Mem0[v13 + 4<i32>:word32]
	r30 = Mem0[v13:word32]
	r29 = v13 + 8<i32>
	return
	// succ:  errlog_function_exit
errlog_function_exit:


// close_execute_f
// Return size: 0
define close_execute_f
close_execute_f_entry:
	r29 = fp
	// succ:  l00012760
l00012760:
	v4 = r29 - 8<i32>
	Mem0[v4:word32] = r30
	Mem0[v4 + 4<i32>:word32] = r31
	r30 = v4
	r29 = v4 - 120<i32>
	Mem0[r29 - 16<i32>:word64] = r17_r16
	r17_r16 = r0_r1
	r4 = 3<32>
	Mem0[r29 + 104<i32>:word64] = r19_r18
	r2 = Mem0[r17 + 4<i32>:word32]
	r3 = Mem0[r17 + 16<i32>:word32]
	Mem0[r29 + 88<i32>:word64] = r23_r22
	Mem0[r29 + 96<i32>:word64] = r21_r20
	p0 = r4 >u r3
	r19 = Mem0[r2:word32]
	r18 = Mem0[r2 + 4<i32>:word32]
	Mem0[r29 + 72<i32>:word64] = r27_r26
	Mem0[r29 + 80<i32>:word64] = r25_r24
	r24 = 0x3D4CCCCD<32>
	r22 = Mem0[r18 + 16<i32>:word32]
	r5 = Mem0[r18 + 24<i32>:word32]
	r2 = Mem0[r2 + 8<i32>:word32]
	r20 = Mem0[r19 + 16<i32>:word32]
	r2 = Mem0[r2 + 16<i32>:word32]
	branch p0 l000127AC
	// succ:  l000127A8 l000127AC
l000127A8:
	r21 = r5 >>u 2<32>
	r24 = Mem0[r2:word32]
	// succ:  l000127AC
l000127AC:
	r1 = 0x61<32>
	r3_r2 = SEQ(2<32>, r16)
	r4 = 0x00026B23<p32>
	Mem0[r29:word32] = r17
	call logmsg_function (retsize: 0;)
	r4 = Mem0[r19:word32]
	r1 = 0x64<32>
	r3 = 0x0002698D<p32>
	branch r2 == r4 l00012868
	// succ:  l000127E0 l00012868
l000127E0:
	r2 = Mem0[r18:word32]
	r4 = Mem0[r19 + 4<i32>:word32]
	r1 = 0x65<32>
	r3 = 0x000127F5<p32>
	branch r2 == r4 l00012868
	// succ:  l000127F8 l00012868
l000127F8:
	r2 = Mem0[r18 + 4<i32>:word32]
	r4 = Mem0[r19 + 8<i32>:word32]
	r1 = 0x66<32>
	r3 = 0x00012818<p32>
	branch r2 == r4 l00012868
	// succ:  l00012810 l00012868
l00012810:
	r2 = Mem0[r18 + 8<i32>:word32]
	r4 = Mem0[r19 + 12<i32>:word32]
	r1 = 0x67<32>
	r3 = 0x0001283A<p32>
	branch r2 == r4 l00012868
	// succ:  l00012828 l00012868
l00012828:
	r2 = Mem0[r18 + 12<i32>:word32]
	r4 = Mem0[r19 + 24<i32>:word32]
	r1 = 0x68<32>
	r3 = 0x0001285C<p32>
	branch r2 == r4 l00012868
	// succ:  l00012848 l00012868
l00012848:
	r2 = Mem0[r18 + 24<i32>:word32]
	r25 = 0<32>
	p0 = r21 == 0<32>
	Mem0[r29 + 68<i32>:word32] = r26
	r27 = r22 + 0<32>
	r26 = 0<32>
	r19_r18 = r26_r26
	r19_r18 = r26_r26
	Mem0[r29 + 68<i32>:word32] = r20
	Mem0[r29 + 64<i32>:word32] = r22
	goto l000128C0
	// succ:  l000128C0
l00012868:
	Mem0[r29:word32] = r4
	Mem0[r29 + 4<i32>:word32] = r2
	r2 = r16
	// succ:  l00012870
l00012870:
	call errlog_function (retsize: 0;)
	r0 = 0xFFFFFFFF<32>
	goto l00012940
	// succ:  l00012940
l000128C0:
	r2 = r19 - r18
	r3 = r24 * r2
	Mem0[r29:word32] = r17
	r1 = 0x7C<32>
	branch p0 l0001292C
	// succ:  l000128D8 l0001292C
l000128D8:
	p0 = r26 > r3
	r5 = Mem0[r29 + 68<i32>:word64]
	r4 = Mem0[r29 + 64<i32>:word64]
	r9_r8 = CONVERT(r2, real32, real64)
	r7_r6 = CONVERT(r3, real32, real64)
	r1 = 0x7A<32>
	r13_r12 = CONVERT(r26, real32, real64)
	r3 = 0x00026B47<p32>
	r5 = r5 + (r25 << 2<32>)
	r4 = r4 + (r25 << 2<32>)
	r4 = Mem0[r4:word32]
	Mem0[r29 + 56<i32>:word64] = r7_r6
	r2 = Mem0[r5:word32]
	r5_r4 = CONVERT(r4, real32, real64)
	Mem0[r29 + 24<i32>:word64] = r5_r4
	Mem0[r29 + 48<i32>:word64] = r9_r8
	Mem0[r29 + 4<i32>:word32] = r21
	r2 = r16
	r7_r6 = CONVERT(r2, real32, real64)
	Mem0[r29 + 32<i32>:word64] = r5_r4
	Mem0[r29 + 40<i32>:word64] = r13_r12
	Mem0[r29 + 8<i32>:word64] = r7_r6
	Mem0[r29 + 16<i32>:word64] = r7_r6
	Mem0[r29:word32] = r25
	goto l00012870
	// succ:  l00012870
l0001292C:
	r3_r2 = SEQ(2<32>, r16)
	r4 = 0x00026AE4<p32>
	call logmsg_function (retsize: 0;)
	r0 = 0<32>
	// succ:  l00012940
l00012940:
	r19_r18 = Mem0[r29 + 104<i32>:word64]
	r17_r16 = Mem0[r29 + 112<i32>:word64]
	r23_r22 = Mem0[r29 + 88<i32>:word64]
	r21_r20 = Mem0[r29 + 96<i32>:word64]
	r27_r26 = Mem0[r29 + 72<i32>:word64]
	r25_r24 = Mem0[r29 + 80<i32>:word64]
	v39 = r30
	r31 = Mem0[v39 + 4<i32>:word32]
	r30 = Mem0[v39:word32]
	r29 = v39 + 8<i32>
	return
	// succ:  close_execute_f_exit
close_execute_f_exit:


// close_check_f
// Return size: 0
define close_check_f
close_check_f_entry:
	r29 = fp
	// succ:  l00012954
l00012954:
	v4 = r29 - 8<i32>
	Mem0[v4:word32] = r30
	Mem0[v4 + 4<i32>:word32] = r31
	r30 = v4
	r29 = v4 - 16<i32>
	Mem0[r29 - 16<i32>:word64] = r17_r16
	r4 = 0x00026AF5<p32>
	r17 = r0
	r16 = r1
	r1 = 0xF6<32>
	Mem0[r29:word32] = r17
	r3_r2 = SEQ(2<32>, r16)
	call logmsg_function (retsize: 0;)
	branch r2 >u 1<32> l00012998
	// succ:  l00012984 l00012998
l00012984:
	r2 = Mem0[r17 + 16<i32>:word32]
	r1 = 0xF7<32>
	r3 = 0x000129B1<p32>
	r2 = r16
	call errlog_function (retsize: 0;)
	// succ:  l0001298C
l0001298C:
	v17 = r30
	r31 = Mem0[v17 + 4<i32>:word32]
	r30 = Mem0[v17:word32]
	r29 = v17 + 8<i32>
	return
	// succ:  close_check_f_exit
l00012998:
	branch r3 >u r2 l000129B0
	// succ:  l000129A8 l000129B0
l000129A8:
	r3 = 4<32>
	r1 = 0xF8<32>
	goto l0001298C
	// succ:  l0001298C
l000129B0:
	branch r2 == 0<32> l000129C8
	// succ:  l000129C0 l000129C8
l000129C0:
	r2 = Mem0[r17 + 20<i32>:word32]
	r1 = 0xF9<32>
	goto l0001298C
	// succ:  l0001298C
l000129C8:
	r1 = 0xFA<32>
	r3_r2 = SEQ(2<32>, r16)
	r4 = 0x00026B0C<p32>
	Mem0[r29:word32] = r17
	call logmsg_function (retsize: 0;)
	r0 = 0<32>
	v18 = r30
	r31 = Mem0[v18 + 4<i32>:word32]
	r30 = Mem0[v18:word32]
	r29 = v18 + 8<i32>
	return
	// succ:  close_check_f_exit
close_check_f_exit:


// close_execute_i32
// Return size: 0
define close_execute_i32
close_execute_i32_entry:
	r29 = fp
	// succ:  l000129E8
l000129E8:
	// succ:  l000129E8_thunk_close_execute
l000129E8_thunk_close_execute:
	call close_execute (retsize: 0;)
	return
	// succ:  close_execute_i32_exit
close_execute_i32_exit:


// close_check
// Return size: 0
define close_check
close_check_entry:
	r29 = fp
	// succ:  l000129F4
l000129F4:
	// succ:  l000129F4_thunk_close_check__merged
l000129F4_thunk_close_check__merged:
	call close_check__merged (retsize: 0;)
	return
	// succ:  close_check_exit
close_check_exit:


// close_check__merged
// Return size: 0
define close_check__merged
close_check__merged_entry:
	r29 = fp
	goto l00012A00
	// succ:  l00012A00
l000104CC_thunk_prod_f_execute:
	call prod_f_execute (retsize: 0;)
	return
	// succ:  close_check__merged_exit
l00012A00:
	v4 = r29 - 8<i32>
	Mem0[v4:word32] = r30
	Mem0[v4 + 4<i32>:word32] = r31
	r30 = v4
	r29 = v4 - 32<i32>
	p0 = r2 == 1<32>
	r4 = 0x00026914<p32>
	r6 = 6<32>
	r5 = 0xED<32>
	r7 = 0x00026AF5<p32>
	Mem0[r29 + 16<i32>:word64] = r19_r18
	Mem0[r29 + 24<i32>:word64] = r17_r16
	r16 = r1
	r8 = 2<32>
	r1 = p0 ? 0x100<32> : r5
	r4 = r7 + 0<32>
	r3_r2 = SEQ(2<32>, r16)
	Mem0[r29 + 2<i32>:byte] = r19
	r17 = r0
	r19 = p0
	Mem0[r29:word32] = r17
	r18 = p0 ? r6 : r8
	branch r2 == r18 l00012A74
	goto l00012A5C
	// succ:  l00012A5C l00012A74
l00012A00:
	goto l000104CC_thunk_prod_f_execute
	// succ:  l000104CC_thunk_prod_f_execute
l00012A5C:
	r2 = Mem0[r17 + 16<i32>:word32]
	r0 = Mem0[r29 + 8<i32>:word64]
	r2 = r16
	r3 = 0x00012A71<p32>
	r1 = 0xEE<32>
	r1 = 0x101<32>
	goto l00012A9C
	// succ:  l00012A9C
l00012A74:
	r0 = Mem0[r29 + 8<i32>:word32]
	branch r2 == 0<32> l00012AB4
	// succ:  l00012A88 l00012AB4
l00012A88:
	r2 = Mem0[r17 + 20<i32>:word32]
	p1 = r0
	r1 = 0xEF<32>
	r1 = 0x102<32>
	r3 = 0x00026943<p32>
	r2 = r16
	// succ:  l00012A9C
l00012A9C:
	call errlog_function (retsize: 0;)
	r0 = 0xFFFFFFFF<32>
	goto l00012AE8
	// succ:  l00012AE8
l00012AB4:
	branch p1 l00012ACC
	// succ:  l00012AB8 l00012ACC
l00012AB8:
	r1 = 0xF0<32>
	r3 = 2<32>
	r4 = 0x00026B0C<p32>
	goto l00012ADC
	// succ:  l00012ADC
l00012ACC:
	r1 = 0x103<32>
	r3 = 2<32>
	r4 = 0x0002695A<p32>
	// succ:  l00012ADC
l00012ADC:
	Mem0[r29:word32] = r17
	r2 = r16
	call logmsg_function (retsize: 0;)
	r0 = 0<32>
	// succ:  l00012AE8
l00012AE8:
	r19_r18 = Mem0[r29 + 16<i32>:word64]
	r17_r16 = Mem0[r29 + 24<i32>:word64]
	v26 = r30
	r31 = Mem0[v26 + 4<i32>:word32]
	r30 = Mem0[v26:word32]
	r29 = v26 + 8<i32>
	return
	// succ:  close_check__merged_exit
close_check__merged_exit:


// close_execute_u8
// Return size: 0
define close_execute_u8
close_execute_u8_entry:
	r29 = fp
	// succ:  l00012AF0
l00012AF0:
	// succ:  l00012AF0_thunk_close_execute
l00012AF0_thunk_close_execute:
	call close_execute (retsize: 0;)
	return
	// succ:  close_execute_u8_exit
close_execute_u8_exit:


// close_execute_q_u8
// Return size: 0
define close_execute_q_u8
close_execute_q_u8_entry:
	r29 = fp
	// succ:  l00012B00
l00012B00:
	v4 = r29 - 8<i32>
	Mem0[v4:word32] = r30
	Mem0[v4 + 4<i32>:word32] = r31
	r30 = v4
	r29 = v4 - 112<i32>
	Mem0[r29 - 16<i32>:word64] = r17_r16
	r17_r16 = r0_r1
	Mem0[r29 + 80<i32>:word64] = r23_r22
	r2 = Mem0[r17 + 4<i32>:word32]
	Mem0[r29 + 72<i32>:word64] = r25_r24
	Mem0[r29 + 96<i32>:word64] = r19_r18
	r19 = 0x437F0000<32>
	Mem0[r29 + 88<i32>:word64] = r21_r20
	r3 = Mem0[r2 + 4<i32>:word32]
	r5 = Mem0[r2 + 20<i32>:word32]
	r4 = Mem0[r2 + 8<i32>:word32]
	r1 = r19
	r3 = Mem0[r3 + 16<i32>:word32]
	r6 = Mem0[r2 + 16<i32>:word32]
	r5 = Mem0[r5 + 16<i32>:word32]
	r4 = Mem0[r4 + 16<i32>:word32]
	r6 = Mem0[r6 + 16<i32>:word32]
	r22 = Mem0[r3:word32]
	r24 = Mem0[r4:word32]
	r23 = Mem0[r6:word32]
	r25 = Mem0[r5:word32]
	Mem0[r29 + 64<i32>:word64] = r27_r26
	r21 = Mem0[r2:word32]
	r0 = r24 - r22
	r20 = Mem0[r2 + 12<i32>:word32]
	call fn00009610 (retsize: 0;)
	r18 = r25 - r23
	Mem0[r29 + 60<i32>:word32] = r0
	r1_r0 = r19_r18
	call fn00009610 (retsize: 0;)
	r1 = 0xD0<32>
	r3_r2 = SEQ(2<32>, r16)
	r4 = 0x00026973<p32>
	Mem0[r29 + 56<i32>:word32] = r0
	r26 = Mem0[r21 + 16<i32>:word32]
	r19 = Mem0[r20 + 24<i32>:word32]
	r27 = Mem0[r20 + 16<i32>:word32]
	Mem0[r29:word32] = r17
	call logmsg_function (retsize: 0;)
	r4 = Mem0[r21:word32]
	r1 = 0xD1<32>
	r3 = 0x0002698D<p32>
	branch r2 == r4 l00012C20
	// succ:  l00012BA8 l00012C20
l00012BA8:
	r2 = Mem0[r20:word32]
	r4 = Mem0[r21 + 4<i32>:word32]
	r1 = 0xD2<32>
	r3 = 0x00012BB5<p32>
	branch r2 == r4 l00012C20
	// succ:  l00012BC0 l00012C20
l00012BC0:
	r2 = Mem0[r20 + 4<i32>:word32]
	r4 = Mem0[r21 + 8<i32>:word32]
	r1 = 0xD3<32>
	r3 = 0x00012BD8<p32>
	branch r2 == r4 l00012C20
	// succ:  l00012BD8 l00012C20
l00012BD8:
	r2 = Mem0[r20 + 8<i32>:word32]
	r4 = Mem0[r21 + 12<i32>:word32]
	r1 = 0xD4<32>
	r3 = 0x00012BFA<p32>
	branch r2 == r4 l00012C20
	// succ:  l00012BF0 l00012C20
l00012BF0:
	r2 = Mem0[r20 + 12<i32>:word32]
	r4 = Mem0[r21 + 24<i32>:word32]
	r1 = 0xD5<32>
	r3 = 0x00012C1C<p32>
	branch r2 == r4 l00012C20
	// succ:  l00012C0C l00012C20
l00012C0C:
	r2 = Mem0[r20 + 24<i32>:word32]
	p0 = r19 > 0<32>
	Mem0[r29 + 48<i32>:word32] = r24
	Mem0[r29 + 44<i32>:word32] = r25
	Mem0[r29 + 52<i32>:word32] = r16
	goto l00012C3C
	// succ:  l00012C3C
l00012C20:
	Mem0[r29:word32] = r4
	Mem0[r29 + 4<i32>:word32] = r2
	r2 = r16
	// succ:  l00012C28
l00012C28:
	call errlog_function (retsize: 0;)
	r0 = 0xFFFFFFFF<32>
	goto l00012D34
	// succ:  l00012D34
l00012C34:
	branch r19 > r21 l00012D18
	goto l00012C40
	// succ:  l00012C40 l00012D18
l00012C3C:
	r16 = Mem0[r27:byte]
	r19 = Mem0[r26:byte]
	r20 = r22
	r25_r24 = r19_r23
	r2 = Mem0[r29 + 60<i32>:word64]
	r4 = Mem0[r29 + 56<i32>:word64]
	r1 = r18
	r7 = CONVERT(r16, int32, real32)
	r3 = CONVERT(r19, int32, real32)
	r24 = r24 + r4 * r7
	r20 = r20 + r2 * r3
	call fn00009610 (retsize: 0;)
	r0 = r20 - r24
	r2 = 0x9999999A<32>
	r26 = r26 + 1<32>
	r4 = __clear_bit<word32,word32>(r0, 0x1E<32>)
	r3 = 0x3FA99999<32>
	r27 = r27 + 1<32>
	r1_r0 = CONVERT(r4, real32, real64)
	Mem0[r29 + 32<i32>:word32] = r19
	r21 = r21 + 1<32>
	branch p0 l00012C34
	goto l00012C9C
	// succ:  l00012C9C l00012C34
l00012C40:
	r19 = r25
	r16 = Mem0[r27:byte]
	r19 = Mem0[r26:byte]
	r20 = r22
	r2 = Mem0[r29 + 60<i32>:word64]
	r4 = Mem0[r29 + 56<i32>:word64]
	r1 = r18
	r7 = CONVERT(r16, int32, real32)
	r3 = CONVERT(r19, int32, real32)
	r24 = r24 + r4 * r7
	r20 = r20 + r2 * r3
	call fn00009610 (retsize: 0;)
	r0 = r20 - r24
	r2 = 0x9999999A<32>
	r26 = r26 + 1<32>
	r4 = __clear_bit<word32,word32>(r0, 0x1E<32>)
	r3 = 0x3FA99999<32>
	r27 = r27 + 1<32>
	r1_r0 = CONVERT(r4, real32, real64)
	Mem0[r29 + 32<i32>:word32] = r19
	r21 = r21 + 1<32>
	branch p0 l00012C34
	// succ:  l00012C9C l00012C34
l00012C9C:
	p0 = r1_r0 > r3_r2
	Mem0[r29 + 36<i32>:word32] = r16
	r2 = Mem0[r29 + 44<i32>:word64]
	r13_r12 = CONVERT(r22, real32, real64)
	r7_r6 = CONVERT(r23, real32, real64)
	r16 = Mem0[r29 + 52<i32>:word32]
	r1 = 0xE1<32>
	r5_r4 = CONVERT(r2, real32, real64)
	Mem0[r29 + 24<i32>:word64] = r5_r4
	r2 = Mem0[r29 + 48<i32>:word64]
	r4 = 0x00026A38<p32>
	Mem0[r29:word64] = r13_r12
	Mem0[r29 + 16<i32>:word64] = r7_r6
	r3_r2 = SEQ(1<32>, r16)
	r9_r8 = CONVERT(r2, real32, real64)
	Mem0[r29 + 8<i32>:word64] = r9_r8
	call logmsg_function (retsize: 0;)
	r1 = 0xE2<32>
	r3_r2 = SEQ(1<32>, r16)
	r9_r8 = CONVERT(r20, real32, real64)
	r7_r6 = CONVERT(r24, real32, real64)
	Mem0[r29 + 16<i32>:word64] = r7_r6
	Mem0[r29 + 4<i32>:word32] = r25
	r4 = 0x00026A74<p32>
	Mem0[r29:word32] = r21
	Mem0[r29 + 8<i32>:word64] = r9_r8
	call logmsg_function (retsize: 0;)
	r2 = r16
	r1 = 0xE3<32>
	r3 = 0x00026A8C<p32>
	goto l00012C28
	// succ:  l00012C28
l00012D18:
	r1 = 0xE7<32>
	r3 = 2<32>
	r4 = 0x00026A9A<p32>
	Mem0[r29:word32] = r17
	r2 = Mem0[r29 + 52<i32>:word64]
	call logmsg_function (retsize: 0;)
	r0 = 0<32>
	// succ:  l00012D34
l00012D34:
	r19_r18 = Mem0[r29 + 96<i32>:word64]
	r17_r16 = Mem0[r29 + 104<i32>:word64]
	r23_r22 = Mem0[r29 + 80<i32>:word64]
	r21_r20 = Mem0[r29 + 88<i32>:word64]
	r27_r26 = Mem0[r29 + 64<i32>:word64]
	r25_r24 = Mem0[r29 + 72<i32>:word64]
	v43 = r30
	r31 = Mem0[v43 + 4<i32>:word32]
	r30 = Mem0[v43:word32]
	r29 = v43 + 8<i32>
	return
	// succ:  close_execute_q_u8_exit
close_execute_q_u8_exit:


// close_check_q
// Return size: 0
define close_check_q
close_check_q_entry:
	r29 = fp
	// succ:  l00012D48
l00012D48:
	// succ:  l00012D48_thunk_close_check__merged
l00012D48_thunk_close_check__merged:
	call close_check__merged (retsize: 0;)
	return
	// succ:  close_check_q_exit
close_check_q_exit:


// logmsg_function
// Return size: 0
define logmsg_function
logmsg_function_entry:
	r29 = fp
	// succ:  l00012D4C
l00012D4C:
	v4 = r29 - 8<i32>
	Mem0[v4:word32] = r30
	Mem0[v4 + 4<i32>:word32] = r31
	r30 = v4
	r29 = v4 - 8<i32>
	branch r3 >u r5 l00012D6C
	// succ:  l00012D5C l00012D6C
l00012D5C:
	r5 = Mem0[r2 + 16<i32>:word32]
	r6 = r29 + 0x10<32>
	r5 = r29 + 0x10<32>
	r0 = 0x00012D7D<p32>
	Mem0[r29 + 4<i32>:word32] = r6
	call logv (retsize: 0;)
	// succ:  l00012D6C
l00012D6C:
	v13 = r30
	r31 = Mem0[v13 + 4<i32>:word32]
	r30 = Mem0[v13:word32]
	r29 = v13 + 8<i32>
	return
	// succ:  logmsg_function_exit
logmsg_function_exit:


// errlog_function
// Return size: 0
define errlog_function
errlog_function_entry:
	r29 = fp
	// succ:  l00012D70
l00012D70:
	v4 = r29 - 8<i32>
	Mem0[v4:word32] = r30
	Mem0[v4 + 4<i32>:word32] = r31
	r30 = v4
	r29 = v4 - 8<i32>
	r4 = r3
	r0 = 0x000268F9<p32>
	Mem0[r29 + 1<i32>:byte] = r6
	r6 = r29 + 0x10<32>
	r5 = r29 + 0x10<32>
	r3 = 0<32>
	v13 = r30
	r31 = Mem0[v13 + 4<i32>:word32]
	r30 = Mem0[v13:word32]
	r29 = v13 + 8<i32>
	return
	// succ:  errlog_function_exit
errlog_function_exit:


// close_execute
// Return size: 0
define close_execute
close_execute_entry:
	r29 = fp
	// succ:  l00012D94
l00012D94:
	v4 = r29 - 8<i32>
	Mem0[v4:word32] = r30
	Mem0[v4 + 4<i32>:word32] = r31
	r30 = v4
	r29 = v4 - 32<i32>
	Mem0[r29 - 16<i32>:word64] = r17_r16
	r4 = 0x00026ACC<p32>
	r17_r16 = r0_r1
	Mem0[r29 + 16<i32>:word64] = r19_r18
	r5 = Mem0[r17 + 4<i32>:word32]
	r1 = 0x3B<32>
	r18 = r2
	r3_r2 = SEQ(2<32>, r16)
	Mem0[r29 + 8<i32>:word64] = r21_r20
	r19 = Mem0[r5:word32]
	r20 = Mem0[r5 + 4<i32>:word32]
	Mem0[r29:word32] = r17
	call logmsg_function (retsize: 0;)
	r4 = Mem0[r19:word32]
	r1 = 0x3D<32>
	r3 = 0x0002698D<p32>
	branch r2 == r4 l00012E30
	// succ:  l00012DDC l00012E30
l00012DDC:
	r2 = Mem0[r20:word32]
	r4 = Mem0[r19 + 4<i32>:word32]
	r1 = 0x3E<32>
	r3 = 0x00012DF5<p32>
	branch r2 == r4 l00012E30
	// succ:  l00012DF0 l00012E30
l00012DF0:
	r2 = Mem0[r20 + 4<i32>:word32]
	r4 = Mem0[r19 + 8<i32>:word32]
	r1 = 0x3F<32>
	r3 = 0x00012E18<p32>
	branch r2 == r4 l00012E30
	// succ:  l00012E04 l00012E30
l00012E04:
	r2 = Mem0[r20 + 8<i32>:word32]
	r4 = Mem0[r19 + 12<i32>:word32]
	r1 = 0x40<32>
	r3 = 0x00012E3A<p32>
	branch r2 == r4 l00012E30
	// succ:  l00012E1C l00012E30
l00012E1C:
	r2 = Mem0[r20 + 12<i32>:word32]
	r4 = Mem0[r19 + 24<i32>:word32]
	r1 = 0x41<32>
	r3 = 0x00012E1C<p32>
	branch r2 == r4 l00012E38
	goto l00012E34
	// succ:  l00012E34 l00012E38
l00012E30:
	Mem0[r29:word32] = r4
	Mem0[r29 + 4<i32>:word32] = r2
	goto l00012E64
	// succ:  l00012E64
l00012E34:
	r2 = Mem0[r20 + 24<i32>:word32]
	Mem0[r29:word32] = r4
	Mem0[r29 + 4<i32>:word32] = r2
	// succ:  l00012E38
l00012E38:
	r2 = Mem0[r20 + 16<i32>:word32]
	r1 = Mem0[r19 + 16<i32>:word32]
	r0 = r16
	r3 = r4
	call r18 (retsize: 0;)
	r3_r2 = SEQ(2<32>, r16)
	r1 = 0x45<32>
	branch p0 l00012E70
	// succ:  l00012E54 l00012E70
l00012E54:
	p0 = r0 == 0<32>
	r2 = r16
	r1 = 0x43<32>
	r3 = 0x00026A8C<p32>
	// succ:  l00012E64
l00012E64:
	call errlog_function (retsize: 0;)
	r0 = 0xFFFFFFFF<32>
	goto l00012E84
	// succ:  l00012E84
l00012E70:
	Mem0[r29:word32] = r17
	r4 = 0x00026AE4<p32>
	call logmsg_function (retsize: 0;)
	r0 = 0<32>
	// succ:  l00012E84
l00012E84:
	r19_r18 = Mem0[r29 + 16<i32>:word64]
	r17_r16 = Mem0[r29 + 24<i32>:word64]
	v26 = r30
	r31 = Mem0[v26 + 4<i32>:word32]
	r30 = Mem0[v26:word32]
	r29 = v26 + 8<i32>
	return
	// succ:  close_execute_exit
close_execute_exit:


// check_u8vals
// Return size: 0
define check_u8vals
check_u8vals_entry:
	r29 = fp
	// succ:  l00012E8C
l00012E8C:
	v4 = r29 - 8<i32>
	Mem0[v4:word32] = r30
	Mem0[v4 + 4<i32>:word32] = r31
	r30 = v4
	r29 = v4 - 56<i32>
	Mem0[r29 - 16<i32>:word64] = r17_r16
	r17_r16 = r0_r3
	Mem0[r29 + 40<i32>:word64] = r19_r18
	r19_r18 = 1<64>
	p0 = r16 > 0<32>
	Mem0[r29 + 32<i32>:word64] = r21_r20
	r20 = r1
	Mem0[r29 + 16<i32>:word64] = r25_r24
	Mem0[r29 + 24<i32>:word64] = r23_r22
	branch p0 l00012F70
	// succ:  l00012EAC l00012F70
l00012EAC:
	r2 = r16
	r3 = r19
	p1 = r16 >u 1<32>
	r3 = r3 + 1<i32>
	r4 = Mem0[r3:byte]
	r5 = r2 + 0xFFFFFFFF<32>
	branch p1 l00012ED8
	// succ:  l00012EC0 l00012ED8
l00012EC0:
	r2 = r4
	// succ:  l00012EC4
l00012EC4:
	r18 = 0<32>
	r22 = 0<32>
	branch p0 l00012F70
	// succ:  l00012ED0 l00012F70
l00012ED0:
	r2 = max<uint32>(r18, r2)
	goto l00012F14
	// succ:  l00012F14
l00012ED8:
	r3 = r3 + 1<i32>
	r2 = Mem0[r3:byte]
	p1 = r2 >u 1<32>
	__loop(0<i32>, 0x00012EE8<p32>, r5)
	branch p1 l00012EFC
	// succ:  l00012EE8 l00012EFC
l00012EE8:
	r3 = r3 + 1<i32>
	r2 = Mem0[r3:byte]
	r5 = r2
	r18 = max<uint32>(r18, r4)
	r4 = r5
	// succ:  l00012EFC
l00012EFC:
	goto l00012EC4
	// succ:  l00012EC4
l00012F04:
	branch r16 >u r22 l00012F70
	goto l00012F18
	// succ:  l00012F18 l00012F70
l00012F14:
	r24 = Mem0[r19:byte]
	r23 = Mem0[r20:byte]
	r1 = r21
	r3 = CONVERT(r23, uint32, real32)
	r2 = CONVERT(r24, uint32, real32)
	call fn00009610 (retsize: 0;)
	r0 = r3 - r2
	r2 = 0x9999999A<32>
	r4 = __clear_bit<word32,word32>(r0, 0x1E<32>)
	r3 = 0x3FA99999<32>
	r1_r0 = CONVERT(r4, real32, real64)
	Mem0[r29 + 12<i32>:word32] = r24
	r1 = 0xA2<32>
	branch p0 l00012F04
	goto l00012F58
	// succ:  l00012F58 l00012F04
l00012F18:
	r22 = r22 + 1<32>
	r19 = r19 + 1<32>
	r20 = r20 + 1<32>
	r24 = Mem0[r19:byte]
	r23 = Mem0[r20:byte]
	r3 = CONVERT(r23, uint32, real32)
	r2 = CONVERT(r24, uint32, real32)
	call fn00009610 (retsize: 0;)
	r0 = r3 - r2
	r2 = 0x9999999A<32>
	r4 = __clear_bit<word32,word32>(r0, 0x1E<32>)
	r3 = 0x3FA99999<32>
	r1_r0 = CONVERT(r4, real32, real64)
	Mem0[r29 + 12<i32>:word32] = r24
	r1 = 0xA2<32>
	branch p0 l00012F04
	// succ:  l00012F58 l00012F04
l00012F58:
	p0 = r1_r0 > r3_r2
	r3_r2 = SEQ(0<32>, r17)
	r4 = 0x00026AAD<p32>
	Mem0[r29 + 4<i32>:word32] = r16
	Mem0[r29 + 8<i32>:word32] = r23
	Mem0[r29:word32] = r22
	r18 = 1<32>
	call logmsg_function (retsize: 0;)
	// succ:  l00012F70
l00012F70:
	r0 = r18
	r19_r18 = Mem0[r29 + 40<i32>:word64]
	r17_r16 = Mem0[r29 + 48<i32>:word64]
	r23_r22 = Mem0[r29 + 24<i32>:word64]
	r21_r20 = Mem0[r29 + 32<i32>:word64]
	v27 = r30
	r31 = Mem0[v27 + 4<i32>:word32]
	r30 = Mem0[v27:word32]
	r29 = v27 + 8<i32>
	return
	// succ:  check_u8vals_exit
check_u8vals_exit:


// check_i32vals
// Return size: 0
define check_i32vals
check_i32vals_entry:
	r29 = fp
	// succ:  l00012F84
l00012F84:
	v4 = r29 - 8<i32>
	Mem0[v4:word32] = r30
	Mem0[v4 + 4<i32>:word32] = r31
	r30 = v4
	r29 = v4 - 48<i32>
	Mem0[r29 - 32<i32>:word64] = r21_r20
	r20 = r3 >>u 2<32>
	Mem0[r29 + 16<i32>:word64] = r23_r22
	Mem0[r29 + 40<i32>:word64] = r17_r16
	r17_r16 = r2_r0
	Mem0[r29 + 32<i32>:word64] = r19_r18
	r18 = r1
	p0 = r20 == 0<32>
	r0 = 0<32>
	r2 = r17 + 0<32>
	branch p0 l00013038
	// succ:  l00012FA8 l00013038
l00012FA8:
	__loop(0<i32>, 0x00012FAC<p32>, r20)
	r2 = r2 + 4<i32>
	r3 = Mem0[r2:word32]
	r3 = abs<int32>(r3)
	r0 = max<uint32>(r0, r3)
	r21 = -1<i32>
	r0 = -1<i32>
	// succ:  l00013038
l00013038:
	r19_r18 = Mem0[r29 + 32<i32>:word64]
	r17_r16 = Mem0[r29 + 40<i32>:word64]
	r23_r22 = Mem0[r29 + 16<i32>:word64]
	r21_r20 = Mem0[r29 + 24<i32>:word64]
	v21 = r30
	r31 = Mem0[v21 + 4<i32>:word32]
	r30 = Mem0[v21:word32]
	r29 = v21 + 8<i32>
	return
	// succ:  check_i32vals_exit
check_i32vals_exit:


// concat_execute_asm
// Return size: 0
define concat_execute_asm
concat_execute_asm_entry:
	r29 = fp
	// succ:  l00013050
l00013050:
	// succ:  l00013050_thunk_concat_execute
l00013050_thunk_concat_execute:
	call concat_execute (retsize: 0;)
	return
	// succ:  concat_execute_asm_exit
concat_execute_asm_exit:


// concat_check
// Return size: 0
define concat_check
concat_check_entry:
	r29 = fp
	// succ:  l0001305C
l0001305C:
	v4 = r29 - 8<i32>
	Mem0[v4:word32] = r30
	Mem0[v4 + 4<i32>:word32] = r31
	r30 = v4
	r29 = v4 - 24<i32>
	Mem0[r29 - 16<i32>:word64] = r17_r16
	r4 = 0x00026C53<p32>
	r17 = r0
	r16 = r1
	r1 = 0x123<32>
	Mem0[r29:word32] = r17
	r2 = r16
	call logmsg_function (retsize: 0;)
	r2 = Mem0[r17 + 16<i32>:word32]
	r3 = 0xAAAAAAAB<32>
	r1 = 0x124<32>
	r4 = r2 + 0xFFFFFFFF<32>
	r5 = r4
	r3 = SLICE(r4 *64 r3, word32, 32)
	r3 = r3 >>u 1<32>
	r5 = r5 - r3 * 3<32>
	r2 = Mem0[r17 + 28<i32>:word32]
	r5 = Mem0[r17 + 24<i32>:word32]
	r3 = 0x000130AF<p32>
	Mem0[r29 + 4<i32>:word32] = r5
	Mem0[r29 + 8<i32>:word32] = r2
	r2 = r16
	Mem0[r29:word32] = r4
	// succ:  l00013138
l00013138:
	call errlog_function (retsize: 0;)
	v17 = r30
	r31 = Mem0[v17 + 4<i32>:word32]
	r30 = Mem0[v17:word32]
	r29 = v17 + 8<i32>
	return
	// succ:  concat_check_exit
concat_check_exit:


// concat_execute_ref
// Return size: 0
define concat_execute_ref
concat_execute_ref_entry:
	r29 = fp
	// succ:  l00013164
l00013164:
	// succ:  l00013164_thunk_concat_execute
l00013164_thunk_concat_execute:
	call concat_execute (retsize: 0;)
	return
	// succ:  concat_execute_ref_exit
concat_execute_ref_exit:


// concat_execute
// Return size: 0
define concat_execute
concat_execute_entry:
	r29 = fp
	// succ:  l00013170
l00013170:
	v4 = r29 - 8<i32>
	Mem0[v4:word32] = r30
	Mem0[v4 + 4<i32>:word32] = r31
	r30 = v4
	r29 = v4 - 168<i32>
	Mem0[r29 - 40<i32>:word64] = r23_r22
	r3 = 0xAAAAAAAB<32>
	r23 = r0
	Mem0[r29 + 152<i32>:word64] = r19_r18
	r4 = Mem0[r23 + 16<i32>:word32]
	Mem0[r29 + 120<i32>:word64] = r27_r26
	r27 = Mem0[r23 + 4<i32>:word32]
	r18 = r4 + 0xFFFFFFFF<32>
	Mem0[r29 + 160<i32>:word64] = r17_r16
	r5 = Mem0[r23 + 8<i32>:word32]
	r17 = r1
	r3 = SLICE(r18 *64 r3, word32, 32)
	Mem0[r29 + 128<i32>:word64] = r25_r24
	r0 = Mem0[r27 + 4<i32>:word32]
	r25 = r2
	r2 = r17
	r1 = 0xE5<32>
	r4 = 0x00026BC4<p32>
	r26 = Mem0[r5 + 4<i32>:word32]
	r24 = Mem0[r5:word32]
	r22 = r3 >>u 1<32>
	Mem0[r29 + 10<i32>:byte] = r3
	r3 = Mem0[r0 + 4<i32>:word32]
	r16 = r22
	r6 = r27 + (r22 << 2<32>)
	r3 = Mem0[r0:word32]
	Mem0[r29 + 36<i32>:word32] = r3
	r6 = Mem0[r6 + 4<i32>:word32]
	r7 = Mem0[r13 + r27:word32]
	r5 = Mem0[r5 + 8<i32>:word32]
	r7 = Mem0[r7 + 16<i32>:word32]
	Mem0[r29 + 144<i32>:word64] = r21_r20
	r3 = Mem0[r6 + 16<i32>:word32]
	Mem0[r29 + 28<i32>:word32] = r5
	r5 = Mem0[r0 + 8<i32>:word32]
	r19 = Mem0[r27:word32]
	Mem0[r29 + 44<i32>:word32] = r5
	r20 = Mem0[r7:word32]
	r21 = Mem0[r3:word32]
	Mem0[r29:word32] = r23
	call logmsg_function (retsize: 0;)
	r2 = Mem0[r19 + 16<i32>:word32]
	branch r2 == 3<32> l00013300
	// succ:  l00013214 l00013300
l00013214:
	r2 = Mem0[r2:word32]
	Mem0[r29 + 24<i32>:word32] = r24
	r24 = 0<32>
	branch r2 >u r18 l0001331C
	// succ:  l00013228 l0001331C
l00013228:
	r2 = 3<32>
	Mem0[r26 + 12<i32>:word32] = 0xFFFFFF81<32>
	r6 = Mem0[r29 + 28<i32>:word32]
	r2 = 0<32>
	Mem0[r26 + 4<i32>:word32] = 0xFFFFFF81<32>
	Mem0[r26 + 8<i32>:word32] = 1<32>
	r3 = r29 + 0x30<32>
	r2 = fminf(r2, r21)
	Mem0[r6 + 8<i32>:word32] = 1<32>
	Mem0[r26:word32] = 1<32>
	r21 = r3 + 0x14<32>
	Mem0[r6 + 4<i32>:word32] = 1<32>
	Mem0[r6:word32] = 1<32>
	r16 = r29 + 0x54<32>
	r1_r0 = SEQ(0<32>, r21)
	Mem0[r6 + 12<i32>:word32] = 0xFFFFFF81<32>
	r4 = Mem0[r26 + 16<i32>:word32]
	Mem0[r4:word32] = r2
	r4 = Mem0[r29 + 36<i32>:word64]
	r7 = Mem0[r6 + 16<i32>:word32]
	Mem0[r26 + 24<i32>:word32] = 4<32>
	Mem0[r7:word32] = r20
	Mem0[r5:word32] = r4
	Mem0[r6 + 24<i32>:word32] = 4<32>
	r4 = Mem0[r29 + 44<i32>:word64]
	r7 = Mem0[r29 + 40<i32>:word64]
	Mem0[r5 + 8<i32>:word32] = r4
	Mem0[r5 + 4<i32>:word32] = r7
	Mem0[r5 + 24<i32>:word32] = r18
	Mem0[r29 + 48<i32>:word32] = r23
	Mem0[r5 + 12<i32>:word32] = r19
	Mem0[r29 + 64<i32>:word32] = r19
	Mem0[r29 + 84<i32>:word32] = r23
	Mem0[r29 + 92<i32>:word32] = r2
	Mem0[r29 + 56<i32>:word32] = r2
	Mem0[r29 + 96<i32>:word32] = r20
	Mem0[r29 + 60<i32>:word32] = r20
	Mem0[r3 + 4<i32>:word32] = 1<32>
	Mem0[r29 + 100<i32>:word32] = r19
	Mem0[r16 + 4<i32>:word32] = 0xFFFFFF80<32>
	call fn00009740 (retsize: 0;)
	r0 = r16 + 0x14<32>
	r1 = 0<32>
	call fn00009740 (retsize: 0;)
	r1_r0 = r25_r17
	r2 = r29 + 0x30<32>
	call nn_os_work_for_vector (retsize: 0;)
	r0 = r17
	r1 = r29 + 0x54<32>
	call r25 (retsize: 0;)
	r0 = r21
	call fn000096A0 (retsize: 0;)
	r2 = r17
	r1 = 0x112<32>
	r4 = 0x00026C44<p32>
	Mem0[r29:word32] = r23
	call logmsg_function (retsize: 0;)
	// succ:  l000132E8
l000132E8:
	r27_r26 = Mem0[r29 + 120<i32>:word64]
	r0 = r24
	r19_r18 = Mem0[r29 + 152<i32>:word64]
	r17_r16 = Mem0[r29 + 160<i32>:word64]
	r23_r22 = Mem0[r29 + 136<i32>:word64]
	r21_r20 = Mem0[r29 + 144<i32>:word64]
	r25_r24 = Mem0[r29 + 128<i32>:word64]
	v37 = r30
	r31 = Mem0[v37 + 4<i32>:word32]
	r30 = Mem0[v37:word32]
	r29 = v37 + 8<i32>
	return
	// succ:  concat_execute_exit
l00013300:
	r1 = 0xE6<32>
	r3 = 0x00026BDD<p32>
	r2 = r17
	// succ:  l00013310
l00013310:
	r24 = 0xFFFFFFFF<32>
	call errlog_function (retsize: 0;)
	goto l000132E8
	// succ:  l000132E8
l0001331C:
	r3 = Mem0[r29 + 40<i32>:word64]
	r2 = Mem0[r29 + 44<i32>:word64]
	r24 = r27 + 4<32>
	r19_r18 = 0<64>
	Mem0[r29 + 16<i32>:word32] = r23
	Mem0[r29 + 8<i32>:word32] = r26
	r16 = r27
	r26 = r16 + r27
	Mem0[r29 + 20<i32>:word32] = r17
	Mem0[r29 + 12<i32>:word32] = r25
	r2 = r3 * r2
	r3 = Mem0[r29 + 36<i32>:word64]
	r23 = 0<32>
	r16 = r16 + (r7 + 4<32>)
	r2 = r2 * r3
	Mem0[r29 + 32<i32>:word32] = r2
	// succ:  l00013354
l00013354:
	r3 = Mem0[r29 + 44<i32>:word32]
	r25 = Mem0[r24:word32]
	branch r2 == r3 l00013378
	// succ:  l00013368 l00013378
l00013368:
	r2 = Mem0[r25 + 8<i32>:word32]
	r1 = 0xE9<32>
	r3 = 0x0001336C<p32>
	Mem0[r29:word32] = r23
	r2 = Mem0[r29 + 20<i32>:word64]
l00013374:
	Mem0[r29:word32] = r23
	r2 = Mem0[r29 + 20<i32>:word64]
	// succ:  l00013310 l00013378
l00013378:
	r2 = Mem0[r25 + 4<i32>:word32]
	branch r3 == r2 l00013394
	// succ:  l00013388 l00013394
l00013388:
	r3 = Mem0[r29 + 40<i32>:word32]
	r1 = 0xEC<32>
	goto l00013374
	// succ:  l00013374
l00013394:
	r2 = Mem0[r25:word32]
	branch r3 == r2 l000133B0
	// succ:  l000133A4 l000133B0
l000133A4:
	r3 = Mem0[r29 + 36<i32>:word32]
	r1 = 0xEF<32>
	goto l00013374
	// succ:  l00013374
l000133B0:
	r16 = r16 + 4<i32>
	r2 = Mem0[r16:word32]
	r23 = r23 + 1<32>
	r17 = r27 + 8<32>
	r0 = r21
	r2 = Mem0[r2 + 16<i32>:word32]
	r1 = Mem0[r2:word32]
	call fn000097B0 (retsize: 0;)
	r26 = r26 + 4<i32>
	r2 = Mem0[r26:word32]
	r0 = r20
	r21 = r0
	r2 = Mem0[r2 + 16<i32>:word32]
	r1 = Mem0[r2:word32]
	call fn00009600 (retsize: 0;)
	r3 = Mem0[r29 + 32<i32>:word32]
	r2 = Mem0[r25 + 12<i32>:word32]
	r20 = r0
	r27 = r24
	r26 = Mem0[r29 + 8<i32>:word32]
	p0 = r22 >u r23
	r19 = r2 + r19
	r24 = r17
	r23 = Mem0[r29 + 16<i32>:word32]
	r24 = 0<32>
	branch p0 l00013354
	// succ:  l00013414 l00013354
l00013414:
	r18 = r18 + r3 * r2
	r17 = Mem0[r29 + 20<i32>:word64]
	r5 = Mem0[r29 + 24<i32>:word64]
	r1 = 0xF6<32>
	r25 = Mem0[r29 + 12<i32>:word32]
	branch r18 >u r2 l00013228
	// succ:  l0001342C l00013228
l0001342C:
	r2 = Mem0[r5 + 20<i32>:word32]
	goto l00013310
	// succ:  l00013310
concat_execute_exit:


// concat_execute_slice_ref
// Return size: 0
define concat_execute_slice_ref
concat_execute_slice_ref_entry:
	r29 = fp
	goto l00013434
	// succ:  l00013434
l00009730_in_concat_execute_slice_ref:
	r14 = 0x0002B1B0<p32>
	r28 = Mem0[r14:word32]
	call r28 (retsize: 0;)
	return
	// succ:  concat_execute_slice_ref_exit
l00013434:
	v4 = r29 - 8<i32>
	Mem0[v4:word32] = r30
	Mem0[v4 + 4<i32>:word32] = r31
	r30 = v4
	r29 = v4 - 72<i32>
	r0 = 0x437F0000<32>
	r2 = Mem0[r1 + 12<i32>:word32]
	r4 = Mem0[r1 + 8<i32>:word32]
	Mem0[r29 + 64<i32>:word64] = r17_r16
	r16 = Mem0[r1:word32]
	Mem0[r29 + 40<i32>:word64] = r23_r22
	Mem0[r29 + 4<i32>:word32] = r1
	r3 = Mem0[r16 + 16<i32>:word32]
	r23 = Mem0[r1 + 4<i32>:word32]
	r22 = Mem0[r1 + 16<i32>:word32]
	r1 = r2 - r4
	Mem0[r29 + 56<i32>:word64] = r19_r18
	Mem0[r29 + 32<i32>:word64] = r25_r24
	r17 = r3 + 0xFFFFFFFF<32>
	Mem0[r29 + 24<i32>:word64] = r27_r26
	Mem0[r29 + 48<i32>:word64] = r21_r20
	Mem0[r29 + 20<i32>:word32] = r4
	r24 = Mem0[r16 + 4<i32>:word32]
	call fn00009610 (retsize: 0;)
	Mem0[r29 + 16<i32>:word32] = r0
	r2 = 3<32>
	r26 = r24 + 0<32>
	branch p0 l000135CC
	// succ:  l00013480 l000135CC
l00013480:
	p0 = r2 >u r9
	r2 = Mem0[r16 + 8<i32>:word32]
	r3 = 0xAAAAAAAB<32>
	r2 = Mem0[r2:word32]
	r16 = 0<32>
	r3 = SLICE(r17 *64 r3, word32, 32)
	Mem0[r29 + 2<i32>:byte] = r4
	r4 = __set_bit<word32,word32>(r3, 0<32>)
	r18 = r3 >>u 1<32>
	r27 = Mem0[r2 + 16<i32>:word32]
	Mem0[r29 + 12<i32>:word32] = r3
	// succ:  l000134A8
l000134A8:
	r21 = Mem0[r26 + 4<i32>:word32]
	r26 = r26 + 4<32>
	r2 = r16
	r3 = r2
	r16 = r2
	r17 = r21 + 0xC<32>
	branch p0 l000135BC
	// succ:  l000134C0 l000135BC
l000134C0:
	p0 = r3 == r15
	r4 = Mem0[r29 + 8<i32>:word64]
	r3 = Mem0[r29 + 12<i32>:word64]
	r1 = 0x437F0000<32>
	r3 = r3 + r2
	r4 = 0<32>
	r2 = r4 + r2
	r2 = Mem0[r14 + r2 * 4<32>:word32]
	r3 = Mem0[r6 + r3 * 4<32>:word32]
	r2 = Mem0[r2 + 16<i32>:word32]
	r3 = Mem0[r3 + 16<i32>:word32]
	r3 = Mem0[r3:word32]
	r2 = Mem0[r2:word32]
	r25 = fminf(r4, r3)
	call fn00009610 (retsize: 0;)
	r0 = r2 - r25
	r3 = Mem0[r21 + 4<i32>:word32]
	r2 = Mem0[r21 + 8<i32>:word32]
	r17 = r21 + 0xC<32>
	r20 = r0
	r4 = Mem0[r21 + 12<i32>:word32]
	r5 = Mem0[r21:word32]
	r3 = Mem0[r21 + 16<i32>:word32]
	r2 = r3 * r2
	r19 = r2 * r5
	r7 = SEQ(SLICE(r4, word16, 0), SLICE(r19, word16, 0))
	r1_r0 = r4_r7
	__l2fetch<word32,word64>(r3, r1_r0)
	r2 = Mem0[r29 + 20<i32>:word64]
	r1 = r20
	call fn00009610 (retsize: 0;)
	r0 = r25 - r2
	r3 = Mem0[r29 + 16<i32>:word64]
	r2 = r0
	r0 = 0x41700000<32>
	r20 = truncf(CONVERT(r2, uint32, real32))
	r25 = r3 * r20
	call fn000097C0 (retsize: 0;)
	p0 = r19 == 0<32>
	r2 = r25 * r0
	r2 = r27 + 0<32>
	branch p0 l000135BC
	// succ:  l00013554 l000135BC
l00013554:
	r5 = truncf(CONVERT(r2, uint32, real32))
	r3 = Mem0[r21 + 16<i32>:word32]
	r7 = Mem0[r21 + 12<i32>:word32]
	r4 = 0x7FFF<32>
	r4 = CONVERT(SLICE(r5, int16, 0), int16, int32)
	p0 = r5 > r4
	__loop(0<i32>, 0x00013568<p32>, r19)
	r7 = 0<32>
	branch p0 l000135B4
	// succ:  l00013570 l000135B4
l00013570:
	p0 = r7 == 0<32>
	r5 = r3
	r6 = 0<32>
	// succ:  l00013574
l00013574:
	r5 = r5 + 1<i32>
	r8 = Mem0[r5:byte]
	r7 = 0xFF<32>
	r8 = r8 + r20
	r8 = 0x4000<32> + r8 * r4
	r8 = r8 >> 0xF<32>
	r7 = r8 + 0<32>
	p0 = r8 > 0xFF<32>
	branch p0 l000135A0
	// succ:  l00013598 l000135A0
l00013598:
	r7 = 0<32>
	p0 = r8 > 0xFFFFFFFF<32>
	// succ:  l000135A0
l000135A0:
	r6 = r6 + 1<32>
	r8 = r2 + r6
	Mem0[r8:byte] = r7
	branch r7 >u r6 l00013574
	goto l000135B8
	// succ:  l000135B8 l00013574
l000135B4:
	r2 = r2 + r22
	r3 = r3 + r7
	goto l000135BC
	// succ:  l000135BC
l000135B8:
	r7 = Mem0[r17:word32]
	r2 = r2 + r22
	r3 = r3 + r7
	// succ:  l000135BC
l000135BC:
	r2 = Mem0[r17:word32]
	p0 = r18 >u r16
	r27 = r27 + r2
	branch p0 l000134A8
	// succ:  l000135CC l000134A8
l000135CC:
	r17_r16 = Mem0[r29 + 64<i32>:word64]
	r2 = Mem0[r29 + 4<i32>:word64]
	r1 = 1<32>
	r21_r20 = Mem0[r29 + 48<i32>:word64]
	r19_r18 = Mem0[r29 + 56<i32>:word64]
	r0 = r2 + 0x14<32>
	r25_r24 = Mem0[r29 + 32<i32>:word64]
	r23_r22 = Mem0[r29 + 40<i32>:word64]
	v40 = r30
	r31 = Mem0[v40 + 4<i32>:word32]
	r30 = Mem0[v40:word32]
	r29 = v40 + 8<i32>
	r27_r26 = Mem0[r29 + 24<i32>:word64]
	goto l00009730_in_concat_execute_slice_ref
	// succ:  l00009730_in_concat_execute_slice_ref
concat_execute_slice_ref_exit:


// logmsg_function
// Return size: 0
define logmsg_function
logmsg_function_entry:
	r29 = fp
	// succ:  l000135F0
l000135F0:
	v4 = r29 - 8<i32>
	Mem0[v4:word32] = r30
	Mem0[v4 + 4<i32>:word32] = r31
	r30 = v4
	r29 = v4 - 8<i32>
	r3 = 2<32>
	branch r3 >u r5 l00013614
	// succ:  l00013600 l00013614
l00013600:
	r5 = Mem0[r2 + 16<i32>:word32]
	r5 = r29 + 0x10<32>
	r3 = 2<32>
	r0 = 0x0001362C<p32>
	Mem0[r29 + 1<i32>:byte] = r6
	r6 = r29 + 0x10<32>
	call logv (retsize: 0;)
	// succ:  l00013608_thunk_errlog_function
l00013608_thunk_errlog_function:
	call errlog_function (retsize: 0;)
	return
	// succ:  logmsg_function_exit
l00013614:
	v13 = r30
	r31 = Mem0[v13 + 4<i32>:word32]
	r30 = Mem0[v13:word32]
	r29 = v13 + 8<i32>
	return
	// succ:  logmsg_function_exit
logmsg_function_exit:


// errlog_function
// Return size: 0
define errlog_function
errlog_function_entry:
	r29 = fp
	// succ:  l00013618
l00013618:
	v4 = r29 - 8<i32>
	Mem0[v4:word32] = r30
	Mem0[v4 + 4<i32>:word32] = r31
	r30 = v4
	r29 = v4 - 8<i32>
	r4 = r3
	r0 = 0x00026BA8<p32>
	Mem0[r29 + 1<i32>:byte] = r6
	r6 = r29 + 0x10<32>
	r5 = r29 + 0x10<32>
	r3 = 0<32>
	v13 = r30
	r31 = Mem0[v13 + 4<i32>:word32]
	r30 = Mem0[v13:word32]
	r29 = v13 + 8<i32>
	return
	// succ:  errlog_function_exit
errlog_function_exit:


// concat_execute_slice_asm
// Return size: 0
define concat_execute_slice_asm
concat_execute_slice_asm_entry:
	r29 = fp
	goto l0001363C
	// succ:  l0001363C
l00009730_in_concat_execute_slice_asm:
	r14 = 0x0002B1B0<p32>
	r28 = Mem0[r14:word32]
	call r28 (retsize: 0;)
	return
	// succ:  concat_execute_slice_asm_exit
l0001363C:
	v4 = r29 - 8<i32>
	Mem0[v4:word32] = r30
	Mem0[v4 + 4<i32>:word32] = r31
	r30 = v4
	r29 = v4 - 72<i32>
	r0 = 0x437F0000<32>
	r2 = Mem0[r1 + 12<i32>:word32]
	r4 = Mem0[r1 + 8<i32>:word32]
	Mem0[r29 + 64<i32>:word64] = r17_r16
	r17 = Mem0[r1:word32]
	r3 = Mem0[r1 + 16<i32>:word32]
	Mem0[r29 + 16<i32>:word32] = r3
	Mem0[r29 + 32<i32>:word64] = r25_r24
	Mem0[r29 + 8<i32>:word32] = r1
	r24 = Mem0[r1 + 4<i32>:word32]
	r1 = r2 - r4
	r3 = Mem0[r17 + 16<i32>:word32]
	Mem0[r29 + 48<i32>:word64] = r21_r20
	Mem0[r29 + 56<i32>:word64] = r19_r18
	r19 = r3 + 0xFFFFFFFF<32>
	Mem0[r29 + 24<i32>:word64] = r27_r26
	Mem0[r29 + 40<i32>:word64] = r23_r22
	Mem0[r29 + 20<i32>:word32] = r4
	r16 = Mem0[r17 + 4<i32>:word32]
	call fn00009610 (retsize: 0;)
	Mem0[r29 + 12<i32>:word32] = r0
	r2 = 3<32>
	r25 = r16 + 4<32>
	r27 = 0<32>
	branch p0 l00013770
	// succ:  l00013690 l00013770
l00013690:
	p0 = r2 >u r11
	r3 = Mem0[r17 + 8<i32>:word32]
	r2 = 0xAAAAAAAB<32>
	r7 = Mem0[r3:word32]
	r2 = SLICE(r19 *64 r2, word32, 32)
	r20 = Mem0[r7 + 16<i32>:word32]
	r19 = r2 >>u 1<32>
	r16 = r19 << 3<32>
	r26 = r19 << 2<32>
	// succ:  l000136B0
l000136B0:
	r17 = Mem0[r25:word32]
	r27 = r27 + 1<32>
	r2 = r27 & 1<32>
	r2 = Mem0[r25 + r26:word32]
	r3 = Mem0[r25 + r16:word32]
	p0 = r2 == r24
	branch p0 l000136D4
	// succ:  l000136CC l000136D4
l000136CC:
	r17 = r17 + 0xC<32>
	goto l0001375C
	// succ:  l0001375C
l000136D4:
	r21 = Mem0[r17 + 16<i32>:word32]
	r4 = 0<32>
	r3 = Mem0[r3 + 16<i32>:word32]
	r2 = Mem0[r2 + 16<i32>:word32]
	r1 = 0x437F0000<32>
	r3 = Mem0[r3:word32]
	r2 = Mem0[r2:word32]
	r23 = fminf(r4, r2)
	call fn00009610 (retsize: 0;)
	r0 = r3 - r23
	r3 = Mem0[r17 + 4<i32>:word32]
	r2 = Mem0[r17 + 8<i32>:word32]
	r22 = r0
	r4 = Mem0[r17 + 12<i32>:word32]
	r5 = Mem0[r17:word32]
	r2 = r3 * r2
	r18 = r2 * r5
	r7 = SEQ(SLICE(r4, word16, 0), SLICE(r18, word16, 0))
	r1_r0 = r4_r7
	__l2fetch<word32,word64>(r21, r1_r0)
	r2 = Mem0[r29 + 20<i32>:word64]
	r1 = r22
	call fn00009610 (retsize: 0;)
	r0 = r23 - r2
	r2 = Mem0[r29 + 12<i32>:word64]
	r3 = 0x47000000<32>
	r6 = 0x7FFF<32>
	r5 = Mem0[r29 + 16<i32>:word32]
	r1_r0 = r21_r20
	r7 = truncf(CONVERT(r0, uint32, real32))
	r2 = r2 * r22
	r2 = Mem0[r17 + 12<i32>:word32]
	r3 = CONVERT(SLICE(r7, int16, 0), int16, int32)
	r17 = r17 + 0xC<32>
	r4 = r2 * r3
	Mem0[r29:word32] = r18
	r4 = truncf(CONVERT(r4, uint32, real32))
	r4 = min<int32>(r6, r4)
	r4 = CONVERT(SLICE(r4, int16, 0), int16, int32)
	call memconvert_hvx (retsize: 0;)
	// succ:  l0001375C
l0001375C:
	r2 = Mem0[r17:word32]
	p0 = r19 >u r27
	r25 = r25 + 4<32>
	r20 = r20 + r2
	branch p0 l000136B0
	// succ:  l00013770 l000136B0
l00013770:
	r17_r16 = Mem0[r29 + 64<i32>:word64]
	r2 = Mem0[r29 + 8<i32>:word64]
	r1 = 1<32>
	r21_r20 = Mem0[r29 + 48<i32>:word64]
	r19_r18 = Mem0[r29 + 56<i32>:word64]
	r0 = r2 + 0x14<32>
	r25_r24 = Mem0[r29 + 32<i32>:word64]
	r23_r22 = Mem0[r29 + 40<i32>:word64]
	v29 = r30
	r31 = Mem0[v29 + 4<i32>:word32]
	r30 = Mem0[v29:word32]
	r29 = v29 + 8<i32>
	r27_r26 = Mem0[r29 + 24<i32>:word64]
	goto l00009730_in_concat_execute_slice_asm
	// succ:  l00009730_in_concat_execute_slice_asm
concat_execute_slice_asm_exit:


// hexagon_nn_const_ctor
// Return size: 0
define hexagon_nn_const_ctor
hexagon_nn_const_ctor_entry:
	r29 = fp
	// succ:  l000137A0
l000137A0:
	v4 = r29 - 8<i32>
	Mem0[v4:word32] = r30
	Mem0[v4 + 4<i32>:word32] = r31
	r30 = v4
	r29 = v4 - 48<i32>
	Mem0[r29 - 44<i32>:word32] = r5
	Mem0[r29 + 40<i32>:word64] = r17_r16
	r0 = r29 + 0<32>
	r17_r16 = r1_r0
	Mem0[r29:word32] = r2
	Mem0[r29 + 8<i32>:word32] = r4
	Mem0[r29 + 32<i32>:word64] = r19_r18
	r4 = Mem0[r29 + 56<i32>:word64]
	Mem0[r29 + 4<i32>:word32] = r3
	r3 = Mem0[r29 + 60<i32>:word64]
	Mem0[r29 + 24<i32>:word32] = r3
	Mem0[r29 + 16<i32>:word32] = r4
	Mem0[r29 + 20<i32>:word32] = r3
	call tensor_dup (retsize: 0;)
	branch r18 == 0<32> l000137EC
	// succ:  l000137D4 l000137EC
l000137D4:
	r18 = r0
	r2 = r16
	r1 = 0x54<32>
	r3 = 0x000137FC<p32>
	r17 = 0<32>
	call errlog_function (retsize: 0;)
	goto l00013828
	// succ:  l00013828
l000137EC:
	r17 = 0<32>
	r2 = 0<32>
	r1_r0 = SEQ(3<32>, r17)
	call alloc_node (retsize: 0;)
	r2 = r18 + 0x1C<32>
	branch p0 l00013818
	// succ:  l00013800 l00013818
l00013800:
	p0 = r0 == 0<32>
	r2 = r16
	r1 = 0x58<32>
	r3 = 0x00026D0B<p32>
	call errlog_function (retsize: 0;)
	goto l00013828
	// succ:  l00013828
l00013818:
	Mem0[r0 + 4<i32>:word32] = 0<32>
	Mem0[r0 + 20<i32>:word32] = 1<32>
	r17 = r0
	Mem0[r0 + 12<i32>:word32] = 0<32>
	Mem0[r0 + 16<i32>:word32] = 0<32>
	Mem0[r0 + 8<i32>:word32] = r2
	// succ:  l00013828
l00013828:
	r19_r18 = Mem0[r29 + 32<i32>:word64]
	r17_r16 = Mem0[r29 + 40<i32>:word64]
	r0 = r17
	v21 = r30
	r31 = Mem0[v21 + 4<i32>:word32]
	r30 = Mem0[v21:word32]
	r29 = v21 + 8<i32>
	return
	// succ:  hexagon_nn_const_ctor_exit
hexagon_nn_const_ctor_exit:


// errlog_function
// Return size: 0
define errlog_function
errlog_function_entry:
	r29 = fp
	// succ:  l00013834
l00013834:
	v4 = r29 - 8<i32>
	Mem0[v4:word32] = r30
	Mem0[v4 + 4<i32>:word32] = r31
	r30 = v4
	r29 = v4 - 8<i32>
	r4 = r3
	r0 = 0x00026CDD<p32>
	Mem0[r29 + 1<i32>:byte] = r6
	r6 = r29 + 0x10<32>
	r5 = r29 + 0x10<32>
	r3 = 0<32>
	v13 = r30
	r31 = Mem0[v13 + 4<i32>:word32]
	r30 = Mem0[v13:word32]
	r29 = v13 + 8<i32>
	return
	// succ:  errlog_function_exit
errlog_function_exit:


// const_execute
// Return size: 0
define const_execute
const_execute_entry:
	r29 = fp
	// succ:  l00013858
l00013858:
	return
	// succ:  const_execute_exit
const_execute_exit:


// const_check
// Return size: 0
define const_check
const_check_entry:
	r29 = fp
	// succ:  l00013860
l00013860:
	v4 = r29 - 8<i32>
	Mem0[v4:word32] = r30
	Mem0[v4 + 4<i32>:word32] = r31
	r30 = v4
	r29 = v4 - 16<i32>
	Mem0[r29 - 16<i32>:word64] = r17_r16
	r4 = 0x00026D5E<p32>
	r17 = r0
	r16 = r1
	r1 = 0x36<32>
	Mem0[r29:word32] = r17
	r3_r2 = SEQ(2<32>, r16)
	call logmsg_function (retsize: 0;)
	branch r2 == 0<32> l000138A4
	// succ:  l0001388C l000138A4
l0001388C:
	r2 = Mem0[r17 + 4<i32>:word32]
	r3 = 0<32>
	r1 = 0x38<32>
	r4 = 0x000138B9<p32>
	// succ:  l00013894
l00013894:
	Mem0[r29:word32] = r4
	r2 = r16
	call errlog_function (retsize: 0;)
	r0 = 0xFFFFFFFF<32>
	v17 = r30
	r31 = Mem0[v17 + 4<i32>:word32]
	r30 = Mem0[v17:word32]
	r29 = v17 + 8<i32>
	return
	// succ:  const_check_exit
l000138A4:
	branch r2 == 0<32> l000138BC
	// succ:  l000138B0 l000138BC
l000138B0:
	r2 = Mem0[r17 + 8<i32>:word32]
	r3 = 0<32>
	r1 = 0x3B<32>
	r4 = 0x000138CE<p32>
	goto l00013894
	// succ:  l00013894
l000138BC:
	branch r2 == 0<32> l000138D8
	// succ:  l000138CC l000138D8
l000138CC:
	r2 = Mem0[r2:word32]
	r1 = 0x40<32>
	r3 = 0<32>
	r1 = 0x3E<32>
	r4 = 0x000138E9<p32>
	goto l00013894
	// succ:  l00013894
l000138D8:
	Mem0[r29:word32] = r17
	r3_r2 = SEQ(2<32>, r16)
	r4 = 0x00026DC1<p32>
	call logmsg_function (retsize: 0;)
	r0 = 0<32>
	v18 = r30
	r31 = Mem0[v18 + 4<i32>:word32]
	r30 = Mem0[v18:word32]
	r29 = v18 + 8<i32>
	return
	// succ:  const_check_exit
const_check_exit:


// const_ctor
// Return size: 0
define const_ctor
const_ctor_entry:
	r29 = fp
	// succ:  l00013900
l00013900:
	r1 = 0x6D<32>
	r3_r2 = SEQ(0<32>, r0)
	r4 = 0x00026D2E<p32>
	v9 = r29 - 8<i32>
	Mem0[v9:word32] = r30
	Mem0[v9 + 4<i32>:word32] = r31
	r30 = v9
	r29 = v9 - 0<i32>
	call logmsg_function (retsize: 0;)
	v12 = r30
	r31 = Mem0[v12 + 4<i32>:word32]
	r30 = Mem0[v12:word32]
	r29 = v12 + 8<i32>
	return
	// succ:  const_ctor_exit
const_ctor_exit:


// const_dtor
// Return size: 0
define const_dtor
const_dtor_entry:
	r29 = fp
	// succ:  l00013920
l00013920:
	v4 = r29 - 8<i32>
	Mem0[v4:word32] = r30
	Mem0[v4 + 4<i32>:word32] = r31
	r30 = v4
	r29 = v4 - 16<i32>
	r3_r2 = SEQ(2<32>, r1)
	r4 = 0x00026D1B<p32>
	Mem0[r29 + 8<i32>:word64] = r17_r16
	r16 = r0
	r1 = 0x73<32>
	Mem0[r29:word32] = r16
	call logmsg_function (retsize: 0;)
	r2 = Mem0[r16 + 8<i32>:word32]
	r0 = Mem0[r2:word32]
	call tensor_free (retsize: 0;)
	r0 = r16
	call fn00009510 (retsize: 0;)
	v15 = r30
	r31 = Mem0[v15 + 4<i32>:word32]
	r30 = Mem0[v15:word32]
	r29 = v15 + 8<i32>
	return
	// succ:  const_dtor_exit
const_dtor_exit:


// logmsg_function
// Return size: 0
define logmsg_function
logmsg_function_entry:
	r29 = fp
	// succ:  l0001395C
l0001395C:
	v4 = r29 - 8<i32>
	Mem0[v4:word32] = r30
	Mem0[v4 + 4<i32>:word32] = r31
	r30 = v4
	r29 = v4 - 8<i32>
	branch r3 >u r5 l0001397C
	// succ:  l0001396C l0001397C
l0001396C:
	r5 = Mem0[r2 + 16<i32>:word32]
	r6 = r29 + 0x10<32>
	r5 = r29 + 0x10<32>
	r0 = 0x000139A1<p32>
	Mem0[r29 + 4<i32>:word32] = r6
	call logv (retsize: 0;)
	// succ:  l0001397C
l0001397C:
	v13 = r30
	r31 = Mem0[v13 + 4<i32>:word32]
	r30 = Mem0[v13:word32]
	r29 = v13 + 8<i32>
	return
	// succ:  logmsg_function_exit
logmsg_function_exit:


// conv2d_execute_hvx
// Return size: 0
define conv2d_execute_hvx
conv2d_execute_hvx_entry:
	r29 = fp
	// succ:  l00013980
l00013980:
	v4 = r29 - 8<i32>
	Mem0[v4:word32] = r30
	Mem0[v4 + 4<i32>:word32] = r31
	r30 = v4
	r29 = v4 - 184<i32>
	Mem0[r29 - 56<i32>:word64] = r27_r26
	r27 = r0
	Mem0[r29 + 160<i32>:word64] = r21_r20
	r2 = Mem0[r27 + 4<i32>:word32]
	Mem0[r29 + 152<i32>:word64] = r23_r22
	r3 = Mem0[r27 + 8<i32>:word32]
	r22 = Mem0[r2 + 4<i32>:word32]
	r21 = Mem0[r27 + 32<i32>:int8]
	r5 = Mem0[r2 + 24<i32>:word32]
	r20 = Mem0[r2:word32]
	Mem0[r29 + 168<i32>:word64] = r19_r18
	Mem0[r29 + 176<i32>:word64] = r17_r16
	p0 = r21 == 0<32>
	Mem0[r29 + 144<i32>:word64] = r25_r24
	r4 = Mem0[r3 + 8<i32>:word32]
	r3 = Mem0[r3 + 4<i32>:word32]
	r16 = Mem0[r3:word32]
	r23 = Mem0[r2 + 8<i32>:word32]
	r19 = Mem0[r2 + 12<i32>:word32]
	r18 = Mem0[r2 + 16<i32>:word32]
	r25 = Mem0[r2 + 20<i32>:word32]
	Mem0[r29 + 100<i32>:word32] = r1
	r2 = Mem0[r22 + 12<i32>:word32]
	r0 = Mem0[r20 + 8<i32>:word32]
	Mem0[r29 + 80<i32>:word32] = r3
	r7 = Mem0[r20 + 12<i32>:word32]
	Mem0[r29 + 116<i32>:word32] = r2
	r2 = Mem0[r22 + 8<i32>:word32]
	r3 = Mem0[r22 + 4<i32>:word32]
	r17 = Mem0[r20 + 4<i32>:word32]
	r24 = Mem0[r5 + 4<i32>:word32]
	r1 = Mem0[r5 + 8<i32>:word32]
	Mem0[r29 + 108<i32>:word32] = r7
	r6 = Mem0[r20:word32]
	r7 = Mem0[r22:word32]
	Mem0[r29 + 88<i32>:word32] = r5
	Mem0[r29 + 92<i32>:word32] = r2
	r2 = p0
	Mem0[r29 + 76<i32>:word32] = r4
	Mem0[r29 + 128<i32>:word32] = r0
	Mem0[r29 + 124<i32>:word32] = r7
	Mem0[r29 + 104<i32>:word32] = r6
	Mem0[r29 + 84<i32>:word32] = r2
	branch p0 l00013A3C
	// succ:  l00013A08 l00013A3C
l00013A08:
	r2 = Mem0[r29 - 128<i32>:word32]
	branch p0 l00013A34
	// succ:  l00013A10 l00013A34
l00013A10:
	p0 = r13 == 2<32>
	Mem0[r29 + 120<i32>:word32] = r3
	Mem0[r29 + 112<i32>:word32] = r1
	p0 = r21 == 1<32>
	r0 = 0<32>
	r1 = Mem0[r29 + 112<i32>:word32]
	r2 = Mem0[r29 - 128<i32>:word32]
	branch p0 l00013A44
	// succ:  l00013A28 l00013A44
l00013A28:
	r3 = Mem0[r29 + 120<i32>:word64]
	r0 = r1
	goto l00013A3C
	// succ:  l00013A3C
l00013A34:
	r2 = r2 - r3
	r0 = r2 + r1
	// succ:  l00013A3C
l00013A3C:
	Mem0[r29 + 120<i32>:word32] = r3
	Mem0[r29 + 112<i32>:word32] = r1
	call fn00009760 (retsize: 0;)
	// succ:  l00013A44
l00013A44:
	r2 = Mem0[r29 + 124<i32>:word32]
	r1 = r24 + 0<32>
	branch p0 l00013A80
	// succ:  l00013A50 l00013A80
l00013A50:
	p0 = r13 == 2<32>
	Mem0[r29 + 96<i32>:word32] = r0
	r26 = r24 + 0<32>
	branch p0 l00013A74
	// succ:  l00013A5C l00013A74
l00013A5C:
	p0 = r13 == 1<32>
	r1 = Mem0[r29 + 84<i32>:word64]
	r0 = 0<32>
	r1_r0 = r26_r17
	branch p0 l00013A94
	// succ:  l00013A6C l00013A94
l00013A6C:
	p0 = r1
	call fn00009760 (retsize: 0;)
	goto l00013A94
	// succ:  l00013A94
l00013A74:
	r1_r0 = r24_r24
	goto l00013A8C
	// succ:  l00013A8C
l00013A80:
	Mem0[r29 + 96<i32>:word32] = r0
	r2 = r17 - r2
	r0 = r2 + r24
	// succ:  l00013A8C
l00013A8C:
	r26 = r24
	call fn00009760 (retsize: 0;)
	// succ:  l00013A94
l00013A94:
	r3 = Mem0[r23 + 16<i32>:word32]
	r2 = Mem0[r19 + 16<i32>:word32]
	r19 = 0x437F0000<32>
	r4 = Mem0[r18 + 16<i32>:word32]
	r6 = Mem0[r22 + 16<i32>:word32]
	r24 = r0
	r21 = Mem0[r3:word32]
	r2 = Mem0[r2:word32]
	Mem0[r29 + 68<i32>:word32] = r6
	r5 = Mem0[r25 + 16<i32>:word32]
	r6 = Mem0[r16 + 16<i32>:word32]
	r7 = Mem0[r20 + 16<i32>:word32]
	r22 = r2 - r21
	Mem0[r29 + 84<i32>:word32] = r7
	Mem0[r29 + 48<i32>:word32] = r26
	r1_r0 = r19_r22
	Mem0[r29 + 72<i32>:word32] = r6
	r18 = Mem0[r5:word32]
	r25 = Mem0[r4:word32]
	call fn00009610 (retsize: 0;)
	r23 = r0
	r20 = r18 - r25
	r1_r0 = r19_r20
	call fn00009610 (retsize: 0;)
	r2 = 0xCF000000<32>
	r4 = r23 * r0
	r0 = r22
	r3 = 0x4F000000<32>
	r2 = r4 * r2
	Mem0[r29 + 15<i32>:byte] = r3
	r3 = r4 * r3
	Mem0[r29 + 56<i32>:word32] = r2
	r18 = 0<32>
	r1_r0 = r0_r19
	call fn00009610 (retsize: 0;)
	r2 = r18 - r21
	call fn00009620 (retsize: 0;)
	r0 = r2 * r0
	r0 = r20
	r2 = r0
	Mem0[r29 + 13<i32>:byte] = r2
	call fmaxf.1.0 (retsize: 0;)
	r2 = truncf(CONVERT(r2, uint32, real32))
	r2 = 0<32>
	r1_r0 = r0_r2
	call fn00009610 (retsize: 0;)
	r2 = r18 - r25
	call fn00009620 (retsize: 0;)
	r0 = r2 * r0
	r5 = Mem0[r27 + 28<i32>:word32]
	r22 = Mem0[r29 + 100<i32>:word32]
	r4 = 0x00026DF4<p32>
	Mem0[r29 + 4<i32>:word32] = r5
	r3_r2 = SEQ(2<32>, r22)
	r1 = 0x207<32>
	r7 = truncf(CONVERT(r0, uint32, real32))
	Mem0[r29:word32] = r27
	Mem0[r29 + 64<i32>:word32] = r7
	call logmsg_function (retsize: 0;)
	r21 = Mem0[r29 + 104<i32>:word64]
	r19 = Mem0[r29 + 108<i32>:word64]
	r4 = 0x00026E12<p32>
	Mem0[r29 + 12<i32>:word32] = r19
	r5 = Mem0[r29 + 128<i32>:word32]
	r3_r2 = SEQ(2<32>, r22)
	Mem0[r29 + 4<i32>:word32] = r17
	Mem0[r29 + 8<i32>:word32] = r5
	r1 = 0x208<32>
	Mem0[r29:word32] = r21
	call logmsg_function (retsize: 0;)
	r5 = Mem0[r29 + 120<i32>:word32]
	r25 = Mem0[r29 + 92<i32>:word32]
	r4 = 0x00026E2B<p32>
	Mem0[r29 + 12<i32>:word32] = r25
	r3_r2 = SEQ(2<32>, r22)
	Mem0[r29 + 8<i32>:word32] = r5
	r20 = Mem0[r29 + 124<i32>:word64]
	r1 = 0x209<32>
	Mem0[r29 + 4<i32>:word32] = r20
	r18 = Mem0[r29 + 116<i32>:word32]
	Mem0[r29:word32] = r18
	call logmsg_function (retsize: 0;)
	r5 = Mem0[r29 + 112<i32>:word32]
	r1 = 0x20A<32>
	r4 = 0x00026E43<p32>
	Mem0[r29:word32] = r26
	Mem0[r29 + 4<i32>:word32] = r5
	r3_r2 = SEQ(2<32>, r22)
	call logmsg_function (retsize: 0;)
	r1 = 0x20B<32>
	r3_r2 = SEQ(2<32>, r22)
	r4 = 0x00026E57<p32>
	Mem0[r29:byte] = r5
	r5 = Mem0[r27 + 32<i32>:byte]
	call logmsg_function (retsize: 0;)
	Mem0[r29:word32] = r21
	Mem0[r29 + 12<i32>:word32] = r18
	r4 = 0x00013C2D<p32>
	Mem0[r29 + 4<i32>:word32] = r24
	r23 = Mem0[r29 + 96<i32>:word32]
	r3_r2 = SEQ(2<32>, r22)
	Mem0[r29 + 8<i32>:word32] = r23
	r1 = 0x20C<32>
	call logmsg_function (retsize: 0;)
	r9 = r17
	r1 = 0x20D<32>
	r3 = 0x00026E88<p32>
	branch r12 == r25 l00013CEC
	// succ:  l00013C58 l00013CEC
l00013C58:
	r12 = r19
	r2 = r21 * r18
	r2 = r2 * r23
	r2 = r2 * r24
	branch r4 >u r5 l00013C84
	// succ:  l00013C6C l00013C84
l00013C6C:
	r4 = r2 << 2<32>
	Mem0[r29 + 2<i32>:byte] = r2
	r2 = Mem0[r27 + 28<i32>:word32]
	r3 = 0x00013C8D<p32>
	Mem0[r29:word32] = r5
	Mem0[r29 + 4<i32>:word32] = r4
	goto l00013CF0
	// succ:  l00013CF0
l00013C84:
	r2 = Mem0[r29 + 88<i32>:word64]
	r19 = r23
	r1 = 0x211<32>
	r23 = r24
	r3 = 0x00026EB7<p32>
	branch r2 == 1<32> l00013CEC
	// succ:  l00013CA4 l00013CEC
l00013CA4:
	r2 = Mem0[r2:word32]
	r2 = Mem0[r29 + 88<i32>:word32]
	r1 = 0x212<32>
	r3 = 0x00013CCC<p32>
	branch r2 == 1<32> l00013CEC
	// succ:  l00013CBC l00013CEC
l00013CBC:
	r2 = Mem0[r2 + 12<i32>:word32]
	r2 = Mem0[r29 + 80<i32>:word64]
	r5 = 4<32>
	r3 = 0x00013CDD<p32>
	r1 = 0x213<32>
	branch r5 >u r2 l00013CEC
	// succ:  l00013CD4 l00013CEC
l00013CD4:
	r2 = Mem0[r2 + 20<i32>:word32]
	r2 = Mem0[r29 + 76<i32>:word32]
	r1 = 0x214<32>
	r3 = 0x00013CEB<p32>
	branch r2 >u 3<32> l00013CFC
	goto l00013CF0
	// succ:  l00013CF0 l00013CFC
l00013CEC:
	r2 = r22
	// succ:  l00013CF0
l00013CF0:
	call errlog_function (retsize: 0;)
	r0 = 0xFFFFFFFF<32>
	goto l00014018
	// succ:  l00014018
l00013CFC:
	Mem0[r7 + 12<i32>:word32] = r18
	r2 = Mem0[r29 + 120<i32>:word64]
	r27 = r6 & 0xFFFFFFF8<32>
	r1 = 0x20<32>
	Mem0[r7:word32] = r21
	Mem0[r7 + 8<i32>:word32] = r19
	r15 = 0<32>
	r3 = r2 * r20
	Mem0[r7 + 4<i32>:word32] = r23
	r17 = r22
	r3 = r3 * r12
	r5 = 0xF<32> + r3 * r12
	Mem0[r7 + 24<i32>:word32] = r4
	r7 = Mem0[r29 + 80<i32>:word64]
	r5 = r5 & 0xFFFFFFF0<32>
	r6 = r18 + 0x1F<32>
	r2 = Mem0[r29 + 56<i32>:word32]
	r8 = Mem0[r29 + 76<i32>:word32]
	r24 = r6 & 0xFFFFFFE0<32>
	r5 = max<int32>(r5, r1)
	r13 = Mem0[r29 + 60<i32>:word32]
	r6 = r24 << 2<32>
	Mem0[r7 + 4<i32>:word32] = 1<32>
	r4 = Mem0[r7 + 16<i32>:word32]
	Mem0[r7 + 12<i32>:word32] = 1<32>
	Mem0[r7 + 8<i32>:word32] = 1<32>
	Mem0[r4:word32] = r2
	Mem0[r7:word32] = 1<32>
	r0 = r5
	r4 = r27 << 2<32>
	Mem0[r8 + 4<i32>:word32] = 0xFFFFFF81<32>
	Mem0[r7 + 24<i32>:word32] = 4<32>
	r2 = r0 * r24
	r28 = r27 * r0
	Mem0[r8 + 8<i32>:word32] = 1<32>
	r1 = Mem0[r8 + 16<i32>:word32]
	r7 = r2 | 0x7F<32>
	r22 = r28
	Mem0[r8:word32] = 1<32>
	Mem0[r8 + 12<i32>:word32] = 0xFFFFFF81<32>
	Mem0[r8 + 24<i32>:word32] = 4<32>
	Mem0[r1:word32] = r13
	r13 = 0xFF<32>
	Mem0[r29 + 32<i32>:word32] = r5
	r26 = Mem0[r17 + 4<i32>:word32]
	r5 = r7
	Mem0[r29 + 60<i32>:word32] = r3
	r14 = Mem0[r29 + 64<i32>:word32]
	r8 = r26
	Mem0[r29 + 56<i32>:word32] = r2
	p0 = r14 > 0xFF<32>
	r8 = r8 + (r22 + 0x7F<32>)
	r2 = r27 * r24
	Mem0[r29 + 44<i32>:word32] = r9
	p1 = r14 > 0xFFFFFFFF<32>
	r8 = r8 & 0xFFFFFF80<32>
	r3 = r2 << 2<32>
	Mem0[r29 + 64<i32>:word32] = r3
	Mem0[r29 + 92<i32>:word32] = r8
	r8 = r8 + 0x17F<32>
	r2 = 0x80<32> + (r2 << 4<32>)
	r8 = r8 & 0xFFFFFF80<32>
	r18 = r13 + 0<32>
	Mem0[r29 + 88<i32>:word32] = r8
	r18 = CONVERT(SLICE(r14, byte, 0), byte, uint32)
	r8 = r8 + (r4 + 0x7F<32>)
	r0 = r8 & 0xFFFFFF80<32>
	r18 = r15 + 0<32>
	Mem0[r29 + 80<i32>:word32] = r0
	r20 = r0 + (r24 << 2<32>)
	r5 = r5 + (r6 + r0)
	r25 = r5 & 0xFFFFFF80<32>
	Mem0[r29 + 76<i32>:word32] = r25
	r3 = r25 + r7
	r21 = r3 & 0xFFFFFF80<32>
	r1_r0 = SEQ(0<32>, r21)
	call fn000095F0 (retsize: 0;)
	Mem0[r29 + 4<i32>:word32] = r26
	r3_r2 = SEQ(2<32>, r17)
	r4 = 0x00027068<p32>
	Mem0[r29:word32] = r22
	r16 = r26
	r1 = 0x23B<32>
	call logmsg_function (retsize: 0;)
	r1 = 0x23C<32>
	r3_r2 = SEQ(2<32>, r17)
	r4 = 0x00027083<p32>
	Mem0[r29 + 4<i32>:word32] = r20
	r5 = Mem0[r29 + 56<i32>:word64]
	Mem0[r29:word32] = r5
	call logmsg_function (retsize: 0;)
	r1 = 0x23D<32>
	r3_r2 = SEQ(2<32>, r17)
	r4 = 0x00027097<p32>
	Mem0[r29 + 4<i32>:word32] = r21
	r5 = Mem0[r29 + 64<i32>:word64]
	r22 = r21
	Mem0[r29:word32] = r5
	r17 = Mem0[r29 + 128<i32>:word32]
	call logmsg_function (retsize: 0;)
	r2 = Mem0[r29 + 116<i32>:word64]
	r21 = Mem0[r29 + 32<i32>:word64]
	r3 = r20
	r0 = Mem0[r29 + 68<i32>:word64]
	r1 = Mem0[r29 + 60<i32>:word64]
	r5_r4 = r24_r21
	Mem0[r29:word32] = r18
	call pad2d (retsize: 0;)
	r24 = r21
	r26 = r24
	r1_r0 = r21_r20
	r3_r2 = r25_r24
	call transpack (retsize: 0;)
	r7 = Mem0[r29 + 120<i32>:word64]
	r2 = Mem0[r29 + 104<i32>:word64]
	r12 = r23
	r9 = r19
	r8 = Mem0[r29 + 112<i32>:word32]
	r3 = Mem0[r29 + 108<i32>:word32]
	r4 = r12 + 0xFFFFFFFF<32>
	r6 = r7 - r17
	r20 = Mem0[r29 + 72<i32>:word64]
	r19 = Mem0[r29 + 84<i32>:word64]
	branch p0 l00013FE8
	// succ:  l00013EC8 l00013FE8
l00013EC8:
	p0 = r2 > 0<32>
	r5 = Mem0[r29 + 124<i32>:word32]
	r13 = Mem0[r29 + 44<i32>:word32]
	r2 = r9 + 0xFFFFFFFF<32>
	r15 = r12 * r9
	r1 = Mem0[r29 + 52<i32>:word64]
	r0 = Mem0[r29 + 48<i32>:word64]
	r14 = 0<32> - r18
	r5 = r5 - r13
	p0 = r1 > 0xFFFFFFFF<32>
	p1 = r1 > 0xFF<32>
	r6 = 0xFF<32>
	r2 = r6 + r2 * r8
	Mem0[r29 + 60<i32>:word32] = r14
	Mem0[r29 + 64<i32>:word32] = r15
	r5 = r13 * r17
	r4 = r5 + r4 * r0
	r17 = Mem0[r29 + 104<i32>:word64]
	r1 = Mem0[r29 + 116<i32>:word64]
	r6 = CONVERT(SLICE(r1, byte, 0), byte, uint32)
	r2 = r2 + (r2 >>u 0x1F<32>)
	Mem0[r29 + 13<i32>:byte] = r5
	r4 = r4 + (r4 >>u 0x1F<32>)
	r5 = r5 * r3
	r5 = 0<32>
	r2 = r2 >> 1<32>
	Mem0[r29 + 40<i32>:word32] = r2
	Mem0[r29 + 56<i32>:word32] = r0
	r6 = r5 + 0<32>
	Mem0[r29 + 68<i32>:word32] = r6
	r1 = 0<32> - r6
	r6 = r4 >> 1<32>
	Mem0[r29 + 36<i32>:word32] = r6
	Mem0[r29 + 48<i32>:word32] = r1
	// succ:  l00013F40
l00013F40:
	Mem0[r29 + 6<i32>:byte] = r2
	r2 = Mem0[r29 + 36<i32>:word32]
	r0 = r19
	r5 = r16
	r1 = Mem0[r29 + 44<i32>:word64]
	r6 = Mem0[r29 + 40<i32>:word64]
	r18 = r12
	Mem0[r29 + 16<i32>:word32] = r9
	Mem0[r29 + 20<i32>:word32] = r6
	r21 = r8
	r4 = Mem0[r29 + 68<i32>:word64]
	r23 = r7
	Mem0[r29 + 12<i32>:word32] = r12
	r2 = Mem0[r29 + 128<i32>:word32]
	Mem0[r29 + 8<i32>:word32] = r8
	Mem0[r29 + 4<i32>:word32] = r7
	r6 = Mem0[r29 + 124<i32>:word64]
	Mem0[r29:word32] = r6
	call im2col_co (retsize: 0;)
	r1 = Mem0[r29 + 48<i32>:word64]
	r2 = Mem0[r29 + 92<i32>:word64]
	r5_r4 = r27_r22
	Mem0[r29 + 28<i32>:word32] = r2
	r7 = Mem0[r29 + 80<i32>:word64]
	r0 = r16
	Mem0[r29 + 24<i32>:word32] = r7
	r2 = Mem0[r29 + 88<i32>:word64]
	Mem0[r29 + 16<i32>:word32] = r24
	Mem0[r29 + 20<i32>:word32] = r2
	r2 = Mem0[r29 + 76<i32>:word64]
	r3 = Mem0[r29 + 60<i32>:word64]
	Mem0[r29 + 4<i32>:word32] = r24
	Mem0[r29 + 8<i32>:word32] = r27
	Mem0[r29 + 12<i32>:word32] = 0xFFFFFFA0<32>
	Mem0[r29:word32] = r26
	call gemm_asm (retsize: 0;)
	r4 = Mem0[r29 + 64<i32>:word64]
	r5 = Mem0[r29 + 116<i32>:word64]
	r1_r0 = r27_r22
	r3_r2 = r20_r26
	call unpad2d (retsize: 0;)
	r6 = Mem0[r29 + 52<i32>:word64]
	r2 = Mem0[r29 + 56<i32>:word64]
	r9_r8 = r25_r21
	r12 = r18
	r3 = Mem0[r29 + 108<i32>:word64]
	r7 = r23
	r19 = r19 + r6
	branch r17 == 0<32> l00013F40
	goto l00013FEC
	// succ:  l00013FEC l00013F40
l00013FE8:
	Mem0[r29 + 3<i32>:byte] = r2
	r2 = Mem0[r29 + 116<i32>:word32]
	r4 = 0x000270AA<p32>
	goto l00013FFC
	// succ:  l00013FFC
l00013FEC:
	r17 = r17 + 0xFFFFFFFF<32>
	r20 = r20 + (r2 << 2<32>)
	Mem0[r29 + 3<i32>:byte] = r2
	r2 = Mem0[r29 + 116<i32>:word32]
	r4 = 0x00013FEE<p32>
	// succ:  l00013FFC
l00013FFC:
	Mem0[r29 + 8<i32>:word32] = r9
	r2 = Mem0[r29 + 100<i32>:word32]
	r1 = 0x259<32>
	Mem0[r29:word32] = r5
	Mem0[r29 + 4<i32>:word32] = r12
	call logmsg_function (retsize: 0;)
	r0 = 0<32>
	// succ:  l00014018
l00014018:
	r19_r18 = Mem0[r29 + 168<i32>:word64]
	r17_r16 = Mem0[r29 + 176<i32>:word64]
	r23_r22 = Mem0[r29 + 152<i32>:word64]
	r21_r20 = Mem0[r29 + 160<i32>:word64]
	r27_r26 = Mem0[r29 + 136<i32>:word64]
	r25_r24 = Mem0[r29 + 144<i32>:word64]
	v47 = r30
	r31 = Mem0[v47 + 4<i32>:word32]
	r30 = Mem0[v47:word32]
	r29 = v47 + 8<i32>
	return
	// succ:  conv2d_execute_hvx_exit
conv2d_execute_hvx_exit:


// conv2d_check_ref
// Return size: 0
define conv2d_check_ref
conv2d_check_ref_entry:
	r29 = fp
	// succ:  l0001402C
l0001402C:
	v4 = r29 - 8<i32>
	Mem0[v4:word32] = r30
	Mem0[v4 + 4<i32>:word32] = r31
	r30 = v4
	r29 = v4 - 48<i32>
	Mem0[r29 - 16<i32>:word64] = r17_r16
	r4 = 0x00026F33<p32>
	r17 = r0
	r16 = r1
	r1 = 0x271<32>
	Mem0[r29:word32] = r17
	Mem0[r29 + 32<i32>:word64] = r19_r18
	r3_r2 = SEQ(2<32>, r16)
	call logmsg_function (retsize: 0;)
	branch r2 == 7<32> l0001406C
	// succ:  l00014058 l0001406C
l00014058:
	r2 = Mem0[r17 + 16<i32>:word32]
	r2 = Mem0[r17 + 28<i32>:word32]
	r1 = 0x272<32>
	r3 = 0x0001408F<p32>
	Mem0[r29:word32] = r2
	goto l00014080
	// succ:  l00014080
l0001406C:
	branch r2 == 3<32> l00014090
	// succ:  l0001407C l00014090
l0001407C:
	r2 = Mem0[r17 + 20<i32>:word32]
	r1 = 0x273<32>
	r3 = 0x000140AB<p32>
	// succ:  l00014080
l00014080:
	r2 = r16
	call errlog_function (retsize: 0;)
	// succ:  l00014084
l00014084:
	r0 = 0xFFFFFFFF<32>
	goto l000141A8
	// succ:  l000141A8
l00014090:
	branch r3 == 0<32> l000140A8
	// succ:  l000140A0 l000140A8
l000140A0:
	r3 = Mem0[r17 + 4<i32>:word32]
	r1 = 0x274<32>
	goto l00014084
	// succ:  l00014084
l000140A8:
	r2 = Mem0[r17 + 8<i32>:word32]
	r4 = 0<32>
	r1 = 0x275<32>
	branch p0 l000140D8
	// succ:  l000140B8 l000140D8
l000140B8:
	p0 = r2 == 0<32>
	__loop(0<i32>, 0x000140BC<p32>, 7<32>)
	branch r5 == 0<32> l000140E4
	// succ:  l000140C8 l000140E4
l000140C8:
	r5 = Mem0[r3:word32]
	Mem0[r29:word32] = r4
	r1 = 0x278<32>
	r3 = 0x000140DB<p32>
	goto l00014080
	// succ:  l00014080
l000140D8:
	goto l00014080
	// succ:  l00014080
l000140E4:
	r4 = r4
	r3 = r3 + 4<32>
	goto l000140FC
	// succ:  l000140FC
l000140F0:
	branch r4 >u 2<32> l00014118
l000140F4:
	branch r4 >u 2<32> l0001411C
	// succ:  l00014100 l00014118 l0001411C
l000140FC:
	branch r3 == 0<32> l000140F0
	goto l00014108
	// succ:  l00014108 l000140F0
l00014100:
	r4 = r4 + 1<32>
	r2 = r2 + 4<32>
	branch r3 == 0<32> l000140F4
	// succ:  l00014108 l000140F4
l00014108:
	r3 = Mem0[r2:word32]
	Mem0[r29:word32] = r4
	r1 = 0x27D<32>
	r3 = 0x00014129<p32>
	goto l00014080
	// succ:  l00014080
l00014118:
	r1 = 0x282<32>
	r3_r2 = SEQ(3<32>, r16)
	r4 = 0x00026FB4<p32>
	// succ:  l0001411C
l0001411C:
	Mem0[r29:word32] = r17
	call logmsg_function (retsize: 0;)
	branch r2 == 0<32> l0001418C
l0001413C:
	r2 = Mem0[r17 + 4<i32>:word32]
	r1 = 0x26B<32>
	r4 = 0x0002701B<p32>
	// succ:  l00014140 l0001418C l0001414C
l00014140:
	r2 = Mem0[r17 + 16<i32>:word32]
	r19_r18 = 0<64>
	r2 = Mem0[r17 + 4<i32>:word32]
	r1 = 0x26B<32>
	r4 = 0x0001415F<p32>
	// succ:  l0001414C
l0001414C:
	r2 = Mem0[r13 + r18:word32]
	r6 = Mem0[r2:word32]
	r5 = Mem0[r2 + 16<i32>:word32]
	r8 = Mem0[r2 + 8<i32>:word32]
	r7 = Mem0[r2 + 4<i32>:word32]
	r2 = Mem0[r2 + 24<i32>:word32]
	r9 = Mem0[r2 + 12<i32>:word32]
	Mem0[r29 + 8<i32>:word32] = r7
	Mem0[r29 + 24<i32>:word32] = r5
	Mem0[r29 + 4<i32>:word32] = r6
	Mem0[r29 + 20<i32>:word32] = r2
	r3_r2 = SEQ(3<32>, r16)
	Mem0[r29 + 12<i32>:word32] = r8
	Mem0[r29 + 16<i32>:word32] = r9
	Mem0[r29:word32] = r19
	call logmsg_function (retsize: 0;)
	r2 = Mem0[r17 + 16<i32>:word32]
	r18 = r18 + 4<32>
	branch r2 >u r19 l0001413C
	goto l00014190
	// succ:  l00014190 l0001413C
l0001418C:
	r1 = 0x286<32>
	r3_r2 = SEQ(2<32>, r16)
	r4 = 0x00027003<p32>
	goto l0001419C
	// succ:  l0001419C
l00014190:
	r19 = r19 + 1<32>
	r1 = 0x286<32>
	r3_r2 = SEQ(2<32>, r16)
	r4 = 0x000141C7<p32>
	// succ:  l0001419C
l0001419C:
	Mem0[r29:word32] = r17
	call logmsg_function (retsize: 0;)
	r0 = 0<32>
	// succ:  l000141A8
l000141A8:
	r19_r18 = Mem0[r29 + 32<i32>:word64]
	r17_r16 = Mem0[r29 + 40<i32>:word64]
	v18 = r30
	r31 = Mem0[v18 + 4<i32>:word32]
	r30 = Mem0[v18:word32]
	r29 = v18 + 8<i32>
	return
	// succ:  conv2d_check_ref_exit
conv2d_check_ref_exit:


// conv2d_ctor
// Return size: 0
define conv2d_ctor
conv2d_ctor_entry:
	r29 = fp
	// succ:  l000141B0
l000141B0:
	v4 = r29 - 8<i32>
	Mem0[v4:word32] = r30
	Mem0[v4 + 4<i32>:word32] = r31
	r30 = v4
	r29 = v4 - 40<i32>
	Mem0[r29 - 24<i32>:word64] = r19_r18
	r6 = 0x00026F1C<p32>
	r19_r18 = r0_r4
	Mem0[r29 + 16<i32>:word64] = r21_r20
	Mem0[r29 + 32<i32>:word64] = r17_r16
	r21_r20 = r2_r5
	r17_r16 = r3_r1
	r4 = r6
	r3_r2 = SEQ(2<32>, r19)
	r1 = 0x295<32>
	Mem0[r29 + 8<i32>:word64] = r23_r22
	r22 = Mem0[r29 + 48<i32>:word64]
	r23 = Mem0[r29 + 52<i32>:word32]
	Mem0[r29:word32] = r16
	call logmsg_function (retsize: 0;)
	Mem0[r29 + 4<i32>:word32] = r23
	r1_r0 = r16_r19
	r3_r2 = r17_r21
	r5_r4 = r20_r18
	Mem0[r29:word32] = r22
	call node_alloc_common (retsize: 0;)
	r17_r16 = Mem0[r29 + 32<i32>:word64]
	r21_r20 = Mem0[r29 + 16<i32>:word64]
	r19_r18 = Mem0[r29 + 24<i32>:word64]
	v36 = r30
	r31 = Mem0[v36 + 4<i32>:word32]
	r30 = Mem0[v36:word32]
	r29 = v36 + 8<i32>
	return
	// succ:  conv2d_ctor_exit
conv2d_ctor_exit:


// conv2d_execute_ref
// Return size: 0
define conv2d_execute_ref
conv2d_execute_ref_entry:
	r29 = fp
	// succ:  l0001420C
l0001420C:
	v4 = r29 - 8<i32>
	Mem0[v4:word32] = r30
	Mem0[v4 + 4<i32>:word32] = r31
	r30 = v4
	r29 = v4 - 136<i32>
	r3 = Mem0[r0 + 8<i32>:word32]
	r2 = Mem0[r0 + 4<i32>:word32]
	Mem0[r29 + 120<i32>:word64] = r19_r18
	Mem0[r29 + 96<i32>:word64] = r25_r24
	r18 = Mem0[r2:word32]
	r25 = Mem0[r0 + 32<i32>:int8]
	Mem0[r29 + 104<i32>:word64] = r23_r22
	r23 = Mem0[r2 + 4<i32>:word32]
	p0 = r25 == 0<32>
	r7 = Mem0[r2 + 8<i32>:word32]
	r5 = Mem0[r2 + 24<i32>:word32]
	Mem0[r29 + 88<i32>:word64] = r27_r26
	Mem0[r29 + 112<i32>:word64] = r21_r20
	r4 = Mem0[r2 + 12<i32>:word32]
	Mem0[r29 + 60<i32>:word32] = r7
	r7 = Mem0[r3 + 8<i32>:word32]
	r3 = Mem0[r3 + 4<i32>:word32]
	r20 = Mem0[r3:word32]
	Mem0[r29 + 128<i32>:word64] = r17_r16
	r27 = Mem0[r18 + 8<i32>:word32]
	Mem0[r29 + 32<i32>:word32] = r1
	Mem0[r29 + 72<i32>:word32] = r0
	r0 = r27
	Mem0[r29 + 64<i32>:word32] = r4
	r4 = Mem0[r2 + 20<i32>:word32]
	Mem0[r29 + 36<i32>:word32] = r3
	r24 = Mem0[r2 + 16<i32>:word32]
	r17 = Mem0[r18 + 4<i32>:word32]
	r2 = Mem0[r23 + 8<i32>:word32]
	r16 = Mem0[r23 + 12<i32>:word32]
	r19 = Mem0[r18 + 12<i32>:word32]
	r22 = Mem0[r23 + 4<i32>:word32]
	r21 = Mem0[r23:word32]
	r3 = Mem0[r5 + 4<i32>:word32]
	r1 = Mem0[r5 + 8<i32>:word32]
	Mem0[r29 + 24<i32>:word32] = r7
	r7 = Mem0[r18:word32]
	Mem0[r29 + 40<i32>:word32] = r5
	Mem0[r29 + 80<i32>:word32] = r2
	r2 = p0
	Mem0[r29 + 28<i32>:word32] = r7
	Mem0[r29 + 56<i32>:word32] = r4
	Mem0[r29 + 48<i32>:word32] = r2
	r2 = r27 - r22
	branch p0 l000142B0
	// succ:  l0001428C l000142B0
l0001428C:
	r0 = r2 + r1
	p0 = r25 == 2<32>
	branch p0 l000142B0
	// succ:  l00014298 l000142B0
l00014298:
	Mem0[r29 + 68<i32>:word32] = r1
	r0 = 0<32>
	p0 = r25 == 1<32>
	branch p0 l000142C0
	// succ:  l000142A4 l000142C0
l000142A4:
	r1 = Mem0[r29 + 68<i32>:word32]
	r0 = r1
	r0 = r0 + (r27 + 0xFFFFFFFF<32>)
	// succ:  l000142B0
l000142B0:
	Mem0[r29 + 68<i32>:word32] = r1
	r26 = r3
	call fn00009760 (retsize: 0;)
	r3 = r26
	// succ:  l000142C0
l000142C0:
	Mem0[r29 + 76<i32>:word32] = r0
	p0 = r25 == 2<32>
	r2 = r17 - r21
	branch p0 l000142FC
	// succ:  l000142D0 l000142FC
l000142D0:
	r1_r0 = r3_r3
	r25 = r3 + 0<32>
	p0 = r25 == 1<32>
	branch p0 l000142F4
	// succ:  l000142E0 l000142F4
l000142E0:
	r1 = Mem0[r29 + 48<i32>:word64]
	r0 = 0<32>
	r1_r0 = r25_r17
	branch p0 l0001430C
	// succ:  l000142F0 l0001430C
l000142F0:
	p0 = r1
	goto l00014308
	// succ:  l00014308
l000142F4:
	goto l00014304
	// succ:  l00014304
l000142FC:
	Mem0[r29 + 76<i32>:word32] = r0
	r1 = r3
	r0 = r2 + r3
	// succ:  l00014304
l00014304:
	r25 = r3
	// succ:  l00014308
l00014308:
	call fn00009760 (retsize: 0;)
	// succ:  l0001430C
l0001430C:
	r3 = Mem0[r29 + 60<i32>:word64]
	r2 = Mem0[r29 + 64<i32>:word64]
	r26 = 0x437F0000<32>
	r5 = Mem0[r29 + 56<i32>:word64]
	r6 = Mem0[r23 + 16<i32>:word32]
	r3 = Mem0[r3 + 16<i32>:word32]
	r2 = Mem0[r2 + 16<i32>:word32]
	Mem0[r29 + 64<i32>:word32] = r6
	r6 = Mem0[r20 + 16<i32>:word32]
	Mem0[r29 + 52<i32>:word32] = r20
	r2 = Mem0[r2:word32]
	r4 = Mem0[r24 + 16<i32>:word32]
	r20 = Mem0[r3:word32]
	Mem0[r29 + 48<i32>:word32] = r0
	r5 = Mem0[r5 + 16<i32>:word32]
	r24 = r2 - r20
	Mem0[r29 + 44<i32>:word32] = r25
	r25 = Mem0[r18 + 16<i32>:word32]
	r1_r0 = r26_r24
	Mem0[r29 + 60<i32>:word32] = r6
	r18 = Mem0[r5:word32]
	r23 = Mem0[r4:word32]
	call fn00009610 (retsize: 0;)
	Mem0[r29 + 56<i32>:word32] = r0
	r18 = r26
	r2 = r18 - r23
	r26 = r2
	r1_r0 = r26_r2
	call fn00009610 (retsize: 0;)
	r4 = Mem0[r29 + 56<i32>:word64]
	r2 = 0xCF000000<32>
	r3 = 0x4F000000<32>
	r0 = r24
	r4 = r4 * r0
	r2 = r4 * r2
	r3 = r4 * r3
	Mem0[r29 + 20<i32>:word32] = r2
	Mem0[r29 + 56<i32>:word32] = r3
	call fmaxf.1.0 (retsize: 0;)
	r1_r0 = r0_r18
	call fn00009610 (retsize: 0;)
	r3 = 0<32>
	r20 = r3
	r2 = r3 - r20
	call fn00009620 (retsize: 0;)
	r0 = r2 * r0
	r0 = r26
	r2 = r0
	call fmaxf.1.0 (retsize: 0;)
	r24 = truncf(CONVERT(r2, uint32, real32))
	r1_r0 = r0_r18
	call fn00009610 (retsize: 0;)
	r2 = r20 - r23
	call fn00009620 (retsize: 0;)
	r0 = r2 * r0
	r20 = Mem0[r29 + 32<i32>:word32]
	r26 = Mem0[r29 + 72<i32>:word32]
	r4 = 0x00026DF4<p32>
	r3_r2 = SEQ(2<32>, r20)
	r1 = 0x174<32>
	r18 = truncf(CONVERT(r0, uint32, real32))
	Mem0[r29 + 1<i32>:byte] = r5
	r5 = Mem0[r26 + 28<i32>:word32]
	Mem0[r29:word32] = r26
	Mem0[r29 + 12<i32>:word32] = r19
	r3_r2 = SEQ(2<32>, r20)
	r4 = 0x00026E12<p32>
	Mem0[r29 + 4<i32>:word32] = r17
	r1 = 0x175<32>
	Mem0[r29 + 8<i32>:word32] = r27
	r23 = Mem0[r29 + 28<i32>:word32]
	Mem0[r29:word32] = r23
	call logmsg_function (retsize: 0;)
	Mem0[r29 + 4<i32>:word32] = r21
	r2 = Mem0[r29 + 80<i32>:word64]
	r4 = 0x00026E2B<p32>
	Mem0[r29 + 12<i32>:word32] = r2
	r3_r2 = SEQ(2<32>, r20)
	r1 = 0x176<32>
	Mem0[r29:word32] = r16
	Mem0[r29 + 8<i32>:word32] = r22
	call logmsg_function (retsize: 0;)
	r7 = Mem0[r29 + 68<i32>:word32]
	r3_r2 = SEQ(2<32>, r20)
	r4 = 0x00026E43<p32>
	r1 = 0x177<32>
	Mem0[r29 + 4<i32>:word32] = r7
	r5 = Mem0[r29 + 44<i32>:word64]
	Mem0[r29:word32] = r5
	call logmsg_function (retsize: 0;)
	r1 = 0x178<32>
	r3_r2 = SEQ(2<32>, r20)
	r4 = 0x00026E57<p32>
	r26 = Mem0[r29 + 48<i32>:word32]
	r5 = Mem0[r26 + 32<i32>:byte]
	Mem0[r29:word32] = r5
	call logmsg_function (retsize: 0;)
	Mem0[r29:word32] = r23
	Mem0[r29 + 12<i32>:word32] = r16
	r3_r2 = SEQ(2<32>, r20)
	Mem0[r29 + 4<i32>:word32] = r26
	r20 = Mem0[r29 + 76<i32>:word32]
	r4 = 0x00026E69<p32>
	Mem0[r29 + 8<i32>:word32] = r20
	r1 = 0x179<32>
	call logmsg_function (retsize: 0;)
	r1 = 0x17A<32>
	r7_r6 = r20_r23
	r3 = 0x00026E88<p32>
	branch r2 == r19 l00014560
	// succ:  l000144CC l00014560
l000144CC:
	r2 = Mem0[r29 + 80<i32>:word32]
	r5 = r26
	r3 = Mem0[r29 + 52<i32>:word32]
	r4 = Mem0[r3 + 20<i32>:word32]
	r2 = r2 * r20
	r2 = r2 * r26
	branch r2 >u r4 l000144FC
	// succ:  l000144E8 l000144FC
l000144E8:
	r2 = r2 << 2<32>
	Mem0[r29 + 4<i32>:word32] = r2
	r1 = 0x17C<32>
	r3 = 0x00014521<p32>
	Mem0[r29:word32] = r4
	r2 = Mem0[r29 + 32<i32>:word64]
	goto l00014564
	// succ:  l00014564
l000144FC:
	r4 = Mem0[r29 + 40<i32>:word32]
	r1 = 0x17E<32>
	r9_r8 = r5_r3
	r3 = 0x00026EB7<p32>
	branch r4 == 1<32> l00014560
	// succ:  l0001451C l00014560
l0001451C:
	r4 = Mem0[r4:word32]
	r3 = Mem0[r29 + 40<i32>:word32]
	r4 = Mem0[r3 + 12<i32>:word32]
	r3 = 0x00026EC8<p32>
	branch p0 l00014560
	// succ:  l00014530 l00014560
l00014530:
	p0 = r4 == 1<32>
	r3 = Mem0[r29 + 36<i32>:word64]
	r5 = 4<32>
	r1 = 0x180<32>
	r4 = Mem0[r3 + 20<i32>:word32]
	r3 = 0x00026ED9<p32>
	branch p0 l00014560
	// succ:  l00014548 l00014560
l00014548:
	p0 = r5 >u r4
	r3 = Mem0[r29 + 24<i32>:word32]
	r1 = 0x181<32>
	r4 = Mem0[r3 + 20<i32>:word32]
	r3 = 0x00026EE7<p32>
	branch p0 l00014570
	// succ:  l00014560 l00014570
l00014560:
	r2 = Mem0[r29 + 32<i32>:word32]
	// succ:  l00014564
l00014564:
	call errlog_function (retsize: 0;)
	r0 = 0xFFFFFFFF<32>
	goto l000147AC
	// succ:  l000147AC
l00014570:
	Mem0[r8 + 4<i32>:word32] = r9
	r3 = Mem0[r29 + 36<i32>:word32]
	p0 = r6 > 0<32>
	r5 = r6
	Mem0[r8 + 8<i32>:word32] = r7
	Mem0[r8 + 12<i32>:word32] = r16
	r5 = r9 + 0xFFFFFFFF<32>
	Mem0[r8 + 24<i32>:word32] = r2
	Mem0[r8:word32] = r6
	r8 = r7
	r1 = Mem0[r29 + 24<i32>:word64]
	r2 = Mem0[r3 + 16<i32>:word32]
	Mem0[r3:word32] = 1<32>
	Mem0[r3 + 12<i32>:word32] = 1<32>
	Mem0[r3 + 8<i32>:word32] = 1<32>
	Mem0[r3 + 4<i32>:word32] = 1<32>
	Mem0[r2:byte] = r4
	r4 = Mem0[r29 + 20<i32>:word32]
	Mem0[r1:word32] = 1<32>
	Mem0[r3 + 24<i32>:word32] = 4<32>
	Mem0[r1 + 4<i32>:word32] = 1<32>
	r2 = Mem0[r1 + 16<i32>:word32]
	Mem0[r1 + 12<i32>:word32] = 1<32>
	Mem0[r1 + 8<i32>:word32] = 1<32>
	Mem0[r2:byte] = r4
	r4 = Mem0[r29 + 56<i32>:word32]
	r2 = r22 - r27
	Mem0[r1 + 24<i32>:word32] = 4<32>
	r4 = r21 - r17
	r7 = Mem0[r29 + 44<i32>:word64]
	r6 = Mem0[r29 + 68<i32>:word64]
	r1 = r22 * r19
	Mem0[r29 + 6<i32>:byte] = r6
	r6 = 0<32>
	r5 = r4 + r5 * r7
	r3 = r2 + r3 * r6
	r4 = r1 * r16
	r5 = r5 + (r5 >>u 0x1F<32>)
	r3 = r3 + (r3 >>u 0x1F<32>)
	r7 = r5 >> 1<32>
	r3 = r3 >> 1<32>
	Mem0[r29 + 36<i32>:word32] = r7
	Mem0[r29 + 56<i32>:word32] = r3
	// succ:  l0001460C
l0001460C:
	p0 = r9 > 0<32>
	branch p0 l00014774
	// succ:  l00014614 l00014774
l00014614:
	Mem0[r29 + 13<i32>:byte] = r6
	r3 = Mem0[r29 + 24<i32>:word32]
	r6 = 0<32>
	Mem0[r29 + 10<i32>:byte] = r3
	r3 = r3 * r9
	// succ:  l0001462C
l0001462C:
	p0 = r8 > 0<32>
	r6 = Mem0[r29 + 52<i32>:word64]
	r3 = Mem0[r29 + 44<i32>:word64]
	r1 = 0<32>
	Mem0[r29 + 80<i32>:word32] = r1
	r5 = Mem0[r29 + 40<i32>:word64]
	r3 = r6 * r3
	r6 = Mem0[r29 + 36<i32>:word32]
	r5 = r6 + r5
	Mem0[r29 + 18<i32>:byte] = r1
	r13 = r3 - r6
	r1 = r5 * r8
	// succ:  l00014658
l00014658:
	r3 = Mem0[r29 + 72<i32>:word32]
	r28 = 0<32>
	r5 = Mem0[r29 + 68<i32>:word64]
	r6 = Mem0[r29 + 80<i32>:word64]
	r15 = Mem0[r29 + 64<i32>:word32]
	r6 = Mem0[r29 + 56<i32>:word32]
	r3 = r6 + r3
	r5 = r6 * r5
	r5 = Mem0[r29 + 60<i32>:word32]
	r0 = r5 - r6
	r3 = r3 * r16
	r1 = r5 + (r3 << 2<32>)
	// succ:  l00014688
l00014688:
	p0 = r21 > 0<32>
	r10 = 0<32>
	r3 = 0<32>
	r6 = r15
	branch p0 l00014730
	// succ:  l0001469C l00014730
l0001469C:
	branch r17 >u r5 l00014724
	// succ:  l000146A8 l00014724
l000146A8:
	r5 = r3 + r13
	r11 = r6 + 0<32>
	r8 = 0<32>
	r5 = r5 + r7
	branch p0 l00014724
	// succ:  l000146B8 l00014724
l000146B8:
	p0 = r14 > 0<32>
	r26 = r5 * r27
	__loop(1<i32>, 0x000146C0<p32>, r22)
	branch r27 >u r5 l00014718
	// succ:  l000146CC l00014718
l000146CC:
	r5 = r8 + r0
	r23 = r5 + r26
	r14 = r19 + 0xFFFFFFFF<32>
	r20 = Mem0[r11:byte]
	r9 = r11 + r16
	branch p0 l00014718
	// succ:  l000146E0 l00014718
l000146E0:
	p0 = r11 > 0<32>
	p0 = r19 >u 1<32>
	r20 = r20 - r18
	r23 = r25 + r23 * r19
	__loop(0<i32>, 0x000146FC<p32>, r14)
	r23 = r23 + 1<i32>
	r5 = Mem0[r23:byte]
	r5 = r5 - r24
	branch p0 l00014714
	// succ:  l000146FC l00014714
l000146FC:
	r23 = r23 + 1<i32>
	r12 = Mem0[r23:byte]
	r14 = Mem0[r9:byte]
	r9 = r9 + r16
	r10 = r10 + r20 * r5
	r5 = r12 - r24
	r20 = r14 - r18
	// succ:  l00014714
l00014714:
	r10 = r10 + r20 * r5
	// succ:  l00014718
l00014718:
	r11 = r11 + r2
	r8 = r8 + 1<32>
	// succ:  l00014724
l00014724:
	branch r3 == r21 l0001469C
	goto l00014734
	// succ:  l00014734 l0001469C
l00014730:
	Mem0[r1:word32] = r10
	r1 = r1 + 4<i32>
	r15 = r15 + 1<32>
	r28 = r28 + 1<32>
	goto l0001473C
	// succ:  l0001473C
l00014734:
	r3 = r3 + 1<32>
	r6 = r6 + r4
	Mem0[r1:word32] = r10
	r1 = r1 + 4<i32>
	r15 = r15 + 1<32>
	// succ:  l0001473C
l0001473C:
	p0 = r28 == r16
	branch p0 l00014688
	// succ:  l00014744 l00014688
l00014744:
	r8 = Mem0[r29 + 76<i32>:word32]
	r3 = Mem0[r29 + 80<i32>:word32]
	r3 = r3 + 1<32>
	Mem0[r29 + 80<i32>:word32] = r3
	p0 = r3 == r8
	branch p0 l00014658
	// succ:  l0001475C l00014658
l0001475C:
	r9 = Mem0[r29 + 48<i32>:word32]
	r3 = Mem0[r29 + 52<i32>:word32]
	r3 = r3 + 1<32>
	Mem0[r29 + 52<i32>:word32] = r3
	p0 = r3 == r9
	branch p0 l0001462C
	// succ:  l00014774 l0001462C
l00014774:
	r5 = Mem0[r29 + 28<i32>:word64]
	r3 = Mem0[r29 + 24<i32>:word64]
	r3 = r3 + 1<32>
	Mem0[r29 + 24<i32>:word32] = r3
	branch p0 l0001460C
	// succ:  l00014784 l0001460C
l00014784:
	p0 = r3 == r5
	Mem0[r29 + 12<i32>:word32] = r16
	r3 = 2<32>
	r4 = 0x00026EF5<p32>
	r2 = Mem0[r29 + 32<i32>:word32]
	r1 = 0x1B4<32>
	Mem0[r29 + 4<i32>:word32] = r9
	Mem0[r29 + 8<i32>:word32] = r8
	Mem0[r29:word32] = r5
	call logmsg_function (retsize: 0;)
	r0 = 0<32>
	// succ:  l000147AC
l000147AC:
	r19_r18 = Mem0[r29 + 120<i32>:word64]
	r17_r16 = Mem0[r29 + 128<i32>:word64]
	r23_r22 = Mem0[r29 + 104<i32>:word64]
	r21_r20 = Mem0[r29 + 112<i32>:word64]
	r27_r26 = Mem0[r29 + 88<i32>:word64]
	r25_r24 = Mem0[r29 + 96<i32>:word64]
	v46 = r30
	r31 = Mem0[v46 + 4<i32>:word32]
	r30 = Mem0[v46:word32]
	r29 = v46 + 8<i32>
	return
	// succ:  conv2d_execute_ref_exit
conv2d_execute_ref_exit:


// logmsg_function
// Return size: 0
define logmsg_function
logmsg_function_entry:
	r29 = fp
	// succ:  l000147C0
l000147C0:
	v4 = r29 - 8<i32>
	Mem0[v4:word32] = r30
	Mem0[v4 + 4<i32>:word32] = r31
	r30 = v4
	r29 = v4 - 8<i32>
	branch r3 >u r5 l000147E0
	// succ:  l000147D0 l000147E0
l000147D0:
	r5 = Mem0[r2 + 16<i32>:word32]
	r6 = r29 + 0x10<32>
	r5 = r29 + 0x10<32>
	r0 = 0x000147DC<p32>
	Mem0[r29 + 4<i32>:word32] = r6
	call logv (retsize: 0;)
	// succ:  l000147E0
l000147E0:
	v13 = r30
	r31 = Mem0[v13 + 4<i32>:word32]
	r30 = Mem0[v13:word32]
	r29 = v13 + 8<i32>
	return
	// succ:  logmsg_function_exit
logmsg_function_exit:


// errlog_function
// Return size: 0
define errlog_function
errlog_function_entry:
	r29 = fp
	// succ:  l000147E4
l000147E4:
	v4 = r29 - 8<i32>
	Mem0[v4:word32] = r30
	Mem0[v4 + 4<i32>:word32] = r31
	r30 = v4
	r29 = v4 - 8<i32>
	r4 = r3
	r0 = 0x00026DD8<p32>
	Mem0[r29 + 1<i32>:byte] = r6
	r6 = r29 + 0x10<32>
	r5 = r29 + 0x10<32>
	r3 = 0<32>
	v13 = r30
	r31 = Mem0[v13 + 4<i32>:word32]
	r30 = Mem0[v13:word32]
	r29 = v13 + 8<i32>
	return
	// succ:  errlog_function_exit
errlog_function_exit:


// fmaxf.1.0
// Return size: 0
define fmaxf.1.0
fmaxf.1.0_entry:
	r29 = fp
	// succ:  l00014808
l00014808:
	r2 = 0x38D1B717<32>
	r1_r0 = r0_r2
	// succ:  l00014810_thunk_fn00009600
l00014810_thunk_fn00009600:
	call fn00009600 (retsize: 0;)
	return
	// succ:  fmaxf.1.0_exit
fmaxf.1.0_exit:


// flatten_execute
// Return size: 0
define flatten_execute
flatten_execute_entry:
	r29 = fp
	// succ:  l00014820
l00014820:
	v4 = r29 - 8<i32>
	Mem0[v4:word32] = r30
	Mem0[v4 + 4<i32>:word32] = r31
	r30 = v4
	r29 = v4 - 40<i32>
	r4 = 0x000271D2<p32>
	r3 = Mem0[r0 + 8<i32>:word32]
	r2 = Mem0[r0 + 4<i32>:word32]
	Mem0[r29 + 24<i32>:word64] = r19_r18
	Mem0[r29 + 32<i32>:word64] = r17_r16
	r1 = 0x37<32>
	r16 = r1
	r17 = Mem0[r2:word32]
	r2 = r16
	Mem0[r29 + 8<i32>:word64] = r23_r22
	Mem0[r29 + 16<i32>:word64] = r21_r20
	r19 = Mem0[r17 + 8<i32>:word32]
	r18 = Mem0[r3:word32]
	r22 = Mem0[r17:word32]
	r21 = Mem0[r17 + 4<i32>:word32]
	Mem0[r29:word32] = r0
	r20 = Mem0[r17 + 12<i32>:word32]
	call logmsg_function (retsize: 0;)
	r2 = Mem0[r17 + 24<i32>:word32]
	branch r2 >u r3 l00014878
	// succ:  l00014864 l00014878
l00014864:
	r3 = Mem0[r18 + 20<i32>:word32]
	r2 = r16
	r1 = 0x39<32>
	r3 = 0x000148A0<p32>
	call errlog_function (retsize: 0;)
	r0 = 0xFFFFFFFF<32>
	goto l000148BC
	// succ:  l000148BC
l00014878:
	Mem0[r18 + 8<i32>:word32] = 1<32>
	Mem0[r18:word32] = 1<32>
	r2 = r21 * r22
	Mem0[r18 + 4<i32>:word32] = 1<32>
	r0 = Mem0[r18 + 16<i32>:word32]
	r6 = r2 * r19
	Mem0[r18 + 3<i32>:byte] = r7
	r7 = r6 * r20
	Mem0[r18 + 24<i32>:word32] = r2
	r2 = Mem0[r17 + 24<i32>:word32]
	r1 = Mem0[r17 + 16<i32>:word32]
	call fn00009560 (retsize: 0;)
	r2 = r16
	r1 = 0x3F<32>
	r4 = 0x0002716A<p32>
	Mem0[r29:byte] = r3
	r3 = Mem0[r17 + 24<i32>:word32]
	call logmsg_function (retsize: 0;)
	// succ:  l000148BC
l000148BC:
	r19_r18 = Mem0[r29 + 24<i32>:word64]
	r17_r16 = Mem0[r29 + 32<i32>:word64]
	r23_r22 = Mem0[r29 + 8<i32>:word64]
	r21_r20 = Mem0[r29 + 16<i32>:word64]
	v26 = r30
	r31 = Mem0[v26 + 4<i32>:word32]
	r30 = Mem0[v26:word32]
	r29 = v26 + 8<i32>
	return
	// succ:  flatten_execute_exit
flatten_execute_exit:


// flatten_check
// Return size: 0
define flatten_check
flatten_check_entry:
	r29 = fp
	// succ:  l000148C8
l000148C8:
	v4 = r29 - 8<i32>
	Mem0[v4:word32] = r30
	Mem0[v4 + 4<i32>:word32] = r31
	r30 = v4
	r29 = v4 - 16<i32>
	Mem0[r29 - 16<i32>:word64] = r17_r16
	r4 = 0x00027189<p32>
	r17 = r0
	r16 = r1
	r1 = 0x5C<32>
	Mem0[r29:word32] = r17
	r2 = r16
	call logmsg_function (retsize: 0;)
	r1 = 0x5D<32>
	r3 = 0x00027108<p32>
	branch r2 >u 2<32> l0001493C
	// succ:  l000148FC l0001493C
l000148FC:
	r2 = Mem0[r17 + 16<i32>:word32]
	r1 = 0x5E<32>
	r3 = 0x0001491B<p32>
	branch r2 == 1<32> l0001493C
	// succ:  l00014910 l0001493C
l00014910:
	r2 = Mem0[r17 + 20<i32>:word32]
	r2 = Mem0[r17 + 4<i32>:word32]
	r1 = 0x5F<32>
	r3 = 0x00014926<p32>
	branch r2 == 0<32> l0001493C
	// succ:  l00014928 l0001493C
l00014928:
	r2 = Mem0[r2:word32]
	r2 = Mem0[r17 + 8<i32>:word32]
	r1 = 0x60<32>
	r3 = 0x00014931<p32>
	branch r2 == 0<32> l0001494C
	goto l00014940
	// succ:  l00014940 l0001494C
l0001493C:
	r2 = r16
	call errlog_function (retsize: 0;)
	goto l00014944
	// succ:  l00014944
l00014940:
	r2 = Mem0[r2:word32]
	r2 = r16
	// succ:  l00014944
l00014944:
	v16 = r30
	r31 = Mem0[v16 + 4<i32>:word32]
	r30 = Mem0[v16:word32]
	r29 = v16 + 8<i32>
	return
	// succ:  flatten_check_exit
l0001494C:
	r2 = r16
	r1 = 0x61<32>
	r4 = 0x000271B9<p32>
	Mem0[r29:word32] = r17
	call logmsg_function (retsize: 0;)
	r0 = 0<32>
	v17 = r30
	r31 = Mem0[v17 + 4<i32>:word32]
	r30 = Mem0[v17:word32]
	r29 = v17 + 8<i32>
	return
	// succ:  flatten_check_exit
flatten_check_exit:


// qflatten_execute
// Return size: 0
define qflatten_execute
qflatten_execute_entry:
	r29 = fp
	// succ:  l0001496C
l0001496C:
	v4 = r29 - 8<i32>
	Mem0[v4:word32] = r30
	Mem0[v4 + 4<i32>:word32] = r31
	r30 = v4
	r29 = v4 - 40<i32>
	Mem0[r29 - 16<i32>:word64] = r17_r16
	r4 = 0x00027141<p32>
	r17_r16 = r0_r1
	Mem0[r29 + 24<i32>:word64] = r19_r18
	r2 = Mem0[r17 + 4<i32>:word32]
	r1 = 0x4C<32>
	r3 = Mem0[r17 + 8<i32>:word32]
	Mem0[r29 + 8<i32>:word64] = r23_r22
	Mem0[r29 + 16<i32>:word64] = r21_r20
	r19 = Mem0[r3:word32]
	r18 = Mem0[r2:word32]
	r2 = r16
	r20 = Mem0[r18 + 8<i32>:word32]
	r23 = Mem0[r18:word32]
	r22 = Mem0[r18 + 4<i32>:word32]
	Mem0[r29:word32] = r17
	r21 = Mem0[r18 + 12<i32>:word32]
	call logmsg_function (retsize: 0;)
	r2 = Mem0[r18 + 24<i32>:word32]
	branch r2 >u r3 l000149CC
	// succ:  l000149B4 l000149CC
l000149B4:
	r3 = Mem0[r19 + 20<i32>:word32]
	r2 = r16
	r1 = 0x4E<32>
	r3 = 0x000149E0<p32>
	call errlog_function (retsize: 0;)
	r0 = 0xFFFFFFFF<32>
	goto l00014A70
	// succ:  l00014A70
l000149CC:
	Mem0[r19 + 8<i32>:word32] = 1<32>
	Mem0[r19:word32] = 1<32>
	r2 = r22 * r23
	Mem0[r19 + 4<i32>:word32] = 1<32>
	r0 = Mem0[r19 + 16<i32>:word32]
	r6 = r2 * r20
	Mem0[r19 + 3<i32>:byte] = r7
	r7 = r6 * r21
	Mem0[r19 + 24<i32>:word32] = r2
	r2 = Mem0[r18 + 24<i32>:word32]
	r1 = Mem0[r18 + 16<i32>:word32]
	call fn00009560 (retsize: 0;)
	r3 = Mem0[r17 + 4<i32>:word32]
	r2 = Mem0[r17 + 8<i32>:word32]
	r2 = Mem0[r2 + 4<i32>:word32]
	r3 = Mem0[r3 + 4<i32>:word32]
	r5 = Mem0[r3 + 4<i32>:word32]
	r4 = Mem0[r3:word32]
	Mem0[r2:word32] = r4
	Mem0[r2 + 4<i32>:word32] = r5
	r1 = Mem0[r3 + 12<i32>:word32]
	r7 = Mem0[r3 + 8<i32>:word32]
	Mem0[r2 + 12<i32>:word32] = r1
	Mem0[r2 + 8<i32>:word32] = r7
	r4 = Mem0[r3 + 24<i32>:word32]
	branch r4 >u r6 l00014A24
	// succ:  l00014A1C l00014A24
l00014A1C:
	r6 = Mem0[r2 + 20<i32>:word32]
	r1 = Mem0[r3 + 16<i32>:word32]
	r2 = Mem0[r3 + 24<i32>:word32]
	call fn00009560 (retsize: 0;)
	// succ:  l00014A24
l00014A24:
	r3 = Mem0[r17 + 4<i32>:word32]
	r2 = Mem0[r17 + 8<i32>:word32]
	r2 = Mem0[r2 + 8<i32>:word32]
	r3 = Mem0[r3 + 8<i32>:word32]
	r5 = Mem0[r3 + 4<i32>:word32]
	r4 = Mem0[r3:word32]
	Mem0[r2:word32] = r4
	Mem0[r2 + 4<i32>:word32] = r5
	r1 = Mem0[r3 + 12<i32>:word32]
	r7 = Mem0[r3 + 8<i32>:word32]
	Mem0[r2 + 12<i32>:word32] = r1
	Mem0[r2 + 8<i32>:word32] = r7
	r4 = Mem0[r3 + 24<i32>:word32]
	branch r4 >u r6 l00014A54
	// succ:  l00014A4C l00014A54
l00014A4C:
	r6 = Mem0[r2 + 20<i32>:word32]
	r1 = Mem0[r3 + 16<i32>:word32]
	r2 = Mem0[r3 + 24<i32>:word32]
	call fn00009560 (retsize: 0;)
	// succ:  l00014A54
l00014A54:
	r2 = Mem0[r18 + 24<i32>:word32]
	r4 = 0x0002716A<p32>
	Mem0[r29:word32] = r2
	r2 = r16
	r1 = 0x56<32>
	call logmsg_function (retsize: 0;)
	r0 = 0<32>
	// succ:  l00014A70
l00014A70:
	r19_r18 = Mem0[r29 + 24<i32>:word64]
	r17_r16 = Mem0[r29 + 32<i32>:word64]
	r23_r22 = Mem0[r29 + 8<i32>:word64]
	r21_r20 = Mem0[r29 + 16<i32>:word64]
	v29 = r30
	r31 = Mem0[v29 + 4<i32>:word32]
	r30 = Mem0[v29:word32]
	r29 = v29 + 8<i32>
	return
	// succ:  qflatten_execute_exit
qflatten_execute_exit:


// qflatten_check
// Return size: 0
define qflatten_check
qflatten_check_entry:
	r29 = fp
	// succ:  l00014A80
l00014A80:
	v4 = r29 - 8<i32>
	Mem0[v4:word32] = r30
	Mem0[v4 + 4<i32>:word32] = r31
	r30 = v4
	r29 = v4 - 16<i32>
	Mem0[r29 - 16<i32>:word64] = r17_r16
	r4 = 0x000270EE<p32>
	r17 = r0
	r16 = r1
	r1 = 0x67<32>
	Mem0[r29:word32] = r17
	r2 = r16
	call logmsg_function (retsize: 0;)
	branch r2 == 3<32> l00014AC0
	// succ:  l00014AAC l00014AC0
l00014AAC:
	r2 = Mem0[r17 + 16<i32>:word32]
	r1 = 0x68<32>
	r3 = 0x00014ACC<p32>
	r2 = r16
	call errlog_function (retsize: 0;)
	// succ:  l00014AB4
l00014AB4:
	v16 = r30
	r31 = Mem0[v16 + 4<i32>:word32]
	r30 = Mem0[v16:word32]
	r29 = v16 + 8<i32>
	return
	// succ:  qflatten_check_exit
l00014AC0:
	branch r2 == 3<32> l00014AD8
	// succ:  l00014AD0 l00014AD8
l00014AD0:
	r2 = Mem0[r17 + 20<i32>:word32]
	r1 = 0x69<32>
	goto l00014AB4
	// succ:  l00014AB4
l00014AD8:
	r2 = r16
	r1 = 0x6A<32>
	r4 = 0x00027127<p32>
	Mem0[r29:word32] = r17
	call logmsg_function (retsize: 0;)
	r0 = 0<32>
	v17 = r30
	r31 = Mem0[v17 + 4<i32>:word32]
	r30 = Mem0[v17:word32]
	r29 = v17 + 8<i32>
	return
	// succ:  qflatten_check_exit
qflatten_check_exit:


// logmsg_function
// Return size: 0
define logmsg_function
logmsg_function_entry:
	r29 = fp
	// succ:  l00014AF8
l00014AF8:
	v4 = r29 - 8<i32>
	Mem0[v4:word32] = r30
	Mem0[v4 + 4<i32>:word32] = r31
	r30 = v4
	r29 = v4 - 8<i32>
	r3 = 2<32>
	branch r3 >u r5 l00014B1C
	// succ:  l00014B08 l00014B1C
l00014B08:
	r5 = Mem0[r2 + 16<i32>:word32]
	r5 = r29 + 0x10<32>
	r3 = 2<32>
	r0 = 0x00014B15<p32>
	Mem0[r29 + 1<i32>:byte] = r6
	r6 = r29 + 0x10<32>
	call logv (retsize: 0;)
	// succ:  l00014B10_thunk_errlog_function
l00014B10_thunk_errlog_function:
	call errlog_function (retsize: 0;)
	return
	// succ:  logmsg_function_exit
l00014B1C:
	v13 = r30
	r31 = Mem0[v13 + 4<i32>:word32]
	r30 = Mem0[v13:word32]
	r29 = v13 + 8<i32>
	return
	// succ:  logmsg_function_exit
logmsg_function_exit:


// errlog_function
// Return size: 0
define errlog_function
errlog_function_entry:
	r29 = fp
	// succ:  l00014B20
l00014B20:
	v4 = r29 - 8<i32>
	Mem0[v4:word32] = r30
	Mem0[v4 + 4<i32>:word32] = r31
	r30 = v4
	r29 = v4 - 8<i32>
	r4 = r3
	r0 = 0x000270D1<p32>
	Mem0[r29 + 1<i32>:byte] = r6
	r6 = r29 + 0x10<32>
	r5 = r29 + 0x10<32>
	r3 = 0<32>
	v13 = r30
	r31 = Mem0[v13 + 4<i32>:word32]
	r30 = Mem0[v13:word32]
	r29 = v13 + 8<i32>
	return
	// succ:  errlog_function_exit
errlog_function_exit:


// input_execute
// Return size: 0
define input_execute
input_execute_entry:
	r29 = fp
	// succ:  l00014B50
l00014B50:
	v4 = r29 - 8<i32>
	Mem0[v4:word32] = r30
	Mem0[v4 + 4<i32>:word32] = r31
	r30 = v4
	r29 = v4 - 32<i32>
	Mem0[r29 - 16<i32>:word64] = r17_r16
	r4 = 0x0002724F<p32>
	r16 = r1
	r1 = 0x31<32>
	Mem0[r29 + 8<i32>:word64] = r21_r20
	Mem0[r29 + 16<i32>:word64] = r19_r18
	r18 = r0
	r2 = r16
	Mem0[r29:word32] = r18
	call logmsg_function (retsize: 0;)
	r2 = Mem0[r16 + 28<i32>:word32]
	branch r3 == r2 l00014BB0
	// succ:  l00014B84 l00014BB0
l00014B84:
	r3 = Mem0[r18 + 20<i32>:word32]
	r2 = 0<32>
	r17 = 0<32>
	r21_r20 = 0<64>
	r19 = 0<32>
	// succ:  l00014B8C
l00014B8C:
	r4 = Mem0[r16 + 20<i32>:word32]
	r3 = Mem0[r18 + 8<i32>:word32]
	r3 = Mem0[r29 + r19:word32]
	r2 = r4 + r20
	r5 = Mem0[r2 + 20<i32>:word32]
	branch r5 >u r6 l00014BC8
	// succ:  l00014BA8 l00014BC8
l00014BA8:
	r6 = Mem0[r3 + 20<i32>:word32]
	goto l00014BC0
	// succ:  l00014BC0
l00014BB0:
	r1 = 0x36<32>
	r3 = 0x00027268<p32>
	r17 = -1<i32>
	r2 = r16
	call errlog_function (retsize: 0;)
	goto l00014BC4
	// succ:  l00014BC4
l00014BC0:
	r17 = -1<i32>
	r2 = r16
	// succ:  l00014BC4
l00014BC4:
	goto l00014C28
	// succ:  l00014C28
l00014BC8:
	Mem0[r3:byte] = r4
	r4 = Mem0[r5 + r20:word32]
	Mem0[r3 + 4<i32>:word32] = r7
	r4 = Mem0[r2 + 8<i32>:word32]
	Mem0[r3 + 8<i32>:word32] = r4
	r7 = Mem0[r2 + 12<i32>:word32]
	Mem0[r3 + 12<i32>:word32] = r7
	r4 = Mem0[r2 + 20<i32>:word32]
	Mem0[r3 + 24<i32>:word32] = r4
	r1 = Mem0[r2 + 16<i32>:word32]
	r2 = Mem0[r2 + 20<i32>:word32]
	r0 = Mem0[r3 + 16<i32>:word32]
	call vmemcpy_asm (retsize: 0;)
	r2 = Mem0[r18 + 20<i32>:word32]
	r20 = r20 + 0x20<32>
	r19 = r19 + 4<32>
	branch r2 >u r21 l00014B8C
	// succ:  l00014C10 l00014B8C
l00014C10:
	r21 = r21 + 1<32>
	Mem0[r29:word32] = r2
	r1 = 0x40<32>
	r4 = 0x00027284<p32>
	r2 = r16
	call logmsg_function (retsize: 0;)
	// succ:  l00014C28
l00014C28:
	r19_r18 = Mem0[r29 + 16<i32>:word64]
	r17_r16 = Mem0[r29 + 24<i32>:word64]
	r0 = r17
	v26 = r30
	r31 = Mem0[v26 + 4<i32>:word32]
	r30 = Mem0[v26:word32]
	r29 = v26 + 8<i32>
	return
	// succ:  input_execute_exit
input_execute_exit:


// input_check
// Return size: 0
define input_check
input_check_entry:
	r29 = fp
	// succ:  l00014C34
l00014C34:
	v4 = r29 - 8<i32>
	Mem0[v4:word32] = r30
	Mem0[v4 + 4<i32>:word32] = r31
	r30 = v4
	r29 = v4 - 16<i32>
	Mem0[r29 - 16<i32>:word64] = r17_r16
	r4 = 0x00027207<p32>
	r17 = r0
	r16 = r1
	r1 = 0x46<32>
	Mem0[r29:word32] = r17
	r2 = r16
	call logmsg_function (retsize: 0;)
	branch r2 == 0<32> l00014C94
	// succ:  l00014C5C l00014C94
l00014C5C:
	r2 = Mem0[r17 + 20<i32>:word32]
	r3 = Mem0[r17 + 8<i32>:word32]
	branch r2 >u r4 l00014C94
l00014C64:
	branch r2 >u r4 l00014C98
	// succ:  l00014C70 l00014C94 l00014C98
l00014C70:
	r4 = r4 + 1<32>
	r3 = r3 + 4<32>
	branch r5 == 0<32> l00014C64
	// succ:  l00014C78 l00014C64
l00014C78:
	r3_r2 = SEQ(0<32>, r16)
	r1 = 0x4A<32>
	r4 = 0x00014CA2<p32>
	Mem0[r29:word32] = r4
	call errlog_function (retsize: 0;)
	r0 = 0xFFFFFFFF<32>
	v18 = r30
	r31 = Mem0[v18 + 4<i32>:word32]
	r30 = Mem0[v18:word32]
	r29 = v18 + 8<i32>
	return
	// succ:  input_check_exit
l00014C94:
	r2 = r16
	r1 = 0x4D<32>
	r4 = 0x00027238<p32>
	// succ:  l00014C98
l00014C98:
	Mem0[r29:word32] = r17
	call logmsg_function (retsize: 0;)
	r0 = 0<32>
	v19 = r30
	r31 = Mem0[v19 + 4<i32>:word32]
	r30 = Mem0[v19:word32]
	r29 = v19 + 8<i32>
	return
	// succ:  input_check_exit
input_check_exit:


// logmsg_function
// Return size: 0
define logmsg_function
logmsg_function_entry:
	r29 = fp
	// succ:  l00014CB4
l00014CB4:
	v4 = r29 - 8<i32>
	Mem0[v4:word32] = r30
	Mem0[v4 + 4<i32>:word32] = r31
	r30 = v4
	r29 = v4 - 8<i32>
	r3 = 2<32>
	branch r3 >u r5 l00014CD8
	// succ:  l00014CC4 l00014CD8
l00014CC4:
	r5 = Mem0[r2 + 16<i32>:word32]
	r5 = r29 + 0x10<32>
	r3 = 2<32>
	r0 = 0x00014CF0<p32>
	Mem0[r29 + 1<i32>:byte] = r6
	r6 = r29 + 0x10<32>
	call logv (retsize: 0;)
	// succ:  l00014CCC_thunk_errlog_function
l00014CCC_thunk_errlog_function:
	call errlog_function (retsize: 0;)
	return
	// succ:  logmsg_function_exit
l00014CD8:
	v13 = r30
	r31 = Mem0[v13 + 4<i32>:word32]
	r30 = Mem0[v13:word32]
	r29 = v13 + 8<i32>
	return
	// succ:  logmsg_function_exit
logmsg_function_exit:


// errlog_function
// Return size: 0
define errlog_function
errlog_function_entry:
	r29 = fp
	// succ:  l00014CDC
l00014CDC:
	v4 = r29 - 8<i32>
	Mem0[v4:word32] = r30
	Mem0[v4 + 4<i32>:word32] = r31
	r30 = v4
	r29 = v4 - 8<i32>
	r4 = r3
	r0 = 0x000271EC<p32>
	Mem0[r29 + 1<i32>:byte] = r6
	r6 = r29 + 0x10<32>
	r5 = r29 + 0x10<32>
	r3 = 0<32>
	v13 = r30
	r31 = Mem0[v13 + 4<i32>:word32]
	r30 = Mem0[v13:word32]
	r29 = v13 + 8<i32>
	return
	// succ:  errlog_function_exit
errlog_function_exit:


// matmul_execute_asm
// Return size: 0
define matmul_execute_asm
matmul_execute_asm_entry:
	r29 = fp
	// succ:  l00014D00
l00014D00:
	// succ:  l00014D00_thunk_matmul_execute
l00014D00_thunk_matmul_execute:
	call matmul_execute (retsize: 0;)
	return
	// succ:  matmul_execute_asm_exit
matmul_execute_asm_exit:


// matmul_check_ref
// Return size: 0
define matmul_check_ref
matmul_check_ref_entry:
	r29 = fp
	// succ:  l00014D0C
l00014D0C:
	v4 = r29 - 8<i32>
	Mem0[v4:word32] = r30
	Mem0[v4 + 4<i32>:word32] = r31
	r30 = v4
	r29 = v4 - 72<i32>
	Mem0[r29 - 16<i32>:word64] = r17_r16
	r4 = 0x000273E9<p32>
	r17 = r0
	r16 = r1
	r1 = 0x10F<32>
	Mem0[r29 + 48<i32>:word64] = r21_r20
	Mem0[r29 + 56<i32>:word64] = r19_r18
	r3_r2 = SEQ(2<32>, r16)
	Mem0[r29 + 32<i32>:word64] = r25_r24
	Mem0[r29 + 40<i32>:word64] = r23_r22
	Mem0[r29:word32] = r17
	call logmsg_function (retsize: 0;)
	r1 = 0x110<32>
	r3 = 0x00027401<p32>
	branch r2 == 6<32> l00014EE0
	// succ:  l00014D50 l00014EE0
l00014D50:
	r2 = Mem0[r17 + 16<i32>:word32]
	r1 = 0x111<32>
	r3 = 0x00014D5B<p32>
	branch r2 == 3<32> l00014EE0
	// succ:  l00014D64 l00014EE0
l00014D64:
	r2 = Mem0[r17 + 20<i32>:word32]
	r1 = 0x112<32>
	r3 = 0x00014D72<p32>
	branch r4 == 0<32> l00014EE0
	// succ:  l00014D78 l00014EE0
l00014D78:
	r4 = Mem0[r17 + 4<i32>:word32]
	r2 = Mem0[r17 + 8<i32>:word32]
	r1 = 0x113<32>
	r3 = 0x00014D7E<p32>
	r5 = 0<32>
	branch p0 l00014EE0
	// succ:  l00014D90 l00014EE0
l00014D90:
	p0 = r2 == 0<32>
	__loop(0<i32>, 0x00014D90<p32>, 6<32>)
	branch r3 == 0<32> l00014DA4
	// succ:  l00014D9C l00014DA4
l00014D9C:
	r3 = Mem0[r4:word32]
	r5 = r5
	r4 = r4 + 4<32>
	goto l00014DC4
	// succ:  l00014DC4
l00014DA4:
	Mem0[r29:word32] = r5
	r1 = 0x116<32>
	r3 = 0x00027447<p32>
	goto l00014EE0
	// succ:  l00014EE0
l00014DB8:
	branch r4 >u 2<32> l00014DE0
l00014DBC:
	branch r4 >u 2<32> l00014DE4
	// succ:  l00014DC8 l00014DE0 l00014DE4
l00014DC4:
	branch r3 == 0<32> l00014DB8
	goto l00014DD0
	// succ:  l00014DD0 l00014DB8
l00014DC8:
	r4 = r4 + 1<32>
	r2 = r2 + 4<32>
	branch r3 == 0<32> l00014DBC
	// succ:  l00014DD0 l00014DBC
l00014DD0:
	r3 = Mem0[r2:word32]
	Mem0[r29:word32] = r4
	r1 = 0x11B<32>
	r3 = 0x00014DD9<p32>
	goto l00014EE0
	// succ:  l00014EE0
l00014DE0:
	r1 = 0x120<32>
	r3_r2 = SEQ(3<32>, r16)
	r4 = 0x00027464<p32>
	goto l00014DF0
	// succ:  l00014DF0
l00014DE4:
	r1 = 0x120<32>
	r3_r2 = SEQ(3<32>, r16)
	r4 = 0x00014DE8<p32>
	// succ:  l00014DF0
l00014DF0:
	Mem0[r29:word32] = r17
	call logmsg_function (retsize: 0;)
	branch r2 == 0<32> l00014E58
l00014E04:
	r2 = Mem0[r17 + 4<i32>:word32]
	r1 = 0x109<32>
	r4 = 0x00027527<p32>
	// succ:  l00014E08 l00014E58 l00014E14
l00014E08:
	r2 = Mem0[r17 + 16<i32>:word32]
	r19_r18 = 0<64>
	r2 = Mem0[r17 + 4<i32>:word32]
	r1 = 0x109<32>
	r4 = 0x00014E2B<p32>
	// succ:  l00014E14
l00014E14:
	r2 = Mem0[r13 + r18:word32]
	r6 = Mem0[r2 + 24<i32>:word32]
	r5 = Mem0[r2 + 16<i32>:word32]
	r8 = Mem0[r2 + 4<i32>:word32]
	r7 = Mem0[r2 + 12<i32>:word32]
	r12 = Mem0[r2:word32]
	r9 = Mem0[r2 + 8<i32>:word32]
	r3_r2 = SEQ(3<32>, r16)
	Mem0[r29 + 20<i32>:word32] = r6
	Mem0[r29 + 24<i32>:word32] = r5
	Mem0[r29 + 12<i32>:word32] = r9
	Mem0[r29 + 16<i32>:word32] = r7
	Mem0[r29 + 4<i32>:word32] = r12
	Mem0[r29 + 8<i32>:word32] = r8
	Mem0[r29:word32] = r19
	call logmsg_function (retsize: 0;)
	r2 = Mem0[r17 + 16<i32>:word32]
	r18 = r18 + 4<32>
	branch r2 >u r19 l00014E04
	goto l00014E5C
	// succ:  l00014E5C l00014E04
l00014E58:
	r2 = Mem0[r17 + 4<i32>:word32]
	// succ:  l00014E5C
l00014E5C:
	r19 = r19 + 1<32>
	r3 = Mem0[r2 + 20<i32>:word32]
	r7 = Mem0[r2 + 4<i32>:word32]
	r4 = Mem0[r2 + 16<i32>:word32]
	r3 = Mem0[r3 + 16<i32>:word32]
	r2 = Mem0[r4 + 16<i32>:word32]
	r20 = Mem0[r7 + 8<i32>:word32]
	r18 = Mem0[r7 + 16<i32>:word32]
	r2 = Mem0[r3:word32]
	r21 = Mem0[r2:word32]
	r19 = Mem0[r7 + 12<i32>:word32]
	r0 = r2 - r21
	call fmaxf.1.0 (retsize: 0;)
	r2 = 0x437F0000<32>
	r1_r0 = r0_r2
	call fn00009610 (retsize: 0;)
	r2 = 0<32>
	r2 = r2 - r21
	call fn00009620 (retsize: 0;)
	r0 = r2 * r0
	r4 = r19 + 0x1F<32>
	r2 = r20 + 0xF<32>
	r0 = 0x80<32>
	r22 = r4 & 0xFFFFFFE0<32>
	r3_r2 = SEQ(0x20<32>, r0)
	r5 = r2 & 0xFFFFFFF0<32>
	r24 = truncf(CONVERT(r2, uint32, real32))
	r23 = max<uint32>(r5, r3)
	call fn00009550 (retsize: 0;)
	r1 = r23 * r22
	Mem0[r17 + 40<i32>:word32] = r0
	r1 = 0x13A<32>
	r3 = 0x0002749F<p32>
	p1 = r24 > 0xFFFFFFFF<32>
	branch p0 l00014EEC
	// succ:  l00014EE0 l00014EEC
l00014EE0:
	r21 = -1<i32>
	r2 = r16
	call errlog_function (retsize: 0;)
	goto l00014F7C
	// succ:  l00014F7C
l00014EEC:
	r0 = r16
	r21 = 0<32>
	p0 = r24 > 0xFF<32>
	r25 = CONVERT(SLICE(r24, byte, 0), byte, uint32)
	r25 = 0xFF<32>
	r25 = r21 + 0<32>
	call nn_os_hvx_power_on (retsize: 0;)
	call nn_os_vector_acquire (retsize: 0;)
	Mem0[r29 + 16<i32>:word32] = r25
	r3_r2 = SEQ(2<32>, r16)
	r4 = 0x000274D0<p32>
	Mem0[r29 + 4<i32>:word32] = r19
	r1 = 0x13E<32>
	Mem0[r29 + 8<i32>:word32] = r23
	Mem0[r29 + 12<i32>:word32] = r22
	r24 = r0
	Mem0[r29:word32] = r20
	call logmsg_function (retsize: 0;)
	r3 = Mem0[r16 + 4<i32>:word32]
	r2 = r19
	r1_r0 = r20_r18
	r5_r4 = r22_r23
	Mem0[r29:word32] = r25
	call pad2d (retsize: 0;)
	r3 = Mem0[r17 + 8<i32>:word32]
	r0 = Mem0[r16 + 4<i32>:word32]
	r1 = r23
	r2 = r22
	call transpack (retsize: 0;)
	r0 = r24
	call nn_os_vector_release (retsize: 0;)
	r0 = r16
	call nn_os_hvx_power_off (retsize: 0;)
	r1 = 0x143<32>
	r3_r2 = SEQ(2<32>, r16)
	r4 = 0x0002750F<p32>
	Mem0[r29:word32] = r17
	call logmsg_function (retsize: 0;)
	// succ:  l00014F7C
l00014F7C:
	r0 = r21
	r19_r18 = Mem0[r29 + 56<i32>:word64]
	r17_r16 = Mem0[r29 + 64<i32>:word64]
	r23_r22 = Mem0[r29 + 40<i32>:word64]
	r21_r20 = Mem0[r29 + 48<i32>:word64]
	v24 = r30
	r31 = Mem0[v24 + 4<i32>:word32]
	r30 = Mem0[v24:word32]
	r29 = v24 + 8<i32>
	return
	// succ:  matmul_check_ref_exit
matmul_check_ref_exit:


// matmul_ctor
// Return size: 0
define matmul_ctor
matmul_ctor_entry:
	r29 = fp
	// succ:  l00014F90
l00014F90:
	v4 = r29 - 8<i32>
	Mem0[v4:word32] = r30
	Mem0[v4 + 4<i32>:word32] = r31
	r30 = v4
	r29 = v4 - 40<i32>
	Mem0[r29 - 24<i32>:word64] = r19_r18
	r6 = 0x000273D2<p32>
	r19_r18 = r0_r4
	Mem0[r29 + 16<i32>:word64] = r21_r20
	Mem0[r29 + 32<i32>:word64] = r17_r16
	r21_r20 = r2_r5
	r17_r16 = r3_r1
	r4 = r6
	r3_r2 = SEQ(2<32>, r19)
	r1 = 0x152<32>
	Mem0[r29 + 8<i32>:word64] = r23_r22
	r22 = Mem0[r29 + 48<i32>:word64]
	r23 = Mem0[r29 + 52<i32>:word32]
	Mem0[r29:word32] = r16
	call logmsg_function (retsize: 0;)
	Mem0[r29 + 4<i32>:word32] = r23
	r1_r0 = r16_r19
	r3_r2 = r17_r21
	r5_r4 = r20_r18
	Mem0[r29:word32] = r22
	call node_alloc_common (retsize: 0;)
	r17_r16 = Mem0[r29 + 32<i32>:word64]
	r21_r20 = Mem0[r29 + 16<i32>:word64]
	r19_r18 = Mem0[r29 + 24<i32>:word64]
	v36 = r30
	r31 = Mem0[v36 + 4<i32>:word32]
	r30 = Mem0[v36:word32]
	r29 = v36 + 8<i32>
	return
	// succ:  matmul_ctor_exit
matmul_ctor_exit:


// matmul_execute_ref
// Return size: 0
define matmul_execute_ref
matmul_execute_ref_entry:
	r29 = fp
	// succ:  l00014FEC
l00014FEC:
	// succ:  l00014FEC_thunk_matmul_execute
l00014FEC_thunk_matmul_execute:
	call matmul_execute (retsize: 0;)
	return
	// succ:  matmul_execute_ref_exit
matmul_execute_ref_exit:


// matmul_execute
// Return size: 0
define matmul_execute
matmul_execute_entry:
	r29 = fp
	// succ:  l00014FF8
l00014FF8:
	v4 = r29 - 8<i32>
	Mem0[v4:word32] = r30
	Mem0[v4 + 4<i32>:word32] = r31
	r30 = v4
	r29 = v4 - 120<i32>
	Mem0[r29 - 16<i32>:word64] = r17_r16
	r16 = r0
	Mem0[r29 + 40<i32>:word32] = r2
	r3 = Mem0[r16 + 4<i32>:word32]
	r4 = Mem0[r16 + 8<i32>:word32]
	Mem0[r29 + 72<i32>:word64] = r27_r26
	Mem0[r29 + 68<i32>:word32] = r1
	r2 = Mem0[r4 + 4<i32>:word32]
	r7 = Mem0[r3:word32]
	r5 = Mem0[r3 + 12<i32>:word32]
	Mem0[r29 + 48<i32>:word32] = r2
	r2 = Mem0[r4:word32]
	r6 = Mem0[r3 + 8<i32>:word32]
	Mem0[r29 + 52<i32>:word32] = r2
	r2 = Mem0[r7 + 8<i32>:word32]
	r9 = Mem0[r3 + 4<i32>:word32]
	Mem0[r29 + 60<i32>:word32] = r2
	r2 = Mem0[r6 + 16<i32>:word32]
	r1 = Mem0[r4 + 8<i32>:word32]
	r5 = Mem0[r5 + 16<i32>:word32]
	r8 = Mem0[r3 + 20<i32>:word32]
	r4 = Mem0[r9:word32]
	r3 = Mem0[r3 + 16<i32>:word32]
	Mem0[r29 + 56<i32>:word32] = r4
	r4 = Mem0[r5:word32]
	r26 = Mem0[r2:word32]
	Mem0[r29 + 96<i32>:word64] = r21_r20
	Mem0[r29 + 104<i32>:word64] = r19_r18
	r19 = 0x437F0000<32>
	r8 = Mem0[r8 + 16<i32>:word32]
	Mem0[r29 + 44<i32>:word32] = r1
	r1 = Mem0[r7 + 12<i32>:word32]
	r20 = r4 - r26
	r3 = Mem0[r3 + 16<i32>:word32]
	Mem0[r29 + 80<i32>:word64] = r25_r24
	Mem0[r29 + 64<i32>:word32] = r1
	r1_r0 = r19_r20
	Mem0[r29 + 88<i32>:word64] = r23_r22
	r18 = Mem0[r7 + 4<i32>:word32]
	r25 = Mem0[r9 + 8<i32>:word32]
	r17 = Mem0[r7:word32]
	r23 = Mem0[r9 + 12<i32>:word32]
	r24 = Mem0[r9 + 4<i32>:word32]
	r27 = Mem0[r3:word32]
	r21 = Mem0[r8:word32]
	call fn00009610 (retsize: 0;)
	r22 = r0
	r21 = r21 - r27
	r1_r0 = r19_r21
	call fn00009610 (retsize: 0;)
	r3 = 0x4F000000<32>
	r4 = r22 * r0
	r0 = r20
	r2 = 0xCF000000<32>
	Mem0[r29 + 9<i32>:byte] = r3
	r22 = r4 * r2
	r3 = r4 * r3
	r20 = 0<32>
	r1_r0 = r0_r19
	call fn00009610 (retsize: 0;)
	r24 = r17
	r26 = r24
	r2 = r20 - r26
	call fn00009620 (retsize: 0;)
	r0 = r2 * r0
	r0 = r21
	r2 = r0
	call fmaxf.1.0 (retsize: 0;)
	r19 = truncf(CONVERT(r2, uint32, real32))
	r2 = 0x437F0000<32>
	r1_r0 = r0_r2
	call fn00009610 (retsize: 0;)
	r16 = Mem0[r29 + 68<i32>:word64]
	r20 = r16
	r2 = r20 - r27
	call fn00009620 (retsize: 0;)
	r0 = r2 * r0
	r1 = 0x72<32>
	r3_r2 = SEQ(2<32>, r16)
	r4 = 0x000272FC<p32>
	Mem0[r29:word32] = r20
	call logmsg_function (retsize: 0;)
	r21 = truncf(CONVERT(r0, uint32, real32))
	Mem0[r29 + 20<i32>:word32] = r26
	Mem0[r29 + 28<i32>:word32] = r23
	r4 = 0x00027314<p32>
	r2 = Mem0[r29 + 64<i32>:word32]
	r1 = 0x75<32>
	Mem0[r29 + 24<i32>:word32] = r25
	r25 = Mem0[r29 + 56<i32>:word32]
	Mem0[r29 + 16<i32>:word32] = r25
	r17 = Mem0[r29 + 60<i32>:word32]
	Mem0[r29:word32] = r24
	Mem0[r29 + 12<i32>:word32] = r2
	r3_r2 = SEQ(2<32>, r16)
	Mem0[r29 + 4<i32>:word32] = r18
	Mem0[r29 + 8<i32>:word32] = r17
	call logmsg_function (retsize: 0;)
	Mem0[r29 + 12<i32>:word32] = r23
	r3_r2 = SEQ(2<32>, r16)
	r4 = 0x00027346<p32>
	Mem0[r29:word32] = r24
	r1 = 0x77<32>
	Mem0[r29 + 4<i32>:word32] = r18
	Mem0[r29 + 8<i32>:word32] = r17
	call logmsg_function (retsize: 0;)
	p0 = r18 == 1<32>
	r1 = 0x78<32>
	r3 = 0x00027367<p32>
	r1 = 0x79<32>
	branch p0 l00015240
	// succ:  l000151A0 l00015240
l000151A0:
	r1 = 0x7A<32>
	p0 = r26 == 1<32>
	r3 = 0x00027367<p32>
	branch p0 l00015240
	// succ:  l000151B4 l00015240
l000151B4:
	r1 = 0x7B<32>
	p0 = r24 == 1<32>
	r3 = 0x00027379<p32>
	branch p0 l00015240
	// succ:  l000151C8 l00015240
l000151C8:
	p0 = r25 == 1<32>
	r2 = r24 * r17
	r3 = 0x00027379<p32>
	branch p0 l00015240
	// succ:  l000151DC l00015240
l000151DC:
	r3 = Mem0[r29 + 52<i32>:word32]
	r1 = 0x7C<32>
	r2 = r2 * r18
	r4 = Mem0[r3 + 20<i32>:word32]
	r3 = 0x00027390<p32>
	r2 = r2 * r23
	branch r2 >u r4 l00015240
	// succ:  l00015204 l00015240
l00015204:
	r2 = r2 << 2<32>
	r3 = Mem0[r29 + 48<i32>:word64]
	r5 = 4<32>
	r1 = 0x7D<32>
	r4 = Mem0[r3 + 20<i32>:word32]
	p2 = r19 > 0xFFFFFFFF<32>
	r3 = 0x000273A1<p32>
	p3 = r21 > 0xFFFFFFFF<32>
	branch p0 l00015240
	// succ:  l00015224 l00015240
l00015224:
	p0 = r5 >u r4
	r3 = Mem0[r29 + 44<i32>:word64]
	r5 = 0<32>
	r1 = 0x7E<32>
	r4 = Mem0[r3 + 20<i32>:word32]
	r3 = 0x000273AF<p32>
	r1_r0 = r16_r20
	branch p0 l00015250
	// succ:  l00015240 l00015250
l00015240:
	p0 = r4 >u 3<32>
	r2 = r16
	call errlog_function (retsize: 0;)
	r0 = 0xFFFFFFFF<32>
	goto l000152C4
	// succ:  l000152C4
l00015250:
	r6 = Mem0[r29 + 48<i32>:word64]
	r7 = Mem0[r29 + 52<i32>:word64]
	r3 = 0xFF<32>
	p0 = r19 > 0xFF<32>
	Mem0[r7 + 12<i32>:word32] = r23
	Mem0[r7:word32] = 1<32>
	Mem0[r7 + 4<i32>:word32] = 1<32>
	Mem0[r7 + 8<i32>:word32] = r17
	Mem0[r7 + 24<i32>:word32] = r2
	r3 = CONVERT(SLICE(r21, byte, 0), byte, uint32)
	r2 = r3 + 0<32>
	r7 = Mem0[r29 + 44<i32>:word64]
	r4 = Mem0[r6 + 16<i32>:word32]
	r3 = r5 + 0<32>
	r2 = CONVERT(SLICE(r19, byte, 0), byte, uint32)
	Mem0[r6 + 12<i32>:word32] = 1<32>
	Mem0[r6 + 8<i32>:word32] = 1<32>
	r2 = r5 + 0<32>
	Mem0[r6 + 4<i32>:word32] = 1<32>
	Mem0[r6:word32] = 1<32>
	Mem0[r4:word32] = r22
	Mem0[r7 + 8<i32>:word32] = 1<32>
	r4 = Mem0[r7 + 16<i32>:word32]
	Mem0[r7:word32] = 1<32>
	Mem0[r7 + 4<i32>:word32] = 1<32>
	Mem0[r7 + 12<i32>:word32] = 1<32>
	r5 = Mem0[r29 + 36<i32>:word64]
	Mem0[r4:word32] = r5
	r4 = Mem0[r29 + 40<i32>:word64]
	Mem0[r7 + 24<i32>:word32] = 4<32>
	Mem0[r6 + 24<i32>:word32] = 4<32>
	call r4 (retsize: 0;)
	r1 = 0x8C<32>
	r3_r2 = SEQ(2<32>, r16)
	r4 = 0x000273BD<p32>
	call logmsg_function (retsize: 0;)
	r0 = 0<32>
	// succ:  l000152C4
l000152C4:
	r19_r18 = Mem0[r29 + 104<i32>:word64]
	r17_r16 = Mem0[r29 + 112<i32>:word64]
	r23_r22 = Mem0[r29 + 88<i32>:word64]
	r21_r20 = Mem0[r29 + 96<i32>:word64]
	r27_r26 = Mem0[r29 + 72<i32>:word64]
	r25_r24 = Mem0[r29 + 80<i32>:word64]
	v46 = r30
	r31 = Mem0[v46 + 4<i32>:word32]
	r30 = Mem0[v46:word32]
	r29 = v46 + 8<i32>
	return
	// succ:  matmul_execute_exit
matmul_execute_exit:


// matmul_ref
// Return size: 0
define matmul_ref
matmul_ref_entry:
	r29 = fp
	// succ:  l000152E0
l000152E0:
	v4 = r29 - 8<i32>
	Mem0[v4:word32] = r30
	Mem0[v4 + 4<i32>:word32] = r31
	r30 = v4
	r29 = v4 - 56<i32>
	r4 = 0x000272B1<p32>
	r5 = Mem0[r0 + 4<i32>:word32]
	r6 = Mem0[r0 + 8<i32>:word32]
	Mem0[r29 + 48<i32>:word64] = r17_r16
	Mem0[r29 + 40<i32>:word64] = r19_r18
	r17_r16 = r1_r3
	r18 = r2
	r5 = Mem0[r5 + 4<i32>:word32]
	r2 = Mem0[r5:word32]
	r1 = 0xAD<32>
	Mem0[r29 + 32<i32>:word64] = r21_r20
	r6 = Mem0[r6:word32]
	Mem0[r29 + 24<i32>:word64] = r23_r22
	Mem0[r29 + 16<i32>:word64] = r25_r24
	r19 = Mem0[r2 + 12<i32>:word32]
	r23 = Mem0[r2 + 16<i32>:word32]
	r20 = Mem0[r2 + 8<i32>:word32]
	r22 = Mem0[r5 + 12<i32>:word32]
	r21 = Mem0[r5 + 16<i32>:word32]
	r3_r2 = SEQ(2<32>, r17)
	Mem0[r29 + 12<i32>:word32] = r16
	r24 = Mem0[r6 + 16<i32>:word32]
	Mem0[r29 + 4<i32>:word32] = r19
	Mem0[r29 + 8<i32>:word32] = r18
	Mem0[r29:word32] = r20
	call logmsg_function (retsize: 0;)
	r2 = 0<32>
	branch p0 l000153B4
	// succ:  l0001533C l000153B4
l0001533C:
	p0 = r12 == 0<32>
	branch p0 l000153AC
	// succ:  l00015344 l000153AC
l00015344:
	p0 = r14 == 0<32>
	r5 = r2 * r22
	r3 = r21
	r4 = r2
	__loop(1<i32>, 0x00015354<p32>, r22)
	r4 = r23 + r4 * r19
	r5 = r24 + (r5 << 2<32>)
	r6 = 0<32>
	r12 = r19 + 0xFFFFFFFF<32>
	branch p0 l000153A0
	// succ:  l00015360 l000153A0
l00015360:
	p0 = r11 == 0<32>
	r9 = Mem0[r3:byte]
	p0 = r19 >u 1<32>
	r8 = r3 + r22
	r7_r6 = SEQ(r4, 0<32>)
	r7 = r7 + 1<i32>
	r13 = Mem0[r7:byte]
	r9 = r9 - r16
	__loop(0<i32>, 0x00015384<p32>, r12)
	r12 = r13 - r18
	branch p0 l0001539C
	// succ:  l00015384 l0001539C
l00015384:
	r7 = r7 + 1<i32>
	r14 = Mem0[r7:byte]
	r13 = Mem0[r8:byte]
	r8 = r8 + r22
	r6 = r6 + r9 * r12
	r12 = r14 - r18
	r9 = r13 - r16
	// succ:  l0001539C
l0001539C:
	r6 = r6 + r9 * r12
	// succ:  l000153A0
l000153A0:
	Mem0[r5:word32] = r6
	r5 = r5 + 4<i32>
	r3 = r3 + 1<32>
	// succ:  l000153AC
l000153AC:
	branch r2 == r20 l0001533C
	goto l000153B8
	// succ:  l000153B8 l0001533C
l000153B4:
	r1 = 0xBA<32>
	r3_r2 = SEQ(2<32>, r17)
	r4 = 0x000272E3<p32>
	r19_r18 = Mem0[r29 + 40<i32>:word64]
	r17_r16 = Mem0[r29 + 48<i32>:word64]
	call logmsg_function (retsize: 0;)
	r23_r22 = Mem0[r29 + 24<i32>:word64]
	r21_r20 = Mem0[r29 + 32<i32>:word64]
	v40 = r30
	r31 = Mem0[v40 + 4<i32>:word32]
	r30 = Mem0[v40:word32]
	r29 = v40 + 8<i32>
	return
	// succ:  matmul_ref_exit
l000153B8:
	r2 = r2 + 1<32>
	r1 = 0xBA<32>
	r3_r2 = SEQ(2<32>, r17)
	r4 = 0x000153E7<p32>
	r19_r18 = Mem0[r29 + 40<i32>:word64]
	r17_r16 = Mem0[r29 + 48<i32>:word64]
	call logmsg_function (retsize: 0;)
	r23_r22 = Mem0[r29 + 24<i32>:word64]
	r21_r20 = Mem0[r29 + 32<i32>:word64]
	v41 = r30
	r31 = Mem0[v41 + 4<i32>:word32]
	r30 = Mem0[v41:word32]
	r29 = v41 + 8<i32>
	return
	// succ:  matmul_ref_exit
matmul_ref_exit:


// logmsg_function
// Return size: 0
define logmsg_function
logmsg_function_entry:
	r29 = fp
	// succ:  l000153D8
l000153D8:
	v4 = r29 - 8<i32>
	Mem0[v4:word32] = r30
	Mem0[v4 + 4<i32>:word32] = r31
	r30 = v4
	r29 = v4 - 8<i32>
	branch r3 >u r5 l000153F8
	// succ:  l000153E8 l000153F8
l000153E8:
	r5 = Mem0[r2 + 16<i32>:word32]
	r6 = r29 + 0x10<32>
	r5 = r29 + 0x10<32>
	r0 = 0x00015419<p32>
	Mem0[r29 + 4<i32>:word32] = r6
	call logv (retsize: 0;)
	// succ:  l000153F8
l000153F8:
	v13 = r30
	r31 = Mem0[v13 + 4<i32>:word32]
	r30 = Mem0[v13:word32]
	r29 = v13 + 8<i32>
	return
	// succ:  logmsg_function_exit
logmsg_function_exit:


// errlog_function
// Return size: 0
define errlog_function
errlog_function_entry:
	r29 = fp
	// succ:  l00015400
l00015400:
	v4 = r29 - 8<i32>
	Mem0[v4:word32] = r30
	Mem0[v4 + 4<i32>:word32] = r31
	r30 = v4
	r29 = v4 - 8<i32>
	r4 = r3
	r0 = 0x00027295<p32>
	Mem0[r29 + 1<i32>:byte] = r6
	r6 = r29 + 0x10<32>
	r5 = r29 + 0x10<32>
	r3 = 0<32>
	v13 = r30
	r31 = Mem0[v13 + 4<i32>:word32]
	r30 = Mem0[v13:word32]
	r29 = v13 + 8<i32>
	return
	// succ:  errlog_function_exit
errlog_function_exit:


// matmul_asm
// Return size: 0
define matmul_asm
matmul_asm_entry:
	r29 = fp
	// succ:  l00015424
l00015424:
	v4 = r29 - 8<i32>
	Mem0[v4:word32] = r30
	Mem0[v4 + 4<i32>:word32] = r31
	r30 = v4
	r29 = v4 - 80<i32>
	Mem0[r29 - 32<i32>:word64] = r21_r20
	r21_r20 = r0_r3
	Mem0[r29 + 40<i32>:word64] = r25_r24
	r4 = Mem0[r21 + 4<i32>:word32]
	r5 = Mem0[r21 + 8<i32>:word32]
	Mem0[r29 + 64<i32>:word64] = r19_r18
	Mem0[r29 + 72<i32>:word64] = r17_r16
	r16 = r1
	r19 = r2
	r5 = Mem0[r5:word32]
	r6 = Mem0[r4:word32]
	Mem0[r29 + 48<i32>:word64] = r23_r22
	r4 = Mem0[r4 + 4<i32>:word32]
	r17 = Mem0[r6 + 16<i32>:word32]
	r24 = Mem0[r6 + 8<i32>:word32]
	r18 = Mem0[r5 + 16<i32>:word32]
	r23 = Mem0[r6 + 12<i32>:word32]
	r1 = 0xDB<32>
	p0 = r24 == 1<32>
	Mem0[r29 + 32<i32>:word64] = r27_r26
	r22 = Mem0[r4 + 12<i32>:word32]
	r25 = r23 + 0xF<32>
	branch p0 l000154F0
	// succ:  l00015470 l000154F0
l00015470:
	Mem0[r29 + 4<i32>:word32] = r23
	Mem0[r29 + 20<i32>:word32] = r20
	r4 = 0x00027555<p32>
	Mem0[r29 + 28<i32>:word32] = r16
	Mem0[r29 + 16<i32>:word32] = r19
	r3_r2 = SEQ(2<32>, r16)
	r24 = r25 & 0xFFFFFFF0<32>
	Mem0[r29 + 8<i32>:word32] = 1<32>
	Mem0[r29 + 12<i32>:word32] = r24
	Mem0[r29:word32] = 1<32>
	call logmsg_function (retsize: 0;)
	r2 = r25
	r23 = 0xFFFFFE00<32>
	branch p0 l000155C0
	// succ:  l000154A4 l000155C0
l000154A4:
	p0 = r14 == 0<32>
	r16 = 0<32>
	r27_r26 = 0x20<64>
	r25 = r22
	r20 = 0<32> - r20
	r19 = 0<32> - r19
	r23 = r23 & r2 << 5<32>
	// succ:  l000154BC
l000154BC:
	r2 = Mem0[r21 + 8<i32>:word32]
	r4 = r18
	r1_r0 = r19_r17
	r5 = min<int32>(r26, r25)
	Mem0[r29:word32] = r24
	r2 = r2 + r16
	r3 = r20
	call gemvmpybbw_asm (retsize: 0;)
	r18 = r18 + 0x80<32>
	r16 = r16 + r23
	r25 = r25 + 0xFFFFFFE0<32>
	branch r22 >u r27 l000154BC
	// succ:  l000154F0 l000154BC
l000154F0:
	r27 = r27 + 0x20<32>
	Mem0[r29 + 12<i32>:word32] = r20
	r21 = Mem0[r4 + 16<i32>:word32]
	r4 = 0x000272B1<p32>
	Mem0[r29:word32] = r24
	r3_r2 = SEQ(2<32>, r16)
	Mem0[r29 + 4<i32>:word32] = r23
	Mem0[r29 + 8<i32>:word32] = r19
	r1 = 0xAD<32>
	call logmsg_function (retsize: 0;)
	p0 = r24 == 0<32>
	r2 = 0<32>
	branch p0 l00015594
	// succ:  l0001551C l00015594
l0001551C:
	branch p0 l0001558C
	// succ:  l00015524 l0001558C
l00015524:
	p0 = r14 == 0<32>
	r5 = r2 * r22
	r3 = r21
	r4 = r2
	__loop(1<i32>, 0x00015534<p32>, r22)
	r4 = r17 + r4 * r23
	r5 = r18 + (r5 << 2<32>)
	r6 = 0<32>
	r12 = r23 + 0xFFFFFFFF<32>
	branch p0 l00015580
	// succ:  l00015540 l00015580
l00015540:
	p0 = r15 == 0<32>
	r9 = Mem0[r3:byte]
	p0 = r23 >u 1<32>
	r8 = r3 + r22
	r7_r6 = SEQ(r4, 0<32>)
	r7 = r7 + 1<i32>
	r13 = Mem0[r7:byte]
	r9 = r9 - r20
	__loop(0<i32>, 0x00015564<p32>, r12)
	r12 = r13 - r19
	branch p0 l0001557C
	// succ:  l00015564 l0001557C
l00015564:
	r7 = r7 + 1<i32>
	r14 = Mem0[r7:byte]
	r13 = Mem0[r8:byte]
	r8 = r8 + r22
	r6 = r6 + r9 * r12
	r12 = r14 - r19
	r9 = r13 - r20
	// succ:  l0001557C
l0001557C:
	r6 = r6 + r9 * r12
	// succ:  l00015580
l00015580:
	Mem0[r5:word32] = r6
	r5 = r5 + 4<i32>
	r3 = r3 + 1<32>
	// succ:  l0001558C
l0001558C:
	branch r2 == r24 l0001551C
	goto l00015598
	// succ:  l00015598 l0001551C
l00015594:
	r1 = 0xBA<32>
	r3_r2 = SEQ(2<32>, r16)
	r4 = 0x000272E3<p32>
	goto l000155A4
	// succ:  l000155A4
l00015598:
	r2 = r2 + 1<32>
	r1 = 0xBA<32>
	r3_r2 = SEQ(2<32>, r16)
	r4 = 0x000155A7<p32>
	// succ:  l000155A4
l000155A4:
	call logmsg_function (retsize: 0;)
	r1 = 0xEB<32>
	r3_r2 = SEQ(2<32>, r16)
	r4 = 0x000275AA<p32>
	Mem0[r29 + 28<i32>:word32] = r16
	call logmsg_function (retsize: 0;)
	// succ:  l000155C0
l000155C0:
	r1 = 0xEE<32>
	r3 = 2<32>
	r4 = 0x000275FB<p32>
	r17_r16 = Mem0[r29 + 72<i32>:word64]
	r2 = Mem0[r29 + 28<i32>:word64]
	call logmsg_function (retsize: 0;)
	r21_r20 = Mem0[r29 + 56<i32>:word64]
	r19_r18 = Mem0[r29 + 64<i32>:word64]
	r25_r24 = Mem0[r29 + 40<i32>:word64]
	r23_r22 = Mem0[r29 + 48<i32>:word64]
	v46 = r30
	r31 = Mem0[v46 + 4<i32>:word32]
	r30 = Mem0[v46:word32]
	r29 = v46 + 8<i32>
	return
	// succ:  matmul_asm_exit
matmul_asm_exit:


// fmaxf.1.0
// Return size: 0
define fmaxf.1.0
fmaxf.1.0_entry:
	r29 = fp
	// succ:  l000155EC
l000155EC:
	r2 = 0x38D1B717<32>
	r1_r0 = r0_r2
	// succ:  l000155F4_thunk_fn00009600
l000155F4_thunk_fn00009600:
	call fn00009600 (retsize: 0;)
	return
	// succ:  fmaxf.1.0_exit
fmaxf.1.0_exit:


// maxpool_execute_asm
// Return size: 0
define maxpool_execute_asm
maxpool_execute_asm_entry:
	r29 = fp
	// succ:  l00015600
l00015600:
	// succ:  l00015600_thunk_maxpool_execute
l00015600_thunk_maxpool_execute:
	call maxpool_execute (retsize: 0;)
	return
	// succ:  maxpool_execute_asm_exit
maxpool_execute_asm_exit:


// maxpool_check
// Return size: 0
define maxpool_check
maxpool_check_entry:
	r29 = fp
	// succ:  l0001560C
l0001560C:
	v4 = r29 - 8<i32>
	Mem0[v4:word32] = r30
	Mem0[v4 + 4<i32>:word32] = r31
	r30 = v4
	r29 = v4 - 48<i32>
	Mem0[r29 - 16<i32>:word64] = r17_r16
	r4 = 0x00027693<p32>
	r17 = r0
	r16 = r1
	r1 = 0x16C<32>
	Mem0[r29:word32] = r17
	Mem0[r29 + 32<i32>:word64] = r19_r18
	r3_r2 = SEQ(2<32>, r16)
	call logmsg_function (retsize: 0;)
	branch r2 == 5<32> l00015650
	// succ:  l0001563C l00015650
l0001563C:
	r2 = Mem0[r17 + 16<i32>:word32]
	r1 = 0x16D<32>
	r3 = 0x00015670<p32>
	// succ:  l00015640
l00015640:
	r2 = r16
	call errlog_function (retsize: 0;)
	// succ:  l00015644
l00015644:
	r0 = 0xFFFFFFFF<32>
	goto l00015748
	// succ:  l00015748
l00015650:
	branch r2 == 3<32> l0001566C
	// succ:  l00015660 l0001566C
l00015660:
	r2 = Mem0[r17 + 20<i32>:word32]
	r1 = 0x171<32>
	r1 = 0x16E<32>
	goto l00015644
	// succ:  l00015644
l0001566C:
	Mem0[r29:word32] = r17
	r3_r2 = SEQ(3<32>, r16)
	r4 = 0x000276D8<p32>
	call logmsg_function (retsize: 0;)
	branch r2 == 0<32> l000156F4
l0001568C:
	r2 = Mem0[r17 + 4<i32>:word32]
	// succ:  l00015690 l000156F4
l00015690:
	r2 = Mem0[r17 + 16<i32>:word32]
	r19_r18 = 0<64>
	branch r2 == 0<32> l000156AC
	// succ:  l0001569C l000156AC
l0001569C:
	r2 = Mem0[r5 + r18:word32]
	Mem0[r29:word32] = r19
	r1 = 0x174<32>
	r3 = 0x000156D9<p32>
	goto l00015640
	// succ:  l00015640
l000156AC:
	r6 = Mem0[r2 + 4<i32>:word32]
	r5 = Mem0[r2:word32]
	r4 = 0x0002775B<p32>
	r8 = Mem0[r2 + 12<i32>:word32]
	r7 = Mem0[r2 + 8<i32>:word32]
	r1 = 0x166<32>
	r2 = Mem0[r2 + 16<i32>:word32]
	r9 = Mem0[r2 + 24<i32>:word32]
	Mem0[r29 + 12<i32>:word32] = r7
	Mem0[r29 + 24<i32>:word32] = r2
	r3_r2 = SEQ(3<32>, r16)
	Mem0[r29 + 16<i32>:word32] = r8
	Mem0[r29 + 20<i32>:word32] = r9
	Mem0[r29 + 4<i32>:word32] = r5
	Mem0[r29 + 8<i32>:word32] = r6
	Mem0[r29:word32] = r19
	call logmsg_function (retsize: 0;)
	r2 = Mem0[r17 + 16<i32>:word32]
	r18 = r18 + 4<32>
	branch r2 >u r19 l0001568C
	goto l000156F8
	// succ:  l000156F8 l0001568C
l000156F4:
	branch r2 == 0<32> l0001572C
	goto l00015700
	// succ:  l00015700 l0001572C
l000156F8:
	r19 = r19 + 1<32>
	branch r2 == 0<32> l00015730
	// succ:  l00015700 l00015730
l00015700:
	r2 = Mem0[r17 + 20<i32>:word32]
	r3 = Mem0[r17 + 8<i32>:word32]
	branch r2 >u r4 l0001572C
l00015708:
	branch r2 >u r4 l00015730
	// succ:  l00015714 l0001572C l00015730
l00015714:
	r4 = r4 + 1<32>
	r3 = r3 + 4<32>
	branch r5 == 0<32> l00015708
	// succ:  l0001571C l00015708
l0001571C:
	Mem0[r29:word32] = r4
	r1 = 0x17A<32>
	r3 = 0x0001572F<p32>
	goto l00015640
	// succ:  l00015640
l0001572C:
	r1 = 0x17D<32>
	r3_r2 = SEQ(2<32>, r16)
	r4 = 0x00027742<p32>
	goto l0001573C
	// succ:  l0001573C
l00015730:
	r1 = 0x17D<32>
	r3_r2 = SEQ(2<32>, r16)
	r4 = 0x00015746<p32>
	// succ:  l0001573C
l0001573C:
	Mem0[r29:word32] = r17
	call logmsg_function (retsize: 0;)
	r0 = 0<32>
	// succ:  l00015748
l00015748:
	r19_r18 = Mem0[r29 + 32<i32>:word64]
	r17_r16 = Mem0[r29 + 40<i32>:word64]
	v18 = r30
	r31 = Mem0[v18 + 4<i32>:word32]
	r30 = Mem0[v18:word32]
	r29 = v18 + 8<i32>
	return
	// succ:  maxpool_check_exit
maxpool_check_exit:


// maxpool_execute_ref
// Return size: 0
define maxpool_execute_ref
maxpool_execute_ref_entry:
	r29 = fp
	// succ:  l00015750
l00015750:
	// succ:  l00015750_thunk_maxpool_execute
l00015750_thunk_maxpool_execute:
	call maxpool_execute (retsize: 0;)
	return
	// succ:  maxpool_execute_ref_exit
maxpool_execute_ref_exit:


// maxpool_execute
// Return size: 0
define maxpool_execute
maxpool_execute_entry:
	r29 = fp
	// succ:  l00015760
l00015760:
	v4 = r29 - 8<i32>
	Mem0[v4:word32] = r30
	Mem0[v4 + 4<i32>:word32] = r31
	r30 = v4
	r29 = v4 - 136<i32>
	Mem0[r29 - 16<i32>:word64] = r17_r16
	r17_r16 = r0_r1
	Mem0[r29 + 112<i32>:word64] = r21_r20
	r3 = Mem0[r17 + 4<i32>:word32]
	r4 = Mem0[r17 + 8<i32>:word32]
	r21 = Mem0[r17 + 32<i32>:int8]
	Mem0[r29 + 96<i32>:word64] = r25_r24
	Mem0[r29 + 88<i32>:word64] = r27_r26
	r25 = Mem0[r3 + 16<i32>:word32]
	r5 = Mem0[r3:word32]
	p0 = r21 == 0<32>
	Mem0[r29 + 8<i32>:word32] = r2
	r2 = Mem0[r3 + 8<i32>:word32]
	r26 = Mem0[r3 + 12<i32>:word32]
	r0 = p0
	Mem0[r29 + 24<i32>:word32] = r2
	r2 = Mem0[r3 + 4<i32>:word32]
	Mem0[r29 + 120<i32>:word64] = r19_r18
	Mem0[r29 + 104<i32>:word64] = r23_r22
	Mem0[r29 + 12<i32>:word32] = r2
	r27 = Mem0[r4:word32]
	r2 = Mem0[r5 + 8<i32>:word32]
	r23 = Mem0[r5:word32]
	r24 = Mem0[r5 + 12<i32>:word32]
	r20 = Mem0[r5 + 4<i32>:word32]
	r22 = Mem0[r25 + 4<i32>:word32]
	r1 = Mem0[r25 + 8<i32>:word32]
	r6 = Mem0[r4 + 4<i32>:word32]
	r18 = Mem0[r26 + 4<i32>:word32]
	r7 = Mem0[r4 + 8<i32>:word32]
	Mem0[r29 + 20<i32>:word32] = r7
	Mem0[r29 + 16<i32>:word32] = r6
	Mem0[r29 + 28<i32>:word32] = r0
	branch p0 l000157D4
	// succ:  l000157D0 l000157D4
l000157D0:
	goto l000157F8
	// succ:  l000157F8
l000157D4:
	r3 = Mem0[r26 + 8<i32>:word32]
	r2 = r1 + r2
	branch p0 l000157F4
	// succ:  l000157E0 l000157F4
l000157E0:
	p0 = r13 == 2<32>
	r0 = r1 + 0<32>
	r19 = 0<32>
	branch p0 l00015800
	// succ:  l000157EC l00015800
l000157EC:
	p0 = r13 == 1<32>
	goto l000157F8
	// succ:  l000157F8
l000157F4:
	r0 = r2 - r3
	// succ:  l000157F8
l000157F8:
	call fn00009760 (retsize: 0;)
	r19 = r0
	// succ:  l00015800
l00015800:
	r1 = r22 + 0<32>
	r2 = r22 + r20
	branch p0 l00015830
	// succ:  l0001580C l00015830
l0001580C:
	p0 = r13 == 2<32>
	r1_r0 = r22_r22
	branch p0 l00015828
	// succ:  l00015814 l00015828
l00015814:
	p0 = r13 == 1<32>
	r0 = Mem0[r29 + 28<i32>:word64]
	r21 = 0<32>
	r1_r0 = r22_r20
	branch p0 l0001583C
	// succ:  l00015824 l0001583C
l00015824:
	p0 = r0
	goto l00015834
	// succ:  l00015834
l00015828:
	goto l00015834
	// succ:  l00015834
l00015830:
	r0 = r2 - r18
	// succ:  l00015834
l00015834:
	call fn00009760 (retsize: 0;)
	r21 = r0
	// succ:  l0001583C
l0001583C:
	Mem0[r29 + 32<i32>:word32] = r17
	r3_r2 = 0<64>
	r5 = r29 + 0x38<32>
	r4 = r29 + 0x20<32>
	Mem0[r4 + 4<i32>:word32] = 0xFFFFFF81<32>
	r22 = r5 + 8<32>
	r20 = r4 + 8<32>
	Mem0[r29 + 56<i32>:word64] = r3_r2
	Mem0[r29 + 64<i32>:word64] = r3_r2
	r1_r0 = SEQ(0<32>, r20)
	Mem0[r4 + 20<i32>:word32] = 0<32>
	Mem0[r29 + 72<i32>:word64] = r3_r2
	Mem0[r4 + 12<i32>:word32] = 0<32>
	Mem0[r4 + 16<i32>:word32] = 0<32>
	Mem0[r29 + 56<i32>:word32] = r17
	Mem0[r4 + 8<i32>:word32] = 0<32>
	call fn00009740 (retsize: 0;)
	r1_r0 = SEQ(0<32>, r22)
	call fn00009740 (retsize: 0;)
	r1 = 0x137<32>
	r3_r2 = SEQ(2<32>, r16)
	r4 = 0x00027631<p32>
	Mem0[r29:word32] = r17
	call logmsg_function (retsize: 0;)
	branch r2 == 1<32> l000158AC
	// succ:  l00015898 l000158AC
l00015898:
	r2 = Mem0[r26:word32]
	branch r2 == 1<32> l000158B0
	// succ:  l000158A0 l000158B0
l000158A0:
	branch r2 == 1<32> l000158B0
	// succ:  l000158A8 l000158B0
l000158A8:
	branch r2 == 1<32> l000158CC
	goto l000158B0
	// succ:  l000158B0 l000158CC
l000158AC:
	r1 = 0x13C<32>
	r3 = 0x0002764B<p32>
	goto l000158B8
	// succ:  l000158B8
l000158B0:
	r1 = 0x13C<32>
	r3 = 0x000158CF<p32>
	// succ:  l000158B8
l000158B8:
	r2 = r16
	call errlog_function (retsize: 0;)
	// succ:  l000158BC
l000158BC:
	r0 = 0xFFFFFFFF<32>
	goto l000159CC
	// succ:  l000159CC
l000158CC:
	r4 = Mem0[r27 + 20<i32>:word32]
	r1 = 0x13E<32>
	r2 = r2 * r19
	branch r3 >u r4 l000158EC
	// succ:  l000158E4 l000158EC
l000158E4:
	r3 = r2 * r21
	goto l000158BC
	// succ:  l000158BC
l000158EC:
	branch r2 == 0<32> l00015904
	// succ:  l000158FC l00015904
l000158FC:
	r2 = Mem0[r17 + 32<i32>:int8]
	r1 = 0x13F<32>
	goto l000158BC
	// succ:  l000158BC
l00015904:
	Mem0[r27 + 4<i32>:word32] = r21
	r18 = Mem0[r29 + 8<i32>:word32]
	r2 = r29 + 0x20<32>
	Mem0[r27 + 12<i32>:word32] = r24
	Mem0[r27:word32] = r23
	r1_r0 = r18_r16
	Mem0[r27 + 24<i32>:word32] = r3
	Mem0[r27 + 8<i32>:word32] = r19
	call nn_os_work_for_vector (retsize: 0;)
	r0 = r16
	r1 = r29 + 0x38<32>
	call r18 (retsize: 0;)
	r0 = r20
	call fn000096A0 (retsize: 0;)
	r4 = Mem0[r29 + 16<i32>:word64]
	r5 = Mem0[r29 + 12<i32>:word64]
	r2 = Mem0[r5:word32]
	Mem0[r4 + 1<i32>:byte] = r3
	r3 = Mem0[r5 + 4<i32>:word32]
	r2 = Mem0[r5 + 8<i32>:word32]
	Mem0[r4 + 8<i32>:word32] = r2
	r7 = Mem0[r5 + 12<i32>:word32]
	Mem0[r4 + 12<i32>:word32] = r7
	r2 = Mem0[r5 + 24<i32>:word32]
	branch r2 >u r6 l00015974
	// succ:  l0001596C l00015974
l0001596C:
	r6 = Mem0[r4 + 20<i32>:word32]
	r1 = Mem0[r5 + 16<i32>:word32]
	r2 = Mem0[r5 + 24<i32>:word32]
	call fn00009560 (retsize: 0;)
	// succ:  l00015974
l00015974:
	r5 = Mem0[r29 + 20<i32>:word64]
	r4 = Mem0[r29 + 24<i32>:word64]
	r2 = Mem0[r4:word32]
	Mem0[r5 + 1<i32>:byte] = r3
	r3 = Mem0[r4 + 4<i32>:word32]
	r2 = Mem0[r4 + 8<i32>:word32]
	Mem0[r5 + 8<i32>:word32] = r2
	r7 = Mem0[r4 + 12<i32>:word32]
	Mem0[r5 + 12<i32>:word32] = r7
	r2 = Mem0[r4 + 24<i32>:word32]
	branch r2 >u r6 l000159B0
	// succ:  l000159A8 l000159B0
l000159A8:
	r6 = Mem0[r5 + 20<i32>:word32]
	r1 = Mem0[r4 + 16<i32>:word32]
	r2 = Mem0[r4 + 24<i32>:word32]
	call fn00009560 (retsize: 0;)
	// succ:  l000159B0
l000159B0:
	r1 = 0x14B<32>
	r3_r2 = SEQ(2<32>, r16)
	r4 = 0x00027683<p32>
	Mem0[r29:word32] = r17
	call logmsg_function (retsize: 0;)
	r0 = 0<32>
	// succ:  l000159CC
l000159CC:
	r19_r18 = Mem0[r29 + 120<i32>:word64]
	r17_r16 = Mem0[r29 + 128<i32>:word64]
	r23_r22 = Mem0[r29 + 104<i32>:word64]
	r21_r20 = Mem0[r29 + 112<i32>:word64]
	r27_r26 = Mem0[r29 + 88<i32>:word64]
	r25_r24 = Mem0[r29 + 96<i32>:word64]
	v41 = r30
	r31 = Mem0[v41 + 4<i32>:word32]
	r30 = Mem0[v41:word32]
	r29 = v41 + 8<i32>
	return
	// succ:  maxpool_execute_exit
maxpool_execute_exit:


// maxpool_execute_slice_ref
// Return size: 0
define maxpool_execute_slice_ref
maxpool_execute_slice_ref_entry:
	r29 = fp
	goto l000159E0
	// succ:  l000159E0
l00009730_in_maxpool_execute_slice_ref:
	r14 = 0x0002B1B0<p32>
	r28 = Mem0[r14:word32]
	call r28 (retsize: 0;)
	return
	// succ:  maxpool_execute_slice_ref_exit
l000159E0:
	v4 = r29 - 8<i32>
	Mem0[v4:word32] = r30
	Mem0[v4 + 4<i32>:word32] = r31
	r30 = v4
	r29 = v4 - 152<i32>
	r3 = Mem0[r1 + 4<i32>:word32]
	r2 = Mem0[r1:word32]
	Mem0[r29 + 144<i32>:word64] = r17_r16
	Mem0[r29 + 136<i32>:word64] = r19_r18
	r18 = Mem0[r2 + 32<i32>:int8]
	r7 = Mem0[r2 + 4<i32>:word32]
	Mem0[r29 + 16<i32>:word32] = r3
	r2 = Mem0[r2 + 8<i32>:word32]
	r4 = Mem0[r7 + 16<i32>:word32]
	r16 = Mem0[r7:word32]
	p0 = r18 == 0<32>
	Mem0[r29 + 120<i32>:word64] = r23_r22
	r3 = Mem0[r7 + 12<i32>:word32]
	r5 = Mem0[r16 + 8<i32>:word32]
	Mem0[r29 + 128<i32>:word64] = r21_r20
	Mem0[r29 + 112<i32>:word64] = r25_r24
	Mem0[r29 + 104<i32>:word64] = r27_r26
	r21 = r5
	r0 = r5
	Mem0[r29:word32] = r1
	r22 = Mem0[r4 + 4<i32>:word32]
	r1 = p0
	r17 = Mem0[r4 + 8<i32>:word32]
	r19 = Mem0[r2:word32]
	r23 = Mem0[r16 + 4<i32>:word32]
	r24 = Mem0[r16 + 12<i32>:word32]
	r2 = r17 + r21
	r26 = Mem0[r3 + 8<i32>:word32]
	r25 = Mem0[r3 + 4<i32>:word32]
	Mem0[r29 + 3<i32>:byte] = r7
	r7 = Mem0[r16:word32]
	branch p0 l00015A64
	// succ:  l00015A4C l00015A64
l00015A4C:
	r0 = r2 - r26
	branch p0 l00015A64
	// succ:  l00015A54 l00015A64
l00015A54:
	p0 = r10 == 2<32>
	r0 = r17 + 0<32>
	r20 = 0<32>
	branch p0 l00015A70
	// succ:  l00015A60 l00015A70
l00015A60:
	p0 = r10 == 1<32>
	r0 = r0 + (r21 + 0xFFFFFFFF<32>)
	// succ:  l00015A64
l00015A64:
	r1 = r17
	call fn00009760 (retsize: 0;)
	r20 = r0
	// succ:  l00015A70
l00015A70:
	r1 = r22 + 0<32>
	r2 = r22 + r23
	branch p0 l00015AA8
	// succ:  l00015A7C l00015AA8
l00015A7C:
	p0 = r10 == 2<32>
	r1_r0 = r22_r22
	branch p0 l00015AA0
	// succ:  l00015A84 l00015AA0
l00015A84:
	p0 = r10 == 1<32>
	Mem0[r29 + 17<i32>:byte] = r2
	r0 = Mem0[r29 + 96<i32>:word32]
	r2 = 0<32>
	r1_r0 = r22_r23
	branch p0 l00015AB8
	// succ:  l00015A9C l00015AB8
l00015A9C:
	goto l00015AAC
	// succ:  l00015AAC
l00015AA0:
	goto l00015AAC
	// succ:  l00015AAC
l00015AA8:
	r0 = r2 - r25
	// succ:  l00015AAC
l00015AAC:
	call fn00009760 (retsize: 0;)
	Mem0[r29 + 68<i32>:word32] = r0
	branch r2 > 0<32> l00015D28
	goto l00015AC4
	// succ:  l00015AC4 l00015D28
l00015AB8:
	branch r2 > 0<32> l00015D2C
	// succ:  l00015AC4 l00015D2C
l00015AC4:
	r2 = Mem0[r29 + 12<i32>:word32]
	r3 = r25 - r23
	r2 = Mem0[r29 + 68<i32>:word64]
	r6 = r20
	r4 = r26 - r21
	r5 = Mem0[r29 + 16<i32>:word64]
	r2 = r2
	r4 = 0xFFFFFFFF<32> - r21
	r6 = r4 + r6 * r17
	r3 = 0<32>
	r1 = r24 * r21
	r2 = r3 + r2 * r22
	Mem0[r29 + 52<i32>:word32] = r8
	r8 = 0xFFFFFFFF<32> - r23
	r6 = r6 + (r6 >>u 0x1F<32>)
	r7 = r5 * r22
	r15 = r6 >> 1<32>
	r2 = r2 + (r2 >>u 0x1F<32>)
	Mem0[r29 + 96<i32>:word32] = r4
	Mem0[r29 + 48<i32>:word32] = r3
	r4 = r21
	r3 = 0<32>
	r9 = Mem0[r19 + 16<i32>:word32]
	r2 = r2 >> 1<32>
	r5 = r21 * r24
	Mem0[r29 + 64<i32>:word32] = r1
	Mem0[r29 + 32<i32>:word32] = r8
	r8 = r26
	r1 = r7 - r2
	r12 = Mem0[r16 + 16<i32>:word32]
	r6 = r15 + (0x7F<32> - r26)
	Mem0[r29 + 92<i32>:word32] = r9
	Mem0[r29 + 72<i32>:word32] = r2
	r9 = 0<32>
	r2 = r2 + (0x7F<32> - r7)
	Mem0[r29 + 44<i32>:word32] = r23
	Mem0[r29 + 8<i32>:word32] = r1
	r2 = r2 - r25
	r1 = 0<32> - r15
	Mem0[r29 + 20<i32>:word32] = r9
	Mem0[r29 + 36<i32>:word32] = r25
	Mem0[r29 + 24<i32>:word32] = r1
	Mem0[r29 + 28<i32>:word32] = r6
	Mem0[r29 + 4<i32>:word32] = r2
	// succ:  l00015B58
l00015B58:
	r2 = Mem0[r29 + 16<i32>:word32]
	branch r6 > r2 l00015D0C
	// succ:  l00015B68 l00015D0C
l00015B68:
	r6 = Mem0[r29 + 68<i32>:word32]
	Mem0[r29 + 88<i32>:word32] = r6
	r1 = Mem0[r29 + 8<i32>:word64]
	r2 = SEQ(SLICE(r7, word16, 0), SLICE(r22, word16, 0))
	r13 = Mem0[r29 + 16<i32>:word32]
	r6 = Mem0[r29 + 68<i32>:word32]
	Mem0[r29 + 84<i32>:word32] = r1
	r9 = Mem0[r29 + 20<i32>:word32]
	r1_r0 = r7_r2
	Mem0[r29 + 10<i32>:byte] = r6
	r6 = r9 * r6
	Mem0[r29 + 56<i32>:word64] = r1_r0
	// succ:  l00015B94
l00015B94:
	r6 = Mem0[r29 + 84<i32>:word64]
	r2 = Mem0[r29 + 52<i32>:word64]
	r2 = Mem0[r29 + 88<i32>:word64]
	r22 = Mem0[r29 + 76<i32>:word64]
	r6 = r6 + r2
	r7 = Mem0[r29 + 68<i32>:word32]
	r13 = Mem0[r29 + 80<i32>:word32]
	r2 = r2 - (r22 << 1<32>)
	Mem0[r29 + 88<i32>:word32] = r2
	Mem0[r29 + 84<i32>:word32] = r6
	p0 = r7 > r13
	branch p0 l00015D0C
	// succ:  l00015BB8 l00015D0C
l00015BB8:
	r2 = r13
	r1_r0 = Mem0[r29 + 56<i32>:word64]
	r7 = Mem0[r29 + 72<i32>:word64]
	r6 = r2 + 2<32>
	Mem0[r29 + 80<i32>:word32] = r6
	r6 = r6 * r22
	r7 = Mem0[r29 + 64<i32>:word32]
	r6 = r6 - r7
	r6 = r12 + r6 * r7
	__l2fetch<word32,word64>(r6, r1_r0)
	r9 = Mem0[r29 + 40<i32>:word32]
	r13 = Mem0[r29 + 88<i32>:word32]
	branch p0 l00015B94
	// succ:  l00015BE8 l00015B94
l00015BE8:
	p0 = r12 > 0<32>
	r7 = Mem0[r29 + 84<i32>:word64]
	r6 = Mem0[r29 + 76<i32>:word64]
	r7 = Mem0[r29 + 32<i32>:word32]
	r2 = r2 + r9
	r0 = max<int32>(r7, r3)
	r6 = r2 * r6
	r2 = Mem0[r29 + 48<i32>:word32]
	r14 = Mem0[r29 + 72<i32>:word32]
	r19 = r2 * r20
	r7 = Mem0[r29 + 36<i32>:word64]
	r2 = r2 + r0
	r6 = r6 - r14
	r9 = max<int32>(r13, r7)
	r0 = Mem0[r29 + 44<i32>:word64]
	r6 = r6 + r7
	r16 = r4 * r2
	r25 = max<int32>(r6, r3)
	r1 = Mem0[r29 + 28<i32>:word64]
	r23 = Mem0[r29 + 24<i32>:word64]
	r9 = 0xFFFFFFFF<32> - r9
	r13 = 0<32>
	r2 = min<int32>(r0, r6)
	p0 = r24 > 0<32>
	r0 = r13 + r19
	branch p0 l00015CF8
	// succ:  l00015C40 l00015CF8
l00015C40:
	r7 = r13 * r17
	r10 = Mem0[r29 + 92<i32>:word32]
	r6 = Mem0[r29 + 96<i32>:word32]
	r21 = r24
	r14 = max<int32>(r23, r3)
	r18 = r16 + r14
	r7 = r7 - r15
	r6 = 0<32>
	r0 = r10 + r0 * r24
	r28 = max<int32>(r1, r6)
	r7 = r7 + r8
	r28 = 0xFFFFFFFF<32> - r28
	r21 = r12 + r21 * r18
	r10 = max<int32>(r7, r3)
	r11 = r28 - r14
	r14 = min<int32>(r4, r7)
	// succ:  l00015C7C
l00015C7C:
	p0 = r2 > r25
	r18 = 0<32>
	r28 = r9 - r25
	branch p0 l00015CE4
	// succ:  l00015C8C l00015CE4
l00015C8C:
	r7 = r21
	r18 = 0<32>
	__loop(1<i32>, 0x00015C94<p32>, r28)
	p0 = r14 > r10
	r22 = r18 & 0xFF<32>
	r26 = r11 + 0xFFFFFFFF<32>
	branch p0 l00015CD8
	// succ:  l00015CA4 l00015CD8
l00015CA4:
	r28 = Mem0[r7:byte]
	p1 = r11 >u 1<32>
	r27 = r7 + r24
	p0 = r28 >u r22
	__loop(0<i32>, 0x00015CBC<p32>, r26)
	branch p1 l00015CD4
	// succ:  l00015CBC l00015CD4
l00015CBC:
	r28 = Mem0[r27:byte]
	r27 = r27 + r24
	r18 = r28 + 0<32>
	r22 = r18 & 0xFF<32>
	p0 = r28 >u r22
	// succ:  l00015CD4
l00015CD4:
	r18 = r28 + 0<32>
	// succ:  l00015CD8
l00015CD8:
	r7 = r7 + r5
	// succ:  l00015CE4
l00015CE4:
	Mem0[r0:byte] = r18
	r0 = r0 + 1<i32>
	r21 = r21 + 1<32>
	r6 = r6 + 1<32>
	p0 = r6 == r24
	branch p0 l00015C7C
	// succ:  l00015CF8 l00015C7C
l00015CF8:
	branch r13 == r20 l00015B94
	// succ:  l00015D0C l00015B94
l00015D0C:
	r13 = r13 + 1<32>
	r1 = r1 - r17
	r23 = r23 + r17
	r1 = Mem0[r29 + 12<i32>:word64]
	r7 = Mem0[r29 + 20<i32>:word64]
	r6 = Mem0[r29 + 48<i32>:word64]
	r2 = Mem0[r29 + 44<i32>:word64]
	r7 = r7 + 1<32>
	Mem0[r29 + 20<i32>:word32] = r7
	r6 = r6 + r2
	p0 = r7 == r1
	Mem0[r29 + 48<i32>:word32] = r6
	branch p0 l00015B58
	// succ:  l00015D28 l00015B58
l00015D28:
	r17_r16 = Mem0[r29 + 144<i32>:word64]
	r2 = Mem0[r29:word64]
	r1 = 1<32>
	goto l00015D30
	// succ:  l00015D30
l00015D2C:
	r17_r16 = Mem0[r29 + 144<i32>:word64]
	r2 = Mem0[r29:word64]
	// succ:  l00015D30
l00015D30:
	r21_r20 = Mem0[r29 + 128<i32>:word64]
	r19_r18 = Mem0[r29 + 136<i32>:word64]
	r0 = r2 + 8<32>
	r25_r24 = Mem0[r29 + 112<i32>:word64]
	r23_r22 = Mem0[r29 + 120<i32>:word64]
	v48 = r30
	r31 = Mem0[v48 + 4<i32>:word32]
	r30 = Mem0[v48:word32]
	r29 = v48 + 8<i32>
	r27_r26 = Mem0[r29 + 104<i32>:word64]
	goto l00009730_in_maxpool_execute_slice_ref
	// succ:  l00009730_in_maxpool_execute_slice_ref
maxpool_execute_slice_ref_exit:


// logmsg_function
// Return size: 0
define logmsg_function
logmsg_function_entry:
	r29 = fp
	// succ:  l00015D4C
l00015D4C:
	v4 = r29 - 8<i32>
	Mem0[v4:word32] = r30
	Mem0[v4 + 4<i32>:word32] = r31
	r30 = v4
	r29 = v4 - 8<i32>
	branch r3 >u r5 l00015D6C
	// succ:  l00015D5C l00015D6C
l00015D5C:
	r5 = Mem0[r2 + 16<i32>:word32]
	r6 = r29 + 0x10<32>
	r5 = r29 + 0x10<32>
	r0 = 0x00015D98<p32>
	Mem0[r29 + 4<i32>:word32] = r6
	call logv (retsize: 0;)
	// succ:  l00015D6C
l00015D6C:
	v13 = r30
	r31 = Mem0[v13 + 4<i32>:word32]
	r30 = Mem0[v13:word32]
	r29 = v13 + 8<i32>
	return
	// succ:  logmsg_function_exit
logmsg_function_exit:


// errlog_function
// Return size: 0
define errlog_function
errlog_function_entry:
	r29 = fp
	// succ:  l00015D70
l00015D70:
	v4 = r29 - 8<i32>
	Mem0[v4:word32] = r30
	Mem0[v4 + 4<i32>:word32] = r31
	r30 = v4
	r29 = v4 - 8<i32>
	r4 = r3
	r0 = 0x00027614<p32>
	Mem0[r29 + 1<i32>:byte] = r6
	r6 = r29 + 0x10<32>
	r5 = r29 + 0x10<32>
	r3 = 0<32>
	v13 = r30
	r31 = Mem0[v13 + 4<i32>:word32]
	r30 = Mem0[v13:word32]
	r29 = v13 + 8<i32>
	return
	// succ:  errlog_function_exit
errlog_function_exit:


// maxpool_execute_slice_asm
// Return size: 0
define maxpool_execute_slice_asm
maxpool_execute_slice_asm_entry:
	r29 = fp
	goto l00015D94
	// succ:  l00015D94
l00009730_in_maxpool_execute_slice_asm:
	r14 = 0x0002B1B0<p32>
	r28 = Mem0[r14:word32]
	call r28 (retsize: 0;)
	return
	// succ:  maxpool_execute_slice_asm_exit
l00015D94:
	v4 = r29 - 8<i32>
	Mem0[v4:word32] = r30
	Mem0[v4 + 4<i32>:word32] = r31
	r30 = v4
	r29 = v4 - 136<i32>
	r3 = Mem0[r1 + 4<i32>:word32]
	r2 = Mem0[r1:word32]
	Mem0[r29 + 96<i32>:word64] = r25_r24
	Mem0[r29 + 120<i32>:word64] = r19_r18
	r19 = Mem0[r2 + 32<i32>:int8]
	r7 = Mem0[r2 + 4<i32>:word32]
	Mem0[r29 + 20<i32>:word32] = r3
	r2 = Mem0[r2 + 8<i32>:word32]
	r4 = Mem0[r7 + 16<i32>:word32]
	r24 = Mem0[r7:word32]
	p0 = r19 == 0<32>
	Mem0[r29 + 128<i32>:word64] = r17_r16
	r3 = Mem0[r7 + 12<i32>:word32]
	r17 = Mem0[r24 + 8<i32>:word32]
	Mem0[r29 + 88<i32>:word64] = r27_r26
	Mem0[r29 + 112<i32>:word64] = r21_r20
	r2 = Mem0[r4 + 4<i32>:word32]
	r16 = Mem0[r2:word32]
	r0 = r17
	r20 = Mem0[r24 + 12<i32>:word32]
	r18 = Mem0[r4 + 8<i32>:word32]
	r27 = Mem0[r3 + 8<i32>:word32]
	r21 = Mem0[r24 + 4<i32>:word32]
	Mem0[r29 + 4<i32>:word32] = r1
	r7 = Mem0[r24:word32]
	r1 = p0
	Mem0[r29 + 72<i32>:word32] = r2
	r2 = Mem0[r3 + 4<i32>:word32]
	Mem0[r29 + 16<i32>:word32] = r7
	Mem0[r29 + 104<i32>:word64] = r23_r22
	Mem0[r29 + 80<i32>:word32] = r1
	Mem0[r29 + 40<i32>:word32] = r2
	r2 = r18 + r17
	branch p0 l00015E18
	// succ:  l00015E04 l00015E18
l00015E04:
	r0 = r2 - r27
	branch p0 l00015E18
	// succ:  l00015E0C l00015E18
l00015E0C:
	p0 = r11 == 2<32>
	r0 = r18
	r22 = 0<32>
	branch p0 l00015E24
	// succ:  l00015E14 l00015E24
l00015E14:
	p0 = r11 == 1<32>
	r0 = r0 + (r17 + 0xFFFFFFFF<32>)
	// succ:  l00015E18
l00015E18:
	r1 = r18
	call fn00009760 (retsize: 0;)
	r22 = r0
	// succ:  l00015E24
l00015E24:
	branch p0 l00015E54
	// succ:  l00015E2C l00015E54
l00015E2C:
	p0 = r11 == 2<32>
	r1 = Mem0[r29 + 72<i32>:word32]
	branch p0 l00015E48
	// succ:  l00015E34 l00015E48
l00015E34:
	p0 = r11 == 1<32>
	r1 = Mem0[r29 + 80<i32>:word64]
	r0 = 0<32>
	branch p0 l00015E64
	// succ:  l00015E40 l00015E64
l00015E40:
	p0 = r1
	r1 = Mem0[r29 + 72<i32>:word32]
	goto l00015E60
	// succ:  l00015E60
l00015E48:
	r0 = r1
	goto l00015E60
	// succ:  l00015E60
l00015E54:
	r3 = Mem0[r29 + 40<i32>:word64]
	r1 = Mem0[r29 + 72<i32>:word64]
	r2 = r1 + r21
	r0 = r2 - r3
	// succ:  l00015E60
l00015E60:
	call fn00009760 (retsize: 0;)
	// succ:  l00015E64
l00015E64:
	branch r2 > 0<32> l0001600C
	// succ:  l00015E78 l0001600C
l00015E78:
	r2 = Mem0[r29 + 16<i32>:word32]
	r3 = r27 - r17
	r4 = r0 + 0xFFFFFFFF<32>
	r1 = Mem0[r29 + 72<i32>:word64]
	r5 = Mem0[r29 + 40<i32>:word64]
	r2 = r22 + 0xFFFFFFFF<32>
	r26 = r20 & 0x7F<32>
	r5 = r5 - r21
	r7 = r20 * r17
	r2 = r3 + r2 * r18
	r3 = Mem0[r16 + 16<i32>:word32]
	r8 = 0<32>
	r5 = r0 * r22
	r4 = r5 + r4 * r1
	Mem0[r29 + 11<i32>:byte] = r1
	r23 = Mem0[r24 + 16<i32>:word32]
	r1 = r6 << 1<32>
	r2 = r2 + (r2 >>u 0x1F<32>)
	Mem0[r29 + 36<i32>:word32] = r21
	r1 = Mem0[r29 + 20<i32>:word64]
	r2 = r2 >> 1<32>
	Mem0[r29 + 3<i32>:byte] = r5
	r2 = 0<32> - r2
	r6 = r3 + r6 * r1
	r5 = r5 * r20
	Mem0[r29 + 56<i32>:word32] = r7
	Mem0[r29 + 68<i32>:word32] = r22
	Mem0[r29 + 8<i32>:word32] = r5
	Mem0[r29 + 60<i32>:word32] = r0
	r3 = r4 >> 1<32>
	Mem0[r29 + 28<i32>:word32] = r6
	Mem0[r29 + 24<i32>:word32] = r8
	Mem0[r29 + 32<i32>:word32] = r2
	Mem0[r29 + 64<i32>:word32] = r3
	// succ:  l00015EE8
l00015EE8:
	r2 = Mem0[r29 + 20<i32>:word32]
	branch r3 > r2 l00015FF0
	// succ:  l00015EF8 l00015FF0
l00015EF8:
	r3 = Mem0[r29 + 60<i32>:word32]
	r5 = Mem0[r29 + 8<i32>:word64]
	r7 = Mem0[r29 + 24<i32>:word64]
	r2 = SEQ(SLICE(r3, word16, 0), SLICE(r2, word16, 0))
	Mem0[r29 + 20<i32>:byte] = r4
	r4 = Mem0[r29 + 28<i32>:word32]
	r1_r0 = r3_r2
	r19 = r5 * r7
	goto l00015F30
	// succ:  l00015F30
l00015F18:
	r7 = Mem0[r29 + 60<i32>:word64]
	r6 = Mem0[r29 + 76<i32>:word64]
	r3 = Mem0[r29 + 80<i32>:word64]
	r2 = Mem0[r29 + 44<i32>:word64]
	p0 = r7 > r6
	r3 = r3 + r2
	Mem0[r29 + 80<i32>:word32] = r3
	branch p0 l00015FF0
	// succ:  l00015F30 l00015FF0
l00015F30:
	r2 = r6
	r7 = Mem0[r29 + 64<i32>:word64]
	r3 = Mem0[r29 + 72<i32>:word64]
	r4 = r2 + 2<32>
	Mem0[r29 + 76<i32>:word32] = r4
	r1_r0 = Mem0[r29 + 48<i32>:word64]
	r3 = r4 * r3
	r4 = Mem0[r29 + 56<i32>:word32]
	r3 = r3 - r7
	r3 = r23 + r3 * r4
	__l2fetch<word32,word64>(r3, r1_r0)
	branch r3 > 0<32> l00015F18
	// succ:  l00015F60 l00015F18
l00015F60:
	r3 = Mem0[r29 + 68<i32>:word32]
	r16 = Mem0[r29 + 68<i32>:word64]
	r4 = Mem0[r29 + 40<i32>:word64]
	r22 = Mem0[r29 + 32<i32>:word32]
	r24 = Mem0[r29 + 80<i32>:word32]
	r3 = 0<32>
	r2 = r2 * r3
	r7 = Mem0[r29 + 36<i32>:word32]
	r2 = r2 - r7
	r2 = r2 + r4
	r3 = max<int32>(r2, r3)
	r21 = r3 * r17
	r2 = min<int32>(r7, r2)
	r25 = r2 - r3
	r1 = r23
	r2 = 0<32>
	p0 = r26 == 0<32>
	r3 = r27 + r22
	r0 = r24 + 0<32>
	r3 = min<int32>(r17, r3)
	r2 = max<int32>(r22, r2)
	r0 = r24 + 0<32>
	r2 = r20 + 0<32>
	r3 = r3 - r2
	r4 = r2 + r21
	r2 = r20 + 0<32>
	r5_r4 = r17_r25
	r7 = r4 * r20
	r5_r4 = r17_r25
	branch p0 l00015FD8
	// succ:  l00015FD0 l00015FD8
l00015FD0:
	r1 = r1 + (r7 + r19)
	call maxpool_aligned_hvx (retsize: 0;)
	goto l00015FDC
	// succ:  l00015FDC
l00015FD8:
	call maxpool_nonaligned_hvx (retsize: 0;)
	// succ:  l00015FDC
l00015FDC:
	branch r16 == 0<32> l00015F18
	// succ:  l00015FF0 l00015F18
l00015FF0:
	r7 = Mem0[r29 + 16<i32>:word64]
	r3 = Mem0[r29 + 24<i32>:word64]
	r4 = Mem0[r29 + 12<i32>:word64]
	r2 = Mem0[r29 + 28<i32>:word64]
	r3 = r3 + 1<32>
	Mem0[r29 + 24<i32>:word32] = r3
	r2 = r2 + r4
	p0 = r3 == r7
	Mem0[r29 + 28<i32>:word32] = r2
	branch p0 l00015EE8
	// succ:  l0001600C l00015EE8
l0001600C:
	r17_r16 = Mem0[r29 + 128<i32>:word64]
	r2 = Mem0[r29 + 4<i32>:word64]
	r1 = 1<32>
	r21_r20 = Mem0[r29 + 112<i32>:word64]
	r19_r18 = Mem0[r29 + 120<i32>:word64]
	r0 = r2 + 8<32>
	r25_r24 = Mem0[r29 + 96<i32>:word64]
	r23_r22 = Mem0[r29 + 104<i32>:word64]
	v38 = r30
	r31 = Mem0[v38 + 4<i32>:word32]
	r30 = Mem0[v38:word32]
	r29 = v38 + 8<i32>
	r27_r26 = Mem0[r29 + 88<i32>:word64]
	goto l00009730_in_maxpool_execute_slice_asm
	// succ:  l00009730_in_maxpool_execute_slice_asm
maxpool_execute_slice_asm_exit:


// min_execute
// Return size: 0
define min_execute
min_execute_entry:
	r29 = fp
	// succ:  l00016040
l00016040:
	r3 = 0x7F800000<32>
	r2 = 0x0002B110<p32>
	r2 = Mem0[r2 - 16<i32>:word32]
	// succ:  l00016050_thunk_nn_reduction_float
l00016050_thunk_nn_reduction_float:
	call nn_reduction_float (retsize: 0;)
	return
	// succ:  min_execute_exit
min_execute_exit:


// minmax_check
// Return size: 0
define minmax_check
minmax_check_entry:
	r29 = fp
	// succ:  l00016060
l00016060:
	v4 = r29 - 8<i32>
	Mem0[v4:word32] = r30
	Mem0[v4 + 4<i32>:word32] = r31
	r30 = v4
	r29 = v4 - 16<i32>
	Mem0[r29 - 16<i32>:word64] = r17_r16
	r4 = 0x0002788A<p32>
	r17 = r0
	r16 = r1
	r1 = 0x75<32>
	Mem0[r29:word32] = r17
	r2 = r16
	r0 = 0x0002786E<p32>
	call logmsg_function (retsize: 0;)
	r1 = 0x76<32>
	r3 = 0x000278A3<p32>
	branch r2 == 0<32> l000160FC
	// succ:  l0001609C l000160FC
l0001609C:
	r2 = Mem0[r17 + 4<i32>:word32]
	r1 = 0x77<32>
	r3 = 0x000160B3<p32>
	branch r4 == 0<32> l000160FC
	// succ:  l000160B0 l000160FC
l000160B0:
	r4 = Mem0[r17 + 8<i32>:word32]
	r1 = 0x78<32>
	r3 = 0x000160C0<p32>
	branch r2 == 0<32> l000160FC
	// succ:  l000160C4 l000160FC
l000160C4:
	r2 = Mem0[r2:word32]
	r1 = 0x79<32>
	r3 = 0x000160CD<p32>
	branch r2 == 0<32> l000160FC
	// succ:  l000160D8 l000160FC
l000160D8:
	r2 = Mem0[r4:word32]
	r1 = 0x7A<32>
	r3 = 0x000160DB<p32>
	branch r2 >u 3<32> l000160FC
	// succ:  l000160EC l000160FC
l000160EC:
	r2 = Mem0[r17 + 16<i32>:word32]
	r1 = 0x7B<32>
	r3 = 0x0001611B<p32>
	branch r2 == 1<32> l00016114
	goto l00016100
	// succ:  l00016100 l00016114
l000160FC:
	r2 = r16
	call errlog_function (retsize: 0;)
	r0 = 0x0002786E<p32>
	goto l0001610C
	// succ:  l0001610C
l00016100:
	r2 = Mem0[r17 + 20<i32>:word32]
	r2 = r16
	call fn00016564 (retsize: 0;)
	r0 = 0x00016132<p32>
	// succ:  l0001610C
l0001610C:
	r17_r16 = Mem0[r29 + 8<i32>:word64]
	r0 = -1<i32>
	v16 = r30
	r31 = Mem0[v16 + 4<i32>:word32]
	r30 = Mem0[v16:word32]
	r29 = v16 + 8<i32>
	return
	// succ:  minmax_check_exit
l00016114:
	r2 = r16
	r1 = 0x7C<32>
	r0 = 0x0002786E<p32>
	Mem0[r29:word32] = r17
	call logmsg_function (retsize: 0;)
	r4 = 0x000278E6<p32>
	r0 = 0<32>
	v17 = r30
	r31 = Mem0[v17 + 4<i32>:word32]
	r30 = Mem0[v17:word32]
	r29 = v17 + 8<i32>
	return
	// succ:  minmax_check_exit
minmax_check_exit:


// max_execute
// Return size: 0
define max_execute
max_execute_entry:
	r29 = fp
	// succ:  l00016140
l00016140:
	r3 = 0xFF800000<32>
	r2 = 0x0002B110<p32>
	r2 = Mem0[r2 - 64<i32>:word32]
	// succ:  l00016150_thunk_nn_reduction_float
l00016150_thunk_nn_reduction_float:
	call nn_reduction_float (retsize: 0;)
	return
	// succ:  max_execute_exit
max_execute_exit:


// minimum_execute
// Return size: 0
define minimum_execute
minimum_execute_entry:
	r29 = fp
	// succ:  l00016160
l00016160:
	r2 = 0x0002B110<p32>
	r2 = Mem0[r2 - 16<i32>:word32]
	// succ:  l00016168_thunk_broadcast_elementwise_execute_f
l00016168_thunk_broadcast_elementwise_execute_f:
	call broadcast_elementwise_execute_f (retsize: 0;)
	return
	// succ:  minimum_execute_exit
minimum_execute_exit:


// maximum_execute
// Return size: 0
define maximum_execute
maximum_execute_entry:
	r29 = fp
	// succ:  l00016174
l00016174:
	r2 = 0x0002B110<p32>
	r2 = Mem0[r2 - 64<i32>:word32]
	// succ:  l0001617C_thunk_broadcast_elementwise_execute_f
l0001617C_thunk_broadcast_elementwise_execute_f:
	call broadcast_elementwise_execute_f (retsize: 0;)
	return
	// succ:  maximum_execute_exit
maximum_execute_exit:


// broadcast_elementwise_execute_f
// Return size: 0
define broadcast_elementwise_execute_f
broadcast_elementwise_execute_f_entry:
	r29 = fp
	// succ:  l00016188
l00016188:
	v4 = r29 - 8<i32>
	Mem0[v4:word32] = r30
	Mem0[v4 + 4<i32>:word32] = r31
	r30 = v4
	r29 = v4 - 168<i32>
	Mem0[r29 - 48<i32>:word64] = r25_r24
	r25_r24 = r1_r0
	Mem0[r29 + 136<i32>:word64] = r23_r22
	r3 = Mem0[r24 + 4<i32>:word32]
	Mem0[r29 + 152<i32>:word64] = r19_r18
	r18 = r2
	r2 = 0<32>
	Mem0[r29 + 144<i32>:word64] = r21_r20
	Mem0[r29 + 160<i32>:word64] = r17_r16
	r23 = Mem0[r3:word32]
	r4 = Mem0[r24 + 8<i32>:word32]
	r19 = Mem0[r3 + 4<i32>:word32]
	Mem0[r29 + 120<i32>:word64] = r27_r26
	r12 = Mem0[r23 + 4<i32>:word32]
	r7 = Mem0[r19:word32]
	r0 = Mem0[r23:word32]
	p0 = r12 == 1<32>
	r21 = Mem0[r23 + 8<i32>:word32]
	r5 = Mem0[r19 + 4<i32>:word32]
	p1 = r0 == 1<32>
	Mem0[r29 + 104<i32>:word32] = r5
	r9 = Mem0[r19 + 8<i32>:word32]
	p2 = r21 == 1<32>
	r6 = p0 ? r5 : r12
	r8 = Mem0[r23 + 12<i32>:word32]
	r5 = p1 ? r7 : r0
	r10 = p1
	Mem0[r29 + 72<i32>:word32] = r7
	r0 = Mem0[r19 + 12<i32>:word32]
	p1 = r8 == 1<32>
	r3 = r5 * r6
	r17 = Mem0[r4:word32]
	r7 = p2 ? r9 : r21
	Mem0[r29 + 60<i32>:word32] = r12
	Mem0[r29 + 100<i32>:word32] = r10
	r10 = p2
	r3 = r3 * r7
	Mem0[r29 + 88<i32>:word32] = r6
	Mem0[r29 + 68<i32>:word32] = r5
	r16 = p1 ? r0 : r8
	Mem0[r29 + 108<i32>:word32] = r10
	Mem0[r29 + 64<i32>:word32] = r9
	r3 = r3 * r16
	Mem0[r29 + 92<i32>:word32] = r0
	Mem0[r29 + 112<i32>:word32] = r7
	Mem0[r29 + 84<i32>:word32] = r2
	r22 = r3 << 2<32>
	branch p0 l00016238
	// succ:  l00016230 l00016238
l00016230:
	r2 = r8 * r21
	Mem0[r29 + 84<i32>:word32] = r2
	// succ:  l00016238
l00016238:
	r2 = r25
	r1 = 0xBC<32>
	r0 = 0x00027789<p32>
	Mem0[r29 + 96<i32>:word32] = r8
	r27 = Mem0[r17 + 16<i32>:word32]
	r4 = 0x000277A8<p32>
	r26 = Mem0[r23 + 16<i32>:word32]
	r20 = Mem0[r19 + 16<i32>:word32]
	Mem0[r29:word32] = r24
	call logmsg_function (retsize: 0;)
	branch r22 >u r2 l00016294
	// succ:  l00016278 l00016294
l00016278:
	r2 = Mem0[r17 + 20<i32>:word32]
	r1 = 0xBC<32>
	r2 = r25
	r0 = 0x0001628D<p32>
	r3 = 0x000277C6<p32>
	// succ:  l00016288
l00016288:
	call errlog_function (retsize: 0;)
	r0 = 0xFFFFFFFF<32>
	goto l00016524
	// succ:  l00016524
l00016294:
	r5 = Mem0[r23:word32]
	r2 = Mem0[r19:word32]
	r7 = Mem0[r23 + 8<i32>:word32]
	r8 = Mem0[r23 + 12<i32>:word32]
	p0 = r5 == r2
	r12 = Mem0[r19 + 12<i32>:word32]
	r6 = Mem0[r23 + 4<i32>:word32]
	r3 = Mem0[r19 + 4<i32>:word32]
	r9 = Mem0[r19 + 8<i32>:word32]
	Mem0[r29 + 76<i32>:word32] = r26
	Mem0[r29 + 56<i32>:word32] = r22
	Mem0[r29 + 80<i32>:word32] = r20
	branch p0 l000162CC
	// succ:  l000162C4 l000162CC
l000162C4:
	branch p0 l000162CC
	// succ:  l000162C8 l000162CC
l000162C8:
	p0 = r5 == 1<32>
	branch p0 l00016308
	// succ:  l000162CC l00016308
l000162CC:
	p0 = r2 == 1<32>
	branch p0 l000162DC
	// succ:  l000162D4 l000162DC
l000162D4:
	p0 = r6 == r3
	branch p0 l000162DC
	// succ:  l000162D8 l000162DC
l000162D8:
	p0 = r6 == 1<32>
	branch p0 l00016308
	// succ:  l000162DC l00016308
l000162DC:
	p0 = r3 == 1<32>
	p0 = r7 == r9
	branch p0 l000162F0
	// succ:  l000162E4 l000162F0
l000162E4:
	branch p0 l000162F0
	// succ:  l000162E8 l000162F0
l000162E8:
	p0 = r7 == 1<32>
	p0 = r9 == 1<32>
	branch p0 l00016308
	// succ:  l000162F0 l00016308
l000162F0:
	p0 = r8 == r12
	branch p0 l0001633C
	// succ:  l000162F8 l0001633C
l000162F8:
	p0 = r8 == 1<32>
	branch p0 l0001633C
	// succ:  l00016300 l0001633C
l00016300:
	p0 = r12 == 1<32>
	branch p0 l0001633C
	// succ:  l00016308 l0001633C
l00016308:
	Mem0[r29 + 28<i32>:word32] = r12
	r1 = 0xBC<32>
	r0 = 0x00027789<p32>
	Mem0[r29 + 12<i32>:word32] = r8
	Mem0[r29 + 24<i32>:word32] = r9
	Mem0[r29 + 8<i32>:word32] = r7
	Mem0[r29 + 20<i32>:word32] = r3
	r3 = 0x000277D4<p32>
	Mem0[r29 + 4<i32>:word32] = r6
	Mem0[r29 + 16<i32>:word32] = r2
	r2 = r25
	Mem0[r29:word32] = r5
	goto l00016288
	// succ:  l00016288
l0001633C:
	Mem0[r29 + 44<i32>:word32] = r16
	r23 = Mem0[r29 + 112<i32>:word64]
	r0 = 0x00027789<p32>
	r19 = Mem0[r29 + 68<i32>:word32]
	r1 = 0xBC<32>
	r4 = 0x00027804<p32>
	Mem0[r29 + 40<i32>:word32] = r23
	r20 = Mem0[r29 + 88<i32>:word64]
	Mem0[r29 + 32<i32>:word32] = r19
	Mem0[r29 + 36<i32>:word32] = r20
	Mem0[r29 + 28<i32>:word32] = r12
	Mem0[r29 + 52<i32>:word32] = r24
	Mem0[r29 + 24<i32>:word32] = r9
	Mem0[r29 + 48<i32>:word32] = r25
	Mem0[r29 + 8<i32>:word32] = r7
	Mem0[r29 + 20<i32>:word32] = r3
	Mem0[r29 + 4<i32>:word32] = r6
	Mem0[r29 + 16<i32>:word32] = r2
	r2 = r25
	Mem0[r29:word32] = r5
	Mem0[r29 + 12<i32>:word32] = r8
	call logmsg_function (retsize: 0;)
	r4 = Mem0[r29 + 80<i32>:word32]
	p0 = r19 > 0<32>
	r2 = Mem0[r29 + 56<i32>:word64]
	r5 = Mem0[r29 + 76<i32>:word64]
	Mem0[r17:word32] = r19
	Mem0[r17 + 24<i32>:word32] = r2
	Mem0[r17 + 8<i32>:word32] = r23
	Mem0[r17 + 4<i32>:word32] = r20
	Mem0[r17 + 12<i32>:word32] = r16
	branch p0 l000164FC
	// succ:  l000163A4 l000164FC
l000163A4:
	r9 = Mem0[r29 + 64<i32>:word32]
	r2 = Mem0[r29 + 60<i32>:word32]
	r1 = 0<32>
	r0 = Mem0[r29 + 108<i32>:word64]
	r6 = Mem0[r29 + 104<i32>:word64]
	p0 = r9 == 1<32>
	r2 = r21 * r2
	r8 = Mem0[r29 + 92<i32>:word32]
	r7 = Mem0[r29 + 72<i32>:word32]
	r3 = r9 * r6
	r0 = Mem0[r29 + 100<i32>:word32]
	r13 = p0 ? 0<32> : r8
	p2 = r0
	r9 = r8 * r9
	Mem0[r29 + 64<i32>:word32] = r1
	r7 = Mem0[r29 + 96<i32>:word64]
	p1 = r7 == 1<32>
	r3 = r3 * r8
	r25 = !(r7 == 1<32>)
	r6 = 0<32>
	p2 = r6 == 1<32>
	r12 = p2 ? 0<32> : r7
	r9 = r6 + 0<32>
	r26 = !(r8 == 1<32>)
	p0 = r0
	r2 = r2 * r7
	Mem0[r29 + 72<i32>:word32] = r9
	Mem0[r29 + 108<i32>:word32] = r12
	r2 = r6 + 0<32>
	r3 = r6 + 0<32>
	Mem0[r29 + 60<i32>:word32] = r2
	Mem0[r29 + 104<i32>:word32] = r13
	Mem0[r29 + 56<i32>:word32] = r3
	// succ:  l00016420
l00016420:
	Mem0[r29 + 76<i32>:word32] = r5
	r2 = Mem0[r29 + 88<i32>:word64]
	r7_r6 = SEQ(0<32>, r5)
	r3 = r4
	Mem0[r29 + 80<i32>:word32] = r4
	p0 = r2 > 0<32>
	branch p0 l000164DC
	// succ:  l00016438 l000164DC
l00016438:
	branch r2 > 0<32> l0001644C
	// succ:  l00016444 l0001644C
l00016444:
	r2 = Mem0[r29 + 112<i32>:word32]
	Mem0[r29 + 100<i32>:word32] = r3
	goto l000164BC
	// succ:  l000164BC
l0001644C:
	r21 = r6
	r23 = 0<32>
	r19 = r3
	Mem0[r29 + 96<i32>:word32] = r6
	Mem0[r29 + 92<i32>:word32] = r7
	Mem0[r29 + 100<i32>:word32] = r3
	// succ:  l0001645C
l0001645C:
	r22 = r16
	r17 = r19
	r24 = r27
	r20 = r21
	branch p0 l000164A4
	// succ:  l0001646C l000164A4
l0001646C:
	p0 = r8 > 0<32>
	// succ:  l00016480
l00016480:
	r1 = Mem0[r17:word32]
	r0 = Mem0[r20:word32]
	call r18 (retsize: 0;)
	r22 = r22 + 0xFFFFFFFF<32>
	Mem0[r24:word32] = r0
	r24 = r24 + 4<32>
	r17 = r17 + (r26 << 2<32>)
	r20 = r20 + (r25 << 2<32>)
	branch p0 l00016480
	// succ:  l000164A0 l00016480
l000164A0:
	p0 = r14 == 0<32>
	r27 = r27 + (r16 << 2<32>)
	// succ:  l000164A4
l000164A4:
	r7 = Mem0[r29 + 104<i32>:word64]
	r2 = Mem0[r29 + 108<i32>:word64]
	r23 = r23 + 1<32>
	r21 = r21 + (r2 << 2<32>)
	branch r2 == r23 l0001645C
	goto l000164C0
	// succ:  l000164C0 l0001645C
l000164BC:
	r6 = Mem0[r29 + 96<i32>:word64]
	r2 = Mem0[r29 + 84<i32>:word64]
	r3 = Mem0[r29 + 100<i32>:word64]
	r5 = Mem0[r29 + 72<i32>:word64]
	r2 = Mem0[r29 + 88<i32>:word64]
	r7 = Mem0[r29 + 92<i32>:word64]
	r6 = r6 + (r2 << 2<32>)
	r5 = Mem0[r29 + 76<i32>:word64]
	r4 = Mem0[r29 + 80<i32>:word64]
	r3 = r3 + (r5 << 2<32>)
	branch r7 == r2 l00016438
	goto l000164E0
	// succ:  l000164E0 l00016438
l000164C0:
	r2 = Mem0[r29 + 112<i32>:word32]
	r19 = r19 + (r7 << 2<32>)
	r3 = Mem0[r29 + 100<i32>:word64]
	r5 = Mem0[r29 + 72<i32>:word64]
	r2 = Mem0[r29 + 88<i32>:word64]
	r7 = Mem0[r29 + 92<i32>:word64]
	r6 = r6 + (r2 << 2<32>)
	r5 = Mem0[r29 + 76<i32>:word64]
	r4 = Mem0[r29 + 80<i32>:word64]
	r3 = r3 + (r5 << 2<32>)
	branch r7 == r2 l00016438
	goto l000164E0
	// succ:  l000164E0 l00016438
l000164DC:
	r7 = Mem0[r29 + 56<i32>:word64]
	r2 = Mem0[r29 + 60<i32>:word64]
	// succ:  l000164E0
l000164E0:
	r7 = r7 + 1<32>
	r3 = Mem0[r29 + 64<i32>:word32]
	r2 = Mem0[r29 + 68<i32>:word64]
	r3 = r3
	r4 = r4 + (r7 << 2<32>)
	r5 = r5 + (r2 << 2<32>)
	Mem0[r29 + 64<i32>:word32] = r3
	p0 = r3 == r2
	branch p0 l00016420
	// succ:  l000164FC l00016420
l000164FC:
	Mem0[r29:byte] = r2
	r2 = Mem0[r29 + 52<i32>:word32]
	r0 = 0x00027789<p32>
	r2 = Mem0[r29 + 48<i32>:word32]
	r1 = 0xBC<32>
	r4 = 0x00016538<p32>
	call logmsg_function (retsize: 0;)
	r0 = 0<32>
	// succ:  l00016524
l00016524:
	r19_r18 = Mem0[r29 + 152<i32>:word64]
	r17_r16 = Mem0[r29 + 160<i32>:word64]
	r23_r22 = Mem0[r29 + 136<i32>:word64]
	r21_r20 = Mem0[r29 + 144<i32>:word64]
	r27_r26 = Mem0[r29 + 120<i32>:word64]
	r25_r24 = Mem0[r29 + 128<i32>:word64]
	v42 = r30
	r31 = Mem0[v42 + 4<i32>:word32]
	r30 = Mem0[v42:word32]
	r29 = v42 + 8<i32>
	return
	// succ:  broadcast_elementwise_execute_f_exit
broadcast_elementwise_execute_f_exit:


// logmsg_function
// Return size: 0
define logmsg_function
logmsg_function_entry:
	r29 = fp
	// succ:  l00016538
l00016538:
	v4 = r29 - 8<i32>
	Mem0[v4:word32] = r30
	Mem0[v4 + 4<i32>:word32] = r31
	r30 = v4
	r29 = v4 - 8<i32>
	r3 = 2<32>
	branch r3 >u r5 l00016558
	// succ:  l00016548 l00016558
l00016548:
	r5 = Mem0[r2 + 16<i32>:word32]
	Mem0[r29 + 1<i32>:byte] = r6
	r6 = r29 + 0x10<32>
	r5 = r29 + 0x10<32>
	// succ:  l00016558
l00016558:
	v11 = r30
	r31 = Mem0[v11 + 4<i32>:word32]
	r30 = Mem0[v11:word32]
	r29 = v11 + 8<i32>
	return
	// succ:  logmsg_function_exit
logmsg_function_exit:


// errlog_function
// Return size: 0
define errlog_function
errlog_function_entry:
	r29 = fp
	// succ:  l00016560
l00016560:
	v4 = r29 - 8<i32>
	Mem0[v4:word32] = r30
	Mem0[v4 + 4<i32>:word32] = r31
	r30 = v4
	r29 = v4 - 8<i32>
	r4 = r3
	r3 = 0<32>
	Mem0[r29 + 1<i32>:byte] = r6
	r6 = r29 + 0x10<32>
	r5 = r29 + 0x10<32>
	call logv (retsize: 0;)
	// succ:  l00016568_thunk_nn_reduction_float
l00016568_thunk_nn_reduction_float:
	call nn_reduction_float (retsize: 0;)
	return
	// succ:  errlog_function_exit
errlog_function_exit:


// fn00016564
// Return size: 0
define fn00016564
fn00016564_entry:
	r29 = fp
	// succ:  l00016564
l00016564:
	v4 = r29 - 8<i32>
	Mem0[v4:word32] = r30
	Mem0[v4 + 4<i32>:word32] = r31
	r30 = v4
	r29 = v4 - 8<i32>
	r4 = r3
	Mem0[r29 + 1<i32>:byte] = r6
	r6 = r29 + 0x10<32>
	r5 = r29 + 0x10<32>
	call logv (retsize: 0;)
	// succ:  l00016568_thunk_nn_reduction_float
l00016568_thunk_nn_reduction_float:
	call nn_reduction_float (retsize: 0;)
	return
	// succ:  fn00016564_exit
fn00016564_exit:


// nn_reduction_float
// Return size: 0
define nn_reduction_float
nn_reduction_float_entry:
	r29 = fp
	// succ:  l0001657C
l0001657C:
	v4 = r29 - 8<i32>
	Mem0[v4:word32] = r30
	Mem0[v4 + 4<i32>:word32] = r31
	r30 = v4
	r29 = v4 - 112<i32>
	r5 = 1<32>
	r6 = Mem0[r0 + 4<i32>:word32]
	r4 = Mem0[r0 + 8<i32>:word32]
	Mem0[r29 + 104<i32>:word64] = r17_r16
	r7 = Mem0[r0 + 16<i32>:word32]
	r2 = r1
	r16 = r2
	r4 = Mem0[r4:word32]
	r8 = Mem0[r6:word32]
	Mem0[r29 + 24<i32>:word32] = r3
	Mem0[r29 + 88<i32>:word64] = r21_r20
	r13 = 1<32>
	p0 = r7 == 3<32>
	r28 = Mem0[r8 + 4<i32>:word32]
	r15 = Mem0[r8 + 8<i32>:word32]
	r14 = 0<32>
	r20 = Mem0[r8 + 12<i32>:word32]
	r3 = Mem0[r8:word32]
	r11_r10 = r15_r28
	r1 = Mem0[r4 + 16<i32>:word32]
	r21 = Mem0[r8 + 16<i32>:word32]
	Mem0[r29 + 80<i32>:word64] = r23_r22
	Mem0[r29 + 96<i32>:word64] = r19_r18
	r18 = 1<32>
	Mem0[r29 + 64<i32>:word64] = r27_r26
	Mem0[r29 + 72<i32>:word64] = r25_r24
	r18 = r20 + 0<32>
	r9 = Mem0[r6 + 8<i32>:word32]
	branch p0 l000165EC
	// succ:  l000165E0 l000165EC
l000165E0:
	r7_r6 = 0x100000001<64>
	r17 = 1<32>
	r11_r10 = 0x100000001<64>
	goto l00016728
	// succ:  l00016728
l000165EC:
	r7 = Mem0[r6 + 4<i32>:word32]
	r17 = r3
	r6 = Mem0[r7 + 16<i32>:word32]
	r8 = Mem0[r7 + 12<i32>:word32]
	r7 = Mem0[r9 + 16<i32>:word32]
	p0 = r8 == 0<32>
	r7 = Mem0[r7:word32]
	r11_r10 = r15_r28
	r9 = r6 + 0<32>
	branch p0 l00016668
	// succ:  l00016610 l00016668
l00016610:
	r18 = r20
	r17 = r3
	__loop(0<i32>, 0x00016618<p32>, r8)
	r9 = r9 + 4<i32>
	r12 = Mem0[r9:word32]
	branch r12 > 3<32> l00016630
	// succ:  l00016628 l00016630
l00016628:
	r12 = r7 + (0x7F<32> - r12)
	r17 = 1<32>
	r11_r10 = 0x100000001<64>
	// succ:  l00016630
l00016630:
	r18 = 1<32>
	p0 = r12 == 0<32>
	branch p0 l0001665C
	// succ:  l0001663C l0001665C
l0001663C:
	r11 = 1<32>
	p0 = r12 == 1<32>
	branch p0 l0001665C
	// succ:  l00016648 l0001665C
l00016648:
	r10 = 1<32>
	p0 = r12 == 2<32>
	branch p0 l0001665C
	// succ:  l00016654 l0001665C
l00016654:
	r17 = 1<32>
	p0 = r12 == 3<32>
	// succ:  l0001665C
l0001665C:
	r14 = r8
	// succ:  l00016668
l00016668:
	branch r8 == 2<32> l00016680
	// succ:  l00016678 l00016680
l00016678:
	r8 = Mem0[r0 + 32<i32>:int8]
	r13_r12 = r10_r17
	r13 = r10
	r7_r6 = r11_r18
	// succ:  l00016680
l00016680:
	r13_r12 = r10_r17
	p0 = r14 == 0<32>
	r9_r8 = r11_r18
	branch p0 l000166E8
	// succ:  l00016690 l000166E8
l00016690:
	r9_r8 = r11_r18
	__loop(0<i32>, 0x00016698<p32>, r14)
	r6 = r6 + 4<i32>
	r14 = Mem0[r6:word32]
	branch r14 > 3<32> l000166B4
	// succ:  l000166A8 l000166B4
l000166A8:
	r14 = r7 + (0x7F<32> - r14)
	r12 = 0<32>
	r13 = 0<32>
	r9_r8 = 0<64>
	// succ:  l000166B4
l000166B4:
	r8 = 0<32>
	p0 = r14 == 0<32>
	branch p0 l000166E0
	// succ:  l000166C0 l000166E0
l000166C0:
	r9 = 0<32>
	p0 = r14 == 1<32>
	branch p0 l000166E0
	// succ:  l000166CC l000166E0
l000166CC:
	r13 = 0<32>
	p0 = r14 == 2<32>
	branch p0 l000166E0
	// succ:  l000166D8 l000166E0
l000166D8:
	r12 = 0<32>
	p0 = r14 == 3<32>
	// succ:  l000166E0
l000166E0:
	// succ:  l000166E8
l000166E8:
	p3 = r8 == 0<32>
	p0 = r9 == 0<32>
	p2 = r13 == 0<32>
	p1 = r12 == 0<32>
	r6 = p1 ? 1<32> : r12
	p1 = p1 | p2
	r7 = p1 ? 1<32> : r12
	r13 = 1<32>
	r6 = r13 + 0<32>
	p2 = p1 | p0
	r6 = r9 + 0<32>
	r13 = r12 + 0<32>
	r7 = r6 + 0<32>
	r7_r6 = r6_r8
	r13 = r7 + 0<32>
	r5 = r13 + 0<32>
	// succ:  l00016728
l00016728:
	Mem0[r29 + 4<i32>:word32] = r17
	r9 = Mem0[r4 + 20<i32>:word32]
	r8 = r18 * r11
	Mem0[r29 + 8<i32>:word32] = r10
	Mem0[r29 + 12<i32>:word32] = r11
	r8 = r8 * r10
	r8 = r8 * r17
	branch r8 >u r9 l0001676C
	// succ:  l00016750 l0001676C
l00016750:
	r8 = r8 << 2<32>
	r1 = 0xC6<32>
	r0 = 0x00016753<p32>
	call errlog_function (retsize: 0;)
	r3 = 0x000277C6<p32>
	r0 = 0xFFFFFFFF<32>
	goto l000168E0
	// succ:  l000168E0
l0001676C:
	Mem0[r4 + 24<i32>:word32] = r8
	Mem0[r4 + 12<i32>:word32] = r6
	p0 = r17 > 0<32>
	r0 = 0<32>
	Mem0[r4:word32] = r5
	Mem0[r4 + 8<i32>:word32] = r7
	r5 = 0<32>
	Mem0[r4 + 4<i32>:word32] = r13
	Mem0[r29 + 32<i32>:word32] = r28
	Mem0[r29 + 48<i32>:word32] = r15
	branch p0 l000168E0
	// succ:  l00016794 l000168E0
l00016794:
	p0 = r17 == 1<32>
	r4 = r18
	p2 = r10 == 1<32>
	p3 = r11 == 1<32>
	Mem0[r29 + 36<i32>:word32] = r5
	r23 = p3 ? r15 : 1<32>
	r2 = p0 ? r3 : 1<32>
	p1 = r4 == 1<32>
	Mem0[r29 + 40<i32>:word32] = r2
	Mem0[r29 + 20<i32>:word32] = r4
	r24 = p1 ? r20 : 1<32>
	r3 = p2 ? r28 : 1<32>
	Mem0[r29 + 60<i32>:word32] = r3
	// succ:  l000167C0
l000167C0:
	p0 = r10 > 0<32>
	r2 = 0<32>
	Mem0[r29 + 52<i32>:word32] = r2
	branch p0 l000168D0
	// succ:  l000167D0 l000168D0
l000167D0:
	p0 = r11 > 0<32>
	r17 = 0<32>
	branch p0 l000168B8
	// succ:  l000167DC l000168B8
l000167DC:
	Mem0[r29 + 16<i32>:word32] = r1
	r2 = r1
	p0 = r4 > 0<32>
	r19 = 0<32>
	r1 = Mem0[r29 + 16<i32>:word32]
	branch p0 l000168AC
	// succ:  l000167F0 l000168AC
l000167F0:
	Mem0[r29 + 28<i32>:word32] = r2
	r2 = Mem0[r29 + 40<i32>:word64]
	r0 = Mem0[r29 + 24<i32>:word32]
	p0 = r2 > 0<32>
	branch p0 l00016890
	// succ:  l00016800 l00016890
l00016800:
	r0 = Mem0[r29 + 24<i32>:word64]
	r3 = 0<32>
	// succ:  l00016804
l00016804:
	branch r2 > 0<32> l00016818
	// succ:  l00016814 l00016818
l00016814:
	r2 = Mem0[r29 + 60<i32>:word32]
	r27 = 0<32>
	Mem0[r29 + 44<i32>:word32] = r3
	// succ:  l00016818
l00016818:
	Mem0[r29 + 44<i32>:word32] = r3
	r2 = Mem0[r29 + 36<i32>:word64]
	r2 = r3 + r2
	r3 = Mem0[r29 + 32<i32>:word32]
	Mem0[r29 + 14<i32>:byte] = r2
	r2 = r2 * r3
	// succ:  l0001682C
l0001682C:
	r7 = Mem0[r29 + 48<i32>:word32]
	r3 = Mem0[r29 + 52<i32>:word64]
	r2 = Mem0[r29 + 56<i32>:word64]
	r22 = 0<32>
	r2 = r2 + (r27 + r3)
	r26 = r2 * r7
	// succ:  l00016844
l00016844:
	p0 = r24 > 0<32>
	r3_r2 = r19_r26
	r25 = r24
	branch p0 l00016870
l00016848:
	p0 = r24 > 0<32>
	r3_r2 = r19_r26
	r25 = r24
	// succ:  l00016854 l00016870
l00016854:
	r2 = r2 + (r22 + r17)
	r3 = r3 + r2 * r20
	r18 = r21 + (r3 << 2<32>)
	// succ:  l00016860
l00016860:
	r1 = Mem0[r18:word32]
	r18 = r18 + 4<32>
	call r16 (retsize: 0;)
	branch r25 == 0<32> l00016860
	goto l00016874
	// succ:  l00016874 l00016860
l00016870:
	branch r22 == r23 l00016844
	goto l0001687C
	// succ:  l0001687C l00016844
l00016874:
	r25 = r25 + 0xFFFFFFFF<32>
	branch r22 == r23 l00016848
	// succ:  l0001687C l00016848
l0001687C:
	branch r27 == r2 l0001682C
	// succ:  l00016888 l0001682C
l00016888:
	r27 = r27 + 1<32>
	branch r3 == r2 l00016804
	goto l00016894
	// succ:  l00016894 l00016804
l00016890:
	r4 = Mem0[r29 + 20<i32>:word64]
	r2 = Mem0[r29 + 28<i32>:word64]
	r19 = r19 + 1<32>
	goto l00016898
	// succ:  l00016898
l00016894:
	r3 = r3 + 1<32>
	r4 = Mem0[r29 + 20<i32>:word64]
	r2 = Mem0[r29 + 28<i32>:word64]
	// succ:  l00016898
l00016898:
	Mem0[r2:word32] = r0
	r2 = r2 + 4<32>
	p0 = r19 == r4
	r1 = Mem0[r29 + 16<i32>:word32]
	branch p0 l000167F0
	// succ:  l000168A8 l000167F0
l000168A8:
	r1 = r1 + (r4 << 2<32>)
	// succ:  l000168AC
l000168AC:
	r11 = Mem0[r29 + 12<i32>:word32]
	branch r17 == r11 l000167DC
	goto l000168BC
	// succ:  l000168BC l000167DC
l000168B8:
	r10 = Mem0[r29 + 8<i32>:word32]
	r2 = Mem0[r29 + 52<i32>:word32]
	goto l000168C0
	// succ:  l000168C0
l000168BC:
	r17 = r17 + 1<32>
	r10 = Mem0[r29 + 8<i32>:word32]
	// succ:  l000168C0
l000168C0:
	r2 = r2 + 1<32>
	Mem0[r29 + 52<i32>:word32] = r2
	p0 = r2 == r10
	branch p0 l000167D0
	// succ:  l000168D0 l000167D0
l000168D0:
	r2 = Mem0[r29 + 4<i32>:word64]
	r3 = Mem0[r29 + 36<i32>:word64]
	r3 = r3 + 1<32>
	Mem0[r29 + 36<i32>:word32] = r3
	r0 = -1<i32>
	branch p0 l000167C0
	// succ:  l000168E0 l000167C0
l000168E0:
	r19_r18 = Mem0[r29 + 96<i32>:word64]
	r17_r16 = Mem0[r29 + 104<i32>:word64]
	r23_r22 = Mem0[r29 + 80<i32>:word64]
	r21_r20 = Mem0[r29 + 88<i32>:word64]
	r27_r26 = Mem0[r29 + 64<i32>:word64]
	r25_r24 = Mem0[r29 + 72<i32>:word64]
	v40 = r30
	r31 = Mem0[v40 + 4<i32>:word32]
	r30 = Mem0[v40:word32]
	r29 = v40 + 8<i32>
	return
	// succ:  nn_reduction_float_exit
nn_reduction_float_exit:


// qsoftmax_execute_ref
// Return size: 0
define qsoftmax_execute_ref
qsoftmax_execute_ref_entry:
	r29 = fp
	// succ:  l00016900
l00016900:
	v4 = r29 - 8<i32>
	Mem0[v4:word32] = r30
	Mem0[v4 + 4<i32>:word32] = r31
	r30 = v4
	r29 = v4 - 104<i32>
	Mem0[r29 - 48<i32>:word64] = r25_r24
	r6 = 0x437F0000<32>
	r24 = r0
	Mem0[r29 + 88<i32>:word64] = r19_r18
	r2 = Mem0[r24 + 4<i32>:word32]
	r25 = r1
	r3 = Mem0[r24 + 8<i32>:word32]
	Mem0[r29 + 72<i32>:word64] = r23_r22
	Mem0[r29 + 96<i32>:word64] = r17_r16
	r4 = Mem0[r2 + 4<i32>:word32]
	r18 = Mem0[r2:word32]
	r5 = Mem0[r3 + 8<i32>:word32]
	r2 = Mem0[r2 + 8<i32>:word32]
	r4 = Mem0[r4 + 16<i32>:word32]
	r7 = Mem0[r18:word32]
	r17 = Mem0[r18 + 12<i32>:word32]
	r2 = Mem0[r2 + 16<i32>:word32]
	r19 = Mem0[r3:word32]
	r1 = Mem0[r3 + 4<i32>:word32]
	r3 = r7 * r17
	r16 = Mem0[r4:word32]
	r23 = Mem0[r18 + 4<i32>:word32]
	Mem0[r29 + 80<i32>:word64] = r21_r20
	r2 = Mem0[r2:word32]
	r20 = Mem0[r18 + 8<i32>:word32]
	Mem0[r29 + 28<i32>:word32] = r1
	r1 = r6
	r0 = r2 - r16
	r2 = r3 * r23
	Mem0[r29 + 36<i32>:word32] = r24
	Mem0[r29 + 56<i32>:word64] = r27_r26
	Mem0[r29 + 48<i32>:word32] = r7
	Mem0[r29 + 32<i32>:word32] = r5
	r26 = Mem0[r18 + 16<i32>:word32]
	r27 = Mem0[r19 + 16<i32>:word32]
	call fn00009610 (retsize: 0;)
	r22 = r2 * r20
	r2 = r25
	r1 = 0x4A<32>
	r4 = 0x0002796D<p32>
	Mem0[r29:word32] = r24
	r21 = r0
	call logmsg_function (retsize: 0;)
	r5 = r19
	branch r22 >u r2 l000169BC
	// succ:  l000169A4 l000169BC
l000169A4:
	r2 = Mem0[r5 + 20<i32>:word32]
	r2 = r25
	r1 = 0x4B<32>
	r3 = 0x000169CC<p32>
	call errlog_function (retsize: 0;)
	r0 = 0xFFFFFFFF<32>
	goto l00016C10
	// succ:  l00016C10
l000169BC:
	r2 = Mem0[r29 + 48<i32>:word64]
	r3 = Mem0[r18:word32]
	Mem0[r5 + 1<i32>:byte] = r4
	r4 = Mem0[r18 + 4<i32>:word32]
	r2 = r23 * r2
	Mem0[r5:word32] = r3
	r6 = Mem0[r18 + 8<i32>:word32]
	p0 = r2 > 0<32>
	Mem0[r29 + 24<i32>:word32] = r25
	Mem0[r5 + 8<i32>:word32] = r6
	r20 = 0x7F800000<32>
	r7 = Mem0[r18 + 12<i32>:word32]
	r18 = 0xFF800000<32>
	Mem0[r5 + 24<i32>:word32] = r22
	Mem0[r5 + 12<i32>:word32] = r7
	r22 = 0<32>
	Mem0[r29 + 16<i32>:word32] = r5
	Mem0[r29 + 40<i32>:word32] = r2
	branch p0 l00016A20
	// succ:  l00016A0C l00016A20
l00016A0C:
	r18 = 0xFF800000<32>
	r20 = 0x7F800000<32>
	goto l00016BC8
	// succ:  l00016BC8
l00016A20:
	Mem0[r29 + 5<i32>:byte] = r0
	r0 = p0
	// succ:  l00016A28
l00016A28:
	Mem0[r29 + 44<i32>:word32] = r22
	Mem0[r29 + 12<i32>:byte] = r0
	branch p0 l00016A58
	// succ:  l00016A40 l00016A58
l00016A40:
	r0 = p0
	r0 = Mem0[r29 + 48<i32>:word32]
	Mem0[r29 + 44<i32>:word32] = r22
	r19 = 1<32>
	branch p0 l00016A9C
	// succ:  l00016A54 l00016A9C
l00016A54:
	p0 = r0
	goto l00016B50
	// succ:  l00016B50
l00016A58:
	r25 = Mem0[r26:byte]
	r19 = 1<32>
	r23 = r16
	r2 = r25
	r3 = CONVERT(r25, int32, real32)
	r23 = r23 + r21 * r3
	// succ:  l00016A70
l00016A70:
	r1_r0 = r23_r16
	r2 = r2 & 0xFF<32>
	r2 = CONVERT(r2, int32, real32)
	call fn00009600 (retsize: 0;)
	r0 = r0 + r21 * r2
	r23 = r0
	r2 = r26 + r19
	branch p0 l00016A40
	// succ:  l00016A90 l00016A40
l00016A90:
	p0 = r9 == r11
	r19 = r19 + 1<32>
	r2 = Mem0[r2:byte]
	goto l00016A70
	// succ:  l00016A70
l00016A9C:
	r24 = 0<32>
	// succ:  l00016AA4
l00016AA4:
	r3 = r16
	r2 = r25 & 0xFF<32>
	r2 = CONVERT(r2, int32, real32)
	r3 = r3 + r21 * r2
	call fn00009780 (retsize: 0;)
	r0 = r3 - r23
	r2 = r26 + r19
	branch p0 l00016AD4
	// succ:  l00016AC8 l00016AD4
l00016AC8:
	p0 = r9 == r11
	r24 = r24 + r0
	r25 = Mem0[r2:byte]
	r19 = r19 + 1<32>
	goto l00016AA4
	// succ:  l00016AA4
l00016AD4:
	Mem0[r29 + 44<i32>:word32] = r22
	r0 = 0x3F800000<32>
	r1 = r24
	call fn00009610 (retsize: 0;)
	r0 = Mem0[r29 + 48<i32>:word64]
	r19 = 0<32>
	r24 = r0
	branch p0 l00016B50
	// succ:  l00016AF4 l00016B50
l00016AF4:
	p0 = r0
	r22 = 0x437F0000<32>
	// succ:  l00016AFC
l00016AFC:
	r2 = Mem0[r13 + r19:byte]
	r3 = r16
	r2 = CONVERT(r2, int32, real32)
	r3 = r3 + r21 * r2
	call fn00009780 (retsize: 0;)
	r0 = r3 - r23
	r25 = r24 * r0
	r1_r0 = r25_r18
	call fn00009600 (retsize: 0;)
	r1_r0 = r25_r20
	r18 = r0
	call fn000097B0 (retsize: 0;)
	r19 = r19
	r20 = r0
	r3 = r27 + r19
	r2 = r25 * r22
	p0 = r17 == r19
	r4 = CONVERT(r2, real32, uint32)
	p1 = r2 > r22
	r4 = 0xFFFFFFFF<32>
	Mem0[r3:byte] = r4
	branch p0 l00016AFC
	// succ:  l00016B50 l00016AFC
l00016B50:
	r2 = Mem0[r29 + 40<i32>:word64]
	r22 = Mem0[r29 + 44<i32>:word64]
	r27 = r27 + r17
	r26 = r26 + r17
	branch r22 == r2 l00016A28
	// succ:  l00016B68 l00016A28
l00016B68:
	r22 = r22 + 1<32>
	branch p0 l00016BC8
	// succ:  l00016B70 l00016BC8
l00016B70:
	p0 = r0
	r2 = Mem0[r29 + 16<i32>:word64]
	r0 = 0x3F800000<32>
	r1 = r18
	r16 = Mem0[r2 + 16<i32>:word32]
	call fn00009610 (retsize: 0;)
	r3 = Mem0[r29 + 40<i32>:word64]
	r2 = 0x3F000000<32>
	r3 = Mem0[r29 + 48<i32>:word32]
	__loop(1<i32>, 0x00016B98<p32>, r3)
	p0 = r3
	r3 = r16 + 0<32>
	branch p0 l00016BBC
	// succ:  l00016BA0 l00016BBC
l00016BA0:
	__loop(0<i32>, 0x00016BA4<p32>, r17)
	r4 = Mem0[r3:byte]
	r5 = r20
	r4 = CONVERT(r4, int32, real32)
	r5 = r5 + r0 * r4
	r7 = r5 + r2
	Mem0[r3:byte] = r6
	r3 = r3 + 1<i32>
	r6 = CONVERT(r7, real32, uint32)
	goto l00016BC0
	// succ:  l00016BC0
l00016BBC:
	r16 = r16 + r17
	goto l00016BC8
	// succ:  l00016BC8
l00016BC0:
	// succ:  l00016BC8
l00016BC8:
	r6 = Mem0[r29 + 32<i32>:word64]
	r7 = Mem0[r29 + 28<i32>:word64]
	r4 = 0x00027996<p32>
	r5 = Mem0[r29 + 36<i32>:word64]
	r2 = Mem0[r29 + 24<i32>:word64]
	r1 = 0x85<32>
	Mem0[r7 + 12<i32>:word32] = 1<32>
	r0 = Mem0[r7 + 16<i32>:word32]
	Mem0[r7:word32] = 1<32>
	Mem0[r7 + 8<i32>:word32] = 1<32>
	Mem0[r0:word32] = r20
	Mem0[r7 + 4<i32>:word32] = 0xFFFFFF81<32>
	Mem0[r6 + 8<i32>:word32] = 1<32>
	Mem0[r7 + 24<i32>:word32] = 4<32>
	Mem0[r6:word32] = 1<32>
	r3 = Mem0[r6 + 16<i32>:word32]
	Mem0[r6 + 12<i32>:word32] = 1<32>
	Mem0[r6 + 4<i32>:word32] = 1<32>
	Mem0[r6 + 24<i32>:word32] = 4<32>
	Mem0[r3:word32] = r18
	Mem0[r29:word32] = r5
	call logmsg_function (retsize: 0;)
	r0 = 0<32>
	// succ:  l00016C10
l00016C10:
	r19_r18 = Mem0[r29 + 88<i32>:word64]
	r17_r16 = Mem0[r29 + 96<i32>:word64]
	r23_r22 = Mem0[r29 + 72<i32>:word64]
	r21_r20 = Mem0[r29 + 80<i32>:word64]
	r27_r26 = Mem0[r29 + 56<i32>:word64]
	r25_r24 = Mem0[r29 + 64<i32>:word64]
	v35 = r30
	r31 = Mem0[v35 + 4<i32>:word32]
	r30 = Mem0[v35:word32]
	r29 = v35 + 8<i32>
	return
	// succ:  qsoftmax_execute_ref_exit
qsoftmax_execute_ref_exit:


// qsoftmax_check
// Return size: 0
define qsoftmax_check
qsoftmax_check_entry:
	r29 = fp
	// succ:  l00016C24
l00016C24:
	v4 = r29 - 8<i32>
	Mem0[v4:word32] = r30
	Mem0[v4 + 4<i32>:word32] = r31
	r30 = v4
	r29 = v4 - 16<i32>
	Mem0[r29 - 16<i32>:word64] = r17_r16
	r4 = 0x0002791C<p32>
	r17 = r0
	r16 = r1
	r1 = 0x8B<32>
	Mem0[r29:word32] = r17
	r2 = r16
	call logmsg_function (retsize: 0;)
	branch r2 == 3<32> l00016C64
	// succ:  l00016C50 l00016C64
l00016C50:
	r2 = Mem0[r17 + 16<i32>:word32]
	r1 = 0x8C<32>
	r3 = 0x00016C79<p32>
	r2 = r16
	call errlog_function (retsize: 0;)
	// succ:  l00016C58
l00016C58:
	v16 = r30
	r31 = Mem0[v16 + 4<i32>:word32]
	r30 = Mem0[v16:word32]
	r29 = v16 + 8<i32>
	return
	// succ:  qsoftmax_check_exit
l00016C64:
	branch r2 == 3<32> l00016C7C
	// succ:  l00016C74 l00016C7C
l00016C74:
	r2 = Mem0[r17 + 20<i32>:word32]
	r1 = 0x8D<32>
	goto l00016C58
	// succ:  l00016C58
l00016C7C:
	r2 = r16
	r1 = 0x8E<32>
	r4 = 0x00027954<p32>
	Mem0[r29:word32] = r17
	call logmsg_function (retsize: 0;)
	r0 = 0<32>
	v17 = r30
	r31 = Mem0[v17 + 4<i32>:word32]
	r30 = Mem0[v17:word32]
	r29 = v17 + 8<i32>
	return
	// succ:  qsoftmax_check_exit
qsoftmax_check_exit:


// logmsg_function
// Return size: 0
define logmsg_function
logmsg_function_entry:
	r29 = fp
	// succ:  l00016C9C
l00016C9C:
	v4 = r29 - 8<i32>
	Mem0[v4:word32] = r30
	Mem0[v4 + 4<i32>:word32] = r31
	r30 = v4
	r29 = v4 - 8<i32>
	r3 = 2<32>
	branch r3 >u r5 l00016CC0
	// succ:  l00016CAC l00016CC0
l00016CAC:
	r5 = Mem0[r2 + 16<i32>:word32]
	r5 = r29 + 0x10<32>
	r3 = 2<32>
	r0 = 0x00016CC3<p32>
	Mem0[r29 + 1<i32>:byte] = r6
	r6 = r29 + 0x10<32>
	call logv (retsize: 0;)
	// succ:  l00016CB4_thunk_errlog_function
l00016CB4_thunk_errlog_function:
	call errlog_function (retsize: 0;)
	return
	// succ:  logmsg_function_exit
l00016CC0:
	v13 = r30
	r31 = Mem0[v13 + 4<i32>:word32]
	r30 = Mem0[v13:word32]
	r29 = v13 + 8<i32>
	return
	// succ:  logmsg_function_exit
logmsg_function_exit:


// errlog_function
// Return size: 0
define errlog_function
errlog_function_entry:
	r29 = fp
	// succ:  l00016CC4
l00016CC4:
	v4 = r29 - 8<i32>
	Mem0[v4:word32] = r30
	Mem0[v4 + 4<i32>:word32] = r31
	r30 = v4
	r29 = v4 - 8<i32>
	r4 = r3
	r0 = 0x000278FF<p32>
	Mem0[r29 + 1<i32>:byte] = r6
	r6 = r29 + 0x10<32>
	r5 = r29 + 0x10<32>
	r3 = 0<32>
	v13 = r30
	r31 = Mem0[v13 + 4<i32>:word32]
	r30 = Mem0[v13:word32]
	r29 = v13 + 8<i32>
	return
	// succ:  errlog_function_exit
errlog_function_exit:


// nop_execute
// Return size: 0
define nop_execute
nop_execute_entry:
	r29 = fp
	// succ:  l00016CF0
l00016CF0:
	v4 = r29 - 8<i32>
	Mem0[v4:word32] = r30
	Mem0[v4 + 4<i32>:word32] = r31
	r30 = v4
	r29 = v4 - 24<i32>
	r2 = r1
	r4 = 0x00027A21<p32>
	Mem0[r29 + 8<i32>:word64] = r19_r18
	Mem0[r29 + 16<i32>:word64] = r17_r16
	r16 = r0
	r1 = 0x31<32>
	Mem0[r29:word32] = r16
	call logmsg_function (retsize: 0;)
	branch r2 == 0<32> l00016D64
	// succ:  l00016D1C l00016D64
l00016D1C:
	r2 = Mem0[r16 + 20<i32>:word32]
	r3 = Mem0[r16 + 4<i32>:word32]
	r2 = Mem0[r16 + 8<i32>:word32]
	r2 = Mem0[r13 + r17:word32]
	r3 = Mem0[r21 + r17:word32]
	r4 = Mem0[r3:word32]
	Mem0[r2 + 1<i32>:byte] = r5
	r5 = Mem0[r3 + 4<i32>:word32]
	r1 = Mem0[r3 + 12<i32>:word32]
	r7 = Mem0[r3 + 8<i32>:word32]
	Mem0[r2 + 12<i32>:word32] = r1
	Mem0[r2 + 8<i32>:word32] = r7
	r4 = Mem0[r3 + 24<i32>:word32]
	branch r4 >u r6 l00016D58
	// succ:  l00016D50 l00016D58
l00016D50:
	r6 = Mem0[r2 + 20<i32>:word32]
	r1 = Mem0[r3 + 16<i32>:word32]
	r2 = Mem0[r3 + 24<i32>:word32]
	call fn00009560 (retsize: 0;)
	// succ:  l00016D58
l00016D58:
	r2 = Mem0[r16 + 20<i32>:word32]
	r17 = r17 + 4<32>
	branch r2 >u r18 l00016D1C
	goto l00016D68
	// succ:  l00016D68 l00016D1C
l00016D64:
	r19_r18 = Mem0[r29 + 8<i32>:word64]
	r17_r16 = Mem0[r29 + 16<i32>:word64]
	r0 = 0<32>
	v22 = r30
	r31 = Mem0[v22 + 4<i32>:word32]
	r30 = Mem0[v22:word32]
	r29 = v22 + 8<i32>
	return
	// succ:  nop_execute_exit
l00016D68:
	r18 = r18 + 1<32>
	r19_r18 = Mem0[r29 + 8<i32>:word64]
	r17_r16 = Mem0[r29 + 16<i32>:word64]
	v24 = r30
	r31 = Mem0[v24 + 4<i32>:word32]
	r30 = Mem0[v24:word32]
	r29 = v24 + 8<i32>
	return
	// succ:  nop_execute_exit
nop_execute_exit:


// nop_check
// Return size: 0
define nop_check
nop_check_entry:
	r29 = fp
	// succ:  l00016D70
l00016D70:
	v4 = r29 - 8<i32>
	Mem0[v4:word32] = r30
	Mem0[v4 + 4<i32>:word32] = r31
	r30 = v4
	r29 = v4 - 16<i32>
	Mem0[r29 - 16<i32>:word64] = r17_r16
	r4 = 0x000279E5<p32>
	r17 = r0
	r16 = r1
	r1 = 0x3B<32>
	Mem0[r29:word32] = r17
	r2 = r16
	call logmsg_function (retsize: 0;)
	r2 = Mem0[r17 + 20<i32>:word32]
	branch r3 == r2 l00016DA8
	// succ:  l00016D9C l00016DA8
l00016D9C:
	r3 = Mem0[r17 + 16<i32>:word32]
	r2 = r16
	v16 = r30
	r31 = Mem0[v16 + 4<i32>:word32]
	r30 = Mem0[v16:word32]
	r29 = v16 + 8<i32>
	return
	// succ:  nop_check_exit
l00016DA8:
	r2 = r16
	r1 = 0x3D<32>
	r4 = 0x00027A0C<p32>
	Mem0[r29:word32] = r17
	call logmsg_function (retsize: 0;)
	r0 = 0<32>
	v17 = r30
	r31 = Mem0[v17 + 4<i32>:word32]
	r30 = Mem0[v17:word32]
	r29 = v17 + 8<i32>
	return
	// succ:  nop_check_exit
nop_check_exit:


// nop_ctor
// Return size: 0
define nop_ctor
nop_ctor_entry:
	r29 = fp
	// succ:  l00016DC4
l00016DC4:
	v4 = r29 - 8<i32>
	Mem0[v4:word32] = r30
	Mem0[v4 + 4<i32>:word32] = r31
	r30 = v4
	r29 = v4 - 40<i32>
	Mem0[r29 - 24<i32>:word64] = r19_r18
	r6 = 0x000279D1<p32>
	r19_r18 = r5_r0
	Mem0[r29 + 16<i32>:word64] = r21_r20
	Mem0[r29 + 32<i32>:word64] = r17_r16
	r21_r20 = r2_r3
	r17_r16 = r4_r1
	r4 = r6
	r2 = r18
	r1 = 0x4B<32>
	Mem0[r29 + 8<i32>:word64] = r23_r22
	r22 = Mem0[r29 + 48<i32>:word64]
	r23 = Mem0[r29 + 52<i32>:word32]
	Mem0[r29:word32] = r16
	call logmsg_function (retsize: 0;)
	Mem0[r29 + 4<i32>:word32] = r23
	r1_r0 = r16_r18
	r3_r2 = r20_r21
	r5_r4 = r19_r17
	Mem0[r29:word32] = r22
	call node_alloc_common (retsize: 0;)
	r17_r16 = Mem0[r29 + 32<i32>:word64]
	r21_r20 = Mem0[r29 + 16<i32>:word64]
	r19_r18 = Mem0[r29 + 24<i32>:word64]
	v36 = r30
	r31 = Mem0[v36 + 4<i32>:word32]
	r30 = Mem0[v36:word32]
	r29 = v36 + 8<i32>
	return
	// succ:  nop_ctor_exit
nop_ctor_exit:


// nop_dtor
// Return size: 0
define nop_dtor
nop_dtor_entry:
	r29 = fp
	// succ:  l00016E1C
l00016E1C:
	v4 = r29 - 8<i32>
	Mem0[v4:word32] = r30
	Mem0[v4 + 4<i32>:word32] = r31
	r30 = v4
	r29 = v4 - 16<i32>
	Mem0[r29 - 16<i32>:word64] = r17_r16
	r4 = 0x000279C0<p32>
	r17 = r0
	r16 = r1
	r1 = 0x59<32>
	Mem0[r29:word32] = r17
	r2 = r16
	call logmsg_function (retsize: 0;)
	r1_r0 = r16_r17
	v17 = r30
	r31 = Mem0[v17 + 4<i32>:word32]
	r30 = Mem0[v17:word32]
	r29 = v17 + 8<i32>
	r17_r16 = Mem0[r29 + 8<i32>:word64]
	// succ:  l00016E3C_thunk_node_free_common
l00016E3C_thunk_node_free_common:
	call node_free_common (retsize: 0;)
	return
	// succ:  nop_dtor_exit
nop_dtor_exit:


// logmsg_function
// Return size: 0
define logmsg_function
logmsg_function_entry:
	r29 = fp
	// succ:  l00016E44
l00016E44:
	v4 = r29 - 8<i32>
	Mem0[v4:word32] = r30
	Mem0[v4 + 4<i32>:word32] = r31
	r30 = v4
	r29 = v4 - 8<i32>
	r3 = 2<32>
	branch r3 >u r5 l00016E68
	// succ:  l00016E54 l00016E68
l00016E54:
	r5 = Mem0[r2 + 16<i32>:word32]
	r5 = r29 + 0x10<32>
	r3 = 2<32>
	r0 = 0x00016E6B<p32>
	Mem0[r29 + 1<i32>:byte] = r6
	r6 = r29 + 0x10<32>
	call logv (retsize: 0;)
	goto l00016E6C
	// succ:  l00016E6C
l00016E68:
	v13 = r30
	r31 = Mem0[v13 + 4<i32>:word32]
	r30 = Mem0[v13:word32]
	r29 = v13 + 8<i32>
	return
	// succ:  logmsg_function_exit
l00016E6C:
	// succ:  l00016E6C_thunk_errlog_function
l00016E6C_thunk_errlog_function:
	call errlog_function (retsize: 0;)
	return
	// succ:  logmsg_function_exit
logmsg_function_exit:


// errlog_function
// Return size: 0
define errlog_function
errlog_function_entry:
	r29 = fp
	// succ:  l00016E70
l00016E70:
	v4 = r29 - 8<i32>
	Mem0[v4:word32] = r30
	Mem0[v4 + 4<i32>:word32] = r31
	r30 = v4
	r29 = v4 - 8<i32>
	r3 = 0<32>
	r0 = 0x000279A7<p32>
	r5 = r29 + 0x10<32>
	r1 = 0x3C<32>
	r4 = 0x000279FA<p32>
	Mem0[r29 + 1<i32>:byte] = r6
	r6 = r29 + 0x10<32>
	call logv (retsize: 0;)
	r0 = Mem0[r0:word32]
	r0 = Mem0[r0:word32]
	r0 = Mem0[r0:word32]
	r0 = Mem0[r0:word32]
	// succ:  l00016E9C_thunk_output_execute
l00016E9C_thunk_output_execute:
	call output_execute (retsize: 0;)
	return
	// succ:  errlog_function_exit
errlog_function_exit:


// output_execute
// Return size: 0
define output_execute
output_execute_entry:
	r29 = fp
	// succ:  l00016EA0
l00016EA0:
	v4 = r29 - 8<i32>
	Mem0[v4:word32] = r30
	Mem0[v4 + 4<i32>:word32] = r31
	r30 = v4
	r29 = v4 - 32<i32>
	Mem0[r29 - 16<i32>:word64] = r17_r16
	r4 = 0x00027A96<p32>
	r16 = r1
	r1 = 0x34<32>
	Mem0[r29 + 8<i32>:word64] = r21_r20
	Mem0[r29 + 16<i32>:word64] = r19_r18
	r18 = r0
	r2 = r16
	Mem0[r29:word32] = r18
	call logmsg_function (retsize: 0;)
	r2 = Mem0[r16 + 32<i32>:word32]
	branch r3 == r2 l00016F04
	// succ:  l00016ED4 l00016F04
l00016ED4:
	r3 = Mem0[r18 + 16<i32>:word32]
	r2 = 0<32>
	r17 = 0<32>
	r21_r20 = 0<64>
	r19 = 0<32>
	// succ:  l00016EDC
l00016EDC:
	r3 = Mem0[r16 + 24<i32>:word32]
	r2 = Mem0[r18 + 4<i32>:word32]
	r2 = Mem0[r13 + r20:word32]
	r3 = r3 + r21
	r4 = Mem0[r3 + 20<i32>:word32]
	branch r5 >u r4 l00016F1C
	// succ:  l00016EF8 l00016F1C
l00016EF8:
	r5 = Mem0[r2 + 24<i32>:word32]
	Mem0[r29:word32] = r19
	r1 = 0x3A<32>
	r3 = 0x00016F01<p32>
	goto l00016F10
	// succ:  l00016F10
l00016F04:
	r1 = 0x35<32>
	r3 = 0x00027AAF<p32>
	// succ:  l00016F10
l00016F10:
	r17 = -1<i32>
	r2 = r16
	call errlog_function (retsize: 0;)
	goto l00016F74
	// succ:  l00016F74
l00016F1C:
	r5 = Mem0[r2 + 4<i32>:word32]
	r4 = Mem0[r2:word32]
	Mem0[r3:word32] = r4
	Mem0[r3 + 4<i32>:word32] = r5
	r4 = Mem0[r2 + 8<i32>:word32]
	Mem0[r3 + 8<i32>:word32] = r4
	r7 = Mem0[r2 + 12<i32>:word32]
	Mem0[r3 + 12<i32>:word32] = r7
	r4 = Mem0[r2 + 24<i32>:word32]
	Mem0[r3 + 24<i32>:word32] = r4
	r1 = Mem0[r2 + 16<i32>:word32]
	r2 = Mem0[r2 + 24<i32>:word32]
	r0 = Mem0[r3 + 16<i32>:word32]
	call fn00009560 (retsize: 0;)
	r2 = Mem0[r16:word32]
	r21 = r21 + 0x20<32>
	r20 = r20 + 4<32>
	branch r2 >u r19 l00016EDC
	// succ:  l00016F5C l00016EDC
l00016F5C:
	r19 = r19 + 1<32>
	Mem0[r29:word32] = r2
	r1 = 0x41<32>
	r4 = 0x00027AD1<p32>
	r2 = r16
	call logmsg_function (retsize: 0;)
	// succ:  l00016F74
l00016F74:
	r19_r18 = Mem0[r29 + 16<i32>:word64]
	r17_r16 = Mem0[r29 + 24<i32>:word64]
	r0 = r17
	v25 = r30
	r31 = Mem0[v25 + 4<i32>:word32]
	r30 = Mem0[v25:word32]
	r29 = v25 + 8<i32>
	return
	// succ:  output_execute_exit
output_execute_exit:


// output_check
// Return size: 0
define output_check
output_check_entry:
	r29 = fp
	// succ:  l00016F80
l00016F80:
	v4 = r29 - 8<i32>
	Mem0[v4:word32] = r30
	Mem0[v4 + 4<i32>:word32] = r31
	r30 = v4
	r29 = v4 - 16<i32>
	Mem0[r29 - 16<i32>:word64] = r17_r16
	r4 = 0x00027A53<p32>
	r17 = r0
	r16 = r1
	r1 = 0x48<32>
	Mem0[r29:word32] = r17
	r2 = r16
	call logmsg_function (retsize: 0;)
	branch r2 == 0<32> l00016FDC
	// succ:  l00016FA8 l00016FDC
l00016FA8:
	r2 = Mem0[r17 + 16<i32>:word32]
	r3 = Mem0[r17 + 4<i32>:word32]
	branch r2 >u r4 l00016FDC
l00016FB0:
	branch r2 >u r4 l00016FE0
	// succ:  l00016FBC l00016FDC l00016FE0
l00016FBC:
	r4 = r4 + 1<32>
	r3 = r3 + 4<32>
	branch r5 == 0<32> l00016FB0
	// succ:  l00016FC4 l00016FB0
l00016FC4:
	r2 = r16
	r1 = 0x4A<32>
	r3 = 0x00016FEF<p32>
	call errlog_function (retsize: 0;)
	v17 = r30
	r31 = Mem0[v17 + 4<i32>:word32]
	r30 = Mem0[v17:word32]
	r29 = v17 + 8<i32>
	return
	// succ:  output_check_exit
l00016FDC:
	r2 = r16
	r1 = 0x4C<32>
	r4 = 0x00027A7E<p32>
	// succ:  l00016FE0
l00016FE0:
	Mem0[r29:word32] = r17
	call logmsg_function (retsize: 0;)
	r0 = 0<32>
	v18 = r30
	r31 = Mem0[v18 + 4<i32>:word32]
	r30 = Mem0[v18:word32]
	r29 = v18 + 8<i32>
	return
	// succ:  output_check_exit
output_check_exit:


// logmsg_function
// Return size: 0
define logmsg_function
logmsg_function_entry:
	r29 = fp
	// succ:  l00016FFC
l00016FFC:
	v4 = r29 - 8<i32>
	Mem0[v4:word32] = r30
	Mem0[v4 + 4<i32>:word32] = r31
	r30 = v4
	r29 = v4 - 8<i32>
	r3 = 2<32>
	branch r3 >u r5 l00017020
	// succ:  l0001700C l00017020
l0001700C:
	r5 = Mem0[r2 + 16<i32>:word32]
	r5 = r29 + 0x10<32>
	r3 = 2<32>
	r0 = 0x0001703B<p32>
	Mem0[r29 + 1<i32>:byte] = r6
	r6 = r29 + 0x10<32>
	call logv (retsize: 0;)
	// succ:  l00017014_thunk_errlog_function
l00017014_thunk_errlog_function:
	call errlog_function (retsize: 0;)
	return
	// succ:  logmsg_function_exit
l00017020:
	v13 = r30
	r31 = Mem0[v13 + 4<i32>:word32]
	r30 = Mem0[v13:word32]
	r29 = v13 + 8<i32>
	return
	// succ:  logmsg_function_exit
logmsg_function_exit:


// errlog_function
// Return size: 0
define errlog_function
errlog_function_entry:
	r29 = fp
	// succ:  l00017024
l00017024:
	v4 = r29 - 8<i32>
	Mem0[v4:word32] = r30
	Mem0[v4 + 4<i32>:word32] = r31
	r30 = v4
	r29 = v4 - 8<i32>
	r4 = r3
	r0 = 0x00027A37<p32>
	Mem0[r29 + 1<i32>:byte] = r6
	r6 = r29 + 0x10<32>
	r5 = r29 + 0x10<32>
	r3 = 0<32>
	v13 = r30
	r31 = Mem0[v13 + 4<i32>:word32]
	r30 = Mem0[v13:word32]
	r29 = v13 + 8<i32>
	return
	// succ:  errlog_function_exit
errlog_function_exit:


// pprint_8_execute
// Return size: 0
define pprint_8_execute
pprint_8_execute_entry:
	r29 = fp
	// succ:  l00017050
l00017050:
	v4 = r29 - 8<i32>
	Mem0[v4:word32] = r30
	Mem0[v4 + 4<i32>:word32] = r31
	r30 = v4
	r29 = v4 - 72<i32>
	r4 = 0x00027AFF<p32>
	r5 = Mem0[r0 + 28<i32>:word32]
	r2 = Mem0[r0 + 4<i32>:word32]
	Mem0[r29 + 56<i32>:word64] = r19_r18
	Mem0[r29 + 64<i32>:word64] = r17_r16
	r1 = 0x48<32>
	r16 = r1
	r7 = Mem0[r2:word32]
	r3_r2 = SEQ(2<32>, r16)
	Mem0[r29 + 40<i32>:word64] = r23_r22
	Mem0[r29 + 48<i32>:word64] = r21_r20
	Mem0[r29 + 32<i32>:word64] = r25_r24
	r17 = Mem0[r7 + 16<i32>:word32]
	r19 = Mem0[r7 + 8<i32>:word32]
	r18 = Mem0[r7 + 12<i32>:word32]
	r21 = Mem0[r7:word32]
	r20 = Mem0[r7 + 4<i32>:word32]
	Mem0[r29 + 24<i32>:word64] = r27_r26
	Mem0[r29 + 4<i32>:word32] = r5
	Mem0[r29:word32] = r0
	call logmsg_function (retsize: 0;)
	Mem0[r29 + 12<i32>:word32] = r18
	r3_r2 = SEQ(1<32>, r16)
	r4 = 0x00027B17<p32>
	Mem0[r29:word32] = r21
	r1 = 0x48<32>
	Mem0[r29 + 4<i32>:word32] = r20
	Mem0[r29 + 8<i32>:word32] = r19
	call logmsg_function (retsize: 0;)
	r22 = 0<32>
	branch p0 l0001712C
	// succ:  l000170C0 l0001712C
l000170C0:
	p0 = r13 == 0<32>
	r23 = 0<32>
	branch p0 l00017124
l000170C4:
	r23 = 0<32>
	// succ:  l000170C8 l00017124
l000170C8:
	p0 = r12 == 0<32>
	r24 = 0<32>
	branch p0 l0001711C
l000170CC:
	r24 = 0<32>
	// succ:  l000170D0 l0001711C
l000170D0:
	p0 = r11 == 0<32>
	r26 = 0<32>
	r25 = r17
	branch p0 l00017114
	// succ:  l000170DC l00017114
l000170DC:
	p0 = r10 == 0<32>
	Mem0[r29 + 4<i32>:byte] = r2
	r25 = r25 + 1<i32>
	r2 = Mem0[r25:byte]
	r4 = 0x00027B81<p32>
	Mem0[r29 + 4<i32>:word32] = r23
	r3_r2 = SEQ(1<32>, r16)
	Mem0[r29 + 8<i32>:word32] = r24
	Mem0[r29 + 12<i32>:word32] = r26
	Mem0[r29:word32] = r22
	call logmsg_function (retsize: 0;)
	branch r26 == r18 l000170DC
	// succ:  l00017114 l000170DC
l00017114:
	r26 = r26 + 1<32>
	branch r24 == r19 l000170D0
	goto l00017120
	// succ:  l00017120 l000170D0
l0001711C:
	branch r23 == r20 l000170C8
	goto l00017128
	// succ:  l00017128 l000170C8
l00017120:
	r24 = r24 + 1<32>
	branch r23 == r20 l000170CC
	goto l00017128
	// succ:  l00017128 l000170CC
l00017124:
	branch r22 == r21 l000170C0
	goto l00017130
	// succ:  l00017130 l000170C0
l00017128:
	branch r22 == r21 l000170C4
	goto l00017130
	// succ:  l00017130 l000170C4
l0001712C:
	r19_r18 = Mem0[r29 + 56<i32>:word64]
	r17_r16 = Mem0[r29 + 64<i32>:word64]
	r0 = 0<32>
	goto l00017134
	// succ:  l00017134
l00017130:
	r19_r18 = Mem0[r29 + 56<i32>:word64]
	r17_r16 = Mem0[r29 + 64<i32>:word64]
	// succ:  l00017134
l00017134:
	r23_r22 = Mem0[r29 + 40<i32>:word64]
	r21_r20 = Mem0[r29 + 48<i32>:word64]
	r27_r26 = Mem0[r29 + 24<i32>:word64]
	r25_r24 = Mem0[r29 + 32<i32>:word64]
	v37 = r30
	r31 = Mem0[v37 + 4<i32>:word32]
	r30 = Mem0[v37:word32]
	r29 = v37 + 8<i32>
	return
	// succ:  pprint_8_execute_exit
pprint_8_execute_exit:


// pprint_check
// Return size: 0
define pprint_check
pprint_check_entry:
	r29 = fp
	// succ:  l00017144
l00017144:
	v4 = r29 - 8<i32>
	Mem0[v4:word32] = r30
	Mem0[v4 + 4<i32>:word32] = r31
	r30 = v4
	r29 = v4 - 0<i32>
	r2 = r1
	branch r3 == 1<32> l00017164
	// succ:  l00017158 l00017164
l00017158:
	r3 = Mem0[r0 + 16<i32>:word32]
	r1 = 0x4E<32>
	r3 = 0x00017196<p32>
	call errlog_function (retsize: 0;)
	// succ:  l00017160
l00017160:
	v12 = r30
	r31 = Mem0[v12 + 4<i32>:word32]
	r30 = Mem0[v12:word32]
	r29 = v12 + 8<i32>
	return
	// succ:  pprint_check_exit
l00017164:
	branch r3 == 0<32> l0001717C
	// succ:  l00017174 l0001717C
l00017174:
	r3 = Mem0[r0 + 20<i32>:word32]
	r1 = 0x4F<32>
	goto l00017160
	// succ:  l00017160
l0001717C:
	r1 = 0x50<32>
	r3 = 2<32>
	r4 = 0x00027B71<p32>
	call logmsg_function (retsize: 0;)
	v14 = r30
	r31 = Mem0[v14 + 4<i32>:word32]
	r30 = Mem0[v14:word32]
	r29 = v14 + 8<i32>
	return
	// succ:  pprint_check_exit
pprint_check_exit:


// pprint_32_execute
// Return size: 0
define pprint_32_execute
pprint_32_execute_entry:
	r29 = fp
	// succ:  l00017194
l00017194:
	v4 = r29 - 8<i32>
	Mem0[v4:word32] = r30
	Mem0[v4 + 4<i32>:word32] = r31
	r30 = v4
	r29 = v4 - 72<i32>
	r4 = 0x00027AFF<p32>
	r5 = Mem0[r0 + 28<i32>:word32]
	r2 = Mem0[r0 + 4<i32>:word32]
	Mem0[r29 + 56<i32>:word64] = r19_r18
	Mem0[r29 + 64<i32>:word64] = r17_r16
	r1 = 0x49<32>
	r16 = r1
	r7 = Mem0[r2:word32]
	r3_r2 = SEQ(2<32>, r16)
	Mem0[r29 + 40<i32>:word64] = r23_r22
	Mem0[r29 + 48<i32>:word64] = r21_r20
	Mem0[r29 + 32<i32>:word64] = r25_r24
	r17 = Mem0[r7 + 16<i32>:word32]
	r19 = Mem0[r7 + 8<i32>:word32]
	r18 = Mem0[r7 + 12<i32>:word32]
	r21 = Mem0[r7:word32]
	r20 = Mem0[r7 + 4<i32>:word32]
	Mem0[r29 + 24<i32>:word64] = r27_r26
	Mem0[r29 + 4<i32>:word32] = r5
	Mem0[r29:word32] = r0
	call logmsg_function (retsize: 0;)
	Mem0[r29 + 12<i32>:word32] = r18
	r3_r2 = SEQ(1<32>, r16)
	r4 = 0x00027B17<p32>
	Mem0[r29:word32] = r21
	r1 = 0x49<32>
	Mem0[r29 + 4<i32>:word32] = r20
	Mem0[r29 + 8<i32>:word32] = r19
	call logmsg_function (retsize: 0;)
	r22 = 0<32>
	branch p0 l00017270
	// succ:  l00017204 l00017270
l00017204:
	p0 = r13 == 0<32>
	r23 = 0<32>
	branch p0 l00017268
l00017208:
	r23 = 0<32>
	// succ:  l0001720C l00017268
l0001720C:
	p0 = r12 == 0<32>
	r24 = 0<32>
	branch p0 l00017260
l00017210:
	r24 = 0<32>
	// succ:  l00017214 l00017260
l00017214:
	p0 = r11 == 0<32>
	r26 = 0<32>
	r25 = r17
	branch p0 l00017258
	// succ:  l00017220 l00017258
l00017220:
	p0 = r10 == 0<32>
	Mem0[r29 + 4<i32>:byte] = r2
	r25 = r25 + 4<i32>
	r2 = Mem0[r25:word32]
	r4 = 0x00027B3C<p32>
	Mem0[r29 + 4<i32>:word32] = r23
	r3_r2 = SEQ(1<32>, r16)
	Mem0[r29 + 8<i32>:word32] = r24
	Mem0[r29 + 12<i32>:word32] = r26
	Mem0[r29:word32] = r22
	call logmsg_function (retsize: 0;)
	branch r26 == r18 l00017220
	// succ:  l00017258 l00017220
l00017258:
	r26 = r26 + 1<32>
	branch r24 == r19 l00017214
	goto l00017264
	// succ:  l00017264 l00017214
l00017260:
	branch r23 == r20 l0001720C
	goto l0001726C
	// succ:  l0001726C l0001720C
l00017264:
	r24 = r24 + 1<32>
	branch r23 == r20 l00017210
	goto l0001726C
	// succ:  l0001726C l00017210
l00017268:
	branch r22 == r21 l00017204
	goto l00017274
	// succ:  l00017274 l00017204
l0001726C:
	branch r22 == r21 l00017208
	goto l00017274
	// succ:  l00017274 l00017208
l00017270:
	r19_r18 = Mem0[r29 + 56<i32>:word64]
	r17_r16 = Mem0[r29 + 64<i32>:word64]
	r0 = 0<32>
	goto l00017278
	// succ:  l00017278
l00017274:
	r19_r18 = Mem0[r29 + 56<i32>:word64]
	r17_r16 = Mem0[r29 + 64<i32>:word64]
	// succ:  l00017278
l00017278:
	r23_r22 = Mem0[r29 + 40<i32>:word64]
	r21_r20 = Mem0[r29 + 48<i32>:word64]
	r27_r26 = Mem0[r29 + 24<i32>:word64]
	r25_r24 = Mem0[r29 + 32<i32>:word64]
	v37 = r30
	r31 = Mem0[v37 + 4<i32>:word32]
	r30 = Mem0[v37:word32]
	r29 = v37 + 8<i32>
	return
	// succ:  pprint_32_execute_exit
pprint_32_execute_exit:


// pprint_f_execute
// Return size: 0
define pprint_f_execute
pprint_f_execute_entry:
	r29 = fp
	// succ:  l00017290
l00017290:
	v4 = r29 - 8<i32>
	Mem0[v4:word32] = r30
	Mem0[v4 + 4<i32>:word32] = r31
	r30 = v4
	r29 = v4 - 72<i32>
	r4 = 0x00027AFF<p32>
	r5 = Mem0[r0 + 28<i32>:word32]
	r2 = Mem0[r0 + 4<i32>:word32]
	Mem0[r29 + 56<i32>:word64] = r19_r18
	Mem0[r29 + 64<i32>:word64] = r17_r16
	r1 = 0x4A<32>
	r16 = r1
	r7 = Mem0[r2:word32]
	r3_r2 = SEQ(2<32>, r16)
	Mem0[r29 + 40<i32>:word64] = r23_r22
	Mem0[r29 + 48<i32>:word64] = r21_r20
	Mem0[r29 + 32<i32>:word64] = r25_r24
	r17 = Mem0[r7 + 16<i32>:word32]
	r19 = Mem0[r7 + 8<i32>:word32]
	r18 = Mem0[r7 + 12<i32>:word32]
	r21 = Mem0[r7:word32]
	r20 = Mem0[r7 + 4<i32>:word32]
	Mem0[r29 + 24<i32>:word64] = r27_r26
	Mem0[r29 + 4<i32>:word32] = r5
	Mem0[r29:word32] = r0
	call logmsg_function (retsize: 0;)
	Mem0[r29 + 12<i32>:word32] = r18
	r3_r2 = SEQ(1<32>, r16)
	r4 = 0x00027B17<p32>
	Mem0[r29:word32] = r21
	r1 = 0x4A<32>
	Mem0[r29 + 4<i32>:word32] = r20
	Mem0[r29 + 8<i32>:word32] = r19
	call logmsg_function (retsize: 0;)
	r22 = 0<32>
	branch p0 l00017374
	// succ:  l00017300 l00017374
l00017300:
	p0 = r13 == 0<32>
	r23 = 0<32>
	branch p0 l0001736C
l00017304:
	r23 = 0<32>
	// succ:  l00017308 l0001736C
l00017308:
	p0 = r12 == 0<32>
	r24 = 0<32>
	branch p0 l00017364
l0001730C:
	r24 = 0<32>
	// succ:  l00017310 l00017364
l00017310:
	p0 = r11 == 0<32>
	r26 = 0<32>
	r25 = r17
	branch p0 l0001735C
	// succ:  l0001731C l0001735C
l0001731C:
	p0 = r10 == 0<32>
	r2 = Mem0[r25:word32]
	r25 = r25 + 4<32>
	r4 = 0x00027B2A<p32>
	Mem0[r29 + 4<i32>:word32] = r23
	Mem0[r29 + 8<i32>:word32] = r24
	r3_r2 = SEQ(1<32>, r16)
	r1_r0 = CONVERT(r2, real32, real64)
	Mem0[r29 + 12<i32>:word32] = r26
	Mem0[r29 + 16<i32>:word64] = r1_r0
	r1 = 0x4A<32>
	Mem0[r29:word32] = r22
	call logmsg_function (retsize: 0;)
	branch r26 == r18 l0001731C
	// succ:  l0001735C l0001731C
l0001735C:
	r26 = r26 + 1<32>
	branch r24 == r19 l00017310
	goto l00017368
	// succ:  l00017368 l00017310
l00017364:
	branch r23 == r20 l00017308
	goto l00017370
	// succ:  l00017370 l00017308
l00017368:
	r24 = r24 + 1<32>
	branch r23 == r20 l0001730C
	goto l00017370
	// succ:  l00017370 l0001730C
l0001736C:
	branch r22 == r21 l00017300
	goto l00017378
	// succ:  l00017378 l00017300
l00017370:
	branch r22 == r21 l00017304
	goto l00017378
	// succ:  l00017378 l00017304
l00017374:
	r19_r18 = Mem0[r29 + 56<i32>:word64]
	r17_r16 = Mem0[r29 + 64<i32>:word64]
	r0 = 0<32>
	goto l0001737C
	// succ:  l0001737C
l00017378:
	r19_r18 = Mem0[r29 + 56<i32>:word64]
	r17_r16 = Mem0[r29 + 64<i32>:word64]
	// succ:  l0001737C
l0001737C:
	r23_r22 = Mem0[r29 + 40<i32>:word64]
	r21_r20 = Mem0[r29 + 48<i32>:word64]
	r27_r26 = Mem0[r29 + 24<i32>:word64]
	r25_r24 = Mem0[r29 + 32<i32>:word64]
	v38 = r30
	r31 = Mem0[v38 + 4<i32>:word32]
	r30 = Mem0[v38:word32]
	r29 = v38 + 8<i32>
	return
	// succ:  pprint_f_execute_exit
pprint_f_execute_exit:


// logmsg_function
// Return size: 0
define logmsg_function
logmsg_function_entry:
	r29 = fp
	// succ:  l0001738C
l0001738C:
	v4 = r29 - 8<i32>
	Mem0[v4:word32] = r30
	Mem0[v4 + 4<i32>:word32] = r31
	r30 = v4
	r29 = v4 - 8<i32>
	branch r3 >u r5 l000173AC
	// succ:  l0001739C l000173AC
l0001739C:
	r5 = Mem0[r2 + 16<i32>:word32]
	r6 = r29 + 0x10<32>
	r5 = r29 + 0x10<32>
	r0 = 0x000173A7<p32>
	Mem0[r29 + 4<i32>:word32] = r6
	call logv (retsize: 0;)
	// succ:  l000173AC
l000173AC:
	v13 = r30
	r31 = Mem0[v13 + 4<i32>:word32]
	r30 = Mem0[v13:word32]
	r29 = v13 + 8<i32>
	return
	// succ:  logmsg_function_exit
logmsg_function_exit:


// errlog_function
// Return size: 0
define errlog_function
errlog_function_entry:
	r29 = fp
	// succ:  l000173B0
l000173B0:
	v4 = r29 - 8<i32>
	Mem0[v4:word32] = r30
	Mem0[v4 + 4<i32>:word32] = r31
	r30 = v4
	r29 = v4 - 8<i32>
	r4 = r3
	r0 = 0x00027AE3<p32>
	Mem0[r29 + 1<i32>:byte] = r6
	r6 = r29 + 0x10<32>
	r5 = r29 + 0x10<32>
	r3 = 0<32>
	v13 = r30
	r31 = Mem0[v13 + 4<i32>:word32]
	r30 = Mem0[v13:word32]
	r29 = v13 + 8<i32>
	return
	// succ:  errlog_function_exit
errlog_function_exit:


// prefree_execute
// Return size: 0
define prefree_execute
prefree_execute_entry:
	r29 = fp
	// succ:  l000173E0
l000173E0:
	r2 = r1
	r1 = 0x31<32>
	r3 = 0x00027C05<p32>
	v8 = r29 - 8<i32>
	Mem0[v8:word32] = r30
	Mem0[v8 + 4<i32>:word32] = r31
	r30 = v8
	r29 = v8 - 0<i32>
	call errlog_function (retsize: 0;)
	v11 = r30
	r31 = Mem0[v11 + 4<i32>:word32]
	r30 = Mem0[v11:word32]
	r29 = v11 + 8<i32>
	return
	// succ:  prefree_execute_exit
prefree_execute_exit:


// prefree_check
// Return size: 0
define prefree_check
prefree_check_entry:
	r29 = fp
	// succ:  l00017400
l00017400:
	r2 = r1
	r1 = 0x36<32>
	r3 = 0x00027BE1<p32>
	v8 = r29 - 8<i32>
	Mem0[v8:word32] = r30
	Mem0[v8 + 4<i32>:word32] = r31
	r30 = v8
	r29 = v8 - 0<i32>
	call errlog_function (retsize: 0;)
	v11 = r30
	r31 = Mem0[v11 + 4<i32>:word32]
	r30 = Mem0[v11:word32]
	r29 = v11 + 8<i32>
	return
	// succ:  prefree_check_exit
prefree_check_exit:


// prefree_ctor
// Return size: 0
define prefree_ctor
prefree_ctor_entry:
	r29 = fp
	// succ:  l00017420
l00017420:
	v4 = r29 - 8<i32>
	Mem0[v4:word32] = r30
	Mem0[v4 + 4<i32>:word32] = r31
	r30 = v4
	r29 = v4 - 40<i32>
	Mem0[r29 - 24<i32>:word64] = r19_r18
	r6 = 0x00027BC9<p32>
	r19_r18 = r5_r0
	Mem0[r29 + 16<i32>:word64] = r21_r20
	Mem0[r29 + 32<i32>:word64] = r17_r16
	r21_r20 = r2_r3
	r17_r16 = r4_r1
	r4 = r6
	r2 = r18
	r1 = 0x43<32>
	Mem0[r29 + 8<i32>:word64] = r23_r22
	r22 = Mem0[r29 + 48<i32>:word64]
	r23 = Mem0[r29 + 52<i32>:word32]
	Mem0[r29:word32] = r16
	call logmsg_function (retsize: 0;)
	Mem0[r29 + 4<i32>:word32] = r23
	r1_r0 = r16_r18
	r3_r2 = r20_r21
	r5_r4 = r19_r17
	Mem0[r29:word32] = r22
	call node_alloc_common (retsize: 0;)
	r17_r16 = Mem0[r29 + 32<i32>:word64]
	r21_r20 = Mem0[r29 + 16<i32>:word64]
	r19_r18 = Mem0[r29 + 24<i32>:word64]
	v36 = r30
	r31 = Mem0[v36 + 4<i32>:word32]
	r30 = Mem0[v36:word32]
	r29 = v36 + 8<i32>
	return
	// succ:  prefree_ctor_exit
prefree_ctor_exit:


// prefree_dtor
// Return size: 0
define prefree_dtor
prefree_dtor_entry:
	r29 = fp
	// succ:  l00017480
l00017480:
	v4 = r29 - 8<i32>
	Mem0[v4:word32] = r30
	Mem0[v4 + 4<i32>:word32] = r31
	r30 = v4
	r29 = v4 - 16<i32>
	Mem0[r29 - 16<i32>:word64] = r17_r16
	r4 = 0x00027BB4<p32>
	r17 = r0
	r16 = r1
	r1 = 0x51<32>
	Mem0[r29:word32] = r17
	r2 = r16
	call logmsg_function (retsize: 0;)
	r1_r0 = r16_r17
	v17 = r30
	r31 = Mem0[v17 + 4<i32>:word32]
	r30 = Mem0[v17:word32]
	r29 = v17 + 8<i32>
	r17_r16 = Mem0[r29 + 8<i32>:word64]
	// succ:  l000174A0_thunk_node_free_common
l000174A0_thunk_node_free_common:
	call node_free_common (retsize: 0;)
	return
	// succ:  prefree_dtor_exit
prefree_dtor_exit:


// logmsg_function
// Return size: 0
define logmsg_function
logmsg_function_entry:
	r29 = fp
	// succ:  l000174A8
l000174A8:
	v4 = r29 - 8<i32>
	Mem0[v4:word32] = r30
	Mem0[v4 + 4<i32>:word32] = r31
	r30 = v4
	r29 = v4 - 8<i32>
	r3 = 2<32>
	branch r3 >u r5 l000174CC
	// succ:  l000174B8 l000174CC
l000174B8:
	r5 = Mem0[r2 + 16<i32>:word32]
	r5 = r29 + 0x10<32>
	r3 = 2<32>
	r0 = 0x000174DB<p32>
	Mem0[r29 + 1<i32>:byte] = r6
	r6 = r29 + 0x10<32>
	call logv (retsize: 0;)
	// succ:  l000174C0_thunk_errlog_function
l000174C0_thunk_errlog_function:
	call errlog_function (retsize: 0;)
	return
	// succ:  logmsg_function_exit
l000174CC:
	v13 = r30
	r31 = Mem0[v13 + 4<i32>:word32]
	r30 = Mem0[v13:word32]
	r29 = v13 + 8<i32>
	return
	// succ:  logmsg_function_exit
logmsg_function_exit:


// errlog_function
// Return size: 0
define errlog_function
errlog_function_entry:
	r29 = fp
	// succ:  l000174D0
l000174D0:
	v4 = r29 - 8<i32>
	Mem0[v4:word32] = r30
	Mem0[v4 + 4<i32>:word32] = r31
	r30 = v4
	r29 = v4 - 8<i32>
	r4 = r3
	r0 = 0x00027B97<p32>
	Mem0[r29 + 1<i32>:byte] = r6
	r6 = r29 + 0x10<32>
	r5 = r29 + 0x10<32>
	r3 = 0<32>
	v13 = r30
	r31 = Mem0[v13 + 4<i32>:word32]
	r30 = Mem0[v13:word32]
	r29 = v13 + 8<i32>
	return
	// succ:  errlog_function_exit
errlog_function_exit:


// quantize_execute
// Return size: 0
define quantize_execute
quantize_execute_entry:
	r29 = fp
	// succ:  l00017500
l00017500:
	v4 = r29 - 8<i32>
	Mem0[v4:word32] = r30
	Mem0[v4 + 4<i32>:word32] = r31
	r30 = v4
	r29 = v4 - 64<i32>
	r4 = 0x00027D05<p32>
	r5 = Mem0[r0 + 8<i32>:word32]
	r3 = Mem0[r0 + 4<i32>:word32]
	Mem0[r29 + 16<i32>:word64] = r27_r26
	Mem0[r29 + 24<i32>:word64] = r25_r24
	r7 = Mem0[r3 + 8<i32>:word32]
	r6 = Mem0[r3:word32]
	Mem0[r29 + 48<i32>:word64] = r19_r18
	r3 = Mem0[r3 + 4<i32>:word32]
	r9 = Mem0[r6 + 4<i32>:word32]
	r8 = Mem0[r6:word32]
	r13 = Mem0[r6 + 12<i32>:word32]
	r12 = Mem0[r6 + 8<i32>:word32]
	Mem0[r29 + 56<i32>:word64] = r17_r16
	r16 = r1
	r25 = CONVERT(r8, uint32, real32)
	r26 = CONVERT(r9, uint32, real32)
	r19 = Mem0[r5:word32]
	r3 = Mem0[r3 + 16<i32>:word32]
	r18 = CONVERT(r13, uint32, real32)
	r27 = CONVERT(r12, uint32, real32)
	r7 = Mem0[r7 + 16<i32>:word32]
	r2 = r16
	r1 = 0x49<32>
	r8 = r25 * r26
	Mem0[r29 + 32<i32>:word64] = r23_r22
	r9 = Mem0[r5 + 4<i32>:word32]
	r8 = r8 * r27
	Mem0[r29 + 40<i32>:word64] = r21_r20
	r5 = Mem0[r5 + 8<i32>:word32]
	Mem0[r29 + 8<i32>:word32] = r9
	Mem0[r29 + 12<i32>:word32] = r5
	r22 = Mem0[r6 + 16<i32>:word32]
	r24 = r8 * r18
	r17 = Mem0[r3:word32]
	r23 = Mem0[r19 + 16<i32>:word32]
	Mem0[r29:word32] = r0
	r20 = Mem0[r7:word32]
	call logmsg_function (retsize: 0;)
	r21 = truncf(CONVERT(r24, uint32, real32))
	branch r21 >u r2 l000175AC
	// succ:  l00017594 l000175AC
l00017594:
	r2 = Mem0[r19 + 20<i32>:word32]
	r6 = CONVERT(r18, real32, uint32)
	r7 = CONVERT(r26, real32, uint32)
	r2 = r16
	r1 = 0x4A<32>
	r3 = 0x0001759F<p32>
	call errlog_function (retsize: 0;)
	r0 = 0xFFFFFFFF<32>
	goto l000176BC
	// succ:  l000176BC
l000175AC:
	r4 = 0<32>
	r2 = CONVERT(r25, real32, uint32)
	r3 = CONVERT(r27, real32, uint32)
	Mem0[r19 + 24<i32>:word32] = r21
	r18 = r4
	Mem0[r19:word32] = r2
	Mem0[r19 + 8<i32>:word32] = r3
	r1_r0 = r17_r18
	Mem0[r19 + 4<i32>:word32] = r7
	Mem0[r19 + 12<i32>:word32] = r6
	call fn000097B0 (retsize: 0;)
	r16 = r0
	r17 = 0x437E0000<32>
	call fmaxf.1.0 (retsize: 0;)
	r0 = r20 - r16
	r1 = r17
	r19 = r0
	call fn00009610 (retsize: 0;)
	r1_r0 = r19_r17
	r20 = r0
	call fn00009610 (retsize: 0;)
	r16 = r0
	r2 = 0xD916872B<32>
	r4 = r18 - r16
	r3 = 0x3FEFF7CE<32>
	r4 = r4 * r16
	call fn000097D0 (retsize: 0;)
	r1_r0 = CONVERT(r4, real32, real64)
	r3 = 0x437F0000<32>
	p0 = r24 > r18
	r2 = truncf(CONVERT(r1_r0, real64, int32))
	r2 = 0<32> - r2
	r19 = 1<32>
	r25 = 0x100<32>
	r2 = CONVERT(r2, int32, real32)
	r18 = r20 * r2
	r17 = r18
	branch p0 l00017688
	// succ:  l00017648 l00017688
l00017648:
	r17 = r17 + r20 * r3
	r2 = Mem0[r22:word32]
	r2 = r2 - r18
	call fn00009620 (retsize: 0;)
	r0 = r16 * r2
	r2 = 0<32>
	r3 = truncf(CONVERT(r0, uint32, real32))
	r2 = r3 + 0<32>
	branch p0 l00017670
	// succ:  l00017668 l00017670
l00017668:
	p0 = r3 > -1<i32>
	r2 = 0xFF<32>
	p0 = r25 > r3
	// succ:  l00017670
l00017670:
	Mem0[r23:byte] = r2
	r23 = r23 + 1<i32>
	r19 = r19 + 1<32>
	r22 = r22 + 4<32>
	r3 = CONVERT(r19, int32, real32)
	branch p0 l00017648
	// succ:  l00017688 l00017648
l00017688:
	p0 = r24 > r3
	r3 = Mem0[r29 + 12<i32>:word64]
	r4 = Mem0[r29 + 8<i32>:word64]
	r0 = 0<32>
	Mem0[r4 + 12<i32>:word32] = 0xFFFFFF81<32>
	Mem0[r4 + 4<i32>:word32] = 1<32>
	Mem0[r4 + 8<i32>:word32] = 1<32>
	Mem0[r3 + 8<i32>:word32] = 1<32>
	Mem0[r4:word32] = 1<32>
	Mem0[r3 + 12<i32>:word32] = 1<32>
	Mem0[r3:word32] = 1<32>
	Mem0[r3 + 4<i32>:word32] = 0xFFFFFF81<32>
	r2 = Mem0[r4 + 16<i32>:word32]
	Mem0[r2:word32] = r18
	r7 = Mem0[r3 + 16<i32>:word32]
	Mem0[r4 + 24<i32>:word32] = 4<32>
	Mem0[r7:word32] = r17
	Mem0[r3 + 24<i32>:word32] = 4<32>
	// succ:  l000176BC
l000176BC:
	r19_r18 = Mem0[r29 + 48<i32>:word64]
	r17_r16 = Mem0[r29 + 56<i32>:word64]
	r23_r22 = Mem0[r29 + 32<i32>:word64]
	r21_r20 = Mem0[r29 + 40<i32>:word64]
	r27_r26 = Mem0[r29 + 16<i32>:word64]
	r25_r24 = Mem0[r29 + 24<i32>:word64]
	v42 = r30
	r31 = Mem0[v42 + 4<i32>:word32]
	r30 = Mem0[v42:word32]
	r29 = v42 + 8<i32>
	return
	// succ:  quantize_execute_exit
quantize_execute_exit:


// quantize_check
// Return size: 0
define quantize_check
quantize_check_entry:
	r29 = fp
	// succ:  l000176D0
l000176D0:
	// succ:  l000176D0_thunk_quantize_check__merged
l000176D0_thunk_quantize_check__merged:
	call quantize_check__merged (retsize: 0;)
	return
	// succ:  quantize_check_exit
quantize_check_exit:


// quantize_check__merged
// Return size: 0
define quantize_check__merged
quantize_check__merged_entry:
	r29 = fp
	// succ:  l000176D4
l000176D4:
	v4 = r29 - 8<i32>
	Mem0[v4:word32] = r30
	Mem0[v4 + 4<i32>:word32] = r31
	r30 = v4
	r29 = v4 - 24<i32>
	Mem0[r29 - 16<i32>:word64] = r17_r16
	r17_r16 = r0_r1
	p0 = r2 == 1<32>
	r1 = 0xA7<32>
	branch p0 l00017700
	// succ:  l000176E8 l00017700
l000176E8:
	Mem0[r29 + 2<i32>:byte] = r0
	r0 = p0
	r4 = 0x00027CD7<p32>
	r1 = 0x9E<32>
	// succ:  l00017700
l00017700:
	r0 = p0
	r4 = 0x00027C69<p32>
	Mem0[r29 + 8<i32>:word32] = r0
	Mem0[r29:word32] = r17
	r2 = r16
	call logmsg_function (retsize: 0;)
	r0 = Mem0[r29 + 8<i32>:word32]
	branch r2 == 3<32> l00017754
	// succ:  l0001772C l00017754
l0001772C:
	r2 = Mem0[r17 + 16<i32>:word32]
	p1 = r0
	r1 = 0x9F<32>
	branch p1 l00017748
	// succ:  l00017738 l00017748
l00017738:
	r3 = 0x00017749<p32>
	r1 = 0xA8<32>
	r3 = 0x00027C85<p32>
	// succ:  l00017744
l00017744:
	r2 = r16
	call errlog_function (retsize: 0;)
	goto l0001774C
	// succ:  l0001774C
l00017748:
	r2 = r16
	// succ:  l0001774C
l0001774C:
	v18 = r30
	r31 = Mem0[v18 + 4<i32>:word32]
	r30 = Mem0[v18:word32]
	r29 = v18 + 8<i32>
	return
	// succ:  quantize_check__merged_exit
l00017754:
	r2 = Mem0[r17 + 20<i32>:word32]
	branch p1 l00017794
	// succ:  l0001775C l00017794
l0001775C:
	r1 = 0xA0<32>
	branch p0 l00017780
	// succ:  l00017764 l00017780
l00017764:
	p0 = r2 == 3<32>
	branch p1 l00017744
	// succ:  l00017770 l00017744
l00017770:
	r3 = 0x00027C94<p32>
	r1 = 0xA9<32>
	goto l00017744
	// succ:  l00017744
l00017780:
	r1 = 0xA1<32>
	branch p1 l00017798
	// succ:  l00017788 l00017798
l00017788:
	goto l000177A4
	// succ:  l000177A4
l00017794:
	branch p0 l00017770
	// succ:  l00017798 l00017770
l00017798:
	p0 = r2 == 1<32>
	r1 = 0xAA<32>
	r4 = 0x00027CA4<p32>
	// succ:  l000177A4
l000177A4:
	Mem0[r29:word32] = r17
	r2 = r16
	call logmsg_function (retsize: 0;)
	r0 = 0<32>
	v19 = r30
	r31 = Mem0[v19 + 4<i32>:word32]
	r30 = Mem0[v19:word32]
	r29 = v19 + 8<i32>
	return
	// succ:  quantize_check__merged_exit
quantize_check__merged_exit:


// dequantize_execute
// Return size: 0
define dequantize_execute
dequantize_execute_entry:
	r29 = fp
	// succ:  l000177B4
l000177B4:
	v4 = r29 - 8<i32>
	Mem0[v4:word32] = r30
	Mem0[v4 + 4<i32>:word32] = r31
	r30 = v4
	r29 = v4 - 56<i32>
	Mem0[r29 - 24<i32>:word64] = r19_r18
	r18 = r0
	Mem0[r29 + 48<i32>:word64] = r17_r16
	r7 = Mem0[r18 + 4<i32>:word32]
	r17 = r1
	r6 = Mem0[r18 + 8<i32>:word32]
	Mem0[r29 + 32<i32>:word64] = r21_r20
	Mem0[r29 + 24<i32>:word64] = r23_r22
	r5 = Mem0[r7 + 4<i32>:word32]
	r4 = Mem0[r7 + 8<i32>:word32]
	Mem0[r29 + 8<i32>:word64] = r27_r26
	Mem0[r29 + 16<i32>:word64] = r25_r24
	r3 = Mem0[r4 + 16<i32>:word32]
	r2 = Mem0[r5 + 16<i32>:word32]
	r23 = Mem0[r6:word32]
	r22 = Mem0[r7:word32]
	r2 = Mem0[r3:word32]
	r19 = Mem0[r2:word32]
	call fmaxf.1.0 (retsize: 0;)
	r0 = r2 - r19
	r1 = 0x437F0000<32>
	call fn00009610 (retsize: 0;)
	r3 = Mem0[r22 + 4<i32>:word32]
	r2 = Mem0[r22:word32]
	r5 = 0x40800000<32>
	r7 = Mem0[r22 + 12<i32>:word32]
	r6 = Mem0[r22 + 8<i32>:word32]
	r4 = 0x00027CBA<p32>
	r16 = r0
	r1 = 0x75<32>
	r26 = CONVERT(r3, uint32, real32)
	r27 = CONVERT(r2, uint32, real32)
	r20 = Mem0[r23 + 16<i32>:word32]
	r2 = r17
	r24 = CONVERT(r7, uint32, real32)
	r25 = CONVERT(r6, uint32, real32)
	Mem0[r29:word32] = r18
	r22 = Mem0[r22 + 16<i32>:word32]
	r3 = r27 * r26
	r3 = r3 * r25
	r21 = r3 * r24
	r3 = r21 * r5
	call logmsg_function (retsize: 0;)
	r18 = truncf(CONVERT(r3, uint32, real32))
	branch r18 >u r2 l00017874
	// succ:  l0001785C l00017874
l0001785C:
	r2 = Mem0[r23 + 20<i32>:word32]
	r0 = 0<32>
	r3 = CONVERT(r27, real32, uint32)
	r2 = r17
	r1 = 0x76<32>
	r3 = 0x0001785F<p32>
	call errlog_function (retsize: 0;)
	r0 = 0xFFFFFFFF<32>
	goto l000178C8
	// succ:  l000178C8
l00017874:
	r2 = 0<32>
	r5 = CONVERT(r25, real32, uint32)
	r4 = CONVERT(r26, real32, uint32)
	Mem0[r23 + 4<i32>:word32] = r4
	Mem0[r23 + 24<i32>:word32] = r18
	r2 = 1<32>
	p0 = r21 > r2
	Mem0[r23 + 8<i32>:word32] = r5
	Mem0[r23:word32] = r3
	r3 = CONVERT(r24, real32, uint32)
	Mem0[r23 + 12<i32>:word32] = r3
	branch p0 l000178C8
	// succ:  l000178A0 l000178C8
l000178A0:
	r22 = r22 + 1<i32>
	r3 = Mem0[r22:byte]
	r2 = r2 + 1<32>
	r5 = r19
	r4 = CONVERT(r2, int32, real32)
	p0 = r21 > r4
	r3 = CONVERT(r3, int32, real32)
	r20 = r20 + 4<32>
	branch p0 l000178A0
	goto l000178CC
	// succ:  l000178CC l000178A0
l000178C8:
	r19_r18 = Mem0[r29 + 40<i32>:word64]
	r17_r16 = Mem0[r29 + 48<i32>:word64]
	// succ:  l000178CC
l000178CC:
	r5 = r5 + r16 * r3
	r23_r22 = Mem0[r29 + 24<i32>:word64]
	r21_r20 = Mem0[r29 + 32<i32>:word64]
	r27_r26 = Mem0[r29 + 8<i32>:word64]
	r25_r24 = Mem0[r29 + 16<i32>:word64]
	v35 = r30
	r31 = Mem0[v35 + 4<i32>:word32]
	r30 = Mem0[v35:word32]
	r29 = v35 + 8<i32>
	return
	// succ:  dequantize_execute_exit
dequantize_execute_exit:


// dequantize_check
// Return size: 0
define dequantize_check
dequantize_check_entry:
	r29 = fp
	// succ:  l000178DC
l000178DC:
	// succ:  l000178DC_thunk_quantize_check__merged
l000178DC_thunk_quantize_check__merged:
	call quantize_check__merged (retsize: 0;)
	return
	// succ:  dequantize_check_exit
dequantize_check_exit:


// dequantize_i32_execute
// Return size: 0
define dequantize_i32_execute
dequantize_i32_execute_entry:
	r29 = fp
	// succ:  l000178E0
l000178E0:
	v4 = r29 - 8<i32>
	Mem0[v4:word32] = r30
	Mem0[v4 + 4<i32>:word32] = r31
	r30 = v4
	r29 = v4 - 48<i32>
	r6 = Mem0[r0 + 8<i32>:word32]
	r7 = Mem0[r0 + 4<i32>:word32]
	Mem0[r29 + 32<i32>:word64] = r19_r18
	Mem0[r29 + 40<i32>:word64] = r17_r16
	r16 = r1
	r5 = Mem0[r7 + 4<i32>:word32]
	r4 = Mem0[r7 + 8<i32>:word32]
	Mem0[r29 + 16<i32>:word64] = r23_r22
	Mem0[r29 + 24<i32>:word64] = r21_r20
	r3 = Mem0[r4 + 16<i32>:word32]
	r2 = Mem0[r5 + 16<i32>:word32]
	Mem0[r29:word64] = r27_r26
	Mem0[r29 + 8<i32>:word64] = r25_r24
	r3 = Mem0[r3:word32]
	r2 = Mem0[r2:word32]
	r20 = Mem0[r6:word32]
	r18 = Mem0[r7:word32]
	call fmaxf.1.0 (retsize: 0;)
	r0 = r3 - r2
	r3 = Mem0[r18 + 4<i32>:word32]
	r2 = Mem0[r18:word32]
	r5 = 0x40800000<32>
	r6 = Mem0[r18 + 12<i32>:word32]
	r4 = Mem0[r18 + 8<i32>:word32]
	r7 = 0x2F800000<32>
	r1 = 0x91<32>
	r23 = CONVERT(r2, uint32, real32)
	r21 = r0 * r7
	r18 = Mem0[r18 + 16<i32>:word32]
	r2 = r16
	r25 = CONVERT(r4, uint32, real32)
	r24 = CONVERT(r3, uint32, real32)
	r19 = Mem0[r20 + 16<i32>:word32]
	r3 = r23 * r24
	r22 = CONVERT(r6, uint32, real32)
	r3 = r3 * r25
	r4 = 0x00027C44<p32>
	r17 = r3 * r22
	r3 = r17 * r5
	call logmsg_function (retsize: 0;)
	r26 = truncf(CONVERT(r3, uint32, real32))
	branch r26 >u r2 l00017998
	// succ:  l00017980 l00017998
l00017980:
	r2 = Mem0[r20 + 20<i32>:word32]
	r0 = 0<32>
	r3 = CONVERT(r23, real32, uint32)
	r2 = r16
	r1 = 0x92<32>
	r3 = 0x0001799F<p32>
	call errlog_function (retsize: 0;)
	r0 = 0xFFFFFFFF<32>
	goto l000179EC
	// succ:  l000179EC
l00017998:
	r2 = 0<32>
	r5 = CONVERT(r25, real32, uint32)
	r4 = CONVERT(r24, real32, uint32)
	Mem0[r20 + 4<i32>:word32] = r4
	Mem0[r20 + 24<i32>:word32] = r26
	r2 = 1<32>
	p0 = r17 > r2
	Mem0[r20 + 8<i32>:word32] = r5
	Mem0[r20:word32] = r3
	r3 = CONVERT(r22, real32, uint32)
	Mem0[r20 + 12<i32>:word32] = r3
	branch p0 l000179EC
	// succ:  l000179C8 l000179EC
l000179C8:
	r18 = r18 + 4<i32>
	r3 = Mem0[r18:word32]
	r2 = r2 + 1<32>
	r4 = CONVERT(r2, int32, real32)
	p0 = r17 > r4
	r3 = CONVERT(r3, int32, real32)
	Mem0[r19:byte] = r3
	r19 = r19 + 4<32>
	branch p0 l000179C8
	goto l000179F0
	// succ:  l000179F0 l000179C8
l000179EC:
	r19_r18 = Mem0[r29 + 32<i32>:word64]
	r17_r16 = Mem0[r29 + 40<i32>:word64]
	// succ:  l000179F0
l000179F0:
	r3 = r21 * r3
	r23_r22 = Mem0[r29 + 16<i32>:word64]
	r21_r20 = Mem0[r29 + 24<i32>:word64]
	r27_r26 = Mem0[r29:word64]
	r25_r24 = Mem0[r29 + 8<i32>:word64]
	v34 = r30
	r31 = Mem0[v34 + 4<i32>:word32]
	r30 = Mem0[v34:word32]
	r29 = v34 + 8<i32>
	return
	// succ:  dequantize_i32_execute_exit
dequantize_i32_execute_exit:


// logmsg_function
// Return size: 0
define logmsg_function
logmsg_function_entry:
	r29 = fp
	// succ:  l00017A00
l00017A00:
	v4 = r29 - 8<i32>
	Mem0[v4:word32] = r30
	Mem0[v4 + 4<i32>:word32] = r31
	r30 = v4
	r29 = v4 - 8<i32>
	r3 = 2<32>
	branch r3 >u r5 l00017A24
	// succ:  l00017A10 l00017A24
l00017A10:
	r5 = Mem0[r2 + 16<i32>:word32]
	r5 = r29 + 0x10<32>
	r3 = 2<32>
	r0 = 0x00017A2A<p32>
	Mem0[r29 + 1<i32>:byte] = r6
	r6 = r29 + 0x10<32>
	call logv (retsize: 0;)
	// succ:  l00017A18_thunk_errlog_function
l00017A18_thunk_errlog_function:
	call errlog_function (retsize: 0;)
	return
	// succ:  logmsg_function_exit
l00017A24:
	v13 = r30
	r31 = Mem0[v13 + 4<i32>:word32]
	r30 = Mem0[v13:word32]
	r29 = v13 + 8<i32>
	return
	// succ:  logmsg_function_exit
logmsg_function_exit:


// errlog_function
// Return size: 0
define errlog_function
errlog_function_entry:
	r29 = fp
	// succ:  l00017A28
l00017A28:
	v4 = r29 - 8<i32>
	Mem0[v4:word32] = r30
	Mem0[v4 + 4<i32>:word32] = r31
	r30 = v4
	r29 = v4 - 8<i32>
	r4 = r3
	r0 = 0x00027C26<p32>
	Mem0[r29 + 1<i32>:byte] = r6
	r6 = r29 + 0x10<32>
	r5 = r29 + 0x10<32>
	r3 = 0<32>
	v13 = r30
	r31 = Mem0[v13 + 4<i32>:word32]
	r30 = Mem0[v13:word32]
	r29 = v13 + 8<i32>
	return
	// succ:  errlog_function_exit
errlog_function_exit:


// fmaxf.1.0
// Return size: 0
define fmaxf.1.0
fmaxf.1.0_entry:
	r29 = fp
	// succ:  l00017A4C
l00017A4C:
	r2 = 0x38D1B717<32>
	r1_r0 = r0_r2
	// succ:  l00017A54_thunk_fn00009600
l00017A54_thunk_fn00009600:
	call fn00009600 (retsize: 0;)
	return
	// succ:  fmaxf.1.0_exit
fmaxf.1.0_exit:


// relu_execute
// Return size: 0
define relu_execute
relu_execute_entry:
	r29 = fp
	// succ:  l00017A60
l00017A60:
	v4 = r29 - 8<i32>
	Mem0[v4:word32] = r30
	Mem0[v4 + 4<i32>:word32] = r31
	r30 = v4
	r29 = v4 - 72<i32>
	Mem0[r29 - 16<i32>:word64] = r17_r16
	r4 = 0x00027D9E<p32>
	r17_r16 = r1_r0
	Mem0[r29 + 40<i32>:word64] = r23_r22
	r2 = Mem0[r16 + 4<i32>:word32]
	r1 = 0x50<32>
	r3 = Mem0[r16 + 8<i32>:word32]
	Mem0[r29 + 32<i32>:word64] = r25_r24
	Mem0[r29 + 48<i32>:word64] = r21_r20
	r25 = Mem0[r3:word32]
	r22 = Mem0[r2:word32]
	r3 = Mem0[r3 + 4<i32>:word32]
	r21 = Mem0[r3 + 8<i32>:word32]
	r6 = Mem0[r22 + 4<i32>:word32]
	r5 = Mem0[r22:word32]
	Mem0[r29 + 56<i32>:word64] = r19_r18
	r19 = Mem0[r2 + 4<i32>:word32]
	r20 = Mem0[r2 + 8<i32>:word32]
	Mem0[r29 + 20<i32>:word32] = r3
	r7 = Mem0[r22 + 8<i32>:word32]
	r2 = r17
	r3 = r6 * r5
	r9 = Mem0[r20 + 16<i32>:word32]
	r8 = Mem0[r22 + 12<i32>:word32]
	r3 = r3 * r7
	Mem0[r29 + 24<i32>:word64] = r27_r26
	r12 = Mem0[r19 + 16<i32>:word32]
	r24 = Mem0[r25 + 16<i32>:word32]
	r23 = Mem0[r22 + 16<i32>:word32]
	r18 = Mem0[r9:word32]
	r27 = Mem0[r12:word32]
	Mem0[r29:word32] = r16
	call logmsg_function (retsize: 0;)
	r26 = r3 * r8
	r3 = Mem0[r19 + 16<i32>:word32]
	r2 = Mem0[r20 + 16<i32>:word32]
	r4 = 0x00027DFC<p32>
	r3 = Mem0[r3:word32]
	r2 = Mem0[r2:word32]
	r1 = 0x53<32>
	r2 = r17
	r9_r8 = CONVERT(r3, real32, real64)
	r7_r6 = CONVERT(r2, real32, real64)
	Mem0[r29:word64] = r9_r8
	Mem0[r29 + 8<i32>:word64] = r7_r6
	call logmsg_function (retsize: 0;)
	r0 = 0x38D1B717<32>
	call fn00009600 (retsize: 0;)
	r1 = r18 - r27
	r2 = 0x437F0000<32>
	r1_r0 = r0_r2
	call fn00009610 (retsize: 0;)
	r2 = 0<32>
	r2 = r2 - r27
	call fn00009620 (retsize: 0;)
	r0 = r2 * r0
	branch r26 >u r3 l00017B64
	// succ:  l00017B4C l00017B64
l00017B4C:
	r3 = Mem0[r25 + 20<i32>:word32]
	p0 = r26 == 0<32>
	r2 = truncf(CONVERT(r0, uint32, real32))
	r2 = r17
	r1 = 0x57<32>
	r3 = 0x00017B79<p32>
	call errlog_function (retsize: 0;)
	r0 = 0xFFFFFFFF<32>
	goto l00017C48
	// succ:  l00017C48
l00017B64:
	r4 = Mem0[r22 + 4<i32>:word32]
	r3 = Mem0[r22:word32]
	Mem0[r25:word32] = r3
	Mem0[r25 + 4<i32>:word32] = r4
	r6 = Mem0[r22 + 8<i32>:word32]
	Mem0[r25 + 8<i32>:word32] = r6
	r7 = Mem0[r22 + 12<i32>:word32]
	Mem0[r25 + 24<i32>:word32] = r26
	Mem0[r25 + 12<i32>:word32] = r7
	branch p0 l00017BB4
	// succ:  l00017B88 l00017BB4
l00017B88:
	r2 = 0xFFFFFFFF<32>
	p1 = r2 > 0xFFFFFFFF<32>
	p0 = r2 > 0xFF<32>
	__loop(0<i32>, 0x00017BA0<p32>, r26)
	r2 = 0<32>
	r4 = r2 & 0xFF<32>
	r23 = r23 + 1<i32>
	r3 = Mem0[r23:byte]
	r3 = r2 + 0<32>
	p0 = r3 >u r4
	Mem0[r24:byte] = r3
	r24 = r24 + 1<i32>
	// succ:  l00017BB4
l00017BB4:
	r18 = Mem0[r29 + 20<i32>:word32]
	r2 = r19 + 0x10<32>
	r1_r0 = r19_r18
	call relu_execute.extracted_region (retsize: 0;)
	r3 = Mem0[r20 + 4<i32>:word32]
	r2 = Mem0[r20:word32]
	Mem0[r21:word32] = r2
	Mem0[r21 + 4<i32>:word32] = r3
	r2 = Mem0[r20 + 8<i32>:word32]
	Mem0[r21 + 8<i32>:word32] = r2
	r7 = Mem0[r20 + 12<i32>:word32]
	Mem0[r21 + 12<i32>:word32] = r7
	r2 = Mem0[r20 + 24<i32>:word32]
	branch r2 >u r6 l00017BF0
	// succ:  l00017BEC l00017BF0
l00017BEC:
	r6 = Mem0[r21 + 20<i32>:word32]
	r19 = r21 + 0x10<32>
	// succ:  l00017BF0
l00017BF0:
	Mem0[r21 + 24<i32>:word32] = r2
	r0 = Mem0[r21 + 16<i32>:word32]
	r19 = r21 + 0x10<32>
	r1 = Mem0[r20 + 16<i32>:word32]
	r2 = Mem0[r20 + 24<i32>:word32]
	call fn00009560 (retsize: 0;)
	r3 = Mem0[r18 + 16<i32>:word32]
	r2 = Mem0[r19:word32]
	r4 = 0x00027E13<p32>
	r3 = Mem0[r3:word32]
	r2 = Mem0[r2:word32]
	r1 = 0x64<32>
	r2 = r17
	r9_r8 = CONVERT(r3, real32, real64)
	r7_r6 = CONVERT(r2, real32, real64)
	Mem0[r29:word64] = r9_r8
	Mem0[r29 + 8<i32>:word64] = r7_r6
	call logmsg_function (retsize: 0;)
	r2 = r17
	r1 = 0x65<32>
	r4 = 0x00027DC3<p32>
	Mem0[r29:word32] = r16
	call logmsg_function (retsize: 0;)
	r0 = 0<32>
	// succ:  l00017C48
l00017C48:
	r19_r18 = Mem0[r29 + 56<i32>:word64]
	r17_r16 = Mem0[r29 + 64<i32>:word64]
	r23_r22 = Mem0[r29 + 40<i32>:word64]
	r21_r20 = Mem0[r29 + 48<i32>:word64]
	r27_r26 = Mem0[r29 + 24<i32>:word64]
	r25_r24 = Mem0[r29 + 32<i32>:word64]
	v43 = r30
	r31 = Mem0[v43 + 4<i32>:word32]
	r30 = Mem0[v43:word32]
	r29 = v43 + 8<i32>
	return
	// succ:  relu_execute_exit
relu_execute_exit:


// relu_check
// Return size: 0
define relu_check
relu_check_entry:
	r29 = fp
	// succ:  l00017C60
l00017C60:
	v4 = r29 - 8<i32>
	Mem0[v4:word32] = r30
	Mem0[v4 + 4<i32>:word32] = r31
	r30 = v4
	r29 = v4 - 16<i32>
	Mem0[r29 - 16<i32>:word64] = r17_r16
	r4 = 0x00027DD0<p32>
	r17 = r0
	r16 = r1
	r1 = 0x98<32>
	Mem0[r29:word32] = r17
	r2 = r16
	call logmsg_function (retsize: 0;)
	r1 = 0x99<32>
	r3 = 0x00027D51<p32>
	branch r2 == 3<32> l00017CE8
	// succ:  l00017C94 l00017CE8
l00017C94:
	r2 = Mem0[r17 + 16<i32>:word32]
	r1 = 0x9A<32>
	r3 = 0x00017CA4<p32>
	branch r2 == 3<32> l00017CE8
	// succ:  l00017CA8 l00017CE8
l00017CA8:
	r2 = Mem0[r17 + 20<i32>:word32]
	r4 = Mem0[r17 + 4<i32>:word32]
	r5 = 0<32>
	// succ:  l00017CAC
l00017CAC:
	branch r5 > 2<32> l00017CF8
	// succ:  l00017CBC l00017CF8
l00017CBC:
	r5 = r5 + 1<32>
	r2 = r2 + 4<32>
	branch r6 == 0<32> l00017CD4
	// succ:  l00017CCC l00017CD4
l00017CCC:
	r4 = r4 + 4<i32>
	r6 = Mem0[r4:word32]
	r3 = 0x00017CF4<p32>
	r1 = 0x9C<32>
	r6 = Mem0[r17 + 8<i32>:word32]
	r3 = 0x00027D7B<p32>
	goto l00017CDC
	// succ:  l00017CDC
l00017CD4:
	r6 = Mem0[r17 + 8<i32>:word32]
	r3 = 0x00017CFF<p32>
	// succ:  l00017CDC
l00017CDC:
	branch r6 == 0<32> l00017CAC
	// succ:  l00017CE8 l00017CAC
l00017CE8:
	r2 = r16
	call errlog_function (retsize: 0;)
	v18 = r30
	r31 = Mem0[v18 + 4<i32>:word32]
	r30 = Mem0[v18:word32]
	r29 = v18 + 8<i32>
	return
	// succ:  relu_check_exit
l00017CF8:
	r2 = r16
	r1 = 0x9F<32>
	r4 = 0x00027DE6<p32>
	Mem0[r29:word32] = r17
	call logmsg_function (retsize: 0;)
	r0 = 0<32>
	v19 = r30
	r31 = Mem0[v19 + 4<i32>:word32]
	r30 = Mem0[v19:word32]
	r29 = v19 + 8<i32>
	return
	// succ:  relu_check_exit
relu_check_exit:


// reluX_execute
// Return size: 0
define reluX_execute
reluX_execute_entry:
	r29 = fp
	// succ:  l00017D20
l00017D20:
	v4 = r29 - 8<i32>
	Mem0[v4:word32] = r30
	Mem0[v4 + 4<i32>:word32] = r31
	r30 = v4
	r29 = v4 - 64<i32>
	Mem0[r29 - 16<i32>:word64] = r17_r16
	r4 = 0x00027D9E<p32>
	r16 = r0
	Mem0[r29 + 24<i32>:word64] = r25_r24
	r3 = Mem0[r16 + 4<i32>:word32]
	Mem0[r29 + 48<i32>:word64] = r19_r18
	r5 = Mem0[r16 + 8<i32>:word32]
	r1 = 0x81<32>
	r18 = r1
	Mem0[r29 + 16<i32>:word64] = r27_r26
	r25 = Mem0[r3:word32]
	r2 = r18
	r19 = Mem0[r3 + 4<i32>:word32]
	r6 = Mem0[r3 + 12<i32>:word32]
	r0 = Mem0[r25:word32]
	r17 = Mem0[r3 + 8<i32>:word32]
	r8 = Mem0[r25 + 8<i32>:word32]
	r7 = Mem0[r25 + 4<i32>:word32]
	r9 = Mem0[r25 + 12<i32>:word32]
	r26 = Mem0[r5:word32]
	r3 = r7 * r0
	r6 = Mem0[r6 + 16<i32>:word32]
	r12 = Mem0[r17 + 16<i32>:word32]
	r3 = r3 * r8
	r13 = Mem0[r19 + 16<i32>:word32]
	Mem0[r29 + 32<i32>:word64] = r23_r22
	Mem0[r29 + 40<i32>:word64] = r21_r20
	r5 = Mem0[r5 + 4<i32>:word32]
	r14 = Mem0[r5 + 8<i32>:word32]
	Mem0[r29 + 12<i32>:word32] = r14
	Mem0[r29 + 8<i32>:word32] = r5
	r23 = Mem0[r25 + 16<i32>:word32]
	r27 = r3 * r9
	r20 = Mem0[r13:word32]
	r24 = Mem0[r26 + 16<i32>:word32]
	r21 = Mem0[r6:word32]
	r22 = Mem0[r12:word32]
	Mem0[r29:word32] = r16
	call logmsg_function (retsize: 0;)
	r0 = 0x38D1B717<32>
	call fn00009600 (retsize: 0;)
	r1 = r22 - r20
	r2 = 0x437F0000<32>
	r1_r0 = r0_r2
	call fn00009610 (retsize: 0;)
	r22 = r0
	r2 = 0<32>
	r2 = r2 - r20
	call fn00009620 (retsize: 0;)
	r0 = r2 * r22
	r2 = r21 - r20
	r20 = truncf(CONVERT(r0, uint32, real32))
	call fn00009620 (retsize: 0;)
	r0 = r2 * r22
	branch r27 >u r3 l00017E20
	// succ:  l00017E08 l00017E20
l00017E08:
	r3 = Mem0[r26 + 20<i32>:word32]
	p0 = r27 == 0<32>
	r2 = truncf(CONVERT(r0, uint32, real32))
	r2 = r18
	r1 = 0x86<32>
	r3 = 0x00017E39<p32>
	call errlog_function (retsize: 0;)
	r0 = 0xFFFFFFFF<32>
	goto l00017ED8
	// succ:  l00017ED8
l00017E20:
	r4 = Mem0[r25 + 4<i32>:word32]
	r3 = Mem0[r25:word32]
	Mem0[r26:word32] = r3
	Mem0[r26 + 4<i32>:word32] = r4
	r4 = 0<32>
	r6 = Mem0[r25 + 8<i32>:word32]
	Mem0[r26 + 8<i32>:word32] = r6
	r0 = Mem0[r29 + 8<i32>:word32]
	r7 = Mem0[r25 + 12<i32>:word32]
	r21 = Mem0[r29 + 12<i32>:word32]
	Mem0[r26 + 24<i32>:word32] = r27
	Mem0[r26 + 12<i32>:word32] = r7
	branch p0 l00017EA0
	// succ:  l00017E54 l00017EA0
l00017E54:
	p0 = r2 > 0xFFFFFFFF<32>
	p1 = r20 > 0xFFFFFFFF<32>
	p3 = r2 > 0xFF<32>
	p2 = r20 > 0xFF<32>
	r2 = 0xFFFFFFFF<32>
	r20 = 0xFFFFFFFF<32>
	__loop(0<i32>, 0x00017E7C<p32>, r27)
	r3 = p1 ? r20 : r4
	r2 = r4 + 0<32>
	r6 = r2 & 0xFF<32>
	r23 = r23 + 1<i32>
	r4 = Mem0[r23:byte]
	r5 = r3 & 0xFF<32>
	r4 = r3 + 0<32>
	p0 = r4 >u r5
	r7 = r4 & 0xFF<32>
	r4 = r2 + 0<32>
	p0 = r6 >u r7
	Mem0[r24:byte] = r4
	r24 = r24 + 1<i32>
	// succ:  l00017EA0
l00017EA0:
	r19 = r17 + 0x10<32>
	r1 = r19
	r2 = r19 + 0x10<32>
	call relu_execute.extracted_region (retsize: 0;)
	r1_r0 = r17_r21
	r2 = r19
	call relu_execute.extracted_region (retsize: 0;)
	r2 = r18
	r1 = 0x91<32>
	r4 = 0x00027DC3<p32>
	Mem0[r29:word32] = r16
	call logmsg_function (retsize: 0;)
	r0 = 0<32>
	// succ:  l00017ED8
l00017ED8:
	r19_r18 = Mem0[r29 + 48<i32>:word64]
	r17_r16 = Mem0[r29 + 56<i32>:word64]
	r23_r22 = Mem0[r29 + 32<i32>:word64]
	r21_r20 = Mem0[r29 + 40<i32>:word64]
	r27_r26 = Mem0[r29 + 16<i32>:word64]
	r25_r24 = Mem0[r29 + 24<i32>:word64]
	v45 = r30
	r31 = Mem0[v45 + 4<i32>:word32]
	r30 = Mem0[v45:word32]
	r29 = v45 + 8<i32>
	return
	// succ:  reluX_execute_exit
reluX_execute_exit:


// reluX_check
// Return size: 0
define reluX_check
reluX_check_entry:
	r29 = fp
	// succ:  l00017EEC
l00017EEC:
	v4 = r29 - 8<i32>
	Mem0[v4:word32] = r30
	Mem0[v4 + 4<i32>:word32] = r31
	r30 = v4
	r29 = v4 - 16<i32>
	Mem0[r29 - 16<i32>:word64] = r17_r16
	r4 = 0x00027D3A<p32>
	r17 = r0
	r16 = r1
	r1 = 0xA6<32>
	Mem0[r29:word32] = r17
	r2 = r16
	call logmsg_function (retsize: 0;)
	r1 = 0xA7<32>
	r3 = 0x00027D51<p32>
	branch r2 == 4<32> l00017F8C
	// succ:  l00017F20 l00017F8C
l00017F20:
	r2 = Mem0[r17 + 16<i32>:word32]
	r1 = 0xA8<32>
	r3 = 0x00017F24<p32>
	branch r2 == 3<32> l00017F8C
	// succ:  l00017F34 l00017F8C
l00017F34:
	r2 = Mem0[r17 + 20<i32>:word32]
	goto l00017F44
	// succ:  l00017F44
l00017F38:
	branch r5 > 2<32> l00017F78
	goto l00017F48
	// succ:  l00017F48 l00017F78
l00017F44:
	branch r7 == 0<32> l00017F5C
	goto l00017F58
	// succ:  l00017F58 l00017F5C
l00017F48:
	r5 = r5 + 1<32>
	r4 = r4 + 4<32>
	branch r7 == 0<32> l00017F60
	// succ:  l00017F58 l00017F60
l00017F58:
	r6 = r6 + 4<i32>
	r7 = Mem0[r6:word32]
	r3 = 0x00027D70<p32>
	r1 = 0xAA<32>
	// succ:  l00017F5C
l00017F5C:
	r7 = Mem0[r17 + 8<i32>:word32]
	r3 = 0x00027D7B<p32>
	// succ:  l00017F60
l00017F60:
	branch r7 == 0<32> l00017F38
	// succ:  l00017F74 l00017F38
l00017F74:
	r7 = Mem0[r20 + r4:word32]
	r1 = 0xAB<32>
	// succ:  l00017F78
l00017F78:
	r1 = 0xAD<32>
	r3 = 0x00027D70<p32>
	branch r2 == 0<32> l00017F9C
	goto l00017F90
	// succ:  l00017F90 l00017F9C
l00017F8C:
	r2 = r16
	call errlog_function (retsize: 0;)
	v17 = r30
	r31 = Mem0[v17 + 4<i32>:word32]
	r30 = Mem0[v17:word32]
	r29 = v17 + 8<i32>
	return
	// succ:  reluX_check_exit
l00017F90:
	r2 = Mem0[r2 + 12<i32>:word32]
	r2 = r16
	v20 = r30
	r31 = Mem0[v20 + 4<i32>:word32]
	r30 = Mem0[v20:word32]
	r29 = v20 + 8<i32>
	return
	// succ:  reluX_check_exit
l00017F9C:
	r2 = r16
	r1 = 0xAE<32>
	r4 = 0x00027D87<p32>
	Mem0[r29:word32] = r17
	call logmsg_function (retsize: 0;)
	r0 = 0<32>
	v22 = r30
	r31 = Mem0[v22 + 4<i32>:word32]
	r30 = Mem0[v22:word32]
	r29 = v22 + 8<i32>
	return
	// succ:  reluX_check_exit
reluX_check_exit:


// logmsg_function
// Return size: 0
define logmsg_function
logmsg_function_entry:
	r29 = fp
	// succ:  l00017FBC
l00017FBC:
	v4 = r29 - 8<i32>
	Mem0[v4:word32] = r30
	Mem0[v4 + 4<i32>:word32] = r31
	r30 = v4
	r29 = v4 - 8<i32>
	r3 = 2<32>
	branch r3 >u r5 l00017FE0
	// succ:  l00017FCC l00017FE0
l00017FCC:
	r5 = Mem0[r2 + 16<i32>:word32]
	r5 = r29 + 0x10<32>
	r3 = 2<32>
	r0 = 0x00017FE4<p32>
	Mem0[r29 + 1<i32>:byte] = r6
	r6 = r29 + 0x10<32>
	call logv (retsize: 0;)
	// succ:  l00017FD4_thunk_errlog_function
l00017FD4_thunk_errlog_function:
	call errlog_function (retsize: 0;)
	return
	// succ:  logmsg_function_exit
l00017FE0:
	v13 = r30
	r31 = Mem0[v13 + 4<i32>:word32]
	r30 = Mem0[v13:word32]
	r29 = v13 + 8<i32>
	return
	// succ:  logmsg_function_exit
logmsg_function_exit:


// errlog_function
// Return size: 0
define errlog_function
errlog_function_entry:
	r29 = fp
	// succ:  l00017FE4
l00017FE4:
	v4 = r29 - 8<i32>
	Mem0[v4:word32] = r30
	Mem0[v4 + 4<i32>:word32] = r31
	r30 = v4
	r29 = v4 - 8<i32>
	r4 = r3
	r0 = 0x00027D20<p32>
	Mem0[r29 + 1<i32>:byte] = r6
	r6 = r29 + 0x10<32>
	r5 = r29 + 0x10<32>
	r3 = 0<32>
	v13 = r30
	r31 = Mem0[v13 + 4<i32>:word32]
	r30 = Mem0[v13:word32]
	r29 = v13 + 8<i32>
	return
	// succ:  errlog_function_exit
errlog_function_exit:


// relu_execute.extracted_region
// Return size: 0
define relu_execute.extracted_region
relu_execute.extracted_region_entry:
	r29 = fp
	// succ:  l00018008
l00018008:
	v4 = r29 - 8<i32>
	Mem0[v4:word32] = r30
	Mem0[v4 + 4<i32>:word32] = r31
	r30 = v4
	r29 = v4 - 0<i32>
	r4 = Mem0[r1 + 4<i32>:word32]
	r3 = Mem0[r1:word32]
	Mem0[r0:word32] = r3
	Mem0[r0 + 4<i32>:word32] = r4
	r6 = Mem0[r1 + 8<i32>:word32]
	Mem0[r0 + 8<i32>:word32] = r6
	r7 = Mem0[r1 + 12<i32>:word32]
	Mem0[r0 + 12<i32>:word32] = r7
	r3 = Mem0[r1 + 24<i32>:word32]
	branch r3 >u r4 l00018040
	// succ:  l00018034 l00018040
l00018034:
	r4 = Mem0[r0 + 20<i32>:word32]
	r1 = Mem0[r2:word32]
	r3 = Mem0[r1 + 24<i32>:word32]
	r2 = r3
	call fn00009560 (retsize: 0;)
	// succ:  l00018040
l00018040:
	v14 = r30
	r31 = Mem0[v14 + 4<i32>:word32]
	r30 = Mem0[v14:word32]
	r29 = v14 + 8<i32>
	return
	// succ:  relu_execute.extracted_region_exit
relu_execute.extracted_region_exit:


// autorequantize_execute
// Return size: 0
define autorequantize_execute
autorequantize_execute_entry:
	r29 = fp
	// succ:  l00018050
l00018050:
	v4 = r29 - 8<i32>
	Mem0[v4:word32] = r30
	Mem0[v4 + 4<i32>:word32] = r31
	r30 = v4
	r29 = v4 - 72<i32>
	r5 = 0x2F800000<32>
	Mem0[r29 + 64<i32>:word64] = r17_r16
	r17_r16 = r1_r0
	r4 = 0x00027F51<p32>
	Mem0[r29 + 40<i32>:word64] = r23_r22
	r2 = Mem0[r16 + 4<i32>:word32]
	r1 = 0x4B<32>
	Mem0[r29 + 32<i32>:word64] = r25_r24
	r3 = Mem0[r16 + 8<i32>:word32]
	Mem0[r29 + 24<i32>:word64] = r27_r26
	r22 = Mem0[r2:word32]
	r25 = Mem0[r2 + 8<i32>:word32]
	r24 = Mem0[r2 + 4<i32>:word32]
	r7 = Mem0[r22 + 4<i32>:word32]
	r23 = Mem0[r3:word32]
	r2 = Mem0[r25 + 16<i32>:word32]
	r6 = Mem0[r24 + 16<i32>:word32]
	r9 = Mem0[r22 + 8<i32>:word32]
	r8 = Mem0[r22:word32]
	r12 = Mem0[r22 + 12<i32>:word32]
	r0 = Mem0[r6:word32]
	r7 = r7 * r8
	r13 = Mem0[r2:word32]
	r2 = r17
	r6 = r7 * r9
	r26 = Mem0[r3 + 4<i32>:word32]
	r27 = Mem0[r3 + 8<i32>:word32]
	r3 = r13 - r0
	Mem0[r29 + 48<i32>:word64] = r21_r20
	Mem0[r29 + 56<i32>:word64] = r19_r18
	r19 = Mem0[r23 + 16<i32>:word32]
	r18 = Mem0[r22 + 16<i32>:word32]
	Mem0[r29:word32] = r16
	r21 = r3 * r5
	r20 = r6 * r12
	call logmsg_function (retsize: 0;)
	r3 = Mem0[r24 + 16<i32>:word32]
	r2 = Mem0[r25 + 16<i32>:word32]
	r4 = 0x00027F72<p32>
	r3 = Mem0[r3:word32]
	r2 = Mem0[r2:word32]
	r1 = 0x4E<32>
	r2 = r17
	r9_r8 = CONVERT(r3, real32, real64)
	r7_r6 = CONVERT(r2, real32, real64)
	Mem0[r29:word64] = r9_r8
	Mem0[r29 + 8<i32>:word64] = r7_r6
	call logmsg_function (retsize: 0;)
	branch r20 >u r2 l0001812C
	// succ:  l00018114 l0001812C
l00018114:
	r2 = Mem0[r23 + 20<i32>:word32]
	r2 = r17
	r1 = 0x4F<32>
	r3 = 0x00018117<p32>
	call errlog_function (retsize: 0;)
	r0 = 0xFFFFFFFF<32>
	goto l0001834C
	// succ:  l0001834C
l0001812C:
	r3 = Mem0[r22 + 4<i32>:word32]
	r2 = Mem0[r22:word32]
	p0 = r20 == 0<32>
	Mem0[r23:word32] = r2
	Mem0[r23 + 4<i32>:word32] = r3
	r0 = p0
	r6 = Mem0[r22 + 8<i32>:word32]
	r2 = 0x4F000000<32>
	Mem0[r23 + 8<i32>:word32] = r6
	r24 = 0xCF000000<32>
	r7 = Mem0[r22 + 12<i32>:word32]
	Mem0[r23 + 24<i32>:word32] = r20
	Mem0[r23 + 12<i32>:word32] = r7
	Mem0[r29 + 16<i32>:word32] = r0
	// succ:  l000181CC
l000181CC:
	r22 = 0<32>
	r1 = r21 * r2
	r0 = r22
	call fn000097B0 (retsize: 0;)
	r23 = r0
	r0 = __invert_bit<word32,word32>(r23, 0x1E<32>)
	r24 = 0x437E0000<32>
	call fmaxf.1.0 (retsize: 0;)
	r0 = r0 + r21 * r24
	r1 = r24
	r25 = r0
	call fn00009610 (retsize: 0;)
	r0 = r24
	r25 = r0
	r1 = r25
	call fn00009610 (retsize: 0;)
	r23 = r0
	r2 = 0xD916872B<32>
	r4 = r22 - r23
	r3 = 0x3FEFF7CE<32>
	r4 = r4 * r23
	call fn000097D0 (retsize: 0;)
	r1_r0 = CONVERT(r4, real32, real64)
	p0 = r20 >u 0x7F<32>
	r3 = 0x437F0000<32>
	r2 = truncf(CONVERT(r1_r0, real64, int32))
	r4 = 0x4F000000<32>
	r2 = 0<32> - r2
	r2 = CONVERT(r2, int32, real32)
	r22 = r25 * r2
	r0 = Mem0[r29 + 16<i32>:word32]
	r24 = r22
	r1_r0 = r21_r22
	r3 = 0x3F000000<32>
	branch p0 l000182A8
	// succ:  l00018274 l000182A8
l00018274:
	r24 = r24 + r25 * r3
	branch p0 l000182C8
	// succ:  l0001827C l000182C8
l0001827C:
	p0 = r0
	call fmaxf.1.0 (retsize: 0;)
	r0 = r24 - r22
	r2 = 0x437F0000<32>
	r1_r0 = r0_r2
	call fn00009610 (retsize: 0;)
	Mem0[r29:word32] = r20
	r3_r2 = 2<64>
	r1_r0 = r19_r18
	r5_r4 = r0_r22
	call autorequantize_execute.extracted_region (retsize: 0;)
	goto l000182C8
	// succ:  l000182C8
l000182A8:
	r2 = r21 * r23
	r3 = r3 + r2 * r4
	call fn00009610 (retsize: 0;)
	r21 = truncf(CONVERT(r3, uint32, real32))
	r0 = r18
	r4 = r20
	r3_r2 = r19_r21
	r1 = truncf(CONVERT(r0, uint32, real32))
	call quantize_asm (retsize: 0;)
	// succ:  l000182C8
l000182C8:
	Mem0[r26 + 12<i32>:word32] = 0xFFFFFF81<32>
	r2 = Mem0[r26 + 16<i32>:word32]
	r4 = 0x00028029<p32>
	Mem0[r26 + 4<i32>:word32] = 0xFFFFFF81<32>
	Mem0[r26 + 8<i32>:word32] = 1<32>
	r1 = 0x80<32>
	Mem0[r2:word32] = r22
	Mem0[r26:word32] = 1<32>
	Mem0[r27 + 12<i32>:word32] = 0xFFFFFF81<32>
	Mem0[r26 + 24<i32>:word32] = 4<32>
	Mem0[r27 + 4<i32>:word32] = 0xFFFFFF81<32>
	r7 = Mem0[r27 + 16<i32>:word32]
	Mem0[r27 + 8<i32>:word32] = 1<32>
	Mem0[r27:word32] = 1<32>
	Mem0[r27 + 24<i32>:word32] = 4<32>
	Mem0[r7:word32] = r24
	r3 = Mem0[r26 + 16<i32>:word32]
	r2 = Mem0[r27 + 16<i32>:word32]
	r3 = Mem0[r3:word32]
	r2 = Mem0[r2:word32]
	r2 = r17
	r9_r8 = CONVERT(r3, real32, real64)
	r7_r6 = CONVERT(r2, real32, real64)
	Mem0[r29:word64] = r9_r8
	Mem0[r29 + 8<i32>:word64] = r7_r6
	call logmsg_function (retsize: 0;)
	r2 = r17
	r1 = 0x81<32>
	r4 = 0x0002804B<p32>
	Mem0[r29:word32] = r16
	call logmsg_function (retsize: 0;)
	r0 = 0<32>
	// succ:  l0001834C
l0001834C:
	r19_r18 = Mem0[r29 + 56<i32>:word64]
	r17_r16 = Mem0[r29 + 64<i32>:word64]
	r23_r22 = Mem0[r29 + 40<i32>:word64]
	r21_r20 = Mem0[r29 + 48<i32>:word64]
	r27_r26 = Mem0[r29 + 24<i32>:word64]
	r25_r24 = Mem0[r29 + 32<i32>:word64]
	v42 = r30
	r31 = Mem0[v42 + 4<i32>:word32]
	r30 = Mem0[v42:word32]
	r29 = v42 + 8<i32>
	return
	// succ:  autorequantize_execute_exit
autorequantize_execute_exit:


// autorequantize_check
// Return size: 0
define autorequantize_check
autorequantize_check_entry:
	r29 = fp
	// succ:  l00018360
l00018360:
	v4 = r29 - 8<i32>
	Mem0[v4:word32] = r30
	Mem0[v4 + 4<i32>:word32] = r31
	r30 = v4
	r29 = v4 - 16<i32>
	Mem0[r29 - 16<i32>:word64] = r17_r16
	r4 = 0x00027FD2<p32>
	r17 = r0
	r16 = r1
	r1 = 0x107<32>
	Mem0[r29:word32] = r17
	r2 = r16
	call logmsg_function (retsize: 0;)
	r1 = 0x108<32>
	r3 = 0x00027E69<p32>
	branch r2 == 3<32> l000183E8
	// succ:  l00018394 l000183E8
l00018394:
	r2 = Mem0[r17 + 16<i32>:word32]
	r1 = 0x109<32>
	r3 = 0x000183BC<p32>
	branch r2 == 3<32> l000183E8
	// succ:  l000183A8 l000183E8
l000183A8:
	r2 = Mem0[r17 + 20<i32>:word32]
	r4 = Mem0[r17 + 4<i32>:word32]
	r5 = 0<32>
	// succ:  l000183AC
l000183AC:
	branch r5 > 2<32> l000183F8
	// succ:  l000183BC l000183F8
l000183BC:
	r5 = r5 + 1<32>
	r2 = r2 + 4<32>
	branch r6 == 0<32> l000183D4
	// succ:  l000183CC l000183D4
l000183CC:
	r4 = r4 + 4<i32>
	r6 = Mem0[r4:word32]
	r3 = 0x000183F6<p32>
	r1 = 0x10B<32>
	r6 = Mem0[r17 + 8<i32>:word32]
	r3 = 0x00027FFD<p32>
	goto l000183DC
	// succ:  l000183DC
l000183D4:
	r6 = Mem0[r17 + 8<i32>:word32]
	r3 = 0x00018401<p32>
	// succ:  l000183DC
l000183DC:
	branch r6 == 0<32> l000183AC
	// succ:  l000183E8 l000183AC
l000183E8:
	r2 = r16
	call errlog_function (retsize: 0;)
	v18 = r30
	r31 = Mem0[v18 + 4<i32>:word32]
	r30 = Mem0[v18:word32]
	r29 = v18 + 8<i32>
	return
	// succ:  autorequantize_check_exit
l000183F8:
	r2 = r16
	r1 = 0x10E<32>
	r4 = 0x00028009<p32>
	Mem0[r29:word32] = r17
	call logmsg_function (retsize: 0;)
	r0 = 0<32>
	v19 = r30
	r31 = Mem0[v19 + 4<i32>:word32]
	r30 = Mem0[v19:word32]
	r29 = v19 + 8<i32>
	return
	// succ:  autorequantize_check_exit
autorequantize_check_exit:


// requantize_execute
// Return size: 0
define requantize_execute
requantize_execute_entry:
	r29 = fp
	// succ:  l00018418
l00018418:
	v4 = r29 - 8<i32>
	Mem0[v4:word32] = r30
	Mem0[v4 + 4<i32>:word32] = r31
	r30 = v4
	r29 = v4 - 80<i32>
	r4 = 0x00027F51<p32>
	Mem0[r29 + 72<i32>:word64] = r17_r16
	r6 = 0x2F800000<32>
	r17 = r0
	Mem0[r29 + 64<i32>:word64] = r19_r18
	r2 = Mem0[r17 + 4<i32>:word32]
	r18 = r1
	Mem0[r29 + 48<i32>:word64] = r23_r22
	r1 = 0x9F<32>
	Mem0[r29 + 40<i32>:word64] = r25_r24
	r3 = Mem0[r17 + 8<i32>:word32]
	r23 = Mem0[r2 + 4<i32>:word32]
	r24 = Mem0[r2:word32]
	r5 = Mem0[r2 + 12<i32>:word32]
	r19 = Mem0[r2 + 8<i32>:word32]
	r9 = Mem0[r24 + 4<i32>:word32]
	r8 = Mem0[r23 + 16<i32>:word32]
	r12 = Mem0[r24:word32]
	r7 = Mem0[r19 + 16<i32>:word32]
	r2 = Mem0[r2 + 16<i32>:word32]
	r5 = Mem0[r5 + 16<i32>:word32]
	r9 = r9 * r12
	r7 = Mem0[r7:word32]
	r13 = Mem0[r24 + 8<i32>:word32]
	Mem0[r29 + 32<i32>:word64] = r27_r26
	r8 = Mem0[r8:word32]
	r22 = Mem0[r3 + 8<i32>:word32]
	r25 = Mem0[r3:word32]
	r3 = Mem0[r5:word32]
	r27 = Mem0[r3 + 4<i32>:word32]
	r5 = r9 * r13
	r14 = Mem0[r24 + 12<i32>:word32]
	r15 = Mem0[r2 + 16<i32>:word32]
	r2 = r18
	Mem0[r29 + 56<i32>:word64] = r21_r20
	Mem0[r29 + 24<i32>:word32] = r3
	r3 = r7 - r8
	r21 = Mem0[r24 + 16<i32>:word32]
	r0 = Mem0[r15:word32]
	r26 = r5 * r14
	r16 = Mem0[r25 + 16<i32>:word32]
	Mem0[r29:word32] = r17
	Mem0[r29 + 28<i32>:word32] = r0
	call logmsg_function (retsize: 0;)
	r20 = r3 * r6
	r3 = Mem0[r23 + 16<i32>:word32]
	r2 = Mem0[r19 + 16<i32>:word32]
	r4 = 0x00027F72<p32>
	r3 = Mem0[r3:word32]
	r2 = Mem0[r2:word32]
	r1 = 0xA2<32>
	r2 = r18
	r9_r8 = CONVERT(r3, real32, real64)
	r7_r6 = CONVERT(r2, real32, real64)
	Mem0[r29:word64] = r9_r8
	Mem0[r29 + 8<i32>:word64] = r7_r6
	call logmsg_function (retsize: 0;)
	branch r26 >u r2 l00018514
	// succ:  l000184FC l00018514
l000184FC:
	r2 = Mem0[r25 + 20<i32>:word32]
	r4 = r26
	r2 = r18
	r1 = 0xA3<32>
	r3 = 0x00018517<p32>
	call errlog_function (retsize: 0;)
	r0 = 0xFFFFFFFF<32>
	goto l000186C8
	// succ:  l000186C8
l00018514:
	r3 = Mem0[r24 + 4<i32>:word32]
	r2 = Mem0[r24:word32]
	r23 = 0<32>
	Mem0[r25:word32] = r2
	Mem0[r25 + 4<i32>:word32] = r3
	r27_r26 = r20_r27
	r19 = r22
	r0 = r23
	r1 = Mem0[r29 + 24<i32>:word32]
	r7 = Mem0[r24 + 8<i32>:word32]
	r20 = r4
	Mem0[r29 + 20<i32>:word32] = r16
	Mem0[r25 + 8<i32>:word32] = r7
	r2 = Mem0[r24 + 12<i32>:word32]
	Mem0[r29 + 16<i32>:word32] = r21
	Mem0[r25 + 24<i32>:word32] = r20
	Mem0[r25 + 12<i32>:word32] = r2
	call fn000097B0 (retsize: 0;)
	r2 = Mem0[r29 + 28<i32>:word64]
	r22 = r0
	r24 = 0x437E0000<32>
	call fmaxf.1.0 (retsize: 0;)
	r0 = r2 - r22
	r1 = r24
	r25 = r0
	call fn00009610 (retsize: 0;)
	r1_r0 = r25_r24
	r16 = r0
	call fn00009610 (retsize: 0;)
	r2 = 0xD916872B<32>
	r4 = r23 - r22
	r3 = 0x3FEFF7CE<32>
	r4 = r4 * r0
	call fn000097D0 (retsize: 0;)
	r1_r0 = CONVERT(r4, real32, real64)
	p0 = r20 >u 0x7F<32>
	r2 = truncf(CONVERT(r1_r0, real64, int32))
	r2 = 0x437F0000<32>
	r3 = 0<32> - r2
	r3 = CONVERT(r3, int32, real32)
	r22 = r16 * r3
	r23 = r22
	r16 = r27 + 0<32>
	branch p0 l0001860C
	// succ:  l000185D4 l0001860C
l000185D4:
	r23 = r23 + r16 * r2
	r16 = r18
	branch p0 l0001864C
	// succ:  l000185DC l0001864C
l000185DC:
	p0 = r12 == 0<32>
	call fmaxf.1.0 (retsize: 0;)
	r0 = r23 - r22
	r2 = 0x437F0000<32>
	r1_r0 = r0_r2
	call fn00009610 (retsize: 0;)
	r1 = Mem0[r29 + 20<i32>:word64]
	r0 = Mem0[r29 + 16<i32>:word64]
	r3_r2 = SEQ(r27, 0<32>)
	r5_r4 = r0_r22
	Mem0[r29:word32] = r20
	call autorequantize_execute.extracted_region (retsize: 0;)
	goto l0001864C
	// succ:  l0001864C
l0001860C:
	r0 = r16 * r2
	r1 = r23 - r22
	call fn00009610 (retsize: 0;)
	r3 = 0x4F000000<32>
	r2 = 0x3F000000<32>
	r1_r0 = r16_r22
	r2 = r2 + r0 * r3
	call fn00009610 (retsize: 0;)
	r21 = truncf(CONVERT(r2, uint32, real32))
	r3 = Mem0[r29 + 20<i32>:word64]
	r4 = r20
	r2 = r21
	r1 = truncf(CONVERT(r0, uint32, real32))
	r0 = Mem0[r29 + 16<i32>:word64]
	r16 = r18
	call quantize_asm (retsize: 0;)
	// succ:  l0001864C
l0001864C:
	Mem0[r26 + 12<i32>:word32] = 0xFFFFFF81<32>
	r2 = Mem0[r26 + 16<i32>:word32]
	r4 = 0x00027FA1<p32>
	Mem0[r26 + 4<i32>:word32] = 0xFFFFFF81<32>
	Mem0[r26 + 8<i32>:word32] = 1<32>
	r1 = 0xC8<32>
	Mem0[r2:word32] = r22
	Mem0[r26:word32] = 1<32>
	Mem0[r19 + 12<i32>:word32] = 0xFFFFFF81<32>
	Mem0[r26 + 24<i32>:word32] = 4<32>
	Mem0[r19 + 4<i32>:word32] = 1<32>
	r7 = Mem0[r19 + 16<i32>:word32]
	Mem0[r19 + 8<i32>:word32] = 1<32>
	Mem0[r19:word32] = 1<32>
	Mem0[r19 + 24<i32>:word32] = 4<32>
	Mem0[r7:word32] = r23
	r3 = Mem0[r26 + 16<i32>:word32]
	r2 = Mem0[r19 + 16<i32>:word32]
	r3 = Mem0[r3:word32]
	r2 = Mem0[r2:word32]
	r2 = r16
	r9_r8 = CONVERT(r3, real32, real64)
	r7_r6 = CONVERT(r2, real32, real64)
	Mem0[r29:word64] = r9_r8
	Mem0[r29 + 8<i32>:word64] = r7_r6
	call logmsg_function (retsize: 0;)
	r2 = r16
	r1 = 0xC9<32>
	r4 = 0x00027FBF<p32>
	Mem0[r29:word32] = r17
	call logmsg_function (retsize: 0;)
	r0 = 0<32>
	// succ:  l000186C8
l000186C8:
	r19_r18 = Mem0[r29 + 64<i32>:word64]
	r17_r16 = Mem0[r29 + 72<i32>:word64]
	r23_r22 = Mem0[r29 + 48<i32>:word64]
	r21_r20 = Mem0[r29 + 56<i32>:word64]
	r27_r26 = Mem0[r29 + 32<i32>:word64]
	r25_r24 = Mem0[r29 + 40<i32>:word64]
	v49 = r30
	r31 = Mem0[v49 + 4<i32>:word32]
	r30 = Mem0[v49:word32]
	r29 = v49 + 8<i32>
	return
	// succ:  requantize_execute_exit
requantize_execute_exit:


// requantize_check
// Return size: 0
define requantize_check
requantize_check_entry:
	r29 = fp
	// succ:  l000186DC
l000186DC:
	// succ:  l000186DC_thunk_requantize_check__merged
l000186DC_thunk_requantize_check__merged:
	call requantize_check__merged (retsize: 0;)
	return
	// succ:  requantize_check_exit
requantize_check_exit:


// requantize_check__merged
// Return size: 0
define requantize_check__merged
requantize_check__merged_entry:
	r29 = fp
	// succ:  l000186E0
l000186E0:
	v4 = r29 - 8<i32>
	Mem0[v4:word32] = r30
	Mem0[v4 + 4<i32>:word32] = r31
	r30 = v4
	r29 = v4 - 40<i32>
	p0 = r2 == 1<32>
	r4 = 0x00027F19<p32>
	Mem0[r29 + 24<i32>:word64] = r19_r18
	Mem0[r29 + 32<i32>:word64] = r17_r16
	r1 = 0x114<32>
	r17_r16 = r0_r1
	r1 = 0x11D<32>
	r18 = 0x00027F35<p32>
	Mem0[r29 + 8<i32>:word64] = r23_r22
	Mem0[r29 + 16<i32>:word64] = r21_r20
	branch p0 l00018720
	// succ:  l0001870C l00018720
l0001870C:
	r21 = 0x115<32>
	r20 = 0x116<32>
	r19 = 0x117<32>
	r23_r22 = 0x500000003<64>
	goto l00018740
	// succ:  l00018740
l00018720:
	r19 = 0x120<32>
	r23_r22 = 0x300000002<64>
	r4 = 0x00027E4B<p32>
	r21 = 0x11E<32>
	r20 = 0x11F<32>
	r18 = 0x00027E88<p32>
	// succ:  l00018740
l00018740:
	Mem0[r29:word32] = r17
	r2 = r16
	call logmsg_function (retsize: 0;)
	branch r2 == r23 l0001876C
	// succ:  l00018758 l0001876C
l00018758:
	r2 = Mem0[r17 + 16<i32>:word32]
	r1 = r21
	r3 = 0x0001876D<p32>
	r2 = r16
	call errlog_function (retsize: 0;)
	// succ:  l00018760
l00018760:
	r0 = 0xFFFFFFFF<32>
	goto l00018798
	// succ:  l00018798
l0001876C:
	branch r2 == r22 l00018784
	// succ:  l0001877C l00018784
l0001877C:
	r2 = Mem0[r17 + 20<i32>:word32]
	r1 = r20
	goto l00018760
	// succ:  l00018760
l00018784:
	Mem0[r29:word32] = r17
	r4 = r18
	r1 = r19
	r2 = r16
	call logmsg_function (retsize: 0;)
	r0 = 0<32>
	// succ:  l00018798
l00018798:
	r19_r18 = Mem0[r29 + 24<i32>:word64]
	r17_r16 = Mem0[r29 + 32<i32>:word64]
	r23_r22 = Mem0[r29 + 8<i32>:word64]
	r21_r20 = Mem0[r29 + 16<i32>:word64]
	v25 = r30
	r31 = Mem0[v25 + 4<i32>:word32]
	r30 = Mem0[v25:word32]
	r29 = v25 + 8<i32>
	return
	// succ:  requantize_check__merged_exit
requantize_check__merged_exit:


// requantrange_execute
// Return size: 0
define requantrange_execute
requantrange_execute_entry:
	r29 = fp
	// succ:  l000187A4
l000187A4:
	v4 = r29 - 8<i32>
	Mem0[v4:word32] = r30
	Mem0[v4 + 4<i32>:word32] = r31
	r30 = v4
	r29 = v4 - 56<i32>
	r6 = 0x2F800000<32>
	Mem0[r29 + 48<i32>:word64] = r17_r16
	r17_r16 = r1_r0
	r4 = 0x00027EA6<p32>
	Mem0[r29 + 24<i32>:word64] = r23_r22
	r2 = Mem0[r16 + 4<i32>:word32]
	r1 = 0xE5<32>
	Mem0[r29 + 16<i32>:word64] = r25_r24
	r5 = Mem0[r16 + 8<i32>:word32]
	Mem0[r29 + 40<i32>:word64] = r19_r18
	r3 = Mem0[r2:word32]
	r24 = Mem0[r2 + 4<i32>:word32]
	r23 = Mem0[r2 + 8<i32>:word32]
	Mem0[r29 + 32<i32>:word64] = r21_r20
	r8 = Mem0[r3 + 4<i32>:word32]
	r7 = Mem0[r23 + 16<i32>:word32]
	r9 = Mem0[r3:word32]
	r2 = Mem0[r24 + 16<i32>:word32]
	r7 = Mem0[r7:word32]
	r12 = Mem0[r3 + 8<i32>:word32]
	r8 = r8 * r9
	r13 = Mem0[r3 + 12<i32>:word32]
	r14 = Mem0[r2:word32]
	r2 = r17
	r19 = Mem0[r5 + 4<i32>:word32]
	r21 = Mem0[r3 + 16<i32>:word32]
	r3 = r7 - r14
	Mem0[r29:word32] = r16
	r18 = Mem0[r5:word32]
	r5 = r8 * r12
	r22 = r5 * r13
	call logmsg_function (retsize: 0;)
	r20 = r3 * r6
	r3 = Mem0[r24 + 16<i32>:word32]
	r2 = Mem0[r23 + 16<i32>:word32]
	r4 = 0x00027EC5<p32>
	r5 = Mem0[r3:word32]
	r2 = Mem0[r2:word32]
	r1 = 0xE8<32>
	r2 = r17
	r9_r8 = CONVERT(r5, real32, real64)
	r7_r6 = CONVERT(r2, real32, real64)
	Mem0[r29:word64] = r9_r8
	Mem0[r29 + 8<i32>:word64] = r7_r6
	call logmsg_function (retsize: 0;)
	r4 = r22 + 0xFFFFFFFF<32>
	branch p0 l0001886C
	// succ:  l00018858 l0001886C
l00018858:
	p0 = r14 == 0<32>
	r3 = 0x4F000000<32>
	r2 = 0xCF000000<32>
	goto l000188CC
	// succ:  l000188CC
l0001886C:
	r2 = 0x7FFFFFFF<32>
	r3 = 0x80000000<32>
	r21 = r21 + 4<i32>
	r5 = Mem0[r21:word32]
	branch p0 l00018888
	// succ:  l00018884 l00018888
l00018884:
	p0 = r14 >u 1<32>
	goto l000188BC
	// succ:  l000188BC
l00018888:
	r21 = r21 + 4<i32>
	r4 = Mem0[r21:word32]
	p0 = r4 >u 1<32>
	r6 = r4 + 0xFFFFFFFF<32>
	branch p0 l000188B4
	// succ:  l0001889C l000188B4
l0001889C:
	__loop(0<i32>, 0x0001889C<p32>, r6)
	r21 = r21 + 4<i32>
	r4 = Mem0[r21:word32]
	r6 = r4
	r2 = min<int32>(r2, r5)
	r3 = max<int32>(r5, r3)
	r5 = r6
	// succ:  l000188B4
l000188B4:
	r2 = min<int32>(r2, r5)
	r3 = max<int32>(r5, r3)
	// succ:  l000188BC
l000188BC:
	r2 = min<int32>(r2, r4)
	r5 = max<int32>(r4, r3)
	r3 = CONVERT(r2, int32, real32)
	r2 = CONVERT(r5, int32, real32)
	// succ:  l000188CC
l000188CC:
	r5 = Mem0[r18 + 16<i32>:word32]
	r6 = 0<32>
	r3 = r20 * r3
	Mem0[r18 + 8<i32>:word32] = 1<32>
	Mem0[r18 + 12<i32>:word32] = 1<32>
	r1 = 0xFE<32>
	r7 = fminf(r6, r3)
	Mem0[r18:word32] = 1<32>
	r2 = r20 * r2
	r4 = 0x00027EE4<p32>
	Mem0[r18 + 4<i32>:word32] = 0xFFFFFF81<32>
	Mem0[r18 + 24<i32>:word32] = 4<32>
	Mem0[r5:word32] = r7
	Mem0[r19 + 12<i32>:word32] = 1<32>
	r3 = Mem0[r19 + 16<i32>:word32]
	Mem0[r19 + 4<i32>:word32] = 1<32>
	Mem0[r19:word32] = 1<32>
	Mem0[r3:word32] = r2
	Mem0[r19 + 8<i32>:word32] = 1<32>
	Mem0[r19 + 24<i32>:word32] = 4<32>
	r0 = Mem0[r19 + 16<i32>:word32]
	r5 = Mem0[r18 + 16<i32>:word32]
	r2 = Mem0[r0:word32]
	r3 = Mem0[r5:word32]
	r7_r6 = CONVERT(r2, real32, real64)
	Mem0[r29 + 8<i32>:word64] = r7_r6
	r2 = r17
	r9_r8 = CONVERT(r3, real32, real64)
	Mem0[r29:word64] = r9_r8
	call logmsg_function (retsize: 0;)
	r2 = r17
	r1 = 0xFF<32>
	r4 = 0x00027F04<p32>
	Mem0[r29:word32] = r16
	call logmsg_function (retsize: 0;)
	r0 = 0<32>
	r19_r18 = Mem0[r29 + 40<i32>:word64]
	r17_r16 = Mem0[r29 + 48<i32>:word64]
	r23_r22 = Mem0[r29 + 24<i32>:word64]
	r21_r20 = Mem0[r29 + 32<i32>:word64]
	v39 = r30
	r31 = Mem0[v39 + 4<i32>:word32]
	r30 = Mem0[v39:word32]
	r29 = v39 + 8<i32>
	return
	// succ:  requantrange_execute_exit
requantrange_execute_exit:


// requantrange_check
// Return size: 0
define requantrange_check
requantrange_check_entry:
	r29 = fp
	// succ:  l00018960
l00018960:
	// succ:  l00018960_thunk_requantize_check__merged
l00018960_thunk_requantize_check__merged:
	call requantize_check__merged (retsize: 0;)
	return
	// succ:  requantrange_check_exit
requantrange_check_exit:


// logmsg_function
// Return size: 0
define logmsg_function
logmsg_function_entry:
	r29 = fp
	// succ:  l00018964
l00018964:
	v4 = r29 - 8<i32>
	Mem0[v4:word32] = r30
	Mem0[v4 + 4<i32>:word32] = r31
	r30 = v4
	r29 = v4 - 8<i32>
	r3 = 2<32>
	branch r3 >u r5 l00018988
	// succ:  l00018974 l00018988
l00018974:
	r5 = Mem0[r2 + 16<i32>:word32]
	r5 = r29 + 0x10<32>
	r3 = 2<32>
	r0 = 0x000189AF<p32>
	Mem0[r29 + 1<i32>:byte] = r6
	r6 = r29 + 0x10<32>
	call logv (retsize: 0;)
	goto l0001898C
	// succ:  l0001898C
l00018988:
	v13 = r30
	r31 = Mem0[v13 + 4<i32>:word32]
	r30 = Mem0[v13:word32]
	r29 = v13 + 8<i32>
	return
	// succ:  logmsg_function_exit
l0001898C:
	// succ:  l0001898C_thunk_errlog_function
l0001898C_thunk_errlog_function:
	call errlog_function (retsize: 0;)
	return
	// succ:  logmsg_function_exit
logmsg_function_exit:


// errlog_function
// Return size: 0
define errlog_function
errlog_function_entry:
	r29 = fp
	// succ:  l00018990
l00018990:
	v4 = r29 - 8<i32>
	Mem0[v4:word32] = r30
	Mem0[v4 + 4<i32>:word32] = r31
	r30 = v4
	r29 = v4 - 8<i32>
	r4 = r3
	r0 = 0x00027E2B<p32>
	Mem0[r29 + 1<i32>:byte] = r6
	r6 = r29 + 0x10<32>
	r5 = r29 + 0x10<32>
	r3 = 0<32>
	v13 = r30
	r31 = Mem0[v13 + 4<i32>:word32]
	r30 = Mem0[v13:word32]
	r29 = v13 + 8<i32>
	return
	// succ:  errlog_function_exit
errlog_function_exit:


// autorequantize_execute.extracted_region
// Return size: 0
define autorequantize_execute.extracted_region
autorequantize_execute.extracted_region_entry:
	r29 = fp
	// succ:  l000189B4
l000189B4:
	v4 = r29 - 8<i32>
	Mem0[v4:word32] = r30
	Mem0[v4 + 4<i32>:word32] = r31
	r30 = v4
	r29 = v4 - 32<i32>
	Mem0[r29 + 8<i32>:word64] = r21_r20
	r6 = Mem0[r29 + 40<i32>:word64]
	r20 = 0<32>
	r21 = __invert_bit<word32,word32>(r4, 0x1E<32>)
	Mem0[r29 + 24<i32>:word64] = r17_r16
	Mem0[r29 + 16<i32>:word64] = r19_r18
	r19_r18 = r1_r0
	r17_r16 = r5_r3
	Mem0[r29:word64] = r23_r22
	r22 = r6 - r2
	// succ:  l000189DC
l000189DC:
	r18 = r18 + 4<i32>
	r2 = Mem0[r18:word32]
	r3 = r21
	r2 = CONVERT(r2, int32, real32)
	r3 = r3 + r2 * r16
	call fn00009620 (retsize: 0;)
	r0 = r3 * r17
	r22 = r22 + 0xFFFFFFFF<32>
	r2 = truncf(CONVERT(r0, uint32, real32))
	p1 = r22 == 0<32>
	r2 = 0xFFFFFFFF<32>
	p0 = r2 > 0xFFFFFFFF<32>
	p2 = r2 > 0xFF<32>
	r2 = r20 + 0<32>
	Mem0[r19:byte] = r2
	r19 = r19 + 1<i32>
	branch p1 l000189DC
	// succ:  l00018A18 l000189DC
l00018A18:
	r19_r18 = Mem0[r29 + 16<i32>:word64]
	r17_r16 = Mem0[r29 + 24<i32>:word64]
	r23_r22 = Mem0[r29:word64]
	r21_r20 = Mem0[r29 + 8<i32>:word64]
	v30 = r30
	r31 = Mem0[v30 + 4<i32>:word32]
	r30 = Mem0[v30:word32]
	r29 = v30 + 8<i32>
	return
	// succ:  autorequantize_execute.extracted_region_exit
autorequantize_execute.extracted_region_exit:


// fmaxf.1.0
// Return size: 0
define fmaxf.1.0
fmaxf.1.0_entry:
	r29 = fp
	// succ:  l00018A24
l00018A24:
	r2 = 0x38D1B717<32>
	r1_r0 = r0_r2
	// succ:  l00018A2C_thunk_fn00009600
l00018A2C_thunk_fn00009600:
	call fn00009600 (retsize: 0;)
	return
	// succ:  fmaxf.1.0_exit
fmaxf.1.0_exit:


// supernode_execute_hvx
// Return size: 0
define supernode_execute_hvx
supernode_execute_hvx_entry:
	r29 = fp
	// succ:  l00018A40
l00018A40:
	v4 = r29 - 8<i32>
	Mem0[v4:word32] = r30
	Mem0[v4 + 4<i32>:word32] = r31
	r30 = v4
	r29 = v4 - 368<i32>
	Mem0[r29 - 16<i32>:word64] = r17_r16
	r17_r16 = r0_r1
	Mem0[r29 + 320<i32>:word64] = r27_r26
	r2 = Mem0[r17 + 4<i32>:word32]
	r27 = Mem0[r17 + 32<i32>:int8]
	r3 = Mem0[r17 + 8<i32>:word32]
	r4 = Mem0[r2:word32]
	r6 = Mem0[r17 + 8<i32>:word32]
	p0 = r27 == 0<32>
	Mem0[r29 + 344<i32>:word64] = r21_r20
	r5 = Mem0[r2 + 4<i32>:word32]
	Mem0[r29 + 336<i32>:word64] = r23_r22
	Mem0[r29 + 328<i32>:word64] = r25_r24
	r7 = Mem0[r2 + 24<i32>:word32]
	Mem0[r29 + 136<i32>:word32] = r6
	r6 = Mem0[r2 + 36<i32>:word32]
	r20 = Mem0[r2 + 20<i32>:word32]
	r22 = Mem0[r2 + 12<i32>:word32]
	r21 = Mem0[r2 + 32<i32>:word32]
	r25 = Mem0[r2 + 28<i32>:word32]
	r23 = Mem0[r2 + 16<i32>:word32]
	r24 = Mem0[r2 + 8<i32>:word32]
	Mem0[r29 + 108<i32>:word32] = r6
	r2 = Mem0[r4 + 4<i32>:word32]
	r6 = Mem0[r3 + 4<i32>:word32]
	r1 = Mem0[r3:word32]
	Mem0[r29 + 144<i32>:word32] = r2
	r2 = Mem0[r5 + 8<i32>:word32]
	Mem0[r29 + 352<i32>:word64] = r19_r18
	r0 = Mem0[r4 + 8<i32>:word32]
	Mem0[r29 + 80<i32>:word32] = r1
	Mem0[r29 + 72<i32>:word32] = r6
	r6 = Mem0[r4:word32]
	Mem0[r29 + 132<i32>:word32] = r2
	r2 = Mem0[r7 + 4<i32>:word32]
	r19 = Mem0[r5:word32]
	r18 = Mem0[r5 + 12<i32>:word32]
	r1 = Mem0[r7 + 8<i32>:word32]
	r26 = Mem0[r5 + 4<i32>:word32]
	Mem0[r29 + 140<i32>:word32] = r6
	r3 = Mem0[r3 + 8<i32>:word32]
	r6 = Mem0[r4 + 12<i32>:word32]
	Mem0[r29 + 76<i32>:word32] = r7
	Mem0[r29 + 148<i32>:word32] = r2
	r2 = p0
	Mem0[r29 + 68<i32>:word32] = r3
	Mem0[r29 + 128<i32>:word32] = r0
	Mem0[r29 + 116<i32>:word32] = r2
	Mem0[r29 + 96<i32>:word32] = r6
	branch p0 l00018B24
	// succ:  l00018AF0 l00018B24
l00018AF0:
	r2 = Mem0[r29 - 128<i32>:word32]
	p0 = r27 == 2<32>
	branch p0 l00018B1C
	// succ:  l00018AFC l00018B1C
l00018AFC:
	Mem0[r29 + 120<i32>:word32] = r1
	r0 = 0<32>
	p0 = r27 == 1<32>
	branch p0 l00018B2C
	// succ:  l00018B08 l00018B2C
l00018B08:
	r2 = Mem0[r29 + 128<i32>:word32]
	r1 = Mem0[r29 + 120<i32>:word32]
	r0 = r1
	goto l00018B24
	// succ:  l00018B24
l00018B1C:
	r2 = r2 - r26
	r0 = r2 + r1
	// succ:  l00018B24
l00018B24:
	Mem0[r29 + 120<i32>:word32] = r1
	call fn00009760 (retsize: 0;)
	// succ:  l00018B2C
l00018B2C:
	r2 = Mem0[r29 - 112<i32>:word32]
	r1 = Mem0[r29 - 108<i32>:word32]
	p0 = r27 == 2<32>
	branch p0 l00018B7C
	// succ:  l00018B3C l00018B7C
l00018B3C:
	r1 = Mem0[r29 - 108<i32>:word32]
	r2 = Mem0[r29 - 112<i32>:word32]
	p0 = r27 == 1<32>
	branch p0 l00018B6C
	// succ:  l00018B4C l00018B6C
l00018B4C:
	Mem0[r29 + 124<i32>:word32] = r16
	r0 = Mem0[r29 + 116<i32>:word64]
	r5 = 0<32>
	r16 = r0
	r1 = Mem0[r29 - 108<i32>:word32]
	r0 = Mem0[r29 - 112<i32>:word32]
	branch p0 l00018B90
	// succ:  l00018B68 l00018B90
l00018B68:
	p0 = r0
	goto l00018B88
	// succ:  l00018B88
l00018B6C:
	Mem0[r29 + 124<i32>:word32] = r16
	r16 = r0
	r0 = r1
	goto l00018B88
	// succ:  l00018B88
l00018B7C:
	Mem0[r29 + 124<i32>:word32] = r16
	r16 = r0
	r2 = r2 - r19
	r0 = r2 + r1
	// succ:  l00018B88
l00018B88:
	call fn00009760 (retsize: 0;)
	r5 = r0
	// succ:  l00018B90
l00018B90:
	r2 = Mem0[r29 + 140<i32>:word32]
	r0 = r29 + 0xE8<32>
	r1 = 0<32>
	r4 = r18 + 0x1F<32>
	Mem0[r29 + 100<i32>:word32] = r18
	r6 = Mem0[r25 + 16<i32>:word32]
	r27 = r29 + 0xE8<32>
	r4 = r4 & 0xFFFFFFE0<32>
	r2 = 0x50<32>
	r3 = r18 * r2
	Mem0[r29 + 104<i32>:word32] = r4
	Mem0[r29 + 56<i32>:word32] = r6
	r18 = r5
	r3 = r3 * r16
	r3 = r3 * r5
	Mem0[r29 + 116<i32>:word32] = r3
	call fn000095F0 (retsize: 0;)
	Mem0[r29 + 232<i32>:word32] = r17
	r1 = 0<32>
	r0 = r27 + 0x34<32>
	Mem0[r29 + 64<i32>:word32] = r0
	call fn00009740 (retsize: 0;)
	r0 = r29 + 0x98<32>
	r1 = 0<32>
	r25 = r29 + 0x98<32>
	r2 = 0x50<32>
	call fn000095F0 (retsize: 0;)
	Mem0[r29 + 152<i32>:word32] = r17
	r1 = 0<32>
	r0 = r25 + 0x34<32>
	r2 = __set_bit<word32,word32>(r25, 4<32>)
	Mem0[r2:word32] = 1<32>
	Mem0[r29 + 60<i32>:word32] = r0
	call fn00009740 (retsize: 0;)
	r3 = Mem0[r24 + 16<i32>:word32]
	r2 = Mem0[r22 + 16<i32>:word32]
	r24 = 0x437F0000<32>
	r7 = Mem0[r29 + 108<i32>:word64]
	r4 = Mem0[r21 + 16<i32>:word32]
	r1 = r24
	r25 = Mem0[r3:word32]
	r2 = Mem0[r2:word32]
	r6 = Mem0[r23 + 16<i32>:word32]
	r5 = Mem0[r20 + 16<i32>:word32]
	r0 = r2 - r25
	Mem0[r29 + 84<i32>:word32] = r2
	r7 = Mem0[r7 + 16<i32>:word32]
	r21 = Mem0[r5:word32]
	r20 = Mem0[r6:word32]
	Mem0[r29 + 88<i32>:word32] = r20
	Mem0[r29 + 92<i32>:word32] = r21
	r27 = Mem0[r4:word32]
	r23 = Mem0[r7:word32]
	call fn00009610 (retsize: 0;)
	r22 = r0
	r2 = r21 - r20
	r1_r0 = r24_r2
	call fn00009610 (retsize: 0;)
	r21 = r0
	r20 = r23 - r27
	r1_r0 = r24_r20
	call fn00009610 (retsize: 0;)
	r22 = r22 * r21
	r1 = r22
	call fn00009610 (retsize: 0;)
	Mem0[r29 + 52<i32>:word32] = r0
	r1_r0 = r22_r23
	call fn00009610 (retsize: 0;)
	call fn000097E0 (retsize: 0;)
	r3 = Mem0[r29 + 136<i32>:word32]
	r0 = r20
	r2 = r0
	r20 = truncf(CONVERT(r2, uint32, real32))
	r23 = Mem0[r3 + 4<i32>:word32]
	call fmaxf.1.0 (retsize: 0;)
	r1_r0 = r0_r24
	call fn00009610 (retsize: 0;)
	r2 = 0<32>
	r2 = r2 - r27
	call fn00009620 (retsize: 0;)
	r0 = r2 * r0
	r13 = Mem0[r29 + 120<i32>:word32]
	r3 = Mem0[r29 + 132<i32>:word32]
	r9 = r19 << 1<32>
	r2 = r26 * r19
	r12 = Mem0[r29 + 96<i32>:word32]
	r5 = 0<32>
	r4 = truncf(CONVERT(r0, uint32, real32))
	r7 = 3<32> + r18 * r16
	p2 = r13 == 2<32>
	r0 = 1<32>
	r8 = r12 + 0xF<32>
	r2 = 0xF<32> + r2 * r3
	r2 = r7 & 0xFFFFFFFC<32>
	p0 = r12 == 3<32>
	r3 = r2 & 0xFFFFFFF0<32>
	r15 = max<int32>(r4, r5)
	p3 = r3 == 0x20<32>
	p1 = r3 == 0xA0<32>
	r8 = r8 & 0xFFFFFFF0<32>
	p1 = __fastcorner9(p2, p1)
	p2 = __fastcorner9(p2, p3)
	p1 = __fastcorner9(p0, p1)
	p2 = r19 == 7<32>
	p0 = __fastcorner9(p0, p2)
	p2 = r19 == 3<32>
	p1 = __fastcorner9(p2, p1)
	p2 = r26 == 7<32>
	p0 = __fastcorner9(p2, p0)
	p2 = r26 == 3<32>
	p1 = __fastcorner9(p2, p1)
	r7 = Mem0[r29 - 128<i32>:word32]
	r14 = Mem0[r29 - 112<i32>:word32]
	branch p0 l00018D60
	// succ:  l00018D48 l00018D60
l00018D48:
	p0 = p1 | p0 & p2
	Mem0[r29 + 112<i32>:word32] = r18
	r4 = r18
	r5 = r19 << 1<32>
	r3 = r16 * r3
	r4 = r4 + (r5 + 2<32>)
	goto l00018DA8
	// succ:  l00018DA8
l00018D60:
	r5 = r18
	r3 = r16
	r6 = r19 - r14
	r4 = r26 - r7
	Mem0[r29 + 112<i32>:word32] = r18
	r1 = Mem0[r29 + 148<i32>:word32]
	r4 = r7
	r5 = r6 + r5 * r1
	r3 = r4 + r3 * r13
	r7 = r5
	r3 = r3 + (r3 >>u 0x1F<32>)
	r4 = r4 + (r3 >> r0)
	r7 = r7 + (r7 >>u 0x1F<32>)
	r7 = __clear_bit<word32,word32>(r7, 0<32>)
	r4 = r4 * r8
	r7 = r5 - r7
	r5 = r5 + (r9 + r14)
	r1 = r5 - r7
	r3 = r4 * r1
	// succ:  l00018DA8
l00018DA8:
	r27 = Mem0[r29 + 100<i32>:word32]
	r7 = Mem0[r29 + 104<i32>:word32]
	p1 = !(r26 == 1<32>)
	r2 = r2 << 2<32>
	r1 = Mem0[r29 + 124<i32>:word64]
	r5 = Mem0[r29 + 116<i32>:word64]
	p3 = r27 == r7
	p2 = !(r19 == 1<32>)
	r7 = Mem0[r1 + 4<i32>:word32]
	r5 = r5 + r27
	p1 = p2 | p1
	r6 = r2 * r7
	r3 = r3 + (r2 + r6)
	r1 = r3 + (r5 << 2<32>)
	branch r4 == 2<32> l00018E14
	// succ:  l00018DEC l00018E14
l00018DEC:
	r4 = Mem0[r17 + 32<i32>:int8]
	r21 = r1 + 0x580<32>
	branch p0 l00018E20
	// succ:  l00018DF0 l00018E20
l00018DF0:
	Mem0[r29 + 44<i32>:word32] = r15
	Mem0[r29 + 40<i32>:word32] = r7
	r24 = r13
	p0 = p0 & p0
	Mem0[r29 + 108<i32>:word32] = r16
	Mem0[r29 + 48<i32>:word32] = r22
	r18 = r12
	r0 = p0
	Mem0[r29 + 36<i32>:word32] = r0
	Mem0[r29 + 32<i32>:word32] = r20
	goto l00018E38
	// succ:  l00018E38
l00018E14:
	branch p0 l00018DF0
	// succ:  l00018E1C l00018DF0
l00018E1C:
	Mem0[r29 + 44<i32>:word32] = r15
	r18 = r12
	r24 = r13
	r0 = p3
	goto l00018E2C
	// succ:  l00018E2C
l00018E20:
	Mem0[r29 + 44<i32>:word32] = r15
	r18 = r12
	r24 = r13
	// succ:  l00018E2C
l00018E2C:
	Mem0[r29 + 40<i32>:word32] = r7
	Mem0[r29 + 36<i32>:word32] = r0
	Mem0[r29 + 32<i32>:word32] = r20
	Mem0[r29 + 48<i32>:word32] = r22
	Mem0[r29 + 108<i32>:word32] = r16
	// succ:  l00018E38
l00018E38:
	r20 = Mem0[r29 + 84<i32>:word64]
	r2 = Mem0[r17 + 28<i32>:word32]
	r4 = 0x0002851F<p32>
	r16 = Mem0[r29 + 124<i32>:word32]
	r1 = 0x3D8<32>
	Mem0[r29 + 4<i32>:word32] = r2
	r22 = Mem0[r29 + 88<i32>:word64]
	r3_r2 = SEQ(2<32>, r16)
	Mem0[r29:word32] = r17
	call logmsg_function (retsize: 0;)
	r1 = 0x3D9<32>
	r20 = r18
	r9_r8 = CONVERT(r25, real32, real64)
	r7_r6 = CONVERT(r20, real32, real64)
	r5 = Mem0[r29 + 128<i32>:word32]
	r3_r2 = SEQ(2<32>, r16)
	r4 = 0x0002875A<p32>
	Mem0[r29 + 24<i32>:word64] = r7_r6
	r18 = Mem0[r29 + 140<i32>:word32]
	Mem0[r29 + 8<i32>:word32] = r5
	r7 = Mem0[r29 + 144<i32>:word32]
	Mem0[r29 + 12<i32>:word32] = r20
	Mem0[r29 + 16<i32>:word64] = r9_r8
	Mem0[r29:word32] = r18
	Mem0[r29 + 4<i32>:word32] = r7
	call logmsg_function (retsize: 0;)
	r2 = Mem0[r29 + 92<i32>:word32]
	r1 = 0x3DA<32>
	r9_r8 = CONVERT(r22, real32, real64)
	Mem0[r29 + 16<i32>:word64] = r9_r8
	r22 = Mem0[r29 + 132<i32>:word32]
	r4 = 0x0002877E<p32>
	Mem0[r29 + 4<i32>:word32] = r19
	Mem0[r29 + 12<i32>:word32] = r22
	r3_r2 = SEQ(2<32>, r16)
	r7_r6 = CONVERT(r2, real32, real64)
	Mem0[r29 + 8<i32>:word32] = r26
	Mem0[r29 + 24<i32>:word64] = r7_r6
	Mem0[r29:word32] = r27
	call logmsg_function (retsize: 0;)
	r1 = 0x3DB<32>
	r3_r2 = SEQ(2<32>, r16)
	r4 = 0x00028577<p32>
	Mem0[r29 + 4<i32>:word32] = r24
	r5 = Mem0[r29 + 148<i32>:word32]
	Mem0[r29:word32] = r5
	call logmsg_function (retsize: 0;)
	r1 = 0x3DC<32>
	r3_r2 = SEQ(2<32>, r16)
	r4 = 0x0002858E<p32>
	Mem0[r29:byte] = r5
	r5 = Mem0[r17 + 32<i32>:byte]
	call logmsg_function (retsize: 0;)
	Mem0[r29 + 12<i32>:word32] = r27
	r7 = Mem0[r29 + 108<i32>:word32]
	r4 = 0x00018F27<p32>
	Mem0[r29:word32] = r18
	r3_r2 = SEQ(2<32>, r16)
	Mem0[r29 + 8<i32>:word32] = r7
	r5 = Mem0[r29 + 112<i32>:word64]
	r1 = 0x3DD<32>
	Mem0[r29 + 4<i32>:word32] = r5
	call logmsg_function (retsize: 0;)
	r19 = Mem0[r29 + 136<i32>:word32]
	r25 = r23
	r4 = 0x000287A1<p32>
	r5 = Mem0[r19 + 8<i32>:word32]
	r3_r2 = SEQ(2<32>, r16)
	r1 = 0x3DF<32>
	r7_r6 = CONVERT(r25, real32, real64)
	Mem0[r29:word64] = r7_r6
	r8 = 0x000287B5<p32>
	r9 = 0x000287C6<p32>
	r8 = r9 + 0<32>
	p0 = !(r5 == 0<32>)
	Mem0[r29 + 8<i32>:word32] = r8
	call logmsg_function (retsize: 0;)
	p0 = r20 == r22
	r1 = 0x3E0<32>
	r3 = 0x000285C2<p32>
	branch p0 l0001903C
	// succ:  l00018F90 l0001903C
l00018F90:
	branch r21 >u r2 l00018FB0
	// succ:  l00018F9C l00018FB0
l00018F9C:
	r2 = Mem0[r16 + 8<i32>:word32]
	Mem0[r29 + 4<i32>:word32] = r2
	r1 = 0x3E2<32>
	r3 = 0x00018FDB<p32>
	Mem0[r29:word32] = r21
	r2 = r16
	goto l00019040
	// succ:  l00019040
l00018FB0:
	r24 = Mem0[r29 + 116<i32>:word32]
	r2 = Mem0[r29 + 80<i32>:word32]
	branch r24 >u r4 l00018FDC
	// succ:  l00018FC8 l00018FDC
l00018FC8:
	r4 = Mem0[r2 + 20<i32>:word32]
	r21 = r24
	Mem0[r29 + 4<i32>:word32] = r24
	r1 = 0x3E5<32>
	r3 = 0x00018FF5<p32>
	Mem0[r29:word32] = r4
	r2 = r16
	goto l00019040
	// succ:  l00019040
l00018FDC:
	r2 = Mem0[r29 + 76<i32>:word32]
	r1 = 0x3E7<32>
	r3 = 0x0002860B<p32>
	branch r2 == 1<32> l0001903C
	// succ:  l00018FF8 l0001903C
l00018FF8:
	r2 = Mem0[r2:word32]
	r2 = Mem0[r29 + 76<i32>:word32]
	r1 = 0x3E8<32>
	r3 = 0x00019020<p32>
	branch r2 == 1<32> l0001903C
	// succ:  l00019010 l0001903C
l00019010:
	r2 = Mem0[r2 + 12<i32>:word32]
	r2 = Mem0[r29 + 72<i32>:word64]
	r4 = 4<32>
	r3 = 0x00019031<p32>
	r1 = 0x3E9<32>
	branch r4 >u r2 l0001903C
	// succ:  l00019028 l0001903C
l00019028:
	r2 = Mem0[r2 + 20<i32>:word32]
	r2 = Mem0[r29 + 68<i32>:word32]
	r1 = 0x3EA<32>
	r3 = 0x0001903F<p32>
	branch r2 >u 3<32> l0001904C
	goto l00019040
	// succ:  l00019040 l0001904C
l0001903C:
	r2 = r16
	// succ:  l00019040
l00019040:
	call errlog_function (retsize: 0;)
	r0 = 0xFFFFFFFF<32>
	goto l00019218
	// succ:  l00019218
l0001904C:
	r0 = Mem0[r29 + 36<i32>:word32]
	r1 = 0x3EB<32>
	branch p0 l0001906C
	// succ:  l0001905C l0001906C
l0001905C:
	p0 = r0
	r3_r2 = SEQ(2<32>, r16)
	r4 = 0x000287C7<p32>
	call logmsg_function (retsize: 0;)
	// succ:  l0001906C
l0001906C:
	r20 = Mem0[r29 + 48<i32>:word64]
	r2 = Mem0[r29 + 104<i32>:word64]
	r1 = 0x3EC<32>
	r22 = Mem0[r29 + 40<i32>:word32]
	p0 = r27 == r2
	branch p0 l00019090
	// succ:  l00019080 l00019090
l00019080:
	r3_r2 = SEQ(2<32>, r16)
	r4 = 0x000287E0<p32>
	call logmsg_function (retsize: 0;)
	// succ:  l00019090
l00019090:
	r7 = Mem0[r29 + 108<i32>:word64]
	r2 = Mem0[r29 + 80<i32>:word64]
	p0 = r27 > 0<32>
	r5 = Mem0[r29 + 56<i32>:word64]
	r3 = Mem0[r29 + 112<i32>:word64]
	Mem0[r2 + 4<i32>:word32] = r3
	Mem0[r2 + 24<i32>:word32] = r21
	Mem0[r2:word32] = r18
	Mem0[r2 + 8<i32>:word32] = r7
	r6 = Mem0[r29 + 52<i32>:word64]
	r7 = Mem0[r29 + 44<i32>:word32]
	Mem0[r2 + 12<i32>:word32] = r27
	r2 = 0x3F000000<32>
	branch p0 l000190DC
	// succ:  l000190BC l000190DC
l000190BC:
	__loop(0<i32>, 0x000190C0<p32>, r27)
	r5 = r5 + 1<i32>
	r3 = Mem0[r5:byte]
	r4 = r2
	r3 = r3 - r7
	r3 = CONVERT(r3, int32, real32)
	r4 = r4 + r6 * r3
	Mem0[r22:word32] = r1
	r22 = r22 + 4<i32>
	r1 = truncf(CONVERT(r4, uint32, real32))
	goto l000190E0
	// succ:  l000190E0
l000190DC:
	r1_r0 = r20_r25
	call fn00009610 (retsize: 0;)
	goto l000190E4
	// succ:  l000190E4
l000190E0:
	r1_r0 = r20_r25
	// succ:  l000190E4
l000190E4:
	call fn00009620 (retsize: 0;)
	r2 = r0
	r0 = 0xFF0000<32>
	call fn00009760 (retsize: 0;)
	r1 = truncf(CONVERT(r2, uint32, real32))
	r3 = r0
	r2 = r29 + 0xE8<32>
	r21 = 0x00019D30<p32>
	Mem0[r29 + 172<i32>:word32] = r3
	Mem0[r29 + 252<i32>:word32] = r3
	r1_r0 = r21_r16
	call nn_os_work_for_vector (retsize: 0;)
	r1_r0 = r21_r16
	r2 = r29 + 0x98<32>
	call nn_os_work_for_vector (retsize: 0;)
	r0 = Mem0[r29 + 64<i32>:word32]
	call fn000096A0 (retsize: 0;)
	r0 = Mem0[r29 + 60<i32>:word32]
	call fn000096A0 (retsize: 0;)
	branch r2 == 1<32> l0001914C
	// succ:  l0001913C l0001914C
l0001913C:
	r2 = Mem0[r16 + 52<i32>:word32]
	r3_r2 = Mem0[r29 + 224<i32>:word64]
	r1_r0 = r1_r0 + r3_r2
	r1_r0 = r1_r0 >>u 1<32>
	Mem0[r17 + 48<i32>:word64] = r1_r0
	// succ:  l0001914C
l0001914C:
	branch r2 == 0<32> l000191C4
	// succ:  l00019158 l000191C4
l00019158:
	r2 = Mem0[r19 + 8<i32>:word32]
	r3 = Mem0[r29 + 240<i32>:word32]
	r7 = Mem0[r29 + 32<i32>:word32]
	r2 = max<int32>(r3, r2)
	r2 = r2 + r7
	r2 = CONVERT(r2, int32, real32)
	r3 = r20 * r2
	branch p0 l000191C4
	// succ:  l00019178 l000191C4
l00019178:
	p0 = r3 > r25
	r2 = Mem0[r19 + 4<i32>:word32]
	branch p0 l00019194
	// succ:  l00019184 l00019194
l00019184:
	p0 = r3 > r2
	r2 = r2 + r2
	branch p0 l00019184
	// succ:  l00019190 l00019184
l00019190:
	p0 = r3 > r2
	Mem0[r19 + 4<i32>:word32] = r2
	// succ:  l00019194
l00019194:
	r5 = Mem0[r17 + 28<i32>:word32]
	r7_r6 = CONVERT(r2, real32, real64)
	r4 = 0x000287F8<p32>
	Mem0[r29:word32] = r5
	r1 = 0x419<32>
	r3_r2 = SEQ(1<32>, r16)
	Mem0[r29 + 8<i32>:word64] = r7_r6
	call logmsg_function (retsize: 0;)
	r1_r0 = r16_r17
	call supernode_execute_hvx (retsize: 0;)
	goto l00019218
	// succ:  l00019218
l000191C4:
	r5 = Mem0[r29 + 68<i32>:word64]
	r3 = Mem0[r29 + 72<i32>:word64]
	r4 = 0x0002882B<p32>
	r7 = Mem0[r29 + 108<i32>:word32]
	r1 = 0x435<32>
	Mem0[r3 + 12<i32>:word32] = 1<32>
	r2 = Mem0[r3 + 16<i32>:word32]
	Mem0[r3 + 4<i32>:word32] = 1<32>
	Mem0[r3 + 8<i32>:word32] = 1<32>
	Mem0[r2:word32] = 0<32>
	Mem0[r3:word32] = 1<32>
	Mem0[r5:word32] = 1<32>
	Mem0[r3 + 24<i32>:word32] = 4<32>
	Mem0[r5 + 8<i32>:word32] = 1<32>
	r2 = Mem0[r5 + 16<i32>:word32]
	Mem0[r5 + 4<i32>:word32] = 1<32>
	Mem0[r5 + 12<i32>:word32] = 1<32>
	Mem0[r5 + 24<i32>:word32] = 4<32>
	Mem0[r2:word32] = r25
	r3_r2 = SEQ(2<32>, r16)
	Mem0[r29 + 12<i32>:word32] = r27
	r5 = Mem0[r29 + 112<i32>:word32]
	Mem0[r29 + 4<i32>:word32] = r5
	Mem0[r29 + 8<i32>:word32] = r7
	Mem0[r29:word32] = r18
	call logmsg_function (retsize: 0;)
	r0 = 0<32>
	// succ:  l00019218
l00019218:
	r19_r18 = Mem0[r29 + 352<i32>:word64]
	r17_r16 = Mem0[r29 + 360<i32>:word64]
	r23_r22 = Mem0[r29 + 336<i32>:word64]
	r21_r20 = Mem0[r29 + 344<i32>:word64]
	r27_r26 = Mem0[r29 + 320<i32>:word64]
	r25_r24 = Mem0[r29 + 328<i32>:word64]
	v53 = r30
	r31 = Mem0[v53 + 4<i32>:word32]
	r30 = Mem0[v53:word32]
	r29 = v53 + 8<i32>
	return
	// succ:  supernode_execute_hvx_exit
supernode_execute_hvx_exit:


// supernode_check_ref
// Return size: 0
define supernode_check_ref
supernode_check_ref_entry:
	r29 = fp
	// succ:  l00019234
l00019234:
	v4 = r29 - 8<i32>
	Mem0[v4:word32] = r30
	Mem0[v4 + 4<i32>:word32] = r31
	r30 = v4
	r29 = v4 - 56<i32>
	Mem0[r29 - 16<i32>:word64] = r17_r16
	r4 = 0x00028673<p32>
	r17 = r0
	r16 = r1
	r1 = 0x43D<32>
	Mem0[r29 + 32<i32>:word64] = r21_r20
	Mem0[r29 + 40<i32>:word64] = r19_r18
	r3_r2 = SEQ(2<32>, r16)
	Mem0[r29 + 16<i32>:word64] = r25_r24
	Mem0[r29 + 24<i32>:word64] = r23_r22
	Mem0[r29:word32] = r17
	Mem0[r29 + 8<i32>:word64] = r27_r26
	call logmsg_function (retsize: 0;)
	r2 = Mem0[r17 + 16<i32>:word32]
	r1 = 0x43E<32>
	r3 = 0x0002868E<p32>
	branch r4 >u r2 l00019418
	// succ:  l00019284 l00019418
l00019284:
	r4 = 0xA<32>
	p0 = r2 >u 0xB<32>
	r1 = 0x43F<32>
	r3 = 0x00019292<p32>
	r1 = 0x440<32>
	branch p0 l00019418
	// succ:  l00019294 l00019418
l00019294:
	r3 = 0x000286A7<p32>
	branch r4 == 3<32> l00019418
	// succ:  l000192A8 l00019418
l000192A8:
	r4 = Mem0[r17 + 20<i32>:word32]
	r1 = 0x441<32>
	r3 = 0x000192C5<p32>
	branch r24 == 0<32> l00019418
	// succ:  l000192BC l00019418
l000192BC:
	r24 = Mem0[r17 + 4<i32>:word32]
	r1 = 0x442<32>
	r3 = 0x000192D1<p32>
	branch r4 == 0<32> l00019418
	// succ:  l000192D0 l00019418
l000192D0:
	r4 = Mem0[r17 + 8<i32>:word32]
	r21 = 0<32>
	r5 = 0<32>
	r6 = 0<32>
	r3 = r24
	__loop(0<i32>, 0x000192E0<p32>, r2)
	branch r7 == 0<32> l000192F4
	// succ:  l000192EC l000192F4
l000192EC:
	r7 = Mem0[r3:word32]
	r6 = r6
	r3 = r3 + 4<32>
	goto l00019314
	// succ:  l00019314
l000192F4:
	Mem0[r29:word32] = r6
	r1 = 0x445<32>
	r3 = 0x000286DA<p32>
	goto l00019418
	// succ:  l00019418
l00019308:
	branch r5 >u 2<32> l00019330
l0001930C:
	branch r5 >u 2<32> l00019334
	// succ:  l00019318 l00019330 l00019334
l00019314:
	branch r2 == 0<32> l00019308
	goto l00019320
	// succ:  l00019320 l00019308
l00019318:
	r5 = r5 + 1<32>
	r4 = r4 + 4<32>
	branch r2 == 0<32> l0001930C
	// succ:  l00019320 l0001930C
l00019320:
	r2 = Mem0[r4:word32]
	Mem0[r29:word32] = r5
	r1 = 0x44A<32>
	r3 = 0x0001932C<p32>
	goto l00019418
	// succ:  l00019418
l00019330:
	r3 = Mem0[r24 + 20<i32>:word32]
	r2 = Mem0[r24 + 16<i32>:word32]
	goto l00019338
	// succ:  l00019338
l00019334:
	r3 = Mem0[r24 + 20<i32>:word32]
	// succ:  l00019338
l00019338:
	r4 = Mem0[r24 + 4<i32>:word32]
	r3 = Mem0[r3 + 16<i32>:word32]
	r2 = Mem0[r2 + 16<i32>:word32]
	r22 = Mem0[r4 + 8<i32>:word32]
	r18 = Mem0[r4 + 16<i32>:word32]
	r2 = Mem0[r3:word32]
	r20 = Mem0[r2:word32]
	r25 = Mem0[r4:word32]
	r23 = Mem0[r4 + 4<i32>:word32]
	r0 = r2 - r20
	r19 = Mem0[r4 + 12<i32>:word32]
	call fmaxf.1.0 (retsize: 0;)
	r2 = 0x437F0000<32>
	r1_r0 = r0_r2
	call fn00009610 (retsize: 0;)
	r2 = 0<32>
	r2 = r2 - r20
	call fn00009620 (retsize: 0;)
	r0 = r2 * r0
	r2 = r0
	r0 = 0xC<32>
	call fn00009500 (retsize: 0;)
	r26 = truncf(CONVERT(r2, uint32, real32))
	r1 = 0x460<32>
	r2 = r23 * r25
	r3 = 0x000286F7<p32>
	branch r20 == 0<32> l00019418
	// succ:  l000193B0 l00019418
l000193B0:
	r20 = r0
	p0 = r26 > 0xFF<32>
	p2 = r21 == 0xB<32>
	r25 = 0xFF<32>
	p1 = r26 > 0xFFFFFFFF<32>
	r3 = r19 + 0x1F<32>
	Mem0[r20 + 8<i32>:word32] = 0<32>
	r25 = CONVERT(SLICE(r26, byte, 0), byte, uint32)
	r21 = r3 & 0xFFFFFFE0<32>
	r23 = r2 * r22
	Mem0[r20 + 1056964612<i32>:word32] = 0<32>
	r25 = 0<32>
	r22 = r4 & 0xFFFFFFF0<32>
	branch p2 l000193F8
	// succ:  l000193E4 l000193F8
l000193E4:
	r1 = r22 * r21
	Mem0[r20 + 8<i32>:word32] = 1<32>
	r2 = Mem0[r24 + 40<i32>:word32]
	r2 = Mem0[r2 + 16<i32>:word32]
	r2 = Mem0[r2:word32]
	Mem0[r20 + 4<i32>:word32] = r2
	// succ:  l000193F8
l000193F8:
	Mem0[r17 + 40<i32>:word32] = r20
	r0 = 0x80<32>
	call fn00009550 (retsize: 0;)
	Mem0[r20:word32] = r0
	r1 = 0x46B<32>
	r3 = 0x0002870E<p32>
	branch p0 l00019428
	// succ:  l00019418 l00019428
l00019418:
	r2 = r16
	call errlog_function (retsize: 0;)
	r0 = 0xFFFFFFFF<32>
	goto l0001947C
	// succ:  l0001947C
l00019428:
	call nn_os_vector_acquire (retsize: 0;)
	r3 = Mem0[r16 + 4<i32>:word32]
	r1_r0 = r23_r18
	r5_r4 = r21_r22
	r24 = r0
	Mem0[r29:word32] = r25
	r2 = r19
	call pad2d (retsize: 0;)
	r3 = Mem0[r20:word32]
	r0 = Mem0[r16 + 4<i32>:word32]
	r1 = r22
	r2 = r21
	call transpack (retsize: 0;)
	r0 = r24
	call nn_os_vector_release (retsize: 0;)
	r1 = 0x471<32>
	r3_r2 = SEQ(2<32>, r16)
	r4 = 0x0002873F<p32>
	Mem0[r29:word32] = r17
	call logmsg_function (retsize: 0;)
	r0 = 0<32>
	// succ:  l0001947C
l0001947C:
	r19_r18 = Mem0[r29 + 40<i32>:word64]
	r17_r16 = Mem0[r29 + 48<i32>:word64]
	r23_r22 = Mem0[r29 + 24<i32>:word64]
	r21_r20 = Mem0[r29 + 32<i32>:word64]
	r27_r26 = Mem0[r29 + 8<i32>:word64]
	r25_r24 = Mem0[r29 + 16<i32>:word64]
	v29 = r30
	r31 = Mem0[v29 + 4<i32>:word32]
	r30 = Mem0[v29:word32]
	r29 = v29 + 8<i32>
	return
	// succ:  supernode_check_ref_exit
supernode_check_ref_exit:


// supernode_dtor
// Return size: 0
define supernode_dtor
supernode_dtor_entry:
	r29 = fp
	// succ:  l00019490
l00019490:
	v4 = r29 - 8<i32>
	Mem0[v4:word32] = r30
	Mem0[v4 + 4<i32>:word32] = r31
	r30 = v4
	r29 = v4 - 16<i32>
	Mem0[r29 - 16<i32>:word64] = r17_r16
	r17_r16 = r1_r0
	Mem0[r29:word64] = r19_r18
	branch r18 == 0<32> l000194B4
	// succ:  l000194A8 l000194B4
l000194A8:
	r18 = Mem0[r16 + 40<i32>:word32]
	r0 = Mem0[r18:word32]
	r0 = r18
	call fn00009510 (retsize: 0;)
	// succ:  l000194B4
l000194B4:
	r19_r18 = Mem0[r29:word64]
	r17_r16 = Mem0[r29 + 8<i32>:word64]
	r1_r0 = r17_r16
	v15 = r30
	r31 = Mem0[v15 + 4<i32>:word32]
	r30 = Mem0[v15:word32]
	r29 = v15 + 8<i32>
	// succ:  l000194BC_thunk_node_free_common
l000194BC_thunk_node_free_common:
	call node_free_common (retsize: 0;)
	return
	// succ:  supernode_dtor_exit
supernode_dtor_exit:


// supernode_execute_ref
// Return size: 0
define supernode_execute_ref
supernode_execute_ref_entry:
	r29 = fp
	// succ:  l000194C4
l000194C4:
	v4 = r29 - 8<i32>
	Mem0[v4:word32] = r30
	Mem0[v4 + 4<i32>:word32] = r31
	r30 = v4
	r29 = v4 - 184<i32>
	r3 = Mem0[r0 + 8<i32>:word32]
	r2 = Mem0[r0 + 4<i32>:word32]
	Mem0[r29 + 136<i32>:word64] = r27_r26
	Mem0[r29 + 160<i32>:word64] = r21_r20
	r7 = Mem0[r2 + 8<i32>:word32]
	r4 = Mem0[r2:word32]
	r20 = Mem0[r2:word32]
	r26 = Mem0[r0 + 32<i32>:int8]
	Mem0[r29 + 64<i32>:word32] = r7
	Mem0[r29 + 92<i32>:word32] = r4
	p0 = r26 == 0<32>
	r7 = Mem0[r2 + 20<i32>:word32]
	r4 = Mem0[r2 + 12<i32>:word32]
	Mem0[r29 + 168<i32>:word64] = r19_r18
	r5 = Mem0[r2 + 24<i32>:word32]
	Mem0[r29 + 56<i32>:word32] = r4
	Mem0[r29 + 88<i32>:word32] = r7
	r4 = Mem0[r2 + 28<i32>:word32]
	r18 = Mem0[r2 + 4<i32>:word32]
	r7 = Mem0[r2 + 4<i32>:word32]
	Mem0[r29 + 96<i32>:word32] = r4
	Mem0[r29 + 176<i32>:word64] = r17_r16
	Mem0[r29 + 84<i32>:word32] = r7
	r4 = Mem0[r3 + 8<i32>:word32]
	r3 = Mem0[r3 + 4<i32>:word32]
	r7 = Mem0[r3:word32]
	Mem0[r29 + 152<i32>:word64] = r23_r22
	r16 = Mem0[r20 + 8<i32>:word32]
	Mem0[r29 + 112<i32>:word32] = r0
	Mem0[r29 + 144<i32>:word64] = r25_r24
	Mem0[r29 + 72<i32>:word32] = r1
	r0 = r16
	Mem0[r29 + 48<i32>:word32] = r3
	r17 = Mem0[r2 + 16<i32>:word32]
	r19 = Mem0[r20:word32]
	r2 = Mem0[r18:word32]
	r21 = Mem0[r20 + 12<i32>:word32]
	r23 = Mem0[r20 + 4<i32>:word32]
	r22 = Mem0[r18 + 4<i32>:word32]
	r24 = Mem0[r18 + 12<i32>:word32]
	r3 = Mem0[r5 + 4<i32>:word32]
	r1 = Mem0[r5 + 8<i32>:word32]
	Mem0[r29 + 128<i32>:word32] = r2
	Mem0[r29 + 124<i32>:word32] = r7
	r2 = p0
	r7 = Mem0[r18 + 8<i32>:word32]
	Mem0[r29 + 44<i32>:word32] = r4
	Mem0[r29 + 52<i32>:word32] = r5
	Mem0[r29 + 80<i32>:word32] = r2
	Mem0[r29 + 100<i32>:word32] = r7
	r2 = r16 - r22
	branch p0 l0001957C
	// succ:  l00019550 l0001957C
l00019550:
	Mem0[r29 + 104<i32>:word32] = r1
	r27 = 0<32>
	p0 = r26 == 2<32>
	branch p0 l00019578
	// succ:  l00019560 l00019578
l00019560:
	r1 = Mem0[r29 + 104<i32>:word32]
	p0 = r26 == 1<32>
	branch p0 l00019590
	// succ:  l0001956C l00019590
l0001956C:
	r0 = r1
	goto l0001957C
	// succ:  l0001957C
l00019578:
	r0 = r2 + r1
	// succ:  l0001957C
l0001957C:
	Mem0[r29 + 104<i32>:word32] = r1
	r27 = r3
	call fn00009760 (retsize: 0;)
	r27 = r0
	r3 = r27
	// succ:  l00019590
l00019590:
	r26 = r23 + 0<32>
	p0 = r26 == 2<32>
	r1_r0 = r3_r3
	branch p0 l000195D0
	// succ:  l000195A0 l000195D0
l000195A0:
	r26 = r23 + 0<32>
	p0 = r26 == 1<32>
	branch p0 l000195C8
	// succ:  l000195AC l000195C8
l000195AC:
	r1 = Mem0[r29 + 80<i32>:word64]
	r0 = 0<32>
	r23 = r3
	r26 = r23
	r1_r0 = r23_r26
	branch p0 l000195E8
	// succ:  l000195C4 l000195E8
l000195C4:
	p0 = r1
	goto l000195E4
	// succ:  l000195E4
l000195C8:
	goto l000195E0
	// succ:  l000195E0
l000195D0:
	r2 = Mem0[r29 + 128<i32>:word32]
	r1 = r3
	r2 = r26 - r2
	r0 = r2 + r3
	// succ:  l000195E0
l000195E0:
	r23 = r3
	// succ:  l000195E4
l000195E4:
	call fn00009760 (retsize: 0;)
	// succ:  l000195E8
l000195E8:
	r2 = Mem0[r29 + 56<i32>:word64]
	r3 = Mem0[r29 + 64<i32>:word64]
	r4 = r19
	r6 = Mem0[r29 + 88<i32>:word64]
	r1 = Mem0[r29 + 92<i32>:word64]
	r19 = 0x437F0000<32>
	r2 = Mem0[r2 + 16<i32>:word32]
	r3 = Mem0[r3 + 16<i32>:word32]
	Mem0[r29 + 68<i32>:word32] = r4
	r7 = Mem0[r29 + 84<i32>:word64]
	r4 = r27 * r4
	r3 = Mem0[r1 + 16<i32>:word32]
	r12 = Mem0[r3:word32]
	r1 = r19
	r2 = Mem0[r2:word32]
	r8 = Mem0[r29 + 96<i32>:word32]
	r13 = Mem0[r29 + 124<i32>:word32]
	r5 = Mem0[r17 + 16<i32>:word32]
	r17 = Mem0[r3:word32]
	r9 = Mem0[r8 + 16<i32>:word32]
	r3 = r4 * r0
	r7 = Mem0[r7 + 16<i32>:word32]
	r6 = Mem0[r6 + 16<i32>:word32]
	r25 = r3 * r24
	Mem0[r29 + 80<i32>:word32] = r0
	r8 = Mem0[r29 + 72<i32>:word32]
	r0 = r2 - r12
	r14 = Mem0[r18 + 16<i32>:word32]
	Mem0[r29 + 76<i32>:word32] = r23
	Mem0[r29 + 60<i32>:word32] = r26
	r26 = r0
	Mem0[r29 + 108<i32>:word32] = r27
	r27 = Mem0[r20 + 16<i32>:word32]
	Mem0[r29 + 56<i32>:word32] = r9
	r15 = Mem0[r13 + 16<i32>:word32]
	r9 = Mem0[r8 + 4<i32>:word32]
	Mem0[r29 + 36<i32>:word32] = r15
	Mem0[r29 + 64<i32>:word32] = r12
	Mem0[r29 + 96<i32>:word32] = r14
	Mem0[r29 + 40<i32>:word32] = r9
	r18 = Mem0[r6:word32]
	r23 = Mem0[r5:word32]
	Mem0[r29 + 28<i32>:word32] = r3
	r20 = Mem0[r7:word32]
	call fn00009610 (retsize: 0;)
	Mem0[r29 + 84<i32>:word32] = r0
	r2 = r18 - r23
	Mem0[r29 + 88<i32>:word32] = r2
	r1_r0 = r19_r2
	call fn00009610 (retsize: 0;)
	r18 = r0
	r2 = r20 - r17
	Mem0[r29 + 92<i32>:word32] = r2
	r1_r0 = r19_r2
	call fn00009610 (retsize: 0;)
	r2 = Mem0[r29 + 84<i32>:word32]
	Mem0[r29 + 8<i32>:byte] = r18
	r18 = r2 * r18
	r1 = r18
	Mem0[r29 + 84<i32>:word32] = r0
	r1_r0 = r18_r20
	call fn00009610 (retsize: 0;)
	r0 = r26
	r2 = r0
	Mem0[r29 + 6<i32>:byte] = r2
	call fmaxf.1.0 (retsize: 0;)
	r2 = truncf(CONVERT(r2, uint32, real32))
	r1_r0 = r0_r19
	r2 = Mem0[r29 + 64<i32>:word64]
	r18 = 0<32>
	r2 = r18 - r2
	call fn00009620 (retsize: 0;)
	r0 = r2 * r0
	r0 = Mem0[r29 + 88<i32>:word64]
	r2 = r0
	Mem0[r29 + 22<i32>:byte] = r2
	call fmaxf.1.0 (retsize: 0;)
	r2 = truncf(CONVERT(r2, uint32, real32))
	r2 = 0<32>
	r1_r0 = r0_r2
	call fn00009610 (retsize: 0;)
	r20 = Mem0[r29 + 108<i32>:word32]
	r2 = r18 - r23
	call fn00009620 (retsize: 0;)
	r0 = r2 * r0
	r0 = Mem0[r29 + 92<i32>:word64]
	r2 = r0
	Mem0[r29 + 16<i32>:byte] = r2
	call fmaxf.1.0 (retsize: 0;)
	r2 = truncf(CONVERT(r2, uint32, real32))
	r2 = 0<32>
	r1_r0 = r0_r2
	call fn00009610 (retsize: 0;)
	r2 = r18 - r17
	call fn00009620 (retsize: 0;)
	r0 = r2 * r0
	r19 = Mem0[r29 + 72<i32>:word64]
	r17 = Mem0[r29 + 112<i32>:word64]
	r4 = 0x0002851F<p32>
	r3_r2 = SEQ(2<32>, r19)
	r1 = 0xEF<32>
	r18 = truncf(CONVERT(r0, uint32, real32))
	Mem0[r29 + 1<i32>:byte] = r5
	r5 = Mem0[r17 + 28<i32>:word32]
	Mem0[r29:word32] = r17
	Mem0[r29 + 12<i32>:word32] = r21
	r3_r2 = SEQ(2<32>, r19)
	r4 = 0x00028540<p32>
	r1 = 0xF0<32>
	Mem0[r29 + 8<i32>:word32] = r16
	r5 = Mem0[r29 + 60<i32>:word64]
	r23 = r19
	Mem0[r29 + 4<i32>:word32] = r5
	r19 = Mem0[r29 + 68<i32>:word64]
	Mem0[r29:word32] = r19
	call logmsg_function (retsize: 0;)
	r26 = Mem0[r29 + 100<i32>:word32]
	r3_r2 = SEQ(2<32>, r23)
	r4 = 0x0002855C<p32>
	Mem0[r29 + 12<i32>:word32] = r26
	r5 = Mem0[r29 + 128<i32>:word32]
	Mem0[r29 + 8<i32>:word32] = r22
	r1 = 0xF1<32>
	Mem0[r29:word32] = r24
	Mem0[r29 + 4<i32>:word32] = r5
	call logmsg_function (retsize: 0;)
	r3_r2 = SEQ(2<32>, r23)
	r4 = 0x00028577<p32>
	r7 = Mem0[r29 + 104<i32>:word32]
	r1 = 0xF2<32>
	Mem0[r29 + 4<i32>:word32] = r7
	r5 = Mem0[r29 + 76<i32>:word64]
	Mem0[r29:word32] = r5
	call logmsg_function (retsize: 0;)
	r1 = 0xF3<32>
	r3_r2 = SEQ(2<32>, r23)
	r4 = 0x0002858E<p32>
	Mem0[r29:byte] = r5
	r5 = Mem0[r17 + 32<i32>:byte]
	call logmsg_function (retsize: 0;)
	Mem0[r29 + 12<i32>:word32] = r24
	r5 = Mem0[r29 + 80<i32>:word32]
	r4 = 0x00019827<p32>
	Mem0[r29:word32] = r19
	Mem0[r29 + 4<i32>:word32] = r5
	r3_r2 = SEQ(2<32>, r23)
	Mem0[r29 + 8<i32>:word32] = r20
	r17 = r5
	r1 = 0xF4<32>
	call logmsg_function (retsize: 0;)
	p0 = r21 == r26
	r1 = 0xF5<32>
	r3 = 0x000285C2<p32>
	r2 = Mem0[r23 + 8<i32>:word32]
	r3 = r25 + r24
	branch p0 l00019900
	// succ:  l00019850 l00019900
l00019850:
	r7_r6 = __simd_shl<word64,word32>(r25_r24, 2<32>)
	branch r3 >u r2 l00019874
	// succ:  l00019860 l00019874
l00019860:
	r3 = 0x81<32> & r3 << 4<32>
	Mem0[r29 + 4<i32>:word32] = r2
	r1 = 0xF7<32>
	r3 = 0x0001989B<p32>
	Mem0[r29:word32] = r7
	r2 = r23
	goto l00019904
	// succ:  l00019904
l00019874:
	r2 = Mem0[r29 + 124<i32>:word32]
	branch r25 >u r4 l0001989C
	// succ:  l00019888 l0001989C
l00019888:
	r4 = Mem0[r2 + 20<i32>:word32]
	r5 = r2
	Mem0[r29 + 4<i32>:word32] = r25
	r1 = 0xFA<32>
	r3 = 0x000198B5<p32>
	Mem0[r29:word32] = r4
	r2 = r23
	goto l00019904
	// succ:  l00019904
l0001989C:
	r2 = Mem0[r29 + 52<i32>:word32]
	r1 = 0xFC<32>
	r3 = 0x0002860B<p32>
	branch r2 == 1<32> l00019900
	// succ:  l000198B8 l00019900
l000198B8:
	r2 = Mem0[r2:word32]
	r2 = Mem0[r29 + 52<i32>:word32]
	r1 = 0xFD<32>
	r3 = 0x000198E0<p32>
	branch r2 == 1<32> l00019900
	// succ:  l000198D0 l00019900
l000198D0:
	r2 = Mem0[r2 + 12<i32>:word32]
	r2 = Mem0[r29 + 48<i32>:word64]
	r4 = 4<32>
	r3 = 0x000198F1<p32>
	r1 = 0xFE<32>
	branch r4 >u r2 l00019900
	// succ:  l000198E8 l00019900
l000198E8:
	r2 = Mem0[r2 + 20<i32>:word32]
	r2 = Mem0[r29 + 44<i32>:word32]
	r1 = 0xFF<32>
	r3 = 0x000198FF<p32>
	branch r2 >u 3<32> l00019910
	goto l00019904
	// succ:  l00019904 l00019910
l00019900:
	r2 = r23
	// succ:  l00019904
l00019904:
	call errlog_function (retsize: 0;)
	r0 = 0xFFFFFFFF<32>
	goto l00019CD4
	// succ:  l00019CD4
l00019910:
	Mem0[r5 + 24<i32>:word32] = r25
	r2 = Mem0[r29 + 68<i32>:word32]
	r0 = p0
	Mem0[r5:word32] = r2
	r23 = Mem0[r29 + 56<i32>:word64]
	r2 = 0<32>
	Mem0[r29 + 112<i32>:word64] = r7_r6
	r3 = Mem0[r29 + 84<i32>:word64]
	Mem0[r5 + 8<i32>:word32] = r20
	Mem0[r5 + 4<i32>:word32] = r17
	r20 = r24 + 0<32>
	Mem0[r29 + 20<i32>:word32] = r0
	Mem0[r5 + 12<i32>:word32] = r24
	branch p0 l00019974
	// succ:  l0001993C l00019974
l0001993C:
	r26 = Mem0[r29 + 40<i32>:word32]
	r18 = max<int32>(r18, r2)
	r23 = r23 + 1<i32>
	r2 = Mem0[r23:byte]
	r19 = r3
	r2 = r2 - r18
	r2 = CONVERT(r2, int32, real32)
	r20 = r20 + 0xFFFFFFFF<32>
	call fn00009620 (retsize: 0;)
	r0 = r3 * r2
	Mem0[r26:word32] = r2
	r26 = r26 + 4<i32>
	p0 = r20 == 0<32>
	r3 = r19
	r2 = truncf(CONVERT(r0, uint32, real32))
	// succ:  l00019974
l00019974:
	r1_r0 = Mem0[r29 + 112<i32>:word64]
	r2 = Mem0[r29 + 40<i32>:word64]
	r9 = r17
	r14 = 0<32>
	r18 = Mem0[r29 + 108<i32>:word64]
	r3 = Mem0[r29 + 68<i32>:word64]
	r13 = Mem0[r29 + 60<i32>:word32]
	r0 = Mem0[r29 + 20<i32>:word32]
	p0 = r3 > 0<32>
	r2 = r2 + (r0 + 0x7F<32>)
	r3 = Mem0[r29 - 128<i32>:word32]
	r12 = Mem0[r29 + 64<i32>:word32]
	r2 = r2 & 0xFFFFFF80<32>
	p1 = r0
	Mem0[r29 + 92<i32>:word32] = r2
	r8 = r9 + 0xFFFFFFFF<32>
	r2 = r22 - r16
	branch p0 l00019BD0
	// succ:  l000199B4 l00019BD0
l000199B4:
	r5 = Mem0[r29 + 104<i32>:word64]
	r4 = r18
	p2 = r12 > 0xFF<32>
	p3 = r12 > 0xFFFFFFFF<32>
	r1 = Mem0[r29 + 88<i32>:word32]
	r14 = 0<32>
	r6 = 0xFF<32>
	r7 = r22 * r21
	r2 = Mem0[r29 + 76<i32>:word64]
	r5 = 0<32>
	r3 = r3 - r13
	r4 = r2 + r4 * r5
	p0 = r1 > 0xFF<32>
	r4 = r4 + (r4 >>u 0x1F<32>)
	r7 = r7 * r24
	Mem0[r29 + 31<i32>:byte] = r0
	r2 = r6 + 0<32>
	r0 = p3
	r8 = r3 + r8 * r2
	r0 = Mem0[r29 + 124<i32>:word32]
	r6 = CONVERT(SLICE(r12, byte, 0), byte, uint32)
	p3 = r1 > 0xFFFFFFFF<32>
	Mem0[r29 + 52<i32>:word32] = r5
	r3 = 0<32>
	p0 = r0
	r8 = r8 + (r8 >>u 0x1F<32>)
	r6 = r3 + 0<32>
	r2 = r3 + 0<32>
	r5 = r21 * r24
	Mem0[r29 + 22<i32>:byte] = r1
	r1 = r4 >> 1<32>
	Mem0[r29 + 56<i32>:word32] = r3
	// succ:  l00019A30
l00019A30:
	r3 = Mem0[r29 + 52<i32>:word32]
	p0 = r9 > 0<32>
	r15 = 0<32>
	branch p0 l00019BC0
	// succ:  l00019A40 l00019BC0
l00019A40:
	r12 = r3 * r13
	Mem0[r29 + 16<i32>:byte] = r3
	r3 = r3 * r9
	// succ:  l00019A4C
l00019A4C:
	Mem0[r29 + 84<i32>:word32] = r15
	r9 = 0<32>
	Mem0[r29 + 84<i32>:word32] = r15
	// succ:  l00019BB0
l00019BB0:
	r9 = Mem0[r29 + 80<i32>:word32]
	r15 = Mem0[r29 + 84<i32>:word32]
	branch r15 == r9 l00019A4C
	goto l00019BC4
	// succ:  l00019BC4 l00019A4C
l00019BC0:
	r3 = Mem0[r29 + 68<i32>:word64]
	r4 = Mem0[r29 + 52<i32>:word64]
	// succ:  l00019BC4
l00019BC4:
	r15 = r15 + 1<32>
	r4 = r4 + 1<32>
	Mem0[r29 + 52<i32>:word32] = r4
	branch p0 l00019A30
	// succ:  l00019BD0 l00019A30
l00019BD0:
	r2 = Mem0[r29 + 24<i32>:word32]
	r16 = r9
	r19 = r14 + r2
	r1_r0 = SEQ(r19, 0xFF0000<32>)
	call fn00009760 (retsize: 0;)
	r2 = Mem0[r29 + 28<i32>:word64]
	r3 = Mem0[r29 + 20<i32>:word64]
	r12 = r16
	r14 = Mem0[r29 + 40<i32>:word32]
	r13 = Mem0[r29 + 36<i32>:word32]
	p1 = r3
	r4 = r12 * r18
	r5 = Mem0[r29 + 68<i32>:word32]
	branch p0 l00019C74
	// succ:  l00019C08 l00019C74
l00019C08:
	p0 = r2 > 0<32>
	r3_r2 = 0x10000000000<64>
	r4 = r4 * r5
	__loop(1<i32>, 0x00019C18<p32>, r4)
	r5_r4 = r13_r14
	r7 = Mem0[r29 + 92<i32>:word32]
	branch p1 l00019C68
	// succ:  l00019C24 l00019C68
l00019C24:
	r6 = r3 * r24
	__loop(0<i32>, 0x00019C30<p32>, r24)
	r6 = r7 + (r6 << 2<32>)
	r4 = r4 + 4<i32>
	r8 = Mem0[r4:word32]
	r7 = 0<32>
	r6 = r6 + 4<i32>
	r9 = Mem0[r6:word32]
	r8 = r9 + r8
	r8 = 0x8000<32> + r8 * r0
	branch r8 > -1<i32> l00019C5C
	// succ:  l00019C54 l00019C5C
l00019C54:
	r8 = r8 >> 0x10<32>
	r7 = 0xFF<32>
	p0 = r2 > r8
	// succ:  l00019C5C
l00019C5C:
	Mem0[r5:byte] = r7
	r5 = r5 + 1<i32>
	r13 = r13 + r24
	// succ:  l00019C68
l00019C68:
	r3 = r3 + 1<32>
	// succ:  l00019C74
l00019C74:
	r6 = Mem0[r29 + 44<i32>:word64]
	r4 = Mem0[r29 + 48<i32>:word64]
	r1 = 0x152<32>
	r3 = CONVERT(r19, int32, real32)
	r5 = Mem0[r29 + 32<i32>:word32]
	Mem0[r4 + 12<i32>:word32] = 1<32>
	r2 = Mem0[r4 + 16<i32>:word32]
	Mem0[r4 + 4<i32>:word32] = 1<32>
	Mem0[r4 + 8<i32>:word32] = 1<32>
	r3 = 2<32>
	r5 = r5 * r3
	Mem0[r2:word32] = 0<32>
	Mem0[r4:word32] = 1<32>
	Mem0[r6:word32] = 1<32>
	Mem0[r4 + 24<i32>:word32] = 4<32>
	r4 = 0x00028649<p32>
	Mem0[r6 + 8<i32>:word32] = 1<32>
	r2 = Mem0[r6 + 16<i32>:word32]
	Mem0[r6 + 4<i32>:word32] = 1<32>
	Mem0[r6 + 12<i32>:word32] = 1<32>
	Mem0[r6 + 24<i32>:word32] = 4<32>
	Mem0[r2:word32] = r5
	Mem0[r29 + 12<i32>:word32] = r24
	r2 = Mem0[r29 + 72<i32>:word32]
	Mem0[r29 + 8<i32>:word32] = r18
	r5 = Mem0[r29 + 68<i32>:word64]
	Mem0[r29:word32] = r5
	Mem0[r29 + 4<i32>:word32] = r12
	call logmsg_function (retsize: 0;)
	r0 = 0<32>
	// succ:  l00019CD4
l00019CD4:
	r19_r18 = Mem0[r29 + 168<i32>:word64]
	r17_r16 = Mem0[r29 + 176<i32>:word64]
	r23_r22 = Mem0[r29 + 152<i32>:word64]
	r21_r20 = Mem0[r29 + 160<i32>:word64]
	r27_r26 = Mem0[r29 + 136<i32>:word64]
	r25_r24 = Mem0[r29 + 144<i32>:word64]
	v50 = r30
	r31 = Mem0[v50 + 4<i32>:word32]
	r30 = Mem0[v50:word32]
	r29 = v50 + 8<i32>
	return
	// succ:  supernode_execute_ref_exit
supernode_execute_ref_exit:


