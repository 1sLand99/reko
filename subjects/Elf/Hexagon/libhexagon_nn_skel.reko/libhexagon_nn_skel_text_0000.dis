// hexagon_nn_skel_invoke
// Return size: 0
define hexagon_nn_skel_invoke
hexagon_nn_skel_invoke_entry:
	r29 = fp
	// succ:  l00009840
l00009840:
	v4 = r29 - 8<i32>
	Mem0[v4:word32] = r30
	Mem0[v4 + 4<i32>:word32] = r31
	r30 = v4
	r29 = v4 - 120<i32>
	Mem0[r29 + 496<i32>:word64] = r17_r16
	r2 = badva + 0x10<32>
	Mem0[r29 + 80<i32>:word64] = r25_r24
	Mem0[r29 + 88<i32>:word64] = r23_r22
	r17_r16 = r0_r1
	Mem0[r29 + 96<i32>:word64] = r21_r20
	Mem0[r29 + 104<i32>:word64] = r19_r18
	r18 = 0x14<32>
	r3 = CONVERT(SLICE(r17, ui29, 5), ui29, uint32)
	Mem0[r29 + 72<i32>:word64] = r27_r26
	r20 = Mem0[r2 - 336<i32>:word32]
	r21 = Mem0[r2 - 352<i32>:word32]
	r19 = Mem0[r2 - 320<i32>:word32]
	p0 = r3 >u 0x14<32>
	r2 = Mem0[r2 - 304<i32>:word32]
	branch p0 l0000A644
	// succ:  l00009890 l0000A644
l00009890:
	r4 = badva + 0x18<32>
	r3 = Mem0[r14 + r3 * 4<32>:word32]
	r3 = r3 + r4
	call r3 (retsize: 0;)
	return
	// succ:  hexagon_nn_skel_invoke_exit
l0000A644:
	r0 = r18
	r19_r18 = Mem0[r29 + 104<i32>:word64]
	r17_r16 = Mem0[r29 + 112<i32>:word64]
	r23_r22 = Mem0[r29 + 88<i32>:word64]
	r21_r20 = Mem0[r29 + 96<i32>:word64]
	r27_r26 = Mem0[r29 + 72<i32>:word64]
	r25_r24 = Mem0[r29 + 80<i32>:word64]
	v27 = r30
	r31 = Mem0[v27 + 4<i32>:word32]
	r30 = Mem0[v27:word32]
	r29 = v27 + 8<i32>
	return
	// succ:  hexagon_nn_skel_invoke_exit
hexagon_nn_skel_invoke_exit:


// allocate_graph_storage
// Return size: 0
define allocate_graph_storage
allocate_graph_storage_entry:
	r29 = fp
	// succ:  l0000A6C0
l0000A6C0:
	v4 = r29 - 8<i32>
	Mem0[v4:word32] = r30
	Mem0[v4 + 4<i32>:word32] = r31
	r30 = v4
	r29 = v4 - 32<i32>
	r3 = 0<32>
	r2 = 0x80<32>
	Mem0[r29 + 16<i32>:word64] = r19_r18
	Mem0[r29 + 24<i32>:word64] = r17_r16
	r16 = r0
	r4 = 0x80<32>
	r1 = r16 + 0x28<32>
	Mem0[r16 + 48<i32>:word32] = r4
	Mem0[r29 + 8<i32>:word64] = r21_r20
	call prefree (retsize: 0;)
	r17 = Mem0[r16:word32]
	r0 = r16 + 0<32>
	branch p0 l0000A7C0
	// succ:  l0000A6F4 l0000A7C0
l0000A6F4:
	p0 = r9 == 0<32>
	branch r2 == 0<32> l0000A7BC
	// succ:  l0000A700 l0000A7BC
l0000A700:
	r2 = Mem0[r17 + 20<i32>:word32]
	r3 = Mem0[r17 + 8<i32>:word32]
	r3 = Mem0[r29 + r20:word32]
	// succ:  l0000A708
l0000A708:
	branch r4 == 0<32> l0000A7B0
	// succ:  l0000A714 l0000A7B0
l0000A714:
	r4 = Mem0[r3 + 20<i32>:word32]
	branch r3 == 0<32> l0000A7B0
	// succ:  l0000A71C l0000A7B0
l0000A71C:
	r1_r0 = r17_r16
	r2 = r18
	r5_r4 = 0<64>
	r19 = r0
	r2 = badva + 0x2C<32>
	r6 = Mem0[r2 - 208<i32>:word32]
	r3_r2 = 0xD<64>
	r6 = Mem0[r6 + 52<i32>:word32]
	Mem0[r29 + 4<i32>:word32] = 0xFFFFFF80<32>
	r6 = Mem0[r6 + 8<i32>:word32]
	Mem0[r29:word32] = 0<32>
	call r6 (retsize: 0;)
	r2 = Mem0[r17 + 8<i32>:word32]
	branch p0 l0000A794
	// succ:  l0000A75C l0000A794
l0000A75C:
	p0 = r0 == 0<32>
	r2 = r16
	r1 = 0xF9<32>
	r3 = badva + 2<32>
	call errlog_function (retsize: 0;)
	r2 = r16
	r1 = 0x110<32>
	r3 = badva + 0x21<32>
	call errlog_function (retsize: 0;)
	r1 = 0x14C<32>
	goto l0000A8E8
	// succ:  l0000A8E8
l0000A794:
	r2 = Mem0[r13 + r20:word32]
	Mem0[r0 + 2<i32>:byte] = r2
	r2 = r2 + 0x1C<32>
	Mem0[r19 + 36<i32>:word32] = r0
	Mem0[r0 + 36<i32>:word32] = r7
	r2 = Mem0[r17 + 20<i32>:word32]
	branch r2 >u r18 l0000A708
	goto l0000A7BC
	// succ:  l0000A7BC l0000A708
l0000A7B0:
	branch r2 >u r18 l0000A708
	// succ:  l0000A7BC l0000A708
l0000A7BC:
	r18 = r18 + 1<32>
	r20 = r20 + 4<32>
	r17 = Mem0[r17 + 36<i32>:word32]
	// succ:  l0000A7C0
l0000A7C0:
	call allocate_and_free (retsize: 0;)
	p0 = r0 == 0<32>
	r1 = 0x14E<32>
	r3 = badva + 0x16<32>
	r2 = Mem0[r16:word32]
	branch p0 l0000A8E0
	// succ:  l0000A7DC l0000A8E0
l0000A7DC:
	r3 = Mem0[r2 + 24<i32>:word32]
	r0 = r16 + 0<32>
	branch p0 l0000A800
	// succ:  l0000A7E8 l0000A800
l0000A7E8:
	p0 = r2 == 0<32>
	p0 = r3 == 0xD<32>
	r3 = Mem0[r2 + 8<i32>:word32]
	r3 = Mem0[r3:word32]
	Mem0[r3 + 16<i32>:word32] = 0<32>
	r2 = Mem0[r2 + 36<i32>:word32]
	goto l0000A7DC
	// succ:  l0000A7DC
l0000A800:
	call check_allocations (retsize: 0;)
	p0 = r0 == 0<32>
	r1 = 0x155<32>
	r3 = badva + 0x21<32>
	r0 = r16 + 0<32>
	branch p0 l0000A8E0
	// succ:  l0000A81C l0000A8E0
l0000A81C:
	call check_allocations (retsize: 0;)
	r1 = 0xCA<32>
	branch p0 l0000A848
	// succ:  l0000A828 l0000A848
l0000A828:
	p0 = r0 == 0<32>
	r3 = badva + 0x2B<32>
	r2 = r16
	call errlog_function (retsize: 0;)
	// succ:  l0000A838
l0000A838:
	r1 = 0x156<32>
	goto l0000A8E8
	// succ:  l0000A8E8
l0000A848:
	branch r2 == 0<32> l0000A868
	// succ:  l0000A858 l0000A868
l0000A858:
	r2 = Mem0[r16 + 44<i32>:word32]
	r1 = 0xCB<32>
	goto l0000A838
	// succ:  l0000A838
l0000A868:
	r0 = r17
	Mem0[r16 + 44<i32>:word32] = r0
	r1 = 0xCD<32>
	branch p0 l0000A884
	// succ:  l0000A878 l0000A884
l0000A878:
	p0 = r0 == 0<32>
	goto l0000A838
	// succ:  l0000A838
l0000A884:
	r4 = badva + 0x3F<32>
	Mem0[r29 + 4<i32>:word32] = r0
	Mem0[r29:word32] = r17
	r1 = 0xD1<32>
	call logmsg_function (retsize: 0;)
	r3 = Mem0[r16 + 8<i32>:word32]
	r2 = Mem0[r16 + 12<i32>:word32]
	r0 = r16
	r4 = r2 + 0x7F<32>
	Mem0[r3 + 1<i32>:byte] = r4
	r4 = r4 & 0xFFFFFF80<32>
	r4 = Mem0[r3 + 4<i32>:word32]
	r2 = r7 - r2
	Mem0[r3 + 2<i32>:byte] = r2
	r2 = r2 + r4
	call allocate_and_free (retsize: 0;)
	p0 = r0 == 0<32>
	r1 = 0x158<32>
	r3 = badva + 0x37<32>
	branch p0 l0000A8F4
	// succ:  l0000A8E0 l0000A8F4
l0000A8E0:
	r17 = -1<i32>
	r2 = r16
	call errlog_function (retsize: 0;)
	// succ:  l0000A8E8
l0000A8E8:
	r19_r18 = Mem0[r29 + 16<i32>:word64]
	r17_r16 = Mem0[r29 + 24<i32>:word64]
	r0 = r17
	// succ:  l0000A8EC
l0000A8EC:
	v29 = r30
	r31 = Mem0[v29 + 4<i32>:word32]
	r30 = Mem0[v29:word32]
	r29 = v29 + 8<i32>
	return
	// succ:  allocate_graph_storage_exit
l0000A8F4:
	branch r0 == 1<32> l0000A8F4
	// succ:  l0000A908 l0000A8F4
l0000A908:
	r0 = Mem0[r16:word32]
	r17 = 0<32>
	r18 = r16
	r18 = r0 + 0x24<32>
	// succ:  l0000A90C
l0000A90C:
	branch r0 == 1<32> l0000A8EC
	// succ:  l0000A918 l0000A8EC
l0000A918:
	r0 = Mem0[r18:word32]
	branch r2 == 0x1B<32> l0000A90C
	// succ:  l0000A920 l0000A90C
l0000A920:
	Mem0[r18:byte] = r7
	r7 = Mem0[r0 + 36<i32>:word32]
	r2 = Mem0[r2 + 12<i32>:word32]
	call r2 (retsize: 0;)
	goto l0000A90C
	// succ:  l0000A90C
allocate_graph_storage_exit:


// errlog_function
// Return size: 0
define errlog_function
errlog_function_entry:
	r29 = fp
	// succ:  l0000A940
l0000A940:
	v4 = r29 - 8<i32>
	Mem0[v4:word32] = r30
	Mem0[v4 + 4<i32>:word32] = r31
	r30 = v4
	r29 = v4 - 8<i32>
	r4 = r3
	r0 = badva + 0x35<32>
	Mem0[r29 + 1<i32>:byte] = r6
	r6 = r29 + 0x10<32>
	r5 = r29 + 0x10<32>
	r3 = 0<32>
	v13 = r30
	r31 = Mem0[v13 + 4<i32>:word32]
	r30 = Mem0[v13:word32]
	r29 = v13 + 8<i32>
	return
	// succ:  errlog_function_exit
errlog_function_exit:


// allocate_and_free
// Return size: 0
define allocate_and_free
allocate_and_free_entry:
	r29 = fp
	// succ:  l0000A964
l0000A964:
	v4 = r29 - 8<i32>
	Mem0[v4:word32] = r30
	Mem0[v4 + 4<i32>:word32] = r31
	r30 = v4
	r29 = v4 - 40<i32>
	Mem0[r29 + 496<i32>:word64] = r17_r16
	Mem0[r29 + 24<i32>:word64] = r19_r18
	r19 = Mem0[r17:word32]
	Mem0[r29 + 16<i32>:word64] = r21_r20
	Mem0[r29 + 8<i32>:word64] = r23_r22
	r18 = r17 + 0x28<32>
	branch p0 l0000AAD4
	// succ:  l0000A980 l0000AAD4
l0000A980:
	p0 = r11 == 1<32>
	branch r2 == 0x1A<32> l0000A9D0
l0000A984:
	branch r2 == 0x1A<32> l0000A9D0
	// succ:  l0000A990 l0000A9D0
l0000A990:
	r2 = Mem0[r19 + 24<i32>:word32]
	r1_r0 = r18_r17
	branch r2 == 1<32> l0000AAD4
	// succ:  l0000A99C l0000AAD4
l0000A99C:
	r2 = Mem0[r19 + 20<i32>:word32]
	r21 = Mem0[r31 + r20 * 4<32>:word32]
	branch r3 == 1<32> l0000AAC8
	// succ:  l0000A9AC l0000AAC8
l0000A9AC:
	r3 = Mem0[r21 + 20<i32>:word32]
	branch r4 == 1<32> l0000AAC8
	// succ:  l0000A9B4 l0000AAC8
l0000A9B4:
	branch r4 == 1<32> l0000AAEC
	goto l0000A9C0
	// succ:  l0000A9C0 l0000A9B4_thunk_check_allocations
l0000A9B4_thunk_check_allocations:
	call check_allocations (retsize: 0;)
	return
	// succ:  allocate_and_free_exit
l0000A9C0:
	r4 = Mem0[r18:word32]
	r2 = r2 & 0xFFFFFF80<32>
	goto l0000AA30
	// succ:  l0000AA30
l0000A9D0:
	r3 = Mem0[r3 + 20<i32>:word32]
	r2 = Mem0[r3 + 16<i32>:word32]
	call prefree (retsize: 0;)
	r1 = 0x123<32>
	branch p0 l0000A9F4
	// succ:  l0000A9E0 l0000A9F4
l0000A9E0:
	p0 = r0 == 0<32>
	r3 = badva + 0x37<32>
	r16 = -1<i32>
	r2 = r17
	call errlog_function (retsize: 0;)
	// succ:  l0000A9F0
l0000A9F0:
	goto l0000AAD4
	// succ:  l0000AAD4
l0000A9F4:
	r2 = Mem0[r19 + 8<i32>:word32]
	r1 = 0x127<32>
	r4 = badva + 0x31<32>
	r5 = Mem0[r2:word32]
	r6 = Mem0[r5 + 20<i32>:word32]
	Mem0[r29 + 1<i32>:byte] = r5
	r5 = Mem0[r5 + 16<i32>:word32]
	Mem0[r29:word32] = r6
	goto l0000AACC
	// succ:  l0000AACC
l0000AA28:
	branch p0 l0000AAE4
	// succ:  l0000AA30 l0000AAE4
l0000AA30:
	r0 = r4
	branch r2 >u r4 l0000AA28
	// succ:  l0000AA40 l0000AA28
l0000AA40:
	r4 = Mem0[r0 + 8<i32>:word32]
	r3 = r4 - r2
	branch p0 l0000AA58
	// succ:  l0000AA48 l0000AA58
l0000AA48:
	p0 = r4 == -1<i32>
	Mem0[r3:byte] = r2
	r2 = Mem0[r0:word32]
	call fn00009510 (retsize: 0;)
	// succ:  l0000AA58
l0000AA58:
	Mem0[r0 + 1<i32>:byte] = r2
	r2 = r22 + r2
	branch r2 >u r3 l0000AA90
	// succ:  l0000AA70 l0000AA90
l0000AA70:
	r3 = Mem0[r17 + 48<i32>:word32]
	r4 = badva + 0x2A<32>
	Mem0[r17 + 48<i32>:word32] = r2
	Mem0[r29:byte] = r5
	r5 = Mem0[r0 + 4<i32>:word32]
	r1 = 0x66<32>
	call logmsg_function (retsize: 0;)
	// succ:  l0000AA90
l0000AA90:
	Mem0[r21 + 16<i32>:word32] = r22
	r1 = 0x135<32>
	// succ:  l0000AA98
l0000AA98:
	r1 = 0x131<32>
	goto l0000A9F0
	// succ:  l0000A9F0
l0000AAC8:
	branch r2 >u r20 l0000A99C
l0000AACC:
	branch r19 == 0<32> l0000A984
	// succ:  l0000AAD0 l0000A99C l0000AAD8 l0000A984
l0000AAD0:
	branch r19 == 0<32> l0000A984
	goto l0000AAD8
	// succ:  l0000AAD8 l0000A984
l0000AAD4:
	r19_r18 = Mem0[r29 + 24<i32>:word64]
	r17_r16 = Mem0[r29 + 32<i32>:word64]
	r0 = r16
	r23_r22 = Mem0[r29 + 8<i32>:word64]
	r21_r20 = Mem0[r29 + 16<i32>:word64]
	v25 = r30
	r31 = Mem0[v25 + 4<i32>:word32]
	r30 = Mem0[v25:word32]
	r29 = v25 + 8<i32>
	return
	// succ:  allocate_and_free_exit
l0000AAD8:
	r19_r18 = Mem0[r29 + 24<i32>:word64]
	r17_r16 = Mem0[r29 + 32<i32>:word64]
	r23_r22 = Mem0[r29 + 8<i32>:word64]
	r21_r20 = Mem0[r29 + 16<i32>:word64]
	v34 = r30
	r31 = Mem0[v34 + 4<i32>:word32]
	r30 = Mem0[v34:word32]
	r29 = v34 + 8<i32>
	return
	// succ:  allocate_and_free_exit
l0000AAE4:
	Mem0[r21 + 16<i32>:word32] = 0<32>
	goto l0000AA98
	// succ:  l0000AA98
allocate_and_free_exit:


// check_allocations
// Return size: 0
define check_allocations
check_allocations_entry:
	r29 = fp
	// succ:  l0000AAEC
l0000AAEC:
	v4 = r29 - 8<i32>
	Mem0[v4:word32] = r30
	Mem0[v4 + 4<i32>:word32] = r31
	r30 = v4
	r29 = v4 - 24<i32>
	r1 = 0xB8<32>
	r4 = badva + 6<32>
	Mem0[r29 + 16<i32>:word64] = r17_r16
	r16 = r0
	r5 = Mem0[r16 + 40<i32>:word32]
	r7 = Mem0[r5 + 4<i32>:word32]
	r6 = Mem0[r5 + 8<i32>:word32]
	Mem0[r29 + 4<i32>:word32] = r7
	Mem0[r29 + 8<i32>:word32] = r6
	Mem0[r29:word32] = r5
	call logmsg_function (retsize: 0;)
	branch r2 == 0<32> l0000AB3C
	// succ:  l0000AB24 l0000AB3C
l0000AB24:
	r2 = Mem0[r16 + 40<i32>:word32]
	branch r4 == 0<32> l0000AB2C
	goto l0000AB34
	// succ:  l0000AB34 l0000AB2C
l0000AB2C:
	branch r4 == 0<32> l0000AB2C
	// succ:  l0000AB34 l0000AB2C
l0000AB34:
	r4 = Mem0[r4:word32]
	r3 = r3 + 0xFFFFFFFF<32>
	r2 = Mem0[r2 + 8<i32>:word32]
	r2 = r16
	r1 = 0xBE<32>
	r3 = badva + 0x39<32>
	goto l0000AB48
	// succ:  l0000AB48
l0000AB3C:
	r2 = r16
	r1 = 0xBE<32>
	r3 = badva + 0x39<32>
	// succ:  l0000AB48
l0000AB48:
	call errlog_function (retsize: 0;)
	v18 = r30
	r31 = Mem0[v18 + 4<i32>:word32]
	r30 = Mem0[v18:word32]
	r29 = v18 + 8<i32>
	return
	// succ:  check_allocations_exit
check_allocations_exit:


// allocator_teardown
// Return size: 0
define allocator_teardown
allocator_teardown_entry:
	r29 = fp
	// succ:  l0000ABA4
l0000ABA4:
	v4 = r29 - 8<i32>
	Mem0[v4:word32] = r30
	Mem0[v4 + 4<i32>:word32] = r31
	r30 = v4
	r29 = v4 - 8<i32>
	Mem0[r29 + 496<i32>:word64] = r17_r16
	r16 = r0
	branch r0 == 0<32> l0000ABC8
l0000ABB4:
	r17 = Mem0[r0:word32]
	call fn00009510 (retsize: 0;)
	// succ:  l0000ABB8 l0000ABC8 l0000ABBC
l0000ABB8:
	r0 = Mem0[r16 + 40<i32>:word32]
	r17 = Mem0[r0:word32]
	// succ:  l0000ABBC
l0000ABBC:
	p0 = r17 == 0<32>
	r0 = r17
	branch p0 l0000ABB4
	// succ:  l0000ABC4 l0000ABB4
l0000ABC4:
	Mem0[r16 + 40<i32>:word32] = 0<32>
	r0 = Mem0[r16 + 12<i32>:word32]
	// succ:  l0000ABC8
l0000ABC8:
	branch p0 l0000ABD4
	// succ:  l0000ABD0 l0000ABD4
l0000ABD0:
	p0 = r0 == 0<32>
	v12 = r30
	r31 = Mem0[v12 + 4<i32>:word32]
	r30 = Mem0[v12:word32]
	r29 = v12 + 8<i32>
	return
	// succ:  allocator_teardown_exit
l0000ABD4:
	v13 = r30
	r31 = Mem0[v13 + 4<i32>:word32]
	r30 = Mem0[v13:word32]
	r29 = v13 + 8<i32>
	r17_r16 = Mem0[r29:word64]
	// succ:  l0000ABD4_thunk_fn00009510
l0000ABD4_thunk_fn00009510:
	call fn00009510 (retsize: 0;)
	return
	// succ:  allocator_teardown_exit
allocator_teardown_exit:


// logmsg_function
// Return size: 0
define logmsg_function
logmsg_function_entry:
	r29 = fp
	// succ:  l0000ABDC
l0000ABDC:
	v4 = r29 - 8<i32>
	Mem0[v4:word32] = r30
	Mem0[v4 + 4<i32>:word32] = r31
	r30 = v4
	r29 = v4 - 8<i32>
	branch r3 >u r5 l0000AC00
	goto l0000ABEC
	// succ:  l0000ABEC l0000ABE0_thunk_prefree
l0000ABE0_thunk_prefree:
	call prefree (retsize: 0;)
	return
	// succ:  logmsg_function_exit
l0000ABEC:
	r5 = Mem0[r2 + 16<i32>:word32]
	r6 = r29 + 0x10<32>
	r5 = r29 + 0x10<32>
	r0 = badva + 0xD<32>
	Mem0[r29 + 4<i32>:word32] = r6
	call logv (retsize: 0;)
	v13 = r30
	r31 = Mem0[v13 + 4<i32>:word32]
	r30 = Mem0[v13:word32]
	r29 = v13 + 8<i32>
	return
	// succ:  logmsg_function_exit
logmsg_function_exit:


// prefree
// Return size: 0
define prefree
prefree_entry:
	r29 = fp
	// succ:  l0000AC00
l0000AC00:
	v4 = r29 - 8<i32>
	Mem0[v4:word32] = r30
	Mem0[v4 + 4<i32>:word32] = r31
	r30 = v4
	r29 = v4 - 16<i32>
	Mem0[r29 + 496<i32>:word64] = r17_r16
	r17_r16 = r2_r1
	r3 = r3 + 0x7F<32>
	Mem0[r29:word64] = r19_r18
	r4 = Mem0[r16:word32]
	r19 = r3 & 0xFFFFFF80<32>
	r18 = r0
	r2 = r4
	branch p0 l0000AC50
	// succ:  l0000AC20 l0000AC50
l0000AC20:
	p0 = r4 == 0<32>
	r0 = 0xC<32>
	call fn00009500 (retsize: 0;)
	r17 = 0xFFFFFFFF<32>
	branch p0 l0000ACB4
	// succ:  l0000AC30 l0000ACB4
l0000AC30:
	p0 = r0 == 0<32>
	r2 = r18
	r1 = 0xA0<32>
	r3 = badva + 0xD<32>
	call errlog_function (retsize: 0;)
	goto l0000ACC4
	// succ:  l0000ACC4
l0000AC4C:
	r4 = Mem0[r2:word32]
	// succ:  l0000AC50
l0000AC50:
	r4 = Mem0[r2 + 4<i32>:word32]
	r3 = Mem0[r2 + 8<i32>:word32]
	branch r17 >u r5 l0000AC4C
	// succ:  l0000AC60 l0000AC4C
l0000AC60:
	r5 = r3 + r4
	Mem0[r2 + 2<i32>:byte] = r3
	r0 = Mem0[r2:word32]
	r17 = 0<32>
	r3 = r3 + r19
	r5 = Mem0[r0 + 4<i32>:word32]
	branch r4 == r5 l0000ACC8
	// succ:  l0000AC84 l0000ACC8
l0000AC84:
	r4 = r4 + r3
	Mem0[r2 + 2<i32>:byte] = r3
	r3 = r4 + r3
	Mem0[r2:word32] = r3
	call fn00009510 (retsize: 0;)
	goto l0000ACC4
	// succ:  l0000ACC4
l0000ACB4:
	Mem0[r0 + 8<i32>:word32] = r19
	Mem0[r0 + 4<i32>:word32] = r17
	r17 = 0<32>
	r2 = Mem0[r16:word32]
	Mem0[r16:word32] = r0
	Mem0[r0:word32] = r2
	// succ:  l0000ACC4
l0000ACC4:
	r19_r18 = Mem0[r29:word64]
	r17_r16 = Mem0[r29 + 8<i32>:word64]
	r0 = r17
	goto l0000ACCC
	// succ:  l0000ACCC
l0000ACC8:
	r19_r18 = Mem0[r29:word64]
	r17_r16 = Mem0[r29 + 8<i32>:word64]
	// succ:  l0000ACCC
l0000ACCC:
	v21 = r30
	r31 = Mem0[v21 + 4<i32>:word32]
	r30 = Mem0[v21:word32]
	r29 = v21 + 8<i32>
	return
	// succ:  prefree_exit
prefree_exit:


// do_execute
// Return size: 0
define do_execute
do_execute_entry:
	r29 = fp
	// succ:  l0000ACD0
l0000ACD0:
	v4 = r29 - 8<i32>
	Mem0[v4:word32] = r30
	Mem0[v4 + 4<i32>:word32] = r31
	r30 = v4
	r29 = v4 - 32<i32>
	Mem0[r29 + 496<i32>:word64] = r17_r16
	r16 = r0
	Mem0[r29 + 8<i32>:word64] = r21_r20
	Mem0[r29 + 16<i32>:word64] = r19_r18
	Mem0[r16 + 28<i32>:word32] = r2
	Mem0[r29:word64] = r23_r22
	Mem0[r16 + 24<i32>:word32] = r3
	Mem0[r16 + 20<i32>:word32] = r1
	Mem0[r16 + 32<i32>:word32] = r4
	call nn_os_hvx_power_on (retsize: 0;)
	r0 = r16
	call nn_os_vector_workers_acquire (retsize: 0;)
	call fn00009530 (retsize: 0;)
	branch r17 == 0<32> l0000AD60
l0000AD08:
	r20 = 0<32>
	branch p0 l0000AD58
	// succ:  l0000AD0C l0000AD60 l0000AD10 l0000AD58
l0000AD0C:
	r17 = Mem0[r16:word32]
	r19_r18 = r1_r0
	r20 = 0<32>
	r0 = r16
	call nn_os_get_perfcount (retsize: 0;)
	r2 = Mem0[r17:word32]
	r1_r0 = r16_r17
	r23_r22 = r1_r0
	r2 = Mem0[r2:word32]
	call r2 (retsize: 0;)
	branch r20 == 0<32> l0000AD5C
	goto l0000AD38
	// succ:  l0000AD38 l0000AD5C
l0000AD10:
	p0 = r9 == 0<32>
	r0 = r16
	call nn_os_get_perfcount (retsize: 0;)
	r2 = Mem0[r17:word32]
	r1_r0 = r16_r17
	r23_r22 = r1_r0
	r2 = Mem0[r2:word32]
	call r2 (retsize: 0;)
	branch r20 == 0<32> l0000AD5C
	// succ:  l0000AD38 l0000AD5C
l0000AD38:
	r20 = r0
	r0 = r16
	r1_r0 = r3_r2 + r1_r0
	Mem0[r17 + 48<i32>:word64] = r1_r0
	r17 = Mem0[r17 + 36<i32>:word32]
	goto l0000AD08
	// succ:  l0000AD08
l0000AD58:
	call fn00009530 (retsize: 0;)
	// succ:  l0000AD5C
l0000AD5C:
	r0 = r16
	r3_r2 = r1_r0 - r19_r18
	goto l0000AD64
	// succ:  l0000AD64
l0000AD60:
	r0 = r16
	// succ:  l0000AD64
l0000AD64:
	Mem0[r16 + 80<i32>:word64] = r3_r2
	call nn_os_vector_workers_release (retsize: 0;)
	r0 = r16
	call nn_os_hvx_power_off (retsize: 0;)
	r19_r18 = Mem0[r29 + 16<i32>:word64]
	r17_r16 = Mem0[r29 + 24<i32>:word64]
	r0 = r20
	r23_r22 = Mem0[r29:word64]
	r21_r20 = Mem0[r29 + 8<i32>:word64]
	v22 = r30
	r31 = Mem0[v22 + 4<i32>:word32]
	r30 = Mem0[v22:word32]
	r29 = v22 + 8<i32>
	return
	// succ:  do_execute_exit
do_execute_exit:


// hexagon_nn_init
// Return size: 0
define hexagon_nn_init
hexagon_nn_init_entry:
	r29 = fp
	// succ:  l0000AD90
l0000AD90:
	v4 = r29 - 8<i32>
	Mem0[v4:word32] = r30
	Mem0[v4 + 4<i32>:word32] = r31
	r30 = v4
	r29 = v4 - 16<i32>
	Mem0[r29 + 496<i32>:word64] = r17_r16
	r1_r0 = 0x5800000001<64>
	Mem0[r29:word64] = r19_r18
	call fn00009540 (retsize: 0;)
	Mem0[r17 - 28<i32>:byte] = 1<8>
	branch p0 l0000AE1C
	// succ:  l0000ADAC l0000AE1C
l0000ADAC:
	p0 = r9 == 0<32>
	r1 = 0x2000000<32>
	r0 = 0x80<32>
	call fn00009550 (retsize: 0;)
	Mem0[r17 + 1<i32>:byte] = r18
	r18 = r0
	Mem0[r17 + 8<i32>:word32] = 0x2000000<32>
	r0 = r17
	call fn00009510 (retsize: 0;)
	// succ:  l0000AE1C
l0000AE1C:
	r19_r18 = Mem0[r29:word64]
	r17_r16 = Mem0[r29 + 8<i32>:word64]
	r0 = r16
	v17 = r30
	r31 = Mem0[v17 + 4<i32>:word32]
	r30 = Mem0[v17:word32]
	r29 = v17 + 8<i32>
	return
	// succ:  hexagon_nn_init_exit
hexagon_nn_init_exit:


// hexagon_nn_getlog
// Return size: 0
define hexagon_nn_getlog
hexagon_nn_getlog_entry:
	r29 = fp
	// succ:  l0000AE30
l0000AE30:
	v4 = r29 - 8<i32>
	Mem0[v4:word32] = r30
	Mem0[v4 + 4<i32>:word32] = r31
	r30 = v4
	r29 = v4 - 16<i32>
	r4 = 0xE<32>
	r3 = badva + 1<32>
	Mem0[r29:word64] = r19_r18
	Mem0[r29 + 8<i32>:word64] = r17_r16
	r18 = r2
	r17_r16 = r1_r0
	r1_r0 = r3_r17
	call fn00009564 (retsize: 0;)
	r2 = min<int32>(r4, r18)
	r0 = 0xFFFFFFFF<32>
	branch p0 l0000AE94
	// succ:  l0000AE60 l0000AE94
l0000AE60:
	p0 = r8 == 0<32>
	r2 = r17 + (r18 + 0x3F<32>)
	Mem0[r2:byte] = 0<8>
	r19 = Mem0[r16 + 56<i32>:word32]
	r0 = r19
	call fn00009570 (retsize: 0;)
	r2 = r18
	r3 = r0
	r1_r0 = r19_r17
	call fn00009564 (retsize: 0;)
	r2 = min<int32>(r2, r3)
	Mem0[r16 + 64<i32>:word32] = 0<32>
	r2 = Mem0[r16 + 56<i32>:word32]
	r0 = 0<32>
	Mem0[r2:byte] = 0<8>
	r19_r18 = Mem0[r29:word64]
	r17_r16 = Mem0[r29 + 8<i32>:word64]
	// succ:  l0000AE94
l0000AE94:
	v24 = r30
	r31 = Mem0[v24 + 4<i32>:word32]
	r30 = Mem0[v24:word32]
	r29 = v24 + 8<i32>
	return
	// succ:  hexagon_nn_getlog_exit
hexagon_nn_getlog_exit:


// hexagon_nn_snpprint
// Return size: 0
define hexagon_nn_snpprint
hexagon_nn_snpprint_entry:
	r29 = fp
	// succ:  l0000AE98
l0000AE98:
	v4 = r29 - 8<i32>
	Mem0[v4:word32] = r30
	Mem0[v4 + 4<i32>:word32] = r31
	r30 = v4
	r29 = v4 - 16<i32>
	Mem0[r29 + 496<i32>:word64] = r17_r16
	r3 = badva + 0x19<32>
	r17_r16 = r1_r2
	Mem0[r29:word64] = r19_r18
	r18 = r0
	r1_r0 = r3_r17
	call fn00009580 (retsize: 0;)
	r2 = r16 + 0<32>
	r0 = 0xFFFFFFFF<32>
	branch p0 l0000AECC
	// succ:  l0000AEC0 l0000AECC
l0000AEC0:
	p0 = r10 == 0<32>
	r1_r0 = r17_r18
	call do_snpprint (retsize: 0;)
	r0 = 0<32>
	// succ:  l0000AECC
l0000AECC:
	r19_r18 = Mem0[r29:word64]
	r17_r16 = Mem0[r29 + 8<i32>:word64]
	v23 = r30
	r31 = Mem0[v23 + 4<i32>:word32]
	r30 = Mem0[v23:word32]
	r29 = v23 + 8<i32>
	return
	// succ:  hexagon_nn_snpprint_exit
hexagon_nn_snpprint_exit:


// hexagon_nn_set_debug_level
// Return size: 0
define hexagon_nn_set_debug_level
hexagon_nn_set_debug_level_entry:
	r29 = fp
	// succ:  l0000AED4
l0000AED4:
	p0 = r0 == 0<32>
	r3 = 0<32>
	r2 = 0xFFFFFFFF<32>
	r2 = r3 + 0<32>
	r3 = max<int32>(r1, r3)
	return
	// succ:  hexagon_nn_set_debug_level_exit
hexagon_nn_set_debug_level_exit:


// hexagon_nn_prepare
// Return size: 0
define hexagon_nn_prepare
hexagon_nn_prepare_entry:
	r29 = fp
	// succ:  l0000AEF0
l0000AEF0:
	v4 = r29 - 8<i32>
	Mem0[v4:word32] = r30
	Mem0[v4 + 4<i32>:word32] = r31
	r30 = v4
	r29 = v4 - 8<i32>
	branch p0 l0000AF14
	// succ:  l0000AEF8 l0000AF14
l0000AEF8:
	p0 = r0 == 0<32>
	r1 = 0x87<32>
	r2 = 0<32>
	r3 = badva + 0x1F<32>
	Mem0[r29:word32] = 0<32>
	call errlog_function (retsize: 0;)
	v13 = r30
	r31 = Mem0[v13 + 4<i32>:word32]
	r30 = Mem0[v13:word32]
	r29 = v13 + 8<i32>
	return
	// succ:  hexagon_nn_prepare_exit
l0000AF14:
	v14 = r30
	r31 = Mem0[v14 + 4<i32>:word32]
	r30 = Mem0[v14:word32]
	r29 = v14 + 8<i32>
	// succ:  l0000AF14_thunk_do_prepare
l0000AF14_thunk_do_prepare:
	call do_prepare (retsize: 0;)
	return
	// succ:  hexagon_nn_prepare_exit
hexagon_nn_prepare_exit:


// errlog_function
// Return size: 0
define errlog_function
errlog_function_entry:
	r29 = fp
	// succ:  l0000AF1C
l0000AF1C:
	v4 = r29 - 8<i32>
	Mem0[v4:word32] = r30
	Mem0[v4 + 4<i32>:word32] = r31
	r30 = v4
	r29 = v4 - 8<i32>
	r4 = r3
	r0 = badva + 0x23<32>
	Mem0[r29 + 1<i32>:byte] = r6
	r6 = r29 + 0x10<32>
	r5 = r29 + 0x10<32>
	r3 = 0<32>
	v13 = r30
	r31 = Mem0[v13 + 4<i32>:word32]
	r30 = Mem0[v13:word32]
	r29 = v13 + 8<i32>
	return
	// succ:  errlog_function_exit
errlog_function_exit:


// hexagon_nn_append_node
// Return size: 0
define hexagon_nn_append_node
hexagon_nn_append_node_entry:
	r29 = fp
	// succ:  l0000AF40
l0000AF40:
	v4 = r29 - 8<i32>
	Mem0[v4:word32] = r30
	Mem0[v4 + 4<i32>:word32] = r31
	r30 = v4
	r29 = v4 - 8<i32>
	r6 = r4
	branch p0 l0000AF60
	// succ:  l0000AF48 l0000AF60
l0000AF48:
	p0 = r0 == 0<32>
	r1 = 0x98<32>
	r2 = 0<32>
	r3 = badva + 0xF<32>
	Mem0[r29:word32] = 0<32>
	goto l0000AF78
	// succ:  l0000AF78
l0000AF60:
	branch r4 == 2<32> l0000AF84
	// succ:  l0000AF6C l0000AF84
l0000AF6C:
	r4 = Mem0[r0 + 36<i32>:int8]
	r2 = r0
	r1 = 0x9B<32>
	r3 = badva + 2<32>
	// succ:  l0000AF78
l0000AF78:
	call errlog_function (retsize: 0;)
	v15 = r30
	r31 = Mem0[v15 + 4<i32>:word32]
	r30 = Mem0[v15:word32]
	r29 = v15 + 8<i32>
	return
	// succ:  hexagon_nn_append_node_exit
l0000AF84:
	Mem0[r29:word32] = r6
	Mem0[r29 + 4<i32>:word32] = r4
	r5_r4 = r7_r5
	call do_append_node (retsize: 0;)
	v20 = r30
	r31 = Mem0[v20 + 4<i32>:word32]
	r30 = Mem0[v20:word32]
	r29 = v20 + 8<i32>
	return
	// succ:  hexagon_nn_append_node_exit
hexagon_nn_append_node_exit:


// hexagon_nn_append_const_node
// Return size: 0
define hexagon_nn_append_const_node
hexagon_nn_append_const_node_entry:
	r29 = fp
	// succ:  l0000AF94
l0000AF94:
	v4 = r29 - 8<i32>
	Mem0[v4:word32] = r30
	Mem0[v4 + 4<i32>:word32] = r31
	r30 = v4
	r29 = v4 - 8<i32>
	branch p0 l0000AFB4
	// succ:  l0000AF9C l0000AFB4
l0000AF9C:
	p0 = r0 == 0<32>
	r1 = 0xB4<32>
	r2 = 0<32>
	r3 = badva + 0x3B<32>
	Mem0[r29:word32] = 0<32>
	goto l0000AFCC
	// succ:  l0000AFCC
l0000AFB4:
	branch r6 == 2<32> l0000AFD8
	// succ:  l0000AFC0 l0000AFD8
l0000AFC0:
	r6 = Mem0[r0 + 36<i32>:int8]
	r2 = r0
	r1 = 0xB7<32>
	r3 = badva + 0x2E<32>
	// succ:  l0000AFCC
l0000AFCC:
	call errlog_function (retsize: 0;)
	v14 = r30
	r31 = Mem0[v14 + 4<i32>:word32]
	r30 = Mem0[v14:word32]
	r29 = v14 + 8<i32>
	return
	// succ:  hexagon_nn_append_const_node_exit
l0000AFD8:
	Mem0[r29 + 1<i32>:byte] = r7
	Mem0[r29:word32] = r6
	call do_append_const_node (retsize: 0;)
	v16 = r30
	r31 = Mem0[v16 + 4<i32>:word32]
	r30 = Mem0[v16:word32]
	r29 = v16 + 8<i32>
	return
	// succ:  hexagon_nn_append_const_node_exit
hexagon_nn_append_const_node_exit:


// hexagon_nn_execute_new
// Return size: 0
define hexagon_nn_execute_new
hexagon_nn_execute_new_entry:
	r29 = fp
	// succ:  l0000AFEC
l0000AFEC:
	v4 = r29 - 8<i32>
	Mem0[v4:word32] = r30
	Mem0[v4 + 4<i32>:word32] = r31
	r30 = v4
	r29 = v4 - 32<i32>
	Mem0[r29 + 496<i32>:word64] = r17_r16
	Mem0[r29 + 16<i32>:word64] = r19_r18
	r19_r18 = r3_r2
	r17_r16 = r0_r1
	Mem0[r29 + 8<i32>:word64] = r21_r20
	r20 = r4
	branch p0 l0000B01C
	// succ:  l0000B004 l0000B01C
l0000B004:
	p0 = r9 == 0<32>
	r1 = 0xD5<32>
	r2 = 0<32>
	r3 = badva + 0x13<32>
	Mem0[r29:word32] = 0<32>
	goto l0000B034
	// succ:  l0000B034
l0000B01C:
	branch r2 == 4<32> l0000B048
	// succ:  l0000B028 l0000B048
l0000B028:
	r2 = Mem0[r17 + 36<i32>:int8]
	r2 = r17
	r1 = 0xD8<32>
	r3 = badva + 0x2B<32>
	// succ:  l0000B034
l0000B034:
	call errlog_function (retsize: 0;)
	r19_r18 = Mem0[r29 + 16<i32>:word64]
	r17_r16 = Mem0[r29 + 24<i32>:word64]
	r0 = 0xFFFFFFFF<32>
	v22 = r30
	r31 = Mem0[v22 + 4<i32>:word32]
	r30 = Mem0[v22:word32]
	r29 = v22 + 8<i32>
	return
	// succ:  hexagon_nn_execute_new_exit
l0000B048:
	Mem0[r29:word32] = r18
	Mem0[r29 + 4<i32>:word32] = r20
	r2 = r17
	r1_r0 = r16_r17
	r3_r2 = r19_r18
	r4 = r20
	r19_r18 = Mem0[r29 + 16<i32>:word64]
	r17_r16 = Mem0[r29 + 24<i32>:word64]
	v28 = r30
	r31 = Mem0[v28 + 4<i32>:word32]
	r30 = Mem0[v28:word32]
	r29 = v28 + 8<i32>
	r21_r20 = Mem0[r29 + 8<i32>:word64]
	// succ:  l0000B060_thunk_do_execute
l0000B060_thunk_do_execute:
	call do_execute (retsize: 0;)
	return
	// succ:  hexagon_nn_execute_new_exit
hexagon_nn_execute_new_exit:


// logmsg_function
// Return size: 0
define logmsg_function
logmsg_function_entry:
	r29 = fp
	// succ:  l0000B068
l0000B068:
	v4 = r29 - 8<i32>
	Mem0[v4:word32] = r30
	Mem0[v4 + 4<i32>:word32] = r31
	r30 = v4
	r29 = v4 - 8<i32>
	r4 = 2<32>
	branch r4 >u r3 l0000B06C_thunk_hexagon_nn_execute
	goto l0000B078
	// succ:  l0000B078 l0000B06C_thunk_hexagon_nn_execute
l0000B06C_thunk_hexagon_nn_execute:
	call hexagon_nn_execute (retsize: 0;)
	return
	// succ:  logmsg_function_exit
l0000B078:
	r3 = Mem0[r2 + 16<i32>:word32]
	r5 = r29 + 0x10<32>
	r3 = 2<32>
	r0 = badva + 0xB<32>
	r6 = r29 + 0x10<32>
	r1 = 0xDA<32>
	r4 = badva + 0x22<32>
	Mem0[r29 + 4<i32>:word32] = r6
	call logv (retsize: 0;)
	v15 = r30
	r31 = Mem0[v15 + 4<i32>:word32]
	r30 = Mem0[v15:word32]
	r29 = v15 + 8<i32>
	return
	// succ:  logmsg_function_exit
logmsg_function_exit:


// hexagon_nn_execute
// Return size: 0
define hexagon_nn_execute
hexagon_nn_execute_entry:
	r29 = fp
	// succ:  l0000B09C
l0000B09C:
	v4 = r29 - 8<i32>
	Mem0[v4:word32] = r30
	Mem0[v4 + 4<i32>:word32] = r31
	r30 = v4
	r29 = v4 - 96<i32>
	Mem0[r29 - 52<i32>:word32] = r4
	p0 = r0 == 0<32>
	Mem0[r29 + 44<i32>:word32] = r2
	r6 = Mem0[r29 + 104<i32>:word64]
	Mem0[r29 + 48<i32>:word32] = r3
	r4 = Mem0[r29 + 124<i32>:word64]
	Mem0[r29 + 60<i32>:word32] = r6
	r3 = Mem0[r29 + 128<i32>:word32]
	Mem0[r29 + 24<i32>:word32] = r4
	Mem0[r29 + 40<i32>:word32] = r1
	Mem0[r29 + 64<i32>:word32] = r6
	Mem0[r29 + 28<i32>:word32] = r3
	Mem0[r29 + 80<i32>:word64] = r19_r18
	Mem0[r29 + 88<i32>:word64] = r17_r16
	Mem0[r29 + 32<i32>:word32] = r3
	Mem0[r29 + 72<i32>:word64] = r21_r20
	Mem0[r29:word32] = 0<32>
	Mem0[r29 + 56<i32>:word32] = r5
	branch p0 l0000B0E8
	// succ:  l0000B0D4 l0000B0E8
l0000B0D4:
	r1 = 0xF9<32>
	r2 = 0<32>
	r3 = badva + 3<32>
	goto l0000B100
	// succ:  l0000B100
l0000B0E8:
	branch r2 == 4<32> l0000B110
	// succ:  l0000B0F4 l0000B110
l0000B0F4:
	r2 = Mem0[r0 + 36<i32>:int8]
	r2 = r0
	r1 = 0xFC<32>
	r3 = badva + 0x1F<32>
	// succ:  l0000B100
l0000B100:
	call errlog_function (retsize: 0;)
	r0 = 0xFFFFFFFF<32>
	goto l0000B144
	// succ:  l0000B144
l0000B110:
	r1 = r29 + 0x28<32>
	r2 = 1<32>
	r3 = r29 + 8<32>
	r17 = Mem0[r29 + 116<i32>:word64]
	r16 = Mem0[r29 + 108<i32>:word64]
	r19 = Mem0[r29 + 120<i32>:word64]
	r18 = Mem0[r29 + 112<i32>:word64]
	r20 = Mem0[r29 + 132<i32>:word32]
	call do_execute (retsize: 0;)
	Mem0[r16:byte] = r2
	r2 = Mem0[r29 + 8<i32>:word32]
	Mem0[r18:word32] = r5
	r4 = Mem0[r29 + 16<i32>:word64]
	Mem0[r19:word32] = r3
	Mem0[r17:word32] = r4
	Mem0[r20:byte] = r2
	r2 = Mem0[r29 + 32<i32>:word32]
	goto l0000B148
	// succ:  l0000B148
l0000B144:
	r19_r18 = Mem0[r29 + 80<i32>:word64]
	r17_r16 = Mem0[r29 + 88<i32>:word64]
	// succ:  l0000B148
l0000B148:
	v24 = r30
	r31 = Mem0[v24 + 4<i32>:word32]
	r30 = Mem0[v24:word32]
	r29 = v24 + 8<i32>
	return
	// succ:  hexagon_nn_execute_exit
hexagon_nn_execute_exit:


// hexagon_nn_teardown
// Return size: 0
define hexagon_nn_teardown
hexagon_nn_teardown_entry:
	r29 = fp
	// succ:  l0000B150
l0000B150:
	v4 = r29 - 8<i32>
	Mem0[v4:word32] = r30
	Mem0[v4 + 4<i32>:word32] = r31
	r30 = v4
	r29 = v4 - 8<i32>
	branch p0 l0000B174
	// succ:  l0000B158 l0000B174
l0000B158:
	p0 = r0 == 0<32>
	r1 = 0x10B<32>
	r2 = 0<32>
	r3 = badva + 0x3F<32>
	Mem0[r29:word32] = 0<32>
	call errlog_function (retsize: 0;)
	v13 = r30
	r31 = Mem0[v13 + 4<i32>:word32]
	r30 = Mem0[v13:word32]
	r29 = v13 + 8<i32>
	return
	// succ:  hexagon_nn_teardown_exit
l0000B174:
	v14 = r30
	r31 = Mem0[v14 + 4<i32>:word32]
	r30 = Mem0[v14:word32]
	r29 = v14 + 8<i32>
	// succ:  l0000B174_thunk_do_teardown
l0000B174_thunk_do_teardown:
	call do_teardown (retsize: 0;)
	return
	// succ:  hexagon_nn_teardown_exit
hexagon_nn_teardown_exit:


// hexagon_nn_get_perfinfo
// Return size: 0
define hexagon_nn_get_perfinfo
hexagon_nn_get_perfinfo_entry:
	r29 = fp
	// succ:  l0000B17C
l0000B17C:
	v4 = r29 - 8<i32>
	Mem0[v4:word32] = r30
	Mem0[v4 + 4<i32>:word32] = r31
	r30 = v4
	r29 = v4 - 16<i32>
	Mem0[r29 + 496<i32>:word64] = r17_r16
	r16 = r3
	p0 = r0 == 0<32>
	Mem0[r29:word32] = 0<32>
	branch p0 l0000B1AC
	// succ:  l0000B190 l0000B1AC
l0000B190:
	call do_perfinfo_get (retsize: 0;)
	Mem0[r16:byte] = r2
	r17_r16 = Mem0[r29 + 8<i32>:word64]
	r0 = 0xFFFFFFFF<32>
	r2 = r0
	v13 = r30
	r31 = Mem0[v13 + 4<i32>:word32]
	r30 = Mem0[v13:word32]
	r29 = v13 + 8<i32>
	return
	// succ:  hexagon_nn_get_perfinfo_exit
l0000B1AC:
	r1 = 0x117<32>
	r2 = 0<32>
	r3 = badva + 0x2B<32>
	call errlog_function (retsize: 0;)
	v16 = r30
	r31 = Mem0[v16 + 4<i32>:word32]
	r30 = Mem0[v16:word32]
	r29 = v16 + 8<i32>
	return
	// succ:  hexagon_nn_get_perfinfo_exit
hexagon_nn_get_perfinfo_exit:


// hexagon_nn_reset_perfinfo
// Return size: 0
define hexagon_nn_reset_perfinfo
hexagon_nn_reset_perfinfo_entry:
	r29 = fp
	// succ:  l0000B1C8
l0000B1C8:
	v4 = r29 - 8<i32>
	Mem0[v4:word32] = r30
	Mem0[v4 + 4<i32>:word32] = r31
	r30 = v4
	r29 = v4 - 8<i32>
	branch p0 l0000B1EC
	// succ:  l0000B1D0 l0000B1EC
l0000B1D0:
	p0 = r0 == 0<32>
	r1 = 0x124<32>
	r2 = 0<32>
	r3 = badva + 7<32>
	Mem0[r29:word32] = 0<32>
	call errlog_function (retsize: 0;)
	v13 = r30
	r31 = Mem0[v13 + 4<i32>:word32]
	r30 = Mem0[v13:word32]
	r29 = v13 + 8<i32>
	return
	// succ:  hexagon_nn_reset_perfinfo_exit
l0000B1EC:
	v14 = r30
	r31 = Mem0[v14 + 4<i32>:word32]
	r30 = Mem0[v14:word32]
	r29 = v14 + 8<i32>
	// succ:  l0000B1EC_thunk_do_perfinfo_reset
l0000B1EC_thunk_do_perfinfo_reset:
	call do_perfinfo_reset (retsize: 0;)
	return
	// succ:  hexagon_nn_reset_perfinfo_exit
hexagon_nn_reset_perfinfo_exit:


// hexagon_nn_version
// Return size: 0
define hexagon_nn_version
hexagon_nn_version_entry:
	r29 = fp
	// succ:  l0000B1F4
l0000B1F4:
	r2 = r0
	r0 = 0<32>
	Mem0[r2:word32] = 0x5A<32>
	return
	// succ:  hexagon_nn_version_exit
hexagon_nn_version_exit:


// hexagon_nn_last_execution_cycles
// Return size: 0
define hexagon_nn_last_execution_cycles
hexagon_nn_last_execution_cycles_entry:
	r29 = fp
	// succ:  l0000B200
l0000B200:
	v4 = r29 - 8<i32>
	Mem0[v4:word32] = r30
	Mem0[v4 + 4<i32>:word32] = r31
	r30 = v4
	r29 = v4 - 8<i32>
	branch p0 l0000B224
	// succ:  l0000B208 l0000B224
l0000B208:
	p0 = r0 == 0<32>
	r1 = 0x134<32>
	r2 = 0<32>
	r3 = badva + 0xF<32>
	Mem0[r29:word32] = 0<32>
	call errlog_function (retsize: 0;)
	v13 = r30
	r31 = Mem0[v13 + 4<i32>:word32]
	r30 = Mem0[v13:word32]
	r29 = v13 + 8<i32>
	return
	// succ:  hexagon_nn_last_execution_cycles_exit
l0000B224:
	r5_r4 = Mem0[r0 + 80<i32>:word64]
	r0 = 0<32>
	r7_r6 = r5_r4 >>u 0x20<32>
	Mem0[r1:word32] = r4
	Mem0[r2:word32] = r6
	v18 = r30
	r31 = Mem0[v18 + 4<i32>:word32]
	r30 = Mem0[v18:word32]
	r29 = v18 + 8<i32>
	return
	// succ:  hexagon_nn_last_execution_cycles_exit
hexagon_nn_last_execution_cycles_exit:


// hexagon_nn_GetHexagonBinaryVersion
// Return size: 0
define hexagon_nn_GetHexagonBinaryVersion
hexagon_nn_GetHexagonBinaryVersion_entry:
	r29 = fp
	// succ:  l0000B238
l0000B238:
	r2 = r0
	r0 = 0<32>
	Mem0[r2:word32] = 0x5A<32>
	return
	// succ:  hexagon_nn_GetHexagonBinaryVersion_exit
hexagon_nn_GetHexagonBinaryVersion_exit:


// hexagon_nn_PrintLog
// Return size: 0
define hexagon_nn_PrintLog
hexagon_nn_PrintLog_entry:
	r29 = fp
	// succ:  l0000B244
l0000B244:
	return
	// succ:  hexagon_nn_PrintLog_exit
hexagon_nn_PrintLog_exit:


// hexagon_nn_op_name_to_id
// Return size: 0
define hexagon_nn_op_name_to_id
hexagon_nn_op_name_to_id_entry:
	r29 = fp
	// succ:  l0000B250
l0000B250:
	v4 = r29 - 8<i32>
	Mem0[v4:word32] = r30
	Mem0[v4 + 4<i32>:word32] = r31
	r30 = v4
	r29 = v4 - 16<i32>
	Mem0[r29 + 496<i32>:word64] = r17_r16
	r2 = badva + 0<32>
	Mem0[r29:word64] = r19_r18
	r18 = 0<32>
	r17_r16 = r0_r1
	r19 = Mem0[r2 - 192<i32>:word32]
	r1 = Mem0[r19:word32]
	r0 = r17
	call fn00009590 (retsize: 0;)
	branch p0 l0000B28C
	// succ:  l0000B278 l0000B28C
l0000B278:
	p0 = r0 == 0<32>
	r18 = r18
	r19 = r19 + 4<32>
	r0 = 0xFFFFFFFF<32>
	p0 = r18 > 0x72<32>
	goto l0000B294
	// succ:  l0000B294
l0000B28C:
	Mem0[r16:word32] = r18
	r0 = 0<32>
	r19_r18 = Mem0[r29:word64]
	r17_r16 = Mem0[r29 + 8<i32>:word64]
	// succ:  l0000B294
l0000B294:
	v19 = r30
	r31 = Mem0[v19 + 4<i32>:word32]
	r30 = Mem0[v19:word32]
	r29 = v19 + 8<i32>
	return
	// succ:  hexagon_nn_op_name_to_id_exit
hexagon_nn_op_name_to_id_exit:


// hexagon_nn_op_id_to_name
// Return size: 0
define hexagon_nn_op_id_to_name
hexagon_nn_op_id_to_name_entry:
	r29 = fp
	// succ:  l0000B298
l0000B298:
	v4 = r29 - 8<i32>
	Mem0[v4:word32] = r30
	Mem0[v4 + 4<i32>:word32] = r31
	r30 = v4
	r29 = v4 - 16<i32>
	Mem0[r29 + 496<i32>:word64] = r17_r16
	p0 = r0 >u 0x72<32>
	branch p0 l0000B2DC
	// succ:  l0000B2A8 l0000B2DC
l0000B2A8:
	Mem0[r29:word64] = r19_r18
	r18 = r2
	r2 = badva + 0x24<32>
	r2 = Mem0[r2 - 192<i32>:word32]
	r19 = Mem0[r14 + r0 * 4<32>:word32]
	r0 = r19
	call fn00009570 (retsize: 0;)
	branch r2 >u r18 l0000B2E0
	// succ:  l0000B2D4 l0000B2E0
l0000B2D4:
	r2 = r0 + 1<32>
	r16 = 0<32>
	r1_r0 = r19_r17
	// succ:  l0000B2DC
l0000B2DC:
	r19_r18 = Mem0[r29:word64]
	r17_r16 = Mem0[r29 + 8<i32>:word64]
	r0 = r16
	goto l0000B2E4
	// succ:  l0000B2E4
l0000B2E0:
	r19_r18 = Mem0[r29:word64]
	r17_r16 = Mem0[r29 + 8<i32>:word64]
	// succ:  l0000B2E4
l0000B2E4:
	v20 = r30
	r31 = Mem0[v20 + 4<i32>:word32]
	r30 = Mem0[v20:word32]
	r29 = v20 + 8<i32>
	return
	// succ:  hexagon_nn_op_id_to_name_exit
hexagon_nn_op_id_to_name_exit:


// hexagon_nn_disable_dcvs
// Return size: 0
define hexagon_nn_disable_dcvs
hexagon_nn_disable_dcvs_entry:
	r29 = fp
	// succ:  l0000B2E8
l0000B2E8:
	v4 = r29 - 8<i32>
	Mem0[v4:word32] = r30
	Mem0[v4 + 4<i32>:word32] = r31
	r30 = v4
	r29 = v4 - 40<i32>
	r7 = 5<32>
	r0 = 0<32>
	Mem0[r29:byte] = r7
	r2 = r29 + 0<32>
	r1 = r29 + 0<32>
	Mem0[r2 + 8<i32>:word16] = 0x100<16>
	call fn000095B0 (retsize: 0;)
	v11 = r30
	r31 = Mem0[v11 + 4<i32>:word32]
	r30 = Mem0[v11:word32]
	r29 = v11 + 8<i32>
	return
	// succ:  hexagon_nn_disable_dcvs_exit
hexagon_nn_disable_dcvs_exit:


// hexagon_nn_set_powersave_level
// Return size: 0
define hexagon_nn_set_powersave_level
hexagon_nn_set_powersave_level_entry:
	r29 = fp
	// succ:  l0000B310
l0000B310:
	v4 = r29 - 8<i32>
	Mem0[v4:word32] = r30
	Mem0[v4 + 4<i32>:word32] = r31
	r30 = v4
	r29 = v4 - 40<i32>
	r2 = 0<32>
	branch p0 l0000B33C
	// succ:  l0000B318 l0000B33C
l0000B318:
	p0 = r0 == 0<32>
	Mem0[r29:byte] = r7
	r0 = 0<32>
	r2 = r29 + 0<32>
	r7 = 5<32>
	Mem0[r2 + 8<i32>:word16] = 0x100<16>
	r1 = r29 + 0<32>
	r2 = r0
	// succ:  l0000B33C
l0000B33C:
	v12 = r30
	r31 = Mem0[v12 + 4<i32>:word32]
	r30 = Mem0[v12:word32]
	r29 = v12 + 8<i32>
	return
	// succ:  hexagon_nn_set_powersave_level_exit
hexagon_nn_set_powersave_level_exit:


// hexagon_nn_config
// Return size: 0
define hexagon_nn_config
hexagon_nn_config_entry:
	r29 = fp
	// succ:  l0000B340
l0000B340:
	r1 = 0<32>
	r0 = 0<32>
	r3_r2 = 0xFFFFFFFFFFFFFFFF<64>
	v7 = r29 - 8<i32>
	Mem0[v7:word32] = r30
	Mem0[v7 + 4<i32>:word32] = r31
	r30 = v7
	r29 = v7 - 0<i32>
	call fn000095C0 (retsize: 0;)
	v10 = r30
	r31 = Mem0[v10 + 4<i32>:word32]
	r30 = Mem0[v10:word32]
	r29 = v10 + 8<i32>
	return
	// succ:  hexagon_nn_config_exit
hexagon_nn_config_exit:


// logv
// Return size: 0
define logv
logv_entry:
	r29 = fp
	// succ:  l0000B360
l0000B360:
	v4 = r29 - 8<i32>
	Mem0[v4:word32] = r30
	Mem0[v4 + 4<i32>:word32] = r31
	r30 = v4
	r29 = v4 - 40<i32>
	Mem0[r29 + 496<i32>:word64] = r17_r16
	r16 = r2
	Mem0[r29 + 8<i32>:word64] = r23_r22
	r22 = Mem0[r16 + 64<i32>:word32]
	r2 = badva + 0x22<32>
	r7 = Mem0[r16 + 28<i32>:word32]
	r17 = Mem0[r16 + 24<i32>:word32]
	Mem0[r29 + 4<i32>:word32] = r1
	Mem0[r29 + 16<i32>:word64] = r21_r20
	r20 = r5
	r3 = r17 + r22
	r21 = r7 - r22
	Mem0[r29:word32] = r0
	Mem0[r29 + 24<i32>:word64] = r19_r18
	r1_r0 = r21_r3
	r19 = r4
	call fn000095D0 (retsize: 0;)
	branch r21 >u r18 l0000B3F0
	// succ:  l0000B3AC l0000B3F0
l0000B3AC:
	r18 = r0
	r3_r2 = r20_r19
	r1_r0 = r21_r17
	call fn000095E4 (retsize: 0;)
	r0 = r0 + (r18 + r22)
	branch r21 >u r19 l0000B3F0
	// succ:  l0000B3C8 l0000B3F0
l0000B3C8:
	r19 = r0
	r3 = r18 + r22
	r20 = r21 - r19
	r2 = badva + 0xD<32>
	r17 = r17 + (r19 + r3)
	r1_r0 = r20_r17
	call fn000095D0 (retsize: 0;)
	branch p0 l0000B3E8
	// succ:  l0000B3E0 l0000B3E8
l0000B3E0:
	p0 = r12 >u r0
	r0 = r0 + (r19 + r18)
	// succ:  l0000B3E8
l0000B3E8:
	r19_r18 = Mem0[r29 + 24<i32>:word64]
	r17_r16 = Mem0[r29 + 32<i32>:word64]
	r23_r22 = Mem0[r29 + 8<i32>:word64]
	r21_r20 = Mem0[r29 + 16<i32>:word64]
	// succ:  l0000B3F0
l0000B3F0:
	v34 = r30
	r31 = Mem0[v34 + 4<i32>:word32]
	r30 = Mem0[v34:word32]
	r29 = v34 + 8<i32>
	return
	// succ:  logv_exit
logv_exit:


// alloc_node
// Return size: 0
define alloc_node
alloc_node_entry:
	r29 = fp
	// succ:  l0000B400
l0000B400:
	v4 = r29 - 8<i32>
	Mem0[v4:word32] = r30
	Mem0[v4 + 4<i32>:word32] = r31
	r30 = v4
	r29 = v4 - 16<i32>
	Mem0[r29 + 488<i32>:word64] = r19_r18
	r0 = 0x38<32>
	r18 = r0
	Mem0[r29 + 8<i32>:word64] = r17_r16
	r17_r16 = r1_r2
	call fn00009500 (retsize: 0;)
	Mem0[r0 + 28<i32>:word32] = r18
	branch p0 l0000B444
	// succ:  l0000B420 l0000B444
l0000B420:
	p0 = r0 == 0<32>
	r2 = badva + 0x30<32>
	r2 = Mem0[r2 - 208<i32>:word32]
	Mem0[r0 + 32<i32>:byte] = r16
	r2 = Mem0[r7 + r17 * 4<32>:word32]
	Mem0[r0 + 24<i32>:word32] = r17
	Mem0[r0:word32] = r2
	Mem0[r0 + 52<i32>:word32] = 0<32>
	Mem0[r0 + 44<i32>:word32] = 0<32>
	Mem0[r0 + 40<i32>:word32] = 0<32>
	Mem0[r0 + 48<i32>:word32] = 0<32>
	// succ:  l0000B444
l0000B444:
	r19_r18 = Mem0[r29:word64]
	r17_r16 = Mem0[r29 + 8<i32>:word64]
	v19 = r30
	r31 = Mem0[v19 + 4<i32>:word32]
	r30 = Mem0[v19:word32]
	r29 = v19 + 8<i32>
	return
	// succ:  alloc_node_exit
alloc_node_exit:


// node_alloc_common
// Return size: 0
define node_alloc_common
node_alloc_common_entry:
	r29 = fp
	// succ:  l0000B44C
l0000B44C:
	v4 = r29 - 8<i32>
	Mem0[v4:word32] = r30
	Mem0[v4 + 4<i32>:word32] = r31
	r30 = v4
	r29 = v4 - 56<i32>
	Mem0[r29 + 496<i32>:word64] = r17_r16
	r0 = 0x38<32>
	r16 = r0
	Mem0[r29 + 32<i32>:word64] = r21_r20
	Mem0[r29 + 40<i32>:word64] = r19_r18
	Mem0[r29 + 24<i32>:word64] = r23_r22
	r22 = r1
	r19_r18 = r4_r5
	r21_r20 = r2_r3
	call fn00009500 (retsize: 0;)
	branch r17 == 1<32> l0000B5E8
	// succ:  l0000B47C l0000B5E8
l0000B47C:
	r17 = r0
	r1 = 0xA0<32>
	r2 = badva + 0x18<32>
	Mem0[r17 + 28<i32>:word32] = r22
	p0 = r19 == 0<32>
	r2 = Mem0[r2 - 208<i32>:word32]
	r2 = Mem0[r15 + r21 * 4<32>:word32]
	Mem0[r17 + 24<i32>:word32] = r21
	Mem0[r17:word32] = r2
	r21 = Mem0[r29 + 68<i32>:word32]
	Mem0[r17 + 44<i32>:word32] = 0xFFFFFF80<32>
	Mem0[r17 + 32<i32>:byte] = r20
	Mem0[r17 + 16<i32>:word32] = r19
	Mem0[r17 + 48<i32>:word32] = 0<32>
	Mem0[r17 + 52<i32>:word32] = 0<32>
	Mem0[r17 + 40<i32>:word32] = 0<32>
	branch p0 l0000B4B8
	// succ:  l0000B4B0 l0000B4B8
l0000B4B0:
	Mem0[r17 + 12<i32>:word32] = 0<32>
	Mem0[r17 + 4<i32>:word32] = 0<32>
	goto l0000B538
	// succ:  l0000B538
l0000B4B8:
	call fn00009504 (retsize: 0;)
	r0 = r19 << 3<32>
	Mem0[r17 + 3<i32>:byte] = r20
	r20 = r0
	r1 = 0x57<32>
	r3 = badva + 0x1A<32>
	r2 = r16
	call errlog_function (retsize: 0;)
	r1 = 0xA4<32>
	goto l0000B5F4
	// succ:  l0000B5F4
l0000B538:
	Mem0[r17 + 20<i32>:word32] = r18
	r1_r0 = 0<64>
	p0 = r18 == 0<32>
	Mem0[r29 + 8<i32>:word64] = r1_r0
	Mem0[r29 + 16<i32>:word64] = r1_r0
	branch p0 l0000B550
	// succ:  l0000B548 l0000B550
l0000B548:
	Mem0[r17 + 8<i32>:word32] = 0<32>
	goto l0000B5D0
	// succ:  l0000B5D0
l0000B550:
	call fn00009504 (retsize: 0;)
	r0 = r18 << 2<32>
	Mem0[r17 + 2<i32>:byte] = r19
	r19 = r0
	r1 = 0x84<32>
	r22 = 0<32>
	r20 = 0<32>
	// succ:  l0000B56C
l0000B56C:
	r0 = r29 + 8<32>
	r1 = 0<32>
	call tensor_alloc (retsize: 0;)
	Mem0[r19:word32] = r0
	r1 = 0x8D<32>
	branch p0 l0000B5AC
	// succ:  l0000B580 l0000B5AC
l0000B580:
	p0 = r0 == 0<32>
	// succ:  l0000B59C
l0000B59C:
	r1 = 0xA8<32>
	goto l0000B5F4
	// succ:  l0000B5F4
l0000B5AC:
	r21 = r21 + 8<i32>
	r3 = Mem0[r21:word32]
	r2 = Mem0[r17 + 8<i32>:word32]
	r19 = r19 + 4<32>
	r22 = r22 + 1<32>
	p0 = r18 >u r22
	r2 = Mem0[r13 + r20:word32]
	r20 = r20 + 4<32>
	Mem0[r2 + 20<i32>:word32] = r3
	branch p0 l0000B56C
	// succ:  l0000B5D0 l0000B56C
l0000B5D0:
	r19_r18 = Mem0[r29 + 40<i32>:word64]
	r17_r16 = Mem0[r29 + 48<i32>:word64]
	r0 = r17
	r23_r22 = Mem0[r29 + 24<i32>:word64]
	r21_r20 = Mem0[r29 + 32<i32>:word64]
	v30 = r30
	r31 = Mem0[v30 + 4<i32>:word32]
	r30 = Mem0[v30:word32]
	r29 = v30 + 8<i32>
	return
	// succ:  node_alloc_common_exit
l0000B5E8:
	Mem0[r29:word32] = r22
	r2 = r16
	r17 = 0<32>
	call errlog_function (retsize: 0;)
	// succ:  l0000B5F4
l0000B5F4:
	goto l0000B5D0
	// succ:  l0000B5D0
node_alloc_common_exit:


// errlog_function
// Return size: 0
define errlog_function
errlog_function_entry:
	r29 = fp
	// succ:  l0000B604
l0000B604:
	v4 = r29 - 8<i32>
	Mem0[v4:word32] = r30
	Mem0[v4 + 4<i32>:word32] = r31
	r30 = v4
	r29 = v4 - 8<i32>
	r4 = r3
	r0 = badva + 0xF<32>
	Mem0[r29 + 1<i32>:byte] = r6
	r6 = r29 + 0x10<32>
	r5 = r29 + 0x10<32>
	r3 = 0<32>
	v13 = r30
	r31 = Mem0[v13 + 4<i32>:word32]
	r30 = Mem0[v13:word32]
	r29 = v13 + 8<i32>
	return
	// succ:  errlog_function_exit
errlog_function_exit:


// node_free_common
// Return size: 0
define node_free_common
node_free_common_entry:
	r29 = fp
	// succ:  l0000B628
l0000B628:
	v4 = r29 - 8<i32>
	Mem0[v4:word32] = r30
	Mem0[v4 + 4<i32>:word32] = r31
	r30 = v4
	r29 = v4 - 24<i32>
	Mem0[r29 + 496<i32>:word64] = r17_r16
	r16 = r0
	r2 = r1
	Mem0[r29:word32] = r16
	Mem0[r29 + 8<i32>:word64] = r19_r18
	call logmsg_function (retsize: 0;)
	branch r0 == 0<32> l0000B64C
	// succ:  l0000B648 l0000B64C
l0000B648:
	r0 = Mem0[r16 + 4<i32>:word32]
	branch r0 == 0<32> l0000B658
	goto l0000B654
	// succ:  l0000B654 l0000B658
l0000B64C:
	branch r0 == 0<32> l0000B658
	// succ:  l0000B654 l0000B658
l0000B654:
	r0 = Mem0[r16 + 12<i32>:word32]
	branch r2 == 0<32> l0000B688
	goto l0000B660
	// succ:  l0000B660 l0000B688
l0000B658:
	branch r2 == 0<32> l0000B688
	// succ:  l0000B660 l0000B688
l0000B660:
	r2 = Mem0[r16 + 20<i32>:word32]
	r2 = Mem0[r16 + 8<i32>:word32]
	// succ:  l0000B664
l0000B664:
	r2 = Mem0[r13 + r17:word32]
	Mem0[r2 + 16<i32>:word32] = 0<32>
	r2 = Mem0[r16 + 8<i32>:word32]
	r0 = Mem0[r13 + r17:word32]
	call tensor_free (retsize: 0;)
	r2 = Mem0[r16 + 20<i32>:word32]
	r17 = r17 + 4<32>
	branch r2 >u r18 l0000B664
	// succ:  l0000B688 l0000B664
l0000B688:
	r18 = r18 + 1<32>
	branch r0 == 0<32> l0000B694
	// succ:  l0000B690 l0000B694
l0000B690:
	r0 = r16
	call fn00009510 (retsize: 0;)
	goto l0000B698
	// succ:  l0000B698
l0000B694:
	r0 = r16
	// succ:  l0000B698
l0000B698:
	r19_r18 = Mem0[r29 + 8<i32>:word64]
	r17_r16 = Mem0[r29 + 16<i32>:word64]
	r0 = 0<32>
	v16 = r30
	r31 = Mem0[v16 + 4<i32>:word32]
	r30 = Mem0[v16:word32]
	r29 = v16 + 8<i32>
	return
	// succ:  node_free_common_exit
node_free_common_exit:


// logmsg_function
// Return size: 0
define logmsg_function
logmsg_function_entry:
	r29 = fp
	// succ:  l0000B6A4
l0000B6A4:
	v4 = r29 - 8<i32>
	Mem0[v4:word32] = r30
	Mem0[v4 + 4<i32>:word32] = r31
	r30 = v4
	r29 = v4 - 8<i32>
	r4 = 3<32>
	branch r4 >u r3 l0000B6D8
	// succ:  l0000B6B4 l0000B6D8
l0000B6B4:
	r3 = Mem0[r2 + 16<i32>:word32]
	r5 = r29 + 0x10<32>
	r3 = 3<32>
	r0 = badva + 0x23<32>
	r6 = r29 + 0x10<32>
	r1 = 0xB0<32>
	r4 = badva + 0x33<32>
	Mem0[r29 + 4<i32>:word32] = r6
	call logv (retsize: 0;)
	v15 = r30
	r31 = Mem0[v15 + 4<i32>:word32]
	r30 = Mem0[v15:word32]
	r29 = v15 + 8<i32>
	return
	// succ:  logmsg_function_exit
l0000B6D8:
	// succ:  l0000B6D8_thunk_do_append_node
l0000B6D8_thunk_do_append_node:
	call do_append_node (retsize: 0;)
	return
	// succ:  logmsg_function_exit
logmsg_function_exit:


// do_append_node
// Return size: 0
define do_append_node
do_append_node_entry:
	r29 = fp
	// succ:  l0000B6E0
l0000B6E0:
	v4 = r29 - 8<i32>
	Mem0[v4:word32] = r30
	Mem0[v4 + 4<i32>:word32] = r31
	r30 = v4
	r29 = v4 - 16<i32>
	Mem0[r29 + 496<i32>:word64] = r17_r16
	r6 = badva + 0x30<32>
	r6 = Mem0[r6 - 208<i32>:word32]
	r17_r16 = r1_r0
	r6 = Mem0[r14 + r2 * 4<32>:word32]
	r7 = Mem0[r29 + 28<i32>:word32]
	Mem0[r29 + 4<i32>:word32] = r7
	r6 = Mem0[r6 + 8<i32>:word32]
	r7 = Mem0[r29 + 24<i32>:word32]
	Mem0[r29:word32] = r7
	call r6 (retsize: 0;)
	Mem0[r29:word32] = r17
	branch p0 l0000B738
	// succ:  l0000B718 l0000B738
l0000B718:
	p0 = r0 == 0<32>
	Mem0[r0 + 36<i32>:word32] = 0xFFFFFF80<32>
	branch r2 == 0<32> l0000B730
	// succ:  l0000B728 l0000B730
l0000B728:
	r2 = Mem0[r16:word32]
	r16 = r2 + 0x24<32>
	Mem0[r16:word32] = r0
	r17_r16 = Mem0[r29 + 8<i32>:word64]
	r0 = 0<32>
	goto l0000B734
	// succ:  l0000B734
l0000B730:
	Mem0[r16:word32] = r0
	r17_r16 = Mem0[r29 + 8<i32>:word64]
	// succ:  l0000B734
l0000B734:
	v21 = r30
	r31 = Mem0[v21 + 4<i32>:word32]
	r30 = Mem0[v21:word32]
	r29 = v21 + 8<i32>
	return
	// succ:  do_append_node_exit
l0000B738:
	r2 = r16
	r1 = 0xD5<32>
	r3 = badva + 7<32>
	call errlog_function (retsize: 0;)
	r0 = 0xFFFFFFFF<32>
	v20 = r30
	r31 = Mem0[v20 + 4<i32>:word32]
	r30 = Mem0[v20:word32]
	r29 = v20 + 8<i32>
	return
	// succ:  do_append_node_exit
do_append_node_exit:


// do_append_const_node
// Return size: 0
define do_append_const_node
do_append_const_node_entry:
	r29 = fp
	// succ:  l0000B754
l0000B754:
	v4 = r29 - 8<i32>
	Mem0[v4:word32] = r30
	Mem0[v4 + 4<i32>:word32] = r31
	r30 = v4
	r29 = v4 - 16<i32>
	Mem0[r29 + 496<i32>:word64] = r17_r16
	r17_r16 = r1_r0
	r6 = Mem0[r29 + 28<i32>:word32]
	Mem0[r29 + 4<i32>:word32] = r6
	r6 = Mem0[r29 + 24<i32>:word64]
	Mem0[r29:word32] = r6
	call hexagon_nn_const_ctor (retsize: 0;)
	Mem0[r29:word32] = r17
	branch p0 l0000B794
	// succ:  l0000B774 l0000B794
l0000B774:
	p0 = r0 == 0<32>
	Mem0[r0 + 36<i32>:word32] = 0xFFFFFF80<32>
	branch r2 == 0<32> l0000B78C
	// succ:  l0000B784 l0000B78C
l0000B784:
	r2 = Mem0[r16:word32]
	r16 = r2 + 0x24<32>
	Mem0[r16:word32] = r0
	r17_r16 = Mem0[r29 + 8<i32>:word64]
	r0 = 0<32>
	goto l0000B790
	// succ:  l0000B790
l0000B78C:
	Mem0[r16:word32] = r0
	r17_r16 = Mem0[r29 + 8<i32>:word64]
	// succ:  l0000B790
l0000B790:
	v19 = r30
	r31 = Mem0[v19 + 4<i32>:word32]
	r30 = Mem0[v19:word32]
	r29 = v19 + 8<i32>
	return
	// succ:  do_append_const_node_exit
l0000B794:
	r2 = r16
	r1 = 0xFC<32>
	r3 = badva + 0x2B<32>
	call errlog_function (retsize: 0;)
	r0 = 0xFFFFFFFF<32>
	v18 = r30
	r31 = Mem0[v18 + 4<i32>:word32]
	r30 = Mem0[v18:word32]
	r29 = v18 + 8<i32>
	return
	// succ:  do_append_const_node_exit
do_append_const_node_exit:


// do_teardown
// Return size: 0
define do_teardown
do_teardown_entry:
	r29 = fp
	// succ:  l0000B7B0
l0000B7B0:
	v4 = r29 - 8<i32>
	Mem0[v4:word32] = r30
	Mem0[v4 + 4<i32>:word32] = r31
	r30 = v4
	r29 = v4 - 8<i32>
	Mem0[r29 + 496<i32>:word64] = r17_r16
	r16 = r0
	call nn_os_workers_kill (retsize: 0;)
	Mem0[r16 - 28<i32>:byte] = 0<8>
	r2 = Mem0[r16:word32]
	// succ:  l0000B7C4
l0000B7C4:
	r1_r0 = r16_r2
	branch p0 l0000B7FC
	// succ:  l0000B7CC l0000B7FC
l0000B7CC:
	p0 = r2 == 0<32>
	r17 = Mem0[r2 + 4<i32>:word32]
	r3 = Mem0[r2:word32]
	r2 = Mem0[r3 + 12<i32>:word32]
	call r2 (retsize: 0;)
	r2 = r17
	branch p0 l0000B7C4
	// succ:  l0000B7E0 l0000B7C4
l0000B7E0:
	p0 = r16 == 1<32>
	r2 = r16
	r1 = 0x10E<32>
	r3 = badva + 0x36<32>
	call errlog_function (retsize: 0;)
	v18 = r30
	r31 = Mem0[v18 + 4<i32>:word32]
	r30 = Mem0[v18:word32]
	r29 = v18 + 8<i32>
	return
	// succ:  do_teardown_exit
l0000B7FC:
	r0 = r16
	call allocator_teardown (retsize: 0;)
	r0 = Mem0[r16 + 4<i32>:word32]
	call fn00009510 (retsize: 0;)
	r0 = r16
	call fn00009510 (retsize: 0;)
	v19 = r30
	r31 = Mem0[v19 + 4<i32>:word32]
	r30 = Mem0[v19:word32]
	r29 = v19 + 8<i32>
	return
	// succ:  do_teardown_exit
do_teardown_exit:


// do_snpprint
// Return size: 0
define do_snpprint
do_snpprint_entry:
	r29 = fp
	// succ:  l0000B820
l0000B820:
	v4 = r29 - 8<i32>
	Mem0[v4:word32] = r30
	Mem0[v4 + 4<i32>:word32] = r31
	r30 = v4
	r29 = v4 - 64<i32>
	Mem0[r29 + 488<i32>:word64] = r19_r18
	r3 = badva + 0x26<32>
	Mem0[r29 + 40<i32>:word64] = r21_r20
	r18 = r1
	Mem0[r29 + 56<i32>:word64] = r17_r16
	r16 = r0
	r17 = r2 + 0xFFFFFFFF<32>
	r4 = r18 + (r2 + 0x3F<32>)
	Mem0[r4:byte] = 0<32>
	Mem0[r29 + 32<i32>:word64] = r23_r22
	r1_r0 = r17_r18
	r7 = Mem0[r16 + 16<i32>:word32]
	r2 = Mem0[r16 + 12<i32>:word32]
	Mem0[r29:word32] = r16
	Mem0[r29 + 8<i32>:word32] = r7
	Mem0[r29 + 4<i32>:word32] = r2
	r2 = r3
	call fn000095D0 (retsize: 0;)
	r17 = r17 - r0
	branch p0 l0000B990
	// succ:  l0000B85C l0000B990
l0000B85C:
	p0 = r9 == -1<i32>
	r20 = Mem0[r16:word32]
	r18 = r18 + r0
	r19 = 0<32>
	r7 = Mem0[r20 - 32<i32>:byte]
	r8 = Mem0[r20 + 16<i32>:word32]
	r1_r0 = r17_r18
	branch p0 l0000B97C
	// succ:  l0000B874 l0000B97C
l0000B874:
	p0 = r12 == 1<32>
	r5 = Mem0[r20 + 28<i32>:word32]
	r4 = Mem0[r20 + 24<i32>:word32]
	r3 = badva + 0x1C<32>
	r3 = Mem0[r3 - 192<i32>:word32]
	r6 = badva + 8<32>
	r9 = Mem0[r20 + 20<i32>:word32]
	r2 = badva + 0x18<32>
	Mem0[r29 + 7<i32>:byte] = r6
	r6 = Mem0[r6 + r7 * 4<32>:word32]
	Mem0[r29 + 24<i32>:word32] = r7
	Mem0[r29 + 16<i32>:word32] = r8
	Mem0[r29 + 20<i32>:word32] = r9
	Mem0[r29 + 8<i32>:word32] = r4
	Mem0[r29 + 12<i32>:word32] = r3
	Mem0[r29:word32] = r20
	Mem0[r29 + 4<i32>:word32] = r5
	call fn000095D0 (retsize: 0;)
	r17 = r17 - r0
	branch p0 l0000B990
	// succ:  l0000B8C8 l0000B990
l0000B8C8:
	p0 = r9 == -1<i32>
	branch r2 == 0<32> l0000B97C
	// succ:  l0000B8D8 l0000B97C
l0000B8D8:
	r2 = Mem0[r16 + 16<i32>:word32]
	r18 = r18 + r0
	branch r2 == 0<32> l0000B938
	// succ:  l0000B8E0 l0000B938
l0000B8E0:
	r3 = Mem0[r20 + 12<i32>:word32]
	r4 = Mem0[r20 + 4<i32>:word32]
	r2 = badva + 0x12<32>
	// succ:  l0000B8E4
l0000B8E4:
	r4 = Mem0[r13 + r22:word32]
	r3 = Mem0[r21 + r21:word32]
	r5 = r3 + r21
	r1_r0 = r17_r18
	Mem0[r29 + 12<i32>:word32] = r3
	r5 = Mem0[r5 - 4<i32>:word32]
	Mem0[r29 + 4<i32>:word32] = r4
	Mem0[r29 + 8<i32>:word32] = r5
	Mem0[r29:word32] = r23
	call fn000095D0 (retsize: 0;)
	r17 = r17 - r0
	branch p0 l0000B990
	// succ:  l0000B918 l0000B990
l0000B918:
	p0 = r9 == -1<i32>
	r2 = Mem0[r20 + 16<i32>:word32]
	r21 = r21 + 8<32>
	r18 = r18 + r0
	r22 = r22 + 4<32>
	branch r2 >u r23 l0000B8E4
	// succ:  l0000B930 l0000B8E4
l0000B930:
	r23 = r23 + 1<32>
	branch r2 == 0<32> l0000B978
	// succ:  l0000B938 l0000B978
l0000B938:
	branch r2 == 0<32> l0000B978
	// succ:  l0000B940 l0000B978
l0000B940:
	r3 = Mem0[r20 + 8<i32>:word32]
	r1_r0 = r17_r18
	r2 = badva + 0x1C<32>
	// succ:  l0000B944
l0000B944:
	r3 = Mem0[r29 + r21:word32]
	Mem0[r29:word32] = r22
	Mem0[r29 + 4<i32>:word32] = r3
	call fn000095D0 (retsize: 0;)
	r17 = r17 - r0
	branch p0 l0000B990
	// succ:  l0000B964 l0000B990
l0000B964:
	p0 = r9 == -1<i32>
	r2 = Mem0[r20 + 20<i32>:word32]
	r21 = r21 + 4<32>
	r18 = r18 + r0
	branch r2 >u r22 l0000B944
	// succ:  l0000B978 l0000B944
l0000B978:
	r22 = r22 + 1<32>
	r20 = Mem0[r20 + 4<i32>:word32]
	r19 = r19
	// succ:  l0000B97C
l0000B97C:
	Mem0[r29:word32] = r19
	r1_r0 = r17_r18
	r2 = badva + 0x34<32>
	call fn000095D0 (retsize: 0;)
	// succ:  l0000B990
l0000B990:
	r19_r18 = Mem0[r29 + 48<i32>:word64]
	r17_r16 = Mem0[r29 + 56<i32>:word64]
	r23_r22 = Mem0[r29 + 32<i32>:word64]
	r21_r20 = Mem0[r29 + 40<i32>:word64]
	v35 = r30
	r31 = Mem0[v35 + 4<i32>:word32]
	r30 = Mem0[v35:word32]
	r29 = v35 + 8<i32>
	return
	// succ:  do_snpprint_exit
do_snpprint_exit:


// const_depth_extend_8
// Return size: 0
define const_depth_extend_8
const_depth_extend_8_entry:
	r29 = fp
	// succ:  l0000B9A0
l0000B9A0:
	v4 = r29 - 8<i32>
	Mem0[v4:word32] = r30
	Mem0[v4 + 4<i32>:word32] = r31
	r30 = v4
	r29 = v4 - 48<i32>
	Mem0[r29 + 496<i32>:word64] = r17_r16
	r17_r16 = r1_r0
	Mem0[r29 + 16<i32>:word64] = r23_r22
	r3 = Mem0[r16 + 8<i32>:word32]
	Mem0[r29 + 24<i32>:word64] = r21_r20
	r21 = r2
	Mem0[r29 + 32<i32>:word64] = r19_r18
	Mem0[r29 + 8<i32>:word64] = r25_r24
	r23 = Mem0[r3:word32]
	Mem0[r29:word64] = r27_r26
	r7 = Mem0[r23 + 8<i32>:word32]
	r2 = Mem0[r23:word32]
	r18 = Mem0[r23 + 12<i32>:word32]
	r4 = Mem0[r23 + 4<i32>:word32]
	r19 = Mem0[r23 + 16<i32>:word32]
	r24 = r18 + r17
	r2 = r7 * r2
	r25 = r2 * r4
	call fn00009508 (retsize: 0;)
	branch r20 == 0<32> l0000BA54
	// succ:  l0000B9F4 l0000BA54
l0000B9F4:
	r20 = r0
	r2 = 0xFFFFFFFF<32>
	p0 = r25 > 0<32>
	r26 = r25
	r21 = r21 & 0xFF<32>
	r22 = r20
	r1_r0 = r19_r22
	r2 = r18
	call fn00009560 (retsize: 0;)
	// succ:  l0000BA04
l0000BA04:
	r19 = r19 + r18
	r2 = r17
	r1 = r21
	r0 = r22 + r18
	r22 = r22 + r24
	call fn000095F0 (retsize: 0;)
	branch r26 == 1<32> l0000BA04
	// succ:  l0000BA2C l0000BA04
l0000BA2C:
	r26 = r26 + 0xFFFFFFFF<32>
	r0 = Mem0[r23 + 16<i32>:word32]
	call fn00009514 (retsize: 0;)
	Mem0[r23 + 12<i32>:word32] = r24
	Mem0[r23 + 16<i32>:word32] = r20
	r2 = 0<32>
	r3 = Mem0[r16 + 8<i32>:word32]
	r3 = Mem0[r3:word32]
	Mem0[r3 + 20<i32>:word32] = r17
	r19_r18 = Mem0[r29 + 32<i32>:word64]
	r17_r16 = Mem0[r29 + 40<i32>:word64]
	r0 = r2
	// succ:  l0000BA54
l0000BA54:
	r23_r22 = Mem0[r29 + 16<i32>:word64]
	r21_r20 = Mem0[r29 + 24<i32>:word64]
	r27_r26 = Mem0[r29:word64]
	r25_r24 = Mem0[r29 + 8<i32>:word64]
	v33 = r30
	r31 = Mem0[v33 + 4<i32>:word32]
	r30 = Mem0[v33:word32]
	r29 = v33 + 8<i32>
	return
	// succ:  const_depth_extend_8_exit
const_depth_extend_8_exit:


// const_width_extend_8
// Return size: 0
define const_width_extend_8
const_width_extend_8_entry:
	r29 = fp
	// succ:  l0000BA64
l0000BA64:
	v4 = r29 - 8<i32>
	Mem0[v4:word32] = r30
	Mem0[v4 + 4<i32>:word32] = r31
	r30 = v4
	r29 = v4 - 56<i32>
	Mem0[r29 - 56<i32>:word64] = r27_r26
	r27 = r0
	Mem0[r29 + 24<i32>:word64] = r23_r22
	r3 = Mem0[r27 + 8<i32>:word32]
	r22 = r2
	Mem0[r29 + 40<i32>:word64] = r19_r18
	r19 = r1
	Mem0[r29 + 48<i32>:word64] = r17_r16
	Mem0[r29 + 32<i32>:word64] = r21_r20
	r23 = Mem0[r3:word32]
	Mem0[r29 + 16<i32>:word64] = r25_r24
	r16 = Mem0[r23:word32]
	r21 = Mem0[r23 + 8<i32>:word32]
	r26 = Mem0[r23 + 12<i32>:word32]
	r20 = Mem0[r23 + 4<i32>:word32]
	r24 = r21 + r19
	r17 = Mem0[r23 + 16<i32>:word32]
	r3 = r24 * r16
	r25 = r3 * r20
	call fn00009508 (retsize: 0;)
	branch r18 == 0<32> l0000BB30
	// succ:  l0000BAC4 l0000BB30
l0000BAC4:
	r18 = r0
	r2 = 0xFFFFFFFF<32>
	branch r27 > 0<32> l0000BB0C
	// succ:  l0000BAD4 l0000BB0C
l0000BAD4:
	r27 = r20 * r16
	r19 = r26 * r19
	r22 = r22 & 0xFF<32>
	r20 = r18
	r21 = r26 * r21
	r1_r0 = r17_r20
	r2 = r21
	call fn00009560 (retsize: 0;)
	// succ:  l0000BAE0
l0000BAE0:
	r17 = r17 + r21
	r2 = r19
	r1 = r22
	r0 = r20 + r21
	r20 = r20 + r16
	call fn000095F0 (retsize: 0;)
	branch r27 == 1<32> l0000BAE0
	// succ:  l0000BB08 l0000BAE0
l0000BB08:
	r27 = r27 + 0xFFFFFFFF<32>
	r0 = Mem0[r23 + 16<i32>:word32]
	call fn00009514 (retsize: 0;)
	goto l0000BB10
	// succ:  l0000BB10
l0000BB0C:
	r0 = Mem0[r23 + 16<i32>:word32]
	// succ:  l0000BB10
l0000BB10:
	Mem0[r23 + 16<i32>:word32] = r18
	r3 = Mem0[r29 + 4<i32>:word64]
	r2 = 0<32>
	Mem0[r23 + 8<i32>:word32] = r24
	r3 = Mem0[r3 + 8<i32>:word32]
	r3 = Mem0[r3:word32]
	Mem0[r3 + 20<i32>:word32] = r16
	r19_r18 = Mem0[r29 + 40<i32>:word64]
	r17_r16 = Mem0[r29 + 48<i32>:word64]
	r0 = r2
	// succ:  l0000BB30
l0000BB30:
	r23_r22 = Mem0[r29 + 24<i32>:word64]
	r21_r20 = Mem0[r29 + 32<i32>:word64]
	r27_r26 = Mem0[r29 + 8<i32>:word64]
	r25_r24 = Mem0[r29 + 16<i32>:word64]
	v31 = r30
	r31 = Mem0[v31 + 4<i32>:word32]
	r30 = Mem0[v31:word32]
	r29 = v31 + 8<i32>
	return
	// succ:  const_width_extend_8_exit
const_width_extend_8_exit:


// check_same_inputs
// Return size: 0
define check_same_inputs
check_same_inputs_entry:
	r29 = fp
	// succ:  l0000BB40
l0000BB40:
	branch r3 >u r4 l0000BB94
	// succ:  l0000BB4C l0000BB94
l0000BB4C:
	r4 = Mem0[r1 + 16<i32>:word32]
	branch r3 >u r4 l0000BB4C_thunk_try_pad_bad_supernodes
	goto l0000BB58
	// succ:  l0000BB58 l0000BB4C_thunk_try_pad_bad_supernodes
l0000BB4C_thunk_try_pad_bad_supernodes:
	call try_pad_bad_supernodes (retsize: 0;)
	return
	// succ:  check_same_inputs_exit
l0000BB58:
	r4 = Mem0[r2 + 16<i32>:word32]
	return
	// succ:  check_same_inputs_exit
l0000BB94:
	return
	// succ:  check_same_inputs_exit
check_same_inputs_exit:


// try_pad_bad_supernodes
// Return size: 0
define try_pad_bad_supernodes
try_pad_bad_supernodes_entry:
	r29 = fp
	// succ:  l0000BB98
l0000BB98:
	v4 = r29 - 8<i32>
	Mem0[v4:word32] = r30
	Mem0[v4 + 4<i32>:word32] = r31
	r30 = v4
	r29 = v4 - 96<i32>
	Mem0[r29 + 496<i32>:word64] = r17_r16
	r16 = Mem0[r1:word32]
	r17 = r0
	Mem0[r29 + 72<i32>:word64] = r21_r20
	Mem0[r29 + 80<i32>:word64] = r19_r18
	r19 = 0<32>
	r2 = Mem0[r16 + 24<i32>:word32]
	Mem0[r29 + 56<i32>:word64] = r25_r24
	Mem0[r29 + 64<i32>:word64] = r23_r22
	r1_r0 = r16_r17
	p0 = r2 == 0x31<32>
	Mem0[r29 + 48<i32>:word64] = r27_r26
	branch p0 l0000BECC
	// succ:  l0000BBC4 l0000BECC
l0000BBC4:
	call find_first_consumer.1.2_i32_0 (retsize: 0;)
	branch r18 == r16 l0000BED0
	// succ:  l0000BBD4 l0000BED0
l0000BBD4:
	r18 = r0
	branch r2 == 0<32> l0000BC14
	// succ:  l0000BBDC l0000BC14
l0000BBDC:
	r19 = 0<32>
	// succ:  l0000BBE0
l0000BBE0:
	branch r2 >u r20 l0000BC14
	// succ:  l0000BBEC l0000BC14
l0000BBEC:
	r20 = r20 + 1<32>
	r1_r0 = r16_r17
	r2 = r20
	r1_r0 = r16_r17
	r2 = r20 + 0<32>
	branch p0 l0000BECC
	// succ:  l0000BC00 l0000BECC
l0000BC00:
	p0 = r0 == -1<i32>
	call find_last_consumer (retsize: 0;)
	r2 = Mem0[r16 + 20<i32>:word32]
	branch p0 l0000BBE0
	// succ:  l0000BC0C l0000BBE0
l0000BC0C:
	p0 = r0 == -1<i32>
	goto l0000BECC
	// succ:  l0000BECC
l0000BC14:
	p0 = r2 == 0x31<32>
	branch p0 l0000BECC
	// succ:  l0000BC1C l0000BECC
l0000BC1C:
	branch r2 == 0<32> l0000BED0
	// succ:  l0000BC28 l0000BED0
l0000BC28:
	r2 = Mem0[r17:word32]
	r3 = Mem0[r4 + 56<i32>:word32]
	goto l0000BC38
	// succ:  l0000BC38
l0000BC34:
	branch r5 == 0<32> l0000BED0
	goto l0000BC3C
	// succ:  l0000BC3C l0000BED0
l0000BC38:
	branch r6 == r3 l0000BC34
	goto l0000BC44
	// succ:  l0000BC44 l0000BC34
l0000BC3C:
	branch r6 == r3 l0000BC34
	// succ:  l0000BC44 l0000BC34
l0000BC44:
	r6 = Mem0[r5 + 28<i32>:word32]
	r5 = Mem0[r5:word32]
	r24 = Mem0[r5 + 12<i32>:word32]
	r26 = r2 + 0<32>
	r5 = r24 + 0x1F<32>
	branch p0 l0000BED0
	// succ:  l0000BC5C l0000BED0
l0000BC5C:
	p0 = __bitsclr(r24, 0x1F<32>)
	r4 = Mem0[r4 + 8<i32>:word32]
	r22 = r5 & 0xFFFFFFE0<32>
	r20 = r22 - r24
	goto l0000BC74
	// succ:  l0000BC74
l0000BC70:
	branch r26 == 0<32> l0000BED0
	goto l0000BC78
	// succ:  l0000BC78 l0000BED0
l0000BC74:
	branch r5 == r4 l0000BC70
	goto l0000BC80
	// succ:  l0000BC80 l0000BC70
l0000BC78:
	branch r5 == r4 l0000BC70
	// succ:  l0000BC80 l0000BC70
l0000BC80:
	r5 = Mem0[r26 + 28<i32>:word32]
	r25 = r2
	branch r25 == 0<32> l0000BED0
l0000BC88:
	branch r25 == 0<32> l0000BED0
	// succ:  l0000BC90 l0000BED0
l0000BC90:
	r25 = Mem0[r25 + 36<i32>:word32]
	branch r4 == r3 l0000BC88
	// succ:  l0000BC98 l0000BC88
l0000BC98:
	r4 = Mem0[r3 + 8<i32>:word32]
	goto l0000BCA8
	// succ:  l0000BCA8
l0000BCA4:
	branch r21 == 0<32> l0000BED0
	goto l0000BCAC
	// succ:  l0000BCAC l0000BED0
l0000BCA8:
	branch r5 == r4 l0000BCA4
	goto l0000BCB4
	// succ:  l0000BCB4 l0000BCA4
l0000BCAC:
	branch r5 == r4 l0000BCA4
	// succ:  l0000BCB4 l0000BCA4
l0000BCB4:
	r5 = Mem0[r21 + 28<i32>:word32]
	r5 = Mem0[r3 + 32<i32>:word32]
	branch r4 == 0<32> l0000BED0
l0000BCBC:
	branch r4 == 0<32> l0000BED0
	// succ:  l0000BCC4 l0000BED0
l0000BCC4:
	r4 = Mem0[r4 + 36<i32>:word32]
	branch r6 == r5 l0000BCBC
	// succ:  l0000BCCC l0000BCBC
l0000BCCC:
	r3 = Mem0[r3 + 40<i32>:word32]
	branch r2 == 1<32> l0000BED0
l0000BCD4:
	branch r2 == 1<32> l0000BED0
	// succ:  l0000BCDC l0000BED0
l0000BCDC:
	r2 = Mem0[r2 + 36<i32>:word32]
	branch r5 == r3 l0000BCD4
	// succ:  l0000BCE4 l0000BCD4
l0000BCE4:
	r2 = Mem0[r2 + 8<i32>:word32]
	r3 = Mem0[r4 + 8<i32>:word32]
	r0 = 0x17<32>
	r3 = Mem0[r3:word32]
	r2 = Mem0[r2:word32]
	r3 = Mem0[r3 + 16<i32>:word32]
	r2 = Mem0[r2 + 16<i32>:word32]
	r19 = Mem0[r3:word32]
	r2 = Mem0[r2:word32]
	call fn00009604 (retsize: 0;)
	r2 = 0x437F0000<32>
	r1_r0 = r0_r2
	call fn00009610 (retsize: 0;)
	r2 = 0<32>
	call fn00009624 (retsize: 0;)
	r5 = Mem0[r16 + 28<i32>:word32]
	Mem0[r29 + 12<i32>:word32] = r22
	p1 = r2 > 0xFFFFFFFF<32>
	r1 = 0x1C1<32>
	Mem0[r29 + 8<i32>:word32] = r20
	r3 = CONVERT(SLICE(r2, byte, 0), byte, uint32)
	r3 = 0xFF<32>
	p0 = r2 > 0xFF<32>
	Mem0[r29:word32] = r24
	Mem0[r29 + 4<i32>:word32] = r5
	r3 = 0<32>
	Mem0[r29 + 16<i32>:word32] = r3
	Mem0[r29 + 28<i32>:word32] = r3
	call logmsg_function (retsize: 0;)
	r2 = Mem0[r25 + 8<i32>:word32]
	r19 = 0xFFFFFFFF<32>
	r23 = Mem0[r2:word32]
	r6 = Mem0[r23 + 12<i32>:word32]
	r7 = Mem0[r23:word32]
	r4 = Mem0[r23 + 4<i32>:word32]
	r1 = Mem0[r23 + 8<i32>:word32]
	r3 = r6 + r20
	r5 = Mem0[r23 + 16<i32>:word32]
	r2 = r1 * r7
	Mem0[r29 + 40<i32>:word32] = r5
	Mem0[r29 + 32<i32>:word32] = r6
	Mem0[r29 + 44<i32>:word32] = r3
	r2 = r2 * r4
	Mem0[r29 + 36<i32>:word32] = r2
	call fn00009500 (retsize: 0;)
	branch r27 == 1<32> l0000BED0
	// succ:  l0000BDB8 l0000BED0
l0000BDB8:
	r27 = r0
	r0 = Mem0[r29 + 36<i32>:word64]
	r3 = Mem0[r29 + 44<i32>:word64]
	r2 = r20
	r5 = Mem0[r29 + 40<i32>:word64]
	r1 = Mem0[r29 + 32<i32>:word64]
	Mem0[r29 + 10<i32>:byte] = r6
	call fn0000C79C (retsize: 0;)
	r6 = r3 * r0
	r0 = Mem0[r23 + 16<i32>:word32]
	Mem0[r23 + 16<i32>:word32] = r27
	r2 = Mem0[r29 + 44<i32>:word32]
	Mem0[r23 + 12<i32>:word32] = r2
	r3 = Mem0[r29 + 40<i32>:word32]
	r2 = Mem0[r25 + 8<i32>:word32]
	r2 = Mem0[r2:word32]
	Mem0[r2 + 20<i32>:word32] = r3
	r7 = Mem0[r26 + 8<i32>:word32]
	r25 = Mem0[r7:word32]
	r5 = Mem0[r25 + 12<i32>:word32]
	r2 = Mem0[r25 + 8<i32>:word32]
	r4 = Mem0[r25 + 4<i32>:word32]
	r7 = Mem0[r25:word32]
	r3 = Mem0[r25 + 16<i32>:word32]
	r23 = r5 + r20
	r2 = r2 * r7
	Mem0[r29 + 44<i32>:word32] = r3
	Mem0[r29 + 36<i32>:word32] = r5
	r2 = r2 * r4
	Mem0[r29 + 40<i32>:word32] = r2
	call fn00009500 (retsize: 0;)
	branch r27 == 0<32> l0000BED4
	// succ:  l0000BE40 l0000BED4
l0000BE40:
	r27 = r0
	r3_r2 = r23_r20
	r1 = Mem0[r29 + 36<i32>:word64]
	r0 = Mem0[r29 + 40<i32>:word64]
	r5 = Mem0[r29 + 44<i32>:word32]
	Mem0[r29 + 11<i32>:byte] = r6
	call fn0000C79C (retsize: 0;)
	r6 = r23 * r0
	r0 = Mem0[r25 + 16<i32>:word32]
	Mem0[r25 + 12<i32>:word32] = r23
	Mem0[r25 + 16<i32>:word32] = r27
	r1_r0 = r20_r21
	r2 = Mem0[r29 + 28<i32>:word32]
	r3 = Mem0[r26 + 8<i32>:word32]
	r4 = Mem0[r29 + 44<i32>:word32]
	r3 = Mem0[r3:word32]
	Mem0[r3 + 20<i32>:word32] = r4
	call const_width_extend_8 (retsize: 0;)
	r2 = Mem0[r16 + 8<i32>:word32]
	branch p0 l0000BECC
	// succ:  l0000BE88 l0000BECC
l0000BE88:
	p0 = r0 == 0<32>
	r19 = Mem0[r2:word32]
	r4 = Mem0[r19 + 20<i32>:word32]
	r7_r6 = r4 *u64 r0
	r7 = r7 + r4 * r1
	r1_r0 = r7_r6
	call fn00009630 (retsize: 0;)
	r4 = badva + 0x21<32>
	Mem0[r19 + 20<i32>:word32] = r0
	r6 = Mem0[r18 + 28<i32>:word32]
	r5 = Mem0[r16 + 28<i32>:word32]
	r1 = 0x1C6<32>
	Mem0[r29 + 4<i32>:word32] = r6
	Mem0[r29:word32] = r5
	r19 = 0<32>
	call logmsg_function (retsize: 0;)
	// succ:  l0000BECC
l0000BECC:
	r27_r26 = Mem0[r29 + 48<i32>:word64]
	r25_r24 = Mem0[r29 + 56<i32>:word64]
	r0 = r19
	goto l0000BED8
	// succ:  l0000BED8
l0000BED0:
	r27_r26 = Mem0[r29 + 48<i32>:word64]
	r25_r24 = Mem0[r29 + 56<i32>:word64]
l0000BED4:
	r27_r26 = Mem0[r29 + 48<i32>:word64]
	// succ:  l0000BED8
l0000BED8:
	r19_r18 = Mem0[r29 + 80<i32>:word64]
	r17_r16 = Mem0[r29 + 88<i32>:word64]
	r23_r22 = Mem0[r29 + 64<i32>:word64]
	r21_r20 = Mem0[r29 + 72<i32>:word64]
	v24 = r30
	r31 = Mem0[v24 + 4<i32>:word32]
	r30 = Mem0[v24:word32]
	r29 = v24 + 8<i32>
	return
	// succ:  try_pad_bad_supernodes_exit
try_pad_bad_supernodes_exit:


// logmsg_function
// Return size: 0
define logmsg_function
logmsg_function_entry:
	r29 = fp
	// succ:  l0000BEE4
l0000BEE4:
	v4 = r29 - 8<i32>
	Mem0[v4:word32] = r30
	Mem0[v4 + 4<i32>:word32] = r31
	r30 = v4
	r29 = v4 - 8<i32>
	branch r3 >u r5 l0000BEE8_thunk_do_prepare
	goto l0000BEF4
	// succ:  l0000BEF4 l0000BEE8_thunk_do_prepare
l0000BEE8_thunk_do_prepare:
	call do_prepare (retsize: 0;)
	return
	// succ:  logmsg_function_exit
l0000BEF4:
	r5 = Mem0[r2 + 16<i32>:word32]
	r6 = r29 + 0x10<32>
	r5 = r29 + 0x10<32>
	r0 = badva + 5<32>
	Mem0[r29 + 4<i32>:word32] = r6
	call logv (retsize: 0;)
	v13 = r30
	r31 = Mem0[v13 + 4<i32>:word32]
	r30 = Mem0[v13:word32]
	r29 = v13 + 8<i32>
	return
	// succ:  logmsg_function_exit
logmsg_function_exit:


// do_prepare
// Return size: 0
define do_prepare
do_prepare_entry:
	r29 = fp
	// succ:  l0000BF08
l0000BF08:
	v4 = r29 - 8<i32>
	Mem0[v4:word32] = r30
	Mem0[v4 + 4<i32>:word32] = r31
	r30 = v4
	r29 = v4 - 168<i32>
	Mem0[r29 + 496<i32>:word64] = r17_r16
	r16 = r0
	Mem0[r29 + 144<i32>:word64] = r21_r20
	Mem0[r29 + 152<i32>:word64] = r19_r18
	Mem0[r29 + 128<i32>:word64] = r25_r24
	Mem0[r29 + 136<i32>:word64] = r23_r22
	Mem0[r29 + 120<i32>:word64] = r27_r26
	call nn_os_hvx_power_on (retsize: 0;)
	branch r2 == 2<32> l0000BF50
	// succ:  l0000BF34 l0000BF50
l0000BF34:
	r2 = Mem0[r16 + 36<i32>:int8]
	r1 = 0x1E5<32>
	r3 = badva + 6<32>
	r2 = r16
	// succ:  l0000BF3C
l0000BF3C:
	call errlog_function (retsize: 0;)
	// succ:  l0000BF40
l0000BF40:
	r0 = 0xFFFFFFFF<32>
	goto l0000C734
	// succ:  l0000C734
l0000BF50:
	branch r22 == 0<32> l0000BFA0
	// succ:  l0000BF5C l0000BFA0
l0000BF5C:
	r21 = r29 + 0x708<32>
	r23 = 0xFFFFFFCC<32>
	r2 = Mem0[r17 + 24<i32>:word32]
	// succ:  l0000BF68
l0000BF68:
	r1 = 0xD1<32>
	p0 = r2 == 0x4D<32>
	branch p0 l0000C0F4
	// succ:  l0000BF74 l0000C0F4
l0000BF74:
	r4 = badva + 0x33<32>
	call logmsg_function (retsize: 0;)
	r1_r0 = r17_r16
	call find_first_consumer.1.2_i32_0 (retsize: 0;)
	branch r18 == r17 l0000C0F8
	// succ:  l0000BF98 l0000C0F8
l0000BF98:
	r18 = r0
	branch r2 == 0<32> l0000BFDC
	goto l0000BFA4
	// succ:  l0000BFA4 l0000BFDC
l0000BFA0:
	goto l0000BFAC
	// succ:  l0000BFAC
l0000BFA4:
	r2 = Mem0[r17 + 20<i32>:word32]
	branch r2 >u r19 l0000BFD8
l0000BFAC:
	r1_r0 = r17_r16
	r2 = r19
	call find_first_consumer (retsize: 0;)
	// succ:  l0000BFB0 l0000BFD8 l0000BFB8
l0000BFB0:
	r19 = r19 + 1<32>
	r1_r0 = r17_r16
	r2 = r19
	// succ:  l0000BFB8
l0000BFB8:
	r1_r0 = r17_r16
	r2 = r19 + 0<32>
	branch p0 l0000C0F4
	// succ:  l0000BFC4 l0000C0F4
l0000BFC4:
	p0 = r0 == -1<i32>
	call find_last_consumer (retsize: 0;)
	r2 = Mem0[r17 + 20<i32>:word32]
	branch p0 l0000BFA4
	// succ:  l0000BFD0 l0000BFA4
l0000BFD0:
	p0 = r0 == -1<i32>
	goto l0000C0F4
	// succ:  l0000C0F4
l0000BFD8:
	p0 = r2 == 0x4B<32>
	branch p0 l0000C0F4
	goto l0000BFE0
	// succ:  l0000BFE0 l0000C0F4
l0000BFDC:
	p0 = r2 == 0x4B<32>
	// succ:  l0000BFE0
l0000BFE0:
	branch r20 >u r2 l0000C0F8
	// succ:  l0000BFEC l0000C0F8
l0000BFEC:
	r2 = Mem0[r17 + 16<i32>:word32]
	branch r20 >u r2 l0000C0F8
	// succ:  l0000BFF4 l0000C0F8
l0000BFF4:
	r3 = Mem0[r18 + 12<i32>:word32]
	r4 = Mem0[r17 + 12<i32>:word32]
	r4 = r4 + 4<32>
	r3 = r3 + 4<32>
	goto l0000C010
	// succ:  l0000C010
l0000C004:
	branch r2 > 4<32> l0000C038
	goto l0000C014
	// succ:  l0000C014 l0000C038
l0000C010:
	r5 = Mem0[r4 - 4<i32>:word32]
	branch r6 == r5 l0000C0F8
	goto l0000C020
	// succ:  l0000C020 l0000C0F8
l0000C014:
	r2 = r2 + 1<32>
	r3 = r3 + 8<32>
	branch r6 == r5 l0000C0F8
	// succ:  l0000C020 l0000C0F8
l0000C020:
	r6 = Mem0[r3 - 4<i32>:word32]
	branch r6 == r5 l0000C004
	// succ:  l0000C02C l0000C004
l0000C02C:
	r6 = Mem0[r3:word32]
	r4 = badva + 0x15<32>
	// succ:  l0000C038
l0000C038:
	r1 = 0xD8<32>
	call logmsg_function (retsize: 0;)
	r2 = Mem0[r18 + 8<i32>:word32]
	r3 = __set_bit<word32,word32>(r21, 4<32>)
	r4 = badva + 0x10<32>
	r0 = r16
	r5 = 3<32>
	r6 = Mem0[r2:word32]
	r2 = 0x13<32>
	r6 = Mem0[r6 + 20<i32>:word32]
	Mem0[r3:word32] = 0<32>
	Mem0[r29 + 8<i32>:word32] = r6
	r7 = Mem0[r18 + 8<i32>:word32]
	r1 = Mem0[r7 + 4<i32>:word32]
	Mem0[r29 + 4<i32>:byte] = r3
	r3 = Mem0[r1 + 20<i32>:word32]
	r7 = Mem0[r18 + 8<i32>:word32]
	r3 = Mem0[r7 + 8<i32>:word32]
	r3 = Mem0[r3 + 20<i32>:word32]
	Mem0[r21 + 20<i32>:word32] = 0<32>
	Mem0[r29 + 24<i32>:word32] = r3
	r6 = Mem0[r13 + r23:word32]
	r3 = Mem0[r18 + 32<i32>:byte]
	r6 = Mem0[r6 + 76<i32>:word32]
	r1 = Mem0[r18 + 28<i32>:word32]
	r4 = Mem0[r17 + 16<i32>:word32]
	r7 = Mem0[r17 + 12<i32>:word32]
	r6 = Mem0[r6 + 8<i32>:word32]
	Mem0[r29 + 4<i32>:word32] = r21
	Mem0[r29:word32] = r7
	call r6 (retsize: 0;)
	branch r19 == 0<32> l0000C0F8
	// succ:  l0000C0B0 l0000C0F8
l0000C0B0:
	r19 = r0
	Mem0[r22:word32] = r19
	Mem0[r19 + 9<i32>:byte] = r7
	r7 = Mem0[r18 + 36<i32>:word32]
	r2 = Mem0[r2 + 12<i32>:word32]
	call r2 (retsize: 0;)
	r2 = Mem0[r18:word32]
	r1_r0 = r16_r18
	r2 = Mem0[r2 + 12<i32>:word32]
	call r2 (retsize: 0;)
	r4 = badva + 3<32>
	r1 = 0xEB<32>
	Mem0[r29:byte] = r5
	r5 = Mem0[r19 + 28<i32>:word32]
	call logmsg_function (retsize: 0;)
	goto l0000C0F8
	// succ:  l0000C0F8
l0000C0F4:
	r2 = Mem0[r22:word32]
	// succ:  l0000C0F8
l0000C0F8:
	r22 = r2 + 0x24<32>
	branch r17 == 0<32> l0000BF68
	// succ:  l0000C108 l0000BF68
l0000C108:
	r17 = Mem0[r2 + 36<i32>:word32]
	branch r22 == 0<32> l0000C168
	// succ:  l0000C118 l0000C168
l0000C118:
	r21 = r29 + 0x560<32>
	r2 = Mem0[r17 + 24<i32>:word32]
	// succ:  l0000C11C
l0000C11C:
	r3 = Mem0[r17 + 12<i32>:word32]
	p0 = r2 == 0x4B<32>
	branch p0 l0000C29C
	// succ:  l0000C128 l0000C29C
l0000C128:
	branch r2 == 1<32> l0000C2A0
	// succ:  l0000C134 l0000C2A0
l0000C134:
	r2 = Mem0[r3 + 36<i32>:word32]
	branch r2 == 1<32> l0000C2A0
	// succ:  l0000C13C l0000C2A0
l0000C13C:
	r3 = Mem0[r3 + 32<i32>:word32]
	branch r2 == 1<32> l0000C2A0
l0000C144:
	branch r2 == 1<32> l0000C2A0
	// succ:  l0000C14C l0000C2A0
l0000C14C:
	r2 = Mem0[r2 + 36<i32>:word32]
	branch r4 == r3 l0000C144
	// succ:  l0000C154 l0000C144
l0000C154:
	branch r2 == 7<32> l0000C2A0
	// succ:  l0000C15C l0000C2A0
l0000C15C:
	r1_r0 = r17_r16
	branch r18 == r17 l0000C2A0
	goto l0000C16C
	// succ:  l0000C16C l0000C2A0
l0000C168:
	branch r2 == 0<32> l0000C1B0
	goto l0000C178
	// succ:  l0000C178 l0000C1B0
l0000C16C:
	r18 = r0
	branch r2 == 0<32> l0000C1B0
	// succ:  l0000C178 l0000C1B0
l0000C178:
	r2 = Mem0[r17 + 20<i32>:word32]
	branch r2 >u r19 l0000C1AC
	// succ:  l0000C184 l0000C1AC
l0000C184:
	r19 = r19 + 1<32>
	r1_r0 = r17_r16
	r2 = r19
	r1_r0 = r17_r16
	r2 = r19 + 0<32>
	branch p0 l0000C29C
	// succ:  l0000C198 l0000C29C
l0000C198:
	p0 = r0 == -1<i32>
	call find_last_consumer (retsize: 0;)
	r2 = Mem0[r17 + 20<i32>:word32]
	branch p0 l0000C178
	// succ:  l0000C1A4 l0000C178
l0000C1A4:
	p0 = r0 == -1<i32>
	goto l0000C29C
	// succ:  l0000C29C
l0000C1AC:
	branch r2 == 0xA<32> l0000C2A4
	goto l0000C1B8
	// succ:  l0000C1B8 l0000C2A4
l0000C1B0:
	branch r2 == 0xA<32> l0000C2A4
	// succ:  l0000C1B8 l0000C2A4
l0000C1B8:
	r2 = Mem0[r18 + 24<i32>:word32]
	r4 = badva + 0x29<32>
	call logmsg_function (retsize: 0;)
	r2 = Mem0[r18 + 8<i32>:word32]
	r3 = __set_bit<word32,word32>(r20, 4<32>)
	r6 = badva + 0xC<32>
	r2 = Mem0[r2:word32]
	r5_r4 = 0x300000004<64>
	r2 = Mem0[r2 + 20<i32>:word32]
	Mem0[r3:word32] = 0<32>
	Mem0[r29 + 8<i32>:word32] = r2
	r2 = 0x17<32>
	r3 = Mem0[r18 + 12<i32>:word32]
	r0 = Mem0[r3:word32]
	r1 = Mem0[r3 + 4<i32>:word32]
	Mem0[r29 + 32<i32>:word64] = r1_r0
	r7 = Mem0[r18 + 8<i32>:word32]
	r3 = Mem0[r7 + 4<i32>:word32]
	r3 = Mem0[r3 + 20<i32>:word32]
	Mem0[r20 + 12<i32>:word32] = 0<32>
	Mem0[r29 + 16<i32>:word32] = r3
	r7 = Mem0[r18 + 12<i32>:word32]
	r0 = Mem0[r7 + 8<i32>:word32]
	r1 = Mem0[r7 + 12<i32>:word32]
	Mem0[r29 + 40<i32>:word64] = r1_r0
	r3 = Mem0[r18 + 8<i32>:word32]
	r3 = Mem0[r3 + 8<i32>:word32]
	r3 = Mem0[r3 + 20<i32>:word32]
	Mem0[r20 + 20<i32>:word32] = 0<32>
	Mem0[r29 + 24<i32>:word32] = r3
	r7 = Mem0[r18 + 12<i32>:word32]
	r0 = Mem0[r7 + 16<i32>:word32]
	r1 = Mem0[r7 + 20<i32>:word32]
	Mem0[r29 + 48<i32>:word64] = r1_r0
	r3 = Mem0[r17 + 12<i32>:word32]
	r0 = Mem0[r3 + 32<i32>:word32]
	r1 = Mem0[r3 + 36<i32>:word32]
	Mem0[r29 + 56<i32>:word64] = r1_r0
	r6 = Mem0[r13 + r23:word32]
	r0 = r16
	r3 = Mem0[r17 + 32<i32>:byte]
	r6 = Mem0[r6 + 92<i32>:word32]
	r1 = Mem0[r18 + 28<i32>:word32]
	Mem0[r29 + 4<i32>:word32] = r20
	r6 = Mem0[r6 + 8<i32>:word32]
	Mem0[r29:word32] = r21
	call r6 (retsize: 0;)
	Mem0[r17 + 36<i32>:word32] = r0
	branch p0 l0000C29C
	// succ:  l0000C270 l0000C29C
l0000C270:
	p0 = r0 == 0<32>
	Mem0[r0 + 9<i32>:byte] = r7
	r7 = Mem0[r18 + 36<i32>:word32]
	r1_r0 = r16_r18
	r2 = Mem0[r2 + 12<i32>:word32]
	call r2 (retsize: 0;)
	r4 = badva + 0x29<32>
	r1 = 0x11A<32>
	call logmsg_function (retsize: 0;)
	// succ:  l0000C29C
l0000C29C:
	r2 = Mem0[r22:word32]
	// succ:  l0000C2A0
l0000C2A0:
	r22 = r2 + 0x24<32>
	// succ:  l0000C2A4
l0000C2A4:
	branch r17 == 0<32> l0000C11C
	// succ:  l0000C2B0 l0000C11C
l0000C2B0:
	r17 = Mem0[r2 + 36<i32>:word32]
	branch r17 == 1<32> l0000C664
	// succ:  l0000C2BC l0000C664
l0000C2BC:
	r17 = Mem0[r16:word32]
	r25 = r29 + 0x20<32>
	branch r2 == 0x1F<32> l0000C628
l0000C2C4:
	branch r2 == 0x1F<32> l0000C628
	// succ:  l0000C2D0 l0000C628
l0000C2D0:
	r2 = Mem0[r17 + 24<i32>:word32]
	r1 = 0x133<32>
	r4 = badva + 0x26<32>
	call logmsg_function (retsize: 0;)
	r1_r0 = r17_r16
	call find_first_consumer.1.2_i32_0 (retsize: 0;)
	branch r18 == r17 l0000C624
	// succ:  l0000C2F0 l0000C624
l0000C2F0:
	r18 = r0
	branch r2 == 0<32> l0000C334
	// succ:  l0000C2FC l0000C334
l0000C2FC:
	r2 = Mem0[r17 + 20<i32>:word32]
	branch r2 >u r19 l0000C330
	// succ:  l0000C308 l0000C330
l0000C308:
	r19 = r19 + 1<32>
	r1_r0 = r17_r16
	r2 = r19
	r1_r0 = r17_r16
	r2 = r19 + 0<32>
	branch p0 l0000C620
	// succ:  l0000C31C l0000C620
l0000C31C:
	p0 = r0 == -1<i32>
	call find_last_consumer (retsize: 0;)
	r2 = Mem0[r17 + 20<i32>:word32]
	branch p0 l0000C2FC
	// succ:  l0000C328 l0000C2FC
l0000C328:
	p0 = r0 == -1<i32>
	goto l0000C620
	// succ:  l0000C620
l0000C330:
	branch r2 == 6<32> l0000C340
	goto l0000C338
	// succ:  l0000C338 l0000C340
l0000C334:
	p0 = r2 == 0x4B<32>
	branch p0 l0000C620
	goto l0000C33C
	// succ:  l0000C33C l0000C620
l0000C338:
	p0 = r2 == 0x4B<32>
	r4 = badva + 4<32>
	goto l0000C348
	// succ:  l0000C348
l0000C33C:
	r4 = badva + 4<32>
	goto l0000C348
	// succ:  l0000C348
l0000C340:
	r4 = badva + 4<32>
	// succ:  l0000C348
l0000C348:
	r1 = 0x13B<32>
	call logmsg_function (retsize: 0;)
	r1_r0 = r18_r16
	call find_first_consumer.1.2_i32_0 (retsize: 0;)
	branch r19 == r18 l0000C624
	// succ:  l0000C364 l0000C624
l0000C364:
	r19 = r0
	branch r2 == 0<32> l0000C3A8
	// succ:  l0000C370 l0000C3A8
l0000C370:
	r2 = Mem0[r18 + 20<i32>:word32]
	branch r2 >u r20 l0000C3A4
	// succ:  l0000C37C l0000C3A4
l0000C37C:
	r20 = r20 + 1<32>
	r1_r0 = r18_r16
	r2 = r20
	r1_r0 = r18_r16
	r2 = r20 + 0<32>
	branch p0 l0000C620
	// succ:  l0000C390 l0000C620
l0000C390:
	p0 = r0 == -1<i32>
	call find_last_consumer (retsize: 0;)
	r2 = Mem0[r18 + 20<i32>:word32]
	branch p0 l0000C370
	// succ:  l0000C39C l0000C370
l0000C39C:
	p0 = r0 == -1<i32>
	goto l0000C620
	// succ:  l0000C620
l0000C3A4:
	r1 = 0x140<32>
	p0 = r2 == 0x23<32>
	branch p0 l0000C620
	goto l0000C3B0
	// succ:  l0000C3B0 l0000C620
l0000C3A8:
	r1 = 0x140<32>
	p0 = r2 == 0x23<32>
	// succ:  l0000C3B0
l0000C3B0:
	r4 = badva + 0x1E<32>
	call logmsg_function (retsize: 0;)
	r1_r0 = r19_r16
	call find_first_consumer.1.2_i32_0 (retsize: 0;)
	branch r20 == r19 l0000C624
	// succ:  l0000C3D4 l0000C624
l0000C3D4:
	r20 = r0
	branch r2 == 0<32> l0000C418
	// succ:  l0000C3E0 l0000C418
l0000C3E0:
	r2 = Mem0[r19 + 20<i32>:word32]
	branch r2 >u r21 l0000C414
	// succ:  l0000C3EC l0000C414
l0000C3EC:
	r21 = r21 + 1<32>
	r1_r0 = r19_r16
	r2 = r21
	r1_r0 = r19_r16
	r2 = r21 + 0<32>
	branch p0 l0000C620
	// succ:  l0000C400 l0000C620
l0000C400:
	p0 = r0 == -1<i32>
	call find_last_consumer (retsize: 0;)
	r2 = Mem0[r19 + 20<i32>:word32]
	branch p0 l0000C3E0
	// succ:  l0000C40C l0000C3E0
l0000C40C:
	p0 = r0 == -1<i32>
	goto l0000C620
	// succ:  l0000C620
l0000C414:
	branch r2 == 6<32> l0000C424
	goto l0000C41C
	// succ:  l0000C41C l0000C424
l0000C418:
	p0 = r2 == 0x4B<32>
	branch p0 l0000C620
	goto l0000C420
	// succ:  l0000C420 l0000C620
l0000C41C:
	p0 = r2 == 0x4B<32>
	r4 = badva + 0x3D<32>
	goto l0000C42C
	// succ:  l0000C42C
l0000C420:
	r4 = badva + 0x3D<32>
	goto l0000C42C
	// succ:  l0000C42C
l0000C424:
	r4 = badva + 0x3D<32>
	// succ:  l0000C42C
l0000C42C:
	r1 = 0x145<32>
	call logmsg_function (retsize: 0;)
	r1_r0 = r20_r16
	call find_first_consumer.1.2_i32_0 (retsize: 0;)
	branch r21 == r20 l0000C624
	// succ:  l0000C448 l0000C624
l0000C448:
	r21 = r0
	branch r2 == 0<32> l0000C48C
	// succ:  l0000C454 l0000C48C
l0000C454:
	r2 = Mem0[r20 + 20<i32>:word32]
	branch r2 >u r22 l0000C488
	// succ:  l0000C460 l0000C488
l0000C460:
	r22 = r22 + 1<32>
	r1_r0 = r20_r16
	r2 = r22
	r1_r0 = r20_r16
	r2 = r22 + 0<32>
	branch p0 l0000C620
	// succ:  l0000C474 l0000C620
l0000C474:
	p0 = r0 == -1<i32>
	call find_last_consumer (retsize: 0;)
	r2 = Mem0[r20 + 20<i32>:word32]
	branch p0 l0000C454
	// succ:  l0000C480 l0000C454
l0000C480:
	p0 = r0 == -1<i32>
	goto l0000C620
	// succ:  l0000C620
l0000C488:
	branch r2 == 0xF<32> l0000C624
	goto l0000C494
	// succ:  l0000C494 l0000C624
l0000C48C:
	branch r2 == 0xF<32> l0000C624
	// succ:  l0000C494 l0000C624
l0000C494:
	r2 = __set_bit<word32,word32>(r2, 2<32>)
	r4 = badva + 0x1B<32>
	r1 = 0x14B<32>
	call logmsg_function (retsize: 0;)
	r2 = Mem0[r17 + 12<i32>:word32]
	r1 = Mem0[r2 + 4<i32>:word32]
	r0 = Mem0[r2:word32]
	Mem0[r29 + 32<i32>:word64] = r1_r0
	r7 = Mem0[r17 + 12<i32>:word32]
	r5 = Mem0[r7 + 12<i32>:word32]
	r4 = Mem0[r7 + 8<i32>:word32]
	Mem0[r29 + 40<i32>:word64] = r5_r4
	r2 = Mem0[r17 + 12<i32>:word32]
	r1 = Mem0[r2 + 20<i32>:word32]
	r0 = Mem0[r2 + 16<i32>:word32]
	Mem0[r29 + 48<i32>:word64] = r1_r0
	r7 = Mem0[r17 + 12<i32>:word32]
	r5 = Mem0[r7 + 28<i32>:word32]
	r4 = Mem0[r7 + 24<i32>:word32]
	Mem0[r29 + 56<i32>:word64] = r5_r4
	r2 = Mem0[r17 + 12<i32>:word32]
	r1 = Mem0[r2 + 4<i32>:word32]
	r0 = Mem0[r2:word32]
	Mem0[r29 + 64<i32>:word64] = r1_r0
	r7 = Mem0[r17 + 12<i32>:word32]
	r5 = Mem0[r7 + 12<i32>:word32]
	r4 = Mem0[r7 + 8<i32>:word32]
	Mem0[r29 + 72<i32>:word64] = r5_r4
	r2 = Mem0[r17 + 12<i32>:word32]
	r1 = Mem0[r2 + 20<i32>:word32]
	r0 = Mem0[r2 + 16<i32>:word32]
	Mem0[r29 + 80<i32>:word64] = r1_r0
	r7 = Mem0[r19 + 12<i32>:word32]
	r5 = Mem0[r7 + 12<i32>:word32]
	r4 = Mem0[r7 + 8<i32>:word32]
	Mem0[r29 + 88<i32>:word64] = r5_r4
	r4 = 0xA<32>
	r2 = Mem0[r19 + 12<i32>:word32]
	r1 = Mem0[r2 + 4<i32>:word32]
	r0 = Mem0[r2:word32]
	Mem0[r29 + 96<i32>:word64] = r1_r0
	r5 = Mem0[r19 + 12<i32>:word32]
	r7 = Mem0[r5 + 12<i32>:word32]
	r6 = Mem0[r5 + 8<i32>:word32]
	Mem0[r29 + 104<i32>:word64] = r7_r6
	branch r2 == 0xE<32> l0000C534
	// succ:  l0000C528 l0000C534
l0000C528:
	r2 = Mem0[r21 + 24<i32>:word32]
	r1 = Mem0[r2 + 28<i32>:word32]
	r0 = Mem0[r2 + 24<i32>:word32]
	Mem0[r29 + 112<i32>:word64] = r1_r0
	r2 = Mem0[r21 + 8<i32>:word32]
	r3 = __set_bit<word32,word32>(r24, 4<32>)
	r6 = badva + 0x20<32>
	goto l0000C540
	// succ:  l0000C540
l0000C534:
	r2 = Mem0[r21 + 8<i32>:word32]
	r3 = __set_bit<word32,word32>(r24, 4<32>)
	r6 = badva + 0x20<32>
	// succ:  l0000C540
l0000C540:
	r2 = Mem0[r2:word32]
	r5 = 3<32>
	Mem0[r29 + 2<i32>:byte] = r7
	r7 = Mem0[r2 + 20<i32>:word32]
	r2 = 0x31<32>
	r1 = Mem0[r21 + 8<i32>:word32]
	r0 = Mem0[r1 + 4<i32>:word32]
	Mem0[r29 + 4<i32>:byte] = r3
	r3 = Mem0[r0 + 20<i32>:word32]
	r0 = r16
	r7 = Mem0[r21 + 8<i32>:word32]
	r3 = Mem0[r7 + 8<i32>:word32]
	r3 = Mem0[r3 + 20<i32>:word32]
	Mem0[r24 + 20<i32>:word32] = 0xFFFFFF80<32>
	Mem0[r29 + 24<i32>:word32] = r3
	r6 = Mem0[r13 + r23:word32]
	r1 = Mem0[r21 + 28<i32>:word32]
	r6 = Mem0[r6 + 196<i32>:word32]
	r3 = Mem0[r17 + 32<i32>:byte]
	Mem0[r29 + 4<i32>:word32] = r24
	r6 = Mem0[r6 + 8<i32>:word32]
	Mem0[r29:word32] = r25
	call r6 (retsize: 0;)
	branch r22 == 0<32> l0000C624
	// succ:  l0000C5AC l0000C624
l0000C5AC:
	r22 = r0
	Mem0[r26:word32] = r22
	Mem0[r22 + 9<i32>:byte] = r7
	r7 = Mem0[r21 + 36<i32>:word32]
	r2 = Mem0[r2 + 12<i32>:word32]
	call r2 (retsize: 0;)
	r2 = Mem0[r18:word32]
	r1_r0 = r16_r18
	r2 = Mem0[r2 + 12<i32>:word32]
	call r2 (retsize: 0;)
	r2 = Mem0[r19:word32]
	r1_r0 = r16_r19
	r2 = Mem0[r2 + 12<i32>:word32]
	call r2 (retsize: 0;)
	r2 = Mem0[r20:word32]
	r1_r0 = r16_r20
	r2 = Mem0[r2 + 12<i32>:word32]
	call r2 (retsize: 0;)
	r2 = Mem0[r21:word32]
	r1_r0 = r16_r21
	r2 = Mem0[r2 + 12<i32>:word32]
	call r2 (retsize: 0;)
	r4 = badva + 0x33<32>
	r1 = 0x176<32>
	Mem0[r29:byte] = r5
	r5 = Mem0[r22 + 28<i32>:word32]
	call logmsg_function (retsize: 0;)
	goto l0000C624
	// succ:  l0000C624
l0000C620:
	r2 = Mem0[r26:word32]
	// succ:  l0000C624
l0000C624:
	r26 = r2 + 0x24<32>
	// succ:  l0000C628
l0000C628:
	branch r17 == 0<32> l0000C2C4
	// succ:  l0000C634 l0000C2C4
l0000C634:
	r17 = Mem0[r2 + 36<i32>:word32]
	r2 = Mem0[r17:word32]
	// succ:  l0000C638
l0000C638:
	r1_r0 = r17_r16
	branch p0 l0000C65C
	// succ:  l0000C640 l0000C65C
l0000C640:
	p0 = r2 == 0<32>
	call try_pad_bad_supernodes (retsize: 0;)
	r2 = Mem0[r17:word32]
	r1 = 0x1CE<32>
	branch p0 l0000C748
	// succ:  l0000C650 l0000C748
l0000C650:
	p0 = r0 == 1<32>
	r17 = r2 + 0x24<32>
	r2 = Mem0[r2 + 36<i32>:word32]
	goto l0000C638
	// succ:  l0000C638
l0000C65C:
	r0 = r16
	call allocate_graph_storage (retsize: 0;)
	// succ:  l0000C664
l0000C664:
	branch p0 l0000C734
	// succ:  l0000C668 l0000C734
l0000C668:
	p0 = r0 == 0<32>
	branch r17 == 0<32> l0000C718
	// succ:  l0000C674 l0000C718
l0000C674:
	r17 = Mem0[r16:word32]
	branch r2 == 0<32> l0000C704
	// succ:  l0000C680 l0000C704
l0000C680:
	r2 = Mem0[r17 + 16<i32>:word32]
	branch r4 == 0<32> l0000C6E0
	// succ:  l0000C68C l0000C6E0
l0000C68C:
	r4 = Mem0[r23 + r18 * 8<32>:word32]
	branch r2 == 0<32> l0000C75C
	// succ:  l0000C698 l0000C75C
l0000C698:
	r2 = Mem0[r16:word32]
	r5 = Mem0[r3 + 4<i32>:word32]
	branch r2 == 0<32> l0000C758
l0000C6A0:
	branch r2 == 0<32> l0000C758
	// succ:  l0000C6A8 l0000C758
l0000C6A8:
	r2 = Mem0[r2 + 36<i32>:word32]
	branch r3 == r4 l0000C6A0
	// succ:  l0000C6B0 l0000C6A0
l0000C6B0:
	branch r3 >u r5 l0000C6D0
	// succ:  l0000C6B8 l0000C6D0
l0000C6B8:
	Mem0[r29 + 4<i32>:word32] = r4
	r1 = 0x7E<32>
	r3 = badva + 0x1A<32>
	Mem0[r29:word32] = r5
	r2 = r16
	goto l0000BF3C
	// succ:  l0000BF3C
l0000C6D0:
	r2 = Mem0[r14 + r5 * 4<32>:word32]
	Mem0[r31 + r18 * 4<32>:word32] = r2
	goto l0000C6F0
	// succ:  l0000C6F0
l0000C6E0:
	r4 = badva + 0x18<32>
	r1 = 0x83<32>
	call logmsg_function (retsize: 0;)
	// succ:  l0000C6F0
l0000C6F0:
	r2 = Mem0[r17 + 16<i32>:word32]
	branch r2 >u r18 l0000C680
	// succ:  l0000C700 l0000C680
l0000C700:
	r18 = r18 + 1<32>
	branch r17 == 1<32> l0000C674
	goto l0000C708
	// succ:  l0000C708 l0000C674
l0000C704:
	r17 = Mem0[r16:word32]
	// succ:  l0000C708
l0000C708:
	r2 = Mem0[r17:word32]
	r1_r0 = r16_r17
	branch p0 l0000C724
	// succ:  l0000C714 l0000C724
l0000C714:
	p0 = r9 == 0<32>
	r0 = r16
	call nn_os_hvx_power_off (retsize: 0;)
	goto l0000C71C
	// succ:  l0000C71C
l0000C718:
	r0 = r16
	// succ:  l0000C71C
l0000C71C:
	Mem0[r16 - 28<i32>:byte] = 2<8>
	goto l0000C734
	// succ:  l0000C734
l0000C724:
	r2 = Mem0[r2 + 4<i32>:word32]
	call r2 (retsize: 0;)
	r17 = Mem0[r17 + 36<i32>:word32]
	branch p0 l0000C708
	// succ:  l0000C734 l0000C708
l0000C734:
	r19_r18 = Mem0[r29 + 152<i32>:word64]
	r17_r16 = Mem0[r29 + 160<i32>:word64]
	r23_r22 = Mem0[r29 + 136<i32>:word64]
	r21_r20 = Mem0[r29 + 144<i32>:word64]
	r27_r26 = Mem0[r29 + 120<i32>:word64]
	r25_r24 = Mem0[r29 + 128<i32>:word64]
	v28 = r30
	r31 = Mem0[v28 + 4<i32>:word32]
	r30 = Mem0[v28:word32]
	r29 = v28 + 8<i32>
	return
	// succ:  do_prepare_exit
l0000C748:
	goto l0000BF40
	// succ:  l0000BF40
l0000C758:
	Mem0[r29 + 1<i32>:byte] = r2
	r2 = Mem0[r17 + 28<i32>:word32]
	r3 = badva + 8<32>
	goto l0000C768
	// succ:  l0000C768
l0000C75C:
	Mem0[r29 + 1<i32>:byte] = r2
	r2 = Mem0[r17 + 28<i32>:word32]
	// succ:  l0000C768
l0000C768:
	r2 = r16
	Mem0[r29:word32] = r4
	goto l0000BF3C
	// succ:  l0000BF3C
do_prepare_exit:


// errlog_function
// Return size: 0
define errlog_function
errlog_function_entry:
	r29 = fp
	// succ:  l0000C774
l0000C774:
	v4 = r29 - 8<i32>
	Mem0[v4:word32] = r30
	Mem0[v4 + 4<i32>:word32] = r31
	r30 = v4
	r29 = v4 - 8<i32>
	r4 = r3
	r0 = badva + 1<32>
	Mem0[r29 + 1<i32>:byte] = r6
	r6 = r29 + 0x10<32>
	r5 = r29 + 0x10<32>
	r3 = 0<32>
	v13 = r30
	r31 = Mem0[v13 + 4<i32>:word32]
	r30 = Mem0[v13:word32]
	r29 = v13 + 8<i32>
	return
	// succ:  errlog_function_exit
errlog_function_exit:


// try_pad_bad_supernodes.extracted_region
// Return size: 0
define try_pad_bad_supernodes.extracted_region
try_pad_bad_supernodes.extracted_region_entry:
	r29 = fp
	// succ:  l0000C798
l0000C798:
	v4 = r29 - 8<i32>
	Mem0[v4:word32] = r30
	Mem0[v4 + 4<i32>:word32] = r31
	r30 = v4
	r29 = v4 - 24<i32>
	Mem0[r29 + 496<i32>:word64] = r17_r16
	Mem0[r29 + 8<i32>:word64] = r19_r18
	r19_r18 = r4_r3
	r17_r16 = r2_r1
	Mem0[r29:word64] = r21_r20
	r21_r20 = r0_r5
	branch p0 l0000C7DC
	// succ:  l0000C7B0_thunk_fn0000C7B4 l0000C7B0_thunk_fn0000C7DC
l0000C7B0_thunk_fn0000C7B4:
	call fn0000C7B4 (retsize: 0;)
	return
	// succ:  try_pad_bad_supernodes.extracted_region_exit
l0000C7B0_thunk_fn0000C7DC:
	call fn0000C7DC (retsize: 0;)
	return
	// succ:  try_pad_bad_supernodes.extracted_region_exit
try_pad_bad_supernodes.extracted_region_exit:


// fn0000C79C
// Return size: 0
define fn0000C79C
fn0000C79C_entry:
	r29 = fp
	// succ:  l0000C79C
l0000C79C:
	Mem0[r29 + 8<i32>:word64] = r19_r18
	r19_r18 = r4_r3
	r17_r16 = r2_r1
	Mem0[r29:word64] = r21_r20
	r21_r20 = r0_r5
	branch p0 l0000C7B0_thunk_fn0000C7DC
	// succ:  l0000C7B0_thunk_fn0000C7B4 l0000C7B0_thunk_fn0000C7DC
l0000C7B0_thunk_fn0000C7B4:
	call fn0000C7B4 (retsize: 0;)
	return
	// succ:  fn0000C79C_exit
l0000C7B0_thunk_fn0000C7DC:
	call fn0000C7DC (retsize: 0;)
	return
	// succ:  fn0000C79C_exit
fn0000C79C_exit:


// fn0000C7B4
// Return size: 0
define fn0000C7B4
fn0000C7B4_entry:
	r29 = fp
	// succ:  l0000C7B4
l0000C7B4:
	p0 = r13 > 0<32>
	r1_r0 = r20_r19
	r2 = r16
	call fn00009560 (retsize: 0;)
	// succ:  l0000C7B8
l0000C7B8:
	r20 = r20 + r16
	r1 = 0<32>
	r2 = r17
	r0 = r19 + r16
	r19 = r19 + r18
	call fn000095F0 (retsize: 0;)
	branch r21 == 1<32> l0000C7B8
	// succ:  l0000C7CC_thunk_fn0000C7DC l0000C7B8
l0000C7CC_thunk_fn0000C7DC:
	call fn0000C7DC (retsize: 0;)
	return
	// succ:  fn0000C7B4_exit
fn0000C7B4_exit:


// fn0000C7DC
// Return size: 0
define fn0000C7DC
fn0000C7DC_entry:
	r29 = fp
	// succ:  l0000C7DC
l0000C7DC:
	r19_r18 = Mem0[r29 + 8<i32>:word64]
	r17_r16 = Mem0[r29 + 16<i32>:word64]
	// succ:  l0000C7E0
l0000C7E0:
	r21 = r21 + 0xFFFFFFFF<32>
	v8 = r30
	r31 = Mem0[v8 + 4<i32>:word32]
	r30 = Mem0[v8:word32]
	r29 = v8 + 8<i32>
	return
	// succ:  fn0000C7DC_exit
fn0000C7DC_exit:


// find_first_consumer.1.2_i32_0
// Return size: 0
define find_first_consumer.1.2_i32_0
find_first_consumer.1.2_i32_0_entry:
	r29 = fp
	// succ:  l0000C7E4
l0000C7E4:
	// succ:  l0000C854_in_find_first_consumer.1.2_i32_0
l0000C854_in_find_first_consumer.1.2_i32_0:
	v5 = r30
	r31 = Mem0[v5 + 4<i32>:word32]
	r30 = Mem0[v5:word32]
	r29 = v5 + 8<i32>
	return
	// succ:  find_first_consumer.1.2_i32_0_exit
find_first_consumer.1.2_i32_0_exit:


// tensor_alloc
// Return size: 0
define tensor_alloc
tensor_alloc_entry:
	r29 = fp
	// succ:  l0000C7F0
l0000C7F0:
	v4 = r29 - 8<i32>
	Mem0[v4:word32] = r30
	Mem0[v4 + 4<i32>:word32] = r31
	r30 = v4
	r29 = v4 - 16<i32>
	Mem0[r29 + 488<i32>:word64] = r19_r18
	r0 = 0x20<32>
	r18 = r0
	Mem0[r29 + 8<i32>:word64] = r17_r16
	r17 = r1
	call fn00009500 (retsize: 0;)
	branch r16 == 0<32> l0000C814
	// succ:  l0000C810 l0000C814
l0000C810:
	r16 = r0
	Mem0[r16 + 16<i32>:word32] = 0<32>
	branch p0 l0000C838
	goto l0000C818
	// succ:  l0000C818 l0000C838
l0000C814:
	Mem0[r16 + 16<i32>:word32] = 0<32>
	// succ:  l0000C818
l0000C818:
	p0 = r9 == 0<32>
	call fn00009550 (retsize: 0;)
	Mem0[r16 + 16<i32>:word32] = r0
	branch p0 l0000C838
	// succ:  l0000C82C l0000C838
l0000C82C:
	p0 = r0 == 0<32>
	r0 = r16
	r16 = 0<32>
	call fn00009510 (retsize: 0;)
	goto l0000C850
	// succ:  l0000C850
l0000C838:
	r3 = Mem0[r18 + 12<i32>:word32]
	r2 = Mem0[r18:word32]
	r4 = Mem0[r18 + 8<i32>:word32]
	r7 = Mem0[r18 + 4<i32>:word32]
	Mem0[r16 + 12<i32>:word32] = r3
	Mem0[r16:word32] = r2
	Mem0[r16 + 8<i32>:word32] = r4
	Mem0[r16 + 4<i32>:word32] = r7
	Mem0[r16 + 20<i32>:word32] = r17
	Mem0[r16 + 24<i32>:word32] = r17
	Mem0[r16 + 28<i32>:word32] = r16
	// succ:  l0000C850
l0000C850:
	r19_r18 = Mem0[r29:word64]
	r17_r16 = Mem0[r29 + 8<i32>:word64]
	r0 = r16
	// succ:  l0000C854
l0000C854:
	v16 = r30
	r31 = Mem0[v16 + 4<i32>:word32]
	r30 = Mem0[v16:word32]
	r29 = v16 + 8<i32>
	return
	// succ:  tensor_alloc_exit
tensor_alloc_exit:


// tensor_dup
// Return size: 0
define tensor_dup
tensor_dup_entry:
	r29 = fp
	// succ:  l0000C85C
l0000C85C:
	v4 = r29 - 8<i32>
	Mem0[v4:word32] = r30
	Mem0[v4 + 4<i32>:word32] = r31
	r30 = v4
	r29 = v4 - 16<i32>
	Mem0[r29 + 488<i32>:word64] = r19_r18
	r0 = 0x20<32>
	r18 = r0
	Mem0[r29 + 8<i32>:word64] = r17_r16
	r17 = Mem0[r18 + 24<i32>:word32]
	call fn00009500 (retsize: 0;)
	branch r16 == 0<32> l0000C880
	// succ:  l0000C87C l0000C880
l0000C87C:
	r16 = r0
	branch p0 l0000C8A8
	// succ:  l0000C880 l0000C8A8
l0000C880:
	p0 = r9 == 0<32>
	call fn00009550 (retsize: 0;)
	Mem0[r16 + 16<i32>:word32] = r0
	branch p0 l0000C89C
	// succ:  l0000C894 l0000C89C
l0000C894:
	p0 = r0 == 0<32>
	r2 = Mem0[r18 + 24<i32>:word32]
	goto l0000C8B0
	// succ:  l0000C8B0
l0000C89C:
	r0 = r16
	r16 = 0<32>
	call fn00009510 (retsize: 0;)
	goto l0000C8CC
	// succ:  l0000C8CC
l0000C8A8:
	Mem0[r16 + 16<i32>:word32] = 0<32>
	r2 = 0<32>
	r0 = 0<32>
	// succ:  l0000C8B0
l0000C8B0:
	r4 = Mem0[r18 + 4<i32>:word32]
	r3 = Mem0[r18:word32]
	r5 = Mem0[r18 + 12<i32>:word32]
	r7 = Mem0[r18 + 8<i32>:word32]
	Mem0[r16 + 4<i32>:word32] = r4
	Mem0[r16:word32] = r3
	Mem0[r16 + 12<i32>:word32] = r5
	Mem0[r16 + 8<i32>:word32] = r7
	Mem0[r16 + 24<i32>:word32] = r17
	r1 = Mem0[r18 + 16<i32>:word32]
	Mem0[r16 + 28<i32>:word32] = r16
	Mem0[r16 + 20<i32>:word32] = r17
	call fn00009560 (retsize: 0;)
	// succ:  l0000C8CC
l0000C8CC:
	r19_r18 = Mem0[r29:word64]
	r17_r16 = Mem0[r29 + 8<i32>:word64]
	r0 = r16
	v21 = r30
	r31 = Mem0[v21 + 4<i32>:word32]
	r30 = Mem0[v21:word32]
	r29 = v21 + 8<i32>
	return
	// succ:  tensor_dup_exit
tensor_dup_exit:


// tensor_free
// Return size: 0
define tensor_free
tensor_free_entry:
	r29 = fp
	// succ:  l0000C8D8
l0000C8D8:
	v4 = r29 - 8<i32>
	Mem0[v4:word32] = r30
	Mem0[v4 + 4<i32>:word32] = r31
	r30 = v4
	r29 = v4 - 8<i32>
	Mem0[r29 + 496<i32>:word64] = r17_r16
	r16 = r0
	branch r0 == 0<32> l0000C8F0
	// succ:  l0000C8EC l0000C8F0
l0000C8EC:
	r0 = Mem0[r16 + 16<i32>:word32]
	v10 = r30
	r31 = Mem0[v10 + 4<i32>:word32]
	r30 = Mem0[v10:word32]
	r29 = v10 + 8<i32>
	r17_r16 = Mem0[r29:word64]
	goto l0000C97C
	// succ:  l0000C97C
l0000C8F0:
	v12 = r30
	r31 = Mem0[v12 + 4<i32>:word32]
	r30 = Mem0[v12:word32]
	r29 = v12 + 8<i32>
	r17_r16 = Mem0[r29:word64]
	// succ:  l0000C8F0_thunk_find_last_consumer
l0000C8F0_thunk_find_last_consumer:
	call find_last_consumer (retsize: 0;)
	return
	// succ:  tensor_free_exit
l0000C97C:
	r0 = Mem0[r0:word32]
	r0 = Mem0[r0:word32]
	// succ:  l0000C97C_thunk_find_last_consumer
l0000C97C_thunk_find_last_consumer:
	call find_last_consumer (retsize: 0;)
	return
	// succ:  tensor_free_exit
tensor_free_exit:


// do_perfinfo_reset
// Return size: 0
define do_perfinfo_reset
do_perfinfo_reset_entry:
	r29 = fp
	// succ:  l0000C900
l0000C900:
	v4 = r29 - 8<i32>
	Mem0[v4:word32] = r30
	Mem0[v4 + 4<i32>:word32] = r31
	r30 = v4
	r29 = v4 - 0<i32>
	r2 = r0
	branch r3 == 0<32> l0000C924
	// succ:  l0000C914 l0000C924
l0000C914:
	r3 = Mem0[r2:word32]
	r5_r4 = 0<64>
	branch r3 == 1<32> l0000C914
	// succ:  l0000C920 l0000C914
l0000C920:
	r3 = Mem0[r3 + 36<i32>:word32]
	Mem0[r2 + 52<i32>:word32] = r1
	r3 = r1 & 0xFF<32>
	// succ:  l0000C924
l0000C924:
	call fn00009644 (retsize: 0;)
	r1 = __set_bit<word32,word32>(r3, 0x10<32>)
	v12 = r30
	r31 = Mem0[v12 + 4<i32>:word32]
	r30 = Mem0[v12:word32]
	r29 = v12 + 8<i32>
	return
	// succ:  do_perfinfo_reset_exit
do_perfinfo_reset_exit:


// do_perfinfo_get
// Return size: 0
define do_perfinfo_get
do_perfinfo_get_entry:
	r29 = fp
	// succ:  l0000C930
l0000C930:
	r3 = Mem0[r0:word32]
	r0 = 0<32>
	r4 = r1 + 8<32>
	r0 = 0<32>
	branch p0 l0000C96C
	// succ:  l0000C940 l0000C96C
l0000C940:
	p0 = r3 == 0<32>
	branch p0 l0000C970
	// succ:  l0000C944 l0000C970
l0000C944:
	p0 = r2 >u r0
	Mem0[r4 - 2<i32>:byte] = r5
	r5 = Mem0[r3 + 28<i32>:word32]
	r0 = r0 + 1<32>
	Mem0[r4 - 4<i32>:word32] = r1
	r7_r6 = Mem0[r3 + 48<i32>:word64]
	Mem0[r4:word64] = r7_r6
	r4 = r4 + 0x10<32>
	branch r3 == 1<32> l0000C944
	goto l0000C970
	// succ:  l0000C970 l0000C944
l0000C96C:
	return
	// succ:  do_perfinfo_get_exit
l0000C970:
	r3 = Mem0[r3 + 36<i32>:word32]
	return
	// succ:  do_perfinfo_get_exit
do_perfinfo_get_exit:


// find_last_consumer
// Return size: 0
define find_last_consumer
find_last_consumer_entry:
	r29 = fp
	// succ:  l0000C980
l0000C980:
	v4 = r29 - 8<i32>
	Mem0[v4:word32] = r30
	Mem0[v4 + 4<i32>:word32] = r31
	r30 = v4
	r29 = v4 - 56<i32>
	Mem0[r29 + 496<i32>:word64] = r17_r16
	r17_r16 = r1_r0
	Mem0[r29 + 40<i32>:word64] = r19_r18
	r19 = Mem0[r16:word32]
	r18 = r2
	Mem0[r29 + 24<i32>:word64] = r23_r22
	Mem0[r29 + 32<i32>:word64] = r21_r20
	r0 = r17 + 0<32>
	p0 = r19 == 0<32>
	Mem0[r29 + 16<i32>:word64] = r25_r24
	// succ:  l0000CA30
l0000CA30:
	r23_r22 = Mem0[r29 + 24<i32>:word64]
	r21_r20 = Mem0[r29 + 32<i32>:word64]
	v20 = r30
	r31 = Mem0[v20 + 4<i32>:word32]
	r30 = Mem0[v20:word32]
	r29 = v20 + 8<i32>
	return
	// succ:  find_last_consumer_exit
find_last_consumer_exit:


// find_first_consumer
// Return size: 0
define find_first_consumer
find_first_consumer_entry:
	r29 = fp
	// succ:  l0000CA40
l0000CA40:
	v4 = r29 - 8<i32>
	Mem0[v4:word32] = r30
	Mem0[v4 + 4<i32>:word32] = r31
	r30 = v4
	r29 = v4 - 48<i32>
	Mem0[r29 + 496<i32>:word64] = r17_r16
	r17_r16 = r0_r1
	Mem0[r29 + 32<i32>:word64] = r19_r18
	r19 = Mem0[r17:word32]
	r18 = r2
	Mem0[r29 + 24<i32>:word64] = r21_r20
	Mem0[r29 + 16<i32>:word64] = r23_r22
	branch p0 l0000CAC4
	// succ:  l0000CA5C l0000CAC4
l0000CA5C:
	p0 = r11 == 0<32>
	r20 = Mem0[r16 + 28<i32>:word32]
	r21 = 0<32>
	branch r2 == 0<32> l0000CAB8
	// succ:  l0000CA6C l0000CAB8
l0000CA6C:
	r2 = Mem0[r19 + 16<i32>:word32]
	r3 = Mem0[r19 + 12<i32>:word32]
	r4 = r3 + r23
	// succ:  l0000CA74
l0000CA74:
	branch r4 == r20 l0000CAAC
	// succ:  l0000CA80 l0000CAAC
l0000CA80:
	r4 = Mem0[r4 - 4<i32>:word32]
	branch r3 == r18 l0000CAAC
	// succ:  l0000CA88 l0000CAAC
l0000CA88:
	r16 = r19 + 0<32>
	goto l0000CAC8
	// succ:  l0000CAC8
l0000CAAC:
	branch r2 >u r22 l0000CA74
	// succ:  l0000CAB8 l0000CA74
l0000CAB8:
	r22 = r22 + 1<32>
	branch r19 == 1<32> l0000CA6C
	goto l0000CAC8
	// succ:  l0000CAC8 l0000CA6C
l0000CAC4:
	r19_r18 = Mem0[r29 + 32<i32>:word64]
	r17_r16 = Mem0[r29 + 40<i32>:word64]
	r0 = r16
	goto l0000CACC
	// succ:  l0000CACC
l0000CAC8:
	r19_r18 = Mem0[r29 + 32<i32>:word64]
	r17_r16 = Mem0[r29 + 40<i32>:word64]
	// succ:  l0000CACC
l0000CACC:
	r23_r22 = Mem0[r29 + 16<i32>:word64]
	r21_r20 = Mem0[r29 + 24<i32>:word64]
	v26 = r30
	r31 = Mem0[v26 + 4<i32>:word32]
	r30 = Mem0[v26:word32]
	r29 = v26 + 8<i32>
	return
	// succ:  find_first_consumer_exit
find_first_consumer_exit:


// logmsg_function
// Return size: 0
define logmsg_function
logmsg_function_entry:
	r29 = fp
	// succ:  l0000CAD4
l0000CAD4:
	v4 = r29 - 8<i32>
	Mem0[v4:word32] = r30
	Mem0[v4 + 4<i32>:word32] = r31
	r30 = v4
	r29 = v4 - 8<i32>
	r3 = 0<32>
	r0 = badva + 0<32>
	r5 = r29 + 0x10<32>
	r1 = 0x3C<32>
	r4 = badva + 0xB<32>
	Mem0[r29 + 1<i32>:byte] = r6
	r6 = r29 + 0x10<32>
	call logv (retsize: 0;)
	r0 = Mem0[r0:word32]
	r0 = Mem0[r0:word32]
	// succ:  l0000CAFC_thunk_nn_os_workers_kill
l0000CAFC_thunk_nn_os_workers_kill:
	call nn_os_workers_kill (retsize: 0;)
	return
	// succ:  logmsg_function_exit
logmsg_function_exit:


// nn_os_workers_kill
// Return size: 0
define nn_os_workers_kill
nn_os_workers_kill_entry:
	r29 = fp
	// succ:  l0000CB00
l0000CB00:
	v4 = r29 - 8<i32>
	Mem0[v4:word32] = r30
	Mem0[v4 + 4<i32>:word32] = r31
	r30 = v4
	r29 = v4 - 8<i32>
	Mem0[r29 + 496<i32>:word64] = r17_r16
	r16 = r0
	r0 = Mem0[r16 + 68<i32>:word32]
	call qurt_pipe_send.1.1_i64_0 (retsize: 0;)
	r0 = Mem0[r16 + 72<i32>:word32]
	call qurt_pipe_send.1.1_i64_0 (retsize: 0;)
	r17_r16 = Mem0[r29:word64]
	r0 = Mem0[r16 + 72<i32>:word32]
	v10 = r30
	r31 = Mem0[v10 + 4<i32>:word32]
	r30 = Mem0[v10:word32]
	r29 = v10 + 8<i32>
	// succ:  l0000CB20_thunk_qurt_pipe_send.1.1_i64_0
l0000CB20_thunk_qurt_pipe_send.1.1_i64_0:
	call qurt_pipe_send.1.1_i64_0 (retsize: 0;)
	return
	// succ:  nn_os_workers_kill_exit
nn_os_workers_kill_exit:


// nn_os_work_for_vector
// Return size: 0
define nn_os_work_for_vector
nn_os_work_for_vector_entry:
	r29 = fp
	// succ:  l0000CB28
l0000CB28:
	r0 = Mem0[r0 + 68<i32>:word32]
	r3_r2 = r2_r1
	// succ:  l0000CB28_thunk_fn00009650
l0000CB28_thunk_fn00009650:
	call fn00009650 (retsize: 0;)
	return
	// succ:  nn_os_work_for_vector_exit
nn_os_work_for_vector_exit:


// nn_os_work_for_scalar
// Return size: 0
define nn_os_work_for_scalar
nn_os_work_for_scalar_entry:
	r29 = fp
	// succ:  l0000CB34
l0000CB34:
	r0 = Mem0[r0 + 72<i32>:word32]
	r3_r2 = r2_r1
	// succ:  l0000CB34_thunk_fn00009650
l0000CB34_thunk_fn00009650:
	call fn00009650 (retsize: 0;)
	return
	// succ:  nn_os_work_for_scalar_exit
nn_os_work_for_scalar_exit:


// nn_os_vector_acquire
// Return size: 0
define nn_os_vector_acquire
nn_os_vector_acquire_entry:
	r29 = fp
	// succ:  l0000CB40
l0000CB40:
	v4 = r29 - 8<i32>
	Mem0[v4:word32] = r30
	Mem0[v4 + 4<i32>:word32] = r31
	r30 = v4
	r29 = v4 - 0<i32>
	call dspCV_hvx_lock.1.0_i8_2.1_i32_0 (retsize: 0;)
	v7 = r30
	r31 = Mem0[v7 + 4<i32>:word32]
	r30 = Mem0[v7:word32]
	r29 = v7 + 8<i32>
	return
	// succ:  nn_os_vector_acquire_exit
nn_os_vector_acquire_exit:


// nn_os_vector_release
// Return size: 0
define nn_os_vector_release
nn_os_vector_release_entry:
	r29 = fp
	// succ:  l0000CB4C
l0000CB4C:
	// succ:  l0000CB4C_thunk_fn00009660
l0000CB4C_thunk_fn00009660:
	call fn00009660 (retsize: 0;)
	return
	// succ:  nn_os_vector_release_exit
nn_os_vector_release_exit:


// nn_os_workers_spawn
// Return size: 0
define nn_os_workers_spawn
nn_os_workers_spawn_entry:
	r29 = fp
	// succ:  l0000CB50
l0000CB50:
	v4 = r29 - 8<i32>
	Mem0[v4:word32] = r30
	Mem0[v4 + 4<i32>:word32] = r31
	r30 = v4
	r29 = v4 - 232<i32>
	Mem0[r29 + 224<i32>:word64] = r17_r16
	r2 = r29 + 0x90<32>
	Mem0[r29 + 192<i32>:word64] = r25_r24
	Mem0[r29 + 200<i32>:word64] = r23_r22
	r16 = r2 + 8<32>
	Mem0[r29 + 208<i32>:word64] = r21_r20
	Mem0[r29 + 216<i32>:word64] = r19_r18
	r0 = r16
	r18 = r0
	Mem0[r29 + 184<i32>:word64] = r27_r26
	call qurt_sem_init_val.1.1_i16_0 (retsize: 0;)
	r19 = r29 + 4<32>
	r0 = 0x20<32>
	Mem0[r19 + 8<i32>:byte] = 0<8>
	Mem0[r29 + 144<i32>:word32] = r18
	r17 = r18 + 0x44<32>
	call fn00009500 (retsize: 0;)
	Mem0[r19 + 4<i32>:word32] = 0xFFFFFF84<32>
	Mem0[r29 + 4<i32>:word32] = r0
	r0 = r17
	r1 = r29 + 4<32>
	call fn00009670 (retsize: 0;)
	Mem0[r19 + 8<i32>:byte] = 0<32>
	r0 = 0x20<32>
	r18 = r18 + 0x48<32>
	call fn00009500 (retsize: 0;)
	Mem0[r19 + 4<i32>:word32] = 0xFFFFFF84<32>
	Mem0[r29 + 4<i32>:word32] = r0
	r0 = r18
	r1 = r29 + 4<32>
	call fn00009670 (retsize: 0;)
	r3 = r29 + 0xA8<32>
	r2 = r29 + 0x10<32>
	r23 = 0x100<32>
	r22 = 0xFF<32>
	r27_r26 = 0x200000000001<64>
	r25_r24 = 0x8100000000<64>
	r21 = r2 + 0x3C<32>
	r19 = __set_bit<word32,word32>(r3, 4<32>)
	Mem0[r21 - 28<i32>:byte] = r24
	r3 = 0xFFFE<32>
	r20 = r21 + 0xFFFFFFE4<32>
	// succ:  l0000CBEC
l0000CBEC:
	Mem0[r21 - 11<i32>:byte] = r22
	Mem0[r21 - 8<i32>:byte] = r24
	r1 = badva + 0x26<32>
	Mem0[r21 - 10<i32>:word16] = r23
	Mem0[r21 - 12<i32>:byte] = r24
	r0 = r20
	r2 = 0x10<32>
	Mem0[r21 - 6<i32>:word16] = r3
	Mem0[r21 - 7<i32>:byte] = r22
	Mem0[r21:word32] = 0<32>
	Mem0[r21 - 4<i32>:word32] = r24
	call fn00009680 (retsize: 0;)
	Mem0[r21 - 13<i32>:byte] = r24
	r0 = 0x2000<32>
	call fn00009500 (retsize: 0;)
	Mem0[r21:word32] = r0
	p0 = r26 > 1<32>
	r2 = badva + 0x20<32>
	Mem0[r21 - 10<i32>:word16] = r25
	Mem0[r21 - 4<i32>:word32] = r27
	r1_r0 = r20_r19
	r3 = r29 + 0x90<32>
	r4 = p0 ? r18 : r17
	Mem0[r29 + 37<i32>:byte] = r4
	r4 = Mem0[r4:word32]
	call fn00009690 (retsize: 0;)
	r0 = r16
	r19 = r19 + 4<32>
	r25 = r25 + 1<32>
	branch r26 == 9<32> l0000CBEC
	// succ:  l0000CC80 l0000CBEC
l0000CC80:
	r26 = r26 + 1<32>
	r21 = r21 + 0x20<32>
	r19_r18 = Mem0[r29 + 216<i32>:word64]
	r17_r16 = Mem0[r29 + 224<i32>:word64]
	r23_r22 = Mem0[r29 + 200<i32>:word64]
	r21_r20 = Mem0[r29 + 208<i32>:word64]
	r27_r26 = Mem0[r29 + 184<i32>:word64]
	r25_r24 = Mem0[r29 + 192<i32>:word64]
	v34 = r30
	r31 = Mem0[v34 + 4<i32>:word32]
	r30 = Mem0[v34:word32]
	r29 = v34 + 8<i32>
	return
	// succ:  nn_os_workers_spawn_exit
nn_os_workers_spawn_exit:


// qurt_worker
// Return size: 0
define qurt_worker
qurt_worker_entry:
	r29 = fp
	goto l0000CC94
	// succ:  l0000CC94
l000096C0:
	r14 = badva + 0x14<32>
	r28 = Mem0[r14:word32]
	call r28 (retsize: 0;)
	return
	// succ:  qurt_worker_exit
l0000CC94:
	v4 = r29 - 8<i32>
	Mem0[v4:word32] = r30
	Mem0[v4 + 4<i32>:word32] = r31
	r30 = v4
	r29 = v4 - 16<i32>
	Mem0[r29 + 496<i32>:word64] = r17_r16
	r0 = r0 + 8<i32>
	r17 = Mem0[r0:word32]
	r16 = Mem0[r0 + 4<i32>:word32]
	Mem0[r29:word64] = r19_r18
	call qurt_sem_add.1.1_i32_1 (retsize: 0;)
	r0 = r16
	call fn000096B0 (retsize: 0;)
	r19_r18 = r1_r0
	branch p0 l0000CCDC
	// succ:  l0000CCBC l0000CCDC
l0000CCBC:
	p0 = r10 == 0<32>
	r3_r2 = r19_r18 >>u 0x20<32>
	call r18 (retsize: 0;)
	r1_r0 = r2_r17
	// succ:  l0000CCC0
l0000CCC0:
	r0 = r16
	call fn000096B0 (retsize: 0;)
	r19_r18 = r1_r0
	branch p0 l0000CCC0
	// succ:  l0000CCD8 l0000CCC0
l0000CCD8:
	p0 = r26 == 1<32>
	r3_r2 = r19_r18 >>u 0x20<32>
	r19_r18 = Mem0[r29:word64]
	r17_r16 = Mem0[r29 + 8<i32>:word64]
	r0 = 0<32>
	goto l0000CCE0
	// succ:  l0000CCE0
l0000CCDC:
	r19_r18 = Mem0[r29:word64]
	r17_r16 = Mem0[r29 + 8<i32>:word64]
	// succ:  l0000CCE0
l0000CCE0:
	v21 = r30
	r31 = Mem0[v21 + 4<i32>:word32]
	r30 = Mem0[v21:word32]
	r29 = v21 + 8<i32>
	goto l000096C0
	// succ:  l000096C0
qurt_worker_exit:


// nn_os_hvx_power_on
// Return size: 0
define nn_os_hvx_power_on
nn_os_hvx_power_on_entry:
	r29 = fp
	// succ:  l0000CCE8
l0000CCE8:
	v4 = r29 - 8<i32>
	Mem0[v4:word32] = r30
	Mem0[v4 + 4<i32>:word32] = r31
	r30 = v4
	r29 = v4 - 8<i32>
	Mem0[r29 + 496<i32>:word64] = r17_r16
	r16 = r0
	call fn000096D0 (retsize: 0;)
	r2 = r16 + 0<32>
	branch p0 l0000CD00
	// succ:  l0000CCFC l0000CD00
l0000CCFC:
	p0 = r0 == 0<32>
	call errlog_function (retsize: 0;)
	// succ:  l0000CD00
l0000CD00:
	v12 = r30
	r31 = Mem0[v12 + 4<i32>:word32]
	r30 = Mem0[v12:word32]
	r29 = v12 + 8<i32>
	return
	// succ:  nn_os_hvx_power_on_exit
nn_os_hvx_power_on_exit:


// errlog_function
// Return size: 0
define errlog_function
errlog_function_entry:
	r29 = fp
	// succ:  l0000CD04
l0000CD04:
	v4 = r29 - 8<i32>
	Mem0[v4:word32] = r30
	Mem0[v4 + 4<i32>:word32] = r31
	r30 = v4
	r29 = v4 - 8<i32>
	r3 = 0<32>
	r0 = badva + 0x20<32>
	r5 = r29 + 0x10<32>
	r1 = 0xC2<32>
	r4 = badva + 0x28<32>
	Mem0[r29 + 1<i32>:byte] = r6
	r6 = r29 + 0x10<32>
	call logv (retsize: 0;)
	// succ:  l0000CD20_thunk_nn_os_hvx_power_off
l0000CD20_thunk_nn_os_hvx_power_off:
	call nn_os_hvx_power_off (retsize: 0;)
	return
	// succ:  errlog_function_exit
errlog_function_exit:


// nn_os_hvx_power_off
// Return size: 0
define nn_os_hvx_power_off
nn_os_hvx_power_off_entry:
	r29 = fp
	goto l0000CD30
	// succ:  l0000CD30
l000096E0:
	r14 = badva + 0x3C<32>
	r28 = Mem0[r14:word32]
	call r28 (retsize: 0;)
	return
	// succ:  nn_os_hvx_power_off_exit
l0000CD30:
	goto l000096E0
	// succ:  l000096E0
nn_os_hvx_power_off_exit:


// nn_os_get_perfcount
// Return size: 0
define nn_os_get_perfcount
nn_os_get_perfcount_entry:
	r29 = fp
	goto l0000CD34
	// succ:  l0000CD34
l00009700:
	r14 = badva + 0x24<32>
	r28 = Mem0[r14:word32]
	call r28 (retsize: 0;)
	return
	// succ:  nn_os_get_perfcount_exit
l0000CD34:
	v4 = r29 - 8<i32>
	Mem0[v4:word32] = r30
	Mem0[v4 + 4<i32>:word32] = r31
	r30 = v4
	r29 = v4 - 8<i32>
	Mem0[r29:word64] = r17_r16
	r2 = Mem0[r0 + 20<i32>:word32]
	branch p0 l0000CD54
	// succ:  l0000CD44 l0000CD54
l0000CD44:
	p0 = r2 == 0xA<32>
	r0 = 0<32>
	branch p0 l0000CD60
	// succ:  l0000CD4C l0000CD60
l0000CD4C:
	p0 = r2 == 0<32>
	v11 = r30
	r31 = Mem0[v11 + 4<i32>:word32]
	r30 = Mem0[v11:word32]
	r29 = v11 + 8<i32>
	r17_r16 = Mem0[r29:word64]
	// succ:  l0000CD4C_thunk_fn00009530
l0000CD4C_thunk_fn00009530:
	call fn00009530 (retsize: 0;)
	return
	// succ:  nn_os_get_perfcount_exit
l0000CD54:
	call fn000096F0 (retsize: 0;)
	v12 = r30
	r31 = Mem0[v12 + 4<i32>:word32]
	r30 = Mem0[v12:word32]
	r29 = v12 + 8<i32>
	r17_r16 = Mem0[r29:word64]
	goto l00009700
	// succ:  l00009700
l0000CD60:
	call fn00009710 (retsize: 0;)
	r16 = r0
	r0 = 1<32>
	call fn00009710 (retsize: 0;)
	r17 = r0
	v18 = r30
	r31 = Mem0[v18 + 4<i32>:word32]
	r30 = Mem0[v18:word32]
	r29 = v18 + 8<i32>
	return
	// succ:  nn_os_get_perfcount_exit
nn_os_get_perfcount_exit:


// nn_os_vector_workers_acquire
// Return size: 0
define nn_os_vector_workers_acquire
nn_os_vector_workers_acquire_entry:
	r29 = fp
	// succ:  l0000CD80
l0000CD80:
	v4 = r29 - 8<i32>
	Mem0[v4:word32] = r30
	Mem0[v4 + 4<i32>:word32] = r31
	r30 = v4
	r29 = v4 - 16<i32>
	Mem0[r29 + 488<i32>:word64] = r19_r18
	r18 = badva + 0x10<32>
	Mem0[r29 + 8<i32>:word64] = r17_r16
	r16 = r0
	r17 = Mem0[r18 - 176<i32>:word32]
	r0 = r17
	call qurt_sem_init_val.1.1_i16_0 (retsize: 0;)
	r18 = Mem0[r18 - 160<i32>:word32]
	r0 = r18
	call qurt_pipe_send.1.1_i64_0 (retsize: 0;)
	r19 = badva + 0x38<32>
	r0 = Mem0[r16 + 68<i32>:word32]
	r3 = r19 + 4<32>
	r2 = badva + 0x30<32>
	call fn00009650 (retsize: 0;)
	r0 = r17
	call fn000096A0 (retsize: 0;)
	r0 = r18
	call qurt_sem_add.1.1_i32_1 (retsize: 0;)
	call dspCV_hvx_lock.1.0_i8_2.1_i32_0 (retsize: 0;)
	Mem0[r19:word32] = 0<32>
	r17_r16 = Mem0[r29 + 8<i32>:word64]
	v17 = r30
	r31 = Mem0[v17 + 4<i32>:word32]
	r30 = Mem0[v17:word32]
	r29 = v17 + 8<i32>
	return
	// succ:  nn_os_vector_workers_acquire_exit
nn_os_vector_workers_acquire_exit:


// worker_acquire
// Return size: 0
define worker_acquire
worker_acquire_entry:
	r29 = fp
	// succ:  l0000CDE8
l0000CDE8:
	v4 = r29 - 8<i32>
	Mem0[v4:word32] = r30
	Mem0[v4 + 4<i32>:word32] = r31
	r30 = v4
	r29 = v4 - 8<i32>
	Mem0[r29 + 496<i32>:word64] = r17_r16
	r16 = r1
	call dspCV_hvx_lock.1.0_i8_2.1_i32_0 (retsize: 0;)
	Mem0[r16:word32] = 0<32>
	r17 = badva + 0x1C<32>
	r0 = Mem0[r17 - 176<i32>:word32]
	call qurt_sem_add.1.1_i32_1 (retsize: 0;)
	r17_r16 = Mem0[r29:word64]
	r0 = Mem0[r17 - 160<i32>:word32]
	v13 = r30
	r31 = Mem0[v13 + 4<i32>:word32]
	r30 = Mem0[v13:word32]
	r29 = v13 + 8<i32>
	// succ:  l0000CE18_thunk_fn000096A0
l0000CE18_thunk_fn000096A0:
	call fn000096A0 (retsize: 0;)
	return
	// succ:  worker_acquire_exit
worker_acquire_exit:


// nn_os_vector_workers_release
// Return size: 0
define nn_os_vector_workers_release
nn_os_vector_workers_release_entry:
	r29 = fp
	// succ:  l0000CE20
l0000CE20:
	v4 = r29 - 8<i32>
	Mem0[v4:word32] = r30
	Mem0[v4 + 4<i32>:word32] = r31
	r30 = v4
	r29 = v4 - 16<i32>
	Mem0[r29 + 488<i32>:word64] = r19_r18
	r18 = badva + 0x30<32>
	Mem0[r29 + 8<i32>:word64] = r17_r16
	r16 = r0
	r17 = Mem0[r18 - 176<i32>:word32]
	r0 = r17
	call qurt_sem_init_val.1.1_i16_0 (retsize: 0;)
	r18 = Mem0[r18 - 160<i32>:word32]
	r0 = r18
	call qurt_sem_init_val.1.1_i16_0 (retsize: 0;)
	r0 = Mem0[r16 + 68<i32>:word32]
	r4 = badva + 0x10<32>
	r3 = r4 + 4<32>
	call fn00009658 (retsize: 0;)
	r2 = badva + 0x2C<32>
	r0 = r17
	call fn000096A0 (retsize: 0;)
	r19_r18 = Mem0[r29:word64]
	r17_r16 = Mem0[r29 + 8<i32>:word64]
	r0 = r18
	call qurt_sem_add.1.1_i32_1 (retsize: 0;)
	v17 = r30
	r31 = Mem0[v17 + 4<i32>:word32]
	r30 = Mem0[v17:word32]
	r29 = v17 + 8<i32>
	// succ:  l0000CE80_thunk_fn00009660
l0000CE80_thunk_fn00009660:
	call fn00009660 (retsize: 0;)
	return
	// succ:  nn_os_vector_workers_release_exit
nn_os_vector_workers_release_exit:


// worker_release
// Return size: 0
define worker_release
worker_release_entry:
	r29 = fp
	// succ:  l0000CE88
l0000CE88:
	v4 = r29 - 8<i32>
	Mem0[v4:word32] = r30
	Mem0[v4 + 4<i32>:word32] = r31
	r30 = v4
	r29 = v4 - 8<i32>
	Mem0[r29 + 496<i32>:word64] = r17_r16
	call fn00009660 (retsize: 0;)
	r16 = badva + 0<32>
	r0 = Mem0[r16 - 176<i32>:word32]
	call qurt_sem_add.1.1_i32_1 (retsize: 0;)
	r17_r16 = Mem0[r29:word64]
	r0 = Mem0[r16 - 160<i32>:word32]
	v11 = r30
	r31 = Mem0[v11 + 4<i32>:word32]
	r30 = Mem0[v11:word32]
	r29 = v11 + 8<i32>
	// succ:  l0000CEB0_thunk_fn000096A0
l0000CEB0_thunk_fn000096A0:
	call fn000096A0 (retsize: 0;)
	return
	// succ:  worker_release_exit
worker_release_exit:


// dspCV_hvx_lock.1.0_i8_2.1_i32_0
// Return size: 0
define dspCV_hvx_lock.1.0_i8_2.1_i32_0
dspCV_hvx_lock.1.0_i8_2.1_i32_0_entry:
	r29 = fp
	goto l0000CEB8
	// succ:  l0000CEB8
l00009720:
	r14 = badva + 0xC<32>
	r28 = Mem0[r14:word32]
	call r28 (retsize: 0;)
	return
	// succ:  dspCV_hvx_lock.1.0_i8_2.1_i32_0_exit
l0000CEB8:
	r1_r0 = 2<64>
	goto l00009720
	// succ:  l00009720
dspCV_hvx_lock.1.0_i8_2.1_i32_0_exit:


// qurt_sem_add.1.1_i32_1
// Return size: 0
define qurt_sem_add.1.1_i32_1
qurt_sem_add.1.1_i32_1_entry:
	r29 = fp
	// succ:  l0000CEC0
l0000CEC0:
	// succ:  l0000CEC0_thunk_fn0000CF80
l0000CEC0_thunk_fn0000CF80:
	call fn0000CF80 (retsize: 0;)
	return
	// succ:  qurt_sem_add.1.1_i32_1_exit
qurt_sem_add.1.1_i32_1_exit:


// qurt_sem_init_val.1.1_i16_0
// Return size: 0
define qurt_sem_init_val.1.1_i16_0
qurt_sem_init_val.1.1_i16_0_entry:
	r29 = fp
	// succ:  l0000CEC8
l0000CEC8:
	// succ:  l0000CEC8_thunk_fn0000CFA8
l0000CEC8_thunk_fn0000CFA8:
	call fn0000CFA8 (retsize: 0;)
	return
	// succ:  qurt_sem_init_val.1.1_i16_0_exit
qurt_sem_init_val.1.1_i16_0_exit:


// qurt_pipe_send.1.1_i64_0
// Return size: 0
define qurt_pipe_send.1.1_i64_0
qurt_pipe_send.1.1_i64_0_entry:
	r29 = fp
	goto l0000CED0
	// succ:  l0000CED0
l00009650_in_qurt_pipe_send.1.1_i64_0:
	r14 = badva + 0x28<32>
	r28 = Mem0[r14:word32]
	call r28 (retsize: 0;)
	return
	// succ:  qurt_pipe_send.1.1_i64_0_exit
l0000CED0:
	r3_r2 = 0<64>
	goto l00009650_in_qurt_pipe_send.1.1_i64_0
	// succ:  l00009650_in_qurt_pipe_send.1.1_i64_0
qurt_pipe_send.1.1_i64_0_exit:


// transpack
// Return size: 0
define transpack
transpack_entry:
	r29 = fp
	// succ:  l0000CEE0
l0000CEE0:
	branch p0 l0000CEE0_thunk_pad2d
	goto l0000CEE8
	// succ:  l0000CEE8 l0000CEE0_thunk_pad2d
l0000CEE0_thunk_pad2d:
	call pad2d (retsize: 0;)
	return
	// succ:  transpack_exit
l0000CEE8:
	p0 = r2 > 0<32>
	r4 = r1 << 3<32>
	r5 = 0<32>
	r3 = r3 + 3<32>
	r9 = r1 + 3<32>
	r8 = r5 + r2
	branch p0 l0000CF68
l0000CEF4:
	r9 = r1 + 3<32>
	// succ:  l0000CEF8 l0000CF68
l0000CEF8:
	p0 = r1 > 0<32>
	r9 = r9 >>u 2<32>
	__loop(1<i32>, 0x0000CF04<p32>, r9)
	r9 = r6
	r13 = r7 + 3<32>
	r12 = r7 + 2<32>
	r14 = r7 * r2
	r13_r12 = r0_r0
	r10 = r13 * r2
	r28 = r12 * r2
	r15_r14 = r0_r0
	r13 = r13 + (r14 + r5)
	r12 = r12 + (r8 + r14)
	r15 = r15 + (r10 + r5)
	r14 = r14 + (r28 + r5)
	__loop(0<i32>, 0x0000CF38<p32>, 0x10<32>)
	Mem0[r9 - 3<i32>:byte] = r28
	r13 = r13 + 1<i32>
	r28 = Mem0[r13:byte]
	Mem0[r9 - 2<i32>:byte] = r10
	r14 = r14 + 1<i32>
	r28 = Mem0[r14:byte]
	Mem0[r9 - 1<i32>:byte] = r28
	r15 = r15 + 1<i32>
	r10 = Mem0[r15:byte]
	Mem0[r9:byte] = r10
	r9 = r9 + 4<32>
	r6 = r6 + 0x80<32>
	r7 = r7 + 4<32>
	// succ:  l0000CF68
l0000CF68:
	branch r2 >u r5 l0000CEF4
	// succ:  l0000CF68_thunk_pad2d l0000CEF4
l0000CF68_thunk_pad2d:
	call pad2d (retsize: 0;)
	return
	// succ:  transpack_exit
transpack_exit:


// pad2d
// Return size: 0
define pad2d
pad2d_entry:
	r29 = fp
	// succ:  l0000CF78
l0000CF78:
	v4 = r29 - 8<i32>
	Mem0[v4:word32] = r30
	Mem0[v4 + 4<i32>:word32] = r31
	r30 = v4
	r29 = v4 - 48<i32>
	Mem0[r29 + 488<i32>:word64] = r19_r18
	Mem0[r29 + 40<i32>:word64] = r17_r16
	r19 = r4
	r17_r16 = r5_r3
	// succ:  l0000CF7C_thunk_fn0000CF80
l0000CF7C_thunk_fn0000CF80:
	call fn0000CF80 (retsize: 0;)
	return
	// succ:  pad2d_exit
pad2d_exit:


// fn0000CF80
// Return size: 0
define fn0000CF80
fn0000CF80_entry:
	r29 = fp
	// succ:  l0000CF80
l0000CF80:
	Mem0[r29 + 40<i32>:word64] = r17_r16
	r19 = r4
	Mem0[r29 + 8<i32>:word64] = r25_r24
	Mem0[r29 + 24<i32>:word64] = r21_r20
	Mem0[r29 + 16<i32>:word64] = r23_r22
	r22 = r2
	r21_r20 = r0_r1
	Mem0[r29:word64] = r27_r26
	r18 = Mem0[r29 + 56<i32>:word32]
	r23 = r16 + 0<32>
	p0 = r20 > 0<32>
	r24 = r17 - r22
	r25 = r20 + 0<32>
	branch p0 l0000CFA4_thunk_fn0000CFE0
	goto l0000CFA4_thunk_fn0000CFB0
	// succ:  l0000CFA4_thunk_fn0000CFB0 l0000CFA4_thunk_fn0000CFE0
l0000CF80:
	Mem0[r29 + 8<i32>:word64] = r25_r24
	Mem0[r29 + 24<i32>:word64] = r21_r20
	Mem0[r29 + 16<i32>:word64] = r23_r22
	r22 = r2
	r21_r20 = r0_r1
	Mem0[r29:word64] = r27_r26
	r18 = Mem0[r29 + 56<i32>:word32]
	r23 = r16 + 0<32>
	p0 = r20 > 0<32>
	r24 = r17 - r22
	r25 = r20 + 0<32>
	branch p0 l0000CFE0
l0000CFA4_thunk_fn0000CFB0:
	call fn0000CFB0 (retsize: 0;)
	return
	// succ:  fn0000CF80_exit
l0000CFA4_thunk_fn0000CFE0:
	call fn0000CFE0 (retsize: 0;)
	return
	// succ:  fn0000CF80_exit
fn0000CF80_exit:


// fn0000CFA8
// Return size: 0
define fn0000CFA8
fn0000CFA8_entry:
	r29 = fp
	// succ:  l0000CFA8
l0000CFA8:
	r24 = r17 - r22
	r25 = r20 + 0<32>
	goto l0000CFA8_thunk_fn0000CFB0
	// succ:  l0000CFA8_thunk_fn0000CFB0
l0000CFA8:
	call fn0000CFB0 (retsize: 0;)
	return
	// succ:  l0000CFA8_thunk_fn0000CFB0 l0000CFA8_thunk_fn0000CFB0 fn0000CFA8_exit
l0000CFA8_thunk_fn0000CFB0:
	call fn0000CFB0 (retsize: 0;)
	return
	// succ:  fn0000CFA8_exit
l0000CFA8_thunk_fn0000CFB0:
	call fn0000CFB0 (retsize: 0;)
	return
	// succ:  fn0000CFA8_exit
l0000CFA8_thunk_fn0000CFB0:
	call fn0000CFB0 (retsize: 0;)
	return
	// succ:  fn0000CFA8_exit
fn0000CFA8_exit:


// fn0000CFB0
// Return size: 0
define fn0000CFB0
fn0000CFB0_entry:
	r29 = fp
	// succ:  l0000CFB0
l0000CFB0:
	r26 = r17 * r20
	r1_r0 = r21_r23
	r2 = r22
	call vmemcpy_asm (retsize: 0;)
	// succ:  l0000CFB8
l0000CFB8:
	r21 = r21 + r22
	r1 = r18
	r2 = r24
	r0 = r23 + r22
	r23 = r23 + r17
	call vmemset_asm (retsize: 0;)
	branch r25 == 1<32> l0000CFB8
	// succ:  l0000CFCC_thunk_fn0000CFE0 l0000CFB8
l0000CFCC_thunk_fn0000CFE0:
	call fn0000CFE0 (retsize: 0;)
	return
	// succ:  fn0000CFB0_exit
fn0000CFB0_exit:


// fn0000CFE0
// Return size: 0
define fn0000CFE0
fn0000CFE0_entry:
	r29 = fp
	// succ:  l0000CFE0
l0000CFE0:
	r25 = r25 + 0xFFFFFFFF<32>
	branch r19 > 0<32> l0000D000
	// succ:  l0000CFEC l0000D000
l0000CFEC:
	r19 = r19 - r20
	r16 = r16 + r17
	r2 = r17
	r1_r0 = r18_r16
	branch r19 == 1<32> l0000CFEC
	// succ:  l0000D000 l0000CFEC
l0000D000:
	r19 = r19 + 0xFFFFFFFF<32>
	r23_r22 = Mem0[r29 + 16<i32>:word64]
	r21_r20 = Mem0[r29 + 24<i32>:word64]
	r27_r26 = Mem0[r29:word64]
	r25_r24 = Mem0[r29 + 8<i32>:word64]
	v17 = r30
	r31 = Mem0[v17 + 4<i32>:word32]
	r30 = Mem0[v17:word32]
	r29 = v17 + 8<i32>
	return
	// succ:  fn0000CFE0_exit
fn0000CFE0_exit:


// unpad2d
// Return size: 0
define unpad2d
unpad2d_entry:
	r29 = fp
	// succ:  l0000D010
l0000D010:
	v4 = r29 - 8<i32>
	Mem0[v4:word32] = r30
	Mem0[v4 + 4<i32>:word32] = r31
	r30 = v4
	r29 = v4 - 24<i32>
	Mem0[r29 + 496<i32>:word64] = r17_r16
	Mem0[r29:word64] = r21_r20
	Mem0[r29 + 8<i32>:word64] = r19_r18
	r19_r18 = r5_r3
	r17_r16 = r2_r0
	branch r20 > 0<32> l0000D050
	goto l0000D030
	// succ:  l0000D030 l0000D020_thunk_unpad2d_bytes
l0000D020_thunk_unpad2d_bytes:
	call unpad2d_bytes (retsize: 0;)
	return
	// succ:  unpad2d_exit
l0000D030:
	r20 = r4
	r21 = r19 << 2<32>
	r1_r0 = r16_r18
	r2 = r21
	call fn00022964 (retsize: 0;)
	// succ:  l0000D034
l0000D034:
	branch r20 == 1<32> l0000D034
	// succ:  l0000D04C l0000D034
l0000D04C:
	r20 = r20 + 0xFFFFFFFF<32>
	r18 = r18 + (r19 << 2<32>)
	v24 = r30
	r31 = Mem0[v24 + 4<i32>:word32]
	r30 = Mem0[v24:word32]
	r29 = v24 + 8<i32>
	return
	// succ:  unpad2d_exit
unpad2d_exit:


// unpad2d_bytes
// Return size: 0
define unpad2d_bytes
unpad2d_bytes_entry:
	r29 = fp
	// succ:  l0000D050
l0000D050:
	v4 = r29 - 8<i32>
	Mem0[v4:word32] = r30
	Mem0[v4 + 4<i32>:word32] = r31
	r30 = v4
	r29 = v4 - 24<i32>
	Mem0[r29 + 496<i32>:word64] = r17_r16
	// succ:  l0000D050_thunk_fn0000D054
l0000D050_thunk_fn0000D054:
	call fn0000D054 (retsize: 0;)
	return
	// succ:  unpad2d_bytes_exit
unpad2d_bytes_exit:


// fn0000D054
// Return size: 0
define fn0000D054
fn0000D054_entry:
	r29 = fp
	// succ:  l0000D054
l0000D054:
	Mem0[r29:word64] = r21_r20
	Mem0[r29 + 8<i32>:word64] = r19_r18
	r19_r18 = r5_r3
	r17_r16 = r2_r0
	branch r20 > 0<32> l0000D084
	// succ:  l0000D06C l0000D084
l0000D06C:
	r20 = r4
	r16 = r16 + r17
	r2 = r19
	r1_r0 = r16_r18
	// succ:  l0000D070
l0000D070:
	branch r20 == 1<32> l0000D070
	// succ:  l0000D084 l0000D070
l0000D084:
	r20 = r20 + 0xFFFFFFFF<32>
	r18 = r18 + r19
	v21 = r30
	r31 = Mem0[v21 + 4<i32>:word32]
	r30 = Mem0[v21:word32]
	r29 = v21 + 8<i32>
	return
	// succ:  fn0000D054_exit
fn0000D054_exit:


// gemm_cn
// Return size: 0
define gemm_cn
gemm_cn_entry:
	r29 = fp
	// succ:  l0000D0A0
l0000D0A0:
	v4 = r29 - 8<i32>
	Mem0[v4:word32] = r30
	Mem0[v4 + 4<i32>:word32] = r31
	r30 = v4
	r29 = v4 - 8<i32>
	Mem0[r29 + 496<i32>:word64] = r17_r16
	branch p0 l0000D12C
	// succ:  l0000D0A8 l0000D12C
l0000D0A8:
	p0 = r5 > 0<32>
	r7 = Mem0[r29 + 20<i32>:word64]
	r6 = Mem0[r29 + 16<i32>:word64]
	r8 = 0<32>
	r12 = r8
	branch p0 l0000D128
l0000D0B4:
	r12 = r8
	branch p0 l0000D128
	// succ:  l0000D0BC l0000D128
l0000D0BC:
	p0 = r6 > 0<32>
	r13 = r8 * r6
	r9 = r2
	__loop(1<i32>, 0x0000D0CC<p32>, r6)
	r12 = r0 + r12 * r7
	r13 = r4 + (r13 << 2<32>)
	r14 = 0<32>
	r11 = r7 + 0xFFFFFFFF<32>
	branch p0 l0000D118
	// succ:  l0000D0D8 l0000D118
l0000D0D8:
	p0 = r7 > 0<32>
	r10 = Mem0[r9:byte]
	p0 = r7 >u 1<32>
	r28 = r9 + r6
	r15 = r15 + 1<i32>
	r16 = Mem0[r15:byte]
	r10 = r10 + r3
	__loop(0<i32>, 0x0000D0FC<p32>, r11)
	r11 = r16 + r1
	branch p0 l0000D114
	// succ:  l0000D0FC l0000D114
l0000D0FC:
	r15 = r15 + 1<i32>
	r17 = Mem0[r15:byte]
	r16 = Mem0[r28:byte]
	r28 = r28 + r6
	r14 = r14 + r10 * r11
	r11 = r17 + r1
	r10 = r16 + r3
	// succ:  l0000D114
l0000D114:
	r14 = r14 + r10 * r11
	// succ:  l0000D118
l0000D118:
	Mem0[r13:word32] = r14
	r13 = r13 + 4<i32>
	r9 = r9 + 1<32>
	branch r8 == r5 l0000D0B4
	// succ:  l0000D124_thunk_gemm_co l0000D0B4
l0000D124_thunk_gemm_co:
	call gemm_co (retsize: 0;)
	return
	// succ:  gemm_cn_exit
l0000D128:
	branch r8 == r5 l0000D0B4
	// succ:  l0000D128_thunk_gemm_co l0000D0B4
l0000D128_thunk_gemm_co:
	call gemm_co (retsize: 0;)
	return
	// succ:  gemm_cn_exit
l0000D12C:
	v28 = r30
	r31 = Mem0[v28 + 4<i32>:word32]
	r30 = Mem0[v28:word32]
	r29 = v28 + 8<i32>
	return
	// succ:  gemm_cn_exit
gemm_cn_exit:


// gemm_co
// Return size: 0
define gemm_co
gemm_co_entry:
	r29 = fp
	// succ:  l0000D130
l0000D130:
	v4 = r29 - 8<i32>
	Mem0[v4:word32] = r30
	Mem0[v4 + 4<i32>:word32] = r31
	r30 = v4
	r29 = v4 - 24<i32>
	Mem0[r29 + 16<i32>:word64] = r17_r16
	r6 = Mem0[r29 + 32<i32>:word64]
	Mem0[r29:word64] = r21_r20
	Mem0[r29 + 8<i32>:word64] = r19_r18
	r12 = 0<32>
	p0 = r6 > 0<32>
	r7 = Mem0[r29 + 36<i32>:word32]
	r9 = Mem0[r29 + 40<i32>:word32]
	branch p0 l0000D2D8
	// succ:  l0000D150 l0000D2D8
l0000D150:
	r8 = Mem0[r29 + 44<i32>:word32]
	p0 = r5 > 0<32>
	r13 = r3 * r1
	r13 = r13 * r7
	p1 = !(r12 == 0<32>)
	// succ:  l0000D168
l0000D168:
	r14 = 0<32>
	branch p1 l0000D1B4
	// succ:  l0000D174 l0000D1B4
l0000D174:
	p1 = p1 | !p0
	__loop(1<i32>, 0x0000D178<p32>, r5)
	Mem0[r30 + r14 * 4<32>:word32] = r13
	r10 = r14 + 0<32>
	branch p1 l0000D1A0
	// succ:  l0000D184 l0000D1A0
l0000D184:
	p1 = r7 > 0<32>
	r28 = r13
	r15 = r9 + (r14 << 2<32>)
	__loop(0<i32>, 0x0000D194<p32>, r7)
	r10 = r0 + r10 * r7
	r10 = r10 + 1<i32>
	r11 = Mem0[r10:byte]
	r28 = r28 + r11 * r3
	goto l0000D1A4
	// succ:  l0000D1A4
l0000D1A0:
	r14 = r14 + 1<32>
	goto l0000D1AC
	// succ:  l0000D1AC
l0000D1A4:
	// succ:  l0000D1AC
l0000D1AC:
	// succ:  l0000D1B0
l0000D1B0:
	r10 = r14 + 0<32>
	p1 = r7 > 0<32>
	r28 = 0<32>
	r11 = r15 + r12
	goto l0000D1C0
	// succ:  l0000D1C0
l0000D1B4:
	r10 = r14 + 0<32>
	p1 = r7 > 0<32>
	r28 = 0<32>
	// succ:  l0000D1C0
l0000D1C0:
	Mem0[r14 + r11 * 4<32>:word32] = r28
	branch p1 l0000D1E0
	// succ:  l0000D1C8 l0000D1E0
l0000D1C8:
	r11 = r8 + (r11 << 2<32>)
	__loop(0<i32>, 0x0000D1D0<p32>, r7)
	r16 = Mem0[r10:byte]
	r10 = r10 + r6
	r28 = r28 + r16 * r1
	goto l0000D1E4
	// succ:  l0000D1E4
l0000D1E0:
	r14 = r14 + 1<32>
	r15 = r15 + 1<32>
	goto l0000D1E8
	// succ:  l0000D1E8
l0000D1E4:
	r14 = r14 + 1<32>
	// succ:  l0000D1E8
l0000D1E8:
	r14 = 0<32>
	p2 = r15 == 0x20<32>
	branch p0 l0000D2D0
	// succ:  l0000D1F8 l0000D2D0 l0000D1B0
l0000D1F8:
	branch p2 l0000D1B0
l0000D2D0:
	branch r6 >u r12 l0000D168
	goto l0000D2DC
	// succ:  l0000D2DC l0000D168
l0000D2D8:
	r19_r18 = Mem0[r29 + 8<i32>:word64]
	r17_r16 = Mem0[r29 + 16<i32>:word64]
	v27 = r30
	r31 = Mem0[v27 + 4<i32>:word32]
	r30 = Mem0[v27:word32]
	r29 = v27 + 8<i32>
	return
	// succ:  gemm_co_exit
l0000D2DC:
	r12 = r12 + 0x20<32>
	v30 = r30
	r31 = Mem0[v30 + 4<i32>:word32]
	r30 = Mem0[v30:word32]
	r29 = v30 + 8<i32>
	return
	// succ:  gemm_co_exit
gemm_co_exit:


// gemsuma_cn
// Return size: 0
define gemsuma_cn
gemsuma_cn_entry:
	r29 = fp
	// succ:  l0000D2E0
l0000D2E0:
	r6 = 0<32>
	r12 = r2 + 0xFFFFFFFF<32>
	branch p0 l0000D334
	// succ:  l0000D2EC l0000D334
l0000D2EC:
	p0 = r1 > 0<32>
	__loop(1<i32>, 0x0000D2F0<p32>, r1)
	r7 = 0<32>
	r8 = r6
	branch p0 l0000D320
	// succ:  l0000D2FC l0000D320
l0000D2FC:
	p0 = r2 > 0<32>
	p0 = r2 >u 1<32>
	r7 = 0<32>
	__loop(0<i32>, 0x0000D314<p32>, r12)
	r8 = r0 + r8 * r2
	r8 = r8 + 1<i32>
	r9 = Mem0[r8:byte]
	branch p0 l0000D31C
	// succ:  l0000D314 l0000D31C
l0000D314:
	r8 = r8 + 1<i32>
	r9 = Mem0[r8:byte]
	r7 = r9 + r7
	// succ:  l0000D31C
l0000D31C:
	r7 = r9 + r7
	// succ:  l0000D320
l0000D320:
	r6 = r6 + 1<32>
	r8 = r5
	r8 = r8 + r7 * r4
l0000D334:
	return
	// succ:  gemsuma_cn_exit
gemsuma_cn_exit:


// gemsumb_cn
// Return size: 0
define gemsumb_cn
gemsumb_cn_entry:
	r29 = fp
	// succ:  l0000D340
l0000D340:
	r6 = r0
	r2 = 0<32>
	p0 = r3 > 0<32>
	r5 = 0<32>
	__loop(1<i32>, 0x0000D350<p32>, 0x10<32>)
	Mem0[r30 + r5 * 4<32>:word32] = r2
	r12 = r3 + 3<32>
	branch p0 l0000D3B8
	// succ:  l0000D35C l0000D3B8
l0000D35C:
	r7 = r1 + (r5 << 2<32>)
	r12 = r12 >>u 2<32>
	__loop(0<i32>, 0x0000D36C<p32>, r12)
	r12 = Mem0[r8 - 1<i32>:byte]
	r9 = r9 + r12 * r4
	r0 = Mem0[r8:byte]
	r12 = r0 * r4
	r13 = r13 + r0 * r4
	r14 = r14 * r4
	r15 = r14
	r15 = r15 + (r12 + r9)
	r9 = Mem0[r8 + 2<i32>:byte]
	r9 = r9 * r4
	r9 = r9 + (r13 + r14)
	Mem0[r7:word32] = r9
	// succ:  l0000D3B8
l0000D3B8:
	r5 = r5
	r6 = r6 + 4<32>
	return
	// succ:  gemsumb_cn_exit
gemsumb_cn_exit:


// gemmpybbw_cn
// Return size: 0
define gemmpybbw_cn
gemmpybbw_cn_entry:
	r29 = fp
	// succ:  l0000D3C8
l0000D3C8:
	return
	// succ:  gemmpybbw_cn_exit
gemmpybbw_cn_exit:


// gemaddvvm_cn
// Return size: 0
define gemaddvvm_cn
gemaddvvm_cn_entry:
	r29 = fp
	// succ:  l0000D474
l0000D474:
	r5 = 0<32>
	branch p0 l0000D474_thunk_gemm_asm
	goto l0000D480
	// succ:  l0000D480 l0000D474_thunk_gemm_asm
l0000D474_thunk_gemm_asm:
	call gemm_asm (retsize: 0;)
	return
	// succ:  gemaddvvm_cn_exit
l0000D480:
	p0 = r3 > 0<32>
	__loop(1<i32>, 0x0000D480<p32>, r3)
	r7 = r1
	r6 = r0 + (r5 << 2<32>)
	r3 = r5 * r4
	r8 = Mem0[r6:word32]
	r7 = r7 + 4<i32>
	r12 = Mem0[r7:word32]
	r3 = r2 + (r3 << 2<32>)
	__loop(0<i32>, 0x0000D4A0<p32>, 0xF<32>)
	r9 = Mem0[r3:word32]
	r13 = Mem0[r3 + 4<i32>:word32]
	r9 = r9 + (r12 + r8)
	r7 = r7 + 4<i32>
	r12 = Mem0[r7:word32]
	r8 = Mem0[r6:word32]
	r5 = r5 + 1<32>
	r13 = r13 + (r12 + r8)
	// succ:  l0000D4BC_thunk_gemm_asm
l0000D4BC_thunk_gemm_asm:
	call gemm_asm (retsize: 0;)
	return
	// succ:  gemaddvvm_cn_exit
gemaddvvm_cn_exit:


// gemm_asm
// Return size: 0
define gemm_asm
gemm_asm_entry:
	r29 = fp
	// succ:  l0000D4CC
l0000D4CC:
	v4 = r29 - 8<i32>
	Mem0[v4:word32] = r30
	Mem0[v4 + 4<i32>:word32] = r31
	r30 = v4
	r29 = v4 - 88<i32>
	Mem0[r29 + 496<i32>:word64] = r17_r16
	r16 = Mem0[r29 + 96<i32>:word64]
	r17 = r0
	Mem0[r29 + 64<i32>:word64] = r21_r20
	Mem0[r29 + 72<i32>:word64] = r19_r18
	p0 = r16 > 0<32>
	r19 = r2
	Mem0[r29 + 36<i32>:word32] = r1
	Mem0[r29 + 56<i32>:word64] = r23_r22
	Mem0[r29 + 40<i32>:word64] = r27_r26
	Mem0[r29 + 48<i32>:word64] = r25_r24
	Mem0[r29 + 32<i32>:word32] = r4
	Mem0[r29 + 12<i32>:word32] = r3
	r23 = Mem0[r29 + 104<i32>:word32]
	r25 = Mem0[r29 + 112<i32>:word32]
	branch p0 l0000D5A4
	// succ:  l0000D4FC l0000D5A4
l0000D4FC:
	r4 = Mem0[r29 + 12<i32>:word64]
	r3 = Mem0[r29 + 36<i32>:word64]
	r21 = 0<32>
	r18 = 0<32>
	r2 = Mem0[r29 + 100<i32>:word64]
	r22 = Mem0[r29 + 108<i32>:word64]
	r4 = Mem0[r29 + 120<i32>:word32]
	r26 = SEQ(SLICE(r25, word16, 0), SLICE(r2, word16, 0))
	r7 = r22 * r2
	r3 = r4 * r3
	Mem0[r29 + 28<i32>:word32] = r4
	r4 = Mem0[r29 + 124<i32>:word64]
	r2 = r3 * r2
	Mem0[r29 + 24<i32>:word32] = r4
	r24 = Mem0[r29 + 116<i32>:word32]
	r4 = r22 << 2<32>
	Mem0[r29 + 16<i32>:word32] = r4
	Mem0[r29 + 20<i32>:word32] = r7
	Mem0[r29 + 8<i32>:word32] = r2
	r3_r2 = r24_r26
	r1_r0 = r23_r17
	branch p0 l0000D54C
l0000D540:
	r3_r2 = r24_r26
	// succ:  l0000D544 l0000D54C
l0000D544:
	p0 = r13 == 0<32>
	r4 = Mem0[r29 + 12<i32>:word64]
	r5 = Mem0[r29 + 8<i32>:word64]
	call gemsuma_asm (retsize: 0;)
	// succ:  l0000D54C
l0000D54C:
	r3 = Mem0[r29 + 36<i32>:word64]
	r2 = Mem0[r29 + 28<i32>:word64]
	r2 = r25
	r20 = r2 + r18
	r1_r0 = r20_r19
	call gemsumb_asm (retsize: 0;)
	r2 = Mem0[r29 + 32<i32>:word32]
	r1_r0 = r19_r17
	r5_r4 = r26_r16
	r27 = r2 + r18
	r3_r2 = r23_r27
	call gemmpybbw_asm (retsize: 0;)
	r5 = Mem0[r29 + 24<i32>:word64]
	r4 = r16
	r1_r0 = r20_r24
	r3_r2 = r23_r27
	Mem0[r29:byte] = r6
	r6 = r21 == 0<32>
	call gemaddvvm_asm (retsize: 0;)
	r7 = Mem0[r29 + 20<i32>:word64]
	r18 = r18 + r2
	branch r16 >u r21 l0000D540
	goto l0000D5A8
	// succ:  l0000D5A8 l0000D540
l0000D5A4:
	r19_r18 = Mem0[r29 + 72<i32>:word64]
	r17_r16 = Mem0[r29 + 80<i32>:word64]
	r23_r22 = Mem0[r29 + 56<i32>:word64]
	r21_r20 = Mem0[r29 + 64<i32>:word64]
	r27_r26 = Mem0[r29 + 40<i32>:word64]
	r25_r24 = Mem0[r29 + 48<i32>:word64]
	v36 = r30
	r31 = Mem0[v36 + 4<i32>:word32]
	r30 = Mem0[v36:word32]
	r29 = v36 + 8<i32>
	return
	// succ:  gemm_asm_exit
l0000D5A8:
	r21 = r21 + r22
	r19 = r19 + r7
	r23_r22 = Mem0[r29 + 56<i32>:word64]
	r21_r20 = Mem0[r29 + 64<i32>:word64]
	r27_r26 = Mem0[r29 + 40<i32>:word64]
	r25_r24 = Mem0[r29 + 48<i32>:word64]
	v46 = r30
	r31 = Mem0[v46 + 4<i32>:word32]
	r30 = Mem0[v46:word32]
	r29 = v46 + 8<i32>
	return
	// succ:  gemm_asm_exit
gemm_asm_exit:


// im2col_co
// Return size: 0
define im2col_co
im2col_co_entry:
	r29 = fp
	// succ:  l0000D5B8
l0000D5B8:
	v4 = r29 - 8<i32>
	Mem0[v4:word32] = r30
	Mem0[v4 + 4<i32>:word32] = r31
	r30 = v4
	r29 = v4 - 192<i32>
	r8 = 0x20<32>
	Mem0[r29 + 144<i32>:word64] = r27_r26
	r7 = Mem0[r29 + 204<i32>:word32]
	r9 = Mem0[r29 + 216<i32>:word32]
	r12 = Mem0[r29 + 200<i32>:word32]
	Mem0[r29 + 176<i32>:word64] = r19_r18
	Mem0[r29 + 120<i32>:word32] = r5
	p0 = r9 > 0<32>
	r26 = r7 * r3
	Mem0[r29 + 184<i32>:word64] = r17_r16
	r16 = r4
	Mem0[r29 + 152<i32>:word64] = r25_r24
	r4 = Mem0[r29 + 212<i32>:word32]
	Mem0[r29 + 160<i32>:word64] = r23_r22
	Mem0[r29 + 168<i32>:word64] = r21_r20
	r5 = r6 & 0xFFFFFFF0<32>
	Mem0[r29 + 100<i32>:word32] = r26
	Mem0[r29 + 36<i32>:word32] = r9
	r9 = r2 + 0<32>
	r19 = max<int32>(r5, r8)
	Mem0[r29 + 8<i32>:word32] = r4
	Mem0[r29 + 56<i32>:word32] = r0
	Mem0[r29 + 32<i32>:word32] = r19
	r0 = Mem0[r29 + 36<i32>:word32]
	branch p0 l0000D954
	// succ:  l0000D614 l0000D954
l0000D614:
	r13 = Mem0[r29 + 220<i32>:word32]
	r24 = Mem0[r29 + 208<i32>:word32]
	r4 = r26 * r12
	r6 = r7 * r12
	Mem0[r29 + 112<i32>:word32] = r12
	r12 = Mem0[r29 + 8<i32>:word32]
	r14 = r19 - r4
	Mem0[r29 + 68<i32>:word32] = r3
	Mem0[r29 + 4<i32>:word32] = r4
	p1 = r14 > 0<32>
	p0 = r12 > 0<32>
	r6 = Mem0[r29 + 224<i32>:word32]
	r2 = r2 & 0xFFFFFFF0<32>
	p0 = !p0
	r4 = r3 * r9
	Mem0[r29 + 16<i32>:word32] = r13
	Mem0[r29 + 92<i32>:word32] = r6
	p0 = p0 | !p1
	r2 = max<int32>(r2, r8)
	Mem0[r29 + 28<i32>:word32] = r14
	r3 = r7 - r9
	r23 = r19 * r0
	r21 = r4 * r24
	Mem0[r29 + 52<i32>:word32] = r9
	Mem0[r29 + 12<i32>:word32] = r3
	r22 = r0 * r2
	Mem0[r29 + 48<i32>:word32] = r13
	r3 = r24 + 0xFFFFFFFF<32>
	Mem0[r29 + 80<i32>:word32] = r3
	Mem0[r29 + 20<i32>:word32] = r7
	r7 = r24 + r1
	r5 = r7 - r13
	Mem0[r29 + 96<i32>:word32] = r1
	r6 = 0<32>
	r4 = r5 - r9
	r1 = r1 + (r24 + 0xFFFFFFFF<32>)
	Mem0[r29 + 88<i32>:word32] = r7
	Mem0[r29 + 72<i32>:word32] = r1
	r1 = p0
	r3 = r12 * r24
	Mem0[r29 + 24<i32>:word32] = r1
	Mem0[r29 + 84<i32>:word32] = r3
	Mem0[r29 + 44<i32>:word32] = r4
	// succ:  l0000D6B0
l0000D6B0:
	Mem0[r29 + 40<i32>:word32] = r6
	r7 = Mem0[r29 + 112<i32>:word64]
	r8 = 0<32>
	r2 = r6 * r19
	Mem0[r29 + 116<i32>:word32] = r2
	p0 = r7 > 0<32>
	branch p0 l0000D904
	// succ:  l0000D6C8 l0000D904
l0000D6C8:
	r2 = Mem0[r29 + 40<i32>:word64]
	r3 = Mem0[r29 + 44<i32>:word64]
	r4 = Mem0[r29 + 48<i32>:word64]
	r5 = Mem0[r29 + 20<i32>:word64]
	r2 = r2 * r24
	r3 = max<int32>(r3, r8)
	r7 = Mem0[r29 + 68<i32>:word64]
	r1 = Mem0[r29 + 12<i32>:word64]
	r4 = max<int32>(r4, r8)
	r5 = Mem0[r29 + 16<i32>:word32]
	r3 = r5 - r3
	r4 = r7 * r4
	r2 = r2 - r5
	r3 = r7 * r3
	r1 = Mem0[r29 + 120<i32>:word32]
	r6 = 0<32> - r2
	r0 = r1 + r2
	r4 = r1 + r4
	r8 = 0<32>
	r6 = max<int32>(r6, r8)
	r5 = max<int32>(r0, r8)
	Mem0[r29 + 16<i32>:byte] = r2
	r27 = r6 * r7
	r2 = max<int32>(r2, r8)
	Mem0[r29 + 104<i32>:word32] = r27
	Mem0[r29 + 60<i32>:word32] = r4
	r2 = r1 + r3
	Mem0[r29 + 108<i32>:word32] = r0
	Mem0[r29 + 76<i32>:word32] = r2
	r2 = r5 + r6
	r2 = r2 * r7
	r20 = r26 - r2
	r2 = Mem0[r29 + 92<i32>:word32]
	r4 = r8 - r2
	r2 = r8 * r26
	// succ:  l0000D744
l0000D744:
	r3 = Mem0[r29 + 116<i32>:word32]
	r25 = r21 + 0<32>
	branch p0 l0000D764
	// succ:  l0000D754 l0000D764
l0000D754:
	p0 = __bit<word32,word32>(r4, 0<32>)
	Mem0[r29 + 128<i32>:word32] = r8
	r2 = r2 + r3
	Mem0[r29 + 136<i32>:word32] = r2
	goto l0000D7A0
	// succ:  l0000D7A0
l0000D764:
	r18 = Mem0[r29 + 120<i32>:word64]
	r3 = Mem0[r29 + 116<i32>:word64]
	r17 = r4
	r25 = r21
	Mem0[r29 + 128<i32>:word32] = r8
	r4 = r2 + r3
	r19 = r4
	r18 = r18 + (r2 + r3)
	Mem0[r29 + 136<i32>:word32] = r4
	r18 = r18 + r23
	r1_r0 = r16_r18
	r2 = r26
	call vmemset_asm (retsize: 0;)
	// succ:  l0000D788
l0000D788:
	branch __bit<word32,int32>(r17, -1<i32>) l0000D788
	// succ:  l0000D7A0 l0000D788
l0000D7A0:
	Mem0[r29 + 124<i32>:word32] = r4
	r7 = Mem0[r29 + 84<i32>:word64]
	r1 = r24
	r2 = 0<32>
	r2 = Mem0[r29 + 96<i32>:word32]
	r19 = r4 + r7
	r17 = max<int32>(r4, r2)
	r0 = r17 - r4
	r26 = min<int32>(r2, r19)
	call fn00009750 (retsize: 0;)
	Mem0[r29 + 132<i32>:word32] = r0
	p0 = r27 > 0<32>
	branch p0 l0000D804
	// succ:  l0000D7D0 l0000D804
l0000D7D0:
	r2 = Mem0[r29 - 124<i32>:word32]
	r3 = Mem0[r29 - 120<i32>:word32]
	p0 = r26 > r17
	branch p0 l0000D804
	// succ:  l0000D7E0 l0000D804
l0000D7E0:
	r18 = Mem0[r29 + 120<i32>:word64]
	r21 = r17
	r2 = r2 * r23
	r18 = r18 + (r3 + r2)
	r18 = r18 + r23
	r1_r0 = r16_r18
	r2 = r27
	call vmemset_asm (retsize: 0;)
	// succ:  l0000D7F0
l0000D7F0:
	branch r26 >u r21 l0000D7F0
	goto l0000D808
	// succ:  l0000D808 l0000D7F0
l0000D804:
	r27 = r25
	r1 = r24
	branch p0 l0000D870
	goto l0000D810
	// succ:  l0000D810 l0000D870
l0000D808:
	r21 = r21 + r24
	r27 = r25
	r1 = r24
	r2 = Mem0[r29 + 80<i32>:word32]
	r2 = r2 - r17
	r0 = r2 + r26
	call fn00009750 (retsize: 0;)
	branch r21 > 0<32> l0000D874
	goto l0000D82C
	// succ:  l0000D82C l0000D874
l0000D810:
	p0 = r12 > 0<32>
	r2 = Mem0[r29 + 80<i32>:word32]
	r2 = r2 - r17
	r0 = r2 + r26
	call fn00009750 (retsize: 0;)
	branch r21 > 0<32> l0000D874
	// succ:  l0000D82C l0000D874
l0000D82C:
	r21 = r0
	r18 = Mem0[r29 + 64<i32>:word32]
	r25 = Mem0[r29 + 60<i32>:word32]
	r3 = Mem0[r29 + 52<i32>:word32]
	r2 = r22 * r2
	r7 = Mem0[r29 + 68<i32>:word32]
	r6 = Mem0[r29 + 136<i32>:word32]
	r3 = Mem0[r29 + 56<i32>:word32]
	r25 = r25 + (r6 + r2)
	r18 = r18 + r17 * r3
	r18 = r3 + r18 * r7
	r25 = r25 + r22
	r1_r0 = r18_r25
	r2 = r20
	call vmemcpy_asm (retsize: 0;)
	// succ:  l0000D85C
l0000D85C:
	branch r21 == 1<32> l0000D85C
l0000D870:
	branch r21 > 0<32> l0000D8AC
	// succ:  l0000D874 l0000D85C l0000D87C l0000D8AC
l0000D874:
	r21 = r21 + 0xFFFFFFFF<32>
	r18 = r18 + r27
	branch r21 > 0<32> l0000D8AC
	// succ:  l0000D87C l0000D8AC
l0000D87C:
	r2 = Mem0[r29 - 124<i32>:word32]
	r18 = Mem0[r29 + 76<i32>:word32]
	p0 = r26 > r17
	r3 = Mem0[r29 + 136<i32>:word32]
	r2 = r22 * r2
	r18 = r18 + (r3 + r2)
	r18 = r18 + r22
	r2 = r21
	r1_r0 = r16_r18
	call vmemset_asm (retsize: 0;)
	// succ:  l0000D898
l0000D898:
	branch r26 >u r17 l0000D898
	// succ:  l0000D8AC l0000D898
l0000D8AC:
	r17 = r17 + r24
	r26 = Mem0[r29 + 100<i32>:word32]
	r2 = Mem0[r29 + 88<i32>:word32]
	r21 = r27
	branch p0 l0000D8F0
	// succ:  l0000D8BC l0000D8F0
l0000D8BC:
	p0 = r2 > -1<i32>
	r2 = Mem0[r29 + 124<i32>:word64]
	r17 = Mem0[r29 + 72<i32>:word64]
	r0 = r17 - r2
	call fn00009750 (retsize: 0;)
	r3 = Mem0[r29 + 136<i32>:word32]
	r18 = Mem0[r29 + 120<i32>:word32]
	r2 = r0 * r23
	r18 = r18 + (r3 + r2)
	r18 = r18 + r23
	r1_r0 = r16_r18
	r2 = r26
	call vmemset_asm (retsize: 0;)
	// succ:  l0000D8DC
l0000D8DC:
	branch r19 >u r17 l0000D8DC
	goto l0000D8F4
	// succ:  l0000D8F4 l0000D8DC
l0000D8F0:
	r2 = Mem0[r29 + 112<i32>:word32]
	r8 = Mem0[r29 + 128<i32>:word32]
	goto l0000D8F8
	// succ:  l0000D8F8
l0000D8F4:
	r17 = r17 + r24
	r2 = Mem0[r29 + 112<i32>:word32]
	// succ:  l0000D8F8
l0000D8F8:
	branch r8 == r2 l0000D744
	goto l0000D908
	// succ:  l0000D908 l0000D744
l0000D904:
	r19 = Mem0[r29 + 28<i32>:word64]
	r0 = Mem0[r29 + 24<i32>:word64]
	// succ:  l0000D908
l0000D908:
	r27 = Mem0[r29 + 104<i32>:word32]
	r8 = r8 + 1<32>
	branch p0 l0000D934
	// succ:  l0000D910 l0000D934
l0000D910:
	p0 = r0
	r2 = Mem0[r29 + 4<i32>:word64]
	r17 = Mem0[r29 + 120<i32>:word64]
	r18 = Mem0[r29 + 8<i32>:word64]
	r3 = Mem0[r29 + 116<i32>:word64]
	r17 = r17 + (r3 + r2)
	r17 = r17 + r23
	r2 = r19
	r1_r0 = r16_r17
	call vmemset_asm (retsize: 0;)
	// succ:  l0000D920
l0000D920:
	branch r18 == 1<32> l0000D920
	// succ:  l0000D934 l0000D920
l0000D934:
	r18 = r18 + 0xFFFFFFFF<32>
	r7 = Mem0[r29 + 48<i32>:word64]
	r2 = Mem0[r29 + 44<i32>:word64]
	r6 = r6 + 1<32>
	r19 = Mem0[r29 + 32<i32>:word32]
	p0 = r6 == r5
	r4 = r7 - r24
	r2 = r2 + r24
	Mem0[r29 + 48<i32>:word32] = r4
	Mem0[r29 + 44<i32>:word32] = r2
	branch p0 l0000D6B0
	// succ:  l0000D954 l0000D6B0
l0000D954:
	r4 = Mem0[r29 + 8<i32>:word64]
	r2 = Mem0[r29 + 36<i32>:word64]
	r2 = r2 * r4
	r3 = r3 & 0xFFFFFFF8<32>
	branch r18 > 0<32> l0000D98C
	// succ:  l0000D970 l0000D98C
l0000D970:
	r18 = r3 - r2
	r17 = r3 + r17 * r2
	r17 = r17 + r19
	r2 = r19
	r1_r0 = r16_r17
	call vmemset_asm (retsize: 0;)
	// succ:  l0000D978
l0000D978:
	branch r18 == 1<32> l0000D978
	// succ:  l0000D98C l0000D978
l0000D98C:
	r18 = r18 + 0xFFFFFFFF<32>
	r23_r22 = Mem0[r29 + 160<i32>:word64]
	r21_r20 = Mem0[r29 + 168<i32>:word64]
	r27_r26 = Mem0[r29 + 144<i32>:word64]
	r25_r24 = Mem0[r29 + 152<i32>:word64]
	v42 = r30
	r31 = Mem0[v42 + 4<i32>:word32]
	r30 = Mem0[v42:word32]
	r29 = v42 + 8<i32>
	return
	// succ:  im2col_co_exit
im2col_co_exit:


// im2col_cn
// Return size: 0
define im2col_cn
im2col_cn_entry:
	r29 = fp
	// succ:  l0000D99C
l0000D99C:
	v4 = r29 - 8<i32>
	Mem0[v4:word32] = r30
	Mem0[v4 + 4<i32>:word32] = r31
	r30 = v4
	r29 = v4 - 184<i32>
	Mem0[r29 + 168<i32>:word64] = r19_r18
	r7 = Mem0[r29 + 196<i32>:word32]
	r18 = r4
	r12 = Mem0[r29 + 208<i32>:word32]
	r9 = Mem0[r29 + 192<i32>:word32]
	Mem0[r29 + 176<i32>:word64] = r17_r16
	r6 = Mem0[r29 + 204<i32>:word32]
	r16 = r5
	r19 = r7 * r3
	Mem0[r29 + 152<i32>:word64] = r23_r22
	Mem0[r29 + 160<i32>:word64] = r21_r20
	p0 = r6 > 0<32>
	Mem0[r29 + 92<i32>:word32] = r9
	Mem0[r29 + 144<i32>:word64] = r25_r24
	r28 = r7 - r2
	Mem0[r29 + 16<i32>:word32] = r6
	Mem0[r29 + 136<i32>:word64] = r27_r26
	r17 = r8 & 0xFFFFFFF0<32>
	Mem0[r29 + 40<i32>:word32] = r0
	Mem0[r29 + 72<i32>:word32] = r16
	Mem0[r29 + 64<i32>:word32] = r12
	Mem0[r29 + 132<i32>:word32] = r1
	Mem0[r29 + 68<i32>:word32] = r17
	r13 = Mem0[r29 - 44<i32>:word32]
	branch p0 l0000DC30
	// succ:  l0000DA00 l0000DC30
l0000DA00:
	r15 = Mem0[r29 + 200<i32>:word32]
	r4 = Mem0[r29 + 216<i32>:word32]
	r14 = r19 * r9
	r1 = r7 * r9
	Mem0[r29 + 96<i32>:word32] = r15
	r5 = r7 - r13
	r6 = r4 * r2
	r20 = r3 * r2
	Mem0[r29 + 32<i32>:word32] = r3
	Mem0[r29 + 36<i32>:word32] = r7
	r3 = 0<32>
	Mem0[r29 + 28<i32>:word32] = r28
	Mem0[r29 + 24<i32>:word32] = r16
	r7 = 0<32> - r4
	Mem0[r29 + 52<i32>:word32] = r7
	Mem0[r29 + 20<i32>:word32] = r3
	r3 = 0<32> - r13
	r0 = r8 >>u 4<32>
	Mem0[r29 + 60<i32>:word32] = r14
	Mem0[r29 + 44<i32>:word32] = r13
	r7 = r17 - r14
	Mem0[r29 + 56<i32>:word32] = r7
	Mem0[r29 + 8<i32>:word32] = r3
	r3 = r15 * r2
	r1 = r12 * r0
	Mem0[r29 + 12<i32>:word32] = r3
	r7 = 0<32> - r6
	r2 = r5 - r2
	Mem0[r29 + 48<i32>:word32] = r7
	Mem0[r29 + 4<i32>:word32] = r2
	Mem0[r29 + 80<i32>:word64] = r1_r0
	// succ:  l0000DA74
l0000DA74:
	r7 = Mem0[r29 + 24<i32>:word32]
	p0 = r12 > 0<32>
	branch p0 l0000DC00
	// succ:  l0000DA80 l0000DC00
l0000DA80:
	Mem0[r29 + 29<i32>:byte] = r2
	r2 = Mem0[r29 + 44<i32>:word32]
	Mem0[r29 + 108<i32>:word32] = r2
	r2 = Mem0[r29 + 20<i32>:word64]
	r7 = Mem0[r29 + 8<i32>:word32]
	r2 = r2 * r12
	Mem0[r29 + 104<i32>:word32] = r7
	r7 = 0<32>
	Mem0[r29 + 100<i32>:word32] = r7
	Mem0[r29 + 76<i32>:word32] = r2
	// succ:  l0000DAA0
l0000DAA0:
	r8 = Mem0[r29 + 28<i32>:word32]
	r17 = Mem0[r29 + 52<i32>:word32]
	p0 = r9 > 0<32>
	branch p0 l0000DB9C
	// succ:  l0000DAB0 l0000DB9C
l0000DAB0:
	r3 = Mem0[r29 + 100<i32>:word64]
	r2 = Mem0[r29 + 96<i32>:word64]
	r7 = 0<32>
	r4 = Mem0[r29 + 44<i32>:word64]
	r6 = Mem0[r29 + 104<i32>:word64]
	r2 = r3 * r2
	r1 = Mem0[r29 + 116<i32>:word64]
	r5 = Mem0[r29 + 108<i32>:word64]
	r2 = r2 - r4
	r3 = max<int32>(r6, r7)
	r1 = Mem0[r29 + 32<i32>:word32]
	r2 = r8 + r2
	r6 = 0<32> - r2
	r0 = max<int32>(r1, r7)
	r6 = Mem0[r29 + 36<i32>:word32]
	r24 = r1
	r5 = max<int32>(r5, r7)
	r16 = max<int32>(r6, r7)
	r5 = Mem0[r29 + 40<i32>:word32]
	r2 = r6 - r5
	r7 = r1 * r0
	r22 = max<int32>(r2, r7)
	Mem0[r29 + 32<i32>:byte] = r2
	r23 = Mem0[r29 + 112<i32>:word32]
	r26 = r22 * r1
	r2 = r1 * r2
	Mem0[r29 + 124<i32>:word32] = r7
	r21 = Mem0[r29 + 92<i32>:word64]
	r2 = r2 + r3
	r7 = r16 * r1
	Mem0[r29 + 120<i32>:word32] = r7
	r2 = r6 - r16
	r24 = r5 + r24 * r2
	r25 = r2 - r22
	r27 = r25 * r1
	branch p0 l0000DB40
l0000DB34:
	// succ:  l0000DB38 l0000DB40
l0000DB38:
	p0 = __bit<word32,word32>(r9, 0<32>)
	branch r17 > r2 l0000DB4C
	goto l0000DB44
	// succ:  l0000DB44 l0000DB4C
l0000DB40:
	r1 = r18 & 0xFF<32>
	r0 = r23
	goto l0000DB88
	// succ:  l0000DB88
l0000DB44:
	r2 = Mem0[r29 + 132<i32>:word32]
	r1 = r18 & 0xFF<32>
	r0 = r23
	branch p0 l0000DB58
	// succ:  l0000DB4C l0000DB58
l0000DB4C:
	p0 = r8 > 0<32>
	r2 = Mem0[r29 + 120<i32>:word64]
	r1 = r18 & 0xFF<32>
	r0 = r23
	call fn000095F0 (retsize: 0;)
	// succ:  l0000DB58
l0000DB58:
	r2 = Mem0[r29 + 124<i32>:word32]
	p0 = r25 > 0<32>
	r1 = r24
	branch p0 l0000DB74
	// succ:  l0000DB68 l0000DB74
l0000DB68:
	r2 = r27
	r0 = r23 + r2
	call vmemcpy_asm (retsize: 0;)
	// succ:  l0000DB74
l0000DB74:
	r2 = Mem0[r29 - 128<i32>:word32]
	r1 = r18 & 0xFF<32>
	branch p0 l0000DB8C
	// succ:  l0000DB80 l0000DB8C
l0000DB80:
	p0 = r14 > 0<32>
	r2 = r26
	r0 = r23 + r2
	// succ:  l0000DB88
l0000DB88:
	call fn000095F0 (retsize: 0;)
	// succ:  l0000DB8C
l0000DB8C:
	r23 = r23 + r19
	r17 = r17
	r24 = r24 + r20
	branch r21 == 1<32> l0000DB34
	goto l0000DBA0
	// succ:  l0000DBA0 l0000DB34
l0000DB9C:
	r21 = Mem0[r29 + 100<i32>:word64]
	r2 = Mem0[r29 + 76<i32>:word64]
	r1 = r18 & 0xFF<32>
	r16 = Mem0[r29 + 72<i32>:word64]
	r17 = Mem0[r29 + 68<i32>:word64]
	r3 = r21 + r2
	r2 = Mem0[r29 + 56<i32>:word64]
	r4 = Mem0[r29 + 60<i32>:word64]
	r0 = r16
	r3 = r3 * r17
	call fn000095F4 (retsize: 0;)
	r0 = r0 + (r3 + r4)
	r3 = Mem0[r29 + 108<i32>:word64]
	r2 = Mem0[r29 + 96<i32>:word64]
	r21 = r21 + 1<32>
	r1_r0 = Mem0[r29 + 80<i32>:word64]
	r6 = Mem0[r29 + 112<i32>:word64]
	r3 = r3 + r2
	Mem0[r29 + 108<i32>:word32] = r3
	r12 = Mem0[r29 + 64<i32>:word32]
	r3 = r6 + (r0 << 2<32>)
	r9 = Mem0[r29 + 92<i32>:word32]
	r7 = Mem0[r29 + 116<i32>:word32]
	p0 = r21 == r12
	Mem0[r29 + 112<i32>:word32] = r3
	r6 = Mem0[r29 + 104<i32>:word64]
	r5 = r7 - r2
	r3 = r6 + r2
	Mem0[r29 + 116<i32>:word32] = r5
	Mem0[r29 + 100<i32>:word32] = r21
	Mem0[r29 + 104<i32>:word32] = r3
	branch p0 l0000DAA0
	goto l0000DC00
	// succ:  l0000DC00 l0000DAA0
l0000DBA0:
	r21 = r21 + 0xFFFFFFFF<32>
	r21 = Mem0[r29 + 100<i32>:word64]
	r2 = Mem0[r29 + 76<i32>:word64]
	r16 = Mem0[r29 + 72<i32>:word64]
	r17 = Mem0[r29 + 68<i32>:word64]
	r3 = r21 + r2
	r2 = Mem0[r29 + 56<i32>:word64]
	r4 = Mem0[r29 + 60<i32>:word64]
	r0 = r16
	r3 = r3 * r17
	call fn000095F4 (retsize: 0;)
	r0 = r0 + (r3 + r4)
	r3 = Mem0[r29 + 108<i32>:word64]
	r2 = Mem0[r29 + 96<i32>:word64]
	r21 = r21 + 1<32>
	r1_r0 = Mem0[r29 + 80<i32>:word64]
	r6 = Mem0[r29 + 112<i32>:word64]
	r3 = r3 + r2
	Mem0[r29 + 108<i32>:word32] = r3
	r12 = Mem0[r29 + 64<i32>:word32]
	r3 = r6 + (r0 << 2<32>)
	r9 = Mem0[r29 + 92<i32>:word32]
	r7 = Mem0[r29 + 116<i32>:word32]
	p0 = r21 == r12
	Mem0[r29 + 112<i32>:word32] = r3
	r6 = Mem0[r29 + 104<i32>:word64]
	r5 = r7 - r2
	r3 = r6 + r2
	Mem0[r29 + 116<i32>:word32] = r5
	Mem0[r29 + 100<i32>:word32] = r21
	Mem0[r29 + 104<i32>:word32] = r3
	branch p0 l0000DAA0
	// succ:  l0000DC00 l0000DAA0
l0000DC00:
	r1_r0 = Mem0[r29 + 80<i32>:word64]
	r2 = Mem0[r29 + 24<i32>:word64]
	r4 = Mem0[r29 + 48<i32>:word64]
	r7 = Mem0[r29 + 12<i32>:word64]
	r2 = r2 + (r1 << 2<32>)
	r7 = Mem0[r29 + 16<i32>:word64]
	r3 = Mem0[r29 + 20<i32>:word64]
	r4 = r4 + r7
	r6 = Mem0[r29 + 52<i32>:word64]
	r3 = r3
	Mem0[r29 + 24<i32>:word32] = r2
	r2 = Mem0[r29 + 96<i32>:word64]
	p0 = r3 == r7
	Mem0[r29 + 20<i32>:word32] = r3
	Mem0[r29 + 48<i32>:word32] = r4
	r4 = r6 + r2
	Mem0[r29 + 52<i32>:word32] = r4
	branch p0 l0000DA74
	// succ:  l0000DC30 l0000DA74
l0000DC30:
	r3 = Mem0[r29 + 16<i32>:word64]
	r1 = r18 & 0xFF<32>
	r0 = r12 * r3
	r2 = r2 & 0xFFFFFFF8<32>
	r2 = r2 - r0
	r0 = r16 + r0 * r17
	r2 = r2 * r17
	r19_r18 = Mem0[r29 + 168<i32>:word64]
	r17_r16 = Mem0[r29 + 176<i32>:word64]
	call fn000095F0 (retsize: 0;)
	r23_r22 = Mem0[r29 + 152<i32>:word64]
	r21_r20 = Mem0[r29 + 160<i32>:word64]
	r27_r26 = Mem0[r29 + 136<i32>:word64]
	r25_r24 = Mem0[r29 + 144<i32>:word64]
	v42 = r30
	r31 = Mem0[v42 + 4<i32>:word32]
	r30 = Mem0[v42:word32]
	r29 = v42 + 8<i32>
	return
	// succ:  im2col_cn_exit
im2col_cn_exit:


// im2col_slice_v0_co
// Return size: 0
define im2col_slice_v0_co
im2col_slice_v0_co_entry:
	r29 = fp
	// succ:  l0000DC64
l0000DC64:
	v4 = r29 - 8<i32>
	Mem0[v4:word32] = r30
	Mem0[v4 + 4<i32>:word32] = r31
	r30 = v4
	r29 = v4 - 200<i32>
	Mem0[r29 + 472<i32>:word64] = r23_r22
	Mem0[r29 + 184<i32>:word64] = r19_r18
	r23 = Mem0[r29 + 212<i32>:word32]
	Mem0[r29 + 152<i32>:word64] = r27_r26
	r7 = Mem0[r29 + 208<i32>:word32]
	r27 = r5
	Mem0[r29 + 104<i32>:word32] = r7
	r26 = Mem0[r29 + 224<i32>:word32]
	Mem0[r29 + 160<i32>:word64] = r25_r24
	r18 = Mem0[r29 + 220<i32>:word32]
	r19 = r23 * r3
	Mem0[r29 + 72<i32>:word32] = r3
	Mem0[r29 + 192<i32>:word64] = r17_r16
	r17 = r2
	r8 = r19 * r7
	r6 = Mem0[r29 + 240<i32>:word32]
	r2 = Mem0[r29 + 232<i32>:word32]
	Mem0[r29 + 144<i32>:word32] = r1
	Mem0[r29 + 176<i32>:word64] = r21_r20
	r20 = r26 * r18
	Mem0[r29 + 92<i32>:word32] = r8
	Mem0[r29 + 140<i32>:word32] = r2
	r2 = r3 & 0xFFFFFFF8<32>
	Mem0[r29 + 44<i32>:word32] = r26
	r24 = Mem0[r29 + 236<i32>:word32]
	r2 = r2 - r20
	r3 = r7 & 0xFFFFFFF0<32>
	Mem0[r29 + 68<i32>:word32] = r0
	r21 = r4
	r1_r0 = r26_r24
	Mem0[r29 + 96<i32>:word32] = r3
	Mem0[r29 + 4<i32>:word32] = r2
	r2 = r3 - r8
	Mem0[r29 + 88<i32>:word32] = r2
	r22 = r6 + r24
	r25 = Mem0[r29 + 216<i32>:word32]
	r16 = Mem0[r29 + 228<i32>:word32]
	call fn00009750 (retsize: 0;)
	Mem0[r29 + 40<i32>:word32] = r0
	r7 = r18 + 0xFFFFFFFF<32>
	p0 = r20 > r22
	r2 = r0 * r26
	r20 = r24 - r2
	Mem0[r29 + 36<i32>:word32] = r20
	r2 = p0
	Mem0[r29 + 8<i32>:word32] = r2
	// succ:  l0000DD44
l0000DD44:
	Mem0[r29 + 32<i32>:word32] = r7
	r6 = r25 + 0<32>
	r5 = Mem0[r29 + 72<i32>:word64]
	r2 = Mem0[r29 + 104<i32>:word64]
	r4 = r23 - r16
	r3 = r0 * r6
	Mem0[r29 + 108<i32>:word32] = r6
	r1 = Mem0[r29 + 140<i32>:word32]
	r9 = 0<32> - r16
	r2 = r23 * r2
	r8 = r0
	r3 = r3 - r1
	Mem0[r29 + 84<i32>:word32] = r3
	Mem0[r29 + 28<i32>:word32] = r9
	r9 = r23 - r17
	r25 = r5 * r17
	Mem0[r29 + 24<i32>:word32] = r6
	Mem0[r29 + 60<i32>:word32] = r9
	r4 = r4 - r17
	r3 = r17 * r3
	Mem0[r29 + 76<i32>:word32] = r16
	Mem0[r29 + 64<i32>:word32] = r23
	r2 = r2 >>u 4<32>
	Mem0[r29 + 80<i32>:word32] = r3
	Mem0[r29 + 20<i32>:word32] = r4
	Mem0[r29 + 16<i32>:word32] = r2
	p0 = r8 == r0
	r9 = r20
	r2 = r26
	branch p0 l0000DDC8
	// succ:  l0000DDB8 l0000DDC8
l0000DDB8:
	r2 = r26 + 0<32>
	r9 = 0<32>
	p0 = r8 == r7
	r2 = Mem0[r29 + 12<i32>:word32]
	// succ:  l0000DDC8
l0000DDC8:
	Mem0[r29 + 52<i32>:word32] = r8
	Mem0[r29 + 100<i32>:word32] = r2
	p0 = r2 > r9
	branch p0 l0000DF8C
	// succ:  l0000DDD8 l0000DF8C
l0000DDD8:
	r5 = Mem0[r29 + 16<i32>:word64]
	r4 = Mem0[r29 + 108<i32>:word64]
	r2 = r2 - r9
	r7 = Mem0[r29 + 20<i32>:word64]
	r6 = r4
	r3 = r4 * r9
	Mem0[r29 + 124<i32>:word32] = r27
	r5 = Mem0[r29 + 76<i32>:word32]
	r6 = r7 + r6 * r9
	r2 = r2 * r5
	Mem0[r29 + 56<i32>:word32] = r27
	r7 = Mem0[r29 + 28<i32>:word32]
	r3 = r5 - r3
	Mem0[r29 + 120<i32>:word32] = r3
	Mem0[r29 + 128<i32>:word32] = r6
	r2 = r2 << 4<32>
	r4 = r7 + r4 * r9
	Mem0[r29 + 48<i32>:word32] = r2
	Mem0[r29 + 116<i32>:word32] = r4
	// succ:  l0000DE18
l0000DE18:
	Mem0[r29 + 112<i32>:word32] = r9
	r2 = Mem0[r29 + 104<i32>:word32]
	r8 = 0<32>
	r6 = Mem0[r29 - 128<i32>:word32]
	r7 = Mem0[r29 + 120<i32>:word32]
	branch p0 l0000DF1C
	// succ:  l0000DE30 l0000DF1C
l0000DE30:
	p0 = r2 > 0<32>
	r3 = Mem0[r29 + 112<i32>:word64]
	r2 = Mem0[r29 + 108<i32>:word64]
	r1 = Mem0[r29 + 72<i32>:word64]
	r4 = Mem0[r29 + 76<i32>:word64]
	r3 = max<int32>(r6, r8)
	r2 = r3 * r2
	r16 = Mem0[r29 + 104<i32>:word64]
	r7 = Mem0[r29 + 60<i32>:word64]
	r2 = r2 - r4
	r0 = max<int32>(r7, r8)
	r4 = Mem0[r29 + 68<i32>:word64]
	r5 = Mem0[r29 + 116<i32>:word64]
	r2 = r7 + r2
	r6 = 0<32> - r2
	r6 = Mem0[r29 + 64<i32>:word32]
	r27 = r1
	r20 = max<int32>(r2, r8)
	r23 = max<int32>(r6, r8)
	r18 = Mem0[r29 + 84<i32>:word32]
	r2 = r6 - r3
	r7 = r1 * r0
	r5 = max<int32>(r5, r8)
	Mem0[r29 + 35<i32>:byte] = r2
	r26 = Mem0[r29 + 124<i32>:word32]
	r22 = r20 * r1
	r2 = r1 * r2
	Mem0[r29 + 136<i32>:word32] = r7
	r2 = r2 + r5
	r7 = r23 * r1
	Mem0[r29 + 132<i32>:word32] = r7
	r2 = r6 - r23
	r27 = r4 + r27 * r2
	r24 = r2 - r20
	r17 = r24 * r1
	branch p0 l0000DEBC
l0000DEB0:
	// succ:  l0000DEB4 l0000DEBC
l0000DEB4:
	p0 = __bit<word32,word32>(r10, 0<32>)
	branch r18 > r2 l0000DEC8
	goto l0000DEC0
	// succ:  l0000DEC0 l0000DEC8
l0000DEBC:
	r1_r0 = r21_r26
	goto l0000DF04
	// succ:  l0000DF04
l0000DEC0:
	r2 = Mem0[r29 + 144<i32>:word32]
	r1_r0 = r21_r26
	r2 = Mem0[r29 - 124<i32>:word32]
	r1_r0 = r21_r26
	branch p0 l0000DED4
	goto l0000DED0
	// succ:  l0000DED0 l0000DED4
l0000DEC8:
	r2 = Mem0[r29 - 124<i32>:word32]
	r1_r0 = r21_r26
	// succ:  l0000DED0
l0000DED0:
	p0 = r15 > 0<32>
	call vmemset_asm (retsize: 0;)
	// succ:  l0000DED4
l0000DED4:
	r2 = Mem0[r29 - 120<i32>:word32]
	r1 = r27 + 0<32>
	p0 = r24 > 0<32>
	branch p0 l0000DEF0
	// succ:  l0000DEE4 l0000DEF0
l0000DEE4:
	r2 = r17
	r0 = r26 + r2
	call vmemcpy_asm (retsize: 0;)
	// succ:  l0000DEF0
l0000DEF0:
	r2 = Mem0[r29 - 116<i32>:word32]
	r1 = r21 + 0<32>
	branch p0 l0000DF08
	// succ:  l0000DEFC l0000DF08
l0000DEFC:
	p0 = r12 > 0<32>
	r2 = r22
	r0 = r26 + r2
	// succ:  l0000DF04
l0000DF04:
	call vmemset_asm (retsize: 0;)
	// succ:  l0000DF08
l0000DF08:
	r26 = r26 + r19
	r18 = r18 + 1<32>
	r27 = r27 + r25
	branch r16 == 1<32> l0000DEB0
	goto l0000DF20
	// succ:  l0000DF20 l0000DEB0
l0000DF1C:
	r16 = Mem0[r29 + 124<i32>:word64]
	r2 = Mem0[r29 + 92<i32>:word64]
	r1 = r21
	r2 = Mem0[r29 + 88<i32>:word32]
	r0 = r16 + r2
	call vmemset_asm (retsize: 0;)
	r3 = Mem0[r29 + 116<i32>:word64]
	r2 = Mem0[r29 + 108<i32>:word64]
	r6 = Mem0[r29 + 128<i32>:word32]
	r7 = Mem0[r29 + 120<i32>:word32]
	r3 = r3 + r2
	Mem0[r29 + 116<i32>:word32] = r3
	r9 = Mem0[r29 + 112<i32>:word32]
	r3 = r6 + r2
	r5 = r7 - r2
	r7 = Mem0[r29 + 96<i32>:word64]
	r2 = Mem0[r29 + 100<i32>:word64]
	r9 = r9 + 1<32>
	Mem0[r29 + 128<i32>:word32] = r3
	Mem0[r29 + 120<i32>:word32] = r5
	p0 = r9 == r2
	r16 = r16 + r7
	Mem0[r29 + 124<i32>:word32] = r16
	r2 = Mem0[r29 + 48<i32>:word32]
	branch p0 l0000DE18
	goto l0000DF74
	// succ:  l0000DF74 l0000DE18
l0000DF20:
	r16 = r16 + 0xFFFFFFFF<32>
	r16 = Mem0[r29 + 124<i32>:word64]
	r2 = Mem0[r29 + 92<i32>:word64]
	r2 = Mem0[r29 + 88<i32>:word32]
	r0 = r16 + r2
	call vmemset_asm (retsize: 0;)
	r3 = Mem0[r29 + 116<i32>:word64]
	r2 = Mem0[r29 + 108<i32>:word64]
	r6 = Mem0[r29 + 128<i32>:word32]
	r7 = Mem0[r29 + 120<i32>:word32]
	r3 = r3 + r2
	Mem0[r29 + 116<i32>:word32] = r3
	r9 = Mem0[r29 + 112<i32>:word32]
	r3 = r6 + r2
	r5 = r7 - r2
	r7 = Mem0[r29 + 96<i32>:word64]
	r2 = Mem0[r29 + 100<i32>:word64]
	r9 = r9 + 1<32>
	Mem0[r29 + 128<i32>:word32] = r3
	Mem0[r29 + 120<i32>:word32] = r5
	p0 = r9 == r2
	r16 = r16 + r7
	Mem0[r29 + 124<i32>:word32] = r16
	r2 = Mem0[r29 + 48<i32>:word32]
	branch p0 l0000DE18
	// succ:  l0000DF74 l0000DE18
l0000DF74:
	r26 = Mem0[r29 + 44<i32>:word32]
	r27 = Mem0[r29 + 56<i32>:word32]
	r6 = Mem0[r29 + 24<i32>:word64]
	r0 = Mem0[r29 + 40<i32>:word64]
	r27 = r27 + r2
	r7 = Mem0[r29 + 32<i32>:word64]
	r20 = Mem0[r29 + 36<i32>:word64]
	r8 = Mem0[r29 + 52<i32>:word32]
	// succ:  l0000DF8C
l0000DF8C:
	r2 = Mem0[r29 + 80<i32>:word32]
	r3 = Mem0[r29 + 84<i32>:word64]
	r5 = Mem0[r29 + 108<i32>:word64]
	r8 = r8 + 1<32>
	p0 = r7 > r8
	Mem0[r29 + 20<i32>:byte] = r2
	r3 = r3 + r5
	r2 = r2 + r6
	Mem0[r29 + 84<i32>:word32] = r3
	r0 = Mem0[r29 + 8<i32>:word32]
	r25_r24 = Mem0[r29 + 160<i32>:word64]
	r1_r0 = r21_r27
	branch p0 l0000DFDC
	// succ:  l0000DFC4 l0000DFDC
l0000DFC4:
	p0 = r0
	r19_r18 = Mem0[r29 + 184<i32>:word64]
	r17_r16 = Mem0[r29 + 192<i32>:word64]
	r23_r22 = Mem0[r29 + 168<i32>:word64]
	r21_r20 = Mem0[r29 + 176<i32>:word64]
	r27_r26 = Mem0[r29 + 152<i32>:word64]
	r25_r24 = Mem0[r29 + 160<i32>:word64]
	v42 = r30
	r31 = Mem0[v42 + 4<i32>:word32]
	r30 = Mem0[v42:word32]
	r29 = v42 + 8<i32>
	return
	// succ:  im2col_slice_v0_co_exit
l0000DFDC:
	r19_r18 = Mem0[r29 + 184<i32>:word64]
	r17_r16 = Mem0[r29 + 192<i32>:word64]
	r2 = r3 * r2
	r23_r22 = Mem0[r29 + 168<i32>:word64]
	r21_r20 = Mem0[r29 + 176<i32>:word64]
	r27_r26 = Mem0[r29 + 152<i32>:word64]
	v43 = r30
	r31 = Mem0[v43 + 4<i32>:word32]
	r30 = Mem0[v43:word32]
	r29 = v43 + 8<i32>
	// succ:  l0000DFEC_thunk_vmemset_asm
l0000DFEC_thunk_vmemset_asm:
	call vmemset_asm (retsize: 0;)
	return
	// succ:  im2col_slice_v0_co_exit
im2col_slice_v0_co_exit:


// im2col_slice_co
// Return size: 0
define im2col_slice_co
im2col_slice_co_entry:
	r29 = fp
	// succ:  l0000DFF4
l0000DFF4:
	v4 = r29 - 8<i32>
	Mem0[v4:word32] = r30
	Mem0[v4 + 4<i32>:word32] = r31
	r30 = v4
	r29 = v4 - 136<i32>
	Mem0[r29 + 112<i32>:word64] = r21_r20
	r6 = Mem0[r29 + 144<i32>:word32]
	r21 = r2
	Mem0[r29 + 88<i32>:word64] = r27_r26
	r2 = Mem0[r29 + 164<i32>:word32]
	Mem0[r29 + 48<i32>:word32] = r2
	r7 = Mem0[r29 + 168<i32>:word32]
	Mem0[r29 + 96<i32>:word64] = r25_r24
	r27 = Mem0[r29 + 148<i32>:word32]
	r2 = r6 * r3
	Mem0[r29 + 120<i32>:word64] = r19_r18
	Mem0[r29 + 104<i32>:word64] = r23_r22
	r22 = r1
	r19 = Mem0[r29 + 160<i32>:word32]
	r20 = Mem0[r29 + 176<i32>:word32]
	r23 = Mem0[r29 + 172<i32>:word32]
	Mem0[r29 + 128<i32>:word64] = r17_r16
	Mem0[r29 + 80<i32>:word32] = r0
	r2 = r2 & 0xFFFFFFF0<32>
	r1_r0 = r19_r23
	Mem0[r29 + 24<i32>:word32] = r19
	r16 = r5
	r18 = r20 + r23
	Mem0[r29 + 84<i32>:word32] = r3
	Mem0[r29 + 72<i32>:word32] = r6
	Mem0[r29 + 64<i32>:word32] = r2
	r17 = Mem0[r29 + 156<i32>:word32]
	Mem0[r29 + 68<i32>:word32] = r7
	Mem0[r29 + 76<i32>:word32] = r4
	r24 = Mem0[r29 + 152<i32>:word32]
	call fn00009750 (retsize: 0;)
	r25 = r0
	r2 = r19 * r17
	Mem0[r29 + 20<i32>:word32] = r25
	r3 = r25 * r19
	r23 = r18
	r26 = r23 - r3
	Mem0[r29 + 16<i32>:word32] = r26
	r1_r0 = r19_r23
	branch p0 l0000E090
	// succ:  l0000E088 l0000E090
l0000E088:
	p0 = r2 > -1<i32>
	Mem0[r29 + 40<i32>:word32] = r19
	r17 = r17
	goto l0000E0A4
	// succ:  l0000E0A4
l0000E090:
	call fn00009750 (retsize: 0;)
	r17 = r0
	r2 = r17 * r19
	r2 = r23 - r2
	Mem0[r29 + 40<i32>:word32] = r2
	// succ:  l0000E0A4
l0000E0A4:
	r1 = Mem0[r29 + 76<i32>:word64]
	r2 = Mem0[r29 + 64<i32>:word64]
	r0 = r16
	Mem0[r29 + 12<i32>:word32] = r17
	r2 = r2 * r20
	call vmemset_asm (retsize: 0;)
	p0 = r25 > r17
	r5 = r22
	branch p0 l0000E228
	// succ:  l0000E0C8 l0000E228
l0000E0C8:
	r3 = r25 * r24
	r0 = Mem0[r29 + 84<i32>:word64]
	r2 = Mem0[r29 + 72<i32>:word64]
	r4 = r27 - r21
	r7 = r24 * r21
	r1 = Mem0[r29 + 68<i32>:word64]
	r23 = 0<32>
	r6 = r25
	r2 = r27 * r2
	Mem0[r29 + 15<i32>:byte] = r3
	r3 = r3 - r1
	Mem0[r29 + 8<i32>:word32] = r7
	Mem0[r29 + 52<i32>:word32] = r24
	r2 = r2 >>u 4<32>
	Mem0[r29 + 56<i32>:word32] = r3
	Mem0[r29 + 44<i32>:word32] = r4
	Mem0[r29 + 4<i32>:word32] = r2
	r2 = Mem0[r29 + 40<i32>:word32]
	p0 = r6 == r17
	p1 = r6 == r25
	r2 = r19 + 0<32>
	r2 = r19 + 0<32>
	Mem0[r29 + 36<i32>:word32] = r16
	Mem0[r29 + 68<i32>:word32] = r2
	branch p0 l0000E200
	// succ:  l0000E128 l0000E200
l0000E128:
	p0 = r2 > -1<i32>
	Mem0[r29 + 32<i32>:word32] = r6
	r3 = Mem0[r29 + 4<i32>:word64]
	r22 = r16
	r2 = r2 - r4
	r2 = r2 * r3
	r2 = r2 << 4<32>
	Mem0[r29 + 28<i32>:word32] = r2
	Mem0[r29 + 76<i32>:word32] = r4
	r2 = Mem0[r29 + 72<i32>:word64]
	// succ:  l0000E144
l0000E144:
	r7 = Mem0[r29 + 48<i32>:word32]
	r25 = Mem0[r29 + 60<i32>:word32]
	branch p0 l0000E1D4
	// succ:  l0000E150 l0000E1D4
l0000E150:
	p0 = r2 > 0<32>
	r3 = Mem0[r29 + 76<i32>:word64]
	r2 = Mem0[r29 + 52<i32>:word64]
	r17 = 0<32>
	r20 = Mem0[r29 + 72<i32>:word32]
	r26 = Mem0[r29 + 56<i32>:word32]
	r2 = r3 * r2
	r2 = Mem0[r29 + 44<i32>:word32]
	r24 = r2 - r7
	r18 = r2 + r24
	r19 = 0<32> - r24
	p0 = r25 > 0xFFFFFFFF<32>
	branch p0 l0000E1C0
l0000E178:
	p0 = r25 > 0xFFFFFFFF<32>
	// succ:  l0000E17C l0000E1C0
l0000E17C:
	p0 = r5 > r25
	branch p0 l0000E1C4
	// succ:  l0000E188 l0000E1C4
l0000E188:
	r3 = max<int32>(r23, r19)
	r4 = r27 - r3
	r2 = max<int32>(r23, r18)
	branch r2 > 0<32> l0000E1C4
	// succ:  l0000E19C l0000E1C4
l0000E19C:
	r2 = r4 - r2
	r3 = Mem0[r29 + 80<i32>:word64]
	r6 = Mem0[r29 + 84<i32>:word64]
	r0 = r3 + r17
	r16 = r5
	r1 = r4 + r26
	r0 = r22 + r0 * r6
	r1 = r3 + r1 * r6
	r2 = r2 * r6
	call vmemcpy_asm (retsize: 0;)
	r5 = r16
	// succ:  l0000E1C0
l0000E1C0:
	r17 = r17 + r27
	r25 = r25 + 1<32>
	r26 = r26 + r21
	goto l0000E1CC
	// succ:  l0000E1CC
l0000E1C4:
	r17 = r17 + r27
	r25 = r25 + 1<32>
	// succ:  l0000E1CC
l0000E1CC:
	branch r20 == 1<32> l0000E178
	goto l0000E1D8
	// succ:  l0000E1D8 l0000E178
l0000E1D4:
	r2 = Mem0[r29 + 64<i32>:word64]
	r4 = Mem0[r29 + 76<i32>:word64]
	// succ:  l0000E1D8
l0000E1D8:
	r20 = r20 + 0xFFFFFFFF<32>
	r7 = Mem0[r29 + 68<i32>:word64]
	r22 = r22 + r2
	branch r4 == r7 l0000E144
	// succ:  l0000E1E8 l0000E144
l0000E1E8:
	r4 = r4 + 1<32>
	r25 = Mem0[r29 + 20<i32>:word32]
	r19 = Mem0[r29 + 24<i32>:word32]
	r16 = r16 + r2
	r17 = Mem0[r29 + 12<i32>:word32]
	r26 = Mem0[r29 + 16<i32>:word32]
	r7 = Mem0[r29 + 8<i32>:word64]
	r6 = Mem0[r29 + 32<i32>:word64]
	// succ:  l0000E200
l0000E200:
	r2 = Mem0[r29 + 56<i32>:word32]
	r3 = Mem0[r29 + 60<i32>:word64]
	r4 = Mem0[r29 + 52<i32>:word64]
	r6 = r6 + 1<32>
	p0 = r17 > r6
	Mem0[r29 + 14<i32>:byte] = r2
	r3 = r3 + r4
	r2 = r2 + r7
	Mem0[r29 + 60<i32>:word32] = r3
	r19_r18 = Mem0[r29 + 120<i32>:word64]
	r17_r16 = Mem0[r29 + 128<i32>:word64]
	// succ:  l0000E228
l0000E228:
	r23_r22 = Mem0[r29 + 104<i32>:word64]
	r21_r20 = Mem0[r29 + 112<i32>:word64]
	r27_r26 = Mem0[r29 + 88<i32>:word64]
	r25_r24 = Mem0[r29 + 96<i32>:word64]
	v37 = r30
	r31 = Mem0[v37 + 4<i32>:word32]
	r30 = Mem0[v37:word32]
	r29 = v37 + 8<i32>
	return
	// succ:  im2col_slice_co_exit
im2col_slice_co_exit:


// fast_im2col_co
// Return size: 0
define fast_im2col_co
fast_im2col_co_entry:
	r29 = fp
	// succ:  l0000E238
l0000E238:
	v4 = r29 - 8<i32>
	Mem0[v4:word32] = r30
	Mem0[v4 + 4<i32>:word32] = r31
	r30 = v4
	r29 = v4 - 104<i32>
	r6 = Mem0[r29 + 112<i32>:word32]
	r9 = Mem0[r29 + 124<i32>:word32]
	Mem0[r29 + 96<i32>:word64] = r17_r16
	r7 = Mem0[r29 + 128<i32>:word32]
	r17 = r3
	r6 = r6 + r9
	Mem0[r29 + 72<i32>:word64] = r23_r22
	Mem0[r29 + 88<i32>:word64] = r19_r18
	r19_r18 = r5_r4
	r7 = r7 + (r6 + 0xFFFFFFFF<32>)
	Mem0[r29 + 36<i32>:word32] = r7
	Mem0[r29 + 80<i32>:word64] = r21_r20
	r3 = r17 + 0xF<32>
	p0 = r9 > r7
	Mem0[r29 + 56<i32>:word64] = r27_r26
	Mem0[r29 + 64<i32>:word64] = r25_r24
	Mem0[r29 + 52<i32>:word32] = r1
	r8 = Mem0[r29 - 124<i32>:word32]
	branch p0 l0000E414
	// succ:  l0000E280 l0000E414
l0000E280:
	r5 = Mem0[r29 + 136<i32>:word32]
	r12 = Mem0[r29 + 120<i32>:word32]
	r4 = r3 >>u 4<32>
	r20 = r17 * r2
	r13 = Mem0[r29 + 140<i32>:word32]
	r27 = r3 & 0xFFFFFFF0<32>
	r6 = r9 * r12
	r4 = r4 * r8
	r14 = Mem0[r29 + 144<i32>:word32]
	r26 = r20
	r15 = r5 + r2
	r7 = r12 * r17
	r23 = r27 - r17
	r5 = r6 - r13
	r4 = r4 << 4<32>
	r21 = r5 * r17
	Mem0[r29 + 28<i32>:word32] = r14
	r14 = Mem0[r29 + 52<i32>:word32]
	r3 = r13 - r6
	r26 = r0 + r26 * r5
	Mem0[r29 + 32<i32>:word32] = r12
	Mem0[r29 + 4<i32>:word32] = r4
	r4 = 0xFFFFFFFF<32> - r3
	r22 = r15 * r17
	Mem0[r29 + 12<i32>:word32] = r8
	r16 = r13 + r14
	r8 = 0<32> - r12
	r2 = r7 * r2
	Mem0[r29 + 8<i32>:word32] = r8
	Mem0[r29 + 20<i32>:word32] = r13
	Mem0[r29 + 24<i32>:word32] = r2
	Mem0[r29 + 16<i32>:word32] = r16
	// succ:  l0000E2FC
l0000E2FC:
	branch r2 == 0<32> l0000E370
	// succ:  l0000E308 l0000E370
l0000E308:
	r2 = Mem0[r29 + 28<i32>:word32]
	r3 = Mem0[r29 + 20<i32>:word32]
	p0 = r12 > 0<32>
	branch p0 l0000E324
	// succ:  l0000E314 l0000E324
l0000E314:
	Mem0[r29 + 44<i32>:word32] = r5
	Mem0[r29 + 40<i32>:word32] = r4
	// succ:  l0000E318
l0000E318:
	Mem0[r29 + 48<i32>:word32] = r9
	goto l0000E3E8
	// succ:  l0000E3E8
l0000E324:
	branch r25 >u r2 l0000E318
	// succ:  l0000E330 l0000E318
l0000E330:
	r2 = Mem0[r29 + 16<i32>:word32]
	Mem0[r29 + 48<i32>:word32] = r9
	r3 = Mem0[r29 + 8<i32>:word32]
	r24 = r26
	r2 = r4 - r2
	Mem0[r29 + 40<i32>:word32] = r4
	Mem0[r29 + 44<i32>:word32] = r5
	r2 = max<uint32>(r3, r2)
	r16 = 0<32> - r2
	p0 = r25 > 0xFFFFFFFF<32>
	branch p0 l0000E35C
l0000E350:
	p0 = r25 > 0xFFFFFFFF<32>
	// succ:  l0000E354 l0000E35C
l0000E354:
	branch r25 > r2 l0000E3BC
	goto l0000E360
	// succ:  l0000E360 l0000E3BC
l0000E35C:
	r1_r0 = r18_r19
	r2 = r22
	call vmemset_asm (retsize: 0;)
	goto l0000E368
	// succ:  l0000E368
l0000E360:
	r2 = Mem0[r29 + 52<i32>:word32]
	r1_r0 = r18_r19
	r2 = r22
	// succ:  l0000E368
l0000E368:
	goto l0000E3D4
	// succ:  l0000E3D4
l0000E370:
	Mem0[r29 + 40<i32>:word32] = r4
	r2 = Mem0[r29 + 12<i32>:word64]
	Mem0[r29 + 44<i32>:word32] = r5
	r16 = r2
	p0 = r2 > 0<32>
	Mem0[r29 + 48<i32>:word32] = r9
	branch p0 l0000E3E8
	// succ:  l0000E384 l0000E3E8
l0000E384:
	r1_r0 = r24_r25
	r2 = r17
	call vmemcpy_asm (retsize: 0;)
	// succ:  l0000E390
l0000E390:
	r1 = r18
	r2 = r23
	r0 = r25 + r17
	call vmemset_asm (retsize: 0;)
	branch r16 == 1<32> l0000E390
	// succ:  l0000E3B0 l0000E390
l0000E3B0:
	r16 = r16 + 0xFFFFFFFF<32>
	r25 = r25 + r27
	r24 = r24 + r17
	r19 = r19 + r2
	goto l0000E3E8
	// succ:  l0000E3E8
l0000E3BC:
	r1_r0 = r18_r19
	r2 = r21
	r1 = r24
	r2 = r20
	r0 = r19 + r21
	call vmemcpy_asm (retsize: 0;)
	// succ:  l0000E3D4
l0000E3D4:
	r19 = r19 + r22
	r25 = r25 + 1<32>
	r24 = r24 + r20
	branch r16 == 1<32> l0000E350
	goto l0000E3EC
	// succ:  l0000E3EC l0000E350
l0000E3E8:
	r2 = Mem0[r29 + 36<i32>:word32]
	r9 = Mem0[r29 + 48<i32>:word32]
	r12 = Mem0[r29 + 32<i32>:word32]
	r7 = Mem0[r29 + 24<i32>:word32]
	r9 = r9 + 1<32>
	p0 = r2 > r9
	r4 = Mem0[r29 + 40<i32>:word64]
	r5 = Mem0[r29 + 44<i32>:word64]
	r26 = r26 + r7
	r4 = r4 + r12
	r5 = r5 + r12
	branch p0 l0000E2FC
	goto l0000E414
	// succ:  l0000E414 l0000E2FC
l0000E3EC:
	r16 = r16 + 0xFFFFFFFF<32>
	r2 = Mem0[r29 + 36<i32>:word32]
	r12 = Mem0[r29 + 32<i32>:word32]
	r7 = Mem0[r29 + 24<i32>:word32]
	r9 = r9 + 1<32>
	p0 = r2 > r9
	r4 = Mem0[r29 + 40<i32>:word64]
	r5 = Mem0[r29 + 44<i32>:word64]
	r26 = r26 + r7
	r4 = r4 + r12
	r5 = r5 + r12
	branch p0 l0000E2FC
	// succ:  l0000E414 l0000E2FC
l0000E414:
	r19_r18 = Mem0[r29 + 88<i32>:word64]
	r17_r16 = Mem0[r29 + 96<i32>:word64]
	r23_r22 = Mem0[r29 + 72<i32>:word64]
	r21_r20 = Mem0[r29 + 80<i32>:word64]
	r27_r26 = Mem0[r29 + 56<i32>:word64]
	r25_r24 = Mem0[r29 + 64<i32>:word64]
	v37 = r30
	r31 = Mem0[v37 + 4<i32>:word32]
	r30 = Mem0[v37:word32]
	r29 = v37 + 8<i32>
	return
	// succ:  fast_im2col_co_exit
fast_im2col_co_exit:


// deconv_execute_ref
// Return size: 0
define deconv_execute_ref
deconv_execute_ref_entry:
	r29 = fp
	// succ:  l0000E430
l0000E430:
	v4 = r29 - 8<i32>
	Mem0[v4:word32] = r30
	Mem0[v4 + 4<i32>:word32] = r31
	r30 = v4
	r29 = v4 - 184<i32>
	r3 = Mem0[r0 + 8<i32>:word32]
	r2 = Mem0[r0 + 4<i32>:word32]
	Mem0[r29 + 152<i32>:word64] = r23_r22
	Mem0[r29 + 176<i32>:word64] = r17_r16
	r16 = Mem0[r2:word32]
	r22 = Mem0[r0 + 32<i32>:int8]
	r7 = Mem0[r3:word32]
	r5 = Mem0[r2 + 24<i32>:word32]
	Mem0[r29 + 168<i32>:word64] = r19_r18
	r17 = Mem0[r2 + 4<i32>:word32]
	p0 = r22 == 0<32>
	Mem0[r29 + 144<i32>:word64] = r25_r24
	Mem0[r29 + 160<i32>:word64] = r21_r20
	Mem0[r29 + 104<i32>:word32] = r7
	r7 = Mem0[r16 + 4<i32>:word32]
	r20 = Mem0[r2 + 8<i32>:word32]
	r19 = Mem0[r2 + 12<i32>:word32]
	r24 = Mem0[r2 + 16<i32>:word32]
	r21 = Mem0[r2 + 20<i32>:word32]
	Mem0[r29 + 136<i32>:word64] = r27_r26
	r2 = Mem0[r16 + 12<i32>:word32]
	Mem0[r29 + 88<i32>:word32] = r0
	r0 = Mem0[r16 + 8<i32>:word32]
	Mem0[r29 + 92<i32>:word32] = r7
	r26 = Mem0[r16:word32]
	Mem0[r29 + 124<i32>:word32] = r2
	r7 = Mem0[r17 + 12<i32>:word32]
	r18 = Mem0[r5 + 8<i32>:word32]
	r2 = Mem0[r17:word32]
	r4 = Mem0[r3 + 8<i32>:word32]
	r27 = Mem0[r5 + 4<i32>:word32]
	Mem0[r29 + 16<i32>:word32] = r1
	r3 = Mem0[r3 + 4<i32>:word32]
	r1 = p0
	Mem0[r29 + 100<i32>:word32] = r7
	Mem0[r29 + 120<i32>:word32] = r2
	r7 = Mem0[r17 + 4<i32>:word32]
	r2 = Mem0[r17 + 8<i32>:word32]
	Mem0[r29 + 128<i32>:word32] = r0
	Mem0[r29 + 80<i32>:word32] = r5
	Mem0[r29 + 72<i32>:word32] = r3
	Mem0[r29 + 76<i32>:word32] = r4
	Mem0[r29 + 32<i32>:word32] = r7
	Mem0[r29 + 20<i32>:word32] = r26
	Mem0[r29 + 108<i32>:word32] = r1
	Mem0[r29 + 84<i32>:word32] = r2
	branch p0 l0000E4E4
	// succ:  l0000E4BC l0000E4E4
l0000E4BC:
	r2 = Mem0[r29 - 128<i32>:word32]
	r3 = Mem0[r29 + 32<i32>:word32]
	branch p0 l0000E4DC
	// succ:  l0000E4C8 l0000E4DC
l0000E4C8:
	p0 = r14 == 4<32>
	r0 = r18
	r23 = 0<32>
	branch p0 l0000E4F0
	// succ:  l0000E4D0 l0000E4F0
l0000E4D0:
	p0 = r14 == 2<32>
	r2 = Mem0[r29 + 128<i32>:word32]
	goto l0000E4E8
	// succ:  l0000E4E8
l0000E4DC:
	r2 = r2 - r3
	r0 = r2 + r18
	// succ:  l0000E4E4
l0000E4E4:
	r1 = r18
	call fn00009760 (retsize: 0;)
	goto l0000E4EC
	// succ:  l0000E4EC
l0000E4E8:
	r1 = r18
	// succ:  l0000E4EC
l0000E4EC:
	r23 = r0
	// succ:  l0000E4F0
l0000E4F0:
	r1 = r27 + 0<32>
	p0 = r22 == 2<32>
	Mem0[r29 + 29<i32>:byte] = r0
	r1 = r27 + 0<32>
	branch p0 l0000E540
	// succ:  l0000E50C l0000E540
l0000E50C:
	r0 = p0
	r2 = Mem0[r29 + 92<i32>:word32]
	r1 = r27 + 0<32>
	Mem0[r29 + 11<i32>:byte] = r2
	r0 = Mem0[r29 + 108<i32>:word32]
	r2 = 0<32>
	r0 = Mem0[r29 + 92<i32>:word32]
	branch p0 l0000E554
	// succ:  l0000E52C l0000E554
l0000E52C:
	goto l0000E548
	// succ:  l0000E548
l0000E540:
	r2 = r2 - r3
	r0 = r2 + r1
	// succ:  l0000E548
l0000E548:
	call fn00009760 (retsize: 0;)
	Mem0[r29 + 44<i32>:word32] = r0
	r3 = Mem0[r20 + 16<i32>:word32]
	r2 = Mem0[r19 + 16<i32>:word32]
	r20 = 0x437F0000<32>
	goto l0000E55C
	// succ:  l0000E55C
l0000E554:
	r3 = Mem0[r20 + 16<i32>:word32]
	r2 = Mem0[r19 + 16<i32>:word32]
	r20 = 0<32>
	// succ:  l0000E55C
l0000E55C:
	r4 = Mem0[r24 + 16<i32>:word32]
	r6 = Mem0[r17 + 16<i32>:word32]
	r17 = Mem0[r3:word32]
	r2 = Mem0[r2:word32]
	Mem0[r29 + 56<i32>:word32] = r6
	r5 = Mem0[r21 + 16<i32>:word32]
	r6 = Mem0[r29 + 104<i32>:word64]
	r7 = Mem0[r16 + 16<i32>:word32]
	r1_r0 = r20_r21
	Mem0[r29 + 96<i32>:word32] = r7
	r16 = Mem0[r5:word32]
	r6 = Mem0[r6 + 16<i32>:word32]
	Mem0[r29 + 52<i32>:word32] = r6
	r19 = Mem0[r4:word32]
	call fn00009610 (retsize: 0;)
	r25 = r20
	r16 = r0
	r1_r0 = r20_r24
	call fn00009610 (retsize: 0;)
	r3 = 0x38D1B717<32>
	r21 = r3
	r2 = 0<32>
	r1_r0 = r21_r3
	r20 = 0<32>
	r1_r0 = r0_r25
	call fn00009624 (retsize: 0;)
	r0 = r21
	r24 = r0
	r1 = r24
	call fn00009600 (retsize: 0;)
	r1_r0 = r0_r25
	call fn00009610 (retsize: 0;)
	call fn00009624 (retsize: 0;)
	r2 = Mem0[r29 + 32<i32>:word64]
	r21 = r0
	r19 = r18 + 0xFFFFFFFF<32>
	r17 = r18 - r2
	r0 = Mem0[r29 + 116<i32>:word64]
	r3 = r23
	r0 = r17 + r3
	branch p0 l0000E63C
l0000E614:
	r0 = r17 + r3
	branch p0 l0000E63C
	// succ:  l0000E61C l0000E63C
l0000E61C:
	p0 = r0
	r0 = r19 + r3
	branch p0 l0000E638
	// succ:  l0000E624 l0000E638
l0000E624:
	p0 = r14 == 2<32>
	r1 = Mem0[r29 + 108<i32>:word64]
	r0 = 0<32>
	r1_r0 = r18_r3
	branch p0 l0000E64C
	// succ:  l0000E634 l0000E64C
l0000E634:
	p0 = r1
	goto l0000E63C
	// succ:  l0000E63C
l0000E638:
	r1 = r18
	// succ:  l0000E63C
l0000E63C:
	r20 = r3
	call fn00009760 (retsize: 0;)
	r3 = r20
	branch r2 == r0 l0000E614
	goto l0000E658
	// succ:  l0000E658 l0000E614
l0000E64C:
	branch r2 == r0 l0000E614
	// succ:  l0000E658 l0000E614
l0000E658:
	r2 = Mem0[r29 + 128<i32>:word32]
	r23 = r3 + 1<32>
	Mem0[r29 + 64<i32>:word32] = r3
	r3 = Mem0[r29 + 120<i32>:word64]
	r2 = 0xCF000000<32>
	Mem0[r29 + 112<i32>:word32] = r20
	r19 = Mem0[r29 + 44<i32>:word64]
	r17 = r20 - r3
	Mem0[r29 + 60<i32>:word32] = r2
	r0 = Mem0[r29 + 116<i32>:word32]
	r1_r0 = r20_r19
	branch p0 l0000E6B0
l0000E684:
	r1_r0 = r20_r19
	branch p0 l0000E6B0
	// succ:  l0000E68C l0000E6B0
l0000E68C:
	p0 = r0
	branch p0 l0000E6A4
	// succ:  l0000E690 l0000E6A4
l0000E690:
	p0 = r14 == 2<32>
	r1 = Mem0[r29 + 108<i32>:word64]
	r0 = 0<32>
	r1_r0 = r20_r19
	branch p0 l0000E6BC
	// succ:  l0000E6A0 l0000E6BC
l0000E6A0:
	p0 = r1
	goto l0000E6B4
	// succ:  l0000E6B4
l0000E6A4:
	goto l0000E6B8
	// succ:  l0000E6B8
l0000E6B0:
	r1 = r20
	// succ:  l0000E6B4
l0000E6B4:
	call fn00009760 (retsize: 0;)
	// succ:  l0000E6B8
l0000E6B8:
	branch r2 == r0 l0000E684
	goto l0000E6C8
	// succ:  l0000E6C8 l0000E684
l0000E6BC:
	branch r2 == r0 l0000E684
	// succ:  l0000E6C8 l0000E684
l0000E6C8:
	r2 = Mem0[r29 + 92<i32>:word32]
	r19 = r19 + 1<32>
	r24 = Mem0[r29 + 16<i32>:word32]
	r16 = Mem0[r29 + 88<i32>:word32]
	r4 = badva + 0xA<32>
	r22 = r19 + 0xFFFFFFFF<32>
	r1 = 0x8B<32>
	Mem0[r29 + 1<i32>:byte] = r2
	r2 = Mem0[r16 + 28<i32>:word32]
	Mem0[r29:word32] = r16
	call logmsg_function (retsize: 0;)
	r7 = Mem0[r29 + 128<i32>:word32]
	r17 = Mem0[r29 + 124<i32>:word32]
	r4 = badva + 0x3C<32>
	Mem0[r29 + 12<i32>:word32] = r17
	r2 = r24
	r1 = 0x8C<32>
	Mem0[r29 + 8<i32>:word32] = r7
	r3 = Mem0[r29 + 92<i32>:word64]
	Mem0[r29:word32] = r26
	Mem0[r29 + 4<i32>:word32] = r3
	call logmsg_function (retsize: 0;)
	r3 = Mem0[r29 + 32<i32>:word32]
	r25 = Mem0[r29 + 84<i32>:word32]
	r2 = r24
	r1 = 0x8D<32>
	Mem0[r29 + 12<i32>:word32] = r25
	r27 = Mem0[r29 + 100<i32>:word32]
	r4 = badva + 0x19<32>
	Mem0[r29 + 8<i32>:word32] = r3
	r7 = Mem0[r29 + 120<i32>:word64]
	Mem0[r29:word32] = r27
	Mem0[r29 + 4<i32>:word32] = r7
	call logmsg_function (retsize: 0;)
	Mem0[r29 + 4<i32>:word32] = r18
	r1 = 0x8E<32>
	r4 = badva + 0x11<32>
	Mem0[r29:word32] = r20
	r2 = r24
	call logmsg_function (retsize: 0;)
	r2 = r24
	r1 = 0x8F<32>
	r4 = badva + 9<32>
	Mem0[r29:byte] = r3
	r3 = Mem0[r16 + 32<i32>:byte]
	r16 = r24
	call logmsg_function (retsize: 0;)
	Mem0[r29 + 12<i32>:word32] = r27
	r24 = Mem0[r29 + 64<i32>:word32]
	r4 = badva + 0x3B<32>
	Mem0[r29:word32] = r26
	Mem0[r29 + 8<i32>:word32] = r24
	r1 = 0x90<32>
	Mem0[r29 + 4<i32>:word32] = r22
	r2 = r16
	call logmsg_function (retsize: 0;)
	p0 = r17 == r25
	r12 = r22
	branch p0 l0000E7DC
	// succ:  l0000E7BC l0000E7DC
l0000E7BC:
	r2 = r26 * r27
	r1 = 0x92<32>
	r3 = badva + 0x26<32>
	r2 = r16
	// succ:  l0000E7CC
l0000E7CC:
	call errlog_function (retsize: 0;)
	// succ:  l0000E7D0
l0000E7D0:
	r0 = 0xFFFFFFFF<32>
	goto l0000EAF0
	// succ:  l0000EAF0
l0000E7DC:
	Mem0[r29 + 24<i32>:word32] = r12
	r3 = Mem0[r29 + 104<i32>:word32]
	r4 = Mem0[r3 + 20<i32>:word32]
	r2 = r2 * r24
	r2 = r2 * r22
	branch r2 >u r4 l0000E814
	// succ:  l0000E7FC l0000E814
l0000E7FC:
	r2 = r2 << 2<32>
	Mem0[r29 + 4<i32>:word32] = r2
	r1 = 0x94<32>
	r3 = badva + 0x3F<32>
	Mem0[r29:word32] = r4
	r2 = r16
	goto l0000E7CC
	// succ:  l0000E7CC
l0000E814:
	branch r3 == 2<32> l0000E830
	// succ:  l0000E820 l0000E830
l0000E820:
	r3 = Mem0[r4:word32]
	r1 = 0x96<32>
	goto l0000E7D0
	// succ:  l0000E7D0
l0000E830:
	branch r3 == 2<32> l0000E858
	// succ:  l0000E840 l0000E858
l0000E840:
	r3 = Mem0[r4 + 12<i32>:word32]
	r27 = r18
	r1 = 0x97<32>
	goto l0000E7D0
	// succ:  l0000E7D0
l0000E858:
	Mem0[r3 + 12<i32>:word32] = r8
	Mem0[r3 + 24<i32>:word32] = r2
	Mem0[r3 + 8<i32>:word32] = r9
	Mem0[r3:word32] = r26
	r3 = Mem0[r29 + 76<i32>:word64]
	r2 = Mem0[r7 + 16<i32>:word32]
	Mem0[r7:word32] = 1<32>
	Mem0[r7 + 12<i32>:word32] = 1<32>
	Mem0[r7 + 8<i32>:word32] = 1<32>
	Mem0[r7 + 4<i32>:word32] = 1<32>
	Mem0[r7 + 24<i32>:word32] = 4<32>
	Mem0[r2:word32] = r4
	Mem0[r3:word32] = 1<32>
	r2 = Mem0[r3 + 16<i32>:word32]
	Mem0[r3 + 8<i32>:word32] = 1<32>
	Mem0[r3 + 4<i32>:word32] = 1<32>
	Mem0[r3 + 12<i32>:word32] = 1<32>
	r4 = Mem0[r29 + 68<i32>:word64]
	Mem0[r3 + 24<i32>:word32] = 4<32>
	Mem0[r2:word32] = r4
	branch p0 l0000EAC8
	// succ:  l0000E894 l0000EAC8
l0000E894:
	r6 = Mem0[r29 + 120<i32>:word64]
	r3 = Mem0[r29 + 92<i32>:word64]
	r2 = r20
	r5 = Mem0[r29 + 128<i32>:word32]
	r7 = Mem0[r29 + 32<i32>:word32]
	r3 = r3 + 0xFFFFFFFF<32>
	r18 = r7
	r4 = r7
	r5 = r5 + 0xFFFFFFFF<32>
	r2 = r6 + r2 * r3
	Mem0[r29 + 7<i32>:byte] = r5
	r5 = 0<32>
	r1 = r7 * r17
	r4 = r4 + r27 * r5
	r4 = r4 - r9
	r17 = r17 * r8
	Mem0[r29 + 27<i32>:byte] = r3
	r4 = r4 + (r4 >>u 0x1F<32>)
	r3 = r1 * r8
	Mem0[r29 + 12<i32>:byte] = r7
	r2 = r2 >> 1<32>
	r7 = r4 >> 1<32>
	// succ:  l0000E8F0
l0000E8F0:
	p0 = r12 > 0<32>
	branch p0 l0000EAAC
	// succ:  l0000E8F8 l0000EAAC
l0000E8F8:
	r3 = Mem0[r29 + 28<i32>:word64]
	r2 = Mem0[r29 + 92<i32>:word64]
	r6 = 0<32>
	Mem0[r29 + 116<i32>:word32] = r6
	r7 = Mem0[r29 + 24<i32>:word64]
	r2 = r3 * r2
	Mem0[r29 + 84<i32>:word32] = r2
	r5 = r3 * r7
	Mem0[r29 + 40<i32>:word32] = r5
	// succ:  l0000E914
l0000E914:
	Mem0[r29 + 44<i32>:word32] = r19
	p0 = r9 > 0<32>
	branch p0 l0000EA98
	// succ:  l0000E920 l0000EA98
l0000E920:
	r4 = Mem0[r29 + 116<i32>:word64]
	r2 = Mem0[r29 + 40<i32>:word64]
	r7 = 0<32>
	Mem0[r29 + 68<i32>:word32] = r7
	r3 = Mem0[r29 + 36<i32>:word64]
	r2 = r4 + r2
	r3 = r4 + r3
	r2 = r2 * r9
	Mem0[r29 + 60<i32>:word32] = r2
	Mem0[r29 + 88<i32>:word32] = r3
	// succ:  l0000E93C
l0000E93C:
	p0 = r8 > 0<32>
	branch p0 l0000EA80
	// succ:  l0000E944 l0000EA80
l0000E944:
	r2 = Mem0[r29 + 60<i32>:word64]
	r4 = Mem0[r29 + 68<i32>:word64]
	r5 = Mem0[r29 + 56<i32>:word64]
	r3 = Mem0[r29 + 48<i32>:word64]
	r2 = r4 + r2
	r3 = Mem0[r29 + 52<i32>:word64]
	r4 = 0<32>
	r19 = r4 + r3
	r2 = r2 * r8
	r2 = r3 + (r2 << 2<32>)
	// succ:  l0000E960
l0000E960:
	Mem0[r29 + 72<i32>:word32] = r2
	r2 = Mem0[r29 + 120<i32>:word64]
	r26 = 0<32>
	r25 = r5
	p0 = r2 > 0<32>
	r16 = 0<32>
	Mem0[r29 + 80<i32>:word32] = r5
	Mem0[r29 + 76<i32>:word32] = r4
	branch p0 l0000EA60
	// succ:  l0000E97C l0000EA60
l0000E97C:
	r2 = Mem0[r29 + 116<i32>:word64]
	r1 = r20
	r0 = r2 - r26
	call fn00009770 (retsize: 0;)
	// succ:  l0000E988
l0000E988:
	branch p0 l0000EA4C
	// succ:  l0000E98C l0000EA4C
l0000E98C:
	p0 = r0 == 0<32>
	r2 = Mem0[r29 + 88<i32>:word64]
	r1 = r20
	r0 = r2 - r26
	call fn00009750 (retsize: 0;)
	branch r0 > r2 l0000EA50
	// succ:  l0000E9A4 l0000EA50
l0000E9A4:
	r2 = Mem0[r29 + 92<i32>:word32]
	r20 = r25 + 0<32>
	r24 = 0<32>
	r3 = Mem0[r29 - 128<i32>:word32]
	r2 = Mem0[r29 + 84<i32>:word32]
	branch p0 l0000EA4C
	// succ:  l0000E9B8 l0000EA4C
l0000E9B8:
	p0 = r10 > 0<32>
	r2 = r0 + r2
	Mem0[r29 + 26<i32>:byte] = r2
	r2 = r2 * r3
	r1_r0 = r27_r22
	call fn00009770 (retsize: 0;)
	// succ:  l0000E9CC
l0000E9CC:
	r1_r0 = r27_r22
	branch p0 l0000EA40
	// succ:  l0000E9D8 l0000EA40
l0000E9D8:
	p0 = r0 == 0<32>
	call fn00009750 (retsize: 0;)
	branch r0 > r2 l0000EA44
	// succ:  l0000E9E8 l0000EA44
l0000E9E8:
	r2 = Mem0[r29 + 128<i32>:word32]
	r3 = Mem0[r29 + 124<i32>:word32]
	r8 = Mem0[r29 + 100<i32>:word32]
	branch p0 l0000EA40
	// succ:  l0000E9F4 l0000EA40
l0000E9F4:
	p0 = r3 > 0<32>
	r4 = Mem0[r29 + 96<i32>:word64]
	r2 = Mem0[r29 + 104<i32>:word64]
	p0 = r3 >u 1<32>
	r6 = r3 + 0xFFFFFFFF<32>
	r2 = r0 + r2
	__loop(0<i32>, 0x0000EA24<p32>, r6)
	r4 = Mem0[r20:byte]
	r3 = r20 + r8
	r2 = r4 + r2 * r3
	r2 = r2 + 1<i32>
	r5 = Mem0[r2:byte]
	r4 = r4 - r23
	r5 = r5 - r21
	branch p0 l0000EA3C
	// succ:  l0000EA24 l0000EA3C
l0000EA24:
	r2 = r2 + 1<i32>
	r7 = Mem0[r2:byte]
	r6 = Mem0[r3:byte]
	r3 = r3 + r8
	r16 = r16 + r4 * r5
	r5 = r7 - r21
	r4 = r6 - r23
	// succ:  l0000EA3C
l0000EA3C:
	r16 = r16 + r4 * r5
	// succ:  l0000EA40
l0000EA40:
	branch r24 == r18 l0000E9CC
	goto l0000EA50
	// succ:  l0000EA50 l0000E9CC
l0000EA44:
	branch r24 == r18 l0000E9CC
	goto l0000EA50
	// succ:  l0000EA50 l0000E9CC
l0000EA4C:
	r7 = Mem0[r29 + 120<i32>:word64]
	r2 = Mem0[r29 + 108<i32>:word64]
	// succ:  l0000EA50
l0000EA50:
	r24 = r24 + 1<32>
	branch r26 == r7 l0000E988
	goto l0000EA64
	// succ:  l0000EA64 l0000E988
l0000EA60:
	r5 = Mem0[r29 + 80<i32>:word64]
	r4 = Mem0[r29 + 76<i32>:word64]
	// succ:  l0000EA64
l0000EA64:
	r20 = Mem0[r29 + 112<i32>:word32]
	r26 = r26 + 1<32>
	r25 = r25 + r2
	r8 = Mem0[r29 + 100<i32>:word32]
	r2 = Mem0[r29 + 72<i32>:word32]
	r5 = r5 + 1<32>
	r4 = r4 + 1<32>
	Mem0[r2:word32] = r16
	r2 = r2 + 4<i32>
	p0 = r4 == r8
	branch p0 l0000E960
	// succ:  l0000EA80 l0000E960
l0000EA80:
	r9 = Mem0[r29 + 64<i32>:word32]
	r2 = Mem0[r29 + 68<i32>:word32]
	r2 = r2 + 1<32>
	Mem0[r29 + 68<i32>:word32] = r2
	p0 = r9 == r2
	branch p0 l0000E93C
	// succ:  l0000EA98 l0000E93C
l0000EA98:
	r19 = Mem0[r29 + 44<i32>:word64]
	r3 = Mem0[r29 + 116<i32>:word64]
	r3 = r3 + 1<32>
	r2 = r3 + 2<32>
	Mem0[r29 + 116<i32>:word32] = r3
	branch p0 l0000E914
	// succ:  l0000EAAC l0000E914
l0000EAAC:
	p0 = r2 == -1<i32>
	r26 = Mem0[r29 + 20<i32>:word32]
	r2 = Mem0[r29 + 28<i32>:word32]
	r12 = Mem0[r29 + 24<i32>:word32]
	r2 = r2 + 1<32>
	Mem0[r29 + 28<i32>:word32] = r2
	p0 = r2 == r26
	branch p0 l0000E8F0
	// succ:  l0000EAC8 l0000E8F0
l0000EAC8:
	Mem0[r29 + 12<i32>:word32] = r8
	r1 = 0xD3<32>
	r4 = badva + 0x2B<32>
	Mem0[r29 + 8<i32>:word32] = r9
	r2 = Mem0[r29 + 16<i32>:word32]
	Mem0[r29:word32] = r26
	Mem0[r29 + 4<i32>:word32] = r12
	call logmsg_function (retsize: 0;)
	r0 = 0<32>
	// succ:  l0000EAF0
l0000EAF0:
	r19_r18 = Mem0[r29 + 168<i32>:word64]
	r17_r16 = Mem0[r29 + 176<i32>:word64]
	r23_r22 = Mem0[r29 + 152<i32>:word64]
	r21_r20 = Mem0[r29 + 160<i32>:word64]
	r27_r26 = Mem0[r29 + 136<i32>:word64]
	r25_r24 = Mem0[r29 + 144<i32>:word64]
	v44 = r30
	r31 = Mem0[v44 + 4<i32>:word32]
	r30 = Mem0[v44:word32]
	r29 = v44 + 8<i32>
	return
	// succ:  deconv_execute_ref_exit
deconv_execute_ref_exit:


// deconv_check_ref
// Return size: 0
define deconv_check_ref
deconv_check_ref_entry:
	r29 = fp
	// succ:  l0000EB04
l0000EB04:
	v4 = r29 - 8<i32>
	Mem0[v4:word32] = r30
	Mem0[v4 + 4<i32>:word32] = r31
	r30 = v4
	r29 = v4 - 16<i32>
	Mem0[r29 + 496<i32>:word64] = r17_r16
	r4 = badva + 0x27<32>
	r17 = r0
	r16 = r1
	r1 = 0x202<32>
	Mem0[r29:word32] = r17
	r2 = r16
	call logmsg_function (retsize: 0;)
	branch r2 == 0xE<32> l0000EB44
	// succ:  l0000EB2C l0000EB44
l0000EB2C:
	r2 = Mem0[r17 + 16<i32>:word32]
	r2 = Mem0[r17 + 28<i32>:word32]
	r1 = 0x203<32>
	r3 = badva + 0x1B<32>
	Mem0[r29:word32] = r2
	goto l0000EB54
	// succ:  l0000EB54
l0000EB44:
	branch r2 == 6<32> l0000EB6C
	// succ:  l0000EB50 l0000EB6C
l0000EB50:
	r2 = Mem0[r17 + 20<i32>:word32]
	r3 = badva + 0x13<32>
	// succ:  l0000EB54
l0000EB54:
	r2 = r16
	call errlog_function (retsize: 0;)
	v16 = r30
	r31 = Mem0[v16 + 4<i32>:word32]
	r30 = Mem0[v16:word32]
	r29 = v16 + 8<i32>
	return
	// succ:  deconv_check_ref_exit
l0000EB6C:
	r2 = r16
	r1 = 0x205<32>
	Mem0[r29:word32] = r17
	call logmsg_function (retsize: 0;)
	r0 = 0<32>
	v17 = r30
	r31 = Mem0[v17 + 4<i32>:word32]
	r30 = Mem0[v17:word32]
	r29 = v17 + 8<i32>
	return
	// succ:  deconv_check_ref_exit
deconv_check_ref_exit:


// logmsg_function
// Return size: 0
define logmsg_function
logmsg_function_entry:
	r29 = fp
	// succ:  l0000EB84
l0000EB84:
	v4 = r29 - 8<i32>
	Mem0[v4:word32] = r30
	Mem0[v4 + 4<i32>:word32] = r31
	r30 = v4
	r29 = v4 - 8<i32>
	r3 = 2<32>
	branch r3 >u r5 l0000EBAC
	// succ:  l0000EB94 l0000EBAC
l0000EB94:
	r5 = Mem0[r2 + 16<i32>:word32]
	r5 = r29 + 0x10<32>
	r3 = 2<32>
	r0 = badva + 0x3F<32>
	Mem0[r29 + 1<i32>:byte] = r6
	r6 = r29 + 0x10<32>
	call logv (retsize: 0;)
	// succ:  l0000EBAC
l0000EBAC:
	// succ:  l0000EBAC_thunk_errlog_function
l0000EBAC_thunk_errlog_function:
	call errlog_function (retsize: 0;)
	return
	// succ:  logmsg_function_exit
logmsg_function_exit:


// errlog_function
// Return size: 0
define errlog_function
errlog_function_entry:
	r29 = fp
	// succ:  l0000EBB0
l0000EBB0:
	v4 = r29 - 8<i32>
	Mem0[v4:word32] = r30
	Mem0[v4 + 4<i32>:word32] = r31
	r30 = v4
	r29 = v4 - 8<i32>
	r4 = r3
	r0 = badva + 0x1F<32>
	Mem0[r29 + 1<i32>:byte] = r6
	r6 = r29 + 0x10<32>
	r5 = r29 + 0x10<32>
	r3 = 0<32>
	v13 = r30
	r31 = Mem0[v13 + 4<i32>:word32]
	r30 = Mem0[v13:word32]
	r29 = v13 + 8<i32>
	return
	// succ:  errlog_function_exit
errlog_function_exit:


// deconv_f_execute_ref
// Return size: 0
define deconv_f_execute_ref
deconv_f_execute_ref_entry:
	r29 = fp
	// succ:  l0000EBE0
l0000EBE0:
	v4 = r29 - 8<i32>
	Mem0[v4:word32] = r30
	Mem0[v4 + 4<i32>:word32] = r31
	r30 = v4
	r29 = v4 - 176<i32>
	Mem0[r29 + 472<i32>:word64] = r23_r22
	r22 = r0
	Mem0[r29 + 168<i32>:word64] = r17_r16
	r2 = Mem0[r22 + 4<i32>:word32]
	r17 = Mem0[r22 + 32<i32>:int8]
	Mem0[r29 + 160<i32>:word64] = r19_r18
	r3 = Mem0[r22 + 8<i32>:word32]
	r4 = Mem0[r2 + 8<i32>:word32]
	r16 = Mem0[r2:word32]
	p0 = r17 == 0<32>
	Mem0[r29 + 152<i32>:word64] = r21_r20
	r19 = Mem0[r2 + 4<i32>:word32]
	r21 = r1
	Mem0[r29 + 128<i32>:word64] = r27_r26
	Mem0[r29 + 136<i32>:word64] = r25_r24
	r0 = Mem0[r16 + 8<i32>:word32]
	r1 = p0
	r2 = Mem0[r19 + 8<i32>:word32]
	r24 = Mem0[r16:word32]
	r20 = Mem0[r3:word32]
	r7 = Mem0[r19 + 4<i32>:word32]
	r18 = Mem0[r4 + 8<i32>:word32]
	r26 = Mem0[r19 + 12<i32>:word32]
	Mem0[r29 + 88<i32>:word32] = r2
	r27 = Mem0[r4 + 4<i32>:word32]
	Mem0[r29 + 32<i32>:word32] = r7
	r2 = Mem0[r19:word32]
	r7 = Mem0[r16 + 4<i32>:word32]
	r6 = Mem0[r16 + 12<i32>:word32]
	Mem0[r29 + 120<i32>:word32] = r0
	Mem0[r29 + 80<i32>:word32] = r4
	Mem0[r29 + 116<i32>:word32] = r2
	Mem0[r29 + 20<i32>:word32] = r24
	Mem0[r29 + 92<i32>:word32] = r7
	Mem0[r29 + 100<i32>:word32] = r6
	Mem0[r29 + 104<i32>:word32] = r1
	branch p0 l0000EC74
	// succ:  l0000EC50 l0000EC74
l0000EC50:
	branch p0 l0000EC68
	// succ:  l0000EC54 l0000EC68
l0000EC54:
	p0 = r9 == 4<32>
	r23 = 0<32>
	branch p0 l0000EC80
	// succ:  l0000EC5C l0000EC80
l0000EC5C:
	p0 = r9 == 2<32>
	r2 = Mem0[r29 + 120<i32>:word64]
	r0 = r18
	goto l0000EC78
	// succ:  l0000EC78
l0000EC68:
	r3 = Mem0[r29 + 32<i32>:word64]
	r2 = Mem0[r29 + 120<i32>:word64]
	r2 = r2 - r3
	r0 = r2 + r18
	// succ:  l0000EC74
l0000EC74:
	r1 = r18
	call fn00009760 (retsize: 0;)
	goto l0000EC7C
	// succ:  l0000EC7C
l0000EC78:
	r1 = r18
	// succ:  l0000EC7C
l0000EC7C:
	r23 = r0
	// succ:  l0000EC80
l0000EC80:
	p0 = r17 == 2<32>
	Mem0[r29 + 28<i32>:byte] = r0
	branch p0 l0000ECC4
	// succ:  l0000EC94 l0000ECC4
l0000EC94:
	r0 = p0
	r2 = Mem0[r29 + 92<i32>:word32]
	r1 = r27 + 0<32>
	r1 = Mem0[r29 + 104<i32>:word64]
	r0 = 0<32>
	r0 = Mem0[r29 + 92<i32>:word32]
	r1 = r27 + 0<32>
	branch p0 l0000ECD8
	// succ:  l0000ECB0 l0000ECD8
l0000ECB0:
	p0 = r1
	goto l0000ECD0
	// succ:  l0000ECD0
l0000ECC4:
	r3 = Mem0[r29 + 92<i32>:word64]
	r2 = Mem0[r29 + 116<i32>:word64]
	r2 = r3 - r2
	r0 = r2 + r1
	// succ:  l0000ECD0
l0000ECD0:
	call fn00009760 (retsize: 0;)
	r7 = Mem0[r29 + 32<i32>:word64]
	r2 = Mem0[r20 + 16<i32>:word32]
	r25 = r0
	goto l0000ECDC
	// succ:  l0000ECDC
l0000ECD8:
	r7 = Mem0[r29 + 32<i32>:word64]
	r2 = Mem0[r20 + 16<i32>:word32]
	// succ:  l0000ECDC
l0000ECDC:
	Mem0[r29 + 84<i32>:word32] = r20
	r7 = Mem0[r16 + 16<i32>:word32]
	r16 = r18 + 0xFFFFFFFF<32>
	r20 = r18 - r7
	Mem0[r29 + 56<i32>:word32] = r2
	r2 = Mem0[r19 + 16<i32>:word32]
	Mem0[r29 + 96<i32>:word32] = r7
	Mem0[r29 + 52<i32>:word32] = r2
	r0 = Mem0[r29 + 112<i32>:word64]
	r3 = r23
	r0 = r20 + r3
	branch p0 l0000ED20
l0000ECF8:
	r0 = r20 + r3
	branch p0 l0000ED20
	// succ:  l0000ED00 l0000ED20
l0000ED00:
	p0 = r0
	r0 = r16 + r3
	branch p0 l0000ED1C
	// succ:  l0000ED08 l0000ED1C
l0000ED08:
	p0 = r9 == 2<32>
	r1 = Mem0[r29 + 104<i32>:word64]
	r0 = 0<32>
	r1_r0 = r18_r3
	branch p0 l0000ED30
	// succ:  l0000ED18 l0000ED30
l0000ED18:
	p0 = r1
	goto l0000ED20
	// succ:  l0000ED20
l0000ED1C:
	r1 = r18
	// succ:  l0000ED20
l0000ED20:
	r19 = r3
	call fn00009760 (retsize: 0;)
	r3 = r19
	branch r2 == r0 l0000ECF8
	goto l0000ED3C
	// succ:  l0000ED3C l0000ECF8
l0000ED30:
	branch r2 == r0 l0000ECF8
	// succ:  l0000ED3C l0000ECF8
l0000ED3C:
	r2 = Mem0[r29 + 120<i32>:word32]
	r23 = r3 + 1<32>
	r2 = Mem0[r29 + 116<i32>:word64]
	r23 = r3
	r20 = r25
	Mem0[r29 + 108<i32>:word32] = r19
	r16 = r19 - r2
	r0 = Mem0[r29 + 112<i32>:word32]
	r1_r0 = r19_r20
	branch p0 l0000ED80
l0000ED54:
	r1_r0 = r19_r20
	branch p0 l0000ED80
	// succ:  l0000ED5C l0000ED80
l0000ED5C:
	p0 = r0
	branch p0 l0000ED74
	// succ:  l0000ED60 l0000ED74
l0000ED60:
	p0 = r9 == 2<32>
	r1 = Mem0[r29 + 104<i32>:word64]
	r0 = 0<32>
	r1_r0 = r19_r20
	branch p0 l0000ED8C
	// succ:  l0000ED70 l0000ED8C
l0000ED70:
	p0 = r1
	goto l0000ED84
	// succ:  l0000ED84
l0000ED74:
	goto l0000ED88
	// succ:  l0000ED88
l0000ED80:
	r1 = r19
	// succ:  l0000ED84
l0000ED84:
	call fn00009760 (retsize: 0;)
	// succ:  l0000ED88
l0000ED88:
	branch r2 == r0 l0000ED54
	goto l0000ED98
	// succ:  l0000ED98 l0000ED54
l0000ED8C:
	branch r2 == r0 l0000ED54
	// succ:  l0000ED98 l0000ED54
l0000ED98:
	r2 = Mem0[r29 + 92<i32>:word32]
	r20 = r20 + 1<32>
	r2 = Mem0[r22 + 28<i32>:word32]
	r4 = badva + 7<32>
	Mem0[r29 + 4<i32>:word32] = r2
	r1 = 0x76<32>
	r17 = r20
	r2 = r21
	Mem0[r29:word32] = r22
	Mem0[r29 + 24<i32>:word32] = r17
	call logmsg_function (retsize: 0;)
	r7 = Mem0[r29 + 120<i32>:word32]
	r25 = Mem0[r29 + 100<i32>:word32]
	r1 = 0x77<32>
	Mem0[r29:word32] = r24
	Mem0[r29 + 12<i32>:word32] = r25
	r4 = badva + 0x39<32>
	Mem0[r29 + 8<i32>:word32] = r7
	r3 = Mem0[r29 + 92<i32>:word64]
	r2 = r21
	Mem0[r29 + 4<i32>:word32] = r3
	call logmsg_function (retsize: 0;)
	r7 = Mem0[r29 + 32<i32>:word32]
	r27 = Mem0[r29 + 88<i32>:word32]
	r1 = 0x78<32>
	Mem0[r29:word32] = r26
	Mem0[r29 + 12<i32>:word32] = r27
	r4 = badva + 0x26<32>
	Mem0[r29 + 8<i32>:word32] = r7
	r3 = Mem0[r29 + 116<i32>:word64]
	r2 = r21
	Mem0[r29 + 4<i32>:word32] = r3
	call logmsg_function (retsize: 0;)
	Mem0[r29 + 4<i32>:word32] = r18
	r1 = 0x79<32>
	r4 = badva + 0x1E<32>
	Mem0[r29:word32] = r19
	r2 = r21
	call logmsg_function (retsize: 0;)
	r2 = r21
	r1 = 0x7A<32>
	r4 = badva + 0x1A<32>
	Mem0[r29:byte] = r3
	r3 = Mem0[r22 + 32<i32>:byte]
	r16 = r25
	call logmsg_function (retsize: 0;)
	Mem0[r29 + 12<i32>:word32] = r26
	r1 = 0x7B<32>
	r4 = badva + 0xC<32>
	Mem0[r29:word32] = r24
	r2 = r21
	Mem0[r29 + 4<i32>:word32] = r17
	Mem0[r29 + 8<i32>:word32] = r23
	call logmsg_function (retsize: 0;)
	r1 = 0x7D<32>
	p0 = r16 == r27
	branch p0 l0000EE90
	// succ:  l0000EE74 l0000EE90
l0000EE74:
	r2 = r24 * r26
	r3 = badva + 0x3B<32>
	r2 = r21
	// succ:  l0000EE80
l0000EE80:
	call errlog_function (retsize: 0;)
	// succ:  l0000EE84
l0000EE84:
	r0 = 0xFFFFFFFF<32>
	goto l0000F148
	// succ:  l0000F148
l0000EE90:
	Mem0[r29 + 16<i32>:byte] = r7
	r3 = Mem0[r29 + 84<i32>:word32]
	r4 = Mem0[r3 + 20<i32>:word32]
	r2 = r2 * r17
	branch r2 >u r4 l0000EEC8
	// succ:  l0000EEB0 l0000EEC8
l0000EEB0:
	r2 = r2 << 2<32>
	Mem0[r29 + 4<i32>:word32] = r2
	r1 = 0x7F<32>
	r3 = badva + 0x18<32>
	Mem0[r29:word32] = r4
	r2 = r21
	goto l0000EE80
	// succ:  l0000EE80
l0000EEC8:
	branch r3 == 2<32> l0000EEE4
	// succ:  l0000EED4 l0000EEE4
l0000EED4:
	r3 = Mem0[r4:word32]
	r1 = 0x81<32>
	goto l0000EE84
	// succ:  l0000EE84
l0000EEE4:
	branch r3 == 2<32> l0000EF04
	// succ:  l0000EEF0 l0000EF04
l0000EEF0:
	r3 = Mem0[r4 + 12<i32>:word32]
	r1 = 0x82<32>
	goto l0000EE84
	// succ:  l0000EE84
l0000EF04:
	Mem0[r3 + 8<i32>:word32] = r7
	Mem0[r3:word32] = r24
	Mem0[r3 + 12<i32>:word32] = r26
	branch p0 l0000F124
	// succ:  l0000EF14 l0000F124
l0000EF14:
	r6 = Mem0[r29 + 116<i32>:word64]
	r3 = Mem0[r29 + 92<i32>:word64]
	r2 = r19
	r23 = r16 * r26
	r5 = Mem0[r29 + 120<i32>:word32]
	r27 = Mem0[r29 + 32<i32>:word32]
	r3 = r3 + 0xFFFFFFFF<32>
	r5 = r5 + 0xFFFFFFFF<32>
	r4 = r27
	r1 = r27 * r16
	r2 = r6 + r2 * r3
	Mem0[r29 + 7<i32>:byte] = r5
	r5 = 0<32>
	r2 = r2 + (0x41<32> - r20)
	r4 = r4 + r18 * r5
	r4 = r4 - r7
	Mem0[r29 + 26<i32>:byte] = r3
	r4 = r4 + (r4 >>u 0x1F<32>)
	r3 = r1 * r26
	Mem0[r29 + 12<i32>:byte] = r6
	r2 = r2 >> 1<32>
	// succ:  l0000EF70
l0000EF70:
	branch p0 l0000F10C
	// succ:  l0000EF74 l0000F10C
l0000EF74:
	p0 = r9 > 1<32>
	r3 = Mem0[r29 + 28<i32>:word64]
	r2 = Mem0[r29 + 92<i32>:word64]
	r5 = 0<32>
	Mem0[r29 + 112<i32>:word32] = r5
	r6 = Mem0[r29 + 24<i32>:word64]
	r2 = r3 * r2
	Mem0[r29 + 84<i32>:word32] = r2
	r4 = r3 * r6
	Mem0[r29 + 40<i32>:word32] = r4
	// succ:  l0000EF90
l0000EF90:
	Mem0[r29 + 44<i32>:word32] = r20
	branch p0 l0000F0F8
	// succ:  l0000EF98 l0000F0F8
l0000EF98:
	p0 = r7 > 1<32>
	r4 = Mem0[r29 + 112<i32>:word64]
	r2 = Mem0[r29 + 40<i32>:word64]
	r6 = 0<32>
	Mem0[r29 + 68<i32>:word32] = r6
	r3 = Mem0[r29 + 36<i32>:word64]
	r2 = r4 + r2
	r3 = r4 + r3
	r2 = r2 * r7
	Mem0[r29 + 60<i32>:word32] = r2
	Mem0[r29 + 88<i32>:word32] = r3
	// succ:  l0000EFB4
l0000EFB4:
	p0 = r26 > 0<32>
	branch p0 l0000F0E8
	// succ:  l0000EFBC l0000F0E8
l0000EFBC:
	r2 = Mem0[r29 + 60<i32>:word64]
	r4 = Mem0[r29 + 68<i32>:word64]
	r5 = Mem0[r29 + 52<i32>:word64]
	r3 = Mem0[r29 + 48<i32>:word64]
	r2 = r4 + r2
	r3 = Mem0[r29 + 56<i32>:word64]
	r4 = 0<32>
	r20 = r4 + r3
	r2 = r2 * r26
	r2 = r3 + (r2 << 2<32>)
	// succ:  l0000EFD8
l0000EFD8:
	Mem0[r29 + 72<i32>:word32] = r2
	r2 = Mem0[r29 + 116<i32>:word64]
	r24 = 0<32>
	r17 = r5
	r21 = 0<32>
	p0 = r2 > 0<32>
	Mem0[r29 + 80<i32>:word32] = r5
	Mem0[r29 + 76<i32>:word32] = r4
	branch p0 l0000F0CC
	// succ:  l0000EFF4 l0000F0CC
l0000EFF4:
	r2 = Mem0[r29 + 112<i32>:word64]
	r1 = r19
	r0 = r2 - r21
	call fn00009770 (retsize: 0;)
	// succ:  l0000EFFC
l0000EFFC:
	branch p0 l0000F0B8
	// succ:  l0000F004 l0000F0B8
l0000F004:
	p0 = r0 == 0<32>
	r2 = Mem0[r29 + 88<i32>:word64]
	r1 = r19
	r0 = r2 - r21
	call fn00009750 (retsize: 0;)
	branch r0 > r2 l0000F0BC
	// succ:  l0000F01C l0000F0BC
l0000F01C:
	r2 = Mem0[r29 + 92<i32>:word32]
	r25 = 0<32>
	p0 = r27 > 0<32>
	branch p0 l0000F0B8
	// succ:  l0000F028 l0000F0B8
l0000F028:
	r3 = Mem0[r29 + 120<i32>:word64]
	r2 = Mem0[r29 + 84<i32>:word64]
	r19 = r17
	r2 = r0 + r2
	Mem0[r29 + 25<i32>:byte] = r2
	r2 = r2 * r3
	r1_r0 = r18_r22
	call fn00009770 (retsize: 0;)
	// succ:  l0000F044
l0000F044:
	r1_r0 = r18_r22
	branch p0 l0000F0AC
	// succ:  l0000F050 l0000F0AC
l0000F050:
	p0 = r0 == 0<32>
	call fn00009750 (retsize: 0;)
	branch r0 > r2 l0000F0B0
	// succ:  l0000F060 l0000F0B0
l0000F060:
	r2 = Mem0[r29 + 120<i32>:word32]
	branch p0 l0000F0B0
	// succ:  l0000F068 l0000F0B0
l0000F068:
	p0 = r8 > 0<32>
	r4 = r19 + (r26 << 2<32>)
	r3 = Mem0[r29 + 96<i32>:word64]
	r2 = Mem0[r29 + 100<i32>:word64]
	p0 = r16 >u 1<32>
	r6 = r16 + 0xFFFFFFFF<32>
	r2 = r0 + r2
	__loop(0<i32>, 0x0000F094<p32>, r6)
	r2 = r2 * r16
	r3 = Mem0[r19:word32]
	r2 = r3 + (r2 << 2<32>)
	r2 = Mem0[r2:word32]
	r5 = r2 + 4<32>
	branch p0 l0000F0A8
	// succ:  l0000F094 l0000F0A8
l0000F094:
	r3 = Mem0[r4:word32]
	r2 = Mem0[r5:word32]
	r4 = r4 + (r26 << 2<32>)
	r5 = r5 + 4<32>
	// succ:  l0000F0A8
l0000F0A8:
	// succ:  l0000F0AC
l0000F0AC:
	branch r25 == r27 l0000F044
	goto l0000F0BC
	// succ:  l0000F0BC l0000F044
l0000F0B0:
	branch r25 == r27 l0000F044
	goto l0000F0BC
	// succ:  l0000F0BC l0000F044
l0000F0B8:
	r7 = Mem0[r29 + 116<i32>:word64]
	r2 = Mem0[r29 + 104<i32>:word64]
	// succ:  l0000F0BC
l0000F0BC:
	r25 = r25 + 1<32>
	r19 = Mem0[r29 + 108<i32>:word32]
	branch r21 == r7 l0000EFFC
	goto l0000F0D0
	// succ:  l0000F0D0 l0000EFFC
l0000F0CC:
	r4 = Mem0[r29 + 76<i32>:word64]
	r2 = Mem0[r29 + 72<i32>:word64]
	// succ:  l0000F0D0
l0000F0D0:
	r21 = r21 + 1<32>
	r17 = r17 + (r2 << 2<32>)
	r5 = Mem0[r29 + 80<i32>:word64]
	r4 = r4
	Mem0[r2:word32] = r24
	p0 = r4 == r26
	r2 = r2 + 4<32>
	r5 = r5 + 4<32>
	branch p0 l0000EFD8
	// succ:  l0000F0E8 l0000EFD8
l0000F0E8:
	r7 = Mem0[r29 + 64<i32>:word64]
	r2 = Mem0[r29 + 68<i32>:word64]
	r2 = r2 + 1<32>
	Mem0[r29 + 68<i32>:word32] = r2
	branch p0 l0000EFB4
	// succ:  l0000F0F8 l0000EFB4
l0000F0F8:
	p0 = r7 == -1<i32>
	r20 = Mem0[r29 + 44<i32>:word64]
	r3 = Mem0[r29 + 112<i32>:word64]
	r3 = r3 + 1<32>
	r2 = r3 + 2<32>
	Mem0[r29 + 112<i32>:word32] = r3
	branch p0 l0000EF90
	// succ:  l0000F10C l0000EF90
l0000F10C:
	p0 = r2 == -1<i32>
	r24 = Mem0[r29 + 20<i32>:word32]
	r2 = Mem0[r29 + 28<i32>:word32]
	r17 = Mem0[r29 + 24<i32>:word64]
	r2 = r2
	Mem0[r29 + 28<i32>:word32] = r2
	p0 = r2 == r24
	branch p0 l0000EF70
	// succ:  l0000F124 l0000EF70
l0000F124:
	Mem0[r29 + 12<i32>:word32] = r26
	r1 = 0xB3<32>
	r4 = badva + 0x1C<32>
	Mem0[r29:word32] = r24
	r2 = Mem0[r29 + 16<i32>:word32]
	Mem0[r29 + 4<i32>:word32] = r17
	Mem0[r29 + 8<i32>:word32] = r7
	call logmsg_function (retsize: 0;)
	r0 = 0<32>
	// succ:  l0000F148
l0000F148:
	r19_r18 = Mem0[r29 + 160<i32>:word64]
	r17_r16 = Mem0[r29 + 168<i32>:word64]
	r23_r22 = Mem0[r29 + 144<i32>:word64]
	r21_r20 = Mem0[r29 + 152<i32>:word64]
	r27_r26 = Mem0[r29 + 128<i32>:word64]
	r25_r24 = Mem0[r29 + 136<i32>:word64]
	v38 = r30
	r31 = Mem0[v38 + 4<i32>:word32]
	r30 = Mem0[v38:word32]
	r29 = v38 + 8<i32>
	return
	// succ:  deconv_f_execute_ref_exit
deconv_f_execute_ref_exit:


// deconv_check_ref
// Return size: 0
define deconv_check_ref
deconv_check_ref_entry:
	r29 = fp
	// succ:  l0000F160
l0000F160:
	v4 = r29 - 8<i32>
	Mem0[v4:word32] = r30
	Mem0[v4 + 4<i32>:word32] = r31
	r30 = v4
	r29 = v4 - 16<i32>
	Mem0[r29 + 496<i32>:word64] = r17_r16
	r4 = badva + 0x18<32>
	r17 = r0
	r16 = r1
	r1 = 0xBA<32>
	Mem0[r29:word32] = r17
	r2 = r16
	call logmsg_function (retsize: 0;)
	branch r2 == 6<32> l0000F1A0
	// succ:  l0000F188 l0000F1A0
l0000F188:
	r2 = Mem0[r17 + 16<i32>:word32]
	r2 = Mem0[r17 + 28<i32>:word32]
	r1 = 0xBB<32>
	r3 = badva + 0xC<32>
	Mem0[r29:word32] = r2
	goto l0000F1B0
	// succ:  l0000F1B0
l0000F1A0:
	branch r2 == 2<32> l0000F1C8
	// succ:  l0000F1AC l0000F1C8
l0000F1AC:
	r2 = Mem0[r17 + 20<i32>:word32]
	r3 = badva + 4<32>
	// succ:  l0000F1B0
l0000F1B0:
	r2 = r16
	call errlog_function (retsize: 0;)
	v16 = r30
	r31 = Mem0[v16 + 4<i32>:word32]
	r30 = Mem0[v16:word32]
	r29 = v16 + 8<i32>
	return
	// succ:  deconv_check_ref_exit
l0000F1C8:
	r2 = r16
	r1 = 0xBD<32>
	Mem0[r29:word32] = r17
	call logmsg_function (retsize: 0;)
	r0 = 0<32>
	v17 = r30
	r31 = Mem0[v17 + 4<i32>:word32]
	r30 = Mem0[v17:word32]
	r29 = v17 + 8<i32>
	return
	// succ:  deconv_check_ref_exit
deconv_check_ref_exit:


// logmsg_function
// Return size: 0
define logmsg_function
logmsg_function_entry:
	r29 = fp
	// succ:  l0000F1E0
l0000F1E0:
	v4 = r29 - 8<i32>
	Mem0[v4:word32] = r30
	Mem0[v4 + 4<i32>:word32] = r31
	r30 = v4
	r29 = v4 - 8<i32>
	r3 = 2<32>
	branch r3 >u r5 l0000F1E4_thunk_errlog_function
	goto l0000F1F0
	// succ:  l0000F1F0 l0000F1E4_thunk_errlog_function
l0000F1E4_thunk_errlog_function:
	call errlog_function (retsize: 0;)
	return
	// succ:  logmsg_function_exit
l0000F1F0:
	r5 = Mem0[r2 + 16<i32>:word32]
	r5 = r29 + 0x10<32>
	r3 = 2<32>
	r0 = badva + 0x2E<32>
	Mem0[r29 + 1<i32>:byte] = r6
	r6 = r29 + 0x10<32>
	call logv (retsize: 0;)
	// succ:  l0000F1F8_thunk_errlog_function
l0000F1F8_thunk_errlog_function:
	call errlog_function (retsize: 0;)
	return
	// succ:  logmsg_function_exit
logmsg_function_exit:


// errlog_function
// Return size: 0
define errlog_function
errlog_function_entry:
	r29 = fp
	// succ:  l0000F208
l0000F208:
	v4 = r29 - 8<i32>
	Mem0[v4:word32] = r30
	Mem0[v4 + 4<i32>:word32] = r31
	r30 = v4
	r29 = v4 - 8<i32>
	r4 = r3
	r0 = badva + 0x12<32>
	Mem0[r29 + 1<i32>:byte] = r6
	r6 = r29 + 0x10<32>
	r5 = r29 + 0x10<32>
	r3 = 0<32>
	v13 = r30
	r31 = Mem0[v13 + 4<i32>:word32]
	r30 = Mem0[v13:word32]
	r29 = v13 + 8<i32>
	return
	// succ:  errlog_function_exit
errlog_function_exit:


// logsoftmax_execute
// Return size: 0
define logsoftmax_execute
logsoftmax_execute_entry:
	r29 = fp
	// succ:  l0000F230
l0000F230:
	v4 = r29 - 8<i32>
	Mem0[v4:word32] = r30
	Mem0[v4 + 4<i32>:word32] = r31
	r30 = v4
	r29 = v4 - 72<i32>
	r3 = Mem0[r0 + 4<i32>:word32]
	r2 = Mem0[r0 + 8<i32>:word32]
	Mem0[r29 + 64<i32>:word64] = r17_r16
	Mem0[r29 + 56<i32>:word64] = r19_r18
	r19 = Mem0[r3:word32]
	r5 = Mem0[r2:word32]
	r2 = r1
	Mem0[r29 + 40<i32>:word64] = r23_r22
	Mem0[r29 + 48<i32>:word64] = r21_r20
	r4 = Mem0[r19 + 24<i32>:word32]
	r7 = Mem0[r5 + 20<i32>:word32]
	Mem0[r29 + 24<i32>:word64] = r27_r26
	Mem0[r29 + 32<i32>:word64] = r25_r24
	r26 = 0<32>
	p0 = r4 >u r7
	r1 = 0x39<32>
	branch p0 l0000F3AC
	// succ:  l0000F264 l0000F3AC
l0000F264:
	r2 = Mem0[r19 + 4<i32>:word32]
	r4 = Mem0[r19:word32]
	Mem0[r29 + 8<i32>:word32] = r2
	r3 = Mem0[r19 + 8<i32>:word32]
	r2 = r2 * r4
	r22 = Mem0[r19 + 12<i32>:word32]
	Mem0[r29:word32] = r4
	Mem0[r29 + 12<i32>:word32] = r5
	Mem0[r29 + 4<i32>:word32] = r3
	branch r24 > 1<32> l0000F384
	// succ:  l0000F28C l0000F384
l0000F28C:
	r25 = Mem0[r19 + 16<i32>:word32]
	r24 = r2 * r3
	r2 = Mem0[r29 + 12<i32>:word64]
	r16 = 0<32>
	r27 = Mem0[r2 + 16<i32>:word32]
	r2 = Mem0[r25:word32]
	p0 = r22 > 0<32>
	// succ:  l0000F29C
l0000F29C:
	Mem0[r29 + 4<i32>:byte] = r0
	branch p0 l0000F300
	// succ:  l0000F2AC l0000F300
l0000F2AC:
	r0 = p0
	r21 = r2
	r4 = r2
	r3 = r20
	r5 = r3 + 4<32>
	// succ:  l0000F2C8
l0000F2C8:
	r0 = Mem0[r29 + 16<i32>:word64]
	r18 = r20
	r17 = r16
	r23 = r22
	branch p0 l0000F300
	// succ:  l0000F2DC l0000F300
l0000F2DC:
	p0 = r0
	call fn00009784 (retsize: 0;)
	branch r23 == 0<32> l0000F314
	// succ:  l0000F2F8 l0000F314
l0000F2F8:
	r23 = r23 + 0xFFFFFFFF<32>
	r3 = r18 + 4<32>
	goto l0000F2DC
	// succ:  l0000F2DC
l0000F300:
	r0 = r16
	goto l0000F368
	// succ:  l0000F368
l0000F314:
	branch p0 l0000F36C
	// succ:  l0000F31C l0000F36C
l0000F31C:
	p0 = r2
	r5 = r22
	r3 = 0<32>
	p0 = r22 >u 1<32>
	r3 = r27 + r3
	r2 = r3 + 4<32>
	r4 = r25 + r3
	__loop(0<i32>, 0x0000F340<p32>, r5)
	r4 = Mem0[r4:word32]
	branch p0 l0000F364
	// succ:  l0000F340 l0000F364
l0000F340:
	r7 = Mem0[r5:word32]
	r2 = r6
	// succ:  l0000F364
l0000F364:
	goto l0000F36C
	// succ:  l0000F36C
l0000F368:
	r20 = r20 + (r22 << 2<32>)
	r27 = r27 + (r22 << 2<32>)
	goto l0000F370
	// succ:  l0000F370
l0000F36C:
	r20 = r20 + (r22 << 2<32>)
	// succ:  l0000F370
l0000F370:
	branch r26 == r24 l0000F29C
	// succ:  l0000F380 l0000F29C
l0000F380:
	r26 = r26 + 1<32>
	r25 = r25 + (r22 << 2<32>)
	r2 = Mem0[r29:word64]
	r3 = Mem0[r29 + 12<i32>:word64]
	// succ:  l0000F384
l0000F384:
	r6 = Mem0[r29 + 8<i32>:word64]
	r7 = Mem0[r29 + 4<i32>:word64]
	Mem0[r3:word32] = r2
	Mem0[r3 + 8<i32>:word32] = r7
	Mem0[r3 + 4<i32>:word32] = r6
	Mem0[r3 + 12<i32>:word32] = r22
	r2 = Mem0[r19 + 24<i32>:word32]
	Mem0[r3 + 24<i32>:word32] = r2
	// succ:  l0000F398
l0000F398:
	r19_r18 = Mem0[r29 + 56<i32>:word64]
	r17_r16 = Mem0[r29 + 64<i32>:word64]
	r23_r22 = Mem0[r29 + 40<i32>:word64]
	r21_r20 = Mem0[r29 + 48<i32>:word64]
	r27_r26 = Mem0[r29 + 24<i32>:word64]
	r25_r24 = Mem0[r29 + 32<i32>:word64]
	v35 = r30
	r31 = Mem0[v35 + 4<i32>:word32]
	r30 = Mem0[v35:word32]
	r29 = v35 + 8<i32>
	return
	// succ:  logsoftmax_execute_exit
l0000F3AC:
	call fn0000F468 (retsize: 0;)
	r3 = badva + 0x24<32>
	r0 = 0xFFFFFFFF<32>
	goto l0000F398
	// succ:  l0000F398
logsoftmax_execute_exit:


// logsoftmax_check
// Return size: 0
define logsoftmax_check
logsoftmax_check_entry:
	r29 = fp
	// succ:  l0000F3C0
l0000F3C0:
	v4 = r29 - 8<i32>
	Mem0[v4:word32] = r30
	Mem0[v4 + 4<i32>:word32] = r31
	r30 = v4
	r29 = v4 - 16<i32>
	Mem0[r29 + 496<i32>:word64] = r17_r16
	r4 = badva + 9<32>
	r17 = r0
	r16 = r1
	r1 = 0x53<32>
	Mem0[r29:word32] = r17
	r2 = r16
	call logmsg_function (retsize: 0;)
	branch r2 == 2<32> l0000F408
	// succ:  l0000F3EC l0000F408
l0000F3EC:
	r2 = Mem0[r17 + 16<i32>:word32]
	r1 = 0x54<32>
	r3 = badva + 0x3D<32>
	r2 = r16
	call errlog_function (retsize: 0;)
	// succ:  l0000F3F8
l0000F3F8:
	v16 = r30
	r31 = Mem0[v16 + 4<i32>:word32]
	r30 = Mem0[v16:word32]
	r29 = v16 + 8<i32>
	return
	// succ:  logsoftmax_check_exit
l0000F408:
	branch r2 == 2<32> l0000F420
	// succ:  l0000F410 l0000F420
l0000F410:
	goto l0000F3F8
	// succ:  l0000F3F8
l0000F420:
	r2 = r16
	r1 = 0x56<32>
	Mem0[r29:word32] = r17
	call logmsg_function (retsize: 0;)
	r0 = 0<32>
	v17 = r30
	r31 = Mem0[v17 + 4<i32>:word32]
	r30 = Mem0[v17:word32]
	r29 = v17 + 8<i32>
	return
	// succ:  logsoftmax_check_exit
logsoftmax_check_exit:


// logmsg_function
// Return size: 0
define logmsg_function
logmsg_function_entry:
	r29 = fp
	// succ:  l0000F438
l0000F438:
	v4 = r29 - 8<i32>
	Mem0[v4:word32] = r30
	Mem0[v4 + 4<i32>:word32] = r31
	r30 = v4
	r29 = v4 - 8<i32>
	r3 = 2<32>
	branch r3 >u r5 l0000F43C_thunk_errlog_function
	goto l0000F448
	// succ:  l0000F448 l0000F43C_thunk_errlog_function
l0000F43C_thunk_errlog_function:
	call errlog_function (retsize: 0;)
	return
	// succ:  logmsg_function_exit
l0000F448:
	r5 = Mem0[r2 + 16<i32>:word32]
	r5 = r29 + 0x10<32>
	r3 = 2<32>
	r0 = badva + 0x25<32>
	Mem0[r29 + 1<i32>:byte] = r6
	r6 = r29 + 0x10<32>
	call logv (retsize: 0;)
	// succ:  l0000F450_thunk_errlog_function
l0000F450_thunk_errlog_function:
	call errlog_function (retsize: 0;)
	return
	// succ:  logmsg_function_exit
logmsg_function_exit:


// errlog_function
// Return size: 0
define errlog_function
errlog_function_entry:
	r29 = fp
	// succ:  l0000F460
l0000F460:
	v4 = r29 - 8<i32>
	Mem0[v4:word32] = r30
	Mem0[v4 + 4<i32>:word32] = r31
	r30 = v4
	r29 = v4 - 8<i32>
	r4 = r3
	r0 = badva + 9<32>
	Mem0[r29 + 1<i32>:byte] = r6
	r6 = r29 + 0x10<32>
	r5 = r29 + 0x10<32>
	r3 = 0<32>
	v13 = r30
	r31 = Mem0[v13 + 4<i32>:word32]
	r30 = Mem0[v13:word32]
	r29 = v13 + 8<i32>
	return
	// succ:  errlog_function_exit
errlog_function_exit:


// fn0000F468
// Return size: 0
define fn0000F468
fn0000F468_entry:
	r29 = fp
	// succ:  l0000F468
l0000F468:
	v4 = r29 - 8<i32>
	Mem0[v4:word32] = r30
	Mem0[v4 + 4<i32>:word32] = r31
	r30 = v4
	r29 = v4 - 8<i32>
	r4 = r3
	Mem0[r29 + 1<i32>:byte] = r6
	r6 = r29 + 0x10<32>
	r5 = r29 + 0x10<32>
	r3 = 0<32>
	v11 = r30
	r31 = Mem0[v11 + 4<i32>:word32]
	r30 = Mem0[v11:word32]
	r29 = v11 + 8<i32>
	return
	// succ:  fn0000F468_exit
fn0000F468_exit:


// expanddims_execute
// Return size: 0
define expanddims_execute
expanddims_execute_entry:
	r29 = fp
	// succ:  l0000F490
l0000F490:
	v4 = r29 - 8<i32>
	Mem0[v4:word32] = r30
	Mem0[v4 + 4<i32>:word32] = r31
	r30 = v4
	r29 = v4 - 0<i32>
	r2 = Mem0[r0 + 4<i32>:word32]
	r4 = Mem0[r0 + 8<i32>:word32]
	r4 = Mem0[r4:word32]
	r3 = Mem0[r2:word32]
	r5 = Mem0[r3 + 4<i32>:word32]
	r7 = Mem0[r3:word32]
	Mem0[r4:word32] = r7
	Mem0[r4 + 4<i32>:word32] = r5
	r0 = Mem0[r3 + 12<i32>:word32]
	r2 = Mem0[r3 + 8<i32>:word32]
	Mem0[r4 + 12<i32>:word32] = r0
	Mem0[r4 + 8<i32>:word32] = r2
	r2 = r1
	r5 = Mem0[r3 + 24<i32>:word32]
	branch r5 >u r6 l0000F4D0
	// succ:  l0000F4C0 l0000F4D0
l0000F4C0:
	r6 = Mem0[r4 + 20<i32>:word32]
	r1 = Mem0[r3 + 16<i32>:word32]
	r2 = Mem0[r3 + 24<i32>:word32]
	call fn00009560 (retsize: 0;)
	v15 = r30
	r31 = Mem0[v15 + 4<i32>:word32]
	r30 = Mem0[v15:word32]
	r29 = v15 + 8<i32>
	return
	// succ:  expanddims_execute_exit
l0000F4D0:
	r1 = 0x30<32>
	call fn0000F588 (retsize: 0;)
	r3 = badva + 0xB<32>
	v17 = r30
	r31 = Mem0[v17 + 4<i32>:word32]
	r30 = Mem0[v17:word32]
	r29 = v17 + 8<i32>
	return
	// succ:  expanddims_execute_exit
expanddims_execute_exit:


// expanddims_check
// Return size: 0
define expanddims_check
expanddims_check_entry:
	r29 = fp
	// succ:  l0000F4E0
l0000F4E0:
	v4 = r29 - 8<i32>
	Mem0[v4:word32] = r30
	Mem0[v4 + 4<i32>:word32] = r31
	r30 = v4
	r29 = v4 - 16<i32>
	Mem0[r29 + 496<i32>:word64] = r17_r16
	r4 = badva + 0x1E<32>
	r17 = r0
	r16 = r1
	r1 = 0x37<32>
	Mem0[r29:word32] = r17
	r2 = r16
	call logmsg_function (retsize: 0;)
	r2 = Mem0[r17 + 16<i32>:word32]
	branch r3 >u r2 l0000F528
	// succ:  l0000F50C l0000F528
l0000F50C:
	r3 = 4<32>
	r1 = 0x38<32>
	r3 = badva + 0x13<32>
	r2 = r16
	call errlog_function (retsize: 0;)
	// succ:  l0000F51C
l0000F51C:
	v16 = r30
	r31 = Mem0[v16 + 4<i32>:word32]
	r30 = Mem0[v16:word32]
	r29 = v16 + 8<i32>
	return
	// succ:  expanddims_check_exit
l0000F528:
	branch r2 == 2<32> l0000F544
	// succ:  l0000F534 l0000F544
l0000F534:
	r2 = Mem0[r17 + 20<i32>:word32]
	goto l0000F51C
	// succ:  l0000F51C
l0000F544:
	r2 = r16
	r1 = 0x3A<32>
	Mem0[r29:word32] = r17
	call logmsg_function (retsize: 0;)
	r0 = 0<32>
	v17 = r30
	r31 = Mem0[v17 + 4<i32>:word32]
	r30 = Mem0[v17:word32]
	r29 = v17 + 8<i32>
	return
	// succ:  expanddims_check_exit
expanddims_check_exit:


// logmsg_function
// Return size: 0
define logmsg_function
logmsg_function_entry:
	r29 = fp
	// succ:  l0000F558
l0000F558:
	v4 = r29 - 8<i32>
	Mem0[v4:word32] = r30
	Mem0[v4 + 4<i32>:word32] = r31
	r30 = v4
	r29 = v4 - 8<i32>
	r3 = 2<32>
	branch r3 >u r5 l0000F55C_thunk_errlog_function
	goto l0000F568
	// succ:  l0000F568 l0000F55C_thunk_errlog_function
l0000F55C_thunk_errlog_function:
	call errlog_function (retsize: 0;)
	return
	// succ:  logmsg_function_exit
l0000F568:
	r5 = Mem0[r2 + 16<i32>:word32]
	r5 = r29 + 0x10<32>
	r3 = 2<32>
	r0 = badva + 0x3A<32>
	Mem0[r29 + 1<i32>:byte] = r6
	r6 = r29 + 0x10<32>
	call logv (retsize: 0;)
	// succ:  l0000F570_thunk_errlog_function
l0000F570_thunk_errlog_function:
	call errlog_function (retsize: 0;)
	return
	// succ:  logmsg_function_exit
logmsg_function_exit:


// errlog_function
// Return size: 0
define errlog_function
errlog_function_entry:
	r29 = fp
	// succ:  l0000F580
l0000F580:
	v4 = r29 - 8<i32>
	Mem0[v4:word32] = r30
	Mem0[v4 + 4<i32>:word32] = r31
	r30 = v4
	r29 = v4 - 8<i32>
	r4 = r3
	r0 = badva + 0x1E<32>
	Mem0[r29 + 1<i32>:byte] = r6
	r6 = r29 + 0x10<32>
	r5 = r29 + 0x10<32>
	r3 = 0<32>
	v13 = r30
	r31 = Mem0[v13 + 4<i32>:word32]
	r30 = Mem0[v13:word32]
	r29 = v13 + 8<i32>
	return
	// succ:  errlog_function_exit
errlog_function_exit:


// fn0000F588
// Return size: 0
define fn0000F588
fn0000F588_entry:
	r29 = fp
	// succ:  l0000F588
l0000F588:
	v4 = r29 - 8<i32>
	Mem0[v4:word32] = r30
	Mem0[v4 + 4<i32>:word32] = r31
	r30 = v4
	r29 = v4 - 8<i32>
	r4 = r3
	Mem0[r29 + 1<i32>:byte] = r6
	r6 = r29 + 0x10<32>
	r5 = r29 + 0x10<32>
	r3 = 0<32>
	v11 = r30
	r31 = Mem0[v11 + 4<i32>:word32]
	r30 = Mem0[v11:word32]
	r29 = v11 + 8<i32>
	return
	// succ:  fn0000F588_exit
fn0000F588_exit:


// sslice_execute_4b
// Return size: 0
define sslice_execute_4b
sslice_execute_4b_entry:
	r29 = fp
	// succ:  l0000F5B0
l0000F5B0:
	// succ:  l0000F5B0_thunk_strided_slice_impl
l0000F5B0_thunk_strided_slice_impl:
	call strided_slice_impl (retsize: 0;)
	return
	// succ:  sslice_execute_4b_exit
sslice_execute_4b_exit:


// sslice_check
// Return size: 0
define sslice_check
sslice_check_entry:
	r29 = fp
	// succ:  l0000F5B4
l0000F5B4:
	v4 = r29 - 8<i32>
	Mem0[v4:word32] = r30
	Mem0[v4 + 4<i32>:word32] = r31
	r30 = v4
	r29 = v4 - 16<i32>
	Mem0[r29 + 496<i32>:word64] = r17_r16
	r4 = badva + 0x13<32>
	r17 = r0
	r16 = r1
	r1 = 0x70<32>
	Mem0[r29:word32] = r17
	r2 = r16
	call logmsg_function (retsize: 0;)
	branch r2 == 8<32> l0000F5F0
	// succ:  l0000F5E0 l0000F5F0
l0000F5E0:
	r2 = Mem0[r17 + 16<i32>:word32]
	r1 = 0x71<32>
	goto l0000F608
	// succ:  l0000F608
l0000F5F0:
	branch r2 == 2<32> l0000F5F0_thunk_fn0000F618
	goto l0000F5FC
	// succ:  l0000F5FC l0000F5F0_thunk_fn0000F618
l0000F5F0_thunk_fn0000F618:
	call fn0000F618 (retsize: 0;)
	return
	// succ:  sslice_check_exit
l0000F5FC:
	r2 = Mem0[r17 + 20<i32>:word32]
	r3 = badva + 0x31<32>
	r2 = r16
	call errlog_function (retsize: 0;)
	// succ:  l0000F608
l0000F608:
	r0 = 0xFFFFFFFF<32>
	v16 = r30
	r31 = Mem0[v16 + 4<i32>:word32]
	r30 = Mem0[v16:word32]
	r29 = v16 + 8<i32>
	return
	// succ:  sslice_check_exit
sslice_check_exit:


// sslice_execute_1b
// Return size: 0
define sslice_execute_1b
sslice_execute_1b_entry:
	r29 = fp
	// succ:  l0000F610
l0000F610:
	// succ:  l0000F610_thunk_strided_slice_impl
l0000F610_thunk_strided_slice_impl:
	call strided_slice_impl (retsize: 0;)
	return
	// succ:  sslice_execute_1b_exit
sslice_execute_1b_exit:


// sslice_execute_q8
// Return size: 0
define sslice_execute_q8
sslice_execute_q8_entry:
	r29 = fp
	// succ:  l0000F614
l0000F614:
	v4 = r29 - 8<i32>
	Mem0[v4:word32] = r30
	Mem0[v4 + 4<i32>:word32] = r31
	r30 = v4
	r29 = v4 - 8<i32>
	Mem0[r29 + 496<i32>:word64] = r17_r16
	r17_r16 = r1_r0
	// succ:  l0000F614_thunk_fn0000F618
l0000F614_thunk_fn0000F618:
	call fn0000F618 (retsize: 0;)
	return
	// succ:  sslice_execute_q8_exit
sslice_execute_q8_exit:


// fn0000F618
// Return size: 0
define fn0000F618
fn0000F618_entry:
	r29 = fp
	// succ:  l0000F618
l0000F618:
	v4 = r29 - 8<i32>
	Mem0[v4:word32] = r30
	Mem0[v4 + 4<i32>:word32] = r31
	r30 = v4
	r29 = v4 - 8<i32>
	Mem0[r29 + 496<i32>:word64] = r17_r16
	r4 = Mem0[r16 + 8<i32>:word32]
	r2 = Mem0[r16 + 4<i32>:word32]
	r2 = Mem0[r4 + 4<i32>:word32]
	r3 = Mem0[r2 + 16<i32>:word32]
	r5 = Mem0[r3 + 4<i32>:word32]
	r7 = Mem0[r3:word32]
	Mem0[r2:word32] = r7
	Mem0[r2 + 4<i32>:word32] = r5
	r0 = Mem0[r3 + 12<i32>:word32]
	r4 = Mem0[r3 + 8<i32>:word32]
	Mem0[r2 + 8<i32>:word32] = r4
	Mem0[r2 + 12<i32>:word32] = r0
	r4 = Mem0[r3 + 24<i32>:word32]
	branch r4 >u r6 l0000F638_thunk_fn0000F650
	goto l0000F638_thunk_fn0000F644
	// succ:  l0000F638_thunk_fn0000F644 l0000F638_thunk_fn0000F650
l0000F618:
	r4 = Mem0[r16 + 8<i32>:word32]
	r2 = Mem0[r16 + 4<i32>:word32]
	r2 = Mem0[r4 + 4<i32>:word32]
	r3 = Mem0[r2 + 16<i32>:word32]
	r5 = Mem0[r3 + 4<i32>:word32]
	r7 = Mem0[r3:word32]
	Mem0[r2:word32] = r7
	Mem0[r2 + 4<i32>:word32] = r5
	r0 = Mem0[r3 + 12<i32>:word32]
	r4 = Mem0[r3 + 8<i32>:word32]
	Mem0[r2 + 8<i32>:word32] = r4
	Mem0[r2 + 12<i32>:word32] = r0
	r4 = Mem0[r3 + 24<i32>:word32]
	branch r4 >u r6 l0000F650
	// succ:  l0000F634_thunk_fn0000F644 l0000F634_thunk_fn0000F650
l0000F634_thunk_fn0000F644:
	call fn0000F644 (retsize: 0;)
	return
	// succ:  fn0000F618_exit
l0000F634_thunk_fn0000F650:
	call fn0000F650 (retsize: 0;)
	return
	// succ:  fn0000F618_exit
l0000F638_thunk_fn0000F644:
	call fn0000F644 (retsize: 0;)
	return
	// succ:  fn0000F618_exit
l0000F638_thunk_fn0000F650:
	call fn0000F650 (retsize: 0;)
	return
	// succ:  fn0000F618_exit
fn0000F618_exit:


// fn0000F644
// Return size: 0
define fn0000F644
fn0000F644_entry:
	r29 = fp
	// succ:  l0000F644
l0000F644:
	r6 = Mem0[r2 + 20<i32>:word32]
	r1 = Mem0[r3 + 16<i32>:word32]
	r2 = Mem0[r3 + 24<i32>:word32]
	call fn00009560 (retsize: 0;)
	r3 = Mem0[r16 + 4<i32>:word32]
	r2 = Mem0[r16 + 8<i32>:word32]
	// succ:  l0000F658_thunk_fn0000F650
l0000F658_thunk_fn0000F650:
	call fn0000F650 (retsize: 0;)
	return
	// succ:  fn0000F644_exit
fn0000F644_exit:


// fn0000F650
// Return size: 0
define fn0000F650
fn0000F650_entry:
	r29 = fp
	// succ:  l0000F650
l0000F650:
	r2 = Mem0[r2 + 8<i32>:word32]
	r3 = Mem0[r3 + 20<i32>:word32]
	r5 = Mem0[r3 + 4<i32>:word32]
	r4 = Mem0[r3:word32]
	Mem0[r2:word32] = r4
	Mem0[r2 + 4<i32>:word32] = r5
	r1 = Mem0[r3 + 12<i32>:word32]
	r7 = Mem0[r3 + 8<i32>:word32]
	Mem0[r2 + 12<i32>:word32] = r1
	Mem0[r2 + 8<i32>:word32] = r7
	r4 = Mem0[r3 + 24<i32>:word32]
	branch r4 >u r6 l0000F680
	// succ:  l0000F674 l0000F680
l0000F674:
	r6 = Mem0[r2 + 20<i32>:word32]
	r1 = Mem0[r3 + 16<i32>:word32]
	r2 = Mem0[r3 + 24<i32>:word32]
	call fn00009560 (retsize: 0;)
	v12 = r30
	r31 = Mem0[v12 + 4<i32>:word32]
	r30 = Mem0[v12:word32]
	r29 = v12 + 8<i32>
	r17_r16 = Mem0[r29:word64]
	r2 = 1<32>
	r1_r0 = r17_r16
	goto l0000F688
	// succ:  l0000F688
l0000F680:
	v16 = r30
	r31 = Mem0[v16 + 4<i32>:word32]
	r30 = Mem0[v16:word32]
	r29 = v16 + 8<i32>
	r17_r16 = Mem0[r29:word64]
	r2 = 1<32>
	// succ:  l0000F688
l0000F688:
	// succ:  l0000F688_thunk_strided_slice_impl
l0000F688_thunk_strided_slice_impl:
	call strided_slice_impl (retsize: 0;)
	return
	// succ:  fn0000F650_exit
fn0000F650_exit:


// sslice_check_q8
// Return size: 0
define sslice_check_q8
sslice_check_q8_entry:
	r29 = fp
	// succ:  l0000F690
l0000F690:
	v4 = r29 - 8<i32>
	Mem0[v4:word32] = r30
	Mem0[v4 + 4<i32>:word32] = r31
	r30 = v4
	r29 = v4 - 16<i32>
	Mem0[r29 + 496<i32>:word64] = r17_r16
	r4 = badva + 0x37<32>
	r17 = r0
	r16 = r1
	r1 = 0x78<32>
	Mem0[r29:word32] = r17
	r2 = r16
	call logmsg_function (retsize: 0;)
	branch r2 == 0xC<32> l0000F6CC
	// succ:  l0000F6BC l0000F6CC
l0000F6BC:
	r2 = Mem0[r17 + 16<i32>:word32]
	r1 = 0x79<32>
	goto l0000F6E4
	// succ:  l0000F6E4
l0000F6CC:
	branch r2 == 6<32> l0000F6CC_thunk_fn0000F6F4
	goto l0000F6D8
	// succ:  l0000F6D8 l0000F6CC_thunk_fn0000F6F4
l0000F6CC_thunk_fn0000F6F4:
	call fn0000F6F4 (retsize: 0;)
	return
	// succ:  sslice_check_q8_exit
l0000F6D8:
	r2 = Mem0[r17 + 20<i32>:word32]
	r3 = badva + 0x15<32>
	r2 = r16
	call errlog_function (retsize: 0;)
	// succ:  l0000F6E4
l0000F6E4:
	r0 = 0xFFFFFFFF<32>
	v16 = r30
	r31 = Mem0[v16 + 4<i32>:word32]
	r30 = Mem0[v16:word32]
	r29 = v16 + 8<i32>
	return
	// succ:  sslice_check_q8_exit
sslice_check_q8_exit:


// logmsg_function
// Return size: 0
define logmsg_function
logmsg_function_entry:
	r29 = fp
	// succ:  l0000F6EC
l0000F6EC:
	v4 = r29 - 8<i32>
	Mem0[v4:word32] = r30
	Mem0[v4 + 4<i32>:word32] = r31
	r30 = v4
	r29 = v4 - 8<i32>
	r3 = 2<32>
	branch r3 >u r5 l0000F714
logmsg_function_exit:


// fn0000F6F4
// Return size: 0
define fn0000F6F4
fn0000F6F4_entry:
	r29 = fp
	goto l0000F6F4
	// succ:  l0000F6F4
l0000F6F0_thunk_errlog_function:
	call errlog_function (retsize: 0;)
	return
	// succ:  fn0000F6F4_exit
l0000F6F4:
	branch r3 >u r5 l0000F6F4_thunk_errlog_function
	goto l0000F6F4_thunk_fn0000F6FC
	// succ:  l0000F6F4_thunk_fn0000F6FC l0000F6F4_thunk_errlog_function
l0000F6F4:
	call fn0000F6FC (retsize: 0;)
	return
	// succ:  l0000F6F4_thunk_fn0000F6FC l0000F6F0_thunk_errlog_function fn0000F6F4_exit
l0000F6F4_thunk_errlog_function:
	call errlog_function (retsize: 0;)
	return
	// succ:  fn0000F6F4_exit
l0000F6F4_thunk_fn0000F6FC:
	call fn0000F6FC (retsize: 0;)
	return
	// succ:  fn0000F6F4_exit
l0000F6F4_thunk_fn0000F6FC:
	call fn0000F6FC (retsize: 0;)
	return
	// succ:  fn0000F6F4_exit
fn0000F6F4_exit:


// fn0000F6FC
// Return size: 0
define fn0000F6FC
fn0000F6FC_entry:
	r29 = fp
	// succ:  l0000F6FC
l0000F6FC:
	r5 = Mem0[r2 + 16<i32>:word32]
	r5 = r29 + 0x10<32>
	r3 = 2<32>
	r0 = badva + 0x2D<32>
	Mem0[r29 + 1<i32>:byte] = r6
	r6 = r29 + 0x10<32>
	call logv (retsize: 0;)
	// succ:  l0000F704_thunk_errlog_function
l0000F704_thunk_errlog_function:
	call errlog_function (retsize: 0;)
	return
	// succ:  fn0000F6FC_exit
fn0000F6FC_exit:


// errlog_function
// Return size: 0
define errlog_function
errlog_function_entry:
	r29 = fp
	// succ:  l0000F714
l0000F714:
	v4 = r29 - 8<i32>
	Mem0[v4:word32] = r30
	Mem0[v4 + 4<i32>:word32] = r31
	r30 = v4
	r29 = v4 - 8<i32>
	r4 = r3
	r0 = badva + 0x11<32>
	Mem0[r29 + 1<i32>:byte] = r6
	r6 = r29 + 0x10<32>
	r5 = r29 + 0x10<32>
	r3 = 0<32>
	v13 = r30
	r31 = Mem0[v13 + 4<i32>:word32]
	r30 = Mem0[v13:word32]
	r29 = v13 + 8<i32>
	return
	// succ:  errlog_function_exit
errlog_function_exit:


// strided_slice_impl
// Return size: 0
define strided_slice_impl
strided_slice_impl_entry:
	r29 = fp
	// succ:  l0000F738
l0000F738:
	v4 = r29 - 8<i32>
	Mem0[v4:word32] = r30
	Mem0[v4 + 4<i32>:word32] = r31
	r30 = v4
	r29 = v4 - 72<i32>
	Mem0[r29 + 488<i32>:word64] = r19_r18
	r19 = r0
	Mem0[r29 + 64<i32>:word64] = r17_r16
	r3 = Mem0[r19 + 4<i32>:word32]
	r17 = r2
	Mem0[r29 + 48<i32>:word64] = r21_r20
	r21 = r1
	Mem0[r29 + 32<i32>:word64] = r25_r24
	Mem0[r29 + 40<i32>:word64] = r23_r22
	r5 = Mem0[r3 + 8<i32>:word32]
	r7 = Mem0[r3 + 12<i32>:word32]
	r6 = Mem0[r3 + 4<i32>:word32]
	r0 = Mem0[r5 + 16<i32>:word32]
	r22 = Mem0[r3:word32]
	r6 = Mem0[r7 + 16<i32>:word32]
	r5 = Mem0[r6 + 16<i32>:word32]
	r4 = Mem0[r19 + 8<i32>:word32]
	r24 = Mem0[r0:word32]
	r16 = Mem0[r5:word32]
	Mem0[r29 + 24<i32>:word64] = r27_r26
	r20 = Mem0[r6:word32]
	r2 = 0xFFFFFFFF<32> - r16
	r23 = Mem0[r4:word32]
	r3 = Mem0[r22 + 12<i32>:word32]
	r1_r0 = r20_r20
	r27 = Mem0[r22 + 8<i32>:word32]
	r26 = Mem0[r22 + 4<i32>:word32]
	r0 = r0 + (r24 + r2)
	Mem0[r29 + 20<i32>:word32] = r3
	call fn00009750 (retsize: 0;)
	r2 = Mem0[r23 + 20<i32>:word32]
	r18 = r0
	r3 = badva + 0x21<32>
	branch r25 >u r2 l0000F818
	// succ:  l0000F7B0 l0000F818
l0000F7B0:
	r1 = 0x47<32>
	r25 = r18 * r17
	r1 = 0x48<32>
	p0 = r26 > 1<32>
	r3 = badva + 0x17<32>
	branch r2 > 2<32> l0000F814
	// succ:  l0000F7C8 l0000F814
l0000F7C8:
	r2 = Mem0[r22:word32]
	r1 = 0x49<32>
	r3 = badva + 0x3F<32>
	r1 = 0x4A<32>
	branch p0 l0000F810
	// succ:  l0000F7D8 l0000F810
l0000F7D8:
	r1 = 0x4B<32>
	p0 = r27 > 1<32>
	r3 = badva + 0x2B<32>
	branch p0 l0000F810
	// succ:  l0000F7EC l0000F810
l0000F7EC:
	r3 = badva + 0x37<32>
	branch r16 > r2 l0000F814
	// succ:  l0000F800 l0000F814
l0000F800:
	r2 = Mem0[r29 + 20<i32>:word32]
	r1 = 0x4C<32>
	r3 = badva + 0x31<32>
	branch r24 >u r2 l0000F820
	goto l0000F814
	// succ:  l0000F814 l0000F820
l0000F810:
	r19 = -1<i32>
	r2 = r21
	call errlog_function (retsize: 0;)
	goto l0000F818
	// succ:  l0000F818
l0000F814:
	r2 = Mem0[r29 + 20<i32>:word32]
	r19 = -1<i32>
	r2 = r21
	// succ:  l0000F818
l0000F818:
	goto l0000F884
	// succ:  l0000F884
l0000F820:
	r22 = Mem0[r23 + 16<i32>:word32]
	r26 = Mem0[r22 + 16<i32>:word32]
	r4 = badva + 0x1A<32>
	Mem0[r29 + 8<i32>:word32] = r24
	Mem0[r29 + 12<i32>:word32] = r20
	r2 = r21
	r1 = 0x4F<32>
	Mem0[r29 + 4<i32>:word32] = r16
	Mem0[r29:word32] = r19
	r19 = 0<32>
	call logmsg_function (retsize: 0;)
	Mem0[r23:word32] = 1<32>
	Mem0[r23 + 24<i32>:word32] = r25
	p0 = r18 > 0<32>
	Mem0[r23 + 4<i32>:word32] = 0xFFFFFF81<32>
	Mem0[r23 + 12<i32>:word32] = r18
	Mem0[r23 + 8<i32>:word32] = 1<32>
	branch p0 l0000F884
	// succ:  l0000F864 l0000F884
l0000F864:
	r20 = r20 * r17
	r16 = r26 + r16 * r17
	r22 = r22 + r17
	r2 = r17
	r1_r0 = r16_r22
	call fn00009560 (retsize: 0;)
	// succ:  l0000F874
l0000F874:
	branch r18 == 1<32> l0000F874
	goto l0000F888
	// succ:  l0000F888 l0000F874
l0000F884:
	r19_r18 = Mem0[r29 + 56<i32>:word64]
	r17_r16 = Mem0[r29 + 64<i32>:word64]
	r0 = r19
	goto l0000F88C
	// succ:  l0000F88C
l0000F888:
	r18 = r18 + 0xFFFFFFFF<32>
	r16 = r16 + r20
	r19_r18 = Mem0[r29 + 56<i32>:word64]
	r17_r16 = Mem0[r29 + 64<i32>:word64]
	// succ:  l0000F88C
l0000F88C:
	r23_r22 = Mem0[r29 + 40<i32>:word64]
	r21_r20 = Mem0[r29 + 48<i32>:word64]
	r27_r26 = Mem0[r29 + 24<i32>:word64]
	r25_r24 = Mem0[r29 + 32<i32>:word64]
	v38 = r30
	r31 = Mem0[v38 + 4<i32>:word32]
	r30 = Mem0[v38:word32]
	r29 = v38 + 8<i32>
	return
	// succ:  strided_slice_impl_exit
strided_slice_impl_exit:


// resizenear_f_execute
// Return size: 0
define resizenear_f_execute
resizenear_f_execute_entry:
	r29 = fp
	// succ:  l0000F8A0
l0000F8A0:
	v4 = r29 - 8<i32>
	Mem0[v4:word32] = r30
	Mem0[v4 + 4<i32>:word32] = r31
	r30 = v4
	r29 = v4 - 104<i32>
	r3 = Mem0[r0 + 8<i32>:word32]
	r7 = Mem0[r0 + 4<i32>:word32]
	Mem0[r29 + 64<i32>:word64] = r25_r24
	Mem0[r29 + 80<i32>:word64] = r21_r20
	r21 = Mem0[r7:word32]
	r4 = Mem0[r7 + 4<i32>:word32]
	Mem0[r29 + 88<i32>:word64] = r19_r18
	Mem0[r29 + 56<i32>:word64] = r27_r26
	r27 = r1
	r25 = Mem0[r21 + 8<i32>:word32]
	r2 = Mem0[r4 + 16<i32>:word32]
	Mem0[r29 + 96<i32>:word64] = r17_r16
	Mem0[r29 + 72<i32>:word64] = r23_r22
	r20 = Mem0[r3:word32]
	r24 = Mem0[r2 + 4<i32>:word32]
	r26 = Mem0[r21 + 4<i32>:word32]
	r18 = Mem0[r21:word32]
	r19 = Mem0[r2:word32]
	r23 = Mem0[r21 + 12<i32>:word32]
	call fn00009614 (retsize: 0;)
	r16 = r0
	r0 = r2
	call fn00009614 (retsize: 0;)
	r3 = Mem0[r20 + 20<i32>:word32]
	r1 = 0x44<32>
	r17 = r23 << 2<32>
	r2 = r24 * r19
	r2 = r2 * r18
	branch r22 >u r3 l0000F938
	// succ:  l0000F920 l0000F938
l0000F920:
	r22 = r2 * r17
	r2 = r27
	r3 = badva + 0x22<32>
	call errlog_function (retsize: 0;)
	r0 = 0xFFFFFFFF<32>
	goto l0000FA44
	// succ:  l0000FA44
l0000F938:
	r21 = Mem0[r20 + 16<i32>:word32]
	r26 = Mem0[r21 + 16<i32>:word32]
	r2 = r27
	Mem0[r29 + 28<i32>:word32] = r23
	r1 = 0x45<32>
	r4 = badva + 8<32>
	Mem0[r29 + 24<i32>:word32] = r24
	Mem0[r29 + 48<i32>:word32] = r0
	Mem0[r29 + 20<i32>:word32] = r19
	Mem0[r29 + 36<i32>:word32] = r18
	Mem0[r29 + 16<i32>:word32] = r18
	Mem0[r29 + 32<i32>:word32] = r3
	Mem0[r29 + 4<i32>:word32] = r3
	Mem0[r29 + 12<i32>:word32] = r23
	Mem0[r29:word32] = r18
	Mem0[r29 + 8<i32>:word32] = r25
	call logmsg_function (retsize: 0;)
	Mem0[r20:word32] = r18
	Mem0[r20 + 24<i32>:word32] = r22
	r3 = r19
	r0 = 0<32>
	Mem0[r20 + 12<i32>:word32] = r23
	Mem0[r20 + 4<i32>:word32] = r19
	p0 = r18 > 0<32>
	Mem0[r20 + 8<i32>:word32] = r24
	branch p0 l0000FA44
	// succ:  l0000F990 l0000FA44
l0000F990:
	r4 = Mem0[r29 + 48<i32>:word64]
	r5 = 0<32>
	r2 = r24 * r23
	r2 = r2 << 2<32>
	Mem0[r29 + 44<i32>:word32] = r2
	Mem0[r29 + 40<i32>:word32] = r5
l0000F9A4:
	Mem0[r29 + 40<i32>:word32] = r5
	// succ:  l0000FA38
l0000FA38:
	branch r5 == r2 l0000F9A4
	// succ:  l0000FA44 l0000F9A4
l0000FA44:
	r19_r18 = Mem0[r29 + 88<i32>:word64]
	r17_r16 = Mem0[r29 + 96<i32>:word64]
	r23_r22 = Mem0[r29 + 72<i32>:word64]
	r21_r20 = Mem0[r29 + 80<i32>:word64]
	r27_r26 = Mem0[r29 + 56<i32>:word64]
	r25_r24 = Mem0[r29 + 64<i32>:word64]
	v34 = r30
	r31 = Mem0[v34 + 4<i32>:word32]
	r30 = Mem0[v34:word32]
	r29 = v34 + 8<i32>
	return
	// succ:  resizenear_f_execute_exit
resizenear_f_execute_exit:


// resizenear_f_check
// Return size: 0
define resizenear_f_check
resizenear_f_check_entry:
	r29 = fp
	// succ:  l0000FA60
l0000FA60:
	v4 = r29 - 8<i32>
	Mem0[v4:word32] = r30
	Mem0[v4 + 4<i32>:word32] = r31
	r30 = v4
	r29 = v4 - 16<i32>
	Mem0[r29 + 496<i32>:word64] = r17_r16
	r4 = badva + 0x15<32>
	r17 = r0
	r16 = r1
	r1 = 0x5B<32>
	Mem0[r29:word32] = r17
	r2 = r16
	call logmsg_function (retsize: 0;)
	branch r2 == 4<32> l0000FAA8
	// succ:  l0000FA8C l0000FAA8
l0000FA8C:
	r2 = Mem0[r17 + 16<i32>:word32]
	r1 = 0x5C<32>
	r3 = badva + 0<32>
	r2 = r16
	call errlog_function (retsize: 0;)
	// succ:  l0000FA98
l0000FA98:
	v16 = r30
	r31 = Mem0[v16 + 4<i32>:word32]
	r30 = Mem0[v16:word32]
	r29 = v16 + 8<i32>
	return
	// succ:  resizenear_f_check_exit
l0000FAA8:
	branch r2 == 2<32> l0000FAC0
	// succ:  l0000FAB0 l0000FAC0
l0000FAB0:
	goto l0000FA98
	// succ:  l0000FA98
l0000FAC0:
	r2 = r16
	r1 = 0x5E<32>
	Mem0[r29:word32] = r17
	call logmsg_function (retsize: 0;)
	r0 = 0<32>
	v17 = r30
	r31 = Mem0[v17 + 4<i32>:word32]
	r30 = Mem0[v17:word32]
	r29 = v17 + 8<i32>
	return
	// succ:  resizenear_f_check_exit
resizenear_f_check_exit:


// logmsg_function
// Return size: 0
define logmsg_function
logmsg_function_entry:
	r29 = fp
	// succ:  l0000FAD8
l0000FAD8:
	v4 = r29 - 8<i32>
	Mem0[v4:word32] = r30
	Mem0[v4 + 4<i32>:word32] = r31
	r30 = v4
	r29 = v4 - 8<i32>
	r3 = 2<32>
	branch r3 >u r5 l0000FADC_thunk_errlog_function
	goto l0000FAE8
	// succ:  l0000FAE8 l0000FADC_thunk_errlog_function
l0000FADC_thunk_errlog_function:
	call errlog_function (retsize: 0;)
	return
	// succ:  logmsg_function_exit
l0000FAE8:
	r5 = Mem0[r2 + 16<i32>:word32]
	r5 = r29 + 0x10<32>
	r3 = 2<32>
	r0 = badva + 0x31<32>
	Mem0[r29 + 1<i32>:byte] = r6
	r6 = r29 + 0x10<32>
	call logv (retsize: 0;)
	// succ:  l0000FAF0_thunk_errlog_function
l0000FAF0_thunk_errlog_function:
	call errlog_function (retsize: 0;)
	return
	// succ:  logmsg_function_exit
logmsg_function_exit:


// errlog_function
// Return size: 0
define errlog_function
errlog_function_entry:
	r29 = fp
	// succ:  l0000FB00
l0000FB00:
	v4 = r29 - 8<i32>
	Mem0[v4:word32] = r30
	Mem0[v4 + 4<i32>:word32] = r31
	r30 = v4
	r29 = v4 - 8<i32>
	r4 = r3
	r0 = badva + 0x15<32>
	Mem0[r29 + 1<i32>:byte] = r6
	r6 = r29 + 0x10<32>
	r5 = r29 + 0x10<32>
	r3 = 0<32>
	v13 = r30
	r31 = Mem0[v13 + 4<i32>:word32]
	r30 = Mem0[v13:word32]
	r29 = v13 + 8<i32>
	return
	// succ:  errlog_function_exit
errlog_function_exit:


// mirrorpad_f_execute
// Return size: 0
define mirrorpad_f_execute
mirrorpad_f_execute_entry:
	r29 = fp
	// succ:  l0000FB30
l0000FB30:
	v4 = r29 - 8<i32>
	Mem0[v4:word32] = r30
	Mem0[v4 + 4<i32>:word32] = r31
	r30 = v4
	r29 = v4 - 192<i32>
	r4 = badva + 0x32<32>
	r3 = Mem0[r0 + 8<i32>:word32]
	r2 = Mem0[r0 + 4<i32>:word32]
	Mem0[r29 + 176<i32>:word64] = r19_r18
	Mem0[r29 + 152<i32>:word64] = r25_r24
	r2 = Mem0[r2:word32]
	r24 = Mem0[r2 + 4<i32>:word32]
	Mem0[r29 + 144<i32>:word64] = r27_r26
	r18 = Mem0[r3:word32]
	r7 = Mem0[r2 + 16<i32>:word32]
	r6 = Mem0[r24 + 16<i32>:word32]
	r25 = Mem0[r2 + 12<i32>:word32]
	r5 = Mem0[r2:word32]
	r27 = Mem0[r2 + 4<i32>:word32]
	r19 = Mem0[r2 + 8<i32>:word32]
	Mem0[r29 + 184<i32>:word64] = r17_r16
	r2 = Mem0[r6 + 20<i32>:word32]
	r1 = 0x85<32>
	r17 = r1
	Mem0[r29 + 160<i32>:word64] = r23_r22
	Mem0[r29 + 168<i32>:word64] = r21_r20
	Mem0[r29 + 124<i32>:word32] = r7
	r7 = Mem0[r18 + 16<i32>:word32]
	Mem0[r29 + 136<i32>:word32] = r2
	r2 = Mem0[r6 + 16<i32>:word32]
	r21 = Mem0[r6 + 28<i32>:word32]
	r20 = Mem0[r6 + 24<i32>:word32]
	r26 = Mem0[r6 + 8<i32>:word32]
	r16 = Mem0[r6 + 12<i32>:word32]
	r23 = Mem0[r6:word32]
	r22 = Mem0[r6 + 4<i32>:word32]
	Mem0[r29 + 140<i32>:word32] = r2
	Mem0[r29 + 12<i32>:word32] = r25
	r2 = r17
	Mem0[r29 + 120<i32>:word32] = r0
	Mem0[r29 + 8<i32>:word32] = r19
	Mem0[r29 + 132<i32>:word32] = r5
	Mem0[r29 + 4<i32>:word32] = r27
	Mem0[r29:word32] = r5
	Mem0[r29 + 128<i32>:word32] = r7
	call logmsg_function (retsize: 0;)
	r1 = 0x86<32>
	r3 = badva + 0x39<32>
	branch r2 == 4<32> l0000FCC8
	// succ:  l0000FBD8 l0000FCC8
l0000FBD8:
	r2 = Mem0[r24 + 12<i32>:word32]
	r1 = 0x87<32>
	r3 = badva + 0x25<32>
	branch r2 == 8<32> l0000FCC8
	// succ:  l0000FBEC l0000FCC8
l0000FBEC:
	r2 = Mem0[r24 + 8<i32>:word32]
	r1 = 0x88<32>
	r3 = badva + 0x1F<32>
	branch r2 == 0<32> l0000FCC8
	// succ:  l0000FC00 l0000FCC8
l0000FC00:
	r2 = r21 | r20
	r1 = 0x89<32>
	r3 = badva + 0x1D<32>
	branch r2 == 0<32> l0000FCC8
	// succ:  l0000FC14 l0000FCC8
l0000FC14:
	r2 = r22 | r23
	Mem0[r29:word32] = r26
	r2 = r17 + 0<32>
	p0 = r19 > r26
	Mem0[r29 + 4<i32>:word32] = r19
	r1 = 0x8A<32>
	r3 = badva + 9<32>
	// succ:  l0000FCC8
l0000FCC8:
	call errlog_function (retsize: 0;)
	r0 = 0xFFFFFFFF<32>
	// succ:  l0000FF10
l0000FF10:
	r19_r18 = Mem0[r29 + 176<i32>:word64]
	r17_r16 = Mem0[r29 + 184<i32>:word64]
	r23_r22 = Mem0[r29 + 160<i32>:word64]
	r21_r20 = Mem0[r29 + 168<i32>:word64]
	r27_r26 = Mem0[r29 + 144<i32>:word64]
	r25_r24 = Mem0[r29 + 152<i32>:word64]
	v35 = r30
	r31 = Mem0[v35 + 4<i32>:word32]
	r30 = Mem0[v35:word32]
	r29 = v35 + 8<i32>
	return
	// succ:  mirrorpad_f_execute_exit
mirrorpad_f_execute_exit:


// mirrorpad_f_check
// Return size: 0
define mirrorpad_f_check
mirrorpad_f_check_entry:
	r29 = fp
	// succ:  l0000FFB0
l0000FFB0:
	v4 = r29 - 8<i32>
	Mem0[v4:word32] = r30
	Mem0[v4 + 4<i32>:word32] = r31
	r30 = v4
	r29 = v4 - 16<i32>
	Mem0[r29 + 496<i32>:word64] = r17_r16
	r4 = badva + 0x17<32>
	r17 = r0
	r16 = r1
	r1 = 0xA7<32>
	Mem0[r29:word32] = r17
	r2 = r16
	call logmsg_function (retsize: 0;)
	r2 = Mem0[r17 + 32<i32>:byte]
	r2 = r2 + 0xFFFFFFFD<32>
	r1 = 0xAA<32>
	branch p0 l0000FFFC
	// succ:  l0000FFE0 l0000FFFC
l0000FFE0:
	p0 = SLICE(r2, byte, 0) >u SLICE(1<8>, byte, 0)
	r3 = badva + 0x39<32>
	r2 = r16
	call errlog_function (retsize: 0;)
	// succ:  l0000FFF0
l0000FFF0:
	v17 = r30
	r31 = Mem0[v17 + 4<i32>:word32]
	r30 = Mem0[v17:word32]
	r29 = v17 + 8<i32>
	return
	// succ:  mirrorpad_f_check_exit
l0000FFFC:
	branch r2 == 4<32> l00010018
	// succ:  l00010008 l00010018
l00010008:
	r2 = Mem0[r17 + 16<i32>:word32]
	goto l0000FFF0
	// succ:  l0000FFF0
l00010018:
	branch r2 == 2<32> l00010030
	// succ:  l00010020 l00010030
l00010020:
	goto l0000FFF0
	// succ:  l0000FFF0
l00010030:
	r2 = r16
	r1 = 0xAE<32>
	Mem0[r29:word32] = r17
	call logmsg_function (retsize: 0;)
	r0 = 0<32>
	v18 = r30
	r31 = Mem0[v18 + 4<i32>:word32]
	r30 = Mem0[v18:word32]
	r29 = v18 + 8<i32>
	return
	// succ:  mirrorpad_f_check_exit
mirrorpad_f_check_exit:


// logmsg_function
// Return size: 0
define logmsg_function
logmsg_function_entry:
	r29 = fp
	// succ:  l00010048
l00010048:
	v4 = r29 - 8<i32>
	Mem0[v4:word32] = r30
	Mem0[v4 + 4<i32>:word32] = r31
	r30 = v4
	r29 = v4 - 8<i32>
	r3 = 2<32>
	branch r3 >u r5 l0001004C_thunk_errlog_function
	goto l00010058
	// succ:  l00010058 l0001004C_thunk_errlog_function
l0001004C_thunk_errlog_function:
	call errlog_function (retsize: 0;)
	return
	// succ:  logmsg_function_exit
l00010058:
	r5 = Mem0[r2 + 16<i32>:word32]
	r5 = r29 + 0x10<32>
	r3 = 2<32>
	r0 = badva + 0x14<32>
	Mem0[r29 + 1<i32>:byte] = r6
	r6 = r29 + 0x10<32>
	call logv (retsize: 0;)
	// succ:  l00010060_thunk_errlog_function
l00010060_thunk_errlog_function:
	call errlog_function (retsize: 0;)
	return
	// succ:  logmsg_function_exit
logmsg_function_exit:


// errlog_function
// Return size: 0
define errlog_function
errlog_function_entry:
	r29 = fp
	// succ:  l00010070
l00010070:
	v4 = r29 - 8<i32>
	Mem0[v4:word32] = r30
	Mem0[v4 + 4<i32>:word32] = r31
	r30 = v4
	r29 = v4 - 8<i32>
	r4 = r3
	r0 = badva + 0x38<32>
	Mem0[r29 + 1<i32>:byte] = r6
	r6 = r29 + 0x10<32>
	r5 = r29 + 0x10<32>
	r3 = 0<32>
	v13 = r30
	r31 = Mem0[v13 + 4<i32>:word32]
	r30 = Mem0[v13:word32]
	r29 = v13 + 8<i32>
	return
	// succ:  errlog_function_exit
errlog_function_exit:


// add_int32_execute
// Return size: 0
define add_int32_execute
add_int32_execute_entry:
	r29 = fp
	// succ:  l000100A0
l000100A0:
	v4 = r29 - 8<i32>
	Mem0[v4:word32] = r30
	Mem0[v4 + 4<i32>:word32] = r31
	r30 = v4
	r29 = v4 - 160<i32>
	r5 = r0
	r3 = Mem0[r5 + 8<i32>:word32]
	r2 = Mem0[r5 + 4<i32>:word32]
	Mem0[r29 + 144<i32>:word64] = r19_r18
	Mem0[r29 + 112<i32>:word64] = r27_r26
	r19 = Mem0[r2 + 4<i32>:word32]
	r26 = Mem0[r2:word32]
	Mem0[r29 + 128<i32>:word64] = r23_r22
	Mem0[r29 + 136<i32>:word64] = r21_r20
	r22 = 0<32>
	r0 = Mem0[r26:word32]
	r6 = Mem0[r26 + 4<i32>:word32]
	r4 = Mem0[r19 + 4<i32>:word32]
	r8 = Mem0[r19:word32]
	p1 = r0 == 1<32>
	p0 = r6 == 1<32>
	r12 = Mem0[r26 + 8<i32>:word32]
	r10 = p1
	Mem0[r29 + 92<i32>:word32] = r4
	r9 = Mem0[r19 + 8<i32>:word32]
	p2 = r12 == 1<32>
	r18 = p0 ? r4 : r6
	r7 = Mem0[r26 + 12<i32>:word32]
	r4 = p1 ? r8 : r0
	r0 = Mem0[r19 + 12<i32>:word32]
	p1 = r7 == 1<32>
	r2 = r4 * r18
	Mem0[r29 + 76<i32>:word32] = r6
	Mem0[r29 + 120<i32>:word64] = r25_r24
	r20 = p2 ? r9 : r12
	r21 = p1 ? r0 : r7
	r2 = r2 * r20
	Mem0[r29 + 152<i32>:word64] = r17_r16
	r25 = Mem0[r3:word32]
	r6 = r1
	r2 = r2 * r21
	Mem0[r29 + 72<i32>:word32] = r8
	Mem0[r29 + 96<i32>:word32] = r10
	r10 = p2
	Mem0[r29 + 84<i32>:word32] = r10
	Mem0[r29 + 68<i32>:word32] = r9
	Mem0[r29 + 80<i32>:word32] = r0
	Mem0[r29 + 104<i32>:word32] = r4
	r16 = r2 << 2<32>
	branch p0 l0001014C
	// succ:  l00010148 l0001014C
l00010148:
	r22 = r7 * r12
	// succ:  l0001014C
l0001014C:
	r2 = r6
	r1 = 0xBD<32>
	r0 = badva + 0x29<32>
	Mem0[r29 + 64<i32>:word32] = r12
	r3 = Mem0[r19 + 16<i32>:word32]
	r4 = badva + 0x38<32>
	Mem0[r29 + 88<i32>:word32] = r7
	r23 = Mem0[r25 + 16<i32>:word32]
	r27 = r5
	r24 = r6
	r17 = Mem0[r26 + 16<i32>:word32]
	Mem0[r29:word32] = r5
	Mem0[r29 + 100<i32>:word32] = r3
	call logmsg_function (retsize: 0;)
	branch r16 >u r2 l000101BC
	// succ:  l00010198 l000101BC
l00010198:
	r2 = Mem0[r25 + 20<i32>:word32]
	r1 = 0xBD<32>
	r2 = r24
	r0 = badva + 0x21<32>
	r3 = badva + 0x12<32>
	// succ:  l000101A8
l000101A8:
	call errlog_function (retsize: 0;)
	r0 = 0xFFFFFFFF<32>
	goto l000103E0
	// succ:  l000103E0
l000101BC:
	r5 = Mem0[r26:word32]
	r7 = Mem0[r26 + 8<i32>:word32]
	r8 = Mem0[r26 + 12<i32>:word32]
	p0 = r5 == r13
	r12 = Mem0[r19 + 12<i32>:word32]
	r6 = Mem0[r26 + 4<i32>:word32]
	r3 = Mem0[r19 + 4<i32>:word32]
	r9 = Mem0[r19 + 8<i32>:word32]
	Mem0[r29 + 52<i32>:word32] = r16
	Mem0[r29 + 48<i32>:word32] = r25
	Mem0[r29 + 60<i32>:word32] = r27
	Mem0[r29 + 56<i32>:word32] = r17
	branch p0 l000101FC
	// succ:  l000101F0 l000101FC
l000101F0:
	branch p0 l000101FC
	// succ:  l000101F4 l000101FC
l000101F4:
	p0 = r5 == 2<32>
	p0 = r13 == 1<32>
	branch p0 l00010238
	// succ:  l000101FC l00010238
l000101FC:
	branch p0 l0001020C
	// succ:  l00010200 l0001020C
l00010200:
	p0 = r6 == -1<i32>
	branch p0 l0001020C
	// succ:  l00010204 l0001020C
l00010204:
	p0 = r6 == 2<32>
	branch p0 l00010238
	// succ:  l0001020C l00010238
l0001020C:
	p0 = r3 == 2<32>
	p0 = r7 == r9
	branch p0 l00010220
	// succ:  l00010214 l00010220
l00010214:
	branch p0 l00010220
	// succ:  l00010218 l00010220
l00010218:
	p0 = r7 == 2<32>
	p0 = r9 == 1<32>
	branch p0 l00010238
	// succ:  l00010220 l00010238
l00010220:
	p0 = r8 == r12
	branch p0 l0001026C
	// succ:  l00010228 l0001026C
l00010228:
	p0 = r8 == 1<32>
	branch p0 l0001026C
	// succ:  l00010230 l0001026C
l00010230:
	p0 = r12 == 1<32>
	branch p0 l0001026C
	// succ:  l00010238 l0001026C
l00010238:
	Mem0[r29 + 28<i32>:word32] = r12
	r1 = 0xBD<32>
	r0 = badva + 0x3D<32>
	Mem0[r29 + 16<i32>:word32] = r13
	Mem0[r29 + 24<i32>:word32] = r9
	Mem0[r29 + 8<i32>:word32] = r7
	Mem0[r29 + 20<i32>:word32] = r3
	r3 = badva + 0x30<32>
	Mem0[r29 + 4<i32>:word32] = r6
	Mem0[r29 + 12<i32>:word32] = r8
	Mem0[r29:word32] = r5
	goto l000101A8
	// succ:  l000101A8
l0001026C:
	Mem0[r29 + 44<i32>:word32] = r21
	r24 = Mem0[r29 + 104<i32>:word32]
	r19 = r2
	Mem0[r29 + 20<i32>:word32] = r3
	Mem0[r29 + 36<i32>:word32] = r18
	r0 = badva + 0x3D<32>
	Mem0[r29 + 40<i32>:word32] = r20
	r1 = 0xBD<32>
	r4 = badva + 0x2C<32>
	Mem0[r29 + 28<i32>:word32] = r12
	Mem0[r29 + 32<i32>:word32] = r24
	Mem0[r29 + 16<i32>:word32] = r13
	Mem0[r29 + 24<i32>:word32] = r9
	Mem0[r29 + 8<i32>:word32] = r7
	Mem0[r29 + 12<i32>:word32] = r8
	Mem0[r29:word32] = r5
	Mem0[r29 + 4<i32>:word32] = r6
	call logmsg_function (retsize: 0;)
	r26 = Mem0[r29 + 100<i32>:word32]
	r3 = Mem0[r29 + 48<i32>:word32]
	r14 = 0<32>
	p0 = r24 > 0<32>
	r25 = Mem0[r29 + 56<i32>:word32]
	Mem0[r3 + 6<i32>:byte] = r2
	r2 = Mem0[r29 + 52<i32>:word32]
	Mem0[r3 + 4<i32>:word32] = r18
	Mem0[r3 + 12<i32>:word32] = r21
	Mem0[r3 + 8<i32>:word32] = r20
	r12 = Mem0[r29 + 88<i32>:word32]
	r13 = Mem0[r29 + 80<i32>:word32]
	branch p0 l000103B8
	// succ:  l000102E8 l000103B8
l000102E8:
	r7 = Mem0[r29 + 92<i32>:word64]
	r5 = Mem0[r29 + 68<i32>:word64]
	r6 = !(r13 == 1<32>)
	r2 = Mem0[r29 + 76<i32>:word64]
	r0 = Mem0[r29 + 84<i32>:word64]
	r9 = r5 * r7
	r4 = Mem0[r29 + 72<i32>:word64]
	r3 = Mem0[r29 + 64<i32>:word64]
	p0 = r5 == 1<32>
	p2 = r0
	r0 = Mem0[r29 + 96<i32>:word32]
	p1 = r4 == 1<32>
	r9 = r9 * r13
	r8 = r3 * r2
	r9 = r14 + 0<32>
	p2 = r7 == 1<32>
	r2 = r12 == 0<32>
	r4 = r13 * r5
	p0 = r0
	r8 = r8 * r12
	r5 = !(r12 == 1<32>)
	r8 = r14 + 0<32>
	r4 = r14 + 0<32>
	r7 = 0<32>
	r14 = 0<32>
	r13_r12 = r25_r26
	branch p0 l000103A8
	// succ:  l0001034C l000103A8
l0001034C:
	p0 = r10 > 0<32>
	r15 = r13
	r28 = r12
	branch p0 l00010398
	// succ:  l00010358 l00010398
l00010358:
	p0 = r12 > 0<32>
	__loop(1<i32>, 0x0001035C<p32>, r20)
	r1_r0 = r15_r28
	r10 = r23
	branch p0 l0001038C
	// succ:  l00010368 l0001038C
l00010368:
	p0 = r13 > 0<32>
	__loop(0<i32>, 0x0001036C<p32>, r21)
	r16 = Mem0[r0:word32]
	r11 = Mem0[r1:word32]
	r1 = r1 + (r5 << 2<32>)
	r0 = r0 + (r6 << 2<32>)
	r11 = r16 + r11
	Mem0[r10:word32] = r11
	r10 = r10 + 4<i32>
	r23 = r23 + (r21 << 2<32>)
	// succ:  l0001038C
l0001038C:
	r15 = r15 + (r2 << 2<32>)
	r28 = r28 + (r3 << 2<32>)
	// succ:  l00010398
l00010398:
	branch r14 == r18 l00010358
	goto l000103AC
	// succ:  l000103AC l00010358
l000103A8:
	branch r7 == r24 l0001034C
	goto l000103BC
	// succ:  l000103BC l0001034C
l000103AC:
	r14 = r14 + 1<32>
	r12 = r12 + (r4 << 2<32>)
	r13 = r13 + (r22 << 2<32>)
	branch r7 == r24 l0001034C
	goto l000103BC
	// succ:  l000103BC l0001034C
l000103B8:
	Mem0[r29:byte] = r2
	r2 = Mem0[r29 + 60<i32>:word32]
	r0 = badva + 0x3D<32>
	goto l000103CC
	// succ:  l000103CC
l000103BC:
	r7 = r7 + 1<32>
	r26 = r26 + (r9 << 2<32>)
	Mem0[r29:byte] = r2
	r2 = Mem0[r29 + 60<i32>:word32]
	r0 = badva + 0x3D<32>
	// succ:  l000103CC
l000103CC:
	r2 = r19
	r1 = 0xBD<32>
	r4 = badva + 0x18<32>
	call logmsg_function (retsize: 0;)
	r0 = 0<32>
	// succ:  l000103E0
l000103E0:
	r19_r18 = Mem0[r29 + 144<i32>:word64]
	r17_r16 = Mem0[r29 + 152<i32>:word64]
	r23_r22 = Mem0[r29 + 128<i32>:word64]
	r21_r20 = Mem0[r29 + 136<i32>:word64]
	r27_r26 = Mem0[r29 + 112<i32>:word64]
	r25_r24 = Mem0[r29 + 120<i32>:word64]
	v42 = r30
	r31 = Mem0[v42 + 4<i32>:word32]
	r30 = Mem0[v42:word32]
	r29 = v42 + 8<i32>
	return
	// succ:  add_int32_execute_exit
add_int32_execute_exit:


// add_int32_check
// Return size: 0
define add_int32_check
add_int32_check_entry:
	r29 = fp
	// succ:  l000103F4
l000103F4:
	v4 = r29 - 8<i32>
	Mem0[v4:word32] = r30
	Mem0[v4 + 4<i32>:word32] = r31
	r30 = v4
	r29 = v4 - 16<i32>
	Mem0[r29 + 496<i32>:word64] = r17_r16
	r4 = badva + 6<32>
	r16 = r1
	r1 = 0x37<32>
	r17 = r0
	Mem0[r29:word32] = r17
	r2 = r16
	r0 = badva + 0x19<32>
	call logmsg_function (retsize: 0;)
	branch r2 == 4<32> l0001044C
	// succ:  l00010428 l0001044C
l00010428:
	r2 = Mem0[r17 + 16<i32>:word32]
	r1 = 0x38<32>
	r0 = badva + 0x3D<32>
	r3 = badva + 0x1A<32>
	r2 = r16
	call errlog_function (retsize: 0;)
	// succ:  l0001043C
l0001043C:
	v16 = r30
	r31 = Mem0[v16 + 4<i32>:word32]
	r30 = Mem0[v16:word32]
	r29 = v16 + 8<i32>
	return
	// succ:  add_int32_check_exit
l0001044C:
	branch r2 == 2<32> l0001046C
	// succ:  l00010454 l0001046C
l00010454:
	r0 = badva + 0x11<32>
	goto l0001043C
	// succ:  l0001043C
l0001046C:
	r2 = r16
	r1 = 0x3A<32>
	Mem0[r29:word32] = r17
	call fn00010490 (retsize: 0;)
	r4 = badva + 0x35<32>
	r0 = 0<32>
	v17 = r30
	r31 = Mem0[v17 + 4<i32>:word32]
	r30 = Mem0[v17:word32]
	r29 = v17 + 8<i32>
	return
	// succ:  add_int32_check_exit
add_int32_check_exit:


// logmsg_function
// Return size: 0
define logmsg_function
logmsg_function_entry:
	r29 = fp
	// succ:  l00010488
l00010488:
	v4 = r29 - 8<i32>
	Mem0[v4:word32] = r30
	Mem0[v4 + 4<i32>:word32] = r31
	r30 = v4
	r29 = v4 - 8<i32>
	r3 = 2<32>
	branch r3 >u r5 l000104AC
	goto l00010498
	// succ:  l00010498 l0001048C_thunk_errlog_function
l0001048C_thunk_errlog_function:
	call errlog_function (retsize: 0;)
	return
	// succ:  logmsg_function_exit
l00010498:
	r5 = Mem0[r2 + 16<i32>:word32]
	Mem0[r29 + 1<i32>:byte] = r6
	r6 = r29 + 0x10<32>
	r5 = r29 + 0x10<32>
	v11 = r30
	r31 = Mem0[v11 + 4<i32>:word32]
	r30 = Mem0[v11:word32]
	r29 = v11 + 8<i32>
	return
	// succ:  logmsg_function_exit
logmsg_function_exit:


// fn00010490
// Return size: 0
define fn00010490
fn00010490_entry:
	r29 = fp
	// succ:  l00010490
l00010490:
	branch r3 >u r5 l00010490_thunk_errlog_function
	goto l00010498_in_fn00010490
	// succ:  l00010498_in_fn00010490 l00010490_thunk_errlog_function
l00010490_thunk_errlog_function:
	call errlog_function (retsize: 0;)
	return
	// succ:  fn00010490_exit
l00010498_in_fn00010490:
	r5 = Mem0[r2 + 16<i32>:word32]
	Mem0[r29 + 1<i32>:byte] = r6
	r6 = r29 + 0x10<32>
	r5 = r29 + 0x10<32>
	v8 = r30
	r31 = Mem0[v8 + 4<i32>:word32]
	r30 = Mem0[v8:word32]
	r29 = v8 + 8<i32>
	return
	// succ:  fn00010490_exit
fn00010490_exit:


// errlog_function
// Return size: 0
define errlog_function
errlog_function_entry:
	r29 = fp
	// succ:  l000104AC
l000104AC:
	v4 = r29 - 8<i32>
	Mem0[v4:word32] = r30
	Mem0[v4 + 4<i32>:word32] = r31
	r30 = v4
	r29 = v4 - 8<i32>
	r4 = r3
	r3 = 0<32>
	Mem0[r29 + 1<i32>:byte] = r6
	r6 = r29 + 0x10<32>
	r5 = r29 + 0x10<32>
	call logv (retsize: 0;)
	r0 = Mem0[r0:word32]
	r0 = Mem0[r0:word32]
	r0 = Mem0[r0:word32]
	r0 = Mem0[r0:word32]
errlog_function_exit:


// prod_f_execute
// Return size: 0
define prod_f_execute
prod_f_execute_entry:
	r29 = fp
	// succ:  l000104D0
l000104D0:
	v4 = r29 - 8<i32>
	Mem0[v4:word32] = r30
	Mem0[v4 + 4<i32>:word32] = r31
	r30 = v4
	r29 = v4 - 48<i32>
	r28 = 1<32>
	r8 = Mem0[r0 + 4<i32>:word32]
	r2 = Mem0[r0 + 8<i32>:word32]
	Mem0[r29 + 40<i32>:word64] = r17_r16
	r6 = Mem0[r0 + 16<i32>:word32]
	r14 = Mem0[r2:word32]
	r7 = Mem0[r8:word32]
	r2 = r1
	Mem0[r29 + 24<i32>:word64] = r21_r20
	Mem0[r29 + 32<i32>:word64] = r19_r18
	r17 = 1<32>
	p0 = r6 == 3<32>
	r3 = Mem0[r7 + 12<i32>:word32]
	r15 = Mem0[r7:word32]
	r10 = 1<32>
	r1 = 1<32>
	r5 = Mem0[r7 + 4<i32>:word32]
	r4 = Mem0[r7 + 8<i32>:word32]
	r13_r12 = r3_r15
	r18 = 0<32>
	r7 = Mem0[r14 + 16<i32>:word32]
	r6 = Mem0[r7 + 16<i32>:word32]
	Mem0[r29 + 8<i32>:word64] = r25_r24
	Mem0[r29 + 16<i32>:word64] = r23_r22
	Mem0[r29:word64] = r27_r26
	branch p0 l0001053C
	// succ:  l00010530 l0001053C
l00010530:
	r9_r8 = 0x100000001<64>
	r13_r12 = 0x100000001<64>
	goto l0001067C
	// succ:  l0001067C
l0001053C:
	r1 = Mem0[r8 + 4<i32>:word32]
	r10 = Mem0[r8 + 8<i32>:word32]
	r9_r8 = r4_r5
	r11 = Mem0[r1 + 12<i32>:word32]
	r10 = Mem0[r10 + 16<i32>:word32]
	r10 = Mem0[r10:word32]
	r1 = Mem0[r1 + 16<i32>:word32]
	r16 = r1 + 0<32>
	r9_r8 = r4_r5
	p0 = r11 == 0<32>
	branch p0 l000105B8
	// succ:  l00010568 l000105B8
l00010568:
	r13_r12 = r3_r15
	__loop(0<i32>, 0x00010570<p32>, r11)
	r16 = r16 + 4<i32>
	r17 = Mem0[r16:word32]
	branch r17 > 6<32> l00010590
	// succ:  l00010580 l00010590
l00010580:
	r17 = r10 + (0x7F<32> - r17)
	r12 = 1<32>
	r13 = 1<32>
	r9_r8 = 0x100000001<64>
	r13 = 1<32>
	branch p0 l000105AC
	goto l00010594
	// succ:  l00010594 l000105AC
l00010590:
	r13 = 1<32>
	// succ:  l00010594
l00010594:
	p0 = r9 == 0<32>
	r9 = 1<32>
	branch p0 l000105AC
	// succ:  l0001059C l000105AC
l0001059C:
	p0 = r9 == 2<32>
	r8 = 1<32>
	branch p0 l000105AC
	// succ:  l000105A4 l000105AC
l000105A4:
	p0 = r9 == 4<32>
	r12 = 1<32>
	p0 = r17 == 3<32>
	// succ:  l000105AC
l000105AC:
	r18 = r11
	// succ:  l000105B8
l000105B8:
	branch r0 == 4<32> l000105E8
	// succ:  l000105CC l000105E8
l000105CC:
	r0 = Mem0[r0 + 32<i32>:int8]
	r11 = r9
	p0 = r18 == 0<32>
	r1 = r13
	r28 = r12
	r17 = r8
	goto l0001067C
	// succ:  l0001067C
l000105E8:
	r17_r16 = r8_r12
	r0 = r13 + 0<32>
	branch p0 l00010638
	// succ:  l000105F4 l00010638
l000105F4:
	__loop(0<i32>, 0x000105F8<p32>, r18)
	r1 = r1 + 4<i32>
	r18 = Mem0[r1:word32]
	branch r18 > 6<32> l00010618
	// succ:  l00010608 l00010618
l00010608:
	r18 = r10 + (0x7F<32> - r18)
	r16 = 0<32>
	r0 = 0<32>
	r17 = 0<32>
	goto l00010630
	// succ:  l00010630
l00010618:
	r0 = 0<32>
	r11 = 0<32>
	branch p0 l00010630
	// succ:  l00010624 l00010630
l00010624:
	p0 = r10 == 2<32>
	r17 = 0<32>
	branch p0 l00010630
	// succ:  l0001062C l00010630
l0001062C:
	p0 = r10 == 4<32>
	r16 = -1<i32>
	p0 = r18 == 3<32>
	// succ:  l00010630
l00010630:
	// succ:  l00010638
l00010638:
	p3 = r0 == 0<32>
	p0 = r11 == 0<32>
	p2 = r17 == 0<32>
	p1 = r16 == 0<32>
	p1 = p1 | p2
	r1 = r17 + 0<32>
	p2 = p1 | p0
	r17 = r16 == 1<32>
	r1 = r11 + 0<32>
	r10 = r1 + 0<32>
	branch p3 l0001067C
	// succ:  l0001066C l0001067C
l0001066C:
	r1 = r0
	r10 = r1
	r17 = r10
	r28 = r17
	// succ:  l0001067C
l0001067C:
	r11 = Mem0[r14 + 20<i32>:word32]
	p0 = r12 > 0<32>
	r0 = r13 * r9
	r0 = r0 * r8
	r0 = r0 * r12
	branch r0 >u r11 l000106BC
	// succ:  l0001069C l000106BC
l0001069C:
	r0 = r0 << 2<32>
	r1 = 0xC6<32>
	r0 = badva + 0x3A<32>
	call fn000108FC (retsize: 0;)
	r3 = badva + 0xD<32>
	r0 = 0xFFFFFFFF<32>
	goto l00010814
	// succ:  l00010814
l000106BC:
	Mem0[r14 + 24<i32>:word32] = r0
	Mem0[r14 + 12<i32>:word32] = r1
	Mem0[r14 + 4<i32>:word32] = r17
	Mem0[r14 + 8<i32>:word32] = r10
	r0 = 0<32>
	Mem0[r14:word32] = r28
	r1 = 0x3F800000<32>
	branch p0 l00010814
	// succ:  l000106E0 l00010814
l000106E0:
	p2 = r8 == 1<32>
	p1 = r13 == 1<32>
	p3 = r9 == 1<32>
	p0 = r12 == 1<32>
	r28 = !(r4 == 1<32>)
	r15 = r5 == 1<32>
	p0 = r8 > 0<32>
	r10 = 0<32>
	branch p0 l00010808
l00010704:
	p0 = r8 > 0<32>
	r10 = 0<32>
	// succ:  l0001070C l00010808
l0001070C:
	p0 = r9 > 0<32>
	r11 = 0<32>
	branch p0 l00010800
l00010710:
	p0 = r9 > 0<32>
	r11 = 0<32>
	// succ:  l00010718 l00010800
l00010718:
	branch p0 l000107F8
l0001071C:
	// succ:  l00010720 l000107F8
l00010720:
	p0 = r13 > 0<32>
	// succ:  l00010724
l00010724:
	r18 = r1
	branch p0 l000107E4
	// succ:  l0001072C l000107E4
l0001072C:
	p0 = r2 > 0<32>
	p0 = r15 > 0<32>
	r22 = r19 + r0
	branch p0 l000107DC
l00010734:
	p0 = r15 > 0<32>
	r22 = r19 + r0
	// succ:  l0001073C l000107DC
l0001073C:
	r21 = r21 + r22 * r5
	p0 = r28 > 0<32>
	r24 = r21 + r20
	branch p0 l000107D4
l00010748:
	p0 = r28 > 0<32>
	r24 = r21 + r20
	// succ:  l00010750 l000107D4
l00010750:
	__loop(1<i32>, 0x0001075C<p32>, r28)
	r23 = r23 + r24 * r4
	p0 = r14 > 0<32>
	r24 = r17
	r25 = r23 + r22
	branch p0 l000107C8
	// succ:  l0001076C l000107C8
l0001076C:
	p0 = r14 >u 1<32>
	r26 = r14 + 0xFFFFFFFF<32>
	r27 = r26 + 0xFFFFFFFF<32>
	r24 = r24 + r25 * r3
	r25 = r6 + (r24 << 2<32>)
	r24 = r25 + 4<32>
	r25 = Mem0[r25:word32]
	branch p0 l00010794
	// succ:  l0001078C l00010794
l0001078C:
	r24 = r25
	goto l000107C4
	// succ:  l000107C4
l00010794:
	r24 = Mem0[r24:word32]
	r26 = r24 + 4<32>
	p0 = r26 >u 1<32>
	__loop(0<i32>, 0x000107A8<p32>, r27)
	branch p0 l000107C0
	// succ:  l000107A8 l000107C0
l000107A8:
	r24 = Mem0[r26:word32]
	r26 = r26 + 4<32>
	r27 = r24
	r25 = r27
	// succ:  l000107C0
l000107C0:
	// succ:  l000107C4
l000107C4:
	// succ:  l000107C8
l000107C8:
	r22 = r22 + 1<32>
	// succ:  l000107D4
l000107D4:
	branch r20 == r15 l00010748
	goto l000107E0
	// succ:  l000107E0 l00010748
l000107DC:
	branch r19 == r2 l00010734
	goto l000107E8
	// succ:  l000107E8 l00010734
l000107E0:
	r20 = r20 + 1<32>
	branch r19 == r2 l00010734
	goto l000107E8
	// succ:  l000107E8 l00010734
l000107E4:
	Mem0[r16:word32] = r18
	r17 = r17
	r16 = r16 + 4<32>
	goto l000107EC
	// succ:  l000107EC
l000107E8:
	Mem0[r16:word32] = r18
	r17 = r17
	// succ:  l000107EC
l000107EC:
	p0 = r17 == r13
	branch p0 l00010724
	// succ:  l000107F4 l00010724
l000107F4:
	r7 = r7 + (r13 << 2<32>)
	// succ:  l000107F8
l000107F8:
	branch r11 == r9 l0001071C
	goto l00010804
	// succ:  l00010804 l0001071C
l00010800:
	branch r10 == r8 l00010710
	goto l0001080C
	// succ:  l0001080C l00010710
l00010804:
	r11 = r11 + 1<32>
	branch r10 == r8 l00010710
	goto l0001080C
	// succ:  l0001080C l00010710
l00010808:
	branch r0 == r12 l00010704
	goto l00010814
	// succ:  l00010814 l00010704
l0001080C:
	r10 = r10 + 1<32>
	branch r0 == r12 l00010704
	// succ:  l00010814 l00010704
l00010814:
	r19_r18 = Mem0[r29 + 32<i32>:word64]
	r17_r16 = Mem0[r29 + 40<i32>:word64]
	r23_r22 = Mem0[r29 + 16<i32>:word64]
	r21_r20 = Mem0[r29 + 24<i32>:word64]
	r27_r26 = Mem0[r29:word64]
	r25_r24 = Mem0[r29 + 8<i32>:word64]
	v39 = r30
	r31 = Mem0[v39 + 4<i32>:word32]
	r30 = Mem0[v39:word32]
	r29 = v39 + 8<i32>
	return
	// succ:  prod_f_execute_exit
prod_f_execute_exit:


// prod_f_check
// Return size: 0
define prod_f_check
prod_f_check_entry:
	r29 = fp
	// succ:  l00010830
l00010830:
	v4 = r29 - 8<i32>
	Mem0[v4:word32] = r30
	Mem0[v4 + 4<i32>:word32] = r31
	r30 = v4
	r29 = v4 - 16<i32>
	Mem0[r29 + 496<i32>:word64] = r17_r16
	r4 = badva + 0x27<32>
	r17 = r0
	r16 = r1
	r1 = 0x37<32>
	Mem0[r29:word32] = r17
	r2 = r16
	call logmsg_function (retsize: 0;)
	r2 = Mem0[r17 + 16<i32>:word32]
	branch r3 >u r2 l00010880
	// succ:  l0001085C l00010880
l0001085C:
	r3 = 4<32>
	r1 = 0x38<32>
	r0 = badva + 0x23<32>
	r3 = badva + 0x3F<32>
	// succ:  l0001086C
l0001086C:
	r2 = r16
	call errlog_function (retsize: 0;)
	v16 = r30
	r31 = Mem0[v16 + 4<i32>:word32]
	r30 = Mem0[v16:word32]
	r29 = v16 + 8<i32>
	return
	// succ:  prod_f_check_exit
l00010880:
	r1 = 0x39<32>
	goto l0001086C
	// succ:  l0001086C
prod_f_check_exit:


// logmsg_function
// Return size: 0
define logmsg_function
logmsg_function_entry:
	r29 = fp
	// succ:  l000108CC
l000108CC:
	v4 = r29 - 8<i32>
	Mem0[v4:word32] = r30
	Mem0[v4 + 4<i32>:word32] = r31
	r30 = v4
	r29 = v4 - 8<i32>
	r3 = 2<32>
	branch r3 >u r5 l000108D0_thunk_errlog_function
	goto l000108DC
	// succ:  l000108DC l000108D0_thunk_errlog_function
l000108D0_thunk_errlog_function:
	call errlog_function (retsize: 0;)
	return
	// succ:  logmsg_function_exit
l000108DC:
	r5 = Mem0[r2 + 16<i32>:word32]
	r5 = r29 + 0x10<32>
	r3 = 2<32>
	r0 = badva + 0x23<32>
	Mem0[r29 + 1<i32>:byte] = r6
	r6 = r29 + 0x10<32>
	call logv (retsize: 0;)
	// succ:  l000108E4_thunk_errlog_function
l000108E4_thunk_errlog_function:
	call errlog_function (retsize: 0;)
	return
	// succ:  logmsg_function_exit
logmsg_function_exit:


// errlog_function
// Return size: 0
define errlog_function
errlog_function_entry:
	r29 = fp
	// succ:  l000108F4
l000108F4:
	v4 = r29 - 8<i32>
	Mem0[v4:word32] = r30
	Mem0[v4 + 4<i32>:word32] = r31
	r30 = v4
	r29 = v4 - 8<i32>
	r4 = r3
	r3 = 0<32>
	Mem0[r29 + 1<i32>:byte] = r6
	r6 = r29 + 0x10<32>
	r5 = r29 + 0x10<32>
	call logv (retsize: 0;)
	// succ:  l000108FC_thunk_mul_int32_execute
l000108FC_thunk_mul_int32_execute:
	call mul_int32_execute (retsize: 0;)
	return
	// succ:  errlog_function_exit
errlog_function_exit:


// fn000108FC
// Return size: 0
define fn000108FC
fn000108FC_entry:
	r29 = fp
	// succ:  l000108FC
l000108FC:
	Mem0[r29 + 1<i32>:byte] = r6
	r6 = r29 + 0x10<32>
	r5 = r29 + 0x10<32>
	call logv (retsize: 0;)
	// succ:  l000108FC_thunk_mul_int32_execute
l000108FC_thunk_mul_int32_execute:
	call mul_int32_execute (retsize: 0;)
	return
	// succ:  fn000108FC_exit
fn000108FC_exit:


// mul_int32_execute
// Return size: 0
define mul_int32_execute
mul_int32_execute_entry:
	r29 = fp
	// succ:  l00010910
l00010910:
	v4 = r29 - 8<i32>
	Mem0[v4:word32] = r30
	Mem0[v4 + 4<i32>:word32] = r31
	r30 = v4
	r29 = v4 - 160<i32>
	r5 = r0
	r3 = Mem0[r5 + 8<i32>:word32]
	r2 = Mem0[r5 + 4<i32>:word32]
	Mem0[r29 + 144<i32>:word64] = r19_r18
	Mem0[r29 + 112<i32>:word64] = r27_r26
	r19 = Mem0[r2 + 4<i32>:word32]
	r26 = Mem0[r2:word32]
	Mem0[r29 + 128<i32>:word64] = r23_r22
	Mem0[r29 + 136<i32>:word64] = r21_r20
	r22 = 0<32>
	r0 = Mem0[r26:word32]
	r6 = Mem0[r26 + 4<i32>:word32]
	r4 = Mem0[r19 + 4<i32>:word32]
	r8 = Mem0[r19:word32]
	p1 = r0 == 1<32>
	p0 = r6 == 1<32>
	r12 = Mem0[r26 + 8<i32>:word32]
	r10 = p1
	Mem0[r29 + 92<i32>:word32] = r4
	r9 = Mem0[r19 + 8<i32>:word32]
	p2 = r12 == 1<32>
	r18 = p0 ? r4 : r6
	r7 = Mem0[r26 + 12<i32>:word32]
	r4 = p1 ? r8 : r0
	r0 = Mem0[r19 + 12<i32>:word32]
	p1 = r7 == 1<32>
	r2 = r4 * r18
	Mem0[r29 + 76<i32>:word32] = r6
	Mem0[r29 + 120<i32>:word64] = r25_r24
	r20 = p2 ? r9 : r12
	r21 = p1 ? r0 : r7
	r2 = r2 * r20
	Mem0[r29 + 152<i32>:word64] = r17_r16
	r25 = Mem0[r3:word32]
	r6 = r1
	r2 = r2 * r21
	Mem0[r29 + 72<i32>:word32] = r8
	Mem0[r29 + 96<i32>:word32] = r10
	r10 = p2
	Mem0[r29 + 84<i32>:word32] = r10
	Mem0[r29 + 68<i32>:word32] = r9
	Mem0[r29 + 80<i32>:word32] = r0
	Mem0[r29 + 104<i32>:word32] = r4
	r16 = r2 << 2<32>
	branch p0 l000109BC
	// succ:  l000109B8 l000109BC
l000109B8:
	r22 = r7 * r12
	// succ:  l000109BC
l000109BC:
	r2 = r6
	r1 = 0xBD<32>
	r0 = badva + 0x17<32>
	Mem0[r29 + 64<i32>:word32] = r12
	r3 = Mem0[r19 + 16<i32>:word32]
	r4 = badva + 0x26<32>
	Mem0[r29 + 88<i32>:word32] = r7
	r23 = Mem0[r25 + 16<i32>:word32]
	r27 = r5
	r24 = r6
	r17 = Mem0[r26 + 16<i32>:word32]
	Mem0[r29:word32] = r5
	Mem0[r29 + 100<i32>:word32] = r3
	call logmsg_function (retsize: 0;)
	branch r16 >u r2 l00010A2C
	// succ:  l00010A08 l00010A2C
l00010A08:
	r2 = Mem0[r25 + 20<i32>:word32]
	r1 = 0xBD<32>
	r2 = r24
	r0 = badva + 0xF<32>
	r3 = badva + 0<32>
	// succ:  l00010A18
l00010A18:
	call errlog_function (retsize: 0;)
	r0 = 0xFFFFFFFF<32>
	goto l00010C50
	// succ:  l00010C50
l00010A2C:
	r5 = Mem0[r26:word32]
	r7 = Mem0[r26 + 8<i32>:word32]
	r8 = Mem0[r26 + 12<i32>:word32]
	p0 = r5 == r13
	r12 = Mem0[r19 + 12<i32>:word32]
	r6 = Mem0[r26 + 4<i32>:word32]
	r3 = Mem0[r19 + 4<i32>:word32]
	r9 = Mem0[r19 + 8<i32>:word32]
	Mem0[r29 + 52<i32>:word32] = r16
	Mem0[r29 + 48<i32>:word32] = r25
	Mem0[r29 + 60<i32>:word32] = r27
	Mem0[r29 + 56<i32>:word32] = r17
	branch p0 l00010A6C
	// succ:  l00010A60 l00010A6C
l00010A60:
	branch p0 l00010A6C
	// succ:  l00010A64 l00010A6C
l00010A64:
	p0 = r5 == 2<32>
	p0 = r13 == 1<32>
	branch p0 l00010AA8
	// succ:  l00010A6C l00010AA8
l00010A6C:
	branch p0 l00010A7C
	// succ:  l00010A70 l00010A7C
l00010A70:
	p0 = r6 == -1<i32>
	branch p0 l00010A7C
	// succ:  l00010A74 l00010A7C
l00010A74:
	p0 = r6 == 2<32>
	branch p0 l00010AA8
	// succ:  l00010A7C l00010AA8
l00010A7C:
	p0 = r3 == 2<32>
	p0 = r7 == r9
	branch p0 l00010A90
	// succ:  l00010A84 l00010A90
l00010A84:
	branch p0 l00010A90
	// succ:  l00010A88 l00010A90
l00010A88:
	p0 = r7 == 2<32>
	p0 = r9 == 1<32>
	branch p0 l00010AA8
	// succ:  l00010A90 l00010AA8
l00010A90:
	p0 = r8 == r12
	branch p0 l00010ADC
	// succ:  l00010A98 l00010ADC
l00010A98:
	p0 = r8 == 1<32>
	branch p0 l00010ADC
	// succ:  l00010AA0 l00010ADC
l00010AA0:
	p0 = r12 == 1<32>
	branch p0 l00010ADC
	// succ:  l00010AA8 l00010ADC
l00010AA8:
	Mem0[r29 + 28<i32>:word32] = r12
	r1 = 0xBD<32>
	r0 = badva + 0x2B<32>
	Mem0[r29 + 16<i32>:word32] = r13
	Mem0[r29 + 24<i32>:word32] = r9
	Mem0[r29 + 8<i32>:word32] = r7
	Mem0[r29 + 20<i32>:word32] = r3
	r3 = badva + 0x1E<32>
	Mem0[r29 + 4<i32>:word32] = r6
	Mem0[r29 + 12<i32>:word32] = r8
	Mem0[r29:word32] = r5
	goto l00010A18
	// succ:  l00010A18
l00010ADC:
	Mem0[r29 + 44<i32>:word32] = r21
	r24 = Mem0[r29 + 104<i32>:word32]
	r19 = r2
	Mem0[r29 + 20<i32>:word32] = r3
	Mem0[r29 + 36<i32>:word32] = r18
	r0 = badva + 0x2B<32>
	Mem0[r29 + 40<i32>:word32] = r20
	r1 = 0xBD<32>
	r4 = badva + 0x1A<32>
	Mem0[r29 + 28<i32>:word32] = r12
	Mem0[r29 + 32<i32>:word32] = r24
	Mem0[r29 + 16<i32>:word32] = r13
	Mem0[r29 + 24<i32>:word32] = r9
	Mem0[r29 + 8<i32>:word32] = r7
	Mem0[r29 + 12<i32>:word32] = r8
	Mem0[r29:word32] = r5
	Mem0[r29 + 4<i32>:word32] = r6
	call logmsg_function (retsize: 0;)
	r26 = Mem0[r29 + 100<i32>:word32]
	r3 = Mem0[r29 + 48<i32>:word32]
	r14 = 0<32>
	p0 = r24 > 0<32>
	r25 = Mem0[r29 + 56<i32>:word32]
	Mem0[r3 + 6<i32>:byte] = r2
	r2 = Mem0[r29 + 52<i32>:word32]
	Mem0[r3 + 4<i32>:word32] = r18
	Mem0[r3 + 12<i32>:word32] = r21
	Mem0[r3 + 8<i32>:word32] = r20
	r12 = Mem0[r29 + 88<i32>:word32]
	r13 = Mem0[r29 + 80<i32>:word32]
	branch p0 l00010C28
	// succ:  l00010B58 l00010C28
l00010B58:
	r7 = Mem0[r29 + 92<i32>:word64]
	r5 = Mem0[r29 + 68<i32>:word64]
	r6 = !(r13 == 1<32>)
	r2 = Mem0[r29 + 76<i32>:word64]
	r0 = Mem0[r29 + 84<i32>:word64]
	r9 = r5 * r7
	r4 = Mem0[r29 + 72<i32>:word64]
	r3 = Mem0[r29 + 64<i32>:word64]
	p0 = r5 == 1<32>
	p2 = r0
	r0 = Mem0[r29 + 96<i32>:word32]
	p1 = r4 == 1<32>
	r9 = r9 * r13
	r8 = r3 * r2
	r9 = r14 + 0<32>
	p2 = r7 == 1<32>
	r2 = r12 == 0<32>
	r4 = r13 * r5
	p0 = r0
	r8 = r8 * r12
	r5 = !(r12 == 1<32>)
	r8 = r14 + 0<32>
	r4 = r14 + 0<32>
	r7 = 0<32>
	r14 = 0<32>
	r13_r12 = r25_r26
	branch p0 l00010C18
	// succ:  l00010BBC l00010C18
l00010BBC:
	p0 = r10 > 0<32>
	r15 = r13
	r28 = r12
	branch p0 l00010C08
	// succ:  l00010BC8 l00010C08
l00010BC8:
	p0 = r12 > 0<32>
	__loop(1<i32>, 0x00010BCC<p32>, r20)
	r1_r0 = r15_r28
	r10 = r23
	branch p0 l00010BFC
	// succ:  l00010BD8 l00010BFC
l00010BD8:
	p0 = r13 > 0<32>
	__loop(0<i32>, 0x00010BDC<p32>, r21)
	r16 = Mem0[r0:word32]
	r11 = Mem0[r1:word32]
	r1 = r1 + (r5 << 2<32>)
	r0 = r0 + (r6 << 2<32>)
	r11 = r16 * r11
	Mem0[r10:word32] = r11
	r10 = r10 + 4<i32>
	r23 = r23 + (r21 << 2<32>)
	// succ:  l00010BFC
l00010BFC:
	r15 = r15 + (r2 << 2<32>)
	r28 = r28 + (r3 << 2<32>)
	// succ:  l00010C08
l00010C08:
	branch r14 == r18 l00010BC8
	goto l00010C1C
	// succ:  l00010C1C l00010BC8
l00010C18:
	branch r7 == r24 l00010BBC
	goto l00010C2C
	// succ:  l00010C2C l00010BBC
l00010C1C:
	r14 = r14 + 1<32>
	r12 = r12 + (r4 << 2<32>)
	r13 = r13 + (r22 << 2<32>)
	branch r7 == r24 l00010BBC
	goto l00010C2C
	// succ:  l00010C2C l00010BBC
l00010C28:
	Mem0[r29:byte] = r2
	r2 = Mem0[r29 + 60<i32>:word32]
	r0 = badva + 0x2B<32>
	goto l00010C3C
	// succ:  l00010C3C
l00010C2C:
	r7 = r7 + 1<32>
	r26 = r26 + (r9 << 2<32>)
	Mem0[r29:byte] = r2
	r2 = Mem0[r29 + 60<i32>:word32]
	r0 = badva + 0x2B<32>
	// succ:  l00010C3C
l00010C3C:
	r2 = r19
	r1 = 0xBD<32>
	r4 = badva + 6<32>
	call logmsg_function (retsize: 0;)
	r0 = 0<32>
	// succ:  l00010C50
l00010C50:
	r19_r18 = Mem0[r29 + 144<i32>:word64]
	r17_r16 = Mem0[r29 + 152<i32>:word64]
	r23_r22 = Mem0[r29 + 128<i32>:word64]
	r21_r20 = Mem0[r29 + 136<i32>:word64]
	r27_r26 = Mem0[r29 + 112<i32>:word64]
	r25_r24 = Mem0[r29 + 120<i32>:word64]
	v42 = r30
	r31 = Mem0[v42 + 4<i32>:word32]
	r30 = Mem0[v42:word32]
	r29 = v42 + 8<i32>
	return
	// succ:  mul_int32_execute_exit
mul_int32_execute_exit:


// mul_int32_check
// Return size: 0
define mul_int32_check
mul_int32_check_entry:
	r29 = fp
	// succ:  l00010C64
l00010C64:
	v4 = r29 - 8<i32>
	Mem0[v4:word32] = r30
	Mem0[v4 + 4<i32>:word32] = r31
	r30 = v4
	r29 = v4 - 16<i32>
	Mem0[r29 + 496<i32>:word64] = r17_r16
	r4 = badva + 0x34<32>
	r16 = r1
	r1 = 0x37<32>
	r17 = r0
	Mem0[r29:word32] = r17
	r2 = r16
	r0 = badva + 7<32>
	call logmsg_function (retsize: 0;)
	branch r2 == 4<32> l00010CBC
	// succ:  l00010C98 l00010CBC
l00010C98:
	r2 = Mem0[r17 + 16<i32>:word32]
	r1 = 0x38<32>
	r0 = badva + 0x2B<32>
	r3 = badva + 8<32>
	r2 = r16
	call errlog_function (retsize: 0;)
	// succ:  l00010CAC
l00010CAC:
	v16 = r30
	r31 = Mem0[v16 + 4<i32>:word32]
	r30 = Mem0[v16:word32]
	r29 = v16 + 8<i32>
	return
	// succ:  mul_int32_check_exit
l00010CBC:
	branch r2 == 2<32> l00010CDC
	// succ:  l00010CC4 l00010CDC
l00010CC4:
	r0 = badva + 0x3F<32>
	goto l00010CAC
	// succ:  l00010CAC
l00010CDC:
	r2 = r16
	r1 = 0x3A<32>
	Mem0[r29:word32] = r17
	call fn00010D00 (retsize: 0;)
	r4 = badva + 0x23<32>
	r0 = 0<32>
	v17 = r30
	r31 = Mem0[v17 + 4<i32>:word32]
	r30 = Mem0[v17:word32]
	r29 = v17 + 8<i32>
	return
	// succ:  mul_int32_check_exit
mul_int32_check_exit:


// logmsg_function
// Return size: 0
define logmsg_function
logmsg_function_entry:
	r29 = fp
	// succ:  l00010CF8
l00010CF8:
	v4 = r29 - 8<i32>
	Mem0[v4:word32] = r30
	Mem0[v4 + 4<i32>:word32] = r31
	r30 = v4
	r29 = v4 - 8<i32>
	r3 = 2<32>
	branch r3 >u r5 l00010CFC_thunk_errlog_function
	goto l00010D08
	// succ:  l00010D08 l00010CFC_thunk_errlog_function
l00010CFC_thunk_errlog_function:
	call errlog_function (retsize: 0;)
	return
	// succ:  logmsg_function_exit
l00010D08:
	r5 = Mem0[r2 + 16<i32>:word32]
	Mem0[r29 + 1<i32>:byte] = r6
	r6 = r29 + 0x10<32>
	r5 = r29 + 0x10<32>
	v11 = r30
	r31 = Mem0[v11 + 4<i32>:word32]
	r30 = Mem0[v11:word32]
	r29 = v11 + 8<i32>
	return
	// succ:  logmsg_function_exit
logmsg_function_exit:


// fn00010D00
// Return size: 0
define fn00010D00
fn00010D00_entry:
	r29 = fp
	// succ:  l00010D00
l00010D00:
	branch r3 >u r5 l00010D00_thunk_errlog_function
	goto l00010D08_in_fn00010D00
	// succ:  l00010D08_in_fn00010D00 l00010D00_thunk_errlog_function
l00010D00_thunk_errlog_function:
	call errlog_function (retsize: 0;)
	return
	// succ:  fn00010D00_exit
l00010D08_in_fn00010D00:
	r5 = Mem0[r2 + 16<i32>:word32]
	Mem0[r29 + 1<i32>:byte] = r6
	r6 = r29 + 0x10<32>
	r5 = r29 + 0x10<32>
	v8 = r30
	r31 = Mem0[v8 + 4<i32>:word32]
	r30 = Mem0[v8:word32]
	r29 = v8 + 8<i32>
	return
	// succ:  fn00010D00_exit
fn00010D00_exit:


// errlog_function
// Return size: 0
define errlog_function
errlog_function_entry:
	r29 = fp
	// succ:  l00010D1C
l00010D1C:
	v4 = r29 - 8<i32>
	Mem0[v4:word32] = r30
	Mem0[v4 + 4<i32>:word32] = r31
	r30 = v4
	r29 = v4 - 8<i32>
	r4 = r3
	r3 = 0<32>
	Mem0[r29 + 1<i32>:byte] = r6
	r6 = r29 + 0x10<32>
	r5 = r29 + 0x10<32>
	call logv (retsize: 0;)
	r0 = Mem0[r0:word32]
	r0 = Mem0[r0:word32]
	r0 = Mem0[r0:word32]
	r0 = Mem0[r0:word32]
	// succ:  l00010D3C_thunk_pack_execute
l00010D3C_thunk_pack_execute:
	call pack_execute (retsize: 0;)
	return
	// succ:  errlog_function_exit
errlog_function_exit:


// pack_execute
// Return size: 0
define pack_execute
pack_execute_entry:
	r29 = fp
	// succ:  l00010D40
l00010D40:
	v4 = r29 - 8<i32>
	Mem0[v4:word32] = r30
	Mem0[v4 + 4<i32>:word32] = r31
	r30 = v4
	r29 = v4 - 56<i32>
	Mem0[r29 + 496<i32>:word64] = r17_r16
	r17 = r0
	r7 = r1
	Mem0[r29 + 8<i32>:word64] = r27_r26
	r3 = Mem0[r17 + 4<i32>:word32]
	r2 = Mem0[r17 + 8<i32>:word32]
	Mem0[r29 + 32<i32>:word64] = r21_r20
	Mem0[r29 + 40<i32>:word64] = r19_r18
	r19 = Mem0[r2:word32]
	r26 = Mem0[r3:word32]
	Mem0[r29 + 24<i32>:word64] = r23_r22
	r20 = Mem0[r17 + 16<i32>:word32]
	r2 = Mem0[r26 + 24<i32>:word32]
	r4 = r3 + 4<32>
	p0 = r20 > 1<32>
	Mem0[r29 + 16<i32>:word64] = r25_r24
	r21 = Mem0[r26 + 8<i32>:word32]
	r23 = Mem0[r26 + 4<i32>:word32]
	r25 = Mem0[r26:word32]
	r24 = r2
	r18 = Mem0[r19 + 16<i32>:word32]
	r22 = Mem0[r26 + 12<i32>:word32]
	r5 = r20 + 0xFFFFFFFF<32>
	branch p0 l00010E24
	// succ:  l00010D98 l00010E24
l00010D98:
	r24 = r2
	__loop(0<i32>, 0x00010DA0<p32>, r5)
	r5 = Mem0[r4:word32]
	r3 = badva + 0<32>
	branch r6 == r25 l00010DC0
	// succ:  l00010DB8 l00010DC0
l00010DB8:
	r6 = Mem0[r5:word32]
	r1 = 0x42<32>
	branch r6 == r23 l00010DE0
	goto l00010DD0
	// succ:  l00010DD0 l00010DE0
l00010DC0:
	branch r6 == r23 l00010DE0
	// succ:  l00010DD0 l00010DE0
l00010DD0:
	r6 = Mem0[r5 + 4<i32>:word32]
	r3 = badva + 0x24<32>
	r1 = 0x43<32>
	branch r6 == r21 l00010DF8
	goto l00010DE8
	// succ:  l00010DE8 l00010DF8
l00010DE0:
	branch r6 == r21 l00010DF8
	// succ:  l00010DE8 l00010DF8
l00010DE8:
	r6 = Mem0[r5 + 8<i32>:word32]
	r3 = badva + 0xC<32>
	r1 = 0x44<32>
	branch r6 == r22 l00010E10
	goto l00010E00
	// succ:  l00010E00 l00010E10
l00010DF8:
	branch r6 == r22 l00010E10
	// succ:  l00010E00 l00010E10
l00010E00:
	r6 = Mem0[r5 + 12<i32>:word32]
	r3 = badva + 0x34<32>
	r1 = 0x45<32>
	branch r5 == r2 l00010E28
	goto l00010E18
	// succ:  l00010E18 l00010E28
l00010E10:
	branch r5 == r2 l00010E28
	// succ:  l00010E18 l00010E28
l00010E18:
	r5 = Mem0[r5 + 24<i32>:word32]
	r3 = badva + 0x26<32>
	r1 = 0x46<32>
	r24 = r24 + r2
	r4 = r4 + 4<32>
	// succ:  l00010E24
l00010E24:
	r1 = 0x4A<32>
	r3 = badva + 0xF<32>
	goto l00010E30
	// succ:  l00010E30
l00010E28:
	r1 = 0x4A<32>
	r3 = badva + 0xF<32>
	// succ:  l00010E30
l00010E30:
	branch r24 >u r4 l00010EC4
	// succ:  l00010E3C l00010EC4
l00010E3C:
	r4 = Mem0[r19 + 20<i32>:word32]
	Mem0[r29 + 4<i32>:word32] = r7
	r16 = 4<32>
	r27 = r20
	// succ:  l00010E48
l00010E48:
	r1 = Mem0[r26 + 16<i32>:word32]
	r0 = r18
	call fn00009560 (retsize: 0;)
	branch r27 == 0<32> l00010E7C
	// succ:  l00010E64 l00010E7C
l00010E64:
	r3 = Mem0[r26 + 24<i32>:word32]
	r27 = r27 + 0xFFFFFFFF<32>
	r26 = Mem0[r13 + r16:word32]
	r16 = r16 + 4<32>
	r2 = Mem0[r26 + 24<i32>:word32]
	goto l00010E48
	// succ:  l00010E48
l00010E7C:
	r20 = r25
	Mem0[r19 + 4<i32>:word32] = r23
	Mem0[r19 + 24<i32>:word32] = r24
	r0 = 0<32>
	Mem0[r19 + 8<i32>:word32] = r21
	Mem0[r19:word32] = r20
	Mem0[r19 + 12<i32>:word32] = r22
	goto l00010ECC
	// succ:  l00010ECC
l00010EC4:
	r2 = r7
	r0 = 0xFFFFFFFF<32>
	// succ:  l00010ECC
l00010ECC:
	r19_r18 = Mem0[r29 + 40<i32>:word64]
	r17_r16 = Mem0[r29 + 48<i32>:word64]
	r23_r22 = Mem0[r29 + 24<i32>:word64]
	r21_r20 = Mem0[r29 + 32<i32>:word64]
	r27_r26 = Mem0[r29 + 8<i32>:word64]
	r25_r24 = Mem0[r29 + 16<i32>:word64]
	v36 = r30
	r31 = Mem0[v36 + 4<i32>:word32]
	r30 = Mem0[v36:word32]
	r29 = v36 + 8<i32>
	return
	// succ:  pack_execute_exit
pack_execute_exit:


// pack_check
// Return size: 0
define pack_check
pack_check_entry:
	r29 = fp
	// succ:  l00010EE0
l00010EE0:
	v4 = r29 - 8<i32>
	Mem0[v4:word32] = r30
	Mem0[v4 + 4<i32>:word32] = r31
	r30 = v4
	r29 = v4 - 16<i32>
	Mem0[r29 + 496<i32>:word64] = r17_r16
	r17 = r0
	r16 = r1
	Mem0[r29:word32] = r17
	r2 = r16
	call logmsg_function (retsize: 0;)
	branch r2 == 0<32> l00010F14
	// succ:  l00010F04 l00010F14
l00010F04:
	r2 = Mem0[r17 + 16<i32>:word32]
	r1 = 0x5F<32>
	goto l00010F2C
	// succ:  l00010F2C
l00010F14:
	branch r2 == 2<32> l00010F14_thunk_fn00010F3C
	goto l00010F20
	// succ:  l00010F20 l00010F14_thunk_fn00010F3C
l00010F14_thunk_fn00010F3C:
	call fn00010F3C (retsize: 0;)
	return
	// succ:  pack_check_exit
l00010F20:
	r2 = Mem0[r17 + 20<i32>:word32]
	r3 = badva + 0x38<32>
	r2 = r16
	call errlog_function (retsize: 0;)
	// succ:  l00010F2C
l00010F2C:
	r0 = 0xFFFFFFFF<32>
	v15 = r30
	r31 = Mem0[v15 + 4<i32>:word32]
	r30 = Mem0[v15:word32]
	r29 = v15 + 8<i32>
	return
	// succ:  pack_check_exit
pack_check_exit:


// logmsg_function
// Return size: 0
define logmsg_function
logmsg_function_entry:
	r29 = fp
	// succ:  l00010F34
l00010F34:
	v4 = r29 - 8<i32>
	Mem0[v4:word32] = r30
	Mem0[v4 + 4<i32>:word32] = r31
	r30 = v4
	r29 = v4 - 8<i32>
	r4 = 2<32>
	branch r4 >u r3 l00010F38_thunk_errlog_function
logmsg_function_exit:


// fn00010F3C
// Return size: 0
define fn00010F3C
fn00010F3C_entry:
	r29 = fp
	goto l00010F3C
	// succ:  l00010F3C
l00010F38_thunk_errlog_function:
	call errlog_function (retsize: 0;)
	return
	// succ:  fn00010F3C_exit
l00010F3C:
	branch r4 >u r3 l00010F3C_thunk_errlog_function
	goto l00010F44_in_fn00010F3C
	// succ:  l00010F44_in_fn00010F3C l00010F3C_thunk_errlog_function
l00010F3C:
	// succ:  l00010F44 l00010F38_thunk_errlog_function
l00010F3C_thunk_errlog_function:
	call errlog_function (retsize: 0;)
	return
	// succ:  fn00010F3C_exit
l00010F44:
	r3 = Mem0[r2 + 16<i32>:word32]
	r5 = r29 + 0x10<32>
	r3 = 2<32>
	r0 = badva + 0x19<32>
	r6 = r29 + 0x10<32>
	r1 = 0x5E<32>
	r4 = badva + 0x27<32>
	Mem0[r29 + 4<i32>:word32] = r6
	call logv (retsize: 0;)
	v15 = r30
	r31 = Mem0[v15 + 4<i32>:word32]
	r30 = Mem0[v15:word32]
	r29 = v15 + 8<i32>
	return
	// succ:  fn00010F3C_exit
l00010F44_in_fn00010F3C:
	r3 = Mem0[r2 + 16<i32>:word32]
	r5 = r29 + 0x10<32>
	r3 = 2<32>
	r0 = badva + 0x19<32>
	r6 = r29 + 0x10<32>
	r1 = 0x5E<32>
	r4 = badva + 0x27<32>
	Mem0[r29 + 4<i32>:word32] = r6
	call logv (retsize: 0;)
	v12 = r30
	r31 = Mem0[v12 + 4<i32>:word32]
	r30 = Mem0[v12:word32]
	r29 = v12 + 8<i32>
	return
	// succ:  fn00010F3C_exit
fn00010F3C_exit:


// errlog_function
// Return size: 0
define errlog_function
errlog_function_entry:
	r29 = fp
	// succ:  l00010F68
l00010F68:
	v4 = r29 - 8<i32>
	Mem0[v4:word32] = r30
	Mem0[v4 + 4<i32>:word32] = r31
	r30 = v4
	r29 = v4 - 8<i32>
	r4 = r3
	r0 = badva + 0x31<32>
	Mem0[r29 + 1<i32>:byte] = r6
	r6 = r29 + 0x10<32>
	r5 = r29 + 0x10<32>
	r3 = 0<32>
	v13 = r30
	r31 = Mem0[v13 + 4<i32>:word32]
	r30 = Mem0[v13:word32]
	r29 = v13 + 8<i32>
	return
	// succ:  errlog_function_exit
errlog_function_exit:


// shape_execute
// Return size: 0
define shape_execute
shape_execute_entry:
	r29 = fp
	// succ:  l00010F90
l00010F90:
	v4 = r29 - 8<i32>
	Mem0[v4:word32] = r30
	Mem0[v4 + 4<i32>:word32] = r31
	r30 = v4
	r29 = v4 - 24<i32>
	Mem0[r29 + 496<i32>:word64] = r17_r16
	r4 = badva + 0x37<32>
	r1 = 0x31<32>
	r17_r16 = r1_r0
	Mem0[r29 + 8<i32>:word64] = r19_r18
	r3 = Mem0[r16 + 4<i32>:word32]
	r5 = Mem0[r16 + 8<i32>:word32]
	r2 = r17
	r19 = Mem0[r3:word32]
	Mem0[r29:word32] = r16
	r18 = Mem0[r5:word32]
	call logmsg_function (retsize: 0;)
	branch r2 >u 0x1E<32> l00010FDC
	// succ:  l00010FC4 l00010FDC
l00010FC4:
	r2 = Mem0[r18 + 20<i32>:word32]
	r2 = r17
	r1 = 0x33<32>
	r3 = badva + 0x1F<32>
	call errlog_function (retsize: 0;)
	r0 = 0xFFFFFFFF<32>
	goto l00011024
	// succ:  l00011024
l00010FDC:
	Mem0[r18 + 4<i32>:word32] = 1<32>
	r2 = Mem0[r18 + 16<i32>:word32]
	r4 = badva + 0x15<32>
	Mem0[r18 + 12<i32>:word32] = 0xFFFFFF84<32>
	Mem0[r18:word32] = 1<32>
	r1 = 0x3B<32>
	Mem0[r18 + 8<i32>:word32] = 1<32>
	Mem0[r2:byte] = r3
	r3 = Mem0[r19:word32]
	Mem0[r7 + 4<i32>:word32] = r6
	r2 = Mem0[r19 + 8<i32>:word32]
	r3 = Mem0[r18 + 16<i32>:word32]
	Mem0[r3 + 8<i32>:word32] = r2
	r2 = r17
	r7 = Mem0[r19 + 12<i32>:word32]
	r5 = Mem0[r18 + 16<i32>:word32]
	Mem0[r18 + 24<i32>:word32] = 0x10<32>
	Mem0[r5 + 12<i32>:word32] = r7
	Mem0[r29:word32] = r16
	call logmsg_function (retsize: 0;)
	r0 = 0<32>
	// succ:  l00011024
l00011024:
	r19_r18 = Mem0[r29 + 8<i32>:word64]
	r17_r16 = Mem0[r29 + 16<i32>:word64]
	v23 = r30
	r31 = Mem0[v23 + 4<i32>:word32]
	r30 = Mem0[v23:word32]
	r29 = v23 + 8<i32>
	return
	// succ:  shape_execute_exit
shape_execute_exit:


// shape_check
// Return size: 0
define shape_check
shape_check_entry:
	r29 = fp
	// succ:  l00011030
l00011030:
	v4 = r29 - 8<i32>
	Mem0[v4:word32] = r30
	Mem0[v4 + 4<i32>:word32] = r31
	r30 = v4
	r29 = v4 - 16<i32>
	Mem0[r29 + 496<i32>:word64] = r17_r16
	r4 = badva + 0xF<32>
	r17 = r0
	r16 = r1
	r1 = 0x41<32>
	Mem0[r29:word32] = r17
	r2 = r16
	call logmsg_function (retsize: 0;)
	branch r2 == 2<32> l00011078
	// succ:  l0001105C l00011078
l0001105C:
	r2 = Mem0[r17 + 16<i32>:word32]
	r1 = 0x42<32>
	r3 = badva + 0x3E<32>
	r2 = r16
	call errlog_function (retsize: 0;)
	// succ:  l00011068
l00011068:
	v16 = r30
	r31 = Mem0[v16 + 4<i32>:word32]
	r30 = Mem0[v16:word32]
	r29 = v16 + 8<i32>
	return
	// succ:  shape_check_exit
l00011078:
	branch r2 == 2<32> l00011090
	// succ:  l00011080 l00011090
l00011080:
	goto l00011068
	// succ:  l00011068
l00011090:
	r2 = r16
	r1 = 0x44<32>
	Mem0[r29:word32] = r17
	call logmsg_function (retsize: 0;)
	r0 = 0<32>
	v17 = r30
	r31 = Mem0[v17 + 4<i32>:word32]
	r30 = Mem0[v17:word32]
	r29 = v17 + 8<i32>
	return
	// succ:  shape_check_exit
shape_check_exit:


// logmsg_function
// Return size: 0
define logmsg_function
logmsg_function_entry:
	r29 = fp
	// succ:  l000110A8
l000110A8:
	v4 = r29 - 8<i32>
	Mem0[v4:word32] = r30
	Mem0[v4 + 4<i32>:word32] = r31
	r30 = v4
	r29 = v4 - 8<i32>
	r3 = 2<32>
	branch r3 >u r5 l000110AC_thunk_errlog_function
	goto l000110B8
	// succ:  l000110B8 l000110AC_thunk_errlog_function
l000110AC_thunk_errlog_function:
	call errlog_function (retsize: 0;)
	return
	// succ:  logmsg_function_exit
l000110B8:
	r5 = Mem0[r2 + 16<i32>:word32]
	r5 = r29 + 0x10<32>
	r3 = 2<32>
	r0 = badva + 0x30<32>
	Mem0[r29 + 1<i32>:byte] = r6
	r6 = r29 + 0x10<32>
	call logv (retsize: 0;)
	// succ:  l000110C0_thunk_errlog_function
l000110C0_thunk_errlog_function:
	call errlog_function (retsize: 0;)
	return
	// succ:  logmsg_function_exit
logmsg_function_exit:


// errlog_function
// Return size: 0
define errlog_function
errlog_function_entry:
	r29 = fp
	// succ:  l000110D0
l000110D0:
	v4 = r29 - 8<i32>
	Mem0[v4:word32] = r30
	Mem0[v4 + 4<i32>:word32] = r31
	r30 = v4
	r29 = v4 - 8<i32>
	r4 = r3
	r0 = badva + 0x14<32>
	Mem0[r29 + 1<i32>:byte] = r6
	r6 = r29 + 0x10<32>
	r5 = r29 + 0x10<32>
	r3 = 0<32>
	v13 = r30
	r31 = Mem0[v13 + 4<i32>:word32]
	r30 = Mem0[v13:word32]
	r29 = v13 + 8<i32>
	return
	// succ:  errlog_function_exit
errlog_function_exit:


// and_int32_execute
// Return size: 0
define and_int32_execute
and_int32_execute_entry:
	r29 = fp
	// succ:  l00011100
l00011100:
	// succ:  l00011100_thunk_fn000111C8
l00011100_thunk_fn000111C8:
	call fn000111C8 (retsize: 0;)
	return
	// succ:  and_int32_execute_exit
and_int32_execute_exit:


// logical_int32_check
// Return size: 0
define logical_int32_check
logical_int32_check_entry:
	r29 = fp
	// succ:  l0001110C
l0001110C:
	v4 = r29 - 8<i32>
	Mem0[v4:word32] = r30
	Mem0[v4 + 4<i32>:word32] = r31
	r30 = v4
	r29 = v4 - 16<i32>
	Mem0[r29 + 496<i32>:word64] = r17_r16
	r4 = badva + 0x12<32>
	r16 = r1
	r1 = 0x3E<32>
	r17 = r0
	Mem0[r29:word32] = r17
	r2 = r16
	r0 = badva + 0x21<32>
	call logmsg_function (retsize: 0;)
	branch r2 == 4<32> l00011164
	// succ:  l00011140 l00011164
l00011140:
	r2 = Mem0[r17 + 16<i32>:word32]
	r1 = 0x3F<32>
	r0 = badva + 5<32>
	r3 = badva + 0x2D<32>
	r2 = r16
	call errlog_function (retsize: 0;)
	// succ:  l00011154
l00011154:
	v16 = r30
	r31 = Mem0[v16 + 4<i32>:word32]
	r30 = Mem0[v16:word32]
	r29 = v16 + 8<i32>
	return
	// succ:  logical_int32_check_exit
l00011164:
	branch r2 == 2<32> l00011184
	// succ:  l0001116C l00011184
l0001116C:
	r0 = badva + 0x19<32>
	goto l00011154
	// succ:  l00011154
l00011184:
	r2 = r16
	r1 = 0x41<32>
	Mem0[r29:word32] = r17
	call fn00011588 (retsize: 0;)
	r4 = badva + 4<32>
	r0 = 0<32>
	v17 = r30
	r31 = Mem0[v17 + 4<i32>:word32]
	r30 = Mem0[v17:word32]
	r29 = v17 + 8<i32>
	return
	// succ:  logical_int32_check_exit
logical_int32_check_exit:


// ior_int32_execute
// Return size: 0
define ior_int32_execute
ior_int32_execute_entry:
	r29 = fp
	// succ:  l000111A4
l000111A4:
	// succ:  l000111A4_thunk_fn000111C8
l000111A4_thunk_fn000111C8:
	call fn000111C8 (retsize: 0;)
	return
	// succ:  ior_int32_execute_exit
ior_int32_execute_exit:


// xor_int32_execute
// Return size: 0
define xor_int32_execute
xor_int32_execute_entry:
	r29 = fp
	// succ:  l000111B0
l000111B0:
	// succ:  l000111B0_thunk_fn000111C8
l000111B0_thunk_fn000111C8:
	call fn000111C8 (retsize: 0;)
	return
	// succ:  xor_int32_execute_exit
xor_int32_execute_exit:


// broadcast_elementwise_execute_int32
// Return size: 0
define broadcast_elementwise_execute_int32
broadcast_elementwise_execute_int32_entry:
	r29 = fp
	// succ:  l000111C0
l000111C0:
	v4 = r29 - 8<i32>
	Mem0[v4:word32] = r30
	Mem0[v4 + 4<i32>:word32] = r31
	r30 = v4
	r29 = v4 - 168<i32>
	Mem0[r29 - 48<i32>:word64] = r25_r24
	r25_r24 = r1_r0
	// succ:  l000111C0_thunk_fn000111C8
l000111C0_thunk_fn000111C8:
	call fn000111C8 (retsize: 0;)
	return
	// succ:  broadcast_elementwise_execute_int32_exit
l00011474:
	branch r2 > 0<32> l00011488
	// succ:  l0001147C l00011488
l0001147C:
	r2 = Mem0[r29 + 112<i32>:word32]
	Mem0[r29 + 100<i32>:word32] = r3
	goto l000114FC
	// succ:  l000114FC
l00011488:
	r21 = r6
	r23 = 0<32>
	Mem0[r29 + 96<i32>:word32] = r6
	Mem0[r29 + 92<i32>:word32] = r7
	Mem0[r29 + 100<i32>:word32] = r3
	r22 = r16
	r17 = r19
	r24 = r27
	r20 = r21
	// succ:  l0001149C
l0001149C:
	branch p0 l000114E4
	// succ:  l000114A4 l000114E4
l000114A4:
	p0 = r8 > 0<32>
	// succ:  l000114C0
l000114C0:
	r1 = Mem0[r17:word32]
	r0 = Mem0[r20:word32]
	call r18 (retsize: 0;)
	r22 = r22 + 0xFFFFFFFF<32>
	p0 = r22 == 0<32>
	r17 = r17 + (r26 << 2<32>)
	r20 = r20 + (r25 << 2<32>)
	Mem0[r24:word32] = r0
	r24 = r24 + 4<i32>
	branch p0 l000114C0
	// succ:  l000114E0 l000114C0
l000114E0:
	r27 = r27 + (r16 << 2<32>)
	// succ:  l000114E4
l000114E4:
	r7 = Mem0[r29 + 104<i32>:word64]
	r2 = Mem0[r29 + 108<i32>:word64]
	r23 = r23 + 1<32>
	r21 = r21 + (r2 << 2<32>)
	branch r2 == r23 l0001149C
	goto l00011500
	// succ:  l00011500 l0001149C
l000114FC:
	r6 = Mem0[r29 + 96<i32>:word64]
	r2 = Mem0[r29 + 84<i32>:word64]
	r3 = Mem0[r29 + 100<i32>:word64]
	r5 = Mem0[r29 + 72<i32>:word64]
	r2 = Mem0[r29 + 88<i32>:word64]
	r7 = Mem0[r29 + 92<i32>:word64]
	r6 = r6 + (r2 << 2<32>)
	r5 = Mem0[r29 + 76<i32>:word64]
	r4 = Mem0[r29 + 80<i32>:word64]
	r3 = r3 + (r5 << 2<32>)
	branch r7 == r2 l00011474
	goto l00011514_thunk_fn00011270
	// succ:  l00011514_thunk_fn00011270 l00011474
l00011500:
	r2 = Mem0[r29 + 112<i32>:word32]
	r19 = r19 + (r7 << 2<32>)
	r3 = Mem0[r29 + 100<i32>:word64]
	r5 = Mem0[r29 + 72<i32>:word64]
	r2 = Mem0[r29 + 88<i32>:word64]
	r7 = Mem0[r29 + 92<i32>:word64]
	r6 = r6 + (r2 << 2<32>)
	r5 = Mem0[r29 + 76<i32>:word64]
	r4 = Mem0[r29 + 80<i32>:word64]
	r3 = r3 + (r5 << 2<32>)
	branch r7 == r2 l00011474
	goto l00011524_thunk_fn00011270
	// succ:  l00011524_thunk_fn00011270 l00011474
l00011514_thunk_fn00011270:
	call fn00011270 (retsize: 0;)
	return
	// succ:  broadcast_elementwise_execute_int32_exit
l00011524_thunk_fn00011270:
	call fn00011270 (retsize: 0;)
	return
	// succ:  broadcast_elementwise_execute_int32_exit
broadcast_elementwise_execute_int32_exit:


// fn000111C8
// Return size: 0
define fn000111C8
fn000111C8_entry:
	r29 = fp
	// succ:  l000111C8
l000111C8:
	v4 = r29 - 8<i32>
	Mem0[v4:word32] = r30
	Mem0[v4 + 4<i32>:word32] = r31
	r30 = v4
	r29 = v4 - 168<i32>
	Mem0[r29 + 136<i32>:word64] = r23_r22
	r3 = Mem0[r24 + 4<i32>:word32]
	Mem0[r29 + 152<i32>:word64] = r19_r18
	r18 = r2
	r2 = 0<32>
	Mem0[r29 + 144<i32>:word64] = r21_r20
	Mem0[r29 + 160<i32>:word64] = r17_r16
	r23 = Mem0[r3:word32]
	r4 = Mem0[r24 + 8<i32>:word32]
	r19 = Mem0[r3 + 4<i32>:word32]
	Mem0[r29 + 120<i32>:word64] = r27_r26
	r12 = Mem0[r23 + 4<i32>:word32]
	r7 = Mem0[r19:word32]
	r0 = Mem0[r23:word32]
	p0 = r12 == 1<32>
	r21 = Mem0[r23 + 8<i32>:word32]
	r5 = Mem0[r19 + 4<i32>:word32]
	p1 = r0 == 1<32>
	Mem0[r29 + 104<i32>:word32] = r5
	r9 = Mem0[r19 + 8<i32>:word32]
	p2 = r21 == 1<32>
	r6 = p0 ? r5 : r12
	r8 = Mem0[r23 + 12<i32>:word32]
	r5 = p1 ? r7 : r0
	r10 = p1
	Mem0[r29 + 72<i32>:word32] = r7
	r0 = Mem0[r19 + 12<i32>:word32]
	p1 = r8 == 1<32>
	r3 = r5 * r6
	r17 = Mem0[r4:word32]
	r7 = p2 ? r9 : r21
	Mem0[r29 + 60<i32>:word32] = r12
	Mem0[r29 + 100<i32>:word32] = r10
	r10 = p2
	r3 = r3 * r7
	Mem0[r29 + 88<i32>:word32] = r6
	Mem0[r29 + 68<i32>:word32] = r5
	r16 = p1 ? r0 : r8
	Mem0[r29 + 108<i32>:word32] = r10
	Mem0[r29 + 64<i32>:word32] = r9
	r3 = r3 * r16
	Mem0[r29 + 92<i32>:word32] = r0
	Mem0[r29 + 112<i32>:word32] = r7
	Mem0[r29 + 84<i32>:word32] = r2
	r22 = r3 << 2<32>
	branch p0 l00011264_thunk_fn00011270
	goto l00011264_thunk_fn00011268
	// succ:  l00011264_thunk_fn00011268 l00011264_thunk_fn00011270
l000111C8:
	Mem0[r29 + 136<i32>:word64] = r23_r22
	r3 = Mem0[r24 + 4<i32>:word32]
	Mem0[r29 + 152<i32>:word64] = r19_r18
	r18 = r2
	r2 = 0<32>
	Mem0[r29 + 144<i32>:word64] = r21_r20
	Mem0[r29 + 160<i32>:word64] = r17_r16
	r23 = Mem0[r3:word32]
	r4 = Mem0[r24 + 8<i32>:word32]
	r19 = Mem0[r3 + 4<i32>:word32]
	Mem0[r29 + 120<i32>:word64] = r27_r26
	r12 = Mem0[r23 + 4<i32>:word32]
	r7 = Mem0[r19:word32]
	r0 = Mem0[r23:word32]
	p0 = r12 == 1<32>
	r21 = Mem0[r23 + 8<i32>:word32]
	r5 = Mem0[r19 + 4<i32>:word32]
	p1 = r0 == 1<32>
	Mem0[r29 + 104<i32>:word32] = r5
	r9 = Mem0[r19 + 8<i32>:word32]
	p2 = r21 == 1<32>
	r6 = p0 ? r5 : r12
	r8 = Mem0[r23 + 12<i32>:word32]
	r5 = p1 ? r7 : r0
	r10 = p1
	Mem0[r29 + 72<i32>:word32] = r7
	r0 = Mem0[r19 + 12<i32>:word32]
	p1 = r8 == 1<32>
	r3 = r5 * r6
	r17 = Mem0[r4:word32]
	r7 = p2 ? r9 : r21
	Mem0[r29 + 60<i32>:word32] = r12
	Mem0[r29 + 100<i32>:word32] = r10
	r10 = p2
	r3 = r3 * r7
	Mem0[r29 + 88<i32>:word32] = r6
	Mem0[r29 + 68<i32>:word32] = r5
	r16 = p1 ? r0 : r8
	Mem0[r29 + 108<i32>:word32] = r10
	Mem0[r29 + 64<i32>:word32] = r9
	r3 = r3 * r16
	Mem0[r29 + 92<i32>:word32] = r0
	Mem0[r29 + 112<i32>:word32] = r7
	Mem0[r29 + 84<i32>:word32] = r2
	r22 = r3 << 2<32>
	branch p0 l00011270
	// succ:  l00011260_thunk_fn00011268 l00011260_thunk_fn00011270
l00011260_thunk_fn00011268:
	call fn00011268 (retsize: 0;)
	return
	// succ:  fn000111C8_exit
l00011260_thunk_fn00011270:
	call fn00011270 (retsize: 0;)
	return
	// succ:  fn000111C8_exit
l00011264_thunk_fn00011268:
	call fn00011268 (retsize: 0;)
	return
	// succ:  fn000111C8_exit
l00011264_thunk_fn00011270:
	call fn00011270 (retsize: 0;)
	return
	// succ:  fn000111C8_exit
fn000111C8_exit:


// fn00011268
// Return size: 0
define fn00011268
fn00011268_entry:
	r29 = fp
	// succ:  l00011268
l00011268:
	r2 = r8 * r21
	Mem0[r29 + 84<i32>:word32] = r2
	// succ:  l0001126C_thunk_fn00011270
l0001126C_thunk_fn00011270:
	call fn00011270 (retsize: 0;)
	return
	// succ:  fn00011268_exit
fn00011268_exit:


// fn00011270
// Return size: 0
define fn00011270
fn00011270_entry:
	r29 = fp
	// succ:  l00011270
l00011270:
	r2 = r25
	r1 = 0xBD<32>
	r0 = badva + 0xB<32>
	Mem0[r29 + 96<i32>:word32] = r8
	r27 = Mem0[r17 + 16<i32>:word32]
	r4 = badva + 0x1A<32>
	r26 = Mem0[r23 + 16<i32>:word32]
	r20 = Mem0[r19 + 16<i32>:word32]
	Mem0[r29:word32] = r24
	call logmsg_function (retsize: 0;)
	branch r22 >u r2 l000112D4
	// succ:  l000112B0 l000112D4
l000112B0:
	r2 = Mem0[r17 + 20<i32>:word32]
	r1 = 0xBD<32>
	r2 = r25
	r0 = badva + 0xF<32>
	r3 = badva + 0<32>
	// succ:  l000112C0
l000112C0:
	call errlog_function (retsize: 0;)
	r0 = 0xFFFFFFFF<32>
	goto l00011564
	// succ:  l00011564
l000112D4:
	r7 = Mem0[r23 + 8<i32>:word32]
	r8 = Mem0[r23 + 12<i32>:word32]
	r12 = Mem0[r19 + 12<i32>:word32]
	r6 = Mem0[r23 + 4<i32>:word32]
	r3 = Mem0[r19 + 4<i32>:word32]
	r9 = Mem0[r19 + 8<i32>:word32]
	Mem0[r29 + 76<i32>:word32] = r26
	Mem0[r29 + 56<i32>:word32] = r22
	Mem0[r29 + 80<i32>:word32] = r20
	branch p0 l00011304
	// succ:  l000112FC l00011304
l000112FC:
	branch p0 l00011304
	// succ:  l00011300 l00011304
l00011300:
	p0 = r5 == 2<32>
	branch p0 l00011340
	// succ:  l00011304 l00011340
l00011304:
	p0 = r2 == 2<32>
	branch p0 l00011314
	// succ:  l0001130C l00011314
l0001130C:
	p0 = r6 == -1<i32>
	branch p0 l00011314
	// succ:  l00011310 l00011314
l00011310:
	p0 = r6 == 2<32>
	branch p0 l00011340
	// succ:  l00011314 l00011340
l00011314:
	p0 = r3 == 2<32>
	p0 = r7 == r9
	branch p0 l00011328
	// succ:  l0001131C l00011328
l0001131C:
	branch p0 l00011328
	// succ:  l00011320 l00011328
l00011320:
	p0 = r7 == 2<32>
	p0 = r9 == 1<32>
	branch p0 l00011340
	// succ:  l00011328 l00011340
l00011328:
	p0 = r8 == r12
	branch p0 l00011374
	// succ:  l00011330 l00011374
l00011330:
	p0 = r8 == 1<32>
	branch p0 l00011374
	// succ:  l00011338 l00011374
l00011338:
	p0 = r12 == 1<32>
	branch p0 l00011374
	// succ:  l00011340 l00011374
l00011340:
	Mem0[r29 + 28<i32>:word32] = r12
	r1 = 0xBD<32>
	r0 = badva + 0x3B<32>
	Mem0[r29 + 12<i32>:word32] = r8
	Mem0[r29 + 24<i32>:word32] = r9
	Mem0[r29 + 8<i32>:word32] = r7
	Mem0[r29 + 20<i32>:word32] = r3
	r3 = badva + 0x2E<32>
	Mem0[r29 + 4<i32>:word32] = r6
	Mem0[r29 + 16<i32>:word32] = r2
	r2 = r25
	Mem0[r29:word32] = r5
	goto l000112C0
	// succ:  l000112C0
l00011374:
	Mem0[r29 + 44<i32>:word32] = r16
	r23 = Mem0[r29 + 112<i32>:word64]
	r0 = badva + 7<32>
	r19 = Mem0[r29 + 68<i32>:word32]
	r1 = 0xBD<32>
	r4 = badva + 0x36<32>
	Mem0[r29 + 40<i32>:word32] = r23
	r20 = Mem0[r29 + 88<i32>:word64]
	Mem0[r29 + 32<i32>:word32] = r19
	Mem0[r29 + 36<i32>:word32] = r20
	Mem0[r29 + 28<i32>:word32] = r12
	Mem0[r29 + 52<i32>:word32] = r24
	Mem0[r29 + 24<i32>:word32] = r9
	Mem0[r29 + 48<i32>:word32] = r25
	Mem0[r29 + 8<i32>:word32] = r7
	Mem0[r29 + 20<i32>:word32] = r3
	Mem0[r29 + 4<i32>:word32] = r6
	Mem0[r29 + 16<i32>:word32] = r2
	r2 = r25
	Mem0[r29:word32] = r5
	Mem0[r29 + 12<i32>:word32] = r8
	call logmsg_function (retsize: 0;)
	r4 = Mem0[r29 + 80<i32>:word32]
	p0 = r19 > 0<32>
	r2 = Mem0[r29 + 56<i32>:word64]
	r5 = Mem0[r29 + 76<i32>:word64]
	Mem0[r17:word32] = r19
	Mem0[r17 + 24<i32>:word32] = r2
	Mem0[r17 + 8<i32>:word32] = r23
	Mem0[r17 + 4<i32>:word32] = r20
	Mem0[r17 + 12<i32>:word32] = r16
	branch p0 l0001153C
	// succ:  l000113DC l0001153C
l000113DC:
	r9 = Mem0[r29 + 64<i32>:word32]
	r2 = Mem0[r29 + 60<i32>:word32]
	r1 = 0<32>
	r0 = Mem0[r29 + 108<i32>:word64]
	r6 = Mem0[r29 + 104<i32>:word64]
	p0 = r9 == 1<32>
	r2 = r21 * r2
	r8 = Mem0[r29 + 92<i32>:word32]
	r7 = Mem0[r29 + 72<i32>:word32]
	r3 = r9 * r6
	p2 = r0
	r9 = r8 * r9
	r0 = Mem0[r29 + 100<i32>:word32]
	Mem0[r29 + 64<i32>:word32] = r1
	r7 = Mem0[r29 + 96<i32>:word64]
	p1 = r7 == 1<32>
	r3 = r3 * r8
	r25 = !(r7 == 1<32>)
	r6 = 0<32>
	p2 = r6 == 1<32>
	r12 = r7 == 0<32>
	r9 = r6 + 0<32>
	r26 = !(r8 == 1<32>)
	p0 = r0
	r2 = r2 * r7
	Mem0[r29 + 72<i32>:word32] = r9
	Mem0[r29 + 108<i32>:word32] = r12
	r2 = r6 + 0<32>
	r3 = r6 + 0<32>
	Mem0[r29 + 60<i32>:word32] = r2
	Mem0[r29 + 104<i32>:word32] = r13
	Mem0[r29 + 56<i32>:word32] = r3
	// succ:  l00011458
l00011458:
	r3 = r4
	Mem0[r29 + 76<i32>:word32] = r5
	r2 = Mem0[r29 + 88<i32>:word64]
	Mem0[r29 + 80<i32>:word32] = r4
	p0 = r2 > 0<32>
	branch p0 l0001151C
	// succ:  l00011470 l0001151C
l00011470:
	branch r2 > 0<32> l00011488
l0001151C:
	r7 = Mem0[r29 + 56<i32>:word64]
	r2 = Mem0[r29 + 60<i32>:word64]
	// succ:  l00011520
l00011520:
	r7 = r7 + 1<32>
	r3 = Mem0[r29 + 64<i32>:word32]
	r2 = Mem0[r29 + 68<i32>:word64]
	r3 = r3
	r4 = r4 + (r7 << 2<32>)
	r5 = r5 + (r2 << 2<32>)
	Mem0[r29 + 64<i32>:word32] = r3
	p0 = r3 == r2
	branch p0 l00011458
	// succ:  l0001153C l00011458
l0001153C:
	Mem0[r29:byte] = r2
	r2 = Mem0[r29 + 52<i32>:word32]
	r0 = badva + 0x3F<32>
	r2 = Mem0[r29 + 48<i32>:word32]
	r1 = 0xBD<32>
	r4 = badva + 0x1A<32>
	call logmsg_function (retsize: 0;)
	r0 = 0<32>
	// succ:  l00011564
l00011564:
	r19_r18 = Mem0[r29 + 152<i32>:word64]
	r17_r16 = Mem0[r29 + 160<i32>:word64]
	r23_r22 = Mem0[r29 + 136<i32>:word64]
	r21_r20 = Mem0[r29 + 144<i32>:word64]
	r27_r26 = Mem0[r29 + 120<i32>:word64]
	r25_r24 = Mem0[r29 + 128<i32>:word64]
	v27 = r30
	r31 = Mem0[v27 + 4<i32>:word32]
	r30 = Mem0[v27:word32]
	r29 = v27 + 8<i32>
	return
	// succ:  fn00011270_exit
fn00011270_exit:


// xor_helper
// Return size: 0
define xor_helper
xor_helper_entry:
	r29 = fp
	// succ:  l00011578
l00011578:
	return
	// succ:  xor_helper_exit
xor_helper_exit:


// logmsg_function
// Return size: 0
define logmsg_function
logmsg_function_entry:
	r29 = fp
	// succ:  l00011580
l00011580:
	v4 = r29 - 8<i32>
	Mem0[v4:word32] = r30
	Mem0[v4 + 4<i32>:word32] = r31
	r30 = v4
	r29 = v4 - 8<i32>
	r3 = 2<32>
	branch r3 >u r5 l00011584_thunk_errlog_function
	goto l00011590
	// succ:  l00011590 l00011584_thunk_errlog_function
l00011584_thunk_errlog_function:
	call errlog_function (retsize: 0;)
	return
	// succ:  logmsg_function_exit
l00011590:
	r5 = Mem0[r2 + 16<i32>:word32]
	Mem0[r29 + 1<i32>:byte] = r6
	r6 = r29 + 0x10<32>
	r5 = r29 + 0x10<32>
	v11 = r30
	r31 = Mem0[v11 + 4<i32>:word32]
	r30 = Mem0[v11:word32]
	r29 = v11 + 8<i32>
	return
	// succ:  logmsg_function_exit
logmsg_function_exit:


// fn00011588
// Return size: 0
define fn00011588
fn00011588_entry:
	r29 = fp
	// succ:  l00011588
l00011588:
	branch r3 >u r5 l00011588_thunk_errlog_function
	goto l00011590_in_fn00011588
	// succ:  l00011590_in_fn00011588 l00011588_thunk_errlog_function
l00011588_thunk_errlog_function:
	call errlog_function (retsize: 0;)
	return
	// succ:  fn00011588_exit
l00011590_in_fn00011588:
	r5 = Mem0[r2 + 16<i32>:word32]
	Mem0[r29 + 1<i32>:byte] = r6
	r6 = r29 + 0x10<32>
	r5 = r29 + 0x10<32>
	v8 = r30
	r31 = Mem0[v8 + 4<i32>:word32]
	r30 = Mem0[v8:word32]
	r29 = v8 + 8<i32>
	return
	// succ:  fn00011588_exit
fn00011588_exit:


// errlog_function
// Return size: 0
define errlog_function
errlog_function_entry:
	r29 = fp
	// succ:  l000115A4
l000115A4:
	v4 = r29 - 8<i32>
	Mem0[v4:word32] = r30
	Mem0[v4 + 4<i32>:word32] = r31
	r30 = v4
	r29 = v4 - 8<i32>
	r4 = r3
	r3 = 0<32>
	Mem0[r29 + 1<i32>:byte] = r6
	r6 = r29 + 0x10<32>
	r5 = r29 + 0x10<32>
	call logv (retsize: 0;)
	// succ:  l000115AC_thunk_ior_helper
l000115AC_thunk_ior_helper:
	call ior_helper (retsize: 0;)
	return
	// succ:  errlog_function_exit
errlog_function_exit:


// ior_helper
// Return size: 0
define ior_helper
ior_helper_entry:
	r29 = fp
	// succ:  l000115C0
l000115C0:
	return
	// succ:  ior_helper_exit
ior_helper_exit:


// and_helper
// Return size: 0
define and_helper
and_helper_entry:
	r29 = fp
	// succ:  l000115C8
l000115C8:
	return
	// succ:  and_helper_exit
and_helper_exit:


// avgpool_execute_asm
// Return size: 0
define avgpool_execute_asm
avgpool_execute_asm_entry:
	r29 = fp
	// succ:  l000115D0
l000115D0:
	// succ:  l000115D0_thunk_fn00011738
l000115D0_thunk_fn00011738:
	call fn00011738 (retsize: 0;)
	return
	// succ:  avgpool_execute_asm_exit
avgpool_execute_asm_exit:


// avgpool_check
// Return size: 0
define avgpool_check
avgpool_check_entry:
	r29 = fp
	// succ:  l000115DC
l000115DC:
	v4 = r29 - 8<i32>
	Mem0[v4:word32] = r30
	Mem0[v4 + 4<i32>:word32] = r31
	r30 = v4
	r29 = v4 - 48<i32>
	Mem0[r29 + 496<i32>:word64] = r17_r16
	r4 = badva + 0xA<32>
	r17 = r0
	r16 = r1
	r1 = 0x186<32>
	call logmsg_function (retsize: 0;)
	Mem0[r29:word32] = r17
	Mem0[r29 + 32<i32>:word64] = r19_r18
	branch r2 == 0xA<32> l00011628
	// succ:  l0001160C l00011628
l0001160C:
	r2 = Mem0[r17 + 16<i32>:word32]
	r1 = 0x187<32>
	r3 = badva + 0x37<32>
	// succ:  l00011610
l00011610:
	r2 = r16
	call errlog_function (retsize: 0;)
	// succ:  l00011618
l00011618:
	r0 = 0xFFFFFFFF<32>
	goto l00011718
	// succ:  l00011718
l00011628:
	branch r2 == 6<32> l00011644
	// succ:  l00011630 l00011644
l00011630:
	r1 = 0x188<32>
	goto l00011618
	// succ:  l00011618
l00011644:
	Mem0[r29:word32] = r17
	call logmsg_function (retsize: 0;)
	branch r2 == 0<32> l000116CC
	// succ:  l00011660 l000116CC
l00011660:
	r2 = Mem0[r17 + 16<i32>:word32]
	r19_r18 = 0<64>
	branch r2 == 0<32> l00011680
	// succ:  l0001166C l00011680
l0001166C:
	r2 = Mem0[r5 + r18:word32]
	Mem0[r29:word32] = r19
	r1 = 0x18E<32>
	r3 = badva + 0<32>
	goto l00011610
	// succ:  l00011610
l00011680:
	r6 = Mem0[r2 + 4<i32>:word32]
	r5 = Mem0[r2:word32]
	r4 = badva + 0x32<32>
	r8 = Mem0[r2 + 12<i32>:word32]
	r7 = Mem0[r2 + 8<i32>:word32]
	r1 = 0x180<32>
	r2 = Mem0[r2 + 16<i32>:word32]
	r9 = Mem0[r2 + 24<i32>:word32]
	Mem0[r29 + 12<i32>:word32] = r7
	Mem0[r29 + 24<i32>:word32] = r2
	Mem0[r29 + 16<i32>:word32] = r8
	Mem0[r29 + 20<i32>:word32] = r9
	Mem0[r29 + 4<i32>:word32] = r5
	Mem0[r29 + 8<i32>:word32] = r6
	Mem0[r29:word32] = r19
	call logmsg_function (retsize: 0;)
	r2 = Mem0[r17 + 16<i32>:word32]
	r18 = r18 + 4<32>
	branch r2 >u r19 l00011660
	// succ:  l000116C8 l00011660
l000116C8:
	r19 = r19 + 1<32>
	branch r2 == 0<32> l00011700
	goto l000116D0
	// succ:  l000116D0 l00011700
l000116CC:
	r3 = Mem0[r17 + 8<i32>:word32]
	goto l000116E0
	// succ:  l000116E0
l000116D0:
	r3 = Mem0[r17 + 8<i32>:word32]
	branch r2 >u r4 l00011704
	goto l000116E4
	// succ:  l000116E4 l00011704
l000116D8:
	branch r2 >u r4 l00011704
	goto l000116E4
	// succ:  l000116E4 l00011704
l000116E0:
	branch r5 == 1<32> l000116D8
	goto l000116EC
	// succ:  l000116EC l000116D8
l000116E4:
	r4 = r4 + 1<32>
	r3 = r3 + 4<32>
	branch r5 == 1<32> l000116D8
	// succ:  l000116EC l000116D8
l000116EC:
	r5 = Mem0[r3:word32]
	Mem0[r29:word32] = r4
	r1 = 0x194<32>
	r3 = badva + 0x16<32>
	goto l00011610
	// succ:  l00011610
l00011700:
	r4 = badva + 0x19<32>
	goto l00011708
	// succ:  l00011708
l00011704:
	// succ:  l00011708
l00011708:
	r1 = 0x197<32>
	Mem0[r29:word32] = r17
	call logmsg_function (retsize: 0;)
	r0 = 0<32>
	// succ:  l00011718
l00011718:
	r19_r18 = Mem0[r29 + 32<i32>:word64]
	r17_r16 = Mem0[r29 + 40<i32>:word64]
	v17 = r30
	r31 = Mem0[v17 + 4<i32>:word32]
	r30 = Mem0[v17:word32]
	r29 = v17 + 8<i32>
	return
	// succ:  avgpool_check_exit
avgpool_check_exit:


// avgpool_execute_ref
// Return size: 0
define avgpool_execute_ref
avgpool_execute_ref_entry:
	r29 = fp
	// succ:  l00011720
l00011720:
	// succ:  l00011720_thunk_fn00011738
l00011720_thunk_fn00011738:
	call fn00011738 (retsize: 0;)
	return
	// succ:  avgpool_execute_ref_exit
avgpool_execute_ref_exit:


// avgpool_execute
// Return size: 0
define avgpool_execute
avgpool_execute_entry:
	r29 = fp
	// succ:  l00011730
l00011730:
	v4 = r29 - 8<i32>
	Mem0[v4:word32] = r30
	Mem0[v4 + 4<i32>:word32] = r31
	r30 = v4
	r29 = v4 - 136<i32>
	Mem0[r29 + 496<i32>:word64] = r17_r16
	r17_r16 = r0_r1
	// succ:  l00011730_thunk_fn00011738
l00011730_thunk_fn00011738:
	call fn00011738 (retsize: 0;)
	return
	// succ:  avgpool_execute_exit
avgpool_execute_exit:


// fn00011738
// Return size: 0
define fn00011738
fn00011738_entry:
	r29 = fp
	// succ:  l00011738
l00011738:
	Mem0[r29 + 112<i32>:word64] = r21_r20
	r3 = Mem0[r17 + 4<i32>:word32]
	r4 = Mem0[r17 + 8<i32>:word32]
	r21 = Mem0[r17 + 32<i32>:int8]
	Mem0[r29 + 96<i32>:word64] = r25_r24
	Mem0[r29 + 88<i32>:word64] = r27_r26
	r25 = Mem0[r3 + 16<i32>:word32]
	r5 = Mem0[r3:word32]
	p0 = r21 == 0<32>
	Mem0[r29 + 8<i32>:word32] = r2
	r2 = Mem0[r3 + 8<i32>:word32]
	r26 = Mem0[r3 + 12<i32>:word32]
	r0 = p0
	Mem0[r29 + 24<i32>:word32] = r2
	r2 = Mem0[r3 + 4<i32>:word32]
	Mem0[r29 + 120<i32>:word64] = r19_r18
	Mem0[r29 + 104<i32>:word64] = r23_r22
	Mem0[r29 + 12<i32>:word32] = r2
	r27 = Mem0[r4:word32]
	r2 = Mem0[r5 + 8<i32>:word32]
	r23 = Mem0[r5:word32]
	r24 = Mem0[r5 + 12<i32>:word32]
	r20 = Mem0[r5 + 4<i32>:word32]
	r22 = Mem0[r25 + 4<i32>:word32]
	r1 = Mem0[r25 + 8<i32>:word32]
	r6 = Mem0[r4 + 4<i32>:word32]
	r18 = Mem0[r26 + 4<i32>:word32]
	r7 = Mem0[r4 + 8<i32>:word32]
	Mem0[r29 + 20<i32>:word32] = r7
	Mem0[r29 + 16<i32>:word32] = r6
	Mem0[r29 + 28<i32>:word32] = r0
	branch p0 l00011798_thunk_fn000117A4
	goto l00011798_thunk_fn000117A0
	// succ:  l00011798_thunk_fn000117A0 l00011798_thunk_fn000117A4
l00011738:
	Mem0[r29 + 112<i32>:word64] = r21_r20
	r3 = Mem0[r17 + 4<i32>:word32]
	r4 = Mem0[r17 + 8<i32>:word32]
	r21 = Mem0[r17 + 32<i32>:int8]
	Mem0[r29 + 96<i32>:word64] = r25_r24
	Mem0[r29 + 88<i32>:word64] = r27_r26
	r25 = Mem0[r3 + 16<i32>:word32]
	r5 = Mem0[r3:word32]
	p0 = r21 == 0<32>
	Mem0[r29 + 8<i32>:word32] = r2
	r2 = Mem0[r3 + 8<i32>:word32]
	r26 = Mem0[r3 + 12<i32>:word32]
	r0 = p0
	Mem0[r29 + 24<i32>:word32] = r2
	r2 = Mem0[r3 + 4<i32>:word32]
	Mem0[r29 + 120<i32>:word64] = r19_r18
	Mem0[r29 + 104<i32>:word64] = r23_r22
	Mem0[r29 + 12<i32>:word32] = r2
	r27 = Mem0[r4:word32]
	r2 = Mem0[r5 + 8<i32>:word32]
	r23 = Mem0[r5:word32]
	r24 = Mem0[r5 + 12<i32>:word32]
	r20 = Mem0[r5 + 4<i32>:word32]
	r22 = Mem0[r25 + 4<i32>:word32]
	r1 = Mem0[r25 + 8<i32>:word32]
	r6 = Mem0[r4 + 4<i32>:word32]
	r18 = Mem0[r26 + 4<i32>:word32]
	r7 = Mem0[r4 + 8<i32>:word32]
	Mem0[r29 + 20<i32>:word32] = r7
	Mem0[r29 + 16<i32>:word32] = r6
	Mem0[r29 + 28<i32>:word32] = r0
	branch p0 l000117A4
	goto l00011798_thunk_fn000117A0
	// succ:  l00011798_thunk_fn000117A0 l00011798_thunk_fn000117A4
l00011798_thunk_fn000117A0:
	call fn000117A0 (retsize: 0;)
	return
	// succ:  fn00011738_exit
l00011798_thunk_fn000117A0:
	call fn000117A0 (retsize: 0;)
	return
	// succ:  fn00011738_exit
l00011798_thunk_fn000117A4:
	call fn000117A4 (retsize: 0;)
	return
	// succ:  fn00011738_exit
l00011798_thunk_fn000117A4:
	call fn000117A4 (retsize: 0;)
	return
	// succ:  fn00011738_exit
fn00011738_exit:


// fn000117A0
// Return size: 0
define fn000117A0
fn000117A0_entry:
	r29 = fp
	// succ:  l000117A0
l000117A0:
	// succ:  l000117A0_thunk_fn000117A4
l000117A0_thunk_fn000117A4:
	call fn000117A4 (retsize: 0;)
	return
	// succ:  fn000117A0_exit
fn000117A0_exit:


// fn000117A4
// Return size: 0
define fn000117A4
fn000117A4_entry:
	r29 = fp
	// succ:  l000117A4
l000117A4:
	r3 = Mem0[r26 + 8<i32>:word32]
	r2 = r1 + r2
	branch p0 l000117C4
	// succ:  l000117B0 l000117C4
l000117B0:
	p0 = r13 == 4<32>
	r0 = r1 + 0<32>
	r19 = 0<32>
	branch p0 l000117D0
	// succ:  l000117BC l000117D0
l000117BC:
	p0 = r13 == 2<32>
	goto l000117CC
	// succ:  l000117CC
l000117C4:
	r0 = r2 - r3
	// succ:  l000117C8
l000117C8:
	call fn00009760 (retsize: 0;)
	// succ:  l000117CC
l000117CC:
	r19 = r0
	// succ:  l000117D0
l000117D0:
	r1 = r22 + 0<32>
	r2 = r22 + r20
	branch p0 l00011800
	// succ:  l000117DC l00011800
l000117DC:
	p0 = r13 == 4<32>
	r1_r0 = r22_r22
	branch p0 l000117F8
	// succ:  l000117E4 l000117F8
l000117E4:
	p0 = r13 == 2<32>
	r0 = Mem0[r29 + 28<i32>:word64]
	r21 = 0<32>
	r1_r0 = r22_r20
	branch p0 l00011810
	// succ:  l000117F4 l00011810
l000117F4:
	p0 = r0
	goto l00011804
	// succ:  l00011804
l000117F8:
	goto l00011808
	// succ:  l00011808
l00011800:
	r0 = r2 - r18
	// succ:  l00011804
l00011804:
	call fn00009760 (retsize: 0;)
	// succ:  l00011808
l00011808:
	r21 = r0
	Mem0[r29 + 32<i32>:word32] = r17
	r3_r2 = 0<64>
	r5 = r29 + 0x38<32>
	r4 = r29 + 0x20<32>
	goto l00011818
	// succ:  l00011818
l00011810:
	Mem0[r29 + 32<i32>:word32] = r17
	r3_r2 = 0<64>
	r5 = r29 + 0x38<32>
	// succ:  l00011818
l00011818:
	Mem0[r4 + 4<i32>:word32] = 0xFFFFFF81<32>
	r22 = r5 + 8<32>
	r20 = r4 + 8<32>
	Mem0[r29 + 56<i32>:word64] = r3_r2
	Mem0[r29 + 64<i32>:word64] = r3_r2
	Mem0[r4 + 20<i32>:word32] = 0<32>
	Mem0[r29 + 72<i32>:word64] = r3_r2
	Mem0[r4 + 12<i32>:word32] = 0<32>
	Mem0[r4 + 16<i32>:word32] = 0<32>
	Mem0[r29 + 56<i32>:word32] = r17
	Mem0[r4 + 8<i32>:word32] = 0<32>
	call fn00009740 (retsize: 0;)
	call fn00009740 (retsize: 0;)
	r4 = badva + 0<32>
	r1 = 0x151<32>
	Mem0[r29:word32] = r17
	call logmsg_function (retsize: 0;)
	branch r2 == 2<32> l00011880
	// succ:  l00011868 l00011880
l00011868:
	r2 = Mem0[r26:word32]
	branch r2 == 2<32> l00011880
	// succ:  l00011870 l00011880
l00011870:
	branch r2 == 2<32> l00011880
	// succ:  l00011878 l00011880
l00011878:
	branch r2 == 2<32> l0001189C
	// succ:  l00011880 l0001189C
l00011880:
	r1 = 0x156<32>
	r3 = badva + 0x22<32>
	r2 = r16
	call errlog_function (retsize: 0;)
	// succ:  l00011890
l00011890:
	r0 = 0xFFFFFFFF<32>
	goto l0001199C
	// succ:  l0001199C
l0001189C:
	r4 = Mem0[r27 + 20<i32>:word32]
	r1 = 0x158<32>
	r2 = r2 * r19
	branch r3 >u r4 l000118C0
	// succ:  l000118B4 l000118C0
l000118B4:
	r3 = r2 * r21
	goto l00011890
	// succ:  l00011890
l000118C0:
	branch r2 == 0<32> l000118DC
	// succ:  l000118CC l000118DC
l000118CC:
	r2 = Mem0[r17 + 32<i32>:int8]
	goto l00011890
	// succ:  l00011890
l000118DC:
	Mem0[r27 + 4<i32>:word32] = r21
	Mem0[r27 + 12<i32>:word32] = r24
	Mem0[r27:word32] = r23
	r1_r0 = r18_r16
	Mem0[r27 + 24<i32>:word32] = r3
	Mem0[r27 + 8<i32>:word32] = r19
	call nn_os_work_for_vector (retsize: 0;)
	r0 = r16
	r1 = r29 + 0x38<32>
	call r18 (retsize: 0;)
	r0 = r20
	call fn000096A0 (retsize: 0;)
	r4 = Mem0[r29 + 16<i32>:word64]
	r5 = Mem0[r29 + 12<i32>:word64]
	r2 = Mem0[r5:word32]
	Mem0[r4 + 1<i32>:byte] = r3
	r3 = Mem0[r5 + 4<i32>:word32]
	r2 = Mem0[r5 + 8<i32>:word32]
	Mem0[r4 + 8<i32>:word32] = r2
	r7 = Mem0[r5 + 12<i32>:word32]
	Mem0[r4 + 12<i32>:word32] = r7
	r2 = Mem0[r5 + 24<i32>:word32]
	branch r2 >u r6 l00011948
	// succ:  l0001193C l00011948
l0001193C:
	r6 = Mem0[r4 + 20<i32>:word32]
	r1 = Mem0[r5 + 16<i32>:word32]
	r2 = Mem0[r5 + 24<i32>:word32]
	call fn00009560 (retsize: 0;)
	r5 = Mem0[r29 + 20<i32>:word64]
	r4 = Mem0[r29 + 24<i32>:word64]
	// succ:  l00011948
l00011948:
	r2 = Mem0[r4:word32]
	Mem0[r5 + 1<i32>:byte] = r3
	r3 = Mem0[r4 + 4<i32>:word32]
	r2 = Mem0[r4 + 8<i32>:word32]
	Mem0[r5 + 8<i32>:word32] = r2
	r7 = Mem0[r4 + 12<i32>:word32]
	Mem0[r5 + 12<i32>:word32] = r7
	r2 = Mem0[r4 + 24<i32>:word32]
	branch r2 >u r6 l00011984
	// succ:  l00011978 l00011984
l00011978:
	r6 = Mem0[r5 + 20<i32>:word32]
	r1 = Mem0[r4 + 16<i32>:word32]
	r2 = Mem0[r4 + 24<i32>:word32]
	call fn00009560 (retsize: 0;)
	r4 = badva + 0x16<32>
	goto l0001198C
	// succ:  l0001198C
l00011984:
	r4 = badva + 0x16<32>
	// succ:  l0001198C
l0001198C:
	r1 = 0x165<32>
	Mem0[r29:word32] = r17
	call logmsg_function (retsize: 0;)
	r0 = 0<32>
	// succ:  l0001199C
l0001199C:
	r19_r18 = Mem0[r29 + 120<i32>:word64]
	r17_r16 = Mem0[r29 + 128<i32>:word64]
	r23_r22 = Mem0[r29 + 104<i32>:word64]
	r21_r20 = Mem0[r29 + 112<i32>:word64]
	r27_r26 = Mem0[r29 + 88<i32>:word64]
	r25_r24 = Mem0[r29 + 96<i32>:word64]
	v31 = r30
	r31 = Mem0[v31 + 4<i32>:word32]
	r30 = Mem0[v31:word32]
	r29 = v31 + 8<i32>
	return
	// succ:  fn000117A4_exit
fn000117A4_exit:


// avgpool_execute_slice_ref
// Return size: 0
define avgpool_execute_slice_ref
avgpool_execute_slice_ref_entry:
	r29 = fp
	goto l000119B0
	// succ:  l000119B0
l00009730_in_avgpool_execute_slice_ref:
	r14 = badva + 0<32>
	r28 = Mem0[r14:word32]
	call r28 (retsize: 0;)
	return
	// succ:  avgpool_execute_slice_ref_exit
l000119B0:
	v4 = r29 - 8<i32>
	Mem0[v4:word32] = r30
	Mem0[v4 + 4<i32>:word32] = r31
	r30 = v4
	r29 = v4 - 184<i32>
	r3 = Mem0[r1 + 4<i32>:word32]
	r2 = Mem0[r1:word32]
	Mem0[r29 + 176<i32>:word64] = r17_r16
	Mem0[r29 + 168<i32>:word64] = r19_r18
	r19 = Mem0[r2 + 32<i32>:int8]
	r7 = Mem0[r2 + 4<i32>:word32]
	Mem0[r29 + 24<i32>:word32] = r3
	r2 = Mem0[r2 + 8<i32>:word32]
	r4 = Mem0[r7 + 16<i32>:word32]
	r16 = Mem0[r7:word32]
	p0 = r19 == 0<32>
	Mem0[r29 + 152<i32>:word64] = r23_r22
	r3 = Mem0[r7 + 12<i32>:word32]
	r5 = Mem0[r16 + 8<i32>:word32]
	Mem0[r29 + 144<i32>:word64] = r25_r24
	Mem0[r29 + 160<i32>:word64] = r21_r20
	Mem0[r29 + 136<i32>:word64] = r27_r26
	r20 = r5
	r0 = r5
	Mem0[r29 + 4<i32>:word32] = r1
	r27 = Mem0[r2:word32]
	r1 = p0
	r21 = Mem0[r4 + 4<i32>:word32]
	r17 = Mem0[r4 + 8<i32>:word32]
	r22 = Mem0[r16 + 4<i32>:word32]
	r25 = Mem0[r16 + 12<i32>:word32]
	r2 = r17 + r20
	r24 = Mem0[r3 + 8<i32>:word32]
	r23 = Mem0[r3 + 4<i32>:word32]
	Mem0[r29 + 5<i32>:byte] = r7
	r7 = Mem0[r16:word32]
	Mem0[r29 + 116<i32>:word32] = r1
	r0 = r2 - r24
	r26 = 0<32>
	branch p0 l00011A38
	// succ:  l00011A2C l00011A38
l00011A2C:
	p0 = r11 == 4<32>
	r0 = r17
	branch p0 l00011A44
	// succ:  l00011A34 l00011A44
l00011A34:
	p0 = r11 == 2<32>
	r0 = r0 + (r20 + 0xFFFFFFFF<32>)
	// succ:  l00011A38
l00011A38:
	r1 = r17
	call fn00009760 (retsize: 0;)
	r26 = r0
	// succ:  l00011A44
l00011A44:
	r1 = r21 + 0<32>
	branch p0 l00011A7C
	// succ:  l00011A4C l00011A7C
l00011A4C:
	p0 = r11 == 4<32>
	r1 = r21 + 0<32>
	branch p0 l00011A70
	// succ:  l00011A54 l00011A70
l00011A54:
	p0 = r11 == 2<32>
	Mem0[r29 + 18<i32>:byte] = r2
	r0 = Mem0[r29 + 116<i32>:word32]
	r2 = 0<32>
	r1_r0 = r21_r22
	branch p0 l00011A90
	// succ:  l00011A6C l00011A90
l00011A6C:
	goto l00011A84
	// succ:  l00011A84
l00011A70:
	r0 = r1
	goto l00011A88
	// succ:  l00011A88
l00011A7C:
	r2 = r1 + r22
	r0 = r2 - r23
	// succ:  l00011A84
l00011A84:
	call fn00009760 (retsize: 0;)
	// succ:  l00011A88
l00011A88:
	Mem0[r29 + 72<i32>:word32] = r0
	branch r2 > 0<32> l00011D3C
	goto l00011A9C
	// succ:  l00011A9C l00011D3C
l00011A90:
	branch r2 > 0<32> l00011D3C
	// succ:  l00011A9C l00011D3C
l00011A9C:
	r2 = Mem0[r29 + 20<i32>:word32]
	r3 = r23 - r22
	r2 = Mem0[r29 + 72<i32>:word32]
	r5 = r24 - r20
	r4 = r26 + 0xFFFFFFFF<32>
	r7 = Mem0[r29 + 24<i32>:word64]
	r2 = r2
	r5 = r25 * r20
	r4 = r5 + r4 * r17
	Mem0[r29 + 44<i32>:word32] = r6
	Mem0[r29 + 128<i32>:word32] = r26
	r4 = r4 + (r4 >>u 0x1F<32>)
	r2 = r3 + r2 * r21
	r7 = 0xFFFFFFFF<32> - r22
	r2 = r2 + (r2 >>u 0x1F<32>)
	r3 = r7 * r21
	Mem0[r29 + 40<i32>:word32] = r7
	r7 = Mem0[r16 + 16<i32>:word32]
	r4 = r4 >> 1<32>
	r6 = r21 << 1<32>
	Mem0[r29 + 108<i32>:word32] = r7
	r26 = Mem0[r27 + 16<i32>:word32]
	r7 = 0<32>
	r1 = r2 >> 1<32>
	Mem0[r29 + 52<i32>:word32] = r22
	Mem0[r29 + 112<i32>:word32] = r5
	r5 = r5 * r22
	Mem0[r29 + 48<i32>:word32] = r23
	Mem0[r29 + 60<i32>:word32] = r6
	r6 = 0xFFFFFFFF<32> - r20
	Mem0[r29 + 124<i32>:word32] = r20
	Mem0[r29 + 28<i32>:word32] = r7
	r3 = r3 - r1
	r2 = r1 + (0x7F<32> - r3)
	Mem0[r29 + 12<i32>:word32] = r3
	r2 = r2 - r23
	r3 = 0<32> - r4
	r7 = r4 + (0x7F<32> - r24)
	Mem0[r29 + 80<i32>:word32] = r21
	Mem0[r29 + 120<i32>:word32] = r24
	Mem0[r29 + 16<i32>:word32] = r5
	Mem0[r29 + 96<i32>:word32] = r6
	Mem0[r29 + 116<i32>:word32] = r4
	Mem0[r29 + 76<i32>:word32] = r1
	Mem0[r29 + 32<i32>:word32] = r3
	Mem0[r29 + 36<i32>:word32] = r7
	Mem0[r29 + 8<i32>:word32] = r2
	// succ:  l00011B30
l00011B30:
	r2 = Mem0[r29 + 24<i32>:word32]
	branch r2 > r3 l00011D28
	// succ:  l00011B40 l00011D28
l00011B40:
	r3 = Mem0[r29 + 72<i32>:word32]
	Mem0[r29 + 92<i32>:word32] = r3
	r7 = Mem0[r29 + 12<i32>:word64]
	r3 = Mem0[r29 + 72<i32>:word64]
	r4 = Mem0[r29 + 112<i32>:word64]
	Mem0[r29 + 88<i32>:word32] = r7
	r5 = Mem0[r29 + 28<i32>:word64]
	r2 = SEQ(SLICE(r4, word16, 0), SLICE(r2, word16, 0))
	r6 = Mem0[r29 + 24<i32>:word64]
	r7 = Mem0[r29 + 16<i32>:word64]
	r1_r0 = r4_r2
	Mem0[r29 + 14<i32>:byte] = r3
	r3 = r5 * r3
	Mem0[r29 + 64<i32>:word64] = r1_r0
	Mem0[r29 + 100<i32>:word32] = r3
	goto l00011B90
	// succ:  l00011B90
l00011B74:
	r3 = Mem0[r29 + 88<i32>:word64]
	r2 = Mem0[r29 + 60<i32>:word64]
	p0 = r5 > r6
	goto l00011B7C
	// succ:  l00011B7C
l00011B78:
	r3 = Mem0[r29 + 88<i32>:word64]
	r2 = Mem0[r29 + 60<i32>:word64]
	// succ:  l00011B7C
l00011B7C:
	r7 = Mem0[r29 + 92<i32>:word64]
	r3 = r3 + r2
	Mem0[r29 + 88<i32>:word32] = r3
	r4 = r7 - r2
	Mem0[r29 + 92<i32>:word32] = r4
	branch p0 l00011D24
	// succ:  l00011B90 l00011D24
l00011B90:
	r2 = r6
	r7 = Mem0[r29 + 76<i32>:word64]
	r3 = Mem0[r29 + 80<i32>:word64]
	r4 = r2 + 2<32>
	Mem0[r29 + 84<i32>:word32] = r4
	r5 = Mem0[r29 + 108<i32>:word64]
	r3 = r4 * r3
	r1_r0 = Mem0[r29 + 64<i32>:word64]
	r4 = Mem0[r29 + 112<i32>:word64]
	r3 = r3 - r7
	r3 = r5 + r3 * r4
	branch r3 > 1<32> l00011B78
	// succ:  l00011BC4 l00011B78
l00011BC4:
	r3 = Mem0[r29 + 128<i32>:word32]
	r27 = 0<32>
	r4 = Mem0[r29 + 40<i32>:word64]
	r3 = Mem0[r29 + 80<i32>:word64]
	r18 = 0<32>
	r7 = Mem0[r29 + 56<i32>:word64]
	r5 = Mem0[r29 + 92<i32>:word64]
	r1 = Mem0[r29 + 48<i32>:word64]
	r7 = Mem0[r29 + 88<i32>:word64]
	r2 = r2 + r7
	r3 = r2 * r3
	r16 = Mem0[r29 + 32<i32>:word64]
	r5 = Mem0[r29 + 76<i32>:word64]
	r4 = max<int32>(r5, r4)
	r7 = Mem0[r29 + 44<i32>:word32]
	r4 = 0xFFFFFFFF<32> - r4
	r3 = r3 - r5
	r5 = max<int32>(r7, r6)
	r21 = Mem0[r29 + 36<i32>:word64]
	r3 = Mem0[r29 + 52<i32>:word64]
	r0 = r3 + r1
	r6 = max<int32>(r3, r6)
	r7 = Mem0[r29 + 124<i32>:word32]
	r22 = r4 - r5
	r23 = r7 * r2
	r2 = min<int32>(r3, r0)
	Mem0[r29 + 26<i32>:byte] = r1
	r20 = r2 - r6
	r1 = r6 * r7
	r3 = Mem0[r29 + 116<i32>:word64]
	r0 = 0<32>
	r2 = Mem0[r29 + 124<i32>:word64]
	r3 = Mem0[r29 + 120<i32>:word64]
	r7 = r2 - r3
	r3 = r7 + r3
	r19 = max<int32>(r7, r18)
	r2 = min<int32>(r2, r3)
	r24 = r2 - r19
	call fn00009764 (retsize: 0;)
	r1 = r24 * r20
	p0 = r25 > 0<32>
	branch p0 l00011D10
	// succ:  l00011C54 l00011D10
l00011C54:
	r8 = r24 * r25
	r4 = Mem0[r29 + 104<i32>:word64]
	r2 = Mem0[r29 + 96<i32>:word64]
	r3 = r27 * r25
	r7 = max<int32>(r16, r18)
	r1 = Mem0[r29 + 112<i32>:word64]
	r4 = 0<32>
	r6 = r19 + r4
	r2 = Mem0[r29 + 108<i32>:word32]
	r9 = r6 * r25
	r5 = max<int32>(r21, r2)
	r8 = Mem0[r29 + 100<i32>:word32]
	r5 = r1 - r8
	r6 = 0xFFFFFFFF<32> - r5
	r6 = r6 - r7
	r12 = r6 - r7
	r2 = r2 + (r9 + r8)
	r7 = r25 * r12
	// succ:  l00011C90
l00011C90:
	r8 = 0<32>
	branch p0 l00011CE4
	// succ:  l00011C98 l00011CE4
l00011C98:
	p0 = r12 > 0<32>
	__loop(1<i32>, 0x00011CA0<p32>, r22)
	p0 = r24 > 0<32>
	r12 = r9 + r4
	r14 = r6 + 0xFFFFFFFF<32>
	branch p0 l00011CD8
	// succ:  l00011CB0 l00011CD8
l00011CB0:
	p0 = r6 >u 1<32>
	__loop(0<i32>, 0x00011CC4<p32>, r14)
	r12 = Mem0[r12:byte]
	r13 = r12 + r25
	branch p0 l00011CD0
	// succ:  l00011CC4 l00011CD0
l00011CC4:
	r12 = Mem0[r13:byte]
	r13 = r13 + r25
	r8 = r12 + r8
	// succ:  l00011CD0
l00011CD0:
	r9 = r9 + r7
	r8 = r12 + r8
	// succ:  l00011CD8
l00011CD8:
	r9 = r9 + r5
	// succ:  l00011CE4
l00011CE4:
	r12 = r26
	r9 = r4 + r3
	r4 = r4 + 1<32>
	r12 = r12 + (r9 + r23)
	p0 = r4 == r25
	r8 = r8 >>u 0xF<32>
	Mem0[r12:byte] = r8
	branch p0 l00011C90
	// succ:  l00011D0C l00011C90
l00011D0C:
	r2 = Mem0[r29 + 128<i32>:word32]
	r21 = r21 - r17
	r16 = r16 + r17
	goto l00011D18
	// succ:  l00011D18
l00011D10:
	r2 = Mem0[r29 + 128<i32>:word32]
	r21 = r21 - r17
	// succ:  l00011D18
l00011D18:
	branch r27 == r2 l00011B74
	// succ:  l00011D24 l00011B74
l00011D24:
	r27 = r27 + 1<32>
	r2 = Mem0[r29 + 20<i32>:word64]
	r3 = Mem0[r29 + 28<i32>:word64]
	// succ:  l00011D28
l00011D28:
	r3 = r3 + 1<32>
	Mem0[r29 + 28<i32>:word32] = r3
	branch p0 l00011B30
	// succ:  l00011D34 l00011B30
l00011D34:
	p0 = r3 == -1<i32>
	r17_r16 = Mem0[r29 + 176<i32>:word64]
	r2 = Mem0[r29 + 4<i32>:word64]
	r1 = 1<32>
	// succ:  l00011D3C
l00011D3C:
	r21_r20 = Mem0[r29 + 160<i32>:word64]
	r19_r18 = Mem0[r29 + 168<i32>:word64]
	r0 = r2 + 8<32>
	r25_r24 = Mem0[r29 + 144<i32>:word64]
	r23_r22 = Mem0[r29 + 152<i32>:word64]
	v37 = r30
	r31 = Mem0[v37 + 4<i32>:word32]
	r30 = Mem0[v37:word32]
	r29 = v37 + 8<i32>
	r27_r26 = Mem0[r29 + 136<i32>:word64]
	goto l00009730_in_avgpool_execute_slice_ref
	// succ:  l00009730_in_avgpool_execute_slice_ref
avgpool_execute_slice_ref_exit:


// logmsg_function
// Return size: 0
define logmsg_function
logmsg_function_entry:
	r29 = fp
	// succ:  l00011D58
l00011D58:
	v4 = r29 - 8<i32>
	Mem0[v4:word32] = r30
	Mem0[v4 + 4<i32>:word32] = r31
	r30 = v4
	r29 = v4 - 8<i32>
	branch r3 >u r5 l00011D5C_thunk_errlog_function
	goto l00011D68
	// succ:  l00011D68 l00011D5C_thunk_errlog_function
l00011D5C_thunk_errlog_function:
	call errlog_function (retsize: 0;)
	return
	// succ:  logmsg_function_exit
l00011D68:
	r5 = Mem0[r2 + 16<i32>:word32]
	r6 = r29 + 0x10<32>
	r5 = r29 + 0x10<32>
	r0 = badva + 3<32>
	Mem0[r29 + 4<i32>:word32] = r6
	call logv (retsize: 0;)
	v13 = r30
	r31 = Mem0[v13 + 4<i32>:word32]
	r30 = Mem0[v13:word32]
	r29 = v13 + 8<i32>
	return
	// succ:  logmsg_function_exit
logmsg_function_exit:


// errlog_function
// Return size: 0
define errlog_function
errlog_function_entry:
	r29 = fp
	// succ:  l00011D7C
l00011D7C:
	v4 = r29 - 8<i32>
	Mem0[v4:word32] = r30
	Mem0[v4 + 4<i32>:word32] = r31
	r30 = v4
	r29 = v4 - 8<i32>
	r4 = r3
	r0 = badva + 0x2B<32>
	Mem0[r29 + 1<i32>:byte] = r6
	r6 = r29 + 0x10<32>
	r5 = r29 + 0x10<32>
	r3 = 0<32>
	v13 = r30
	r31 = Mem0[v13 + 4<i32>:word32]
	r30 = Mem0[v13:word32]
	r29 = v13 + 8<i32>
	return
	// succ:  errlog_function_exit
errlog_function_exit:


// avgpool_execute_slice_asm
// Return size: 0
define avgpool_execute_slice_asm
avgpool_execute_slice_asm_entry:
	r29 = fp
	goto l00011DA0
	// succ:  l00011DA0
l00009730_in_avgpool_execute_slice_asm:
	r14 = badva + 0<32>
	r28 = Mem0[r14:word32]
	call r28 (retsize: 0;)
	return
	// succ:  avgpool_execute_slice_asm_exit
l00011DA0:
	v4 = r29 - 8<i32>
	Mem0[v4:word32] = r30
	Mem0[v4 + 4<i32>:word32] = r31
	r30 = v4
	r29 = v4 - 152<i32>
	r3 = Mem0[r1 + 4<i32>:word32]
	r2 = Mem0[r1:word32]
	Mem0[r29 + 112<i32>:word64] = r25_r24
	Mem0[r29 + 136<i32>:word64] = r19_r18
	r18 = Mem0[r2 + 32<i32>:int8]
	r7 = Mem0[r2 + 4<i32>:word32]
	Mem0[r29 + 144<i32>:word64] = r17_r16
	r2 = Mem0[r2 + 8<i32>:word32]
	r4 = Mem0[r7 + 16<i32>:word32]
	r24 = Mem0[r7:word32]
	p0 = r18 == 0<32>
	Mem0[r29 + 28<i32>:word32] = r3
	r3 = Mem0[r7 + 12<i32>:word32]
	r17 = Mem0[r24 + 8<i32>:word32]
	Mem0[r29 + 104<i32>:word64] = r27_r26
	Mem0[r29 + 128<i32>:word64] = r21_r20
	r7 = Mem0[r24:word32]
	r16 = Mem0[r2:word32]
	r0 = r17
	r26 = Mem0[r4 + 8<i32>:word32]
	r2 = Mem0[r4 + 4<i32>:word32]
	r19 = Mem0[r24 + 4<i32>:word32]
	r20 = Mem0[r24 + 12<i32>:word32]
	Mem0[r29 + 24<i32>:word32] = r7
	Mem0[r29 + 12<i32>:word32] = r1
	r1 = p0
	Mem0[r29 + 80<i32>:word32] = r2
	r2 = Mem0[r3 + 4<i32>:word32]
	r7 = Mem0[r3 + 8<i32>:word32]
	Mem0[r29 + 48<i32>:word32] = r2
	Mem0[r29 + 120<i32>:word64] = r23_r22
	r2 = r26 + r17
	Mem0[r29 + 92<i32>:word32] = r1
	Mem0[r29 + 96<i32>:word32] = r7
	branch p0 l00011E34
	// succ:  l00011E14 l00011E34
l00011E14:
	r3 = Mem0[r29 + 96<i32>:word32]
	r0 = r26 + 0<32>
	branch p0 l00011E30
	// succ:  l00011E20 l00011E30
l00011E20:
	p0 = r10 == 4<32>
	r21 = 0<32>
	branch p0 l00011E40
	// succ:  l00011E28 l00011E40
l00011E28:
	p0 = r10 == 2<32>
	goto l00011E38
	// succ:  l00011E38
l00011E30:
	r0 = r2 - r3
	// succ:  l00011E34
l00011E34:
	r1 = r26
	call fn00009760 (retsize: 0;)
	goto l00011E3C
	// succ:  l00011E3C
l00011E38:
	r1 = r26
	// succ:  l00011E3C
l00011E3C:
	r21 = r0
	// succ:  l00011E40
l00011E40:
	branch p0 l00011E70
	// succ:  l00011E48 l00011E70
l00011E48:
	p0 = r10 == 4<32>
	r1 = Mem0[r29 + 80<i32>:word32]
	branch p0 l00011E64
	// succ:  l00011E50 l00011E64
l00011E50:
	p0 = r10 == 2<32>
	r1 = Mem0[r29 + 92<i32>:word64]
	r0 = 0<32>
	branch p0 l00011E84
	// succ:  l00011E5C l00011E84
l00011E5C:
	p0 = r1
	r1 = Mem0[r29 + 80<i32>:word32]
	goto l00011E7C
	// succ:  l00011E7C
l00011E64:
	r0 = r1
	goto l00011E80
	// succ:  l00011E80
l00011E70:
	r3 = Mem0[r29 + 48<i32>:word64]
	r1 = Mem0[r29 + 80<i32>:word64]
	r2 = r1 + r19
	r0 = r2 - r3
	// succ:  l00011E7C
l00011E7C:
	call fn00009760 (retsize: 0;)
	// succ:  l00011E80
l00011E80:
	branch r2 > 1<32> l0001205C
	goto l00011E94
	// succ:  l00011E94 l0001205C
l00011E84:
	branch r2 > 1<32> l0001205C
	// succ:  l00011E94 l0001205C
l00011E94:
	r2 = Mem0[r29 + 24<i32>:word32]
	r6 = r21 * r20
	r5 = Mem0[r29 + 48<i32>:word64]
	r3 = Mem0[r29 + 96<i32>:word64]
	r4 = r0 + 0xFFFFFFFF<32>
	r1 = Mem0[r29 + 80<i32>:word32]
	r8 = r20 & 0x7F<32>
	r5 = r5 - r19
	r3 = r3 - r17
	r16 = Mem0[r24 + 16<i32>:word32]
	r3 = Mem0[r16 + 16<i32>:word32]
	r9 = 0<32>
	r2 = r3 + r2 * r26
	Mem0[r29 + 64<i32>:word32] = r7
	Mem0[r29 + 76<i32>:word32] = r21
	r5 = r0 * r21
	r4 = r5 + r4 * r1
	Mem0[r29 + 13<i32>:byte] = r1
	r1 = r6 << 1<32>
	r2 = r2 + (r2 >>u 0x1F<32>)
	Mem0[r29 + 44<i32>:word32] = r19
	r1 = Mem0[r29 + 28<i32>:word64]
	r4 = r4 + (r4 >>u 0x1F<32>)
	Mem0[r29 + 68<i32>:word32] = r0
	Mem0[r29 + 20<i32>:word32] = r5
	r2 = r2 >> 1<32>
	r5 = r7 * r19
	Mem0[r29 + 92<i32>:word32] = r8
	r2 = 0<32> - r2
	r3 = r4 >> 1<32>
	r6 = r3 + r6 * r1
	Mem0[r29 + 16<i32>:word32] = r5
	Mem0[r29 + 32<i32>:word32] = r9
	Mem0[r29 + 72<i32>:word32] = r3
	Mem0[r29 + 36<i32>:word32] = r6
	Mem0[r29 + 40<i32>:word32] = r2
	// succ:  l00011F0C
l00011F0C:
	r2 = Mem0[r29 + 28<i32>:word32]
	branch r2 > r3 l00012038
	// succ:  l00011F1C l00012038
l00011F1C:
	r3 = Mem0[r29 + 68<i32>:word32]
	r5 = Mem0[r29 + 16<i32>:word64]
	r7 = Mem0[r29 + 32<i32>:word64]
	r2 = SEQ(SLICE(r3, word16, 0), SLICE(r2, word16, 0))
	Mem0[r29 + 22<i32>:byte] = r4
	r4 = Mem0[r29 + 36<i32>:word32]
	r1_r0 = r3_r2
	r22 = r5 * r7
	goto l00011F54
	// succ:  l00011F54
l00011F40:
	r3 = Mem0[r29 + 88<i32>:word64]
	r2 = Mem0[r29 + 52<i32>:word64]
	p0 = r7 > r6
	goto l00011F48
	// succ:  l00011F48
l00011F44:
	r3 = Mem0[r29 + 88<i32>:word64]
	r2 = Mem0[r29 + 52<i32>:word64]
	// succ:  l00011F48
l00011F48:
	r3 = r3 + r2
	Mem0[r29 + 88<i32>:word32] = r3
	branch p0 l00012034
	// succ:  l00011F54 l00012034
l00011F54:
	r2 = r6
	r7 = Mem0[r29 + 72<i32>:word64]
	r3 = Mem0[r29 + 80<i32>:word64]
	r4 = r2 + 2<32>
	Mem0[r29 + 84<i32>:word32] = r4
	r1_r0 = Mem0[r29 + 56<i32>:word64]
	r3 = r4 * r3
	r4 = Mem0[r29 + 64<i32>:word32]
	r3 = r3 - r7
	r3 = r16 + r3 * r4
	branch r3 > 1<32> l00011F40
	// succ:  l00011F84 l00011F40
l00011F84:
	r3 = Mem0[r29 + 76<i32>:word32]
	r19 = Mem0[r29 + 76<i32>:word64]
	r4 = Mem0[r29 + 48<i32>:word64]
	r21 = Mem0[r29 + 40<i32>:word32]
	r24 = Mem0[r29 + 88<i32>:word32]
	r3 = 0<32>
	r2 = r2 * r3
	r7 = Mem0[r29 + 44<i32>:word32]
	r2 = r2 - r7
	r2 = r2 + r4
	r3 = max<int32>(r2, r3)
	r18 = r3 * r17
	r2 = min<int32>(r7, r2)
	r25 = r2 - r3
	r2 = Mem0[r29 + 96<i32>:word64]
	r3 = 0<32>
	r23 = r26
	r2 = r2 + r21
	r0 = 0<32>
	r27 = max<int32>(r21, r3)
	r2 = min<int32>(r17, r2)
	r26 = r2 - r27
	call fn00009764 (retsize: 0;)
	r1 = r26 * r25
	r1 = r16
	r2 = r27 + r18
	r5_r4 = r17_r25
	r2 = r2 * r20
	branch r3 == 0<32> l00012014
	// succ:  l00011FF8 l00012014
l00011FF8:
	r3 = Mem0[r29 + 92<i32>:word32]
	r1 = r1 + (r2 + r22)
	Mem0[r29:word32] = r0
	r0 = r24
	r3_r2 = r26_r20
	call avgpool_aligned_hvx (retsize: 0;)
	goto l0001201C
	// succ:  l0001201C
l00012014:
	Mem0[r29:word32] = r0
	call avgpool_nonaligned_hvx (retsize: 0;)
	// succ:  l0001201C
l0001201C:
	r24 = r24 + r20
	r26 = r23
	branch r19 == 1<32> l00011F44
	// succ:  l00012034 l00011F44
l00012034:
	r19 = r19 + 0xFFFFFFFF<32>
	r21 = r21 + r26
	r7 = Mem0[r29 + 24<i32>:word64]
	r3 = Mem0[r29 + 32<i32>:word64]
	// succ:  l00012038
l00012038:
	r4 = Mem0[r29 + 20<i32>:word64]
	r2 = Mem0[r29 + 36<i32>:word64]
	r3 = r3 + 1<32>
	Mem0[r29 + 32<i32>:word32] = r3
	r2 = r2 + r4
	p0 = r3 == r7
	Mem0[r29 + 36<i32>:word32] = r2
	branch p0 l00011F0C
	// succ:  l00012050 l00011F0C
l00012050:
	r17_r16 = Mem0[r29 + 144<i32>:word64]
	r2 = Mem0[r29 + 12<i32>:word64]
	r1 = 1<32>
	r21_r20 = Mem0[r29 + 128<i32>:word64]
	r19_r18 = Mem0[r29 + 136<i32>:word64]
	r0 = r2 + 8<32>
	goto l00012060
	// succ:  l00012060
l0001205C:
	r21_r20 = Mem0[r29 + 128<i32>:word64]
	r19_r18 = Mem0[r29 + 136<i32>:word64]
	// succ:  l00012060
l00012060:
	r25_r24 = Mem0[r29 + 112<i32>:word64]
	r23_r22 = Mem0[r29 + 120<i32>:word64]
	v37 = r30
	r31 = Mem0[v37 + 4<i32>:word32]
	r30 = Mem0[v37:word32]
	r29 = v37 + 8<i32>
	r27_r26 = Mem0[r29 + 104<i32>:word64]
	goto l00009730_in_avgpool_execute_slice_asm
	// succ:  l00009730_in_avgpool_execute_slice_asm
avgpool_execute_slice_asm_exit:


// biasadd_8p8to32_execute
// Return size: 0
define biasadd_8p8to32_execute
biasadd_8p8to32_execute_entry:
	r29 = fp
	// succ:  l00012080
l00012080:
	v4 = r29 - 8<i32>
	Mem0[v4:word32] = r30
	Mem0[v4 + 4<i32>:word32] = r31
	r30 = v4
	r29 = v4 - 144<i32>
	r3 = Mem0[r0 + 8<i32>:word32]
	r2 = Mem0[r0 + 4<i32>:word32]
	Mem0[r29 + 92<i32>:word32] = r1
	Mem0[r29 + 136<i32>:word64] = r17_r16
	r4 = Mem0[r2 + 8<i32>:word32]
	r5 = Mem0[r2 + 12<i32>:word32]
	r6 = Mem0[r2:word32]
	r8 = Mem0[r2 + 16<i32>:word32]
	r17 = Mem0[r2 + 4<i32>:word32]
	r1 = Mem0[r2 + 20<i32>:word32]
	r5 = Mem0[r5 + 16<i32>:word32]
	r2 = Mem0[r4 + 16<i32>:word32]
	Mem0[r29 + 96<i32>:word64] = r27_r26
	Mem0[r29 + 120<i32>:word64] = r21_r20
	r27 = Mem0[r5:word32]
	r21 = Mem0[r2:word32]
	Mem0[r29 + 76<i32>:word32] = r0
	r0 = Mem0[r1 + 16<i32>:word32]
	Mem0[r29 + 128<i32>:word64] = r19_r18
	Mem0[r29 + 112<i32>:word64] = r23_r22
	r18 = 0<32>
	r2 = Mem0[r3 + 8<i32>:word32]
	r7 = Mem0[r8 + 16<i32>:word32]
	r22 = Mem0[r0:word32]
	r19 = Mem0[r3:word32]
	r1_r0 = r18_r23
	Mem0[r29 + 72<i32>:word32] = r2
	r5 = Mem0[r3 + 4<i32>:word32]
	r2 = Mem0[r6 + 8<i32>:word32]
	Mem0[r29 + 68<i32>:word32] = r5
	Mem0[r29 + 104<i32>:word64] = r25_r24
	Mem0[r29 + 84<i32>:word32] = r2
	r5 = Mem0[r6 + 4<i32>:word32]
	r26 = Mem0[r6 + 16<i32>:word32]
	r2 = Mem0[r17 + 16<i32>:word32]
	r20 = Mem0[r6:word32]
	r24 = Mem0[r6 + 12<i32>:word32]
	Mem0[r29 + 88<i32>:word32] = r2
	Mem0[r29 + 80<i32>:word32] = r5
	r25 = Mem0[r19 + 16<i32>:word32]
	Mem0[r29 + 64<i32>:word32] = r22
	r16 = Mem0[r7:word32]
	call fn00009610 (retsize: 0;)
	r18 = r0
	r1 = r18
	r0 = r22
	call fn00009610 (retsize: 0;)
	r1 = 0x66<32>
	r3 = badva + 0x2C<32>
	branch r2 == 2<32> l000121C8
	// succ:  l00012130 l000121C8
l00012130:
	r2 = Mem0[r17 + 4<i32>:word32]
	r1 = 0x67<32>
	r3 = badva + 0x18<32>
	branch r2 == 2<32> l000121C8
	// succ:  l00012144 l000121C8
l00012144:
	r2 = Mem0[r17:word32]
	r1 = 0x68<32>
	r3 = badva + 4<32>
	branch r2 == 2<32> l000121C8
	// succ:  l00012158 l000121C8
l00012158:
	r2 = Mem0[r17 + 8<i32>:word32]
	Mem0[r29 + 60<i32>:word32] = r0
	r4 = Mem0[r17 + 12<i32>:word32]
	Mem0[r29 + 4<i32>:word32] = r24
	r2 = Mem0[r29 + 92<i32>:word32]
	p0 = r4 == r24
	branch p0 l00012180
	// succ:  l0001216C l00012180
l0001216C:
	Mem0[r29:word32] = r4
	r1 = 0x6A<32>
	r3 = badva + 0x23<32>
	goto l000121C8
	// succ:  l000121C8
l00012180:
	r3 = Mem0[r29 + 84<i32>:word64]
	r2 = Mem0[r29 + 80<i32>:word64]
	r4 = badva + 0x27<32>
	r2 = r20 * r2
	r2 = Mem0[r29 + 76<i32>:word32]
	r5 = r2 * r3
	Mem0[r29:word32] = r2
	r2 = Mem0[r29 + 92<i32>:word64]
	r3 = 2<32>
	r5 = r5 * r24
	call fn00012560 (retsize: 0;)
	r17 = r5 << 2<32>
	r1 = 0x6E<32>
	r0 = __clear_bit<word32,word32>(r21, 0x1E<32>)
	r3 = badva + 0x15<32>
	branch r17 >u r2 l000121D8
	// succ:  l000121C8 l000121D8
l000121C8:
	call errlog_function (retsize: 0;)
	r0 = 0xFFFFFFFF<32>
	goto l00012470
	// succ:  l00012470
l000121D8:
	r7 = Mem0[r29 + 84<i32>:word64]
	r3 = Mem0[r29 + 80<i32>:word64]
	Mem0[r29 + 48<i32>:word32] = r19
	Mem0[r29 + 36<i32>:word32] = r1
	Mem0[r19 + 24<i32>:word32] = r17
	Mem0[r29 + 52<i32>:word32] = r20
	Mem0[r19 + 4<i32>:word32] = r3
	Mem0[r19:word32] = r20
	Mem0[r29 + 56<i32>:word32] = r24
	Mem0[r19 + 8<i32>:word32] = r7
	Mem0[r19 + 12<i32>:word32] = r24
	call fn00009600 (retsize: 0;)
	r20 = Mem0[r29 + 64<i32>:word64]
	r19 = r0
	r2 = __clear_bit<word32,word32>(r16, 0x1E<32>)
	r1_r0 = r20_r2
	call fn00009600 (retsize: 0;)
	r1_r0 = r0_r19
	call fn00009600 (retsize: 0;)
	r5 = 0xC8000000<32>
	r3 = 0x48000000<32>
	r4 = 0x2F800000<32>
	r2 = 0x38D1B717<32>
	Mem0[r29 + 32<i32>:word32] = r3
	call fn00009604 (retsize: 0;)
	r2 = 0x437F0000<32>
	r1_r0 = r0_r2
	call fn00009610 (retsize: 0;)
	Mem0[r29 + 44<i32>:word32] = r17
	r17 = 0<32>
	call fn00009624 (retsize: 0;)
	r0 = 0x38D1B717<32>
	r27 = r18
	r1 = r22
	r23 = 0<32>
	p1 = r2 > 0xFFFFFFFF<32>
	r18 = CONVERT(SLICE(r2, byte, 0), byte, uint32)
	r18 = 0xFF<32>
	p0 = r2 > 0xFF<32>
	r18 = r23 + 0<32>
	call fn00009600 (retsize: 0;)
	r2 = 0x437F0000<32>
	r1_r0 = r0_r2
	call fn00009610 (retsize: 0;)
	call fn00009624 (retsize: 0;)
	r1_r0 = r19_r27
	call fn00009614 (retsize: 0;)
	r17 = max<int32>(r2, r23)
	r19 = Mem0[r29 + 60<i32>:word64]
	r1 = r19
	r22 = r0
	r24 = r19
	r0 = r19
	call fn00009610 (retsize: 0;)
	r16 = Mem0[r29 + 92<i32>:word64]
	r2 = Mem0[r29 + 36<i32>:word64]
	r9_r8 = CONVERT(r16, real32, real64)
	r7_r6 = CONVERT(r20, real32, real64)
	r1 = 0x8C<32>
	r15_r14 = CONVERT(r21, real32, real64)
	r4 = badva + 0x23<32>
	r13_r12 = CONVERT(r2, real32, real64)
	Mem0[r29 + 24<i32>:word64] = r7_r6
	r20 = r0
	Mem0[r29 + 8<i32>:word64] = r13_r12
	Mem0[r29 + 16<i32>:word64] = r9_r8
	Mem0[r29:word64] = r15_r14
	call logmsg_function (retsize: 0;)
	r9_r8 = CONVERT(r19, real32, real64)
	r7_r6 = CONVERT(r24, real32, real64)
	r1 = 0x8D<32>
	Mem0[r29 + 16<i32>:word64] = r7_r6
	r13_r12 = CONVERT(r27, real32, real64)
	r4 = badva + 0x15<32>
	Mem0[r29:word64] = r13_r12
	Mem0[r29 + 8<i32>:word64] = r9_r8
	call logmsg_function (retsize: 0;)
	r12 = Mem0[r29 + 68<i32>:word32]
	r9_r8 = CONVERT(r22, real32, real64)
	r7_r6 = CONVERT(r20, real32, real64)
	r3 = Mem0[r29 + 40<i32>:word64]
	r5 = Mem0[r29 + 72<i32>:word64]
	r4 = badva + 0x17<32>
	r0 = Mem0[r29 + 48<i32>:word32]
	r1 = 0x99<32>
	Mem0[r12 + 12<i32>:word32] = 0xFFFFFF81<32>
	r2 = Mem0[r12 + 16<i32>:word32]
	Mem0[r12 + 4<i32>:word32] = 0xFFFFFF81<32>
	Mem0[r12 + 8<i32>:word32] = 1<32>
	Mem0[r2:word32] = r3
	Mem0[r12:word32] = 1<32>
	r13 = Mem0[r29 + 32<i32>:word32]
	r2 = Mem0[r5 + 16<i32>:word32]
	Mem0[r5 + 8<i32>:word32] = 1<32>
	Mem0[r5 + 4<i32>:word32] = 1<32>
	Mem0[r5 + 12<i32>:word32] = 1<32>
	Mem0[r5:word32] = 1<32>
	Mem0[r2:word32] = r13
	r21 = Mem0[r29 + 52<i32>:word32]
	r27 = Mem0[r29 + 80<i32>:word32]
	r19 = Mem0[r29 + 84<i32>:word32]
	r24 = Mem0[r29 + 56<i32>:word32]
	r13 = Mem0[r29 + 44<i32>:word32]
	Mem0[r0 + 8<i32>:word32] = r19
	Mem0[r0:word32] = r21
	Mem0[r0 + 24<i32>:word32] = r13
	Mem0[r0 + 4<i32>:word32] = r27
	Mem0[r12 + 24<i32>:word32] = 4<32>
	Mem0[r0 + 12<i32>:word32] = r24
	Mem0[r29 + 24<i32>:word64] = r7_r6
	Mem0[r5 + 24<i32>:word32] = 4<32>
	Mem0[r29 + 8<i32>:word64] = r9_r8
	Mem0[r29 + 16<i32>:word32] = r17
	Mem0[r29:word32] = r18
	call logmsg_function (retsize: 0;)
	r16 = r24
	r2 = r27 * r21
	r2 = r2 * r19
	Mem0[r29 + 84<i32>:word32] = r2
	p0 = r2 == 0<32>
	branch p0 l0001244C
	// succ:  l000123EC l0001244C
l000123EC:
	r19 = Mem0[r29 + 88<i32>:word32]
	r24 = r25
	r27 = r16
	r21 = r26
	// succ:  l000123F0
l000123F0:
	branch p0 l00012438
	// succ:  l00012400 l00012438
l00012400:
	p0 = r8 == 0<32>
	r21 = r21 + 1<i32>
	r3 = Mem0[r21:byte]
	r19 = r19 + 1<i32>
	r2 = Mem0[r19:byte]
	r3 = r3 - r18
	r2 = r2 - r17
	r27 = r27 + 0xFFFFFFFF<32>
	call fn00009624 (retsize: 0;)
	goto l0001243C
	// succ:  l0001243C
l00012438:
	r2 = Mem0[r29 + 84<i32>:word32]
	r26 = r26 + r16
	r25 = r25 + (r16 << 2<32>)
	goto l00012444
	// succ:  l00012444
l0001243C:
	r2 = Mem0[r29 + 84<i32>:word32]
	r26 = r26 + r16
	// succ:  l00012444
l00012444:
	branch r23 == r2 l000123F0
	goto l00012450
	// succ:  l00012450 l000123F0
l0001244C:
	Mem0[r29:byte] = r2
	r2 = Mem0[r29 + 76<i32>:word32]
	r4 = badva + 0xA<32>
	r1 = 0xAC<32>
	r2 = Mem0[r29 + 92<i32>:word32]
	call logmsg_function (retsize: 0;)
	r0 = 0<32>
	goto l00012470
	// succ:  l00012470
l00012450:
	r23 = r23 + 1<32>
	Mem0[r29:byte] = r2
	r2 = Mem0[r29 + 76<i32>:word32]
	r4 = badva + 0xA<32>
	r1 = 0xAC<32>
	r2 = Mem0[r29 + 92<i32>:word32]
	call logmsg_function (retsize: 0;)
	r0 = 0<32>
	// succ:  l00012470
l00012470:
	r19_r18 = Mem0[r29 + 128<i32>:word64]
	r17_r16 = Mem0[r29 + 136<i32>:word64]
	r23_r22 = Mem0[r29 + 112<i32>:word64]
	r21_r20 = Mem0[r29 + 120<i32>:word64]
	r27_r26 = Mem0[r29 + 96<i32>:word64]
	r25_r24 = Mem0[r29 + 104<i32>:word64]
	v38 = r30
	r31 = Mem0[v38 + 4<i32>:word32]
	r30 = Mem0[v38:word32]
	r29 = v38 + 8<i32>
	return
	// succ:  biasadd_8p8to32_execute_exit
biasadd_8p8to32_execute_exit:


// biasadd_check
// Return size: 0
define biasadd_check
biasadd_check_entry:
	r29 = fp
	// succ:  l00012484
l00012484:
	v4 = r29 - 8<i32>
	Mem0[v4:word32] = r30
	Mem0[v4 + 4<i32>:word32] = r31
	r30 = v4
	r29 = v4 - 16<i32>
	Mem0[r29 + 496<i32>:word64] = r17_r16
	r4 = badva + 0x35<32>
	r17 = r0
	r16 = r1
	r1 = 0xB3<32>
	call logmsg_function (retsize: 0;)
	Mem0[r29:word32] = r17
	branch r2 == 0xC<32> l000124CC
	// succ:  l000124B0 l000124CC
l000124B0:
	r2 = Mem0[r17 + 16<i32>:word32]
	r1 = 0xB4<32>
	r3 = badva + 0x26<32>
	// succ:  l000124B8
l000124B8:
	r2 = r16
	call errlog_function (retsize: 0;)
	// succ:  l000124C0
l000124C0:
	v16 = r30
	r31 = Mem0[v16 + 4<i32>:word32]
	r30 = Mem0[v16:word32]
	r29 = v16 + 8<i32>
	return
	// succ:  biasadd_check_exit
l000124CC:
	r1 = 0xB5<32>
	branch p0 l000124FC
	// succ:  l000124D4 l000124FC
l000124D4:
	p0 = r2 == 6<32>
	r2 = Mem0[r17 + 4<i32>:word32]
	r4 = 0<32>
	__loop(0<i32>, 0x000124E0<p32>, 6<32>)
	r3 = r2
	branch r5 == 0<32> l0001250C
	// succ:  l000124EC l0001250C
l000124EC:
	r5 = Mem0[r3:word32]
	Mem0[r29:word32] = r4
	r1 = 0xB8<32>
	r3 = badva + 0x16<32>
	goto l000124B8
	// succ:  l000124B8
l000124FC:
	goto l000124C0
	// succ:  l000124C0
l0001250C:
	r4 = r4
	r3 = r3 + 4<32>
	goto l00012520
	// succ:  l00012520
l00012518:
	branch r4 >u 0xA<32> l00012544
	goto l00012524
	// succ:  l00012524 l00012544
l00012520:
	branch r3 == 1<32> l00012518
	goto l0001252C
	// succ:  l0001252C l00012518
l00012524:
	r4 = r4 + 1<32>
	branch r3 == 1<32> l00012518
	// succ:  l0001252C l00012518
l0001252C:
	r3 = Mem0[r2:word32]
	Mem0[r29:word32] = r4
	r1 = 0xBD<32>
	r3 = badva + 0x2C<32>
	goto l000124B8
	// succ:  l000124B8
l00012544:
	r1 = 0xC0<32>
	Mem0[r29:word32] = r17
	call logmsg_function (retsize: 0;)
	r0 = 0<32>
	v19 = r30
	r31 = Mem0[v19 + 4<i32>:word32]
	r30 = Mem0[v19:word32]
	r29 = v19 + 8<i32>
	return
	// succ:  biasadd_check_exit
biasadd_check_exit:


// logmsg_function
// Return size: 0
define logmsg_function
logmsg_function_entry:
	r29 = fp
	// succ:  l0001255C
l0001255C:
	v4 = r29 - 8<i32>
	Mem0[v4:word32] = r30
	Mem0[v4 + 4<i32>:word32] = r31
	r30 = v4
	r29 = v4 - 8<i32>
	branch r3 >u r5 l00012560_thunk_errlog_function
	goto l0001256C
	// succ:  l0001256C l00012560_thunk_errlog_function
l00012560_thunk_errlog_function:
	call errlog_function (retsize: 0;)
	return
	// succ:  logmsg_function_exit
l0001256C:
	r5 = Mem0[r2 + 16<i32>:word32]
	r6 = r29 + 0x10<32>
	r5 = r29 + 0x10<32>
	r0 = badva + 0x34<32>
	Mem0[r29 + 4<i32>:word32] = r6
	call logv (retsize: 0;)
	v13 = r30
	r31 = Mem0[v13 + 4<i32>:word32]
	r30 = Mem0[v13:word32]
	r29 = v13 + 8<i32>
	return
	// succ:  logmsg_function_exit
logmsg_function_exit:


// fn00012560
// Return size: 0
define fn00012560
fn00012560_entry:
	r29 = fp
	// succ:  l00012560
l00012560:
	branch r3 >u r5 l00012560_thunk_errlog_function
	goto l0001256C_in_fn00012560
	// succ:  l0001256C_in_fn00012560 l00012560_thunk_errlog_function
l00012560_thunk_errlog_function:
	call errlog_function (retsize: 0;)
	return
	// succ:  fn00012560_exit
l0001256C_in_fn00012560:
	r5 = Mem0[r2 + 16<i32>:word32]
	r6 = r29 + 0x10<32>
	r5 = r29 + 0x10<32>
	r0 = badva + 0x34<32>
	Mem0[r29 + 4<i32>:word32] = r6
	call logv (retsize: 0;)
	v10 = r30
	r31 = Mem0[v10 + 4<i32>:word32]
	r30 = Mem0[v10:word32]
	r29 = v10 + 8<i32>
	return
	// succ:  fn00012560_exit
fn00012560_exit:


// errlog_function
// Return size: 0
define errlog_function
errlog_function_entry:
	r29 = fp
	// succ:  l00012580
l00012580:
	v4 = r29 - 8<i32>
	Mem0[v4:word32] = r30
	Mem0[v4 + 4<i32>:word32] = r31
	r30 = v4
	r29 = v4 - 8<i32>
	r4 = r3
	r0 = badva + 0x1C<32>
	Mem0[r29 + 1<i32>:byte] = r6
	r6 = r29 + 0x10<32>
	r5 = r29 + 0x10<32>
	r3 = 0<32>
	v13 = r30
	r31 = Mem0[v13 + 4<i32>:word32]
	r30 = Mem0[v13:word32]
	r29 = v13 + 8<i32>
	return
	// succ:  errlog_function_exit
errlog_function_exit:


// check_execute
// Return size: 0
define check_execute
check_execute_entry:
	r29 = fp
	// succ:  l000125B0
l000125B0:
	v4 = r29 - 8<i32>
	Mem0[v4:word32] = r30
	Mem0[v4 + 4<i32>:word32] = r31
	r30 = v4
	r29 = v4 - 24<i32>
	Mem0[r29 + 496<i32>:word64] = r17_r16
	r4 = badva + 0x2C<32>
	r1 = 0x36<32>
	r17_r16 = r0_r1
	Mem0[r29 + 8<i32>:word64] = r19_r18
	r3 = Mem0[r17 + 4<i32>:word32]
	r2 = r16
	r18 = Mem0[r3:word32]
	Mem0[r29:word32] = r17
	r19 = Mem0[r3 + 4<i32>:word32]
	call logmsg_function (retsize: 0;)
	r4 = Mem0[r18:word32]
	r1 = 0x38<32>
	r3 = badva + 0x1C<32>
	branch r2 == r4 l00012640
	// succ:  l000125F0 l00012640
l000125F0:
	r2 = Mem0[r19:word32]
	r4 = Mem0[r18 + 4<i32>:word32]
	r1 = 0x39<32>
	r3 = badva + 0x2B<32>
	branch r2 == r4 l00012640
	// succ:  l00012604 l00012640
l00012604:
	r2 = Mem0[r19 + 4<i32>:word32]
	r4 = Mem0[r18 + 8<i32>:word32]
	r1 = 0x3A<32>
	r3 = badva + 0x39<32>
	branch r2 == r4 l00012640
	// succ:  l00012618 l00012640
l00012618:
	r2 = Mem0[r19 + 8<i32>:word32]
	r4 = Mem0[r18 + 12<i32>:word32]
	r1 = 0x3B<32>
	r3 = badva + 6<32>
	branch r2 == r4 l00012640
	// succ:  l0001262C l00012640
l0001262C:
	r2 = Mem0[r19 + 12<i32>:word32]
	r4 = Mem0[r18 + 24<i32>:word32]
	r1 = 0x3C<32>
	r3 = badva + 0x13<32>
	branch r2 == r4 l00012648
	// succ:  l00012640 l00012648
l00012640:
	r2 = Mem0[r19 + 24<i32>:word32]
	Mem0[r29:word32] = r4
	Mem0[r29 + 4<i32>:word32] = r2
	r1 = Mem0[r19 + 16<i32>:word32]
	r0 = Mem0[r18 + 16<i32>:word32]
	r2 = r4
	call fn000097A0 (retsize: 0;)
	goto l00012650
	// succ:  l00012650
l00012648:
	r1 = Mem0[r19 + 16<i32>:word32]
	r0 = Mem0[r18 + 16<i32>:word32]
	r2 = r4
	// succ:  l00012650
l00012650:
	Mem0[r29:word32] = r17
	branch p0 l00012670
	// succ:  l00012658 l00012670
l00012658:
	p0 = r0 == 0<32>
	r2 = r16
	r1 = 0x3E<32>
	r3 = badva + 2<32>
	call errlog_function (retsize: 0;)
	r0 = 0xFFFFFFFF<32>
	goto l00012688
	// succ:  l00012688
l00012670:
	r2 = r16
	r1 = 0x40<32>
	r4 = badva + 0x38<32>
	call logmsg_function (retsize: 0;)
	r0 = 0<32>
	// succ:  l00012688
l00012688:
	r19_r18 = Mem0[r29 + 8<i32>:word64]
	r17_r16 = Mem0[r29 + 16<i32>:word64]
	v21 = r30
	r31 = Mem0[v21 + 4<i32>:word32]
	r30 = Mem0[v21:word32]
	r29 = v21 + 8<i32>
	return
	// succ:  check_execute_exit
check_execute_exit:


// check_check
// Return size: 0
define check_check
check_check_entry:
	r29 = fp
	// succ:  l00012690
l00012690:
	v4 = r29 - 8<i32>
	Mem0[v4:word32] = r30
	Mem0[v4 + 4<i32>:word32] = r31
	r30 = v4
	r29 = v4 - 16<i32>
	Mem0[r29 + 496<i32>:word64] = r17_r16
	r4 = badva + 0x31<32>
	r17 = r0
	r16 = r1
	r1 = 0x46<32>
	Mem0[r29:word32] = r17
	r2 = r16
	call logmsg_function (retsize: 0;)
	branch r2 == 4<32> l000126D8
	// succ:  l000126BC l000126D8
l000126BC:
	r2 = Mem0[r17 + 16<i32>:word32]
	r1 = 0x47<32>
	r3 = badva + 0x20<32>
	r2 = r16
	call errlog_function (retsize: 0;)
	// succ:  l000126C8
l000126C8:
	v16 = r30
	r31 = Mem0[v16 + 4<i32>:word32]
	r30 = Mem0[v16:word32]
	r29 = v16 + 8<i32>
	return
	// succ:  check_check_exit
l000126D8:
	branch r2 == 0<32> l000126F0
	// succ:  l000126E0 l000126F0
l000126E0:
	goto l000126C8
	// succ:  l000126C8
l000126F0:
	r2 = r16
	r1 = 0x49<32>
	Mem0[r29:word32] = r17
	call logmsg_function (retsize: 0;)
	r0 = 0<32>
	v17 = r30
	r31 = Mem0[v17 + 4<i32>:word32]
	r30 = Mem0[v17:word32]
	r29 = v17 + 8<i32>
	return
	// succ:  check_check_exit
check_check_exit:


// logmsg_function
// Return size: 0
define logmsg_function
logmsg_function_entry:
	r29 = fp
	// succ:  l00012708
l00012708:
	v4 = r29 - 8<i32>
	Mem0[v4:word32] = r30
	Mem0[v4 + 4<i32>:word32] = r31
	r30 = v4
	r29 = v4 - 8<i32>
	r3 = 2<32>
	branch r3 >u r5 l0001270C_thunk_errlog_function
	goto l00012718
	// succ:  l00012718 l0001270C_thunk_errlog_function
l0001270C_thunk_errlog_function:
	call errlog_function (retsize: 0;)
	return
	// succ:  logmsg_function_exit
l00012718:
	r5 = Mem0[r2 + 16<i32>:word32]
	r5 = r29 + 0x10<32>
	r3 = 2<32>
	r0 = badva + 0x12<32>
	Mem0[r29 + 1<i32>:byte] = r6
	r6 = r29 + 0x10<32>
	call logv (retsize: 0;)
	// succ:  l00012720_thunk_errlog_function
l00012720_thunk_errlog_function:
	call errlog_function (retsize: 0;)
	return
	// succ:  logmsg_function_exit
logmsg_function_exit:


// errlog_function
// Return size: 0
define errlog_function
errlog_function_entry:
	r29 = fp
	// succ:  l00012730
l00012730:
	v4 = r29 - 8<i32>
	Mem0[v4:word32] = r30
	Mem0[v4 + 4<i32>:word32] = r31
	r30 = v4
	r29 = v4 - 8<i32>
	r4 = r3
	r0 = badva + 0x36<32>
	Mem0[r29 + 1<i32>:byte] = r6
	r6 = r29 + 0x10<32>
	r5 = r29 + 0x10<32>
	r3 = 0<32>
	v13 = r30
	r31 = Mem0[v13 + 4<i32>:word32]
	r30 = Mem0[v13:word32]
	r29 = v13 + 8<i32>
	return
	// succ:  errlog_function_exit
errlog_function_exit:


// close_execute_f
// Return size: 0
define close_execute_f
close_execute_f_entry:
	r29 = fp
	// succ:  l00012760
l00012760:
	v4 = r29 - 8<i32>
	Mem0[v4:word32] = r30
	Mem0[v4 + 4<i32>:word32] = r31
	r30 = v4
	r29 = v4 - 120<i32>
	Mem0[r29 + 496<i32>:word64] = r17_r16
	r17_r16 = r0_r1
	r4 = 3<32>
	Mem0[r29 + 104<i32>:word64] = r19_r18
	r2 = Mem0[r17 + 4<i32>:word32]
	r3 = Mem0[r17 + 16<i32>:word32]
	Mem0[r29 + 88<i32>:word64] = r23_r22
	Mem0[r29 + 96<i32>:word64] = r21_r20
	p0 = r4 >u r3
	r19 = Mem0[r2:word32]
	r18 = Mem0[r2 + 4<i32>:word32]
	Mem0[r29 + 72<i32>:word64] = r27_r26
	Mem0[r29 + 80<i32>:word64] = r25_r24
	r24 = 0x3D4CCCCD<32>
	r22 = Mem0[r18 + 16<i32>:word32]
	r5 = Mem0[r18 + 24<i32>:word32]
	r2 = Mem0[r2 + 8<i32>:word32]
	r20 = Mem0[r19 + 16<i32>:word32]
	r2 = Mem0[r2 + 16<i32>:word32]
	branch p0 l000127B0
	// succ:  l000127A8 l000127B0
l000127A8:
	r21 = r5 >>u 2<32>
	r24 = Mem0[r2:word32]
	r4 = badva + 0x37<32>
	goto l000127B8
	// succ:  l000127B8
l000127B0:
	r4 = badva + 0x37<32>
	// succ:  l000127B8
l000127B8:
	r1 = 0x61<32>
	Mem0[r29:word32] = r17
	call logmsg_function (retsize: 0;)
	r4 = Mem0[r19:word32]
	r1 = 0x64<32>
	r3 = badva + 9<32>
	branch r2 == r4 l0001286C
	// succ:  l000127E0 l0001286C
l000127E0:
	r2 = Mem0[r18:word32]
	r4 = Mem0[r19 + 4<i32>:word32]
	r1 = 0x65<32>
	r3 = badva + 0x15<32>
	branch r2 == r4 l0001286C
	// succ:  l000127F8 l0001286C
l000127F8:
	r2 = Mem0[r18 + 4<i32>:word32]
	r4 = Mem0[r19 + 8<i32>:word32]
	r1 = 0x66<32>
	r3 = badva + 0x20<32>
	branch r2 == r4 l0001286C
	// succ:  l00012810 l0001286C
l00012810:
	r2 = Mem0[r18 + 8<i32>:word32]
	r4 = Mem0[r19 + 12<i32>:word32]
	r1 = 0x67<32>
	r3 = badva + 0x2A<32>
	branch r2 == r4 l0001286C
	// succ:  l00012828 l0001286C
l00012828:
	r2 = Mem0[r18 + 12<i32>:word32]
	r4 = Mem0[r19 + 24<i32>:word32]
	r1 = 0x68<32>
	r3 = badva + 0x34<32>
	branch r2 == r4 l00012874
	// succ:  l00012848 l00012874
l00012848:
	r2 = Mem0[r18 + 24<i32>:word32]
	r25 = 0<32>
	p0 = r21 == 0<32>
	Mem0[r29 + 68<i32>:word32] = r26
	r27 = r22 + 0<32>
	r26 = 0<32>
	r19_r18 = r26_r26
	r19_r18 = r26_r26
	Mem0[r29 + 68<i32>:word32] = r20
	Mem0[r29 + 64<i32>:word32] = r22
	goto l000128C0
	// succ:  l000128C0
l0001286C:
	Mem0[r29:word32] = r4
	Mem0[r29 + 4<i32>:word32] = r2
	// succ:  l00012870
l00012870:
	call errlog_function (retsize: 0;)
	// succ:  l00012874
l00012874:
	r0 = 0xFFFFFFFF<32>
	goto l00012940
	// succ:  l00012940
l000128C0:
	Mem0[r29:word32] = r17
	r1 = 0x7C<32>
	branch p0 l00012930
	// succ:  l000128D8 l00012930
l000128D8:
	r5 = Mem0[r29 + 68<i32>:word64]
	r4 = Mem0[r29 + 64<i32>:word64]
	r9_r8 = CONVERT(r2, real32, real64)
	r7_r6 = CONVERT(r3, real32, real64)
	r1 = 0x7A<32>
	r13_r12 = CONVERT(r26, real32, real64)
	r3 = badva + 0x23<32>
	r5 = r5 + (r25 << 2<32>)
	r4 = r4 + (r25 << 2<32>)
	r4 = Mem0[r4:word32]
	Mem0[r29 + 56<i32>:word64] = r7_r6
	r2 = Mem0[r5:word32]
	r5_r4 = CONVERT(r4, real32, real64)
	Mem0[r29 + 24<i32>:word64] = r5_r4
	Mem0[r29 + 48<i32>:word64] = r9_r8
	Mem0[r29 + 4<i32>:word32] = r21
	r2 = r16
	r7_r6 = CONVERT(r2, real32, real64)
	Mem0[r29 + 32<i32>:word64] = r5_r4
	Mem0[r29 + 40<i32>:word64] = r13_r12
	Mem0[r29 + 8<i32>:word64] = r7_r6
	Mem0[r29 + 16<i32>:word64] = r7_r6
	Mem0[r29:word32] = r25
	goto l00012870
	// succ:  l00012870
l00012930:
	r4 = badva + 0x38<32>
	call logmsg_function (retsize: 0;)
	r0 = 0<32>
	// succ:  l00012940
l00012940:
	r19_r18 = Mem0[r29 + 104<i32>:word64]
	r17_r16 = Mem0[r29 + 112<i32>:word64]
	r23_r22 = Mem0[r29 + 88<i32>:word64]
	r21_r20 = Mem0[r29 + 96<i32>:word64]
	r27_r26 = Mem0[r29 + 72<i32>:word64]
	r25_r24 = Mem0[r29 + 80<i32>:word64]
	v38 = r30
	r31 = Mem0[v38 + 4<i32>:word32]
	r30 = Mem0[v38:word32]
	r29 = v38 + 8<i32>
	return
	// succ:  close_execute_f_exit
close_execute_f_exit:


// close_check_f
// Return size: 0
define close_check_f
close_check_f_entry:
	r29 = fp
	// succ:  l00012954
l00012954:
	v4 = r29 - 8<i32>
	Mem0[v4:word32] = r30
	Mem0[v4 + 4<i32>:word32] = r31
	r30 = v4
	r29 = v4 - 16<i32>
	Mem0[r29 + 496<i32>:word64] = r17_r16
	r4 = badva + 0x21<32>
	r17 = r0
	r16 = r1
	r1 = 0xF6<32>
	call logmsg_function (retsize: 0;)
	Mem0[r29:word32] = r17
	branch r2 >u 2<32> l000129A0
	// succ:  l00012984 l000129A0
l00012984:
	r2 = Mem0[r17 + 16<i32>:word32]
	r1 = 0xF7<32>
	r3 = badva + 0x2D<32>
	r2 = r16
	call errlog_function (retsize: 0;)
	// succ:  l00012990
l00012990:
	v16 = r30
	r31 = Mem0[v16 + 4<i32>:word32]
	r30 = Mem0[v16:word32]
	r29 = v16 + 8<i32>
	return
	// succ:  close_check_f_exit
l000129A0:
	branch r3 >u r2 l000129B8
	// succ:  l000129A8 l000129B8
l000129A8:
	goto l00012990
	// succ:  l00012990
l000129B8:
	branch r2 == 0<32> l000129D0
	// succ:  l000129C0 l000129D0
l000129C0:
	goto l00012990
	// succ:  l00012990
l000129D0:
	r1 = 0xFA<32>
	Mem0[r29:word32] = r17
	call logmsg_function (retsize: 0;)
	r0 = 0<32>
	v17 = r30
	r31 = Mem0[v17 + 4<i32>:word32]
	r30 = Mem0[v17:word32]
	r29 = v17 + 8<i32>
	return
	// succ:  close_check_f_exit
close_check_f_exit:


// close_execute_i32
// Return size: 0
define close_execute_i32
close_execute_i32_entry:
	r29 = fp
	// succ:  l000129E8
l000129E8:
	// succ:  l000129E8_thunk_fn00012D9C
l000129E8_thunk_fn00012D9C:
	call fn00012D9C (retsize: 0;)
	return
	// succ:  close_execute_i32_exit
close_execute_i32_exit:


// close_check
// Return size: 0
define close_check
close_check_entry:
	r29 = fp
	// succ:  l000129F4
l000129F4:
	// succ:  l000129F4_thunk_close_check__merged
l000129F4_thunk_close_check__merged:
	call close_check__merged (retsize: 0;)
	return
	// succ:  close_check_exit
close_check_exit:


// close_check__merged
// Return size: 0
define close_check__merged
close_check__merged_entry:
	r29 = fp
	goto l00012A00
	// succ:  l00012A00
l000104CC_thunk_prod_f_execute:
	call prod_f_execute (retsize: 0;)
	return
	// succ:  close_check__merged_exit
l00012A00:
	v4 = r29 - 8<i32>
	Mem0[v4:word32] = r30
	Mem0[v4 + 4<i32>:word32] = r31
	r30 = v4
	r29 = v4 - 32<i32>
	p0 = r2 == 1<32>
	r4 = badva + 0x14<32>
	r6 = 6<32>
	r5 = 0xED<32>
	r7 = badva + 0x29<32>
	Mem0[r29 + 16<i32>:word64] = r19_r18
	Mem0[r29 + 24<i32>:word64] = r17_r16
	r16 = r1
	r8 = 2<32>
	r4 = r7 + 0<32>
	Mem0[r29 + 2<i32>:byte] = r19
	r17 = r0
	r19 = p0
	Mem0[r29:word32] = r17
	r18 = p0 ? r6 : r8
	branch r2 == r18 l00012A78
	goto l00012A5C
	// succ:  l00012A5C l00012A78
l00012A00:
	goto l000104CC_thunk_prod_f_execute
	// succ:  l000104CC_thunk_prod_f_execute
l00012A5C:
	r2 = Mem0[r17 + 16<i32>:word32]
	r0 = Mem0[r29 + 8<i32>:word64]
	r2 = r16
	r3 = badva + 0x15<32>
	r1 = 0xEE<32>
	r1 = 0x101<32>
	goto l00012AA0
	// succ:  l00012AA0
l00012A78:
	branch r2 == 0<32> l00012ABC
	// succ:  l00012A88 l00012ABC
l00012A88:
	r2 = Mem0[r17 + 20<i32>:word32]
	p1 = r0
	r1 = 0xEF<32>
	r1 = 0x102<32>
	r3 = badva + 0x33<32>
	r2 = r16
	call errlog_function (retsize: 0;)
	// succ:  l00012AA0
l00012AA0:
	r0 = 0xFFFFFFFF<32>
	goto l00012AE8
	// succ:  l00012AE8
l00012ABC:
	r1 = 0xF0<32>
	r3 = 2<32>
	r4 = badva + 0x14<32>
	// succ:  l00012ADC
l00012ADC:
	Mem0[r29:word32] = r17
	r2 = r16
	call logmsg_function (retsize: 0;)
	r0 = 0<32>
	// succ:  l00012AE8
l00012AE8:
	r19_r18 = Mem0[r29 + 16<i32>:word64]
	r17_r16 = Mem0[r29 + 24<i32>:word64]
	v25 = r30
	r31 = Mem0[v25 + 4<i32>:word32]
	r30 = Mem0[v25:word32]
	r29 = v25 + 8<i32>
	return
	// succ:  close_check__merged_exit
close_check__merged_exit:


// close_execute_u8
// Return size: 0
define close_execute_u8
close_execute_u8_entry:
	r29 = fp
	// succ:  l00012AF0
l00012AF0:
	// succ:  l00012AF0_thunk_fn00012D9C
l00012AF0_thunk_fn00012D9C:
	call fn00012D9C (retsize: 0;)
	return
	// succ:  close_execute_u8_exit
close_execute_u8_exit:


// close_execute_q_u8
// Return size: 0
define close_execute_q_u8
close_execute_q_u8_entry:
	r29 = fp
	// succ:  l00012B00
l00012B00:
	v4 = r29 - 8<i32>
	Mem0[v4:word32] = r30
	Mem0[v4 + 4<i32>:word32] = r31
	r30 = v4
	r29 = v4 - 112<i32>
	Mem0[r29 + 496<i32>:word64] = r17_r16
	r17_r16 = r0_r1
	Mem0[r29 + 80<i32>:word64] = r23_r22
	r2 = Mem0[r17 + 4<i32>:word32]
	Mem0[r29 + 72<i32>:word64] = r25_r24
	Mem0[r29 + 96<i32>:word64] = r19_r18
	r19 = 0<32>
	Mem0[r29 + 88<i32>:word64] = r21_r20
	r3 = Mem0[r2 + 4<i32>:word32]
	r5 = Mem0[r2 + 20<i32>:word32]
	r4 = Mem0[r2 + 8<i32>:word32]
	r1 = r19
	r3 = Mem0[r3 + 16<i32>:word32]
	r6 = Mem0[r2 + 16<i32>:word32]
	r5 = Mem0[r5 + 16<i32>:word32]
	r4 = Mem0[r4 + 16<i32>:word32]
	r6 = Mem0[r6 + 16<i32>:word32]
	r22 = Mem0[r3:word32]
	r24 = Mem0[r4:word32]
	r23 = Mem0[r6:word32]
	r25 = Mem0[r5:word32]
	Mem0[r29 + 64<i32>:word64] = r27_r26
	r21 = Mem0[r2:word32]
	r20 = Mem0[r2 + 12<i32>:word32]
	call fn00009614 (retsize: 0;)
	Mem0[r29 + 60<i32>:word32] = r0
	r1_r0 = r19_r18
	call fn00009610 (retsize: 0;)
	r4 = badva + 0xF<32>
	r1 = 0xD0<32>
	Mem0[r29 + 56<i32>:word32] = r0
	r26 = Mem0[r21 + 16<i32>:word32]
	r19 = Mem0[r20 + 24<i32>:word32]
	r27 = Mem0[r20 + 16<i32>:word32]
	Mem0[r29:word32] = r17
	call logmsg_function (retsize: 0;)
	r4 = Mem0[r21:word32]
	r1 = 0xD1<32>
	r3 = badva + 1<32>
	branch r2 == r4 l00012C24
	// succ:  l00012BA8 l00012C24
l00012BA8:
	r2 = Mem0[r20:word32]
	r4 = Mem0[r21 + 4<i32>:word32]
	r1 = 0xD2<32>
	r3 = badva + 0xD<32>
	branch r2 == r4 l00012C24
	// succ:  l00012BC0 l00012C24
l00012BC0:
	r2 = Mem0[r20 + 4<i32>:word32]
	r4 = Mem0[r21 + 8<i32>:word32]
	r1 = 0xD3<32>
	r3 = badva + 0x18<32>
	branch r2 == r4 l00012C24
	// succ:  l00012BD8 l00012C24
l00012BD8:
	r2 = Mem0[r20 + 8<i32>:word32]
	r4 = Mem0[r21 + 12<i32>:word32]
	r1 = 0xD4<32>
	r3 = badva + 0x22<32>
	branch r2 == r4 l00012C24
	// succ:  l00012BF0 l00012C24
l00012BF0:
	r2 = Mem0[r20 + 12<i32>:word32]
	r4 = Mem0[r21 + 24<i32>:word32]
	r1 = 0xD5<32>
	r3 = badva + 0x2C<32>
	branch r2 == r4 l00012C28
	// succ:  l00012C0C l00012C28
l00012C0C:
	r2 = Mem0[r20 + 24<i32>:word32]
	p0 = r19 > 0<32>
	Mem0[r29 + 48<i32>:word32] = r24
	Mem0[r29 + 44<i32>:word32] = r25
	Mem0[r29 + 52<i32>:word32] = r16
	goto l00012C40
	// succ:  l00012C40
l00012C24:
	Mem0[r29:word32] = r4
	Mem0[r29 + 4<i32>:word32] = r2
	// succ:  l00012C28
l00012C28:
	call errlog_function (retsize: 0;)
	r0 = 0xFFFFFFFF<32>
	goto l00012D34
	// succ:  l00012D34
l00012C38:
	branch r21 > r19 l00012D1C
	// succ:  l00012C40 l00012D1C
l00012C40:
	r16 = Mem0[r27:byte]
	r19 = Mem0[r26:byte]
	r20 = r22
	r2 = Mem0[r29 + 60<i32>:word64]
	r4 = Mem0[r29 + 56<i32>:word64]
	r1 = r18
	call fn00009614 (retsize: 0;)
	r2 = 0x9999999A<32>
	r26 = r26 + 1<32>
	r4 = __clear_bit<word32,word32>(r0, 0x1E<32>)
	r3 = 0x3FA99999<32>
	r27 = r27 + 1<32>
	r1_r0 = CONVERT(r4, real32, real64)
	Mem0[r29 + 32<i32>:word32] = r19
	r21 = r21 + 1<32>
	branch p0 l00012C38
	// succ:  l00012C9C l00012C38
l00012C9C:
	Mem0[r29 + 36<i32>:word32] = r16
	r2 = Mem0[r29 + 44<i32>:word64]
	r13_r12 = CONVERT(r22, real32, real64)
	r7_r6 = CONVERT(r23, real32, real64)
	r16 = Mem0[r29 + 52<i32>:word32]
	r1 = 0xE1<32>
	r5_r4 = CONVERT(r2, real32, real64)
	Mem0[r29 + 24<i32>:word64] = r5_r4
	r2 = Mem0[r29 + 48<i32>:word64]
	r4 = badva + 4<32>
	r9_r8 = CONVERT(r2, real32, real64)
	Mem0[r29:word64] = r13_r12
	Mem0[r29 + 16<i32>:word64] = r7_r6
	Mem0[r29 + 8<i32>:word64] = r9_r8
	call logmsg_function (retsize: 0;)
	r9_r8 = CONVERT(r20, real32, real64)
	r7_r6 = CONVERT(r24, real32, real64)
	r1 = 0xE2<32>
	Mem0[r29 + 16<i32>:word64] = r7_r6
	Mem0[r29 + 4<i32>:word32] = r25
	r4 = badva + 0xC<32>
	Mem0[r29:word32] = r21
	Mem0[r29 + 8<i32>:word64] = r9_r8
	call logmsg_function (retsize: 0;)
	r2 = r16
	r1 = 0xE3<32>
	r3 = badva + 8<32>
	goto l00012C28
	// succ:  l00012C28
l00012D1C:
	r1 = 0xE7<32>
	r3 = 2<32>
	r4 = badva + 2<32>
	Mem0[r29:word32] = r17
	r2 = Mem0[r29 + 52<i32>:word64]
	call logmsg_function (retsize: 0;)
	r0 = 0<32>
	// succ:  l00012D34
l00012D34:
	r19_r18 = Mem0[r29 + 96<i32>:word64]
	r17_r16 = Mem0[r29 + 104<i32>:word64]
	r23_r22 = Mem0[r29 + 80<i32>:word64]
	r21_r20 = Mem0[r29 + 88<i32>:word64]
	r27_r26 = Mem0[r29 + 64<i32>:word64]
	r25_r24 = Mem0[r29 + 72<i32>:word64]
	v41 = r30
	r31 = Mem0[v41 + 4<i32>:word32]
	r30 = Mem0[v41:word32]
	r29 = v41 + 8<i32>
	return
	// succ:  close_execute_q_u8_exit
close_execute_q_u8_exit:


// close_check_q
// Return size: 0
define close_check_q
close_check_q_entry:
	r29 = fp
	// succ:  l00012D48
l00012D48:
	// succ:  l00012D48_thunk_close_check__merged
l00012D48_thunk_close_check__merged:
	call close_check__merged (retsize: 0;)
	return
	// succ:  close_check_q_exit
close_check_q_exit:


// logmsg_function
// Return size: 0
define logmsg_function
logmsg_function_entry:
	r29 = fp
	// succ:  l00012D4C
l00012D4C:
	v4 = r29 - 8<i32>
	Mem0[v4:word32] = r30
	Mem0[v4 + 4<i32>:word32] = r31
	r30 = v4
	r29 = v4 - 8<i32>
	branch r3 >u r5 l00012D70
	goto l00012D5C
	// succ:  l00012D5C l00012D50_thunk_errlog_function
l00012D50_thunk_errlog_function:
	call errlog_function (retsize: 0;)
	return
	// succ:  logmsg_function_exit
l00012D5C:
	r5 = Mem0[r2 + 16<i32>:word32]
	r6 = r29 + 0x10<32>
	r5 = r29 + 0x10<32>
	r0 = badva + 0x21<32>
	Mem0[r29 + 4<i32>:word32] = r6
	call logv (retsize: 0;)
	v13 = r30
	r31 = Mem0[v13 + 4<i32>:word32]
	r30 = Mem0[v13:word32]
	r29 = v13 + 8<i32>
	return
	// succ:  logmsg_function_exit
logmsg_function_exit:


// errlog_function
// Return size: 0
define errlog_function
errlog_function_entry:
	r29 = fp
	// succ:  l00012D70
l00012D70:
	v4 = r29 - 8<i32>
	Mem0[v4:word32] = r30
	Mem0[v4 + 4<i32>:word32] = r31
	r30 = v4
	r29 = v4 - 8<i32>
	r4 = r3
	r0 = badva + 9<32>
	Mem0[r29 + 1<i32>:byte] = r6
	r6 = r29 + 0x10<32>
	r5 = r29 + 0x10<32>
	r3 = 0<32>
	v13 = r30
	r31 = Mem0[v13 + 4<i32>:word32]
	r30 = Mem0[v13:word32]
	r29 = v13 + 8<i32>
	return
	// succ:  errlog_function_exit
errlog_function_exit:


// close_execute
// Return size: 0
define close_execute
close_execute_entry:
	r29 = fp
	// succ:  l00012D94
l00012D94:
	v4 = r29 - 8<i32>
	Mem0[v4:word32] = r30
	Mem0[v4 + 4<i32>:word32] = r31
	r30 = v4
	r29 = v4 - 32<i32>
	Mem0[r29 + 496<i32>:word64] = r17_r16
	r4 = badva + 0x38<32>
	// succ:  l00012D94_thunk_fn00012D9C
l00012D94_thunk_fn00012D9C:
	call fn00012D9C (retsize: 0;)
	return
	// succ:  close_execute_exit
close_execute_exit:


// fn00012D9C
// Return size: 0
define fn00012D9C
fn00012D9C_entry:
	r29 = fp
	// succ:  l00012D9C
l00012D9C:
	v4 = r29 - 8<i32>
	Mem0[v4:word32] = r30
	Mem0[v4 + 4<i32>:word32] = r31
	r30 = v4
	r29 = v4 - 32<i32>
	Mem0[r29 + 496<i32>:word64] = r17_r16
	r17_r16 = r0_r1
	Mem0[r29 + 16<i32>:word64] = r19_r18
	r5 = Mem0[r17 + 4<i32>:word32]
	r1 = 0x3B<32>
	r18 = r2
	Mem0[r29 + 8<i32>:word64] = r21_r20
	r19 = Mem0[r5:word32]
	r20 = Mem0[r5 + 4<i32>:word32]
	Mem0[r29:word32] = r17
	call logmsg_function (retsize: 0;)
	r4 = Mem0[r19:word32]
	r1 = 0x3D<32>
	r3 = badva + 9<32>
	branch r2 == r4 l00012DD0_thunk_fn00012E34
	goto l00012DD0_thunk_fn00012DDC
	// succ:  l00012DD0_thunk_fn00012DDC l00012DD0_thunk_fn00012E34
l00012D9C:
	r17_r16 = r0_r1
	Mem0[r29 + 16<i32>:word64] = r19_r18
	r5 = Mem0[r17 + 4<i32>:word32]
	r1 = 0x3B<32>
	r18 = r2
	Mem0[r29 + 8<i32>:word64] = r21_r20
	r19 = Mem0[r5:word32]
	r20 = Mem0[r5 + 4<i32>:word32]
	Mem0[r29:word32] = r17
	call logmsg_function (retsize: 0;)
	r4 = Mem0[r19:word32]
	r1 = 0x3D<32>
	r3 = badva + 9<32>
	branch r2 == r4 l00012E34
	// succ:  l00012DCC_thunk_fn00012DDC l00012DCC_thunk_fn00012E34
l00012DCC_thunk_fn00012DDC:
	call fn00012DDC (retsize: 0;)
	return
	// succ:  fn00012D9C_exit
l00012DCC_thunk_fn00012E34:
	call fn00012E34 (retsize: 0;)
	return
	// succ:  fn00012D9C_exit
l00012DD0_thunk_fn00012DDC:
	call fn00012DDC (retsize: 0;)
	return
	// succ:  fn00012D9C_exit
l00012DD0_thunk_fn00012E34:
	call fn00012E34 (retsize: 0;)
	return
	// succ:  fn00012D9C_exit
fn00012D9C_exit:


// fn00012DDC
// Return size: 0
define fn00012DDC
fn00012DDC_entry:
	r29 = fp
	// succ:  l00012DDC
l00012DDC:
	r2 = Mem0[r20:word32]
	r4 = Mem0[r19 + 4<i32>:word32]
	r1 = 0x3E<32>
	r3 = badva + 0x19<32>
	branch r2 == r4 l00012E34
	// succ:  l00012DF0 l00012DF0_thunk_fn00012E34
l00012DF0:
	r2 = Mem0[r20 + 4<i32>:word32]
	r4 = Mem0[r19 + 8<i32>:word32]
	r1 = 0x3F<32>
	r3 = badva + 0x28<32>
	branch r2 == r4 l00012E34
	goto l00012E04
	// succ:  l00012E04 l00012E04_thunk_fn00012E34
l00012DF0_thunk_fn00012E34:
	call fn00012E34 (retsize: 0;)
	return
	// succ:  fn00012DDC_exit
l00012E04:
	r2 = Mem0[r20 + 8<i32>:word32]
	r4 = Mem0[r19 + 12<i32>:word32]
	r1 = 0x40<32>
	r3 = badva + 0x36<32>
	branch r2 == r4 l00012E34
	goto l00012E1C
	// succ:  l00012E1C l00012E1C_thunk_fn00012E34
l00012E04_thunk_fn00012E34:
	call fn00012E34 (retsize: 0;)
	return
	// succ:  fn00012DDC_exit
l00012E1C:
	r2 = Mem0[r20 + 12<i32>:word32]
	r4 = Mem0[r19 + 24<i32>:word32]
	r1 = 0x41<32>
	r3 = badva + 0<32>
	branch r2 == r4 l00012E3C
	goto l00012E34_thunk_fn00012E34
	// succ:  l00012E34_thunk_fn00012E34 l00012E3C
l00012E1C_thunk_fn00012E34:
	call fn00012E34 (retsize: 0;)
	return
	// succ:  fn00012DDC_exit
l00012E34_thunk_fn00012E34:
	call fn00012E34 (retsize: 0;)
	return
	// succ:  fn00012DDC_exit
l00012E3C:
	r2 = Mem0[r20 + 16<i32>:word32]
	r1 = Mem0[r19 + 16<i32>:word32]
	r0 = r16
	// succ:  l00012E3C_thunk_fn00012E34
l00012E3C_thunk_fn00012E34:
	call fn00012E34 (retsize: 0;)
	return
	// succ:  fn00012DDC_exit
fn00012DDC_exit:


// fn00012E34
// Return size: 0
define fn00012E34
fn00012E34_entry:
	r29 = fp
	// succ:  l00012E34
l00012E34:
	r2 = Mem0[r20 + 24<i32>:word32]
	Mem0[r29:word32] = r4
	Mem0[r29 + 4<i32>:word32] = r2
	r2 = Mem0[r20 + 16<i32>:word32]
	r1 = Mem0[r19 + 16<i32>:word32]
	r0 = r16
	r3 = r4
	// succ:  l00012E44
l00012E44:
	call r18 (retsize: 0;)
	r1 = 0x45<32>
	branch p0 l00012E70
	// succ:  l00012E54 l00012E70
l00012E54:
	p0 = r0 == 0<32>
	r2 = r16
	r1 = 0x43<32>
	r3 = badva + 0x38<32>
	call errlog_function (retsize: 0;)
	r0 = 0xFFFFFFFF<32>
	goto l00012E84
	// succ:  l00012E84
l00012E70:
	Mem0[r29:word32] = r17
	r4 = badva + 0x34<32>
	call logmsg_function (retsize: 0;)
	r0 = 0<32>
	// succ:  l00012E84
l00012E84:
	r19_r18 = Mem0[r29 + 16<i32>:word64]
	r17_r16 = Mem0[r29 + 24<i32>:word64]
	v18 = r30
	r31 = Mem0[v18 + 4<i32>:word32]
	r30 = Mem0[v18:word32]
	r29 = v18 + 8<i32>
	return
	// succ:  fn00012E34_exit
fn00012E34_exit:


// check_u8vals
// Return size: 0
define check_u8vals
check_u8vals_entry:
	r29 = fp
	// succ:  l00012E8C
l00012E8C:
	v4 = r29 - 8<i32>
	Mem0[v4:word32] = r30
	Mem0[v4 + 4<i32>:word32] = r31
	r30 = v4
	r29 = v4 - 56<i32>
	Mem0[r29 + 496<i32>:word64] = r17_r16
	r17_r16 = r0_r3
	Mem0[r29 + 40<i32>:word64] = r19_r18
	r19_r18 = 1<64>
	p0 = r16 > 0<32>
	Mem0[r29 + 32<i32>:word64] = r21_r20
	r20 = r1
	Mem0[r29 + 16<i32>:word64] = r25_r24
	Mem0[r29 + 24<i32>:word64] = r23_r22
	branch p0 l00012F70
	// succ:  l00012EAC l00012F70
l00012EAC:
	r2 = r16
	r3 = r19
	p1 = r16 >u 1<32>
	r3 = r3 + 1<i32>
	r4 = Mem0[r3:byte]
	r5 = r2 + 0xFFFFFFFF<32>
	branch p1 l00012ED8
	// succ:  l00012EC0 l00012ED8
l00012EC0:
	r2 = r4
	r18 = 0<32>
	r22 = 0<32>
	branch p0 l00012F74
l00012EC8:
	r18 = 0<32>
	r22 = 0<32>
	branch p0 l00012F74
	// succ:  l00012ED0 l00012F74
l00012ED0:
	r2 = max<uint32>(r18, r2)
	goto l00012F18
	// succ:  l00012F18
l00012ED8:
	r3 = r3 + 1<i32>
	r2 = Mem0[r3:byte]
	p1 = r2 >u 1<32>
	__loop(0<i32>, 0x00012EE8<p32>, r5)
	branch p1 l00012EFC
	// succ:  l00012EE8 l00012EFC
l00012EE8:
	r3 = r3 + 1<i32>
	r2 = Mem0[r3:byte]
	r5 = r2
	r18 = max<uint32>(r18, r4)
	r4 = r5
	// succ:  l00012EFC
l00012EFC:
	goto l00012EC8
	// succ:  l00012EC8
l00012F08:
	branch r16 >u r22 l00012F7C
	// succ:  l00012F18 l00012F7C
l00012F18:
	r24 = Mem0[r19:byte]
	r23 = Mem0[r20:byte]
	call fn00009614 (retsize: 0;)
	r2 = 0x9999999A<32>
	r4 = __clear_bit<word32,word32>(r0, 0x1E<32>)
	r3 = 0x3FA99999<32>
	r1_r0 = CONVERT(r4, real32, real64)
	Mem0[r29 + 12<i32>:word32] = r24
	r1 = 0xA2<32>
	branch p0 l00012F08
	// succ:  l00012F58 l00012F08
l00012F58:
	r4 = badva + 0x15<32>
	Mem0[r29 + 4<i32>:word32] = r16
	Mem0[r29 + 8<i32>:word32] = r23
	Mem0[r29:word32] = r22
	r18 = 1<32>
	call logmsg_function (retsize: 0;)
	// succ:  l00012F70
l00012F70:
	r0 = r18
	// succ:  l00012F74
l00012F74:
	r19_r18 = Mem0[r29 + 40<i32>:word64]
	r17_r16 = Mem0[r29 + 48<i32>:word64]
	r23_r22 = Mem0[r29 + 24<i32>:word64]
	r21_r20 = Mem0[r29 + 32<i32>:word64]
	// succ:  l00012F7C
l00012F7C:
	v31 = r30
	r31 = Mem0[v31 + 4<i32>:word32]
	r30 = Mem0[v31:word32]
	r29 = v31 + 8<i32>
	return
	// succ:  check_u8vals_exit
check_u8vals_exit:


// check_i32vals
// Return size: 0
define check_i32vals
check_i32vals_entry:
	r29 = fp
	// succ:  l00012F84
l00012F84:
	v4 = r29 - 8<i32>
	Mem0[v4:word32] = r30
	Mem0[v4 + 4<i32>:word32] = r31
	r30 = v4
	r29 = v4 - 48<i32>
	Mem0[r29 + 480<i32>:word64] = r21_r20
	r20 = r3 >>u 2<32>
	Mem0[r29 + 16<i32>:word64] = r23_r22
	Mem0[r29 + 40<i32>:word64] = r17_r16
	r17_r16 = r2_r0
	Mem0[r29 + 32<i32>:word64] = r19_r18
	r18 = r1
	p0 = r20 == 0<32>
	r0 = 0<32>
	r2 = r17 + 0<32>
	branch p0 l00013038
	// succ:  l00012FA8 l00013038
l00012FA8:
	__loop(0<i32>, 0x00012FAC<p32>, r20)
	r2 = r2 + 4<i32>
	r3 = Mem0[r2:word32]
	r3 = abs<int32>(r3)
	r0 = max<uint32>(r0, r3)
	r21 = -1<i32>
	r0 = -1<i32>
	goto l0001303C
	// succ:  l0001303C
l00013038:
	r19_r18 = Mem0[r29 + 32<i32>:word64]
	r17_r16 = Mem0[r29 + 40<i32>:word64]
	// succ:  l0001303C
l0001303C:
	r23_r22 = Mem0[r29 + 16<i32>:word64]
	r21_r20 = Mem0[r29 + 24<i32>:word64]
	v21 = r30
	r31 = Mem0[v21 + 4<i32>:word32]
	r30 = Mem0[v21:word32]
	r29 = v21 + 8<i32>
	return
	// succ:  check_i32vals_exit
check_i32vals_exit:


// concat_execute_asm
// Return size: 0
define concat_execute_asm
concat_execute_asm_entry:
	r29 = fp
	// succ:  l00013050
l00013050:
	// succ:  l00013050_thunk_fn00013178
l00013050_thunk_fn00013178:
	call fn00013178 (retsize: 0;)
	return
	// succ:  concat_execute_asm_exit
concat_execute_asm_exit:


// concat_check
// Return size: 0
define concat_check
concat_check_entry:
	r29 = fp
	// succ:  l0001305C
l0001305C:
	v4 = r29 - 8<i32>
	Mem0[v4:word32] = r30
	Mem0[v4 + 4<i32>:word32] = r31
	r30 = v4
	r29 = v4 - 24<i32>
	Mem0[r29 + 496<i32>:word64] = r17_r16
	r4 = badva + 0x37<32>
	r17 = r0
	r16 = r1
	r1 = 0x123<32>
	Mem0[r29:word32] = r17
	r2 = r16
	call logmsg_function (retsize: 0;)
	r2 = Mem0[r17 + 16<i32>:word32]
	r3 = 0x2B<32>
	r1 = 0x124<32>
	r4 = r2 + 0xFFFFFFFF<32>
	r5 = r4
	r3 = r3 >>u 1<32>
	r5 = r5 - r3 * 3<32>
	r2 = Mem0[r17 + 28<i32>:word32]
	r5 = Mem0[r17 + 24<i32>:word32]
	r3 = badva + 0xF<32>
	Mem0[r29 + 4<i32>:word32] = r5
	Mem0[r29 + 8<i32>:word32] = r2
	r2 = r16
	Mem0[r29:word32] = r4
	// succ:  l00013138
l00013138:
	call errlog_function (retsize: 0;)
	v17 = r30
	r31 = Mem0[v17 + 4<i32>:word32]
	r30 = Mem0[v17:word32]
	r29 = v17 + 8<i32>
	return
	// succ:  concat_check_exit
concat_check_exit:


// concat_execute_ref
// Return size: 0
define concat_execute_ref
concat_execute_ref_entry:
	r29 = fp
	// succ:  l00013164
l00013164:
	// succ:  l00013164_thunk_fn00013178
l00013164_thunk_fn00013178:
	call fn00013178 (retsize: 0;)
	return
	// succ:  concat_execute_ref_exit
concat_execute_ref_exit:


// concat_execute
// Return size: 0
define concat_execute
concat_execute_entry:
	r29 = fp
	// succ:  l00013170
l00013170:
	v4 = r29 - 8<i32>
	Mem0[v4:word32] = r30
	Mem0[v4 + 4<i32>:word32] = r31
	r30 = v4
	r29 = v4 - 168<i32>
	Mem0[r29 + 472<i32>:word64] = r23_r22
	r3 = 0xAAAAAAAB<32>
	// succ:  l00013170_thunk_fn00013178
l00013170_thunk_fn00013178:
	call fn00013178 (retsize: 0;)
	return
	// succ:  concat_execute_exit
concat_execute_exit:


// fn00013178
// Return size: 0
define fn00013178
fn00013178_entry:
	r29 = fp
	// succ:  l00013178
l00013178:
	v4 = r29 - 8<i32>
	Mem0[v4:word32] = r30
	Mem0[v4 + 4<i32>:word32] = r31
	r30 = v4
	r29 = v4 - 168<i32>
	Mem0[r29 + 472<i32>:word64] = r23_r22
	r23 = r0
	Mem0[r29 + 152<i32>:word64] = r19_r18
	r4 = Mem0[r23 + 16<i32>:word32]
	Mem0[r29 + 120<i32>:word64] = r27_r26
	r27 = Mem0[r23 + 4<i32>:word32]
	r18 = r4 + 0xFFFFFFFF<32>
	Mem0[r29 + 160<i32>:word64] = r17_r16
	r5 = Mem0[r23 + 8<i32>:word32]
	r17 = r1
	Mem0[r29 + 128<i32>:word64] = r25_r24
	r0 = Mem0[r27 + 4<i32>:word32]
	r25 = r2
	r2 = r17
	r1 = 0xE5<32>
	r4 = badva + 0x1C<32>
	r26 = Mem0[r5 + 4<i32>:word32]
	r24 = Mem0[r5:word32]
	r22 = r3 >>u 1<32>
	Mem0[r29 + 10<i32>:byte] = r3
	r3 = Mem0[r0 + 4<i32>:word32]
	r16 = r22
	r6 = r27 + (r22 << 2<32>)
	r3 = Mem0[r0:word32]
	Mem0[r29 + 36<i32>:word32] = r3
	r6 = Mem0[r6 + 4<i32>:word32]
	r7 = Mem0[r13 + r27:word32]
	r5 = Mem0[r5 + 8<i32>:word32]
	r7 = Mem0[r7 + 16<i32>:word32]
	Mem0[r29 + 144<i32>:word64] = r21_r20
	r3 = Mem0[r6 + 16<i32>:word32]
	Mem0[r29 + 28<i32>:word32] = r5
	r5 = Mem0[r0 + 8<i32>:word32]
	r19 = Mem0[r27:word32]
	Mem0[r29 + 44<i32>:word32] = r5
	r20 = Mem0[r7:word32]
	r21 = Mem0[r3:word32]
	Mem0[r29:word32] = r23
	call logmsg_function (retsize: 0;)
	r2 = Mem0[r19 + 16<i32>:word32]
	branch r2 == 6<32> l00013208_thunk_fn00013304
	goto l00013208_thunk_fn00013214
	// succ:  l00013208_thunk_fn00013214 l00013208_thunk_fn00013304
l00013178:
	r23 = r0
	Mem0[r29 + 152<i32>:word64] = r19_r18
	r4 = Mem0[r23 + 16<i32>:word32]
	Mem0[r29 + 120<i32>:word64] = r27_r26
	r27 = Mem0[r23 + 4<i32>:word32]
	r18 = r4 + 0xFFFFFFFF<32>
	Mem0[r29 + 160<i32>:word64] = r17_r16
	r5 = Mem0[r23 + 8<i32>:word32]
	r17 = r1
	Mem0[r29 + 128<i32>:word64] = r25_r24
	r0 = Mem0[r27 + 4<i32>:word32]
	r25 = r2
	r2 = r17
	r1 = 0xE5<32>
	r4 = badva + 0x1C<32>
	r26 = Mem0[r5 + 4<i32>:word32]
	r24 = Mem0[r5:word32]
	r22 = r3 >>u 1<32>
	Mem0[r29 + 10<i32>:byte] = r3
	r3 = Mem0[r0 + 4<i32>:word32]
	r16 = r22
	r6 = r27 + (r22 << 2<32>)
	r3 = Mem0[r0:word32]
	Mem0[r29 + 36<i32>:word32] = r3
	r6 = Mem0[r6 + 4<i32>:word32]
	r7 = Mem0[r13 + r27:word32]
	r5 = Mem0[r5 + 8<i32>:word32]
	r7 = Mem0[r7 + 16<i32>:word32]
	Mem0[r29 + 144<i32>:word64] = r21_r20
	r3 = Mem0[r6 + 16<i32>:word32]
	Mem0[r29 + 28<i32>:word32] = r5
	r5 = Mem0[r0 + 8<i32>:word32]
	r19 = Mem0[r27:word32]
	Mem0[r29 + 44<i32>:word32] = r5
	r20 = Mem0[r7:word32]
	r21 = Mem0[r3:word32]
	Mem0[r29:word32] = r23
	call logmsg_function (retsize: 0;)
	r2 = Mem0[r19 + 16<i32>:word32]
	branch r2 == 6<32> l00013304
	// succ:  l00013204_thunk_fn00013214 l00013204_thunk_fn00013304
l00013204_thunk_fn00013214:
	call fn00013214 (retsize: 0;)
	return
	// succ:  fn00013178_exit
l00013204_thunk_fn00013304:
	call fn00013304 (retsize: 0;)
	return
	// succ:  fn00013178_exit
l00013208_thunk_fn00013214:
	call fn00013214 (retsize: 0;)
	return
	// succ:  fn00013178_exit
l00013208_thunk_fn00013304:
	call fn00013304 (retsize: 0;)
	return
	// succ:  fn00013178_exit
fn00013178_exit:


// fn00013214
// Return size: 0
define fn00013214
fn00013214_entry:
	r29 = fp
	// succ:  l00013214
l00013214:
	r2 = Mem0[r2:word32]
	Mem0[r29 + 24<i32>:word32] = r24
	r24 = 0<32>
	branch r2 >u r18 l00013320
	// succ:  l00013228 l00013320
l00013228:
	r2 = 3<32>
	Mem0[r26 + 12<i32>:word32] = 0xFFFFFF81<32>
	r6 = Mem0[r29 + 28<i32>:word32]
	r2 = 0<32>
	// succ:  l0001322C
l0001322C:
	Mem0[r26 + 4<i32>:word32] = 0xFFFFFF81<32>
	Mem0[r26 + 8<i32>:word32] = 1<32>
	r3 = r29 + 0x30<32>
	Mem0[r6 + 8<i32>:word32] = 1<32>
	Mem0[r26:word32] = 1<32>
	r21 = r3 + 0x14<32>
	Mem0[r6 + 4<i32>:word32] = 1<32>
	Mem0[r6:word32] = 1<32>
	r16 = r29 + 0x54<32>
	Mem0[r6 + 12<i32>:word32] = 0xFFFFFF81<32>
	r4 = Mem0[r26 + 16<i32>:word32]
	Mem0[r4:word32] = r2
	r4 = Mem0[r29 + 36<i32>:word64]
	r7 = Mem0[r6 + 16<i32>:word32]
	Mem0[r26 + 24<i32>:word32] = 4<32>
	Mem0[r7:word32] = r20
	Mem0[r5:word32] = r4
	Mem0[r6 + 24<i32>:word32] = 4<32>
	r4 = Mem0[r29 + 44<i32>:word64]
	r7 = Mem0[r29 + 40<i32>:word64]
	Mem0[r5 + 8<i32>:word32] = r4
	Mem0[r5 + 4<i32>:word32] = r7
	Mem0[r5 + 24<i32>:word32] = r18
	Mem0[r29 + 48<i32>:word32] = r23
	Mem0[r5 + 12<i32>:word32] = r19
	Mem0[r29 + 64<i32>:word32] = r19
	Mem0[r29 + 84<i32>:word32] = r23
	Mem0[r29 + 92<i32>:word32] = r2
	Mem0[r29 + 56<i32>:word32] = r2
	Mem0[r29 + 96<i32>:word32] = r20
	Mem0[r29 + 60<i32>:word32] = r20
	Mem0[r3 + 4<i32>:word32] = 1<32>
	Mem0[r29 + 100<i32>:word32] = r19
	Mem0[r16 + 4<i32>:word32] = 0xFFFFFF80<32>
	call fn00009740 (retsize: 0;)
	r0 = r16 + 0x14<32>
	r1 = 0<32>
	call fn00009740 (retsize: 0;)
	r1_r0 = r25_r17
	r2 = r29 + 0x30<32>
	call nn_os_work_for_vector (retsize: 0;)
	r0 = r17
	r1 = r29 + 0x54<32>
	call r25 (retsize: 0;)
	r0 = r21
	call fn000096A0 (retsize: 0;)
	r2 = r17
	r1 = 0x112<32>
	r4 = badva + 0x34<32>
	Mem0[r29:word32] = r23
	call logmsg_function (retsize: 0;)
	// succ:  l000132D0_thunk_fn00013304
l000132D0_thunk_fn00013304:
	call fn00013304 (retsize: 0;)
	return
	// succ:  fn00013214_exit
l00013320:
	r3 = Mem0[r29 + 40<i32>:word64]
	r2 = Mem0[r29 + 44<i32>:word64]
	r24 = r27 + 4<32>
	Mem0[r29 + 16<i32>:word32] = r23
	Mem0[r29 + 8<i32>:word32] = r26
	r16 = r27
	r26 = r16 + r27
	Mem0[r29 + 20<i32>:word32] = r17
	Mem0[r29 + 12<i32>:word32] = r25
	r2 = r3 * r2
	r3 = Mem0[r29 + 36<i32>:word64]
	r23 = 0<32>
	r16 = r16 + (r7 + 4<32>)
	r2 = r2 * r3
	Mem0[r29 + 32<i32>:word32] = r2
	r3 = Mem0[r29 + 44<i32>:word32]
	r25 = Mem0[r24:word32]
	// succ:  l00013358
l00013358:
	branch r2 == r3 l0001337C
	// succ:  l00013368 l0001337C
l00013368:
	r2 = Mem0[r25 + 8<i32>:word32]
	r1 = 0xE9<32>
	r3 = badva + 4<32>
	Mem0[r29:word32] = r23
	r2 = Mem0[r29 + 20<i32>:word64]
	goto l0001337C_thunk_fn00013304
	// succ:  l0001337C_thunk_fn00013304
l00013378:
	r2 = Mem0[r25 + 4<i32>:word32]
	// succ:  l0001337C
l0001337C:
	branch r3 == r2 l00013398
	goto l00013388
	// succ:  l00013388 l00013398
l0001337C_thunk_fn00013304:
	call fn00013304 (retsize: 0;)
	return
	// succ:  fn00013214_exit
l00013388:
	r3 = Mem0[r29 + 40<i32>:word32]
	r1 = 0xEC<32>
	goto l00013378
	// succ:  l00013378
l00013398:
	branch r3 == r2 l000133B4
	// succ:  l000133A4 l000133B4
l000133A4:
	r3 = Mem0[r29 + 36<i32>:word32]
	r1 = 0xEF<32>
	goto l00013378
	// succ:  l00013378
l000133B4:
	r16 = r16 + 4<i32>
	r2 = Mem0[r16:word32]
	r23 = r23 + 1<32>
	r17 = r27 + 8<32>
	r2 = Mem0[r2 + 16<i32>:word32]
	r1 = Mem0[r2:word32]
	call fn000097B0 (retsize: 0;)
	r26 = r26 + 4<i32>
	r2 = Mem0[r26:word32]
	r0 = r20
	r21 = r0
	r2 = Mem0[r2 + 16<i32>:word32]
	r1 = Mem0[r2:word32]
	call fn00009600 (retsize: 0;)
	r3 = Mem0[r29 + 32<i32>:word32]
	r2 = Mem0[r25 + 12<i32>:word32]
	r20 = r0
	r27 = r24
	r26 = Mem0[r29 + 8<i32>:word32]
	p0 = r22 >u r23
	r19 = r2 + r19
	r24 = r17
	r23 = Mem0[r29 + 16<i32>:word32]
	r24 = 0<32>
	branch p0 l00013358
	// succ:  l00013414 l00013358
l00013414:
	r18 = r18 + r3 * r2
	r17 = Mem0[r29 + 20<i32>:word64]
	r5 = Mem0[r29 + 24<i32>:word64]
	r1 = 0xF6<32>
	r25 = Mem0[r29 + 12<i32>:word32]
	branch r18 >u r2 l0001322C
	// succ:  l0001342C l0001322C
l0001342C:
	r2 = Mem0[r5 + 20<i32>:word32]
	// succ:  l00013438_thunk_fn00013304
l00013438_thunk_fn00013304:
	call fn00013304 (retsize: 0;)
	return
	// succ:  fn00013214_exit
fn00013214_exit:


// fn00013304
// Return size: 0
define fn00013304
fn00013304_entry:
	r29 = fp
	goto l00013304
	// succ:  l00013304
l000132E8:
	r27_r26 = Mem0[r29 + 120<i32>:word64]
	r0 = r24
	r19_r18 = Mem0[r29 + 152<i32>:word64]
	r17_r16 = Mem0[r29 + 160<i32>:word64]
	r23_r22 = Mem0[r29 + 136<i32>:word64]
	r21_r20 = Mem0[r29 + 144<i32>:word64]
	r25_r24 = Mem0[r29 + 128<i32>:word64]
	v18 = r30
	r31 = Mem0[v18 + 4<i32>:word32]
	r30 = Mem0[v18:word32]
	r29 = v18 + 8<i32>
	return
	// succ:  fn00013304_exit
l00013304:
	r1 = 0xE6<32>
	r3 = badva + 0x1D<32>
	r2 = r17
	// succ:  l00013310
l00013310:
	r24 = 0xFFFFFFFF<32>
	call errlog_function (retsize: 0;)
	// succ:  l00013314
l00013314:
	goto l000132E8
	// succ:  l000132E8
fn00013304_exit:


// concat_execute_slice_ref
// Return size: 0
define concat_execute_slice_ref
concat_execute_slice_ref_entry:
	r29 = fp
	goto l00013434
	// succ:  l00013434
l00009730_in_concat_execute_slice_ref:
	r14 = badva + 0<32>
	r28 = Mem0[r14:word32]
	call r28 (retsize: 0;)
	return
	// succ:  concat_execute_slice_ref_exit
l00013434:
	v4 = r29 - 8<i32>
	Mem0[v4:word32] = r30
	Mem0[v4 + 4<i32>:word32] = r31
	r30 = v4
	r29 = v4 - 72<i32>
	r0 = 0<32>
	r2 = Mem0[r1 + 12<i32>:word32]
	r4 = Mem0[r1 + 8<i32>:word32]
	Mem0[r29 + 64<i32>:word64] = r17_r16
	r16 = Mem0[r1:word32]
	Mem0[r29 + 40<i32>:word64] = r23_r22
	Mem0[r29 + 4<i32>:word32] = r1
	r3 = Mem0[r16 + 16<i32>:word32]
	r23 = Mem0[r1 + 4<i32>:word32]
	r22 = Mem0[r1 + 16<i32>:word32]
	Mem0[r29 + 56<i32>:word64] = r19_r18
	Mem0[r29 + 32<i32>:word64] = r25_r24
	r17 = r3 + 0xFFFFFFFF<32>
	Mem0[r29 + 24<i32>:word64] = r27_r26
	Mem0[r29 + 48<i32>:word64] = r21_r20
	Mem0[r29 + 20<i32>:word32] = r4
	r24 = Mem0[r16 + 4<i32>:word32]
	call fn00009610 (retsize: 0;)
	Mem0[r29 + 16<i32>:word32] = r0
	r2 = 3<32>
	r26 = r24 + 0<32>
	branch p0 l000135CC
	// succ:  l00013480 l000135CC
l00013480:
	p0 = r2 >u r9
	r2 = Mem0[r16 + 8<i32>:word32]
	r3 = 0x2B<32>
	r2 = Mem0[r2:word32]
	r16 = 0<32>
	Mem0[r29 + 2<i32>:byte] = r4
	r4 = __set_bit<word32,word32>(r3, 0<32>)
	r18 = r3 >>u 1<32>
	r27 = Mem0[r2 + 16<i32>:word32]
	Mem0[r29 + 12<i32>:word32] = r3
	// succ:  l000134A8
l000134A8:
	r21 = Mem0[r26 + 4<i32>:word32]
	r26 = r26 + 4<32>
	r2 = r16
	r3 = r2
	r16 = r2
	r17 = r21 + 0xC<32>
	branch p0 l000135BC
	// succ:  l000134C0 l000135BC
l000134C0:
	p0 = r3 == -1<i32>
	r4 = Mem0[r29 + 8<i32>:word64]
	r3 = Mem0[r29 + 12<i32>:word64]
	r1 = 0x437F0000<32>
	r3 = r3 + r2
	r4 = 0<32>
	r2 = r4 + r2
	r2 = Mem0[r14 + r2 * 4<32>:word32]
	r3 = Mem0[r6 + r3 * 4<32>:word32]
	r2 = Mem0[r2 + 16<i32>:word32]
	r3 = Mem0[r3 + 16<i32>:word32]
	r3 = Mem0[r3:word32]
	r2 = Mem0[r2:word32]
	call fn00009614 (retsize: 0;)
	r3 = Mem0[r21 + 4<i32>:word32]
	r2 = Mem0[r21 + 8<i32>:word32]
	r17 = r21 + 0xC<32>
	r20 = r0
	r4 = Mem0[r21 + 12<i32>:word32]
	r5 = Mem0[r21:word32]
	r3 = Mem0[r21 + 16<i32>:word32]
	r2 = r3 * r2
	r19 = r2 * r5
	r7 = SEQ(SLICE(r4, word16, 0), SLICE(r19, word16, 0))
	r1_r0 = r4_r7
	r2 = Mem0[r29 + 20<i32>:word64]
	r1 = r20
	call fn00009614 (retsize: 0;)
	r3 = Mem0[r29 + 16<i32>:word64]
	r2 = r0
	r0 = 0x41700000<32>
	call fn000097C0 (retsize: 0;)
	p0 = r19 == 0<32>
	r2 = r27 + 0<32>
	branch p0 l000135C0
	// succ:  l00013554 l000135C0
l00013554:
	r3 = Mem0[r21 + 16<i32>:word32]
	r7 = Mem0[r21 + 12<i32>:word32]
	r4 = 0x7FFF<32>
	r4 = CONVERT(SLICE(r5, int16, 0), int16, int32)
	p0 = r5 > r4
	__loop(0<i32>, 0x00013568<p32>, r19)
	r7 = 0<32>
	branch p0 l000135B4
	// succ:  l00013570 l000135B4
l00013570:
	p0 = r7 == 0<32>
	r5 = r3
	r6 = 0<32>
	r5 = r5 + 1<i32>
	r8 = Mem0[r5:byte]
	r7 = 0xFF<32>
	// succ:  l00013578
l00013578:
	r8 = r8 + r20
	r8 = r8 >> 0xF<32>
	r7 = r8 + 0<32>
	p0 = r8 > 0xFF<32>
	branch p0 l000135A0
	// succ:  l00013598 l000135A0
l00013598:
	r7 = 0<32>
	p0 = r8 > 0xFFFFFFFF<32>
	// succ:  l000135A0
l000135A0:
	r6 = r6 + 1<32>
	r8 = r2 + r6
	Mem0[r8:byte] = r7
	branch r7 >u r6 l00013578
	goto l000135B8
	// succ:  l000135B8 l00013578
l000135B4:
	r2 = r2 + r22
	r3 = r3 + r7
	goto l000135BC
	// succ:  l000135BC
l000135B8:
	r7 = Mem0[r17:word32]
	r2 = r2 + r22
	r3 = r3 + r7
	// succ:  l000135BC
l000135BC:
	r2 = Mem0[r17:word32]
	p0 = r18 >u r16
	goto l000135C4
	// succ:  l000135C4
l000135C0:
	r2 = Mem0[r17:word32]
	// succ:  l000135C4
l000135C4:
	r27 = r27 + r2
	branch p0 l000134A8
	// succ:  l000135CC l000134A8
l000135CC:
	r17_r16 = Mem0[r29 + 64<i32>:word64]
	r2 = Mem0[r29 + 4<i32>:word64]
	r1 = 1<32>
	r21_r20 = Mem0[r29 + 48<i32>:word64]
	r19_r18 = Mem0[r29 + 56<i32>:word64]
	r0 = r2 + 0x14<32>
	r25_r24 = Mem0[r29 + 32<i32>:word64]
	r23_r22 = Mem0[r29 + 40<i32>:word64]
	v38 = r30
	r31 = Mem0[v38 + 4<i32>:word32]
	r30 = Mem0[v38:word32]
	r29 = v38 + 8<i32>
	r27_r26 = Mem0[r29 + 24<i32>:word64]
	goto l00009730_in_concat_execute_slice_ref
	// succ:  l00009730_in_concat_execute_slice_ref
concat_execute_slice_ref_exit:


// logmsg_function
// Return size: 0
define logmsg_function
logmsg_function_entry:
	r29 = fp
	// succ:  l000135F0
l000135F0:
	v4 = r29 - 8<i32>
	Mem0[v4:word32] = r30
	Mem0[v4 + 4<i32>:word32] = r31
	r30 = v4
	r29 = v4 - 8<i32>
	r3 = 2<32>
	branch r3 >u r5 l000135F4_thunk_errlog_function
	goto l00013600
	// succ:  l00013600 l000135F4_thunk_errlog_function
l000135F4_thunk_errlog_function:
	call errlog_function (retsize: 0;)
	return
	// succ:  logmsg_function_exit
l00013600:
	r5 = Mem0[r2 + 16<i32>:word32]
	r5 = r29 + 0x10<32>
	r3 = 2<32>
	r0 = badva + 0x2C<32>
	Mem0[r29 + 1<i32>:byte] = r6
	r6 = r29 + 0x10<32>
	call logv (retsize: 0;)
	// succ:  l00013608_thunk_errlog_function
l00013608_thunk_errlog_function:
	call errlog_function (retsize: 0;)
	return
	// succ:  logmsg_function_exit
logmsg_function_exit:


// errlog_function
// Return size: 0
define errlog_function
errlog_function_entry:
	r29 = fp
	// succ:  l00013618
l00013618:
	v4 = r29 - 8<i32>
	Mem0[v4:word32] = r30
	Mem0[v4 + 4<i32>:word32] = r31
	r30 = v4
	r29 = v4 - 8<i32>
	r4 = r3
	r0 = badva + 0x10<32>
	Mem0[r29 + 1<i32>:byte] = r6
	r6 = r29 + 0x10<32>
	r5 = r29 + 0x10<32>
	r3 = 0<32>
	v13 = r30
	r31 = Mem0[v13 + 4<i32>:word32]
	r30 = Mem0[v13:word32]
	r29 = v13 + 8<i32>
	return
	// succ:  errlog_function_exit
errlog_function_exit:


// concat_execute_slice_asm
// Return size: 0
define concat_execute_slice_asm
concat_execute_slice_asm_entry:
	r29 = fp
	goto l0001363C
	// succ:  l0001363C
l00009730_in_concat_execute_slice_asm:
	r14 = badva + 0<32>
	r28 = Mem0[r14:word32]
	call r28 (retsize: 0;)
	return
	// succ:  concat_execute_slice_asm_exit
l0001363C:
	v4 = r29 - 8<i32>
	Mem0[v4:word32] = r30
	Mem0[v4 + 4<i32>:word32] = r31
	r30 = v4
	r29 = v4 - 72<i32>
	r0 = 0<32>
	r2 = Mem0[r1 + 12<i32>:word32]
	r4 = Mem0[r1 + 8<i32>:word32]
	Mem0[r29 + 64<i32>:word64] = r17_r16
	r17 = Mem0[r1:word32]
	r3 = Mem0[r1 + 16<i32>:word32]
	Mem0[r29 + 16<i32>:word32] = r3
	Mem0[r29 + 32<i32>:word64] = r25_r24
	Mem0[r29 + 8<i32>:word32] = r1
	r24 = Mem0[r1 + 4<i32>:word32]
	r3 = Mem0[r17 + 16<i32>:word32]
	Mem0[r29 + 48<i32>:word64] = r21_r20
	Mem0[r29 + 56<i32>:word64] = r19_r18
	r19 = r3 + 0xFFFFFFFF<32>
	Mem0[r29 + 24<i32>:word64] = r27_r26
	Mem0[r29 + 40<i32>:word64] = r23_r22
	Mem0[r29 + 20<i32>:word32] = r4
	r16 = Mem0[r17 + 4<i32>:word32]
	call fn00009610 (retsize: 0;)
	Mem0[r29 + 12<i32>:word32] = r0
	r2 = 3<32>
	r25 = r16 + 4<32>
	r27 = 0<32>
	branch p0 l00013770
	// succ:  l00013690 l00013770
l00013690:
	p0 = r2 >u r11
	r3 = Mem0[r17 + 8<i32>:word32]
	r2 = 0x2B<32>
	r7 = Mem0[r3:word32]
	r20 = Mem0[r7 + 16<i32>:word32]
	r19 = r2 >>u 1<32>
	r16 = r19 << 3<32>
	r26 = r19 << 2<32>
	// succ:  l000136B0
l000136B0:
	r17 = Mem0[r25:word32]
	r27 = r27 + 1<32>
	r2 = r27 & 1<32>
	r17 = r17 + 0xC<32>
	// succ:  l0001375C
l0001375C:
	r2 = Mem0[r17:word32]
	p0 = r19 >u r27
	r25 = r25 + 4<32>
	r20 = r20 + r2
	branch p0 l000136B0
	// succ:  l00013770 l000136B0
l00013770:
	r17_r16 = Mem0[r29 + 64<i32>:word64]
	r2 = Mem0[r29 + 8<i32>:word64]
	r1 = 1<32>
	r21_r20 = Mem0[r29 + 48<i32>:word64]
	r19_r18 = Mem0[r29 + 56<i32>:word64]
	r0 = r2 + 0x14<32>
	r25_r24 = Mem0[r29 + 32<i32>:word64]
	r23_r22 = Mem0[r29 + 40<i32>:word64]
	v29 = r30
	r31 = Mem0[v29 + 4<i32>:word32]
	r30 = Mem0[v29:word32]
	r29 = v29 + 8<i32>
	r27_r26 = Mem0[r29 + 24<i32>:word64]
	goto l00009730_in_concat_execute_slice_asm
	// succ:  l00009730_in_concat_execute_slice_asm
concat_execute_slice_asm_exit:


// hexagon_nn_const_ctor
// Return size: 0
define hexagon_nn_const_ctor
hexagon_nn_const_ctor_entry:
	r29 = fp
	// succ:  l000137A0
l000137A0:
	v4 = r29 - 8<i32>
	Mem0[v4:word32] = r30
	Mem0[v4 + 4<i32>:word32] = r31
	r30 = v4
	r29 = v4 - 48<i32>
	Mem0[r29 - 44<i32>:word32] = r5
	Mem0[r29 + 40<i32>:word64] = r17_r16
	r0 = r29 + 0<32>
	r17_r16 = r1_r0
	Mem0[r29:word32] = r2
	Mem0[r29 + 8<i32>:word32] = r4
	Mem0[r29 + 32<i32>:word64] = r19_r18
	r4 = Mem0[r29 + 56<i32>:word64]
	Mem0[r29 + 4<i32>:word32] = r3
	r3 = Mem0[r29 + 60<i32>:word64]
	Mem0[r29 + 24<i32>:word32] = r3
	Mem0[r29 + 16<i32>:word32] = r4
	Mem0[r29 + 20<i32>:word32] = r3
	call tensor_dup (retsize: 0;)
	branch r18 == 0<32> l000137F0
	// succ:  l000137D4 l000137F0
l000137D4:
	r18 = r0
	r2 = r16
	r1 = 0x54<32>
	r3 = badva + 0x28<32>
	r17 = 0<32>
	call errlog_function (retsize: 0;)
	goto l00013828
	// succ:  l00013828
l000137F0:
	r17 = 0<32>
	r2 = 0<32>
	r2 = r18 + 0x1C<32>
	branch p0 l00013818
	// succ:  l00013800 l00013818
l00013800:
	p0 = r0 == 0<32>
	r2 = r16
	r1 = 0x58<32>
	r3 = badva + 0xB<32>
	call errlog_function (retsize: 0;)
	goto l00013828
	// succ:  l00013828
l00013818:
	Mem0[r0 + 4<i32>:word32] = 0<32>
	Mem0[r0 + 20<i32>:word32] = 1<32>
	r17 = r0
	Mem0[r0 + 12<i32>:word32] = 0<32>
	Mem0[r0 + 16<i32>:word32] = 0<32>
	Mem0[r0 + 8<i32>:word32] = r2
	// succ:  l00013828
l00013828:
	r19_r18 = Mem0[r29 + 32<i32>:word64]
	r17_r16 = Mem0[r29 + 40<i32>:word64]
	r0 = r17
	v21 = r30
	r31 = Mem0[v21 + 4<i32>:word32]
	r30 = Mem0[v21:word32]
	r29 = v21 + 8<i32>
	return
	// succ:  hexagon_nn_const_ctor_exit
hexagon_nn_const_ctor_exit:


// errlog_function
// Return size: 0
define errlog_function
errlog_function_entry:
	r29 = fp
	// succ:  l00013834
l00013834:
	v4 = r29 - 8<i32>
	Mem0[v4:word32] = r30
	Mem0[v4 + 4<i32>:word32] = r31
	r30 = v4
	r29 = v4 - 8<i32>
	r4 = r3
	r0 = badva + 0x29<32>
	Mem0[r29 + 1<i32>:byte] = r6
	r6 = r29 + 0x10<32>
	r5 = r29 + 0x10<32>
	r3 = 0<32>
	v13 = r30
	r31 = Mem0[v13 + 4<i32>:word32]
	r30 = Mem0[v13:word32]
	r29 = v13 + 8<i32>
	return
	// succ:  errlog_function_exit
errlog_function_exit:


// const_execute
// Return size: 0
define const_execute
const_execute_entry:
	r29 = fp
	// succ:  l00013858
l00013858:
	return
	// succ:  const_execute_exit
const_execute_exit:


// const_check
// Return size: 0
define const_check
const_check_entry:
	r29 = fp
	// succ:  l00013860
l00013860:
	v4 = r29 - 8<i32>
	Mem0[v4:word32] = r30
	Mem0[v4 + 4<i32>:word32] = r31
	r30 = v4
	r29 = v4 - 16<i32>
	Mem0[r29 + 496<i32>:word64] = r17_r16
	r4 = badva + 0x3E<32>
	r17 = r0
	r16 = r1
	r1 = 0x36<32>
	call logmsg_function (retsize: 0;)
	Mem0[r29:word32] = r17
	branch r2 == 0<32> l000138A8
	// succ:  l0001388C l000138A8
l0001388C:
	r2 = Mem0[r17 + 4<i32>:word32]
	r3 = 0<32>
	r1 = 0x38<32>
	r4 = badva + 0x2D<32>
	// succ:  l00013894
l00013894:
	Mem0[r29:word32] = r4
	r2 = r16
	call errlog_function (retsize: 0;)
	r0 = 0xFFFFFFFF<32>
	v16 = r30
	r31 = Mem0[v16 + 4<i32>:word32]
	r30 = Mem0[v16:word32]
	r29 = v16 + 8<i32>
	return
	// succ:  const_check_exit
l000138A8:
	branch r2 == 0<32> l000138C0
	// succ:  l000138B0 l000138C0
l000138B0:
	r3 = 0<32>
	r1 = 0x3B<32>
	r4 = badva + 0x1E<32>
	goto l00013894
	// succ:  l00013894
l000138C0:
	branch r2 == 0<32> l000138E0
	// succ:  l000138CC l000138E0
l000138CC:
	r2 = Mem0[r2:word32]
	r3 = 0<32>
	r1 = 0x3E<32>
	r4 = badva + 0x1D<32>
	goto l00013894
	// succ:  l00013894
l000138E0:
	Mem0[r29:word32] = r17
	call logmsg_function (retsize: 0;)
	r0 = 0<32>
	v17 = r30
	r31 = Mem0[v17 + 4<i32>:word32]
	r30 = Mem0[v17:word32]
	r29 = v17 + 8<i32>
	return
	// succ:  const_check_exit
const_check_exit:


// const_ctor
// Return size: 0
define const_ctor
const_ctor_entry:
	r29 = fp
	// succ:  l00013900
l00013900:
	r4 = badva + 0x2E<32>
	r1 = 0x6D<32>
	v7 = r29 - 8<i32>
	Mem0[v7:word32] = r30
	Mem0[v7 + 4<i32>:word32] = r31
	r30 = v7
	r29 = v7 - 0<i32>
	call logmsg_function (retsize: 0;)
	v10 = r30
	r31 = Mem0[v10 + 4<i32>:word32]
	r30 = Mem0[v10:word32]
	r29 = v10 + 8<i32>
	return
	// succ:  const_ctor_exit
const_ctor_exit:


// const_dtor
// Return size: 0
define const_dtor
const_dtor_entry:
	r29 = fp
	// succ:  l00013920
l00013920:
	r4 = badva + 0x3B<32>
	v6 = r29 - 8<i32>
	Mem0[v6:word32] = r30
	Mem0[v6 + 4<i32>:word32] = r31
	r30 = v6
	r29 = v6 - 16<i32>
	Mem0[r29 + 8<i32>:word64] = r17_r16
	r16 = r0
	r1 = 0x73<32>
	Mem0[r29:word32] = r16
	call logmsg_function (retsize: 0;)
	r2 = Mem0[r16 + 8<i32>:word32]
	r0 = Mem0[r2:word32]
	call tensor_free (retsize: 0;)
	r0 = r16
	call fn00009510 (retsize: 0;)
	v14 = r30
	r31 = Mem0[v14 + 4<i32>:word32]
	r30 = Mem0[v14:word32]
	r29 = v14 + 8<i32>
	return
	// succ:  const_dtor_exit
const_dtor_exit:


// logmsg_function
// Return size: 0
define logmsg_function
logmsg_function_entry:
	r29 = fp
	// succ:  l0001395C
l0001395C:
	v4 = r29 - 8<i32>
	Mem0[v4:word32] = r30
	Mem0[v4 + 4<i32>:word32] = r31
	r30 = v4
	r29 = v4 - 8<i32>
	branch r3 >u r5 l00013960_thunk_conv2d_execute_hvx
	goto l0001396C
	// succ:  l0001396C l00013960_thunk_conv2d_execute_hvx
l00013960_thunk_conv2d_execute_hvx:
	call conv2d_execute_hvx (retsize: 0;)
	return
	// succ:  logmsg_function_exit
l0001396C:
	r5 = Mem0[r2 + 16<i32>:word32]
	r6 = r29 + 0x10<32>
	r5 = r29 + 0x10<32>
	r0 = badva + 0x35<32>
	Mem0[r29 + 4<i32>:word32] = r6
	call logv (retsize: 0;)
	v13 = r30
	r31 = Mem0[v13 + 4<i32>:word32]
	r30 = Mem0[v13:word32]
	r29 = v13 + 8<i32>
	return
	// succ:  logmsg_function_exit
logmsg_function_exit:


// conv2d_execute_hvx
// Return size: 0
define conv2d_execute_hvx
conv2d_execute_hvx_entry:
	r29 = fp
	// succ:  l00013980
l00013980:
	v4 = r29 - 8<i32>
	Mem0[v4:word32] = r30
	Mem0[v4 + 4<i32>:word32] = r31
	r30 = v4
	r29 = v4 - 184<i32>
	Mem0[r29 - 56<i32>:word64] = r27_r26
	r27 = r0
	Mem0[r29 + 160<i32>:word64] = r21_r20
	r2 = Mem0[r27 + 4<i32>:word32]
	Mem0[r29 + 152<i32>:word64] = r23_r22
	r3 = Mem0[r27 + 8<i32>:word32]
	r22 = Mem0[r2 + 4<i32>:word32]
	r21 = Mem0[r27 + 32<i32>:int8]
	r5 = Mem0[r2 + 24<i32>:word32]
	r20 = Mem0[r2:word32]
	Mem0[r29 + 168<i32>:word64] = r19_r18
	Mem0[r29 + 176<i32>:word64] = r17_r16
	p0 = r21 == 0<32>
	Mem0[r29 + 144<i32>:word64] = r25_r24
	r4 = Mem0[r3 + 8<i32>:word32]
	r3 = Mem0[r3 + 4<i32>:word32]
	r16 = Mem0[r3:word32]
	r23 = Mem0[r2 + 8<i32>:word32]
	r19 = Mem0[r2 + 12<i32>:word32]
	r18 = Mem0[r2 + 16<i32>:word32]
	r25 = Mem0[r2 + 20<i32>:word32]
	Mem0[r29 + 100<i32>:word32] = r1
	r2 = Mem0[r22 + 12<i32>:word32]
	r0 = Mem0[r20 + 8<i32>:word32]
	Mem0[r29 + 80<i32>:word32] = r3
	r7 = Mem0[r20 + 12<i32>:word32]
	Mem0[r29 + 116<i32>:word32] = r2
	r2 = Mem0[r22 + 8<i32>:word32]
	r3 = Mem0[r22 + 4<i32>:word32]
	r17 = Mem0[r20 + 4<i32>:word32]
	r24 = Mem0[r5 + 4<i32>:word32]
	r1 = Mem0[r5 + 8<i32>:word32]
	Mem0[r29 + 108<i32>:word32] = r7
	r6 = Mem0[r20:word32]
	r7 = Mem0[r22:word32]
	Mem0[r29 + 88<i32>:word32] = r5
	Mem0[r29 + 92<i32>:word32] = r2
	r2 = p0
	Mem0[r29 + 76<i32>:word32] = r4
	Mem0[r29 + 128<i32>:word32] = r0
	Mem0[r29 + 124<i32>:word32] = r7
	Mem0[r29 + 104<i32>:word32] = r6
	Mem0[r29 + 84<i32>:word32] = r2
	branch p0 l00013A3C
	// succ:  l00013A08 l00013A3C
l00013A08:
	r2 = Mem0[r29 - 128<i32>:word32]
	branch p0 l00013A34
	// succ:  l00013A10 l00013A34
l00013A10:
	p0 = r13 == 4<32>
	Mem0[r29 + 120<i32>:word32] = r3
	Mem0[r29 + 112<i32>:word32] = r1
	p0 = r21 == 1<32>
	r0 = 0<32>
	r1 = Mem0[r29 + 112<i32>:word32]
	r2 = Mem0[r29 - 128<i32>:word32]
	branch p0 l00013A44
	// succ:  l00013A28 l00013A44
l00013A28:
	r3 = Mem0[r29 + 120<i32>:word64]
	r0 = r1
	goto l00013A40
	// succ:  l00013A40
l00013A34:
	r2 = r2 - r3
	r0 = r2 + r1
	// succ:  l00013A3C
l00013A3C:
	Mem0[r29 + 120<i32>:word32] = r3
	Mem0[r29 + 112<i32>:word32] = r1
	call fn00009760 (retsize: 0;)
	goto l00013A44
	// succ:  l00013A44
l00013A40:
	Mem0[r29 + 120<i32>:word32] = r3
	Mem0[r29 + 112<i32>:word32] = r1
	// succ:  l00013A44
l00013A44:
	r2 = Mem0[r29 + 124<i32>:word32]
	r1 = r24 + 0<32>
	branch p0 l00013A80
	// succ:  l00013A50 l00013A80
l00013A50:
	p0 = r13 == 4<32>
	Mem0[r29 + 96<i32>:word32] = r0
	r26 = r24 + 0<32>
	branch p0 l00013A74
	// succ:  l00013A5C l00013A74
l00013A5C:
	p0 = r13 == 2<32>
	r1 = Mem0[r29 + 84<i32>:word64]
	r0 = 0<32>
	r1_r0 = r26_r17
	branch p0 l00013A98
	// succ:  l00013A6C l00013A98
l00013A6C:
	p0 = r1
	call fn00009760 (retsize: 0;)
	goto l00013A94
	// succ:  l00013A94
l00013A74:
	r1_r0 = r24_r24
	goto l00013A90
	// succ:  l00013A90
l00013A80:
	Mem0[r29 + 96<i32>:word32] = r0
	r2 = r17 - r2
	r0 = r2 + r24
	r26 = r24
	call fn00009760 (retsize: 0;)
l00013A90:
	r26 = r24
	// succ:  l00013A94
l00013A94:
	r3 = Mem0[r23 + 16<i32>:word32]
	r2 = Mem0[r19 + 16<i32>:word32]
	r19 = 0x437F0000<32>
	goto l00013AA0
	// succ:  l00013AA0
l00013A98:
	r3 = Mem0[r23 + 16<i32>:word32]
	r2 = Mem0[r19 + 16<i32>:word32]
	r19 = 0<32>
	// succ:  l00013AA0
l00013AA0:
	r4 = Mem0[r18 + 16<i32>:word32]
	r6 = Mem0[r22 + 16<i32>:word32]
	r24 = r0
	r21 = Mem0[r3:word32]
	r2 = Mem0[r2:word32]
	Mem0[r29 + 68<i32>:word32] = r6
	r5 = Mem0[r25 + 16<i32>:word32]
	r6 = Mem0[r16 + 16<i32>:word32]
	r7 = Mem0[r20 + 16<i32>:word32]
	Mem0[r29 + 84<i32>:word32] = r7
	Mem0[r29 + 48<i32>:word32] = r26
	r1_r0 = r19_r22
	Mem0[r29 + 72<i32>:word32] = r6
	r18 = Mem0[r5:word32]
	r25 = Mem0[r4:word32]
	call fn00009610 (retsize: 0;)
	r23 = r0
	r1_r0 = r19_r20
	call fn00009610 (retsize: 0;)
	r2 = 0xCF000000<32>
	r0 = r22
	r3 = 0<32>
	Mem0[r29 + 56<i32>:word32] = r2
	r18 = 0<32>
	r1_r0 = r0_r19
	call fn00009610 (retsize: 0;)
	call fn00009624 (retsize: 0;)
	r0 = r20
	r2 = r0
	r2 = 0<32>
	r1_r0 = r0_r2
	call fn00009610 (retsize: 0;)
	call fn00009624 (retsize: 0;)
	r5 = Mem0[r27 + 28<i32>:word32]
	r22 = Mem0[r29 + 100<i32>:word32]
	r4 = badva + 0x20<32>
	r1 = 0x207<32>
	Mem0[r29 + 4<i32>:word32] = r5
	Mem0[r29:word32] = r27
	Mem0[r29 + 64<i32>:word32] = r7
	call logmsg_function (retsize: 0;)
	r21 = Mem0[r29 + 104<i32>:word64]
	r19 = Mem0[r29 + 108<i32>:word64]
	r4 = badva + 0x12<32>
	Mem0[r29 + 12<i32>:word32] = r19
	r5 = Mem0[r29 + 128<i32>:word32]
	Mem0[r29 + 4<i32>:word32] = r17
	Mem0[r29 + 8<i32>:word32] = r5
	r1 = 0x208<32>
	Mem0[r29:word32] = r21
	call logmsg_function (retsize: 0;)
	r5 = Mem0[r29 + 120<i32>:word32]
	r25 = Mem0[r29 + 92<i32>:word32]
	r4 = badva + 3<32>
	Mem0[r29 + 12<i32>:word32] = r25
	Mem0[r29 + 8<i32>:word32] = r5
	r20 = Mem0[r29 + 124<i32>:word64]
	r1 = 0x209<32>
	Mem0[r29 + 4<i32>:word32] = r20
	r18 = Mem0[r29 + 116<i32>:word32]
	Mem0[r29:word32] = r18
	call logmsg_function (retsize: 0;)
	r5 = Mem0[r29 + 112<i32>:word32]
	r1 = 0x20A<32>
	r4 = badva + 0x2B<32>
	Mem0[r29:word32] = r26
	Mem0[r29 + 4<i32>:word32] = r5
	call logmsg_function (retsize: 0;)
	r4 = badva + 0x1F<32>
	r1 = 0x20B<32>
	Mem0[r29:byte] = r5
	r5 = Mem0[r27 + 32<i32>:byte]
	call logmsg_function (retsize: 0;)
	Mem0[r29:word32] = r21
	Mem0[r29 + 12<i32>:word32] = r18
	r4 = badva + 0x15<32>
	Mem0[r29 + 4<i32>:word32] = r24
	r23 = Mem0[r29 + 96<i32>:word32]
	Mem0[r29 + 8<i32>:word32] = r23
	r1 = 0x20C<32>
	call logmsg_function (retsize: 0;)
	r9 = r17
	r1 = 0x20D<32>
	r3 = badva + 0x10<32>
	branch r12 == r25 l00013CF4
	// succ:  l00013C58 l00013CF4
l00013C58:
	r12 = r19
	r2 = r21 * r18
	r2 = r2 * r23
	r2 = r2 * r24
	branch r4 >u r5 l00013C88
	// succ:  l00013C6C l00013C88
l00013C6C:
	r4 = r2 << 2<32>
	Mem0[r29 + 2<i32>:byte] = r2
	r2 = Mem0[r27 + 28<i32>:word32]
	r3 = badva + 0x21<32>
	Mem0[r29:word32] = r5
	Mem0[r29 + 4<i32>:word32] = r4
	goto l00013CF0
	// succ:  l00013CF0
l00013C88:
	r2 = Mem0[r29 + 88<i32>:word64]
	r19 = r23
	r23 = r24
	r3 = badva + 0x2B<32>
	branch r2 == 2<32> l00013CF0
	// succ:  l00013CA4 l00013CF0
l00013CA4:
	r2 = Mem0[r2:word32]
	r2 = Mem0[r29 + 88<i32>:word32]
	r1 = 0x212<32>
	r3 = badva + 0x28<32>
	branch r2 == 2<32> l00013CF0
	// succ:  l00013CBC l00013CF0
l00013CBC:
	r2 = Mem0[r2 + 12<i32>:word32]
	r2 = Mem0[r29 + 80<i32>:word64]
	r5 = 4<32>
	r3 = badva + 0x21<32>
	r1 = 0x213<32>
	branch r5 >u r2 l00013CF0
	// succ:  l00013CD4 l00013CF0
l00013CD4:
	r2 = Mem0[r2 + 20<i32>:word32]
	r2 = Mem0[r29 + 76<i32>:word32]
	r1 = 0x214<32>
	r3 = badva + 0x17<32>
	branch r2 >u 6<32> l00013D04
	// succ:  l00013CF0 l00013D04
l00013CF0:
	call errlog_function (retsize: 0;)
	// succ:  l00013CF4
l00013CF4:
	r0 = 0xFFFFFFFF<32>
	goto l00014018
	// succ:  l00014018
l00013D04:
	Mem0[r7 + 12<i32>:word32] = r18
	r2 = Mem0[r29 + 120<i32>:word64]
	Mem0[r7:word32] = r21
	Mem0[r7 + 8<i32>:word32] = r19
	r15 = 0<32>
	r3 = r2 * r20
	Mem0[r7 + 4<i32>:word32] = r23
	r17 = r22
	r3 = r3 * r12
	Mem0[r7 + 24<i32>:word32] = r4
	r7 = Mem0[r29 + 80<i32>:word64]
	r5 = r5 & 0xFFFFFFF0<32>
	r6 = r18 + 0x1F<32>
	r2 = Mem0[r29 + 56<i32>:word32]
	r8 = Mem0[r29 + 76<i32>:word32]
	r24 = r6 & 0xFFFFFFE0<32>
	r5 = max<int32>(r5, r1)
	r13 = Mem0[r29 + 60<i32>:word32]
	r6 = r24 << 2<32>
	Mem0[r7 + 4<i32>:word32] = 1<32>
	r4 = Mem0[r7 + 16<i32>:word32]
	Mem0[r7 + 12<i32>:word32] = 1<32>
	Mem0[r7 + 8<i32>:word32] = 1<32>
	Mem0[r4:word32] = r2
	Mem0[r7:word32] = 1<32>
	r0 = r5
	r4 = r27 << 2<32>
	Mem0[r8 + 4<i32>:word32] = 0xFFFFFF81<32>
	Mem0[r7 + 24<i32>:word32] = 4<32>
	r2 = r0 * r24
	r28 = r27 * r0
	Mem0[r8 + 8<i32>:word32] = 1<32>
	r1 = Mem0[r8 + 16<i32>:word32]
	r7 = r2 | 0x7F<32>
	r22 = r28
	Mem0[r8:word32] = 1<32>
	Mem0[r8 + 12<i32>:word32] = 0xFFFFFF81<32>
	Mem0[r8 + 24<i32>:word32] = 4<32>
	Mem0[r1:word32] = r13
	r13 = 0xFF<32>
	Mem0[r29 + 32<i32>:word32] = r5
	r26 = Mem0[r17 + 4<i32>:word32]
	r5 = r7
	Mem0[r29 + 60<i32>:word32] = r3
	r14 = Mem0[r29 + 64<i32>:word32]
	r8 = r26
	Mem0[r29 + 56<i32>:word32] = r2
	p0 = r14 > 0xFF<32>
	r8 = r8 + (r22 + 0x7F<32>)
	r2 = r27 * r24
	Mem0[r29 + 44<i32>:word32] = r9
	p1 = r14 > 0xFFFFFFFF<32>
	r8 = r8 & 0xFFFFFF80<32>
	r3 = r2 << 2<32>
	Mem0[r29 + 64<i32>:word32] = r3
	Mem0[r29 + 92<i32>:word32] = r8
	r8 = r8 + 0x17F<32>
	r2 = 0x80<32> + (r2 << 4<32>)
	r8 = r8 & 0xFFFFFF80<32>
	r18 = r13 + 0<32>
	Mem0[r29 + 88<i32>:word32] = r8
	r18 = CONVERT(SLICE(r14, byte, 0), byte, uint32)
	r8 = r8 + (r4 + 0x7F<32>)
	r0 = r8 & 0xFFFFFF80<32>
	r18 = r15 + 0<32>
	Mem0[r29 + 80<i32>:word32] = r0
	r20 = r0 + (r24 << 2<32>)
	r5 = r5 + (r6 + r0)
	r25 = r5 & 0xFFFFFF80<32>
	Mem0[r29 + 76<i32>:word32] = r25
	r3 = r25 + r7
	r21 = r3 & 0xFFFFFF80<32>
	call fn000095F0 (retsize: 0;)
	r4 = badva + 0x10<32>
	Mem0[r29 + 4<i32>:word32] = r26
	Mem0[r29:word32] = r22
	r16 = r26
	r1 = 0x23B<32>
	call logmsg_function (retsize: 0;)
	r4 = badva + 0xB<32>
	r1 = 0x23C<32>
	Mem0[r29 + 4<i32>:word32] = r20
	r5 = Mem0[r29 + 56<i32>:word64]
	Mem0[r29:word32] = r5
	call logmsg_function (retsize: 0;)
	r4 = badva + 3<32>
	r1 = 0x23D<32>
	Mem0[r29 + 4<i32>:word32] = r21
	r5 = Mem0[r29 + 64<i32>:word64]
	r22 = r21
	Mem0[r29:word32] = r5
	r17 = Mem0[r29 + 128<i32>:word32]
	call logmsg_function (retsize: 0;)
	r2 = Mem0[r29 + 116<i32>:word64]
	r21 = Mem0[r29 + 32<i32>:word64]
	r3 = r20
	r0 = Mem0[r29 + 68<i32>:word64]
	r1 = Mem0[r29 + 60<i32>:word64]
	r5_r4 = r24_r21
	Mem0[r29:word32] = r18
	call pad2d (retsize: 0;)
	r24 = r21
	r26 = r24
	r1_r0 = r21_r20
	r3_r2 = r25_r24
	call transpack (retsize: 0;)
	r7 = Mem0[r29 + 120<i32>:word64]
	r2 = Mem0[r29 + 104<i32>:word64]
	r12 = r23
	r9 = r19
	r8 = Mem0[r29 + 112<i32>:word32]
	r3 = Mem0[r29 + 108<i32>:word32]
	r4 = r12 + 0xFFFFFFFF<32>
	r6 = r7 - r17
	r20 = Mem0[r29 + 72<i32>:word64]
	r19 = Mem0[r29 + 84<i32>:word64]
	branch p0 l00013FE8
	// succ:  l00013EC8 l00013FE8
l00013EC8:
	p0 = r2 > 1<32>
	r5 = Mem0[r29 + 124<i32>:word32]
	r13 = Mem0[r29 + 44<i32>:word32]
	r2 = r9 + 0xFFFFFFFF<32>
	r15 = r12 * r9
	r1 = Mem0[r29 + 52<i32>:word64]
	r0 = Mem0[r29 + 48<i32>:word64]
	r14 = 0<32> - r18
	r5 = r5 - r13
	p0 = r1 > 0xFFFFFFFF<32>
	p1 = r1 > 0xFF<32>
	r6 = 0xFF<32>
	r2 = r6 + r2 * r8
	Mem0[r29 + 60<i32>:word32] = r14
	Mem0[r29 + 64<i32>:word32] = r15
	r5 = r13 * r17
	r4 = r5 + r4 * r0
	r17 = Mem0[r29 + 104<i32>:word64]
	r1 = Mem0[r29 + 116<i32>:word64]
	r6 = CONVERT(SLICE(r1, byte, 0), byte, uint32)
	r2 = r2 + (r2 >>u 0x1F<32>)
	Mem0[r29 + 13<i32>:byte] = r5
	r4 = r4 + (r4 >>u 0x1F<32>)
	r5 = r5 * r3
	r5 = 0<32>
	r2 = r2 >> 1<32>
	Mem0[r29 + 40<i32>:word32] = r2
	Mem0[r29 + 56<i32>:word32] = r0
	r6 = r5 + 0<32>
	Mem0[r29 + 68<i32>:word32] = r6
	r1 = 0<32> - r6
	r6 = r4 >> 1<32>
	Mem0[r29 + 36<i32>:word32] = r6
	Mem0[r29 + 48<i32>:word32] = r1
	Mem0[r29 + 6<i32>:byte] = r2
	r2 = Mem0[r29 + 36<i32>:word32]
	r0 = r19
	r5 = r16
	// succ:  l00013F48
l00013F48:
	r1 = Mem0[r29 + 44<i32>:word64]
	r6 = Mem0[r29 + 40<i32>:word64]
	r18 = r12
	Mem0[r29 + 16<i32>:word32] = r9
	Mem0[r29 + 20<i32>:word32] = r6
	r21 = r8
	r4 = Mem0[r29 + 68<i32>:word64]
	r23 = r7
	Mem0[r29 + 12<i32>:word32] = r12
	r2 = Mem0[r29 + 128<i32>:word32]
	Mem0[r29 + 8<i32>:word32] = r8
	Mem0[r29 + 4<i32>:word32] = r7
	r6 = Mem0[r29 + 124<i32>:word64]
	Mem0[r29:word32] = r6
	call im2col_co (retsize: 0;)
	r1 = Mem0[r29 + 48<i32>:word64]
	r2 = Mem0[r29 + 92<i32>:word64]
	r5_r4 = r27_r22
	Mem0[r29 + 28<i32>:word32] = r2
	r7 = Mem0[r29 + 80<i32>:word64]
	r0 = r16
	Mem0[r29 + 24<i32>:word32] = r7
	r2 = Mem0[r29 + 88<i32>:word64]
	Mem0[r29 + 16<i32>:word32] = r24
	Mem0[r29 + 20<i32>:word32] = r2
	r2 = Mem0[r29 + 76<i32>:word64]
	r3 = Mem0[r29 + 60<i32>:word64]
	Mem0[r29 + 4<i32>:word32] = r24
	Mem0[r29 + 8<i32>:word32] = r27
	Mem0[r29 + 12<i32>:word32] = 0xFFFFFFA0<32>
	Mem0[r29:word32] = r26
	call gemm_asm (retsize: 0;)
	r4 = Mem0[r29 + 64<i32>:word64]
	r5 = Mem0[r29 + 116<i32>:word64]
	r1_r0 = r27_r22
	r3_r2 = r20_r26
	call unpad2d (retsize: 0;)
	r6 = Mem0[r29 + 52<i32>:word64]
	r2 = Mem0[r29 + 56<i32>:word64]
	r9_r8 = r25_r21
	r12 = r18
	r3 = Mem0[r29 + 108<i32>:word64]
	r7 = r23
	r19 = r19 + r6
	branch r17 == 1<32> l00013F48
	goto l00013FEC
	// succ:  l00013FEC l00013F48
l00013FE8:
	Mem0[r29 + 3<i32>:byte] = r2
	r2 = Mem0[r29 + 116<i32>:word32]
	r4 = badva + 2<32>
	goto l00013FFC
	// succ:  l00013FFC
l00013FEC:
	r17 = r17 + 0xFFFFFFFF<32>
	r20 = r20 + (r2 << 2<32>)
	Mem0[r29 + 3<i32>:byte] = r2
	r2 = Mem0[r29 + 116<i32>:word32]
	r4 = badva + 2<32>
	// succ:  l00013FFC
l00013FFC:
	Mem0[r29 + 8<i32>:word32] = r9
	r2 = Mem0[r29 + 100<i32>:word32]
	r1 = 0x259<32>
	Mem0[r29:word32] = r5
	Mem0[r29 + 4<i32>:word32] = r12
	call logmsg_function (retsize: 0;)
	r0 = 0<32>
	// succ:  l00014018
l00014018:
	r19_r18 = Mem0[r29 + 168<i32>:word64]
	r17_r16 = Mem0[r29 + 176<i32>:word64]
	r23_r22 = Mem0[r29 + 152<i32>:word64]
	r21_r20 = Mem0[r29 + 160<i32>:word64]
	r27_r26 = Mem0[r29 + 136<i32>:word64]
	r25_r24 = Mem0[r29 + 144<i32>:word64]
	v57 = r30
	r31 = Mem0[v57 + 4<i32>:word32]
	r30 = Mem0[v57:word32]
	r29 = v57 + 8<i32>
	return
	// succ:  conv2d_execute_hvx_exit
conv2d_execute_hvx_exit:


// conv2d_check_ref
// Return size: 0
define conv2d_check_ref
conv2d_check_ref_entry:
	r29 = fp
	// succ:  l0001402C
l0001402C:
	v4 = r29 - 8<i32>
	Mem0[v4:word32] = r30
	Mem0[v4 + 4<i32>:word32] = r31
	r30 = v4
	r29 = v4 - 48<i32>
	Mem0[r29 + 496<i32>:word64] = r17_r16
	r4 = badva + 7<32>
	r17 = r0
	r16 = r1
	r1 = 0x271<32>
	call logmsg_function (retsize: 0;)
	Mem0[r29:word32] = r17
	Mem0[r29 + 32<i32>:word64] = r19_r18
	branch r2 == 0xE<32> l00014070
	// succ:  l00014058 l00014070
l00014058:
	r2 = Mem0[r17 + 16<i32>:word32]
	r2 = Mem0[r17 + 28<i32>:word32]
	r1 = 0x272<32>
	r3 = badva + 0x37<32>
	Mem0[r29:word32] = r2
	goto l00014080
	// succ:  l00014080
l00014070:
	branch r2 == 6<32> l00014098
	// succ:  l0001407C l00014098
l0001407C:
	r2 = Mem0[r17 + 20<i32>:word32]
	r3 = badva + 0x2F<32>
	// succ:  l00014080
l00014080:
	r2 = r16
	call errlog_function (retsize: 0;)
	// succ:  l00014088
l00014088:
	r0 = 0xFFFFFFFF<32>
	goto l000141A8
	// succ:  l000141A8
l00014098:
	branch r3 == 0<32> l000140B0
	// succ:  l000140A0 l000140B0
l000140A0:
	goto l00014088
	// succ:  l00014088
l000140B0:
	r4 = 0<32>
	r1 = 0x275<32>
	__loop(0<i32>, 0x000140BC<p32>, 7<32>)
	branch r5 == 0<32> l000140E8
	// succ:  l000140C8 l000140E8
l000140C8:
	r5 = Mem0[r3:word32]
	Mem0[r29:word32] = r4
	r1 = 0x278<32>
	r3 = badva + 0x13<32>
	goto l00014080
	// succ:  l00014080
l000140E8:
	r4 = r4
	r3 = r3 + 4<32>
	goto l000140FC
	// succ:  l000140FC
l000140F4:
	branch r4 >u 4<32> l00014120
	goto l00014100
	// succ:  l00014100 l00014120
l000140FC:
	branch r3 == 1<32> l000140F4
	goto l00014108
	// succ:  l00014108 l000140F4
l00014100:
	r4 = r4 + 1<32>
	branch r3 == 1<32> l000140F4
	// succ:  l00014108 l000140F4
l00014108:
	r3 = Mem0[r2:word32]
	Mem0[r29:word32] = r4
	r1 = 0x27D<32>
	r3 = badva + 0x21<32>
	goto l00014080
	// succ:  l00014080
l00014120:
	r1 = 0x282<32>
	Mem0[r29:word32] = r17
	call logmsg_function (retsize: 0;)
	branch r2 == 0<32> l00014194
	// succ:  l00014140 l00014194
l00014140:
	r2 = Mem0[r17 + 16<i32>:word32]
	r19_r18 = 0<64>
	r2 = Mem0[r17 + 4<i32>:word32]
	r1 = 0x26B<32>
	r4 = badva + 0x1F<32>
	r2 = Mem0[r13 + r18:word32]
	r6 = Mem0[r2:word32]
	r5 = Mem0[r2 + 16<i32>:word32]
	r8 = Mem0[r2 + 8<i32>:word32]
	r7 = Mem0[r2 + 4<i32>:word32]
	r2 = Mem0[r2 + 24<i32>:word32]
	r9 = Mem0[r2 + 12<i32>:word32]
	Mem0[r29 + 8<i32>:word32] = r7
	Mem0[r29 + 24<i32>:word32] = r5
	Mem0[r29 + 4<i32>:word32] = r6
	Mem0[r29 + 20<i32>:word32] = r2
	Mem0[r29 + 12<i32>:word32] = r8
	Mem0[r29 + 16<i32>:word32] = r9
	Mem0[r29:word32] = r19
	call logmsg_function (retsize: 0;)
	r2 = Mem0[r17 + 16<i32>:word32]
	r18 = r18 + 4<32>
	branch r2 >u r19 l00014140
	// succ:  l00014190 l00014140
l00014190:
	r19 = r19 + 1<32>
	r4 = badva + 0x37<32>
	goto l00014198
	// succ:  l00014198
l00014194:
	// succ:  l00014198
l00014198:
	r1 = 0x286<32>
	Mem0[r29:word32] = r17
	call logmsg_function (retsize: 0;)
	r0 = 0<32>
	// succ:  l000141A8
l000141A8:
	r19_r18 = Mem0[r29 + 32<i32>:word64]
	r17_r16 = Mem0[r29 + 40<i32>:word64]
	v17 = r30
	r31 = Mem0[v17 + 4<i32>:word32]
	r30 = Mem0[v17:word32]
	r29 = v17 + 8<i32>
	return
	// succ:  conv2d_check_ref_exit
conv2d_check_ref_exit:


// conv2d_ctor
// Return size: 0
define conv2d_ctor
conv2d_ctor_entry:
	r29 = fp
	// succ:  l000141B0
l000141B0:
	v4 = r29 - 8<i32>
	Mem0[v4:word32] = r30
	Mem0[v4 + 4<i32>:word32] = r31
	r30 = v4
	r29 = v4 - 40<i32>
	Mem0[r29 + 488<i32>:word64] = r19_r18
	r6 = badva + 0x2C<32>
	r19_r18 = r0_r4
	Mem0[r29 + 16<i32>:word64] = r21_r20
	Mem0[r29 + 32<i32>:word64] = r17_r16
	r21_r20 = r2_r5
	r17_r16 = r3_r1
	r1 = 0x295<32>
	r4 = r6
	Mem0[r29 + 8<i32>:word64] = r23_r22
	r22 = Mem0[r29 + 48<i32>:word64]
	r23 = Mem0[r29 + 52<i32>:word32]
	Mem0[r29:word32] = r16
	call logmsg_function (retsize: 0;)
	Mem0[r29 + 4<i32>:word32] = r23
	r1_r0 = r16_r19
	r3_r2 = r17_r21
	r5_r4 = r20_r18
	Mem0[r29:word32] = r22
	call node_alloc_common (retsize: 0;)
	r17_r16 = Mem0[r29 + 32<i32>:word64]
	r21_r20 = Mem0[r29 + 16<i32>:word64]
	r19_r18 = Mem0[r29 + 24<i32>:word64]
	v36 = r30
	r31 = Mem0[v36 + 4<i32>:word32]
	r30 = Mem0[v36:word32]
	r29 = v36 + 8<i32>
	return
	// succ:  conv2d_ctor_exit
conv2d_ctor_exit:


// conv2d_execute_ref
// Return size: 0
define conv2d_execute_ref
conv2d_execute_ref_entry:
	r29 = fp
	// succ:  l0001420C
l0001420C:
	v4 = r29 - 8<i32>
	Mem0[v4:word32] = r30
	Mem0[v4 + 4<i32>:word32] = r31
	r30 = v4
	r29 = v4 - 136<i32>
	r3 = Mem0[r0 + 8<i32>:word32]
	r2 = Mem0[r0 + 4<i32>:word32]
	Mem0[r29 + 120<i32>:word64] = r19_r18
	Mem0[r29 + 96<i32>:word64] = r25_r24
	r18 = Mem0[r2:word32]
	r25 = Mem0[r0 + 32<i32>:int8]
	Mem0[r29 + 104<i32>:word64] = r23_r22
	r23 = Mem0[r2 + 4<i32>:word32]
	p0 = r25 == 0<32>
	r7 = Mem0[r2 + 8<i32>:word32]
	r5 = Mem0[r2 + 24<i32>:word32]
	Mem0[r29 + 88<i32>:word64] = r27_r26
	Mem0[r29 + 112<i32>:word64] = r21_r20
	r4 = Mem0[r2 + 12<i32>:word32]
	Mem0[r29 + 60<i32>:word32] = r7
	r7 = Mem0[r3 + 8<i32>:word32]
	r3 = Mem0[r3 + 4<i32>:word32]
	r20 = Mem0[r3:word32]
	Mem0[r29 + 128<i32>:word64] = r17_r16
	r27 = Mem0[r18 + 8<i32>:word32]
	Mem0[r29 + 32<i32>:word32] = r1
	Mem0[r29 + 72<i32>:word32] = r0
	r0 = r27
	Mem0[r29 + 64<i32>:word32] = r4
	r4 = Mem0[r2 + 20<i32>:word32]
	Mem0[r29 + 36<i32>:word32] = r3
	r24 = Mem0[r2 + 16<i32>:word32]
	r17 = Mem0[r18 + 4<i32>:word32]
	r2 = Mem0[r23 + 8<i32>:word32]
	r16 = Mem0[r23 + 12<i32>:word32]
	r19 = Mem0[r18 + 12<i32>:word32]
	r22 = Mem0[r23 + 4<i32>:word32]
	r21 = Mem0[r23:word32]
	r3 = Mem0[r5 + 4<i32>:word32]
	r1 = Mem0[r5 + 8<i32>:word32]
	Mem0[r29 + 24<i32>:word32] = r7
	r7 = Mem0[r18:word32]
	Mem0[r29 + 40<i32>:word32] = r5
	Mem0[r29 + 80<i32>:word32] = r2
	r2 = p0
	Mem0[r29 + 28<i32>:word32] = r7
	Mem0[r29 + 56<i32>:word32] = r4
	Mem0[r29 + 48<i32>:word32] = r2
	r2 = r27 - r22
	branch p0 l000142B0
	// succ:  l0001428C l000142B0
l0001428C:
	r0 = r2 + r1
	p0 = r25 == 2<32>
	branch p0 l000142B0
	// succ:  l00014298 l000142B0
l00014298:
	Mem0[r29 + 68<i32>:word32] = r1
	r0 = 0<32>
	p0 = r25 == 1<32>
	branch p0 l000142C0
	// succ:  l000142A4 l000142C0
l000142A4:
	r1 = Mem0[r29 + 68<i32>:word32]
	r0 = r1
	r0 = r0 + (r27 + 0xFFFFFFFF<32>)
	// succ:  l000142B0
l000142B0:
	Mem0[r29 + 68<i32>:word32] = r1
	r26 = r3
	call fn00009760 (retsize: 0;)
	r3 = r26
	// succ:  l000142C0
l000142C0:
	Mem0[r29 + 76<i32>:word32] = r0
	p0 = r25 == 2<32>
	r2 = r17 - r21
	branch p0 l000142FC
	// succ:  l000142D0 l000142FC
l000142D0:
	r1_r0 = r3_r3
	r25 = r3 + 0<32>
	p0 = r25 == 1<32>
	branch p0 l000142F4
	// succ:  l000142E0 l000142F4
l000142E0:
	r1 = Mem0[r29 + 48<i32>:word64]
	r0 = 0<32>
	r1_r0 = r25_r17
	branch p0 l00014310
	// succ:  l000142F0 l00014310
l000142F0:
	p0 = r1
	goto l00014308
	// succ:  l00014308
l000142F4:
	goto l00014308
	// succ:  l00014308
l000142FC:
	Mem0[r29 + 76<i32>:word32] = r0
	r1 = r3
	r0 = r2 + r3
	r25 = r3
	// succ:  l00014308
l00014308:
	call fn00009760 (retsize: 0;)
	r3 = Mem0[r29 + 60<i32>:word64]
	r2 = Mem0[r29 + 64<i32>:word64]
	r26 = 0x437F0000<32>
	goto l00014318
	// succ:  l00014318
l00014310:
	r3 = Mem0[r29 + 60<i32>:word64]
	r2 = Mem0[r29 + 64<i32>:word64]
	r26 = 0<32>
	// succ:  l00014318
l00014318:
	r5 = Mem0[r29 + 56<i32>:word64]
	r6 = Mem0[r23 + 16<i32>:word32]
	r3 = Mem0[r3 + 16<i32>:word32]
	r2 = Mem0[r2 + 16<i32>:word32]
	Mem0[r29 + 64<i32>:word32] = r6
	r6 = Mem0[r20 + 16<i32>:word32]
	Mem0[r29 + 52<i32>:word32] = r20
	r2 = Mem0[r2:word32]
	r4 = Mem0[r24 + 16<i32>:word32]
	r20 = Mem0[r3:word32]
	Mem0[r29 + 48<i32>:word32] = r0
	r5 = Mem0[r5 + 16<i32>:word32]
	Mem0[r29 + 44<i32>:word32] = r25
	r25 = Mem0[r18 + 16<i32>:word32]
	r1_r0 = r26_r24
	Mem0[r29 + 60<i32>:word32] = r6
	r18 = Mem0[r5:word32]
	r23 = Mem0[r4:word32]
	call fn00009610 (retsize: 0;)
	Mem0[r29 + 56<i32>:word32] = r0
	r18 = r26
	r26 = r2
	r1_r0 = r26_r2
	call fn00009610 (retsize: 0;)
	r4 = Mem0[r29 + 56<i32>:word64]
	r2 = 0<32>
	r3 = 0x4F000000<32>
	r0 = r24
	Mem0[r29 + 20<i32>:word32] = r2
	Mem0[r29 + 56<i32>:word32] = r3
	call fmaxf.1.0 (retsize: 0;)
	r1_r0 = r0_r18
	call fn00009610 (retsize: 0;)
	r3 = 0<32>
	r20 = r3
	call fn00009624 (retsize: 0;)
	r0 = r26
	r2 = r0
	call fn0001480C (retsize: 0;)
	r1_r0 = r0_r18
	call fn00009610 (retsize: 0;)
	call fn00009624 (retsize: 0;)
	r20 = Mem0[r29 + 32<i32>:word32]
	r26 = Mem0[r29 + 72<i32>:word32]
	r4 = badva + 0x20<32>
	r1 = 0x174<32>
	Mem0[r29 + 1<i32>:byte] = r5
	r5 = Mem0[r26 + 28<i32>:word32]
	Mem0[r29:word32] = r26
	r4 = badva + 0x12<32>
	Mem0[r29 + 12<i32>:word32] = r19
	Mem0[r29 + 4<i32>:word32] = r17
	r1 = 0x175<32>
	Mem0[r29 + 8<i32>:word32] = r27
	r23 = Mem0[r29 + 28<i32>:word32]
	Mem0[r29:word32] = r23
	call logmsg_function (retsize: 0;)
	Mem0[r29 + 4<i32>:word32] = r21
	r2 = Mem0[r29 + 80<i32>:word64]
	r4 = badva + 3<32>
	r1 = 0x176<32>
	Mem0[r29 + 12<i32>:word32] = r2
	Mem0[r29:word32] = r16
	Mem0[r29 + 8<i32>:word32] = r22
	call logmsg_function (retsize: 0;)
	r4 = badva + 0x3B<32>
	r7 = Mem0[r29 + 68<i32>:word32]
	r1 = 0x177<32>
	Mem0[r29 + 4<i32>:word32] = r7
	r5 = Mem0[r29 + 44<i32>:word64]
	Mem0[r29:word32] = r5
	call logmsg_function (retsize: 0;)
	r4 = badva + 0x2F<32>
	r1 = 0x178<32>
	r26 = Mem0[r29 + 48<i32>:word32]
	r5 = Mem0[r26 + 32<i32>:byte]
	Mem0[r29:word32] = r5
	call logmsg_function (retsize: 0;)
	Mem0[r29:word32] = r23
	Mem0[r29 + 12<i32>:word32] = r16
	Mem0[r29 + 4<i32>:word32] = r26
	r20 = Mem0[r29 + 76<i32>:word32]
	r4 = badva + 0x19<32>
	Mem0[r29 + 8<i32>:word32] = r20
	r1 = 0x179<32>
	call logmsg_function (retsize: 0;)
	r1 = 0x17A<32>
	r7_r6 = r20_r23
	r3 = badva + 0x1C<32>
	branch r2 == r19 l00014568
	// succ:  l000144CC l00014568
l000144CC:
	r2 = Mem0[r29 + 80<i32>:word32]
	r5 = r26
	r3 = Mem0[r29 + 52<i32>:word32]
	r4 = Mem0[r3 + 20<i32>:word32]
	r2 = r2 * r20
	r2 = r2 * r26
	branch r2 >u r4 l00014500
	// succ:  l000144E8 l00014500
l000144E8:
	r2 = r2 << 2<32>
	Mem0[r29 + 4<i32>:word32] = r2
	r1 = 0x17C<32>
	r3 = badva + 0x39<32>
	Mem0[r29:word32] = r4
	r2 = Mem0[r29 + 32<i32>:word64]
	goto l00014564
	// succ:  l00014564
l00014500:
	r4 = Mem0[r29 + 40<i32>:word32]
	r1 = 0x17E<32>
	r3 = badva + 0x2F<32>
	branch r4 == 2<32> l00014564
	// succ:  l0001451C l00014564
l0001451C:
	r4 = Mem0[r4:word32]
	r3 = Mem0[r29 + 40<i32>:word32]
	r4 = Mem0[r3 + 12<i32>:word32]
	r3 = badva + 0x28<32>
	branch p0 l00014560
	// succ:  l00014530 l00014560
l00014530:
	p0 = r4 == 2<32>
	r3 = Mem0[r29 + 36<i32>:word64]
	r5 = 4<32>
	r1 = 0x180<32>
	r4 = Mem0[r3 + 20<i32>:word32]
	r3 = badva + 0x21<32>
	branch p0 l00014560
	// succ:  l00014548 l00014560
l00014548:
	p0 = r5 >u r4
	r3 = Mem0[r29 + 24<i32>:word32]
	r1 = 0x181<32>
	r4 = Mem0[r3 + 20<i32>:word32]
	r3 = badva + 0x17<32>
	branch p0 l00014570
	// succ:  l00014560 l00014570
l00014560:
	p0 = r4 >u -1<i32>
	r2 = Mem0[r29 + 32<i32>:word32]
	// succ:  l00014564
l00014564:
	call errlog_function (retsize: 0;)
	// succ:  l00014568
l00014568:
	r0 = 0xFFFFFFFF<32>
	goto l000147AC
	// succ:  l000147AC
l00014570:
	Mem0[r8 + 4<i32>:word32] = r9
	r3 = Mem0[r29 + 36<i32>:word32]
	p0 = r6 > 0<32>
	r5 = r6
	Mem0[r8 + 8<i32>:word32] = r7
	Mem0[r8 + 12<i32>:word32] = r16
	r5 = r9 + 0xFFFFFFFF<32>
	Mem0[r8 + 24<i32>:word32] = r2
	Mem0[r8:word32] = r6
	r8 = r7
	r1 = Mem0[r29 + 24<i32>:word64]
	r2 = Mem0[r3 + 16<i32>:word32]
	Mem0[r3:word32] = 1<32>
	Mem0[r3 + 12<i32>:word32] = 1<32>
	Mem0[r3 + 8<i32>:word32] = 1<32>
	Mem0[r3 + 4<i32>:word32] = 1<32>
	Mem0[r2:byte] = r4
	r4 = Mem0[r29 + 20<i32>:word32]
	Mem0[r1:word32] = 1<32>
	Mem0[r3 + 24<i32>:word32] = 4<32>
	Mem0[r1 + 4<i32>:word32] = 1<32>
	r2 = Mem0[r1 + 16<i32>:word32]
	Mem0[r1 + 12<i32>:word32] = 1<32>
	Mem0[r1 + 8<i32>:word32] = 1<32>
	Mem0[r2:byte] = r4
	r4 = Mem0[r29 + 56<i32>:word32]
	r2 = r22 - r27
	Mem0[r1 + 24<i32>:word32] = 4<32>
	r4 = r21 - r17
	r7 = Mem0[r29 + 44<i32>:word64]
	r6 = Mem0[r29 + 68<i32>:word64]
	r1 = r22 * r19
	Mem0[r29 + 6<i32>:byte] = r6
	r6 = 0<32>
	r5 = r4 + r5 * r7
	r3 = r2 + r3 * r6
	r4 = r1 * r16
	r5 = r5 + (r5 >>u 0x1F<32>)
	r3 = r3 + (r3 >>u 0x1F<32>)
	r7 = r5 >> 1<32>
	r3 = r3 >> 1<32>
	Mem0[r29 + 36<i32>:word32] = r7
	Mem0[r29 + 56<i32>:word32] = r3
	// succ:  l0001460C
l0001460C:
	p0 = r9 > 0<32>
	branch p0 l00014774
	// succ:  l00014614 l00014774
l00014614:
	Mem0[r29 + 13<i32>:byte] = r6
	r3 = Mem0[r29 + 24<i32>:word32]
	r6 = 0<32>
	Mem0[r29 + 10<i32>:byte] = r3
	r3 = r3 * r9
	// succ:  l0001462C
l0001462C:
	p0 = r8 > 0<32>
	r6 = Mem0[r29 + 52<i32>:word64]
	r3 = Mem0[r29 + 44<i32>:word64]
	r1 = 0<32>
	Mem0[r29 + 80<i32>:word32] = r1
	r5 = Mem0[r29 + 40<i32>:word64]
	r3 = r6 * r3
	r6 = Mem0[r29 + 36<i32>:word32]
	r5 = r6 + r5
	Mem0[r29 + 18<i32>:byte] = r1
	r13 = r3 - r6
	r1 = r5 * r8
	// succ:  l00014658
l00014658:
	r3 = Mem0[r29 + 72<i32>:word32]
	r28 = 0<32>
	r5 = Mem0[r29 + 68<i32>:word64]
	r6 = Mem0[r29 + 80<i32>:word64]
	r15 = Mem0[r29 + 64<i32>:word32]
	r6 = Mem0[r29 + 56<i32>:word32]
	r3 = r6 + r3
	r5 = r6 * r5
	r5 = Mem0[r29 + 60<i32>:word32]
	r0 = r5 - r6
	r3 = r3 * r16
	r1 = r5 + (r3 << 2<32>)
	// succ:  l00014688
l00014688:
	p0 = r21 > 0<32>
	r10 = 0<32>
	r3 = 0<32>
	r6 = r15
	branch p0 l00014730
	// succ:  l0001469C l00014730
l0001469C:
	branch r17 >u r5 l00014728
l000146A4:
	r11 = r6 + 0<32>
	branch p0 l00014724
	// succ:  l000146A8 l00014728 l000146AC l00014724
l000146A8:
	r5 = r3 + r13
	r11 = r6 + 0<32>
	r8 = 0<32>
	r5 = r5 + r7
	branch p0 l00014724
	goto l000146B8
	// succ:  l000146B8 l00014724
l000146AC:
	p0 = __bit<word32,word32>(r5, 0<32>)
	r8 = 0<32>
	r5 = r5 + r7
	branch p0 l00014724
	// succ:  l000146B8 l00014724
l000146B8:
	p0 = r14 > 0<32>
	r26 = r5 * r27
	__loop(1<i32>, 0x000146C0<p32>, r22)
	branch r27 >u r5 l0001471C
	// succ:  l000146CC l0001471C
l000146CC:
	r5 = r8 + r0
	r23 = r5 + r26
	r14 = r19 + 0xFFFFFFFF<32>
	r20 = Mem0[r11:byte]
	r9 = r11 + r16
	branch p0 l00014718
	// succ:  l000146E0 l00014718
l000146E0:
	p0 = r11 > 0<32>
	p0 = r19 >u 1<32>
	r20 = r20 - r18
	r23 = r25 + r23 * r19
	__loop(0<i32>, 0x000146FC<p32>, r14)
	r23 = r23 + 1<i32>
	r5 = Mem0[r23:byte]
	r5 = r5 - r24
	branch p0 l00014714
	// succ:  l000146FC l00014714
l000146FC:
	r23 = r23 + 1<i32>
	r12 = Mem0[r23:byte]
	r14 = Mem0[r9:byte]
	r9 = r9 + r16
	r10 = r10 + r20 * r5
	r5 = r12 - r24
	r20 = r14 - r18
	// succ:  l00014714
l00014714:
	r10 = r10 + r20 * r5
	// succ:  l00014718
l00014718:
	r11 = r11 + r2
	r8 = r8 + 1<32>
	goto l00014724
	// succ:  l00014724
l0001471C:
	r11 = r11 + r2
	// succ:  l00014724
l00014724:
	branch r3 == r21 l000146A4
	goto l00014734
	// succ:  l00014734 l000146A4
l00014728:
	branch r3 == r21 l000146A4
	goto l00014734
	// succ:  l00014734 l000146A4
l00014730:
	Mem0[r1:word32] = r10
	r1 = r1 + 4<i32>
	r15 = r15 + 1<32>
	r28 = r28 + 1<32>
	goto l0001473C
	// succ:  l0001473C
l00014734:
	r3 = r3 + 1<32>
	r6 = r6 + r4
	Mem0[r1:word32] = r10
	r1 = r1 + 4<i32>
	r15 = r15 + 1<32>
	// succ:  l0001473C
l0001473C:
	p0 = r28 == r16
	branch p0 l00014688
	// succ:  l00014744 l00014688
l00014744:
	r8 = Mem0[r29 + 76<i32>:word32]
	r3 = Mem0[r29 + 80<i32>:word32]
	r3 = r3 + 1<32>
	Mem0[r29 + 80<i32>:word32] = r3
	p0 = r3 == r8
	branch p0 l00014658
	// succ:  l0001475C l00014658
l0001475C:
	r9 = Mem0[r29 + 48<i32>:word32]
	r3 = Mem0[r29 + 52<i32>:word32]
	r3 = r3 + 1<32>
	Mem0[r29 + 52<i32>:word32] = r3
	p0 = r3 == r9
	branch p0 l0001462C
	// succ:  l00014774 l0001462C
l00014774:
	r5 = Mem0[r29 + 28<i32>:word64]
	r3 = Mem0[r29 + 24<i32>:word64]
	r3 = r3 + 1<32>
	Mem0[r29 + 24<i32>:word32] = r3
	branch p0 l0001460C
	// succ:  l00014784 l0001460C
l00014784:
	p0 = r3 == -1<i32>
	Mem0[r29 + 12<i32>:word32] = r16
	r3 = 2<32>
	r4 = badva + 0x31<32>
	r2 = Mem0[r29 + 32<i32>:word32]
	r1 = 0x1B4<32>
	Mem0[r29 + 4<i32>:word32] = r9
	Mem0[r29 + 8<i32>:word32] = r8
	Mem0[r29:word32] = r5
	call logmsg_function (retsize: 0;)
	r0 = 0<32>
	// succ:  l000147AC
l000147AC:
	r19_r18 = Mem0[r29 + 120<i32>:word64]
	r17_r16 = Mem0[r29 + 128<i32>:word64]
	r23_r22 = Mem0[r29 + 104<i32>:word64]
	r21_r20 = Mem0[r29 + 112<i32>:word64]
	r27_r26 = Mem0[r29 + 88<i32>:word64]
	r25_r24 = Mem0[r29 + 96<i32>:word64]
	v43 = r30
	r31 = Mem0[v43 + 4<i32>:word32]
	r30 = Mem0[v43:word32]
	r29 = v43 + 8<i32>
	return
	// succ:  conv2d_execute_ref_exit
conv2d_execute_ref_exit:


// logmsg_function
// Return size: 0
define logmsg_function
logmsg_function_entry:
	r29 = fp
	// succ:  l000147C0
l000147C0:
	v4 = r29 - 8<i32>
	Mem0[v4:word32] = r30
	Mem0[v4 + 4<i32>:word32] = r31
	r30 = v4
	r29 = v4 - 8<i32>
	branch r3 >u r5 l000147C4_thunk_errlog_function
	goto l000147D0
	// succ:  l000147D0 l000147C4_thunk_errlog_function
l000147C4_thunk_errlog_function:
	call errlog_function (retsize: 0;)
	return
	// succ:  logmsg_function_exit
l000147D0:
	r5 = Mem0[r2 + 16<i32>:word32]
	r6 = r29 + 0x10<32>
	r5 = r29 + 0x10<32>
	r0 = badva + 0xC<32>
	Mem0[r29 + 4<i32>:word32] = r6
	call logv (retsize: 0;)
	v13 = r30
	r31 = Mem0[v13 + 4<i32>:word32]
	r30 = Mem0[v13:word32]
	r29 = v13 + 8<i32>
	return
	// succ:  logmsg_function_exit
logmsg_function_exit:


// errlog_function
// Return size: 0
define errlog_function
errlog_function_entry:
	r29 = fp
	// succ:  l000147E4
l000147E4:
	v4 = r29 - 8<i32>
	Mem0[v4:word32] = r30
	Mem0[v4 + 4<i32>:word32] = r31
	r30 = v4
	r29 = v4 - 8<i32>
	r4 = r3
	r0 = badva + 0x34<32>
	Mem0[r29 + 1<i32>:byte] = r6
	r6 = r29 + 0x10<32>
	r5 = r29 + 0x10<32>
	r3 = 0<32>
	v13 = r30
	r31 = Mem0[v13 + 4<i32>:word32]
	r30 = Mem0[v13:word32]
	r29 = v13 + 8<i32>
	return
	// succ:  errlog_function_exit
errlog_function_exit:


// fmaxf.1.0
// Return size: 0
define fmaxf.1.0
fmaxf.1.0_entry:
	r29 = fp
	// succ:  l00014808
l00014808:
	r2 = 0x38D1B717<32>
	r1_r0 = r0_r2
	// succ:  l00014810_thunk_fn00009600
l00014810_thunk_fn00009600:
	call fn00009600 (retsize: 0;)
	return
	// succ:  fmaxf.1.0_exit
fmaxf.1.0_exit:


// fn0001480C
// Return size: 0
define fn0001480C
fn0001480C_entry:
	r29 = fp
	// succ:  l0001480C
l0001480C:
	r2 = 0x17<32>
	r1_r0 = r0_r2
	// succ:  l00014810_thunk_fn00009600
l00014810_thunk_fn00009600:
	call fn00009600 (retsize: 0;)
	return
	// succ:  fn0001480C_exit
fn0001480C_exit:


// flatten_execute
// Return size: 0
define flatten_execute
flatten_execute_entry:
	r29 = fp
	// succ:  l00014820
l00014820:
	v4 = r29 - 8<i32>
	Mem0[v4:word32] = r30
	Mem0[v4 + 4<i32>:word32] = r31
	r30 = v4
	r29 = v4 - 40<i32>
	r4 = badva + 0x32<32>
	r3 = Mem0[r0 + 8<i32>:word32]
	r2 = Mem0[r0 + 4<i32>:word32]
	Mem0[r29 + 24<i32>:word64] = r19_r18
	Mem0[r29 + 32<i32>:word64] = r17_r16
	r1 = 0x37<32>
	r16 = r1
	r17 = Mem0[r2:word32]
	r2 = r16
	Mem0[r29 + 8<i32>:word64] = r23_r22
	Mem0[r29 + 16<i32>:word64] = r21_r20
	r19 = Mem0[r17 + 8<i32>:word32]
	r18 = Mem0[r3:word32]
	r22 = Mem0[r17:word32]
	r21 = Mem0[r17 + 4<i32>:word32]
	Mem0[r29:word32] = r0
	r20 = Mem0[r17 + 12<i32>:word32]
	call logmsg_function (retsize: 0;)
	r2 = Mem0[r17 + 24<i32>:word32]
	branch r2 >u r3 l0001487C
	// succ:  l00014864 l0001487C
l00014864:
	r3 = Mem0[r18 + 20<i32>:word32]
	r2 = r16
	r1 = 0x39<32>
	r3 = badva + 0x3C<32>
	call errlog_function (retsize: 0;)
	r0 = 0xFFFFFFFF<32>
	goto l000148BC
	// succ:  l000148BC
l0001487C:
	Mem0[r18 + 8<i32>:word32] = 1<32>
	Mem0[r18:word32] = 1<32>
	Mem0[r18 + 4<i32>:word32] = 1<32>
	r0 = Mem0[r18 + 16<i32>:word32]
	r6 = r2 * r19
	Mem0[r18 + 3<i32>:byte] = r7
	r7 = r6 * r20
	Mem0[r18 + 24<i32>:word32] = r2
	r2 = Mem0[r17 + 24<i32>:word32]
	r1 = Mem0[r17 + 16<i32>:word32]
	call fn00009560 (retsize: 0;)
	r2 = r16
	r1 = 0x3F<32>
	r4 = badva + 0xA<32>
	Mem0[r29:byte] = r3
	r3 = Mem0[r17 + 24<i32>:word32]
	call logmsg_function (retsize: 0;)
	// succ:  l000148BC
l000148BC:
	r19_r18 = Mem0[r29 + 24<i32>:word64]
	r17_r16 = Mem0[r29 + 32<i32>:word64]
	r23_r22 = Mem0[r29 + 8<i32>:word64]
	r21_r20 = Mem0[r29 + 16<i32>:word64]
	v26 = r30
	r31 = Mem0[v26 + 4<i32>:word32]
	r30 = Mem0[v26:word32]
	r29 = v26 + 8<i32>
	return
	// succ:  flatten_execute_exit
flatten_execute_exit:


// flatten_check
// Return size: 0
define flatten_check
flatten_check_entry:
	r29 = fp
	// succ:  l000148C8
l000148C8:
	v4 = r29 - 8<i32>
	Mem0[v4:word32] = r30
	Mem0[v4 + 4<i32>:word32] = r31
	r30 = v4
	r29 = v4 - 16<i32>
	Mem0[r29 + 496<i32>:word64] = r17_r16
	r4 = badva + 1<32>
	r17 = r0
	r16 = r1
	r1 = 0x5C<32>
	Mem0[r29:word32] = r17
	r2 = r16
	call logmsg_function (retsize: 0;)
	r1 = 0x5D<32>
	r3 = badva + 0x24<32>
	branch r2 >u 4<32> l00014940
	// succ:  l000148FC l00014940
l000148FC:
	r2 = Mem0[r17 + 16<i32>:word32]
	r1 = 0x5E<32>
	r3 = badva + 0x1F<32>
	branch r2 == 2<32> l00014940
	// succ:  l00014910 l00014940
l00014910:
	r2 = Mem0[r17 + 20<i32>:word32]
	r2 = Mem0[r17 + 4<i32>:word32]
	r1 = 0x5F<32>
	r3 = badva + 0x16<32>
	branch r2 == 0<32> l00014940
	// succ:  l00014928 l00014940
l00014928:
	r2 = Mem0[r2:word32]
	r2 = Mem0[r17 + 8<i32>:word32]
	r1 = 0x60<32>
	r3 = badva + 9<32>
	branch r2 == 0<32> l00014950
	// succ:  l00014940 l00014950
l00014940:
	r2 = Mem0[r2:word32]
	r2 = r16
	v16 = r30
	r31 = Mem0[v16 + 4<i32>:word32]
	r30 = Mem0[v16:word32]
	r29 = v16 + 8<i32>
	return
	// succ:  flatten_check_exit
l00014950:
	r2 = r16
	r1 = 0x61<32>
	r4 = badva + 0x2D<32>
	Mem0[r29:word32] = r17
	call logmsg_function (retsize: 0;)
	r0 = 0<32>
	v17 = r30
	r31 = Mem0[v17 + 4<i32>:word32]
	r30 = Mem0[v17:word32]
	r29 = v17 + 8<i32>
	return
	// succ:  flatten_check_exit
flatten_check_exit:


// qflatten_execute
// Return size: 0
define qflatten_execute
qflatten_execute_entry:
	r29 = fp
	// succ:  l0001496C
l0001496C:
	v4 = r29 - 8<i32>
	Mem0[v4:word32] = r30
	Mem0[v4 + 4<i32>:word32] = r31
	r30 = v4
	r29 = v4 - 40<i32>
	Mem0[r29 + 496<i32>:word64] = r17_r16
	r4 = badva + 0x15<32>
	r17_r16 = r0_r1
	Mem0[r29 + 24<i32>:word64] = r19_r18
	r2 = Mem0[r17 + 4<i32>:word32]
	r1 = 0x4C<32>
	r3 = Mem0[r17 + 8<i32>:word32]
	Mem0[r29 + 8<i32>:word64] = r23_r22
	Mem0[r29 + 16<i32>:word64] = r21_r20
	r19 = Mem0[r3:word32]
	r18 = Mem0[r2:word32]
	r2 = r16
	r20 = Mem0[r18 + 8<i32>:word32]
	r23 = Mem0[r18:word32]
	r22 = Mem0[r18 + 4<i32>:word32]
	Mem0[r29:word32] = r17
	r21 = Mem0[r18 + 12<i32>:word32]
	call logmsg_function (retsize: 0;)
	r2 = Mem0[r18 + 24<i32>:word32]
	branch r2 >u r3 l000149D0
	// succ:  l000149B4 l000149D0
l000149B4:
	r3 = Mem0[r19 + 20<i32>:word32]
	r2 = r16
	r1 = 0x4E<32>
	r3 = badva + 0x2C<32>
	call errlog_function (retsize: 0;)
	r0 = 0xFFFFFFFF<32>
	goto l00014A70
	// succ:  l00014A70
l000149D0:
	Mem0[r19 + 8<i32>:word32] = 1<32>
	Mem0[r19:word32] = 1<32>
	Mem0[r19 + 4<i32>:word32] = 1<32>
	r0 = Mem0[r19 + 16<i32>:word32]
	r6 = r2 * r20
	Mem0[r19 + 3<i32>:byte] = r7
	r7 = r6 * r21
	Mem0[r19 + 24<i32>:word32] = r2
	r2 = Mem0[r18 + 24<i32>:word32]
	r1 = Mem0[r18 + 16<i32>:word32]
	call fn00009560 (retsize: 0;)
	r3 = Mem0[r17 + 4<i32>:word32]
	r2 = Mem0[r17 + 8<i32>:word32]
	r2 = Mem0[r2 + 4<i32>:word32]
	r3 = Mem0[r3 + 4<i32>:word32]
	r5 = Mem0[r3 + 4<i32>:word32]
	r4 = Mem0[r3:word32]
	Mem0[r2:word32] = r4
	Mem0[r2 + 4<i32>:word32] = r5
	r1 = Mem0[r3 + 12<i32>:word32]
	r7 = Mem0[r3 + 8<i32>:word32]
	Mem0[r2 + 12<i32>:word32] = r1
	Mem0[r2 + 8<i32>:word32] = r7
	r4 = Mem0[r3 + 24<i32>:word32]
	branch r4 >u r6 l00014A28
	// succ:  l00014A1C l00014A28
l00014A1C:
	r6 = Mem0[r2 + 20<i32>:word32]
	r1 = Mem0[r3 + 16<i32>:word32]
	r2 = Mem0[r3 + 24<i32>:word32]
	call fn00009560 (retsize: 0;)
	r3 = Mem0[r17 + 4<i32>:word32]
	r2 = Mem0[r17 + 8<i32>:word32]
	// succ:  l00014A28
l00014A28:
	r2 = Mem0[r2 + 8<i32>:word32]
	r3 = Mem0[r3 + 8<i32>:word32]
	r5 = Mem0[r3 + 4<i32>:word32]
	r4 = Mem0[r3:word32]
	Mem0[r2:word32] = r4
	Mem0[r2 + 4<i32>:word32] = r5
	r1 = Mem0[r3 + 12<i32>:word32]
	r7 = Mem0[r3 + 8<i32>:word32]
	Mem0[r2 + 12<i32>:word32] = r1
	Mem0[r2 + 8<i32>:word32] = r7
	r4 = Mem0[r3 + 24<i32>:word32]
	branch r4 >u r6 l00014A58
	// succ:  l00014A4C l00014A58
l00014A4C:
	r6 = Mem0[r2 + 20<i32>:word32]
	r1 = Mem0[r3 + 16<i32>:word32]
	r2 = Mem0[r3 + 24<i32>:word32]
	call fn00009560 (retsize: 0;)
	r2 = Mem0[r18 + 24<i32>:word32]
	r4 = badva + 0x16<32>
	goto l00014A60
	// succ:  l00014A60
l00014A58:
	r2 = Mem0[r18 + 24<i32>:word32]
	r4 = badva + 0x16<32>
	// succ:  l00014A60
l00014A60:
	Mem0[r29:word32] = r2
	r2 = r16
	r1 = 0x56<32>
	call logmsg_function (retsize: 0;)
	r0 = 0<32>
	// succ:  l00014A70
l00014A70:
	r19_r18 = Mem0[r29 + 24<i32>:word64]
	r17_r16 = Mem0[r29 + 32<i32>:word64]
	r23_r22 = Mem0[r29 + 8<i32>:word64]
	r21_r20 = Mem0[r29 + 16<i32>:word64]
	v29 = r30
	r31 = Mem0[v29 + 4<i32>:word32]
	r30 = Mem0[v29:word32]
	r29 = v29 + 8<i32>
	return
	// succ:  qflatten_execute_exit
qflatten_execute_exit:


// qflatten_check
// Return size: 0
define qflatten_check
qflatten_check_entry:
	r29 = fp
	// succ:  l00014A80
l00014A80:
	v4 = r29 - 8<i32>
	Mem0[v4:word32] = r30
	Mem0[v4 + 4<i32>:word32] = r31
	r30 = v4
	r29 = v4 - 16<i32>
	Mem0[r29 + 496<i32>:word64] = r17_r16
	r4 = badva + 0x2E<32>
	r17 = r0
	r16 = r1
	r1 = 0x67<32>
	Mem0[r29:word32] = r17
	r2 = r16
	call logmsg_function (retsize: 0;)
	branch r2 == 6<32> l00014AC8
	// succ:  l00014AAC l00014AC8
l00014AAC:
	r2 = Mem0[r17 + 16<i32>:word32]
	r1 = 0x68<32>
	r3 = badva + 0x20<32>
	r2 = r16
	call errlog_function (retsize: 0;)
	// succ:  l00014AB8
l00014AB8:
	v16 = r30
	r31 = Mem0[v16 + 4<i32>:word32]
	r30 = Mem0[v16:word32]
	r29 = v16 + 8<i32>
	return
	// succ:  qflatten_check_exit
l00014AC8:
	branch r2 == 6<32> l00014AE0
	// succ:  l00014AD0 l00014AE0
l00014AD0:
	goto l00014AB8
	// succ:  l00014AB8
l00014AE0:
	r2 = r16
	r1 = 0x6A<32>
	Mem0[r29:word32] = r17
	call logmsg_function (retsize: 0;)
	r0 = 0<32>
	v17 = r30
	r31 = Mem0[v17 + 4<i32>:word32]
	r30 = Mem0[v17:word32]
	r29 = v17 + 8<i32>
	return
	// succ:  qflatten_check_exit
qflatten_check_exit:


// logmsg_function
// Return size: 0
define logmsg_function
logmsg_function_entry:
	r29 = fp
	// succ:  l00014AF8
l00014AF8:
	v4 = r29 - 8<i32>
	Mem0[v4:word32] = r30
	Mem0[v4 + 4<i32>:word32] = r31
	r30 = v4
	r29 = v4 - 8<i32>
	r3 = 2<32>
	branch r3 >u r5 l00014AFC_thunk_errlog_function
	goto l00014B08
	// succ:  l00014B08 l00014AFC_thunk_errlog_function
l00014AFC_thunk_errlog_function:
	call errlog_function (retsize: 0;)
	return
	// succ:  logmsg_function_exit
l00014B08:
	r5 = Mem0[r2 + 16<i32>:word32]
	r5 = r29 + 0x10<32>
	r3 = 2<32>
	r0 = badva + 0xD<32>
	Mem0[r29 + 1<i32>:byte] = r6
	r6 = r29 + 0x10<32>
	call logv (retsize: 0;)
	// succ:  l00014B10_thunk_errlog_function
l00014B10_thunk_errlog_function:
	call errlog_function (retsize: 0;)
	return
	// succ:  logmsg_function_exit
logmsg_function_exit:


// errlog_function
// Return size: 0
define errlog_function
errlog_function_entry:
	r29 = fp
	// succ:  l00014B20
l00014B20:
	v4 = r29 - 8<i32>
	Mem0[v4:word32] = r30
	Mem0[v4 + 4<i32>:word32] = r31
	r30 = v4
	r29 = v4 - 8<i32>
	r4 = r3
	r0 = badva + 0x31<32>
	Mem0[r29 + 1<i32>:byte] = r6
	r6 = r29 + 0x10<32>
	r5 = r29 + 0x10<32>
	r3 = 0<32>
	v13 = r30
	r31 = Mem0[v13 + 4<i32>:word32]
	r30 = Mem0[v13:word32]
	r29 = v13 + 8<i32>
	return
	// succ:  errlog_function_exit
errlog_function_exit:


// input_execute
// Return size: 0
define input_execute
input_execute_entry:
	r29 = fp
	// succ:  l00014B50
l00014B50:
	v4 = r29 - 8<i32>
	Mem0[v4:word32] = r30
	Mem0[v4 + 4<i32>:word32] = r31
	r30 = v4
	r29 = v4 - 32<i32>
	Mem0[r29 + 496<i32>:word64] = r17_r16
	r4 = badva + 0x3F<32>
	r16 = r1
	r1 = 0x31<32>
	Mem0[r29 + 8<i32>:word64] = r21_r20
	Mem0[r29 + 16<i32>:word64] = r19_r18
	r18 = r0
	r2 = r16
	Mem0[r29:word32] = r18
	call logmsg_function (retsize: 0;)
	r2 = Mem0[r16 + 28<i32>:word32]
	branch r3 == r2 l00014BB4
	// succ:  l00014B84 l00014BB4
l00014B84:
	r3 = Mem0[r18 + 20<i32>:word32]
	r2 = 0<32>
	r17 = 0<32>
	r21_r20 = 0<64>
	r19 = 0<32>
	r4 = Mem0[r16 + 20<i32>:word32]
	r3 = Mem0[r18 + 8<i32>:word32]
	// succ:  l00014B90
l00014B90:
	r3 = Mem0[r29 + r19:word32]
	r2 = r4 + r20
	r5 = Mem0[r2 + 20<i32>:word32]
	branch r5 >u r6 l00014BCC
	// succ:  l00014BA8 l00014BCC
l00014BA8:
	r6 = Mem0[r3 + 20<i32>:word32]
	goto l00014BC4
	// succ:  l00014BC4
l00014BB4:
	r1 = 0x36<32>
	r3 = badva + 0x38<32>
	r17 = -1<i32>
	r2 = r16
	call errlog_function (retsize: 0;)
	// succ:  l00014BC4
l00014BC4:
	goto l00014C28
	// succ:  l00014C28
l00014BCC:
	Mem0[r3:byte] = r4
	Mem0[r3 + 4<i32>:word32] = r7
	r4 = Mem0[r2 + 8<i32>:word32]
	Mem0[r3 + 8<i32>:word32] = r4
	r7 = Mem0[r2 + 12<i32>:word32]
	Mem0[r3 + 12<i32>:word32] = r7
	r4 = Mem0[r2 + 20<i32>:word32]
	Mem0[r3 + 24<i32>:word32] = r4
	r1 = Mem0[r2 + 16<i32>:word32]
	r2 = Mem0[r2 + 20<i32>:word32]
	r0 = Mem0[r3 + 16<i32>:word32]
	call vmemcpy_asm (retsize: 0;)
	r2 = Mem0[r18 + 20<i32>:word32]
	r20 = r20 + 0x20<32>
	r19 = r19 + 4<32>
	branch r2 >u r21 l00014B90
	// succ:  l00014C10 l00014B90
l00014C10:
	r21 = r21 + 1<32>
	Mem0[r29:word32] = r2
	r1 = 0x40<32>
	r4 = badva + 0x34<32>
	r2 = r16
	call logmsg_function (retsize: 0;)
	// succ:  l00014C28
l00014C28:
	r19_r18 = Mem0[r29 + 16<i32>:word64]
	r17_r16 = Mem0[r29 + 24<i32>:word64]
	r0 = r17
	v25 = r30
	r31 = Mem0[v25 + 4<i32>:word32]
	r30 = Mem0[v25:word32]
	r29 = v25 + 8<i32>
	return
	// succ:  input_execute_exit
input_execute_exit:


// input_check
// Return size: 0
define input_check
input_check_entry:
	r29 = fp
	// succ:  l00014C34
l00014C34:
	v4 = r29 - 8<i32>
	Mem0[v4:word32] = r30
	Mem0[v4 + 4<i32>:word32] = r31
	r30 = v4
	r29 = v4 - 16<i32>
	Mem0[r29 + 496<i32>:word64] = r17_r16
	r4 = badva + 0x13<32>
	r17 = r0
	r16 = r1
	r1 = 0x46<32>
	Mem0[r29:word32] = r17
	r2 = r16
	call logmsg_function (retsize: 0;)
	branch r2 == 0<32> l00014C98
	// succ:  l00014C5C l00014C98
l00014C5C:
	r2 = Mem0[r17 + 20<i32>:word32]
	r3 = Mem0[r17 + 8<i32>:word32]
	branch r2 >u r4 l00014C9C
l00014C64:
	branch r2 >u r4 l00014C9C
	// succ:  l00014C70 l00014C9C
l00014C70:
	r4 = r4 + 1<32>
	r3 = r3 + 4<32>
	branch r5 == 1<32> l00014C64
	// succ:  l00014C78 l00014C64
l00014C78:
	r1 = 0x4A<32>
	r4 = badva + 0x2A<32>
	Mem0[r29:word32] = r4
	call errlog_function (retsize: 0;)
	r0 = 0xFFFFFFFF<32>
	v17 = r30
	r31 = Mem0[v17 + 4<i32>:word32]
	r30 = Mem0[v17:word32]
	r29 = v17 + 8<i32>
	return
	// succ:  input_check_exit
l00014C98:
	r2 = r16
	r1 = 0x4D<32>
	r4 = badva + 0x24<32>
	goto l00014CA4
	// succ:  l00014CA4
l00014C9C:
	r2 = r16
	r1 = 0x4D<32>
	// succ:  l00014CA4
l00014CA4:
	Mem0[r29:word32] = r17
	call logmsg_function (retsize: 0;)
	r0 = 0<32>
	v18 = r30
	r31 = Mem0[v18 + 4<i32>:word32]
	r30 = Mem0[v18:word32]
	r29 = v18 + 8<i32>
	return
	// succ:  input_check_exit
input_check_exit:


// logmsg_function
// Return size: 0
define logmsg_function
logmsg_function_entry:
	r29 = fp
	// succ:  l00014CB4
l00014CB4:
	v4 = r29 - 8<i32>
	Mem0[v4:word32] = r30
	Mem0[v4 + 4<i32>:word32] = r31
	r30 = v4
	r29 = v4 - 8<i32>
	r3 = 2<32>
	branch r3 >u r5 l00014CB8_thunk_errlog_function
	goto l00014CC4
	// succ:  l00014CC4 l00014CB8_thunk_errlog_function
l00014CB8_thunk_errlog_function:
	call errlog_function (retsize: 0;)
	return
	// succ:  logmsg_function_exit
l00014CC4:
	r5 = Mem0[r2 + 16<i32>:word32]
	r5 = r29 + 0x10<32>
	r3 = 2<32>
	r0 = badva + 0x2C<32>
	Mem0[r29 + 1<i32>:byte] = r6
	r6 = r29 + 0x10<32>
	call logv (retsize: 0;)
	// succ:  l00014CCC_thunk_errlog_function
l00014CCC_thunk_errlog_function:
	call errlog_function (retsize: 0;)
	return
	// succ:  logmsg_function_exit
logmsg_function_exit:


// errlog_function
// Return size: 0
define errlog_function
errlog_function_entry:
	r29 = fp
	// succ:  l00014CDC
l00014CDC:
	v4 = r29 - 8<i32>
	Mem0[v4:word32] = r30
	Mem0[v4 + 4<i32>:word32] = r31
	r30 = v4
	r29 = v4 - 8<i32>
	r4 = r3
	r0 = badva + 0x10<32>
	Mem0[r29 + 1<i32>:byte] = r6
	r6 = r29 + 0x10<32>
	r5 = r29 + 0x10<32>
	r3 = 0<32>
	v13 = r30
	r31 = Mem0[v13 + 4<i32>:word32]
	r30 = Mem0[v13:word32]
	r29 = v13 + 8<i32>
	return
	// succ:  errlog_function_exit
errlog_function_exit:


// matmul_execute_asm
// Return size: 0
define matmul_execute_asm
matmul_execute_asm_entry:
	r29 = fp
	// succ:  l00014D00
l00014D00:
	// succ:  l00014D00_thunk_fn00015000
l00014D00_thunk_fn00015000:
	call fn00015000 (retsize: 0;)
	return
	// succ:  matmul_execute_asm_exit
matmul_execute_asm_exit:


// matmul_check_ref
// Return size: 0
define matmul_check_ref
matmul_check_ref_entry:
	r29 = fp
	// succ:  l00014D0C
l00014D0C:
	v4 = r29 - 8<i32>
	Mem0[v4:word32] = r30
	Mem0[v4 + 4<i32>:word32] = r31
	r30 = v4
	r29 = v4 - 72<i32>
	Mem0[r29 + 496<i32>:word64] = r17_r16
	r4 = badva + 0x1D<32>
	r17 = r0
	r16 = r1
	r1 = 0x10F<32>
	Mem0[r29 + 48<i32>:word64] = r21_r20
	Mem0[r29 + 56<i32>:word64] = r19_r18
	Mem0[r29 + 32<i32>:word64] = r25_r24
	Mem0[r29 + 40<i32>:word64] = r23_r22
	Mem0[r29:word32] = r17
	call logmsg_function (retsize: 0;)
	r1 = 0x110<32>
	r3 = badva + 9<32>
	branch r2 == 0xD<32> l00014EE4
	// succ:  l00014D50 l00014EE4
l00014D50:
	r2 = Mem0[r17 + 16<i32>:word32]
	r1 = 0x111<32>
	r3 = badva + 0xB<32>
	branch r2 == 7<32> l00014EE4
	// succ:  l00014D64 l00014EE4
l00014D64:
	r2 = Mem0[r17 + 20<i32>:word32]
	r1 = 0x112<32>
	r3 = badva + 0xE<32>
	branch r4 == 1<32> l00014EE4
	// succ:  l00014D78 l00014EE4
l00014D78:
	r4 = Mem0[r17 + 4<i32>:word32]
	r2 = Mem0[r17 + 8<i32>:word32]
	r1 = 0x113<32>
	r3 = badva + 6<32>
	r5 = 0<32>
	branch p0 l00014EE4
	// succ:  l00014D90 l00014EE4
l00014D90:
	p0 = r2 == 1<32>
	__loop(0<i32>, 0x00014D90<p32>, 6<32>)
	branch r3 == 0<32> l00014DA8
	// succ:  l00014D9C l00014DA8
l00014D9C:
	r3 = Mem0[r4:word32]
	r5 = r5
	r4 = r4 + 4<32>
	goto l00014DC4
	// succ:  l00014DC4
l00014DA8:
	Mem0[r29:word32] = r5
	r1 = 0x116<32>
	r3 = badva + 0x23<32>
	goto l00014EE0
	// succ:  l00014EE0
l00014DBC:
	branch r4 >u 4<32> l00014DE8
	goto l00014DC8
	// succ:  l00014DC8 l00014DE8
l00014DC4:
	branch r3 == 1<32> l00014DBC
	goto l00014DD0
	// succ:  l00014DD0 l00014DBC
l00014DC8:
	r4 = r4 + 1<32>
	branch r3 == 1<32> l00014DBC
	// succ:  l00014DD0 l00014DBC
l00014DD0:
	r3 = Mem0[r2:word32]
	Mem0[r29:word32] = r4
	r1 = 0x11B<32>
	r3 = badva + 9<32>
	goto l00014EE0
	// succ:  l00014EE0
l00014DE8:
	r1 = 0x120<32>
	Mem0[r29:word32] = r17
	call logmsg_function (retsize: 0;)
	branch r2 == 0<32> l00014E60
	// succ:  l00014E08 l00014E60
l00014E08:
	r2 = Mem0[r17 + 16<i32>:word32]
	r19_r18 = 0<64>
	r2 = Mem0[r17 + 4<i32>:word32]
	r1 = 0x109<32>
	r4 = badva + 0x23<32>
	r2 = Mem0[r13 + r18:word32]
	r6 = Mem0[r2 + 24<i32>:word32]
	r5 = Mem0[r2 + 16<i32>:word32]
	r8 = Mem0[r2 + 4<i32>:word32]
	r7 = Mem0[r2 + 12<i32>:word32]
	r12 = Mem0[r2:word32]
	r9 = Mem0[r2 + 8<i32>:word32]
	Mem0[r29 + 20<i32>:word32] = r6
	Mem0[r29 + 24<i32>:word32] = r5
	Mem0[r29 + 12<i32>:word32] = r9
	Mem0[r29 + 16<i32>:word32] = r7
	Mem0[r29 + 4<i32>:word32] = r12
	Mem0[r29 + 8<i32>:word32] = r8
	Mem0[r29:word32] = r19
	call logmsg_function (retsize: 0;)
	r2 = Mem0[r17 + 16<i32>:word32]
	r18 = r18 + 4<32>
	branch r2 >u r19 l00014E08
	// succ:  l00014E5C l00014E08
l00014E5C:
	r19 = r19 + 1<32>
	r3 = Mem0[r2 + 20<i32>:word32]
	// succ:  l00014E60
l00014E60:
	r7 = Mem0[r2 + 4<i32>:word32]
	r4 = Mem0[r2 + 16<i32>:word32]
	r3 = Mem0[r3 + 16<i32>:word32]
	r2 = Mem0[r4 + 16<i32>:word32]
	r20 = Mem0[r7 + 8<i32>:word32]
	r18 = Mem0[r7 + 16<i32>:word32]
	r2 = Mem0[r3:word32]
	r21 = Mem0[r2:word32]
	r19 = Mem0[r7 + 12<i32>:word32]
	call fmaxf.1.0 (retsize: 0;)
	r2 = 0x437F0000<32>
	r1_r0 = r0_r2
	call fn00009610 (retsize: 0;)
	r2 = 0<32>
	call fn00009624 (retsize: 0;)
	r4 = r19 + 0x1F<32>
	r2 = r20 + 0xF<32>
	r5 = r2 & 0xFFFFFFF0<32>
	r0 = 0x80<32>
	r22 = r4 & 0xFFFFFFE0<32>
	call fn00009554 (retsize: 0;)
	r1 = r23 * r22
	Mem0[r17 + 40<i32>:word32] = r0
	r1 = 0x13A<32>
	r3 = badva + 0x17<32>
	p1 = r24 > 0xFFFFFFFF<32>
	branch p0 l00014EEC
	// succ:  l00014EE0 l00014EEC
l00014EE0:
	r21 = -1<i32>
	r2 = r16
	call errlog_function (retsize: 0;)
	goto l00014EE8
	// succ:  l00014EE8
l00014EE4:
	r21 = -1<i32>
	r2 = r16
	// succ:  l00014EE8
l00014EE8:
	goto l00014F7C
	// succ:  l00014F7C
l00014EEC:
	r0 = r16
	r21 = 0<32>
	p0 = r24 > 0xFF<32>
	r25 = CONVERT(SLICE(r24, byte, 0), byte, uint32)
	r25 = 0xFF<32>
	r25 = r21 + 0<32>
	call nn_os_hvx_power_on (retsize: 0;)
	call nn_os_vector_acquire (retsize: 0;)
	r4 = badva + 8<32>
	Mem0[r29 + 16<i32>:word32] = r25
	Mem0[r29 + 4<i32>:word32] = r19
	r1 = 0x13E<32>
	Mem0[r29 + 8<i32>:word32] = r23
	Mem0[r29 + 12<i32>:word32] = r22
	r24 = r0
	Mem0[r29:word32] = r20
	call logmsg_function (retsize: 0;)
	r3 = Mem0[r16 + 4<i32>:word32]
	r2 = r19
	r1_r0 = r20_r18
	r5_r4 = r22_r23
	Mem0[r29:word32] = r25
	call pad2d (retsize: 0;)
	r3 = Mem0[r17 + 8<i32>:word32]
	r0 = Mem0[r16 + 4<i32>:word32]
	r1 = r23
	r2 = r22
	call transpack (retsize: 0;)
	r0 = r24
	call nn_os_vector_release (retsize: 0;)
	r0 = r16
	call nn_os_hvx_power_off (retsize: 0;)
	r4 = badva + 0x2B<32>
	r1 = 0x143<32>
	Mem0[r29:word32] = r17
	call logmsg_function (retsize: 0;)
	// succ:  l00014F7C
l00014F7C:
	r0 = r21
	r19_r18 = Mem0[r29 + 56<i32>:word64]
	r17_r16 = Mem0[r29 + 64<i32>:word64]
	r23_r22 = Mem0[r29 + 40<i32>:word64]
	r21_r20 = Mem0[r29 + 48<i32>:word64]
	v23 = r30
	r31 = Mem0[v23 + 4<i32>:word32]
	r30 = Mem0[v23:word32]
	r29 = v23 + 8<i32>
	return
	// succ:  matmul_check_ref_exit
matmul_check_ref_exit:


// matmul_ctor
// Return size: 0
define matmul_ctor
matmul_ctor_entry:
	r29 = fp
	// succ:  l00014F90
l00014F90:
	v4 = r29 - 8<i32>
	Mem0[v4:word32] = r30
	Mem0[v4 + 4<i32>:word32] = r31
	r30 = v4
	r29 = v4 - 40<i32>
	Mem0[r29 + 488<i32>:word64] = r19_r18
	r6 = badva + 2<32>
	r19_r18 = r0_r4
	Mem0[r29 + 16<i32>:word64] = r21_r20
	Mem0[r29 + 32<i32>:word64] = r17_r16
	r21_r20 = r2_r5
	r17_r16 = r3_r1
	r1 = 0x152<32>
	r4 = r6
	Mem0[r29 + 8<i32>:word64] = r23_r22
	r22 = Mem0[r29 + 48<i32>:word64]
	r23 = Mem0[r29 + 52<i32>:word32]
	Mem0[r29:word32] = r16
	call logmsg_function (retsize: 0;)
	Mem0[r29 + 4<i32>:word32] = r23
	r1_r0 = r16_r19
	r3_r2 = r17_r21
	r5_r4 = r20_r18
	Mem0[r29:word32] = r22
	call node_alloc_common (retsize: 0;)
	r17_r16 = Mem0[r29 + 32<i32>:word64]
	r21_r20 = Mem0[r29 + 16<i32>:word64]
	r19_r18 = Mem0[r29 + 24<i32>:word64]
	v36 = r30
	r31 = Mem0[v36 + 4<i32>:word32]
	r30 = Mem0[v36:word32]
	r29 = v36 + 8<i32>
	return
	// succ:  matmul_ctor_exit
matmul_ctor_exit:


// matmul_execute_ref
// Return size: 0
define matmul_execute_ref
matmul_execute_ref_entry:
	r29 = fp
	// succ:  l00014FEC
l00014FEC:
	// succ:  l00014FEC_thunk_fn00015000
l00014FEC_thunk_fn00015000:
	call fn00015000 (retsize: 0;)
	return
	// succ:  matmul_execute_ref_exit
matmul_execute_ref_exit:


// matmul_execute
// Return size: 0
define matmul_execute
matmul_execute_entry:
	r29 = fp
	// succ:  l00014FF8
l00014FF8:
	v4 = r29 - 8<i32>
	Mem0[v4:word32] = r30
	Mem0[v4 + 4<i32>:word32] = r31
	r30 = v4
	r29 = v4 - 120<i32>
	Mem0[r29 + 496<i32>:word64] = r17_r16
	r16 = r0
	// succ:  l00014FF8_thunk_fn00015000
l00014FF8_thunk_fn00015000:
	call fn00015000 (retsize: 0;)
	return
	// succ:  matmul_execute_exit
matmul_execute_exit:


// fn00015000
// Return size: 0
define fn00015000
fn00015000_entry:
	r29 = fp
	// succ:  l00015000
l00015000:
	Mem0[r29 + 40<i32>:word32] = r2
	r3 = Mem0[r16 + 4<i32>:word32]
	r4 = Mem0[r16 + 8<i32>:word32]
	Mem0[r29 + 72<i32>:word64] = r27_r26
	Mem0[r29 + 68<i32>:word32] = r1
	r2 = Mem0[r4 + 4<i32>:word32]
	r7 = Mem0[r3:word32]
	r5 = Mem0[r3 + 12<i32>:word32]
	Mem0[r29 + 48<i32>:word32] = r2
	r2 = Mem0[r4:word32]
	r6 = Mem0[r3 + 8<i32>:word32]
	Mem0[r29 + 52<i32>:word32] = r2
	r2 = Mem0[r7 + 8<i32>:word32]
	r9 = Mem0[r3 + 4<i32>:word32]
	Mem0[r29 + 60<i32>:word32] = r2
	r2 = Mem0[r6 + 16<i32>:word32]
	r1 = Mem0[r4 + 8<i32>:word32]
	r5 = Mem0[r5 + 16<i32>:word32]
	r8 = Mem0[r3 + 20<i32>:word32]
	r4 = Mem0[r9:word32]
	r3 = Mem0[r3 + 16<i32>:word32]
	Mem0[r29 + 56<i32>:word32] = r4
	r4 = Mem0[r5:word32]
	r26 = Mem0[r2:word32]
	Mem0[r29 + 96<i32>:word64] = r21_r20
	Mem0[r29 + 104<i32>:word64] = r19_r18
	r19 = 0x437F0000<32>
	r8 = Mem0[r8 + 16<i32>:word32]
	Mem0[r29 + 44<i32>:word32] = r1
	r1 = Mem0[r7 + 12<i32>:word32]
	r3 = Mem0[r3 + 16<i32>:word32]
	Mem0[r29 + 80<i32>:word64] = r25_r24
	Mem0[r29 + 64<i32>:word32] = r1
	r1_r0 = r19_r20
	Mem0[r29 + 88<i32>:word64] = r23_r22
	r18 = Mem0[r7 + 4<i32>:word32]
	r25 = Mem0[r9 + 8<i32>:word32]
	r17 = Mem0[r7:word32]
	r23 = Mem0[r9 + 12<i32>:word32]
	r24 = Mem0[r9 + 4<i32>:word32]
	r27 = Mem0[r3:word32]
	r21 = Mem0[r8:word32]
	call fn00009610 (retsize: 0;)
	r22 = r0
	r1_r0 = r19_r21
	call fn00009610 (retsize: 0;)
	r3 = 0x4F000000<32>
	r0 = r20
	r2 = 0<32>
	r20 = 0<32>
	r1_r0 = r0_r19
	call fn00009610 (retsize: 0;)
	r24 = r17
	r26 = r24
	call fn00009624 (retsize: 0;)
	r0 = r21
	r2 = r0
	call fn000155F0 (retsize: 0;)
	r2 = 0x437F0000<32>
	r1_r0 = r0_r2
	call fn00009610 (retsize: 0;)
	r16 = Mem0[r29 + 68<i32>:word64]
	r20 = r16
	call fn00009624 (retsize: 0;)
	r4 = badva + 0x2C<32>
	r1 = 0x72<32>
	Mem0[r29:word32] = r20
	call fn000153DC (retsize: 0;)
	Mem0[r29 + 20<i32>:word32] = r26
	Mem0[r29 + 28<i32>:word32] = r23
	r4 = badva + 0x28<32>
	r2 = Mem0[r29 + 64<i32>:word32]
	r1 = 0x75<32>
	Mem0[r29 + 24<i32>:word32] = r25
	r25 = Mem0[r29 + 56<i32>:word32]
	Mem0[r29 + 16<i32>:word32] = r25
	r17 = Mem0[r29 + 60<i32>:word32]
	Mem0[r29:word32] = r24
	Mem0[r29 + 12<i32>:word32] = r2
	Mem0[r29 + 4<i32>:word32] = r18
	Mem0[r29 + 8<i32>:word32] = r17
	call logmsg_function (retsize: 0;)
	r4 = badva + 0x1E<32>
	Mem0[r29 + 12<i32>:word32] = r23
	Mem0[r29:word32] = r24
	r1 = 0x77<32>
	Mem0[r29 + 4<i32>:word32] = r18
	Mem0[r29 + 8<i32>:word32] = r17
	call logmsg_function (retsize: 0;)
	p0 = r18 == 1<32>
	r1 = 0x78<32>
	r3 = badva + 0x1F<32>
	r1 = 0x79<32>
	branch p0 l00015198_thunk_fn00015240
	goto l00015198_thunk_fn000151A0
	// succ:  l00015198_thunk_fn000151A0 l00015198_thunk_fn00015240
l00015000:
	Mem0[r29 + 40<i32>:word32] = r2
	r3 = Mem0[r16 + 4<i32>:word32]
	r4 = Mem0[r16 + 8<i32>:word32]
	Mem0[r29 + 72<i32>:word64] = r27_r26
	Mem0[r29 + 68<i32>:word32] = r1
	r2 = Mem0[r4 + 4<i32>:word32]
	r7 = Mem0[r3:word32]
	r5 = Mem0[r3 + 12<i32>:word32]
	Mem0[r29 + 48<i32>:word32] = r2
	r2 = Mem0[r4:word32]
	r6 = Mem0[r3 + 8<i32>:word32]
	Mem0[r29 + 52<i32>:word32] = r2
	r2 = Mem0[r7 + 8<i32>:word32]
	r9 = Mem0[r3 + 4<i32>:word32]
	Mem0[r29 + 60<i32>:word32] = r2
	r2 = Mem0[r6 + 16<i32>:word32]
	r1 = Mem0[r4 + 8<i32>:word32]
	r5 = Mem0[r5 + 16<i32>:word32]
	r8 = Mem0[r3 + 20<i32>:word32]
	r4 = Mem0[r9:word32]
	r3 = Mem0[r3 + 16<i32>:word32]
	Mem0[r29 + 56<i32>:word32] = r4
	r4 = Mem0[r5:word32]
	r26 = Mem0[r2:word32]
	Mem0[r29 + 96<i32>:word64] = r21_r20
	Mem0[r29 + 104<i32>:word64] = r19_r18
	r19 = 0x437F0000<32>
	r8 = Mem0[r8 + 16<i32>:word32]
	Mem0[r29 + 44<i32>:word32] = r1
	r1 = Mem0[r7 + 12<i32>:word32]
	r3 = Mem0[r3 + 16<i32>:word32]
	Mem0[r29 + 80<i32>:word64] = r25_r24
	Mem0[r29 + 64<i32>:word32] = r1
	r1_r0 = r19_r20
	Mem0[r29 + 88<i32>:word64] = r23_r22
	r18 = Mem0[r7 + 4<i32>:word32]
	r25 = Mem0[r9 + 8<i32>:word32]
	r17 = Mem0[r7:word32]
	r23 = Mem0[r9 + 12<i32>:word32]
	r24 = Mem0[r9 + 4<i32>:word32]
	r27 = Mem0[r3:word32]
	r21 = Mem0[r8:word32]
	call fn00009610 (retsize: 0;)
	r22 = r0
	r1_r0 = r19_r21
	call fn00009610 (retsize: 0;)
	r3 = 0x4F000000<32>
	r0 = r20
	r2 = 0<32>
	r20 = 0<32>
	r1_r0 = r0_r19
	call fn00009610 (retsize: 0;)
	r24 = r17
	r26 = r24
	call fn00009624 (retsize: 0;)
	r0 = r21
	r2 = r0
	call fn000155F0 (retsize: 0;)
	r2 = 0x437F0000<32>
	r1_r0 = r0_r2
	call fn00009610 (retsize: 0;)
	r16 = Mem0[r29 + 68<i32>:word64]
	r20 = r16
	call fn00009624 (retsize: 0;)
	r4 = badva + 0x2C<32>
	r1 = 0x72<32>
	Mem0[r29:word32] = r20
	call fn000153DC (retsize: 0;)
	Mem0[r29 + 20<i32>:word32] = r26
	Mem0[r29 + 28<i32>:word32] = r23
	r4 = badva + 0x28<32>
	r2 = Mem0[r29 + 64<i32>:word32]
	r1 = 0x75<32>
	Mem0[r29 + 24<i32>:word32] = r25
	r25 = Mem0[r29 + 56<i32>:word32]
	Mem0[r29 + 16<i32>:word32] = r25
	r17 = Mem0[r29 + 60<i32>:word32]
	Mem0[r29:word32] = r24
	Mem0[r29 + 12<i32>:word32] = r2
	Mem0[r29 + 4<i32>:word32] = r18
	Mem0[r29 + 8<i32>:word32] = r17
	call logmsg_function (retsize: 0;)
	r4 = badva + 0x1E<32>
	Mem0[r29 + 12<i32>:word32] = r23
	Mem0[r29:word32] = r24
	r1 = 0x77<32>
	Mem0[r29 + 4<i32>:word32] = r18
	Mem0[r29 + 8<i32>:word32] = r17
	call logmsg_function (retsize: 0;)
	p0 = r18 == 1<32>
	r1 = 0x78<32>
	r3 = badva + 0x1F<32>
	r1 = 0x79<32>
	branch p0 l00015240
	goto l00015198_thunk_fn000151A0
	// succ:  l00015198_thunk_fn000151A0 l00015198_thunk_fn00015240
l00015198_thunk_fn000151A0:
	call fn000151A0 (retsize: 0;)
	return
	// succ:  fn00015000_exit
l00015198_thunk_fn000151A0:
	call fn000151A0 (retsize: 0;)
	return
	// succ:  fn00015000_exit
l00015198_thunk_fn00015240:
	call fn00015240 (retsize: 0;)
	return
	// succ:  fn00015000_exit
l00015198_thunk_fn00015240:
	call fn00015240 (retsize: 0;)
	return
	// succ:  fn00015000_exit
fn00015000_exit:


// fn000151A0
// Return size: 0
define fn000151A0
fn000151A0_entry:
	r29 = fp
	// succ:  l000151A0
l000151A0:
	r1 = 0x7A<32>
	p0 = r26 == 1<32>
	r3 = badva + 7<32>
	branch p0 l00015240
	goto l000151B4
	// succ:  l000151B4 l000151B0_thunk_fn00015240
l000151B0_thunk_fn00015240:
	call fn00015240 (retsize: 0;)
	return
	// succ:  fn000151A0_exit
l000151B4:
	r1 = 0x7B<32>
	p0 = r24 == 1<32>
	r3 = badva + 5<32>
	branch p0 l00015240
	goto l000151C8
	// succ:  l000151C8 l000151C4_thunk_fn00015240
l000151C4_thunk_fn00015240:
	call fn00015240 (retsize: 0;)
	return
	// succ:  fn000151A0_exit
l000151C8:
	p0 = r25 == 1<32>
	r2 = r24 * r17
	r3 = badva + 0x31<32>
	branch p0 l00015240
	goto l000151DC
	// succ:  l000151DC l000151D8_thunk_fn00015240
l000151D8_thunk_fn00015240:
	call fn00015240 (retsize: 0;)
	return
	// succ:  fn000151A0_exit
l000151DC:
	r3 = Mem0[r29 + 52<i32>:word32]
	r1 = 0x7C<32>
	r2 = r2 * r18
	r4 = Mem0[r3 + 20<i32>:word32]
	r3 = badva + 0x28<32>
	r2 = r2 * r23
	branch r2 >u r4 l00015244
	// succ:  l00015204 l00015244
l00015204:
	r2 = r2 << 2<32>
	r3 = Mem0[r29 + 48<i32>:word64]
	r5 = 4<32>
	r1 = 0x7D<32>
	r4 = Mem0[r3 + 20<i32>:word32]
	p2 = r19 > 0xFFFFFFFF<32>
	r3 = badva + 0x15<32>
	p3 = r21 > 0xFFFFFFFF<32>
	branch p0 l00015240
	// succ:  l00015224 l00015228_thunk_fn00015240
l00015224:
	p0 = r5 >u r4
	r3 = Mem0[r29 + 44<i32>:word64]
	r5 = 0<32>
	r1 = 0x7E<32>
	r4 = Mem0[r3 + 20<i32>:word32]
	r3 = badva + 3<32>
	r1_r0 = r16_r20
	branch p0 l00015250
	goto l00015240_thunk_fn00015240
	// succ:  l00015240_thunk_fn00015240 l00015250
l00015228_thunk_fn00015240:
	call fn00015240 (retsize: 0;)
	return
	// succ:  fn000151A0_exit
l00015240_thunk_fn00015240:
	call fn00015240 (retsize: 0;)
	return
	// succ:  fn000151A0_exit
l00015244:
	r2 = r16
	// succ:  l00015244_thunk_fn00015240
l00015244_thunk_fn00015240:
	call fn00015240 (retsize: 0;)
	return
	// succ:  fn000151A0_exit
l00015250:
	r6 = Mem0[r29 + 48<i32>:word64]
	r7 = Mem0[r29 + 52<i32>:word64]
	r3 = 0xFF<32>
	p0 = r19 > 0xFF<32>
	Mem0[r7 + 12<i32>:word32] = r23
	Mem0[r7:word32] = 1<32>
	Mem0[r7 + 4<i32>:word32] = 1<32>
	Mem0[r7 + 8<i32>:word32] = r17
	Mem0[r7 + 24<i32>:word32] = r2
	r3 = CONVERT(SLICE(r21, byte, 0), byte, uint32)
	r2 = r3 + 0<32>
	r7 = Mem0[r29 + 44<i32>:word64]
	r4 = Mem0[r6 + 16<i32>:word32]
	r3 = r5 + 0<32>
	r2 = CONVERT(SLICE(r19, byte, 0), byte, uint32)
	Mem0[r6 + 12<i32>:word32] = 1<32>
	Mem0[r6 + 8<i32>:word32] = 1<32>
	r2 = r5 + 0<32>
	Mem0[r6 + 4<i32>:word32] = 1<32>
	Mem0[r6:word32] = 1<32>
	Mem0[r4:word32] = r22
	Mem0[r7 + 8<i32>:word32] = 1<32>
	r4 = Mem0[r7 + 16<i32>:word32]
	Mem0[r7:word32] = 1<32>
	Mem0[r7 + 4<i32>:word32] = 1<32>
	Mem0[r7 + 12<i32>:word32] = 1<32>
	r5 = Mem0[r29 + 36<i32>:word64]
	Mem0[r4:word32] = r5
	r4 = Mem0[r29 + 40<i32>:word64]
	Mem0[r7 + 24<i32>:word32] = 4<32>
	Mem0[r6 + 24<i32>:word32] = 4<32>
	call r4 (retsize: 0;)
	r4 = badva + 0x11<32>
	r1 = 0x8C<32>
	call logmsg_function (retsize: 0;)
	r0 = 0<32>
	// succ:  l000152C0_thunk_fn00015240
l000152C0_thunk_fn00015240:
	call fn00015240 (retsize: 0;)
	return
	// succ:  fn000151A0_exit
fn000151A0_exit:


// fn00015240
// Return size: 0
define fn00015240
fn00015240_entry:
	r29 = fp
	// succ:  l00015240
l00015240:
	p0 = r4 >u -1<i32>
	r2 = r16
	call errlog_function (retsize: 0;)
	// succ:  l00015248
l00015248:
	r0 = 0xFFFFFFFF<32>
	// succ:  l000152C4
l000152C4:
	r19_r18 = Mem0[r29 + 104<i32>:word64]
	r17_r16 = Mem0[r29 + 112<i32>:word64]
	r23_r22 = Mem0[r29 + 88<i32>:word64]
	r21_r20 = Mem0[r29 + 96<i32>:word64]
	r27_r26 = Mem0[r29 + 72<i32>:word64]
	r25_r24 = Mem0[r29 + 80<i32>:word64]
	v16 = r30
	r31 = Mem0[v16 + 4<i32>:word32]
	r30 = Mem0[v16:word32]
	r29 = v16 + 8<i32>
	return
	// succ:  fn00015240_exit
fn00015240_exit:


// matmul_ref
// Return size: 0
define matmul_ref
matmul_ref_entry:
	r29 = fp
	// succ:  l000152E0
l000152E0:
	v4 = r29 - 8<i32>
	Mem0[v4:word32] = r30
	Mem0[v4 + 4<i32>:word32] = r31
	r30 = v4
	r29 = v4 - 56<i32>
	r4 = badva + 0x11<32>
	r5 = Mem0[r0 + 4<i32>:word32]
	r6 = Mem0[r0 + 8<i32>:word32]
	Mem0[r29 + 48<i32>:word64] = r17_r16
	Mem0[r29 + 40<i32>:word64] = r19_r18
	r17_r16 = r1_r3
	r18 = r2
	r5 = Mem0[r5 + 4<i32>:word32]
	r2 = Mem0[r5:word32]
	r1 = 0xAD<32>
	Mem0[r29 + 32<i32>:word64] = r21_r20
	r6 = Mem0[r6:word32]
	Mem0[r29 + 24<i32>:word64] = r23_r22
	Mem0[r29 + 16<i32>:word64] = r25_r24
	r19 = Mem0[r2 + 12<i32>:word32]
	r23 = Mem0[r2 + 16<i32>:word32]
	r20 = Mem0[r2 + 8<i32>:word32]
	r22 = Mem0[r5 + 12<i32>:word32]
	r21 = Mem0[r5 + 16<i32>:word32]
	Mem0[r29 + 12<i32>:word32] = r16
	r24 = Mem0[r6 + 16<i32>:word32]
	Mem0[r29 + 4<i32>:word32] = r19
	Mem0[r29 + 8<i32>:word32] = r18
	Mem0[r29:word32] = r20
	call logmsg_function (retsize: 0;)
	r2 = 0<32>
	branch p0 l000153B4
	// succ:  l0001533C l000153B4
l0001533C:
	p0 = r12 == 0<32>
	branch p0 l000153B0
l00015340:
	branch p0 l000153B0
	// succ:  l00015344 l000153B0
l00015344:
	p0 = r14 == 0<32>
	r5 = r2 * r22
	r3 = r21
	r4 = r2
	__loop(1<i32>, 0x00015354<p32>, r22)
	r4 = r23 + r4 * r19
	r5 = r24 + (r5 << 2<32>)
	r6 = 0<32>
	r12 = r19 + 0xFFFFFFFF<32>
	branch p0 l000153A0
	// succ:  l00015360 l000153A0
l00015360:
	p0 = r11 == 0<32>
	r9 = Mem0[r3:byte]
	p0 = r19 >u 1<32>
	r8 = r3 + r22
	r7 = r7 + 1<i32>
	r13 = Mem0[r7:byte]
	r9 = r9 - r16
	__loop(0<i32>, 0x00015384<p32>, r12)
	r12 = r13 - r18
	branch p0 l0001539C
	// succ:  l00015384 l0001539C
l00015384:
	r7 = r7 + 1<i32>
	r14 = Mem0[r7:byte]
	r13 = Mem0[r8:byte]
	r8 = r8 + r22
	r6 = r6 + r9 * r12
	r12 = r14 - r18
	r9 = r13 - r16
	// succ:  l0001539C
l0001539C:
	r6 = r6 + r9 * r12
	// succ:  l000153A0
l000153A0:
	Mem0[r5:word32] = r6
	r5 = r5 + 4<i32>
	r3 = r3 + 1<32>
	branch r2 == r20 l00015340
	goto l000153B8
	// succ:  l000153B8 l00015340
l000153B0:
	branch r2 == r20 l00015340
	goto l000153B8
	// succ:  l000153B8 l00015340
l000153B4:
	r4 = badva + 0x2F<32>
	r1 = 0xBA<32>
	r19_r18 = Mem0[r29 + 40<i32>:word64]
	r17_r16 = Mem0[r29 + 48<i32>:word64]
	call logmsg_function (retsize: 0;)
	r23_r22 = Mem0[r29 + 24<i32>:word64]
	r21_r20 = Mem0[r29 + 32<i32>:word64]
	v37 = r30
	r31 = Mem0[v37 + 4<i32>:word32]
	r30 = Mem0[v37:word32]
	r29 = v37 + 8<i32>
	return
	// succ:  matmul_ref_exit
l000153B8:
	r2 = r2 + 1<32>
	r4 = badva + 0x2F<32>
	r1 = 0xBA<32>
	r19_r18 = Mem0[r29 + 40<i32>:word64]
	r17_r16 = Mem0[r29 + 48<i32>:word64]
	call logmsg_function (retsize: 0;)
	r23_r22 = Mem0[r29 + 24<i32>:word64]
	r21_r20 = Mem0[r29 + 32<i32>:word64]
	v38 = r30
	r31 = Mem0[v38 + 4<i32>:word32]
	r30 = Mem0[v38:word32]
	r29 = v38 + 8<i32>
	return
	// succ:  matmul_ref_exit
matmul_ref_exit:


// logmsg_function
// Return size: 0
define logmsg_function
logmsg_function_entry:
	r29 = fp
	// succ:  l000153D8
l000153D8:
	v4 = r29 - 8<i32>
	Mem0[v4:word32] = r30
	Mem0[v4 + 4<i32>:word32] = r31
	r30 = v4
	r29 = v4 - 8<i32>
	branch r3 >u r5 l000153FC
	goto l000153E8
	// succ:  l000153E8 l000153DC_thunk_fn000153FC
l000153DC_thunk_fn000153FC:
	call fn000153FC (retsize: 0;)
	return
	// succ:  logmsg_function_exit
l000153E8:
	r5 = Mem0[r2 + 16<i32>:word32]
	r6 = r29 + 0x10<32>
	r5 = r29 + 0x10<32>
	r0 = badva + 0x31<32>
	Mem0[r29 + 4<i32>:word32] = r6
	call logv (retsize: 0;)
	v13 = r30
	r31 = Mem0[v13 + 4<i32>:word32]
	r30 = Mem0[v13:word32]
	r29 = v13 + 8<i32>
	return
	// succ:  logmsg_function_exit
logmsg_function_exit:


// fn000153DC
// Return size: 0
define fn000153DC
fn000153DC_entry:
	r29 = fp
	// succ:  l000153DC
l000153DC:
	branch r3 >u r5 l000153DC_thunk_fn000153FC
	goto l000153E8_in_fn000153DC
	// succ:  l000153E8_in_fn000153DC l000153DC_thunk_fn000153FC
l000153DC_thunk_fn000153FC:
	call fn000153FC (retsize: 0;)
	return
	// succ:  fn000153DC_exit
l000153E8_in_fn000153DC:
	r5 = Mem0[r2 + 16<i32>:word32]
	r6 = r29 + 0x10<32>
	r5 = r29 + 0x10<32>
	r0 = badva + 0x31<32>
	Mem0[r29 + 4<i32>:word32] = r6
	call logv (retsize: 0;)
	v10 = r30
	r31 = Mem0[v10 + 4<i32>:word32]
	r30 = Mem0[v10:word32]
	r29 = v10 + 8<i32>
	return
	// succ:  fn000153DC_exit
fn000153DC_exit:


// fn000153FC
// Return size: 0
define fn000153FC
fn000153FC_entry:
	r29 = fp
	// succ:  l000153FC
l000153FC:
	// succ:  l000153FC_thunk_errlog_function
l000153FC_thunk_errlog_function:
	call errlog_function (retsize: 0;)
	return
	// succ:  fn000153FC_exit
fn000153FC_exit:


// errlog_function
// Return size: 0
define errlog_function
errlog_function_entry:
	r29 = fp
	// succ:  l00015400
l00015400:
	v4 = r29 - 8<i32>
	Mem0[v4:word32] = r30
	Mem0[v4 + 4<i32>:word32] = r31
	r30 = v4
	r29 = v4 - 8<i32>
	r4 = r3
	r0 = badva + 0x15<32>
	Mem0[r29 + 1<i32>:byte] = r6
	r6 = r29 + 0x10<32>
	r5 = r29 + 0x10<32>
	r3 = 0<32>
	v13 = r30
	r31 = Mem0[v13 + 4<i32>:word32]
	r30 = Mem0[v13:word32]
	r29 = v13 + 8<i32>
	return
	// succ:  errlog_function_exit
errlog_function_exit:


// matmul_asm
// Return size: 0
define matmul_asm
matmul_asm_entry:
	r29 = fp
	// succ:  l00015424
l00015424:
	v4 = r29 - 8<i32>
	Mem0[v4:word32] = r30
	Mem0[v4 + 4<i32>:word32] = r31
	r30 = v4
	r29 = v4 - 80<i32>
	Mem0[r29 + 480<i32>:word64] = r21_r20
	r21_r20 = r0_r3
	Mem0[r29 + 40<i32>:word64] = r25_r24
	r4 = Mem0[r21 + 4<i32>:word32]
	r5 = Mem0[r21 + 8<i32>:word32]
	Mem0[r29 + 64<i32>:word64] = r19_r18
	Mem0[r29 + 72<i32>:word64] = r17_r16
	r16 = r1
	r19 = r2
	r5 = Mem0[r5:word32]
	r6 = Mem0[r4:word32]
	Mem0[r29 + 48<i32>:word64] = r23_r22
	r4 = Mem0[r4 + 4<i32>:word32]
	r17 = Mem0[r6 + 16<i32>:word32]
	r24 = Mem0[r6 + 8<i32>:word32]
	r18 = Mem0[r5 + 16<i32>:word32]
	r23 = Mem0[r6 + 12<i32>:word32]
	r1 = 0xDB<32>
	p0 = r24 == 1<32>
	Mem0[r29 + 32<i32>:word64] = r27_r26
	r22 = Mem0[r4 + 12<i32>:word32]
	r25 = r23 + 0xF<32>
	branch p0 l000154F0
	// succ:  l00015470 l000154F0
l00015470:
	Mem0[r29 + 4<i32>:word32] = r23
	Mem0[r29 + 20<i32>:word32] = r20
	r4 = badva + 0x25<32>
	r24 = r25 & 0xFFFFFFF0<32>
	Mem0[r29 + 28<i32>:word32] = r16
	Mem0[r29 + 16<i32>:word32] = r19
	Mem0[r29 + 8<i32>:word32] = 1<32>
	Mem0[r29 + 12<i32>:word32] = r24
	Mem0[r29:word32] = 1<32>
	call logmsg_function (retsize: 0;)
	r2 = r25
	r23 = 0xFFFFFE00<32>
	branch p0 l000155C0
	// succ:  l000154A4 l000155C0
l000154A4:
	p0 = r14 == 1<32>
	r16 = 0<32>
	r27_r26 = 0x20<64>
	r25 = r22
	r20 = 0<32> - r20
	r19 = 0<32> - r19
	r23 = r23 & r2 << 5<32>
	r2 = Mem0[r21 + 8<i32>:word32]
	r4 = r18
	r1_r0 = r19_r17
	r5 = min<int32>(r26, r25)
	// succ:  l000154C0
l000154C0:
	Mem0[r29:word32] = r24
	r2 = r2 + r16
	r3 = r20
	call gemvmpybbw_asm (retsize: 0;)
	r18 = r18 + 0x80<32>
	r16 = r16 + r23
	r25 = r25 + 0xFFFFFFE0<32>
	branch r22 >u r27 l000154C0
	// succ:  l000154F0 l000154C0
l000154F0:
	r27 = r27 + 0x20<32>
	Mem0[r29 + 12<i32>:word32] = r20
	r21 = Mem0[r4 + 16<i32>:word32]
	r4 = badva + 1<32>
	Mem0[r29:word32] = r24
	Mem0[r29 + 4<i32>:word32] = r23
	Mem0[r29 + 8<i32>:word32] = r19
	r1 = 0xAD<32>
	call logmsg_function (retsize: 0;)
	p0 = r24 == 0<32>
	r2 = 0<32>
	branch p0 l00015594
	// succ:  l0001551C l00015594
l0001551C:
	branch p0 l00015590
l00015520:
	branch p0 l00015590
	// succ:  l00015524 l00015590
l00015524:
	p0 = r14 == 0<32>
	r5 = r2 * r22
	r3 = r21
	r4 = r2
	__loop(1<i32>, 0x00015534<p32>, r22)
	r4 = r17 + r4 * r23
	r5 = r18 + (r5 << 2<32>)
	r6 = 0<32>
	r12 = r23 + 0xFFFFFFFF<32>
	branch p0 l00015580
	// succ:  l00015540 l00015580
l00015540:
	p0 = r15 == 0<32>
	r9 = Mem0[r3:byte]
	p0 = r23 >u 1<32>
	r8 = r3 + r22
	r7 = r7 + 1<i32>
	r13 = Mem0[r7:byte]
	r9 = r9 - r20
	__loop(0<i32>, 0x00015564<p32>, r12)
	r12 = r13 - r19
	branch p0 l0001557C
	// succ:  l00015564 l0001557C
l00015564:
	r7 = r7 + 1<i32>
	r14 = Mem0[r7:byte]
	r13 = Mem0[r8:byte]
	r8 = r8 + r22
	r6 = r6 + r9 * r12
	r12 = r14 - r19
	r9 = r13 - r20
	// succ:  l0001557C
l0001557C:
	r6 = r6 + r9 * r12
	// succ:  l00015580
l00015580:
	Mem0[r5:word32] = r6
	r5 = r5 + 4<i32>
	r3 = r3 + 1<32>
	branch r2 == r24 l00015520
	goto l00015598
	// succ:  l00015598 l00015520
l00015590:
	branch r2 == r24 l00015520
	goto l00015598
	// succ:  l00015598 l00015520
l00015594:
	r4 = badva + 0xF<32>
	goto l000155A0
	// succ:  l000155A0
l00015598:
	r4 = badva + 0xF<32>
	// succ:  l000155A0
l000155A0:
	r1 = 0xBA<32>
	call logmsg_function (retsize: 0;)
	r4 = badva + 2<32>
	r1 = 0xEB<32>
	Mem0[r29 + 28<i32>:word32] = r16
	call logmsg_function (retsize: 0;)
	// succ:  l000155C0
l000155C0:
	r1 = 0xEE<32>
	r3 = 2<32>
	r4 = badva + 0x3B<32>
	r17_r16 = Mem0[r29 + 72<i32>:word64]
	r2 = Mem0[r29 + 28<i32>:word64]
	call logmsg_function (retsize: 0;)
	r21_r20 = Mem0[r29 + 56<i32>:word64]
	r19_r18 = Mem0[r29 + 64<i32>:word64]
	r25_r24 = Mem0[r29 + 40<i32>:word64]
	r23_r22 = Mem0[r29 + 48<i32>:word64]
	v44 = r30
	r31 = Mem0[v44 + 4<i32>:word32]
	r30 = Mem0[v44:word32]
	r29 = v44 + 8<i32>
	return
	// succ:  matmul_asm_exit
matmul_asm_exit:


// fmaxf.1.0
// Return size: 0
define fmaxf.1.0
fmaxf.1.0_entry:
	r29 = fp
	// succ:  l000155EC
l000155EC:
	r2 = 0x38D1B717<32>
	r1_r0 = r0_r2
	// succ:  l000155F4_thunk_fn00009600
l000155F4_thunk_fn00009600:
	call fn00009600 (retsize: 0;)
	return
	// succ:  fmaxf.1.0_exit
fmaxf.1.0_exit:


// fn000155F0
// Return size: 0
define fn000155F0
fn000155F0_entry:
	r29 = fp
	// succ:  l000155F0
l000155F0:
	r2 = 0x17<32>
	r1_r0 = r0_r2
	// succ:  l000155F4_thunk_fn00009600
l000155F4_thunk_fn00009600:
	call fn00009600 (retsize: 0;)
	return
	// succ:  fn000155F0_exit
fn000155F0_exit:


// maxpool_execute_asm
// Return size: 0
define maxpool_execute_asm
maxpool_execute_asm_entry:
	r29 = fp
	// succ:  l00015600
l00015600:
	// succ:  l00015600_thunk_fn00015768
l00015600_thunk_fn00015768:
	call fn00015768 (retsize: 0;)
	return
	// succ:  maxpool_execute_asm_exit
maxpool_execute_asm_exit:


// maxpool_check
// Return size: 0
define maxpool_check
maxpool_check_entry:
	r29 = fp
	// succ:  l0001560C
l0001560C:
	v4 = r29 - 8<i32>
	Mem0[v4:word32] = r30
	Mem0[v4 + 4<i32>:word32] = r31
	r30 = v4
	r29 = v4 - 48<i32>
	Mem0[r29 + 496<i32>:word64] = r17_r16
	r4 = badva + 7<32>
	r17 = r0
	r16 = r1
	r1 = 0x16C<32>
	call logmsg_function (retsize: 0;)
	Mem0[r29:word32] = r17
	Mem0[r29 + 32<i32>:word64] = r19_r18
	branch r2 == 0xA<32> l00015658
	// succ:  l0001563C l00015658
l0001563C:
	r2 = Mem0[r17 + 16<i32>:word32]
	r1 = 0x16D<32>
	r3 = badva + 0x34<32>
	// succ:  l00015640
l00015640:
	r2 = r16
	call errlog_function (retsize: 0;)
	// succ:  l00015648
l00015648:
	r0 = 0xFFFFFFFF<32>
	goto l00015748
	// succ:  l00015748
l00015658:
	branch r2 == 6<32> l00015674
	// succ:  l00015660 l00015674
l00015660:
	r1 = 0x16E<32>
	goto l00015648
	// succ:  l00015648
l00015674:
	Mem0[r29:word32] = r17
	call logmsg_function (retsize: 0;)
	branch r2 == 0<32> l000156FC
	// succ:  l00015690 l000156FC
l00015690:
	r2 = Mem0[r17 + 16<i32>:word32]
	r19_r18 = 0<64>
	branch r2 == 0<32> l000156B0
	// succ:  l0001569C l000156B0
l0001569C:
	r2 = Mem0[r5 + r18:word32]
	Mem0[r29:word32] = r19
	r1 = 0x174<32>
	r3 = badva + 0x3D<32>
	goto l00015640
	// succ:  l00015640
l000156B0:
	r6 = Mem0[r2 + 4<i32>:word32]
	r5 = Mem0[r2:word32]
	r4 = badva + 0x2F<32>
	r8 = Mem0[r2 + 12<i32>:word32]
	r7 = Mem0[r2 + 8<i32>:word32]
	r1 = 0x166<32>
	r2 = Mem0[r2 + 16<i32>:word32]
	r9 = Mem0[r2 + 24<i32>:word32]
	Mem0[r29 + 12<i32>:word32] = r7
	Mem0[r29 + 24<i32>:word32] = r2
	Mem0[r29 + 16<i32>:word32] = r8
	Mem0[r29 + 20<i32>:word32] = r9
	Mem0[r29 + 4<i32>:word32] = r5
	Mem0[r29 + 8<i32>:word32] = r6
	Mem0[r29:word32] = r19
	call logmsg_function (retsize: 0;)
	r2 = Mem0[r17 + 16<i32>:word32]
	r18 = r18 + 4<32>
	branch r2 >u r19 l00015690
	// succ:  l000156F8 l00015690
l000156F8:
	r19 = r19 + 1<32>
	branch r2 == 0<32> l00015730
	goto l00015700
	// succ:  l00015700 l00015730
l000156FC:
	r3 = Mem0[r17 + 8<i32>:word32]
	goto l00015710
	// succ:  l00015710
l00015700:
	r3 = Mem0[r17 + 8<i32>:word32]
	branch r2 >u r4 l00015734
	goto l00015714
	// succ:  l00015714 l00015734
l00015708:
	branch r2 >u r4 l00015734
	goto l00015714
	// succ:  l00015714 l00015734
l00015710:
	branch r5 == 1<32> l00015708
	goto l0001571C
	// succ:  l0001571C l00015708
l00015714:
	r4 = r4 + 1<32>
	r3 = r3 + 4<32>
	branch r5 == 1<32> l00015708
	// succ:  l0001571C l00015708
l0001571C:
	r5 = Mem0[r3:word32]
	Mem0[r29:word32] = r4
	r1 = 0x17A<32>
	r3 = badva + 0x13<32>
	goto l00015640
	// succ:  l00015640
l00015730:
	r4 = badva + 0x16<32>
	goto l00015738
	// succ:  l00015738
l00015734:
	// succ:  l00015738
l00015738:
	r1 = 0x17D<32>
	Mem0[r29:word32] = r17
	call logmsg_function (retsize: 0;)
	r0 = 0<32>
	// succ:  l00015748
l00015748:
	r19_r18 = Mem0[r29 + 32<i32>:word64]
	r17_r16 = Mem0[r29 + 40<i32>:word64]
	v17 = r30
	r31 = Mem0[v17 + 4<i32>:word32]
	r30 = Mem0[v17:word32]
	r29 = v17 + 8<i32>
	return
	// succ:  maxpool_check_exit
maxpool_check_exit:


// maxpool_execute_ref
// Return size: 0
define maxpool_execute_ref
maxpool_execute_ref_entry:
	r29 = fp
	// succ:  l00015750
l00015750:
	// succ:  l00015750_thunk_fn00015768
l00015750_thunk_fn00015768:
	call fn00015768 (retsize: 0;)
	return
	// succ:  maxpool_execute_ref_exit
maxpool_execute_ref_exit:


// maxpool_execute
// Return size: 0
define maxpool_execute
maxpool_execute_entry:
	r29 = fp
	// succ:  l00015760
l00015760:
	v4 = r29 - 8<i32>
	Mem0[v4:word32] = r30
	Mem0[v4 + 4<i32>:word32] = r31
	r30 = v4
	r29 = v4 - 136<i32>
	Mem0[r29 + 496<i32>:word64] = r17_r16
	r17_r16 = r0_r1
	// succ:  l00015760_thunk_fn00015768
l00015760_thunk_fn00015768:
	call fn00015768 (retsize: 0;)
	return
	// succ:  maxpool_execute_exit
maxpool_execute_exit:


// fn00015768
// Return size: 0
define fn00015768
fn00015768_entry:
	r29 = fp
	// succ:  l00015768
l00015768:
	Mem0[r29 + 112<i32>:word64] = r21_r20
	r3 = Mem0[r17 + 4<i32>:word32]
	r4 = Mem0[r17 + 8<i32>:word32]
	r21 = Mem0[r17 + 32<i32>:int8]
	Mem0[r29 + 96<i32>:word64] = r25_r24
	Mem0[r29 + 88<i32>:word64] = r27_r26
	r25 = Mem0[r3 + 16<i32>:word32]
	r5 = Mem0[r3:word32]
	p0 = r21 == 0<32>
	Mem0[r29 + 8<i32>:word32] = r2
	r2 = Mem0[r3 + 8<i32>:word32]
	r26 = Mem0[r3 + 12<i32>:word32]
	r0 = p0
	Mem0[r29 + 24<i32>:word32] = r2
	r2 = Mem0[r3 + 4<i32>:word32]
	Mem0[r29 + 120<i32>:word64] = r19_r18
	Mem0[r29 + 104<i32>:word64] = r23_r22
	Mem0[r29 + 12<i32>:word32] = r2
	r27 = Mem0[r4:word32]
	r2 = Mem0[r5 + 8<i32>:word32]
	r23 = Mem0[r5:word32]
	r24 = Mem0[r5 + 12<i32>:word32]
	r20 = Mem0[r5 + 4<i32>:word32]
	r22 = Mem0[r25 + 4<i32>:word32]
	r1 = Mem0[r25 + 8<i32>:word32]
	r6 = Mem0[r4 + 4<i32>:word32]
	r18 = Mem0[r26 + 4<i32>:word32]
	r7 = Mem0[r4 + 8<i32>:word32]
	Mem0[r29 + 20<i32>:word32] = r7
	Mem0[r29 + 16<i32>:word32] = r6
	Mem0[r29 + 28<i32>:word32] = r0
	branch p0 l000157C8_thunk_fn000157D4
	goto l000157C8_thunk_fn000157D0
	// succ:  l000157C8_thunk_fn000157D0 l000157C8_thunk_fn000157D4
l00015768:
	Mem0[r29 + 112<i32>:word64] = r21_r20
	r3 = Mem0[r17 + 4<i32>:word32]
	r4 = Mem0[r17 + 8<i32>:word32]
	r21 = Mem0[r17 + 32<i32>:int8]
	Mem0[r29 + 96<i32>:word64] = r25_r24
	Mem0[r29 + 88<i32>:word64] = r27_r26
	r25 = Mem0[r3 + 16<i32>:word32]
	r5 = Mem0[r3:word32]
	p0 = r21 == 0<32>
	Mem0[r29 + 8<i32>:word32] = r2
	r2 = Mem0[r3 + 8<i32>:word32]
	r26 = Mem0[r3 + 12<i32>:word32]
	r0 = p0
	Mem0[r29 + 24<i32>:word32] = r2
	r2 = Mem0[r3 + 4<i32>:word32]
	Mem0[r29 + 120<i32>:word64] = r19_r18
	Mem0[r29 + 104<i32>:word64] = r23_r22
	Mem0[r29 + 12<i32>:word32] = r2
	r27 = Mem0[r4:word32]
	r2 = Mem0[r5 + 8<i32>:word32]
	r23 = Mem0[r5:word32]
	r24 = Mem0[r5 + 12<i32>:word32]
	r20 = Mem0[r5 + 4<i32>:word32]
	r22 = Mem0[r25 + 4<i32>:word32]
	r1 = Mem0[r25 + 8<i32>:word32]
	r6 = Mem0[r4 + 4<i32>:word32]
	r18 = Mem0[r26 + 4<i32>:word32]
	r7 = Mem0[r4 + 8<i32>:word32]
	Mem0[r29 + 20<i32>:word32] = r7
	Mem0[r29 + 16<i32>:word32] = r6
	Mem0[r29 + 28<i32>:word32] = r0
	branch p0 l000157D4
	goto l000157C8_thunk_fn000157D0
	// succ:  l000157C8_thunk_fn000157D0 l000157C8_thunk_fn000157D4
l000157C8_thunk_fn000157D0:
	call fn000157D0 (retsize: 0;)
	return
	// succ:  fn00015768_exit
l000157C8_thunk_fn000157D0:
	call fn000157D0 (retsize: 0;)
	return
	// succ:  fn00015768_exit
l000157C8_thunk_fn000157D4:
	call fn000157D4 (retsize: 0;)
	return
	// succ:  fn00015768_exit
l000157C8_thunk_fn000157D4:
	call fn000157D4 (retsize: 0;)
	return
	// succ:  fn00015768_exit
fn00015768_exit:


// fn000157D0
// Return size: 0
define fn000157D0
fn000157D0_entry:
	r29 = fp
	// succ:  l000157D0
l000157D0:
	// succ:  l000157D0_thunk_fn000157D4
l000157D0_thunk_fn000157D4:
	call fn000157D4 (retsize: 0;)
	return
	// succ:  fn000157D0_exit
fn000157D0_exit:


// fn000157D4
// Return size: 0
define fn000157D4
fn000157D4_entry:
	r29 = fp
	// succ:  l000157D4
l000157D4:
	r3 = Mem0[r26 + 8<i32>:word32]
	r2 = r1 + r2
	branch p0 l000157F4
	// succ:  l000157E0 l000157F4
l000157E0:
	p0 = r13 == 4<32>
	r0 = r1 + 0<32>
	r19 = 0<32>
	branch p0 l00015800
	// succ:  l000157EC l00015800
l000157EC:
	p0 = r13 == 2<32>
	goto l000157FC
	// succ:  l000157FC
l000157F4:
	r0 = r2 - r3
	// succ:  l000157F8
l000157F8:
	call fn00009760 (retsize: 0;)
	// succ:  l000157FC
l000157FC:
	r19 = r0
	// succ:  l00015800
l00015800:
	r1 = r22 + 0<32>
	r2 = r22 + r20
	branch p0 l00015830
	// succ:  l0001580C l00015830
l0001580C:
	p0 = r13 == 4<32>
	r1_r0 = r22_r22
	branch p0 l00015828
	// succ:  l00015814 l00015828
l00015814:
	p0 = r13 == 2<32>
	r0 = Mem0[r29 + 28<i32>:word64]
	r21 = 0<32>
	r1_r0 = r22_r20
	branch p0 l00015840
	// succ:  l00015824 l00015840
l00015824:
	p0 = r0
	goto l00015834
	// succ:  l00015834
l00015828:
	goto l00015838
	// succ:  l00015838
l00015830:
	r0 = r2 - r18
	// succ:  l00015834
l00015834:
	call fn00009760 (retsize: 0;)
	// succ:  l00015838
l00015838:
	r21 = r0
	Mem0[r29 + 32<i32>:word32] = r17
	r3_r2 = 0<64>
	r5 = r29 + 0x38<32>
	r4 = r29 + 0x20<32>
	goto l00015848
	// succ:  l00015848
l00015840:
	Mem0[r29 + 32<i32>:word32] = r17
	r3_r2 = 0<64>
	r5 = r29 + 0x38<32>
	// succ:  l00015848
l00015848:
	Mem0[r4 + 4<i32>:word32] = 0xFFFFFF81<32>
	r22 = r5 + 8<32>
	r20 = r4 + 8<32>
	Mem0[r29 + 56<i32>:word64] = r3_r2
	Mem0[r29 + 64<i32>:word64] = r3_r2
	Mem0[r4 + 20<i32>:word32] = 0<32>
	Mem0[r29 + 72<i32>:word64] = r3_r2
	Mem0[r4 + 12<i32>:word32] = 0<32>
	Mem0[r4 + 16<i32>:word32] = 0<32>
	Mem0[r29 + 56<i32>:word32] = r17
	Mem0[r4 + 8<i32>:word32] = 0<32>
	call fn00009740 (retsize: 0;)
	call fn00009740 (retsize: 0;)
	r4 = badva + 0x3D<32>
	r1 = 0x137<32>
	Mem0[r29:word32] = r17
	call logmsg_function (retsize: 0;)
	branch r2 == 2<32> l000158B0
	// succ:  l00015898 l000158B0
l00015898:
	r2 = Mem0[r26:word32]
	branch r2 == 2<32> l000158B0
	// succ:  l000158A0 l000158B0
l000158A0:
	branch r2 == 2<32> l000158B0
	// succ:  l000158A8 l000158B0
l000158A8:
	branch r2 == 2<32> l000158CC
	// succ:  l000158B0 l000158CC
l000158B0:
	r1 = 0x13C<32>
	r3 = badva + 0x1F<32>
	r2 = r16
	call errlog_function (retsize: 0;)
	// succ:  l000158C0
l000158C0:
	r0 = 0xFFFFFFFF<32>
	goto l000159CC
	// succ:  l000159CC
l000158CC:
	r4 = Mem0[r27 + 20<i32>:word32]
	r1 = 0x13E<32>
	r2 = r2 * r19
	branch r3 >u r4 l000158F0
	// succ:  l000158E4 l000158F0
l000158E4:
	r3 = r2 * r21
	goto l000158C0
	// succ:  l000158C0
l000158F0:
	branch r2 == 0<32> l0001590C
	// succ:  l000158FC l0001590C
l000158FC:
	r2 = Mem0[r17 + 32<i32>:int8]
	goto l000158C0
	// succ:  l000158C0
l0001590C:
	Mem0[r27 + 4<i32>:word32] = r21
	Mem0[r27 + 12<i32>:word32] = r24
	Mem0[r27:word32] = r23
	r1_r0 = r18_r16
	Mem0[r27 + 24<i32>:word32] = r3
	Mem0[r27 + 8<i32>:word32] = r19
	call nn_os_work_for_vector (retsize: 0;)
	r0 = r16
	r1 = r29 + 0x38<32>
	call r18 (retsize: 0;)
	r0 = r20
	call fn000096A0 (retsize: 0;)
	r4 = Mem0[r29 + 16<i32>:word64]
	r5 = Mem0[r29 + 12<i32>:word64]
	r2 = Mem0[r5:word32]
	Mem0[r4 + 1<i32>:byte] = r3
	r3 = Mem0[r5 + 4<i32>:word32]
	r2 = Mem0[r5 + 8<i32>:word32]
	Mem0[r4 + 8<i32>:word32] = r2
	r7 = Mem0[r5 + 12<i32>:word32]
	Mem0[r4 + 12<i32>:word32] = r7
	r2 = Mem0[r5 + 24<i32>:word32]
	branch r2 >u r6 l00015978
	// succ:  l0001596C l00015978
l0001596C:
	r6 = Mem0[r4 + 20<i32>:word32]
	r1 = Mem0[r5 + 16<i32>:word32]
	r2 = Mem0[r5 + 24<i32>:word32]
	call fn00009560 (retsize: 0;)
	r5 = Mem0[r29 + 20<i32>:word64]
	r4 = Mem0[r29 + 24<i32>:word64]
	// succ:  l00015978
l00015978:
	r2 = Mem0[r4:word32]
	Mem0[r5 + 1<i32>:byte] = r3
	r3 = Mem0[r4 + 4<i32>:word32]
	r2 = Mem0[r4 + 8<i32>:word32]
	Mem0[r5 + 8<i32>:word32] = r2
	r7 = Mem0[r4 + 12<i32>:word32]
	Mem0[r5 + 12<i32>:word32] = r7
	r2 = Mem0[r4 + 24<i32>:word32]
	branch r2 >u r6 l000159B4
	// succ:  l000159A8 l000159B4
l000159A8:
	r6 = Mem0[r5 + 20<i32>:word32]
	r1 = Mem0[r4 + 16<i32>:word32]
	r2 = Mem0[r4 + 24<i32>:word32]
	call fn00009560 (retsize: 0;)
	r4 = badva + 0x13<32>
	goto l000159BC
	// succ:  l000159BC
l000159B4:
	r4 = badva + 0x13<32>
	// succ:  l000159BC
l000159BC:
	r1 = 0x14B<32>
	Mem0[r29:word32] = r17
	call logmsg_function (retsize: 0;)
	r0 = 0<32>
	// succ:  l000159CC
l000159CC:
	r19_r18 = Mem0[r29 + 120<i32>:word64]
	r17_r16 = Mem0[r29 + 128<i32>:word64]
	r23_r22 = Mem0[r29 + 104<i32>:word64]
	r21_r20 = Mem0[r29 + 112<i32>:word64]
	r27_r26 = Mem0[r29 + 88<i32>:word64]
	r25_r24 = Mem0[r29 + 96<i32>:word64]
	v31 = r30
	r31 = Mem0[v31 + 4<i32>:word32]
	r30 = Mem0[v31:word32]
	r29 = v31 + 8<i32>
	return
	// succ:  fn000157D4_exit
fn000157D4_exit:


// maxpool_execute_slice_ref
// Return size: 0
define maxpool_execute_slice_ref
maxpool_execute_slice_ref_entry:
	r29 = fp
	goto l000159E0
	// succ:  l000159E0
l00009730_in_maxpool_execute_slice_ref:
	r14 = badva + 0<32>
	r28 = Mem0[r14:word32]
	call r28 (retsize: 0;)
	return
	// succ:  maxpool_execute_slice_ref_exit
l000159E0:
	v4 = r29 - 8<i32>
	Mem0[v4:word32] = r30
	Mem0[v4 + 4<i32>:word32] = r31
	r30 = v4
	r29 = v4 - 152<i32>
	r3 = Mem0[r1 + 4<i32>:word32]
	r2 = Mem0[r1:word32]
	Mem0[r29 + 144<i32>:word64] = r17_r16
	Mem0[r29 + 136<i32>:word64] = r19_r18
	r18 = Mem0[r2 + 32<i32>:int8]
	r7 = Mem0[r2 + 4<i32>:word32]
	Mem0[r29 + 16<i32>:word32] = r3
	r2 = Mem0[r2 + 8<i32>:word32]
	r4 = Mem0[r7 + 16<i32>:word32]
	r16 = Mem0[r7:word32]
	p0 = r18 == 0<32>
	Mem0[r29 + 120<i32>:word64] = r23_r22
	r3 = Mem0[r7 + 12<i32>:word32]
	r5 = Mem0[r16 + 8<i32>:word32]
	Mem0[r29 + 128<i32>:word64] = r21_r20
	Mem0[r29 + 112<i32>:word64] = r25_r24
	Mem0[r29 + 104<i32>:word64] = r27_r26
	r21 = r5
	r0 = r5
	Mem0[r29:word32] = r1
	r22 = Mem0[r4 + 4<i32>:word32]
	r1 = p0
	r17 = Mem0[r4 + 8<i32>:word32]
	r19 = Mem0[r2:word32]
	r23 = Mem0[r16 + 4<i32>:word32]
	r24 = Mem0[r16 + 12<i32>:word32]
	r2 = r17 + r21
	r26 = Mem0[r3 + 8<i32>:word32]
	r25 = Mem0[r3 + 4<i32>:word32]
	Mem0[r29 + 3<i32>:byte] = r7
	r7 = Mem0[r16:word32]
	branch p0 l00015A64
	// succ:  l00015A4C l00015A64
l00015A4C:
	r0 = r2 - r26
	branch p0 l00015A64
	// succ:  l00015A54 l00015A64
l00015A54:
	p0 = r10 == 4<32>
	r0 = r17 + 0<32>
	r20 = 0<32>
	branch p0 l00015A70
	// succ:  l00015A60 l00015A70
l00015A60:
	p0 = r10 == 2<32>
	r0 = r0 + (r21 + 0xFFFFFFFF<32>)
	// succ:  l00015A64
l00015A64:
	r1 = r17
	call fn00009760 (retsize: 0;)
	r20 = r0
	// succ:  l00015A70
l00015A70:
	r1 = r22 + 0<32>
	r2 = r22 + r23
	branch p0 l00015AA8
	// succ:  l00015A7C l00015AA8
l00015A7C:
	p0 = r10 == 4<32>
	r1_r0 = r22_r22
	branch p0 l00015AA0
	// succ:  l00015A84 l00015AA0
l00015A84:
	p0 = r10 == 2<32>
	Mem0[r29 + 17<i32>:byte] = r2
	r0 = Mem0[r29 + 96<i32>:word32]
	r2 = 0<32>
	r1_r0 = r22_r23
	branch p0 l00015AB8
	// succ:  l00015A9C l00015AB8
l00015A9C:
	goto l00015AAC
	// succ:  l00015AAC
l00015AA0:
	goto l00015AB0
	// succ:  l00015AB0
l00015AA8:
	r0 = r2 - r25
	// succ:  l00015AAC
l00015AAC:
	call fn00009760 (retsize: 0;)
	// succ:  l00015AB0
l00015AB0:
	Mem0[r29 + 68<i32>:word32] = r0
	branch r2 > 0<32> l00015D30
	goto l00015AC4
	// succ:  l00015AC4 l00015D30
l00015AB8:
	branch r2 > 0<32> l00015D30
	// succ:  l00015AC4 l00015D30
l00015AC4:
	r2 = Mem0[r29 + 12<i32>:word32]
	r3 = r25 - r23
	r2 = Mem0[r29 + 68<i32>:word64]
	r6 = r20
	r4 = r26 - r21
	r5 = Mem0[r29 + 16<i32>:word64]
	r2 = r2
	r4 = 0xFFFFFFFF<32> - r21
	r6 = r4 + r6 * r17
	r3 = 0<32>
	r1 = r24 * r21
	r2 = r3 + r2 * r22
	Mem0[r29 + 52<i32>:word32] = r8
	r8 = 0xFFFFFFFF<32> - r23
	r6 = r6 + (r6 >>u 0x1F<32>)
	r7 = r5 * r22
	r15 = r6 >> 1<32>
	r2 = r2 + (r2 >>u 0x1F<32>)
	Mem0[r29 + 96<i32>:word32] = r4
	Mem0[r29 + 48<i32>:word32] = r3
	r4 = r21
	r3 = 0<32>
	r9 = Mem0[r19 + 16<i32>:word32]
	r2 = r2 >> 1<32>
	r5 = r21 * r24
	Mem0[r29 + 64<i32>:word32] = r1
	Mem0[r29 + 32<i32>:word32] = r8
	r8 = r26
	r1 = r7 - r2
	r12 = Mem0[r16 + 16<i32>:word32]
	r6 = r15 + (0x7F<32> - r26)
	Mem0[r29 + 92<i32>:word32] = r9
	Mem0[r29 + 72<i32>:word32] = r2
	r9 = 0<32>
	r2 = r2 + (0x7F<32> - r7)
	Mem0[r29 + 44<i32>:word32] = r23
	Mem0[r29 + 8<i32>:word32] = r1
	r2 = r2 - r25
	r1 = 0<32> - r15
	Mem0[r29 + 20<i32>:word32] = r9
	Mem0[r29 + 36<i32>:word32] = r25
	Mem0[r29 + 24<i32>:word32] = r1
	Mem0[r29 + 28<i32>:word32] = r6
	Mem0[r29 + 4<i32>:word32] = r2
	// succ:  l00015B58
l00015B58:
	r2 = Mem0[r29 + 16<i32>:word32]
	branch r2 > r6 l00015D10
	// succ:  l00015B68 l00015D10
l00015B68:
	r6 = Mem0[r29 + 68<i32>:word32]
	Mem0[r29 + 88<i32>:word32] = r6
	r1 = Mem0[r29 + 8<i32>:word64]
	r2 = SEQ(SLICE(r7, word16, 0), SLICE(r22, word16, 0))
	r13 = Mem0[r29 + 16<i32>:word32]
	r6 = Mem0[r29 + 68<i32>:word32]
	Mem0[r29 + 84<i32>:word32] = r1
	r9 = Mem0[r29 + 20<i32>:word32]
	r1_r0 = r7_r2
	Mem0[r29 + 10<i32>:byte] = r6
	r6 = r9 * r6
	Mem0[r29 + 56<i32>:word64] = r1_r0
	// succ:  l00015B94
l00015B94:
	r6 = Mem0[r29 + 84<i32>:word64]
	r2 = Mem0[r29 + 52<i32>:word64]
	r2 = Mem0[r29 + 88<i32>:word64]
	r22 = Mem0[r29 + 76<i32>:word64]
	r6 = r6 + r2
	// succ:  l00015BA0
l00015BA0:
	r7 = Mem0[r29 + 68<i32>:word32]
	r13 = Mem0[r29 + 80<i32>:word32]
	r2 = r2 - (r22 << 1<32>)
	Mem0[r29 + 88<i32>:word32] = r2
	Mem0[r29 + 84<i32>:word32] = r6
	p0 = r7 > r13
	branch p0 l00015D0C
	// succ:  l00015BB8 l00015D0C
l00015BB8:
	r2 = r13
	r1_r0 = Mem0[r29 + 56<i32>:word64]
	r7 = Mem0[r29 + 72<i32>:word64]
	r6 = r2 + 2<32>
	Mem0[r29 + 80<i32>:word32] = r6
	r6 = r6 * r22
	r7 = Mem0[r29 + 64<i32>:word32]
	r6 = r6 - r7
	r6 = r12 + r6 * r7
	r9 = Mem0[r29 + 40<i32>:word32]
	r13 = Mem0[r29 + 88<i32>:word32]
	branch p0 l00015B94
	// succ:  l00015BE8 l00015B94
l00015BE8:
	p0 = r28 > 1<32>
	r7 = Mem0[r29 + 84<i32>:word64]
	r6 = Mem0[r29 + 76<i32>:word64]
	r7 = Mem0[r29 + 32<i32>:word32]
	r2 = r2 + r9
	r0 = max<int32>(r7, r3)
	r6 = r2 * r6
	r2 = Mem0[r29 + 48<i32>:word32]
	r14 = Mem0[r29 + 72<i32>:word32]
	r19 = r2 * r20
	r7 = Mem0[r29 + 36<i32>:word64]
	r2 = r2 + r0
	r6 = r6 - r14
	r9 = max<int32>(r13, r7)
	r0 = Mem0[r29 + 44<i32>:word64]
	r6 = r6 + r7
	r16 = r4 * r2
	r25 = max<int32>(r6, r3)
	r1 = Mem0[r29 + 28<i32>:word64]
	r23 = Mem0[r29 + 24<i32>:word64]
	r9 = 0xFFFFFFFF<32> - r9
	r13 = 0<32>
	r2 = min<int32>(r0, r6)
	p0 = r24 > 0<32>
	r0 = r13 + r19
	branch p0 l00015CFC
	// succ:  l00015C40 l00015CFC
l00015C40:
	r7 = r13 * r17
	r10 = Mem0[r29 + 92<i32>:word32]
	r6 = Mem0[r29 + 96<i32>:word32]
	r21 = r24
	r14 = max<int32>(r23, r3)
	r18 = r16 + r14
	r7 = r7 - r15
	r6 = 0<32>
	r0 = r10 + r0 * r24
	r28 = max<int32>(r1, r6)
	r7 = r7 + r8
	r28 = 0xFFFFFFFF<32> - r28
	r21 = r12 + r21 * r18
	r10 = max<int32>(r7, r3)
	r11 = r28 - r14
	r14 = min<int32>(r4, r7)
	// succ:  l00015C7C
l00015C7C:
	p0 = r2 > r25
	r18 = 0<32>
	r28 = r9 - r25
	branch p0 l00015CE4
	// succ:  l00015C8C l00015CE4
l00015C8C:
	r7 = r21
	r18 = 0<32>
	__loop(1<i32>, 0x00015C94<p32>, r28)
	p0 = r14 > r10
	r22 = r18 & 0xFF<32>
	r26 = r11 + 0xFFFFFFFF<32>
	branch p0 l00015CD8
	// succ:  l00015CA4 l00015CD8
l00015CA4:
	r28 = Mem0[r7:byte]
	p1 = r11 >u 1<32>
	r27 = r7 + r24
	p0 = r28 >u r22
	__loop(0<i32>, 0x00015CBC<p32>, r26)
	branch p1 l00015CD4
	// succ:  l00015CBC l00015CD4
l00015CBC:
	r28 = Mem0[r27:byte]
	r27 = r27 + r24
	r18 = r28 + 0<32>
	r22 = r18 & 0xFF<32>
	p0 = r28 >u r22
	// succ:  l00015CD4
l00015CD4:
	r18 = r28 + 0<32>
	// succ:  l00015CD8
l00015CD8:
	r7 = r7 + r5
	// succ:  l00015CE4
l00015CE4:
	Mem0[r0:byte] = r18
	r0 = r0 + 1<i32>
	r21 = r21 + 1<32>
	r6 = r6 + 1<32>
	p0 = r6 == r24
	branch p0 l00015C7C
	// succ:  l00015CF8 l00015C7C
l00015CF8:
	branch r13 == r20 l00015BA0
	goto l00015D0C
	// succ:  l00015D0C l00015BA0
l00015CFC:
	branch r13 == r20 l00015BA0
	// succ:  l00015D0C l00015BA0
l00015D0C:
	r13 = r13 + 1<32>
	r1 = r1 - r17
	r23 = r23 + r17
	r1 = Mem0[r29 + 12<i32>:word64]
	r7 = Mem0[r29 + 20<i32>:word64]
	// succ:  l00015D10
l00015D10:
	r6 = Mem0[r29 + 48<i32>:word64]
	r2 = Mem0[r29 + 44<i32>:word64]
	r7 = r7 + 1<32>
	Mem0[r29 + 20<i32>:word32] = r7
	r6 = r6 + r2
	p0 = r7 == r1
	Mem0[r29 + 48<i32>:word32] = r6
	branch p0 l00015B58
	// succ:  l00015D28 l00015B58
l00015D28:
	r17_r16 = Mem0[r29 + 144<i32>:word64]
	r2 = Mem0[r29:word64]
	r1 = 1<32>
	// succ:  l00015D30
l00015D30:
	r21_r20 = Mem0[r29 + 128<i32>:word64]
	r19_r18 = Mem0[r29 + 136<i32>:word64]
	r0 = r2 + 8<32>
	r25_r24 = Mem0[r29 + 112<i32>:word64]
	r23_r22 = Mem0[r29 + 120<i32>:word64]
	v48 = r30
	r31 = Mem0[v48 + 4<i32>:word32]
	r30 = Mem0[v48:word32]
	r29 = v48 + 8<i32>
	r27_r26 = Mem0[r29 + 104<i32>:word64]
	goto l00009730_in_maxpool_execute_slice_ref
	// succ:  l00009730_in_maxpool_execute_slice_ref
maxpool_execute_slice_ref_exit:


// logmsg_function
// Return size: 0
define logmsg_function
logmsg_function_entry:
	r29 = fp
	// succ:  l00015D4C
l00015D4C:
	v4 = r29 - 8<i32>
	Mem0[v4:word32] = r30
	Mem0[v4 + 4<i32>:word32] = r31
	r30 = v4
	r29 = v4 - 8<i32>
	branch r3 >u r5 l00015D50_thunk_errlog_function
	goto l00015D5C
	// succ:  l00015D5C l00015D50_thunk_errlog_function
l00015D50_thunk_errlog_function:
	call errlog_function (retsize: 0;)
	return
	// succ:  logmsg_function_exit
l00015D5C:
	r5 = Mem0[r2 + 16<i32>:word32]
	r6 = r29 + 0x10<32>
	r5 = r29 + 0x10<32>
	r0 = badva + 0x3C<32>
	Mem0[r29 + 4<i32>:word32] = r6
	call logv (retsize: 0;)
	v13 = r30
	r31 = Mem0[v13 + 4<i32>:word32]
	r30 = Mem0[v13:word32]
	r29 = v13 + 8<i32>
	return
	// succ:  logmsg_function_exit
logmsg_function_exit:


// errlog_function
// Return size: 0
define errlog_function
errlog_function_entry:
	r29 = fp
	// succ:  l00015D70
l00015D70:
	v4 = r29 - 8<i32>
	Mem0[v4:word32] = r30
	Mem0[v4 + 4<i32>:word32] = r31
	r30 = v4
	r29 = v4 - 8<i32>
	r4 = r3
	r0 = badva + 0x24<32>
	Mem0[r29 + 1<i32>:byte] = r6
	r6 = r29 + 0x10<32>
	r5 = r29 + 0x10<32>
	r3 = 0<32>
	v13 = r30
	r31 = Mem0[v13 + 4<i32>:word32]
	r30 = Mem0[v13:word32]
	r29 = v13 + 8<i32>
	return
	// succ:  errlog_function_exit
errlog_function_exit:


// maxpool_execute_slice_asm
// Return size: 0
define maxpool_execute_slice_asm
maxpool_execute_slice_asm_entry:
	r29 = fp
	goto l00015D94
	// succ:  l00015D94
l00009730_in_maxpool_execute_slice_asm:
	r14 = badva + 0<32>
	r28 = Mem0[r14:word32]
	call r28 (retsize: 0;)
	return
	// succ:  maxpool_execute_slice_asm_exit
l00015D94:
	v4 = r29 - 8<i32>
	Mem0[v4:word32] = r30
	Mem0[v4 + 4<i32>:word32] = r31
	r30 = v4
	r29 = v4 - 136<i32>
	r3 = Mem0[r1 + 4<i32>:word32]
	r2 = Mem0[r1:word32]
	Mem0[r29 + 96<i32>:word64] = r25_r24
	Mem0[r29 + 120<i32>:word64] = r19_r18
	r19 = Mem0[r2 + 32<i32>:int8]
	r7 = Mem0[r2 + 4<i32>:word32]
	Mem0[r29 + 20<i32>:word32] = r3
	r2 = Mem0[r2 + 8<i32>:word32]
	r4 = Mem0[r7 + 16<i32>:word32]
	r24 = Mem0[r7:word32]
	p0 = r19 == 0<32>
	Mem0[r29 + 128<i32>:word64] = r17_r16
	r3 = Mem0[r7 + 12<i32>:word32]
	r17 = Mem0[r24 + 8<i32>:word32]
	Mem0[r29 + 88<i32>:word64] = r27_r26
	Mem0[r29 + 112<i32>:word64] = r21_r20
	r2 = Mem0[r4 + 4<i32>:word32]
	r16 = Mem0[r2:word32]
	r0 = r17
	r20 = Mem0[r24 + 12<i32>:word32]
	r18 = Mem0[r4 + 8<i32>:word32]
	r27 = Mem0[r3 + 8<i32>:word32]
	r21 = Mem0[r24 + 4<i32>:word32]
	Mem0[r29 + 4<i32>:word32] = r1
	r7 = Mem0[r24:word32]
	r1 = p0
	Mem0[r29 + 72<i32>:word32] = r2
	r2 = Mem0[r3 + 4<i32>:word32]
	Mem0[r29 + 16<i32>:word32] = r7
	Mem0[r29 + 104<i32>:word64] = r23_r22
	Mem0[r29 + 80<i32>:word32] = r1
	Mem0[r29 + 40<i32>:word32] = r2
	r2 = r18 + r17
	branch p0 l00015E18
	// succ:  l00015E04 l00015E18
l00015E04:
	r0 = r2 - r27
	branch p0 l00015E18
	// succ:  l00015E0C l00015E18
l00015E0C:
	p0 = r11 == 4<32>
	r0 = r18
	r22 = 0<32>
	branch p0 l00015E24
	// succ:  l00015E14 l00015E24
l00015E14:
	p0 = r11 == 2<32>
	r0 = r0 + (r17 + 0xFFFFFFFF<32>)
	// succ:  l00015E18
l00015E18:
	r1 = r18
	call fn00009760 (retsize: 0;)
	r22 = r0
	// succ:  l00015E24
l00015E24:
	branch p0 l00015E54
	// succ:  l00015E2C l00015E54
l00015E2C:
	p0 = r11 == 4<32>
	r1 = Mem0[r29 + 72<i32>:word32]
	branch p0 l00015E48
	// succ:  l00015E34 l00015E48
l00015E34:
	p0 = r11 == 2<32>
	r1 = Mem0[r29 + 80<i32>:word64]
	r0 = 0<32>
	branch p0 l00015E68
	// succ:  l00015E40 l00015E68
l00015E40:
	p0 = r1
	r1 = Mem0[r29 + 72<i32>:word32]
	goto l00015E60
	// succ:  l00015E60
l00015E48:
	r0 = r1
	goto l00015E64
	// succ:  l00015E64
l00015E54:
	r3 = Mem0[r29 + 40<i32>:word64]
	r1 = Mem0[r29 + 72<i32>:word64]
	r2 = r1 + r21
	r0 = r2 - r3
	// succ:  l00015E60
l00015E60:
	call fn00009760 (retsize: 0;)
	// succ:  l00015E64
l00015E64:
	branch r2 > 1<32> l00016018
	goto l00015E78
	// succ:  l00015E78 l00016018
l00015E68:
	branch r2 > 1<32> l00016018
	// succ:  l00015E78 l00016018
l00015E78:
	r2 = Mem0[r29 + 16<i32>:word32]
	r3 = r27 - r17
	r4 = r0 + 0xFFFFFFFF<32>
	r1 = Mem0[r29 + 72<i32>:word64]
	r5 = Mem0[r29 + 40<i32>:word64]
	r2 = r22 + 0xFFFFFFFF<32>
	r26 = r20 & 0x7F<32>
	r5 = r5 - r21
	r7 = r20 * r17
	r2 = r3 + r2 * r18
	r3 = Mem0[r16 + 16<i32>:word32]
	r8 = 0<32>
	r5 = r0 * r22
	r4 = r5 + r4 * r1
	Mem0[r29 + 11<i32>:byte] = r1
	r23 = Mem0[r24 + 16<i32>:word32]
	r1 = r6 << 1<32>
	r2 = r2 + (r2 >>u 0x1F<32>)
	Mem0[r29 + 36<i32>:word32] = r21
	r1 = Mem0[r29 + 20<i32>:word64]
	r2 = r2 >> 1<32>
	Mem0[r29 + 3<i32>:byte] = r5
	r2 = 0<32> - r2
	r6 = r3 + r6 * r1
	r5 = r5 * r20
	Mem0[r29 + 56<i32>:word32] = r7
	Mem0[r29 + 68<i32>:word32] = r22
	Mem0[r29 + 8<i32>:word32] = r5
	Mem0[r29 + 60<i32>:word32] = r0
	r3 = r4 >> 1<32>
	Mem0[r29 + 28<i32>:word32] = r6
	Mem0[r29 + 24<i32>:word32] = r8
	Mem0[r29 + 32<i32>:word32] = r2
	Mem0[r29 + 64<i32>:word32] = r3
	// succ:  l00015EE8
l00015EE8:
	r2 = Mem0[r29 + 20<i32>:word32]
	branch r2 > r3 l00015FF4
	// succ:  l00015EF8 l00015FF4
l00015EF8:
	r3 = Mem0[r29 + 60<i32>:word32]
	r5 = Mem0[r29 + 8<i32>:word64]
	r7 = Mem0[r29 + 24<i32>:word64]
	r2 = SEQ(SLICE(r3, word16, 0), SLICE(r2, word16, 0))
	Mem0[r29 + 20<i32>:byte] = r4
	r4 = Mem0[r29 + 28<i32>:word32]
	r1_r0 = r3_r2
	r19 = r5 * r7
	goto l00015F30
	// succ:  l00015F30
l00015F1C:
	r3 = Mem0[r29 + 80<i32>:word64]
	r2 = Mem0[r29 + 44<i32>:word64]
	p0 = r7 > r6
	// succ:  l00015F24
l00015F24:
	r3 = r3 + r2
	Mem0[r29 + 80<i32>:word32] = r3
	branch p0 l00015FF0
	// succ:  l00015F30 l00015FF0
l00015F30:
	r2 = r6
	r7 = Mem0[r29 + 64<i32>:word64]
	r3 = Mem0[r29 + 72<i32>:word64]
	r4 = r2 + 2<32>
	Mem0[r29 + 76<i32>:word32] = r4
	r1_r0 = Mem0[r29 + 48<i32>:word64]
	r3 = r4 * r3
	r4 = Mem0[r29 + 56<i32>:word32]
	r3 = r3 - r7
	r3 = r23 + r3 * r4
	branch r3 > 1<32> l00015F1C
	// succ:  l00015F60 l00015F1C
l00015F60:
	r3 = Mem0[r29 + 68<i32>:word32]
	r16 = Mem0[r29 + 68<i32>:word64]
	r4 = Mem0[r29 + 40<i32>:word64]
	r22 = Mem0[r29 + 32<i32>:word32]
	r24 = Mem0[r29 + 80<i32>:word32]
	r3 = 0<32>
	r2 = r2 * r3
	r7 = Mem0[r29 + 36<i32>:word32]
	r2 = r2 - r7
	r2 = r2 + r4
	r3 = max<int32>(r2, r3)
	r21 = r3 * r17
	r2 = min<int32>(r7, r2)
	r25 = r2 - r3
	r1 = r23
	r2 = 0<32>
	p0 = r26 == 0<32>
	r3 = r27 + r22
	r0 = r24 + 0<32>
	r3 = min<int32>(r17, r3)
	r2 = max<int32>(r22, r2)
	r0 = r24 + 0<32>
	r2 = r20 + 0<32>
	r3 = r3 - r2
	r4 = r2 + r21
	r2 = r20 + 0<32>
	r5_r4 = r17_r25
	r7 = r4 * r20
	r5_r4 = r17_r25
	branch p0 l00015FDC
	// succ:  l00015FD0 l00015FDC
l00015FD0:
	r1 = r1 + (r7 + r19)
	call maxpool_aligned_hvx (retsize: 0;)
	// succ:  l00015FDC
l00015FDC:
	branch r16 == 1<32> l00015F24
	// succ:  l00015FF0 l00015F24
l00015FF0:
	r16 = r16 + 0xFFFFFFFF<32>
	r22 = r22 + r18
	r24 = r24 + r20
	r7 = Mem0[r29 + 16<i32>:word64]
	r3 = Mem0[r29 + 24<i32>:word64]
	// succ:  l00015FF4
l00015FF4:
	r4 = Mem0[r29 + 12<i32>:word64]
	r2 = Mem0[r29 + 28<i32>:word64]
	r3 = r3 + 1<32>
	Mem0[r29 + 24<i32>:word32] = r3
	r2 = r2 + r4
	p0 = r3 == r7
	Mem0[r29 + 28<i32>:word32] = r2
	branch p0 l00015EE8
	// succ:  l0001600C l00015EE8
l0001600C:
	r17_r16 = Mem0[r29 + 128<i32>:word64]
	r2 = Mem0[r29 + 4<i32>:word64]
	r1 = 1<32>
	r21_r20 = Mem0[r29 + 112<i32>:word64]
	r19_r18 = Mem0[r29 + 120<i32>:word64]
	r0 = r2 + 8<32>
	goto l0001601C
	// succ:  l0001601C
l00016018:
	r21_r20 = Mem0[r29 + 112<i32>:word64]
	r19_r18 = Mem0[r29 + 120<i32>:word64]
	// succ:  l0001601C
l0001601C:
	r25_r24 = Mem0[r29 + 96<i32>:word64]
	r23_r22 = Mem0[r29 + 104<i32>:word64]
	v41 = r30
	r31 = Mem0[v41 + 4<i32>:word32]
	r30 = Mem0[v41:word32]
	r29 = v41 + 8<i32>
	r27_r26 = Mem0[r29 + 88<i32>:word64]
	goto l00009730_in_maxpool_execute_slice_asm
	// succ:  l00009730_in_maxpool_execute_slice_asm
maxpool_execute_slice_asm_exit:


// min_execute
// Return size: 0
define min_execute
min_execute_entry:
	r29 = fp
	// succ:  l00016040
l00016040:
	r3 = 0x7F800000<32>
	r2 = badva + 0x10<32>
	r2 = Mem0[r2 - 144<i32>:word32]
	// succ:  l00016050_thunk_nn_reduction_float
l00016050_thunk_nn_reduction_float:
	call nn_reduction_float (retsize: 0;)
	return
	// succ:  min_execute_exit
min_execute_exit:


// minmax_check
// Return size: 0
define minmax_check
minmax_check_entry:
	r29 = fp
	// succ:  l00016060
l00016060:
	v4 = r29 - 8<i32>
	Mem0[v4:word32] = r30
	Mem0[v4 + 4<i32>:word32] = r31
	r30 = v4
	r29 = v4 - 16<i32>
	Mem0[r29 + 496<i32>:word64] = r17_r16
	r4 = badva + 0x2A<32>
	r17 = r0
	r16 = r1
	r1 = 0x75<32>
	Mem0[r29:word32] = r17
	r2 = r16
	r0 = badva + 0x3A<32>
	call logmsg_function (retsize: 0;)
	r1 = 0x76<32>
	r3 = badva + 0x1F<32>
	branch r2 == 0<32> l00016100
	// succ:  l0001609C l00016100
l0001609C:
	r2 = Mem0[r17 + 4<i32>:word32]
	r1 = 0x77<32>
	r3 = badva + 0x17<32>
	branch r4 == 0<32> l00016100
	// succ:  l000160B0 l00016100
l000160B0:
	r4 = Mem0[r17 + 8<i32>:word32]
	r1 = 0x78<32>
	r3 = badva + 0x10<32>
	branch r2 == 0<32> l00016100
	// succ:  l000160C4 l00016100
l000160C4:
	r2 = Mem0[r2:word32]
	r1 = 0x79<32>
	r3 = badva + 9<32>
	branch r2 == 0<32> l00016100
	// succ:  l000160D8 l00016100
l000160D8:
	r2 = Mem0[r4:word32]
	r1 = 0x7A<32>
	r3 = badva + 3<32>
	branch r2 >u 6<32> l00016100
	// succ:  l000160EC l00016100
l000160EC:
	r2 = Mem0[r17 + 16<i32>:word32]
	r1 = 0x7B<32>
	r3 = badva + 0x2F<32>
	branch r2 == 2<32> l00016118
	// succ:  l00016100 l00016118
l00016100:
	r2 = Mem0[r17 + 20<i32>:word32]
	r2 = r16
	call fn00016568 (retsize: 0;)
	r0 = badva + 0x32<32>
	r17_r16 = Mem0[r29 + 8<i32>:word64]
	r0 = -1<i32>
	v16 = r30
	r31 = Mem0[v16 + 4<i32>:word32]
	r30 = Mem0[v16:word32]
	r29 = v16 + 8<i32>
	return
	// succ:  minmax_check_exit
l00016118:
	r2 = r16
	r1 = 0x7C<32>
	r0 = badva + 0x1A<32>
	Mem0[r29:word32] = r17
	call fn00016540 (retsize: 0;)
	r4 = badva + 2<32>
	r0 = 0<32>
	v17 = r30
	r31 = Mem0[v17 + 4<i32>:word32]
	r30 = Mem0[v17:word32]
	r29 = v17 + 8<i32>
	return
	// succ:  minmax_check_exit
minmax_check_exit:


// max_execute
// Return size: 0
define max_execute
max_execute_entry:
	r29 = fp
	// succ:  l00016140
l00016140:
	r3 = 0xFF800000<32>
	r2 = badva + 0x10<32>
	r2 = Mem0[r2 - 128<i32>:word32]
	// succ:  l00016150_thunk_nn_reduction_float
l00016150_thunk_nn_reduction_float:
	call nn_reduction_float (retsize: 0;)
	return
	// succ:  max_execute_exit
max_execute_exit:


// minimum_execute
// Return size: 0
define minimum_execute
minimum_execute_entry:
	r29 = fp
	// succ:  l00016160
l00016160:
	r2 = badva + 0x30<32>
	r2 = Mem0[r2 - 144<i32>:word32]
	// succ:  l00016168_thunk_broadcast_elementwise_execute_f
l00016168_thunk_broadcast_elementwise_execute_f:
	call broadcast_elementwise_execute_f (retsize: 0;)
	return
	// succ:  minimum_execute_exit
minimum_execute_exit:


// maximum_execute
// Return size: 0
define maximum_execute
maximum_execute_entry:
	r29 = fp
	// succ:  l00016174
l00016174:
	r2 = badva + 0x1C<32>
	r2 = Mem0[r2 - 128<i32>:word32]
	// succ:  l0001617C_thunk_broadcast_elementwise_execute_f
l0001617C_thunk_broadcast_elementwise_execute_f:
	call broadcast_elementwise_execute_f (retsize: 0;)
	return
	// succ:  maximum_execute_exit
maximum_execute_exit:


// broadcast_elementwise_execute_f
// Return size: 0
define broadcast_elementwise_execute_f
broadcast_elementwise_execute_f_entry:
	r29 = fp
	// succ:  l00016188
l00016188:
	v4 = r29 - 8<i32>
	Mem0[v4:word32] = r30
	Mem0[v4 + 4<i32>:word32] = r31
	r30 = v4
	r29 = v4 - 168<i32>
	Mem0[r29 - 48<i32>:word64] = r25_r24
	r25_r24 = r1_r0
	Mem0[r29 + 136<i32>:word64] = r23_r22
	r3 = Mem0[r24 + 4<i32>:word32]
	Mem0[r29 + 152<i32>:word64] = r19_r18
	r18 = r2
	r2 = 0<32>
	Mem0[r29 + 144<i32>:word64] = r21_r20
	Mem0[r29 + 160<i32>:word64] = r17_r16
	r23 = Mem0[r3:word32]
	r4 = Mem0[r24 + 8<i32>:word32]
	r19 = Mem0[r3 + 4<i32>:word32]
	Mem0[r29 + 120<i32>:word64] = r27_r26
	r12 = Mem0[r23 + 4<i32>:word32]
	r7 = Mem0[r19:word32]
	r0 = Mem0[r23:word32]
	p0 = r12 == 1<32>
	r21 = Mem0[r23 + 8<i32>:word32]
	r5 = Mem0[r19 + 4<i32>:word32]
	p1 = r0 == 1<32>
	Mem0[r29 + 104<i32>:word32] = r5
	r9 = Mem0[r19 + 8<i32>:word32]
	p2 = r21 == 1<32>
	r6 = p0 ? r5 : r12
	r8 = Mem0[r23 + 12<i32>:word32]
	r5 = p1 ? r7 : r0
	r10 = p1
	Mem0[r29 + 72<i32>:word32] = r7
	r0 = Mem0[r19 + 12<i32>:word32]
	p1 = r8 == 1<32>
	r3 = r5 * r6
	r17 = Mem0[r4:word32]
	r7 = p2 ? r9 : r21
	Mem0[r29 + 60<i32>:word32] = r12
	Mem0[r29 + 100<i32>:word32] = r10
	r10 = p2
	r3 = r3 * r7
	Mem0[r29 + 88<i32>:word32] = r6
	Mem0[r29 + 68<i32>:word32] = r5
	r16 = p1 ? r0 : r8
	Mem0[r29 + 108<i32>:word32] = r10
	Mem0[r29 + 64<i32>:word32] = r9
	r3 = r3 * r16
	Mem0[r29 + 92<i32>:word32] = r0
	Mem0[r29 + 112<i32>:word32] = r7
	Mem0[r29 + 84<i32>:word32] = r2
	r22 = r3 << 2<32>
	branch p0 l00016238
	// succ:  l00016230 l00016238
l00016230:
	r2 = r8 * r21
	Mem0[r29 + 84<i32>:word32] = r2
	// succ:  l00016238
l00016238:
	r2 = r25
	r1 = 0xBC<32>
	r0 = badva + 0x11<32>
	Mem0[r29 + 96<i32>:word32] = r8
	r27 = Mem0[r17 + 16<i32>:word32]
	r4 = badva + 0x20<32>
	r26 = Mem0[r23 + 16<i32>:word32]
	r20 = Mem0[r19 + 16<i32>:word32]
	Mem0[r29:word32] = r24
	call logmsg_function (retsize: 0;)
	branch r22 >u r2 l0001629C
	// succ:  l00016278 l0001629C
l00016278:
	r2 = Mem0[r17 + 20<i32>:word32]
	r1 = 0xBC<32>
	r2 = r25
	r0 = badva + 0x15<32>
	r3 = badva + 6<32>
	// succ:  l00016288
l00016288:
	call errlog_function (retsize: 0;)
	r0 = 0xFFFFFFFF<32>
	goto l00016524
	// succ:  l00016524
l0001629C:
	r7 = Mem0[r23 + 8<i32>:word32]
	r8 = Mem0[r23 + 12<i32>:word32]
	r12 = Mem0[r19 + 12<i32>:word32]
	r6 = Mem0[r23 + 4<i32>:word32]
	r3 = Mem0[r19 + 4<i32>:word32]
	r9 = Mem0[r19 + 8<i32>:word32]
	Mem0[r29 + 76<i32>:word32] = r26
	Mem0[r29 + 56<i32>:word32] = r22
	Mem0[r29 + 80<i32>:word32] = r20
	branch p0 l000162CC
	// succ:  l000162C4 l000162CC
l000162C4:
	branch p0 l000162CC
	// succ:  l000162C8 l000162CC
l000162C8:
	p0 = r5 == 2<32>
	branch p0 l00016308
	// succ:  l000162CC l00016308
l000162CC:
	p0 = r2 == 2<32>
	branch p0 l000162DC
	// succ:  l000162D4 l000162DC
l000162D4:
	p0 = r6 == -1<i32>
	branch p0 l000162DC
	// succ:  l000162D8 l000162DC
l000162D8:
	p0 = r6 == 2<32>
	branch p0 l00016308
	// succ:  l000162DC l00016308
l000162DC:
	p0 = r3 == 2<32>
	p0 = r7 == r9
	branch p0 l000162F0
	// succ:  l000162E4 l000162F0
l000162E4:
	branch p0 l000162F0
	// succ:  l000162E8 l000162F0
l000162E8:
	p0 = r7 == 2<32>
	p0 = r9 == 1<32>
	branch p0 l00016308
	// succ:  l000162F0 l00016308
l000162F0:
	p0 = r8 == r12
	branch p0 l0001633C
	// succ:  l000162F8 l0001633C
l000162F8:
	p0 = r8 == 1<32>
	branch p0 l0001633C
	// succ:  l00016300 l0001633C
l00016300:
	p0 = r12 == 1<32>
	branch p0 l0001633C
	// succ:  l00016308 l0001633C
l00016308:
	Mem0[r29 + 28<i32>:word32] = r12
	r1 = 0xBC<32>
	r0 = badva + 1<32>
	Mem0[r29 + 12<i32>:word32] = r8
	Mem0[r29 + 24<i32>:word32] = r9
	Mem0[r29 + 8<i32>:word32] = r7
	Mem0[r29 + 20<i32>:word32] = r3
	r3 = badva + 0x34<32>
	Mem0[r29 + 4<i32>:word32] = r6
	Mem0[r29 + 16<i32>:word32] = r2
	r2 = r25
	Mem0[r29:word32] = r5
	goto l00016288
	// succ:  l00016288
l0001633C:
	Mem0[r29 + 44<i32>:word32] = r16
	r23 = Mem0[r29 + 112<i32>:word64]
	r0 = badva + 0xD<32>
	r19 = Mem0[r29 + 68<i32>:word32]
	r1 = 0xBC<32>
	r4 = badva + 0x3C<32>
	Mem0[r29 + 40<i32>:word32] = r23
	r20 = Mem0[r29 + 88<i32>:word64]
	Mem0[r29 + 32<i32>:word32] = r19
	Mem0[r29 + 36<i32>:word32] = r20
	Mem0[r29 + 28<i32>:word32] = r12
	Mem0[r29 + 52<i32>:word32] = r24
	Mem0[r29 + 24<i32>:word32] = r9
	Mem0[r29 + 48<i32>:word32] = r25
	Mem0[r29 + 8<i32>:word32] = r7
	Mem0[r29 + 20<i32>:word32] = r3
	Mem0[r29 + 4<i32>:word32] = r6
	Mem0[r29 + 16<i32>:word32] = r2
	r2 = r25
	Mem0[r29:word32] = r5
	Mem0[r29 + 12<i32>:word32] = r8
	call logmsg_function (retsize: 0;)
	r4 = Mem0[r29 + 80<i32>:word32]
	p0 = r19 > 0<32>
	r2 = Mem0[r29 + 56<i32>:word64]
	r5 = Mem0[r29 + 76<i32>:word64]
	Mem0[r17:word32] = r19
	Mem0[r17 + 24<i32>:word32] = r2
	Mem0[r17 + 8<i32>:word32] = r23
	Mem0[r17 + 4<i32>:word32] = r20
	Mem0[r17 + 12<i32>:word32] = r16
	branch p0 l000164FC
	// succ:  l000163A4 l000164FC
l000163A4:
	r9 = Mem0[r29 + 64<i32>:word32]
	r2 = Mem0[r29 + 60<i32>:word32]
	r1 = 0<32>
	r0 = Mem0[r29 + 108<i32>:word64]
	r6 = Mem0[r29 + 104<i32>:word64]
	p0 = r9 == 1<32>
	r2 = r21 * r2
	r8 = Mem0[r29 + 92<i32>:word32]
	r7 = Mem0[r29 + 72<i32>:word32]
	r3 = r9 * r6
	p2 = r0
	r9 = r8 * r9
	r0 = Mem0[r29 + 100<i32>:word32]
	Mem0[r29 + 64<i32>:word32] = r1
	r7 = Mem0[r29 + 96<i32>:word64]
	p1 = r7 == 1<32>
	r3 = r3 * r8
	r25 = !(r7 == 1<32>)
	r6 = 0<32>
	p2 = r6 == 1<32>
	r12 = r7 == 0<32>
	r9 = r6 + 0<32>
	r26 = !(r8 == 1<32>)
	p0 = r0
	r2 = r2 * r7
	Mem0[r29 + 72<i32>:word32] = r9
	Mem0[r29 + 108<i32>:word32] = r12
	r2 = r6 + 0<32>
	r3 = r6 + 0<32>
	Mem0[r29 + 60<i32>:word32] = r2
	Mem0[r29 + 104<i32>:word32] = r13
	Mem0[r29 + 56<i32>:word32] = r3
	// succ:  l00016420
l00016420:
	r3 = r4
	Mem0[r29 + 76<i32>:word32] = r5
	r2 = Mem0[r29 + 88<i32>:word64]
	Mem0[r29 + 80<i32>:word32] = r4
	p0 = r2 > 0<32>
	branch p0 l000164DC
	// succ:  l00016438 l000164DC
l00016438:
	branch r2 > 0<32> l00016450
l0001643C:
	branch r2 > 0<32> l00016450
	// succ:  l00016444 l00016450
l00016444:
	r2 = Mem0[r29 + 112<i32>:word32]
	Mem0[r29 + 100<i32>:word32] = r3
	goto l000164BC
	// succ:  l000164BC
l00016450:
	r21 = r6
	r23 = 0<32>
	Mem0[r29 + 96<i32>:word32] = r6
	Mem0[r29 + 92<i32>:word32] = r7
	Mem0[r29 + 100<i32>:word32] = r3
	r22 = r16
	r17 = r19
	r24 = r27
	r20 = r21
	// succ:  l00016464
l00016464:
	branch p0 l000164A4
	// succ:  l0001646C l000164A4
l0001646C:
	p0 = r8 > 0<32>
	// succ:  l00016480
l00016480:
	r1 = Mem0[r17:word32]
	r0 = Mem0[r20:word32]
	call r18 (retsize: 0;)
	r22 = r22 + 0xFFFFFFFF<32>
	Mem0[r24:word32] = r0
	r24 = r24 + 4<32>
	r17 = r17 + (r26 << 2<32>)
	r20 = r20 + (r25 << 2<32>)
	branch p0 l00016480
	// succ:  l000164A0 l00016480
l000164A0:
	p0 = r30 == 1<32>
	r27 = r27 + (r16 << 2<32>)
	// succ:  l000164A4
l000164A4:
	r7 = Mem0[r29 + 104<i32>:word64]
	r2 = Mem0[r29 + 108<i32>:word64]
	r23 = r23 + 1<32>
	r21 = r21 + (r2 << 2<32>)
	branch r2 == r23 l00016464
	goto l000164C0
	// succ:  l000164C0 l00016464
l000164BC:
	r6 = Mem0[r29 + 96<i32>:word64]
	r2 = Mem0[r29 + 84<i32>:word64]
	r3 = Mem0[r29 + 100<i32>:word64]
	r5 = Mem0[r29 + 72<i32>:word64]
	r2 = Mem0[r29 + 88<i32>:word64]
	r7 = Mem0[r29 + 92<i32>:word64]
	r6 = r6 + (r2 << 2<32>)
	r5 = Mem0[r29 + 76<i32>:word64]
	r4 = Mem0[r29 + 80<i32>:word64]
	r3 = r3 + (r5 << 2<32>)
	branch r7 == r2 l0001643C
	goto l000164E0
	// succ:  l000164E0 l0001643C
l000164C0:
	r2 = Mem0[r29 + 112<i32>:word32]
	r19 = r19 + (r7 << 2<32>)
	r3 = Mem0[r29 + 100<i32>:word64]
	r5 = Mem0[r29 + 72<i32>:word64]
	r2 = Mem0[r29 + 88<i32>:word64]
	r7 = Mem0[r29 + 92<i32>:word64]
	r6 = r6 + (r2 << 2<32>)
	r5 = Mem0[r29 + 76<i32>:word64]
	r4 = Mem0[r29 + 80<i32>:word64]
	r3 = r3 + (r5 << 2<32>)
	branch r7 == r2 l0001643C
	goto l000164E0
	// succ:  l000164E0 l0001643C
l000164DC:
	r7 = Mem0[r29 + 56<i32>:word64]
	r2 = Mem0[r29 + 60<i32>:word64]
	// succ:  l000164E0
l000164E0:
	r7 = r7 + 1<32>
	r3 = Mem0[r29 + 64<i32>:word32]
	r2 = Mem0[r29 + 68<i32>:word64]
	r3 = r3
	r4 = r4 + (r7 << 2<32>)
	r5 = r5 + (r2 << 2<32>)
	Mem0[r29 + 64<i32>:word32] = r3
	p0 = r3 == r2
	branch p0 l00016420
	// succ:  l000164FC l00016420
l000164FC:
	Mem0[r29:byte] = r2
	r2 = Mem0[r29 + 52<i32>:word32]
	r0 = badva + 0xD<32>
	r2 = Mem0[r29 + 48<i32>:word32]
	r1 = 0xBC<32>
	r4 = badva + 0x28<32>
	call logmsg_function (retsize: 0;)
	r0 = 0<32>
	// succ:  l00016524
l00016524:
	r19_r18 = Mem0[r29 + 152<i32>:word64]
	r17_r16 = Mem0[r29 + 160<i32>:word64]
	r23_r22 = Mem0[r29 + 136<i32>:word64]
	r21_r20 = Mem0[r29 + 144<i32>:word64]
	r27_r26 = Mem0[r29 + 120<i32>:word64]
	r25_r24 = Mem0[r29 + 128<i32>:word64]
	v42 = r30
	r31 = Mem0[v42 + 4<i32>:word32]
	r30 = Mem0[v42:word32]
	r29 = v42 + 8<i32>
	return
	// succ:  broadcast_elementwise_execute_f_exit
broadcast_elementwise_execute_f_exit:


// logmsg_function
// Return size: 0
define logmsg_function
logmsg_function_entry:
	r29 = fp
	// succ:  l00016538
l00016538:
	v4 = r29 - 8<i32>
	Mem0[v4:word32] = r30
	Mem0[v4 + 4<i32>:word32] = r31
	r30 = v4
	r29 = v4 - 8<i32>
	r3 = 2<32>
	branch r3 >u r5 l0001655C
	goto l00016548
	// succ:  l00016548 l0001653C_thunk_fn0001655C
l0001653C_thunk_fn0001655C:
	call fn0001655C (retsize: 0;)
	return
	// succ:  logmsg_function_exit
l00016548:
	r5 = Mem0[r2 + 16<i32>:word32]
	Mem0[r29 + 1<i32>:byte] = r6
	r6 = r29 + 0x10<32>
	r5 = r29 + 0x10<32>
	v11 = r30
	r31 = Mem0[v11 + 4<i32>:word32]
	r30 = Mem0[v11:word32]
	r29 = v11 + 8<i32>
	return
	// succ:  logmsg_function_exit
logmsg_function_exit:


// fn00016540
// Return size: 0
define fn00016540
fn00016540_entry:
	r29 = fp
	// succ:  l00016540
l00016540:
	branch r3 >u r5 l00016540_thunk_fn0001655C
	goto l00016548_in_fn00016540
	// succ:  l00016548_in_fn00016540 l00016540_thunk_fn0001655C
l00016540_thunk_fn0001655C:
	call fn0001655C (retsize: 0;)
	return
	// succ:  fn00016540_exit
l00016548_in_fn00016540:
	r5 = Mem0[r2 + 16<i32>:word32]
	Mem0[r29 + 1<i32>:byte] = r6
	r6 = r29 + 0x10<32>
	r5 = r29 + 0x10<32>
	v8 = r30
	r31 = Mem0[v8 + 4<i32>:word32]
	r30 = Mem0[v8:word32]
	r29 = v8 + 8<i32>
	return
	// succ:  fn00016540_exit
fn00016540_exit:


// fn0001655C
// Return size: 0
define fn0001655C
fn0001655C_entry:
	r29 = fp
	// succ:  l0001655C
l0001655C:
	// succ:  l0001655C_thunk_errlog_function
l0001655C_thunk_errlog_function:
	call errlog_function (retsize: 0;)
	return
	// succ:  fn0001655C_exit
fn0001655C_exit:


// errlog_function
// Return size: 0
define errlog_function
errlog_function_entry:
	r29 = fp
	// succ:  l00016560
l00016560:
	v4 = r29 - 8<i32>
	Mem0[v4:word32] = r30
	Mem0[v4 + 4<i32>:word32] = r31
	r30 = v4
	r29 = v4 - 8<i32>
	r4 = r3
	r3 = 0<32>
	// succ:  l00016560_thunk_fn00016568
l00016560_thunk_fn00016568:
	call fn00016568 (retsize: 0;)
	return
	// succ:  errlog_function_exit
errlog_function_exit:


// fn00016568
// Return size: 0
define fn00016568
fn00016568_entry:
	r29 = fp
	// succ:  l00016568
l00016568:
	Mem0[r29 + 1<i32>:byte] = r6
	r6 = r29 + 0x10<32>
	r5 = r29 + 0x10<32>
	call logv (retsize: 0;)
	// succ:  l00016568_thunk_nn_reduction_float
l00016568_thunk_nn_reduction_float:
	call nn_reduction_float (retsize: 0;)
	return
	// succ:  fn00016568_exit
fn00016568_exit:


// nn_reduction_float
// Return size: 0
define nn_reduction_float
nn_reduction_float_entry:
	r29 = fp
	// succ:  l0001657C
l0001657C:
	v4 = r29 - 8<i32>
	Mem0[v4:word32] = r30
	Mem0[v4 + 4<i32>:word32] = r31
	r30 = v4
	r29 = v4 - 112<i32>
	r5 = 1<32>
	r6 = Mem0[r0 + 4<i32>:word32]
	r4 = Mem0[r0 + 8<i32>:word32]
	Mem0[r29 + 104<i32>:word64] = r17_r16
	r7 = Mem0[r0 + 16<i32>:word32]
	r2 = r1
	r16 = r2
	r4 = Mem0[r4:word32]
	r8 = Mem0[r6:word32]
	Mem0[r29 + 24<i32>:word32] = r3
	Mem0[r29 + 88<i32>:word64] = r21_r20
	r13 = 1<32>
	p0 = r7 == 3<32>
	r28 = Mem0[r8 + 4<i32>:word32]
	r15 = Mem0[r8 + 8<i32>:word32]
	r14 = 0<32>
	r20 = Mem0[r8 + 12<i32>:word32]
	r3 = Mem0[r8:word32]
	r11_r10 = r15_r28
	r1 = Mem0[r4 + 16<i32>:word32]
	r21 = Mem0[r8 + 16<i32>:word32]
	Mem0[r29 + 80<i32>:word64] = r23_r22
	Mem0[r29 + 96<i32>:word64] = r19_r18
	r18 = 1<32>
	Mem0[r29 + 64<i32>:word64] = r27_r26
	Mem0[r29 + 72<i32>:word64] = r25_r24
	r18 = r20 + 0<32>
	r9 = Mem0[r6 + 8<i32>:word32]
	branch p0 l000165EC
	// succ:  l000165E0 l000165EC
l000165E0:
	r7_r6 = 0x100000001<64>
	r17 = 1<32>
	r11_r10 = 0x100000001<64>
	goto l00016728
	// succ:  l00016728
l000165EC:
	r7 = Mem0[r6 + 4<i32>:word32]
	r17 = r3
	r6 = Mem0[r7 + 16<i32>:word32]
	r8 = Mem0[r7 + 12<i32>:word32]
	r7 = Mem0[r9 + 16<i32>:word32]
	p0 = r8 == 0<32>
	r7 = Mem0[r7:word32]
	r11_r10 = r15_r28
	r9 = r6 + 0<32>
	branch p0 l00016668
	// succ:  l00016610 l00016668
l00016610:
	r18 = r20
	r17 = r3
	__loop(0<i32>, 0x00016618<p32>, r8)
	r9 = r9 + 4<i32>
	r12 = Mem0[r9:word32]
	branch r12 > 6<32> l00016634
	// succ:  l00016628 l00016634
l00016628:
	r12 = r7 + (0x7F<32> - r12)
	r17 = 1<32>
	r11_r10 = 0x100000001<64>
	r18 = 1<32>
	p0 = r12 == 0<32>
	branch p0 l0001665C
	goto l0001663C
	// succ:  l0001663C l0001665C
l00016634:
	r18 = 1<32>
	p0 = r12 == 0<32>
	// succ:  l0001663C
l0001663C:
	r11 = 1<32>
	p0 = r12 == 1<32>
	branch p0 l0001665C
	// succ:  l00016648 l0001665C
l00016648:
	r10 = 1<32>
	p0 = r12 == 2<32>
	branch p0 l0001665C
	// succ:  l00016654 l0001665C
l00016654:
	r17 = 1<32>
	p0 = r12 == 3<32>
	// succ:  l0001665C
l0001665C:
	r14 = r8
	// succ:  l00016668
l00016668:
	branch r8 == 4<32> l00016688
	// succ:  l00016678 l00016688
l00016678:
	r8 = Mem0[r0 + 32<i32>:int8]
	r13_r12 = r10_r17
	r13 = r10
	r7_r6 = r11_r18
	r13_r12 = r10_r17
	p0 = r14 == 0<32>
	r9_r8 = r11_r18
	branch p0 l000166E8
	goto l00016690
	// succ:  l00016690 l000166E8
l00016688:
	r13_r12 = r10_r17
	p0 = r14 == 0<32>
	// succ:  l00016690
l00016690:
	r9_r8 = r11_r18
	__loop(0<i32>, 0x00016698<p32>, r14)
	r6 = r6 + 4<i32>
	r14 = Mem0[r6:word32]
	branch r14 > 6<32> l000166B8
	// succ:  l000166A8 l000166B8
l000166A8:
	r14 = r7 + (0x7F<32> - r14)
	r12 = 0<32>
	r13 = 0<32>
	r9_r8 = 0<64>
	r8 = 0<32>
	p0 = r14 == 0<32>
	branch p0 l000166E0
	goto l000166C0
	// succ:  l000166C0 l000166E0
l000166B8:
	r8 = 0<32>
	p0 = r14 == 0<32>
	// succ:  l000166C0
l000166C0:
	r9 = 0<32>
	p0 = r14 == 1<32>
	branch p0 l000166E0
	// succ:  l000166CC l000166E0
l000166CC:
	r13 = 0<32>
	p0 = r14 == 2<32>
	branch p0 l000166E0
	// succ:  l000166D8 l000166E0
l000166D8:
	r12 = 0<32>
	p0 = r14 == 3<32>
	// succ:  l000166E0
l000166E0:
	// succ:  l000166E8
l000166E8:
	p3 = r8 == 0<32>
	p0 = r9 == 0<32>
	p2 = r13 == 0<32>
	p1 = r12 == 0<32>
	p1 = p1 | p2
	r13 = 1<32>
	r6 = r13 + 0<32>
	p2 = p1 | p0
	r6 = r9 + 0<32>
	r13 = r12 + 0<32>
	r7 = r6 + 0<32>
	r7_r6 = r6_r8
	r13 = r7 + 0<32>
	r5 = r13 + 0<32>
	// succ:  l00016728
l00016728:
	Mem0[r29 + 4<i32>:word32] = r17
	r9 = Mem0[r4 + 20<i32>:word32]
	r8 = r18 * r11
	Mem0[r29 + 8<i32>:word32] = r10
	Mem0[r29 + 12<i32>:word32] = r11
	r8 = r8 * r10
	r8 = r8 * r17
	branch r8 >u r9 l00016770
	// succ:  l00016750 l00016770
l00016750:
	r8 = r8 << 2<32>
	r1 = 0xC6<32>
	r0 = badva + 3<32>
	call fn00016568 (retsize: 0;)
	r3 = badva + 0x2E<32>
	r0 = 0xFFFFFFFF<32>
	goto l000168E0
	// succ:  l000168E0
l00016770:
	Mem0[r4 + 24<i32>:word32] = r8
	Mem0[r4 + 12<i32>:word32] = r6
	p0 = r17 > 0<32>
	Mem0[r4:word32] = r5
	Mem0[r4 + 8<i32>:word32] = r7
	r5 = 0<32>
	Mem0[r4 + 4<i32>:word32] = r13
	Mem0[r29 + 32<i32>:word32] = r28
	Mem0[r29 + 48<i32>:word32] = r15
	branch p0 l000168E0
	// succ:  l00016794 l000168E0
l00016794:
	p0 = r17 == 1<32>
	r4 = r18
	p2 = r10 == 1<32>
	p3 = r11 == 1<32>
	p1 = r4 == 1<32>
	Mem0[r29 + 36<i32>:word32] = r5
	r23 = !(r15 == 1<32>)
	r3 = r28 == 1<32>
	Mem0[r29 + 40<i32>:word32] = r2
	Mem0[r29 + 20<i32>:word32] = r4
	Mem0[r29 + 60<i32>:word32] = r3
	// succ:  l000167C0
l000167C0:
	p0 = r10 > 0<32>
	r2 = 0<32>
	Mem0[r29 + 52<i32>:word32] = r2
	branch p0 l000168D0
	// succ:  l000167D0 l000168D0
l000167D0:
	p0 = r11 > 0<32>
	r17 = 0<32>
	branch p0 l000168B8
	// succ:  l000167DC l000168B8
l000167DC:
	Mem0[r29 + 16<i32>:word32] = r1
	r2 = r1
	p0 = r4 > 0<32>
	r19 = 0<32>
	// succ:  l000167E0
l000167E0:
	r1 = Mem0[r29 + 16<i32>:word32]
	branch p0 l000168AC
	// succ:  l000167F0 l000168AC
l000167F0:
	Mem0[r29 + 28<i32>:word32] = r2
	r2 = Mem0[r29 + 40<i32>:word64]
	r0 = Mem0[r29 + 24<i32>:word32]
	p0 = r2 > 0<32>
	branch p0 l00016890
	// succ:  l00016800 l00016890
l00016800:
	r0 = Mem0[r29 + 24<i32>:word64]
	r3 = 0<32>
	branch r2 > 0<32> l00016820
l00016808:
	branch r2 > 0<32> l00016820
	// succ:  l00016814 l00016820
l00016814:
	r2 = Mem0[r29 + 60<i32>:word32]
	r27 = 0<32>
	Mem0[r29 + 44<i32>:word32] = r3
	Mem0[r29 + 44<i32>:word32] = r3
	r2 = Mem0[r29 + 36<i32>:word64]
	r2 = r3 + r2
	// succ:  l00016820
l00016820:
	r3 = Mem0[r29 + 32<i32>:word32]
	Mem0[r29 + 14<i32>:byte] = r2
	r2 = r2 * r3
	// succ:  l00016830
l00016830:
	r7 = Mem0[r29 + 48<i32>:word32]
	r3 = Mem0[r29 + 52<i32>:word64]
	r2 = Mem0[r29 + 56<i32>:word64]
	r22 = 0<32>
	r2 = r2 + (r27 + r3)
	r26 = r2 * r7
	p0 = r24 > 0<32>
	r3_r2 = r19_r26
	r25 = r24
	branch p0 l00016870
l00016848:
	p0 = r24 > 0<32>
	r3_r2 = r19_r26
	r25 = r24
	// succ:  l00016854 l00016870
l00016854:
	r2 = r2 + (r22 + r17)
	r3 = r3 + r2 * r20
	r18 = r21 + (r3 << 2<32>)
	r1 = Mem0[r18:word32]
	r18 = r18 + 4<32>
	call r16 (retsize: 0;)
	// succ:  l00016864
l00016864:
	branch r25 == 1<32> l00016864
	goto l00016874
	// succ:  l00016874 l00016864
l00016870:
	branch r22 == r23 l00016848
	goto l0001687C
	// succ:  l0001687C l00016848
l00016874:
	r25 = r25 + 0xFFFFFFFF<32>
	branch r22 == r23 l00016848
	// succ:  l0001687C l00016848
l0001687C:
	branch r27 == r2 l00016830
	// succ:  l00016888 l00016830
l00016888:
	r27 = r27 + 1<32>
	branch r3 == r2 l00016808
	goto l00016894
	// succ:  l00016894 l00016808
l00016890:
	r4 = Mem0[r29 + 20<i32>:word64]
	r2 = Mem0[r29 + 28<i32>:word64]
	r19 = r19 + 1<32>
	goto l00016898
	// succ:  l00016898
l00016894:
	r3 = r3 + 1<32>
	r4 = Mem0[r29 + 20<i32>:word64]
	r2 = Mem0[r29 + 28<i32>:word64]
	// succ:  l00016898
l00016898:
	Mem0[r2:word32] = r0
	r2 = r2 + 4<32>
	p0 = r19 == r4
	r1 = Mem0[r29 + 16<i32>:word32]
	branch p0 l000167F0
	// succ:  l000168A8 l000167F0
l000168A8:
	r1 = r1 + (r4 << 2<32>)
	// succ:  l000168AC
l000168AC:
	r11 = Mem0[r29 + 12<i32>:word32]
	branch r17 == r11 l000167E0
	goto l000168BC
	// succ:  l000168BC l000167E0
l000168B8:
	r10 = Mem0[r29 + 8<i32>:word32]
	r2 = Mem0[r29 + 52<i32>:word32]
	r2 = r2 + 1<32>
	Mem0[r29 + 52<i32>:word32] = r2
	p0 = r2 == r10
	branch p0 l000167D0
	goto l000168D0
	// succ:  l000168D0 l000167D0
l000168BC:
	r17 = r17 + 1<32>
	r10 = Mem0[r29 + 8<i32>:word32]
	r2 = r2 + 1<32>
	Mem0[r29 + 52<i32>:word32] = r2
	p0 = r2 == r10
	branch p0 l000167D0
	// succ:  l000168D0 l000167D0
l000168D0:
	r2 = Mem0[r29 + 4<i32>:word64]
	r3 = Mem0[r29 + 36<i32>:word64]
	r3 = r3 + 1<32>
	Mem0[r29 + 36<i32>:word32] = r3
	r0 = -1<i32>
	branch p0 l000167C0
	// succ:  l000168E0 l000167C0
l000168E0:
	r19_r18 = Mem0[r29 + 96<i32>:word64]
	r17_r16 = Mem0[r29 + 104<i32>:word64]
	r23_r22 = Mem0[r29 + 80<i32>:word64]
	r21_r20 = Mem0[r29 + 88<i32>:word64]
	r27_r26 = Mem0[r29 + 64<i32>:word64]
	r25_r24 = Mem0[r29 + 72<i32>:word64]
	v40 = r30
	r31 = Mem0[v40 + 4<i32>:word32]
	r30 = Mem0[v40:word32]
	r29 = v40 + 8<i32>
	return
	// succ:  nn_reduction_float_exit
nn_reduction_float_exit:


// qsoftmax_execute_ref
// Return size: 0
define qsoftmax_execute_ref
qsoftmax_execute_ref_entry:
	r29 = fp
	// succ:  l00016900
l00016900:
	v4 = r29 - 8<i32>
	Mem0[v4:word32] = r30
	Mem0[v4 + 4<i32>:word32] = r31
	r30 = v4
	r29 = v4 - 104<i32>
	Mem0[r29 - 48<i32>:word64] = r25_r24
	r6 = 0x437F0000<32>
	r24 = r0
	Mem0[r29 + 88<i32>:word64] = r19_r18
	r2 = Mem0[r24 + 4<i32>:word32]
	r25 = r1
	r3 = Mem0[r24 + 8<i32>:word32]
	Mem0[r29 + 72<i32>:word64] = r23_r22
	Mem0[r29 + 96<i32>:word64] = r17_r16
	r4 = Mem0[r2 + 4<i32>:word32]
	r18 = Mem0[r2:word32]
	r5 = Mem0[r3 + 8<i32>:word32]
	r2 = Mem0[r2 + 8<i32>:word32]
	r4 = Mem0[r4 + 16<i32>:word32]
	r7 = Mem0[r18:word32]
	r17 = Mem0[r18 + 12<i32>:word32]
	r2 = Mem0[r2 + 16<i32>:word32]
	r19 = Mem0[r3:word32]
	r1 = Mem0[r3 + 4<i32>:word32]
	r3 = r7 * r17
	r16 = Mem0[r4:word32]
	r23 = Mem0[r18 + 4<i32>:word32]
	Mem0[r29 + 80<i32>:word64] = r21_r20
	r2 = Mem0[r2:word32]
	r20 = Mem0[r18 + 8<i32>:word32]
	Mem0[r29 + 28<i32>:word32] = r1
	r1 = r6
	Mem0[r29 + 36<i32>:word32] = r24
	Mem0[r29 + 56<i32>:word64] = r27_r26
	Mem0[r29 + 48<i32>:word32] = r7
	Mem0[r29 + 32<i32>:word32] = r5
	r26 = Mem0[r18 + 16<i32>:word32]
	r27 = Mem0[r19 + 16<i32>:word32]
	call fn00009614 (retsize: 0;)
	r22 = r2 * r20
	r2 = r25
	r1 = 0x4A<32>
	r4 = badva + 0x35<32>
	Mem0[r29:word32] = r24
	r21 = r0
	call logmsg_function (retsize: 0;)
	r5 = r19
	branch r22 >u r2 l000169C0
	// succ:  l000169A4 l000169C0
l000169A4:
	r2 = Mem0[r5 + 20<i32>:word32]
	r2 = r25
	r1 = 0x4B<32>
	r3 = badva + 0x28<32>
	call errlog_function (retsize: 0;)
	r0 = 0xFFFFFFFF<32>
	goto l00016C10
	// succ:  l00016C10
l000169C0:
	Mem0[r5 + 1<i32>:byte] = r4
	r4 = Mem0[r18 + 4<i32>:word32]
	r2 = r23 * r2
	Mem0[r5:word32] = r3
	r6 = Mem0[r18 + 8<i32>:word32]
	p0 = r2 > 0<32>
	Mem0[r29 + 24<i32>:word32] = r25
	Mem0[r5 + 8<i32>:word32] = r6
	r20 = 0x7F800000<32>
	r7 = Mem0[r18 + 12<i32>:word32]
	r18 = 0xFF800000<32>
	Mem0[r5 + 24<i32>:word32] = r22
	Mem0[r5 + 12<i32>:word32] = r7
	r22 = 0<32>
	Mem0[r29 + 16<i32>:word32] = r5
	Mem0[r29 + 40<i32>:word32] = r2
	branch p0 l00016A20
	// succ:  l00016A0C l00016A20
l00016A0C:
	r18 = 0xFF800000<32>
	r20 = 0x7F800000<32>
	goto l00016BC8
	// succ:  l00016BC8
l00016A20:
	Mem0[r29 + 5<i32>:byte] = r0
	r0 = p0
	// succ:  l00016A2C
l00016A2C:
	Mem0[r29 + 44<i32>:word32] = r22
	Mem0[r29 + 12<i32>:byte] = r0
	branch p0 l00016A5C
	// succ:  l00016A40 l00016A5C
l00016A40:
	r0 = p0
	r0 = Mem0[r29 + 48<i32>:word32]
	Mem0[r29 + 44<i32>:word32] = r22
	r19 = 1<32>
	branch p0 l00016AA0
	// succ:  l00016A54 l00016AA0
l00016A54:
	p0 = r0
	goto l00016B50
	// succ:  l00016B50
l00016A5C:
	r25 = Mem0[r26:byte]
	r19 = 1<32>
	r2 = r25
	// succ:  l00016A70
l00016A70:
	r1_r0 = r23_r16
	r2 = r2 & 0xFF<32>
	call fn00009604 (retsize: 0;)
	r23 = r0
	r2 = r26 + r19
	branch p0 l00016A40
	// succ:  l00016A90 l00016A40
l00016A90:
	p0 = r9 == -1<i32>
	r19 = r19 + 1<32>
	r2 = Mem0[r2:byte]
	goto l00016A70
	// succ:  l00016A70
l00016AA0:
	r24 = 0<32>
	// succ:  l00016AA4
l00016AA4:
	r3 = r16
	r2 = r25 & 0xFF<32>
	call fn00009784 (retsize: 0;)
	r2 = r26 + r19
	branch p0 l00016AD8
	// succ:  l00016AC8 l00016AD8
l00016AC8:
	p0 = r9 == -1<i32>
	r25 = Mem0[r2:byte]
	r19 = r19 + 1<32>
	goto l00016AA4
	// succ:  l00016AA4
l00016AD8:
	Mem0[r29 + 44<i32>:word32] = r22
	r0 = 0<32>
	call fn00009610 (retsize: 0;)
	r0 = Mem0[r29 + 48<i32>:word64]
	r19 = 0<32>
	r24 = r0
	branch p0 l00016B54
	// succ:  l00016AF4 l00016B54
l00016AF4:
	p0 = r0
	r22 = 0x437F0000<32>
	// succ:  l00016AFC
l00016AFC:
	r2 = Mem0[r13 + r19:byte]
	r3 = r16
	call fn00009784 (retsize: 0;)
	r1_r0 = r25_r18
	call fn00009600 (retsize: 0;)
	r1_r0 = r25_r20
	r18 = r0
	call fn000097B0 (retsize: 0;)
	r19 = r19
	r20 = r0
	r3 = r27 + r19
	p0 = r17 == r19
	r4 = 0xFFFFFFFF<32>
	Mem0[r3:byte] = r4
	branch p0 l00016AFC
	// succ:  l00016B50 l00016AFC
l00016B50:
	r2 = Mem0[r29 + 40<i32>:word64]
	r22 = Mem0[r29 + 44<i32>:word64]
	r27 = r27 + r17
	r26 = r26 + r17
	// succ:  l00016B54
l00016B54:
	branch r22 == r2 l00016A2C
	// succ:  l00016B68 l00016A2C
l00016B68:
	r22 = r22 + 1<32>
	branch p0 l00016BCC
	// succ:  l00016B70 l00016BCC
l00016B70:
	p0 = r0
	r2 = Mem0[r29 + 16<i32>:word64]
	r0 = 0<32>
	r1 = r18
	r16 = Mem0[r2 + 16<i32>:word32]
	call fn00009610 (retsize: 0;)
	r3 = Mem0[r29 + 40<i32>:word64]
	r2 = 0<32>
	r3 = Mem0[r29 + 48<i32>:word32]
	__loop(1<i32>, 0x00016B98<p32>, r3)
	p0 = r3
	r3 = r16 + 0<32>
	branch p0 l00016BBC
	// succ:  l00016BA0 l00016BBC
l00016BA0:
	__loop(0<i32>, 0x00016BA4<p32>, r17)
	r4 = Mem0[r3:byte]
	r5 = r20
	goto l00016BC0
	// succ:  l00016BC0
l00016BBC:
	r16 = r16 + r17
	goto l00016BC8
	// succ:  l00016BC8
l00016BC0:
	// succ:  l00016BC8
l00016BC8:
	r6 = Mem0[r29 + 32<i32>:word64]
	r7 = Mem0[r29 + 28<i32>:word64]
	r4 = badva + 0xE<32>
	// succ:  l00016BCC
l00016BCC:
	r5 = Mem0[r29 + 36<i32>:word64]
	r2 = Mem0[r29 + 24<i32>:word64]
	r1 = 0x85<32>
	Mem0[r7 + 12<i32>:word32] = 1<32>
	r0 = Mem0[r7 + 16<i32>:word32]
	Mem0[r7:word32] = 1<32>
	Mem0[r7 + 8<i32>:word32] = 1<32>
	Mem0[r0:word32] = r20
	Mem0[r7 + 4<i32>:word32] = 0xFFFFFF81<32>
	Mem0[r6 + 8<i32>:word32] = 1<32>
	Mem0[r7 + 24<i32>:word32] = 4<32>
	Mem0[r6:word32] = 1<32>
	r3 = Mem0[r6 + 16<i32>:word32]
	Mem0[r6 + 12<i32>:word32] = 1<32>
	Mem0[r6 + 4<i32>:word32] = 1<32>
	Mem0[r6 + 24<i32>:word32] = 4<32>
	Mem0[r3:word32] = r18
	Mem0[r29:word32] = r5
	call logmsg_function (retsize: 0;)
	r0 = 0<32>
	// succ:  l00016C10
l00016C10:
	r19_r18 = Mem0[r29 + 88<i32>:word64]
	r17_r16 = Mem0[r29 + 96<i32>:word64]
	r23_r22 = Mem0[r29 + 72<i32>:word64]
	r21_r20 = Mem0[r29 + 80<i32>:word64]
	r27_r26 = Mem0[r29 + 56<i32>:word64]
	r25_r24 = Mem0[r29 + 64<i32>:word64]
	v35 = r30
	r31 = Mem0[v35 + 4<i32>:word32]
	r30 = Mem0[v35:word32]
	r29 = v35 + 8<i32>
	return
	// succ:  qsoftmax_execute_ref_exit
qsoftmax_execute_ref_exit:


// qsoftmax_check
// Return size: 0
define qsoftmax_check
qsoftmax_check_entry:
	r29 = fp
	// succ:  l00016C24
l00016C24:
	v4 = r29 - 8<i32>
	Mem0[v4:word32] = r30
	Mem0[v4 + 4<i32>:word32] = r31
	r30 = v4
	r29 = v4 - 16<i32>
	Mem0[r29 + 496<i32>:word64] = r17_r16
	r4 = badva + 0x38<32>
	r17 = r0
	r16 = r1
	r1 = 0x8B<32>
	Mem0[r29:word32] = r17
	r2 = r16
	call logmsg_function (retsize: 0;)
	branch r2 == 6<32> l00016C6C
	// succ:  l00016C50 l00016C6C
l00016C50:
	r2 = Mem0[r17 + 16<i32>:word32]
	r1 = 0x8C<32>
	r3 = badva + 0x29<32>
	r2 = r16
	call errlog_function (retsize: 0;)
	// succ:  l00016C5C
l00016C5C:
	v16 = r30
	r31 = Mem0[v16 + 4<i32>:word32]
	r30 = Mem0[v16:word32]
	r29 = v16 + 8<i32>
	return
	// succ:  qsoftmax_check_exit
l00016C6C:
	branch r2 == 6<32> l00016C84
	// succ:  l00016C74 l00016C84
l00016C74:
	goto l00016C5C
	// succ:  l00016C5C
l00016C84:
	r2 = r16
	r1 = 0x8E<32>
	Mem0[r29:word32] = r17
	call logmsg_function (retsize: 0;)
	r0 = 0<32>
	v17 = r30
	r31 = Mem0[v17 + 4<i32>:word32]
	r30 = Mem0[v17:word32]
	r29 = v17 + 8<i32>
	return
	// succ:  qsoftmax_check_exit
qsoftmax_check_exit:


// logmsg_function
// Return size: 0
define logmsg_function
logmsg_function_entry:
	r29 = fp
	// succ:  l00016C9C
l00016C9C:
	v4 = r29 - 8<i32>
	Mem0[v4:word32] = r30
	Mem0[v4 + 4<i32>:word32] = r31
	r30 = v4
	r29 = v4 - 8<i32>
	r3 = 2<32>
	branch r3 >u r5 l00016CA0_thunk_errlog_function
	goto l00016CAC
	// succ:  l00016CAC l00016CA0_thunk_errlog_function
l00016CA0_thunk_errlog_function:
	call errlog_function (retsize: 0;)
	return
	// succ:  logmsg_function_exit
l00016CAC:
	r5 = Mem0[r2 + 16<i32>:word32]
	r5 = r29 + 0x10<32>
	r3 = 2<32>
	r0 = badva + 0x17<32>
	Mem0[r29 + 1<i32>:byte] = r6
	r6 = r29 + 0x10<32>
	call logv (retsize: 0;)
	// succ:  l00016CB4_thunk_errlog_function
l00016CB4_thunk_errlog_function:
	call errlog_function (retsize: 0;)
	return
	// succ:  logmsg_function_exit
logmsg_function_exit:


// errlog_function
// Return size: 0
define errlog_function
errlog_function_entry:
	r29 = fp
	// succ:  l00016CC4
l00016CC4:
	v4 = r29 - 8<i32>
	Mem0[v4:word32] = r30
	Mem0[v4 + 4<i32>:word32] = r31
	r30 = v4
	r29 = v4 - 8<i32>
	r4 = r3
	r0 = badva + 0x3B<32>
	Mem0[r29 + 1<i32>:byte] = r6
	r6 = r29 + 0x10<32>
	r5 = r29 + 0x10<32>
	r3 = 0<32>
	v13 = r30
	r31 = Mem0[v13 + 4<i32>:word32]
	r30 = Mem0[v13:word32]
	r29 = v13 + 8<i32>
	return
	// succ:  errlog_function_exit
errlog_function_exit:


// nop_execute
// Return size: 0
define nop_execute
nop_execute_entry:
	r29 = fp
	// succ:  l00016CF0
l00016CF0:
	v4 = r29 - 8<i32>
	Mem0[v4:word32] = r30
	Mem0[v4 + 4<i32>:word32] = r31
	r30 = v4
	r29 = v4 - 24<i32>
	r2 = r1
	r4 = badva + 0x31<32>
	Mem0[r29 + 8<i32>:word64] = r19_r18
	Mem0[r29 + 16<i32>:word64] = r17_r16
	r16 = r0
	r1 = 0x31<32>
	Mem0[r29:word32] = r16
	call logmsg_function (retsize: 0;)
	branch r2 == 0<32> l00016D68
	// succ:  l00016D1C l00016D68
l00016D1C:
	r2 = Mem0[r16 + 20<i32>:word32]
	r3 = Mem0[r16 + 4<i32>:word32]
	r2 = Mem0[r16 + 8<i32>:word32]
	// succ:  l00016D20
l00016D20:
	r2 = Mem0[r13 + r17:word32]
	r3 = Mem0[r21 + r17:word32]
	r4 = Mem0[r3:word32]
	Mem0[r2 + 1<i32>:byte] = r5
	r5 = Mem0[r3 + 4<i32>:word32]
	r1 = Mem0[r3 + 12<i32>:word32]
	r7 = Mem0[r3 + 8<i32>:word32]
	Mem0[r2 + 12<i32>:word32] = r1
	Mem0[r2 + 8<i32>:word32] = r7
	r4 = Mem0[r3 + 24<i32>:word32]
	branch r4 >u r6 l00016D5C
	// succ:  l00016D50 l00016D5C
l00016D50:
	r6 = Mem0[r2 + 20<i32>:word32]
	r1 = Mem0[r3 + 16<i32>:word32]
	r2 = Mem0[r3 + 24<i32>:word32]
	call fn00009560 (retsize: 0;)
	r2 = Mem0[r16 + 20<i32>:word32]
	r17 = r17 + 4<32>
	// succ:  l00016D5C
l00016D5C:
	branch r2 >u r18 l00016D20
	// succ:  l00016D68 l00016D20
l00016D68:
	r19_r18 = Mem0[r29 + 8<i32>:word64]
	r17_r16 = Mem0[r29 + 16<i32>:word64]
	v22 = r30
	r31 = Mem0[v22 + 4<i32>:word32]
	r30 = Mem0[v22:word32]
	r29 = v22 + 8<i32>
	return
	// succ:  nop_execute_exit
nop_execute_exit:


// nop_check
// Return size: 0
define nop_check
nop_check_entry:
	r29 = fp
	// succ:  l00016D70
l00016D70:
	v4 = r29 - 8<i32>
	Mem0[v4:word32] = r30
	Mem0[v4 + 4<i32>:word32] = r31
	r30 = v4
	r29 = v4 - 16<i32>
	Mem0[r29 + 496<i32>:word64] = r17_r16
	r4 = badva + 0x35<32>
	r17 = r0
	r16 = r1
	r1 = 0x3B<32>
	Mem0[r29:word32] = r17
	r2 = r16
	call logmsg_function (retsize: 0;)
	r2 = Mem0[r17 + 20<i32>:word32]
	branch r3 == r2 l00016DAC
	// succ:  l00016D9C l00016DAC
l00016D9C:
	r3 = Mem0[r17 + 16<i32>:word32]
	r2 = r16
	v16 = r30
	r31 = Mem0[v16 + 4<i32>:word32]
	r30 = Mem0[v16:word32]
	r29 = v16 + 8<i32>
	return
	// succ:  nop_check_exit
l00016DAC:
	r2 = r16
	r1 = 0x3D<32>
	r4 = badva + 0x24<32>
	Mem0[r29:word32] = r17
	call logmsg_function (retsize: 0;)
	r0 = 0<32>
	v17 = r30
	r31 = Mem0[v17 + 4<i32>:word32]
	r30 = Mem0[v17:word32]
	r29 = v17 + 8<i32>
	return
	// succ:  nop_check_exit
nop_check_exit:


// nop_ctor
// Return size: 0
define nop_ctor
nop_ctor_entry:
	r29 = fp
	// succ:  l00016DC4
l00016DC4:
	v4 = r29 - 8<i32>
	Mem0[v4:word32] = r30
	Mem0[v4 + 4<i32>:word32] = r31
	r30 = v4
	r29 = v4 - 40<i32>
	Mem0[r29 + 488<i32>:word64] = r19_r18
	r6 = badva + 0xD<32>
	r19_r18 = r5_r0
	Mem0[r29 + 16<i32>:word64] = r21_r20
	Mem0[r29 + 32<i32>:word64] = r17_r16
	r21_r20 = r2_r3
	r17_r16 = r4_r1
	r4 = r6
	r2 = r18
	r1 = 0x4B<32>
	Mem0[r29 + 8<i32>:word64] = r23_r22
	r22 = Mem0[r29 + 48<i32>:word64]
	r23 = Mem0[r29 + 52<i32>:word32]
	Mem0[r29:word32] = r16
	call logmsg_function (retsize: 0;)
	Mem0[r29 + 4<i32>:word32] = r23
	r1_r0 = r16_r18
	r3_r2 = r20_r21
	r5_r4 = r19_r17
	Mem0[r29:word32] = r22
	call node_alloc_common (retsize: 0;)
	r17_r16 = Mem0[r29 + 32<i32>:word64]
	r21_r20 = Mem0[r29 + 16<i32>:word64]
	r19_r18 = Mem0[r29 + 24<i32>:word64]
	v36 = r30
	r31 = Mem0[v36 + 4<i32>:word32]
	r30 = Mem0[v36:word32]
	r29 = v36 + 8<i32>
	return
	// succ:  nop_ctor_exit
nop_ctor_exit:


// nop_dtor
// Return size: 0
define nop_dtor
nop_dtor_entry:
	r29 = fp
	// succ:  l00016E1C
l00016E1C:
	v4 = r29 - 8<i32>
	Mem0[v4:word32] = r30
	Mem0[v4 + 4<i32>:word32] = r31
	r30 = v4
	r29 = v4 - 16<i32>
	Mem0[r29 + 496<i32>:word64] = r17_r16
	r4 = badva + 0x24<32>
	r17 = r0
	r16 = r1
	r1 = 0x59<32>
	Mem0[r29:word32] = r17
	r2 = r16
	call logmsg_function (retsize: 0;)
	r1_r0 = r16_r17
	v17 = r30
	r31 = Mem0[v17 + 4<i32>:word32]
	r30 = Mem0[v17:word32]
	r29 = v17 + 8<i32>
	r17_r16 = Mem0[r29 + 8<i32>:word64]
	// succ:  l00016E3C_thunk_node_free_common
l00016E3C_thunk_node_free_common:
	call node_free_common (retsize: 0;)
	return
	// succ:  nop_dtor_exit
nop_dtor_exit:


// logmsg_function
// Return size: 0
define logmsg_function
logmsg_function_entry:
	r29 = fp
	// succ:  l00016E44
l00016E44:
	v4 = r29 - 8<i32>
	Mem0[v4:word32] = r30
	Mem0[v4 + 4<i32>:word32] = r31
	r30 = v4
	r29 = v4 - 8<i32>
	r3 = 2<32>
	branch r3 >u r5 l00016E6C
	// succ:  l00016E54 l00016E6C
l00016E54:
	r5 = Mem0[r2 + 16<i32>:word32]
	r5 = r29 + 0x10<32>
	r3 = 2<32>
	r0 = badva + 0x17<32>
	Mem0[r29 + 1<i32>:byte] = r6
	r6 = r29 + 0x10<32>
	call logv (retsize: 0;)
	// succ:  l00016E6C
l00016E6C:
	// succ:  l00016E6C_thunk_errlog_function
l00016E6C_thunk_errlog_function:
	call errlog_function (retsize: 0;)
	return
	// succ:  logmsg_function_exit
logmsg_function_exit:


// errlog_function
// Return size: 0
define errlog_function
errlog_function_entry:
	r29 = fp
	// succ:  l00016E70
l00016E70:
	v4 = r29 - 8<i32>
	Mem0[v4:word32] = r30
	Mem0[v4 + 4<i32>:word32] = r31
	r30 = v4
	r29 = v4 - 8<i32>
	r3 = 0<32>
	r0 = badva + 0x37<32>
	r5 = r29 + 0x10<32>
	r1 = 0x3C<32>
	r4 = badva + 0x3E<32>
	Mem0[r29 + 1<i32>:byte] = r6
	r6 = r29 + 0x10<32>
	call logv (retsize: 0;)
	r0 = Mem0[r0:word32]
	r0 = Mem0[r0:word32]
	r0 = Mem0[r0:word32]
	r0 = Mem0[r0:word32]
	// succ:  l00016E9C_thunk_output_execute
l00016E9C_thunk_output_execute:
	call output_execute (retsize: 0;)
	return
	// succ:  errlog_function_exit
errlog_function_exit:


// output_execute
// Return size: 0
define output_execute
output_execute_entry:
	r29 = fp
	// succ:  l00016EA0
l00016EA0:
	v4 = r29 - 8<i32>
	Mem0[v4:word32] = r30
	Mem0[v4 + 4<i32>:word32] = r31
	r30 = v4
	r29 = v4 - 32<i32>
	Mem0[r29 + 496<i32>:word64] = r17_r16
	r4 = badva + 0x36<32>
	r16 = r1
	r1 = 0x34<32>
	Mem0[r29 + 8<i32>:word64] = r21_r20
	Mem0[r29 + 16<i32>:word64] = r19_r18
	r18 = r0
	r2 = r16
	Mem0[r29:word32] = r18
	call logmsg_function (retsize: 0;)
	r2 = Mem0[r16 + 32<i32>:word32]
	branch r3 == r2 l00016F08
	// succ:  l00016ED4 l00016F08
l00016ED4:
	r3 = Mem0[r18 + 16<i32>:word32]
	r2 = 0<32>
	r17 = 0<32>
	r21_r20 = 0<64>
	r19 = 0<32>
	r3 = Mem0[r16 + 24<i32>:word32]
	r2 = Mem0[r18 + 4<i32>:word32]
	// succ:  l00016EE0
l00016EE0:
	r2 = Mem0[r13 + r20:word32]
	r3 = r3 + r21
	r4 = Mem0[r3 + 20<i32>:word32]
	branch r5 >u r4 l00016F20
	// succ:  l00016EF8 l00016F20
l00016EF8:
	r5 = Mem0[r2 + 24<i32>:word32]
	Mem0[r29:word32] = r19
	r1 = 0x3A<32>
	r3 = badva + 9<32>
	goto l00016F10
	// succ:  l00016F10
l00016F08:
	r1 = 0x35<32>
	r3 = badva + 0x2B<32>
	// succ:  l00016F10
l00016F10:
	r17 = -1<i32>
	r2 = r16
	call errlog_function (retsize: 0;)
	goto l00016F74
	// succ:  l00016F74
l00016F20:
	Mem0[r3:word32] = r4
	Mem0[r3 + 4<i32>:word32] = r5
	r4 = Mem0[r2 + 8<i32>:word32]
	Mem0[r3 + 8<i32>:word32] = r4
	r7 = Mem0[r2 + 12<i32>:word32]
	Mem0[r3 + 12<i32>:word32] = r7
	r4 = Mem0[r2 + 24<i32>:word32]
	Mem0[r3 + 24<i32>:word32] = r4
	r1 = Mem0[r2 + 16<i32>:word32]
	r2 = Mem0[r2 + 24<i32>:word32]
	r0 = Mem0[r3 + 16<i32>:word32]
	call fn00009560 (retsize: 0;)
	r2 = Mem0[r16:word32]
	r21 = r21 + 0x20<32>
	r20 = r20 + 4<32>
	branch r2 >u r19 l00016EE0
	// succ:  l00016F5C l00016EE0
l00016F5C:
	r19 = r19 + 1<32>
	Mem0[r29:word32] = r2
	r1 = 0x41<32>
	r4 = badva + 0x35<32>
	r2 = r16
	call logmsg_function (retsize: 0;)
	// succ:  l00016F74
l00016F74:
	r19_r18 = Mem0[r29 + 16<i32>:word64]
	r17_r16 = Mem0[r29 + 24<i32>:word64]
	r0 = r17
	v25 = r30
	r31 = Mem0[v25 + 4<i32>:word32]
	r30 = Mem0[v25:word32]
	r29 = v25 + 8<i32>
	return
	// succ:  output_execute_exit
output_execute_exit:


// output_check
// Return size: 0
define output_check
output_check_entry:
	r29 = fp
	// succ:  l00016F80
l00016F80:
	v4 = r29 - 8<i32>
	Mem0[v4:word32] = r30
	Mem0[v4 + 4<i32>:word32] = r31
	r30 = v4
	r29 = v4 - 16<i32>
	Mem0[r29 + 496<i32>:word64] = r17_r16
	r4 = badva + 0x13<32>
	r17 = r0
	r16 = r1
	r1 = 0x48<32>
	Mem0[r29:word32] = r17
	r2 = r16
	call logmsg_function (retsize: 0;)
	branch r2 == 0<32> l00016FE0
	// succ:  l00016FA8 l00016FE0
l00016FA8:
	r2 = Mem0[r17 + 16<i32>:word32]
	r3 = Mem0[r17 + 4<i32>:word32]
	branch r2 >u r4 l00016FE4
l00016FB0:
	branch r2 >u r4 l00016FE4
	// succ:  l00016FBC l00016FE4
l00016FBC:
	r4 = r4 + 1<32>
	r3 = r3 + 4<32>
	branch r5 == 1<32> l00016FB0
	// succ:  l00016FC4 l00016FB0
l00016FC4:
	r2 = r16
	r1 = 0x4A<32>
	r3 = badva + 0x2B<32>
	call errlog_function (retsize: 0;)
	v17 = r30
	r31 = Mem0[v17 + 4<i32>:word32]
	r30 = Mem0[v17:word32]
	r29 = v17 + 8<i32>
	return
	// succ:  output_check_exit
l00016FE0:
	r2 = r16
	r1 = 0x4C<32>
	r4 = badva + 0x22<32>
	goto l00016FEC
	// succ:  l00016FEC
l00016FE4:
	r2 = r16
	r1 = 0x4C<32>
	// succ:  l00016FEC
l00016FEC:
	Mem0[r29:word32] = r17
	call logmsg_function (retsize: 0;)
	r0 = 0<32>
	v18 = r30
	r31 = Mem0[v18 + 4<i32>:word32]
	r30 = Mem0[v18:word32]
	r29 = v18 + 8<i32>
	return
	// succ:  output_check_exit
output_check_exit:


// logmsg_function
// Return size: 0
define logmsg_function
logmsg_function_entry:
	r29 = fp
	// succ:  l00016FFC
l00016FFC:
	v4 = r29 - 8<i32>
	Mem0[v4:word32] = r30
	Mem0[v4 + 4<i32>:word32] = r31
	r30 = v4
	r29 = v4 - 8<i32>
	r3 = 2<32>
	branch r3 >u r5 l00017024
	goto l0001700C
	// succ:  l0001700C l00017000_thunk_errlog_function
l00017000_thunk_errlog_function:
	call errlog_function (retsize: 0;)
	return
	// succ:  logmsg_function_exit
l0001700C:
	r5 = Mem0[r2 + 16<i32>:word32]
	r5 = r29 + 0x10<32>
	r3 = 2<32>
	r0 = badva + 0x2F<32>
	Mem0[r29 + 1<i32>:byte] = r6
	r6 = r29 + 0x10<32>
	call logv (retsize: 0;)
	// succ:  l00017014_thunk_errlog_function
l00017014_thunk_errlog_function:
	call errlog_function (retsize: 0;)
	return
	// succ:  logmsg_function_exit
logmsg_function_exit:


// errlog_function
// Return size: 0
define errlog_function
errlog_function_entry:
	r29 = fp
	// succ:  l00017024
l00017024:
	v4 = r29 - 8<i32>
	Mem0[v4:word32] = r30
	Mem0[v4 + 4<i32>:word32] = r31
	r30 = v4
	r29 = v4 - 8<i32>
	r4 = r3
	r0 = badva + 0x13<32>
	Mem0[r29 + 1<i32>:byte] = r6
	r6 = r29 + 0x10<32>
	r5 = r29 + 0x10<32>
	r3 = 0<32>
	v13 = r30
	r31 = Mem0[v13 + 4<i32>:word32]
	r30 = Mem0[v13:word32]
	r29 = v13 + 8<i32>
	return
	// succ:  errlog_function_exit
errlog_function_exit:


// pprint_8_execute
// Return size: 0
define pprint_8_execute
pprint_8_execute_entry:
	r29 = fp
	// succ:  l00017050
l00017050:
	v4 = r29 - 8<i32>
	Mem0[v4:word32] = r30
	Mem0[v4 + 4<i32>:word32] = r31
	r30 = v4
	r29 = v4 - 72<i32>
	r4 = badva + 0x2F<32>
	r5 = Mem0[r0 + 28<i32>:word32]
	r2 = Mem0[r0 + 4<i32>:word32]
	Mem0[r29 + 56<i32>:word64] = r19_r18
	Mem0[r29 + 64<i32>:word64] = r17_r16
	r1 = 0x48<32>
	r16 = r1
	r7 = Mem0[r2:word32]
	Mem0[r29 + 40<i32>:word64] = r23_r22
	Mem0[r29 + 48<i32>:word64] = r21_r20
	Mem0[r29 + 32<i32>:word64] = r25_r24
	r17 = Mem0[r7 + 16<i32>:word32]
	r19 = Mem0[r7 + 8<i32>:word32]
	r18 = Mem0[r7 + 12<i32>:word32]
	r21 = Mem0[r7:word32]
	r20 = Mem0[r7 + 4<i32>:word32]
	Mem0[r29 + 24<i32>:word64] = r27_r26
	Mem0[r29 + 4<i32>:word32] = r5
	Mem0[r29:word32] = r0
	call logmsg_function (retsize: 0;)
	r4 = badva + 0x3F<32>
	Mem0[r29 + 12<i32>:word32] = r18
	Mem0[r29:word32] = r21
	r1 = 0x48<32>
	Mem0[r29 + 4<i32>:word32] = r20
	Mem0[r29 + 8<i32>:word32] = r19
	call logmsg_function (retsize: 0;)
	r22 = 0<32>
	branch p0 l0001712C
	// succ:  l000170C0 l0001712C
l000170C0:
	p0 = r13 == 0<32>
	r23 = 0<32>
	branch p0 l00017124
l000170C4:
	r23 = 0<32>
	// succ:  l000170C8 l00017124
l000170C8:
	p0 = r12 == 0<32>
	r24 = 0<32>
	branch p0 l0001711C
l000170CC:
	r24 = 0<32>
	// succ:  l000170D0 l0001711C
l000170D0:
	p0 = r11 == 0<32>
	r26 = 0<32>
	r25 = r17
	branch p0 l00017114
l000170D4:
	r26 = 0<32>
	r25 = r17
	// succ:  l000170DC l00017114
l000170DC:
	p0 = r10 == 0<32>
	Mem0[r29 + 4<i32>:byte] = r2
	r25 = r25 + 1<i32>
	r2 = Mem0[r25:byte]
	r4 = badva + 0x25<32>
	// succ:  l000170E0
l000170E0:
	Mem0[r29 + 4<i32>:word32] = r23
	Mem0[r29 + 8<i32>:word32] = r24
	Mem0[r29 + 12<i32>:word32] = r26
	Mem0[r29:word32] = r22
	call logmsg_function (retsize: 0;)
	branch r26 == r18 l000170E0
	// succ:  l00017114 l000170E0
l00017114:
	r26 = r26 + 1<32>
	branch r24 == r19 l000170D4
	goto l00017120
	// succ:  l00017120 l000170D4
l0001711C:
	branch r23 == r20 l000170CC
	goto l00017128
	// succ:  l00017128 l000170CC
l00017120:
	r24 = r24 + 1<32>
	branch r23 == r20 l000170CC
	goto l00017128
	// succ:  l00017128 l000170CC
l00017124:
	branch r22 == r21 l000170C4
	goto l00017130
	// succ:  l00017130 l000170C4
l00017128:
	branch r22 == r21 l000170C4
	goto l00017130
	// succ:  l00017130 l000170C4
l0001712C:
	r19_r18 = Mem0[r29 + 56<i32>:word64]
	r17_r16 = Mem0[r29 + 64<i32>:word64]
	r0 = 0<32>
	goto l00017134
	// succ:  l00017134
l00017130:
	r19_r18 = Mem0[r29 + 56<i32>:word64]
	r17_r16 = Mem0[r29 + 64<i32>:word64]
	// succ:  l00017134
l00017134:
	r23_r22 = Mem0[r29 + 40<i32>:word64]
	r21_r20 = Mem0[r29 + 48<i32>:word64]
	r27_r26 = Mem0[r29 + 24<i32>:word64]
	r25_r24 = Mem0[r29 + 32<i32>:word64]
	v36 = r30
	r31 = Mem0[v36 + 4<i32>:word32]
	r30 = Mem0[v36:word32]
	r29 = v36 + 8<i32>
	return
	// succ:  pprint_8_execute_exit
pprint_8_execute_exit:


// pprint_check
// Return size: 0
define pprint_check
pprint_check_entry:
	r29 = fp
	// succ:  l00017144
l00017144:
	v4 = r29 - 8<i32>
	Mem0[v4:word32] = r30
	Mem0[v4 + 4<i32>:word32] = r31
	r30 = v4
	r29 = v4 - 0<i32>
	r2 = r1
	branch r3 == 2<32> l0001716C
	// succ:  l00017158 l0001716C
l00017158:
	r3 = Mem0[r0 + 16<i32>:word32]
	r1 = 0x4E<32>
	r3 = badva + 0x3E<32>
	call errlog_function (retsize: 0;)
	v12 = r30
	r31 = Mem0[v12 + 4<i32>:word32]
	r30 = Mem0[v12:word32]
	r29 = v12 + 8<i32>
	return
	// succ:  pprint_check_exit
l00017164:
	branch r3 == 0<32> l00017184
	goto l00017174
	// succ:  l00017174 l00017184
l0001716C:
	branch r3 == 0<32> l00017184
	// succ:  l00017174 l00017184
l00017174:
	goto l00017164
	// succ:  l00017164
l00017184:
	r1 = 0x50<32>
	r3 = 2<32>
	call logmsg_function (retsize: 0;)
	v13 = r30
	r31 = Mem0[v13 + 4<i32>:word32]
	r30 = Mem0[v13:word32]
	r29 = v13 + 8<i32>
	return
	// succ:  pprint_check_exit
pprint_check_exit:


// pprint_32_execute
// Return size: 0
define pprint_32_execute
pprint_32_execute_entry:
	r29 = fp
	// succ:  l00017194
l00017194:
	v4 = r29 - 8<i32>
	Mem0[v4:word32] = r30
	Mem0[v4 + 4<i32>:word32] = r31
	r30 = v4
	r29 = v4 - 72<i32>
	r4 = badva + 0x2B<32>
	r5 = Mem0[r0 + 28<i32>:word32]
	r2 = Mem0[r0 + 4<i32>:word32]
	Mem0[r29 + 56<i32>:word64] = r19_r18
	Mem0[r29 + 64<i32>:word64] = r17_r16
	r1 = 0x49<32>
	r16 = r1
	r7 = Mem0[r2:word32]
	Mem0[r29 + 40<i32>:word64] = r23_r22
	Mem0[r29 + 48<i32>:word64] = r21_r20
	Mem0[r29 + 32<i32>:word64] = r25_r24
	r17 = Mem0[r7 + 16<i32>:word32]
	r19 = Mem0[r7 + 8<i32>:word32]
	r18 = Mem0[r7 + 12<i32>:word32]
	r21 = Mem0[r7:word32]
	r20 = Mem0[r7 + 4<i32>:word32]
	Mem0[r29 + 24<i32>:word64] = r27_r26
	Mem0[r29 + 4<i32>:word32] = r5
	Mem0[r29:word32] = r0
	call logmsg_function (retsize: 0;)
	r4 = badva + 0x3B<32>
	Mem0[r29 + 12<i32>:word32] = r18
	Mem0[r29:word32] = r21
	r1 = 0x49<32>
	Mem0[r29 + 4<i32>:word32] = r20
	Mem0[r29 + 8<i32>:word32] = r19
	call logmsg_function (retsize: 0;)
	r22 = 0<32>
	branch p0 l00017270
	// succ:  l00017204 l00017270
l00017204:
	p0 = r13 == 0<32>
	r23 = 0<32>
	branch p0 l00017268
l00017208:
	r23 = 0<32>
	// succ:  l0001720C l00017268
l0001720C:
	p0 = r12 == 0<32>
	r24 = 0<32>
	branch p0 l00017260
l00017210:
	r24 = 0<32>
	// succ:  l00017214 l00017260
l00017214:
	p0 = r11 == 0<32>
	r26 = 0<32>
	r25 = r17
	branch p0 l00017258
l00017218:
	r26 = 0<32>
	r25 = r17
	// succ:  l00017220 l00017258
l00017220:
	p0 = r10 == 0<32>
	Mem0[r29 + 4<i32>:byte] = r2
	r25 = r25 + 4<i32>
	r2 = Mem0[r25:word32]
	r4 = badva + 0x1C<32>
	// succ:  l00017224
l00017224:
	Mem0[r29 + 4<i32>:word32] = r23
	Mem0[r29 + 8<i32>:word32] = r24
	Mem0[r29 + 12<i32>:word32] = r26
	Mem0[r29:word32] = r22
	call logmsg_function (retsize: 0;)
	branch r26 == r18 l00017224
	// succ:  l00017258 l00017224
l00017258:
	r26 = r26 + 1<32>
	branch r24 == r19 l00017218
	goto l00017264
	// succ:  l00017264 l00017218
l00017260:
	branch r23 == r20 l00017210
	goto l0001726C
	// succ:  l0001726C l00017210
l00017264:
	r24 = r24 + 1<32>
	branch r23 == r20 l00017210
	goto l0001726C
	// succ:  l0001726C l00017210
l00017268:
	branch r22 == r21 l00017208
	goto l00017274
	// succ:  l00017274 l00017208
l0001726C:
	branch r22 == r21 l00017208
	goto l00017274
	// succ:  l00017274 l00017208
l00017270:
	r19_r18 = Mem0[r29 + 56<i32>:word64]
	r17_r16 = Mem0[r29 + 64<i32>:word64]
	r0 = 0<32>
	goto l00017278
	// succ:  l00017278
l00017274:
	r19_r18 = Mem0[r29 + 56<i32>:word64]
	r17_r16 = Mem0[r29 + 64<i32>:word64]
	// succ:  l00017278
l00017278:
	r23_r22 = Mem0[r29 + 40<i32>:word64]
	r21_r20 = Mem0[r29 + 48<i32>:word64]
	r27_r26 = Mem0[r29 + 24<i32>:word64]
	r25_r24 = Mem0[r29 + 32<i32>:word64]
	v36 = r30
	r31 = Mem0[v36 + 4<i32>:word32]
	r30 = Mem0[v36:word32]
	r29 = v36 + 8<i32>
	return
	// succ:  pprint_32_execute_exit
pprint_32_execute_exit:


// pprint_f_execute
// Return size: 0
define pprint_f_execute
pprint_f_execute_entry:
	r29 = fp
	// succ:  l00017290
l00017290:
	v4 = r29 - 8<i32>
	Mem0[v4:word32] = r30
	Mem0[v4 + 4<i32>:word32] = r31
	r30 = v4
	r29 = v4 - 72<i32>
	r4 = badva + 0x2F<32>
	r5 = Mem0[r0 + 28<i32>:word32]
	r2 = Mem0[r0 + 4<i32>:word32]
	Mem0[r29 + 56<i32>:word64] = r19_r18
	Mem0[r29 + 64<i32>:word64] = r17_r16
	r1 = 0x4A<32>
	r16 = r1
	r7 = Mem0[r2:word32]
	Mem0[r29 + 40<i32>:word64] = r23_r22
	Mem0[r29 + 48<i32>:word64] = r21_r20
	Mem0[r29 + 32<i32>:word64] = r25_r24
	r17 = Mem0[r7 + 16<i32>:word32]
	r19 = Mem0[r7 + 8<i32>:word32]
	r18 = Mem0[r7 + 12<i32>:word32]
	r21 = Mem0[r7:word32]
	r20 = Mem0[r7 + 4<i32>:word32]
	Mem0[r29 + 24<i32>:word64] = r27_r26
	Mem0[r29 + 4<i32>:word32] = r5
	Mem0[r29:word32] = r0
	call logmsg_function (retsize: 0;)
	r4 = badva + 0x3F<32>
	Mem0[r29 + 12<i32>:word32] = r18
	Mem0[r29:word32] = r21
	r1 = 0x4A<32>
	Mem0[r29 + 4<i32>:word32] = r20
	Mem0[r29 + 8<i32>:word32] = r19
	call logmsg_function (retsize: 0;)
	r22 = 0<32>
	branch p0 l00017374
	// succ:  l00017300 l00017374
l00017300:
	p0 = r13 == 0<32>
	r23 = 0<32>
	branch p0 l0001736C
l00017304:
	r23 = 0<32>
	// succ:  l00017308 l0001736C
l00017308:
	p0 = r12 == 0<32>
	r24 = 0<32>
	branch p0 l00017364
l0001730C:
	r24 = 0<32>
	// succ:  l00017310 l00017364
l00017310:
	p0 = r11 == 0<32>
	r26 = 0<32>
	r25 = r17
	branch p0 l0001735C
l00017314:
	r26 = 0<32>
	r25 = r17
	// succ:  l0001731C l0001735C
l0001731C:
	p0 = r10 == 0<32>
	r2 = Mem0[r25:word32]
	r25 = r25 + 4<32>
	r4 = badva + 0xE<32>
	// succ:  l00017320
l00017320:
	r1_r0 = CONVERT(r2, real32, real64)
	Mem0[r29 + 4<i32>:word32] = r23
	Mem0[r29 + 8<i32>:word32] = r24
	Mem0[r29 + 12<i32>:word32] = r26
	Mem0[r29 + 16<i32>:word64] = r1_r0
	r1 = 0x4A<32>
	Mem0[r29:word32] = r22
	call logmsg_function (retsize: 0;)
	branch r26 == r18 l00017320
	// succ:  l0001735C l00017320
l0001735C:
	r26 = r26 + 1<32>
	branch r24 == r19 l00017314
	goto l00017368
	// succ:  l00017368 l00017314
l00017364:
	branch r23 == r20 l0001730C
	goto l00017370
	// succ:  l00017370 l0001730C
l00017368:
	r24 = r24 + 1<32>
	branch r23 == r20 l0001730C
	goto l00017370
	// succ:  l00017370 l0001730C
l0001736C:
	branch r22 == r21 l00017304
	goto l00017378
	// succ:  l00017378 l00017304
l00017370:
	branch r22 == r21 l00017304
	goto l00017378
	// succ:  l00017378 l00017304
l00017374:
	r19_r18 = Mem0[r29 + 56<i32>:word64]
	r17_r16 = Mem0[r29 + 64<i32>:word64]
	r0 = 0<32>
	goto l0001737C
	// succ:  l0001737C
l00017378:
	r19_r18 = Mem0[r29 + 56<i32>:word64]
	r17_r16 = Mem0[r29 + 64<i32>:word64]
	// succ:  l0001737C
l0001737C:
	r23_r22 = Mem0[r29 + 40<i32>:word64]
	r21_r20 = Mem0[r29 + 48<i32>:word64]
	r27_r26 = Mem0[r29 + 24<i32>:word64]
	r25_r24 = Mem0[r29 + 32<i32>:word64]
	v37 = r30
	r31 = Mem0[v37 + 4<i32>:word32]
	r30 = Mem0[v37:word32]
	r29 = v37 + 8<i32>
	return
	// succ:  pprint_f_execute_exit
pprint_f_execute_exit:


// logmsg_function
// Return size: 0
define logmsg_function
logmsg_function_entry:
	r29 = fp
	// succ:  l0001738C
l0001738C:
	v4 = r29 - 8<i32>
	Mem0[v4:word32] = r30
	Mem0[v4 + 4<i32>:word32] = r31
	r30 = v4
	r29 = v4 - 8<i32>
	branch r3 >u r5 l00017390_thunk_errlog_function
	goto l0001739C
	// succ:  l0001739C l00017390_thunk_errlog_function
l00017390_thunk_errlog_function:
	call errlog_function (retsize: 0;)
	return
	// succ:  logmsg_function_exit
l0001739C:
	r5 = Mem0[r2 + 16<i32>:word32]
	r6 = r29 + 0x10<32>
	r5 = r29 + 0x10<32>
	r0 = badva + 0xB<32>
	Mem0[r29 + 4<i32>:word32] = r6
	call logv (retsize: 0;)
	v13 = r30
	r31 = Mem0[v13 + 4<i32>:word32]
	r30 = Mem0[v13:word32]
	r29 = v13 + 8<i32>
	return
	// succ:  logmsg_function_exit
logmsg_function_exit:


// errlog_function
// Return size: 0
define errlog_function
errlog_function_entry:
	r29 = fp
	// succ:  l000173B0
l000173B0:
	v4 = r29 - 8<i32>
	Mem0[v4:word32] = r30
	Mem0[v4 + 4<i32>:word32] = r31
	r30 = v4
	r29 = v4 - 8<i32>
	r4 = r3
	r0 = badva + 0x33<32>
	Mem0[r29 + 1<i32>:byte] = r6
	r6 = r29 + 0x10<32>
	r5 = r29 + 0x10<32>
	r3 = 0<32>
	v13 = r30
	r31 = Mem0[v13 + 4<i32>:word32]
	r30 = Mem0[v13:word32]
	r29 = v13 + 8<i32>
	return
	// succ:  errlog_function_exit
errlog_function_exit:


// prefree_execute
// Return size: 0
define prefree_execute
prefree_execute_entry:
	r29 = fp
	// succ:  l000173E0
l000173E0:
	r2 = r1
	r1 = 0x31<32>
	r3 = badva + 0x25<32>
	v8 = r29 - 8<i32>
	Mem0[v8:word32] = r30
	Mem0[v8 + 4<i32>:word32] = r31
	r30 = v8
	r29 = v8 - 0<i32>
	call errlog_function (retsize: 0;)
	v11 = r30
	r31 = Mem0[v11 + 4<i32>:word32]
	r30 = Mem0[v11:word32]
	r29 = v11 + 8<i32>
	return
	// succ:  prefree_execute_exit
prefree_execute_exit:


// prefree_check
// Return size: 0
define prefree_check
prefree_check_entry:
	r29 = fp
	// succ:  l00017400
l00017400:
	r2 = r1
	r1 = 0x36<32>
	r3 = badva + 0x21<32>
	v8 = r29 - 8<i32>
	Mem0[v8:word32] = r30
	Mem0[v8 + 4<i32>:word32] = r31
	r30 = v8
	r29 = v8 - 0<i32>
	call errlog_function (retsize: 0;)
	v11 = r30
	r31 = Mem0[v11 + 4<i32>:word32]
	r30 = Mem0[v11:word32]
	r29 = v11 + 8<i32>
	return
	// succ:  prefree_check_exit
prefree_check_exit:


// prefree_ctor
// Return size: 0
define prefree_ctor
prefree_ctor_entry:
	r29 = fp
	// succ:  l00017420
l00017420:
	v4 = r29 - 8<i32>
	Mem0[v4:word32] = r30
	Mem0[v4 + 4<i32>:word32] = r31
	r30 = v4
	r29 = v4 - 40<i32>
	Mem0[r29 + 488<i32>:word64] = r19_r18
	r6 = badva + 0x29<32>
	r19_r18 = r5_r0
	Mem0[r29 + 16<i32>:word64] = r21_r20
	Mem0[r29 + 32<i32>:word64] = r17_r16
	r21_r20 = r2_r3
	r17_r16 = r4_r1
	r4 = r6
	r2 = r18
	r1 = 0x43<32>
	Mem0[r29 + 8<i32>:word64] = r23_r22
	r22 = Mem0[r29 + 48<i32>:word64]
	r23 = Mem0[r29 + 52<i32>:word32]
	Mem0[r29:word32] = r16
	call logmsg_function (retsize: 0;)
	Mem0[r29 + 4<i32>:word32] = r23
	r1_r0 = r16_r18
	r3_r2 = r20_r21
	r5_r4 = r19_r17
	Mem0[r29:word32] = r22
	call node_alloc_common (retsize: 0;)
	r17_r16 = Mem0[r29 + 32<i32>:word64]
	r21_r20 = Mem0[r29 + 16<i32>:word64]
	r19_r18 = Mem0[r29 + 24<i32>:word64]
	v36 = r30
	r31 = Mem0[v36 + 4<i32>:word32]
	r30 = Mem0[v36:word32]
	r29 = v36 + 8<i32>
	return
	// succ:  prefree_ctor_exit
prefree_ctor_exit:


// prefree_dtor
// Return size: 0
define prefree_dtor
prefree_dtor_entry:
	r29 = fp
	// succ:  l00017480
l00017480:
	v4 = r29 - 8<i32>
	Mem0[v4:word32] = r30
	Mem0[v4 + 4<i32>:word32] = r31
	r30 = v4
	r29 = v4 - 16<i32>
	Mem0[r29 + 496<i32>:word64] = r17_r16
	r4 = badva + 0x34<32>
	r17 = r0
	r16 = r1
	r1 = 0x51<32>
	Mem0[r29:word32] = r17
	r2 = r16
	call logmsg_function (retsize: 0;)
	r1_r0 = r16_r17
	v17 = r30
	r31 = Mem0[v17 + 4<i32>:word32]
	r30 = Mem0[v17:word32]
	r29 = v17 + 8<i32>
	r17_r16 = Mem0[r29 + 8<i32>:word64]
	// succ:  l000174A0_thunk_node_free_common
l000174A0_thunk_node_free_common:
	call node_free_common (retsize: 0;)
	return
	// succ:  prefree_dtor_exit
prefree_dtor_exit:


// logmsg_function
// Return size: 0
define logmsg_function
logmsg_function_entry:
	r29 = fp
	// succ:  l000174A8
l000174A8:
	v4 = r29 - 8<i32>
	Mem0[v4:word32] = r30
	Mem0[v4 + 4<i32>:word32] = r31
	r30 = v4
	r29 = v4 - 8<i32>
	r3 = 2<32>
	branch r3 >u r5 l000174AC_thunk_errlog_function
	goto l000174B8
	// succ:  l000174B8 l000174AC_thunk_errlog_function
l000174AC_thunk_errlog_function:
	call errlog_function (retsize: 0;)
	return
	// succ:  logmsg_function_exit
l000174B8:
	r5 = Mem0[r2 + 16<i32>:word32]
	r5 = r29 + 0x10<32>
	r3 = 2<32>
	r0 = badva + 0x23<32>
	Mem0[r29 + 1<i32>:byte] = r6
	r6 = r29 + 0x10<32>
	call logv (retsize: 0;)
	// succ:  l000174C0_thunk_errlog_function
l000174C0_thunk_errlog_function:
	call errlog_function (retsize: 0;)
	return
	// succ:  logmsg_function_exit
logmsg_function_exit:


// errlog_function
// Return size: 0
define errlog_function
errlog_function_entry:
	r29 = fp
	// succ:  l000174D0
l000174D0:
	v4 = r29 - 8<i32>
	Mem0[v4:word32] = r30
	Mem0[v4 + 4<i32>:word32] = r31
	r30 = v4
	r29 = v4 - 8<i32>
	r4 = r3
	r0 = badva + 7<32>
	Mem0[r29 + 1<i32>:byte] = r6
	r6 = r29 + 0x10<32>
	r5 = r29 + 0x10<32>
	r3 = 0<32>
	v13 = r30
	r31 = Mem0[v13 + 4<i32>:word32]
	r30 = Mem0[v13:word32]
	r29 = v13 + 8<i32>
	return
	// succ:  errlog_function_exit
errlog_function_exit:


// quantize_execute
// Return size: 0
define quantize_execute
quantize_execute_entry:
	r29 = fp
	// succ:  l00017500
l00017500:
	v4 = r29 - 8<i32>
	Mem0[v4:word32] = r30
	Mem0[v4 + 4<i32>:word32] = r31
	r30 = v4
	r29 = v4 - 64<i32>
	r4 = badva + 5<32>
	r5 = Mem0[r0 + 8<i32>:word32]
	r3 = Mem0[r0 + 4<i32>:word32]
	Mem0[r29 + 16<i32>:word64] = r27_r26
	Mem0[r29 + 24<i32>:word64] = r25_r24
	r7 = Mem0[r3 + 8<i32>:word32]
	r6 = Mem0[r3:word32]
	Mem0[r29 + 48<i32>:word64] = r19_r18
	r3 = Mem0[r3 + 4<i32>:word32]
	r9 = Mem0[r6 + 4<i32>:word32]
	r8 = Mem0[r6:word32]
	r13 = Mem0[r6 + 12<i32>:word32]
	r12 = Mem0[r6 + 8<i32>:word32]
	Mem0[r29 + 56<i32>:word64] = r17_r16
	r16 = r1
	r19 = Mem0[r5:word32]
	r3 = Mem0[r3 + 16<i32>:word32]
	r7 = Mem0[r7 + 16<i32>:word32]
	r2 = r16
	r1 = 0x49<32>
	Mem0[r29 + 32<i32>:word64] = r23_r22
	r9 = Mem0[r5 + 4<i32>:word32]
	Mem0[r29 + 40<i32>:word64] = r21_r20
	r5 = Mem0[r5 + 8<i32>:word32]
	Mem0[r29 + 8<i32>:word32] = r9
	Mem0[r29 + 12<i32>:word32] = r5
	r22 = Mem0[r6 + 16<i32>:word32]
	r17 = Mem0[r3:word32]
	r23 = Mem0[r19 + 16<i32>:word32]
	Mem0[r29:word32] = r0
	r20 = Mem0[r7:word32]
	call fn00017A04 (retsize: 0;)
	branch r21 >u r2 l000175B8
	// succ:  l00017594 l000175B8
l00017594:
	r2 = Mem0[r19 + 20<i32>:word32]
	r2 = r16
	r1 = 0x4A<32>
	r3 = badva + 0xB<32>
	call errlog_function (retsize: 0;)
	r0 = 0xFFFFFFFF<32>
	goto l000176BC
	// succ:  l000176BC
l000175B8:
	r4 = 0<32>
	Mem0[r19 + 24<i32>:word32] = r21
	r18 = r4
	Mem0[r19:word32] = r2
	Mem0[r19 + 8<i32>:word32] = r3
	r1_r0 = r17_r18
	Mem0[r19 + 4<i32>:word32] = r7
	Mem0[r19 + 12<i32>:word32] = r6
	call fn000097B0 (retsize: 0;)
	r16 = r0
	r17 = 0x437E0000<32>
	call fn00017A50 (retsize: 0;)
	r1 = r17
	r19 = r0
	call fn00009610 (retsize: 0;)
	r1_r0 = r19_r17
	r20 = r0
	call fn00009610 (retsize: 0;)
	r16 = r0
	r2 = 0x2B<32>
	r3 = 0x3FEFF7CE<32>
	call fn000097D4 (retsize: 0;)
	r1_r0 = CONVERT(r4, real32, real64)
	r3 = 0x437F0000<32>
	r2 = 0<32> - r2
	r19 = 1<32>
	r25 = 0x100<32>
	r17 = r18
	branch p0 l0001768C
	// succ:  l00017648 l0001768C
l00017648:
	r2 = Mem0[r22:word32]
	// succ:  l0001764C
l0001764C:
	call fn00009624 (retsize: 0;)
	r2 = 0<32>
	r2 = r3 + 0<32>
	branch p0 l00017670
	// succ:  l00017668 l00017670
l00017668:
	p0 = __bit<word32,word32>(r3, 0<32>)
	r2 = 0xFF<32>
	p0 = r25 > r3
	// succ:  l00017670
l00017670:
	Mem0[r23:byte] = r2
	r23 = r23 + 1<i32>
	r19 = r19 + 1<32>
	r22 = r22 + 4<32>
	branch p0 l0001764C
	// succ:  l00017688 l0001764C
l00017688:
	r3 = Mem0[r29 + 12<i32>:word64]
	r4 = Mem0[r29 + 8<i32>:word64]
	r0 = 0<32>
	goto l00017690
	// succ:  l00017690
l0001768C:
	r3 = Mem0[r29 + 12<i32>:word64]
	r4 = Mem0[r29 + 8<i32>:word64]
	// succ:  l00017690
l00017690:
	Mem0[r4 + 12<i32>:word32] = 0xFFFFFF81<32>
	Mem0[r4 + 4<i32>:word32] = 1<32>
	Mem0[r4 + 8<i32>:word32] = 1<32>
	Mem0[r3 + 8<i32>:word32] = 1<32>
	Mem0[r4:word32] = 1<32>
	Mem0[r3 + 12<i32>:word32] = 1<32>
	Mem0[r3:word32] = 1<32>
	Mem0[r3 + 4<i32>:word32] = 0xFFFFFF81<32>
	r2 = Mem0[r4 + 16<i32>:word32]
	Mem0[r2:word32] = r18
	r7 = Mem0[r3 + 16<i32>:word32]
	Mem0[r4 + 24<i32>:word32] = 4<32>
	Mem0[r7:word32] = r17
	Mem0[r3 + 24<i32>:word32] = 4<32>
	// succ:  l000176BC
l000176BC:
	r19_r18 = Mem0[r29 + 48<i32>:word64]
	r17_r16 = Mem0[r29 + 56<i32>:word64]
	r23_r22 = Mem0[r29 + 32<i32>:word64]
	r21_r20 = Mem0[r29 + 40<i32>:word64]
	r27_r26 = Mem0[r29 + 16<i32>:word64]
	r25_r24 = Mem0[r29 + 24<i32>:word64]
	v40 = r30
	r31 = Mem0[v40 + 4<i32>:word32]
	r30 = Mem0[v40:word32]
	r29 = v40 + 8<i32>
	return
	// succ:  quantize_execute_exit
quantize_execute_exit:


// quantize_check
// Return size: 0
define quantize_check
quantize_check_entry:
	r29 = fp
	// succ:  l000176D0
l000176D0:
	// succ:  l000176D0_thunk_quantize_check__merged
l000176D0_thunk_quantize_check__merged:
	call quantize_check__merged (retsize: 0;)
	return
	// succ:  quantize_check_exit
quantize_check_exit:


// quantize_check__merged
// Return size: 0
define quantize_check__merged
quantize_check__merged_entry:
	r29 = fp
	// succ:  l000176D4
l000176D4:
	v4 = r29 - 8<i32>
	Mem0[v4:word32] = r30
	Mem0[v4 + 4<i32>:word32] = r31
	r30 = v4
	r29 = v4 - 24<i32>
	Mem0[r29 + 496<i32>:word64] = r17_r16
	r17_r16 = r0_r1
	p0 = r2 == 1<32>
	r1 = 0xA7<32>
	branch p0 l00017700
	// succ:  l000176E8 l00017700
l000176E8:
	Mem0[r29 + 2<i32>:byte] = r0
	r0 = p0
	r4 = badva + 0x2F<32>
	r1 = 0x9E<32>
	// succ:  l00017700
l00017700:
	r0 = p0
	r4 = badva + 0x29<32>
	Mem0[r29 + 8<i32>:word32] = r0
	Mem0[r29:word32] = r17
	r2 = r16
	call logmsg_function (retsize: 0;)
	r0 = Mem0[r29 + 8<i32>:word32]
	branch r2 == 6<32> l0001775C
	// succ:  l0001772C l0001775C
l0001772C:
	r2 = Mem0[r17 + 16<i32>:word32]
	p1 = r0
	r1 = 0x9F<32>
	branch p1 l0001774C
	// succ:  l00017738 l0001774C
l00017738:
	r3 = badva + 0x1D<32>
	r1 = 0xA8<32>
	r3 = badva + 0xD<32>
	r2 = r16
	call errlog_function (retsize: 0;)
	// succ:  l0001774C
l0001774C:
	v19 = r30
	r31 = Mem0[v19 + 4<i32>:word32]
	r30 = Mem0[v19:word32]
	r29 = v19 + 8<i32>
	return
	// succ:  quantize_check__merged_exit
l0001775C:
	r1 = 0xA0<32>
	branch p0 l00017780
	// succ:  l00017764 l00017780
l00017764:
	p0 = r2 == 6<32>
	branch p1 l0001774C
	// succ:  l00017770 l0001774C
l00017770:
	r3 = badva + 0x30<32>
	r1 = 0xA9<32>
	goto l0001774C
	// succ:  l0001774C
l00017780:
	r1 = 0xA1<32>
	branch p1 l00017798
	// succ:  l00017788 l00017798
l00017788:
	goto l000177AC
	// succ:  l000177AC
l00017798:
	r1 = 0xAA<32>
	r4 = badva + 0xC<32>
	Mem0[r29:word32] = r17
	r2 = r16
	call logmsg_function (retsize: 0;)
	// succ:  l000177AC
l000177AC:
	r0 = 0<32>
	v20 = r30
	r31 = Mem0[v20 + 4<i32>:word32]
	r30 = Mem0[v20:word32]
	r29 = v20 + 8<i32>
	return
	// succ:  quantize_check__merged_exit
quantize_check__merged_exit:


// dequantize_execute
// Return size: 0
define dequantize_execute
dequantize_execute_entry:
	r29 = fp
	// succ:  l000177B4
l000177B4:
	v4 = r29 - 8<i32>
	Mem0[v4:word32] = r30
	Mem0[v4 + 4<i32>:word32] = r31
	r30 = v4
	r29 = v4 - 56<i32>
	Mem0[r29 + 488<i32>:word64] = r19_r18
	r18 = r0
	Mem0[r29 + 48<i32>:word64] = r17_r16
	r7 = Mem0[r18 + 4<i32>:word32]
	r17 = r1
	r6 = Mem0[r18 + 8<i32>:word32]
	Mem0[r29 + 32<i32>:word64] = r21_r20
	Mem0[r29 + 24<i32>:word64] = r23_r22
	r5 = Mem0[r7 + 4<i32>:word32]
	r4 = Mem0[r7 + 8<i32>:word32]
	Mem0[r29 + 8<i32>:word64] = r27_r26
	Mem0[r29 + 16<i32>:word64] = r25_r24
	r3 = Mem0[r4 + 16<i32>:word32]
	r2 = Mem0[r5 + 16<i32>:word32]
	r23 = Mem0[r6:word32]
	r22 = Mem0[r7:word32]
	r2 = Mem0[r3:word32]
	r19 = Mem0[r2:word32]
	call fn00017A50 (retsize: 0;)
	r1 = 0x437F0000<32>
	call fn00009610 (retsize: 0;)
	r3 = Mem0[r22 + 4<i32>:word32]
	r2 = Mem0[r22:word32]
	r5 = 0x40800000<32>
	r7 = Mem0[r22 + 12<i32>:word32]
	r6 = Mem0[r22 + 8<i32>:word32]
	r4 = badva + 0x36<32>
	r16 = r0
	r1 = 0x75<32>
	r20 = Mem0[r23 + 16<i32>:word32]
	r2 = r17
	Mem0[r29:word32] = r18
	r22 = Mem0[r22 + 16<i32>:word32]
	call fn00017A04 (retsize: 0;)
	branch r18 >u r2 l00017880
	// succ:  l0001785C l00017880
l0001785C:
	r2 = Mem0[r23 + 20<i32>:word32]
	r0 = 0<32>
	r2 = r17
	r1 = 0x76<32>
	r3 = badva + 3<32>
	call errlog_function (retsize: 0;)
	r0 = 0xFFFFFFFF<32>
	goto l000178C8
	// succ:  l000178C8
l00017880:
	r2 = 0<32>
	Mem0[r23 + 4<i32>:word32] = r4
	Mem0[r23 + 24<i32>:word32] = r18
	r2 = 1<32>
	Mem0[r23 + 8<i32>:word32] = r5
	Mem0[r23:word32] = r3
	Mem0[r23 + 12<i32>:word32] = r3
	branch p0 l000178C8
	// succ:  l000178A0 l000178C8
l000178A0:
	// succ:  l000178A4
l000178A4:
	r22 = r22 + 1<i32>
	r3 = Mem0[r22:byte]
	r2 = r2 + 1<32>
	r5 = r19
	r20 = r20 + 4<32>
	branch p0 l000178A4
	goto l000178CC
	// succ:  l000178CC l000178A4
l000178C8:
	r19_r18 = Mem0[r29 + 40<i32>:word64]
	r17_r16 = Mem0[r29 + 48<i32>:word64]
	// succ:  l000178CC
l000178CC:
	r23_r22 = Mem0[r29 + 24<i32>:word64]
	r21_r20 = Mem0[r29 + 32<i32>:word64]
	r27_r26 = Mem0[r29 + 8<i32>:word64]
	r25_r24 = Mem0[r29 + 16<i32>:word64]
	v31 = r30
	r31 = Mem0[v31 + 4<i32>:word32]
	r30 = Mem0[v31:word32]
	r29 = v31 + 8<i32>
	return
	// succ:  dequantize_execute_exit
dequantize_execute_exit:


// dequantize_check
// Return size: 0
define dequantize_check
dequantize_check_entry:
	r29 = fp
	// succ:  l000178DC
l000178DC:
	// succ:  l000178DC_thunk_quantize_check__merged
l000178DC_thunk_quantize_check__merged:
	call quantize_check__merged (retsize: 0;)
	return
	// succ:  dequantize_check_exit
dequantize_check_exit:


// dequantize_i32_execute
// Return size: 0
define dequantize_i32_execute
dequantize_i32_execute_entry:
	r29 = fp
	// succ:  l000178E0
l000178E0:
	v4 = r29 - 8<i32>
	Mem0[v4:word32] = r30
	Mem0[v4 + 4<i32>:word32] = r31
	r30 = v4
	r29 = v4 - 48<i32>
	r6 = Mem0[r0 + 8<i32>:word32]
	r7 = Mem0[r0 + 4<i32>:word32]
	Mem0[r29 + 32<i32>:word64] = r19_r18
	Mem0[r29 + 40<i32>:word64] = r17_r16
	r16 = r1
	r5 = Mem0[r7 + 4<i32>:word32]
	r4 = Mem0[r7 + 8<i32>:word32]
	Mem0[r29 + 16<i32>:word64] = r23_r22
	Mem0[r29 + 24<i32>:word64] = r21_r20
	r3 = Mem0[r4 + 16<i32>:word32]
	r2 = Mem0[r5 + 16<i32>:word32]
	Mem0[r29:word64] = r27_r26
	Mem0[r29 + 8<i32>:word64] = r25_r24
	r3 = Mem0[r3:word32]
	r2 = Mem0[r2:word32]
	r20 = Mem0[r6:word32]
	r18 = Mem0[r7:word32]
	call fn00017A50 (retsize: 0;)
	r3 = Mem0[r18 + 4<i32>:word32]
	r2 = Mem0[r18:word32]
	r5 = 0x40800000<32>
	r6 = Mem0[r18 + 12<i32>:word32]
	r4 = Mem0[r18 + 8<i32>:word32]
	r7 = 0x2F800000<32>
	r1 = 0x91<32>
	r18 = Mem0[r18 + 16<i32>:word32]
	r2 = r16
	r19 = Mem0[r20 + 16<i32>:word32]
	call fn00017A04 (retsize: 0;)
	branch r26 >u r2 l000179A4
	// succ:  l00017980 l000179A4
l00017980:
	r2 = Mem0[r20 + 20<i32>:word32]
	r0 = 0<32>
	r2 = r16
	r1 = 0x92<32>
	r3 = badva + 0x1F<32>
	call errlog_function (retsize: 0;)
	r0 = 0xFFFFFFFF<32>
	goto l000179EC
	// succ:  l000179EC
l000179A4:
	r2 = 0<32>
	Mem0[r20 + 4<i32>:word32] = r4
	Mem0[r20 + 24<i32>:word32] = r26
	r2 = 1<32>
	Mem0[r20 + 8<i32>:word32] = r5
	Mem0[r20:word32] = r3
	Mem0[r20 + 12<i32>:word32] = r3
	branch p0 l000179EC
	// succ:  l000179C8 l000179EC
l000179C8:
	r18 = r18 + 4<i32>
	r3 = Mem0[r18:word32]
	r2 = r2 + 1<32>
	goto l000179F0
	// succ:  l000179F0
l000179EC:
	r19_r18 = Mem0[r29 + 32<i32>:word64]
	r17_r16 = Mem0[r29 + 40<i32>:word64]
	// succ:  l000179F0
l000179F0:
	r23_r22 = Mem0[r29 + 16<i32>:word64]
	r21_r20 = Mem0[r29 + 24<i32>:word64]
	r27_r26 = Mem0[r29:word64]
	r25_r24 = Mem0[r29 + 8<i32>:word64]
	v29 = r30
	r31 = Mem0[v29 + 4<i32>:word32]
	r30 = Mem0[v29:word32]
	r29 = v29 + 8<i32>
	return
	// succ:  dequantize_i32_execute_exit
dequantize_i32_execute_exit:


// logmsg_function
// Return size: 0
define logmsg_function
logmsg_function_entry:
	r29 = fp
	// succ:  l00017A00
l00017A00:
	v4 = r29 - 8<i32>
	Mem0[v4:word32] = r30
	Mem0[v4 + 4<i32>:word32] = r31
	r30 = v4
	r29 = v4 - 8<i32>
	r3 = 2<32>
	branch r3 >u r5 l00017A04_thunk_errlog_function
	goto l00017A04_thunk_fn00017A10
	// succ:  l00017A04_thunk_fn00017A10 l00017A04_thunk_errlog_function
l00017A04_thunk_errlog_function:
	call errlog_function (retsize: 0;)
	return
	// succ:  logmsg_function_exit
l00017A04_thunk_fn00017A10:
	call fn00017A10 (retsize: 0;)
	return
	// succ:  logmsg_function_exit
logmsg_function_exit:


// fn00017A04
// Return size: 0
define fn00017A04
fn00017A04_entry:
	r29 = fp
	// succ:  l00017A04
l00017A04:
	branch r3 >u r5 l00017A04_thunk_errlog_function
	goto l00017A04_thunk_fn00017A10
	// succ:  l00017A04_thunk_fn00017A10 l00017A04_thunk_errlog_function
l00017A04_thunk_errlog_function:
	call errlog_function (retsize: 0;)
	return
	// succ:  fn00017A04_exit
l00017A04_thunk_fn00017A10:
	call fn00017A10 (retsize: 0;)
	return
	// succ:  fn00017A04_exit
fn00017A04_exit:


// fn00017A10
// Return size: 0
define fn00017A10
fn00017A10_entry:
	r29 = fp
	// succ:  l00017A10
l00017A10:
	r5 = Mem0[r2 + 16<i32>:word32]
	r5 = r29 + 0x10<32>
	r3 = 2<32>
	r0 = badva + 0x1A<32>
	Mem0[r29 + 1<i32>:byte] = r6
	r6 = r29 + 0x10<32>
	call logv (retsize: 0;)
	// succ:  l00017A18_thunk_errlog_function
l00017A18_thunk_errlog_function:
	call errlog_function (retsize: 0;)
	return
	// succ:  fn00017A10_exit
fn00017A10_exit:


// errlog_function
// Return size: 0
define errlog_function
errlog_function_entry:
	r29 = fp
	// succ:  l00017A28
l00017A28:
	v4 = r29 - 8<i32>
	Mem0[v4:word32] = r30
	Mem0[v4 + 4<i32>:word32] = r31
	r30 = v4
	r29 = v4 - 8<i32>
	r4 = r3
	r0 = badva + 0x3E<32>
	Mem0[r29 + 1<i32>:byte] = r6
	r6 = r29 + 0x10<32>
	r5 = r29 + 0x10<32>
	r3 = 0<32>
	v13 = r30
	r31 = Mem0[v13 + 4<i32>:word32]
	r30 = Mem0[v13:word32]
	r29 = v13 + 8<i32>
	return
	// succ:  errlog_function_exit
errlog_function_exit:


// fmaxf.1.0
// Return size: 0
define fmaxf.1.0
fmaxf.1.0_entry:
	r29 = fp
	// succ:  l00017A4C
l00017A4C:
	r2 = 0x38D1B717<32>
	r1_r0 = r0_r2
	// succ:  l00017A54_thunk_fn00009600
l00017A54_thunk_fn00009600:
	call fn00009600 (retsize: 0;)
	return
	// succ:  fmaxf.1.0_exit
fmaxf.1.0_exit:


// fn00017A50
// Return size: 0
define fn00017A50
fn00017A50_entry:
	r29 = fp
	// succ:  l00017A50
l00017A50:
	r2 = 0x17<32>
	r1_r0 = r0_r2
	// succ:  l00017A54_thunk_fn00009600
l00017A54_thunk_fn00009600:
	call fn00009600 (retsize: 0;)
	return
	// succ:  fn00017A50_exit
fn00017A50_exit:


// relu_execute
// Return size: 0
define relu_execute
relu_execute_entry:
	r29 = fp
	// succ:  l00017A60
l00017A60:
	v4 = r29 - 8<i32>
	Mem0[v4:word32] = r30
	Mem0[v4 + 4<i32>:word32] = r31
	r30 = v4
	r29 = v4 - 72<i32>
	Mem0[r29 + 496<i32>:word64] = r17_r16
	r4 = badva + 0x3E<32>
	r17_r16 = r1_r0
	Mem0[r29 + 40<i32>:word64] = r23_r22
	r2 = Mem0[r16 + 4<i32>:word32]
	r1 = 0x50<32>
	r3 = Mem0[r16 + 8<i32>:word32]
	Mem0[r29 + 32<i32>:word64] = r25_r24
	Mem0[r29 + 48<i32>:word64] = r21_r20
	r25 = Mem0[r3:word32]
	r22 = Mem0[r2:word32]
	r3 = Mem0[r3 + 4<i32>:word32]
	r21 = Mem0[r3 + 8<i32>:word32]
	r6 = Mem0[r22 + 4<i32>:word32]
	r5 = Mem0[r22:word32]
	Mem0[r29 + 56<i32>:word64] = r19_r18
	r19 = Mem0[r2 + 4<i32>:word32]
	r20 = Mem0[r2 + 8<i32>:word32]
	Mem0[r29 + 20<i32>:word32] = r3
	r7 = Mem0[r22 + 8<i32>:word32]
	r2 = r17
	r3 = r6 * r5
	r9 = Mem0[r20 + 16<i32>:word32]
	r8 = Mem0[r22 + 12<i32>:word32]
	r3 = r3 * r7
	Mem0[r29 + 24<i32>:word64] = r27_r26
	r12 = Mem0[r19 + 16<i32>:word32]
	r24 = Mem0[r25 + 16<i32>:word32]
	r23 = Mem0[r22 + 16<i32>:word32]
	r18 = Mem0[r9:word32]
	r27 = Mem0[r12:word32]
	Mem0[r29:word32] = r16
	call fn00017FC0 (retsize: 0;)
	r26 = r3 * r8
	r3 = Mem0[r19 + 16<i32>:word32]
	r2 = Mem0[r20 + 16<i32>:word32]
	r4 = badva + 0x24<32>
	r3 = Mem0[r3:word32]
	r2 = Mem0[r2:word32]
	r1 = 0x53<32>
	r2 = r17
	r9_r8 = CONVERT(r3, real32, real64)
	r7_r6 = CONVERT(r2, real32, real64)
	Mem0[r29:word64] = r9_r8
	Mem0[r29 + 8<i32>:word64] = r7_r6
	call logmsg_function (retsize: 0;)
	r0 = 0x38D1B717<32>
	call fn00009604 (retsize: 0;)
	r2 = 0x437F0000<32>
	r1_r0 = r0_r2
	call fn00009610 (retsize: 0;)
	r2 = 0<32>
	call fn00009624 (retsize: 0;)
	branch r26 >u r3 l00017B70
	// succ:  l00017B4C l00017B70
l00017B4C:
	r3 = Mem0[r25 + 20<i32>:word32]
	p0 = r26 == 0<32>
	r2 = r17
	r1 = 0x57<32>
	r3 = badva + 0x2D<32>
	call errlog_function (retsize: 0;)
	r0 = 0xFFFFFFFF<32>
	goto l00017C48
	// succ:  l00017C48
l00017B70:
	r6 = Mem0[r22 + 8<i32>:word32]
	Mem0[r25 + 8<i32>:word32] = r6
	r7 = Mem0[r22 + 12<i32>:word32]
	Mem0[r25 + 24<i32>:word32] = r26
	Mem0[r25 + 12<i32>:word32] = r7
	branch p0 l00017BB4
	// succ:  l00017B88 l00017BB4
l00017B88:
	r2 = 0xFFFFFFFF<32>
	p1 = r2 > 0xFFFFFFFF<32>
	p0 = r2 > 0xFF<32>
	__loop(0<i32>, 0x00017BA0<p32>, r26)
	r2 = 0<32>
	r4 = r2 & 0xFF<32>
	r23 = r23 + 1<i32>
	r3 = Mem0[r23:byte]
	r3 = r2 + 0<32>
	p0 = r3 >u r4
	Mem0[r24:byte] = r3
	r24 = r24 + 1<i32>
	// succ:  l00017BB4
l00017BB4:
	r18 = Mem0[r29 + 20<i32>:word32]
	r2 = r19 + 0x10<32>
	r1_r0 = r19_r18
	call relu_execute.extracted_region (retsize: 0;)
	r3 = Mem0[r20 + 4<i32>:word32]
	r2 = Mem0[r20:word32]
	Mem0[r21:word32] = r2
	Mem0[r21 + 4<i32>:word32] = r3
	r2 = Mem0[r20 + 8<i32>:word32]
	Mem0[r21 + 8<i32>:word32] = r2
	r7 = Mem0[r20 + 12<i32>:word32]
	Mem0[r21 + 12<i32>:word32] = r7
	r2 = Mem0[r20 + 24<i32>:word32]
	branch r2 >u r6 l00017BF4
	// succ:  l00017BEC l00017BF4
l00017BEC:
	r6 = Mem0[r21 + 20<i32>:word32]
	r19 = r21 + 0x10<32>
	Mem0[r21 + 24<i32>:word32] = r2
	r0 = Mem0[r21 + 16<i32>:word32]
	r19 = r21 + 0x10<32>
	goto l00017BF8
	// succ:  l00017BF8
l00017BF4:
	Mem0[r21 + 24<i32>:word32] = r2
	r0 = Mem0[r21 + 16<i32>:word32]
	// succ:  l00017BF8
l00017BF8:
	r1 = Mem0[r20 + 16<i32>:word32]
	r2 = Mem0[r20 + 24<i32>:word32]
	call fn00009560 (retsize: 0;)
	r3 = Mem0[r18 + 16<i32>:word32]
	r2 = Mem0[r19:word32]
	r4 = badva + 0x13<32>
	r3 = Mem0[r3:word32]
	r2 = Mem0[r2:word32]
	r1 = 0x64<32>
	r2 = r17
	r9_r8 = CONVERT(r3, real32, real64)
	r7_r6 = CONVERT(r2, real32, real64)
	Mem0[r29:word64] = r9_r8
	Mem0[r29 + 8<i32>:word64] = r7_r6
	call logmsg_function (retsize: 0;)
	r2 = r17
	r1 = 0x65<32>
	r4 = badva + 0x17<32>
	Mem0[r29:word32] = r16
	call logmsg_function (retsize: 0;)
	r0 = 0<32>
	// succ:  l00017C48
l00017C48:
	r19_r18 = Mem0[r29 + 56<i32>:word64]
	r17_r16 = Mem0[r29 + 64<i32>:word64]
	r23_r22 = Mem0[r29 + 40<i32>:word64]
	r21_r20 = Mem0[r29 + 48<i32>:word64]
	r27_r26 = Mem0[r29 + 24<i32>:word64]
	r25_r24 = Mem0[r29 + 32<i32>:word64]
	v43 = r30
	r31 = Mem0[v43 + 4<i32>:word32]
	r30 = Mem0[v43:word32]
	r29 = v43 + 8<i32>
	return
	// succ:  relu_execute_exit
relu_execute_exit:


// relu_check
// Return size: 0
define relu_check
relu_check_entry:
	r29 = fp
	// succ:  l00017C60
l00017C60:
	v4 = r29 - 8<i32>
	Mem0[v4:word32] = r30
	Mem0[v4 + 4<i32>:word32] = r31
	r30 = v4
	r29 = v4 - 16<i32>
	Mem0[r29 + 496<i32>:word64] = r17_r16
	r4 = badva + 0x30<32>
	r17 = r0
	r16 = r1
	r1 = 0x98<32>
	Mem0[r29:word32] = r17
	r2 = r16
	call logmsg_function (retsize: 0;)
	r1 = 0x99<32>
	r3 = badva + 0x15<32>
	branch r2 == 6<32> l00017CEC
	// succ:  l00017C94 l00017CEC
l00017C94:
	r2 = Mem0[r17 + 16<i32>:word32]
	r1 = 0x9A<32>
	r3 = badva + 0x10<32>
	branch r2 == 6<32> l00017CEC
	// succ:  l00017CA8 l00017CEC
l00017CA8:
	r2 = Mem0[r17 + 20<i32>:word32]
	r4 = Mem0[r17 + 4<i32>:word32]
	r5 = 0<32>
	branch r5 > 4<32> l00017D00
l00017CB0:
	branch r5 > 4<32> l00017D00
	// succ:  l00017CBC l00017D00
l00017CBC:
	r5 = r5 + 1<32>
	r2 = r2 + 4<32>
	branch r6 == 0<32> l00017CDC
	// succ:  l00017CCC l00017CDC
l00017CCC:
	r4 = r4 + 4<i32>
	r6 = Mem0[r4:word32]
	r3 = badva + 0x38<32>
	r1 = 0x9C<32>
	r6 = Mem0[r17 + 8<i32>:word32]
	r3 = badva + 0x2B<32>
	// succ:  l00017CDC
l00017CDC:
	branch r6 == 1<32> l00017CB0
	// succ:  l00017CE8 l00017CB0
l00017CE8:
	r6 = Mem0[r4 + r2:word32]
	r2 = r16
	call errlog_function (retsize: 0;)
	goto l00017CF0
	// succ:  l00017CF0
l00017CEC:
	r2 = r16
	// succ:  l00017CF0
l00017CF0:
	v18 = r30
	r31 = Mem0[v18 + 4<i32>:word32]
	r30 = Mem0[v18:word32]
	r29 = v18 + 8<i32>
	return
	// succ:  relu_check_exit
l00017D00:
	r2 = r16
	r1 = 0x9F<32>
	Mem0[r29:word32] = r17
	call logmsg_function (retsize: 0;)
	r0 = 0<32>
	v19 = r30
	r31 = Mem0[v19 + 4<i32>:word32]
	r30 = Mem0[v19:word32]
	r29 = v19 + 8<i32>
	return
	// succ:  relu_check_exit
relu_check_exit:


// reluX_execute
// Return size: 0
define reluX_execute
reluX_execute_entry:
	r29 = fp
	// succ:  l00017D20
l00017D20:
	v4 = r29 - 8<i32>
	Mem0[v4:word32] = r30
	Mem0[v4 + 4<i32>:word32] = r31
	r30 = v4
	r29 = v4 - 64<i32>
	Mem0[r29 + 496<i32>:word64] = r17_r16
	r4 = badva + 0x3E<32>
	r16 = r0
	Mem0[r29 + 24<i32>:word64] = r25_r24
	r3 = Mem0[r16 + 4<i32>:word32]
	Mem0[r29 + 48<i32>:word64] = r19_r18
	r5 = Mem0[r16 + 8<i32>:word32]
	r1 = 0x81<32>
	r18 = r1
	Mem0[r29 + 16<i32>:word64] = r27_r26
	r25 = Mem0[r3:word32]
	r2 = r18
	r19 = Mem0[r3 + 4<i32>:word32]
	r6 = Mem0[r3 + 12<i32>:word32]
	r0 = Mem0[r25:word32]
	r17 = Mem0[r3 + 8<i32>:word32]
	r8 = Mem0[r25 + 8<i32>:word32]
	r7 = Mem0[r25 + 4<i32>:word32]
	r9 = Mem0[r25 + 12<i32>:word32]
	r26 = Mem0[r5:word32]
	r3 = r7 * r0
	r6 = Mem0[r6 + 16<i32>:word32]
	r12 = Mem0[r17 + 16<i32>:word32]
	r3 = r3 * r8
	r13 = Mem0[r19 + 16<i32>:word32]
	Mem0[r29 + 32<i32>:word64] = r23_r22
	Mem0[r29 + 40<i32>:word64] = r21_r20
	r5 = Mem0[r5 + 4<i32>:word32]
	r14 = Mem0[r5 + 8<i32>:word32]
	Mem0[r29 + 12<i32>:word32] = r14
	Mem0[r29 + 8<i32>:word32] = r5
	r23 = Mem0[r25 + 16<i32>:word32]
	r27 = r3 * r9
	r20 = Mem0[r13:word32]
	r24 = Mem0[r26 + 16<i32>:word32]
	r21 = Mem0[r6:word32]
	r22 = Mem0[r12:word32]
	Mem0[r29:word32] = r16
	call logmsg_function (retsize: 0;)
	r0 = 0x38D1B717<32>
	call fn00009604 (retsize: 0;)
	r2 = 0x437F0000<32>
	r1_r0 = r0_r2
	call fn00009610 (retsize: 0;)
	r22 = r0
	r2 = 0<32>
	call fn00009624 (retsize: 0;)
	call fn00009624 (retsize: 0;)
	branch r27 >u r3 l00017E2C
	// succ:  l00017E08 l00017E2C
l00017E08:
	r3 = Mem0[r26 + 20<i32>:word32]
	p0 = r27 == 0<32>
	r2 = r18
	r1 = 0x86<32>
	r3 = badva + 0x31<32>
	call errlog_function (retsize: 0;)
	r0 = 0xFFFFFFFF<32>
	goto l00017ED8
	// succ:  l00017ED8
l00017E2C:
	Mem0[r26:word32] = r3
	Mem0[r26 + 4<i32>:word32] = r4
	r6 = Mem0[r25 + 8<i32>:word32]
	Mem0[r26 + 8<i32>:word32] = r6
	r0 = Mem0[r29 + 8<i32>:word32]
	r7 = Mem0[r25 + 12<i32>:word32]
	r21 = Mem0[r29 + 12<i32>:word32]
	Mem0[r26 + 24<i32>:word32] = r27
	Mem0[r26 + 12<i32>:word32] = r7
	branch p0 l00017EA0
	// succ:  l00017E54 l00017EA0
l00017E54:
	p0 = r2 > 0xFFFFFFFF<32>
	p1 = r20 > 0xFFFFFFFF<32>
	p3 = r2 > 0xFF<32>
	p2 = r20 > 0xFF<32>
	r2 = 0xFFFFFFFF<32>
	r20 = 0xFFFFFFFF<32>
	__loop(0<i32>, 0x00017E7C<p32>, r27)
	r3 = p1 ? r20 : r4
	r2 = r4 + 0<32>
	r6 = r2 & 0xFF<32>
	r23 = r23 + 1<i32>
	r4 = Mem0[r23:byte]
	r5 = r3 & 0xFF<32>
	r4 = r3 + 0<32>
	p0 = r4 >u r5
	r7 = r4 & 0xFF<32>
	r4 = r2 + 0<32>
	p0 = r6 >u r7
	Mem0[r24:byte] = r4
	r24 = r24 + 1<i32>
	// succ:  l00017EA0
l00017EA0:
	r19 = r17 + 0x10<32>
	r1 = r19
	r2 = r19 + 0x10<32>
	call relu_execute.extracted_region (retsize: 0;)
	r1_r0 = r17_r21
	r2 = r19
	call relu_execute.extracted_region (retsize: 0;)
	r2 = r18
	r1 = 0x91<32>
	r4 = badva + 7<32>
	Mem0[r29:word32] = r16
	call logmsg_function (retsize: 0;)
	r0 = 0<32>
	// succ:  l00017ED8
l00017ED8:
	r19_r18 = Mem0[r29 + 48<i32>:word64]
	r17_r16 = Mem0[r29 + 56<i32>:word64]
	r23_r22 = Mem0[r29 + 32<i32>:word64]
	r21_r20 = Mem0[r29 + 40<i32>:word64]
	r27_r26 = Mem0[r29 + 16<i32>:word64]
	r25_r24 = Mem0[r29 + 24<i32>:word64]
	v45 = r30
	r31 = Mem0[v45 + 4<i32>:word32]
	r30 = Mem0[v45:word32]
	r29 = v45 + 8<i32>
	return
	// succ:  reluX_execute_exit
reluX_execute_exit:


// reluX_check
// Return size: 0
define reluX_check
reluX_check_entry:
	r29 = fp
	// succ:  l00017EEC
l00017EEC:
	v4 = r29 - 8<i32>
	Mem0[v4:word32] = r30
	Mem0[v4 + 4<i32>:word32] = r31
	r30 = v4
	r29 = v4 - 16<i32>
	Mem0[r29 + 496<i32>:word64] = r17_r16
	r4 = badva + 0xE<32>
	r17 = r0
	r16 = r1
	r1 = 0xA6<32>
	Mem0[r29:word32] = r17
	r2 = r16
	call logmsg_function (retsize: 0;)
	r1 = 0xA7<32>
	r3 = badva + 9<32>
	branch r2 == 8<32> l00017F90
	// succ:  l00017F20 l00017F90
l00017F20:
	r2 = Mem0[r17 + 16<i32>:word32]
	r1 = 0xA8<32>
	r3 = badva + 4<32>
	branch r2 == 6<32> l00017F90
	// succ:  l00017F34 l00017F90
l00017F34:
	r2 = Mem0[r17 + 20<i32>:word32]
	goto l00017F44
	// succ:  l00017F44
l00017F3C:
	branch r5 > 4<32> l00017F80
	goto l00017F48
	// succ:  l00017F48 l00017F80
l00017F44:
	branch r7 == 0<32> l00017F68
	goto l00017F58
	// succ:  l00017F58 l00017F68
l00017F48:
	r5 = r5 + 1<32>
	branch r7 == 0<32> l00017F68
	// succ:  l00017F58 l00017F68
l00017F58:
	r6 = r6 + 4<i32>
	r7 = Mem0[r6:word32]
	r3 = badva + 0x2C<32>
	r1 = 0xAA<32>
	r7 = Mem0[r17 + 8<i32>:word32]
	r3 = badva + 0x1F<32>
	// succ:  l00017F68
l00017F68:
	branch r7 == 1<32> l00017F3C
	// succ:  l00017F74 l00017F3C
l00017F74:
	r7 = Mem0[r20 + r4:word32]
	r1 = 0xAB<32>
	r1 = 0xAD<32>
	r3 = badva + 0x38<32>
	// succ:  l00017F80
l00017F80:
	branch r2 == 0<32> l00017FA0
	// succ:  l00017F90 l00017FA0
l00017F90:
	r2 = r16
	v17 = r30
	r31 = Mem0[v17 + 4<i32>:word32]
	r30 = Mem0[v17:word32]
	r29 = v17 + 8<i32>
	return
	// succ:  reluX_check_exit
l00017FA0:
	r2 = r16
	r1 = 0xAE<32>
	r4 = badva + 0x2B<32>
	Mem0[r29:word32] = r17
	call logmsg_function (retsize: 0;)
	r0 = 0<32>
	v21 = r30
	r31 = Mem0[v21 + 4<i32>:word32]
	r30 = Mem0[v21:word32]
	r29 = v21 + 8<i32>
	return
	// succ:  reluX_check_exit
reluX_check_exit:


// logmsg_function
// Return size: 0
define logmsg_function
logmsg_function_entry:
	r29 = fp
	// succ:  l00017FBC
l00017FBC:
	v4 = r29 - 8<i32>
	Mem0[v4:word32] = r30
	Mem0[v4 + 4<i32>:word32] = r31
	r30 = v4
	r29 = v4 - 8<i32>
	r3 = 2<32>
	branch r3 >u r5 l00017FC0_thunk_errlog_function
	goto l00017FC0_thunk_fn00017FCC
	// succ:  l00017FC0_thunk_fn00017FCC l00017FC0_thunk_errlog_function
l00017FC0_thunk_errlog_function:
	call errlog_function (retsize: 0;)
	return
	// succ:  logmsg_function_exit
l00017FC0_thunk_fn00017FCC:
	call fn00017FCC (retsize: 0;)
	return
	// succ:  logmsg_function_exit
logmsg_function_exit:


// fn00017FC0
// Return size: 0
define fn00017FC0
fn00017FC0_entry:
	r29 = fp
	// succ:  l00017FC0
l00017FC0:
	branch r3 >u r5 l00017FC0_thunk_errlog_function
	goto l00017FC0_thunk_fn00017FCC
	// succ:  l00017FC0_thunk_fn00017FCC l00017FC0_thunk_errlog_function
l00017FC0_thunk_errlog_function:
	call errlog_function (retsize: 0;)
	return
	// succ:  fn00017FC0_exit
l00017FC0_thunk_fn00017FCC:
	call fn00017FCC (retsize: 0;)
	return
	// succ:  fn00017FC0_exit
fn00017FC0_exit:


// fn00017FCC
// Return size: 0
define fn00017FCC
fn00017FCC_entry:
	r29 = fp
	// succ:  l00017FCC
l00017FCC:
	r5 = Mem0[r2 + 16<i32>:word32]
	r5 = r29 + 0x10<32>
	r3 = 2<32>
	r0 = badva + 0x18<32>
	Mem0[r29 + 1<i32>:byte] = r6
	r6 = r29 + 0x10<32>
	call logv (retsize: 0;)
	// succ:  l00017FD4_thunk_errlog_function
l00017FD4_thunk_errlog_function:
	call errlog_function (retsize: 0;)
	return
	// succ:  fn00017FCC_exit
fn00017FCC_exit:


// errlog_function
// Return size: 0
define errlog_function
errlog_function_entry:
	r29 = fp
	// succ:  l00017FE4
l00017FE4:
	v4 = r29 - 8<i32>
	Mem0[v4:word32] = r30
	Mem0[v4 + 4<i32>:word32] = r31
	r30 = v4
	r29 = v4 - 8<i32>
	r4 = r3
	r0 = badva + 0x3C<32>
	Mem0[r29 + 1<i32>:byte] = r6
	r6 = r29 + 0x10<32>
	r5 = r29 + 0x10<32>
	r3 = 0<32>
	v13 = r30
	r31 = Mem0[v13 + 4<i32>:word32]
	r30 = Mem0[v13:word32]
	r29 = v13 + 8<i32>
	return
	// succ:  errlog_function_exit
errlog_function_exit:


// relu_execute.extracted_region
// Return size: 0
define relu_execute.extracted_region
relu_execute.extracted_region_entry:
	r29 = fp
	// succ:  l00018008
l00018008:
	v4 = r29 - 8<i32>
	Mem0[v4:word32] = r30
	Mem0[v4 + 4<i32>:word32] = r31
	r30 = v4
	r29 = v4 - 0<i32>
	r4 = Mem0[r1 + 4<i32>:word32]
	r3 = Mem0[r1:word32]
	Mem0[r0:word32] = r3
	Mem0[r0 + 4<i32>:word32] = r4
	r6 = Mem0[r1 + 8<i32>:word32]
	Mem0[r0 + 8<i32>:word32] = r6
	r7 = Mem0[r1 + 12<i32>:word32]
	Mem0[r0 + 12<i32>:word32] = r7
	r3 = Mem0[r1 + 24<i32>:word32]
	branch r3 >u r4 l00018044
	// succ:  l00018034 l00018044
l00018034:
	r4 = Mem0[r0 + 20<i32>:word32]
	r1 = Mem0[r2:word32]
	r3 = Mem0[r1 + 24<i32>:word32]
	r2 = r3
	call fn00009560 (retsize: 0;)
	v14 = r30
	r31 = Mem0[v14 + 4<i32>:word32]
	r30 = Mem0[v14:word32]
	r29 = v14 + 8<i32>
	return
	// succ:  relu_execute.extracted_region_exit
l00018044:
	r0 = Mem0[r0:word32]
	r0 = Mem0[r0:word32]
	r0 = Mem0[r0:word32]
	r0 = Mem0[r0:word32]
	r0 = Mem0[r0:word32]
	r0 = Mem0[r0:word32]
	// succ:  l0001804C_thunk_autorequantize_execute
l0001804C_thunk_autorequantize_execute:
	call autorequantize_execute (retsize: 0;)
	return
	// succ:  relu_execute.extracted_region_exit
relu_execute.extracted_region_exit:


// autorequantize_execute
// Return size: 0
define autorequantize_execute
autorequantize_execute_entry:
	r29 = fp
	// succ:  l00018050
l00018050:
	v4 = r29 - 8<i32>
	Mem0[v4:word32] = r30
	Mem0[v4 + 4<i32>:word32] = r31
	r30 = v4
	r29 = v4 - 72<i32>
	r5 = 0<32>
	Mem0[r29 + 64<i32>:word64] = r17_r16
	r17_r16 = r1_r0
	r4 = badva + 0x39<32>
	Mem0[r29 + 40<i32>:word64] = r23_r22
	r2 = Mem0[r16 + 4<i32>:word32]
	r1 = 0x4B<32>
	Mem0[r29 + 32<i32>:word64] = r25_r24
	r3 = Mem0[r16 + 8<i32>:word32]
	Mem0[r29 + 24<i32>:word64] = r27_r26
	r22 = Mem0[r2:word32]
	r25 = Mem0[r2 + 8<i32>:word32]
	r24 = Mem0[r2 + 4<i32>:word32]
	r7 = Mem0[r22 + 4<i32>:word32]
	r23 = Mem0[r3:word32]
	r2 = Mem0[r25 + 16<i32>:word32]
	r6 = Mem0[r24 + 16<i32>:word32]
	r9 = Mem0[r22 + 8<i32>:word32]
	r8 = Mem0[r22:word32]
	r12 = Mem0[r22 + 12<i32>:word32]
	r0 = Mem0[r6:word32]
	r7 = r7 * r8
	r13 = Mem0[r2:word32]
	r2 = r17
	r6 = r7 * r9
	r26 = Mem0[r3 + 4<i32>:word32]
	r27 = Mem0[r3 + 8<i32>:word32]
	Mem0[r29 + 48<i32>:word64] = r21_r20
	Mem0[r29 + 56<i32>:word64] = r19_r18
	r19 = Mem0[r23 + 16<i32>:word32]
	r18 = Mem0[r22 + 16<i32>:word32]
	Mem0[r29:word32] = r16
	call logmsg_function (retsize: 0;)
	r3 = Mem0[r24 + 16<i32>:word32]
	r2 = Mem0[r25 + 16<i32>:word32]
	r4 = badva + 0x1A<32>
	r3 = Mem0[r3:word32]
	r2 = Mem0[r2:word32]
	r1 = 0x4E<32>
	r2 = r17
	r9_r8 = CONVERT(r3, real32, real64)
	r7_r6 = CONVERT(r2, real32, real64)
	Mem0[r29:word64] = r9_r8
	Mem0[r29 + 8<i32>:word64] = r7_r6
	call logmsg_function (retsize: 0;)
	branch r20 >u r2 l00018130
	// succ:  l00018114 l00018130
l00018114:
	r2 = Mem0[r23 + 20<i32>:word32]
	r2 = r17
	r1 = 0x4F<32>
	r3 = badva + 3<32>
	call errlog_function (retsize: 0;)
	r0 = 0xFFFFFFFF<32>
	goto l0001834C
	// succ:  l0001834C
l00018130:
	r3 = Mem0[r22 + 4<i32>:word32]
	r2 = Mem0[r22:word32]
	Mem0[r23:word32] = r2
	Mem0[r23 + 4<i32>:word32] = r3
	r0 = p0
	r6 = Mem0[r22 + 8<i32>:word32]
	r2 = 0x4F000000<32>
	Mem0[r23 + 8<i32>:word32] = r6
	r24 = 0xCF000000<32>
	r7 = Mem0[r22 + 12<i32>:word32]
	Mem0[r23 + 24<i32>:word32] = r20
	Mem0[r23 + 12<i32>:word32] = r7
	Mem0[r29 + 16<i32>:word32] = r0
	// succ:  l000181D0
l000181D0:
	r22 = 0<32>
	r0 = r22
	call fn000097B0 (retsize: 0;)
	r23 = r0
	r0 = __invert_bit<word32,word32>(r23, 0x1E<32>)
	r24 = 0x437E0000<32>
	call fn00018A28 (retsize: 0;)
	r1 = r24
	r25 = r0
	call fn00009610 (retsize: 0;)
	r0 = r24
	r25 = r0
	r1 = r25
	call fn00009610 (retsize: 0;)
	r23 = r0
	r2 = 0x2B<32>
	r3 = 0x3FEFF7CE<32>
	call fn000097D4 (retsize: 0;)
	r1_r0 = CONVERT(r4, real32, real64)
	p0 = r20 >u 0x7F<32>
	r3 = 0x437F0000<32>
	r4 = 0x4F000000<32>
	r2 = 0<32> - r2
	r0 = Mem0[r29 + 16<i32>:word32]
	r24 = r22
	r1_r0 = r21_r22
	r3 = 0x3F000000<32>
	branch p0 l000182AC
	// succ:  l00018274 l000182AC
l00018274:
	branch p0 l000182CC
	// succ:  l0001827C l000182CC
l0001827C:
	p0 = r0
	call fn00018A28 (retsize: 0;)
	r2 = 0x437F0000<32>
	r1_r0 = r0_r2
	call fn00009610 (retsize: 0;)
	Mem0[r29:word32] = r20
	r3_r2 = 2<64>
	r1_r0 = r19_r18
	r5_r4 = r0_r22
	call autorequantize_execute.extracted_region (retsize: 0;)
	goto l000182C8
	// succ:  l000182C8
l000182AC:
	call fn00009614 (retsize: 0;)
	r0 = r18
	r4 = r20
	r3_r2 = r19_r21
	call quantize_asm (retsize: 0;)
	// succ:  l000182C8
l000182C8:
	Mem0[r26 + 12<i32>:word32] = 0xFFFFFF81<32>
	r2 = Mem0[r26 + 16<i32>:word32]
	r4 = badva + 0x21<32>
	goto l000182D8
	// succ:  l000182D8
l000182CC:
	Mem0[r26 + 12<i32>:word32] = 0xFFFFFF81<32>
	r2 = Mem0[r26 + 16<i32>:word32]
	r4 = badva + 0x21<32>
	// succ:  l000182D8
l000182D8:
	Mem0[r26 + 4<i32>:word32] = 0xFFFFFF81<32>
	Mem0[r26 + 8<i32>:word32] = 1<32>
	r1 = 0x80<32>
	Mem0[r2:word32] = r22
	Mem0[r26:word32] = 1<32>
	Mem0[r27 + 12<i32>:word32] = 0xFFFFFF81<32>
	Mem0[r26 + 24<i32>:word32] = 4<32>
	Mem0[r27 + 4<i32>:word32] = 0xFFFFFF81<32>
	r7 = Mem0[r27 + 16<i32>:word32]
	Mem0[r27 + 8<i32>:word32] = 1<32>
	Mem0[r27:word32] = 1<32>
	Mem0[r27 + 24<i32>:word32] = 4<32>
	Mem0[r7:word32] = r24
	r3 = Mem0[r26 + 16<i32>:word32]
	r2 = Mem0[r27 + 16<i32>:word32]
	r3 = Mem0[r3:word32]
	r2 = Mem0[r2:word32]
	r2 = r17
	r9_r8 = CONVERT(r3, real32, real64)
	r7_r6 = CONVERT(r2, real32, real64)
	Mem0[r29:word64] = r9_r8
	Mem0[r29 + 8<i32>:word64] = r7_r6
	call logmsg_function (retsize: 0;)
	r2 = r17
	r1 = 0x81<32>
	r4 = badva + 0x1B<32>
	Mem0[r29:word32] = r16
	call logmsg_function (retsize: 0;)
	r0 = 0<32>
	// succ:  l0001834C
l0001834C:
	r19_r18 = Mem0[r29 + 56<i32>:word64]
	r17_r16 = Mem0[r29 + 64<i32>:word64]
	r23_r22 = Mem0[r29 + 40<i32>:word64]
	r21_r20 = Mem0[r29 + 48<i32>:word64]
	r27_r26 = Mem0[r29 + 24<i32>:word64]
	r25_r24 = Mem0[r29 + 32<i32>:word64]
	v41 = r30
	r31 = Mem0[v41 + 4<i32>:word32]
	r30 = Mem0[v41:word32]
	r29 = v41 + 8<i32>
	return
	// succ:  autorequantize_execute_exit
autorequantize_execute_exit:


// autorequantize_check
// Return size: 0
define autorequantize_check
autorequantize_check_entry:
	r29 = fp
	// succ:  l00018360
l00018360:
	v4 = r29 - 8<i32>
	Mem0[v4:word32] = r30
	Mem0[v4 + 4<i32>:word32] = r31
	r30 = v4
	r29 = v4 - 16<i32>
	Mem0[r29 + 496<i32>:word64] = r17_r16
	r4 = badva + 0x32<32>
	r17 = r0
	r16 = r1
	r1 = 0x107<32>
	Mem0[r29:word32] = r17
	r2 = r16
	call logmsg_function (retsize: 0;)
	r1 = 0x108<32>
	r3 = badva + 0x2D<32>
	branch r2 == 6<32> l000183EC
	// succ:  l00018394 l000183EC
l00018394:
	r2 = Mem0[r17 + 16<i32>:word32]
	r1 = 0x109<32>
	r3 = badva + 0x28<32>
	branch r2 == 6<32> l000183EC
	// succ:  l000183A8 l000183EC
l000183A8:
	r2 = Mem0[r17 + 20<i32>:word32]
	r4 = Mem0[r17 + 4<i32>:word32]
	r5 = 0<32>
	branch r5 > 4<32> l00018400
l000183B0:
	branch r5 > 4<32> l00018400
	// succ:  l000183BC l00018400
l000183BC:
	r5 = r5 + 1<32>
	r2 = r2 + 4<32>
	branch r6 == 0<32> l000183DC
	// succ:  l000183CC l000183DC
l000183CC:
	r4 = r4 + 4<i32>
	r6 = Mem0[r4:word32]
	r3 = badva + 0x3A<32>
	r1 = 0x10B<32>
	r6 = Mem0[r17 + 8<i32>:word32]
	r3 = badva + 0x2D<32>
	// succ:  l000183DC
l000183DC:
	branch r6 == 1<32> l000183B0
	// succ:  l000183E8 l000183B0
l000183E8:
	r6 = Mem0[r4 + r2:word32]
	r2 = r16
	call errlog_function (retsize: 0;)
	goto l000183F0
	// succ:  l000183F0
l000183EC:
	r2 = r16
	// succ:  l000183F0
l000183F0:
	v18 = r30
	r31 = Mem0[v18 + 4<i32>:word32]
	r30 = Mem0[v18:word32]
	r29 = v18 + 8<i32>
	return
	// succ:  autorequantize_check_exit
l00018400:
	r2 = r16
	r1 = 0x10E<32>
	Mem0[r29:word32] = r17
	call logmsg_function (retsize: 0;)
	r0 = 0<32>
	v19 = r30
	r31 = Mem0[v19 + 4<i32>:word32]
	r30 = Mem0[v19:word32]
	r29 = v19 + 8<i32>
	return
	// succ:  autorequantize_check_exit
autorequantize_check_exit:


// requantize_execute
// Return size: 0
define requantize_execute
requantize_execute_entry:
	r29 = fp
	// succ:  l00018418
l00018418:
	v4 = r29 - 8<i32>
	Mem0[v4:word32] = r30
	Mem0[v4 + 4<i32>:word32] = r31
	r30 = v4
	r29 = v4 - 80<i32>
	r4 = badva + 0x39<32>
	Mem0[r29 + 72<i32>:word64] = r17_r16
	r6 = 0<32>
	r17 = r0
	Mem0[r29 + 64<i32>:word64] = r19_r18
	r2 = Mem0[r17 + 4<i32>:word32]
	r18 = r1
	Mem0[r29 + 48<i32>:word64] = r23_r22
	r1 = 0x9F<32>
	Mem0[r29 + 40<i32>:word64] = r25_r24
	r3 = Mem0[r17 + 8<i32>:word32]
	r23 = Mem0[r2 + 4<i32>:word32]
	r24 = Mem0[r2:word32]
	r5 = Mem0[r2 + 12<i32>:word32]
	r19 = Mem0[r2 + 8<i32>:word32]
	r9 = Mem0[r24 + 4<i32>:word32]
	r8 = Mem0[r23 + 16<i32>:word32]
	r12 = Mem0[r24:word32]
	r7 = Mem0[r19 + 16<i32>:word32]
	r2 = Mem0[r2 + 16<i32>:word32]
	r5 = Mem0[r5 + 16<i32>:word32]
	r9 = r9 * r12
	r7 = Mem0[r7:word32]
	r13 = Mem0[r24 + 8<i32>:word32]
	Mem0[r29 + 32<i32>:word64] = r27_r26
	r8 = Mem0[r8:word32]
	r22 = Mem0[r3 + 8<i32>:word32]
	r25 = Mem0[r3:word32]
	r3 = Mem0[r5:word32]
	r27 = Mem0[r3 + 4<i32>:word32]
	r5 = r9 * r13
	r14 = Mem0[r24 + 12<i32>:word32]
	r15 = Mem0[r2 + 16<i32>:word32]
	r2 = r18
	Mem0[r29 + 56<i32>:word64] = r21_r20
	Mem0[r29 + 24<i32>:word32] = r3
	r21 = Mem0[r24 + 16<i32>:word32]
	r0 = Mem0[r15:word32]
	r26 = r5 * r14
	r16 = Mem0[r25 + 16<i32>:word32]
	Mem0[r29:word32] = r17
	Mem0[r29 + 28<i32>:word32] = r0
	call fn00018968 (retsize: 0;)
	r3 = Mem0[r23 + 16<i32>:word32]
	r2 = Mem0[r19 + 16<i32>:word32]
	r4 = badva + 0x32<32>
	r3 = Mem0[r3:word32]
	r2 = Mem0[r2:word32]
	r1 = 0xA2<32>
	r2 = r18
	r9_r8 = CONVERT(r3, real32, real64)
	r7_r6 = CONVERT(r2, real32, real64)
	Mem0[r29:word64] = r9_r8
	Mem0[r29 + 8<i32>:word64] = r7_r6
	call logmsg_function (retsize: 0;)
	branch r26 >u r2 l0001851C
	// succ:  l000184FC l0001851C
l000184FC:
	r2 = Mem0[r25 + 20<i32>:word32]
	r4 = r26
	r2 = r18
	r1 = 0xA3<32>
	r3 = badva + 0x1B<32>
	call errlog_function (retsize: 0;)
	r0 = 0xFFFFFFFF<32>
	goto l000186C8
	// succ:  l000186C8
l0001851C:
	r3 = Mem0[r24 + 4<i32>:word32]
	r2 = Mem0[r24:word32]
	Mem0[r25:word32] = r2
	Mem0[r25 + 4<i32>:word32] = r3
	r27_r26 = r20_r27
	r19 = r22
	r0 = r23
	r1 = Mem0[r29 + 24<i32>:word32]
	r7 = Mem0[r24 + 8<i32>:word32]
	r20 = r4
	Mem0[r29 + 20<i32>:word32] = r16
	Mem0[r25 + 8<i32>:word32] = r7
	r2 = Mem0[r24 + 12<i32>:word32]
	Mem0[r29 + 16<i32>:word32] = r21
	Mem0[r25 + 24<i32>:word32] = r20
	Mem0[r25 + 12<i32>:word32] = r2
	call fn000097B0 (retsize: 0;)
	r2 = Mem0[r29 + 28<i32>:word64]
	r22 = r0
	r24 = 0x437E0000<32>
	call fn00018A28 (retsize: 0;)
	r1 = r24
	r25 = r0
	call fn00009610 (retsize: 0;)
	r1_r0 = r25_r24
	r16 = r0
	call fn00009610 (retsize: 0;)
	r2 = 0xD916872B<32>
	r3 = 0x3FEFF7CE<32>
	call fn000097D4 (retsize: 0;)
	r1_r0 = CONVERT(r4, real32, real64)
	p0 = r20 >u 0x7F<32>
	r2 = 0x437F0000<32>
	r3 = 0<32> - r2
	r23 = r22
	r16 = r27 + 0<32>
	branch p0 l00018610
	// succ:  l000185D4 l00018610
l000185D4:
	r16 = r18
	branch p0 l0001864C
	// succ:  l000185DC l0001864C
l000185DC:
	p0 = r12 == 0<32>
	call fn00018A28 (retsize: 0;)
	r2 = 0x437F0000<32>
	r1_r0 = r0_r2
	call fn00009610 (retsize: 0;)
	r5_r4 = r0_r22
	r1 = Mem0[r29 + 20<i32>:word64]
	r0 = Mem0[r29 + 16<i32>:word64]
	Mem0[r29:word32] = r20
	call autorequantize_execute.extracted_region (retsize: 0;)
	goto l0001864C
	// succ:  l0001864C
l00018610:
	call fn00009610 (retsize: 0;)
	r3 = 0x4F000000<32>
	r2 = 0x3F000000<32>
	r1_r0 = r16_r22
	call fn00009614 (retsize: 0;)
	r3 = Mem0[r29 + 20<i32>:word64]
	r4 = r20
	r2 = r21
	r0 = Mem0[r29 + 16<i32>:word64]
	r16 = r18
	call quantize_asm (retsize: 0;)
	// succ:  l0001864C
l0001864C:
	Mem0[r26 + 12<i32>:word32] = 0xFFFFFF81<32>
	r2 = Mem0[r26 + 16<i32>:word32]
	r4 = badva + 0x15<32>
	Mem0[r26 + 4<i32>:word32] = 0xFFFFFF81<32>
	Mem0[r26 + 8<i32>:word32] = 1<32>
	r1 = 0xC8<32>
	Mem0[r2:word32] = r22
	Mem0[r26:word32] = 1<32>
	Mem0[r19 + 12<i32>:word32] = 0xFFFFFF81<32>
	Mem0[r26 + 24<i32>:word32] = 4<32>
	Mem0[r19 + 4<i32>:word32] = 1<32>
	r7 = Mem0[r19 + 16<i32>:word32]
	Mem0[r19 + 8<i32>:word32] = 1<32>
	Mem0[r19:word32] = 1<32>
	Mem0[r19 + 24<i32>:word32] = 4<32>
	Mem0[r7:word32] = r23
	r3 = Mem0[r26 + 16<i32>:word32]
	r2 = Mem0[r19 + 16<i32>:word32]
	r3 = Mem0[r3:word32]
	r2 = Mem0[r2:word32]
	r2 = r16
	r9_r8 = CONVERT(r3, real32, real64)
	r7_r6 = CONVERT(r2, real32, real64)
	Mem0[r29:word64] = r9_r8
	Mem0[r29 + 8<i32>:word64] = r7_r6
	call logmsg_function (retsize: 0;)
	r2 = r16
	r1 = 0xC9<32>
	r4 = badva + 0x13<32>
	Mem0[r29:word32] = r17
	call logmsg_function (retsize: 0;)
	r0 = 0<32>
	// succ:  l000186C8
l000186C8:
	r19_r18 = Mem0[r29 + 64<i32>:word64]
	r17_r16 = Mem0[r29 + 72<i32>:word64]
	r23_r22 = Mem0[r29 + 48<i32>:word64]
	r21_r20 = Mem0[r29 + 56<i32>:word64]
	r27_r26 = Mem0[r29 + 32<i32>:word64]
	r25_r24 = Mem0[r29 + 40<i32>:word64]
	v48 = r30
	r31 = Mem0[v48 + 4<i32>:word32]
	r30 = Mem0[v48:word32]
	r29 = v48 + 8<i32>
	return
	// succ:  requantize_execute_exit
requantize_execute_exit:


// requantize_check
// Return size: 0
define requantize_check
requantize_check_entry:
	r29 = fp
	// succ:  l000186DC
l000186DC:
	// succ:  l000186DC_thunk_requantize_check__merged
l000186DC_thunk_requantize_check__merged:
	call requantize_check__merged (retsize: 0;)
	return
	// succ:  requantize_check_exit
requantize_check_exit:


// requantize_check__merged
// Return size: 0
define requantize_check__merged
requantize_check__merged_entry:
	r29 = fp
	// succ:  l000186E0
l000186E0:
	v4 = r29 - 8<i32>
	Mem0[v4:word32] = r30
	Mem0[v4 + 4<i32>:word32] = r31
	r30 = v4
	r29 = v4 - 40<i32>
	p0 = r2 == 1<32>
	r4 = badva + 0x39<32>
	Mem0[r29 + 24<i32>:word64] = r19_r18
	Mem0[r29 + 32<i32>:word64] = r17_r16
	r1 = 0x114<32>
	r17_r16 = r0_r1
	r1 = 0x11D<32>
	r18 = badva + 0x3D<32>
	Mem0[r29 + 8<i32>:word64] = r23_r22
	Mem0[r29 + 16<i32>:word64] = r21_r20
	branch p0 l00018720
	// succ:  l0001870C l00018720
l0001870C:
	r21 = 0x115<32>
	r20 = 0x116<32>
	r19 = 0x117<32>
	r23_r22 = 0x500000003<64>
	goto l00018740
	// succ:  l00018740
l00018720:
	r19 = 0x120<32>
	r23_r22 = 0x300000002<64>
	r4 = badva + 0x2B<32>
	r21 = 0x11E<32>
	r20 = 0x11F<32>
	r18 = badva + 0x18<32>
	// succ:  l00018740
l00018740:
	Mem0[r29:word32] = r17
	r2 = r16
	call logmsg_function (retsize: 0;)
	branch r2 == r23 l00018774
	// succ:  l00018758 l00018774
l00018758:
	r2 = Mem0[r17 + 16<i32>:word32]
	r1 = r21
	r3 = badva + 0x15<32>
	r2 = r16
	call errlog_function (retsize: 0;)
	// succ:  l00018764
l00018764:
	r0 = 0xFFFFFFFF<32>
	goto l00018798
	// succ:  l00018798
l00018774:
	branch r2 == r22 l0001878C
	// succ:  l0001877C l0001878C
l0001877C:
	goto l00018764
	// succ:  l00018764
l0001878C:
	Mem0[r29:word32] = r17
	r4 = r18
	call logmsg_function (retsize: 0;)
	r0 = 0<32>
	// succ:  l00018798
l00018798:
	r19_r18 = Mem0[r29 + 24<i32>:word64]
	r17_r16 = Mem0[r29 + 32<i32>:word64]
	r23_r22 = Mem0[r29 + 8<i32>:word64]
	r21_r20 = Mem0[r29 + 16<i32>:word64]
	v26 = r30
	r31 = Mem0[v26 + 4<i32>:word32]
	r30 = Mem0[v26:word32]
	r29 = v26 + 8<i32>
	return
	// succ:  requantize_check__merged_exit
requantize_check__merged_exit:


// requantrange_execute
// Return size: 0
define requantrange_execute
requantrange_execute_entry:
	r29 = fp
	// succ:  l000187A4
l000187A4:
	v4 = r29 - 8<i32>
	Mem0[v4:word32] = r30
	Mem0[v4 + 4<i32>:word32] = r31
	r30 = v4
	r29 = v4 - 56<i32>
	r6 = 0<32>
	Mem0[r29 + 48<i32>:word64] = r17_r16
	r17_r16 = r1_r0
	r4 = badva + 0x3A<32>
	Mem0[r29 + 24<i32>:word64] = r23_r22
	r2 = Mem0[r16 + 4<i32>:word32]
	r1 = 0xE5<32>
	Mem0[r29 + 16<i32>:word64] = r25_r24
	r5 = Mem0[r16 + 8<i32>:word32]
	Mem0[r29 + 40<i32>:word64] = r19_r18
	r3 = Mem0[r2:word32]
	r24 = Mem0[r2 + 4<i32>:word32]
	r23 = Mem0[r2 + 8<i32>:word32]
	Mem0[r29 + 32<i32>:word64] = r21_r20
	r8 = Mem0[r3 + 4<i32>:word32]
	r7 = Mem0[r23 + 16<i32>:word32]
	r9 = Mem0[r3:word32]
	r2 = Mem0[r24 + 16<i32>:word32]
	r7 = Mem0[r7:word32]
	r12 = Mem0[r3 + 8<i32>:word32]
	r8 = r8 * r9
	r13 = Mem0[r3 + 12<i32>:word32]
	r14 = Mem0[r2:word32]
	r2 = r17
	r19 = Mem0[r5 + 4<i32>:word32]
	r21 = Mem0[r3 + 16<i32>:word32]
	Mem0[r29:word32] = r16
	r18 = Mem0[r5:word32]
	r5 = r8 * r12
	r22 = r5 * r13
	call fn00018968 (retsize: 0;)
	r3 = Mem0[r24 + 16<i32>:word32]
	r2 = Mem0[r23 + 16<i32>:word32]
	r4 = badva + 0x25<32>
	r5 = Mem0[r3:word32]
	r2 = Mem0[r2:word32]
	r1 = 0xE8<32>
	r2 = r17
	r9_r8 = CONVERT(r5, real32, real64)
	r7_r6 = CONVERT(r2, real32, real64)
	Mem0[r29:word64] = r9_r8
	Mem0[r29 + 8<i32>:word64] = r7_r6
	call logmsg_function (retsize: 0;)
	r4 = r22 + 0xFFFFFFFF<32>
	branch p0 l0001886C
	// succ:  l00018858 l0001886C
l00018858:
	p0 = r14 == 0<32>
	r3 = 0x4F000000<32>
	r2 = 0xCF000000<32>
	goto l000188CC
	// succ:  l000188CC
l0001886C:
	r2 = 0x7FFFFFFF<32>
	r3 = 0x80000000<32>
	r21 = r21 + 4<i32>
	r5 = Mem0[r21:word32]
	branch p0 l00018888
	// succ:  l00018884 l00018888
l00018884:
	p0 = r14 >u -1<i32>
	goto l000188BC
	// succ:  l000188BC
l00018888:
	r21 = r21 + 4<i32>
	r4 = Mem0[r21:word32]
	p0 = r4 >u 1<32>
	r6 = r4 + 0xFFFFFFFF<32>
	branch p0 l000188B8
	// succ:  l0001889C l000188B8
l0001889C:
	__loop(0<i32>, 0x0001889C<p32>, r6)
	r21 = r21 + 4<i32>
	r4 = Mem0[r21:word32]
	r6 = r4
	r2 = min<int32>(r2, r5)
	r3 = max<int32>(r5, r3)
	r5 = r6
	r2 = min<int32>(r2, r5)
	r3 = max<int32>(r5, r3)
	goto l000188BC
	// succ:  l000188BC
l000188B8:
	r2 = min<int32>(r2, r5)
	// succ:  l000188BC
l000188BC:
	r2 = min<int32>(r2, r4)
	r5 = max<int32>(r4, r3)
	// succ:  l000188CC
l000188CC:
	r5 = Mem0[r18 + 16<i32>:word32]
	r6 = 0<32>
	Mem0[r18 + 8<i32>:word32] = 1<32>
	Mem0[r18 + 12<i32>:word32] = 1<32>
	r1 = 0xFE<32>
	Mem0[r18:word32] = 1<32>
	Mem0[r18 + 4<i32>:word32] = 0xFFFFFF81<32>
	Mem0[r18 + 24<i32>:word32] = 4<32>
	Mem0[r5:word32] = r7
	Mem0[r19 + 12<i32>:word32] = 1<32>
	r3 = Mem0[r19 + 16<i32>:word32]
	Mem0[r19 + 4<i32>:word32] = 1<32>
	Mem0[r19:word32] = 1<32>
	Mem0[r3:word32] = r2
	Mem0[r19 + 8<i32>:word32] = 1<32>
	Mem0[r19 + 24<i32>:word32] = 4<32>
	r0 = Mem0[r19 + 16<i32>:word32]
	r5 = Mem0[r18 + 16<i32>:word32]
	r2 = Mem0[r0:word32]
	r3 = Mem0[r5:word32]
	r7_r6 = CONVERT(r2, real32, real64)
	Mem0[r29 + 8<i32>:word64] = r7_r6
	r2 = r17
	r9_r8 = CONVERT(r3, real32, real64)
	Mem0[r29:word64] = r9_r8
	call logmsg_function (retsize: 0;)
	r2 = r17
	r1 = 0xFF<32>
	r4 = badva + 0x10<32>
	Mem0[r29:word32] = r16
	call logmsg_function (retsize: 0;)
	r0 = 0<32>
	r19_r18 = Mem0[r29 + 40<i32>:word64]
	r17_r16 = Mem0[r29 + 48<i32>:word64]
	r23_r22 = Mem0[r29 + 24<i32>:word64]
	r21_r20 = Mem0[r29 + 32<i32>:word64]
	v38 = r30
	r31 = Mem0[v38 + 4<i32>:word32]
	r30 = Mem0[v38:word32]
	r29 = v38 + 8<i32>
	return
	// succ:  requantrange_execute_exit
requantrange_execute_exit:


// requantrange_check
// Return size: 0
define requantrange_check
requantrange_check_entry:
	r29 = fp
	// succ:  l00018960
l00018960:
	// succ:  l00018960_thunk_requantize_check__merged
l00018960_thunk_requantize_check__merged:
	call requantize_check__merged (retsize: 0;)
	return
	// succ:  requantrange_check_exit
requantrange_check_exit:


// logmsg_function
// Return size: 0
define logmsg_function
logmsg_function_entry:
	r29 = fp
	// succ:  l00018964
l00018964:
	v4 = r29 - 8<i32>
	Mem0[v4:word32] = r30
	Mem0[v4 + 4<i32>:word32] = r31
	r30 = v4
	r29 = v4 - 8<i32>
	r3 = 2<32>
	branch r3 >u r5 l0001898C
	// succ:  l00018968_thunk_fn00018974 l00018968_thunk_fn0001898C
l00018968_thunk_fn00018974:
	call fn00018974 (retsize: 0;)
	return
	// succ:  logmsg_function_exit
l00018968_thunk_fn0001898C:
	call fn0001898C (retsize: 0;)
	return
	// succ:  logmsg_function_exit
logmsg_function_exit:


// fn00018968
// Return size: 0
define fn00018968
fn00018968_entry:
	r29 = fp
	// succ:  l00018968
l00018968:
	branch r3 >u r5 l00018968_thunk_fn0001898C
	// succ:  l00018968_thunk_fn00018974 l00018968_thunk_fn0001898C
l00018968_thunk_fn00018974:
	call fn00018974 (retsize: 0;)
	return
	// succ:  fn00018968_exit
l00018968_thunk_fn0001898C:
	call fn0001898C (retsize: 0;)
	return
	// succ:  fn00018968_exit
fn00018968_exit:


// fn00018974
// Return size: 0
define fn00018974
fn00018974_entry:
	r29 = fp
	// succ:  l00018974
l00018974:
	r5 = Mem0[r2 + 16<i32>:word32]
	r5 = r29 + 0x10<32>
	r3 = 2<32>
	r0 = badva + 0x3B<32>
	Mem0[r29 + 1<i32>:byte] = r6
	r6 = r29 + 0x10<32>
	call logv (retsize: 0;)
	// succ:  l00018988_thunk_fn0001898C
l00018988_thunk_fn0001898C:
	call fn0001898C (retsize: 0;)
	return
	// succ:  fn00018974_exit
fn00018974_exit:


// fn0001898C
// Return size: 0
define fn0001898C
fn0001898C_entry:
	r29 = fp
	// succ:  l0001898C
l0001898C:
	// succ:  l0001898C_thunk_errlog_function
l0001898C_thunk_errlog_function:
	call errlog_function (retsize: 0;)
	return
	// succ:  fn0001898C_exit
fn0001898C_exit:


// errlog_function
// Return size: 0
define errlog_function
errlog_function_entry:
	r29 = fp
	// succ:  l00018990
l00018990:
	v4 = r29 - 8<i32>
	Mem0[v4:word32] = r30
	Mem0[v4 + 4<i32>:word32] = r31
	r30 = v4
	r29 = v4 - 8<i32>
	r4 = r3
	r0 = badva + 0x1B<32>
	Mem0[r29 + 1<i32>:byte] = r6
	r6 = r29 + 0x10<32>
	r5 = r29 + 0x10<32>
	r3 = 0<32>
	v13 = r30
	r31 = Mem0[v13 + 4<i32>:word32]
	r30 = Mem0[v13:word32]
	r29 = v13 + 8<i32>
	return
	// succ:  errlog_function_exit
errlog_function_exit:


// autorequantize_execute.extracted_region
// Return size: 0
define autorequantize_execute.extracted_region
autorequantize_execute.extracted_region_entry:
	r29 = fp
	// succ:  l000189B4
l000189B4:
	v4 = r29 - 8<i32>
	Mem0[v4:word32] = r30
	Mem0[v4 + 4<i32>:word32] = r31
	r30 = v4
	r29 = v4 - 32<i32>
	Mem0[r29 + 8<i32>:word64] = r21_r20
	r6 = Mem0[r29 + 40<i32>:word64]
	r20 = 0<32>
	r21 = __invert_bit<word32,word32>(r4, 0x1E<32>)
	Mem0[r29 + 24<i32>:word64] = r17_r16
	Mem0[r29 + 16<i32>:word64] = r19_r18
	r19_r18 = r1_r0
	r17_r16 = r5_r3
	Mem0[r29:word64] = r23_r22
	r22 = r6 - r2
	// succ:  l000189DC
l000189DC:
	r18 = r18 + 4<i32>
	r2 = Mem0[r18:word32]
	r3 = r21
	call fn00009624 (retsize: 0;)
	r22 = r22 + 0xFFFFFFFF<32>
	p1 = r22 == 0<32>
	r2 = 0xFFFFFFFF<32>
	p0 = r2 > 0xFFFFFFFF<32>
	p2 = r2 > 0xFF<32>
	r2 = r20 + 0<32>
	Mem0[r19:byte] = r2
	r19 = r19 + 1<i32>
	branch p1 l000189DC
	// succ:  l00018A18 l000189DC
l00018A18:
	r19_r18 = Mem0[r29 + 16<i32>:word64]
	r17_r16 = Mem0[r29 + 24<i32>:word64]
	r23_r22 = Mem0[r29:word64]
	r21_r20 = Mem0[r29 + 8<i32>:word64]
	v29 = r30
	r31 = Mem0[v29 + 4<i32>:word32]
	r30 = Mem0[v29:word32]
	r29 = v29 + 8<i32>
	return
	// succ:  autorequantize_execute.extracted_region_exit
autorequantize_execute.extracted_region_exit:


// fmaxf.1.0
// Return size: 0
define fmaxf.1.0
fmaxf.1.0_entry:
	r29 = fp
	// succ:  l00018A24
l00018A24:
	r2 = 0x38D1B717<32>
	r1_r0 = r0_r2
	// succ:  l00018A2C_thunk_fn00009600
l00018A2C_thunk_fn00009600:
	call fn00009600 (retsize: 0;)
	return
	// succ:  fmaxf.1.0_exit
fmaxf.1.0_exit:


// fn00018A28
// Return size: 0
define fn00018A28
fn00018A28_entry:
	r29 = fp
	// succ:  l00018A28
l00018A28:
	r2 = 0x17<32>
	r1_r0 = r0_r2
	// succ:  l00018A2C_thunk_fn00009600
l00018A2C_thunk_fn00009600:
	call fn00009600 (retsize: 0;)
	return
	// succ:  fn00018A28_exit
fn00018A28_exit:


// supernode_execute_hvx
// Return size: 0
define supernode_execute_hvx
supernode_execute_hvx_entry:
	r29 = fp
	// succ:  l00018A40
l00018A40:
	v4 = r29 - 8<i32>
	Mem0[v4:word32] = r30
	Mem0[v4 + 4<i32>:word32] = r31
	r30 = v4
	r29 = v4 - 368<i32>
	Mem0[r29 - 16<i32>:word64] = r17_r16
	r17_r16 = r0_r1
	Mem0[r29 + 320<i32>:word64] = r27_r26
	r2 = Mem0[r17 + 4<i32>:word32]
	r27 = Mem0[r17 + 32<i32>:int8]
	r3 = Mem0[r17 + 8<i32>:word32]
	r4 = Mem0[r2:word32]
	r6 = Mem0[r17 + 8<i32>:word32]
	p0 = r27 == 0<32>
	Mem0[r29 + 344<i32>:word64] = r21_r20
	r5 = Mem0[r2 + 4<i32>:word32]
	Mem0[r29 + 336<i32>:word64] = r23_r22
	Mem0[r29 + 328<i32>:word64] = r25_r24
	r7 = Mem0[r2 + 24<i32>:word32]
	Mem0[r29 + 136<i32>:word32] = r6
	r6 = Mem0[r2 + 36<i32>:word32]
	r20 = Mem0[r2 + 20<i32>:word32]
	r22 = Mem0[r2 + 12<i32>:word32]
	r21 = Mem0[r2 + 32<i32>:word32]
	r25 = Mem0[r2 + 28<i32>:word32]
	r23 = Mem0[r2 + 16<i32>:word32]
	r24 = Mem0[r2 + 8<i32>:word32]
	Mem0[r29 + 108<i32>:word32] = r6
	r2 = Mem0[r4 + 4<i32>:word32]
	r6 = Mem0[r3 + 4<i32>:word32]
	r1 = Mem0[r3:word32]
	Mem0[r29 + 144<i32>:word32] = r2
	r2 = Mem0[r5 + 8<i32>:word32]
	Mem0[r29 + 352<i32>:word64] = r19_r18
	r0 = Mem0[r4 + 8<i32>:word32]
	Mem0[r29 + 80<i32>:word32] = r1
	Mem0[r29 + 72<i32>:word32] = r6
	r6 = Mem0[r4:word32]
	Mem0[r29 + 132<i32>:word32] = r2
	r2 = Mem0[r7 + 4<i32>:word32]
	r19 = Mem0[r5:word32]
	r18 = Mem0[r5 + 12<i32>:word32]
	r1 = Mem0[r7 + 8<i32>:word32]
	r26 = Mem0[r5 + 4<i32>:word32]
	Mem0[r29 + 140<i32>:word32] = r6
	r3 = Mem0[r3 + 8<i32>:word32]
	r6 = Mem0[r4 + 12<i32>:word32]
	Mem0[r29 + 76<i32>:word32] = r7
	Mem0[r29 + 148<i32>:word32] = r2
	r2 = p0
	Mem0[r29 + 68<i32>:word32] = r3
	Mem0[r29 + 128<i32>:word32] = r0
	Mem0[r29 + 116<i32>:word32] = r2
	Mem0[r29 + 96<i32>:word32] = r6
	branch p0 l00018B24
	// succ:  l00018AF0 l00018B24
l00018AF0:
	r2 = Mem0[r29 - 128<i32>:word32]
	p0 = r27 == 2<32>
	branch p0 l00018B1C
	// succ:  l00018AFC l00018B1C
l00018AFC:
	Mem0[r29 + 120<i32>:word32] = r1
	r0 = 0<32>
	p0 = r27 == 1<32>
	branch p0 l00018B2C
	// succ:  l00018B08 l00018B2C
l00018B08:
	r2 = Mem0[r29 + 128<i32>:word32]
	r1 = Mem0[r29 + 120<i32>:word32]
	r0 = r1
	goto l00018B28
	// succ:  l00018B28
l00018B1C:
	r2 = r2 - r26
	r0 = r2 + r1
	// succ:  l00018B24
l00018B24:
	Mem0[r29 + 120<i32>:word32] = r1
	call fn00009760 (retsize: 0;)
	goto l00018B2C
	// succ:  l00018B2C
l00018B28:
	Mem0[r29 + 120<i32>:word32] = r1
	// succ:  l00018B2C
l00018B2C:
	r2 = Mem0[r29 - 112<i32>:word32]
	r1 = Mem0[r29 - 108<i32>:word32]
	p0 = r27 == 2<32>
	branch p0 l00018B7C
	// succ:  l00018B3C l00018B7C
l00018B3C:
	r1 = Mem0[r29 - 108<i32>:word32]
	r2 = Mem0[r29 - 112<i32>:word32]
	p0 = r27 == 1<32>
	branch p0 l00018B6C
	// succ:  l00018B4C l00018B6C
l00018B4C:
	Mem0[r29 + 124<i32>:word32] = r16
	r0 = Mem0[r29 + 116<i32>:word64]
	r5 = 0<32>
	r16 = r0
	r1 = Mem0[r29 - 108<i32>:word32]
	r0 = Mem0[r29 - 112<i32>:word32]
	branch p0 l00018B94
	// succ:  l00018B68 l00018B94
l00018B68:
	p0 = r0
	goto l00018B88
	// succ:  l00018B88
l00018B6C:
	Mem0[r29 + 124<i32>:word32] = r16
	r16 = r0
	r0 = r1
	goto l00018B8C
	// succ:  l00018B8C
l00018B7C:
	Mem0[r29 + 124<i32>:word32] = r16
	r16 = r0
	r2 = r2 - r19
	r0 = r2 + r1
	// succ:  l00018B88
l00018B88:
	call fn00009760 (retsize: 0;)
	// succ:  l00018B8C
l00018B8C:
	r5 = r0
	r2 = Mem0[r29 + 140<i32>:word32]
	r0 = r29 + 0xE8<32>
	r1 = 0<32>
	r4 = r18 + 0x1F<32>
	goto l00018BA0
	// succ:  l00018BA0
l00018B94:
	r2 = Mem0[r29 + 140<i32>:word32]
	r0 = r29 + 0xE8<32>
	r1 = 0<32>
	// succ:  l00018BA0
l00018BA0:
	Mem0[r29 + 100<i32>:word32] = r18
	r6 = Mem0[r25 + 16<i32>:word32]
	r27 = r29 + 0xE8<32>
	r4 = r4 & 0xFFFFFFE0<32>
	r2 = 0x50<32>
	r3 = r18 * r2
	Mem0[r29 + 104<i32>:word32] = r4
	Mem0[r29 + 56<i32>:word32] = r6
	r18 = r5
	r3 = r3 * r16
	r3 = r3 * r5
	Mem0[r29 + 116<i32>:word32] = r3
	call fn000095F0 (retsize: 0;)
	Mem0[r29 + 232<i32>:word32] = r17
	r1 = 0<32>
	r0 = r27 + 0x34<32>
	Mem0[r29 + 64<i32>:word32] = r0
	call fn00009740 (retsize: 0;)
	r0 = r29 + 0x98<32>
	r1 = 0<32>
	r25 = r29 + 0x98<32>
	r2 = 0x50<32>
	call fn000095F0 (retsize: 0;)
	Mem0[r29 + 152<i32>:word32] = r17
	r1 = 0<32>
	r0 = r25 + 0x34<32>
	r2 = __set_bit<word32,word32>(r25, 4<32>)
	Mem0[r2:word32] = 1<32>
	Mem0[r29 + 60<i32>:word32] = r0
	call fn00009740 (retsize: 0;)
	r3 = Mem0[r24 + 16<i32>:word32]
	r2 = Mem0[r22 + 16<i32>:word32]
	r24 = 0x437F0000<32>
	r7 = Mem0[r29 + 108<i32>:word64]
	r4 = Mem0[r21 + 16<i32>:word32]
	r1 = r24
	r25 = Mem0[r3:word32]
	r2 = Mem0[r2:word32]
	r6 = Mem0[r23 + 16<i32>:word32]
	r5 = Mem0[r20 + 16<i32>:word32]
	Mem0[r29 + 84<i32>:word32] = r2
	r7 = Mem0[r7 + 16<i32>:word32]
	r21 = Mem0[r5:word32]
	r20 = Mem0[r6:word32]
	Mem0[r29 + 88<i32>:word32] = r20
	Mem0[r29 + 92<i32>:word32] = r21
	r27 = Mem0[r4:word32]
	r23 = Mem0[r7:word32]
	call fn00009610 (retsize: 0;)
	r22 = r0
	r1_r0 = r24_r2
	call fn00009610 (retsize: 0;)
	r21 = r0
	r1_r0 = r24_r20
	call fn00009610 (retsize: 0;)
	r1 = r22
	call fn00009610 (retsize: 0;)
	Mem0[r29 + 52<i32>:word32] = r0
	r1_r0 = r22_r23
	call fn00009610 (retsize: 0;)
	call fn000097E0 (retsize: 0;)
	r3 = Mem0[r29 + 136<i32>:word32]
	r0 = r20
	r2 = r0
	r23 = Mem0[r3 + 4<i32>:word32]
	call fmaxf.1.0 (retsize: 0;)
	r1_r0 = r0_r24
	call fn00009610 (retsize: 0;)
	r2 = 0<32>
	call fn00009624 (retsize: 0;)
	r13 = Mem0[r29 + 120<i32>:word32]
	r3 = Mem0[r29 + 132<i32>:word32]
	r9 = r19 << 1<32>
	r2 = r26 * r19
	r12 = Mem0[r29 + 96<i32>:word32]
	r5 = 0<32>
	p2 = r13 == 2<32>
	r0 = 1<32>
	r8 = r12 + 0xF<32>
	r2 = r7 & 0xFFFFFFFC<32>
	p0 = r12 == 3<32>
	r3 = r2 & 0xFFFFFFF0<32>
	r15 = max<int32>(r4, r5)
	p3 = r3 == 0x20<32>
	p1 = r3 == 0xA0<32>
	r8 = r8 & 0xFFFFFFF0<32>
	p1 = __fastcorner9(p2, p1)
	p2 = __fastcorner9(p2, p3)
	p1 = __fastcorner9(p0, p1)
	p2 = r19 == 7<32>
	p0 = __fastcorner9(p0, p2)
	p2 = r19 == 3<32>
	p1 = __fastcorner9(p2, p1)
	p2 = r26 == 7<32>
	p0 = __fastcorner9(p2, p0)
	p2 = r26 == 3<32>
	p1 = __fastcorner9(p2, p1)
	r7 = Mem0[r29 - 128<i32>:word32]
	r14 = Mem0[r29 - 112<i32>:word32]
	branch p0 l00018D64
	// succ:  l00018D48 l00018D64
l00018D48:
	p0 = p1 | p0 & p2
	Mem0[r29 + 112<i32>:word32] = r18
	r4 = r18
	r5 = r19 << 1<32>
	r3 = r16 * r3
	r4 = r4 + (r5 + 2<32>)
	goto l00018DAC
	// succ:  l00018DAC
l00018D64:
	r5 = r18
	r3 = r16
	r6 = r19 - r14
	Mem0[r29 + 112<i32>:word32] = r18
	r1 = Mem0[r29 + 148<i32>:word32]
	r4 = r7
	r5 = r6 + r5 * r1
	r3 = r4 + r3 * r13
	r7 = r5
	r3 = r3 + (r3 >>u 0x1F<32>)
	r4 = r4 + (r3 >> r0)
	r7 = r7 + (r7 >>u 0x1F<32>)
	r7 = __clear_bit<word32,word32>(r7, 0<32>)
	r4 = r4 * r8
	r7 = r5 - r7
	r5 = r5 + (r9 + r14)
	r1 = r5 - r7
	r3 = r4 * r1
	r27 = Mem0[r29 + 100<i32>:word32]
	r7 = Mem0[r29 + 104<i32>:word32]
	p1 = !(r26 == 1<32>)
	r2 = r2 << 2<32>
	goto l00018DB8
	// succ:  l00018DB8
l00018DAC:
	r27 = Mem0[r29 + 100<i32>:word32]
	r7 = Mem0[r29 + 104<i32>:word32]
	p1 = !(r26 == 1<32>)
	// succ:  l00018DB8
l00018DB8:
	r1 = Mem0[r29 + 124<i32>:word64]
	r5 = Mem0[r29 + 116<i32>:word64]
	p3 = r27 == r7
	p2 = !(r19 == 1<32>)
	r7 = Mem0[r1 + 4<i32>:word32]
	r5 = r5 + r27
	p1 = p2 | p1
	r6 = r2 * r7
	r3 = r3 + (r2 + r6)
	r1 = r3 + (r5 << 2<32>)
	branch r4 == 4<32> l00018E1C
	// succ:  l00018DEC l00018E1C
l00018DEC:
	r4 = Mem0[r17 + 32<i32>:int8]
	r21 = r1 + 0x580<32>
	branch p0 l00018E20
	// succ:  l00018DF0 l00018E20
l00018DF0:
	Mem0[r29 + 44<i32>:word32] = r15
	Mem0[r29 + 40<i32>:word32] = r7
	r24 = r13
	p0 = p0 & p0
	Mem0[r29 + 108<i32>:word32] = r16
	Mem0[r29 + 48<i32>:word32] = r22
	r18 = r12
	r0 = p0
	Mem0[r29 + 36<i32>:word32] = r0
	Mem0[r29 + 32<i32>:word32] = r20
	goto l00018E38
	// succ:  l00018E38
l00018E1C:
	Mem0[r29 + 44<i32>:word32] = r15
	r18 = r12
	r24 = r13
	r0 = p3
	goto l00018E2C
	// succ:  l00018E2C
l00018E20:
	Mem0[r29 + 44<i32>:word32] = r15
	r18 = r12
	r24 = r13
	// succ:  l00018E2C
l00018E2C:
	Mem0[r29 + 40<i32>:word32] = r7
	Mem0[r29 + 36<i32>:word32] = r0
	Mem0[r29 + 32<i32>:word32] = r20
	Mem0[r29 + 48<i32>:word32] = r22
	Mem0[r29 + 108<i32>:word32] = r16
	// succ:  l00018E38
l00018E38:
	r20 = Mem0[r29 + 84<i32>:word64]
	r2 = Mem0[r17 + 28<i32>:word32]
	r4 = badva + 0x27<32>
	r16 = Mem0[r29 + 124<i32>:word32]
	r1 = 0x3D8<32>
	Mem0[r29 + 4<i32>:word32] = r2
	r22 = Mem0[r29 + 88<i32>:word64]
	Mem0[r29:word32] = r17
	call logmsg_function (retsize: 0;)
	r1 = 0x3D9<32>
	r20 = r18
	r9_r8 = CONVERT(r25, real32, real64)
	r7_r6 = CONVERT(r20, real32, real64)
	r4 = badva + 0x2E<32>
	r5 = Mem0[r29 + 128<i32>:word32]
	Mem0[r29 + 24<i32>:word64] = r7_r6
	r18 = Mem0[r29 + 140<i32>:word32]
	Mem0[r29 + 8<i32>:word32] = r5
	r7 = Mem0[r29 + 144<i32>:word32]
	Mem0[r29 + 12<i32>:word32] = r20
	Mem0[r29 + 16<i32>:word64] = r9_r8
	Mem0[r29:word32] = r18
	Mem0[r29 + 4<i32>:word32] = r7
	call logmsg_function (retsize: 0;)
	r2 = Mem0[r29 + 92<i32>:word32]
	r1 = 0x3DA<32>
	r9_r8 = CONVERT(r22, real32, real64)
	Mem0[r29 + 16<i32>:word64] = r9_r8
	r22 = Mem0[r29 + 132<i32>:word32]
	r4 = badva + 0x16<32>
	r7_r6 = CONVERT(r2, real32, real64)
	Mem0[r29 + 4<i32>:word32] = r19
	Mem0[r29 + 12<i32>:word32] = r22
	Mem0[r29 + 8<i32>:word32] = r26
	Mem0[r29 + 24<i32>:word64] = r7_r6
	Mem0[r29:word32] = r27
	call logmsg_function (retsize: 0;)
	r4 = badva + 0x23<32>
	r1 = 0x3DB<32>
	Mem0[r29 + 4<i32>:word32] = r24
	r5 = Mem0[r29 + 148<i32>:word32]
	Mem0[r29:word32] = r5
	call logmsg_function (retsize: 0;)
	r4 = badva + 0x1A<32>
	r1 = 0x3DC<32>
	Mem0[r29:byte] = r5
	r5 = Mem0[r17 + 32<i32>:byte]
	call logmsg_function (retsize: 0;)
	Mem0[r29 + 12<i32>:word32] = r27
	r7 = Mem0[r29 + 108<i32>:word32]
	r4 = badva + 0x13<32>
	Mem0[r29:word32] = r18
	Mem0[r29 + 8<i32>:word32] = r7
	r5 = Mem0[r29 + 112<i32>:word64]
	r1 = 0x3DD<32>
	Mem0[r29 + 4<i32>:word32] = r5
	call logmsg_function (retsize: 0;)
	r19 = Mem0[r29 + 136<i32>:word32]
	r25 = r23
	r4 = badva + 0x29<32>
	r1 = 0x3DF<32>
	r7_r6 = CONVERT(r25, real32, real64)
	r5 = Mem0[r19 + 8<i32>:word32]
	Mem0[r29:word64] = r7_r6
	r8 = badva + 0x1D<32>
	r9 = badva + 0x22<32>
	r8 = r9 + 0<32>
	p0 = !(r5 == 0<32>)
	Mem0[r29 + 8<i32>:word32] = r8
	call logmsg_function (retsize: 0;)
	p0 = r20 == r22
	r1 = 0x3E0<32>
	r3 = badva + 6<32>
	branch p0 l0001903C
	// succ:  l00018F90 l0001903C
l00018F90:
	branch r21 >u r2 l00018FB4
	// succ:  l00018F9C l00018FB4
l00018F9C:
	r2 = Mem0[r16 + 8<i32>:word32]
	Mem0[r29 + 4<i32>:word32] = r2
	r1 = 0x3E2<32>
	r3 = badva + 0x3F<32>
	Mem0[r29:word32] = r21
	r2 = r16
	goto l00019040
	// succ:  l00019040
l00018FB4:
	r24 = Mem0[r29 + 116<i32>:word32]
	branch r24 >u r4 l00018FE4
	// succ:  l00018FC8 l00018FE4
l00018FC8:
	r4 = Mem0[r2 + 20<i32>:word32]
	r21 = r24
	Mem0[r29 + 4<i32>:word32] = r24
	r1 = 0x3E5<32>
	r3 = badva + 0x2D<32>
	Mem0[r29:word32] = r4
	r2 = r16
	goto l00019040
	// succ:  l00019040
l00018FE4:
	r2 = Mem0[r29 + 76<i32>:word32]
	r1 = 0x3E7<32>
	branch r2 == 2<32> l00019040
	// succ:  l00018FF8 l00019040
l00018FF8:
	r2 = Mem0[r2:word32]
	r2 = Mem0[r29 + 76<i32>:word32]
	r1 = 0x3E8<32>
	r3 = badva + 0x28<32>
	branch r2 == 2<32> l00019040
	// succ:  l00019010 l00019040
l00019010:
	r2 = Mem0[r2 + 12<i32>:word32]
	r2 = Mem0[r29 + 72<i32>:word64]
	r4 = 4<32>
	r3 = badva + 0x21<32>
	r1 = 0x3E9<32>
	branch r4 >u r2 l00019040
	// succ:  l00019028 l00019040
l00019028:
	r2 = Mem0[r2 + 20<i32>:word32]
	r2 = Mem0[r29 + 68<i32>:word32]
	r1 = 0x3EA<32>
	r3 = badva + 0x17<32>
	branch r2 >u 6<32> l00019050
	goto l00019040
	// succ:  l00019040 l00019050
l0001903C:
	r2 = r16
	// succ:  l00019040
l00019040:
	call errlog_function (retsize: 0;)
	r0 = 0xFFFFFFFF<32>
	goto l00019218
	// succ:  l00019218
l00019050:
	r1 = 0x3EB<32>
	branch p0 l00019070
	// succ:  l0001905C l00019070
l0001905C:
	p0 = r0
	r4 = badva + 0x2B<32>
	call logmsg_function (retsize: 0;)
	r20 = Mem0[r29 + 48<i32>:word64]
	r2 = Mem0[r29 + 104<i32>:word64]
	r1 = 0x3EC<32>
	goto l00019074
	// succ:  l00019074
l00019070:
	r20 = Mem0[r29 + 48<i32>:word64]
	r2 = Mem0[r29 + 104<i32>:word64]
	// succ:  l00019074
l00019074:
	r22 = Mem0[r29 + 40<i32>:word32]
	p0 = r27 == r2
	branch p0 l00019090
	// succ:  l00019080 l00019090
l00019080:
	r4 = badva + 0x20<32>
	call logmsg_function (retsize: 0;)
	// succ:  l00019090
l00019090:
	r7 = Mem0[r29 + 108<i32>:word64]
	r2 = Mem0[r29 + 80<i32>:word64]
	p0 = r27 > 0<32>
	r5 = Mem0[r29 + 56<i32>:word64]
	r3 = Mem0[r29 + 112<i32>:word64]
	Mem0[r2 + 4<i32>:word32] = r3
	Mem0[r2 + 24<i32>:word32] = r21
	Mem0[r2:word32] = r18
	Mem0[r2 + 8<i32>:word32] = r7
	r6 = Mem0[r29 + 52<i32>:word64]
	r7 = Mem0[r29 + 44<i32>:word32]
	Mem0[r2 + 12<i32>:word32] = r27
	r2 = 0x3F000000<32>
	branch p0 l000190DC
	// succ:  l000190BC l000190DC
l000190BC:
	__loop(0<i32>, 0x000190C0<p32>, r27)
	r5 = r5 + 1<i32>
	r3 = Mem0[r5:byte]
	r4 = r2
	r3 = r3 - r7
	goto l000190E0
	// succ:  l000190E0
l000190DC:
	r1_r0 = r20_r25
	call fn00009610 (retsize: 0;)
	goto l000190E4
	// succ:  l000190E4
l000190E0:
	r1_r0 = r20_r25
	// succ:  l000190E4
l000190E4:
	call fn00009620 (retsize: 0;)
	r2 = r0
	r0 = 0<32>
	call fn00009764 (retsize: 0;)
	r3 = r0
	r2 = r29 + 0xE8<32>
	r21 = badva + 0x38<32>
	Mem0[r29 + 172<i32>:word32] = r3
	Mem0[r29 + 252<i32>:word32] = r3
	r1_r0 = r21_r16
	call nn_os_work_for_vector (retsize: 0;)
	r1_r0 = r21_r16
	r2 = r29 + 0x98<32>
	call nn_os_work_for_vector (retsize: 0;)
	r0 = Mem0[r29 + 64<i32>:word32]
	call fn000096A0 (retsize: 0;)
	r0 = Mem0[r29 + 60<i32>:word32]
	call fn000096A0 (retsize: 0;)
	branch r2 == 2<32> l00019150
	// succ:  l0001913C l00019150
l0001913C:
	r2 = Mem0[r16 + 52<i32>:word32]
	r3_r2 = Mem0[r29 + 224<i32>:word64]
	r1_r0 = r1_r0 + r3_r2
	r1_r0 = r1_r0 >>u 1<32>
	Mem0[r17 + 48<i32>:word64] = r1_r0
	branch r2 == 0<32> l000191C8
	goto l00019158
	// succ:  l00019158 l000191C8
l00019150:
	branch r2 == 0<32> l000191C8
	// succ:  l00019158 l000191C8
l00019158:
	r2 = Mem0[r19 + 8<i32>:word32]
	r3 = Mem0[r29 + 240<i32>:word32]
	r7 = Mem0[r29 + 32<i32>:word32]
	r2 = max<int32>(r3, r2)
	r2 = r2 + r7
	branch p0 l000191C8
	// succ:  l00019178 l000191C8
l00019178:
	r2 = Mem0[r19 + 4<i32>:word32]
	branch p0 l00019198
	// succ:  l00019184 l00019198
l00019184:
	// succ:  l00019188
l00019188:
	branch p0 l00019188
	// succ:  l00019190 l00019188
l00019190:
	Mem0[r19 + 4<i32>:word32] = r2
	r5 = Mem0[r17 + 28<i32>:word32]
	r7_r6 = CONVERT(r2, real32, real64)
	r4 = badva + 0x24<32>
	goto l000191A4
	// succ:  l000191A4
l00019198:
	r5 = Mem0[r17 + 28<i32>:word32]
	r7_r6 = CONVERT(r2, real32, real64)
	r4 = badva + 0x24<32>
	// succ:  l000191A4
l000191A4:
	Mem0[r29:word32] = r5
	r1 = 0x419<32>
	Mem0[r29 + 8<i32>:word64] = r7_r6
	call logmsg_function (retsize: 0;)
	r1_r0 = r16_r17
	call supernode_execute_hvx (retsize: 0;)
	goto l00019218
	// succ:  l00019218
l000191C8:
	r5 = Mem0[r29 + 68<i32>:word64]
	r3 = Mem0[r29 + 72<i32>:word64]
	r4 = badva + 0x27<32>
	r7 = Mem0[r29 + 108<i32>:word32]
	r1 = 0x435<32>
	Mem0[r3 + 12<i32>:word32] = 1<32>
	r2 = Mem0[r3 + 16<i32>:word32]
	Mem0[r3 + 4<i32>:word32] = 1<32>
	Mem0[r3 + 8<i32>:word32] = 1<32>
	Mem0[r2:word32] = 0<32>
	Mem0[r3:word32] = 1<32>
	Mem0[r5:word32] = 1<32>
	Mem0[r3 + 24<i32>:word32] = 4<32>
	Mem0[r5 + 8<i32>:word32] = 1<32>
	r2 = Mem0[r5 + 16<i32>:word32]
	Mem0[r5 + 4<i32>:word32] = 1<32>
	Mem0[r5 + 12<i32>:word32] = 1<32>
	Mem0[r5 + 24<i32>:word32] = 4<32>
	Mem0[r2:word32] = r25
	Mem0[r29 + 12<i32>:word32] = r27
	r5 = Mem0[r29 + 112<i32>:word32]
	Mem0[r29 + 4<i32>:word32] = r5
	Mem0[r29 + 8<i32>:word32] = r7
	Mem0[r29:word32] = r18
	call logmsg_function (retsize: 0;)
	r0 = 0<32>
	// succ:  l00019218
l00019218:
	r19_r18 = Mem0[r29 + 352<i32>:word64]
	r17_r16 = Mem0[r29 + 360<i32>:word64]
	r23_r22 = Mem0[r29 + 336<i32>:word64]
	r21_r20 = Mem0[r29 + 344<i32>:word64]
	r27_r26 = Mem0[r29 + 320<i32>:word64]
	r25_r24 = Mem0[r29 + 328<i32>:word64]
	v52 = r30
	r31 = Mem0[v52 + 4<i32>:word32]
	r30 = Mem0[v52:word32]
	r29 = v52 + 8<i32>
	return
	// succ:  supernode_execute_hvx_exit
supernode_execute_hvx_exit:


// supernode_check_ref
// Return size: 0
define supernode_check_ref
supernode_check_ref_entry:
	r29 = fp
	// succ:  l00019234
l00019234:
	v4 = r29 - 8<i32>
	Mem0[v4:word32] = r30
	Mem0[v4 + 4<i32>:word32] = r31
	r30 = v4
	r29 = v4 - 56<i32>
	Mem0[r29 + 496<i32>:word64] = r17_r16
	r4 = badva + 0x3F<32>
	r17 = r0
	r16 = r1
	r1 = 0x43D<32>
	Mem0[r29 + 32<i32>:word64] = r21_r20
	Mem0[r29 + 40<i32>:word64] = r19_r18
	Mem0[r29 + 16<i32>:word64] = r25_r24
	Mem0[r29 + 24<i32>:word64] = r23_r22
	Mem0[r29:word32] = r17
	Mem0[r29 + 8<i32>:word64] = r27_r26
	call logmsg_function (retsize: 0;)
	r2 = Mem0[r17 + 16<i32>:word32]
	r1 = 0x43E<32>
	r3 = badva + 0x2A<32>
	branch r4 >u r2 l00019420
	// succ:  l00019284 l00019420
l00019284:
	r4 = 0xA<32>
	p0 = r2 >u 0xB<32>
	r1 = 0x43F<32>
	r3 = badva + 0xE<32>
	r1 = 0x440<32>
	branch p0 l00019418
	// succ:  l00019294 l00019418
l00019294:
	r3 = badva + 0x13<32>
	branch r4 == 7<32> l0001941C
	// succ:  l000192A8 l0001941C
l000192A8:
	r4 = Mem0[r17 + 20<i32>:word32]
	r1 = 0x441<32>
	r3 = badva + 0x1D<32>
	branch r24 == 1<32> l0001941C
	// succ:  l000192BC l0001941C
l000192BC:
	r24 = Mem0[r17 + 4<i32>:word32]
	r1 = 0x442<32>
	r3 = badva + 0x15<32>
	branch r4 == 1<32> l0001941C
	// succ:  l000192D0 l0001941C
l000192D0:
	r4 = Mem0[r17 + 8<i32>:word32]
	r21 = 0<32>
	r5 = 0<32>
	r6 = 0<32>
	r3 = r24
	__loop(0<i32>, 0x000192E0<p32>, r2)
	branch r7 == 0<32> l000192F8
	// succ:  l000192EC l000192F8
l000192EC:
	r7 = Mem0[r3:word32]
	r6 = r6
	r3 = r3 + 4<32>
	goto l00019314
	// succ:  l00019314
l000192F8:
	Mem0[r29:word32] = r6
	r1 = 0x445<32>
	r3 = badva + 0x26<32>
	goto l00019418
	// succ:  l00019418
l0001930C:
	branch r5 >u 4<32> l00019338
	goto l00019318
	// succ:  l00019318 l00019338
l00019314:
	branch r2 == 1<32> l0001930C
	goto l00019320
	// succ:  l00019320 l0001930C
l00019318:
	r5 = r5 + 1<32>
	branch r2 == 1<32> l0001930C
	// succ:  l00019320 l0001930C
l00019320:
	r2 = Mem0[r4:word32]
	Mem0[r29:word32] = r5
	r1 = 0x44A<32>
	r3 = badva + 0xC<32>
	goto l00019418
	// succ:  l00019418
l00019338:
	r4 = Mem0[r24 + 4<i32>:word32]
	r3 = Mem0[r3 + 16<i32>:word32]
	r2 = Mem0[r2 + 16<i32>:word32]
	r22 = Mem0[r4 + 8<i32>:word32]
	r18 = Mem0[r4 + 16<i32>:word32]
	r2 = Mem0[r3:word32]
	r20 = Mem0[r2:word32]
	r25 = Mem0[r4:word32]
	r23 = Mem0[r4 + 4<i32>:word32]
	r19 = Mem0[r4 + 12<i32>:word32]
	call fmaxf.1.0 (retsize: 0;)
	r2 = 0x437F0000<32>
	r1_r0 = r0_r2
	call fn00009610 (retsize: 0;)
	r2 = 0<32>
	call fn00009624 (retsize: 0;)
	r2 = r0
	r0 = 0xC<32>
	call fn00009504 (retsize: 0;)
	r1 = 0x460<32>
	r2 = r23 * r25
	r3 = badva + 0x2B<32>
	branch r20 == 0<32> l00019424
	// succ:  l000193B0 l00019424
l000193B0:
	r20 = r0
	p0 = r26 > 0xFF<32>
	p2 = r21 == 0xB<32>
	r25 = 0xFF<32>
	p1 = r26 > 0xFFFFFFFF<32>
	r3 = r19 + 0x1F<32>
	Mem0[r20 + 8<i32>:word32] = 0<32>
	r25 = CONVERT(SLICE(r26, byte, 0), byte, uint32)
	r21 = r3 & 0xFFFFFFE0<32>
	r23 = r2 * r22
	Mem0[r20 + 4<i32>:word32] = 0x3F000000<32>
	r25 = 0<32>
	r22 = r4 & 0xFFFFFFF0<32>
	branch p2 l000193FC
	// succ:  l000193E4 l000193FC
l000193E4:
	r1 = r22 * r21
	Mem0[r20 + 8<i32>:word32] = 1<32>
	r2 = Mem0[r24 + 40<i32>:word32]
	r2 = Mem0[r2 + 16<i32>:word32]
	r2 = Mem0[r2:word32]
	Mem0[r20 + 4<i32>:word32] = r2
	Mem0[r17 + 40<i32>:word32] = r20
	r0 = 0x80<32>
	call fn00009550 (retsize: 0;)
	goto l00019404
	// succ:  l00019404
l000193FC:
	Mem0[r17 + 40<i32>:word32] = r20
	r0 = 0x80<32>
	// succ:  l00019404
l00019404:
	Mem0[r20:word32] = r0
	r1 = 0x46B<32>
	r3 = badva + 0xA<32>
	branch p0 l00019428
	// succ:  l00019418 l00019428
l00019418:
	r2 = r16
	call errlog_function (retsize: 0;)
	goto l00019420
	// succ:  l00019420
l0001941C:
	r2 = r16
	// succ:  l00019420
l00019420:
	r0 = 0xFFFFFFFF<32>
l00019424:
	r0 = 0xFFFFFFFF<32>
	// succ:  l0001947C l00019428
l00019428:
	call nn_os_vector_acquire (retsize: 0;)
	r3 = Mem0[r16 + 4<i32>:word32]
	r1_r0 = r23_r18
	r5_r4 = r21_r22
	r24 = r0
	Mem0[r29:word32] = r25
	r2 = r19
	call pad2d (retsize: 0;)
	r3 = Mem0[r20:word32]
	r0 = Mem0[r16 + 4<i32>:word32]
	r1 = r22
	r2 = r21
	call transpack (retsize: 0;)
	r0 = r24
	call nn_os_vector_release (retsize: 0;)
	r4 = badva + 0x1F<32>
	r1 = 0x471<32>
	Mem0[r29:word32] = r17
	call logmsg_function (retsize: 0;)
	r0 = 0<32>
	// succ:  l0001947C
l0001947C:
	r19_r18 = Mem0[r29 + 40<i32>:word64]
	r17_r16 = Mem0[r29 + 48<i32>:word64]
	r23_r22 = Mem0[r29 + 24<i32>:word64]
	r21_r20 = Mem0[r29 + 32<i32>:word64]
	r27_r26 = Mem0[r29 + 8<i32>:word64]
	r25_r24 = Mem0[r29 + 16<i32>:word64]
	v28 = r30
	r31 = Mem0[v28 + 4<i32>:word32]
	r30 = Mem0[v28:word32]
	r29 = v28 + 8<i32>
	return
	// succ:  supernode_check_ref_exit
supernode_check_ref_exit:


// supernode_dtor
// Return size: 0
define supernode_dtor
supernode_dtor_entry:
	r29 = fp
	// succ:  l00019490
l00019490:
	v4 = r29 - 8<i32>
	Mem0[v4:word32] = r30
	Mem0[v4 + 4<i32>:word32] = r31
	r30 = v4
	r29 = v4 - 16<i32>
	Mem0[r29 + 496<i32>:word64] = r17_r16
	r17_r16 = r1_r0
	Mem0[r29:word64] = r19_r18
	branch r18 == 0<32> l000194B8
	// succ:  l000194A8 l000194B8
l000194A8:
	r18 = Mem0[r16 + 40<i32>:word32]
	r0 = Mem0[r18:word32]
	r0 = r18
	call fn00009510 (retsize: 0;)
	r19_r18 = Mem0[r29:word64]
	r17_r16 = Mem0[r29 + 8<i32>:word64]
	r1_r0 = r17_r16
	goto l000194BC
	// succ:  l000194BC
l000194B8:
	r19_r18 = Mem0[r29:word64]
	r17_r16 = Mem0[r29 + 8<i32>:word64]
	// succ:  l000194BC
l000194BC:
	v15 = r30
	r31 = Mem0[v15 + 4<i32>:word32]
	r30 = Mem0[v15:word32]
	r29 = v15 + 8<i32>
	// succ:  l000194BC_thunk_node_free_common
l000194BC_thunk_node_free_common:
	call node_free_common (retsize: 0;)
	return
	// succ:  supernode_dtor_exit
supernode_dtor_exit:


// supernode_execute_ref
// Return size: 0
define supernode_execute_ref
supernode_execute_ref_entry:
	r29 = fp
	// succ:  l000194C4
l000194C4:
	v4 = r29 - 8<i32>
	Mem0[v4:word32] = r30
	Mem0[v4 + 4<i32>:word32] = r31
	r30 = v4
	r29 = v4 - 184<i32>
	r3 = Mem0[r0 + 8<i32>:word32]
	r2 = Mem0[r0 + 4<i32>:word32]
	Mem0[r29 + 136<i32>:word64] = r27_r26
	Mem0[r29 + 160<i32>:word64] = r21_r20
	r7 = Mem0[r2 + 8<i32>:word32]
	r4 = Mem0[r2:word32]
	r20 = Mem0[r2:word32]
	r26 = Mem0[r0 + 32<i32>:int8]
	Mem0[r29 + 64<i32>:word32] = r7
	Mem0[r29 + 92<i32>:word32] = r4
	p0 = r26 == 0<32>
	r7 = Mem0[r2 + 20<i32>:word32]
	r4 = Mem0[r2 + 12<i32>:word32]
	Mem0[r29 + 168<i32>:word64] = r19_r18
	r5 = Mem0[r2 + 24<i32>:word32]
	Mem0[r29 + 56<i32>:word32] = r4
	Mem0[r29 + 88<i32>:word32] = r7
	r4 = Mem0[r2 + 28<i32>:word32]
	r18 = Mem0[r2 + 4<i32>:word32]
	r7 = Mem0[r2 + 4<i32>:word32]
	Mem0[r29 + 96<i32>:word32] = r4
	Mem0[r29 + 176<i32>:word64] = r17_r16
	Mem0[r29 + 84<i32>:word32] = r7
	r4 = Mem0[r3 + 8<i32>:word32]
	r3 = Mem0[r3 + 4<i32>:word32]
	r7 = Mem0[r3:word32]
	Mem0[r29 + 152<i32>:word64] = r23_r22
	r16 = Mem0[r20 + 8<i32>:word32]
	Mem0[r29 + 112<i32>:word32] = r0
	Mem0[r29 + 144<i32>:word64] = r25_r24
	Mem0[r29 + 72<i32>:word32] = r1
	r0 = r16
	Mem0[r29 + 48<i32>:word32] = r3
	r17 = Mem0[r2 + 16<i32>:word32]
	r19 = Mem0[r20:word32]
	r2 = Mem0[r18:word32]
	r21 = Mem0[r20 + 12<i32>:word32]
	r23 = Mem0[r20 + 4<i32>:word32]
	r22 = Mem0[r18 + 4<i32>:word32]
	r24 = Mem0[r18 + 12<i32>:word32]
	r3 = Mem0[r5 + 4<i32>:word32]
	r1 = Mem0[r5 + 8<i32>:word32]
	Mem0[r29 + 128<i32>:word32] = r2
	Mem0[r29 + 124<i32>:word32] = r7
	r2 = p0
	r7 = Mem0[r18 + 8<i32>:word32]
	Mem0[r29 + 44<i32>:word32] = r4
	Mem0[r29 + 52<i32>:word32] = r5
	Mem0[r29 + 80<i32>:word32] = r2
	Mem0[r29 + 100<i32>:word32] = r7
	r2 = r16 - r22
	branch p0 l0001957C
	// succ:  l00019550 l0001957C
l00019550:
	Mem0[r29 + 104<i32>:word32] = r1
	r27 = 0<32>
	p0 = r26 == 2<32>
	branch p0 l00019578
	// succ:  l00019560 l00019578
l00019560:
	r1 = Mem0[r29 + 104<i32>:word32]
	p0 = r26 == 1<32>
	branch p0 l00019590
	// succ:  l0001956C l00019590
l0001956C:
	r0 = r1
	goto l00019580
	// succ:  l00019580
l00019578:
	r0 = r2 + r1
	// succ:  l0001957C
l0001957C:
	Mem0[r29 + 104<i32>:word32] = r1
	r27 = r3
	call fn00009760 (retsize: 0;)
	goto l00019588
	// succ:  l00019588
l00019580:
	Mem0[r29 + 104<i32>:word32] = r1
	r27 = r3
	// succ:  l00019588
l00019588:
	r27 = r0
	r3 = r27
	// succ:  l00019590
l00019590:
	r26 = r23 + 0<32>
	p0 = r26 == 2<32>
	r1_r0 = r3_r3
	branch p0 l000195D0
	// succ:  l000195A0 l000195D0
l000195A0:
	r26 = r23 + 0<32>
	p0 = r26 == 1<32>
	branch p0 l000195C8
	// succ:  l000195AC l000195C8
l000195AC:
	r1 = Mem0[r29 + 80<i32>:word64]
	r0 = 0<32>
	r23 = r3
	r26 = r23
	r1_r0 = r23_r26
	branch p0 l000195EC
	// succ:  l000195C4 l000195EC
l000195C4:
	p0 = r1
	goto l000195E4
	// succ:  l000195E4
l000195C8:
	goto l000195E4
	// succ:  l000195E4
l000195D0:
	r2 = Mem0[r29 + 128<i32>:word32]
	r1 = r3
	r2 = r26 - r2
	r0 = r2 + r3
	r23 = r3
	// succ:  l000195E4
l000195E4:
	call fn00009760 (retsize: 0;)
	r2 = Mem0[r29 + 56<i32>:word64]
	r3 = Mem0[r29 + 64<i32>:word64]
	r4 = r19
	goto l000195F0
	// succ:  l000195F0
l000195EC:
	r2 = Mem0[r29 + 56<i32>:word64]
	r3 = Mem0[r29 + 64<i32>:word64]
	// succ:  l000195F0
l000195F0:
	r6 = Mem0[r29 + 88<i32>:word64]
	r1 = Mem0[r29 + 92<i32>:word64]
	r19 = 0x437F0000<32>
	r2 = Mem0[r2 + 16<i32>:word32]
	r3 = Mem0[r3 + 16<i32>:word32]
	Mem0[r29 + 68<i32>:word32] = r4
	r7 = Mem0[r29 + 84<i32>:word64]
	r4 = r27 * r4
	r3 = Mem0[r1 + 16<i32>:word32]
	r12 = Mem0[r3:word32]
	r1 = r19
	r2 = Mem0[r2:word32]
	r8 = Mem0[r29 + 96<i32>:word32]
	r13 = Mem0[r29 + 124<i32>:word32]
	r5 = Mem0[r17 + 16<i32>:word32]
	r17 = Mem0[r3:word32]
	r9 = Mem0[r8 + 16<i32>:word32]
	r3 = r4 * r0
	r7 = Mem0[r7 + 16<i32>:word32]
	r6 = Mem0[r6 + 16<i32>:word32]
	r25 = r3 * r24
	Mem0[r29 + 80<i32>:word32] = r0
	r8 = Mem0[r29 + 72<i32>:word32]
	r14 = Mem0[r18 + 16<i32>:word32]
	Mem0[r29 + 76<i32>:word32] = r23
	Mem0[r29 + 60<i32>:word32] = r26
	r26 = r0
	Mem0[r29 + 108<i32>:word32] = r27
	r27 = Mem0[r20 + 16<i32>:word32]
	Mem0[r29 + 56<i32>:word32] = r9
	r15 = Mem0[r13 + 16<i32>:word32]
	r9 = Mem0[r8 + 4<i32>:word32]
	Mem0[r29 + 36<i32>:word32] = r15
	Mem0[r29 + 64<i32>:word32] = r12
	Mem0[r29 + 96<i32>:word32] = r14
	Mem0[r29 + 40<i32>:word32] = r9
	r18 = Mem0[r6:word32]
	r23 = Mem0[r5:word32]
	Mem0[r29 + 28<i32>:word32] = r3
	r20 = Mem0[r7:word32]
	call fn00009610 (retsize: 0;)
	Mem0[r29 + 84<i32>:word32] = r0
	Mem0[r29 + 88<i32>:word32] = r2
	r1_r0 = r19_r2
	call fn00009610 (retsize: 0;)
	r18 = r0
	Mem0[r29 + 92<i32>:word32] = r2
	r1_r0 = r19_r2
	call fn00009610 (retsize: 0;)
	r2 = Mem0[r29 + 84<i32>:word32]
	r1 = r18
	Mem0[r29 + 84<i32>:word32] = r0
	r1_r0 = r18_r20
	call fn00009610 (retsize: 0;)
	r0 = r26
	r2 = r0
	r1_r0 = r0_r19
	r2 = Mem0[r29 + 64<i32>:word64]
	r18 = 0<32>
	call fn00009624 (retsize: 0;)
	r0 = Mem0[r29 + 88<i32>:word64]
	r2 = r0
	r2 = 0<32>
	r1_r0 = r0_r2
	call fn00009610 (retsize: 0;)
	r20 = Mem0[r29 + 108<i32>:word32]
	call fn00009624 (retsize: 0;)
	r0 = Mem0[r29 + 92<i32>:word64]
	r2 = r0
	r2 = 0<32>
	r1_r0 = r0_r2
	call fn00009610 (retsize: 0;)
	call fn00009624 (retsize: 0;)
	r19 = Mem0[r29 + 72<i32>:word64]
	r17 = Mem0[r29 + 112<i32>:word64]
	r4 = badva + 7<32>
	r1 = 0xEF<32>
	Mem0[r29 + 1<i32>:byte] = r5
	r5 = Mem0[r17 + 28<i32>:word32]
	Mem0[r29:word32] = r17
	r4 = badva + 0<32>
	Mem0[r29 + 12<i32>:word32] = r21
	r1 = 0xF0<32>
	Mem0[r29 + 8<i32>:word32] = r16
	r5 = Mem0[r29 + 60<i32>:word64]
	r23 = r19
	Mem0[r29 + 4<i32>:word32] = r5
	r19 = Mem0[r29 + 68<i32>:word64]
	Mem0[r29:word32] = r19
	call logmsg_function (retsize: 0;)
	r4 = badva + 0x34<32>
	r26 = Mem0[r29 + 100<i32>:word32]
	Mem0[r29 + 12<i32>:word32] = r26
	r5 = Mem0[r29 + 128<i32>:word32]
	Mem0[r29 + 8<i32>:word32] = r22
	r1 = 0xF1<32>
	Mem0[r29:word32] = r24
	Mem0[r29 + 4<i32>:word32] = r5
	call logmsg_function (retsize: 0;)
	r4 = badva + 0x23<32>
	r7 = Mem0[r29 + 104<i32>:word32]
	r1 = 0xF2<32>
	Mem0[r29 + 4<i32>:word32] = r7
	r5 = Mem0[r29 + 76<i32>:word64]
	Mem0[r29:word32] = r5
	call logmsg_function (retsize: 0;)
	r4 = badva + 0x1A<32>
	r1 = 0xF3<32>
	Mem0[r29:byte] = r5
	r5 = Mem0[r17 + 32<i32>:byte]
	call logmsg_function (retsize: 0;)
	Mem0[r29 + 12<i32>:word32] = r24
	r5 = Mem0[r29 + 80<i32>:word32]
	r4 = badva + 0x13<32>
	Mem0[r29:word32] = r19
	Mem0[r29 + 4<i32>:word32] = r5
	Mem0[r29 + 8<i32>:word32] = r20
	r17 = r5
	r1 = 0xF4<32>
	call logmsg_function (retsize: 0;)
	p0 = r21 == r26
	r1 = 0xF5<32>
	r3 = badva + 0xE<32>
	r2 = Mem0[r23 + 8<i32>:word32]
	r3 = r25 + r24
	branch p0 l00019900
	// succ:  l00019850 l00019900
l00019850:
	branch r3 >u r2 l00019878
	// succ:  l00019860 l00019878
l00019860:
	r3 = 0x81<32> & r3 << 4<32>
	Mem0[r29 + 4<i32>:word32] = r2
	r1 = 0xF7<32>
	r3 = badva + 0x3B<32>
	Mem0[r29:word32] = r7
	r2 = r23
	goto l00019904
	// succ:  l00019904
l00019878:
	branch r25 >u r4 l000198A4
	// succ:  l00019888 l000198A4
l00019888:
	r4 = Mem0[r2 + 20<i32>:word32]
	r5 = r2
	Mem0[r29 + 4<i32>:word32] = r25
	r1 = 0xFA<32>
	r3 = badva + 0x2D<32>
	Mem0[r29:word32] = r4
	r2 = r23
	goto l00019904
	// succ:  l00019904
l000198A4:
	r2 = Mem0[r29 + 52<i32>:word32]
	r1 = 0xFC<32>
	branch r2 == 2<32> l00019904
	// succ:  l000198B8 l00019904
l000198B8:
	r2 = Mem0[r2:word32]
	r2 = Mem0[r29 + 52<i32>:word32]
	r1 = 0xFD<32>
	r3 = badva + 0x28<32>
	branch r2 == 2<32> l00019904
	// succ:  l000198D0 l00019904
l000198D0:
	r2 = Mem0[r2 + 12<i32>:word32]
	r2 = Mem0[r29 + 48<i32>:word64]
	r4 = 4<32>
	r3 = badva + 0x21<32>
	r1 = 0xFE<32>
	branch r4 >u r2 l00019904
	// succ:  l000198E8 l00019904
l000198E8:
	r2 = Mem0[r2 + 20<i32>:word32]
	r2 = Mem0[r29 + 44<i32>:word32]
	r1 = 0xFF<32>
	r3 = badva + 0x17<32>
	branch r2 >u 6<32> l00019918
	goto l00019904
	// succ:  l00019904 l00019918
l00019900:
	r2 = r23
	// succ:  l00019904
l00019904:
	call errlog_function (retsize: 0;)
	r0 = 0xFFFFFFFF<32>
	goto l00019CD4
	// succ:  l00019CD4
l00019918:
	Mem0[r5 + 24<i32>:word32] = r25
	Mem0[r5:word32] = r2
	r23 = Mem0[r29 + 56<i32>:word64]
	r2 = 0<32>
	Mem0[r29 + 112<i32>:word64] = r7_r6
	r3 = Mem0[r29 + 84<i32>:word64]
	Mem0[r5 + 8<i32>:word32] = r20
	Mem0[r5 + 4<i32>:word32] = r17
	r20 = r24 + 0<32>
	Mem0[r29 + 20<i32>:word32] = r0
	Mem0[r5 + 12<i32>:word32] = r24
	branch p0 l00019974
	// succ:  l0001993C l00019974
l0001993C:
	r26 = Mem0[r29 + 40<i32>:word32]
	r18 = max<int32>(r18, r2)
	r23 = r23 + 1<i32>
	r2 = Mem0[r23:byte]
	r19 = r3
	r2 = r2 - r18
	r20 = r20 + 0xFFFFFFFF<32>
	call fn00009624 (retsize: 0;)
	// succ:  l00019974
l00019974:
	r1_r0 = Mem0[r29 + 112<i32>:word64]
	r2 = Mem0[r29 + 40<i32>:word64]
	r9 = r17
	r14 = 0<32>
	r18 = Mem0[r29 + 108<i32>:word64]
	r3 = Mem0[r29 + 68<i32>:word64]
	r13 = Mem0[r29 + 60<i32>:word32]
	r0 = Mem0[r29 + 20<i32>:word32]
	p0 = r3 > 0<32>
	r2 = r2 + (r0 + 0x7F<32>)
	r3 = Mem0[r29 - 128<i32>:word32]
	r12 = Mem0[r29 + 64<i32>:word32]
	r2 = r2 & 0xFFFFFF80<32>
	p1 = r0
	Mem0[r29 + 92<i32>:word32] = r2
	r8 = r9 + 0xFFFFFFFF<32>
	r2 = r22 - r16
	branch p0 l00019BD0
	// succ:  l000199B4 l00019BD0
l000199B4:
	r5 = Mem0[r29 + 104<i32>:word64]
	r4 = r18
	p2 = r12 > 0xFF<32>
	p3 = r12 > 0xFFFFFFFF<32>
	r1 = Mem0[r29 + 88<i32>:word32]
	r14 = 0<32>
	r6 = 0xFF<32>
	r7 = r22 * r21
	r2 = Mem0[r29 + 76<i32>:word64]
	r5 = 0<32>
	r3 = r3 - r13
	r4 = r2 + r4 * r5
	p0 = r1 > 0xFF<32>
	r4 = r4 + (r4 >>u 0x1F<32>)
	r7 = r7 * r24
	Mem0[r29 + 31<i32>:byte] = r0
	r2 = r6 + 0<32>
	r0 = p3
	r8 = r3 + r8 * r2
	r0 = Mem0[r29 + 124<i32>:word32]
	r6 = CONVERT(SLICE(r12, byte, 0), byte, uint32)
	p3 = r1 > 0xFFFFFFFF<32>
	Mem0[r29 + 52<i32>:word32] = r5
	r3 = 0<32>
	p0 = r0
	r8 = r8 + (r8 >>u 0x1F<32>)
	r6 = r3 + 0<32>
	r2 = r3 + 0<32>
	r5 = r21 * r24
	Mem0[r29 + 22<i32>:byte] = r1
	r1 = r4 >> 1<32>
	Mem0[r29 + 56<i32>:word32] = r3
	// succ:  l00019A30
l00019A30:
	r3 = Mem0[r29 + 52<i32>:word32]
	p0 = r9 > 0<32>
	r15 = 0<32>
	branch p0 l00019BC0
	// succ:  l00019A40 l00019BC0
l00019A40:
	r12 = r3 * r13
	Mem0[r29 + 16<i32>:byte] = r3
	r3 = r3 * r9
	// succ:  l00019A50
l00019A50:
	Mem0[r29 + 84<i32>:word32] = r15
	r9 = 0<32>
	Mem0[r29 + 84<i32>:word32] = r15
	// succ:  l00019BB0
l00019BB0:
	r9 = Mem0[r29 + 80<i32>:word32]
	r15 = Mem0[r29 + 84<i32>:word32]
	branch r15 == r9 l00019A50
	goto l00019BC4
	// succ:  l00019BC4 l00019A50
l00019BC0:
	r3 = Mem0[r29 + 68<i32>:word64]
	r4 = Mem0[r29 + 52<i32>:word64]
	// succ:  l00019BC4
l00019BC4:
	r15 = r15 + 1<32>
	r4 = r4 + 1<32>
	Mem0[r29 + 52<i32>:word32] = r4
	branch p0 l00019A30
	// succ:  l00019BD0 l00019A30
l00019BD0:
	p0 = r4 == -1<i32>
	r2 = Mem0[r29 + 24<i32>:word32]
	r16 = r9
	r19 = r14 + r2
	call fn00009760 (retsize: 0;)
	r2 = Mem0[r29 + 28<i32>:word64]
	r3 = Mem0[r29 + 20<i32>:word64]
	r12 = r16
	r14 = Mem0[r29 + 40<i32>:word32]
	r13 = Mem0[r29 + 36<i32>:word32]
	p1 = r3
	r4 = r12 * r18
	r5 = Mem0[r29 + 68<i32>:word32]
	branch p0 l00019C74
	// succ:  l00019C08 l00019C74
l00019C08:
	p0 = r2 > 0<32>
	r3_r2 = 0x10000000000<64>
	r4 = r4 * r5
	__loop(1<i32>, 0x00019C18<p32>, r4)
	r5_r4 = r13_r14
	r7 = Mem0[r29 + 92<i32>:word32]
	branch p1 l00019C68
	// succ:  l00019C24 l00019C68
l00019C24:
	r6 = r3 * r24
	__loop(0<i32>, 0x00019C30<p32>, r24)
	r6 = r7 + (r6 << 2<32>)
	r4 = r4 + 4<i32>
	r8 = Mem0[r4:word32]
	r7 = 0<32>
	r6 = r6 + 4<i32>
	r9 = Mem0[r6:word32]
	r8 = r9 + r8
	branch __bit<word32,int32>(r8, -1<i32>) l00019C60
	// succ:  l00019C54 l00019C60
l00019C54:
	r8 = r8 >> 0x10<32>
	r7 = 0xFF<32>
	p0 = r2 > r8
	Mem0[r5:byte] = r7
	r5 = r5 + 1<i32>
	goto l00019C64
	// succ:  l00019C64
l00019C60:
	Mem0[r5:byte] = r7
	r5 = r5 + 1<i32>
	// succ:  l00019C64
l00019C64:
	r13 = r13 + r24
	// succ:  l00019C68
l00019C68:
	r3 = r3 + 1<32>
	// succ:  l00019C74
l00019C74:
	r6 = Mem0[r29 + 44<i32>:word64]
	r4 = Mem0[r29 + 48<i32>:word64]
	r1 = 0x152<32>
	r5 = Mem0[r29 + 32<i32>:word32]
	Mem0[r4 + 12<i32>:word32] = 1<32>
	r2 = Mem0[r4 + 16<i32>:word32]
	Mem0[r4 + 4<i32>:word32] = 1<32>
	Mem0[r4 + 8<i32>:word32] = 1<32>
	r3 = 2<32>
	Mem0[r2:word32] = 0<32>
	Mem0[r4:word32] = 1<32>
	Mem0[r6:word32] = 1<32>
	Mem0[r4 + 24<i32>:word32] = 4<32>
	r4 = badva + 0x31<32>
	Mem0[r6 + 8<i32>:word32] = 1<32>
	r2 = Mem0[r6 + 16<i32>:word32]
	Mem0[r6 + 4<i32>:word32] = 1<32>
	Mem0[r6 + 12<i32>:word32] = 1<32>
	Mem0[r6 + 24<i32>:word32] = 4<32>
	Mem0[r2:word32] = r5
	Mem0[r29 + 12<i32>:word32] = r24
	r2 = Mem0[r29 + 72<i32>:word32]
	Mem0[r29 + 8<i32>:word32] = r18
	r5 = Mem0[r29 + 68<i32>:word64]
	Mem0[r29:word32] = r5
	Mem0[r29 + 4<i32>:word32] = r12
	call logmsg_function (retsize: 0;)
	r0 = 0<32>
	// succ:  l00019CD4
l00019CD4:
	r19_r18 = Mem0[r29 + 168<i32>:word64]
	r17_r16 = Mem0[r29 + 176<i32>:word64]
	r23_r22 = Mem0[r29 + 152<i32>:word64]
	r21_r20 = Mem0[r29 + 160<i32>:word64]
	r27_r26 = Mem0[r29 + 136<i32>:word64]
	r25_r24 = Mem0[r29 + 144<i32>:word64]
	v48 = r30
	r31 = Mem0[v48 + 4<i32>:word32]
	r30 = Mem0[v48:word32]
	r29 = v48 + 8<i32>
	return
	// succ:  supernode_execute_ref_exit
supernode_execute_ref_exit:


