// logmsg_function
// Return size: 0
define logmsg_function
logmsg_function_entry:
	r29 = fp
	// succ:  l00019CE8
l00019CE8:
	v4 = r29 - 8<i32>
	Mem0[v4:word32] = r30
	Mem0[v4 + 4<i32>:word32] = r31
	r30 = v4
	r29 = v4 - 8<i32>
	branch r3 >u r5 l00019D08
	// succ:  l00019CF8 l00019D08
l00019CF8:
	r5 = Mem0[r2 + 16<i32>:word32]
	r6 = r29 + 0x10<32>
	r5 = r29 + 0x10<32>
	r0 = PC + 0xC<32>
	Mem0[r29 + 4<i32>:word32] = r6
	call logv (retsize: 0;)
	// succ:  l00019D08
l00019D08:
	v13 = r30
	r31 = Mem0[v13 + 4<i32>:word32]
	r30 = Mem0[v13:word32]
	r29 = v13 + 8<i32>
	return
	// succ:  logmsg_function_exit
logmsg_function_exit:


// errlog_function
// Return size: 0
define errlog_function
errlog_function_entry:
	r29 = fp
	// succ:  l00019D0C
l00019D0C:
	v4 = r29 - 8<i32>
	Mem0[v4:word32] = r30
	Mem0[v4 + 4<i32>:word32] = r31
	r30 = v4
	r29 = v4 - 8<i32>
	r4 = r3
	r0 = PC + 0xE7F4<32>
	Mem0[r29 + 1<i32>:byte] = r6
	r6 = r29 + 0x10<32>
	r5 = r29 + 0x10<32>
	r3 = 0<32>
	v13 = r30
	r31 = Mem0[v13 + 4<i32>:word32]
	r30 = Mem0[v13:word32]
	r29 = v13 + 8<i32>
	return
	// succ:  errlog_function_exit
errlog_function_exit:


// supernode_execute_hvx_slice
// Return size: 0
define supernode_execute_hvx_slice
supernode_execute_hvx_slice_entry:
	r29 = fp
	goto l00019D30
	// succ:  l00019D30
l00009730:
	r14 = PC + 0x21A80<32>
	r28 = Mem0[r14:word32]
	call r28 (retsize: 0;)
	return
	// succ:  supernode_execute_hvx_slice_exit
l00019D30:
	v4 = r29 - 8<i32>
	Mem0[v4:word32] = r30
	Mem0[v4 + 4<i32>:word32] = r31
	r30 = v4
	r29 = v4 - 312<i32>
	Mem0[r29 - 16<i32>:word64] = r17_r16
	r16 = r1
	Mem0[r29 + 272<i32>:word64] = r25_r24
	r3 = Mem0[r16:word32]
	r5 = Mem0[r16 + 4<i32>:word32]
	Mem0[r29 + 280<i32>:word64] = r23_r22
	Mem0[r29 + 248<i32>:word32] = r5
	r2 = Mem0[r3 + 4<i32>:word32]
	r17 = Mem0[r3 + 32<i32>:int8]
	Mem0[r29 + 288<i32>:word64] = r21_r20
	Mem0[r29 + 296<i32>:word64] = r19_r18
	r1 = Mem0[r2 + 4<i32>:word32]
	r24 = Mem0[r2:word32]
	p0 = r17 == 0<32>
	r7 = Mem0[r2 + 8<i32>:word32]
	r4 = Mem0[r2 + 24<i32>:word32]
	Mem0[r29 + 240<i32>:word32] = r7
	r5 = Mem0[r2 + 16<i32>:word32]
	r22 = Mem0[r2 + 12<i32>:word32]
	r7 = Mem0[r2 + 20<i32>:word32]
	r23 = Mem0[r24 + 8<i32>:word32]
	r2 = Mem0[r1 + 12<i32>:word32]
	Mem0[r29 + 252<i32>:word32] = r0
	Mem0[r29 + 264<i32>:word64] = r27_r26
	r0 = r23
	Mem0[r29 + 64<i32>:word32] = r2
	r2 = Mem0[r1 + 8<i32>:word32]
	r19 = Mem0[r1:word32]
	r21 = Mem0[r24 + 4<i32>:word32]
	r27 = Mem0[r4 + 8<i32>:word32]
	r20 = Mem0[r1 + 4<i32>:word32]
	r1 = p0
	Mem0[r29 + 228<i32>:word32] = r7
	r18 = Mem0[r4 + 4<i32>:word32]
	r7 = Mem0[r24:word32]
	r6 = Mem0[r24 + 12<i32>:word32]
	Mem0[r29 + 224<i32>:word32] = r5
	Mem0[r29 + 256<i32>:word32] = r3
	Mem0[r29 + 72<i32>:word32] = r7
	Mem0[r29 + 112<i32>:word32] = r6
	Mem0[r29 + 220<i32>:word32] = r1
	Mem0[r29 + 244<i32>:word32] = r2
	r2 = r23 - r20
	branch p0 l00019DEC
	// succ:  l00019DD4 l00019DEC
l00019DD4:
	r0 = r2 + r27
	branch p0 l00019DEC
	// succ:  l00019DDC l00019DEC
l00019DDC:
	p0 = r9 == 4<32>
	r0 = 0<32>
	branch p0 l00019DF4
	// succ:  l00019DE4 l00019DF4
l00019DE4:
	p0 = r9 == 2<32>
	r0 = r27
	r0 = r0 + (r23 + 0xFFFFFFFF<32>)
	// succ:  l00019DEC
l00019DEC:
	r1 = r27
	call fn00009760 (retsize: 0;)
	// succ:  l00019DF4
l00019DF4:
	r1 = r18 + 0<32>
	r26 = r27
	r25 = r0
	p0 = r17 == 2<32>
	Mem0[r29 + 59<i32>:byte] = r0
	r2 = r21 - r19
	branch p0 l00019E3C
	// succ:  l00019E18 l00019E3C
l00019E18:
	r0 = p0
	r1_r0 = r18_r18
	r1 = Mem0[r29 + 220<i32>:word32]
	r0 = 0<32>
	r1_r0 = r18_r21
	branch p0 l00019E44
	// succ:  l00019E30 l00019E44
l00019E30:
	p0 = r1
	goto l00019E40
	// succ:  l00019E40
l00019E3C:
	r0 = r2 + r18
	// succ:  l00019E40
l00019E40:
	call fn00009760 (retsize: 0;)
	// succ:  l00019E44
l00019E44:
	r4 = Mem0[r29 + 256<i32>:word32]
	r3 = Mem0[r29 + 240<i32>:word32]
	r7 = r20 - r23
	r6 = r0 + 0xFFFFFFFF<32>
	Mem0[r29 + 116<i32>:word32] = r23
	r2 = Mem0[r22 + 16<i32>:word32]
	r17 = r19
	r22 = r25 + 0xFFFFFFFF<32>
	r4 = Mem0[r4 + 8<i32>:word32]
	r3 = Mem0[r3 + 16<i32>:word32]
	r23 = r6
	r22 = r7 + r22 * r26
	Mem0[r29 + 240<i32>:word32] = r6
	r6 = Mem0[r29 + 224<i32>:word32]
	r2 = Mem0[r2:word32]
	r1 = Mem0[r29 + 228<i32>:word32]
	r7 = Mem0[r29 + 72<i32>:word64]
	r19 = Mem0[r29 + 64<i32>:word64]
	r22 = r22 + (r22 >>u 0x1F<32>)
	r27 = Mem0[r3:word32]
	r9 = r19 + 0x1F<32>
	r3 = r17 - r21
	r7 = r19 * r7
	r5 = Mem0[r1 + 16<i32>:word32]
	r4 = Mem0[r4:word32]
	r7 = r7 * r25
	r23 = r3 + r23 * r18
	r8 = Mem0[r24 + 16<i32>:word32]
	r6 = Mem0[r6 + 16<i32>:word32]
	r24 = r0
	r0 = r2 - r27
	Mem0[r29 + 128<i32>:word32] = r26
	Mem0[r29 + 160<i32>:word32] = r8
	r8 = Mem0[r16 + 20<i32>:word32]
	r23 = r23 + (r23 >>u 0x1F<32>)
	Mem0[r29 + 56<i32>:word32] = r16
	r3 = Mem0[r4 + 16<i32>:word32]
	Mem0[r29 + 228<i32>:word32] = r9
	Mem0[r29 + 108<i32>:word32] = r21
	Mem0[r29 + 196<i32>:word32] = r8
	Mem0[r29 + 224<i32>:word32] = r7
	r26 = Mem0[r5:word32]
	r16 = Mem0[r6:word32]
	Mem0[r29 + 60<i32>:word32] = r3
	call fmaxf.1.0 (retsize: 0;)
	r2 = 0x437F0000<32>
	r21 = 0<32>
	r1_r0 = r0_r2
	call fn00009610 (retsize: 0;)
	r2 = r21 - r27
	call fn00009620 (retsize: 0;)
	r0 = r2 * r0
	r2 = 0<32>
	r0 = r26 - r16
	r18 = truncf(CONVERT(r0, uint32, real32))
	p1 = r18 > 0xFF<32>
	r18 = 0xFFFFFFFF<32>
	p0 = r18 > 0xFFFFFFFF<32>
	Mem0[r29 + 33<i32>:byte] = r2
	r2 = 0<32>
	r18 = r2 + 0<32>
	call fmaxf.1.0 (retsize: 0;)
	r2 = 0<32>
	r1_r0 = r0_r2
	call fn00009610 (retsize: 0;)
	r2 = r21 - r16
	call fn00009620 (retsize: 0;)
	r0 = r2 * r0
	r2 = truncf(CONVERT(r0, uint32, real32))
	branch p0 l00019F68
	// succ:  l00019F58 l00019F68
l00019F58:
	p0 = __bit<word32,word32>(r2, 0<32>)
	r3 = CONVERT(SLICE(r2, byte, 0), byte, uint32)
	r3 = 0xFF<32>
	p0 = r2 > 0xFF<32>
	Mem0[r29 + 132<i32>:word32] = r3
	// succ:  l00019F68
l00019F68:
	r9 = Mem0[r29 + 128<i32>:word32]
	r6 = Mem0[r29 + 244<i32>:word32]
	p0 = r17 == 7<32>
	r2 = r20 * r17
	Mem0[r29 + 41<i32>:byte] = r8
	r5 = Mem0[r29 + 112<i32>:word32]
	r8 = r23 >> 1<32>
	r4 = 3<32> + r24 * r25
	p1 = r5 == 3<32>
	p2 = r9 == 2<32>
	r0 = p0
	Mem0[r29 + 220<i32>:word32] = r0
	r2 = Mem0[r29 + 224<i32>:word32]
	r7 = r3 & 0xFFFFFFF0<32>
	r21 = r2 * r6
	r0 = Mem0[r29 + 220<i32>:word32]
	r5 = r5 + 0xF<32>
	p0 = r7 == 0x20<32>
	p3 = r7 == 0xA0<32>
	r4 = r4 & 0x3FFFFFFC<32>
	p0 = __fastcorner9(p2, p0)
	r1 = r24 * r25
	Mem0[r29 + 26<i32>:byte] = r6
	r12 = Mem0[r29 + 228<i32>:word32]
	p3 = __fastcorner9(p2, p3)
	r6 = r22 >> 1<32>
	r8 = r25
	r5 = r21 == r7
	r26 = r5 & 0xFFFFFFF0<32>
	Mem0[r29 + 76<i32>:word32] = r1
	r6 = r18 & 0xFF<32>
	p0 = __fastcorner9(p1, p0)
	r2 = r2 * r24
	r13 = r12 & 0xFFFFFFE0<32>
	r23 = r9
	r3 = r19 << 2<32>
	p1 = r0
	r25 = r24
	p2 = r17 == 3<32>
	r4 = r4 << 2<32>
	p1 = __fastcorner9(p1, p2)
	Mem0[r29 + 96<i32>:word32] = r5
	Mem0[r29 + 244<i32>:word32] = r13
	p2 = r20 == 7<32>
	p0 = __fastcorner9(p2, p0)
	p1 = r20 == 3<32>
	p2 = __fastcorner9(p2, p1)
	p0 = r21 == r7
	r0 = p2
	p3 = p2 | p0 & p1
	Mem0[r29 + 100<i32>:word32] = r0
	r0 = Mem0[r29 + 236<i32>:word32]
	r24 = Mem0[r29 + 108<i32>:word32]
	r22 = Mem0[r29 + 116<i32>:word32]
	branch p1 l0001A078
	// succ:  l0001A050 l0001A078
l0001A050:
	p1 = r0
	r24 = Mem0[r29 + 108<i32>:word32]
	p2 = !(r17 == 1<32>)
	p1 = !(r20 == 1<32>)
	Mem0[r29 + 30<i32>:byte] = r0
	r0 = p3
	p1 = p2 | p1
	branch p1 l0001A090
	// succ:  l0001A070 l0001A090
l0001A070:
	goto l0001A08C
	// succ:  l0001A08C
l0001A078:
	r22 = Mem0[r29 + 116<i32>:word64]
	r5 = 0<32>
	r0 = p3
	Mem0[r29 + 120<i32>:word32] = r0
	Mem0[r29 + 200<i32>:word32] = r5
	branch p3 l0001A0A8
	// succ:  l0001A08C l0001A0A8
l0001A08C:
	Mem0[r29 + 50<i32>:byte] = r5
	r0 = Mem0[r29 + 120<i32>:word32]
	r5 = p0 ? 1<32> : 0<32>
	goto l0001A09C
	// succ:  l0001A09C
l0001A090:
	Mem0[r29 + 50<i32>:byte] = r5
	r0 = Mem0[r29 + 120<i32>:word32]
	// succ:  l0001A09C
l0001A09C:
	Mem0[r29 - 20<i32>:word32] = r6
	r6 = Mem0[r29 - 92<i32>:word32]
	branch p0 l0001A0D0
	// succ:  l0001A0A8 l0001A0D0
l0001A0A8:
	Mem0[r29 + 236<i32>:word32] = r6
	r5 = r25
	r16 = r7
	r6 = r17 << 1<32>
	Mem0[r29 + 232<i32>:word32] = r8
	r5 = r5 + (r6 + 2<32>)
	r7 = r8 * r16
	goto l0001A0E8
	// succ:  l0001A0E8
l0001A0D0:
	Mem0[r29 + 232<i32>:word32] = r8
	r5 = r5 + r22
	r6 = r6 + r17
	r5 = r5 * r26
	r6 = r24 + (r6 << 1<32>)
	r5 = r5 * r6
	// succ:  l0001A0E8
l0001A0E8:
	r6 = Mem0[r29 + 252<i32>:word32]
	r6 = Mem0[r6 + 4<i32>:word32]
	Mem0[r29 + 188<i32>:word32] = r6
	r6 = r6 + (r3 + 0x7F<32>)
	Mem0[r29 + 42<i32>:byte] = r3
	r3 = r6 & 0xFFFFFF80<32>
	r5 = Mem0[r29 + 256<i32>:word32]
	r18 = r3 & 0xFFFFFF80<32>
	r7 = r18 + 0x17F<32>
	Mem0[r29 + 46<i32>:byte] = r6
	r5 = Mem0[r5 + 40<i32>:word32]
	r6 = r7 & 0xFFFFFF80<32>
	r27 = Mem0[r5:word32]
	r4 = Mem0[r29 + 244<i32>:word32]
	r19 = r6 & 0xFFFFFF80<32>
	p0 = r19 == r4
	r7 = r19 + 0x17F<32>
	Mem0[r29 + 17<i32>:byte] = r0
	r3 = r7 & 0xFFFFFF80<32>
	r0 = p0
	r2 = Mem0[r29 + 60<i32>:word32]
	r3 = r3 & 0xFFFFFF80<32>
	r3 = r2 + 0<32>
	Mem0[r29 + 204<i32>:word32] = r3
	call fn00009530 (retsize: 0;)
	p0 = r21 == r16
	r2 = r24 * r22
	Mem0[r29 + 48<i32>:word64] = r1_r0
	r3 = Mem0[r29 + 112<i32>:word64]
	r2 = r2 * r3
	Mem0[r29 + 80<i32>:word32] = r2
	branch p0 l0001A17C
	// succ:  l0001A170 l0001A17C
l0001A170:
	r0 = Mem0[r29 + 120<i32>:word64]
	r4 = r23
	branch p0 l0001A1A0
	// succ:  l0001A17C l0001A1A0
l0001A17C:
	p0 = r0
	r22 = Mem0[r29 + 232<i32>:word32]
	r20 = 1<32>
	r26 = r16
	r24 = r25
	r7 = 0<32>
	r4 = 1<32>
	r2 = 0<32>
	r17 = 1<32>
	Mem0[r29 + 164<i32>:word32] = r7
	Mem0[r29 + 104<i32>:word32] = r2
	// succ:  l0001A1A0
l0001A1A0:
	Mem0[r29 + 224<i32>:word32] = r20
	r2 = Mem0[r29 + 104<i32>:word32]
	r3 = r26 * r20
	Mem0[r29 + 116<i32>:word32] = r22
	r0 = 0x60000<32>
	r2 = r22 + r2
	Mem0[r29 + 192<i32>:word32] = r26
	Mem0[r29 + 228<i32>:word32] = r4
	r2 = r2 * r26
	Mem0[r29 + 108<i32>:word32] = r24
	Mem0[r29 + 252<i32>:word32] = r2
	r2 = r4 * r2
	r20 = r3 * r17
	r1 = r2 << 2<32>
	r0 = r0 - (r20 << 6<32>)
	call fn00009750 (retsize: 0;)
	r2 = Mem0[r29 + 240<i32>:word32]
	r2 = r2 + r0
	r1_r0 = r0_r2
	call fn00009750 (retsize: 0;)
	r21 = Mem0[r29 + 248<i32>:word32]
	r3 = r0 + 1<32>
	r2 = r25
	p1 = r21 == 1<32>
	r4 = __clear_bit<word32,word32>(r3, 0<32>)
	r2 = r2 + (r2 >>u 0x1F<32>)
	p0 = r4 == 2<32>
	r3 = r3 + (r3 >>u 0x1F<32>)
	Mem0[r29 + 55<i32>:byte] = r2
	r2 = r2 >> 1<32>
	r25 = r25 - (r2 >> 1<32>)
	r25 = r2 + 0<32>
	r26 = p1
	Mem0[r29 + 176<i32>:word32] = r25
	Mem0[r29 + 256<i32>:word32] = r26
	r24 = 2<32>
	Mem0[r29 + 180<i32>:word32] = r24
	r1_r0 = r24_r25
	call fn00009750 (retsize: 0;)
	r20 = 0x3D<32> & r20 >>u 0xB<32>
	Mem0[r29 + 212<i32>:word32] = r0
	r3 = 0x40<32>
	r2 = r20 >> 0x1F<32>
	r20 = r20 + (r2 >>u 0x1A<32>)
	r20 = r17
	r2 = r20 >> 6<32>
	r2 = SEQ(SLICE(r3, word16, 0), SLICE(r2, word16, 0))
	r1_r0 = r3_r2
	Mem0[r29 + 136<i32>:word64] = r1_r0
	__l2fetch<word32,word64>(r27, r1_r0)
	r1 = 0<32>
	r2 = 0x80<32>
	r0 = r18 + (r21 << 7<32>)
	Mem0[r29 + 208<i32>:word32] = r0
	r17 = 0<32>
	call fn000095F0 (retsize: 0;)
	branch r17 > 0<32> l0001A314
	// succ:  l0001A29C l0001A314
l0001A29C:
	r2 = Mem0[r29 + 72<i32>:word32]
	r7 = r24 * r25
	r0 = Mem0[r29 + 256<i32>:word32]
	r2 = Mem0[r29 + 248<i32>:word32]
	Mem0[r29 + 43<i32>:byte] = r6
	r3 = Mem0[r29 + 220<i32>:word32]
	r6 = r24 + 0xFFFFFFFF<32>
	r2 = r2 << 5<32>
	Mem0[r29 + 92<i32>:word32] = r7
	r3 = -1<i32>
	r19 = r19 + (r2 << 2<32>)
	Mem0[r29 + 220<i32>:word32] = r3
	r3 = Mem0[r29 + 128<i32>:word32]
	r2 = Mem0[r29 + 112<i32>:word32]
	r0 = Mem0[r29 + 76<i32>:word32]
	r1 = Mem0[r29 + 212<i32>:word32]
	r2 = r3 * r2
	r4 = Mem0[r29 + 220<i32>:word32]
	r6 = Mem0[r29 + 244<i32>:word32]
	r1 = r1 + (r20 + 1<32>)
	r5 = r2 * r22
	Mem0[r29 + 84<i32>:word32] = r17
	Mem0[r29 + 88<i32>:word32] = r18
	r3 = 0x3F<32> + r1 * r5
	Mem0[r29 + 156<i32>:word32] = r5
	r2 = Mem0[r29 + 80<i32>:word32]
	r2 = r0 * r6
	r7 = r2 * r18
	Mem0[r29 + 152<i32>:word32] = r7
	r5 = Mem0[r29 + 160<i32>:word32]
	r0 = r3 >> 0x1F<32>
	r4 = r5 * r4
	Mem0[r29 + 54<i32>:byte] = r1
	r3 = r3 + (r0 >>u 0x1A<32>)
	r1 = r2 * r18
	goto l0001A320
	// succ:  l0001A320
l0001A314:
	Mem0[r29 + 54<i32>:byte] = r1
	r3 = r3 + (r0 >>u 0x1A<32>)
	// succ:  l0001A320
l0001A320:
	r3 = 0x40<32>
	r2 = r3 >> 6<32>
	r2 = SEQ(SLICE(r3, word16, 0), SLICE(r2, word16, 0))
	r1_r0 = r3_r2
	__l2fetch<word32,word64>(r5, r1_r0)
	r3 = Mem0[r29 + 88<i32>:word32]
	branch p0 l0001A6F4
	// succ:  l0001A33C l0001A6F4
l0001A33C:
	p0 = r22 > 1<32>
	Mem0[r29 + 37<i32>:byte] = r2
	r4 = Mem0[r29 + 80<i32>:word32]
	r22 = 0<32>
	r2 = r20 + 1<32>
	Mem0[r29 + 60<i32>:byte] = r4
	r4 = r2 + r4 * r3
	// succ:  l0001A358
l0001A358:
	p0 = r24 > 0<32>
	r6 = r25
	r23 = 0<32>
	r21 = Mem0[r29 + 220<i32>:word32]
	r26 = Mem0[r29 + 92<i32>:word32]
	// succ:  l0001A370
l0001A370:
	r4 = Mem0[r29 + 220<i32>:word32]
	r3 = Mem0[r29 + 172<i32>:word32]
	p1 = r23 == 0<32>
	r2 = r6 * r24
	r5 = Mem0[r29 + 200<i32>:word32]
	r7 = Mem0[r29 + 212<i32>:word32]
	r2 = 0<32>
	p0 = r2 > r26
	r3 = r25 + r4
	p2 = r3 == r23
	r4 = p0 ? 1<32> : 0<32>
	r2 = r20 + 0xFFFFFFFF<32>
	r3 = r4 + 0<32>
	r17 = r3 - r21
	p0 = r5 == 0<32>
	r4 = r4 + r7
	r25 = r20
	r3 = r4 + r21
	r17 = r4 + 0<32>
	r6 = r6 - r17
	r5 = r17 + r20
	branch p0 l0001A3D0
	// succ:  l0001A3C4 l0001A3D0
l0001A3C4:
	r9 = Mem0[r29 - 4<i32>:word32]
	r8 = Mem0[r29 - 128<i32>:word32]
	branch p1 l0001A418
	// succ:  l0001A3D0 l0001A418
l0001A3D0:
	p1 = r14 == 0<32>
	r5 = Mem0[r29 + 156<i32>:word32]
	r4 = Mem0[r29 + 148<i32>:word32]
	r25 = r20
	Mem0[r29 + 256<i32>:word32] = r6
	r6 = Mem0[r29 + 152<i32>:word32]
	r4 = r4 + r17
	r5 = Mem0[r29 + 160<i32>:word32]
	r3 = r5 * r3
	r4 = 0x3F<32> + r4 * r5
	r7 = r4 >> 0x1F<32>
	r5 = r5 + (r3 + r6)
	r4 = r4 + (r7 >>u 0x1A<32>)
	r4 = 0x40<32>
	r7 = r4 >> 6<32>
	r3 = SEQ(SLICE(r4, word16, 0), SLICE(r7, word16, 0))
	r1_r0 = r4_r3
	__l2fetch<word32,word64>(r5, r1_r0)
	goto l0001A45C
	// succ:  l0001A45C
l0001A418:
	Mem0[r29 + 256<i32>:word32] = r6
	r6 = Mem0[r29 + 164<i32>:word32]
	r4 = r9 * r8
	r7 = Mem0[r29 + 248<i32>:word32]
	r6 = r20 + r6
	r7 = 0x40<32>
	r6 = r6 * r7
	r4 = Mem0[r29 + 168<i32>:word32]
	r3 = 0x3F<32> + r4 * r5
	r6 = r6 + r3 * r8
	r1 = r3 >> 0x1F<32>
	r3 = r3 + (r1 >>u 0x1A<32>)
	r6 = r4 + r6 * r9
	r3 = r3 >> 6<32>
	r3 = SEQ(SLICE(r7, word16, 0), SLICE(r3, word16, 0))
	r1_r0 = r7_r3
	__l2fetch<word32,word64>(r6, r1_r0)
	// succ:  l0001A45C
l0001A45C:
	r20 = Mem0[r29 + 240<i32>:word32]
	r3 = Mem0[r29 - 92<i32>:word32]
	r6 = r16
	branch p0 l0001A574
	// succ:  l0001A46C l0001A574
l0001A46C:
	r7 = Mem0[r29 + 252<i32>:word32]
	r4 = Mem0[r29 + 248<i32>:word32]
	r16 = r6 + 0<32>
	p0 = r22 == 0<32>
	r18 = r27 + 0<32>
	r20 = r7
	r3 = r25 + r3
	r3 = Mem0[r29 + 168<i32>:word32]
	r5 = r3 * r4
	r1 = r21 + r5
	branch p0 l0001A574
	// succ:  l0001A49C l0001A574
l0001A49C:
	r20 = r3 + r20 * r5
	Mem0[r29 + 31<i32>:byte] = r0
	r0 = p2
	r7 = PC + 0x10C74<32>
	r3 = Mem0[r7 - 96<i32>:word32]
	r4 = Mem0[r7 - 112<i32>:word32]
	r24 = Mem0[r7 - 64<i32>:word32]
	r6 = Mem0[r7 - 80<i32>:word32]
	r0 = Mem0[r29 + 120<i32>:word32]
	r6 = r2 + r21
	r7 = r17 - r2
	branch p0 l0001A510
	// succ:  l0001A4E0 l0001A510
l0001A4E0:
	p0 = r0
	r7 = Mem0[r29 + 252<i32>:word32]
	r8 = Mem0[r29 + 100<i32>:word32]
	r0 = Mem0[r29 + 240<i32>:word32]
	r2 = Mem0[r29 + 236<i32>:word32]
	r6 = Mem0[r29 + 168<i32>:word32]
	r3 = r4 + 0<32>
	r24 = r6 + 0<32>
	p0 = r8
	r5_r4 = r17_r21
	call r24 (retsize: 0;)
	r1 = r6 + r1 * r7
	goto l0001A568
	// succ:  l0001A568
l0001A510:
	Mem0[r29 + 8<i32>:byte] = r3
	r3 = Mem0[r29 + 96<i32>:word32]
	r0 = Mem0[r29 + 232<i32>:word32]
	Mem0[r29 + 28<i32>:word32] = r4
	r2 = Mem0[r29 + 104<i32>:word64]
	Mem0[r29 + 20<i32>:word32] = r0
	Mem0[r29 + 24<i32>:word32] = r2
	r8 = Mem0[r29 + 224<i32>:word32]
	r9 = Mem0[r29 + 228<i32>:word32]
	Mem0[r29 + 8<i32>:word32] = r9
	r12 = Mem0[r29 + 252<i32>:word32]
	Mem0[r29 + 4<i32>:word32] = r8
	r8 = Mem0[r29 + 168<i32>:word32]
	r5 = r5 + r6 * r9
	Mem0[r29:word32] = r25
	r1 = Mem0[r29 + 108<i32>:word32]
	Mem0[r29 + 16<i32>:word32] = r7
	r4 = Mem0[r29 + 236<i32>:word32]
	Mem0[r29 + 12<i32>:word32] = r6
	r0 = Mem0[r29 + 240<i32>:word32]
	r5 = r8 + r5 * r12
	r2 = Mem0[r29 + 116<i32>:word64]
	r3 = Mem0[r29 + 112<i32>:word64]
	call fast_im2col_co (retsize: 0;)
	// succ:  l0001A568
l0001A568:
	r0 = Mem0[r29 + 124<i32>:word64]
	r6 = r16
	r27 = r18
	p2 = r0
	// succ:  l0001A574
l0001A574:
	branch r2 == 0<32> l0001A59C
	// succ:  l0001A580 l0001A59C
l0001A580:
	r2 = Mem0[r29 + 248<i32>:word32]
	r1_r0 = Mem0[r29 + 136<i32>:word64]
	r3 = Mem0[r29 + 244<i32>:word32]
	r2 = 0<32>
	p0 = r3 > r2
	r2 = r22 + 0<32>
	r2 = r27 + r2 * r6
	__l2fetch<word32,word64>(r2, r1_r0)
	// succ:  l0001A59C
l0001A59C:
	r18 = Mem0[r29 + 236<i32>:word32]
	r16 = r6
	r2 = r6
	r24 = r22
	r3 = 0<32> - r18
	r24 = r27 + r24 * r6
	r1_r0 = r19_r24
	call gvmsumb_asm (retsize: 0;)
	r13 = Mem0[r29 + 252<i32>:word32]
	r12 = Mem0[r29 + 228<i32>:word32]
	p0 = r22 == 0<32>
	r7 = r18 * r16
	r7 = Mem0[r29 - 48<i32>:word32]
	r1 = r27 + 0<32>
	r0 = r13 * r12
	r20 = r25 + 0<32>
	branch p0 l0001A664
	// succ:  l0001A5EC l0001A664
l0001A5EC:
	r0 = r20 + r0 * r21
	Mem0[r29 + 10<i32>:byte] = r2
	r2 = Mem0[r29 + 196<i32>:word32]
	r20 = r25
	r2 = Mem0[r29 + 208<i32>:word32]
	Mem0[r29 + 24<i32>:word32] = r2
	Mem0[r29 + 36<i32>:word32] = r5
	r14 = Mem0[r29 + 132<i32>:word32]
	r4 = Mem0[r29 + 232<i32>:word32]
	Mem0[r29 + 12<i32>:word32] = r17
	Mem0[r29 + 20<i32>:word32] = r19
	r8 = 0<32> - r14
	r6 = r21 * r4
	r5 = Mem0[r29 + 244<i32>:word32]
	r3 = Mem0[r29 + 192<i32>:word32]
	Mem0[r29 + 8<i32>:word32] = r20
	r13 = Mem0[r29 + 224<i32>:word32]
	r3 = r13
	r12 = SEQ(SLICE(r12, word16, 0), SLICE(r3, word16, 0))
	Mem0[r29 + 4<i32>:word32] = r13
	r2 = Mem0[r29 + 204<i32>:word32]
	r9 = r6 * r5
	Mem0[r29:word32] = r12
	r15 = Mem0[r29 + 184<i32>:word32]
	r7 = r7 * r14
	Mem0[r29 + 28<i32>:word32] = r8
	r8 = Mem0[r29 + 216<i32>:word32]
	r6 = r15 + (r6 << 2<32>)
	Mem0[r29 + 16<i32>:word32] = r6
	Mem0[r29 + 32<i32>:word32] = r7
	r2 = r2 + (r9 + r8)
	call gvconvsum2dbbb_asm (retsize: 0;)
	goto l0001A6CC
	// succ:  l0001A6CC
l0001A664:
	Mem0[r29 + 8<i32>:byte] = r2
	r2 = Mem0[r29 + 196<i32>:word32]
	r2 = Mem0[r29 + 188<i32>:word32]
	Mem0[r29 + 12<i32>:word32] = r17
	r5 = Mem0[r29 + 244<i32>:word32]
	r7 = r2 + (r22 << 2<32>)
	r6 = r21 * r4
	Mem0[r29 + 8<i32>:word32] = r20
	r3 = Mem0[r29 + 192<i32>:word32]
	r8 = r6 * r5
	r2 = Mem0[r29 + 204<i32>:word32]
	r1 = Mem0[r29 + 216<i32>:word32]
	r3 = r13
	r12 = SEQ(SLICE(r12, word16, 0), SLICE(r3, word16, 0))
	Mem0[r29 + 1<i32>:byte] = r13
	r13 = Mem0[r29 + 224<i32>:word32]
	r1 = r24
	r9 = r22 + r1
	Mem0[r29 + 28<i32>:word32] = r7
	r14 = Mem0[r29 + 184<i32>:word32]
	Mem0[r29:word32] = r12
	r6 = r14 + (r6 << 2<32>)
	Mem0[r29 + 16<i32>:word32] = r6
	call gvconv2dbbb_asm (retsize: 0;)
	// succ:  l0001A6CC
l0001A6CC:
	r24 = Mem0[r29 + 180<i32>:word32]
	r25 = Mem0[r29 + 176<i32>:word32]
	r21 = r17 + r21
	r6 = Mem0[r29 + 256<i32>:word32]
	r26 = r26 - r25
	branch r23 == r24 l0001A370
	// succ:  l0001A6EC l0001A370
l0001A6EC:
	r23 = r23 + 1<32>
	branch r2 >u r22 l0001A358
	goto l0001A6F8
	// succ:  l0001A6F8 l0001A358
l0001A6F4:
	r0 = Mem0[r29 + 68<i32>:word32]
	r2 = Mem0[r29 + 208<i32>:word32]
	r18 = Mem0[r29 + 88<i32>:word32]
	r2 = Mem0[r29 - 24<i32>:word32]
	r17 = Mem0[r2:word32]
	branch p0 l0001A74C
	goto l0001A710
	// succ:  l0001A710 l0001A74C
l0001A6F8:
	r22 = r22 + 0x20<32>
	r0 = Mem0[r29 + 68<i32>:word32]
	r18 = Mem0[r29 + 88<i32>:word32]
	r2 = Mem0[r29 - 24<i32>:word32]
	r17 = Mem0[r2:word32]
	branch p0 l0001A74C
	// succ:  l0001A710 l0001A74C
l0001A710:
	p0 = r0
	r7 = Mem0[r29 + 76<i32>:word32]
	r3 = Mem0[r29 + 220<i32>:word32]
	r5 = Mem0[r29 + 64<i32>:word32]
	r0 = Mem0[r29 + 204<i32>:word32]
	r2 = Mem0[r29 + 244<i32>:word32]
	r3 = r3 * r2
	r1 = r25 * r2
	r4 = r1
	r7 = Mem0[r29 + 216<i32>:word32]
	r3 = r3 + r18 * r7
	r6 = r3 * r2
	r6 = Mem0[r29 + 60<i32>:word32]
	r0 = r0 + (r7 + r6)
	call unpad2d_bytes (retsize: 0;)
	r3 = r6 + r3 * r5
	// succ:  l0001A74C
l0001A74C:
	r7 = Mem0[r29 + 72<i32>:word64]
	r2 = Mem0[r29 + 84<i32>:word64]
	r22 = Mem0[r29 + 116<i32>:word32]
	r2 = max<int32>(r2, r17)
	r18 = r18 + 1<32>
	r17 = r2
	Mem0[r16 + 8<i32>:word32] = r17
	r5_r4 = Mem0[r29 + 48<i32>:word64]
	r1 = 1<32>
	r0 = r16 + 0x34<32>
	r3_r2 = r1_r0
	r21_r20 = Mem0[r29 + 288<i32>:word64]
	r19_r18 = Mem0[r29 + 296<i32>:word64]
	r3_r2 = r3_r2 - r5_r4
	r25_r24 = Mem0[r29 + 272<i32>:word64]
	r23_r22 = Mem0[r29 + 280<i32>:word64]
	Mem0[r16 + 72<i32>:word64] = r3_r2
	r17_r16 = Mem0[r29 + 304<i32>:word64]
	v53 = r30
	r31 = Mem0[v53 + 4<i32>:word32]
	r30 = Mem0[v53:word32]
	r29 = v53 + 8<i32>
	r27_r26 = Mem0[r29 + 264<i32>:word64]
	goto l00009730
	// succ:  l00009730
supernode_execute_hvx_slice_exit:


// fmaxf.1.0
// Return size: 0
define fmaxf.1.0
fmaxf.1.0_entry:
	r29 = fp
	// succ:  l0001A7A8
l0001A7A8:
	r2 = 0x38D1B717<32>
	r1_r0 = r0_r2
	// succ:  l0001A7B0_thunk_fn00009600
l0001A7B0_thunk_fn00009600:
	call fn00009600 (retsize: 0;)
	return
	// succ:  fmaxf.1.0_exit
fmaxf.1.0_exit:


// avgpool_execute
// Return size: 0
define avgpool_execute
avgpool_execute_entry:
	r29 = fp
	// succ:  l0001A7C0
l0001A7C0:
	v4 = r29 - 8<i32>
	Mem0[v4:word32] = r30
	Mem0[v4 + 4<i32>:word32] = r31
	r30 = v4
	r29 = v4 - 200<i32>
	Mem0[r29 + 480<i32>:word64] = r21_r20
	r21 = r0
	Mem0[r29 + 184<i32>:word64] = r19_r18
	r2 = Mem0[r21 + 4<i32>:word32]
	r20 = Mem0[r21 + 32<i32>:int8]
	Mem0[r29 + 192<i32>:word64] = r17_r16
	r3 = Mem0[r21 + 8<i32>:word32]
	r17 = Mem0[r2 + 8<i32>:word32]
	r19 = Mem0[r2:word32]
	p0 = r20 == 0<32>
	Mem0[r29 + 160<i32>:word64] = r25_r24
	r18 = Mem0[r2 + 4<i32>:word32]
	r7 = Mem0[r19 + 8<i32>:word32]
	Mem0[r29 + 168<i32>:word64] = r23_r22
	Mem0[r29 + 152<i32>:word64] = r27_r26
	r23_r22 = r7_r1
	r6 = Mem0[r17 + 4<i32>:word32]
	r16 = Mem0[r3:word32]
	r0 = r7
	r26 = Mem0[r17 + 8<i32>:word32]
	r24 = Mem0[r19:word32]
	r1 = p0
	r27 = Mem0[r19 + 4<i32>:word32]
	r25 = Mem0[r19 + 12<i32>:word32]
	r2 = r26 + r23
	Mem0[r29 + 72<i32>:word32] = r6
	r3 = Mem0[r18 + 4<i32>:word32]
	r6 = Mem0[r18 + 8<i32>:word32]
	Mem0[r29 + 108<i32>:word32] = r6
	Mem0[r29 + 64<i32>:word32] = r3
	Mem0[r29 + 144<i32>:word32] = r1
	branch p0 l0001A84C
	// succ:  l0001A828 l0001A84C
l0001A828:
	r3 = Mem0[r29 + 108<i32>:word32]
	branch p0 l0001A848
	// succ:  l0001A830 l0001A848
l0001A830:
	p0 = r12 == 4<32>
	Mem0[r29 + 31<i32>:byte] = r2
	r2 = 0<32>
	branch p0 l0001A858
	// succ:  l0001A840 l0001A858
l0001A840:
	p0 = r12 == 2<32>
	goto l0001A84C
	// succ:  l0001A84C
l0001A848:
	r0 = r2 - r3
	// succ:  l0001A84C
l0001A84C:
	r1 = r26
	call fn00009760 (retsize: 0;)
	Mem0[r29 + 124<i32>:word32] = r0
	// succ:  l0001A858
l0001A858:
	branch p0 l0001A894
	// succ:  l0001A860 l0001A894
l0001A860:
	p0 = r12 == 4<32>
	r1 = Mem0[r29 + 72<i32>:word32]
	r0 = Mem0[r29 - 112<i32>:word32]
	branch p0 l0001A888
	// succ:  l0001A86C l0001A888
l0001A86C:
	p0 = r12 == 2<32>
	Mem0[r29 + 17<i32>:byte] = r2
	r2 = 0<32>
	r1 = Mem0[r29 + 72<i32>:word32]
	r0 = r27 + 0<32>
	branch p0 l0001A8AC
	// succ:  l0001A884 l0001A8AC
l0001A884:
	goto l0001A8A0
	// succ:  l0001A8A0
l0001A888:
	r0 = r1
	goto l0001A8A0
	// succ:  l0001A8A0
l0001A894:
	r3 = Mem0[r29 + 64<i32>:word64]
	r1 = Mem0[r29 + 72<i32>:word64]
	r2 = r1 + r27
	r0 = r2 - r3
	// succ:  l0001A8A0
l0001A8A0:
	call fn00009760 (retsize: 0;)
	Mem0[r29 + 68<i32>:word32] = r0
	r2 = r22
	r1 = 0x50<32>
	r4 = PC + 0xE057<32>
	goto l0001A8B8
	// succ:  l0001A8B8
l0001A8AC:
	r2 = r22
	r1 = 0x50<32>
	r4 = PC + 0x17<32>
	// succ:  l0001A8B8
l0001A8B8:
	r3 = Mem0[r19 + 16<i32>:word32]
	r7 = Mem0[r16 + 16<i32>:word32]
	Mem0[r29 + 100<i32>:word32] = r3
	Mem0[r29 + 104<i32>:word32] = r7
	Mem0[r29:word32] = r21
	call logmsg_function (retsize: 0;)
	branch r2 == 2<32> l0001A8E8
	// succ:  l0001A8D4 l0001A8E8
l0001A8D4:
	r2 = Mem0[r18:word32]
	branch r2 == 2<32> l0001A8EC
	// succ:  l0001A8DC l0001A8EC
l0001A8DC:
	branch r2 == 2<32> l0001A8EC
	// succ:  l0001A8E4 l0001A8EC
l0001A8E4:
	branch r2 == 2<32> l0001A908
	goto l0001A8EC
	// succ:  l0001A8EC l0001A908
l0001A8E8:
	r1 = 0x55<32>
	r3 = PC + 0xE034<32>
	goto l0001A8F4
	// succ:  l0001A8F4
l0001A8EC:
	r1 = 0x55<32>
	r3 = PC + 0x34<32>
	// succ:  l0001A8F4
l0001A8F4:
	r2 = r22
	call errlog_function (retsize: 0;)
	// succ:  l0001A8F8
l0001A8F8:
	r0 = 0xFFFFFFFF<32>
	goto l0001AC2C
	// succ:  l0001AC2C
l0001A908:
	r4 = Mem0[r29 + 68<i32>:word64]
	r3 = Mem0[r29 + 124<i32>:word64]
	r1 = 0x57<32>
	r7 = Mem0[r16 + 20<i32>:word32]
	r2 = r2 * r3
	r2 = r2 * r4
	branch r2 >u r7 l0001A930
	// succ:  l0001A928 l0001A930
l0001A928:
	r2 = r2 << 2<32>
	goto l0001A8F8
	// succ:  l0001A8F8
l0001A930:
	branch r3 == 0<32> l0001A94C
	// succ:  l0001A940 l0001A94C
l0001A940:
	r3 = Mem0[r21 + 32<i32>:int8]
	p0 = r24 > 0<32>
	r1 = 0x58<32>
	goto l0001A8F8
	// succ:  l0001A8F8
l0001A94C:
	Mem0[r16 + 24<i32>:word32] = r2
	r2 = Mem0[r29 + 68<i32>:word64]
	r20 = 0<32>
	Mem0[r29 + 128<i32>:word32] = r26
	r7 = Mem0[r29 + 124<i32>:word32]
	r26 = 0x3F800000<32>
	Mem0[r29 + 12<i32>:word32] = r22
	Mem0[r16 + 4<i32>:word32] = r2
	Mem0[r29 + 16<i32>:word32] = r21
	Mem0[r16 + 8<i32>:word32] = r7
	Mem0[r16:word32] = r24
	Mem0[r16 + 12<i32>:word32] = r25
	branch p0 l0001AC0C
	// succ:  l0001A984 l0001AC0C
l0001A984:
	r4 = Mem0[r29 + 68<i32>:word64]
	r2 = Mem0[r29 + 124<i32>:word64]
	r18 = r23 * r25
	r7 = Mem0[r29 + 64<i32>:word32]
	r8 = Mem0[r29 + 108<i32>:word32]
	r1 = Mem0[r29 + 72<i32>:word32]
	r6 = Mem0[r29 + 128<i32>:word32]
	r4 = r4 + 0xFFFFFFFF<32>
	r2 = r2 + 0xFFFFFFFF<32>
	Mem0[r29 + 56<i32>:word32] = r27
	Mem0[r29 + 120<i32>:word32] = r23
	r5 = r7 - r27
	r3 = r8 - r23
	r3 = 0xFFFFFFFF<32> - r27
	r4 = r5 + r4 * r1
	r2 = r3 + r2 * r6
	Mem0[r29 + 48<i32>:word32] = r3
	r6 = 0<32>
	r3 = 0xFFFFFFFF<32> - r23
	r4 = r4 + (r4 >>u 0x1F<32>)
	Mem0[r29 + 96<i32>:word32] = r3
	r5 = r25 << 2<32>
	r2 = r2 + (r2 >>u 0x1F<32>)
	Mem0[r29 + 92<i32>:word32] = r5
	Mem0[r29 + 60<i32>:word32] = r6
	r3 = 0<32>
	r6 = r4 >> 1<32>
	Mem0[r29 + 44<i32>:word32] = r6
	Mem0[r29 + 32<i32>:word32] = r3
	r4 = 0<32> - r6
	r2 = r2 >> 1<32>
	Mem0[r29 + 88<i32>:word32] = r2
	r2 = 0<32> - r2
	r3 = r6 + (0x7F<32> - r7)
	r5 = r2 + (0x7F<32> - r8)
	Mem0[r29 + 20<i32>:word32] = r3
	Mem0[r29 + 24<i32>:word32] = r4
	Mem0[r29 + 36<i32>:word32] = r2
	Mem0[r29 + 40<i32>:word32] = r5
	// succ:  l0001AA08
l0001AA08:
	Mem0[r29 + 28<i32>:word32] = r24
	r2 = Mem0[r29 + 68<i32>:word32]
	branch p0 l0001ABEC
	// succ:  l0001AA14 l0001ABEC
l0001AA14:
	p0 = r2 > 1<32>
	Mem0[r29 + 21<i32>:byte] = r2
	r2 = Mem0[r29 + 24<i32>:word32]
	r7 = Mem0[r29 + 20<i32>:word64]
	r3 = Mem0[r29 + 32<i32>:word64]
	Mem0[r29 + 80<i32>:word32] = r7
	r7 = 0<32>
	r2 = r3 * r2
	Mem0[r29 + 76<i32>:word32] = r7
	Mem0[r29 + 52<i32>:word32] = r2
	// succ:  l0001AA30
l0001AA30:
	branch r2 > 1<32> l0001ABC8
	// succ:  l0001AA3C l0001ABC8
l0001AA3C:
	r2 = Mem0[r29 + 124<i32>:word32]
	r5 = Mem0[r29 + 76<i32>:word64]
	r2 = Mem0[r29 + 72<i32>:word64]
	r7 = Mem0[r29 + 80<i32>:word64]
	r1 = Mem0[r29 + 48<i32>:word64]
	r2 = r5 * r2
	r3 = Mem0[r29 + 84<i32>:word64]
	r4 = Mem0[r29 + 52<i32>:word64]
	r7 = Mem0[r29 + 40<i32>:word64]
	r1 = 0<32>
	r4 = r5 + r4
	r5 = max<int32>(r7, r1)
	Mem0[r29 + 132<i32>:word32] = r1
	r1 = Mem0[r29 + 44<i32>:word32]
	r5 = 0xFFFFFFFF<32> - r5
	r3 = max<int32>(r3, r6)
	Mem0[r29 + 144<i32>:word32] = r5
	r5 = Mem0[r29 + 124<i32>:word32]
	r2 = r2 - r1
	Mem0[r29 + 136<i32>:word32] = r7
	r7 = Mem0[r29 + 64<i32>:word32]
	r4 = r4 * r5
	r7 = Mem0[r29 + 56<i32>:word64]
	r2 = r2 + r7
	r16 = max<int32>(r2, r6)
	Mem0[r29 + 116<i32>:word32] = r4
	r1 = Mem0[r29 + 60<i32>:word64]
	r27 = min<int32>(r7, r2)
	r4 = Mem0[r29 + 120<i32>:word32]
	r3 = r1 + r3
	Mem0[r29 + 35<i32>:byte] = r0
	r0 = Mem0[r29 + 36<i32>:word32]
	r3 = r4 * r3
	// succ:  l0001AAA8
l0001AAA8:
	r2 = Mem0[r29 - 128<i32>:word32]
	r3 = Mem0[r29 - 124<i32>:word32]
	p0 = r25 > 0<32>
	branch p0 l0001AB94
	// succ:  l0001AAB8 l0001AB94
l0001AAB8:
	r21 = 0<32>
	r7 = 0<32>
	r4 = Mem0[r29 + 116<i32>:word32]
	r1 = Mem0[r29 + 140<i32>:word32]
	r6 = Mem0[r29 + 136<i32>:word32]
	r5 = Mem0[r29 + 96<i32>:word32]
	r3 = r3 + r4
	r2 = r3 * r2
	r0 = Mem0[r29 + 88<i32>:word64]
	r1 = Mem0[r29 + 112<i32>:word64]
	r3 = r3 * r25
	r4 = max<int32>(r1, r7)
	r1 = Mem0[r29 + 100<i32>:word64]
	r19 = Mem0[r29 + 92<i32>:word64]
	r6 = r1 + r4
	r5 = max<int32>(r6, r5)
	r0 = Mem0[r29 + 108<i32>:word32]
	r5 = 0xFFFFFFFF<32> - r5
	r2 = r2 - r0
	r1 = Mem0[r29 + 120<i32>:word64]
	r7 = Mem0[r29 + 104<i32>:word64]
	r19 = r1 + r19 * r6
	r24 = max<int32>(r2, r7)
	r17 = r5 - r4
	r2 = r2 + r0
	r23 = r7 + (r3 << 2<32>)
	r22 = min<int32>(r1, r2)
	// succ:  l0001AB14
l0001AB14:
	r2 = Mem0[r29 - 112<i32>:word32]
	p0 = r27 > r16
	r1_r0 = r20_r20
	branch p0 l0001AB7C
	// succ:  l0001AB24 l0001AB7C
l0001AB24:
	r1_r0 = r20_r20
	r2 = r19
	r3 = r2 - r16
	__loop(1<i32>, 0x0001AB34<p32>, r3)
	p0 = r22 > r24
	r5 = r17 + 0xFFFFFFFF<32>
	branch p0 l0001AB70
	// succ:  l0001AB44 l0001AB70
l0001AB44:
	r3 = r2 + (r25 << 2<32>)
	r4 = Mem0[r2:word32]
	p0 = r17 >u 1<32>
	r1 = r1 + r26
	__loop(0<i32>, 0x0001AB58<p32>, r5)
	branch p0 l0001AB6C
	// succ:  l0001AB58 l0001AB6C
l0001AB58:
	r4 = Mem0[r3:word32]
	r1 = r1 + r26
	r0 = r0 + r4
	r3 = r3 + (r25 << 2<32>)
	// succ:  l0001AB6C
l0001AB6C:
	r0 = r0 + r4
	// succ:  l0001AB70
l0001AB70:
	r2 = r2 + (r18 << 2<32>)
	// succ:  l0001AB7C
l0001AB7C:
	r21 = r21 + 1<32>
	call fn00009610 (retsize: 0;)
	Mem0[r23:word32] = r0
	r19 = r19 + 4<32>
	p0 = r21 == r25
	r23 = r23 + 4<32>
	branch p0 l0001AB14
	// succ:  l0001AB94 l0001AB14
l0001AB94:
	r6 = Mem0[r29 + 124<i32>:word32]
	r4 = Mem0[r29 + 132<i32>:word32]
	r3 = Mem0[r29 + 140<i32>:word32]
	r2 = Mem0[r29 + 128<i32>:word32]
	r4 = r4 + 1<32>
	Mem0[r29 + 132<i32>:word32] = r4
	r7 = Mem0[r29 + 136<i32>:word32]
	p0 = r4 == r6
	r3 = r3 + r2
	Mem0[r29 + 140<i32>:word32] = r3
	r5 = r7 - r2
	Mem0[r29 + 136<i32>:word32] = r5
	branch p0 l0001AAA8
	// succ:  l0001ABC8 l0001AAA8
l0001ABC8:
	r6 = Mem0[r29 + 68<i32>:word64]
	r4 = Mem0[r29 + 76<i32>:word64]
	r3 = Mem0[r29 + 84<i32>:word64]
	r2 = Mem0[r29 + 72<i32>:word64]
	r4 = r4 + 1<32>
	Mem0[r29 + 76<i32>:word32] = r4
	r7 = Mem0[r29 + 80<i32>:word64]
	p0 = r4 == r6
	r3 = r3 + r2
	r5 = r7 - r2
	Mem0[r29 + 80<i32>:word32] = r5
	Mem0[r29 + 84<i32>:word32] = r3
	branch p0 l0001AA30
	// succ:  l0001ABEC l0001AA30
l0001ABEC:
	r24 = Mem0[r29 + 28<i32>:word32]
	r4 = Mem0[r29 + 32<i32>:word32]
	r3 = Mem0[r29 + 60<i32>:word64]
	r2 = Mem0[r29 + 56<i32>:word64]
	r4 = r4 + 1<32>
	Mem0[r29 + 32<i32>:word32] = r4
	r3 = r3 + r2
	p0 = r4 == r24
	Mem0[r29 + 60<i32>:word32] = r3
	branch p0 l0001AA08
	// succ:  l0001AC0C l0001AA08
l0001AC0C:
	Mem0[r29:byte] = r2
	r2 = Mem0[r29 + 16<i32>:word32]
	r4 = PC + 0xDD48<32>
	r2 = Mem0[r29 + 12<i32>:word32]
	call logmsg_function (retsize: 0;)
	r0 = 0<32>
	// succ:  l0001AC2C
l0001AC2C:
	r19_r18 = Mem0[r29 + 184<i32>:word64]
	r17_r16 = Mem0[r29 + 192<i32>:word64]
	r23_r22 = Mem0[r29 + 168<i32>:word64]
	r21_r20 = Mem0[r29 + 176<i32>:word64]
	r27_r26 = Mem0[r29 + 152<i32>:word64]
	r25_r24 = Mem0[r29 + 160<i32>:word64]
	v36 = r30
	r31 = Mem0[v36 + 4<i32>:word32]
	r30 = Mem0[v36:word32]
	r29 = v36 + 8<i32>
	return
	// succ:  avgpool_execute_exit
avgpool_execute_exit:


// avgpool_check
// Return size: 0
define avgpool_check
avgpool_check_entry:
	r29 = fp
	// succ:  l0001AC40
l0001AC40:
	v4 = r29 - 8<i32>
	Mem0[v4:word32] = r30
	Mem0[v4 + 4<i32>:word32] = r31
	r30 = v4
	r29 = v4 - 16<i32>
	Mem0[r29 + 496<i32>:word64] = r17_r16
	r4 = PC + 0xDC34<32>
	r17 = r0
	r16 = r1
	r1 = 0x8C<32>
	Mem0[r29:word32] = r17
	r2 = r16
	call logmsg_function (retsize: 0;)
	branch r2 == 6<32> l0001AC80
	// succ:  l0001AC6C l0001AC80
l0001AC6C:
	r2 = Mem0[r17 + 16<i32>:word32]
	r1 = 0x8D<32>
	r3 = PC + 0x25<32>
	// succ:  l0001AC70
l0001AC70:
	r2 = r16
	call errlog_function (retsize: 0;)
	v16 = r30
	r31 = Mem0[v16 + 4<i32>:word32]
	r30 = Mem0[v16:word32]
	r29 = v16 + 8<i32>
	return
	// succ:  avgpool_check_exit
l0001AC80:
	branch r2 == 2<32> l0001AC94
	// succ:  l0001AC90 l0001AC94
l0001AC90:
	r2 = Mem0[r17 + 20<i32>:word32]
	r1 = 0x8E<32>
	r3 = Mem0[r17 + 4<i32>:word32]
	// succ:  l0001AC94
l0001AC94:
	goto l0001AC70
	// succ:  l0001AC70
avgpool_check_exit:


// logmsg_function
// Return size: 0
define logmsg_function
logmsg_function_entry:
	r29 = fp
	// succ:  l0001AD08
l0001AD08:
	v4 = r29 - 8<i32>
	Mem0[v4:word32] = r30
	Mem0[v4 + 4<i32>:word32] = r31
	r30 = v4
	r29 = v4 - 8<i32>
	r3 = 2<32>
	branch r3 >u r5 l0001AD2C
	// succ:  l0001AD18 l0001AD2C
l0001AD18:
	r5 = Mem0[r2 + 16<i32>:word32]
	r5 = r29 + 0x10<32>
	r3 = 2<32>
	r0 = PC + 1<32>
	Mem0[r29 + 1<i32>:byte] = r6
	r6 = r29 + 0x10<32>
	call logv (retsize: 0;)
	// succ:  l0001AD20_thunk_errlog_function
l0001AD20_thunk_errlog_function:
	call errlog_function (retsize: 0;)
	return
	// succ:  logmsg_function_exit
l0001AD2C:
	v13 = r30
	r31 = Mem0[v13 + 4<i32>:word32]
	r30 = Mem0[v13:word32]
	r29 = v13 + 8<i32>
	return
	// succ:  logmsg_function_exit
logmsg_function_exit:


// errlog_function
// Return size: 0
define errlog_function
errlog_function_entry:
	r29 = fp
	// succ:  l0001AD30
l0001AD30:
	v4 = r29 - 8<i32>
	Mem0[v4:word32] = r30
	Mem0[v4 + 4<i32>:word32] = r31
	r30 = v4
	r29 = v4 - 8<i32>
	r4 = r3
	r0 = PC + 0xDB25<32>
	Mem0[r29 + 1<i32>:byte] = r6
	r6 = r29 + 0x10<32>
	r5 = r29 + 0x10<32>
	r3 = 0<32>
	v13 = r30
	r31 = Mem0[v13 + 4<i32>:word32]
	r30 = Mem0[v13:word32]
	r29 = v13 + 8<i32>
	return
	// succ:  errlog_function_exit
errlog_function_exit:


// biasadd_f_execute
// Return size: 0
define biasadd_f_execute
biasadd_f_execute_entry:
	r29 = fp
	// succ:  l0001AD60
l0001AD60:
	v4 = r29 - 8<i32>
	Mem0[v4:word32] = r30
	Mem0[v4 + 4<i32>:word32] = r31
	r30 = v4
	r29 = v4 - 56<i32>
	Mem0[r29 + 496<i32>:word64] = r17_r16
	r3 = PC + 0xDC81<32>
	r1 = 0x45<32>
	r17_r16 = r0_r1
	Mem0[r29 + 40<i32>:word64] = r19_r18
	r2 = Mem0[r17 + 4<i32>:word32]
	Mem0[r29 + 24<i32>:word64] = r23_r22
	Mem0[r29 + 32<i32>:word64] = r21_r20
	Mem0[r29 + 16<i32>:word64] = r25_r24
	r5 = Mem0[r2 + 4<i32>:word32]
	Mem0[r29 + 8<i32>:word64] = r27_r26
	branch r4 == 2<32> l0001AE30
	// succ:  l0001AD94 l0001AE30
l0001AD94:
	r4 = Mem0[r5 + 4<i32>:word32]
	r1 = 0x46<32>
	r3 = PC + 0x11<32>
	branch r4 == 2<32> l0001AE30
	// succ:  l0001ADA8 l0001AE30
l0001ADA8:
	r4 = Mem0[r5:word32]
	r1 = 0x47<32>
	r3 = PC + 0x3D<32>
	branch r4 == 2<32> l0001AE30
	// succ:  l0001ADBC l0001AE30
l0001ADBC:
	r4 = Mem0[r5 + 8<i32>:word32]
	branch r18 == r4 l0001ADDC
	// succ:  l0001ADC8 l0001ADDC
l0001ADC8:
	r18 = Mem0[r3 + 12<i32>:word32]
	Mem0[r29 + 4<i32>:word32] = r18
	r1 = 0x49<32>
	r3 = PC + 0x28<32>
	Mem0[r29:word32] = r4
	r2 = r16
	goto l0001AE34
	// succ:  l0001AE34
l0001ADDC:
	r24 = Mem0[r3 + 4<i32>:word32]
	r23 = Mem0[r3:word32]
	r4 = PC + 0xDC28<32>
	r6 = Mem0[r17 + 8<i32>:word32]
	r22 = Mem0[r3 + 8<i32>:word32]
	r2 = r16
	r1 = 0x4C<32>
	r19 = Mem0[r5 + 16<i32>:word32]
	r20 = Mem0[r3 + 16<i32>:word32]
	r7 = r23 * r24
	r25 = Mem0[r6:word32]
	r3 = r7 * r22
	Mem0[r29:word32] = r17
	r21 = Mem0[r25 + 16<i32>:word32]
	r3 = r3 * r18
	call logmsg_function (retsize: 0;)
	r26 = r3 << 2<32>
	r1 = 0x4D<32>
	r3 = PC + 0xDC02<32>
	branch r26 >u r2 l0001AE40
	goto l0001AE34
	// succ:  l0001AE34 l0001AE40
l0001AE30:
	r2 = r16
	// succ:  l0001AE34
l0001AE34:
	call errlog_function (retsize: 0;)
	r0 = 0xFFFFFFFF<32>
	goto l0001AEE4
	// succ:  l0001AEE4
l0001AE40:
	Mem0[r25:word32] = r23
	Mem0[r25 + 24<i32>:word32] = r26
	r2 = r24 * r23
	Mem0[r25 + 12<i32>:word32] = r18
	Mem0[r25 + 4<i32>:word32] = r24
	r3 = r2 * r22
	Mem0[r25 + 8<i32>:word32] = r22
	r2 = 0<32>
	branch p0 l0001AEC8
	// succ:  l0001AE68 l0001AEC8
l0001AE68:
	p0 = r3 == 0<32>
	__loop(1<i32>, 0x0001AE68<p32>, r3)
	r6 = r20 + r2
	r5 = r19 + r2
	branch p0 l0001AEBC
	// succ:  l0001AE74 l0001AEBC
l0001AE74:
	p0 = r10 == 0<32>
	r4 = r21 + r2
	p0 = r18 >u 1<32>
	r3 = r2 + 4<32>
	r7 = r18 + 0xFFFFFFFF<32>
	r6 = Mem0[r6:word32]
	r5 = Mem0[r5:word32]
	branch p0 l0001AEB4
	// succ:  l0001AE90 l0001AEB4
l0001AE90:
	__loop(0<i32>, 0x0001AE90<p32>, r7)
	Mem0[r4:byte] = r5
	r1 = r19 + r3
	r6 = r20 + r3
	r5 = r6 + r5
	r6 = Mem0[r6:word32]
	r5 = Mem0[r1:word32]
	r4 = r21 + r3
	r3 = r7
	// succ:  l0001AEB4
l0001AEB4:
	Mem0[r4:byte] = r3
	r3 = r6 + r5
	goto l0001AEC0
	// succ:  l0001AEC0
l0001AEBC:
	r21 = r21 + (r18 << 2<32>)
	r20 = r20 + (r18 << 2<32>)
	goto l0001AEC8
	// succ:  l0001AEC8
l0001AEC0:
	r21 = r21 + (r18 << 2<32>)
	// succ:  l0001AEC8
l0001AEC8:
	r2 = r16
	r1 = 0x58<32>
	r4 = PC + 0xDB64<32>
	Mem0[r29:word32] = r17
	call logmsg_function (retsize: 0;)
	r0 = 0<32>
	// succ:  l0001AEE4
l0001AEE4:
	r19_r18 = Mem0[r29 + 40<i32>:word64]
	r17_r16 = Mem0[r29 + 48<i32>:word64]
	r23_r22 = Mem0[r29 + 24<i32>:word64]
	r21_r20 = Mem0[r29 + 32<i32>:word64]
	r27_r26 = Mem0[r29 + 8<i32>:word64]
	r25_r24 = Mem0[r29 + 16<i32>:word64]
	v34 = r30
	r31 = Mem0[v34 + 4<i32>:word32]
	r30 = Mem0[v34:word32]
	r29 = v34 + 8<i32>
	return
	// succ:  biasadd_f_execute_exit
biasadd_f_execute_exit:


// biasadd_check
// Return size: 0
define biasadd_check
biasadd_check_entry:
	r29 = fp
	// succ:  l0001AF00
l0001AF00:
	v4 = r29 - 8<i32>
	Mem0[v4:word32] = r30
	Mem0[v4 + 4<i32>:word32] = r31
	r30 = v4
	r29 = v4 - 16<i32>
	Mem0[r29 + 496<i32>:word64] = r17_r16
	r4 = PC + 0xDA83<32>
	r17 = r0
	r16 = r1
	r1 = 0x5E<32>
	Mem0[r29:word32] = r17
	r2 = r16
	call logmsg_function (retsize: 0;)
	branch r2 == 4<32> l0001AF40
	// succ:  l0001AF2C l0001AF40
l0001AF2C:
	r2 = Mem0[r17 + 16<i32>:word32]
	r1 = 0x5F<32>
	r3 = PC + 0x34<32>
	r2 = r16
	call errlog_function (retsize: 0;)
	// succ:  l0001AF34
l0001AF34:
	v16 = r30
	r31 = Mem0[v16 + 4<i32>:word32]
	r30 = Mem0[v16:word32]
	r29 = v16 + 8<i32>
	return
	// succ:  biasadd_check_exit
l0001AF40:
	branch r2 == 2<32> l0001AF58
	// succ:  l0001AF50 l0001AF58
l0001AF50:
	r2 = Mem0[r17 + 20<i32>:word32]
	r1 = 0x60<32>
	goto l0001AF34
	// succ:  l0001AF34
l0001AF58:
	r2 = r16
	r1 = 0x61<32>
	r4 = PC + 0xDA70<32>
	Mem0[r29:word32] = r17
	call logmsg_function (retsize: 0;)
	r0 = 0<32>
	v17 = r30
	r31 = Mem0[v17 + 4<i32>:word32]
	r30 = Mem0[v17:word32]
	r29 = v17 + 8<i32>
	return
	// succ:  biasadd_check_exit
biasadd_check_exit:


// logmsg_function
// Return size: 0
define logmsg_function
logmsg_function_entry:
	r29 = fp
	// succ:  l0001AF78
l0001AF78:
	v4 = r29 - 8<i32>
	Mem0[v4:word32] = r30
	Mem0[v4 + 4<i32>:word32] = r31
	r30 = v4
	r29 = v4 - 8<i32>
	r3 = 2<32>
	branch r3 >u r5 l0001AF9C
	// succ:  l0001AF88 l0001AF9C
l0001AF88:
	r5 = Mem0[r2 + 16<i32>:word32]
	r5 = r29 + 0x10<32>
	r3 = 2<32>
	r0 = PC + 0x20<32>
	Mem0[r29 + 1<i32>:byte] = r6
	r6 = r29 + 0x10<32>
	call logv (retsize: 0;)
	// succ:  l0001AF90_thunk_errlog_function
l0001AF90_thunk_errlog_function:
	call errlog_function (retsize: 0;)
	return
	// succ:  logmsg_function_exit
l0001AF9C:
	v13 = r30
	r31 = Mem0[v13 + 4<i32>:word32]
	r30 = Mem0[v13:word32]
	r29 = v13 + 8<i32>
	return
	// succ:  logmsg_function_exit
logmsg_function_exit:


// errlog_function
// Return size: 0
define errlog_function
errlog_function_entry:
	r29 = fp
	// succ:  l0001AFA0
l0001AFA0:
	v4 = r29 - 8<i32>
	Mem0[v4:word32] = r30
	Mem0[v4 + 4<i32>:word32] = r31
	r30 = v4
	r29 = v4 - 8<i32>
	r4 = r3
	r0 = PC + 0xD9C4<32>
	Mem0[r29 + 1<i32>:byte] = r6
	r6 = r29 + 0x10<32>
	r5 = r29 + 0x10<32>
	r3 = 0<32>
	v13 = r30
	r31 = Mem0[v13 + 4<i32>:word32]
	r30 = Mem0[v13:word32]
	r29 = v13 + 8<i32>
	return
	// succ:  errlog_function_exit
errlog_function_exit:


// concat_execute
// Return size: 0
define concat_execute
concat_execute_entry:
	r29 = fp
	// succ:  l0001AFE0
l0001AFE0:
	v4 = r29 - 8<i32>
	Mem0[v4:word32] = r30
	Mem0[v4 + 4<i32>:word32] = r31
	r30 = v4
	r29 = v4 - 64<i32>
	Mem0[r29 + 472<i32>:word64] = r23_r22
	r4 = PC + 0xDAE2<32>
	r23 = r0
	Mem0[r29 + 40<i32>:word64] = r21_r20
	r21 = Mem0[r23 + 4<i32>:word32]
	r3 = Mem0[r23 + 8<i32>:word32]
	Mem0[r29 + 24<i32>:word64] = r25_r24
	Mem0[r29 + 48<i32>:word64] = r19_r18
	r1 = 0x45<32>
	r25 = r1
	r18 = Mem0[r3:word32]
	r5 = Mem0[r21 + 4<i32>:word32]
	r2 = r25
	Mem0[r29 + 16<i32>:word64] = r27_r26
	Mem0[r29 + 56<i32>:word64] = r17_r16
	r17 = Mem0[r21:word32]
	r16 = Mem0[r23 + 16<i32>:word32]
	r20 = Mem0[r5 + 4<i32>:word32]
	r19 = Mem0[r5 + 8<i32>:word32]
	r22 = Mem0[r18 + 16<i32>:word32]
	r27 = Mem0[r5:word32]
	Mem0[r29:word32] = r23
	call logmsg_function (retsize: 0;)
	r2 = Mem0[r17 + 16<i32>:word32]
	branch r2 == 6<32> l0001B10C
	// succ:  l0001B040 l0001B10C
l0001B040:
	r2 = Mem0[r2:word32]
	Mem0[r29 + 12<i32>:word32] = r23
	r23 = r16
	r24 = r21 + 4<32>
	r5_r4 = 2<64>
	r2 = 0<32>
	p0 = r23 > 0<32>
	r26 = 0<32>
	r3 = r24 + 0<32>
	r26 = 0<32>
	branch p0 l0001B128
	// succ:  l0001B064 l0001B128
l0001B064:
	r17 = r3 * r27
	Mem0[r18:word32] = r27
	Mem0[r29 + 8<i32>:word32] = r25
	r27 = 0<32>
	Mem0[r18 + 8<i32>:word32] = r19
	Mem0[r18 + 4<i32>:word32] = r20
	Mem0[r18 + 24<i32>:word32] = r2
	Mem0[r18 + 12<i32>:word32] = r26
	branch p0 l0001B0D8
	// succ:  l0001B080 l0001B0D8
l0001B080:
	r16 = Mem0[r24:word32]
	p0 = r17 > 0<32>
	r25 = r17
	r18 = r22
	r2 = Mem0[r16 + 12<i32>:word32]
	r20 = Mem0[r16 + 16<i32>:word32]
	branch p0 l0001B0C0
	// succ:  l0001B098 l0001B0C0
l0001B098:
	r19 = r2 << 2<32>
	// succ:  l0001B0A0
l0001B0A0:
	r1_r0 = r20_r18
	r2 = r19
	call fn00009560 (retsize: 0;)
	r2 = Mem0[r16 + 12<i32>:word32]
	r18 = r18 + (r26 << 2<32>)
	branch r25 == 1<32> l0001B0A0
	goto l0001B0C4
	// succ:  l0001B0C4 l0001B0A0
l0001B0C0:
	r21 = r24
	r3 = r21 + 8<32>
	r22 = r22 + (r2 << 2<32>)
	goto l0001B0CC
	// succ:  l0001B0CC
l0001B0C4:
	r25 = r25 + 0xFFFFFFFF<32>
	r20 = r20 + (r2 << 2<32>)
	r21 = r24
	r3 = r21 + 8<32>
	// succ:  l0001B0CC
l0001B0CC:
	branch r27 == r23 l0001B080
	goto l0001B0DC
	// succ:  l0001B0DC l0001B080
l0001B0D8:
	Mem0[r29:byte] = r2
	r2 = Mem0[r29 + 12<i32>:word32]
	r4 = PC + 0xDA6A<32>
	goto l0001B0EC
	// succ:  l0001B0EC
l0001B0DC:
	r27 = r27 + 1<32>
	r24 = r3
	Mem0[r29:byte] = r2
	r2 = Mem0[r29 + 12<i32>:word32]
	r4 = PC + 0x2A<32>
	// succ:  l0001B0EC
l0001B0EC:
	r2 = Mem0[r29 + 8<i32>:word32]
	call logmsg_function (retsize: 0;)
	r0 = 0<32>
	// succ:  l0001B0F8
l0001B0F8:
	r19_r18 = Mem0[r29 + 48<i32>:word64]
	r17_r16 = Mem0[r29 + 56<i32>:word64]
	r23_r22 = Mem0[r29 + 32<i32>:word64]
	r21_r20 = Mem0[r29 + 40<i32>:word64]
	r27_r26 = Mem0[r29 + 16<i32>:word64]
	r25_r24 = Mem0[r29 + 24<i32>:word64]
	v36 = r30
	r31 = Mem0[v36 + 4<i32>:word32]
	r30 = Mem0[v36:word32]
	r29 = v36 + 8<i32>
	return
	// succ:  concat_execute_exit
l0001B10C:
	r1 = 0x46<32>
	r3 = PC + 0xD9CF<32>
	// succ:  l0001B118
l0001B118:
	r2 = r25
	call errlog_function (retsize: 0;)
	// succ:  l0001B11C
l0001B11C:
	r0 = 0xFFFFFFFF<32>
	goto l0001B0F8
	// succ:  l0001B0F8
l0001B128:
	__loop(0<i32>, 0x0001B12C<p32>, r23)
	r6 = Mem0[r3:word32]
	branch r7 == r19 l0001B14C
	// succ:  l0001B13C l0001B14C
l0001B13C:
	r7 = Mem0[r6 + 8<i32>:word32]
	Mem0[r29:word32] = r2
	r1 = 0x49<32>
	r3 = PC + 0x2E<32>
	goto l0001B118
	// succ:  l0001B118
l0001B14C:
	branch r7 == r20 l0001B168
	// succ:  l0001B158 l0001B168
l0001B158:
	r7 = Mem0[r6 + 4<i32>:word32]
	Mem0[r29:word32] = r2
	r1 = 0x4C<32>
	r3 = PC + 0x2B<32>
	goto l0001B118
	// succ:  l0001B118
l0001B168:
	branch r7 == r27 l0001B184
	// succ:  l0001B174 l0001B184
l0001B174:
	r7 = Mem0[r6:word32]
	Mem0[r29:word32] = r2
	r1 = 0x4F<32>
	r3 = PC + 0x29<32>
	goto l0001B118
	// succ:  l0001B118
l0001B184:
	r6 = Mem0[r6 + 12<i32>:word32]
	r5 = r3
	r2 = r2 + 1<32>
	r7 = r5 + 8<32>
	r26 = r6 + r26
	r3 = r7
	r4 = r4 + r17 * r6
	r3 = Mem0[r18 + 20<i32>:word32]
	branch r2 >u r3 l0001B064
	// succ:  l0001B1B0 l0001B064
l0001B1B0:
	r2 = r4 << 2<32>
	r1 = 0x55<32>
	goto l0001B11C
	// succ:  l0001B11C
concat_execute_exit:


// concat_check
// Return size: 0
define concat_check
concat_check_entry:
	r29 = fp
	// succ:  l0001B1C0
l0001B1C0:
	v4 = r29 - 8<i32>
	Mem0[v4:word32] = r30
	Mem0[v4 + 4<i32>:word32] = r31
	r30 = v4
	r29 = v4 - 16<i32>
	Mem0[r29 + 496<i32>:word64] = r17_r16
	r4 = PC + 0xD89A<32>
	r17 = r0
	r16 = r1
	r1 = 0x6A<32>
	Mem0[r29:word32] = r17
	r2 = r16
	call logmsg_function (retsize: 0;)
	r2 = Mem0[r17 + 16<i32>:word32]
	r1 = 0x6B<32>
	r3 = PC + 0xD896<32>
	branch r4 >u r2 l0001B24C
	// succ:  l0001B1F8 l0001B24C
l0001B1F8:
	r4 = 4<32>
	r1 = 0x6C<32>
	r3 = PC + 0xF<32>
	branch r4 == 2<32> l0001B24C
	// succ:  l0001B20C l0001B24C
l0001B20C:
	r4 = Mem0[r17 + 20<i32>:word32]
	r4 = Mem0[r17 + 4<i32>:word32]
	branch r2 >u r5 l0001B234
l0001B214:
	branch r2 >u r5 l0001B238
	// succ:  l0001B220 l0001B234 l0001B238
l0001B220:
	r5 = r5 + 1<32>
	r4 = r4 + 4<32>
	branch r6 == 1<32> l0001B214
	// succ:  l0001B230 l0001B214
l0001B230:
	r6 = Mem0[r4:word32]
	r3 = PC + 0x37<32>
	r1 = 0x6E<32>
	// succ:  l0001B234
l0001B234:
	r2 = Mem0[r17 + 8<i32>:word32]
	r1 = 0x71<32>
	r3 = PC + 0xD86A<32>
	// succ:  l0001B238
l0001B238:
	branch r2 == 0<32> l0001B25C
	goto l0001B250
	// succ:  l0001B250 l0001B25C
l0001B24C:
	r2 = r16
	call errlog_function (retsize: 0;)
	v18 = r30
	r31 = Mem0[v18 + 4<i32>:word32]
	r30 = Mem0[v18:word32]
	r29 = v18 + 8<i32>
	return
	// succ:  concat_check_exit
l0001B250:
	r2 = Mem0[r2:word32]
	r2 = r16
	v19 = r30
	r31 = Mem0[v19 + 4<i32>:word32]
	r30 = Mem0[v19:word32]
	r29 = v19 + 8<i32>
	return
	// succ:  concat_check_exit
l0001B25C:
	r2 = r16
	r1 = 0x73<32>
	r4 = PC + 0xD84E<32>
	Mem0[r29:word32] = r17
	call logmsg_function (retsize: 0;)
	r0 = 0<32>
	v20 = r30
	r31 = Mem0[v20 + 4<i32>:word32]
	r30 = Mem0[v20:word32]
	r29 = v20 + 8<i32>
	return
	// succ:  concat_check_exit
concat_check_exit:


// logmsg_function
// Return size: 0
define logmsg_function
logmsg_function_entry:
	r29 = fp
	// succ:  l0001B27C
l0001B27C:
	v4 = r29 - 8<i32>
	Mem0[v4:word32] = r30
	Mem0[v4 + 4<i32>:word32] = r31
	r30 = v4
	r29 = v4 - 8<i32>
	r3 = 2<32>
	branch r3 >u r5 l0001B2A0
	// succ:  l0001B28C l0001B2A0
l0001B28C:
	r5 = Mem0[r2 + 16<i32>:word32]
	r5 = r29 + 0x10<32>
	r3 = 2<32>
	r0 = PC + 0x34<32>
	Mem0[r29 + 1<i32>:byte] = r6
	r6 = r29 + 0x10<32>
	call logv (retsize: 0;)
	// succ:  l0001B294_thunk_errlog_function
l0001B294_thunk_errlog_function:
	call errlog_function (retsize: 0;)
	return
	// succ:  logmsg_function_exit
l0001B2A0:
	v13 = r30
	r31 = Mem0[v13 + 4<i32>:word32]
	r30 = Mem0[v13:word32]
	r29 = v13 + 8<i32>
	return
	// succ:  logmsg_function_exit
logmsg_function_exit:


// errlog_function
// Return size: 0
define errlog_function
errlog_function_entry:
	r29 = fp
	// succ:  l0001B2A4
l0001B2A4:
	v4 = r29 - 8<i32>
	Mem0[v4:word32] = r30
	Mem0[v4 + 4<i32>:word32] = r31
	r30 = v4
	r29 = v4 - 8<i32>
	r4 = r3
	r0 = PC + 0xD798<32>
	Mem0[r29 + 1<i32>:byte] = r6
	r6 = r29 + 0x10<32>
	r5 = r29 + 0x10<32>
	r3 = 0<32>
	v13 = r30
	r31 = Mem0[v13 + 4<i32>:word32]
	r30 = Mem0[v13:word32]
	r29 = v13 + 8<i32>
	return
	// succ:  errlog_function_exit
errlog_function_exit:


// conv2d_f_execute_ref
// Return size: 0
define conv2d_f_execute_ref
conv2d_f_execute_ref_entry:
	r29 = fp
	// succ:  l0001B2D0
l0001B2D0:
	v4 = r29 - 8<i32>
	Mem0[v4:word32] = r30
	Mem0[v4 + 4<i32>:word32] = r31
	r30 = v4
	r29 = v4 - 120<i32>
	r3 = Mem0[r0 + 8<i32>:word32]
	r2 = Mem0[r0 + 4<i32>:word32]
	Mem0[r29 + 112<i32>:word64] = r17_r16
	Mem0[r29 + 104<i32>:word64] = r19_r18
	r16 = Mem0[r2:word32]
	r18 = Mem0[r0 + 32<i32>:int8]
	r4 = Mem0[r2 + 8<i32>:word32]
	r19 = Mem0[r2 + 4<i32>:word32]
	p0 = r18 == 0<32>
	Mem0[r29 + 80<i32>:word64] = r25_r24
	r24 = Mem0[r16 + 8<i32>:word32]
	Mem0[r29 + 96<i32>:word64] = r21_r20
	Mem0[r29 + 72<i32>:word64] = r27_r26
	Mem0[r29 + 88<i32>:word64] = r23_r22
	Mem0[r29 + 44<i32>:word32] = r0
	r21 = Mem0[r3:word32]
	r0 = r24
	r2 = Mem0[r16:word32]
	Mem0[r29 + 28<i32>:word32] = r4
	r3 = Mem0[r4 + 8<i32>:word32]
	r27 = Mem0[r19:word32]
	r26 = Mem0[r19 + 4<i32>:word32]
	r23 = Mem0[r16 + 12<i32>:word32]
	r25 = Mem0[r19 + 12<i32>:word32]
	r4 = Mem0[r4 + 4<i32>:word32]
	r17 = Mem0[r16 + 4<i32>:word32]
	Mem0[r29 + 20<i32>:word32] = r2
	r7 = Mem0[r19 + 8<i32>:word32]
	r2 = p0
	Mem0[r29 + 56<i32>:word32] = r2
	Mem0[r29 + 48<i32>:word32] = r7
	r2 = r24 - r26
	branch p0 l0001B35C
	// succ:  l0001B338 l0001B35C
l0001B338:
	r0 = r2 + r3
	branch p0 l0001B35C
	// succ:  l0001B340 l0001B35C
l0001B340:
	p0 = r10 == 4<32>
	Mem0[r29 + 60<i32>:word32] = r3
	r20 = r1
	p0 = r18 == 1<32>
	r0 = 0<32>
	branch p0 l0001B370
	// succ:  l0001B350 l0001B370
l0001B350:
	r3 = Mem0[r29 + 60<i32>:word64]
	r1 = r20
	r0 = r3
	r0 = r0 + (r24 + 0xFFFFFFFF<32>)
	// succ:  l0001B35C
l0001B35C:
	Mem0[r29 + 60<i32>:word32] = r3
	r20 = r1
	r22 = r4
	r1 = r3
	call fn00009760 (retsize: 0;)
	r4 = r22
	// succ:  l0001B370
l0001B370:
	r2 = r17 - r27
	branch p0 l0001B3A4
	// succ:  l0001B378 l0001B3A4
l0001B378:
	p0 = r10 == 4<32>
	Mem0[r29 + 64<i32>:word32] = r0
	r1_r0 = r4_r4
	branch p0 l0001B39C
	// succ:  l0001B384 l0001B39C
l0001B384:
	p0 = r10 == 2<32>
	r1 = Mem0[r29 + 56<i32>:word64]
	r0 = 0<32>
	r18 = r4
	r1_r0 = r18_r17
	branch p0 l0001B3B4
	// succ:  l0001B398 l0001B3B4
l0001B398:
	p0 = r1
	goto l0001B3B0
	// succ:  l0001B3B0
l0001B39C:
	goto l0001B3AC
	// succ:  l0001B3AC
l0001B3A4:
	Mem0[r29 + 64<i32>:word32] = r0
	r1 = r4
	r0 = r2 + r4
	// succ:  l0001B3AC
l0001B3AC:
	r18 = r4
	// succ:  l0001B3B0
l0001B3B0:
	call fn00009760 (retsize: 0;)
	// succ:  l0001B3B4
l0001B3B4:
	r22 = Mem0[r29 + 44<i32>:word64]
	r2 = Mem0[r19 + 16<i32>:word32]
	r4 = PC + 0xD854<32>
	Mem0[r29 + 36<i32>:word32] = r18
	r19_r18 = r18_r20
	r1 = 0x5E<32>
	Mem0[r29 + 56<i32>:word32] = r2
	r7 = Mem0[r21 + 16<i32>:word32]
	r2 = r18
	r16 = Mem0[r16 + 16<i32>:word32]
	r3 = Mem0[r22 + 28<i32>:word32]
	Mem0[r29 + 40<i32>:word32] = r0
	Mem0[r29 + 4<i32>:word32] = r3
	Mem0[r29 + 52<i32>:word32] = r7
	Mem0[r29 + 32<i32>:word32] = r21
	Mem0[r29:word32] = r22
	call logmsg_function (retsize: 0;)
	Mem0[r29 + 12<i32>:word32] = r23
	r1 = 0x5F<32>
	r4 = PC + 0xD83E<32>
	Mem0[r29 + 4<i32>:word32] = r17
	r2 = r18
	Mem0[r29 + 8<i32>:word32] = r24
	r21 = Mem0[r29 + 20<i32>:word32]
	Mem0[r29:word32] = r21
	call logmsg_function (retsize: 0;)
	r20 = Mem0[r29 + 48<i32>:word64]
	r2 = r18
	r4 = PC + 0xD833<32>
	Mem0[r29 + 12<i32>:word32] = r20
	r1 = 0x60<32>
	Mem0[r29 + 4<i32>:word32] = r27
	Mem0[r29 + 8<i32>:word32] = r26
	Mem0[r29:word32] = r25
	call logmsg_function (retsize: 0;)
	r3 = Mem0[r29 + 60<i32>:word64]
	r2 = r18
	r4 = PC + 0xD827<32>
	Mem0[r29 + 4<i32>:word32] = r3
	r1 = 0x61<32>
	Mem0[r29:word32] = r19
	call logmsg_function (retsize: 0;)
	r2 = r18
	r1 = 0x62<32>
	r4 = PC + 0xD81F<32>
	r22 = Mem0[r29 + 40<i32>:word32]
	r3 = Mem0[r22 + 32<i32>:byte]
	Mem0[r29:word32] = r3
	call logmsg_function (retsize: 0;)
	Mem0[r29:word32] = r21
	Mem0[r29 + 12<i32>:word32] = r25
	r4 = PC + 0xD811<32>
	r19 = Mem0[r29 + 64<i32>:word32]
	r1 = 0x63<32>
	Mem0[r29 + 4<i32>:word32] = r22
	Mem0[r29 + 8<i32>:word32] = r19
	r2 = r18
	call logmsg_function (retsize: 0;)
	r15 = r19
	branch p0 l0001B4B0
	// succ:  l0001B49C l0001B4B0
l0001B49C:
	p0 = r15 == -1<i32>
	r2 = r21 * r25
	r2 = r18
	r1 = 0x65<32>
	r3 = PC + 0xD800<32>
	goto l0001B504
	// succ:  l0001B504
l0001B4B0:
	r3 = Mem0[r29 + 32<i32>:word64]
	r6 = r21
	r9 = r22
	Mem0[r29 + 16<i32>:word32] = r18
	r5 = r3
	r4 = Mem0[r3 + 20<i32>:word32]
	r2 = r2 * r19
	r2 = r2 * r22
	branch r2 >u r4 l0001B4E8
	// succ:  l0001B4D4 l0001B4E8
l0001B4D4:
	r2 = r2 << 2<32>
	Mem0[r29 + 4<i32>:word32] = r2
	r1 = 0x67<32>
	r3 = PC + 0x21<32>
	Mem0[r29:word32] = r4
	r2 = Mem0[r29 + 16<i32>:word64]
	goto l0001B504
	// succ:  l0001B504
l0001B4E8:
	r4 = Mem0[r29 + 28<i32>:word32]
	branch r3 == 2<32> l0001B510
	// succ:  l0001B4F8 l0001B510
l0001B4F8:
	r3 = Mem0[r4:word32]
	r1 = 0x69<32>
	r3 = PC + 0x17<32>
	r2 = Mem0[r29 + 16<i32>:word32]
	// succ:  l0001B504
l0001B504:
	call errlog_function (retsize: 0;)
	r0 = 0xFFFFFFFF<32>
	goto l0001B728
	// succ:  l0001B728
l0001B510:
	branch r3 == 2<32> l0001B52C
	// succ:  l0001B520 l0001B52C
l0001B520:
	r3 = Mem0[r4 + 12<i32>:word32]
	p0 = r6 > 0<32>
	r1 = 0x6A<32>
	goto l0001B504
	// succ:  l0001B504
l0001B52C:
	Mem0[r5 + 4<i32>:word32] = r9
	Mem0[r5 + 24<i32>:word32] = r2
	r3 = r26 - r24
	r2 = r15 + 0xFFFFFFFF<32>
	Mem0[r5 + 8<i32>:word32] = r15
	Mem0[r5:word32] = r6
	r4 = r27 - r17
	r7 = r9 + 0xFFFFFFFF<32>
	Mem0[r5 + 12<i32>:word32] = r25
	branch p0 l0001B704
	// succ:  l0001B554 l0001B704
l0001B554:
	r6 = Mem0[r29 + 36<i32>:word64]
	r5 = Mem0[r29 + 60<i32>:word64]
	Mem0[r29 + 6<i32>:byte] = r3
	r3 = 0<32>
	r7 = r4 + r7 * r6
	r2 = r3 + r2 * r5
	r4 = 0<32>
	r3 = r23 * r25
	r7 = r7 + (r7 >>u 0x1F<32>)
	r2 = r2 + (r2 >>u 0x1F<32>)
	r6 = r7 >> 1<32>
	r5 = r5 * r25
	Mem0[r29 + 12<i32>:byte] = r2
	r2 = r2 >> 1<32>
	// succ:  l0001B594
l0001B594:
	p0 = r9 > 0<32>
	branch p0 l0001B6F4
	// succ:  l0001B59C l0001B6F4
l0001B59C:
	Mem0[r29 + 11<i32>:byte] = r7
	r2 = Mem0[r29 + 24<i32>:word32]
	r7 = 0<32>
	Mem0[r29 + 8<i32>:byte] = r2
	r2 = r2 * r9
	// succ:  l0001B5B4
l0001B5B4:
	p0 = r15 > 0<32>
	r13 = 0<32>
	r7 = Mem0[r29 + 44<i32>:word64]
	r2 = Mem0[r29 + 36<i32>:word64]
	r0 = Mem0[r29 + 28<i32>:word64]
	r6 = Mem0[r29 + 32<i32>:word64]
	r7 = r7 + r6
	r2 = r7 * r2
	Mem0[r29 + 16<i32>:byte] = r1
	r14 = r2 - r0
	r1 = r7 * r15
	// succ:  l0001B5DC
l0001B5DC:
	r28 = Mem0[r29 + 56<i32>:word32]
	p0 = r25 > 0<32>
	r2 = Mem0[r29 + 64<i32>:word64]
	r6 = Mem0[r29 + 60<i32>:word64]
	r0 = 0<32>
	r2 = r13 + r2
	r6 = Mem0[r29 + 48<i32>:word32]
	r2 = r2 * r25
	r7 = r13 * r6
	r6 = Mem0[r29 + 52<i32>:word32]
	r1 = r7 - r6
	r10 = r6 + (r2 << 2<32>)
	// succ:  l0001B60C
l0001B60C:
	p0 = r27 > 0<32>
	r7 = 0<32>
	r9 = r28
	r11 = r4
	branch p0 l0001B6BC
	// succ:  l0001B620 l0001B6BC
l0001B620:
	branch r17 >u r2 l0001B6B0
	// succ:  l0001B62C l0001B6B0
l0001B62C:
	r2 = r7 + r14
	r12 = r2 + r8
	r21 = 0<32>
	r2 = r9 + 0<32>
	p0 = r26 > 0<32>
	branch p0 l0001B6B0
	// succ:  l0001B640 l0001B6B0
l0001B640:
	r18 = r12 * r24
	__loop(1<i32>, 0x0001B648<p32>, r26)
	branch r24 >u r12 l0001B6A4
	// succ:  l0001B654 l0001B6A4
l0001B654:
	r12 = r21 + r1
	r6 = r23 + 0xFFFFFFFF<32>
	p0 = r12 > 0xFFFFFFFF<32>
	r12 = r12 + r18
	branch p0 l0001B6A4
	// succ:  l0001B664 l0001B6A4
l0001B664:
	p0 = r15 > 0<32>
	r22 = Mem0[r2:word32]
	p0 = r23 >u 1<32>
	r12 = r12 * r23
	__loop(0<i32>, 0x0001B688<p32>, r6)
	r12 = r2 + (r25 << 2<32>)
	r19 = r16 + (r12 << 2<32>)
	r19 = Mem0[r19:word32]
	r20 = r19 + 4<32>
	branch p0 l0001B6A0
	// succ:  l0001B688 l0001B6A0
l0001B688:
	r22 = Mem0[r12:word32]
	r19 = Mem0[r20:word32]
	r12 = r12 + (r25 << 2<32>)
	r11 = r11 + r19 * r22
	r20 = r20 + 4<32>
	// succ:  l0001B6A0
l0001B6A0:
	r11 = r11 + r19 * r22
	// succ:  l0001B6A4
l0001B6A4:
	r21 = r21 + 1<32>
	r2 = r2 + (r3 << 2<32>)
	// succ:  l0001B6B0
l0001B6B0:
	branch r7 == r27 l0001B620
	goto l0001B6C0
	// succ:  l0001B6C0 l0001B620
l0001B6BC:
	Mem0[r10:word32] = r11
	r10 = r10 + 4<32>
	r28 = r28 + 4<32>
	r0 = r0 + 1<32>
	goto l0001B6CC
	// succ:  l0001B6CC
l0001B6C0:
	r7 = r7 + 1<32>
	r9 = r9 + (r5 << 2<32>)
	Mem0[r10:word32] = r11
	r10 = r10 + 4<32>
	r28 = r28 + 4<32>
	// succ:  l0001B6CC
l0001B6CC:
	p0 = r0 == r25
	branch p0 l0001B60C
	// succ:  l0001B6D4 l0001B60C
l0001B6D4:
	branch r13 == r15 l0001B5DC
	// succ:  l0001B6E0 l0001B5DC
l0001B6E0:
	r13 = r13 + 1<32>
	r9 = Mem0[r29 + 40<i32>:word32]
	r2 = r2 + 1<32>
	Mem0[r29 + 44<i32>:word32] = r2
	p0 = r2 == r9
	branch p0 l0001B5B4
	// succ:  l0001B6F4 l0001B5B4
l0001B6F4:
	r6 = Mem0[r29 + 20<i32>:word64]
	r2 = Mem0[r29 + 24<i32>:word64]
	r2 = r2 + 1<32>
	Mem0[r29 + 24<i32>:word32] = r2
	branch p0 l0001B594
	// succ:  l0001B704 l0001B594
l0001B704:
	Mem0[r29 + 12<i32>:word32] = r25
	r1 = 0x93<32>
	r4 = PC + 0xD5E9<32>
	Mem0[r29:word32] = r6
	r2 = Mem0[r29 + 16<i32>:word64]
	Mem0[r29 + 4<i32>:word32] = r9
	Mem0[r29 + 8<i32>:word32] = r15
	call logmsg_function (retsize: 0;)
	r0 = 0<32>
	// succ:  l0001B728
l0001B728:
	r19_r18 = Mem0[r29 + 104<i32>:word64]
	r17_r16 = Mem0[r29 + 112<i32>:word64]
	r23_r22 = Mem0[r29 + 88<i32>:word64]
	r21_r20 = Mem0[r29 + 96<i32>:word64]
	r27_r26 = Mem0[r29 + 72<i32>:word64]
	r25_r24 = Mem0[r29 + 80<i32>:word64]
	v42 = r30
	r31 = Mem0[v42 + 4<i32>:word32]
	r30 = Mem0[v42:word32]
	r29 = v42 + 8<i32>
	return
	// succ:  conv2d_f_execute_ref_exit
conv2d_f_execute_ref_exit:


// conv2d_check_ref
// Return size: 0
define conv2d_check_ref
conv2d_check_ref_entry:
	r29 = fp
	// succ:  l0001B73C
l0001B73C:
	v4 = r29 - 8<i32>
	Mem0[v4:word32] = r30
	Mem0[v4 + 4<i32>:word32] = r31
	r30 = v4
	r29 = v4 - 16<i32>
	Mem0[r29 + 496<i32>:word64] = r17_r16
	r4 = PC + 0xD433<32>
	r17 = r0
	r16 = r1
	r1 = 0x9B<32>
	Mem0[r29:word32] = r17
	r2 = r16
	call logmsg_function (retsize: 0;)
	branch r2 == 6<32> l0001B778
	// succ:  l0001B764 l0001B778
l0001B764:
	r2 = Mem0[r17 + 16<i32>:word32]
	r2 = Mem0[r17 + 28<i32>:word32]
	r1 = 0x9C<32>
	r3 = PC + 0x27<32>
	Mem0[r29:word32] = r2
	goto l0001B78C
	// succ:  l0001B78C
l0001B778:
	branch r2 == 2<32> l0001B79C
	// succ:  l0001B788 l0001B79C
l0001B788:
	r2 = Mem0[r17 + 20<i32>:word32]
	r1 = 0x9D<32>
	r3 = PC + 0x1F<32>
	// succ:  l0001B78C
l0001B78C:
	r2 = r16
	call errlog_function (retsize: 0;)
	// succ:  l0001B790
l0001B790:
	v16 = r30
	r31 = Mem0[v16 + 4<i32>:word32]
	r30 = Mem0[v16:word32]
	r29 = v16 + 8<i32>
	return
	// succ:  conv2d_check_ref_exit
l0001B79C:
	branch r2 == 0<32> l0001B7B4
	// succ:  l0001B7AC l0001B7B4
l0001B7AC:
	r2 = Mem0[r17 + 4<i32>:word32]
	r1 = 0x9E<32>
	goto l0001B790
	// succ:  l0001B790
l0001B7B4:
	branch r3 == 0<32> l0001B7DC
	// succ:  l0001B7C4 l0001B7DC
l0001B7C4:
	r3 = Mem0[r17 + 8<i32>:word32]
	r4 = 0<32>
	r1 = 0x9F<32>
	goto l0001B790
	// succ:  l0001B790
l0001B7D0:
	branch r4 >u 4<32> l0001B7F8
l0001B7D4:
	branch r4 >u 4<32> l0001B7FC
	// succ:  l0001B7E0 l0001B7F8 l0001B7FC
l0001B7DC:
	branch r5 == 1<32> l0001B7D0
	goto l0001B7E8
	// succ:  l0001B7E8 l0001B7D0
l0001B7E0:
	r4 = r4 + 1<32>
	r2 = r2 + 4<32>
	branch r5 == 1<32> l0001B7D4
	// succ:  l0001B7E8 l0001B7D4
l0001B7E8:
	r5 = Mem0[r2:word32]
	Mem0[r29:word32] = r4
	r1 = 0xA2<32>
	r3 = PC + 0x2F<32>
	goto l0001B78C
	// succ:  l0001B78C
l0001B7F8:
	branch r2 == 0<32> l0001B814
l0001B7FC:
	branch r2 == 0<32> l0001B818
	// succ:  l0001B808 l0001B814 l0001B818
l0001B808:
	r2 = Mem0[r3:word32]
	r1 = 0xA7<32>
	Mem0[r29:word32] = 0<32>
	r3 = PC + 0x1D<32>
	goto l0001B78C
	// succ:  l0001B78C
l0001B814:
	r2 = r16
	r1 = 0xAA<32>
	r4 = PC + 0xD3DC<32>
	goto l0001B824
	// succ:  l0001B824
l0001B818:
	r2 = r16
	r1 = 0xAA<32>
	r4 = PC + 0x1C<32>
	// succ:  l0001B824
l0001B824:
	Mem0[r29:word32] = r17
	call logmsg_function (retsize: 0;)
	r0 = 0<32>
	v18 = r30
	r31 = Mem0[v18 + 4<i32>:word32]
	r30 = Mem0[v18:word32]
	r29 = v18 + 8<i32>
	return
	// succ:  conv2d_check_ref_exit
conv2d_check_ref_exit:


// logmsg_function
// Return size: 0
define logmsg_function
logmsg_function_entry:
	r29 = fp
	// succ:  l0001B834
l0001B834:
	v4 = r29 - 8<i32>
	Mem0[v4:word32] = r30
	Mem0[v4 + 4<i32>:word32] = r31
	r30 = v4
	r29 = v4 - 8<i32>
	r3 = 2<32>
	branch r3 >u r5 l0001B858
	// succ:  l0001B844 l0001B858
l0001B844:
	r5 = Mem0[r2 + 16<i32>:word32]
	r5 = r29 + 0x10<32>
	r3 = 2<32>
	r0 = PC + 0x11<32>
	Mem0[r29 + 1<i32>:byte] = r6
	r6 = r29 + 0x10<32>
	call logv (retsize: 0;)
	// succ:  l0001B84C_thunk_errlog_function
l0001B84C_thunk_errlog_function:
	call errlog_function (retsize: 0;)
	return
	// succ:  logmsg_function_exit
l0001B858:
	v13 = r30
	r31 = Mem0[v13 + 4<i32>:word32]
	r30 = Mem0[v13:word32]
	r29 = v13 + 8<i32>
	return
	// succ:  logmsg_function_exit
logmsg_function_exit:


// errlog_function
// Return size: 0
define errlog_function
errlog_function_entry:
	r29 = fp
	// succ:  l0001B85C
l0001B85C:
	v4 = r29 - 8<i32>
	Mem0[v4:word32] = r30
	Mem0[v4 + 4<i32>:word32] = r31
	r30 = v4
	r29 = v4 - 8<i32>
	r4 = r3
	r0 = PC + 0xD2F5<32>
	Mem0[r29 + 1<i32>:byte] = r6
	r6 = r29 + 0x10<32>
	r5 = r29 + 0x10<32>
	r3 = 0<32>
	v13 = r30
	r31 = Mem0[v13 + 4<i32>:word32]
	r30 = Mem0[v13:word32]
	r29 = v13 + 8<i32>
	return
	// succ:  errlog_function_exit
errlog_function_exit:


// matmul_execute_ref
// Return size: 0
define matmul_execute_ref
matmul_execute_ref_entry:
	r29 = fp
	// succ:  l0001B880
l0001B880:
	v4 = r29 - 8<i32>
	Mem0[v4:word32] = r30
	Mem0[v4 + 4<i32>:word32] = r31
	r30 = v4
	r29 = v4 - 88<i32>
	r4 = PC + 0xD52A<32>
	r5 = Mem0[r0 + 8<i32>:word32]
	r3 = Mem0[r0 + 4<i32>:word32]
	Mem0[r29 + 56<i32>:word64] = r23_r22
	Mem0[r29 + 80<i32>:word64] = r17_r16
	r1 = 0x4F<32>
	r16 = r1
	r23 = Mem0[r5:word32]
	r6 = Mem0[r3 + 4<i32>:word32]
	r2 = r16
	Mem0[r29 + 72<i32>:word64] = r19_r18
	r3 = Mem0[r3:word32]
	Mem0[r29 + 48<i32>:word64] = r25_r24
	Mem0[r29 + 64<i32>:word64] = r21_r20
	Mem0[r29 + 40<i32>:word64] = r27_r26
	r5 = Mem0[r6 + 16<i32>:word32]
	r25 = Mem0[r6:word32]
	r18 = Mem0[r6 + 8<i32>:word32]
	Mem0[r29 + 36<i32>:word32] = r5
	r24 = Mem0[r3 + 4<i32>:word32]
	r19 = Mem0[r6 + 12<i32>:word32]
	r17 = Mem0[r3 + 16<i32>:word32]
	r20 = Mem0[r3 + 12<i32>:word32]
	r27 = Mem0[r6 + 4<i32>:word32]
	r26 = Mem0[r3:word32]
	r21 = Mem0[r3 + 8<i32>:word32]
	Mem0[r29:word32] = r0
	r22 = Mem0[r23 + 16<i32>:word32]
	call logmsg_function (retsize: 0;)
	Mem0[r29 + 28<i32>:word32] = r19
	r1 = 0x52<32>
	r4 = PC + 0xD4DE<32>
	Mem0[r29 + 8<i32>:word32] = r21
	r2 = r16
	Mem0[r29 + 20<i32>:word32] = r27
	Mem0[r29 + 24<i32>:word32] = r18
	Mem0[r29 + 12<i32>:word32] = r20
	Mem0[r29 + 16<i32>:word32] = r25
	Mem0[r29:word32] = r26
	Mem0[r29 + 4<i32>:word32] = r24
	call logmsg_function (retsize: 0;)
	p0 = r24 == 1<32>
	r1 = 0x53<32>
	r3 = PC + 0xD4D8<32>
	r1 = 0x54<32>
	branch p0 l0001B988
	// succ:  l0001B92C l0001B988
l0001B92C:
	r1 = 0x55<32>
	p0 = r27 == 1<32>
	r3 = PC + 0xD4C0<32>
	branch p0 l0001B988
	// succ:  l0001B940 l0001B988
l0001B940:
	r1 = 0x56<32>
	p0 = r26 == 1<32>
	r3 = PC + 0xD4BE<32>
	branch p0 l0001B988
	// succ:  l0001B954 l0001B988
l0001B954:
	p0 = r25 == 1<32>
	r2 = r26 * r21
	r3 = PC + 0xD4AA<32>
	r4 = Mem0[r23 + 20<i32>:word32]
	r1 = 0x57<32>
	branch p0 l0001B988
	// succ:  l0001B970 l0001B988
l0001B970:
	r2 = r2 * r24
	r3 = PC + 0xD4A5<32>
	r2 = r2 * r19
	branch r2 >u r4 l0001B998
	goto l0001B98C
	// succ:  l0001B98C l0001B998
l0001B988:
	r2 = r16
	call errlog_function (retsize: 0;)
	goto l0001B990
	// succ:  l0001B990
l0001B98C:
	r2 = r2 << 2<32>
	r2 = r16
	// succ:  l0001B990
l0001B990:
	r0 = 0xFFFFFFFF<32>
	goto l0001BA58
	// succ:  l0001BA58
l0001B998:
	Mem0[r23 + 24<i32>:word32] = r2
	r28 = Mem0[r29 + 36<i32>:word32]
	r0 = r22
	r15 = r17
	Mem0[r23 + 12<i32>:word32] = r19
	Mem0[r23 + 4<i32>:word32] = 0xFFFFFF81<32>
	Mem0[r23 + 8<i32>:word32] = r21
	Mem0[r23:word32] = 1<32>
	r2 = 0<32>
	p0 = r21 == 0<32>
	r14 = r20 + 0xFFFFFFFF<32>
	r3 = 0<32>
	branch p0 l0001BA40
	// succ:  l0001B9D0 l0001BA40
l0001B9D0:
	r4 = r28
	branch p0 l0001BA38
	// succ:  l0001B9DC l0001BA38
l0001B9DC:
	p0 = r11 == 0<32>
	r6 = r2 * r20
	r5 = r2 * r19
	__loop(1<i32>, 0x0001B9EC<p32>, r19)
	r6 = r15 + (r6 << 2<32>)
	r5 = r0 + (r5 << 2<32>)
	r7 = r3
	branch p0 l0001BA2C
	// succ:  l0001B9F8 l0001BA2C
l0001B9F8:
	p0 = r12 == 0<32>
	r12 = r4 + (r19 << 2<32>)
	r8 = Mem0[r6:word32]
	r9 = Mem0[r4:word32]
	r13 = r6 + 4<32>
	r7 = r3
	branch p0 l0001BA28
	// succ:  l0001BA10 l0001BA28
l0001BA10:
	p0 = r12 >u -1<i32>
	__loop(0<i32>, 0x0001BA10<p32>, r14)
	r9 = Mem0[r12:word32]
	r8 = Mem0[r13:word32]
	r12 = r12 + (r19 << 2<32>)
	r7 = r7 + r8 * r9
	r13 = r13 + 4<32>
	// succ:  l0001BA28
l0001BA28:
	r7 = r7 + r8 * r9
	// succ:  l0001BA2C
l0001BA2C:
	Mem0[r5:word32] = r7
	r4 = r4 + 4<32>
	r5 = r5 + 4<32>
	// succ:  l0001BA38
l0001BA38:
	branch r2 == r21 l0001B9D0
	goto l0001BA44
	// succ:  l0001BA44 l0001B9D0
l0001BA40:
	r2 = r16
	r1 = 0x68<32>
	r4 = PC + 0xD3E6<32>
	goto l0001BA50
	// succ:  l0001BA50
l0001BA44:
	r2 = r2 + 1<32>
	r2 = r16
	r1 = 0x68<32>
	r4 = PC + 0x26<32>
	// succ:  l0001BA50
l0001BA50:
	call logmsg_function (retsize: 0;)
	r0 = 0<32>
	// succ:  l0001BA58
l0001BA58:
	r19_r18 = Mem0[r29 + 72<i32>:word64]
	r17_r16 = Mem0[r29 + 80<i32>:word64]
	r23_r22 = Mem0[r29 + 56<i32>:word64]
	r21_r20 = Mem0[r29 + 64<i32>:word64]
	r27_r26 = Mem0[r29 + 40<i32>:word64]
	r25_r24 = Mem0[r29 + 48<i32>:word64]
	v34 = r30
	r31 = Mem0[v34 + 4<i32>:word32]
	r30 = Mem0[v34:word32]
	r29 = v34 + 8<i32>
	return
	// succ:  matmul_execute_ref_exit
matmul_execute_ref_exit:


// matmul_check_ref
// Return size: 0
define matmul_check_ref
matmul_check_ref_entry:
	r29 = fp
	// succ:  l0001BA6C
l0001BA6C:
	v4 = r29 - 8<i32>
	Mem0[v4:word32] = r30
	Mem0[v4 + 4<i32>:word32] = r31
	r30 = v4
	r29 = v4 - 16<i32>
	Mem0[r29 + 496<i32>:word64] = r17_r16
	r4 = PC + 0xD2C8<32>
	r17 = r0
	r16 = r1
	r1 = 0x6F<32>
	Mem0[r29:word32] = r17
	r2 = r16
	call logmsg_function (retsize: 0;)
	r1 = 0x70<32>
	r3 = PC + 0xD2C4<32>
	branch r2 == 4<32> l0001BAD8
	// succ:  l0001BAA0 l0001BAD8
l0001BAA0:
	r2 = Mem0[r17 + 16<i32>:word32]
	r1 = 0x71<32>
	r3 = PC + 6<32>
	branch r2 == 2<32> l0001BAD8
	// succ:  l0001BAB4 l0001BAD8
l0001BAB4:
	r2 = Mem0[r17 + 20<i32>:word32]
	r1 = 0x72<32>
	r3 = PC + 9<32>
	branch r2 == 0<32> l0001BAD8
	// succ:  l0001BAC8 l0001BAD8
l0001BAC8:
	r2 = Mem0[r17 + 4<i32>:word32]
	r1 = 0x73<32>
	r3 = PC + 1<32>
	branch r2 == 0<32> l0001BAE8
	goto l0001BADC
	// succ:  l0001BADC l0001BAE8
l0001BAD8:
	r2 = r16
	call errlog_function (retsize: 0;)
	goto l0001BAE0
	// succ:  l0001BAE0
l0001BADC:
	r2 = Mem0[r17 + 8<i32>:word32]
	r2 = r16
	// succ:  l0001BAE0
l0001BAE0:
	v16 = r30
	r31 = Mem0[v16 + 4<i32>:word32]
	r30 = Mem0[v16:word32]
	r29 = v16 + 8<i32>
	return
	// succ:  matmul_check_ref_exit
l0001BAE8:
	r2 = r16
	r1 = 0x74<32>
	r4 = PC + 0xD2AA<32>
	Mem0[r29:word32] = r17
	call logmsg_function (retsize: 0;)
	r0 = 0<32>
	v17 = r30
	r31 = Mem0[v17 + 4<i32>:word32]
	r30 = Mem0[v17:word32]
	r29 = v17 + 8<i32>
	return
	// succ:  matmul_check_ref_exit
matmul_check_ref_exit:


// logmsg_function
// Return size: 0
define logmsg_function
logmsg_function_entry:
	r29 = fp
	// succ:  l0001BB08
l0001BB08:
	v4 = r29 - 8<i32>
	Mem0[v4:word32] = r30
	Mem0[v4 + 4<i32>:word32] = r31
	r30 = v4
	r29 = v4 - 8<i32>
	r3 = 2<32>
	branch r3 >u r5 l0001BB2C
	// succ:  l0001BB18 l0001BB2C
l0001BB18:
	r5 = Mem0[r2 + 16<i32>:word32]
	r5 = r29 + 0x10<32>
	r3 = 2<32>
	r0 = PC + 2<32>
	Mem0[r29 + 1<i32>:byte] = r6
	r6 = r29 + 0x10<32>
	call logv (retsize: 0;)
	// succ:  l0001BB20_thunk_errlog_function
l0001BB20_thunk_errlog_function:
	call errlog_function (retsize: 0;)
	return
	// succ:  logmsg_function_exit
l0001BB2C:
	v13 = r30
	r31 = Mem0[v13 + 4<i32>:word32]
	r30 = Mem0[v13:word32]
	r29 = v13 + 8<i32>
	return
	// succ:  logmsg_function_exit
logmsg_function_exit:


// errlog_function
// Return size: 0
define errlog_function
errlog_function_entry:
	r29 = fp
	// succ:  l0001BB30
l0001BB30:
	v4 = r29 - 8<i32>
	Mem0[v4:word32] = r30
	Mem0[v4 + 4<i32>:word32] = r31
	r30 = v4
	r29 = v4 - 8<i32>
	r4 = r3
	r0 = PC + 0xD1E6<32>
	Mem0[r29 + 1<i32>:byte] = r6
	r6 = r29 + 0x10<32>
	r5 = r29 + 0x10<32>
	r3 = 0<32>
	v13 = r30
	r31 = Mem0[v13 + 4<i32>:word32]
	r30 = Mem0[v13:word32]
	r29 = v13 + 8<i32>
	return
	// succ:  errlog_function_exit
errlog_function_exit:


// maxpool_execute
// Return size: 0
define maxpool_execute
maxpool_execute_entry:
	r29 = fp
	// succ:  l0001BB60
l0001BB60:
	v4 = r29 - 8<i32>
	Mem0[v4:word32] = r30
	Mem0[v4 + 4<i32>:word32] = r31
	r30 = v4
	r29 = v4 - 160<i32>
	Mem0[r29 + 472<i32>:word64] = r23_r22
	r23_r22 = r1_r0
	Mem0[r29 + 144<i32>:word64] = r19_r18
	r2 = Mem0[r22 + 4<i32>:word32]
	r18 = Mem0[r22 + 32<i32>:int8]
	Mem0[r29 + 136<i32>:word64] = r21_r20
	Mem0[r29 + 152<i32>:word64] = r17_r16
	r3 = Mem0[r22 + 8<i32>:word32]
	r20 = Mem0[r2 + 8<i32>:word32]
	p0 = r18 == 0<32>
	Mem0[r29 + 112<i32>:word64] = r27_r26
	r17 = Mem0[r2:word32]
	r26 = Mem0[r2 + 4<i32>:word32]
	Mem0[r29 + 120<i32>:word64] = r25_r24
	r0 = Mem0[r17 + 8<i32>:word32]
	r1 = p0
	r16 = Mem0[r3:word32]
	r7 = Mem0[r20 + 4<i32>:word32]
	r19 = Mem0[r20 + 8<i32>:word32]
	r27 = Mem0[r17:word32]
	r24 = Mem0[r17 + 4<i32>:word32]
	r25 = Mem0[r17 + 12<i32>:word32]
	Mem0[r29 + 76<i32>:word32] = r7
	r2 = Mem0[r26 + 4<i32>:word32]
	r7 = Mem0[r26 + 8<i32>:word32]
	Mem0[r29 + 68<i32>:word32] = r2
	Mem0[r29 + 36<i32>:word32] = r0
	Mem0[r29 + 104<i32>:word32] = r1
	Mem0[r29 + 32<i32>:word32] = r7
	branch p0 l0001BBE8
	// succ:  l0001BBC4 l0001BBE8
l0001BBC4:
	branch p0 l0001BBDC
	// succ:  l0001BBC8 l0001BBDC
l0001BBC8:
	p0 = r10 == 4<32>
	r21 = 0<32>
	branch p0 l0001BBF4
	// succ:  l0001BBD0 l0001BBF4
l0001BBD0:
	p0 = r10 == 2<32>
	r2 = Mem0[r29 + 36<i32>:word64]
	r0 = r19
	goto l0001BBE8
	// succ:  l0001BBE8
l0001BBDC:
	r3 = Mem0[r29 + 32<i32>:word64]
	r2 = Mem0[r29 + 36<i32>:word64]
	r2 = r19 + r2
	r0 = r2 - r3
	// succ:  l0001BBE8
l0001BBE8:
	r1 = r19
	call fn00009760 (retsize: 0;)
	r21 = r0
	// succ:  l0001BBF4
l0001BBF4:
	branch p0 l0001BC30
	// succ:  l0001BBFC l0001BC30
l0001BBFC:
	p0 = r10 == 4<32>
	r1 = Mem0[r29 + 76<i32>:word32]
	branch p0 l0001BC24
	// succ:  l0001BC04 l0001BC24
l0001BC04:
	p0 = r10 == 2<32>
	Mem0[r29 + 18<i32>:byte] = r2
	r0 = Mem0[r29 + 104<i32>:word32]
	r2 = 0<32>
	r1 = Mem0[r29 + 76<i32>:word32]
	r0 = r24 + 0<32>
	branch p0 l0001BC48
	// succ:  l0001BC20 l0001BC48
l0001BC20:
	goto l0001BC3C
	// succ:  l0001BC3C
l0001BC24:
	r0 = r1
	goto l0001BC3C
	// succ:  l0001BC3C
l0001BC30:
	r3 = Mem0[r29 + 68<i32>:word64]
	r1 = Mem0[r29 + 76<i32>:word64]
	r2 = r1 + r24
	r0 = r2 - r3
	// succ:  l0001BC3C
l0001BC3C:
	call fn00009760 (retsize: 0;)
	Mem0[r29 + 72<i32>:word32] = r0
	r2 = r23
	r1 = 0x54<32>
	r4 = PC + 0xD2A7<32>
	goto l0001BC54
	// succ:  l0001BC54
l0001BC48:
	r2 = r23
	r1 = 0x54<32>
	r4 = PC + 0x27<32>
	// succ:  l0001BC54
l0001BC54:
	r3 = Mem0[r17 + 16<i32>:word32]
	r7 = Mem0[r16 + 16<i32>:word32]
	Mem0[r29 + 100<i32>:word32] = r3
	Mem0[r29 + 104<i32>:word32] = r7
	Mem0[r29:word32] = r22
	call logmsg_function (retsize: 0;)
	branch r2 == 2<32> l0001BC84
	// succ:  l0001BC70 l0001BC84
l0001BC70:
	r2 = Mem0[r26:word32]
	branch r2 == 2<32> l0001BC88
	// succ:  l0001BC78 l0001BC88
l0001BC78:
	branch r2 == 2<32> l0001BC88
	// succ:  l0001BC80 l0001BC88
l0001BC80:
	branch r2 == 2<32> l0001BCA4
	goto l0001BC88
	// succ:  l0001BC88 l0001BCA4
l0001BC84:
	r1 = 0x59<32>
	r3 = PC + 0xD281<32>
	goto l0001BC90
	// succ:  l0001BC90
l0001BC88:
	r1 = 0x59<32>
	r3 = PC + 1<32>
	// succ:  l0001BC90
l0001BC90:
	r2 = r23
	call errlog_function (retsize: 0;)
	// succ:  l0001BC94
l0001BC94:
	r0 = 0xFFFFFFFF<32>
	goto l0001BF7C
	// succ:  l0001BF7C
l0001BCA4:
	r4 = Mem0[r29 + 72<i32>:word64]
	r3 = Mem0[r16 + 20<i32>:word32]
	r1 = 0x5B<32>
	r2 = r2 * r21
	r2 = r2 * r4
	branch r2 >u r3 l0001BCC8
	// succ:  l0001BCC0 l0001BCC8
l0001BCC0:
	r2 = r2 << 2<32>
	goto l0001BC94
	// succ:  l0001BC94
l0001BCC8:
	branch r3 == 0<32> l0001BCE4
	// succ:  l0001BCD8 l0001BCE4
l0001BCD8:
	r3 = Mem0[r22 + 32<i32>:int8]
	p0 = r27 > 0<32>
	r1 = 0x5C<32>
	goto l0001BC94
	// succ:  l0001BC94
l0001BCE4:
	Mem0[r16 + 24<i32>:word32] = r2
	r2 = Mem0[r29 + 72<i32>:word64]
	r1 = 0xFF800000<32>
	Mem0[r29 + 12<i32>:word32] = r22
	Mem0[r29 + 8<i32>:word32] = r23
	Mem0[r16:word32] = r27
	Mem0[r16 + 4<i32>:word32] = r2
	Mem0[r16 + 12<i32>:word32] = r25
	Mem0[r16 + 8<i32>:word32] = r21
	r12 = Mem0[r29 + 32<i32>:word32]
	r9 = Mem0[r29 + 68<i32>:word32]
	branch p0 l0001BF5C
	// succ:  l0001BD10 l0001BF5C
l0001BD10:
	r4 = Mem0[r29 + 72<i32>:word64]
	r2 = r21
	r13 = r12
	r0 = 0<32>
	r5 = Mem0[r29 + 36<i32>:word64]
	r7 = Mem0[r29 + 76<i32>:word64]
	r4 = r9 - r24
	r8 = r4 + 0xFFFFFFFF<32>
	Mem0[r29 + 60<i32>:word32] = r24
	Mem0[r29 + 28<i32>:word32] = r0
	r3 = r12 - r5
	r6 = r5 * r25
	r7 = 0xFFFFFFFF<32> - r5
	r8 = r4 + r8 * r7
	Mem0[r29 + 96<i32>:word32] = r7
	r3 = 0xFFFFFFFF<32> - r24
	r8 = r8 + (r8 >>u 0x1F<32>)
	r2 = r3 + r2 * r19
	Mem0[r29 + 52<i32>:word32] = r3
	r7 = 0<32>
	r3 = r25 << 2<32>
	r2 = r2 + (r2 >>u 0x1F<32>)
	Mem0[r29 + 92<i32>:word32] = r3
	r4 = 0<32>
	r3 = r8 >> 1<32>
	Mem0[r29 + 48<i32>:word32] = r3
	Mem0[r29 + 64<i32>:word32] = r7
	r0 = 0<32> - r3
	Mem0[r29 + 20<i32>:word32] = r0
	r7 = r2 >> 1<32>
	r2 = r3 + (0x7F<32> - r9)
	Mem0[r29 + 16<i32>:word32] = r2
	r2 = 0<32> - r7
	r0 = r7 + (0x7F<32> - r12)
	Mem0[r29 + 40<i32>:word32] = r2
	Mem0[r29 + 44<i32>:word32] = r0
	// succ:  l0001BD88
l0001BD88:
	Mem0[r29 + 24<i32>:word32] = r27
	r2 = Mem0[r29 + 72<i32>:word32]
	branch p0 l0001BF38
	// succ:  l0001BD94 l0001BF38
l0001BD94:
	p0 = r2 > 1<32>
	Mem0[r29 + 22<i32>:byte] = r2
	r2 = Mem0[r29 + 20<i32>:word32]
	r0 = Mem0[r29 + 16<i32>:word64]
	r3 = Mem0[r29 + 28<i32>:word64]
	Mem0[r29 + 84<i32>:word32] = r0
	r0 = 0<32>
	r2 = r3 * r2
	Mem0[r29 + 80<i32>:word32] = r0
	Mem0[r29 + 56<i32>:word32] = r2
	// succ:  l0001BDB0
l0001BDB0:
	r2 = Mem0[r29 + 76<i32>:word32]
	r9 = Mem0[r29 + 80<i32>:word32]
	branch p0 l0001BF0C
	// succ:  l0001BDBC l0001BF0C
l0001BDBC:
	p0 = r13 > 1<32>
	r12 = Mem0[r29 + 84<i32>:word32]
	r14 = Mem0[r29 + 52<i32>:word32]
	r8 = Mem0[r29 + 56<i32>:word32]
	r3 = Mem0[r29 + 88<i32>:word32]
	r2 = r9 * r2
	r15 = Mem0[r29 + 64<i32>:word32]
	r14 = Mem0[r29 + 48<i32>:word32]
	r8 = r9 + r8
	r12 = max<int32>(r12, r14)
	r0 = Mem0[r29 + 60<i32>:word32]
	r14 = Mem0[r29 + 68<i32>:word32]
	r17 = r2 - r14
	r3 = max<int32>(r3, r4)
	r26 = 0xFFFFFFFF<32> - r12
	r8 = r17 + r14
	r3 = r15 + r3
	r20 = r8 * r21
	r28 = Mem0[r29 + 44<i32>:word32]
	r16 = Mem0[r29 + 40<i32>:word32]
	r9 = 0<32>
	r2 = max<int32>(r17, r4)
	r15 = min<int32>(r0, r8)
	r12 = r5 * r3
	// succ:  l0001BE18
l0001BE18:
	p0 = r25 > 0<32>
	r8 = r9 + r20
	branch p0 l0001BEFC
	// succ:  l0001BE28 l0001BEFC
l0001BE28:
	r3 = r9 * r19
	r17 = Mem0[r29 + 100<i32>:word64]
	r0 = Mem0[r29 + 96<i32>:word64]
	r11 = r8 * r25
	r14 = max<int32>(r16, r4)
	r23 = r12 + r14
	r3 = r3 - r7
	r0 = 0<32>
	r3 = r3 + r13
	r22 = max<int32>(r3, r4)
	r10 = max<int32>(r28, r0)
	r10 = Mem0[r29 + 92<i32>:word32]
	r18 = 0xFFFFFFFF<32> - r10
	r3 = Mem0[r29 + 104<i32>:word32]
	r8 = r18 - r14
	r10 = r17 + r10 * r23
	r18 = min<int32>(r5, r3)
	r27 = r3 + (r11 << 2<32>)
	// succ:  l0001BE68
l0001BE68:
	p0 = r15 > r2
	r3 = r1
	r14 = r26 - r2
	branch p0 l0001BEE4
	// succ:  l0001BE78 l0001BEE4
l0001BE78:
	r3 = r1
	r11 = r10
	__loop(1<i32>, 0x0001BE84<p32>, r14)
	r24 = r8 + 0xFFFFFFFF<32>
	branch p0 l0001BED8
	// succ:  l0001BE90 l0001BED8
l0001BE90:
	p0 = r10 > -1<i32>
	r23 = r11 + (r25 << 2<32>)
	r14 = Mem0[r11:word32]
	p0 = r8 >u 1<32>
	r17 = r24 + 0xFFFFFFFF<32>
	r23 = r14 + 0<32>
	branch p0 l0001BED4
	// succ:  l0001BEA4 l0001BED4
l0001BEA4:
	r23 = Mem0[r23:word32]
	p0 = r24 >u 1<32>
	r24 = r23 + (r25 << 2<32>)
	__loop(0<i32>, 0x0001BEB8<p32>, r17)
	branch p0 l0001BED0
	// succ:  l0001BEB8 l0001BED0
l0001BEB8:
	r23 = Mem0[r24:word32]
	r17 = r23
	r24 = r24 + (r25 << 2<32>)
	r3 = fmaxf(r14, r3)
	r14 = r17
	// succ:  l0001BED0
l0001BED0:
	r3 = fmaxf(r14, r3)
	// succ:  l0001BED4
l0001BED4:
	r3 = fmaxf(r23, r3)
	// succ:  l0001BED8
l0001BED8:
	r11 = r11 + (r6 << 2<32>)
	// succ:  l0001BEE4
l0001BEE4:
	Mem0[r27:word32] = r3
	r27 = r27 + 4<32>
	r10 = r10 + 4<32>
	r0 = r0 + 1<32>
	p0 = r0 == r25
	branch p0 l0001BE68
	// succ:  l0001BEFC l0001BE68
l0001BEFC:
	branch r9 == r21 l0001BE18
	goto l0001BF10
	// succ:  l0001BF10 l0001BE18
l0001BF0C:
	r3 = Mem0[r29 + 88<i32>:word64]
	r2 = Mem0[r29 + 76<i32>:word64]
	// succ:  l0001BF10
l0001BF10:
	r9 = r9 + 1<32>
	r28 = r28 - r19
	r16 = r16 + r19
	r8 = Mem0[r29 + 80<i32>:word32]
	r0 = Mem0[r29 + 84<i32>:word32]
	r3 = r3 + r2
	Mem0[r29 + 88<i32>:word32] = r3
	r2 = Mem0[r29 + 72<i32>:word64]
	r8 = r8 + 1<32>
	r3 = r0 - r2
	Mem0[r29 + 84<i32>:word32] = r3
	Mem0[r29 + 80<i32>:word32] = r8
	p0 = r8 == r2
	branch p0 l0001BDB0
	// succ:  l0001BF38 l0001BDB0
l0001BF38:
	r27 = Mem0[r29 + 24<i32>:word32]
	r8 = Mem0[r29 + 28<i32>:word32]
	r3 = Mem0[r29 + 64<i32>:word64]
	r2 = Mem0[r29 + 60<i32>:word64]
	r8 = r8 + 1<32>
	Mem0[r29 + 28<i32>:word32] = r8
	p0 = r8 == r27
	r3 = r3 + r2
	Mem0[r29 + 64<i32>:word32] = r3
	branch p0 l0001BD88
	// succ:  l0001BF5C l0001BD88
l0001BF5C:
	Mem0[r29:byte] = r2
	r2 = Mem0[r29 + 12<i32>:word32]
	r4 = PC + 0xCFE1<32>
	r2 = Mem0[r29 + 8<i32>:word32]
	call logmsg_function (retsize: 0;)
	r0 = 0<32>
	// succ:  l0001BF7C
l0001BF7C:
	r19_r18 = Mem0[r29 + 144<i32>:word64]
	r17_r16 = Mem0[r29 + 152<i32>:word64]
	r23_r22 = Mem0[r29 + 128<i32>:word64]
	r21_r20 = Mem0[r29 + 136<i32>:word64]
	r27_r26 = Mem0[r29 + 112<i32>:word64]
	r25_r24 = Mem0[r29 + 120<i32>:word64]
	v35 = r30
	r31 = Mem0[v35 + 4<i32>:word32]
	r30 = Mem0[v35:word32]
	r29 = v35 + 8<i32>
	return
	// succ:  maxpool_execute_exit
maxpool_execute_exit:


// maxpool_check
// Return size: 0
define maxpool_check
maxpool_check_entry:
	r29 = fp
	// succ:  l0001BF90
l0001BF90:
	v4 = r29 - 8<i32>
	Mem0[v4:word32] = r30
	Mem0[v4 + 4<i32>:word32] = r31
	r30 = v4
	r29 = v4 - 16<i32>
	Mem0[r29 + 496<i32>:word64] = r17_r16
	r4 = PC + 0xCED0<32>
	r17 = r0
	r16 = r1
	r1 = 0x8B<32>
	Mem0[r29:word32] = r17
	r2 = r16
	call logmsg_function (retsize: 0;)
	branch r2 == 6<32> l0001BFD0
	// succ:  l0001BFBC l0001BFD0
l0001BFBC:
	r2 = Mem0[r17 + 16<i32>:word32]
	r1 = 0x8C<32>
	r3 = PC + 1<32>
	// succ:  l0001BFC0
l0001BFC0:
	r2 = r16
	call errlog_function (retsize: 0;)
	v16 = r30
	r31 = Mem0[v16 + 4<i32>:word32]
	r30 = Mem0[v16:word32]
	r29 = v16 + 8<i32>
	return
	// succ:  maxpool_check_exit
l0001BFD0:
	branch r2 == 2<32> l0001BFE4
	// succ:  l0001BFE0 l0001BFE4
l0001BFE0:
	r2 = Mem0[r17 + 20<i32>:word32]
	r1 = 0x8D<32>
	r3 = Mem0[r17 + 4<i32>:word32]
	// succ:  l0001BFE4
l0001BFE4:
	goto l0001BFC0
	// succ:  l0001BFC0
maxpool_check_exit:


// logmsg_function
// Return size: 0
define logmsg_function
logmsg_function_entry:
	r29 = fp
	// succ:  l0001C058
l0001C058:
	v4 = r29 - 8<i32>
	Mem0[v4:word32] = r30
	Mem0[v4 + 4<i32>:word32] = r31
	r30 = v4
	r29 = v4 - 8<i32>
	r3 = 2<32>
	branch r3 >u r5 l0001C07C
	// succ:  l0001C068 l0001C07C
l0001C068:
	r5 = Mem0[r2 + 16<i32>:word32]
	r5 = r29 + 0x10<32>
	r3 = 2<32>
	r0 = PC + 0x1D<32>
	Mem0[r29 + 1<i32>:byte] = r6
	r6 = r29 + 0x10<32>
	call logv (retsize: 0;)
	// succ:  l0001C070_thunk_errlog_function
l0001C070_thunk_errlog_function:
	call errlog_function (retsize: 0;)
	return
	// succ:  logmsg_function_exit
l0001C07C:
	v13 = r30
	r31 = Mem0[v13 + 4<i32>:word32]
	r30 = Mem0[v13:word32]
	r29 = v13 + 8<i32>
	return
	// succ:  logmsg_function_exit
logmsg_function_exit:


// errlog_function
// Return size: 0
define errlog_function
errlog_function_entry:
	r29 = fp
	// succ:  l0001C080
l0001C080:
	v4 = r29 - 8<i32>
	Mem0[v4:word32] = r30
	Mem0[v4 + 4<i32>:word32] = r31
	r30 = v4
	r29 = v4 - 8<i32>
	r4 = r3
	r0 = PC + 0xCDC1<32>
	Mem0[r29 + 1<i32>:byte] = r6
	r6 = r29 + 0x10<32>
	r5 = r29 + 0x10<32>
	r3 = 0<32>
	v13 = r30
	r31 = Mem0[v13 + 4<i32>:word32]
	r30 = Mem0[v13:word32]
	r29 = v13 + 8<i32>
	return
	// succ:  errlog_function_exit
errlog_function_exit:


// relu_execute
// Return size: 0
define relu_execute
relu_execute_entry:
	r29 = fp
	// succ:  l0001C0B0
l0001C0B0:
	v4 = r29 - 8<i32>
	Mem0[v4:word32] = r30
	Mem0[v4 + 4<i32>:word32] = r31
	r30 = v4
	r29 = v4 - 40<i32>
	Mem0[r29 + 496<i32>:word64] = r17_r16
	r4 = PC + 0xCF66<32>
	r17_r16 = r0_r1
	Mem0[r29 + 24<i32>:word64] = r19_r18
	r2 = Mem0[r17 + 4<i32>:word32]
	r1 = 0x36<32>
	r3 = Mem0[r17 + 8<i32>:word32]
	Mem0[r29 + 16<i32>:word64] = r21_r20
	Mem0[r29 + 8<i32>:word64] = r23_r22
	r22 = Mem0[r3:word32]
	r18 = Mem0[r2:word32]
	r6 = Mem0[r18 + 12<i32>:word32]
	r0 = Mem0[r18:word32]
	r5 = Mem0[r18 + 8<i32>:word32]
	r7 = Mem0[r18 + 4<i32>:word32]
	r20 = Mem0[r22 + 16<i32>:word32]
	r19 = Mem0[r18 + 16<i32>:word32]
	r2 = r7 * r0
	Mem0[r29:word32] = r17
	r2 = r16
	r3 = r2 * r5
	r21 = r3 * r6
	call logmsg_function (retsize: 0;)
	r23 = r21 << 2<32>
	branch r23 >u r2 l0001C11C
	// succ:  l0001C108 l0001C11C
l0001C108:
	r2 = Mem0[r22 + 20<i32>:word32]
	r2 = r16
	r1 = 0x37<32>
	r3 = PC + 0xA<32>
	call errlog_function (retsize: 0;)
	r0 = 0xFFFFFFFF<32>
	goto l0001C170
	// succ:  l0001C170
l0001C11C:
	r3 = Mem0[r18 + 4<i32>:word32]
	r2 = Mem0[r18:word32]
	p0 = r21 == 0<32>
	Mem0[r22:word32] = r2
	Mem0[r22 + 4<i32>:word32] = r3
	r6 = Mem0[r18 + 8<i32>:word32]
	Mem0[r22 + 8<i32>:word32] = r6
	r7 = Mem0[r18 + 12<i32>:word32]
	r18 = -1<i32>
	Mem0[r22 + 24<i32>:word32] = r23
	Mem0[r22 + 12<i32>:word32] = r7
	branch p0 l0001C158
	// succ:  l0001C13C l0001C158
l0001C13C:
	r0 = Mem0[r19:word32]
	r1 = r18
	r21 = r21 + 0xFFFFFFFF<32>
	call fn00009600 (retsize: 0;)
	Mem0[r20:word32] = r0
	r19 = r19 + 4<32>
	p0 = r21 == 0<32>
	r20 = r20 + 4<32>
	branch p0 l0001C13C
	// succ:  l0001C158 l0001C13C
l0001C158:
	r2 = r16
	r1 = 0x3F<32>
	r4 = PC + 0xCED5<32>
	Mem0[r29:word32] = r17
	call logmsg_function (retsize: 0;)
	r0 = 0<32>
	// succ:  l0001C170
l0001C170:
	r19_r18 = Mem0[r29 + 24<i32>:word64]
	r17_r16 = Mem0[r29 + 32<i32>:word64]
	r23_r22 = Mem0[r29 + 8<i32>:word64]
	r21_r20 = Mem0[r29 + 16<i32>:word64]
	v30 = r30
	r31 = Mem0[v30 + 4<i32>:word32]
	r30 = Mem0[v30:word32]
	r29 = v30 + 8<i32>
	return
	// succ:  relu_execute_exit
relu_execute_exit:


// relu_check
// Return size: 0
define relu_check
relu_check_entry:
	r29 = fp
	// succ:  l0001C17C
l0001C17C:
	// succ:  l0001C17C_thunk_relu_check__merged
l0001C17C_thunk_relu_check__merged:
	call relu_check__merged (retsize: 0;)
	return
	// succ:  relu_check_exit
relu_check_exit:


// relu_check__merged
// Return size: 0
define relu_check__merged
relu_check__merged_entry:
	r29 = fp
	// succ:  l0001C180
l0001C180:
	v4 = r29 - 8<i32>
	Mem0[v4:word32] = r30
	Mem0[v4 + 4<i32>:word32] = r31
	r30 = v4
	r29 = v4 - 32<i32>
	p0 = r2 == 1<32>
	r4 = PC + 0xCDE9<32>
	r7 = 1<32>
	r5 = 2<32>
	r6 = PC + 0xCE5E<32>
	Mem0[r29 + 16<i32>:word64] = r19_r18
	Mem0[r29 + 24<i32>:word64] = r17_r16
	r4 = r6 + 0<32>
	r16 = r1
	r19 = p0
	Mem0[r29 + 8<i32>:word32] = r19
	r17 = r0
	Mem0[r29:word32] = r17
	r18 = p0 ? r5 : r7
	call logmsg_function (retsize: 0;)
	branch r2 == r18 l0001C1E4
	// succ:  l0001C1CC l0001C1E4
l0001C1CC:
	r2 = Mem0[r17 + 16<i32>:word32]
	r0 = Mem0[r29 + 8<i32>:word64]
	r2 = r16
	r3 = PC + 0x38<32>
	r1 = 0x62<32>
	r1 = 0x6B<32>
	goto l0001C20C
	// succ:  l0001C20C
l0001C1E4:
	r0 = Mem0[r29 + 8<i32>:word32]
	branch r2 == 2<32> l0001C224
	// succ:  l0001C1F8 l0001C224
l0001C1F8:
	r2 = Mem0[r17 + 20<i32>:word32]
	p1 = r0
	r1 = 0x63<32>
	r1 = 0x6C<32>
	r3 = PC + 0xCD8F<32>
	r2 = r16
	// succ:  l0001C20C
l0001C20C:
	call errlog_function (retsize: 0;)
	r0 = 0xFFFFFFFF<32>
	goto l0001C250
	// succ:  l0001C250
l0001C224:
	r1 = 0x64<32>
	r1 = 0x6D<32>
	branch p1 l0001C23C
	// succ:  l0001C230 l0001C23C
l0001C230:
	goto l0001C244
	// succ:  l0001C244
l0001C23C:
	r4 = PC + 0xCD63<32>
	// succ:  l0001C244
l0001C244:
	Mem0[r29:word32] = r17
	r2 = r16
	call logmsg_function (retsize: 0;)
	r0 = 0<32>
	// succ:  l0001C250
l0001C250:
	r19_r18 = Mem0[r29 + 16<i32>:word64]
	r17_r16 = Mem0[r29 + 24<i32>:word64]
	v23 = r30
	r31 = Mem0[v23 + 4<i32>:word32]
	r30 = Mem0[v23:word32]
	r29 = v23 + 8<i32>
	return
	// succ:  relu_check__merged_exit
relu_check__merged_exit:


// reluX_execute
// Return size: 0
define reluX_execute
reluX_execute_entry:
	r29 = fp
	// succ:  l0001C258
l0001C258:
	v4 = r29 - 8<i32>
	Mem0[v4:word32] = r30
	Mem0[v4 + 4<i32>:word32] = r31
	r30 = v4
	r29 = v4 - 48<i32>
	Mem0[r29 + 496<i32>:word64] = r17_r16
	r4 = PC + 0xCD5E<32>
	r17_r16 = r0_r1
	Mem0[r29 + 32<i32>:word64] = r19_r18
	r3 = Mem0[r17 + 4<i32>:word32]
	r1 = 0x52<32>
	r5 = Mem0[r17 + 8<i32>:word32]
	r2 = r16
	Mem0[r29 + 24<i32>:word64] = r21_r20
	Mem0[r29 + 16<i32>:word64] = r23_r22
	r23 = Mem0[r5:word32]
	r19 = Mem0[r3:word32]
	Mem0[r29 + 8<i32>:word64] = r25_r24
	r3 = Mem0[r3 + 4<i32>:word32]
	r6 = Mem0[r19 + 4<i32>:word32]
	r0 = Mem0[r19:word32]
	r8 = Mem0[r19 + 12<i32>:word32]
	r7 = Mem0[r19 + 8<i32>:word32]
	r5 = r6 * r0
	r20 = Mem0[r19 + 16<i32>:word32]
	r3 = Mem0[r3 + 16<i32>:word32]
	r5 = r5 * r7
	r21 = Mem0[r23 + 16<i32>:word32]
	Mem0[r29:word32] = r17
	r18 = Mem0[r3:word32]
	r22 = r5 * r8
	call logmsg_function (retsize: 0;)
	r24 = r22 << 2<32>
	branch r24 >u r2 l0001C2D4
	// succ:  l0001C2BC l0001C2D4
l0001C2BC:
	r2 = Mem0[r23 + 20<i32>:word32]
	r2 = r16
	r1 = 0x53<32>
	r3 = PC + 0x16<32>
	call errlog_function (retsize: 0;)
	r0 = 0xFFFFFFFF<32>
	goto l0001C338
	// succ:  l0001C338
l0001C2D4:
	r3 = Mem0[r19 + 4<i32>:word32]
	r2 = Mem0[r19:word32]
	p0 = r22 == 0<32>
	Mem0[r23:word32] = r2
	Mem0[r23 + 4<i32>:word32] = r3
	r6 = Mem0[r19 + 8<i32>:word32]
	Mem0[r23 + 8<i32>:word32] = r6
	r7 = Mem0[r19 + 12<i32>:word32]
	r19 = -1<i32>
	Mem0[r23 + 24<i32>:word32] = r24
	Mem0[r23 + 12<i32>:word32] = r7
	branch p0 l0001C31C
	// succ:  l0001C2F8 l0001C31C
l0001C2F8:
	r0 = Mem0[r20:word32]
	r1 = r19
	call fn00009600 (retsize: 0;)
	r22 = r22 + 0xFFFFFFFF<32>
	r1_r0 = r0_r18
	call fn000097B0 (retsize: 0;)
	Mem0[r21:word32] = r0
	r20 = r20 + 4<32>
	p0 = r22 == 0<32>
	r21 = r21 + 4<32>
	branch p0 l0001C2F8
	// succ:  l0001C31C l0001C2F8
l0001C31C:
	r2 = r16
	r1 = 0x5B<32>
	r4 = PC + 0xCCC0<32>
	Mem0[r29:word32] = r17
	call logmsg_function (retsize: 0;)
	r0 = 0<32>
	// succ:  l0001C338
l0001C338:
	r19_r18 = Mem0[r29 + 32<i32>:word64]
	r17_r16 = Mem0[r29 + 40<i32>:word64]
	r23_r22 = Mem0[r29 + 16<i32>:word64]
	r21_r20 = Mem0[r29 + 24<i32>:word64]
	v35 = r30
	r31 = Mem0[v35 + 4<i32>:word32]
	r30 = Mem0[v35:word32]
	r29 = v35 + 8<i32>
	return
	// succ:  reluX_execute_exit
reluX_execute_exit:


// reluX_check
// Return size: 0
define reluX_check
reluX_check_entry:
	r29 = fp
	// succ:  l0001C348
l0001C348:
	// succ:  l0001C348_thunk_relu_check__merged
l0001C348_thunk_relu_check__merged:
	call relu_check__merged (retsize: 0;)
	return
	// succ:  reluX_check_exit
reluX_check_exit:


// logmsg_function
// Return size: 0
define logmsg_function
logmsg_function_entry:
	r29 = fp
	// succ:  l0001C34C
l0001C34C:
	v4 = r29 - 8<i32>
	Mem0[v4:word32] = r30
	Mem0[v4 + 4<i32>:word32] = r31
	r30 = v4
	r29 = v4 - 8<i32>
	r3 = 2<32>
	branch r3 >u r5 l0001C370
	// succ:  l0001C35C l0001C370
l0001C35C:
	r5 = Mem0[r2 + 16<i32>:word32]
	r5 = r29 + 0x10<32>
	r3 = 2<32>
	r0 = PC + 0x35<32>
	Mem0[r29 + 1<i32>:byte] = r6
	r6 = r29 + 0x10<32>
	call logv (retsize: 0;)
	// succ:  l0001C364_thunk_errlog_function
l0001C364_thunk_errlog_function:
	call errlog_function (retsize: 0;)
	return
	// succ:  logmsg_function_exit
l0001C370:
	v13 = r30
	r31 = Mem0[v13 + 4<i32>:word32]
	r30 = Mem0[v13:word32]
	r29 = v13 + 8<i32>
	return
	// succ:  logmsg_function_exit
logmsg_function_exit:


// errlog_function
// Return size: 0
define errlog_function
errlog_function_entry:
	r29 = fp
	// succ:  l0001C374
l0001C374:
	v4 = r29 - 8<i32>
	Mem0[v4:word32] = r30
	Mem0[v4 + 4<i32>:word32] = r31
	r30 = v4
	r29 = v4 - 8<i32>
	r4 = r3
	r0 = PC + 0xCBD9<32>
	Mem0[r29 + 1<i32>:byte] = r6
	r6 = r29 + 0x10<32>
	r5 = r29 + 0x10<32>
	r3 = 0<32>
	v13 = r30
	r31 = Mem0[v13 + 4<i32>:word32]
	r30 = Mem0[v13:word32]
	r29 = v13 + 8<i32>
	return
	// succ:  errlog_function_exit
errlog_function_exit:


// softmax_execute
// Return size: 0
define softmax_execute
softmax_execute_entry:
	r29 = fp
	// succ:  l0001C3A0
l0001C3A0:
	v4 = r29 - 8<i32>
	Mem0[v4:word32] = r30
	Mem0[v4 + 4<i32>:word32] = r31
	r30 = v4
	r29 = v4 - 72<i32>
	r3 = Mem0[r0 + 4<i32>:word32]
	r2 = Mem0[r0 + 8<i32>:word32]
	Mem0[r29 + 64<i32>:word64] = r17_r16
	Mem0[r29 + 48<i32>:word64] = r21_r20
	r20 = Mem0[r3:word32]
	r5 = Mem0[r2:word32]
	r2 = r1
	Mem0[r29 + 40<i32>:word64] = r23_r22
	Mem0[r29 + 56<i32>:word64] = r19_r18
	r4 = Mem0[r20 + 24<i32>:word32]
	r7 = Mem0[r5 + 20<i32>:word32]
	Mem0[r29 + 24<i32>:word64] = r27_r26
	Mem0[r29 + 32<i32>:word64] = r25_r24
	r1 = 0x40<32>
	p0 = r4 >u r7
	branch p0 l0001C4F8
	// succ:  l0001C3D0 l0001C4F8
l0001C3D0:
	r2 = Mem0[r20 + 4<i32>:word32]
	r4 = Mem0[r20:word32]
	Mem0[r29 + 8<i32>:word32] = r2
	r3 = Mem0[r20 + 8<i32>:word32]
	r2 = r2 * r4
	r16 = Mem0[r20 + 12<i32>:word32]
	Mem0[r29:word32] = r4
	Mem0[r29 + 12<i32>:word32] = r5
	Mem0[r29 + 4<i32>:word32] = r3
	branch r25 > 0<32> l0001C4C8
	// succ:  l0001C3F8 l0001C4C8
l0001C3F8:
	r26 = Mem0[r20 + 16<i32>:word32]
	r25 = r2 * r3
	r2 = Mem0[r29 + 12<i32>:word64]
	r21 = 0<32>
	r22 = Mem0[r2 + 16<i32>:word32]
	// succ:  l0001C400
l0001C400:
	r27 = Mem0[r26:word32]
	r19_r18 = r23_r16
	p0 = r16 > 0<32>
	r17 = r27
	r0 = r27
	Mem0[r29 + 4<i32>:byte] = r1
	branch p0 l0001C4B4
l0001C420:
	r1 = r17
	call fn00009600 (retsize: 0;)
	// succ:  l0001C424 l0001C4B4 l0001C428
l0001C424:
	r1 = p0
	r1 = r17
	// succ:  l0001C428
l0001C428:
	branch r18 == 0<32> l0001C50C
	// succ:  l0001C43C l0001C50C
l0001C43C:
	r18 = r18 + 0xFFFFFFFF<32>
	r17 = r0
	r2 = r19 + 4<32>
	r24 = r16 + 0<32>
	r19 = 0<32>
	branch p0 l0001C4B4
	// succ:  l0001C44C l0001C4B4
l0001C44C:
	p0 = r0
	r18 = 0<32>
	// succ:  l0001C454
l0001C454:
	r24 = r24 + 0xFFFFFFFF<32>
	call fn00009780 (retsize: 0;)
	r0 = r27 - r17
	p0 = r24 == 0<32>
	r2 = r22 + r19
	Mem0[r2:word32] = r0
	branch p0 l0001C484
	// succ:  l0001C474 l0001C484
l0001C474:
	r18 = r18 + r0
	r19 = r19 + 4<32>
	r2 = r23 + r19
	r27 = Mem0[r2:word32]
	goto l0001C454
	// succ:  l0001C454
l0001C484:
	r1 = r18
	r0 = 0x3F800000<32>
	call fn00009610 (retsize: 0;)
	r2 = Mem0[r29 + 16<i32>:word32]
	r2 = r22 + 0<32>
	branch p0 l0001C4B4
	// succ:  l0001C4A0 l0001C4B4
l0001C4A0:
	p0 = r2
	__loop(0<i32>, 0x0001C4A4<p32>, r16)
	r3 = Mem0[r2:word32]
	r3 = r0 * r3
	Mem0[r2:word32] = r3
	r2 = r2 + 4<32>
	// succ:  l0001C4B4
l0001C4B4:
	r26 = r26 + (r16 << 2<32>)
	r23 = r23 + (r16 << 2<32>)
	branch r21 == r25 l0001C400
	goto l0001C4CC
	// succ:  l0001C4CC l0001C400
l0001C4C8:
	r2 = Mem0[r29:word64]
	r3 = Mem0[r29 + 12<i32>:word64]
	r0 = 0<32>
	goto l0001C4D0
	// succ:  l0001C4D0
l0001C4CC:
	r21 = r21 + 1<32>
	r22 = r22 + (r16 << 2<32>)
	r2 = Mem0[r29:word64]
	r3 = Mem0[r29 + 12<i32>:word64]
	// succ:  l0001C4D0
l0001C4D0:
	r6 = Mem0[r29 + 8<i32>:word64]
	r7 = Mem0[r29 + 4<i32>:word64]
	Mem0[r3:word32] = r2
	Mem0[r3 + 8<i32>:word32] = r7
	Mem0[r3 + 4<i32>:word32] = r6
	Mem0[r3 + 12<i32>:word32] = r16
	r2 = Mem0[r20 + 24<i32>:word32]
	Mem0[r3 + 24<i32>:word32] = r2
	// succ:  l0001C4E4
l0001C4E4:
	r19_r18 = Mem0[r29 + 56<i32>:word64]
	r17_r16 = Mem0[r29 + 64<i32>:word64]
	r23_r22 = Mem0[r29 + 40<i32>:word64]
	r21_r20 = Mem0[r29 + 48<i32>:word64]
	r27_r26 = Mem0[r29 + 24<i32>:word64]
	r25_r24 = Mem0[r29 + 32<i32>:word64]
	v35 = r30
	r31 = Mem0[v35 + 4<i32>:word32]
	r30 = Mem0[v35:word32]
	r29 = v35 + 8<i32>
	return
	// succ:  softmax_execute_exit
l0001C4F8:
	call errlog_function (retsize: 0;)
	r3 = PC + 0xCBD6<32>
	r0 = 0xFFFFFFFF<32>
	goto l0001C4E4
	// succ:  l0001C4E4
l0001C50C:
	r0 = Mem0[r19:word32]
	goto l0001C420
	// succ:  l0001C420
softmax_execute_exit:


// softmax_check
// Return size: 0
define softmax_check
softmax_check_entry:
	r29 = fp
	// succ:  l0001C514
l0001C514:
	v4 = r29 - 8<i32>
	Mem0[v4:word32] = r30
	Mem0[v4 + 4<i32>:word32] = r31
	r30 = v4
	r29 = v4 - 16<i32>
	Mem0[r29 + 496<i32>:word64] = r17_r16
	r4 = PC + 0xCB45<32>
	r17 = r0
	r16 = r1
	r1 = 0x5A<32>
	Mem0[r29:word32] = r17
	r2 = r16
	call logmsg_function (retsize: 0;)
	r1 = 0x5B<32>
	r3 = PC + 0xCB42<32>
	branch r2 == 0<32> l0001C5A8
	// succ:  l0001C548 l0001C5A8
l0001C548:
	r2 = Mem0[r17 + 4<i32>:word32]
	r1 = 0x5C<32>
	r3 = PC + 0x3A<32>
	branch r4 == 0<32> l0001C5A8
	// succ:  l0001C55C l0001C5A8
l0001C55C:
	r4 = Mem0[r17 + 8<i32>:word32]
	r1 = 0x5D<32>
	r3 = PC + 0x33<32>
	branch r2 == 0<32> l0001C5A8
	// succ:  l0001C570 l0001C5A8
l0001C570:
	r2 = Mem0[r2:word32]
	r1 = 0x5E<32>
	r3 = PC + 0x2C<32>
	branch r2 == 0<32> l0001C5A8
	// succ:  l0001C584 l0001C5A8
l0001C584:
	r2 = Mem0[r4:word32]
	r1 = 0x5F<32>
	r3 = PC + 0x26<32>
	branch r2 == 2<32> l0001C5A8
	// succ:  l0001C598 l0001C5A8
l0001C598:
	r2 = Mem0[r17 + 16<i32>:word32]
	r1 = 0x60<32>
	r3 = PC + 0x12<32>
	branch r2 == 2<32> l0001C5B8
	goto l0001C5AC
	// succ:  l0001C5AC l0001C5B8
l0001C5A8:
	r2 = r16
	call errlog_function (retsize: 0;)
	goto l0001C5B0
	// succ:  l0001C5B0
l0001C5AC:
	r2 = Mem0[r17 + 20<i32>:word32]
	r2 = r16
	// succ:  l0001C5B0
l0001C5B0:
	v16 = r30
	r31 = Mem0[v16 + 4<i32>:word32]
	r30 = Mem0[v16:word32]
	r29 = v16 + 8<i32>
	return
	// succ:  softmax_check_exit
l0001C5B8:
	r2 = r16
	r1 = 0x61<32>
	r4 = PC + 0xCAFD<32>
	Mem0[r29:word32] = r17
	call logmsg_function (retsize: 0;)
	r0 = 0<32>
	v17 = r30
	r31 = Mem0[v17 + 4<i32>:word32]
	r30 = Mem0[v17:word32]
	r29 = v17 + 8<i32>
	return
	// succ:  softmax_check_exit
softmax_check_exit:


// logmsg_function
// Return size: 0
define logmsg_function
logmsg_function_entry:
	r29 = fp
	// succ:  l0001C5D8
l0001C5D8:
	v4 = r29 - 8<i32>
	Mem0[v4:word32] = r30
	Mem0[v4 + 4<i32>:word32] = r31
	r30 = v4
	r29 = v4 - 8<i32>
	r3 = 2<32>
	branch r3 >u r5 l0001C5FC
	// succ:  l0001C5E8 l0001C5FC
l0001C5E8:
	r5 = Mem0[r2 + 16<i32>:word32]
	r5 = r29 + 0x10<32>
	r3 = 2<32>
	r0 = PC + 0x16<32>
	Mem0[r29 + 1<i32>:byte] = r6
	r6 = r29 + 0x10<32>
	call logv (retsize: 0;)
	// succ:  l0001C5F0_thunk_errlog_function
l0001C5F0_thunk_errlog_function:
	call errlog_function (retsize: 0;)
	return
	// succ:  logmsg_function_exit
l0001C5FC:
	v13 = r30
	r31 = Mem0[v13 + 4<i32>:word32]
	r30 = Mem0[v13:word32]
	r29 = v13 + 8<i32>
	return
	// succ:  logmsg_function_exit
logmsg_function_exit:


// errlog_function
// Return size: 0
define errlog_function
errlog_function_entry:
	r29 = fp
	// succ:  l0001C600
l0001C600:
	v4 = r29 - 8<i32>
	Mem0[v4:word32] = r30
	Mem0[v4 + 4<i32>:word32] = r31
	r30 = v4
	r29 = v4 - 8<i32>
	r4 = r3
	r0 = PC + 0xCA3A<32>
	Mem0[r29 + 1<i32>:byte] = r6
	r6 = r29 + 0x10<32>
	r5 = r29 + 0x10<32>
	r3 = 0<32>
	v13 = r30
	r31 = Mem0[v13 + 4<i32>:word32]
	r30 = Mem0[v13:word32]
	r29 = v13 + 8<i32>
	return
	// succ:  errlog_function_exit
errlog_function_exit:


// lrn_8_execute_ref
// Return size: 0
define lrn_8_execute_ref
lrn_8_execute_ref_entry:
	r29 = fp
	// succ:  l0001C630
l0001C630:
	v4 = r29 - 8<i32>
	Mem0[v4:word32] = r30
	Mem0[v4 + 4<i32>:word32] = r31
	r30 = v4
	r29 = v4 - 136<i32>
	r2 = r1
	r5 = Mem0[r0 + 4<i32>:word32]
	r4 = Mem0[r0 + 8<i32>:word32]
	Mem0[r29 + 128<i32>:word64] = r17_r16
	Mem0[r29 + 120<i32>:word64] = r19_r18
	r18 = Mem0[r5:word32]
	r3 = Mem0[r4:word32]
	Mem0[r29 + 104<i32>:word64] = r23_r22
	Mem0[r29 + 112<i32>:word64] = r21_r20
	r7 = Mem0[r18 + 24<i32>:word32]
	r6 = Mem0[r3 + 20<i32>:word32]
	Mem0[r29 + 88<i32>:word64] = r27_r26
	Mem0[r29 + 96<i32>:word64] = r25_r24
	p0 = r7 >u r6
	r13 = Mem0[r5 + 8<i32>:word32]
	r15 = Mem0[r5 + 4<i32>:word32]
	branch p0 l0001C678
	// succ:  l0001C660 l0001C678
l0001C660:
	Mem0[r29 + 4<i32>:word32] = r7
	r1 = 0xA1<32>
	r3 = PC + 0xCAE2<32>
	Mem0[r29:word32] = r6
	goto l0001C770
	// succ:  l0001C770
l0001C678:
	r7 = Mem0[r5 + 20<i32>:word32]
	r6 = Mem0[r5 + 16<i32>:word32]
	r7 = Mem0[r7 + 16<i32>:word32]
	r8 = Mem0[r5 + 24<i32>:word32]
	r14 = Mem0[r4 + 8<i32>:word32]
	r6 = Mem0[r6 + 16<i32>:word32]
	r4 = Mem0[r8 + 16<i32>:word32]
	r28 = Mem0[r4 + 4<i32>:word32]
	r12 = Mem0[r13 + 16<i32>:word32]
	r8 = Mem0[r15 + 16<i32>:word32]
	r1 = Mem0[r4:word32]
	r25 = Mem0[r5 + 12<i32>:word32]
	r5 = Mem0[r18 + 4<i32>:word32]
	r27 = Mem0[r8:word32]
	r21 = r25
	r0 = Mem0[r18:word32]
	r9 = Mem0[r18:word32]
	r19 = Mem0[r18 + 12<i32>:word32]
	r17 = Mem0[r18 + 4<i32>:word32]
	r4 = Mem0[r12:word32]
	r16 = Mem0[r18 + 8<i32>:word32]
	r6 = Mem0[r6:word32]
	r7 = Mem0[r7:word32]
	Mem0[r3 + 4<i32>:word32] = r5
	Mem0[r3:word32] = r9
	r8 = Mem0[r3 + 16<i32>:word32]
	r5 = Mem0[r18 + 8<i32>:word32]
	Mem0[r3 + 8<i32>:word32] = r5
	r5 = Mem0[r18 + 12<i32>:word32]
	Mem0[r3 + 12<i32>:word32] = r5
	r5 = Mem0[r18 + 24<i32>:word32]
	Mem0[r3 + 24<i32>:word32] = r5
	r3 = Mem0[r25:word32]
	Mem0[r29 + 44<i32>:word32] = r8
	Mem0[r29 + 60<i32>:word32] = r6
	r1 = 0xA6<32>
	branch p0 l0001C768
	// succ:  l0001C700 l0001C768
l0001C700:
	p0 = r3 == 2<32>
	Mem0[r29 + 64<i32>:word32] = r7
	Mem0[r29 + 44<i32>:word32] = r8
	p0 = r0 > 0<32>
	Mem0[r29 + 8<i32>:word32] = r28
	Mem0[r29 + 68<i32>:word32] = r1
	r1 = 0x437F0000<32>
	Mem0[r29 + 16<i32>:word32] = r14
	Mem0[r29 + 12<i32>:word32] = r15
	Mem0[r29 + 24<i32>:word32] = r0
	Mem0[r29 + 20<i32>:word32] = r13
	branch p0 l0001C9A0
	// succ:  l0001C730 l0001C9A0
l0001C730:
	r0 = r4 - r27
	Mem0[r29 + 40<i32>:word32] = r0
	call fn00009610 (retsize: 0;)
	r22 = r0
	r7 = 0<32>
	r2 = 0<32>
	r20 = r16 * r19
	Mem0[r29 + 28<i32>:word32] = r7
	Mem0[r29 + 36<i32>:word32] = r2
	// succ:  l0001C74C
l0001C74C:
	branch p0 l0001C988
	// succ:  l0001C750 l0001C988
l0001C750:
	p0 = r25 > 0<32>
	r2 = Mem0[r29 + 28<i32>:word64]
	r3 = 0<32>
	r2 = r2 * r17
	Mem0[r29 + 32<i32>:word32] = r2
	// succ:  l0001C75C
l0001C75C:
	r3 = r3 + 1<32>
	goto l0001C984
	// succ:  l0001C984
l0001C768:
	r3 = PC + 0xC9F4<32>
	// succ:  l0001C770
l0001C770:
	call errlog_function (retsize: 0;)
	r0 = 0xFFFFFFFF<32>
	goto l0001C9C4
	// succ:  l0001C9C4
l0001C984:
	branch p0 l0001C75C
	// succ:  l0001C988 l0001C75C
l0001C988:
	p0 = r3 == -1<i32>
	r7 = Mem0[r29 + 24<i32>:word64]
	r3 = Mem0[r29 + 28<i32>:word64]
	r2 = Mem0[r29 + 36<i32>:word64]
	r3 = r3
	Mem0[r29 + 28<i32>:word32] = r3
	r2 = r2 + r17
	p0 = r3 == r7
	Mem0[r29 + 36<i32>:word32] = r2
	branch p0 l0001C74C
	// succ:  l0001C9A0 l0001C74C
l0001C9A0:
	r16 = Mem0[r29 + 20<i32>:word64]
	r1 = Mem0[r29 + 12<i32>:word64]
	r0 = Mem0[r29 + 8<i32>:word32]
	r18 = r16 + 0x10<32>
	r2 = r1 + 0x10<32>
	call lrn_8_execute_ref.extracted_region (retsize: 0;)
	r0 = Mem0[r29 + 16<i32>:word64]
	r2 = r18
	r1 = r16
	call lrn_8_execute_ref.extracted_region (retsize: 0;)
	r0 = 0<32>
	// succ:  l0001C9C4
l0001C9C4:
	r19_r18 = Mem0[r29 + 120<i32>:word64]
	r17_r16 = Mem0[r29 + 128<i32>:word64]
	r23_r22 = Mem0[r29 + 104<i32>:word64]
	r21_r20 = Mem0[r29 + 112<i32>:word64]
	r27_r26 = Mem0[r29 + 88<i32>:word64]
	r25_r24 = Mem0[r29 + 96<i32>:word64]
	v39 = r30
	r31 = Mem0[v39 + 4<i32>:word32]
	r30 = Mem0[v39:word32]
	r29 = v39 + 8<i32>
	return
	// succ:  lrn_8_execute_ref_exit
lrn_8_execute_ref_exit:


// lrn_check
// Return size: 0
define lrn_check
lrn_check_entry:
	r29 = fp
	// succ:  l0001C9D8
l0001C9D8:
	v4 = r29 - 8<i32>
	Mem0[v4:word32] = r30
	Mem0[v4 + 4<i32>:word32] = r31
	r30 = v4
	r29 = v4 - 16<i32>
	Mem0[r29 + 496<i32>:word64] = r17_r16
	r4 = PC + 0xC71D<32>
	r17 = r0
	r16 = r1
	r1 = 0xCB<32>
	Mem0[r29:word32] = r17
	r2 = r16
	call logmsg_function (retsize: 0;)
	branch r2 == 0xE<32> l0001CA18
	// succ:  l0001CA04 l0001CA18
l0001CA04:
	r2 = Mem0[r17 + 16<i32>:word32]
	r1 = 0xCC<32>
	r3 = PC + 0xC<32>
	r2 = r16
	call errlog_function (retsize: 0;)
	// succ:  l0001CA0C
l0001CA0C:
	v16 = r30
	r31 = Mem0[v16 + 4<i32>:word32]
	r30 = Mem0[v16:word32]
	r29 = v16 + 8<i32>
	return
	// succ:  lrn_check_exit
l0001CA18:
	branch r2 == 6<32> l0001CA30
	// succ:  l0001CA28 l0001CA30
l0001CA28:
	r2 = Mem0[r17 + 20<i32>:word32]
	r1 = 0xCD<32>
	goto l0001CA0C
	// succ:  l0001CA0C
l0001CA30:
	r2 = r16
	r1 = 0xCE<32>
	r4 = PC + 0xC700<32>
	Mem0[r29:word32] = r17
	call logmsg_function (retsize: 0;)
	r0 = 0<32>
	v17 = r30
	r31 = Mem0[v17 + 4<i32>:word32]
	r30 = Mem0[v17:word32]
	r29 = v17 + 8<i32>
	return
	// succ:  lrn_check_exit
lrn_check_exit:


// logmsg_function
// Return size: 0
define logmsg_function
logmsg_function_entry:
	r29 = fp
	// succ:  l0001CA50
l0001CA50:
	v4 = r29 - 8<i32>
	Mem0[v4:word32] = r30
	Mem0[v4 + 4<i32>:word32] = r31
	r30 = v4
	r29 = v4 - 8<i32>
	r3 = 2<32>
	branch r3 >u r5 l0001CA74
	// succ:  l0001CA60 l0001CA74
l0001CA60:
	r5 = Mem0[r2 + 16<i32>:word32]
	r5 = r29 + 0x10<32>
	r3 = 2<32>
	r0 = PC + 0<32>
	Mem0[r29 + 1<i32>:byte] = r6
	r6 = r29 + 0x10<32>
	call logv (retsize: 0;)
	// succ:  l0001CA68_thunk_errlog_function
l0001CA68_thunk_errlog_function:
	call errlog_function (retsize: 0;)
	return
	// succ:  logmsg_function_exit
l0001CA74:
	v13 = r30
	r31 = Mem0[v13 + 4<i32>:word32]
	r30 = Mem0[v13:word32]
	r29 = v13 + 8<i32>
	return
	// succ:  logmsg_function_exit
logmsg_function_exit:


// errlog_function
// Return size: 0
define errlog_function
errlog_function_entry:
	r29 = fp
	// succ:  l0001CA78
l0001CA78:
	v4 = r29 - 8<i32>
	Mem0[v4:word32] = r30
	Mem0[v4 + 4<i32>:word32] = r31
	r30 = v4
	r29 = v4 - 8<i32>
	r4 = r3
	r0 = PC + 0xC664<32>
	Mem0[r29 + 1<i32>:byte] = r6
	r6 = r29 + 0x10<32>
	r5 = r29 + 0x10<32>
	r3 = 0<32>
	v13 = r30
	r31 = Mem0[v13 + 4<i32>:word32]
	r30 = Mem0[v13:word32]
	r29 = v13 + 8<i32>
	return
	// succ:  errlog_function_exit
errlog_function_exit:


// lrn_8_execute_ref.extracted_region
// Return size: 0
define lrn_8_execute_ref.extracted_region
lrn_8_execute_ref.extracted_region_entry:
	r29 = fp
	// succ:  l0001CA9C
l0001CA9C:
	v4 = r29 - 8<i32>
	Mem0[v4:word32] = r30
	Mem0[v4 + 4<i32>:word32] = r31
	r30 = v4
	r29 = v4 - 0<i32>
	r4 = Mem0[r1 + 4<i32>:word32]
	r3 = Mem0[r1:word32]
	Mem0[r0:word32] = r3
	Mem0[r0 + 4<i32>:word32] = r4
	r6 = Mem0[r1 + 8<i32>:word32]
	Mem0[r0 + 8<i32>:word32] = r6
	r7 = Mem0[r1 + 12<i32>:word32]
	Mem0[r0 + 12<i32>:word32] = r7
	r3 = Mem0[r1 + 24<i32>:word32]
	branch r3 >u r4 l0001CAD4
	// succ:  l0001CAC8 l0001CAD4
l0001CAC8:
	r4 = Mem0[r0 + 20<i32>:word32]
	r1 = Mem0[r2:word32]
	r3 = Mem0[r1 + 24<i32>:word32]
	r2 = r3
	call fn00009560 (retsize: 0;)
	// succ:  l0001CAD4
l0001CAD4:
	v14 = r30
	r31 = Mem0[v14 + 4<i32>:word32]
	r30 = Mem0[v14:word32]
	r29 = v14 + 8<i32>
	return
	// succ:  lrn_8_execute_ref.extracted_region_exit
lrn_8_execute_ref.extracted_region_exit:


// lrn_f_execute
// Return size: 0
define lrn_f_execute
lrn_f_execute_entry:
	r29 = fp
	// succ:  l0001CAE0
l0001CAE0:
	v4 = r29 - 8<i32>
	Mem0[v4:word32] = r30
	Mem0[v4 + 4<i32>:word32] = r31
	r30 = v4
	r29 = v4 - 224<i32>
	r3 = Mem0[r0 + 4<i32>:word32]
	r2 = Mem0[r0 + 8<i32>:word32]
	Mem0[r29 + 216<i32>:word64] = r17_r16
	Mem0[r29 + 192<i32>:word64] = r23_r22
	r16 = r1
	r2 = Mem0[r2:word32]
	r23 = Mem0[r3:word32]
	Mem0[r29 + 200<i32>:word64] = r21_r20
	Mem0[r29 + 208<i32>:word64] = r19_r18
	r5 = Mem0[r23 + 24<i32>:word32]
	r4 = Mem0[r2 + 20<i32>:word32]
	Mem0[r29 + 176<i32>:word64] = r27_r26
	Mem0[r29 + 184<i32>:word64] = r25_r24
	r2 = r16 + 0<32>
	p0 = r5 >u r4
	Mem0[r29:word32] = r4
	Mem0[r29 + 52<i32>:word32] = r23
	branch p0 l0001CB2C
	// succ:  l0001CB18 l0001CB2C
l0001CB18:
	Mem0[r29 + 4<i32>:word32] = r5
	r1 = 0xA3<32>
	r3 = PC + 0xC6BD<32>
	goto l0001CC20
	// succ:  l0001CC20
l0001CB2C:
	r5 = Mem0[r3 + 12<i32>:word32]
	r4 = Mem0[r3 + 8<i32>:word32]
	r12 = Mem0[r3 + 4<i32>:word32]
	r6 = Mem0[r3 + 16<i32>:word32]
	r4 = Mem0[r4 + 16<i32>:word32]
	r5 = Mem0[r5 + 16<i32>:word32]
	r25 = Mem0[r23 + 4<i32>:word32]
	r3 = Mem0[r6 + 16<i32>:word32]
	r6 = Mem0[r4:word32]
	r5 = Mem0[r5:word32]
	r8 = Mem0[r23:word32]
	r7 = Mem0[r23 + 4<i32>:word32]
	r22 = Mem0[r23 + 12<i32>:word32]
	r24 = Mem0[r23 + 8<i32>:word32]
	r3 = Mem0[r3:word32]
	r9 = Mem0[r23:word32]
	Mem0[r2 + 4<i32>:word32] = r7
	Mem0[r2:word32] = r8
	r4 = Mem0[r23 + 8<i32>:word32]
	Mem0[r2 + 8<i32>:word32] = r4
	r1 = Mem0[r23 + 12<i32>:word32]
	Mem0[r2 + 12<i32>:word32] = r1
	r4 = Mem0[r23 + 24<i32>:word32]
	Mem0[r2 + 24<i32>:word32] = r4
	r7 = Mem0[r2 + 16<i32>:word32]
	Mem0[r29 + 112<i32>:word32] = r12
	r2 = Mem0[r12:word32]
	Mem0[r29 + 108<i32>:word32] = r5
	Mem0[r29 + 156<i32>:word32] = r25
	Mem0[r29 + 104<i32>:word32] = r6
	p0 = r2 == 1<32>
	r2 = r9 + 0<32>
	r0 = 0<32>
	Mem0[r29 + 32<i32>:word32] = r2
	Mem0[r29 + 44<i32>:word32] = r7
	branch p0 l0001CC10
	// succ:  l0001CBA8 l0001CC10
l0001CBA8:
	p0 = r9 > 0<32>
	branch p0 l0001CF94
	// succ:  l0001CBB0 l0001CF94
l0001CBB0:
	r3 = __invert_bit<word32,word32>(r3, 0x1E<32>)
	r1_r0 = CONVERT(r6, real32, real64)
	Mem0[r29 + 100<i32>:word32] = r3
	r4 = r24 * r22
	Mem0[r29 + 152<i32>:word32] = r4
	Mem0[r29 + 88<i32>:word64] = r1_r0
	r4 = 0<32>
	r1_r0 = CONVERT(r5, real32, real64)
	Mem0[r29 + 40<i32>:word32] = r4
	r4 = 0<32>
	Mem0[r29 + 116<i32>:word32] = r4
	Mem0[r29 + 80<i32>:word64] = r1_r0
	r1_r0 = CONVERT(r3, real32, real64)
	Mem0[r29 + 72<i32>:word64] = r1_r0
	// succ:  l0001CBE0
l0001CBE0:
	r3 = Mem0[r29 + 116<i32>:word32]
	p0 = r25 > 0<32>
	r9 = 0<32>
	branch p0 l0001CF7C
	// succ:  l0001CBF0 l0001CF7C
l0001CBF0:
	r3 = r3 * r25
	Mem0[r29 + 36<i32>:word32] = r3
	// succ:  l0001CBF8
l0001CBF8:
	Mem0[r29 + 60<i32>:word32] = r9
	r3 = r9 + 1<32>
	p0 = r24 > 0<32>
	branch p0 l0001CC2C
	// succ:  l0001CC08 l0001CC2C
l0001CC08:
	r9 = r9 + 1<32>
	goto l0001CF74
	// succ:  l0001CF74
l0001CC10:
	r2 = r16
	r1 = 0xA8<32>
	r3 = PC + 0xC5DF<32>
	// succ:  l0001CC20
l0001CC20:
	call errlog_function (retsize: 0;)
	r0 = 0xFFFFFFFF<32>
	goto l0001CF94
	// succ:  l0001CF94
l0001CC2C:
	r6 = Mem0[r29 + 40<i32>:word64]
	r2 = Mem0[r29 + 36<i32>:word64]
	r19 = 0<32>
	Mem0[r29 + 120<i32>:word32] = r3
	r5 = r6 + r9
	r2 = r9 + r2
	Mem0[r29 + 56<i32>:word32] = r5
	r2 = r2 * r24
	Mem0[r29 + 48<i32>:word32] = r2
	// succ:  l0001CC4C
l0001CC4C:
	Mem0[r29 + 128<i32>:word32] = r19
	branch p0 l0001CC5C
	// succ:  l0001CC54 l0001CC5C
l0001CC54:
	p0 = r14 > 0<32>
	r19 = r19 + 1<32>
	goto l0001CF64
	// succ:  l0001CF64
l0001CC5C:
	Mem0[r29 + 16<i32>:byte] = r3
	r2 = Mem0[r29 + 48<i32>:word32]
	r3 = r19 + 1<32>
	r3 = 0<32>
	Mem0[r29 + 31<i32>:byte] = r2
	r2 = r2 * r22
	// succ:  l0001CC7C
l0001CC7C:
	Mem0[r29 + 136<i32>:word32] = r3
	r2 = Mem0[r12 + 12<i32>:word32]
	r27 = r23
	r1 = 0x69<32>
	r5 = Mem0[r12 + 4<i32>:word32]
	r6 = r2 + 0xFFFFFFFF<32>
	r4 = PC + 0xC58F<32>
	r3 = Mem0[r23 + 16<i32>:word32]
	r7 = Mem0[r12 + 8<i32>:word32]
	r6 = r6 + (r6 >>u 0x1F<32>)
	Mem0[r29:word32] = r5
	Mem0[r29 + 8<i32>:word32] = r2
	r8 = r7 + 0xFFFFFFFF<32>
	Mem0[r29 + 4<i32>:word32] = r7
	r17 = r5
	r8 = r8 + (r8 >>u 0x1F<32>)
	Mem0[r29 + 140<i32>:word32] = r3
	Mem0[r29 + 132<i32>:word32] = r20
	r18 = r8 >> 1<32>
	r17 = r17 + (r17 >>u 0x1F<32>)
	Mem0[r29 + 16<i32>:word32] = r18
	r21 = r17 >> 1<32>
	r20 = r6 >> 1<32>
	Mem0[r29 + 12<i32>:word32] = r21
	Mem0[r29 + 20<i32>:word32] = r20
	r23 = r9
	call logmsg_function (retsize: 0;)
	r2 = Mem0[r29 + 120<i32>:word64]
	r4 = r22
	r5 = r23
	r7_r6 = r19_r20
	r26 = r5
	r26 = r26 - (r17 >> 1<32>)
	r2 = r2 + (r17 >> 1<32>)
	r27 = Mem0[r29 + 136<i32>:word32]
	r19 = 0<32>
	r17 = Mem0[r29 + 104<i32>:word64]
	r2 = Mem0[r29 + 108<i32>:word64]
	r26 = r5
	r21 = r27 + 1<32>
	r20 = Mem0[r29 + 132<i32>:word32]
	// succ:  l0001CE98
l0001CE98:
	r1_r0 = Mem0[r29 + 88<i32>:word64]
	r5_r4 = Mem0[r29 + 80<i32>:word64]
	r7_r6 = CONVERT(r19, real32, real64)
	r17 = r17 + r2 * r19
	Mem0[r29 + 16<i32>:word64] = r7_r6
	Mem0[r29 + 8<i32>:word64] = r5_r4
	r19_r18 = CONVERT(r17, real32, real64)
	r4 = PC + 0xC3B5<32>
	Mem0[r29 + 24<i32>:word64] = r19_r18
	Mem0[r29:word64] = r1_r0
	r1 = 0x7C<32>
	call logmsg_function (retsize: 0;)
	r0 = r17
	call fn00009790 (retsize: 0;)
	r2 = Mem0[r29 + 100<i32>:word32]
	call fn00009780 (retsize: 0;)
	r0 = r0 * r2
	r1 = 0x7F<32>
	r17 = r0
	r4 = PC + 0xC396<32>
	r7_r6 = CONVERT(r17, real32, real64)
	Mem0[r29:word64] = r19_r18
	Mem0[r29 + 16<i32>:word64] = r7_r6
	r7_r6 = Mem0[r29 + 72<i32>:word64]
	Mem0[r29 + 8<i32>:word64] = r7_r6
	call logmsg_function (retsize: 0;)
	r2 = Mem0[r29 + 124<i32>:word32]
	r1 = 0xBD<32>
	r4 = PC + 0xC2FB<32>
	r5 = Mem0[r29 + 116<i32>:word32]
	r3 = Mem0[r29 + 140<i32>:word32]
	r19 = Mem0[r29 + 128<i32>:word32]
	r2 = r2 + r27
	r2 = r3 + (r2 << 2<32>)
	Mem0[r29 + 12<i32>:word32] = r27
	r0 = Mem0[r2:word32]
	Mem0[r29:word32] = r5
	Mem0[r29 + 8<i32>:word32] = r19
	Mem0[r29 + 4<i32>:word32] = r26
	r17 = r17 * r0
	r7_r6 = CONVERT(r17, real32, real64)
	Mem0[r29 + 16<i32>:word64] = r7_r6
	call logmsg_function (retsize: 0;)
	Mem0[r20:word32] = r17
	r3 = r21
	r9 = r26
	r20 = r20 + 4<32>
	r12 = Mem0[r29 + 112<i32>:word32]
	branch p0 l0001CC7C
	// succ:  l0001CF60 l0001CC7C
l0001CF60:
	p0 = r13 == -1<i32>
	r7 = Mem0[r29 + 44<i32>:word64]
	r19 = Mem0[r29 + 64<i32>:word64]
	// succ:  l0001CF64
l0001CF64:
	r2 = Mem0[r29 + 32<i32>:word32]
	r9 = Mem0[r29 + 120<i32>:word32]
	p0 = r19 == r24
	branch p0 l0001CC4C
	// succ:  l0001CF74 l0001CC4C
l0001CF74:
	p0 = r9 == r25
	branch p0 l0001CBF8
	// succ:  l0001CF7C l0001CBF8
l0001CF7C:
	r3 = Mem0[r29 + 40<i32>:word64]
	r4 = Mem0[r29 + 116<i32>:word64]
	r3 = r3 + r25
	r4 = r4 + 1<32>
	Mem0[r29 + 40<i32>:word32] = r3
	Mem0[r29 + 116<i32>:word32] = r4
	branch p0 l0001CBE0
	// succ:  l0001CF90 l0001CBE0
l0001CF90:
	p0 = r4 == -1<i32>
	r0 = 0<32>
	// succ:  l0001CF94
l0001CF94:
	r19_r18 = Mem0[r29 + 208<i32>:word64]
	r17_r16 = Mem0[r29 + 216<i32>:word64]
	r23_r22 = Mem0[r29 + 192<i32>:word64]
	r21_r20 = Mem0[r29 + 200<i32>:word64]
	r27_r26 = Mem0[r29 + 176<i32>:word64]
	r25_r24 = Mem0[r29 + 184<i32>:word64]
	v44 = r30
	r31 = Mem0[v44 + 4<i32>:word32]
	r30 = Mem0[v44:word32]
	r29 = v44 + 8<i32>
	return
	// succ:  lrn_f_execute_exit
lrn_f_execute_exit:


// lrn_check
// Return size: 0
define lrn_check
lrn_check_entry:
	r29 = fp
	// succ:  l0001CFA8
l0001CFA8:
	v4 = r29 - 8<i32>
	Mem0[v4:word32] = r30
	Mem0[v4 + 4<i32>:word32] = r31
	r30 = v4
	r29 = v4 - 16<i32>
	Mem0[r29 + 496<i32>:word64] = r17_r16
	r4 = PC + 0xC1DF<32>
	r17 = r0
	r16 = r1
	r1 = 0xCB<32>
	call logmsg_function (retsize: 0;)
	Mem0[r29:word32] = r17
	branch r2 == 0xA<32> l0001CFEC
	// succ:  l0001CFD8 l0001CFEC
l0001CFD8:
	r2 = Mem0[r17 + 16<i32>:word32]
	r1 = 0xCC<32>
	r3 = PC + 8<32>
	r2 = r16
	call errlog_function (retsize: 0;)
	// succ:  l0001CFE0
l0001CFE0:
	v16 = r30
	r31 = Mem0[v16 + 4<i32>:word32]
	r30 = Mem0[v16:word32]
	r29 = v16 + 8<i32>
	return
	// succ:  lrn_check_exit
l0001CFEC:
	branch r2 == 2<32> l0001D008
	// succ:  l0001CFFC l0001D008
l0001CFFC:
	r2 = Mem0[r17 + 20<i32>:word32]
	r1 = 0xCE<32>
	r1 = 0xCD<32>
	goto l0001CFE0
	// succ:  l0001CFE0
l0001D008:
	r4 = PC + 0xC1B8<32>
	Mem0[r29:word32] = r17
	call logmsg_function (retsize: 0;)
	r0 = 0<32>
	v17 = r30
	r31 = Mem0[v17 + 4<i32>:word32]
	r30 = Mem0[v17:word32]
	r29 = v17 + 8<i32>
	return
	// succ:  lrn_check_exit
lrn_check_exit:


// logmsg_function
// Return size: 0
define logmsg_function
logmsg_function_entry:
	r29 = fp
	// succ:  l0001D024
l0001D024:
	v4 = r29 - 8<i32>
	Mem0[v4:word32] = r30
	Mem0[v4 + 4<i32>:word32] = r31
	r30 = v4
	r29 = v4 - 8<i32>
	branch r3 >u r5 l0001D044
	// succ:  l0001D034 l0001D044
l0001D034:
	r5 = Mem0[r2 + 16<i32>:word32]
	r6 = r29 + 0x10<32>
	r5 = r29 + 0x10<32>
	r0 = PC + 0x3C<32>
	Mem0[r29 + 4<i32>:word32] = r6
	call logv (retsize: 0;)
	// succ:  l0001D044
l0001D044:
	v13 = r30
	r31 = Mem0[v13 + 4<i32>:word32]
	r30 = Mem0[v13:word32]
	r29 = v13 + 8<i32>
	return
	// succ:  logmsg_function_exit
logmsg_function_exit:


// errlog_function
// Return size: 0
define errlog_function
errlog_function_entry:
	r29 = fp
	// succ:  l0001D048
l0001D048:
	v4 = r29 - 8<i32>
	Mem0[v4:word32] = r30
	Mem0[v4 + 4<i32>:word32] = r31
	r30 = v4
	r29 = v4 - 8<i32>
	r4 = r3
	r0 = PC + 0xC124<32>
	Mem0[r29 + 1<i32>:byte] = r6
	r6 = r29 + 0x10<32>
	r5 = r29 + 0x10<32>
	r3 = 0<32>
	v13 = r30
	r31 = Mem0[v13 + 4<i32>:word32]
	r30 = Mem0[v13:word32]
	r29 = v13 + 8<i32>
	return
	// succ:  errlog_function_exit
errlog_function_exit:


// nn_variable_read
// Return size: 0
define nn_variable_read
nn_variable_read_entry:
	r29 = fp
	// succ:  l0001D070
l0001D070:
	v4 = r29 - 8<i32>
	Mem0[v4:word32] = r30
	Mem0[v4 + 4<i32>:word32] = r31
	r30 = v4
	r29 = v4 - 0<i32>
	r6 = Mem0[r1 + 28<i32>:word32]
	r6 = Mem0[r1 + 8<i32>:word32]
	r7 = Mem0[r29 + 16<i32>:word32]
	p0 = r6 == 0x3E<32>
	branch p0 l0001D0A0
	// succ:  l0001D088 l0001D0A0
l0001D088:
	r1 = 0x7D<32>
	r3 = PC + 0xC217<32>
	r2 = r0
	call errlog_function (retsize: 0;)
	// succ:  l0001D098
l0001D098:
	v15 = r30
	r31 = Mem0[v15 + 4<i32>:word32]
	r30 = Mem0[v15:word32]
	r29 = v15 + 8<i32>
	return
	// succ:  nn_variable_read_exit
l0001D0A0:
	r2 = Mem0[r14 + r2 * 4<32>:word32]
	branch r6 >u r7 l0001D0BC
	// succ:  l0001D0B0 l0001D0BC
l0001D0B0:
	r6 = Mem0[r2 + 24<i32>:word32]
	r1 = 0x7E<32>
	goto l0001D098
	// succ:  l0001D098
l0001D0BC:
	r6 = Mem0[r2:word32]
	Mem0[r3:word32] = r6
	Mem0[r4:byte] = r6
	r6 = Mem0[r2 + 4<i32>:word32]
	Mem0[r5:word32] = r4
	r3 = Mem0[r29 + 20<i32>:word64]
	Mem0[r7:byte] = r1
	r1 = Mem0[r2 + 12<i32>:word32]
	Mem0[r3:byte] = r4
	r2 = Mem0[r2 + 24<i32>:word32]
	call fn00009560 (retsize: 0;)
	v19 = r30
	r31 = Mem0[v19 + 4<i32>:word32]
	r30 = Mem0[v19:word32]
	r29 = v19 + 8<i32>
	return
	// succ:  nn_variable_read_exit
nn_variable_read_exit:


// errlog_function
// Return size: 0
define errlog_function
errlog_function_entry:
	r29 = fp
	// succ:  l0001D0F4
l0001D0F4:
	v4 = r29 - 8<i32>
	Mem0[v4:word32] = r30
	Mem0[v4 + 4<i32>:word32] = r31
	r30 = v4
	r29 = v4 - 8<i32>
	r4 = r3
	r0 = PC + 0xC18D<32>
	Mem0[r29 + 1<i32>:byte] = r6
	r6 = r29 + 0x10<32>
	r5 = r29 + 0x10<32>
	r3 = 0<32>
	v13 = r30
	r31 = Mem0[v13 + 4<i32>:word32]
	r30 = Mem0[v13:word32]
	r29 = v13 + 8<i32>
	return
	// succ:  errlog_function_exit
errlog_function_exit:


// nn_variable_write
// Return size: 0
define nn_variable_write
nn_variable_write_entry:
	r29 = fp
	// succ:  l0001D118
l0001D118:
	v4 = r29 - 8<i32>
	Mem0[v4:word32] = r30
	Mem0[v4 + 4<i32>:word32] = r31
	r30 = v4
	r29 = v4 - 0<i32>
	r6 = r2
	r7 = Mem0[r1 + 28<i32>:word32]
	r7 = Mem0[r1 + 8<i32>:word32]
	r2 = Mem0[r29 + 16<i32>:word32]
	p0 = r7 == 0x3E<32>
	branch p0 l0001D148
	// succ:  l0001D130 l0001D148
l0001D130:
	r1 = 0x94<32>
	r3 = PC + 0xC16F<32>
	r2 = r0
	call errlog_function (retsize: 0;)
	// succ:  l0001D140
l0001D140:
	v15 = r30
	r31 = Mem0[v15 + 4<i32>:word32]
	r30 = Mem0[v15:word32]
	r29 = v15 + 8<i32>
	return
	// succ:  nn_variable_write_exit
l0001D148:
	r6 = Mem0[r30 + r6 * 4<32>:word32]
	branch r2 >u r7 l0001D164
	// succ:  l0001D158 l0001D164
l0001D158:
	r7 = Mem0[r6 + 20<i32>:word32]
	r1 = 0x95<32>
	goto l0001D140
	// succ:  l0001D140
l0001D164:
	r1 = Mem0[r29 + 12<i32>:word64]
	r0 = Mem0[r6 + 16<i32>:word32]
	Mem0[r6:word32] = r3
	Mem0[r6 + 24<i32>:word32] = r2
	r3 = Mem0[r29 + 8<i32>:word32]
	Mem0[r6 + 4<i32>:word32] = r4
	Mem0[r6 + 8<i32>:word32] = r5
	Mem0[r6 + 12<i32>:word32] = r3
	call fn00009560 (retsize: 0;)
	v18 = r30
	r31 = Mem0[v18 + 4<i32>:word32]
	r30 = Mem0[v18:word32]
	r29 = v18 + 8<i32>
	return
	// succ:  nn_variable_write_exit
nn_variable_write_exit:


// assign_execute
// Return size: 0
define assign_execute
assign_execute_entry:
	r29 = fp
	// succ:  l0001D180
l0001D180:
	v4 = r29 - 8<i32>
	Mem0[v4:word32] = r30
	Mem0[v4 + 4<i32>:word32] = r31
	r30 = v4
	r29 = v4 - 32<i32>
	Mem0[r29 + 496<i32>:word64] = r17_r16
	r4 = PC + 0xC1DC<32>
	r1 = 0xA3<32>
	r17_r16 = r0_r1
	Mem0[r29 + 16<i32>:word64] = r19_r18
	r2 = Mem0[r17 + 16<i32>:word32]
	Mem0[r29 + 4<i32>:word32] = r2
	r2 = r16
	Mem0[r29:word32] = r17
	Mem0[r29 + 8<i32>:word64] = r21_r20
	call logmsg_function (retsize: 0;)
	branch r2 == 0<32> l0001D1F8
	// succ:  l0001D1B0 l0001D1F8
l0001D1B0:
	r2 = Mem0[r17 + 16<i32>:word32]
	r2 = Mem0[r17 + 4<i32>:word32]
	r3 = Mem0[r13 + r19:word32]
	r2 = r2 + r19
	r4 = Mem0[r3:word32]
	r2 = Mem0[r2 - 4<i32>:word32]
	r5 = Mem0[r3 + 4<i32>:word32]
	Mem0[r2:word32] = r4
	Mem0[r2 + 4<i32>:word32] = r5
	r1 = Mem0[r3 + 12<i32>:word32]
	r7 = Mem0[r3 + 8<i32>:word32]
	Mem0[r2 + 12<i32>:word32] = r1
	Mem0[r2 + 8<i32>:word32] = r7
	r4 = Mem0[r3 + 24<i32>:word32]
	branch r4 >u r6 l0001D280
	// succ:  l0001D1E4 l0001D280
l0001D1E4:
	r6 = Mem0[r2 + 20<i32>:word32]
	r1 = Mem0[r3 + 16<i32>:word32]
	r2 = Mem0[r3 + 24<i32>:word32]
	call fn00009560 (retsize: 0;)
	r2 = Mem0[r17 + 16<i32>:word32]
	r19 = r19 + 8<32>
	branch r2 >u r18 l0001D1B0
	goto l0001D1FC
	// succ:  l0001D1FC l0001D1B0
l0001D1F8:
	branch r2 == 0<32> l0001D278
	goto l0001D20C
	// succ:  l0001D20C l0001D278
l0001D1FC:
	r18 = r18 + 2<32>
	branch r2 == 0<32> l0001D27C
	// succ:  l0001D20C l0001D27C
l0001D20C:
	r2 = Mem0[r17 + 20<i32>:word32]
	r0 = 0<32>
	r3 = Mem0[r17 + 4<i32>:word32]
	r2 = Mem0[r17 + 8<i32>:word32]
	r2 = Mem0[r13 + r19:word32]
	r3 = Mem0[r21 + r18:word32]
	r4 = Mem0[r3:word32]
	Mem0[r2 + 1<i32>:byte] = r5
	r5 = Mem0[r3 + 4<i32>:word32]
	r1 = Mem0[r3 + 12<i32>:word32]
	r7 = Mem0[r3 + 8<i32>:word32]
	Mem0[r2 + 12<i32>:word32] = r1
	Mem0[r2 + 8<i32>:word32] = r7
	r4 = Mem0[r3 + 24<i32>:word32]
	branch r4 >u r6 l0001D25C
	// succ:  l0001D240 l0001D25C
l0001D240:
	r6 = Mem0[r2 + 20<i32>:word32]
	r1 = Mem0[r3 + 16<i32>:word32]
	r2 = Mem0[r3 + 24<i32>:word32]
	call fn00009560 (retsize: 0;)
	r2 = Mem0[r17 + 20<i32>:word32]
	r18 = r18 + 8<32>
	r19 = r19 + 4<32>
	branch r2 >u r20 l0001D20C
	// succ:  l0001D25C l0001D20C
l0001D25C:
	r20 = r20 + 1<32>
	Mem0[r29:word32] = r20
	r1 = 0xAC<32>
	r3 = PC + 0xC139<32>
	// succ:  l0001D26C
l0001D26C:
	r2 = r16
	call errlog_function (retsize: 0;)
	r0 = 0xFFFFFFFF<32>
	// succ:  l0001D278
l0001D278:
	r19_r18 = Mem0[r29 + 16<i32>:word64]
	r17_r16 = Mem0[r29 + 24<i32>:word64]
	// succ:  l0001D27C
l0001D27C:
	v27 = r30
	r31 = Mem0[v27 + 4<i32>:word32]
	r30 = Mem0[v27:word32]
	r29 = v27 + 8<i32>
	return
	// succ:  assign_execute_exit
l0001D280:
	Mem0[r29:word32] = r18
	r1 = 0xA6<32>
	r3 = PC + 0xC0FE<32>
	goto l0001D26C
	// succ:  l0001D26C
assign_execute_exit:


// assign_check
// Return size: 0
define assign_check
assign_check_entry:
	r29 = fp
	// succ:  l0001D294
l0001D294:
	v4 = r29 - 8<i32>
	Mem0[v4:word32] = r30
	Mem0[v4 + 4<i32>:word32] = r31
	r30 = v4
	r29 = v4 - 0<i32>
	r2 = r1
	r3 = Mem0[r0 + 16<i32>:word32]
	r1 = 0xB5<32>
	branch p0 l0001D2B0
	// succ:  l0001D2A4 l0001D2B0
l0001D2A4:
	p0 = __bit<word32,word32>(r3, 0<32>)
	goto l0001D2C8
	// succ:  l0001D2C8
l0001D2B0:
	r4 = Mem0[r0 + 20<i32>:word32]
	r0 = 0<32>
	r1 = 0xB6<32>
	branch r4 >u r3 l0001D2D0
	// succ:  l0001D2C4 l0001D2D0
l0001D2C4:
	r3 = r3 >>u 1<32>
	r3 = PC + 0xE<32>
	// succ:  l0001D2C8
l0001D2C8:
	call errlog_function (retsize: 0;)
	r0 = 0xFFFFFFFF<32>
	// succ:  l0001D2D0
l0001D2D0:
	v14 = r30
	r31 = Mem0[v14 + 4<i32>:word32]
	r30 = Mem0[v14:word32]
	r29 = v14 + 8<i32>
	return
	// succ:  assign_check_exit
assign_check_exit:


// variable_execute
// Return size: 0
define variable_execute
variable_execute_entry:
	r29 = fp
	// succ:  l0001D2D4
l0001D2D4:
	v4 = r29 - 8<i32>
	Mem0[v4:word32] = r30
	Mem0[v4 + 4<i32>:word32] = r31
	r30 = v4
	r29 = v4 - 8<i32>
	r2 = r1
	r4 = PC + 0xC04C<32>
	Mem0[r29:word32] = r0
	r1 = 0x2F<32>
	call logmsg_function (retsize: 0;)
	v12 = r30
	r31 = Mem0[v12 + 4<i32>:word32]
	r30 = Mem0[v12:word32]
	r29 = v12 + 8<i32>
	return
	// succ:  variable_execute_exit
variable_execute_exit:


// variable_check
// Return size: 0
define variable_check
variable_check_entry:
	r29 = fp
	// succ:  l0001D2F0
l0001D2F0:
	v4 = r29 - 8<i32>
	Mem0[v4:word32] = r30
	Mem0[v4 + 4<i32>:word32] = r31
	r30 = v4
	r29 = v4 - 32<i32>
	Mem0[r29 + 496<i32>:word64] = r17_r16
	r4 = PC + 0xBFF8<32>
	r17 = r0
	r16 = r1
	r1 = 0x37<32>
	Mem0[r29 + 8<i32>:word64] = r21_r20
	Mem0[r29 + 16<i32>:word64] = r19_r18
	r2 = r16
	Mem0[r29:word32] = r17
	call logmsg_function (retsize: 0;)
	r2 = Mem0[r17 + 20<i32>:word32]
	branch r3 >u r2 l0001D3A4
	// succ:  l0001D324 l0001D3A4
l0001D324:
	r3 = Mem0[r17 + 16<i32>:word32]
	branch p0 l0001D398
	// succ:  l0001D328 l0001D398
l0001D328:
	r19_r18 = 0<64>
	r20 = 0<32>
	branch p0 l0001D398
	// succ:  l0001D334 l0001D398
l0001D334:
	p0 = r2 >u r12
	r3 = Mem0[r17 + 4<i32>:word32]
	r2 = Mem0[r17 + 8<i32>:word32]
	r2 = Mem0[r13 + r19:word32]
	r3 = Mem0[r21 + r19:word32]
	r4 = Mem0[r3:word32]
	Mem0[r2 + 1<i32>:byte] = r5
	r5 = Mem0[r3 + 4<i32>:word32]
	r1 = Mem0[r3 + 12<i32>:word32]
	r7 = Mem0[r3 + 8<i32>:word32]
	Mem0[r2 + 12<i32>:word32] = r1
	Mem0[r2 + 8<i32>:word32] = r7
	r4 = Mem0[r3 + 24<i32>:word32]
	branch r4 >u r6 l0001D384
	// succ:  l0001D368 l0001D384
l0001D368:
	r6 = Mem0[r2 + 20<i32>:word32]
	r1 = Mem0[r3 + 16<i32>:word32]
	r2 = Mem0[r3 + 24<i32>:word32]
	call fn00009560 (retsize: 0;)
	r2 = Mem0[r17 + 16<i32>:word32]
	branch r2 >u r20 l0001D398
	// succ:  l0001D380 l0001D398
l0001D380:
	r20 = r20 + 1<32>
	r2 = Mem0[r17 + 20<i32>:word32]
	r19 = r19 + 4<32>
	// succ:  l0001D384
l0001D384:
	r1 = 0x3B<32>
	r3 = PC + 0xBF8E<32>
	// succ:  l0001D390
l0001D390:
	r18 = -1<i32>
	r2 = r16
	call errlog_function (retsize: 0;)
	// succ:  l0001D398
l0001D398:
	r19_r18 = Mem0[r29 + 16<i32>:word64]
	r17_r16 = Mem0[r29 + 24<i32>:word64]
	r0 = r18
	v28 = r30
	r31 = Mem0[v28 + 4<i32>:word32]
	r30 = Mem0[v28:word32]
	r29 = v28 + 8<i32>
	return
	// succ:  variable_check_exit
l0001D3A4:
	goto l0001D390
	// succ:  l0001D390
variable_check_exit:


// variable_ctor
// Return size: 0
define variable_ctor
variable_ctor_entry:
	r29 = fp
	// succ:  l0001D3B0
l0001D3B0:
	v4 = r29 - 8<i32>
	Mem0[v4:word32] = r30
	Mem0[v4 + 4<i32>:word32] = r31
	r30 = v4
	r29 = v4 - 32<i32>
	Mem0[r29 + 488<i32>:word64] = r19_r18
	r18 = r0
	Mem0[r29 + 24<i32>:word64] = r17_r16
	r17 = r5
	r19 = Mem0[r29 + 44<i32>:word32]
	Mem0[r29 + 4<i32>:word32] = r19
	r6 = Mem0[r29 + 40<i32>:word64]
	Mem0[r29:word32] = r6
	call node_alloc_common (retsize: 0;)
	branch r16 == 0<32> l0001D480
	// succ:  l0001D3D8 l0001D480
l0001D3D8:
	r16 = r0
	Mem0[r29 + 2<i32>:byte] = r0
	branch p0 l0001D3F8
	// succ:  l0001D3E8 l0001D3F8
l0001D3E8:
	r0 = p0
	r2 = r2 + 0x7F<32>
	r2 = r2 >>u 7<32>
	r2 = r2 * r17
	r1 = r2 << 7<32>
	// succ:  l0001D3F8
l0001D3F8:
	r0 = 0x80<32>
	call fn00009550 (retsize: 0;)
	Mem0[r16 + 40<i32>:word32] = r0
	branch p0 l0001D41C
	// succ:  l0001D408 l0001D41C
l0001D408:
	p0 = r0 == 0<32>
	r2 = r18
	r1 = 0x5F<32>
	r3 = PC + 0xBED1<32>
	call errlog_function (retsize: 0;)
	// succ:  l0001D41C
l0001D41C:
	r0 = Mem0[r29 + 8<i32>:word32]
	branch p0 l0001D474
	// succ:  l0001D428 l0001D474
l0001D428:
	p0 = r0
	r2 = Mem0[r16 + 8<i32>:word32]
	r4 = Mem0[r16 + 8<i32>:word32]
	r5 = r17 + 0xFFFFFFFF<32>
	r3 = 0<32>
	p0 = r17 >u 1<32>
	__loop(0<i32>, 0x0001D450<p32>, r5)
	r4 = Mem0[r12 + r3:word32]
	r3 = r3 + 4<32>
	Mem0[r4 + 16<i32>:word32] = r2
	r19 = r19 + 8<i32>
	r4 = Mem0[r19:word32]
	branch p0 l0001D474
	// succ:  l0001D450 l0001D474
l0001D450:
	r5 = Mem0[r16 + 8<i32>:word32]
	r4 = r4 + 0x7F<32>
	r4 = r4 & 0xFFFFFF80<32>
	r5 = Mem0[r28 + r3:word32]
	r3 = r3 + 4<32>
	r2 = r2 + r4
	Mem0[r5 + 16<i32>:word32] = r2
	r19 = r19 + 8<i32>
	r4 = Mem0[r19:word32]
	// succ:  l0001D474
l0001D474:
	r19_r18 = Mem0[r29 + 16<i32>:word64]
	r17_r16 = Mem0[r29 + 24<i32>:word64]
	r0 = r16
	v21 = r30
	r31 = Mem0[v21 + 4<i32>:word32]
	r30 = Mem0[v21:word32]
	r29 = v21 + 8<i32>
	return
	// succ:  variable_ctor_exit
l0001D480:
	r2 = r18
	r1 = 0x58<32>
	r3 = PC + 0xBE4E<32>
	r16 = 0<32>
	call errlog_function (retsize: 0;)
	goto l0001D474
	// succ:  l0001D474
variable_ctor_exit:


// variable_dtor
// Return size: 0
define variable_dtor
variable_dtor_entry:
	r29 = fp
	// succ:  l0001D49C
l0001D49C:
	v4 = r29 - 8<i32>
	Mem0[v4:word32] = r30
	Mem0[v4 + 4<i32>:word32] = r31
	r30 = v4
	r29 = v4 - 16<i32>
	Mem0[r29 + 496<i32>:word64] = r17_r16
	r4 = PC + 0xBE1C<32>
	r17 = r0
	r16 = r1
	r1 = 0x6B<32>
	Mem0[r29:word32] = r17
	r2 = r16
	call logmsg_function (retsize: 0;)
	branch r0 == 0<32> l0001D4C4
	// succ:  l0001D4C4 l0001D4C4
l0001D4C4:
	r0 = Mem0[r17 + 40<i32>:word32]
	v15 = r30
	r31 = Mem0[v15 + 4<i32>:word32]
	r30 = Mem0[v15:word32]
	r29 = v15 + 8<i32>
	r17_r16 = Mem0[r29 + 8<i32>:word64]
	r1_r0 = r16_r17
	// succ:  l0001D4D0_thunk_node_free_common
l0001D4D0_thunk_node_free_common:
	call node_free_common (retsize: 0;)
	return
	// succ:  variable_dtor_exit
variable_dtor_exit:


// logmsg_function
// Return size: 0
define logmsg_function
logmsg_function_entry:
	r29 = fp
	// succ:  l0001D4D0
l0001D4D0:
	v4 = r29 - 8<i32>
	Mem0[v4:word32] = r30
	Mem0[v4 + 4<i32>:word32] = r31
	r30 = v4
	r29 = v4 - 8<i32>
	r3 = 2<32>
	branch r3 >u r5 l0001D4F4
	// succ:  l0001D4E0 l0001D4F4
l0001D4E0:
	r5 = Mem0[r2 + 16<i32>:word32]
	r5 = r29 + 0x10<32>
	r3 = 2<32>
	r0 = PC + 0x25<32>
	Mem0[r29 + 1<i32>:byte] = r6
	r6 = r29 + 0x10<32>
	call logv (retsize: 0;)
	goto l0001D4F8
	// succ:  l0001D4F8
l0001D4F4:
	v13 = r30
	r31 = Mem0[v13 + 4<i32>:word32]
	r30 = Mem0[v13:word32]
	r29 = v13 + 8<i32>
	return
	// succ:  logmsg_function_exit
l0001D4F8:
	r0 = Mem0[r0:word32]
	r0 = Mem0[r0:word32]
	r0 = Mem0[r0:word32]
	r0 = Mem0[r0:word32]
	// succ:  l0001D4FC_thunk_reshape_execute
l0001D4FC_thunk_reshape_execute:
	call reshape_execute (retsize: 0;)
	return
	// succ:  logmsg_function_exit
logmsg_function_exit:


// reshape_execute
// Return size: 0
define reshape_execute
reshape_execute_entry:
	r29 = fp
	// succ:  l0001D500
l0001D500:
	v4 = r29 - 8<i32>
	Mem0[v4:word32] = r30
	Mem0[v4 + 4<i32>:word32] = r31
	r30 = v4
	r29 = v4 - 128<i32>
	Mem0[r29 + 496<i32>:word64] = r17_r16
	r17_r16 = r0_r1
	Mem0[r29 + 88<i32>:word64] = r25_r24
	r2 = Mem0[r17 + 4<i32>:word32]
	Mem0[r29 + 96<i32>:word64] = r23_r22
	Mem0[r29 + 104<i32>:word64] = r21_r20
	r3 = Mem0[r17 + 8<i32>:word32]
	r23 = Mem0[r2 + 4<i32>:word32]
	r24 = Mem0[r2:word32]
	Mem0[r29 + 112<i32>:word64] = r19_r18
	r25 = Mem0[r3:word32]
	r4 = Mem0[r24 + 4<i32>:word32]
	r7 = Mem0[r24:word32]
	r22 = Mem0[r24 + 12<i32>:word32]
	r21 = Mem0[r24 + 8<i32>:word32]
	r2 = r4 * r7
	Mem0[r29 + 72<i32>:word32] = r7
	Mem0[r29 + 80<i32>:word64] = r27_r26
	r6 = r2 * r21
	Mem0[r29 + 68<i32>:word32] = r4
	branch r2 > 6<32> l0001D568
	// succ:  l0001D55C l0001D568
l0001D55C:
	r2 = Mem0[r23 + 12<i32>:word32]
	r18 = r6 * r22
	r4 = r3 + (r2 << 2<32>)
	r26 = Mem0[r4 - 16<i32>:word32]
	goto l0001D578
	// succ:  l0001D578
l0001D568:
	r3 = Mem0[r23 + 16<i32>:word32]
	r27_r26 = 0x100000001<64>
	branch p0 l0001D580
	// succ:  l0001D574 l0001D580
l0001D574:
	p0 = r2 > 4<32>
	r26 = 1<32>
	// succ:  l0001D578
l0001D578:
	r3 = r3 + (r2 << 2<32>)
	r27 = Mem0[r3 - 12<i32>:word32]
	// succ:  l0001D580
l0001D580:
	r3 = Mem0[r23 + 16<i32>:word32]
	branch p0 l0001D594
	// succ:  l0001D588 l0001D594
l0001D588:
	p0 = r2 > 2<32>
	r4 = r3 + (r2 << 2<32>)
	r19 = Mem0[r4 - 8<i32>:word32]
	goto l0001D5A0
	// succ:  l0001D5A0
l0001D594:
	r20 = 1<32>
	r19 = 1<32>
	branch p0 l0001D5A8
	// succ:  l0001D59C l0001D5A8
l0001D59C:
	p0 = r2 > 0<32>
	r3 = Mem0[r23 + 16<i32>:word32]
	r19 = 1<32>
	// succ:  l0001D5A0
l0001D5A0:
	r2 = r3 + (r2 << 2<32>)
	r20 = Mem0[r2 - 4<i32>:word32]
	// succ:  l0001D5A8
l0001D5A8:
	r2 = r16
	r1 = 0x3F<32>
	r4 = PC + 0xBEA7<32>
	Mem0[r29:word32] = r17
	call logmsg_function (retsize: 0;)
	r2 = Mem0[r25 + 20<i32>:word32]
	r1 = 0x41<32>
	r3 = PC + 0xBEB0<32>
	branch r4 >u r2 l0001D770
	// succ:  l0001D5D8 l0001D770
l0001D5D8:
	r4 = Mem0[r24 + 24<i32>:word32]
	r1 = 0x43<32>
	r2 = r27 >>u 0x1F<32>
	r3 = PC + 0x26<32>
	r2 = r2 + (r26 >>u 0x1F<32>)
	r2 = r2 + (r19 >>u 0x1F<32>)
	r2 = r2 + (r20 >>u 0x1F<32>)
	r0 = r18
	r2 = 0<32> - r26
	r2 = r27 * r2
	Mem0[r29 + 14<i32>:byte] = r18
	p0 = r27 > 0xFFFFFFFF<32>
	r18 = p0
	r2 = r2 * r19
	Mem0[r29 + 15<i32>:byte] = r18
	p0 = r19 > 0xFFFFFFFF<32>
	r18 = p0
	Mem0[r29 + 13<i32>:byte] = r18
	p0 = r20 > 0xFFFFFFFF<32>
	Mem0[r29 + 64<i32>:word32] = r18
	call fn00009760 (retsize: 0;)
	r0 = Mem0[r25 + 16<i32>:word32]
	r3 = Mem0[r29 + 56<i32>:word32]
	r18 = r0
	r3 = Mem0[r29 + 52<i32>:word32]
	r26 = r18 + 0<32>
	p2 = r3
	Mem0[r25:word32] = r26
	r3 = Mem0[r29 + 60<i32>:word32]
	r19 = r18 + 0<32>
	p0 = r3
	Mem0[r25 + 8<i32>:word32] = r19
	r3 = Mem0[r29 + 64<i32>:word32]
	r27 = r18 + 0<32>
	p1 = r3
	Mem0[r25 + 4<i32>:word32] = r27
	r18 = r20 + 0<32>
	p0 = r3
	Mem0[r25 + 12<i32>:word32] = r18
	r2 = Mem0[r24 + 24<i32>:word32]
	Mem0[r25 + 24<i32>:word32] = r2
	r2 = Mem0[r24 + 24<i32>:word32]
	r1 = Mem0[r24 + 16<i32>:word32]
	call vmemcpy_asm (retsize: 0;)
	branch r2 == 6<32> l0001D71C
	// succ:  l0001D6A4 l0001D71C
l0001D6A4:
	r2 = Mem0[r17 + 20<i32>:word32]
	r3 = Mem0[r17 + 4<i32>:word32]
	r2 = Mem0[r17 + 8<i32>:word32]
	r2 = Mem0[r2 + 4<i32>:word32]
	r4 = Mem0[r3 + 8<i32>:word32]
	r3 = PC + 0xBDEE<32>
	r5 = Mem0[r4 + 4<i32>:word32]
	r7 = Mem0[r4:word32]
	Mem0[r2:word32] = r7
	Mem0[r2 + 4<i32>:word32] = r5
	r6 = Mem0[r4 + 12<i32>:word32]
	r0 = Mem0[r4 + 8<i32>:word32]
	Mem0[r2 + 12<i32>:word32] = r6
	Mem0[r2 + 8<i32>:word32] = r0
	r5 = Mem0[r4 + 24<i32>:word32]
	branch r5 >u r7 l0001D770
	// succ:  l0001D6D4 l0001D770
l0001D6D4:
	r7 = Mem0[r2 + 20<i32>:word32]
	r1 = Mem0[r4 + 16<i32>:word32]
	r2 = Mem0[r4 + 24<i32>:word32]
	call fn00009560 (retsize: 0;)
	r3 = Mem0[r17 + 4<i32>:word32]
	r2 = Mem0[r17 + 8<i32>:word32]
	r1 = 0x54<32>
	r4 = Mem0[r3 + 12<i32>:word32]
	r3 = PC + 0xBDB2<32>
	r2 = Mem0[r2 + 8<i32>:word32]
	r5 = Mem0[r4 + 4<i32>:word32]
	r7 = Mem0[r4:word32]
	Mem0[r2:word32] = r7
	Mem0[r2 + 4<i32>:word32] = r5
	r6 = Mem0[r4 + 12<i32>:word32]
	r0 = Mem0[r4 + 8<i32>:word32]
	Mem0[r2 + 12<i32>:word32] = r6
	Mem0[r2 + 8<i32>:word32] = r0
	r5 = Mem0[r4 + 24<i32>:word32]
	branch r5 >u r7 l0001D770
	// succ:  l0001D714 l0001D770
l0001D714:
	r7 = Mem0[r2 + 20<i32>:word32]
	r1 = Mem0[r4 + 16<i32>:word32]
	r2 = Mem0[r4 + 24<i32>:word32]
	call fn00009560 (retsize: 0;)
	// succ:  l0001D71C
l0001D71C:
	r3 = Mem0[r23 + 4<i32>:word32]
	r2 = Mem0[r23:word32]
	r4 = PC + 0xBD89<32>
	r6 = Mem0[r23 + 12<i32>:word32]
	r5 = Mem0[r23 + 8<i32>:word32]
	r1 = 0x5D<32>
	Mem0[r29 + 44<i32>:word32] = r18
	r7 = Mem0[r29 + 68<i32>:word64]
	Mem0[r29 + 28<i32>:word32] = r6
	Mem0[r29 + 40<i32>:word32] = r19
	Mem0[r29 + 32<i32>:word32] = r26
	Mem0[r29 + 36<i32>:word32] = r27
	Mem0[r29 + 20<i32>:word32] = r3
	Mem0[r29 + 24<i32>:word32] = r5
	Mem0[r29 + 8<i32>:word32] = r21
	r3 = Mem0[r29 + 72<i32>:word64]
	Mem0[r29 + 12<i32>:word32] = r22
	Mem0[r29 + 16<i32>:word32] = r2
	r2 = r16
	Mem0[r29:word32] = r3
	Mem0[r29 + 4<i32>:word32] = r7
	call logmsg_function (retsize: 0;)
	r0 = 0<32>
	// succ:  l0001D75C
l0001D75C:
	r19_r18 = Mem0[r29 + 112<i32>:word64]
	r17_r16 = Mem0[r29 + 120<i32>:word64]
	r23_r22 = Mem0[r29 + 96<i32>:word64]
	r21_r20 = Mem0[r29 + 104<i32>:word64]
	r27_r26 = Mem0[r29 + 80<i32>:word64]
	r25_r24 = Mem0[r29 + 88<i32>:word64]
	v38 = r30
	r31 = Mem0[v38 + 4<i32>:word32]
	r30 = Mem0[v38:word32]
	r29 = v38 + 8<i32>
	return
	// succ:  reshape_execute_exit
l0001D770:
	r2 = r16
	call errlog_function (retsize: 0;)
	r0 = 0xFFFFFFFF<32>
	goto l0001D75C
	// succ:  l0001D75C
reshape_execute_exit:


// reshape_check
// Return size: 0
define reshape_check
reshape_check_entry:
	r29 = fp
	// succ:  l0001D780
l0001D780:
	// succ:  l0001D780_thunk_reshape_check__merged
l0001D780_thunk_reshape_check__merged:
	call reshape_check__merged (retsize: 0;)
	return
	// succ:  reshape_check_exit
reshape_check_exit:


// reshape_check__merged
// Return size: 0
define reshape_check__merged
reshape_check__merged_entry:
	r29 = fp
	// succ:  l0001D784
l0001D784:
	v4 = r29 - 8<i32>
	Mem0[v4:word32] = r30
	Mem0[v4 + 4<i32>:word32] = r31
	r30 = v4
	r29 = v4 - 40<i32>
	p0 = r2 == 1<32>
	r4 = PC + 0xBC99<32>
	Mem0[r29 + 24<i32>:word64] = r19_r18
	Mem0[r29 + 32<i32>:word64] = r17_r16
	r19 = 0x6F<32>
	r17_r16 = r0_r1
	r1 = 0x6C<32>
	r18 = PC + 0xBC9A<32>
	Mem0[r29 + 8<i32>:word64] = r23_r22
	Mem0[r29 + 16<i32>:word64] = r21_r20
	branch p0 l0001D7C4
	// succ:  l0001D7B0 l0001D7C4
l0001D7B0:
	r1 = 0x63<32>
	r21_r20 = 0x6400000065<64>
	r19 = 0x66<32>
	r23_r22 = 0x200000001<64>
	goto l0001D7DC
	// succ:  l0001D7DC
l0001D7C4:
	r21_r20 = 0x6D0000006E<64>
	r23_r22 = 0x400000003<64>
	r4 = PC + 0xBC06<32>
	r18 = PC + 0xBC2F<32>
	// succ:  l0001D7DC
l0001D7DC:
	Mem0[r29:word32] = r17
	r2 = r16
	call logmsg_function (retsize: 0;)
	branch r2 == r23 l0001D808
	// succ:  l0001D7F4 l0001D808
l0001D7F4:
	r2 = Mem0[r17 + 16<i32>:word32]
	r1 = r21
	r3 = PC + 0x34<32>
	r2 = r16
	call errlog_function (retsize: 0;)
	// succ:  l0001D7FC
l0001D7FC:
	r0 = 0xFFFFFFFF<32>
	goto l0001D834
	// succ:  l0001D834
l0001D808:
	branch r2 == r22 l0001D820
	// succ:  l0001D818 l0001D820
l0001D818:
	r2 = Mem0[r17 + 20<i32>:word32]
	r1 = r20
	goto l0001D7FC
	// succ:  l0001D7FC
l0001D820:
	Mem0[r29:word32] = r17
	r4 = r18
	r1 = r19
	r2 = r16
	call logmsg_function (retsize: 0;)
	r0 = 0<32>
	// succ:  l0001D834
l0001D834:
	r19_r18 = Mem0[r29 + 24<i32>:word64]
	r17_r16 = Mem0[r29 + 32<i32>:word64]
	r23_r22 = Mem0[r29 + 8<i32>:word64]
	r21_r20 = Mem0[r29 + 16<i32>:word64]
	v25 = r30
	r31 = Mem0[v25 + 4<i32>:word32]
	r30 = Mem0[v25:word32]
	r29 = v25 + 8<i32>
	return
	// succ:  reshape_check__merged_exit
reshape_check__merged_exit:


// qreshape_check
// Return size: 0
define qreshape_check
qreshape_check_entry:
	r29 = fp
	// succ:  l0001D840
l0001D840:
	// succ:  l0001D840_thunk_reshape_check__merged
l0001D840_thunk_reshape_check__merged:
	call reshape_check__merged (retsize: 0;)
	return
	// succ:  qreshape_check_exit
qreshape_check_exit:


// logmsg_function
// Return size: 0
define logmsg_function
logmsg_function_entry:
	r29 = fp
	// succ:  l0001D844
l0001D844:
	v4 = r29 - 8<i32>
	Mem0[v4:word32] = r30
	Mem0[v4 + 4<i32>:word32] = r31
	r30 = v4
	r29 = v4 - 8<i32>
	r3 = 2<32>
	branch r3 >u r5 l0001D868
	// succ:  l0001D854 l0001D868
l0001D854:
	r5 = Mem0[r2 + 16<i32>:word32]
	r5 = r29 + 0x10<32>
	r3 = 2<32>
	r0 = PC + 0x1D<32>
	Mem0[r29 + 1<i32>:byte] = r6
	r6 = r29 + 0x10<32>
	call logv (retsize: 0;)
	// succ:  l0001D85C_thunk_errlog_function
l0001D85C_thunk_errlog_function:
	call errlog_function (retsize: 0;)
	return
	// succ:  logmsg_function_exit
l0001D868:
	v13 = r30
	r31 = Mem0[v13 + 4<i32>:word32]
	r30 = Mem0[v13:word32]
	r29 = v13 + 8<i32>
	return
	// succ:  logmsg_function_exit
logmsg_function_exit:


// errlog_function
// Return size: 0
define errlog_function
errlog_function_entry:
	r29 = fp
	// succ:  l0001D86C
l0001D86C:
	v4 = r29 - 8<i32>
	Mem0[v4:word32] = r30
	Mem0[v4 + 4<i32>:word32] = r31
	r30 = v4
	r29 = v4 - 8<i32>
	r4 = r3
	r0 = PC + 0xBB41<32>
	Mem0[r29 + 1<i32>:byte] = r6
	r6 = r29 + 0x10<32>
	r5 = r29 + 0x10<32>
	r3 = 0<32>
	v13 = r30
	r31 = Mem0[v13 + 4<i32>:word32]
	r30 = Mem0[v13:word32]
	r29 = v13 + 8<i32>
	return
	// succ:  errlog_function_exit
errlog_function_exit:


// slice_execute_f
// Return size: 0
define slice_execute_f
slice_execute_f_entry:
	r29 = fp
	// succ:  l0001D890
l0001D890:
	// succ:  l0001D890_thunk_slice_impl
l0001D890_thunk_slice_impl:
	call slice_impl (retsize: 0;)
	return
	// succ:  slice_execute_f_exit
slice_execute_f_exit:


// slice_check_f
// Return size: 0
define slice_check_f
slice_check_f_entry:
	r29 = fp
	// succ:  l0001D894
l0001D894:
	v4 = r29 - 8<i32>
	Mem0[v4:word32] = r30
	Mem0[v4 + 4<i32>:word32] = r31
	r30 = v4
	r29 = v4 - 16<i32>
	Mem0[r29 + 496<i32>:word64] = r17_r16
	r4 = PC + 0xBC5F<32>
	r17 = r0
	r16 = r1
	r1 = 0x85<32>
	Mem0[r29:word32] = r17
	r2 = r16
	call logmsg_function (retsize: 0;)
	branch r2 == 6<32> l0001D8C8
	// succ:  l0001D8C0 l0001D8C8
l0001D8C0:
	r2 = Mem0[r17 + 16<i32>:word32]
	r1 = 0x86<32>
	goto l0001D8E4
	// succ:  l0001D8E4
l0001D8C8:
	branch r2 == 2<32> l0001D8EC
	// succ:  l0001D8DC l0001D8EC
l0001D8DC:
	r2 = Mem0[r17 + 20<i32>:word32]
	r0 = 0<32>
	r1 = 0x87<32>
	r3 = PC + 0x3D<32>
	r2 = r16
	call errlog_function (retsize: 0;)
	goto l0001D8E8
	// succ:  l0001D8E8
l0001D8E4:
	r2 = r16
	// succ:  l0001D8E8
l0001D8E8:
	r0 = 0xFFFFFFFF<32>
	// succ:  l0001D8EC
l0001D8EC:
	v16 = r30
	r31 = Mem0[v16 + 4<i32>:word32]
	r30 = Mem0[v16:word32]
	r29 = v16 + 8<i32>
	return
	// succ:  slice_check_f_exit
slice_check_f_exit:


// slice_execute_8
// Return size: 0
define slice_execute_8
slice_execute_8_entry:
	r29 = fp
	// succ:  l0001D8F0
l0001D8F0:
	// succ:  l0001D8F0_thunk_slice_impl
l0001D8F0_thunk_slice_impl:
	call slice_impl (retsize: 0;)
	return
	// succ:  slice_execute_8_exit
slice_execute_8_exit:


// slice_check_8
// Return size: 0
define slice_check_8
slice_check_8_entry:
	r29 = fp
	// succ:  l0001D8F4
l0001D8F4:
	v4 = r29 - 8<i32>
	Mem0[v4:word32] = r30
	Mem0[v4 + 4<i32>:word32] = r31
	r30 = v4
	r29 = v4 - 16<i32>
	Mem0[r29 + 496<i32>:word64] = r17_r16
	r4 = PC + 0xBBFF<32>
	r17 = r0
	r16 = r1
	r1 = 0x8D<32>
	Mem0[r29:word32] = r17
	r2 = r16
	call logmsg_function (retsize: 0;)
	branch r2 == 6<32> l0001D928
	// succ:  l0001D920 l0001D928
l0001D920:
	r2 = Mem0[r17 + 16<i32>:word32]
	r1 = 0x8E<32>
	goto l0001D944
	// succ:  l0001D944
l0001D928:
	branch r2 == 2<32> l0001D94C
	// succ:  l0001D93C l0001D94C
l0001D93C:
	r2 = Mem0[r17 + 20<i32>:word32]
	r0 = 0<32>
	r1 = 0x8F<32>
	r3 = PC + 0x1D<32>
	r2 = r16
	call errlog_function (retsize: 0;)
	goto l0001D948
	// succ:  l0001D948
l0001D944:
	r2 = r16
	// succ:  l0001D948
l0001D948:
	r0 = 0xFFFFFFFF<32>
	// succ:  l0001D94C
l0001D94C:
	v16 = r30
	r31 = Mem0[v16 + 4<i32>:word32]
	r30 = Mem0[v16:word32]
	r29 = v16 + 8<i32>
	return
	// succ:  slice_check_8_exit
slice_check_8_exit:


// slice_execute_q8
// Return size: 0
define slice_execute_q8
slice_execute_q8_entry:
	r29 = fp
	// succ:  l0001D950
l0001D950:
	v4 = r29 - 8<i32>
	Mem0[v4:word32] = r30
	Mem0[v4 + 4<i32>:word32] = r31
	r30 = v4
	r29 = v4 - 8<i32>
	Mem0[r29 + 496<i32>:word64] = r17_r16
	r17_r16 = r1_r0
	r4 = Mem0[r16 + 8<i32>:word32]
	r2 = Mem0[r16 + 4<i32>:word32]
	r2 = Mem0[r4 + 4<i32>:word32]
	r3 = Mem0[r2 + 12<i32>:word32]
	r5 = Mem0[r3 + 4<i32>:word32]
	r7 = Mem0[r3:word32]
	Mem0[r2:word32] = r7
	Mem0[r2 + 4<i32>:word32] = r5
	r0 = Mem0[r3 + 12<i32>:word32]
	r4 = Mem0[r3 + 8<i32>:word32]
	Mem0[r2 + 8<i32>:word32] = r4
	Mem0[r2 + 12<i32>:word32] = r0
	r4 = Mem0[r3 + 24<i32>:word32]
	branch r4 >u r6 l0001D988
	// succ:  l0001D980 l0001D988
l0001D980:
	r6 = Mem0[r2 + 20<i32>:word32]
	r1 = Mem0[r3 + 16<i32>:word32]
	r2 = Mem0[r3 + 24<i32>:word32]
	call fn00009560 (retsize: 0;)
	// succ:  l0001D988
l0001D988:
	r3 = Mem0[r16 + 4<i32>:word32]
	r2 = Mem0[r16 + 8<i32>:word32]
	r2 = Mem0[r2 + 8<i32>:word32]
	r3 = Mem0[r3 + 16<i32>:word32]
	r5 = Mem0[r3 + 4<i32>:word32]
	r4 = Mem0[r3:word32]
	Mem0[r2:word32] = r4
	Mem0[r2 + 4<i32>:word32] = r5
	r1 = Mem0[r3 + 12<i32>:word32]
	r7 = Mem0[r3 + 8<i32>:word32]
	Mem0[r2 + 12<i32>:word32] = r1
	Mem0[r2 + 8<i32>:word32] = r7
	r4 = Mem0[r3 + 24<i32>:word32]
	branch r4 >u r6 l0001D9B8
	// succ:  l0001D9B0 l0001D9B8
l0001D9B0:
	r6 = Mem0[r2 + 20<i32>:word32]
	r1 = Mem0[r3 + 16<i32>:word32]
	r2 = Mem0[r3 + 24<i32>:word32]
	call fn00009560 (retsize: 0;)
	// succ:  l0001D9B8
l0001D9B8:
	v18 = r30
	r31 = Mem0[v18 + 4<i32>:word32]
	r30 = Mem0[v18:word32]
	r29 = v18 + 8<i32>
	r17_r16 = Mem0[r29:word64]
	r2 = 1<32>
	r1_r0 = r17_r16
	// succ:  l0001D9C4_thunk_slice_impl
l0001D9C4_thunk_slice_impl:
	call slice_impl (retsize: 0;)
	return
	// succ:  slice_execute_q8_exit
slice_execute_q8_exit:


// slice_check_q8
// Return size: 0
define slice_check_q8
slice_check_q8_entry:
	r29 = fp
	// succ:  l0001D9D0
l0001D9D0:
	v4 = r29 - 8<i32>
	Mem0[v4:word32] = r30
	Mem0[v4 + 4<i32>:word32] = r31
	r30 = v4
	r29 = v4 - 16<i32>
	Mem0[r29 + 496<i32>:word64] = r17_r16
	r4 = PC + 0xBB23<32>
	r17 = r0
	r16 = r1
	r1 = 0x95<32>
	Mem0[r29:word32] = r17
	r2 = r16
	call logmsg_function (retsize: 0;)
	branch r2 == 0xA<32> l0001DA04
	// succ:  l0001D9FC l0001DA04
l0001D9FC:
	r2 = Mem0[r17 + 16<i32>:word32]
	r1 = 0x96<32>
	goto l0001DA20
	// succ:  l0001DA20
l0001DA04:
	branch r2 == 6<32> l0001DA28
	// succ:  l0001DA18 l0001DA28
l0001DA18:
	r2 = Mem0[r17 + 20<i32>:word32]
	r0 = 0<32>
	r1 = 0x97<32>
	r3 = PC + 1<32>
	r2 = r16
	call errlog_function (retsize: 0;)
	goto l0001DA24
	// succ:  l0001DA24
l0001DA20:
	r2 = r16
	// succ:  l0001DA24
l0001DA24:
	r0 = 0xFFFFFFFF<32>
	// succ:  l0001DA28
l0001DA28:
	v16 = r30
	r31 = Mem0[v16 + 4<i32>:word32]
	r30 = Mem0[v16:word32]
	r29 = v16 + 8<i32>
	return
	// succ:  slice_check_q8_exit
slice_check_q8_exit:


// logmsg_function
// Return size: 0
define logmsg_function
logmsg_function_entry:
	r29 = fp
	// succ:  l0001DA2C
l0001DA2C:
	v4 = r29 - 8<i32>
	Mem0[v4:word32] = r30
	Mem0[v4 + 4<i32>:word32] = r31
	r30 = v4
	r29 = v4 - 8<i32>
	r3 = 2<32>
	branch r3 >u r5 l0001DA50
	// succ:  l0001DA3C l0001DA50
l0001DA3C:
	r5 = Mem0[r2 + 16<i32>:word32]
	r5 = r29 + 0x10<32>
	r3 = 2<32>
	r0 = PC + 0x20<32>
	Mem0[r29 + 1<i32>:byte] = r6
	r6 = r29 + 0x10<32>
	call logv (retsize: 0;)
	// succ:  l0001DA44_thunk_errlog_function
l0001DA44_thunk_errlog_function:
	call errlog_function (retsize: 0;)
	return
	// succ:  logmsg_function_exit
l0001DA50:
	v13 = r30
	r31 = Mem0[v13 + 4<i32>:word32]
	r30 = Mem0[v13:word32]
	r29 = v13 + 8<i32>
	return
	// succ:  logmsg_function_exit
logmsg_function_exit:


// errlog_function
// Return size: 0
define errlog_function
errlog_function_entry:
	r29 = fp
	// succ:  l0001DA54
l0001DA54:
	v4 = r29 - 8<i32>
	Mem0[v4:word32] = r30
	Mem0[v4 + 4<i32>:word32] = r31
	r30 = v4
	r29 = v4 - 8<i32>
	r4 = r3
	r0 = PC + 0xBA84<32>
	Mem0[r29 + 1<i32>:byte] = r6
	r6 = r29 + 0x10<32>
	r5 = r29 + 0x10<32>
	r3 = 0<32>
	v13 = r30
	r31 = Mem0[v13 + 4<i32>:word32]
	r30 = Mem0[v13:word32]
	r29 = v13 + 8<i32>
	return
	// succ:  errlog_function_exit
errlog_function_exit:


// slice_impl
// Return size: 0
define slice_impl
slice_impl_entry:
	r29 = fp
	// succ:  l0001DA78
l0001DA78:
	v4 = r29 - 8<i32>
	Mem0[v4:word32] = r30
	Mem0[v4 + 4<i32>:word32] = r31
	r30 = v4
	r29 = v4 - 88<i32>
	r4 = PC + 0xBAA9<32>
	r5 = Mem0[r0 + 8<i32>:word32]
	r3 = Mem0[r0 + 4<i32>:word32]
	Mem0[r29 + 80<i32>:word64] = r17_r16
	Mem0[r29 + 56<i32>:word64] = r23_r22
	r1 = 0x40<32>
	r17_r16 = r1_r2
	r23 = Mem0[r5:word32]
	r22 = Mem0[r3:word32]
	r2 = r17
	Mem0[r29 + 64<i32>:word64] = r21_r20
	Mem0[r29 + 72<i32>:word64] = r19_r18
	Mem0[r29 + 48<i32>:word64] = r25_r24
	Mem0[r29 + 40<i32>:word64] = r27_r26
	r20 = Mem0[r3 + 8<i32>:word32]
	r18 = Mem0[r22 + 16<i32>:word32]
	r24 = Mem0[r3 + 4<i32>:word32]
	Mem0[r29:word32] = r0
	r19 = Mem0[r23 + 16<i32>:word32]
	call logmsg_function (retsize: 0;)
	r6 = Mem0[r20 + 4<i32>:word32]
	r3 = Mem0[r20:word32]
	r1 = 0x54<32>
	r2 = Mem0[r24:word32]
	r13 = Mem0[r22:word32]
	p1 = r6 == 0xFFFFFFFF<32>
	p0 = r3 == 0xFFFFFFFF<32>
	r14 = Mem0[r20 + 12<i32>:word32]
	r8 = Mem0[r20 + 8<i32>:word32]
	r12 = Mem0[r24 + 4<i32>:word32]
	r9 = Mem0[r22 + 4<i32>:word32]
	r20 = r3 + 0<32>
	r20 = r13 - r2
	r4 = Mem0[r22 + 8<i32>:word32]
	p2 = r8 == 0xFFFFFFFF<32>
	r21 = r9 - r12
	r3 = r20 * r16
	r6 = Mem0[r24 + 12<i32>:word32]
	r5 = Mem0[r24 + 8<i32>:word32]
	p0 = r14 == 0xFFFFFFFF<32>
	r21 = r6 + 0<32>
	r7 = Mem0[r22 + 12<i32>:word32]
	r26 = r4 - r5
	r3 = r3 * r21
	r8 = r14 + 0<32>
	r8 = r7 - r6
	r26 = r8 + 0<32>
	r3 = r3 * r26
	r14 = r3 * r8
	r3 = PC + 0xBA0F<32>
	branch r14 >u r15 l0001DBEC
	// succ:  l0001DB40 l0001DBEC
l0001DB40:
	r15 = Mem0[r23 + 20<i32>:word32]
	p0 = r20 > 0<32>
	r1 = 0x55<32>
	r3 = PC + 9<32>
	r1 = 0x56<32>
	branch p0 l0001DBEC
	// succ:  l0001DB54 l0001DBEC
l0001DB54:
	r1 = 0x57<32>
	p1 = r21 > 0<32>
	r3 = PC + 0xB9FC<32>
	Mem0[r29 + 6<i32>:byte] = r0
	branch p1 l0001DBEC
	// succ:  l0001DB74 l0001DBEC
l0001DB74:
	r0 = p1
	r1 = 0x58<32>
	p1 = r26 > 0<32>
	r3 = PC + 0x2B<32>
	Mem0[r29 + 8<i32>:byte] = r0
	branch p1 l0001DBEC
	// succ:  l0001DB90 l0001DBEC
l0001DB90:
	r0 = p1
	p1 = r8 > 0<32>
	r3 = PC + 0x1A<32>
	r1 = 0x59<32>
	branch p1 l0001DBEC
	// succ:  l0001DBA0 l0001DBEC
l0001DBA0:
	r3 = PC + 0xB9D1<32>
	branch r13 >u r15 l0001DBEC
	// succ:  l0001DBB4 l0001DBEC
l0001DBB4:
	r15 = r20 + r2
	r1 = 0x5A<32>
	r3 = PC + 0x10<32>
	branch r9 >u r13 l0001DBEC
	// succ:  l0001DBC8 l0001DBEC
l0001DBC8:
	r13 = r21 + r12
	r1 = 0x5B<32>
	r3 = PC + 0xB<32>
	branch r4 >u r13 l0001DBEC
	// succ:  l0001DBDC l0001DBEC
l0001DBDC:
	r13 = r26 + r5
	r1 = 0x5C<32>
	r3 = PC + 6<32>
	branch r7 >u r13 l0001DBFC
	goto l0001DBF0
	// succ:  l0001DBF0 l0001DBFC
l0001DBEC:
	r2 = r17
	call errlog_function (retsize: 0;)
	goto l0001DBF4
	// succ:  l0001DBF4
l0001DBF0:
	r13 = r8 + r6
	r2 = r17
	// succ:  l0001DBF4
l0001DBF4:
	r0 = 0xFFFFFFFF<32>
	goto l0001DCCC
	// succ:  l0001DCCC
l0001DBFC:
	Mem0[r23 + 4<i32>:word32] = r21
	Mem0[r23 + 24<i32>:word32] = r14
	r0 = 0<32>
	Mem0[r23 + 8<i32>:word32] = r26
	Mem0[r23:word32] = r20
	Mem0[r23 + 12<i32>:word32] = r8
	branch p0 l0001DCCC
	// succ:  l0001DC18 l0001DCCC
l0001DC18:
	r12 = r7
	r3 = r7 * r4
	r2 = r12 + r2 * r9
	r7 = 0<32>
	r23 = r7 * r16
	r13 = r8 * r26
	r9 = r3 * r9
	r4 = r5 + r4 * r2
	r3 = r16
	r17 = r8 * r16
	r25 = r3 * r16
	Mem0[r29 + 7<i32>:byte] = r2
	r2 = r13 * r16
	r12 = r6 + r12 * r4
	r3 = r18 + r3 * r12
	Mem0[r29 + 12<i32>:word32] = r1
	// succ:  l0001DC5C
l0001DC5C:
	Mem0[r29 + 16<i32>:word32] = r3
	r0 = Mem0[r29 + 24<i32>:word64]
	r27 = 0<32>
	r24 = r3
	Mem0[r29 + 20<i32>:word32] = r7
	p0 = r0
	branch p0 l0001DCB4
	// succ:  l0001DC74 l0001DCB4
l0001DC74:
	r0 = Mem0[r29 + 32<i32>:word64]
	r18 = r19
	r16 = r24
	r22 = r26
	branch p0 l0001DCA8
	// succ:  l0001DC88 l0001DCA8
l0001DC88:
	p0 = r0
	r16 = r16 + r23
	r2 = r17
	r1_r0 = r16_r18
	call fn00009560 (retsize: 0;)
	branch r22 == 1<32> l0001DC88
	// succ:  l0001DCA4 l0001DC88
l0001DCA4:
	r22 = r22 + 0xFFFFFFFF<32>
	r18 = r18 + r17
	r19 = r19 + r2
	// succ:  l0001DCA8
l0001DCA8:
	branch r27 == r21 l0001DC74
	goto l0001DCB8
	// succ:  l0001DCB8 l0001DC74
l0001DCB4:
	r2 = Mem0[r29 + 12<i32>:word64]
	r7 = Mem0[r29 + 20<i32>:word64]
	// succ:  l0001DCB8
l0001DCB8:
	r27 = r27 + 1<32>
	r24 = r24 + r25
	r3 = Mem0[r29 + 16<i32>:word32]
	branch r7 == r20 l0001DC5C
	// succ:  l0001DCCC l0001DC5C
l0001DCCC:
	r19_r18 = Mem0[r29 + 72<i32>:word64]
	r17_r16 = Mem0[r29 + 80<i32>:word64]
	r23_r22 = Mem0[r29 + 56<i32>:word64]
	r21_r20 = Mem0[r29 + 64<i32>:word64]
	r27_r26 = Mem0[r29 + 40<i32>:word64]
	r25_r24 = Mem0[r29 + 48<i32>:word64]
	v42 = r30
	r31 = Mem0[v42 + 4<i32>:word32]
	r30 = Mem0[v42:word32]
	r29 = v42 + 8<i32>
	return
	// succ:  slice_impl_exit
slice_impl_exit:


// split_execute_f
// Return size: 0
define split_execute_f
split_execute_f_entry:
	r29 = fp
	// succ:  l0001DCE0
l0001DCE0:
	r3 = Mem0[r0 + 20<i32>:word32]
	// succ:  l0001DCE0_thunk_split_impl
l0001DCE0_thunk_split_impl:
	call split_impl (retsize: 0;)
	return
	// succ:  split_execute_f_exit
split_execute_f_exit:


// split_check_f
// Return size: 0
define split_check_f
split_check_f_entry:
	r29 = fp
	// succ:  l0001DCE8
l0001DCE8:
	v4 = r29 - 8<i32>
	Mem0[v4:word32] = r30
	Mem0[v4 + 4<i32>:word32] = r31
	r30 = v4
	r29 = v4 - 16<i32>
	Mem0[r29 + 496<i32>:word64] = r17_r16
	r4 = PC + 0xB8E0<32>
	r17 = r0
	r16 = r1
	r1 = 0x75<32>
	Mem0[r29:word32] = r17
	r2 = r16
	call logmsg_function (retsize: 0;)
	branch r2 == 4<32> l0001DD1C
	// succ:  l0001DD14 l0001DD1C
l0001DD14:
	r2 = Mem0[r17 + 16<i32>:word32]
	r1 = 0x76<32>
	goto l0001DD38
	// succ:  l0001DD38
l0001DD1C:
	branch r2 == 0<32> l0001DD40
	// succ:  l0001DD30 l0001DD40
l0001DD30:
	r2 = Mem0[r17 + 20<i32>:word32]
	r0 = 0<32>
	r1 = 0x77<32>
	r3 = PC + 0x3E<32>
	r2 = r16
	call errlog_function (retsize: 0;)
	goto l0001DD3C
	// succ:  l0001DD3C
l0001DD38:
	r2 = r16
	// succ:  l0001DD3C
l0001DD3C:
	r0 = 0xFFFFFFFF<32>
	// succ:  l0001DD40
l0001DD40:
	v16 = r30
	r31 = Mem0[v16 + 4<i32>:word32]
	r30 = Mem0[v16:word32]
	r29 = v16 + 8<i32>
	return
	// succ:  split_check_f_exit
split_check_f_exit:


// qsplit_execute_8
// Return size: 0
define qsplit_execute_8
qsplit_execute_8_entry:
	r29 = fp
	// succ:  l0001DD44
l0001DD44:
	v4 = r29 - 8<i32>
	Mem0[v4:word32] = r30
	Mem0[v4 + 4<i32>:word32] = r31
	r30 = v4
	r29 = v4 - 16<i32>
	Mem0[r29 + 496<i32>:word64] = r17_r16
	r16 = r0
	Mem0[r29:word64] = r19_r18
	r2 = Mem0[r16 + 4<i32>:word32]
	r18 = r1
	r4 = Mem0[r16 + 8<i32>:word32]
	r19 = Mem0[r16 + 20<i32>:word32]
	r3 = Mem0[r2 + 8<i32>:word32]
	r17 = r19 + 0xFFFFFFFE<32>
	r2 = Mem0[r15 + r17 * 4<32>:word32]
	Mem0[r2:byte] = r7
	r7 = Mem0[r3:word32]
	Mem0[r2 + 8<i32>:word32] = r5
	Mem0[r2 + 4<i32>:word32] = r4
	r7 = Mem0[r3 + 12<i32>:word32]
	Mem0[r2 + 12<i32>:word32] = r7
	r4 = Mem0[r3 + 24<i32>:word32]
	branch r4 >u r5 l0001DD94
	// succ:  l0001DD8C l0001DD94
l0001DD8C:
	r5 = Mem0[r2 + 20<i32>:word32]
	r1 = Mem0[r3 + 16<i32>:word32]
	r2 = Mem0[r3 + 24<i32>:word32]
	call fn00009560 (retsize: 0;)
	// succ:  l0001DD94
l0001DD94:
	r3 = Mem0[r16 + 4<i32>:word32]
	r2 = Mem0[r16 + 8<i32>:word32]
	r3 = Mem0[r3 + 12<i32>:word32]
	r2 = r2 + (r19 << 2<32>)
	r2 = Mem0[r2 - 4<i32>:word32]
	r5 = Mem0[r3 + 4<i32>:word32]
	r4 = Mem0[r3:word32]
	Mem0[r2:word32] = r4
	Mem0[r2 + 4<i32>:word32] = r5
	r1 = Mem0[r3 + 12<i32>:word32]
	r7 = Mem0[r3 + 8<i32>:word32]
	Mem0[r2 + 12<i32>:word32] = r1
	Mem0[r2 + 8<i32>:word32] = r7
	r4 = Mem0[r3 + 24<i32>:word32]
	branch r4 >u r6 l0001DDCC
	// succ:  l0001DDC4 l0001DDCC
l0001DDC4:
	r6 = Mem0[r2 + 20<i32>:word32]
	r1 = Mem0[r3 + 16<i32>:word32]
	r2 = Mem0[r3 + 24<i32>:word32]
	call fn00009560 (retsize: 0;)
	// succ:  l0001DDCC
l0001DDCC:
	r1_r0 = r18_r16
	r19_r18 = Mem0[r29:word64]
	r17_r16 = Mem0[r29 + 8<i32>:word64]
	v24 = r30
	r31 = Mem0[v24 + 4<i32>:word32]
	r30 = Mem0[v24:word32]
	r29 = v24 + 8<i32>
	// succ:  l0001DDD8_thunk_split_impl
l0001DDD8_thunk_split_impl:
	call split_impl (retsize: 0;)
	return
	// succ:  qsplit_execute_8_exit
qsplit_execute_8_exit:


// qsplit_check
// Return size: 0
define qsplit_check
qsplit_check_entry:
	r29 = fp
	// succ:  l0001DDE0
l0001DDE0:
	v4 = r29 - 8<i32>
	Mem0[v4:word32] = r30
	Mem0[v4 + 4<i32>:word32] = r31
	r30 = v4
	r29 = v4 - 16<i32>
	Mem0[r29 + 496<i32>:word64] = r17_r16
	r4 = PC + 0xB7E8<32>
	r17 = r0
	r16 = r1
	r1 = 0x7D<32>
	Mem0[r29:word32] = r17
	r2 = r16
	call logmsg_function (retsize: 0;)
	branch r2 == 8<32> l0001DE14
	// succ:  l0001DE0C l0001DE14
l0001DE0C:
	r2 = Mem0[r17 + 16<i32>:word32]
	r1 = 0x7E<32>
	goto l0001DE30
	// succ:  l0001DE30
l0001DE14:
	branch r2 >u 4<32> l0001DE38
	// succ:  l0001DE28 l0001DE38
l0001DE28:
	r2 = Mem0[r17 + 20<i32>:word32]
	r0 = 0<32>
	r1 = 0x7F<32>
	r3 = PC + 6<32>
	r2 = r16
	call errlog_function (retsize: 0;)
	goto l0001DE34
	// succ:  l0001DE34
l0001DE30:
	r2 = r16
	// succ:  l0001DE34
l0001DE34:
	r0 = 0xFFFFFFFF<32>
	// succ:  l0001DE38
l0001DE38:
	v16 = r30
	r31 = Mem0[v16 + 4<i32>:word32]
	r30 = Mem0[v16:word32]
	r29 = v16 + 8<i32>
	return
	// succ:  qsplit_check_exit
qsplit_check_exit:


// logmsg_function
// Return size: 0
define logmsg_function
logmsg_function_entry:
	r29 = fp
	// succ:  l0001DE3C
l0001DE3C:
	v4 = r29 - 8<i32>
	Mem0[v4:word32] = r30
	Mem0[v4 + 4<i32>:word32] = r31
	r30 = v4
	r29 = v4 - 8<i32>
	r3 = 2<32>
	branch r3 >u r5 l0001DE60
	// succ:  l0001DE4C l0001DE60
l0001DE4C:
	r5 = Mem0[r2 + 16<i32>:word32]
	r5 = r29 + 0x10<32>
	r3 = 2<32>
	r0 = PC + 0x25<32>
	Mem0[r29 + 1<i32>:byte] = r6
	r6 = r29 + 0x10<32>
	call logv (retsize: 0;)
	// succ:  l0001DE54_thunk_errlog_function
l0001DE54_thunk_errlog_function:
	call errlog_function (retsize: 0;)
	return
	// succ:  logmsg_function_exit
l0001DE60:
	v13 = r30
	r31 = Mem0[v13 + 4<i32>:word32]
	r30 = Mem0[v13:word32]
	r29 = v13 + 8<i32>
	return
	// succ:  logmsg_function_exit
logmsg_function_exit:


// errlog_function
// Return size: 0
define errlog_function
errlog_function_entry:
	r29 = fp
	// succ:  l0001DE64
l0001DE64:
	v4 = r29 - 8<i32>
	Mem0[v4:word32] = r30
	Mem0[v4 + 4<i32>:word32] = r31
	r30 = v4
	r29 = v4 - 8<i32>
	r4 = r3
	r0 = PC + 0xB749<32>
	Mem0[r29 + 1<i32>:byte] = r6
	r6 = r29 + 0x10<32>
	r5 = r29 + 0x10<32>
	r3 = 0<32>
	v13 = r30
	r31 = Mem0[v13 + 4<i32>:word32]
	r30 = Mem0[v13:word32]
	r29 = v13 + 8<i32>
	return
	// succ:  errlog_function_exit
errlog_function_exit:


// split_impl
// Return size: 0
define split_impl
split_impl_entry:
	r29 = fp
	// succ:  l0001DE88
l0001DE88:
	v4 = r29 - 8<i32>
	Mem0[v4:word32] = r30
	Mem0[v4 + 4<i32>:word32] = r31
	r30 = v4
	r29 = v4 - 64<i32>
	Mem0[r29 + 472<i32>:word64] = r23_r22
	r22 = r0
	Mem0[r29 + 40<i32>:word64] = r21_r20
	r4 = Mem0[r22 + 4<i32>:word32]
	Mem0[r29 + 48<i32>:word64] = r19_r18
	Mem0[r29 + 56<i32>:word64] = r17_r16
	r17_r16 = r1_r3
	Mem0[r29 + 24<i32>:word64] = r25_r24
	r21 = Mem0[r4 + 4<i32>:word32]
	r18 = r2
	Mem0[r29 + 16<i32>:word64] = r27_r26
	r23 = Mem0[r22 + 8<i32>:word32]
	r26 = Mem0[r21 + 8<i32>:word32]
	r20 = Mem0[r21 + 12<i32>:word32]
	r25 = Mem0[r21:word32]
	r27 = Mem0[r21 + 4<i32>:word32]
	r1_r0 = r16_r20
	call fn00009750 (retsize: 0;)
	r2 = Mem0[r21 + 24<i32>:word32]
	r19 = r0
	r1_r0 = r16_r2
	call fn00009760 (retsize: 0;)
	r2 = r17
	r1 = 0x46<32>
	r4 = PC + 0xB722<32>
	Mem0[r29:word32] = r22
	r24 = Mem0[r21 + 16<i32>:word32]
	r21 = r0
	call logmsg_function (retsize: 0;)
	branch p0 l0001DF24
	// succ:  l0001DEFC l0001DF24
l0001DEFC:
	p0 = r8 == 2<32>
	branch p1 l0001DF74
	// succ:  l0001DF04 l0001DF74
l0001DF04:
	p1 = r8 > 0<32>
	__loop(0<i32>, 0x0001DF04<p32>, r16)
	r4 = Mem0[r3:word32]
	branch r21 >u r5 l0001DF5C
	// succ:  l0001DF14 l0001DF5C
l0001DF14:
	r5 = Mem0[r4 + 20<i32>:word32]
	Mem0[r29:word32] = r2
	r1 = 0x4D<32>
	r3 = PC + 0x3C<32>
	goto l0001DFF4
	// succ:  l0001DFF4
l0001DF24:
	r3 = Mem0[r22 + 4<i32>:word32]
	r2 = Mem0[r22 + 8<i32>:word32]
	r0 = 0xFFFFFFFF<32>
	r2 = Mem0[r2:word32]
	r3 = Mem0[r3 + 4<i32>:word32]
	r5 = Mem0[r3 + 4<i32>:word32]
	r4 = Mem0[r3:word32]
	Mem0[r2:word32] = r4
	Mem0[r2 + 4<i32>:word32] = r5
	r1 = Mem0[r3 + 12<i32>:word32]
	r7 = Mem0[r3 + 8<i32>:word32]
	Mem0[r2 + 12<i32>:word32] = r1
	Mem0[r2 + 8<i32>:word32] = r7
	r4 = Mem0[r3 + 24<i32>:word32]
	branch r4 >u r6 l0001E000
	// succ:  l0001DF50 l0001E000
l0001DF50:
	r6 = Mem0[r2 + 20<i32>:word32]
	r1 = Mem0[r3 + 16<i32>:word32]
	r2 = Mem0[r3 + 24<i32>:word32]
	call fn00009560 (retsize: 0;)
	goto l0001E000
	// succ:  l0001E000
l0001DF5C:
	Mem0[r4 + 24<i32>:word32] = r21
	r2 = r2
	r3 = r3 + 4<i32>
	r4 = Mem0[r3:word32]
	Mem0[r4 + 8<i32>:word32] = r26
	Mem0[r4 + 4<i32>:word32] = r27
	Mem0[r4:word32] = r25
	Mem0[r4 + 12<i32>:word32] = r19
	// succ:  l0001DF74
l0001DF74:
	Mem0[r29 + 2<i32>:byte] = r2
	r1_r0 = r16_r20
	call fn00009770 (retsize: 0;)
	r2 = p1
	r20 = 0<32>
	r1 = 0x57<32>
	r1 = Mem0[r29 + 8<i32>:word64]
	r0 = 0<32>
	r2 = r27 * r26
	r17 = r19 * r18
	branch p0 l0001E000
	// succ:  l0001DFA4 l0001E000
l0001DFA4:
	p0 = r1
	r21 = r17 * r16
	r2 = r2 * r25
	r22 = r2 * r19
	// succ:  l0001DFB0
l0001DFB0:
	r19 = r20
	r25 = r22
	branch p0 l0001DFE0
l0001DFB4:
	r19 = r20
	r25 = r22
	// succ:  l0001DFBC l0001DFE0
l0001DFBC:
	p0 = r14 > 0<32>
	r2 = Mem0[r31 + r20 * 4<32>:word32]
	r18 = Mem0[r2 + 16<i32>:word32]
	r19 = r24 + r19 * r17
	// succ:  l0001DFC8
l0001DFC8:
	r19 = r19 + r21
	r2 = r17
	r1_r0 = r19_r18
	call fn00009560 (retsize: 0;)
	branch r25 == 1<32> l0001DFC8
	goto l0001DFE4
	// succ:  l0001DFE4 l0001DFC8
l0001DFE0:
	branch r20 == r16 l0001DFB0
	goto l0001DFEC
	// succ:  l0001DFEC l0001DFB0
l0001DFE4:
	r25 = r25 + 0xFFFFFFFF<32>
	r18 = r18 + r17
	branch r20 == r16 l0001DFB4
	// succ:  l0001DFEC l0001DFB4
l0001DFEC:
	r3 = PC + 0xB631<32>
	// succ:  l0001DFF4
l0001DFF4:
	r2 = r17
	call errlog_function (retsize: 0;)
	r0 = 0xFFFFFFFF<32>
	// succ:  l0001E000
l0001E000:
	r19_r18 = Mem0[r29 + 48<i32>:word64]
	r17_r16 = Mem0[r29 + 56<i32>:word64]
	r23_r22 = Mem0[r29 + 32<i32>:word64]
	r21_r20 = Mem0[r29 + 40<i32>:word64]
	r27_r26 = Mem0[r29 + 16<i32>:word64]
	r25_r24 = Mem0[r29 + 24<i32>:word64]
	v41 = r30
	r31 = Mem0[v41 + 4<i32>:word32]
	r30 = Mem0[v41:word32]
	r29 = v41 + 8<i32>
	return
	// succ:  split_impl_exit
split_impl_exit:


// tanh_execute
// Return size: 0
define tanh_execute
tanh_execute_entry:
	r29 = fp
	// succ:  l0001E020
l0001E020:
	v4 = r29 - 8<i32>
	Mem0[v4:word32] = r30
	Mem0[v4 + 4<i32>:word32] = r31
	r30 = v4
	r29 = v4 - 40<i32>
	Mem0[r29 + 496<i32>:word64] = r17_r16
	r4 = PC + 0xB6A0<32>
	r17_r16 = r0_r1
	Mem0[r29 + 16<i32>:word64] = r21_r20
	r2 = Mem0[r17 + 4<i32>:word32]
	r1 = 0x37<32>
	r3 = Mem0[r17 + 8<i32>:word32]
	Mem0[r29 + 24<i32>:word64] = r19_r18
	Mem0[r29 + 8<i32>:word64] = r23_r22
	r22 = Mem0[r3:word32]
	r21 = Mem0[r2:word32]
	r6 = Mem0[r21 + 12<i32>:word32]
	r0 = Mem0[r21:word32]
	r5 = Mem0[r21 + 8<i32>:word32]
	r7 = Mem0[r21 + 4<i32>:word32]
	r19 = Mem0[r22 + 16<i32>:word32]
	r18 = Mem0[r21 + 16<i32>:word32]
	r2 = r7 * r0
	Mem0[r29:word32] = r17
	r2 = r16
	r3 = r2 * r5
	r20 = r3 * r6
	call logmsg_function (retsize: 0;)
	r23 = r20 << 2<32>
	branch r23 >u r2 l0001E08C
	// succ:  l0001E078 l0001E08C
l0001E078:
	r2 = Mem0[r22 + 20<i32>:word32]
	r2 = r16
	r1 = 0x38<32>
	r3 = PC + 0x23<32>
	call errlog_function (retsize: 0;)
	r0 = 0xFFFFFFFF<32>
	goto l0001E0E0
	// succ:  l0001E0E0
l0001E08C:
	r3 = Mem0[r21 + 4<i32>:word32]
	r2 = Mem0[r21:word32]
	p0 = r20 == 0<32>
	Mem0[r22:word32] = r2
	Mem0[r22 + 4<i32>:word32] = r3
	r6 = Mem0[r21 + 8<i32>:word32]
	Mem0[r22 + 8<i32>:word32] = r6
	r7 = Mem0[r21 + 12<i32>:word32]
	Mem0[r22 + 24<i32>:word32] = r23
	Mem0[r22 + 12<i32>:word32] = r7
	branch p0 l0001E0C4
	// succ:  l0001E0AC l0001E0C4
l0001E0AC:
	r0 = Mem0[r18:word32]
	r20 = r20
	call fn000097F0 (retsize: 0;)
	Mem0[r19:word32] = r0
	r18 = r18 + 4<32>
	p0 = r20 == 0<32>
	r19 = r19 + 4<32>
	branch p0 l0001E0AC
	// succ:  l0001E0C4 l0001E0AC
l0001E0C4:
	r2 = r16
	r1 = 0x40<32>
	r4 = PC + 0xB621<32>
	Mem0[r29:word32] = r17
	call logmsg_function (retsize: 0;)
	r0 = 0<32>
	// succ:  l0001E0E0
l0001E0E0:
	r19_r18 = Mem0[r29 + 24<i32>:word64]
	r17_r16 = Mem0[r29 + 32<i32>:word64]
	r23_r22 = Mem0[r29 + 8<i32>:word64]
	r21_r20 = Mem0[r29 + 16<i32>:word64]
	v30 = r30
	r31 = Mem0[v30 + 4<i32>:word32]
	r30 = Mem0[v30:word32]
	r29 = v30 + 8<i32>
	return
	// succ:  tanh_execute_exit
tanh_execute_exit:


// tanh_check
// Return size: 0
define tanh_check
tanh_check_entry:
	r29 = fp
	// succ:  l0001E0EC
l0001E0EC:
	v4 = r29 - 8<i32>
	Mem0[v4:word32] = r30
	Mem0[v4 + 4<i32>:word32] = r31
	r30 = v4
	r29 = v4 - 16<i32>
	Mem0[r29 + 496<i32>:word64] = r17_r16
	r4 = PC + 0xB589<32>
	r17 = r0
	r16 = r1
	r1 = 0x46<32>
	Mem0[r29:word32] = r17
	r2 = r16
	call logmsg_function (retsize: 0;)
	branch r2 == 2<32> l0001E12C
	// succ:  l0001E118 l0001E12C
l0001E118:
	r2 = Mem0[r17 + 16<i32>:word32]
	r1 = 0x47<32>
	r3 = PC + 0x37<32>
	r2 = r16
	call errlog_function (retsize: 0;)
	// succ:  l0001E120
l0001E120:
	v16 = r30
	r31 = Mem0[v16 + 4<i32>:word32]
	r30 = Mem0[v16:word32]
	r29 = v16 + 8<i32>
	return
	// succ:  tanh_check_exit
l0001E12C:
	branch r2 == 2<32> l0001E144
	// succ:  l0001E13C l0001E144
l0001E13C:
	r2 = Mem0[r17 + 20<i32>:word32]
	r1 = 0x48<32>
	goto l0001E120
	// succ:  l0001E120
l0001E144:
	r2 = r16
	r1 = 0x49<32>
	r4 = PC + 0xB566<32>
	Mem0[r29:word32] = r17
	call logmsg_function (retsize: 0;)
	r0 = 0<32>
	v17 = r30
	r31 = Mem0[v17 + 4<i32>:word32]
	r30 = Mem0[v17:word32]
	r29 = v17 + 8<i32>
	return
	// succ:  tanh_check_exit
tanh_check_exit:


// logmsg_function
// Return size: 0
define logmsg_function
logmsg_function_entry:
	r29 = fp
	// succ:  l0001E164
l0001E164:
	v4 = r29 - 8<i32>
	Mem0[v4:word32] = r30
	Mem0[v4 + 4<i32>:word32] = r31
	r30 = v4
	r29 = v4 - 8<i32>
	r3 = 2<32>
	branch r3 >u r5 l0001E188
	// succ:  l0001E174 l0001E188
l0001E174:
	r5 = Mem0[r2 + 16<i32>:word32]
	r5 = r29 + 0x10<32>
	r3 = 2<32>
	r0 = PC + 0x29<32>
	Mem0[r29 + 1<i32>:byte] = r6
	r6 = r29 + 0x10<32>
	call logv (retsize: 0;)
	// succ:  l0001E17C_thunk_errlog_function
l0001E17C_thunk_errlog_function:
	call errlog_function (retsize: 0;)
	return
	// succ:  logmsg_function_exit
l0001E188:
	v13 = r30
	r31 = Mem0[v13 + 4<i32>:word32]
	r30 = Mem0[v13:word32]
	r29 = v13 + 8<i32>
	return
	// succ:  logmsg_function_exit
logmsg_function_exit:


// errlog_function
// Return size: 0
define errlog_function
errlog_function_entry:
	r29 = fp
	// succ:  l0001E18C
l0001E18C:
	v4 = r29 - 8<i32>
	Mem0[v4:word32] = r30
	Mem0[v4 + 4<i32>:word32] = r31
	r30 = v4
	r29 = v4 - 8<i32>
	r4 = r3
	r0 = PC + 0xB4CD<32>
	Mem0[r29 + 1<i32>:byte] = r6
	r6 = r29 + 0x10<32>
	r5 = r29 + 0x10<32>
	r3 = 0<32>
	v13 = r30
	r31 = Mem0[v13 + 4<i32>:word32]
	r30 = Mem0[v13:word32]
	r29 = v13 + 8<i32>
	return
	// succ:  errlog_function_exit
errlog_function_exit:


// sigmoid_execute
// Return size: 0
define sigmoid_execute
sigmoid_execute_entry:
	r29 = fp
	// succ:  l0001E1B0
l0001E1B0:
	v4 = r29 - 8<i32>
	Mem0[v4:word32] = r30
	Mem0[v4 + 4<i32>:word32] = r31
	r30 = v4
	r29 = v4 - 40<i32>
	Mem0[r29 + 496<i32>:word64] = r17_r16
	r4 = PC + 0xB5B2<32>
	r17_r16 = r0_r1
	Mem0[r29 + 16<i32>:word64] = r21_r20
	r2 = Mem0[r17 + 4<i32>:word32]
	r1 = 0x37<32>
	r3 = Mem0[r17 + 8<i32>:word32]
	Mem0[r29 + 24<i32>:word64] = r19_r18
	Mem0[r29 + 8<i32>:word64] = r23_r22
	r22 = Mem0[r3:word32]
	r21 = Mem0[r2:word32]
	r6 = Mem0[r21 + 12<i32>:word32]
	r0 = Mem0[r21:word32]
	r5 = Mem0[r21 + 8<i32>:word32]
	r7 = Mem0[r21 + 4<i32>:word32]
	r19 = Mem0[r22 + 16<i32>:word32]
	r18 = Mem0[r21 + 16<i32>:word32]
	r2 = r7 * r0
	Mem0[r29:word32] = r17
	r2 = r16
	r3 = r2 * r5
	r20 = r3 * r6
	call logmsg_function (retsize: 0;)
	r23 = r20 << 2<32>
	branch r23 >u r2 l0001E21C
	// succ:  l0001E208 l0001E21C
l0001E208:
	r2 = Mem0[r22 + 20<i32>:word32]
	r2 = r16
	r1 = 0x38<32>
	r3 = PC + 0x38<32>
	call errlog_function (retsize: 0;)
	r0 = 0xFFFFFFFF<32>
	goto l0001E290
	// succ:  l0001E290
l0001E21C:
	r3 = Mem0[r21 + 4<i32>:word32]
	r2 = Mem0[r21:word32]
	p0 = r20 == 0<32>
	Mem0[r22:word32] = r2
	Mem0[r22 + 4<i32>:word32] = r3
	r6 = Mem0[r21 + 8<i32>:word32]
	Mem0[r22 + 8<i32>:word32] = r6
	r7 = Mem0[r21 + 12<i32>:word32]
	r21 = 0x3F000000<32>
	Mem0[r22 + 24<i32>:word32] = r23
	Mem0[r22 + 12<i32>:word32] = r7
	branch p0 l0001E274
	// succ:  l0001E244 l0001E274
l0001E244:
	r22 = 0x3F800000<32>
	// succ:  l0001E24C
l0001E24C:
	r2 = Mem0[r18:word32]
	call fn000097F0 (retsize: 0;)
	r0 = r2 * r21
	r20 = r20
	r18 = r18 + 4<32>
	r2 = r0 + r22
	p0 = r20 == 0<32>
	Mem0[r19:byte] = r2
	r19 = r19 + 4<32>
	branch p0 l0001E24C
	goto l0001E278
	// succ:  l0001E278 l0001E24C
l0001E274:
	r2 = r16
	r1 = 0x40<32>
	r4 = PC + 0xB516<32>
	goto l0001E284
	// succ:  l0001E284
l0001E278:
	r2 = r2 * r21
	r2 = r16
	r1 = 0x40<32>
	r4 = PC + 0x16<32>
	// succ:  l0001E284
l0001E284:
	Mem0[r29:word32] = r17
	call logmsg_function (retsize: 0;)
	r0 = 0<32>
	// succ:  l0001E290
l0001E290:
	r19_r18 = Mem0[r29 + 24<i32>:word64]
	r17_r16 = Mem0[r29 + 32<i32>:word64]
	r23_r22 = Mem0[r29 + 8<i32>:word64]
	r21_r20 = Mem0[r29 + 16<i32>:word64]
	v30 = r30
	r31 = Mem0[v30 + 4<i32>:word32]
	r30 = Mem0[v30:word32]
	r29 = v30 + 8<i32>
	return
	// succ:  sigmoid_execute_exit
sigmoid_execute_exit:


// sigmoid_check
// Return size: 0
define sigmoid_check
sigmoid_check_entry:
	r29 = fp
	// succ:  l0001E29C
l0001E29C:
	v4 = r29 - 8<i32>
	Mem0[v4:word32] = r30
	Mem0[v4 + 4<i32>:word32] = r31
	r30 = v4
	r29 = v4 - 16<i32>
	Mem0[r29 + 496<i32>:word64] = r17_r16
	r4 = PC + 0xB475<32>
	r17 = r0
	r16 = r1
	r1 = 0x46<32>
	Mem0[r29:word32] = r17
	r2 = r16
	call logmsg_function (retsize: 0;)
	branch r2 == 2<32> l0001E2DC
	// succ:  l0001E2C8 l0001E2DC
l0001E2C8:
	r2 = Mem0[r17 + 16<i32>:word32]
	r1 = 0x47<32>
	r3 = PC + 0x26<32>
	r2 = r16
	call errlog_function (retsize: 0;)
	// succ:  l0001E2D0
l0001E2D0:
	v16 = r30
	r31 = Mem0[v16 + 4<i32>:word32]
	r30 = Mem0[v16:word32]
	r29 = v16 + 8<i32>
	return
	// succ:  sigmoid_check_exit
l0001E2DC:
	branch r2 == 2<32> l0001E2F4
	// succ:  l0001E2EC l0001E2F4
l0001E2EC:
	r2 = Mem0[r17 + 20<i32>:word32]
	r1 = 0x48<32>
	goto l0001E2D0
	// succ:  l0001E2D0
l0001E2F4:
	r2 = r16
	r1 = 0x49<32>
	r4 = PC + 0xB455<32>
	Mem0[r29:word32] = r17
	call logmsg_function (retsize: 0;)
	r0 = 0<32>
	v17 = r30
	r31 = Mem0[v17 + 4<i32>:word32]
	r30 = Mem0[v17:word32]
	r29 = v17 + 8<i32>
	return
	// succ:  sigmoid_check_exit
sigmoid_check_exit:


// logmsg_function
// Return size: 0
define logmsg_function
logmsg_function_entry:
	r29 = fp
	// succ:  l0001E314
l0001E314:
	v4 = r29 - 8<i32>
	Mem0[v4:word32] = r30
	Mem0[v4 + 4<i32>:word32] = r31
	r30 = v4
	r29 = v4 - 8<i32>
	r3 = 2<32>
	branch r3 >u r5 l0001E338
	// succ:  l0001E324 l0001E338
l0001E324:
	r5 = Mem0[r2 + 16<i32>:word32]
	r5 = r29 + 0x10<32>
	r3 = 2<32>
	r0 = PC + 0x12<32>
	Mem0[r29 + 1<i32>:byte] = r6
	r6 = r29 + 0x10<32>
	call logv (retsize: 0;)
	// succ:  l0001E32C_thunk_errlog_function
l0001E32C_thunk_errlog_function:
	call errlog_function (retsize: 0;)
	return
	// succ:  logmsg_function_exit
l0001E338:
	v13 = r30
	r31 = Mem0[v13 + 4<i32>:word32]
	r30 = Mem0[v13:word32]
	r29 = v13 + 8<i32>
	return
	// succ:  logmsg_function_exit
logmsg_function_exit:


// errlog_function
// Return size: 0
define errlog_function
errlog_function_entry:
	r29 = fp
	// succ:  l0001E33C
l0001E33C:
	v4 = r29 - 8<i32>
	Mem0[v4:word32] = r30
	Mem0[v4 + 4<i32>:word32] = r31
	r30 = v4
	r29 = v4 - 8<i32>
	r4 = r3
	r0 = PC + 0xB3B6<32>
	Mem0[r29 + 1<i32>:byte] = r6
	r6 = r29 + 0x10<32>
	r5 = r29 + 0x10<32>
	r3 = 0<32>
	v13 = r30
	r31 = Mem0[v13 + 4<i32>:word32]
	r30 = Mem0[v13:word32]
	r29 = v13 + 8<i32>
	return
	// succ:  errlog_function_exit
errlog_function_exit:


// qtanh_execute_ref
// Return size: 0
define qtanh_execute_ref
qtanh_execute_ref_entry:
	r29 = fp
	// succ:  l0001E360
l0001E360:
	v4 = r29 - 8<i32>
	Mem0[v4:word32] = r30
	Mem0[v4 + 4<i32>:word32] = r31
	r30 = v4
	r29 = v4 - 64<i32>
	Mem0[r29 + 496<i32>:word64] = r17_r16
	r17_r16 = r1_r0
	Mem0[r29 + 16<i32>:word64] = r27_r26
	r2 = Mem0[r16 + 4<i32>:word32]
	r7 = Mem0[r16 + 8<i32>:word32]
	Mem0[r29 + 48<i32>:word64] = r19_r18
	Mem0[r29 + 32<i32>:word64] = r23_r22
	r18 = 0x437F0000<32>
	r4 = Mem0[r2 + 4<i32>:word32]
	r26 = Mem0[r2:word32]
	r1 = r18
	r27 = Mem0[r7:word32]
	r2 = Mem0[r2 + 8<i32>:word32]
	r0 = Mem0[r26 + 4<i32>:word32]
	r4 = Mem0[r4 + 16<i32>:word32]
	r6 = Mem0[r26:word32]
	r2 = Mem0[r2 + 16<i32>:word32]
	r5 = Mem0[r26 + 12<i32>:word32]
	r23 = Mem0[r4:word32]
	r6 = Mem0[r26 + 8<i32>:word32]
	r2 = Mem0[r2:word32]
	r3 = r0 * r6
	Mem0[r29 + 24<i32>:word64] = r25_r24
	Mem0[r29 + 40<i32>:word64] = r21_r20
	r21 = Mem0[r7 + 4<i32>:word32]
	r20 = Mem0[r7 + 8<i32>:word32]
	r0 = r2 - r23
	r2 = r3 * r6
	r24 = Mem0[r27 + 16<i32>:word32]
	r22 = Mem0[r26 + 16<i32>:word32]
	call fn00009610 (retsize: 0;)
	r25 = r2 * r5
	r2 = r17
	r1 = 0x42<32>
	r4 = PC + 0xB53E<32>
	Mem0[r29:word32] = r16
	r19 = r0
	call logmsg_function (retsize: 0;)
	branch r25 >u r2 l0001E41C
	// succ:  l0001E404 l0001E41C
l0001E404:
	r2 = Mem0[r27 + 20<i32>:word32]
	p0 = r25 == 0<32>
	r2 = r17
	r1 = 0x43<32>
	r3 = PC + 3<32>
	call errlog_function (retsize: 0;)
	r0 = 0xFFFFFFFF<32>
	goto l0001E4E8
	// succ:  l0001E4E8
l0001E41C:
	r3 = Mem0[r26 + 4<i32>:word32]
	r2 = Mem0[r26:word32]
	Mem0[r27:word32] = r2
	Mem0[r27 + 4<i32>:word32] = r3
	r6 = Mem0[r26 + 8<i32>:word32]
	Mem0[r27 + 8<i32>:word32] = r6
	Mem0[r29 + 12<i32>:word32] = r17
	r7 = Mem0[r26 + 12<i32>:word32]
	r17 = 0x3F000000<32>
	Mem0[r27 + 24<i32>:word32] = r25
	Mem0[r27 + 12<i32>:word32] = r7
	branch p0 l0001E49C
	// succ:  l0001E450 l0001E49C
l0001E450:
	r27 = 0x3F800000<32>
	r26 = 0x42FF0000<32>
	// succ:  l0001E460
l0001E460:
	r22 = r22 + 1<i32>
	r2 = Mem0[r22:byte]
	r0 = r23
	r2 = CONVERT(r2, int32, real32)
	call fn000097F0 (retsize: 0;)
	r0 = r0 + r19 * r2
	r25 = r25 + 0xFFFFFFFF<32>
	r2 = r17
	r3 = r0 + r27
	p0 = r25 == 0<32>
	r2 = r2 + r3 * r26
	r3 = CONVERT(r2, real32, uint32)
	r3 = 0xFFFFFFFF<32>
	p1 = r2 > r18
	Mem0[r24:byte] = r3
	r24 = r24 + 1<i32>
	branch p0 l0001E460
	// succ:  l0001E49C l0001E460
l0001E49C:
	Mem0[r21 + 12<i32>:word32] = 1<32>
	r2 = Mem0[r21 + 16<i32>:word32]
	r4 = PC + 0xB4B5<32>
	Mem0[r21:word32] = 1<32>
	Mem0[r21 + 8<i32>:word32] = 1<32>
	r1 = 0x56<32>
	Mem0[r2:word32] = 0xBF800000<32>
	Mem0[r21 + 4<i32>:word32] = 0xFFFFFF81<32>
	Mem0[r21 + 24<i32>:word32] = 4<32>
	r2 = Mem0[r29 + 12<i32>:word32]
	Mem0[r20 + 8<i32>:word32] = 1<32>
	r3 = Mem0[r20 + 16<i32>:word32]
	Mem0[r20 + 4<i32>:word32] = 1<32>
	Mem0[r20:word32] = 1<32>
	Mem0[r3:word32] = 0x3F800000<32>
	Mem0[r20 + 12<i32>:word32] = 0xFFFFFF81<32>
	Mem0[r29:word32] = r16
	Mem0[r20 + 24<i32>:word32] = 4<32>
	call logmsg_function (retsize: 0;)
	r0 = 0<32>
	// succ:  l0001E4E8
l0001E4E8:
	r19_r18 = Mem0[r29 + 48<i32>:word64]
	r17_r16 = Mem0[r29 + 56<i32>:word64]
	r23_r22 = Mem0[r29 + 32<i32>:word64]
	r21_r20 = Mem0[r29 + 40<i32>:word64]
	r27_r26 = Mem0[r29 + 16<i32>:word64]
	r25_r24 = Mem0[r29 + 24<i32>:word64]
	v37 = r30
	r31 = Mem0[v37 + 4<i32>:word32]
	r30 = Mem0[v37:word32]
	r29 = v37 + 8<i32>
	return
	// succ:  qtanh_execute_ref_exit
qtanh_execute_ref_exit:


// qtanh_check
// Return size: 0
define qtanh_check
qtanh_check_entry:
	r29 = fp
	// succ:  l0001E500
l0001E500:
	v4 = r29 - 8<i32>
	Mem0[v4:word32] = r30
	Mem0[v4 + 4<i32>:word32] = r31
	r30 = v4
	r29 = v4 - 16<i32>
	Mem0[r29 + 496<i32>:word64] = r17_r16
	r4 = PC + 0xB45E<32>
	r17 = r0
	r16 = r1
	r1 = 0x94<32>
	Mem0[r29:word32] = r17
	r2 = r16
	call logmsg_function (retsize: 0;)
	branch r2 == 6<32> l0001E540
	// succ:  l0001E52C l0001E540
l0001E52C:
	r2 = Mem0[r17 + 16<i32>:word32]
	r1 = 0x95<32>
	r3 = PC + 0xC<32>
	r2 = r16
	call errlog_function (retsize: 0;)
	// succ:  l0001E534
l0001E534:
	v16 = r30
	r31 = Mem0[v16 + 4<i32>:word32]
	r30 = Mem0[v16:word32]
	r29 = v16 + 8<i32>
	return
	// succ:  qtanh_check_exit
l0001E540:
	branch r2 == 6<32> l0001E558
	// succ:  l0001E550 l0001E558
l0001E550:
	r2 = Mem0[r17 + 20<i32>:word32]
	r1 = 0x96<32>
	goto l0001E534
	// succ:  l0001E534
l0001E558:
	r2 = r16
	r1 = 0x97<32>
	r4 = PC + 0xB43B<32>
	Mem0[r29:word32] = r17
	call logmsg_function (retsize: 0;)
	r0 = 0<32>
	v17 = r30
	r31 = Mem0[v17 + 4<i32>:word32]
	r30 = Mem0[v17:word32]
	r29 = v17 + 8<i32>
	return
	// succ:  qtanh_check_exit
qtanh_check_exit:


// qtanh_execute_hvx
// Return size: 0
define qtanh_execute_hvx
qtanh_execute_hvx_entry:
	r29 = fp
	// succ:  l0001E580
l0001E580:
	v4 = r29 - 8<i32>
	Mem0[v4:word32] = r30
	Mem0[v4 + 4<i32>:word32] = r31
	r30 = v4
	r29 = v4 - 80<i32>
	Mem0[r29 + 496<i32>:word64] = r17_r16
	r4 = PC + 0xB39A<32>
	r17_r16 = r1_r0
	Mem0[r29 + 64<i32>:word64] = r19_r18
	r3 = Mem0[r16 + 4<i32>:word32]
	r1 = 0x72<32>
	r5 = Mem0[r16 + 8<i32>:word32]
	r2 = r17
	Mem0[r29 + 40<i32>:word64] = r25_r24
	Mem0[r29 + 56<i32>:word64] = r21_r20
	r7 = Mem0[r3 + 4<i32>:word32]
	r6 = Mem0[r3 + 8<i32>:word32]
	r18 = Mem0[r5:word32]
	r0 = Mem0[r5 + 4<i32>:word32]
	r21 = Mem0[r3:word32]
	r5 = Mem0[r5 + 8<i32>:word32]
	r3 = Mem0[r7 + 16<i32>:word32]
	Mem0[r29 + 28<i32>:word32] = r5
	r5 = Mem0[r6 + 16<i32>:word32]
	Mem0[r29 + 48<i32>:word64] = r23_r22
	Mem0[r29 + 32<i32>:word64] = r27_r26
	r7 = Mem0[r18 + 16<i32>:word32]
	r25 = Mem0[r17 + 4<i32>:word32]
	Mem0[r29 + 20<i32>:word32] = r0
	r23 = Mem0[r21 + 16<i32>:word32]
	r22 = Mem0[r21 + 4<i32>:word32]
	r20 = Mem0[r21 + 8<i32>:word32]
	r27 = Mem0[r21:word32]
	r26 = Mem0[r21 + 12<i32>:word32]
	Mem0[r29 + 24<i32>:word32] = r7
	r19 = Mem0[r3:word32]
	r24 = Mem0[r5:word32]
	Mem0[r29:word32] = r16
	call logmsg_function (retsize: 0;)
	branch r2 == 0<32> l0001E60C
	// succ:  l0001E5F8 l0001E60C
l0001E5F8:
	r2 = Mem0[r16 + 32<i32>:int8]
	r1 = 0x73<32>
	r3 = PC + 0x3D<32>
	r2 = r17
	call errlog_function (retsize: 0;)
	// succ:  l0001E600
l0001E600:
	r0 = 0xFFFFFFFF<32>
	goto l0001E964
	// succ:  l0001E964
l0001E60C:
	r3 = Mem0[r18 + 20<i32>:word32]
	r1 = 0x74<32>
	r2 = r22 * r27
	r2 = r2 * r20
	branch r20 >u r3 l0001E630
	// succ:  l0001E628 l0001E630
l0001E628:
	r20 = r2 * r26
	goto l0001E600
	// succ:  l0001E600
l0001E630:
	Mem0[r29 + 12<i32>:word32] = r2
	r3 = Mem0[r21:word32]
	r2 = 0xFF<32>
	r22 = r20 + 0xFF<32>
	Mem0[r18 + 1<i32>:byte] = r4
	r4 = Mem0[r21 + 4<i32>:word32]
	r0 = r25
	r27 = r22 & 0xFFFFFF00<32>
	Mem0[r18:word32] = r3
	r2 = Mem0[r21 + 8<i32>:word32]
	r1 = 0<32>
	r3 = r22 + r0
	Mem0[r29 + 16<i32>:word32] = r0
	Mem0[r18 + 8<i32>:word32] = r2
	r2 = r27
	r7 = Mem0[r21 + 12<i32>:word32]
	Mem0[r18 + 24<i32>:word32] = r20
	Mem0[r18 + 12<i32>:word32] = r7
	r21 = r3 & 0xFFFFFF00<32>
	call fn000095F0 (retsize: 0;)
	call fn000095F0 (retsize: 0;)
	r2 = r27
	r1_r0 = r23_r21
	r2 = r20
	call fn00009560 (retsize: 0;)
	r2 = 0xC0800000<32>
	r1 = r24 - r19
	branch p0 l0001E76C
	// succ:  l0001E6A0 l0001E76C
l0001E6A0:
	p0 = <invalid>
	r18 = 0x40800000<32>
	branch p0 l0001E76C
	// succ:  l0001E6B0 l0001E76C
l0001E6B0:
	p0 = <invalid>
	r2 = 0x437F0000<32>
	r1_r0 = r2_r1
	call fn00009610 (retsize: 0;)
	r23 = r0
	r2 = r19 + r18
	r1_r0 = r23_r2
	call fn00009610 (retsize: 0;)
	r2 = 0x41700000<32>
	r18 = truncf(CONVERT(r0, uint32, real32))
	r0 = r2
	call fn000097C0 (retsize: 0;)
	r3 = 0xBF800000<32>
	r2 = 0x41FF0000<32>
	r25 = Mem0[r29 + 20<i32>:word32]
	p0 = r20 > 0<32>
	r3 = r0 + r3
	r2 = r23 * r2
	r3 = truncf(CONVERT(r3, uint32, real32))
	r2 = r2 * r0
	r2 = Mem0[r29 + 12<i32>:word32]
	branch p0 l0001E828
	// succ:  l0001E718 l0001E828
l0001E718:
	r4 = truncf(CONVERT(r2, uint32, real32))
	r5 = truncf(CONVERT(r0, uint32, real32))
	r3 = r4 + 0<32>
	p0 = r4 > r3
	r5 = r5 + (r5 >>u 0x1F<32>)
	r3 = CONVERT(SLICE(r3, int16, 0), int16, int32)
	r2 = r21
	r6 = r2 * r26
	r4 = r5 >> 1<32>
	__loop(0<i32>, 0x0001E738<p32>, r6)
	r6 = Mem0[r2:byte]
	r7 = r4
	r5 = 0xFF<32>
	r6 = r6 + r18
	r7 = r7 + r6 * r3
	r6 = r7 >> 0xF<32>
	r5 = r6 + 0<32>
	p0 = r6 > 0xFF<32>
	branch p0 l0001E760
	// succ:  l0001E758 l0001E760
l0001E758:
	r5 = 0<32>
	p0 = r6 > 0xFFFFFFFF<32>
	// succ:  l0001E760
l0001E760:
	Mem0[r2:byte] = r5
	r2 = r2 + 1<i32>
	goto l0001E828
	// succ:  l0001E828
l0001E76C:
	r0 = 0x38D1B717<32>
	call fn00009600 (retsize: 0;)
	r1 = 0x437F0000<32>
	call fn00009610 (retsize: 0;)
	r25 = Mem0[r29 + 20<i32>:word32]
	r3 = r21 + r22
	branch p0 l0001E828
	// succ:  l0001E790 l0001E828
l0001E790:
	p0 = r12 > 0<32>
	r22 = r3 & 0xFFFFFF00<32>
	__loop(0<i32>, 0x0001E79C<p32>, r20)
	r3_r2 = r22_r21
	r2 = r2 + 1<i32>
	r4 = Mem0[r2:byte]
	r5 = r19
	r4 = CONVERT(r4, int32, real32)
	r3 = r3 + 4<32>
	r5 = r5 + r0 * r4
	r1 = 0x41000000<32>
	r0 = 0x17<32>
	call fn00009600 (retsize: 0;)
	r2 = 0x437F0000<32>
	r1_r0 = r0_r2
	call fn00009610 (retsize: 0;)
	r2 = Mem0[r29 + 12<i32>:word64]
	r23 = r0
	r18 = r21
	r24 = 0x40800000<32>
	r19 = r2 * r26
	// succ:  l0001E7EC
l0001E7EC:
	r2 = Mem0[r22:word32]
	r2 = r2 + r24
	call fn00009620 (retsize: 0;)
	r0 = r23 * r2
	r2 = 0xFF<32>
	r3 = truncf(CONVERT(r0, uint32, real32))
	r2 = r3 + 0<32>
	p0 = r3 > 0xFF<32>
	branch p0 l0001E818
	// succ:  l0001E810 l0001E818
l0001E810:
	r2 = 0<32>
	p0 = r3 > 0xFFFFFFFF<32>
	// succ:  l0001E818
l0001E818:
	Mem0[r18:byte] = r2
	r18 = r18 + 1<i32>
	r22 = r22 + 4<32>
	r19 = r19 + 0xFFFFFFFF<32>
	branch p0 l0001E7EC
	// succ:  l0001E828 l0001E7EC
l0001E828:
	r3 = 0x1010101<32>
	r2 = PC + 0xC8E8<32>
	r5 = 0x80808080<32>
	r4 = 0x4040404<32>
	r7 = 0x7070707<32>
	r6 = 0xF8F8F8F8<32>
	p0 = r27 > 0<32>
	r4 = Mem0[r2 - 48<i32>:word32]
	branch p0 l0001E900
	// succ:  l0001E87C l0001E900
l0001E87C:
	r6 = 7<32>
	r2 = r27 + 0x7F<32>
	r7 = 0<32>
	r5 = r2 >>u 7<32>
	r2 = Mem0[r29 + 16<i32>:word32]
	r3 = 3<32>
	__loop(0<i32>, 0x0001E8A8<p32>, r5)
	// succ:  l0001E900
l0001E900:
	r0 = Mem0[r29 + 24<i32>:word64]
	r1 = Mem0[r29 + 16<i32>:word64]
	r2 = r20
	call fn00009560 (retsize: 0;)
	r5 = Mem0[r29 + 28<i32>:word32]
	r2 = Mem0[r25 + 16<i32>:word32]
	r4 = PC + 0xB045<32>
	Mem0[r25 + 8<i32>:word32] = 1<32>
	Mem0[r25 + 12<i32>:word32] = 0xFFFFFF81<32>
	r1 = 0x8E<32>
	Mem0[r25 + 4<i32>:word32] = 0xFFFFFF81<32>
	Mem0[r25:word32] = 1<32>
	Mem0[r25 + 24<i32>:word32] = 4<32>
	Mem0[r2:word32] = 0xBF800000<32>
	r2 = r17
	Mem0[r5 + 8<i32>:word32] = 1<32>
	r3 = Mem0[r5 + 16<i32>:word32]
	Mem0[r5 + 4<i32>:word32] = 1<32>
	Mem0[r5:word32] = 1<32>
	Mem0[r3:word32] = 0x3F800000<32>
	Mem0[r5 + 12<i32>:word32] = 0xFFFFFF81<32>
	Mem0[r29:word32] = r16
	Mem0[r5 + 24<i32>:word32] = 4<32>
	call logmsg_function (retsize: 0;)
	r0 = 0<32>
	// succ:  l0001E964
l0001E964:
	r19_r18 = Mem0[r29 + 64<i32>:word64]
	r17_r16 = Mem0[r29 + 72<i32>:word64]
	r23_r22 = Mem0[r29 + 48<i32>:word64]
	r21_r20 = Mem0[r29 + 56<i32>:word64]
	r27_r26 = Mem0[r29 + 32<i32>:word64]
	r25_r24 = Mem0[r29 + 40<i32>:word64]
	v35 = r30
	r31 = Mem0[v35 + 4<i32>:word32]
	r30 = Mem0[v35:word32]
	r29 = v35 + 8<i32>
	return
	// succ:  qtanh_execute_hvx_exit
qtanh_execute_hvx_exit:


// logmsg_function
// Return size: 0
define logmsg_function
logmsg_function_entry:
	r29 = fp
	// succ:  l0001E978
l0001E978:
	v4 = r29 - 8<i32>
	Mem0[v4:word32] = r30
	Mem0[v4 + 4<i32>:word32] = r31
	r30 = v4
	r29 = v4 - 8<i32>
	r3 = 2<32>
	branch r3 >u r5 l0001E99C
	// succ:  l0001E988 l0001E99C
l0001E988:
	r5 = Mem0[r2 + 16<i32>:word32]
	r5 = r29 + 0x10<32>
	r3 = 2<32>
	r0 = PC + 0x3C<32>
	Mem0[r29 + 1<i32>:byte] = r6
	r6 = r29 + 0x10<32>
	call logv (retsize: 0;)
	// succ:  l0001E990_thunk_errlog_function
l0001E990_thunk_errlog_function:
	call errlog_function (retsize: 0;)
	return
	// succ:  logmsg_function_exit
l0001E99C:
	v13 = r30
	r31 = Mem0[v13 + 4<i32>:word32]
	r30 = Mem0[v13:word32]
	r29 = v13 + 8<i32>
	return
	// succ:  logmsg_function_exit
logmsg_function_exit:


// errlog_function
// Return size: 0
define errlog_function
errlog_function_entry:
	r29 = fp
	// succ:  l0001E9A0
l0001E9A0:
	v4 = r29 - 8<i32>
	Mem0[v4:word32] = r30
	Mem0[v4 + 4<i32>:word32] = r31
	r30 = v4
	r29 = v4 - 8<i32>
	r4 = r3
	r0 = PC + 0xAF60<32>
	Mem0[r29 + 1<i32>:byte] = r6
	r6 = r29 + 0x10<32>
	r5 = r29 + 0x10<32>
	r3 = 0<32>
	v13 = r30
	r31 = Mem0[v13 + 4<i32>:word32]
	r30 = Mem0[v13:word32]
	r29 = v13 + 8<i32>
	return
	// succ:  errlog_function_exit
errlog_function_exit:


// qsigmoid_execute_ref
// Return size: 0
define qsigmoid_execute_ref
qsigmoid_execute_ref_entry:
	r29 = fp
	// succ:  l0001E9D0
l0001E9D0:
	v4 = r29 - 8<i32>
	Mem0[v4:word32] = r30
	Mem0[v4 + 4<i32>:word32] = r31
	r30 = v4
	r29 = v4 - 64<i32>
	Mem0[r29 + 496<i32>:word64] = r17_r16
	r17_r16 = r1_r0
	Mem0[r29 + 16<i32>:word64] = r27_r26
	r2 = Mem0[r16 + 4<i32>:word32]
	r7 = Mem0[r16 + 8<i32>:word32]
	Mem0[r29 + 48<i32>:word64] = r19_r18
	Mem0[r29 + 32<i32>:word64] = r23_r22
	r18 = 0x437F0000<32>
	r4 = Mem0[r2 + 4<i32>:word32]
	r26 = Mem0[r2:word32]
	r1 = r18
	r27 = Mem0[r7:word32]
	r2 = Mem0[r2 + 8<i32>:word32]
	r0 = Mem0[r26 + 4<i32>:word32]
	r4 = Mem0[r4 + 16<i32>:word32]
	r6 = Mem0[r26:word32]
	r2 = Mem0[r2 + 16<i32>:word32]
	r5 = Mem0[r26 + 12<i32>:word32]
	r23 = Mem0[r4:word32]
	r6 = Mem0[r26 + 8<i32>:word32]
	r2 = Mem0[r2:word32]
	r3 = r0 * r6
	Mem0[r29 + 24<i32>:word64] = r25_r24
	Mem0[r29 + 40<i32>:word64] = r21_r20
	r21 = Mem0[r7 + 4<i32>:word32]
	r20 = Mem0[r7 + 8<i32>:word32]
	r0 = r2 - r23
	r2 = r3 * r6
	r24 = Mem0[r27 + 16<i32>:word32]
	r22 = Mem0[r26 + 16<i32>:word32]
	call fn00009610 (retsize: 0;)
	r25 = r2 * r5
	r2 = r17
	r1 = 0x42<32>
	r4 = PC + 0xB0D1<32>
	Mem0[r29:word32] = r16
	r19 = r0
	call logmsg_function (retsize: 0;)
	branch r25 >u r2 l0001EA8C
	// succ:  l0001EA74 l0001EA8C
l0001EA74:
	r2 = Mem0[r27 + 20<i32>:word32]
	p0 = r25 == 0<32>
	r2 = r17
	r1 = 0x43<32>
	r3 = PC + 0x19<32>
	call errlog_function (retsize: 0;)
	r0 = 0xFFFFFFFF<32>
	goto l0001EB54
	// succ:  l0001EB54
l0001EA8C:
	r3 = Mem0[r26 + 4<i32>:word32]
	r2 = Mem0[r26:word32]
	Mem0[r27:word32] = r2
	Mem0[r27 + 4<i32>:word32] = r3
	r6 = Mem0[r26 + 8<i32>:word32]
	Mem0[r27 + 8<i32>:word32] = r6
	Mem0[r29 + 12<i32>:word32] = r17
	r7 = Mem0[r26 + 12<i32>:word32]
	r17 = 0x42FF0000<32>
	Mem0[r27 + 24<i32>:word32] = r25
	Mem0[r27 + 12<i32>:word32] = r7
	branch p0 l0001EB10
	// succ:  l0001EAC0 l0001EB10
l0001EAC0:
	r27 = 0x3F000000<32>
	r26 = 0x3F800000<32>
	// succ:  l0001EAD0
l0001EAD0:
	r22 = r22 + 1<i32>
	r2 = Mem0[r22:byte]
	r3 = r23
	r2 = CONVERT(r2, int32, real32)
	r3 = r3 + r19 * r2
	call fn000097F0 (retsize: 0;)
	r0 = r3 * r27
	r25 = r25 + 0xFFFFFFFF<32>
	r2 = r27
	r3 = r0 + r26
	p0 = r25 == 0<32>
	r2 = r2 + r3 * r17
	r3 = CONVERT(r2, real32, uint32)
	r3 = 0xFFFFFFFF<32>
	p1 = r2 > r18
	Mem0[r24:byte] = r3
	r24 = r24 + 1<i32>
	branch p0 l0001EAD0
	// succ:  l0001EB10 l0001EAD0
l0001EB10:
	Mem0[r21 + 12<i32>:word32] = 1<32>
	r2 = Mem0[r21 + 16<i32>:word32]
	r4 = PC + 0xB047<32>
	Mem0[r21:word32] = 1<32>
	Mem0[r21 + 8<i32>:word32] = 1<32>
	r1 = 0x57<32>
	Mem0[r2:word32] = 0<32>
	Mem0[r21 + 4<i32>:word32] = 1<32>
	Mem0[r21 + 24<i32>:word32] = 4<32>
	r2 = Mem0[r29 + 12<i32>:word32]
	Mem0[r20 + 8<i32>:word32] = 1<32>
	r3 = Mem0[r20 + 16<i32>:word32]
	Mem0[r20 + 4<i32>:word32] = 1<32>
	Mem0[r20:word32] = 1<32>
	Mem0[r3:word32] = 0x3F800000<32>
	Mem0[r20 + 12<i32>:word32] = 0xFFFFFF81<32>
	Mem0[r29:word32] = r16
	Mem0[r20 + 24<i32>:word32] = 4<32>
	call logmsg_function (retsize: 0;)
	r0 = 0<32>
	// succ:  l0001EB54
l0001EB54:
	r19_r18 = Mem0[r29 + 48<i32>:word64]
	r17_r16 = Mem0[r29 + 56<i32>:word64]
	r23_r22 = Mem0[r29 + 32<i32>:word64]
	r21_r20 = Mem0[r29 + 40<i32>:word64]
	r27_r26 = Mem0[r29 + 16<i32>:word64]
	r25_r24 = Mem0[r29 + 24<i32>:word64]
	v37 = r30
	r31 = Mem0[v37 + 4<i32>:word32]
	r30 = Mem0[v37:word32]
	r29 = v37 + 8<i32>
	return
	// succ:  qsigmoid_execute_ref_exit
qsigmoid_execute_ref_exit:


// qsigmoid_check
// Return size: 0
define qsigmoid_check
qsigmoid_check_entry:
	r29 = fp
	// succ:  l0001EB70
l0001EB70:
	v4 = r29 - 8<i32>
	Mem0[v4:word32] = r30
	Mem0[v4 + 4<i32>:word32] = r31
	r30 = v4
	r29 = v4 - 16<i32>
	Mem0[r29 + 496<i32>:word64] = r17_r16
	r4 = PC + 0xAFF7<32>
	r17 = r0
	r16 = r1
	r1 = 0x95<32>
	Mem0[r29:word32] = r17
	r2 = r16
	call logmsg_function (retsize: 0;)
	branch r2 == 6<32> l0001EBB0
	// succ:  l0001EB9C l0001EBB0
l0001EB9C:
	r2 = Mem0[r17 + 16<i32>:word32]
	r1 = 0x96<32>
	r3 = PC + 0x28<32>
	r2 = r16
	call errlog_function (retsize: 0;)
	// succ:  l0001EBA4
l0001EBA4:
	v16 = r30
	r31 = Mem0[v16 + 4<i32>:word32]
	r30 = Mem0[v16:word32]
	r29 = v16 + 8<i32>
	return
	// succ:  qsigmoid_check_exit
l0001EBB0:
	branch r2 == 6<32> l0001EBC8
	// succ:  l0001EBC0 l0001EBC8
l0001EBC0:
	r2 = Mem0[r17 + 20<i32>:word32]
	r1 = 0x97<32>
	goto l0001EBA4
	// succ:  l0001EBA4
l0001EBC8:
	r2 = r16
	r1 = 0x98<32>
	r4 = PC + 0xAFD7<32>
	Mem0[r29:word32] = r17
	call logmsg_function (retsize: 0;)
	r0 = 0<32>
	v17 = r30
	r31 = Mem0[v17 + 4<i32>:word32]
	r30 = Mem0[v17:word32]
	r29 = v17 + 8<i32>
	return
	// succ:  qsigmoid_check_exit
qsigmoid_check_exit:


// qsigmoid_execute_hvx
// Return size: 0
define qsigmoid_execute_hvx
qsigmoid_execute_hvx_entry:
	r29 = fp
	// succ:  l0001EBF0
l0001EBF0:
	v4 = r29 - 8<i32>
	Mem0[v4:word32] = r30
	Mem0[v4 + 4<i32>:word32] = r31
	r30 = v4
	r29 = v4 - 80<i32>
	Mem0[r29 + 496<i32>:word64] = r17_r16
	r4 = PC + 0xAF2D<32>
	r17_r16 = r1_r0
	Mem0[r29 + 64<i32>:word64] = r19_r18
	r3 = Mem0[r16 + 4<i32>:word32]
	r1 = 0x73<32>
	r5 = Mem0[r16 + 8<i32>:word32]
	r2 = r17
	Mem0[r29 + 40<i32>:word64] = r25_r24
	Mem0[r29 + 56<i32>:word64] = r21_r20
	r7 = Mem0[r3 + 4<i32>:word32]
	r6 = Mem0[r3 + 8<i32>:word32]
	r18 = Mem0[r5:word32]
	r0 = Mem0[r5 + 4<i32>:word32]
	r21 = Mem0[r3:word32]
	r5 = Mem0[r5 + 8<i32>:word32]
	r3 = Mem0[r7 + 16<i32>:word32]
	Mem0[r29 + 28<i32>:word32] = r5
	r5 = Mem0[r6 + 16<i32>:word32]
	Mem0[r29 + 48<i32>:word64] = r23_r22
	Mem0[r29 + 32<i32>:word64] = r27_r26
	r7 = Mem0[r18 + 16<i32>:word32]
	r25 = Mem0[r17 + 4<i32>:word32]
	Mem0[r29 + 20<i32>:word32] = r0
	r23 = Mem0[r21 + 16<i32>:word32]
	r22 = Mem0[r21 + 4<i32>:word32]
	r20 = Mem0[r21 + 8<i32>:word32]
	r27 = Mem0[r21:word32]
	r26 = Mem0[r21 + 12<i32>:word32]
	Mem0[r29 + 24<i32>:word32] = r7
	r19 = Mem0[r3:word32]
	r24 = Mem0[r5:word32]
	Mem0[r29:word32] = r16
	call logmsg_function (retsize: 0;)
	branch r2 == 0<32> l0001EC7C
	// succ:  l0001EC68 l0001EC7C
l0001EC68:
	r2 = Mem0[r16 + 32<i32>:int8]
	r1 = 0x74<32>
	r3 = PC + 0x13<32>
	r2 = r17
	call errlog_function (retsize: 0;)
	// succ:  l0001EC70
l0001EC70:
	r0 = 0xFFFFFFFF<32>
	goto l0001EFD4
	// succ:  l0001EFD4
l0001EC7C:
	r3 = Mem0[r18 + 20<i32>:word32]
	r1 = 0x75<32>
	r2 = r22 * r27
	r2 = r2 * r20
	branch r20 >u r3 l0001ECA0
	// succ:  l0001EC98 l0001ECA0
l0001EC98:
	r20 = r2 * r26
	goto l0001EC70
	// succ:  l0001EC70
l0001ECA0:
	Mem0[r29 + 12<i32>:word32] = r2
	r3 = Mem0[r21:word32]
	r2 = 0xFF<32>
	r22 = r20 + 0xFF<32>
	Mem0[r18 + 1<i32>:byte] = r4
	r4 = Mem0[r21 + 4<i32>:word32]
	r0 = r25
	r27 = r22 & 0xFFFFFF00<32>
	Mem0[r18:word32] = r3
	r2 = Mem0[r21 + 8<i32>:word32]
	r1 = 0<32>
	r3 = r22 + r0
	Mem0[r29 + 16<i32>:word32] = r0
	Mem0[r18 + 8<i32>:word32] = r2
	r2 = r27
	r7 = Mem0[r21 + 12<i32>:word32]
	Mem0[r18 + 24<i32>:word32] = r20
	Mem0[r18 + 12<i32>:word32] = r7
	r21 = r3 & 0xFFFFFF00<32>
	call fn000095F0 (retsize: 0;)
	call fn000095F0 (retsize: 0;)
	r2 = r27
	r1_r0 = r23_r21
	r2 = r20
	call fn00009560 (retsize: 0;)
	r2 = 0xC0800000<32>
	r1 = r24 - r19
	branch p0 l0001EDDC
	// succ:  l0001ED10 l0001EDDC
l0001ED10:
	p0 = <invalid>
	r18 = 0x40800000<32>
	branch p0 l0001EDDC
	// succ:  l0001ED20 l0001EDDC
l0001ED20:
	p0 = <invalid>
	r2 = 0x437F0000<32>
	r1_r0 = r2_r1
	call fn00009610 (retsize: 0;)
	r23 = r0
	r2 = r19 + r18
	r1_r0 = r23_r2
	call fn00009610 (retsize: 0;)
	r2 = 0x41700000<32>
	r18 = truncf(CONVERT(r0, uint32, real32))
	r0 = r2
	call fn000097C0 (retsize: 0;)
	r3 = 0xBF800000<32>
	r2 = 0x41FF0000<32>
	r25 = Mem0[r29 + 20<i32>:word32]
	p0 = r20 > 0<32>
	r3 = r0 + r3
	r2 = r23 * r2
	r3 = truncf(CONVERT(r3, uint32, real32))
	r2 = r2 * r0
	r2 = Mem0[r29 + 12<i32>:word32]
	branch p0 l0001EE98
	// succ:  l0001ED88 l0001EE98
l0001ED88:
	r4 = truncf(CONVERT(r2, uint32, real32))
	r5 = truncf(CONVERT(r0, uint32, real32))
	r3 = r4 + 0<32>
	p0 = r4 > r3
	r5 = r5 + (r5 >>u 0x1F<32>)
	r3 = CONVERT(SLICE(r3, int16, 0), int16, int32)
	r2 = r21
	r6 = r2 * r26
	r4 = r5 >> 1<32>
	__loop(0<i32>, 0x0001EDA8<p32>, r6)
	r6 = Mem0[r2:byte]
	r7 = r4
	r5 = 0xFF<32>
	r6 = r6 + r18
	r7 = r7 + r6 * r3
	r6 = r7 >> 0xF<32>
	r5 = r6 + 0<32>
	p0 = r6 > 0xFF<32>
	branch p0 l0001EDD0
	// succ:  l0001EDC8 l0001EDD0
l0001EDC8:
	r5 = 0<32>
	p0 = r6 > 0xFFFFFFFF<32>
	// succ:  l0001EDD0
l0001EDD0:
	Mem0[r2:byte] = r5
	r2 = r2 + 1<i32>
	goto l0001EE98
	// succ:  l0001EE98
l0001EDDC:
	r0 = 0x38D1B717<32>
	call fn00009600 (retsize: 0;)
	r1 = 0x437F0000<32>
	call fn00009610 (retsize: 0;)
	r25 = Mem0[r29 + 20<i32>:word32]
	r3 = r21 + r22
	branch p0 l0001EE98
	// succ:  l0001EE00 l0001EE98
l0001EE00:
	p0 = r12 > 0<32>
	r22 = r3 & 0xFFFFFF00<32>
	__loop(0<i32>, 0x0001EE0C<p32>, r20)
	r3_r2 = r22_r21
	r2 = r2 + 1<i32>
	r4 = Mem0[r2:byte]
	r5 = r19
	r4 = CONVERT(r4, int32, real32)
	r3 = r3 + 4<32>
	r5 = r5 + r0 * r4
	r1 = 0x41000000<32>
	r0 = 0x17<32>
	call fn00009600 (retsize: 0;)
	r2 = 0x437F0000<32>
	r1_r0 = r0_r2
	call fn00009610 (retsize: 0;)
	r2 = Mem0[r29 + 12<i32>:word64]
	r23 = r0
	r18 = r21
	r24 = 0x40800000<32>
	r19 = r2 * r26
	// succ:  l0001EE5C
l0001EE5C:
	r2 = Mem0[r22:word32]
	r2 = r2 + r24
	call fn00009620 (retsize: 0;)
	r0 = r23 * r2
	r2 = 0xFF<32>
	r3 = truncf(CONVERT(r0, uint32, real32))
	r2 = r3 + 0<32>
	p0 = r3 > 0xFF<32>
	branch p0 l0001EE88
	// succ:  l0001EE80 l0001EE88
l0001EE80:
	r2 = 0<32>
	p0 = r3 > 0xFFFFFFFF<32>
	// succ:  l0001EE88
l0001EE88:
	Mem0[r18:byte] = r2
	r18 = r18 + 1<i32>
	r22 = r22 + 4<32>
	r19 = r19 + 0xFFFFFFFF<32>
	branch p0 l0001EE5C
	// succ:  l0001EE98 l0001EE5C
l0001EE98:
	r3 = 0x1010101<32>
	r2 = PC + 0xC278<32>
	r5 = 0x2020202<32>
	r4 = 0x10101010<32>
	r7 = 0x7070707<32>
	r6 = 0xF8F8F8F8<32>
	p0 = r27 > 0<32>
	r4 = Mem0[r2 - 32<i32>:word32]
	branch p0 l0001EF74
	// succ:  l0001EEEC l0001EF74
l0001EEEC:
	r6 = 7<32>
	r2 = r27 + 0x7F<32>
	r7 = 0<32>
	r5 = r2 >>u 7<32>
	r2 = Mem0[r29 + 16<i32>:word32]
	r3 = 3<32>
	__loop(0<i32>, 0x0001EF18<p32>, r5)
	// succ:  l0001EF74
l0001EF74:
	r0 = Mem0[r29 + 24<i32>:word64]
	r1 = Mem0[r29 + 16<i32>:word64]
	r2 = r20
	call fn00009560 (retsize: 0;)
	r5 = Mem0[r29 + 28<i32>:word32]
	r2 = Mem0[r25 + 16<i32>:word32]
	r4 = PC + 0xABD7<32>
	Mem0[r25 + 8<i32>:word32] = 1<32>
	Mem0[r25 + 12<i32>:word32] = 0xFFFFFF81<32>
	r1 = 0x8F<32>
	Mem0[r25 + 4<i32>:word32] = 0xFFFFFF81<32>
	Mem0[r25:word32] = 1<32>
	Mem0[r25 + 24<i32>:word32] = 4<32>
	Mem0[r2:word32] = 0<32>
	r2 = r17
	Mem0[r5 + 8<i32>:word32] = 1<32>
	r3 = Mem0[r5 + 16<i32>:word32]
	Mem0[r5 + 4<i32>:word32] = 1<32>
	Mem0[r5:word32] = 1<32>
	Mem0[r3:word32] = 0x3F800000<32>
	Mem0[r5 + 12<i32>:word32] = 0xFFFFFF81<32>
	Mem0[r29:word32] = r16
	Mem0[r5 + 24<i32>:word32] = 4<32>
	call logmsg_function (retsize: 0;)
	r0 = 0<32>
	// succ:  l0001EFD4
l0001EFD4:
	r19_r18 = Mem0[r29 + 64<i32>:word64]
	r17_r16 = Mem0[r29 + 72<i32>:word64]
	r23_r22 = Mem0[r29 + 48<i32>:word64]
	r21_r20 = Mem0[r29 + 56<i32>:word64]
	r27_r26 = Mem0[r29 + 32<i32>:word64]
	r25_r24 = Mem0[r29 + 40<i32>:word64]
	v35 = r30
	r31 = Mem0[v35 + 4<i32>:word32]
	r30 = Mem0[v35:word32]
	r29 = v35 + 8<i32>
	return
	// succ:  qsigmoid_execute_hvx_exit
qsigmoid_execute_hvx_exit:


// logmsg_function
// Return size: 0
define logmsg_function
logmsg_function_entry:
	r29 = fp
	// succ:  l0001EFE8
l0001EFE8:
	v4 = r29 - 8<i32>
	Mem0[v4:word32] = r30
	Mem0[v4 + 4<i32>:word32] = r31
	r30 = v4
	r29 = v4 - 8<i32>
	r3 = 2<32>
	branch r3 >u r5 l0001F00C
	// succ:  l0001EFF8 l0001F00C
l0001EFF8:
	r5 = Mem0[r2 + 16<i32>:word32]
	r5 = r29 + 0x10<32>
	r3 = 2<32>
	r0 = PC + 0xC<32>
	Mem0[r29 + 1<i32>:byte] = r6
	r6 = r29 + 0x10<32>
	call logv (retsize: 0;)
	// succ:  l0001F000_thunk_errlog_function
l0001F000_thunk_errlog_function:
	call errlog_function (retsize: 0;)
	return
	// succ:  logmsg_function_exit
l0001F00C:
	v13 = r30
	r31 = Mem0[v13 + 4<i32>:word32]
	r30 = Mem0[v13:word32]
	r29 = v13 + 8<i32>
	return
	// succ:  logmsg_function_exit
logmsg_function_exit:


// errlog_function
// Return size: 0
define errlog_function
errlog_function_entry:
	r29 = fp
	// succ:  l0001F010
l0001F010:
	v4 = r29 - 8<i32>
	Mem0[v4:word32] = r30
	Mem0[v4 + 4<i32>:word32] = r31
	r30 = v4
	r29 = v4 - 8<i32>
	r4 = r3
	r0 = PC + 0xAAF0<32>
	Mem0[r29 + 1<i32>:byte] = r6
	r6 = r29 + 0x10<32>
	r5 = r29 + 0x10<32>
	r3 = 0<32>
	v13 = r30
	r31 = Mem0[v13 + 4<i32>:word32]
	r30 = Mem0[v13:word32]
	r29 = v13 + 8<i32>
	return
	// succ:  errlog_function_exit
errlog_function_exit:


// add_f_execute
// Return size: 0
define add_f_execute
add_f_execute_entry:
	r29 = fp
	// succ:  l0001F040
l0001F040:
	v4 = r29 - 8<i32>
	Mem0[v4:word32] = r30
	Mem0[v4 + 4<i32>:word32] = r31
	r30 = v4
	r29 = v4 - 160<i32>
	r5 = r0
	r3 = Mem0[r5 + 8<i32>:word32]
	r2 = Mem0[r5 + 4<i32>:word32]
	Mem0[r29 + 144<i32>:word64] = r19_r18
	Mem0[r29 + 112<i32>:word64] = r27_r26
	r19 = Mem0[r2 + 4<i32>:word32]
	r26 = Mem0[r2:word32]
	Mem0[r29 + 128<i32>:word64] = r23_r22
	Mem0[r29 + 136<i32>:word64] = r21_r20
	r22 = 0<32>
	r0 = Mem0[r26:word32]
	r6 = Mem0[r26 + 4<i32>:word32]
	r4 = Mem0[r19 + 4<i32>:word32]
	r8 = Mem0[r19:word32]
	p1 = r0 == 1<32>
	p0 = r6 == 1<32>
	r12 = Mem0[r26 + 8<i32>:word32]
	r10 = p1
	Mem0[r29 + 92<i32>:word32] = r4
	r9 = Mem0[r19 + 8<i32>:word32]
	p2 = r12 == 1<32>
	r18 = p0 ? r4 : r6
	r7 = Mem0[r26 + 12<i32>:word32]
	r4 = p1 ? r8 : r0
	r0 = Mem0[r19 + 12<i32>:word32]
	p1 = r7 == 1<32>
	r2 = r4 * r18
	Mem0[r29 + 76<i32>:word32] = r6
	Mem0[r29 + 120<i32>:word64] = r25_r24
	r20 = p2 ? r9 : r12
	r21 = p1 ? r0 : r7
	r2 = r2 * r20
	Mem0[r29 + 152<i32>:word64] = r17_r16
	r25 = Mem0[r3:word32]
	r6 = r1
	r2 = r2 * r21
	Mem0[r29 + 72<i32>:word32] = r8
	Mem0[r29 + 96<i32>:word32] = r10
	r10 = p2
	Mem0[r29 + 84<i32>:word32] = r10
	Mem0[r29 + 68<i32>:word32] = r9
	Mem0[r29 + 80<i32>:word32] = r0
	Mem0[r29 + 104<i32>:word32] = r4
	r16 = r2 << 2<32>
	branch p0 l0001F0EC
	// succ:  l0001F0E8 l0001F0EC
l0001F0E8:
	r22 = r7 * r12
	// succ:  l0001F0EC
l0001F0EC:
	r2 = r6
	r1 = 0xBC<32>
	r0 = PC + 0xAB22<32>
	Mem0[r29 + 64<i32>:word32] = r12
	r3 = Mem0[r19 + 16<i32>:word32]
	r4 = PC + 0xAB31<32>
	Mem0[r29 + 88<i32>:word32] = r7
	r23 = Mem0[r25 + 16<i32>:word32]
	r27 = r5
	r24 = r6
	r17 = Mem0[r26 + 16<i32>:word32]
	Mem0[r29:word32] = r5
	Mem0[r29 + 100<i32>:word32] = r3
	call logmsg_function (retsize: 0;)
	branch r16 >u r2 l0001F154
	// succ:  l0001F138 l0001F154
l0001F138:
	r2 = Mem0[r25 + 20<i32>:word32]
	r1 = 0xBC<32>
	r2 = r24
	r0 = PC + 0x1A<32>
	r3 = PC + 0xAB0B<32>
	// succ:  l0001F148
l0001F148:
	call errlog_function (retsize: 0;)
	r0 = 0xFFFFFFFF<32>
	goto l0001F380
	// succ:  l0001F380
l0001F154:
	r5 = Mem0[r26:word32]
	r13 = Mem0[r19:word32]
	r2 = r24
	r7 = Mem0[r26 + 8<i32>:word32]
	r8 = Mem0[r26 + 12<i32>:word32]
	p0 = r5 == r13
	r12 = Mem0[r19 + 12<i32>:word32]
	r6 = Mem0[r26 + 4<i32>:word32]
	r3 = Mem0[r19 + 4<i32>:word32]
	r9 = Mem0[r19 + 8<i32>:word32]
	Mem0[r29 + 52<i32>:word32] = r16
	Mem0[r29 + 48<i32>:word32] = r25
	Mem0[r29 + 60<i32>:word32] = r27
	Mem0[r29 + 56<i32>:word32] = r17
	branch p0 l0001F19C
	// succ:  l0001F190 l0001F19C
l0001F190:
	branch p0 l0001F19C
	// succ:  l0001F194 l0001F19C
l0001F194:
	p0 = r5 == 2<32>
	p0 = r13 == 1<32>
	branch p0 l0001F1D8
	// succ:  l0001F19C l0001F1D8
l0001F19C:
	branch p0 l0001F1AC
	// succ:  l0001F1A0 l0001F1AC
l0001F1A0:
	p0 = r6 == -1<i32>
	branch p0 l0001F1AC
	// succ:  l0001F1A4 l0001F1AC
l0001F1A4:
	p0 = r6 == 2<32>
	branch p0 l0001F1D8
	// succ:  l0001F1AC l0001F1D8
l0001F1AC:
	p0 = r3 == 2<32>
	p0 = r7 == r9
	branch p0 l0001F1C0
	// succ:  l0001F1B4 l0001F1C0
l0001F1B4:
	branch p0 l0001F1C0
	// succ:  l0001F1B8 l0001F1C0
l0001F1B8:
	p0 = r7 == 2<32>
	p0 = r9 == 1<32>
	branch p0 l0001F1D8
	// succ:  l0001F1C0 l0001F1D8
l0001F1C0:
	p0 = r8 == r12
	branch p0 l0001F20C
	// succ:  l0001F1C8 l0001F20C
l0001F1C8:
	p0 = r8 == 1<32>
	branch p0 l0001F20C
	// succ:  l0001F1D0 l0001F20C
l0001F1D0:
	p0 = r12 == 1<32>
	branch p0 l0001F20C
	// succ:  l0001F1D8 l0001F20C
l0001F1D8:
	Mem0[r29 + 28<i32>:word32] = r12
	r1 = 0xBC<32>
	r0 = PC + 0xAA36<32>
	Mem0[r29 + 16<i32>:word32] = r13
	Mem0[r29 + 24<i32>:word32] = r9
	Mem0[r29 + 8<i32>:word32] = r7
	Mem0[r29 + 20<i32>:word32] = r3
	r3 = PC + 0xAA69<32>
	Mem0[r29 + 4<i32>:word32] = r6
	Mem0[r29 + 12<i32>:word32] = r8
	Mem0[r29:word32] = r5
	goto l0001F148
	// succ:  l0001F148
l0001F20C:
	Mem0[r29 + 44<i32>:word32] = r21
	r24 = Mem0[r29 + 104<i32>:word32]
	r19 = r2
	Mem0[r29 + 20<i32>:word32] = r3
	Mem0[r29 + 36<i32>:word32] = r18
	r0 = PC + 0xA9F6<32>
	Mem0[r29 + 40<i32>:word32] = r20
	r1 = 0xBC<32>
	r4 = PC + 0xAA65<32>
	Mem0[r29 + 28<i32>:word32] = r12
	Mem0[r29 + 32<i32>:word32] = r24
	Mem0[r29 + 16<i32>:word32] = r13
	Mem0[r29 + 24<i32>:word32] = r9
	Mem0[r29 + 8<i32>:word32] = r7
	Mem0[r29 + 12<i32>:word32] = r8
	Mem0[r29:word32] = r5
	Mem0[r29 + 4<i32>:word32] = r6
	call logmsg_function (retsize: 0;)
	r26 = Mem0[r29 + 100<i32>:word32]
	r3 = Mem0[r29 + 48<i32>:word32]
	r14 = 0<32>
	p0 = r24 > 0<32>
	r25 = Mem0[r29 + 56<i32>:word32]
	Mem0[r3 + 6<i32>:byte] = r2
	r2 = Mem0[r29 + 52<i32>:word32]
	Mem0[r3 + 4<i32>:word32] = r18
	Mem0[r3 + 12<i32>:word32] = r21
	Mem0[r3 + 8<i32>:word32] = r20
	r12 = Mem0[r29 + 88<i32>:word32]
	r13 = Mem0[r29 + 80<i32>:word32]
	branch p0 l0001F358
	// succ:  l0001F288 l0001F358
l0001F288:
	r7 = Mem0[r29 + 92<i32>:word64]
	r5 = Mem0[r29 + 68<i32>:word64]
	r6 = !(r13 == 1<32>)
	r2 = Mem0[r29 + 76<i32>:word64]
	r0 = Mem0[r29 + 84<i32>:word64]
	r9 = r5 * r7
	r4 = Mem0[r29 + 72<i32>:word64]
	r3 = Mem0[r29 + 64<i32>:word64]
	p0 = r5 == 1<32>
	p2 = r0
	r0 = Mem0[r29 + 96<i32>:word32]
	p1 = r4 == 1<32>
	r9 = r9 * r13
	r8 = r3 * r2
	r9 = r14 + 0<32>
	p2 = r7 == 1<32>
	r2 = r12 == 0<32>
	r4 = r13 * r5
	p0 = r0
	r8 = r8 * r12
	r5 = !(r12 == 1<32>)
	r8 = r14 + 0<32>
	r4 = r14 + 0<32>
	r7 = 0<32>
	// succ:  l0001F2E0
l0001F2E0:
	r14 = 0<32>
	r13_r12 = r25_r26
	branch p0 l0001F348
l0001F2E4:
	r14 = 0<32>
	r13_r12 = r25_r26
	// succ:  l0001F2EC l0001F348
l0001F2EC:
	p0 = r10 > 0<32>
	r15 = r13
	r28 = r12
	branch p0 l0001F338
	// succ:  l0001F2F8 l0001F338
l0001F2F8:
	p0 = r12 > 0<32>
	__loop(1<i32>, 0x0001F2FC<p32>, r20)
	r1_r0 = r15_r28
	r10 = r23
	branch p0 l0001F32C
	// succ:  l0001F308 l0001F32C
l0001F308:
	p0 = r13 > 0<32>
	__loop(0<i32>, 0x0001F30C<p32>, r21)
	r16 = Mem0[r0:word32]
	r11 = Mem0[r1:word32]
	r1 = r1 + (r5 << 2<32>)
	r0 = r0 + (r6 << 2<32>)
	r11 = r11 + r16
	Mem0[r10:word32] = r11
	r10 = r10 + 4<32>
	r23 = r23 + (r21 << 2<32>)
	// succ:  l0001F32C
l0001F32C:
	r15 = r15 + (r2 << 2<32>)
	r28 = r28 + (r3 << 2<32>)
	// succ:  l0001F338
l0001F338:
	branch r14 == r18 l0001F2EC
	goto l0001F34C
	// succ:  l0001F34C l0001F2EC
l0001F348:
	branch r7 == r24 l0001F2E0
	goto l0001F35C
	// succ:  l0001F35C l0001F2E0
l0001F34C:
	r14 = r14 + 1<32>
	r12 = r12 + (r4 << 2<32>)
	r13 = r13 + (r22 << 2<32>)
	branch r7 == r24 l0001F2E4
	goto l0001F35C
	// succ:  l0001F35C l0001F2E4
l0001F358:
	Mem0[r29:byte] = r2
	r2 = Mem0[r29 + 60<i32>:word32]
	r0 = PC + 0xA8B6<32>
	goto l0001F36C
	// succ:  l0001F36C
l0001F35C:
	r7 = r7 + 1<32>
	r26 = r26 + (r9 << 2<32>)
	Mem0[r29:byte] = r2
	r2 = Mem0[r29 + 60<i32>:word32]
	r0 = PC + 0x36<32>
	// succ:  l0001F36C
l0001F36C:
	r2 = r19
	r1 = 0xBC<32>
	r4 = PC + 0x11<32>
	call logmsg_function (retsize: 0;)
	r0 = 0<32>
	// succ:  l0001F380
l0001F380:
	r19_r18 = Mem0[r29 + 144<i32>:word64]
	r17_r16 = Mem0[r29 + 152<i32>:word64]
	r23_r22 = Mem0[r29 + 128<i32>:word64]
	r21_r20 = Mem0[r29 + 136<i32>:word64]
	r27_r26 = Mem0[r29 + 112<i32>:word64]
	r25_r24 = Mem0[r29 + 120<i32>:word64]
	v42 = r30
	r31 = Mem0[v42 + 4<i32>:word32]
	r30 = Mem0[v42:word32]
	r29 = v42 + 8<i32>
	return
	// succ:  add_f_execute_exit
add_f_execute_exit:


// add_f_check
// Return size: 0
define add_f_check
add_f_check_entry:
	r29 = fp
	// succ:  l0001F394
l0001F394:
	v4 = r29 - 8<i32>
	Mem0[v4:word32] = r30
	Mem0[v4 + 4<i32>:word32] = r31
	r30 = v4
	r29 = v4 - 16<i32>
	Mem0[r29 + 496<i32>:word64] = r17_r16
	r4 = PC + 0xA83F<32>
	r16 = r1
	r1 = 0x37<32>
	r17 = r0
	Mem0[r29:word32] = r17
	r2 = r16
	r0 = PC + 0xA810<32>
	call logmsg_function (retsize: 0;)
	branch r2 == 4<32> l0001F3E4
	// succ:  l0001F3C8 l0001F3E4
l0001F3C8:
	r2 = Mem0[r17 + 16<i32>:word32]
	r1 = 0x38<32>
	r0 = PC + 0x34<32>
	r3 = PC + 0xA813<32>
	// succ:  l0001F3D4
l0001F3D4:
	r2 = r16
	call errlog_function (retsize: 0;)
	v16 = r30
	r31 = Mem0[v16 + 4<i32>:word32]
	r30 = Mem0[v16:word32]
	r29 = v16 + 8<i32>
	return
	// succ:  add_f_check_exit
l0001F3E4:
	branch r2 == 2<32> l0001F404
	// succ:  l0001F3F4 l0001F404
l0001F3F4:
	r2 = Mem0[r17 + 20<i32>:word32]
	r1 = 0x39<32>
	r0 = PC + 8<32>
	goto l0001F3D4
	// succ:  l0001F3D4
l0001F404:
	r2 = r16
	r1 = 0x3A<32>
	r0 = PC + 0xA7B4<32>
	Mem0[r29:word32] = r17
	call logmsg_function (retsize: 0;)
	r4 = PC + 0xA7EE<32>
	r0 = 0<32>
	v17 = r30
	r31 = Mem0[v17 + 4<i32>:word32]
	r30 = Mem0[v17:word32]
	r29 = v17 + 8<i32>
	return
	// succ:  add_f_check_exit
add_f_check_exit:


// logmsg_function
// Return size: 0
define logmsg_function
logmsg_function_entry:
	r29 = fp
	// succ:  l0001F428
l0001F428:
	v4 = r29 - 8<i32>
	Mem0[v4:word32] = r30
	Mem0[v4 + 4<i32>:word32] = r31
	r30 = v4
	r29 = v4 - 8<i32>
	r3 = 2<32>
	branch r3 >u r5 l0001F448
	// succ:  l0001F438 l0001F448
l0001F438:
	r5 = Mem0[r2 + 16<i32>:word32]
	Mem0[r29 + 1<i32>:byte] = r6
	r6 = r29 + 0x10<32>
	r5 = r29 + 0x10<32>
	// succ:  l0001F448
l0001F448:
	v11 = r30
	r31 = Mem0[v11 + 4<i32>:word32]
	r30 = Mem0[v11:word32]
	r29 = v11 + 8<i32>
	return
	// succ:  logmsg_function_exit
logmsg_function_exit:


// errlog_function
// Return size: 0
define errlog_function
errlog_function_entry:
	r29 = fp
	// succ:  l0001F44C
l0001F44C:
	v4 = r29 - 8<i32>
	Mem0[v4:word32] = r30
	Mem0[v4 + 4<i32>:word32] = r31
	r30 = v4
	r29 = v4 - 8<i32>
	r4 = r3
	r3 = 0<32>
	Mem0[r29 + 1<i32>:byte] = r6
	r6 = r29 + 0x10<32>
	r5 = r29 + 0x10<32>
	call logv (retsize: 0;)
	r0 = Mem0[r0:word32]
	r0 = Mem0[r0:word32]
	r0 = Mem0[r0:word32]
	r0 = Mem0[r0:word32]
	// succ:  l0001F46C_thunk_mul_f_execute
l0001F46C_thunk_mul_f_execute:
	call mul_f_execute (retsize: 0;)
	return
	// succ:  errlog_function_exit
errlog_function_exit:


// mul_f_execute
// Return size: 0
define mul_f_execute
mul_f_execute_entry:
	r29 = fp
	// succ:  l0001F470
l0001F470:
	v4 = r29 - 8<i32>
	Mem0[v4:word32] = r30
	Mem0[v4 + 4<i32>:word32] = r31
	r30 = v4
	r29 = v4 - 168<i32>
	Mem0[r29 + 472<i32>:word64] = r23_r22
	r4 = PC + 0xA8BA<32>
	Mem0[r29 + 120<i32>:word64] = r27_r26
	Mem0[r29 + 128<i32>:word64] = r25_r24
	Mem0[r29 + 160<i32>:word64] = r17_r16
	r16 = r0
	r2 = r23
	r1 = 0x32<32>
	Mem0[r29:word32] = r16
	r0 = PC + 0xA840<32>
	Mem0[r29 + 144<i32>:word64] = r21_r20
	Mem0[r29 + 152<i32>:word64] = r19_r18
	call logmsg_function (retsize: 0;)
	r5 = r16
	r3 = Mem0[r5 + 8<i32>:word32]
	r2 = Mem0[r5 + 4<i32>:word32]
	r16 = Mem0[r2:word32]
	r3 = Mem0[r3:word32]
	r19 = Mem0[r2 + 4<i32>:word32]
	r1 = Mem0[r16:word32]
	r7 = Mem0[r16 + 4<i32>:word32]
	r4 = Mem0[r19 + 4<i32>:word32]
	r8 = Mem0[r19:word32]
	p1 = r1 == 1<32>
	p0 = r7 == 1<32>
	r12 = Mem0[r16 + 8<i32>:word32]
	Mem0[r29 + 96<i32>:word32] = r4
	r9 = Mem0[r19 + 8<i32>:word32]
	p2 = r12 == 1<32>
	r18 = p0 ? r4 : r7
	r6 = Mem0[r16 + 12<i32>:word32]
	r4 = p1 ? r8 : r1
	r0 = p1
	r1 = Mem0[r19 + 12<i32>:word32]
	p1 = r6 == 1<32>
	r2 = r4 * r18
	Mem0[r29 + 112<i32>:word32] = r4
	Mem0[r29 + 100<i32>:word32] = r0
	r20 = p2 ? r9 : r12
	r0 = p2
	Mem0[r29 + 80<i32>:word32] = r7
	Mem0[r29 + 72<i32>:word32] = r9
	r21 = p1 ? r1 : r6
	r2 = r2 * r20
	Mem0[r29 + 88<i32>:word32] = r0
	Mem0[r29 + 76<i32>:word32] = r8
	r2 = r2 * r21
	Mem0[r29 + 84<i32>:word32] = r1
	branch p0 l0001F530
	// succ:  l0001F52C l0001F530
l0001F52C:
	r17 = r2 << 2<32>
	r22 = r6 * r12
	// succ:  l0001F530
l0001F530:
	r2 = r23
	r1 = 0xBC<32>
	r0 = PC + 0xA808<32>
	Mem0[r29 + 92<i32>:word32] = r6
	r27 = r23
	r4 = PC + 0xA817<32>
	r6 = Mem0[r19 + 16<i32>:word32]
	Mem0[r29 + 68<i32>:word32] = r12
	r23 = Mem0[r3 + 16<i32>:word32]
	r26 = Mem0[r16 + 16<i32>:word32]
	r25_r24 = r3_r5
	Mem0[r29:word32] = r5
	Mem0[r29 + 108<i32>:word32] = r6
	call logmsg_function (retsize: 0;)
	branch r17 >u r2 l0001F598
	// succ:  l0001F57C l0001F598
l0001F57C:
	r2 = Mem0[r25 + 20<i32>:word32]
	r1 = 0xBC<32>
	r2 = r27
	r0 = PC + 0<32>
	r3 = PC + 0xA7F1<32>
	// succ:  l0001F58C
l0001F58C:
	call errlog_function (retsize: 0;)
	r0 = 0xFFFFFFFF<32>
	goto l0001F7AC
	// succ:  l0001F7AC
l0001F598:
	r5 = Mem0[r16:word32]
	r2 = Mem0[r19:word32]
	r7 = Mem0[r16 + 8<i32>:word32]
	r8 = Mem0[r16 + 12<i32>:word32]
	p0 = r5 == r2
	r12 = Mem0[r19 + 12<i32>:word32]
	r6 = Mem0[r16 + 4<i32>:word32]
	r3 = Mem0[r19 + 4<i32>:word32]
	r9 = Mem0[r19 + 8<i32>:word32]
	Mem0[r29 + 56<i32>:word32] = r17
	Mem0[r29 + 52<i32>:word32] = r25
	Mem0[r29 + 64<i32>:word32] = r24
	Mem0[r29 + 60<i32>:word32] = r26
	Mem0[r29 + 104<i32>:word32] = r27
	branch p0 l0001F5D8
	// succ:  l0001F5D0 l0001F5D8
l0001F5D0:
	branch p0 l0001F5D8
	// succ:  l0001F5D4 l0001F5D8
l0001F5D4:
	p0 = r5 == 2<32>
	branch p0 l0001F614
	// succ:  l0001F5D8 l0001F614
l0001F5D8:
	p0 = r2 == 2<32>
	branch p0 l0001F5E8
	// succ:  l0001F5E0 l0001F5E8
l0001F5E0:
	p0 = r6 == -1<i32>
	branch p0 l0001F5E8
	// succ:  l0001F5E4 l0001F5E8
l0001F5E4:
	p0 = r6 == 2<32>
	branch p0 l0001F614
	// succ:  l0001F5E8 l0001F614
l0001F5E8:
	p0 = r3 == 2<32>
	p0 = r7 == r9
	branch p0 l0001F5FC
	// succ:  l0001F5F0 l0001F5FC
l0001F5F0:
	branch p0 l0001F5FC
	// succ:  l0001F5F4 l0001F5FC
l0001F5F4:
	p0 = r7 == 2<32>
	p0 = r9 == 1<32>
	branch p0 l0001F614
	// succ:  l0001F5FC l0001F614
l0001F5FC:
	p0 = r8 == r12
	branch p0 l0001F648
	// succ:  l0001F604 l0001F648
l0001F604:
	p0 = r8 == 1<32>
	branch p0 l0001F648
	// succ:  l0001F60C l0001F648
l0001F60C:
	p0 = r12 == 1<32>
	branch p0 l0001F648
	// succ:  l0001F614 l0001F648
l0001F614:
	Mem0[r29 + 28<i32>:word32] = r12
	r1 = 0xBC<32>
	r0 = PC + 0xA724<32>
	Mem0[r29 + 16<i32>:word32] = r2
	Mem0[r29 + 24<i32>:word32] = r9
	Mem0[r29 + 4<i32>:word32] = r6
	Mem0[r29 + 20<i32>:word32] = r3
	r3 = PC + 0xA757<32>
	Mem0[r29 + 8<i32>:word32] = r7
	r2 = Mem0[r29 + 104<i32>:word64]
	Mem0[r29:word32] = r5
	Mem0[r29 + 12<i32>:word32] = r8
	goto l0001F58C
	// succ:  l0001F58C
l0001F648:
	Mem0[r29 + 44<i32>:word32] = r21
	r19 = Mem0[r29 + 112<i32>:word64]
	r0 = PC + 0xA6F0<32>
	Mem0[r29 + 32<i32>:word32] = r19
	r1 = 0xBC<32>
	r4 = PC + 0xA75F<32>
	Mem0[r29 + 36<i32>:word32] = r18
	Mem0[r29 + 40<i32>:word32] = r20
	Mem0[r29 + 24<i32>:word32] = r9
	Mem0[r29 + 28<i32>:word32] = r12
	Mem0[r29 + 16<i32>:word32] = r2
	Mem0[r29 + 20<i32>:word32] = r3
	Mem0[r29 + 4<i32>:word32] = r6
	r2 = Mem0[r29 + 104<i32>:word64]
	Mem0[r29 + 8<i32>:word32] = r7
	Mem0[r29 + 12<i32>:word32] = r8
	Mem0[r29:word32] = r5
	call logmsg_function (retsize: 0;)
	r17 = Mem0[r29 + 108<i32>:word64]
	r3 = Mem0[r29 + 52<i32>:word64]
	r14 = 0<32>
	p0 = r19 > 0<32>
	r24 = Mem0[r29 + 60<i32>:word32]
	Mem0[r3 + 6<i32>:byte] = r2
	r2 = Mem0[r29 + 56<i32>:word32]
	Mem0[r3 + 12<i32>:word32] = r21
	Mem0[r3 + 8<i32>:word32] = r20
	r12 = Mem0[r29 + 92<i32>:word32]
	r13 = Mem0[r29 + 84<i32>:word32]
	branch p0 l0001F784
	// succ:  l0001F6B4 l0001F784
l0001F6B4:
	r7 = Mem0[r29 + 96<i32>:word64]
	r5 = Mem0[r29 + 72<i32>:word64]
	r6 = !(r13 == 1<32>)
	r2 = Mem0[r29 + 80<i32>:word64]
	r0 = Mem0[r29 + 88<i32>:word64]
	r9 = r5 * r7
	r4 = Mem0[r29 + 76<i32>:word64]
	r3 = Mem0[r29 + 68<i32>:word64]
	p0 = r5 == 1<32>
	p2 = r0
	r0 = Mem0[r29 + 100<i32>:word32]
	p1 = r4 == 1<32>
	r9 = r9 * r13
	r8 = r3 * r2
	r9 = r14 + 0<32>
	p2 = r7 == 1<32>
	r2 = r12 == 0<32>
	r4 = r13 * r5
	p0 = r0
	r8 = r8 * r12
	r5 = !(r12 == 1<32>)
	r8 = r14 + 0<32>
	r4 = r14 + 0<32>
	r7 = 0<32>
	// succ:  l0001F70C
l0001F70C:
	r14 = 0<32>
	r13_r12 = r24_r17
	branch p0 l0001F774
l0001F710:
	r14 = 0<32>
	r13_r12 = r24_r17
	// succ:  l0001F718 l0001F774
l0001F718:
	p0 = r10 > 0<32>
	r15 = r13
	r28 = r12
	branch p0 l0001F764
	// succ:  l0001F724 l0001F764
l0001F724:
	p0 = r12 > 0<32>
	__loop(1<i32>, 0x0001F728<p32>, r20)
	r1_r0 = r15_r28
	r10 = r23
	branch p0 l0001F758
	// succ:  l0001F734 l0001F758
l0001F734:
	p0 = r13 > 0<32>
	__loop(0<i32>, 0x0001F738<p32>, r21)
	r16 = Mem0[r0:word32]
	r11 = Mem0[r1:word32]
	r1 = r1 + (r5 << 2<32>)
	r0 = r0 + (r6 << 2<32>)
	r11 = r11 * r16
	Mem0[r10:word32] = r11
	r10 = r10 + 4<32>
	r23 = r23 + (r21 << 2<32>)
	// succ:  l0001F758
l0001F758:
	r15 = r15 + (r2 << 2<32>)
	r28 = r28 + (r3 << 2<32>)
	// succ:  l0001F764
l0001F764:
	branch r14 == r18 l0001F718
	goto l0001F778
	// succ:  l0001F778 l0001F718
l0001F774:
	branch r7 == r19 l0001F70C
	goto l0001F788
	// succ:  l0001F788 l0001F70C
l0001F778:
	r14 = r14 + 1<32>
	r12 = r12 + (r4 << 2<32>)
	r13 = r13 + (r22 << 2<32>)
	branch r7 == r19 l0001F710
	goto l0001F788
	// succ:  l0001F788 l0001F710
l0001F784:
	Mem0[r29:byte] = r2
	r2 = Mem0[r29 + 64<i32>:word32]
	r0 = PC + 0xA5B4<32>
	goto l0001F798
	// succ:  l0001F798
l0001F788:
	r7 = r7 + 1<32>
	r17 = r17 + (r9 << 2<32>)
	Mem0[r29:byte] = r2
	r2 = Mem0[r29 + 64<i32>:word32]
	r0 = PC + 0x34<32>
	// succ:  l0001F798
l0001F798:
	r2 = Mem0[r29 + 104<i32>:word32]
	r1 = 0xBC<32>
	r4 = PC + 0xF<32>
	call logmsg_function (retsize: 0;)
	r0 = 0<32>
	// succ:  l0001F7AC
l0001F7AC:
	r19_r18 = Mem0[r29 + 152<i32>:word64]
	r17_r16 = Mem0[r29 + 160<i32>:word64]
	r23_r22 = Mem0[r29 + 136<i32>:word64]
	r21_r20 = Mem0[r29 + 144<i32>:word64]
	r27_r26 = Mem0[r29 + 120<i32>:word64]
	r25_r24 = Mem0[r29 + 128<i32>:word64]
	v41 = r30
	r31 = Mem0[v41 + 4<i32>:word32]
	r30 = Mem0[v41:word32]
	r29 = v41 + 8<i32>
	return
	// succ:  mul_f_execute_exit
mul_f_execute_exit:


// mul_f_check
// Return size: 0
define mul_f_check
mul_f_check_entry:
	r29 = fp
	// succ:  l0001F7C0
l0001F7C0:
	v4 = r29 - 8<i32>
	Mem0[v4:word32] = r30
	Mem0[v4 + 4<i32>:word32] = r31
	r30 = v4
	r29 = v4 - 16<i32>
	Mem0[r29 + 496<i32>:word64] = r17_r16
	r4 = PC + 0xA52F<32>
	r16 = r1
	r1 = 0x38<32>
	r17 = r0
	Mem0[r29:word32] = r17
	r2 = r16
	r0 = PC + 0xA500<32>
	call logmsg_function (retsize: 0;)
	branch r2 == 4<32> l0001F810
	// succ:  l0001F7F4 l0001F810
l0001F7F4:
	r2 = Mem0[r17 + 16<i32>:word32]
	r1 = 0x39<32>
	r0 = PC + 0x24<32>
	r3 = PC + 0xA503<32>
	// succ:  l0001F800
l0001F800:
	r2 = r16
	call errlog_function (retsize: 0;)
	v16 = r30
	r31 = Mem0[v16 + 4<i32>:word32]
	r30 = Mem0[v16:word32]
	r29 = v16 + 8<i32>
	return
	// succ:  mul_f_check_exit
l0001F810:
	branch r2 == 2<32> l0001F830
	// succ:  l0001F820 l0001F830
l0001F820:
	r2 = Mem0[r17 + 20<i32>:word32]
	r1 = 0x3A<32>
	r0 = PC + 0x38<32>
	goto l0001F800
	// succ:  l0001F800
l0001F830:
	r2 = r16
	r1 = 0x3B<32>
	r0 = PC + 0xA4A4<32>
	Mem0[r29:word32] = r17
	call logmsg_function (retsize: 0;)
	r4 = PC + 0xA4DE<32>
	r0 = 0<32>
	v17 = r30
	r31 = Mem0[v17 + 4<i32>:word32]
	r30 = Mem0[v17:word32]
	r29 = v17 + 8<i32>
	return
	// succ:  mul_f_check_exit
mul_f_check_exit:


// logmsg_function
// Return size: 0
define logmsg_function
logmsg_function_entry:
	r29 = fp
	// succ:  l0001F854
l0001F854:
	v4 = r29 - 8<i32>
	Mem0[v4:word32] = r30
	Mem0[v4 + 4<i32>:word32] = r31
	r30 = v4
	r29 = v4 - 8<i32>
	r3 = 2<32>
	branch r3 >u r5 l0001F874
	// succ:  l0001F864 l0001F874
l0001F864:
	r5 = Mem0[r2 + 16<i32>:word32]
	Mem0[r29 + 1<i32>:byte] = r6
	r6 = r29 + 0x10<32>
	r5 = r29 + 0x10<32>
	// succ:  l0001F874
l0001F874:
	v11 = r30
	r31 = Mem0[v11 + 4<i32>:word32]
	r30 = Mem0[v11:word32]
	r29 = v11 + 8<i32>
	return
	// succ:  logmsg_function_exit
logmsg_function_exit:


// errlog_function
// Return size: 0
define errlog_function
errlog_function_entry:
	r29 = fp
	// succ:  l0001F878
l0001F878:
	v4 = r29 - 8<i32>
	Mem0[v4:word32] = r30
	Mem0[v4 + 4<i32>:word32] = r31
	r30 = v4
	r29 = v4 - 8<i32>
	r4 = r3
	r3 = 0<32>
	Mem0[r29 + 1<i32>:byte] = r6
	r6 = r29 + 0x10<32>
	r5 = r29 + 0x10<32>
	call logv (retsize: 0;)
	r0 = Mem0[r0:word32]
	r0 = Mem0[r0:word32]
	r0 = Mem0[r0:word32]
	r0 = Mem0[r0:word32]
	r0 = Mem0[r0:word32]
	r0 = Mem0[r0:word32]
	// succ:  l0001F89C_thunk_neg_f_execute
l0001F89C_thunk_neg_f_execute:
	call neg_f_execute (retsize: 0;)
	return
	// succ:  errlog_function_exit
errlog_function_exit:


// neg_f_execute
// Return size: 0
define neg_f_execute
neg_f_execute_entry:
	r29 = fp
	// succ:  l0001F8A0
l0001F8A0:
	v4 = r29 - 8<i32>
	Mem0[v4:word32] = r30
	Mem0[v4 + 4<i32>:word32] = r31
	r30 = v4
	r29 = v4 - 0<i32>
	r5 = Mem0[r0 + 8<i32>:word32]
	r7 = Mem0[r0 + 4<i32>:word32]
	r3 = Mem0[r7:word32]
	r7 = Mem0[r3 + 12<i32>:word32]
	r2 = Mem0[r3 + 4<i32>:word32]
	r6 = Mem0[r3 + 8<i32>:word32]
	r4 = Mem0[r3:word32]
	r4 = Mem0[r5:word32]
	r2 = r2 * r4
	r6 = Mem0[r4 + 20<i32>:word32]
	r2 = r2 * r6
	r2 = r1
	r7 = r2 * r7
	branch r5 >u r6 l0001F910
	// succ:  l0001F8D8 l0001F910
l0001F8D8:
	r5 = r7 << 2<32>
	r6 = Mem0[r3 + 16<i32>:word32]
	r2 = Mem0[r4 + 16<i32>:word32]
	__loop(0<i32>, 0x0001F8E0<p32>, r7)
	r7 = Mem0[r6:word32]
	r6 = r6 + 4<32>
	r7 = __invert_bit<word32,word32>(r7, 0x1E<32>)
	Mem0[r2:word32] = r7
	r2 = r2 + 4<32>
	r6 = Mem0[r3 + 4<i32>:word32]
	r2 = Mem0[r3:word32]
	r0 = 0<32>
	Mem0[r4:word32] = r2
	Mem0[r4 + 4<i32>:word32] = r6
	r1 = Mem0[r3 + 8<i32>:word32]
	Mem0[r4 + 8<i32>:word32] = r1
	r7 = Mem0[r3 + 12<i32>:word32]
	Mem0[r4 + 24<i32>:word32] = r5
	Mem0[r4 + 12<i32>:word32] = r7
	v15 = r30
	r31 = Mem0[v15 + 4<i32>:word32]
	r30 = Mem0[v15:word32]
	r29 = v15 + 8<i32>
	return
	// succ:  neg_f_execute_exit
l0001F910:
	r1 = 0x36<32>
	call errlog_function (retsize: 0;)
	r3 = PC + 0xA544<32>
	v17 = r30
	r31 = Mem0[v17 + 4<i32>:word32]
	r30 = Mem0[v17:word32]
	r29 = v17 + 8<i32>
	return
	// succ:  neg_f_execute_exit
neg_f_execute_exit:


// neg_f_check
// Return size: 0
define neg_f_check
neg_f_check_entry:
	r29 = fp
	// succ:  l0001F924
l0001F924:
	v4 = r29 - 8<i32>
	Mem0[v4:word32] = r30
	Mem0[v4 + 4<i32>:word32] = r31
	r30 = v4
	r29 = v4 - 16<i32>
	Mem0[r29 + 496<i32>:word64] = r17_r16
	r4 = PC + 0xA4F5<32>
	r17 = r0
	r16 = r1
	r1 = 0x41<32>
	Mem0[r29:word32] = r17
	r2 = r16
	call logmsg_function (retsize: 0;)
	branch r2 == 2<32> l0001F964
	// succ:  l0001F950 l0001F964
l0001F950:
	r2 = Mem0[r17 + 16<i32>:word32]
	r1 = 0x42<32>
	r3 = PC + 0x19<32>
	r2 = r16
	call errlog_function (retsize: 0;)
	// succ:  l0001F958
l0001F958:
	v16 = r30
	r31 = Mem0[v16 + 4<i32>:word32]
	r30 = Mem0[v16:word32]
	r29 = v16 + 8<i32>
	return
	// succ:  neg_f_check_exit
l0001F964:
	branch r2 == 2<32> l0001F97C
	// succ:  l0001F974 l0001F97C
l0001F974:
	r2 = Mem0[r17 + 20<i32>:word32]
	r1 = 0x43<32>
	goto l0001F958
	// succ:  l0001F958
l0001F97C:
	r2 = r16
	r1 = 0x44<32>
	r4 = PC + 0xA4C8<32>
	Mem0[r29:word32] = r17
	call logmsg_function (retsize: 0;)
	r0 = 0<32>
	v17 = r30
	r31 = Mem0[v17 + 4<i32>:word32]
	r30 = Mem0[v17:word32]
	r29 = v17 + 8<i32>
	return
	// succ:  neg_f_check_exit
neg_f_check_exit:


// logmsg_function
// Return size: 0
define logmsg_function
logmsg_function_entry:
	r29 = fp
	// succ:  l0001F99C
l0001F99C:
	v4 = r29 - 8<i32>
	Mem0[v4:word32] = r30
	Mem0[v4 + 4<i32>:word32] = r31
	r30 = v4
	r29 = v4 - 8<i32>
	r3 = 2<32>
	branch r3 >u r5 l0001F9C0
	// succ:  l0001F9AC l0001F9C0
l0001F9AC:
	r5 = Mem0[r2 + 16<i32>:word32]
	r5 = r29 + 0x10<32>
	r3 = 2<32>
	r0 = PC + 0x16<32>
	Mem0[r29 + 1<i32>:byte] = r6
	r6 = r29 + 0x10<32>
	call logv (retsize: 0;)
	// succ:  l0001F9B4_thunk_errlog_function
l0001F9B4_thunk_errlog_function:
	call errlog_function (retsize: 0;)
	return
	// succ:  logmsg_function_exit
l0001F9C0:
	v13 = r30
	r31 = Mem0[v13 + 4<i32>:word32]
	r30 = Mem0[v13:word32]
	r29 = v13 + 8<i32>
	return
	// succ:  logmsg_function_exit
logmsg_function_exit:


// errlog_function
// Return size: 0
define errlog_function
errlog_function_entry:
	r29 = fp
	// succ:  l0001F9C4
l0001F9C4:
	v4 = r29 - 8<i32>
	Mem0[v4:word32] = r30
	Mem0[v4 + 4<i32>:word32] = r31
	r30 = v4
	r29 = v4 - 8<i32>
	r4 = r3
	r0 = PC + 0xA43A<32>
	Mem0[r29 + 1<i32>:byte] = r6
	r6 = r29 + 0x10<32>
	r5 = r29 + 0x10<32>
	r3 = 0<32>
	v13 = r30
	r31 = Mem0[v13 + 4<i32>:word32]
	r30 = Mem0[v13:word32]
	r29 = v13 + 8<i32>
	return
	// succ:  errlog_function_exit
errlog_function_exit:


// sub_f_execute
// Return size: 0
define sub_f_execute
sub_f_execute_entry:
	r29 = fp
	// succ:  l0001F9F0
l0001F9F0:
	v4 = r29 - 8<i32>
	Mem0[v4:word32] = r30
	Mem0[v4 + 4<i32>:word32] = r31
	r30 = v4
	r29 = v4 - 160<i32>
	r5 = r0
	r3 = Mem0[r5 + 8<i32>:word32]
	r2 = Mem0[r5 + 4<i32>:word32]
	Mem0[r29 + 144<i32>:word64] = r19_r18
	Mem0[r29 + 112<i32>:word64] = r27_r26
	r19 = Mem0[r2 + 4<i32>:word32]
	r26 = Mem0[r2:word32]
	Mem0[r29 + 128<i32>:word64] = r23_r22
	Mem0[r29 + 136<i32>:word64] = r21_r20
	r22 = 0<32>
	r0 = Mem0[r26:word32]
	r6 = Mem0[r26 + 4<i32>:word32]
	r4 = Mem0[r19 + 4<i32>:word32]
	r8 = Mem0[r19:word32]
	p1 = r0 == 1<32>
	p0 = r6 == 1<32>
	r12 = Mem0[r26 + 8<i32>:word32]
	r10 = p1
	Mem0[r29 + 92<i32>:word32] = r4
	r9 = Mem0[r19 + 8<i32>:word32]
	p2 = r12 == 1<32>
	r18 = p0 ? r4 : r6
	r7 = Mem0[r26 + 12<i32>:word32]
	r4 = p1 ? r8 : r0
	r0 = Mem0[r19 + 12<i32>:word32]
	p1 = r7 == 1<32>
	r2 = r4 * r18
	Mem0[r29 + 76<i32>:word32] = r6
	Mem0[r29 + 120<i32>:word64] = r25_r24
	r20 = p2 ? r9 : r12
	r21 = p1 ? r0 : r7
	r2 = r2 * r20
	Mem0[r29 + 152<i32>:word64] = r17_r16
	r25 = Mem0[r3:word32]
	r6 = r1
	r2 = r2 * r21
	Mem0[r29 + 72<i32>:word32] = r8
	Mem0[r29 + 96<i32>:word32] = r10
	r10 = p2
	Mem0[r29 + 84<i32>:word32] = r10
	Mem0[r29 + 68<i32>:word32] = r9
	Mem0[r29 + 80<i32>:word32] = r0
	Mem0[r29 + 104<i32>:word32] = r4
	r16 = r2 << 2<32>
	branch p0 l0001FA9C
	// succ:  l0001FA98 l0001FA9C
l0001FA98:
	r22 = r7 * r12
	// succ:  l0001FA9C
l0001FA9C:
	r2 = r6
	r1 = 0xBC<32>
	r0 = PC + 0xA41C<32>
	Mem0[r29 + 64<i32>:word32] = r12
	r3 = Mem0[r19 + 16<i32>:word32]
	r4 = PC + 0xA42B<32>
	Mem0[r29 + 88<i32>:word32] = r7
	r23 = Mem0[r25 + 16<i32>:word32]
	r27 = r5
	r24 = r6
	r17 = Mem0[r26 + 16<i32>:word32]
	Mem0[r29:word32] = r5
	Mem0[r29 + 100<i32>:word32] = r3
	call logmsg_function (retsize: 0;)
	branch r16 >u r2 l0001FB04
	// succ:  l0001FAE8 l0001FB04
l0001FAE8:
	r2 = Mem0[r25 + 20<i32>:word32]
	r1 = 0xBC<32>
	r2 = r24
	r0 = PC + 0x14<32>
	r3 = PC + 0xA405<32>
	// succ:  l0001FAF8
l0001FAF8:
	call errlog_function (retsize: 0;)
	r0 = 0xFFFFFFFF<32>
	goto l0001FD30
	// succ:  l0001FD30
l0001FB04:
	r5 = Mem0[r26:word32]
	r13 = Mem0[r19:word32]
	r2 = r24
	r7 = Mem0[r26 + 8<i32>:word32]
	r8 = Mem0[r26 + 12<i32>:word32]
	p0 = r5 == r13
	r12 = Mem0[r19 + 12<i32>:word32]
	r6 = Mem0[r26 + 4<i32>:word32]
	r3 = Mem0[r19 + 4<i32>:word32]
	r9 = Mem0[r19 + 8<i32>:word32]
	Mem0[r29 + 52<i32>:word32] = r16
	Mem0[r29 + 48<i32>:word32] = r25
	Mem0[r29 + 60<i32>:word32] = r27
	Mem0[r29 + 56<i32>:word32] = r17
	branch p0 l0001FB4C
	// succ:  l0001FB40 l0001FB4C
l0001FB40:
	branch p0 l0001FB4C
	// succ:  l0001FB44 l0001FB4C
l0001FB44:
	p0 = r5 == 2<32>
	p0 = r13 == 1<32>
	branch p0 l0001FB88
	// succ:  l0001FB4C l0001FB88
l0001FB4C:
	branch p0 l0001FB5C
	// succ:  l0001FB50 l0001FB5C
l0001FB50:
	p0 = r6 == -1<i32>
	branch p0 l0001FB5C
	// succ:  l0001FB54 l0001FB5C
l0001FB54:
	p0 = r6 == 2<32>
	branch p0 l0001FB88
	// succ:  l0001FB5C l0001FB88
l0001FB5C:
	p0 = r3 == 2<32>
	p0 = r7 == r9
	branch p0 l0001FB70
	// succ:  l0001FB64 l0001FB70
l0001FB64:
	branch p0 l0001FB70
	// succ:  l0001FB68 l0001FB70
l0001FB68:
	p0 = r7 == 2<32>
	p0 = r9 == 1<32>
	branch p0 l0001FB88
	// succ:  l0001FB70 l0001FB88
l0001FB70:
	p0 = r8 == r12
	branch p0 l0001FBBC
	// succ:  l0001FB78 l0001FBBC
l0001FB78:
	p0 = r8 == 1<32>
	branch p0 l0001FBBC
	// succ:  l0001FB80 l0001FBBC
l0001FB80:
	p0 = r12 == 1<32>
	branch p0 l0001FBBC
	// succ:  l0001FB88 l0001FBBC
l0001FB88:
	Mem0[r29 + 28<i32>:word32] = r12
	r1 = 0xBC<32>
	r0 = PC + 0xA330<32>
	Mem0[r29 + 16<i32>:word32] = r13
	Mem0[r29 + 24<i32>:word32] = r9
	Mem0[r29 + 8<i32>:word32] = r7
	Mem0[r29 + 20<i32>:word32] = r3
	r3 = PC + 0xA363<32>
	Mem0[r29 + 4<i32>:word32] = r6
	Mem0[r29 + 12<i32>:word32] = r8
	Mem0[r29:word32] = r5
	goto l0001FAF8
	// succ:  l0001FAF8
l0001FBBC:
	Mem0[r29 + 44<i32>:word32] = r21
	r24 = Mem0[r29 + 104<i32>:word32]
	r19 = r2
	Mem0[r29 + 20<i32>:word32] = r3
	Mem0[r29 + 36<i32>:word32] = r18
	r0 = PC + 0xA2F0<32>
	Mem0[r29 + 40<i32>:word32] = r20
	r1 = 0xBC<32>
	r4 = PC + 0xA35F<32>
	Mem0[r29 + 28<i32>:word32] = r12
	Mem0[r29 + 32<i32>:word32] = r24
	Mem0[r29 + 16<i32>:word32] = r13
	Mem0[r29 + 24<i32>:word32] = r9
	Mem0[r29 + 8<i32>:word32] = r7
	Mem0[r29 + 12<i32>:word32] = r8
	Mem0[r29:word32] = r5
	Mem0[r29 + 4<i32>:word32] = r6
	call logmsg_function (retsize: 0;)
	r26 = Mem0[r29 + 100<i32>:word32]
	r3 = Mem0[r29 + 48<i32>:word32]
	r14 = 0<32>
	p0 = r24 > 0<32>
	r25 = Mem0[r29 + 56<i32>:word32]
	Mem0[r3 + 6<i32>:byte] = r2
	r2 = Mem0[r29 + 52<i32>:word32]
	Mem0[r3 + 4<i32>:word32] = r18
	Mem0[r3 + 12<i32>:word32] = r21
	Mem0[r3 + 8<i32>:word32] = r20
	r12 = Mem0[r29 + 88<i32>:word32]
	r13 = Mem0[r29 + 80<i32>:word32]
	branch p0 l0001FD08
	// succ:  l0001FC38 l0001FD08
l0001FC38:
	r7 = Mem0[r29 + 92<i32>:word64]
	r5 = Mem0[r29 + 68<i32>:word64]
	r6 = !(r13 == 1<32>)
	r2 = Mem0[r29 + 76<i32>:word64]
	r0 = Mem0[r29 + 84<i32>:word64]
	r9 = r5 * r7
	r4 = Mem0[r29 + 72<i32>:word64]
	r3 = Mem0[r29 + 64<i32>:word64]
	p0 = r5 == 1<32>
	p2 = r0
	r0 = Mem0[r29 + 96<i32>:word32]
	p1 = r4 == 1<32>
	r9 = r9 * r13
	r8 = r3 * r2
	r9 = r14 + 0<32>
	p2 = r7 == 1<32>
	r2 = r12 == 0<32>
	r4 = r13 * r5
	p0 = r0
	r8 = r8 * r12
	r5 = !(r12 == 1<32>)
	r8 = r14 + 0<32>
	r4 = r14 + 0<32>
	r7 = 0<32>
	// succ:  l0001FC90
l0001FC90:
	r14 = 0<32>
	r13_r12 = r25_r26
	branch p0 l0001FCF8
l0001FC94:
	r14 = 0<32>
	r13_r12 = r25_r26
	// succ:  l0001FC9C l0001FCF8
l0001FC9C:
	p0 = r10 > 0<32>
	r15 = r13
	r28 = r12
	branch p0 l0001FCE8
	// succ:  l0001FCA8 l0001FCE8
l0001FCA8:
	p0 = r12 > 0<32>
	__loop(1<i32>, 0x0001FCAC<p32>, r20)
	r1_r0 = r15_r28
	r10 = r23
	branch p0 l0001FCDC
	// succ:  l0001FCB8 l0001FCDC
l0001FCB8:
	p0 = r13 > 0<32>
	__loop(0<i32>, 0x0001FCBC<p32>, r21)
	r16 = Mem0[r0:word32]
	r11 = Mem0[r1:word32]
	r1 = r1 + (r5 << 2<32>)
	r0 = r0 + (r6 << 2<32>)
	r11 = r11 - r16
	Mem0[r10:word32] = r11
	r10 = r10 + 4<32>
	r23 = r23 + (r21 << 2<32>)
	// succ:  l0001FCDC
l0001FCDC:
	r15 = r15 + (r2 << 2<32>)
	r28 = r28 + (r3 << 2<32>)
	// succ:  l0001FCE8
l0001FCE8:
	branch r14 == r18 l0001FC9C
	goto l0001FCFC
	// succ:  l0001FCFC l0001FC9C
l0001FCF8:
	branch r7 == r24 l0001FC90
	goto l0001FD0C
	// succ:  l0001FD0C l0001FC90
l0001FCFC:
	r14 = r14 + 1<32>
	r12 = r12 + (r4 << 2<32>)
	r13 = r13 + (r22 << 2<32>)
	branch r7 == r24 l0001FC94
	goto l0001FD0C
	// succ:  l0001FD0C l0001FC94
l0001FD08:
	Mem0[r29:byte] = r2
	r2 = Mem0[r29 + 60<i32>:word32]
	r0 = PC + 0xA1B0<32>
	goto l0001FD1C
	// succ:  l0001FD1C
l0001FD0C:
	r7 = r7 + 1<32>
	r26 = r26 + (r9 << 2<32>)
	Mem0[r29:byte] = r2
	r2 = Mem0[r29 + 60<i32>:word32]
	r0 = PC + 0x30<32>
	// succ:  l0001FD1C
l0001FD1C:
	r2 = r19
	r1 = 0xBC<32>
	r4 = PC + 0xB<32>
	call logmsg_function (retsize: 0;)
	r0 = 0<32>
	// succ:  l0001FD30
l0001FD30:
	r19_r18 = Mem0[r29 + 144<i32>:word64]
	r17_r16 = Mem0[r29 + 152<i32>:word64]
	r23_r22 = Mem0[r29 + 128<i32>:word64]
	r21_r20 = Mem0[r29 + 136<i32>:word64]
	r27_r26 = Mem0[r29 + 112<i32>:word64]
	r25_r24 = Mem0[r29 + 120<i32>:word64]
	v42 = r30
	r31 = Mem0[v42 + 4<i32>:word32]
	r30 = Mem0[v42:word32]
	r29 = v42 + 8<i32>
	return
	// succ:  sub_f_execute_exit
sub_f_execute_exit:


// sub_f_check
// Return size: 0
define sub_f_check
sub_f_check_entry:
	r29 = fp
	// succ:  l0001FD44
l0001FD44:
	v4 = r29 - 8<i32>
	Mem0[v4:word32] = r30
	Mem0[v4 + 4<i32>:word32] = r31
	r30 = v4
	r29 = v4 - 16<i32>
	Mem0[r29 + 496<i32>:word64] = r17_r16
	r4 = PC + 0xA139<32>
	r16 = r1
	r1 = 0x37<32>
	r17 = r0
	Mem0[r29:word32] = r17
	r2 = r16
	r0 = PC + 0xA10A<32>
	call logmsg_function (retsize: 0;)
	branch r2 == 4<32> l0001FD94
	// succ:  l0001FD78 l0001FD94
l0001FD78:
	r2 = Mem0[r17 + 16<i32>:word32]
	r1 = 0x38<32>
	r0 = PC + 0x2E<32>
	r3 = PC + 0xA10D<32>
	// succ:  l0001FD84
l0001FD84:
	r2 = r16
	call errlog_function (retsize: 0;)
	v16 = r30
	r31 = Mem0[v16 + 4<i32>:word32]
	r30 = Mem0[v16:word32]
	r29 = v16 + 8<i32>
	return
	// succ:  sub_f_check_exit
l0001FD94:
	branch r2 == 2<32> l0001FDB4
	// succ:  l0001FDA4 l0001FDB4
l0001FDA4:
	r2 = Mem0[r17 + 20<i32>:word32]
	r1 = 0x39<32>
	r0 = PC + 2<32>
	goto l0001FD84
	// succ:  l0001FD84
l0001FDB4:
	r2 = r16
	r1 = 0x3A<32>
	r0 = PC + 0xA0AE<32>
	Mem0[r29:word32] = r17
	call logmsg_function (retsize: 0;)
	r4 = PC + 0xA0E8<32>
	r0 = 0<32>
	v17 = r30
	r31 = Mem0[v17 + 4<i32>:word32]
	r30 = Mem0[v17:word32]
	r29 = v17 + 8<i32>
	return
	// succ:  sub_f_check_exit
sub_f_check_exit:


// logmsg_function
// Return size: 0
define logmsg_function
logmsg_function_entry:
	r29 = fp
	// succ:  l0001FDD8
l0001FDD8:
	v4 = r29 - 8<i32>
	Mem0[v4:word32] = r30
	Mem0[v4 + 4<i32>:word32] = r31
	r30 = v4
	r29 = v4 - 8<i32>
	r3 = 2<32>
	branch r3 >u r5 l0001FDF8
	// succ:  l0001FDE8 l0001FDF8
l0001FDE8:
	r5 = Mem0[r2 + 16<i32>:word32]
	Mem0[r29 + 1<i32>:byte] = r6
	r6 = r29 + 0x10<32>
	r5 = r29 + 0x10<32>
	// succ:  l0001FDF8
l0001FDF8:
	v11 = r30
	r31 = Mem0[v11 + 4<i32>:word32]
	r30 = Mem0[v11:word32]
	r29 = v11 + 8<i32>
	return
	// succ:  logmsg_function_exit
logmsg_function_exit:


// errlog_function
// Return size: 0
define errlog_function
errlog_function_entry:
	r29 = fp
	// succ:  l0001FDFC
l0001FDFC:
	v4 = r29 - 8<i32>
	Mem0[v4:word32] = r30
	Mem0[v4 + 4<i32>:word32] = r31
	r30 = v4
	r29 = v4 - 8<i32>
	r4 = r3
	r3 = 0<32>
	Mem0[r29 + 1<i32>:byte] = r6
	r6 = r29 + 0x10<32>
	r5 = r29 + 0x10<32>
	call logv (retsize: 0;)
	r0 = Mem0[r0:word32]
	r0 = Mem0[r0:word32]
	r0 = Mem0[r0:word32]
	r0 = Mem0[r0:word32]
	// succ:  l0001FE1C_thunk_rank_execute
l0001FE1C_thunk_rank_execute:
	call rank_execute (retsize: 0;)
	return
	// succ:  errlog_function_exit
errlog_function_exit:


// rank_execute
// Return size: 0
define rank_execute
rank_execute_entry:
	r29 = fp
	// succ:  l0001FE20
l0001FE20:
	v4 = r29 - 8<i32>
	Mem0[v4:word32] = r30
	Mem0[v4 + 4<i32>:word32] = r31
	r30 = v4
	r29 = v4 - 24<i32>
	Mem0[r29 + 496<i32>:word64] = r17_r16
	r4 = PC + 0xA1C4<32>
	r1 = 0x32<32>
	r17_r16 = r1_r0
	Mem0[r29 + 8<i32>:word64] = r19_r18
	r2 = Mem0[r16 + 4<i32>:word32]
	r7 = Mem0[r16 + 8<i32>:word32]
	r5 = Mem0[r2 + 4<i32>:word32]
	r2 = r17
	r3 = Mem0[r5 + 16<i32>:word32]
	r19 = Mem0[r7:word32]
	Mem0[r29:word32] = r16
	r18 = Mem0[r3:word32]
	call logmsg_function (retsize: 0;)
	branch r2 >u 6<32> l0001FE6C
	// succ:  l0001FE58 l0001FE6C
l0001FE58:
	r2 = Mem0[r19 + 20<i32>:word32]
	r2 = r17
	r1 = 0x35<32>
	r3 = PC + 0x27<32>
	call errlog_function (retsize: 0;)
	r0 = 0xFFFFFFFF<32>
	goto l0001FE9C
	// succ:  l0001FE9C
l0001FE6C:
	r3 = Mem0[r19 + 16<i32>:word32]
	r1 = 0x3B<32>
	r4 = PC + 0xA19D<32>
	Mem0[r19:word32] = 1<32>
	Mem0[r19 + 12<i32>:word32] = 1<32>
	r2 = r17
	Mem0[r19 + 24<i32>:word32] = 4<32>
	Mem0[r19 + 8<i32>:word32] = 1<32>
	Mem0[r3:word32] = r18
	Mem0[r19 + 4<i32>:word32] = 0xFFFFFF81<32>
	Mem0[r29:word32] = r16
	call logmsg_function (retsize: 0;)
	r0 = 0<32>
	// succ:  l0001FE9C
l0001FE9C:
	r19_r18 = Mem0[r29 + 8<i32>:word64]
	r17_r16 = Mem0[r29 + 16<i32>:word64]
	v22 = r30
	r31 = Mem0[v22 + 4<i32>:word32]
	r30 = Mem0[v22:word32]
	r29 = v22 + 8<i32>
	return
	// succ:  rank_execute_exit
rank_execute_exit:


// rank_check
// Return size: 0
define rank_check
rank_check_entry:
	r29 = fp
	// succ:  l0001FEA4
l0001FEA4:
	v4 = r29 - 8<i32>
	Mem0[v4:word32] = r30
	Mem0[v4 + 4<i32>:word32] = r31
	r30 = v4
	r29 = v4 - 16<i32>
	Mem0[r29 + 496<i32>:word64] = r17_r16
	r4 = PC + 0xA0F4<32>
	r17 = r0
	r16 = r1
	r1 = 0x41<32>
	Mem0[r29:word32] = r17
	r2 = r16
	call logmsg_function (retsize: 0;)
	branch r2 == 4<32> l0001FEE4
	// succ:  l0001FED0 l0001FEE4
l0001FED0:
	r2 = Mem0[r17 + 16<i32>:word32]
	r1 = 0x42<32>
	r3 = PC + 0x22<32>
	r2 = r16
	call errlog_function (retsize: 0;)
	// succ:  l0001FED8
l0001FED8:
	v16 = r30
	r31 = Mem0[v16 + 4<i32>:word32]
	r30 = Mem0[v16:word32]
	r29 = v16 + 8<i32>
	return
	// succ:  rank_check_exit
l0001FEE4:
	branch r2 == 2<32> l0001FEFC
	// succ:  l0001FEF4 l0001FEFC
l0001FEF4:
	r2 = Mem0[r17 + 20<i32>:word32]
	r1 = 0x43<32>
	goto l0001FED8
	// succ:  l0001FED8
l0001FEFC:
	r2 = r16
	r1 = 0x44<32>
	r4 = PC + 0xA0D1<32>
	Mem0[r29:word32] = r17
	call logmsg_function (retsize: 0;)
	r0 = 0<32>
	v17 = r30
	r31 = Mem0[v17 + 4<i32>:word32]
	r30 = Mem0[v17:word32]
	r29 = v17 + 8<i32>
	return
	// succ:  rank_check_exit
rank_check_exit:


// logmsg_function
// Return size: 0
define logmsg_function
logmsg_function_entry:
	r29 = fp
	// succ:  l0001FF1C
l0001FF1C:
	v4 = r29 - 8<i32>
	Mem0[v4:word32] = r30
	Mem0[v4 + 4<i32>:word32] = r31
	r30 = v4
	r29 = v4 - 8<i32>
	r3 = 2<32>
	branch r3 >u r5 l0001FF40
	// succ:  l0001FF2C l0001FF40
l0001FF2C:
	r5 = Mem0[r2 + 16<i32>:word32]
	r5 = r29 + 0x10<32>
	r3 = 2<32>
	r0 = PC + 0x16<32>
	Mem0[r29 + 1<i32>:byte] = r6
	r6 = r29 + 0x10<32>
	call logv (retsize: 0;)
	// succ:  l0001FF34_thunk_errlog_function
l0001FF34_thunk_errlog_function:
	call errlog_function (retsize: 0;)
	return
	// succ:  logmsg_function_exit
l0001FF40:
	v13 = r30
	r31 = Mem0[v13 + 4<i32>:word32]
	r30 = Mem0[v13:word32]
	r29 = v13 + 8<i32>
	return
	// succ:  logmsg_function_exit
logmsg_function_exit:


// errlog_function
// Return size: 0
define errlog_function
errlog_function_entry:
	r29 = fp
	// succ:  l0001FF44
l0001FF44:
	v4 = r29 - 8<i32>
	Mem0[v4:word32] = r30
	Mem0[v4 + 4<i32>:word32] = r31
	r30 = v4
	r29 = v4 - 8<i32>
	r4 = r3
	r0 = PC + 0xA03A<32>
	Mem0[r29 + 1<i32>:byte] = r6
	r6 = r29 + 0x10<32>
	r5 = r29 + 0x10<32>
	r3 = 0<32>
	v13 = r30
	r31 = Mem0[v13 + 4<i32>:word32]
	r30 = Mem0[v13:word32]
	r29 = v13 + 8<i32>
	return
	// succ:  errlog_function_exit
errlog_function_exit:


// range_execute
// Return size: 0
define range_execute
range_execute_entry:
	r29 = fp
	// succ:  l0001FF70
l0001FF70:
	v4 = r29 - 8<i32>
	Mem0[v4:word32] = r30
	Mem0[v4 + 4<i32>:word32] = r31
	r30 = v4
	r29 = v4 - 40<i32>
	Mem0[r29 + 496<i32>:word64] = r17_r16
	r4 = PC + 0xA10E<32>
	r17_r16 = r0_r1
	Mem0[r29 + 8<i32>:word64] = r23_r22
	r2 = Mem0[r17 + 4<i32>:word32]
	r1 = 0x38<32>
	r3 = Mem0[r17 + 8<i32>:word32]
	Mem0[r29 + 16<i32>:word64] = r21_r20
	Mem0[r29 + 24<i32>:word64] = r19_r18
	r0 = Mem0[r2 + 4<i32>:word32]
	r5 = Mem0[r2 + 8<i32>:word32]
	r22 = Mem0[r3:word32]
	r2 = Mem0[r2:word32]
	r5 = Mem0[r5 + 16<i32>:word32]
	r7 = Mem0[r0 + 16<i32>:word32]
	r18 = Mem0[r22 + 16<i32>:word32]
	r6 = Mem0[r2 + 16<i32>:word32]
	r2 = r16
	r21 = Mem0[r5:word32]
	r19 = Mem0[r7:word32]
	Mem0[r29:word32] = r17
	r20 = Mem0[r6:word32]
	call logmsg_function (retsize: 0;)
	r3 = r20 + 0<32>
	r2 = 0<32>
	branch p0 l0001FFD0
	// succ:  l0001FFBC l0001FFD0
l0001FFBC:
	p0 = r11 > -1<i32>
	// succ:  l0001FFC0
l0001FFC0:
	branch r19 >u r3 l0001FFC0
	// succ:  l0001FFD0 l0001FFC0
l0001FFD0:
	r3 = r3 + r21
	r2 = r2 + 1<32>
	branch p1 l0001FFE0
	// succ:  l0001FFD4 l0001FFE0
l0001FFD4:
	p1 = r12 > -1<i32>
	branch r19 > r3 l0001FFD4
	goto l0001FFE4
	// succ:  l0001FFE4 l0001FFD4
l0001FFE0:
	r4 = Mem0[r22 + 20<i32>:word32]
	// succ:  l0001FFE4
l0001FFE4:
	r3 = r3 + r21
	r2 = r2 + 1<32>
	branch r3 >u r4 l00020004
	// succ:  l0001FFF0 l00020004
l0001FFF0:
	r3 = r2 << 2<32>
	r2 = r16
	r1 = 0x3F<32>
	r3 = PC + 0x2A<32>
	call errlog_function (retsize: 0;)
	r0 = 0xFFFFFFFF<32>
	goto l00020050
	// succ:  l00020050
l00020004:
	Mem0[r22 + 4<i32>:word32] = 1<32>
	Mem0[r22:word32] = 1<32>
	Mem0[r22 + 12<i32>:word32] = r2
	Mem0[r22 + 8<i32>:word32] = 1<32>
	Mem0[r22 + 24<i32>:word32] = r3
	branch p0 l00020030
	// succ:  l00020018 l00020030
l00020018:
	Mem0[r18:word32] = r20
	r18 = r18 + 4<i32>
	branch r19 >u r20 l00020018
	// succ:  l00020028 l00020018
l00020028:
	r20 = r20 + r21
	Mem0[r18:word32] = r20
	r18 = r18 + 4<i32>
	r20 = r20 + r21
	// succ:  l00020030
l00020030:
	branch p0 l00020028
	// succ:  l00020034 l00020028
l00020034:
	p0 = r12 > -1<i32>
	r2 = r16
	r1 = 0x49<32>
	r4 = PC + 0xA070<32>
	Mem0[r29:word32] = r17
	call logmsg_function (retsize: 0;)
	r0 = 0<32>
	// succ:  l00020050
l00020050:
	r19_r18 = Mem0[r29 + 24<i32>:word64]
	r17_r16 = Mem0[r29 + 32<i32>:word64]
	r23_r22 = Mem0[r29 + 8<i32>:word64]
	r21_r20 = Mem0[r29 + 16<i32>:word64]
	v32 = r30
	r31 = Mem0[v32 + 4<i32>:word32]
	r30 = Mem0[v32:word32]
	r29 = v32 + 8<i32>
	return
	// succ:  range_execute_exit
range_execute_exit:


// range_check
// Return size: 0
define range_check
range_check_entry:
	r29 = fp
	// succ:  l0002005C
l0002005C:
	v4 = r29 - 8<i32>
	Mem0[v4:word32] = r30
	Mem0[v4 + 4<i32>:word32] = r31
	r30 = v4
	r29 = v4 - 16<i32>
	Mem0[r29 + 496<i32>:word64] = r17_r16
	r4 = PC + 0x9FD5<32>
	r17 = r0
	r16 = r1
	r1 = 0x4F<32>
	Mem0[r29:word32] = r17
	r2 = r16
	call logmsg_function (retsize: 0;)
	branch r2 == 6<32> l0002009C
	// succ:  l00020088 l0002009C
l00020088:
	r2 = Mem0[r17 + 16<i32>:word32]
	r1 = 0x50<32>
	r3 = PC + 4<32>
	r2 = r16
	call errlog_function (retsize: 0;)
	// succ:  l00020090
l00020090:
	v16 = r30
	r31 = Mem0[v16 + 4<i32>:word32]
	r30 = Mem0[v16:word32]
	r29 = v16 + 8<i32>
	return
	// succ:  range_check_exit
l0002009C:
	branch r2 == 2<32> l000200B4
	// succ:  l000200AC l000200B4
l000200AC:
	r2 = Mem0[r17 + 20<i32>:word32]
	r1 = 0x51<32>
	goto l00020090
	// succ:  l00020090
l000200B4:
	r2 = r16
	r1 = 0x52<32>
	r4 = PC + 0x9FB3<32>
	Mem0[r29:word32] = r17
	call logmsg_function (retsize: 0;)
	r0 = 0<32>
	v17 = r30
	r31 = Mem0[v17 + 4<i32>:word32]
	r30 = Mem0[v17:word32]
	r29 = v17 + 8<i32>
	return
	// succ:  range_check_exit
range_check_exit:


// logmsg_function
// Return size: 0
define logmsg_function
logmsg_function_entry:
	r29 = fp
	// succ:  l000200D4
l000200D4:
	v4 = r29 - 8<i32>
	Mem0[v4:word32] = r30
	Mem0[v4 + 4<i32>:word32] = r31
	r30 = v4
	r29 = v4 - 8<i32>
	r3 = 2<32>
	branch r3 >u r5 l000200F8
	// succ:  l000200E4 l000200F8
l000200E4:
	r5 = Mem0[r2 + 16<i32>:word32]
	r5 = r29 + 0x10<32>
	r3 = 2<32>
	r0 = PC + 0x36<32>
	Mem0[r29 + 1<i32>:byte] = r6
	r6 = r29 + 0x10<32>
	call logv (retsize: 0;)
	// succ:  l000200EC_thunk_errlog_function
l000200EC_thunk_errlog_function:
	call errlog_function (retsize: 0;)
	return
	// succ:  logmsg_function_exit
l000200F8:
	v13 = r30
	r31 = Mem0[v13 + 4<i32>:word32]
	r30 = Mem0[v13:word32]
	r29 = v13 + 8<i32>
	return
	// succ:  logmsg_function_exit
logmsg_function_exit:


// errlog_function
// Return size: 0
define errlog_function
errlog_function_entry:
	r29 = fp
	// succ:  l000200FC
l000200FC:
	v4 = r29 - 8<i32>
	Mem0[v4:word32] = r30
	Mem0[v4 + 4<i32>:word32] = r31
	r30 = v4
	r29 = v4 - 8<i32>
	r4 = r3
	r0 = PC + 0x9F1A<32>
	Mem0[r29 + 1<i32>:byte] = r6
	r6 = r29 + 0x10<32>
	r5 = r29 + 0x10<32>
	r3 = 0<32>
	v13 = r30
	r31 = Mem0[v13 + 4<i32>:word32]
	r30 = Mem0[v13:word32]
	r29 = v13 + 8<i32>
	return
	// succ:  errlog_function_exit
errlog_function_exit:


// transpose_execute
// Return size: 0
define transpose_execute
transpose_execute_entry:
	r29 = fp
	// succ:  l00020120
l00020120:
	v4 = r29 - 8<i32>
	Mem0[v4:word32] = r30
	Mem0[v4 + 4<i32>:word32] = r31
	r30 = v4
	r29 = v4 - 144<i32>
	r2 = PC + 0xA008<32>
	Mem0[r29 + 136<i32>:word64] = r17_r16
	r5 = r29 + 0x40<32>
	r17_r16 = r0_r1
	r3 = r29 + 0x30<32>
	Mem0[r29 + 128<i32>:word64] = r19_r18
	r12 = Mem0[r17 + 4<i32>:word32]
	r14 = __set_bit<word32,word32>(r3, 4<32>)
	r13 = __set_bit<word32,word32>(r5, 4<32>)
	Mem0[r29 + 120<i32>:word64] = r21_r20
	r1 = 0x42<32>
	Mem0[r29 + 112<i32>:word64] = r23_r22
	Mem0[r29 + 96<i32>:word64] = r27_r26
	r18 = Mem0[r12:word32]
	r4 = Mem0[r17 + 8<i32>:word32]
	Mem0[r29 + 104<i32>:word64] = r25_r24
	r9_r8 = Mem0[r2:word64]
	r20 = Mem0[r18 + 8<i32>:word32]
	r21 = Mem0[r18 + 12<i32>:word32]
	r22 = Mem0[r18:word32]
	r23 = Mem0[r18 + 4<i32>:word32]
	Mem0[r29 + 56<i32>:word32] = r20
	Mem0[r29 + 48<i32>:word32] = r22
	r26 = r21 * r20
	Mem0[r14:word32] = r23
	r7_r6 = Mem0[r2 + 8<i32>:word64]
	Mem0[r13:word32] = r26
	r24 = Mem0[r4:word32]
	r4 = PC + 0x9FB4<32>
	Mem0[r29 + 16<i32>:byte] = r27
	r27 = r26 * r23
	Mem0[r29 + 80<i32>:word64] = r9_r8
	Mem0[r29 + 72<i32>:word32] = r21
	r19 = Mem0[r24 + 16<i32>:word32]
	Mem0[r29 + 88<i32>:word64] = r7_r6
	Mem0[r5 + 12<i32>:word32] = 1<32>
	Mem0[r29 + 60<i32>:word32] = r21
	Mem0[r29:word32] = r17
	call logmsg_function (retsize: 0;)
	r4 = PC + 0x9F98<32>
	Mem0[r29 + 12<i32>:word32] = r21
	Mem0[r29:word32] = r22
	r1 = 0x47<32>
	Mem0[r29 + 4<i32>:word32] = r23
	Mem0[r29 + 8<i32>:word32] = r20
	call logmsg_function (retsize: 0;)
	branch r2 == 2<32> l000201F4
	// succ:  l000201E8 l000201F4
l000201E8:
	r2 = Mem0[r25:word32]
	branch r2 == 2<32> l000201F8
	// succ:  l000201F0 l000201F8
l000201F0:
	branch r2 == 2<32> l00020214
	goto l000201F8
	// succ:  l000201F8 l00020214
l000201F4:
	r1 = 0x4B<32>
	r3 = PC + 0x9F7E<32>
	goto l00020200
	// succ:  l00020200
l000201F8:
	r1 = 0x4B<32>
	r3 = PC + 0x3E<32>
	// succ:  l00020200
l00020200:
	r2 = r16
	call errlog_function (retsize: 0;)
	// succ:  l00020204
l00020204:
	r0 = 0xFFFFFFFF<32>
	goto l00020418
	// succ:  l00020418
l00020214:
	branch r2 >u r3 l0002022C
	// succ:  l00020220 l0002022C
l00020220:
	r3 = Mem0[r24 + 20<i32>:word32]
	r1 = 0x4C<32>
	goto l00020204
	// succ:  l00020204
l0002022C:
	r3 = Mem0[r25 + 24<i32>:word32]
	branch r4 >u r3 l00020248
	// succ:  l0002023C l00020248
l0002023C:
	r4 = 0x14<32>
	r1 = 0x4E<32>
	goto l00020204
	// succ:  l00020204
l00020248:
	branch r5 == 2<32> l00020298
	// succ:  l00020258 l00020298
l00020258:
	r1 = 0x52<32>
	r5 = r3 >>u 2<32>
	r4 = PC + 0xB<32>
	call logmsg_function (retsize: 0;)
	r3 = Mem0[r18 + 4<i32>:word32]
	r2 = Mem0[r18:word32]
	Mem0[r24:word32] = r2
	Mem0[r24 + 4<i32>:word32] = r3
	r0 = Mem0[r24 + 16<i32>:word32]
	r2 = Mem0[r18 + 8<i32>:word32]
	Mem0[r24 + 8<i32>:word32] = r2
	r7 = Mem0[r18 + 12<i32>:word32]
	Mem0[r24 + 12<i32>:word32] = r7
	r2 = Mem0[r18 + 24<i32>:word32]
	Mem0[r24 + 24<i32>:word32] = r2
	r2 = Mem0[r18 + 24<i32>:word32]
	r1 = Mem0[r18 + 16<i32>:word32]
	call fn00009560 (retsize: 0;)
	goto l00020414
	// succ:  l00020414
l00020298:
	branch p0 l000202B0
	// succ:  l000202A0 l000202B0
l000202A0:
	p0 = r5 == 0<32>
	r4 = Mem0[r25 + 16<i32>:word32]
	r7_r6 = 0x100000002<64>
	r5 = 0<32>
	r8 = 3<32>
	goto l00020320
	// succ:  l00020320
l000202B0:
	r6 = r5
	r3 = r29 + 0x50<32>
	p0 = r5 >u 1<32>
	r2 = 4<32> - r5
	r3 = r3 + (r2 << 2<32>)
	__loop(0<i32>, 0x000202CC<p32>, r6)
	r4 = r4 + 4<i32>
	r5 = Mem0[r4:word32]
	branch p0 l000202D8
	// succ:  l000202CC l000202D8
l000202CC:
	r5 = r5 + r2
	Mem0[r3:word32] = r5
	r3 = r3 + 4<i32>
	r4 = r4 + 4<i32>
	r5 = Mem0[r4:word32]
	// succ:  l000202D8
l000202D8:
	r9 = r29 + 0x30<32>
	r2 = r5 + r2
	Mem0[r3:word32] = r2
	r3 = r3 + 4<i32>
	r2 = r29 + 0x50<32>
	r6 = Mem0[r29 + 88<i32>:word64]
	r5 = Mem0[r29 + 80<i32>:word64]
	r3 = r29 + 0x40<32>
	r4 = __set_bit<word32,word32>(r2, 4<32>)
	r2 = Mem0[r18 + 24<i32>:word32]
	r8 = Mem0[r29 + 92<i32>:word32]
	r13 = Mem0[r30 + r6 * 4<32>:word32]
	r7 = Mem0[r4:word32]
	r22 = Mem0[r30 + r5 * 4<32>:word32]
	r27 = Mem0[r22 + r5 * 4<32>:word32]
	r21 = Mem0[r30 + r8 * 4<32>:word32]
	r20 = Mem0[r22 + r6 * 4<32>:word32]
	r23 = Mem0[r30 + r7 * 4<32>:word32]
	r12 = Mem0[r22 + r8 * 4<32>:word32]
	r26 = Mem0[r30 + r7 * 4<32>:word32]
	// succ:  l00020320
l00020320:
	Mem0[r24 + 12<i32>:word32] = r21
	Mem0[r24 + 24<i32>:word32] = r2
	r4 = PC + 0x9EAD<32>
	Mem0[r24 + 4<i32>:word32] = r23
	Mem0[r24 + 8<i32>:word32] = r20
	r1 = 0x89<32>
	Mem0[r29 + 44<i32>:word32] = r21
	Mem0[r24:word32] = r22
	r25_r24 = r13_r12
	Mem0[r29 + 36<i32>:word32] = r23
	Mem0[r29 + 40<i32>:word32] = r20
	Mem0[r29 + 8<i32>:word32] = r6
	Mem0[r29 + 32<i32>:word32] = r22
	Mem0[r29 + 24<i32>:word32] = r13
	Mem0[r29 + 28<i32>:word32] = r12
	Mem0[r29 + 16<i32>:word32] = r27
	Mem0[r29 + 20<i32>:word32] = r26
	Mem0[r29 + 4<i32>:word32] = r7
	Mem0[r29 + 12<i32>:word32] = r8
	Mem0[r29:word32] = r5
	call logmsg_function (retsize: 0;)
	r3_r2 = 0<64>
	branch p0 l000203FC
	// succ:  l00020380 l000203FC
l00020380:
	p0 = r14 > 0<32>
	r1_r0 = __simd_shl<word64,word32>(r25_r24, 2<32>)
	r5_r4 = __simd_shl<word64,word32>(r27_r26, 2<32>)
	// succ:  l00020384
l00020384:
	branch p0 l000203F0
l00020388:
	// succ:  l0002038C l000203F0
l0002038C:
	p0 = r15 > 0<32>
	r8 = r6
	branch p0 l000203E4
	// succ:  l00020398 l000203E4
l00020398:
	p0 = r12 > 0<32>
	__loop(1<i32>, 0x00020398<p32>, r20)
	r9 = r8
	r12 = r19
	branch p0 l000203D8
	// succ:  l000203A4 l000203D8
l000203A4:
	p0 = r13 > 0<32>
	__loop(0<i32>, 0x000203C0<p32>, r21)
	r13 = Mem0[r18 + 16<i32>:word32]
	r13 = Mem0[r28 + r9:word32]
	r9 = r9 + r0
	Mem0[r12:word32] = r13
	r12 = r12 + 4<i32>
	r19 = r19 + (r21 << 2<32>)
	// succ:  l000203D8
l000203D8:
	r8 = r8 + r1
	// succ:  l000203E4
l000203E4:
	branch r7 == r23 l0002038C
	goto l000203F4
	// succ:  l000203F4 l0002038C
l000203F0:
	branch r3 == r22 l00020384
	goto l00020400
	// succ:  l00020400 l00020384
l000203F4:
	r7 = r7 + 1<32>
	r6 = r6 + r4
	branch r3 == r22 l00020388
	goto l00020400
	// succ:  l00020400 l00020388
l000203FC:
	r4 = PC + 0x9E0F<32>
	r1 = 0x96<32>
	Mem0[r29:word32] = r17
	call logmsg_function (retsize: 0;)
	goto l00020414
	// succ:  l00020414
l00020400:
	r3 = r3 + 1<32>
	r2 = r2 + r5
	r4 = PC + 0xF<32>
	r1 = 0x96<32>
	Mem0[r29:word32] = r17
	call logmsg_function (retsize: 0;)
	// succ:  l00020414
l00020414:
	r0 = 0<32>
	// succ:  l00020418
l00020418:
	r19_r18 = Mem0[r29 + 128<i32>:word64]
	r17_r16 = Mem0[r29 + 136<i32>:word64]
	r23_r22 = Mem0[r29 + 112<i32>:word64]
	r21_r20 = Mem0[r29 + 120<i32>:word64]
	r27_r26 = Mem0[r29 + 96<i32>:word64]
	r25_r24 = Mem0[r29 + 104<i32>:word64]
	v38 = r30
	r31 = Mem0[v38 + 4<i32>:word32]
	r30 = Mem0[v38:word32]
	r29 = v38 + 8<i32>
	return
	// succ:  transpose_execute_exit
transpose_execute_exit:


// transpose_check
// Return size: 0
define transpose_check
transpose_check_entry:
	r29 = fp
	// succ:  l0002042C
l0002042C:
	v4 = r29 - 8<i32>
	Mem0[v4:word32] = r30
	Mem0[v4 + 4<i32>:word32] = r31
	r30 = v4
	r29 = v4 - 16<i32>
	Mem0[r29 + 496<i32>:word64] = r17_r16
	r4 = PC + 0x9CA5<32>
	r17 = r0
	r16 = r1
	r1 = 0x9C<32>
	call logmsg_function (retsize: 0;)
	Mem0[r29:word32] = r17
	branch r2 == 6<32> l00020470
	// succ:  l0002045C l00020470
l0002045C:
	r2 = Mem0[r17 + 16<i32>:word32]
	r1 = 0x9D<32>
	r3 = PC + 0x14<32>
	r2 = r16
	call errlog_function (retsize: 0;)
	// succ:  l00020464
l00020464:
	v16 = r30
	r31 = Mem0[v16 + 4<i32>:word32]
	r30 = Mem0[v16:word32]
	r29 = v16 + 8<i32>
	return
	// succ:  transpose_check_exit
l00020470:
	branch r2 == 2<32> l0002048C
	// succ:  l00020480 l0002048C
l00020480:
	r2 = Mem0[r17 + 20<i32>:word32]
	r1 = 0x9F<32>
	r1 = 0x9E<32>
	goto l00020464
	// succ:  l00020464
l0002048C:
	r4 = PC + 0x9C7F<32>
	Mem0[r29:word32] = r17
	call logmsg_function (retsize: 0;)
	r0 = 0<32>
	v17 = r30
	r31 = Mem0[v17 + 4<i32>:word32]
	r30 = Mem0[v17:word32]
	r29 = v17 + 8<i32>
	return
	// succ:  transpose_check_exit
transpose_check_exit:


// logmsg_function
// Return size: 0
define logmsg_function
logmsg_function_entry:
	r29 = fp
	// succ:  l000204A8
l000204A8:
	v4 = r29 - 8<i32>
	Mem0[v4:word32] = r30
	Mem0[v4 + 4<i32>:word32] = r31
	r30 = v4
	r29 = v4 - 8<i32>
	branch r3 >u r5 l000204C8
	// succ:  l000204B8 l000204C8
l000204B8:
	r5 = Mem0[r2 + 16<i32>:word32]
	r6 = r29 + 0x10<32>
	r5 = r29 + 0x10<32>
	r0 = PC + 0x3E<32>
	Mem0[r29 + 4<i32>:word32] = r6
	call logv (retsize: 0;)
	// succ:  l000204C8
l000204C8:
	v13 = r30
	r31 = Mem0[v13 + 4<i32>:word32]
	r30 = Mem0[v13:word32]
	r29 = v13 + 8<i32>
	return
	// succ:  logmsg_function_exit
logmsg_function_exit:


// errlog_function
// Return size: 0
define errlog_function
errlog_function_entry:
	r29 = fp
	// succ:  l000204CC
l000204CC:
	v4 = r29 - 8<i32>
	Mem0[v4:word32] = r30
	Mem0[v4 + 4<i32>:word32] = r31
	r30 = v4
	r29 = v4 - 8<i32>
	r4 = r3
	r0 = PC + 0x9BE6<32>
	Mem0[r29 + 1<i32>:byte] = r6
	r6 = r29 + 0x10<32>
	r5 = r29 + 0x10<32>
	r3 = 0<32>
	v13 = r30
	r31 = Mem0[v13 + 4<i32>:word32]
	r30 = Mem0[v13:word32]
	r29 = v13 + 8<i32>
	return
	// succ:  errlog_function_exit
errlog_function_exit:


// addn_execute
// Return size: 0
define addn_execute
addn_execute_entry:
	r29 = fp
	// succ:  l000204F0
l000204F0:
	v4 = r29 - 8<i32>
	Mem0[v4:word32] = r30
	Mem0[v4 + 4<i32>:word32] = r31
	r30 = v4
	r29 = v4 - 48<i32>
	Mem0[r29 + 496<i32>:word64] = r17_r16
	r4 = PC + 0x9D94<32>
	r17_r16 = r0_r1
	Mem0[r29 + 32<i32>:word64] = r19_r18
	r18 = Mem0[r17 + 4<i32>:word32]
	r1 = 0x39<32>
	r3 = Mem0[r17 + 8<i32>:word32]
	r2 = r16
	Mem0[r29 + 16<i32>:word64] = r23_r22
	Mem0[r29 + 24<i32>:word64] = r21_r20
	r21 = Mem0[r3:word32]
	r20 = Mem0[r18:word32]
	Mem0[r29 + 8<i32>:word64] = r25_r24
	r22 = Mem0[r20 + 12<i32>:word32]
	r23 = Mem0[r20 + 8<i32>:word32]
	r25 = Mem0[r20:word32]
	r24 = Mem0[r20 + 4<i32>:word32]
	Mem0[r29:word32] = r17
	r19 = Mem0[r21 + 16<i32>:word32]
	call logmsg_function (retsize: 0;)
	r2 = Mem0[r17 + 16<i32>:word32]
	branch r3 >u r2 l000205A0
	// succ:  l0002053C l000205A0
l0002053C:
	r3 = 2<32>
	r4 = r18 + 4<32>
	// succ:  l00020540
l00020540:
	branch r2 >u r5 l000205A0
	// succ:  l00020550 l000205A0
l00020550:
	r5 = r5 + 1<32>
	r4 = r4 + 4<32>
	r6 = Mem0[r4:word32]
	r3 = PC + 0xF<32>
	branch r7 == r25 l00020564
	// succ:  l00020564 l00020564
l00020564:
	r7 = Mem0[r6:word32]
	branch r7 == r24 l00020578
	// succ:  l00020578 l00020578
l00020578:
	r7 = Mem0[r6 + 4<i32>:word32]
	r3 = PC + 0x9D37<32>
	branch r7 == r23 l0002058C
	// succ:  l0002058C l0002058C
l0002058C:
	r7 = Mem0[r6 + 8<i32>:word32]
	r3 = PC + 0x9D23<32>
	branch r6 == r22 l00020540
	// succ:  l000205A0 l00020540
l000205A0:
	r6 = Mem0[r6 + 12<i32>:word32]
	r3 = PC + 0x9D0F<32>
	r5 = Mem0[r21 + 20<i32>:word32]
	r2 = r24 * r25
	r3 = PC + 0x9D0A<32>
	r1 = 0x40<32>
	r2 = r2 * r23
	r4 = r2 * r22
	branch r2 >u r5 l000205D4
	// succ:  l000205C8 l000205D4
l000205C8:
	r2 = r4 << 2<32>
	r2 = r16
	r0 = 0xFFFFFFFF<32>
	goto l00020654
	// succ:  l00020654
l000205D4:
	r3 = Mem0[r20:word32]
	r5 = Mem0[r20 + 4<i32>:word32]
	p0 = r4 == 0<32>
	Mem0[r21:word32] = r3
	Mem0[r21 + 4<i32>:word32] = r5
	r3 = 0<32>
	r6 = Mem0[r20 + 8<i32>:word32]
	Mem0[r21 + 8<i32>:word32] = r6
	r7 = Mem0[r20 + 12<i32>:word32]
	Mem0[r21 + 24<i32>:word32] = r2
	Mem0[r21 + 12<i32>:word32] = r7
	branch p0 l00020638
	// succ:  l000205F8 l00020638
l000205F8:
	r2 = 0<32>
	__loop(1<i32>, 0x00020604<p32>, r4)
	r6 = Mem0[r17 + 16<i32>:word32]
	r4 = r2
	r5_r4 = r18_r2
	branch p0 l0002062C
	// succ:  l00020610 l0002062C
l00020610:
	p0 = r6 == 0<32>
	__loop(0<i32>, 0x00020614<p32>, r6)
	r5 = r5 + 4<i32>
	r6 = Mem0[r5:word32]
	r6 = Mem0[r6 + 16<i32>:word32]
	r6 = r6 + (r3 << 2<32>)
	r6 = Mem0[r6:word32]
	r4 = r4 + r6
	// succ:  l0002062C
l0002062C:
	Mem0[r19:word32] = r4
	r3 = r3
	r19 = r19 + 4<32>
	// succ:  l00020638
l00020638:
	r2 = r16
	r1 = 0x4C<32>
	r4 = PC + 0x9C80<32>
	Mem0[r29:word32] = r17
	call logmsg_function (retsize: 0;)
	r0 = 0<32>
	// succ:  l00020654
l00020654:
	r19_r18 = Mem0[r29 + 32<i32>:word64]
	r17_r16 = Mem0[r29 + 40<i32>:word64]
	r23_r22 = Mem0[r29 + 16<i32>:word64]
	r21_r20 = Mem0[r29 + 24<i32>:word64]
	v35 = r30
	r31 = Mem0[v35 + 4<i32>:word32]
	r30 = Mem0[v35:word32]
	r29 = v35 + 8<i32>
	return
	// succ:  addn_execute_exit
addn_execute_exit:


// addn_check
// Return size: 0
define addn_check
addn_check_entry:
	r29 = fp
	// succ:  l00020664
l00020664:
	v4 = r29 - 8<i32>
	Mem0[v4:word32] = r30
	Mem0[v4 + 4<i32>:word32] = r31
	r30 = v4
	r29 = v4 - 16<i32>
	Mem0[r29 + 496<i32>:word64] = r17_r16
	r4 = PC + 0x9BD5<32>
	r17 = r0
	r16 = r1
	r1 = 0x52<32>
	Mem0[r29:word32] = r17
	r2 = r16
	call logmsg_function (retsize: 0;)
	branch r2 >u 2<32> l000206A4
	// succ:  l00020690 l000206A4
l00020690:
	r2 = Mem0[r17 + 16<i32>:word32]
	r1 = 0x53<32>
	r3 = PC + 3<32>
	r2 = r16
	call errlog_function (retsize: 0;)
	// succ:  l00020698
l00020698:
	v16 = r30
	r31 = Mem0[v16 + 4<i32>:word32]
	r30 = Mem0[v16:word32]
	r29 = v16 + 8<i32>
	return
	// succ:  addn_check_exit
l000206A4:
	branch r2 == 2<32> l000206BC
	// succ:  l000206B4 l000206BC
l000206B4:
	r2 = Mem0[r17 + 20<i32>:word32]
	r1 = 0x54<32>
	goto l00020698
	// succ:  l00020698
l000206BC:
	r2 = r16
	r1 = 0x55<32>
	r4 = PC + 0x9BB2<32>
	Mem0[r29:word32] = r17
	call logmsg_function (retsize: 0;)
	r0 = 0<32>
	v17 = r30
	r31 = Mem0[v17 + 4<i32>:word32]
	r30 = Mem0[v17:word32]
	r29 = v17 + 8<i32>
	return
	// succ:  addn_check_exit
addn_check_exit:


// logmsg_function
// Return size: 0
define logmsg_function
logmsg_function_entry:
	r29 = fp
	// succ:  l000206DC
l000206DC:
	v4 = r29 - 8<i32>
	Mem0[v4:word32] = r30
	Mem0[v4 + 4<i32>:word32] = r31
	r30 = v4
	r29 = v4 - 8<i32>
	r3 = 2<32>
	branch r3 >u r5 l00020700
	// succ:  l000206EC l00020700
l000206EC:
	r5 = Mem0[r2 + 16<i32>:word32]
	r5 = r29 + 0x10<32>
	r3 = 2<32>
	r0 = PC + 0x35<32>
	Mem0[r29 + 1<i32>:byte] = r6
	r6 = r29 + 0x10<32>
	call logv (retsize: 0;)
	// succ:  l000206F4_thunk_errlog_function
l000206F4_thunk_errlog_function:
	call errlog_function (retsize: 0;)
	return
	// succ:  logmsg_function_exit
l00020700:
	v13 = r30
	r31 = Mem0[v13 + 4<i32>:word32]
	r30 = Mem0[v13:word32]
	r29 = v13 + 8<i32>
	return
	// succ:  logmsg_function_exit
logmsg_function_exit:


// errlog_function
// Return size: 0
define errlog_function
errlog_function_entry:
	r29 = fp
	// succ:  l00020704
l00020704:
	v4 = r29 - 8<i32>
	Mem0[v4:word32] = r30
	Mem0[v4 + 4<i32>:word32] = r31
	r30 = v4
	r29 = v4 - 8<i32>
	r4 = r3
	r0 = PC + 0x9B19<32>
	Mem0[r29 + 1<i32>:byte] = r6
	r6 = r29 + 0x10<32>
	r5 = r29 + 0x10<32>
	r3 = 0<32>
	v13 = r30
	r31 = Mem0[v13 + 4<i32>:word32]
	r30 = Mem0[v13:word32]
	r29 = v13 + 8<i32>
	return
	// succ:  errlog_function_exit
errlog_function_exit:


// execute_qinstancenorm_ref
// Return size: 0
define execute_qinstancenorm_ref
execute_qinstancenorm_ref_entry:
	r29 = fp
	// succ:  l00020740
l00020740:
	v4 = r29 - 8<i32>
	Mem0[v4:word32] = r30
	Mem0[v4 + 4<i32>:word32] = r31
	r30 = v4
	r29 = v4 - 112<i32>
	r3 = Mem0[r0 + 8<i32>:word32]
	r2 = Mem0[r0 + 4<i32>:word32]
	Mem0[r29 + 72<i32>:word64] = r25_r24
	Mem0[r29 + 96<i32>:word64] = r19_r18
	r4 = Mem0[r2:word32]
	Mem0[r29 + 104<i32>:word64] = r17_r16
	Mem0[r29 + 64<i32>:word64] = r27_r26
	r17 = r1
	Mem0[r29 + 88<i32>:word64] = r21_r20
	r25 = Mem0[r4 + 8<i32>:word32]
	r24 = Mem0[r4 + 4<i32>:word32]
	r19 = Mem0[r4:word32]
	r27 = Mem0[r4 + 12<i32>:word32]
	r5 = r25 * r19
	Mem0[r29 + 80<i32>:word64] = r23_r22
	r16 = Mem0[r17 + 4<i32>:word32]
	r2 = r2 + r27 * 0x14<32>
	r21 = Mem0[r3 + 8<i32>:word32]
	r18 = Mem0[r3:word32]
	Mem0[r29 + 52<i32>:word32] = r25
	r22 = Mem0[r3 + 4<i32>:word32]
	r3 = r5 * r24
	r23 = Mem0[r18 + 16<i32>:word32]
	r26 = Mem0[r4 + 16<i32>:word32]
	call fn000095F0 (retsize: 0;)
	r20 = r3 * r27
	branch r20 >u r2 l000207C8
	// succ:  l000207B4 l000207C8
l000207B4:
	r2 = Mem0[r18 + 20<i32>:word32]
	r1 = 0x71<32>
	r3 = PC + 0x16<32>
	// succ:  l000207B8
l000207B8:
	r2 = r17
	call errlog_function (retsize: 0;)
	r0 = 0xFFFFFFFF<32>
	goto l00020AA8
	// succ:  l00020AA8
l000207C8:
	Mem0[r29 + 40<i32>:word32] = r26
	r1 = 0x72<32>
	branch p0 l000207E0
	// succ:  l000207D4 l000207E0
l000207D4:
	p0 = r11 == 2<32>
	goto l000207B8
	// succ:  l000207B8
l000207E0:
	Mem0[r18 + 8<i32>:word32] = r24
	Mem0[r18 + 12<i32>:word32] = r27
	r2 = r17
	Mem0[r18 + 4<i32>:word32] = r25
	Mem0[r29 + 12<i32>:word32] = r27
	Mem0[r18:word32] = 1<32>
	Mem0[r29 + 4<i32>:word32] = r25
	Mem0[r29 + 8<i32>:word32] = r24
	Mem0[r29:word32] = 1<32>
	call logmsg_function (retsize: 0;)
	Mem0[r18 + 24<i32>:word32] = r20
	r12 = r27
	p0 = r24 > 0<32>
	Mem0[r29 + 12<i32>:byte] = r0
	branch p0 l0002087C
	// succ:  l00020824 l0002087C
l00020824:
	r0 = p0
	r2 = Mem0[r29 + 40<i32>:word64]
	r4 = 0<32>
	// succ:  l00020828
l00020828:
	p0 = r25 > 0<32>
	branch p0 l00020874
	// succ:  l00020834 l00020874
l00020834:
	__loop(1<i32>, 0x00020834<p32>, r25)
	r7_r6 = r2_r16
	p0 = r12 > 0<32>
	r5 = r3
	branch p0 l00020868
	// succ:  l00020844 l00020868
l00020844:
	__loop(0<i32>, 0x00020848<p32>, r12)
	r9 = Mem0[r6:word32]
	r7 = r7 + 1<i32>
	r8 = Mem0[r7:byte]
	r9 = r9 + r8
	Mem0[r6:word32] = r9
	r6 = r6 + 4<i32>
	r13 = Mem0[r5:word32]
	Mem0[r5:word32] = r8
	r5 = r5 + 4<i32>
	r8 = r13 + r8 * r8
	// succ:  l00020868
l00020868:
	// succ:  l00020874
l00020874:
	branch r4 == r24 l00020828
	goto l00020880
	// succ:  l00020880 l00020828
l0002087C:
	Mem0[r29 + 36<i32>:word32] = r24
	r24 = r12
	p0 = r12 > 0<32>
	r2 = r24 * r25
	Mem0[r29 + 24<i32>:word32] = r21
	Mem0[r29 + 32<i32>:word32] = r23
	r19 = r24 + 0<32>
	r0 = p0
	Mem0[r29 + 28<i32>:word32] = r2
	Mem0[r29 + 20<i32>:word32] = r22
	r26 = 0x3727C5AC<32>
	Mem0[r29 + 56<i32>:word32] = r0
	r18 = 0x3F800000<32>
	branch p0 l00020920
	goto l000208B4
	// succ:  l000208B4 l00020920
l00020880:
	r4 = r4 + 1<32>
	Mem0[r29 + 36<i32>:word32] = r24
	r24 = r12
	p0 = r12 > 0<32>
	Mem0[r29 + 24<i32>:word32] = r21
	Mem0[r29 + 32<i32>:word32] = r23
	r19 = r24 + 0<32>
	r0 = p0
	Mem0[r29 + 28<i32>:word32] = r2
	Mem0[r29 + 20<i32>:word32] = r22
	r26 = 0x3727C5AC<32>
	Mem0[r29 + 56<i32>:word32] = r0
	r18 = 0x3F800000<32>
	branch p0 l00020920
	// succ:  l000208B4 l00020920
l000208B4:
	r2 = Mem0[r29 + 28<i32>:word64]
	r20 = r16
	r22 = r24 << 3<32>
	r21 = r21 + r24 * 0xC<32>
	r17 = CONVERT(r2, int32, real32)
	r27 = r16 + (r24 << 2<32>)
	// succ:  l000208C8
l000208C8:
	r2 = Mem0[r20:word32]
	r1 = r17
	call fn00009610 (retsize: 0;)
	r0 = CONVERT(r2, uint32, real32)
	r23 = r20 + r21
	r1 = r17
	r2 = r20 + r22
	Mem0[r2:word32] = r0
	r2 = __invert_bit<word32,word32>(r0, 0x1E<32>)
	r4 = Mem0[r20:word32]
	r27 = r27 + 4<i32>
	r3 = Mem0[r27:word32]
	r3 = CONVERT(r4, uint32, real32)
	r0 = CONVERT(r3, uint32, real32)
	call fn00009610 (retsize: 0;)
	r0 = r0 + r2 * r3
	r2 = r0 + r26
	Mem0[r23:word32] = r0
	r0 = r2
	call fn00009800 (retsize: 0;)
	r19 = r19
	r20 = r20 + 4<32>
	r1_r0 = r0_r18
	call fn00009610 (retsize: 0;)
	Mem0[r23:word32] = r0
	branch p0 l000208C8
	// succ:  l00020920 l000208C8
l00020920:
	p0 = r27 == 1<32>
	r0 = Mem0[r29 + 48<i32>:word32]
	r4 = r24
	p0 = r0
	r27 = r16 + (r4 << 4<32>)
	r18 = 0<32>
	branch p0 l00020948
	// succ:  l0002093C l00020948
l0002093C:
	r18 = 0<32>
	goto l00020A04
	// succ:  l00020A04
l00020948:
	r3 = r4 << 1<32>
	r2 = r2 + r4 * 3<32>
	Mem0[r29 + 12<i32>:byte] = r3
	r17 = r18
	r5 = 0<32>
	r3 = r16 + (r3 << 2<32>)
	r3 = Mem0[r29 + 40<i32>:word32]
	Mem0[r29 + 44<i32>:word32] = r2
	// succ:  l0002096C
l0002096C:
	Mem0[r29 + 40<i32>:word32] = r5
	r21 = 0<32>
	p0 = r25 > 0<32>
	branch p0 l000209F8
	// succ:  l00020978 l000209F8
l00020978:
	r0 = Mem0[r29 + 56<i32>:word32]
	r25_r24 = r3_r4
	r26 = r3 + 0<32>
	branch p0 l000209F0
	// succ:  l0002098C l000209F0
l0002098C:
	p0 = r0
	r19 = Mem0[r29 + 48<i32>:word64]
	r20 = Mem0[r29 + 44<i32>:word64]
	r22 = r4
	r23 = r27 + (r4 << 2<32>)
	// succ:  l00020998
l00020998:
	r3 = Mem0[r19:word32]
	r25 = r25 + 1<i32>
	r2 = Mem0[r25:byte]
	r4 = Mem0[r20:word32]
	r2 = CONVERT(r2, int32, real32)
	r2 = r2 - r3
	Mem0[r27:byte] = r16
	r27 = r27 + 4<32>
	r16 = r4 * r2
	r1_r0 = r18_r16
	r1_r0 = r17_r16
	r18 = r0
	call fn00009600 (retsize: 0;)
	r17 = r0
	r20 = r20 + 4<32>
	r19 = r19 + 4<32>
	branch r22 == 1<32> l00020998
	// succ:  l000209E0 l00020998
l000209E0:
	r22 = r22 + 0xFFFFFFFF<32>
	r25 = Mem0[r29 + 52<i32>:word32]
	r27 = r23
	r4 = r24
	r3 = r3 + r4
	// succ:  l000209F0
l000209F0:
	branch r21 == r25 l00020978
	goto l000209FC
	// succ:  l000209FC l00020978
l000209F8:
	r2 = Mem0[r29 + 36<i32>:word64]
	r5 = Mem0[r29 + 40<i32>:word64]
	branch r5 == r2 l0002096C
	goto l00020A08
	// succ:  l00020A08 l0002096C
l000209FC:
	r21 = r21 + 1<32>
	branch r5 == r2 l0002096C
	goto l00020A08
	// succ:  l00020A08 l0002096C
l00020A04:
	r2 = Mem0[r29 + 28<i32>:word32]
	branch r19 > 0<32> l00020A74
	goto l00020A14
	// succ:  l00020A14 l00020A74
l00020A08:
	r5 = r5 + 1<32>
	branch r19 > 0<32> l00020A74
	// succ:  l00020A14 l00020A74
l00020A14:
	r19 = r2 * r4
	r0 = 0x38D1B717<32>
	call fn00009600 (retsize: 0;)
	r27 = r27 - (r19 << 2<32>)
	r2 = 0x437F0000<32>
	r1_r0 = r0_r2
	call fn00009610 (retsize: 0;)
	r16 = r0
	r20 = 0<32>
	// succ:  l00020A38
l00020A38:
	r2 = Mem0[r27:word32]
	r27 = r27 + 4<32>
	r2 = r2 - r18
	call fn00009620 (retsize: 0;)
	r0 = r2 * r16
	r3 = Mem0[r29 + 32<i32>:word64]
	r19 = r19
	r2 = truncf(CONVERT(r0, uint32, real32))
	p1 = r19 == 0<32>
	r2 = 0xFFFFFFFF<32>
	p0 = r2 > 0xFFFFFFFF<32>
	p2 = r2 > 0xFF<32>
	r2 = r20 + 0<32>
	Mem0[r3:byte] = r2
	r3 = r3 + 1<i32>
	Mem0[r29 + 32<i32>:word32] = r3
	branch p1 l00020A38
	// succ:  l00020A74 l00020A38
l00020A74:
	r3 = Mem0[r29 + 24<i32>:word64]
	r4 = Mem0[r29 + 20<i32>:word64]
	r0 = 0<32>
	Mem0[r4 + 12<i32>:word32] = 0xFFFFFF81<32>
	Mem0[r4 + 4<i32>:word32] = 1<32>
	Mem0[r4 + 8<i32>:word32] = 1<32>
	Mem0[r3 + 8<i32>:word32] = 1<32>
	Mem0[r4:word32] = 1<32>
	Mem0[r3 + 12<i32>:word32] = 1<32>
	Mem0[r3:word32] = 1<32>
	Mem0[r3 + 4<i32>:word32] = 0xFFFFFF81<32>
	r2 = Mem0[r4 + 16<i32>:word32]
	Mem0[r2:word32] = r18
	r7 = Mem0[r3 + 16<i32>:word32]
	Mem0[r4 + 24<i32>:word32] = 4<32>
	Mem0[r7:word32] = r17
	Mem0[r3 + 24<i32>:word32] = 4<32>
	// succ:  l00020AA8
l00020AA8:
	r19_r18 = Mem0[r29 + 96<i32>:word64]
	r17_r16 = Mem0[r29 + 104<i32>:word64]
	r23_r22 = Mem0[r29 + 80<i32>:word64]
	r21_r20 = Mem0[r29 + 88<i32>:word64]
	r27_r26 = Mem0[r29 + 64<i32>:word64]
	r25_r24 = Mem0[r29 + 72<i32>:word64]
	v34 = r30
	r31 = Mem0[v34 + 4<i32>:word32]
	r30 = Mem0[v34:word32]
	r29 = v34 + 8<i32>
	return
	// succ:  execute_qinstancenorm_ref_exit
execute_qinstancenorm_ref_exit:


// check_qinstancenorm
// Return size: 0
define check_qinstancenorm
check_qinstancenorm_entry:
	r29 = fp
	// succ:  l00020ABC
l00020ABC:
	v4 = r29 - 8<i32>
	Mem0[v4:word32] = r30
	Mem0[v4 + 4<i32>:word32] = r31
	r30 = v4
	r29 = v4 - 0<i32>
	r2 = r1
	branch r3 == 6<32> l00020AD8
	// succ:  l00020AD0 l00020AD8
l00020AD0:
	r3 = Mem0[r0 + 16<i32>:word32]
	r1 = 0xFC<32>
	goto l00020AF0
	// succ:  l00020AF0
l00020AD8:
	r3 = Mem0[r0 + 20<i32>:word32]
	r0 = 0<32>
	r1 = 0xFD<32>
	v12 = r30
	r31 = Mem0[v12 + 4<i32>:word32]
	r30 = Mem0[v12:word32]
	r29 = v12 + 8<i32>
	return
	// succ:  check_qinstancenorm_exit
l00020AF0:
	r0 = 0xFFFFFFFF<32>
	v14 = r30
	r31 = Mem0[v14 + 4<i32>:word32]
	r30 = Mem0[v14:word32]
	r29 = v14 + 8<i32>
	return
	// succ:  check_qinstancenorm_exit
check_qinstancenorm_exit:


// execute_finstancenorm
// Return size: 0
define execute_finstancenorm
execute_finstancenorm_entry:
	r29 = fp
	// succ:  l00020AF8
l00020AF8:
	v4 = r29 - 8<i32>
	Mem0[v4:word32] = r30
	Mem0[v4 + 4<i32>:word32] = r31
	r30 = v4
	r29 = v4 - 104<i32>
	r7 = r1
	r3 = Mem0[r0 + 8<i32>:word32]
	r2 = Mem0[r0 + 4<i32>:word32]
	Mem0[r29 + 72<i32>:word64] = r23_r22
	Mem0[r29 + 80<i32>:word64] = r21_r20
	r2 = Mem0[r2:word32]
	Mem0[r29 + 64<i32>:word64] = r25_r24
	r6 = Mem0[r3:word32]
	Mem0[r29 + 96<i32>:word64] = r17_r16
	r5 = Mem0[r2:word32]
	r23 = Mem0[r2 + 4<i32>:word32]
	r21 = Mem0[r2 + 8<i32>:word32]
	p0 = r5 > 0<32>
	r24 = Mem0[r2 + 12<i32>:word32]
	r4 = r5 * r21
	Mem0[r29 + 56<i32>:word64] = r27_r26
	Mem0[r29 + 88<i32>:word64] = r19_r18
	r4 = r4 * r23
	Mem0[r29 + 20<i32>:word32] = r23
	Mem0[r29 + 28<i32>:word32] = r5
	Mem0[r29 + 24<i32>:word32] = r7
	r4 = Mem0[r6 + 20<i32>:word32]
	r0 = r4 * r24
	branch r3 >u r4 l00020B74
	// succ:  l00020B4C l00020B74
l00020B4C:
	r3 = r0 << 2<32>
	r2 = r7
	r1 = 0xD6<32>
	r3 = PC + 0x3E<32>
	call errlog_function (retsize: 0;)
	r0 = 0xFFFFFFFF<32>
	// succ:  l00020B60
l00020B60:
	r19_r18 = Mem0[r29 + 88<i32>:word64]
	r17_r16 = Mem0[r29 + 96<i32>:word64]
	r23_r22 = Mem0[r29 + 72<i32>:word64]
	r21_r20 = Mem0[r29 + 80<i32>:word64]
	r27_r26 = Mem0[r29 + 56<i32>:word64]
	r25_r24 = Mem0[r29 + 64<i32>:word64]
	v26 = r30
	r31 = Mem0[v26 + 4<i32>:word32]
	r30 = Mem0[v26:word32]
	r29 = v26 + 8<i32>
	return
	// succ:  execute_finstancenorm_exit
l00020B74:
	r2 = Mem0[r2 + 16<i32>:word32]
	r16 = Mem0[r7 + 4<i32>:word32]
	r0 = 0<32>
	Mem0[r6 + 8<i32>:word32] = r23
	Mem0[r29 + 16<i32>:word32] = r2
	Mem0[r6:word32] = r5
	Mem0[r6 + 24<i32>:word32] = r3
	Mem0[r6 + 12<i32>:word32] = r24
	Mem0[r6 + 4<i32>:word32] = r21
	branch p0 l00020B60
	// succ:  l00020B94 l00020B60
l00020B94:
	r3 = r3 + r24 * 3<32>
	r2 = r23 * r21
	Mem0[r29:word32] = r6
	r18 = 0<32>
	r4 = r24 << 1<32>
	r5 = r5 + r24 * 0xC<32>
	Mem0[r29 + 44<i32>:word32] = r5
	r2 = CONVERT(r2, int32, real32)
	r6 = r2 * r24
	Mem0[r29 + 8<i32>:word32] = r6
	Mem0[r29 + 4<i32>:word32] = r2
	r27 = r24 << 2<32>
	r17 = r16 + (r4 << 2<32>)
	r19 = Mem0[r29 + 4<i32>:word32]
	r5 = r24 << 3<32>
	r22 = r16 + (r3 << 2<32>)
	Mem0[r29 + 48<i32>:word32] = r5
	r1 = r1 + r24 * 0x14<32>
	Mem0[r29 + 12<i32>:word32] = r1
	// succ:  l00020BD8
l00020BD8:
	r0 = Mem0[r7 + 4<i32>:word32]
	r1 = 0<32>
	p0 = r23 > 0<32>
	Mem0[r29 + 36<i32>:word32] = r18
	r2 = Mem0[r29 + 12<i32>:word64]
	r3 = p0
	Mem0[r29 + 40<i32>:word32] = r3
	call fn000095F0 (retsize: 0;)
	r2 = Mem0[r29 + 8<i32>:word32]
	r0 = Mem0[r29 + 40<i32>:word64]
	r4 = Mem0[r29 + 16<i32>:word64]
	r3 = r2 * r18
	p0 = r0
	r18 = r4 + (r3 << 2<32>)
	branch p0 l00020D30
	// succ:  l00020C0C l00020D30
l00020C0C:
	r26 = r16
	r25 = r24
	p0 = r24 > 0<32>
	r23 = 0x3727C5AC<32>
	Mem0[r29 + 8<i32>:byte] = r0
	branch p0 l00020C90
l00020C2C:
	r0 = Mem0[r26:word32]
	r1 = r19
	call fn00009610 (retsize: 0;)
	// succ:  l00020C30 l00020C90 l00020C38
l00020C30:
	r0 = p0
	r0 = Mem0[r26:word32]
	r1 = r19
	// succ:  l00020C38
l00020C38:
	r2 = Mem0[r29 + 48<i32>:word64]
	r20 = r0
	r1 = r19
	r3 = r26 + r27
	r2 = r26 + r2
	Mem0[r2:word32] = r20
	r0 = Mem0[r3:word32]
	call fn00009610 (retsize: 0;)
	r7 = Mem0[r29 + 44<i32>:word32]
	r2 = __invert_bit<word32,word32>(r20, 0x1E<32>)
	r20 = r26 + r7
	r0 = r0 + r2 * r20
	Mem0[r20:word32] = r0
	r0 = r0 + r23
	call fn00009800 (retsize: 0;)
	r1 = r0
	r0 = 0x3F800000<32>
	call fn00009610 (retsize: 0;)
	Mem0[r20:word32] = r0
	r26 = r26 + 4<32>
	r25 = r25 + 0xFFFFFFFF<32>
	p0 = r25 == 0<32>
	branch p0 l00020C2C
	// succ:  l00020C90 l00020C2C
l00020C90:
	r14 = Mem0[r29 + 28<i32>:word32]
	r0 = Mem0[r29 + 32<i32>:word32]
	r23 = Mem0[r29 + 20<i32>:word32]
	r0 = Mem0[r29 + 40<i32>:word32]
	p1 = r0
	r2 = Mem0[r29:word32]
	branch p0 l00020D20
	// succ:  l00020CB0 l00020D20
l00020CB0:
	p0 = r0
	r3 = Mem0[r2 + 16<i32>:word32]
	r2 = 0<32>
	// succ:  l00020CB4
l00020CB4:
	r4 = 0<32>
	branch p0 l00020D18
l00020CB8:
	r4 = 0<32>
	// succ:  l00020CBC l00020D18
l00020CBC:
	p0 = r13 > 0<32>
	r7_r6 = r18_r17
	r8 = r22 + 0<32>
	branch p1 l00020D10
	// succ:  l00020CC8 l00020D10
l00020CC8:
	r5 = r3 + (r24 << 2<32>)
	__loop(0<i32>, 0x00020CE0<p32>, r24)
	r12 = Mem0[r6:word32]
	r9 = Mem0[r7:word32]
	r7 = r7 + 4<32>
	r6 = r6 + 4<32>
	r13 = Mem0[r8:word32]
	r8 = r8 + 4<32>
	r9 = r9 - r12
	r9 = r9 * r13
	Mem0[r3:word32] = r9
	r3 = r3 + 4<32>
	r3 = r5
	r18 = r18 + (r24 << 2<32>)
	// succ:  l00020D10
l00020D10:
	branch r4 == r21 l00020CBC
	goto l00020D1C
	// succ:  l00020D1C l00020CBC
l00020D18:
	branch r2 == r23 l00020CB4
	goto l00020D24
	// succ:  l00020D24 l00020CB4
l00020D1C:
	r4 = r4 + 1<32>
	branch r2 == r23 l00020CB8
	goto l00020D24
	// succ:  l00020D24 l00020CB8
l00020D20:
	r7 = Mem0[r29 + 24<i32>:word64]
	r18 = Mem0[r29 + 36<i32>:word64]
	// succ:  l00020D24
l00020D24:
	branch r18 == r14 l00020BD8
	// succ:  l00020D30 l00020BD8
l00020D30:
	branch p0 l00020D7C
	// succ:  l00020D38 l00020D7C
l00020D38:
	p0 = r13 > 0<32>
	__loop(1<i32>, 0x00020D38<p32>, r21)
	r5_r4 = r16_r3
	p0 = r24 > 0<32>
	branch p0 l00020D70
	// succ:  l00020D44 l00020D70
l00020D44:
	__loop(0<i32>, 0x00020D48<p32>, r24)
	r7 = Mem0[r5:word32]
	r6 = Mem0[r4:word32]
	r4 = r4 + 4<32>
	r8 = r5 + r27
	r7 = r6 + r7
	Mem0[r5:word32] = r7
	r5 = r5 + 4<32>
	r1 = Mem0[r8:word32]
	r1 = r1 + r6 * r6
	Mem0[r8:word32] = r1
	r3 = r3 + (r24 << 2<32>)
	// succ:  l00020D70
l00020D70:
	// succ:  l00020D7C
l00020D7C:
	branch r2 == r23 l00020C0C
	// succ:  l00020D7C_thunk_check_finstancenorm l00020C0C
l00020D7C_thunk_check_finstancenorm:
	call check_finstancenorm (retsize: 0;)
	return
	// succ:  execute_finstancenorm_exit
execute_finstancenorm_exit:


// check_finstancenorm
// Return size: 0
define check_finstancenorm
check_finstancenorm_entry:
	r29 = fp
	// succ:  l00020D88
l00020D88:
	v4 = r29 - 8<i32>
	Mem0[v4:word32] = r30
	Mem0[v4 + 4<i32>:word32] = r31
	r30 = v4
	r29 = v4 - 0<i32>
	r2 = r1
	branch r3 == 2<32> l00020DA4
	// succ:  l00020D9C l00020DA4
l00020D9C:
	r3 = Mem0[r0 + 16<i32>:word32]
	r1 = 0x103<32>
	goto l00020DBC
	// succ:  l00020DBC
l00020DA4:
	r3 = Mem0[r0 + 20<i32>:word32]
	r0 = 0<32>
	r1 = 0x104<32>
	v12 = r30
	r31 = Mem0[v12 + 4<i32>:word32]
	r30 = Mem0[v12:word32]
	r29 = v12 + 8<i32>
	return
	// succ:  check_finstancenorm_exit
l00020DBC:
	r0 = 0xFFFFFFFF<32>
	v14 = r30
	r31 = Mem0[v14 + 4<i32>:word32]
	r30 = Mem0[v14:word32]
	r29 = v14 + 8<i32>
	return
	// succ:  check_finstancenorm_exit
check_finstancenorm_exit:


// errlog_function
// Return size: 0
define errlog_function
errlog_function_entry:
	r29 = fp
	// succ:  l00020DC4
l00020DC4:
	v4 = r29 - 8<i32>
	Mem0[v4:word32] = r30
	Mem0[v4 + 4<i32>:word32] = r31
	r30 = v4
	r29 = v4 - 8<i32>
	r4 = r3
	r0 = PC + 0x9501<32>
	Mem0[r29 + 1<i32>:byte] = r6
	r6 = r29 + 0x10<32>
	r5 = r29 + 0x10<32>
	r3 = 0<32>
	v13 = r30
	r31 = Mem0[v13 + 4<i32>:word32]
	r30 = Mem0[v13:word32]
	r29 = v13 + 8<i32>
	return
	// succ:  errlog_function_exit
errlog_function_exit:


// logmsg_function
// Return size: 0
define logmsg_function
logmsg_function_entry:
	r29 = fp
	// succ:  l00020DE8
l00020DE8:
	v4 = r29 - 8<i32>
	Mem0[v4:word32] = r30
	Mem0[v4 + 4<i32>:word32] = r31
	r30 = v4
	r29 = v4 - 8<i32>
	r4 = 2<32>
	branch r4 >u r3 l00020E18
	// succ:  l00020DF8 l00020E18
l00020DF8:
	r3 = Mem0[r2 + 16<i32>:word32]
	r5 = r29 + 0x10<32>
	r3 = 2<32>
	r0 = PC + 0x11<32>
	r6 = r29 + 0x10<32>
	r1 = 0x74<32>
	r4 = PC + 0x9534<32>
	Mem0[r29 + 4<i32>:word32] = r6
	call logv (retsize: 0;)
	// succ:  l00020E18
l00020E18:
	v15 = r30
	r31 = Mem0[v15 + 4<i32>:word32]
	r30 = Mem0[v15:word32]
	r29 = v15 + 8<i32>
	return
	// succ:  logmsg_function_exit
logmsg_function_exit:


// sub_int32_execute
// Return size: 0
define sub_int32_execute
sub_int32_execute_entry:
	r29 = fp
	// succ:  l00020E20
l00020E20:
	v4 = r29 - 8<i32>
	Mem0[v4:word32] = r30
	Mem0[v4 + 4<i32>:word32] = r31
	r30 = v4
	r29 = v4 - 160<i32>
	r5 = r0
	r3 = Mem0[r5 + 8<i32>:word32]
	r2 = Mem0[r5 + 4<i32>:word32]
	Mem0[r29 + 144<i32>:word64] = r19_r18
	Mem0[r29 + 112<i32>:word64] = r27_r26
	r19 = Mem0[r2 + 4<i32>:word32]
	r26 = Mem0[r2:word32]
	Mem0[r29 + 128<i32>:word64] = r23_r22
	Mem0[r29 + 136<i32>:word64] = r21_r20
	r22 = 0<32>
	r0 = Mem0[r26:word32]
	r6 = Mem0[r26 + 4<i32>:word32]
	r4 = Mem0[r19 + 4<i32>:word32]
	r8 = Mem0[r19:word32]
	p1 = r0 == 1<32>
	p0 = r6 == 1<32>
	r12 = Mem0[r26 + 8<i32>:word32]
	r10 = p1
	Mem0[r29 + 92<i32>:word32] = r4
	r9 = Mem0[r19 + 8<i32>:word32]
	p2 = r12 == 1<32>
	r18 = p0 ? r4 : r6
	r7 = Mem0[r26 + 12<i32>:word32]
	r4 = p1 ? r8 : r0
	r0 = Mem0[r19 + 12<i32>:word32]
	p1 = r7 == 1<32>
	r2 = r4 * r18
	Mem0[r29 + 76<i32>:word32] = r6
	Mem0[r29 + 120<i32>:word64] = r25_r24
	r20 = p2 ? r9 : r12
	r21 = p1 ? r0 : r7
	r2 = r2 * r20
	Mem0[r29 + 152<i32>:word64] = r17_r16
	r25 = Mem0[r3:word32]
	r6 = r1
	r2 = r2 * r21
	Mem0[r29 + 72<i32>:word32] = r8
	Mem0[r29 + 96<i32>:word32] = r10
	r10 = p2
	Mem0[r29 + 84<i32>:word32] = r10
	Mem0[r29 + 68<i32>:word32] = r9
	Mem0[r29 + 80<i32>:word32] = r0
	Mem0[r29 + 104<i32>:word32] = r4
	r16 = r2 << 2<32>
	branch p0 l00020ECC
	// succ:  l00020EC8 l00020ECC
l00020EC8:
	r22 = r7 * r12
	// succ:  l00020ECC
l00020ECC:
	r2 = r6
	r1 = 0xBD<32>
	r0 = PC + 0x94DD<32>
	Mem0[r29 + 64<i32>:word32] = r12
	r3 = Mem0[r19 + 16<i32>:word32]
	r4 = PC + 0x94EC<32>
	Mem0[r29 + 88<i32>:word32] = r7
	r23 = Mem0[r25 + 16<i32>:word32]
	r27 = r5
	r24 = r6
	r17 = Mem0[r26 + 16<i32>:word32]
	Mem0[r29:word32] = r5
	Mem0[r29 + 100<i32>:word32] = r3
	call logmsg_function (retsize: 0;)
	branch r16 >u r2 l00020F34
	// succ:  l00020F18 l00020F34
l00020F18:
	r2 = Mem0[r25 + 20<i32>:word32]
	r1 = 0xBD<32>
	r2 = r24
	r0 = PC + 0x15<32>
	r3 = PC + 0x94C6<32>
	// succ:  l00020F28
l00020F28:
	call errlog_function (retsize: 0;)
	r0 = 0xFFFFFFFF<32>
	goto l00021160
	// succ:  l00021160
l00020F34:
	r5 = Mem0[r26:word32]
	r13 = Mem0[r19:word32]
	r2 = r24
	r7 = Mem0[r26 + 8<i32>:word32]
	r8 = Mem0[r26 + 12<i32>:word32]
	p0 = r5 == r13
	r12 = Mem0[r19 + 12<i32>:word32]
	r6 = Mem0[r26 + 4<i32>:word32]
	r3 = Mem0[r19 + 4<i32>:word32]
	r9 = Mem0[r19 + 8<i32>:word32]
	Mem0[r29 + 52<i32>:word32] = r16
	Mem0[r29 + 48<i32>:word32] = r25
	Mem0[r29 + 60<i32>:word32] = r27
	Mem0[r29 + 56<i32>:word32] = r17
	branch p0 l00020F7C
	// succ:  l00020F70 l00020F7C
l00020F70:
	branch p0 l00020F7C
	// succ:  l00020F74 l00020F7C
l00020F74:
	p0 = r5 == 2<32>
	p0 = r13 == 1<32>
	branch p0 l00020FB8
	// succ:  l00020F7C l00020FB8
l00020F7C:
	branch p0 l00020F8C
	// succ:  l00020F80 l00020F8C
l00020F80:
	p0 = r6 == -1<i32>
	branch p0 l00020F8C
	// succ:  l00020F84 l00020F8C
l00020F84:
	p0 = r6 == 2<32>
	branch p0 l00020FB8
	// succ:  l00020F8C l00020FB8
l00020F8C:
	p0 = r3 == 2<32>
	p0 = r7 == r9
	branch p0 l00020FA0
	// succ:  l00020F94 l00020FA0
l00020F94:
	branch p0 l00020FA0
	// succ:  l00020F98 l00020FA0
l00020F98:
	p0 = r7 == 2<32>
	p0 = r9 == 1<32>
	branch p0 l00020FB8
	// succ:  l00020FA0 l00020FB8
l00020FA0:
	p0 = r8 == r12
	branch p0 l00020FEC
	// succ:  l00020FA8 l00020FEC
l00020FA8:
	p0 = r8 == 1<32>
	branch p0 l00020FEC
	// succ:  l00020FB0 l00020FEC
l00020FB0:
	p0 = r12 == 1<32>
	branch p0 l00020FEC
	// succ:  l00020FB8 l00020FEC
l00020FB8:
	Mem0[r29 + 28<i32>:word32] = r12
	r1 = 0xBD<32>
	r0 = PC + 0x93F1<32>
	Mem0[r29 + 16<i32>:word32] = r13
	Mem0[r29 + 24<i32>:word32] = r9
	Mem0[r29 + 8<i32>:word32] = r7
	Mem0[r29 + 20<i32>:word32] = r3
	r3 = PC + 0x9424<32>
	Mem0[r29 + 4<i32>:word32] = r6
	Mem0[r29 + 12<i32>:word32] = r8
	Mem0[r29:word32] = r5
	goto l00020F28
	// succ:  l00020F28
l00020FEC:
	Mem0[r29 + 44<i32>:word32] = r21
	r24 = Mem0[r29 + 104<i32>:word32]
	r19 = r2
	Mem0[r29 + 20<i32>:word32] = r3
	Mem0[r29 + 36<i32>:word32] = r18
	r0 = PC + 0x93B1<32>
	Mem0[r29 + 40<i32>:word32] = r20
	r1 = 0xBD<32>
	r4 = PC + 0x9420<32>
	Mem0[r29 + 28<i32>:word32] = r12
	Mem0[r29 + 32<i32>:word32] = r24
	Mem0[r29 + 16<i32>:word32] = r13
	Mem0[r29 + 24<i32>:word32] = r9
	Mem0[r29 + 8<i32>:word32] = r7
	Mem0[r29 + 12<i32>:word32] = r8
	Mem0[r29:word32] = r5
	Mem0[r29 + 4<i32>:word32] = r6
	call logmsg_function (retsize: 0;)
	r26 = Mem0[r29 + 100<i32>:word32]
	r3 = Mem0[r29 + 48<i32>:word32]
	r14 = 0<32>
	p0 = r24 > 0<32>
	r25 = Mem0[r29 + 56<i32>:word32]
	Mem0[r3 + 6<i32>:byte] = r2
	r2 = Mem0[r29 + 52<i32>:word32]
	Mem0[r3 + 4<i32>:word32] = r18
	Mem0[r3 + 12<i32>:word32] = r21
	Mem0[r3 + 8<i32>:word32] = r20
	r12 = Mem0[r29 + 88<i32>:word32]
	r13 = Mem0[r29 + 80<i32>:word32]
	branch p0 l00021138
	// succ:  l00021068 l00021138
l00021068:
	r7 = Mem0[r29 + 92<i32>:word64]
	r5 = Mem0[r29 + 68<i32>:word64]
	r6 = !(r13 == 1<32>)
	r2 = Mem0[r29 + 76<i32>:word64]
	r0 = Mem0[r29 + 84<i32>:word64]
	r9 = r5 * r7
	r4 = Mem0[r29 + 72<i32>:word64]
	r3 = Mem0[r29 + 64<i32>:word64]
	p0 = r5 == 1<32>
	p2 = r0
	r0 = Mem0[r29 + 96<i32>:word32]
	p1 = r4 == 1<32>
	r9 = r9 * r13
	r8 = r3 * r2
	r9 = r14 + 0<32>
	p2 = r7 == 1<32>
	r2 = r12 == 0<32>
	r4 = r13 * r5
	p0 = r0
	r8 = r8 * r12
	r5 = !(r12 == 1<32>)
	r8 = r14 + 0<32>
	r4 = r14 + 0<32>
	r7 = 0<32>
	// succ:  l000210C0
l000210C0:
	r14 = 0<32>
	r13_r12 = r25_r26
	branch p0 l00021128
l000210C4:
	r14 = 0<32>
	r13_r12 = r25_r26
	// succ:  l000210CC l00021128
l000210CC:
	p0 = r10 > 0<32>
	r15 = r13
	r28 = r12
	branch p0 l00021118
	// succ:  l000210D8 l00021118
l000210D8:
	p0 = r12 > 0<32>
	__loop(1<i32>, 0x000210DC<p32>, r20)
	r1_r0 = r15_r28
	r10 = r23
	branch p0 l0002110C
	// succ:  l000210E8 l0002110C
l000210E8:
	p0 = r13 > 0<32>
	__loop(0<i32>, 0x000210EC<p32>, r21)
	r16 = Mem0[r0:word32]
	r11 = Mem0[r1:word32]
	r1 = r1 + (r5 << 2<32>)
	r0 = r0 + (r6 << 2<32>)
	r11 = r11 - r16
	Mem0[r10:word32] = r11
	r10 = r10 + 4<i32>
	r23 = r23 + (r21 << 2<32>)
	// succ:  l0002110C
l0002110C:
	r15 = r15 + (r2 << 2<32>)
	r28 = r28 + (r3 << 2<32>)
	// succ:  l00021118
l00021118:
	branch r14 == r18 l000210CC
	goto l0002112C
	// succ:  l0002112C l000210CC
l00021128:
	branch r7 == r24 l000210C0
	goto l0002113C
	// succ:  l0002113C l000210C0
l0002112C:
	r14 = r14 + 1<32>
	r12 = r12 + (r4 << 2<32>)
	r13 = r13 + (r22 << 2<32>)
	branch r7 == r24 l000210C4
	goto l0002113C
	// succ:  l0002113C l000210C4
l00021138:
	Mem0[r29:byte] = r2
	r2 = Mem0[r29 + 60<i32>:word32]
	r0 = PC + 0x9271<32>
	goto l0002114C
	// succ:  l0002114C
l0002113C:
	r7 = r7 + 1<32>
	r26 = r26 + (r9 << 2<32>)
	Mem0[r29:byte] = r2
	r2 = Mem0[r29 + 60<i32>:word32]
	r0 = PC + 0x31<32>
	// succ:  l0002114C
l0002114C:
	r2 = r19
	r1 = 0xBD<32>
	r4 = PC + 0xC<32>
	call logmsg_function (retsize: 0;)
	r0 = 0<32>
	// succ:  l00021160
l00021160:
	r19_r18 = Mem0[r29 + 144<i32>:word64]
	r17_r16 = Mem0[r29 + 152<i32>:word64]
	r23_r22 = Mem0[r29 + 128<i32>:word64]
	r21_r20 = Mem0[r29 + 136<i32>:word64]
	r27_r26 = Mem0[r29 + 112<i32>:word64]
	r25_r24 = Mem0[r29 + 120<i32>:word64]
	v42 = r30
	r31 = Mem0[v42 + 4<i32>:word32]
	r30 = Mem0[v42:word32]
	r29 = v42 + 8<i32>
	return
	// succ:  sub_int32_execute_exit
sub_int32_execute_exit:


// sub_int32_check
// Return size: 0
define sub_int32_check
sub_int32_check_entry:
	r29 = fp
	// succ:  l00021174
l00021174:
	v4 = r29 - 8<i32>
	Mem0[v4:word32] = r30
	Mem0[v4 + 4<i32>:word32] = r31
	r30 = v4
	r29 = v4 - 16<i32>
	Mem0[r29 + 496<i32>:word64] = r17_r16
	r4 = PC + 0x91FA<32>
	r16 = r1
	r1 = 0x37<32>
	r17 = r0
	Mem0[r29:word32] = r17
	r2 = r16
	r0 = PC + 0x91CD<32>
	call logmsg_function (retsize: 0;)
	branch r2 == 4<32> l000211C4
	// succ:  l000211A8 l000211C4
l000211A8:
	r2 = Mem0[r17 + 16<i32>:word32]
	r1 = 0x38<32>
	r0 = PC + 0x31<32>
	r3 = PC + 0x91CE<32>
	// succ:  l000211B4
l000211B4:
	r2 = r16
	call errlog_function (retsize: 0;)
	v16 = r30
	r31 = Mem0[v16 + 4<i32>:word32]
	r30 = Mem0[v16:word32]
	r29 = v16 + 8<i32>
	return
	// succ:  sub_int32_check_exit
l000211C4:
	branch r2 == 2<32> l000211E4
	// succ:  l000211D4 l000211E4
l000211D4:
	r2 = Mem0[r17 + 20<i32>:word32]
	r1 = 0x39<32>
	r0 = PC + 5<32>
	goto l000211B4
	// succ:  l000211B4
l000211E4:
	r2 = r16
	r1 = 0x3A<32>
	r0 = PC + 0x9171<32>
	Mem0[r29:word32] = r17
	call logmsg_function (retsize: 0;)
	r4 = PC + 0x91A9<32>
	r0 = 0<32>
	v17 = r30
	r31 = Mem0[v17 + 4<i32>:word32]
	r30 = Mem0[v17:word32]
	r29 = v17 + 8<i32>
	return
	// succ:  sub_int32_check_exit
sub_int32_check_exit:


// logmsg_function
// Return size: 0
define logmsg_function
logmsg_function_entry:
	r29 = fp
	// succ:  l00021208
l00021208:
	v4 = r29 - 8<i32>
	Mem0[v4:word32] = r30
	Mem0[v4 + 4<i32>:word32] = r31
	r30 = v4
	r29 = v4 - 8<i32>
	r3 = 2<32>
	branch r3 >u r5 l00021228
	// succ:  l00021218 l00021228
l00021218:
	r5 = Mem0[r2 + 16<i32>:word32]
	Mem0[r29 + 1<i32>:byte] = r6
	r6 = r29 + 0x10<32>
	r5 = r29 + 0x10<32>
	// succ:  l00021228
l00021228:
	v11 = r30
	r31 = Mem0[v11 + 4<i32>:word32]
	r30 = Mem0[v11:word32]
	r29 = v11 + 8<i32>
	return
	// succ:  logmsg_function_exit
logmsg_function_exit:


// errlog_function
// Return size: 0
define errlog_function
errlog_function_entry:
	r29 = fp
	// succ:  l0002122C
l0002122C:
	v4 = r29 - 8<i32>
	Mem0[v4:word32] = r30
	Mem0[v4 + 4<i32>:word32] = r31
	r30 = v4
	r29 = v4 - 8<i32>
	r4 = r3
	r3 = 0<32>
	Mem0[r29 + 1<i32>:byte] = r6
	r6 = r29 + 0x10<32>
	r5 = r29 + 0x10<32>
	call logv (retsize: 0;)
	r0 = Mem0[r0:word32]
	r0 = Mem0[r0:word32]
	r0 = Mem0[r0:word32]
	r0 = Mem0[r0:word32]
	// succ:  l0002124C_thunk_prelu_execute
l0002124C_thunk_prelu_execute:
	call prelu_execute (retsize: 0;)
	return
	// succ:  errlog_function_exit
errlog_function_exit:


// prelu_execute
// Return size: 0
define prelu_execute
prelu_execute_entry:
	r29 = fp
	// succ:  l00021250
l00021250:
	v4 = r29 - 8<i32>
	Mem0[v4:word32] = r30
	Mem0[v4 + 4<i32>:word32] = r31
	r30 = v4
	r29 = v4 - 96<i32>
	Mem0[r29 + 496<i32>:word64] = r17_r16
	r17_r16 = r1_r0
	Mem0[r29 + 56<i32>:word64] = r25_r24
	r2 = Mem0[r16 + 4<i32>:word32]
	r0 = 0x38D1B717<32>
	r3 = Mem0[r16 + 8<i32>:word32]
	Mem0[r29 + 72<i32>:word64] = r21_r20
	Mem0[r29 + 80<i32>:word64] = r19_r18
	r5 = Mem0[r3 + 8<i32>:word32]
	r24 = Mem0[r2:word32]
	r3 = Mem0[r3 + 4<i32>:word32]
	r25 = Mem0[r3:word32]
	r21 = Mem0[r2 + 4<i32>:word32]
	r18 = Mem0[r2 + 8<i32>:word32]
	Mem0[r29 + 28<i32>:word32] = r3
	r3 = Mem0[r24 + 4<i32>:word32]
	Mem0[r29 + 36<i32>:word32] = r3
	r3 = Mem0[r24 + 12<i32>:word32]
	r4 = Mem0[r18 + 16<i32>:word32]
	Mem0[r29 + 40<i32>:word32] = r3
	r3 = Mem0[r21 + 16<i32>:word32]
	r2 = Mem0[r2 + 12<i32>:word32]
	Mem0[r29 + 48<i32>:word64] = r27_r26
	r4 = Mem0[r4:word32]
	r2 = Mem0[r2 + 16<i32>:word32]
	r26 = Mem0[r3:word32]
	Mem0[r29 + 64<i32>:word64] = r23_r22
	r7 = Mem0[r24 + 8<i32>:word32]
	r1 = r4 - r26
	Mem0[r29 + 44<i32>:word32] = r7
	r7 = Mem0[r24:word32]
	Mem0[r29 + 24<i32>:word32] = r5
	Mem0[r29 + 32<i32>:word32] = r7
	r22 = Mem0[r24 + 16<i32>:word32]
	r19 = Mem0[r2:word32]
	r23 = Mem0[r25 + 16<i32>:word32]
	call fn00009600 (retsize: 0;)
	r2 = 0x437F0000<32>
	r20 = 0<32>
	r1_r0 = r0_r2
	call fn00009610 (retsize: 0;)
	r2 = r20 - r26
	call fn00009620 (retsize: 0;)
	r0 = r2 * r0
	r3 = 0x47800000<32>
	r4 = PC + 0x91EE<32>
	r2 = r17
	r1 = 0x47<32>
	r27 = truncf(CONVERT(r0, uint32, real32))
	r3 = r19 * r3
	Mem0[r29:word32] = r16
	call logmsg_function (retsize: 0;)
	r26 = CONVERT(r3, real32, uint32)
	r3 = Mem0[r21 + 16<i32>:word32]
	r2 = Mem0[r18 + 16<i32>:word32]
	r4 = PC + 0x91DA<32>
	r3 = Mem0[r3:word32]
	r2 = Mem0[r2:word32]
	r1 = 0x4A<32>
	r2 = r17
	r9_r8 = CONVERT(r3, real32, real64)
	r7_r6 = CONVERT(r2, real32, real64)
	Mem0[r29:word64] = r9_r8
	Mem0[r29 + 8<i32>:word64] = r7_r6
	call logmsg_function (retsize: 0;)
	r2 = 0x3F800000<32>
	r1 = 0x4B<32>
	branch p0 l00021384
	// succ:  l0002136C l00021384
l0002136C:
	p0 = r19 > r2
	r3 = PC + 0x91B2<32>
	// succ:  l00021374
l00021374:
	r2 = r17
	call errlog_function (retsize: 0;)
	// succ:  l00021378
l00021378:
	r0 = 0xFFFFFFFF<32>
	goto l00021558
	// succ:  l00021558
l00021384:
	p1 = r27 > 0xFFFFFFFF<32>
	r1 = 0x4E<32>
	branch p0 l000213A4
	// succ:  l00021394 l000213A4
l00021394:
	p0 = r20 > r19
	r1 = 0x4C<32>
	goto l00021374
	// succ:  l00021374
l000213A4:
	r3 = Mem0[r29 + 32<i32>:word64]
	r2 = Mem0[r29 + 36<i32>:word64]
	p0 = r27 > 0xFF<32>
	r7_r6 = CONVERT(r19, real32, real64)
	r5 = Mem0[r29 + 40<i32>:word64]
	r0 = Mem0[r29 + 44<i32>:word64]
	r27 = 0xFFFFFFFF<32>
	r3 = r2 * r3
	r27 = 0<32>
	r3 = r3 * r0
	r4 = PC + 0x918E<32>
	Mem0[r29:word64] = r7_r6
	Mem0[r29 + 8<i32>:word32] = r26
	r20 = r27 & 0xFF<32>
	r27 = r20
	r2 = 0x8000<32> + r20 * r26
	r2 = r17
	r27 = r27 - (r2 >>u 0x10<32>)
	Mem0[r29 + 12<i32>:word32] = 0x10000<32>
	call logmsg_function (retsize: 0;)
	branch r19 >u r2 l0002141C
	// succ:  l00021410 l0002141C
l00021410:
	r2 = Mem0[r25 + 20<i32>:word32]
	p0 = r19 == 0<32>
	r1 = 0x50<32>
	goto l00021378
	// succ:  l00021378
l0002141C:
	r3 = Mem0[r24 + 4<i32>:word32]
	r2 = Mem0[r24:word32]
	Mem0[r25:word32] = r2
	Mem0[r25 + 4<i32>:word32] = r3
	r6 = Mem0[r24 + 8<i32>:word32]
	Mem0[r25 + 8<i32>:word32] = r6
	r7 = Mem0[r24 + 12<i32>:word32]
	r24 = 0<32>
	Mem0[r25 + 24<i32>:word32] = r19
	Mem0[r25 + 12<i32>:word32] = r7
	branch p0 l0002149C
	// succ:  l00021448 l0002149C
l00021448:
	Mem0[r23:byte] = r2
	r2 = Mem0[r22:byte]
	r3 = r27
	// succ:  l0002144C
l0002144C:
	branch r20 >u r2 l00021490
	// succ:  l00021464 l00021490
l00021464:
	r2 = Mem0[r22:byte]
	r2 = 0x8000<32> + r2 * r26
	r4 = PC + 0x23<32>
	r2 = r17
	r3 = r3 + (r2 >>u 0x10<32>)
	Mem0[r29 + 4<i32>:word32] = r5
	Mem0[r29 + 8<i32>:word32] = r3
	Mem0[r29:word32] = r24
	call logmsg_function (retsize: 0;)
	branch r24 == r19 l00021448
	goto l000214A0
	// succ:  l000214A0 l00021448
l00021490:
	branch r24 == r19 l0002144C
	goto l000214A0
	// succ:  l000214A0 l0002144C
l0002149C:
	r20 = Mem0[r29 + 28<i32>:word64]
	r2 = Mem0[r21:word32]
	// succ:  l000214A0
l000214A0:
	r24 = r24 + 1<32>
	r22 = r22 + 1<32>
	r23 = r23 + 1<32>
	r3 = Mem0[r21 + 4<i32>:word32]
	Mem0[r20:word32] = r2
	Mem0[r20 + 4<i32>:word32] = r3
	r2 = Mem0[r21 + 8<i32>:word32]
	Mem0[r20 + 8<i32>:word32] = r2
	r7 = Mem0[r21 + 12<i32>:word32]
	Mem0[r20 + 12<i32>:word32] = r7
	r2 = Mem0[r21 + 24<i32>:word32]
	branch r2 >u r6 l000214D0
	// succ:  l000214C8 l000214D0
l000214C8:
	r6 = Mem0[r20 + 20<i32>:word32]
	r1 = Mem0[r21 + 16<i32>:word32]
	r2 = Mem0[r21 + 24<i32>:word32]
	call fn00009560 (retsize: 0;)
	// succ:  l000214D0
l000214D0:
	r4 = Mem0[r29 + 24<i32>:word64]
	r2 = Mem0[r18:word32]
	r3 = Mem0[r18 + 4<i32>:word32]
	Mem0[r4:word32] = r2
	Mem0[r4 + 4<i32>:word32] = r3
	r2 = Mem0[r18 + 8<i32>:word32]
	Mem0[r4 + 8<i32>:word32] = r2
	r7 = Mem0[r18 + 12<i32>:word32]
	Mem0[r4 + 12<i32>:word32] = r7
	r2 = Mem0[r18 + 24<i32>:word32]
	branch r2 >u r6 l00021500
	// succ:  l000214FC l00021500
l000214FC:
	r6 = Mem0[r4 + 20<i32>:word32]
	r19 = r4 + 0x10<32>
	// succ:  l00021500
l00021500:
	Mem0[r4 + 24<i32>:word32] = r2
	r0 = Mem0[r4 + 16<i32>:word32]
	r19 = r4 + 0x10<32>
	r1 = Mem0[r18 + 16<i32>:word32]
	r2 = Mem0[r18 + 24<i32>:word32]
	call fn00009560 (retsize: 0;)
	r3 = Mem0[r20 + 16<i32>:word32]
	r2 = Mem0[r19:word32]
	r4 = PC + 0x9094<32>
	r3 = Mem0[r3:word32]
	r2 = Mem0[r2:word32]
	r1 = 0x61<32>
	r2 = r17
	r9_r8 = CONVERT(r3, real32, real64)
	r7_r6 = CONVERT(r2, real32, real64)
	Mem0[r29:word64] = r9_r8
	Mem0[r29 + 8<i32>:word64] = r7_r6
	call logmsg_function (retsize: 0;)
	r2 = r17
	r1 = 0x62<32>
	r4 = PC + 0x9081<32>
	Mem0[r29:word32] = r16
	call logmsg_function (retsize: 0;)
	r0 = 0<32>
	// succ:  l00021558
l00021558:
	r19_r18 = Mem0[r29 + 80<i32>:word64]
	r17_r16 = Mem0[r29 + 88<i32>:word64]
	r23_r22 = Mem0[r29 + 64<i32>:word64]
	r21_r20 = Mem0[r29 + 72<i32>:word64]
	r27_r26 = Mem0[r29 + 48<i32>:word64]
	r25_r24 = Mem0[r29 + 56<i32>:word64]
	v39 = r30
	r31 = Mem0[v39 + 4<i32>:word32]
	r30 = Mem0[v39:word32]
	r29 = v39 + 8<i32>
	return
	// succ:  prelu_execute_exit
prelu_execute_exit:


// prelu_check
// Return size: 0
define prelu_check
prelu_check_entry:
	r29 = fp
	// succ:  l00021570
l00021570:
	v4 = r29 - 8<i32>
	Mem0[v4:word32] = r30
	Mem0[v4 + 4<i32>:word32] = r31
	r30 = v4
	r29 = v4 - 16<i32>
	Mem0[r29 + 496<i32>:word64] = r17_r16
	r4 = PC + 0x8F1A<32>
	r17 = r0
	r16 = r1
	r1 = 0x69<32>
	Mem0[r29:word32] = r17
	r2 = r16
	call logmsg_function (retsize: 0;)
	r1 = 0x6A<32>
	r3 = PC + 0x8F15<32>
	branch r2 == 8<32> l000215F8
	// succ:  l000215A4 l000215F8
l000215A4:
	r2 = Mem0[r17 + 16<i32>:word32]
	r1 = 0x6B<32>
	r3 = PC + 0x10<32>
	branch r2 == 6<32> l000215F8
	// succ:  l000215B8 l000215F8
l000215B8:
	r2 = Mem0[r17 + 20<i32>:word32]
	r4 = Mem0[r17 + 4<i32>:word32]
	r5 = 0<32>
	// succ:  l000215BC
l000215BC:
	branch r5 > 4<32> l00021608
	// succ:  l000215CC l00021608
l000215CC:
	r5 = r5 + 1<32>
	r2 = r2 + 4<32>
	branch r6 == 0<32> l000215E4
	// succ:  l000215DC l000215E4
l000215DC:
	r4 = r4 + 4<i32>
	r6 = Mem0[r4:word32]
	r3 = PC + 0x38<32>
	r1 = 0x6D<32>
	r6 = Mem0[r17 + 8<i32>:word32]
	r3 = PC + 0x8EEB<32>
	goto l000215EC
	// succ:  l000215EC
l000215E4:
	r6 = Mem0[r17 + 8<i32>:word32]
	r3 = PC + 0x2B<32>
	// succ:  l000215EC
l000215EC:
	branch r6 == 1<32> l000215BC
	// succ:  l000215F8 l000215BC
l000215F8:
	r2 = r16
	call errlog_function (retsize: 0;)
	v18 = r30
	r31 = Mem0[v18 + 4<i32>:word32]
	r30 = Mem0[v18:word32]
	r29 = v18 + 8<i32>
	return
	// succ:  prelu_check_exit
l00021608:
	r2 = r16
	r1 = 0x70<32>
	r4 = PC + 0x8ECF<32>
	Mem0[r29:word32] = r17
	call logmsg_function (retsize: 0;)
	r0 = 0<32>
	v19 = r30
	r31 = Mem0[v19 + 4<i32>:word32]
	r30 = Mem0[v19:word32]
	r29 = v19 + 8<i32>
	return
	// succ:  prelu_check_exit
prelu_check_exit:


// logmsg_function
// Return size: 0
define logmsg_function
logmsg_function_entry:
	r29 = fp
	// succ:  l00021628
l00021628:
	v4 = r29 - 8<i32>
	Mem0[v4:word32] = r30
	Mem0[v4 + 4<i32>:word32] = r31
	r30 = v4
	r29 = v4 - 8<i32>
	r3 = 2<32>
	branch r3 >u r5 l0002164C
	// succ:  l00021638 l0002164C
l00021638:
	r5 = Mem0[r2 + 16<i32>:word32]
	r5 = r29 + 0x10<32>
	r3 = 2<32>
	r0 = PC + 0x3B<32>
	Mem0[r29 + 1<i32>:byte] = r6
	r6 = r29 + 0x10<32>
	call logv (retsize: 0;)
	// succ:  l00021640_thunk_errlog_function
l00021640_thunk_errlog_function:
	call errlog_function (retsize: 0;)
	return
	// succ:  logmsg_function_exit
l0002164C:
	v13 = r30
	r31 = Mem0[v13 + 4<i32>:word32]
	r30 = Mem0[v13:word32]
	r29 = v13 + 8<i32>
	return
	// succ:  logmsg_function_exit
logmsg_function_exit:


// errlog_function
// Return size: 0
define errlog_function
errlog_function_entry:
	r29 = fp
	// succ:  l00021650
l00021650:
	v4 = r29 - 8<i32>
	Mem0[v4:word32] = r30
	Mem0[v4 + 4<i32>:word32] = r31
	r30 = v4
	r29 = v4 - 8<i32>
	r4 = r3
	r0 = PC + 0x8E1F<32>
	Mem0[r29 + 1<i32>:byte] = r6
	r6 = r29 + 0x10<32>
	r5 = r29 + 0x10<32>
	r3 = 0<32>
	v13 = r30
	r31 = Mem0[v13 + 4<i32>:word32]
	r30 = Mem0[v13:word32]
	r29 = v13 + 8<i32>
	return
	// succ:  errlog_function_exit
errlog_function_exit:


// prelu_execute
// Return size: 0
define prelu_execute
prelu_execute_entry:
	r29 = fp
	// succ:  l00021680
l00021680:
	v4 = r29 - 8<i32>
	Mem0[v4:word32] = r30
	Mem0[v4 + 4<i32>:word32] = r31
	r30 = v4
	r29 = v4 - 56<i32>
	Mem0[r29 + 496<i32>:word64] = r17_r16
	r4 = PC + 0x8FB5<32>
	r17_r16 = r0_r1
	Mem0[r29 + 40<i32>:word64] = r19_r18
	r7 = Mem0[r17 + 4<i32>:word32]
	r1 = 0x38<32>
	r5 = Mem0[r17 + 8<i32>:word32]
	r2 = r16
	Mem0[r29 + 24<i32>:word64] = r23_r22
	Mem0[r29 + 32<i32>:word64] = r21_r20
	r18 = Mem0[r7:word32]
	r6 = Mem0[r7 + 4<i32>:word32]
	Mem0[r29 + 16<i32>:word64] = r25_r24
	r19 = Mem0[r5:word32]
	r3 = Mem0[r6 + 16<i32>:word32]
	Mem0[r29 + 8<i32>:word64] = r27_r26
	r23 = Mem0[r18 + 12<i32>:word32]
	r24 = Mem0[r18 + 8<i32>:word32]
	r20 = Mem0[r18 + 16<i32>:word32]
	r26 = Mem0[r18 + 4<i32>:word32]
	r25 = Mem0[r18:word32]
	r22 = Mem0[r3:word32]
	r21 = Mem0[r19 + 16<i32>:word32]
	Mem0[r29:word32] = r17
	call logmsg_function (retsize: 0;)
	r2 = 0<32>
	r3 = Mem0[r19 + 20<i32>:word32]
	r1 = 0x39<32>
	branch p0 l00021704
	// succ:  l000216EC l00021704
l000216EC:
	p0 = r2 > r22
	r3 = PC + 0x8F61<32>
	r2 = r16
	call errlog_function (retsize: 0;)
	// succ:  l000216F8
l000216F8:
	r0 = 0xFFFFFFFF<32>
	goto l00021794
	// succ:  l00021794
l00021704:
	r2 = r26 * r25
	r2 = r2 * r24
	r23 = r2 * r23
	branch r2 >u r3 l00021724
	// succ:  l0002171C l00021724
l0002171C:
	r2 = r23 << 2<32>
	goto l000216F8
	// succ:  l000216F8
l00021724:
	r4 = Mem0[r18 + 4<i32>:word32]
	r3 = Mem0[r18:word32]
	p0 = r23 == 0<32>
	Mem0[r19:word32] = r3
	Mem0[r19 + 4<i32>:word32] = r4
	r6 = Mem0[r18 + 8<i32>:word32]
	Mem0[r19 + 8<i32>:word32] = r6
	r7 = Mem0[r18 + 12<i32>:word32]
	r18 = -1<i32>
	Mem0[r19 + 24<i32>:word32] = r2
	Mem0[r19 + 12<i32>:word32] = r7
	branch p0 l00021778
	// succ:  l00021744 l00021778
l00021744:
	r19 = Mem0[r20:word32]
	r1_r0 = r18_r19
	call fn00009600 (retsize: 0;)
	r24 = r0
	r2 = r22 * r19
	r23 = r23 + 0xFFFFFFFF<32>
	r1_r0 = r18_r2
	call fn000097B0 (retsize: 0;)
	Mem0[r21:byte] = r2
	r21 = r21 + 4<32>
	r20 = r20 + 4<32>
	r2 = r24 + r0
	// succ:  l00021778
l00021778:
	r2 = r16
	r1 = 0x42<32>
	r4 = PC + 0x8EF2<32>
	Mem0[r29:word32] = r17
	call logmsg_function (retsize: 0;)
	r0 = 0<32>
	// succ:  l00021794
l00021794:
	r19_r18 = Mem0[r29 + 40<i32>:word64]
	r17_r16 = Mem0[r29 + 48<i32>:word64]
	r23_r22 = Mem0[r29 + 24<i32>:word64]
	r21_r20 = Mem0[r29 + 32<i32>:word64]
	r27_r26 = Mem0[r29 + 8<i32>:word64]
	r25_r24 = Mem0[r29 + 16<i32>:word64]
	v35 = r30
	r31 = Mem0[v35 + 4<i32>:word32]
	r30 = Mem0[v35:word32]
	r29 = v35 + 8<i32>
	return
	// succ:  prelu_execute_exit
prelu_execute_exit:


// prelu_check
// Return size: 0
define prelu_check
prelu_check_entry:
	r29 = fp
	// succ:  l000217A8
l000217A8:
	v4 = r29 - 8<i32>
	Mem0[v4:word32] = r30
	Mem0[v4 + 4<i32>:word32] = r31
	r30 = v4
	r29 = v4 - 16<i32>
	Mem0[r29 + 496<i32>:word64] = r17_r16
	r4 = PC + 0x8E40<32>
	r17 = r0
	r16 = r1
	r1 = 0x48<32>
	Mem0[r29:word32] = r17
	r2 = r16
	call logmsg_function (retsize: 0;)
	branch r2 == 4<32> l000217E8
	// succ:  l000217D4 l000217E8
l000217D4:
	r2 = Mem0[r17 + 16<i32>:word32]
	r1 = 0x49<32>
	r3 = PC + 0x2F<32>
	r2 = r16
	call errlog_function (retsize: 0;)
	// succ:  l000217DC
l000217DC:
	v16 = r30
	r31 = Mem0[v16 + 4<i32>:word32]
	r30 = Mem0[v16:word32]
	r29 = v16 + 8<i32>
	return
	// succ:  prelu_check_exit
l000217E8:
	branch r2 == 2<32> l00021800
	// succ:  l000217F8 l00021800
l000217F8:
	r2 = Mem0[r17 + 20<i32>:word32]
	r1 = 0x4A<32>
	goto l000217DC
	// succ:  l000217DC
l00021800:
	r2 = r16
	r1 = 0x4B<32>
	r4 = PC + 0x8E1E<32>
	Mem0[r29:word32] = r17
	call logmsg_function (retsize: 0;)
	r0 = 0<32>
	v17 = r30
	r31 = Mem0[v17 + 4<i32>:word32]
	r30 = Mem0[v17:word32]
	r29 = v17 + 8<i32>
	return
	// succ:  prelu_check_exit
prelu_check_exit:


// logmsg_function
// Return size: 0
define logmsg_function
logmsg_function_entry:
	r29 = fp
	// succ:  l00021820
l00021820:
	v4 = r29 - 8<i32>
	Mem0[v4:word32] = r30
	Mem0[v4 + 4<i32>:word32] = r31
	r30 = v4
	r29 = v4 - 8<i32>
	r3 = 2<32>
	branch r3 >u r5 l00021844
	// succ:  l00021830 l00021844
l00021830:
	r5 = Mem0[r2 + 16<i32>:word32]
	r5 = r29 + 0x10<32>
	r3 = 2<32>
	r0 = PC + 0x1F<32>
	Mem0[r29 + 1<i32>:byte] = r6
	r6 = r29 + 0x10<32>
	call logv (retsize: 0;)
	// succ:  l00021838_thunk_errlog_function
l00021838_thunk_errlog_function:
	call errlog_function (retsize: 0;)
	return
	// succ:  logmsg_function_exit
l00021844:
	v13 = r30
	r31 = Mem0[v13 + 4<i32>:word32]
	r30 = Mem0[v13:word32]
	r29 = v13 + 8<i32>
	return
	// succ:  logmsg_function_exit
logmsg_function_exit:


// errlog_function
// Return size: 0
define errlog_function
errlog_function_entry:
	r29 = fp
	// succ:  l00021848
l00021848:
	v4 = r29 - 8<i32>
	Mem0[v4:word32] = r30
	Mem0[v4 + 4<i32>:word32] = r31
	r30 = v4
	r29 = v4 - 8<i32>
	r4 = r3
	r0 = PC + 0x8D83<32>
	Mem0[r29 + 1<i32>:byte] = r6
	r6 = r29 + 0x10<32>
	r5 = r29 + 0x10<32>
	r3 = 0<32>
	v13 = r30
	r31 = Mem0[v13 + 4<i32>:word32]
	r30 = Mem0[v13:word32]
	r29 = v13 + 8<i32>
	return
	// succ:  errlog_function_exit
errlog_function_exit:


// sum_f_execute
// Return size: 0
define sum_f_execute
sum_f_execute_entry:
	r29 = fp
	// succ:  l00021870
l00021870:
	v4 = r29 - 8<i32>
	Mem0[v4:word32] = r30
	Mem0[v4 + 4<i32>:word32] = r31
	r30 = v4
	r29 = v4 - 48<i32>
	r28 = 1<32>
	r8 = Mem0[r0 + 4<i32>:word32]
	r2 = Mem0[r0 + 8<i32>:word32]
	Mem0[r29 + 40<i32>:word64] = r17_r16
	r6 = Mem0[r0 + 16<i32>:word32]
	r14 = Mem0[r2:word32]
	r7 = Mem0[r8:word32]
	r2 = r1
	Mem0[r29 + 24<i32>:word64] = r21_r20
	Mem0[r29 + 32<i32>:word64] = r19_r18
	r17 = 1<32>
	p0 = r6 == 3<32>
	r3 = Mem0[r7 + 12<i32>:word32]
	r15 = Mem0[r7:word32]
	r10 = 1<32>
	r1 = 1<32>
	r5 = Mem0[r7 + 4<i32>:word32]
	r4 = Mem0[r7 + 8<i32>:word32]
	r13_r12 = r3_r15
	r18 = 0<32>
	r7 = Mem0[r14 + 16<i32>:word32]
	r6 = Mem0[r7 + 16<i32>:word32]
	Mem0[r29 + 8<i32>:word64] = r25_r24
	Mem0[r29 + 16<i32>:word64] = r23_r22
	Mem0[r29:word64] = r27_r26
	branch p0 l000218DC
	// succ:  l000218D0 l000218DC
l000218D0:
	r9_r8 = 0x100000001<64>
	r13_r12 = 0x100000001<64>
	goto l00021A1C
	// succ:  l00021A1C
l000218DC:
	r1 = Mem0[r8 + 4<i32>:word32]
	r10 = Mem0[r8 + 8<i32>:word32]
	r9_r8 = r4_r5
	r11 = Mem0[r1 + 12<i32>:word32]
	r10 = Mem0[r10 + 16<i32>:word32]
	r10 = Mem0[r10:word32]
	r1 = Mem0[r1 + 16<i32>:word32]
	r16 = r1 + 0<32>
	r9_r8 = r4_r5
	p0 = r11 == 0<32>
	branch p0 l00021958
	// succ:  l00021908 l00021958
l00021908:
	r13_r12 = r3_r15
	__loop(0<i32>, 0x00021910<p32>, r11)
	r16 = r16 + 4<i32>
	r17 = Mem0[r16:word32]
	branch r17 > 6<32> l0002192C
	// succ:  l00021920 l0002192C
l00021920:
	r17 = r10 + (0x7F<32> - r17)
	r12 = 1<32>
	r13 = 1<32>
	r9_r8 = 0x100000001<64>
	// succ:  l0002192C
l0002192C:
	r13 = 1<32>
	branch p0 l0002194C
	// succ:  l00021934 l0002194C
l00021934:
	p0 = r9 == 0<32>
	r9 = 1<32>
	branch p0 l0002194C
	// succ:  l0002193C l0002194C
l0002193C:
	p0 = r9 == 2<32>
	r8 = 1<32>
	branch p0 l0002194C
	// succ:  l00021944 l0002194C
l00021944:
	p0 = r9 == 4<32>
	r12 = 1<32>
	p0 = r17 == 3<32>
	// succ:  l0002194C
l0002194C:
	r18 = r11
	// succ:  l00021958
l00021958:
	branch r0 == 4<32> l0002197C
	// succ:  l0002196C l0002197C
l0002196C:
	r0 = Mem0[r0 + 32<i32>:int8]
	r11 = r9
	p0 = r18 == 0<32>
	r1 = r13
	r28 = r12
	r17 = r8
	goto l00021A1C
	// succ:  l00021A1C
l0002197C:
	r0 = r13
	r17_r16 = r8_r12
	r11 = r9 + 0<32>
	r17_r16 = r8_r12
	r0 = r13 + 0<32>
	branch p0 l000219D8
	// succ:  l00021994 l000219D8
l00021994:
	__loop(0<i32>, 0x00021998<p32>, r18)
	r1 = r1 + 4<i32>
	r18 = Mem0[r1:word32]
	branch r18 > 6<32> l000219B4
	// succ:  l000219A8 l000219B4
l000219A8:
	r18 = r10 + (0x7F<32> - r18)
	r16 = 0<32>
	r0 = 0<32>
	r17 = 0<32>
	goto l000219D0
	// succ:  l000219D0
l000219B4:
	r0 = 0<32>
	branch p0 l000219D0
	// succ:  l000219BC l000219D0
l000219BC:
	p0 = r10 == 0<32>
	r11 = 0<32>
	branch p0 l000219D0
	// succ:  l000219C4 l000219D0
l000219C4:
	p0 = r10 == 2<32>
	r17 = 0<32>
	branch p0 l000219D0
	// succ:  l000219CC l000219D0
l000219CC:
	p0 = r10 == 4<32>
	r16 = -1<i32>
	p0 = r18 == 3<32>
	// succ:  l000219D0
l000219D0:
	// succ:  l000219D8
l000219D8:
	p3 = r0 == 0<32>
	p0 = r11 == 0<32>
	p2 = r17 == 0<32>
	p1 = r16 == 0<32>
	p1 = p1 | p2
	r1 = r17 + 0<32>
	p2 = p1 | p0
	r17 = r16 == 1<32>
	r1 = r11 + 0<32>
	r10 = r1 + 0<32>
	branch p3 l00021A1C
	// succ:  l00021A0C l00021A1C
l00021A0C:
	r1 = r0
	r10 = r1
	r17 = r10
	r28 = r17
	// succ:  l00021A1C
l00021A1C:
	r11 = Mem0[r14 + 20<i32>:word32]
	p0 = r12 > 0<32>
	r0 = r13 * r9
	r0 = r0 * r8
	r0 = r0 * r12
	branch r0 >u r11 l00021A58
	// succ:  l00021A3C l00021A58
l00021A3C:
	r0 = r0 << 2<32>
	r1 = 0xC6<32>
	r0 = PC + 0x16<32>
	call errlog_function (retsize: 0;)
	r3 = PC + 0x8CA9<32>
	r0 = 0xFFFFFFFF<32>
	goto l00021BB4
	// succ:  l00021BB4
l00021A58:
	Mem0[r14 + 24<i32>:word32] = r0
	Mem0[r14 + 12<i32>:word32] = r1
	r0 = 0<32>
	Mem0[r14 + 4<i32>:word32] = r17
	Mem0[r14 + 8<i32>:word32] = r10
	r0 = 0<32>
	Mem0[r14:word32] = r28
	r1 = 0<32>
	branch p0 l00021BB4
	// succ:  l00021A80 l00021BB4
l00021A80:
	p2 = r8 == 1<32>
	p1 = r13 == 1<32>
	p3 = r9 == 1<32>
	p0 = r12 == 1<32>
	r28 = !(r4 == 1<32>)
	r15 = r5 == 1<32>
	// succ:  l00021AA0
l00021AA0:
	p0 = r8 > 0<32>
	r10 = 0<32>
	branch p0 l00021BA8
l00021AA4:
	p0 = r8 > 0<32>
	r10 = 0<32>
	// succ:  l00021AAC l00021BA8
l00021AAC:
	p0 = r9 > 0<32>
	r11 = 0<32>
	branch p0 l00021BA0
l00021AB0:
	p0 = r9 > 0<32>
	r11 = 0<32>
	// succ:  l00021AB8 l00021BA0
l00021AB8:
	branch p0 l00021B98
	// succ:  l00021AC0 l00021B98
l00021AC0:
	p0 = r13 > 0<32>
	// succ:  l00021AC4
l00021AC4:
	r18 = r1
	branch p0 l00021B84
	// succ:  l00021ACC l00021B84
l00021ACC:
	p0 = r2 > 0<32>
	// succ:  l00021AD0
l00021AD0:
	p0 = r15 > 0<32>
	r22 = r19 + r0
	branch p0 l00021B7C
l00021AD4:
	p0 = r15 > 0<32>
	r22 = r19 + r0
	// succ:  l00021ADC l00021B7C
l00021ADC:
	r21 = r21 + r22 * r5
	// succ:  l00021AE4
l00021AE4:
	p0 = r28 > 0<32>
	r24 = r21 + r20
	branch p0 l00021B74
	// succ:  l00021AF0 l00021B74
l00021AF0:
	__loop(1<i32>, 0x00021AFC<p32>, r28)
	r23 = r23 + r24 * r4
	p0 = r14 > 0<32>
	r24 = r17
	r25 = r23 + r22
	branch p0 l00021B68
	// succ:  l00021B0C l00021B68
l00021B0C:
	p0 = r14 >u 1<32>
	r26 = r14 + 0xFFFFFFFF<32>
	r27 = r26 + 0xFFFFFFFF<32>
	r24 = r24 + r25 * r3
	r25 = r6 + (r24 << 2<32>)
	r24 = r25 + 4<32>
	r25 = Mem0[r25:word32]
	branch p0 l00021B34
	// succ:  l00021B2C l00021B34
l00021B2C:
	r24 = r25
	goto l00021B64
	// succ:  l00021B64
l00021B34:
	r24 = Mem0[r24:word32]
	r26 = r24 + 4<32>
	p0 = r26 >u 1<32>
	__loop(0<i32>, 0x00021B48<p32>, r27)
	branch p0 l00021B60
	// succ:  l00021B48 l00021B60
l00021B48:
	r24 = Mem0[r26:word32]
	r26 = r26 + 4<32>
	r27 = r24
	r18 = r18 + r25
	r25 = r27
	// succ:  l00021B60
l00021B60:
	r18 = r18 + r25
	// succ:  l00021B64
l00021B64:
	r18 = r18 + r24
	// succ:  l00021B68
l00021B68:
	r22 = r22 + 1<32>
	// succ:  l00021B74
l00021B74:
	branch r20 == r15 l00021AE4
	goto l00021B80
	// succ:  l00021B80 l00021AE4
l00021B7C:
	branch r19 == r2 l00021AD0
	goto l00021B88
	// succ:  l00021B88 l00021AD0
l00021B80:
	r20 = r20 + 1<32>
	branch r19 == r2 l00021AD4
	goto l00021B88
	// succ:  l00021B88 l00021AD4
l00021B84:
	Mem0[r16:word32] = r18
	r17 = r17
	r16 = r16 + 4<32>
	goto l00021B8C
	// succ:  l00021B8C
l00021B88:
	Mem0[r16:word32] = r18
	r17 = r17
	// succ:  l00021B8C
l00021B8C:
	p0 = r17 == r13
	branch p0 l00021AC4
	// succ:  l00021B94 l00021AC4
l00021B94:
	r7 = r7 + (r13 << 2<32>)
	// succ:  l00021B98
l00021B98:
	branch r11 == r9 l00021AB8
	goto l00021BA4
	// succ:  l00021BA4 l00021AB8
l00021BA0:
	branch r10 == r8 l00021AAC
	goto l00021BAC
	// succ:  l00021BAC l00021AAC
l00021BA4:
	r11 = r11 + 1<32>
	branch r10 == r8 l00021AB0
	goto l00021BAC
	// succ:  l00021BAC l00021AB0
l00021BA8:
	branch r0 == r12 l00021AA0
	goto l00021BB4
	// succ:  l00021BB4 l00021AA0
l00021BAC:
	branch r0 == r12 l00021AA4
	// succ:  l00021BB4 l00021AA4
l00021BB4:
	r19_r18 = Mem0[r29 + 32<i32>:word64]
	r17_r16 = Mem0[r29 + 40<i32>:word64]
	r23_r22 = Mem0[r29 + 16<i32>:word64]
	r21_r20 = Mem0[r29 + 24<i32>:word64]
	r27_r26 = Mem0[r29:word64]
	r25_r24 = Mem0[r29 + 8<i32>:word64]
	v39 = r30
	r31 = Mem0[v39 + 4<i32>:word32]
	r30 = Mem0[v39:word32]
	r29 = v39 + 8<i32>
	return
	// succ:  sum_f_execute_exit
sum_f_execute_exit:


// sum_f_check
// Return size: 0
define sum_f_check
sum_f_check_entry:
	r29 = fp
	// succ:  l00021BD0
l00021BD0:
	v4 = r29 - 8<i32>
	Mem0[v4:word32] = r30
	Mem0[v4 + 4<i32>:word32] = r31
	r30 = v4
	r29 = v4 - 16<i32>
	Mem0[r29 + 496<i32>:word64] = r17_r16
	r4 = PC + 0x8AC3<32>
	r17 = r0
	r16 = r1
	r1 = 0x37<32>
	Mem0[r29:word32] = r17
	r2 = r16
	call logmsg_function (retsize: 0;)
	r2 = Mem0[r17 + 16<i32>:word32]
	branch r3 >u r2 l00021C1C
	// succ:  l00021BFC l00021C1C
l00021BFC:
	r3 = 4<32>
	r1 = 0x38<32>
	r0 = PC + 0<32>
	// succ:  l00021C04
l00021C04:
	r3 = PC + 0x8A9B<32>
	// succ:  l00021C0C
l00021C0C:
	r2 = r16
	call errlog_function (retsize: 0;)
	v16 = r30
	r31 = Mem0[v16 + 4<i32>:word32]
	r30 = Mem0[v16:word32]
	r29 = v16 + 8<i32>
	return
	// succ:  sum_f_check_exit
l00021C1C:
	r1 = 0x39<32>
	branch p0 l00021C30
	// succ:  l00021C24 l00021C30
l00021C24:
	p0 = r2 == 0<32>
	goto l00021C04
	// succ:  l00021C04
l00021C30:
	branch r2 == 2<32> l00021C50
	// succ:  l00021C40 l00021C50
l00021C40:
	r2 = Mem0[r17 + 20<i32>:word32]
	r1 = 0x3A<32>
	r0 = PC + 0x3C<32>
	goto l00021C0C
	// succ:  l00021C0C
l00021C50:
	r2 = r16
	r1 = 0x3B<32>
	r4 = PC + 0x8A6E<32>
	Mem0[r29:word32] = r17
	call logmsg_function (retsize: 0;)
	r0 = 0<32>
	v18 = r30
	r31 = Mem0[v18 + 4<i32>:word32]
	r30 = Mem0[v18:word32]
	r29 = v18 + 8<i32>
	return
	// succ:  sum_f_check_exit
sum_f_check_exit:


// logmsg_function
// Return size: 0
define logmsg_function
logmsg_function_entry:
	r29 = fp
	// succ:  l00021C6C
l00021C6C:
	v4 = r29 - 8<i32>
	Mem0[v4:word32] = r30
	Mem0[v4 + 4<i32>:word32] = r31
	r30 = v4
	r29 = v4 - 8<i32>
	r3 = 2<32>
	branch r3 >u r5 l00021C90
	// succ:  l00021C7C l00021C90
l00021C7C:
	r5 = Mem0[r2 + 16<i32>:word32]
	r5 = r29 + 0x10<32>
	r3 = 2<32>
	r0 = PC + 0<32>
	Mem0[r29 + 1<i32>:byte] = r6
	r6 = r29 + 0x10<32>
	call logv (retsize: 0;)
	// succ:  l00021C84_thunk_errlog_function
l00021C84_thunk_errlog_function:
	call errlog_function (retsize: 0;)
	return
	// succ:  logmsg_function_exit
l00021C90:
	v13 = r30
	r31 = Mem0[v13 + 4<i32>:word32]
	r30 = Mem0[v13:word32]
	r29 = v13 + 8<i32>
	return
	// succ:  logmsg_function_exit
logmsg_function_exit:


// errlog_function
// Return size: 0
define errlog_function
errlog_function_entry:
	r29 = fp
	// succ:  l00021C94
l00021C94:
	v4 = r29 - 8<i32>
	Mem0[v4:word32] = r30
	Mem0[v4 + 4<i32>:word32] = r31
	r30 = v4
	r29 = v4 - 8<i32>
	r4 = r3
	r3 = 0<32>
	Mem0[r29 + 1<i32>:byte] = r6
	r6 = r29 + 0x10<32>
	r5 = r29 + 0x10<32>
	call logv (retsize: 0;)
	r0 = Mem0[r0:word32]
	r0 = Mem0[r0:word32]
	r0 = Mem0[r0:word32]
	r0 = Mem0[r0:word32]
	r0 = Mem0[r0:word32]
	r0 = Mem0[r0:word32]
	r0 = Mem0[r0:word32]
	r0 = Mem0[r0:word32]
	// succ:  l00021CBC_thunk_gemacca_asm
l00021CBC_thunk_gemacca_asm:
	call gemacca_asm (retsize: 0;)
	return
	// succ:  errlog_function_exit
errlog_function_exit:


// gemacca_asm
// Return size: 0
define gemacca_asm
gemacca_asm_entry:
	r29 = fp
	// succ:  l00021CC0
l00021CC0:
	v4 = r29 - 8<i32>
	Mem0[v4:word32] = r30
	Mem0[v4 + 4<i32>:word32] = r31
	r30 = v4
	r29 = v4 - 32<i32>
	r8 = CONVERT(SLICE(r2, uint16, 0), uint16, uint32)
	r1 = r1 >>u 1<32>
	r6 = r2 >>u 0x10<32>
	Mem0[r29 + 8<i32>:word64] = r19_r18
	Mem0[r29:word64] = r17_r16
	r7 = r2 >>u 0x14<32>
	__loop(1<i32>, 0x00021D20<p32>, r1)
	Mem0[r29 + 16<i32>:word64] = r21_r20
	r10 = 0x20<32> - r8
	r9 = r8 << 1<32>
	r13 = r0 + (r8 << 1<32>)
	p2 = r0 == r0
	r11 = 0x10<32> - r8
	r6 = r9 - r6
	M1 = r8
	r12 = r13
	r13 = r13 + (r8 << 1<32>)
	M0 = r11
	r19_r18 = 0<64>
	r17_r16 = 0<64>
	__loop(0<i32>, 0x00021D40<p32>, r7)
	r0 = r0 + m0
	r21_r20 = Mem0[r0:word64]
	r15_r14 = Mem0[r0 + 8<i32>:word64]
	r15_r14 = Mem0[r0 + 8<i32>:word64]
	r0 = r0 + m0
	r21_r20 = Mem0[r0:word64]
	p2 = !p2
	r17_r16 = r17_r16 + __vraddub<word64,word64>(r15_r14, r21_r20)
	r12 = r12 + r10
	r12 = r12 + r8
	r19_r18 = r19_r18 + __vraddub<word64,word64>(r15_r14, r21_r20)
	r0 = r0 + r6
	r17 = r19 + r18
	r16 = r17 + r16
	r19_r18 = Mem0[r3:word64]
	r17 = r17 * r4
	r16 = r16 * r4
	r17 = r17 + r19
	r16 = r16 + r18
	r12 = r13
	Mem0[r3:word64] = r17_r16
	r3 = r3 + 8<i32>
	p2 = p2 | !p2
	r13 = r13 + (r8 << 1<32>)
	r19_r18 = Mem0[r29 + 8<i32>:word64]
	r17_r16 = Mem0[r29:word64]
	r21_r20 = Mem0[r29 + 16<i32>:word64]
	v32 = r30
	r31 = Mem0[v32 + 4<i32>:word32]
	r30 = Mem0[v32:word32]
	r29 = v32 + 8<i32>
	return
	// succ:  gemacca_asm_exit
gemacca_asm_exit:


// gemaccb_asm
// Return size: 0
define gemaccb_asm
gemaccb_asm_entry:
	r29 = fp
	// succ:  l00021DA0
l00021DA0:
	r2 = r2 >>u 2<32>
	p0 = r3 == 0<32>
	r4 = 0x1010101<32>
	r5 = 0x10<32>
	branch p0 l00021DC8
	// succ:  l00021DC0 l00021DC8
l00021DC0:
	__loop(0<i32>, 0x00021DC0<p32>, r2)
	// succ:  l00021DC8
l00021DC8:
	return
	// succ:  gemaccb_asm_exit
gemaccb_asm_exit:


// l2pref
// Return size: 0
define l2pref
l2pref_entry:
	r29 = fp
	// succ:  l00021E00
l00021E00:
	r2 = SEQ(SLICE(r2, word16, 0), SLICE(r1, word16, 0))
	r3 = CONVERT(SLICE(r3, uint16, 0), uint16, uint32)
	__l2fetch<word32,word64>(r0, r3_r2)
	return
	// succ:  l2pref_exit
l2pref_exit:


// gemaddvvm_asm
// Return size: 0
define gemaddvvm_asm
gemaddvvm_asm_entry:
	r29 = fp
	// succ:  l00021E20
l00021E20:
	r4 = r4 << 2<32>
	r3 = r3 >>u 1<32>
	r3 = r3 + 0xFFFFFFFF<32>
	M0 = r4
	__dcfetch(r0, 0x20<32>)
	r0 = r0 + 8<i32>
	r11_r10 = Mem0[r0:word64]
	r8 = r2
	r9 = Mem0[r29:word32]
	p2 = !(r9 == 0<32>)
	r6 = 4<32>
	__loop(0<i32>, 0x00021EA0<p32>, r3)
	__dcfetch(r0, 0x60<32>)
	r0 = r0 + 8<i32>
	r11_r10 = Mem0[r0:word64]
	__dcfetch(r0, 0x60<32>)
	__loop(0<i32>, 0x00021EF4<p32>, 5<32>)
	r6 = r6 + r6
	return
	// succ:  gemaddvvm_asm_exit
gemaddvvm_asm_exit:


// gemmacbbw_asm
// Return size: 0
define gemmacbbw_asm
gemmacbbw_asm_entry:
	r29 = fp
	// succ:  l00021F20
l00021F20:
	v4 = r29 - 8<i32>
	Mem0[v4:word32] = r30
	Mem0[v4 + 4<i32>:word32] = r31
	r30 = v4
	r29 = v4 - 56<i32>
	r4 = r4 << 2<32>
	Mem0[r29 + 48<i32>:word32] = r28
	Mem0[r29:word64] = r17_r16
	r5 = CONVERT(SLICE(r5, uint16, 0), uint16, uint32)
	r28 = r5 >>u 0x10<32>
	Mem0[r29 + 24<i32>:word64] = r23_r22
	Mem0[r29 + 16<i32>:word64] = r21_r20
	r3 = r3 >>u 3<32>
	M1 = r4
	Mem0[r29 + 8<i32>:word64] = r19_r18
	M0 = r5
	Mem0[r29 + 32<i32>:word64] = r25_r24
	__loop(1<i32>, 0x00021FE0<p32>, r3)
	r3 = r2
	r8 = r5 << 3<32>
	Mem0[r29 + 40<i32>:word64] = r27_r26
	r13 = r0
	r8 = r8 - r5
	r6 = r28 >>u 4<32>
	r4 = 0x10<32> - r8
	r9 = r1
	r5 = r5 + r5
	r7 = r13 + 0x30<32>
	r8 = r8 + (r5 - r28)
	r10 = r13 + r5
	r14 = r5 >>u 1<32>
	__dcfetch(r7, 0<32>)
	r7 = r7 + r14
	r13 = r13 + (r5 << 2<32>)
	r23_r22 = Mem0[r0 + 8<i32>:word64]
	r15 = 0x20<32> - r14
	r0 = r0 + m0
	r17_r16 = Mem0[r0:word64]
	r21_r20 = Mem0[r0 + 8<i32>:word64]
	r6 = r6 + 0xFFFFFFFF<32>
	r11 = r10 + r5
	r0 = r0 + m0
	r19_r18 = Mem0[r0:word64]
	r12 = r11 + r5
	__loop(0<i32>, 0x00021FE0<p32>, r6)
	__dcfetch(r10, 0<32>)
	r10 = r10 + r14
	r0 = r0 + m0
	r21_r20 = Mem0[r0:word64]
	r23_r22 = Mem0[r0 + 8<i32>:word64]
	r0 = r0 + m0
	r19_r18 = Mem0[r0:word64]
	r17_r16 = Mem0[r0 + 8<i32>:word64]
	__dcfetch(r11, 0<32>)
	r11 = r11 + r14
	__dcfetch(r12, 0<32>)
	r12 = r12 + r14
	r0 = r0 + m0
	r21_r20 = Mem0[r0:word64]
	r19_r18 = Mem0[r0 + 8<i32>:word64]
	r0 = r0 + m0
	r25_r24 = Mem0[r0:word64]
	r17_r16 = Mem0[r0 + 8<i32>:word64]
	r15 = r14
	r14 = r15
	r0 = r0 + m0
	r23_r22 = Mem0[r0:word64]
	r25_r24 = Mem0[r0 + 8<i32>:word64]
	r27_r26 = Mem0[r0:word64]
	r21_r20 = Mem0[r0 + 8<i32>:word64]
	r0 = r0 + r4
	__dcfetch(r7, 0<32>)
	r7 = r7 + r14
	r0 = r0 + m0
	r17_r16 = Mem0[r0:word64]
	r23_r22 = Mem0[r0 + 8<i32>:word64]
	r0 = r0 + m0
	r19_r18 = Mem0[r0:word64]
	r21_r20 = Mem0[r0 + 8<i32>:word64]
	r7 = r13
	r10 = r13 + r5
	r0 = r0 + m0
	r21_r20 = Mem0[r0:word64]
	r23_r22 = Mem0[r0 + 8<i32>:word64]
	r0 = r0 + m0
	r19_r18 = Mem0[r0:word64]
	r17_r16 = Mem0[r0 + 8<i32>:word64]
	r11 = r10 + r5
	r12 = r11 + r5
	r0 = r0 + m0
	r21_r20 = Mem0[r0:word64]
	r19_r18 = Mem0[r0 + 8<i32>:word64]
	r0 = r0 + m0
	r25_r24 = Mem0[r0:word64]
	r17_r16 = Mem0[r0 + 8<i32>:word64]
	r0 = r0 + m0
	r23_r22 = Mem0[r0:word64]
	r25_r24 = Mem0[r0 + 8<i32>:word64]
	r21_r20 = Mem0[r0 + 8<i32>:word64]
	r27_r26 = Mem0[r0:word64]
	r0 = r0 + r4
	r0 = r0 + r8
	r14 = r5 >>u 1<32>
	r15 = 0x20<32> - r14
	r7 = r7 + r14
	__dcfetch(r7, 0<32>)
	r10 = r10 + r14
	__dcfetch(r10, 0<32>)
	r11 = r11 + r14
	__dcfetch(r11, 0<32>)
	r12 = r12 + r14
	__dcfetch(r12, 0<32>)
	r7 = r7 + r15
	__dcfetch(r7, 0<32>)
	r10 = r10 + r15
	__dcfetch(r10, 0<32>)
	r11 = r11 + r15
	__loop(0<i32>, 0x00022240<p32>, 2<32>)
	__dcfetch(r11, 0<32>)
	r12 = r12 + r15
	r13 = r13 + (r5 << 2<32>)
	__dcfetch(r12, 0<32>)
	__dcfetch(r7, 0<32>)
	r7 = r7 + r14
	__dcfetch(r10, 0<32>)
	r10 = r10 + r14
	__dcfetch(r11, 0<32>)
	r11 = r11 + r14
	__dcfetch(r12, 0<32>)
	r12 = r12 + r14
	__dcfetch(r7, 0<32>)
	r7 = r7 + r15
	__dcfetch(r10, 0<32>)
	r10 = r10 + r15
	__dcfetch(r11, 0<32>)
	r11 = r11 + r15
	__dcfetch(r12, 0<32>)
	r12 = r12 + r15
	r23_r22 = Mem0[r0 + 8<i32>:word64]
	__dcfetch(r7, 0<32>)
	r0 = r0 + m0
	r17_r16 = Mem0[r0:word64]
	r9 = r1
	r21_r20 = Mem0[r0 + 8<i32>:word64]
	r7 = r7 + r14
	r0 = r0 + m0
	r19_r18 = Mem0[r0:word64]
	__loop(0<i32>, 0x000222AC<p32>, r6)
	r19_r18 = Mem0[r29 + 8<i32>:word64]
	r17_r16 = Mem0[r29:word64]
	r23_r22 = Mem0[r29 + 24<i32>:word64]
	r21_r20 = Mem0[r29 + 16<i32>:word64]
	r27_r26 = Mem0[r29 + 40<i32>:word64]
	r25_r24 = Mem0[r29 + 32<i32>:word64]
	v33 = r30
	r31 = Mem0[v33 + 4<i32>:word32]
	r30 = Mem0[v33:word32]
	r29 = v33 + 8<i32>
	return
	// succ:  gemmacbbw_asm_exit
gemmacbbw_asm_exit:


// gemmpybbw_asm
// Return size: 0
define gemmpybbw_asm
gemmpybbw_asm_entry:
	r29 = fp
	// succ:  l000222E0
l000222E0:
	v4 = r29 - 8<i32>
	Mem0[v4:word32] = r30
	Mem0[v4 + 4<i32>:word32] = r31
	r30 = v4
	r29 = v4 - 64<i32>
	r5 = CONVERT(SLICE(r5, uint16, 0), uint16, uint32)
	r28 = r5 >>u 0x10<32>
	Mem0[r29 + 48<i32>:word32] = r28
	r4 = r4 << 2<32>
	M0 = r5
	Mem0[r29:word64] = r17_r16
	r8 = r5 << 3<32>
	r9 = r28 >>u 4<32>
	Mem0[r29 + 8<i32>:word64] = r19_r18
	r13 = r0
	r8 = r8 - r5
	r3 = r3 >>u 3<32>
	r9 = r9 + 0xFFFFFFFF<32>
	r4 = 0x10<32> - r8
	M1 = r4
	Mem0[r29 + 16<i32>:word64] = r21_r20
	r5 = r5 + r5
	r7 = r13 + 0x50<32>
	r8 = r8 + (r5 - r28)
	Mem0[r29 + 32<i32>:word64] = r25_r24
	Mem0[r29 + 24<i32>:word64] = r23_r22
	r10 = r13 + r5
	__loop(1<i32>, 0x000223A0<p32>, r3)
	Mem0[r29 + 40<i32>:word64] = r27_r26
	r11 = r10 + r5
	r6 = r1
	__loop(0<i32>, 0x000223A0<p32>, r9)
	r12 = r11 + r5
	r14 = r5 >>u 1<32>
	__dcfetch(r7, 0<32>)
	r15 = 0x20<32> - r14
	r7 = r7 + r14
	r13 = r13 + (r5 << 2<32>)
	r0 = r0 + m0
	r17_r16 = Mem0[r0:word64]
	r23_r22 = Mem0[r0 + 8<i32>:word64]
	r0 = r0 + m0
	r19_r18 = Mem0[r0:word64]
	r21_r20 = Mem0[r0 + 8<i32>:word64]
	__dcfetch(r10, 0<32>)
	r10 = r10 + r14
	r0 = r0 + m0
	r21_r20 = Mem0[r0:word64]
	r23_r22 = Mem0[r0 + 8<i32>:word64]
	r0 = r0 + m0
	r19_r18 = Mem0[r0:word64]
	r17_r16 = Mem0[r0 + 8<i32>:word64]
	__dcfetch(r11, 0<32>)
	r11 = r11 + r14
	__dcfetch(r12, 0<32>)
	r12 = r12 + r14
	r0 = r0 + m0
	r21_r20 = Mem0[r0:word64]
	r19_r18 = Mem0[r0 + 8<i32>:word64]
	r0 = r0 + m0
	r25_r24 = Mem0[r0:word64]
	r17_r16 = Mem0[r0 + 8<i32>:word64]
	r15 = r14
	r14 = r15
	r0 = r0 + m0
	r23_r22 = Mem0[r0:word64]
	r25_r24 = Mem0[r0 + 8<i32>:word64]
	r27_r26 = Mem0[r0:word64]
	r21_r20 = Mem0[r0 + 8<i32>:word64]
	r0 = r0 + r4
	__dcfetch(r7, 0<32>)
	r7 = r7 + r14
	r0 = r0 + m0
	r17_r16 = Mem0[r0:word64]
	r23_r22 = Mem0[r0 + 8<i32>:word64]
	r0 = r0 + m0
	r19_r18 = Mem0[r0:word64]
	r21_r20 = Mem0[r0 + 8<i32>:word64]
	r7 = r13
	r10 = r13 + r5
	r0 = r0 + m0
	r21_r20 = Mem0[r0:word64]
	r23_r22 = Mem0[r0 + 8<i32>:word64]
	r0 = r0 + m0
	r19_r18 = Mem0[r0:word64]
	r17_r16 = Mem0[r0 + 8<i32>:word64]
	r11 = r10 + r5
	r12 = r11 + r5
	r0 = r0 + m0
	r21_r20 = Mem0[r0:word64]
	r19_r18 = Mem0[r0 + 8<i32>:word64]
	r0 = r0 + m0
	r25_r24 = Mem0[r0:word64]
	r17_r16 = Mem0[r0 + 8<i32>:word64]
	r0 = r0 + m0
	r23_r22 = Mem0[r0:word64]
	r25_r24 = Mem0[r0 + 8<i32>:word64]
	r27_r26 = Mem0[r0:word64]
	r21_r20 = Mem0[r0 + 8<i32>:word64]
	r0 = r0 + r4
	r0 = r0 + r8
	r14 = r5 >>u 1<32>
	r13 = r13 + (r5 << 2<32>)
	r15 = 0x20<32> - r14
	__loop(0<i32>, 0x000225C0<p32>, 3<32>)
	__dcfetch(r7, 0<32>)
	r7 = r7 + r14
	__dcfetch(r10, 0<32>)
	r10 = r10 + r14
	__dcfetch(r11, 0<32>)
	r11 = r11 + r14
	__dcfetch(r12, 0<32>)
	r12 = r12 + r14
	__dcfetch(r7, 0<32>)
	r7 = r7 + r15
	__dcfetch(r10, 0<32>)
	r10 = r10 + r15
	__dcfetch(r11, 0<32>)
	r11 = r11 + r15
	__dcfetch(r12, 0<32>)
	r12 = r12 + r15
	r6 = r1
	__dcfetch(r7, 0<32>)
	r23_r22 = Mem0[r0 + 8<i32>:word64]
	r7 = r7 + r14
	r0 = r0 + m0
	r17_r16 = Mem0[r0:word64]
	r21_r20 = Mem0[r0 + 8<i32>:word64]
	__loop(0<i32>, 0x000226FC<p32>, r9)
	r0 = r0 + m0
	r19_r18 = Mem0[r0:word64]
	r19_r18 = Mem0[r29 + 8<i32>:word64]
	r17_r16 = Mem0[r29:word64]
	r23_r22 = Mem0[r29 + 24<i32>:word64]
	r21_r20 = Mem0[r29 + 16<i32>:word64]
	r27_r26 = Mem0[r29 + 40<i32>:word64]
	r25_r24 = Mem0[r29 + 32<i32>:word64]
	r28 = Mem0[r29 + 48<i32>:word32]
	v32 = r30
	r31 = Mem0[v32 + 4<i32>:word32]
	r30 = Mem0[v32:word32]
	r29 = v32 + 8<i32>
	return
	// succ:  gemmpybbw_asm_exit
gemmpybbw_asm_exit:


// gemsuma_asm
// Return size: 0
define gemsuma_asm
gemsuma_asm_entry:
	r29 = fp
	// succ:  l00022660
l00022660:
	v4 = r29 - 8<i32>
	Mem0[v4:word32] = r30
	Mem0[v4 + 4<i32>:word32] = r31
	r30 = v4
	r29 = v4 - 32<i32>
	r8 = CONVERT(SLICE(r2, uint16, 0), uint16, uint32)
	r1 = r1 >>u 1<32>
	r6 = r2 >>u 0x10<32>
	Mem0[r29 + 8<i32>:word64] = r19_r18
	Mem0[r29:word64] = r17_r16
	r7 = r2 >>u 0x14<32>
	__loop(1<i32>, 0x000226C0<p32>, r1)
	Mem0[r29 + 16<i32>:word64] = r21_r20
	r10 = 0x20<32> - r8
	r9 = r8 << 1<32>
	r13 = r0 + (r8 << 1<32>)
	r11 = 0x10<32> - r8
	r6 = r9 - r6
	M1 = r8
	p2 = r0 == r0
	r12 = r13
	r13 = r13 + (r8 << 1<32>)
	M0 = r11
	r19_r18 = 0<64>
	r17_r16 = 0<64>
	__loop(0<i32>, 0x000226E0<p32>, r7)
	r0 = r0 + m0
	r21_r20 = Mem0[r0:word64]
	r15_r14 = Mem0[r0 + 8<i32>:word64]
	r15_r14 = Mem0[r0 + 8<i32>:word64]
	r0 = r0 + m0
	r21_r20 = Mem0[r0:word64]
	p2 = !p2
	r17_r16 = r17_r16 + __vraddub<word64,word64>(r15_r14, r21_r20)
	r12 = r12 + r10
	r12 = r12 + r8
	r19_r18 = r19_r18 + __vraddub<word64,word64>(r15_r14, r21_r20)
	r0 = r0 + r6
	r17 = r19 + r18
	r16 = r17 + r16
	r17 = r17 * r4
	r16 = r16 * r4
	r17 = r17 + r5
	r16 = r16 + r5
	r12 = r13
	Mem0[r3:word64] = r17_r16
	r3 = r3 + 8<i32>
	p2 = r0 == r0
	r13 = r13 + (r8 << 1<32>)
	r19_r18 = Mem0[r29 + 8<i32>:word64]
	r17_r16 = Mem0[r29:word64]
	r21_r20 = Mem0[r29 + 16<i32>:word64]
	v33 = r30
	r31 = Mem0[v33 + 4<i32>:word32]
	r30 = Mem0[v33:word32]
	r29 = v33 + 8<i32>
	return
	// succ:  gemsuma_asm_exit
gemsuma_asm_exit:


// gemsumb_asm
// Return size: 0
define gemsumb_asm
gemsumb_asm_entry:
	r29 = fp
	// succ:  l00022740
l00022740:
	r2 = r2 >>u 2<32>
	p0 = r3 == 0<32>
	r4 = 0x1010101<32>
	r5 = 0x10<32>
	branch p0 l00022768
	// succ:  l00022760 l00022768
l00022760:
	__loop(0<i32>, 0x00022760<p32>, r2)
	// succ:  l00022768
l00022768:
	return
	// succ:  gemsumb_asm_exit
gemsumb_asm_exit:


// quantize_asm
// Return size: 0
define quantize_asm
quantize_asm_entry:
	r29 = fp
	// succ:  l00022780
l00022780:
	r5 = 0x7F<32>
	p0 = __bitsclr(r4, r5)
	r4 = r4 + 0x7F<32>
	r4 = r4 >>u 7<32>
	r4 = r4 + 0xFFFFFFFF<32>
	__loop(0<i32>, 0x000227E0<p32>, r4)
	return
	// succ:  quantize_asm_exit
quantize_asm_exit:


// vmemcpy_asm
// Return size: 0
define vmemcpy_asm
vmemcpy_asm_entry:
	r29 = fp
	// succ:  l00022960
l00022960:
	r7 = r2 + r0
	r8 = 0x1010101<32>
	r10 = r0 + r2
	r9 = r8 + r8
	r5 = r0 & 0x7F<32>
	r7 = r7 & 0x7F<32>
	r4 = r1 & 0x7F<32>
	r3 = r2 - r7
	r5 = r5 + r2
	r6 = r4 - r5
	r3 = r3 + 0x7F<32>
	r9 = r8 + 0<32>
	p2 = r5 > 0x7F<32>
	r3 = r3 >>u 7<32>
	p1 = r6 > 0xFFFFFFFF<32>
	__loop(0<i32>, 0x000229E0<p32>, r3)
	r1 = r1 + 0x80<32>
	r0 = r10
	return
	// succ:  vmemcpy_asm_exit
vmemcpy_asm_exit:


// fn00022964
// Return size: 0
define fn00022964
fn00022964_entry:
	r29 = fp
	// succ:  l00022964
l00022964:
	r7 = r2 + r0
	r8 = 1<32>
	r10 = r0 + r2
	r9 = r8 + r8
	r5 = r0 & 0x7F<32>
	r7 = r7 & 0x7F<32>
	r4 = r1 & 0x7F<32>
	r3 = r2 - r7
	r5 = r5 + r2
	r6 = r4 - r5
	r3 = r3 + 0x7F<32>
	r9 = r8 + 0<32>
	p2 = r5 > 0x7F<32>
	r3 = r3 >>u 7<32>
	p1 = r6 > 0xFFFFFFFF<32>
	__loop(0<i32>, 0x000229E0<p32>, r3)
	r1 = r1 + 0x80<32>
	r0 = r10
	return
	// succ:  fn00022964_exit
fn00022964_exit:


// memconvert_hvx
// Return size: 0
define memconvert_hvx
memconvert_hvx_entry:
	r29 = fp
	// succ:  l00022A20
l00022A20:
	r4 = SEQ(SLICE(r4, word16, 0), SLICE(r4, word16, 0))
	r3 = SEQ(SLICE(r3, word16, 0), SLICE(r3, word16, 0))
	r6 = Mem0[r29:word32]
	r9 = 0x1010101<32>
	__loop(1<i32>, 0x00022A80<p32>, r6)
	r15 = r0
	r12 = 0x80<32>
	r14 = r0 & 0x7F<32>
	r8 = r2 + r0
	r6 = r1
	r8 = r8 & 0x7F<32>
	r13 = r6 & 0x7F<32>
	r11 = r9 + r9
	r14 = r14 + r2
	r7 = r13 - r14
	r10 = r2 - r8
	p1 = r7 > 0xFFFFFFFF<32>
	p2 = r14 > 0x7F<32>
	r10 = r10 + 0x7F<32>
	r6 = r6 + r12
	r11 = r9 + 0<32>
	r10 = r10 >>u 7<32>
	__loop(0<i32>, 0x00022B00<p32>, r10)
	r1 = r1 + r2
	r0 = r0 + r5
	r15 = r0
	r14 = r0 & 0x7F<32>
	r8 = r2 + r0
	r6 = r1
	r13 = r6 & 0x7F<32>
	r11 = r9 + r9
	r8 = r8 & 0x7F<32>
	return
	// succ:  memconvert_hvx_exit
memconvert_hvx_exit:


// avgpool_aligned_hvx
// Return size: 0
define avgpool_aligned_hvx
avgpool_aligned_hvx_entry:
	r29 = fp
	// succ:  l00022B80
l00022B80:
	r6 = Mem0[r29:word32]
	r7 = r5 - r3
	M0 = r2
	r6 = SEQ(SLICE(r6, word16, 0), SLICE(r6, word16, 0))
	r9 = 0x1010101<32>
	r7 = r7 * r2
	r1 = r1 + 0x80<32>
	r10 = r1
	__loop(1<i32>, 0x00022BC0<p32>, r4)
	__loop(0<i32>, 0x00022BC0<p32>, r3)
	// succ:  l00022BC0
l00022BC0:
	r10 = r10 + r7
	__loop(0<i32>, 0x00022BC0<p32>, r3)
	__loop(1<i32>, 0x00022BC0<p32>, r4)
	r2 = r2 + 0xFFFFFF80<32>
	r10 = r1
	p0 = !(r2 == 0<32>)
	r1 = r1 + 0x80<32>
	branch p0 l00022BC0
	// succ:  l00022BFC l00022BC0
l00022BFC:
	return
	// succ:  avgpool_aligned_hvx_exit
avgpool_aligned_hvx_exit:


// avgpool_nonaligned_hvx
// Return size: 0
define avgpool_nonaligned_hvx
avgpool_nonaligned_hvx_entry:
	r29 = fp
	// succ:  l00022C20
l00022C20:
	r6 = Mem0[r29:word32]
	r7 = r5 - r3
	M0 = r2
	r6 = SEQ(SLICE(r6, word16, 0), SLICE(r6, word16, 0))
	r9 = 0x1010101<32>
	r7 = r7 * r2
	r1 = r1 + 0x80<32>
	r10 = r1
	__loop(1<i32>, 0x00022C60<p32>, r4)
	__loop(0<i32>, 0x00022C60<p32>, r3)
	// succ:  l00022C60
l00022C60:
	r10 = r10 + r7
	__loop(0<i32>, 0x00022C60<p32>, r3)
	__loop(1<i32>, 0x00022C60<p32>, r4)
	r2 = r2 + 0xFFFFFF80<32>
	r12 = r0 & 0x7F<32>
	r11 = r2 + 0x80<32>
	p0 = r2 > 0<32>
	r11 = 0x80<32>
	r12 = r12 + r11
	r13 = 0<32> - r0
	p1 = r12 > 0x7F<32>
	branch p1 l00022CC4
	// succ:  l00022CBC l00022CC4
l00022CBC:
	// succ:  l00022CC4
l00022CC4:
	r10 = r1
	r1 = r1 + 0x80<32>
	branch p0 l00022C60
	// succ:  l00022CDC l00022C60
l00022CDC:
	return
	// succ:  avgpool_nonaligned_hvx_exit
avgpool_nonaligned_hvx_exit:


// maxpool_aligned_hvx
// Return size: 0
define maxpool_aligned_hvx
maxpool_aligned_hvx_entry:
	r29 = fp
	// succ:  l00022D00
l00022D00:
	r10 = r1
	r7 = r5 - r3
	M0 = r2
	r1 = r1 + 0x80<32>
	r7 = r7 * r2
	__loop(1<i32>, 0x00022D20<p32>, r4)
	__loop(0<i32>, 0x00022D20<p32>, r3)
	// succ:  l00022D20
l00022D20:
	r10 = r10 + r7
	__loop(0<i32>, 0x00022D20<p32>, r3)
	r2 = r2 + 0xFFFFFF80<32>
	r1 = r1 + 0x80<32>
	r10 = r1
	__loop(1<i32>, 0x00022D20<p32>, r4)
	p0 = !(r2 == 0<32>)
	branch p0 l00022D20
	// succ:  l00022D50 l00022D20
l00022D50:
	return
	// succ:  maxpool_aligned_hvx_exit
maxpool_aligned_hvx_exit:


// maxpool_nonaligned_hvx
// Return size: 0
define maxpool_nonaligned_hvx
maxpool_nonaligned_hvx_entry:
	r29 = fp
	// succ:  l00022D60
l00022D60:
	r10 = r1
	r7 = r5 - r3
	M0 = r2
	__loop(0<i32>, 0x00022D80<p32>, r3)
	r1 = r1 + 0x80<32>
	r7 = r7 * r2
	__loop(1<i32>, 0x00022D80<p32>, r4)
	// succ:  l00022D80
l00022D80:
	r10 = r10 + r7
	__loop(0<i32>, 0x00022D80<p32>, r3)
	r11 = r2
	r12 = r0 & 0x7F<32>
	r2 = r2 + 0xFFFFFF80<32>
	__loop(1<i32>, 0x00022D80<p32>, r4)
	r13 = 0<32> - r0
	r11 = 0x80<32>
	p0 = r2 > 0<32>
	r12 = r12 + r11
	p1 = r12 > 0x7F<32>
	branch p1 l00022DD4
	// succ:  l00022DCC l00022DD4
l00022DCC:
	// succ:  l00022DD4
l00022DD4:
	r10 = r1
	r1 = r1 + 0x80<32>
	branch p0 l00022D80
	// succ:  l00022DEC l00022D80
l00022DEC:
	return
	// succ:  maxpool_nonaligned_hvx_exit
maxpool_nonaligned_hvx_exit:


// gemvmpybbw_asm
// Return size: 0
define gemvmpybbw_asm
gemvmpybbw_asm_entry:
	r29 = fp
	// succ:  l00022E00
l00022E00:
	v4 = r29 - 8<i32>
	Mem0[v4:word32] = r30
	Mem0[v4 + 4<i32>:word32] = r31
	r30 = v4
	r29 = v4 - 16<i32>
	r6 = Mem0[r29:word64]
	Mem0[r29:word64] = r17_r16
	r17 = 0x7F<32>
	r5 = r5 << 2<32>
	branch p0 l00022E20
	// succ:  l00022E1C l00022E20
l00022E1C:
	p0 = __bitsclr(r5, r17)
	// succ:  l00022E20
l00022E20:
	r8 = r2 + 0x80<32>
	r7 = r6 >>u 4<32>
	__dcfetch(r0, 0x80<32>)
	r7 = r7 + 0xFFFFFFFF<32>
	r0 = r0 + 8<i32>
	r11_r10 = Mem0[r0:word64]
	r16 = 0x1010101<32>
	__loop(0<i32>, 0x00022E80<p32>, r7)
	r14 = 0<32>
	r0 = r0 + 8<i32>
	r13_r12 = Mem0[r0:word64]
	r15 = 0<32>
	__dcfetch(r0, 0x80<32>)
	r0 = r0 + 8<i32>
	r11_r10 = Mem0[r0:word64]
	r15_r14 = r15_r14 + __vraddub<word64,word64>(r13_r12, r11_r10)
	r0 = r0 + 8<i32>
	r13_r12 = Mem0[r0:word64]
	r15_r14 = r15_r14 + __vraddub<word64,word64>(r13_r12, r11_r10)
	r14 = r14 + r15
	r15 = r1 * r3
	r14 = r14 * r3
	r1 = SEQ(SLICE(r1, word16, 0), SLICE(r1, word16, 0))
	r14 = r14 + r15 * r6
	r17_r16 = Mem0[r29:word64]
	v24 = r30
	r31 = Mem0[v24 + 4<i32>:word32]
	r30 = Mem0[v24:word32]
	r29 = v24 + 8<i32>
	return
	// succ:  gemvmpybbw_asm_exit
gemvmpybbw_asm_exit:


// im2col33322_hvx
// Return size: 0
define im2col33322_hvx
im2col33322_hvx_entry:
	r29 = fp
	// succ:  l00022F20
l00022F20:
	v4 = r29 - 8<i32>
	Mem0[v4:word32] = r30
	Mem0[v4 + 4<i32>:word32] = r31
	r30 = v4
	r29 = v4 - 64<i32>
	r2 = __vsplatb<byte[4]>(r2)
	Mem0[r29 + 8<i32>:word64] = r19_r18
	Mem0[r29:word64] = r17_r16
	r7 = 0x20<32>
	Mem0[r29 + 24<i32>:word64] = r23_r22
	Mem0[r29 + 16<i32>:word64] = r21_r20
	Mem0[r29 + 40<i32>:word64] = r27_r26
	Mem0[r29 + 32<i32>:word64] = r25_r24
	r7 = 0x78<32>
	M1 = r7
	r7 = 0x1010101<32>
	r23 = 0x381<32>
	M0 = r7
	r24 = 0x12A0<32>
	r8 = r7 + r7
	r10 = r7 << 3<32>
	r9 = r7 << 2<32>
	r11 = r10 + r10
	r13 = r10 << 3<32>
	r12 = r10 << 2<32>
	r5 = r5 + r4
	r3 = r4
	r27 = r13 + r13
	// succ:  l00022F80
l00022F80:
	r15 = r3 + r3
	r1 = r1 + r24
	r25 = r1 & 0x60<32>
	r19 = r1
	r25 = 0<32> - r25
	r15 = r15 * r23
	r21 = r25 + 0xFFFFFFF7<32>
	r22 = 0xFFFFFFE0<32>
	r15 = r0 + r15
	r16 = r15 + r23
	r20 = r25 + 0xFFFFFFEE<32>
	r17 = r16 + r23
	r26 = 0<32>
	__loop(1<i32>, 0x00022FE0<p32>, 8<32>)
	r18 = 0xFFFFFFE6<32>
	__loop(0<i32>, 0x00023020<p32>, 5<32>)
	r26 = r26 + 0x20<32>
	p2 = r26 == r24
	branch p2 l000230E0
	// succ:  l0002305C l000230E0
l0002305C:
	r26 = r26 + 0x60<32>
	// succ:  l000230E0
l000230E0:
	r3 = r3 + 1<32>
	branch p0 l00022F80
	// succ:  l000230E8 l00022F80
l000230E8:
	p0 = r3 == -1<i32>
	r19_r18 = Mem0[r29 + 8<i32>:word64]
	r17_r16 = Mem0[r29:word64]
	r23_r22 = Mem0[r29 + 24<i32>:word64]
	r21_r20 = Mem0[r29 + 16<i32>:word64]
	r27_r26 = Mem0[r29 + 40<i32>:word64]
	r25_r24 = Mem0[r29 + 32<i32>:word64]
	v43 = r30
	r31 = Mem0[v43 + 4<i32>:word32]
	r30 = Mem0[v43:word32]
	r29 = v43 + 8<i32>
	return
	// succ:  im2col33322_hvx_exit
im2col33322_hvx_exit:


// im2col7732_asm
// Return size: 0
define im2col7732_asm
im2col7732_asm_entry:
	r29 = fp
	// succ:  l00023100
l00023100:
	v4 = r29 - 8<i32>
	Mem0[v4:word32] = r30
	Mem0[v4 + 4<i32>:word32] = r31
	r30 = v4
	r29 = v4 - 64<i32>
	r2 = __vsplatb<byte[4]>(r2)
	Mem0[r29 + 8<i32>:word64] = r19_r18
	Mem0[r29:word64] = r17_r16
	r7 = 0xA0<32>
	Mem0[r29 + 24<i32>:word64] = r23_r22
	Mem0[r29 + 16<i32>:word64] = r21_r20
	Mem0[r29 + 40<i32>:word64] = r27_r26
	Mem0[r29 + 32<i32>:word64] = r25_r24
	r7 = 0x20<32>
	M1 = r7
	r15 = 0xFFFFFFFE<32>
	M0 = r7
	r15 = r15 + (r4 + r4)
	r16 = 0x2A0<32>
	r7 = 0x1010101<32>
	r8 = r7 + r7
	r10 = r7 << 3<32>
	r9 = r7 << 2<32>
	r11 = r10 + r10
	r13 = r10 << 3<32>
	r12 = r10 << 2<32>
	r23 = r4 + r5
	p0 = p0 & p0
	r14 = r11 << 3<32>
	r15 = r15 * r16
	p2 = r4 == 0<32>
	r0 = r0 + r15
	r22 = r4
	p1 = p1 & p1
	// succ:  l0002319C
l0002319C:
	r6 = p2 ? r14 : r8
	r18 = r1 + 0<32>
	r15 = r0
	r19 = 0xFFFFFFEB<32>
	r16 = r15 + 0x29A<32>
	r15 = r15 + 0xFFFFFFFA<32>
	r21 = 0<32>
	__loop(1<i32>, 0x000231C0<p32>, 7<32>)
	r15 = r15 + 0x60<32>
	p3 = r21 == 5<32>
	r6 = p3 ? r9 : r10
	r17 = 0<32>
	r16 = r16 + 0x60<32>
	r21 = r21 + 1<32>
	r6 = p2 ? r14 : r6
	r17 = 0xFFFFFFE6<32>
	__loop(0<i32>, 0x00023220<p32>, 4<32>)
	r17 = 0xFFFFFFE6<32>
	r21 = 0<32>
	r6 = r8
	r18 = r1 + 0<32>
	r15 = r0 + 0x540<32>
	r16 = r15 + 0x29A<32>
	r15 = r15 + 0xFFFFFFFA<32>
	r19 = 0xFFFFFFEB<32>
	__loop(1<i32>, 0x000232C0<p32>, 7<32>)
	r15 = r15 + 0x60<32>
	r16 = r16 + 0x60<32>
	p3 = r21 == 5<32>
	r17 = 0xFFFFFFD6<32>
	r6 = p3 ? r9 : r10
	__loop(0<i32>, 0x00023300<p32>, 4<32>)
	r21 = r21 + 1<32>
	r17 = 0xFFFFFFE6<32>
	r18 = r18 + 0x120<32>
	r21 = 0<32>
	r18 = r1 + 0<32>
	r15 = r0 + 0xA80<32>
	r19 = 0xFFFFFFEB<32>
	r16 = r15 + 0x29A<32>
	r15 = r15 + 0xFFFFFFFA<32>
	r6 = p1 ? r14 : r8
	__loop(1<i32>, 0x000233A0<p32>, 7<32>)
	r15 = r15 + 0x60<32>
	r16 = r16 + 0x60<32>
	r21 = r21 + 1<32>
	p3 = r21 == 5<32>
	r17 = 0xFFFFFFAC<32>
	r6 = p3 ? r9 : r10
	r17 = 0xFFFFFFE6<32>
	r6 = p1 ? r14 : r6
	__loop(0<i32>, 0x00023400<p32>, 4<32>)
	r18 = r18 + 0x120<32>
	r21 = 0<32>
	r18 = r1 + 0<32>
	r15 = r0 + 0xFC0<32>
	r15 = r15 + 0xFFFFFFFA<32>
	r6 = p0 ? r14 : r8
	__loop(1<i32>, 0x000234A0<p32>, 7<32>)
	r15 = r15 + 0x60<32>
	r17 = 2<32>
	p3 = r21 == 5<32>
	__loop(0<i32>, 0x000234E0<p32>, 4<32>)
	r6 = p3 ? r9 : r10
	r17 = 0xFFFFFFE6<32>
	r6 = p0 ? r14 : r6
	r21 = r21 + 1<32>
	r18 = r18 + 0x80<32>
	r22 = r22 + 1<32>
	r1 = r1 + 0x4600<32>
	p0 = r22 == r23
	p2 = p2 & p2
	p0 = r22 > 0x6D<32>
	r0 = r0 + 0x540<32>
	p1 = r22 > 0x6E<32>
	branch p0 l0002319C
	// succ:  l0002355C l0002319C
l0002355C:
	r19_r18 = Mem0[r29 + 8<i32>:word64]
	r17_r16 = Mem0[r29:word64]
	r23_r22 = Mem0[r29 + 24<i32>:word64]
	r21_r20 = Mem0[r29 + 16<i32>:word64]
	r27_r26 = Mem0[r29 + 40<i32>:word64]
	r25_r24 = Mem0[r29 + 32<i32>:word64]
	v41 = r30
	r31 = Mem0[v41 + 4<i32>:word32]
	r30 = Mem0[v41:word32]
	r29 = v41 + 8<i32>
	return
	// succ:  im2col7732_asm_exit
im2col7732_asm_exit:


// biasadd_relu_requant_nonaligned_hvx
// Return size: 0
define biasadd_relu_requant_nonaligned_hvx
biasadd_relu_requant_nonaligned_hvx_entry:
	r29 = fp
	// succ:  l00023580
l00023580:
	v4 = r29 - 8<i32>
	Mem0[v4:word32] = r30
	Mem0[v4 + 4<i32>:word32] = r31
	r30 = v4
	r29 = v4 - 32<i32>
	r14 = 0x1010101<32>
	r8 = r4 + 0x7F<32>
	Mem0[r29 + 8<i32>:word64] = r19_r18
	Mem0[r29:word64] = r17_r16
	r7 = r4
	r15 = r14 + r14
	r17 = r4 << 2<32>
	r16 = 1<32>
	r6 = r4 & 0x7F<32>
	r6 = r6 + 0xFFFFFF80<32>
	p2 = r6 == 0<32>
	r16 = SEQ(SLICE(r17, word16, 0), SLICE(r16, word16, 0))
	r8 = r8 >>u 7<32>
	r6 = 0<32>
	r18 = r1 + (r4 << 5<32>)
	__loop(1<i32>, 0x000235E0<p32>, r3)
	__l2fetch<word32,word64>(r18, r17_r16)
	r10 = 0x8000<32>
	r9 = r2
	__loop(0<i32>, 0x00023600<p32>, r8)
	r18 = r18 + (r4 << 2<32>)
	r12 = r0 & 0x7F<32>
	r11 = r7
	p0 = r7 > 0x7F<32>
	r11 = 0x80<32>
	r12 = r12 + r11
	r5 = r14
	r13 = 0<32> - r0
	r5 = r15 + 0<32>
	p1 = !(r12 > 0x7F<32>)
	r7 = r7 + 0xFFFFFF80<32>
	r0 = r0 + r6
	r7 = r4
	r1 = r1 + (r6 << 2<32>)
	__l2fetch<word32,word64>(r18, r17_r16)
	r1 = r1 + 0xFFFFFF00<32>
	r19_r18 = Mem0[r29 + 8<i32>:word64]
	r17_r16 = Mem0[r29:word64]
	v31 = r30
	r31 = Mem0[v31 + 4<i32>:word32]
	r30 = Mem0[v31:word32]
	r29 = v31 + 8<i32>
	return
	// succ:  biasadd_relu_requant_nonaligned_hvx_exit
biasadd_relu_requant_nonaligned_hvx_exit:


// vmemset_asm
// Return size: 0
define vmemset_asm
vmemset_asm_entry:
	r29 = fp
	// succ:  l000236E0
l000236E0:
	r7 = r2 + r0
	r8 = 0x1010101<32>
	r1 = __vsplatb<byte[4]>(r1)
	r7 = r7 & 0x7F<32>
	r9 = r8 + r8
	r2 = r2 - (r7 + 0xFFFFFF81<32>)
	r5 = r0 & 0x7F<32>
	r2 = r2 >>u 7<32>
	r5 = r5 + r2
	__loop(0<i32>, 0x00023740<p32>, r2)
	r9 = r8 + 0<32>
	p2 = r5 > 0x7F<32>
	return
	// succ:  vmemset_asm_exit
vmemset_asm_exit:


// gvmaccimw_asm
// Return size: 0
define gvmaccimw_asm
gvmaccimw_asm_entry:
	r29 = fp
	// succ:  l00023760
l00023760:
	r7 = Mem0[r29 + 4<i32>:word64]
	r6 = Mem0[r29:word64]
	v6 = r29 - 8<i32>
	Mem0[v6:word32] = r30
	Mem0[v6 + 4<i32>:word32] = r31
	r30 = v6
	r29 = v6 - 16<i32>
	r9 = r5 >>u 4<32>
	Mem0[r29 + 8<i32>:word64] = r19_r18
	Mem0[r29:word64] = r17_r16
	r9 = r9 + 0xFFFFFFFF<32>
	// succ:  l00023780
l00023780:
	r6 = r6 + 0xFFFFFFFF<32>
	__loop(1<i32>, 0x000237A0<p32>, r2)
	r0 = r0 + r4
	r10 = r0
	__loop(0<i32>, 0x000237C0<p32>, r9)
	r10 = r10 + 16<i32>
	r13_r12 = Mem0[r10:word64]
	r15_r14 = Mem0[r10 + 8<i32>:word64]
	r17_r16 = 0<64>
	r10 = r10 + 16<i32>
	r13_r12 = Mem0[r10:word64]
	r15_r14 = Mem0[r10 + 8<i32>:word64]
	r17_r16 = r17_r16 + __vraddub<word64,word64>(r15_r14, r13_r12)
	r17_r16 = r17_r16 + __vraddub<word64,word64>(r15_r14, r13_r12)
	r11 = Mem0[r1:word32]
	r16 = r16 + r17
	r11 = r11 + r16 * r7
	Mem0[r1:word32] = r11
	r1 = r1 + 4<i32>
	r0 = r0 + r3
	branch p1 l00023780
	// succ:  l000237F0 l00023780
l000237F0:
	p1 = r22 == 0<32>
	r19_r18 = Mem0[r29 + 8<i32>:word64]
	r17_r16 = Mem0[r29:word64]
	v26 = r30
	r31 = Mem0[v26 + 4<i32>:word32]
	r30 = Mem0[v26:word32]
	r29 = v26 + 8<i32>
	return
	// succ:  gvmaccimw_asm_exit
gvmaccimw_asm_exit:


// gvmaccb_asm
// Return size: 0
define gvmaccb_asm
gvmaccb_asm_entry:
	r29 = fp
	// succ:  l00023800
l00023800:
	r2 = r2 >>u 2<32>
	r4 = 0x1010101<32>
	r2 = r2 + 0xFFFFFFFF<32>
	branch p0 l00023848
	// succ:  l00023818 l00023848
l00023818:
	p0 = r3 == 0<32>
	__loop(0<i32>, 0x00023840<p32>, r2)
	r5 = 0x10<32>
	// succ:  l00023848
l00023848:
	return
	// succ:  gvmaccb_asm_exit
gvmaccb_asm_exit:


// gvmaddvvm_asm
// Return size: 0
define gvmaddvvm_asm
gvmaddvvm_asm_entry:
	r29 = fp
	// succ:  l00023880
l00023880:
	r11 = 0x80000000<32>
	r4 = r4 << 2<32>
	r6 = Mem0[r29:word64]
	r3 = r3
	r8 = r2
	r7 = 4<32>
	p2 = !(r6 == 0<32>)
	__dcfetch(r0, 0x20<32>)
	M0 = r4
	r0 = r0 + 4<i32>
	r10 = Mem0[r0:word32]
	__loop(0<i32>, 0x000238E0<p32>, r3)
	r0 = r0 + 4<i32>
	r10 = Mem0[r0:word32]
	__dcfetch(r0, 0x40<32>)
	__loop(0<i32>, 0x00023914<p32>, 5<32>)
	r7 = r7 + r7
	return
	// succ:  gvmaddvvm_asm_exit
gvmaddvvm_asm_exit:


// gvmmacbbw_asm
// Return size: 0
define gvmmacbbw_asm
gvmmacbbw_asm_entry:
	r29 = fp
	// succ:  l00023940
l00023940:
	r7 = Mem0[r29 + 4<i32>:word64]
	r6 = Mem0[r29:word64]
	r5 = r5 << 2<32>
	v7 = r29 - 8<i32>
	Mem0[v7:word32] = r30
	Mem0[v7 + 4<i32>:word32] = r31
	r30 = v7
	r29 = v7 - 64<i32>
	r8 = Mem0[r29 + 8<i32>:word32]
	Mem0[r29 + 8<i32>:word64] = r19_r18
	Mem0[r29:word64] = r17_r16
	M0 = r5
	Mem0[r29 + 24<i32>:word64] = r23_r22
	Mem0[r29 + 16<i32>:word64] = r21_r20
	r9 = r7 >>u 4<32>
	r5 = r5 - r5 * 3<32>
	r24 = r3 + 3<32>
	Mem0[r29 + 40<i32>:word64] = r27_r26
	Mem0[r29 + 32<i32>:word64] = r25_r24
	r9 = r9 + 0xFFFFFFFF<32>
	r24 = r24 >>u 2<32>
	M1 = r5
	// succ:  l00023980
l00023980:
	r10 = r1
	r8 = r8 + 0xFFFFFFFF<32>
	r23 = r3
	__loop(1<i32>, 0x000239A0<p32>, r24)
	__dcfetch(r0, 0x40<32>)
	r20 = r0 + r6
	r21 = r0
	__dcfetch(r20, 0x40<32>)
	r15_r14 = Mem0[r21 + 8<i32>:word64]
	r21 = r21 + 16<i32>
	r13_r12 = Mem0[r21:word64]
	r22 = r20 + r6
	r11 = r20 + (r6 << 1<32>)
	r17_r16 = Mem0[r20 + 8<i32>:word64]
	r20 = r20 + 16<i32>
	r19_r18 = Mem0[r20:word64]
	r0 = r0 + (r6 << 2<32>)
	__loop(0<i32>, 0x00023A00<p32>, r9)
	__dcfetch(r22, 0x40<32>)
	__dcfetch(r11, 0x40<32>)
	r22 = r22 + 16<i32>
	r13_r12 = Mem0[r22:word64]
	r19_r18 = Mem0[r22 + 8<i32>:word64]
	r11 = r11 + 16<i32>
	r15_r14 = Mem0[r11:word64]
	r17_r16 = Mem0[r11 + 8<i32>:word64]
	__dcfetch(r21, 0x40<32>)
	__dcfetch(r20, 0x40<32>)
	r21 = r21 + 16<i32>
	r13_r12 = Mem0[r21:word64]
	r15_r14 = Mem0[r21 + 8<i32>:word64]
	r20 = r20 + 16<i32>
	r19_r18 = Mem0[r20:word64]
	r17_r16 = Mem0[r20 + 8<i32>:word64]
	__dcfetch(r22, 0x40<32>)
	__dcfetch(r11, 0x40<32>)
	r22 = r22 + 16<i32>
	r13_r12 = Mem0[r22:word64]
	r19_r18 = Mem0[r22 + 8<i32>:word64]
	r11 = r11 + 16<i32>
	r15_r14 = Mem0[r11:word64]
	r17_r16 = Mem0[r11 + 8<i32>:word64]
	p0 = r23 > 1<32>
	p0 = r23 > 2<32>
	p0 = r23 > 3<32>
	r10 = r1
	r23 = r23 + 0xFFFFFFFC<32>
	p1 = r8 == 0<32>
	r0 = r0 + r4
	branch p1 l00023980
	// succ:  l00023B10 l00023980
l00023B10:
	r19_r18 = Mem0[r29 + 8<i32>:word64]
	r17_r16 = Mem0[r29:word64]
	r23_r22 = Mem0[r29 + 24<i32>:word64]
	r21_r20 = Mem0[r29 + 16<i32>:word64]
	r27_r26 = Mem0[r29 + 40<i32>:word64]
	r25_r24 = Mem0[r29 + 32<i32>:word64]
	v35 = r30
	r31 = Mem0[v35 + 4<i32>:word32]
	r30 = Mem0[v35:word32]
	r29 = v35 + 8<i32>
	return
	// succ:  gvmmacbbw_asm_exit
gvmmacbbw_asm_exit:


// gvmmpybbw_asm
// Return size: 0
define gvmmpybbw_asm
gvmmpybbw_asm_entry:
	r29 = fp
	// succ:  l00023B40
l00023B40:
	r7 = Mem0[r29 + 4<i32>:word64]
	r6 = Mem0[r29:word64]
	r5 = r5 << 2<32>
	v7 = r29 - 8<i32>
	Mem0[v7:word32] = r30
	Mem0[v7 + 4<i32>:word32] = r31
	r30 = v7
	r29 = v7 - 64<i32>
	r8 = Mem0[r29 + 8<i32>:word32]
	Mem0[r29:word64] = r17_r16
	Mem0[r29 + 32<i32>:word64] = r25_r24
	M0 = r5
	Mem0[r29 + 24<i32>:word64] = r23_r22
	Mem0[r29 + 16<i32>:word64] = r21_r20
	r24 = r3 + 3<32>
	r9 = r7 >>u 4<32>
	Mem0[r29 + 40<i32>:word64] = r27_r26
	Mem0[r29 + 8<i32>:word64] = r19_r18
	r9 = r9 + 0xFFFFFFFF<32>
	r24 = r24 >>u 2<32>
	// succ:  l00023B80
l00023B80:
	r10 = r1
	r8 = r8 + 0xFFFFFFFF<32>
	r23 = r3
	__loop(1<i32>, 0x00023BA0<p32>, r24)
	r21 = r0
	__dcfetch(r0, 0x40<32>)
	r20 = r0 + r6
	__dcfetch(r20, 0x40<32>)
	r21 = r21 + 16<i32>
	r13_r12 = Mem0[r21:word64]
	r15_r14 = Mem0[r21 + 8<i32>:word64]
	r22 = r20 + r6
	r11 = r20 + (r6 << 1<32>)
	r20 = r20 + 16<i32>
	r19_r18 = Mem0[r20:word64]
	r17_r16 = Mem0[r20 + 8<i32>:word64]
	r0 = r0 + (r6 << 2<32>)
	__loop(0<i32>, 0x00023BE0<p32>, r9)
	__dcfetch(r22, 0x40<32>)
	__dcfetch(r11, 0x40<32>)
	r22 = r22 + 16<i32>
	r13_r12 = Mem0[r22:word64]
	r19_r18 = Mem0[r22 + 8<i32>:word64]
	r11 = r11 + 16<i32>
	r15_r14 = Mem0[r11:word64]
	r17_r16 = Mem0[r11 + 8<i32>:word64]
	__dcfetch(r21, 0x40<32>)
	__dcfetch(r20, 0x40<32>)
	r21 = r21 + 16<i32>
	r13_r12 = Mem0[r21:word64]
	r15_r14 = Mem0[r21 + 8<i32>:word64]
	r20 = r20 + 16<i32>
	r19_r18 = Mem0[r20:word64]
	r17_r16 = Mem0[r20 + 8<i32>:word64]
	__dcfetch(r22, 0x40<32>)
	__dcfetch(r11, 0x40<32>)
	r22 = r22 + 16<i32>
	r13_r12 = Mem0[r22:word64]
	r19_r18 = Mem0[r22 + 8<i32>:word64]
	r11 = r11 + 16<i32>
	r15_r14 = Mem0[r11:word64]
	r17_r16 = Mem0[r11 + 8<i32>:word64]
	p0 = r23 > 1<32>
	p0 = r23 > 2<32>
	p0 = r23 > 3<32>
	r10 = r1
	r23 = r23 + 0xFFFFFFFC<32>
	p1 = r8 == 0<32>
	r0 = r0 + r4
	branch p1 l00023B80
	// succ:  l00023CF0 l00023B80
l00023CF0:
	r19_r18 = Mem0[r29 + 8<i32>:word64]
	r17_r16 = Mem0[r29:word64]
	r23_r22 = Mem0[r29 + 24<i32>:word64]
	r21_r20 = Mem0[r29 + 16<i32>:word64]
	r27_r26 = Mem0[r29 + 40<i32>:word64]
	r25_r24 = Mem0[r29 + 32<i32>:word64]
	v34 = r30
	r31 = Mem0[v34 + 4<i32>:word32]
	r30 = Mem0[v34:word32]
	r29 = v34 + 8<i32>
	return
	// succ:  gvmmpybbw_asm_exit
gvmmpybbw_asm_exit:


// gvmsumimw_asm
// Return size: 0
define gvmsumimw_asm
gvmsumimw_asm_entry:
	r29 = fp
	// succ:  l00023D20
l00023D20:
	r7 = Mem0[r29 + 4<i32>:word64]
	r6 = Mem0[r29:word64]
	v6 = r29 - 8<i32>
	Mem0[v6:word32] = r30
	Mem0[v6 + 4<i32>:word32] = r31
	r30 = v6
	r29 = v6 - 16<i32>
	r8 = Mem0[r29 + 8<i32>:word32]
	r9 = r5 >>u 4<32>
	Mem0[r29 + 8<i32>:word64] = r19_r18
	Mem0[r29:word64] = r17_r16
	r9 = r9 + 0xFFFFFFFF<32>
	// succ:  l00023D40
l00023D40:
	r6 = r6 + 0xFFFFFFFF<32>
	__loop(1<i32>, 0x00023D60<p32>, r2)
	r0 = r0 + r4
	r10 = r0
	__loop(0<i32>, 0x00023D80<p32>, r9)
	r10 = r10 + 16<i32>
	r13_r12 = Mem0[r10:word64]
	r15_r14 = Mem0[r10 + 8<i32>:word64]
	r17_r16 = 0<64>
	r10 = r10 + 16<i32>
	r13_r12 = Mem0[r10:word64]
	r15_r14 = Mem0[r10 + 8<i32>:word64]
	r17_r16 = r17_r16 + __vraddub<word64,word64>(r15_r14, r13_r12)
	r17_r16 = r17_r16 + __vraddub<word64,word64>(r15_r14, r13_r12)
	r11 = r8
	r16 = r16 + r17
	r11 = r11 + r16 * r7
	Mem0[r1:word32] = r11
	r1 = r1 + 4<i32>
	r0 = r0 + r3
	branch p1 l00023D40
	// succ:  l00023DB0 l00023D40
l00023DB0:
	p1 = r22 == 0<32>
	r19_r18 = Mem0[r29 + 8<i32>:word64]
	r17_r16 = Mem0[r29:word64]
	v27 = r30
	r31 = Mem0[v27 + 4<i32>:word32]
	r30 = Mem0[v27:word32]
	r29 = v27 + 8<i32>
	return
	// succ:  gvmsumimw_asm_exit
gvmsumimw_asm_exit:


// gvmsumb_asm
// Return size: 0
define gvmsumb_asm
gvmsumb_asm_entry:
	r29 = fp
	// succ:  l00023DC0
l00023DC0:
	r2 = r2 >>u 2<32>
	p0 = r3 == 0<32>
	r2 = r2
	r4 = 0x1010101<32>
	branch p0 l00023E08
	// succ:  l00023DD8 l00023E08
l00023DD8:
	__loop(0<i32>, 0x00023E00<p32>, r2)
	r5 = 0x10<32>
	// succ:  l00023E08
l00023E08:
	return
	// succ:  gvmsumb_asm_exit
gvmsumb_asm_exit:


// gvconvsum2dbbw_asm
// Return size: 0
define gvconvsum2dbbw_asm
gvconvsum2dbbw_asm_entry:
	r29 = fp
	// succ:  l00023E20
l00023E20:
	__dcfetch(r0, 0<32>)
	r8 = Mem0[r29:word32]
	__dcfetch(r0, 0x20<32>)
	r6 = Mem0[r29 + 8<i32>:word32]
	r5 = r5 << 2<32>
	v8 = r29 - 8<i32>
	Mem0[v8:word32] = r30
	Mem0[v8 + 4<i32>:word32] = r31
	r30 = v8
	r29 = v8 - 72<i32>
	r11 = Mem0[r29 + 20<i32>:word32]
	Mem0[r29:word64] = r17_r16
	Mem0[r29 + 32<i32>:word64] = r25_r24
	r25 = r8 >>u 0x10<32>
	Mem0[r29 + 24<i32>:word64] = r23_r22
	Mem0[r29 + 16<i32>:word64] = r21_r20
	r8 = SLICE(SLICE(r8, word16, 16) *64 SLICE(r8, word16, 0), word16, 32)
	Mem0[r29 + 40<i32>:word64] = r27_r26
	Mem0[r29 + 8<i32>:word64] = r19_r18
	M0 = r8
	r16 = 0x80000001<32>
	r12 = r8 + (r8 << 1<32>)
	r23 = r6 * r3
	Mem0[r29 + 56<i32>:word32] = r4
	r12 = 0x10<32> - r12
	r6 = Mem0[r29 + 84<i32>:word32]
	M1 = r12
	Mem0[r29 + 52<i32>:word32] = r1
	Mem0[r29 + 48<i32>:word32] = r0
	r12 = r12 + 0x10<32>
	r13 = r8 << 1<32>
	Mem0[r29 + 60<i32>:word32] = r5
	r13 = r6 - r3
	r23 = r23 - r13
	r6 = r6 >>u 4<32>
	Mem0[r29 + 64<i32>:word32] = r28
	r16 = Mem0[r29 + 104<i32>:word32]
	p3 = r8 > 0x60<32>
	r6 = r6 + 0xFFFFFFFF<32>
	r12 = r12 - r8
	r3 = r3 * r25
	Mem0[r29 + 84<i32>:word32] = r6
	// succ:  l00023EC0
l00023EC0:
	Mem0[r29 + 92<i32>:word32] = Mem0[r29 + 92<i32>:word32] - 1<32>
	r11 = Mem0[r29 + 48<i32>:word32]
	Mem0[r29 + 48<i32>:word32] = Mem0[r29 + 48<i32>:word32] + r3
	r22 = Mem0[r29 + 56<i32>:word32]
	r28 = r11 + 0x40<32>
	// succ:  l00023EE0
l00023EE0:
	r6 = Mem0[r29 + 88<i32>:word32]
	r9 = Mem0[r29 + 52<i32>:word32]
	r7 = 0<32>
	__dcfetch(r28, 0<32>)
	r28 = r28 + r8
	__loop(1<i32>, 0x00023F40<p32>, r6)
	r11 = r11 + m0
	r21_r20 = Mem0[r11:word64]
	r15_r14 = Mem0[r11 + 8<i32>:word64]
	r5_r4 = 0<64>
	r1_r0 = 0<64>
	r11 = r11 + m0
	r19_r18 = Mem0[r11:word64]
	r17_r16 = Mem0[r11 + 8<i32>:word64]
	r27_r26 = 0<64>
	r25_r24 = 0<64>
	__dcfetch(r28, 0<32>)
	r6 = Mem0[r29 + 84<i32>:word32]
	r7 = r7 + 1<32>
	r1_r0 = r1_r0 + __vraddub<word64,word64>(r15_r14, r21_r20)
	__loop(0<i32>, 0x00023FC0<p32>, r6)
	p3 = r7 == 2<32>
	r28 = r28 + r8
	r5_r4 = r5_r4 + __vraddub<word64,word64>(r17_r16, r19_r18)
	r7 = 0<32>
	r28 = r28 + r12
	r11 = r11 + m0
	r21_r20 = Mem0[r11:word64]
	r19_r18 = Mem0[r11 + 8<i32>:word64]
	r11 = r11 + m0
	r15_r14 = Mem0[r11:word64]
	r17_r16 = Mem0[r11 + 8<i32>:word64]
	r25_r24 = r25_r24 + __vraddub<word64,word64>(r19_r18, r21_r20)
	r27_r26 = r27_r26 + __vraddub<word64,word64>(r17_r16, r15_r14)
	__dcfetch(r28, 0<32>)
	r28 = r28 + r8
	r11 = r11 + m0
	r21_r20 = Mem0[r11:word64]
	r15_r14 = Mem0[r11 + 8<i32>:word64]
	r11 = r11 + m0
	r19_r18 = Mem0[r11:word64]
	r17_r16 = Mem0[r11 + 8<i32>:word64]
	r1_r0 = r1_r0 + __vraddub<word64,word64>(r15_r14, r21_r20)
	__dcfetch(r28, 0<32>)
	r28 = r28 + r8
	r5_r4 = r5_r4 + __vraddub<word64,word64>(r17_r16, r19_r18)
	r7 = r7 + 1<32>
	p3 = r7 == 2<32>
	r11 = r11 + m0
	r21_r20 = Mem0[r11:word64]
	r19_r18 = Mem0[r11 + 8<i32>:word64]
	r11 = r11 + m0
	r15_r14 = Mem0[r11:word64]
	r17_r16 = Mem0[r11 + 8<i32>:word64]
	r25_r24 = r25_r24 + __vraddub<word64,word64>(r19_r18, r21_r20)
	r28 = r28 + r12
	r7 = 0<32>
	r27_r26 = r27_r26 + __vraddub<word64,word64>(r17_r16, r15_r14)
	r11 = r11 - r13
	__dcfetch(r11, 0x40<32>)
	r7 = 0<32>
	r28 = r11 + 0x40<32>
	r11 = r11 + m0
	r21_r20 = Mem0[r11:word64]
	r15_r14 = Mem0[r11 + 8<i32>:word64]
	r28 = r28 + r8
	r11 = r11 + m0
	r19_r18 = Mem0[r11:word64]
	r17_r16 = Mem0[r11 + 8<i32>:word64]
	r6 = Mem0[r29 + 112<i32>:word32]
	r14 = Mem0[r29 + 108<i32>:word32]
	r11 = r11 - r23
	r10 = Mem0[r29 + 96<i32>:word32]
	r1 = r0 + r1
	r0 = r6
	r15 = Mem0[r29 + 60<i32>:word32]
	r28 = r11 + 0x40<32>
	r0 = r0 + r14 * r1
	Mem0[r10:word32] = r0
	r10 = r10 + 4<i32>
	p0 = r22 > 1<32>
	r2 = r2 + r15
	r5 = r4 + r5
	r4 = r6
	__dcfetch(r11, 0<32>)
	__dcfetch(r11, 0x20<32>)
	r4 = r4 + r14 * r5
	Mem0[r10:word16] = r4
	r10 = r10 + 4<i32>
	p1 = r22 > 2<32>
	r2 = r2 + r15
	r25 = r24 + r25
	r24 = r6
	r24 = r24 + r14 * r25
	Mem0[r10:word16] = r24
	r10 = r10 + 4<i32>
	p0 = r22 > 3<32>
	r2 = r2 + r15
	r27 = r26 + r27
	r26 = r6
	r26 = r26 + r14 * r27
	Mem0[r10:word16] = r26
	r10 = r10 + 4<i32>
	r2 = r2 + r15
	r22 = r22 + 0xFFFFFFFC<32>
	Mem0[r29 + 96<i32>:word32] = r10
	p2 = r22 > 0<32>
	branch p2 l00023EE0
	// succ:  l00024184 l00023EE0
l00024184:
	r9 = Mem0[r29 + 92<i32>:word32]
	p1 = r9 == 0<32>
	branch p1 l00023EC0
	// succ:  l00024190 l00023EC0
l00024190:
	r16 = Mem0[r29 + 104<i32>:word64]
	r6 = 4<32>
	__loop(0<i32>, 0x00024198<p32>, 5<32>)
	r6 = r6 + r6
	r19_r18 = Mem0[r29 + 8<i32>:word64]
	r17_r16 = Mem0[r29:word64]
	r23_r22 = Mem0[r29 + 24<i32>:word64]
	r21_r20 = Mem0[r29 + 16<i32>:word64]
	r27_r26 = Mem0[r29 + 40<i32>:word64]
	r25_r24 = Mem0[r29 + 32<i32>:word64]
	v47 = r30
	r31 = Mem0[v47 + 4<i32>:word32]
	r30 = Mem0[v47:word32]
	r29 = v47 + 8<i32>
	return
	// succ:  gvconvsum2dbbw_asm_exit
gvconvsum2dbbw_asm_exit:


// gvconv2dbbw_asm
// Return size: 0
define gvconv2dbbw_asm
gvconv2dbbw_asm_entry:
	r29 = fp
	// succ:  l000241C0
l000241C0:
	r7 = Mem0[r29 + 4<i32>:word64]
	r6 = Mem0[r29:word64]
	r9 = Mem0[r29 + 12<i32>:word32]
	r8 = Mem0[r29 + 8<i32>:word32]
	r5 = r5 << 2<32>
	r11 = Mem0[r29 + 20<i32>:word32]
	r10 = Mem0[r29 + 16<i32>:word32]
	v11 = r29 - 8<i32>
	Mem0[v11:word32] = r30
	Mem0[v11 + 4<i32>:word32] = r31
	r30 = v11
	r29 = v11 - 64<i32>
	r12 = Mem0[r29 + 24<i32>:word32]
	Mem0[r29:word64] = r17_r16
	Mem0[r29 + 32<i32>:word64] = r25_r24
	r25 = r6 >>u 0x10<32>
	Mem0[r29 + 24<i32>:word64] = r23_r22
	Mem0[r29 + 16<i32>:word64] = r21_r20
	r6 = SLICE(SLICE(r6, word16, 16) *64 SLICE(r6, word16, 0), word16, 32)
	Mem0[r29 + 40<i32>:word64] = r27_r26
	Mem0[r29 + 8<i32>:word64] = r19_r18
	M0 = r6
	Mem0[r29 + 52<i32>:word32] = r1
	Mem0[r29 + 48<i32>:word32] = r0
	r16 = 0x80000001<32>
	r1 = r6 + (r6 << 1<32>)
	r23 = r8 * r3
	Mem0[r29 + 56<i32>:word32] = r4
	r1 = 0x10<32> - r1
	p3 = r6 > 0x60<32>
	r1 = r1 + 0x10<32>
	r13 = r6 << 1<32>
	M1 = r1
	Mem0[r29 + 60<i32>:word32] = r5
	r13 = r7 - r3
	r23 = r23 - r13
	r7 = r7 >>u 4<32>
	r1 = r1 - r6
	r7 = r7 + 0xFFFFFFFF<32>
	r3 = r3 * r25
	// succ:  l00024260
l00024260:
	r11 = Mem0[r29 + 48<i32>:word32]
	r9 = r9 + 0xFFFFFFFF<32>
	Mem0[r29 + 48<i32>:word32] = Mem0[r29 + 48<i32>:word32] + r3
	r22 = Mem0[r29 + 56<i32>:word32]
	r26 = r11 + 0x40<32>
	// succ:  l00024280
l00024280:
	r24 = Mem0[r29 + 52<i32>:word32]
	r27 = 0<32>
	__loop(1<i32>, 0x000242C0<p32>, r8)
	__dcfetch(r26, 0<32>)
	r26 = r26 + r6
	__loop(0<i32>, 0x00024320<p32>, r7)
	r11 = r11 + m0
	r21_r20 = Mem0[r11:word64]
	r15_r14 = Mem0[r11 + 8<i32>:word64]
	r11 = r11 + m0
	r19_r18 = Mem0[r11:word64]
	r17_r16 = Mem0[r11 + 8<i32>:word64]
	__dcfetch(r26, 0<32>)
	r26 = r26 + r6
	r27 = r27 + 1<32>
	p3 = r27 == 1<32>
	r11 = r11 + m0
	r21_r20 = Mem0[r11:word64]
	r19_r18 = Mem0[r11 + 8<i32>:word64]
	r26 = r26 + r1
	r27 = 0<32>
	r11 = r11 + m0
	r15_r14 = Mem0[r11:word64]
	r17_r16 = Mem0[r11 + 8<i32>:word64]
	__dcfetch(r26, 0<32>)
	r26 = r26 + r6
	r11 = r11 + m0
	r21_r20 = Mem0[r11:word64]
	r15_r14 = Mem0[r11 + 8<i32>:word64]
	r11 = r11 + m0
	r19_r18 = Mem0[r11:word64]
	r17_r16 = Mem0[r11 + 8<i32>:word64]
	__dcfetch(r26, 0<32>)
	r26 = r26 + r6
	r19_r18 = Mem0[r11 + 8<i32>:word64]
	r27 = r27 + 1<32>
	p3 = r27 == 1<32>
	r11 = r11 + m0
	r21_r20 = Mem0[r11:word64]
	r26 = r26 + r1
	r27 = 0<32>
	r11 = r11 + m0
	r15_r14 = Mem0[r11:word64]
	r17_r16 = Mem0[r11 + 8<i32>:word64]
	r11 = r11 - r13
	r26 = r11 + 0x40<32>
	r27 = 0<32>
	r26 = r26 + r6
	__loop(0<i32>, 0x00024320<p32>, r7)
	__dcfetch(r26, 0<32>)
	r11 = r11 + m0
	r21_r20 = Mem0[r11:word64]
	r15_r14 = Mem0[r11 + 8<i32>:word64]
	r11 = r11 + m0
	r19_r18 = Mem0[r11:word64]
	r17_r16 = Mem0[r11 + 8<i32>:word64]
	r10 = r10 + 4<i32>
	r0 = Mem0[r10:word32]
	r11 = r11 - r23
	r5 = Mem0[r29 + 60<i32>:word32]
	r26 = r11 + 0x40<32>
	p0 = r22 > 1<32>
	r2 = r2 + r5
	r10 = r10 + 4<i32>
	r0 = Mem0[r10:word32]
	__dcfetch(r11, 0<32>)
	p1 = r22 > 2<32>
	r2 = r2 + r5
	r10 = r10 + 4<i32>
	r0 = Mem0[r10:word32]
	__dcfetch(r11, 0x20<32>)
	p0 = r22 > 3<32>
	r2 = r2 + r5
	r10 = r10 + 4<i32>
	r0 = Mem0[r10:word32]
	r22 = r22 + 0xFFFFFFFC<32>
	r2 = r2 + r5
	p2 = r22 > 0<32>
	branch p2 l00024280
	// succ:  l00024498 l00024280
l00024498:
	p1 = r9 == 0<32>
	branch p1 l00024260
	// succ:  l000244A0 l00024260
l000244A0:
	r6 = 4<32>
	__loop(0<i32>, 0x000244A8<p32>, 5<32>)
	r6 = r6 + r6
	r19_r18 = Mem0[r29 + 8<i32>:word64]
	r17_r16 = Mem0[r29:word64]
	r23_r22 = Mem0[r29 + 24<i32>:word64]
	r21_r20 = Mem0[r29 + 16<i32>:word64]
	r27_r26 = Mem0[r29 + 40<i32>:word64]
	r25_r24 = Mem0[r29 + 32<i32>:word64]
	v42 = r30
	r31 = Mem0[v42 + 4<i32>:word32]
	r30 = Mem0[v42:word32]
	r29 = v42 + 8<i32>
	return
	// succ:  gvconv2dbbw_asm_exit
gvconv2dbbw_asm_exit:


// gvconvsum2dbbb_asm
// Return size: 0
define gvconvsum2dbbb_asm
gvconvsum2dbbb_asm_entry:
	r29 = fp
	// succ:  l000244E0
l000244E0:
	__dcfetch(r0, 0<32>)
	r9 = 0x20<32>
	r8 = 0x1010101<32>
	r6 = 0x8000<32>
	r9 = 0x40<32>
	r9 = 0x60<32>
	r8 = r8 + r8
	r8 = r8 + r8
	__dcfetch(r0, 0x20<32>)
	r8 = r8 + r8
	r6 = Mem0[r29 + 4<i32>:word32]
	r8 = Mem0[r29:word32]
	__dcfetch(r0, 0x20<32>)
	p0 = r6 == 1<32>
	r6 = SLICE(SLICE(r8, word16, 0) *64 SLICE(r6, word16, 0), word16, 32)
	Mem0[r29 + 4<i32>:word32] = r6
	r14 = Mem0[r29 + 36<i32>:word32]
	r6 = Mem0[r29 + 8<i32>:word32]
	r15 = Mem0[r29 + 40<i32>:word32]
	v11 = r29 - 8<i32>
	Mem0[v11:word32] = r30
	Mem0[v11 + 4<i32>:word32] = r31
	r30 = v11
	r29 = v11 - 72<i32>
	r11 = Mem0[r29 + 20<i32>:word32]
	Mem0[r29:word64] = r17_r16
	Mem0[r29 + 32<i32>:word64] = r25_r24
	r25 = r8 >>u 0x10<32>
	Mem0[r29 + 24<i32>:word64] = r23_r22
	Mem0[r29 + 16<i32>:word64] = r21_r20
	r8 = SLICE(SLICE(r8, word16, 16) *64 SLICE(r8, word16, 0), word16, 32)
	Mem0[r29 + 40<i32>:word64] = r27_r26
	Mem0[r29 + 8<i32>:word64] = r19_r18
	r21 = 0x60<32>
	M0 = r8
	r16 = 0x80000001<32>
	r12 = r8 + (r8 << 1<32>)
	r23 = r6 * r3
	Mem0[r29 + 56<i32>:word32] = r4
	r12 = 0x10<32> - r12
	r6 = Mem0[r29 + 84<i32>:word32]
	r21 = r21 + 0xFFFFFFE0<32>
	M1 = r12
	Mem0[r29 + 68<i32>:word32] = r21
	p3 = r6 > 0xC0<32>
	r21 = r8 << 2<32>
	Mem0[r29 + 52<i32>:word32] = r1
	Mem0[r29 + 48<i32>:word32] = r0
	r12 = r12 + 0x10<32>
	r13 = r8 << 1<32>
	Mem0[r29 + 60<i32>:word32] = r5
	r13 = r6 - r3
	r23 = r23 - r13
	r6 = r6 >>u 4<32>
	Mem0[r29 + 64<i32>:word32] = r28
	r16 = Mem0[r29 + 104<i32>:word32]
	p3 = r8 > 0x60<32>
	r6 = r6 + 0xFFFFFFFF<32>
	r12 = r12 - r8
	r3 = r3 * r25
	Mem0[r29 + 84<i32>:word32] = r6
	__dcfetch(r0, 0x40<32>)
	r21 = Mem0[r29 + 68<i32>:word32]
	// succ:  l00024620
l00024620:
	Mem0[r29 + 92<i32>:word32] = Mem0[r29 + 92<i32>:word32] - 1<32>
	r11 = Mem0[r29 + 48<i32>:word32]
	Mem0[r29 + 48<i32>:word32] = Mem0[r29 + 48<i32>:word32] + r3
	r22 = Mem0[r29 + 56<i32>:word32]
	r28 = r11 + r21
	// succ:  l00024640
l00024640:
	r6 = Mem0[r29 + 88<i32>:word32]
	r9 = Mem0[r29 + 52<i32>:word32]
	r7 = 0<32>
	__dcfetch(r28, 0<32>)
	r28 = r28 + r8
	__loop(1<i32>, 0x000246A0<p32>, r6)
	r11 = r11 + m0
	r21_r20 = Mem0[r11:word64]
	r15_r14 = Mem0[r11 + 8<i32>:word64]
	r5_r4 = 0<64>
	r1_r0 = 0<64>
	r11 = r11 + m0
	r19_r18 = Mem0[r11:word64]
	r17_r16 = Mem0[r11 + 8<i32>:word64]
	r27_r26 = 0<64>
	r25_r24 = 0<64>
	__dcfetch(r28, 0<32>)
	r6 = Mem0[r29 + 84<i32>:word32]
	r28 = r28 + r8
	r1_r0 = r1_r0 + __vraddub<word64,word64>(r15_r14, r21_r20)
	__loop(0<i32>, 0x00024720<p32>, r6)
	p3 = r7 == 1<32>
	r5_r4 = r5_r4 + __vraddub<word64,word64>(r17_r16, r19_r18)
	r28 = r28 + r12
	r7 = 1<32> - r7
	r11 = r11 + m0
	r21_r20 = Mem0[r11:word64]
	r19_r18 = Mem0[r11 + 8<i32>:word64]
	r11 = r11 + m0
	r15_r14 = Mem0[r11:word64]
	r17_r16 = Mem0[r11 + 8<i32>:word64]
	r25_r24 = r25_r24 + __vraddub<word64,word64>(r19_r18, r21_r20)
	r27_r26 = r27_r26 + __vraddub<word64,word64>(r17_r16, r15_r14)
	__dcfetch(r28, 0<32>)
	r28 = r28 + r8
	r11 = r11 + m0
	r21_r20 = Mem0[r11:word64]
	r15_r14 = Mem0[r11 + 8<i32>:word64]
	r11 = r11 + m0
	r19_r18 = Mem0[r11:word64]
	r17_r16 = Mem0[r11 + 8<i32>:word64]
	r1_r0 = r1_r0 + __vraddub<word64,word64>(r15_r14, r21_r20)
	__dcfetch(r28, 0<32>)
	r28 = r28 + r8
	r5_r4 = r5_r4 + __vraddub<word64,word64>(r17_r16, r19_r18)
	p3 = r7 == 1<32>
	__dcfetch(r28, 0<32>)
	r11 = r11 + m0
	r21_r20 = Mem0[r11:word64]
	r19_r18 = Mem0[r11 + 8<i32>:word64]
	r11 = r11 + m0
	r15_r14 = Mem0[r11:word64]
	r17_r16 = Mem0[r11 + 8<i32>:word64]
	r25_r24 = r25_r24 + __vraddub<word64,word64>(r19_r18, r21_r20)
	r28 = r28 + r12
	r7 = 1<32> - r7
	r27_r26 = r27_r26 + __vraddub<word64,word64>(r17_r16, r15_r14)
	r11 = r11 - r13
	r21 = Mem0[r29 + 68<i32>:word32]
	__dcfetch(r11, 0x40<32>)
	r7 = 0<32>
	r28 = r11 + r21
	r11 = r11 + m0
	r21_r20 = Mem0[r11:word64]
	r15_r14 = Mem0[r11 + 8<i32>:word64]
	r28 = r28 + r8
	r11 = r11 + m0
	r19_r18 = Mem0[r11:word64]
	r17_r16 = Mem0[r11 + 8<i32>:word64]
	r6 = Mem0[r29 + 112<i32>:word32]
	r14 = Mem0[r29 + 108<i32>:word32]
	p0 = r22 > 1<32>
	r11 = r11 - r23
	r10 = Mem0[r29 + 96<i32>:word32]
	r20 = 1<32>
	r1 = r0 + r1
	r0 = r6
	r21 = Mem0[r29 + 68<i32>:word32]
	r15 = Mem0[r29 + 60<i32>:word32]
	r16 = CONVERT(SLICE(r2, ui2, 2), ui2, uint32)
	r0 = r0 + r14 * r1
	r16 = r16 & r20 << r16
	Mem0[r10:word32] = r0
	r10 = r10 + 4<i32>
	r5 = r4 + r5
	r4 = r6
	r16 = __vsplatb<byte[4]>(r16)
	r4 = r4 + r14 * r5
	p1 = r22 > 2<32>
	r20 = p0 ? 1<32> : 0x10<32>
	r28 = r11 + r21
	Mem0[r10:word16] = r4
	r10 = r10 + 4<i32>
	r25 = r24 + r25
	r24 = r6
	r24 = r24 + r14 * r25
	Mem0[r10:word16] = r24
	r10 = r10 + 4<i32>
	r7 = r2 + r15
	p2 = r22 > 3<32>
	r17 = CONVERT(SLICE(r7, ui2, 2), ui2, uint32)
	__dcfetch(r11, 0<32>)
	r2 = r2 + r15
	r17 = r17 & r20 << r17
	__dcfetch(r11, 0x20<32>)
	r27 = r26 + r27
	r26 = r6
	r17 = __vsplatb<byte[4]>(r17)
	r26 = r26 + r14 * r27
	__dcfetch(r11, 0x40<32>)
	r7 = r7 + r15
	r20 = p1 ? 1<32> : 0x10<32>
	r2 = r2 + r15
	Mem0[r10:word16] = r26
	r10 = r10 + 4<i32>
	r18 = CONVERT(SLICE(r7, ui2, 2), ui2, uint32)
	Mem0[r29 + 96<i32>:word32] = r10
	r7 = r7 + r15
	r20 = p2 ? 1<32> : 0x10<32>
	r18 = r18 & r20 << r18
	r19 = CONVERT(SLICE(r7, ui2, 2), ui2, uint32)
	r19 = r19 & r20 << r19
	r18 = __vsplatb<byte[4]>(r18)
	r19 = __vsplatb<byte[4]>(r19)
	r22 = r22 + 0xFFFFFFFC<32>
	r2 = r2 + r15
	p3 = r22 > 0<32>
	r2 = r2 + r15
	branch p3 l00024640
	// succ:  l0002499C l00024640
l0002499C:
	r21 = Mem0[r29 + 68<i32>:word32]
	r9 = Mem0[r29 + 92<i32>:word32]
	p1 = r9 == 0<32>
	branch p1 l00024620
	// succ:  l000249AC l00024620
l000249AC:
	r16 = Mem0[r29 + 104<i32>:word64]
	r6 = 4<32>
	__loop(0<i32>, 0x000249B4<p32>, 5<32>)
	r6 = r6 + r6
	r19_r18 = Mem0[r29 + 8<i32>:word64]
	r17_r16 = Mem0[r29:word64]
	r23_r22 = Mem0[r29 + 24<i32>:word64]
	r21_r20 = Mem0[r29 + 16<i32>:word64]
	r27_r26 = Mem0[r29 + 40<i32>:word64]
	r25_r24 = Mem0[r29 + 32<i32>:word64]
	v52 = r30
	r31 = Mem0[v52 + 4<i32>:word32]
	r30 = Mem0[v52:word32]
	r29 = v52 + 8<i32>
	return
	// succ:  gvconvsum2dbbb_asm_exit
gvconvsum2dbbb_asm_exit:


// gvconv2dbbb_asm
// Return size: 0
define gvconv2dbbb_asm
gvconv2dbbb_asm_entry:
	r29 = fp
	// succ:  l000249E0
l000249E0:
	__dcfetch(r0, 0<32>)
	r9 = 0x20<32>
	r8 = 0x1010101<32>
	r6 = 0x8000<32>
	r9 = 0x40<32>
	r9 = 0x60<32>
	r8 = r8 + r8
	__dcfetch(r0, 0x20<32>)
	r8 = r8 + r8
	__dcfetch(r0, 0x40<32>)
	r8 = r8 + r8
	r7 = Mem0[r29 + 4<i32>:word64]
	r6 = Mem0[r29:word64]
	r9 = Mem0[r29 + 12<i32>:word32]
	r8 = Mem0[r29 + 8<i32>:word32]
	p0 = r7 == 1<32>
	r11 = Mem0[r29 + 20<i32>:word32]
	r10 = Mem0[r29 + 16<i32>:word32]
	r7 = SLICE(SLICE(r7, word16, 0) *64 SLICE(r6, word16, 0), word16, 32)
	r14 = Mem0[r29 + 28<i32>:word32]
	r12 = Mem0[r29 + 24<i32>:word32]
	r15 = Mem0[r29 + 32<i32>:word32]
	p3 = r7 > 0xC0<32>
	v16 = r29 - 8<i32>
	Mem0[v16:word32] = r30
	Mem0[v16 + 4<i32>:word32] = r31
	r30 = v16
	r29 = v16 - 72<i32>
	r28 = 0x60<32>
	Mem0[r29 + 68<i32>:word32] = r28
	r28 = r28 + 0xFFFFFFE0<32>
	Mem0[r29:word64] = r17_r16
	Mem0[r29 + 32<i32>:word64] = r25_r24
	r25 = r6 >>u 0x10<32>
	Mem0[r29 + 24<i32>:word64] = r23_r22
	Mem0[r29 + 16<i32>:word64] = r21_r20
	r6 = SLICE(SLICE(r6, word16, 16) *64 SLICE(r6, word16, 0), word16, 32)
	Mem0[r29 + 40<i32>:word64] = r27_r26
	Mem0[r29 + 8<i32>:word64] = r19_r18
	M0 = r6
	Mem0[r29 + 52<i32>:word32] = r1
	Mem0[r29 + 48<i32>:word32] = r0
	r17 = r6 << 2<32>
	r28 = r17 + 0<32>
	r16 = 0x80000001<32>
	r1 = r6 + (r6 << 1<32>)
	r23 = r8 * r3
	Mem0[r29 + 56<i32>:word32] = r4
	r1 = 0x10<32> - r1
	r1 = r1 + 0x10<32>
	r13 = r6 << 1<32>
	M1 = r1
	Mem0[r29 + 60<i32>:word32] = r5
	r13 = r7 - r3
	r23 = r23 - r13
	r7 = r7 >>u 4<32>
	r1 = r1 - r6
	r7 = r7 + 0xFFFFFFFF<32>
	r3 = r3 * r25
	// succ:  l00024B00
l00024B00:
	r11 = Mem0[r29 + 48<i32>:word32]
	r9 = r9 + 0xFFFFFFFF<32>
	Mem0[r29 + 48<i32>:word32] = Mem0[r29 + 48<i32>:word32] + r3
	r22 = Mem0[r29 + 56<i32>:word32]
	r26 = r11 + r28
	// succ:  l00024B20
l00024B20:
	r24 = Mem0[r29 + 52<i32>:word32]
	p2 = !(r2 == r2)
	__loop(1<i32>, 0x00024B60<p32>, r8)
	__dcfetch(r26, 0<32>)
	r26 = r26 + r6
	__loop(0<i32>, 0x00024BC0<p32>, r7)
	r11 = r11 + m0
	r21_r20 = Mem0[r11:word64]
	r15_r14 = Mem0[r11 + 8<i32>:word64]
	r11 = r11 + m0
	r19_r18 = Mem0[r11:word64]
	r17_r16 = Mem0[r11 + 8<i32>:word64]
	__dcfetch(r26, 0<32>)
	r26 = r26 + r6
	r11 = r11 + m0
	r21_r20 = Mem0[r11:word64]
	r19_r18 = Mem0[r11 + 8<i32>:word64]
	r26 = r26 + r1
	p2 = !p2
	r11 = r11 + m0
	r15_r14 = Mem0[r11:word64]
	r17_r16 = Mem0[r11 + 8<i32>:word64]
	__dcfetch(r26, 0<32>)
	r26 = r26 + r6
	r11 = r11 + m0
	r21_r20 = Mem0[r11:word64]
	r15_r14 = Mem0[r11 + 8<i32>:word64]
	r11 = r11 + m0
	r19_r18 = Mem0[r11:word64]
	r17_r16 = Mem0[r11 + 8<i32>:word64]
	__dcfetch(r26, 0<32>)
	r26 = r26 + r6
	__dcfetch(r26, 0<32>)
	r19_r18 = Mem0[r11 + 8<i32>:word64]
	p2 = !p2
	r11 = r11 + m0
	r21_r20 = Mem0[r11:word64]
	r26 = r26 + r1
	r11 = r11 + m0
	r15_r14 = Mem0[r11:word64]
	r17_r16 = Mem0[r11 + 8<i32>:word64]
	r11 = r11 - r13
	r26 = r11 + r28
	p2 = !(r2 == r2)
	r26 = r26 + r6
	__loop(0<i32>, 0x00024BC0<p32>, r7)
	__dcfetch(r26, 0<32>)
	r11 = r11 + m0
	r21_r20 = Mem0[r11:word64]
	r15_r14 = Mem0[r11 + 8<i32>:word64]
	r11 = r11 + m0
	r19_r18 = Mem0[r11:word64]
	r17_r16 = Mem0[r11 + 8<i32>:word64]
	r11 = r11 - r23
	r16 = CONVERT(SLICE(r2, ui2, 2), ui2, uint32)
	r10 = r10 + 4<i32>
	r0 = Mem0[r10:word32]
	r5 = Mem0[r29 + 60<i32>:word64]
	r17 = 1<32>
	r26 = r11 + r28
	p0 = r22 > 1<32>
	r16 = r16 & r17 << r16
	r16 = __vsplatb<byte[4]>(r16)
	r10 = r10 + 4<i32>
	r0 = Mem0[r10:word32]
	__dcfetch(r11, 0<32>)
	p1 = r22 > 2<32>
	r10 = r10 + 4<i32>
	r0 = Mem0[r10:word32]
	p2 = r22 > 3<32>
	r10 = r10 + 4<i32>
	r0 = Mem0[r10:word32]
	__dcfetch(r11, 0x20<32>)
	r21 = r2 + r5
	r18 = CONVERT(SLICE(r21, ui2, 2), ui2, uint32)
	r17 = p0 ? 1<32> : 0x10<32>
	r18 = r18 & r17 << r18
	r18 = __vsplatb<byte[4]>(r18)
	r2 = r2 + r5
	__dcfetch(r11, 0x40<32>)
	r21 = r21 + r5
	r22 = r22 + 0xFFFFFFFC<32>
	r21 = r21 + r5
	r17 = p1 ? 1<32> : 0x10<32>
	r19 = CONVERT(SLICE(r21, ui2, 2), ui2, uint32)
	r17 = p2 ? 1<32> : 0x10<32>
	r19 = r19 & r17 << r19
	r20 = CONVERT(SLICE(r21, ui2, 2), ui2, uint32)
	r20 = r20 & r17 << r20
	r19 = __vsplatb<byte[4]>(r19)
	r20 = __vsplatb<byte[4]>(r20)
	r2 = r2 + r5
	r2 = r2 + r5
	p3 = r22 > 0<32>
	r2 = r2 + r5
	branch p3 l00024B20
	// succ:  l00024DE0 l00024B20
l00024DE0:
	p1 = r9 == 0<32>
	branch p1 l00024B00
	// succ:  l00024DE8 l00024B00
l00024DE8:
	r6 = 4<32>
	__loop(0<i32>, 0x00024DF0<p32>, 5<32>)
	r6 = r6 + r6
	r19_r18 = Mem0[r29 + 8<i32>:word64]
	r17_r16 = Mem0[r29:word64]
	r23_r22 = Mem0[r29 + 24<i32>:word64]
	r21_r20 = Mem0[r29 + 16<i32>:word64]
	r27_r26 = Mem0[r29 + 40<i32>:word64]
	r25_r24 = Mem0[r29 + 32<i32>:word64]
	r28 = Mem0[r29 + 68<i32>:word32]
	v49 = r30
	r31 = Mem0[v49 + 4<i32>:word32]
	r30 = Mem0[v49:word32]
	r29 = v49 + 8<i32>
	return
	// succ:  gvconv2dbbb_asm_exit
gvconv2dbbb_asm_exit:


