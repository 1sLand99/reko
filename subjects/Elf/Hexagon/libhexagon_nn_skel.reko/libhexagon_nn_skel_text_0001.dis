// logmsg_function
// Return size: 0
define logmsg_function
logmsg_function_entry:
	r29 = fp
	// succ:  l00019CE8
l00019CE8:
	v4 = r29 - 8<i32>
	Mem0[v4:word32] = r30
	Mem0[v4 + 4<i32>:word32] = r31
	r30 = v4
	r29 = v4 - 8<i32>
	r5 = Mem0[r2 + 16<i32>:word32]
	branch r3 >u r5 l00019D08
	// succ:  l00019CF8 l00019D08
l00019CF8:
	r0 = 0x00019D04<p32>
	r5 = r29 + 0x10<32>
	r6 = r29 + 0x10<32>
	call logv (retsize: 0;)
	Mem0[r29 + 4<i32>:word32] = r6
	// succ:  l00019D08
l00019D08:
	v13 = r30
	r31 = Mem0[v13 + 4<i32>:word32]
	r30 = Mem0[v13:word32]
	r29 = v13 + 8<i32>
	return
	// succ:  logmsg_function_exit
logmsg_function_exit:


// errlog_function
// Return size: 0
define errlog_function
errlog_function_entry:
	r29 = fp
	// succ:  l00019D0C
l00019D0C:
	r0 = 0x00028500<p32>
	r4 = r3
	v8 = r29 - 8<i32>
	Mem0[v8:word32] = r30
	Mem0[v8 + 4<i32>:word32] = r31
	r30 = v8
	r29 = v8 - 8<i32>
	r3 = 0<32>
	r5 = r29 + 0x10<32>
	r6 = r29 + 0x10<32>
	Mem0[r29 + 1<i32>:byte] = r6
	v13 = r30
	r31 = Mem0[v13 + 4<i32>:word32]
	r30 = Mem0[v13:word32]
	r29 = v13 + 8<i32>
	return
	// succ:  errlog_function_exit
errlog_function_exit:


// supernode_execute_hvx_slice
// Return size: 0
define supernode_execute_hvx_slice
supernode_execute_hvx_slice_entry:
	r29 = fp
	goto l00019D30
	// succ:  l00019D30
l00009730:
	r14 = 0x0002B1B0<p32>
	r28 = Mem0[r14:word32]
	call r28 (retsize: 0;)
	return
	// succ:  supernode_execute_hvx_slice_exit
l00019D30:
	r16 = r1
	Mem0[r29 - 16<i32>:word64] = r17_r16
	v7 = r29 - 8<i32>
	Mem0[v7:word32] = r30
	Mem0[v7 + 4<i32>:word32] = r31
	r30 = v7
	r29 = v7 - 312<i32>
	r3 = Mem0[r16:word32]
	Mem0[r29 + 272<i32>:word64] = r25_r24
	r5 = Mem0[r16 + 4<i32>:word32]
	Mem0[r29 + 280<i32>:word64] = r23_r22
	r2 = Mem0[r3 + 4<i32>:word32]
	Mem0[r29 + 248<i32>:word32] = r5
	r17 = Mem0[r3 + 32<i32>:int8]
	Mem0[r29 + 296<i32>:word64] = r19_r18
	Mem0[r29 + 288<i32>:word64] = r21_r20
	p0 = r17 == 0<32>
	r24 = Mem0[r2:word32]
	r1 = Mem0[r2 + 4<i32>:word32]
	r4 = Mem0[r2 + 24<i32>:word32]
	r7 = Mem0[r2 + 8<i32>:word32]
	r5 = Mem0[r2 + 16<i32>:word32]
	Mem0[r29 + 240<i32>:word32] = r7
	r7 = Mem0[r2 + 20<i32>:word32]
	r22 = Mem0[r2 + 12<i32>:word32]
	r2 = Mem0[r1 + 12<i32>:word32]
	r23 = Mem0[r24 + 8<i32>:word32]
	r0 = r23
	Mem0[r29 + 264<i32>:word64] = r27_r26
	Mem0[r29 + 252<i32>:word32] = r0
	r2 = Mem0[r1 + 8<i32>:word32]
	Mem0[r29 + 64<i32>:word32] = r2
	r21 = Mem0[r24 + 4<i32>:word32]
	r19 = Mem0[r1:word32]
	r1 = p0
	r20 = Mem0[r1 + 4<i32>:word32]
	r27 = Mem0[r4 + 8<i32>:word32]
	r18 = Mem0[r4 + 4<i32>:word32]
	Mem0[r29 + 228<i32>:word32] = r7
	r6 = Mem0[r24 + 12<i32>:word32]
	r7 = Mem0[r24:word32]
	Mem0[r29 + 256<i32>:word32] = r3
	Mem0[r29 + 224<i32>:word32] = r5
	Mem0[r29 + 112<i32>:word32] = r6
	Mem0[r29 + 72<i32>:word32] = r7
	r2 = r23 - r20
	Mem0[r29 + 244<i32>:word32] = r2
	Mem0[r29 + 220<i32>:word32] = r1
	branch p0 l00019DEC
	// succ:  l00019DD4 l00019DEC
l00019DD4:
	p0 = r9 == 2<32>
	branch p0 l00019DEC
	// succ:  l00019DDC l00019DEC
l00019DDC:
	r0 = r2 + r27
	p0 = r9 == 1<32>
	branch p0 l00019DF4
	// succ:  l00019DE4 l00019DF4
l00019DE4:
	r0 = 0<32>
	r0 = r27
	r0 = r0 + (r23 + 0xFFFFFFFF<32>)
	// succ:  l00019DEC
l00019DEC:
	call fn00009760 (retsize: 0;)
	r1 = r27
	// succ:  l00019DF4
l00019DF4:
	p0 = r17 == 2<32>
	r25 = r0
	r26 = r27
	r1 = r18 + 0<32>
	r0 = p0
	branch p0 l00019E3C
	// succ:  l00019E18 l00019E3C
l00019E18:
	r2 = r21 - r19
	Mem0[r29 + 59<i32>:byte] = r0
	r1_r0 = r18_r18
	r0 = 0<32>
	r1 = Mem0[r29 + 220<i32>:word32]
	p0 = r1
	branch p0 l00019E44
	// succ:  l00019E30 l00019E44
l00019E30:
	r1_r0 = r18_r21
	goto l00019E40
	// succ:  l00019E40
l00019E3C:
	r0 = r2 + r18
	// succ:  l00019E40
l00019E40:
	call fn00009760 (retsize: 0;)
	// succ:  l00019E44
l00019E44:
	r6 = r0 + 0xFFFFFFFF<32>
	r7 = r20 - r23
	r3 = Mem0[r29 + 240<i32>:word32]
	r4 = Mem0[r29 + 256<i32>:word32]
	r22 = r25 + 0xFFFFFFFF<32>
	r17 = r19
	r2 = Mem0[r22 + 16<i32>:word32]
	Mem0[r29 + 116<i32>:word32] = r23
	r22 = r7 + r22 * r26
	r23 = r6
	r3 = Mem0[r3 + 16<i32>:word32]
	r4 = Mem0[r4 + 8<i32>:word32]
	r6 = Mem0[r29 + 224<i32>:word32]
	Mem0[r29 + 240<i32>:word32] = r6
	r1 = Mem0[r29 + 228<i32>:word32]
	r2 = Mem0[r2:word32]
	r22 = r22 + (r22 >>u 0x1F<32>)
	r19 = Mem0[r29 + 64<i32>:word64]
	r7 = Mem0[r29 + 72<i32>:word64]
	r7 = r19 * r7
	r3 = r17 - r21
	r9 = r19 + 0x1F<32>
	r27 = Mem0[r3:word32]
	r23 = r3 + r23 * r18
	r7 = r7 * r25
	r4 = Mem0[r4:word32]
	r5 = Mem0[r1 + 16<i32>:word32]
	r0 = r2 - r27
	r24 = r0
	r6 = Mem0[r6 + 16<i32>:word32]
	r8 = Mem0[r24 + 16<i32>:word32]
	Mem0[r29 + 128<i32>:word32] = r26
	r23 = r23 + (r23 >>u 0x1F<32>)
	r8 = Mem0[r16 + 20<i32>:word32]
	Mem0[r29 + 160<i32>:word32] = r8
	r3 = Mem0[r4 + 16<i32>:word32]
	Mem0[r29 + 56<i32>:word32] = r16
	Mem0[r29 + 108<i32>:word32] = r21
	Mem0[r29 + 228<i32>:word32] = r9
	Mem0[r29 + 196<i32>:word32] = r8
	r26 = Mem0[r5:word32]
	Mem0[r29 + 224<i32>:word32] = r7
	r16 = Mem0[r6:word32]
	call fmaxf.1.0 (retsize: 0;)
	Mem0[r29 + 60<i32>:word32] = r3
	r2 = 0x437F0000<32>
	call fn00009610 (retsize: 0;)
	r1_r0 = r0_r2
	r21 = 0<32>
	r2 = r21 - r27
	r0 = r2 * r0
	call fn00009620 (retsize: 0;)
	r18 = truncf(CONVERT(r0, uint32, real32))
	r0 = r26 - r16
	r2 = 0<32>
	p1 = r18 > 0xFF<32>
	p0 = r18 > 0xFFFFFFFF<32>
	r18 = 0xFFFFFFFF<32>
	call fmaxf.1.0 (retsize: 0;)
	r18 = r2 + 0<32>
	r2 = 0<32>
	Mem0[r29 + 33<i32>:byte] = r2
	r2 = 0<32>
	call fn00009610 (retsize: 0;)
	r1_r0 = r0_r2
	r2 = r21 - r16
	r0 = r2 * r0
	call fn00009620 (retsize: 0;)
	r2 = truncf(CONVERT(r0, uint32, real32))
	p0 = r2 > -1<i32>
	branch p0 l00019F68
	// succ:  l00019F58 l00019F68
l00019F58:
	p0 = r2 > 0xFF<32>
	r3 = 0xFF<32>
	r3 = CONVERT(SLICE(r2, byte, 0), byte, uint32)
	Mem0[r29 + 132<i32>:word32] = r3
	// succ:  l00019F68
l00019F68:
	r2 = r20 * r17
	p0 = r17 == 7<32>
	r6 = Mem0[r29 + 244<i32>:word32]
	r9 = Mem0[r29 + 128<i32>:word32]
	r4 = 3<32> + r24 * r25
	r8 = r23 >> 1<32>
	r5 = Mem0[r29 + 112<i32>:word32]
	Mem0[r29 + 41<i32>:byte] = r8
	r0 = p0
	p2 = r9 == 2<32>
	p1 = r5 == 3<32>
	r21 = r2 * r6
	r7 = r3 & 0xFFFFFFF0<32>
	r2 = Mem0[r29 + 224<i32>:word32]
	Mem0[r29 + 220<i32>:word32] = r0
	p3 = r7 == 0xA0<32>
	p0 = r7 == 0x20<32>
	r5 = r5 + 0xF<32>
	r0 = Mem0[r29 + 220<i32>:word32]
	r1 = r24 * r25
	p0 = __fastcorner9(p2, p0)
	r4 = r4 & 0x3FFFFFFC<32>
	r6 = r22 >> 1<32>
	p3 = __fastcorner9(p2, p3)
	r12 = Mem0[r29 + 228<i32>:word32]
	Mem0[r29 + 26<i32>:byte] = r6
	r26 = r5 & 0xFFFFFFF0<32>
	r5 = r21 == r7
	r8 = r25
	r2 = r2 * r24
	p0 = __fastcorner9(p1, p0)
	r6 = r18 & 0xFF<32>
	Mem0[r29 + 76<i32>:word32] = r1
	p1 = r0
	r3 = r19 << 2<32>
	r23 = r9
	r13 = r12 & 0xFFFFFFE0<32>
	p1 = __fastcorner9(p1, p2)
	r4 = r4 << 2<32>
	p2 = r17 == 3<32>
	r25 = r24
	p0 = __fastcorner9(p2, p0)
	p2 = r20 == 7<32>
	Mem0[r29 + 244<i32>:word32] = r13
	Mem0[r29 + 96<i32>:word32] = r5
	p2 = __fastcorner9(p2, p1)
	p1 = r20 == 3<32>
	p3 = p2 | p0 & p1
	r0 = p2
	p0 = r21 == r7
	r0 = Mem0[r29 + 236<i32>:word32]
	Mem0[r29 + 100<i32>:word32] = r0
	p1 = r0
	branch p1 l0001A078
	// succ:  l0001A050 l0001A078
l0001A050:
	r22 = Mem0[r29 + 116<i32>:word32]
	r24 = Mem0[r29 + 108<i32>:word32]
	p1 = !(r20 == 1<32>)
	p2 = !(r17 == 1<32>)
	r24 = Mem0[r29 + 108<i32>:word32]
	p1 = p2 | p1
	r0 = p3
	Mem0[r29 + 30<i32>:byte] = r0
	branch p1 l0001A090
	// succ:  l0001A070 l0001A090
l0001A070:
	p0 = p0 & p0
	goto l0001A08C
	// succ:  l0001A08C
l0001A078:
	r0 = p3
	r5 = 0<32>
	r22 = Mem0[r29 + 116<i32>:word64]
	branch p3 l0001A0A8
	// succ:  l0001A08C l0001A0A8
l0001A08C:
	Mem0[r29 + 200<i32>:word32] = r5
	Mem0[r29 + 120<i32>:word32] = r0
	r5 = p0 ? 1<32> : 0<32>
	r0 = Mem0[r29 + 120<i32>:word32]
	Mem0[r29 + 50<i32>:byte] = r5
	goto l0001A09C
	// succ:  l0001A09C
l0001A090:
	r0 = Mem0[r29 + 120<i32>:word32]
	Mem0[r29 + 50<i32>:byte] = r5
	// succ:  l0001A09C
l0001A09C:
	branch p0 l0001A0D0
	// succ:  l0001A0A8 l0001A0D0
l0001A0A8:
	r6 = Mem0[r29 - 92<i32>:word32]
	Mem0[r29 - 20<i32>:word32] = r6
	r6 = r17 << 1<32>
	r16 = r7
	r5 = r25
	Mem0[r29 + 236<i32>:word32] = r6
	r7 = r8 * r16
	r5 = r5 + (r6 + 2<32>)
	Mem0[r29 + 232<i32>:word32] = r8
	r5 = r7 * r5
	goto l0001A0E8
	// succ:  l0001A0E8
l0001A0D0:
	r5 = r5 + r22
	Mem0[r29 + 232<i32>:word32] = r8
	r5 = r5 * r26
	r6 = r6 + r17
	r6 = r24 + (r6 << 1<32>)
	r5 = r5 * r6
	// succ:  l0001A0E8
l0001A0E8:
	r6 = Mem0[r29 + 252<i32>:word32]
	r6 = Mem0[r6 + 4<i32>:word32]
	r6 = r6 + (r3 + 0x7F<32>)
	Mem0[r29 + 188<i32>:word32] = r6
	r3 = r6 & 0xFFFFFF80<32>
	Mem0[r29 + 42<i32>:byte] = r3
	r18 = r3 & 0xFFFFFF80<32>
	r5 = Mem0[r29 + 256<i32>:word32]
	r7 = r18 + 0x17F<32>
	r6 = r7 & 0xFFFFFF80<32>
	r5 = Mem0[r5 + 40<i32>:word32]
	Mem0[r29 + 46<i32>:byte] = r6
	r27 = Mem0[r5:word32]
	r4 = Mem0[r29 + 244<i32>:word32]
	p0 = r19 == r4
	r19 = r6 & 0xFFFFFF80<32>
	r7 = r19 + 0x17F<32>
	r0 = p0
	r3 = r7 & 0xFFFFFF80<32>
	Mem0[r29 + 17<i32>:byte] = r0
	r3 = r3 & 0xFFFFFF80<32>
	r2 = Mem0[r29 + 60<i32>:word32]
	r3 = r2 + 0<32>
	call fn00009530 (retsize: 0;)
	Mem0[r29 + 204<i32>:word32] = r3
	r2 = r24 * r22
	p0 = r21 == r16
	r3 = Mem0[r29 + 112<i32>:word64]
	Mem0[r29 + 48<i32>:word64] = r1_r0
	r2 = r2 * r3
	branch p0 l0001A17C
	// succ:  l0001A170 l0001A17C
l0001A170:
	Mem0[r29 + 80<i32>:word32] = r2
	r4 = r23
	r0 = Mem0[r29 + 120<i32>:word64]
	p0 = r0
	branch p0 l0001A1A0
	// succ:  l0001A17C l0001A1A0
l0001A17C:
	r24 = r25
	r26 = r16
	r20 = 1<32>
	r22 = Mem0[r29 + 232<i32>:word32]
	r17 = 1<32>
	r2 = 0<32>
	r4 = 1<32>
	r7 = 0<32>
	Mem0[r29 + 104<i32>:word32] = r2
	Mem0[r29 + 164<i32>:word32] = r7
	// succ:  l0001A1A0
l0001A1A0:
	r3 = r26 * r20
	r2 = Mem0[r29 + 104<i32>:word32]
	Mem0[r29 + 224<i32>:word32] = r20
	r2 = r22 + r2
	r0 = 0x60000<32>
	Mem0[r29 + 116<i32>:word32] = r22
	r2 = r2 * r26
	Mem0[r29 + 228<i32>:word32] = r4
	Mem0[r29 + 192<i32>:word32] = r26
	r20 = r3 * r17
	r2 = r4 * r2
	Mem0[r29 + 252<i32>:word32] = r2
	Mem0[r29 + 108<i32>:word32] = r24
	r0 = r0 - (r20 << 6<32>)
	r1 = r2 << 2<32>
	call fn00009750 (retsize: 0;)
	r2 = Mem0[r29 + 240<i32>:word32]
	r2 = r2 + r0
	call fn00009750 (retsize: 0;)
	r1_r0 = r0_r2
	r2 = r25
	r3 = r0 + 1<32>
	r21 = Mem0[r29 + 248<i32>:word32]
	r2 = r2 + (r2 >>u 0x1F<32>)
	r4 = __clear_bit<word32,word32>(r3, 0<32>)
	p1 = r21 == 1<32>
	r3 = r3 + (r3 >>u 0x1F<32>)
	p0 = r4 == 2<32>
	r25 = r25 - (r2 >> 1<32>)
	r2 = r2 >> 1<32>
	Mem0[r29 + 55<i32>:byte] = r2
	r26 = p1
	r25 = r2 + 0<32>
	r24 = 2<32>
	Mem0[r29 + 256<i32>:word32] = r26
	Mem0[r29 + 176<i32>:word32] = r25
	r1_r0 = r24_r25
	Mem0[r29 + 180<i32>:word32] = r24
	r20 = 0x3D<32> & r20 >>u 0xB<32>
	call fn00009750 (retsize: 0;)
	r2 = r20 >> 0x1F<32>
	r3 = 0x40<32>
	Mem0[r29 + 212<i32>:word32] = r0
	r20 = r20 + (r2 >>u 0x1A<32>)
	r2 = r20 >> 6<32>
	r20 = r17
	r2 = SEQ(SLICE(r3, word16, 0), SLICE(r2, word16, 0))
	r1_r0 = r3_r2
	Mem0[r29 + 136<i32>:word64] = r1_r0
	__l2fetch<word32,word64>(r27, r1_r0)
	r0 = r18 + (r21 << 7<32>)
	r2 = 0x80<32>
	r1 = 0<32>
	call fn000095F0 (retsize: 0;)
	r17 = 0<32>
	Mem0[r29 + 208<i32>:word32] = r0
	r7 = r24 * r25
	r2 = Mem0[r29 + 72<i32>:word32]
	branch r17 > 0<32> l0001A314
	// succ:  l0001A29C l0001A314
l0001A29C:
	r2 = Mem0[r29 + 248<i32>:word32]
	r0 = Mem0[r29 + 256<i32>:word32]
	r2 = r2 << 5<32>
	r6 = r24 + 0xFFFFFFFF<32>
	r3 = Mem0[r29 + 220<i32>:word32]
	Mem0[r29 + 43<i32>:byte] = r6
	r19 = r19 + (r2 << 2<32>)
	r3 = -1<i32>
	Mem0[r29 + 92<i32>:word32] = r7
	Mem0[r29 + 220<i32>:word32] = r3
	r2 = Mem0[r29 + 112<i32>:word32]
	r3 = Mem0[r29 + 128<i32>:word32]
	r2 = r3 * r2
	r1 = Mem0[r29 + 212<i32>:word32]
	r0 = Mem0[r29 + 76<i32>:word32]
	r5 = r2 * r22
	r1 = r1 + (r20 + 1<32>)
	r6 = Mem0[r29 + 244<i32>:word32]
	r4 = Mem0[r29 + 220<i32>:word32]
	r3 = 0x3F<32> + r1 * r5
	Mem0[r29 + 88<i32>:word32] = r18
	Mem0[r29 + 84<i32>:word32] = r17
	r2 = Mem0[r29 + 80<i32>:word32]
	Mem0[r29 + 156<i32>:word32] = r5
	r7 = r2 * r18
	r2 = r0 * r6
	r4 = r5 * r4
	r0 = r3 >> 0x1F<32>
	r5 = Mem0[r29 + 160<i32>:word32]
	Mem0[r29 + 152<i32>:word32] = r7
	r1 = r2 * r18
	r3 = r3 + (r0 >>u 0x1A<32>)
	Mem0[r29 + 54<i32>:byte] = r1
	goto l0001A320
	// succ:  l0001A320
l0001A314:
	r3 = r3 + (r0 >>u 0x1A<32>)
	Mem0[r29 + 54<i32>:byte] = r1
	// succ:  l0001A320
l0001A320:
	r2 = r3 >> 6<32>
	r3 = 0x40<32>
	r2 = SEQ(SLICE(r3, word16, 0), SLICE(r2, word16, 0))
	r1_r0 = r3_r2
	__l2fetch<word32,word64>(r5, r1_r0)
	p0 = r6 > 0<32>
	branch p0 l0001A6F4
	// succ:  l0001A33C l0001A6F4
l0001A33C:
	r3 = Mem0[r29 + 88<i32>:word32]
	r2 = r20 + 1<32>
	r22 = 0<32>
	r4 = Mem0[r29 + 80<i32>:word32]
	Mem0[r29 + 37<i32>:byte] = r2
	r4 = r2 + r4 * r3
	Mem0[r29 + 60<i32>:byte] = r4
	// succ:  l0001A358
l0001A358:
	r23 = 0<32>
	r6 = r25
	p0 = r24 > 0<32>
	r26 = Mem0[r29 + 92<i32>:word32]
	r21 = Mem0[r29 + 220<i32>:word32]
	// succ:  l0001A370
l0001A370:
	r2 = r6 * r24
	p1 = r23 == 0<32>
	r3 = Mem0[r29 + 172<i32>:word32]
	r4 = Mem0[r29 + 220<i32>:word32]
	r7 = Mem0[r29 + 212<i32>:word32]
	r5 = Mem0[r29 + 200<i32>:word32]
	p2 = r3 == r23
	r3 = r25 + r4
	p0 = r2 > r26
	r2 = 0<32>
	r17 = r3 - r21
	r3 = r4 + 0<32>
	r2 = r20 + 0xFFFFFFFF<32>
	r4 = p0 ? 1<32> : 0<32>
	r25 = r20
	r4 = r4 + r7
	p0 = r5 == 0<32>
	r17 = r4 + 0<32>
	r3 = r4 + r21
	branch p0 l0001A3D0
	// succ:  l0001A3C4 l0001A3D0
l0001A3C4:
	r5 = r17 + r20
	r6 = r6 - r17
	p1 = r14 == 0<32>
	branch p1 l0001A418
	// succ:  l0001A3D0 l0001A418
l0001A3D0:
	r8 = Mem0[r29 - 128<i32>:word32]
	r9 = Mem0[r29 - 4<i32>:word32]
	r25 = r20
	r4 = Mem0[r29 + 148<i32>:word32]
	r5 = Mem0[r29 + 156<i32>:word32]
	r4 = r4 + r17
	r6 = Mem0[r29 + 152<i32>:word32]
	Mem0[r29 + 256<i32>:word32] = r6
	r4 = 0x3F<32> + r4 * r5
	r3 = r5 * r3
	r5 = Mem0[r29 + 160<i32>:word32]
	r5 = r5 + (r3 + r6)
	r7 = r4 >> 0x1F<32>
	r4 = r4 + (r7 >>u 0x1A<32>)
	r7 = r4 >> 6<32>
	r4 = 0x40<32>
	r3 = SEQ(SLICE(r4, word16, 0), SLICE(r7, word16, 0))
	r1_r0 = r4_r3
	__l2fetch<word32,word64>(r5, r1_r0)
	goto l0001A45C
	// succ:  l0001A45C
l0001A418:
	r4 = r9 * r8
	r6 = Mem0[r29 + 164<i32>:word32]
	Mem0[r29 + 256<i32>:word32] = r6
	r6 = r20 + r6
	r7 = Mem0[r29 + 248<i32>:word32]
	r6 = r6 * r7
	r7 = 0x40<32>
	r6 = r6 + r3 * r8
	r3 = 0x3F<32> + r4 * r5
	r4 = Mem0[r29 + 168<i32>:word32]
	r1 = r3 >> 0x1F<32>
	r6 = r4 + r6 * r9
	r3 = r3 + (r1 >>u 0x1A<32>)
	r3 = r3 >> 6<32>
	r3 = SEQ(SLICE(r7, word16, 0), SLICE(r3, word16, 0))
	r1_r0 = r7_r3
	__l2fetch<word32,word64>(r6, r1_r0)
	// succ:  l0001A45C
l0001A45C:
	branch p0 l0001A574
	// succ:  l0001A46C l0001A574
l0001A46C:
	r6 = r16
	r3 = Mem0[r29 - 92<i32>:word32]
	r20 = Mem0[r29 + 240<i32>:word32]
	p0 = r22 == 0<32>
	r16 = r6 + 0<32>
	r4 = Mem0[r29 + 248<i32>:word32]
	r7 = Mem0[r29 + 252<i32>:word32]
	r3 = r25 + r3
	r20 = r7
	r18 = r27 + 0<32>
	r5 = r3 * r4
	r3 = Mem0[r29 + 168<i32>:word32]
	r20 = r3 + r20 * r5
	branch p0 l0001A574
	// succ:  l0001A49C l0001A574
l0001A49C:
	r1 = r21 + r5
	r7 = 0x0002B110<p32>
	r0 = p2
	Mem0[r29 + 31<i32>:byte] = r0
	r4 = Mem0[r7 - 112<i32>:word32]
	r3 = Mem0[r7 - 32<i32>:word32]
	r6 = Mem0[r7 - 16<i32>:word32]
	r24 = Mem0[r7 - 64<i32>:word32]
	r0 = Mem0[r29 + 120<i32>:word32]
	p0 = r0
	branch p0 l0001A510
	// succ:  l0001A4E0 l0001A510
l0001A4E0:
	r7 = r17 - r2
	r6 = r2 + r21
	r8 = Mem0[r29 + 100<i32>:word32]
	r7 = Mem0[r29 + 252<i32>:word32]
	r2 = Mem0[r29 + 236<i32>:word32]
	r0 = Mem0[r29 + 240<i32>:word32]
	p0 = r8
	r24 = r6 + 0<32>
	r3 = r4 + 0<32>
	r6 = Mem0[r29 + 168<i32>:word32]
	r5_r4 = r17_r21
	r1 = r6 + r1 * r7
	call r24 (retsize: 0;)
	goto l0001A568
	// succ:  l0001A568
l0001A510:
	r3 = Mem0[r29 + 96<i32>:word32]
	Mem0[r29 + 8<i32>:byte] = r3
	r0 = Mem0[r29 + 232<i32>:word32]
	r2 = Mem0[r29 + 104<i32>:word64]
	Mem0[r29 + 28<i32>:word32] = r4
	Mem0[r29 + 24<i32>:word32] = r2
	Mem0[r29 + 20<i32>:word32] = r0
	r9 = Mem0[r29 + 228<i32>:word32]
	r8 = Mem0[r29 + 224<i32>:word32]
	r12 = Mem0[r29 + 252<i32>:word32]
	Mem0[r29 + 8<i32>:word32] = r9
	r5 = r5 + r6 * r9
	r8 = Mem0[r29 + 168<i32>:word32]
	Mem0[r29 + 4<i32>:word32] = r8
	r1 = Mem0[r29 + 108<i32>:word32]
	Mem0[r29:word32] = r25
	r4 = Mem0[r29 + 236<i32>:word32]
	Mem0[r29 + 16<i32>:word32] = r7
	r5 = r8 + r5 * r12
	r0 = Mem0[r29 + 240<i32>:word32]
	Mem0[r29 + 12<i32>:word32] = r6
	r3 = Mem0[r29 + 112<i32>:word64]
	r2 = Mem0[r29 + 116<i32>:word64]
	call fast_im2col_co (retsize: 0;)
	// succ:  l0001A568
l0001A568:
	r27 = r18
	r6 = r16
	r0 = Mem0[r29 + 124<i32>:word64]
	p2 = r0
	// succ:  l0001A574
l0001A574:
	r2 = Mem0[r29 + 248<i32>:word32]
	branch r2 == 0<32> l0001A59C
	// succ:  l0001A580 l0001A59C
l0001A580:
	r3 = Mem0[r29 + 244<i32>:word32]
	r1_r0 = Mem0[r29 + 136<i32>:word64]
	p0 = r3 > r2
	r2 = 0<32>
	r2 = r22 + 0<32>
	r2 = r27 + r2 * r6
	__l2fetch<word32,word64>(r2, r1_r0)
	// succ:  l0001A59C
l0001A59C:
	r24 = r22
	r2 = r6
	r16 = r6
	r18 = Mem0[r29 + 236<i32>:word32]
	r24 = r27 + r24 * r6
	r3 = 0<32> - r18
	call gvmsumb_asm (retsize: 0;)
	r1_r0 = r19_r24
	r7 = r18 * r16
	p0 = r22 == 0<32>
	r12 = Mem0[r29 + 228<i32>:word32]
	r13 = Mem0[r29 + 252<i32>:word32]
	r0 = r13 * r12
	r1 = r27 + 0<32>
	r7 = Mem0[r29 - 48<i32>:word32]
	r0 = r20 + r0 * r21
	branch p0 l0001A664
	// succ:  l0001A5EC l0001A664
l0001A5EC:
	r20 = r25 + 0<32>
	r20 = r25
	r2 = Mem0[r29 + 196<i32>:word32]
	Mem0[r29 + 10<i32>:byte] = r2
	r2 = Mem0[r29 + 208<i32>:word32]
	Mem0[r29 + 36<i32>:word32] = r5
	Mem0[r29 + 24<i32>:word32] = r2
	r4 = Mem0[r29 + 232<i32>:word32]
	r14 = Mem0[r29 + 132<i32>:word32]
	r6 = r21 * r4
	r8 = 0<32> - r14
	Mem0[r29 + 20<i32>:word32] = r19
	Mem0[r29 + 12<i32>:word32] = r17
	r3 = Mem0[r29 + 192<i32>:word32]
	r5 = Mem0[r29 + 244<i32>:word32]
	r12 = SEQ(SLICE(r12, word16, 0), SLICE(r3, word16, 0))
	r3 = r13
	r13 = Mem0[r29 + 224<i32>:word32]
	Mem0[r29 + 8<i32>:word32] = r20
	r9 = r6 * r5
	r2 = Mem0[r29 + 204<i32>:word32]
	Mem0[r29 + 4<i32>:word32] = r13
	r7 = r7 * r14
	r15 = Mem0[r29 + 184<i32>:word32]
	Mem0[r29:word32] = r12
	r6 = r15 + (r6 << 2<32>)
	r8 = Mem0[r29 + 216<i32>:word32]
	Mem0[r29 + 28<i32>:word32] = r8
	r2 = r2 + (r9 + r8)
	Mem0[r29 + 32<i32>:word32] = r7
	Mem0[r29 + 16<i32>:word32] = r6
	call gvconvsum2dbbb_asm (retsize: 0;)
	goto l0001A6CC
	// succ:  l0001A6CC
l0001A664:
	r2 = Mem0[r29 + 196<i32>:word32]
	Mem0[r29 + 8<i32>:byte] = r2
	r2 = Mem0[r29 + 188<i32>:word32]
	r6 = r21 * r4
	r7 = r2 + (r22 << 2<32>)
	r5 = Mem0[r29 + 244<i32>:word32]
	Mem0[r29 + 12<i32>:word32] = r17
	r8 = r6 * r5
	r3 = Mem0[r29 + 192<i32>:word32]
	Mem0[r29 + 8<i32>:word32] = r20
	r12 = SEQ(SLICE(r12, word16, 0), SLICE(r3, word16, 0))
	r3 = r13
	r1 = Mem0[r29 + 216<i32>:word32]
	r2 = Mem0[r29 + 204<i32>:word32]
	r9 = r22 + r1
	r1 = r24
	r13 = Mem0[r29 + 224<i32>:word32]
	Mem0[r29 + 1<i32>:byte] = r13
	r14 = Mem0[r29 + 184<i32>:word32]
	Mem0[r29 + 28<i32>:word32] = r7
	r6 = r14 + (r6 << 2<32>)
	Mem0[r29:word32] = r12
	call gvconv2dbbb_asm (retsize: 0;)
	Mem0[r29 + 16<i32>:word32] = r6
	// succ:  l0001A6CC
l0001A6CC:
	r21 = r17 + r21
	r25 = Mem0[r29 + 176<i32>:word32]
	r24 = Mem0[r29 + 180<i32>:word32]
	r26 = r26 - r25
	r6 = Mem0[r29 + 256<i32>:word32]
	r23 = r23 + 1<32>
	branch r23 == r24 l0001A370
	// succ:  l0001A6EC l0001A370
l0001A6EC:
	r22 = r22 + 0x20<32>
	branch r2 >u r22 l0001A358
	goto l0001A6F8
	// succ:  l0001A6F8 l0001A358
l0001A6F4:
	r2 = Mem0[r29 + 208<i32>:word32]
	r0 = Mem0[r29 + 68<i32>:word32]
	r18 = Mem0[r29 + 88<i32>:word32]
	p0 = r0
	branch p0 l0001A74C
	goto l0001A710
	// succ:  l0001A710 l0001A74C
l0001A6F8:
	r0 = Mem0[r29 + 68<i32>:word32]
	r18 = Mem0[r29 + 88<i32>:word32]
	p0 = r0
	branch p0 l0001A74C
	// succ:  l0001A710 l0001A74C
l0001A710:
	r17 = Mem0[r2:word32]
	r2 = Mem0[r29 - 24<i32>:word32]
	r3 = Mem0[r29 + 220<i32>:word32]
	r7 = Mem0[r29 + 76<i32>:word32]
	r0 = Mem0[r29 + 204<i32>:word32]
	r5 = Mem0[r29 + 64<i32>:word32]
	r1 = r25 * r2
	r3 = r3 * r2
	r2 = Mem0[r29 + 244<i32>:word32]
	r4 = r1
	r6 = r3 * r2
	r3 = r3 + r18 * r7
	r7 = Mem0[r29 + 216<i32>:word32]
	r0 = r0 + (r7 + r6)
	r6 = Mem0[r29 + 60<i32>:word32]
	r3 = r6 + r3 * r5
	call unpad2d_bytes (retsize: 0;)
	// succ:  l0001A74C
l0001A74C:
	r2 = Mem0[r29 + 84<i32>:word64]
	r7 = Mem0[r29 + 72<i32>:word64]
	r2 = max<int32>(r2, r17)
	r22 = Mem0[r29 + 116<i32>:word32]
	r17 = r2
	r18 = r18 + 1<32>
	Mem0[r16 + 8<i32>:word32] = r17
	r3_r2 = r1_r0
	r0 = r16 + 0x34<32>
	r1 = 1<32>
	r5_r4 = Mem0[r29 + 48<i32>:word64]
	r3_r2 = r3_r2 - r5_r4
	r19_r18 = Mem0[r29 + 296<i32>:word64]
	r21_r20 = Mem0[r29 + 288<i32>:word64]
	r23_r22 = Mem0[r29 + 280<i32>:word64]
	r25_r24 = Mem0[r29 + 272<i32>:word64]
	r17_r16 = Mem0[r29 + 304<i32>:word64]
	Mem0[r16 + 72<i32>:word64] = r3_r2
	goto l00009730
	// succ:  l00009730
supernode_execute_hvx_slice_exit:


// fmaxf.1.0
// Return size: 0
define fmaxf.1.0
fmaxf.1.0_entry:
	r29 = fp
	// succ:  l0001A7A8
l0001A7A8:
	r2 = 0x38D1B717<32>
	// succ:  l0001A7B0_thunk_fn00009600
l0001A7B0_thunk_fn00009600:
	call fn00009600 (retsize: 0;)
	return
	// succ:  fmaxf.1.0_exit
fmaxf.1.0_exit:


// avgpool_execute
// Return size: 0
define avgpool_execute
avgpool_execute_entry:
	r29 = fp
	// succ:  l0001A7C0
l0001A7C0:
	r21 = r0
	Mem0[r29 - 32<i32>:word64] = r21_r20
	v7 = r29 - 8<i32>
	Mem0[v7:word32] = r30
	Mem0[v7 + 4<i32>:word32] = r31
	r30 = v7
	r29 = v7 - 200<i32>
	r2 = Mem0[r21 + 4<i32>:word32]
	Mem0[r29 + 184<i32>:word64] = r19_r18
	r20 = Mem0[r21 + 32<i32>:int8]
	r3 = Mem0[r21 + 8<i32>:word32]
	Mem0[r29 + 192<i32>:word64] = r17_r16
	p0 = r20 == 0<32>
	r19 = Mem0[r2:word32]
	r17 = Mem0[r2 + 8<i32>:word32]
	r18 = Mem0[r2 + 4<i32>:word32]
	Mem0[r29 + 160<i32>:word64] = r25_r24
	r7 = Mem0[r19 + 8<i32>:word32]
	r23_r22 = r7_r1
	Mem0[r29 + 152<i32>:word64] = r27_r26
	Mem0[r29 + 168<i32>:word64] = r23_r22
	r0 = r7
	r16 = Mem0[r3:word32]
	r6 = Mem0[r17 + 4<i32>:word32]
	r1 = p0
	r24 = Mem0[r19:word32]
	r26 = Mem0[r17 + 8<i32>:word32]
	r2 = r26 + r23
	r25 = Mem0[r19 + 12<i32>:word32]
	r27 = Mem0[r19 + 4<i32>:word32]
	r3 = Mem0[r18 + 4<i32>:word32]
	Mem0[r29 + 72<i32>:word32] = r6
	r6 = Mem0[r18 + 8<i32>:word32]
	Mem0[r29 + 64<i32>:word32] = r3
	Mem0[r29 + 108<i32>:word32] = r6
	branch p0 l0001A84C
	// succ:  l0001A828 l0001A84C
l0001A828:
	Mem0[r29 + 144<i32>:word32] = r1
	p0 = r12 == 2<32>
	branch p0 l0001A848
	// succ:  l0001A830 l0001A848
l0001A830:
	r3 = Mem0[r29 + 108<i32>:word32]
	p0 = r12 == 1<32>
	branch p0 l0001A858
	// succ:  l0001A840 l0001A858
l0001A840:
	r2 = 0<32>
	Mem0[r29 + 31<i32>:byte] = r2
	r0 = r0 + (r23 + 0xFFFFFFFF<32>)
	goto l0001A84C
	// succ:  l0001A84C
l0001A848:
	r0 = r2 - r3
	// succ:  l0001A84C
l0001A84C:
	call fn00009760 (retsize: 0;)
	r1 = r26
	Mem0[r29 + 124<i32>:word32] = r0
	// succ:  l0001A858
l0001A858:
	p0 = r12 == 2<32>
	branch p0 l0001A894
	// succ:  l0001A860 l0001A894
l0001A860:
	p0 = r12 == 1<32>
	branch p0 l0001A888
	// succ:  l0001A86C l0001A888
l0001A86C:
	r0 = Mem0[r29 - 112<i32>:word32]
	r1 = Mem0[r29 + 72<i32>:word32]
	r2 = 0<32>
	Mem0[r29 + 17<i32>:byte] = r2
	branch p0 l0001A8AC
	// succ:  l0001A884 l0001A8AC
l0001A884:
	r0 = r27 + 0<32>
	r1 = Mem0[r29 + 72<i32>:word32]
	goto l0001A8A0
	// succ:  l0001A8A0
l0001A888:
	r0 = r1
	r0 = r0 + (r27 + 0xFFFFFFFF<32>)
	goto l0001A8A0
	// succ:  l0001A8A0
l0001A894:
	r1 = Mem0[r29 + 72<i32>:word64]
	r3 = Mem0[r29 + 64<i32>:word64]
	r2 = r1 + r27
	r0 = r2 - r3
	// succ:  l0001A8A0
l0001A8A0:
	call fn00009760 (retsize: 0;)
	Mem0[r29 + 68<i32>:word32] = r0
	r4 = 0x000288FF<p32>
	r1 = 0x50<32>
	r2 = r22
	goto l0001A8B8
	// succ:  l0001A8B8
l0001A8AC:
	r4 = 0x0001A8C3<p32>
	r1 = 0x50<32>
	r2 = r22
	// succ:  l0001A8B8
l0001A8B8:
	r7 = Mem0[r16 + 16<i32>:word32]
	r3 = Mem0[r19 + 16<i32>:word32]
	Mem0[r29 + 104<i32>:word32] = r7
	Mem0[r29 + 100<i32>:word32] = r3
	call logmsg_function (retsize: 0;)
	Mem0[r29:word32] = r21
	r2 = Mem0[r18:word32]
	branch r2 == 1<32> l0001A8E8
	// succ:  l0001A8D4 l0001A8E8
l0001A8D4:
	branch r2 == 1<32> l0001A8EC
	// succ:  l0001A8DC l0001A8EC
l0001A8DC:
	branch r2 == 1<32> l0001A8EC
	// succ:  l0001A8E4 l0001A8EC
l0001A8E4:
	branch r2 == 1<32> l0001A908
	goto l0001A8EC
	// succ:  l0001A8EC l0001A908
l0001A8E8:
	r3 = 0x0002891C<p32>
	r1 = 0x55<32>
	goto l0001A8F4
	// succ:  l0001A8F4
l0001A8EC:
	r3 = 0x0001A920<p32>
	r1 = 0x55<32>
	// succ:  l0001A8F4
l0001A8F4:
	call errlog_function (retsize: 0;)
	r2 = r22
	// succ:  l0001A8F8
l0001A8F8:
	goto l0001AC2C
	// succ:  l0001AC2C
l0001A908:
	r1 = 0x57<32>
	r3 = Mem0[r29 + 124<i32>:word64]
	r4 = Mem0[r29 + 68<i32>:word64]
	r2 = r2 * r3
	r7 = Mem0[r16 + 20<i32>:word32]
	r2 = r2 * r4
	r2 = r2 << 2<32>
	branch r2 >u r7 l0001A930
	// succ:  l0001A928 l0001A930
l0001A928:
	r3 = 0x0001A938<p32>
	goto l0001A8F8
	// succ:  l0001A8F8
l0001A930:
	p0 = r24 > 0<32>
	r3 = Mem0[r21 + 32<i32>:int8]
	branch r3 == 0<32> l0001A94C
	// succ:  l0001A940 l0001A94C
l0001A940:
	r3 = 0x0001A946<p32>
	goto l0001A8F8
	// succ:  l0001A8F8
l0001A94C:
	r20 = 0<32>
	r2 = Mem0[r29 + 68<i32>:word64]
	Mem0[r16 + 24<i32>:word32] = r2
	r26 = 0x3F800000<32>
	r7 = Mem0[r29 + 124<i32>:word32]
	Mem0[r29 + 128<i32>:word32] = r26
	Mem0[r29 + 12<i32>:word32] = r22
	Mem0[r29 + 16<i32>:word32] = r21
	Mem0[r16 + 4<i32>:word32] = r2
	Mem0[r16:word32] = r24
	Mem0[r16 + 8<i32>:word32] = r7
	branch p0 l0001AC0C
	// succ:  l0001A984 l0001AC0C
l0001A984:
	Mem0[r16 + 12<i32>:word32] = r25
	r18 = r23 * r25
	r2 = Mem0[r29 + 124<i32>:word64]
	r4 = Mem0[r29 + 68<i32>:word64]
	r8 = Mem0[r29 + 108<i32>:word32]
	r7 = Mem0[r29 + 64<i32>:word32]
	r2 = r2 + 0xFFFFFFFF<32>
	r4 = r4 + 0xFFFFFFFF<32>
	r6 = Mem0[r29 + 128<i32>:word32]
	r1 = Mem0[r29 + 72<i32>:word32]
	r3 = r8 - r23
	r5 = r7 - r27
	Mem0[r29 + 120<i32>:word32] = r23
	Mem0[r29 + 56<i32>:word32] = r27
	r2 = r3 + r2 * r6
	r4 = r5 + r4 * r1
	r3 = 0xFFFFFFFF<32> - r27
	r4 = r4 + (r4 >>u 0x1F<32>)
	r3 = 0xFFFFFFFF<32> - r23
	r6 = 0<32>
	Mem0[r29 + 48<i32>:word32] = r3
	r2 = r2 + (r2 >>u 0x1F<32>)
	r5 = r25 << 2<32>
	Mem0[r29 + 96<i32>:word32] = r3
	r6 = r4 >> 1<32>
	r3 = 0<32>
	Mem0[r29 + 60<i32>:word32] = r6
	Mem0[r29 + 92<i32>:word32] = r5
	r2 = r2 >> 1<32>
	r4 = 0<32> - r6
	Mem0[r29 + 32<i32>:word32] = r3
	Mem0[r29 + 44<i32>:word32] = r6
	r5 = r2 + (0x7F<32> - r8)
	r3 = r6 + (0x7F<32> - r7)
	r2 = 0<32> - r2
	Mem0[r29 + 88<i32>:word32] = r2
	Mem0[r29 + 24<i32>:word32] = r4
	Mem0[r29 + 20<i32>:word32] = r3
	Mem0[r29 + 40<i32>:word32] = r5
	Mem0[r29 + 36<i32>:word32] = r2
	// succ:  l0001AA08
l0001AA08:
	r2 = Mem0[r29 + 68<i32>:word32]
	Mem0[r29 + 28<i32>:word32] = r24
	p0 = r2 > 0<32>
	branch p0 l0001ABEC
	// succ:  l0001AA14 l0001ABEC
l0001AA14:
	r2 = Mem0[r29 + 24<i32>:word32]
	Mem0[r29 + 21<i32>:byte] = r2
	r3 = Mem0[r29 + 32<i32>:word64]
	r7 = Mem0[r29 + 20<i32>:word64]
	r2 = r3 * r2
	r7 = 0<32>
	Mem0[r29 + 80<i32>:word32] = r7
	Mem0[r29 + 52<i32>:word32] = r2
	Mem0[r29 + 76<i32>:word32] = r7
	// succ:  l0001AA30
l0001AA30:
	r2 = Mem0[r29 + 124<i32>:word32]
	branch r2 > 0<32> l0001ABC8
	// succ:  l0001AA3C l0001ABC8
l0001AA3C:
	r2 = Mem0[r29 + 72<i32>:word64]
	r5 = Mem0[r29 + 76<i32>:word64]
	r2 = r5 * r2
	r1 = Mem0[r29 + 48<i32>:word64]
	r7 = Mem0[r29 + 80<i32>:word64]
	r4 = Mem0[r29 + 52<i32>:word64]
	r3 = Mem0[r29 + 84<i32>:word64]
	r5 = max<int32>(r7, r1)
	r4 = r5 + r4
	r1 = 0<32>
	r7 = Mem0[r29 + 40<i32>:word64]
	r3 = max<int32>(r3, r6)
	r5 = 0xFFFFFFFF<32> - r5
	r1 = Mem0[r29 + 44<i32>:word32]
	Mem0[r29 + 132<i32>:word32] = r1
	r2 = r2 - r1
	r5 = Mem0[r29 + 124<i32>:word32]
	Mem0[r29 + 144<i32>:word32] = r5
	r4 = r4 * r5
	r7 = Mem0[r29 + 64<i32>:word32]
	Mem0[r29 + 136<i32>:word32] = r7
	r16 = max<int32>(r2, r6)
	r2 = r2 + r7
	r7 = Mem0[r29 + 56<i32>:word64]
	r27 = min<int32>(r7, r2)
	r1 = Mem0[r29 + 60<i32>:word64]
	Mem0[r29 + 116<i32>:word32] = r4
	r3 = r1 + r3
	r4 = Mem0[r29 + 120<i32>:word32]
	r3 = r4 * r3
	r0 = Mem0[r29 + 36<i32>:word32]
	Mem0[r29 + 35<i32>:byte] = r0
	// succ:  l0001AAA8
l0001AAA8:
	branch p0 l0001AB94
	// succ:  l0001AAB8 l0001AB94
l0001AAB8:
	p0 = r25 > 0<32>
	r3 = Mem0[r29 - 124<i32>:word32]
	r2 = Mem0[r29 - 128<i32>:word32]
	r7 = 0<32>
	r21 = 0<32>
	r1 = Mem0[r29 + 140<i32>:word32]
	r4 = Mem0[r29 + 116<i32>:word32]
	r2 = r3 * r2
	r3 = r3 + r4
	r5 = Mem0[r29 + 96<i32>:word32]
	r6 = Mem0[r29 + 136<i32>:word32]
	r4 = max<int32>(r1, r7)
	r3 = r3 * r25
	r1 = Mem0[r29 + 112<i32>:word64]
	r0 = Mem0[r29 + 88<i32>:word64]
	r5 = max<int32>(r6, r5)
	r6 = r1 + r4
	r19 = Mem0[r29 + 92<i32>:word64]
	r1 = Mem0[r29 + 100<i32>:word64]
	r2 = r2 - r0
	r5 = 0xFFFFFFFF<32> - r5
	r0 = Mem0[r29 + 108<i32>:word32]
	r24 = max<int32>(r2, r7)
	r19 = r1 + r19 * r6
	r7 = Mem0[r29 + 104<i32>:word64]
	r1 = Mem0[r29 + 120<i32>:word64]
	r23 = r7 + (r3 << 2<32>)
	r2 = r2 + r0
	r17 = r5 - r4
	r22 = min<int32>(r1, r2)
	// succ:  l0001AB14
l0001AB14:
	branch p0 l0001AB7C
	// succ:  l0001AB24 l0001AB7C
l0001AB24:
	r1_r0 = r20_r20
	p0 = r27 > r16
	r2 = Mem0[r29 - 112<i32>:word32]
	r1_r0 = r20_r20
	r3 = r2 - r16
	r2 = r19
	__loop(1<i32>, 0x0001AB34<p32>, r3)
	r3 = r2 + (r25 << 2<32>)
	branch p0 l0001AB70
	// succ:  l0001AB44 l0001AB70
l0001AB44:
	r5 = r17 + 0xFFFFFFFF<32>
	p0 = r22 > r24
	__loop(0<i32>, 0x0001AB58<p32>, r5)
	r1 = r1 + r26
	p0 = r17 >u 1<32>
	r4 = Mem0[r2:word32]
	branch p0 l0001AB6C
	// succ:  l0001AB58 l0001AB6C
l0001AB58:
	r0 = r0 + r4
	r1 = r1 + r26
	r4 = Mem0[r3:word32]
	r3 = r3 + (r25 << 2<32>)
	// succ:  l0001AB6C
l0001AB6C:
	r0 = r0 + r4
	// succ:  l0001AB70
l0001AB70:
	r2 = r2 + (r18 << 2<32>)
	// succ:  l0001AB7C
l0001AB7C:
	call fn00009610 (retsize: 0;)
	r21 = r21 + 1<32>
	r23 = r23 + 4<32>
	p0 = r21 == r25
	r19 = r19 + 4<32>
	Mem0[r23:word32] = r0
	branch p0 l0001AB14
	// succ:  l0001AB94 l0001AB14
l0001AB94:
	r4 = Mem0[r29 + 132<i32>:word32]
	r6 = Mem0[r29 + 124<i32>:word32]
	r4 = r4 + 1<32>
	r2 = Mem0[r29 + 128<i32>:word32]
	r3 = Mem0[r29 + 140<i32>:word32]
	r3 = r3 + r2
	p0 = r4 == r6
	r7 = Mem0[r29 + 136<i32>:word32]
	Mem0[r29 + 132<i32>:word32] = r4
	r5 = r7 - r2
	Mem0[r29 + 140<i32>:word32] = r3
	branch p0 l0001AAA8
	// succ:  l0001ABC8 l0001AAA8
l0001ABC8:
	Mem0[r29 + 136<i32>:word32] = r5
	r4 = Mem0[r29 + 76<i32>:word64]
	r6 = Mem0[r29 + 68<i32>:word64]
	r4 = r4 + 1<32>
	r2 = Mem0[r29 + 72<i32>:word64]
	r3 = Mem0[r29 + 84<i32>:word64]
	r3 = r3 + r2
	p0 = r4 == r6
	r7 = Mem0[r29 + 80<i32>:word64]
	Mem0[r29 + 76<i32>:word32] = r4
	r5 = r7 - r2
	branch p0 l0001AA30
	// succ:  l0001ABEC l0001AA30
l0001ABEC:
	r4 = Mem0[r29 + 32<i32>:word32]
	r24 = Mem0[r29 + 28<i32>:word32]
	r4 = r4 + 1<32>
	r2 = Mem0[r29 + 56<i32>:word64]
	r3 = Mem0[r29 + 60<i32>:word64]
	p0 = r4 == r24
	r3 = r3 + r2
	Mem0[r29 + 32<i32>:word32] = r4
	branch p0 l0001AA08
	// succ:  l0001AC0C l0001AA08
l0001AC0C:
	r4 = 0x00028954<p32>
	r2 = Mem0[r29 + 16<i32>:word32]
	Mem0[r29:byte] = r2
	r2 = Mem0[r29 + 12<i32>:word32]
	call logmsg_function (retsize: 0;)
	r0 = 0<32>
	// succ:  l0001AC2C
l0001AC2C:
	r17_r16 = Mem0[r29 + 192<i32>:word64]
	r19_r18 = Mem0[r29 + 184<i32>:word64]
	r21_r20 = Mem0[r29 + 176<i32>:word64]
	r23_r22 = Mem0[r29 + 168<i32>:word64]
	r25_r24 = Mem0[r29 + 160<i32>:word64]
	r27_r26 = Mem0[r29 + 152<i32>:word64]
	v36 = r30
	r31 = Mem0[v36 + 4<i32>:word32]
	r30 = Mem0[v36:word32]
	r29 = v36 + 8<i32>
	return
	// succ:  avgpool_execute_exit
avgpool_execute_exit:


// avgpool_check
// Return size: 0
define avgpool_check
avgpool_check_entry:
	r29 = fp
	// succ:  l0001AC40
l0001AC40:
	r4 = 0x00028874<p32>
	Mem0[r29 - 16<i32>:word64] = r17_r16
	v7 = r29 - 8<i32>
	Mem0[v7:word32] = r30
	Mem0[v7 + 4<i32>:word32] = r31
	r30 = v7
	r29 = v7 - 16<i32>
	r1 = 0x8C<32>
	r16 = r1
	r17 = r0
	call logmsg_function (retsize: 0;)
	r2 = r16
	Mem0[r29:word32] = r17
	r1 = 0x8D<32>
	r2 = Mem0[r17 + 16<i32>:word32]
	branch r2 == 3<32> l0001AC80
	// succ:  l0001AC6C l0001AC80
l0001AC6C:
	r3 = 0x0001AC91<p32>
	// succ:  l0001AC70
l0001AC70:
	call errlog_function (retsize: 0;)
	r2 = r16
	r0 = 0xFFFFFFFF<32>
	r17_r16 = Mem0[r29 + 8<i32>:word64]
	v16 = r30
	r31 = Mem0[v16 + 4<i32>:word32]
	r30 = Mem0[v16:word32]
	r29 = v16 + 8<i32>
	return
	// succ:  avgpool_check_exit
l0001AC80:
	r1 = 0x8E<32>
	r2 = Mem0[r17 + 20<i32>:word32]
	branch r2 == 1<32> l0001AC94
	// succ:  l0001AC90 l0001AC94
l0001AC90:
	r3 = Mem0[r17 + 4<i32>:word32]
	// succ:  l0001AC94
l0001AC94:
	r3 = 0x000288A4<p32>
	goto l0001AC70
	// succ:  l0001AC70
avgpool_check_exit:


// logmsg_function
// Return size: 0
define logmsg_function
logmsg_function_entry:
	r29 = fp
	// succ:  l0001AD08
l0001AD08:
	r3 = 2<32>
	v5 = r29 - 8<i32>
	Mem0[v5:word32] = r30
	Mem0[v5 + 4<i32>:word32] = r31
	r30 = v5
	r29 = v5 - 8<i32>
	r5 = Mem0[r2 + 16<i32>:word32]
	branch r3 >u r5 l0001AD2C
	// succ:  l0001AD18 l0001AD2C
l0001AD18:
	r0 = 0x0001AD19<p32>
	r3 = 2<32>
	r5 = r29 + 0x10<32>
	call logv (retsize: 0;)
	r6 = r29 + 0x10<32>
	Mem0[r29 + 1<i32>:byte] = r6
	// succ:  l0001AD20_thunk_errlog_function
l0001AD20_thunk_errlog_function:
	call errlog_function (retsize: 0;)
	return
	// succ:  logmsg_function_exit
l0001AD2C:
	v13 = r30
	r31 = Mem0[v13 + 4<i32>:word32]
	r30 = Mem0[v13:word32]
	r29 = v13 + 8<i32>
	return
	// succ:  logmsg_function_exit
logmsg_function_exit:


// errlog_function
// Return size: 0
define errlog_function
errlog_function_entry:
	r29 = fp
	// succ:  l0001AD30
l0001AD30:
	r0 = 0x00028855<p32>
	r4 = r3
	v8 = r29 - 8<i32>
	Mem0[v8:word32] = r30
	Mem0[v8 + 4<i32>:word32] = r31
	r30 = v8
	r29 = v8 - 8<i32>
	r3 = 0<32>
	r5 = r29 + 0x10<32>
	r6 = r29 + 0x10<32>
	Mem0[r29 + 1<i32>:byte] = r6
	v13 = r30
	r31 = Mem0[v13 + 4<i32>:word32]
	r30 = Mem0[v13:word32]
	r29 = v13 + 8<i32>
	return
	// succ:  errlog_function_exit
errlog_function_exit:


// biasadd_f_execute
// Return size: 0
define biasadd_f_execute
biasadd_f_execute_entry:
	r29 = fp
	// succ:  l0001AD60
l0001AD60:
	r3 = 0x000289E1<p32>
	Mem0[r29 - 16<i32>:word64] = r17_r16
	v7 = r29 - 8<i32>
	Mem0[v7:word32] = r30
	Mem0[v7 + 4<i32>:word32] = r31
	r30 = v7
	r29 = v7 - 56<i32>
	r17_r16 = r0_r1
	r1 = 0x45<32>
	r2 = Mem0[r17 + 4<i32>:word32]
	Mem0[r29 + 40<i32>:word64] = r19_r18
	Mem0[r29 + 32<i32>:word64] = r21_r20
	Mem0[r29 + 24<i32>:word64] = r23_r22
	r5 = Mem0[r2 + 4<i32>:word32]
	Mem0[r29 + 16<i32>:word64] = r25_r24
	Mem0[r29 + 8<i32>:word64] = r27_r26
	r4 = Mem0[r5 + 4<i32>:word32]
	branch r4 == 1<32> l0001AE30
	// succ:  l0001AD94 l0001AE30
l0001AD94:
	r3 = 0x0001ADA5<p32>
	r1 = 0x46<32>
	r4 = Mem0[r5:word32]
	branch r4 == 1<32> l0001AE30
	// succ:  l0001ADA8 l0001AE30
l0001ADA8:
	r3 = 0x0001ADE5<p32>
	r1 = 0x47<32>
	r4 = Mem0[r5 + 8<i32>:word32]
	branch r4 == 1<32> l0001AE30
	// succ:  l0001ADBC l0001AE30
l0001ADBC:
	r18 = Mem0[r3 + 12<i32>:word32]
	branch r18 == r4 l0001ADDC
	// succ:  l0001ADC8 l0001ADDC
l0001ADC8:
	r3 = 0x0001ADF0<p32>
	r1 = 0x49<32>
	Mem0[r29 + 4<i32>:word32] = r18
	r2 = r16
	Mem0[r29:word32] = r4
	goto l0001AE34
	// succ:  l0001AE34
l0001ADDC:
	r4 = 0x00028A04<p32>
	r23 = Mem0[r3:word32]
	r24 = Mem0[r3 + 4<i32>:word32]
	r1 = 0x4C<32>
	r2 = r16
	r22 = Mem0[r3 + 8<i32>:word32]
	r6 = Mem0[r17 + 8<i32>:word32]
	r7 = r23 * r24
	r20 = Mem0[r3 + 16<i32>:word32]
	r19 = Mem0[r5 + 16<i32>:word32]
	r25 = Mem0[r6:word32]
	r3 = r7 * r22
	r21 = Mem0[r25 + 16<i32>:word32]
	Mem0[r29:word32] = r17
	r3 = r3 * r18
	r26 = r3 << 2<32>
	call logmsg_function (retsize: 0;)
	r3 = 0x00028A1E<p32>
	r1 = 0x4D<32>
	r2 = Mem0[r25 + 20<i32>:word32]
	branch r26 >u r2 l0001AE40
	goto l0001AE34
	// succ:  l0001AE34 l0001AE40
l0001AE30:
	r2 = r16
	// succ:  l0001AE34
l0001AE34:
	call errlog_function (retsize: 0;)
	goto l0001AEE4
	// succ:  l0001AEE4
l0001AE40:
	r2 = r24 * r23
	Mem0[r25 + 24<i32>:word32] = r26
	Mem0[r25:word32] = r23
	r3 = r2 * r22
	Mem0[r25 + 4<i32>:word32] = r24
	Mem0[r25 + 12<i32>:word32] = r18
	Mem0[r25 + 8<i32>:word32] = r22
	__loop(1<i32>, 0x0001AE68<p32>, r3)
	p0 = r3 == 0<32>
	branch p0 l0001AEC8
	// succ:  l0001AE68 l0001AEC8
l0001AE68:
	r2 = 0<32>
	p0 = r10 == 0<32>
	branch p0 l0001AEBC
	// succ:  l0001AE74 l0001AEBC
l0001AE74:
	r5 = r19 + r2
	r6 = r20 + r2
	r7 = r18 + 0xFFFFFFFF<32>
	r3 = r2 + 4<32>
	p0 = r18 >u 1<32>
	r4 = r21 + r2
	r5 = Mem0[r5:word32]
	r6 = Mem0[r6:word32]
	__loop(0<i32>, 0x0001AE90<p32>, r7)
	branch p0 l0001AEB4
	// succ:  l0001AE90 l0001AEB4
l0001AE90:
	r5 = r6 + r5
	r6 = r20 + r3
	r1 = r19 + r3
	Mem0[r4:byte] = r5
	r4 = r21 + r3
	r5 = Mem0[r1:word32]
	r6 = Mem0[r6:word32]
	r3 = r7
	// succ:  l0001AEB4
l0001AEB4:
	r3 = r6 + r5
	Mem0[r4:byte] = r3
	goto l0001AEC0
	// succ:  l0001AEC0
l0001AEBC:
	r20 = r20 + (r18 << 2<32>)
	r21 = r21 + (r18 << 2<32>)
	goto l0001AEC8
	// succ:  l0001AEC8
l0001AEC0:
	r21 = r21 + (r18 << 2<32>)
	// succ:  l0001AEC8
l0001AEC8:
	r4 = 0x00028A2C<p32>
	r1 = 0x58<32>
	r2 = r16
	call logmsg_function (retsize: 0;)
	Mem0[r29:word32] = r17
	r0 = 0<32>
	// succ:  l0001AEE4
l0001AEE4:
	r17_r16 = Mem0[r29 + 48<i32>:word64]
	r19_r18 = Mem0[r29 + 40<i32>:word64]
	r21_r20 = Mem0[r29 + 32<i32>:word64]
	r23_r22 = Mem0[r29 + 24<i32>:word64]
	r25_r24 = Mem0[r29 + 16<i32>:word64]
	r27_r26 = Mem0[r29 + 8<i32>:word64]
	v34 = r30
	r31 = Mem0[v34 + 4<i32>:word32]
	r30 = Mem0[v34:word32]
	r29 = v34 + 8<i32>
	return
	// succ:  biasadd_f_execute_exit
biasadd_f_execute_exit:


// biasadd_check
// Return size: 0
define biasadd_check
biasadd_check_entry:
	r29 = fp
	// succ:  l0001AF00
l0001AF00:
	r4 = 0x00028983<p32>
	Mem0[r29 - 16<i32>:word64] = r17_r16
	v7 = r29 - 8<i32>
	Mem0[v7:word32] = r30
	Mem0[v7 + 4<i32>:word32] = r31
	r30 = v7
	r29 = v7 - 16<i32>
	r1 = 0x5E<32>
	r16 = r1
	r17 = r0
	call logmsg_function (retsize: 0;)
	r2 = r16
	Mem0[r29:word32] = r17
	r1 = 0x5F<32>
	r2 = Mem0[r17 + 16<i32>:word32]
	branch r2 == 2<32> l0001AF40
	// succ:  l0001AF2C l0001AF40
l0001AF2C:
	r3 = 0x0001AF60<p32>
	call errlog_function (retsize: 0;)
	r2 = r16
	// succ:  l0001AF34
l0001AF34:
	r0 = 0xFFFFFFFF<32>
	r17_r16 = Mem0[r29 + 8<i32>:word64]
	v16 = r30
	r31 = Mem0[v16 + 4<i32>:word32]
	r30 = Mem0[v16:word32]
	r29 = v16 + 8<i32>
	return
	// succ:  biasadd_check_exit
l0001AF40:
	r1 = 0x60<32>
	r2 = Mem0[r17 + 20<i32>:word32]
	branch r2 == 1<32> l0001AF58
	// succ:  l0001AF50 l0001AF58
l0001AF50:
	r3 = 0x0001AF77<p32>
	goto l0001AF34
	// succ:  l0001AF34
l0001AF58:
	r4 = 0x000289C8<p32>
	r1 = 0x61<32>
	r2 = r16
	call logmsg_function (retsize: 0;)
	Mem0[r29:word32] = r17
	r0 = 0<32>
	r17_r16 = Mem0[r29 + 8<i32>:word64]
	v17 = r30
	r31 = Mem0[v17 + 4<i32>:word32]
	r30 = Mem0[v17:word32]
	r29 = v17 + 8<i32>
	return
	// succ:  biasadd_check_exit
biasadd_check_exit:


// logmsg_function
// Return size: 0
define logmsg_function
logmsg_function_entry:
	r29 = fp
	// succ:  l0001AF78
l0001AF78:
	r3 = 2<32>
	v5 = r29 - 8<i32>
	Mem0[v5:word32] = r30
	Mem0[v5 + 4<i32>:word32] = r31
	r30 = v5
	r29 = v5 - 8<i32>
	r5 = Mem0[r2 + 16<i32>:word32]
	branch r3 >u r5 l0001AF9C
	// succ:  l0001AF88 l0001AF9C
l0001AF88:
	r0 = 0x0001AFA8<p32>
	r3 = 2<32>
	r5 = r29 + 0x10<32>
	call logv (retsize: 0;)
	r6 = r29 + 0x10<32>
	Mem0[r29 + 1<i32>:byte] = r6
	// succ:  l0001AF90_thunk_errlog_function
l0001AF90_thunk_errlog_function:
	call errlog_function (retsize: 0;)
	return
	// succ:  logmsg_function_exit
l0001AF9C:
	v13 = r30
	r31 = Mem0[v13 + 4<i32>:word32]
	r30 = Mem0[v13:word32]
	r29 = v13 + 8<i32>
	return
	// succ:  logmsg_function_exit
logmsg_function_exit:


// errlog_function
// Return size: 0
define errlog_function
errlog_function_entry:
	r29 = fp
	// succ:  l0001AFA0
l0001AFA0:
	r0 = 0x00028964<p32>
	r4 = r3
	v8 = r29 - 8<i32>
	Mem0[v8:word32] = r30
	Mem0[v8 + 4<i32>:word32] = r31
	r30 = v8
	r29 = v8 - 8<i32>
	r3 = 0<32>
	r5 = r29 + 0x10<32>
	r6 = r29 + 0x10<32>
	Mem0[r29 + 1<i32>:byte] = r6
	v13 = r30
	r31 = Mem0[v13 + 4<i32>:word32]
	r30 = Mem0[v13:word32]
	r29 = v13 + 8<i32>
	return
	// succ:  errlog_function_exit
errlog_function_exit:


// concat_execute
// Return size: 0
define concat_execute
concat_execute_entry:
	r29 = fp
	// succ:  l0001AFE0
l0001AFE0:
	r4 = 0x00028AC2<p32>
	Mem0[r29 - 40<i32>:word64] = r23_r22
	v7 = r29 - 8<i32>
	Mem0[v7:word32] = r30
	Mem0[v7 + 4<i32>:word32] = r31
	r30 = v7
	r29 = v7 - 64<i32>
	r23 = r0
	r21 = Mem0[r23 + 4<i32>:word32]
	Mem0[r29 + 40<i32>:word64] = r21_r20
	r3 = Mem0[r23 + 8<i32>:word32]
	r25 = r1
	r1 = 0x45<32>
	Mem0[r29 + 48<i32>:word64] = r19_r18
	Mem0[r29 + 24<i32>:word64] = r25_r24
	r2 = r25
	r5 = Mem0[r21 + 4<i32>:word32]
	r18 = Mem0[r3:word32]
	Mem0[r29 + 56<i32>:word64] = r17_r16
	Mem0[r29 + 16<i32>:word64] = r27_r26
	r16 = Mem0[r23 + 16<i32>:word32]
	r17 = Mem0[r21:word32]
	r19 = Mem0[r5 + 8<i32>:word32]
	r20 = Mem0[r5 + 4<i32>:word32]
	r27 = Mem0[r5:word32]
	r22 = Mem0[r18 + 16<i32>:word32]
	call logmsg_function (retsize: 0;)
	Mem0[r29:word32] = r23
	r2 = Mem0[r17 + 16<i32>:word32]
	r2 = Mem0[r2:word32]
	branch r2 == 3<32> l0001B10C
	// succ:  l0001B040 l0001B10C
l0001B040:
	r24 = r21 + 4<32>
	r23 = r16
	Mem0[r29 + 12<i32>:word32] = r23
	r26 = 0<32>
	p0 = r23 > 0<32>
	r2 = 0<32>
	r5_r4 = 2<64>
	r17 = r3 * r27
	branch p0 l0001B128
	// succ:  l0001B064 l0001B128
l0001B064:
	r26 = 0<32>
	r3 = r24 + 0<32>
	r27 = 0<32>
	Mem0[r29 + 8<i32>:word32] = r25
	Mem0[r18:word32] = r27
	Mem0[r18 + 4<i32>:word32] = r20
	Mem0[r18 + 8<i32>:word32] = r19
	Mem0[r18 + 12<i32>:word32] = r26
	Mem0[r18 + 24<i32>:word32] = r2
	branch p0 l0001B0D8
	// succ:  l0001B080 l0001B0D8
l0001B080:
	r18 = r22
	r25 = r17
	p0 = r17 > 0<32>
	r16 = Mem0[r24:word32]
	branch p0 l0001B0C0
	// succ:  l0001B098 l0001B0C0
l0001B098:
	r20 = Mem0[r16 + 16<i32>:word32]
	r2 = Mem0[r16 + 12<i32>:word32]
	r19 = r2 << 2<32>
	// succ:  l0001B0A0
l0001B0A0:
	call fn00009560 (retsize: 0;)
	r2 = r19
	r1_r0 = r20_r18
	r18 = r18 + (r26 << 2<32>)
	r2 = Mem0[r16 + 12<i32>:word32]
	r20 = r20 + (r2 << 2<32>)
	r25 = r25 + 0xFFFFFFFF<32>
	branch r25 == 0<32> l0001B0A0
	goto l0001B0C4
	// succ:  l0001B0C4 l0001B0A0
l0001B0C0:
	r22 = r22 + (r2 << 2<32>)
	r3 = r21 + 8<32>
	r21 = r24
	goto l0001B0CC
	// succ:  l0001B0CC
l0001B0C4:
	r3 = r21 + 8<32>
	r21 = r24
	// succ:  l0001B0CC
l0001B0CC:
	r24 = r3
	r27 = r27 + 1<32>
	branch r27 == r23 l0001B080
	goto l0001B0DC
	// succ:  l0001B0DC l0001B080
l0001B0D8:
	r4 = 0x00028B42<p32>
	r2 = Mem0[r29 + 12<i32>:word32]
	Mem0[r29:byte] = r2
	goto l0001B0EC
	// succ:  l0001B0EC
l0001B0DC:
	r4 = 0x0001B106<p32>
	r2 = Mem0[r29 + 12<i32>:word32]
	Mem0[r29:byte] = r2
	// succ:  l0001B0EC
l0001B0EC:
	r2 = Mem0[r29 + 8<i32>:word32]
	call logmsg_function (retsize: 0;)
	r0 = 0<32>
	// succ:  l0001B0F8
l0001B0F8:
	r17_r16 = Mem0[r29 + 56<i32>:word64]
	r19_r18 = Mem0[r29 + 48<i32>:word64]
	r21_r20 = Mem0[r29 + 40<i32>:word64]
	r23_r22 = Mem0[r29 + 32<i32>:word64]
	r25_r24 = Mem0[r29 + 24<i32>:word64]
	r27_r26 = Mem0[r29 + 16<i32>:word64]
	v36 = r30
	r31 = Mem0[v36 + 4<i32>:word32]
	r30 = Mem0[v36:word32]
	r29 = v36 + 8<i32>
	return
	// succ:  concat_execute_exit
l0001B10C:
	r3 = 0x00028ADB<p32>
	r1 = 0x46<32>
	// succ:  l0001B118
l0001B118:
	call errlog_function (retsize: 0;)
	r2 = r25
	// succ:  l0001B11C
l0001B11C:
	goto l0001B0F8
	// succ:  l0001B0F8
l0001B128:
	__loop(0<i32>, 0x0001B12C<p32>, r23)
	r6 = Mem0[r3:word32]
	r7 = Mem0[r6 + 8<i32>:word32]
	branch r7 == r19 l0001B14C
	// succ:  l0001B13C l0001B14C
l0001B13C:
	r3 = 0x0001B16A<p32>
	r1 = 0x49<32>
	Mem0[r29:word32] = r2
	goto l0001B118
	// succ:  l0001B118
l0001B14C:
	r7 = Mem0[r6 + 4<i32>:word32]
	branch r7 == r20 l0001B168
	// succ:  l0001B158 l0001B168
l0001B158:
	r3 = 0x0001B183<p32>
	r1 = 0x4C<32>
	Mem0[r29:word32] = r2
	goto l0001B118
	// succ:  l0001B118
l0001B168:
	r7 = Mem0[r6:word32]
	branch r7 == r27 l0001B184
	// succ:  l0001B174 l0001B184
l0001B174:
	r3 = 0x0001B19D<p32>
	r1 = 0x4F<32>
	Mem0[r29:word32] = r2
	goto l0001B118
	// succ:  l0001B118
l0001B184:
	r7 = r5 + 8<32>
	r2 = r2 + 1<32>
	r5 = r3
	r6 = Mem0[r6 + 12<i32>:word32]
	r3 = r7
	r26 = r6 + r26
	r4 = r4 + r17 * r6
	r3 = Mem0[r18 + 20<i32>:word32]
	r2 = r4 << 2<32>
	branch r2 >u r3 l0001B064
	// succ:  l0001B1B0 l0001B064
l0001B1B0:
	r3 = 0x0001B1B8<p32>
	goto l0001B11C
	// succ:  l0001B11C
concat_execute_exit:


// concat_check
// Return size: 0
define concat_check
concat_check_entry:
	r29 = fp
	// succ:  l0001B1C0
l0001B1C0:
	r4 = 0x00028A5A<p32>
	Mem0[r29 - 16<i32>:word64] = r17_r16
	v7 = r29 - 8<i32>
	Mem0[v7:word32] = r30
	Mem0[v7 + 4<i32>:word32] = r31
	r30 = v7
	r29 = v7 - 16<i32>
	r1 = 0x6A<32>
	r16 = r1
	r17 = r0
	call logmsg_function (retsize: 0;)
	r2 = r16
	Mem0[r29:word32] = r17
	r3 = 0x00028A72<p32>
	r1 = 0x6B<32>
	r2 = Mem0[r17 + 16<i32>:word32]
	r4 = 4<32>
	branch r4 >u r2 l0001B24C
	// succ:  l0001B1F8 l0001B24C
l0001B1F8:
	r3 = 0x0001B207<p32>
	r1 = 0x6C<32>
	r4 = Mem0[r17 + 20<i32>:word32]
	branch r4 == 1<32> l0001B24C
	// succ:  l0001B20C l0001B24C
l0001B20C:
	r4 = Mem0[r17 + 4<i32>:word32]
	r4 = r4 + 4<32>
	r5 = r5 + 1<32>
	branch r2 >u r5 l0001B234
l0001B214:
	r5 = r5 + 1<32>
	branch r2 >u r5 l0001B238
	// succ:  l0001B220 l0001B234 l0001B238
l0001B220:
	r3 = 0x0001B257<p32>
	r6 = Mem0[r4:word32]
	branch r6 == 0<32> l0001B214
	// succ:  l0001B230 l0001B214
l0001B230:
	r1 = 0x6E<32>
	// succ:  l0001B234
l0001B234:
	r3 = 0x00028A9E<p32>
	r1 = 0x71<32>
	r2 = Mem0[r17 + 8<i32>:word32]
	// succ:  l0001B238
l0001B238:
	r2 = Mem0[r2:word32]
	branch r2 == 0<32> l0001B25C
	goto l0001B250
	// succ:  l0001B250 l0001B25C
l0001B24C:
	call errlog_function (retsize: 0;)
	r2 = r16
	r0 = 0xFFFFFFFF<32>
	r17_r16 = Mem0[r29 + 8<i32>:word64]
	v18 = r30
	r31 = Mem0[v18 + 4<i32>:word32]
	r30 = Mem0[v18:word32]
	r29 = v18 + 8<i32>
	return
	// succ:  concat_check_exit
l0001B250:
	r2 = r16
	r0 = 0xFFFFFFFF<32>
	r17_r16 = Mem0[r29 + 8<i32>:word64]
	v19 = r30
	r31 = Mem0[v19 + 4<i32>:word32]
	r30 = Mem0[v19:word32]
	r29 = v19 + 8<i32>
	return
	// succ:  concat_check_exit
l0001B25C:
	r4 = 0x00028AAA<p32>
	r1 = 0x73<32>
	r2 = r16
	call logmsg_function (retsize: 0;)
	Mem0[r29:word32] = r17
	r0 = 0<32>
	r17_r16 = Mem0[r29 + 8<i32>:word64]
	v20 = r30
	r31 = Mem0[v20 + 4<i32>:word32]
	r30 = Mem0[v20:word32]
	r29 = v20 + 8<i32>
	return
	// succ:  concat_check_exit
concat_check_exit:


// logmsg_function
// Return size: 0
define logmsg_function
logmsg_function_entry:
	r29 = fp
	// succ:  l0001B27C
l0001B27C:
	r3 = 2<32>
	v5 = r29 - 8<i32>
	Mem0[v5:word32] = r30
	Mem0[v5 + 4<i32>:word32] = r31
	r30 = v5
	r29 = v5 - 8<i32>
	r5 = Mem0[r2 + 16<i32>:word32]
	branch r3 >u r5 l0001B2A0
	// succ:  l0001B28C l0001B2A0
l0001B28C:
	r0 = 0x0001B2C0<p32>
	r3 = 2<32>
	r5 = r29 + 0x10<32>
	call logv (retsize: 0;)
	r6 = r29 + 0x10<32>
	Mem0[r29 + 1<i32>:byte] = r6
	// succ:  l0001B294_thunk_errlog_function
l0001B294_thunk_errlog_function:
	call errlog_function (retsize: 0;)
	return
	// succ:  logmsg_function_exit
l0001B2A0:
	v13 = r30
	r31 = Mem0[v13 + 4<i32>:word32]
	r30 = Mem0[v13:word32]
	r29 = v13 + 8<i32>
	return
	// succ:  logmsg_function_exit
logmsg_function_exit:


// errlog_function
// Return size: 0
define errlog_function
errlog_function_entry:
	r29 = fp
	// succ:  l0001B2A4
l0001B2A4:
	r0 = 0x00028A3C<p32>
	r4 = r3
	v8 = r29 - 8<i32>
	Mem0[v8:word32] = r30
	Mem0[v8 + 4<i32>:word32] = r31
	r30 = v8
	r29 = v8 - 8<i32>
	r3 = 0<32>
	r5 = r29 + 0x10<32>
	r6 = r29 + 0x10<32>
	Mem0[r29 + 1<i32>:byte] = r6
	v13 = r30
	r31 = Mem0[v13 + 4<i32>:word32]
	r30 = Mem0[v13:word32]
	r29 = v13 + 8<i32>
	return
	// succ:  errlog_function_exit
errlog_function_exit:


// conv2d_f_execute_ref
// Return size: 0
define conv2d_f_execute_ref
conv2d_f_execute_ref_entry:
	r29 = fp
	// succ:  l0001B2D0
l0001B2D0:
	v4 = r29 - 8<i32>
	Mem0[v4:word32] = r30
	Mem0[v4 + 4<i32>:word32] = r31
	r30 = v4
	r29 = v4 - 120<i32>
	r2 = Mem0[r0 + 4<i32>:word32]
	r3 = Mem0[r0 + 8<i32>:word32]
	Mem0[r29 + 104<i32>:word64] = r19_r18
	Mem0[r29 + 112<i32>:word64] = r17_r16
	r18 = Mem0[r0 + 32<i32>:int8]
	r16 = Mem0[r2:word32]
	p0 = r18 == 0<32>
	r19 = Mem0[r2 + 4<i32>:word32]
	r4 = Mem0[r2 + 8<i32>:word32]
	r24 = Mem0[r16 + 8<i32>:word32]
	Mem0[r29 + 80<i32>:word64] = r25_r24
	Mem0[r29 + 72<i32>:word64] = r27_r26
	Mem0[r29 + 96<i32>:word64] = r21_r20
	Mem0[r29 + 88<i32>:word64] = r23_r22
	r0 = r24
	r21 = Mem0[r3:word32]
	Mem0[r29 + 44<i32>:word32] = r0
	r2 = Mem0[r16:word32]
	r3 = Mem0[r4 + 8<i32>:word32]
	Mem0[r29 + 28<i32>:word32] = r4
	r26 = Mem0[r19 + 4<i32>:word32]
	r27 = Mem0[r19:word32]
	r25 = Mem0[r19 + 12<i32>:word32]
	r23 = Mem0[r16 + 12<i32>:word32]
	r17 = Mem0[r16 + 4<i32>:word32]
	r4 = Mem0[r4 + 4<i32>:word32]
	r2 = p0
	r7 = Mem0[r19 + 8<i32>:word32]
	Mem0[r29 + 20<i32>:word32] = r2
	r2 = r24 - r26
	Mem0[r29 + 48<i32>:word32] = r7
	Mem0[r29 + 56<i32>:word32] = r2
	branch p0 l0001B35C
	// succ:  l0001B338 l0001B35C
l0001B338:
	p0 = r10 == 2<32>
	branch p0 l0001B35C
	// succ:  l0001B340 l0001B35C
l0001B340:
	r0 = r2 + r3
	r0 = 0<32>
	p0 = r18 == 1<32>
	r20 = r1
	Mem0[r29 + 60<i32>:word32] = r3
	branch p0 l0001B370
	// succ:  l0001B350 l0001B370
l0001B350:
	r1 = r20
	r3 = Mem0[r29 + 60<i32>:word64]
	r0 = r3
	r0 = r0 + (r24 + 0xFFFFFFFF<32>)
	// succ:  l0001B35C
l0001B35C:
	r1 = r3
	r22 = r4
	r20 = r1
	Mem0[r29 + 60<i32>:word32] = r3
	call fn00009760 (retsize: 0;)
	r4 = r22
	// succ:  l0001B370
l0001B370:
	p0 = r10 == 2<32>
	branch p0 l0001B3A4
	// succ:  l0001B378 l0001B3A4
l0001B378:
	r2 = r17 - r27
	p0 = r10 == 1<32>
	branch p0 l0001B39C
	// succ:  l0001B384 l0001B39C
l0001B384:
	r1_r0 = r4_r4
	Mem0[r29 + 64<i32>:word32] = r0
	r18 = r4
	r0 = 0<32>
	r1 = Mem0[r29 + 56<i32>:word64]
	p0 = r1
	branch p0 l0001B3B4
	// succ:  l0001B398 l0001B3B4
l0001B398:
	r1_r0 = r18_r17
	goto l0001B3B0
	// succ:  l0001B3B0
l0001B39C:
	r0 = r0 + (r17 + 0xFFFFFFFF<32>)
	goto l0001B3AC
	// succ:  l0001B3AC
l0001B3A4:
	r0 = r2 + r4
	r1 = r4
	Mem0[r29 + 64<i32>:word32] = r0
	// succ:  l0001B3AC
l0001B3AC:
	r18 = r4
	// succ:  l0001B3B0
l0001B3B0:
	call fn00009760 (retsize: 0;)
	// succ:  l0001B3B4
l0001B3B4:
	r4 = 0x00028C08<p32>
	r2 = Mem0[r19 + 16<i32>:word32]
	r22 = Mem0[r29 + 44<i32>:word64]
	r1 = 0x5E<32>
	r19_r18 = r18_r20
	Mem0[r29 + 36<i32>:word32] = r18
	r2 = r18
	r7 = Mem0[r21 + 16<i32>:word32]
	Mem0[r29 + 56<i32>:word32] = r2
	r3 = Mem0[r22 + 28<i32>:word32]
	r16 = Mem0[r16 + 16<i32>:word32]
	Mem0[r29 + 4<i32>:word32] = r3
	Mem0[r29 + 40<i32>:word32] = r0
	Mem0[r29 + 32<i32>:word32] = r21
	Mem0[r29 + 52<i32>:word32] = r7
	call logmsg_function (retsize: 0;)
	Mem0[r29:word32] = r22
	r4 = 0x00028C26<p32>
	r1 = 0x5F<32>
	Mem0[r29 + 12<i32>:word32] = r23
	r2 = r18
	Mem0[r29 + 4<i32>:word32] = r17
	r21 = Mem0[r29 + 20<i32>:word32]
	Mem0[r29 + 8<i32>:word32] = r24
	call logmsg_function (retsize: 0;)
	Mem0[r29:word32] = r21
	r4 = 0x00028C3F<p32>
	r2 = r18
	r20 = Mem0[r29 + 48<i32>:word64]
	r1 = 0x60<32>
	Mem0[r29 + 12<i32>:word32] = r20
	Mem0[r29 + 8<i32>:word32] = r26
	Mem0[r29 + 4<i32>:word32] = r27
	call logmsg_function (retsize: 0;)
	Mem0[r29:word32] = r25
	r4 = 0x00028C57<p32>
	r2 = r18
	r3 = Mem0[r29 + 60<i32>:word64]
	r1 = 0x61<32>
	Mem0[r29 + 4<i32>:word32] = r3
	call logmsg_function (retsize: 0;)
	Mem0[r29:word32] = r19
	r4 = 0x00028C6B<p32>
	r1 = 0x62<32>
	r2 = r18
	r3 = Mem0[r22 + 32<i32>:byte]
	r22 = Mem0[r29 + 40<i32>:word32]
	call logmsg_function (retsize: 0;)
	Mem0[r29:word32] = r3
	r4 = 0x00028C7D<p32>
	Mem0[r29 + 12<i32>:word32] = r25
	Mem0[r29:word32] = r21
	r1 = 0x63<32>
	r19 = Mem0[r29 + 64<i32>:word32]
	r2 = r18
	Mem0[r29 + 8<i32>:word32] = r19
	Mem0[r29 + 4<i32>:word32] = r22
	call logmsg_function (retsize: 0;)
	r2 = r21 * r25
	p0 = r15 == r12
	branch p0 l0001B4B0
	// succ:  l0001B49C l0001B4B0
l0001B49C:
	r15 = r19
	r3 = 0x00028C9C<p32>
	r1 = 0x65<32>
	r2 = r18
	goto l0001B504
	// succ:  l0001B504
l0001B4B0:
	r9 = r22
	r6 = r21
	r3 = Mem0[r29 + 32<i32>:word64]
	r5 = r3
	Mem0[r29 + 16<i32>:word32] = r18
	r2 = r2 * r19
	r4 = Mem0[r3 + 20<i32>:word32]
	r2 = r2 * r22
	r2 = r2 << 2<32>
	branch r2 >u r4 l0001B4E8
	// succ:  l0001B4D4 l0001B4E8
l0001B4D4:
	r3 = 0x0001B4F5<p32>
	r1 = 0x67<32>
	Mem0[r29 + 4<i32>:word32] = r2
	r2 = Mem0[r29 + 16<i32>:word64]
	Mem0[r29:word32] = r4
	goto l0001B504
	// succ:  l0001B504
l0001B4E8:
	r4 = Mem0[r29 + 28<i32>:word32]
	r3 = Mem0[r4:word32]
	branch r3 == 1<32> l0001B510
	// succ:  l0001B4F8 l0001B510
l0001B4F8:
	r3 = 0x0001B50F<p32>
	r1 = 0x69<32>
	r2 = Mem0[r29 + 16<i32>:word32]
	// succ:  l0001B504
l0001B504:
	call errlog_function (retsize: 0;)
	goto l0001B728
	// succ:  l0001B728
l0001B510:
	p0 = r6 > 0<32>
	r3 = Mem0[r4 + 12<i32>:word32]
	branch r3 == 1<32> l0001B52C
	// succ:  l0001B520 l0001B52C
l0001B520:
	r3 = 0x0001B520<p32>
	goto l0001B504
	// succ:  l0001B504
l0001B52C:
	r2 = r15 + 0xFFFFFFFF<32>
	r3 = r26 - r24
	Mem0[r5 + 24<i32>:word32] = r2
	Mem0[r5 + 4<i32>:word32] = r9
	r7 = r9 + 0xFFFFFFFF<32>
	r4 = r27 - r17
	Mem0[r5:word32] = r6
	Mem0[r5 + 8<i32>:word32] = r15
	branch p0 l0001B704
	// succ:  l0001B554 l0001B704
l0001B554:
	Mem0[r5 + 12<i32>:word32] = r25
	r5 = Mem0[r29 + 60<i32>:word64]
	r6 = Mem0[r29 + 36<i32>:word64]
	r2 = r3 + r2 * r5
	r7 = r4 + r7 * r6
	r3 = 0<32>
	Mem0[r29 + 6<i32>:byte] = r3
	r3 = r23 * r25
	r4 = 0<32>
	r2 = r2 + (r2 >>u 0x1F<32>)
	r7 = r7 + (r7 >>u 0x1F<32>)
	r5 = r5 * r25
	r6 = r7 >> 1<32>
	r2 = r2 >> 1<32>
	Mem0[r29 + 12<i32>:byte] = r2
	// succ:  l0001B594
l0001B594:
	branch p0 l0001B6F4
	// succ:  l0001B59C l0001B6F4
l0001B59C:
	p0 = r9 > 0<32>
	r7 = 0<32>
	r2 = Mem0[r29 + 24<i32>:word32]
	Mem0[r29 + 11<i32>:byte] = r7
	r2 = r2 * r9
	Mem0[r29 + 8<i32>:byte] = r2
	// succ:  l0001B5B4
l0001B5B4:
	r13 = 0<32>
	p0 = r15 > 0<32>
	r2 = Mem0[r29 + 36<i32>:word64]
	r7 = Mem0[r29 + 44<i32>:word64]
	r6 = Mem0[r29 + 32<i32>:word64]
	r0 = Mem0[r29 + 28<i32>:word64]
	r2 = r7 * r2
	r7 = r7 + r6
	r1 = r7 * r15
	r14 = r2 - r0
	Mem0[r29 + 16<i32>:byte] = r1
	// succ:  l0001B5DC
l0001B5DC:
	p0 = r25 > 0<32>
	r28 = Mem0[r29 + 56<i32>:word32]
	r0 = 0<32>
	r6 = Mem0[r29 + 60<i32>:word64]
	r2 = Mem0[r29 + 64<i32>:word64]
	r2 = r13 + r2
	r7 = r13 * r6
	r2 = r2 * r25
	r6 = Mem0[r29 + 48<i32>:word32]
	r1 = r7 - r6
	r6 = Mem0[r29 + 52<i32>:word32]
	r10 = r6 + (r2 << 2<32>)
	// succ:  l0001B60C
l0001B60C:
	r11 = r4
	r9 = r28
	r7 = 0<32>
	p0 = r27 > 0<32>
	branch p0 l0001B6BC
	// succ:  l0001B620 l0001B6BC
l0001B620:
	r2 = r7 + r14
	branch r17 >u r2 l0001B6B0
	// succ:  l0001B62C l0001B6B0
l0001B62C:
	r21 = 0<32>
	r12 = r2 + r8
	branch p0 l0001B6B0
	// succ:  l0001B640 l0001B6B0
l0001B640:
	p0 = r26 > 0<32>
	r2 = r9 + 0<32>
	__loop(1<i32>, 0x0001B648<p32>, r26)
	r18 = r12 * r24
	r12 = r21 + r1
	branch r24 >u r12 l0001B6A4
	// succ:  l0001B654 l0001B6A4
l0001B654:
	p0 = r12 > 0xFFFFFFFF<32>
	r6 = r23 + 0xFFFFFFFF<32>
	p0 = r15 > 0<32>
	branch p0 l0001B6A4
	// succ:  l0001B664 l0001B6A4
l0001B664:
	r12 = r12 + r18
	p0 = r23 >u 1<32>
	r22 = Mem0[r2:word32]
	__loop(0<i32>, 0x0001B688<p32>, r6)
	r12 = r12 * r23
	r19 = r16 + (r12 << 2<32>)
	r12 = r2 + (r25 << 2<32>)
	r20 = r19 + 4<32>
	r19 = Mem0[r19:word32]
	branch p0 l0001B6A0
	// succ:  l0001B688 l0001B6A0
l0001B688:
	r11 = r11 + r19 * r22
	r12 = r12 + (r25 << 2<32>)
	r19 = Mem0[r20:word32]
	r22 = Mem0[r12:word32]
	r20 = r20 + 4<32>
	// succ:  l0001B6A0
l0001B6A0:
	r11 = r11 + r19 * r22
	// succ:  l0001B6A4
l0001B6A4:
	r2 = r2 + (r3 << 2<32>)
	r21 = r21 + 1<32>
	// succ:  l0001B6B0
l0001B6B0:
	r9 = r9 + (r5 << 2<32>)
	r7 = r7 + 1<32>
	branch r7 == r27 l0001B620
	goto l0001B6C0
	// succ:  l0001B6C0 l0001B620
l0001B6BC:
	r0 = r0 + 1<32>
	r28 = r28 + 4<32>
	r10 = r10 + 4<32>
	Mem0[r10:word32] = r11
	goto l0001B6CC
	// succ:  l0001B6CC
l0001B6C0:
	r28 = r28 + 4<32>
	r10 = r10 + 4<32>
	Mem0[r10:word32] = r11
	// succ:  l0001B6CC
l0001B6CC:
	branch p0 l0001B60C
	// succ:  l0001B6D4 l0001B60C
l0001B6D4:
	p0 = r0 == r25
	r13 = r13 + 1<32>
	branch r13 == r15 l0001B5DC
	// succ:  l0001B6E0 l0001B5DC
l0001B6E0:
	r9 = Mem0[r29 + 40<i32>:word32]
	r2 = r2 + 1<32>
	branch p0 l0001B5B4
	// succ:  l0001B6F4 l0001B5B4
l0001B6F4:
	r2 = Mem0[r29 + 24<i32>:word64]
	r6 = Mem0[r29 + 20<i32>:word64]
	r2 = r2 + 1<32>
	p0 = r2 == r6
	branch p0 l0001B594
	// succ:  l0001B704 l0001B594
l0001B704:
	r4 = 0x00028CED<p32>
	r1 = 0x93<32>
	Mem0[r29 + 12<i32>:word32] = r25
	r2 = Mem0[r29 + 16<i32>:word64]
	Mem0[r29:word32] = r6
	Mem0[r29 + 8<i32>:word32] = r15
	Mem0[r29 + 4<i32>:word32] = r9
	call logmsg_function (retsize: 0;)
	r0 = 0<32>
	// succ:  l0001B728
l0001B728:
	r17_r16 = Mem0[r29 + 112<i32>:word64]
	r19_r18 = Mem0[r29 + 104<i32>:word64]
	r21_r20 = Mem0[r29 + 96<i32>:word64]
	r23_r22 = Mem0[r29 + 88<i32>:word64]
	r25_r24 = Mem0[r29 + 80<i32>:word64]
	r27_r26 = Mem0[r29 + 72<i32>:word64]
	v43 = r30
	r31 = Mem0[v43 + 4<i32>:word32]
	r30 = Mem0[v43:word32]
	r29 = v43 + 8<i32>
	return
	// succ:  conv2d_f_execute_ref_exit
conv2d_f_execute_ref_exit:


// conv2d_check_ref
// Return size: 0
define conv2d_check_ref
conv2d_check_ref_entry:
	r29 = fp
	// succ:  l0001B73C
l0001B73C:
	r4 = 0x00028B6F<p32>
	Mem0[r29 - 16<i32>:word64] = r17_r16
	v7 = r29 - 8<i32>
	Mem0[v7:word32] = r30
	Mem0[v7 + 4<i32>:word32] = r31
	r30 = v7
	r29 = v7 - 16<i32>
	r1 = 0x9B<32>
	r16 = r1
	r17 = r0
	call logmsg_function (retsize: 0;)
	r2 = r16
	Mem0[r29:word32] = r17
	r2 = Mem0[r17 + 16<i32>:word32]
	branch r2 == 3<32> l0001B778
	// succ:  l0001B764 l0001B778
l0001B764:
	r3 = 0x0001B78B<p32>
	r1 = 0x9C<32>
	r2 = Mem0[r17 + 28<i32>:word32]
	goto l0001B78C
	// succ:  l0001B78C
l0001B778:
	r1 = 0x9D<32>
	r2 = Mem0[r17 + 20<i32>:word32]
	branch r2 == 1<32> l0001B79C
	// succ:  l0001B788 l0001B79C
l0001B788:
	r3 = 0x0001B7A7<p32>
	// succ:  l0001B78C
l0001B78C:
	call errlog_function (retsize: 0;)
	r2 = r16
	// succ:  l0001B790
l0001B790:
	r0 = 0xFFFFFFFF<32>
	r17_r16 = Mem0[r29 + 8<i32>:word64]
	v16 = r30
	r31 = Mem0[v16 + 4<i32>:word32]
	r30 = Mem0[v16:word32]
	r29 = v16 + 8<i32>
	return
	// succ:  conv2d_check_ref_exit
l0001B79C:
	r1 = 0x9E<32>
	r2 = Mem0[r17 + 4<i32>:word32]
	branch r2 == 0<32> l0001B7B4
	// succ:  l0001B7AC l0001B7B4
l0001B7AC:
	r3 = 0x0001B7BE<p32>
	goto l0001B790
	// succ:  l0001B790
l0001B7B4:
	r4 = 0<32>
	r3 = Mem0[r17 + 8<i32>:word32]
	branch r3 == 0<32> l0001B7DC
	// succ:  l0001B7C4 l0001B7DC
l0001B7C4:
	r3 = 0x0001B7CA<p32>
	goto l0001B790
	// succ:  l0001B790
l0001B7D0:
	r2 = r2 + 4<32>
	r4 = r4 + 1<32>
	branch r4 >u 2<32> l0001B7F8
l0001B7D4:
	r4 = r4 + 1<32>
	branch r4 >u 2<32> l0001B7FC
	// succ:  l0001B7E0 l0001B7F8 l0001B7FC
l0001B7DC:
	r5 = Mem0[r2:word32]
	branch r5 == 0<32> l0001B7D0
	goto l0001B7E8
	// succ:  l0001B7E8 l0001B7D0
l0001B7E0:
	branch r5 == 0<32> l0001B7D4
	// succ:  l0001B7E8 l0001B7D4
l0001B7E8:
	r3 = 0x0001B817<p32>
	r1 = 0xA2<32>
	Mem0[r29:word32] = r4
	goto l0001B78C
	// succ:  l0001B78C
l0001B7F8:
	r1 = 0xA7<32>
	r2 = Mem0[r3:word32]
	branch r2 == 0<32> l0001B814
l0001B7FC:
	r2 = Mem0[r3:word32]
	branch r2 == 0<32> l0001B818
	// succ:  l0001B808 l0001B814 l0001B818
l0001B808:
	r3 = 0x0001B825<p32>
	Mem0[r29:word32] = 0<32>
	goto l0001B78C
	// succ:  l0001B78C
l0001B814:
	r4 = 0x00028BF0<p32>
	r1 = 0xAA<32>
	r2 = r16
	goto l0001B824
	// succ:  l0001B824
l0001B818:
	r4 = 0x0001B834<p32>
	r1 = 0xAA<32>
	r2 = r16
	// succ:  l0001B824
l0001B824:
	call logmsg_function (retsize: 0;)
	Mem0[r29:word32] = r17
	r0 = 0<32>
	r17_r16 = Mem0[r29 + 8<i32>:word64]
	v18 = r30
	r31 = Mem0[v18 + 4<i32>:word32]
	r30 = Mem0[v18:word32]
	r29 = v18 + 8<i32>
	return
	// succ:  conv2d_check_ref_exit
conv2d_check_ref_exit:


// logmsg_function
// Return size: 0
define logmsg_function
logmsg_function_entry:
	r29 = fp
	// succ:  l0001B834
l0001B834:
	r3 = 2<32>
	v5 = r29 - 8<i32>
	Mem0[v5:word32] = r30
	Mem0[v5 + 4<i32>:word32] = r31
	r30 = v5
	r29 = v5 - 8<i32>
	r5 = Mem0[r2 + 16<i32>:word32]
	branch r3 >u r5 l0001B858
	// succ:  l0001B844 l0001B858
l0001B844:
	r0 = 0x0001B855<p32>
	r3 = 2<32>
	r5 = r29 + 0x10<32>
	call logv (retsize: 0;)
	r6 = r29 + 0x10<32>
	Mem0[r29 + 1<i32>:byte] = r6
	// succ:  l0001B84C_thunk_errlog_function
l0001B84C_thunk_errlog_function:
	call errlog_function (retsize: 0;)
	return
	// succ:  logmsg_function_exit
l0001B858:
	v13 = r30
	r31 = Mem0[v13 + 4<i32>:word32]
	r30 = Mem0[v13:word32]
	r29 = v13 + 8<i32>
	return
	// succ:  logmsg_function_exit
logmsg_function_exit:


// errlog_function
// Return size: 0
define errlog_function
errlog_function_entry:
	r29 = fp
	// succ:  l0001B85C
l0001B85C:
	r0 = 0x00028B51<p32>
	r4 = r3
	v8 = r29 - 8<i32>
	Mem0[v8:word32] = r30
	Mem0[v8 + 4<i32>:word32] = r31
	r30 = v8
	r29 = v8 - 8<i32>
	r3 = 0<32>
	r5 = r29 + 0x10<32>
	r6 = r29 + 0x10<32>
	Mem0[r29 + 1<i32>:byte] = r6
	v13 = r30
	r31 = Mem0[v13 + 4<i32>:word32]
	r30 = Mem0[v13:word32]
	r29 = v13 + 8<i32>
	return
	// succ:  errlog_function_exit
errlog_function_exit:


// matmul_execute_ref
// Return size: 0
define matmul_execute_ref
matmul_execute_ref_entry:
	r29 = fp
	// succ:  l0001B880
l0001B880:
	r4 = 0x00028DAA<p32>
	v6 = r29 - 8<i32>
	Mem0[v6:word32] = r30
	Mem0[v6 + 4<i32>:word32] = r31
	r30 = v6
	r29 = v6 - 88<i32>
	r3 = Mem0[r0 + 4<i32>:word32]
	r5 = Mem0[r0 + 8<i32>:word32]
	r16 = r1
	r1 = 0x4F<32>
	Mem0[r29 + 80<i32>:word64] = r17_r16
	Mem0[r29 + 56<i32>:word64] = r23_r22
	r2 = r16
	r6 = Mem0[r3 + 4<i32>:word32]
	r23 = Mem0[r5:word32]
	r3 = Mem0[r3:word32]
	Mem0[r29 + 72<i32>:word64] = r19_r18
	Mem0[r29 + 64<i32>:word64] = r21_r20
	Mem0[r29 + 48<i32>:word64] = r25_r24
	r5 = Mem0[r6 + 16<i32>:word32]
	Mem0[r29 + 40<i32>:word64] = r27_r26
	r18 = Mem0[r6 + 8<i32>:word32]
	r25 = Mem0[r6:word32]
	r24 = Mem0[r3 + 4<i32>:word32]
	Mem0[r29 + 36<i32>:word32] = r5
	r17 = Mem0[r3 + 16<i32>:word32]
	r19 = Mem0[r6 + 12<i32>:word32]
	r27 = Mem0[r6 + 4<i32>:word32]
	r20 = Mem0[r3 + 12<i32>:word32]
	r21 = Mem0[r3 + 8<i32>:word32]
	r26 = Mem0[r3:word32]
	call logmsg_function (retsize: 0;)
	r22 = Mem0[r23 + 16<i32>:word32]
	Mem0[r29:word32] = r0
	r4 = 0x00028DC2<p32>
	r1 = 0x52<32>
	Mem0[r29 + 28<i32>:word32] = r19
	r2 = r16
	Mem0[r29 + 8<i32>:word32] = r21
	Mem0[r29 + 24<i32>:word32] = r18
	Mem0[r29 + 20<i32>:word32] = r27
	Mem0[r29 + 16<i32>:word32] = r25
	Mem0[r29 + 12<i32>:word32] = r20
	Mem0[r29 + 4<i32>:word32] = r24
	Mem0[r29:word32] = r26
	call logmsg_function (retsize: 0;)
	r3 = 0x00028DEC<p32>
	r1 = 0x53<32>
	p0 = r24 == 1<32>
	branch p0 l0001B988
	// succ:  l0001B92C l0001B988
l0001B92C:
	r1 = 0x54<32>
	r3 = 0x00028DEC<p32>
	p0 = r27 == 1<32>
	r1 = 0x55<32>
	branch p0 l0001B988
	// succ:  l0001B940 l0001B988
l0001B940:
	r3 = 0x00028DFE<p32>
	p0 = r26 == 1<32>
	r1 = 0x56<32>
	branch p0 l0001B988
	// succ:  l0001B954 l0001B988
l0001B954:
	r3 = 0x00028DFE<p32>
	r2 = r26 * r21
	p0 = r25 == 1<32>
	branch p0 l0001B988
	// succ:  l0001B970 l0001B988
l0001B970:
	r1 = 0x57<32>
	r4 = Mem0[r23 + 20<i32>:word32]
	r3 = 0x00028E15<p32>
	r2 = r2 * r24
	r2 = r2 * r19
	r2 = r2 << 2<32>
	branch r2 >u r4 l0001B998
	goto l0001B98C
	// succ:  l0001B98C l0001B998
l0001B988:
	call errlog_function (retsize: 0;)
	r2 = r16
	goto l0001B990
	// succ:  l0001B990
l0001B98C:
	r2 = r16
	// succ:  l0001B990
l0001B990:
	goto l0001BA58
	// succ:  l0001BA58
l0001B998:
	r15 = r17
	r0 = r22
	r28 = Mem0[r29 + 36<i32>:word32]
	Mem0[r23 + 24<i32>:word32] = r2
	Mem0[r23 + 4<i32>:word32] = 0xFFFFFF81<32>
	Mem0[r23 + 12<i32>:word32] = r19
	p0 = r21 == 0<32>
	r2 = 0<32>
	Mem0[r23:word32] = 1<32>
	Mem0[r23 + 8<i32>:word32] = r21
	branch p0 l0001BA40
	// succ:  l0001B9D0 l0001BA40
l0001B9D0:
	r3 = 0<32>
	r14 = r20 + 0xFFFFFFFF<32>
	r6 = r2 * r20
	p0 = r11 == 0<32>
	branch p0 l0001BA38
	// succ:  l0001B9DC l0001BA38
l0001B9DC:
	r4 = r28
	__loop(1<i32>, 0x0001B9EC<p32>, r19)
	r5 = r2 * r19
	r5 = r0 + (r5 << 2<32>)
	r6 = r15 + (r6 << 2<32>)
	r12 = r4 + (r19 << 2<32>)
	p0 = r12 == 0<32>
	branch p0 l0001BA2C
	// succ:  l0001B9F8 l0001BA2C
l0001B9F8:
	r7 = r3
	r7 = r3
	r13 = r6 + 4<32>
	r9 = Mem0[r4:word32]
	r8 = Mem0[r6:word32]
	__loop(0<i32>, 0x0001BA10<p32>, r14)
	p0 = r12 >u 1<32>
	branch p0 l0001BA28
	// succ:  l0001BA10 l0001BA28
l0001BA10:
	r7 = r7 + r8 * r9
	r12 = r12 + (r19 << 2<32>)
	r8 = Mem0[r13:word32]
	r9 = Mem0[r12:word32]
	r13 = r13 + 4<32>
	// succ:  l0001BA28
l0001BA28:
	r7 = r7 + r8 * r9
	// succ:  l0001BA2C
l0001BA2C:
	r5 = r5 + 4<32>
	r4 = r4 + 4<32>
	Mem0[r5:word32] = r7
	// succ:  l0001BA38
l0001BA38:
	r2 = r2 + 1<32>
	branch r2 == r21 l0001B9D0
	goto l0001BA44
	// succ:  l0001BA44 l0001B9D0
l0001BA40:
	r4 = 0x00028E26<p32>
	r1 = 0x68<32>
	r2 = r16
	goto l0001BA50
	// succ:  l0001BA50
l0001BA44:
	r4 = 0x0001BA6A<p32>
	r1 = 0x68<32>
	r2 = r16
	// succ:  l0001BA50
l0001BA50:
	call logmsg_function (retsize: 0;)
	r0 = 0<32>
	// succ:  l0001BA58
l0001BA58:
	r17_r16 = Mem0[r29 + 80<i32>:word64]
	r19_r18 = Mem0[r29 + 72<i32>:word64]
	r21_r20 = Mem0[r29 + 64<i32>:word64]
	r23_r22 = Mem0[r29 + 56<i32>:word64]
	r25_r24 = Mem0[r29 + 48<i32>:word64]
	r27_r26 = Mem0[r29 + 40<i32>:word64]
	v34 = r30
	r31 = Mem0[v34 + 4<i32>:word32]
	r30 = Mem0[v34:word32]
	r29 = v34 + 8<i32>
	return
	// succ:  matmul_execute_ref_exit
matmul_execute_ref_exit:


// matmul_check_ref
// Return size: 0
define matmul_check_ref
matmul_check_ref_entry:
	r29 = fp
	// succ:  l0001BA6C
l0001BA6C:
	r4 = 0x00028D34<p32>
	Mem0[r29 - 16<i32>:word64] = r17_r16
	v7 = r29 - 8<i32>
	Mem0[v7:word32] = r30
	Mem0[v7 + 4<i32>:word32] = r31
	r30 = v7
	r29 = v7 - 16<i32>
	r1 = 0x6F<32>
	r16 = r1
	r17 = r0
	call logmsg_function (retsize: 0;)
	r2 = r16
	Mem0[r29:word32] = r17
	r3 = 0x00028D4C<p32>
	r1 = 0x70<32>
	r2 = Mem0[r17 + 16<i32>:word32]
	branch r2 == 2<32> l0001BAD8
	// succ:  l0001BAA0 l0001BAD8
l0001BAA0:
	r3 = 0x0001BAA6<p32>
	r1 = 0x71<32>
	r2 = Mem0[r17 + 20<i32>:word32]
	branch r2 == 1<32> l0001BAD8
	// succ:  l0001BAB4 l0001BAD8
l0001BAB4:
	r3 = 0x0001BABD<p32>
	r1 = 0x72<32>
	r2 = Mem0[r17 + 4<i32>:word32]
	branch r2 == 0<32> l0001BAD8
	// succ:  l0001BAC8 l0001BAD8
l0001BAC8:
	r3 = 0x0001BAC9<p32>
	r1 = 0x73<32>
	r2 = Mem0[r17 + 8<i32>:word32]
	branch r2 == 0<32> l0001BAE8
	goto l0001BADC
	// succ:  l0001BADC l0001BAE8
l0001BAD8:
	call errlog_function (retsize: 0;)
	r2 = r16
	goto l0001BAE0
	// succ:  l0001BAE0
l0001BADC:
	r2 = r16
	// succ:  l0001BAE0
l0001BAE0:
	r0 = 0xFFFFFFFF<32>
	r17_r16 = Mem0[r29 + 8<i32>:word64]
	v16 = r30
	r31 = Mem0[v16 + 4<i32>:word32]
	r30 = Mem0[v16:word32]
	r29 = v16 + 8<i32>
	return
	// succ:  matmul_check_ref_exit
l0001BAE8:
	r4 = 0x00028D92<p32>
	r1 = 0x74<32>
	r2 = r16
	call logmsg_function (retsize: 0;)
	Mem0[r29:word32] = r17
	r0 = 0<32>
	r17_r16 = Mem0[r29 + 8<i32>:word64]
	v17 = r30
	r31 = Mem0[v17 + 4<i32>:word32]
	r30 = Mem0[v17:word32]
	r29 = v17 + 8<i32>
	return
	// succ:  matmul_check_ref_exit
matmul_check_ref_exit:


// logmsg_function
// Return size: 0
define logmsg_function
logmsg_function_entry:
	r29 = fp
	// succ:  l0001BB08
l0001BB08:
	r3 = 2<32>
	v5 = r29 - 8<i32>
	Mem0[v5:word32] = r30
	Mem0[v5 + 4<i32>:word32] = r31
	r30 = v5
	r29 = v5 - 8<i32>
	r5 = Mem0[r2 + 16<i32>:word32]
	branch r3 >u r5 l0001BB2C
	// succ:  l0001BB18 l0001BB2C
l0001BB18:
	r0 = 0x0001BB1A<p32>
	r3 = 2<32>
	r5 = r29 + 0x10<32>
	call logv (retsize: 0;)
	r6 = r29 + 0x10<32>
	Mem0[r29 + 1<i32>:byte] = r6
	// succ:  l0001BB20_thunk_errlog_function
l0001BB20_thunk_errlog_function:
	call errlog_function (retsize: 0;)
	return
	// succ:  logmsg_function_exit
l0001BB2C:
	v13 = r30
	r31 = Mem0[v13 + 4<i32>:word32]
	r30 = Mem0[v13:word32]
	r29 = v13 + 8<i32>
	return
	// succ:  logmsg_function_exit
logmsg_function_exit:


// errlog_function
// Return size: 0
define errlog_function
errlog_function_entry:
	r29 = fp
	// succ:  l0001BB30
l0001BB30:
	r0 = 0x00028D16<p32>
	r4 = r3
	v8 = r29 - 8<i32>
	Mem0[v8:word32] = r30
	Mem0[v8 + 4<i32>:word32] = r31
	r30 = v8
	r29 = v8 - 8<i32>
	r3 = 0<32>
	r5 = r29 + 0x10<32>
	r6 = r29 + 0x10<32>
	Mem0[r29 + 1<i32>:byte] = r6
	v13 = r30
	r31 = Mem0[v13 + 4<i32>:word32]
	r30 = Mem0[v13:word32]
	r29 = v13 + 8<i32>
	return
	// succ:  errlog_function_exit
errlog_function_exit:


// maxpool_execute
// Return size: 0
define maxpool_execute
maxpool_execute_entry:
	r29 = fp
	// succ:  l0001BB60
l0001BB60:
	r23_r22 = r1_r0
	Mem0[r29 - 40<i32>:word64] = r23_r22
	v8 = r29 - 8<i32>
	Mem0[v8:word32] = r30
	Mem0[v8 + 4<i32>:word32] = r31
	r30 = v8
	r29 = v8 - 160<i32>
	r2 = Mem0[r22 + 4<i32>:word32]
	Mem0[r29 + 144<i32>:word64] = r19_r18
	r18 = Mem0[r22 + 32<i32>:int8]
	Mem0[r29 + 152<i32>:word64] = r17_r16
	Mem0[r29 + 136<i32>:word64] = r21_r20
	p0 = r18 == 0<32>
	r20 = Mem0[r2 + 8<i32>:word32]
	r3 = Mem0[r22 + 8<i32>:word32]
	r17 = Mem0[r2:word32]
	Mem0[r29 + 112<i32>:word64] = r27_r26
	r26 = Mem0[r2 + 4<i32>:word32]
	r1 = p0
	r0 = Mem0[r17 + 8<i32>:word32]
	Mem0[r29 + 120<i32>:word64] = r25_r24
	r7 = Mem0[r20 + 4<i32>:word32]
	r16 = Mem0[r3:word32]
	r27 = Mem0[r17:word32]
	r19 = Mem0[r20 + 8<i32>:word32]
	r25 = Mem0[r17 + 12<i32>:word32]
	r24 = Mem0[r17 + 4<i32>:word32]
	r2 = Mem0[r26 + 4<i32>:word32]
	Mem0[r29 + 76<i32>:word32] = r7
	r7 = Mem0[r26 + 8<i32>:word32]
	Mem0[r29 + 36<i32>:word32] = r0
	Mem0[r29 + 68<i32>:word32] = r2
	Mem0[r29 + 32<i32>:word32] = r7
	Mem0[r29 + 104<i32>:word32] = r1
	branch p0 l0001BBE8
	// succ:  l0001BBC4 l0001BBE8
l0001BBC4:
	p0 = r10 == 2<32>
	branch p0 l0001BBDC
	// succ:  l0001BBC8 l0001BBDC
l0001BBC8:
	p0 = r10 == 1<32>
	branch p0 l0001BBF4
	// succ:  l0001BBD0 l0001BBF4
l0001BBD0:
	r21 = 0<32>
	r0 = r19
	r2 = Mem0[r29 + 36<i32>:word64]
	r0 = r0 + (r2 + 0xFFFFFFFF<32>)
	goto l0001BBE8
	// succ:  l0001BBE8
l0001BBDC:
	r2 = Mem0[r29 + 36<i32>:word64]
	r3 = Mem0[r29 + 32<i32>:word64]
	r2 = r19 + r2
	r0 = r2 - r3
	// succ:  l0001BBE8
l0001BBE8:
	call fn00009760 (retsize: 0;)
	r1 = r19
	r21 = r0
	// succ:  l0001BBF4
l0001BBF4:
	p0 = r10 == 2<32>
	branch p0 l0001BC30
	// succ:  l0001BBFC l0001BC30
l0001BBFC:
	p0 = r10 == 1<32>
	branch p0 l0001BC24
	// succ:  l0001BC04 l0001BC24
l0001BC04:
	r1 = Mem0[r29 + 76<i32>:word32]
	r2 = 0<32>
	r0 = Mem0[r29 + 104<i32>:word32]
	Mem0[r29 + 18<i32>:byte] = r2
	branch p0 l0001BC48
	// succ:  l0001BC20 l0001BC48
l0001BC20:
	r0 = r24 + 0<32>
	r1 = Mem0[r29 + 76<i32>:word32]
	goto l0001BC3C
	// succ:  l0001BC3C
l0001BC24:
	r0 = r1
	r0 = r0 + (r24 + 0xFFFFFFFF<32>)
	goto l0001BC3C
	// succ:  l0001BC3C
l0001BC30:
	r1 = Mem0[r29 + 76<i32>:word64]
	r3 = Mem0[r29 + 68<i32>:word64]
	r2 = r1 + r24
	r0 = r2 - r3
	// succ:  l0001BC3C
l0001BC3C:
	call fn00009760 (retsize: 0;)
	Mem0[r29 + 72<i32>:word32] = r0
	r4 = 0x00028EEB<p32>
	r1 = 0x54<32>
	r2 = r23
	goto l0001BC54
	// succ:  l0001BC54
l0001BC48:
	r4 = 0x0001BC6F<p32>
	r1 = 0x54<32>
	r2 = r23
	// succ:  l0001BC54
l0001BC54:
	r7 = Mem0[r16 + 16<i32>:word32]
	r3 = Mem0[r17 + 16<i32>:word32]
	Mem0[r29 + 104<i32>:word32] = r7
	Mem0[r29 + 100<i32>:word32] = r3
	call logmsg_function (retsize: 0;)
	Mem0[r29:word32] = r22
	r2 = Mem0[r26:word32]
	branch r2 == 1<32> l0001BC84
	// succ:  l0001BC70 l0001BC84
l0001BC70:
	branch r2 == 1<32> l0001BC88
	// succ:  l0001BC78 l0001BC88
l0001BC78:
	branch r2 == 1<32> l0001BC88
	// succ:  l0001BC80 l0001BC88
l0001BC80:
	branch r2 == 1<32> l0001BCA4
	goto l0001BC88
	// succ:  l0001BC88 l0001BCA4
l0001BC84:
	r3 = 0x00028F05<p32>
	r1 = 0x59<32>
	goto l0001BC90
	// succ:  l0001BC90
l0001BC88:
	r3 = 0x0001BC89<p32>
	r1 = 0x59<32>
	// succ:  l0001BC90
l0001BC90:
	call errlog_function (retsize: 0;)
	r2 = r23
	// succ:  l0001BC94
l0001BC94:
	goto l0001BF7C
	// succ:  l0001BF7C
l0001BCA4:
	r1 = 0x5B<32>
	r3 = Mem0[r16 + 20<i32>:word32]
	r4 = Mem0[r29 + 72<i32>:word64]
	r2 = r2 * r21
	r2 = r2 * r4
	r2 = r2 << 2<32>
	branch r2 >u r3 l0001BCC8
	// succ:  l0001BCC0 l0001BCC8
l0001BCC0:
	r3 = 0x0001BCE1<p32>
	goto l0001BC94
	// succ:  l0001BC94
l0001BCC8:
	p0 = r27 > 0<32>
	r3 = Mem0[r22 + 32<i32>:int8]
	branch r3 == 0<32> l0001BCE4
	// succ:  l0001BCD8 l0001BCE4
l0001BCD8:
	r3 = 0x0001BCEF<p32>
	goto l0001BC94
	// succ:  l0001BC94
l0001BCE4:
	r1 = 0xFF800000<32>
	r2 = Mem0[r29 + 72<i32>:word64]
	Mem0[r16 + 24<i32>:word32] = r2
	Mem0[r29 + 8<i32>:word32] = r23
	Mem0[r29 + 12<i32>:word32] = r22
	Mem0[r16 + 4<i32>:word32] = r2
	Mem0[r16:word32] = r27
	Mem0[r16 + 8<i32>:word32] = r21
	Mem0[r16 + 12<i32>:word32] = r25
	branch p0 l0001BF5C
	// succ:  l0001BD10 l0001BF5C
l0001BD10:
	r9 = Mem0[r29 + 68<i32>:word32]
	r12 = Mem0[r29 + 32<i32>:word32]
	r0 = 0<32>
	r13 = r12
	r2 = r21
	r4 = Mem0[r29 + 72<i32>:word64]
	r8 = r4 + 0xFFFFFFFF<32>
	r4 = r9 - r24
	r7 = Mem0[r29 + 76<i32>:word64]
	r5 = Mem0[r29 + 36<i32>:word64]
	r6 = r5 * r25
	r3 = r12 - r5
	Mem0[r29 + 28<i32>:word32] = r0
	Mem0[r29 + 60<i32>:word32] = r24
	r8 = r4 + r8 * r7
	r7 = 0xFFFFFFFF<32> - r5
	r2 = r3 + r2 * r19
	r8 = r8 + (r8 >>u 0x1F<32>)
	r3 = 0xFFFFFFFF<32> - r24
	Mem0[r29 + 96<i32>:word32] = r7
	r2 = r2 + (r2 >>u 0x1F<32>)
	r3 = r25 << 2<32>
	r7 = 0<32>
	Mem0[r29 + 52<i32>:word32] = r3
	r3 = r8 >> 1<32>
	r4 = 0<32>
	Mem0[r29 + 92<i32>:word32] = r3
	r0 = 0<32> - r3
	Mem0[r29 + 64<i32>:word32] = r7
	Mem0[r29 + 48<i32>:word32] = r3
	r2 = r3 + (0x7F<32> - r9)
	r7 = r2 >> 1<32>
	Mem0[r29 + 20<i32>:word32] = r0
	r0 = r7 + (0x7F<32> - r12)
	r2 = 0<32> - r7
	Mem0[r29 + 16<i32>:word32] = r2
	Mem0[r29 + 44<i32>:word32] = r0
	Mem0[r29 + 40<i32>:word32] = r2
	// succ:  l0001BD88
l0001BD88:
	r2 = Mem0[r29 + 72<i32>:word32]
	Mem0[r29 + 24<i32>:word32] = r27
	p0 = r2 > 0<32>
	branch p0 l0001BF38
	// succ:  l0001BD94 l0001BF38
l0001BD94:
	r2 = Mem0[r29 + 20<i32>:word32]
	Mem0[r29 + 22<i32>:byte] = r2
	r3 = Mem0[r29 + 28<i32>:word64]
	r0 = Mem0[r29 + 16<i32>:word64]
	r2 = r3 * r2
	r0 = 0<32>
	Mem0[r29 + 84<i32>:word32] = r0
	Mem0[r29 + 56<i32>:word32] = r2
	Mem0[r29 + 80<i32>:word32] = r0
	// succ:  l0001BDB0
l0001BDB0:
	p0 = r13 > 0<32>
	branch p0 l0001BF0C
	// succ:  l0001BDBC l0001BF0C
l0001BDBC:
	r9 = Mem0[r29 + 80<i32>:word32]
	r2 = Mem0[r29 + 76<i32>:word32]
	r14 = Mem0[r29 + 52<i32>:word32]
	r12 = Mem0[r29 + 84<i32>:word32]
	r2 = r9 * r2
	r3 = Mem0[r29 + 88<i32>:word32]
	r8 = Mem0[r29 + 56<i32>:word32]
	r12 = max<int32>(r12, r14)
	r8 = r9 + r8
	r14 = Mem0[r29 + 48<i32>:word32]
	r15 = Mem0[r29 + 64<i32>:word32]
	r3 = max<int32>(r3, r4)
	r17 = r2 - r14
	r14 = Mem0[r29 + 68<i32>:word32]
	r0 = Mem0[r29 + 60<i32>:word32]
	r20 = r8 * r21
	r3 = r15 + r3
	r8 = r17 + r14
	r26 = 0xFFFFFFFF<32> - r12
	r2 = max<int32>(r17, r4)
	r9 = 0<32>
	r16 = Mem0[r29 + 40<i32>:word32]
	r28 = Mem0[r29 + 44<i32>:word32]
	r12 = r5 * r3
	r15 = min<int32>(r0, r8)
	// succ:  l0001BE18
l0001BE18:
	r3 = r9 * r19
	branch p0 l0001BEFC
	// succ:  l0001BE28 l0001BEFC
l0001BE28:
	r8 = r9 + r20
	p0 = r25 > 0<32>
	r14 = max<int32>(r16, r4)
	r11 = r8 * r25
	r0 = Mem0[r29 + 96<i32>:word64]
	r17 = Mem0[r29 + 100<i32>:word64]
	r3 = r3 - r7
	r23 = r12 + r14
	r10 = max<int32>(r28, r0)
	r22 = max<int32>(r3, r4)
	r3 = r3 + r13
	r0 = 0<32>
	r18 = 0xFFFFFFFF<32> - r10
	r10 = Mem0[r29 + 92<i32>:word32]
	r18 = min<int32>(r5, r3)
	r10 = r17 + r10 * r23
	r8 = r18 - r14
	r3 = Mem0[r29 + 104<i32>:word32]
	r27 = r3 + (r11 << 2<32>)
	// succ:  l0001BE68
l0001BE68:
	branch p0 l0001BEE4
	// succ:  l0001BE78 l0001BEE4
l0001BE78:
	r14 = r26 - r2
	r3 = r1
	p0 = r15 > r2
	__loop(1<i32>, 0x0001BE84<p32>, r14)
	r11 = r10
	r3 = r1
	r23 = r11 + (r25 << 2<32>)
	p0 = r10 > r14
	branch p0 l0001BED8
	// succ:  l0001BE90 l0001BED8
l0001BE90:
	r24 = r8 + 0xFFFFFFFF<32>
	p0 = r8 >u 1<32>
	r14 = Mem0[r11:word32]
	branch p0 l0001BED4
	// succ:  l0001BEA4 l0001BED4
l0001BEA4:
	r23 = r14 + 0<32>
	r17 = r24 + 0xFFFFFFFF<32>
	__loop(0<i32>, 0x0001BEB8<p32>, r17)
	r24 = r23 + (r25 << 2<32>)
	p0 = r24 >u 1<32>
	r23 = Mem0[r23:word32]
	branch p0 l0001BED0
	// succ:  l0001BEB8 l0001BED0
l0001BEB8:
	r3 = fmaxf(r14, r3)
	r24 = r24 + (r25 << 2<32>)
	r17 = r23
	r23 = Mem0[r24:word32]
	r14 = r17
	// succ:  l0001BED0
l0001BED0:
	r3 = fmaxf(r14, r3)
	// succ:  l0001BED4
l0001BED4:
	r3 = fmaxf(r23, r3)
	// succ:  l0001BED8
l0001BED8:
	r11 = r11 + (r6 << 2<32>)
	// succ:  l0001BEE4
l0001BEE4:
	r0 = r0 + 1<32>
	r10 = r10 + 4<32>
	r27 = r27 + 4<32>
	Mem0[r27:word32] = r3
	branch p0 l0001BE68
	// succ:  l0001BEFC l0001BE68
l0001BEFC:
	r16 = r16 + r19
	r28 = r28 - r19
	r9 = r9 + 1<32>
	branch r9 == r21 l0001BE18
	goto l0001BF10
	// succ:  l0001BF10 l0001BE18
l0001BF0C:
	r2 = Mem0[r29 + 76<i32>:word64]
	r3 = Mem0[r29 + 88<i32>:word64]
	// succ:  l0001BF10
l0001BF10:
	r3 = r3 + r2
	r0 = Mem0[r29 + 84<i32>:word32]
	r8 = Mem0[r29 + 80<i32>:word32]
	r3 = r0 - r2
	r8 = r8 + 1<32>
	r2 = Mem0[r29 + 72<i32>:word64]
	Mem0[r29 + 88<i32>:word32] = r3
	p0 = r8 == r2
	Mem0[r29 + 80<i32>:word32] = r8
	Mem0[r29 + 84<i32>:word32] = r3
	branch p0 l0001BDB0
	// succ:  l0001BF38 l0001BDB0
l0001BF38:
	r8 = Mem0[r29 + 28<i32>:word32]
	r27 = Mem0[r29 + 24<i32>:word32]
	r8 = r8 + 1<32>
	r2 = Mem0[r29 + 60<i32>:word64]
	r3 = Mem0[r29 + 64<i32>:word64]
	r3 = r3 + r2
	p0 = r8 == r27
	Mem0[r29 + 28<i32>:word32] = r8
	branch p0 l0001BD88
	// succ:  l0001BF5C l0001BD88
l0001BF5C:
	r4 = 0x00028F3D<p32>
	r2 = Mem0[r29 + 12<i32>:word32]
	Mem0[r29:byte] = r2
	r2 = Mem0[r29 + 8<i32>:word32]
	call logmsg_function (retsize: 0;)
	r0 = 0<32>
	// succ:  l0001BF7C
l0001BF7C:
	r17_r16 = Mem0[r29 + 152<i32>:word64]
	r19_r18 = Mem0[r29 + 144<i32>:word64]
	r21_r20 = Mem0[r29 + 136<i32>:word64]
	r23_r22 = Mem0[r29 + 128<i32>:word64]
	r25_r24 = Mem0[r29 + 120<i32>:word64]
	r27_r26 = Mem0[r29 + 112<i32>:word64]
	v35 = r30
	r31 = Mem0[v35 + 4<i32>:word32]
	r30 = Mem0[v35:word32]
	r29 = v35 + 8<i32>
	return
	// succ:  maxpool_execute_exit
maxpool_execute_exit:


// maxpool_check
// Return size: 0
define maxpool_check
maxpool_check_entry:
	r29 = fp
	// succ:  l0001BF90
l0001BF90:
	r4 = 0x00028E60<p32>
	Mem0[r29 - 16<i32>:word64] = r17_r16
	v7 = r29 - 8<i32>
	Mem0[v7:word32] = r30
	Mem0[v7 + 4<i32>:word32] = r31
	r30 = v7
	r29 = v7 - 16<i32>
	r1 = 0x8B<32>
	r16 = r1
	r17 = r0
	call logmsg_function (retsize: 0;)
	r2 = r16
	Mem0[r29:word32] = r17
	r1 = 0x8C<32>
	r2 = Mem0[r17 + 16<i32>:word32]
	branch r2 == 3<32> l0001BFD0
	// succ:  l0001BFBC l0001BFD0
l0001BFBC:
	r3 = 0x0001BFBD<p32>
	// succ:  l0001BFC0
l0001BFC0:
	call errlog_function (retsize: 0;)
	r2 = r16
	r0 = 0xFFFFFFFF<32>
	r17_r16 = Mem0[r29 + 8<i32>:word64]
	v16 = r30
	r31 = Mem0[v16 + 4<i32>:word32]
	r30 = Mem0[v16:word32]
	r29 = v16 + 8<i32>
	return
	// succ:  maxpool_check_exit
l0001BFD0:
	r1 = 0x8D<32>
	r2 = Mem0[r17 + 20<i32>:word32]
	branch r2 == 1<32> l0001BFE4
	// succ:  l0001BFE0 l0001BFE4
l0001BFE0:
	r3 = Mem0[r17 + 4<i32>:word32]
	// succ:  l0001BFE4
l0001BFE4:
	r3 = 0x00028E90<p32>
	goto l0001BFC0
	// succ:  l0001BFC0
maxpool_check_exit:


// logmsg_function
// Return size: 0
define logmsg_function
logmsg_function_entry:
	r29 = fp
	// succ:  l0001C058
l0001C058:
	r3 = 2<32>
	v5 = r29 - 8<i32>
	Mem0[v5:word32] = r30
	Mem0[v5 + 4<i32>:word32] = r31
	r30 = v5
	r29 = v5 - 8<i32>
	r5 = Mem0[r2 + 16<i32>:word32]
	branch r3 >u r5 l0001C07C
	// succ:  l0001C068 l0001C07C
l0001C068:
	r0 = 0x0001C085<p32>
	r3 = 2<32>
	r5 = r29 + 0x10<32>
	call logv (retsize: 0;)
	r6 = r29 + 0x10<32>
	Mem0[r29 + 1<i32>:byte] = r6
	// succ:  l0001C070_thunk_errlog_function
l0001C070_thunk_errlog_function:
	call errlog_function (retsize: 0;)
	return
	// succ:  logmsg_function_exit
l0001C07C:
	v13 = r30
	r31 = Mem0[v13 + 4<i32>:word32]
	r30 = Mem0[v13:word32]
	r29 = v13 + 8<i32>
	return
	// succ:  logmsg_function_exit
logmsg_function_exit:


// errlog_function
// Return size: 0
define errlog_function
errlog_function_entry:
	r29 = fp
	// succ:  l0001C080
l0001C080:
	r0 = 0x00028E41<p32>
	r4 = r3
	v8 = r29 - 8<i32>
	Mem0[v8:word32] = r30
	Mem0[v8 + 4<i32>:word32] = r31
	r30 = v8
	r29 = v8 - 8<i32>
	r3 = 0<32>
	r5 = r29 + 0x10<32>
	r6 = r29 + 0x10<32>
	Mem0[r29 + 1<i32>:byte] = r6
	v13 = r30
	r31 = Mem0[v13 + 4<i32>:word32]
	r30 = Mem0[v13:word32]
	r29 = v13 + 8<i32>
	return
	// succ:  errlog_function_exit
errlog_function_exit:


// relu_execute
// Return size: 0
define relu_execute
relu_execute_entry:
	r29 = fp
	// succ:  l0001C0B0
l0001C0B0:
	r4 = 0x00029016<p32>
	Mem0[r29 - 16<i32>:word64] = r17_r16
	v7 = r29 - 8<i32>
	Mem0[v7:word32] = r30
	Mem0[v7 + 4<i32>:word32] = r31
	r30 = v7
	r29 = v7 - 40<i32>
	r17_r16 = r0_r1
	r1 = 0x36<32>
	r2 = Mem0[r17 + 4<i32>:word32]
	Mem0[r29 + 24<i32>:word64] = r19_r18
	r3 = Mem0[r17 + 8<i32>:word32]
	Mem0[r29 + 8<i32>:word64] = r23_r22
	Mem0[r29 + 16<i32>:word64] = r21_r20
	r18 = Mem0[r2:word32]
	r22 = Mem0[r3:word32]
	r0 = Mem0[r18:word32]
	r6 = Mem0[r18 + 12<i32>:word32]
	r7 = Mem0[r18 + 4<i32>:word32]
	r5 = Mem0[r18 + 8<i32>:word32]
	r2 = r7 * r0
	r19 = Mem0[r18 + 16<i32>:word32]
	r20 = Mem0[r22 + 16<i32>:word32]
	Mem0[r29:word32] = r17
	r3 = r2 * r5
	r2 = r16
	r21 = r3 * r6
	r23 = r21 << 2<32>
	call logmsg_function (retsize: 0;)
	r2 = Mem0[r22 + 20<i32>:word32]
	branch r23 >u r2 l0001C11C
	// succ:  l0001C108 l0001C11C
l0001C108:
	r3 = 0x0001C112<p32>
	r1 = 0x37<32>
	r2 = r16
	call errlog_function (retsize: 0;)
	goto l0001C170
	// succ:  l0001C170
l0001C11C:
	p0 = r21 == 0<32>
	r2 = Mem0[r18:word32]
	r3 = Mem0[r18 + 4<i32>:word32]
	Mem0[r22 + 4<i32>:word32] = r3
	Mem0[r22:word32] = r2
	r6 = Mem0[r18 + 8<i32>:word32]
	Mem0[r22 + 8<i32>:word32] = r6
	r18 = -1<i32>
	r7 = Mem0[r18 + 12<i32>:word32]
	branch p0 l0001C158
	// succ:  l0001C13C l0001C158
l0001C13C:
	Mem0[r22 + 12<i32>:word32] = r7
	Mem0[r22 + 24<i32>:word32] = r23
	call fn00009600 (retsize: 0;)
	r21 = r21 + 0xFFFFFFFF<32>
	r1 = r18
	r0 = Mem0[r19:word32]
	r20 = r20 + 4<32>
	p0 = r21 == 0<32>
	r19 = r19 + 4<32>
	Mem0[r20:word32] = r0
	branch p0 l0001C13C
	// succ:  l0001C158 l0001C13C
l0001C158:
	r4 = 0x0002902D<p32>
	r1 = 0x3F<32>
	r2 = r16
	call logmsg_function (retsize: 0;)
	Mem0[r29:word32] = r17
	r0 = 0<32>
	// succ:  l0001C170
l0001C170:
	r17_r16 = Mem0[r29 + 32<i32>:word64]
	r19_r18 = Mem0[r29 + 24<i32>:word64]
	r21_r20 = Mem0[r29 + 16<i32>:word64]
	r23_r22 = Mem0[r29 + 8<i32>:word64]
	v30 = r30
	r31 = Mem0[v30 + 4<i32>:word32]
	r30 = Mem0[v30:word32]
	r29 = v30 + 8<i32>
	return
	// succ:  relu_execute_exit
relu_execute_exit:


// relu_check
// Return size: 0
define relu_check
relu_check_entry:
	r29 = fp
	// succ:  l0001C17C
l0001C17C:
	r0 = 0<32>
	// succ:  l0001C17C_thunk_relu_check__merged
l0001C17C_thunk_relu_check__merged:
	call relu_check__merged (retsize: 0;)
	return
	// succ:  relu_check_exit
relu_check_exit:


// relu_check__merged
// Return size: 0
define relu_check__merged
relu_check__merged_entry:
	r29 = fp
	// succ:  l0001C180
l0001C180:
	r4 = 0x00028F69<p32>
	p0 = r2 == 1<32>
	v7 = r29 - 8<i32>
	Mem0[v7:word32] = r30
	Mem0[v7 + 4<i32>:word32] = r31
	r30 = v7
	r29 = v7 - 32<i32>
	r6 = 0x00028FEA<p32>
	r5 = 2<32>
	r7 = 1<32>
	r16 = r1
	r4 = r6 + 0<32>
	Mem0[r29 + 24<i32>:word64] = r17_r16
	Mem0[r29 + 16<i32>:word64] = r19_r18
	r19 = p0
	r3_r2 = SEQ(0x61<32>, r16)
	r1 = p0 ? 0x6A<32> : r3
	r17 = r0
	Mem0[r29 + 8<i32>:word32] = r19
	call logmsg_function (retsize: 0;)
	r18 = p0 ? r5 : r7
	Mem0[r29:word32] = r17
	r2 = Mem0[r17 + 16<i32>:word32]
	branch r2 == r18 l0001C1E4
	// succ:  l0001C1CC l0001C1E4
l0001C1CC:
	r3 = 0x0001C204<p32>
	r2 = r16
	r0 = Mem0[r29 + 8<i32>:word64]
	p0 = r0
	goto l0001C20C
	// succ:  l0001C20C
l0001C1E4:
	r0 = Mem0[r29 + 8<i32>:word32]
	p1 = r0
	r2 = Mem0[r17 + 20<i32>:word32]
	branch r2 == 1<32> l0001C224
	// succ:  l0001C1F8 l0001C224
l0001C1F8:
	r1 = 0x6C<32>
	r1 = 0x63<32>
	r3 = 0x00028F8F<p32>
	r2 = r16
	// succ:  l0001C20C
l0001C20C:
	call errlog_function (retsize: 0;)
	goto l0001C250
	// succ:  l0001C250
l0001C224:
	branch p1 l0001C23C
	// succ:  l0001C230 l0001C23C
l0001C230:
	r1 = 0x6D<32>
	r1 = 0x64<32>
	r4 = 0x00029000<p32>
	goto l0001C244
	// succ:  l0001C244
l0001C23C:
	r4 = 0x00028F9F<p32>
	// succ:  l0001C244
l0001C244:
	call logmsg_function (retsize: 0;)
	r2 = r16
	Mem0[r29:word32] = r17
	r0 = 0<32>
	// succ:  l0001C250
l0001C250:
	r17_r16 = Mem0[r29 + 24<i32>:word64]
	r19_r18 = Mem0[r29 + 16<i32>:word64]
	v23 = r30
	r31 = Mem0[v23 + 4<i32>:word32]
	r30 = Mem0[v23:word32]
	r29 = v23 + 8<i32>
	return
	// succ:  relu_check__merged_exit
relu_check__merged_exit:


// reluX_execute
// Return size: 0
define reluX_execute
reluX_execute_entry:
	r29 = fp
	// succ:  l0001C258
l0001C258:
	r4 = 0x00028FB6<p32>
	Mem0[r29 - 16<i32>:word64] = r17_r16
	v7 = r29 - 8<i32>
	Mem0[v7:word32] = r30
	Mem0[v7 + 4<i32>:word32] = r31
	r30 = v7
	r29 = v7 - 48<i32>
	r17_r16 = r0_r1
	r1 = 0x52<32>
	r3 = Mem0[r17 + 4<i32>:word32]
	Mem0[r29 + 32<i32>:word64] = r19_r18
	r2 = r16
	r5 = Mem0[r17 + 8<i32>:word32]
	Mem0[r29 + 16<i32>:word64] = r23_r22
	Mem0[r29 + 24<i32>:word64] = r21_r20
	r19 = Mem0[r3:word32]
	r23 = Mem0[r5:word32]
	r3 = Mem0[r3 + 4<i32>:word32]
	Mem0[r29 + 8<i32>:word64] = r25_r24
	r0 = Mem0[r19:word32]
	r6 = Mem0[r19 + 4<i32>:word32]
	r5 = r6 * r0
	r7 = Mem0[r19 + 8<i32>:word32]
	r8 = Mem0[r19 + 12<i32>:word32]
	r5 = r5 * r7
	r3 = Mem0[r3 + 16<i32>:word32]
	r20 = Mem0[r19 + 16<i32>:word32]
	r21 = Mem0[r23 + 16<i32>:word32]
	r18 = Mem0[r3:word32]
	Mem0[r29:word32] = r17
	r22 = r5 * r8
	r24 = r22 << 2<32>
	call logmsg_function (retsize: 0;)
	r2 = Mem0[r23 + 20<i32>:word32]
	branch r24 >u r2 l0001C2D4
	// succ:  l0001C2BC l0001C2D4
l0001C2BC:
	r3 = 0x0001C2D2<p32>
	r1 = 0x53<32>
	r2 = r16
	call errlog_function (retsize: 0;)
	goto l0001C338
	// succ:  l0001C338
l0001C2D4:
	p0 = r22 == 0<32>
	r2 = Mem0[r19:word32]
	r3 = Mem0[r19 + 4<i32>:word32]
	Mem0[r23 + 4<i32>:word32] = r3
	Mem0[r23:word32] = r2
	r6 = Mem0[r19 + 8<i32>:word32]
	Mem0[r23 + 8<i32>:word32] = r6
	r19 = -1<i32>
	r7 = Mem0[r19 + 12<i32>:word32]
	branch p0 l0001C31C
	// succ:  l0001C2F8 l0001C31C
l0001C2F8:
	Mem0[r23 + 12<i32>:word32] = r7
	Mem0[r23 + 24<i32>:word32] = r24
	call fn00009600 (retsize: 0;)
	r1 = r19
	r0 = Mem0[r20:word32]
	call fn000097B0 (retsize: 0;)
	r1_r0 = r0_r18
	r22 = r22 + 0xFFFFFFFF<32>
	r21 = r21 + 4<32>
	p0 = r22 == 0<32>
	r20 = r20 + 4<32>
	Mem0[r21:word32] = r0
	branch p0 l0001C2F8
	// succ:  l0001C31C l0001C2F8
l0001C31C:
	r4 = 0x00028FDC<p32>
	r1 = 0x5B<32>
	r2 = r16
	call logmsg_function (retsize: 0;)
	Mem0[r29:word32] = r17
	r0 = 0<32>
	// succ:  l0001C338
l0001C338:
	r17_r16 = Mem0[r29 + 40<i32>:word64]
	r19_r18 = Mem0[r29 + 32<i32>:word64]
	r21_r20 = Mem0[r29 + 24<i32>:word64]
	r23_r22 = Mem0[r29 + 16<i32>:word64]
	r25_r24 = Mem0[r29 + 8<i32>:word64]
	v35 = r30
	r31 = Mem0[v35 + 4<i32>:word32]
	r30 = Mem0[v35:word32]
	r29 = v35 + 8<i32>
	return
	// succ:  reluX_execute_exit
reluX_execute_exit:


// reluX_check
// Return size: 0
define reluX_check
reluX_check_entry:
	r29 = fp
	// succ:  l0001C348
l0001C348:
	r1 = 1<32>
	// succ:  l0001C348_thunk_relu_check__merged
l0001C348_thunk_relu_check__merged:
	call relu_check__merged (retsize: 0;)
	return
	// succ:  reluX_check_exit
reluX_check_exit:


// logmsg_function
// Return size: 0
define logmsg_function
logmsg_function_entry:
	r29 = fp
	// succ:  l0001C34C
l0001C34C:
	r3 = 2<32>
	v5 = r29 - 8<i32>
	Mem0[v5:word32] = r30
	Mem0[v5 + 4<i32>:word32] = r31
	r30 = v5
	r29 = v5 - 8<i32>
	r5 = Mem0[r2 + 16<i32>:word32]
	branch r3 >u r5 l0001C370
	// succ:  l0001C35C l0001C370
l0001C35C:
	r0 = 0x0001C391<p32>
	r3 = 2<32>
	r5 = r29 + 0x10<32>
	call logv (retsize: 0;)
	r6 = r29 + 0x10<32>
	Mem0[r29 + 1<i32>:byte] = r6
	// succ:  l0001C364_thunk_errlog_function
l0001C364_thunk_errlog_function:
	call errlog_function (retsize: 0;)
	return
	// succ:  logmsg_function_exit
l0001C370:
	v13 = r30
	r31 = Mem0[v13 + 4<i32>:word32]
	r30 = Mem0[v13:word32]
	r29 = v13 + 8<i32>
	return
	// succ:  logmsg_function_exit
logmsg_function_exit:


// errlog_function
// Return size: 0
define errlog_function
errlog_function_entry:
	r29 = fp
	// succ:  l0001C374
l0001C374:
	r0 = 0x00028F4D<p32>
	r4 = r3
	v8 = r29 - 8<i32>
	Mem0[v8:word32] = r30
	Mem0[v8 + 4<i32>:word32] = r31
	r30 = v8
	r29 = v8 - 8<i32>
	r3 = 0<32>
	r5 = r29 + 0x10<32>
	r6 = r29 + 0x10<32>
	Mem0[r29 + 1<i32>:byte] = r6
	v13 = r30
	r31 = Mem0[v13 + 4<i32>:word32]
	r30 = Mem0[v13:word32]
	r29 = v13 + 8<i32>
	return
	// succ:  errlog_function_exit
errlog_function_exit:


// softmax_execute
// Return size: 0
define softmax_execute
softmax_execute_entry:
	r29 = fp
	// succ:  l0001C3A0
l0001C3A0:
	v4 = r29 - 8<i32>
	Mem0[v4:word32] = r30
	Mem0[v4 + 4<i32>:word32] = r31
	r30 = v4
	r29 = v4 - 72<i32>
	r2 = Mem0[r0 + 8<i32>:word32]
	r3 = Mem0[r0 + 4<i32>:word32]
	Mem0[r29 + 48<i32>:word64] = r21_r20
	Mem0[r29 + 64<i32>:word64] = r17_r16
	r2 = r1
	r5 = Mem0[r2:word32]
	r20 = Mem0[r3:word32]
	Mem0[r29 + 56<i32>:word64] = r19_r18
	Mem0[r29 + 40<i32>:word64] = r23_r22
	r7 = Mem0[r5 + 20<i32>:word32]
	r4 = Mem0[r20 + 24<i32>:word32]
	p0 = r4 >u r7
	r1 = 0x40<32>
	Mem0[r29 + 32<i32>:word64] = r25_r24
	Mem0[r29 + 24<i32>:word64] = r27_r26
	branch p0 l0001C4F8
	// succ:  l0001C3D0 l0001C4F8
l0001C3D0:
	r4 = Mem0[r20:word32]
	r2 = Mem0[r20 + 4<i32>:word32]
	r2 = r2 * r4
	r3 = Mem0[r20 + 8<i32>:word32]
	Mem0[r29 + 8<i32>:word32] = r2
	r16 = Mem0[r20 + 12<i32>:word32]
	Mem0[r29 + 12<i32>:word32] = r5
	Mem0[r29:word32] = r4
	Mem0[r29 + 4<i32>:word32] = r3
	r25 = r2 * r3
	r26 = Mem0[r20 + 16<i32>:word32]
	branch r25 > 0<32> l0001C4C8
	// succ:  l0001C3F8 l0001C4C8
l0001C3F8:
	r21 = 0<32>
	r2 = Mem0[r29 + 12<i32>:word64]
	r22 = Mem0[r2 + 16<i32>:word32]
	// succ:  l0001C400
l0001C400:
	p0 = r16 > 0<32>
	r19_r18 = r23_r16
	r27 = Mem0[r26:word32]
	r0 = r27
	r17 = r27
	r1 = p0
	branch p0 l0001C4B4
l0001C420:
	call fn00009600 (retsize: 0;)
	r1 = r17
	// succ:  l0001C424 l0001C4B4 l0001C428
l0001C424:
	Mem0[r29 + 4<i32>:byte] = r1
	r1 = r17
	// succ:  l0001C428
l0001C428:
	r2 = r19 + 4<32>
	r17 = r0
	r18 = r18 + 0xFFFFFFFF<32>
	branch r18 == 0<32> l0001C50C
	// succ:  l0001C43C l0001C50C
l0001C43C:
	p0 = r0
	branch p0 l0001C4B4
	// succ:  l0001C44C l0001C4B4
l0001C44C:
	r19 = 0<32>
	r24 = r16 + 0<32>
	r18 = 0<32>
	// succ:  l0001C454
l0001C454:
	r0 = r27 - r17
	call fn00009780 (retsize: 0;)
	r24 = r24 + 0xFFFFFFFF<32>
	r2 = r22 + r19
	p0 = r24 == 0<32>
	r18 = r18 + r0
	branch p0 l0001C484
	// succ:  l0001C474 l0001C484
l0001C474:
	Mem0[r2:word32] = r0
	r2 = r23 + r19
	r19 = r19 + 4<32>
	goto l0001C454
	// succ:  l0001C454
l0001C484:
	call fn00009610 (retsize: 0;)
	r0 = 0x3F800000<32>
	r1 = r18
	r2 = Mem0[r29 + 16<i32>:word32]
	p0 = r2
	branch p0 l0001C4B4
	// succ:  l0001C4A0 l0001C4B4
l0001C4A0:
	r2 = r22 + 0<32>
	__loop(0<i32>, 0x0001C4A4<p32>, r16)
	r3 = Mem0[r2:word32]
	r3 = r0 * r3
	r2 = r2 + 4<32>
	Mem0[r2:word32] = r3
	// succ:  l0001C4B4
l0001C4B4:
	r23 = r23 + (r16 << 2<32>)
	r26 = r26 + (r16 << 2<32>)
	r22 = r22 + (r16 << 2<32>)
	r21 = r21 + 1<32>
	branch r21 == r25 l0001C400
	goto l0001C4CC
	// succ:  l0001C4CC l0001C400
l0001C4C8:
	r0 = 0<32>
	r3 = Mem0[r29 + 12<i32>:word64]
	r2 = Mem0[r29:word64]
	goto l0001C4D0
	// succ:  l0001C4D0
l0001C4CC:
	r3 = Mem0[r29 + 12<i32>:word64]
	r2 = Mem0[r29:word64]
	// succ:  l0001C4D0
l0001C4D0:
	r7 = Mem0[r29 + 4<i32>:word64]
	r6 = Mem0[r29 + 8<i32>:word64]
	Mem0[r3 + 8<i32>:word32] = r7
	Mem0[r3:word32] = r2
	Mem0[r3 + 12<i32>:word32] = r16
	Mem0[r3 + 4<i32>:word32] = r6
	r2 = Mem0[r20 + 24<i32>:word32]
	Mem0[r3 + 24<i32>:word32] = r2
	// succ:  l0001C4E4
l0001C4E4:
	r17_r16 = Mem0[r29 + 64<i32>:word64]
	r19_r18 = Mem0[r29 + 56<i32>:word64]
	r21_r20 = Mem0[r29 + 48<i32>:word64]
	r23_r22 = Mem0[r29 + 40<i32>:word64]
	r25_r24 = Mem0[r29 + 32<i32>:word64]
	r27_r26 = Mem0[r29 + 24<i32>:word64]
	v35 = r30
	r31 = Mem0[v35 + 4<i32>:word32]
	r30 = Mem0[v35:word32]
	r29 = v35 + 8<i32>
	return
	// succ:  softmax_execute_exit
l0001C4F8:
	r3 = 0x000290CE<p32>
	call errlog_function (retsize: 0;)
	goto l0001C4E4
	// succ:  l0001C4E4
l0001C50C:
	r0 = Mem0[r19:word32]
	r11 = r2
	goto l0001C420
	// succ:  l0001C420
softmax_execute_exit:


// softmax_check
// Return size: 0
define softmax_check
softmax_check_entry:
	r29 = fp
	// succ:  l0001C514
l0001C514:
	r4 = 0x00029059<p32>
	Mem0[r29 - 16<i32>:word64] = r17_r16
	v7 = r29 - 8<i32>
	Mem0[v7:word32] = r30
	Mem0[v7 + 4<i32>:word32] = r31
	r30 = v7
	r29 = v7 - 16<i32>
	r1 = 0x5A<32>
	r16 = r1
	r17 = r0
	call logmsg_function (retsize: 0;)
	r2 = r16
	Mem0[r29:word32] = r17
	r3 = 0x00029072<p32>
	r1 = 0x5B<32>
	r2 = Mem0[r17 + 4<i32>:word32]
	branch r2 == 0<32> l0001C5A8
	// succ:  l0001C548 l0001C5A8
l0001C548:
	r3 = 0x0001C582<p32>
	r1 = 0x5C<32>
	r4 = Mem0[r17 + 8<i32>:word32]
	branch r4 == 0<32> l0001C5A8
	// succ:  l0001C55C l0001C5A8
l0001C55C:
	r3 = 0x0001C58F<p32>
	r1 = 0x5D<32>
	r2 = Mem0[r2:word32]
	branch r2 == 0<32> l0001C5A8
	// succ:  l0001C570 l0001C5A8
l0001C570:
	r3 = 0x0001C59C<p32>
	r1 = 0x5E<32>
	r2 = Mem0[r4:word32]
	branch r2 == 0<32> l0001C5A8
	// succ:  l0001C584 l0001C5A8
l0001C584:
	r3 = 0x0001C5AA<p32>
	r1 = 0x5F<32>
	r2 = Mem0[r17 + 16<i32>:word32]
	branch r2 == 1<32> l0001C5A8
	// succ:  l0001C598 l0001C5A8
l0001C598:
	r3 = 0x0001C5AA<p32>
	r1 = 0x60<32>
	r2 = Mem0[r17 + 20<i32>:word32]
	branch r2 == 1<32> l0001C5B8
	goto l0001C5AC
	// succ:  l0001C5AC l0001C5B8
l0001C5A8:
	call errlog_function (retsize: 0;)
	r2 = r16
	goto l0001C5B0
	// succ:  l0001C5B0
l0001C5AC:
	r2 = r16
	// succ:  l0001C5B0
l0001C5B0:
	r0 = 0xFFFFFFFF<32>
	r17_r16 = Mem0[r29 + 8<i32>:word64]
	v16 = r30
	r31 = Mem0[v16 + 4<i32>:word32]
	r30 = Mem0[v16:word32]
	r29 = v16 + 8<i32>
	return
	// succ:  softmax_check_exit
l0001C5B8:
	r4 = 0x000290B5<p32>
	r1 = 0x61<32>
	r2 = r16
	call logmsg_function (retsize: 0;)
	Mem0[r29:word32] = r17
	r0 = 0<32>
	r17_r16 = Mem0[r29 + 8<i32>:word64]
	v17 = r30
	r31 = Mem0[v17 + 4<i32>:word32]
	r30 = Mem0[v17:word32]
	r29 = v17 + 8<i32>
	return
	// succ:  softmax_check_exit
softmax_check_exit:


// logmsg_function
// Return size: 0
define logmsg_function
logmsg_function_entry:
	r29 = fp
	// succ:  l0001C5D8
l0001C5D8:
	r3 = 2<32>
	v5 = r29 - 8<i32>
	Mem0[v5:word32] = r30
	Mem0[v5 + 4<i32>:word32] = r31
	r30 = v5
	r29 = v5 - 8<i32>
	r5 = Mem0[r2 + 16<i32>:word32]
	branch r3 >u r5 l0001C5FC
	// succ:  l0001C5E8 l0001C5FC
l0001C5E8:
	r0 = 0x0001C5FE<p32>
	r3 = 2<32>
	r5 = r29 + 0x10<32>
	call logv (retsize: 0;)
	r6 = r29 + 0x10<32>
	Mem0[r29 + 1<i32>:byte] = r6
	// succ:  l0001C5F0_thunk_errlog_function
l0001C5F0_thunk_errlog_function:
	call errlog_function (retsize: 0;)
	return
	// succ:  logmsg_function_exit
l0001C5FC:
	v13 = r30
	r31 = Mem0[v13 + 4<i32>:word32]
	r30 = Mem0[v13:word32]
	r29 = v13 + 8<i32>
	return
	// succ:  logmsg_function_exit
logmsg_function_exit:


// errlog_function
// Return size: 0
define errlog_function
errlog_function_entry:
	r29 = fp
	// succ:  l0001C600
l0001C600:
	r0 = 0x0002903A<p32>
	r4 = r3
	v8 = r29 - 8<i32>
	Mem0[v8:word32] = r30
	Mem0[v8 + 4<i32>:word32] = r31
	r30 = v8
	r29 = v8 - 8<i32>
	r3 = 0<32>
	r5 = r29 + 0x10<32>
	r6 = r29 + 0x10<32>
	Mem0[r29 + 1<i32>:byte] = r6
	v13 = r30
	r31 = Mem0[v13 + 4<i32>:word32]
	r30 = Mem0[v13:word32]
	r29 = v13 + 8<i32>
	return
	// succ:  errlog_function_exit
errlog_function_exit:


// lrn_8_execute_ref
// Return size: 0
define lrn_8_execute_ref
lrn_8_execute_ref_entry:
	r29 = fp
	// succ:  l0001C630
l0001C630:
	r2 = r1
	v6 = r29 - 8<i32>
	Mem0[v6:word32] = r30
	Mem0[v6 + 4<i32>:word32] = r31
	r30 = v6
	r29 = v6 - 136<i32>
	r4 = Mem0[r0 + 8<i32>:word32]
	r5 = Mem0[r0 + 4<i32>:word32]
	Mem0[r29 + 120<i32>:word64] = r19_r18
	Mem0[r29 + 128<i32>:word64] = r17_r16
	r3 = Mem0[r4:word32]
	r18 = Mem0[r5:word32]
	Mem0[r29 + 112<i32>:word64] = r21_r20
	Mem0[r29 + 104<i32>:word64] = r23_r22
	r6 = Mem0[r3 + 20<i32>:word32]
	r7 = Mem0[r18 + 24<i32>:word32]
	p0 = r7 >u r6
	Mem0[r29 + 96<i32>:word64] = r25_r24
	Mem0[r29 + 88<i32>:word64] = r27_r26
	branch p0 l0001C678
	// succ:  l0001C660 l0001C678
l0001C660:
	r15 = Mem0[r5 + 4<i32>:word32]
	r13 = Mem0[r5 + 8<i32>:word32]
	r3 = 0x00029142<p32>
	r1 = 0xA1<32>
	Mem0[r29 + 4<i32>:word32] = r7
	goto l0001C770
	// succ:  l0001C770
l0001C678:
	r6 = Mem0[r5 + 16<i32>:word32]
	r7 = Mem0[r5 + 20<i32>:word32]
	r8 = Mem0[r5 + 24<i32>:word32]
	r7 = Mem0[r7 + 16<i32>:word32]
	r6 = Mem0[r6 + 16<i32>:word32]
	r14 = Mem0[r4 + 8<i32>:word32]
	r28 = Mem0[r4 + 4<i32>:word32]
	r4 = Mem0[r8 + 16<i32>:word32]
	r8 = Mem0[r15 + 16<i32>:word32]
	r12 = Mem0[r13 + 16<i32>:word32]
	r25 = Mem0[r5 + 12<i32>:word32]
	r1 = Mem0[r4:word32]
	r21 = r25
	r27 = Mem0[r8:word32]
	r5 = Mem0[r18 + 4<i32>:word32]
	r9 = Mem0[r18:word32]
	r0 = Mem0[r18:word32]
	r17 = Mem0[r18 + 4<i32>:word32]
	r19 = Mem0[r18 + 12<i32>:word32]
	r16 = Mem0[r18 + 8<i32>:word32]
	r4 = Mem0[r12:word32]
	r7 = Mem0[r7:word32]
	r6 = Mem0[r6:word32]
	Mem0[r3:word32] = r9
	Mem0[r3 + 4<i32>:word32] = r5
	r5 = Mem0[r18 + 8<i32>:word32]
	r8 = Mem0[r3 + 16<i32>:word32]
	Mem0[r3 + 8<i32>:word32] = r5
	r5 = Mem0[r18 + 12<i32>:word32]
	Mem0[r3 + 12<i32>:word32] = r5
	r5 = Mem0[r18 + 24<i32>:word32]
	Mem0[r3 + 24<i32>:word32] = r5
	r3 = Mem0[r25:word32]
	Mem0[r29 + 44<i32>:word32] = r8
	p0 = r3 == 1<32>
	branch p0 l0001C768
	// succ:  l0001C700 l0001C768
l0001C700:
	r1 = 0xA6<32>
	Mem0[r29 + 60<i32>:word32] = r6
	p0 = r0 > 0<32>
	Mem0[r29 + 44<i32>:word32] = r8
	Mem0[r29 + 64<i32>:word32] = r7
	r1 = 0x437F0000<32>
	Mem0[r29 + 68<i32>:word32] = r1
	Mem0[r29 + 8<i32>:word32] = r28
	Mem0[r29 + 12<i32>:word32] = r15
	Mem0[r29 + 16<i32>:word32] = r14
	Mem0[r29 + 20<i32>:word32] = r13
	Mem0[r29 + 24<i32>:word32] = r0
	branch p0 l0001C9A0
	// succ:  l0001C730 l0001C9A0
l0001C730:
	r0 = r4 - r27
	call fn00009610 (retsize: 0;)
	Mem0[r29 + 40<i32>:word32] = r0
	r20 = r16 * r19
	r2 = 0<32>
	r7 = 0<32>
	r22 = r0
	Mem0[r29 + 36<i32>:word32] = r2
	Mem0[r29 + 28<i32>:word32] = r7
	// succ:  l0001C74C
l0001C74C:
	p0 = r9 > 0<32>
	branch p0 l0001C988
	// succ:  l0001C750 l0001C988
l0001C750:
	r3 = 0<32>
	r2 = Mem0[r29 + 28<i32>:word64]
	r2 = r2 * r17
	Mem0[r29 + 32<i32>:word32] = r2
	// succ:  l0001C75C
l0001C75C:
	p0 = r8 > 0<32>
	branch p0 l0001C77C
	// succ:  l0001C768 l0001C77C l0001C984
l0001C768:
l0001C770:
	call errlog_function (retsize: 0;)
	goto l0001C9C4
	// succ:  l0001C9C4
l0001C77C:
	r4 = r3
	r2 = Mem0[r29 + 32<i32>:word64]
	r7 = Mem0[r29 + 36<i32>:word64]
	r2 = r4 + r2
	r25_r24 = SEQ(r4, 0<32>)
	r3 = r4 + 1<32>
	r6 = r7 + r4
	r2 = r2 * r16
	Mem0[r29 + 72<i32>:word32] = r3
	Mem0[r29 + 52<i32>:word32] = r6
	Mem0[r29 + 48<i32>:word32] = r2
	// succ:  l0001C7A0
l0001C7A0:
	p0 = r11 > 0<32>
	branch p0 l0001C978
	// succ:  l0001C7AC l0001C978
l0001C7AC:
	r24 = r24 + 1<32>
	r1 = Mem0[r29 + 40<i32>:word32]
	call fn00009600 (retsize: 0;)
	r0 = 0x38D1B717<32>
	call fn00009610 (retsize: 0;)
	r0 = 0x437F0000<32>
	r1 = r0
	r26 = 0<32>
	r2 = Mem0[r29 + 48<i32>:word64]
	r7 = Mem0[r29 + 44<i32>:word64]
	r23 = r24 + r2
	r2 = r24 + 1<32>
	Mem0[r29 + 56<i32>:word32] = r24
	r2 = r23 * r19
	r23 = r7 + r23 * r19
	Mem0[r29 + 76<i32>:word32] = r2
	Mem0[r29 + 84<i32>:word32] = r0
	Mem0[r29 + 80<i32>:word32] = r2
	// succ:  l0001C7E8
l0001C7E8:
	r11 = r21
	r2 = r25
	r5 = Mem0[r29 + 72<i32>:word32]
	r24 = Mem0[r18 + 16<i32>:word32]
	r3 = Mem0[r11 + 4<i32>:word32]
	r3 = 0<32>
	r4 = r3
	r4 = r4 + (r4 >>u 0x1F<32>)
	r2 = r2 - (r4 >> 1<32>)
	r5 = r5 + (r4 >> 1<32>)
	r6 = r16
	r3 = Mem0[r11 + 8<i32>:word32]
	r5 = Mem0[r11 + 12<i32>:word32]
	r3 = r3 + 0xFFFFFFFF<32>
	r5 = r5 + 0xFFFFFFFF<32>
	r7 = Mem0[r29 + 52<i32>:word32]
	r9 = Mem0[r29 + 56<i32>:word32]
	r3 = r3 + (r3 >>u 0x1F<32>)
	r5 = r5 + (r5 >>u 0x1F<32>)
	r7 = r7 - r4
	r12 = r19
	r6 = r9 + r6 * r7
	r8 = r3 >> 1<32>
	r4 = r4 + r25
	r14 = Mem0[r29 + 76<i32>:word32]
	r5 = r5 >> 1<32>
	r3 = r6 - r8
	r6 = r9 - r8
	r7 = r8 + r9
	r8 = r14 + r8
	r12 = r26 + r12 * r3
	r3 = 0<32>
	r9 = r26 - r5
	r5 = 0<32> + (r5 >>u 2<32>)
	r13 = r12 - r5
	r12 = r5
	r12 = r12 + (r26 + 1<32>)
	r13 = r24 + r13
	// succ:  l0001C888
l0001C888:
	p0 = r9 > r2
	branch p0 l0001C8F4
	// succ:  l0001C88C l0001C8F4
l0001C88C:
	p0 = r2 > -1<i32>
	branch p0 l0001C8F4
	// succ:  l0001C894 l0001C8F4
l0001C894:
	r15_r14 = r6_r13
	branch p0 l0001C8F4
	// succ:  l0001C89C l0001C8F4
l0001C89C:
	p0 = r8 > r6
	branch p0 l0001C8E4
	// succ:  l0001C8A4 l0001C8E4
l0001C8A4:
	p0 = r16 > r15
	branch p0 l0001C8E4
	// succ:  l0001C8B4 l0001C8E4
l0001C8B4:
	p0 = r15 > 0xFFFFFFFF<32>
	r0 = r9 + 0<32>
	r28 = r14 + 0<32>
	branch p0 l0001C8E4
	// succ:  l0001C8BC l0001C8E4
l0001C8BC:
	p0 = r12 > r9
	__loop(0<i32>, 0x0001C8C0<p32>, r5)
	p0 = r0 > -1<i32>
	branch p0 l0001C8DC
	// succ:  l0001C8C8 l0001C8DC
l0001C8C8:
	r10 = r27 + 0<32>
	p0 = r11 > r0
	branch p0 l0001C8DC
	// succ:  l0001C8D0 l0001C8DC
l0001C8D0:
	r1 = Mem0[r28:byte]
	r1 = CONVERT(r1, int32, real32)
	r10 = r10 + r22 * r1
	r3 = r3 + r10 * r10
	// succ:  l0001C8DC
l0001C8DC:
	r0 = r0 + 1<32>
	r28 = r28 + 1<32>
	// succ:  l0001C8E4
l0001C8E4:
	branch p0 l0001C89C
	// succ:  l0001C8F4 l0001C89C
l0001C8F4:
	p0 = r15 == r7
	r14 = r14 + r19
	r15 = r15 + 1<32>
	p0 = r2 == r4
	branch p0 l0001C888
	// succ:  l0001C900 l0001C888
l0001C900:
	r13 = r13 + r20
	r2 = r2 + 1<32>
	r21 = r11
	r0 = Mem0[r29 + 60<i32>:word64]
	r2 = Mem0[r29 + 64<i32>:word64]
	r0 = r0 + r2 * r3
	call fn00009790 (retsize: 0;)
	r2 = Mem0[r29 + 68<i32>:word32]
	r2 = r2 * r0
	r0 = __invert_bit<word32,word32>(r2, 0x1E<32>)
	call fn00009780 (retsize: 0;)
	r4 = __invert_bit<word32,word32>(r27, 0x1E<32>)
	r3 = r27
	r2 = Mem0[r29 + 80<i32>:word32]
	r2 = r2 + r26
	r2 = Mem0[r12 + r2:byte]
	r2 = CONVERT(r2, int32, real32)
	r3 = r3 + r22 * r2
	r2 = Mem0[r29 + 84<i32>:word32]
	r4 = r4 + r0 * r3
	r0 = r2 * r4
	call fn00009620 (retsize: 0;)
	r2 = truncf(CONVERT(r0, uint32, real32))
	r3 = 0<32>
	r26 = r26 + 1<32>
	p1 = r26 == r19
	p2 = r2 > 0xFF<32>
	p0 = r2 > 0xFFFFFFFF<32>
	r2 = 0xFFFFFFFF<32>
	r2 = r3 + 0<32>
	branch p1 l0001C7E8
	// succ:  l0001C974 l0001C7E8
l0001C974:
	Mem0[r23:byte] = r2
	r23 = r23 + 1<i32>
	r24 = Mem0[r29 + 76<i32>:word32]
	// succ:  l0001C978
l0001C978:
	branch p0 l0001C7A0
	// succ:  l0001C984 l0001C7A0
l0001C984:
	p0 = r3 == r9
	branch p0 l0001C75C
	// succ:  l0001C988 l0001C75C
l0001C988:
	r3 = Mem0[r29 + 28<i32>:word64]
	r7 = Mem0[r29 + 24<i32>:word64]
	r3 = r3
	r2 = Mem0[r29 + 36<i32>:word64]
	p0 = r3 == r7
	r2 = r2 + r17
	Mem0[r29 + 28<i32>:word32] = r3
	branch p0 l0001C74C
	// succ:  l0001C9A0 l0001C74C
l0001C9A0:
	Mem0[r29 + 36<i32>:word32] = r2
	r1 = Mem0[r29 + 12<i32>:word64]
	r16 = Mem0[r29 + 20<i32>:word64]
	call lrn_8_execute_ref.extracted_region (retsize: 0;)
	r2 = r1 + 0x10<32>
	r18 = r16 + 0x10<32>
	r0 = Mem0[r29 + 8<i32>:word32]
	call lrn_8_execute_ref.extracted_region (retsize: 0;)
	r1 = r16
	r2 = r18
	r0 = Mem0[r29 + 16<i32>:word64]
	r0 = 0<32>
	// succ:  l0001C9C4
l0001C9C4:
	r17_r16 = Mem0[r29 + 128<i32>:word64]
	r19_r18 = Mem0[r29 + 120<i32>:word64]
	r21_r20 = Mem0[r29 + 112<i32>:word64]
	r23_r22 = Mem0[r29 + 104<i32>:word64]
	r25_r24 = Mem0[r29 + 96<i32>:word64]
	r27_r26 = Mem0[r29 + 88<i32>:word64]
	v46 = r30
	r31 = Mem0[v46 + 4<i32>:word32]
	r30 = Mem0[v46:word32]
	r29 = v46 + 8<i32>
	return
	// succ:  lrn_8_execute_ref_exit
lrn_8_execute_ref_exit:


// lrn_check
// Return size: 0
define lrn_check
lrn_check_entry:
	r29 = fp
	// succ:  l0001C9D8
l0001C9D8:
	r4 = 0x000290F5<p32>
	Mem0[r29 - 16<i32>:word64] = r17_r16
	v7 = r29 - 8<i32>
	Mem0[v7:word32] = r30
	Mem0[v7 + 4<i32>:word32] = r31
	r30 = v7
	r29 = v7 - 16<i32>
	r1 = 0xCB<32>
	r16 = r1
	r17 = r0
	call logmsg_function (retsize: 0;)
	r2 = r16
	Mem0[r29:word32] = r17
	r1 = 0xCC<32>
	r2 = Mem0[r17 + 16<i32>:word32]
	branch r2 == 7<32> l0001CA18
	// succ:  l0001CA04 l0001CA18
l0001CA04:
	r3 = 0x0001CA10<p32>
	call errlog_function (retsize: 0;)
	r2 = r16
	// succ:  l0001CA0C
l0001CA0C:
	r0 = 0xFFFFFFFF<32>
	r17_r16 = Mem0[r29 + 8<i32>:word64]
	v16 = r30
	r31 = Mem0[v16 + 4<i32>:word32]
	r30 = Mem0[v16:word32]
	r29 = v16 + 8<i32>
	return
	// succ:  lrn_check_exit
l0001CA18:
	r1 = 0xCD<32>
	r2 = Mem0[r17 + 20<i32>:word32]
	branch r2 == 3<32> l0001CA30
	// succ:  l0001CA28 l0001CA30
l0001CA28:
	r3 = 0x0001CA63<p32>
	goto l0001CA0C
	// succ:  l0001CA0C
l0001CA30:
	r4 = 0x00029130<p32>
	r1 = 0xCE<32>
	r2 = r16
	call logmsg_function (retsize: 0;)
	Mem0[r29:word32] = r17
	r0 = 0<32>
	r17_r16 = Mem0[r29 + 8<i32>:word64]
	v17 = r30
	r31 = Mem0[v17 + 4<i32>:word32]
	r30 = Mem0[v17:word32]
	r29 = v17 + 8<i32>
	return
	// succ:  lrn_check_exit
lrn_check_exit:


// logmsg_function
// Return size: 0
define logmsg_function
logmsg_function_entry:
	r29 = fp
	// succ:  l0001CA50
l0001CA50:
	r3 = 2<32>
	v5 = r29 - 8<i32>
	Mem0[v5:word32] = r30
	Mem0[v5 + 4<i32>:word32] = r31
	r30 = v5
	r29 = v5 - 8<i32>
	r5 = Mem0[r2 + 16<i32>:word32]
	branch r3 >u r5 l0001CA74
	// succ:  l0001CA60 l0001CA74
l0001CA60:
	r0 = 0x0001CA60<p32>
	r3 = 2<32>
	r5 = r29 + 0x10<32>
	call logv (retsize: 0;)
	r6 = r29 + 0x10<32>
	Mem0[r29 + 1<i32>:byte] = r6
	// succ:  l0001CA68_thunk_errlog_function
l0001CA68_thunk_errlog_function:
	call errlog_function (retsize: 0;)
	return
	// succ:  logmsg_function_exit
l0001CA74:
	v13 = r30
	r31 = Mem0[v13 + 4<i32>:word32]
	r30 = Mem0[v13:word32]
	r29 = v13 + 8<i32>
	return
	// succ:  logmsg_function_exit
logmsg_function_exit:


// errlog_function
// Return size: 0
define errlog_function
errlog_function_entry:
	r29 = fp
	// succ:  l0001CA78
l0001CA78:
	r0 = 0x000290DC<p32>
	r4 = r3
	v8 = r29 - 8<i32>
	Mem0[v8:word32] = r30
	Mem0[v8 + 4<i32>:word32] = r31
	r30 = v8
	r29 = v8 - 8<i32>
	r3 = 0<32>
	r5 = r29 + 0x10<32>
	r6 = r29 + 0x10<32>
	Mem0[r29 + 1<i32>:byte] = r6
	v13 = r30
	r31 = Mem0[v13 + 4<i32>:word32]
	r30 = Mem0[v13:word32]
	r29 = v13 + 8<i32>
	return
	// succ:  errlog_function_exit
errlog_function_exit:


// lrn_8_execute_ref.extracted_region
// Return size: 0
define lrn_8_execute_ref.extracted_region
lrn_8_execute_ref.extracted_region_entry:
	r29 = fp
	// succ:  l0001CA9C
l0001CA9C:
	v4 = r29 - 8<i32>
	Mem0[v4:word32] = r30
	Mem0[v4 + 4<i32>:word32] = r31
	r30 = v4
	r29 = v4 - 0<i32>
	r3 = Mem0[r1:word32]
	r4 = Mem0[r1 + 4<i32>:word32]
	Mem0[r0 + 4<i32>:word32] = r4
	Mem0[r0:word32] = r3
	r6 = Mem0[r1 + 8<i32>:word32]
	Mem0[r0 + 8<i32>:word32] = r6
	r7 = Mem0[r1 + 12<i32>:word32]
	Mem0[r0 + 12<i32>:word32] = r7
	r3 = Mem0[r1 + 24<i32>:word32]
	r4 = Mem0[r0 + 20<i32>:word32]
	branch r3 >u r4 l0001CAD4
	// succ:  l0001CAC8 l0001CAD4
l0001CAC8:
	r3 = Mem0[r1 + 24<i32>:word32]
	r1 = Mem0[r2:word32]
	call fn00009560 (retsize: 0;)
	r2 = r3
	// succ:  l0001CAD4
l0001CAD4:
	v14 = r30
	r31 = Mem0[v14 + 4<i32>:word32]
	r30 = Mem0[v14:word32]
	r29 = v14 + 8<i32>
	return
	// succ:  lrn_8_execute_ref.extracted_region_exit
lrn_8_execute_ref.extracted_region_exit:


// lrn_f_execute
// Return size: 0
define lrn_f_execute
lrn_f_execute_entry:
	r29 = fp
	// succ:  l0001CAE0
l0001CAE0:
	v4 = r29 - 8<i32>
	Mem0[v4:word32] = r30
	Mem0[v4 + 4<i32>:word32] = r31
	r30 = v4
	r29 = v4 - 224<i32>
	r2 = Mem0[r0 + 8<i32>:word32]
	r3 = Mem0[r0 + 4<i32>:word32]
	r16 = r1
	Mem0[r29 + 192<i32>:word64] = r23_r22
	Mem0[r29 + 216<i32>:word64] = r17_r16
	r23 = Mem0[r3:word32]
	r2 = Mem0[r2:word32]
	Mem0[r29 + 208<i32>:word64] = r19_r18
	Mem0[r29 + 200<i32>:word64] = r21_r20
	r4 = Mem0[r2 + 20<i32>:word32]
	r5 = Mem0[r23 + 24<i32>:word32]
	p0 = r5 >u r4
	r2 = r16 + 0<32>
	Mem0[r29 + 184<i32>:word64] = r25_r24
	Mem0[r29 + 176<i32>:word64] = r27_r26
	branch p0 l0001CB2C
	// succ:  l0001CB18 l0001CB2C
l0001CB18:
	Mem0[r29 + 52<i32>:word32] = r23
	Mem0[r29:word32] = r4
	r3 = 0x000291D5<p32>
	r1 = 0xA3<32>
	Mem0[r29 + 4<i32>:word32] = r5
	goto l0001CC20
	// succ:  l0001CC20
l0001CB2C:
	r4 = Mem0[r3 + 8<i32>:word32]
	r5 = Mem0[r3 + 12<i32>:word32]
	r6 = Mem0[r3 + 16<i32>:word32]
	r12 = Mem0[r3 + 4<i32>:word32]
	r5 = Mem0[r5 + 16<i32>:word32]
	r4 = Mem0[r4 + 16<i32>:word32]
	r3 = Mem0[r6 + 16<i32>:word32]
	r25 = Mem0[r23 + 4<i32>:word32]
	r5 = Mem0[r5:word32]
	r6 = Mem0[r4:word32]
	r7 = Mem0[r23 + 4<i32>:word32]
	r8 = Mem0[r23:word32]
	r24 = Mem0[r23 + 8<i32>:word32]
	r22 = Mem0[r23 + 12<i32>:word32]
	r9 = Mem0[r23:word32]
	r3 = Mem0[r3:word32]
	Mem0[r2:word32] = r8
	Mem0[r2 + 4<i32>:word32] = r7
	r4 = Mem0[r23 + 8<i32>:word32]
	Mem0[r2 + 8<i32>:word32] = r4
	r1 = Mem0[r23 + 12<i32>:word32]
	Mem0[r2 + 12<i32>:word32] = r1
	r4 = Mem0[r23 + 24<i32>:word32]
	r7 = Mem0[r2 + 16<i32>:word32]
	Mem0[r2 + 24<i32>:word32] = r4
	r2 = Mem0[r12:word32]
	Mem0[r29 + 112<i32>:word32] = r12
	Mem0[r29 + 156<i32>:word32] = r25
	Mem0[r29 + 108<i32>:word32] = r5
	r0 = 0<32>
	r2 = r9 + 0<32>
	p0 = r2 == 1<32>
	Mem0[r29 + 104<i32>:word32] = r6
	branch p0 l0001CC10
	// succ:  l0001CBA8 l0001CC10
l0001CBA8:
	Mem0[r29 + 44<i32>:word32] = r7
	Mem0[r29 + 32<i32>:word32] = r2
	p0 = r9 > 0<32>
	branch p0 l0001CF94
	// succ:  l0001CBB0 l0001CF94
l0001CBB0:
	r1_r0 = CONVERT(r6, real32, real64)
	r3 = __invert_bit<word32,word32>(r3, 0x1E<32>)
	r4 = r24 * r22
	Mem0[r29 + 100<i32>:word32] = r3
	Mem0[r29 + 152<i32>:word32] = r4
	r1_r0 = CONVERT(r5, real32, real64)
	r4 = 0<32>
	Mem0[r29 + 88<i32>:word64] = r1_r0
	r4 = 0<32>
	Mem0[r29 + 40<i32>:word32] = r4
	Mem0[r29 + 116<i32>:word32] = r4
	r1_r0 = CONVERT(r3, real32, real64)
	Mem0[r29 + 80<i32>:word64] = r1_r0
	Mem0[r29 + 72<i32>:word64] = r1_r0
	// succ:  l0001CBE0
l0001CBE0:
	branch p0 l0001CF7C
	// succ:  l0001CBF0 l0001CF7C
l0001CBF0:
	r9 = 0<32>
	p0 = r25 > 0<32>
	r3 = Mem0[r29 + 116<i32>:word32]
	r3 = r3 * r25
	Mem0[r29 + 36<i32>:word32] = r3
	// succ:  l0001CBF8
l0001CBF8:
	branch p0 l0001CC2C
	// succ:  l0001CC08 l0001CC2C
l0001CC08:
	p0 = r24 > 0<32>
	r3 = r9 + 1<32>
	Mem0[r29 + 60<i32>:word32] = r9
	goto l0001CF74
	// succ:  l0001CF74
l0001CC10:
	r3 = 0x000291EF<p32>
	r1 = 0xA8<32>
	r2 = r16
	// succ:  l0001CC20
l0001CC20:
	call errlog_function (retsize: 0;)
	goto l0001CF94
	// succ:  l0001CF94
l0001CC2C:
	r19 = 0<32>
	r2 = Mem0[r29 + 36<i32>:word64]
	r6 = Mem0[r29 + 40<i32>:word64]
	r2 = r9 + r2
	r5 = r6 + r9
	Mem0[r29 + 120<i32>:word32] = r3
	r2 = r2 * r24
	Mem0[r29 + 56<i32>:word32] = r5
	Mem0[r29 + 48<i32>:word32] = r2
	// succ:  l0001CC4C
l0001CC4C:
	p0 = r14 > 0<32>
	branch p0 l0001CC5C
	// succ:  l0001CC54 l0001CC5C
l0001CC54:
	Mem0[r29 + 128<i32>:word32] = r19
	goto l0001CF64
	// succ:  l0001CF64
l0001CC5C:
	r3 = r19 + 1<32>
	r2 = Mem0[r29 + 48<i32>:word32]
	Mem0[r29 + 16<i32>:byte] = r3
	r3 = 0<32>
	r2 = r2 * r22
	Mem0[r29 + 31<i32>:byte] = r2
	// succ:  l0001CC7C
l0001CC7C:
	r1 = 0x69<32>
	r27 = r23
	r2 = Mem0[r12 + 12<i32>:word32]
	Mem0[r29 + 136<i32>:word32] = r3
	r4 = 0x0002921B<p32>
	r6 = r2 + 0xFFFFFFFF<32>
	r5 = Mem0[r12 + 4<i32>:word32]
	r6 = r6 + (r6 >>u 0x1F<32>)
	r7 = Mem0[r12 + 8<i32>:word32]
	r3 = Mem0[r23 + 16<i32>:word32]
	r8 = r7 + 0xFFFFFFFF<32>
	Mem0[r29 + 8<i32>:word32] = r2
	Mem0[r29:word32] = r5
	r8 = r8 + (r8 >>u 0x1F<32>)
	r17 = r5
	Mem0[r29 + 4<i32>:word32] = r7
	r17 = r17 + (r17 >>u 0x1F<32>)
	r18 = r8 >> 1<32>
	Mem0[r29 + 132<i32>:word32] = r20
	Mem0[r29 + 140<i32>:word32] = r3
	r20 = r6 >> 1<32>
	r21 = r17 >> 1<32>
	Mem0[r29 + 16<i32>:word32] = r18
	r3_r2 = SEQ(1<32>, r16)
	r23 = r9
	Mem0[r29 + 20<i32>:word32] = r20
	Mem0[r29 + 12<i32>:word32] = r21
	call logmsg_function (retsize: 0;)
	r7_r6 = r19_r20
	r5 = r23
	r4 = r22
	r2 = Mem0[r29 + 120<i32>:word64]
	r26 = r5
	r26 = r26 - (r17 >> 1<32>)
	r2 = r2 + (r17 >> 1<32>)
	r19 = 0<32>
	r27 = Mem0[r29 + 136<i32>:word32]
	r21 = r27 + 1<32>
	r26 = r5
	r2 = Mem0[r29 + 108<i32>:word64]
	r17 = Mem0[r29 + 104<i32>:word64]
	// succ:  l0001CE98
l0001CE98:
	r17 = r17 + r2 * r19
	r7_r6 = CONVERT(r19, real32, real64)
	r5_r4 = Mem0[r29 + 80<i32>:word64]
	r1_r0 = Mem0[r29 + 88<i32>:word64]
	r3_r2 = SEQ(1<32>, r16)
	Mem0[r29 + 16<i32>:word64] = r7_r6
	r4 = 0x00029261<p32>
	r19_r18 = CONVERT(r17, real32, real64)
	Mem0[r29 + 8<i32>:word64] = r5_r4
	r1 = 0x7C<32>
	Mem0[r29:word64] = r1_r0
	Mem0[r29 + 24<i32>:word64] = r19_r18
	call logmsg_function (retsize: 0;)
	call fn00009790 (retsize: 0;)
	r0 = r17
	r2 = Mem0[r29 + 100<i32>:word32]
	r0 = r0 * r2
	call fn00009780 (retsize: 0;)
	r4 = 0x00029272<p32>
	r17 = r0
	r1 = 0x7F<32>
	r7_r6 = CONVERT(r17, real32, real64)
	r3_r2 = SEQ(1<32>, r16)
	Mem0[r29:word64] = r19_r18
	r7_r6 = Mem0[r29 + 72<i32>:word64]
	Mem0[r29 + 16<i32>:word64] = r7_r6
	Mem0[r29 + 8<i32>:word64] = r7_r6
	call logmsg_function (retsize: 0;)
	r4 = 0x000291FF<p32>
	r1 = 0xBD<32>
	r2 = Mem0[r29 + 124<i32>:word32]
	r3 = Mem0[r29 + 140<i32>:word32]
	r5 = Mem0[r29 + 116<i32>:word32]
	r2 = r2 + r27
	r19 = Mem0[r29 + 128<i32>:word32]
	r2 = r3 + (r2 << 2<32>)
	r3_r2 = SEQ(1<32>, r16)
	r0 = Mem0[r2:word32]
	Mem0[r29 + 12<i32>:word32] = r27
	Mem0[r29 + 8<i32>:word32] = r19
	Mem0[r29:word32] = r5
	r17 = r17 * r0
	Mem0[r29 + 4<i32>:word32] = r26
	r7_r6 = CONVERT(r17, real32, real64)
	call logmsg_function (retsize: 0;)
	Mem0[r29 + 16<i32>:word64] = r7_r6
	r20 = r20 + 4<32>
	r9 = r26
	r3 = r21
	Mem0[r20:word32] = r17
	p0 = r13 == r14
	branch p0 l0001CC7C
	// succ:  l0001CF60 l0001CC7C
l0001CF60:
	r12 = Mem0[r29 + 112<i32>:word32]
	r19 = Mem0[r29 + 64<i32>:word64]
	r7 = Mem0[r29 + 44<i32>:word64]
	// succ:  l0001CF64
l0001CF64:
	branch p0 l0001CC4C
	// succ:  l0001CF74 l0001CC4C
l0001CF74:
	branch p0 l0001CBF8
	// succ:  l0001CF7C l0001CBF8
l0001CF7C:
	p0 = r9 == r25
	r4 = Mem0[r29 + 116<i32>:word64]
	r3 = Mem0[r29 + 40<i32>:word64]
	r4 = r4 + 1<32>
	r3 = r3 + r25
	p0 = r4 == r2
	branch p0 l0001CBE0
	// succ:  l0001CF90 l0001CBE0
l0001CF90:
	Mem0[r29 + 116<i32>:word32] = r4
	Mem0[r29 + 40<i32>:word32] = r3
	r0 = 0<32>
	// succ:  l0001CF94
l0001CF94:
	r17_r16 = Mem0[r29 + 216<i32>:word64]
	r19_r18 = Mem0[r29 + 208<i32>:word64]
	r21_r20 = Mem0[r29 + 200<i32>:word64]
	r23_r22 = Mem0[r29 + 192<i32>:word64]
	r25_r24 = Mem0[r29 + 184<i32>:word64]
	r27_r26 = Mem0[r29 + 176<i32>:word64]
	v45 = r30
	r31 = Mem0[v45 + 4<i32>:word32]
	r30 = Mem0[v45:word32]
	r29 = v45 + 8<i32>
	return
	// succ:  lrn_f_execute_exit
lrn_f_execute_exit:


// lrn_check
// Return size: 0
define lrn_check
lrn_check_entry:
	r29 = fp
	// succ:  l0001CFA8
l0001CFA8:
	r4 = 0x00029187<p32>
	Mem0[r29 - 16<i32>:word64] = r17_r16
	v7 = r29 - 8<i32>
	Mem0[v7:word32] = r30
	Mem0[v7 + 4<i32>:word32] = r31
	r30 = v7
	r29 = v7 - 16<i32>
	r1 = 0xCB<32>
	r16 = r1
	r17 = r0
	call logmsg_function (retsize: 0;)
	r3_r2 = SEQ(2<32>, r16)
	Mem0[r29:word32] = r17
	r1 = 0xCC<32>
	r2 = Mem0[r17 + 16<i32>:word32]
	branch r2 == 5<32> l0001CFEC
	// succ:  l0001CFD8 l0001CFEC
l0001CFD8:
	r3 = 0x0001CFE0<p32>
	call errlog_function (retsize: 0;)
	r2 = r16
	// succ:  l0001CFE0
l0001CFE0:
	r0 = 0xFFFFFFFF<32>
	r17_r16 = Mem0[r29 + 8<i32>:word64]
	v17 = r30
	r31 = Mem0[v17 + 4<i32>:word32]
	r30 = Mem0[v17:word32]
	r29 = v17 + 8<i32>
	return
	// succ:  lrn_check_exit
l0001CFEC:
	r1 = 0xCE<32>
	r2 = Mem0[r17 + 20<i32>:word32]
	branch r2 == 1<32> l0001D008
	// succ:  l0001CFFC l0001D008
l0001CFFC:
	r3 = 0x0001D033<p32>
	goto l0001CFE0
	// succ:  l0001CFE0
l0001D008:
	r4 = 0x000291C0<p32>
	r3_r2 = SEQ(2<32>, r16)
	Mem0[r29:word32] = r17
	call logmsg_function (retsize: 0;)
	r0 = 0<32>
	r17_r16 = Mem0[r29 + 8<i32>:word64]
	v18 = r30
	r31 = Mem0[v18 + 4<i32>:word32]
	r30 = Mem0[v18:word32]
	r29 = v18 + 8<i32>
	return
	// succ:  lrn_check_exit
lrn_check_exit:


// logmsg_function
// Return size: 0
define logmsg_function
logmsg_function_entry:
	r29 = fp
	// succ:  l0001D024
l0001D024:
	v4 = r29 - 8<i32>
	Mem0[v4:word32] = r30
	Mem0[v4 + 4<i32>:word32] = r31
	r30 = v4
	r29 = v4 - 8<i32>
	r5 = Mem0[r2 + 16<i32>:word32]
	branch r3 >u r5 l0001D044
	// succ:  l0001D034 l0001D044
l0001D034:
	r0 = 0x0001D070<p32>
	r5 = r29 + 0x10<32>
	r6 = r29 + 0x10<32>
	call logv (retsize: 0;)
	Mem0[r29 + 4<i32>:word32] = r6
	// succ:  l0001D044
l0001D044:
	v13 = r30
	r31 = Mem0[v13 + 4<i32>:word32]
	r30 = Mem0[v13:word32]
	r29 = v13 + 8<i32>
	return
	// succ:  logmsg_function_exit
logmsg_function_exit:


// errlog_function
// Return size: 0
define errlog_function
errlog_function_entry:
	r29 = fp
	// succ:  l0001D048
l0001D048:
	r0 = 0x0002916C<p32>
	r4 = r3
	v8 = r29 - 8<i32>
	Mem0[v8:word32] = r30
	Mem0[v8 + 4<i32>:word32] = r31
	r30 = v8
	r29 = v8 - 8<i32>
	r3 = 0<32>
	r5 = r29 + 0x10<32>
	r6 = r29 + 0x10<32>
	Mem0[r29 + 1<i32>:byte] = r6
	v13 = r30
	r31 = Mem0[v13 + 4<i32>:word32]
	r30 = Mem0[v13:word32]
	r29 = v13 + 8<i32>
	return
	// succ:  errlog_function_exit
errlog_function_exit:


// nn_variable_read
// Return size: 0
define nn_variable_read
nn_variable_read_entry:
	r29 = fp
	// succ:  l0001D070
l0001D070:
	v4 = r29 - 8<i32>
	Mem0[v4:word32] = r30
	Mem0[v4 + 4<i32>:word32] = r31
	r30 = v4
	r29 = v4 - 0<i32>
	r6 = Mem0[r1 + 28<i32>:word32]
	branch p0 l0001D0A0
	// succ:  l0001D088 l0001D0A0
l0001D088:
	p0 = r6 == 0x3E<32>
	r7 = Mem0[r29 + 16<i32>:word32]
	r6 = Mem0[r1 + 8<i32>:word32]
	r3 = 0x0002929F<p32>
	r1 = 0x7D<32>
	call errlog_function (retsize: 0;)
	r2 = r0
	// succ:  l0001D098
l0001D098:
	r0 = -1<i32>
	v15 = r30
	r31 = Mem0[v15 + 4<i32>:word32]
	r30 = Mem0[v15:word32]
	r29 = v15 + 8<i32>
	return
	// succ:  nn_variable_read_exit
l0001D0A0:
	r2 = Mem0[r14 + r2 * 4<32>:word32]
	r6 = Mem0[r2 + 24<i32>:word32]
	branch r6 >u r7 l0001D0BC
	// succ:  l0001D0B0 l0001D0BC
l0001D0B0:
	r3 = 0x0001D0B2<p32>
	goto l0001D098
	// succ:  l0001D098
l0001D0BC:
	r6 = Mem0[r2:word32]
	Mem0[r3:word32] = r6
	r6 = Mem0[r2 + 4<i32>:word32]
	Mem0[r4:byte] = r6
	r3 = Mem0[r29 + 20<i32>:word64]
	Mem0[r5:word32] = r4
	r1 = Mem0[r2 + 12<i32>:word32]
	Mem0[r7:byte] = r1
	Mem0[r3:byte] = r4
	call fn00009560 (retsize: 0;)
	r2 = Mem0[r2 + 24<i32>:word32]
	r0 = 0<32>
	v19 = r30
	r31 = Mem0[v19 + 4<i32>:word32]
	r30 = Mem0[v19:word32]
	r29 = v19 + 8<i32>
	return
	// succ:  nn_variable_read_exit
nn_variable_read_exit:


// errlog_function
// Return size: 0
define errlog_function
errlog_function_entry:
	r29 = fp
	// succ:  l0001D0F4
l0001D0F4:
	r0 = 0x00029281<p32>
	r4 = r3
	v8 = r29 - 8<i32>
	Mem0[v8:word32] = r30
	Mem0[v8 + 4<i32>:word32] = r31
	r30 = v8
	r29 = v8 - 8<i32>
	r3 = 0<32>
	r5 = r29 + 0x10<32>
	r6 = r29 + 0x10<32>
	Mem0[r29 + 1<i32>:byte] = r6
	v13 = r30
	r31 = Mem0[v13 + 4<i32>:word32]
	r30 = Mem0[v13:word32]
	r29 = v13 + 8<i32>
	return
	// succ:  errlog_function_exit
errlog_function_exit:


// nn_variable_write
// Return size: 0
define nn_variable_write
nn_variable_write_entry:
	r29 = fp
	// succ:  l0001D118
l0001D118:
	r6 = r2
	v6 = r29 - 8<i32>
	Mem0[v6:word32] = r30
	Mem0[v6 + 4<i32>:word32] = r31
	r30 = v6
	r29 = v6 - 0<i32>
	r7 = Mem0[r1 + 28<i32>:word32]
	branch p0 l0001D148
	// succ:  l0001D130 l0001D148
l0001D130:
	p0 = r7 == 0x3E<32>
	r2 = Mem0[r29 + 16<i32>:word32]
	r7 = Mem0[r1 + 8<i32>:word32]
	r3 = 0x0002929F<p32>
	r1 = 0x94<32>
	call errlog_function (retsize: 0;)
	r2 = r0
	// succ:  l0001D140
l0001D140:
	r0 = -1<i32>
	v15 = r30
	r31 = Mem0[v15 + 4<i32>:word32]
	r30 = Mem0[v15:word32]
	r29 = v15 + 8<i32>
	return
	// succ:  nn_variable_write_exit
l0001D148:
	r6 = Mem0[r30 + r6 * 4<32>:word32]
	r7 = Mem0[r6 + 20<i32>:word32]
	branch r2 >u r7 l0001D164
	// succ:  l0001D158 l0001D164
l0001D158:
	r3 = 0x0001D172<p32>
	goto l0001D140
	// succ:  l0001D140
l0001D164:
	r0 = Mem0[r6 + 16<i32>:word32]
	r1 = Mem0[r29 + 12<i32>:word64]
	Mem0[r6 + 24<i32>:word32] = r2
	Mem0[r6:word32] = r3
	r3 = Mem0[r29 + 8<i32>:word32]
	Mem0[r6 + 8<i32>:word32] = r5
	Mem0[r6 + 4<i32>:word32] = r4
	call fn00009560 (retsize: 0;)
	Mem0[r6 + 12<i32>:word32] = r3
	r0 = 0<32>
	v18 = r30
	r31 = Mem0[v18 + 4<i32>:word32]
	r30 = Mem0[v18:word32]
	r29 = v18 + 8<i32>
	return
	// succ:  nn_variable_write_exit
nn_variable_write_exit:


// assign_execute
// Return size: 0
define assign_execute
assign_execute_entry:
	r29 = fp
	// succ:  l0001D180
l0001D180:
	r4 = 0x0002935C<p32>
	Mem0[r29 - 16<i32>:word64] = r17_r16
	v7 = r29 - 8<i32>
	Mem0[v7:word32] = r30
	Mem0[v7 + 4<i32>:word32] = r31
	r30 = v7
	r29 = v7 - 32<i32>
	r17_r16 = r0_r1
	r1 = 0xA3<32>
	r2 = Mem0[r17 + 16<i32>:word32]
	Mem0[r29 + 16<i32>:word64] = r19_r18
	r2 = r16
	Mem0[r29 + 4<i32>:word32] = r2
	Mem0[r29 + 8<i32>:word64] = r21_r20
	Mem0[r29:word32] = r17
	call logmsg_function (retsize: 0;)
	r2 = Mem0[r17 + 16<i32>:word32]
	branch r2 == 0<32> l0001D1F8
	// succ:  l0001D1B0 l0001D1F8
l0001D1B0:
	r2 = Mem0[r17 + 4<i32>:word32]
	r2 = r2 + r19
	r3 = Mem0[r13 + r19:word32]
	r2 = Mem0[r2 - 4<i32>:word32]
	r4 = Mem0[r3:word32]
	r5 = Mem0[r3 + 4<i32>:word32]
	Mem0[r2 + 4<i32>:word32] = r5
	Mem0[r2:word32] = r4
	r7 = Mem0[r3 + 8<i32>:word32]
	r1 = Mem0[r3 + 12<i32>:word32]
	Mem0[r2 + 8<i32>:word32] = r7
	Mem0[r2 + 12<i32>:word32] = r1
	r4 = Mem0[r3 + 24<i32>:word32]
	r6 = Mem0[r2 + 20<i32>:word32]
	branch r4 >u r6 l0001D280
	// succ:  l0001D1E4 l0001D280
l0001D1E4:
	call fn00009560 (retsize: 0;)
	r2 = Mem0[r3 + 24<i32>:word32]
	r1 = Mem0[r3 + 16<i32>:word32]
	r19 = r19 + 8<32>
	r2 = Mem0[r17 + 16<i32>:word32]
	r18 = r18 + 2<32>
	branch r2 >u r18 l0001D1B0
	goto l0001D1FC
	// succ:  l0001D1FC l0001D1B0
l0001D1F8:
	r19_r18 = 4<64>
	r0 = 0<32>
	r2 = Mem0[r17 + 20<i32>:word32]
	branch r2 == 0<32> l0001D278
	goto l0001D20C
	// succ:  l0001D20C l0001D278
l0001D1FC:
	r0 = 0<32>
	r2 = Mem0[r17 + 20<i32>:word32]
	branch r2 == 0<32> l0001D27C
	// succ:  l0001D20C l0001D27C
l0001D20C:
	r2 = Mem0[r17 + 8<i32>:word32]
	r3 = Mem0[r17 + 4<i32>:word32]
	r3 = Mem0[r21 + r18:word32]
	r2 = Mem0[r13 + r19:word32]
	r4 = Mem0[r3:word32]
	r5 = Mem0[r3 + 4<i32>:word32]
	Mem0[r2 + 1<i32>:byte] = r5
	r7 = Mem0[r3 + 8<i32>:word32]
	r1 = Mem0[r3 + 12<i32>:word32]
	Mem0[r2 + 8<i32>:word32] = r7
	Mem0[r2 + 12<i32>:word32] = r1
	r4 = Mem0[r3 + 24<i32>:word32]
	r6 = Mem0[r2 + 20<i32>:word32]
	branch r4 >u r6 l0001D25C
	// succ:  l0001D240 l0001D25C
l0001D240:
	call fn00009560 (retsize: 0;)
	r2 = Mem0[r3 + 24<i32>:word32]
	r1 = Mem0[r3 + 16<i32>:word32]
	r19 = r19 + 4<32>
	r18 = r18 + 8<32>
	r2 = Mem0[r17 + 20<i32>:word32]
	r20 = r20 + 1<32>
	branch r2 >u r20 l0001D20C
	// succ:  l0001D25C l0001D20C
l0001D25C:
	r3 = 0x00029395<p32>
	r1 = 0xAC<32>
	Mem0[r29:word32] = r20
	// succ:  l0001D26C
l0001D26C:
	call errlog_function (retsize: 0;)
	r2 = r16
	r0 = 0xFFFFFFFF<32>
	// succ:  l0001D278
l0001D278:
	r17_r16 = Mem0[r29 + 24<i32>:word64]
	r19_r18 = Mem0[r29 + 16<i32>:word64]
	// succ:  l0001D27C
l0001D27C:
	r21_r20 = Mem0[r29 + 8<i32>:word64]
	v27 = r30
	r31 = Mem0[v27 + 4<i32>:word32]
	r30 = Mem0[v27:word32]
	r29 = v27 + 8<i32>
	return
	// succ:  assign_execute_exit
l0001D280:
	r3 = 0x0002937E<p32>
	r1 = 0xA6<32>
	Mem0[r29:word32] = r18
	goto l0001D26C
	// succ:  l0001D26C
assign_execute_exit:


// assign_check
// Return size: 0
define assign_check
assign_check_entry:
	r29 = fp
	// succ:  l0001D294
l0001D294:
	r2 = r1
	v6 = r29 - 8<i32>
	Mem0[v6:word32] = r30
	Mem0[v6 + 4<i32>:word32] = r31
	r30 = v6
	r29 = v6 - 0<i32>
	r3 = Mem0[r0 + 16<i32>:word32]
	p0 = __bit<word32,word32>(r3, 0<32>)
	branch p0 l0001D2B0
	// succ:  l0001D2A4 l0001D2B0
l0001D2A4:
	r1 = 0xB5<32>
	r3 = 0x0002933B<p32>
	goto l0001D2C8
	// succ:  l0001D2C8
l0001D2B0:
	r1 = 0xB6<32>
	r0 = 0<32>
	r4 = Mem0[r0 + 20<i32>:word32]
	r3 = r3 >>u 1<32>
	branch r4 >u r3 l0001D2D0
	// succ:  l0001D2C4 l0001D2D0
l0001D2C4:
	r3 = 0x0001D2D2<p32>
	// succ:  l0001D2C8
l0001D2C8:
	call errlog_function (retsize: 0;)
	r0 = 0xFFFFFFFF<32>
	// succ:  l0001D2D0
l0001D2D0:
	v14 = r30
	r31 = Mem0[v14 + 4<i32>:word32]
	r30 = Mem0[v14:word32]
	r29 = v14 + 8<i32>
	return
	// succ:  assign_check_exit
assign_check_exit:


// variable_execute
// Return size: 0
define variable_execute
variable_execute_entry:
	r29 = fp
	// succ:  l0001D2D4
l0001D2D4:
	r4 = 0x00029320<p32>
	r2 = r1
	v8 = r29 - 8<i32>
	Mem0[v8:word32] = r30
	Mem0[v8 + 4<i32>:word32] = r31
	r30 = v8
	r29 = v8 - 8<i32>
	call logmsg_function (retsize: 0;)
	r1 = 0x2F<32>
	Mem0[r29:word32] = r0
	r0 = 0<32>
	v12 = r30
	r31 = Mem0[v12 + 4<i32>:word32]
	r30 = Mem0[v12:word32]
	r29 = v12 + 8<i32>
	return
	// succ:  variable_execute_exit
variable_execute_exit:


// variable_check
// Return size: 0
define variable_check
variable_check_entry:
	r29 = fp
	// succ:  l0001D2F0
l0001D2F0:
	r4 = 0x000292E8<p32>
	Mem0[r29 - 16<i32>:word64] = r17_r16
	v7 = r29 - 8<i32>
	Mem0[v7:word32] = r30
	Mem0[v7 + 4<i32>:word32] = r31
	r30 = v7
	r29 = v7 - 32<i32>
	r1 = 0x37<32>
	r16 = r1
	r17 = r0
	r2 = r16
	Mem0[r29 + 16<i32>:word64] = r19_r18
	Mem0[r29 + 8<i32>:word64] = r21_r20
	call logmsg_function (retsize: 0;)
	Mem0[r29:word32] = r17
	r2 = Mem0[r17 + 20<i32>:word32]
	r3 = Mem0[r17 + 16<i32>:word32]
	branch r3 >u r2 l0001D3A4
	// succ:  l0001D324 l0001D3A4
l0001D324:
	branch p0 l0001D398
	// succ:  l0001D328 l0001D398
l0001D328:
	r20 = 0<32>
	r19_r18 = 0<64>
	r2 = Mem0[r17 + 8<i32>:word32]
	r3 = Mem0[r17 + 4<i32>:word32]
	r3 = Mem0[r21 + r19:word32]
	r2 = Mem0[r13 + r19:word32]
	r4 = Mem0[r3:word32]
	r5 = Mem0[r3 + 4<i32>:word32]
	Mem0[r2 + 1<i32>:byte] = r5
	r7 = Mem0[r3 + 8<i32>:word32]
	r1 = Mem0[r3 + 12<i32>:word32]
	Mem0[r2 + 8<i32>:word32] = r7
	Mem0[r2 + 12<i32>:word32] = r1
	r4 = Mem0[r3 + 24<i32>:word32]
	r6 = Mem0[r2 + 20<i32>:word32]
	branch r4 >u r6 l0001D384
	// succ:  l0001D368 l0001D384
l0001D368:
	call fn00009560 (retsize: 0;)
	r2 = Mem0[r3 + 24<i32>:word32]
	r1 = Mem0[r3 + 16<i32>:word32]
	r2 = Mem0[r17 + 16<i32>:word32]
	r20 = r20 + 1<32>
	branch r2 >u r20 l0001D398
	// succ:  l0001D380 l0001D398
l0001D380:
	r19 = r19 + 4<32>
	r2 = Mem0[r17 + 20<i32>:word32]
	// succ:  l0001D384
l0001D384:
	r3 = 0x00029312<p32>
	r1 = 0x3B<32>
	// succ:  l0001D390
l0001D390:
	call errlog_function (retsize: 0;)
	r2 = r16
	r18 = -1<i32>
	// succ:  l0001D398
l0001D398:
	r0 = r18
	r17_r16 = Mem0[r29 + 24<i32>:word64]
	r19_r18 = Mem0[r29 + 16<i32>:word64]
	r21_r20 = Mem0[r29 + 8<i32>:word64]
	v28 = r30
	r31 = Mem0[v28 + 4<i32>:word32]
	r30 = Mem0[v28:word32]
	r29 = v28 + 8<i32>
	return
	// succ:  variable_check_exit
l0001D3A4:
	r3 = 0x00029302<p32>
	r8 = 0x38<32>
	goto l0001D390
	// succ:  l0001D390
variable_check_exit:


// variable_ctor
// Return size: 0
define variable_ctor
variable_ctor_entry:
	r29 = fp
	// succ:  l0001D3B0
l0001D3B0:
	r18 = r0
	Mem0[r29 - 24<i32>:word64] = r19_r18
	v7 = r29 - 8<i32>
	Mem0[v7:word32] = r30
	Mem0[v7 + 4<i32>:word32] = r31
	r30 = v7
	r29 = v7 - 32<i32>
	r17 = r5
	Mem0[r29 + 24<i32>:word64] = r17_r16
	r19 = Mem0[r29 + 44<i32>:word32]
	r6 = Mem0[r29 + 40<i32>:word64]
	Mem0[r29 + 4<i32>:word32] = r19
	call node_alloc_common (retsize: 0;)
	Mem0[r29:word32] = r6
	r16 = r0
	branch r16 == 0<32> l0001D480
	// succ:  l0001D3D8 l0001D480
l0001D3D8:
	r0 = p0
	branch p0 l0001D3F8
	// succ:  l0001D3E8 l0001D3F8
l0001D3E8:
	Mem0[r29 + 2<i32>:byte] = r0
	r2 = r2 + 0x7F<32>
	r2 = r2 >>u 7<32>
	r2 = r2 * r17
	r1 = r2 << 7<32>
	// succ:  l0001D3F8
l0001D3F8:
	call fn00009550 (retsize: 0;)
	r0 = 0x80<32>
	p0 = r0 == 0<32>
	branch p0 l0001D41C
	// succ:  l0001D408 l0001D41C
l0001D408:
	Mem0[r16 + 40<i32>:word32] = r0
	r3 = 0x000292D9<p32>
	r1 = 0x5F<32>
	r2 = r18
	call errlog_function (retsize: 0;)
	// succ:  l0001D41C
l0001D41C:
	r0 = Mem0[r29 + 8<i32>:word32]
	p0 = r0
	branch p0 l0001D474
	// succ:  l0001D428 l0001D474
l0001D428:
	r3 = 0<32>
	r5 = r17 + 0xFFFFFFFF<32>
	r4 = Mem0[r16 + 8<i32>:word32]
	r2 = Mem0[r16 + 8<i32>:word32]
	__loop(0<i32>, 0x0001D450<p32>, r5)
	p0 = r17 >u 1<32>
	r3 = r3 + 4<32>
	r4 = Mem0[r12 + r3:word32]
	Mem0[r4 + 16<i32>:word32] = r2
	branch p0 l0001D474
	// succ:  l0001D450 l0001D474
l0001D450:
	r19 = r19 + 8<i32>
	r4 = Mem0[r19:word32]
	r4 = r4 + 0x7F<32>
	r5 = Mem0[r16 + 8<i32>:word32]
	r4 = r4 & 0xFFFFFF80<32>
	r2 = r2 + r4
	r3 = r3 + 4<32>
	r5 = Mem0[r28 + r3:word32]
	Mem0[r5 + 16<i32>:word32] = r2
	r19 = r19 + 8<i32>
	r4 = Mem0[r19:word32]
	// succ:  l0001D474
l0001D474:
	r0 = r16
	r17_r16 = Mem0[r29 + 24<i32>:word64]
	r19_r18 = Mem0[r29 + 16<i32>:word64]
	v21 = r30
	r31 = Mem0[v21 + 4<i32>:word32]
	r30 = Mem0[v21:word32]
	r29 = v21 + 8<i32>
	return
	// succ:  variable_ctor_exit
l0001D480:
	r3 = 0x000292CE<p32>
	r1 = 0x58<32>
	r2 = r18
	call errlog_function (retsize: 0;)
	r16 = 0<32>
	goto l0001D474
	// succ:  l0001D474
variable_ctor_exit:


// variable_dtor
// Return size: 0
define variable_dtor
variable_dtor_entry:
	r29 = fp
	// succ:  l0001D49C
l0001D49C:
	r4 = 0x000292B8<p32>
	Mem0[r29 - 16<i32>:word64] = r17_r16
	v7 = r29 - 8<i32>
	Mem0[v7:word32] = r30
	Mem0[v7 + 4<i32>:word32] = r31
	r30 = v7
	r29 = v7 - 16<i32>
	r1 = 0x6B<32>
	r16 = r1
	r17 = r0
	call logmsg_function (retsize: 0;)
	r2 = r16
	Mem0[r29:word32] = r17
	r0 = Mem0[r17 + 40<i32>:word32]
	branch r0 == 0<32> l0001D4C4
	// succ:  l0001D4C4 l0001D4C4
l0001D4C4:
	// succ:  l0001D4C4_thunk_node_free_common
l0001D4C4_thunk_node_free_common:
	call node_free_common (retsize: 0;)
	return
	// succ:  variable_dtor_exit
variable_dtor_exit:


// logmsg_function
// Return size: 0
define logmsg_function
logmsg_function_entry:
	r29 = fp
	// succ:  l0001D4D0
l0001D4D0:
	r3 = 2<32>
	v5 = r29 - 8<i32>
	Mem0[v5:word32] = r30
	Mem0[v5 + 4<i32>:word32] = r31
	r30 = v5
	r29 = v5 - 8<i32>
	r5 = Mem0[r2 + 16<i32>:word32]
	branch r3 >u r5 l0001D4F4
	// succ:  l0001D4E0 l0001D4F4
l0001D4E0:
	r0 = 0x0001D505<p32>
	r3 = 2<32>
	r5 = r29 + 0x10<32>
	call logv (retsize: 0;)
	r6 = r29 + 0x10<32>
	Mem0[r29 + 1<i32>:byte] = r6
	goto l0001D4F8
	// succ:  l0001D4F8
l0001D4F4:
	v13 = r30
	r31 = Mem0[v13 + 4<i32>:word32]
	r30 = Mem0[v13:word32]
	r29 = v13 + 8<i32>
	return
	// succ:  logmsg_function_exit
l0001D4F8:
	r0 = Mem0[r0:word32]
	r0 = Mem0[r0:word32]
	r0 = Mem0[r0:word32]
	r0 = Mem0[r0:word32]
	// succ:  l0001D4FC_thunk_reshape_execute
l0001D4FC_thunk_reshape_execute:
	call reshape_execute (retsize: 0;)
	return
	// succ:  logmsg_function_exit
logmsg_function_exit:


// reshape_execute
// Return size: 0
define reshape_execute
reshape_execute_entry:
	r29 = fp
	// succ:  l0001D500
l0001D500:
	r17_r16 = r0_r1
	Mem0[r29 - 16<i32>:word64] = r17_r16
	v8 = r29 - 8<i32>
	Mem0[v8:word32] = r30
	Mem0[v8 + 4<i32>:word32] = r31
	r30 = v8
	r29 = v8 - 128<i32>
	r2 = Mem0[r17 + 4<i32>:word32]
	Mem0[r29 + 88<i32>:word64] = r25_r24
	Mem0[r29 + 96<i32>:word64] = r23_r22
	r3 = Mem0[r17 + 8<i32>:word32]
	Mem0[r29 + 104<i32>:word64] = r21_r20
	r24 = Mem0[r2:word32]
	r23 = Mem0[r2 + 4<i32>:word32]
	r25 = Mem0[r3:word32]
	Mem0[r29 + 112<i32>:word64] = r19_r18
	r7 = Mem0[r24:word32]
	r4 = Mem0[r24 + 4<i32>:word32]
	r2 = r4 * r7
	r21 = Mem0[r24 + 8<i32>:word32]
	r22 = Mem0[r24 + 12<i32>:word32]
	r6 = r2 * r21
	Mem0[r29 + 80<i32>:word64] = r27_r26
	Mem0[r29 + 72<i32>:word32] = r7
	Mem0[r29 + 68<i32>:word32] = r4
	r18 = r6 * r22
	r2 = Mem0[r23 + 12<i32>:word32]
	branch r2 > 3<32> l0001D568
	// succ:  l0001D55C l0001D568
l0001D55C:
	r4 = r3 + (r2 << 2<32>)
	goto l0001D578
	// succ:  l0001D578
l0001D568:
	p0 = r2 > 2<32>
	branch p0 l0001D580
	// succ:  l0001D574 l0001D580
l0001D574:
	r27_r26 = 0x100000001<64>
	r3 = Mem0[r23 + 16<i32>:word32]
	r26 = 1<32>
	// succ:  l0001D578
l0001D578:
	r3 = r3 + (r2 << 2<32>)
	r27 = Mem0[r3 - 12<i32>:word32]
	// succ:  l0001D580
l0001D580:
	p0 = r2 > 1<32>
	branch p0 l0001D594
	// succ:  l0001D588 l0001D594
l0001D588:
	r3 = Mem0[r23 + 16<i32>:word32]
	r4 = r3 + (r2 << 2<32>)
	goto l0001D5A0
	// succ:  l0001D5A0
l0001D594:
	p0 = r2 > 0<32>
	branch p0 l0001D5A8
	// succ:  l0001D59C l0001D5A8
l0001D59C:
	r19 = 1<32>
	r20 = 1<32>
	r19 = 1<32>
	r3 = Mem0[r23 + 16<i32>:word32]
	// succ:  l0001D5A0
l0001D5A0:
	r2 = r3 + (r2 << 2<32>)
	r20 = Mem0[r2 - 4<i32>:word32]
	// succ:  l0001D5A8
l0001D5A8:
	r4 = 0x0002944F<p32>
	r1 = 0x3F<32>
	r2 = r16
	call logmsg_function (retsize: 0;)
	Mem0[r29:word32] = r17
	r3 = 0x0002946C<p32>
	r1 = 0x41<32>
	r2 = Mem0[r25 + 20<i32>:word32]
	r4 = Mem0[r24 + 24<i32>:word32]
	branch r4 >u r2 l0001D770
	// succ:  l0001D5D8 l0001D770
l0001D5D8:
	r3 = 0x0001D5FE<p32>
	r2 = r27 >>u 0x1F<32>
	r1 = 0x43<32>
	r2 = r2 + (r26 >>u 0x1F<32>)
	r2 = r2 + (r19 >>u 0x1F<32>)
	r2 = r2 + (r20 >>u 0x1F<32>)
	r2 = 0<32> - r26
	r0 = r18
	r2 = r27 * r2
	r2 = r2 * r19
	r18 = p0
	p0 = r27 > 0xFFFFFFFF<32>
	Mem0[r29 + 14<i32>:byte] = r18
	r18 = p0
	p0 = r19 > 0xFFFFFFFF<32>
	Mem0[r29 + 15<i32>:byte] = r18
	p0 = r20 > 0xFFFFFFFF<32>
	Mem0[r29 + 13<i32>:byte] = r18
	call fn00009760 (retsize: 0;)
	Mem0[r29 + 64<i32>:word32] = r18
	r18 = r0
	r3 = Mem0[r29 + 56<i32>:word32]
	r0 = Mem0[r25 + 16<i32>:word32]
	p2 = r3
	r26 = r18 + 0<32>
	r3 = Mem0[r29 + 52<i32>:word32]
	Mem0[r25:word32] = r26
	p0 = r3
	r19 = r18 + 0<32>
	r3 = Mem0[r29 + 60<i32>:word32]
	Mem0[r25 + 8<i32>:word32] = r19
	p1 = r3
	r27 = r18 + 0<32>
	r3 = Mem0[r29 + 64<i32>:word32]
	Mem0[r25 + 4<i32>:word32] = r27
	p0 = r3
	r18 = r20 + 0<32>
	Mem0[r25 + 12<i32>:word32] = r18
	r2 = Mem0[r24 + 24<i32>:word32]
	Mem0[r25 + 24<i32>:word32] = r2
	call vmemcpy_asm (retsize: 0;)
	r1 = Mem0[r24 + 16<i32>:word32]
	r2 = Mem0[r24 + 24<i32>:word32]
	r2 = Mem0[r17 + 20<i32>:word32]
	branch r2 == 3<32> l0001D71C
	// succ:  l0001D6A4 l0001D71C
l0001D6A4:
	r2 = Mem0[r17 + 8<i32>:word32]
	r3 = Mem0[r17 + 4<i32>:word32]
	r3 = 0x00029496<p32>
	r4 = Mem0[r3 + 8<i32>:word32]
	r2 = Mem0[r2 + 4<i32>:word32]
	r7 = Mem0[r4:word32]
	r5 = Mem0[r4 + 4<i32>:word32]
	Mem0[r2 + 4<i32>:word32] = r5
	Mem0[r2:word32] = r7
	r0 = Mem0[r4 + 8<i32>:word32]
	r6 = Mem0[r4 + 12<i32>:word32]
	Mem0[r2 + 8<i32>:word32] = r0
	Mem0[r2 + 12<i32>:word32] = r6
	r5 = Mem0[r4 + 24<i32>:word32]
	r7 = Mem0[r2 + 20<i32>:word32]
	branch r5 >u r7 l0001D770
	// succ:  l0001D6D4 l0001D770
l0001D6D4:
	call fn00009560 (retsize: 0;)
	r2 = Mem0[r4 + 24<i32>:word32]
	r1 = Mem0[r4 + 16<i32>:word32]
	r1 = 0x54<32>
	r2 = Mem0[r17 + 8<i32>:word32]
	r3 = Mem0[r17 + 4<i32>:word32]
	r3 = 0x00029496<p32>
	r4 = Mem0[r3 + 12<i32>:word32]
	r2 = Mem0[r2 + 8<i32>:word32]
	r7 = Mem0[r4:word32]
	r5 = Mem0[r4 + 4<i32>:word32]
	Mem0[r2 + 4<i32>:word32] = r5
	Mem0[r2:word32] = r7
	r0 = Mem0[r4 + 8<i32>:word32]
	r6 = Mem0[r4 + 12<i32>:word32]
	Mem0[r2 + 8<i32>:word32] = r0
	Mem0[r2 + 12<i32>:word32] = r6
	r5 = Mem0[r4 + 24<i32>:word32]
	r7 = Mem0[r2 + 20<i32>:word32]
	branch r5 >u r7 l0001D770
	// succ:  l0001D714 l0001D770
l0001D714:
	call fn00009560 (retsize: 0;)
	r2 = Mem0[r4 + 24<i32>:word32]
	r1 = Mem0[r4 + 16<i32>:word32]
	// succ:  l0001D71C
l0001D71C:
	r4 = 0x000294A5<p32>
	r2 = Mem0[r23:word32]
	r3 = Mem0[r23 + 4<i32>:word32]
	r1 = 0x5D<32>
	r5 = Mem0[r23 + 8<i32>:word32]
	r6 = Mem0[r23 + 12<i32>:word32]
	r7 = Mem0[r29 + 68<i32>:word64]
	Mem0[r29 + 44<i32>:word32] = r18
	Mem0[r29 + 40<i32>:word32] = r19
	Mem0[r29 + 28<i32>:word32] = r6
	Mem0[r29 + 36<i32>:word32] = r27
	Mem0[r29 + 32<i32>:word32] = r26
	Mem0[r29 + 24<i32>:word32] = r5
	Mem0[r29 + 20<i32>:word32] = r3
	r3 = Mem0[r29 + 72<i32>:word64]
	Mem0[r29 + 8<i32>:word32] = r21
	r2 = r16
	Mem0[r29 + 16<i32>:word32] = r2
	Mem0[r29 + 12<i32>:word32] = r22
	Mem0[r29 + 4<i32>:word32] = r7
	Mem0[r29:word32] = r3
	call logmsg_function (retsize: 0;)
	r0 = 0<32>
	// succ:  l0001D75C
l0001D75C:
	r17_r16 = Mem0[r29 + 120<i32>:word64]
	r19_r18 = Mem0[r29 + 112<i32>:word64]
	r21_r20 = Mem0[r29 + 104<i32>:word64]
	r23_r22 = Mem0[r29 + 96<i32>:word64]
	r25_r24 = Mem0[r29 + 88<i32>:word64]
	r27_r26 = Mem0[r29 + 80<i32>:word64]
	v38 = r30
	r31 = Mem0[v38 + 4<i32>:word32]
	r30 = Mem0[v38:word32]
	r29 = v38 + 8<i32>
	return
	// succ:  reshape_execute_exit
l0001D770:
	call errlog_function (retsize: 0;)
	r2 = r16
	goto l0001D75C
	// succ:  l0001D75C
reshape_execute_exit:


// reshape_check
// Return size: 0
define reshape_check
reshape_check_entry:
	r29 = fp
	// succ:  l0001D780
l0001D780:
	r0 = 0<32>
	// succ:  l0001D780_thunk_reshape_check__merged
l0001D780_thunk_reshape_check__merged:
	call reshape_check__merged (retsize: 0;)
	return
	// succ:  reshape_check_exit
reshape_check_exit:


// reshape_check__merged
// Return size: 0
define reshape_check__merged
reshape_check__merged_entry:
	r29 = fp
	// succ:  l0001D784
l0001D784:
	r4 = 0x0002941D<p32>
	p0 = r2 == 1<32>
	v7 = r29 - 8<i32>
	Mem0[v7:word32] = r30
	Mem0[v7 + 4<i32>:word32] = r31
	r30 = v7
	r29 = v7 - 40<i32>
	r17_r16 = r0_r1
	r19 = 0x6F<32>
	Mem0[r29 + 32<i32>:word64] = r17_r16
	Mem0[r29 + 24<i32>:word64] = r19_r18
	r18 = 0x00029436<p32>
	r1 = 0x6C<32>
	branch p0 l0001D7C4
	// succ:  l0001D7B0 l0001D7C4
l0001D7B0:
	Mem0[r29 + 16<i32>:word64] = r21_r20
	Mem0[r29 + 8<i32>:word64] = r23_r22
	r23_r22 = 0x200000001<64>
	r19 = 0x66<32>
	r21_r20 = 0x6400000065<64>
	r1 = 0x63<32>
	goto l0001D7DC
	// succ:  l0001D7DC
l0001D7C4:
	r4 = 0x000293CA<p32>
	r23_r22 = 0x400000003<64>
	r21_r20 = 0x6D0000006E<64>
	r18 = 0x00029403<p32>
	// succ:  l0001D7DC
l0001D7DC:
	call logmsg_function (retsize: 0;)
	r2 = r16
	Mem0[r29:word32] = r17
	r1 = r21
	r2 = Mem0[r17 + 16<i32>:word32]
	branch r2 == r23 l0001D808
	// succ:  l0001D7F4 l0001D808
l0001D7F4:
	r3 = 0x0001D828<p32>
	call errlog_function (retsize: 0;)
	r2 = r16
	// succ:  l0001D7FC
l0001D7FC:
	goto l0001D834
	// succ:  l0001D834
l0001D808:
	r1 = r20
	r2 = Mem0[r17 + 20<i32>:word32]
	branch r2 == r22 l0001D820
	// succ:  l0001D818 l0001D820
l0001D818:
	r3 = 0x0001D837<p32>
	goto l0001D7FC
	// succ:  l0001D7FC
l0001D820:
	r2 = r16
	r1 = r19
	r4 = r18
	Mem0[r29:word32] = r17
	call logmsg_function (retsize: 0;)
	r0 = 0<32>
	// succ:  l0001D834
l0001D834:
	r17_r16 = Mem0[r29 + 32<i32>:word64]
	r19_r18 = Mem0[r29 + 24<i32>:word64]
	r21_r20 = Mem0[r29 + 16<i32>:word64]
	r23_r22 = Mem0[r29 + 8<i32>:word64]
	v23 = r30
	r31 = Mem0[v23 + 4<i32>:word32]
	r30 = Mem0[v23:word32]
	r29 = v23 + 8<i32>
	return
	// succ:  reshape_check__merged_exit
reshape_check__merged_exit:


// qreshape_check
// Return size: 0
define qreshape_check
qreshape_check_entry:
	r29 = fp
	// succ:  l0001D840
l0001D840:
	r1 = 1<32>
	// succ:  l0001D840_thunk_reshape_check__merged
l0001D840_thunk_reshape_check__merged:
	call reshape_check__merged (retsize: 0;)
	return
	// succ:  qreshape_check_exit
qreshape_check_exit:


// logmsg_function
// Return size: 0
define logmsg_function
logmsg_function_entry:
	r29 = fp
	// succ:  l0001D844
l0001D844:
	r3 = 2<32>
	v5 = r29 - 8<i32>
	Mem0[v5:word32] = r30
	Mem0[v5 + 4<i32>:word32] = r31
	r30 = v5
	r29 = v5 - 8<i32>
	r5 = Mem0[r2 + 16<i32>:word32]
	branch r3 >u r5 l0001D868
	// succ:  l0001D854 l0001D868
l0001D854:
	r0 = 0x0001D871<p32>
	r3 = 2<32>
	r5 = r29 + 0x10<32>
	call logv (retsize: 0;)
	r6 = r29 + 0x10<32>
	Mem0[r29 + 1<i32>:byte] = r6
	// succ:  l0001D85C_thunk_errlog_function
l0001D85C_thunk_errlog_function:
	call errlog_function (retsize: 0;)
	return
	// succ:  logmsg_function_exit
l0001D868:
	v13 = r30
	r31 = Mem0[v13 + 4<i32>:word32]
	r30 = Mem0[v13:word32]
	r29 = v13 + 8<i32>
	return
	// succ:  logmsg_function_exit
logmsg_function_exit:


// errlog_function
// Return size: 0
define errlog_function
errlog_function_entry:
	r29 = fp
	// succ:  l0001D86C
l0001D86C:
	r0 = 0x000293AD<p32>
	r4 = r3
	v8 = r29 - 8<i32>
	Mem0[v8:word32] = r30
	Mem0[v8 + 4<i32>:word32] = r31
	r30 = v8
	r29 = v8 - 8<i32>
	r3 = 0<32>
	r5 = r29 + 0x10<32>
	r6 = r29 + 0x10<32>
	Mem0[r29 + 1<i32>:byte] = r6
	v13 = r30
	r31 = Mem0[v13 + 4<i32>:word32]
	r30 = Mem0[v13:word32]
	r29 = v13 + 8<i32>
	return
	// succ:  errlog_function_exit
errlog_function_exit:


// slice_execute_f
// Return size: 0
define slice_execute_f
slice_execute_f_entry:
	r29 = fp
	// succ:  l0001D890
l0001D890:
	r4 = 4<32>
	// succ:  l0001D890_thunk_slice_impl
l0001D890_thunk_slice_impl:
	call slice_impl (retsize: 0;)
	return
	// succ:  slice_execute_f_exit
slice_execute_f_exit:


// slice_check_f
// Return size: 0
define slice_check_f
slice_check_f_entry:
	r29 = fp
	// succ:  l0001D894
l0001D894:
	r4 = 0x000294F3<p32>
	Mem0[r29 - 16<i32>:word64] = r17_r16
	v7 = r29 - 8<i32>
	Mem0[v7:word32] = r30
	Mem0[v7 + 4<i32>:word32] = r31
	r30 = v7
	r29 = v7 - 16<i32>
	r1 = 0x85<32>
	r16 = r1
	r17 = r0
	call logmsg_function (retsize: 0;)
	r2 = r16
	Mem0[r29:word32] = r17
	r1 = 0x86<32>
	r2 = Mem0[r17 + 16<i32>:word32]
	branch r2 == 3<32> l0001D8C8
	// succ:  l0001D8C0 l0001D8C8
l0001D8C0:
	r3 = 0x0001D8CE<p32>
	goto l0001D8E4
	// succ:  l0001D8E4
l0001D8C8:
	r1 = 0x87<32>
	r0 = 0<32>
	r2 = Mem0[r17 + 20<i32>:word32]
	branch r2 == 1<32> l0001D8EC
	// succ:  l0001D8DC l0001D8EC
l0001D8DC:
	r3 = 0x0001D919<p32>
	call errlog_function (retsize: 0;)
	r2 = r16
	goto l0001D8E8
	// succ:  l0001D8E8
l0001D8E4:
	r2 = r16
	// succ:  l0001D8E8
l0001D8E8:
	r0 = 0xFFFFFFFF<32>
	// succ:  l0001D8EC
l0001D8EC:
	r17_r16 = Mem0[r29 + 8<i32>:word64]
	v16 = r30
	r31 = Mem0[v16 + 4<i32>:word32]
	r30 = Mem0[v16:word32]
	r29 = v16 + 8<i32>
	return
	// succ:  slice_check_f_exit
slice_check_f_exit:


// slice_execute_8
// Return size: 0
define slice_execute_8
slice_execute_8_entry:
	r29 = fp
	// succ:  l0001D8F0
l0001D8F0:
	r1 = 1<32>
	// succ:  l0001D8F0_thunk_slice_impl
l0001D8F0_thunk_slice_impl:
	call slice_impl (retsize: 0;)
	return
	// succ:  slice_execute_8_exit
slice_execute_8_exit:


// slice_check_8
// Return size: 0
define slice_check_8
slice_check_8_entry:
	r29 = fp
	// succ:  l0001D8F4
l0001D8F4:
	r4 = 0x000294F3<p32>
	Mem0[r29 - 16<i32>:word64] = r17_r16
	v7 = r29 - 8<i32>
	Mem0[v7:word32] = r30
	Mem0[v7 + 4<i32>:word32] = r31
	r30 = v7
	r29 = v7 - 16<i32>
	r1 = 0x8D<32>
	r16 = r1
	r17 = r0
	call logmsg_function (retsize: 0;)
	r2 = r16
	Mem0[r29:word32] = r17
	r1 = 0x8E<32>
	r2 = Mem0[r17 + 16<i32>:word32]
	branch r2 == 3<32> l0001D928
	// succ:  l0001D920 l0001D928
l0001D920:
	r3 = 0x0001D94E<p32>
	goto l0001D944
	// succ:  l0001D944
l0001D928:
	r1 = 0x8F<32>
	r0 = 0<32>
	r2 = Mem0[r17 + 20<i32>:word32]
	branch r2 == 1<32> l0001D94C
	// succ:  l0001D93C l0001D94C
l0001D93C:
	r3 = 0x0001D959<p32>
	call errlog_function (retsize: 0;)
	r2 = r16
	goto l0001D948
	// succ:  l0001D948
l0001D944:
	r2 = r16
	// succ:  l0001D948
l0001D948:
	r0 = 0xFFFFFFFF<32>
	// succ:  l0001D94C
l0001D94C:
	r17_r16 = Mem0[r29 + 8<i32>:word64]
	v16 = r30
	r31 = Mem0[v16 + 4<i32>:word32]
	r30 = Mem0[v16:word32]
	r29 = v16 + 8<i32>
	return
	// succ:  slice_check_8_exit
slice_check_8_exit:


// slice_execute_q8
// Return size: 0
define slice_execute_q8
slice_execute_q8_entry:
	r29 = fp
	// succ:  l0001D950
l0001D950:
	r17_r16 = r1_r0
	Mem0[r29 - 16<i32>:word64] = r17_r16
	v8 = r29 - 8<i32>
	Mem0[v8:word32] = r30
	Mem0[v8 + 4<i32>:word32] = r31
	r30 = v8
	r29 = v8 - 8<i32>
	r2 = Mem0[r16 + 4<i32>:word32]
	r4 = Mem0[r16 + 8<i32>:word32]
	r3 = Mem0[r2 + 12<i32>:word32]
	r2 = Mem0[r4 + 4<i32>:word32]
	r7 = Mem0[r3:word32]
	r5 = Mem0[r3 + 4<i32>:word32]
	Mem0[r2 + 4<i32>:word32] = r5
	Mem0[r2:word32] = r7
	r4 = Mem0[r3 + 8<i32>:word32]
	r0 = Mem0[r3 + 12<i32>:word32]
	Mem0[r2 + 12<i32>:word32] = r0
	Mem0[r2 + 8<i32>:word32] = r4
	r4 = Mem0[r3 + 24<i32>:word32]
	r6 = Mem0[r2 + 20<i32>:word32]
	branch r4 >u r6 l0001D988
	// succ:  l0001D980 l0001D988
l0001D980:
	call fn00009560 (retsize: 0;)
	r2 = Mem0[r3 + 24<i32>:word32]
	r1 = Mem0[r3 + 16<i32>:word32]
	// succ:  l0001D988
l0001D988:
	r2 = Mem0[r16 + 8<i32>:word32]
	r3 = Mem0[r16 + 4<i32>:word32]
	r3 = Mem0[r3 + 16<i32>:word32]
	r2 = Mem0[r2 + 8<i32>:word32]
	r4 = Mem0[r3:word32]
	r5 = Mem0[r3 + 4<i32>:word32]
	Mem0[r2 + 4<i32>:word32] = r5
	Mem0[r2:word32] = r4
	r7 = Mem0[r3 + 8<i32>:word32]
	r1 = Mem0[r3 + 12<i32>:word32]
	Mem0[r2 + 8<i32>:word32] = r7
	Mem0[r2 + 12<i32>:word32] = r1
	r4 = Mem0[r3 + 24<i32>:word32]
	r6 = Mem0[r2 + 20<i32>:word32]
	branch r4 >u r6 l0001D9B8
	// succ:  l0001D9B0 l0001D9B8
l0001D9B0:
	call fn00009560 (retsize: 0;)
	r2 = Mem0[r3 + 24<i32>:word32]
	r1 = Mem0[r3 + 16<i32>:word32]
	// succ:  l0001D9B8
l0001D9B8:
	r1_r0 = r17_r16
	r2 = 1<32>
	r17_r16 = Mem0[r29:word64]
	v19 = r30
	r31 = Mem0[v19 + 4<i32>:word32]
	r30 = Mem0[v19:word32]
	r29 = v19 + 8<i32>
	// succ:  l0001D9C4_thunk_slice_impl
l0001D9C4_thunk_slice_impl:
	call slice_impl (retsize: 0;)
	return
	// succ:  slice_execute_q8_exit
slice_execute_q8_exit:


// slice_check_q8
// Return size: 0
define slice_check_q8
slice_check_q8_entry:
	r29 = fp
	// succ:  l0001D9D0
l0001D9D0:
	r4 = 0x000294F3<p32>
	Mem0[r29 - 16<i32>:word64] = r17_r16
	v7 = r29 - 8<i32>
	Mem0[v7:word32] = r30
	Mem0[v7 + 4<i32>:word32] = r31
	r30 = v7
	r29 = v7 - 16<i32>
	r1 = 0x95<32>
	r16 = r1
	r17 = r0
	call logmsg_function (retsize: 0;)
	r2 = r16
	Mem0[r29:word32] = r17
	r1 = 0x96<32>
	r2 = Mem0[r17 + 16<i32>:word32]
	branch r2 == 5<32> l0001DA04
	// succ:  l0001D9FC l0001DA04
l0001D9FC:
	r3 = 0x0001DA0E<p32>
	goto l0001DA20
	// succ:  l0001DA20
l0001DA04:
	r1 = 0x97<32>
	r0 = 0<32>
	r2 = Mem0[r17 + 20<i32>:word32]
	branch r2 == 3<32> l0001DA28
	// succ:  l0001DA18 l0001DA28
l0001DA18:
	r3 = 0x0001DA19<p32>
	call errlog_function (retsize: 0;)
	r2 = r16
	goto l0001DA24
	// succ:  l0001DA24
l0001DA20:
	r2 = r16
	// succ:  l0001DA24
l0001DA24:
	r0 = 0xFFFFFFFF<32>
	// succ:  l0001DA28
l0001DA28:
	r17_r16 = Mem0[r29 + 8<i32>:word64]
	v16 = r30
	r31 = Mem0[v16 + 4<i32>:word32]
	r30 = Mem0[v16:word32]
	r29 = v16 + 8<i32>
	return
	// succ:  slice_check_q8_exit
slice_check_q8_exit:


// logmsg_function
// Return size: 0
define logmsg_function
logmsg_function_entry:
	r29 = fp
	// succ:  l0001DA2C
l0001DA2C:
	r3 = 2<32>
	v5 = r29 - 8<i32>
	Mem0[v5:word32] = r30
	Mem0[v5 + 4<i32>:word32] = r31
	r30 = v5
	r29 = v5 - 8<i32>
	r5 = Mem0[r2 + 16<i32>:word32]
	branch r3 >u r5 l0001DA50
	// succ:  l0001DA3C l0001DA50
l0001DA3C:
	r0 = 0x0001DA5C<p32>
	r3 = 2<32>
	r5 = r29 + 0x10<32>
	call logv (retsize: 0;)
	r6 = r29 + 0x10<32>
	Mem0[r29 + 1<i32>:byte] = r6
	// succ:  l0001DA44_thunk_errlog_function
l0001DA44_thunk_errlog_function:
	call errlog_function (retsize: 0;)
	return
	// succ:  logmsg_function_exit
l0001DA50:
	v13 = r30
	r31 = Mem0[v13 + 4<i32>:word32]
	r30 = Mem0[v13:word32]
	r29 = v13 + 8<i32>
	return
	// succ:  logmsg_function_exit
logmsg_function_exit:


// errlog_function
// Return size: 0
define errlog_function
errlog_function_entry:
	r29 = fp
	// succ:  l0001DA54
l0001DA54:
	r0 = 0x000294D8<p32>
	r4 = r3
	v8 = r29 - 8<i32>
	Mem0[v8:word32] = r30
	Mem0[v8 + 4<i32>:word32] = r31
	r30 = v8
	r29 = v8 - 8<i32>
	r3 = 0<32>
	r5 = r29 + 0x10<32>
	r6 = r29 + 0x10<32>
	Mem0[r29 + 1<i32>:byte] = r6
	v13 = r30
	r31 = Mem0[v13 + 4<i32>:word32]
	r30 = Mem0[v13:word32]
	r29 = v13 + 8<i32>
	return
	// succ:  errlog_function_exit
errlog_function_exit:


// slice_impl
// Return size: 0
define slice_impl
slice_impl_entry:
	r29 = fp
	// succ:  l0001DA78
l0001DA78:
	r4 = 0x00029521<p32>
	v6 = r29 - 8<i32>
	Mem0[v6:word32] = r30
	Mem0[v6 + 4<i32>:word32] = r31
	r30 = v6
	r29 = v6 - 88<i32>
	r3 = Mem0[r0 + 4<i32>:word32]
	r5 = Mem0[r0 + 8<i32>:word32]
	r17_r16 = r1_r2
	r1 = 0x40<32>
	Mem0[r29 + 56<i32>:word64] = r23_r22
	Mem0[r29 + 80<i32>:word64] = r17_r16
	r2 = r17
	r22 = Mem0[r3:word32]
	r23 = Mem0[r5:word32]
	Mem0[r29 + 72<i32>:word64] = r19_r18
	Mem0[r29 + 64<i32>:word64] = r21_r20
	Mem0[r29 + 48<i32>:word64] = r25_r24
	r20 = Mem0[r3 + 8<i32>:word32]
	Mem0[r29 + 40<i32>:word64] = r27_r26
	r24 = Mem0[r3 + 4<i32>:word32]
	r18 = Mem0[r22 + 16<i32>:word32]
	call logmsg_function (retsize: 0;)
	r19 = Mem0[r23 + 16<i32>:word32]
	Mem0[r29:word32] = r0
	r1 = 0x54<32>
	r3 = Mem0[r20:word32]
	r6 = Mem0[r20 + 4<i32>:word32]
	p0 = r3 == 0xFFFFFFFF<32>
	p1 = r6 == 0xFFFFFFFF<32>
	r13 = Mem0[r22:word32]
	r2 = Mem0[r24:word32]
	r8 = Mem0[r20 + 8<i32>:word32]
	r14 = Mem0[r20 + 12<i32>:word32]
	r20 = r13 - r2
	r20 = r3 + 0<32>
	r9 = Mem0[r22 + 4<i32>:word32]
	r12 = Mem0[r24 + 4<i32>:word32]
	r3 = r20 * r16
	r21 = r9 - r12
	p2 = r8 == 0xFFFFFFFF<32>
	r4 = Mem0[r22 + 8<i32>:word32]
	r21 = r6 + 0<32>
	p0 = r14 == 0xFFFFFFFF<32>
	r5 = Mem0[r24 + 8<i32>:word32]
	r6 = Mem0[r24 + 12<i32>:word32]
	r3 = r3 * r21
	r26 = r4 - r5
	r7 = Mem0[r22 + 12<i32>:word32]
	r26 = r8 + 0<32>
	r8 = r7 - r6
	r8 = r14 + 0<32>
	r3 = r3 * r26
	r3 = 0x00029537<p32>
	r14 = r3 * r8
	r15 = Mem0[r23 + 20<i32>:word32]
	branch r14 >u r15 l0001DBEC
	// succ:  l0001DB40 l0001DBEC
l0001DB40:
	r3 = 0x0001DB49<p32>
	r1 = 0x55<32>
	p0 = r20 > 0<32>
	branch p0 l0001DBEC
	// succ:  l0001DB54 l0001DBEC
l0001DB54:
	r1 = 0x56<32>
	r3 = 0x00029550<p32>
	p1 = r21 > 0<32>
	r1 = 0x57<32>
	r0 = p1
	branch p1 l0001DBEC
	// succ:  l0001DB74 l0001DBEC
l0001DB74:
	Mem0[r29 + 6<i32>:byte] = r0
	r3 = 0x0001DB9F<p32>
	p1 = r26 > 0<32>
	r1 = 0x58<32>
	r0 = p1
	branch p1 l0001DBEC
	// succ:  l0001DB90 l0001DBEC
l0001DB90:
	Mem0[r29 + 8<i32>:byte] = r0
	r3 = 0x0001DBAA<p32>
	p1 = r8 > 0<32>
	branch p1 l0001DBEC
	// succ:  l0001DBA0 l0001DBEC
l0001DBA0:
	r1 = 0x59<32>
	r3 = 0x00029571<p32>
	r15 = r20 + r2
	branch r13 >u r15 l0001DBEC
	// succ:  l0001DBB4 l0001DBEC
l0001DBB4:
	r3 = 0x0001DBC4<p32>
	r1 = 0x5A<32>
	r13 = r21 + r12
	branch r9 >u r13 l0001DBEC
	// succ:  l0001DBC8 l0001DBEC
l0001DBC8:
	r3 = 0x0001DBD3<p32>
	r1 = 0x5B<32>
	r13 = r26 + r5
	branch r4 >u r13 l0001DBEC
	// succ:  l0001DBDC l0001DBEC
l0001DBDC:
	r3 = 0x0001DBE2<p32>
	r1 = 0x5C<32>
	r13 = r8 + r6
	branch r7 >u r13 l0001DBFC
	goto l0001DBF0
	// succ:  l0001DBF0 l0001DBFC
l0001DBEC:
	call errlog_function (retsize: 0;)
	r2 = r17
	goto l0001DBF4
	// succ:  l0001DBF4
l0001DBF0:
	r2 = r17
	// succ:  l0001DBF4
l0001DBF4:
	goto l0001DCCC
	// succ:  l0001DCCC
l0001DBFC:
	r0 = 0<32>
	Mem0[r23 + 24<i32>:word32] = r14
	Mem0[r23 + 4<i32>:word32] = r21
	Mem0[r23:word32] = r20
	Mem0[r23 + 8<i32>:word32] = r26
	branch p0 l0001DCCC
	// succ:  l0001DC18 l0001DCCC
l0001DC18:
	Mem0[r23 + 12<i32>:word32] = r8
	r2 = r12 + r2 * r9
	r3 = r7 * r4
	r12 = r7
	r13 = r8 * r26
	r23 = r7 * r16
	r7 = 0<32>
	r4 = r5 + r4 * r2
	r9 = r3 * r9
	r25 = r3 * r16
	r17 = r8 * r16
	r3 = r16
	r12 = r6 + r12 * r4
	r2 = r13 * r16
	Mem0[r29 + 7<i32>:byte] = r2
	r3 = r18 + r3 * r12
	Mem0[r29 + 12<i32>:word32] = r1
	// succ:  l0001DC5C
l0001DC5C:
	r24 = r3
	r27 = 0<32>
	r0 = Mem0[r29 + 24<i32>:word64]
	Mem0[r29 + 16<i32>:word32] = r3
	p0 = r0
	Mem0[r29 + 20<i32>:word32] = r7
	branch p0 l0001DCB4
	// succ:  l0001DC74 l0001DCB4
l0001DC74:
	r22 = r26
	r16 = r24
	r18 = r19
	r0 = Mem0[r29 + 32<i32>:word64]
	p0 = r0
	branch p0 l0001DCA8
	// succ:  l0001DC88 l0001DCA8
l0001DC88:
	call fn00009560 (retsize: 0;)
	r1_r0 = r16_r18
	r2 = r17
	r16 = r16 + r23
	r18 = r18 + r17
	r22 = r22 + 0xFFFFFFFF<32>
	branch r22 == 0<32> l0001DC88
	// succ:  l0001DCA4 l0001DC88
l0001DCA4:
	r19 = r19 + r2
	// succ:  l0001DCA8
l0001DCA8:
	r24 = r24 + r25
	r27 = r27 + 1<32>
	branch r27 == r21 l0001DC74
	goto l0001DCB8
	// succ:  l0001DCB8 l0001DC74
l0001DCB4:
	r7 = Mem0[r29 + 20<i32>:word64]
	r2 = Mem0[r29 + 12<i32>:word64]
	// succ:  l0001DCB8
l0001DCB8:
	r3 = Mem0[r29 + 16<i32>:word32]
	r3 = r3 + r2
	r7 = r7 + 1<32>
	branch r7 == r20 l0001DC5C
	// succ:  l0001DCCC l0001DC5C
l0001DCCC:
	r17_r16 = Mem0[r29 + 80<i32>:word64]
	r19_r18 = Mem0[r29 + 72<i32>:word64]
	r21_r20 = Mem0[r29 + 64<i32>:word64]
	r23_r22 = Mem0[r29 + 56<i32>:word64]
	r25_r24 = Mem0[r29 + 48<i32>:word64]
	r27_r26 = Mem0[r29 + 40<i32>:word64]
	v42 = r30
	r31 = Mem0[v42 + 4<i32>:word32]
	r30 = Mem0[v42:word32]
	r29 = v42 + 8<i32>
	return
	// succ:  slice_impl_exit
slice_impl_exit:


// split_execute_f
// Return size: 0
define split_execute_f
split_execute_f_entry:
	r29 = fp
	// succ:  l0001DCE0
l0001DCE0:
	r4 = 4<32>
	// succ:  l0001DCE0_thunk_split_impl
l0001DCE0_thunk_split_impl:
	call split_impl (retsize: 0;)
	return
	// succ:  split_execute_f_exit
split_execute_f_exit:


// split_check_f
// Return size: 0
define split_check_f
split_check_f_entry:
	r29 = fp
	// succ:  l0001DCE8
l0001DCE8:
	r4 = 0x000295C8<p32>
	Mem0[r29 - 16<i32>:word64] = r17_r16
	v7 = r29 - 8<i32>
	Mem0[v7:word32] = r30
	Mem0[v7 + 4<i32>:word32] = r31
	r30 = v7
	r29 = v7 - 16<i32>
	r1 = 0x75<32>
	r16 = r1
	r17 = r0
	call logmsg_function (retsize: 0;)
	r2 = r16
	Mem0[r29:word32] = r17
	r1 = 0x76<32>
	r2 = Mem0[r17 + 16<i32>:word32]
	branch r2 == 2<32> l0001DD1C
	// succ:  l0001DD14 l0001DD1C
l0001DD14:
	r3 = 0x0001DD23<p32>
	goto l0001DD38
	// succ:  l0001DD38
l0001DD1C:
	r1 = 0x77<32>
	r0 = 0<32>
	r2 = Mem0[r17 + 20<i32>:word32]
	branch r2 == 0<32> l0001DD40
	// succ:  l0001DD30 l0001DD40
l0001DD30:
	r3 = 0x0001DD6E<p32>
	call errlog_function (retsize: 0;)
	r2 = r16
	goto l0001DD3C
	// succ:  l0001DD3C
l0001DD38:
	r2 = r16
	// succ:  l0001DD3C
l0001DD3C:
	r0 = 0xFFFFFFFF<32>
	// succ:  l0001DD40
l0001DD40:
	r17_r16 = Mem0[r29 + 8<i32>:word64]
	v16 = r30
	r31 = Mem0[v16 + 4<i32>:word32]
	r30 = Mem0[v16:word32]
	r29 = v16 + 8<i32>
	return
	// succ:  split_check_f_exit
split_check_f_exit:


// qsplit_execute_8
// Return size: 0
define qsplit_execute_8
qsplit_execute_8_entry:
	r29 = fp
	// succ:  l0001DD44
l0001DD44:
	r16 = r0
	Mem0[r29 - 16<i32>:word64] = r17_r16
	v7 = r29 - 8<i32>
	Mem0[v7:word32] = r30
	Mem0[v7 + 4<i32>:word32] = r31
	r30 = v7
	r29 = v7 - 16<i32>
	r18 = r1
	r2 = Mem0[r16 + 4<i32>:word32]
	Mem0[r29:word64] = r19_r18
	r19 = Mem0[r16 + 20<i32>:word32]
	r4 = Mem0[r16 + 8<i32>:word32]
	r17 = r19 + 0xFFFFFFFE<32>
	r3 = Mem0[r2 + 8<i32>:word32]
	r2 = Mem0[r15 + r17 * 4<32>:word32]
	r7 = Mem0[r3:word32]
	Mem0[r2:byte] = r7
	Mem0[r2 + 4<i32>:word32] = r4
	Mem0[r2 + 8<i32>:word32] = r5
	r7 = Mem0[r3 + 12<i32>:word32]
	Mem0[r2 + 12<i32>:word32] = r7
	r4 = Mem0[r3 + 24<i32>:word32]
	r5 = Mem0[r2 + 20<i32>:word32]
	branch r4 >u r5 l0001DD94
	// succ:  l0001DD8C l0001DD94
l0001DD8C:
	call fn00009560 (retsize: 0;)
	r2 = Mem0[r3 + 24<i32>:word32]
	r1 = Mem0[r3 + 16<i32>:word32]
	// succ:  l0001DD94
l0001DD94:
	r2 = Mem0[r16 + 8<i32>:word32]
	r3 = Mem0[r16 + 4<i32>:word32]
	r2 = r2 + (r19 << 2<32>)
	r3 = Mem0[r3 + 12<i32>:word32]
	r2 = Mem0[r2 - 4<i32>:word32]
	r4 = Mem0[r3:word32]
	r5 = Mem0[r3 + 4<i32>:word32]
	Mem0[r2 + 4<i32>:word32] = r5
	Mem0[r2:word32] = r4
	r7 = Mem0[r3 + 8<i32>:word32]
	r1 = Mem0[r3 + 12<i32>:word32]
	Mem0[r2 + 8<i32>:word32] = r7
	Mem0[r2 + 12<i32>:word32] = r1
	r4 = Mem0[r3 + 24<i32>:word32]
	r6 = Mem0[r2 + 20<i32>:word32]
	branch r4 >u r6 l0001DDCC
	// succ:  l0001DDC4 l0001DDCC
l0001DDC4:
	call fn00009560 (retsize: 0;)
	r2 = Mem0[r3 + 24<i32>:word32]
	r1 = Mem0[r3 + 16<i32>:word32]
	// succ:  l0001DDCC
l0001DDCC:
	r1_r0 = r18_r16
	r3_r2 = SEQ(r17, 1<32>)
	r17_r16 = Mem0[r29 + 8<i32>:word64]
	r19_r18 = Mem0[r29:word64]
	// succ:  l0001DDD8_thunk_split_impl
l0001DDD8_thunk_split_impl:
	call split_impl (retsize: 0;)
	return
	// succ:  qsplit_execute_8_exit
qsplit_execute_8_exit:


// qsplit_check
// Return size: 0
define qsplit_check
qsplit_check_entry:
	r29 = fp
	// succ:  l0001DDE0
l0001DDE0:
	r4 = 0x000295C8<p32>
	Mem0[r29 - 16<i32>:word64] = r17_r16
	v7 = r29 - 8<i32>
	Mem0[v7:word32] = r30
	Mem0[v7 + 4<i32>:word32] = r31
	r30 = v7
	r29 = v7 - 16<i32>
	r1 = 0x7D<32>
	r16 = r1
	r17 = r0
	call logmsg_function (retsize: 0;)
	r2 = r16
	Mem0[r29:word32] = r17
	r1 = 0x7E<32>
	r2 = Mem0[r17 + 16<i32>:word32]
	branch r2 == 4<32> l0001DE14
	// succ:  l0001DE0C l0001DE14
l0001DE0C:
	r3 = 0x0001DE23<p32>
	goto l0001DE30
	// succ:  l0001DE30
l0001DE14:
	r1 = 0x7F<32>
	r0 = 0<32>
	r2 = Mem0[r17 + 20<i32>:word32]
	branch r2 >u 2<32> l0001DE38
	// succ:  l0001DE28 l0001DE38
l0001DE28:
	r3 = 0x0001DE2E<p32>
	call errlog_function (retsize: 0;)
	r2 = r16
	goto l0001DE34
	// succ:  l0001DE34
l0001DE30:
	r2 = r16
	// succ:  l0001DE34
l0001DE34:
	r0 = 0xFFFFFFFF<32>
	// succ:  l0001DE38
l0001DE38:
	r17_r16 = Mem0[r29 + 8<i32>:word64]
	v16 = r30
	r31 = Mem0[v16 + 4<i32>:word32]
	r30 = Mem0[v16:word32]
	r29 = v16 + 8<i32>
	return
	// succ:  qsplit_check_exit
qsplit_check_exit:


// logmsg_function
// Return size: 0
define logmsg_function
logmsg_function_entry:
	r29 = fp
	// succ:  l0001DE3C
l0001DE3C:
	r3 = 2<32>
	v5 = r29 - 8<i32>
	Mem0[v5:word32] = r30
	Mem0[v5 + 4<i32>:word32] = r31
	r30 = v5
	r29 = v5 - 8<i32>
	r5 = Mem0[r2 + 16<i32>:word32]
	branch r3 >u r5 l0001DE60
	// succ:  l0001DE4C l0001DE60
l0001DE4C:
	r0 = 0x0001DE71<p32>
	r3 = 2<32>
	r5 = r29 + 0x10<32>
	call logv (retsize: 0;)
	r6 = r29 + 0x10<32>
	Mem0[r29 + 1<i32>:byte] = r6
	// succ:  l0001DE54_thunk_errlog_function
l0001DE54_thunk_errlog_function:
	call errlog_function (retsize: 0;)
	return
	// succ:  logmsg_function_exit
l0001DE60:
	v13 = r30
	r31 = Mem0[v13 + 4<i32>:word32]
	r30 = Mem0[v13:word32]
	r29 = v13 + 8<i32>
	return
	// succ:  logmsg_function_exit
logmsg_function_exit:


// errlog_function
// Return size: 0
define errlog_function
errlog_function_entry:
	r29 = fp
	// succ:  l0001DE64
l0001DE64:
	r0 = 0x000295AD<p32>
	r4 = r3
	v8 = r29 - 8<i32>
	Mem0[v8:word32] = r30
	Mem0[v8 + 4<i32>:word32] = r31
	r30 = v8
	r29 = v8 - 8<i32>
	r3 = 0<32>
	r5 = r29 + 0x10<32>
	r6 = r29 + 0x10<32>
	Mem0[r29 + 1<i32>:byte] = r6
	v13 = r30
	r31 = Mem0[v13 + 4<i32>:word32]
	r30 = Mem0[v13:word32]
	r29 = v13 + 8<i32>
	return
	// succ:  errlog_function_exit
errlog_function_exit:


// split_impl
// Return size: 0
define split_impl
split_impl_entry:
	r29 = fp
	// succ:  l0001DE88
l0001DE88:
	r22 = r0
	Mem0[r29 - 40<i32>:word64] = r23_r22
	v7 = r29 - 8<i32>
	Mem0[v7:word32] = r30
	Mem0[v7 + 4<i32>:word32] = r31
	r30 = v7
	r29 = v7 - 64<i32>
	r4 = Mem0[r22 + 4<i32>:word32]
	Mem0[r29 + 40<i32>:word64] = r21_r20
	r17_r16 = r1_r3
	Mem0[r29 + 56<i32>:word64] = r17_r16
	Mem0[r29 + 48<i32>:word64] = r19_r18
	r18 = r2
	r21 = Mem0[r4 + 4<i32>:word32]
	Mem0[r29 + 24<i32>:word64] = r25_r24
	r23 = Mem0[r22 + 8<i32>:word32]
	Mem0[r29 + 16<i32>:word64] = r27_r26
	r20 = Mem0[r21 + 12<i32>:word32]
	r26 = Mem0[r21 + 8<i32>:word32]
	call fn00009750 (retsize: 0;)
	r1_r0 = r16_r20
	r27 = Mem0[r21 + 4<i32>:word32]
	r25 = Mem0[r21:word32]
	r19 = r0
	r2 = Mem0[r21 + 24<i32>:word32]
	call fn00009760 (retsize: 0;)
	r1_r0 = r16_r2
	r4 = 0x000295F6<p32>
	r1 = 0x46<32>
	r2 = r17
	call logmsg_function (retsize: 0;)
	r21 = r0
	r24 = Mem0[r21 + 16<i32>:word32]
	Mem0[r29:word32] = r22
	p0 = r8 == 1<32>
	branch p0 l0001DF24
	// succ:  l0001DEFC l0001DF24
l0001DEFC:
	r3_r2 = SEQ(r23, 0<32>)
	r4 = Mem0[r3:word32]
	r5 = Mem0[r4 + 20<i32>:word32]
	branch r21 >u r5 l0001DF5C
	// succ:  l0001DF14 l0001DF5C
l0001DF14:
	r3 = 0x0001DF50<p32>
	r1 = 0x4D<32>
	Mem0[r29:word32] = r2
	goto l0001DFF4
	// succ:  l0001DFF4
l0001DF24:
	r0 = 0xFFFFFFFF<32>
	r2 = Mem0[r22 + 8<i32>:word32]
	r3 = Mem0[r22 + 4<i32>:word32]
	r3 = Mem0[r3 + 4<i32>:word32]
	r2 = Mem0[r2:word32]
	r4 = Mem0[r3:word32]
	r5 = Mem0[r3 + 4<i32>:word32]
	Mem0[r2 + 4<i32>:word32] = r5
	Mem0[r2:word32] = r4
	r7 = Mem0[r3 + 8<i32>:word32]
	r1 = Mem0[r3 + 12<i32>:word32]
	Mem0[r2 + 8<i32>:word32] = r7
	Mem0[r2 + 12<i32>:word32] = r1
	r4 = Mem0[r3 + 24<i32>:word32]
	r6 = Mem0[r2 + 20<i32>:word32]
	branch r4 >u r6 l0001E000
	// succ:  l0001DF50 l0001E000
l0001DF50:
	call fn00009560 (retsize: 0;)
	r2 = Mem0[r3 + 24<i32>:word32]
	r1 = Mem0[r3 + 16<i32>:word32]
	r0 = 0<32>
	goto l0001E000
	// succ:  l0001E000
l0001DF5C:
	r2 = r2
	Mem0[r4 + 24<i32>:word32] = r21
	r3 = r3 + 4<i32>
	r4 = Mem0[r3:word32]
	Mem0[r4 + 4<i32>:word32] = r27
	Mem0[r4 + 8<i32>:word32] = r26
	Mem0[r4 + 12<i32>:word32] = r19
	Mem0[r4:word32] = r25
	r2 = p1
	call fn00009770 (retsize: 0;)
	r1_r0 = r16_r20
	Mem0[r29 + 2<i32>:byte] = r2
	r1 = 0x57<32>
	r20 = 0<32>
	r17 = r19 * r18
	r2 = r27 * r26
	r0 = 0<32>
	r1 = Mem0[r29 + 8<i32>:word64]
	p0 = r1
	branch p0 l0001E000
	// succ:  l0001DFA4 l0001E000
l0001DFA4:
	r2 = r2 * r25
	r21 = r17 * r16
	r22 = r2 * r19
	// succ:  l0001DFB0
l0001DFB0:
	p0 = r14 > 0<32>
	branch p0 l0001DFE0
l0001DFB4:
	r25 = r22
	r19 = r20
	// succ:  l0001DFBC l0001DFE0
l0001DFBC:
	r25 = r22
	r19 = r20
	r2 = Mem0[r31 + r20 * 4<32>:word32]
	r19 = r24 + r19 * r17
	r18 = Mem0[r2 + 16<i32>:word32]
	// succ:  l0001DFC8
l0001DFC8:
	call fn00009560 (retsize: 0;)
	r1_r0 = r19_r18
	r2 = r17
	r19 = r19 + r21
	r18 = r18 + r17
	r25 = r25 + 0xFFFFFFFF<32>
	branch r25 == 0<32> l0001DFC8
	goto l0001DFE4
	// succ:  l0001DFE4 l0001DFC8
l0001DFE0:
	r20 = r20 + 1<32>
	branch r20 == r16 l0001DFB0
	goto l0001DFEC
	// succ:  l0001DFEC l0001DFB0
l0001DFE4:
	branch r20 == r16 l0001DFB4
	// succ:  l0001DFEC l0001DFB4
l0001DFEC:
	r3 = 0x0002961D<p32>
	// succ:  l0001DFF4
l0001DFF4:
	call errlog_function (retsize: 0;)
	r2 = r17
	r0 = 0xFFFFFFFF<32>
	// succ:  l0001E000
l0001E000:
	r17_r16 = Mem0[r29 + 56<i32>:word64]
	r19_r18 = Mem0[r29 + 48<i32>:word64]
	r21_r20 = Mem0[r29 + 40<i32>:word64]
	r23_r22 = Mem0[r29 + 32<i32>:word64]
	r25_r24 = Mem0[r29 + 24<i32>:word64]
	r27_r26 = Mem0[r29 + 16<i32>:word64]
	v41 = r30
	r31 = Mem0[v41 + 4<i32>:word32]
	r30 = Mem0[v41:word32]
	r29 = v41 + 8<i32>
	return
	// succ:  split_impl_exit
split_impl_exit:


// tanh_execute
// Return size: 0
define tanh_execute
tanh_execute_entry:
	r29 = fp
	// succ:  l0001E020
l0001E020:
	r4 = 0x000296C0<p32>
	Mem0[r29 - 16<i32>:word64] = r17_r16
	v7 = r29 - 8<i32>
	Mem0[v7:word32] = r30
	Mem0[v7 + 4<i32>:word32] = r31
	r30 = v7
	r29 = v7 - 40<i32>
	r17_r16 = r0_r1
	r1 = 0x37<32>
	r2 = Mem0[r17 + 4<i32>:word32]
	Mem0[r29 + 16<i32>:word64] = r21_r20
	r3 = Mem0[r17 + 8<i32>:word32]
	Mem0[r29 + 8<i32>:word64] = r23_r22
	Mem0[r29 + 24<i32>:word64] = r19_r18
	r21 = Mem0[r2:word32]
	r22 = Mem0[r3:word32]
	r0 = Mem0[r21:word32]
	r6 = Mem0[r21 + 12<i32>:word32]
	r7 = Mem0[r21 + 4<i32>:word32]
	r5 = Mem0[r21 + 8<i32>:word32]
	r2 = r7 * r0
	r18 = Mem0[r21 + 16<i32>:word32]
	r19 = Mem0[r22 + 16<i32>:word32]
	Mem0[r29:word32] = r17
	r3 = r2 * r5
	r2 = r16
	r20 = r3 * r6
	r23 = r20 << 2<32>
	call logmsg_function (retsize: 0;)
	r2 = Mem0[r22 + 20<i32>:word32]
	branch r23 >u r2 l0001E08C
	// succ:  l0001E078 l0001E08C
l0001E078:
	r3 = 0x0001E09B<p32>
	r1 = 0x38<32>
	r2 = r16
	call errlog_function (retsize: 0;)
	goto l0001E0E0
	// succ:  l0001E0E0
l0001E08C:
	p0 = r20 == 0<32>
	r2 = Mem0[r21:word32]
	r3 = Mem0[r21 + 4<i32>:word32]
	Mem0[r22 + 4<i32>:word32] = r3
	Mem0[r22:word32] = r2
	r6 = Mem0[r21 + 8<i32>:word32]
	Mem0[r22 + 8<i32>:word32] = r6
	r7 = Mem0[r21 + 12<i32>:word32]
	branch p0 l0001E0C4
	// succ:  l0001E0AC l0001E0C4
l0001E0AC:
	Mem0[r22 + 12<i32>:word32] = r7
	Mem0[r22 + 24<i32>:word32] = r23
	call fn000097F0 (retsize: 0;)
	r20 = r20
	r0 = Mem0[r18:word32]
	r19 = r19 + 4<32>
	p0 = r20 == 0<32>
	r18 = r18 + 4<32>
	Mem0[r19:word32] = r0
	branch p0 l0001E0AC
	// succ:  l0001E0C4 l0001E0AC
l0001E0C4:
	r4 = 0x000296E5<p32>
	r1 = 0x40<32>
	r2 = r16
	call logmsg_function (retsize: 0;)
	Mem0[r29:word32] = r17
	r0 = 0<32>
	// succ:  l0001E0E0
l0001E0E0:
	r17_r16 = Mem0[r29 + 32<i32>:word64]
	r19_r18 = Mem0[r29 + 24<i32>:word64]
	r21_r20 = Mem0[r29 + 16<i32>:word64]
	r23_r22 = Mem0[r29 + 8<i32>:word64]
	v30 = r30
	r31 = Mem0[v30 + 4<i32>:word32]
	r30 = Mem0[v30:word32]
	r29 = v30 + 8<i32>
	return
	// succ:  tanh_execute_exit
tanh_execute_exit:


// tanh_check
// Return size: 0
define tanh_check
tanh_check_entry:
	r29 = fp
	// succ:  l0001E0EC
l0001E0EC:
	r4 = 0x00029675<p32>
	Mem0[r29 - 16<i32>:word64] = r17_r16
	v7 = r29 - 8<i32>
	Mem0[v7:word32] = r30
	Mem0[v7 + 4<i32>:word32] = r31
	r30 = v7
	r29 = v7 - 16<i32>
	r1 = 0x46<32>
	r16 = r1
	r17 = r0
	call logmsg_function (retsize: 0;)
	r2 = r16
	Mem0[r29:word32] = r17
	r1 = 0x47<32>
	r2 = Mem0[r17 + 16<i32>:word32]
	branch r2 == 1<32> l0001E12C
	// succ:  l0001E118 l0001E12C
l0001E118:
	r3 = 0x0001E14F<p32>
	call errlog_function (retsize: 0;)
	r2 = r16
	// succ:  l0001E120
l0001E120:
	r0 = 0xFFFFFFFF<32>
	r17_r16 = Mem0[r29 + 8<i32>:word64]
	v16 = r30
	r31 = Mem0[v16 + 4<i32>:word32]
	r30 = Mem0[v16:word32]
	r29 = v16 + 8<i32>
	return
	// succ:  tanh_check_exit
l0001E12C:
	r1 = 0x48<32>
	r2 = Mem0[r17 + 20<i32>:word32]
	branch r2 == 1<32> l0001E144
	// succ:  l0001E13C l0001E144
l0001E13C:
	r3 = 0x0001E15E<p32>
	goto l0001E120
	// succ:  l0001E120
l0001E144:
	r4 = 0x000296AA<p32>
	r1 = 0x49<32>
	r2 = r16
	call logmsg_function (retsize: 0;)
	Mem0[r29:word32] = r17
	r0 = 0<32>
	r17_r16 = Mem0[r29 + 8<i32>:word64]
	v17 = r30
	r31 = Mem0[v17 + 4<i32>:word32]
	r30 = Mem0[v17:word32]
	r29 = v17 + 8<i32>
	return
	// succ:  tanh_check_exit
tanh_check_exit:


// logmsg_function
// Return size: 0
define logmsg_function
logmsg_function_entry:
	r29 = fp
	// succ:  l0001E164
l0001E164:
	r3 = 2<32>
	v5 = r29 - 8<i32>
	Mem0[v5:word32] = r30
	Mem0[v5 + 4<i32>:word32] = r31
	r30 = v5
	r29 = v5 - 8<i32>
	r5 = Mem0[r2 + 16<i32>:word32]
	branch r3 >u r5 l0001E188
	// succ:  l0001E174 l0001E188
l0001E174:
	r0 = 0x0001E19D<p32>
	r3 = 2<32>
	r5 = r29 + 0x10<32>
	call logv (retsize: 0;)
	r6 = r29 + 0x10<32>
	Mem0[r29 + 1<i32>:byte] = r6
	// succ:  l0001E17C_thunk_errlog_function
l0001E17C_thunk_errlog_function:
	call errlog_function (retsize: 0;)
	return
	// succ:  logmsg_function_exit
l0001E188:
	v13 = r30
	r31 = Mem0[v13 + 4<i32>:word32]
	r30 = Mem0[v13:word32]
	r29 = v13 + 8<i32>
	return
	// succ:  logmsg_function_exit
logmsg_function_exit:


// errlog_function
// Return size: 0
define errlog_function
errlog_function_entry:
	r29 = fp
	// succ:  l0001E18C
l0001E18C:
	r0 = 0x00029659<p32>
	r4 = r3
	v8 = r29 - 8<i32>
	Mem0[v8:word32] = r30
	Mem0[v8 + 4<i32>:word32] = r31
	r30 = v8
	r29 = v8 - 8<i32>
	r3 = 0<32>
	r5 = r29 + 0x10<32>
	r6 = r29 + 0x10<32>
	Mem0[r29 + 1<i32>:byte] = r6
	v13 = r30
	r31 = Mem0[v13 + 4<i32>:word32]
	r30 = Mem0[v13:word32]
	r29 = v13 + 8<i32>
	return
	// succ:  errlog_function_exit
errlog_function_exit:


// sigmoid_execute
// Return size: 0
define sigmoid_execute
sigmoid_execute_entry:
	r29 = fp
	// succ:  l0001E1B0
l0001E1B0:
	r4 = 0x00029762<p32>
	Mem0[r29 - 16<i32>:word64] = r17_r16
	v7 = r29 - 8<i32>
	Mem0[v7:word32] = r30
	Mem0[v7 + 4<i32>:word32] = r31
	r30 = v7
	r29 = v7 - 40<i32>
	r17_r16 = r0_r1
	r1 = 0x37<32>
	r2 = Mem0[r17 + 4<i32>:word32]
	Mem0[r29 + 16<i32>:word64] = r21_r20
	r3 = Mem0[r17 + 8<i32>:word32]
	Mem0[r29 + 8<i32>:word64] = r23_r22
	Mem0[r29 + 24<i32>:word64] = r19_r18
	r21 = Mem0[r2:word32]
	r22 = Mem0[r3:word32]
	r0 = Mem0[r21:word32]
	r6 = Mem0[r21 + 12<i32>:word32]
	r7 = Mem0[r21 + 4<i32>:word32]
	r5 = Mem0[r21 + 8<i32>:word32]
	r2 = r7 * r0
	r18 = Mem0[r21 + 16<i32>:word32]
	r19 = Mem0[r22 + 16<i32>:word32]
	Mem0[r29:word32] = r17
	r3 = r2 * r5
	r2 = r16
	r20 = r3 * r6
	r23 = r20 << 2<32>
	call logmsg_function (retsize: 0;)
	r2 = Mem0[r22 + 20<i32>:word32]
	branch r23 >u r2 l0001E21C
	// succ:  l0001E208 l0001E21C
l0001E208:
	r3 = 0x0001E240<p32>
	r1 = 0x38<32>
	r2 = r16
	call errlog_function (retsize: 0;)
	goto l0001E290
	// succ:  l0001E290
l0001E21C:
	p0 = r20 == 0<32>
	r2 = Mem0[r21:word32]
	r3 = Mem0[r21 + 4<i32>:word32]
	Mem0[r22 + 4<i32>:word32] = r3
	Mem0[r22:word32] = r2
	r6 = Mem0[r21 + 8<i32>:word32]
	Mem0[r22 + 8<i32>:word32] = r6
	r21 = 0x3F000000<32>
	r7 = Mem0[r21 + 12<i32>:word32]
	branch p0 l0001E274
	// succ:  l0001E244 l0001E274
l0001E244:
	Mem0[r22 + 12<i32>:word32] = r7
	Mem0[r22 + 24<i32>:word32] = r23
	r22 = 0x3F800000<32>
	// succ:  l0001E24C
l0001E24C:
	r2 = Mem0[r18:word32]
	r0 = r2 * r21
	call fn000097F0 (retsize: 0;)
	r2 = r0 + r22
	r18 = r18 + 4<32>
	r20 = r20
	p0 = r20 == 0<32>
	r2 = r2 * r21
	branch p0 l0001E24C
	goto l0001E278
	// succ:  l0001E278 l0001E24C
l0001E274:
	r4 = 0x0002978A<p32>
	r1 = 0x40<32>
	r2 = r16
	goto l0001E284
	// succ:  l0001E284
l0001E278:
	r19 = r19 + 4<32>
	Mem0[r19:byte] = r2
	r4 = 0x0001E28E<p32>
	r1 = 0x40<32>
	r2 = r16
	// succ:  l0001E284
l0001E284:
	call logmsg_function (retsize: 0;)
	Mem0[r29:word32] = r17
	r0 = 0<32>
	// succ:  l0001E290
l0001E290:
	r17_r16 = Mem0[r29 + 32<i32>:word64]
	r19_r18 = Mem0[r29 + 24<i32>:word64]
	r21_r20 = Mem0[r29 + 16<i32>:word64]
	r23_r22 = Mem0[r29 + 8<i32>:word64]
	v30 = r30
	r31 = Mem0[v30 + 4<i32>:word32]
	r30 = Mem0[v30:word32]
	r29 = v30 + 8<i32>
	return
	// succ:  sigmoid_execute_exit
sigmoid_execute_exit:


// sigmoid_check
// Return size: 0
define sigmoid_check
sigmoid_check_entry:
	r29 = fp
	// succ:  l0001E29C
l0001E29C:
	r4 = 0x00029711<p32>
	Mem0[r29 - 16<i32>:word64] = r17_r16
	v7 = r29 - 8<i32>
	Mem0[v7:word32] = r30
	Mem0[v7 + 4<i32>:word32] = r31
	r30 = v7
	r29 = v7 - 16<i32>
	r1 = 0x46<32>
	r16 = r1
	r17 = r0
	call logmsg_function (retsize: 0;)
	r2 = r16
	Mem0[r29:word32] = r17
	r1 = 0x47<32>
	r2 = Mem0[r17 + 16<i32>:word32]
	branch r2 == 1<32> l0001E2DC
	// succ:  l0001E2C8 l0001E2DC
l0001E2C8:
	r3 = 0x0001E2EE<p32>
	call errlog_function (retsize: 0;)
	r2 = r16
	// succ:  l0001E2D0
l0001E2D0:
	r0 = 0xFFFFFFFF<32>
	r17_r16 = Mem0[r29 + 8<i32>:word64]
	v16 = r30
	r31 = Mem0[v16 + 4<i32>:word32]
	r30 = Mem0[v16:word32]
	r29 = v16 + 8<i32>
	return
	// succ:  sigmoid_check_exit
l0001E2DC:
	r1 = 0x48<32>
	r2 = Mem0[r17 + 20<i32>:word32]
	branch r2 == 1<32> l0001E2F4
	// succ:  l0001E2EC l0001E2F4
l0001E2EC:
	r3 = 0x0001E2FD<p32>
	goto l0001E2D0
	// succ:  l0001E2D0
l0001E2F4:
	r4 = 0x00029749<p32>
	r1 = 0x49<32>
	r2 = r16
	call logmsg_function (retsize: 0;)
	Mem0[r29:word32] = r17
	r0 = 0<32>
	r17_r16 = Mem0[r29 + 8<i32>:word64]
	v17 = r30
	r31 = Mem0[v17 + 4<i32>:word32]
	r30 = Mem0[v17:word32]
	r29 = v17 + 8<i32>
	return
	// succ:  sigmoid_check_exit
sigmoid_check_exit:


// logmsg_function
// Return size: 0
define logmsg_function
logmsg_function_entry:
	r29 = fp
	// succ:  l0001E314
l0001E314:
	r3 = 2<32>
	v5 = r29 - 8<i32>
	Mem0[v5:word32] = r30
	Mem0[v5 + 4<i32>:word32] = r31
	r30 = v5
	r29 = v5 - 8<i32>
	r5 = Mem0[r2 + 16<i32>:word32]
	branch r3 >u r5 l0001E338
	// succ:  l0001E324 l0001E338
l0001E324:
	r0 = 0x0001E336<p32>
	r3 = 2<32>
	r5 = r29 + 0x10<32>
	call logv (retsize: 0;)
	r6 = r29 + 0x10<32>
	Mem0[r29 + 1<i32>:byte] = r6
	// succ:  l0001E32C_thunk_errlog_function
l0001E32C_thunk_errlog_function:
	call errlog_function (retsize: 0;)
	return
	// succ:  logmsg_function_exit
l0001E338:
	v13 = r30
	r31 = Mem0[v13 + 4<i32>:word32]
	r30 = Mem0[v13:word32]
	r29 = v13 + 8<i32>
	return
	// succ:  logmsg_function_exit
logmsg_function_exit:


// errlog_function
// Return size: 0
define errlog_function
errlog_function_entry:
	r29 = fp
	// succ:  l0001E33C
l0001E33C:
	r0 = 0x000296F2<p32>
	r4 = r3
	v8 = r29 - 8<i32>
	Mem0[v8:word32] = r30
	Mem0[v8 + 4<i32>:word32] = r31
	r30 = v8
	r29 = v8 - 8<i32>
	r3 = 0<32>
	r5 = r29 + 0x10<32>
	r6 = r29 + 0x10<32>
	Mem0[r29 + 1<i32>:byte] = r6
	v13 = r30
	r31 = Mem0[v13 + 4<i32>:word32]
	r30 = Mem0[v13:word32]
	r29 = v13 + 8<i32>
	return
	// succ:  errlog_function_exit
errlog_function_exit:


// qtanh_execute_ref
// Return size: 0
define qtanh_execute_ref
qtanh_execute_ref_entry:
	r29 = fp
	// succ:  l0001E360
l0001E360:
	r17_r16 = r1_r0
	Mem0[r29 - 16<i32>:word64] = r17_r16
	v8 = r29 - 8<i32>
	Mem0[v8:word32] = r30
	Mem0[v8 + 4<i32>:word32] = r31
	r30 = v8
	r29 = v8 - 64<i32>
	r2 = Mem0[r16 + 4<i32>:word32]
	Mem0[r29 + 16<i32>:word64] = r27_r26
	r7 = Mem0[r16 + 8<i32>:word32]
	r18 = 0x437F0000<32>
	Mem0[r29 + 32<i32>:word64] = r23_r22
	Mem0[r29 + 48<i32>:word64] = r19_r18
	r1 = r18
	r26 = Mem0[r2:word32]
	r4 = Mem0[r2 + 4<i32>:word32]
	r2 = Mem0[r2 + 8<i32>:word32]
	r27 = Mem0[r7:word32]
	r4 = Mem0[r4 + 16<i32>:word32]
	r0 = Mem0[r26 + 4<i32>:word32]
	r2 = Mem0[r2 + 16<i32>:word32]
	r6 = Mem0[r26:word32]
	r23 = Mem0[r4:word32]
	r5 = Mem0[r26 + 12<i32>:word32]
	r3 = r0 * r6
	r2 = Mem0[r2:word32]
	r6 = Mem0[r26 + 8<i32>:word32]
	Mem0[r29 + 40<i32>:word64] = r21_r20
	Mem0[r29 + 24<i32>:word64] = r25_r24
	r2 = r3 * r6
	r0 = r2 - r23
	r20 = Mem0[r7 + 8<i32>:word32]
	r21 = Mem0[r7 + 4<i32>:word32]
	r22 = Mem0[r26 + 16<i32>:word32]
	r24 = Mem0[r27 + 16<i32>:word32]
	r25 = r2 * r5
	call fn00009610 (retsize: 0;)
	r4 = 0x0002991A<p32>
	r1 = 0x42<32>
	r2 = r17
	call logmsg_function (retsize: 0;)
	r19 = r0
	Mem0[r29:word32] = r16
	p0 = r25 == 0<32>
	r2 = Mem0[r27 + 20<i32>:word32]
	branch r25 >u r2 l0001E41C
	// succ:  l0001E404 l0001E41C
l0001E404:
	r3 = 0x0001E407<p32>
	r1 = 0x43<32>
	r2 = r17
	call errlog_function (retsize: 0;)
	goto l0001E4E8_in_qtanh_execute_ref
	// succ:  l0001E4E8_in_qtanh_execute_ref
l0001E41C:
	r2 = Mem0[r26:word32]
	r3 = Mem0[r26 + 4<i32>:word32]
	Mem0[r27 + 4<i32>:word32] = r3
	Mem0[r27:word32] = r2
	r6 = Mem0[r26 + 8<i32>:word32]
	Mem0[r27 + 8<i32>:word32] = r6
	r17 = 0x3F000000<32>
	r7 = Mem0[r26 + 12<i32>:word32]
	Mem0[r29 + 12<i32>:word32] = r17
	branch p0 l0001E444_thunk_fn0001E49C
	goto l0001E450
	// succ:  l0001E450 l0001E444_thunk_fn0001E49C
l0001E444_thunk_fn0001E49C:
	call fn0001E49C (retsize: 0;)
	return
	// succ:  qtanh_execute_ref_exit
l0001E450:
	Mem0[r27 + 12<i32>:word32] = r7
	Mem0[r27 + 24<i32>:word32] = r25
	r26 = 0x42FF0000<32>
	r27 = 0x3F800000<32>
	// succ:  l0001E460
l0001E460:
	r0 = r23
	r22 = r22 + 1<i32>
	r2 = Mem0[r22:byte]
	r2 = CONVERT(r2, int32, real32)
	r0 = r0 + r19 * r2
	call fn000097F0 (retsize: 0;)
	r3 = r0 + r27
	r2 = r17
	r25 = r25 + 0xFFFFFFFF<32>
	r2 = r2 + r3 * r26
	p0 = r25 == 0<32>
	r3 = CONVERT(r2, real32, uint32)
	p1 = r2 > r18
	r3 = 0xFFFFFFFF<32>
	branch p0 l0001E460
	// succ:  l0001E494_thunk_fn0001E49C l0001E460
l0001E494_thunk_fn0001E49C:
	call fn0001E49C (retsize: 0;)
	return
	// succ:  qtanh_execute_ref_exit
l0001E4E8_in_qtanh_execute_ref:
	r17_r16 = Mem0[r29 + 56<i32>:word64]
	r19_r18 = Mem0[r29 + 48<i32>:word64]
	r21_r20 = Mem0[r29 + 40<i32>:word64]
	r23_r22 = Mem0[r29 + 32<i32>:word64]
	r25_r24 = Mem0[r29 + 24<i32>:word64]
	r27_r26 = Mem0[r29 + 16<i32>:word64]
	v36 = r30
	r31 = Mem0[v36 + 4<i32>:word32]
	r30 = Mem0[v36:word32]
	r29 = v36 + 8<i32>
	return
	// succ:  qtanh_execute_ref_exit
qtanh_execute_ref_exit:


// fn0001E49C
// Return size: 0
define fn0001E49C
fn0001E49C_entry:
	r29 = fp
	// succ:  l0001E49C
l0001E49C:
	r4 = 0x00029951<p32>
	r2 = Mem0[r21 + 16<i32>:word32]
	Mem0[r21 + 12<i32>:word32] = 1<32>
	// succ:  l0001E4A8
l0001E4A8:
	r1 = 0x56<32>
	Mem0[r21 + 8<i32>:word32] = 1<32>
	Mem0[r21:word32] = 1<32>
	Mem0[r21 + 4<i32>:word32] = 0xFFFFFF81<32>
	Mem0[r2 - 1082130432<i32>:word32] = 0<32>
	// succ:  l0001E4BC
l0001E4BC:
	r2 = Mem0[r29 + 12<i32>:word32]
	Mem0[r21 + 24<i32>:word32] = 4<32>
	r3 = Mem0[r20 + 16<i32>:word32]
	Mem0[r20 + 8<i32>:word32] = 1<32>
	Mem0[r20:word32] = 1<32>
	Mem0[r20 + 4<i32>:word32] = 1<32>
	Mem0[r20 + 12<i32>:word32] = 0xFFFFFF81<32>
	Mem0[r3 + 1065353216<i32>:word32] = 0<32>
	// succ:  l0001E4D8
l0001E4D8:
	call logmsg_function (retsize: 0;)
	Mem0[r20 + 24<i32>:word32] = 4<32>
	Mem0[r29:word32] = r16
	r0 = 0<32>
	// succ:  l0001E4E8
l0001E4E8:
	r17_r16 = Mem0[r29 + 56<i32>:word64]
	r19_r18 = Mem0[r29 + 48<i32>:word64]
	r21_r20 = Mem0[r29 + 40<i32>:word64]
	r23_r22 = Mem0[r29 + 32<i32>:word64]
	r25_r24 = Mem0[r29 + 24<i32>:word64]
	r27_r26 = Mem0[r29 + 16<i32>:word64]
	v19 = r30
	r31 = Mem0[v19 + 4<i32>:word32]
	r30 = Mem0[v19:word32]
	r29 = v19 + 8<i32>
	return
	// succ:  fn0001E49C_exit
fn0001E49C_exit:


// qtanh_check
// Return size: 0
define qtanh_check
qtanh_check_entry:
	r29 = fp
	// succ:  l0001E500
l0001E500:
	r4 = 0x0002995E<p32>
	Mem0[r29 - 16<i32>:word64] = r17_r16
	v7 = r29 - 8<i32>
	Mem0[v7:word32] = r30
	Mem0[v7 + 4<i32>:word32] = r31
	r30 = v7
	r29 = v7 - 16<i32>
	r1 = 0x94<32>
	r16 = r1
	r17 = r0
	call logmsg_function (retsize: 0;)
	r2 = r16
	Mem0[r29:word32] = r17
	r1 = 0x95<32>
	r2 = Mem0[r17 + 16<i32>:word32]
	branch r2 == 3<32> l0001E540
	// succ:  l0001E52C l0001E540
l0001E52C:
	r3 = 0x0001E538<p32>
	call errlog_function (retsize: 0;)
	r2 = r16
	// succ:  l0001E534
l0001E534:
	r0 = 0xFFFFFFFF<32>
	r17_r16 = Mem0[r29 + 8<i32>:word64]
	v16 = r30
	r31 = Mem0[v16 + 4<i32>:word32]
	r30 = Mem0[v16:word32]
	r29 = v16 + 8<i32>
	return
	// succ:  qtanh_check_exit
l0001E540:
	r1 = 0x96<32>
	r2 = Mem0[r17 + 20<i32>:word32]
	branch r2 == 3<32> l0001E558
	// succ:  l0001E550 l0001E558
l0001E550:
	r3 = 0x0001E587<p32>
	goto l0001E534
	// succ:  l0001E534
l0001E558:
	r4 = 0x00029993<p32>
	r1 = 0x97<32>
	r2 = r16
	call logmsg_function (retsize: 0;)
	Mem0[r29:word32] = r17
	r0 = 0<32>
	r17_r16 = Mem0[r29 + 8<i32>:word64]
	v17 = r30
	r31 = Mem0[v17 + 4<i32>:word32]
	r30 = Mem0[v17:word32]
	r29 = v17 + 8<i32>
	return
	// succ:  qtanh_check_exit
qtanh_check_exit:


// qtanh_execute_hvx
// Return size: 0
define qtanh_execute_hvx
qtanh_execute_hvx_entry:
	r29 = fp
	goto l0001E580
	// succ:  l0001E580
l0001E498:
	Mem0[r24:byte] = r3
	r24 = r24 + 1<i32>
	// succ:  l0001E498_thunk_fn0001E49C
l0001E498_thunk_fn0001E49C:
	call fn0001E49C (retsize: 0;)
	return
	// succ:  qtanh_execute_hvx_exit
l0001E4A4:
	r2 = Mem0[r21 + 16<i32>:word32]
	Mem0[r21 + 12<i32>:word32] = 1<32>
	// succ:  l0001E4A4_thunk_fn0001E49C
l0001E4A4_thunk_fn0001E49C:
	call fn0001E49C (retsize: 0;)
	return
	// succ:  qtanh_execute_hvx_exit
l0001E4B4:
	Mem0[r2 - 1082130432<i32>:word32] = 0<32>
	// succ:  l0001E4B4_thunk_fn0001E49C
l0001E4B4_thunk_fn0001E49C:
	call fn0001E49C (retsize: 0;)
	return
	// succ:  qtanh_execute_hvx_exit
l0001E580:
	r4 = 0x0002991A<p32>
	Mem0[r29 - 16<i32>:word64] = r17_r16
	v7 = r29 - 8<i32>
	Mem0[v7:word32] = r30
	Mem0[v7 + 4<i32>:word32] = r31
	r30 = v7
	r29 = v7 - 80<i32>
	r17_r16 = r1_r0
	r1 = 0x72<32>
	r3 = Mem0[r16 + 4<i32>:word32]
	Mem0[r29 + 64<i32>:word64] = r19_r18
	r2 = r17
	r5 = Mem0[r16 + 8<i32>:word32]
	Mem0[r29 + 56<i32>:word64] = r21_r20
	Mem0[r29 + 40<i32>:word64] = r25_r24
	r6 = Mem0[r3 + 8<i32>:word32]
	r7 = Mem0[r3 + 4<i32>:word32]
	r0 = Mem0[r5 + 4<i32>:word32]
	r18 = Mem0[r5:word32]
	r5 = Mem0[r5 + 8<i32>:word32]
	r21 = Mem0[r3:word32]
	r3 = Mem0[r7 + 16<i32>:word32]
	r5 = Mem0[r6 + 16<i32>:word32]
	Mem0[r29 + 28<i32>:word32] = r5
	Mem0[r29 + 48<i32>:word64] = r23_r22
	r7 = Mem0[r18 + 16<i32>:word32]
	Mem0[r29 + 32<i32>:word64] = r27_r26
	r25 = Mem0[r17 + 4<i32>:word32]
	r23 = Mem0[r21 + 16<i32>:word32]
	Mem0[r29 + 20<i32>:word32] = r0
	r20 = Mem0[r21 + 8<i32>:word32]
	r22 = Mem0[r21 + 4<i32>:word32]
	r26 = Mem0[r21 + 12<i32>:word32]
	r27 = Mem0[r21:word32]
	r19 = Mem0[r3:word32]
	Mem0[r29 + 24<i32>:word32] = r7
	r24 = Mem0[r5:word32]
	call logmsg_function (retsize: 0;)
	Mem0[r29:word32] = r16
	r1 = 0x73<32>
	r2 = Mem0[r16 + 32<i32>:int8]
	branch r2 == 0<32> l0001E60C
l0001E5F4:
	r3 = 0x00029931<p32>
	// succ:  l0001E5F8 l0001E60C l0001E5FC
l0001E5F8:
	r3 = 0x0001E635<p32>
	// succ:  l0001E5FC
l0001E5FC:
	call errlog_function (retsize: 0;)
	r2 = r17
	// succ:  l0001E600
l0001E600:
	goto l0001E964
	// succ:  l0001E964
l0001E60C:
	r2 = r22 * r27
	r1 = 0x74<32>
	r3 = Mem0[r18 + 20<i32>:word32]
	r2 = r2 * r20
	r20 = r2 * r26
	branch r20 >u r3 l0001E630
	// succ:  l0001E628 l0001E630
l0001E628:
	r3 = 0x0001E647<p32>
	goto l0001E600
	// succ:  l0001E600
l0001E630:
	r22 = r20 + 0xFF<32>
	r2 = 0xFF<32>
	r3 = Mem0[r21:word32]
	Mem0[r29 + 12<i32>:word32] = r2
	r27 = r22 & 0xFFFFFF00<32>
	r0 = r25
	r4 = Mem0[r21 + 4<i32>:word32]
	Mem0[r18 + 1<i32>:byte] = r4
	Mem0[r18:word32] = r3
	r3 = r22 + r0
	r1 = 0<32>
	r2 = Mem0[r21 + 8<i32>:word32]
	r2 = r27
	Mem0[r18 + 8<i32>:word32] = r2
	Mem0[r29 + 16<i32>:word32] = r0
	r7 = Mem0[r21 + 12<i32>:word32]
	call fn000095F0 (retsize: 0;)
	r21 = r3 & 0xFFFFFF00<32>
	Mem0[r18 + 12<i32>:word32] = r7
	Mem0[r18 + 24<i32>:word32] = r20
	call fn000095F0 (retsize: 0;)
	r1_r0 = SEQ(0<32>, r21)
	r2 = r27
	call fn00009560 (retsize: 0;)
	r2 = r20
	r1_r0 = r23_r21
	r1 = r24 - r19
	r2 = 0xC0800000<32>
	p0 = r19 >= r2
	branch p0 l0001E76C
	// succ:  l0001E6A0 l0001E76C
l0001E6A0:
	r18 = 0x40800000<32>
	p0 = r18 >= r24
	branch p0 l0001E76C
	// succ:  l0001E6B0 l0001E76C
l0001E6B0:
	r2 = 0x437F0000<32>
	call fn00009610 (retsize: 0;)
	r1_r0 = r2_r1
	r2 = r19 + r18
	r23 = r0
	call fn00009610 (retsize: 0;)
	r1_r0 = r23_r2
	r18 = truncf(CONVERT(r0, uint32, real32))
	r2 = 0x41700000<32>
	call fn000097C0 (retsize: 0;)
	r0 = r2
	r2 = 0x41FF0000<32>
	r3 = 0xBF800000<32>
	r2 = r23 * r2
	r3 = r0 + r3
	p0 = r20 > 0<32>
	r25 = Mem0[r29 + 20<i32>:word32]
	r2 = r2 * r0
	r3 = truncf(CONVERT(r3, uint32, real32))
	r4 = truncf(CONVERT(r2, uint32, real32))
	branch p0 l0001E828
	// succ:  l0001E718 l0001E828
l0001E718:
	r2 = Mem0[r29 + 12<i32>:word32]
	r5 = truncf(CONVERT(r0, uint32, real32))
	r5 = r5 + (r5 >>u 0x1F<32>)
	p0 = r4 > r3
	r3 = r4 + 0<32>
	r6 = r2 * r26
	r2 = r21
	r3 = CONVERT(SLICE(r3, int16, 0), int16, int32)
	__loop(0<i32>, 0x0001E738<p32>, r6)
	r4 = r5 >> 1<32>
	r5 = 0xFF<32>
	r7 = r4
	r6 = Mem0[r2:byte]
	r6 = r6 + r18
	r7 = r7 + r6 * r3
	r6 = r7 >> 0xF<32>
	branch p0 l0001E760
	// succ:  l0001E758 l0001E760
l0001E758:
	p0 = r6 > 0xFF<32>
	r5 = r6 + 0<32>
	p0 = r6 > 0xFFFFFFFF<32>
	r5 = 0<32>
	// succ:  l0001E760
l0001E760:
	Mem0[r2:byte] = r5
	r2 = r2 + 1<i32>
	goto l0001E828
	// succ:  l0001E828
l0001E76C:
	call fn00009600 (retsize: 0;)
	r0 = 0x38D1B717<32>
	call fn00009610 (retsize: 0;)
	r1 = 0x437F0000<32>
	p0 = r12 > 0<32>
	branch p0 l0001E828
	// succ:  l0001E790 l0001E828
l0001E790:
	r3 = r21 + r22
	r25 = Mem0[r29 + 20<i32>:word32]
	__loop(0<i32>, 0x0001E79C<p32>, r20)
	r22 = r3 & 0xFFFFFF00<32>
	r3_r2 = r22_r21
	r5 = r19
	r2 = r2 + 1<i32>
	r4 = Mem0[r2:byte]
	r4 = CONVERT(r4, int32, real32)
	r5 = r5 + r0 * r4
	r3 = r3 + 4<32>
	r0 = 0x17<32>
	r1 = 0x41000000<32>
	call fn00009600 (retsize: 0;)
	r2 = 0x437F0000<32>
	call fn00009610 (retsize: 0;)
	r1_r0 = r0_r2
	r18 = r21
	r23 = r0
	r2 = Mem0[r29 + 12<i32>:word64]
	r19 = r2 * r26
	r24 = 0x40800000<32>
	// succ:  l0001E7EC
l0001E7EC:
	r2 = Mem0[r22:word32]
	r2 = r2 + r24
	r0 = r23 * r2
	call fn00009620 (retsize: 0;)
	r3 = truncf(CONVERT(r0, uint32, real32))
	r2 = 0xFF<32>
	branch p0 l0001E818
	// succ:  l0001E810 l0001E818
l0001E810:
	p0 = r3 > 0xFF<32>
	r2 = r3 + 0<32>
	p0 = r3 > 0xFFFFFFFF<32>
	r2 = 0<32>
	// succ:  l0001E818
l0001E818:
	r19 = r19 + 0xFFFFFFFF<32>
	r22 = r22 + 4<32>
	Mem0[r18:byte] = r2
	r18 = r18 + 1<i32>
	p0 = r11 == 0<32>
	branch p0 l0001E7EC
	// succ:  l0001E828 l0001E7EC
l0001E828:
	r2 = 0x0002B110<p32>
	r3 = 0x1010101<32>
	r4 = 0x4040404<32>
	r5 = 0x80808080<32>
	r6 = 0xF8F8F8F8<32>
	r7 = 0x7070707<32>
	p0 = r3 == -1<i32>
	branch p0 l0001E498
	// succ:  l0001E85C l0001E498
l0001E85C:
	p0 = r5 == -1<i32>
	branch p0 l0001E49C
	goto l0001E860
	// succ:  l0001E860 l0001E85C_thunk_fn0001E49C
l0001E85C_thunk_fn0001E49C:
	call fn0001E49C (retsize: 0;)
	return
	// succ:  qtanh_execute_hvx_exit
l0001E860:
	p0 = r6 == -1<i32>
	branch p0 l0001E4A4
	// succ:  l0001E864 l0001E4A4
l0001E864:
	p0 = r7 == -1<i32>
	branch p0 l0001E4A8
	goto l0001E86C
	// succ:  l0001E86C l0001E864_thunk_fn0001E49C
l0001E864_thunk_fn0001E49C:
	call fn0001E49C (retsize: 0;)
	return
	// succ:  qtanh_execute_hvx_exit
l0001E86C:
	p0 = r27 > 0<32>
	p0 = r4 == -1<i32>
	branch p0 l0001E4B4
	// succ:  l0001E870 l0001E4B4
l0001E870:
	branch p0 l0001E900
	// succ:  l0001E87C l0001E900
l0001E87C:
	r4 = Mem0[r2 - 48<i32>:word32]
	r7 = 0<32>
	r2 = r27 + 0x7F<32>
	r6 = 7<32>
	r4 = 0<32>
	r0 = r0
	r5 = r2 >>u 7<32>
	p0 = r7 == -1<i32>
	branch p0 l0001E4D8
	// succ:  l0001E894 l0001E898_thunk_fn0001E49C
l0001E894:
	__loop(0<i32>, 0x0001E8A8<p32>, r5)
	r3 = 3<32>
	r2 = Mem0[r29 + 16<i32>:word32]
	r4 = 0<32>
	r1 = r1 + 1<i32>
	p0 = r0 == r7
	branch p0 l0001E8A4_thunk_fn0001EA34
	goto l0001E8A8
	// succ:  l0001E8A8 l0001E8A4_thunk_fn0001EA34
l0001E898_thunk_fn0001E49C:
	call fn0001E49C (retsize: 0;)
	return
	// succ:  qtanh_execute_hvx_exit
l0001E8A4_thunk_fn0001EA34:
	call fn0001EA34 (retsize: 0;)
	return
	// succ:  qtanh_execute_hvx_exit
l0001E8A8:
	p1 = r2 == r0
	branch p1 l0001E5F4
	// succ:  l0001E8B4 l0001E5F4 l0001E600
l0001E8B4:
	p1 = r3 == r0
	branch p1 l0001E600
l0001E900:
	call fn00009560 (retsize: 0;)
	r2 = r20
	r1 = Mem0[r29 + 16<i32>:word64]
	r0 = Mem0[r29 + 24<i32>:word64]
	r4 = 0x00029951<p32>
	r2 = Mem0[r25 + 16<i32>:word32]
	r5 = Mem0[r29 + 28<i32>:word32]
	r1 = 0x8E<32>
	Mem0[r25 + 12<i32>:word32] = 0xFFFFFF81<32>
	Mem0[r25 + 8<i32>:word32] = 1<32>
	Mem0[r25:word32] = 1<32>
	Mem0[r25 + 4<i32>:word32] = 0xFFFFFF81<32>
	r2 = r17
	Mem0[r2 - 1082130432<i32>:word32] = 0<32>
	Mem0[r25 + 24<i32>:word32] = 4<32>
	r3 = Mem0[r5 + 16<i32>:word32]
	Mem0[r5 + 8<i32>:word32] = 1<32>
	Mem0[r5:word32] = 1<32>
	Mem0[r5 + 4<i32>:word32] = 1<32>
	Mem0[r5 + 12<i32>:word32] = 0xFFFFFF81<32>
	Mem0[r3 + 1065353216<i32>:word32] = 0<32>
	call logmsg_function (retsize: 0;)
	Mem0[r5 + 24<i32>:word32] = 4<32>
	Mem0[r29:word32] = r16
	r0 = 0<32>
	// succ:  l0001E964
l0001E964:
	r17_r16 = Mem0[r29 + 72<i32>:word64]
	r19_r18 = Mem0[r29 + 64<i32>:word64]
	r21_r20 = Mem0[r29 + 56<i32>:word64]
	r23_r22 = Mem0[r29 + 48<i32>:word64]
	r25_r24 = Mem0[r29 + 40<i32>:word64]
	r27_r26 = Mem0[r29 + 32<i32>:word64]
	v35 = r30
	r31 = Mem0[v35 + 4<i32>:word32]
	r30 = Mem0[v35:word32]
	r29 = v35 + 8<i32>
	return
	// succ:  qtanh_execute_hvx_exit
qtanh_execute_hvx_exit:


// logmsg_function
// Return size: 0
define logmsg_function
logmsg_function_entry:
	r29 = fp
	// succ:  l0001E978
l0001E978:
	r3 = 2<32>
	v5 = r29 - 8<i32>
	Mem0[v5:word32] = r30
	Mem0[v5 + 4<i32>:word32] = r31
	r30 = v5
	r29 = v5 - 8<i32>
	r5 = Mem0[r2 + 16<i32>:word32]
	branch r3 >u r5 l0001E99C
	// succ:  l0001E988 l0001E99C
l0001E988:
	r0 = 0x0001E9C4<p32>
	r3 = 2<32>
	r5 = r29 + 0x10<32>
	call logv (retsize: 0;)
	r6 = r29 + 0x10<32>
	Mem0[r29 + 1<i32>:byte] = r6
	// succ:  l0001E990_thunk_errlog_function
l0001E990_thunk_errlog_function:
	call errlog_function (retsize: 0;)
	return
	// succ:  logmsg_function_exit
l0001E99C:
	v13 = r30
	r31 = Mem0[v13 + 4<i32>:word32]
	r30 = Mem0[v13:word32]
	r29 = v13 + 8<i32>
	return
	// succ:  logmsg_function_exit
logmsg_function_exit:


// errlog_function
// Return size: 0
define errlog_function
errlog_function_entry:
	r29 = fp
	// succ:  l0001E9A0
l0001E9A0:
	r0 = 0x00029900<p32>
	r4 = r3
	v8 = r29 - 8<i32>
	Mem0[v8:word32] = r30
	Mem0[v8 + 4<i32>:word32] = r31
	r30 = v8
	r29 = v8 - 8<i32>
	r3 = 0<32>
	r5 = r29 + 0x10<32>
	r6 = r29 + 0x10<32>
	Mem0[r29 + 1<i32>:byte] = r6
	v13 = r30
	r31 = Mem0[v13 + 4<i32>:word32]
	r30 = Mem0[v13:word32]
	r29 = v13 + 8<i32>
	return
	// succ:  errlog_function_exit
errlog_function_exit:


// qsigmoid_execute_ref
// Return size: 0
define qsigmoid_execute_ref
qsigmoid_execute_ref_entry:
	r29 = fp
	// succ:  l0001E9D0
l0001E9D0:
	r17_r16 = r1_r0
	Mem0[r29 - 16<i32>:word64] = r17_r16
	v8 = r29 - 8<i32>
	Mem0[v8:word32] = r30
	Mem0[v8 + 4<i32>:word32] = r31
	r30 = v8
	r29 = v8 - 64<i32>
	r2 = Mem0[r16 + 4<i32>:word32]
	Mem0[r29 + 16<i32>:word64] = r27_r26
	r7 = Mem0[r16 + 8<i32>:word32]
	r18 = 0x437F0000<32>
	Mem0[r29 + 32<i32>:word64] = r23_r22
	Mem0[r29 + 48<i32>:word64] = r19_r18
	r1 = r18
	r26 = Mem0[r2:word32]
	r4 = Mem0[r2 + 4<i32>:word32]
	r2 = Mem0[r2 + 8<i32>:word32]
	r27 = Mem0[r7:word32]
	r4 = Mem0[r4 + 16<i32>:word32]
	r0 = Mem0[r26 + 4<i32>:word32]
	r2 = Mem0[r2 + 16<i32>:word32]
	r6 = Mem0[r26:word32]
	r23 = Mem0[r4:word32]
	r5 = Mem0[r26 + 12<i32>:word32]
	r3 = r0 * r6
	r2 = Mem0[r2:word32]
	r6 = Mem0[r26 + 8<i32>:word32]
	Mem0[r29 + 40<i32>:word64] = r21_r20
	Mem0[r29 + 24<i32>:word64] = r25_r24
	r2 = r3 * r6
	r0 = r2 - r23
	r20 = Mem0[r7 + 8<i32>:word32]
	r21 = Mem0[r7 + 4<i32>:word32]
	// succ:  l0001EA30_thunk_fn0001EA34
l0001EA30_thunk_fn0001EA34:
	call fn0001EA34 (retsize: 0;)
	return
	// succ:  qsigmoid_execute_ref_exit
qsigmoid_execute_ref_exit:


// fn0001EA34
// Return size: 0
define fn0001EA34
fn0001EA34_entry:
	r29 = fp
	// succ:  l0001EA34
l0001EA34:
	r0 = r2 - r23
	r20 = Mem0[r7 + 8<i32>:word32]
	r21 = Mem0[r7 + 4<i32>:word32]
	r22 = Mem0[r26 + 16<i32>:word32]
	r24 = Mem0[r27 + 16<i32>:word32]
	r25 = r2 * r5
	call fn00009610 (retsize: 0;)
	r4 = 0x00029B1D<p32>
	r1 = 0x42<32>
	r2 = r17
	call logmsg_function (retsize: 0;)
	r19 = r0
	Mem0[r29:word32] = r16
	p0 = r25 == 0<32>
	r2 = Mem0[r27 + 20<i32>:word32]
	branch r25 >u r2 l0001EA64_thunk_fn0001EA8C
	goto l0001EA64_thunk_fn0001EA74
	// succ:  l0001EA64_thunk_fn0001EA74 l0001EA64_thunk_fn0001EA8C
l0001EA34:
	r22 = Mem0[r26 + 16<i32>:word32]
	r24 = Mem0[r27 + 16<i32>:word32]
	r25 = r2 * r5
	call fn00009610 (retsize: 0;)
	r4 = 0x00029B1D<p32>
	r1 = 0x42<32>
	r2 = r17
	call logmsg_function (retsize: 0;)
	r19 = r0
	Mem0[r29:word32] = r16
	p0 = r25 == 0<32>
	r2 = Mem0[r27 + 20<i32>:word32]
	branch r25 >u r2 l0001EA8C
	// succ:  l0001EA5C_thunk_fn0001EA74 l0001EA5C_thunk_fn0001EA8C
l0001EA5C_thunk_fn0001EA74:
	call fn0001EA74 (retsize: 0;)
	return
	// succ:  fn0001EA34_exit
l0001EA5C_thunk_fn0001EA8C:
	call fn0001EA8C (retsize: 0;)
	return
	// succ:  fn0001EA34_exit
l0001EA64_thunk_fn0001EA74:
	call fn0001EA74 (retsize: 0;)
	return
	// succ:  fn0001EA34_exit
l0001EA64_thunk_fn0001EA8C:
	call fn0001EA8C (retsize: 0;)
	return
	// succ:  fn0001EA34_exit
fn0001EA34_exit:


// fn0001EA74
// Return size: 0
define fn0001EA74
fn0001EA74_entry:
	r29 = fp
	// succ:  l0001EA74
l0001EA74:
	r3 = 0x0001EA8D<p32>
	r1 = 0x43<32>
	r2 = r17
	call errlog_function (retsize: 0;)
	// succ:  l0001EB54_in_qsigmoid_execute_ref
l0001EB54_in_qsigmoid_execute_ref:
	r17_r16 = Mem0[r29 + 56<i32>:word64]
	r19_r18 = Mem0[r29 + 48<i32>:word64]
	r21_r20 = Mem0[r29 + 40<i32>:word64]
	r23_r22 = Mem0[r29 + 32<i32>:word64]
	r25_r24 = Mem0[r29 + 24<i32>:word64]
	r27_r26 = Mem0[r29 + 16<i32>:word64]
	v15 = r30
	r31 = Mem0[v15 + 4<i32>:word32]
	r30 = Mem0[v15:word32]
	r29 = v15 + 8<i32>
	return
	// succ:  fn0001EA74_exit
fn0001EA74_exit:


// fn0001EA8C
// Return size: 0
define fn0001EA8C
fn0001EA8C_entry:
	r29 = fp
	// succ:  l0001EA8C
l0001EA8C:
	r2 = Mem0[r26:word32]
	r3 = Mem0[r26 + 4<i32>:word32]
	Mem0[r27 + 4<i32>:word32] = r3
	Mem0[r27:word32] = r2
	r6 = Mem0[r26 + 8<i32>:word32]
	Mem0[r27 + 8<i32>:word32] = r6
	r17 = 0x42FF0000<32>
	r7 = Mem0[r26 + 12<i32>:word32]
	Mem0[r29 + 12<i32>:word32] = r17
	branch p0 l0001EAB4_thunk_fn0001EB10
	goto l0001EAC0
	// succ:  l0001EAC0 l0001EAB4_thunk_fn0001EB10
l0001EAB4_thunk_fn0001EB10:
	call fn0001EB10 (retsize: 0;)
	return
	// succ:  fn0001EA8C_exit
l0001EAC0:
	Mem0[r27 + 12<i32>:word32] = r7
	Mem0[r27 + 24<i32>:word32] = r25
	r26 = 0x3F800000<32>
	r27 = 0x3F000000<32>
	// succ:  l0001EAC0_thunk_fn0001EAD0
l0001EAC0_thunk_fn0001EAD0:
	call fn0001EAD0 (retsize: 0;)
	return
	// succ:  fn0001EA8C_exit
fn0001EA8C_exit:


// fn0001EAD0
// Return size: 0
define fn0001EAD0
fn0001EAD0_entry:
	r29 = fp
	// succ:  l0001EAD0
l0001EAD0:
	r3 = r23
	r22 = r22 + 1<i32>
	r2 = Mem0[r22:byte]
	r2 = CONVERT(r2, int32, real32)
	r3 = r3 + r19 * r2
	r0 = r3 * r27
	call fn000097F0 (retsize: 0;)
	r3 = r0 + r26
	r2 = r27
	r25 = r25 + 0xFFFFFFFF<32>
	r2 = r2 + r3 * r17
	p0 = r25 == 0<32>
	r3 = CONVERT(r2, real32, uint32)
	p1 = r2 > r18
	r3 = 0xFFFFFFFF<32>
	// succ:  l0001EB08
l0001EB08:
	branch p0 l0001EAD0
	// succ:  l0001EB08_thunk_fn0001EB10 l0001EAD0
l0001EB08_thunk_fn0001EB10:
	call fn0001EB10 (retsize: 0;)
	return
	// succ:  fn0001EAD0_exit
fn0001EAD0_exit:


// fn0001EB10
// Return size: 0
define fn0001EB10
fn0001EB10_entry:
	r29 = fp
	// succ:  l0001EB10
l0001EB10:
	Mem0[r24:byte] = r3
	r24 = r24 + 1<i32>
	r4 = 0x00029B57<p32>
	r2 = Mem0[r21 + 16<i32>:word32]
	Mem0[r21 + 12<i32>:word32] = 1<32>
	// succ:  l0001EB1C
l0001EB1C:
	r1 = 0x57<32>
	Mem0[r21 + 8<i32>:word32] = 1<32>
	Mem0[r21:word32] = 1<32>
	// succ:  l0001EB24
l0001EB24:
	Mem0[r21 + 4<i32>:word32] = 1<32>
	Mem0[r2:word32] = 0<32>
	r2 = Mem0[r29 + 12<i32>:word32]
	Mem0[r21 + 24<i32>:word32] = 4<32>
	r3 = Mem0[r20 + 16<i32>:word32]
	Mem0[r20 + 8<i32>:word32] = 1<32>
	Mem0[r20:word32] = 1<32>
	Mem0[r20 + 4<i32>:word32] = 1<32>
	Mem0[r20 + 12<i32>:word32] = 0xFFFFFF81<32>
	Mem0[r3 + 1065353216<i32>:word32] = 0<32>
	call logmsg_function (retsize: 0;)
	Mem0[r20 + 24<i32>:word32] = 4<32>
	Mem0[r29:word32] = r16
	// succ:  l0001EB50
l0001EB50:
	r0 = 0<32>
	// succ:  l0001EB54
l0001EB54:
	r17_r16 = Mem0[r29 + 56<i32>:word64]
	r19_r18 = Mem0[r29 + 48<i32>:word64]
	r21_r20 = Mem0[r29 + 40<i32>:word64]
	r23_r22 = Mem0[r29 + 32<i32>:word64]
	r25_r24 = Mem0[r29 + 24<i32>:word64]
	r27_r26 = Mem0[r29 + 16<i32>:word64]
	v20 = r30
	r31 = Mem0[v20 + 4<i32>:word32]
	r30 = Mem0[v20:word32]
	r29 = v20 + 8<i32>
	return
	// succ:  fn0001EB10_exit
fn0001EB10_exit:


// qsigmoid_check
// Return size: 0
define qsigmoid_check
qsigmoid_check_entry:
	r29 = fp
	// succ:  l0001EB70
l0001EB70:
	r4 = 0x00029B67<p32>
	Mem0[r29 - 16<i32>:word64] = r17_r16
	v7 = r29 - 8<i32>
	Mem0[v7:word32] = r30
	Mem0[v7 + 4<i32>:word32] = r31
	r30 = v7
	r29 = v7 - 16<i32>
	r1 = 0x95<32>
	r16 = r1
	r17 = r0
	call logmsg_function (retsize: 0;)
	r2 = r16
	Mem0[r29:word32] = r17
	r1 = 0x96<32>
	r2 = Mem0[r17 + 16<i32>:word32]
	branch r2 == 3<32> l0001EBB0
	// succ:  l0001EB9C l0001EBB0
l0001EB9C:
	r3 = 0x0001EBC4<p32>
	call errlog_function (retsize: 0;)
	r2 = r16
	// succ:  l0001EBA4
l0001EBA4:
	r0 = 0xFFFFFFFF<32>
	r17_r16 = Mem0[r29 + 8<i32>:word64]
	v16 = r30
	r31 = Mem0[v16 + 4<i32>:word32]
	r30 = Mem0[v16:word32]
	r29 = v16 + 8<i32>
	return
	// succ:  qsigmoid_check_exit
l0001EBB0:
	r1 = 0x97<32>
	r2 = Mem0[r17 + 20<i32>:word32]
	branch r2 == 3<32> l0001EBC8
	// succ:  l0001EBC0 l0001EBC8
l0001EBC0:
	r3 = 0x0001EBD3<p32>
	goto l0001EBA4
	// succ:  l0001EBA4
l0001EBC8:
	r4 = 0x00029B9F<p32>
	r1 = 0x98<32>
	r2 = r16
	call logmsg_function (retsize: 0;)
	Mem0[r29:word32] = r17
	r0 = 0<32>
	r17_r16 = Mem0[r29 + 8<i32>:word64]
	v17 = r30
	r31 = Mem0[v17 + 4<i32>:word32]
	r30 = Mem0[v17:word32]
	r29 = v17 + 8<i32>
	return
	// succ:  qsigmoid_check_exit
qsigmoid_check_exit:


// qsigmoid_execute_hvx
// Return size: 0
define qsigmoid_execute_hvx
qsigmoid_execute_hvx_entry:
	r29 = fp
	goto l0001EBF0
	// succ:  l0001EBF0
l0001EB0C:
	Mem0[r24:byte] = r3
	r24 = r24 + 1<i32>
	// succ:  l0001EB0C_thunk_fn0001EB10
l0001EB0C_thunk_fn0001EB10:
	call fn0001EB10 (retsize: 0;)
	return
	// succ:  qsigmoid_execute_hvx_exit
l0001EB14:
	r4 = 0x0001EB1B<p32>
	r2 = Mem0[r21 + 16<i32>:word32]
	Mem0[r21 + 12<i32>:word32] = 1<32>
	// succ:  l0001EB14_thunk_fn0001EB10
l0001EB14_thunk_fn0001EB10:
	call fn0001EB10 (retsize: 0;)
	return
	// succ:  qsigmoid_execute_hvx_exit
l0001EB18:
	r2 = Mem0[r21 + 16<i32>:word32]
	Mem0[r21 + 12<i32>:word32] = 1<32>
	// succ:  l0001EB18_thunk_fn0001EB10
l0001EB18_thunk_fn0001EB10:
	call fn0001EB10 (retsize: 0;)
	return
	// succ:  qsigmoid_execute_hvx_exit
l0001EB48:
	Mem0[r20 + 24<i32>:word32] = 4<32>
	Mem0[r29:word32] = r16
	// succ:  l0001EB48_thunk_fn0001EB10
l0001EB48_thunk_fn0001EB10:
	call fn0001EB10 (retsize: 0;)
	return
	// succ:  qsigmoid_execute_hvx_exit
l0001EBF0:
	r4 = 0x00029B1D<p32>
	Mem0[r29 - 16<i32>:word64] = r17_r16
	v7 = r29 - 8<i32>
	Mem0[v7:word32] = r30
	Mem0[v7 + 4<i32>:word32] = r31
	r30 = v7
	r29 = v7 - 80<i32>
	r17_r16 = r1_r0
	r1 = 0x73<32>
	r3 = Mem0[r16 + 4<i32>:word32]
	Mem0[r29 + 64<i32>:word64] = r19_r18
	r2 = r17
	r5 = Mem0[r16 + 8<i32>:word32]
	Mem0[r29 + 56<i32>:word64] = r21_r20
	Mem0[r29 + 40<i32>:word64] = r25_r24
	r6 = Mem0[r3 + 8<i32>:word32]
	r7 = Mem0[r3 + 4<i32>:word32]
	r0 = Mem0[r5 + 4<i32>:word32]
	r18 = Mem0[r5:word32]
	r5 = Mem0[r5 + 8<i32>:word32]
	r21 = Mem0[r3:word32]
	r3 = Mem0[r7 + 16<i32>:word32]
	r5 = Mem0[r6 + 16<i32>:word32]
	Mem0[r29 + 28<i32>:word32] = r5
	Mem0[r29 + 48<i32>:word64] = r23_r22
	r7 = Mem0[r18 + 16<i32>:word32]
	Mem0[r29 + 32<i32>:word64] = r27_r26
	r25 = Mem0[r17 + 4<i32>:word32]
	r23 = Mem0[r21 + 16<i32>:word32]
	Mem0[r29 + 20<i32>:word32] = r0
	r20 = Mem0[r21 + 8<i32>:word32]
	r22 = Mem0[r21 + 4<i32>:word32]
	r26 = Mem0[r21 + 12<i32>:word32]
	r27 = Mem0[r21:word32]
	r19 = Mem0[r3:word32]
	Mem0[r29 + 24<i32>:word32] = r7
	r24 = Mem0[r5:word32]
	call logmsg_function (retsize: 0;)
	Mem0[r29:word32] = r16
	r1 = 0x74<32>
	r2 = Mem0[r16 + 32<i32>:int8]
	branch r2 == 0<32> l0001EC7C
l0001EC64:
	r3 = 0x00029B37<p32>
	// succ:  l0001EC68 l0001EC7C l0001EC6C
l0001EC68:
	r3 = 0x0001EC7B<p32>
	// succ:  l0001EC6C
l0001EC6C:
	call errlog_function (retsize: 0;)
	r2 = r17
	// succ:  l0001EC70
l0001EC70:
	goto l0001EFD4
	// succ:  l0001EFD4
l0001EC7C:
	r2 = r22 * r27
	r1 = 0x75<32>
	r3 = Mem0[r18 + 20<i32>:word32]
	r2 = r2 * r20
	r20 = r2 * r26
	branch r20 >u r3 l0001ECA0
	// succ:  l0001EC98 l0001ECA0
l0001EC98:
	r3 = 0x0001ECCD<p32>
	goto l0001EC70
	// succ:  l0001EC70
l0001ECA0:
	r22 = r20 + 0xFF<32>
	r2 = 0xFF<32>
	r3 = Mem0[r21:word32]
	Mem0[r29 + 12<i32>:word32] = r2
	r27 = r22 & 0xFFFFFF00<32>
	r0 = r25
	r4 = Mem0[r21 + 4<i32>:word32]
	Mem0[r18 + 1<i32>:byte] = r4
	Mem0[r18:word32] = r3
	r3 = r22 + r0
	r1 = 0<32>
	r2 = Mem0[r21 + 8<i32>:word32]
	r2 = r27
	Mem0[r18 + 8<i32>:word32] = r2
	Mem0[r29 + 16<i32>:word32] = r0
	r7 = Mem0[r21 + 12<i32>:word32]
	call fn000095F0 (retsize: 0;)
	r21 = r3 & 0xFFFFFF00<32>
	Mem0[r18 + 12<i32>:word32] = r7
	Mem0[r18 + 24<i32>:word32] = r20
	call fn000095F0 (retsize: 0;)
	r1_r0 = SEQ(0<32>, r21)
	r2 = r27
	call fn00009560 (retsize: 0;)
	r2 = r20
	r1_r0 = r23_r21
	r1 = r24 - r19
	r2 = 0xC0800000<32>
	p0 = r19 >= r2
	branch p0 l0001EDDC
	// succ:  l0001ED10 l0001EDDC
l0001ED10:
	r18 = 0x40800000<32>
	p0 = r18 >= r24
	branch p0 l0001EDDC
	// succ:  l0001ED20 l0001EDDC
l0001ED20:
	r2 = 0x437F0000<32>
	call fn00009610 (retsize: 0;)
	r1_r0 = r2_r1
	r2 = r19 + r18
	r23 = r0
	call fn00009610 (retsize: 0;)
	r1_r0 = r23_r2
	r18 = truncf(CONVERT(r0, uint32, real32))
	r2 = 0x41700000<32>
	call fn000097C0 (retsize: 0;)
	r0 = r2
	r2 = 0x41FF0000<32>
	r3 = 0xBF800000<32>
	r2 = r23 * r2
	r3 = r0 + r3
	p0 = r20 > 0<32>
	r25 = Mem0[r29 + 20<i32>:word32]
	r2 = r2 * r0
	r3 = truncf(CONVERT(r3, uint32, real32))
	r4 = truncf(CONVERT(r2, uint32, real32))
	branch p0 l0001EE98
	// succ:  l0001ED88 l0001EE98
l0001ED88:
	r2 = Mem0[r29 + 12<i32>:word32]
	r5 = truncf(CONVERT(r0, uint32, real32))
	r5 = r5 + (r5 >>u 0x1F<32>)
	p0 = r4 > r3
	r3 = r4 + 0<32>
	r6 = r2 * r26
	r2 = r21
	r3 = CONVERT(SLICE(r3, int16, 0), int16, int32)
	__loop(0<i32>, 0x0001EDA8<p32>, r6)
	r4 = r5 >> 1<32>
	r5 = 0xFF<32>
	r7 = r4
	r6 = Mem0[r2:byte]
	r6 = r6 + r18
	r7 = r7 + r6 * r3
	r6 = r7 >> 0xF<32>
	branch p0 l0001EDD0
	// succ:  l0001EDC8 l0001EDD0
l0001EDC8:
	p0 = r6 > 0xFF<32>
	r5 = r6 + 0<32>
	p0 = r6 > 0xFFFFFFFF<32>
	r5 = 0<32>
	// succ:  l0001EDD0
l0001EDD0:
	Mem0[r2:byte] = r5
	r2 = r2 + 1<i32>
	goto l0001EE98
	// succ:  l0001EE98
l0001EDDC:
	call fn00009600 (retsize: 0;)
	r0 = 0x38D1B717<32>
	call fn00009610 (retsize: 0;)
	r1 = 0x437F0000<32>
	p0 = r12 > 0<32>
	branch p0 l0001EE98
	// succ:  l0001EE00 l0001EE98
l0001EE00:
	r3 = r21 + r22
	r25 = Mem0[r29 + 20<i32>:word32]
	__loop(0<i32>, 0x0001EE0C<p32>, r20)
	r22 = r3 & 0xFFFFFF00<32>
	r3_r2 = r22_r21
	r5 = r19
	r2 = r2 + 1<i32>
	r4 = Mem0[r2:byte]
	r4 = CONVERT(r4, int32, real32)
	r5 = r5 + r0 * r4
	r3 = r3 + 4<32>
	r0 = 0x17<32>
	r1 = 0x41000000<32>
	call fn00009600 (retsize: 0;)
	r2 = 0x437F0000<32>
	call fn00009610 (retsize: 0;)
	r1_r0 = r0_r2
	r18 = r21
	r23 = r0
	r2 = Mem0[r29 + 12<i32>:word64]
	r19 = r2 * r26
	r24 = 0x40800000<32>
	// succ:  l0001EE5C
l0001EE5C:
	r2 = Mem0[r22:word32]
	r2 = r2 + r24
	r0 = r23 * r2
	call fn00009620 (retsize: 0;)
	r3 = truncf(CONVERT(r0, uint32, real32))
	r2 = 0xFF<32>
	branch p0 l0001EE88
	// succ:  l0001EE80 l0001EE88
l0001EE80:
	p0 = r3 > 0xFF<32>
	r2 = r3 + 0<32>
	p0 = r3 > 0xFFFFFFFF<32>
	r2 = 0<32>
	// succ:  l0001EE88
l0001EE88:
	r19 = r19 + 0xFFFFFFFF<32>
	r22 = r22 + 4<32>
	Mem0[r18:byte] = r2
	r18 = r18 + 1<i32>
	p0 = r11 == 0<32>
	branch p0 l0001EE5C
	// succ:  l0001EE98 l0001EE5C
l0001EE98:
	r2 = 0x0002B110<p32>
	r3 = 0x1010101<32>
	r4 = 0x10101010<32>
	r5 = 0x2020202<32>
	r6 = 0xF8F8F8F8<32>
	r7 = 0x7070707<32>
	p0 = r3 == -1<i32>
	branch p0 l0001EB08
	goto l0001EECC
	// succ:  l0001EECC l0001EEC8_thunk_fn0001EAD0
l0001EEC8_thunk_fn0001EAD0:
	call fn0001EAD0 (retsize: 0;)
	return
	// succ:  qsigmoid_execute_hvx_exit
l0001EECC:
	p0 = r5 == -1<i32>
	branch p0 l0001EB0C
	// succ:  l0001EED0 l0001EB0C
l0001EED0:
	p0 = r6 == -1<i32>
	branch p0 l0001EB14
	// succ:  l0001EED4 l0001EB14
l0001EED4:
	p0 = r7 == -1<i32>
	branch p0 l0001EB18
	// succ:  l0001EEDC l0001EB18
l0001EEDC:
	p0 = r27 > 0<32>
	p0 = r4 == -1<i32>
	branch p0 l0001EB24
	// succ:  l0001EEE0 l0001EEE4_thunk_fn0001EB10
l0001EEE0:
	branch p0 l0001EF74
	goto l0001EEEC
	// succ:  l0001EEEC l0001EF74
l0001EEE4_thunk_fn0001EB10:
	call fn0001EB10 (retsize: 0;)
	return
	// succ:  qsigmoid_execute_hvx_exit
l0001EEEC:
	r4 = Mem0[r2 - 32<i32>:word32]
	r7 = 0<32>
	r2 = r27 + 0x7F<32>
	r6 = 7<32>
	r4 = 0<32>
	r0 = r0
	r5 = r2 >>u 7<32>
	p0 = r7 == -1<i32>
	branch p0 l0001EB48
	// succ:  l0001EF04 l0001EB48
l0001EF04:
	__loop(0<i32>, 0x0001EF18<p32>, r5)
	r3 = 3<32>
	r2 = Mem0[r29 + 16<i32>:word32]
	r4 = 0<32>
	r1 = r1 + 1<i32>
	p0 = r0 == r7
	branch p0 l0001EF14_thunk_fn0001F0A4
	goto l0001EF18
	// succ:  l0001EF18 l0001EF14_thunk_fn0001F0A4
l0001EF14_thunk_fn0001F0A4:
	call fn0001F0A4 (retsize: 0;)
	return
	// succ:  qsigmoid_execute_hvx_exit
l0001EF18:
	p1 = r2 == r0
	branch p1 l0001EC64
	// succ:  l0001EF24 l0001EC64 l0001EC70
l0001EF24:
	p1 = r3 == r0
	branch p1 l0001EC70
l0001EF74:
	call fn00009560 (retsize: 0;)
	r2 = r20
	r1 = Mem0[r29 + 16<i32>:word64]
	r0 = Mem0[r29 + 24<i32>:word64]
	r4 = 0x00029B57<p32>
	r2 = Mem0[r25 + 16<i32>:word32]
	r5 = Mem0[r29 + 28<i32>:word32]
	r1 = 0x8F<32>
	Mem0[r25 + 12<i32>:word32] = 0xFFFFFF81<32>
	Mem0[r25 + 8<i32>:word32] = 1<32>
	Mem0[r25:word32] = 1<32>
	Mem0[r25 + 4<i32>:word32] = 0xFFFFFF81<32>
	r2 = r17
	Mem0[r2:word32] = 0<32>
	Mem0[r25 + 24<i32>:word32] = 4<32>
	r3 = Mem0[r5 + 16<i32>:word32]
	Mem0[r5 + 8<i32>:word32] = 1<32>
	Mem0[r5:word32] = 1<32>
	Mem0[r5 + 4<i32>:word32] = 1<32>
	Mem0[r5 + 12<i32>:word32] = 0xFFFFFF81<32>
	Mem0[r3 + 1065353216<i32>:word32] = 0<32>
	call logmsg_function (retsize: 0;)
	Mem0[r5 + 24<i32>:word32] = 4<32>
	Mem0[r29:word32] = r16
	r0 = 0<32>
	// succ:  l0001EFD4
l0001EFD4:
	r17_r16 = Mem0[r29 + 72<i32>:word64]
	r19_r18 = Mem0[r29 + 64<i32>:word64]
	r21_r20 = Mem0[r29 + 56<i32>:word64]
	r23_r22 = Mem0[r29 + 48<i32>:word64]
	r25_r24 = Mem0[r29 + 40<i32>:word64]
	r27_r26 = Mem0[r29 + 32<i32>:word64]
	v35 = r30
	r31 = Mem0[v35 + 4<i32>:word32]
	r30 = Mem0[v35:word32]
	r29 = v35 + 8<i32>
	return
	// succ:  qsigmoid_execute_hvx_exit
qsigmoid_execute_hvx_exit:


// logmsg_function
// Return size: 0
define logmsg_function
logmsg_function_entry:
	r29 = fp
	// succ:  l0001EFE8
l0001EFE8:
	r3 = 2<32>
	v5 = r29 - 8<i32>
	Mem0[v5:word32] = r30
	Mem0[v5 + 4<i32>:word32] = r31
	r30 = v5
	r29 = v5 - 8<i32>
	r5 = Mem0[r2 + 16<i32>:word32]
	branch r3 >u r5 l0001F00C
	// succ:  l0001EFF8 l0001F00C
l0001EFF8:
	r0 = 0x0001F004<p32>
	r3 = 2<32>
	r5 = r29 + 0x10<32>
	call logv (retsize: 0;)
	r6 = r29 + 0x10<32>
	Mem0[r29 + 1<i32>:byte] = r6
	// succ:  l0001F000_thunk_errlog_function
l0001F000_thunk_errlog_function:
	call errlog_function (retsize: 0;)
	return
	// succ:  logmsg_function_exit
l0001F00C:
	v13 = r30
	r31 = Mem0[v13 + 4<i32>:word32]
	r30 = Mem0[v13:word32]
	r29 = v13 + 8<i32>
	return
	// succ:  logmsg_function_exit
logmsg_function_exit:


// errlog_function
// Return size: 0
define errlog_function
errlog_function_entry:
	r29 = fp
	// succ:  l0001F010
l0001F010:
	r0 = 0x00029B00<p32>
	r4 = r3
	v8 = r29 - 8<i32>
	Mem0[v8:word32] = r30
	Mem0[v8 + 4<i32>:word32] = r31
	r30 = v8
	r29 = v8 - 8<i32>
	r3 = 0<32>
	r5 = r29 + 0x10<32>
	r6 = r29 + 0x10<32>
	Mem0[r29 + 1<i32>:byte] = r6
	v13 = r30
	r31 = Mem0[v13 + 4<i32>:word32]
	r30 = Mem0[v13:word32]
	r29 = v13 + 8<i32>
	return
	// succ:  errlog_function_exit
errlog_function_exit:


// add_f_execute
// Return size: 0
define add_f_execute
add_f_execute_entry:
	r29 = fp
	// succ:  l0001F040
l0001F040:
	r5 = r0
	v6 = r29 - 8<i32>
	Mem0[v6:word32] = r30
	Mem0[v6 + 4<i32>:word32] = r31
	r30 = v6
	r29 = v6 - 160<i32>
	r2 = Mem0[r5 + 4<i32>:word32]
	r3 = Mem0[r5 + 8<i32>:word32]
	Mem0[r29 + 112<i32>:word64] = r27_r26
	Mem0[r29 + 144<i32>:word64] = r19_r18
	r26 = Mem0[r2:word32]
	r19 = Mem0[r2 + 4<i32>:word32]
	r22 = 0<32>
	Mem0[r29 + 136<i32>:word64] = r21_r20
	Mem0[r29 + 128<i32>:word64] = r23_r22
	r6 = Mem0[r26 + 4<i32>:word32]
	r0 = Mem0[r26:word32]
	p0 = r6 == 1<32>
	p1 = r0 == 1<32>
	r8 = Mem0[r19:word32]
	r4 = Mem0[r19 + 4<i32>:word32]
	r10 = p1
	r12 = Mem0[r26 + 8<i32>:word32]
	r18 = p0 ? r4 : r6
	p2 = r12 == 1<32>
	r9 = Mem0[r19 + 8<i32>:word32]
	Mem0[r29 + 92<i32>:word32] = r4
	r4 = p1 ? r8 : r0
	r7 = Mem0[r26 + 12<i32>:word32]
	r2 = r4 * r18
	p1 = r7 == 1<32>
	r0 = Mem0[r19 + 12<i32>:word32]
	// succ:  l0001F098_thunk_fn0001F0A4
l0001F098_thunk_fn0001F0A4:
	call fn0001F0A4 (retsize: 0;)
	return
	// succ:  add_f_execute_exit
l0001F2E4:
	r13_r12 = r25_r26
	r14 = 0<32>
	// succ:  l0001F2EC l0001F348
l0001F2EC:
	r13_r12 = r25_r26
	r14 = 0<32>
	p0 = r12 > 0<32>
	branch p0 l0001F338
	// succ:  l0001F2F8 l0001F338
l0001F2F8:
	r28 = r12
	r15 = r13
	__loop(1<i32>, 0x0001F2FC<p32>, r20)
	p0 = r13 > 0<32>
	branch p0 l0001F32C
	// succ:  l0001F308 l0001F32C
l0001F308:
	r10 = r23
	r1_r0 = r15_r28
	__loop(0<i32>, 0x0001F30C<p32>, r21)
	r0 = r0 + (r6 << 2<32>)
	r1 = r1 + (r5 << 2<32>)
	r11 = Mem0[r1:word32]
	r16 = Mem0[r0:word32]
	r11 = r11 + r16
	r10 = r10 + 4<32>
	Mem0[r10:word32] = r11
	r23 = r23 + (r21 << 2<32>)
	// succ:  l0001F32C
l0001F32C:
	r28 = r28 + (r3 << 2<32>)
	r15 = r15 + (r2 << 2<32>)
	// succ:  l0001F338
l0001F338:
	r13 = r13 + (r22 << 2<32>)
	r12 = r12 + (r4 << 2<32>)
	r14 = r14 + 1<32>
	branch r14 == r18 l0001F2EC
	goto l0001F34C
	// succ:  l0001F34C l0001F2EC
l0001F348:
	r25 = r25 + (r8 << 2<32>)
	r26 = r26 + (r9 << 2<32>)
	r7 = r7 + 1<32>
	branch r7 == r24 l0001F2E0
	goto l0001F35C
	// succ:  l0001F35C l0001F348_thunk_fn0001F0EC
l0001F348_thunk_fn0001F0EC:
	call fn0001F0EC (retsize: 0;)
	return
	// succ:  add_f_execute_exit
l0001F34C:
	r26 = r26 + (r9 << 2<32>)
	r7 = r7 + 1<32>
	branch r7 == r24 l0001F2E4
	// succ:  l0001F35C l0001F2E4
l0001F35C:
	r0 = 0x0001F392<p32>
	r2 = Mem0[r29 + 60<i32>:word32]
	Mem0[r29:byte] = r2
	// succ:  l0001F35C_thunk_fn0001F0EC
l0001F35C_thunk_fn0001F0EC:
	call fn0001F0EC (retsize: 0;)
	return
	// succ:  add_f_execute_exit
add_f_execute_exit:


// fn0001F0A4
// Return size: 0
define fn0001F0A4
fn0001F0A4_entry:
	r29 = fp
	// succ:  l0001F0A4
l0001F0A4:
	r20 = p2 ? r9 : r12
	Mem0[r29 + 120<i32>:word64] = r25_r24
	Mem0[r29 + 76<i32>:word32] = r6
	r2 = r2 * r20
	r21 = p1 ? r0 : r7
	r2 = r2 * r21
	r6 = r1
	r25 = Mem0[r3:word32]
	Mem0[r29 + 152<i32>:word64] = r17_r16
	r10 = p2
	Mem0[r29 + 96<i32>:word32] = r10
	Mem0[r29 + 72<i32>:word32] = r8
	Mem0[r29 + 68<i32>:word32] = r9
	Mem0[r29 + 84<i32>:word32] = r10
	r16 = r2 << 2<32>
	Mem0[r29 + 104<i32>:word32] = r4
	Mem0[r29 + 80<i32>:word32] = r0
	branch p0 l0001F0E4_thunk_fn0001F0EC
	goto l0001F0E4_thunk_fn0001F0E8
	// succ:  l0001F0E4_thunk_fn0001F0E8 l0001F0E4_thunk_fn0001F0EC
l0001F0A4:
	r20 = p2 ? r9 : r12
	Mem0[r29 + 120<i32>:word64] = r25_r24
	Mem0[r29 + 76<i32>:word32] = r6
	r2 = r2 * r20
	r21 = p1 ? r0 : r7
	r2 = r2 * r21
	r6 = r1
	r25 = Mem0[r3:word32]
	Mem0[r29 + 152<i32>:word64] = r17_r16
	r10 = p2
	Mem0[r29 + 96<i32>:word32] = r10
	Mem0[r29 + 72<i32>:word32] = r8
	Mem0[r29 + 68<i32>:word32] = r9
	Mem0[r29 + 84<i32>:word32] = r10
	r16 = r2 << 2<32>
	Mem0[r29 + 104<i32>:word32] = r4
	Mem0[r29 + 80<i32>:word32] = r0
	branch p0 l0001F0EC
	goto l0001F0E4_thunk_fn0001F0E8
	// succ:  l0001F0E4_thunk_fn0001F0E8 l0001F0E4_thunk_fn0001F0EC
l0001F0E4_thunk_fn0001F0E8:
	call fn0001F0E8 (retsize: 0;)
	return
	// succ:  fn0001F0A4_exit
l0001F0E4_thunk_fn0001F0E8:
	call fn0001F0E8 (retsize: 0;)
	return
	// succ:  fn0001F0A4_exit
l0001F0E4_thunk_fn0001F0EC:
	call fn0001F0EC (retsize: 0;)
	return
	// succ:  fn0001F0A4_exit
l0001F0E4_thunk_fn0001F0EC:
	call fn0001F0EC (retsize: 0;)
	return
	// succ:  fn0001F0A4_exit
fn0001F0A4_exit:


// fn0001F0E8
// Return size: 0
define fn0001F0E8
fn0001F0E8_entry:
	r29 = fp
	// succ:  l0001F0E8
l0001F0E8:
	r22 = r7 * r12
	// succ:  l0001F0E8_thunk_fn0001F0EC
l0001F0E8_thunk_fn0001F0EC:
	call fn0001F0EC (retsize: 0;)
	return
	// succ:  fn0001F0E8_exit
fn0001F0E8_exit:


// fn0001F0EC
// Return size: 0
define fn0001F0EC
fn0001F0EC_entry:
	r29 = fp
	// succ:  l0001F0EC
l0001F0EC:
	r0 = 0x00029C0E<p32>
	r1 = 0xBC<32>
	r2 = r6
	r4 = 0x00029C2D<p32>
	r3 = Mem0[r19 + 16<i32>:word32]
	Mem0[r29 + 64<i32>:word32] = r12
	r24 = r6
	r27 = r5
	r23 = Mem0[r25 + 16<i32>:word32]
	Mem0[r29 + 88<i32>:word32] = r7
	r17 = Mem0[r26 + 16<i32>:word32]
	call logmsg_function (retsize: 0;)
	Mem0[r29 + 100<i32>:word32] = r3
	Mem0[r29:word32] = r5
	r1 = 0xBC<32>
	r2 = Mem0[r25 + 20<i32>:word32]
	branch r16 >u r2 l0001F154
	// succ:  l0001F138 l0001F154
l0001F138:
	r0 = 0x0001F152<p32>
	r2 = r24
	r3 = 0x00029C4B<p32>
	// succ:  l0001F148
l0001F148:
	call errlog_function (retsize: 0;)
	goto l0001F380
	// succ:  l0001F380
l0001F154:
	r2 = r24
	r13 = Mem0[r19:word32]
	r5 = Mem0[r26:word32]
	p0 = r5 == r13
	r8 = Mem0[r26 + 12<i32>:word32]
	r7 = Mem0[r26 + 8<i32>:word32]
	r6 = Mem0[r26 + 4<i32>:word32]
	r12 = Mem0[r19 + 12<i32>:word32]
	r9 = Mem0[r19 + 8<i32>:word32]
	r3 = Mem0[r19 + 4<i32>:word32]
	Mem0[r29 + 48<i32>:word32] = r25
	Mem0[r29 + 52<i32>:word32] = r16
	Mem0[r29 + 56<i32>:word32] = r17
	Mem0[r29 + 60<i32>:word32] = r27
	branch p0 l0001F19C
	// succ:  l0001F190 l0001F19C
l0001F190:
	p0 = r5 == 1<32>
	branch p0 l0001F19C
	// succ:  l0001F194 l0001F19C
l0001F194:
	branch p0 l0001F1D8
	// succ:  l0001F19C l0001F1D8
l0001F19C:
	p0 = r13 == 1<32>
	p0 = r6 == r3
	branch p0 l0001F1AC
	// succ:  l0001F1A0 l0001F1AC
l0001F1A0:
	p0 = r6 == 1<32>
	branch p0 l0001F1AC
	// succ:  l0001F1A4 l0001F1AC
l0001F1A4:
	p0 = r3 == 1<32>
	branch p0 l0001F1D8
	// succ:  l0001F1AC l0001F1D8
l0001F1AC:
	branch p0 l0001F1C0
	// succ:  l0001F1B4 l0001F1C0
l0001F1B4:
	p0 = r7 == r9
	p0 = r7 == 1<32>
	branch p0 l0001F1C0
	// succ:  l0001F1B8 l0001F1C0
l0001F1B8:
	branch p0 l0001F1D8
	// succ:  l0001F1C0 l0001F1D8
l0001F1C0:
	p0 = r9 == 1<32>
	branch p0 l0001F20C
	// succ:  l0001F1C8 l0001F20C
l0001F1C8:
	p0 = r8 == r12
	branch p0 l0001F20C
	// succ:  l0001F1D0 l0001F20C
l0001F1D0:
	p0 = r8 == 1<32>
	branch p0 l0001F20C
	// succ:  l0001F1D8 l0001F20C
l0001F1D8:
	p0 = r12 == 1<32>
	r0 = 0x00029C0E<p32>
	r1 = 0xBC<32>
	Mem0[r29 + 28<i32>:word32] = r12
	Mem0[r29 + 24<i32>:word32] = r9
	Mem0[r29 + 16<i32>:word32] = r13
	r3 = 0x00029C59<p32>
	Mem0[r29 + 20<i32>:word32] = r3
	Mem0[r29 + 8<i32>:word32] = r7
	Mem0[r29 + 12<i32>:word32] = r8
	Mem0[r29 + 4<i32>:word32] = r6
	goto l0001F148
	// succ:  l0001F148
l0001F20C:
	r19 = r2
	r24 = Mem0[r29 + 104<i32>:word32]
	Mem0[r29 + 44<i32>:word32] = r21
	r0 = 0x00029C0E<p32>
	Mem0[r29 + 36<i32>:word32] = r18
	Mem0[r29 + 20<i32>:word32] = r3
	r4 = 0x00029C89<p32>
	r1 = 0xBC<32>
	Mem0[r29 + 40<i32>:word32] = r20
	Mem0[r29 + 32<i32>:word32] = r24
	Mem0[r29 + 28<i32>:word32] = r12
	Mem0[r29 + 24<i32>:word32] = r9
	Mem0[r29 + 16<i32>:word32] = r13
	Mem0[r29 + 12<i32>:word32] = r8
	Mem0[r29 + 8<i32>:word32] = r7
	Mem0[r29 + 4<i32>:word32] = r6
	Mem0[r29:word32] = r5
	call logmsg_function (retsize: 0;)
	p0 = r24 > 0<32>
	r14 = 0<32>
	r3 = Mem0[r29 + 48<i32>:word32]
	r26 = Mem0[r29 + 100<i32>:word32]
	r25 = Mem0[r29 + 56<i32>:word32]
	r2 = Mem0[r29 + 52<i32>:word32]
	Mem0[r3 + 6<i32>:byte] = r2
	Mem0[r3 + 4<i32>:word32] = r18
	Mem0[r3 + 8<i32>:word32] = r20
	Mem0[r3 + 12<i32>:word32] = r21
	branch p0 l0001F358
	// succ:  l0001F288 l0001F358
l0001F288:
	r13 = Mem0[r29 + 80<i32>:word32]
	r12 = Mem0[r29 + 88<i32>:word32]
	r6 = !(r13 == 1<32>)
	r5 = Mem0[r29 + 68<i32>:word64]
	r7 = Mem0[r29 + 92<i32>:word64]
	r9 = r5 * r7
	r0 = Mem0[r29 + 84<i32>:word64]
	r2 = Mem0[r29 + 76<i32>:word64]
	p2 = r0
	p0 = r5 == 1<32>
	r3 = Mem0[r29 + 64<i32>:word64]
	r4 = Mem0[r29 + 72<i32>:word64]
	r8 = r3 * r2
	r9 = r9 * r13
	p1 = r4 == 1<32>
	r0 = Mem0[r29 + 96<i32>:word32]
	r4 = r13 * r5
	r2 = p2 ? 0<32> : r12
	p2 = r7 == 1<32>
	r9 = r14 + 0<32>
	r8 = r8 * r12
	p0 = r0
	r3 = p0 ? 0<32> : r13
	r5 = !(r12 == 1<32>)
	r7 = 0<32>
	r4 = r14 + 0<32>
	r8 = r14 + 0<32>
	// succ:  l0001F2E0
l0001F2E0:
	p0 = r10 > 0<32>
	branch p0 l0001F348
l0001F358:
	r0 = 0x00029C0E<p32>
	r2 = Mem0[r29 + 60<i32>:word32]
	Mem0[r29:byte] = r2
	// succ:  l0001F36C
l0001F36C:
	r4 = 0x0001F37D<p32>
	r1 = 0xBC<32>
	r2 = r19
	call logmsg_function (retsize: 0;)
	r0 = 0<32>
	// succ:  l0001F380
l0001F380:
	r17_r16 = Mem0[r29 + 152<i32>:word64]
	r19_r18 = Mem0[r29 + 144<i32>:word64]
	r21_r20 = Mem0[r29 + 136<i32>:word64]
	r23_r22 = Mem0[r29 + 128<i32>:word64]
	r25_r24 = Mem0[r29 + 120<i32>:word64]
	r27_r26 = Mem0[r29 + 112<i32>:word64]
	v28 = r30
	r31 = Mem0[v28 + 4<i32>:word32]
	r30 = Mem0[v28:word32]
	r29 = v28 + 8<i32>
	return
	// succ:  fn0001F0EC_exit
fn0001F0EC_exit:


// add_f_check
// Return size: 0
define add_f_check
add_f_check_entry:
	r29 = fp
	// succ:  l0001F394
l0001F394:
	r4 = 0x00029BD3<p32>
	Mem0[r29 - 16<i32>:word64] = r17_r16
	v7 = r29 - 8<i32>
	Mem0[v7:word32] = r30
	Mem0[v7 + 4<i32>:word32] = r31
	r30 = v7
	r29 = v7 - 16<i32>
	r17 = r0
	r1 = 0x37<32>
	r16 = r1
	r0 = 0x00029BB8<p32>
	r2 = r16
	Mem0[r29:word32] = r17
	call logmsg_function (retsize: 0;)
	r1 = 0x38<32>
	r2 = Mem0[r17 + 16<i32>:word32]
	branch r2 == 2<32> l0001F3E4
	// succ:  l0001F3C8 l0001F3E4
l0001F3C8:
	r0 = 0x0001F3FC<p32>
	r3 = 0x00029BDF<p32>
	// succ:  l0001F3D4
l0001F3D4:
	call errlog_function (retsize: 0;)
	r2 = r16
	r0 = 0xFFFFFFFF<32>
	r17_r16 = Mem0[r29 + 8<i32>:word64]
	v16 = r30
	r31 = Mem0[v16 + 4<i32>:word32]
	r30 = Mem0[v16:word32]
	r29 = v16 + 8<i32>
	return
	// succ:  add_f_check_exit
l0001F3E4:
	r1 = 0x39<32>
	r2 = Mem0[r17 + 20<i32>:word32]
	branch r2 == 1<32> l0001F404
	// succ:  l0001F3F4 l0001F404
l0001F3F4:
	r0 = 0x0001F3FC<p32>
	r3 = 0x00029BEE<p32>
	goto l0001F3D4
	// succ:  l0001F3D4
l0001F404:
	r0 = 0x00029BB8<p32>
	r1 = 0x3A<32>
	r2 = r16
	r4 = 0x00029BFE<p32>
	call logmsg_function (retsize: 0;)
	Mem0[r29:word32] = r17
	r0 = 0<32>
	r17_r16 = Mem0[r29 + 8<i32>:word64]
	v17 = r30
	r31 = Mem0[v17 + 4<i32>:word32]
	r30 = Mem0[v17:word32]
	r29 = v17 + 8<i32>
	return
	// succ:  add_f_check_exit
add_f_check_exit:


// logmsg_function
// Return size: 0
define logmsg_function
logmsg_function_entry:
	r29 = fp
	// succ:  l0001F428
l0001F428:
	r3 = 2<32>
	v5 = r29 - 8<i32>
	Mem0[v5:word32] = r30
	Mem0[v5 + 4<i32>:word32] = r31
	r30 = v5
	r29 = v5 - 8<i32>
	r5 = Mem0[r2 + 16<i32>:word32]
	branch r3 >u r5 l0001F448
	// succ:  l0001F438 l0001F448
l0001F438:
	r5 = r29 + 0x10<32>
	r6 = r29 + 0x10<32>
	Mem0[r29 + 1<i32>:byte] = r6
	// succ:  l0001F448
l0001F448:
	v11 = r30
	r31 = Mem0[v11 + 4<i32>:word32]
	r30 = Mem0[v11:word32]
	r29 = v11 + 8<i32>
	return
	// succ:  logmsg_function_exit
logmsg_function_exit:


// errlog_function
// Return size: 0
define errlog_function
errlog_function_entry:
	r29 = fp
	// succ:  l0001F44C
l0001F44C:
	r3 = 0<32>
	r4 = r3
	v6 = r29 - 8<i32>
	Mem0[v6:word32] = r30
	Mem0[v6 + 4<i32>:word32] = r31
	r30 = v6
	r29 = v6 - 8<i32>
	call logv (retsize: 0;)
	r5 = r29 + 0x10<32>
	r6 = r29 + 0x10<32>
	Mem0[r29 + 1<i32>:byte] = r6
	r0 = Mem0[r0:word32]
	r0 = Mem0[r0:word32]
	r0 = Mem0[r0:word32]
	r0 = Mem0[r0:word32]
	// succ:  l0001F46C_thunk_mul_f_execute
l0001F46C_thunk_mul_f_execute:
	call mul_f_execute (retsize: 0;)
	return
	// succ:  errlog_function_exit
errlog_function_exit:


// mul_f_execute
// Return size: 0
define mul_f_execute
mul_f_execute_entry:
	r29 = fp
	// succ:  l0001F470
l0001F470:
	r4 = 0x00029D2A<p32>
	Mem0[r29 - 40<i32>:word64] = r23_r22
	v7 = r29 - 8<i32>
	Mem0[v7:word32] = r30
	Mem0[v7 + 4<i32>:word32] = r31
	r30 = v7
	r29 = v7 - 168<i32>
	r23_r22 = SEQ(r1, 0<32>)
	Mem0[r29 + 128<i32>:word64] = r25_r24
	Mem0[r29 + 120<i32>:word64] = r27_r26
	r1 = 0x32<32>
	r2 = r23
	r16 = r0
	Mem0[r29 + 160<i32>:word64] = r17_r16
	r0 = 0x00029CD4<p32>
	Mem0[r29:word32] = r16
	Mem0[r29 + 152<i32>:word64] = r19_r18
	Mem0[r29 + 144<i32>:word64] = r21_r20
	call logmsg_function (retsize: 0;)
	r5 = r16
	r2 = Mem0[r5 + 4<i32>:word32]
	r3 = Mem0[r5 + 8<i32>:word32]
	r16 = Mem0[r2:word32]
	r19 = Mem0[r2 + 4<i32>:word32]
	r3 = Mem0[r3:word32]
	r7 = Mem0[r16 + 4<i32>:word32]
	r1 = Mem0[r16:word32]
	p0 = r7 == 1<32>
	p1 = r1 == 1<32>
	r8 = Mem0[r19:word32]
	r4 = Mem0[r19 + 4<i32>:word32]
	r12 = Mem0[r16 + 8<i32>:word32]
	r18 = p0 ? r4 : r7
	p2 = r12 == 1<32>
	r9 = Mem0[r19 + 8<i32>:word32]
	Mem0[r29 + 96<i32>:word32] = r4
	r0 = p1
	r4 = p1 ? r8 : r1
	r6 = Mem0[r16 + 12<i32>:word32]
	r2 = r4 * r18
	p1 = r6 == 1<32>
	r1 = Mem0[r19 + 12<i32>:word32]
	r0 = p2
	r20 = p2 ? r9 : r12
	Mem0[r29 + 100<i32>:word32] = r0
	Mem0[r29 + 112<i32>:word32] = r4
	r2 = r2 * r20
	r21 = p1 ? r1 : r6
	Mem0[r29 + 72<i32>:word32] = r9
	Mem0[r29 + 80<i32>:word32] = r7
	r2 = r2 * r21
	Mem0[r29 + 76<i32>:word32] = r8
	Mem0[r29 + 88<i32>:word32] = r0
	r17 = r2 << 2<32>
	branch p0 l0001F530
	// succ:  l0001F52C l0001F530
l0001F52C:
	Mem0[r29 + 84<i32>:word32] = r1
	r22 = r6 * r12
	// succ:  l0001F530
l0001F530:
	r0 = 0x00029D38<p32>
	r1 = 0xBC<32>
	r2 = r23
	r4 = 0x00029D57<p32>
	r27 = r23
	Mem0[r29 + 92<i32>:word32] = r6
	r6 = Mem0[r19 + 16<i32>:word32]
	r23 = Mem0[r3 + 16<i32>:word32]
	Mem0[r29 + 68<i32>:word32] = r12
	r25_r24 = r3_r5
	r26 = Mem0[r16 + 16<i32>:word32]
	call logmsg_function (retsize: 0;)
	Mem0[r29 + 108<i32>:word32] = r6
	Mem0[r29:word32] = r5
	r1 = 0xBC<32>
	r2 = Mem0[r25 + 20<i32>:word32]
	branch r17 >u r2 l0001F598
	// succ:  l0001F57C l0001F598
l0001F57C:
	r0 = 0x0001F57C<p32>
	r2 = r27
	r3 = 0x00029D75<p32>
	// succ:  l0001F58C
l0001F58C:
	call errlog_function (retsize: 0;)
	goto l0001F7AC
	// succ:  l0001F7AC
l0001F598:
	r2 = Mem0[r19:word32]
	r5 = Mem0[r16:word32]
	p0 = r5 == r2
	r8 = Mem0[r16 + 12<i32>:word32]
	r7 = Mem0[r16 + 8<i32>:word32]
	r6 = Mem0[r16 + 4<i32>:word32]
	r12 = Mem0[r19 + 12<i32>:word32]
	r9 = Mem0[r19 + 8<i32>:word32]
	r3 = Mem0[r19 + 4<i32>:word32]
	Mem0[r29 + 52<i32>:word32] = r25
	Mem0[r29 + 56<i32>:word32] = r17
	Mem0[r29 + 60<i32>:word32] = r26
	Mem0[r29 + 64<i32>:word32] = r24
	branch p0 l0001F5D8
	// succ:  l0001F5D0 l0001F5D8
l0001F5D0:
	Mem0[r29 + 104<i32>:word32] = r27
	p0 = r5 == 1<32>
	branch p0 l0001F5D8
	// succ:  l0001F5D4 l0001F5D8
l0001F5D4:
	p0 = r2 == 1<32>
	branch p0 l0001F614
	// succ:  l0001F5D8 l0001F614
l0001F5D8:
	p0 = r6 == r3
	branch p0 l0001F5E8
	// succ:  l0001F5E0 l0001F5E8
l0001F5E0:
	p0 = r6 == 1<32>
	branch p0 l0001F5E8
	// succ:  l0001F5E4 l0001F5E8
l0001F5E4:
	p0 = r3 == 1<32>
	branch p0 l0001F614
	// succ:  l0001F5E8 l0001F614
l0001F5E8:
	branch p0 l0001F5FC
	// succ:  l0001F5F0 l0001F5FC
l0001F5F0:
	p0 = r7 == r9
	p0 = r7 == 1<32>
	branch p0 l0001F5FC
	// succ:  l0001F5F4 l0001F5FC
l0001F5F4:
	branch p0 l0001F614
	// succ:  l0001F5FC l0001F614
l0001F5FC:
	p0 = r9 == 1<32>
	branch p0 l0001F648
	// succ:  l0001F604 l0001F648
l0001F604:
	p0 = r8 == r12
	branch p0 l0001F648
	// succ:  l0001F60C l0001F648
l0001F60C:
	p0 = r8 == 1<32>
	branch p0 l0001F648
	// succ:  l0001F614 l0001F648
l0001F614:
	p0 = r12 == 1<32>
	r0 = 0x00029D38<p32>
	r1 = 0xBC<32>
	Mem0[r29 + 28<i32>:word32] = r12
	Mem0[r29 + 24<i32>:word32] = r9
	Mem0[r29 + 16<i32>:word32] = r2
	r3 = 0x00029D83<p32>
	Mem0[r29 + 20<i32>:word32] = r3
	Mem0[r29 + 4<i32>:word32] = r6
	r2 = Mem0[r29 + 104<i32>:word64]
	Mem0[r29 + 8<i32>:word32] = r7
	Mem0[r29 + 12<i32>:word32] = r8
	Mem0[r29:word32] = r5
	goto l0001F58C
	// succ:  l0001F58C
l0001F648:
	r0 = 0x00029D38<p32>
	r19 = Mem0[r29 + 112<i32>:word64]
	Mem0[r29 + 44<i32>:word32] = r21
	r4 = 0x00029DB3<p32>
	r1 = 0xBC<32>
	Mem0[r29 + 32<i32>:word32] = r19
	Mem0[r29 + 40<i32>:word32] = r20
	Mem0[r29 + 36<i32>:word32] = r18
	Mem0[r29 + 28<i32>:word32] = r12
	Mem0[r29 + 24<i32>:word32] = r9
	Mem0[r29 + 20<i32>:word32] = r3
	Mem0[r29 + 16<i32>:word32] = r2
	r2 = Mem0[r29 + 104<i32>:word64]
	Mem0[r29 + 4<i32>:word32] = r6
	Mem0[r29 + 12<i32>:word32] = r8
	Mem0[r29 + 8<i32>:word32] = r7
	call logmsg_function (retsize: 0;)
	Mem0[r29:word32] = r5
	p0 = r19 > 0<32>
	r14 = 0<32>
	r3 = Mem0[r29 + 52<i32>:word64]
	r17 = Mem0[r29 + 108<i32>:word64]
	r24 = Mem0[r29 + 60<i32>:word32]
	r2 = Mem0[r29 + 56<i32>:word32]
	Mem0[r3 + 6<i32>:byte] = r2
	Mem0[r3 + 8<i32>:word32] = r20
	Mem0[r3 + 12<i32>:word32] = r21
	branch p0 l0001F784
	// succ:  l0001F6B4 l0001F784
l0001F6B4:
	r13 = Mem0[r29 + 84<i32>:word32]
	r12 = Mem0[r29 + 92<i32>:word32]
	r6 = !(r13 == 1<32>)
	r5 = Mem0[r29 + 72<i32>:word64]
	r7 = Mem0[r29 + 96<i32>:word64]
	r9 = r5 * r7
	r0 = Mem0[r29 + 88<i32>:word64]
	r2 = Mem0[r29 + 80<i32>:word64]
	p2 = r0
	p0 = r5 == 1<32>
	r3 = Mem0[r29 + 68<i32>:word64]
	r4 = Mem0[r29 + 76<i32>:word64]
	r8 = r3 * r2
	r9 = r9 * r13
	p1 = r4 == 1<32>
	r0 = Mem0[r29 + 100<i32>:word32]
	r4 = r13 * r5
	r2 = p2 ? 0<32> : r12
	p2 = r7 == 1<32>
	r9 = r14 + 0<32>
	r8 = r8 * r12
	p0 = r0
	r3 = p0 ? 0<32> : r13
	r5 = !(r12 == 1<32>)
	r7 = 0<32>
	r4 = r14 + 0<32>
	r8 = r14 + 0<32>
	// succ:  l0001F70C
l0001F70C:
	p0 = r10 > 0<32>
	branch p0 l0001F774
l0001F710:
	r13_r12 = r24_r17
	r14 = 0<32>
	// succ:  l0001F718 l0001F774
l0001F718:
	r13_r12 = r24_r17
	r14 = 0<32>
	p0 = r12 > 0<32>
	branch p0 l0001F764
	// succ:  l0001F724 l0001F764
l0001F724:
	r28 = r12
	r15 = r13
	__loop(1<i32>, 0x0001F728<p32>, r20)
	p0 = r13 > 0<32>
	branch p0 l0001F758
	// succ:  l0001F734 l0001F758
l0001F734:
	r10 = r23
	r1_r0 = r15_r28
	__loop(0<i32>, 0x0001F738<p32>, r21)
	r0 = r0 + (r6 << 2<32>)
	r1 = r1 + (r5 << 2<32>)
	r11 = Mem0[r1:word32]
	r16 = Mem0[r0:word32]
	r11 = r11 * r16
	r10 = r10 + 4<32>
	Mem0[r10:word32] = r11
	r23 = r23 + (r21 << 2<32>)
	// succ:  l0001F758
l0001F758:
	r28 = r28 + (r3 << 2<32>)
	r15 = r15 + (r2 << 2<32>)
	// succ:  l0001F764
l0001F764:
	r13 = r13 + (r22 << 2<32>)
	r12 = r12 + (r4 << 2<32>)
	r14 = r14 + 1<32>
	branch r14 == r18 l0001F718
	goto l0001F778
	// succ:  l0001F778 l0001F718
l0001F774:
	r24 = r24 + (r8 << 2<32>)
	r17 = r17 + (r9 << 2<32>)
	r7 = r7 + 1<32>
	branch r7 == r19 l0001F70C
	goto l0001F788
	// succ:  l0001F788 l0001F70C
l0001F778:
	r17 = r17 + (r9 << 2<32>)
	r7 = r7 + 1<32>
	branch r7 == r19 l0001F710
	goto l0001F788
	// succ:  l0001F788 l0001F710
l0001F784:
	r0 = 0x00029D38<p32>
	r2 = Mem0[r29 + 64<i32>:word32]
	Mem0[r29:byte] = r2
	goto l0001F798
	// succ:  l0001F798
l0001F788:
	r0 = 0x0001F7BC<p32>
	r2 = Mem0[r29 + 64<i32>:word32]
	Mem0[r29:byte] = r2
	// succ:  l0001F798
l0001F798:
	r4 = 0x0001F7A7<p32>
	r1 = 0xBC<32>
	r2 = Mem0[r29 + 104<i32>:word32]
	call logmsg_function (retsize: 0;)
	r0 = 0<32>
	// succ:  l0001F7AC
l0001F7AC:
	r17_r16 = Mem0[r29 + 160<i32>:word64]
	r19_r18 = Mem0[r29 + 152<i32>:word64]
	r21_r20 = Mem0[r29 + 144<i32>:word64]
	r23_r22 = Mem0[r29 + 136<i32>:word64]
	r25_r24 = Mem0[r29 + 128<i32>:word64]
	r27_r26 = Mem0[r29 + 120<i32>:word64]
	v41 = r30
	r31 = Mem0[v41 + 4<i32>:word32]
	r30 = Mem0[v41:word32]
	r29 = v41 + 8<i32>
	return
	// succ:  mul_f_execute_exit
mul_f_execute_exit:


// mul_f_check
// Return size: 0
define mul_f_check
mul_f_check_entry:
	r29 = fp
	// succ:  l0001F7C0
l0001F7C0:
	r4 = 0x00029CEF<p32>
	Mem0[r29 - 16<i32>:word64] = r17_r16
	v7 = r29 - 8<i32>
	Mem0[v7:word32] = r30
	Mem0[v7 + 4<i32>:word32] = r31
	r30 = v7
	r29 = v7 - 16<i32>
	r17 = r0
	r1 = 0x38<32>
	r16 = r1
	r0 = 0x00029CD4<p32>
	r2 = r16
	Mem0[r29:word32] = r17
	call logmsg_function (retsize: 0;)
	r1 = 0x39<32>
	r2 = Mem0[r17 + 16<i32>:word32]
	branch r2 == 2<32> l0001F810
	// succ:  l0001F7F4 l0001F810
l0001F7F4:
	r0 = 0x0001F818<p32>
	r3 = 0x00029CFB<p32>
	// succ:  l0001F800
l0001F800:
	call errlog_function (retsize: 0;)
	r2 = r16
	r0 = 0xFFFFFFFF<32>
	r17_r16 = Mem0[r29 + 8<i32>:word64]
	v16 = r30
	r31 = Mem0[v16 + 4<i32>:word32]
	r30 = Mem0[v16:word32]
	r29 = v16 + 8<i32>
	return
	// succ:  mul_f_check_exit
l0001F810:
	r1 = 0x3A<32>
	r2 = Mem0[r17 + 20<i32>:word32]
	branch r2 == 1<32> l0001F830
	// succ:  l0001F820 l0001F830
l0001F820:
	r0 = 0x0001F858<p32>
	r3 = 0x00029D0A<p32>
	goto l0001F800
	// succ:  l0001F800
l0001F830:
	r0 = 0x00029CD4<p32>
	r1 = 0x3B<32>
	r2 = r16
	r4 = 0x00029D1A<p32>
	call logmsg_function (retsize: 0;)
	Mem0[r29:word32] = r17
	r0 = 0<32>
	r17_r16 = Mem0[r29 + 8<i32>:word64]
	v17 = r30
	r31 = Mem0[v17 + 4<i32>:word32]
	r30 = Mem0[v17:word32]
	r29 = v17 + 8<i32>
	return
	// succ:  mul_f_check_exit
mul_f_check_exit:


// logmsg_function
// Return size: 0
define logmsg_function
logmsg_function_entry:
	r29 = fp
	// succ:  l0001F854
l0001F854:
	r3 = 2<32>
	v5 = r29 - 8<i32>
	Mem0[v5:word32] = r30
	Mem0[v5 + 4<i32>:word32] = r31
	r30 = v5
	r29 = v5 - 8<i32>
	r5 = Mem0[r2 + 16<i32>:word32]
	branch r3 >u r5 l0001F874
	// succ:  l0001F864 l0001F874
l0001F864:
	r5 = r29 + 0x10<32>
	r6 = r29 + 0x10<32>
	Mem0[r29 + 1<i32>:byte] = r6
	// succ:  l0001F874
l0001F874:
	v11 = r30
	r31 = Mem0[v11 + 4<i32>:word32]
	r30 = Mem0[v11:word32]
	r29 = v11 + 8<i32>
	return
	// succ:  logmsg_function_exit
logmsg_function_exit:


// errlog_function
// Return size: 0
define errlog_function
errlog_function_entry:
	r29 = fp
	// succ:  l0001F878
l0001F878:
	r3 = 0<32>
	r4 = r3
	v6 = r29 - 8<i32>
	Mem0[v6:word32] = r30
	Mem0[v6 + 4<i32>:word32] = r31
	r30 = v6
	r29 = v6 - 8<i32>
	call logv (retsize: 0;)
	r5 = r29 + 0x10<32>
	r6 = r29 + 0x10<32>
	Mem0[r29 + 1<i32>:byte] = r6
	r0 = Mem0[r0:word32]
	r0 = Mem0[r0:word32]
	r0 = Mem0[r0:word32]
	r0 = Mem0[r0:word32]
	r0 = Mem0[r0:word32]
	r0 = Mem0[r0:word32]
	// succ:  l0001F89C_thunk_neg_f_execute
l0001F89C_thunk_neg_f_execute:
	call neg_f_execute (retsize: 0;)
	return
	// succ:  errlog_function_exit
errlog_function_exit:


// neg_f_execute
// Return size: 0
define neg_f_execute
neg_f_execute_entry:
	r29 = fp
	// succ:  l0001F8A0
l0001F8A0:
	v4 = r29 - 8<i32>
	Mem0[v4:word32] = r30
	Mem0[v4 + 4<i32>:word32] = r31
	r30 = v4
	r29 = v4 - 0<i32>
	r7 = Mem0[r0 + 4<i32>:word32]
	r5 = Mem0[r0 + 8<i32>:word32]
	r3 = Mem0[r7:word32]
	r2 = Mem0[r3 + 4<i32>:word32]
	r7 = Mem0[r3 + 12<i32>:word32]
	r4 = Mem0[r3:word32]
	r6 = Mem0[r3 + 8<i32>:word32]
	r2 = r2 * r4
	r4 = Mem0[r5:word32]
	r2 = r2 * r6
	r6 = Mem0[r4 + 20<i32>:word32]
	r7 = r2 * r7
	r2 = r1
	r5 = r7 << 2<32>
	branch r5 >u r6 l0001F910
	// succ:  l0001F8D8 l0001F910
l0001F8D8:
	__loop(0<i32>, 0x0001F8E0<p32>, r7)
	r2 = Mem0[r4 + 16<i32>:word32]
	r6 = Mem0[r3 + 16<i32>:word32]
	r6 = r6 + 4<32>
	r7 = Mem0[r6:word32]
	r7 = __invert_bit<word32,word32>(r7, 0x1E<32>)
	r2 = r2 + 4<32>
	Mem0[r2:word32] = r7
	r0 = 0<32>
	r2 = Mem0[r3:word32]
	r6 = Mem0[r3 + 4<i32>:word32]
	Mem0[r4 + 4<i32>:word32] = r6
	Mem0[r4:word32] = r2
	r1 = Mem0[r3 + 8<i32>:word32]
	Mem0[r4 + 8<i32>:word32] = r1
	r7 = Mem0[r3 + 12<i32>:word32]
	Mem0[r4 + 12<i32>:word32] = r7
	Mem0[r4 + 24<i32>:word32] = r5
	v15 = r30
	r31 = Mem0[v15 + 4<i32>:word32]
	r30 = Mem0[v15:word32]
	r29 = v15 + 8<i32>
	return
	// succ:  neg_f_execute_exit
l0001F910:
	r3 = 0x00029E54<p32>
	call errlog_function (retsize: 0;)
	r1 = 0x36<32>
	r0 = -1<i32>
	v17 = r30
	r31 = Mem0[v17 + 4<i32>:word32]
	r30 = Mem0[v17:word32]
	r29 = v17 + 8<i32>
	return
	// succ:  neg_f_execute_exit
neg_f_execute_exit:


// neg_f_check
// Return size: 0
define neg_f_check
neg_f_check_entry:
	r29 = fp
	// succ:  l0001F924
l0001F924:
	r4 = 0x00029E19<p32>
	Mem0[r29 - 16<i32>:word64] = r17_r16
	v7 = r29 - 8<i32>
	Mem0[v7:word32] = r30
	Mem0[v7 + 4<i32>:word32] = r31
	r30 = v7
	r29 = v7 - 16<i32>
	r1 = 0x41<32>
	r16 = r1
	r17 = r0
	call logmsg_function (retsize: 0;)
	r2 = r16
	Mem0[r29:word32] = r17
	r1 = 0x42<32>
	r2 = Mem0[r17 + 16<i32>:word32]
	branch r2 == 1<32> l0001F964
	// succ:  l0001F950 l0001F964
l0001F950:
	r3 = 0x0001F969<p32>
	call errlog_function (retsize: 0;)
	r2 = r16
	// succ:  l0001F958
l0001F958:
	r0 = 0xFFFFFFFF<32>
	r17_r16 = Mem0[r29 + 8<i32>:word64]
	v16 = r30
	r31 = Mem0[v16 + 4<i32>:word32]
	r30 = Mem0[v16:word32]
	r29 = v16 + 8<i32>
	return
	// succ:  neg_f_check_exit
l0001F964:
	r1 = 0x43<32>
	r2 = Mem0[r17 + 20<i32>:word32]
	branch r2 == 1<32> l0001F97C
	// succ:  l0001F974 l0001F97C
l0001F974:
	r3 = 0x0001F978<p32>
	goto l0001F958
	// succ:  l0001F958
l0001F97C:
	r4 = 0x00029E44<p32>
	r1 = 0x44<32>
	r2 = r16
	call logmsg_function (retsize: 0;)
	Mem0[r29:word32] = r17
	r0 = 0<32>
	r17_r16 = Mem0[r29 + 8<i32>:word64]
	v17 = r30
	r31 = Mem0[v17 + 4<i32>:word32]
	r30 = Mem0[v17:word32]
	r29 = v17 + 8<i32>
	return
	// succ:  neg_f_check_exit
neg_f_check_exit:


// logmsg_function
// Return size: 0
define logmsg_function
logmsg_function_entry:
	r29 = fp
	// succ:  l0001F99C
l0001F99C:
	r3 = 2<32>
	v5 = r29 - 8<i32>
	Mem0[v5:word32] = r30
	Mem0[v5 + 4<i32>:word32] = r31
	r30 = v5
	r29 = v5 - 8<i32>
	r5 = Mem0[r2 + 16<i32>:word32]
	branch r3 >u r5 l0001F9C0
	// succ:  l0001F9AC l0001F9C0
l0001F9AC:
	r0 = 0x0001F9C2<p32>
	r3 = 2<32>
	r5 = r29 + 0x10<32>
	call logv (retsize: 0;)
	r6 = r29 + 0x10<32>
	Mem0[r29 + 1<i32>:byte] = r6
	// succ:  l0001F9B4_thunk_errlog_function
l0001F9B4_thunk_errlog_function:
	call errlog_function (retsize: 0;)
	return
	// succ:  logmsg_function_exit
l0001F9C0:
	v13 = r30
	r31 = Mem0[v13 + 4<i32>:word32]
	r30 = Mem0[v13:word32]
	r29 = v13 + 8<i32>
	return
	// succ:  logmsg_function_exit
logmsg_function_exit:


// errlog_function
// Return size: 0
define errlog_function
errlog_function_entry:
	r29 = fp
	// succ:  l0001F9C4
l0001F9C4:
	r0 = 0x00029DFE<p32>
	r4 = r3
	v8 = r29 - 8<i32>
	Mem0[v8:word32] = r30
	Mem0[v8 + 4<i32>:word32] = r31
	r30 = v8
	r29 = v8 - 8<i32>
	r3 = 0<32>
	r5 = r29 + 0x10<32>
	r6 = r29 + 0x10<32>
	Mem0[r29 + 1<i32>:byte] = r6
	v13 = r30
	r31 = Mem0[v13 + 4<i32>:word32]
	r30 = Mem0[v13:word32]
	r29 = v13 + 8<i32>
	return
	// succ:  errlog_function_exit
errlog_function_exit:


// sub_f_execute
// Return size: 0
define sub_f_execute
sub_f_execute_entry:
	r29 = fp
	// succ:  l0001F9F0
l0001F9F0:
	r5 = r0
	v6 = r29 - 8<i32>
	Mem0[v6:word32] = r30
	Mem0[v6 + 4<i32>:word32] = r31
	r30 = v6
	r29 = v6 - 160<i32>
	r2 = Mem0[r5 + 4<i32>:word32]
	r3 = Mem0[r5 + 8<i32>:word32]
	Mem0[r29 + 112<i32>:word64] = r27_r26
	Mem0[r29 + 144<i32>:word64] = r19_r18
	r26 = Mem0[r2:word32]
	r19 = Mem0[r2 + 4<i32>:word32]
	r22 = 0<32>
	Mem0[r29 + 136<i32>:word64] = r21_r20
	Mem0[r29 + 128<i32>:word64] = r23_r22
	r6 = Mem0[r26 + 4<i32>:word32]
	r0 = Mem0[r26:word32]
	p0 = r6 == 1<32>
	p1 = r0 == 1<32>
	r8 = Mem0[r19:word32]
	r4 = Mem0[r19 + 4<i32>:word32]
	r10 = p1
	r12 = Mem0[r26 + 8<i32>:word32]
	r18 = p0 ? r4 : r6
	p2 = r12 == 1<32>
	r9 = Mem0[r19 + 8<i32>:word32]
	Mem0[r29 + 92<i32>:word32] = r4
	r4 = p1 ? r8 : r0
	r7 = Mem0[r26 + 12<i32>:word32]
	r2 = r4 * r18
	p1 = r7 == 1<32>
	r0 = Mem0[r19 + 12<i32>:word32]
	r20 = p2 ? r9 : r12
	Mem0[r29 + 120<i32>:word64] = r25_r24
	Mem0[r29 + 76<i32>:word32] = r6
	r2 = r2 * r20
	r21 = p1 ? r0 : r7
	r2 = r2 * r21
	r6 = r1
	r25 = Mem0[r3:word32]
	Mem0[r29 + 152<i32>:word64] = r17_r16
	r10 = p2
	Mem0[r29 + 96<i32>:word32] = r10
	Mem0[r29 + 72<i32>:word32] = r8
	Mem0[r29 + 68<i32>:word32] = r9
	Mem0[r29 + 84<i32>:word32] = r10
	r16 = r2 << 2<32>
	Mem0[r29 + 104<i32>:word32] = r4
	Mem0[r29 + 80<i32>:word32] = r0
	branch p0 l0001FA9C
	// succ:  l0001FA98 l0001FA9C
l0001FA98:
	r22 = r7 * r12
	// succ:  l0001FA9C
l0001FA9C:
	r0 = 0x00029EB8<p32>
	r1 = 0xBC<32>
	r2 = r6
	r4 = 0x00029ED7<p32>
	r3 = Mem0[r19 + 16<i32>:word32]
	Mem0[r29 + 64<i32>:word32] = r12
	r24 = r6
	r27 = r5
	r23 = Mem0[r25 + 16<i32>:word32]
	Mem0[r29 + 88<i32>:word32] = r7
	r17 = Mem0[r26 + 16<i32>:word32]
	call logmsg_function (retsize: 0;)
	Mem0[r29 + 100<i32>:word32] = r3
	Mem0[r29:word32] = r5
	r1 = 0xBC<32>
	r2 = Mem0[r25 + 20<i32>:word32]
	branch r16 >u r2 l0001FB04
	// succ:  l0001FAE8 l0001FB04
l0001FAE8:
	r0 = 0x0001FAFC<p32>
	r2 = r24
	r3 = 0x00029EF5<p32>
	// succ:  l0001FAF8
l0001FAF8:
	call errlog_function (retsize: 0;)
	goto l0001FD30
	// succ:  l0001FD30
l0001FB04:
	r2 = r24
	r13 = Mem0[r19:word32]
	r5 = Mem0[r26:word32]
	p0 = r5 == r13
	r8 = Mem0[r26 + 12<i32>:word32]
	r7 = Mem0[r26 + 8<i32>:word32]
	r6 = Mem0[r26 + 4<i32>:word32]
	r12 = Mem0[r19 + 12<i32>:word32]
	r9 = Mem0[r19 + 8<i32>:word32]
	r3 = Mem0[r19 + 4<i32>:word32]
	Mem0[r29 + 48<i32>:word32] = r25
	Mem0[r29 + 52<i32>:word32] = r16
	Mem0[r29 + 56<i32>:word32] = r17
	Mem0[r29 + 60<i32>:word32] = r27
	branch p0 l0001FB4C
	// succ:  l0001FB40 l0001FB4C
l0001FB40:
	p0 = r5 == 1<32>
	branch p0 l0001FB4C
	// succ:  l0001FB44 l0001FB4C
l0001FB44:
	branch p0 l0001FB88
	// succ:  l0001FB4C l0001FB88
l0001FB4C:
	p0 = r13 == 1<32>
	p0 = r6 == r3
	branch p0 l0001FB5C
	// succ:  l0001FB50 l0001FB5C
l0001FB50:
	p0 = r6 == 1<32>
	branch p0 l0001FB5C
	// succ:  l0001FB54 l0001FB5C
l0001FB54:
	p0 = r3 == 1<32>
	branch p0 l0001FB88
	// succ:  l0001FB5C l0001FB88
l0001FB5C:
	branch p0 l0001FB70
	// succ:  l0001FB64 l0001FB70
l0001FB64:
	p0 = r7 == r9
	p0 = r7 == 1<32>
	branch p0 l0001FB70
	// succ:  l0001FB68 l0001FB70
l0001FB68:
	branch p0 l0001FB88
	// succ:  l0001FB70 l0001FB88
l0001FB70:
	p0 = r9 == 1<32>
	branch p0 l0001FBBC
	// succ:  l0001FB78 l0001FBBC
l0001FB78:
	p0 = r8 == r12
	branch p0 l0001FBBC
	// succ:  l0001FB80 l0001FBBC
l0001FB80:
	p0 = r8 == 1<32>
	branch p0 l0001FBBC
	// succ:  l0001FB88 l0001FBBC
l0001FB88:
	p0 = r12 == 1<32>
	r0 = 0x00029EB8<p32>
	r1 = 0xBC<32>
	Mem0[r29 + 28<i32>:word32] = r12
	Mem0[r29 + 24<i32>:word32] = r9
	Mem0[r29 + 16<i32>:word32] = r13
	r3 = 0x00029F03<p32>
	Mem0[r29 + 20<i32>:word32] = r3
	Mem0[r29 + 8<i32>:word32] = r7
	Mem0[r29 + 12<i32>:word32] = r8
	Mem0[r29 + 4<i32>:word32] = r6
	goto l0001FAF8
	// succ:  l0001FAF8
l0001FBBC:
	r19 = r2
	r24 = Mem0[r29 + 104<i32>:word32]
	Mem0[r29 + 44<i32>:word32] = r21
	r0 = 0x00029EB8<p32>
	Mem0[r29 + 36<i32>:word32] = r18
	Mem0[r29 + 20<i32>:word32] = r3
	r4 = 0x00029F33<p32>
	r1 = 0xBC<32>
	Mem0[r29 + 40<i32>:word32] = r20
	Mem0[r29 + 32<i32>:word32] = r24
	Mem0[r29 + 28<i32>:word32] = r12
	Mem0[r29 + 24<i32>:word32] = r9
	Mem0[r29 + 16<i32>:word32] = r13
	Mem0[r29 + 12<i32>:word32] = r8
	Mem0[r29 + 8<i32>:word32] = r7
	Mem0[r29 + 4<i32>:word32] = r6
	Mem0[r29:word32] = r5
	call logmsg_function (retsize: 0;)
	p0 = r24 > 0<32>
	r14 = 0<32>
	r3 = Mem0[r29 + 48<i32>:word32]
	r26 = Mem0[r29 + 100<i32>:word32]
	r25 = Mem0[r29 + 56<i32>:word32]
	r2 = Mem0[r29 + 52<i32>:word32]
	Mem0[r3 + 6<i32>:byte] = r2
	Mem0[r3 + 4<i32>:word32] = r18
	Mem0[r3 + 8<i32>:word32] = r20
	Mem0[r3 + 12<i32>:word32] = r21
	branch p0 l0001FD08
	// succ:  l0001FC38 l0001FD08
l0001FC38:
	r13 = Mem0[r29 + 80<i32>:word32]
	r12 = Mem0[r29 + 88<i32>:word32]
	r6 = !(r13 == 1<32>)
	r5 = Mem0[r29 + 68<i32>:word64]
	r7 = Mem0[r29 + 92<i32>:word64]
	r9 = r5 * r7
	r0 = Mem0[r29 + 84<i32>:word64]
	r2 = Mem0[r29 + 76<i32>:word64]
	p2 = r0
	p0 = r5 == 1<32>
	r3 = Mem0[r29 + 64<i32>:word64]
	r4 = Mem0[r29 + 72<i32>:word64]
	r8 = r3 * r2
	r9 = r9 * r13
	p1 = r4 == 1<32>
	r0 = Mem0[r29 + 96<i32>:word32]
	r4 = r13 * r5
	r2 = p2 ? 0<32> : r12
	p2 = r7 == 1<32>
	r9 = r14 + 0<32>
	r8 = r8 * r12
	p0 = r0
	r3 = p0 ? 0<32> : r13
	r5 = !(r12 == 1<32>)
	r7 = 0<32>
	r4 = r14 + 0<32>
	r8 = r14 + 0<32>
	// succ:  l0001FC90
l0001FC90:
	p0 = r10 > 0<32>
	branch p0 l0001FCF8
l0001FC94:
	r13_r12 = r25_r26
	r14 = 0<32>
	// succ:  l0001FC9C l0001FCF8
l0001FC9C:
	r13_r12 = r25_r26
	r14 = 0<32>
	p0 = r12 > 0<32>
	branch p0 l0001FCE8
	// succ:  l0001FCA8 l0001FCE8
l0001FCA8:
	r28 = r12
	r15 = r13
	__loop(1<i32>, 0x0001FCAC<p32>, r20)
	p0 = r13 > 0<32>
	branch p0 l0001FCDC
	// succ:  l0001FCB8 l0001FCDC
l0001FCB8:
	r10 = r23
	r1_r0 = r15_r28
	__loop(0<i32>, 0x0001FCBC<p32>, r21)
	r0 = r0 + (r6 << 2<32>)
	r1 = r1 + (r5 << 2<32>)
	r11 = Mem0[r1:word32]
	r16 = Mem0[r0:word32]
	r11 = r11 - r16
	r10 = r10 + 4<32>
	Mem0[r10:word32] = r11
	r23 = r23 + (r21 << 2<32>)
	// succ:  l0001FCDC
l0001FCDC:
	r28 = r28 + (r3 << 2<32>)
	r15 = r15 + (r2 << 2<32>)
	// succ:  l0001FCE8
l0001FCE8:
	r13 = r13 + (r22 << 2<32>)
	r12 = r12 + (r4 << 2<32>)
	r14 = r14 + 1<32>
	branch r14 == r18 l0001FC9C
	goto l0001FCFC
	// succ:  l0001FCFC l0001FC9C
l0001FCF8:
	r25 = r25 + (r8 << 2<32>)
	r26 = r26 + (r9 << 2<32>)
	r7 = r7 + 1<32>
	branch r7 == r24 l0001FC90
	goto l0001FD0C
	// succ:  l0001FD0C l0001FC90
l0001FCFC:
	r26 = r26 + (r9 << 2<32>)
	r7 = r7 + 1<32>
	branch r7 == r24 l0001FC94
	goto l0001FD0C
	// succ:  l0001FD0C l0001FC94
l0001FD08:
	r0 = 0x00029EB8<p32>
	r2 = Mem0[r29 + 60<i32>:word32]
	Mem0[r29:byte] = r2
	goto l0001FD1C
	// succ:  l0001FD1C
l0001FD0C:
	r0 = 0x0001FD3C<p32>
	r2 = Mem0[r29 + 60<i32>:word32]
	Mem0[r29:byte] = r2
	// succ:  l0001FD1C
l0001FD1C:
	r4 = 0x0001FD27<p32>
	r1 = 0xBC<32>
	r2 = r19
	call logmsg_function (retsize: 0;)
	r0 = 0<32>
	// succ:  l0001FD30
l0001FD30:
	r17_r16 = Mem0[r29 + 152<i32>:word64]
	r19_r18 = Mem0[r29 + 144<i32>:word64]
	r21_r20 = Mem0[r29 + 136<i32>:word64]
	r23_r22 = Mem0[r29 + 128<i32>:word64]
	r25_r24 = Mem0[r29 + 120<i32>:word64]
	r27_r26 = Mem0[r29 + 112<i32>:word64]
	v42 = r30
	r31 = Mem0[v42 + 4<i32>:word32]
	r30 = Mem0[v42:word32]
	r29 = v42 + 8<i32>
	return
	// succ:  sub_f_execute_exit
sub_f_execute_exit:


// sub_f_check
// Return size: 0
define sub_f_check
sub_f_check_entry:
	r29 = fp
	// succ:  l0001FD44
l0001FD44:
	r4 = 0x00029E7D<p32>
	Mem0[r29 - 16<i32>:word64] = r17_r16
	v7 = r29 - 8<i32>
	Mem0[v7:word32] = r30
	Mem0[v7 + 4<i32>:word32] = r31
	r30 = v7
	r29 = v7 - 16<i32>
	r17 = r0
	r1 = 0x37<32>
	r16 = r1
	r0 = 0x00029E62<p32>
	r2 = r16
	Mem0[r29:word32] = r17
	call logmsg_function (retsize: 0;)
	r1 = 0x38<32>
	r2 = Mem0[r17 + 16<i32>:word32]
	branch r2 == 2<32> l0001FD94
	// succ:  l0001FD78 l0001FD94
l0001FD78:
	r0 = 0x0001FDA6<p32>
	r3 = 0x00029E89<p32>
	// succ:  l0001FD84
l0001FD84:
	call errlog_function (retsize: 0;)
	r2 = r16
	r0 = 0xFFFFFFFF<32>
	r17_r16 = Mem0[r29 + 8<i32>:word64]
	v16 = r30
	r31 = Mem0[v16 + 4<i32>:word32]
	r30 = Mem0[v16:word32]
	r29 = v16 + 8<i32>
	return
	// succ:  sub_f_check_exit
l0001FD94:
	r1 = 0x39<32>
	r2 = Mem0[r17 + 20<i32>:word32]
	branch r2 == 1<32> l0001FDB4
	// succ:  l0001FDA4 l0001FDB4
l0001FDA4:
	r0 = 0x0001FDA6<p32>
	r3 = 0x00029E98<p32>
	goto l0001FD84
	// succ:  l0001FD84
l0001FDB4:
	r0 = 0x00029E62<p32>
	r1 = 0x3A<32>
	r2 = r16
	r4 = 0x00029EA8<p32>
	call logmsg_function (retsize: 0;)
	Mem0[r29:word32] = r17
	r0 = 0<32>
	r17_r16 = Mem0[r29 + 8<i32>:word64]
	v17 = r30
	r31 = Mem0[v17 + 4<i32>:word32]
	r30 = Mem0[v17:word32]
	r29 = v17 + 8<i32>
	return
	// succ:  sub_f_check_exit
sub_f_check_exit:


// logmsg_function
// Return size: 0
define logmsg_function
logmsg_function_entry:
	r29 = fp
	// succ:  l0001FDD8
l0001FDD8:
	r3 = 2<32>
	v5 = r29 - 8<i32>
	Mem0[v5:word32] = r30
	Mem0[v5 + 4<i32>:word32] = r31
	r30 = v5
	r29 = v5 - 8<i32>
	r5 = Mem0[r2 + 16<i32>:word32]
	branch r3 >u r5 l0001FDF8
	// succ:  l0001FDE8 l0001FDF8
l0001FDE8:
	r5 = r29 + 0x10<32>
	r6 = r29 + 0x10<32>
	Mem0[r29 + 1<i32>:byte] = r6
	// succ:  l0001FDF8
l0001FDF8:
	v11 = r30
	r31 = Mem0[v11 + 4<i32>:word32]
	r30 = Mem0[v11:word32]
	r29 = v11 + 8<i32>
	return
	// succ:  logmsg_function_exit
logmsg_function_exit:


// errlog_function
// Return size: 0
define errlog_function
errlog_function_entry:
	r29 = fp
	// succ:  l0001FDFC
l0001FDFC:
	r3 = 0<32>
	r4 = r3
	v6 = r29 - 8<i32>
	Mem0[v6:word32] = r30
	Mem0[v6 + 4<i32>:word32] = r31
	r30 = v6
	r29 = v6 - 8<i32>
	call logv (retsize: 0;)
	r5 = r29 + 0x10<32>
	r6 = r29 + 0x10<32>
	Mem0[r29 + 1<i32>:byte] = r6
	r0 = Mem0[r0:word32]
	r0 = Mem0[r0:word32]
	r0 = Mem0[r0:word32]
	r0 = Mem0[r0:word32]
	// succ:  l0001FE1C_thunk_rank_execute
l0001FE1C_thunk_rank_execute:
	call rank_execute (retsize: 0;)
	return
	// succ:  errlog_function_exit
errlog_function_exit:


// rank_execute
// Return size: 0
define rank_execute
rank_execute_entry:
	r29 = fp
	// succ:  l0001FE20
l0001FE20:
	r4 = 0x00029FE4<p32>
	Mem0[r29 - 16<i32>:word64] = r17_r16
	v7 = r29 - 8<i32>
	Mem0[v7:word32] = r30
	Mem0[v7 + 4<i32>:word32] = r31
	r30 = v7
	r29 = v7 - 24<i32>
	r17_r16 = r1_r0
	r1 = 0x32<32>
	r2 = Mem0[r16 + 4<i32>:word32]
	Mem0[r29 + 8<i32>:word64] = r19_r18
	r7 = Mem0[r16 + 8<i32>:word32]
	r2 = r17
	r5 = Mem0[r2 + 4<i32>:word32]
	r19 = Mem0[r7:word32]
	r3 = Mem0[r5 + 16<i32>:word32]
	call logmsg_function (retsize: 0;)
	r18 = Mem0[r3:word32]
	Mem0[r29:word32] = r16
	r2 = Mem0[r19 + 20<i32>:word32]
	branch r2 >u 3<32> l0001FE6C
	// succ:  l0001FE58 l0001FE6C
l0001FE58:
	r3 = 0x0001FE7F<p32>
	r1 = 0x35<32>
	r2 = r17
	call errlog_function (retsize: 0;)
	goto l0001FE9C
	// succ:  l0001FE9C
l0001FE6C:
	r4 = 0x0002A009<p32>
	r1 = 0x3B<32>
	r3 = Mem0[r19 + 16<i32>:word32]
	r2 = r17
	Mem0[r19 + 12<i32>:word32] = 1<32>
	Mem0[r19:word32] = 1<32>
	Mem0[r19 + 8<i32>:word32] = 1<32>
	Mem0[r19 + 24<i32>:word32] = 4<32>
	Mem0[r19 + 4<i32>:word32] = 0xFFFFFF81<32>
	Mem0[r3:word32] = r18
	call logmsg_function (retsize: 0;)
	Mem0[r29:word32] = r16
	r0 = 0<32>
	// succ:  l0001FE9C
l0001FE9C:
	r17_r16 = Mem0[r29 + 16<i32>:word64]
	r19_r18 = Mem0[r29 + 8<i32>:word64]
	v22 = r30
	r31 = Mem0[v22 + 4<i32>:word32]
	r30 = Mem0[v22:word32]
	r29 = v22 + 8<i32>
	return
	// succ:  rank_execute_exit
rank_execute_exit:


// rank_check
// Return size: 0
define rank_check
rank_check_entry:
	r29 = fp
	// succ:  l0001FEA4
l0001FEA4:
	r4 = 0x00029F98<p32>
	Mem0[r29 - 16<i32>:word64] = r17_r16
	v7 = r29 - 8<i32>
	Mem0[v7:word32] = r30
	Mem0[v7 + 4<i32>:word32] = r31
	r30 = v7
	r29 = v7 - 16<i32>
	r1 = 0x41<32>
	r16 = r1
	r17 = r0
	call logmsg_function (retsize: 0;)
	r2 = r16
	Mem0[r29:word32] = r17
	r1 = 0x42<32>
	r2 = Mem0[r17 + 16<i32>:word32]
	branch r2 == 2<32> l0001FEE4
	// succ:  l0001FED0 l0001FEE4
l0001FED0:
	r3 = 0x0001FEF2<p32>
	call errlog_function (retsize: 0;)
	r2 = r16
	// succ:  l0001FED8
l0001FED8:
	r0 = 0xFFFFFFFF<32>
	r17_r16 = Mem0[r29 + 8<i32>:word64]
	v16 = r30
	r31 = Mem0[v16 + 4<i32>:word32]
	r30 = Mem0[v16:word32]
	r29 = v16 + 8<i32>
	return
	// succ:  rank_check_exit
l0001FEE4:
	r1 = 0x43<32>
	r2 = Mem0[r17 + 20<i32>:word32]
	branch r2 == 1<32> l0001FEFC
	// succ:  l0001FEF4 l0001FEFC
l0001FEF4:
	r3 = 0x0001FF01<p32>
	goto l0001FED8
	// succ:  l0001FED8
l0001FEFC:
	r4 = 0x00029FCD<p32>
	r1 = 0x44<32>
	r2 = r16
	call logmsg_function (retsize: 0;)
	Mem0[r29:word32] = r17
	r0 = 0<32>
	r17_r16 = Mem0[r29 + 8<i32>:word64]
	v17 = r30
	r31 = Mem0[v17 + 4<i32>:word32]
	r30 = Mem0[v17:word32]
	r29 = v17 + 8<i32>
	return
	// succ:  rank_check_exit
rank_check_exit:


// logmsg_function
// Return size: 0
define logmsg_function
logmsg_function_entry:
	r29 = fp
	// succ:  l0001FF1C
l0001FF1C:
	r3 = 2<32>
	v5 = r29 - 8<i32>
	Mem0[v5:word32] = r30
	Mem0[v5 + 4<i32>:word32] = r31
	r30 = v5
	r29 = v5 - 8<i32>
	r5 = Mem0[r2 + 16<i32>:word32]
	branch r3 >u r5 l0001FF40
	// succ:  l0001FF2C l0001FF40
l0001FF2C:
	r0 = 0x0001FF42<p32>
	r3 = 2<32>
	r5 = r29 + 0x10<32>
	call logv (retsize: 0;)
	r6 = r29 + 0x10<32>
	Mem0[r29 + 1<i32>:byte] = r6
	// succ:  l0001FF34_thunk_errlog_function
l0001FF34_thunk_errlog_function:
	call errlog_function (retsize: 0;)
	return
	// succ:  logmsg_function_exit
l0001FF40:
	v13 = r30
	r31 = Mem0[v13 + 4<i32>:word32]
	r30 = Mem0[v13:word32]
	r29 = v13 + 8<i32>
	return
	// succ:  logmsg_function_exit
logmsg_function_exit:


// errlog_function
// Return size: 0
define errlog_function
errlog_function_entry:
	r29 = fp
	// succ:  l0001FF44
l0001FF44:
	r0 = 0x00029F7E<p32>
	r4 = r3
	v8 = r29 - 8<i32>
	Mem0[v8:word32] = r30
	Mem0[v8 + 4<i32>:word32] = r31
	r30 = v8
	r29 = v8 - 8<i32>
	r3 = 0<32>
	r5 = r29 + 0x10<32>
	r6 = r29 + 0x10<32>
	Mem0[r29 + 1<i32>:byte] = r6
	v13 = r30
	r31 = Mem0[v13 + 4<i32>:word32]
	r30 = Mem0[v13:word32]
	r29 = v13 + 8<i32>
	return
	// succ:  errlog_function_exit
errlog_function_exit:


// range_execute
// Return size: 0
define range_execute
range_execute_entry:
	r29 = fp
	// succ:  l0001FF70
l0001FF70:
	r4 = 0x0002A07E<p32>
	Mem0[r29 - 16<i32>:word64] = r17_r16
	v7 = r29 - 8<i32>
	Mem0[v7:word32] = r30
	Mem0[v7 + 4<i32>:word32] = r31
	r30 = v7
	r29 = v7 - 40<i32>
	r17_r16 = r0_r1
	r1 = 0x38<32>
	r2 = Mem0[r17 + 4<i32>:word32]
	Mem0[r29 + 8<i32>:word64] = r23_r22
	r3 = Mem0[r17 + 8<i32>:word32]
	Mem0[r29 + 24<i32>:word64] = r19_r18
	Mem0[r29 + 16<i32>:word64] = r21_r20
	r5 = Mem0[r2 + 8<i32>:word32]
	r0 = Mem0[r2 + 4<i32>:word32]
	r2 = Mem0[r2:word32]
	r22 = Mem0[r3:word32]
	r7 = Mem0[r0 + 16<i32>:word32]
	r5 = Mem0[r5 + 16<i32>:word32]
	r2 = r16
	r6 = Mem0[r2 + 16<i32>:word32]
	r18 = Mem0[r22 + 16<i32>:word32]
	r19 = Mem0[r7:word32]
	r21 = Mem0[r5:word32]
	call logmsg_function (retsize: 0;)
	r20 = Mem0[r6:word32]
	Mem0[r29:word32] = r17
	p0 = r11 > r12
	branch p0 l0001FFD0
	// succ:  l0001FFBC l0001FFD0
l0001FFBC:
	r2 = 0<32>
	r3 = r20 + 0<32>
	r3_r2 = SEQ(r20, 0<32>)
	// succ:  l0001FFC0
l0001FFC0:
	r2 = r2 + 1<32>
	r3 = r3 + r21
	branch r19 >u r3 l0001FFC0
	// succ:  l0001FFD0 l0001FFC0
l0001FFD0:
	p1 = r12 > r11
	branch p1 l0001FFE0
	// succ:  l0001FFD4 l0001FFE0
l0001FFD4:
	r2 = r2 + 1<32>
	r3 = r3 + r21
	branch r3 > r19 l0001FFD4
	goto l0001FFE4
	// succ:  l0001FFE4 l0001FFD4
l0001FFE0:
	r4 = Mem0[r22 + 20<i32>:word32]
	// succ:  l0001FFE4
l0001FFE4:
	r3 = r2 << 2<32>
	branch r3 >u r4 l00020004
	// succ:  l0001FFF0 l00020004
l0001FFF0:
	r3 = 0x0002001A<p32>
	r1 = 0x3F<32>
	r2 = r16
	call errlog_function (retsize: 0;)
	goto l00020050
	// succ:  l00020050
l00020004:
	Mem0[r22:word32] = 1<32>
	Mem0[r22 + 4<i32>:word32] = 1<32>
	Mem0[r22 + 8<i32>:word32] = 1<32>
	Mem0[r22 + 12<i32>:word32] = r2
	branch p0 l00020030
	// succ:  l00020018 l00020030
l00020018:
	Mem0[r22 + 24<i32>:word32] = r3
	Mem0[r18:word32] = r20
	r18 = r18 + 4<i32>
	r20 = r20 + r21
	branch r19 >u r20 l00020018
	// succ:  l00020028 l00020018
l00020028:
	r20 = r20 + r21
	Mem0[r18:word32] = r20
	r18 = r18 + 4<i32>
	// succ:  l00020030
l00020030:
	p0 = r12 > r11
	branch p0 l00020028
	// succ:  l00020034 l00020028
l00020034:
	r4 = 0x0002A0A4<p32>
	r1 = 0x49<32>
	r2 = r16
	call logmsg_function (retsize: 0;)
	Mem0[r29:word32] = r17
	r0 = 0<32>
	// succ:  l00020050
l00020050:
	r17_r16 = Mem0[r29 + 32<i32>:word64]
	r19_r18 = Mem0[r29 + 24<i32>:word64]
	r21_r20 = Mem0[r29 + 16<i32>:word64]
	r23_r22 = Mem0[r29 + 8<i32>:word64]
	v33 = r30
	r31 = Mem0[v33 + 4<i32>:word32]
	r30 = Mem0[v33:word32]
	r29 = v33 + 8<i32>
	return
	// succ:  range_execute_exit
range_execute_exit:


// range_check
// Return size: 0
define range_check
range_check_entry:
	r29 = fp
	// succ:  l0002005C
l0002005C:
	r4 = 0x0002A031<p32>
	Mem0[r29 - 16<i32>:word64] = r17_r16
	v7 = r29 - 8<i32>
	Mem0[v7:word32] = r30
	Mem0[v7 + 4<i32>:word32] = r31
	r30 = v7
	r29 = v7 - 16<i32>
	r1 = 0x4F<32>
	r16 = r1
	r17 = r0
	call logmsg_function (retsize: 0;)
	r2 = r16
	Mem0[r29:word32] = r17
	r1 = 0x50<32>
	r2 = Mem0[r17 + 16<i32>:word32]
	branch r2 == 3<32> l0002009C
	// succ:  l00020088 l0002009C
l00020088:
	r3 = 0x0002008C<p32>
	call errlog_function (retsize: 0;)
	r2 = r16
	// succ:  l00020090
l00020090:
	r0 = 0xFFFFFFFF<32>
	r17_r16 = Mem0[r29 + 8<i32>:word64]
	v16 = r30
	r31 = Mem0[v16 + 4<i32>:word32]
	r30 = Mem0[v16:word32]
	r29 = v16 + 8<i32>
	return
	// succ:  range_check_exit
l0002009C:
	r1 = 0x51<32>
	r2 = Mem0[r17 + 20<i32>:word32]
	branch r2 == 1<32> l000200B4
	// succ:  l000200AC l000200B4
l000200AC:
	r3 = 0x000200DB<p32>
	goto l00020090
	// succ:  l00020090
l000200B4:
	r4 = 0x0002A067<p32>
	r1 = 0x52<32>
	r2 = r16
	call logmsg_function (retsize: 0;)
	Mem0[r29:word32] = r17
	r0 = 0<32>
	r17_r16 = Mem0[r29 + 8<i32>:word64]
	v17 = r30
	r31 = Mem0[v17 + 4<i32>:word32]
	r30 = Mem0[v17:word32]
	r29 = v17 + 8<i32>
	return
	// succ:  range_check_exit
range_check_exit:


// logmsg_function
// Return size: 0
define logmsg_function
logmsg_function_entry:
	r29 = fp
	// succ:  l000200D4
l000200D4:
	r3 = 2<32>
	v5 = r29 - 8<i32>
	Mem0[v5:word32] = r30
	Mem0[v5 + 4<i32>:word32] = r31
	r30 = v5
	r29 = v5 - 8<i32>
	r5 = Mem0[r2 + 16<i32>:word32]
	branch r3 >u r5 l000200F8
	// succ:  l000200E4 l000200F8
l000200E4:
	r0 = 0x0002011A<p32>
	r3 = 2<32>
	r5 = r29 + 0x10<32>
	call logv (retsize: 0;)
	r6 = r29 + 0x10<32>
	Mem0[r29 + 1<i32>:byte] = r6
	// succ:  l000200EC_thunk_errlog_function
l000200EC_thunk_errlog_function:
	call errlog_function (retsize: 0;)
	return
	// succ:  logmsg_function_exit
l000200F8:
	v13 = r30
	r31 = Mem0[v13 + 4<i32>:word32]
	r30 = Mem0[v13:word32]
	r29 = v13 + 8<i32>
	return
	// succ:  logmsg_function_exit
logmsg_function_exit:


// errlog_function
// Return size: 0
define errlog_function
errlog_function_entry:
	r29 = fp
	// succ:  l000200FC
l000200FC:
	r0 = 0x0002A016<p32>
	r4 = r3
	v8 = r29 - 8<i32>
	Mem0[v8:word32] = r30
	Mem0[v8 + 4<i32>:word32] = r31
	r30 = v8
	r29 = v8 - 8<i32>
	r3 = 0<32>
	r5 = r29 + 0x10<32>
	r6 = r29 + 0x10<32>
	Mem0[r29 + 1<i32>:byte] = r6
	v13 = r30
	r31 = Mem0[v13 + 4<i32>:word32]
	r30 = Mem0[v13:word32]
	r29 = v13 + 8<i32>
	return
	// succ:  errlog_function_exit
errlog_function_exit:


// transpose_execute
// Return size: 0
define transpose_execute
transpose_execute_entry:
	r29 = fp
	// succ:  l00020120
l00020120:
	r2 = 0x0002A128<p32>
	v6 = r29 - 8<i32>
	Mem0[v6:word32] = r30
	Mem0[v6 + 4<i32>:word32] = r31
	r30 = v6
	r29 = v6 - 144<i32>
	r3 = r29 + 0x30<32>
	r17_r16 = r0_r1
	r5 = r29 + 0x40<32>
	Mem0[r29 + 136<i32>:word64] = r17_r16
	r13 = __set_bit<word32,word32>(r5, 4<32>)
	r14 = __set_bit<word32,word32>(r3, 4<32>)
	r12 = Mem0[r17 + 4<i32>:word32]
	Mem0[r29 + 128<i32>:word64] = r19_r18
	r1 = 0x42<32>
	Mem0[r29 + 120<i32>:word64] = r21_r20
	Mem0[r29 + 112<i32>:word64] = r23_r22
	r18 = Mem0[r12:word32]
	Mem0[r29 + 96<i32>:word64] = r27_r26
	r4 = Mem0[r17 + 8<i32>:word32]
	r9_r8 = Mem0[r2:word64]
	Mem0[r29 + 104<i32>:word64] = r25_r24
	r21 = Mem0[r18 + 12<i32>:word32]
	r20 = Mem0[r18 + 8<i32>:word32]
	r23 = Mem0[r18 + 4<i32>:word32]
	r22 = Mem0[r18:word32]
	r26 = r21 * r20
	Mem0[r29 + 48<i32>:word32] = r22
	Mem0[r29 + 56<i32>:word32] = r20
	r3_r2 = SEQ(2<32>, r16)
	r7_r6 = Mem0[r2 + 8<i32>:word64]
	Mem0[r14:word32] = r23
	r4 = 0x0002A138<p32>
	r24 = Mem0[r4:word32]
	Mem0[r13:word32] = r26
	r27 = r26 * r23
	Mem0[r29 + 16<i32>:byte] = r27
	Mem0[r29 + 80<i32>:word64] = r9_r8
	r19 = Mem0[r24 + 16<i32>:word32]
	Mem0[r29 + 72<i32>:word32] = r21
	Mem0[r29 + 88<i32>:word64] = r7_r6
	Mem0[r29 + 60<i32>:word32] = r21
	Mem0[r5 + 12<i32>:word32] = 1<32>
	call logmsg_function (retsize: 0;)
	Mem0[r29:word32] = r17
	r4 = 0x0002A154<p32>
	r3_r2 = SEQ(3<32>, r16)
	Mem0[r29 + 12<i32>:word32] = r21
	r1 = 0x47<32>
	Mem0[r29:word32] = r22
	Mem0[r29 + 8<i32>:word32] = r20
	Mem0[r29 + 4<i32>:word32] = r23
	call logmsg_function (retsize: 0;)
	r2 = Mem0[r25:word32]
	branch r2 == 1<32> l000201F4
	// succ:  l000201E8 l000201F4
l000201E8:
	branch r2 == 1<32> l000201F8
	// succ:  l000201F0 l000201F8
l000201F0:
	branch r2 == 1<32> l00020214
	goto l000201F8
	// succ:  l000201F8 l00020214
l000201F4:
	r3 = 0x0002A172<p32>
	r1 = 0x4B<32>
	goto l00020200
	// succ:  l00020200
l000201F8:
	r3 = 0x00020236<p32>
	r1 = 0x4B<32>
	// succ:  l00020200
l00020200:
	call errlog_function (retsize: 0;)
	r2 = r16
	// succ:  l00020204
l00020204:
	goto l00020418
	// succ:  l00020418
l00020214:
	r3 = Mem0[r24 + 20<i32>:word32]
	branch r2 >u r3 l0002022C
	// succ:  l00020220 l0002022C
l00020220:
	r3 = 0x0002023F<p32>
	goto l00020204
	// succ:  l00020204
l0002022C:
	r3 = Mem0[r25 + 24<i32>:word32]
	r4 = 0x14<32>
	branch r4 >u r3 l00020248
	// succ:  l0002023C l00020248
l0002023C:
	r3 = 0x0002024D<p32>
	goto l00020204
	// succ:  l00020204
l00020248:
	r5 = r3 >>u 2<32>
	r1 = 0x52<32>
	branch r5 == 1<32> l00020298
	// succ:  l00020258 l00020298
l00020258:
	r4 = 0x00020263<p32>
	r3_r2 = SEQ(3<32>, r16)
	call logmsg_function (retsize: 0;)
	r2 = Mem0[r18:word32]
	r3 = Mem0[r18 + 4<i32>:word32]
	Mem0[r24 + 4<i32>:word32] = r3
	Mem0[r24:word32] = r2
	r2 = Mem0[r18 + 8<i32>:word32]
	r0 = Mem0[r24 + 16<i32>:word32]
	Mem0[r24 + 8<i32>:word32] = r2
	r7 = Mem0[r18 + 12<i32>:word32]
	Mem0[r24 + 12<i32>:word32] = r7
	r2 = Mem0[r18 + 24<i32>:word32]
	Mem0[r24 + 24<i32>:word32] = r2
	call fn00009560 (retsize: 0;)
	r1 = Mem0[r18 + 16<i32>:word32]
	r2 = Mem0[r18 + 24<i32>:word32]
	goto l00020414
	// succ:  l00020414
l00020298:
	p0 = r5 == 0<32>
	branch p0 l000202B0
	// succ:  l000202A4 l000202B0
l000202A4:
	r13_r12 = SEQ(r21, 1<32>)
	r4 = Mem0[r25 + 16<i32>:word32]
	r8 = 3<32>
	r5 = 0<32>
	r7_r6 = 0x100000002<64>
	goto l00020320
	// succ:  l00020320
l000202B0:
	r2 = 4<32> - r5
	p0 = r5 >u 1<32>
	r3 = r29 + 0x50<32>
	r6 = r5
	__loop(0<i32>, 0x000202CC<p32>, r6)
	r3 = r3 + (r2 << 2<32>)
	branch p0 l000202D8
	// succ:  l000202CC l000202D8
l000202CC:
	r4 = r4 + 4<i32>
	r5 = Mem0[r4:word32]
	r5 = r5 + r2
	r4 = r4 + 4<i32>
	r5 = Mem0[r4:word32]
	Mem0[r3:word32] = r5
	r3 = r3 + 4<i32>
	// succ:  l000202D8
l000202D8:
	r2 = r5 + r2
	r9 = r29 + 0x30<32>
	r2 = r29 + 0x50<32>
	Mem0[r3:word32] = r2
	r3 = r3 + 4<i32>
	r4 = __set_bit<word32,word32>(r2, 4<32>)
	r3 = r29 + 0x40<32>
	r5 = Mem0[r29 + 80<i32>:word64]
	r6 = Mem0[r29 + 88<i32>:word64]
	r8 = Mem0[r29 + 92<i32>:word32]
	r2 = Mem0[r18 + 24<i32>:word32]
	r7 = Mem0[r4:word32]
	r13 = Mem0[r30 + r6 * 4<32>:word32]
	r27 = Mem0[r22 + r5 * 4<32>:word32]
	r22 = Mem0[r30 + r5 * 4<32>:word32]
	r20 = Mem0[r22 + r6 * 4<32>:word32]
	r21 = Mem0[r30 + r8 * 4<32>:word32]
	r12 = Mem0[r22 + r8 * 4<32>:word32]
	r23 = Mem0[r30 + r7 * 4<32>:word32]
	r26 = Mem0[r30 + r7 * 4<32>:word32]
	// succ:  l00020320
l00020320:
	r4 = 0x0002A1CD<p32>
	Mem0[r24 + 24<i32>:word32] = r2
	Mem0[r24 + 12<i32>:word32] = r21
	r3_r2 = SEQ(3<32>, r16)
	r1 = 0x89<32>
	Mem0[r24 + 8<i32>:word32] = r20
	Mem0[r24 + 4<i32>:word32] = r23
	r25_r24 = r13_r12
	Mem0[r24:word32] = r22
	Mem0[r29 + 44<i32>:word32] = r21
	Mem0[r29 + 40<i32>:word32] = r20
	Mem0[r29 + 36<i32>:word32] = r23
	Mem0[r29 + 32<i32>:word32] = r22
	Mem0[r29 + 8<i32>:word32] = r6
	Mem0[r29 + 28<i32>:word32] = r12
	Mem0[r29 + 24<i32>:word32] = r13
	Mem0[r29 + 20<i32>:word32] = r26
	Mem0[r29 + 16<i32>:word32] = r27
	Mem0[r29 + 12<i32>:word32] = r8
	Mem0[r29 + 4<i32>:word32] = r7
	call logmsg_function (retsize: 0;)
	Mem0[r29:word32] = r5
	r1_r0 = __simd_shl<word64,word32>(r25_r24, 2<32>)
	p0 = r14 > 0<32>
	branch p0 l000203FC
	// succ:  l00020380 l000203FC
l00020380:
	r3_r2 = 0<64>
	r5_r4 = __simd_shl<word64,word32>(r27_r26, 2<32>)
	// succ:  l00020384
l00020384:
	p0 = r15 > 0<32>
	branch p0 l000203F0
l00020388:
	r7_r6 = SEQ(0<32>, r2)
	// succ:  l0002038C l000203F0
l0002038C:
	r7_r6 = SEQ(0<32>, r2)
	__loop(1<i32>, 0x00020398<p32>, r20)
	p0 = r12 > 0<32>
	branch p0 l000203E4
	// succ:  l00020398 l000203E4
l00020398:
	r8 = r6
	p0 = r13 > 0<32>
	branch p0 l000203D8
	// succ:  l000203A4 l000203D8
l000203A4:
	r12 = r19
	r9 = r8
	__loop(0<i32>, 0x000203C0<p32>, r21)
	r13 = Mem0[r18 + 16<i32>:word32]
	r9 = r9 + r0
	r13 = Mem0[r28 + r9:word32]
	Mem0[r12:word32] = r13
	r12 = r12 + 4<i32>
	r19 = r19 + (r21 << 2<32>)
	// succ:  l000203D8
l000203D8:
	r8 = r8 + r1
	// succ:  l000203E4
l000203E4:
	r6 = r6 + r4
	r7 = r7 + 1<32>
	branch r7 == r23 l0002038C
	goto l000203F4
	// succ:  l000203F4 l0002038C
l000203F0:
	r2 = r2 + r5
	r3 = r3 + 1<32>
	branch r3 == r22 l00020384
	goto l00020400
	// succ:  l00020400 l00020384
l000203F4:
	r3 = r3 + 1<32>
	branch r3 == r22 l00020388
	goto l00020400
	// succ:  l00020400 l00020388
l000203FC:
	r4 = 0x0002A20B<p32>
	r3_r2 = SEQ(2<32>, r16)
	r1 = 0x96<32>
	call logmsg_function (retsize: 0;)
	Mem0[r29:word32] = r17
	goto l00020414
	// succ:  l00020414
l00020400:
	r4 = 0x0002040F<p32>
	r3_r2 = SEQ(2<32>, r16)
	r1 = 0x96<32>
	call logmsg_function (retsize: 0;)
	Mem0[r29:word32] = r17
	// succ:  l00020414
l00020414:
	r0 = 0<32>
	// succ:  l00020418
l00020418:
	r17_r16 = Mem0[r29 + 136<i32>:word64]
	r19_r18 = Mem0[r29 + 128<i32>:word64]
	r21_r20 = Mem0[r29 + 120<i32>:word64]
	r23_r22 = Mem0[r29 + 112<i32>:word64]
	r25_r24 = Mem0[r29 + 104<i32>:word64]
	r27_r26 = Mem0[r29 + 96<i32>:word64]
	v39 = r30
	r31 = Mem0[v39 + 4<i32>:word32]
	r30 = Mem0[v39:word32]
	r29 = v39 + 8<i32>
	return
	// succ:  transpose_execute_exit
transpose_execute_exit:


// transpose_check
// Return size: 0
define transpose_check
transpose_check_entry:
	r29 = fp
	// succ:  l0002042C
l0002042C:
	r4 = 0x0002A0D1<p32>
	Mem0[r29 - 16<i32>:word64] = r17_r16
	v7 = r29 - 8<i32>
	Mem0[v7:word32] = r30
	Mem0[v7 + 4<i32>:word32] = r31
	r30 = v7
	r29 = v7 - 16<i32>
	r1 = 0x9C<32>
	r16 = r1
	r17 = r0
	call logmsg_function (retsize: 0;)
	r3_r2 = SEQ(2<32>, r16)
	Mem0[r29:word32] = r17
	r1 = 0x9D<32>
	r2 = Mem0[r17 + 16<i32>:word32]
	branch r2 == 3<32> l00020470
	// succ:  l0002045C l00020470
l0002045C:
	r3 = 0x00020470<p32>
	call errlog_function (retsize: 0;)
	r2 = r16
	// succ:  l00020464
l00020464:
	r0 = 0xFFFFFFFF<32>
	r17_r16 = Mem0[r29 + 8<i32>:word64]
	v17 = r30
	r31 = Mem0[v17 + 4<i32>:word32]
	r30 = Mem0[v17:word32]
	r29 = v17 + 8<i32>
	return
	// succ:  transpose_check_exit
l00020470:
	r1 = 0x9F<32>
	r2 = Mem0[r17 + 20<i32>:word32]
	branch r2 == 1<32> l0002048C
	// succ:  l00020480 l0002048C
l00020480:
	r3 = 0x000204BF<p32>
	goto l00020464
	// succ:  l00020464
l0002048C:
	r4 = 0x0002A10B<p32>
	r3_r2 = SEQ(2<32>, r16)
	Mem0[r29:word32] = r17
	call logmsg_function (retsize: 0;)
	r0 = 0<32>
	r17_r16 = Mem0[r29 + 8<i32>:word64]
	v18 = r30
	r31 = Mem0[v18 + 4<i32>:word32]
	r30 = Mem0[v18:word32]
	r29 = v18 + 8<i32>
	return
	// succ:  transpose_check_exit
transpose_check_exit:


// logmsg_function
// Return size: 0
define logmsg_function
logmsg_function_entry:
	r29 = fp
	// succ:  l000204A8
l000204A8:
	v4 = r29 - 8<i32>
	Mem0[v4:word32] = r30
	Mem0[v4 + 4<i32>:word32] = r31
	r30 = v4
	r29 = v4 - 8<i32>
	r5 = Mem0[r2 + 16<i32>:word32]
	branch r3 >u r5 l000204C8
	// succ:  l000204B8 l000204C8
l000204B8:
	r0 = 0x000204F6<p32>
	r5 = r29 + 0x10<32>
	r6 = r29 + 0x10<32>
	call logv (retsize: 0;)
	Mem0[r29 + 4<i32>:word32] = r6
	// succ:  l000204C8
l000204C8:
	v13 = r30
	r31 = Mem0[v13 + 4<i32>:word32]
	r30 = Mem0[v13:word32]
	r29 = v13 + 8<i32>
	return
	// succ:  logmsg_function_exit
logmsg_function_exit:


// errlog_function
// Return size: 0
define errlog_function
errlog_function_entry:
	r29 = fp
	// succ:  l000204CC
l000204CC:
	r0 = 0x0002A0B2<p32>
	r4 = r3
	v8 = r29 - 8<i32>
	Mem0[v8:word32] = r30
	Mem0[v8 + 4<i32>:word32] = r31
	r30 = v8
	r29 = v8 - 8<i32>
	r3 = 0<32>
	r5 = r29 + 0x10<32>
	r6 = r29 + 0x10<32>
	Mem0[r29 + 1<i32>:byte] = r6
	v13 = r30
	r31 = Mem0[v13 + 4<i32>:word32]
	r30 = Mem0[v13:word32]
	r29 = v13 + 8<i32>
	return
	// succ:  errlog_function_exit
errlog_function_exit:


// addn_execute
// Return size: 0
define addn_execute
addn_execute_entry:
	r29 = fp
	// succ:  l000204F0
l000204F0:
	r4 = 0x0002A284<p32>
	Mem0[r29 - 16<i32>:word64] = r17_r16
	v7 = r29 - 8<i32>
	Mem0[v7:word32] = r30
	Mem0[v7 + 4<i32>:word32] = r31
	r30 = v7
	r29 = v7 - 48<i32>
	r17_r16 = r0_r1
	r1 = 0x39<32>
	r18 = Mem0[r17 + 4<i32>:word32]
	Mem0[r29 + 32<i32>:word64] = r19_r18
	r2 = r16
	r3 = Mem0[r17 + 8<i32>:word32]
	Mem0[r29 + 24<i32>:word64] = r21_r20
	Mem0[r29 + 16<i32>:word64] = r23_r22
	r20 = Mem0[r18:word32]
	r21 = Mem0[r3:word32]
	Mem0[r29 + 8<i32>:word64] = r25_r24
	r23 = Mem0[r20 + 8<i32>:word32]
	r22 = Mem0[r20 + 12<i32>:word32]
	r24 = Mem0[r20 + 4<i32>:word32]
	r25 = Mem0[r20:word32]
	call logmsg_function (retsize: 0;)
	r19 = Mem0[r21 + 16<i32>:word32]
	Mem0[r29:word32] = r17
	r2 = Mem0[r17 + 16<i32>:word32]
	r3 = 2<32>
	branch r3 >u r2 l000205A0
	// succ:  l0002053C l000205A0
l0002053C:
	r4 = r18 + 4<32>
	// succ:  l00020540
l00020540:
	r4 = r4 + 4<32>
	r5 = r5 + 1<32>
	branch r2 >u r5 l000205A0
	// succ:  l00020550 l000205A0
l00020550:
	r3 = 0x0002055F<p32>
	r6 = Mem0[r4:word32]
	r7 = Mem0[r6:word32]
	branch r7 == r25 l00020564
	// succ:  l00020564 l00020564
l00020564:
	r3 = 0x0002A29B<p32>
	r7 = Mem0[r6 + 4<i32>:word32]
	branch r7 == r24 l00020578
	// succ:  l00020578 l00020578
l00020578:
	r3 = 0x0002A29B<p32>
	r7 = Mem0[r6 + 8<i32>:word32]
	branch r7 == r23 l0002058C
	// succ:  l0002058C l0002058C
l0002058C:
	r3 = 0x0002A29B<p32>
	r6 = Mem0[r6 + 12<i32>:word32]
	branch r6 == r22 l00020540
	// succ:  l000205A0 l00020540
l000205A0:
	r3 = 0x0002A2AA<p32>
	r2 = r24 * r25
	r5 = Mem0[r21 + 20<i32>:word32]
	r2 = r2 * r23
	r1 = 0x40<32>
	r4 = r2 * r22
	r2 = r4 << 2<32>
	branch r2 >u r5 l000205D4
	// succ:  l000205C8 l000205D4
l000205C8:
	r2 = r16
	goto l00020654
	// succ:  l00020654
l000205D4:
	p0 = r4 == 0<32>
	r5 = Mem0[r20 + 4<i32>:word32]
	r3 = Mem0[r20:word32]
	r3 = 0<32>
	Mem0[r21 + 4<i32>:word32] = r5
	Mem0[r21:word32] = r3
	r6 = Mem0[r20 + 8<i32>:word32]
	Mem0[r21 + 8<i32>:word32] = r6
	r7 = Mem0[r20 + 12<i32>:word32]
	branch p0 l00020638
	// succ:  l000205F8 l00020638
l000205F8:
	Mem0[r21 + 12<i32>:word32] = r7
	Mem0[r21 + 24<i32>:word32] = r2
	__loop(1<i32>, 0x00020604<p32>, r4)
	r2 = 0<32>
	r4 = r2
	r6 = Mem0[r17 + 16<i32>:word32]
	p0 = r6 == 0<32>
	branch p0 l0002062C
	// succ:  l00020610 l0002062C
l00020610:
	r5_r4 = r18_r2
	__loop(0<i32>, 0x00020614<p32>, r6)
	r5 = r5 + 4<i32>
	r6 = Mem0[r5:word32]
	r6 = Mem0[r6 + 16<i32>:word32]
	r6 = r6 + (r3 << 2<32>)
	r6 = Mem0[r6:word32]
	r4 = r4 + r6
	// succ:  l0002062C
l0002062C:
	r19 = r19 + 4<32>
	r3 = r3
	Mem0[r19:word32] = r4
	// succ:  l00020638
l00020638:
	r4 = 0x0002A2B8<p32>
	r1 = 0x4C<32>
	r2 = r16
	call logmsg_function (retsize: 0;)
	Mem0[r29:word32] = r17
	r0 = 0<32>
	// succ:  l00020654
l00020654:
	r17_r16 = Mem0[r29 + 40<i32>:word64]
	r19_r18 = Mem0[r29 + 32<i32>:word64]
	r21_r20 = Mem0[r29 + 24<i32>:word64]
	r23_r22 = Mem0[r29 + 16<i32>:word64]
	r25_r24 = Mem0[r29 + 8<i32>:word64]
	v35 = r30
	r31 = Mem0[v35 + 4<i32>:word32]
	r30 = Mem0[v35:word32]
	r29 = v35 + 8<i32>
	return
	// succ:  addn_execute_exit
addn_execute_exit:


// addn_check
// Return size: 0
define addn_check
addn_check_entry:
	r29 = fp
	// succ:  l00020664
l00020664:
	r4 = 0x0002A239<p32>
	Mem0[r29 - 16<i32>:word64] = r17_r16
	v7 = r29 - 8<i32>
	Mem0[v7:word32] = r30
	Mem0[v7 + 4<i32>:word32] = r31
	r30 = v7
	r29 = v7 - 16<i32>
	r1 = 0x52<32>
	r16 = r1
	r17 = r0
	call logmsg_function (retsize: 0;)
	r2 = r16
	Mem0[r29:word32] = r17
	r1 = 0x53<32>
	r2 = Mem0[r17 + 16<i32>:word32]
	branch r2 >u 1<32> l000206A4
	// succ:  l00020690 l000206A4
l00020690:
	r3 = 0x00020693<p32>
	call errlog_function (retsize: 0;)
	r2 = r16
	// succ:  l00020698
l00020698:
	r0 = 0xFFFFFFFF<32>
	r17_r16 = Mem0[r29 + 8<i32>:word64]
	v16 = r30
	r31 = Mem0[v16 + 4<i32>:word32]
	r30 = Mem0[v16:word32]
	r29 = v16 + 8<i32>
	return
	// succ:  addn_check_exit
l000206A4:
	r1 = 0x54<32>
	r2 = Mem0[r17 + 20<i32>:word32]
	branch r2 == 1<32> l000206BC
	// succ:  l000206B4 l000206BC
l000206B4:
	r3 = 0x000206E2<p32>
	goto l00020698
	// succ:  l00020698
l000206BC:
	r4 = 0x0002A26E<p32>
	r1 = 0x55<32>
	r2 = r16
	call logmsg_function (retsize: 0;)
	Mem0[r29:word32] = r17
	r0 = 0<32>
	r17_r16 = Mem0[r29 + 8<i32>:word64]
	v17 = r30
	r31 = Mem0[v17 + 4<i32>:word32]
	r30 = Mem0[v17:word32]
	r29 = v17 + 8<i32>
	return
	// succ:  addn_check_exit
addn_check_exit:


// logmsg_function
// Return size: 0
define logmsg_function
logmsg_function_entry:
	r29 = fp
	// succ:  l000206DC
l000206DC:
	r3 = 2<32>
	v5 = r29 - 8<i32>
	Mem0[v5:word32] = r30
	Mem0[v5 + 4<i32>:word32] = r31
	r30 = v5
	r29 = v5 - 8<i32>
	r5 = Mem0[r2 + 16<i32>:word32]
	branch r3 >u r5 l00020700
	// succ:  l000206EC l00020700
l000206EC:
	r0 = 0x00020721<p32>
	r3 = 2<32>
	r5 = r29 + 0x10<32>
	call logv (retsize: 0;)
	r6 = r29 + 0x10<32>
	Mem0[r29 + 1<i32>:byte] = r6
	// succ:  l000206F4_thunk_errlog_function
l000206F4_thunk_errlog_function:
	call errlog_function (retsize: 0;)
	return
	// succ:  logmsg_function_exit
l00020700:
	v13 = r30
	r31 = Mem0[v13 + 4<i32>:word32]
	r30 = Mem0[v13:word32]
	r29 = v13 + 8<i32>
	return
	// succ:  logmsg_function_exit
logmsg_function_exit:


// errlog_function
// Return size: 0
define errlog_function
errlog_function_entry:
	r29 = fp
	// succ:  l00020704
l00020704:
	r0 = 0x0002A21D<p32>
	r4 = r3
	v8 = r29 - 8<i32>
	Mem0[v8:word32] = r30
	Mem0[v8 + 4<i32>:word32] = r31
	r30 = v8
	r29 = v8 - 8<i32>
	r3 = 0<32>
	r5 = r29 + 0x10<32>
	r6 = r29 + 0x10<32>
	Mem0[r29 + 1<i32>:byte] = r6
	v13 = r30
	r31 = Mem0[v13 + 4<i32>:word32]
	r30 = Mem0[v13:word32]
	r29 = v13 + 8<i32>
	return
	// succ:  errlog_function_exit
errlog_function_exit:


// execute_qinstancenorm_ref
// Return size: 0
define execute_qinstancenorm_ref
execute_qinstancenorm_ref_entry:
	r29 = fp
	// succ:  l00020740
l00020740:
	v4 = r29 - 8<i32>
	Mem0[v4:word32] = r30
	Mem0[v4 + 4<i32>:word32] = r31
	r30 = v4
	r29 = v4 - 112<i32>
	r2 = Mem0[r0 + 4<i32>:word32]
	r3 = Mem0[r0 + 8<i32>:word32]
	Mem0[r29 + 96<i32>:word64] = r19_r18
	Mem0[r29 + 72<i32>:word64] = r25_r24
	r4 = Mem0[r2:word32]
	r17 = r1
	Mem0[r29 + 64<i32>:word64] = r27_r26
	Mem0[r29 + 104<i32>:word64] = r17_r16
	r25 = Mem0[r4 + 8<i32>:word32]
	Mem0[r29 + 88<i32>:word64] = r21_r20
	r19 = Mem0[r4:word32]
	r24 = Mem0[r4 + 4<i32>:word32]
	r5 = r25 * r19
	r27 = Mem0[r4 + 12<i32>:word32]
	r2 = r2 + r27 * 0x14<32>
	r16 = Mem0[r17 + 4<i32>:word32]
	Mem0[r29 + 80<i32>:word64] = r23_r22
	r1_r0 = SEQ(0<32>, r16)
	r18 = Mem0[r3:word32]
	r21 = Mem0[r3 + 8<i32>:word32]
	r3 = r5 * r24
	r22 = Mem0[r3 + 4<i32>:word32]
	Mem0[r29 + 52<i32>:word32] = r25
	r26 = Mem0[r4 + 16<i32>:word32]
	r23 = Mem0[r18 + 16<i32>:word32]
	r20 = r3 * r27
	call fn000095F0 (retsize: 0;)
	r1 = 0x71<32>
	r2 = Mem0[r18 + 20<i32>:word32]
	branch r20 >u r2 l000207C8
	// succ:  l000207B4 l000207C8
l000207B4:
	r3 = 0x000207CA<p32>
	// succ:  l000207B8
l000207B8:
	call errlog_function (retsize: 0;)
	r2 = r17
	goto l00020AA8
	// succ:  l00020AA8
l000207C8:
	p0 = r11 == 1<32>
	branch p0 l000207E0
	// succ:  l000207D4 l000207E0
l000207D4:
	r1 = 0x72<32>
	Mem0[r29 + 40<i32>:word32] = r26
	r3 = 0x0002A314<p32>
	goto l000207B8
	// succ:  l000207B8
l000207E0:
	r2 = r17
	Mem0[r18 + 12<i32>:word32] = r27
	Mem0[r18 + 8<i32>:word32] = r24
	Mem0[r18 + 4<i32>:word32] = r25
	Mem0[r18:word32] = 1<32>
	Mem0[r29 + 12<i32>:word32] = r27
	Mem0[r29 + 8<i32>:word32] = r24
	Mem0[r29 + 4<i32>:word32] = r25
	call logmsg_function (retsize: 0;)
	Mem0[r29:word32] = 1<32>
	p0 = r24 > 0<32>
	r12 = r27
	Mem0[r18 + 24<i32>:word32] = r20
	r0 = p0
	branch p0 l0002087C
	// succ:  l00020824 l0002087C
l00020824:
	Mem0[r29 + 12<i32>:byte] = r0
	r4 = 0<32>
	r2 = Mem0[r29 + 40<i32>:word64]
	// succ:  l00020828
l00020828:
	__loop(1<i32>, 0x00020834<p32>, r25)
	branch p0 l00020874
	// succ:  l00020834 l00020874
l00020834:
	p0 = r25 > 0<32>
	branch p0 l00020868
	// succ:  l00020844 l00020868
l00020844:
	r5 = r3
	p0 = r12 > 0<32>
	r7_r6 = r2_r16
	__loop(0<i32>, 0x00020848<p32>, r12)
	r7 = r7 + 1<i32>
	r8 = Mem0[r7:byte]
	r9 = Mem0[r6:word32]
	r9 = r9 + r8
	Mem0[r6:word32] = r9
	r6 = r6 + 4<i32>
	r13 = Mem0[r5:word32]
	r8 = r13 + r8 * r8
	Mem0[r5:word32] = r8
	r5 = r5 + 4<i32>
	// succ:  l00020868
l00020868:
	// succ:  l00020874
l00020874:
	r4 = r4 + 1<32>
	branch r4 == r24 l00020828
	goto l00020880
	// succ:  l00020880 l00020828
l0002087C:
	r2 = r24 * r25
	p0 = r12 > 0<32>
	r24 = r12
	Mem0[r29 + 36<i32>:word32] = r24
	r0 = p0
	r19 = r24 + 0<32>
	Mem0[r29 + 32<i32>:word32] = r23
	Mem0[r29 + 24<i32>:word32] = r21
	r26 = 0x3727C5AC<32>
	Mem0[r29 + 20<i32>:word32] = r22
	Mem0[r29 + 28<i32>:word32] = r2
	branch p0 l00020920
	goto l000208B4
	// succ:  l000208B4 l00020920
l00020880:
	p0 = r12 > 0<32>
	r24 = r12
	Mem0[r29 + 36<i32>:word32] = r24
	r0 = p0
	r19 = r24 + 0<32>
	Mem0[r29 + 32<i32>:word32] = r23
	Mem0[r29 + 24<i32>:word32] = r21
	r26 = 0x3727C5AC<32>
	Mem0[r29 + 20<i32>:word32] = r22
	Mem0[r29 + 28<i32>:word32] = r2
	branch p0 l00020920
	// succ:  l000208B4 l00020920
l000208B4:
	r18 = 0x3F800000<32>
	Mem0[r29 + 56<i32>:word32] = r0
	r21 = r21 + r24 * 0xC<32>
	r22 = r24 << 3<32>
	r20 = r16
	r2 = Mem0[r29 + 28<i32>:word64]
	r27 = r16 + (r24 << 2<32>)
	r17 = CONVERT(r2, int32, real32)
	// succ:  l000208C8
l000208C8:
	r1 = r17
	r2 = Mem0[r20:word32]
	r0 = CONVERT(r2, uint32, real32)
	call fn00009610 (retsize: 0;)
	r2 = r20 + r22
	r1 = r17
	r23 = r20 + r21
	r2 = __invert_bit<word32,word32>(r0, 0x1E<32>)
	Mem0[r2:word32] = r0
	r27 = r27 + 4<i32>
	r3 = Mem0[r27:word32]
	r4 = Mem0[r20:word32]
	r0 = CONVERT(r3, uint32, real32)
	r3 = CONVERT(r4, uint32, real32)
	r0 = r0 + r2 * r3
	call fn00009610 (retsize: 0;)
	r2 = r0 + r26
	call fn00009800 (retsize: 0;)
	r0 = r2
	Mem0[r23:word32] = r0
	call fn00009610 (retsize: 0;)
	r1_r0 = r0_r18
	r20 = r20 + 4<32>
	r19 = r19
	p0 = r11 == 0<32>
	branch p0 l000208C8
	// succ:  l00020920 l000208C8
l00020920:
	Mem0[r23:word32] = r0
	r4 = r24
	r0 = Mem0[r29 + 48<i32>:word32]
	r27 = r16 + (r4 << 4<32>)
	p0 = r0
	branch p0 l00020948
	// succ:  l0002093C l00020948
l0002093C:
	r18 = 0<32>
	r18 = 0<32>
	r9 = r10
	goto l00020A04
	// succ:  l00020A04
l00020948:
	r2 = r2 + r4 * 3<32>
	r3 = r4 << 1<32>
	r3 = r16 + (r3 << 2<32>)
	r5 = 0<32>
	r17 = r18
	Mem0[r29 + 12<i32>:byte] = r3
	r3 = Mem0[r29 + 40<i32>:word32]
	Mem0[r29 + 44<i32>:word32] = r2
	// succ:  l0002096C
l0002096C:
	p0 = r25 > 0<32>
	r21 = 0<32>
	Mem0[r29 + 40<i32>:word32] = r5
	branch p0 l000209F8
	// succ:  l00020978 l000209F8
l00020978:
	r0 = Mem0[r29 + 56<i32>:word32]
	p0 = r0
	branch p0 l000209F0
	// succ:  l0002098C l000209F0
l0002098C:
	r26 = r3 + 0<32>
	r25_r24 = r3_r4
	r23 = r27 + (r4 << 2<32>)
	r22 = r4
	r20 = Mem0[r29 + 44<i32>:word64]
	r19 = Mem0[r29 + 48<i32>:word64]
	// succ:  l00020998
l00020998:
	r25 = r25 + 1<i32>
	r2 = Mem0[r25:byte]
	r3 = Mem0[r19:word32]
	r2 = CONVERT(r2, int32, real32)
	r4 = Mem0[r20:word32]
	r2 = r2 - r3
	r16 = r4 * r2
	r27 = r27 + 4<32>
	Mem0[r27:byte] = r16
	r1_r0 = r18_r16
	call fn00009600 (retsize: 0;)
	r18 = r0
	r1_r0 = r17_r16
	r19 = r19 + 4<32>
	r20 = r20 + 4<32>
	r17 = r0
	r22 = r22 + 0xFFFFFFFF<32>
	branch r22 == 0<32> l00020998
	// succ:  l000209E0 l00020998
l000209E0:
	r4 = r24
	r27 = r23
	r25 = Mem0[r29 + 52<i32>:word32]
	r3 = r3 + r4
	// succ:  l000209F0
l000209F0:
	r21 = r21 + 1<32>
	branch r21 == r25 l00020978
	goto l000209FC
	// succ:  l000209FC l00020978
l000209F8:
	r5 = Mem0[r29 + 40<i32>:word64]
	r2 = Mem0[r29 + 36<i32>:word64]
	r5 = r5 + 1<32>
	branch r5 == r2 l0002096C
	goto l00020A08
	// succ:  l00020A08 l0002096C
l000209FC:
	r5 = r5 + 1<32>
	branch r5 == r2 l0002096C
	goto l00020A08
	// succ:  l00020A08 l0002096C
l00020A04:
	r2 = Mem0[r29 + 28<i32>:word32]
	r19 = r2 * r4
	branch r19 > 0<32> l00020A74
	goto l00020A14
	// succ:  l00020A14 l00020A74
l00020A08:
	r19 = r2 * r4
	branch r19 > 0<32> l00020A74
	// succ:  l00020A14 l00020A74
l00020A14:
	r0 = 0x38D1B717<32>
	r27 = r27 - (r19 << 2<32>)
	call fn00009600 (retsize: 0;)
	r2 = 0x437F0000<32>
	call fn00009610 (retsize: 0;)
	r1_r0 = r0_r2
	r20 = 0<32>
	r16 = r0
	// succ:  l00020A38
l00020A38:
	r27 = r27 + 4<32>
	r2 = Mem0[r27:word32]
	r2 = r2 - r18
	r0 = r2 * r16
	call fn00009620 (retsize: 0;)
	r2 = truncf(CONVERT(r0, uint32, real32))
	r19 = r19
	r3 = Mem0[r29 + 32<i32>:word64]
	p1 = r19 == 0<32>
	p2 = r2 > 0xFF<32>
	p0 = r2 > 0xFFFFFFFF<32>
	r2 = 0xFFFFFFFF<32>
	r2 = r20 + 0<32>
	Mem0[r3:byte] = r2
	r3 = r3 + 1<i32>
	branch p1 l00020A38
	// succ:  l00020A74 l00020A38
l00020A74:
	Mem0[r29 + 32<i32>:word32] = r3
	r0 = 0<32>
	r4 = Mem0[r29 + 20<i32>:word64]
	r3 = Mem0[r29 + 24<i32>:word64]
	Mem0[r4 + 12<i32>:word32] = 0xFFFFFF81<32>
	Mem0[r4 + 8<i32>:word32] = 1<32>
	Mem0[r4 + 4<i32>:word32] = 1<32>
	Mem0[r4:word32] = 1<32>
	Mem0[r3 + 8<i32>:word32] = 1<32>
	Mem0[r3:word32] = 1<32>
	Mem0[r3 + 12<i32>:word32] = 1<32>
	Mem0[r3 + 4<i32>:word32] = 0xFFFFFF81<32>
	r2 = Mem0[r4 + 16<i32>:word32]
	Mem0[r2:word32] = r18
	r7 = Mem0[r3 + 16<i32>:word32]
	Mem0[r7:word32] = r17
	Mem0[r4 + 24<i32>:word32] = 4<32>
	Mem0[r3 + 24<i32>:word32] = 4<32>
	// succ:  l00020AA8
l00020AA8:
	r17_r16 = Mem0[r29 + 104<i32>:word64]
	r19_r18 = Mem0[r29 + 96<i32>:word64]
	r21_r20 = Mem0[r29 + 88<i32>:word64]
	r23_r22 = Mem0[r29 + 80<i32>:word64]
	r25_r24 = Mem0[r29 + 72<i32>:word64]
	r27_r26 = Mem0[r29 + 64<i32>:word64]
	v35 = r30
	r31 = Mem0[v35 + 4<i32>:word32]
	r30 = Mem0[v35:word32]
	r29 = v35 + 8<i32>
	return
	// succ:  execute_qinstancenorm_ref_exit
execute_qinstancenorm_ref_exit:


// check_qinstancenorm
// Return size: 0
define check_qinstancenorm
check_qinstancenorm_entry:
	r29 = fp
	// succ:  l00020ABC
l00020ABC:
	r2 = r1
	v6 = r29 - 8<i32>
	Mem0[v6:word32] = r30
	Mem0[v6 + 4<i32>:word32] = r31
	r30 = v6
	r29 = v6 - 0<i32>
	r1 = 0xFC<32>
	r3 = Mem0[r0 + 16<i32>:word32]
	branch r3 == 3<32> l00020AD8
	// succ:  l00020AD0 l00020AD8
l00020AD0:
	r3 = 0x00020AEB<p32>
	goto l00020AF0
	// succ:  l00020AF0
l00020AD8:
	r1 = 0xFD<32>
	r0 = 0<32>
	r3 = Mem0[r0 + 20<i32>:word32]
	p0 = r3 == 3<32>
	v13 = r30
	r31 = Mem0[v13 + 4<i32>:word32]
	r30 = Mem0[v13:word32]
	r29 = v13 + 8<i32>
	return
	// succ:  check_qinstancenorm_exit
l00020AF0:
	r0 = 0xFFFFFFFF<32>
	v14 = r30
	r31 = Mem0[v14 + 4<i32>:word32]
	r30 = Mem0[v14:word32]
	r29 = v14 + 8<i32>
	return
	// succ:  check_qinstancenorm_exit
check_qinstancenorm_exit:


// execute_finstancenorm
// Return size: 0
define execute_finstancenorm
execute_finstancenorm_entry:
	r29 = fp
	// succ:  l00020AF8
l00020AF8:
	r7 = r1
	v6 = r29 - 8<i32>
	Mem0[v6:word32] = r30
	Mem0[v6 + 4<i32>:word32] = r31
	r30 = v6
	r29 = v6 - 104<i32>
	r2 = Mem0[r0 + 4<i32>:word32]
	r3 = Mem0[r0 + 8<i32>:word32]
	Mem0[r29 + 80<i32>:word64] = r21_r20
	Mem0[r29 + 72<i32>:word64] = r23_r22
	r2 = Mem0[r2:word32]
	r6 = Mem0[r3:word32]
	Mem0[r29 + 64<i32>:word64] = r25_r24
	r5 = Mem0[r2:word32]
	Mem0[r29 + 96<i32>:word64] = r17_r16
	p0 = r5 > 0<32>
	r21 = Mem0[r2 + 8<i32>:word32]
	r23 = Mem0[r2 + 4<i32>:word32]
	r4 = r5 * r21
	r24 = Mem0[r2 + 12<i32>:word32]
	r4 = r4 * r23
	Mem0[r29 + 88<i32>:word64] = r19_r18
	Mem0[r29 + 56<i32>:word64] = r27_r26
	Mem0[r29 + 28<i32>:word32] = r5
	Mem0[r29 + 20<i32>:word32] = r23
	Mem0[r29 + 24<i32>:word32] = r7
	r0 = r4 * r24
	r4 = Mem0[r6 + 20<i32>:word32]
	r3 = r0 << 2<32>
	branch r3 >u r4 l00020B74
	// succ:  l00020B4C l00020B74
l00020B4C:
	r3 = 0x00020B8A<p32>
	r1 = 0xD6<32>
	r2 = r7
	call errlog_function (retsize: 0;)
	r0 = 0xFFFFFFFF<32>
	// succ:  l00020B60
l00020B60:
	r17_r16 = Mem0[r29 + 96<i32>:word64]
	r19_r18 = Mem0[r29 + 88<i32>:word64]
	r21_r20 = Mem0[r29 + 80<i32>:word64]
	r23_r22 = Mem0[r29 + 72<i32>:word64]
	r25_r24 = Mem0[r29 + 64<i32>:word64]
	r27_r26 = Mem0[r29 + 56<i32>:word64]
	v26 = r30
	r31 = Mem0[v26 + 4<i32>:word32]
	r30 = Mem0[v26:word32]
	r29 = v26 + 8<i32>
	return
	// succ:  execute_finstancenorm_exit
l00020B74:
	r0 = 0<32>
	r16 = Mem0[r7 + 4<i32>:word32]
	r2 = Mem0[r2 + 16<i32>:word32]
	Mem0[r29 + 16<i32>:word32] = r2
	Mem0[r6 + 8<i32>:word32] = r23
	Mem0[r6 + 24<i32>:word32] = r3
	Mem0[r6:word32] = r5
	Mem0[r6 + 4<i32>:word32] = r21
	Mem0[r6 + 12<i32>:word32] = r24
	branch p0 l00020B60
	// succ:  l00020B94 l00020B60
l00020B94:
	r2 = r23 * r21
	r3 = r3 + r24 * 3<32>
	r5 = r5 + r24 * 0xC<32>
	r4 = r24 << 1<32>
	r18 = 0<32>
	Mem0[r29:word32] = r6
	r6 = r2 * r24
	r2 = CONVERT(r2, int32, real32)
	Mem0[r29 + 44<i32>:word32] = r5
	r17 = r16 + (r4 << 2<32>)
	r27 = r24 << 2<32>
	Mem0[r29 + 4<i32>:word32] = r2
	Mem0[r29 + 8<i32>:word32] = r6
	r22 = r16 + (r3 << 2<32>)
	r5 = r24 << 3<32>
	r19 = Mem0[r29 + 4<i32>:word32]
	r1 = r1 + r24 * 0x14<32>
	Mem0[r29 + 48<i32>:word32] = r5
	Mem0[r29 + 12<i32>:word32] = r1
	// succ:  l00020BD8
l00020BD8:
	p0 = r23 > 0<32>
	r1 = 0<32>
	r0 = Mem0[r7 + 4<i32>:word32]
	r3 = p0
	r2 = Mem0[r29 + 12<i32>:word64]
	Mem0[r29 + 36<i32>:word32] = r18
	call fn000095F0 (retsize: 0;)
	Mem0[r29 + 40<i32>:word32] = r3
	r2 = Mem0[r29 + 8<i32>:word32]
	r3 = r2 * r18
	r4 = Mem0[r29 + 16<i32>:word64]
	r0 = Mem0[r29 + 40<i32>:word64]
	p0 = r0
	r18 = r4 + (r3 << 2<32>)
	branch p0 l00020D30
	// succ:  l00020C0C l00020D30
l00020C0C:
	r3_r2 = SEQ(r18, 0<32>)
	p0 = r24 > 0<32>
	r25 = r24
	r26 = r16
	r23 = 0x3727C5AC<32>
	r0 = p0
	branch p0 l00020C90
l00020C2C:
	call fn00009610 (retsize: 0;)
	r1 = r19
	r0 = Mem0[r26:word32]
	// succ:  l00020C30 l00020C90 l00020C38
l00020C30:
	Mem0[r29 + 8<i32>:byte] = r0
	r1 = r19
	r0 = Mem0[r26:word32]
	// succ:  l00020C38
l00020C38:
	r3 = r26 + r27
	r1 = r19
	r20 = r0
	r2 = Mem0[r29 + 48<i32>:word64]
	r2 = r26 + r2
	Mem0[r2:word32] = r20
	call fn00009610 (retsize: 0;)
	r0 = Mem0[r3:word32]
	r2 = __invert_bit<word32,word32>(r20, 0x1E<32>)
	r7 = Mem0[r29 + 44<i32>:word32]
	r0 = r0 + r2 * r20
	r20 = r26 + r7
	r0 = r0 + r23
	Mem0[r20:word32] = r0
	call fn00009800 (retsize: 0;)
	call fn00009610 (retsize: 0;)
	r0 = 0x3F800000<32>
	r1 = r0
	r25 = r25 + 0xFFFFFFFF<32>
	r26 = r26 + 4<32>
	Mem0[r20:word32] = r0
	branch p0 l00020C2C
	// succ:  l00020C90 l00020C2C
l00020C90:
	p0 = r25 == 0<32>
	r0 = Mem0[r29 + 32<i32>:word32]
	r14 = Mem0[r29 + 28<i32>:word32]
	r23 = Mem0[r29 + 20<i32>:word32]
	p1 = r0
	r0 = Mem0[r29 + 40<i32>:word32]
	p0 = r0
	branch p0 l00020D20
	// succ:  l00020CB0 l00020D20
l00020CB0:
	r2 = Mem0[r29:word32]
	r2 = 0<32>
	r3 = Mem0[r2 + 16<i32>:word32]
	// succ:  l00020CB4
l00020CB4:
	p0 = r13 > 0<32>
	branch p0 l00020D18
l00020CB8:
	r4 = 0<32>
	// succ:  l00020CBC l00020D18
l00020CBC:
	r4 = 0<32>
	branch p1 l00020D10
	// succ:  l00020CC8 l00020D10
l00020CC8:
	r8 = r22 + 0<32>
	r7_r6 = r18_r17
	__loop(0<i32>, 0x00020CE0<p32>, r24)
	r5 = r3 + (r24 << 2<32>)
	r6 = r6 + 4<32>
	r7 = r7 + 4<32>
	r9 = Mem0[r7:word32]
	r12 = Mem0[r6:word32]
	r9 = r9 - r12
	r8 = r8 + 4<32>
	r13 = Mem0[r8:word32]
	r9 = r9 * r13
	r3 = r3 + 4<32>
	Mem0[r3:word32] = r9
	r18 = r18 + (r24 << 2<32>)
	r3 = r5
	// succ:  l00020D10
l00020D10:
	r4 = r4 + 1<32>
	branch r4 == r21 l00020CBC
	goto l00020D1C
	// succ:  l00020D1C l00020CBC
l00020D18:
	r2 = r2 + 1<32>
	branch r2 == r23 l00020CB4
	goto l00020D24
	// succ:  l00020D24 l00020CB4
l00020D1C:
	branch r2 == r23 l00020CB8
	goto l00020D24
	// succ:  l00020D24 l00020CB8
l00020D20:
	r18 = Mem0[r29 + 36<i32>:word64]
	r7 = Mem0[r29 + 24<i32>:word64]
	// succ:  l00020D24
l00020D24:
	r18 = r18 + 1<32>
	branch r18 == r14 l00020BD8
	// succ:  l00020D30 l00020BD8
l00020D30:
	__loop(1<i32>, 0x00020D38<p32>, r21)
	p0 = r13 > 0<32>
	branch p0 l00020D7C
	// succ:  l00020D38 l00020D7C
l00020D38:
	branch p0 l00020D70
	// succ:  l00020D44 l00020D70
l00020D44:
	p0 = r24 > 0<32>
	r5_r4 = r16_r3
	__loop(0<i32>, 0x00020D48<p32>, r24)
	r8 = r5 + r27
	r4 = r4 + 4<32>
	r6 = Mem0[r4:word32]
	r7 = Mem0[r5:word32]
	r7 = r6 + r7
	r5 = r5 + 4<32>
	Mem0[r5:word32] = r7
	r1 = Mem0[r8:word32]
	r1 = r1 + r6 * r6
	Mem0[r8:word32] = r1
	r3 = r3 + (r24 << 2<32>)
	// succ:  l00020D70
l00020D70:
	// succ:  l00020D7C
l00020D7C:
	r2 = r2 + 1<32>
	branch r2 == r23 l00020C0C
	// succ:  l00020D7C_thunk_check_finstancenorm l00020C0C
l00020D7C_thunk_check_finstancenorm:
	call check_finstancenorm (retsize: 0;)
	return
	// succ:  execute_finstancenorm_exit
execute_finstancenorm_exit:


// check_finstancenorm
// Return size: 0
define check_finstancenorm
check_finstancenorm_entry:
	r29 = fp
	// succ:  l00020D88
l00020D88:
	r2 = r1
	v6 = r29 - 8<i32>
	Mem0[v6:word32] = r30
	Mem0[v6 + 4<i32>:word32] = r31
	r30 = v6
	r29 = v6 - 0<i32>
	r1 = 0x103<32>
	r3 = Mem0[r0 + 16<i32>:word32]
	branch r3 == 1<32> l00020DA4
	// succ:  l00020D9C l00020DA4
l00020D9C:
	r3 = 0x00020DAB<p32>
	goto l00020DBC
	// succ:  l00020DBC
l00020DA4:
	r1 = 0x104<32>
	r0 = 0<32>
	r3 = Mem0[r0 + 20<i32>:word32]
	p0 = r3 == 1<32>
	v13 = r30
	r31 = Mem0[v13 + 4<i32>:word32]
	r30 = Mem0[v13:word32]
	r29 = v13 + 8<i32>
	return
	// succ:  check_finstancenorm_exit
l00020DBC:
	r0 = 0xFFFFFFFF<32>
	v14 = r30
	r31 = Mem0[v14 + 4<i32>:word32]
	r30 = Mem0[v14:word32]
	r29 = v14 + 8<i32>
	return
	// succ:  check_finstancenorm_exit
check_finstancenorm_exit:


// errlog_function
// Return size: 0
define errlog_function
errlog_function_entry:
	r29 = fp
	// succ:  l00020DC4
l00020DC4:
	r0 = 0x0002A2C5<p32>
	r4 = r3
	v8 = r29 - 8<i32>
	Mem0[v8:word32] = r30
	Mem0[v8 + 4<i32>:word32] = r31
	r30 = v8
	r29 = v8 - 8<i32>
	r3 = 0<32>
	r5 = r29 + 0x10<32>
	r6 = r29 + 0x10<32>
	Mem0[r29 + 1<i32>:byte] = r6
	v13 = r30
	r31 = Mem0[v13 + 4<i32>:word32]
	r30 = Mem0[v13:word32]
	r29 = v13 + 8<i32>
	return
	// succ:  errlog_function_exit
errlog_function_exit:


// logmsg_function
// Return size: 0
define logmsg_function
logmsg_function_entry:
	r29 = fp
	// succ:  l00020DE8
l00020DE8:
	r4 = 2<32>
	v5 = r29 - 8<i32>
	Mem0[v5:word32] = r30
	Mem0[v5 + 4<i32>:word32] = r31
	r30 = v5
	r29 = v5 - 8<i32>
	r3 = Mem0[r2 + 16<i32>:word32]
	branch r4 >u r3 l00020E18
	// succ:  l00020DF8 l00020E18
l00020DF8:
	r0 = 0x00020E09<p32>
	r3 = 2<32>
	r5 = r29 + 0x10<32>
	r4 = 0x0002A334<p32>
	r1 = 0x74<32>
	r6 = r29 + 0x10<32>
	call logv (retsize: 0;)
	Mem0[r29 + 4<i32>:word32] = r6
	// succ:  l00020E18
l00020E18:
	v15 = r30
	r31 = Mem0[v15 + 4<i32>:word32]
	r30 = Mem0[v15:word32]
	r29 = v15 + 8<i32>
	return
	// succ:  logmsg_function_exit
logmsg_function_exit:


// sub_int32_execute
// Return size: 0
define sub_int32_execute
sub_int32_execute_entry:
	r29 = fp
	// succ:  l00020E20
l00020E20:
	r5 = r0
	v6 = r29 - 8<i32>
	Mem0[v6:word32] = r30
	Mem0[v6 + 4<i32>:word32] = r31
	r30 = v6
	r29 = v6 - 160<i32>
	r2 = Mem0[r5 + 4<i32>:word32]
	r3 = Mem0[r5 + 8<i32>:word32]
	Mem0[r29 + 112<i32>:word64] = r27_r26
	Mem0[r29 + 144<i32>:word64] = r19_r18
	r26 = Mem0[r2:word32]
	r19 = Mem0[r2 + 4<i32>:word32]
	r22 = 0<32>
	Mem0[r29 + 136<i32>:word64] = r21_r20
	Mem0[r29 + 128<i32>:word64] = r23_r22
	r6 = Mem0[r26 + 4<i32>:word32]
	r0 = Mem0[r26:word32]
	p0 = r6 == 1<32>
	p1 = r0 == 1<32>
	r8 = Mem0[r19:word32]
	r4 = Mem0[r19 + 4<i32>:word32]
	r10 = p1
	r12 = Mem0[r26 + 8<i32>:word32]
	r18 = p0 ? r4 : r6
	p2 = r12 == 1<32>
	r9 = Mem0[r19 + 8<i32>:word32]
	Mem0[r29 + 92<i32>:word32] = r4
	r4 = p1 ? r8 : r0
	r7 = Mem0[r26 + 12<i32>:word32]
	r2 = r4 * r18
	p1 = r7 == 1<32>
	r0 = Mem0[r19 + 12<i32>:word32]
	r20 = p2 ? r9 : r12
	Mem0[r29 + 120<i32>:word64] = r25_r24
	Mem0[r29 + 76<i32>:word32] = r6
	r2 = r2 * r20
	r21 = p1 ? r0 : r7
	r2 = r2 * r21
	r6 = r1
	r25 = Mem0[r3:word32]
	Mem0[r29 + 152<i32>:word64] = r17_r16
	r10 = p2
	Mem0[r29 + 96<i32>:word32] = r10
	Mem0[r29 + 72<i32>:word32] = r8
	Mem0[r29 + 68<i32>:word32] = r9
	Mem0[r29 + 84<i32>:word32] = r10
	r16 = r2 << 2<32>
	Mem0[r29 + 104<i32>:word32] = r4
	Mem0[r29 + 80<i32>:word32] = r0
	branch p0 l00020ECC
	// succ:  l00020EC8 l00020ECC
l00020EC8:
	r22 = r7 * r12
	// succ:  l00020ECC
l00020ECC:
	r0 = 0x0002A3A9<p32>
	r1 = 0xBD<32>
	r2 = r6
	r4 = 0x0002A3C8<p32>
	r3 = Mem0[r19 + 16<i32>:word32]
	Mem0[r29 + 64<i32>:word32] = r12
	r24 = r6
	r27 = r5
	r23 = Mem0[r25 + 16<i32>:word32]
	Mem0[r29 + 88<i32>:word32] = r7
	r17 = Mem0[r26 + 16<i32>:word32]
	call logmsg_function (retsize: 0;)
	Mem0[r29 + 100<i32>:word32] = r3
	Mem0[r29:word32] = r5
	r1 = 0xBD<32>
	r2 = Mem0[r25 + 20<i32>:word32]
	branch r16 >u r2 l00020F34
	// succ:  l00020F18 l00020F34
l00020F18:
	r0 = 0x00020F2D<p32>
	r2 = r24
	r3 = 0x0002A3E6<p32>
	// succ:  l00020F28
l00020F28:
	call errlog_function (retsize: 0;)
	goto l00021160
	// succ:  l00021160
l00020F34:
	r2 = r24
	r13 = Mem0[r19:word32]
	r5 = Mem0[r26:word32]
	p0 = r5 == r13
	r8 = Mem0[r26 + 12<i32>:word32]
	r7 = Mem0[r26 + 8<i32>:word32]
	r6 = Mem0[r26 + 4<i32>:word32]
	r12 = Mem0[r19 + 12<i32>:word32]
	r9 = Mem0[r19 + 8<i32>:word32]
	r3 = Mem0[r19 + 4<i32>:word32]
	Mem0[r29 + 48<i32>:word32] = r25
	Mem0[r29 + 52<i32>:word32] = r16
	Mem0[r29 + 56<i32>:word32] = r17
	Mem0[r29 + 60<i32>:word32] = r27
	branch p0 l00020F7C
	// succ:  l00020F70 l00020F7C
l00020F70:
	p0 = r5 == 1<32>
	branch p0 l00020F7C
	// succ:  l00020F74 l00020F7C
l00020F74:
	branch p0 l00020FB8
	// succ:  l00020F7C l00020FB8
l00020F7C:
	p0 = r13 == 1<32>
	p0 = r6 == r3
	branch p0 l00020F8C
	// succ:  l00020F80 l00020F8C
l00020F80:
	p0 = r6 == 1<32>
	branch p0 l00020F8C
	// succ:  l00020F84 l00020F8C
l00020F84:
	p0 = r3 == 1<32>
	branch p0 l00020FB8
	// succ:  l00020F8C l00020FB8
l00020F8C:
	branch p0 l00020FA0
	// succ:  l00020F94 l00020FA0
l00020F94:
	p0 = r7 == r9
	p0 = r7 == 1<32>
	branch p0 l00020FA0
	// succ:  l00020F98 l00020FA0
l00020F98:
	branch p0 l00020FB8
	// succ:  l00020FA0 l00020FB8
l00020FA0:
	p0 = r9 == 1<32>
	branch p0 l00020FEC
	// succ:  l00020FA8 l00020FEC
l00020FA8:
	p0 = r8 == r12
	branch p0 l00020FEC
	// succ:  l00020FB0 l00020FEC
l00020FB0:
	p0 = r8 == 1<32>
	branch p0 l00020FEC
	// succ:  l00020FB8 l00020FEC
l00020FB8:
	p0 = r12 == 1<32>
	r0 = 0x0002A3A9<p32>
	r1 = 0xBD<32>
	Mem0[r29 + 28<i32>:word32] = r12
	Mem0[r29 + 24<i32>:word32] = r9
	Mem0[r29 + 16<i32>:word32] = r13
	r3 = 0x0002A3F4<p32>
	Mem0[r29 + 20<i32>:word32] = r3
	Mem0[r29 + 8<i32>:word32] = r7
	Mem0[r29 + 12<i32>:word32] = r8
	Mem0[r29 + 4<i32>:word32] = r6
	goto l00020F28
	// succ:  l00020F28
l00020FEC:
	r19 = r2
	r24 = Mem0[r29 + 104<i32>:word32]
	Mem0[r29 + 44<i32>:word32] = r21
	r0 = 0x0002A3A9<p32>
	Mem0[r29 + 36<i32>:word32] = r18
	Mem0[r29 + 20<i32>:word32] = r3
	r4 = 0x0002A424<p32>
	r1 = 0xBD<32>
	Mem0[r29 + 40<i32>:word32] = r20
	Mem0[r29 + 32<i32>:word32] = r24
	Mem0[r29 + 28<i32>:word32] = r12
	Mem0[r29 + 24<i32>:word32] = r9
	Mem0[r29 + 16<i32>:word32] = r13
	Mem0[r29 + 12<i32>:word32] = r8
	Mem0[r29 + 8<i32>:word32] = r7
	Mem0[r29 + 4<i32>:word32] = r6
	Mem0[r29:word32] = r5
	call logmsg_function (retsize: 0;)
	p0 = r24 > 0<32>
	r14 = 0<32>
	r3 = Mem0[r29 + 48<i32>:word32]
	r26 = Mem0[r29 + 100<i32>:word32]
	r25 = Mem0[r29 + 56<i32>:word32]
	r2 = Mem0[r29 + 52<i32>:word32]
	Mem0[r3 + 6<i32>:byte] = r2
	Mem0[r3 + 4<i32>:word32] = r18
	Mem0[r3 + 8<i32>:word32] = r20
	Mem0[r3 + 12<i32>:word32] = r21
	branch p0 l00021138
	// succ:  l00021068 l00021138
l00021068:
	r13 = Mem0[r29 + 80<i32>:word32]
	r12 = Mem0[r29 + 88<i32>:word32]
	r6 = !(r13 == 1<32>)
	r5 = Mem0[r29 + 68<i32>:word64]
	r7 = Mem0[r29 + 92<i32>:word64]
	r9 = r5 * r7
	r0 = Mem0[r29 + 84<i32>:word64]
	r2 = Mem0[r29 + 76<i32>:word64]
	p2 = r0
	p0 = r5 == 1<32>
	r3 = Mem0[r29 + 64<i32>:word64]
	r4 = Mem0[r29 + 72<i32>:word64]
	r8 = r3 * r2
	r9 = r9 * r13
	p1 = r4 == 1<32>
	r0 = Mem0[r29 + 96<i32>:word32]
	r4 = r13 * r5
	r2 = p2 ? 0<32> : r12
	p2 = r7 == 1<32>
	r9 = r14 + 0<32>
	r8 = r8 * r12
	p0 = r0
	r3 = p0 ? 0<32> : r13
	r5 = !(r12 == 1<32>)
	r7 = 0<32>
	r4 = r14 + 0<32>
	r8 = r14 + 0<32>
	// succ:  l000210C0
l000210C0:
	p0 = r10 > 0<32>
	branch p0 l00021128
l000210C4:
	r13_r12 = r25_r26
	r14 = 0<32>
	// succ:  l000210CC l00021128
l000210CC:
	r13_r12 = r25_r26
	r14 = 0<32>
	p0 = r12 > 0<32>
	branch p0 l00021118
	// succ:  l000210D8 l00021118
l000210D8:
	r28 = r12
	r15 = r13
	__loop(1<i32>, 0x000210DC<p32>, r20)
	p0 = r13 > 0<32>
	branch p0 l0002110C
	// succ:  l000210E8 l0002110C
l000210E8:
	r10 = r23
	r1_r0 = r15_r28
	__loop(0<i32>, 0x000210EC<p32>, r21)
	r0 = r0 + (r6 << 2<32>)
	r1 = r1 + (r5 << 2<32>)
	r11 = Mem0[r1:word32]
	r16 = Mem0[r0:word32]
	r11 = r11 - r16
	Mem0[r10:word32] = r11
	r10 = r10 + 4<i32>
	r23 = r23 + (r21 << 2<32>)
	// succ:  l0002110C
l0002110C:
	r28 = r28 + (r3 << 2<32>)
	r15 = r15 + (r2 << 2<32>)
	// succ:  l00021118
l00021118:
	r13 = r13 + (r22 << 2<32>)
	r12 = r12 + (r4 << 2<32>)
	r14 = r14 + 1<32>
	branch r14 == r18 l000210CC
	goto l0002112C
	// succ:  l0002112C l000210CC
l00021128:
	r25 = r25 + (r8 << 2<32>)
	r26 = r26 + (r9 << 2<32>)
	r7 = r7 + 1<32>
	branch r7 == r24 l000210C0
	goto l0002113C
	// succ:  l0002113C l000210C0
l0002112C:
	r26 = r26 + (r9 << 2<32>)
	r7 = r7 + 1<32>
	branch r7 == r24 l000210C4
	goto l0002113C
	// succ:  l0002113C l000210C4
l00021138:
	r0 = 0x0002A3A9<p32>
	r2 = Mem0[r29 + 60<i32>:word32]
	Mem0[r29:byte] = r2
	goto l0002114C
	// succ:  l0002114C
l0002113C:
	r0 = 0x0002116D<p32>
	r2 = Mem0[r29 + 60<i32>:word32]
	Mem0[r29:byte] = r2
	// succ:  l0002114C
l0002114C:
	r4 = 0x00021158<p32>
	r1 = 0xBD<32>
	r2 = r19
	call logmsg_function (retsize: 0;)
	r0 = 0<32>
	// succ:  l00021160
l00021160:
	r17_r16 = Mem0[r29 + 152<i32>:word64]
	r19_r18 = Mem0[r29 + 144<i32>:word64]
	r21_r20 = Mem0[r29 + 136<i32>:word64]
	r23_r22 = Mem0[r29 + 128<i32>:word64]
	r25_r24 = Mem0[r29 + 120<i32>:word64]
	r27_r26 = Mem0[r29 + 112<i32>:word64]
	v42 = r30
	r31 = Mem0[v42 + 4<i32>:word32]
	r30 = Mem0[v42:word32]
	r29 = v42 + 8<i32>
	return
	// succ:  sub_int32_execute_exit
sub_int32_execute_exit:


// sub_int32_check
// Return size: 0
define sub_int32_check
sub_int32_check_entry:
	r29 = fp
	// succ:  l00021174
l00021174:
	r4 = 0x0002A36E<p32>
	Mem0[r29 - 16<i32>:word64] = r17_r16
	v7 = r29 - 8<i32>
	Mem0[v7:word32] = r30
	Mem0[v7 + 4<i32>:word32] = r31
	r30 = v7
	r29 = v7 - 16<i32>
	r17 = r0
	r1 = 0x37<32>
	r16 = r1
	r0 = 0x0002A355<p32>
	r2 = r16
	Mem0[r29:word32] = r17
	call logmsg_function (retsize: 0;)
	r1 = 0x38<32>
	r2 = Mem0[r17 + 16<i32>:word32]
	branch r2 == 2<32> l000211C4
	// succ:  l000211A8 l000211C4
l000211A8:
	r0 = 0x000211D9<p32>
	r3 = 0x0002A37A<p32>
	// succ:  l000211B4
l000211B4:
	call errlog_function (retsize: 0;)
	r2 = r16
	r0 = 0xFFFFFFFF<32>
	r17_r16 = Mem0[r29 + 8<i32>:word64]
	v16 = r30
	r31 = Mem0[v16 + 4<i32>:word32]
	r30 = Mem0[v16:word32]
	r29 = v16 + 8<i32>
	return
	// succ:  sub_int32_check_exit
l000211C4:
	r1 = 0x39<32>
	r2 = Mem0[r17 + 20<i32>:word32]
	branch r2 == 1<32> l000211E4
	// succ:  l000211D4 l000211E4
l000211D4:
	r0 = 0x000211D9<p32>
	r3 = 0x0002A389<p32>
	goto l000211B4
	// succ:  l000211B4
l000211E4:
	r0 = 0x0002A355<p32>
	r1 = 0x3A<32>
	r2 = r16
	r4 = 0x0002A399<p32>
	call logmsg_function (retsize: 0;)
	Mem0[r29:word32] = r17
	r0 = 0<32>
	r17_r16 = Mem0[r29 + 8<i32>:word64]
	v17 = r30
	r31 = Mem0[v17 + 4<i32>:word32]
	r30 = Mem0[v17:word32]
	r29 = v17 + 8<i32>
	return
	// succ:  sub_int32_check_exit
sub_int32_check_exit:


// logmsg_function
// Return size: 0
define logmsg_function
logmsg_function_entry:
	r29 = fp
	// succ:  l00021208
l00021208:
	r3 = 2<32>
	v5 = r29 - 8<i32>
	Mem0[v5:word32] = r30
	Mem0[v5 + 4<i32>:word32] = r31
	r30 = v5
	r29 = v5 - 8<i32>
	r5 = Mem0[r2 + 16<i32>:word32]
	branch r3 >u r5 l00021228
	// succ:  l00021218 l00021228
l00021218:
	r5 = r29 + 0x10<32>
	r6 = r29 + 0x10<32>
	Mem0[r29 + 1<i32>:byte] = r6
	// succ:  l00021228
l00021228:
	v11 = r30
	r31 = Mem0[v11 + 4<i32>:word32]
	r30 = Mem0[v11:word32]
	r29 = v11 + 8<i32>
	return
	// succ:  logmsg_function_exit
logmsg_function_exit:


// errlog_function
// Return size: 0
define errlog_function
errlog_function_entry:
	r29 = fp
	// succ:  l0002122C
l0002122C:
	r3 = 0<32>
	r4 = r3
	v6 = r29 - 8<i32>
	Mem0[v6:word32] = r30
	Mem0[v6 + 4<i32>:word32] = r31
	r30 = v6
	r29 = v6 - 8<i32>
	call logv (retsize: 0;)
	r5 = r29 + 0x10<32>
	r6 = r29 + 0x10<32>
	Mem0[r29 + 1<i32>:byte] = r6
	r0 = Mem0[r0:word32]
	r0 = Mem0[r0:word32]
	r0 = Mem0[r0:word32]
	r0 = Mem0[r0:word32]
	// succ:  l0002124C_thunk_prelu_execute
l0002124C_thunk_prelu_execute:
	call prelu_execute (retsize: 0;)
	return
	// succ:  errlog_function_exit
errlog_function_exit:


// prelu_execute
// Return size: 0
define prelu_execute
prelu_execute_entry:
	r29 = fp
	// succ:  l00021250
l00021250:
	r17_r16 = r1_r0
	Mem0[r29 - 16<i32>:word64] = r17_r16
	v8 = r29 - 8<i32>
	Mem0[v8:word32] = r30
	Mem0[v8 + 4<i32>:word32] = r31
	r30 = v8
	r29 = v8 - 96<i32>
	r0 = 0x38D1B717<32>
	r2 = Mem0[r16 + 4<i32>:word32]
	Mem0[r29 + 56<i32>:word64] = r25_r24
	r3 = Mem0[r16 + 8<i32>:word32]
	Mem0[r29 + 80<i32>:word64] = r19_r18
	Mem0[r29 + 72<i32>:word64] = r21_r20
	r24 = Mem0[r2:word32]
	r5 = Mem0[r3 + 8<i32>:word32]
	r25 = Mem0[r3:word32]
	r3 = Mem0[r3 + 4<i32>:word32]
	r18 = Mem0[r2 + 8<i32>:word32]
	r21 = Mem0[r2 + 4<i32>:word32]
	r3 = Mem0[r24 + 4<i32>:word32]
	Mem0[r29 + 28<i32>:word32] = r3
	r3 = Mem0[r24 + 12<i32>:word32]
	Mem0[r29 + 36<i32>:word32] = r3
	r4 = Mem0[r18 + 16<i32>:word32]
	// succ:  l00021294_thunk_fn00021298
l00021294_thunk_fn00021298:
	call fn00021298 (retsize: 0;)
	return
	// succ:  prelu_execute_exit
prelu_execute_exit:


// fn00021298
// Return size: 0
define fn00021298
fn00021298_entry:
	r29 = fp
	// succ:  l00021298
l00021298:
	r3 = Mem0[r21 + 16<i32>:word32]
	Mem0[r29 + 40<i32>:word32] = r3
	r2 = Mem0[r2 + 12<i32>:word32]
	r4 = Mem0[r4:word32]
	Mem0[r29 + 48<i32>:word64] = r27_r26
	r26 = Mem0[r3:word32]
	r2 = Mem0[r2 + 16<i32>:word32]
	r7 = Mem0[r24 + 8<i32>:word32]
	Mem0[r29 + 64<i32>:word64] = r23_r22
	r1 = r4 - r26
	r7 = Mem0[r24:word32]
	Mem0[r29 + 44<i32>:word32] = r7
	Mem0[r29 + 24<i32>:word32] = r5
	r22 = Mem0[r24 + 16<i32>:word32]
	Mem0[r29 + 32<i32>:word32] = r7
	call fn00009600 (retsize: 0;)
	r23 = Mem0[r25 + 16<i32>:word32]
	r19 = Mem0[r2:word32]
	r2 = 0x437F0000<32>
	call fn00009610 (retsize: 0;)
	r1_r0 = r0_r2
	r20 = 0<32>
	// succ:  l000212F4
l000212F4:
	r2 = r20 - r26
	r0 = r2 * r0
	call fn00009620 (retsize: 0;)
	r4 = 0x0002A4EE<p32>
	r3 = 0x47800000<32>
	r3 = r19 * r3
	r27 = truncf(CONVERT(r0, uint32, real32))
	r1 = 0x47<32>
	r2 = r17
	Mem0[r29:word32] = r16
	r26 = CONVERT(r3, real32, uint32)
	call logmsg_function (retsize: 0;)
	r4 = 0x0002A506<p32>
	r2 = Mem0[r18 + 16<i32>:word32]
	r3 = Mem0[r21 + 16<i32>:word32]
	r1 = 0x4A<32>
	r2 = Mem0[r2:word32]
	r3 = Mem0[r3:word32]
	r7_r6 = CONVERT(r2, real32, real64)
	r9_r8 = CONVERT(r3, real32, real64)
	r2 = r17
	Mem0[r29 + 8<i32>:word64] = r7_r6
	Mem0[r29:word64] = r9_r8
	call logmsg_function (retsize: 0;)
	r2 = 0x3F800000<32>
	p0 = r19 > r2
	branch p0 l00021384
	// succ:  l0002136C l00021384
l0002136C:
	r1 = 0x4B<32>
	r3 = 0x0002A51E<p32>
	// succ:  l00021374
l00021374:
	call errlog_function (retsize: 0;)
	r2 = r17
	// succ:  l00021378
l00021378:
	goto l00021558
	// succ:  l00021558
l00021384:
	p0 = r20 > r19
	branch p0 l000213A4
	// succ:  l00021394 l000213A4
l00021394:
	r1 = 0x4E<32>
	p1 = r27 > 0xFFFFFFFF<32>
	r3 = 0x0002A534<p32>
	goto l00021374
	// succ:  l00021374
l000213A4:
	r7_r6 = CONVERT(r19, real32, real64)
	p0 = r27 > 0xFF<32>
	r2 = Mem0[r29 + 36<i32>:word64]
	r3 = Mem0[r29 + 32<i32>:word64]
	r3 = r2 * r3
	r27 = 0xFFFFFFFF<32>
	r0 = Mem0[r29 + 44<i32>:word64]
	r5 = Mem0[r29 + 40<i32>:word64]
	r4 = 0x0002A54A<p32>
	r3 = r3 * r0
	r27 = 0<32>
	r20 = r27 & 0xFF<32>
	Mem0[r29 + 8<i32>:word32] = r26
	Mem0[r29:word64] = r7_r6
	r2 = 0x8000<32> + r20 * r26
	r27 = r20
	r27 = r27 - (r2 >>u 0x10<32>)
	r2 = r17
	Mem0[r29 + 65548<i32>:word32] = 0xFFFFFF80<32>
	call logmsg_function (retsize: 0;)
	p0 = r19 == 0<32>
	r2 = Mem0[r25 + 20<i32>:word32]
	branch r19 >u r2 l0002141C
	// succ:  l00021410 l0002141C
l00021410:
	r3 = 0x00021439<p32>
	goto l00021378
	// succ:  l00021378
l0002141C:
	r2 = Mem0[r24:word32]
	r3 = Mem0[r24 + 4<i32>:word32]
	Mem0[r25 + 4<i32>:word32] = r3
	Mem0[r25:word32] = r2
	r6 = Mem0[r24 + 8<i32>:word32]
	Mem0[r25 + 8<i32>:word32] = r6
	r24 = 0<32>
	r7 = Mem0[r24 + 12<i32>:word32]
	branch p0 l0002149C
	// succ:  l00021448 l0002149C
l00021448:
	Mem0[r25 + 12<i32>:word32] = r7
	Mem0[r25 + 24<i32>:word32] = r19
	r3 = r27
	r2 = Mem0[r22:byte]
	Mem0[r23:byte] = r2
	// succ:  l0002144C
l0002144C:
	r2 = Mem0[r22:byte]
	branch r20 >u r2 l00021490
	// succ:  l00021464 l00021490
l00021464:
	r4 = 0x00021487<p32>
	r2 = 0x8000<32> + r2 * r26
	r3 = r3 + (r2 >>u 0x10<32>)
	r2 = r17
	Mem0[r29 + 8<i32>:word32] = r3
	Mem0[r29 + 4<i32>:word32] = r5
	call logmsg_function (retsize: 0;)
	Mem0[r29:word32] = r24
	r23 = r23 + 1<32>
	r22 = r22 + 1<32>
	r24 = r24 + 1<32>
	branch r24 == r19 l00021448
	goto l000214A0
	// succ:  l000214A0 l00021448
l00021490:
	r22 = r22 + 1<32>
	r24 = r24 + 1<32>
	branch r24 == r19 l0002144C
	goto l000214A0
	// succ:  l000214A0 l0002144C
l0002149C:
	r2 = Mem0[r21:word32]
	r20 = Mem0[r29 + 28<i32>:word64]
	// succ:  l000214A0
l000214A0:
	r3 = Mem0[r21 + 4<i32>:word32]
	Mem0[r20 + 4<i32>:word32] = r3
	Mem0[r20:word32] = r2
	r2 = Mem0[r21 + 8<i32>:word32]
	Mem0[r20 + 8<i32>:word32] = r2
	r7 = Mem0[r21 + 12<i32>:word32]
	Mem0[r20 + 12<i32>:word32] = r7
	r2 = Mem0[r21 + 24<i32>:word32]
	r6 = Mem0[r20 + 20<i32>:word32]
	branch r2 >u r6 l000214D0
	// succ:  l000214C8 l000214D0
l000214C8:
	call fn00009560 (retsize: 0;)
	r2 = Mem0[r21 + 24<i32>:word32]
	r1 = Mem0[r21 + 16<i32>:word32]
	// succ:  l000214D0
l000214D0:
	r2 = Mem0[r18:word32]
	r4 = Mem0[r29 + 24<i32>:word64]
	r3 = Mem0[r18 + 4<i32>:word32]
	Mem0[r4 + 4<i32>:word32] = r3
	Mem0[r4:word32] = r2
	r2 = Mem0[r18 + 8<i32>:word32]
	Mem0[r4 + 8<i32>:word32] = r2
	r7 = Mem0[r18 + 12<i32>:word32]
	Mem0[r4 + 12<i32>:word32] = r7
	r2 = Mem0[r18 + 24<i32>:word32]
	r6 = Mem0[r4 + 20<i32>:word32]
	branch r2 >u r6 l00021500
	// succ:  l000214FC l00021500
l000214FC:
	r19 = r4 + 0x10<32>
	// succ:  l00021500
l00021500:
	r19 = r4 + 0x10<32>
	r0 = Mem0[r4 + 16<i32>:word32]
	Mem0[r4 + 24<i32>:word32] = r2
	call fn00009560 (retsize: 0;)
	r2 = Mem0[r18 + 24<i32>:word32]
	r1 = Mem0[r18 + 16<i32>:word32]
	r4 = 0x0002A5A4<p32>
	r2 = Mem0[r19:word32]
	r3 = Mem0[r20 + 16<i32>:word32]
	r1 = 0x61<32>
	r2 = Mem0[r2:word32]
	r3 = Mem0[r3:word32]
	r7_r6 = CONVERT(r2, real32, real64)
	r9_r8 = CONVERT(r3, real32, real64)
	r2 = r17
	Mem0[r29 + 8<i32>:word64] = r7_r6
	Mem0[r29:word64] = r9_r8
	call logmsg_function (retsize: 0;)
	r4 = 0x0002A5BD<p32>
	r1 = 0x62<32>
	r2 = r17
	call logmsg_function (retsize: 0;)
	Mem0[r29:word32] = r16
	r0 = 0<32>
	// succ:  l00021558
l00021558:
	r17_r16 = Mem0[r29 + 88<i32>:word64]
	r19_r18 = Mem0[r29 + 80<i32>:word64]
	r21_r20 = Mem0[r29 + 72<i32>:word64]
	r23_r22 = Mem0[r29 + 64<i32>:word64]
	r25_r24 = Mem0[r29 + 56<i32>:word64]
	r27_r26 = Mem0[r29 + 48<i32>:word64]
	v35 = r30
	r31 = Mem0[v35 + 4<i32>:word32]
	r30 = Mem0[v35:word32]
	r29 = v35 + 8<i32>
	return
	// succ:  fn00021298_exit
fn00021298_exit:


// prelu_check
// Return size: 0
define prelu_check
prelu_check_entry:
	r29 = fp
	// succ:  l00021570
l00021570:
	r4 = 0x0002A48A<p32>
	Mem0[r29 - 16<i32>:word64] = r17_r16
	v7 = r29 - 8<i32>
	Mem0[v7:word32] = r30
	Mem0[v7 + 4<i32>:word32] = r31
	r30 = v7
	r29 = v7 - 16<i32>
	r1 = 0x69<32>
	r16 = r1
	r17 = r0
	call logmsg_function (retsize: 0;)
	r2 = r16
	Mem0[r29:word32] = r17
	r3 = 0x0002A4A1<p32>
	r1 = 0x6A<32>
	r2 = Mem0[r17 + 16<i32>:word32]
	branch r2 == 4<32> l000215F8
	// succ:  l000215A4 l000215F8
l000215A4:
	r3 = 0x000215B4<p32>
	r1 = 0x6B<32>
	r2 = Mem0[r17 + 20<i32>:word32]
	branch r2 == 3<32> l000215F8
	// succ:  l000215B8 l000215F8
l000215B8:
	r5 = 0<32>
	r4 = Mem0[r17 + 4<i32>:word32]
	// succ:  l000215BC
l000215BC:
	r2 = r2 + 4<32>
	r5 = r5 + 1<32>
	branch r5 > 2<32> l00021608
	// succ:  l000215CC l00021608
l000215CC:
	r3 = 0x00021604<p32>
	r4 = r4 + 4<i32>
	r6 = Mem0[r4:word32]
	branch r6 == 0<32> l000215E4
	// succ:  l000215DC l000215E4
l000215DC:
	r1 = 0x6D<32>
	r3 = 0x0002A4CB<p32>
	r6 = Mem0[r17 + 8<i32>:word32]
	goto l000215EC
	// succ:  l000215EC
l000215E4:
	r3 = 0x0002160F<p32>
	r6 = Mem0[r17 + 8<i32>:word32]
	// succ:  l000215EC
l000215EC:
	r6 = Mem0[r4 + r2:word32]
	branch r6 == 0<32> l000215BC
	// succ:  l000215F8 l000215BC
l000215F8:
	call errlog_function (retsize: 0;)
	r2 = r16
	r0 = 0xFFFFFFFF<32>
	r17_r16 = Mem0[r29 + 8<i32>:word64]
	v18 = r30
	r31 = Mem0[v18 + 4<i32>:word32]
	r30 = Mem0[v18:word32]
	r29 = v18 + 8<i32>
	return
	// succ:  prelu_check_exit
l00021608:
	r4 = 0x0002A4D7<p32>
	r1 = 0x70<32>
	r2 = r16
	call logmsg_function (retsize: 0;)
	Mem0[r29:word32] = r17
	r0 = 0<32>
	r17_r16 = Mem0[r29 + 8<i32>:word64]
	v19 = r30
	r31 = Mem0[v19 + 4<i32>:word32]
	r30 = Mem0[v19:word32]
	r29 = v19 + 8<i32>
	return
	// succ:  prelu_check_exit
prelu_check_exit:


// logmsg_function
// Return size: 0
define logmsg_function
logmsg_function_entry:
	r29 = fp
	// succ:  l00021628
l00021628:
	r3 = 2<32>
	v5 = r29 - 8<i32>
	Mem0[v5:word32] = r30
	Mem0[v5 + 4<i32>:word32] = r31
	r30 = v5
	r29 = v5 - 8<i32>
	r5 = Mem0[r2 + 16<i32>:word32]
	branch r3 >u r5 l0002164C
	// succ:  l00021638 l0002164C
l00021638:
	r0 = 0x00021673<p32>
	r3 = 2<32>
	r5 = r29 + 0x10<32>
	call logv (retsize: 0;)
	r6 = r29 + 0x10<32>
	Mem0[r29 + 1<i32>:byte] = r6
	// succ:  l00021640_thunk_errlog_function
l00021640_thunk_errlog_function:
	call errlog_function (retsize: 0;)
	return
	// succ:  logmsg_function_exit
l0002164C:
	v13 = r30
	r31 = Mem0[v13 + 4<i32>:word32]
	r30 = Mem0[v13:word32]
	r29 = v13 + 8<i32>
	return
	// succ:  logmsg_function_exit
logmsg_function_exit:


// errlog_function
// Return size: 0
define errlog_function
errlog_function_entry:
	r29 = fp
	// succ:  l00021650
l00021650:
	r0 = 0x0002A46F<p32>
	r4 = r3
	v8 = r29 - 8<i32>
	Mem0[v8:word32] = r30
	Mem0[v8 + 4<i32>:word32] = r31
	r30 = v8
	r29 = v8 - 8<i32>
	r3 = 0<32>
	r5 = r29 + 0x10<32>
	r6 = r29 + 0x10<32>
	Mem0[r29 + 1<i32>:byte] = r6
	v13 = r30
	r31 = Mem0[v13 + 4<i32>:word32]
	r30 = Mem0[v13:word32]
	r29 = v13 + 8<i32>
	return
	// succ:  errlog_function_exit
errlog_function_exit:


// prelu_execute
// Return size: 0
define prelu_execute
prelu_execute_entry:
	r29 = fp
	// succ:  l00021680
l00021680:
	r4 = 0x0002A635<p32>
	Mem0[r29 - 16<i32>:word64] = r17_r16
	v7 = r29 - 8<i32>
	Mem0[v7:word32] = r30
	Mem0[v7 + 4<i32>:word32] = r31
	r30 = v7
	r29 = v7 - 56<i32>
	r17_r16 = r0_r1
	r1 = 0x38<32>
	r7 = Mem0[r17 + 4<i32>:word32]
	Mem0[r29 + 40<i32>:word64] = r19_r18
	r2 = r16
	r5 = Mem0[r17 + 8<i32>:word32]
	Mem0[r29 + 32<i32>:word64] = r21_r20
	Mem0[r29 + 24<i32>:word64] = r23_r22
	r6 = Mem0[r7 + 4<i32>:word32]
	r18 = Mem0[r7:word32]
	r19 = Mem0[r5:word32]
	Mem0[r29 + 16<i32>:word64] = r25_r24
	r3 = Mem0[r6 + 16<i32>:word32]
	r23 = Mem0[r18 + 12<i32>:word32]
	Mem0[r29 + 8<i32>:word64] = r27_r26
	r20 = Mem0[r18 + 16<i32>:word32]
	r24 = Mem0[r18 + 8<i32>:word32]
	r25 = Mem0[r18:word32]
	r26 = Mem0[r18 + 4<i32>:word32]
	r21 = Mem0[r19 + 16<i32>:word32]
	r22 = Mem0[r3:word32]
	call logmsg_function (retsize: 0;)
	Mem0[r29:word32] = r17
	r2 = 0<32>
	p0 = r2 > r22
	branch p0 l00021704
	// succ:  l000216EC l00021704
l000216EC:
	r1 = 0x39<32>
	r3 = Mem0[r19 + 20<i32>:word32]
	r3 = 0x0002A64D<p32>
	call errlog_function (retsize: 0;)
	r2 = r16
	// succ:  l000216F8
l000216F8:
	goto l00021794
	// succ:  l00021794
l00021704:
	r2 = r26 * r25
	r2 = r2 * r24
	r23 = r2 * r23
	r2 = r23 << 2<32>
	branch r2 >u r3 l00021724
	// succ:  l0002171C l00021724
l0002171C:
	r3 = 0x00021720<p32>
	r10 = 0x3A<32>
	goto l000216F8
	// succ:  l000216F8
l00021724:
	p0 = r23 == 0<32>
	r3 = Mem0[r18:word32]
	r4 = Mem0[r18 + 4<i32>:word32]
	Mem0[r19 + 4<i32>:word32] = r4
	Mem0[r19:word32] = r3
	r6 = Mem0[r18 + 8<i32>:word32]
	Mem0[r19 + 8<i32>:word32] = r6
	r18 = -1<i32>
	r7 = Mem0[r18 + 12<i32>:word32]
	branch p0 l00021778
	// succ:  l00021744 l00021778
l00021744:
	Mem0[r19 + 12<i32>:word32] = r7
	Mem0[r19 + 24<i32>:word32] = r2
	r19 = Mem0[r20:word32]
	call fn00009600 (retsize: 0;)
	r1_r0 = r18_r19
	r2 = r22 * r19
	r24 = r0
	call fn000097B0 (retsize: 0;)
	r1_r0 = r18_r2
	r23 = r23 + 0xFFFFFFFF<32>
	r2 = r24 + r0
	r20 = r20 + 4<32>
	r21 = r21 + 4<32>
	Mem0[r21:byte] = r2
	// succ:  l00021778
l00021778:
	r4 = 0x0002A66A<p32>
	r1 = 0x42<32>
	r2 = r16
	call logmsg_function (retsize: 0;)
	Mem0[r29:word32] = r17
	r0 = 0<32>
	// succ:  l00021794
l00021794:
	r17_r16 = Mem0[r29 + 48<i32>:word64]
	r19_r18 = Mem0[r29 + 40<i32>:word64]
	r21_r20 = Mem0[r29 + 32<i32>:word64]
	r23_r22 = Mem0[r29 + 24<i32>:word64]
	r25_r24 = Mem0[r29 + 16<i32>:word64]
	r27_r26 = Mem0[r29 + 8<i32>:word64]
	v36 = r30
	r31 = Mem0[v36 + 4<i32>:word32]
	r30 = Mem0[v36:word32]
	r29 = v36 + 8<i32>
	return
	// succ:  prelu_execute_exit
prelu_execute_exit:


// prelu_check
// Return size: 0
define prelu_check
prelu_check_entry:
	r29 = fp
	// succ:  l000217A8
l000217A8:
	r4 = 0x0002A5E8<p32>
	Mem0[r29 - 16<i32>:word64] = r17_r16
	v7 = r29 - 8<i32>
	Mem0[v7:word32] = r30
	Mem0[v7 + 4<i32>:word32] = r31
	r30 = v7
	r29 = v7 - 16<i32>
	r1 = 0x48<32>
	r16 = r1
	r17 = r0
	call logmsg_function (retsize: 0;)
	r2 = r16
	Mem0[r29:word32] = r17
	r1 = 0x49<32>
	r2 = Mem0[r17 + 16<i32>:word32]
	branch r2 == 2<32> l000217E8
	// succ:  l000217D4 l000217E8
l000217D4:
	r3 = 0x00021803<p32>
	call errlog_function (retsize: 0;)
	r2 = r16
	// succ:  l000217DC
l000217DC:
	r0 = 0xFFFFFFFF<32>
	r17_r16 = Mem0[r29 + 8<i32>:word64]
	v16 = r30
	r31 = Mem0[v16 + 4<i32>:word32]
	r30 = Mem0[v16:word32]
	r29 = v16 + 8<i32>
	return
	// succ:  prelu_check_exit
l000217E8:
	r1 = 0x4A<32>
	r2 = Mem0[r17 + 20<i32>:word32]
	branch r2 == 1<32> l00021800
	// succ:  l000217F8 l00021800
l000217F8:
	r3 = 0x00021812<p32>
	goto l000217DC
	// succ:  l000217DC
l00021800:
	r4 = 0x0002A61E<p32>
	r1 = 0x4B<32>
	r2 = r16
	call logmsg_function (retsize: 0;)
	Mem0[r29:word32] = r17
	r0 = 0<32>
	r17_r16 = Mem0[r29 + 8<i32>:word64]
	v17 = r30
	r31 = Mem0[v17 + 4<i32>:word32]
	r30 = Mem0[v17:word32]
	r29 = v17 + 8<i32>
	return
	// succ:  prelu_check_exit
prelu_check_exit:


// logmsg_function
// Return size: 0
define logmsg_function
logmsg_function_entry:
	r29 = fp
	// succ:  l00021820
l00021820:
	r3 = 2<32>
	v5 = r29 - 8<i32>
	Mem0[v5:word32] = r30
	Mem0[v5 + 4<i32>:word32] = r31
	r30 = v5
	r29 = v5 - 8<i32>
	r5 = Mem0[r2 + 16<i32>:word32]
	branch r3 >u r5 l00021844
	// succ:  l00021830 l00021844
l00021830:
	r0 = 0x0002184F<p32>
	r3 = 2<32>
	r5 = r29 + 0x10<32>
	call logv (retsize: 0;)
	r6 = r29 + 0x10<32>
	Mem0[r29 + 1<i32>:byte] = r6
	// succ:  l00021838_thunk_errlog_function
l00021838_thunk_errlog_function:
	call errlog_function (retsize: 0;)
	return
	// succ:  logmsg_function_exit
l00021844:
	v13 = r30
	r31 = Mem0[v13 + 4<i32>:word32]
	r30 = Mem0[v13:word32]
	r29 = v13 + 8<i32>
	return
	// succ:  logmsg_function_exit
logmsg_function_exit:


// errlog_function
// Return size: 0
define errlog_function
errlog_function_entry:
	r29 = fp
	// succ:  l00021848
l00021848:
	r0 = 0x0002A5CB<p32>
	r4 = r3
	v8 = r29 - 8<i32>
	Mem0[v8:word32] = r30
	Mem0[v8 + 4<i32>:word32] = r31
	r30 = v8
	r29 = v8 - 8<i32>
	r3 = 0<32>
	r5 = r29 + 0x10<32>
	r6 = r29 + 0x10<32>
	Mem0[r29 + 1<i32>:byte] = r6
	v13 = r30
	r31 = Mem0[v13 + 4<i32>:word32]
	r30 = Mem0[v13:word32]
	r29 = v13 + 8<i32>
	return
	// succ:  errlog_function_exit
errlog_function_exit:


// sum_f_execute
// Return size: 0
define sum_f_execute
sum_f_execute_entry:
	r29 = fp
	// succ:  l00021870
l00021870:
	r28 = 1<32>
	v5 = r29 - 8<i32>
	Mem0[v5:word32] = r30
	Mem0[v5 + 4<i32>:word32] = r31
	r30 = v5
	r29 = v5 - 48<i32>
	r2 = Mem0[r0 + 8<i32>:word32]
	r8 = Mem0[r0 + 4<i32>:word32]
	r6 = Mem0[r0 + 16<i32>:word32]
	Mem0[r29 + 40<i32>:word64] = r17_r16
	r2 = r1
	r7 = Mem0[r8:word32]
	r14 = Mem0[r2:word32]
	p0 = r6 == 3<32>
	r17 = 1<32>
	Mem0[r29 + 32<i32>:word64] = r19_r18
	Mem0[r29 + 24<i32>:word64] = r21_r20
	r1 = 1<32>
	r10 = 1<32>
	r15 = Mem0[r7:word32]
	r3 = Mem0[r7 + 12<i32>:word32]
	r18 = 0<32>
	r13_r12 = r3_r15
	r4 = Mem0[r7 + 8<i32>:word32]
	r5 = Mem0[r7 + 4<i32>:word32]
	r6 = Mem0[r7 + 16<i32>:word32]
	r7 = Mem0[r14 + 16<i32>:word32]
	Mem0[r29 + 16<i32>:word64] = r23_r22
	Mem0[r29 + 8<i32>:word64] = r25_r24
	branch p0 l000218DC
	// succ:  l000218D0 l000218DC
l000218D0:
	Mem0[r29:word64] = r27_r26
	r13_r12 = 0x100000001<64>
	r9_r8 = 0x100000001<64>
	// succ:  l000218D8_thunk_fn00021A1C
l000218D8_thunk_fn00021A1C:
	call fn00021A1C (retsize: 0;)
	return
	// succ:  sum_f_execute_exit
l000218DC:
	r9_r8 = r4_r5
	r10 = Mem0[r8 + 8<i32>:word32]
	r1 = Mem0[r8 + 4<i32>:word32]
	r10 = Mem0[r10 + 16<i32>:word32]
	r11 = Mem0[r1 + 12<i32>:word32]
	r1 = Mem0[r1 + 16<i32>:word32]
	r10 = Mem0[r10:word32]
	branch p0 l00021958
	// succ:  l00021908 l00021958
l00021908:
	p0 = r11 == 0<32>
	r9_r8 = r4_r5
	r16 = r1 + 0<32>
	__loop(0<i32>, 0x00021910<p32>, r11)
	r13_r12 = r3_r15
	r16 = r16 + 4<i32>
	r17 = Mem0[r16:word32]
	r17 = r10 + (0x7F<32> - r17)
	branch r17 > 3<32> l0002192C
	// succ:  l00021920 l0002192C
l00021920:
	r9_r8 = 0x100000001<64>
	r13 = 1<32>
	r12 = 1<32>
	// succ:  l0002192C
l0002192C:
	p0 = r9 == 0<32>
	branch p0 l0002194C
	// succ:  l00021934 l0002194C
l00021934:
	r13 = 1<32>
	p0 = r9 == 1<32>
	branch p0 l0002194C
	// succ:  l0002193C l0002194C
l0002193C:
	r9 = 1<32>
	p0 = r9 == 2<32>
	branch p0 l0002194C
	// succ:  l00021944 l0002194C
l00021944:
	r8 = 1<32>
	p0 = r17 == 3<32>
	r12 = 1<32>
	// succ:  l0002194C
l0002194C:
	r18 = r11
	// succ:  l00021958
l00021958:
	p0 = r18 == 0<32>
	r11 = r9
	r0 = Mem0[r0 + 32<i32>:int8]
	branch r0 == 2<32> l0002197C
	// succ:  l0002196C l0002197C
l0002196C:
	r17 = r8
	r28 = r12
	r1 = r13
	// succ:  l00021978_thunk_fn00021A1C
l00021978_thunk_fn00021A1C:
	call fn00021A1C (retsize: 0;)
	return
	// succ:  sum_f_execute_exit
l0002197C:
	r11 = r9 + 0<32>
	r17_r16 = r8_r12
	r0 = r13
	branch p0 l000219D8
	// succ:  l00021994 l000219D8
l00021994:
	r0 = r13 + 0<32>
	r17_r16 = r8_r12
	__loop(0<i32>, 0x00021998<p32>, r18)
	r1 = r1 + 4<i32>
	r18 = Mem0[r1:word32]
	r18 = r10 + (0x7F<32> - r18)
	branch r18 > 3<32> l000219B4
	// succ:  l000219A8 l000219B4
l000219A8:
	r17 = 0<32>
	r0 = 0<32>
	r16 = 0<32>
	goto l000219D0
	// succ:  l000219D0
l000219B4:
	p0 = r10 == 0<32>
	branch p0 l000219D0
	// succ:  l000219BC l000219D0
l000219BC:
	r0 = 0<32>
	p0 = r10 == 1<32>
	branch p0 l000219D0
	// succ:  l000219C4 l000219D0
l000219C4:
	r11 = 0<32>
	p0 = r10 == 2<32>
	branch p0 l000219D0
	// succ:  l000219CC l000219D0
l000219CC:
	r17 = 0<32>
	p0 = r18 == 3<32>
	r16 = -1<i32>
	// succ:  l000219D0
l000219D0:
	// succ:  l000219D8
l000219D8:
	p1 = r16 == 0<32>
	p2 = r17 == 0<32>
	p0 = r11 == 0<32>
	p3 = r0 == 0<32>
	// succ:  l000219D8_thunk_fn000219E8
l000219D8_thunk_fn000219E8:
	call fn000219E8 (retsize: 0;)
	return
	// succ:  sum_f_execute_exit
sum_f_execute_exit:


// fn000219E8
// Return size: 0
define fn000219E8
fn000219E8_entry:
	r29 = fp
	// succ:  l000219E8
l000219E8:
	p1 = p1 | p2
	r1 = p1 ? 1<32> : r16
	p2 = p1 | p0
	r1 = r17 + 0<32>
	r10 = p1 ? 1<32> : r16
	branch p3 l000219FC_thunk_fn00021A1C
	goto l000219FC_thunk_fn00021A0C
	// succ:  l000219FC_thunk_fn00021A0C l000219FC_thunk_fn00021A1C
l000219E8:
	p1 = p1 | p2
	r1 = p1 ? 1<32> : r16
	p2 = p1 | p0
	r1 = r17 + 0<32>
	r10 = p1 ? 1<32> : r16
	branch p3 l00021A1C
	goto l000219FC_thunk_fn00021A0C
	// succ:  l000219FC_thunk_fn00021A0C l000219FC_thunk_fn00021A0C
l000219FC_thunk_fn00021A0C:
	call fn00021A0C (retsize: 0;)
	return
	// succ:  fn000219E8_exit
l000219FC_thunk_fn00021A0C:
	call fn00021A0C (retsize: 0;)
	return
	// succ:  fn000219E8_exit
l000219FC_thunk_fn00021A0C:
	call fn00021A0C (retsize: 0;)
	return
	// succ:  fn000219E8_exit
l000219FC_thunk_fn00021A1C:
	call fn00021A1C (retsize: 0;)
	return
	// succ:  fn000219E8_exit
fn000219E8_exit:


// fn00021A0C
// Return size: 0
define fn00021A0C
fn00021A0C_entry:
	r29 = fp
	// succ:  l00021A0C
l00021A0C:
	r10 = r1 + 0<32>
	r1 = r11 + 0<32>
	r17 = p2 ? 1<32> : r16
	r28 = r17
	r17 = r10
	r10 = r1
	r1 = r0
	// succ:  l00021A1C_thunk_fn00021A1C
l00021A1C_thunk_fn00021A1C:
	call fn00021A1C (retsize: 0;)
	return
	// succ:  fn00021A0C_exit
fn00021A0C_exit:


// fn00021A1C
// Return size: 0
define fn00021A1C
fn00021A1C_entry:
	r29 = fp
	goto l00021A1C_thunk_fn00021A0C
	// succ:  l00021A1C_thunk_fn00021A0C
l00021A1C:
	r0 = r13 * r9
	p0 = r12 > 0<32>
	r11 = Mem0[r14 + 20<i32>:word32]
	r0 = r0 * r8
	r0 = r0 * r12
	r0 = r0 << 2<32>
	branch r0 >u r11 l00021A58
	goto l00021A3C
	// succ:  l00021A3C l00021A58
l00021A1C_thunk_fn00021A0C:
	call fn00021A0C (retsize: 0;)
	return
	// succ:  fn00021A1C_exit
l00021A3C:
	r0 = 0x00021A52<p32>
	r1 = 0xC6<32>
	r3 = 0x0002A6ED<p32>
	call errlog_function (retsize: 0;)
	goto l00021BB4_in_gemaccb_asm
	// succ:  l00021BB4_in_gemaccb_asm
l00021A58:
	r0 = 0<32>
	Mem0[r14 + 12<i32>:word32] = r1
	Mem0[r14 + 24<i32>:word32] = r0
	r0 = 0<32>
	Mem0[r14 + 8<i32>:word32] = r10
	Mem0[r14 + 4<i32>:word32] = r17
	branch p0 l00021BB4_in_gemaccb_asm
	// succ:  l00021A80 l00021BB4_in_gemaccb_asm
l00021A80:
	r1 = 0<32>
	Mem0[r14:word32] = r28
	p0 = r12 == 1<32>
	p3 = r9 == 1<32>
	p1 = r13 == 1<32>
	p2 = r8 == 1<32>
	// succ:  l00021A80_thunk_fn00021A90
l00021A80_thunk_fn00021A90:
	call fn00021A90 (retsize: 0;)
	return
	// succ:  fn00021A1C_exit
l00021BB4_in_gemaccb_asm:
	r17_r16 = Mem0[r29 + 40<i32>:word64]
	r19_r18 = Mem0[r29 + 32<i32>:word64]
	r21_r20 = Mem0[r29 + 24<i32>:word64]
	r23_r22 = Mem0[r29 + 16<i32>:word64]
	r25_r24 = Mem0[r29 + 8<i32>:word64]
	r27_r26 = Mem0[r29:word64]
	v21 = r30
	r31 = Mem0[v21 + 4<i32>:word32]
	r30 = Mem0[v21:word32]
	r29 = v21 + 8<i32>
	return
	// succ:  fn00021A1C_exit
l00021BB4_in_gemaccb_asm:
	r17_r16 = Mem0[r29 + 40<i32>:word64]
	r19_r18 = Mem0[r29 + 32<i32>:word64]
	r21_r20 = Mem0[r29 + 24<i32>:word64]
	r23_r22 = Mem0[r29 + 16<i32>:word64]
	r25_r24 = Mem0[r29 + 8<i32>:word64]
	r27_r26 = Mem0[r29:word64]
	v29 = r30
	r31 = Mem0[v29 + 4<i32>:word32]
	r30 = Mem0[v29:word32]
	r29 = v29 + 8<i32>
	return
	// succ:  fn00021A1C_exit
fn00021A1C_exit:


// fn00021A90
// Return size: 0
define fn00021A90
fn00021A90_entry:
	r29 = fp
	// succ:  l00021A90
l00021A90:
	r2 = p0 ? r15 : 1<32>
	r28 = p3 ? r4 : 1<32>
	r14 = p1 ? r3 : 1<32>
	r15 = p2 ? r5 : 1<32>
	goto l00021A9C_thunk_fn00021AA0
	// succ:  l00021A9C_thunk_fn00021AA0
l00021A90:
	r2 = p0 ? r15 : 1<32>
	r28 = p3 ? r4 : 1<32>
	r14 = p1 ? r3 : 1<32>
	r15 = p2 ? r5 : 1<32>
	goto l00021A9C_thunk_fn00021AA0
	// succ:  l00021A9C_thunk_fn00021AA0
l00021A9C_thunk_fn00021AA0:
	call fn00021AA0 (retsize: 0;)
	return
	// succ:  fn00021A90_exit
l00021A9C_thunk_fn00021AA0:
	call fn00021AA0 (retsize: 0;)
	return
	// succ:  fn00021A90_exit
fn00021A90_exit:


// fn00021AA0
// Return size: 0
define fn00021AA0
fn00021AA0_entry:
	r29 = fp
	// succ:  l00021AA0
l00021AA0:
	branch p0 l00021BA8
fn00021AA0_exit:


// sum_f_check
// Return size: 0
define sum_f_check
sum_f_check_entry:
	r29 = fp
	// succ:  l00021BD0
l00021BD0:
	r4 = 0x0002A693<p32>
	Mem0[r29 - 16<i32>:word64] = r17_r16
	v7 = r29 - 8<i32>
	Mem0[v7:word32] = r30
	Mem0[v7 + 4<i32>:word32] = r31
	r30 = v7
	r29 = v7 - 16<i32>
	r1 = 0x37<32>
	r16 = r1
	r17 = r0
	call logmsg_function (retsize: 0;)
	r2 = r16
	Mem0[r29:word32] = r17
	r2 = Mem0[r17 + 16<i32>:word32]
	r3 = 4<32>
	branch r3 >u r2 l00021C1C
	// succ:  l00021BFC l00021C1C
l00021BFC:
	r0 = 0x00021BFC<p32>
	r1 = 0x38<32>
	// succ:  l00021C04
l00021C04:
	r3 = 0x0002A69F<p32>
	// succ:  l00021C0C
l00021C0C:
	call errlog_function (retsize: 0;)
	r2 = r16
	r0 = 0xFFFFFFFF<32>
	r17_r16 = Mem0[r29 + 8<i32>:word64]
	v16 = r30
	r31 = Mem0[v16 + 4<i32>:word32]
	r30 = Mem0[v16:word32]
	r29 = v16 + 8<i32>
	return
	// succ:  sum_f_check_exit
l00021C1C:
	p0 = r2 == 0<32>
	branch p0 l00021C30
	// succ:  l00021C24 l00021C30
l00021C24:
	r1 = 0x39<32>
	r0 = 0x0002A678<p32>
	goto l00021C04
	// succ:  l00021C04
l00021C30:
	r1 = 0x3A<32>
	r2 = Mem0[r17 + 20<i32>:word32]
	branch r2 == 1<32> l00021C50
	// succ:  l00021C40 l00021C50
l00021C40:
	r0 = 0x00021C7C<p32>
	r3 = 0x0002A6AE<p32>
	goto l00021C0C
	// succ:  l00021C0C
l00021C50:
	r4 = 0x0002A6BE<p32>
	r1 = 0x3B<32>
	r2 = r16
	call logmsg_function (retsize: 0;)
	Mem0[r29:word32] = r17
	r0 = 0<32>
	r17_r16 = Mem0[r29 + 8<i32>:word64]
	v18 = r30
	r31 = Mem0[v18 + 4<i32>:word32]
	r30 = Mem0[v18:word32]
	r29 = v18 + 8<i32>
	return
	// succ:  sum_f_check_exit
sum_f_check_exit:


// logmsg_function
// Return size: 0
define logmsg_function
logmsg_function_entry:
	r29 = fp
	// succ:  l00021C6C
l00021C6C:
	r3 = 2<32>
	v5 = r29 - 8<i32>
	Mem0[v5:word32] = r30
	Mem0[v5 + 4<i32>:word32] = r31
	r30 = v5
	r29 = v5 - 8<i32>
	r5 = Mem0[r2 + 16<i32>:word32]
	branch r3 >u r5 l00021C90
	// succ:  l00021C7C l00021C90
l00021C7C:
	r0 = 0x00021C7C<p32>
	r3 = 2<32>
	r5 = r29 + 0x10<32>
	call logv (retsize: 0;)
	r6 = r29 + 0x10<32>
	Mem0[r29 + 1<i32>:byte] = r6
	// succ:  l00021C84_thunk_errlog_function
l00021C84_thunk_errlog_function:
	call errlog_function (retsize: 0;)
	return
	// succ:  logmsg_function_exit
l00021C90:
	v13 = r30
	r31 = Mem0[v13 + 4<i32>:word32]
	r30 = Mem0[v13:word32]
	r29 = v13 + 8<i32>
	return
	// succ:  logmsg_function_exit
logmsg_function_exit:


// errlog_function
// Return size: 0
define errlog_function
errlog_function_entry:
	r29 = fp
	// succ:  l00021C94
l00021C94:
	r3 = 0<32>
	r4 = r3
	v6 = r29 - 8<i32>
	Mem0[v6:word32] = r30
	Mem0[v6 + 4<i32>:word32] = r31
	r30 = v6
	r29 = v6 - 8<i32>
	call logv (retsize: 0;)
	r5 = r29 + 0x10<32>
	r6 = r29 + 0x10<32>
	Mem0[r29 + 1<i32>:byte] = r6
	r0 = Mem0[r0:word32]
	r0 = Mem0[r0:word32]
	r0 = Mem0[r0:word32]
	r0 = Mem0[r0:word32]
	r0 = Mem0[r0:word32]
	r0 = Mem0[r0:word32]
	r0 = Mem0[r0:word32]
	r0 = Mem0[r0:word32]
	// succ:  l00021CBC_thunk_gemacca_asm
l00021CBC_thunk_gemacca_asm:
	call gemacca_asm (retsize: 0;)
	return
	// succ:  errlog_function_exit
errlog_function_exit:


// gemacca_asm
// Return size: 0
define gemacca_asm
gemacca_asm_entry:
	r29 = fp
	// succ:  l00021CC0
l00021CC0:
	r6 = r2 >>u 0x10<32>
	r1 = r1 >>u 1<32>
	r8 = CONVERT(SLICE(r2, uint16, 0), uint16, uint32)
	v8 = r29 - 8<i32>
	Mem0[v8:word32] = r30
	Mem0[v8 + 4<i32>:word32] = r31
	r30 = v8
	r29 = v8 - 32<i32>
	__loop(1<i32>, 0x00021D20<p32>, r1)
	r7 = r2 >>u 0x14<32>
	Mem0[r29:word64] = r17_r16
	Mem0[r29 + 8<i32>:word64] = r19_r18
	r13 = r0 + (r8 << 1<32>)
	r9 = r8 << 1<32>
	r10 = 0x20<32> - r8
	Mem0[r29 + 16<i32>:word64] = r21_r20
	M1 = r8
	r6 = r9 - r6
	r11 = 0x10<32> - r8
	p2 = r0 == r0
	M0 = r11
	r13 = r13 + (r8 << 1<32>)
	r12 = r13
	__loop(0<i32>, 0x00021D40<p32>, r7)
	r17_r16 = 0<64>
	r19_r18 = 0<64>
	r15_r14 = Mem0[r0 + 8<i32>:word64]
	r0 = r0 + m0
	r21_r20 = Mem0[r0:word64]
	r17_r16 = r17_r16 + __vraddub<word64,word64>(r15_r14, r21_r20)
	p2 = !p2
	r0 = r0 + m0
	r21_r20 = Mem0[r0:word64]
	r15_r14 = Mem0[r0 + 8<i32>:word64]
	r19_r18 = r19_r18 + __vraddub<word64,word64>(r15_r14, r21_r20)
	r12 = r12 + r8
	r12 = r12 + r10
	r16 = r17 + r16
	r17 = r19 + r18
	r0 = r0 + r6
	r16 = r16 * r4
	r17 = r17 * r4
	r19_r18 = Mem0[r3:word64]
	r12 = r13
	r16 = r16 + r18
	r17 = r17 + r19
	r13 = r13 + (r8 << 1<32>)
	p2 = p2 | !p2
	Mem0[r3:word64] = r17_r16
	r3 = r3 + 8<i32>
	r17_r16 = Mem0[r29:word64]
	r19_r18 = Mem0[r29 + 8<i32>:word64]
	r21_r20 = Mem0[r29 + 16<i32>:word64]
	v32 = r30
	r31 = Mem0[v32 + 4<i32>:word32]
	r30 = Mem0[v32:word32]
	r29 = v32 + 8<i32>
	return
	// succ:  gemacca_asm_exit
gemacca_asm_exit:


// gemaccb_asm
// Return size: 0
define gemaccb_asm
gemaccb_asm_entry:
	r29 = fp
	goto l00021DA0
	// succ:  l00021DA0
l000219E0:
	p0 = r11 == 0<32>
	p3 = r0 == 0<32>
	// succ:  l000219E0_thunk_fn000219E8
l000219E0_thunk_fn000219E8:
	call fn000219E8 (retsize: 0;)
	return
	// succ:  gemaccb_asm_exit
l00021DA0:
	r2 = r2 >>u 2<32>
	p0 = r3 == -1<i32>
	branch p0 l000219E0
	// succ:  l00021DB0 l000219E0
l00021DB0:
	r4 = 0x1010101<32>
	p0 = r3 == 0<32>
	__loop(0<i32>, 0x00021DC0<p32>, r2)
	branch p0 l00021DC8
	// succ:  l00021DC0 l00021DC8 l00021DB0_thunk_fn00021F70
l00021DB0_thunk_fn00021F70:
	call fn00021F70 (retsize: 0;)
	return
	// succ:  gemaccb_asm_exit
l00021DC0:
	r5 = 0x10<32>
	p0 = r0 == r0
	branch p0 l00021DB0_thunk_fn00021F70
l00021DC8:
	r0 = r1
	// succ:  l00021E0C_in_gemaccb_asm
l00021E0C_in_gemaccb_asm:
	return
	// succ:  gemaccb_asm_exit
gemaccb_asm_exit:


// l2pref
// Return size: 0
define l2pref
l2pref_entry:
	r29 = fp
	// succ:  l00021E00
l00021E00:
	r3 = CONVERT(SLICE(r3, uint16, 0), uint16, uint32)
	r2 = SEQ(SLICE(r2, word16, 0), SLICE(r1, word16, 0))
	__l2fetch<word32,word64>(r0, r3_r2)
	// succ:  l00021E0C
l00021E0C:
	return
	// succ:  l2pref_exit
l2pref_exit:


// gemaddvvm_asm
// Return size: 0
define gemaddvvm_asm
gemaddvvm_asm_entry:
	r29 = fp
	goto l00021E20
	// succ:  l00021E20
l00021A88:
	p1 = r13 == 1<32>
	p2 = r8 == 1<32>
	// succ:  l00021A88_thunk_fn00021A90
l00021A88_thunk_fn00021A90:
	call fn00021A90 (retsize: 0;)
	return
	// succ:  gemaddvvm_asm_exit
l00021AA4:
	r10 = 0<32>
	p0 = r8 > 0<32>
	// succ:  l00021AAC l00021BA8
l00021AAC:
	r10 = 0<32>
	p0 = r8 > 0<32>
	branch p0 l00021BA0
l00021AB0:
	r11 = 0<32>
	p0 = r9 > 0<32>
	// succ:  l00021AB8 l00021BA0
l00021AB8:
	r11 = 0<32>
	p0 = r9 > 0<32>
	branch p0 l00021B98
	// succ:  l00021AC4 l00021B98
l00021AC4:
	r17_r16 = SEQ(0<32>, r7)
	p0 = r13 > 0<32>
	p0 = r2 > 0<32>
	branch p0 l00021B84
	// succ:  l00021ACC l00021B84
l00021ACC:
	r18 = r1
	r19_r18 = SEQ(0<32>, r1)
	// succ:  l00021AD0
l00021AD0:
	branch p0 l00021B7C
l00021AD4:
	r22 = r19 + r0
	p0 = r15 > 0<32>
	// succ:  l00021ADC l00021B7C
l00021ADC:
	r22 = r19 + r0
	p0 = r15 > 0<32>
	r21_r20 = SEQ(r10, 0<32>)
	r21 = r21 + r22 * r5
	// succ:  l00021AE4
l00021AE4:
	branch p0 l00021B74
	// succ:  l00021AF0 l00021B74
l00021AF0:
	r24 = r21 + r20
	p0 = r28 > 0<32>
	__loop(1<i32>, 0x00021AFC<p32>, r28)
	r23_r22 = SEQ(r11, 0<32>)
	r23 = r23 + r24 * r4
	branch p0 l00021B68
	// succ:  l00021B0C l00021B68
l00021B0C:
	r25 = r23 + r22
	r24 = r17
	p0 = r14 > 0<32>
	r26 = r14 + 0xFFFFFFFF<32>
	p0 = r14 >u 1<32>
	r24 = r24 + r25 * r3
	r27 = r26 + 0xFFFFFFFF<32>
	r25 = r6 + (r24 << 2<32>)
	r24 = r25 + 4<32>
	branch p0 l00021B34
	// succ:  l00021B2C l00021B34
l00021B2C:
	r25 = Mem0[r25:word32]
	goto l00021B64
	// succ:  l00021B64
l00021B34:
	__loop(0<i32>, 0x00021B48<p32>, r27)
	p0 = r26 >u 1<32>
	r26 = r24 + 4<32>
	r24 = Mem0[r24:word32]
	branch p0 l00021B60
	// succ:  l00021B48 l00021B60
l00021B48:
	r18 = r18 + r25
	r27 = r24
	r26 = r26 + 4<32>
	r24 = Mem0[r26:word32]
	r25 = r27
	// succ:  l00021B60
l00021B60:
	r18 = r18 + r25
	// succ:  l00021B64
l00021B64:
	r18 = r18 + r24
	// succ:  l00021B68
l00021B68:
	r22 = r22 + 1<32>
	// succ:  l00021B74
l00021B74:
	r20 = r20 + 1<32>
	branch r20 == r15 l00021AE4
	goto l00021B80
	// succ:  l00021B80 l00021AE4
l00021B7C:
	r19 = r19 + 1<32>
	branch r19 == r2 l00021AD0
	goto l00021B88
	// succ:  l00021B88 l00021AD0
l00021B80:
	branch r19 == r2 l00021AD4
	goto l00021B88
	// succ:  l00021B88 l00021AD4
l00021B84:
	r16 = r16 + 4<32>
	r17 = r17
	Mem0[r16:word32] = r18
	goto l00021B8C
	// succ:  l00021B8C
l00021B88:
	r17 = r17
	Mem0[r16:word32] = r18
	// succ:  l00021B8C
l00021B8C:
	branch p0 l00021AC4
	// succ:  l00021B94 l00021AC4
l00021B94:
	p0 = r17 == r13
	r7 = r7 + (r13 << 2<32>)
	// succ:  l00021B98
l00021B98:
	r11 = r11 + 1<32>
	branch r11 == r9 l00021AB8
	goto l00021BA4
	// succ:  l00021BA4 l00021AB8
l00021BA0:
	r10 = r10 + 1<32>
	branch r10 == r8 l00021AAC
	goto l00021BAC
	// succ:  l00021BAC l00021AAC
l00021BA4:
	branch r10 == r8 l00021AB0
	goto l00021BAC
	// succ:  l00021BAC l00021AB0
l00021BA8:
	r0 = r0 + 1<32>
	branch r0 == r12 l00021AA0
	goto l00021BB4
	// succ:  l00021BB4 l00021BA8_thunk_fn00021AA0
l00021BA8_thunk_fn00021AA0:
	call fn00021AA0 (retsize: 0;)
	return
	// succ:  gemaddvvm_asm_exit
l00021BAC:
	branch r0 == r12 l00021AA4
	// succ:  l00021BB4 l00021AA4
l00021BB4:
	r17_r16 = Mem0[r29 + 40<i32>:word64]
	r19_r18 = Mem0[r29 + 32<i32>:word64]
	r21_r20 = Mem0[r29 + 24<i32>:word64]
	r23_r22 = Mem0[r29 + 16<i32>:word64]
	r25_r24 = Mem0[r29 + 8<i32>:word64]
	r27_r26 = Mem0[r29:word64]
	v45 = r30
	r31 = Mem0[v45 + 4<i32>:word32]
	r30 = Mem0[v45:word32]
	r29 = v45 + 8<i32>
	return
	// succ:  gemaddvvm_asm_exit
l00021E20:
	r3 = r3 >>u 1<32>
	r4 = r4 << 2<32>
	r1 = 0<32>
	r0 = r0
	M0 = r4
	r3 = r3 + 0xFFFFFFFF<32>
	r5 = Mem0[r0:word16]
	r1 = Mem0[r0 + 1<i32>:byte]
	__dcfetch(r0, 0x20<32>)
	r8 = r2
	r0 = r0 + 8<i32>
	r11_r10 = Mem0[r0:word64]
	r5 = 0<32>
	r0 = r0
	// succ:  l00021E48
l00021E48:
	p0 = r10 == -1<i32>
	branch p0 l00021A88
	// succ:  l00021E58 l00021A88 l00021E48
l00021E58:
	p0 = r1 == r6
	branch p0 l00021E48
gemaddvvm_asm_exit:


// gemmacbbw_asm
// Return size: 0
define gemmacbbw_asm
gemmacbbw_asm_entry:
	r29 = fp
	// succ:  l00021F20
l00021F20:
	r4 = r4 << 2<32>
	v5 = r29 - 8<i32>
	Mem0[v5:word32] = r30
	Mem0[v5 + 4<i32>:word32] = r31
	r30 = v5
	r29 = v5 - 56<i32>
	r28 = r5 >>u 0x10<32>
	r5 = CONVERT(SLICE(r5, uint16, 0), uint16, uint32)
	Mem0[r29:word64] = r17_r16
	Mem0[r29 + 48<i32>:word32] = r28
	M1 = r4
	r3 = r3 >>u 3<32>
	Mem0[r29 + 16<i32>:word64] = r21_r20
	Mem0[r29 + 24<i32>:word64] = r23_r22
	M0 = r5
	Mem0[r29 + 8<i32>:word64] = r19_r18
	__loop(1<i32>, 0x00021FE0<p32>, r3)
	Mem0[r29 + 32<i32>:word64] = r25_r24
	r8 = r5 << 3<32>
	r3 = r2
	Mem0[r29 + 40<i32>:word64] = r27_r26
	r6 = r28 >>u 4<32>
	r8 = r8 - r5
	r13 = r0
	r2 = 0x30<32>
	r0 = r0 + r0
	// succ:  l00021F64_thunk_fn00021F70
l00021F64_thunk_fn00021F70:
	call fn00021F70 (retsize: 0;)
	return
	// succ:  gemmacbbw_asm_exit
gemmacbbw_asm_exit:


// fn00021F70
// Return size: 0
define fn00021F70
fn00021F70_entry:
	r29 = fp
	// succ:  l00021F70
l00021F70:
	r2 = 0x30<32>
	r0 = r0 + r0
	r9 = r1
	r4 = 0x10<32> - r8
	r2 = 0x30<32>
	r0 = r0 + r0
	r8 = r8 + (r5 - r28)
	r7 = r13 + 0x30<32>
	r5 = r5 + r5
	r2 = 0x30<32>
	r0 = r0 + r0
	r14 = r5 >>u 1<32>
	r10 = r13 + r5
	r9 = Mem0[r0:word16]
	r2 = Mem0[r0 + 2<i32>:byte]
	__dcfetch(r7, 0<32>)
	r13 = r13 + (r5 << 2<32>)
	r7 = r7 + r14
	r9 = 0<32>
	r3_r2 = SEQ(r7, 0<32>)
	r15 = 0x20<32> - r14
	r23_r22 = Mem0[r0 + 8<i32>:word64]
	r2 = 0x30<32>
	r0 = r0 + r0
	r0 = r0 + m0
	r17_r16 = Mem0[r0:word64]
	r2 = 0x30<32>
	r0 = r0 + r0
	r11 = r10 + r5
	r6 = r6 + 0xFFFFFFFF<32>
	r21_r20 = Mem0[r0 + 8<i32>:word64]
	r2 = 0x30<32>
	r0 = r0 + r0
	__loop(0<i32>, 0x00021FE0<p32>, r6)
	r12 = r11 + r5
	r0 = r0 + m0
	r19_r18 = Mem0[r0:word64]
	r2 = 0x30<32>
	r0 = r0 + r0
	p0 = r6 >u 0xA<32>
	branch p0 l00021FE0_thunk_gemmpybbw_asm
	goto l00021FE0_thunk_fn00021FF0
	// succ:  l00021FE0_thunk_fn00021FF0 l00021FE0_thunk_gemmpybbw_asm
l00021F70:
	r9 = r1
	r4 = 0x10<32> - r8
	r2 = 0x30<32>
	r0 = r0 + r0
	r8 = r8 + (r5 - r28)
	r7 = r13 + 0x30<32>
	r5 = r5 + r5
	r2 = 0x30<32>
	r0 = r0 + r0
	r14 = r5 >>u 1<32>
	r10 = r13 + r5
	r9 = Mem0[r0:word16]
	r2 = Mem0[r0 + 2<i32>:byte]
	__dcfetch(r7, 0<32>)
	r13 = r13 + (r5 << 2<32>)
	r7 = r7 + r14
	r9 = 0<32>
	r3_r2 = SEQ(r7, 0<32>)
	r15 = 0x20<32> - r14
	r23_r22 = Mem0[r0 + 8<i32>:word64]
	r2 = 0x30<32>
	r0 = r0 + r0
	r0 = r0 + m0
	r17_r16 = Mem0[r0:word64]
	r2 = 0x30<32>
	r0 = r0 + r0
	r11 = r10 + r5
	r6 = r6 + 0xFFFFFFFF<32>
	r21_r20 = Mem0[r0 + 8<i32>:word64]
	r2 = 0x30<32>
	r0 = r0 + r0
	__loop(0<i32>, 0x00021FE0<p32>, r6)
	r12 = r11 + r5
	r0 = r0 + m0
	r19_r18 = Mem0[r0:word64]
	r2 = 0x30<32>
	r0 = r0 + r0
	p0 = r6 >u 0xA<32>
	branch p0 l00021FE0_thunk_gemmpybbw_asm
	// succ:  l00021FDC_thunk_fn00021FF0 l00021FE0_thunk_gemmpybbw_asm l00021FE0_thunk_gemmpybbw_asm
l00021FDC_thunk_fn00021FF0:
	call fn00021FF0 (retsize: 0;)
	return
	// succ:  fn00021F70_exit
l00021FE0_thunk_fn00021FF0:
	call fn00021FF0 (retsize: 0;)
	return
	// succ:  fn00021F70_exit
l00021FE0_thunk_gemmpybbw_asm:
	call gemmpybbw_asm (retsize: 0;)
	return
	// succ:  fn00021F70_exit
l00021FE0_thunk_gemmpybbw_asm:
	call gemmpybbw_asm (retsize: 0;)
	return
	// succ:  fn00021F70_exit
l00021FE0_thunk_gemmpybbw_asm:
	call gemmpybbw_asm (retsize: 0;)
	return
	// succ:  fn00021F70_exit
fn00021F70_exit:


// fn00021FF0
// Return size: 0
define fn00021FF0
fn00021FF0_entry:
	r29 = fp
	// succ:  l00021FF0
l00021FF0:
	p0 = r4 >u 0xA<32>
	branch p0 l00021FE0_thunk_gemmpybbw_asm
fn00021FF0_exit:


// gemmpybbw_asm
// Return size: 0
define gemmpybbw_asm
gemmpybbw_asm_entry:
	r29 = fp
	// succ:  l000222E0
l000222E0:
	v4 = r29 - 8<i32>
	Mem0[v4:word32] = r30
	Mem0[v4 + 4<i32>:word32] = r31
	r30 = v4
	r29 = v4 - 64<i32>
	r28 = r5 >>u 0x10<32>
	r5 = CONVERT(SLICE(r5, uint16, 0), uint16, uint32)
	p0 = r12 == r12
	branch p0 l000222E4_thunk_fn000224BC
	goto l000222F4
	// succ:  l000222F4 l000222E4_thunk_fn000224BC
l000222E4_thunk_fn000224BC:
	call fn000224BC (retsize: 0;)
	return
	// succ:  gemmpybbw_asm_exit
l000222F4:
	Mem0[r29 + 48<i32>:word32] = r28
	M0 = r5
	r4 = r4 << 2<32>
	r9 = r28 >>u 4<32>
	r8 = r5 << 3<32>
	Mem0[r29:word64] = r17_r16
	r3 = r3 >>u 3<32>
	r8 = r8 - r5
	r13 = r0
	Mem0[r29 + 8<i32>:word64] = r19_r18
	M1 = r4
	r4 = 0x10<32> - r8
	r9 = r9 + 0xFFFFFFFF<32>
	r8 = r8 + (r5 - r28)
	r7 = r13 + 0x50<32>
	r5 = r5 + r5
	Mem0[r29 + 16<i32>:word64] = r21_r20
	__loop(1<i32>, 0x000223A0<p32>, r3)
	r10 = r13 + r5
	Mem0[r29 + 24<i32>:word64] = r23_r22
	Mem0[r29 + 32<i32>:word64] = r25_r24
	__loop(0<i32>, 0x000223A0<p32>, r9)
	r6 = r1
	r11 = r10 + r5
	Mem0[r29 + 40<i32>:word64] = r27_r26
	r14 = r5 >>u 1<32>
	r12 = r11 + r5
	r6 = Mem0[r0:word16]
	r2 = Mem0[r0 + 2<i32>:byte]
	__dcfetch(r7, 0<32>)
	r13 = r13 + (r5 << 2<32>)
	r7 = r7 + r14
	r15 = 0x20<32> - r14
	r6 = 0<32>
	r3_r2 = SEQ(r7, 0<32>)
	r12 = r12
	// succ:  l00022370_thunk_fn00022530
l00022370_thunk_fn00022530:
	call fn00022530 (retsize: 0;)
	return
	// succ:  gemmpybbw_asm_exit
gemmpybbw_asm_exit:


// fn00022408
// Return size: 0
define fn00022408
fn00022408_entry:
	r29 = fp
	// succ:  l00022408
l00022408:
	r19_r18 = Mem0[r0 + 8<i32>:word64]
	r0 = r0 + m0
	r21_r20 = Mem0[r0:word64]
	goto l00022408_thunk_fn00022410
	// succ:  l00022408_thunk_fn00022410
l00022408:
	call fn00022410 (retsize: 0;)
	return
	// succ:  l00022408_thunk_fn00022410 l00022704 fn00022408_exit
l00022408_thunk_fn00022410:
	call fn00022410 (retsize: 0;)
	return
	// succ:  fn00022408_exit
l00022408_thunk_fn00022410:
	call fn00022410 (retsize: 0;)
	return
	// succ:  fn00022408_exit
l00022704:
	r16 = r17 + r16
	r17 = r19 + r18
	r0 = r0 + r6
	r16 = r16 * r4
	r17 = r17 * r4
	r12 = r13
	r16 = r16 + r5
	r17 = r17 + r5
	r13 = r13 + (r8 << 1<32>)
	p2 = r0 == r0
	Mem0[r3:word64] = r17_r16
	r3 = r3 + 8<i32>
	// succ:  l0002272C
l0002272C:
	r17_r16 = Mem0[r29:word64]
	r19_r18 = Mem0[r29 + 8<i32>:word64]
	r21_r20 = Mem0[r29 + 16<i32>:word64]
	v22 = r30
	r31 = Mem0[v22 + 4<i32>:word32]
	r30 = Mem0[v22:word32]
	r29 = v22 + 8<i32>
	return
	// succ:  fn00022408_exit
fn00022408_exit:


// fn00022410
// Return size: 0
define fn00022410
fn00022410_entry:
	r29 = fp
	// succ:  l00022410
l00022410:
	p0 = r0 >u 0xA<32>
	branch p0 l00022704
fn00022410_exit:


// fn00022464
// Return size: 0
define fn00022464
fn00022464_entry:
	r29 = fp
	// succ:  l00022464
l00022464:
	r6 = Mem0[r0:word16]
	r2 = Mem0[r0 + 2<i32>:byte]
	__dcfetch(r7, 0<32>)
	p0 = r7 >u 9<32>
	branch p0 l00022778
	goto l0002247C
	// succ:  l0002247C l00022778
l00022464:
l0002247C:
	p0 = r11 >u 9<32>
	branch p0 l00022778
l00022778:
	return
	// succ:  fn00022464_exit
fn00022464_exit:


// fn000224BC
// Return size: 0
define fn000224BC
fn000224BC_entry:
	r29 = fp
	// succ:  l000224BC
l000224BC:
	p0 = r0 >u 8<32>
	branch p0 l000224BC_thunk_fn000227BC
	// succ:  l000224CC l000224BC_thunk_fn000227BC l000224BC_thunk_fn000227BC
l000224BC:
l000224BC_thunk_fn000227BC:
	call fn000227BC (retsize: 0;)
	return
	// succ:  fn000224BC_exit
l000224BC_thunk_fn000227BC:
	call fn000227BC (retsize: 0;)
	return
	// succ:  fn000224BC_exit
l000224CC:
	p0 = r2 >u 8<32>
	branch p0 l000227BC
fn000224BC_exit:


// fn000224D8
// Return size: 0
define fn000224D8
fn000224D8_entry:
	r29 = fp
	// succ:  l000224D8
l000224D8:
	r0 = r0 + m0
	r19_r18 = Mem0[r0:word64]
	p0 = r4 >u 8<32>
	branch p0 l000227E0
	goto l000224E8
	// succ:  l000224E8 l000224DC_thunk_fn00022FF8
l000224DC_thunk_fn00022FF8:
	call fn00022FF8 (retsize: 0;)
	return
	// succ:  fn000224D8_exit
l000224E8:
	p0 = r2 >u 8<32>
	branch p0 l000227E0
fn000224D8_exit:


// fn00022530
// Return size: 0
define fn00022530
fn00022530_entry:
	r29 = fp
	// succ:  l00022530
l00022530:
	r0 = r0 + m0
	r23_r22 = Mem0[r0:word64]
	p0 = r2 >u 0xA<32>
	branch p0 l0002283C_in_fn00022530
	goto l00022534_thunk_fn00022544
	// succ:  l00022534_thunk_fn00022544 l0002283C_in_fn00022530
l00022530:
	p0 = r2 >u 0xA<32>
	branch p0 l0002283C
	// succ:  l00022530_thunk_fn00022544 l0002283C
l00022530_thunk_fn00022544:
	call fn00022544 (retsize: 0;)
	return
	// succ:  fn00022530_exit
l00022534_thunk_fn00022544:
	call fn00022544 (retsize: 0;)
	return
	// succ:  fn00022530_exit
l0002283C:
	return
	// succ:  fn00022530_exit
l0002283C_in_fn00022530:
	return
	// succ:  fn00022530_exit
fn00022530_exit:


// fn00022544
// Return size: 0
define fn00022544
fn00022544_entry:
	r29 = fp
	// succ:  l00022544
l00022544:
	p0 = r0 >u 0xA<32>
	branch p0 l0002283C
fn00022544_exit:


// fn00022548
// Return size: 0
define fn00022548
fn00022548_entry:
	r29 = fp
	// succ:  l00022548
l00022548:
	p0 = r1 >u 0xB<32>
	branch p0 l00022850
	goto l00022554
	// succ:  l00022554 l00022850
l00022548:
l00022554:
	r0 = r0 + r4
	r2 = 0x32<32>
	r0 = r0 + r0
	p0 = r6 >u 8<32>
	branch p0 l00022554_thunk_fn00022860
	// succ:  l00022554_thunk_fn00022564 l00022554_thunk_fn00022860
l00022554_thunk_fn00022564:
	call fn00022564 (retsize: 0;)
	return
	// succ:  fn00022548_exit
l00022554_thunk_fn00022860:
	call fn00022860 (retsize: 0;)
	return
	// succ:  fn00022548_exit
l00022850:
	r7 = r6
	// succ:  l00022850_thunk_fn00022464
l00022850_thunk_fn00022464:
	call fn00022464 (retsize: 0;)
	return
	// succ:  fn00022548_exit
fn00022548_exit:


// fn00022564
// Return size: 0
define fn00022564
fn00022564_entry:
	r29 = fp
	// succ:  l00022564
l00022564:
	p0 = r10 >u 8<32>
	branch p0 l00022860
fn00022564_exit:


// fn0002258C
// Return size: 0
define fn0002258C
fn0002258C_entry:
	r29 = fp
	// succ:  l0002258C
l0002258C:
	p0 = r3 == r3
	branch p0 l00022750
fn0002258C_exit:


// fn000225E8
// Return size: 0
define fn000225E8
fn000225E8_entry:
	r29 = fp
	// succ:  l000225E8
l000225E8:
	r10 = r10 + r15
	__dcfetch(r10, 0<32>)
	// succ:  l000225E8_thunk_fn000225EC
l000225E8_thunk_fn000225EC:
	call fn000225EC (retsize: 0;)
	return
	// succ:  fn000225E8_exit
fn000225E8_exit:


// fn000225EC
// Return size: 0
define fn000225EC
fn000225EC_entry:
	r29 = fp
	// succ:  l000225EC
l000225EC:
	__dcfetch(r10, 0<32>)
	r11 = r11 + r15
	__dcfetch(r11, 0<32>)
	goto l000225F0_thunk_fn000225F8
	// succ:  l000225F0_thunk_fn000225F8
l000225EC:
	r11 = r11 + r15
	__dcfetch(r11, 0<32>)
	goto l000225F0_thunk_fn000225F8
	// succ:  l000225F0_thunk_fn000225F8
l000225F0_thunk_fn000225F8:
	call fn000225F8 (retsize: 0;)
	return
	// succ:  fn000225EC_exit
l000225F0_thunk_fn000225F8:
	call fn000225F8 (retsize: 0;)
	return
	// succ:  fn000225EC_exit
fn000225EC_exit:


// fn000225F8
// Return size: 0
define fn000225F8
fn000225F8_entry:
	r29 = fp
	// succ:  l000225F8
l000225F8:
	r12 = r12 + r15
	__dcfetch(r12, 0<32>)
	r6 = r1
	p0 = r4 == r4
	branch p0 l00022600_thunk_fn000227C8
	// succ:  l00022600_thunk_fn00022610 l00022600_thunk_fn000227C8
l00022600_thunk_fn00022610:
	call fn00022610 (retsize: 0;)
	return
	// succ:  fn000225F8_exit
l00022600_thunk_fn000227C8:
	call fn000227C8 (retsize: 0;)
	return
	// succ:  fn000225F8_exit
fn000225F8_exit:


// fn00022610
// Return size: 0
define fn00022610
fn00022610_entry:
	r29 = fp
	// succ:  l00022610_thunk_fn000225E8
l00022610_thunk_fn000225E8:
	call fn000225E8 (retsize: 0;)
	return
	// succ:  fn00022610_exit
fn00022610_exit:


// gemsuma_asm
// Return size: 0
define gemsuma_asm
gemsuma_asm_entry:
	r29 = fp
	// succ:  l00022660
l00022660:
	r6 = r2 >>u 0x10<32>
	r1 = r1 >>u 1<32>
	r8 = CONVERT(SLICE(r2, uint16, 0), uint16, uint32)
	v8 = r29 - 8<i32>
	Mem0[v8:word32] = r30
	Mem0[v8 + 4<i32>:word32] = r31
	r30 = v8
	r29 = v8 - 32<i32>
	__loop(1<i32>, 0x000226C0<p32>, r1)
	r7 = r2 >>u 0x14<32>
	Mem0[r29:word64] = r17_r16
	Mem0[r29 + 8<i32>:word64] = r19_r18
	r13 = r0 + (r8 << 1<32>)
	r9 = r8 << 1<32>
	r10 = 0x20<32> - r8
	Mem0[r29 + 16<i32>:word64] = r21_r20
	M1 = r8
	r6 = r9 - r6
	r11 = 0x10<32> - r8
	M0 = r11
	r13 = r13 + (r8 << 1<32>)
	r12 = r13
	p2 = r0 == r0
	__loop(0<i32>, 0x000226E0<p32>, r7)
	r17_r16 = 0<64>
	r19_r18 = 0<64>
	// succ:  l000226C0_thunk_fn000226C8
l000226C0_thunk_fn000226C8:
	call fn000226C8 (retsize: 0;)
	return
	// succ:  gemsuma_asm_exit
gemsuma_asm_exit:


// fn000226C8
// Return size: 0
define fn000226C8
fn000226C8_entry:
	r29 = fp
	// succ:  l000226C8
l000226C8:
fn000226C8_exit:


// fn000226D0
// Return size: 0
define fn000226D0
fn000226D0_entry:
	r29 = fp
	// succ:  l000226D0
l000226D0:
	goto l000226D0_thunk_fn000226E0
	// succ:  l000226D0_thunk_fn000226E0
l000226D0:
	goto l000226D0_thunk_fn000226E0
	// succ:  l000226D0_thunk_fn000226E0
l000226D0_thunk_fn000226E0:
	call fn000226E0 (retsize: 0;)
	return
	// succ:  fn000226D0_exit
l000226D0_thunk_fn000226E0:
	call fn000226E0 (retsize: 0;)
	return
	// succ:  fn000226D0_exit
fn000226D0_exit:


// fn000226E0
// Return size: 0
define fn000226E0
fn000226E0_entry:
	r29 = fp
	// succ:  l000226E0
l000226E0:
	r15_r14 = Mem0[r0 + 8<i32>:word64]
	r0 = r0 + m0
	r21_r20 = Mem0[r0:word64]
	goto l000226E0_thunk_fn000226E8
	// succ:  l000226E0_thunk_fn000226E8
l000226E0:
	r15_r14 = Mem0[r0 + 8<i32>:word64]
	r0 = r0 + m0
	r21_r20 = Mem0[r0:word64]
l000226E0_thunk_fn000226E8:
	call fn000226E8 (retsize: 0;)
	return
	// succ:  fn000226E0_exit
fn000226E0_exit:


// fn000226E8
// Return size: 0
define fn000226E8
fn000226E8_entry:
	r29 = fp
	// succ:  l000226E8
l000226E8:
	r17_r16 = r17_r16 + __vraddub<word64,word64>(r15_r14, r21_r20)
	p2 = !p2
	r0 = r0 + m0
	r21_r20 = Mem0[r0:word64]
	r15_r14 = Mem0[r0 + 8<i32>:word64]
	r19_r18 = r19_r18 + __vraddub<word64,word64>(r15_r14, r21_r20)
	r12 = r12 + r8
	r12 = r12 + r10
	// succ:  l000226F8_thunk_fn00022F98
l000226F8_thunk_fn00022F98:
	call fn00022F98 (retsize: 0;)
	return
	// succ:  fn000226E8_exit
fn000226E8_exit:


// gemsumb_asm
// Return size: 0
define gemsumb_asm
gemsumb_asm_entry:
	r29 = fp
	goto l00022740
	// succ:  l00022740
l00022380:
	r12 = r12
	// succ:  l00022380_thunk_fn00022548
l00022380_thunk_fn00022548:
	call fn00022548 (retsize: 0;)
	return
	// succ:  gemsumb_asm_exit
l00022740:
	r2 = r2 >>u 2<32>
	p0 = r3 == -1<i32>
	branch p0 l00022380
	// succ:  l00022740_thunk_fn00022750 l00022380
l00022740_thunk_fn00022750:
	call fn00022750 (retsize: 0;)
	return
	// succ:  gemsumb_asm_exit
gemsumb_asm_exit:


// fn00022750
// Return size: 0
define fn00022750
fn00022750_entry:
	r29 = fp
	goto l00022750
	// succ:  l00022750
l00022400:
	p0 = r6 >u 0xA<32>
	branch p0 l00022704
l0002252C:
	r25_r24 = Mem0[r0 + 8<i32>:word64]
	r0 = r0 + m0
	r23_r22 = Mem0[r0:word64]
	// succ:  l0002252C_thunk_fn00022530
l0002252C_thunk_fn00022530:
	call fn00022530 (retsize: 0;)
	return
	// succ:  fn00022750_exit
l0002254C:
	r0 = r0 + r4
	r2 = 0x32<32>
	r0 = r0 + r0
	p0 = r6 >u 8<32>
	branch p0 l00022860
	// succ:  l00022554_thunk_fn00022564 l00022554_thunk_fn00022860
l00022554_thunk_fn00022564:
	call fn00022564 (retsize: 0;)
	return
	// succ:  fn00022750_exit
l00022554_thunk_fn00022860:
	call fn00022860 (retsize: 0;)
	return
	// succ:  fn00022750_exit
l00022590:
	r2 = 0x32<32>
	r0 = r0 + r0
	// succ:  l00022594 l00022750
l00022594:
	r2 = 0x32<32>
	r0 = r0 + r0
	r13 = r13 + (r5 << 2<32>)
	r14 = r5 >>u 1<32>
	r2 = 0x32<32>
	r0 = r0 + r0
	// succ:  l0002259C
l0002259C:
	__loop(0<i32>, 0x000225C0<p32>, 3<32>)
	r15 = 0x20<32> - r14
	r2 = 0x32<32>
	r0 = r0 + r0
	// succ:  l000225B8
l000225B8:
	r7 = r7 + r14
	__dcfetch(r7, 0<32>)
	r10 = r10 + r14
	__dcfetch(r10, 0<32>)
	// succ:  l000225CC
l000225CC:
	r11 = r11 + r14
	__dcfetch(r11, 0<32>)
	// succ:  l000225D8
l000225D8:
	r12 = r12 + r14
	__dcfetch(r12, 0<32>)
	r7 = r7 + r15
	__dcfetch(r7, 0<32>)
	// succ:  l000225E8
l000225E8:
	r10 = r10 + r15
	__dcfetch(r10, 0<32>)
	r11 = r11 + r15
	__dcfetch(r11, 0<32>)
	r12 = r12 + r15
	__dcfetch(r12, 0<32>)
	r6 = r1
	p0 = r4 == r4
	branch p0 l000227C8
	// succ:  l00022610 l000227C8
l00022610:
	r23_r22 = Mem0[r0 + 8<i32>:word64]
	__dcfetch(r7, 0<32>)
	r7 = r7 + r14
	p0 = r5 == r5
	branch p0 l000227D8
	// succ:  l00022620 l000227D8
l00022620:
	r0 = r0 + m0
	r17_r16 = Mem0[r0:word64]
	r6 = 0x10<32>
	r2 = r2 & 1<i32>
	p0 = r6 == r6
	branch p0 l000227EC
	// succ:  l0002262C l000227EC
l0002262C:
	r21_r20 = Mem0[r0 + 8<i32>:word64]
	r6 = 0<32>
	r3_r2 = SEQ(r7, 0<32>)
	__loop(0<i32>, 0x000226FC<p32>, r9)
	p0 = r7 == r7
	branch p0 l000227F8
	// succ:  l0002263C l000227F8
l0002263C:
	r0 = r0 + m0
	r19_r18 = Mem0[r0:word64]
	r17_r16 = Mem0[r29:word64]
	r19_r18 = Mem0[r29 + 8<i32>:word64]
	r21_r20 = Mem0[r29 + 16<i32>:word64]
	r23_r22 = Mem0[r29 + 24<i32>:word64]
	// succ:  l00022650
l00022650:
	r25_r24 = Mem0[r29 + 32<i32>:word64]
	r27_r26 = Mem0[r29 + 40<i32>:word64]
	r28 = Mem0[r29 + 48<i32>:word32]
	v29 = r30
	r31 = Mem0[v29 + 4<i32>:word32]
	r30 = Mem0[v29:word32]
	r29 = v29 + 8<i32>
	return
	// succ:  fn00022750_exit
l00022750:
	__loop(0<i32>, 0x00022760<p32>, r2)
	branch p0 l00022768
	// succ:  l00022760 l00022768 l00022910
l00022760:
	r5 = 0x10<32>
	p0 = r0 == r0
	branch p0 l00022910
l00022768:
	r0 = r1
	// succ:  l000227AC
l000227AC:
	r0 = 0x10<32>
	r1 = r1 + 1<i32>
	p0 = r9 == r0
	branch p0 l00022578
l000227C8:
	p0 = r9 == r1
	branch p0 l00022590
	// succ:  l000227CC l00022590
l000227CC:
	call fn00022E10 (retsize: 0;)
	return
	// succ:  l000227E0 fn00022750_exit
l000227D8:
	call fn00022E10 (retsize: 0;)
	return
	// succ:  l000227E0 fn00022750_exit
l000227E0:
	r2 = r9
	goto l0002252C
	// succ:  l0002252C
l000227EC:
	p0 = r9 == r2
	branch p0 l000225B8
	// succ:  l000227F4 l000225B8 l00022400
l000227F4:
	r5 = r4
l000227F8:
	p0 = r8 == r0
	branch p0 l000229B8
	// succ:  l00022800 l000229B8
l00022800:
	r0 = 0x10<32>
	r1 = r1 + 1<i32>
	p0 = r9 == r3
	branch p0 l000225CC
	// succ:  l00022804 l000225CC
l00022804:
	r0 = r9
	goto l0002254C
	// succ:  l0002254C
l00022910:
	r13 = r12
	goto l0002259C
	// succ:  l0002259C
l000229B8:
	p1 = r6 > 0xFFFFFFFF<32>
	r1 = 0<32>
	r0 = r0
	__loop(0<i32>, 0x000229E0<p32>, r3)
	p0 = r9 == -1<i32>
	branch p0 l00022650
	// succ:  l000229D0 l00022650
l000229D0:
	r1 = r1 + 0x80<32>
	p1 = r6 >u 1<32>
	branch p1 l000229E4
	// succ:  l000229EC l000229E4 l00022BA0
l000229E4:
	r1 = 0x21<32>
	goto l00022BA4
	// succ:  l00022BA4
l000229EC:
	r1 = 0x21<32>
l00022BA0:
	r10 = r1
	r1 = r1 + 0x80<32>
	p0 = r6 == r6
	branch p0 l00022D6C
l00022BA4:
	r1 = r1 + 0x80<32>
	p0 = r6 == r6
	branch p0 l00022D70
	// succ:  l00022BA4_thunk_fn00022BAC l00022BA4_thunk_fn00022D6C l00022D70
l00022BA4_thunk_fn00022BAC:
	call fn00022BAC (retsize: 0;)
	return
	// succ:  fn00022750_exit
l00022BA4_thunk_fn00022D6C:
	call fn00022D6C (retsize: 0;)
	return
	// succ:  fn00022750_exit
l00022D70:
	p0 = r0 == r0
	branch p0 l00022F30
	// succ:  l00022D74 l00022D70_thunk_fn00022F2C l00022F30
l00022D70_thunk_fn00022F2C:
	call fn00022F2C (retsize: 0;)
	return
	// succ:  fn00022750_exit
l00022D74:
	__loop(1<i32>, 0x00022D80<p32>, r4)
	r7 = r7 * r2
	r1 = r1 + 0x80<32>
	// succ:  l00022D80
l00022D80:
	r10 = 0x30<32>
	r0 = r0
	r2 = r0
	// succ:  l00022EC4
l00022EC4:
	p0 = r0 >u 3<32>
	branch p0 l000231CC
	goto l00022ECC
	// succ:  l00022ECC l00022EC4_thunk_fn000231CC
l00022EC4_thunk_fn000231CC:
	call fn000231CC (retsize: 0;)
	return
	// succ:  fn00022750_exit
l00022ECC:
	r8 = 0x10<32>
	r2 = r2 & 1<i32>
	r15_r14 = r15_r14 + __vraddub<word64,word64>(r13_r12, r11_r10)
	r14 = r14 + r15
	r14 = r14 * r3
	r15 = r1 * r3
	// succ:  l00022EDC_thunk_fn00022ED8
l00022EDC_thunk_fn00022ED8:
	call fn00022ED8 (retsize: 0;)
	return
	// succ:  fn00022750_exit
l00022F1C_thunk_im2col33322_hvx:
	call im2col33322_hvx (retsize: 0;)
	return
	// succ:  fn00022750_exit
l00022F30:
	r7 = 0x20<32>
	Mem0[r29:word64] = r17_r16
	Mem0[r29 + 8<i32>:word64] = r19_r18
	// succ:  l00022F1C_thunk_im2col33322_hvx l00022F30_thunk_fn00022F2C
l00022F30_thunk_fn00022F2C:
	call fn00022F2C (retsize: 0;)
	return
	// succ:  fn00022750_exit
fn00022750_exit:


// quantize_asm
// Return size: 0
define quantize_asm
quantize_asm_entry:
	r29 = fp
	goto l00022780
	// succ:  l00022780
l000223D0:
	p0 = r1 >u 9<32>
	branch p0 l000223D0_thunk_fn000226D0
	// succ:  l000223E0 l000223D0_thunk_fn000226D0 l000223D0_thunk_fn000226D0
l000223D0_thunk_fn000226D0:
	call fn000226D0 (retsize: 0;)
	return
	// succ:  quantize_asm_exit
l000223D0_thunk_fn000226D0:
	call fn000226D0 (retsize: 0;)
	return
	// succ:  quantize_asm_exit
l000223E0:
	p0 = r3 >u 9<32>
	branch p0 l000226D0
l00022780:
	p0 = r1 == -1<i32>
	branch p0 l000223D0
	// succ:  l0002278C l000223D0 l00022780_thunk_fn00022408
l00022780_thunk_fn00022408:
	call fn00022408 (retsize: 0;)
	return
	// succ:  quantize_asm_exit
l0002278C:
	r5 = 0x7F<32>
	p0 = r4 == -1<i32>
	branch p0 l00022780_thunk_fn00022408
quantize_asm_exit:


// fn000227BC
// Return size: 0
define fn000227BC
fn000227BC_entry:
	r29 = fp
	goto l000227BC
	// succ:  l000227BC
l00022424:
	p0 = r8 >u 8<32>
	branch p0 l0002272C
	goto l00022430
	// succ:  l00022430 l00022424_thunk_fn000225E8
l00022424_thunk_fn000225E8:
	call fn000225E8 (retsize: 0;)
	return
	// succ:  fn000227BC_exit
l00022430:
	r14 = r15
	r15 = r14
	p0 = r5 >u 9<32>
	branch p0 l00022738
	// succ:  l00022440 l00022738
l00022440:
	p0 = r9 >u 9<32>
	branch p0 l00022738
l00022500:
	r0 = r0 + m0
	r21_r20 = Mem0[r0:word64]
	// succ:  l00022504 l000227FC
l00022504:
	r19_r18 = Mem0[r0 + 8<i32>:word64]
	r0 = r0 + m0
	r21_r20 = Mem0[r0:word64]
	p0 = r7 >u 0xB<32>
	branch p0 l00022808
	// succ:  l00022514 l00022808
l00022514:
	p0 = r1 >u 0xB<32>
	branch p0 l00022808
l0002252C_in_fn000224BC:
	r25_r24 = Mem0[r0 + 8<i32>:word64]
	r0 = r0 + m0
	r23_r22 = Mem0[r0:word64]
	// succ:  l00022530_in_fn000224BC
l00022530_in_fn000224BC:
	p0 = r2 >u 0xA<32>
	"cloned branch p0 l0002283C"
	// succ:  l00022530_thunk_fn00022544_in_fn000224BC
l00022530_thunk_fn00022544_in_fn000224BC:
	call fn00022544 (retsize: 0;)
	return
	// succ:  fn000227BC_exit
l00022738:
	r0 = Mem0[r0:word32]
	r0 = Mem0[r0:word32]
	// succ:  l0002273C
l0002273C:
	r0 = Mem0[r0:word32]
	r0 = Mem0[r0:word32]
	// succ:  l0002273C_thunk_gemsumb_asm
l0002273C_thunk_gemsumb_asm:
	call gemsumb_asm (retsize: 0;)
	return
	// succ:  fn000227BC_exit
l000227BC:
	p0 = r8 == r2
	branch p0 l000227BC_thunk_fn00022980
	goto l000227C4
	// succ:  l000227C4 l000227BC_thunk_fn00022980
l000227BC:
	goto l00022500
	// succ:  l00022500
l000227BC_thunk_fn00022980:
	call fn00022980 (retsize: 0;)
	return
	// succ:  fn000227BC_exit
l000227C4:
	r0 = 0x10<32>
	r1 = r1 + 1<i32>
	__loop(0<i32>, 0x000227E0<p32>, r4)
	p0 = r9 == r1
	branch p0 l000227C4_thunk_fn0002258C
	goto l000227CC_in_fn000224BC
	// succ:  l000227CC_in_fn000224BC l000227C4_thunk_fn0002258C
l000227C4_thunk_fn0002258C:
	call fn0002258C (retsize: 0;)
	return
	// succ:  fn000227BC_exit
l000227CC_in_fn000224BC:
	call fn00022E10 (retsize: 0;)
	return
	// succ:  l000227E0_in_fn000224BC
l000227E0_in_fn000224BC:
	r2 = r9
	goto l0002252C_in_fn000224BC
	// succ:  l0002252C_in_fn000224BC
l000227FC:
	r0 = 0x10<32>
	r1 = r1 + 1<i32>
	// succ:  l000227FC_thunk_fn000225E8
l000227FC_thunk_fn000225E8:
	call fn000225E8 (retsize: 0;)
	return
	// succ:  fn000227BC_exit
l00022808:
	p0 = r8 == r1
	branch p0 l000229C8
	// succ:  l00022810 l000229C8
l00022810:
	r0 = 0x10<32>
	r1 = r1 + 1<i32>
	p0 = r9 == r0
	branch p0 l000225D8
	// succ:  l00022818 l00022818_thunk_fn000225E8 l00022424
l00022818:
	r7 = r6
l00022818_thunk_fn000225E8:
	call fn000225E8 (retsize: 0;)
	return
	// succ:  fn000227BC_exit
l000229C8:
	r1 = r1 + 0x80<32>
	// succ:  l000229C8_thunk_fn000225E8
l000229C8_thunk_fn000225E8:
	call fn000225E8 (retsize: 0;)
	return
	// succ:  fn000227BC_exit
fn000227BC_exit:


// fn000227C8
// Return size: 0
define fn000227C8
fn000227C8_entry:
	r29 = fp
	// succ:  l000227C8_thunk_fn000225E8
l000227C8_thunk_fn000225E8:
	call fn000225E8 (retsize: 0;)
	return
	// succ:  fn000227C8_exit
fn000227C8_exit:


// fn00022860
// Return size: 0
define fn00022860
fn00022860_entry:
	r29 = fp
	// succ:  l00022860
l00022860:
	r0 = Mem0[r0:word32]
	r0 = Mem0[r0:word32]
	r0 = Mem0[r0:word32]
	r0 = Mem0[r0:word32]
	// succ:  l00022864_thunk_fn00022E10
l00022864_thunk_fn00022E10:
	call fn00022E10 (retsize: 0;)
	return
	// succ:  fn00022860_exit
fn00022860_exit:


// fn00022878
// Return size: 0
define fn00022878
fn00022878_entry:
	r29 = fp
	// succ:  l00022878
l00022878:
	r0 = Mem0[r0:word32]
	r0 = Mem0[r0:word32]
	r0 = Mem0[r0:word32]
	r0 = Mem0[r0:word32]
	r8 = r3 * r4
	r11 = r4 << 4<32>
	goto l00022880_thunk_fn00022888
	// succ:  l00022880_thunk_fn00022888
l00022878:
	r0 = Mem0[r0:word32]
	r0 = Mem0[r0:word32]
	r0 = Mem0[r0:word32]
	r0 = Mem0[r0:word32]
	r8 = r3 * r4
	r11 = r4 << 4<32>
	goto l00022884
	// succ:  l00022884
l00022880_thunk_fn00022888:
	call fn00022888 (retsize: 0;)
	return
	// succ:  fn00022878_exit
l00022884:
	call fn00022888 (retsize: 0;)
	return
	// succ:  l00022888 fn00022878_exit
l00022888:
	p0 = r5 == -1<i32>
	branch p0 l000224D8
	goto l00022888_thunk_fn00022898
	// succ:  l00022888_thunk_fn00022898 l00022888_thunk_fn000224D8
l00022888_thunk_fn000224D8:
	call fn000224D8 (retsize: 0;)
	return
	// succ:  fn00022878_exit
l00022888_thunk_fn00022898:
	call fn00022898 (retsize: 0;)
	return
	// succ:  fn00022878_exit
fn00022878_exit:


// fn00022888
// Return size: 0
define fn00022888
fn00022888_entry:
	r29 = fp
	// succ:  l00022888
l00022888:
	p0 = r5 == -1<i32>
	branch p0 l00022888_thunk_fn000224D8
	goto l00022888_thunk_fn00022898
	// succ:  l00022888_thunk_fn00022898 l00022888_thunk_fn000224D8
l00022888_thunk_fn000224D8:
	call fn000224D8 (retsize: 0;)
	return
	// succ:  fn00022888_exit
l00022888_thunk_fn00022898:
	call fn00022898 (retsize: 0;)
	return
	// succ:  fn00022888_exit
fn00022888_exit:


// fn00022898
// Return size: 0
define fn00022898
fn00022898_entry:
	r29 = fp
	goto l00022898
	// succ:  l00022898
l000224F8:
	p0 = r0 >u 0xA<32>
	branch p0 l000227FC
l00022898:
	r8 = r8 + 0xFF<32>
	r9 = 0x8000<32>
	r8 = r8 >>u 7<32>
	r3 = r3 >>u 2<32>
	r7 = r2
	p0 = r9 == -1<i32>
	branch p0 l000224F8
	// succ:  l000228B0 l000224F8
l000228B0:
	p0 = r9 == -1<i32>
	branch p0 l000224F8
fn00022898_exit:


// vmemcpy_asm
// Return size: 0
define vmemcpy_asm
vmemcpy_asm_entry:
	r29 = fp
	// succ:  l00022960
l00022960:
	r8 = 0x1010101<32>
	r7 = r2 + r0
	p0 = r0 == -1<i32>
	branch p0 l00022960_thunk_fn000225E8
	goto l00022960_thunk_fn00022970
	// succ:  l00022960_thunk_fn00022970 l00022960_thunk_fn000225E8
l00022960_thunk_fn000225E8:
	call fn000225E8 (retsize: 0;)
	return
	// succ:  vmemcpy_asm_exit
l00022960_thunk_fn00022970:
	call fn00022970 (retsize: 0;)
	return
	// succ:  vmemcpy_asm_exit
vmemcpy_asm_exit:


// fn00022964
// Return size: 0
define fn00022964
fn00022964_entry:
	r29 = fp
	// succ:  l00022964
l00022964:
	r8 = 1<32>
	r7 = r2 + r0
	p0 = r0 == -1<i32>
	branch p0 l00022964_thunk_fn000225EC
	goto l00022964_thunk_fn00022970
	// succ:  l00022964_thunk_fn00022970 l00022964_thunk_fn000225EC
l00022964_thunk_fn000225EC:
	call fn000225EC (retsize: 0;)
	return
	// succ:  fn00022964_exit
l00022964_thunk_fn00022970:
	call fn00022970 (retsize: 0;)
	return
	// succ:  fn00022964_exit
fn00022964_exit:


// fn00022970
// Return size: 0
define fn00022970
fn00022970_entry:
	r29 = fp
	// succ:  l00022970
l00022970:
	r5 = r0 & 0x7F<32>
	r9 = r8 + r8
	r10 = r0 + r2
	p0 = r7 == -1<i32>
	branch p0 l000225F8
	goto l00022970_thunk_fn00022980
	// succ:  l00022970_thunk_fn00022980 l00022970_thunk_fn000225F8
l00022970_thunk_fn000225F8:
	call fn000225F8 (retsize: 0;)
	return
	// succ:  fn00022970_exit
l00022970_thunk_fn00022980:
	call fn00022980 (retsize: 0;)
	return
	// succ:  fn00022970_exit
fn00022970_exit:


// fn00022980
// Return size: 0
define fn00022980
fn00022980_entry:
	r29 = fp
	goto l00022980
	// succ:  l00022980
l000226C4:
	r17_r16 = 0<64>
	r19_r18 = 0<64>
	// succ:  l000226C4_thunk_fn000226C8
l000226C4_thunk_fn000226C8:
	call fn000226C8 (retsize: 0;)
	return
	// succ:  fn00022980_exit
l00022980:
	p0 = r9 == -1<i32>
	branch p0 l000226C4
	// succ:  l00022990 l000226C4 l00022980_thunk_fn000226C8
l00022980_thunk_fn000226C8:
	call fn000226C8 (retsize: 0;)
	return
	// succ:  fn00022980_exit
l00022990:
	p0 = r9 > -1<i32>
	branch p0 l000226C8
fn00022980_exit:


// memconvert_hvx
// Return size: 0
define memconvert_hvx
memconvert_hvx_entry:
	r29 = fp
	// succ:  l00022A20
l00022A20:
	r3 = SEQ(SLICE(r3, word16, 0), SLICE(r3, word16, 0))
	r4 = SEQ(SLICE(r4, word16, 0), SLICE(r4, word16, 0))
	p0 = r11 == r11
	branch p0 l00022BF4
	// succ:  l00022A20_thunk_fn00022A30 l00022BF4
l00022A20_thunk_fn00022A30:
	call fn00022A30 (retsize: 0;)
	return
	// succ:  memconvert_hvx_exit
l00022BC0:
	r10 = 0x30<32>
	r0 = r0
	__loop(0<i32>, 0x00022BC0<p32>, r3)
	r10 = r10 + r7
	__loop(1<i32>, 0x00022BC0<p32>, r4)
	p0 = r6 >u 0<32>
	branch p0 l00022C5C
	// succ:  l00022BE4 l00022C5C
l00022BE4:
	r10 = r1
	r2 = r2 + 0xFFFFFF80<32>
	p0 = r6 >u 1<32>
	branch p0 l00022BE4_thunk_fn00022C6C
	goto l00022BF4
	// succ:  l00022BF4 l00022BE4_thunk_fn00022C6C
l00022BE4_thunk_fn00022C6C:
	call fn00022C6C (retsize: 0;)
	return
	// succ:  memconvert_hvx_exit
l00022BF4:
	branch p0 l00022BC0
	// succ:  l00022C00 l00022BC0 l00022BF4_thunk_fn00022878
l00022BF4_thunk_fn00022878:
	call fn00022878 (retsize: 0;)
	return
	// succ:  memconvert_hvx_exit
l00022C00:
	r5 = r4
l00022C5C:
	// succ:  l00022C5C_thunk_fn00022C60
l00022C5C_thunk_fn00022C60:
	call fn00022C60 (retsize: 0;)
	return
	// succ:  memconvert_hvx_exit
memconvert_hvx_exit:


// fn00022A30
// Return size: 0
define fn00022A30
fn00022A30_entry:
	r29 = fp
	goto l00022A30
	// succ:  l00022A30
l00022578:
	p0 = r4 >u 0xA<32>
	branch p0 l00022884
	// succ:  l00022584 l00022578_thunk_fn00022F98 l00022578_thunk_fn00022F98
l00022578_thunk_fn00022F98:
	call fn00022F98 (retsize: 0;)
	return
	// succ:  fn00022A30_exit
l00022578_thunk_fn00022F98:
	call fn00022F98 (retsize: 0;)
	return
	// succ:  fn00022A30_exit
l00022584:
	p0 = r2 == r2
	branch p0 l0002273C
l000226D8:
	call fn000226E0 (retsize: 0;)
	return
	// succ:  l000226E0 fn00022A30_exit
l000226E4:
	r0 = r0 + m0
	r21_r20 = Mem0[r0:word64]
	// succ:  l000226E4_thunk_fn000226E8
l000226E4_thunk_fn000226E8:
	call fn000226E8 (retsize: 0;)
	return
	// succ:  fn00022A30_exit
l000227B4:
	r4 = r4 + 0xFFFFFFFF<32>
	// succ:  l000227B4_thunk_fn00022F98 l00022578
l000227B4_thunk_fn00022F98:
	call fn00022F98 (retsize: 0;)
	return
	// succ:  fn00022A30_exit
l00022A30:
	r9 = 0x1010101<32>
	r3 = 3<32>
	// succ:  l00022A5C
l00022A5C:
	p0 = r0 == -1<i32>
	branch p0 l000226E4
	// succ:  l00022A60 l000226D8 l000226E4
l00022A60:
	r11 = r9 + r9
	r13 = r6 & 0x7F<32>
	r8 = r8 & 0x7F<32>
	p0 = r8 == -1<i32>
	branch p0 l000226E8
	goto l00022A70
	// succ:  l00022A70 l00022A60_thunk_fn000226E8
l00022A60_thunk_fn000226E8:
	call fn000226E8 (retsize: 0;)
	return
	// succ:  fn00022A30_exit
l00022A70:
	p0 = r11 == -1<i32>
	branch p0 l000227B4
	// succ:  l00022A80 l000227B4 l00022A70_thunk_fn00022F98
l00022A70_thunk_fn00022F98:
	call fn00022F98 (retsize: 0;)
	return
	// succ:  fn00022A30_exit
l00022A80:
	p0 = r11 > -1<i32>
	branch p0 l000227B8
fn00022A30_exit:


// avgpool_aligned_hvx
// Return size: 0
define avgpool_aligned_hvx
avgpool_aligned_hvx_entry:
	r29 = fp
	// succ:  l00022B80
l00022B80:
	M0 = r2
	r7 = r5 - r3
	r6 = Mem0[r29:word32]
	r7 = r7 * r2
	r9 = 0x1010101<32>
	r6 = SEQ(SLICE(r6, word16, 0), SLICE(r6, word16, 0))
	__loop(1<i32>, 0x00022BC0<p32>, r4)
	r10 = r1
	r1 = r1 + 0x80<32>
	p0 = r6 == r6
	branch p0 l00022B9C_thunk_fn00022D68
	// succ:  l00022B9C_thunk_fn00022BAC l00022B9C_thunk_fn00022D68
l00022B9C_thunk_fn00022BAC:
	call fn00022BAC (retsize: 0;)
	return
	// succ:  avgpool_aligned_hvx_exit
l00022B9C_thunk_fn00022D68:
	call fn00022D68 (retsize: 0;)
	return
	// succ:  avgpool_aligned_hvx_exit
avgpool_aligned_hvx_exit:


// fn00022BAC
// Return size: 0
define fn00022BAC
fn00022BAC_entry:
	r29 = fp
	// succ:  l00022BAC
l00022BAC:
	__loop(0<i32>, 0x00022BC0<p32>, r3)
	r6 = r6
	// succ:  l00022BAC_thunk_fn00022D6C
l00022BAC_thunk_fn00022D6C:
	call fn00022D6C (retsize: 0;)
	return
	// succ:  fn00022BAC_exit
fn00022BAC_exit:


// avgpool_nonaligned_hvx
// Return size: 0
define avgpool_nonaligned_hvx
avgpool_nonaligned_hvx_entry:
	r29 = fp
	// succ:  l00022C20
l00022C20:
	M0 = r2
	r7 = r5 - r3
	r6 = Mem0[r29:word32]
	r7 = r7 * r2
	r9 = 0x1010101<32>
	r6 = SEQ(SLICE(r6, word16, 0), SLICE(r6, word16, 0))
	// succ:  l00022C2C_thunk_fn00022C3C
l00022C2C_thunk_fn00022C3C:
	call fn00022C3C (retsize: 0;)
	return
	// succ:  avgpool_nonaligned_hvx_exit
avgpool_nonaligned_hvx_exit:


// fn00022C3C
// Return size: 0
define fn00022C3C
fn00022C3C_entry:
	r29 = fp
	// succ:  l00022C3C
l00022C3C:
	__loop(1<i32>, 0x00022C60<p32>, r4)
	r10 = r1
	r1 = r1 + 0x80<32>
	p0 = r6 == r6
	branch p0 l00022E08
	// succ:  l00022C4C l00022E08
l00022C4C:
	__loop(0<i32>, 0x00022C60<p32>, r3)
	r6 = r6
	// succ:  l00022C4C_thunk_fn00022E0C
l00022C4C_thunk_fn00022E0C:
	call fn00022E0C (retsize: 0;)
	return
	// succ:  fn00022C3C_exit
l00022E08:
	r17 = 0x7F<32>
	Mem0[r29:word64] = r17_r16
	// succ:  l00022E08_thunk_fn00022E10
l00022E08_thunk_fn00022E10:
	call fn00022E10 (retsize: 0;)
	return
	// succ:  fn00022C3C_exit
fn00022C3C_exit:


// fn00022C60
// Return size: 0
define fn00022C60
fn00022C60_entry:
	r29 = fp
	// succ:  l00022C60
l00022C60:
	r10 = 0x30<32>
	r0 = r0
	// succ:  l00022C60_thunk_fn00022C6C
l00022C60_thunk_fn00022C6C:
	call fn00022C6C (retsize: 0;)
	return
	// succ:  fn00022C60_exit
fn00022C60_exit:


// fn00022C6C
// Return size: 0
define fn00022C6C
fn00022C6C_entry:
	r29 = fp
	// succ:  l00022C6C
l00022C6C:
	__loop(0<i32>, 0x00022C60<p32>, r3)
	r10 = r10 + r7
	__loop(1<i32>, 0x00022C60<p32>, r4)
	p0 = r6 >u 0<32>
	branch p0 l00022C7C_thunk_fn00022D04
	goto l00022C7C_thunk_fn00022C88
	// succ:  l00022C7C_thunk_fn00022C88 l00022C7C_thunk_fn00022D04
l00022C6C:
	__loop(0<i32>, 0x00022C60<p32>, r3)
	r10 = r10 + r7
	__loop(1<i32>, 0x00022C60<p32>, r4)
	p0 = r6 >u 0<32>
	branch p0 l00022D04
	goto l00022C7C_thunk_fn00022C88
	// succ:  l00022C7C_thunk_fn00022C88 l00022C78_thunk_fn00022D04
l00022C78_thunk_fn00022D04:
	call fn00022D04 (retsize: 0;)
	return
	// succ:  fn00022C6C_exit
l00022C7C_thunk_fn00022C88:
	call fn00022C88 (retsize: 0;)
	return
	// succ:  fn00022C6C_exit
l00022C7C_thunk_fn00022C88:
	call fn00022C88 (retsize: 0;)
	return
	// succ:  fn00022C6C_exit
l00022C7C_thunk_fn00022D04:
	call fn00022D04 (retsize: 0;)
	return
	// succ:  fn00022C6C_exit
fn00022C6C_exit:


// fn00022C88
// Return size: 0
define fn00022C88
fn00022C88_entry:
	r29 = fp
	goto l00022C88
	// succ:  l00022C88
l00022920:
	p0 = r5 == r2
	branch p0 l00022924
	goto l00022928
	// succ:  l00022928 l00022924
l00022924:
	r7 = 0x10<32>
	r1 = r1 + 1<i32>
	p0 = r6 == r7
	r7 = r2 + 0<32>
	p0 = r5 == r3
	branch p0 l0002292C
	goto l00022938
	// succ:  l00022938 l0002292C
l00022928:
	r7 = 0x10<32>
	r1 = r1 + 1<i32>
	p0 = r6 == r7
	r7 = r2 + 0<32>
	p0 = r5 == r3
	branch p0 l0002292C
	goto l00022938
	// succ:  l00022938 l0002292C
l0002292C:
	r7 = r2 + 0<32>
	p0 = r5 == r3
	branch p0 l00022930
	goto l00022938
	// succ:  l00022938 l00022930
l00022930:
	p0 = r5 == r3
	branch p0 l00022934
	goto l00022938
	// succ:  l00022938 l00022934
l00022934:
	r1 = 0x14<32>
	r1 = r1 + 1<i32>
	// succ:  l00022938
l00022938:
	r1 = 0x14<32>
	r1 = r1 + 1<i32>
	p0 = r9 == -1<i32>
	branch p0 l0002258C
	// succ:  l00022944 l00022948_thunk_fn00022ED8 l00022A88
l00022944:
	r7 = r6
l00022948_thunk_fn00022ED8:
	call fn00022ED8 (retsize: 0;)
	return
	// succ:  fn00022C88_exit
l00022A88:
	r0 = 0<32>
	// succ:  l00022AA8
l00022AA8:
	r10 = r10 + 0x7F<32>
	p2 = r14 > 0x7F<32>
	p0 = r4 >u 7<32>
	branch p0 l00022B40
	// succ:  l00022AC0 l00022AB0_thunk_fn00022ED8 l00022AB0_thunk_fn00022C3C
l00022AB0_thunk_fn00022C3C:
	call fn00022C3C (retsize: 0;)
	return
	// succ:  fn00022C88_exit
l00022AB0_thunk_fn00022ED8:
	call fn00022ED8 (retsize: 0;)
	return
	// succ:  fn00022C88_exit
l00022AC0:
	r11 = r9 + 0<32>
	r11 = r12
l00022C88:
	p0 = r6 >u 1<32>
	branch p0 l00022D10
	// succ:  l00022C98 l00022D10
l00022C98:
	p0 = r2 > 0<32>
	r11 = r2 + 0x80<32>
	r12 = r0 & 0x7F<32>
	r11 = 0x80<32>
	p0 = r0 == -1<i32>
	branch p0 l00022920
	// succ:  l00022CA0 l00022920
l00022CA0:
	r13 = 0<32> - r0
	r12 = r12 + r11
	r5 = r4
	goto l00022924
	// succ:  l00022924
l00022D10:
	r7 = r7 * r2
	r1 = r1 + 0x80<32>
	// succ:  l00022D10_thunk_fn00022D18
l00022D10_thunk_fn00022D18:
	call fn00022D18 (retsize: 0;)
	return
	// succ:  fn00022C88_exit
fn00022C88_exit:


// maxpool_aligned_hvx
// Return size: 0
define maxpool_aligned_hvx
maxpool_aligned_hvx_entry:
	r29 = fp
	// succ:  l00022D00
l00022D00:
	M0 = r2
	r7 = r5 - r3
	r10 = r1
	// succ:  l00022D00_thunk_fn00022D0C
l00022D00_thunk_fn00022D0C:
	call fn00022D0C (retsize: 0;)
	return
	// succ:  maxpool_aligned_hvx_exit
maxpool_aligned_hvx_exit:


// fn00022D04
// Return size: 0
define fn00022D04
fn00022D04_entry:
	r29 = fp
	// succ:  l00022D04
l00022D04:
	r7 = r5 - r3
	r10 = r1
	// succ:  l00022D04_thunk_fn00022D08
l00022D04_thunk_fn00022D08:
	call fn00022D08 (retsize: 0;)
	return
	// succ:  fn00022D04_exit
fn00022D04_exit:


// fn00022D08
// Return size: 0
define fn00022D08
fn00022D08_entry:
	r29 = fp
	// succ:  l00022D08
l00022D08:
	r10 = r1
	goto l00022D08_thunk_fn00022D0C
	// succ:  l00022D08_thunk_fn00022D0C
l00022D08:
	__loop(1<i32>, 0x00022D20<p32>, r4)
	r7 = r7 * r2
	r1 = r1 + 0x80<32>
	goto l00022D0C_thunk_fn00022D18
	// succ:  l00022D0C_thunk_fn00022D18
l00022D08_thunk_fn00022D0C:
	call fn00022D0C (retsize: 0;)
	return
	// succ:  fn00022D08_exit
l00022D0C_thunk_fn00022D18:
	call fn00022D18 (retsize: 0;)
	return
	// succ:  fn00022D08_exit
fn00022D08_exit:


// fn00022D0C
// Return size: 0
define fn00022D0C
fn00022D0C_entry:
	r29 = fp
	// succ:  l00022D0C
l00022D0C:
	__loop(1<i32>, 0x00022D20<p32>, r4)
	r7 = r7 * r2
	r1 = r1 + 0x80<32>
	goto l00022D0C_thunk_fn00022D18
	// succ:  l00022D0C_thunk_fn00022D18
l00022D0C:
	__loop(1<i32>, 0x00022D20<p32>, r4)
	r7 = r7 * r2
	r1 = r1 + 0x80<32>
	goto l00022D0C_thunk_fn00022D18
	// succ:  l00022D0C_thunk_fn00022D18
l00022D0C_thunk_fn00022D18:
	call fn00022D18 (retsize: 0;)
	return
	// succ:  fn00022D0C_exit
l00022D0C_thunk_fn00022D18:
	call fn00022D18 (retsize: 0;)
	return
	// succ:  fn00022D0C_exit
fn00022D0C_exit:


// fn00022D18
// Return size: 0
define fn00022D18
fn00022D18_entry:
	r29 = fp
	// succ:  l00022D18
l00022D18:
	__loop(0<i32>, 0x00022D20<p32>, r3)
	p0 = r0 == r0
	branch p0 l00022D18_thunk_fn00022ED8
	goto l00022D18_thunk_fn00022D20
	// succ:  l00022D18_thunk_fn00022D20 l00022D18_thunk_fn00022ED8
l00022D18:
	__loop(0<i32>, 0x00022D20<p32>, r3)
	p0 = r0 == r0
	branch p0 l00022ED8
	goto l00022D18_thunk_fn00022D20
	// succ:  l00022D18_thunk_fn00022D20 l00022D18_thunk_fn00022ED8
l00022D18_thunk_fn00022D20:
	call fn00022D20 (retsize: 0;)
	return
	// succ:  fn00022D18_exit
l00022D18_thunk_fn00022D20:
	call fn00022D20 (retsize: 0;)
	return
	// succ:  fn00022D18_exit
l00022D18_thunk_fn00022ED8:
	call fn00022ED8 (retsize: 0;)
	return
	// succ:  fn00022D18_exit
l00022D18_thunk_fn00022ED8:
	call fn00022ED8 (retsize: 0;)
	return
	// succ:  fn00022D18_exit
fn00022D18_exit:


// fn00022D20
// Return size: 0
define fn00022D20
fn00022D20_entry:
	r29 = fp
	// succ:  l00022D20
l00022D20:
	r2 = r0
	// succ:  l00022D20_thunk_fn00022E10
l00022D20_thunk_fn00022E10:
	call fn00022E10 (retsize: 0;)
	return
	// succ:  fn00022D20_exit
fn00022D20_exit:


// maxpool_nonaligned_hvx
// Return size: 0
define maxpool_nonaligned_hvx
maxpool_nonaligned_hvx_entry:
	r29 = fp
	// succ:  l00022D60
l00022D60:
	M0 = r2
	r7 = r5 - r3
	r10 = r1
maxpool_nonaligned_hvx_exit:


// fn00022D68
// Return size: 0
define fn00022D68
fn00022D68_entry:
	r29 = fp
	goto l00022D68
	// succ:  l00022D68
l00022D60_thunk_fn00022D6C:
	call fn00022D6C (retsize: 0;)
	return
	// succ:  fn00022D68_exit
l00022D68:
	r10 = r1
	goto l00022D68_thunk_fn00022D6C
	// succ:  l00022D68_thunk_fn00022D6C
l00022D68:
	goto l00022D60_thunk_fn00022D6C
	// succ:  l00022D60_thunk_fn00022D6C
l00022D68_thunk_fn00022D6C:
	call fn00022D6C (retsize: 0;)
	return
	// succ:  fn00022D68_exit
fn00022D68_exit:


// fn00022D6C
// Return size: 0
define fn00022D6C
fn00022D6C_entry:
	r29 = fp
	// succ:  l00022D6C
l00022D6C:
	__loop(0<i32>, 0x00022D80<p32>, r3)
	p0 = r0 == r0
	branch p0 l00022F2C
fn00022D6C_exit:


// fn00022DE0
// Return size: 0
define fn00022DE0
fn00022DE0_entry:
	r29 = fp
	// succ:  l00022DE0
l00022DE0:
	r0 = 8<32>
	r9 = r9 + 1<i32>
	branch p0 l00022D80
	goto l00022DEC
	// succ:  l00022DEC l00022DE8_thunk_fn00022FF8
l00022DE8_thunk_fn00022FF8:
	call fn00022FF8 (retsize: 0;)
	return
	// succ:  fn00022DE0_exit
l00022DEC:
	r1 = r1 + 0x80<32>
	r0 = 0x18<32>
	r1 = r1 + 1<i32>
	return
	// succ:  fn00022DE0_exit
fn00022DE0_exit:


// fn00022DF8
// Return size: 0
define fn00022DF8
fn00022DF8_entry:
	r29 = fp
	// succ:  l00022DF8
l00022DF8:
	r0 = Mem0[r0:word32]
	r0 = Mem0[r0:word32]
	r0 = Mem0[r0:word32]
	r0 = Mem0[r0:word32]
	goto l00022DFC_thunk_gemvmpybbw_asm
	// succ:  l00022DFC_thunk_gemvmpybbw_asm
l00022DF8:
	r0 = Mem0[r0:word32]
	r0 = Mem0[r0:word32]
	r0 = Mem0[r0:word32]
	r0 = Mem0[r0:word32]
	goto l00022DFC_thunk_gemvmpybbw_asm
	// succ:  l00022DFC_thunk_gemvmpybbw_asm
l00022DFC_thunk_gemvmpybbw_asm:
	call gemvmpybbw_asm (retsize: 0;)
	return
	// succ:  fn00022DF8_exit
l00022DFC_thunk_gemvmpybbw_asm:
	call gemvmpybbw_asm (retsize: 0;)
	return
	// succ:  fn00022DF8_exit
fn00022DF8_exit:


// gemvmpybbw_asm
// Return size: 0
define gemvmpybbw_asm
gemvmpybbw_asm_entry:
	r29 = fp
	// succ:  l00022E00
l00022E00:
	r6 = Mem0[r29:word64]
	v5 = r29 - 8<i32>
	Mem0[v5:word32] = r30
	Mem0[v5 + 4<i32>:word32] = r31
	r30 = v5
	r29 = v5 - 16<i32>
	r5 = r5 << 2<32>
	r17 = 0x7F<32>
	Mem0[r29:word64] = r17_r16
	// succ:  l00022E04_thunk_fn00022E10
l00022E04_thunk_fn00022E10:
	call fn00022E10 (retsize: 0;)
	return
	// succ:  gemvmpybbw_asm_exit
gemvmpybbw_asm_exit:


// fn00022E0C
// Return size: 0
define fn00022E0C
fn00022E0C_entry:
	r29 = fp
	// succ:  l00022E0C
l00022E0C:
	Mem0[r29:word64] = r17_r16
	// succ:  l00022E0C_thunk_fn00022E10
l00022E0C_thunk_fn00022E10:
	call fn00022E10 (retsize: 0;)
	return
	// succ:  fn00022E0C_exit
fn00022E0C_exit:


// fn00022E10
// Return size: 0
define fn00022E10
fn00022E10_entry:
	r29 = fp
	goto l00022E10
	// succ:  l00022E10
l00022868:
	r0 = Mem0[r0:word32]
	r0 = Mem0[r0:word32]
	r0 = Mem0[r0:word32]
	r0 = Mem0[r0:word32]
	r0 = Mem0[r0:word32]
	r0 = Mem0[r0:word32]
	r0 = Mem0[r0:word32]
	r0 = Mem0[r0:word32]
	// succ:  l00022874_thunk_fn00022878
l00022874_thunk_fn00022878:
	call fn00022878 (retsize: 0;)
	return
	// succ:  fn00022E10_exit
l00022A9C:
	r7 = r5
	goto l00022868
	// succ:  l00022868
l00022E10:
	p0 = __bitsclr(r5, r17)
	branch p0 l00022E20
	// succ:  l00022E1C l00022E20 l00022A9C
l00022E1C:
	p0 = r5 == -1<i32>
	branch p0 l00022A9C
l00022E20:
	r7 = r6 >>u 4<32>
	r8 = r2 + 0x80<32>
	r7 = r7 + 0xFFFFFFFF<32>
	__dcfetch(r0, 0x80<32>)
	__loop(0<i32>, 0x00022E80<p32>, r7)
	r16 = 0x1010101<32>
	r0 = r0 + 8<i32>
	r11_r10 = Mem0[r0:word64]
	// succ:  l00022E40
l00022E40:
	p0 = r10 >u 0<32>
	branch p0 l00022F08
	// succ:  l00022E40_thunk_fn00022E50 l00022F08
l00022E40_thunk_fn00022E50:
	call fn00022E50 (retsize: 0;)
	return
	// succ:  fn00022E10_exit
l00022F08:
	r0 = Mem0[r0:word32]
	r0 = Mem0[r0:word32]
	// succ:  l00022F08_thunk_fn00022F0C
l00022F08_thunk_fn00022F0C:
	call fn00022F0C (retsize: 0;)
	return
	// succ:  fn00022E10_exit
fn00022E10_exit:


// fn00022E38
// Return size: 0
define fn00022E38
fn00022E38_entry:
	r29 = fp
	// succ:  l00022E38
l00022E38:
	r16 = 1<32>
	r0 = r0 + 8<i32>
	r11_r10 = Mem0[r0:word64]
	// succ:  l00022E38_thunk_fn00022E10
l00022E38_thunk_fn00022E10:
	call fn00022E10 (retsize: 0;)
	return
	// succ:  fn00022E38_exit
fn00022E38_exit:


// fn00022E50
// Return size: 0
define fn00022E50
fn00022E50_entry:
	r29 = fp
	// succ:  l00022E50
l00022E50:
	p0 = r11 >u 1<32>
	branch p0 l00022F58
	// succ:  l00022E60 l00022F58 l00023158
l00022E60:
	p0 = r0 >u 1<32>
	branch p0 l00023158
l00022F58:
	r7 = 1<32>
	// succ:  l00022F5C
l00022F5C:
	r9 = r7 << 2<32>
	r10 = r7 << 3<32>
	r8 = r7 + r7
	r24 = 0x12A0<32>
	r12 = r10 << 2<32>
	r13 = r10 << 3<32>
	r11 = r10 + r10
	r27 = r13 + r13
	r3 = r4
	r5 = r5 + r4
	// succ:  l00022F78_thunk_fn00022F80
l00022F78_thunk_fn00022F80:
	call fn00022F80 (retsize: 0;)
	return
	// succ:  fn00022E50_exit
l00023158:
	r12 = r10 << 2<32>
	r13 = r10 << 3<32>
	r11 = r10 + r10
	r3 = 0<32>
	r4 = CONVERT(SLICE(r4, int16, 0), int16, int32)
	r14 = r11 << 3<32>
	p0 = p0 & p0
	r23 = r4 + r5
	r3 = 0<32>
	r5 = CONVERT(SLICE(r5, int8, 0), int8, int32)
	// succ:  l00023168_thunk_fn00023178
l00023168_thunk_fn00023178:
	call fn00023178 (retsize: 0;)
	return
	// succ:  fn00022E50_exit
fn00022E50_exit:


// fn00022E84
// Return size: 0
define fn00022E84
fn00022E84_entry:
	r29 = fp
	// succ:  l00022E84
l00022E84:
	p0 = r0 >u 3<32>
	branch p0 l00022E84_thunk_fn0002318C
l00022E84:
fn00022E84_exit:


// fn00022E88
// Return size: 0
define fn00022E88
fn00022E88_entry:
	r29 = fp
	goto l00022E88
	// succ:  l00022E88
l00022E84_thunk_fn00022E90:
	call fn00022E90 (retsize: 0;)
	return
	// succ:  fn00022E88_exit
l00022E84_thunk_fn0002318C:
	call fn0002318C (retsize: 0;)
	return
	// succ:  fn00022E88_exit
l00022E88:
	r8 = Mem0[r0:word16]
	r2 = Mem0[r4 + 2<i32>:byte]
	__dcfetch(r0, 0x80<32>)
	goto l00022E88_thunk_fn00022E90
	// succ:  l00022E88_thunk_fn00022E90
l00022E88:
	// succ:  l00022E84_thunk_fn00022E90 l00022E84_thunk_fn0002318C
l00022E88_thunk_fn00022E90:
	call fn00022E90 (retsize: 0;)
	return
	// succ:  fn00022E88_exit
fn00022E88_exit:


// fn00022E90
// Return size: 0
define fn00022E90
fn00022E90_entry:
	r29 = fp
	// succ:  l00022E90
l00022E90:
	r15_r14 = r15_r14 + __vraddub<word64,word64>(r13_r12, r11_r10)
	r0 = r0 + 8<i32>
	r11_r10 = Mem0[r0:word64]
	// succ:  l00022E90_thunk_fn00022E94
l00022E90_thunk_fn00022E94:
	call fn00022E94 (retsize: 0;)
	return
	// succ:  fn00022E90_exit
fn00022E90_exit:


// fn00022E94
// Return size: 0
define fn00022E94
fn00022E94_entry:
	r29 = fp
	// succ:  l00022E94
l00022E94:
	r0 = r0 + 8<i32>
	r11_r10 = Mem0[r0:word64]
	p0 = r10 >u 0<32>
	branch p0 l00022E98_thunk_fn00022FA0
	goto l00022E98_thunk_fn00022EA4
	// succ:  l00022E98_thunk_fn00022EA4 l00022E98_thunk_fn00022FA0
l00022E94:
	p0 = r10 >u 0<32>
	branch p0 l00022E98_thunk_fn00022FA0
	goto l00022E98_thunk_fn00022EA4
	// succ:  l00022E98_thunk_fn00022EA4 l00022E98_thunk_fn00022FA0
l00022E98_thunk_fn00022EA4:
	call fn00022EA4 (retsize: 0;)
	return
	// succ:  fn00022E94_exit
l00022E98_thunk_fn00022EA4:
	call fn00022EA4 (retsize: 0;)
	return
	// succ:  fn00022E94_exit
l00022E98_thunk_fn00022FA0:
	call fn00022FA0 (retsize: 0;)
	return
	// succ:  fn00022E94_exit
l00022E98_thunk_fn00022FA0:
	call fn00022FA0 (retsize: 0;)
	return
	// succ:  fn00022E94_exit
fn00022E94_exit:


// fn00022E9C
// Return size: 0
define fn00022E9C
fn00022E9C_entry:
	r29 = fp
	// succ:  l00022E9C
l00022E9C:
	p0 = r0 >u 0<32>
	branch p0 l00022E9C_thunk_fn000231A4
	goto l00022E9C_thunk_fn00022EA4
	// succ:  l00022E9C_thunk_fn00022EA4 l00022E9C_thunk_fn000231A4
l00022E9C:
l00022E9C_thunk_fn00022EA4:
	call fn00022EA4 (retsize: 0;)
	return
	// succ:  fn00022E9C_exit
l00022E9C_thunk_fn000231A4:
	call fn000231A4 (retsize: 0;)
	return
	// succ:  fn00022E9C_exit
fn00022E9C_exit:


// fn00022EA4
// Return size: 0
define fn00022EA4
fn00022EA4_entry:
	r29 = fp
	// succ:  l00022EA4
l00022EA4:
	r2 = 0x10<32>
	r2 = r2 & 1<i32>
	p0 = r11 >u 1<32>
	branch p0 l00022EA4_thunk_fn00022FAC
	// succ:  l00022EB4 l00022EA4_thunk_fn00022FAC l00022EAC_thunk_fn000231AC
l00022EA4_thunk_fn00022FAC:
	call fn00022FAC (retsize: 0;)
	return
	// succ:  fn00022EA4_exit
l00022EAC_thunk_fn000231AC:
	call fn000231AC (retsize: 0;)
	return
	// succ:  fn00022EA4_exit
l00022EB4:
	p0 = r0 >u 1<32>
	branch p0 l000231AC
fn00022EA4_exit:


// fn00022ED8
// Return size: 0
define fn00022ED8
fn00022ED8_entry:
	r29 = fp
	goto l00022ED8
	// succ:  l00022ED8
l000227B8:
	r1 = r9
l000227C0:
	r0 = 0x10<32>
	r1 = r1 + 1<i32>
	__loop(0<i32>, 0x000227E0<p32>, r4)
	p0 = r9 == r1
	branch p0 l0002258C
	goto l000227C4_thunk_fn000225E8
	// succ:  l000227C4_thunk_fn000225E8 l000227C4_thunk_fn0002258C
l000227C4_thunk_fn0002258C:
	call fn0002258C (retsize: 0;)
	return
	// succ:  fn00022ED8_exit
l000227C4_thunk_fn000225E8:
	call fn000225E8 (retsize: 0;)
	return
	// succ:  fn00022ED8_exit
l00022B30:
	r6 = r1
	r8 = r2 + r0
	r14 = r0 & 0x7F<32>
	p0 = r0 == -1<i32>
	branch p0 l000227B8
	// succ:  l00022B40 l000227B8
l00022B40:
	r11 = r9 + r9
	r13 = r6 & 0x7F<32>
	r9 = r8
	goto l000227C0
	// succ:  l000227C0
l00022ED8:
	r14 = r14 + r15 * r6
	r1 = SEQ(SLICE(r1, word16, 0), SLICE(r1, word16, 0))
	p0 = r14 == -1<i32>
	branch p0 l00022B30
	// succ:  l00022EEC l00022B30
l00022EEC:
	p0 = r1 == -1<i32>
	branch p0 l00022B30
fn00022ED8_exit:


// fn00022F0C
// Return size: 0
define fn00022F0C
fn00022F0C_entry:
	r29 = fp
	// succ:  l00022F0C
l00022F0C:
	r0 = Mem0[r0:word32]
	r0 = Mem0[r0:word32]
	goto l00022F0C_thunk_fn00022F10
	// succ:  l00022F0C_thunk_fn00022F10
l00022F0C:
	r0 = Mem0[r0:word32]
	r0 = Mem0[r0:word32]
	goto l00022F0C_thunk_fn00022F10
	// succ:  l00022F0C_thunk_fn00022F10
l00022F0C_thunk_fn00022F10:
	call fn00022F10 (retsize: 0;)
	return
	// succ:  fn00022F0C_exit
l00022F0C_thunk_fn00022F10:
	call fn00022F10 (retsize: 0;)
	return
	// succ:  fn00022F0C_exit
fn00022F0C_exit:


// fn00022F10
// Return size: 0
define fn00022F10
fn00022F10_entry:
	r29 = fp
	// succ:  l00022F10
l00022F10:
	r0 = Mem0[r0:word32]
	r0 = Mem0[r0:word32]
	r0 = Mem0[r0:word32]
	r0 = Mem0[r0:word32]
	r0 = Mem0[r0:word32]
	r0 = Mem0[r0:word32]
	goto l00022F18_thunk_fn00022F1C
	// succ:  l00022F18_thunk_fn00022F1C
l00022F10:
	r0 = Mem0[r0:word32]
	r0 = Mem0[r0:word32]
	r0 = Mem0[r0:word32]
	r0 = Mem0[r0:word32]
	r0 = Mem0[r0:word32]
	r0 = Mem0[r0:word32]
	goto l00022F18_thunk_fn00022F1C
	// succ:  l00022F18_thunk_fn00022F1C
l00022F18_thunk_fn00022F1C:
	call fn00022F1C (retsize: 0;)
	return
	// succ:  fn00022F10_exit
l00022F18_thunk_fn00022F1C:
	call fn00022F1C (retsize: 0;)
	return
	// succ:  fn00022F10_exit
fn00022F10_exit:


// fn00022F1C
// Return size: 0
define fn00022F1C
fn00022F1C_entry:
	r29 = fp
	// succ:  l00022F1C
l00022F1C:
	r0 = Mem0[r0:word32]
	r0 = Mem0[r0:word32]
	goto l00022F1C_thunk_im2col33322_hvx
	// succ:  l00022F1C_thunk_im2col33322_hvx
l00022F1C:
	r0 = Mem0[r0:word32]
	r0 = Mem0[r0:word32]
l00022F1C_thunk_im2col33322_hvx:
	call im2col33322_hvx (retsize: 0;)
	return
	// succ:  fn00022F1C_exit
fn00022F1C_exit:


// im2col33322_hvx
// Return size: 0
define im2col33322_hvx
im2col33322_hvx_entry:
	r29 = fp
	// succ:  l00022F20
l00022F20:
	v4 = r29 - 8<i32>
	Mem0[v4:word32] = r30
	Mem0[v4 + 4<i32>:word32] = r31
	r30 = v4
	r29 = v4 - 64<i32>
	r2 = __vsplatb<byte[4]>(r2)
	r3 = 0<32>
	r0 = r0
	// succ:  l00022F24_thunk_fn00022F2C
l00022F24_thunk_fn00022F2C:
	call fn00022F2C (retsize: 0;)
	return
	// succ:  im2col33322_hvx_exit
im2col33322_hvx_exit:


// fn00022F2C
// Return size: 0
define fn00022F2C
fn00022F2C_entry:
	r29 = fp
	goto l00022F2C
	// succ:  l00022F2C
l00022B7C:
	r0 = Mem0[r0:word32]
	r0 = Mem0[r0:word32]
	// succ:  l00022B7C_thunk_avgpool_aligned_hvx
l00022B7C_thunk_avgpool_aligned_hvx:
	call avgpool_aligned_hvx (retsize: 0;)
	return
	// succ:  fn00022F2C_exit
l00022F2C:
	p0 = r2 == -1<i32>
	branch p0 l00022B7C
	// succ:  l00022F38 l00022B7C
l00022F38:
	r7 = 0x20<32>
	Mem0[r29:word64] = r17_r16
	Mem0[r29 + 8<i32>:word64] = r19_r18
	Mem0[r29 + 16<i32>:word64] = r21_r20
	Mem0[r29 + 24<i32>:word64] = r23_r22
	M1 = r7
	r7 = 0x78<32>
	Mem0[r29 + 32<i32>:word64] = r25_r24
	Mem0[r29 + 40<i32>:word64] = r27_r26
	M0 = r7
	r23 = 0x381<32>
	r7 = 0x1010101<32>
	// succ:  l00022F58_thunk_fn00022E10
l00022F58_thunk_fn00022E10:
	call fn00022E10 (retsize: 0;)
	return
	// succ:  fn00022F2C_exit
fn00022F2C_exit:


// fn00022F80
// Return size: 0
define fn00022F80
fn00022F80_entry:
	r29 = fp
	// succ:  l00022F80
l00022F80:
	r19 = r1
	r25 = r1 & 0x60<32>
	r1 = r1 + r24
	r15 = r3 + r3
	r15 = r15 * r23
	r25 = 0<32> - r25
	goto l00022F90_thunk_fn00022F98
	// succ:  l00022F90_thunk_fn00022F98
l00022F80:
	r19 = r1
	r25 = r1 & 0x60<32>
	r1 = r1 + r24
	r15 = r3 + r3
	r15 = r15 * r23
	r25 = 0<32> - r25
l00022F90_thunk_fn00022F98:
	call fn00022F98 (retsize: 0;)
	return
	// succ:  fn00022F80_exit
fn00022F80_exit:


// fn00022F98
// Return size: 0
define fn00022F98
fn00022F98_entry:
	r29 = fp
	// succ:  l00022F98
l00022F98:
	r15 = r0 + r15
	r22 = 0xFFFFFFE0<32>
	r21 = r25 + 0xFFFFFFF7<32>
	p0 = r9 >u 9<32>
	branch p0 l00022DD8
fn00022F98_exit:


// fn00022FA0
// Return size: 0
define fn00022FA0
fn00022FA0_entry:
	r29 = fp
	goto l00022FA0
	// succ:  l00022FA0
l00022DD8:
	p0 = r0 == r0
	branch p0 l00022F98
	// succ:  l00022DD8_thunk_fn00022DE0 l00022DD8_thunk_fn00022F98
l00022DD8_thunk_fn00022DE0:
	call fn00022DE0 (retsize: 0;)
	return
	// succ:  fn00022FA0_exit
l00022DD8_thunk_fn00022F98:
	call fn00022F98 (retsize: 0;)
	return
	// succ:  fn00022FA0_exit
l00022FA0:
	r21 = r25 + 0xFFFFFFF7<32>
	p0 = r9 >u 9<32>
	branch p0 l00022FA0_thunk_fn00022DE0
	goto l00022FA0_thunk_fn00022FA8
	// succ:  l00022FA0_thunk_fn00022FA8 l00022FA0_thunk_fn00022DE0
l00022FA0:
	call fn00022FA8 (retsize: 0;)
	return
	// succ:  l00022FA0_thunk_fn00022FA8 l00022DD8 fn00022FA0_exit
l00022FA0_thunk_fn00022DE0:
	call fn00022DE0 (retsize: 0;)
	return
	// succ:  fn00022FA0_exit
l00022FA0_thunk_fn00022FA8:
	call fn00022FA8 (retsize: 0;)
	return
	// succ:  fn00022FA0_exit
l00022FA0_thunk_fn00022FA8:
	call fn00022FA8 (retsize: 0;)
	return
	// succ:  fn00022FA0_exit
fn00022FA0_exit:


// fn00022FA8
// Return size: 0
define fn00022FA8
fn00022FA8_entry:
	r29 = fp
	// succ:  l00022FA8
l00022FA8:
	r16 = r15 + r23
	p0 = r6 >u 0<32>
	branch p0 l00022DE8
fn00022FA8_exit:


// fn00022FAC
// Return size: 0
define fn00022FAC
fn00022FAC_entry:
	r29 = fp
	goto l00022FAC
	// succ:  l00022FAC
l00022DE8:
	r0 = 0x18<32>
	r1 = r1 + 1<i32>
	return
	// succ:  fn00022FAC_exit
l00022DEC_in_fn00022FAC:
	r1 = r1 + 0x80<32>
	r0 = 0x18<32>
	r1 = r1 + 1<i32>
	return
	// succ:  fn00022FAC_exit
l00022FAC:
	p0 = r6 >u 0<32>
	branch p0 l00022DEC_in_fn00022FAC
	goto l00022FAC_thunk_fn00022FB0
	// succ:  l00022FAC_thunk_fn00022FB0 l00022DEC_in_fn00022FAC
l00022FAC:
	call fn00022FB0 (retsize: 0;)
	return
	// succ:  l00022FAC_thunk_fn00022FB0 l00022DE8 fn00022FAC_exit
l00022FAC_thunk_fn00022FB0:
	call fn00022FB0 (retsize: 0;)
	return
	// succ:  fn00022FAC_exit
l00022FAC_thunk_fn00022FB0:
	call fn00022FB0 (retsize: 0;)
	return
	// succ:  fn00022FAC_exit
fn00022FAC_exit:


// fn00022FB0
// Return size: 0
define fn00022FB0
fn00022FB0_entry:
	r29 = fp
	// succ:  l00022FB0
l00022FB0:
	r17 = r16 + r23
	r20 = r25 + 0xFFFFFFEE<32>
	p0 = r6 >u 1<32>
	branch p0 l00022DF4
fn00022FB0_exit:


// fn00022FB4
// Return size: 0
define fn00022FB4
fn00022FB4_entry:
	r29 = fp
	goto l00022FB4
	// succ:  l00022FB4
l00022DF4:
	r0 = Mem0[r0:word32]
	r0 = Mem0[r0:word32]
	// succ:  l00022DF4_thunk_fn00022DF8
l00022DF4_thunk_fn00022DF8:
	call fn00022DF8 (retsize: 0;)
	return
	// succ:  fn00022FB4_exit
l00022FB4:
	r20 = r25 + 0xFFFFFFEE<32>
	p0 = r6 >u 1<32>
	branch p0 l00022FB4_thunk_fn00022DF8
	goto l00022FB4_thunk_fn00022FBC
	// succ:  l00022FB4_thunk_fn00022FBC l00022FB4_thunk_fn00022DF8
l00022FB4:
	call fn00022FBC (retsize: 0;)
	return
	// succ:  l00022FB4_thunk_fn00022FBC l00022DF4 fn00022FB4_exit
l00022FB4_thunk_fn00022DF8:
	call fn00022DF8 (retsize: 0;)
	return
	// succ:  fn00022FB4_exit
l00022FB4_thunk_fn00022FBC:
	call fn00022FBC (retsize: 0;)
	return
	// succ:  fn00022FB4_exit
l00022FB4_thunk_fn00022FBC:
	call fn00022FBC (retsize: 0;)
	return
	// succ:  fn00022FB4_exit
fn00022FB4_exit:


// fn00022FBC
// Return size: 0
define fn00022FBC
fn00022FBC_entry:
	r29 = fp
	// succ:  l00022FBC
l00022FBC:
	__loop(1<i32>, 0x00022FE0<p32>, 8<32>)
	r26 = 0<32>
	p0 = r6 >u 2<32>
	branch p0 l00022E00
	goto l00022FC8
	// succ:  l00022FC8 l00022FBC_thunk_gemvmpybbw_asm
l00022FBC_thunk_gemvmpybbw_asm:
	call gemvmpybbw_asm (retsize: 0;)
	return
	// succ:  fn00022FBC_exit
l00022FC8:
	call fn00022FCC (retsize: 0;)
	return
	// succ:  l00022FCC fn00022FBC_exit
l00022FCC:
	r15 = 0x30<32>
	r0 = r0
	r0 = 0x31<32>
	r0 = r0
	r18 = 0xFFFFFFE6<32>
	r1 = 0x31<32>
	r0 = r0
	__loop(0<i32>, 0x00023020<p32>, 5<32>)
	p0 = r9 >u 4<32>
	branch p0 l00022E38
	goto l00022FDC_thunk_fn00022FF8
	// succ:  l00022FDC_thunk_fn00022FF8 l00022FDC_thunk_fn00022E38
l00022FDC_thunk_fn00022E38:
	call fn00022E38 (retsize: 0;)
	return
	// succ:  fn00022FBC_exit
l00022FDC_thunk_fn00022FF8:
	call fn00022FF8 (retsize: 0;)
	return
	// succ:  fn00022FBC_exit
fn00022FBC_exit:


// fn00022FCC
// Return size: 0
define fn00022FCC
fn00022FCC_entry:
	r29 = fp
	// succ:  l00022FCC
l00022FCC:
	r15 = 0x30<32>
	r0 = r0
	r0 = 0x31<32>
	r0 = r0
	r18 = 0xFFFFFFE6<32>
	r1 = 0x31<32>
	r0 = r0
	// succ:  l00022FD4_thunk_fn00022FEC
l00022FD4_thunk_fn00022FEC:
	call fn00022FEC (retsize: 0;)
	return
	// succ:  fn00022FCC_exit
fn00022FCC_exit:


// fn00022FEC
// Return size: 0
define fn00022FEC
fn00022FEC_entry:
	r29 = fp
	// succ:  l00022FEC
l00022FEC:
	r1 = 0x31<32>
	r0 = r0
	__loop(0<i32>, 0x00023020<p32>, 5<32>)
	p0 = r9 >u 4<32>
	branch p0 l00022FF0_thunk_fn00022E38
	goto l00022FF0_thunk_fn00022FF8
	// succ:  l00022FF0_thunk_fn00022FF8 l00022FF0_thunk_fn00022E38
l00022FEC:
	__loop(0<i32>, 0x00023020<p32>, 5<32>)
	p0 = r9 >u 4<32>
	branch p0 l00022FF0_thunk_fn00022E38
	goto l00022FF0_thunk_fn00022FF8
	// succ:  l00022FF0_thunk_fn00022FF8 l00022FF0_thunk_fn00022E38
l00022FF0_thunk_fn00022E38:
	call fn00022E38 (retsize: 0;)
	return
	// succ:  fn00022FEC_exit
l00022FF0_thunk_fn00022E38:
	call fn00022E38 (retsize: 0;)
	return
	// succ:  fn00022FEC_exit
l00022FF0_thunk_fn00022FF8:
	call fn00022FF8 (retsize: 0;)
	return
	// succ:  fn00022FEC_exit
l00022FF0_thunk_fn00022FF8:
	call fn00022FF8 (retsize: 0;)
	return
	// succ:  fn00022FEC_exit
fn00022FEC_exit:


// fn00022FF8
// Return size: 0
define fn00022FF8
fn00022FF8_entry:
	r29 = fp
	// succ:  l00022FF8
l00022FF8:
	p0 = r10 > -1<i32>
	branch p0 l00022C88
	// succ:  l00023000 l00022FF8_thunk_fn00022C88 l00022FF8_thunk_fn00022E10
l00022FF8_thunk_fn00022C88:
	call fn00022C88 (retsize: 0;)
	return
	// succ:  fn00022FF8_exit
l00022FF8_thunk_fn00022E10:
	call fn00022E10 (retsize: 0;)
	return
	// succ:  fn00022FF8_exit
l00023000:
	p0 = r5 >u 5<32>
	branch p0 l00022E40
fn00022FF8_exit:


// fn00023030
// Return size: 0
define fn00023030
fn00023030_entry:
	r29 = fp
	// succ:  l00023030
l00023030:
	p0 = r7 == -1<i32>
	branch p0 l00022CC4
l00023030:
fn00023030_exit:


// fn0002303C
// Return size: 0
define fn0002303C
fn0002303C_entry:
	r29 = fp
	goto l0002303C
	// succ:  l0002303C
l00022CC4:
	r10 = r1
	p0 = r0 == r0
	branch p0 l00022CC4_thunk_fn00022E84
	goto l00022CD0
	// succ:  l00022CD0 l00022CC4_thunk_fn00022E84
l00022CC4_thunk_fn00022E84:
	call fn00022E84 (retsize: 0;)
	return
	// succ:  fn0002303C_exit
l00022CD0:
	r0 = 8<32>
	r9 = r9 + 1<i32>
	branch p0 l00022C60
	// succ:  l00022CE0 l00022CDC_thunk_fn00022C60 l00022CDC_thunk_fn00022E90
l00022CDC_thunk_fn00022C60:
	call fn00022C60 (retsize: 0;)
	return
	// succ:  fn0002303C_exit
l00022CDC_thunk_fn00022E90:
	call fn00022E90 (retsize: 0;)
	return
	// succ:  fn0002303C_exit
l00022CE0:
	r1 = r1 + 0x80<32>
	p0 = r1 == r1
	branch p0 l00022E90
l0002303C:
	r8 = 0x28<32>
	goto l0002303C_thunk_fn00022D08
	// succ:  l0002303C_thunk_fn00022D08
l0002303C:
	call fn00023040 (retsize: 0;)
	return
	// succ:  l0002303C_thunk_fn00023040 l00022CC4 fn0002303C_exit
l0002303C_thunk_fn00022D08:
	call fn00022D08 (retsize: 0;)
	return
	// succ:  fn0002303C_exit
l0002303C_thunk_fn00023040:
	call fn00023040 (retsize: 0;)
	return
	// succ:  fn0002303C_exit
fn0002303C_exit:


// fn00023040
// Return size: 0
define fn00023040
fn00023040_entry:
	r29 = fp
	// succ:  l00023040
l00023040:
	p0 = r8 > -1<i32>
	branch p0 l00022CC4
fn00023040_exit:


// fn00023054
// Return size: 0
define fn00023054
fn00023054_entry:
	r29 = fp
	// succ:  l00023054
l00023054:
	p2 = r26 == r24
	p0 = r2 >u 5<32>
	branch p0 l00023054_thunk_fn00022E9C
	// succ:  l00023060 l00023054_thunk_fn00022E9C l00023054_thunk_fn00022D20
l00023054:
l00023054_thunk_fn00022D20:
	call fn00022D20 (retsize: 0;)
	return
	// succ:  fn00023054_exit
l00023054_thunk_fn00022E9C:
	call fn00022E9C (retsize: 0;)
	return
	// succ:  fn00023054_exit
l00023060:
	r6 = 0x26<32>
fn00023054_exit:


// fn00023088
// Return size: 0
define fn00023088
fn00023088_entry:
	r29 = fp
	goto l00023088
	// succ:  l00023088
l00022D54_in_fn00023088:
	return
	// succ:  fn00023088_exit
l00023088:
	r6 = 0x26<32>
	goto l00022D54_in_fn00023088
	// succ:  l00022D54_in_fn00023088
l00023088:
fn00023088_exit:


// fn000230DC
// Return size: 0
define fn000230DC
fn000230DC_entry:
	r29 = fp
	// succ:  l000230DC
l000230DC:
	r3 = r3 + 1<32>
	p0 = r3 == r5
	branch p0 l000230E4_thunk_fn00022F80
	goto l000230E8
	// succ:  l000230E8 l000230E4_thunk_fn00022F80
l000230DC:
l000230E4_thunk_fn00022F80:
	call fn00022F80 (retsize: 0;)
	return
	// succ:  fn000230DC_exit
l000230E8:
	r17_r16 = Mem0[r29:word64]
	r19_r18 = Mem0[r29 + 8<i32>:word64]
	r21_r20 = Mem0[r29 + 16<i32>:word64]
	r23_r22 = Mem0[r29 + 24<i32>:word64]
	r25_r24 = Mem0[r29 + 32<i32>:word64]
	r27_r26 = Mem0[r29 + 40<i32>:word64]
	v13 = r30
	r31 = Mem0[v13 + 4<i32>:word32]
	r30 = Mem0[v13:word32]
	r29 = v13 + 8<i32>
	return
	// succ:  fn000230DC_exit
fn000230DC_exit:


// im2col7732_asm
// Return size: 0
define im2col7732_asm
im2col7732_asm_entry:
	r29 = fp
	// succ:  l00023100
l00023100:
	r2 = __vsplatb<byte[4]>(r2)
	v5 = r29 - 8<i32>
	Mem0[v5:word32] = r30
	Mem0[v5 + 4<i32>:word32] = r31
	r30 = v5
	r29 = v5 - 64<i32>
	r7 = 0xA0<32>
	Mem0[r29:word64] = r17_r16
	Mem0[r29 + 8<i32>:word64] = r19_r18
	Mem0[r29 + 16<i32>:word64] = r21_r20
	Mem0[r29 + 24<i32>:word64] = r23_r22
	M1 = r7
	r7 = 0x20<32>
	Mem0[r29 + 32<i32>:word64] = r25_r24
	Mem0[r29 + 40<i32>:word64] = r27_r26
	M0 = r7
	r15 = 0xFFFFFFFE<32>
	r3 = 0<32>
	r0 = r0
	r15 = r15 + (r4 + r4)
	p0 = r2 == -1<i32>
	branch p0 l00022D8C
im2col7732_asm_exit:


// fn00023178
// Return size: 0
define fn00023178
fn00023178_entry:
	r29 = fp
	// succ:  l00023178
l00023178:
	r3 = 0<32>
	r5 = CONVERT(SLICE(r5, int8, 0), int8, int32)
	r15 = r15 * r16
	p0 = r8 == -1<i32>
	branch p0 l0002317C_thunk_fn00022E0C
	goto l0002317C_thunk_fn0002318C
	// succ:  l0002317C_thunk_fn0002318C l0002317C_thunk_fn00022E0C
l00023178:
	r15 = r15 * r16
	p0 = r8 == -1<i32>
	branch p0 l00022E0C
l0002317C_thunk_fn00022E0C:
	call fn00022E0C (retsize: 0;)
	return
	// succ:  fn00023178_exit
l0002317C_thunk_fn0002318C:
	call fn0002318C (retsize: 0;)
	return
	// succ:  fn00023178_exit
fn00023178_exit:


// fn00023180
// Return size: 0
define fn00023180
fn00023180_entry:
	r29 = fp
	// succ:  l00023180
l00023180:
	p0 = r8 == -1<i32>
	branch p0 l00023180_thunk_fn00022E10
	goto l00023180_thunk_fn0002318C
	// succ:  l00023180_thunk_fn0002318C l00023180_thunk_fn00022E10
l00023180:
	call fn00022FF8 (retsize: 0;)
	return
	// succ:  l00023180_thunk_fn0002318C l00023180_thunk_fn00022E0C fn00023180_exit
l00023180_thunk_fn00022E0C:
	call fn00022E0C (retsize: 0;)
	return
	// succ:  fn00023180_exit
l00023180_thunk_fn00022E10:
	call fn00022E10 (retsize: 0;)
	return
	// succ:  fn00023180_exit
l00023180_thunk_fn0002318C:
	call fn0002318C (retsize: 0;)
	return
	// succ:  fn00023180_exit
l00023180_thunk_fn0002318C:
	call fn0002318C (retsize: 0;)
	return
	// succ:  fn00023180_exit
fn00023180_exit:


// fn0002318C
// Return size: 0
define fn0002318C
fn0002318C_entry:
	r29 = fp
	// succ:  l0002318C
l0002318C:
	p2 = r4 == 0<32>
	r3 = 0<32>
	r6 = CONVERT(SLICE(r6, uint16, 0), uint16, uint32)
	p1 = p1 & p1
	r22 = r4
	r0 = r0 + r15
	r3 = 0<32>
	r7 = r7 + 0xFF<32>
	r19 = 0xFFFFFFEB<32>
	r15 = r0
	r18 = r1 + 0<32>
	r6 = p2 ? r14 : r8
	// succ:  l000231AC_thunk_fn000231A4
l000231AC_thunk_fn000231A4:
	call fn000231A4 (retsize: 0;)
	return
	// succ:  fn0002318C_exit
fn0002318C_exit:


// fn000231A4
// Return size: 0
define fn000231A4
fn000231A4_entry:
	r29 = fp
	// succ:  l000231A4
l000231A4:
	r18 = r1 + 0<32>
	r6 = p2 ? r14 : r8
	goto l000231A4_thunk_fn000231AC
	// succ:  l000231A4_thunk_fn000231AC
l000231A4:
	__loop(1<i32>, 0x000231C0<p32>, 7<32>)
	r21 = 0<32>
	r15 = r15 + 0xFFFFFFFA<32>
	r16 = r15 + 0x29A<32>
	p0 = r6 == -1<i32>
	branch p0 l00022E50
l000231A4_thunk_fn000231AC:
	call fn000231AC (retsize: 0;)
	return
	// succ:  fn000231A4_exit
fn000231A4_exit:


// fn000231AC
// Return size: 0
define fn000231AC
fn000231AC_entry:
	r29 = fp
	// succ:  l000231AC
l000231AC:
	__loop(1<i32>, 0x000231C0<p32>, 7<32>)
	r21 = 0<32>
	r15 = r15 + 0xFFFFFFFA<32>
	r16 = r15 + 0x29A<32>
	p0 = r6 == -1<i32>
	branch p0 l000231C0_thunk_fn00022E50
	goto l000231C0_thunk_fn000231CC
	// succ:  l000231C0_thunk_fn000231CC l000231C0_thunk_fn00022E50
l000231C0_thunk_fn00022E50:
	call fn00022E50 (retsize: 0;)
	return
	// succ:  fn000231AC_exit
l000231C0_thunk_fn000231CC:
	call fn000231CC (retsize: 0;)
	return
	// succ:  fn000231AC_exit
fn000231AC_exit:


// fn000231CC
// Return size: 0
define fn000231CC
fn000231CC_entry:
	r29 = fp
	// succ:  l000231CC
l000231CC:
	r15 = r15 + 0x60<32>
	r15 = 0<32>
	r0 = r0
	p3 = r21 == 5<32>
	r15 = 0x2F<32>
	// succ:  l000231D8_thunk_fn00022E0C
l000231D8_thunk_fn00022E0C:
	call fn00022E0C (retsize: 0;)
	return
	// succ:  fn000231CC_exit
fn000231CC_exit:


// fn00023334
// Return size: 0
define fn00023334
fn00023334_entry:
	r29 = fp
	// succ:  l00023334
l00023334:
	r2 = 0x39<32>
	r8 = r8 + r8
	p0 = r13 > -1<i32>
	branch p0 l00023338_thunk_fn00022FCC
	// succ:  l00023344 l00023338_thunk_fn00022FCC l00023338_thunk_fn00023178
l00023338_thunk_fn00022FCC:
	call fn00022FCC (retsize: 0;)
	return
	// succ:  fn00023334_exit
l00023338_thunk_fn00023178:
	call fn00023178 (retsize: 0;)
	return
	// succ:  fn00023334_exit
l00023344:
	p0 = r1 >u 1<32>
	branch p0 l00023338_thunk_fn00023178
fn00023334_exit:


// fn00023350
// Return size: 0
define fn00023350
fn00023350_entry:
	r29 = fp
	// succ:  l00023350
l00023350:
	r2 = 9<32>
	r1 = r1 + 1<i32>
	r18 = r18 + 0x120<32>
	r1 = 0x21<32>
	goto l00023358_thunk_fn00022FB4
	// succ:  l00023358_thunk_fn00022FB4
l00023350:
l00023358_thunk_fn00022FB4:
	call fn00022FB4 (retsize: 0;)
	return
	// succ:  fn00023350_exit
fn00023350_exit:


// fn00023378
// Return size: 0
define fn00023378
fn00023378_entry:
	r29 = fp
	// succ:  l00023378
l00023378:
	r18 = r1 + 0<32>
	r21 = 0<32>
	__loop(1<i32>, 0x000233A0<p32>, 7<32>)
	r6 = p1 ? r14 : r8
	r15 = r15 + 0xFFFFFFFA<32>
	r16 = r15 + 0x29A<32>
	goto l00023380_thunk_fn0002338C
	// succ:  l00023380_thunk_fn0002338C
l00023378:
l00023380_thunk_fn0002338C:
	call fn0002338C (retsize: 0;)
	return
	// succ:  fn00023378_exit
fn00023378_exit:


// fn0002338C
// Return size: 0
define fn0002338C
fn0002338C_entry:
	r29 = fp
	// succ:  l0002338C
l0002338C:
	r16 = r15 + 0x29A<32>
	p0 = r6 == -1<i32>
	branch p0 l000233A0_thunk_fn00023030
	goto l000233A0_thunk_fn000233AC
	// succ:  l000233A0_thunk_fn000233AC l000233A0_thunk_fn00023030
l0002338C:
	p0 = r6 == -1<i32>
	branch p0 l000233A0_thunk_fn00023030
	// succ:  l0002338C_thunk_fn000233AC l000233A0_thunk_fn00023030
l0002338C_thunk_fn000233AC:
	call fn000233AC (retsize: 0;)
	return
	// succ:  fn0002338C_exit
l000233A0_thunk_fn00023030:
	call fn00023030 (retsize: 0;)
	return
	// succ:  fn0002338C_exit
l000233A0_thunk_fn00023030:
	call fn00023030 (retsize: 0;)
	return
	// succ:  fn0002338C_exit
l000233A0_thunk_fn000233AC:
	call fn000233AC (retsize: 0;)
	return
	// succ:  fn0002338C_exit
fn0002338C_exit:


// fn000233AC
// Return size: 0
define fn000233AC
fn000233AC_entry:
	r29 = fp
	// succ:  l000233AC
l000233AC:
	r15 = r15 + 0x60<32>
	r15 = 0<32>
	r0 = r0
	r16 = r16 + 0x60<32>
	r15 = 0x2F<32>
	// succ:  l000233AC_thunk_fn00022FEC
l000233AC_thunk_fn00022FEC:
	call fn00022FEC (retsize: 0;)
	return
	// succ:  fn000233AC_exit
fn000233AC_exit:


// fn000234D4
// Return size: 0
define fn000234D4
fn000234D4_entry:
	r29 = fp
	// succ:  l000234D4
l000234D4:
	r21 = r21 + 1<32>
	r6 = p0 ? r14 : r6
	r1 = 0x21<32>
	// succ:  l000234D4_thunk_fn000230DC
l000234D4_thunk_fn000230DC:
	call fn000230DC (retsize: 0;)
	return
	// succ:  fn000234D4_exit
fn000234D4_exit:


// biasadd_relu_requant_nonaligned_hvx
// Return size: 0
define biasadd_relu_requant_nonaligned_hvx
biasadd_relu_requant_nonaligned_hvx_entry:
	r29 = fp
	goto l00023580
	// succ:  l00023580
l00022D54:
	return
	// succ:  biasadd_relu_requant_nonaligned_hvx_exit
l000230C0:
	p0 = r8 == -1<i32>
	branch p0 l00022D54
	// succ:  l000230CC l00022D54 l000230C0_thunk_fn00022F0C
l000230C0_thunk_fn00022F0C:
	call fn00022F0C (retsize: 0;)
	return
	// succ:  biasadd_relu_requant_nonaligned_hvx_exit
l000230CC:
	p0 = r2 >u 6<32>
	branch p0 l000230C0_thunk_fn00022F0C
l000231F8:
	r17 = 0xFFFFFFE6<32>
	p0 = r1 >u 2<32>
	branch p0 l000231F8_thunk_fn0002303C
	goto l00023200
	// succ:  l00023200 l000231F8_thunk_fn0002303C
l000231F8_thunk_fn0002303C:
	call fn0002303C (retsize: 0;)
	return
	// succ:  biasadd_relu_requant_nonaligned_hvx_exit
l00023200:
	__loop(0<i32>, 0x00023220<p32>, 4<32>)
	p0 = r8 == -1<i32>
	branch p0 l00023200_thunk_fn00022E94
	// succ:  l00023210 l00023200_thunk_fn00022E94 l00023200_thunk_fn00023040
l00023200_thunk_fn00022E94:
	call fn00022E94 (retsize: 0;)
	return
	// succ:  biasadd_relu_requant_nonaligned_hvx_exit
l00023200_thunk_fn00023040:
	call fn00023040 (retsize: 0;)
	return
	// succ:  biasadd_relu_requant_nonaligned_hvx_exit
l00023210:
	p0 = r1 >u 1<32>
	branch p0 l00023200_thunk_fn00023040
l00023248:
	p0 = r1 >u 1<32>
	branch p0 l00023248_thunk_fn00023088
	// succ:  l00023250 l00023248_thunk_fn00023088 l00023248_thunk_fn00022F1C
l00023248_thunk_fn00022F1C:
	call fn00022F1C (retsize: 0;)
	return
	// succ:  biasadd_relu_requant_nonaligned_hvx_exit
l00023248_thunk_fn00023088:
	call fn00023088 (retsize: 0;)
	return
	// succ:  biasadd_relu_requant_nonaligned_hvx_exit
l00023250:
	r1 = 0x21<32>
l00023280:
	p0 = r1 >u 1<32>
	branch p0 l000230C0
	// succ:  l0002328C l000230C0 l00023280_thunk_fn00022E88
l00023280_thunk_fn00022E88:
	call fn00022E88 (retsize: 0;)
	return
	// succ:  biasadd_relu_requant_nonaligned_hvx_exit
l0002328C:
	r1 = 0x21<32>
l000232D0:
	r15 = 0x2F<32>
	// succ:  l000232D0_thunk_fn00022F10
l000232D0_thunk_fn00022F10:
	call fn00022F10 (retsize: 0;)
	return
	// succ:  biasadd_relu_requant_nonaligned_hvx_exit
l00023580:
	r8 = r4 + 0x7F<32>
	r14 = 0x1010101<32>
	v7 = r29 - 8<i32>
	Mem0[v7:word32] = r30
	Mem0[v7 + 4<i32>:word32] = r31
	r30 = v7
	r29 = v7 - 32<i32>
	r15 = r14 + r14
	r7 = r4
	Mem0[r29:word64] = r17_r16
	Mem0[r29 + 8<i32>:word64] = r19_r18
	r17 = r4 << 2<32>
	p0 = r5 == -1<i32>
	branch p0 l000231F8
	// succ:  l000235AC l000231F8
l000235AC:
	r6 = r4 & 0x7F<32>
	r16 = 1<32>
	r8 = r8 >>u 7<32>
	r16 = SEQ(SLICE(r17, word16, 0), SLICE(r16, word16, 0))
	p2 = r6 == 0<32>
	r6 = r6 + 0xFFFFFF80<32>
	__loop(1<i32>, 0x000235E0<p32>, r3)
	r18 = r1 + (r4 << 5<32>)
	r6 = 0<32>
	r10 = 0x8000<32>
	__l2fetch<word32,word64>(r18, r17_r16)
	__loop(0<i32>, 0x00023600<p32>, r8)
	r9 = r2
	r1 = 0x10<32>
	r1 = r1 + 1<i32>
	r18 = r18 + (r4 << 2<32>)
	p0 = r0 == r4
	branch p0 l0002360C
	// succ:  l000235F8 l0002360C
l000235F8:
	r9 = 0x10<32>
	r1 = r1 + 1<i32>
	p0 = r10 == -1<i32>
	branch p0 l00023248
	// succ:  l00023600 l00023248
l00023600:
	r1 = 0x10<32>
	r1 = r1 + 1<i32>
	p1 = r15 == r0
	branch p1 l00023600_thunk_fn00023350
	// succ:  l00023610 l00023600_thunk_fn00023350 l00023620
l00023600_thunk_fn00023350:
	call fn00023350 (retsize: 0;)
	return
	// succ:  biasadd_relu_requant_nonaligned_hvx_exit
l0002360C:
	r9 = 0x10<32>
	r1 = r1 + 1<i32>
	// succ:  l00023610
l00023610:
	r12 = r0 & 0x7F<32>
	p0 = r1 == r5
	branch p0 l00023620
l00023620:
	p0 = r7 > 0x7F<32>
	p0 = r2 == r6
	branch p0 l00023644
	// succ:  l0002362C l00023644
l0002362C:
	r9 = 0x10<32>
	r1 = r1 + 1<i32>
	p0 = r10 == -1<i32>
	branch p0 l00023280
	// succ:  l00023638 l00023280
l00023638:
	r11 = 0x80<32>
	r1 = 0x10<32>
	r1 = r1 + 1<i32>
	p1 = r15 == r2
	branch p1 l00023638_thunk_fn0002338C
	// succ:  l00023648 l00023638_thunk_fn0002338C l000232D0
l00023638_thunk_fn0002338C:
	call fn0002338C (retsize: 0;)
	return
	// succ:  biasadd_relu_requant_nonaligned_hvx_exit
l00023644:
	r9 = 0x10<32>
	r1 = r1 + 1<i32>
	// succ:  l00023648
l00023648:
	r9 = r8
biasadd_relu_requant_nonaligned_hvx_exit:


// vmemset_asm
// Return size: 0
define vmemset_asm
vmemset_asm_entry:
	r29 = fp
	// succ:  l000236E0
l000236E0:
	r1 = __vsplatb<byte[4]>(r1)
	r8 = 0x1010101<32>
	r7 = r2 + r0
	p0 = r1 == -1<i32>
	branch p0 l000236F0_thunk_fn00023334
	// succ:  l00023700 l000236F0_thunk_fn00023334 l000236F0_thunk_fn00023378
l000236F0_thunk_fn00023334:
	call fn00023334 (retsize: 0;)
	return
	// succ:  vmemset_asm_exit
l000236F0_thunk_fn00023378:
	call fn00023378 (retsize: 0;)
	return
	// succ:  vmemset_asm_exit
l00023700:
	r9 = r8 + r8
	r7 = r7 & 0x7F<32>
	p0 = r0 == -1<i32>
	branch p0 l000236F0_thunk_fn00023378
vmemset_asm_exit:


// gvmaccimw_asm
// Return size: 0
define gvmaccimw_asm
gvmaccimw_asm_entry:
	r29 = fp
	// succ:  l00023760
l00023760:
	r6 = Mem0[r29:word64]
	r7 = Mem0[r29 + 4<i32>:word64]
	r9 = r5 >>u 4<32>
	v8 = r29 - 8<i32>
	Mem0[v8:word32] = r30
	Mem0[v8 + 4<i32>:word32] = r31
	r30 = v8
	r29 = v8 - 16<i32>
	r9 = r9 + 0xFFFFFFFF<32>
	Mem0[r29:word64] = r17_r16
	Mem0[r29 + 8<i32>:word64] = r19_r18
	// succ:  l00023780
l00023780:
	__loop(1<i32>, 0x000237A0<p32>, r2)
	r6 = r6 + 0xFFFFFFFF<32>
	__loop(0<i32>, 0x000237C0<p32>, r9)
	r10 = r0
	r0 = r0 + r4
	r17_r16 = 0<64>
	r15_r14 = Mem0[r10 + 8<i32>:word64]
	r10 = r10 + 16<i32>
	r13_r12 = Mem0[r10:word64]
	r17_r16 = r17_r16 + __vraddub<word64,word64>(r15_r14, r13_r12)
	r15_r14 = Mem0[r10 + 8<i32>:word64]
	r10 = r10 + 16<i32>
	r13_r12 = Mem0[r10:word64]
	r17_r16 = r17_r16 + __vraddub<word64,word64>(r15_r14, r13_r12)
	r16 = r16 + r17
	r11 = Mem0[r1:word32]
	r11 = r11 + r16 * r7
	Mem0[r1:word32] = r11
	r1 = r1 + 4<i32>
	p1 = r6 == 0<32>
	branch p1 l00023780
	// succ:  l000237F0 l00023780
l000237F0:
	r0 = r0 + r3
	r17_r16 = Mem0[r29:word64]
	r19_r18 = Mem0[r29 + 8<i32>:word64]
	v25 = r30
	r31 = Mem0[v25 + 4<i32>:word32]
	r30 = Mem0[v25:word32]
	r29 = v25 + 8<i32>
	return
	// succ:  gvmaccimw_asm_exit
gvmaccimw_asm_exit:


// gvmaccb_asm
// Return size: 0
define gvmaccb_asm
gvmaccb_asm_entry:
	r29 = fp
	goto l00023800
	// succ:  l00023800
l00023188:
	r3 = 0<32>
	r6 = CONVERT(SLICE(r6, uint16, 0), uint16, uint32)
	// succ:  l00023188_thunk_fn0002318C
l00023188_thunk_fn0002318C:
	call fn0002318C (retsize: 0;)
	return
	// succ:  gvmaccb_asm_exit
l00023440:
	r1 = 0x21<32>
	// succ:  l00023440_thunk_fn00023054
l00023440_thunk_fn00023054:
	call fn00023054 (retsize: 0;)
	return
	// succ:  gvmaccb_asm_exit
l000234E8:
	r2 = 9<32>
	r9 = r9 + 1<i32>
	p0 = r10 > -1<i32>
	branch p0 l000234EC_thunk_fn00023180
	goto l000234F4
	// succ:  l000234F4 l000234EC_thunk_fn00023180
l000234EC_thunk_fn00023180:
	call fn00023180 (retsize: 0;)
	return
	// succ:  gvmaccb_asm_exit
l000234F4:
	r2 = 0x39<32>
	r8 = r8 + r8
	p0 = r11 > -1<i32>
	branch p0 l00023188
	// succ:  l00023504 l00023188 l000234FC_thunk_fn00023334
l000234FC_thunk_fn00023334:
	call fn00023334 (retsize: 0;)
	return
	// succ:  gvmaccb_asm_exit
l00023504:
	r18 = r18 + 0x80<32>
	p0 = r1 >u 1<32>
	branch p0 l00023334
l00023800:
	r2 = r2 >>u 2<32>
	p0 = r3 == -1<i32>
	branch p0 l00023440
	// succ:  l00023810 l00023440
l00023810:
	r4 = 0x1010101<32>
	p0 = r3 == 0<32>
	branch p0 l00023848
	// succ:  l00023818 l00023848
l00023818:
	r2 = r2 + 0xFFFFFFFF<32>
	__loop(0<i32>, 0x00023840<p32>, r2)
	p0 = r4 >u 2<32>
	branch p0 l000238D8
	// succ:  l00023828 l000238D8
l00023828:
	r5 = 0x10<32>
	r0 = 0x10<32>
	r1 = r1 + 1<i32>
	p0 = r4 >u 2<32>
	branch p0 l00023840_thunk_gvmmacbbw_asm
	goto l00023848
	// succ:  l00023848 l00023840_thunk_gvmmacbbw_asm
l00023840_thunk_gvmmacbbw_asm:
	call gvmmacbbw_asm (retsize: 0;)
	return
	// succ:  gvmaccb_asm_exit
l00023848:
	r0 = 0x10<32>
	r1 = r1 + 1<i32>
	r0 = r1
	// succ:  l00023848_thunk_fn0002388C
l00023848_thunk_fn0002388C:
	call fn0002388C (retsize: 0;)
	return
	// succ:  gvmaccb_asm_exit
l000238D8:
	r5 = r2
	goto l000234E8
	// succ:  l000234E8
gvmaccb_asm_exit:


// gvmaddvvm_asm
// Return size: 0
define gvmaddvvm_asm
gvmaddvvm_asm_entry:
	r29 = fp
	// succ:  l00023880
l00023880:
	r4 = r4 << 2<32>
	r11 = 0x80000000<32>
	r1 = 0<32>
	r0 = r0
	// succ:  l00023880_thunk_fn0002388C
l00023880_thunk_fn0002388C:
	call fn0002388C (retsize: 0;)
	return
	// succ:  gvmaddvvm_asm_exit
gvmaddvvm_asm_exit:


// fn0002388C
// Return size: 0
define fn0002388C
fn0002388C_entry:
	r29 = fp
	// succ:  l0002388C
l0002388C:
	r1 = 0<32>
	r0 = r0
	p0 = r11 == -1<i32>
	branch p0 l00023890_thunk_fn000234D4
	goto l00023890_thunk_fn0002389C
	// succ:  l00023890_thunk_fn0002389C l00023890_thunk_fn000234D4
l0002388C:
	p0 = r11 == -1<i32>
	branch p0 l000234D4
	goto l0002388C_thunk_fn0002389C
	// succ:  l0002388C_thunk_fn0002389C l0002388C_thunk_fn000234D4
l0002388C_thunk_fn000234D4:
	call fn000234D4 (retsize: 0;)
	return
	// succ:  fn0002388C_exit
l0002388C_thunk_fn0002389C:
	call fn0002389C (retsize: 0;)
	return
	// succ:  fn0002388C_exit
l00023890_thunk_fn000234D4:
	call fn000234D4 (retsize: 0;)
	return
	// succ:  fn0002388C_exit
l00023890_thunk_fn0002389C:
	call fn0002389C (retsize: 0;)
	return
	// succ:  fn0002388C_exit
fn0002388C_exit:


// fn0002389C
// Return size: 0
define fn0002389C
fn0002389C_entry:
	r29 = fp
	// succ:  l0002389C
l0002389C:
	r8 = r2
	r3 = r3
	r6 = Mem0[r29:word64]
	p2 = !(r6 == 0<32>)
	r7 = 4<32>
	r5 = Mem0[r0:word16]
	r0 = Mem0[r0:byte]
	__dcfetch(r0, 0x20<32>)
	M0 = r4
	r3 = 0x23<32>
	// succ:  l000238AC_thunk_fn00023A70
l000238AC_thunk_fn00023A70:
	call fn00023A70 (retsize: 0;)
	return
	// succ:  fn0002389C_exit
fn0002389C_exit:


// gvmmacbbw_asm
// Return size: 0
define gvmmacbbw_asm
gvmmacbbw_asm_entry:
	r29 = fp
	// succ:  l00023940
l00023940:
	r5 = r5 << 2<32>
	r6 = Mem0[r29:word64]
	r7 = Mem0[r29 + 4<i32>:word64]
	r8 = Mem0[r29 + 8<i32>:word32]
	v8 = r29 - 8<i32>
	Mem0[v8:word32] = r30
	Mem0[v8 + 4<i32>:word32] = r31
	r30 = v8
	r29 = v8 - 64<i32>
	M0 = r5
	Mem0[r29:word64] = r17_r16
	Mem0[r29 + 8<i32>:word64] = r19_r18
	r5 = r5 - r5 * 3<32>
	r9 = r7 >>u 4<32>
	Mem0[r29 + 16<i32>:word64] = r21_r20
	Mem0[r29 + 24<i32>:word64] = r23_r22
	r24 = r3 + 3<32>
	p0 = r12 == r12
	branch p0 l00023B3C
	// succ:  l00023974 l00023B3C
l00023974:
	Mem0[r29 + 32<i32>:word64] = r25_r24
	Mem0[r29 + 40<i32>:word64] = r27_r26
	M1 = r5
	r24 = r24 >>u 2<32>
	r9 = r9 + 0xFFFFFFFF<32>
	// succ:  l00023974_thunk_fn00023980
l00023974_thunk_fn00023980:
	call fn00023980 (retsize: 0;)
	return
	// succ:  gvmmacbbw_asm_exit
l00023B3C:
	r0 = Mem0[r0:word32]
	r0 = Mem0[r0:word32]
	// succ:  l00023B3C_thunk_gvmmpybbw_asm
l00023B3C_thunk_gvmmpybbw_asm:
	call gvmmpybbw_asm (retsize: 0;)
	return
	// succ:  gvmmacbbw_asm_exit
gvmmacbbw_asm_exit:


// fn00023980
// Return size: 0
define fn00023980
fn00023980_entry:
	r29 = fp
	// succ:  l00023980
l00023980:
	__loop(1<i32>, 0x000239A0<p32>, r24)
	r23 = r3
	r8 = r8 + 0xFFFFFFFF<32>
	r10 = r1
	r10 = Mem0[r0:word16]
	r2 = Mem0[r0 + 2<i32>:byte]
	__dcfetch(r0, 0x40<32>)
	r21 = r0
	r20 = r0 + r6
	r10 = Mem0[r0:word16]
	<invalid>
	__dcfetch(r20, 0x40<32>)
	r15_r14 = Mem0[r21 + 8<i32>:word64]
	r2 = 0x30<32>
	r0 = r0
	r11 = r20 + (r6 << 1<32>)
	r22 = r20 + r6
	r21 = r21 + 16<i32>
	r13_r12 = Mem0[r21:word64]
	r2 = 0x30<32>
	r0 = r0
	r17_r16 = Mem0[r20 + 8<i32>:word64]
	r2 = 0x30<32>
	r0 = r0
	__loop(0<i32>, 0x00023A00<p32>, r9)
	r0 = r0 + (r6 << 2<32>)
	r20 = r20 + 16<i32>
	r19_r18 = Mem0[r20:word64]
	r2 = 0x30<32>
	r0 = r0 + r0
	goto l000239F0_thunk_fn00023A00
	// succ:  l000239F0_thunk_fn00023A00
l00023980:
l000239F0_thunk_fn00023A00:
	call fn00023A00 (retsize: 0;)
	return
	// succ:  fn00023980_exit
fn00023980_exit:


// fn00023A00
// Return size: 0
define fn00023A00
fn00023A00_entry:
	r29 = fp
	// succ:  l00023A00
l00023A00:
	p0 = r12 >u 8<32>
	branch p0 l00023B00
	// succ:  l00023A10 l00023B00 l00023D00_in_fn00023A00
l00023A00:
l00023A10:
	p0 = r2 >u 8<32>
	branch p0 l00023D00_in_fn00023A00
l00023B00:
	r2 = 0x3A<32>
	r0 = r0
	branch p1 l00023B04_thunk_fn00023980
	goto l00023B10
	// succ:  l00023B10 l00023B04_thunk_fn00023980
l00023B04_thunk_fn00023980:
	call fn00023980 (retsize: 0;)
	return
	// succ:  fn00023A00_exit
l00023B10:
	r0 = r0 + r4
	p1 = r8 == 0<32>
	r17_r16 = Mem0[r29:word64]
	r19_r18 = Mem0[r29 + 8<i32>:word64]
	r21_r20 = Mem0[r29 + 16<i32>:word64]
	r23_r22 = Mem0[r29 + 24<i32>:word64]
	r25_r24 = Mem0[r29 + 32<i32>:word64]
	r27_r26 = Mem0[r29 + 40<i32>:word64]
	v22 = r30
	r31 = Mem0[v22 + 4<i32>:word32]
	r30 = Mem0[v22:word32]
	r29 = v22 + 8<i32>
	return
	// succ:  fn00023A00_exit
l00023D00_in_fn00023A00:
	v10 = r30
	r31 = Mem0[v10 + 4<i32>:word32]
	r30 = Mem0[v10:word32]
	r29 = v10 + 8<i32>
	return
	// succ:  fn00023A00_exit
fn00023A00_exit:


// fn00023A70
// Return size: 0
define fn00023A70
fn00023A70_entry:
	r29 = fp
	// succ:  l00023A70
l00023A70:
	p0 = r3 >u 0xB<32>
	branch p0 l00023A70_thunk_fn00023D74
	// succ:  l00023A80 l00023A70_thunk_fn00023D74 l00023A70_thunk_fn00023D74
l00023A70:
l00023A70_thunk_fn00023D74:
	call fn00023D74 (retsize: 0;)
	return
	// succ:  fn00023A70_exit
l00023A70_thunk_fn00023D74:
	call fn00023D74 (retsize: 0;)
	return
	// succ:  fn00023A70_exit
l00023A80:
	p0 = r1 >u 0xB<32>
	branch p0 l00023D74
fn00023A70_exit:


// gvmmpybbw_asm
// Return size: 0
define gvmmpybbw_asm
gvmmpybbw_asm_entry:
	r29 = fp
	// succ:  l00023B40
l00023B40:
	r5 = r5 << 2<32>
	r6 = Mem0[r29:word64]
	r7 = Mem0[r29 + 4<i32>:word64]
	p0 = r12 == r12
	branch p0 l00023B48_thunk_gvmsumimw_asm
	goto l00023B54
	// succ:  l00023B54 l00023B48_thunk_gvmsumimw_asm
l00023B48_thunk_gvmsumimw_asm:
	call gvmsumimw_asm (retsize: 0;)
	return
	// succ:  gvmmpybbw_asm_exit
l00023B54:
	r8 = Mem0[r29 + 8<i32>:word32]
	v10 = r29 - 8<i32>
	Mem0[v10:word32] = r30
	Mem0[v10 + 4<i32>:word32] = r31
	r30 = v10
	r29 = v10 - 64<i32>
	M0 = r5
	Mem0[r29 + 32<i32>:word64] = r25_r24
	Mem0[r29:word64] = r17_r16
	r9 = r7 >>u 4<32>
	r24 = r3 + 3<32>
	Mem0[r29 + 16<i32>:word64] = r21_r20
	Mem0[r29 + 24<i32>:word64] = r23_r22
	r24 = r24 >>u 2<32>
	r9 = r9 + 0xFFFFFFFF<32>
	Mem0[r29 + 8<i32>:word64] = r19_r18
	Mem0[r29 + 40<i32>:word64] = r27_r26
	__loop(1<i32>, 0x00023BA0<p32>, r24)
	r23 = r3
	r8 = r8 + 0xFFFFFFFF<32>
	r10 = r1
	r21 = r0
	r12 = r12
	// succ:  l00023BA0_thunk_fn00023D60
l00023BA0_thunk_fn00023D60:
	call fn00023D60 (retsize: 0;)
	return
	// succ:  gvmmpybbw_asm_exit
gvmmpybbw_asm_exit:


// fn00023CC8
// Return size: 0
define fn00023CC8
fn00023CC8_entry:
	r29 = fp
	// succ:  l00023CC8
l00023CC8:
	p0 = r3 >u 0xB<32>
	branch p0 l00023CC8_thunk_fn00023FCC
	// succ:  l00023CD8 l00023CC8_thunk_fn00023FCC l00023CC8_thunk_fn00023FCC
l00023CC8:
l00023CC8_thunk_fn00023FCC:
	call fn00023FCC (retsize: 0;)
	return
	// succ:  fn00023CC8_exit
l00023CC8_thunk_fn00023FCC:
	call fn00023FCC (retsize: 0;)
	return
	// succ:  fn00023CC8_exit
l00023CD8:
	p0 = r1 >u 0xB<32>
	branch p0 l00023FCC
fn00023CC8_exit:


// gvmsumimw_asm
// Return size: 0
define gvmsumimw_asm
gvmsumimw_asm_entry:
	r29 = fp
	// succ:  l00023D20
l00023D20:
	r6 = Mem0[r29:word64]
	r7 = Mem0[r29 + 4<i32>:word64]
	r9 = r5 >>u 4<32>
	r8 = Mem0[r29 + 8<i32>:word32]
	v9 = r29 - 8<i32>
	Mem0[v9:word32] = r30
	Mem0[v9 + 4<i32>:word32] = r31
	r30 = v9
	r29 = v9 - 16<i32>
	r9 = r9 + 0xFFFFFFFF<32>
	Mem0[r29:word64] = r17_r16
	Mem0[r29 + 8<i32>:word64] = r19_r18
	// succ:  l00023D38_thunk_fn00023D40
l00023D38_thunk_fn00023D40:
	call fn00023D40 (retsize: 0;)
	return
	// succ:  gvmsumimw_asm_exit
gvmsumimw_asm_exit:


// fn00023D40
// Return size: 0
define fn00023D40
fn00023D40_entry:
	r29 = fp
	// succ:  l00023D40
l00023D40:
	__loop(1<i32>, 0x00023D60<p32>, r2)
	r6 = r6 + 0xFFFFFFFF<32>
	// succ:  l00023D40_thunk_fn00023D60
l00023D40_thunk_fn00023D60:
	call fn00023D60 (retsize: 0;)
	return
	// succ:  fn00023D40_exit
fn00023D40_exit:


// fn00023D60
// Return size: 0
define fn00023D60
fn00023D60_entry:
	r29 = fp
	// succ:  l00023D60
l00023D60:
	__loop(0<i32>, 0x00023D80<p32>, r9)
	r10 = r0
	r0 = r0 + r4
	goto l00023D60_thunk_fn00023D6C
	// succ:  l00023D60_thunk_fn00023D6C
l00023D60:
	__loop(0<i32>, 0x00023D80<p32>, r9)
	r10 = r0
	r0 = r0 + r4
	goto l00023D60_thunk_fn00023D6C
	// succ:  l00023D60_thunk_fn00023D6C
l00023D60_thunk_fn00023D6C:
	call fn00023D6C (retsize: 0;)
	return
	// succ:  fn00023D60_exit
l00023D60_thunk_fn00023D6C:
	call fn00023D6C (retsize: 0;)
	return
	// succ:  fn00023D60_exit
fn00023D60_exit:


// fn00023D6C
// Return size: 0
define fn00023D6C
fn00023D6C_entry:
	r29 = fp
	// succ:  l00023D6C
l00023D6C:
	r17_r16 = 0<64>
	r15_r14 = Mem0[r10 + 8<i32>:word64]
	r10 = r10 + 16<i32>
	r13_r12 = Mem0[r10:word64]
	// succ:  l00023D6C_thunk_fn00023D74
l00023D6C_thunk_fn00023D74:
	call fn00023D74 (retsize: 0;)
	return
	// succ:  fn00023D6C_exit
fn00023D6C_exit:


// fn00023D74
// Return size: 0
define fn00023D74
fn00023D74_entry:
	r29 = fp
	// succ:  l00023D74
l00023D74:
	r10 = r10 + 16<i32>
	r13_r12 = Mem0[r10:word64]
	r17_r16 = r17_r16 + __vraddub<word64,word64>(r15_r14, r13_r12)
	r15_r14 = Mem0[r10 + 8<i32>:word64]
	r10 = r10 + 16<i32>
	r13_r12 = Mem0[r10:word64]
	goto l00023D80_thunk_fn00023D8C
	// succ:  l00023D80_thunk_fn00023D8C
l00023D74:
	r17_r16 = r17_r16 + __vraddub<word64,word64>(r15_r14, r13_r12)
	r15_r14 = Mem0[r10 + 8<i32>:word64]
	r10 = r10 + 16<i32>
	r13_r12 = Mem0[r10:word64]
	goto l00023D88
	// succ:  l00023D88
l00023D80_thunk_fn00023D8C:
	call fn00023D8C (retsize: 0;)
	return
	// succ:  fn00023D74_exit
l00023D88:
	call fn00023D8C (retsize: 0;)
	return
	// succ:  l00023D8C fn00023D74_exit
fn00023D74_exit:


// fn00023D8C
// Return size: 0
define fn00023D8C
fn00023D8C_entry:
	r29 = fp
	// succ:  l00023D8C
l00023D8C:
	r17_r16 = r17_r16 + __vraddub<word64,word64>(r15_r14, r13_r12)
	goto l00023D8C_thunk_fn00023D90
	// succ:  l00023D8C_thunk_fn00023D90
l00023D8C:
	r17_r16 = r17_r16 + __vraddub<word64,word64>(r15_r14, r13_r12)
	goto l00023D8C_thunk_fn00023D90
	// succ:  l00023D8C_thunk_fn00023D90
l00023D8C_thunk_fn00023D90:
	call fn00023D90 (retsize: 0;)
	return
	// succ:  fn00023D8C_exit
l00023D8C_thunk_fn00023D90:
	call fn00023D90 (retsize: 0;)
	return
	// succ:  fn00023D8C_exit
fn00023D8C_exit:


// fn00023D90
// Return size: 0
define fn00023D90
fn00023D90_entry:
	r29 = fp
	goto l00023D90
	// succ:  l00023D90
l00023D1C_thunk_gvmsumimw_asm:
	call gvmsumimw_asm (retsize: 0;)
	return
	// succ:  fn00023D90_exit
l00023D90:
	r16 = r16 + r17
	r11 = r8
	// succ:  l00023D98
l00023D98:
	r11 = r11 + r16 * r7
	Mem0[r1:word32] = r11
	r1 = r1 + 4<i32>
	p1 = r6 == 0<32>
	branch p1 l00023D40
	// succ:  l00023D1C_thunk_gvmsumimw_asm l00023DB0 l00023DA8_thunk_fn00023D40
l00023DA8_thunk_fn00023D40:
	call fn00023D40 (retsize: 0;)
	return
	// succ:  fn00023D90_exit
l00023DB0:
	r0 = r0 + r3
	r17_r16 = Mem0[r29:word64]
	r19_r18 = Mem0[r29 + 8<i32>:word64]
	v17 = r30
	r31 = Mem0[v17 + 4<i32>:word32]
	r30 = Mem0[v17:word32]
	r29 = v17 + 8<i32>
	return
	// succ:  fn00023D90_exit
fn00023D90_exit:


// gvmsumb_asm
// Return size: 0
define gvmsumb_asm
gvmsumb_asm_entry:
	r29 = fp
	// succ:  l00023DC0
l00023DC0:
	r2 = r2 >>u 2<32>
	p0 = r3 == -1<i32>
	branch p0 l00023DC0_thunk_fn00023A00
	goto l00023DCC
	// succ:  l00023DCC l00023DC0_thunk_fn00023A00
l00023DC0_thunk_fn00023A00:
	call fn00023A00 (retsize: 0;)
	return
	// succ:  gvmsumb_asm_exit
l00023DCC:
	p0 = r3 == 0<32>
	branch p0 l00023E08
	// succ:  l00023DD8 l00023E08
l00023DD8:
	r4 = 0x1010101<32>
	r2 = r2
	__loop(0<i32>, 0x00023E00<p32>, r2)
	p0 = r4 >u 2<32>
	branch p0 l00023DD8_thunk_fn00023E98
	goto l00023DE8
	// succ:  l00023DE8 l00023DD8_thunk_fn00023E98
l00023DD8_thunk_fn00023E98:
	call fn00023E98 (retsize: 0;)
	return
	// succ:  gvmsumb_asm_exit
l00023DE8:
	r5 = 0x10<32>
	r0 = 0x10<32>
	r1 = r1 + 1<i32>
	p0 = r4 >u 2<32>
	branch p0 l00023F00
	// succ:  l00023E08 l00023F00
l00023E08:
	r0 = 0x10<32>
	r1 = r1 + 1<i32>
	r0 = r1
	// succ:  l00023E08_thunk_fn00023E4C
l00023E08_thunk_fn00023E4C:
	call fn00023E4C (retsize: 0;)
	return
	// succ:  gvmsumb_asm_exit
l00023F00:
	r15 = r15
	// succ:  l00023F00_thunk_fn000240C4
l00023F00_thunk_fn000240C4:
	call fn000240C4 (retsize: 0;)
	return
	// succ:  gvmsumb_asm_exit
gvmsumb_asm_exit:


// gvconvsum2dbbw_asm
// Return size: 0
define gvconvsum2dbbw_asm
gvconvsum2dbbw_asm_entry:
	r29 = fp
	// succ:  l00023E20
l00023E20:
	r8 = Mem0[r29:word32]
	__dcfetch(r0, 0<32>)
	r5 = r5 << 2<32>
	r6 = Mem0[r29 + 8<i32>:word32]
	__dcfetch(r0, 0x20<32>)
	r11 = Mem0[r29 + 20<i32>:word32]
	v9 = r29 - 8<i32>
	Mem0[v9:word32] = r30
	Mem0[v9 + 4<i32>:word32] = r31
	r30 = v9
	r29 = v9 - 72<i32>
	r25 = r8 >>u 0x10<32>
	Mem0[r29 + 32<i32>:word64] = r25_r24
	Mem0[r29:word64] = r17_r16
	r8 = SLICE(SLICE(r8, word16, 16) *64 SLICE(r8, word16, 0), word16, 32)
	Mem0[r29 + 16<i32>:word64] = r21_r20
	Mem0[r29 + 24<i32>:word64] = r23_r22
	// succ:  l00023E48_thunk_fn00023E4C
l00023E48_thunk_fn00023E4C:
	call fn00023E4C (retsize: 0;)
	return
	// succ:  gvconvsum2dbbw_asm_exit
gvconvsum2dbbw_asm_exit:


// fn00023E4C
// Return size: 0
define fn00023E4C
fn00023E4C_entry:
	r29 = fp
	// succ:  l00023E4C
l00023E4C:
	Mem0[r29 + 16<i32>:word64] = r21_r20
	Mem0[r29 + 24<i32>:word64] = r23_r22
	M0 = r8
	Mem0[r29 + 8<i32>:word64] = r19_r18
	Mem0[r29 + 40<i32>:word64] = r27_r26
	r12 = r8 + (r8 << 1<32>)
	r16 = 0x80000001<32>
	r11 = 0<32>
	r0 = r0
	r23 = r6 * r3
	p0 = r0 == -1<i32>
	branch p0 l00023E6C_thunk_fn00023CC8
	goto l00023E6C_thunk_fn00023E7C
	// succ:  l00023E6C_thunk_fn00023E7C l00023E6C_thunk_fn00023CC8
l00023E4C:
	M0 = r8
	Mem0[r29 + 8<i32>:word64] = r19_r18
	Mem0[r29 + 40<i32>:word64] = r27_r26
	r12 = r8 + (r8 << 1<32>)
	r16 = 0x80000001<32>
	r11 = 0<32>
	r0 = r0
	r23 = r6 * r3
	p0 = r0 == -1<i32>
	branch p0 l00023E6C_thunk_fn00023CC8
	// succ:  l00023E68_thunk_fn00023E7C l00023E6C_thunk_fn00023CC8
l00023E68_thunk_fn00023E7C:
	call fn00023E7C (retsize: 0;)
	return
	// succ:  fn00023E4C_exit
l00023E6C_thunk_fn00023CC8:
	call fn00023CC8 (retsize: 0;)
	return
	// succ:  fn00023E4C_exit
l00023E6C_thunk_fn00023CC8:
	call fn00023CC8 (retsize: 0;)
	return
	// succ:  fn00023E4C_exit
l00023E6C_thunk_fn00023E7C:
	call fn00023E7C (retsize: 0;)
	return
	// succ:  fn00023E4C_exit
fn00023E4C_exit:


// fn00023E7C
// Return size: 0
define fn00023E7C
fn00023E7C_entry:
	r29 = fp
	// succ:  l00023E7C
l00023E7C:
	r12 = 0x10<32> - r12
	Mem0[r29 + 56<i32>:word32] = r4
	M1 = r12
	r6 = Mem0[r29 + 84<i32>:word32]
	r13 = r8 << 1<32>
	r12 = r12 + 0x10<32>
	Mem0[r29 + 48<i32>:word32] = r0
	Mem0[r29 + 52<i32>:word32] = r1
	r6 = r6 >>u 4<32>
	r23 = r23 - r13
	r13 = r6 - r3
	Mem0[r29 + 60<i32>:word32] = r5
	// succ:  l00023EA0_thunk_fn00023E98
l00023EA0_thunk_fn00023E98:
	call fn00023E98 (retsize: 0;)
	return
	// succ:  fn00023E7C_exit
fn00023E7C_exit:


// fn00023E98
// Return size: 0
define fn00023E98
fn00023E98_entry:
	r29 = fp
	// succ:  l00023E98
l00023E98:
	r13 = r6 - r3
	Mem0[r29 + 60<i32>:word32] = r5
	r6 = r6 + 0xFFFFFFFF<32>
	p3 = r8 > 0x60<32>
	r16 = Mem0[r29 + 104<i32>:word32]
	Mem0[r29 + 64<i32>:word32] = r28
	r3 = r3 * r25
	r12 = r12 - r8
	r0 = Mem0[r1 + 2<i32>:word16]
	r0 = Mem0[r0:byte]
	Mem0[r29 + 84<i32>:word32] = r6
	r11 = Mem0[r29 + 48<i32>:word32]
	Mem0[r29 + 92<i32>:word32] = Mem0[r29 + 92<i32>:word32] - 1<32>
	r28 = r11 + 0x40<32>
	r22 = Mem0[r29 + 56<i32>:word32]
	Mem0[r29 + 48<i32>:word32] = Mem0[r29 + 48<i32>:word32] + r3
	goto l00023ED4_thunk_fn00023EE0
	// succ:  l00023ED4_thunk_fn00023EE0
l00023E98:
	r6 = r6 + 0xFFFFFFFF<32>
	p3 = r8 > 0x60<32>
	r16 = Mem0[r29 + 104<i32>:word32]
	Mem0[r29 + 64<i32>:word32] = r28
	r3 = r3 * r25
	r12 = r12 - r8
	r0 = Mem0[r1 + 2<i32>:word16]
	r0 = Mem0[r0:byte]
	Mem0[r29 + 84<i32>:word32] = r6
	r11 = Mem0[r29 + 48<i32>:word32]
	Mem0[r29 + 92<i32>:word32] = Mem0[r29 + 92<i32>:word32] - 1<32>
	r28 = r11 + 0x40<32>
	r22 = Mem0[r29 + 56<i32>:word32]
	Mem0[r29 + 48<i32>:word32] = Mem0[r29 + 48<i32>:word32] + r3
	goto l00023ED4_thunk_fn00023EE0
	// succ:  l00023ED4_thunk_fn00023EE0
l00023ED4_thunk_fn00023EE0:
	call fn00023EE0 (retsize: 0;)
	return
	// succ:  fn00023E98_exit
l00023ED4_thunk_fn00023EE0:
	call fn00023EE0 (retsize: 0;)
	return
	// succ:  fn00023E98_exit
fn00023E98_exit:


// fn00023EE0
// Return size: 0
define fn00023EE0
fn00023EE0_entry:
	r29 = fp
	// succ:  l00023EE0
l00023EE0:
	r7 = 0<32>
	r9 = Mem0[r29 + 52<i32>:word32]
	r6 = Mem0[r29 + 88<i32>:word32]
	r15 = r15
	// succ:  l000240AC
l000240AC:
	r11 = r11 - r23
	r14 = Mem0[r29 + 108<i32>:word32]
	r6 = Mem0[r29 + 112<i32>:word32]
	r0 = r6
	r1 = r0 + r1
	r10 = Mem0[r29 + 96<i32>:word32]
	// succ:  l000240BC
l000240BC:
	call fn000240C4 (retsize: 0;)
	return
	// succ:  l000240C4 fn00023EE0_exit
fn00023EE0_exit:


// fn00023FCC
// Return size: 0
define fn00023FCC
fn00023FCC_entry:
	r29 = fp
	goto l00023FCC
	// succ:  l00023FCC
l00023FA8_thunk_fn00023EE0:
	call fn00023EE0 (retsize: 0;)
	return
	// succ:  fn00023FCC_exit
l00023FCC:
	__dcfetch(r28, 0<32>)
	goto l00023FCC_thunk_fn00023FD0
	// succ:  l00023FCC_thunk_fn00023FD0
l00023FCC:
	call fn00023FD0 (retsize: 0;)
	return
	// succ:  l00023FD0 l00023FA8_thunk_fn00023EE0 fn00023FCC_exit
l00023FCC_thunk_fn00023FD0:
	call fn00023FD0 (retsize: 0;)
	return
	// succ:  fn00023FCC_exit
fn00023FCC_exit:


// fn00023FD0
// Return size: 0
define fn00023FD0
fn00023FD0_entry:
	r29 = fp
	goto l00023FD0_thunk_fn00023FCC
	// succ:  l00023FD0_thunk_fn00023FCC
l00023D00:
	v27 = r30
	r31 = Mem0[v27 + 4<i32>:word32]
	r30 = Mem0[v27:word32]
	r29 = v27 + 8<i32>
	return
	// succ:  fn00023FD0_exit
l00023D18:
	r0 = Mem0[r0:word32]
	r0 = Mem0[r0:word32]
	r0 = Mem0[r0:word32]
	r0 = Mem0[r0:word32]
l00023FD0:
	r9 = Mem0[r0:word16]
	r2 = Mem0[r0 + 2<i32>:byte]
	__dcfetch(r28, 0<32>)
	p0 = r5 >u 9<32>
	branch p0 l000242D4
	// succ:  l00023FE0 l000242D4 l000240D4
l00023FD0_thunk_fn00023FCC:
	call fn00023FCC (retsize: 0;)
	return
	// succ:  fn00023FD0_exit
l00023FE0:
	p0 = r15 >u 9<32>
	branch p0 l000240D4
l000240D4:
	Mem0[r10:word32] = r0
	r10 = r10 + 4<i32>
	// succ:  l000240D8 l00023D18
l000240D8:
	Mem0[r10:word32] = r0
	r10 = r10 + 4<i32>
	r2 = r2 + r15
	p0 = r22 > 1<32>
	p0 = r4 == r0
	branch p0 l000240D8
	// succ:  l000240E8 l000240D8
l000240E8:
	r2 = 6<32>
	r0 = r0
	r4 = r6
	r5 = r4 + r5
	r12 = r0
	goto l00023D00
	// succ:  l00023D00
l000242D4:
	p0 = r3 >u 9<32>
	branch p0 l000245D4
	goto l000242E0
	// succ:  l000242E0 l000242D4_thunk_fn000241C4
l000242D4_thunk_fn000241C4:
	call fn000241C4 (retsize: 0;)
	return
	// succ:  fn00023FD0_exit
l000242E0:
	r26 = r26 + r6
	r8 = 1<32>
	r7_r6 = SEQ(r7, 0<32>)
	p0 = r14 >u 0xA<32>
	branch p0 l000243E0
	// succ:  l000242F0 l000243E0 l000242EC_thunk_fn000241C4
l000242EC_thunk_fn000241C4:
	call fn000241C4 (retsize: 0;)
	return
	// succ:  fn00023FD0_exit
l000242F0:
	p0 = r0 >u 0xA<32>
	branch p0 l000245E0
l000243E0:
	p0 = r2 >u 0xA<32>
	branch p0 l000246E4
	// succ:  l000243F0 l000246E4
l000243F0:
	p0 = r0 >u 0xA<32>
	branch p0 l000246E4
l000246E4:
	r19_r18 = Mem0[r11 + 8<i32>:word64]
	r11 = r11 + m0
	r21_r20 = Mem0[r11:word64]
	p0 = r15 >u 0xB<32>
	branch p0 l000247EC
fn00023FD0_exit:


// fn000240C4
// Return size: 0
define fn000240C4
fn000240C4_entry:
	r29 = fp
	// succ:  l000240C4
l000240C4:
	r0 = r0 + r14 * r1
	r28 = r11 + 0x40<32>
	r15 = Mem0[r29 + 60<i32>:word32]
	p0 = r0 == -1<i32>
	branch p0 l00023D18
fn000240C4_exit:


// fn00024160
// Return size: 0
define fn00024160
fn00024160_entry:
	r29 = fp
	// succ:  l00024160
l00024160:
	r12 = r2
fn00024160_exit:


// fn00024178
// Return size: 0
define fn00024178
fn00024178_entry:
	r29 = fp
	// succ:  l00024178
l00024178:
	branch p2 l00024178_thunk_fn00023EE0
	goto l00024178_thunk_fn00024184
	// succ:  l00024178_thunk_fn00024184 l00024178_thunk_fn00023EE0
l00024178:
	branch p2 l00023EE0
	// succ:  l00024178_thunk_fn00024184 l00024178_thunk_fn00023EE0 l00024178_thunk_fn00023D40
l00024178_thunk_fn00023D40:
	call fn00023D40 (retsize: 0;)
	return
	// succ:  fn00024178_exit
l00024178_thunk_fn00023EE0:
	call fn00023EE0 (retsize: 0;)
	return
	// succ:  fn00024178_exit
l00024178_thunk_fn00023EE0:
	call fn00023EE0 (retsize: 0;)
	return
	// succ:  fn00024178_exit
l00024178_thunk_fn00024184:
	call fn00024184 (retsize: 0;)
	return
	// succ:  fn00024178_exit
l00024178_thunk_fn00024184:
	call fn00024184 (retsize: 0;)
	return
	// succ:  fn00024178_exit
fn00024178_exit:


// fn00024184
// Return size: 0
define fn00024184
fn00024184_entry:
	r29 = fp
	// succ:  l00024184
l00024184:
	p2 = r22 > 0<32>
	r12 = r3
fn00024184_exit:


// gvconv2dbbw_asm
// Return size: 0
define gvconv2dbbw_asm
gvconv2dbbw_asm_entry:
	r29 = fp
	// succ:  l000241C0
l000241C0:
	r6 = Mem0[r29:word64]
	r7 = Mem0[r29 + 4<i32>:word64]
	// succ:  l000241C0_thunk_fn000241C4
l000241C0_thunk_fn000241C4:
	call fn000241C4 (retsize: 0;)
	return
	// succ:  gvconv2dbbw_asm_exit
gvconv2dbbw_asm_exit:


// fn000241C4
// Return size: 0
define fn000241C4
fn000241C4_entry:
	r29 = fp
	goto l000241C4
	// succ:  l000241C4
l00024070:
	p0 = r5 >u 9<32>
	branch p0 l00024374
	// succ:  l00024080 l00024374 l00024174
l00024080:
	p0 = r15 >u 9<32>
	branch p0 l00024174
l0002408C:
	p0 = r0 >u 0xA<32>
	branch p0 l00024390
l000240A4:
	r17_r16 = Mem0[r11 + 8<i32>:word64]
	r11 = r11 + m0
	r19_r18 = Mem0[r11:word64]
	// succ:  l000240A4_thunk_fn00023EE0
l000240A4_thunk_fn00023EE0:
	call fn00023EE0 (retsize: 0;)
	return
	// succ:  fn000241C4_exit
l00024174:
	Mem0[r29 + 96<i32>:word32] = r10
	// succ:  l00024174_thunk_fn00024178
l00024174_thunk_fn00024178:
	call fn00024178 (retsize: 0;)
	return
	// succ:  fn000241C4_exit
l00024180:
	r12 = r3
	// succ:  l00024180_thunk_fn00024178
l00024180_thunk_fn00024178:
	call fn00024178 (retsize: 0;)
	return
	// succ:  fn000241C4_exit
l000241C4:
	r5 = r5 << 2<32>
	r8 = Mem0[r29 + 8<i32>:word32]
	r9 = Mem0[r29 + 12<i32>:word32]
	r10 = Mem0[r29 + 16<i32>:word32]
	r11 = Mem0[r29 + 20<i32>:word32]
	r12 = Mem0[r29 + 24<i32>:word32]
	v10 = r29 - 8<i32>
	Mem0[v10:word32] = r30
	Mem0[v10 + 4<i32>:word32] = r31
	r30 = v10
	r29 = v10 - 64<i32>
	r25 = r6 >>u 0x10<32>
	Mem0[r29 + 32<i32>:word64] = r25_r24
	Mem0[r29:word64] = r17_r16
	r6 = SLICE(SLICE(r6, word16, 16) *64 SLICE(r6, word16, 0), word16, 32)
	Mem0[r29 + 16<i32>:word64] = r21_r20
	Mem0[r29 + 24<i32>:word64] = r23_r22
	M0 = r6
	Mem0[r29 + 8<i32>:word64] = r19_r18
	Mem0[r29 + 40<i32>:word64] = r27_r26
	Mem0[r29 + 48<i32>:word32] = r0
	Mem0[r29 + 52<i32>:word32] = r1
	r1 = r6 + (r6 << 1<32>)
	r16 = 0x80000001<32>
	r11 = 0<32>
	r0 = r0
	r23 = r8 * r3
	p0 = r0 == -1<i32>
	branch p0 l00024070
	// succ:  l00024224 l00024070
l00024224:
	r1 = 0x10<32> - r1
	Mem0[r29 + 56<i32>:word32] = r4
	M1 = r1
	r13 = r6 << 1<32>
	r1 = r1 + 0x10<32>
	p3 = r6 > 0x60<32>
	r7 = r7 >>u 4<32>
	r23 = r23 - r13
	r13 = r7 - r3
	Mem0[r29 + 60<i32>:word32] = r5
	r3 = r3 * r25
	r7 = r7 + 0xFFFFFFFF<32>
	r1 = r1 - r6
	r12 = 0<32>
	r0 = r0
	r9 = r9 + 0xFFFFFFFF<32>
	r11 = Mem0[r29 + 48<i32>:word32]
	// succ:  l00024270_thunk_fn00024264
l00024270_thunk_fn00024264:
	call fn00024264 (retsize: 0;)
	return
	// succ:  fn000241C4_exit
l00024374:
	p0 = r3 >u 9<32>
	branch p0 l00024674
	// succ:  l00024380 l00024674
l00024380:
	r26 = r26 + r6
	r8 = 1<32>
	r7_r6 = SEQ(r7, 0<32>)
	p0 = r14 >u 0xA<32>
	branch p0 l00024480
	// succ:  l00024390 l00024480
l00024390:
	p3 = r27 == 1<32>
	r27 = r27 + 1<32>
	r19_r18 = Mem0[r11 + 8<i32>:word64]
	p0 = r0 >u 0xA<32>
	branch p0 l00024690
	// succ:  l000243A0 l00024690
l000243A0:
	p0 = r15 >u 0xB<32>
	branch p0 l000244A0
	// succ:  l000243B0 l000244A0 l000246A0
l000243B0:
	p0 = r1 >u 0xB<32>
	branch p0 l000246A0
l00024480:
	p0 = r7 == r3
	branch p0 l00024484
	goto l00024488
	// succ:  l00024488 l00024484
l00024484:
	r2 = 0xE<32>
	r0 = r0
	// succ:  l00024488
l00024488:
	p1 = r0 == 0xE<32>
	branch p1 l0002408C
	// succ:  l0002448C l0002408C
l0002448C:
	branch p2 l00024280
	// succ:  l00024498 l0002448C_thunk_fn00024280 l000240A4
l0002448C_thunk_fn00024280:
	call fn00024280 (retsize: 0;)
	return
	// succ:  fn000241C4_exit
l00024498:
	p2 = r22 > 0<32>
	r12 = r3
l000244A0:
	__loop(0<i32>, 0x000244A8<p32>, 5<32>)
	r6 = 4<32>
	p1 = r6 >u 0xC<32>
	branch p1 l00024180
	// succ:  l000244AC l00024180
l000244AC:
	r6 = r6 + r6
	r13 = r12
	// succ:  l000244AC_thunk_fn00023EE0
l000244AC_thunk_fn00023EE0:
	call fn00023EE0 (retsize: 0;)
	return
	// succ:  fn000241C4_exit
l000245D0:
	r13 = r8 << 1<32>
	r12 = r12 + 0x10<32>
	Mem0[r29 + 48<i32>:word32] = r0
	Mem0[r29 + 52<i32>:word32] = r1
	goto l000245DC
	// succ:  l000245DC
l000245D4:
	r12 = r12 + 0x10<32>
	Mem0[r29 + 48<i32>:word32] = r0
	Mem0[r29 + 52<i32>:word32] = r1
	// succ:  l000245DC
l000245DC:
	r6 = r6 >>u 4<32>
	r23 = r23 - r13
	r13 = r6 - r3
	Mem0[r29 + 60<i32>:word32] = r5
	// succ:  l000245E0
l000245E0:
	r6 = r6 + 0xFFFFFFFF<32>
	p3 = r8 > 0x60<32>
	r16 = Mem0[r29 + 104<i32>:word32]
	Mem0[r29 + 64<i32>:word32] = r28
	r3 = r3 * r25
	r12 = r12 - r8
	r0 = Mem0[r1 + 2<i32>:word16]
	r0 = Mem0[r0:byte]
	Mem0[r29 + 84<i32>:word32] = r6
	r21 = Mem0[r29 + 68<i32>:word32]
	__dcfetch(r0, 0x40<32>)
	r11 = Mem0[r29 + 48<i32>:word32]
	Mem0[r29 + 92<i32>:word32] = Mem0[r29 + 92<i32>:word32] - 1<32>
	r28 = r11 + r21
	r22 = Mem0[r29 + 56<i32>:word32]
	Mem0[r29 + 48<i32>:word32] = Mem0[r29 + 48<i32>:word32] + r3
	r7 = 0<32>
	r9 = Mem0[r29 + 52<i32>:word32]
	r6 = Mem0[r29 + 88<i32>:word32]
	// succ:  l00024644
l00024644:
	r15 = r15
	goto l0002480C
	// succ:  l0002480C
l00024674:
	r11 = r11 + m0
	r21_r20 = Mem0[r11:word64]
	// succ:  l00024678
l00024678:
	r25_r24 = 0<64>
	r27_r26 = 0<64>
	r17_r16 = Mem0[r11 + 8<i32>:word64]
	r11 = r11 + m0
	r19_r18 = Mem0[r11:word64]
	// succ:  l0002468C
l0002468C:
l00024690:
	// succ:  l000246A0
l000246A0:
	r1_r0 = r1_r0 + __vraddub<word64,word64>(r15_r14, r21_r20)
	r28 = r28 + r8
	r6 = Mem0[r29 + 84<i32>:word32]
	__dcfetch(r28, 0<32>)
	__loop(0<i32>, 0x00024720<p32>, r6)
	p0 = r4 >u 8<32>
	branch p0 l000249B0
	// succ:  l000246BC l000249B0
l000246BC:
	p3 = r7 == 1<32>
	r5_r4 = r5_r4 + __vraddub<word64,word64>(r17_r16, r19_r18)
	p0 = r2 >u 8<32>
	branch p0 l000249BC
	// succ:  l000246CC l000249BC
l000246CC:
	r28 = r28 + r12
	r9 = 0x10<32>
	r2 = r2 & 1<i32>
	p0 = r5 >u 9<32>
	branch p0 l000249CC
l0002480C:
	r11 = r11 + m0
	r19_r18 = Mem0[r11:word64]
	r11 = r11 - r23
	p0 = r22 > 1<32>
	r14 = Mem0[r29 + 108<i32>:word32]
	r6 = Mem0[r29 + 112<i32>:word32]
	r0 = r6
	r1 = r0 + r1
	r20 = 1<32>
	r10 = Mem0[r29 + 96<i32>:word32]
	// succ:  l00024830
l00024830:
	r0 = r0 + r14 * r1
	r16 = CONVERT(SLICE(r2, ui2, 2), ui2, uint32)
	r15 = Mem0[r29 + 60<i32>:word32]
	r21 = Mem0[r29 + 68<i32>:word32]
	r16 = r16 & r20 << r16
	p0 = r0 == -1<i32>
	branch p0 l00024488
	// succ:  l00024850 l00024488 l00024A10
l00024850:
	r1 = 0x31<32>
l000249B0:
	r6 = 4<32>
	r16 = Mem0[r29 + 104<i32>:word64]
	p1 = r6 >u 0xC<32>
	branch p1 l0002468C
	// succ:  l000249B8 l0002468C
l000249B8:
	r6 = r6 + r6
	r13 = r12
	goto l000245D0
	// succ:  l000245D0
l000249BC:
	r13 = r12
	goto l000245D4
	// succ:  l000245D4
l00024A10:
	p0 = r6 == -1<i32>
	branch p0 l00024660
fn000241C4_exit:


// fn00024264
// Return size: 0
define fn00024264
fn00024264_entry:
	r29 = fp
	// succ:  l00024264
l00024264:
	r11 = Mem0[r29 + 48<i32>:word32]
	r26 = r11 + 0x40<32>
	r22 = Mem0[r29 + 56<i32>:word32]
	Mem0[r29 + 48<i32>:word32] = Mem0[r29 + 48<i32>:word32] + r3
	goto l00024274_thunk_fn00024280
	// succ:  l00024274_thunk_fn00024280
l00024264:
	r26 = r11 + 0x40<32>
	r22 = Mem0[r29 + 56<i32>:word32]
	Mem0[r29 + 48<i32>:word32] = Mem0[r29 + 48<i32>:word32] + r3
	// succ:  l00024264_thunk_fn00024280
l00024264_thunk_fn00024280:
	call fn00024280 (retsize: 0;)
	return
	// succ:  fn00024264_exit
l00024274_thunk_fn00024280:
	call fn00024280 (retsize: 0;)
	return
	// succ:  fn00024264_exit
fn00024264_exit:


// fn00024280
// Return size: 0
define fn00024280
fn00024280_entry:
	r29 = fp
	// succ:  l00024280
l00024280:
	r27 = 0<32>
	r24 = Mem0[r29 + 52<i32>:word32]
	__loop(1<i32>, 0x000242C0<p32>, r8)
	r8 = Mem0[r1 + 2<i32>:word16]
	r2 = Mem0[r0 + 2<i32>:byte]
	__dcfetch(r26, 0<32>)
	__loop(0<i32>, 0x00024320<p32>, r7)
	r26 = r26 + r6
	r8 = 1<32>
	r3_r2 = SEQ(r7, 0<32>)
	r15 = r15
fn00024280_exit:


// gvconvsum2dbbb_asm
// Return size: 0
define gvconvsum2dbbb_asm
gvconvsum2dbbb_asm_entry:
	r29 = fp
	// succ:  l000244E0
l000244E0:
	r8 = 0x1010101<32>
	r9 = 0x20<32>
	__dcfetch(r0, 0<32>)
	r9 = 0x40<32>
	r6 = 0x8000<32>
	p0 = r9 == -1<i32>
	branch p0 l000244F0_thunk_fn00024178
	goto l00024500
	// succ:  l00024500 l000244F0_thunk_fn00024178
l000244F0_thunk_fn00024178:
	call fn00024178 (retsize: 0;)
	return
	// succ:  gvconvsum2dbbb_asm_exit
l00024500:
	p0 = r8 == -1<i32>
	branch p0 l00024500_thunk_fn00024264
	// succ:  l00024510 l00024500_thunk_fn00024264 l00024500_thunk_fn00024160
l00024500_thunk_fn00024160:
	call fn00024160 (retsize: 0;)
	return
	// succ:  gvconvsum2dbbb_asm_exit
l00024500_thunk_fn00024264:
	call fn00024264 (retsize: 0;)
	return
	// succ:  gvconvsum2dbbb_asm_exit
l00024510:
	p0 = r6 == -1<i32>
	branch p0 l00024500_thunk_fn00024160
gvconvsum2dbbb_asm_exit:


// gvconv2dbbb_asm
// Return size: 0
define gvconv2dbbb_asm
gvconv2dbbb_asm_entry:
	r29 = fp
	goto l000249E0
	// succ:  l000249E0
l000212EC:
	r20 = 0<32>
	// succ:  l000212EC_thunk_fn00021298
l000212EC_thunk_fn00021298:
	call fn00021298 (retsize: 0;)
	return
	// succ:  gvconv2dbbb_asm_exit
l00021C18:
	r17_r16 = Mem0[r29 + 8<i32>:word64]
	v65 = r30
	r31 = Mem0[v65 + 4<i32>:word32]
	r30 = Mem0[v65:word32]
	r29 = v65 + 8<i32>
	return
	// succ:  gvconv2dbbb_asm_exit
l00022A04:
	return
	// succ:  gvconv2dbbb_asm_exit
l00022A48:
	r12 = 0x80<32>
	r15 = r0
	r6 = r1
	r8 = r2 + r0
	r14 = r0 & 0x7F<32>
	p0 = r0 == -1<i32>
	branch p0 l000226D8
l00022D8C:
	__loop(0<i32>, 0x00022D80<p32>, r3)
	r10 = r10 + r7
	__loop(1<i32>, 0x00022D80<p32>, r4)
	r2 = r2 + 0xFFFFFF80<32>
	r12 = r0 & 0x7F<32>
	r11 = r2
	p0 = r2 > 0<32>
	r11 = 0x80<32>
	r13 = 0<32> - r0
	p0 = r0 == -1<i32>
	branch p0 l00022A30
	goto l00022DB8
	// succ:  l00022DB8 l00022DA8_thunk_fn00022A30
l00022DA8_thunk_fn00022A30:
	call fn00022A30 (retsize: 0;)
	return
	// succ:  gvconv2dbbb_asm_exit
l00022DB8:
	r12 = r12 + r11
	p0 = r13 >u 0<32>
	branch p0 l00022A04
	// succ:  l00022DC0 l00022A04
l00022DC0:
	branch p1 l00022DD4
	// succ:  l00022DCC l00022DD4 l00022A48
l00022DCC:
	p1 = r12 > 0x7F<32>
	p0 = r12 == -1<i32>
	branch p0 l00022A48
l00022DD4:
	r10 = r1
	p0 = r0 == r0
	branch p0 l00022F94
	// succ:  l00022DD4_thunk_fn00022F98 l00022F94
l00022DD4_thunk_fn00022F98:
	call fn00022F98 (retsize: 0;)
	return
	// succ:  gvconv2dbbb_asm_exit
l00022F94:
	r25 = 0<32> - r25
	// succ:  l00022F94_thunk_fn00022F98
l00022F94_thunk_fn00022F98:
	call fn00022F98 (retsize: 0;)
	return
	// succ:  gvconv2dbbb_asm_exit
l00023138:
	r3 = 0<32>
	r1 = r1 + 1<i32>
	// succ:  l0002313C l00022D8C
l0002313C:
	r3 = 0<32>
	r1 = r1 + 1<i32>
	r7 = 0x1010101<32>
	r16 = 0x2A0<32>
	r3 = 0<32>
	r2 = r2 & 1<i32>
	r9 = r7 << 2<32>
	r10 = r7 << 3<32>
	r8 = r7 + r7
	r3 = 0<32>
	r3 = r3 + -1<i32>
	// succ:  l00023158_thunk_fn00022F98
l00023158_thunk_fn00022F98:
	call fn00022F98 (retsize: 0;)
	return
	// succ:  gvconv2dbbb_asm_exit
l000231C4:
	r15 = r15 + 0x60<32>
	r15 = 0<32>
	r0 = r0
	// succ:  l000231C4_thunk_fn00022F98 l000231C4_thunk_fn00022F98
l000231C4_thunk_fn00022F98:
	call fn00022F98 (retsize: 0;)
	return
	// succ:  gvconv2dbbb_asm_exit
l000231C4_thunk_fn00022F98:
	call fn00022F98 (retsize: 0;)
	return
	// succ:  gvconv2dbbb_asm_exit
l00023530:
	p0 = r9 > -1<i32>
	branch p0 l000231C4
	// succ:  l0002353C l000231C4 l00023138
l0002353C:
	r1 = 0x21<32>
l00023758:
	r0 = Mem0[r0:word32]
	r0 = Mem0[r0:word32]
	r0 = Mem0[r0:word32]
	r0 = Mem0[r0:word32]
	// succ:  l0002375C_thunk_gvmaccimw_asm
l0002375C_thunk_gvmaccimw_asm:
	call gvmaccimw_asm (retsize: 0;)
	return
	// succ:  gvconv2dbbb_asm_exit
l000238E4:
	p0 = r1 == r0
	branch p0 l000238E8
	goto l000238F0
	// succ:  l000238F0 l000238E8
l000238E8:
	r0 = r0 + 4<i32>
	r10 = Mem0[r0:word32]
	r8 = 0x36<32>
	r0 = r0
	// succ:  l000238F0
l000238F0:
	r0 = r0 + 4<i32>
	r10 = Mem0[r0:word32]
	r8 = 0x36<32>
	r0 = r0
	p0 = r10 == -1<i32>
	branch p0 l00023530
	// succ:  l00023900 l00023530 l000238F0
l00023900:
	p0 = r1 == r4
	branch p0 l000238F0
l00023FA0:
	r25_r24 = r25_r24 + __vraddub<word64,word64>(r19_r18, r21_r20)
	p0 = r4 >u 8<32>
	branch p0 l000242A4
	// succ:  l00023FA8 l000242A4
l00023FA8:
	r27_r26 = r27_r26 + __vraddub<word64,word64>(r17_r16, r15_r14)
	p0 = r14 >u 8<32>
	branch p0 l000240C4
l0002403C:
	r11 = r11 + m0
	r21_r20 = Mem0[r11:word64]
	p0 = r15 >u 0xB<32>
	branch p0 l00024140
	// succ:  l00024050 l00024140 l00024340
l00024050:
	p0 = r1 >u 0xB<32>
	branch p0 l00024340
l00024088:
	r7 = 0<32>
	// succ:  l00024088_thunk_fn000241C4
l00024088_thunk_fn000241C4:
	call fn000241C4 (retsize: 0;)
	return
	// succ:  gvconv2dbbb_asm_exit
l00024090:
	r28 = r28 + r8
	r15_r14 = Mem0[r11 + 8<i32>:word64]
	r11 = r11 + m0
	r21_r20 = Mem0[r11:word64]
	// succ:  l0002409C l00024090_thunk_fn000241C4
l00024090_thunk_fn000241C4:
	call fn000241C4 (retsize: 0;)
	return
	// succ:  gvconv2dbbb_asm_exit
l0002409C:
	r28 = r28 + r8
	r15_r14 = Mem0[r11 + 8<i32>:word64]
	r11 = r11 + m0
	r21_r20 = Mem0[r11:word64]
	p0 = r3 >u 0xB<32>
	branch p0 l000243A0
	// succ:  l000240AC_thunk_fn00023EE0 l000240AC_thunk_fn000241C4
l000240AC_thunk_fn00023EE0:
	call fn00023EE0 (retsize: 0;)
	return
	// succ:  gvconv2dbbb_asm_exit
l000240AC_thunk_fn000241C4:
	call fn000241C4 (retsize: 0;)
	return
	// succ:  gvconv2dbbb_asm_exit
l00024140:
	r2 = 0xE<32>
	r8 = r8
	r26 = r6
	r27 = r26 + r27
	p1 = r0 == 0xE<32>
	branch p1 l00023D88
	goto l00024150
	// succ:  l00024150 l00024144_thunk_fn00024178
l00024144_thunk_fn00024178:
	call fn00024178 (retsize: 0;)
	return
	// succ:  gvconv2dbbb_asm_exit
l00024150:
	r26 = r26 + r14 * r27
	p0 = r10 == -1<i32>
	branch p0 l00023FA0
	// succ:  l00024154_thunk_fn00024160 l00023FA0 l00024154_thunk_fn00024178
l00024154_thunk_fn00024160:
	call fn00024160 (retsize: 0;)
	return
	// succ:  gvconv2dbbb_asm_exit
l00024154_thunk_fn00024178:
	call fn00024178 (retsize: 0;)
	return
	// succ:  gvconv2dbbb_asm_exit
l000242A4:
	r15_r14 = Mem0[r11 + 8<i32>:word64]
	r11 = r11 + m0
	r21_r20 = Mem0[r11:word64]
	goto l00024460
	// succ:  l00024460
l00024340:
	p0 = r2 >u 0xA<32>
	branch p0 l00024644
	goto l00024350
	// succ:  l00024350 l00024340_thunk_fn000241C4
l00024340_thunk_fn000241C4:
	call fn000241C4 (retsize: 0;)
	return
	// succ:  gvconv2dbbb_asm_exit
l00024350:
	p0 = r0 >u 0xA<32>
	branch p0 l00024644
l00024400:
	r11 = r11 - r23
	r10 = r10 + 4<i32>
	r0 = Mem0[r10:word32]
	p0 = r0 == -1<i32>
	branch p0 l00024050
	// succ:  l00024414 l00024050
l00024414:
	r26 = r11 + 0x40<32>
	r5 = Mem0[r29 + 60<i32>:word32]
	r2 = r2 + r5
	p0 = r22 > 1<32>
	p0 = r4 == r0
	branch p0 l00024414
	// succ:  l00024424 l00024414
l00024424:
	r2 = 6<32>
	r0 = r0
	r12 = r0
	goto l0002403C
	// succ:  l0002403C
l00024460:
	p0 = r6 == r2
	branch p0 l00024464
	goto l00024468
	// succ:  l00024468 l00024464
l00024464:
	r2 = 0xE<32>
	r8 = r8
	// succ:  l00024468
l00024468:
	r2 = 0xE<32>
	r8 = r8
	p1 = r0 == 0xE<32>
	branch p1 l000240AC
	// succ:  l00024470 l00024470_thunk_fn00023EE0
l00024470:
	r10 = r10 + 4<i32>
	r0 = Mem0[r10:word32]
	p0 = r0 == -1<i32>
	branch p0 l000240BC
l00024470_thunk_fn00023EE0:
	call fn00023EE0 (retsize: 0;)
	return
	// succ:  gvconv2dbbb_asm_exit
l00024478:
	r12 = r2
	// succ:  l0002447C l00024478_thunk_fn00023EE0 l00024088 l00024090
l00024478_thunk_fn00023EE0:
	call fn00023EE0 (retsize: 0;)
	return
	// succ:  gvconv2dbbb_asm_exit
l0002447C:
	r22 = r22 + 0xFFFFFFFC<32>
	r12 = r2
l00024518:
	r2 = 2<32>
	// succ:  l00024540
l00024540:
	r6 = Mem0[r29 + 4<i32>:word32]
	r6 = SLICE(SLICE(r8, word16, 0) *64 SLICE(r6, word16, 0), word16, 32)
	p0 = r6 == 1<32>
	__dcfetch(r0, 0x20<32>)
	Mem0[r29 + 4<i32>:word32] = r6
	r6 = Mem0[r29 + 8<i32>:word32]
	r14 = Mem0[r29 + 36<i32>:word32]
	r15 = Mem0[r29 + 40<i32>:word32]
	r14 = 0<32>
	r0 = r0
	p0 = r15 == -1<i32>
	branch p0 l000241C4
	goto l00024570
	// succ:  l00024570 l00024564_thunk_fn000241C4
l00024564_thunk_fn000241C4:
	call fn000241C4 (retsize: 0;)
	return
	// succ:  gvconv2dbbb_asm_exit
l00024570:
	r11 = Mem0[r29 + 20<i32>:word32]
	v66 = r29 - 8<i32>
	Mem0[v66:word32] = r30
	Mem0[v66 + 4<i32>:word32] = r31
	r30 = v66
	r29 = v66 - 72<i32>
	r25 = r8 >>u 0x10<32>
	Mem0[r29 + 32<i32>:word64] = r25_r24
	Mem0[r29:word64] = r17_r16
	r8 = SLICE(SLICE(r8, word16, 16) *64 SLICE(r8, word16, 0), word16, 32)
	Mem0[r29 + 16<i32>:word64] = r21_r20
	Mem0[r29 + 24<i32>:word64] = r23_r22
	M0 = r8
	r21 = 0x60<32>
	Mem0[r29 + 8<i32>:word64] = r19_r18
	Mem0[r29 + 40<i32>:word64] = r27_r26
	r12 = r8 + (r8 << 1<32>)
	r16 = 0x80000001<32>
	r11 = 0<32>
	r0 = r0
	r23 = r6 * r3
	p0 = r0 == -1<i32>
	branch p0 l00024400
	// succ:  l000245B4 l00024400
l000245B4:
	r12 = 0x10<32> - r12
	Mem0[r29 + 56<i32>:word32] = r4
	M1 = r12
	r21 = r21 + 0xFFFFFFE0<32>
	r6 = Mem0[r29 + 84<i32>:word32]
	// succ:  l000245C0
l000245C0:
	r21 = r8 << 2<32>
	p3 = r6 > 0xC0<32>
	Mem0[r29 + 68<i32>:word32] = r21
	// succ:  l000245C0_thunk_fn000241C4
l000245C0_thunk_fn000241C4:
	call fn000241C4 (retsize: 0;)
	return
	// succ:  gvconv2dbbb_asm_exit
l00024660:
	r15 = r15
	goto l00024824
	// succ:  l00024824
l000246D0:
	p0 = r3 >u 9<32>
	branch p0 l000249D0
	// succ:  l000246DC l000249CC l000249D0
l000246DC:
	p0 = r3 >u 9<32>
	branch p0 l000249CC
l000246F0:
	p0 = r1 >u 0xB<32>
	branch p0 l000249F0
	// succ:  l000246FC l000247EC l000249EC l000249F0
l000246FC:
	p0 = r1 >u 0xB<32>
	branch p0 l000249EC
l00024764:
	p0 = r4 >u 8<32>
	branch p0 l00024A64
	// succ:  l00024770 l00024A64
l00024770:
	r28 = r28 + r8
	__dcfetch(r28, 0<32>)
	r5_r4 = r5_r4 + __vraddub<word64,word64>(r17_r16, r19_r18)
	p0 = r2 >u 8<32>
	branch p0 l00024A70
	// succ:  l00024780 l00024A70
l00024780:
	p3 = r7 == 1<32>
	r9 = 0x10<32>
	r2 = r2 & 1<i32>
	p0 = r5 >u 9<32>
	branch p0 l00024A80
	// succ:  l00024790 l00024A80
l00024790:
	p0 = r3 >u 9<32>
	branch p0 l00024A80
l000247EC:
	__dcfetch(r11, 0x40<32>)
	p0 = r0 >u 0xA<32>
	branch p0 l00024AF4
	// succ:  l00024800 l00024AF4
l00024800:
	r28 = r28 + r8
	r15_r14 = Mem0[r11 + 8<i32>:word64]
	r11 = r11 + m0
	r21_r20 = Mem0[r11:word64]
	p0 = r3 >u 0xB<32>
	branch p0 l00024B04
	// succ:  l00024810 l00024B04
l00024810:
	p0 = r1 >u 0xB<32>
	branch p0 l00024B04
l00024824:
	r1 = r0 + r1
	r20 = 1<32>
	r10 = Mem0[r29 + 96<i32>:word32]
	// succ:  l00024824_thunk_fn000241C4
l00024824_thunk_fn000241C4:
	call fn000241C4 (retsize: 0;)
	return
	// succ:  gvconv2dbbb_asm_exit
l00024854:
	r4 = r6
	r5 = r4 + r5
	p0 = r4 == r0
	branch p0 l00024854
	// succ:  l00024860 l00024854
l00024860:
	r4 = r4 + r14 * r5
	p0 = __bit<word32,word32>(r0, 0<32>)
	branch p0 l000246F0
	// succ:  l00024870 l000246F0 l00024478
l00024870:
	r12 = r0
l00024900:
	r26 = r26 + r14 * r27
	p0 = r0 == r6
	branch p0 l00024854
	// succ:  l00024910 l00024854 l00024518
l00024910:
	r12 = r2
l0002491C:
	r20 = p1 ? 1<32> : 0x10<32>
	r7 = r7 + r15
	p0 = r7 == r3
	branch p0 l00024920
	goto l0002492C
	// succ:  l0002492C l00024920
l00024920:
	r7 = r7 + r15
	p0 = r7 == r3
	branch p0 l00024924
	goto l0002492C
	// succ:  l0002492C l00024924
l00024924:
	p0 = r7 == r3
	branch p0 l00024928
	goto l0002492C
	// succ:  l0002492C l00024928
l00024928:
	r2 = 0xC<32>
	r8 = r8
	// succ:  l0002492C
l0002492C:
	r2 = 0xC<32>
	r8 = r8
	r2 = r2 + r15
	r10 = r10
	goto l000245C0
	// succ:  l000245C0
l000249CC:
	r25_r24 = Mem0[r29 + 32<i32>:word64]
	r27_r26 = Mem0[r29 + 40<i32>:word64]
	// succ:  l000249D0
l000249D0:
	r28 = Mem0[r29 + 64<i32>:word32]
	v30 = r30
	r31 = Mem0[v30 + 4<i32>:word32]
	r30 = Mem0[v30:word32]
	r29 = v30 + 8<i32>
	return
	// succ:  gvconv2dbbb_asm_exit
l000249E0:
	r8 = 0x1010101<32>
	r9 = 0x20<32>
	__dcfetch(r0, 0<32>)
	// succ:  l000249EC
l000249EC:
	// succ:  l000249F0
l000249F0:
	r9 = 0x40<32>
	r6 = 0x8000<32>
	p0 = r9 == -1<i32>
	branch p0 l00024678
	goto l00024A00
	// succ:  l00024A00 l000249F0_thunk_fn000241C4
l000249F0_thunk_fn000241C4:
	call fn000241C4 (retsize: 0;)
	return
	// succ:  gvconv2dbbb_asm_exit
l00024A00:
	p0 = r8 == -1<i32>
	branch p0 l00024764
	// succ:  l00024A00_thunk_fn000241C4 l00024764 l00024660
l00024A00_thunk_fn000241C4:
	call fn000241C4 (retsize: 0;)
	return
	// succ:  gvconv2dbbb_asm_exit
l00024A64:
	p3 = r7 > 0xC0<32>
	r15 = Mem0[r29 + 32<i32>:word32]
	r14 = 0<32>
	r0 = r0
	// succ:  l00024A70
l00024A70:
	p0 = r15 == -1<i32>
	branch p0 l000246D0
	// succ:  l00024A7C l000246D0
l00024A7C:
	r28 = 0x60<32>
	v77 = r29 - 8<i32>
	Mem0[v77:word32] = r30
	Mem0[v77 + 4<i32>:word32] = r31
	r30 = v77
	r29 = v77 - 72<i32>
	r28 = r28 + 0xFFFFFFE0<32>
	Mem0[r29 + 68<i32>:word32] = r28
	goto l00024A84
	// succ:  l00024A84
l00024A80:
	Mem0[r29 + 68<i32>:word32] = r28
	// succ:  l00024A84
l00024A84:
	r25 = r6 >>u 0x10<32>
	Mem0[r29 + 32<i32>:word64] = r25_r24
	Mem0[r29:word64] = r17_r16
	r6 = SLICE(SLICE(r6, word16, 16) *64 SLICE(r6, word16, 0), word16, 32)
	Mem0[r29 + 16<i32>:word64] = r21_r20
	Mem0[r29 + 24<i32>:word64] = r23_r22
	M0 = r6
	Mem0[r29 + 8<i32>:word64] = r19_r18
	Mem0[r29 + 40<i32>:word64] = r27_r26
	r17 = r6 << 2<32>
	Mem0[r29 + 48<i32>:word32] = r0
	Mem0[r29 + 52<i32>:word32] = r1
	r28 = r17 + 0<32>
	r1 = r6 + (r6 << 1<32>)
	r16 = 0x80000001<32>
	r11 = 0<32>
	r0 = r0
	r23 = r8 * r3
	p0 = r0 == -1<i32>
	branch p0 l0002491C
	// succ:  l00024AD0 l0002491C
l00024AD0:
	r1 = 0x10<32> - r1
	Mem0[r29 + 56<i32>:word32] = r4
	M1 = r1
	r13 = r6 << 1<32>
	r1 = r1 + 0x10<32>
	r7 = r7 >>u 4<32>
	r23 = r23 - r13
	r13 = r7 - r3
	Mem0[r29 + 60<i32>:word32] = r5
	r3 = r3 * r25
	r7 = r7 + 0xFFFFFFFF<32>
	r1 = r1 - r6
	r12 = 0<32>
	r0 = r0
	// succ:  l00024AF4
l00024AF4:
	r9 = r9 + 0xFFFFFFFF<32>
	r11 = Mem0[r29 + 48<i32>:word32]
	// succ:  l00024B04
l00024B04:
	r26 = r11 + r28
	r22 = Mem0[r29 + 56<i32>:word32]
	Mem0[r29 + 48<i32>:word32] = Mem0[r29 + 48<i32>:word32] + r3
	p2 = !(r2 == r2)
	r24 = Mem0[r29 + 52<i32>:word32]
	__loop(1<i32>, 0x00024B60<p32>, r8)
	r8 = Mem0[r1 + 2<i32>:word16]
	r2 = Mem0[r0 + 2<i32>:byte]
	__dcfetch(r26, 0<32>)
	__loop(0<i32>, 0x00024BC0<p32>, r7)
	r26 = r26 + r6
	r8 = 1<32>
	r3_r2 = SEQ(r7, 0<32>)
	r15 = r15
	// succ:  l00024D00
l00024D00:
	p0 = r2 == r1
	branch p0 l00024F08
	// succ:  l00024D08 l00024F08 l00024900
l00024D08:
	p1 = r0 == 0xE<32>
	branch p1 l00024900
l00024E8C:
	r18 = Mem0[r5:word32]
	r2 = Mem0[r3:word32]
	r16 = Mem0[r5:word32]
	r2 = Mem0[r1:word32]
	r18 = Mem0[r2:word32]
	r6 = Mem0[r5:word32]
	r18 = Mem0[r3:word32]
	r4 = Mem0[r4:word32]
	r1 = Mem0[r4:word32]
	r4 = Mem0[r5:word32]
	// succ:  l00024EA0
l00024EA0:
	r20 = Mem0[r5:word32]
	r22 = Mem0[r3:word32]
	r0 = Mem0[r5:word32]
	r2 = Mem0[r5:word32]
	r0 = Mem0[r0:word32]
	r0 = Mem0[r0:word32]
	r0 = Mem0[r0:word32]
	r0 = Mem0[r0:word32]
	r19 = Mem0[r17:word32]
	r5 = Mem0[r20:word32]
	r7 = Mem0[r21 + 4<i32>:word32]
	r20 = Mem0[r0 + 8<i32>:word32]
	r21 = Mem0[r2 + 8<i32>:word32]
	r7 = Mem0[r23 + 4<i32>:word32]
	r3 = Mem0[r3 + 8<i32>:word32]
	r7 = Mem0[r2 + 8<i32>:word32]
	r22 = Mem0[r23 + 4<i32>:word32]
	r4 = Mem0[r6:word32]
	r7 = Mem0[r21 + 4<i32>:word32]
	r23 = Mem0[r21 + 4<i32>:word32]
	r21 = Mem0[r2 + 8<i32>:word32]
	r7 = Mem0[r23 + 4<i32>:word32]
	r3 = Mem0[r3 + 8<i32>:word32]
	r7 = Mem0[r2 + 8<i32>:word32]
	r22 = Mem0[r23 + 4<i32>:word32]
	r4 = Mem0[r6:word32]
	r19 = Mem0[r17:word32]
	r7 = Mem0[r20 + 4<i32>:word32]
	r3 = Mem0[r5 + 4<i32>:word32]
	r5 = Mem0[r1 + 4<i32>:word32]
	r19 = Mem0[r16 + 4<i32>:word32]
	r4 = Mem0[r17 + 4<i32>:word32]
	r1 = Mem0[r21:word32]
	r23 = Mem0[r19 + 4<i32>:word32]
	r17 = Mem0[r4 + 4<i32>:word32]
	r18 = Mem0[r0 + 4<i32>:word32]
	r2 = Mem0[r16 + 4<i32>:word32]
	r23 = Mem0[r3 + 4<i32>:word32]
	r21 = Mem0[r21:word32]
	r16 = Mem0[r19:word32]
	r23 = Mem0[r22 + 4<i32>:word32]
	r19 = Mem0[r17:word32]
	r7 = Mem0[r22 + 4<i32>:word32]
	r21 = Mem0[r5 + 4<i32>:word32]
	r5 = Mem0[r0 + 8<i32>:word32]
	r20 = Mem0[r0 + 8<i32>:word32]
	r23 = Mem0[r21 + 4<i32>:word32]
	r0 = Mem0[r2 + 4<i32>:word32]
	r22 = Mem0[r23 + 4<i32>:word32]
	r21 = Mem0[r17 + 4<i32>:word32]
	r19 = Mem0[r17:word32]
	r19 = Mem0[r18:word32]
	// succ:  l00024F08
l00024F08:
	r23 = Mem0[r22 + 4<i32>:word32]
	r0 = Mem0[r7 + 4<i32>:word32]
	r4 = Mem0[r23:word32]
	r23 = Mem0[r23:word32]
	r7 = Mem0[r19 + 4<i32>:word32]
	r17 = Mem0[r22:word32]
	r19 = Mem0[r17:word32]
	r2 = Mem0[r4:word32]
	r7 = Mem0[r21 + 4<i32>:word32]
	r23 = Mem0[r22 + 4<i32>:word32]
	r21 = Mem0[r2 + 8<i32>:word32]
	r7 = Mem0[r23 + 4<i32>:word32]
	r3 = Mem0[r3 + 8<i32>:word32]
	r7 = Mem0[r2 + 8<i32>:word32]
	r19 = Mem0[r17:word32]
	r16 = Mem0[r1:word32]
	r19 = Mem0[r2 + 4<i32>:word32]
	r5 = Mem0[r3 + 4<i32>:word32]
	r23 = Mem0[r22 + 4<i32>:word32]
	r2 = Mem0[r16:word32]
	r0 = Mem0[r17:word32]
	r19 = Mem0[r16:word32]
	r23 = Mem0[r22 + 4<i32>:word32]
	r19 = Mem0[r16:word32]
	r19 = Mem0[r17:word32]
	r3 = Mem0[r7:word32]
	r3 = Mem0[r1 + 8<i32>:word32]
	r1 = Mem0[r2 + 8<i32>:word32]
	r1 = Mem0[r4 + 8<i32>:word32]
	r19 = Mem0[r17:word32]
	r19 = Mem0[r17:word32]
	r6 = Mem0[r18 + 4<i32>:word32]
	r4 = Mem0[r5:word32]
	r1 = Mem0[r4 + 8<i32>:word32]
	r20 = Mem0[r3:word32]
	r19 = Mem0[r17:word32]
	r1 = Mem0[r4 + 8<i32>:word32]
	r7 = Mem0[r6 + 4<i32>:word32]
	r21 = Mem0[r3 + 8<i32>:word32]
	r0 = Mem0[r0:word32]
	r21 = Mem0[r3 + 8<i32>:word32]
	r23 = Mem0[r18 + 4<i32>:word32]
	r20 = Mem0[r3:word32]
	r22 = Mem0[r2:word32]
	r19 = Mem0[r17:word32]
	r17 = Mem0[r7 + 4<i32>:word32]
	r19 = Mem0[r17:word32]
	r23 = Mem0[r20 + 4<i32>:word32]
	r16 = Mem0[r3 + 8<i32>:word32]
	r22 = Mem0[r17:word32]
	r0 = Mem0[r0:word32]
	r18 = Mem0[r1 + 8<i32>:word32]
	Mem0[gp + 42152<i32>:word16] = SLICE(r5, word16, 16)
	r22 = !(r18 == 0x2A<32>)
	r12 = r19 + 0x6EBDA4B<32>
	r3 = r3 + 0xFFFFFFD7<32>
	Mem0[r7:word32] = r3
	r21_r20 = modectl_evb
	r23 = !(r18 == 0x2B<32>)
	r1 = r6
	Mem0[r6:word32] = r20
	p0 = r2 > 0xFFFFFF2B<32>
	branch <invalid> l00021298
	goto l00024FDC
	// succ:  l00024FDC l00024FD0_thunk_fn00021298
l00024FD0_thunk_fn00021298:
	call fn00021298 (retsize: 0;)
	return
	// succ:  gvconv2dbbb_asm_exit
l00024FDC:
	r5 = r5 + 0xFFFFFF9B<32>
	r5 = SEQ(0xC17D<16>, SLICE(r5, word16, 0))
	r6 = <invalid>
	r23 = r6
	Mem0[r6:word32] = r23
	r4 = 0x16<32>
	Mem0[r6:word32] = r4
	branch <invalid> l000212EC
	// succ:  l00025030 l000212EC
l00025030:
	r31 = r21 + 0x7A<32>
	r0 = r1 + 0x10<32>
	r3 = !(r5 == 0x43<32>)
	r31 = r21 + 0x7A<32>
	r0 = r16
	p0 = r15 > 0xFFFFFF18<32>
	r5 = SEQ(0xD1B9<16>, SLICE(r5, word16, 0))
	__crswap(r0, sgp0)
	p0 = !(r3 > 0xFFFFFF2B<32>)
	r16 = r16 + 0xFFFFFFD6<32>
	Mem0[r7:word32] = r3
	r9 = r8 + 0x3B<32>
	r31 = r21 + 0x7A<32>
	r0 = r1 + 0x10<32>
	r3 = !(r5 == 0x43<32>)
	r15 = r20
	g5_g4 = r1_r0
	__ciad(r0)
	r31 = r21 + 0x7A<32>
	__stop(r9)
	r18 = r14 + 0x4B<32>
	r31 = r21 + 0x7A<32>
	branch <invalid> l000238E4
	// succ:  l000250F0 l000238E4
l000250F0:
	r4 = r4 + 0x16<32>
	Mem0[r6:word32] = r22
	__ciad(r0)
	r23 = r4 + 0x6EA57CB<32>
	r0 = 0x4368<32>
	r31 = p0 ? 0xFFFFFF9A<32> : 0xFFFFFFD3<32>
	r3 = r29 + 0x9C<32>
	Mem0[r6:word32] = r5
	r14 = r0 & 0x1A3<32>
	__ciad(r0)
	__crswap(r0, sgp0)
	p0 = !(r3 > 0xFFFFFF2B<32>)
	r20 = r0 << 0x10<8>
	branch <invalid> l00021C18
	// succ:  l0002514C l00021C18
l0002514C:
	g18 = r0
	p1 = !(r16 > 0xFFFFFFA3<32>)
	r20 = r0 << 0x10<8>
	r5 = r29 + 0x9C<32>
	Mem0[r7:word32] = r4
	p1 = r16 > 0x64A57F3<32>
	pmuevtcfg = r0
	r3 = r29 + 0xD8<32>
	Mem0[r6:word32] = r7
	__ciad(r0)
	__stop(r9)
	__ciad(r0)
	r9 = r9 + 0x61D1873<32>
	r5 = SEQ(0xD801<16>, SLICE(r5, word16, 0))
	r0 = <invalid>
	r0 = 0x4B40<32>
	r15 = r1 + 0x1B<32>
	r3 = Mem0[r6:word32]
	r5 = Mem0[r6 + 12<i32>:word16]
	branch r15 == r4 l00024E8C
	// succ:  l000251D8 l00024E8C
l000251D8:
	r1 = r29 + 0x18<32>
	Mem0[r7:word32] = r3
	__stop(r1)
	r1_r0 = <invalid>
	p0 = p3 & p1
	r1_r0 = vid_ipend
	r1_r0 = <invalid>
	r6 = r6
	p0 = p3 & p1
	r1_r0 = <invalid>
	r1 = r29 + 0x18<32>
	Mem0[r6 + 8<i32>:word16] = r19
	r1 = r29 + 0x18<32>
	Mem0[r7 + 8<i32>:word16] = r17
	branch <invalid> l00023100
	goto l00025234
	// succ:  l00025234 l00025228_thunk_im2col7732_asm
l00025228_thunk_im2col7732_asm:
	call im2col7732_asm (retsize: 0;)
	return
	// succ:  gvconv2dbbb_asm_exit
l00025234:
	r1 = r29 + 0x18<32>
	r6 = r6 + 0x16<32>
	Mem0[r6 + 8<i32>:word16] = r3
	r9 = Mem0[r0 - 29<i32>:int8]
	r4 = r4 + 6<32>
	r0 = r0 + 0xFFFFFFD2<32>
	r0 = r0 + 4<32>
	r3 = r3 + 7<32>
	r4 = r4 + 6<32>
	branch r0 == r16 l00024EA0
	// succ:  l00025264 l00024EA0
l00025264:
	r4 = 7<32>
	Mem0[r6 + 8<i32>:word16] = r5
	p0 = r8 > 0xFFFFFF19<32>
	r3 = 0x17<32>
	Mem0[r6 + 8<i32>:word16] = r7
	r3 = 0x17<32>
	r5 = r5 + r2
	Mem0[r7 + 8<i32>:word16] = r3
	r0 = r1 + 0xFFFFFFB8<32>
	branch <invalid> l00023758
	// succ:  l000252A4 l00023758
l000252A4:
	r19_r18 = SEQ(0x5B<32>, r0)
	r1 = Mem0[r23 + r25 * 4<32>:word16]
	r4 = r4 + 6<32>
	r0 = r0 + 0xFFFFFFD2<32>
	r6 = r6
	Mem0[r7:word32] = r3
	r5 = r2
	Mem0[r4 + 8<i32>:word16] = r0
	r2 = r2 + 0x16<32>
	Mem0[r3 + 8<i32>:word16] = r18
	r13_r12 = SEQ(0xFFFFFFC3<32>, r0)
	r5 = <invalid>
	r7_r6 = <invalid>
	r4 = r4 + 6<32>
	r0 = r0 + 0xFFFFFFD2<32>
	r5 = r2
	Mem0[r4 + 8<i32>:word16] = r0
	r1_r0 = <invalid>
	r1 = r29 + 0x18<32>
	Mem0[r6:word32] = r4
	reserved8197 = r0
	r25 = !(r5 == 0xFFFFFFA3<32>)
	r19 = -1<i32>
	r0 = Mem0[r7:word32]
	branch !p2 l00025328
	// succ:  l00025324_1 l00025328
l00025324_1:
	call fn00034A00 (retsize: 0;)
	r7 = r7 + 0x15<32>
	Mem0[r3 + 8<i32>:word16] = r18
l00025328:
	r7 = r7 + 0x15<32>
	Mem0[r3 + 8<i32>:word16] = r18
gvconv2dbbb_asm_exit:


