// _init
// Return size: 0
void _init()
_init_entry:
	// succ:  l000000000041C1E8
l000000000041C1E8:
	sp = fp
	sp = sp + -16
	Mem0[sp:word64] = x29
	sp = sp + 8
	Mem0[sp:word64] = x30
	x29 = x31 + 0x0000000000000000
	call fn000000000041E7B0 (retsize: 0;)
	x29 = Mem0[sp:word64]
	sp = sp + 8
	x30 = Mem0[sp:word64]
	sp = sp + 16
	return
	// succ:  _init_exit
_init_exit:


// mbrtowc
// Return size: 0
void mbrtowc()
mbrtowc_entry:
mbrtowc_exit:


// memcpy
// Return size: 0
void memcpy()
memcpy_entry:
memcpy_exit:


// endservent
// Return size: 0
void endservent()
endservent_entry:
endservent_exit:


// memmove
// Return size: 0
void memmove()
memmove_entry:
memmove_exit:


// gai_strerror
// Return size: 0
void gai_strerror()
gai_strerror_entry:
gai_strerror_exit:


// getcwd
// Return size: 0
void getcwd()
getcwd_entry:
getcwd_exit:


// freeaddrinfo
// Return size: 0
void freeaddrinfo()
freeaddrinfo_entry:
freeaddrinfo_exit:


// setuid
// Return size: 0
void setuid()
setuid_entry:
setuid_exit:


// strtoul
// Return size: 0
void strtoul()
strtoul_entry:
strtoul_exit:


// strlen
// Return size: 0
void strlen()
strlen_entry:
strlen_exit:


// getpeername
// Return size: 0
void getpeername()
getpeername_entry:
getpeername_exit:


// fputs
// Return size: 0
void fputs()
fputs_entry:
fputs_exit:


// __sprintf_chk
// Return size: 0
void __sprintf_chk()
__sprintf_chk_entry:
__sprintf_chk_exit:


// mbstowcs
// Return size: 0
void mbstowcs()
mbstowcs_entry:
mbstowcs_exit:


// exit
// Return size: 0
void exit()
exit_entry:
exit_exit:


// dup
// Return size: 0
void dup()
dup_entry:
dup_exit:


// tcsetpgrp
// Return size: 0
void tcsetpgrp()
tcsetpgrp_entry:
tcsetpgrp_exit:


// mbtowc
// Return size: 0
void mbtowc()
mbtowc_entry:
mbtowc_exit:


// getegid
// Return size: 0
void getegid()
getegid_entry:
getegid_exit:


// sbrk
// Return size: 0
void sbrk()
sbrk_entry:
sbrk_exit:


// wctype
// Return size: 0
void wctype()
wctype_entry:
wctype_exit:


// sigprocmask
// Return size: 0
void sigprocmask()
sigprocmask_entry:
sigprocmask_exit:


// strnlen
// Return size: 0
void strnlen()
strnlen_entry:
strnlen_exit:


// geteuid
// Return size: 0
void geteuid()
geteuid_entry:
geteuid_exit:


// tputs
// Return size: 0
void tputs()
tputs_entry:
tputs_exit:


// __sigsetjmp
// Return size: 0
void __sigsetjmp()
__sigsetjmp_entry:
__sigsetjmp_exit:


// ttyname
// Return size: 0
void ttyname()
ttyname_entry:
ttyname_exit:


// readlink
// Return size: 0
void readlink()
readlink_entry:
readlink_exit:


// getuid
// Return size: 0
void getuid()
getuid_entry:
getuid_exit:


// pipe
// Return size: 0
void pipe()
pipe_entry:
pipe_exit:


// opendir
// Return size: 0
void opendir()
opendir_entry:
opendir_exit:


// strftime
// Return size: 0
void strftime()
strftime_entry:
strftime_exit:


// fputc
// Return size: 0
void fputc()
fputc_entry:
fputc_exit:


// setrlimit
// Return size: 0
void setrlimit()
setrlimit_entry:
setrlimit_exit:


// qsort
// Return size: 0
void qsort()
qsort_entry:
qsort_exit:


// dlclose
// Return size: 0
void dlclose()
dlclose_entry:
dlclose_exit:


// setvbuf
// Return size: 0
void setvbuf()
setvbuf_entry:
setvbuf_exit:


// kill
// Return size: 0
void kill()
kill_entry:
kill_exit:


// pathconf
// Return size: 0
void pathconf()
pathconf_entry:
pathconf_exit:


// fork
// Return size: 0
void fork()
fork_entry:
fork_exit:


// endgrent
// Return size: 0
void endgrent()
endgrent_entry:
endgrent_exit:


// lseek
// Return size: 0
void lseek()
lseek_entry:
lseek_exit:


// eaccess
// Return size: 0
void eaccess()
eaccess_entry:
eaccess_exit:


// tgoto
// Return size: 0
void tgoto()
tgoto_entry:
tgoto_exit:


// sigfillset
// Return size: 0
void sigfillset()
sigfillset_entry:
sigfillset_exit:


// dlopen
// Return size: 0
void dlopen()
dlopen_entry:
dlopen_exit:


// __ctype_tolower_loc
// Return size: 0
void __ctype_tolower_loc()
__ctype_tolower_loc_entry:
__ctype_tolower_loc_exit:


// tcgetattr
// Return size: 0
void tcgetattr()
tcgetattr_entry:
tcgetattr_exit:


// stpcpy
// Return size: 0
void stpcpy()
stpcpy_entry:
stpcpy_exit:


// fileno
// Return size: 0
void fileno()
fileno_entry:
fileno_exit:


// localtime
// Return size: 0
void localtime()
localtime_entry:
localtime_exit:


// __memcpy_chk
// Return size: 0
void __memcpy_chk()
__memcpy_chk_entry:
__memcpy_chk_exit:


// __snprintf_chk
// Return size: 0
void __snprintf_chk()
__snprintf_chk_entry:
__snprintf_chk_exit:


// wcschr
// Return size: 0
void wcschr()
wcschr_entry:
wcschr_exit:


// fclose
// Return size: 0
void fclose()
fclose_entry:
fclose_exit:


// wctob
// Return size: 0
void wctob()
wctob_entry:
wctob_exit:


// getpid
// Return size: 0
void getpid()
getpid_entry:
getpid_exit:


// fopen
// Return size: 0
void fopen()
fopen_entry:
fopen_exit:


// __vsnprintf_chk
// Return size: 0
void __vsnprintf_chk()
__vsnprintf_chk_entry:
__vsnprintf_chk_exit:


// time
// Return size: 0
void time()
time_entry:
time_exit:


// iswctype
// Return size: 0
void iswctype()
iswctype_entry:
iswctype_exit:


// wcwidth
// Return size: 0
void wcwidth()
wcwidth_entry:
wcwidth_exit:


// dlerror
// Return size: 0
void dlerror()
dlerror_entry:
dlerror_exit:


// dlsym
// Return size: 0
void dlsym()
dlsym_entry:
dlsym_exit:


// open
// Return size: 0
void open()
open_entry:
open_exit:


// __fdelt_chk
// Return size: 0
void __fdelt_chk()
__fdelt_chk_entry:
__fdelt_chk_exit:


// __strncpy_chk
// Return size: 0
void __strncpy_chk()
__strncpy_chk_entry:
__strncpy_chk_exit:


// tzset
// Return size: 0
void tzset()
tzset_entry:
tzset_exit:


// __strcpy_chk
// Return size: 0
void __strcpy_chk()
__strcpy_chk_entry:
__strcpy_chk_exit:


// wcswidth
// Return size: 0
void wcswidth()
wcswidth_entry:
wcswidth_exit:


// getppid
// Return size: 0
void getppid()
getppid_entry:
getppid_exit:


// __strtol_internal
// Return size: 0
void __strtol_internal()
__strtol_internal_entry:
__strtol_internal_exit:


// sigemptyset
// Return size: 0
void sigemptyset()
sigemptyset_entry:
sigemptyset_exit:


// strncmp
// Return size: 0
void strncmp()
strncmp_entry:
strncmp_exit:


// wcsncmp
// Return size: 0
void wcsncmp()
wcsncmp_entry:
wcsncmp_exit:


// bindtextdomain
// Return size: 0
void bindtextdomain()
bindtextdomain_entry:
bindtextdomain_exit:


// __libc_start_main
// Return size: 0
void __libc_start_main()
__libc_start_main_entry:
__libc_start_main_exit:


// strcat
// Return size: 0
void strcat()
strcat_entry:
strcat_exit:


// __printf_chk
// Return size: 0
void __printf_chk()
__printf_chk_entry:
__printf_chk_exit:


// __fpurge
// Return size: 0
void __fpurge()
__fpurge_entry:
__fpurge_exit:


// tgetflag
// Return size: 0
void tgetflag()
tgetflag_entry:
tgetflag_exit:


// memset
// Return size: 0
void memset()
memset_entry:
memset_exit:


// fdopen
// Return size: 0
void fdopen()
fdopen_entry:
fdopen_exit:


// strpbrk
// Return size: 0
void strpbrk()
strpbrk_entry:
strpbrk_exit:


// gettimeofday
// Return size: 0
void gettimeofday()
gettimeofday_entry:
gettimeofday_exit:


// getpwnam
// Return size: 0
void getpwnam()
getpwnam_entry:
getpwnam_exit:


// wcslen
// Return size: 0
void wcslen()
wcslen_entry:
wcslen_exit:


// getgroups
// Return size: 0
void getgroups()
getgroups_entry:
getgroups_exit:


// sleep
// Return size: 0
void sleep()
sleep_entry:
sleep_exit:


// tgetent
// Return size: 0
void tgetent()
tgetent_entry:
tgetent_exit:


// __vfprintf_chk
// Return size: 0
void __vfprintf_chk()
__vfprintf_chk_entry:
__vfprintf_chk_exit:


// __strtoul_internal
// Return size: 0
void __strtoul_internal()
__strtoul_internal_entry:
__strtoul_internal_exit:


// tgetnum
// Return size: 0
void tgetnum()
tgetnum_entry:
tgetnum_exit:


// getgrent
// Return size: 0
void getgrent()
getgrent_entry:
getgrent_exit:


// strcasecmp
// Return size: 0
void strcasecmp()
strcasecmp_entry:
strcasecmp_exit:


// readdir
// Return size: 0
void readdir()
readdir_entry:
readdir_exit:


// __ctype_toupper_loc
// Return size: 0
void __ctype_toupper_loc()
__ctype_toupper_loc_entry:
__ctype_toupper_loc_exit:


// getpagesize
// Return size: 0
void getpagesize()
getpagesize_entry:
getpagesize_exit:


// setpwent
// Return size: 0
void setpwent()
setpwent_entry:
setpwent_exit:


// closedir
// Return size: 0
void closedir()
closedir_entry:
closedir_exit:


// strerror
// Return size: 0
void strerror()
strerror_entry:
strerror_exit:


// close
// Return size: 0
void close()
close_entry:
close_exit:


// sigaction
// Return size: 0
void sigaction()
sigaction_entry:
sigaction_exit:


// strrchr
// Return size: 0
void strrchr()
strrchr_entry:
strrchr_exit:


// tcgetpgrp
// Return size: 0
void tcgetpgrp()
tcgetpgrp_entry:
tcgetpgrp_exit:


// fn000000000041C8B0
// Return size: 0
void fn000000000041C8B0()
fn000000000041C8B0_entry:
	// succ:  l000000000041C8B0
l000000000041C8B0:
	sp = fp
	x16 = 0x00000000004D6000
	x17 = Mem0[x16 + 840:word64]
	x16 = x16 + 0x0000000000000348
	call x17 (retsize: 0;)
	return
	// succ:  fn000000000041C8B0_exit
l000000000041C8B0:
fn000000000041C8B0_exit:


// write
// Return size: 0
void write()
write_entry:
write_exit:


// abort
// Return size: 0
void abort()
abort_entry:
abort_exit:


// setgid
// Return size: 0
void setgid()
setgid_entry:
setgid_exit:


// mbsinit
// Return size: 0
void mbsinit()
mbsinit_entry:
mbsinit_exit:


// access
// Return size: 0
void access()
access_entry:
access_exit:


// wcsrtombs
// Return size: 0
void wcsrtombs()
wcsrtombs_entry:
wcsrtombs_exit:


// __mbrlen
// Return size: 0
void __mbrlen()
__mbrlen_entry:
__mbrlen_exit:


// puts
// Return size: 0
void puts()
puts_entry:
puts_exit:


// memcmp
// Return size: 0
void memcmp()
memcmp_entry:
memcmp_exit:


// getrusage
// Return size: 0
void getrusage()
getrusage_entry:
getrusage_exit:


// textdomain
// Return size: 0
void textdomain()
textdomain_entry:
textdomain_exit:


// __asprintf_chk
// Return size: 0
void __asprintf_chk()
__asprintf_chk_entry:
__asprintf_chk_exit:


// _IO_putc
// Return size: 0
void _IO_putc()
_IO_putc_entry:
_IO_putc_exit:


// __fprintf_chk
// Return size: 0
void __fprintf_chk()
__fprintf_chk_entry:
__fprintf_chk_exit:


// strcmp
// Return size: 0
void strcmp()
strcmp_entry:
strcmp_exit:


// getpwuid
// Return size: 0
void getpwuid()
getpwuid_entry:
getpwuid_exit:


// __ctype_b_loc
// Return size: 0
void __ctype_b_loc()
__ctype_b_loc_entry:
__ctype_b_loc_exit:


// strtol
// Return size: 0
void strtol()
strtol_entry:
strtol_exit:


// wctomb
// Return size: 0
void wctomb()
wctomb_entry:
wctomb_exit:


// setpgid
// Return size: 0
void setpgid()
setpgid_entry:
setpgid_exit:


// strtold
// Return size: 0
void strtold()
strtold_entry:
strtold_exit:


// chdir
// Return size: 0
void chdir()
chdir_entry:
chdir_exit:


// __ctype_get_mb_cur_max
// Return size: 0
void __ctype_get_mb_cur_max()
__ctype_get_mb_cur_max_entry:
__ctype_get_mb_cur_max_exit:


// getgid
// Return size: 0
void getgid()
getgid_entry:
getgid_exit:


// getpgrp
// Return size: 0
void getpgrp()
getpgrp_entry:
getpgrp_exit:


// strncasecmp
// Return size: 0
void strncasecmp()
strncasecmp_entry:
strncasecmp_exit:


// connect
// Return size: 0
void connect()
connect_entry:
connect_exit:


// mbsnrtowcs
// Return size: 0
void mbsnrtowcs()
mbsnrtowcs_entry:
mbsnrtowcs_exit:


// killpg
// Return size: 0
void killpg()
killpg_entry:
killpg_exit:


// strchr
// Return size: 0
void strchr()
strchr_entry:
strchr_exit:


// setitimer
// Return size: 0
void setitimer()
setitimer_entry:
setitimer_exit:


// execve
// Return size: 0
void execve()
execve_entry:
execve_exit:


// fwrite
// Return size: 0
void fwrite()
fwrite_entry:
fwrite_exit:


// wcsdup
// Return size: 0
void wcsdup()
wcsdup_entry:
wcsdup_exit:


// __longjmp_chk
// Return size: 0
void __longjmp_chk()
__longjmp_chk_entry:
__longjmp_chk_exit:


// fcntl
// Return size: 0
void fcntl()
fcntl_entry:
fcntl_exit:


// setgrent
// Return size: 0
void setgrent()
setgrent_entry:
setgrent_exit:


// clearerr
// Return size: 0
void clearerr()
clearerr_entry:
clearerr_exit:


// dcngettext
// Return size: 0
void dcngettext()
dcngettext_entry:
dcngettext_exit:


// socket
// Return size: 0
void socket()
socket_entry:
socket_exit:


// fflush
// Return size: 0
void fflush()
fflush_entry:
fflush_exit:


// strcpy
// Return size: 0
void strcpy()
strcpy_entry:
strcpy_exit:


// getrlimit
// Return size: 0
void getrlimit()
getrlimit_entry:
getrlimit_exit:


// getservent
// Return size: 0
void getservent()
getservent_entry:
getservent_exit:


// endpwent
// Return size: 0
void endpwent()
endpwent_entry:
endpwent_exit:


// confstr
// Return size: 0
void confstr()
confstr_entry:
confstr_exit:


// __lxstat
// Return size: 0
void __lxstat()
__lxstat_entry:
__lxstat_exit:


// mbsrtowcs
// Return size: 0
void mbsrtowcs()
mbsrtowcs_entry:
mbsrtowcs_exit:


// getaddrinfo
// Return size: 0
void getaddrinfo()
getaddrinfo_entry:
getaddrinfo_exit:


// read
// Return size: 0
void read()
read_entry:
read_exit:


// tcsetattr
// Return size: 0
void tcsetattr()
tcsetattr_entry:
tcsetattr_exit:


// isatty
// Return size: 0
void isatty()
isatty_entry:
isatty_exit:


// iswupper
// Return size: 0
void iswupper()
iswupper_entry:
iswupper_exit:


// sysconf
// Return size: 0
void sysconf()
sysconf_entry:
sysconf_exit:


// gethostname
// Return size: 0
void gethostname()
gethostname_entry:
gethostname_exit:


// getpwent
// Return size: 0
void getpwent()
getpwent_entry:
getpwent_exit:


// select
// Return size: 0
void select()
select_entry:
select_exit:


// tgetstr
// Return size: 0
void tgetstr()
tgetstr_entry:
tgetstr_exit:


// iswalnum
// Return size: 0
void iswalnum()
iswalnum_entry:
iswalnum_exit:


// setservent
// Return size: 0
void setservent()
setservent_entry:
setservent_exit:


// __fxstat
// Return size: 0
void __fxstat()
__fxstat_entry:
__fxstat_exit:


// strchrnul
// Return size: 0
void strchrnul()
strchrnul_entry:
strchrnul_exit:


// strstr
// Return size: 0
void strstr()
strstr_entry:
strstr_exit:


// dcgettext
// Return size: 0
void dcgettext()
dcgettext_entry:
dcgettext_exit:


// wcscmp
// Return size: 0
void wcscmp()
wcscmp_entry:
wcscmp_exit:


// regexec
// Return size: 0
void regexec()
regexec_entry:
regexec_exit:


// strcoll
// Return size: 0
void strcoll()
strcoll_entry:
strcoll_exit:


// sigdelset
// Return size: 0
void sigdelset()
sigdelset_entry:
sigdelset_exit:


// regfree
// Return size: 0
void regfree()
regfree_entry:
regfree_exit:


// dup2
// Return size: 0
void dup2()
dup2_entry:
dup2_exit:


// regcomp
// Return size: 0
void regcomp()
regcomp_entry:
regcomp_exit:


// strncpy
// Return size: 0
void strncpy()
strncpy_entry:
strncpy_exit:


// strsignal
// Return size: 0
void strsignal()
strsignal_entry:
strsignal_exit:


// sigaddset
// Return size: 0
void sigaddset()
sigaddset_entry:
sigaddset_exit:


// towupper
// Return size: 0
void towupper()
towupper_entry:
towupper_exit:


// wcscoll
// Return size: 0
void wcscoll()
wcscoll_entry:
wcscoll_exit:


// umask
// Return size: 0
void umask()
umask_entry:
umask_exit:


// faccessat
// Return size: 0
void faccessat()
faccessat_entry:
faccessat_exit:


// __errno_location
// Return size: 0
void __errno_location()
__errno_location_entry:
__errno_location_exit:


// putchar
// Return size: 0
void putchar()
putchar_entry:
putchar_exit:


// __xstat
// Return size: 0
void __xstat()
__xstat_entry:
__xstat_exit:


// __memmove_chk
// Return size: 0
void __memmove_chk()
__memmove_chk_entry:
__memmove_chk_exit:


// alarm
// Return size: 0
void alarm()
alarm_entry:
alarm_exit:


// mblen
// Return size: 0
void mblen()
mblen_entry:
mblen_exit:


// waitpid
// Return size: 0
void waitpid()
waitpid_entry:
waitpid_exit:


// unlink
// Return size: 0
void unlink()
unlink_entry:
unlink_exit:


// getdtablesize
// Return size: 0
void getdtablesize()
getdtablesize_entry:
getdtablesize_exit:


// towlower
// Return size: 0
void towlower()
towlower_entry:
towlower_exit:


// fgets
// Return size: 0
void fgets()
fgets_entry:
fgets_exit:


// strcasestr
// Return size: 0
void strcasestr()
strcasestr_entry:
strcasestr_exit:


// tcflow
// Return size: 0
void tcflow()
tcflow_entry:
tcflow_exit:


// ioctl
// Return size: 0
void ioctl()
ioctl_entry:
ioctl_exit:


// setlocale
// Return size: 0
void setlocale()
setlocale_entry:
setlocale_exit:


// ferror
// Return size: 0
void ferror()
ferror_entry:
ferror_exit:


// wcrtomb
// Return size: 0
void wcrtomb()
wcrtomb_entry:
wcrtomb_exit:


// iswlower
// Return size: 0
void iswlower()
iswlower_entry:
iswlower_exit:


// fn000000000041CEC0
// Return size: 0
void fn000000000041CEC0()
fn000000000041CEC0_entry:
	// succ:  l000000000041CEC0
l000000000041CEC0:
	sp = fp
	x0 = 0x00000000004DE000
	w0 = Mem0[x0 + 1716:word32]
	x7 = 0x00000000004DE000
	branch w0 == 0x00000000 l000000000041CF34
	// succ:  l000000000041CED0 l000000000041CF34
l000000000041CED0:
	x0 = 0x00000000004D7000
	w0 = Mem0[x0 + 376:word32]
	w31 = w0 - 0x00000029
	NZCV = cond(w31)
	branch Test(LE,ZCV) l000000000041CF34
	// succ:  l000000000041CEE0 l000000000041CF34
l000000000041CEE0:
	x0 = x7 + 0x0000000000000758
	w4 = Mem0[x0 + 16:word32]
	w6 = Mem0[x0 + 20:word32]
	x3 = Mem0[x0 + 24:word64]
l000000000041CF34:
	x7 = x7 + 0x0000000000000758
	w0 = Mem0[x7 + 32:word32]
	w31 = w0 - 0x00000104
	NZCV = cond(w31)
	branch Test(GT,NZV) l000000000041CF84
	// succ:  l000000000041CF44 l000000000041CF84
l000000000041CF44:
	w31 = w0 - 0x00000103
	NZCV = cond(w31)
	branch Test(GE,NZV) l000000000041CFAC
	// succ:  l000000000041CF4C l000000000041CFAC
l000000000041CF4C:
	w31 = w0 - 0x00000026
	NZCV = cond(w31)
	branch Test(EQ,Z) l000000000041CFAC
	// succ:  l000000000041CF54 l000000000041CFAC
l000000000041CF54:
	branch Test(GT,NZV) l000000000041CF68
	// succ:  l000000000041CF58 l000000000041CF68
l000000000041CF58:
	branch w0 == 0x00000000 l000000000041CFAC
	// succ:  l000000000041CF5C l000000000041CFAC
l000000000041CF5C:
	w31 = w0 - 0x0000000A
	NZCV = cond(w31)
	branch Test(NE,Z) l000000000041CFB4
	// succ:  l000000000041CF64 l000000000041CFB4
l000000000041CF64:
	goto l000000000041CFAC
	// succ:  l000000000041CFAC
l000000000041CF68:
	w31 = w0 - 0x0000003B
	NZCV = cond(w31)
	branch Test(EQ,Z) l000000000041CFAC
	// succ:  l000000000041CF70 l000000000041CFAC
l000000000041CF70:
	w31 = w0 - 0x0000007B
	NZCV = cond(w31)
	branch Test(EQ,Z) l000000000041CFAC
	// succ:  l000000000041CF78 l000000000041CFAC
l000000000041CF78:
	w31 = w0 - 0x00000028
	NZCV = cond(w31)
	branch Test(NE,Z) l000000000041CFB4
	// succ:  l000000000041CF80 l000000000041CFB4
l000000000041CF80:
	goto l000000000041CFAC
	// succ:  l000000000041CFAC
l000000000041CF84:
	w31 = w0 - 0x00000118
	NZCV = cond(w31)
	branch Test(GT,NZV) l000000000041CFA0
	// succ:  l000000000041CF8C l000000000041CFA0
l000000000041CF8C:
	w31 = w0 - 0x00000115
	NZCV = cond(w31)
	branch Test(GE,NZV) l000000000041CFAC
	// succ:  l000000000041CF94 l000000000041CFAC
l000000000041CF94:
	w31 = w0 - 0x0000010D
	NZCV = cond(w31)
	branch Test(NE,Z) l000000000041CFB4
	// succ:  l000000000041CF9C l000000000041CFB4
l000000000041CF9C:
	goto l000000000041CFAC
	// succ:  l000000000041CFAC
l000000000041CFA0:
	w0 = w0 - 0x00000120
	w31 = w0 - 0x00000001
	NZCV = cond(w31)
	branch Test(UGT,ZC) l000000000041CFB4
	// succ:  l000000000041CFAC l000000000041CFB4
l000000000041CFAC:
	w0 = 0x00000001
	goto l000000000041CFB8
	// succ:  l000000000041CFB8
l000000000041CFB4:
	w0 = 0x00000000
	// succ:  l000000000041CFB8
l000000000041CFB8:
	return
	// succ:  fn000000000041CEC0_exit
fn000000000041CEC0_exit:


// fn000000000041CFBC
// Return size: 0
void fn000000000041CFBC()
fn000000000041CFBC_entry:
	// succ:  l000000000041CFBC
l000000000041CFBC:
	sp = fp
	w31 = w0 - 0x0000002F
	NZCV = cond(w31)
	branch Test(EQ,Z) l000000000041D028
	// succ:  l000000000041CFC4 l000000000041D028
l000000000041CFC4:
	branch Test(GT,NZV) l000000000041CFF4
	// succ:  l000000000041CFC8 l000000000041CFF4
l000000000041CFC8:
	w31 = w0 - 0x00000026
	NZCV = cond(w31)
	branch Test(GT,NZV) l000000000041CFE4
	// succ:  l000000000041CFD0 l000000000041CFE4
l000000000041CFD0:
	w31 = w0 - 0x00000025
	NZCV = cond(w31)
	branch Test(GE,NZV) l000000000041D028
	// succ:  l000000000041CFD8 l000000000041D028
l000000000041CFD8:
	w31 = w0 - 0x00000021
	NZCV = cond(w31)
	branch Test(NE,Z) l000000000041D030
	// succ:  l000000000041CFE0 l000000000041D030
l000000000041CFE0:
	goto l000000000041D028
	// succ:  l000000000041D028
l000000000041CFE4:
	w0 = w0 - 0x00000028
	w31 = w0 - 0x00000005
	NZCV = cond(w31)
	branch Test(UGT,ZC) l000000000041D030
	// succ:  l000000000041CFF0 l000000000041D030
l000000000041CFF0:
	goto l000000000041D028
	// succ:  l000000000041D028
l000000000041CFF4:
	w31 = w0 - 0x0000003F
	NZCV = cond(w31)
	branch Test(GT,NZV) l000000000041D010
	// succ:  l000000000041CFFC l000000000041D010
l000000000041CFFC:
	w31 = w0 - 0x0000003C
	NZCV = cond(w31)
	branch Test(GE,NZV) l000000000041D028
	// succ:  l000000000041D004 l000000000041D028
l000000000041D004:
	w31 = w0 - 0x0000003A
	NZCV = cond(w31)
	branch Test(NE,Z) l000000000041D030
	// succ:  l000000000041D00C l000000000041D030
l000000000041D00C:
	goto l000000000041D028
	// succ:  l000000000041D028
l000000000041D010:
	w31 = w0 - 0x0000007C
	NZCV = cond(w31)
	branch Test(EQ,Z) l000000000041D028
	// succ:  l000000000041D018 l000000000041D028
l000000000041D018:
	w31 = w0 - 0x0000007E
	NZCV = cond(w31)
	branch Test(EQ,Z) l000000000041D028
	// succ:  l000000000041D020 l000000000041D028
l000000000041D020:
	w31 = w0 - 0x0000005E
	NZCV = cond(w31)
	branch Test(NE,Z) l000000000041D030
	// succ:  l000000000041D028 l000000000041D030
l000000000041D028:
	w0 = 0x00000001
	goto l000000000041D034
	// succ:  l000000000041D034
l000000000041D030:
	w0 = 0x00000000
	// succ:  l000000000041D034
l000000000041D034:
	return
	// succ:  fn000000000041CFBC_exit
fn000000000041CFBC_exit:


// fn000000000041D038
// Return size: 0
void fn000000000041D038()
fn000000000041D038_entry:
	// succ:  l000000000041D038
l000000000041D038:
	sp = fp
	sp = sp + -32
	Mem0[sp:word64] = x29
	sp = sp + 8
	Mem0[sp:word64] = x30
	x29 = x31 + 0x0000000000000000
	x1 = 0x00000000004AE000
	Mem0[sp + 16:word64] = x19
	x1 = x1 + 0x0000000000000490
	x19 = x0
	w2 = 0x00000005
	x0 = 0x0000000000000000
	dcgettext(x0, x1, x2)
	sp = sp + 0xFFFFFFFFFFFFFFF8
	x1 = x19
	call fn0000000000457DBC (retsize: 0;)
	// succ:  l000000000041D060_thunk_fn000000000041D064
l000000000041D060_thunk_fn000000000041D064:
	call fn000000000041D064 (retsize: 0;)
	return
	// succ:  fn000000000041D038_exit
fn000000000041D038_exit:


// fn000000000041D064
// Return size: 0
void fn000000000041D064()
fn000000000041D064_entry:
	// succ:  l000000000041D064
l000000000041D064:
	sp = fp
	sp = sp + -16
	Mem0[sp:word64] = x29
	sp = sp + 8
	Mem0[sp:word64] = x30
	x29 = x31 + 0x0000000000000000
	x1 = 0x00000000004AE000
	x1 = x1 + 0x0000000000000540
	w2 = 0x00000005
	x0 = 0x0000000000000000
	dcgettext(x0, x1, x2)
	sp = sp + 0xFFFFFFFFFFFFFFF8
	call builtin_error (retsize: 0;)
	call top_level_cleanup (retsize: 0;)
	w0 = 0x00000002
	call jump_to_top_level (retsize: 0;)
	// succ:  l000000000041D08C_thunk_main
l000000000041D08C_thunk_main:
	call main (retsize: 0;)
	return
	// succ:  fn000000000041D064_exit
fn000000000041D064_exit:


// main
// Return size: 0
void main()
main_entry:
	// succ:  l000000000041D090
l000000000041D090:
	sp = fp
	sp = sp + -352
	Mem0[sp:word64] = x29
	sp = sp + 8
	Mem0[sp:word64] = x30
	x29 = x31 + 0x0000000000000000
	Mem0[x29 + 328:word32] = w0
	x0 = 0x00000000004E3000
	Mem0[x29 + 320:word64] = x1
	x0 = x0 + 0xFFFFFFFFFFFFFC28
	w1 = 0x00000001
	v12 = sp + 16
	Mem0[v12:word64] = x19
	v12 = v12 + 8
	Mem0[v12:word64] = x20
	v15 = sp + 32
	Mem0[v15:word64] = x21
	v15 = v15 + 8
	Mem0[v15:word64] = x22
	v18 = sp + 48
	Mem0[v18:word64] = x23
	v18 = v18 + 8
	Mem0[v18:word64] = x24
	v21 = sp + 64
	Mem0[v21:word64] = x25
	v21 = v21 + 8
	Mem0[v21:word64] = x26
	v24 = sp + 80
	Mem0[v24:word64] = x27
	v24 = v24 + 8
	Mem0[v24:word64] = x28
	Mem0[x29 + 336:word64] = x2
	call __sigsetjmp (retsize: 0;)
	branch w0 != 0x00000000 l000000000041D644
	// succ:  l000000000041D0CC l000000000041D644
l000000000041D0CC:
	x20 = 0x00000000004DE000
	call xtrace_init (retsize: 0;)
	x20 = x20 + 0x00000000000006A8
	call check_dev_tty (retsize: 0;)
	w0 = Mem0[x20 + 60:word32]
	w19 = 0x00000003
	branch w0 == 0x00000000 l000000000041D0F8
	// succ:  l000000000041D0E8 l000000000041D0F8
l000000000041D0E8:
	w0 = w19
	call sleep (retsize: 0;)
	w1 = Mem0[x20 + 60:word32]
	branch w1 != 0x00000000 l000000000041D0E8
	// succ:  l000000000041D0F8 l000000000041D0E8
l000000000041D0F8:
	call set_default_locale (retsize: 0;)
	getuid()
	sp = sp + 0xFFFFFFFFFFFFFFF8
	w20 = w0
	x0 = 0x00000000004D6000
	x0 = x0 + 0x0000000000000660
	w1 = Mem0[x0:word32]
	NZCV = cond(w20 - w1)
	branch Test(EQ,Z) l000000000041D184
	// succ:  l000000000041D118 l000000000041D184
l000000000041D118:
	x0 = Mem0[x0 + 16:word64]
	branch x0 == 0x0000000000000000 l000000000041D130
	// succ:  l000000000041D120 l000000000041D130
l000000000041D120:
	x1 = 0x00000000004AA000
	x1 = x1 + 0x0000000000000068
	w2 = 0x000004A3
	call sh_xfree (retsize: 0;)
	// succ:  l000000000041D130
l000000000041D130:
	x0 = 0x00000000004D6000
	x0 = x0 + 0x0000000000000660
	x0 = Mem0[x0 + 24:word64]
	branch x0 == 0x0000000000000000 l000000000041D150
	// succ:  l000000000041D140 l000000000041D150
l000000000041D140:
	x1 = 0x00000000004AA000
	x1 = x1 + 0x0000000000000068
	w2 = 0x000004A4
	call sh_xfree (retsize: 0;)
	// succ:  l000000000041D150
l000000000041D150:
	x0 = 0x00000000004D6000
	x0 = x0 + 0x0000000000000660
	x0 = Mem0[x0 + 32:word64]
	branch x0 == 0x0000000000000000 l000000000041D170
	// succ:  l000000000041D160 l000000000041D170
l000000000041D160:
	x1 = 0x00000000004AA000
	x1 = x1 + 0x0000000000000068
	w2 = 0x000004A5
	call sh_xfree (retsize: 0;)
	// succ:  l000000000041D170
l000000000041D170:
	x0 = 0x00000000004D6000
	x0 = x0 + 0x0000000000000660
	Mem0[x0 + 32:word64] = 0x0000000000000000
	Mem0[x0 + 24:word64] = 0x0000000000000000
	Mem0[x0 + 16:word64] = 0x0000000000000000
	// succ:  l000000000041D184
l000000000041D184:
	x19 = 0x00000000004D6000
	x19 = x19 + 0x0000000000000660
	Mem0[x19:word32] = w20
	call getgid (retsize: 0;)
	Mem0[x19 + 8:word32] = w0
	geteuid()
	sp = sp + 0xFFFFFFFFFFFFFFF8
	Mem0[x19 + 4:word32] = w0
	call getegid (retsize: 0;)
	w1 = Mem0[x19 + 4:word32]
	w2 = Mem0[x19:word32]
	Mem0[x19 + 12:word32] = w0
	NZCV = cond(w2 - w1)
	w1 = 0x00000001
	branch Test(EQ,Z) l000000000041D6AC
	// succ:  l000000000041D1BC l000000000041D6AC
l000000000041D1BC:
	x0 = 0x00000000004AA000
	x2 = 0x00000000004DE000
	x2 = x2 + 0x00000000000006A8
	x0 = x0 + 0x0000000000000268
	Mem0[x2 + 56:word32] = w1
	call getenv (retsize: 0;)
	branch x0 == 0x0000000000000000 l000000000041DD24
	// succ:  l000000000041D1D8 l000000000041DD24
l000000000041D1D8:
	x0 = 0x00000000004DE000
	w1 = 0x00000001
	x0 = x0 + 0x00000000000006A8
	Mem0[x0 + 12:word32] = w1
	// succ:  l000000000041D1E8
l000000000041D1E8:
	x0 = 0x00000000004E3000
	x0 = x0 + 0x00000000000000D0
	w1 = 0x00000001
	call __sigsetjmp (retsize: 0;)
	branch w0 == 0x00000000 l000000000041D22C
	// succ:  l000000000041D1FC l000000000041D22C
l000000000041D1FC:
	x0 = 0x00000000004E3000
	w0 = Mem0[x0 + 592:word32]
	Mem0[x29 + 328:word32] = w0
	x0 = 0x00000000004E3000
	x0 = Mem0[x0 + 520:word64]
	Mem0[x29 + 320:word64] = x0
	x0 = 0x00000000004E3000
	x0 = Mem0[x0 + 200:word64]
	Mem0[x29 + 336:word64] = x0
	x0 = 0x00000000004DE000
	x0 = x0 + 0x00000000000006A8
	Mem0[x0 + 64:word32] = 0x00000000
	// succ:  l000000000041D22C
l000000000041D22C:
	w0 = 0x00000001
	x1 = 0x00000000004DE000
	x1 = x1 + 0x00000000000006A8
	Mem0[x29 + 308:word32] = w0
	w0 = Mem0[x29 + 308:word32]
	Mem0[x1 + 68:word32] = 0x00000000
	w1 = Mem0[x29 + 328:word32]
	NZCV = cond(w0 - w1)
	branch Test(LE,ZCV) l000000000041D254
	// succ:  l000000000041D250 l000000000041D254
l000000000041D250:
	Mem0[x29 + 308:word32] = w1
	// succ:  l000000000041D254
l000000000041D254:
	x1 = 0x00000000004DE000
	x2 = Mem0[x1 + 1664:word64]
	x3 = 0x00000000004E3000
	x0 = 0x00000000004DE000
	x0 = x0 + 0x00000000000006A8
	Mem0[x3 + 568:word64] = 0x0000000000000000
	x3 = 0x00000000004E3000
	Mem0[x3 + 576:word32] = 0x00000000
	Mem0[x0 + 72:word64] = x2
	x3 = 0x00000000004E3000
	x2 = 0x00000000004D6000
	Mem0[x3 + 528:word32] = 0x00000000
	x2 = x2 + 0x0000000000000660
	w3 = 0xFFFFFFFF
	w1 = Mem0[x0 + 40:word32]
	Mem0[x29 + 312:word32] = 0x00000000
	Mem0[x2 + 40:word32] = w3
	Mem0[x0 + 80:word32] = 0x00000000
	Mem0[x0 + 32:word32] = 0x00000000
	branch w1 != 0x00000000 l000000000041D2AC
	// succ:  l000000000041D2A4 l000000000041D2AC
l000000000041D2A4:
	x0 = Mem0[x0 + 24:word64]
	branch x0 == 0x0000000000000000 l000000000041D394
	// succ:  l000000000041D2AC l000000000041D394
l000000000041D2AC:
	x0 = 0x00000000004DE000
	x0 = x0 + 0x00000000000006A8
	x1 = Mem0[x0 + 24:word64]
	v34 = Mem0[x1:byte]
	w2 = (word32) v34
	w31 = w2 - 0x0000002D
	NZCV = cond(w31)
	branch Test(EQ,Z) l000000000041DB98
	// succ:  l000000000041D2C4 l000000000041DB98
l000000000041D2C4:
	x2 = 0x00000000004AA000
	x2 = x2 + 0x0000000000000288
	x1 = 0x00000000004D6000
	Mem0[x1 + 2584:word64] = x2
	x2 = 0x00000000004AA000
	x2 = x2 + 0x0000000000000298
	x1 = 0x00000000004D6000
	w0 = 0x00000000
	Mem0[x1 + 2576:word64] = x2
	x1 = 0x00000000004E3000
	Mem0[x1 + 1200:word32] = w0
	x1 = 0x00000000004DE000
	Mem0[x1 + 1928:word32] = w0
	x1 = 0x00000000004E3000
	Mem0[x1 + 1184:word32] = w0
	x19 = 0x00000000004DE000
	x1 = 0x00000000004DF000
	x21 = 0x00000000004D6000
	x19 = x19 + 0x00000000000006A8
	w20 = 0x00000001
	Mem0[x1 + 3736:word32] = w0
	x21 = x21 + 0x0000000000000660
	x1 = 0x00000000004DE000
	Mem0[x1 + 2200:word32] = w0
	Mem0[x19 + 92:word32] = w0
	Mem0[x19:word32] = w0
	Mem0[x19 + 96:word32] = w0
	Mem0[x19 + 100:word32] = w0
	Mem0[x19 + 8:word32] = w0
	Mem0[x21 + 44:word32] = w20
	Mem0[x19 + 84:word32] = w20
	Mem0[x19 + 88:word32] = w20
	call bash_history_reinit (retsize: 0;)
	x1 = 0x00000000004DF000
	x0 = 0x00000000004DF000
	x0 = Mem0[x0 + 3200:word64]
	Mem0[x1 + 3696:word32] = 0x00000000
	x1 = 0x00000000004AA000
	x1 = x1 + 0x00000000000002A0
	Mem0[x21 + 48:word64] = x1
	call delete_all_contexts (retsize: 0;)
	x0 = 0x00000000004DF000
	x0 = Mem0[x0 + 3224:word64]
	call delete_all_variables (retsize: 0;)
	call reinit_special_variables (retsize: 0;)
	call bashline_reinitialize (retsize: 0;)
	x0 = 0x00000000004E3000
	x0 = x0 + 0xFFFFFFFFFFFFFC28
	w1 = w20
	Mem0[x19 + 68:word32] = w20
	call __sigsetjmp (retsize: 0;)
	branch w0 != 0x00000000 l000000000041D644
	// succ:  l000000000041D394 l000000000041D644
l000000000041D394:
	x2 = Mem0[x29 + 336:word64]
	x0 = 0x00000000004E3000
	x3 = Mem0[x29 + 320:word64]
	Mem0[x0 + 584:word64] = x2
	x19 = Mem0[x3:word64]
	branch x19 == 0x0000000000000000 l000000000041DBA4
	// succ:  l000000000041D3AC l000000000041DBA4
l000000000041D3AC:
	x0 = x19
	call base_pathname (retsize: 0;)
	x1 = 0x00000000004DE000
	x1 = x1 + 0x00000000000006A8
	Mem0[x1 + 24:word64] = x0
	v36 = Mem0[x19:byte]
	w2 = (word32) v36
	w31 = w2 - 0x0000002D
	NZCV = cond(w31)
	branch Test(EQ,Z) l000000000041D70C
	// succ:  l000000000041D3CC l000000000041D70C
l000000000041D3CC:
	x0 = 0x00000000004DE000
	x0 = x0 + 0x00000000000006A8
	x1 = Mem0[x0 + 24:word64]
	v37 = Mem0[x1:byte]
	w2 = (word32) v37
	w31 = w2 - 0x00000073
	NZCV = cond(w31)
	branch Test(EQ,Z) l000000000041D6E0
	// succ:  l000000000041D3E4 l000000000041D6E0
l000000000041D3E4:
	branch x19 == 0x0000000000000000 l000000000041DCDC
	// succ:  l000000000041D3E8 l000000000041DCDC
l000000000041D3E8:
	x0 = 0x00000000004E3000
	x1 = 0x00000000004DE000
	x1 = x1 + 0x00000000000006A8
	x0 = Mem0[x0 + 1224:word64]
	Mem0[x1 + 24:word64] = x19
	branch x0 == 0x0000000000000000 l000000000041D410
	// succ:  l000000000041D400 l000000000041D410
l000000000041D400:
	x1 = 0x00000000004AA000
	x1 = x1 + 0x0000000000000068
	w2 = 0x0000063B
	call sh_xfree (retsize: 0;)
	// succ:  l000000000041D410
l000000000041D410:
	x19 = 0x00000000004DE000
	x19 = x19 + 0x00000000000006A8
	x0 = Mem0[x19 + 24:word64]
	strlen(x0)
	sp = sp + 0xFFFFFFFFFFFFFFF8
	x1 = 0x00000000004AA000
	w2 = 0x0000063C
	x1 = x1 + 0x0000000000000068
	x0 = x0 + 0x0000000000000001
	call sh_xmalloc (retsize: 0;)
	x1 = Mem0[x19 + 24:word64]
	strcpy(x0, x1)
	sp = sp + 0xFFFFFFFFFFFFFFF8
	x2 = 0x00000000004E3000
	x1 = Mem0[x19 + 24:word64]
	Mem0[x2 + 1224:word64] = x0
	branch x1 == 0x0000000000000000 l000000000041D454
	// succ:  l000000000041D44C l000000000041D454
l000000000041D44C:
	v38 = Mem0[x1:byte]
	w0 = (word32) v38
	branch w0 != 0x00000000 l000000000041D6BC
	// succ:  l000000000041D454 l000000000041D6BC
l000000000041D454:
	x1 = 0x00000000004AA000
	x0 = 0x00000000004DE000
	x1 = x1 + 0x0000000000000260
	x0 = x0 + 0x00000000000006A8
	Mem0[x0 + 24:word64] = x1
	// succ:  l000000000041D468
l000000000041D468:
	x0 = 0x0000000000000000
	time(x0)
	sp = sp + 0xFFFFFFFFFFFFFFF8
	x1 = 0x00000000004E3000
	w25 = Mem0[x29 + 308:word32]
	Mem0[x1 + 552:word64] = x0
	w0 = Mem0[x29 + 328:word32]
	NZCV = cond(w25 - w0)
	branch Test(EQ,Z) l000000000041D554
	// succ:  l000000000041D488 l000000000041D554
l000000000041D488:
	x3 = Mem0[x29 + 320:word64]
	x23 = Mem0[x3 + (int64) ((int32) w25):word64]
	branch x23 == 0x0000000000000000 l000000000041D554
	// succ:  l000000000041D494 l000000000041D554
l000000000041D494:
	v40 = Mem0[x23:byte]
	w0 = (word32) v40
	w31 = w0 - 0x0000002D
	NZCV = cond(w31)
	branch Test(NE,Z) l000000000041D554
	// succ:  l000000000041D4A0 l000000000041D554
l000000000041D4A0:
	x27 = 0x00000000004A9000
	x28 = 0x00000000004A9000
	w26 = 0x00000000
	x27 = x27 + 0xFFFFFFFFFFFFFDA8
	x28 = x28 + 0xFFFFFFFFFFFFFFC8
	v43 = Mem0[x23 + 1:byte]
	w22 = (word32) v43
	w24 = w26
	w31 = w22 - 0x0000002D
	NZCV = cond(w31)
	branch Test(EQ,Z) l000000000041D688
	// succ:  l000000000041D4C4 l000000000041D688
l000000000041D4C4:
	x21 = x27 + 0x0000000000000020
	w20 = w26
	x19 = x28
	x23 = x23 + 0x0000000000000001
	goto l000000000041D4E4
	// succ:  l000000000041D4E4
l000000000041D4D8:
	x19 = Mem0[x21:word64]
	x21 = x21 + 32
	w20 = w20 + 0x00000001
	branch x19 == 0x0000000000000000 l000000000041D64C
	// succ:  l000000000041D4E4 l000000000041D64C
l000000000041D4E4:
	v45 = Mem0[x19:byte]
	w1 = (word32) v45
	NZCV = cond(w1 - w22)
	branch Test(NE,Z) l000000000041D4D8
	// succ:  l000000000041D4F0 l000000000041D4D8
l000000000041D4F0:
	x0 = x23
	x1 = x19
	strcmp(x0, x1)
	sp = sp + 0xFFFFFFFFFFFFFFF8
	branch w0 != 0x00000000 l000000000041D4D8
	// succ:  l000000000041D500 l000000000041D4D8
l000000000041D500:
l000000000041D554:
	x1 = 0x00000000004DE000
	x1 = x1 + 0x00000000000006A8
	w19 = Mem0[x1 + 112:word32]
	Mem0[x29 + 308:word32] = w25
	branch w19 != 0x00000000 l000000000041DBBC
	// succ:  l000000000041D568 l000000000041DBBC
l000000000041D568:
	w0 = Mem0[x1 + 96:word32]
	branch w0 != 0x00000000 l000000000041D6D0
	// succ:  l000000000041D570 l000000000041D6D0
l000000000041D570:
	x1 = Mem0[x1 + 24:word64]
	x0 = 0x00000000004E3000
	w21 = Mem0[x29 + 308:word32]
	Mem0[x0 + 1192:word64] = x1
	w1 = Mem0[x29 + 328:word32]
	NZCV = cond(w21 - w1)
	branch Test(EQ,Z) l000000000041D784
	// succ:  l000000000041D58C l000000000041D784
l000000000041D58C:
	x2 = Mem0[x29 + 320:word64]
	x20 = Mem0[x2 + (int64) ((int32) w21):word64]
	branch x20 == 0x0000000000000000 l000000000041D784
	// succ:  l000000000041D598 l000000000041D784
l000000000041D598:
	v48 = Mem0[x20:byte]
	w24 = (word32) v48
	w31 = w24 - 0x0000002B
	NZCV = cond(w31)
	branch Test(NE,Z) l000000000041E72C
	// succ:  l000000000041D5A4 l000000000041E72C
l000000000041D5A4:
	x23 = 0x00000000004A9000
	x25 = 0x00000000004E3000
	x22 = 0x00000000004DE000
	x23 = x23 + 0xFFFFFFFFFFFFFD44
	x25 = x25 + 0x0000000000000230
	x22 = x22 + 0x00000000000006A8
	// succ:  l000000000041D5BC
l000000000041D5BC:
	w31 = w24 - 0x0000002D
	NZCV = cond(w31)
	w21 = w21 + 0x00000001
	branch Test(EQ,Z) l000000000041DB7C
	// succ:  l000000000041D5C8 l000000000041DB7C
l000000000041D5C8:
	x20 = x20 + 0x0000000000000001
	v49 = Mem0[x20:byte]
	w19 = (word32) v49
	branch w19 == 0x00000000 l000000000041D758
	// succ:  l000000000041D5D4 l000000000041D758
l000000000041D5D4:
	w2 = w19 - 0x00000044
	w31 = w2 - 0x0000002F
	NZCV = cond(w31)
	branch Test(ULE,ZC) l000000000041D730
	// succ:  l000000000041D5E0 l000000000041D730
l000000000041D5E0:
	w0 = w19
	w1 = w24
	call change_flag (retsize: 0;)
	w31 = w0 + 0x00000001
	NZCV = cond(w31)
	branch Test(NE,Z) l000000000041D5C8
	// succ:  l000000000041D5F4 l000000000041D5C8
l000000000041D5F4:
	x1 = 0x00000000004AA000
	x1 = x1 + 0x00000000000002E8
	w2 = 0x00000005
	x0 = 0x0000000000000000
	dcgettext(x0, x1, x2)
	sp = sp + 0xFFFFFFFFFFFFFFF8
	w1 = w24
	w2 = w19
	call report_error (retsize: 0;)
	x0 = 0x00000000004DE000
	x0 = Mem0[x0 + 1640:word64]
	w1 = 0x00000000
	call fn000000000041E90C (retsize: 0;)
	w0 = 0x00000002
	exit(x0)
l000000000041D644:
	w0 = 0x00000002
	exit(x0)
l000000000041D64C:
	branch w24 == 0x00000000 l000000000041D554
	// succ:  l000000000041D650 l000000000041D554
l000000000041D650:
	x1 = 0x00000000004AA000
	w2 = 0x00000005
	x1 = x1 + 0x00000000000002D0
	x0 = x19
	dcgettext(x0, x1, x2)
	sp = sp + 0xFFFFFFFFFFFFFFF8
	x2 = Mem0[x29 + 320:word64]
	x1 = Mem0[x2 + (int64) ((int32) w25):word64]
	call report_error (retsize: 0;)
	x0 = 0x00000000004DE000
	x0 = Mem0[x0 + 1640:word64]
	w1 = w19
	call fn000000000041E90C (retsize: 0;)
	w0 = 0x00000002
	exit(x0)
l000000000041D688:
	v46 = Mem0[x23 + 2:byte]
	w24 = (word32) v46
	branch w24 == 0x00000000 l000000000041D4C4
	// succ:  l000000000041D690 l000000000041D4C4
l000000000041D690:
	w22 = w24
	x23 = x23 + 0x0000000000000001
	w24 = 0x00000001
	goto l000000000041D4C4
	// succ:  l000000000041D4C4
l000000000041D6AC:
	w1 = Mem0[x19 + 8:word32]
	NZCV = cond(w0 - w1)
	w1 = (word32) Test(NE,Z)
	goto l000000000041D1BC
	// succ:  l000000000041D1BC
l000000000041D6BC:
	w31 = w0 - 0x0000002D
	NZCV = cond(w31)
	branch Test(NE,Z) l000000000041D468
	// succ:  l000000000041D6C4 l000000000041D468
l000000000041D6C4:
	v51 = Mem0[x1 + 1:byte]
	w0 = (word32) v51
	branch w0 == 0x00000000 l000000000041D454
	// succ:  l000000000041D6CC l000000000041D454
l000000000041D6CC:
	goto l000000000041D468
	// succ:  l000000000041D468
l000000000041D6D0:
	w0 = 0x00000001
	call show_shell_version (retsize: 0;)
	w0 = w19
	exit(x0)
l000000000041D6E0:
	v52 = Mem0[x1 + 1:byte]
	w2 = (word32) v52
	w31 = w2 - 0x00000068
	NZCV = cond(w31)
	branch Test(EQ,Z) l000000000041DEB4
	// succ:  l000000000041D6EC l000000000041DEB4
l000000000041D6EC:
	w31 = w2 - 0x00000075
	NZCV = cond(w31)
	branch Test(NE,Z) l000000000041D3E4
	// succ:  l000000000041D6F4 l000000000041D3E4
l000000000041D6F4:
	v53 = Mem0[x1 + 2:byte]
	w1 = (word32) v53
	branch w1 != 0x00000000 l000000000041D3E4
	// succ:  l000000000041D6FC l000000000041D3E4
l000000000041D6FC:
	w1 = Mem0[x0 + 108:word32]
	w1 = w1 + 0x00000001
	Mem0[x0 + 108:word32] = w1
	goto l000000000041D3E4
	// succ:  l000000000041D3E4
l000000000041D70C:
	v68 = Mem0[x0:byte]
	w2 = (word32) v68
	w31 = w2 - 0x0000002D
	NZCV = cond(w31)
	branch Test(EQ,Z) l000000000041DED8
	// succ:  l000000000041D718 l000000000041DED8
l000000000041D718:
	x0 = 0x00000000004DE000
	x0 = x0 + 0x00000000000006A8
	w1 = Mem0[x0 + 32:word32]
	w1 = w1 + 0x00000001
	Mem0[x0 + 32:word32] = w1
	goto l000000000041D3CC
	// succ:  l000000000041D3CC
l000000000041D730:
	v55 = Mem0[x23 + (uint64) ((uint32) w2):word16]
	w3 = (word32) v55
	x0 = 0x000000000041D740
	x3 = x0 + (int64) ((int16) w3)
	call x3 (retsize: 0;)
	return
	// succ:  main_exit
l000000000041D758:
	w0 = Mem0[x29 + 328:word32]
	NZCV = cond(w0 - w21)
	branch Test(EQ,Z) l000000000041D784
	// succ:  l000000000041D764 l000000000041D784
l000000000041D764:
	x1 = Mem0[x29 + 320:word64]
	x20 = Mem0[x1 + (int64) ((int32) w21):word64]
	branch x20 == 0x0000000000000000 l000000000041D784
	// succ:  l000000000041D770 l000000000041D784
l000000000041D770:
	v56 = Mem0[x20:byte]
	w24 = (word32) v56
	w31 = w24 - 0x0000002B
	NZCV = cond(w31)
	branch Test(EQ,Z) l000000000041D5BC
	// succ:  l000000000041D77C l000000000041D5BC
l000000000041D77C:
	w31 = w24 - 0x0000002D
	NZCV = cond(w31)
	branch Test(EQ,Z) l000000000041D5BC
	// succ:  l000000000041D784 l000000000041D5BC
l000000000041D784:
	x0 = 0x00000000004DE000
	x0 = x0 + 0x00000000000006A8
	w1 = Mem0[x0 + 80:word32]
	Mem0[x29 + 308:word32] = w21
	branch w1 == 0x00000000 l000000000041D7A4
	// succ:  l000000000041D798 l000000000041D7A4
l000000000041D798:
	w1 = Mem0[x0 + 32:word32]
	w1 = ~w1
	Mem0[x0 + 32:word32] = w1
	// succ:  l000000000041D7A4
l000000000041D7A4:
	x0 = 0x00000000004DE000
	x0 = x0 + 0x00000000000006A8
	w0 = Mem0[x0 + 32:word32]
	NZCV = cond(w0 - w31)
	x0 = 0x00000000004AA000
	x0 = x0 + 0x0000000000000300
	w1 = (word32) Test(NE,Z)
	call set_login_shell (retsize: 0;)
	x0 = 0x00000000004E3000
	w0 = Mem0[x0 + 544:word32]
	branch w0 == 0x00000000 l000000000041DBE8
	// succ:  l000000000041D7D0 l000000000041DBE8
l000000000041D7D0:
	w1 = 0x00000001
	x0 = 0x00000000004E3000
	Mem0[x0 + 560:word32] = w1
	// succ:  l000000000041D7DC
l000000000041D7DC:
	w1 = 0x00000001
	x0 = 0x00000000004DF000
	Mem0[x0 + 3700:word32] = w1
	// succ:  l000000000041D7E8
l000000000041D7E8:
	x0 = 0x00000000004DE000
	x0 = x0 + 0x00000000000006A8
	w1 = Mem0[x0 + 56:word32]
	branch w1 == 0x00000000 l000000000041D804
	// succ:  l000000000041D7F8 l000000000041D804
l000000000041D7F8:
	x1 = 0x00000000004DF000
	w1 = Mem0[x1 + 3752:word32]
	branch w1 == 0x00000000 l000000000041DD14
	// succ:  l000000000041D804 l000000000041DD14
l000000000041D804:
	x0 = 0x00000000004E3000
	w0 = Mem0[x0 + 528:word32]
	branch w0 == 0x00000000 l000000000041D834
	// succ:  l000000000041D810 l000000000041D834
l000000000041D810:
	w0 = Mem0[x29 + 308:word32]
	x2 = Mem0[x29 + 320:word64]
	x1 = 0x00000000004E3000
	x0 = Mem0[x2 + (int64) ((int32) w0):word64]
	Mem0[x1 + 568:word64] = x0
	branch x0 == 0x0000000000000000 l000000000041E08C
	// succ:  l000000000041D828 l000000000041E08C
l000000000041D828:
	w0 = Mem0[x29 + 308:word32]
	w0 = w0 + 0x00000001
	Mem0[x29 + 308:word32] = w0
	// succ:  l000000000041D834
l000000000041D834:
	x0 = 0x00000000004E3000
	Mem0[x0 + 1192:word64] = 0x0000000000000000
	call cmd_init (retsize: 0;)
	x0 = 0x00000000004DF000
	w0 = Mem0[x0 + 3736:word32]
	branch w0 == 0x00000000 l000000000041DBD4
	// succ:  l000000000041D84C l000000000041DBD4
l000000000041D84C:
	x1 = 0x00000000004DE000
	w0 = 0x00000001
	x1 = x1 + 0x00000000000006A8
	x2 = 0x00000000004DE000
	Mem0[x1 + 4:word32] = w0
	Mem0[x1 + 8:word32] = w0
	Mem0[x2 + 2200:word32] = w0
	Mem0[x1:word32] = w0
	// succ:  l000000000041D86C
l000000000041D86C:
	x0 = 0x00000000004DE000
	x0 = x0 + 0x00000000000006A8
	w1 = Mem0[x0 + 32:word32]
	branch w1 == 0x00000000 l000000000041D884
	// succ:  l000000000041D87C l000000000041D884
l000000000041D87C:
	w0 = Mem0[x0 + 8:word32]
	branch w0 != 0x00000000 l000000000041DCE8
	// succ:  l000000000041D884 l000000000041DCE8
l000000000041D884:
	x0 = 0x00000000004DE000
	x0 = x0 + 0x00000000000006A8
	w0 = Mem0[x0 + 12:word32]
	branch w0 != 0x00000000 l000000000041DE64
	// succ:  l000000000041D894 l000000000041DE64
l000000000041D894:
	x21 = 0x00000000004DE000
	x21 = x21 + 0x00000000000006A8
	x0 = Mem0[x21 + 128:word64]
	branch x0 == 0x0000000000000000 l000000000041D914
	// succ:  l000000000041D8A4 l000000000041D914
l000000000041D8A4:
	w0 = Mem0[x21 + 116:word32]
	x19 = 0x0000000000000000
	NZCV = cond(w0 - w31)
	w20 = w19
	branch Test(LE,ZCV) l000000000041D8EC
	// succ:  l000000000041D8B8 l000000000041D8EC
l000000000041D8B8:
	x0 = Mem0[x21 + 128:word64]
	x1 = x0 + x19
	w1 = Mem0[x1 + 8:word32]
	x0 = Mem0[x0 + x19:word64]
	w31 = w1 - 0x0000002D
	NZCV = cond(w31)
	w1 = (word32) Test(EQ,Z)
	call shopt_setopt (retsize: 0;)
	branch w0 != 0x00000000 l000000000041D644
	// succ:  l000000000041D8D8 l000000000041D644
l000000000041D8D8:
	w0 = Mem0[x21 + 116:word32]
	w20 = w20 + 0x00000001
	NZCV = cond(w20 - w0)
	x19 = x19 + 0x0000000000000010
	branch Test(LT,NV) l000000000041D8B8
	// succ:  l000000000041D8EC l000000000041D8B8
l000000000041D8EC:
	x19 = 0x00000000004DE000
	x19 = x19 + 0x00000000000006A8
	x0 = Mem0[x19 + 128:word64]
	x1 = 0x00000000004AA000
	x1 = x1 + 0x0000000000000068
	w2 = 0x0000073D
	call sh_xfree (retsize: 0;)
	Mem0[x19 + 128:word64] = 0x0000000000000000
	Mem0[x19 + 120:word32] = 0x00000000
	Mem0[x19 + 116:word32] = 0x00000000
	// succ:  l000000000041D914
l000000000041D914:
	x22 = 0x00000000004DE000
	call fn000000000041F2E0 (retsize: 0;)
	x22 = x22 + 0x00000000000006A8
	call set_default_lang (retsize: 0;)
	call set_default_locale_vars (retsize: 0;)
	w0 = Mem0[x22 + 8:word32]
	branch w0 != 0x00000000 l000000000041DD94
	// succ:  l000000000041D930 l000000000041DD94
l000000000041D930:
	w2 = Mem0[x29 + 308:word32]
	x0 = 0x00000000004E3000
	Mem0[x29 + 304:word32] = w2
	x2 = 0x00000000004DF000
	w2 = Mem0[x2 + 3708:word32]
	x0 = x0 + 0xFFFFFFFFFFFFFC28
	w1 = 0x00000001
	Mem0[x29 + 332:word32] = w2
	call __sigsetjmp (retsize: 0;)
	branch w0 == 0x00000000 l000000000041D994
	// succ:  l000000000041D958 l000000000041D994
l000000000041D958:
	w0 = w0 - 0x00000003
	w31 = w0 - 0x00000001
	NZCV = cond(w31)
	branch Test(ULE,ZC) l000000000041DCD0
	// succ:  l000000000041D964 l000000000041DCD0
l000000000041D964:
	x0 = 0x00000000004DE000
	x0 = x0 + 0x00000000000006A8
	w0 = Mem0[x0 + 8:word32]
	call set_job_control (retsize: 0;)
	x0 = 0x00000000004DF000
	w1 = Mem0[x0 + 3708:word32]
	w2 = Mem0[x29 + 312:word32]
	w3 = Mem0[x29 + 332:word32]
	w2 = w2 + 0x00000001
	w1 = w3 + w1
	Mem0[x0 + 3708:word32] = w1
	Mem0[x29 + 312:word32] = w2
	// succ:  l000000000041D994
l000000000041D994:
	x19 = 0x00000000004DE000
	w0 = Mem0[x29 + 304:word32]
	x19 = x19 + 0x00000000000006A8
	w20 = Mem0[x19 + 8:word32]
	Mem0[x29 + 308:word32] = w0
	branch w20 != 0x00000000 l000000000041DBF8
	// succ:  l000000000041D9AC l000000000041DBF8
l000000000041D9AC:
	x0 = 0x00000000004AA000
	x0 = x0 + 0x0000000000000340
	call unbind_variable (retsize: 0;)
	x0 = 0x00000000004AA000
	x0 = x0 + 0x0000000000000348
	call unbind_variable (retsize: 0;)
	Mem0[x19:word32] = w20
	// succ:  l000000000041D9C8
l000000000041D9C8:
	x19 = 0x00000000004DE000
	x19 = x19 + 0x00000000000006A8
	x0 = Mem0[x19 + 24:word64]
	call shell_is_restricted (retsize: 0;)
	x1 = 0x00000000004DF000
	x3 = 0x00000000004DF000
	w2 = Mem0[x29 + 312:word32]
	w21 = Mem0[x1 + 3696:word32]
	Mem0[x3 + 3776:word32] = w0
	Mem0[x1 + 3696:word32] = 0x00000000
	branch w2 != 0x00000000 l000000000041D9FC
	// succ:  l000000000041D9F4 l000000000041D9FC
l000000000041D9F4:
	w1 = Mem0[x19 + 56:word32]
	branch w1 == 0x00000000 l000000000041DF08
	// succ:  l000000000041D9FC l000000000041DF08
l000000000041D9FC:
	x0 = 0x00000000004DE000
	x0 = x0 + 0x00000000000006A8
	w0 = Mem0[x0 + 104:word32]
	branch w0 != 0x00000000 l000000000041DE8C
	// succ:  l000000000041DA0C l000000000041DE8C
l000000000041DA0C:
	w1 = 0x00000001
	branch w21 != 0x00000000 l000000000041DA24
	// succ:  l000000000041DA14 l000000000041DA24
l000000000041DA14:
	x0 = 0x00000000004DF000
	w0 = Mem0[x0 + 3696:word32]
	NZCV = cond(w0 - w31)
	w1 = (word32) Test(NE,Z)
	// succ:  l000000000041DA24
l000000000041DA24:
	x0 = 0x00000000004DE000
	x0 = x0 + 0x00000000000006A8
	x3 = 0x00000000004DF000
	w2 = Mem0[x0 + 68:word32]
	Mem0[x3 + 3696:word32] = w1
	branch w2 == 0x00000000 l000000000041DECC
	// succ:  l000000000041DA3C l000000000041DECC
l000000000041DA3C:
	x0 = 0x00000000004E3000
	x20 = Mem0[x0 + 568:word64]
	branch x20 == 0x0000000000000000 l000000000041DC10
	// succ:  l000000000041DA48 l000000000041DC10
l000000000041DA48:
	w1 = Mem0[x29 + 308:word32]
	w2 = Mem0[x29 + 328:word32]
	x0 = Mem0[x29 + 320:word64]
	w3 = 0x00000000
	call fn000000000041ED24 (retsize: 0;)
	x1 = 0x00000000004DE000
	x1 = x1 + 0x00000000000006A8
	Mem0[x29 + 308:word32] = w0
	w2 = Mem0[x1 + 140:word32]
	w0 = 0x00000002
	Mem0[x1 + 4:word32] = w0
	branch w2 != 0x00000000 l000000000041DEE4
	// succ:  l000000000041DA78 l000000000041DEE4
l000000000041DA78:
	x0 = 0x00000000004E3000
	x0 = Mem0[x0 + 568:word64]
	x1 = 0x00000000004DE000
	w2 = 0x00000001
	x1 = x1 + 0x00000000000006A8
	Mem0[x1 + 92:word32] = w2
	call fn000000000041EC50 (retsize: 0;)
	x0 = 0x00000000004E3000
	w0 = Mem0[x0 + 1200:word32]
	call exit_shell (retsize: 0;)
	x2 = Mem0[x29 + 320:word64]
	x1 = Mem0[x2 + (int64) ((int32) w21):word64]
	branch x1 == 0x0000000000000000 l000000000041DB68
	// succ:  l000000000041DAAC l000000000041DB68
l000000000041DAAC:
	w0 = w24
	call set_minus_o_option (retsize: 0;)
	branch w0 != 0x00000000 l000000000041D644
	// succ:  l000000000041DAB8 l000000000041D644
l000000000041DAB8:
	w21 = w21 + 0x00000001
	goto l000000000041D5C8
	// succ:  l000000000041D5C8
l000000000041DB68:
	w31 = w24 - 0x0000002D
	NZCV = cond(w31)
	w0 = 0xFFFFFFFF
	w1 = (word32) Test(NE,Z)
	call list_minus_o_opts (retsize: 0;)
	goto l000000000041D5C8
	// succ:  l000000000041D5C8
l000000000041DB7C:
	v57 = Mem0[x20 + 1:byte]
	w0 = (word32) v57
	branch w0 == 0x00000000 l000000000041D784
	// succ:  l000000000041DB84 l000000000041D784
l000000000041DB84:
	w31 = w0 - 0x0000002D
	NZCV = cond(w31)
	branch Test(NE,Z) l000000000041D5C8
	// succ:  l000000000041DB8C l000000000041D5C8
l000000000041DB8C:
	v58 = Mem0[x20 + 2:byte]
	w0 = (word32) v58
	branch w0 != 0x00000000 l000000000041D5C8
	// succ:  l000000000041DB94 l000000000041D5C8
l000000000041DB94:
	goto l000000000041D784
	// succ:  l000000000041D784
l000000000041DB98:
	x1 = x1 + 0x0000000000000001
	Mem0[x0 + 24:word64] = x1
	goto l000000000041D2C4
	// succ:  l000000000041D2C4
l000000000041DBA4:
	x1 = 0x00000000004AA000
	x0 = 0x00000000004DE000
	x1 = x1 + 0x0000000000000260
	x0 = x0 + 0x00000000000006A8
	Mem0[x0 + 24:word64] = x1
	goto l000000000041D3CC
	// succ:  l000000000041D3CC
l000000000041DBBC:
	x0 = 0x00000000004DE000
	x0 = Mem0[x0 + 1648:word64]
	w1 = 0x00000001
	call fn000000000041E90C (retsize: 0;)
	w0 = 0x00000000
	exit(x0)
l000000000041DBD4:
	x0 = 0x00000000004E3000
	x0 = Mem0[x0 + 568:word64]
	branch x0 == 0x0000000000000000 l000000000041DD38
	// succ:  l000000000041DBE0 l000000000041DD38
l000000000041DBE0:
	call fn000000000041E8C8 (retsize: 0;)
	goto l000000000041D86C
	// succ:  l000000000041D86C
l000000000041DBE8:
	x0 = 0x00000000004E3000
	w0 = Mem0[x0 + 560:word32]
	branch w0 == 0x00000000 l000000000041D7E8
	// succ:  l000000000041DBF4 l000000000041D7E8
l000000000041DBF4:
	goto l000000000041D7DC
	// succ:  l000000000041D7DC
l000000000041DBF8:
	w0 = 0x00000069
	w1 = 0x0000002D
	call change_flag (retsize: 0;)
	w0 = 0x00000001
	Mem0[x19:word32] = w0
	goto l000000000041D9C8
	// succ:  l000000000041D9C8
l000000000041DC10:
	w0 = Mem0[x29 + 308:word32]
	w1 = Mem0[x29 + 328:word32]
	NZCV = cond(w1 - w0)
	branch Test(EQ,Z) l000000000041DC2C
	// succ:  l000000000041DC20 l000000000041DC2C
l000000000041DC20:
	x0 = 0x00000000004E3000
	w0 = Mem0[x0 + 576:word32]
	branch w0 == 0x00000000 l000000000041E0B0
	// succ:  l000000000041DC2C l000000000041E0B0
l000000000041DC2C:
	x0 = 0x00000000004DE000
	x0 = x0 + 0x00000000000006A8
	w0 = Mem0[x0:word32]
	branch w0 == 0x00000000 l000000000041E31C
	// succ:  l000000000041DC3C l000000000041E31C
l000000000041DC3C:
	x0 = 0x00000000004DE000
	x0 = Mem0[x0 + 1664:word64]
	fileno(x0)
	sp = sp + 0xFFFFFFFFFFFFFFF8
	call sh_unset_nodelay_mode (retsize: 0;)
	// succ:  l000000000041DC4C
l000000000041DC4C:
	x0 = 0x00000000004DE000
	x0 = x0 + 0x00000000000006A8
	w1 = Mem0[x0:word32]
	branch w1 == 0x00000000 l000000000041DEEC
	// succ:  l000000000041DC5C l000000000041DEEC
l000000000041DC5C:
	w1 = Mem0[x0 + 16:word32]
	branch w1 == 0x00000000 l000000000041E4A4
	// succ:  l000000000041DC64 l000000000041E4A4
l000000000041DC64:
	x1 = 0x00000000004E3000
	x0 = Mem0[x0 + 72:word64]
	x1 = Mem0[x1 + 1224:word64]
	call with_input_from_stream (retsize: 0;)
	// succ:  l000000000041DC74
l000000000041DC74:
	w1 = Mem0[x29 + 308:word32]
	w2 = Mem0[x29 + 328:word32]
	x0 = Mem0[x29 + 320:word64]
	w3 = 0x00000001
	call fn000000000041ED24 (retsize: 0;)
	x1 = 0x00000000004DE000
	x1 = x1 + 0x00000000000006A8
	w2 = Mem0[x1 + 140:word32]
	Mem0[x29 + 308:word32] = w0
	branch w2 == 0x00000000 l000000000041DCAC
	// succ:  l000000000041DC9C l000000000041DCAC
l000000000041DC9C:
	w0 = Mem0[x29 + 312:word32]
	branch w0 != 0x00000000 l000000000041DCAC
	// succ:  l000000000041DCA4 l000000000041DCAC
l000000000041DCA4:
	w0 = Mem0[x1 + 56:word32]
	branch w0 == 0x00000000 l000000000041E4E8
	// succ:  l000000000041DCAC l000000000041E4E8
l000000000041DCAC:
	x19 = 0x00000000004DE000
	x19 = x19 + 0x00000000000006A8
	w0 = Mem0[x19 + 8:word32]
	branch w0 != 0x00000000 l000000000041E34C
	// succ:  l000000000041DCBC l000000000041E34C
l000000000041DCBC:
	x0 = 0x00000000004DE000
	w1 = 0x00000001
	x0 = x0 + 0x00000000000006A8
	Mem0[x0 + 40:word32] = w1
	call reader_loop (retsize: 0;)
	// succ:  l000000000041DCD0
l000000000041DCD0:
	x0 = 0x00000000004E3000
	w0 = Mem0[x0 + 1200:word32]
	call exit_shell (retsize: 0;)
	// succ:  l000000000041DCDC
l000000000041DCDC:
	x19 = 0x00000000004AA000
	x19 = x19 + 0x0000000000000260
	goto l000000000041D3E8
	// succ:  l000000000041D3E8
l000000000041DCE8:
	w19 = 0x00000003
	w21 = 0x00000002
	w20 = 0x00000001
	// succ:  l000000000041DCF4
l000000000041DCF4:
	w0 = w19
	w1 = w21
	w2 = w20
	fcntl(x0, x1)
	sp = sp + 0xFFFFFFFFFFFFFFF8
	w19 = w19 + 0x00000001
	w31 = w19 - 0x00000014
	NZCV = cond(w31)
	branch Test(NE,Z) l000000000041DCF4
	// succ:  l000000000041DD10 l000000000041DCF4
l000000000041DD10:
	goto l000000000041D884
	// succ:  l000000000041D884
l000000000041DD14:
	w0 = Mem0[x0 + 104:word32]
	branch w0 != 0x00000000 l000000000041D804
	// succ:  l000000000041DD1C l000000000041D804
l000000000041DD1C:
	call disable_priv_mode (retsize: 0;)
	goto l000000000041D804
	// succ:  l000000000041D804
l000000000041DD24:
	x0 = 0x00000000004AA000
	x0 = x0 + 0x0000000000000278
	call getenv (retsize: 0;)
	branch x0 != 0x0000000000000000 l000000000041D1D8
	// succ:  l000000000041DD34 l000000000041D1D8
l000000000041DD34:
	goto l000000000041D1E8
	// succ:  l000000000041D1E8
l000000000041DD38:
	x0 = 0x00000000004DE000
	x0 = x0 + 0x00000000000006A8
	w0 = Mem0[x0 + 136:word32]
	branch w0 != 0x00000000 l000000000041DBE0
	// succ:  l000000000041DD48 l000000000041DBE0
l000000000041DD48:
	w0 = Mem0[x29 + 308:word32]
	w3 = Mem0[x29 + 328:word32]
	NZCV = cond(w0 - w3)
	branch Test(EQ,Z) l000000000041DD64
	// succ:  l000000000041DD58 l000000000041DD64
l000000000041DD58:
	x0 = 0x00000000004E3000
	w0 = Mem0[x0 + 576:word32]
	branch w0 == 0x00000000 l000000000041DBE0
	// succ:  l000000000041DD64 l000000000041DBE0
l000000000041DD64:
	x0 = 0x00000000004DE000
	x0 = Mem0[x0 + 1664:word64]
	fileno(x0)
	sp = sp + 0xFFFFFFFFFFFFFFF8
	isatty(x0)
	sp = sp + 0xFFFFFFFFFFFFFFF8
	branch w0 == 0x00000000 l000000000041DBE0
	// succ:  l000000000041DD78 l000000000041DBE0
l000000000041DD78:
	x0 = 0x00000000004DE000
	x0 = Mem0[x0 + 1640:word64]
	fileno(x0)
	sp = sp + 0xFFFFFFFFFFFFFFF8
	isatty(x0)
	sp = sp + 0xFFFFFFFFFFFFFFF8
	branch w0 != 0x00000000 l000000000041D84C
	// succ:  l000000000041DD8C l000000000041D84C
l000000000041DD8C:
	call fn000000000041E8C8 (retsize: 0;)
	goto l000000000041D86C
	// succ:  l000000000041D86C
l000000000041DD94:
	x0 = 0x00000000004AA000
	x0 = x0 + 0x0000000000000310
	call get_string_value (retsize: 0;)
	x19 = x0
	x0 = 0x00000000004AA000
	x0 = x0 + 0x0000000000000318
	call get_string_value (retsize: 0;)
	x20 = x0
	branch x19 == 0x0000000000000000 l000000000041E4B8
	// succ:  l000000000041DDB8 l000000000041E4B8
l000000000041DDB8:
	v60 = Mem0[x19:byte]
	w0 = (word32) v60
	w1 = 0x00000000
	w31 = w0 - 0x00000065
	NZCV = cond(w31)
	branch Test(EQ,Z) l000000000041E408
	// succ:  l000000000041DDC8 l000000000041E408
l000000000041DDC8:
	x0 = 0x00000000004DE000
	x0 = x0 + 0x00000000000006A8
	w21 = Mem0[x0 + 16:word32]
	w21 = w1 | w21
	Mem0[x0 + 16:word32] = w21
	branch x20 == 0x0000000000000000 l000000000041E3EC
	// succ:  l000000000041DDE0 l000000000041E3EC
l000000000041DDE0:
	v61 = Mem0[x20:byte]
	w0 = (word32) v61
	w31 = w0 - 0x00000074
	NZCV = cond(w31)
	branch Test(EQ,Z) l000000000041E374
	// succ:  l000000000041DDEC l000000000041E374
l000000000041DDEC:
	w21 = 0x00000001
	x0 = 0x00000000004E3000
	Mem0[x0 + 596:word32] = w21
	branch x19 == 0x0000000000000000 l000000000041DE08
	// succ:  l000000000041DDFC l000000000041DE08
l000000000041DDFC:
	v62 = Mem0[x19:byte]
	w0 = (word32) v62
	w31 = w0 - 0x00000065
	NZCV = cond(w31)
	branch Test(EQ,Z) l000000000041DE2C
	// succ:  l000000000041DE08 l000000000041DE2C
l000000000041DE08:
	w1 = 0x00000000
	// succ:  l000000000041DE0C
l000000000041DE0C:
	w1 = w21 + w1
	x0 = 0x00000000004E3000
	Mem0[x0 + 596:word32] = w1
	branch w1 == 0x00000000 l000000000041D930
	// succ:  l000000000041DE1C l000000000041D930
l000000000041DE1C:
	w1 = 0x00000001
	x0 = 0x00000000004DF000
	Mem0[x0 + 3296:word32] = w1
	goto l000000000041D930
	// succ:  l000000000041D930
l000000000041DE2C:
	x1 = 0x00000000004AA000
	x0 = x19
	x1 = x1 + 0x0000000000000330
	x2 = 0x0000000000000005
	strncmp(x0, x1, x2)
	sp = sp + 0xFFFFFFFFFFFFFFF8
	branch w0 != 0x00000000 l000000000041DE08
	// succ:  l000000000041DE44 l000000000041DE08
l000000000041DE44:
	branch x20 == 0x0000000000000000 l000000000041DE08
	// succ:  l000000000041DE48 l000000000041DE08
l000000000041DE48:
	x1 = 0x00000000004AA000
	x1 = x1 + 0x0000000000000338
	x0 = x20
	strstr(x0, x1)
	sp = sp + 0xFFFFFFFFFFFFFFF8
	w1 = 0x00000001
	branch x0 != 0x0000000000000000 l000000000041DE0C
	// succ:  l000000000041DE60 l000000000041DE0C
l000000000041DE60:
	goto l000000000041DE08
	// succ:  l000000000041DE08
l000000000041DE64:
	x19 = 0x00000000004AA000
	x19 = x19 + 0x0000000000000268
	x1 = 0x00000000004BD000
	x0 = x19
	x1 = x1 + 0xFFFFFFFFFFFFFFC0
	w2 = 0x00000000
	call bind_variable (retsize: 0;)
	x0 = x19
	call sv_strict_posix (retsize: 0;)
	goto l000000000041D894
	// succ:  l000000000041D894
l000000000041DE8C:
	x19 = 0x00000000004AA000
	x19 = x19 + 0x0000000000000268
	x1 = 0x00000000004BD000
	x0 = x19
	x1 = x1 + 0xFFFFFFFFFFFFFFC0
	w2 = 0x00000000
	call bind_variable (retsize: 0;)
	x0 = x19
	call sv_strict_posix (retsize: 0;)
	goto l000000000041DA0C
	// succ:  l000000000041DA0C
l000000000041DEB4:
	v54 = Mem0[x1 + 2:byte]
	w1 = (word32) v54
	branch w1 != 0x00000000 l000000000041D3E4
	// succ:  l000000000041DEBC l000000000041D3E4
l000000000041DEBC:
	w1 = Mem0[x0 + 104:word32]
	w1 = w1 + 0x00000001
	Mem0[x0 + 104:word32] = w1
	goto l000000000041D3E4
	// succ:  l000000000041D3E4
l000000000041DECC:
	x0 = Mem0[x0 + 24:word64]
	call maybe_make_restricted (retsize: 0;)
	goto l000000000041DA3C
	// succ:  l000000000041DA3C
l000000000041DED8:
	x0 = x0 + 0x0000000000000001
	Mem0[x1 + 24:word64] = x0
	goto l000000000041D718
	// succ:  l000000000041D718
l000000000041DEE4:
	call fn000000000041EC04 (retsize: 0;)
	goto l000000000041DA78
	// succ:  l000000000041DA78
l000000000041DEEC:
	x0 = 0x00000000004D6000
	x0 = x0 + 0x0000000000000660
	x1 = 0x00000000004E3000
	w0 = Mem0[x0 + 40:word32]
	x1 = Mem0[x1 + 1224:word64]
	call with_input_from_buffered_stream (retsize: 0;)
	goto l000000000041DC74
	// succ:  l000000000041DC74
l000000000041DF08:
	x0 = 0x00000000004DF000
	w2 = Mem0[x19 + 8:word32]
	w22 = Mem0[x0 + 3708:word32]
	Mem0[x0 + 3708:word32] = w1
	branch w2 == 0x00000000 l000000000041E030
	// succ:  l000000000041DF1C l000000000041E030
l000000000041DF1C:
	w0 = 0x00000000
	call set_job_control (retsize: 0;)
	w20 = w0
	// succ:  l000000000041DF28
l000000000041DF28:
	x19 = 0x00000000004DE000
	x19 = x19 + 0x00000000000006A8
	w2 = Mem0[x19 + 32:word32]
	branch w2 == 0x00000000 l000000000041DF5C
	// succ:  l000000000041DF38 l000000000041DF5C
l000000000041DF38:
	w0 = Mem0[x19 + 12:word32]
	w2 = 0x00000000
	branch w0 != 0x00000000 l000000000041DF5C
	// succ:  l000000000041DF44 l000000000041DF5C
l000000000041DF44:
	w1 = Mem0[x19 + 88:word32]
	w0 = Mem0[x19 + 84:word32]
	w1 = w1 + 0x00000001
	Mem0[x19 + 88:word32] = w1
	branch w0 == 0x00000000 l000000000041E424
	// succ:  l000000000041DF58 l000000000041E424
l000000000041DF58:
	w2 = 0x00000001
	// succ:  l000000000041DF5C
l000000000041DF5C:
	x1 = 0x00000000004DE000
	x1 = x1 + 0x00000000000006A8
	w0 = Mem0[x1 + 8:word32]
	branch w0 == 0x00000000 l000000000041E014
	// succ:  l000000000041DF6C l000000000041E014
l000000000041DF6C:
	w0 = Mem0[x1 + 12:word32]
	branch w0 == 0x00000000 l000000000041DFAC
	// succ:  l000000000041DF74 l000000000041DFAC
l000000000041DF74:
	x0 = 0x00000000004DF000
	w0 = Mem0[x0 + 3752:word32]
	branch w0 != 0x00000000 l000000000041DF90
	// succ:  l000000000041DF80 l000000000041DF90
l000000000041DF80:
	w0 = Mem0[x1 + 64:word32]
	w2 = w0 + 0x00000001
	Mem0[x1 + 64:word32] = w2
	branch w0 == 0x00000000 l000000000041E704
	// succ:  l000000000041DF90 l000000000041E704
l000000000041DF90:
	w0 = w20
	call set_job_control (retsize: 0;)
	// succ:  l000000000041DF98
l000000000041DF98:
	x0 = 0x00000000004DF000
	w1 = Mem0[x0 + 3708:word32]
	w1 = w22 + w1
	Mem0[x0 + 3708:word32] = w1
	goto l000000000041D9FC
	// succ:  l000000000041D9FC
l000000000041DFAC:
	w0 = Mem0[x1 + 32:word32]
	branch w0 == 0x00000000 l000000000041DFD4
	// succ:  l000000000041DFB4 l000000000041DFD4
l000000000041DFB4:
	branch w2 != 0x00000000 l000000000041DFD4
	// succ:  l000000000041DFB8 l000000000041DFD4
l000000000041DFB8:
	x19 = 0x00000000004DE000
	x19 = x19 + 0x00000000000006A8
	w1 = Mem0[x19 + 88:word32]
	w0 = Mem0[x19 + 84:word32]
	w1 = w1 + 0x00000001
	Mem0[x19 + 88:word32] = w1
	branch w0 == 0x00000000 l000000000041E688
	// succ:  l000000000041DFD4 l000000000041E688
l000000000041DFD4:
	x1 = 0x00000000004DE000
	x1 = x1 + 0x00000000000006A8
	w0 = Mem0[x1 + 104:word32]
	branch w0 != 0x00000000 l000000000041DF74
	// succ:  l000000000041DFE4 l000000000041DF74
l000000000041DFE4:
	w0 = Mem0[x1 + 88:word32]
	branch w0 != 0x00000000 l000000000041DF90
	// succ:  l000000000041DFEC l000000000041DF90
l000000000041DFEC:
	x0 = 0x00000000004AA000
	w1 = 0x00000001
	x0 = x0 + 0x0000000000000370
	call maybe_execute_file (retsize: 0;)
	x0 = 0x00000000004D6000
	x0 = x0 + 0x0000000000000660
	x0 = Mem0[x0 + 48:word64]
	w1 = 0x00000001
	call maybe_execute_file (retsize: 0;)
	goto l000000000041DF90
	// succ:  l000000000041DF90
l000000000041E014:
	w0 = Mem0[x1 + 108:word32]
	branch w0 == 0x00000000 l000000000041E398
	// succ:  l000000000041E01C l000000000041E398
l000000000041E01C:
	w0 = Mem0[x1 + 32:word32]
	branch w0 == 0x00000000 l000000000041E398
	// succ:  l000000000041E024 l000000000041E398
l000000000041E024:
	w0 = Mem0[x1 + 12:word32]
	branch w0 == 0x00000000 l000000000041DFB4
	// succ:  l000000000041E02C l000000000041DFB4
l000000000041E02C:
	goto l000000000041DF90
	// succ:  l000000000041DF90
l000000000041E030:
	w0 = Mem0[x19 + 88:word32]
	branch w0 != 0x00000000 l000000000041E084
	// succ:  l000000000041E038 l000000000041E084
l000000000041E038:
	w0 = Mem0[x19 + 32:word32]
	branch w0 != 0x00000000 l000000000041E084
	// succ:  l000000000041E040 l000000000041E084
l000000000041E040:
	w0 = Mem0[x19 + 104:word32]
	branch w0 != 0x00000000 l000000000041E084
	// succ:  l000000000041E048 l000000000041E084
l000000000041E048:
	x0 = 0x00000000004E3000
	x0 = Mem0[x0 + 568:word64]
	branch x0 == 0x0000000000000000 l000000000041E084
	// succ:  l000000000041E054 l000000000041E084
l000000000041E054:
	x0 = 0x00000000004AA000
	x0 = x0 + 0x0000000000000350
	call find_variable (retsize: 0;)
	branch x0 == 0x0000000000000000 l000000000041E6DC
	// succ:  l000000000041E064 l000000000041E6DC
l000000000041E064:
	x0 = 0x00000000004DF000
	w0 = Mem0[x0 + 3256:word32]
	w31 = w0 - 0x00000001
	NZCV = cond(w31)
	branch Test(LE,ZCV) l000000000041E6B4
	// succ:  l000000000041E074 l000000000041E6B4
l000000000041E074:
	x0 = 0x00000000004DE000
	x0 = x0 + 0x00000000000006A8
	w0 = Mem0[x0 + 8:word32]
	branch w0 != 0x00000000 l000000000041DF1C
	// succ:  l000000000041E084 l000000000041DF1C
l000000000041E084:
	w20 = 0x00000000
	goto l000000000041DF28
	// succ:  l000000000041DF28
l000000000041E08C:
	x1 = 0x00000000004AA000
	x1 = x1 + 0x00000000000002B0
	w2 = 0x00000005
	dcgettext(x0, x1, x2)
	sp = sp + 0xFFFFFFFFFFFFFFF8
	x1 = 0x00000000004AA000
	x1 = x1 + 0x0000000000000200
	call report_error (retsize: 0;)
	w0 = 0x00000002
	exit(x0)
l000000000041E0B0:
	x2 = Mem0[x29 + 320:word64]
	w0 = Mem0[x29 + 308:word32]
	x24 = 0x00000000004AA000
	x21 = Mem0[x2 + (int64) ((int32) w0):word64]
	x24 = x24 + 0x0000000000000068
	x0 = x21
	strlen(x0)
	sp = sp + 0xFFFFFFFFFFFFFFF8
	w2 = 0x0000056F
	x1 = x24
	x0 = x0 + 0x0000000000000001
	call sh_xmalloc (retsize: 0;)
	x1 = x21
	strcpy(x0, x1)
	sp = sp + 0xFFFFFFFFFFFFFFF8
	w1 = w20
	x19 = x0
	open(x0, x1)
	sp = sp + 0xFFFFFFFFFFFFFFF8
	w20 = w0
	branch (w0 & 0x00000000) == 0x00000000 l000000000041E588
	// succ:  l000000000041E0F8 l000000000041E588
l000000000041E0F8:
	x22 = 0x00000000004AA000
	x0 = 0x00000000004E3000
	x0 = Mem0[x0 + 1224:word64]
	x22 = x22 + 0x0000000000000068
	x1 = x22
	w2 = 0x00000589
	x23 = 0x00000000004E3000
	call sh_xfree (retsize: 0;)
	x0 = Mem0[x23 + 536:word64]
	branch x0 == 0x0000000000000000 l000000000041E564
	// succ:  l000000000041E120 l000000000041E564
l000000000041E120:
	strlen(x0)
	sp = sp + 0xFFFFFFFFFFFFFFF8
	x1 = x22
	w2 = 0x0000058A
	x0 = x0 + 0x0000000000000001
	call sh_xmalloc (retsize: 0;)
	x1 = Mem0[x23 + 536:word64]
	strcpy(x0, x1)
	sp = sp + 0xFFFFFFFFFFFFFFF8
	// succ:  l000000000041E13C
l000000000041E13C:
	x21 = 0x00000000004E3000
	x2 = 0x00000000004E3000
	x1 = Mem0[x21 + 536:word64]
	Mem0[x2 + 1224:word64] = x0
	branch x1 == 0x0000000000000000 l000000000041E168
	// succ:  l000000000041E150 l000000000041E168
l000000000041E150:
	x0 = x1
	x1 = 0x00000000004AA000
	x1 = x1 + 0x0000000000000068
	w2 = 0x0000058D
	call sh_xfree (retsize: 0;)
	Mem0[x21 + 536:word64] = 0x0000000000000000
	// succ:  l000000000041E168
l000000000041E168:
	x0 = 0x00000000004AA000
	x0 = x0 + 0x00000000000003C8
	call find_variable (retsize: 0;)
	branch x0 == 0x0000000000000000 l000000000041E51C
	// succ:  l000000000041E178 l000000000041E51C
l000000000041E178:
	w1 = Mem0[x0 + 40:word32]
	x22 = 0x0000000000000000
	branch (w1 & 0x00000004) == 0x00000000 l000000000041E188
	// succ:  l000000000041E184 l000000000041E188
l000000000041E184:
	x22 = Mem0[x0 + 8:word64]
	// succ:  l000000000041E188
l000000000041E188:
	x0 = 0x00000000004AA000
	x0 = x0 + 0x00000000000003D8
	call find_variable (retsize: 0;)
	branch x0 == 0x0000000000000000 l000000000041E514
	// succ:  l000000000041E198 l000000000041E514
l000000000041E198:
	w1 = Mem0[x0 + 40:word32]
	x21 = 0x0000000000000000
	branch (w1 & 0x00000004) == 0x00000000 l000000000041E1A8
	// succ:  l000000000041E1A4 l000000000041E1A8
l000000000041E1A4:
	x21 = Mem0[x0 + 8:word64]
	// succ:  l000000000041E1A8
l000000000041E1A8:
	x0 = 0x00000000004AA000
	x0 = x0 + 0x00000000000003E8
	call find_variable (retsize: 0;)
	branch x0 == 0x0000000000000000 l000000000041E338
	// succ:  l000000000041E1B8 l000000000041E338
l000000000041E1B8:
	w1 = Mem0[x0 + 40:word32]
	branch (w1 & 0x00000004) == 0x00000000 l000000000041E338
	// succ:  l000000000041E1C0 l000000000041E338
l000000000041E1C0:
	x23 = Mem0[x0 + 8:word64]
	w1 = 0x00000001
	x0 = x21
	x2 = x19
	call array_rshift (retsize: 0;)
	branch x23 == 0x0000000000000000 l000000000041E20C
	// succ:  l000000000041E1D8 l000000000041E20C
l000000000041E1D8:
	call executing_line_number (retsize: 0;)
l000000000041E20C:
	x2 = 0x00000000004AA000
	w1 = 0x00000001
	x2 = x2 + 0x00000000000003F8
	x0 = x22
	call array_rshift (retsize: 0;)
	w0 = w20
	isatty(x0)
	sp = sp + 0xFFFFFFFFFFFFFFF8
	w21 = w0
	branch w0 != 0x00000000 l000000000041E5C0
	// succ:  l000000000041E230 l000000000041E5C0
l000000000041E230:
	w0 = w20
	x1 = 0x0000000000000000
	w2 = 0x00000001
	lseek(x0, x1, x2)
	sp = sp + 0xFFFFFFFFFFFFFFF8
	x31 = x0 + 0x0000000000000001
	NZCV = cond(x31)
	branch Test(EQ,Z) l000000000041E284
	// succ:  l000000000041E248 l000000000041E284
l000000000041E248:
	x1 = x29 + 0x00000000000000E0
	w0 = w20
	x2 = 0x0000000000000050
	read(x0, x1, x2)
	sp = sp + 0xFFFFFFFFFFFFFFF8
	NZCV = cond(w0 - w31)
	x1 = x0
	branch Test(LT,NV) l000000000041E524
	// succ:  l000000000041E264 l000000000041E524
l000000000041E264:
	branch Test(EQ,Z) l000000000041E274
	// succ:  l000000000041E268 l000000000041E274
l000000000041E268:
	x0 = x29 + 0x00000000000000E0
	call check_binary_file (retsize: 0;)
	branch w0 != 0x00000000 l000000000041E4F0
	// succ:  l000000000041E274 l000000000041E4F0
l000000000041E274:
	x1 = 0x0000000000000000
	w0 = w20
	w2 = w1
	lseek(x0, x1, x2)
	sp = sp + 0xFFFFFFFFFFFFFFF8
	// succ:  l000000000041E284
l000000000041E284:
	w1 = 0x00000001
	w2 = 0xFFFFFFFF
	w0 = w20
	call move_to_high_fd (retsize: 0;)
	x3 = 0x00000000004D6000
	x3 = x3 + 0x0000000000000660
	w1 = 0x00000002
	w2 = 0x00000001
	Mem0[x3 + 40:word32] = w0
	fcntl(x0, x1)
	sp = sp + 0xFFFFFFFFFFFFFFF8
	x0 = 0x00000000004DF000
	w0 = Mem0[x0 + 3736:word32]
	branch w0 == 0x00000000 l000000000041E2D8
	// succ:  l000000000041E2B8 l000000000041E2D8
l000000000041E2B8:
	call fn000000000041E8C8 (retsize: 0;)
	x1 = 0x00000000004DE000
	w0 = 0x00000001
	x1 = x1 + 0x00000000000006A8
	Mem0[x1 + 4:word32] = w0
	Mem0[x1 + 8:word32] = w0
	x1 = 0x00000000004DE000
	Mem0[x1 + 2200:word32] = w0
	// succ:  l000000000041E2D8
l000000000041E2D8:
	x1 = 0x00000000004AA000
	x0 = x19
	x1 = x1 + 0x0000000000000068
	w2 = 0x000005EC
	call sh_xfree (retsize: 0;)
	w0 = Mem0[x29 + 308:word32]
	w0 = w0 + 0x00000001
	Mem0[x29 + 308:word32] = w0
	// succ:  l000000000041E2F8
l000000000041E2F8:
	x0 = 0x00000000004DE000
	x0 = x0 + 0x00000000000006A8
	w0 = Mem0[x0:word32]
	branch w0 != 0x00000000 l000000000041DC3C
	// succ:  l000000000041E308 l000000000041DC3C
l000000000041E308:
	x0 = 0x00000000004D6000
	x0 = x0 + 0x0000000000000660
	w0 = Mem0[x0 + 40:word32]
	call sh_unset_nodelay_mode (retsize: 0;)
	goto l000000000041DC4C
	// succ:  l000000000041DC4C
l000000000041E31C:
	x0 = 0x00000000004DE000
	x0 = Mem0[x0 + 1664:word64]
	fileno(x0)
	sp = sp + 0xFFFFFFFFFFFFFFF8
	x1 = 0x00000000004D6000
	x1 = x1 + 0x0000000000000660
	Mem0[x1 + 40:word32] = w0
	goto l000000000041E2F8
	// succ:  l000000000041E2F8
l000000000041E338:
	x0 = x21
	w1 = 0x00000001
	x2 = x19
	call array_rshift (retsize: 0;)
	goto l000000000041E20C
	// succ:  l000000000041E20C
l000000000041E34C:
	call reset_mail_timer (retsize: 0;)
	call init_mail_dates (retsize: 0;)
	call bash_initialize_history (retsize: 0;)
	w0 = Mem0[x19 + 40:word32]
	branch w0 != 0x00000000 l000000000041E36C
	// succ:  l000000000041E360 l000000000041E36C
l000000000041E360:
	x0 = 0x00000000004E3000
	w0 = Mem0[x0 + 3428:word32]
	branch w0 == 0x00000000 l000000000041E4AC
	// succ:  l000000000041E36C l000000000041E4AC
l000000000041E36C:
	call get_tty_state (retsize: 0;)
	goto l000000000041DCBC
	// succ:  l000000000041DCBC
l000000000041E374:
	v63 = Mem0[x20 + 1:byte]
	w0 = (word32) v63
	branch w0 != 0x00000000 l000000000041DDEC
	// succ:  l000000000041E37C l000000000041DDEC
l000000000041E37C:
	v64 = Mem0[x19:byte]
	w0 = (word32) v64
	w31 = w0 - 0x00000064
	NZCV = cond(w31)
	branch Test(EQ,Z) l000000000041E450
	// succ:  l000000000041E388 l000000000041E450
l000000000041E388:
	w21 = 0x00000001
	x0 = 0x00000000004E3000
	Mem0[x0 + 596:word32] = w21
	goto l000000000041DDFC
	// succ:  l000000000041DDFC
l000000000041E398:
	x0 = 0x00000000004DE000
	x0 = x0 + 0x00000000000006A8
	w1 = Mem0[x0 + 12:word32]
	branch w1 != 0x00000000 l000000000041DF98
	// succ:  l000000000041E3A8 l000000000041DF98
l000000000041E3A8:
	w1 = Mem0[x0 + 104:word32]
	branch w1 != 0x00000000 l000000000041DF98
	// succ:  l000000000041E3B0 l000000000041DF98
l000000000041E3B0:
	x1 = 0x00000000004DF000
	w1 = Mem0[x1 + 3752:word32]
	branch w1 != 0x00000000 l000000000041DF98
	// succ:  l000000000041E3BC l000000000041DF98
l000000000041E3BC:
	w1 = Mem0[x0 + 64:word32]
	w2 = w1 + 0x00000001
	Mem0[x0 + 64:word32] = w2
	branch w1 != 0x00000000 l000000000041DF98
	// succ:  l000000000041E3CC l000000000041DF98
l000000000041E3CC:
	x0 = 0x00000000004AA000
	x0 = x0 + 0x0000000000000220
	call get_string_value (retsize: 0;)
	branch x0 == 0x0000000000000000 l000000000041DF98
	// succ:  l000000000041E3DC l000000000041DF98
l000000000041E3DC:
	v67 = Mem0[x0:byte]
	w1 = (word32) v67
	branch w1 == 0x00000000 l000000000041DF98
	// succ:  l000000000041E3E4 l000000000041DF98
l000000000041E3E4:
	call fn000000000041EE74 (retsize: 0;)
	goto l000000000041DF98
	// succ:  l000000000041DF98
l000000000041E3EC:
	v65 = Mem0[x19:byte]
	w0 = (word32) v65
	w31 = w0 - 0x00000065
	NZCV = cond(w31)
	branch Test(EQ,Z) l000000000041E4CC
	// succ:  l000000000041E3F8 l000000000041E4CC
l000000000041E3F8:
	x0 = 0x00000000004E3000
	Mem0[x0 + 596:word32] = 0x00000000
	w21 = 0x00000000
	goto l000000000041DDFC
	// succ:  l000000000041DDFC
l000000000041E408:
	x1 = 0x00000000004AA000
	x1 = x1 + 0x0000000000000320
	x0 = x19
	strcmp(x0, x1)
	sp = sp + 0xFFFFFFFFFFFFFFF8
	NZCV = cond(w0 - w31)
	w1 = (word32) Test(EQ,Z)
	goto l000000000041DDC8
	// succ:  l000000000041DDC8
l000000000041E424:
	x0 = 0x00000000004AA000
	x0 = x0 + 0x0000000000000388
	w1 = 0x00000001
	call maybe_execute_file (retsize: 0;)
	w0 = Mem0[x19 + 104:word32]
	branch w0 == 0x00000000 l000000000041E478
	// succ:  l000000000041E43C l000000000041E478
l000000000041E43C:
	x0 = 0x00000000004AA000
	w1 = 0x00000001
	x0 = x0 + 0x0000000000000398
	call maybe_execute_file (retsize: 0;)
	goto l000000000041DF58
	// succ:  l000000000041DF58
l000000000041E450:
	x1 = 0x00000000004AA000
	x0 = x19
	x1 = x1 + 0x0000000000000328
	strcmp(x0, x1)
	sp = sp + 0xFFFFFFFFFFFFFFF8
	branch w0 != 0x00000000 l000000000041E388
	// succ:  l000000000041E464 l000000000041E388
l000000000041E464:
	x0 = 0x00000000004DE000
	w21 = w21 | 0x00000001
	x0 = x0 + 0x00000000000006A8
	Mem0[x0 + 16:word32] = w21
	goto l000000000041E388
	// succ:  l000000000041E388
l000000000041E478:
	x0 = 0x00000000004AA000
	x0 = x0 + 0x00000000000003A8
	w1 = 0x00000001
	call maybe_execute_file (retsize: 0;)
	branch w0 != 0x00000000 l000000000041DF58
	// succ:  l000000000041E48C l000000000041DF58
l000000000041E48C:
	x0 = 0x00000000004AA000
	x0 = x0 + 0x00000000000003B8
	w1 = 0x00000001
	call maybe_execute_file (retsize: 0;)
	branch w0 != 0x00000000 l000000000041DF58
	// succ:  l000000000041E4A0 l000000000041DF58
l000000000041E4A0:
	goto l000000000041E43C
	// succ:  l000000000041E43C
l000000000041E4A4:
	call with_input_from_stdin (retsize: 0;)
	goto l000000000041DC74
	// succ:  l000000000041DC74
l000000000041E4AC:
	call load_history (retsize: 0;)
	call get_tty_state (retsize: 0;)
	goto l000000000041DCBC
	// succ:  l000000000041DCBC
l000000000041E4B8:
	w21 = Mem0[x22 + 16:word32]
	Mem0[x22 + 16:word32] = w21
	branch x0 != 0x0000000000000000 l000000000041DDE0
	// succ:  l000000000041E4C4 l000000000041DDE0
l000000000041E4C4:
	w21 = w0
	goto l000000000041DE08
	// succ:  l000000000041DE08
l000000000041E4CC:
	x1 = 0x00000000004AA000
	x0 = x19
	x1 = x1 + 0x0000000000000320
	x2 = 0x0000000000000005
	strncmp(x0, x1, x2)
	sp = sp + 0xFFFFFFFFFFFFFFF8
	branch w0 == 0x00000000 l000000000041E388
	// succ:  l000000000041E4E4 l000000000041E388
l000000000041E4E4:
	goto l000000000041E3F8
	// succ:  l000000000041E3F8
l000000000041E4E8:
	call fn000000000041EC04 (retsize: 0;)
	goto l000000000041DCAC
	// succ:  l000000000041DCAC
l000000000041E4F0:
	x1 = 0x00000000004AA000
	x1 = x1 + 0x0000000000000418
	w2 = 0x00000005
	x0 = 0x0000000000000000
	dcgettext(x0, x1, x2)
	sp = sp + 0xFFFFFFFFFFFFFFF8
	x1 = x19
	call internal_error (retsize: 0;)
	// succ:  l000000000041E50C
l000000000041E50C:
	w0 = 0x0000007E
	exit(x0)
l000000000041E514:
	x21 = x0
	goto l000000000041E1A8
	// succ:  l000000000041E1A8
l000000000041E51C:
	x22 = x0
	goto l000000000041E188
	// succ:  l000000000041E188
l000000000041E524:
	__errno_location()
	sp = sp + 0xFFFFFFFFFFFFFFF8
	x22 = x0
	w1 = w20
	w0 = w21
	x2 = x29 + 0x0000000000000060
	w20 = Mem0[x22:word32]
	__fxstat(x0, x1, x2)
	sp = sp + 0xFFFFFFFFFFFFFFF8
	branch w0 != 0x00000000 l000000000041E554
	// succ:  l000000000041E544 l000000000041E554
l000000000041E544:
	w0 = Mem0[x29 + 112:word32]
	w0 = w0 & 0x0000F000
	w31 = w0 - (0x00000004 << 12)
	NZCV = cond(w31)
	branch Test(EQ,Z) l000000000041E618
	// succ:  l000000000041E554 l000000000041E618
l000000000041E554:
	Mem0[x22:word32] = w20
	x0 = x19
	call file_error (retsize: 0;)
	goto l000000000041E50C
	// succ:  l000000000041E50C
l000000000041E564:
	x0 = x21
	strlen(x0)
	sp = sp + 0xFFFFFFFFFFFFFFF8
	x1 = x22
	w2 = 0x0000058A
	x0 = x0 + 0x0000000000000001
	call sh_xmalloc (retsize: 0;)
	x1 = x21
	strcpy(x0, x1)
	sp = sp + 0xFFFFFFFFFFFFFFF8
	goto l000000000041E13C
	// succ:  l000000000041E13C
l000000000041E588:
	__errno_location()
	sp = sp + 0xFFFFFFFFFFFFFFF8
	x23 = x0
	w0 = Mem0[x0:word32]
	w31 = w0 - 0x00000002
	NZCV = cond(w31)
	branch Test(EQ,Z) l000000000041E638
	// succ:  l000000000041E59C l000000000041E638
l000000000041E59C:
	x22 = x19
	// succ:  l000000000041E5A0
l000000000041E5A0:
	w19 = Mem0[x23:word32]
	x0 = x22
	call file_error (retsize: 0;)
	w31 = w19 - 0x00000002
	NZCV = cond(w31)
	w0 = 0x0000007F
	w1 = 0x0000007E
l000000000041E5C0:
	w1 = 0x00000001
	w2 = 0xFFFFFFFF
	w0 = w20
	call move_to_high_fd (retsize: 0;)
	x21 = 0x00000000004D6000
	x21 = x21 + 0x0000000000000660
	w1 = 0x00000002
	w2 = 0x00000001
	w20 = w0
	Mem0[x21 + 40:word32] = w0
	fcntl(x0, x1)
	sp = sp + 0xFFFFFFFFFFFFFFF8
	x0 = 0x00000000004DE000
	x0 = x0 + 0x00000000000006A8
	w0 = Mem0[x0 + 8:word32]
	branch w0 == 0x00000000 l000000000041E2D8
	// succ:  l000000000041E5FC l000000000041E2D8
l000000000041E5FC:
	w1 = 0x00000000
	w0 = w20
	call dup2 (retsize: 0;)
	w0 = w20
	close(x0)
	sp = sp + 0xFFFFFFFFFFFFFFF8
	Mem0[x21 + 40:word32] = 0x00000000
	goto l000000000041E2D8
	// succ:  l000000000041E2D8
l000000000041E618:
	x1 = 0x00000000004AA000
	x1 = x1 + 0x0000000000000400
	w2 = 0x00000005
	x0 = 0x0000000000000000
	dcgettext(x0, x1, x2)
	sp = sp + 0xFFFFFFFFFFFFFFF8
	x1 = x19
	call internal_error (retsize: 0;)
	goto l000000000041E50C
	// succ:  l000000000041E50C
l000000000041E638:
	x0 = x19
	call absolute_program (retsize: 0;)
	w20 = w0
	branch w0 != 0x00000000 l000000000041E59C
	// succ:  l000000000041E648 l000000000041E59C
l000000000041E648:
	x0 = x21
	w25 = Mem0[x23:word32]
	call find_path_file (retsize: 0;)
	x22 = x0
	branch x0 == 0x0000000000000000 l000000000041E724
	// succ:  l000000000041E65C l000000000041E724
l000000000041E65C:
	x0 = x19
	w2 = 0x0000057A
	x1 = x24
	call sh_xfree (retsize: 0;)
	w1 = w20
	x0 = x22
	open(x0, x1)
	sp = sp + 0xFFFFFFFFFFFFFFF8
	w20 = w0
	x19 = x22
	branch (w20 & 0x00000000) == 0x00000000 l000000000041E5A0
	// succ:  l000000000041E684 l000000000041E5A0
l000000000041E684:
	goto l000000000041E0F8
	// succ:  l000000000041E0F8
l000000000041E688:
	x0 = 0x00000000004AA000
	x0 = x0 + 0x0000000000000388
	w1 = 0x00000001
	call maybe_execute_file (retsize: 0;)
	w0 = Mem0[x19 + 104:word32]
	branch w0 == 0x00000000 l000000000041E738
	// succ:  l000000000041E6A0 l000000000041E738
l000000000041E6A0:
	x0 = 0x00000000004AA000
	w1 = 0x00000001
	x0 = x0 + 0x0000000000000398
	call maybe_execute_file (retsize: 0;)
	goto l000000000041DFD4
	// succ:  l000000000041DFD4
l000000000041E6B4:
	x0 = 0x00000000004AA000
	w1 = 0x00000001
	x0 = x0 + 0x0000000000000370
	call maybe_execute_file (retsize: 0;)
	x0 = 0x00000000004D6000
	x0 = x0 + 0x0000000000000660
	x0 = Mem0[x0 + 48:word64]
	w1 = 0x00000001
	call maybe_execute_file (retsize: 0;)
	goto l000000000041DF98
	// succ:  l000000000041DF98
l000000000041E6DC:
	x0 = 0x00000000004AA000
	x0 = x0 + 0x0000000000000360
	call find_variable (retsize: 0;)
	branch x0 != 0x0000000000000000 l000000000041E064
	// succ:  l000000000041E6EC l000000000041E064
l000000000041E6EC:
	x0 = 0x00000000004DE000
	x0 = Mem0[x0 + 1664:word64]
	fileno(x0)
	sp = sp + 0xFFFFFFFFFFFFFFF8
	call isnetconn (retsize: 0;)
	branch w0 != 0x00000000 l000000000041E064
	// succ:  l000000000041E700 l000000000041E064
l000000000041E700:
	goto l000000000041E074
	// succ:  l000000000041E074
l000000000041E704:
	x0 = 0x00000000004AA000
	x0 = x0 + 0x0000000000000218
	call get_string_value (retsize: 0;)
	branch x0 == 0x0000000000000000 l000000000041DF90
	// succ:  l000000000041E714 l000000000041DF90
l000000000041E714:
	v66 = Mem0[x0:byte]
	w1 = (word32) v66
	branch w1 == 0x00000000 l000000000041DF90
	// succ:  l000000000041E71C l000000000041DF90
l000000000041E71C:
	call fn000000000041EE74 (retsize: 0;)
	goto l000000000041DF90
	// succ:  l000000000041DF90
l000000000041E724:
	Mem0[x23:word32] = w25
	goto l000000000041E59C
	// succ:  l000000000041E59C
l000000000041E72C:
	w31 = w24 - 0x0000002D
	NZCV = cond(w31)
	branch Test(EQ,Z) l000000000041D5A4
	// succ:  l000000000041E734 l000000000041D5A4
l000000000041E734:
	goto l000000000041D784
	// succ:  l000000000041D784
l000000000041E738:
	x0 = 0x00000000004AA000
	x0 = x0 + 0x00000000000003A8
	w1 = 0x00000001
	call maybe_execute_file (retsize: 0;)
	branch w0 != 0x00000000 l000000000041DFD4
	// succ:  l000000000041E74C l000000000041DFD4
l000000000041E74C:
	x0 = 0x00000000004AA000
	x0 = x0 + 0x00000000000003B8
	w1 = 0x00000001
	call maybe_execute_file (retsize: 0;)
	branch w0 != 0x00000000 l000000000041DFD4
	// succ:  l000000000041E760 l000000000041DFD4
l000000000041E760:
	goto l000000000041E6A0
	// succ:  l000000000041E6A0
main_exit:


// _start
// Return size: 0
void _start()
_start_entry:
	// succ:  l000000000041E768
l000000000041E768:
	sp = fp
	x29 = 0x0000000000000000
	x30 = 0x0000000000000000
	x29 = x31 + 0x0000000000000000
	x5 = x0
	x1 = Mem0[sp:word64]
	x2 = x31 + 0x0000000000000008
	x6 = x31 + 0x0000000000000000
	x0 = Mem0[0x000000000041E798:word64]
	x3 = Mem0[0x000000000041E7A0:word64]
	x4 = Mem0[0x000000000041E7A8:word64]
	__libc_start_main(x0, x1, x2, x3, x4, x5, x6)
	sp = sp + 0xFFFFFFFFFFFFFFF8
	abort()
_start_exit:


// fn000000000041E7B0
// Return size: 0
void fn000000000041E7B0()
fn000000000041E7B0_entry:
	// succ:  l000000000041E7B0
l000000000041E7B0:
	sp = fp
	x0 = 0x00000000004D5000
	x0 = Mem0[x0 + 4064:word64]
	branch x0 == 0x0000000000000000 l000000000041E7C0
	// succ:  l000000000041E7BC l000000000041E7C0
l000000000041E7BC:
	// succ:  l000000000041E7BC_thunk_fn000000000041C8B0
l000000000041E7BC_thunk_fn000000000041C8B0:
	call fn000000000041C8B0 (retsize: 0;)
	return
	// succ:  fn000000000041E7B0_exit
l000000000041E7C0:
	return
	// succ:  fn000000000041E7B0_exit
fn000000000041E7B0_exit:


// fn000000000041E7C8
// Return size: 0
void fn000000000041E7C8()
fn000000000041E7C8_entry:
	// succ:  l000000000041E7C8
l000000000041E7C8:
	sp = fp
	x1 = 0x00000000004DE000
	x0 = 0x00000000004DE000
	x1 = x1 + 0x0000000000000668
	sp = sp + -16
	Mem0[sp:word64] = x29
	sp = sp + 8
	Mem0[sp:word64] = x30
	x0 = x0 + 0x0000000000000668
	x1 = x1 + 0x0000000000000007
	x29 = x31 + 0x0000000000000000
	x1 = x1 - x0
	x31 = x1 - 0x000000000000000E
	NZCV = cond(x31)
	branch Test(UGT,ZC) l000000000041E7F8
	// succ:  l000000000041E7F0 l000000000041E7F8
l000000000041E7F0:
	x29 = Mem0[sp:word64]
	sp = sp + 8
	x30 = Mem0[sp:word64]
	sp = sp + 16
	return
	// succ:  fn000000000041E7C8_exit
l000000000041E7F8:
	x1 = Mem0[0x000000000041E808:word64]
	branch x1 == 0x0000000000000000 l000000000041E7F0
	// succ:  l000000000041E800 l000000000041E7F0
l000000000041E800:
	call x1 (retsize: 0;)
	goto l000000000041E7F0
	// succ:  l000000000041E7F0
fn000000000041E7C8_exit:


// fn000000000041E8C8
// Return size: 0
void fn000000000041E8C8()
fn000000000041E8C8_entry:
	// succ:  l000000000041E8C8
l000000000041E8C8:
	sp = fp
	sp = sp + -16
	Mem0[sp:word64] = x29
	sp = sp + 8
	Mem0[sp:word64] = x30
	x29 = x31 + 0x0000000000000000
	w0 = 0x00000000
	call bash_history_reinit (retsize: 0;)
	x1 = 0x00000000004DE000
	x1 = x1 + 0x00000000000006A8
	w2 = Mem0[x1 + 12:word32]
	x3 = 0x00000000004DE000
	w0 = 0x00000000
	Mem0[x3 + 2200:word32] = w2
	w2 = 0x00000001
	Mem0[x1:word32] = w0
	Mem0[x1 + 4:word32] = w0
	Mem0[x1 + 8:word32] = w0
	Mem0[x1 + 16:word32] = w2
	x29 = Mem0[sp:word64]
	sp = sp + 8
	x30 = Mem0[sp:word64]
	sp = sp + 16
	// succ:  l000000000041E908_thunk_set_job_control
l000000000041E908_thunk_set_job_control:
	call set_job_control (retsize: 0;)
	return
	// succ:  fn000000000041E8C8_exit
fn000000000041E8C8_exit:


// fn000000000041E90C
// Return size: 0
void fn000000000041E90C()
fn000000000041E90C_entry:
	// succ:  l000000000041E90C
l000000000041E90C:
	sp = fp
	sp = sp + -96
	Mem0[sp:word64] = x29
	sp = sp + 8
	Mem0[sp:word64] = x30
	x29 = x31 + 0x0000000000000000
	v8 = sp + 16
	Mem0[v8:word64] = x19
	v8 = v8 + 8
	Mem0[v8:word64] = x20
	v11 = sp + 48
	Mem0[v11:word64] = x23
	v11 = v11 + 8
	Mem0[v11:word64] = x24
	v14 = sp + 32
	Mem0[v14:word64] = x21
	v14 = v14 + 8
	Mem0[v14:word64] = x22
	v17 = sp + 64
	Mem0[v17:word64] = x25
	v17 = v17 + 8
	Mem0[v17:word64] = x26
	w24 = w1
	x20 = x0
	branch w1 != 0x00000000 l000000000041EBC8
	// succ:  l000000000041E930 l000000000041EBC8
l000000000041E930:
	x1 = 0x00000000004AA000
	x1 = x1 + 0x0000000000000150
	w2 = 0x00000005
	x0 = 0x0000000000000000
	dcgettext(x0, x1, x2)
	sp = sp + 0xFFFFFFFFFFFFFFF8
	x25 = 0x00000000004DE000
	x1 = x25 + 0x00000000000006A8
	x3 = Mem0[x1 + 24:word64]
	x2 = x0
	x4 = x3
	w1 = 0x00000001
	x0 = x20
	__fprintf_chk(x0, x1, x2, Mem0[sp:<unknown>])
	sp = sp + 0xFFFFFFFFFFFFFFF8
	x1 = 0x00000000004AA000
	w2 = 0x00000005
	x1 = x1 + 0x00000000000001B0
	x0 = 0x0000000000000000
	dcgettext(x0, x1, x2)
	sp = sp + 0xFFFFFFFFFFFFFFF8
	x1 = x20
	fputs(x0, x1)
	sp = sp + 0xFFFFFFFFFFFFFFF8
	x19 = 0x00000000004A9000
	x19 = x19 + 0xFFFFFFFFFFFFFDA8
	x3 = 0x00000000004A9000
	x21 = 0x00000000004AA000
	x19 = x19 + 0x0000000000000020
	x3 = x3 + 0xFFFFFFFFFFFFFFC8
	x21 = x21 + 0x0000000000000010
	// succ:  l000000000041E99C
l000000000041E99C:
	x0 = x20
	w1 = 0x00000001
	x2 = x21
	__fprintf_chk(x0, x1, x2, Mem0[sp:<unknown>])
	sp = sp + 0xFFFFFFFFFFFFFFF8
	x3 = Mem0[x19:word64]
	x19 = x19 + 32
	branch x3 != 0x0000000000000000 l000000000041E99C
	// succ:  l000000000041E9B4 l000000000041E99C
l000000000041E9B4:
	x1 = 0x00000000004AA000
	w2 = 0x00000005
	x0 = x3
	x1 = x1 + 0x0000000000000018
	Mem0[x29 + 80:word64] = x3
	dcgettext(x0, x1, x2)
	sp = sp + 0xFFFFFFFFFFFFFFF8
	x1 = x20
	fputs(x0, x1)
	sp = sp + 0xFFFFFFFFFFFFFFF8
	x3 = Mem0[x29 + 80:word64]
	x1 = 0x00000000004AA000
	w2 = 0x00000005
	x0 = x3
	x1 = x1 + 0x0000000000000028
	dcgettext(x0, x1, x2)
	sp = sp + 0xFFFFFFFFFFFFFFF8
	x1 = x20
	fputs(x0, x1)
	sp = sp + 0xFFFFFFFFFFFFFFF8
	x21 = 0x00000000004D7000
	x0 = Mem0[x21 + 2512:word64]
	x3 = Mem0[x29 + 80:word64]
	x2 = Mem0[x0:word64]
	branch x2 == 0x0000000000000000 l000000000041EB20
	// succ:  l000000000041EA08 l000000000041EB20
l000000000041EA08:
	x22 = x3
	x1 = 0x00000000004AA000
	x3 = x0
	x19 = 0x0000000000000030
	x23 = x22
	x26 = x1 + 0x0000000000000068
	goto l000000000041EA40
	// succ:  l000000000041EA40
l000000000041EA24:
	x3 = Mem0[x21 + 2512:word64]
	x4 = x19 + 0x0000000000000030
	x2 = Mem0[x3 + x19:word64]
	x3 = x3 + x19
	branch x2 == 0x0000000000000000 l000000000041EAAC
	// succ:  l000000000041EA38 l000000000041EAAC
l000000000041EA38:
	x22 = x19
	x19 = x4
	// succ:  l000000000041EA40
l000000000041EA40:
	v27 = Mem0[x2:byte]
	w4 = (word32) v27
	w31 = w4 - 0x00000073
	NZCV = cond(w31)
	branch Test(NE,Z) l000000000041EA24
	// succ:  l000000000041EA4C l000000000041EA24
l000000000041EA4C:
	v31 = Mem0[x2 + 1:byte]
	w4 = (word32) v31
	w31 = w4 - 0x00000065
	NZCV = cond(w31)
	branch Test(NE,Z) l000000000041EA24
	// succ:  l000000000041EA58 l000000000041EA24
l000000000041EA58:
	v33 = Mem0[x2 + 2:byte]
	w0 = (word32) v33
	w31 = w0 - 0x00000074
	NZCV = cond(w31)
	branch Test(NE,Z) l000000000041EA24
	// succ:  l000000000041EA64 l000000000041EA24
l000000000041EA64:
	v34 = Mem0[x2 + 3:byte]
	w0 = (word32) v34
	branch w0 != 0x00000000 l000000000041EA24
	// succ:  l000000000041EA6C l000000000041EA24
l000000000041EA6C:
	x0 = Mem0[x3 + 32:word64]
	strlen(x0)
	sp = sp + 0xFFFFFFFFFFFFFFF8
	w2 = 0x0000070F
	x1 = x26
	x0 = x0 + 0x0000000000000001
	call sh_xmalloc (retsize: 0;)
	x3 = Mem0[x21 + 2512:word64]
	x3 = x3 + x22
	x1 = Mem0[x3 + 32:word64]
	strcpy(x0, x1)
	sp = sp + 0xFFFFFFFFFFFFFFF8
	x3 = Mem0[x21 + 2512:word64]
	x23 = x0
	x2 = Mem0[x3 + x19:word64]
	x4 = x19 + 0x0000000000000030
	x3 = x3 + x19
	branch x2 != 0x0000000000000000 l000000000041EA38
	// succ:  l000000000041EAAC l000000000041EA38
l000000000041EAAC:
	branch x23 == 0x0000000000000000 l000000000041EB20
	// succ:  l000000000041EAB0 l000000000041EB20
l000000000041EAB0:
	x0 = x23
	w1 = 0x0000005B
	strchr(x0, x1)
	sp = sp + 0xFFFFFFFFFFFFFFF8
	x31 = x0 - x31
	NZCV = cond(x31)
l000000000041EB20:
	branch w24 != 0x00000000 l000000000041EB3C
	// succ:  l000000000041EB24 l000000000041EB3C
l000000000041EB24:
	v35 = sp + 16
	x19 = Mem0[v35:word64]
	v35 = v35 + 8
	x20 = Mem0[v35:word64]
	v36 = sp + 32
	x21 = Mem0[v36:word64]
	v36 = v36 + 8
	x22 = Mem0[v36:word64]
	v37 = sp + 48
	x23 = Mem0[v37:word64]
	v37 = v37 + 8
	x24 = Mem0[v37:word64]
	v38 = sp + 64
	x25 = Mem0[v38:word64]
	v38 = v38 + 8
	x26 = Mem0[v38:word64]
	x29 = Mem0[sp:word64]
	sp = sp + 8
	x30 = Mem0[sp:word64]
	sp = sp + 96
	return
	// succ:  fn000000000041E90C_exit
l000000000041EB3C:
	x1 = 0x00000000004AA000
	x1 = x1 + 0x0000000000000090
	w2 = 0x00000005
	x0 = 0x0000000000000000
	dcgettext(x0, x1, x2)
	sp = sp + 0xFFFFFFFFFFFFFFF8
	x25 = x25 + 0x00000000000006A8
	x3 = Mem0[x25 + 24:word64]
	x2 = x0
	w1 = 0x00000001
	x0 = x20
	__fprintf_chk(x0, x1, x2, Mem0[sp:<unknown>])
	sp = sp + 0xFFFFFFFFFFFFFFF8
	x1 = 0x00000000004AA000
	x1 = x1 + 0x00000000000000D8
	w2 = 0x00000005
	x0 = 0x0000000000000000
	dcgettext(x0, x1, x2)
	sp = sp + 0xFFFFFFFFFFFFFFF8
	x3 = Mem0[x25 + 24:word64]
	x2 = x0
	w1 = 0x00000001
	x0 = x20
	__fprintf_chk(x0, x1, x2, Mem0[sp:<unknown>])
	sp = sp + 0xFFFFFFFFFFFFFFF8
	x1 = 0x00000000004AA000
	x1 = x1 + 0x0000000000000120
	w2 = 0x00000005
	x0 = 0x0000000000000000
	dcgettext(x0, x1, x2)
	sp = sp + 0xFFFFFFFFFFFFFFF8
	x2 = x0
	v39 = sp + 32
	x21 = Mem0[v39:word64]
	v39 = v39 + 8
	x22 = Mem0[v39:word64]
	x0 = x20
	v40 = sp + 48
	x23 = Mem0[v40:word64]
	v40 = v40 + 8
	x24 = Mem0[v40:word64]
	v41 = sp + 16
	x19 = Mem0[v41:word64]
	v41 = v41 + 8
	x20 = Mem0[v41:word64]
	v42 = sp + 64
	x25 = Mem0[v42:word64]
	v42 = v42 + 8
	x26 = Mem0[v42:word64]
	x29 = Mem0[sp:word64]
	sp = sp + 8
	x30 = Mem0[sp:word64]
	sp = sp + 96
	w1 = 0x00000001
	__fprintf_chk(x0, x1, x2, Mem0[sp:<unknown>])
	return
	// succ:  fn000000000041E90C_exit
l000000000041EBC8:
	x1 = 0x00000000004A9000
	x1 = x1 + 0xFFFFFFFFFFFFFFD0
	w2 = 0x00000005
	x0 = 0x0000000000000000
	dcgettext(x0, x1, x2)
	sp = sp + 0xFFFFFFFFFFFFFFF8
	Mem0[x29 + 80:word64] = x0
	call shell_version_string (retsize: 0;)
	x2 = Mem0[x29 + 80:word64]
	x4 = 0x00000000004A9000
	x3 = x0
	w1 = 0x00000001
	x0 = x20
	x4 = x4 + 0xFFFFFFFFFFFFFFF0
	__fprintf_chk(x0, x1, x2, Mem0[sp:<unknown>])
	sp = sp + 0xFFFFFFFFFFFFFFF8
	goto l000000000041E930
	// succ:  l000000000041E930
fn000000000041E90C_exit:


// fn000000000041EC04
// Return size: 0
void fn000000000041EC04()
fn000000000041EC04_entry:
	// succ:  l000000000041EC04
l000000000041EC04:
	sp = fp
	sp = sp + -32
	Mem0[sp:word64] = x29
	sp = sp + 8
	Mem0[sp:word64] = x30
	x29 = x31 + 0x0000000000000000
	x0 = 0x00000000004AA000
	v9 = sp + 16
	Mem0[v9:word64] = x19
	v9 = v9 + 8
	Mem0[v9:word64] = x20
	w1 = 0x00000001
	x19 = 0x00000000004DF000
	x0 = x0 + 0x00000000000001C8
	w20 = Mem0[x19 + 3708:word32]
	Mem0[x19 + 3708:word32] = 0x00000000
	call maybe_execute_file (retsize: 0;)
	w0 = Mem0[x19 + 3708:word32]
	w2 = 0x00000001
	w0 = w0 + w20
	x1 = 0x00000000004DF000
	Mem0[x19 + 3708:word32] = w0
	Mem0[x1 + 3772:word32] = w2
	v15 = sp + 16
	x19 = Mem0[v15:word64]
	v15 = v15 + 8
	x20 = Mem0[v15:word64]
	x29 = Mem0[sp:word64]
	sp = sp + 8
	x30 = Mem0[sp:word64]
	sp = sp + 32
	return
	// succ:  fn000000000041EC04_exit
fn000000000041EC04_exit:


// fn000000000041EC50
// Return size: 0
void fn000000000041EC50()
fn000000000041EC50_entry:
	// succ:  l000000000041EC50
l000000000041EC50:
	sp = fp
	sp = sp + -48
	Mem0[sp:word64] = x29
	sp = sp + 8
	Mem0[sp:word64] = x30
	x29 = x31 + 0x0000000000000000
	Mem0[x29 + 32:word64] = x0
	x0 = 0x00000000004E3000
	w1 = 0x00000001
	x0 = x0 + 0xFFFFFFFFFFFFFC28
	Mem0[sp + 16:word64] = x19
	call __sigsetjmp (retsize: 0;)
	w19 = w0
	branch w0 == 0x00000000 l000000000041ECA0
	// succ:  l000000000041EC78 l000000000041ECA0
l000000000041EC78:
	call unlink_fifo_list (retsize: 0;)
	w0 = w19 - 0x00000001
	w31 = w0 - 0x00000003
	NZCV = cond(w31)
	branch Test(ULE,ZC) l000000000041ECE0
	// succ:  l000000000041EC88 l000000000041ECE0
l000000000041EC88:
	x0 = 0x00000000004AA000
	x0 = x0 + 0x00000000000001F0
	w1 = 0x00000003
	w2 = w19
	w3 = 0x00000000
	call command_error (retsize: 0;)
	// succ:  l000000000041ECA0
l000000000041ECA0:
	x0 = Mem0[x29 + 32:word64]
	strlen(x0)
	sp = sp + 0xFFFFFFFFFFFFFFF8
	x1 = 0x00000000004AA000
	w2 = 0x00000523
	x1 = x1 + 0x0000000000000068
	x0 = x0 + 0x0000000000000001
	call sh_xmalloc (retsize: 0;)
	x1 = Mem0[x29 + 32:word64]
	strcpy(x0, x1)
	sp = sp + 0xFFFFFFFFFFFFFFF8
	x1 = 0x00000000004AA000
	x1 = x1 + 0x0000000000000200
	w2 = 0x00000004
	call parse_and_execute (retsize: 0;)
	x19 = Mem0[sp + 16:word64]
	x29 = Mem0[sp:word64]
	sp = sp + 8
	x30 = Mem0[sp:word64]
	sp = sp + 48
	return
	// succ:  fn000000000041EC50_exit
l000000000041ECE0:
	x1 = 0x00000000004A9000
	x1 = x1 + 0xFFFFFFFFFFFFFD40
	v17 = Mem0[x1 + (uint64) ((uint32) w0):byte]
	w2 = (word32) v17
	x3 = 0x000000000041ECF8
	x2 = x3 + (int64) ((int8) w2)
fn000000000041EC50_exit:


// fn000000000041ED24
// Return size: 0
void fn000000000041ED24()
fn000000000041ED24_entry:
	// succ:  l000000000041ED24
l000000000041ED24:
	sp = fp
	sp = sp + -64
	Mem0[sp:word64] = x29
	sp = sp + 8
	Mem0[sp:word64] = x30
	x29 = x31 + 0x0000000000000000
	v8 = sp + 32
	Mem0[v8:word64] = x21
	v8 = v8 + 8
	Mem0[v8:word64] = x22
	Mem0[sp + 48:word64] = x23
	v12 = sp + 16
	Mem0[v12:word64] = x19
	v12 = v12 + 8
	Mem0[v12:word64] = x20
	NZCV = cond(w1 - w2)
	w21 = w1
	w22 = w2
	w23 = w3
	branch Test(GE,NZV) l000000000041EE5C
	// succ:  l000000000041ED4C l000000000041EE5C
l000000000041ED4C:
	w1 = w2 - 0x00000001
l000000000041EE5C:
	w0 = w21
	v22 = sp + 16
	x19 = Mem0[v22:word64]
	v22 = v22 + 8
	x20 = Mem0[v22:word64]
	v23 = sp + 32
	x21 = Mem0[v23:word64]
	v23 = v23 + 8
	x22 = Mem0[v23:word64]
	x23 = Mem0[sp + 48:word64]
	x29 = Mem0[sp:word64]
	sp = sp + 8
	x30 = Mem0[sp:word64]
	sp = sp + 64
	return
	// succ:  fn000000000041ED24_exit
fn000000000041ED24_exit:


// fn000000000041EE74
// Return size: 0
void fn000000000041EE74()
fn000000000041EE74_entry:
	// succ:  l000000000041EE74
l000000000041EE74:
	sp = fp
	sp = sp + -32
	Mem0[sp:word64] = x29
	sp = sp + 8
	Mem0[sp:word64] = x30
	x29 = x31 + 0x0000000000000000
	w1 = 0x00000001
	Mem0[sp + 16:word64] = x19
	call expand_string_unsplit_to_string (retsize: 0;)
	x19 = x0
	branch x0 == 0x0000000000000000 l000000000041EEC0
	// succ:  l000000000041EE90 l000000000041EEC0
l000000000041EE90:
	v9 = Mem0[x0:byte]
	w1 = (word32) v9
	branch w1 != 0x00000000 l000000000041EEB4
	// succ:  l000000000041EE98 l000000000041EEB4
l000000000041EE98:
	x0 = x19
	x1 = 0x00000000004AA000
	x19 = Mem0[sp + 16:word64]
	x29 = Mem0[sp:word64]
	sp = sp + 8
	x30 = Mem0[sp:word64]
	sp = sp + 32
	x1 = x1 + 0x0000000000000068
	w2 = 0x000003E2
	// succ:  l000000000041EEB0_thunk_sh_xfree
l000000000041EEB0_thunk_sh_xfree:
	call sh_xfree (retsize: 0;)
	return
	// succ:  fn000000000041EE74_exit
l000000000041EEB4:
	w1 = 0x00000001
	call maybe_execute_file (retsize: 0;)
	goto l000000000041EE98
	// succ:  l000000000041EE98
l000000000041EEC0:
	x19 = Mem0[sp + 16:word64]
	x29 = Mem0[sp:word64]
	sp = sp + 8
	x30 = Mem0[sp:word64]
	sp = sp + 32
	return
	// succ:  fn000000000041EE74_exit
fn000000000041EE74_exit:


// exit_shell
// Return size: 0
void exit_shell()
exit_shell_entry:
	// succ:  l000000000041EECC
l000000000041EECC:
	sp = fp
	sp = sp + -32
	Mem0[sp:word64] = x29
	sp = sp + 8
	Mem0[sp:word64] = x30
	x29 = x31 + 0x0000000000000000
	v8 = sp + 16
	Mem0[v8:word64] = x19
	v8 = v8 + 8
	Mem0[v8:word64] = x20
	w20 = w0
	x0 = 0x00000000004DE000
	x0 = Mem0[x0 + 1648:word64]
	fflush(x0)
	sp = sp + 0xFFFFFFFFFFFFFFF8
	x0 = 0x00000000004DE000
	x0 = Mem0[x0 + 1640:word64]
	fflush(x0)
	sp = sp + 0xFFFFFFFFFFFFFFF8
	w0 = 0x00000000
	call signal_is_trapped (retsize: 0;)
	branch w0 != 0x00000000 l000000000041EF58
	// succ:  l000000000041EF00 l000000000041EF58
l000000000041EF00:
	call unlink_fifo_list (retsize: 0;)
	x19 = 0x00000000004DE000
	x0 = x19 + 0x00000000000006A8
	w0 = Mem0[x0 + 8:word32]
	branch w0 != 0x00000000 l000000000041EF50
	// succ:  l000000000041EF14 l000000000041EF50
l000000000041EF14:
	call coproc_flush (retsize: 0;)
	x19 = x19 + 0x00000000000006A8
	w0 = Mem0[x19 + 8:word32]
	branch w0 == 0x00000000 l000000000041EF2C
	// succ:  l000000000041EF24 l000000000041EF2C
l000000000041EF24:
	w0 = Mem0[x19 + 32:word32]
	branch w0 != 0x00000000 l000000000041EF40
	// succ:  l000000000041EF2C l000000000041EF40
l000000000041EF2C:
	x0 = 0x00000000004E3000
	w0 = Mem0[x0 + 1184:word32]
	branch w0 == 0x00000000 l000000000041EF64
	// succ:  l000000000041EF38 l000000000041EF64
l000000000041EF38:
	w0 = w20
	exit(x0)
l000000000041EF40:
	w0 = Mem0[x19 + 36:word32]
	branch w0 == 0x00000000 l000000000041EF2C
	// succ:  l000000000041EF48 l000000000041EF2C
l000000000041EF48:
	call hangup_all_jobs (retsize: 0;)
	goto l000000000041EF2C
	// succ:  l000000000041EF2C
l000000000041EF50:
	call maybe_save_shell_history (retsize: 0;)
	goto l000000000041EF14
	// succ:  l000000000041EF14
l000000000041EF58:
	call run_exit_trap (retsize: 0;)
	w20 = w0
	goto l000000000041EF00
	// succ:  l000000000041EF00
l000000000041EF64:
	call end_job_control (retsize: 0;)
	goto l000000000041EF38
	// succ:  l000000000041EF38
exit_shell_exit:


// sh_exit
// Return size: 0
void sh_exit()
sh_exit_entry:
	// succ:  l000000000041EF6C
l000000000041EF6C:
	sp = fp
	sp = sp + -16
	Mem0[sp:word64] = x29
	sp = sp + 8
	Mem0[sp:word64] = x30
	x29 = x31 + 0x0000000000000000
	exit(x0)
sh_exit_exit:


// shell_is_restricted
// Return size: 0
void shell_is_restricted()
shell_is_restricted_entry:
	// succ:  l000000000041EF78
l000000000041EF78:
	sp = fp
	sp = sp + -32
	Mem0[sp:word64] = x29
	sp = sp + 8
	Mem0[sp:word64] = x30
	x29 = x31 + 0x0000000000000000
	x1 = 0x00000000004DF000
	w1 = Mem0[x1 + 3696:word32]
	Mem0[sp + 16:word64] = x19
	branch w1 == 0x00000000 l000000000041EFA4
	// succ:  l000000000041EF90 l000000000041EFA4
l000000000041EF90:
	w19 = 0x00000001
	// succ:  l000000000041EF94
l000000000041EF94:
	w0 = w19
	x19 = Mem0[sp + 16:word64]
	x29 = Mem0[sp:word64]
	sp = sp + 8
	x30 = Mem0[sp:word64]
	sp = sp + 32
	return
	// succ:  shell_is_restricted_exit
l000000000041EFA4:
	call base_pathname (retsize: 0;)
	v12 = Mem0[x0:byte]
	w1 = (word32) v12
	w31 = w1 - 0x0000002D
	NZCV = cond(w31)
	branch Test(EQ,Z) l000000000041EFD4
	// succ:  l000000000041EFB4 l000000000041EFD4
l000000000041EFB4:
	w31 = w1 - 0x00000072
	NZCV = cond(w31)
	w19 = 0x00000000
	branch Test(NE,Z) l000000000041EF94
	// succ:  l000000000041EFC0 l000000000041EF94
l000000000041EFC0:
	x1 = 0x00000000004AA000
	x1 = x1 + 0x0000000000000208
	strcmp(x0, x1)
	sp = sp + 0xFFFFFFFFFFFFFFF8
	branch w0 == 0x00000000 l000000000041EF90
	// succ:  l000000000041EFD0 l000000000041EF90
l000000000041EFD0:
	goto l000000000041EF94
	// succ:  l000000000041EF94
l000000000041EFD4:
	v16 = Mem0[x0 + 1:byte]
	w1 = (word32) v16
	x0 = x0 + 0x0000000000000001
	goto l000000000041EFB4
	// succ:  l000000000041EFB4
shell_is_restricted_exit:


// maybe_make_restricted
// Return size: 0
void maybe_make_restricted()
maybe_make_restricted_entry:
	// succ:  l000000000041EFE0
l000000000041EFE0:
	sp = fp
	sp = sp + -32
	Mem0[sp:word64] = x29
	sp = sp + 8
	Mem0[sp:word64] = x30
	x29 = x31 + 0x0000000000000000
	v8 = sp + 16
	Mem0[v8:word64] = x19
	v8 = v8 + 8
	Mem0[v8:word64] = x20
	call base_pathname (retsize: 0;)
	v11 = Mem0[x0:byte]
	w2 = (word32) v11
	x19 = 0x00000000004DF000
	w1 = Mem0[x19 + 3696:word32]
	w31 = w2 - 0x0000002D
	NZCV = cond(w31)
maybe_make_restricted_exit:


// disable_priv_mode
// Return size: 0
void disable_priv_mode()
disable_priv_mode_entry:
	// succ:  l000000000041F080
l000000000041F080:
	sp = fp
	sp = sp + -32
	Mem0[sp:word64] = x29
	sp = sp + 8
	Mem0[sp:word64] = x30
	x29 = x31 + 0x0000000000000000
	Mem0[sp + 16:word64] = x19
	x19 = 0x00000000004D6000
	x19 = x19 + 0x0000000000000660
	w0 = Mem0[x19:word32]
	call setuid (retsize: 0;)
	w0 = Mem0[x19 + 8:word32]
	call setgid (retsize: 0;)
	w1 = Mem0[x19:word32]
	w0 = Mem0[x19 + 8:word32]
	Mem0[x19 + 4:word32] = w1
	Mem0[x19 + 12:word32] = w0
	x19 = Mem0[sp + 16:word64]
	x29 = Mem0[sp:word64]
	sp = sp + 8
	x30 = Mem0[sp:word64]
	sp = sp + 32
	return
	// succ:  disable_priv_mode_exit
disable_priv_mode_exit:


// unbind_args
// Return size: 0
void unbind_args()
unbind_args_entry:
	// succ:  l000000000041F0C0
l000000000041F0C0:
	sp = fp
	sp = sp + -16
	Mem0[sp:word64] = x29
	sp = sp + 8
	Mem0[sp:word64] = x30
	x29 = x31 + 0x0000000000000000
	x0 = 0x0000000000000000
	w1 = 0x00000001
	call remember_args (retsize: 0;)
	x29 = Mem0[sp:word64]
	sp = sp + 8
	x30 = Mem0[sp:word64]
	sp = sp + 16
	// succ:  l000000000041F0D8_thunk_pop_args
l000000000041F0D8_thunk_pop_args:
	call pop_args (retsize: 0;)
	return
	// succ:  unbind_args_exit
unbind_args_exit:


// unset_bash_input
// Return size: 0
void unset_bash_input()
unset_bash_input_entry:
	// succ:  l000000000041F0DC
l000000000041F0DC:
	sp = fp
	sp = sp + -32
	Mem0[sp:word64] = x29
	sp = sp + 8
	Mem0[sp:word64] = x30
	x29 = x31 + 0x0000000000000000
	Mem0[sp + 16:word64] = x19
	x19 = 0x00000000004D6000
	branch w0 != 0x00000000 l000000000041F12C
	// succ:  l000000000041F0F0 l000000000041F12C
l000000000041F0F0:
	x0 = x19 + 0x0000000000000660
	w0 = Mem0[x0 + 40:word32]
	NZCV = cond(w0 - w31)
	branch Test(LE,ZCV) l000000000041F120
	// succ:  l000000000041F100 l000000000041F120
l000000000041F100:
	call close_buffered_fd (retsize: 0;)
	x0 = 0x00000000004E3000
	w1 = 0xFFFFFFFF
	x2 = x0 + 0x0000000000000298
	x19 = x19 + 0x0000000000000660
	Mem0[x2 + 16:word32] = w1
	Mem0[x19 + 40:word32] = w1
	Mem0[x0 + 664:word32] = 0x00000000
	// succ:  l000000000041F120
l000000000041F120:
	x19 = Mem0[sp + 16:word64]
	x29 = Mem0[sp:word64]
	sp = sp + 8
	x30 = Mem0[sp:word64]
	sp = sp + 32
	return
	// succ:  unset_bash_input_exit
l000000000041F12C:
	x0 = x19 + 0x0000000000000660
	w0 = Mem0[x0 + 40:word32]
	branch (w0 & 0x00000000) == 0x00000000 l000000000041F100
	// succ:  l000000000041F138 l000000000041F100
l000000000041F138:
	x19 = Mem0[sp + 16:word64]
	x29 = Mem0[sp:word64]
	sp = sp + 8
	x30 = Mem0[sp:word64]
	sp = sp + 32
	return
	// succ:  unset_bash_input_exit
unset_bash_input_exit:


// get_current_user_info
// Return size: 0
void get_current_user_info()
get_current_user_info_entry:
	// succ:  l000000000041F144
l000000000041F144:
	sp = fp
	sp = sp + -64
	Mem0[sp:word64] = x29
	sp = sp + 8
	Mem0[sp:word64] = x30
	x29 = x31 + 0x0000000000000000
	v8 = sp + 16
	Mem0[v8:word64] = x19
	v8 = v8 + 8
	Mem0[v8:word64] = x20
	x20 = 0x00000000004D6000
	x19 = x20 + 0x0000000000000660
	x0 = Mem0[x19 + 16:word64]
	v12 = sp + 32
	Mem0[v12:word64] = x21
	v12 = v12 + 8
	Mem0[v12:word64] = x22
	Mem0[sp + 48:word64] = x23
	branch x0 == 0x0000000000000000 l000000000041F17C
	// succ:  l000000000041F168 l000000000041F17C
l000000000041F168:
	v14 = sp + 16
	x19 = Mem0[v14:word64]
	v14 = v14 + 8
	x20 = Mem0[v14:word64]
	v15 = sp + 32
	x21 = Mem0[v15:word64]
	v15 = v15 + 8
	x22 = Mem0[v15:word64]
	x23 = Mem0[sp + 48:word64]
	x29 = Mem0[sp:word64]
	sp = sp + 8
	x30 = Mem0[sp:word64]
	sp = sp + 64
	return
	// succ:  get_current_user_info_exit
l000000000041F17C:
	w0 = Mem0[x19:word32]
	getpwuid(x0)
	sp = sp + 0xFFFFFFFFFFFFFFF8
	x21 = x0
	branch x0 == 0x0000000000000000 l000000000041F254
	// succ:  l000000000041F18C l000000000041F254
l000000000041F18C:
	x0 = Mem0[x0:word64]
	x22 = 0x00000000004AA000
	strlen(x0)
	sp = sp + 0xFFFFFFFFFFFFFFF8
	x23 = x22 + 0x0000000000000068
	w2 = 0x0000066C
	x1 = x23
	x0 = x0 + 0x0000000000000001
	call sh_xmalloc (retsize: 0;)
	x1 = Mem0[x21:word64]
	strcpy(x0, x1)
	sp = sp + 0xFFFFFFFFFFFFFFF8
	x2 = Mem0[x21 + 40:word64]
	Mem0[x19 + 16:word64] = x0
	branch x2 == 0x0000000000000000 l000000000041F1C8
	// succ:  l000000000041F1C0 l000000000041F1C8
l000000000041F1C0:
	v20 = Mem0[x2:byte]
	w0 = (word32) v20
	branch w0 != 0x00000000 l000000000041F22C
	// succ:  l000000000041F1C8 l000000000041F22C
l000000000041F1C8:
	x1 = x22 + 0x0000000000000068
	w2 = 0x0000066F
	x0 = 0x0000000000000008
	call sh_xmalloc (retsize: 0;)
	x1 = 0x00000000004AA000
	x1 = x1 + 0x0000000000000230
	x2 = Mem0[x1:word64]
	x1 = x0
	Mem0[x0:word64] = x2
	// succ:  l000000000041F1EC
l000000000041F1EC:
	x0 = Mem0[x21 + 32:word64]
	x20 = x20 + 0x0000000000000660
	Mem0[x20 + 24:word64] = x1
	strlen(x0)
	sp = sp + 0xFFFFFFFFFFFFFFF8
	x1 = x22 + 0x0000000000000068
	w2 = 0x00000670
	x0 = x0 + 0x0000000000000001
	call sh_xmalloc (retsize: 0;)
	x1 = Mem0[x21 + 32:word64]
	strcpy(x0, x1)
	sp = sp + 0xFFFFFFFFFFFFFFF8
	Mem0[x20 + 32:word64] = x0
	// succ:  l000000000041F218
l000000000041F218:
	v21 = sp + 16
	x19 = Mem0[v21:word64]
	v21 = v21 + 8
	x20 = Mem0[v21:word64]
	v22 = sp + 32
	x21 = Mem0[v22:word64]
	v22 = v22 + 8
	x22 = Mem0[v22:word64]
	x23 = Mem0[sp + 48:word64]
	x29 = Mem0[sp:word64]
	sp = sp + 8
	x30 = Mem0[sp:word64]
	sp = sp + 64
	call endpwent (retsize: 0;)
	return
	// succ:  get_current_user_info_exit
l000000000041F22C:
	x0 = x2
	strlen(x0)
	sp = sp + 0xFFFFFFFFFFFFFFF8
	x1 = x23
	w2 = 0x0000066E
	x0 = x0 + 0x0000000000000001
	call sh_xmalloc (retsize: 0;)
	x1 = Mem0[x21 + 40:word64]
	strcpy(x0, x1)
	sp = sp + 0xFFFFFFFFFFFFFFF8
	x1 = x0
	goto l000000000041F1EC
	// succ:  l000000000041F1EC
l000000000041F254:
	x1 = 0x00000000004AA000
	x1 = x1 + 0x0000000000000238
	w2 = 0x00000005
	dcgettext(x0, x1, x2)
	sp = sp + 0xFFFFFFFFFFFFFFF8
	x20 = 0x00000000004AA000
	x20 = x20 + 0x0000000000000068
	Mem0[x19 + 16:word64] = x0
	strlen(x0)
	sp = sp + 0xFFFFFFFFFFFFFFF8
	w2 = 0x00000675
	x1 = x20
	x0 = x0 + 0x0000000000000001
	call sh_xmalloc (retsize: 0;)
	x1 = Mem0[x19 + 16:word64]
	strcpy(x0, x1)
	sp = sp + 0xFFFFFFFFFFFFFFF8
	Mem0[x19 + 16:word64] = x0
	x1 = x20
	w2 = 0x00000676
	x0 = 0x0000000000000008
	call sh_xmalloc (retsize: 0;)
	x3 = x0
	x0 = 0x00000000004AA000
	x0 = x0 + 0x0000000000000230
	x1 = Mem0[x0:word64]
	w2 = 0x00000677
	Mem0[x3:word64] = x1
	x0 = 0x0000000000000002
	x1 = x20
	Mem0[x19 + 24:word64] = x3
	call sh_xmalloc (retsize: 0;)
	x1 = 0x00000000004AA000
	x1 = x1 + 0x0000000000000248
	v25 = Mem0[x1:word16]
	w1 = (word32) v25
	Mem0[x0:word16] = (word16) w1
	Mem0[x19 + 32:word64] = x0
	goto l000000000041F218
	// succ:  l000000000041F218
get_current_user_info_exit:


// fn000000000041F2E0
// Return size: 0
void fn000000000041F2E0()
fn000000000041F2E0_entry:
	// succ:  l000000000041F2E0
l000000000041F2E0:
	sp = fp
	sp = sp + -288
	Mem0[sp:word64] = x29
	sp = sp + 8
	Mem0[sp:word64] = x30
	x29 = x31 + 0x0000000000000000
	v8 = sp + 16
	Mem0[v8:word64] = x19
	v8 = v8 + 8
	Mem0[v8:word64] = x20
	x19 = 0x00000000004DE000
	x0 = x19 + 0x00000000000006A8
	w0 = Mem0[x0 + 40:word32]
	branch w0 == 0x00000000 l000000000041F3E4
	// succ:  l000000000041F2FC l000000000041F3E4
l000000000041F2FC:
	call initialize_shell_builtins (retsize: 0;)
	call initialize_traps (retsize: 0;)
	w0 = 0x00000000
	x20 = x19 + 0x00000000000006A8
	call initialize_signals (retsize: 0;)
	x0 = Mem0[x20 + 48:word64]
	branch x0 == 0x0000000000000000 l000000000041F400
	// succ:  l000000000041F318 l000000000041F400
l000000000041F318:
	x0 = x19 + 0x00000000000006A8
	w0 = Mem0[x0 + 8:word32]
	branch w0 != 0x00000000 l000000000041F3DC
	// succ:  l000000000041F324 l000000000041F3DC
l000000000041F324:
	call tilde_initialize (retsize: 0;)
	x20 = 0x00000000004DF000
	w2 = Mem0[x20 + 3752:word32]
	x0 = 0x00000000004E3000
	x0 = Mem0[x0 + 584:word64]
	w1 = 0x00000001
	branch w2 != 0x00000000 l000000000041F34C
	// succ:  l000000000041F340 l000000000041F34C
l000000000041F340:
	x2 = 0x00000000004DF000
	w2 = Mem0[x2 + 3696:word32]
	branch w2 == 0x00000000 l000000000041F3C8
	// succ:  l000000000041F34C l000000000041F3C8
l000000000041F34C:
	call initialize_shell_variables (retsize: 0;)
	w0 = 0x00000000
	call initialize_job_control (retsize: 0;)
	call initialize_bash_input (retsize: 0;)
	call initialize_flags (retsize: 0;)
	w1 = Mem0[x20 + 3752:word32]
	w0 = 0x00000001
	branch w1 != 0x00000000 l000000000041F378
	// succ:  l000000000041F36C l000000000041F378
l000000000041F36C:
	x1 = 0x00000000004DF000
	w1 = Mem0[x1 + 3696:word32]
	branch w1 == 0x00000000 l000000000041F3B4
	// succ:  l000000000041F378 l000000000041F3B4
l000000000041F378:
	call initialize_shell_options (retsize: 0;)
	w1 = Mem0[x20 + 3752:word32]
	w0 = 0x00000001
	branch w1 != 0x00000000 l000000000041F3A4
	// succ:  l000000000041F388 l000000000041F3A4
l000000000041F388:
	x1 = 0x00000000004DF000
	w1 = Mem0[x1 + 3696:word32]
	branch w1 != 0x00000000 l000000000041F3A4
	// succ:  l000000000041F394 l000000000041F3A4
l000000000041F394:
	x19 = x19 + 0x00000000000006A8
	w0 = Mem0[x19 + 56:word32]
	NZCV = cond(w0 - w31)
	w0 = (word32) Test(NE,Z)
	// succ:  l000000000041F3A4
l000000000041F3A4:
	call initialize_bashopts (retsize: 0;)
	v18 = sp + 16
	x19 = Mem0[v18:word64]
	v18 = v18 + 8
	x20 = Mem0[v18:word64]
	x29 = Mem0[sp:word64]
	sp = sp + 8
	x30 = Mem0[sp:word64]
	sp = sp + 288
	return
	// succ:  fn000000000041F2E0_exit
l000000000041F3B4:
	x0 = x19 + 0x00000000000006A8
	w0 = Mem0[x0 + 56:word32]
	NZCV = cond(w0 - w31)
	w0 = (word32) Test(NE,Z)
	goto l000000000041F378
	// succ:  l000000000041F378
l000000000041F3C8:
	x1 = x19 + 0x00000000000006A8
	w1 = Mem0[x1 + 56:word32]
	NZCV = cond(w1 - w31)
	w1 = (word32) Test(NE,Z)
	goto l000000000041F34C
	// succ:  l000000000041F34C
l000000000041F3DC:
	call get_current_user_info (retsize: 0;)
	goto l000000000041F324
	// succ:  l000000000041F324
l000000000041F3E4:
	x0 = 0x00000000004DE000
	x0 = Mem0[x0 + 1640:word64]
	call sh_setlinebuf (retsize: 0;)
	x0 = 0x00000000004DE000
	x0 = Mem0[x0 + 1648:word64]
	call sh_setlinebuf (retsize: 0;)
	goto l000000000041F2FC
	// succ:  l000000000041F2FC
l000000000041F400:
	x1 = 0x00000000000000FF
	x0 = x29 + 0x0000000000000020
	call gethostname (retsize: 0;)
	branch (w0 & 0x00000000) == 0x00000000 l000000000041F43C
	// succ:  l000000000041F410 l000000000041F43C
l000000000041F410:
	x0 = x29 + 0x0000000000000020
	strlen(x0)
	sp = sp + 0xFFFFFFFFFFFFFFF8
	x1 = 0x00000000004AA000
	w2 = 0x0000069D
	x1 = x1 + 0x0000000000000068
	x0 = x0 + 0x0000000000000001
	call sh_xmalloc (retsize: 0;)
	x1 = x29 + 0x0000000000000020
	strcpy(x0, x1)
	sp = sp + 0xFFFFFFFFFFFFFFF8
	Mem0[x20 + 48:word64] = x0
	goto l000000000041F318
	// succ:  l000000000041F318
l000000000041F43C:
	x0 = 0x00000000004AA000
	x0 = x0 + 0x0000000000000250
	Mem0[x20 + 48:word64] = x0
	goto l000000000041F318
	// succ:  l000000000041F318
fn000000000041F2E0_exit:


// parse_command
// Return size: 0
void parse_command()
parse_command_entry:
	// succ:  l000000000041F48C
l000000000041F48C:
	sp = fp
	sp = sp + -48
	Mem0[sp:word64] = x29
	sp = sp + 8
	Mem0[sp:word64] = x30
	x29 = x31 + 0x0000000000000000
	v8 = sp + 16
	Mem0[v8:word64] = x19
	v8 = v8 + 8
	Mem0[v8:word64] = x20
	x19 = 0x00000000004E3000
	Mem0[x19 + 660:word32] = 0x00000000
	call run_pending_traps (retsize: 0;)
	x0 = 0x00000000004DE000
	w0 = Mem0[x0 + 1704:word32]
	branch w0 == 0x00000000 l000000000041F4EC
	// succ:  l000000000041F4B0 l000000000041F4EC
l000000000041F4B0:
	x0 = 0x00000000004E3000
	w0 = Mem0[x0 + 664:word32]
	w31 = w0 - 0x00000003
	NZCV = cond(w31)
	branch Test(EQ,Z) l000000000041F4EC
	// succ:  l000000000041F4C0 l000000000041F4EC
l000000000041F4C0:
	x20 = 0x00000000004AA000
	x20 = x20 + 0x0000000000000510
	x0 = x20
	call get_string_value (retsize: 0;)
	branch x0 == 0x0000000000000000 l000000000041F4DC
	// succ:  l000000000041F4D4 l000000000041F4DC
l000000000041F4D4:
	x1 = x20
	call execute_variable_command (retsize: 0;)
	// succ:  l000000000041F4DC
l000000000041F4DC:
	x0 = 0x00000000004E3000
	w0 = Mem0[x0 + 596:word32]
	w31 = w0 - 0x00000002
	NZCV = cond(w31)
	branch Test(EQ,Z) l000000000041F518
	// succ:  l000000000041F4EC l000000000041F518
l000000000041F4EC:
	x0 = 0x00000000004E3000
	Mem0[x0 + 612:word32] = 0x00000000
	call yyparse (retsize: 0;)
	w1 = Mem0[x19 + 660:word32]
	branch w1 == 0x00000000 l000000000041F50C
	// succ:  l000000000041F500 l000000000041F50C
l000000000041F500:
	Mem0[x29 + 32:word64] = x0
	call gather_here_documents (retsize: 0;)
	x0 = Mem0[x29 + 32:word64]
	// succ:  l000000000041F50C
l000000000041F50C:
	v16 = sp + 16
	x19 = Mem0[v16:word64]
	v16 = v16 + 8
	x20 = Mem0[v16:word64]
	x29 = Mem0[sp:word64]
	sp = sp + 8
	x30 = Mem0[sp:word64]
	sp = sp + 48
	return
	// succ:  parse_command_exit
l000000000041F518:
	x0 = 0x00000000004AA000
	x0 = x0 + 0x0000000000000520
	call get_string_value (retsize: 0;)
	x3 = x0
	branch x0 == 0x0000000000000000 l000000000041F548
	// succ:  l000000000041F52C l000000000041F548
l000000000041F52C:
	x0 = 0x00000000004DE000
	x2 = 0x00000000004AA000
	x0 = Mem0[x0 + 1640:word64]
	w1 = 0x00000001
	x2 = x2 + 0x0000000000000528
	__fprintf_chk(x0, x1, x2, Mem0[sp:<unknown>])
	sp = sp + 0xFFFFFFFFFFFFFFF8
	goto l000000000041F4EC
	// succ:  l000000000041F4EC
l000000000041F548:
	x0 = 0x00000000004AA000
	x0 = x0 + 0x0000000000000330
	call get_working_directory (retsize: 0;)
	x3 = x0
	goto l000000000041F52C
	// succ:  l000000000041F52C
parse_command_exit:


// read_command
// Return size: 0
void read_command()
read_command_entry:
	// succ:  l000000000041F55C
l000000000041F55C:
	sp = fp
	sp = sp + -64
	Mem0[sp:word64] = x29
	sp = sp + 8
	Mem0[sp:word64] = x30
	x29 = x31 + 0x0000000000000000
	w0 = 0x00000001
	v9 = sp + 16
	Mem0[v9:word64] = x19
	v9 = v9 + 8
	Mem0[v9:word64] = x20
	v12 = sp + 32
	Mem0[v12:word64] = x21
	v12 = v12 + 8
	Mem0[v12:word64] = x22
	Mem0[sp + 48:word64] = x23
	x19 = 0x00000000004DE000
	call set_current_prompt_level (retsize: 0;)
	x1 = 0x00000000004DE000
	w0 = Mem0[x19 + 1704:word32]
	Mem0[x1 + 1872:word64] = 0x0000000000000000
	branch w0 != 0x00000000 l000000000041F62C
	// succ:  l000000000041F58C l000000000041F62C
l000000000041F58C:
	x20 = 0x0000000000000000
	w23 = w20
	x21 = x20
	// succ:  l000000000041F598
l000000000041F598:
	x1 = 0x00000000004E1000
	w0 = Mem0[x1 + 644:word32]
	branch w0 != 0x00000000 l000000000041F620
	// succ:  l000000000041F5A4 l000000000041F620
l000000000041F5A4:
	x0 = 0x00000000004E1000
	w0 = Mem0[x0 + 632:word32]
	branch w0 != 0x00000000 l000000000041F618
	// succ:  l000000000041F5B0 l000000000041F618
l000000000041F5B0:
	x0 = 0x00000000004E3000
	Mem0[x0 + 612:word32] = 0x00000000
	call parse_command (retsize: 0;)
	w22 = w0
	w0 = Mem0[x19 + 1704:word32]
	branch w0 == 0x00000000 l000000000041F5CC
	// succ:  l000000000041F5C8 l000000000041F5CC
l000000000041F5C8:
	branch x21 != 0x0000000000000000 l000000000041F5E4
	// succ:  l000000000041F5CC l000000000041F5E4
l000000000041F5CC:
	w0 = w22
	v19 = sp + 16
	x19 = Mem0[v19:word64]
	v19 = v19 + 8
	x20 = Mem0[v19:word64]
	v20 = sp + 32
	x21 = Mem0[v20:word64]
	v20 = v20 + 8
	x22 = Mem0[v20:word64]
	x23 = Mem0[sp + 48:word64]
	x29 = Mem0[sp:word64]
	sp = sp + 8
	x30 = Mem0[sp:word64]
	sp = sp + 64
	return
	// succ:  read_command_exit
l000000000041F5E4:
	NZCV = cond(w23 - w31)
	branch Test(LE,ZCV) l000000000041F5CC
	// succ:  l000000000041F5EC l000000000041F5CC
l000000000041F5EC:
	w0 = 0x00000000
	call alarm (retsize: 0;)
	x1 = x20
	w0 = 0x0000000E
	call set_signal_handler (retsize: 0;)
	w0 = w22
	v25 = sp + 16
	x19 = Mem0[v25:word64]
	v25 = v25 + 8
	x20 = Mem0[v25:word64]
	v26 = sp + 32
	x21 = Mem0[v26:word64]
	v26 = v26 + 8
	x22 = Mem0[v26:word64]
	x23 = Mem0[sp + 48:word64]
	x29 = Mem0[sp:word64]
	sp = sp + 8
	x30 = Mem0[sp:word64]
	sp = sp + 64
	return
	// succ:  read_command_exit
l000000000041F618:
	call throw_to_top_level (retsize: 0;)
	goto l000000000041F5B0
	// succ:  l000000000041F5B0
l000000000041F620:
	w0 = Mem0[x1 + 644:word32]
	call termsig_handler (retsize: 0;)
	goto l000000000041F5A4
	// succ:  l000000000041F5A4
l000000000041F62C:
	x0 = 0x00000000004AA000
	x0 = x0 + 0x0000000000000530
	call find_variable (retsize: 0;)
	x21 = x0
	branch x0 == 0x0000000000000000 l000000000041F58C
	// succ:  l000000000041F640 l000000000041F58C
l000000000041F640:
	x0 = Mem0[x0 + 8:word64]
	branch x0 == 0x0000000000000000 l000000000041F688
	// succ:  l000000000041F648 l000000000041F688
l000000000041F648:
	x1 = 0x0000000000000000
	w2 = 0x0000000A
	strtol(x0)
	sp = sp + 0xFFFFFFFFFFFFFFF8
	NZCV = cond(w0 - w31)
	x22 = x0
	w23 = w0
	x20 = 0x0000000000000000
	branch Test(LE,ZCV) l000000000041F598
	// succ:  l000000000041F668 l000000000041F598
l000000000041F668:
	x1 = 0x000000000041F000
	x1 = x1 + 0x000000000000044C
	w0 = 0x0000000E
	call set_signal_handler (retsize: 0;)
	x20 = x0
	w0 = w22
	call alarm (retsize: 0;)
	goto l000000000041F598
	// succ:  l000000000041F598
l000000000041F688:
	x20 = x0
	w23 = w0
	goto l000000000041F598
	// succ:  l000000000041F598
read_command_exit:


// reader_loop
// Return size: 0
void reader_loop()
reader_loop_entry:
	// succ:  l000000000041F694
l000000000041F694:
	sp = fp
	sp = sp + -80
	Mem0[sp:word64] = x29
	sp = sp + 8
	Mem0[sp:word64] = x30
	x29 = x31 + 0x0000000000000000
	x0 = 0x00000000004DE000
	w1 = Mem0[x0 + 1856:word32]
	Mem0[sp + 16:word64] = x19
	w1 = w1 + 0x00000001
	Mem0[x0 + 1856:word32] = w1
	Mem0[x29 + 64:word32] = w1
	x1 = 0x00000000004E3000
	x1 = x1 + 0xFFFFFFFFFFFFFC28
	Mem0[x29 + 56:word64] = x1
	x1 = 0x00000000004DE000
	x1 = x1 + 0x00000000000006B0
	x0 = 0x00000000004DE000
	Mem0[x29 + 48:word64] = x1
	x1 = 0x0000000000457000
	x1 = x1 + 0xFFFFFFFFFFFFFA6C
	w0 = Mem0[x0 + 1976:word32]
	Mem0[x29 + 32:word64] = 0x0000000000000000
	Mem0[x29 + 72:word64] = x1
	// succ:  l000000000041F6E4
l000000000041F6E4:
	branch w0 != 0x00000000 l000000000041F7F8
	// succ:  l000000000041F6E8 l000000000041F7F8
l000000000041F6E8:
	x0 = Mem0[x29 + 56:word64]
	w1 = 0x00000001
	call __sigsetjmp (retsize: 0;)
	w19 = w0
	call unlink_fifo_list (retsize: 0;)
	x1 = Mem0[x29 + 48:word64]
	w0 = Mem0[x1:word32]
	branch w0 != 0x00000000 l000000000041F81C
	// succ:  l000000000041F708 l000000000041F81C
l000000000041F708:
	branch w19 == 0x00000000 l000000000041F73C
	// succ:  l000000000041F70C l000000000041F73C
l000000000041F70C:
	w2 = Mem0[x29 + 64:word32]
	w0 = w19 - 0x00000001
	x1 = 0x00000000004DE000
	Mem0[x1 + 1856:word32] = w2
	w31 = w0 - 0x00000003
	NZCV = cond(w31)
	branch Test(ULE,ZC) l000000000041F86C
	// succ:  l000000000041F724 l000000000041F86C
l000000000041F724:
	x0 = 0x00000000004AA000
	x0 = x0 + 0x0000000000000538
	w1 = 0x00000003
	w2 = w19
	w3 = 0x00000000
	call command_error (retsize: 0;)
	// succ:  l000000000041F73C
l000000000041F73C:
	x0 = 0x00000000004DF000
	x1 = 0x00000000004DE000
	x0 = Mem0[x0 + 3208:word64]
	Mem0[x1 + 1796:word32] = 0x00000000
	branch x0 == 0x0000000000000000 l000000000041F754
	// succ:  l000000000041F750 l000000000041F754
l000000000041F750:
	call dispose_used_env_vars (retsize: 0;)
	// succ:  l000000000041F754
l000000000041F754:
	call read_command (retsize: 0;)
	branch w0 != 0x00000000 l000000000041F838
	// succ:  l000000000041F75C l000000000041F838
l000000000041F75C:
	x3 = Mem0[x29 + 48:word64]
	w1 = Mem0[x3:word32]
	branch w1 != 0x00000000 l000000000041F774
	// succ:  l000000000041F768 l000000000041F774
l000000000041F768:
	x0 = 0x00000000004DF000
	w0 = Mem0[x0 + 3700:word32]
	branch w0 != 0x00000000 l000000000041F910
	// succ:  l000000000041F774 l000000000041F910
l000000000041F774:
	x1 = 0x00000000004DE000
	x0 = Mem0[x1 + 1872:word64]
	Mem0[x29 + 32:word64] = x0
	branch x0 == 0x0000000000000000 l000000000041F7E0
	// succ:  l000000000041F784 l000000000041F7E0
l000000000041F784:
	x2 = 0x00000000004D6000
	w3 = Mem0[x2 + 1676:word32]
	Mem0[x1 + 1872:word64] = 0x0000000000000000
	w3 = w3 + 0x00000001
	Mem0[x2 + 1676:word32] = w3
	x1 = 0x00000000004DE000
	w2 = 0x00000001
	x0 = Mem0[x29 + 32:word64]
	Mem0[x1 + 1796:word32] = w2
	x1 = 0x00000000004E3000
	Mem0[x1 + 1204:word32] = 0x00000000
	call execute_command (retsize: 0;)
	x0 = 0x00000000004E1000
	w1 = Mem0[x0 + 644:word32]
	branch w1 != 0x00000000 l000000000041F8B4
	// succ:  l000000000041F7C0 l000000000041F8B4
l000000000041F7C0:
	x0 = 0x00000000004E1000
	w0 = Mem0[x0 + 632:word32]
	branch w0 != 0x00000000 l000000000041F8C8
	// succ:  l000000000041F7CC l000000000041F8C8
l000000000041F7CC:
	x0 = Mem0[x29 + 32:word64]
	branch x0 == 0x0000000000000000 l000000000041F7E0
	// succ:  l000000000041F7D4 l000000000041F7E0
l000000000041F7D4:
	x0 = Mem0[x29 + 32:word64]
	call dispose_command (retsize: 0;)
	Mem0[x29 + 32:word64] = 0x0000000000000000
	// succ:  l000000000041F7E0
l000000000041F7E0:
	x0 = 0x00000000004DF000
	w0 = Mem0[x0 + 3716:word32]
	branch w0 != 0x00000000 l000000000041F85C
	// succ:  l000000000041F7EC l000000000041F85C
l000000000041F7EC:
	x0 = 0x00000000004DE000
	w0 = Mem0[x0 + 1976:word32]
	branch w0 == 0x00000000 l000000000041F6E8
	// succ:  l000000000041F7F8 l000000000041F6E8
l000000000041F7F8:
	x0 = 0x00000000004DE000
	w1 = Mem0[x0 + 1856:word32]
	x19 = Mem0[sp + 16:word64]
	w1 = w1 - 0x00000001
	Mem0[x0 + 1856:word32] = w1
	x0 = 0x00000000004E3000
	w0 = Mem0[x0 + 1200:word32]
	x29 = Mem0[sp:word64]
	sp = sp + 8
	x30 = Mem0[sp:word64]
	sp = sp + 80
	return
	// succ:  reader_loop_exit
l000000000041F81C:
	w0 = 0x00000002
	call signal_is_ignored (retsize: 0;)
	branch w0 != 0x00000000 l000000000041F708
	// succ:  l000000000041F828 l000000000041F708
l000000000041F828:
	x1 = Mem0[x29 + 72:word64]
	w0 = 0x00000002
	call set_signal_handler (retsize: 0;)
	goto l000000000041F708
	// succ:  l000000000041F708
l000000000041F838:
	x0 = 0x00000000004DE000
	w0 = Mem0[x0 + 1704:word32]
	branch w0 != 0x00000000 l000000000041F7E0
	// succ:  l000000000041F844 l000000000041F7E0
l000000000041F844:
	x0 = 0x00000000004DE000
	w1 = 0xFFFFFFFF
	Mem0[x0 + 1976:word32] = w1
	x0 = 0x00000000004DF000
	w0 = Mem0[x0 + 3716:word32]
	branch w0 == 0x00000000 l000000000041F7EC
	// succ:  l000000000041F85C l000000000041F7EC
l000000000041F85C:
	w0 = 0xFFFFFFFF
	x1 = 0x00000000004DE000
	Mem0[x1 + 1976:word32] = w0
	goto l000000000041F6E4
	// succ:  l000000000041F6E4
l000000000041F86C:
	x1 = 0x00000000004AA000
	x1 = x1 + 0x00000000000004D8
	v17 = Mem0[x1 + (uint64) ((uint32) w0):byte]
	w3 = (word32) v17
	x2 = 0x000000000041F884
	x3 = x2 + (int64) ((int8) w3)
l000000000041F8B4:
	w0 = Mem0[x0 + 644:word32]
	call termsig_handler (retsize: 0;)
	x0 = 0x00000000004E1000
	w0 = Mem0[x0 + 632:word32]
	branch w0 == 0x00000000 l000000000041F7CC
	// succ:  l000000000041F8C8 l000000000041F7CC
l000000000041F8C8:
	call throw_to_top_level (retsize: 0;)
	goto l000000000041F7CC
	// succ:  l000000000041F7CC
l000000000041F910:
	x19 = 0x00000000004DE000
	x0 = Mem0[x19 + 1872:word64]
	x2 = 0x00000000004E3000
	Mem0[x2 + 1200:word32] = w1
	call dispose_command (retsize: 0;)
	Mem0[x19 + 1872:word64] = 0x0000000000000000
	goto l000000000041F7E0
	// succ:  l000000000041F7E0
reader_loop_exit:


// fn000000000041F99C
// Return size: 0
void fn000000000041F99C()
fn000000000041F99C_entry:
	// succ:  l000000000041F99C
l000000000041F99C:
	sp = fp
	sp = sp + -48
	Mem0[sp:word64] = x29
	sp = sp + 8
	Mem0[sp:word64] = x30
	x29 = x31 + 0x0000000000000000
	v8 = sp + 32
	Mem0[v8:word64] = x21
	v8 = v8 + 8
	Mem0[v8:word64] = x22
	x22 = 0x00000000004DE000
	x0 = x22 + 0x0000000000000758
	v12 = sp + 16
	Mem0[v12:word64] = x19
	v12 = v12 + 8
	Mem0[v12:word64] = x20
	x19 = Mem0[x0 + 40:word64]
	x21 = 0x00000000004AB000
	x21 = x21 + 0xFFFFFFFFFFFFF8E0
	branch x19 != 0x0000000000000000 l000000000041F9CC
	// succ:  l000000000041F9C4 l000000000041F9CC
l000000000041F9C4:
	goto l000000000041FA10
	// succ:  l000000000041FA10
l000000000041F9C8:
	x19 = x20
	// succ:  l000000000041F9CC
l000000000041F9CC:
	x3 = Mem0[x19 + 16:word64]
	x1 = x21
	x0 = x3
	w2 = 0x00000763
	x20 = Mem0[x19:word64]
	branch x3 == 0x0000000000000000 l000000000041F9E8
	// succ:  l000000000041F9E4 l000000000041F9E8
l000000000041F9E4:
	call sh_xfree (retsize: 0;)
	// succ:  l000000000041F9E8
l000000000041F9E8:
	x3 = Mem0[x19 + 24:word64]
	x0 = x19
	x1 = x21
	w2 = 0x00000768
	branch x3 == 0x0000000000000000 l000000000041FA08
	// succ:  l000000000041F9FC l000000000041FA08
l000000000041F9FC:
	v19 = Mem0[x3 + 16:byte]
	w4 = (word32) v19
	w4 = w4 & 0xFFFFFFFD
	Mem0[x3 + 16:byte] = (byte) w4
	// succ:  l000000000041FA08
l000000000041FA08:
	call sh_xfree (retsize: 0;)
	branch x20 != 0x0000000000000000 l000000000041F9C8
	// succ:  l000000000041FA10 l000000000041F9C8
l000000000041FA10:
	x22 = x22 + 0x0000000000000758
	Mem0[x22 + 40:word64] = 0x0000000000000000
	v16 = sp + 16
	x19 = Mem0[v16:word64]
	v16 = v16 + 8
	x20 = Mem0[v16:word64]
	v17 = sp + 32
	x21 = Mem0[v17:word64]
	v17 = v17 + 8
	x22 = Mem0[v17:word64]
	x29 = Mem0[sp:word64]
	sp = sp + 8
	x30 = Mem0[sp:word64]
	sp = sp + 48
	return
	// succ:  fn000000000041F99C_exit
fn000000000041F99C_exit:


// fn000000000041FA28
// Return size: 0
void fn000000000041FA28()
fn000000000041FA28_entry:
	// succ:  l000000000041FA28
l000000000041FA28:
	sp = fp
	sp = sp + -48
	Mem0[sp:word64] = x29
	sp = sp + 8
	Mem0[sp:word64] = x30
	x29 = x31 + 0x0000000000000000
	Mem0[sp + 32:word64] = x21
	x21 = 0x00000000004DE000
	v9 = sp + 16
	Mem0[v9:word64] = x19
	v9 = v9 + 8
	Mem0[v9:word64] = x20
	x19 = x21 + 0x0000000000000758
	x0 = Mem0[x19 + 24:word64]
	x20 = 0x00000000004AB000
	strlen(x0)
	sp = sp + 0xFFFFFFFFFFFFFFF8
	w2 = 0x000015A4
	x1 = x20 + 0xFFFFFFFFFFFFF8E0
	x0 = x0 + 0x0000000000000001
	call sh_xmalloc (retsize: 0;)
	x1 = Mem0[x19 + 24:word64]
	strcpy(x0, x1)
	sp = sp + 0xFFFFFFFFFFFFFFF8
	x19 = x0
	strlen(x0)
	sp = sp + 0xFFFFFFFFFFFFFFF8
	w3 = w0
	branch w0 == 0x00000000 l000000000041FAA8
	// succ:  l000000000041FA74 l000000000041FAA8
l000000000041FA74:
l000000000041FAA8:
	x21 = x21 + 0x0000000000000758
	w0 = Mem0[x21 + 48:word32]
	x1 = 0x00000000004AC000
	x2 = x19
	x1 = x1 + 0xFFFFFFFFFFFFFC10
	call parser_error (retsize: 0;)
	x0 = x19
	x1 = x20 + 0xFFFFFFFFFFFFF8E0
	x21 = Mem0[sp + 32:word64]
	v16 = sp + 16
	x19 = Mem0[v16:word64]
	v16 = v16 + 8
	x20 = Mem0[v16:word64]
	x29 = Mem0[sp:word64]
	sp = sp + 8
	x30 = Mem0[sp:word64]
	sp = sp + 48
	w2 = 0x000015AA
	// succ:  l000000000041FAD8_thunk_sh_xfree
l000000000041FAD8_thunk_sh_xfree:
	call sh_xfree (retsize: 0;)
	return
	// succ:  fn000000000041FA28_exit
fn000000000041FA28_exit:


// fn000000000041FADC
// Return size: 0
void fn000000000041FADC()
fn000000000041FADC_entry:
	// succ:  l000000000041FADC
l000000000041FADC:
	sp = fp
	sp = sp + -32
	Mem0[sp:word64] = x29
	sp = sp + 8
	Mem0[sp:word64] = x30
	x29 = x31 + 0x0000000000000000
	x0 = 0x00000000004DE000
	Mem0[sp + 16:word64] = x19
	x0 = x0 + 0x0000000000000758
	x19 = 0x00000000004DE000
	x1 = Mem0[x19 + 1640:word64]
	x0 = Mem0[x0 + 56:word64]
	fputs(x0, x1)
	sp = sp + 0xFFFFFFFFFFFFFFF8
	x0 = Mem0[x19 + 1640:word64]
	x19 = Mem0[sp + 16:word64]
	x29 = Mem0[sp:word64]
	sp = sp + 8
	x30 = Mem0[sp:word64]
	sp = sp + 32
	fflush(x0)
	return
	// succ:  fn000000000041FADC_exit
fn000000000041FADC_exit:


// fn000000000041FDA8
// Return size: 0
void fn000000000041FDA8()
fn000000000041FDA8_entry:
	// succ:  l000000000041FDA8
l000000000041FDA8:
	sp = fp
	w31 = w0 - 0x00000108
	NZCV = cond(w31)
	branch Test(EQ,Z) l000000000041FE0C
	// succ:  l000000000041FDB0 l000000000041FE0C
l000000000041FDB0:
	branch Test(GT,NZV) l000000000041FE14
	// succ:  l000000000041FDB4 l000000000041FE14
l000000000041FDB4:
	w31 = w0 - 0x00000029
	NZCV = cond(w31)
	branch Test(GT,NZV) l000000000041FDF4
	// succ:  l000000000041FDBC l000000000041FDF4
l000000000041FDBC:
	w31 = w0 - 0x00000028
	NZCV = cond(w31)
	branch Test(GE,NZV) l000000000041FE0C
	// succ:  l000000000041FDC4 l000000000041FE0C
l000000000041FDC4:
	w31 = w0 - 0x0000000A
	NZCV = cond(w31)
	branch Test(EQ,Z) l000000000041FE0C
	// succ:  l000000000041FDCC l000000000041FE0C
l000000000041FDCC:
	w31 = w0 - 0x00000026
	NZCV = cond(w31)
	branch Test(EQ,Z) l000000000041FE0C
	// succ:  l000000000041FDD4 l000000000041FE0C
l000000000041FDD4:
	branch w0 == 0x00000000 l000000000041FE0C
	// succ:  l000000000041FDD8 l000000000041FE0C
l000000000041FDD8:
	x1 = 0x00000000004DE000
	x1 = x1 + 0x0000000000000758
	w2 = Mem0[x1 + 32:word32]
	w0 = 0x00000000
	w31 = w2 - 0x00000119
	NZCV = cond(w31)
	branch Test(EQ,Z) l000000000041FE60
	// succ:  l000000000041FDF0 l000000000041FE60
l000000000041FDF0:
	return
	// succ:  fn000000000041FDA8_exit
l000000000041FDF4:
	w31 = w0 - 0x0000007D
	NZCV = cond(w31)
	branch Test(GT,NZV) l000000000041FE80
	// succ:  l000000000041FDFC l000000000041FE80
l000000000041FDFC:
	w31 = w0 - 0x0000007B
	NZCV = cond(w31)
	branch Test(GE,NZV) l000000000041FE0C
	// succ:  l000000000041FE04 l000000000041FE0C
l000000000041FE04:
	w31 = w0 - 0x0000003B
	NZCV = cond(w31)
	branch Test(NE,Z) l000000000041FDD8
	// succ:  l000000000041FE0C l000000000041FDD8
l000000000041FE0C:
	w0 = 0x00000001
	return
	// succ:  fn000000000041FDA8_exit
l000000000041FE14:
	w31 = w0 - 0x00000118
	NZCV = cond(w31)
	branch Test(GT,NZV) l000000000041FE40
	// succ:  l000000000041FE1C l000000000041FE40
l000000000041FE1C:
	w31 = w0 - 0x00000115
	NZCV = cond(w31)
	branch Test(GE,NZV) l000000000041FE0C
	// succ:  l000000000041FE24 l000000000041FE0C
l000000000041FE24:
	w31 = w0 - 0x0000010B
	NZCV = cond(w31)
	branch Test(LT,NV) l000000000041FDD8
	// succ:  l000000000041FE2C l000000000041FDD8
l000000000041FE2C:
	w31 = w0 - 0x0000010E
	NZCV = cond(w31)
	branch Test(LE,ZCV) l000000000041FE0C
	// succ:  l000000000041FE34 l000000000041FE0C
l000000000041FE34:
	w31 = w0 - 0x00000110
	NZCV = cond(w31)
	branch Test(NE,Z) l000000000041FDD8
	// succ:  l000000000041FE3C l000000000041FDD8
l000000000041FE3C:
	goto l000000000041FE0C
	// succ:  l000000000041FE0C
l000000000041FE40:
	w31 = w0 - 0x00000129
	NZCV = cond(w31)
	branch Test(GT,NZV) l000000000041FE74
	// succ:  l000000000041FE48 l000000000041FE74
l000000000041FE48:
	w31 = w0 - 0x00000127
	NZCV = cond(w31)
	branch Test(GE,NZV) l000000000041FE0C
	// succ:  l000000000041FE50 l000000000041FE0C
l000000000041FE50:
	w0 = w0 - 0x00000120
	w31 = w0 - 0x00000001
	NZCV = cond(w31)
	branch Test(UGT,ZC) l000000000041FDD8
	// succ:  l000000000041FE5C l000000000041FDD8
l000000000041FE5C:
	goto l000000000041FE0C
	// succ:  l000000000041FE0C
l000000000041FE60:
	w0 = Mem0[x1 + 72:word32]
	w0 = w0 - 0x0000010F
	w31 = w0 - 0x00000001
	NZCV = cond(w31)
	w0 = (word32) Test(ULE,ZC)
	return
	// succ:  fn000000000041FDA8_exit
l000000000041FE74:
	w31 = w0 - 0x0000012F
	NZCV = cond(w31)
	branch Test(NE,Z) l000000000041FDD8
	// succ:  l000000000041FE7C l000000000041FDD8
l000000000041FE7C:
	goto l000000000041FE0C
	// succ:  l000000000041FE0C
l000000000041FE80:
	w0 = w0 - 0x00000102
	w31 = w0 - 0x00000004
	NZCV = cond(w31)
	branch Test(UGT,ZC) l000000000041FDD8
	// succ:  l000000000041FE8C l000000000041FDD8
l000000000041FE8C:
	goto l000000000041FE0C
	// succ:  l000000000041FE0C
fn000000000041FDA8_exit:


// fn000000000041FE90
// Return size: 0
void fn000000000041FE90()
fn000000000041FE90_entry:
	// succ:  l000000000041FE90
l000000000041FE90:
	sp = fp
	sp = sp + -80
	Mem0[sp:word64] = x29
	sp = sp + 8
	Mem0[sp:word64] = x30
	x29 = x31 + 0x0000000000000000
	v8 = sp + 16
	Mem0[v8:word64] = x19
	v8 = v8 + 8
	Mem0[v8:word64] = x20
	x20 = 0x00000000004DE000
	v11 = sp + 32
	Mem0[v11:word64] = x21
	v11 = v11 + 8
	Mem0[v11:word64] = x22
	x21 = x20 + 0x0000000000000758
	x0 = Mem0[x21 + 24:word64]
	v15 = sp + 48
	Mem0[v15:word64] = x23
	v15 = v15 + 8
	Mem0[v15:word64] = x24
	branch x0 == 0x0000000000000000 l000000000041FFA8
	// succ:  l000000000041FEB4 l000000000041FFA8
l000000000041FEB4:
	strlen(x0)
	sp = sp + 0xFFFFFFFFFFFFFFF8
	x19 = x0
	x0 = Mem0[x21 + 80:word64]
	w23 = w19
	x21 = 0x00000000004AB000
	branch x0 == 0x0000000000000000 l000000000041FED8
	// succ:  l000000000041FECC l000000000041FED8
l000000000041FECC:
	x1 = x21 + 0xFFFFFFFFFFFFF8E0
	w2 = 0x00001787
	call sh_xfree (retsize: 0;)
	// succ:  l000000000041FED8
l000000000041FED8:
	w0 = w19 + 0x00000001
l000000000041FFA8:
	v20 = sp + 16
	x19 = Mem0[v20:word64]
	v20 = v20 + 8
	x20 = Mem0[v20:word64]
	v21 = sp + 32
	x21 = Mem0[v21:word64]
	v21 = v21 + 8
	x22 = Mem0[v21:word64]
	v22 = sp + 48
	x23 = Mem0[v22:word64]
	v22 = v22 + 8
	x24 = Mem0[v22:word64]
	x29 = Mem0[sp:word64]
	sp = sp + 8
	x30 = Mem0[sp:word64]
	sp = sp + 80
	return
	// succ:  fn000000000041FE90_exit
fn000000000041FE90_exit:


// fn000000000041FFFC
// Return size: 0
void fn000000000041FFFC()
fn000000000041FFFC_entry:
	// succ:  l000000000041FFFC
l000000000041FFFC:
	sp = fp
	sp = sp + -48
	Mem0[sp:word64] = x29
	sp = sp + 8
	Mem0[sp:word64] = x30
	x29 = x31 + 0x0000000000000000
	v8 = sp + 32
	Mem0[v8:word64] = x21
	v8 = v8 + 8
	Mem0[v8:word64] = x22
	w22 = w1
	x1 = 0x00000000004AB000
	v14 = sp + 16
	Mem0[v14:word64] = x19
	v14 = v14 + 8
	Mem0[v14:word64] = x20
	x1 = x1 + 0xFFFFFFFFFFFFF8E0
	x20 = x2
	x21 = x0
	w2 = 0x0000071B
	x0 = 0x0000000000000030
	call sh_xmalloc (retsize: 0;)
	x19 = 0x00000000004DE000
	x4 = x19 + 0x0000000000000758
	x7 = Mem0[x4 + 40:word64]
	x6 = Mem0[x4 + 24:word64]
	w5 = Mem0[x4 + 88:word32]
	w2 = Mem0[x4 + 16:word32]
	w1 = Mem0[x4 + 92:word32]
	Mem0[x0:word64] = x7
	Mem0[x0 + 8:word32] = w22
	Mem0[x0 + 16:word64] = x6
	Mem0[x0 + 32:word32] = w5
	Mem0[x0 + 36:word32] = w2
	Mem0[x0 + 40:word32] = w1
	Mem0[x0 + 24:word64] = x20
	Mem0[x4 + 40:word64] = x0
	branch x20 == 0x0000000000000000 l0000000000420078
	// succ:  l000000000042006C l0000000000420078
l000000000042006C:
	v23 = Mem0[x20 + 16:byte]
	w0 = (word32) v23
	w0 = w0 | 0x00000002
	Mem0[x20 + 16:byte] = (byte) w0
	// succ:  l0000000000420078
l0000000000420078:
	x19 = x19 + 0x0000000000000758
	x0 = x21
	Mem0[x19 + 24:word64] = x21
	strlen(x0)
	sp = sp + 0xFFFFFFFFFFFFFFF8
	Mem0[x19 + 88:word32] = w0
	Mem0[x19 + 16:word32] = 0x00000000
	Mem0[x19 + 92:word32] = 0x00000000
	v24 = sp + 32
	x21 = Mem0[v24:word64]
	v24 = v24 + 8
	x22 = Mem0[v24:word64]
	v25 = sp + 16
	x19 = Mem0[v25:word64]
	v25 = v25 + 8
	x20 = Mem0[v25:word64]
	x29 = Mem0[sp:word64]
	sp = sp + 8
	x30 = Mem0[sp:word64]
	sp = sp + 48
	// succ:  l00000000004200A0_thunk_fn000000000041FE90
l00000000004200A0_thunk_fn000000000041FE90:
	call fn000000000041FE90 (retsize: 0;)
	return
	// succ:  fn000000000041FFFC_exit
fn000000000041FFFC_exit:


// fn00000000004200A4
// Return size: 0
void fn00000000004200A4()
fn00000000004200A4_entry:
	// succ:  l00000000004200A4
l00000000004200A4:
	sp = fp
	sp = sp + -32
	Mem0[sp:word64] = x29
	sp = sp + 8
	Mem0[sp:word64] = x30
	x29 = x31 + 0x0000000000000000
	v8 = sp + 16
	Mem0[v8:word64] = x19
	v8 = v8 + 8
	Mem0[v8:word64] = x20
	x19 = 0x00000000004D6000
	x19 = x19 + 0x00000000000006A0
	w2 = 0x00000000
	x1 = x19
	w20 = w0
	call find_token_in_alist (retsize: 0;)
	x2 = x0
	branch x2 == 0x0000000000000000 l00000000004200DC
	// succ:  l00000000004200D0 l00000000004200DC
l00000000004200D0:
	v15 = sp + 16
	x19 = Mem0[v15:word64]
	v15 = v15 + 8
	x20 = Mem0[v15:word64]
	x29 = Mem0[sp:word64]
	sp = sp + 8
	x30 = Mem0[sp:word64]
	sp = sp + 32
	return
	// succ:  fn00000000004200A4_exit
l00000000004200DC:
	w0 = w20
	x1 = x19 + 0x0000000000000170
	call find_token_in_alist (retsize: 0;)
	branch x0 != 0x0000000000000000 l00000000004200D0
	// succ:  l00000000004200EC l00000000004200D0
l00000000004200EC:
	x0 = 0x00000000004E3000
	w0 = Mem0[x0 + 656:word32]
	w0 = w0 - 0x00000119
	w31 = w0 - 0x00000005
	NZCV = cond(w31)
	branch Test(ULE,ZC) l0000000000420108
	// succ:  l0000000000420100 l0000000000420108
l0000000000420100:
	x0 = 0x0000000000000000
	goto l00000000004200D0
	// succ:  l00000000004200D0
l0000000000420108:
	x1 = 0x00000000004AA000
	x1 = x1 + 0x0000000000000548
	v19 = Mem0[x1 + (uint64) ((uint32) w0):byte]
	w2 = (word32) v19
	x3 = 0x0000000000420120
	x2 = x3 + (int64) ((int8) w2)
fn00000000004200A4_exit:


// fn00000000004201A8
// Return size: 0
void fn00000000004201A8()
fn00000000004201A8_entry:
	// succ:  l00000000004201A8
l00000000004201A8:
	sp = fp
	sp = sp + -64
	Mem0[sp:word64] = x29
	sp = sp + 8
	Mem0[sp:word64] = x30
	x29 = x31 + 0x0000000000000000
	x0 = 0x00000000004E3000
	w0 = Mem0[x0 + 656:word32]
	v10 = sp + 32
	Mem0[v10:word64] = x21
	v10 = v10 + 8
	Mem0[v10:word64] = x22
	v13 = sp + 16
	Mem0[v13:word64] = x19
	v13 = v13 + 8
	Mem0[v13:word64] = x20
	v16 = sp + 48
	Mem0[v16:word64] = x23
	v16 = v16 + 8
	Mem0[v16:word64] = x24
	x22 = 0x00000000004DE000
	branch w0 == 0x00000000 l00000000004201D8
	// succ:  l00000000004201CC l00000000004201D8
l00000000004201CC:
	x1 = x22 + 0x0000000000000758
	w19 = Mem0[x1 + 96:word32]
	branch w19 == 0x00000000 l00000000004203C4
	// succ:  l00000000004201D8 l00000000004203C4
l00000000004201D8:
	x0 = x22 + 0x0000000000000758
	x23 = Mem0[x0 + 24:word64]
	branch x23 == 0x0000000000000000 l00000000004201EC
	// succ:  l00000000004201E4 l00000000004201EC
l00000000004201E4:
	v20 = Mem0[x23:byte]
	w1 = (word32) v20
	branch w1 != 0x00000000 l000000000042028C
	// succ:  l00000000004201EC l000000000042028C
l00000000004201EC:
	x0 = x22 + 0x0000000000000758
	w0 = Mem0[x0 + 96:word32]
	branch w0 != 0x00000000 l0000000000420270
	// succ:  l00000000004201F8 l0000000000420270
l00000000004201F8:
	x1 = 0x00000000004AB000
	w2 = 0x00000005
	x0 = 0x0000000000000000
	x1 = x1 + 0xFFFFFFFFFFFFF968
	dcgettext(x0, x1, x2)
	sp = sp + 0xFFFFFFFFFFFFFFF8
	x2 = x0
	// succ:  l0000000000420210
l0000000000420210:
	x22 = x22 + 0x0000000000000758
	w0 = Mem0[x22 + 48:word32]
	x1 = 0x00000000004BF000
	x1 = x1 + 0x0000000000000050
	call parser_error (retsize: 0;)
	x0 = 0x00000000004DE000
	w0 = Mem0[x0 + 1704:word32]
	branch w0 == 0x00000000 l000000000042023C
	// succ:  l0000000000420230 l000000000042023C
l0000000000420230:
	w0 = Mem0[x22 + 96:word32]
	branch w0 == 0x00000000 l000000000042023C
	// succ:  l0000000000420238 l000000000042023C
l0000000000420238:
	Mem0[x22 + 96:word32] = 0x00000000
	// succ:  l000000000042023C
l000000000042023C:
	x0 = 0x00000000004E1000
	w0 = Mem0[x0 + 1720:word32]
	w1 = 0x00000002
	NZCV = cond(w0 - w31)
	w0 = 0x00000101
l0000000000420270:
	x1 = 0x00000000004AB000
	w2 = 0x00000005
	x0 = 0x0000000000000000
	x1 = x1 + 0xFFFFFFFFFFFFF940
	dcgettext(x0, x1, x2)
	sp = sp + 0xFFFFFFFFFFFFFFF8
	x2 = x0
	goto l0000000000420210
	// succ:  l0000000000420210
l000000000042028C:
	w19 = Mem0[x0 + 16:word32]
	branch w19 == 0x00000000 l0000000000420350
	// succ:  l0000000000420294 l0000000000420350
l0000000000420294:
l0000000000420350:
	x20 = 0x00000000004AB000
	x0 = 0x0000000000000002
	x1 = x20 + 0xFFFFFFFFFFFFF8E0
	w2 = 0x00001595
	call sh_xmalloc (retsize: 0;)
	x19 = x0
	v25 = Mem0[x23:byte]
	w0 = (word32) v25
	Mem0[x19 + 1:byte] = 0x00
	Mem0[x19:byte] = (byte) w0
	x22 = x22 + 0x0000000000000758
	x1 = 0x00000000004AB000
	w21 = Mem0[x22 + 48:word32]
	x1 = x1 + 0xFFFFFFFFFFFFF928
	w2 = 0x00000005
	x0 = 0x0000000000000000
	dcgettext(x0, x1, x2)
	sp = sp + 0xFFFFFFFFFFFFFFF8
	x1 = x0
	x2 = x19
	w0 = w21
	call parser_error (retsize: 0;)
	x0 = x19
	x1 = x20 + 0xFFFFFFFFFFFFF8E0
	w2 = 0x000015DE
	call sh_xfree (retsize: 0;)
	x0 = 0x00000000004DE000
	w0 = Mem0[x0 + 1704:word32]
	branch w0 != 0x00000000 l000000000042023C
	// succ:  l00000000004203BC l000000000042023C
l00000000004203BC:
	call fn000000000041FA28 (retsize: 0;)
	goto l000000000042023C
	// succ:  l000000000042023C
l00000000004203C4:
	call fn00000000004200A4 (retsize: 0;)
	x21 = x0
	branch x0 == 0x0000000000000000 l00000000004201D8
	// succ:  l00000000004203D0 l00000000004201D8
l00000000004203D0:
	call ansic_shouldquote (retsize: 0;)
	x20 = 0x00000000004AB000
	branch w0 != 0x00000000 l0000000000420458
	// succ:  l00000000004203DC l0000000000420458
l00000000004203DC:
	x22 = x22 + 0x0000000000000758
	x1 = 0x00000000004AB000
	w19 = Mem0[x22 + 48:word32]
	x1 = x1 + 0xFFFFFFFFFFFFF8F8
	w2 = 0x00000005
	x0 = 0x0000000000000000
	dcgettext(x0, x1, x2)
	sp = sp + 0xFFFFFFFFFFFFFFF8
	x1 = x0
	x2 = x21
	w0 = w19
	call parser_error (retsize: 0;)
	x0 = x21
	x1 = x20 + 0xFFFFFFFFFFFFF8E0
	w2 = 0x000015CC
	call sh_xfree (retsize: 0;)
	x0 = 0x00000000004DE000
	w0 = Mem0[x0 + 1704:word32]
	branch w0 != 0x00000000 l000000000042023C
	// succ:  l0000000000420424 l000000000042023C
l0000000000420424:
	goto l00000000004203BC
	// succ:  l00000000004203BC
l0000000000420458:
	w1 = w19
	x0 = x21
	x2 = 0x0000000000000000
	call ansic_quote (retsize: 0;)
	x19 = x0
	x1 = x20 + 0xFFFFFFFFFFFFF8E0
	x0 = x21
	w2 = 0x000015C8
	call sh_xfree (retsize: 0;)
	x21 = x19
	goto l00000000004203DC
	// succ:  l00000000004203DC
fn00000000004201A8_exit:


// return_EOF
// Return size: 0
void return_EOF()
return_EOF_entry:
	// succ:  l000000000042048C
l000000000042048C:
	sp = fp
	w0 = 0xFFFFFFFF
	return
	// succ:  return_EOF_exit
return_EOF_exit:


// initialize_bash_input
// Return size: 0
void initialize_bash_input()
initialize_bash_input_entry:
	// succ:  l0000000000420494
l0000000000420494:
	sp = fp
	sp = sp + -32
	Mem0[sp:word64] = x29
	sp = sp + 8
	Mem0[sp:word64] = x30
	x29 = x31 + 0x0000000000000000
	Mem0[sp + 16:word64] = x19
	x19 = 0x00000000004E3000
	x0 = x19 + 0x0000000000000298
	x0 = Mem0[x0 + 8:word64]
	Mem0[x19 + 664:word32] = 0x00000000
	branch x0 == 0x0000000000000000 l00000000004204C4
	// succ:  l00000000004204B4 l00000000004204C4
l00000000004204B4:
	x1 = 0x00000000004AB000
	x1 = x1 + 0xFFFFFFFFFFFFF8E0
	w2 = 0x00000536
	call sh_xfree (retsize: 0;)
	// succ:  l00000000004204C4
l00000000004204C4:
	x0 = x19 + 0x0000000000000298
	Mem0[x0 + 16:word64] = 0x0000000000000000
	Mem0[x0 + 8:word64] = 0x0000000000000000
	Mem0[x0 + 24:word64] = 0x0000000000000000
	Mem0[x0 + 32:word64] = 0x0000000000000000
	x19 = Mem0[sp + 16:word64]
	x29 = Mem0[sp:word64]
	sp = sp + 8
	x30 = Mem0[sp:word64]
	sp = sp + 32
	return
	// succ:  initialize_bash_input_exit
initialize_bash_input_exit:


// init_yy_io
// Return size: 0
void init_yy_io()
init_yy_io_entry:
	// succ:  l00000000004204E4
l00000000004204E4:
	sp = fp
	sp = sp + -64
	Mem0[sp:word64] = x29
	sp = sp + 8
	Mem0[sp:word64] = x30
	x29 = x31 + 0x0000000000000000
	v8 = sp + 16
	Mem0[v8:word64] = x19
	v8 = v8 + 8
	Mem0[v8:word64] = x20
	x19 = 0x00000000004E3000
	x5 = x19 + 0x0000000000000298
	x5 = Mem0[x5 + 8:word64]
	v12 = sp + 32
	Mem0[v12:word64] = x21
	v12 = v12 + 8
	Mem0[v12:word64] = x22
	Mem0[sp + 48:word64] = x23
	Mem0[x19 + 664:word32] = w2
	x22 = x0
	x21 = x1
	x20 = x3
	x23 = x4
	branch x5 == 0x0000000000000000 l0000000000420530
	// succ:  l000000000042051C l0000000000420530
l000000000042051C:
	x1 = 0x00000000004AB000
	x0 = x5
	x1 = x1 + 0xFFFFFFFFFFFFF8E0
	w2 = 0x00000549
	call sh_xfree (retsize: 0;)
	// succ:  l0000000000420530
l0000000000420530:
	x0 = x20
	branch x20 == 0x0000000000000000 l0000000000420558
	// succ:  l0000000000420538 l0000000000420558
l0000000000420538:
	strlen(x0)
	sp = sp + 0xFFFFFFFFFFFFFFF8
	x1 = 0x00000000004AB000
	x1 = x1 + 0xFFFFFFFFFFFFF8E0
	w2 = 0x0000054A
	x0 = x0 + 0x0000000000000001
	call sh_xmalloc (retsize: 0;)
	x1 = x20
	strcpy(x0, x1)
	sp = sp + 0xFFFFFFFFFFFFFFF8
	// succ:  l0000000000420558
l0000000000420558:
	x2 = x19 + 0x0000000000000298
	Mem0[x2 + 16:word64] = x23
	Mem0[x2 + 24:word64] = x22
	Mem0[x2 + 32:word64] = x21
	Mem0[x2 + 8:word64] = x0
	v20 = sp + 16
	x19 = Mem0[v20:word64]
	v20 = v20 + 8
	x20 = Mem0[v20:word64]
	v21 = sp + 32
	x21 = Mem0[v21:word64]
	v21 = v21 + 8
	x22 = Mem0[v21:word64]
	x23 = Mem0[sp + 48:word64]
	x29 = Mem0[sp:word64]
	sp = sp + 8
	x30 = Mem0[sp:word64]
	sp = sp + 64
	return
	// succ:  init_yy_io_exit
init_yy_io_exit:


// yy_input_name
// Return size: 0
void yy_input_name()
yy_input_name_entry:
	// succ:  l0000000000420580
l0000000000420580:
	sp = fp
	x0 = 0x00000000004E3000
	x0 = Mem0[x0 + 672:word64]
	branch x0 == 0x0000000000000000 l0000000000420590
	// succ:  l000000000042058C l0000000000420590
l000000000042058C:
	return
	// succ:  yy_input_name_exit
l0000000000420590:
	x0 = 0x00000000004AB000
	x0 = x0 + 0xFFFFFFFFFFFFF978
	return
	// succ:  yy_input_name_exit
yy_input_name_exit:


// with_input_from_stdin
// Return size: 0
void with_input_from_stdin()
with_input_from_stdin_entry:
	// succ:  l000000000042059C
l000000000042059C:
	sp = fp
	sp = sp + -16
	Mem0[sp:word64] = x29
	sp = sp + 8
	Mem0[sp:word64] = x30
	x29 = x31 + 0x0000000000000000
	x0 = 0x00000000004E3000
	w0 = Mem0[x0 + 664:word32]
	w31 = w0 - 0x00000001
	NZCV = cond(w31)
	branch Test(EQ,Z) l00000000004205DC
	// succ:  l00000000004205B4 l00000000004205DC
l00000000004205B4:
	x2 = 0x00000000004DE000
	x0 = x2 + 0x0000000000000758
	x0 = Mem0[x0 + 104:word64]
	branch x0 != 0x0000000000000000 l00000000004205D0
	// succ:  l00000000004205C4 l00000000004205D0
l00000000004205C4:
	goto l00000000004205E4
	// succ:  l00000000004205E4
l00000000004205C8:
	x0 = Mem0[x0:word64]
	branch x0 == 0x0000000000000000 l00000000004205E4
	// succ:  l00000000004205D0 l00000000004205E4
l00000000004205D0:
	w1 = Mem0[x0 + 8:word32]
	w31 = w1 - 0x00000001
	NZCV = cond(w31)
	branch Test(NE,Z) l00000000004205C8
	// succ:  l00000000004205DC l00000000004205C8
l00000000004205DC:
	x29 = Mem0[sp:word64]
	sp = sp + 8
	x30 = Mem0[sp:word64]
	sp = sp + 16
	return
	// succ:  with_input_from_stdin_exit
l00000000004205E4:
	x2 = x2 + 0x0000000000000758
	x4 = Mem0[x2 + 8:word64]
	x0 = 0x000000000041F000
	x1 = 0x000000000041F000
	x3 = 0x00000000004AB000
	x0 = x0 + 0xFFFFFFFFFFFFFB10
	x1 = x1 + 0xFFFFFFFFFFFFF92C
	w2 = 0x00000001
	x3 = x3 + 0xFFFFFFFFFFFFF980
	call init_yy_io (retsize: 0;)
	x29 = Mem0[sp:word64]
	sp = sp + 8
	x30 = Mem0[sp:word64]
	sp = sp + 16
	return
	// succ:  with_input_from_stdin_exit
with_input_from_stdin_exit:


// with_input_from_string
// Return size: 0
void with_input_from_string()
with_input_from_string_entry:
	// succ:  l0000000000420614
l0000000000420614:
	sp = fp
	sp = sp + -16
	Mem0[sp:word64] = x29
	sp = sp + 8
	Mem0[sp:word64] = x30
	x29 = x31 + 0x0000000000000000
	x4 = x0
	x3 = x1
	x0 = 0x000000000041F000
	x1 = 0x000000000041F000
	x0 = x0 + 0xFFFFFFFFFFFFF954
	x1 = x1 + 0xFFFFFFFFFFFFF980
	w2 = 0x00000003
	call init_yy_io (retsize: 0;)
	x29 = Mem0[sp:word64]
	sp = sp + 8
	x30 = Mem0[sp:word64]
	sp = sp + 16
	return
	// succ:  with_input_from_string_exit
with_input_from_string_exit:


// with_input_from_stream
// Return size: 0
void with_input_from_stream()
with_input_from_stream_entry:
	// succ:  l0000000000420644
l0000000000420644:
	sp = fp
	sp = sp + -16
	Mem0[sp:word64] = x29
	sp = sp + 8
	Mem0[sp:word64] = x30
	x29 = x31 + 0x0000000000000000
	x4 = x0
	x3 = x1
	x0 = 0x000000000041F000
	x1 = 0x000000000041F000
	x0 = x0 + 0xFFFFFFFFFFFFFD20
	x1 = x1 + 0xFFFFFFFFFFFFFD14
	w2 = 0x00000002
	call init_yy_io (retsize: 0;)
	x29 = Mem0[sp:word64]
	sp = sp + 8
	x30 = Mem0[sp:word64]
	sp = sp + 16
	return
	// succ:  with_input_from_stream_exit
with_input_from_stream_exit:


// push_stream
// Return size: 0
void push_stream()
push_stream_entry:
	// succ:  l0000000000420674
l0000000000420674:
	sp = fp
	sp = sp + -48
	Mem0[sp:word64] = x29
	sp = sp + 8
	Mem0[sp:word64] = x30
	x29 = x31 + 0x0000000000000000
	x1 = 0x00000000004AB000
	v9 = sp + 32
	Mem0[v9:word64] = x21
	v9 = v9 + 8
	Mem0[v9:word64] = x22
	x1 = x1 + 0xFFFFFFFFFFFFF8E0
	w2 = 0x00000680
	w22 = w0
	x0 = 0x0000000000000040
	v16 = sp + 16
	Mem0[v16:word64] = x19
	v16 = v16 + 8
	Mem0[v16:word64] = x20
	call sh_xmalloc (retsize: 0;)
	x20 = 0x00000000004E3000
	x19 = x0
	x21 = x20 + 0x0000000000000298
	x0 = x21
	x1 = x19 + 0x0000000000000008
	w2 = 0x00000028
	call xbcopy (retsize: 0;)
	w0 = Mem0[x20 + 664:word32]
	Mem0[x19 + 56:word64] = 0x0000000000000000
	w31 = w0 - 0x00000004
	NZCV = cond(w31)
	branch Test(EQ,Z) l0000000000420708
	// succ:  l00000000004206C8 l0000000000420708
l00000000004206C8:
	x1 = 0x00000000004DE000
	x1 = x1 + 0x0000000000000758
	x2 = Mem0[x1 + 104:word64]
	x20 = x20 + 0x0000000000000298
	w0 = Mem0[x1 + 48:word32]
	Mem0[x20 + 8:word64] = 0x0000000000000000
	Mem0[x19:word64] = x2
	Mem0[x19 + 48:word32] = w0
	Mem0[x1 + 104:word64] = x19
	Mem0[x1 + 96:word32] = 0x00000000
	branch w22 == 0x00000000 l00000000004206F8
	// succ:  l00000000004206F4 l00000000004206F8
l00000000004206F4:
	Mem0[x1 + 48:word32] = 0x00000000
	// succ:  l00000000004206F8
l00000000004206F8:
	v21 = sp + 16
	x19 = Mem0[v21:word64]
	v21 = v21 + 8
	x20 = Mem0[v21:word64]
	v22 = sp + 32
	x21 = Mem0[v22:word64]
	v22 = v22 + 8
	x22 = Mem0[v22:word64]
	x29 = Mem0[sp:word64]
	sp = sp + 8
	x30 = Mem0[sp:word64]
	sp = sp + 48
	return
	// succ:  push_stream_exit
l0000000000420708:
	w0 = Mem0[x21 + 16:word32]
	branch (w0 & 0x00000000) == 0x00000000 l00000000004206C8
	// succ:  l0000000000420710 l00000000004206C8
l0000000000420710:
	x1 = 0x0000000000000000
	call set_buffered_stream (retsize: 0;)
	Mem0[x19 + 56:word64] = x0
	goto l00000000004206C8
	// succ:  l00000000004206C8
push_stream_exit:


// pop_stream
// Return size: 0
void pop_stream()
pop_stream_entry:
	// succ:  l0000000000420720
l0000000000420720:
	sp = fp
	sp = sp + -48
	Mem0[sp:word64] = x29
	sp = sp + 8
	Mem0[sp:word64] = x30
	x29 = x31 + 0x0000000000000000
	v8 = sp + 16
	Mem0[v8:word64] = x19
	v8 = v8 + 8
	Mem0[v8:word64] = x20
	x20 = 0x00000000004DE000
	x5 = x20 + 0x0000000000000758
	x19 = Mem0[x5 + 104:word64]
	Mem0[sp + 32:word64] = x21
	branch x19 == 0x0000000000000000 l0000000000420808
	// succ:  l0000000000420740 l0000000000420808
l0000000000420740:
	x6 = Mem0[x19:word64]
	x0 = Mem0[x19 + 32:word64]
	x1 = Mem0[x19 + 40:word64]
	w2 = Mem0[x19 + 8:word32]
	x3 = Mem0[x19 + 16:word64]
	x4 = Mem0[x19 + 24:word64]
	Mem0[x5 + 96:word32] = 0x00000000
	Mem0[x5 + 104:word64] = x6
	call init_yy_io (retsize: 0;)
	x0 = 0x00000000004E3000
	w1 = Mem0[x0 + 664:word32]
	x21 = x0 + 0x0000000000000298
	w31 = w1 - 0x00000004
	NZCV = cond(w31)
	branch Test(EQ,Z) l00000000004207B8
	// succ:  l0000000000420778 l00000000004207B8
l0000000000420778:
	w1 = Mem0[x19 + 48:word32]
	x20 = x20 + 0x0000000000000758
	x0 = Mem0[x19 + 16:word64]
	Mem0[x20 + 48:word32] = w1
	x20 = 0x00000000004AB000
	branch x0 == 0x0000000000000000 l000000000042079C
	// succ:  l0000000000420790 l000000000042079C
l0000000000420790:
	x1 = x20 + 0xFFFFFFFFFFFFF8E0
	w2 = 0x000006BF
	call sh_xfree (retsize: 0;)
	// succ:  l000000000042079C
l000000000042079C:
	x0 = x19
	x1 = x20 + 0xFFFFFFFFFFFFF8E0
	x21 = Mem0[sp + 32:word64]
	v23 = sp + 16
	x19 = Mem0[v23:word64]
	v23 = v23 + 8
	x20 = Mem0[v23:word64]
	x29 = Mem0[sp:word64]
	sp = sp + 8
	x30 = Mem0[sp:word64]
	sp = sp + 48
	w2 = 0x000006C0
	// succ:  l00000000004207B4_thunk_sh_xfree
l00000000004207B4_thunk_sh_xfree:
	call sh_xfree (retsize: 0;)
	return
	// succ:  pop_stream_exit
l00000000004207B8:
	w0 = Mem0[x21 + 16:word32]
	branch (w0 & 0x00000000) == 0x00000000 l0000000000420778
	// succ:  l00000000004207C0 l0000000000420778
l00000000004207C0:
	x1 = 0x00000000004E3000
	w2 = Mem0[x1 + 2972:word32]
	branch w2 == 0x00000000 l00000000004207FC
	// succ:  l00000000004207CC l00000000004207FC
l00000000004207CC:
	x2 = 0x00000000004D6000
	w2 = Mem0[x2 + 1672:word32]
	Mem0[x1 + 2972:word32] = 0x00000000
	branch (w2 & 0x00000000) == 0x00000000 l00000000004207FC
	// succ:  l00000000004207DC l00000000004207FC
l00000000004207DC:
	x0 = Mem0[x19 + 56:word64]
	Mem0[x21 + 16:word32] = w2
	Mem0[x0:word32] = w2
	w1 = 0x00000002
	w0 = w2
	w2 = 0x00000001
	fcntl(x0, x1)
	sp = sp + 0xFFFFFFFFFFFFFFF8
	w0 = Mem0[x21 + 16:word32]
	// succ:  l00000000004207FC
l00000000004207FC:
	x1 = Mem0[x19 + 56:word64]
	call set_buffered_stream (retsize: 0;)
	goto l0000000000420778
	// succ:  l0000000000420778
l0000000000420808:
	w0 = 0x00000001
	Mem0[x5 + 96:word32] = w0
	v22 = sp + 16
	x19 = Mem0[v22:word64]
	v22 = v22 + 8
	x20 = Mem0[v22:word64]
	x21 = Mem0[sp + 32:word64]
	x29 = Mem0[sp:word64]
	sp = sp + 8
	x30 = Mem0[sp:word64]
	sp = sp + 48
	return
	// succ:  pop_stream_exit
pop_stream_exit:


// stream_on_stack
// Return size: 0
void stream_on_stack()
stream_on_stack_entry:
	// succ:  l0000000000420820
l0000000000420820:
	sp = fp
	x1 = 0x00000000004DE000
	x1 = x1 + 0x0000000000000758
	x1 = Mem0[x1 + 104:word64]
	branch x1 != 0x0000000000000000 l000000000042083C
	// succ:  l0000000000420830 l000000000042083C
l0000000000420830:
	goto l0000000000420850
	// succ:  l0000000000420850
l0000000000420834:
	x1 = Mem0[x1:word64]
	branch x1 == 0x0000000000000000 l0000000000420850
	// succ:  l000000000042083C l0000000000420850
l000000000042083C:
	w2 = Mem0[x1 + 8:word32]
	NZCV = cond(w2 - w0)
	branch Test(NE,Z) l0000000000420834
	// succ:  l0000000000420848 l0000000000420834
l0000000000420848:
	w0 = 0x00000001
	return
	// succ:  stream_on_stack_exit
l0000000000420850:
	w0 = w1
	return
	// succ:  stream_on_stack_exit
stream_on_stack_exit:


// save_token_state
// Return size: 0
void save_token_state()
save_token_state_entry:
	// succ:  l0000000000420858
l0000000000420858:
	sp = fp
	sp = sp + -16
	Mem0[sp:word64] = x29
	sp = sp + 8
	Mem0[sp:word64] = x30
	x29 = x31 + 0x0000000000000000
	x1 = 0x00000000004AB000
	x1 = x1 + 0xFFFFFFFFFFFFF8E0
	w2 = 0x000006D7
	x0 = 0x0000000000000010
	call sh_xmalloc (retsize: 0;)
	x2 = 0x00000000004DE000
	x2 = x2 + 0x0000000000000758
	w3 = Mem0[x2 + 32:word32]
	w4 = Mem0[x2 + 72:word32]
	Mem0[x0:word32] = w3
	w3 = Mem0[x2 + 112:word32]
	x2 = 0x00000000004E3000
	w2 = Mem0[x2 + 656:word32]
	Mem0[x0 + 4:word32] = w4
	Mem0[x0 + 8:word32] = w3
	Mem0[x0 + 12:word32] = w2
	x29 = Mem0[sp:word64]
	sp = sp + 8
	x30 = Mem0[sp:word64]
	sp = sp + 16
	return
	// succ:  save_token_state_exit
save_token_state_exit:


// restore_token_state
// Return size: 0
void restore_token_state()
restore_token_state_entry:
	// succ:  l00000000004208A8
l00000000004208A8:
	sp = fp
	branch x0 == 0x0000000000000000 l00000000004208D8
	// succ:  l00000000004208AC l00000000004208D8
l00000000004208AC:
	w4 = Mem0[x0:word32]
	w3 = Mem0[x0 + 4:word32]
	w2 = Mem0[x0 + 8:word32]
	w1 = Mem0[x0 + 12:word32]
	x0 = 0x00000000004DE000
	x0 = x0 + 0x0000000000000758
	Mem0[x0 + 32:word32] = w4
	Mem0[x0 + 72:word32] = w3
	Mem0[x0 + 112:word32] = w2
	x0 = 0x00000000004E3000
	Mem0[x0 + 656:word32] = w1
	// succ:  l00000000004208D8
l00000000004208D8:
	return
	// succ:  restore_token_state_exit
restore_token_state_exit:


// free_pushed_string_input
// Return size: 0
void free_pushed_string_input()
free_pushed_string_input_entry:
	// succ:  l00000000004208DC
l00000000004208DC:
	sp = fp
	// succ:  l00000000004208DC_thunk_fn000000000041F99C
l00000000004208DC_thunk_fn000000000041F99C:
	call fn000000000041F99C (retsize: 0;)
	return
	// succ:  free_pushed_string_input_exit
free_pushed_string_input_exit:


// gather_here_documents
// Return size: 0
void gather_here_documents()
gather_here_documents_entry:
	// succ:  l00000000004208E0
l00000000004208E0:
	sp = fp
	sp = sp + -48
	Mem0[sp:word64] = x29
	sp = sp + 8
	Mem0[sp:word64] = x30
	x29 = x31 + 0x0000000000000000
	v8 = sp + 16
	Mem0[v8:word64] = x19
	v8 = v8 + 8
	Mem0[v8:word64] = x20
	x20 = 0x00000000004E3000
	w0 = Mem0[x20 + 660:word32]
	v12 = sp + 32
	Mem0[v12:word64] = x21
	v12 = v12 + 8
	Mem0[v12:word64] = x22
	branch w0 == 0x00000000 l0000000000420950
	// succ:  l00000000004208FC l0000000000420950
l00000000004208FC:
	x22 = 0x00000000004DE000
	x19 = 0x00000000004E3000
	x22 = x22 + 0x0000000000000758
	w2 = Mem0[x19 + 604:word32]
	x21 = x22 + 0x0000000000000078
	x19 = x19 + 0x000000000000025C
	x20 = x20 + 0x0000000000000294
	goto l0000000000420920
	// succ:  l0000000000420920
l000000000042091C:
	w2 = w1
	// succ:  l0000000000420920
l0000000000420920:
	x0 = Mem0[x21:word64]
	x21 = x21 + 8
	w1 = Mem0[x22 + 48:word32]
	w2 = w2 | 0x00020000
	Mem0[x19:word32] = w2
	call make_here_document (retsize: 0;)
	w1 = Mem0[x19:word32]
	w0 = Mem0[x20:word32]
	w1 = w1 & 0xFFFDFFFF
	w0 = w0 - 0x00000001
	Mem0[x19:word32] = w1
	Mem0[x20:word32] = w0
	branch w0 != 0x00000000 l000000000042091C
	// succ:  l0000000000420950 l000000000042091C
l0000000000420950:
	v14 = sp + 16
	x19 = Mem0[v14:word64]
	v14 = v14 + 8
	x20 = Mem0[v14:word64]
	v15 = sp + 32
	x21 = Mem0[v15:word64]
	v15 = v15 + 8
	x22 = Mem0[v15:word64]
	x29 = Mem0[sp:word64]
	sp = sp + 8
	x30 = Mem0[sp:word64]
	sp = sp + 48
	return
	// succ:  gather_here_documents_exit
gather_here_documents_exit:


// reset_parser
// Return size: 0
void reset_parser()
reset_parser_entry:
	// succ:  l0000000000420960
l0000000000420960:
	sp = fp
	sp = sp + -32
	Mem0[sp:word64] = x29
	sp = sp + 8
	Mem0[sp:word64] = x30
	x29 = x31 + 0x0000000000000000
	v8 = sp + 16
	Mem0[v8:word64] = x19
	v8 = v8 + 8
	Mem0[v8:word64] = x20
	x1 = 0x00000000004E3000
	x19 = 0x00000000004DE000
	x0 = x19 + 0x0000000000000758
	w2 = Mem0[x1 + 604:word32]
	Mem0[x0 + 208:word32] = 0x00000000
	Mem0[x0 + 216:word32] = 0x00000000
	branch (w2 & 0x00001000) == 0x00000000 l0000000000420994
	// succ:  l0000000000420988 l0000000000420994
l0000000000420988:
	w2 = Mem0[x0 + 220:word32]
	x0 = 0x00000000004E1000
	Mem0[x0 + 616:word32] = w2
	// succ:  l0000000000420994
l0000000000420994:
	x0 = x19 + 0x0000000000000758
	x0 = Mem0[x0 + 40:word64]
	Mem0[x1 + 604:word32] = 0x00000000
	branch x0 == 0x0000000000000000 l00000000004209A8
	// succ:  l00000000004209A4 l00000000004209A8
l00000000004209A4:
	call fn000000000041F99C (retsize: 0;)
	// succ:  l00000000004209A8
l00000000004209A8:
	x20 = x19 + 0x0000000000000758
	x0 = Mem0[x20 + 24:word64]
	branch x0 == 0x0000000000000000 l00000000004209D0
	// succ:  l00000000004209B4 l00000000004209D0
l00000000004209B4:
	x1 = 0x00000000004AB000
	x1 = x1 + 0xFFFFFFFFFFFFF8E0
	w2 = 0x00000B1D
	call sh_xfree (retsize: 0;)
	Mem0[x20 + 24:word64] = 0x0000000000000000
	Mem0[x20 + 16:word32] = 0x00000000
	Mem0[x20 + 88:word32] = 0x00000000
	// succ:  l00000000004209D0
l00000000004209D0:
	x0 = x19 + 0x0000000000000758
	x0 = Mem0[x0 + 224:word64]
	branch x0 == 0x0000000000000000 l00000000004209EC
	// succ:  l00000000004209DC l00000000004209EC
l00000000004209DC:
	x1 = 0x00000000004AB000
	x1 = x1 + 0xFFFFFFFFFFFFF8E0
	w2 = 0x00000B22
	call sh_xfree (retsize: 0;)
	// succ:  l00000000004209EC
l00000000004209EC:
	x19 = x19 + 0x0000000000000758
	w0 = 0x0000000A
	x1 = 0x00000000004E3000
	Mem0[x19 + 224:word64] = 0x0000000000000000
	Mem0[x19 + 32:word32] = w0
	Mem0[x19 + 232:word32] = w0
	Mem0[x1 + 656:word32] = w0
	v13 = sp + 16
	x19 = Mem0[v13:word64]
	v13 = v13 + 8
	x20 = Mem0[v13:word64]
	x29 = Mem0[sp:word64]
	sp = sp + 8
	x30 = Mem0[sp:word64]
	sp = sp + 32
	return
	// succ:  reset_parser_exit
reset_parser_exit:


// find_reserved_word
// Return size: 0
void find_reserved_word()
find_reserved_word_entry:
	// succ:  l0000000000420A14
l0000000000420A14:
	sp = fp
	sp = sp + -48
	Mem0[sp:word64] = x29
	sp = sp + 8
	Mem0[sp:word64] = x30
	x29 = x31 + 0x0000000000000000
	v8 = sp + 16
	Mem0[v8:word64] = x19
	v8 = v8 + 8
	Mem0[v8:word64] = x20
	x20 = 0x00000000004D6000
	x20 = x20 + 0x00000000000006A0
	x1 = Mem0[x20:word64]
	v12 = sp + 32
	Mem0[v12:word64] = x21
	v12 = v12 + 8
	Mem0[v12:word64] = x22
	x22 = x0
	branch x1 == 0x0000000000000000 l0000000000420A80
	// succ:  l0000000000420A38 l0000000000420A80
l0000000000420A38:
	v15 = Mem0[x0:byte]
	w21 = (word32) v15
	x20 = x20 + 0x0000000000000010
	w19 = 0x00000000
	goto l0000000000420A54
	// succ:  l0000000000420A54
l0000000000420A48:
	x1 = Mem0[x20:word64]
	x20 = x20 + 16
	w19 = w19 + 0x00000001
	branch x1 == 0x0000000000000000 l0000000000420A80
	// succ:  l0000000000420A54 l0000000000420A80
l0000000000420A54:
	v21 = Mem0[x1:byte]
	w2 = (word32) v21
	NZCV = cond(w2 - w21)
	branch Test(NE,Z) l0000000000420A48
	// succ:  l0000000000420A60 l0000000000420A48
l0000000000420A60:
	x0 = x22
	strcmp(x0, x1)
	sp = sp + 0xFFFFFFFFFFFFFFF8
	branch w0 != 0x00000000 l0000000000420A48
	// succ:  l0000000000420A6C l0000000000420A48
l0000000000420A6C:
	w0 = w19
	v24 = sp + 32
	x21 = Mem0[v24:word64]
	v24 = v24 + 8
	x22 = Mem0[v24:word64]
	v25 = sp + 16
	x19 = Mem0[v25:word64]
	v25 = v25 + 8
	x20 = Mem0[v25:word64]
	x29 = Mem0[sp:word64]
	sp = sp + 8
	x30 = Mem0[sp:word64]
	sp = sp + 48
	return
	// succ:  find_reserved_word_exit
l0000000000420A80:
	w0 = 0xFFFFFFFF
	v18 = sp + 16
	x19 = Mem0[v18:word64]
	v18 = v18 + 8
	x20 = Mem0[v18:word64]
	v19 = sp + 32
	x21 = Mem0[v19:word64]
	v19 = v19 + 8
	x22 = Mem0[v19:word64]
	x29 = Mem0[sp:word64]
	sp = sp + 8
	x30 = Mem0[sp:word64]
	sp = sp + 48
	return
	// succ:  find_reserved_word_exit
find_reserved_word_exit:


// history_delimiting_chars
// Return size: 0
void history_delimiting_chars()
history_delimiting_chars_entry:
	// succ:  l0000000000420A94
l0000000000420A94:
	sp = fp
	sp = sp + -48
	Mem0[sp:word64] = x29
	sp = sp + 8
	Mem0[sp:word64] = x30
	x29 = x31 + 0x0000000000000000
	x1 = 0x00000000004E3000
	v9 = sp + 16
	Mem0[v9:word64] = x19
	v9 = v9 + 8
	Mem0[v9:word64] = x20
	w19 = Mem0[x1 + 604:word32]
	v13 = sp + 32
	Mem0[v13:word64] = x21
	v13 = v13 + 8
	Mem0[v13:word64] = x22
	w2 = w19 & 0x00020000
	branch (w19 & 0x00000000) == 0x00000000 l0000000000420AF4
	// succ:  l0000000000420AB4 l0000000000420AF4
l0000000000420AB4:
	x1 = 0x00000000004DE000
	x1 = x1 + 0x0000000000000758
	w2 = Mem0[x1 + 208:word32]
	branch w2 != 0x00000000 l0000000000420B68
	// succ:  l0000000000420AC4 l0000000000420B68
l0000000000420AC4:
	w0 = Mem0[x1 + 236:word32]
	branch w0 != 0x00000000 l0000000000420B64
	// succ:  l0000000000420ACC l0000000000420B64
l0000000000420ACC:
	x0 = 0x00000000004E3000
	w0 = Mem0[x0 + 612:word32]
	w31 = w0 - 0x00000002
	NZCV = cond(w31)
	branch Test(EQ,Z) l0000000000420B68
	// succ:  l0000000000420ADC l0000000000420B68
l0000000000420ADC:
	x0 = 0x00000000004AC000
	x0 = x0 + 0x0000000000000460
	v20 = sp + 16
	x19 = Mem0[v20:word64]
	v20 = v20 + 8
	x20 = Mem0[v20:word64]
	v21 = sp + 32
	x21 = Mem0[v21:word64]
	v21 = v21 + 8
	x22 = Mem0[v21:word64]
	x29 = Mem0[sp:word64]
	sp = sp + 8
	x30 = Mem0[sp:word64]
	sp = sp + 48
	return
	// succ:  history_delimiting_chars_exit
l0000000000420AF4:
	x21 = 0x00000000004DE000
	x1 = x21 + 0x0000000000000758
	w3 = Mem0[x1 + 208:word32]
	Mem0[x1 + 236:word32] = w2
	branch w3 != 0x00000000 l0000000000420B68
	// succ:  l0000000000420B08 l0000000000420B68
l0000000000420B08:
	branch (w19 & 0x00002000) == 0x00000000 l0000000000420B9C
	// succ:  l0000000000420B0C l0000000000420B9C
l0000000000420B0C:
	w20 = Mem0[x1 + 72:word32]
	w31 = w20 - 0x00000029
	NZCV = cond(w31)
	branch Test(EQ,Z) l0000000000420BE8
	// succ:  l0000000000420B18 l0000000000420BE8
l0000000000420B18:
	w31 = w20 - 0x00000119
	NZCV = cond(w31)
	branch Test(EQ,Z) l0000000000420C04
	// succ:  l0000000000420B20 l0000000000420C04
l0000000000420B20:
	x1 = 0x00000000004E3000
	w1 = Mem0[x1 + 612:word32]
	w31 = w1 - 0x00000001
	NZCV = cond(w31)
	branch Test(LE,ZCV) l0000000000420BB4
	// succ:  l0000000000420B30 l0000000000420BB4
l0000000000420B30:
	x22 = x21 + 0x0000000000000758
	w1 = Mem0[x22 + 32:word32]
	w31 = w1 - 0x0000000A
	NZCV = cond(w31)
	branch Test(NE,Z) l0000000000420BB4
	// succ:  l0000000000420B40 l0000000000420BB4
l0000000000420B40:
	x1 = 0x00000000004AB000
	x1 = x1 + 0xFFFFFFFFFFFFF9A0
	strstr(x0, x1)
	sp = sp + 0xFFFFFFFFFFFFFFF8
	branch x0 == 0x0000000000000000 l0000000000420BB4
	// succ:  l0000000000420B50 l0000000000420BB4
l0000000000420B50:
	w0 = 0x00000001
	Mem0[x22 + 236:word32] = w0
	x0 = 0x00000000004C4000
	x0 = x0 + 0xFFFFFFFFFFFFF8C0
	goto l0000000000420B70
	// succ:  l0000000000420B70
l0000000000420B64:
	Mem0[x1 + 236:word32] = w2
	// succ:  l0000000000420B68
l0000000000420B68:
	x0 = 0x00000000004C4000
	x0 = x0 + 0xFFFFFFFFFFFFF8C0
	// succ:  l0000000000420B70
l0000000000420B70:
	v28 = sp + 16
	x19 = Mem0[v28:word64]
	v28 = v28 + 8
	x20 = Mem0[v28:word64]
	v29 = sp + 32
	x21 = Mem0[v29:word64]
	v29 = v29 + 8
	x22 = Mem0[v29:word64]
	x29 = Mem0[sp:word64]
	sp = sp + 8
	x30 = Mem0[sp:word64]
	sp = sp + 48
	return
	// succ:  history_delimiting_chars_exit
l0000000000420B80:
	x21 = x21 + 0x0000000000000758
	w0 = Mem0[x21 + 112:word32]
	w31 = w0 - 0x00000109
	NZCV = cond(w31)
	branch Test(EQ,Z) l0000000000420C14
	// succ:  l0000000000420B90 l0000000000420C14
l0000000000420B90:
	w31 = w0 - 0x00000107
	NZCV = cond(w31)
	branch Test(NE,Z) l0000000000420BC4
	// succ:  l0000000000420B98 l0000000000420BC4
l0000000000420B98:
	branch (w19 & 0x00000080) == 0x00000000 l0000000000420BC4
	// succ:  l0000000000420B9C l0000000000420BC4
l0000000000420B9C:
	x0 = 0x00000000004BE000
	x0 = x0 + 0x0000000000000330
	v26 = sp + 16
	x19 = Mem0[v26:word64]
	v26 = v26 + 8
	x20 = Mem0[v26:word64]
	v27 = sp + 32
	x21 = Mem0[v27:word64]
	v27 = v27 + 8
	x22 = Mem0[v27:word64]
	x29 = Mem0[sp:word64]
	sp = sp + 8
	x30 = Mem0[sp:word64]
	sp = sp + 48
	return
	// succ:  history_delimiting_chars_exit
l0000000000420BB4:
	w31 = w20 - 0x00000119
	NZCV = cond(w31)
	branch Test(EQ,Z) l0000000000420B80
	// succ:  l0000000000420BBC l0000000000420B80
l0000000000420BBC:
	w31 = w20 - 0x0000000A
	NZCV = cond(w31)
	branch Test(EQ,Z) l0000000000420B9C
	// succ:  l0000000000420BC4 l0000000000420B9C
l0000000000420BC4:
	x0 = 0x00000000004AA000
	x0 = x0 + 0x0000000000000760
	x0 = x0 + 0x0000000000000004
	// succ:  l0000000000420BD0
l0000000000420BD0:
	w1 = Mem0[x0:word32]
	x0 = x0 + 0x0000000000000004
	NZCV = cond(w20 - w1)
	branch w1 == 0x00000000 l0000000000420BF8
	// succ:  l0000000000420BE0 l0000000000420BF8
l0000000000420BE0:
	branch Test(NE,Z) l0000000000420BD0
	// succ:  l0000000000420BE4 l0000000000420BD0
l0000000000420BE4:
	goto l0000000000420B9C
	// succ:  l0000000000420B9C
l0000000000420BE8:
	w0 = Mem0[x1 + 112:word32]
	w31 = w0 - 0x00000028
	NZCV = cond(w31)
	branch Test(EQ,Z) l0000000000420B9C
	// succ:  l0000000000420BF4 l0000000000420B9C
l0000000000420BF4:
	branch (w19 & 0x00000080) == 0x00000000 l0000000000420B9C
	// succ:  l0000000000420BF8 l0000000000420B9C
l0000000000420BF8:
	x0 = 0x00000000004AB000
	x0 = x0 + 0xFFFFFFFFFFFFF998
	goto l0000000000420B70
	// succ:  l0000000000420B70
l0000000000420C04:
	w1 = Mem0[x1 + 112:word32]
	w31 = w1 - 0x0000010F
	NZCV = cond(w31)
	branch Test(NE,Z) l0000000000420B20
	// succ:  l0000000000420C10 l0000000000420B20
l0000000000420C10:
	goto l0000000000420B9C
	// succ:  l0000000000420B9C
l0000000000420C14:
	x3 = Mem0[x21 + 24:word64]
	v31 = Mem0[x21 + 8:int32]
	x0 = (word64) v31
	v32 = Mem0[x3 + x0:byte]
	w1 = (word32) v32
	w31 = w1 - 0x00000020
	NZCV = cond(w31)
	branch Test(NE,Z) l0000000000420C60
	// succ:  l0000000000420C28 l0000000000420C60
l0000000000420C28:
	x0 = x0 + 0x0000000000000001
	// succ:  l0000000000420C2C
l0000000000420C2C:
	v33 = Mem0[x3 + x0:byte]
	w1 = (word32) v33
	x2 = x0 + 0x0000000000000001
	w31 = w1 - 0x00000009
	NZCV = cond(w31)
	branch Test(NE,Z) l0000000000420C44
	// succ:  l0000000000420C3C l0000000000420C44
l0000000000420C3C:
	x0 = x2
	goto l0000000000420C2C
	// succ:  l0000000000420C2C
l0000000000420C44:
	w31 = w1 - 0x00000020
	NZCV = cond(w31)
	branch Test(EQ,Z) l0000000000420C3C
	// succ:  l0000000000420C4C l0000000000420C3C
l0000000000420C4C:
	w31 = w1 - 0x00000069
	NZCV = cond(w31)
	branch Test(EQ,Z) l0000000000420C6C
	// succ:  l0000000000420C54 l0000000000420C6C
l0000000000420C54:
	x0 = 0x00000000004AB000
	x0 = x0 + 0xFFFFFFFFFFFFF990
	goto l0000000000420B70
	// succ:  l0000000000420B70
l0000000000420C60:
	w31 = w1 - 0x00000009
	NZCV = cond(w31)
	branch Test(EQ,Z) l0000000000420C28
	// succ:  l0000000000420C68 l0000000000420C28
l0000000000420C68:
	goto l0000000000420C4C
	// succ:  l0000000000420C4C
l0000000000420C6C:
	x0 = x3 + x0
	v35 = Mem0[x0 + 1:byte]
	w0 = (word32) v35
	w31 = w0 - 0x0000006E
	NZCV = cond(w31)
	branch Test(NE,Z) l0000000000420C54
	// succ:  l0000000000420C7C l0000000000420C54
l0000000000420C7C:
	goto l0000000000420B9C
	// succ:  l0000000000420B9C
history_delimiting_chars_exit:


// get_current_prompt_level
// Return size: 0
void get_current_prompt_level()
get_current_prompt_level_entry:
	// succ:  l0000000000420C80
l0000000000420C80:
	sp = fp
	x0 = 0x00000000004E3000
	x0 = Mem0[x0 + 648:word64]
	branch x0 == 0x0000000000000000 l0000000000420CA4
	// succ:  l0000000000420C8C l0000000000420CA4
l0000000000420C8C:
	x1 = 0x00000000004E3000
	x1 = Mem0[x1 + 624:word64]
	x31 = x0 - x1
	NZCV = cond(x31)
	w0 = 0x00000002
l0000000000420CA4:
	w0 = 0x00000001
	return
	// succ:  get_current_prompt_level_exit
get_current_prompt_level_exit:


// set_current_prompt_level
// Return size: 0
void set_current_prompt_level()
set_current_prompt_level_entry:
	// succ:  l0000000000420CAC
l0000000000420CAC:
	sp = fp
	w31 = w0 - 0x00000002
	NZCV = cond(w31)
	branch Test(EQ,Z) l0000000000420CD8
	// succ:  l0000000000420CB4 l0000000000420CD8
l0000000000420CB4:
	x0 = 0x00000000004E3000
	x0 = x0 + 0x0000000000000278
	x2 = 0x00000000004DE000
	x1 = Mem0[x0:word64]
	x2 = x2 + 0x0000000000000758
	Mem0[x2 + 240:word64] = x0
	x0 = 0x00000000004E3000
	Mem0[x0 + 648:word64] = x1
	return
	// succ:  set_current_prompt_level_exit
l0000000000420CD8:
	x0 = 0x00000000004E3000
	x0 = x0 + 0x0000000000000270
	x2 = 0x00000000004DE000
	x1 = Mem0[x0:word64]
	x2 = x2 + 0x0000000000000758
	Mem0[x2 + 240:word64] = x0
	x0 = 0x00000000004E3000
	Mem0[x0 + 648:word64] = x1
	return
	// succ:  set_current_prompt_level_exit
set_current_prompt_level_exit:


// decode_prompt_string
// Return size: 0
void decode_prompt_string()
decode_prompt_string_entry:
	// succ:  l0000000000420CFC
l0000000000420CFC:
	sp = fp
	x31 = x31 - (0x0000000000000001 << 12)
	x31 = x31 - 0x00000000000000C0
	sp = sp + -96
	Mem0[sp:word64] = x29
	sp = sp + 8
	Mem0[sp:word64] = x30
	x29 = x31 + 0x0000000000000000
	v8 = sp + 64
	Mem0[v8:word64] = x25
	v8 = v8 + 8
	Mem0[v8:word64] = x26
	x25 = 0x00000000004AB000
	v11 = sp + 80
	Mem0[v11:word64] = x27
	v11 = v11 + 8
	Mem0[v11:word64] = x28
	v14 = sp + 16
	Mem0[v14:word64] = x19
	v14 = v14 + 8
	Mem0[v14:word64] = x20
	w3 = 0x00000030
	x20 = x0
	x1 = x25 + 0xFFFFFFFFFFFFF8E0
	x0 = 0x0000000000000030
	w2 = 0x000013D2
	x28 = 0x00000000004DE000
	v21 = sp + 32
	Mem0[v21:word64] = x21
	v21 = v21 + 8
	Mem0[v21:word64] = x22
	v24 = sp + 48
	Mem0[v24:word64] = x23
	v24 = v24 + 8
	Mem0[v24:word64] = x24
	Mem0[x29 + 4332:word32] = w3
	x24 = 0x00000000004DE000
	call sh_xmalloc (retsize: 0;)
	x27 = 0x00000000004AA000
	Mem0[x29 + 4328:word32] = 0x00000000
	x28 = x28 + 0x00000000000006B8
	x21 = x0
	Mem0[x0:byte] = 0x00
	x26 = 0x00000000004D6000
	x24 = x24 + 0x00000000000006B4
	x27 = x27 + 0x0000000000000550
	Mem0[x29 + 4352:word64] = x28
	// succ:  l0000000000420D6C
l0000000000420D6C:
	v26 = Mem0[x20:byte]
	w19 = (word32) v26
	x22 = x20 + 0x0000000000000001
	branch w19 == 0x00000000 l0000000000420DC8
	// succ:  l0000000000420D78 l0000000000420DC8
l0000000000420D78:
	w2 = Mem0[x24:word32]
	branch w2 == 0x00000000 l0000000000420D88
	// succ:  l0000000000420D80 l0000000000420D88
l0000000000420D80:
	w31 = w19 - 0x00000021
	NZCV = cond(w31)
	branch Test(EQ,Z) l0000000000420F48
	// succ:  l0000000000420D88 l0000000000420F48
l0000000000420D88:
	w31 = w19 - 0x0000005C
	NZCV = cond(w31)
	branch Test(EQ,Z) l0000000000420ED8
	// succ:  l0000000000420D90 l0000000000420ED8
l0000000000420D90:
	w3 = Mem0[x29 + 4328:word32]
	w4 = Mem0[x29 + 4332:word32]
	w2 = w3 + 0x00000003
	NZCV = cond(w2 - w4)
	branch Test(GE,NZV) l0000000000420EA8
	// succ:  l0000000000420DA4 l0000000000420EA8
l0000000000420DA4:
	w0 = w3 + 0x00000001
	Mem0[x29 + 4328:word32] = w0
	Mem0[x21 + (int64) ((int32) w3):byte] = (byte) w19
	v33 = Mem0[x29 + 2164:int32]
	x0 = (word64) v33
	x20 = x22
	Mem0[x21 + x0:byte] = 0x00
	v34 = Mem0[x20:byte]
	w19 = (word32) v34
	x22 = x20 + 0x0000000000000001
	branch w19 != 0x00000000 l0000000000420D78
	// succ:  l0000000000420DC8 l0000000000420D78
l0000000000420DC8:
	x0 = 0x00000000004AA000
	x0 = x0 + 0x0000000000000760
	x0 = x0 + 0x0000000000000058
	x20 = 0x00000000004DE000
	x1 = x20 + 0x0000000000000758
l0000000000420EA8:
	w4 = w4 + 0x00000030
	NZCV = cond(w2 - w4)
	branch Test(GE,NZV) l0000000000420EA8
	// succ:  l0000000000420EB4 l0000000000420EA8
l0000000000420EB4:
	x0 = x21
	w3 = 0x00001512
l0000000000420ED8:
	v39 = Mem0[x20 + 1:byte]
	w28 = (word32) v39
	w0 = w28 - 0x00000021
	w31 = w0 - 0x00000056
	NZCV = cond(w31)
	w23 = w28
	branch Test(ULE,ZC) l0000000000420F74
	// succ:  l0000000000420EEC l0000000000420F74
l0000000000420EEC:
	x1 = x25 + 0xFFFFFFFFFFFFF8E0
	x0 = 0x0000000000000003
	w2 = 0x00001501
	call sh_xmalloc (retsize: 0;)
	x6 = x0
	x1 = 0x0000000000001060
	w0 = 0x0000005C
	Mem0[x6:byte] = (byte) w0
	Mem0[x6 + 1:byte] = (byte) w28
	Mem0[x6 + 2:byte] = 0x00
	x20 = x22
	x19 = x29 + x1
	NZCV = cond(w23 - w31)
l0000000000420F24:
	x1 = x21
	x0 = x6
	x2 = x19 + 0x0000000000000088
	x3 = x19 + 0x000000000000008C
	call sub_append_string (retsize: 0;)
	x21 = x0
	v47 = Mem0[x29 + 2164:int32]
	x0 = (word64) v47
	Mem0[x21 + x0:byte] = 0x00
	goto l0000000000420D6C
	// succ:  l0000000000420D6C
l0000000000420F48:
	v43 = Mem0[x20 + 1:byte]
	w0 = (word32) v43
	w31 = w0 - 0x00000021
	NZCV = cond(w31)
	branch Test(EQ,Z) l0000000000420FA4
	// succ:  l0000000000420F54 l0000000000420FA4
l0000000000420F54:
	call history_number (retsize: 0;)
l0000000000420F68:
	x0 = 0x0000000000001060
	x19 = x29 + x0
	goto l0000000000420F24
	// succ:  l0000000000420F24
l0000000000420F74:
	v45 = Mem0[x27 + (uint64) ((uint32) w0):word16]
	w1 = (word32) v45
	x2 = 0x0000000000420F84
	x1 = x2 + (int64) ((int16) w1)
	call x1 (retsize: 0;)
	return
	// succ:  decode_prompt_string_exit
l0000000000420FA4:
	x1 = x25 + 0xFFFFFFFFFFFFF8E0
	x0 = 0x0000000000000002
	w2 = 0x000013DC
	call sh_xmalloc (retsize: 0;)
	x1 = 0x00000000004AB000
	x1 = x1 + 0xFFFFFFFFFFFFF9B0
	v46 = Mem0[x1:word16]
	w1 = (word32) v46
	x6 = x0
	Mem0[x0:word16] = (word16) w1
	x20 = x20 + 0x0000000000000002
	goto l0000000000420F68
	// succ:  l0000000000420F68
decode_prompt_string_exit:


// fn0000000000421860
// Return size: 0
void fn0000000000421860()
fn0000000000421860_entry:
	// succ:  l0000000000421860
l0000000000421860:
	sp = fp
	sp = sp + -48
	Mem0[sp:word64] = x29
	sp = sp + 8
	Mem0[sp:word64] = x30
	x29 = x31 + 0x0000000000000000
	x0 = 0x00000000004DE000
	w0 = Mem0[x0 + 1704:word32]
	v10 = sp + 16
	Mem0[v10:word64] = x19
	v10 = v10 + 8
	Mem0[v10:word64] = x20
	Mem0[sp + 32:word64] = x21
	branch w0 == 0x00000000 l0000000000421894
	// succ:  l000000000042187C l0000000000421894
l000000000042187C:
	x19 = 0x00000000004DE000
	x0 = x19 + 0x0000000000000758
	x0 = Mem0[x0 + 40:word64]
	branch x0 == 0x0000000000000000 l00000000004218A4
	// succ:  l000000000042188C l00000000004218A4
l000000000042188C:
	x0 = Mem0[x0 + 24:word64]
	branch x0 == 0x0000000000000000 l00000000004218A4
	// succ:  l0000000000421894 l00000000004218A4
l0000000000421894:
	v12 = sp + 16
	x19 = Mem0[v12:word64]
	v12 = v12 + 8
	x20 = Mem0[v12:word64]
	x21 = Mem0[sp + 32:word64]
	x29 = Mem0[sp:word64]
	sp = sp + 8
	x30 = Mem0[sp:word64]
	sp = sp + 48
	return
	// succ:  fn0000000000421860_exit
l00000000004218A4:
	x0 = 0x00000000004AA000
	x0 = x0 + 0x0000000000000340
	call get_string_value (retsize: 0;)
	x1 = 0x00000000004E3000
	Mem0[x1 + 632:word64] = x0
	x0 = 0x00000000004AA000
	x0 = x0 + 0x0000000000000348
	x21 = x1 + 0x0000000000000278
	call get_string_value (retsize: 0;)
	x2 = x19 + 0x0000000000000758
	x20 = 0x00000000004E3000
	x1 = Mem0[x2 + 240:word64]
	Mem0[x20 + 624:word64] = x0
	branch x1 == 0x0000000000000000 l0000000000421980
	// succ:  l00000000004218DC l0000000000421980
l00000000004218DC:
	x0 = Mem0[x1:word64]
	branch x0 == 0x0000000000000000 l0000000000421960
	// succ:  l00000000004218E4 l0000000000421960
l00000000004218E4:
	call decode_prompt_string (retsize: 0;)
	x21 = x0
	branch x0 == 0x0000000000000000 l0000000000421960
	// succ:  l00000000004218F0 l0000000000421960
l00000000004218F0:
	x1 = x19 + 0x0000000000000758
	x0 = Mem0[x1 + 240:word64]
	x20 = x20 + 0x0000000000000270
	x3 = Mem0[x0:word64]
	x0 = 0x00000000004DE000
	x2 = 0x00000000004E3000
	w0 = Mem0[x0 + 1720:word32]
	Mem0[x2 + 648:word64] = x3
	Mem0[x1 + 240:word64] = x20
	branch w0 != 0x00000000 l000000000042193C
	// succ:  l0000000000421918 l000000000042193C
l0000000000421918:
	x0 = Mem0[x1 + 64:word64]
	branch x0 == 0x0000000000000000 l0000000000421930
	// succ:  l0000000000421920 l0000000000421930
l0000000000421920:
	x1 = 0x00000000004AB000
	x1 = x1 + 0xFFFFFFFFFFFFF8E0
	w2 = 0x00001381
	call sh_xfree (retsize: 0;)
	// succ:  l0000000000421930
l0000000000421930:
	x19 = x19 + 0x0000000000000758
	Mem0[x19 + 64:word64] = x21
	goto l0000000000421894
	// succ:  l0000000000421894
l000000000042193C:
	x0 = Mem0[x1 + 56:word64]
	branch x0 == 0x0000000000000000 l0000000000421954
	// succ:  l0000000000421944 l0000000000421954
l0000000000421944:
	x1 = 0x00000000004AB000
	x1 = x1 + 0xFFFFFFFFFFFFF8E0
	w2 = 0x00001387
	call sh_xfree (retsize: 0;)
	// succ:  l0000000000421954
l0000000000421954:
	x19 = x19 + 0x0000000000000758
	Mem0[x19 + 56:word64] = x21
	goto l0000000000421894
	// succ:  l0000000000421894
l0000000000421960:
	x1 = 0x00000000004AB000
	x0 = 0x0000000000000001
	x1 = x1 + 0xFFFFFFFFFFFFF8E0
	w2 = 0x00001377
	call sh_xmalloc (retsize: 0;)
	x21 = x0
	Mem0[x0:byte] = 0x00
	goto l00000000004218F0
	// succ:  l00000000004218F0
l0000000000421980:
	Mem0[x2 + 240:word64] = x21
	x1 = x21
	goto l00000000004218DC
	// succ:  l00000000004218DC
fn0000000000421860_exit:


// fn000000000042198C
// Return size: 0
void fn000000000042198C()
fn000000000042198C_entry:
	// succ:  l000000000042198C
l000000000042198C:
	sp = fp
	sp = sp + -128
	Mem0[sp:word64] = x29
	sp = sp + 8
	Mem0[sp:word64] = x30
	x29 = x31 + 0x0000000000000000
	x2 = 0x00000000004E1000
	w1 = Mem0[x2 + 644:word32]
	v10 = sp + 80
	Mem0[v10:word64] = x27
	v10 = v10 + 8
	Mem0[v10:word64] = x28
	v13 = sp + 16
	Mem0[v13:word64] = x19
	v13 = v13 + 8
	Mem0[v13:word64] = x20
	v16 = sp + 32
	Mem0[v16:word64] = x21
	v16 = v16 + 8
	Mem0[v16:word64] = x22
	v19 = sp + 48
	Mem0[v19:word64] = x23
	v19 = v19 + 8
	Mem0[v19:word64] = x24
	v22 = sp + 64
	Mem0[v22:word64] = x25
	v22 = v22 + 8
	Mem0[v22:word64] = x26
	w28 = w0
	branch w1 != 0x00000000 l0000000000421E5C
	// succ:  l00000000004219B8 l0000000000421E5C
l00000000004219B8:
	x1 = 0x00000000004E1000
	w0 = Mem0[x1 + 632:word32]
	branch w0 != 0x00000000 l0000000000421E70
	// succ:  l00000000004219C4 l0000000000421E70
l00000000004219C4:
	x3 = 0x00000000004E1000
	w0 = Mem0[x3 + 624:word32]
	branch w0 != 0x00000000 l0000000000421E80
	// succ:  l00000000004219D0 l0000000000421E80
l00000000004219D0:
	x21 = 0x00000000004DE000
	x1 = x21 + 0x0000000000000758
	w0 = Mem0[x1 + 248:word32]
	branch w0 != 0x00000000 l0000000000421E1C
	// succ:  l00000000004219E0 l0000000000421E1C
l00000000004219E0:
	x0 = Mem0[x1 + 24:word64]
	branch x0 == 0x0000000000000000 l0000000000421EA0
	// succ:  l00000000004219E8 l0000000000421EA0
l00000000004219E8:
	w3 = Mem0[x1 + 16:word32]
	v29 = Mem0[x0 + (int64) ((int32) w3):byte]
	w0 = (word32) v29
	branch w0 != 0x00000000 l00000000004219FC
	// succ:  l00000000004219F4 l00000000004219FC
l00000000004219F4:
	x1 = Mem0[x1 + 40:word64]
	branch x1 == 0x0000000000000000 l0000000000421EA0
	// succ:  l00000000004219FC l0000000000421EA0
l00000000004219FC:
	x19 = 0x00000000004E3000
	x20 = 0x00000000004AB000
	x24 = 0x00000000004DE000
	x19 = x19 + 0x000000000000025C
	x20 = x20 + 0xFFFFFFFFFFFFF8E0
	x24 = x24 + 0x00000000000006A8
	// succ:  l0000000000421A14
l0000000000421A14:
	branch w0 == 0x00000000 l0000000000421A24
	// succ:  l0000000000421A18 l0000000000421A24
l0000000000421A18:
	x1 = x21 + 0x0000000000000758
	w3 = w3 + 0x00000001
	Mem0[x1 + 16:word32] = w3
	// succ:  l0000000000421A24
l0000000000421A24:
	branch w0 != 0x00000000 l0000000000421A84
	// succ:  l0000000000421A28 l0000000000421A84
l0000000000421A28:
	goto l0000000000421B14
	// succ:  l0000000000421B14
l0000000000421A2C:
	w1 = Mem0[x19:word32]
	w1 = w1 | 0x00000002
	Mem0[x19:word32] = w1
	// succ:  l0000000000421A38
l0000000000421A38:
	x1 = Mem0[x0:word64]
	x4 = x21 + 0x0000000000000758
	x3 = Mem0[x0 + 24:word64]
	Mem0[x4 + 40:word64] = x1
	branch x3 == 0x0000000000000000 l0000000000421A58
	// succ:  l0000000000421A4C l0000000000421A58
l0000000000421A4C:
	v49 = Mem0[x3 + 16:byte]
	w1 = (word32) v49
	w1 = w1 & 0xFFFFFFFD
	Mem0[x3 + 16:byte] = (byte) w1
	// succ:  l0000000000421A58
l0000000000421A58:
	x1 = x2 + 0xFFFFFFFFFFFFF8E0
	w2 = 0x00000756
	call sh_xfree (retsize: 0;)
	call fn000000000041FE90 (retsize: 0;)
	x1 = x21 + 0x0000000000000758
	w2 = Mem0[x1 + 16:word32]
	x0 = Mem0[x1 + 24:word64]
	v51 = Mem0[x0 + (int64) ((int32) w2):byte]
	w0 = (word32) v51
	branch w0 == 0x00000000 l0000000000421B78
	// succ:  l0000000000421A7C l0000000000421B78
l0000000000421A7C:
	w2 = w2 + 0x00000001
	Mem0[x1 + 16:word32] = w2
	// succ:  l0000000000421A84
l0000000000421A84:
	w31 = w0 - 0x0000005C
	NZCV = cond(w31)
	branch Test(NE,Z) l0000000000421B8C
	// succ:  l0000000000421A8C l0000000000421B8C
l0000000000421A8C:
	branch w28 == 0x00000000 l0000000000421B8C
	// succ:  l0000000000421A90 l0000000000421B8C
l0000000000421A90:
	x0 = x21 + 0x0000000000000758
	w2 = Mem0[x0 + 16:word32]
	x4 = Mem0[x0 + 24:word64]
l0000000000421B14:
	x22 = x21 + 0x0000000000000758
	x1 = Mem0[x22 + 40:word64]
	branch x1 == 0x0000000000000000 l0000000000421B78
	// succ:  l0000000000421B20 l0000000000421B78
l0000000000421B20:
	x0 = Mem0[x22 + 24:word64]
	branch x0 == 0x0000000000000000 l0000000000421BA8
	// succ:  l0000000000421B28 l0000000000421BA8
l0000000000421B28:
	w2 = 0x00000743
	x1 = x20
	call sh_xfree (retsize: 0;)
	x0 = Mem0[x22 + 40:word64]
	x2 = 0x00000000004AB000
	// succ:  l0000000000421B3C
l0000000000421B3C:
	x7 = Mem0[x0 + 16:word64]
	w6 = Mem0[x0 + 36:word32]
	w5 = Mem0[x0 + 32:word32]
	w4 = Mem0[x0 + 40:word32]
	x3 = x21 + 0x0000000000000758
	w1 = Mem0[x0 + 8:word32]
	Mem0[x3 + 24:word64] = x7
	Mem0[x3 + 16:word32] = w6
	Mem0[x3 + 88:word32] = w5
	Mem0[x3 + 92:word32] = w4
	branch w1 != 0x00000000 l0000000000421A2C
	// succ:  l0000000000421B68 l0000000000421A2C
l0000000000421B68:
	w1 = Mem0[x19:word32]
	w1 = w1 & 0xFFFFFFFD
	Mem0[x19:word32] = w1
	goto l0000000000421A38
	// succ:  l0000000000421A38
l0000000000421B78:
	x21 = x21 + 0x0000000000000758
	w0 = Mem0[x21 + 92:word32]
	w31 = w0 + 0x00000001
	NZCV = cond(w31)
	branch Test(EQ,Z) l0000000000422084
	// succ:  l0000000000421B88 l0000000000422084
l0000000000421B88:
	w0 = 0x00000000
	// succ:  l0000000000421B8C
l0000000000421B8C:
	v56 = sp + 16
	x19 = Mem0[v56:word64]
	v56 = v56 + 8
	x20 = Mem0[v56:word64]
	v57 = sp + 32
	x21 = Mem0[v57:word64]
	v57 = v57 + 8
	x22 = Mem0[v57:word64]
	v58 = sp + 48
	x23 = Mem0[v58:word64]
	v58 = v58 + 8
	x24 = Mem0[v58:word64]
	v59 = sp + 64
	x25 = Mem0[v59:word64]
	v59 = v59 + 8
	x26 = Mem0[v59:word64]
	v60 = sp + 80
	x27 = Mem0[v60:word64]
	v60 = v60 + 8
	x28 = Mem0[v60:word64]
	x29 = Mem0[sp:word64]
	sp = sp + 8
	x30 = Mem0[sp:word64]
	sp = sp + 128
	return
	// succ:  fn000000000042198C_exit
l0000000000421BA8:
	x0 = x1
	x2 = 0x00000000004AB000
	goto l0000000000421B3C
	// succ:  l0000000000421B3C
l0000000000421BD0:
	x0 = 0x00000000004DE000
	x0 = x0 + 0x00000000000006A8
	Mem0[x29 + 104:word64] = x0
	x0 = 0x00000000004AB000
	x0 = x0 + 0xFFFFFFFFFFFFF8E0
	Mem0[x29 + 96:word64] = x0
	x0 = 0x00000000004E3000
	x0 = x0 + 0x0000000000000264
	x23 = 0x00000000004E3000
	Mem0[x29 + 112:word64] = x0
	// succ:  l0000000000421BF8
l0000000000421BF8:
	x2 = 0x00000000004E1000
	w0 = Mem0[x2 + 644:word32]
	branch w0 != 0x00000000 l0000000000421FC4
	// succ:  l0000000000421C04 l0000000000421FC4
l0000000000421C04:
	x1 = 0x00000000004E1000
	w0 = Mem0[x1 + 632:word32]
	branch w0 != 0x00000000 l0000000000421FBC
	// succ:  l0000000000421C10 l0000000000421FBC
l0000000000421C10:
	x0 = x21 + 0x0000000000000758
	x2 = 0x00000000004DE000
	Mem0[x0 + 92:word32] = 0x00000000
	w0 = Mem0[x2 + 1712:word32]
	branch w0 == 0x00000000 l0000000000421F98
	// succ:  l0000000000421C24 l0000000000421F98
l0000000000421C24:
	x1 = Mem0[x29 + 104:word64]
	w0 = Mem0[x1:word32]
	branch w0 == 0x00000000 l0000000000421F9C
	// succ:  l0000000000421C30 l0000000000421F9C
l0000000000421C30:
	w0 = Mem0[x23 + 664:word32]
	w1 = w0 - 0x00000001
	w31 = w1 - 0x00000001
	NZCV = cond(w31)
	branch Test(ULE,ZC) l0000000000421F98
	// succ:  l0000000000421C40 l0000000000421F98
l0000000000421C40:
	x2 = 0x00000000004DE000
	w1 = Mem0[x2 + 1720:word32]
	branch w1 == 0x00000000 l0000000000421F80
	// succ:  l0000000000421C4C l0000000000421F80
l0000000000421C4C:
	x2 = Mem0[x29 + 104:word64]
	w1 = Mem0[x2:word32]
	branch w1 == 0x00000000 l0000000000421F80
	// succ:  l0000000000421C58 l0000000000421F80
l0000000000421C58:
	w0 = w0 - 0x00000001
	w31 = w0 - 0x00000001
	NZCV = cond(w31)
	branch Test(ULE,ZC) l0000000000421F78
	// succ:  l0000000000421C64 l0000000000421F78
l0000000000421C64:
	x0 = 0x00000000004E1000
	x1 = 0x00000000004E1000
	x20 = 0x0000000000000000
	x24 = x0 + 0x0000000000000284
	x25 = x1 + 0x0000000000000278
	x22 = x21 + 0x0000000000000758
	w27 = 0x00000002
	// succ:  l0000000000421C80
l0000000000421C80:
	w26 = w20
	// succ:  l0000000000421C84
l0000000000421C84:
	x0 = x23 + 0x0000000000000298
	x0 = Mem0[x0 + 24:word64]
	call x0 (retsize: 0;)
	w19 = w0
	w0 = Mem0[x24:word32]
	branch w0 != 0x00000000 l0000000000421EB4
	// succ:  l0000000000421C9C l0000000000421EB4
l0000000000421C9C:
	w0 = Mem0[x25:word32]
	branch w0 != 0x00000000 l0000000000421E98
	// succ:  l0000000000421CA4 l0000000000421E98
l0000000000421CA4:
	branch w19 == 0x00000000 l0000000000421C84
	// succ:  l0000000000421CA8 l0000000000421C84
l0000000000421CA8:
	w0 = Mem0[x22 + 88:word32]
	w1 = w20 + 0x00000002
	NZCV = cond(w0 - w1)
	branch Test(LE,ZCV) l0000000000421EC0
	// succ:  l0000000000421CB8 l0000000000421EC0
l0000000000421CB8:
	w31 = w19 + 0x00000001
	NZCV = cond(w31)
	x1 = Mem0[x22 + 24:word64]
	branch Test(EQ,Z) l0000000000421EFC
	// succ:  l0000000000421CC4 l0000000000421EFC
l0000000000421CC4:
	Mem0[x1 + x20:byte] = (byte) w19
	w31 = w19 - 0x0000000A
	NZCV = cond(w31)
	x1 = x1 + x20
	x20 = x20 + 0x0000000000000001
	branch Test(NE,Z) l0000000000421C80
	// succ:  l0000000000421CD8 l0000000000421C80
l0000000000421CD8:
	x2 = Mem0[x29 + 112:word64]
	Mem0[x1:byte] = 0x00
	w0 = Mem0[x2:word32]
	x19 = x21 + 0x0000000000000758
	w0 = w0 + 0x00000001
	Mem0[x2:word32] = w0
	Mem0[x19 + 16:word32] = 0x00000000
	Mem0[x19 + 20:word32] = w26
	call fn000000000041FE90 (retsize: 0;)
	x1 = 0x00000000004D7000
	w0 = Mem0[x1 + 388:word32]
	x3 = Mem0[x19 + 24:word64]
	branch w0 == 0x00000000 l0000000000421F3C
	// succ:  l0000000000421D0C l0000000000421F3C
l0000000000421D0C:
	branch x3 == 0x0000000000000000 l0000000000421F40
	// succ:  l0000000000421D10 l0000000000421F40
l0000000000421D10:
	v45 = Mem0[x3:byte]
	w0 = (word32) v45
	branch w0 != 0x00000000 l0000000000421FD0
	// succ:  l0000000000421D18 l0000000000421FD0
l0000000000421D18:
	x1 = Mem0[x29 + 112:word64]
	w0 = Mem0[x1:word32]
	w31 = w0 - 0x00000001
	NZCV = cond(w31)
	branch Test(LE,ZCV) l0000000000421D60
	// succ:  l0000000000421D28 l0000000000421D60
l0000000000421D28:
	w0 = Mem0[x19 + 208:word32]
	branch w0 == 0x00000000 l0000000000421D40
	// succ:  l0000000000421D30 l0000000000421D40
l0000000000421D30:
	x1 = Mem0[x19 + 200:word64]
	x0 = x1 + (int64) ((int32) w0)
	v46 = Mem0[x0 + -1:byte]
	w0 = (word32) v46
	branch w0 != 0x00000000 l00000000004220A4
	// succ:  l0000000000421D40 l00000000004220A4
l0000000000421D40:
	x0 = x3
	Mem0[x29 + 120:word64] = x3
	call history_delimiting_chars (retsize: 0;)
	x3 = Mem0[x29 + 120:word64]
	branch x0 == 0x0000000000000000 l0000000000421D60
	// succ:  l0000000000421D54 l0000000000421D60
l0000000000421D54:
	v47 = Mem0[x0:byte]
	w0 = (word32) v47
	w31 = w0 - 0x0000003B
	NZCV = cond(w31)
	branch Test(EQ,Z) l00000000004220F4
	// succ:  l0000000000421D60 l00000000004220F4
l0000000000421D60:
	x0 = 0x00000000004DF000
	w0 = Mem0[x0 + 3724:word32]
	branch w0 == 0x00000000 l0000000000421D9C
	// succ:  l0000000000421D6C l0000000000421D9C
l0000000000421D6C:
	v48 = Mem0[x3:byte]
	w0 = (word32) v48
	branch w0 != 0x00000000 l0000000000421D84
	// succ:  l0000000000421D74 l0000000000421D84
l0000000000421D74:
	x0 = x21 + 0x0000000000000758
	w1 = Mem0[x0 + 92:word32]
	w31 = w1 + 0x00000001
	NZCV = cond(w31)
	branch Test(EQ,Z) l0000000000421DE0
	// succ:  l0000000000421D84 l0000000000421DE0
l0000000000421D84:
	x0 = 0x00000000004DE000
	x2 = 0x00000000004BF000
	x0 = Mem0[x0 + 1640:word64]
	w1 = 0x00000001
	x2 = x2 + 0xFFFFFFFFFFFFF8A8
	__fprintf_chk(x0, x1, x2, Mem0[sp:<unknown>])
	sp = sp + 0xFFFFFFFFFFFFFFF8
	// succ:  l0000000000421D9C
l0000000000421D9C:
	x19 = x21 + 0x0000000000000758
	w0 = Mem0[x19 + 92:word32]
	w31 = w0 + 0x00000001
	NZCV = cond(w31)
	branch Test(EQ,Z) l00000000004220E4
	// succ:  l0000000000421DAC l00000000004220E4
l0000000000421DAC:
	w1 = Mem0[x19 + 20:word32]
	w3 = Mem0[x19 + 88:word32]
	w0 = w1 + 0x00000002
	NZCV = cond(w0 - w3)
	x0 = Mem0[x19 + 24:word64]
	branch Test(GE,NZV) l00000000004220B8
	// succ:  l0000000000421DC4 l00000000004220B8
l0000000000421DC4:
l0000000000421DE0:
	w3 = Mem0[x0 + 16:word32]
	x0 = Mem0[x0 + 24:word64]
	x19 = 0x00000000004E3000
	x20 = 0x00000000004AB000
	x24 = 0x00000000004DE000
	v50 = Mem0[x0 + (int64) ((int32) w3):byte]
	w0 = (word32) v50
	x19 = x19 + 0x000000000000025C
	x20 = x20 + 0xFFFFFFFFFFFFF8E0
	x24 = x24 + 0x00000000000006A8
	goto l0000000000421A14
	// succ:  l0000000000421A14
l0000000000421E1C:
	Mem0[x1 + 248:word32] = 0x00000000
	v61 = sp + 16
	x19 = Mem0[v61:word64]
	v61 = v61 + 8
	x20 = Mem0[v61:word64]
	v62 = sp + 32
	x21 = Mem0[v62:word64]
	v62 = v62 + 8
	x22 = Mem0[v62:word64]
	v63 = sp + 48
	x23 = Mem0[v63:word64]
	v63 = v63 + 8
	x24 = Mem0[v63:word64]
	v64 = sp + 64
	x25 = Mem0[v64:word64]
	v64 = v64 + 8
	x26 = Mem0[v64:word64]
	v65 = sp + 80
	x27 = Mem0[v65:word64]
	v65 = v65 + 8
	x28 = Mem0[v65:word64]
	x29 = Mem0[sp:word64]
	sp = sp + 8
	x30 = Mem0[sp:word64]
	sp = sp + 128
	return
	// succ:  fn000000000042198C_exit
l0000000000421E5C:
	w0 = Mem0[x2 + 644:word32]
	call termsig_handler (retsize: 0;)
	x1 = 0x00000000004E1000
	w0 = Mem0[x1 + 632:word32]
	branch w0 == 0x00000000 l00000000004219C4
	// succ:  l0000000000421E70 l00000000004219C4
l0000000000421E70:
	call throw_to_top_level (retsize: 0;)
	x3 = 0x00000000004E1000
	w0 = Mem0[x3 + 624:word32]
	branch w0 == 0x00000000 l00000000004219D0
	// succ:  l0000000000421E80 l00000000004219D0
l0000000000421E80:
	x1 = 0x0000000000000000
	w0 = 0x00000000
	x2 = x1
	Mem0[x3 + 624:word32] = w0
	call get_new_window_size (retsize: 0;)
	goto l00000000004219D0
	// succ:  l00000000004219D0
l0000000000421E98:
	call throw_to_top_level (retsize: 0;)
	goto l0000000000421CA4
	// succ:  l0000000000421CA4
l0000000000421EA0:
	x0 = x21 + 0x0000000000000758
	w1 = Mem0[x0 + 48:word32]
	w1 = w1 + 0x00000001
	Mem0[x0 + 48:word32] = w1
	goto l0000000000421BD0
	// succ:  l0000000000421BD0
l0000000000421EB4:
	w0 = Mem0[x24:word32]
	call termsig_handler (retsize: 0;)
	goto l0000000000421C9C
	// succ:  l0000000000421C9C
l0000000000421EC0:
	w4 = w27 - w0
	w4 = w4 + w20
	w0 = w0 + 0x00000100
	w4 = w4 & 0xFFFFFF00
	w4 = w0 + w4
	x2 = Mem0[x29 + 96:word64]
	x0 = Mem0[x22 + 24:word64]
l0000000000421EFC:
	w0 = Mem0[x23 + 664:word32]
	w31 = w0 - 0x00000002
	NZCV = cond(w31)
	branch Test(EQ,Z) l0000000000421FA4
	// succ:  l0000000000421F08 l0000000000421FA4
l0000000000421F08:
	branch w26 != 0x00000000 l0000000000421F18
	// succ:  l0000000000421F0C l0000000000421F18
l0000000000421F0C:
	x0 = x21 + 0x0000000000000758
	w2 = 0xFFFFFFFF
	Mem0[x0 + 92:word32] = w2
	// succ:  l0000000000421F18
l0000000000421F18:
	x19 = x21 + 0x0000000000000758
	Mem0[x1 + (int64) ((int32) w26):byte] = 0x00
	Mem0[x19 + 16:word32] = 0x00000000
	Mem0[x19 + 20:word32] = w26
	call fn000000000041FE90 (retsize: 0;)
	x1 = 0x00000000004D7000
	w0 = Mem0[x1 + 388:word32]
	x3 = Mem0[x19 + 24:word64]
	branch w0 != 0x00000000 l0000000000421D0C
	// succ:  l0000000000421F3C l0000000000421D0C
l0000000000421F3C:
	branch x3 != 0x0000000000000000 l0000000000421D60
	// succ:  l0000000000421F40 l0000000000421D60
l0000000000421F40:
	x2 = Mem0[x29 + 104:word64]
	x0 = x21 + 0x0000000000000758
	w1 = Mem0[x2:word32]
	x2 = 0x00000000004E3000
	x2 = x2 + 0x0000000000000288
	Mem0[x0 + 88:word32] = 0x00000000
	Mem0[x0 + 240:word64] = x2
	branch w1 == 0x00000000 l0000000000421BF8
	// succ:  l0000000000421F60 l0000000000421BF8
l0000000000421F60:
	w0 = Mem0[x23 + 664:word32]
	w0 = w0 - 0x00000001
	w31 = w0 - 0x00000001
	NZCV = cond(w31)
	branch Test(UGT,ZC) l0000000000421BF8
	// succ:  l0000000000421F70 l0000000000421BF8
l0000000000421F70:
	call fn0000000000421860 (retsize: 0;)
	goto l0000000000421BF8
	// succ:  l0000000000421BF8
l0000000000421F78:
	call fn000000000041FADC (retsize: 0;)
	w0 = Mem0[x23 + 664:word32]
	// succ:  l0000000000421F80
l0000000000421F80:
	w31 = w0 - 0x00000002
	NZCV = cond(w31)
	branch Test(NE,Z) l0000000000421C64
	// succ:  l0000000000421F88 l0000000000421C64
l0000000000421F88:
	x0 = 0x00000000004DE000
	x0 = Mem0[x0 + 1664:word64]
	call clearerr (retsize: 0;)
	goto l0000000000421C64
	// succ:  l0000000000421C64
l0000000000421F98:
	call notify_and_cleanup (retsize: 0;)
	// succ:  l0000000000421F9C
l0000000000421F9C:
	w0 = Mem0[x23 + 664:word32]
	goto l0000000000421C40
	// succ:  l0000000000421C40
l0000000000421FA4:
	x0 = 0x00000000004DE000
	x0 = Mem0[x0 + 1664:word64]
	Mem0[x29 + 120:word64] = x1
	call clearerr (retsize: 0;)
	x1 = Mem0[x29 + 120:word64]
	goto l0000000000421F08
	// succ:  l0000000000421F08
l0000000000421FBC:
	call throw_to_top_level (retsize: 0;)
	goto l0000000000421C10
	// succ:  l0000000000421C10
l0000000000421FC4:
	w0 = Mem0[x2 + 644:word32]
	call termsig_handler (retsize: 0;)
	goto l0000000000421C04
	// succ:  l0000000000421C04
l0000000000421FD0:
	w0 = Mem0[x19 + 208:word32]
	x22 = 0x00000000004E3000
	w24 = Mem0[x22 + 3436:word32]
	branch w0 == 0x00000000 l0000000000421FF4
	// succ:  l0000000000421FE0 l0000000000421FF4
l0000000000421FE0:
	x1 = Mem0[x19 + 200:word64]
	x0 = x1 + (int64) ((int32) w0)
	v55 = Mem0[x0 + -1:byte]
	w0 = (word32) v55
	w31 = w0 - 0x00000027
	NZCV = cond(w31)
	branch Test(EQ,Z) l0000000000422098
	// succ:  l0000000000421FF4 l0000000000422098
l0000000000421FF4:
	w1 = 0x00000001
	x0 = x3
	w2 = w1
	call pre_process_line (retsize: 0;)
	x20 = x21 + 0x0000000000000758
	x19 = x0
	x0 = Mem0[x20 + 24:word64]
	Mem0[x22 + 3436:word32] = w24
	x31 = x19 - x0
	NZCV = cond(x31)
	branch Test(EQ,Z) l0000000000422078
	// succ:  l000000000042201C l0000000000422078
l000000000042201C:
	x1 = Mem0[x29 + 96:word64]
	w2 = 0x000008F5
	call sh_xfree (retsize: 0;)
	Mem0[x20 + 24:word64] = x19
	branch x19 == 0x0000000000000000 l000000000042205C
	// succ:  l0000000000422030 l000000000042205C
l0000000000422030:
	x0 = x19
	strlen(x0)
	sp = sp + 0xFFFFFFFFFFFFFFF8
	Mem0[x20 + 20:word32] = w0
	w1 = w0
	branch w0 == 0x00000000 l0000000000422060
	// succ:  l0000000000422044 l0000000000422060
l0000000000422044:
	x19 = x21 + 0x0000000000000758
	Mem0[x19 + 88:word32] = w1
	call fn000000000041FE90 (retsize: 0;)
	x3 = Mem0[x19 + 24:word64]
	branch x3 == 0x0000000000000000 l0000000000421F40
	// succ:  l0000000000422058 l0000000000421F40
l0000000000422058:
	goto l0000000000421D60
	// succ:  l0000000000421D60
l000000000042205C:
	Mem0[x20 + 20:word32] = w19
	// succ:  l0000000000422060
l0000000000422060:
	x2 = Mem0[x29 + 112:word64]
	w1 = 0x00000000
	w0 = Mem0[x2:word32]
	w0 = w0 - 0x00000001
	Mem0[x2:word32] = w0
	goto l0000000000422044
	// succ:  l0000000000422044
l0000000000422078:
	x3 = x19
	branch x3 == 0x0000000000000000 l0000000000421F40
	// succ:  l0000000000422080 l0000000000421F40
l0000000000422080:
	goto l0000000000421D60
	// succ:  l0000000000421D60
l0000000000422084:
	w0 = Mem0[x21 + 16:word32]
	NZCV = cond(w0 - w31)
	w0 = 0x0000000A
l0000000000422098:
	w0 = 0x00000001
	Mem0[x22 + 3436:word32] = w0
	goto l0000000000421FF4
	// succ:  l0000000000421FF4
l00000000004220A4:
	x0 = x3
	call maybe_add_history (retsize: 0;)
	x3 = Mem0[x19 + 24:word64]
	branch x3 == 0x0000000000000000 l0000000000421F40
	// succ:  l00000000004220B4 l0000000000421F40
l00000000004220B4:
	goto l0000000000421D60
	// succ:  l0000000000421D60
l00000000004220B8:
	w1 = w3 + 0x00000003
	x2 = 0x00000000004AB000
	w4 = w3 + 0x00000002
l00000000004220E4:
	w3 = Mem0[x19 + 16:word32]
	x0 = Mem0[x19 + 24:word64]
	v53 = Mem0[x0 + (int64) ((int32) w3):byte]
	w0 = (word32) v53
	goto l00000000004219FC
	// succ:  l00000000004219FC
l00000000004220F4:
	x0 = x3
	call maybe_add_history (retsize: 0;)
	x0 = x21 + 0x0000000000000758
	x3 = Mem0[x0 + 24:word64]
	branch x3 == 0x0000000000000000 l0000000000421F40
	// succ:  l0000000000422108 l0000000000421F40
l0000000000422108:
	goto l0000000000421D60
	// succ:  l0000000000421D60
fn000000000042198C_exit:


// read_secondary_line
// Return size: 0
void read_secondary_line()
read_secondary_line_entry:
	// succ:  l000000000042210C
l000000000042210C:
	sp = fp
	sp = sp + -112
	Mem0[sp:word64] = x29
	sp = sp + 8
	Mem0[sp:word64] = x30
	x29 = x31 + 0x0000000000000000
	v8 = sp + 64
	Mem0[v8:word64] = x25
	v8 = v8 + 8
	Mem0[v8:word64] = x26
	v11 = sp + 80
	Mem0[v11:word64] = x27
	v11 = v11 + 8
	Mem0[v11:word64] = x28
	x25 = 0x00000000004DE000
	x28 = 0x00000000004DE000
	x3 = 0x00000000004E3000
	v15 = sp + 48
	Mem0[v15:word64] = x23
	v15 = v15 + 8
	Mem0[v15:word64] = x24
	v18 = sp + 16
	Mem0[v18:word64] = x19
	v18 = v18 + 8
	Mem0[v18:word64] = x20
	v21 = sp + 32
	Mem0[v21:word64] = x21
	v21 = v21 + 8
	Mem0[v21:word64] = x22
	x2 = x25 + 0x0000000000000758
	x3 = x3 + 0x0000000000000270
	w1 = Mem0[x28 + 1704:word32]
	Mem0[x2 + 240:word64] = x3
	Mem0[x29 + 96:word32] = w0
	x23 = 0x00000000004E3000
	branch w1 == 0x00000000 l0000000000422160
	// succ:  l0000000000422150 l0000000000422160
l0000000000422150:
	w0 = Mem0[x23 + 664:word32]
	w0 = w0 - 0x00000001
	w31 = w0 - 0x00000001
	NZCV = cond(w31)
	branch Test(ULE,ZC) l00000000004223BC
	// succ:  l0000000000422160 l00000000004223BC
l0000000000422160:
	x0 = 0x00000000004DE000
	w0 = Mem0[x0 + 1720:word32]
	branch w0 == 0x00000000 l0000000000422174
	// succ:  l000000000042216C l0000000000422174
l000000000042216C:
	w0 = Mem0[x28 + 1704:word32]
	branch w0 != 0x00000000 l000000000042236C
	// succ:  l0000000000422174 l000000000042236C
l0000000000422174:
	w26 = 0x00000000
	x22 = 0x00000000004E1000
	x24 = 0x00000000004E1000
	x27 = 0x00000000004AB000
	w20 = w26
	x22 = x22 + 0x0000000000000284
	x24 = x24 + 0x0000000000000278
	x28 = x28 + 0x00000000000006A8
	x27 = x27 + 0xFFFFFFFFFFFFF8E0
	// succ:  l0000000000422198
l0000000000422198:
	w1 = Mem0[x22:word32]
	branch w1 != 0x00000000 l0000000000422258
	// succ:  l00000000004221A0 l0000000000422258
l00000000004221A0:
	w1 = Mem0[x24:word32]
	branch w1 != 0x00000000 l0000000000422268
	// succ:  l00000000004221A8 l0000000000422268
l00000000004221A8:
	x1 = x23 + 0x0000000000000298
	x1 = Mem0[x1 + 24:word64]
	call x1 (retsize: 0;)
	w19 = w0
	branch w0 == 0x00000000 l0000000000422198
	// succ:  l00000000004221BC l0000000000422198
l00000000004221BC:
	w31 = w0 + 0x00000001
	NZCV = cond(w31)
	branch Test(EQ,Z) l0000000000422290
	// succ:  l00000000004221C4 l0000000000422290
l00000000004221C4:
	x21 = x25 + 0x0000000000000758
	w1 = Mem0[x21 + 252:word32]
	w3 = w20 + 0x00000002
	NZCV = cond(w3 - w1)
	branch Test(LT,NV) l0000000000422208
	// succ:  l00000000004221D8 l0000000000422208
l00000000004221D8:
	w4 = w20 - w1
	w4 = w4 + 0x00000002
	w1 = w1 + 0x00000080
	w4 = w4 & 0xFFFFFF80
	w4 = w1 + w4
	x0 = Mem0[x21 + 256:word64]
l0000000000422208:
	branch w26 != 0x00000000 l0000000000422270
	// succ:  l000000000042220C l0000000000422270
l000000000042220C:
	w31 = w19 - 0x0000005C
	NZCV = cond(w31)
	branch Test(NE,Z) l0000000000422270
	// succ:  l0000000000422214 l0000000000422270
l0000000000422214:
	w0 = Mem0[x29 + 96:word32]
	branch w0 == 0x00000000 l0000000000422270
	// succ:  l000000000042221C l0000000000422270
l000000000042221C:
	w0 = Mem0[x22:word32]
	branch w0 != 0x00000000 l00000000004222DC
	// succ:  l0000000000422224 l00000000004222DC
l0000000000422224:
	w0 = Mem0[x24:word32]
	branch w0 != 0x00000000 l00000000004222D4
	// succ:  l000000000042222C l00000000004222D4
l000000000042222C:
	x19 = x23 + 0x0000000000000298
	x0 = Mem0[x19 + 24:word64]
	call x0 (retsize: 0;)
	w31 = w0 - 0x0000000A
	NZCV = cond(w31)
	branch Test(NE,Z) l00000000004222B0
	// succ:  l0000000000422240 l00000000004222B0
l0000000000422240:
	x0 = x25 + 0x0000000000000758
	w1 = Mem0[x0 + 48:word32]
	w1 = w1 + 0x00000001
	Mem0[x0 + 48:word32] = w1
	w1 = Mem0[x22:word32]
	branch w1 == 0x00000000 l00000000004221A0
	// succ:  l0000000000422258 l00000000004221A0
l0000000000422258:
	w0 = Mem0[x22:word32]
	call termsig_handler (retsize: 0;)
	w1 = Mem0[x24:word32]
	branch w1 == 0x00000000 l00000000004221A8
	// succ:  l0000000000422268 l00000000004221A8
l0000000000422268:
	call throw_to_top_level (retsize: 0;)
	goto l00000000004221A8
	// succ:  l00000000004221A8
l0000000000422270:
	x0 = x25 + 0x0000000000000758
	x0 = Mem0[x0 + 256:word64]
	w31 = w19 - 0x0000000A
	NZCV = cond(w31)
	Mem0[x0 + (int64) ((int32) w20):byte] = (byte) w19
	w20 = w20 + 0x00000001
	branch Test(EQ,Z) l00000000004222E8
	// succ:  l0000000000422288 l00000000004222E8
l0000000000422288:
	w26 = 0x00000000
	goto l0000000000422198
	// succ:  l0000000000422198
l0000000000422290:
	w0 = Mem0[x28:word32]
	branch w0 == 0x00000000 l00000000004222A4
	// succ:  l0000000000422298 l00000000004222A4
l0000000000422298:
	w0 = Mem0[x23 + 664:word32]
	w31 = w0 - 0x00000002
	NZCV = cond(w31)
	branch Test(EQ,Z) l0000000000422338
	// succ:  l00000000004222A4 l0000000000422338
l00000000004222A4:
	branch w20 == 0x00000000 l0000000000422348
	// succ:  l00000000004222A8 l0000000000422348
l00000000004222A8:
	w19 = 0x0000000A
	goto l00000000004221C4
	// succ:  l00000000004221C4
l00000000004222B0:
	x1 = Mem0[x19 + 32:word64]
	w26 = 0x00000001
	call x1 (retsize: 0;)
	x0 = x25 + 0x0000000000000758
	x0 = Mem0[x0 + 256:word64]
	w1 = 0x0000005C
	Mem0[x0 + (int64) ((int32) w20):byte] = (byte) w1
	w20 = w20 + w26
	goto l0000000000422198
	// succ:  l0000000000422198
l00000000004222D4:
	call throw_to_top_level (retsize: 0;)
	goto l000000000042222C
	// succ:  l000000000042222C
l00000000004222DC:
	w0 = Mem0[x22:word32]
	call termsig_handler (retsize: 0;)
	goto l0000000000422224
	// succ:  l0000000000422224
l00000000004222E8:
	x25 = x25 + 0x0000000000000758
	x1 = Mem0[x25 + 256:word64]
	x19 = 0x0000000000000000
	Mem0[x1 + (int64) ((int32) w20):byte] = 0x00
	branch x1 == 0x0000000000000000 l0000000000422318
	// succ:  l00000000004222FC l0000000000422318
l00000000004222FC:
	x0 = 0x00000000004D7000
	w0 = Mem0[x0 + 388:word32]
	x19 = x1
	branch w0 == 0x00000000 l0000000000422318
	// succ:  l000000000042230C l0000000000422318
l000000000042230C:
	x0 = 0x00000000004E3000
	w0 = Mem0[x0 + 604:word32]
	branch (w0 & 0x00000000) == 0x00000000 l0000000000422384
	// succ:  l0000000000422318 l0000000000422384
l0000000000422318:
	x0 = x19
	v42 = sp + 32
	x21 = Mem0[v42:word64]
	v42 = v42 + 8
	x22 = Mem0[v42:word64]
	v43 = sp + 16
	x19 = Mem0[v43:word64]
	v43 = v43 + 8
	x20 = Mem0[v43:word64]
	v44 = sp + 48
	x23 = Mem0[v44:word64]
	v44 = v44 + 8
	x24 = Mem0[v44:word64]
	v45 = sp + 64
	x25 = Mem0[v45:word64]
	v45 = v45 + 8
	x26 = Mem0[v45:word64]
	v46 = sp + 80
	x27 = Mem0[v46:word64]
	v46 = v46 + 8
	x28 = Mem0[v46:word64]
	x29 = Mem0[sp:word64]
	sp = sp + 8
	x30 = Mem0[sp:word64]
	sp = sp + 112
	return
	// succ:  read_secondary_line_exit
l0000000000422338:
	x0 = 0x00000000004DE000
	x0 = Mem0[x0 + 1664:word64]
	call clearerr (retsize: 0;)
	branch w20 != 0x00000000 l00000000004222A8
	// succ:  l0000000000422348 l00000000004222A8
l0000000000422348:
	x19 = 0x0000000000000000
	x0 = x19
	v37 = sp + 32
	x21 = Mem0[v37:word64]
	v37 = v37 + 8
	x22 = Mem0[v37:word64]
	v38 = sp + 16
	x19 = Mem0[v38:word64]
	v38 = v38 + 8
	x20 = Mem0[v38:word64]
	v39 = sp + 48
	x23 = Mem0[v39:word64]
	v39 = v39 + 8
	x24 = Mem0[v39:word64]
	v40 = sp + 64
	x25 = Mem0[v40:word64]
	v40 = v40 + 8
	x26 = Mem0[v40:word64]
	v41 = sp + 80
	x27 = Mem0[v41:word64]
	v41 = v41 + 8
	x28 = Mem0[v41:word64]
	x29 = Mem0[sp:word64]
	sp = sp + 8
	x30 = Mem0[sp:word64]
	sp = sp + 112
	return
	// succ:  read_secondary_line_exit
l000000000042236C:
	w0 = Mem0[x23 + 664:word32]
	w0 = w0 - 0x00000001
	w31 = w0 - 0x00000001
	NZCV = cond(w31)
	branch Test(UGT,ZC) l0000000000422174
	// succ:  l000000000042237C l0000000000422174
l000000000042237C:
	call fn000000000041FADC (retsize: 0;)
	goto l0000000000422174
	// succ:  l0000000000422174
l0000000000422384:
	x1 = 0x00000000004E3000
	w2 = Mem0[x1 + 612:word32]
	x0 = x19
	w2 = w2 + 0x00000001
	Mem0[x1 + 612:word32] = w2
	call maybe_add_history (retsize: 0;)
	x0 = x19
	v48 = sp + 32
	x21 = Mem0[v48:word64]
	v48 = v48 + 8
	x22 = Mem0[v48:word64]
	v49 = sp + 16
	x19 = Mem0[v49:word64]
	v49 = v49 + 8
	x20 = Mem0[v49:word64]
	v50 = sp + 48
	x23 = Mem0[v50:word64]
	v50 = v50 + 8
	x24 = Mem0[v50:word64]
	v51 = sp + 64
	x25 = Mem0[v51:word64]
	v51 = v51 + 8
	x26 = Mem0[v51:word64]
	v52 = sp + 80
	x27 = Mem0[v52:word64]
	v52 = v52 + 8
	x28 = Mem0[v52:word64]
	x29 = Mem0[sp:word64]
	sp = sp + 8
	x30 = Mem0[sp:word64]
	sp = sp + 112
	return
	// succ:  read_secondary_line_exit
l00000000004223BC:
	call fn0000000000421860 (retsize: 0;)
	goto l0000000000422160
	// succ:  l0000000000422160
read_secondary_line_exit:


// fn00000000004223C4
// Return size: 0
void fn00000000004223C4()
fn00000000004223C4_entry:
	// succ:  l00000000004223C4
l00000000004223C4:
	sp = fp
	sp = sp + -208
	Mem0[sp:word64] = x29
	sp = sp + 8
	Mem0[sp:word64] = x30
	x29 = x31 + 0x0000000000000000
	v8 = sp + 16
	Mem0[v8:word64] = x19
	v8 = v8 + 8
	Mem0[v8:word64] = x20
	w19 = w0
	w0 = 0x00000000
	Mem0[x29 + 160:word64] = x1
	v14 = sp + 32
	Mem0[v14:word64] = x21
	v14 = v14 + 8
	Mem0[v14:word64] = x22
	v17 = sp + 48
	Mem0[v17:word64] = x23
	v17 = v17 + 8
	Mem0[v17:word64] = x24
	v20 = sp + 64
	Mem0[v20:word64] = x25
	v20 = v20 + 8
	Mem0[v20:word64] = x26
	v23 = sp + 80
	Mem0[v23:word64] = x27
	v23 = v23 + 8
	Mem0[v23:word64] = x28
	call fn000000000042198C (retsize: 0;)
	w1 = w0
	x0 = 0x00000000004DE000
	x2 = x0 + 0x0000000000000758
	x3 = Mem0[x2 + 24:word64]
	branch x3 == 0x0000000000000000 l000000000042240C
	// succ:  l0000000000422404 l000000000042240C
l0000000000422404:
	w4 = Mem0[x2 + 16:word32]
	branch w4 != 0x00000000 l00000000004225C4
	// succ:  l000000000042240C l00000000004225C4
l000000000042240C:
	x2 = 0x00000000004DE000
	x0 = x2 + 0x0000000000000758
	Mem0[x0 + 248:word32] = w1
	// succ:  l0000000000422418
l0000000000422418:
	w31 = w1 - 0x00000028
	NZCV = cond(w31)
	branch Test(EQ,Z) l0000000000423438
	// succ:  l0000000000422420 l0000000000423438
l0000000000422420:
	w31 = w19 - 0x00000027
	NZCV = cond(w31)
	w21 = (word32) Test(NE,Z)
	w31 = w19 - 0x00000022
	NZCV = cond(w31)
	branch Test(NE,Z) l00000000004225D4
	// succ:  l0000000000422430 l00000000004225D4
l0000000000422430:
	w25 = 0x00000010
	// succ:  l0000000000422434
l0000000000422434:
	x3 = 0x00000000004AB000
	x1 = x3 + 0xFFFFFFFFFFFFF8E0
	w2 = 0x00000D63
	x0 = 0x0000000000000040
	call sh_xmalloc (retsize: 0;)
	x1 = 0x00000000004DE000
	x27 = x0
	x0 = x1 + 0x0000000000000758
	x23 = x0
	w0 = Mem0[x0 + 48:word32]
	Mem0[x29 + 128:word32] = 0x00000000
	Mem0[x29 + 176:word32] = w0
	x0 = 0x00000000004DE000
	x0 = x0 + 0x00000000000006A8
	w2 = Mem0[x29 + 128:word32]
	Mem0[x29 + 136:word64] = x0
	x0 = 0x00000000004D7000
	x0 = x0 + 0x00000000000005C0
	x3 = x23 + 0x0000000000000108
	w19 = 0xFFFFFFFF
	Mem0[x29 + 144:word32] = w2
	w20 = 0x00000040
	w22 = 0x00000001
	x26 = x2
	Mem0[x29 + 112:word64] = 0x0000000000000000
	Mem0[x29 + 120:word64] = x0
	Mem0[x29 + 168:word64] = x3
	// succ:  l00000000004224A0
l00000000004224A0:
	branch w21 == 0x00000000 l0000000000422628
	// succ:  l00000000004224A4 l0000000000422628
l00000000004224A4:
	w31 = w25 & 0x0000000C
	NZ = cond(w31)
	C = false
	V = false
	w0 = (word32) Test(EQ,Z)
	call fn000000000042198C (retsize: 0;)
	w31 = w0 + 0x00000001
	NZCV = cond(w31)
	w24 = w0
	branch Test(EQ,Z) l000000000042263C
	// succ:  l00000000004224BC l000000000042263C
l00000000004224BC:
	w31 = w0 - 0x0000000A
	NZCV = cond(w31)
	branch Test(EQ,Z) l00000000004226C0
	// succ:  l00000000004224C4 l00000000004226C0
l00000000004224C4:
	w28 = w25 & 0x00000080
	// succ:  l00000000004224C8
l00000000004224C8:
	branch w28 == 0x00000000 l0000000000422518
	// succ:  l00000000004224CC l0000000000422518
l00000000004224CC:
	w31 = w24 - 0x00000029
	NZCV = cond(w31)
	branch Test(NE,Z) l0000000000422518
	// succ:  l00000000004224D4 l0000000000422518
l00000000004224D4:
	w31 = w22 - 0x00000001
	NZCV = cond(w31)
	branch Test(NE,Z) l0000000000422518
	// succ:  l00000000004224DC l0000000000422518
l00000000004224DC:
	branch (w25 & 0x00000200) == 0x00000000 l0000000000423058
	// succ:  l00000000004224E0 l0000000000423058
l00000000004224E0:
	v42 = Mem0[x27 + (int64) ((int32) w19):byte]
	w0 = (word32) v42
	w1 = w19 + 0x00000001
	w31 = w0 - 0x00000009
	NZCV = cond(w31)
	x3 = x27 + (int64) ((int32) w1)
	branch Test(EQ,Z) l00000000004224FC
	// succ:  l00000000004224F4 l00000000004224FC
l00000000004224F4:
	goto l0000000000423058
	// succ:  l0000000000423058
l00000000004224F8:
	w1 = w1 + 0x00000001
	// succ:  l00000000004224FC
l00000000004224FC:
	v43 = Mem0[x3:byte]
	w4 = (word32) v43
	x3 = x3 + 1
	w31 = w4 - 0x00000009
	NZCV = cond(w31)
	branch Test(EQ,Z) l00000000004224F8
	// succ:  l0000000000422508 l00000000004224F8
l0000000000422508:
	w2 = Mem0[x29 + 132:word32]
	w0 = w26 - w1
	NZCV = cond(w2 - w0)
	branch Test(EQ,Z) l0000000000422EA4
	// succ:  l0000000000422518 l0000000000422EA4
l0000000000422518:
	w0 = 0x00000084
	NZ = cond(w25 & w0)
	C = false
	V = false
	branch Test(EQ,Z) l0000000000422600
	// succ:  l0000000000422524 l0000000000422600
l0000000000422524:
	w28 = w26 + 0x00000001
	NZCV = cond(w28 - w20)
	branch Test(LT,NV) l000000000042255C
	// succ:  l0000000000422530 l000000000042255C
l0000000000422530:
	w0 = w28 - w20
	w0 = w0 & 0xFFFFFFC0
	w20 = w20 + 0x00000040
	w20 = w20 + w0
	x3 = 0x00000000004AB000
	x0 = x27
	x2 = x3 + 0xFFFFFFFFFFFFF8E0
l000000000042255C:
	Mem0[x27 + (int64) ((int32) w26):byte] = (byte) w24
	w26 = w28
	branch (w25 & 0x00000004) == 0x00000000 l0000000000422574
	// succ:  l0000000000422568 l0000000000422574
l0000000000422568:
	w0 = w25 & 0xFFFFFFFB
	w31 = w24 - 0x0000000A
	NZCV = cond(w31)
l0000000000422574:
	branch w22 != 0x00000000 l00000000004224A0
	// succ:  l0000000000422578 l00000000004224A0
l0000000000422578:
	x3 = Mem0[x29 + 112:word64]
	branch x3 == 0x0000000000000000 l0000000000422594
	// succ:  l0000000000422580 l0000000000422594
l0000000000422580:
	x2 = 0x00000000004AB000
	x1 = x2 + 0xFFFFFFFFFFFFF8E0
	x0 = x3
	w2 = 0x00000EF6
	call sh_xfree (retsize: 0;)
	// succ:  l0000000000422594
l0000000000422594:
	x3 = Mem0[x29 + 160:word64]
	Mem0[x27 + (int64) ((int32) w26):byte] = 0x00
	branch x3 == 0x0000000000000000 l00000000004234A0
	// succ:  l00000000004225A0 l00000000004234A0
l00000000004225A0:
	Mem0[x3:word32] = w26
	x0 = x27
	// succ:  l00000000004225A8
l00000000004225A8:
	v46 = sp + 16
	x19 = Mem0[v46:word64]
	v46 = v46 + 8
	x20 = Mem0[v46:word64]
	v47 = sp + 32
	x21 = Mem0[v47:word64]
	v47 = v47 + 8
	x22 = Mem0[v47:word64]
	v48 = sp + 48
	x23 = Mem0[v48:word64]
	v48 = v48 + 8
	x24 = Mem0[v48:word64]
	v49 = sp + 64
	x25 = Mem0[v49:word64]
	v49 = v49 + 8
	x26 = Mem0[v49:word64]
	v50 = sp + 80
	x27 = Mem0[v50:word64]
	v50 = v50 + 8
	x28 = Mem0[v50:word64]
	x29 = Mem0[sp:word64]
	sp = sp + 8
	x30 = Mem0[sp:word64]
	sp = sp + 208
	return
	// succ:  fn00000000004223C4_exit
l00000000004225C4:
	w4 = w4 - 0x00000001
	Mem0[x2 + 16:word32] = w4
	Mem0[x3 + (int64) ((int32) w4):byte] = (byte) w1
	goto l0000000000422418
	// succ:  l0000000000422418
l00000000004225D4:
	branch w21 == 0x00000000 l0000000000422430
	// succ:  l00000000004225D8 l0000000000422430
l00000000004225D8:
	x0 = 0x00000000004DE000
	w0 = Mem0[x0 + 1704:word32]
	w25 = 0x00000032
	branch w0 == 0x00000000 l0000000000422434
	// succ:  l00000000004225E8 l0000000000422434
l00000000004225E8:
	x0 = 0x00000000004D6000
	w0 = Mem0[x0 + 3288:word32]
	NZCV = cond(w0 - w31)
	w0 = 0x00000030
l0000000000422600:
	branch (w25 & 0x00000008) == 0x00000000 l0000000000422704
	// succ:  l0000000000422604 l0000000000422704
l0000000000422604:
	w31 = w24 - 0x0000000A
	NZCV = cond(w31)
	w25 = w25 & 0xFFFFFFF7
	branch Test(NE,Z) l0000000000422B8C
	// succ:  l0000000000422610 l0000000000422B8C
l0000000000422610:
	branch w21 == 0x00000000 l0000000000422B8C
	// succ:  l0000000000422614 l0000000000422B8C
l0000000000422614:
	NZCV = cond(w26 - w31)
	w0 = (word32) Test(GT,NZV)
	w26 = w26 - w0
	branch w22 != 0x00000000 l00000000004224A0
	// succ:  l0000000000422624 l00000000004224A0
l0000000000422624:
	goto l0000000000422578
	// succ:  l0000000000422578
l0000000000422628:
	w0 = w21
	call fn000000000042198C (retsize: 0;)
	w31 = w0 + 0x00000001
	NZCV = cond(w31)
	w24 = w0
	branch Test(NE,Z) l00000000004224BC
	// succ:  l000000000042263C l00000000004224BC
l000000000042263C:
	x0 = 0x00000000004AB000
	x24 = x0 + 0xFFFFFFFFFFFFF8E0
	x1 = x24
	x0 = x27
	w2 = 0x00000D74
	call sh_xfree (retsize: 0;)
	x1 = Mem0[x29 + 112:word64]
	branch x1 == 0x0000000000000000 l000000000042266C
	// succ:  l000000000042265C l000000000042266C
l000000000042265C:
	x0 = x1
	w2 = 0x00000D75
	x1 = x24
	call sh_xfree (retsize: 0;)
	// succ:  l000000000042266C
l000000000042266C:
	x1 = 0x00000000004AB000
	w2 = 0x00000005
	x1 = x1 + 0xFFFFFFFFFFFFFA18
	x0 = 0x0000000000000000
	dcgettext(x0, x1, x2)
	sp = sp + 0xFFFFFFFFFFFFFFF8
	x1 = x0
	w0 = Mem0[x29 + 176:word32]
	w2 = 0x00000029
	call parser_error (retsize: 0;)
	x2 = 0x00000000004DE000
	x0 = x2 + 0x0000000000000758
	w1 = 0x00000001
	Mem0[x0 + 96:word32] = w1
	v51 = sp + 16
	x19 = Mem0[v51:word64]
	v51 = v51 + 8
	x20 = Mem0[v51:word64]
	x0 = x0 + 0x0000000000000108
	v52 = sp + 32
	x21 = Mem0[v52:word64]
	v52 = v52 + 8
	x22 = Mem0[v52:word64]
	v53 = sp + 48
	x23 = Mem0[v53:word64]
	v53 = v53 + 8
	x24 = Mem0[v53:word64]
	v54 = sp + 64
	x25 = Mem0[v54:word64]
	v54 = v54 + 8
	x26 = Mem0[v54:word64]
	v55 = sp + 80
	x27 = Mem0[v55:word64]
	v55 = v55 + 8
	x28 = Mem0[v55:word64]
	x29 = Mem0[sp:word64]
	sp = sp + 8
	x30 = Mem0[sp:word64]
	sp = sp + 208
	return
	// succ:  fn00000000004223C4_exit
l00000000004226C0:
	branch (w25 & 0x00000100) == 0x00000000 l0000000000422AEC
	// succ:  l00000000004226C4 l0000000000422AEC
l00000000004226C4:
	x0 = Mem0[x29 + 112:word64]
	branch x0 == 0x0000000000000000 l0000000000422AEC
	// succ:  l00000000004226CC l0000000000422AEC
l00000000004226CC:
	w5 = w25 & 0xFFFFFEFF
	w28 = 0x00000080
	w19 = w26 + 0x00000001
	w25 = w5 | w28
	// succ:  l00000000004226DC
l00000000004226DC:
	x1 = Mem0[x29 + 136:word64]
	w0 = Mem0[x1:word32]
	branch w0 == 0x00000000 l00000000004224C8
	// succ:  l00000000004226E8 l00000000004224C8
l00000000004226E8:
	x0 = 0x00000000004E3000
	w0 = Mem0[x0 + 664:word32]
	w0 = w0 - 0x00000001
	w31 = w0 - 0x00000001
	NZCV = cond(w31)
	branch Test(UGT,ZC) l00000000004224C8
	// succ:  l00000000004226FC l00000000004224C8
l00000000004226FC:
	call fn0000000000421860 (retsize: 0;)
	goto l00000000004224C8
	// succ:  l00000000004224C8
l0000000000422704:
	x2 = Mem0[x29 + 120:word64]
	w4 = w24 & 0x000000FF
l0000000000422AEC:
	w28 = w25 & 0x00000080
	branch (w25 & 0x00000080) == 0x00000000 l00000000004226DC
	// succ:  l0000000000422AF4 l00000000004226DC
l0000000000422AF4:
	branch (w25 & 0x00000200) == 0x00000000 l0000000000422B20
	// succ:  l0000000000422AF8 l0000000000422B20
l0000000000422AF8:
	v62 = Mem0[x27 + (int64) ((int32) w19):byte]
	w0 = (word32) v62
	w31 = w0 - 0x00000009
	NZCV = cond(w31)
	branch Test(NE,Z) l0000000000422B20
	// succ:  l0000000000422B04 l0000000000422B20
l0000000000422B04:
	w19 = w19 + 0x00000001
	x0 = x27 + (int64) ((int32) w19)
	goto l0000000000422B14
	// succ:  l0000000000422B14
l0000000000422B10:
	w19 = w19 + 0x00000001
	// succ:  l0000000000422B14
l0000000000422B14:
	v63 = Mem0[x0:byte]
	w1 = (word32) v63
	x0 = x0 + 1
	w31 = w1 - 0x00000009
	NZCV = cond(w31)
	branch Test(EQ,Z) l0000000000422B10
	// succ:  l0000000000422B20 l0000000000422B10
l0000000000422B20:
	w3 = Mem0[x29 + 132:word32]
	branch w3 == 0x00000000 l0000000000422B5C
	// succ:  l0000000000422B28 l0000000000422B5C
l0000000000422B28:
	x0 = Mem0[x29 + 112:word64]
l0000000000422B5C:
	x2 = 0x00000000004AB000
	w19 = 0xFFFFFD7F
	x0 = Mem0[x29 + 112:word64]
	w19 = w25 & w19
	x1 = x2 + 0xFFFFFFFFFFFFF8E0
	w2 = 0x00000D92
	call sh_xfree (retsize: 0;)
	w25 = w19
	w28 = 0x00000000
	Mem0[x29 + 112:word64] = 0x0000000000000000
	w19 = 0xFFFFFFFF
	goto l00000000004226DC
	// succ:  l00000000004226DC
l0000000000422B8C:
	w0 = w26 + 0x00000002
	NZCV = cond(w0 - w20)
	branch Test(LT,NV) l0000000000422BC4
	// succ:  l0000000000422B98 l0000000000422BC4
l0000000000422B98:
	w0 = w0 - w20
	w0 = w0 & 0xFFFFFFC0
	w20 = w20 + 0x00000040
	w20 = w20 + w0
	x3 = 0x00000000004AB000
	x0 = x27
	x2 = x3 + 0xFFFFFFFFFFFFF8E0
l0000000000422BC4:
	w31 = w24 - 0x0000007F
	NZCV = cond(w31)
	branch Test(EQ,Z) l0000000000422BD4
	// succ:  l0000000000422BCC l0000000000422BD4
l0000000000422BCC:
	w31 = w24 - 0x00000001
	NZCV = cond(w31)
	branch Test(NE,Z) l0000000000422BFC
	// succ:  l0000000000422BD4 l0000000000422BFC
l0000000000422BD4:
	w0 = Mem0[x23 + 16:word32]
	w31 = w0 - 0x00000001
	NZCV = cond(w31)
	branch Test(LE,ZCV) l0000000000422BF0
	// succ:  l0000000000422BE0 l0000000000422BF0
l0000000000422BE0:
	x1 = Mem0[x23 + 80:word64]
	x0 = x1 + (int64) ((int32) w0)
	v59 = Mem0[x0 + -1:byte]
	w0 = (word32) v59
	branch w0 == 0x00000000 l0000000000422BFC
	// succ:  l0000000000422BF0 l0000000000422BFC
l0000000000422BF0:
	w0 = 0x00000001
	Mem0[x27 + (int64) ((int32) w26):byte] = (byte) w0
	w26 = w26 + 0x00000001
	// succ:  l0000000000422BFC
l0000000000422BFC:
	Mem0[x27 + (int64) ((int32) w26):byte] = (byte) w24
	w26 = w26 + 0x00000001
	branch w22 != 0x00000000 l00000000004224A0
	// succ:  l0000000000422C08 l00000000004224A0
l0000000000422C08:
	goto l0000000000422578
	// succ:  l0000000000422578
l0000000000422EA4:
	branch w2 == 0x00000000 l0000000000422ED4
	// succ:  l0000000000422EA8 l0000000000422ED4
l0000000000422EA8:
	x0 = Mem0[x29 + 112:word64]
l0000000000422ED4:
	x0 = Mem0[x29 + 112:word64]
	x2 = 0x00000000004AB000
	x1 = x2 + 0xFFFFFFFFFFFFF8E0
	w3 = 0xFFFFFD7F
	w2 = 0x00000DAC
	w25 = w25 & w3
	Mem0[x29 + 112:word64] = 0x0000000000000000
	w19 = 0xFFFFFFFF
	call sh_xfree (retsize: 0;)
	goto l0000000000422518
	// succ:  l0000000000422518
l0000000000423058:
	w1 = w19
	goto l0000000000422508
	// succ:  l0000000000422508
l0000000000423438:
	x3 = Mem0[x29 + 160:word64]
	w0 = w19
	w2 = 0x00000029
	w4 = 0x00000000
	call fn00000000004236D0 (retsize: 0;)
	goto l00000000004225A8
	// succ:  l00000000004225A8
l00000000004234A0:
	x0 = x27
	goto l00000000004225A8
	// succ:  l00000000004225A8
fn00000000004223C4_exit:


// fn00000000004236D0
// Return size: 0
void fn00000000004236D0()
fn00000000004236D0_entry:
	// succ:  l00000000004236D0
l00000000004236D0:
	sp = fp
	sp = sp + -240
	Mem0[sp:word64] = x29
	sp = sp + 8
	Mem0[sp:word64] = x30
	x29 = x31 + 0x0000000000000000
fn00000000004236D0_exit:


// fn00000000004246CC
// Return size: 0
void fn00000000004246CC()
fn00000000004246CC_entry:
	// succ:  l00000000004246CC
l00000000004246CC:
	sp = fp
	sp = sp + -80
	Mem0[sp:word64] = x29
	sp = sp + 8
	Mem0[sp:word64] = x30
	x29 = x31 + 0x0000000000000000
	v8 = sp + 48
	Mem0[v8:word64] = x23
	v8 = v8 + 8
	Mem0[v8:word64] = x24
	x23 = x0
	w0 = 0x00000000
	v13 = sp + 16
	Mem0[v13:word64] = x19
	v13 = v13 + 8
	Mem0[v13:word64] = x20
	w1 = 0x00000028
	w2 = 0x00000029
	x3 = x29 + 0x0000000000000040
	w4 = w0
	x20 = 0x00000000004DE000
	v20 = sp + 32
	Mem0[v20:word64] = x21
	v20 = v20 + 8
	Mem0[v20:word64] = x22
	x20 = x20 + 0x0000000000000758
	call fn00000000004236D0 (retsize: 0;)
	x1 = x20 + 0x0000000000000108
	x31 = x0 - x1
	NZCV = cond(x31)
	x19 = x0
	branch Test(EQ,Z) l000000000042483C
	// succ:  l0000000000424714 l000000000042483C
l0000000000424714:
	w0 = 0x00000000
	call fn000000000042198C (retsize: 0;)
	w31 = w0 - 0x00000029
	NZCV = cond(w31)
	w22 = w0
	branch Test(EQ,Z) l0000000000424744
	// succ:  l0000000000424728 l0000000000424744
l0000000000424728:
	w0 = Mem0[x20 + 16:word32]
	w31 = w0 - 0x00000001
	NZCV = cond(w31)
	branch Test(LE,ZCV) l00000000004247B8
	// succ:  l0000000000424734 l00000000004247B8
l0000000000424734:
	x1 = Mem0[x20 + 80:word64]
	x0 = x1 + (int64) ((int32) w0)
	v27 = Mem0[x0 + -1:byte]
	w0 = (word32) v27
	branch w0 != 0x00000000 l00000000004247B8
	// succ:  l0000000000424744 l00000000004247B8
l0000000000424744:
	w0 = Mem0[x29 + 64:word32]
	x21 = 0x00000000004AB000
	w0 = w0 + 0x00000004
	x1 = x21 + 0xFFFFFFFFFFFFF8E0
	w2 = 0x00000F9B
l00000000004247A4:
	v28 = sp + 16
	x19 = Mem0[v28:word64]
	v28 = v28 + 8
	x20 = Mem0[v28:word64]
	v29 = sp + 32
	x21 = Mem0[v29:word64]
	v29 = v29 + 8
	x22 = Mem0[v29:word64]
	v30 = sp + 48
	x23 = Mem0[v30:word64]
	v30 = v30 + 8
	x24 = Mem0[v30:word64]
	x29 = Mem0[sp:word64]
	sp = sp + 8
	x30 = Mem0[sp:word64]
	sp = sp + 80
	return
	// succ:  fn00000000004246CC_exit
l00000000004247B8:
	w0 = Mem0[x29 + 64:word32]
	x21 = 0x00000000004AB000
	w0 = w0 + 0x00000004
	x1 = x21 + 0xFFFFFFFFFFFFF8E0
	w2 = 0x00000F9B
l000000000042483C:
	w0 = 0xFFFFFFFF
	goto l00000000004247A4
	// succ:  l00000000004247A4
fn00000000004246CC_exit:


// fn0000000000424844
// Return size: 0
void fn0000000000424844()
fn0000000000424844_entry:
	// succ:  l0000000000424844
l0000000000424844:
	sp = fp
	sp = sp + -240
	Mem0[sp:word64] = x29
	sp = sp + 8
	Mem0[sp:word64] = x30
	x29 = x31 + 0x0000000000000000
	v8 = sp + 16
	Mem0[v8:word64] = x19
	v8 = v8 + 8
	Mem0[v8:word64] = x20
	x19 = 0x00000000004DE000
	x20 = x19 + 0x0000000000000758
	v11 = sp + 32
	Mem0[v11:word64] = x21
	v11 = v11 + 8
	Mem0[v11:word64] = x22
	w21 = Mem0[x20 + 232:word32]
	v15 = sp + 48
	Mem0[v15:word64] = x23
	v15 = v15 + 8
	Mem0[v15:word64] = x24
	v18 = sp + 64
	Mem0[v18:word64] = x25
	v18 = v18 + 8
	Mem0[v18:word64] = x26
	v21 = sp + 80
	Mem0[v21:word64] = x27
	v21 = v21 + 8
	Mem0[v21:word64] = x28
	branch w21 == 0x00000000 l00000000004248A4
	// succ:  l0000000000424870 l00000000004248A4
l0000000000424870:
	w0 = w21 - 0x00000119
	w31 = w0 - 0x00000001
	NZCV = cond(w31)
	branch Test(ULE,ZC) l0000000000424D98
	// succ:  l000000000042487C l0000000000424D98
l000000000042487C:
	x19 = x19 + 0x0000000000000758
	Mem0[x19 + 232:word32] = 0x00000000
	// succ:  l0000000000424884
l0000000000424884:
	w0 = w21
	v26 = sp + 16
	x19 = Mem0[v26:word64]
	v26 = v26 + 8
	x20 = Mem0[v26:word64]
	v27 = sp + 32
	x21 = Mem0[v27:word64]
	v27 = v27 + 8
	x22 = Mem0[v27:word64]
	v28 = sp + 48
	x23 = Mem0[v28:word64]
	v28 = v28 + 8
	x24 = Mem0[v28:word64]
	v29 = sp + 64
	x25 = Mem0[v29:word64]
	v29 = v29 + 8
	x26 = Mem0[v29:word64]
	v30 = sp + 80
	x27 = Mem0[v30:word64]
	v30 = v30 + 8
	x28 = Mem0[v30:word64]
	x29 = Mem0[sp:word64]
	sp = sp + 8
	x30 = Mem0[sp:word64]
	sp = sp + 240
	return
	// succ:  fn0000000000424844_exit
l00000000004248A4:
	x25 = 0x00000000004E3000
	w0 = Mem0[x25 + 604:word32]
	w1 = w0 & 0x00000300
	w31 = w1 - 0x00000100
	NZCV = cond(w31)
	branch Test(EQ,Z) l00000000004267F0
	// succ:  l00000000004248B8 l00000000004267F0
l00000000004248B8:
	x0 = 0x00000000004DE000
	x0 = x0 + 0x00000000000006B4
	x24 = 0x00000000004D7000
	Mem0[x29 + 160:word64] = x0
	x0 = 0x00000000004D6000
	x24 = x24 + 0x00000000000005C0
	x0 = x0 + 0x00000000000006A0
	Mem0[x29 + 112:word64] = x24
	Mem0[x29 + 152:word64] = x0
	w0 = 0x00000001
	call fn000000000042198C (retsize: 0;)
	w31 = w0 + 0x00000001
	NZCV = cond(w31)
	w27 = w0
	branch Test(EQ,Z) l0000000000426000
	// succ:  l00000000004248F0 l0000000000426000
l00000000004248F0:
	w0 = w0 & 0x000000FF
	x3 = Mem0[x29 + 112:word64]
l0000000000424D98:
	x0 = Mem0[x20 + 224:word64]
	x1 = 0x00000000004E3000
	Mem0[x1 + 704:word64] = x0
	Mem0[x20 + 224:word64] = 0x0000000000000000
	goto l000000000042487C
	// succ:  l000000000042487C
l0000000000426000:
	x19 = x19 + 0x0000000000000758
	w0 = 0x00000001
	Mem0[x19 + 96:word32] = w0
	w21 = 0x00000130
	goto l0000000000424884
	// succ:  l0000000000424884
l00000000004267F0:
	x1 = 0x00000000004E1000
	w2 = Mem0[x20 + 48:word32]
	w1 = Mem0[x1 + 616:word32]
	w0 = w0 | 0x00000200
	Mem0[x20 + 840:word32] = w2
	Mem0[x20 + 220:word32] = w1
	Mem0[x25 + 604:word32] = w0
	call fn0000000000427614 (retsize: 0;)
	call make_cond_command (retsize: 0;)
	w1 = Mem0[x20 + 844:word32]
	x2 = 0x00000000004E3000
	Mem0[x2 + 704:word64] = x0
	w31 = w1 - 0x00000112
	NZCV = cond(w31)
	branch Test(NE,Z) l0000000000426D0C
	// succ:  l0000000000426828 l0000000000426D0C
l0000000000426828:
	w0 = Mem0[x25 + 604:word32]
	Mem0[x20 + 232:word32] = w1
	w0 = w0 & 0xFFFFFCFF
	Mem0[x25 + 604:word32] = w0
	w21 = 0x0000011F
	goto l0000000000424884
	// succ:  l0000000000424884
l0000000000426D0C:
	w0 = Mem0[x20 + 96:word32]
	w31 = w1 - 0x00000113
	NZCV = cond(w31)
	w21 = 0xFFFFFFFF
	branch w0 == 0x00000000 l0000000000426D60
	// succ:  l0000000000426D1C l0000000000426D60
l0000000000426D1C:
	branch Test(EQ,Z) l0000000000424884
	// succ:  l0000000000426D20 l0000000000424884
l0000000000426D20:
	x1 = 0x00000000004AB000
	w19 = Mem0[x20 + 840:word32]
	x1 = x1 + 0xFFFFFFFFFFFFFAA0
	w2 = 0x00000005
	x0 = 0x0000000000000000
	dcgettext(x0, x1, x2)
	sp = sp + 0xFFFFFFFFFFFFFFF8
	x1 = x0
	w0 = w19
	call parser_error (retsize: 0;)
	goto l0000000000424884
	// succ:  l0000000000424884
l0000000000426D60:
	branch Test(EQ,Z) l0000000000424884
	// succ:  l0000000000426D64 l0000000000424884
l0000000000426D64:
	w0 = w1
	call fn00000000004200A4 (retsize: 0;)
	x19 = x0
	branch x0 == 0x0000000000000000 l0000000000426DBC
	// succ:  l0000000000426D74 l0000000000426DBC
l0000000000426D74:
	x1 = 0x00000000004AB000
	w20 = Mem0[x20 + 840:word32]
	x1 = x1 + 0xFFFFFFFFFFFFFAC8
	w2 = 0x00000005
	x0 = 0x0000000000000000
	dcgettext(x0, x1, x2)
	sp = sp + 0xFFFFFFFFFFFFFFF8
	x1 = x0
	x2 = x19
	w0 = w20
	call parser_error (retsize: 0;)
	x1 = 0x00000000004AB000
	x0 = x19
	x1 = x1 + 0xFFFFFFFFFFFFF8E0
	w2 = 0x00000FC6
	call sh_xfree (retsize: 0;)
	goto l0000000000424884
	// succ:  l0000000000424884
l0000000000426DBC:
	x1 = 0x00000000004AB000
	w19 = Mem0[x20 + 840:word32]
	x1 = x1 + 0xFFFFFFFFFFFFFB08
	w2 = 0x00000005
	dcgettext(x0, x1, x2)
	sp = sp + 0xFFFFFFFFFFFFFFF8
	x1 = x0
	w0 = w19
	call parser_error (retsize: 0;)
	goto l0000000000424884
	// succ:  l0000000000424884
fn0000000000424844_exit:


// fn0000000000426F44
// Return size: 0
void fn0000000000426F44()
fn0000000000426F44_entry:
	// succ:  l0000000000426F44
l0000000000426F44:
	sp = fp
	sp = sp + -48
	Mem0[sp:word64] = x29
	sp = sp + 8
	Mem0[sp:word64] = x30
	x29 = x31 + 0x0000000000000000
	v8 = sp + 16
	Mem0[v8:word64] = x19
	v8 = v8 + 8
	Mem0[v8:word64] = x20
	x19 = 0x00000000004DE000
	x20 = 0x00000000004DE000
	Mem0[sp + 32:word64] = x21
	x19 = x19 + 0x0000000000000758
	x20 = x20 + 0x00000000000006A8
	x21 = 0x00000000004E3000
	// succ:  l0000000000426F68
l0000000000426F68:
	call fn0000000000424844 (retsize: 0;)
	Mem0[x19 + 844:word32] = w0
	w31 = w0 - 0x0000000A
	NZCV = cond(w31)
	branch Test(NE,Z) l0000000000426FA4
	// succ:  l0000000000426F78 l0000000000426FA4
l0000000000426F78:
	w0 = Mem0[x20:word32]
	branch w0 == 0x00000000 l0000000000426F68
	// succ:  l0000000000426F80 l0000000000426F68
l0000000000426F80:
	w0 = Mem0[x21 + 664:word32]
	w0 = w0 - 0x00000001
	w31 = w0 - 0x00000001
	NZCV = cond(w31)
	branch Test(UGT,ZC) l0000000000426F68
	// succ:  l0000000000426F90 l0000000000426F68
l0000000000426F90:
	call fn0000000000421860 (retsize: 0;)
	call fn0000000000424844 (retsize: 0;)
	Mem0[x19 + 844:word32] = w0
	w31 = w0 - 0x0000000A
	NZCV = cond(w31)
	branch Test(EQ,Z) l0000000000426F78
	// succ:  l0000000000426FA4 l0000000000426F78
l0000000000426FA4:
	v15 = sp + 16
	x19 = Mem0[v15:word64]
	v15 = v15 + 8
	x20 = Mem0[v15:word64]
	x21 = Mem0[sp + 32:word64]
	x29 = Mem0[sp:word64]
	sp = sp + 8
	x30 = Mem0[sp:word64]
	sp = sp + 48
	return
	// succ:  fn0000000000426F44_exit
fn0000000000426F44_exit:


// fn0000000000426FB4
// Return size: 0
void fn0000000000426FB4()
fn0000000000426FB4_entry:
	// succ:  l0000000000426FB4
l0000000000426FB4:
	sp = fp
	sp = sp + -64
	Mem0[sp:word64] = x29
	sp = sp + 8
	Mem0[sp:word64] = x30
	x29 = x31 + 0x0000000000000000
	v8 = sp + 16
	Mem0[v8:word64] = x19
	v8 = v8 + 8
	Mem0[v8:word64] = x20
	v11 = sp + 32
	Mem0[v11:word64] = x21
	v11 = v11 + 8
	Mem0[v11:word64] = x22
	Mem0[sp + 48:word64] = x23
	x20 = 0x00000000004DE000
	call fn0000000000426F44 (retsize: 0;)
	x21 = x20 + 0x0000000000000758
	w31 = w0 - 0x00000112
	NZCV = cond(w31)
	w19 = w0
	w22 = Mem0[x21 + 48:word32]
	branch Test(EQ,Z) l0000000000427314
	// succ:  l0000000000426FE4 l0000000000427314
l0000000000426FE4:
	w31 = w0 - 0x00000028
	NZCV = cond(w31)
	branch Test(EQ,Z) l0000000000427130
	// succ:  l0000000000426FEC l0000000000427130
l0000000000426FEC:
	w31 = w0 - 0x00000115
	NZCV = cond(w31)
	branch Test(EQ,Z) l000000000042705C
	// succ:  l0000000000426FF4 l000000000042705C
l0000000000426FF4:
	w31 = w0 - 0x00000119
	NZCV = cond(w31)
	branch Test(EQ,Z) l0000000000427088
	// succ:  l0000000000426FFC l0000000000427088
l0000000000426FFC:
	w31 = w0 - 0x000000FF
	NZCV = cond(w31)
	branch Test(GT,NZV) l0000000000427164
	// succ:  l0000000000427004 l0000000000427164
l0000000000427004:
	x1 = 0x00000000004AB000
	x1 = x1 + 0xFFFFFFFFFFFFFCB8
	w2 = 0x00000005
	x0 = 0x0000000000000000
	dcgettext(x0, x1, x2)
	sp = sp + 0xFFFFFFFFFFFFFFF8
	x1 = x0
	w2 = w19
	w0 = w22
	call parser_error (retsize: 0;)
	// succ:  l0000000000427028
l0000000000427028:
	w0 = 0x00000113
	x20 = x20 + 0x0000000000000758
	Mem0[x20 + 844:word32] = w0
	x0 = 0x0000000000000000
	// succ:  l0000000000427038
l0000000000427038:
	v24 = sp + 16
	x19 = Mem0[v24:word64]
	v24 = v24 + 8
	x20 = Mem0[v24:word64]
	v25 = sp + 32
	x21 = Mem0[v25:word64]
	v25 = v25 + 8
	x22 = Mem0[v25:word64]
	x23 = Mem0[sp + 48:word64]
	x29 = Mem0[sp:word64]
	sp = sp + 8
	x30 = Mem0[sp:word64]
	sp = sp + 64
	return
	// succ:  fn0000000000426FB4_exit
l000000000042704C:
	v44 = Mem0[x0 + 1:byte]
	w0 = (word32) v44
	branch w0 != 0x00000000 l00000000004270A8
	// succ:  l0000000000427054 l00000000004270A8
l0000000000427054:
	x0 = x1
	call dispose_word (retsize: 0;)
	// succ:  l000000000042705C
l000000000042705C:
	call fn0000000000426FB4 (retsize: 0;)
	x1 = x0
	branch x0 == 0x0000000000000000 l0000000000427038
	// succ:  l0000000000427068 l0000000000427038
l0000000000427068:
	w2 = Mem0[x0:word32]
	v32 = sp + 16
	x19 = Mem0[v32:word64]
	v32 = v32 + 8
	x20 = Mem0[v32:word64]
	w2 = w2 | 0x00000004
	Mem0[x1:word32] = w2
	v33 = sp + 32
	x21 = Mem0[v33:word64]
	v33 = v33 + 8
	x22 = Mem0[v33:word64]
	x23 = Mem0[sp + 48:word64]
	x29 = Mem0[sp:word64]
	sp = sp + 8
	x30 = Mem0[sp:word64]
	sp = sp + 64
	return
	// succ:  fn0000000000426FB4_exit
l0000000000427088:
	x22 = 0x00000000004E3000
	x1 = Mem0[x22 + 704:word64]
	x0 = Mem0[x1:word64]
	v26 = Mem0[x0:byte]
	w2 = (word32) v26
	w31 = w2 - 0x00000021
	NZCV = cond(w31)
	branch Test(EQ,Z) l000000000042704C
	// succ:  l00000000004270A0 l000000000042704C
l00000000004270A0:
	w31 = w2 - 0x0000002D
	NZCV = cond(w31)
	branch Test(EQ,Z) l00000000004272FC
	// succ:  l00000000004270A8 l00000000004272FC
l00000000004270A8:
	x2 = 0x0000000000000000
	x3 = x2
	w0 = 0x00000005
	call make_cond_node (retsize: 0;)
	x21 = x0
	call fn0000000000424844 (retsize: 0;)
	w31 = w0 - 0x00000119
	NZCV = cond(w31)
	w19 = w0
	branch Test(EQ,Z) l0000000000427298
	// succ:  l00000000004270CC l0000000000427298
l00000000004270CC:
	w1 = w19 & 0xFFFFFFFD
	w31 = w1 - 0x0000003C
	NZCV = cond(w31)
	branch Test(EQ,Z) l00000000004271B0
	// succ:  l00000000004270D8 l00000000004271B0
l00000000004270D8:
	w31 = w19 - 0x00000112
	NZCV = cond(w31)
	branch Test(EQ,Z) l00000000004270F4
	// succ:  l00000000004270E0 l00000000004270F4
l00000000004270E0:
	w0 = w19 - 0x00000120
	w31 = w0 - 0x00000001
	NZCV = cond(w31)
	branch Test(ULE,ZC) l00000000004270F4
	// succ:  l00000000004270EC l00000000004270F4
l00000000004270EC:
	w31 = w19 - 0x00000029
	NZCV = cond(w31)
	branch Test(NE,Z) l00000000004273A4
	// succ:  l00000000004270F4 l00000000004273A4
l00000000004270F4:
	x0 = 0x00000000004AB000
	x0 = x0 + 0xFFFFFFFFFFFFFBD8
	call make_word (retsize: 0;)
	x1 = x0
	x2 = x21
	x3 = 0x0000000000000000
	w0 = 0x00000003
	call make_cond_node (retsize: 0;)
	x20 = x20 + 0x0000000000000758
	Mem0[x20 + 844:word32] = w19
	v30 = sp + 32
	x21 = Mem0[v30:word64]
	v30 = v30 + 8
	x22 = Mem0[v30:word64]
	v31 = sp + 16
	x19 = Mem0[v31:word64]
	v31 = v31 + 8
	x20 = Mem0[v31:word64]
	x23 = Mem0[sp + 48:word64]
	x29 = Mem0[sp:word64]
	sp = sp + 8
	x30 = Mem0[sp:word64]
	sp = sp + 64
	return
	// succ:  fn0000000000426FB4_exit
l0000000000427130:
	call fn0000000000427614 (retsize: 0;)
	w1 = Mem0[x21 + 844:word32]
	x2 = x0
	w31 = w1 - 0x00000029
	NZCV = cond(w31)
	branch Test(NE,Z) l000000000042723C
	// succ:  l0000000000427144 l000000000042723C
l0000000000427144:
	x1 = 0x0000000000000000
	x3 = x1
	w0 = 0x00000006
	call make_cond_node (retsize: 0;)
	x19 = x0
	call fn0000000000426F44 (retsize: 0;)
	x0 = x19
	goto l0000000000427038
	// succ:  l0000000000427038
l0000000000427164:
	call fn00000000004200A4 (retsize: 0;)
	x22 = x0
	branch x0 == 0x0000000000000000 l0000000000427438
	// succ:  l0000000000427170 l0000000000427438
l0000000000427170:
	x1 = 0x00000000004AB000
	w19 = Mem0[x21 + 48:word32]
	x1 = x1 + 0xFFFFFFFFFFFFFCE8
	w2 = 0x00000005
	x0 = 0x0000000000000000
	dcgettext(x0, x1, x2)
	sp = sp + 0xFFFFFFFFFFFFFFF8
	x1 = x0
	x2 = x22
	w0 = w19
	call parser_error (retsize: 0;)
	x1 = 0x00000000004AB000
	x0 = x22
	x1 = x1 + 0xFFFFFFFFFFFFF8E0
	w2 = 0x00001096
	call sh_xfree (retsize: 0;)
	goto l0000000000427028
	// succ:  l0000000000427028
l00000000004271B0:
	call make_word_from_token (retsize: 0;)
	x19 = 0x00000000004E3000
	x23 = x0
	w0 = Mem0[x19 + 604:word32]
	// succ:  l00000000004271C0
l00000000004271C0:
	branch (w0 & 0x00001000) == 0x00000000 l00000000004271D0
	// succ:  l00000000004271C4 l00000000004271D0
l00000000004271C4:
	w1 = 0x00000001
	x0 = 0x00000000004E1000
	Mem0[x0 + 616:word32] = w1
	// succ:  l00000000004271D0
l00000000004271D0:
	call fn0000000000424844 (retsize: 0;)
	w2 = Mem0[x19 + 604:word32]
	branch (w2 & 0x00001000) == 0x00000000 l00000000004271EC
	// succ:  l00000000004271DC l00000000004271EC
l00000000004271DC:
	x1 = x20 + 0x0000000000000758
	w3 = Mem0[x1 + 220:word32]
	x1 = 0x00000000004E1000
	Mem0[x1 + 616:word32] = w3
	// succ:  l00000000004271EC
l00000000004271EC:
	w3 = 0xFFFFEFFF
	w3 = DPB(w3, 0xFFFFFFFE, 16)
	w2 = w2 & w3
	Mem0[x19 + 604:word32] = w2
	w31 = w0 - 0x00000119
	NZCV = cond(w31)
	branch Test(NE,Z) l0000000000427324
	// succ:  l0000000000427204 l0000000000427324
l0000000000427204:
	x2 = 0x0000000000000000
	x1 = Mem0[x22 + 704:word64]
	x3 = x2
	w0 = 0x00000005
	call make_cond_node (retsize: 0;)
	x3 = x0
	x1 = x23
	x2 = x21
	w0 = 0x00000004
	call make_cond_node (retsize: 0;)
	x19 = x0
	call fn0000000000426F44 (retsize: 0;)
	x0 = x19
	goto l0000000000427038
	// succ:  l0000000000427038
l000000000042723C:
	branch x0 == 0x0000000000000000 l0000000000427290
	// succ:  l0000000000427240 l0000000000427290
l0000000000427240:
	call dispose_cond_node (retsize: 0;)
	w0 = Mem0[x21 + 844:word32]
	// succ:  l0000000000427248
l0000000000427248:
	call fn00000000004200A4 (retsize: 0;)
	x19 = x0
	branch x0 == 0x0000000000000000 l0000000000427460
	// succ:  l0000000000427254 l0000000000427460
l0000000000427254:
	x1 = 0x00000000004AB000
	x1 = x1 + 0xFFFFFFFFFFFFFB30
	w2 = 0x00000005
	x0 = 0x0000000000000000
	dcgettext(x0, x1, x2)
	sp = sp + 0xFFFFFFFFFFFFFFF8
	x1 = x0
	x2 = x19
	w0 = w22
	call parser_error (retsize: 0;)
	x1 = 0x00000000004AB000
	x0 = x19
	x1 = x1 + 0xFFFFFFFFFFFFF8E0
	w2 = 0x00001018
	call sh_xfree (retsize: 0;)
	goto l0000000000427028
	// succ:  l0000000000427028
l0000000000427290:
	w0 = w1
	goto l0000000000427248
	// succ:  l0000000000427248
l0000000000427298:
	x0 = Mem0[x22 + 704:word64]
	x23 = 0x00000000004E3000
	x0 = Mem0[x0:word64]
	call test_binop (retsize: 0;)
	x23 = Mem0[x23 + 704:word64]
	branch w0 == 0x00000000 l0000000000427394
	// succ:  l00000000004272B0 l0000000000427394
l00000000004272B0:
	x1 = Mem0[x23:word64]
	v34 = Mem0[x1:byte]
	w0 = (word32) v34
	w31 = w0 - 0x0000003D
	NZCV = cond(w31)
	branch Test(EQ,Z) l0000000000427480
	// succ:  l00000000004272C0 l0000000000427480
l00000000004272C0:
	w31 = w0 - 0x00000021
	NZCV = cond(w31)
	branch Test(EQ,Z) l00000000004272D4
	// succ:  l00000000004272C8 l00000000004272D4
l00000000004272C8:
	x19 = 0x00000000004E3000
	// succ:  l00000000004272CC
l00000000004272CC:
	w0 = Mem0[x19 + 604:word32]
	goto l00000000004271C0
	// succ:  l00000000004271C0
l00000000004272D4:
	v36 = Mem0[x1 + 1:byte]
	w0 = (word32) v36
	w31 = w0 - 0x0000003D
	NZCV = cond(w31)
	branch Test(NE,Z) l00000000004272C8
	// succ:  l00000000004272E0 l00000000004272C8
l00000000004272E0:
	v37 = Mem0[x1 + 2:byte]
	w0 = (word32) v37
	x19 = 0x00000000004E3000
	branch w0 != 0x00000000 l00000000004272CC
	// succ:  l00000000004272EC l00000000004272CC
l00000000004272EC:
	w0 = Mem0[x19 + 604:word32]
	w0 = w0 | 0x00001000
	Mem0[x19 + 604:word32] = w0
	goto l00000000004271C0
	// succ:  l00000000004271C0
l00000000004272FC:
	v41 = Mem0[x0 + 2:byte]
	w2 = (word32) v41
	branch w2 != 0x00000000 l00000000004270A8
	// succ:  l0000000000427304 l00000000004270A8
l0000000000427304:
	call test_unop (retsize: 0;)
	branch w0 != 0x00000000 l00000000004274D4
	// succ:  l000000000042730C l00000000004274D4
l000000000042730C:
	x1 = Mem0[x22 + 704:word64]
	goto l00000000004270A8
	// succ:  l00000000004270A8
l0000000000427314:
	w0 = 0x00000113
	Mem0[x21 + 844:word32] = w0
	x0 = 0x0000000000000000
	goto l0000000000427038
	// succ:  l0000000000427038
l0000000000427324:
	call fn00000000004200A4 (retsize: 0;)
	x19 = x0
	branch x0 == 0x0000000000000000 l00000000004274AC
	// succ:  l0000000000427330 l00000000004274AC
l0000000000427330:
	x0 = x20 + 0x0000000000000758
	x1 = 0x00000000004AB000
	w22 = Mem0[x0 + 48:word32]
	x1 = x1 + 0xFFFFFFFFFFFFFC48
	w2 = 0x00000005
	x0 = 0x0000000000000000
	dcgettext(x0, x1, x2)
	sp = sp + 0xFFFFFFFFFFFFFFF8
	x1 = x0
	x2 = x19
	w0 = w22
	call parser_error (retsize: 0;)
	x1 = 0x00000000004AB000
	x0 = x19
	x1 = x1 + 0xFFFFFFFFFFFFF8E0
	w2 = 0x00001084
	call sh_xfree (retsize: 0;)
	// succ:  l0000000000427370
l0000000000427370:
	x0 = x21
	call dispose_cond_node (retsize: 0;)
	x0 = x23
	call dispose_word (retsize: 0;)
	w0 = 0x00000113
	x20 = x20 + 0x0000000000000758
	Mem0[x20 + 844:word32] = w0
	x0 = 0x0000000000000000
	goto l0000000000427038
	// succ:  l0000000000427038
l0000000000427394:
	x0 = Mem0[x23:word64]
	v40 = Mem0[x0:byte]
	w1 = (word32) v40
	w31 = w1 - 0x0000003D
	NZCV = cond(w31)
	branch Test(EQ,Z) l0000000000427410
	// succ:  l00000000004273A4 l0000000000427410
l00000000004273A4:
	w0 = w19
	call fn00000000004200A4 (retsize: 0;)
	x19 = x0
	branch x0 == 0x0000000000000000 l0000000000427520
	// succ:  l00000000004273B4 l0000000000427520
l00000000004273B4:
	x0 = x20 + 0x0000000000000758
	x1 = 0x00000000004AB000
	w22 = Mem0[x0 + 48:word32]
	x1 = x1 + 0xFFFFFFFFFFFFFBE0
	w2 = 0x00000005
	x0 = 0x0000000000000000
	dcgettext(x0, x1, x2)
	sp = sp + 0xFFFFFFFFFFFFFFF8
	x1 = x0
	x2 = x19
	w0 = w22
	call parser_error (retsize: 0;)
	x1 = 0x00000000004AB000
	x0 = x19
	x1 = x1 + 0xFFFFFFFFFFFFF8E0
	w2 = 0x0000106A
	call sh_xfree (retsize: 0;)
	// succ:  l00000000004273F4
l00000000004273F4:
	x0 = x21
	call dispose_cond_node (retsize: 0;)
	w0 = 0x00000113
	x20 = x20 + 0x0000000000000758
	Mem0[x20 + 844:word32] = w0
	x0 = 0x0000000000000000
	goto l0000000000427038
	// succ:  l0000000000427038
l0000000000427410:
	v42 = Mem0[x0 + 1:byte]
	w1 = (word32) v42
	w31 = w1 - 0x0000007E
	NZCV = cond(w31)
	branch Test(NE,Z) l00000000004273A4
	// succ:  l000000000042741C l00000000004273A4
l000000000042741C:
	v43 = Mem0[x0 + 2:byte]
	w0 = (word32) v43
	branch w0 != 0x00000000 l00000000004273A4
	// succ:  l0000000000427424 l00000000004273A4
l0000000000427424:
	x19 = 0x00000000004E3000
	w0 = Mem0[x19 + 604:word32]
	w0 = w0 | 0x00010000
	Mem0[x19 + 604:word32] = w0
	goto l00000000004271C0
	// succ:  l00000000004271C0
l0000000000427438:
	x1 = 0x00000000004AB000
	w21 = Mem0[x21 + 48:word32]
	x1 = x1 + 0xFFFFFFFFFFFFFD18
	w2 = 0x00000005
	dcgettext(x0, x1, x2)
	sp = sp + 0xFFFFFFFFFFFFFFF8
	x1 = x0
	w2 = w19
	w0 = w21
	call parser_error (retsize: 0;)
	goto l0000000000427028
	// succ:  l0000000000427028
l0000000000427460:
	x1 = 0x00000000004AB000
	x1 = x1 + 0xFFFFFFFFFFFFFB58
	w2 = 0x00000005
	dcgettext(x0, x1, x2)
	sp = sp + 0xFFFFFFFFFFFFFFF8
	x1 = x0
	w0 = w22
	call parser_error (retsize: 0;)
	goto l0000000000427028
	// succ:  l0000000000427028
l0000000000427480:
	v38 = Mem0[x1 + 1:byte]
	w0 = (word32) v38
	branch w0 == 0x00000000 l0000000000427498
	// succ:  l0000000000427488 l0000000000427498
l0000000000427488:
	w31 = w0 - 0x0000003D
	NZCV = cond(w31)
	branch Test(NE,Z) l00000000004272C8
	// succ:  l0000000000427490 l00000000004272C8
l0000000000427490:
	v39 = Mem0[x1 + 2:byte]
	w0 = (word32) v39
	branch w0 != 0x00000000 l00000000004272C8
	// succ:  l0000000000427498 l00000000004272C8
l0000000000427498:
	x19 = 0x00000000004E3000
	w0 = Mem0[x19 + 604:word32]
	w0 = w0 | 0x00001000
	Mem0[x19 + 604:word32] = w0
	goto l00000000004271C0
	// succ:  l00000000004271C0
l00000000004274AC:
	x1 = x20 + 0x0000000000000758
	w19 = Mem0[x1 + 48:word32]
	x1 = 0x00000000004AB000
	x1 = x1 + 0xFFFFFFFFFFFFFC80
	w2 = 0x00000005
	dcgettext(x0, x1, x2)
	sp = sp + 0xFFFFFFFFFFFFFFF8
	x1 = x0
	w0 = w19
	call parser_error (retsize: 0;)
	goto l0000000000427370
	// succ:  l0000000000427370
l00000000004274D4:
	x21 = Mem0[x22 + 704:word64]
	call fn0000000000424844 (retsize: 0;)
	w31 = w0 - 0x00000119
	NZCV = cond(w31)
	w19 = w0
	branch Test(NE,Z) l0000000000427548
	// succ:  l00000000004274E8 l0000000000427548
l00000000004274E8:
	x2 = 0x0000000000000000
	x1 = Mem0[x22 + 704:word64]
	x3 = x2
	w0 = 0x00000005
	call make_cond_node (retsize: 0;)
	x2 = x0
	x1 = x21
	x3 = 0x0000000000000000
	w0 = 0x00000003
	call make_cond_node (retsize: 0;)
	x19 = x0
	call fn0000000000426F44 (retsize: 0;)
	x0 = x19
	goto l0000000000427038
	// succ:  l0000000000427038
l0000000000427520:
	x1 = x20 + 0x0000000000000758
	w19 = Mem0[x1 + 48:word32]
	x1 = 0x00000000004AB000
	x1 = x1 + 0xFFFFFFFFFFFFFC20
	w2 = 0x00000005
	dcgettext(x0, x1, x2)
	sp = sp + 0xFFFFFFFFFFFFFFF8
	x1 = x0
	w0 = w19
	call parser_error (retsize: 0;)
	goto l00000000004273F4
	// succ:  l00000000004273F4
l0000000000427548:
	x0 = x21
	call dispose_word (retsize: 0;)
	w0 = w19
	call fn00000000004200A4 (retsize: 0;)
	x19 = x0
	x0 = x20 + 0x0000000000000758
	branch x19 == 0x0000000000000000 l00000000004275A4
	// succ:  l0000000000427564 l00000000004275A4
l0000000000427564:
	x1 = 0x00000000004AB000
	w21 = Mem0[x0 + 48:word32]
	x1 = x1 + 0xFFFFFFFFFFFFFB68
	w2 = 0x00000005
	x0 = 0x0000000000000000
	dcgettext(x0, x1, x2)
	sp = sp + 0xFFFFFFFFFFFFFFF8
	x1 = x0
	x2 = x19
	w0 = w21
	call parser_error (retsize: 0;)
	x1 = 0x00000000004AB000
	x0 = x19
	x1 = x1 + 0xFFFFFFFFFFFFF8E0
	w2 = 0x00001038
	call sh_xfree (retsize: 0;)
	goto l0000000000427028
	// succ:  l0000000000427028
l00000000004275A4:
	x1 = 0x00000000004AB000
	w19 = Mem0[x0 + 48:word32]
	x1 = x1 + 0xFFFFFFFFFFFFFBA0
	w2 = 0x00000005
	x0 = 0x0000000000000000
	dcgettext(x0, x1, x2)
	sp = sp + 0xFFFFFFFFFFFFFFF8
	x1 = x0
	w0 = w19
	call parser_error (retsize: 0;)
	goto l0000000000427028
	// succ:  l0000000000427028
fn0000000000426FB4_exit:


// fn00000000004275CC
// Return size: 0
void fn00000000004275CC()
fn00000000004275CC_entry:
	// succ:  l00000000004275CC
l00000000004275CC:
	sp = fp
	sp = sp + -32
	Mem0[sp:word64] = x29
	sp = sp + 8
	Mem0[sp:word64] = x30
	x29 = x31 + 0x0000000000000000
	call fn0000000000426FB4 (retsize: 0;)
	x1 = 0x00000000004DE000
	x1 = x1 + 0x0000000000000758
	w1 = Mem0[x1 + 844:word32]
	w31 = w1 - 0x00000120
	NZCV = cond(w31)
	branch Test(EQ,Z) l00000000004275F4
	// succ:  l00000000004275EC l00000000004275F4
l00000000004275EC:
	x29 = Mem0[sp:word64]
	sp = sp + 8
	x30 = Mem0[sp:word64]
	sp = sp + 32
	return
	// succ:  fn00000000004275CC_exit
l00000000004275F4:
	Mem0[x29 + 16:word64] = x0
	call fn00000000004275CC (retsize: 0;)
	x2 = Mem0[x29 + 16:word64]
	x29 = Mem0[sp:word64]
	sp = sp + 8
	x30 = Mem0[sp:word64]
	sp = sp + 32
	x3 = x0
	x1 = 0x0000000000000000
	w0 = 0x00000001
	// succ:  l0000000000427610_thunk_make_cond_node
l0000000000427610_thunk_make_cond_node:
	call make_cond_node (retsize: 0;)
	return
	// succ:  fn00000000004275CC_exit
fn00000000004275CC_exit:


// fn0000000000427614
// Return size: 0
void fn0000000000427614()
fn0000000000427614_entry:
	// succ:  l0000000000427614
l0000000000427614:
	sp = fp
	sp = sp + -32
	Mem0[sp:word64] = x29
	sp = sp + 8
	Mem0[sp:word64] = x30
	x29 = x31 + 0x0000000000000000
	call fn00000000004275CC (retsize: 0;)
	x1 = 0x00000000004DE000
	x1 = x1 + 0x0000000000000758
	w1 = Mem0[x1 + 844:word32]
	w31 = w1 - 0x00000121
	NZCV = cond(w31)
	branch Test(EQ,Z) l000000000042763C
	// succ:  l0000000000427634 l000000000042763C
l0000000000427634:
	x29 = Mem0[sp:word64]
	sp = sp + 8
	x30 = Mem0[sp:word64]
	sp = sp + 32
	return
	// succ:  fn0000000000427614_exit
l000000000042763C:
	Mem0[x29 + 16:word64] = x0
	call fn0000000000427614 (retsize: 0;)
	x2 = Mem0[x29 + 16:word64]
	x29 = Mem0[sp:word64]
	sp = sp + 8
	x30 = Mem0[sp:word64]
	sp = sp + 32
	x3 = x0
	x1 = 0x0000000000000000
	w0 = 0x00000002
	// succ:  l0000000000427658_thunk_make_cond_node
l0000000000427658_thunk_make_cond_node:
	call make_cond_node (retsize: 0;)
	return
	// succ:  fn0000000000427614_exit
fn0000000000427614_exit:


// yyparse
// Return size: 0
void yyparse()
yyparse_entry:
	// succ:  l000000000042765C
l000000000042765C:
	sp = fp
	x31 = x31 - 0xFFFFFFFFFFFFFE80
	sp = sp + -96
	Mem0[sp:word64] = x29
	sp = sp + 8
	Mem0[sp:word64] = x30
	x29 = x31 + 0x0000000000000000
	v8 = sp + 48
	Mem0[v8:word64] = x23
	v8 = v8 + 8
	Mem0[v8:word64] = x24
	v11 = sp + 64
	Mem0[v11:word64] = x25
	v11 = v11 + 8
	Mem0[v11:word64] = x26
	x23 = 0x00000000004DE000
	x25 = 0x00000000004AB000
	x25 = x25 + 0xFFFFFFFFFFFFF860
	x23 = x23 + 0x0000000000000758
	Mem0[x29 + 3720:word64] = x25
	Mem0[x29 + 3704:word64] = x23
	x5 = Mem0[x29 + 3720:word64]
	x6 = Mem0[x29 + 3704:word64]
	v16 = sp + 16
	Mem0[v16:word64] = x19
	v16 = v16 + 8
	Mem0[v16:word64] = x20
	x0 = 0x00000000004E3000
	Mem0[x29 + 3712:word32] = 0x00000000
	x20 = 0x00000000004AA000
	x19 = x29 + 0xFFFFFFFFFFFFFCE0
	x24 = 0x00000000004E3000
	x20 = x20 + 0x0000000000000760
	Mem0[x0 + 600:word32] = 0x00000000
	x26 = x29 + 0x0000000000000060
	w0 = 0xFFFFFFFE
	x5 = x5 - 0x0000000000000020
	x6 = x6 + 0x0000000000000148
	w23 = Mem0[x29 + 3712:word32]
	v22 = sp + 32
	Mem0[v22:word64] = x21
	v22 = v22 + 8
	Mem0[v22:word64] = x22
	v25 = sp + 80
	Mem0[v25:word64] = x27
	v25 = v25 + 8
	Mem0[v25:word64] = x28
	Mem0[x24 + 640:word32] = w0
	x22 = 0x00000000000000C8
	Mem0[x29 + 3728:word64] = x26
	x28 = x19
	x21 = 0x0000000000000190
	Mem0[x29 + 3696:word64] = x19
	x25 = x20 + 0x0000000000000068
	Mem0[x29 + 3744:word64] = x5
	Mem0[x29 + 3752:word64] = x6
	x0 = x21 - 0x0000000000000002
	x0 = x28 + x0
	Mem0[x19:word16] = (word16) w23
	x31 = x19 - x0
	NZCV = cond(x31)
	branch Test(ULT,C) l00000000004277C8
	// succ:  l0000000000427704 l00000000004277C8
l0000000000427704:
	x19 = x19 - x28
	x0 = 0x000000000000270F
l00000000004277C8:
	w31 = w23 - 0x00000074
	NZCV = cond(w31)
	branch Test(EQ,Z) l0000000000429AE4
	// succ:  l00000000004277D0 l0000000000429AE4
l00000000004277D0:
l0000000000427914:
	x6 = Mem0[x29 + 3696:word64]
	x31 = x28 - x6
	NZCV = cond(x31)
	branch Test(EQ,Z) l0000000000427934
	// succ:  l0000000000427920 l0000000000427934
l0000000000427920:
	x1 = 0x00000000004AB000
	x0 = x28
	x1 = x1 + 0xFFFFFFFFFFFFFD50
	w2 = 0x00000EBD
	call sh_xfree (retsize: 0;)
	// succ:  l0000000000427934
l0000000000427934:
	w0 = w19
	v33 = sp + 32
	x21 = Mem0[v33:word64]
	v33 = v33 + 8
	x22 = Mem0[v33:word64]
	v34 = sp + 16
	x19 = Mem0[v34:word64]
	v34 = v34 + 8
	x20 = Mem0[v34:word64]
	v35 = sp + 48
	x23 = Mem0[v35:word64]
	v35 = v35 + 8
	x24 = Mem0[v35:word64]
	v36 = sp + 64
	x25 = Mem0[v36:word64]
	v36 = v36 + 8
	x26 = Mem0[v36:word64]
	v37 = sp + 80
	x27 = Mem0[v37:word64]
	v37 = v37 + 8
	x28 = Mem0[v37:word64]
	x29 = Mem0[sp:word64]
	sp = sp + 8
	x30 = Mem0[sp:word64]
	sp = sp + 96
	x31 = x31 + 0xFFFFFFFFFFFFFE80
	return
	// succ:  yyparse_exit
l0000000000429AE4:
	w19 = 0x00000000
	goto l0000000000427914
	// succ:  l0000000000427914
yyparse_exit:


// yyerror
// Return size: 0
void yyerror()
yyerror_entry:
	// succ:  l0000000000429DD0
l0000000000429DD0:
	sp = fp
	sp = sp + -16
	Mem0[sp:word64] = x29
	sp = sp + 8
	Mem0[sp:word64] = x30
	x29 = x31 + 0x0000000000000000
	call fn00000000004201A8 (retsize: 0;)
	call reset_parser (retsize: 0;)
	w0 = 0x00000000
	x29 = Mem0[sp:word64]
	sp = sp + 8
	x30 = Mem0[sp:word64]
	sp = sp + 16
	return
	// succ:  yyerror_exit
yyerror_exit:


// parse_string_to_word_list
// Return size: 0
void parse_string_to_word_list()
parse_string_to_word_list_entry:
	// succ:  l0000000000429DEC
l0000000000429DEC:
	sp = fp
	sp = sp + -144
	Mem0[sp:word64] = x29
	sp = sp + 8
	Mem0[sp:word64] = x30
	x29 = x31 + 0x0000000000000000
	v8 = sp + 64
	Mem0[v8:word64] = x25
	v8 = v8 + 8
	Mem0[v8:word64] = x26
	x25 = 0x00000000004D7000
	w5 = Mem0[x25 + 388:word32]
	v12 = sp + 48
	Mem0[v12:word64] = x23
	v12 = v12 + 8
	Mem0[v12:word64] = x24
	x24 = 0x00000000004E3000
	Mem0[x29 + 96:word32] = w5
	w5 = Mem0[x24 + 3436:word32]
	v15 = sp + 32
	Mem0[v15:word64] = x21
	v15 = v15 + 8
	Mem0[v15:word64] = x22
	x21 = 0x00000000004DE000
	v18 = sp + 16
	Mem0[v18:word64] = x19
	v18 = v18 + 8
	Mem0[v18:word64] = x20
	v21 = sp + 80
	Mem0[v21:word64] = x27
	v21 = v21 + 8
	Mem0[v21:word64] = x28
	w19 = w1
	x20 = x21 + 0x0000000000000758
	Mem0[x29 + 128:word64] = x2
	Mem0[x29 + 100:word32] = w5
	Mem0[x29 + 120:word64] = x0
	call bash_history_disable (retsize: 0;)
	w5 = Mem0[x20 + 48:word32]
	x23 = 0x00000000004DF000
	Mem0[x29 + 116:word32] = w5
	w5 = Mem0[x23 + 3724:word32]
	x22 = 0x00000000004E3000
	Mem0[x29 + 104:word32] = w5
	w5 = Mem0[x20 + 320:word32]
	w0 = 0x00000001
	Mem0[x29 + 108:word32] = w5
	w28 = Mem0[x22 + 612:word32]
	w27 = Mem0[x20 + 92:word32]
	call push_stream (retsize: 0;)
	x3 = Mem0[x29 + 128:word64]
	x4 = Mem0[x29 + 120:word64]
	w5 = 0x00000119
	x0 = 0x000000000041F000
	x1 = 0x000000000041F000
	x0 = x0 + 0xFFFFFFFFFFFFF954
	Mem0[x20 + 32:word32] = w5
	x1 = x1 + 0xFFFFFFFFFFFFF980
	w5 = w19 & 0x00000001
	w2 = 0x00000003
	Mem0[x22 + 612:word32] = 0x00000000
	Mem0[x20 + 320:word32] = 0x00000000
	Mem0[x23 + 3724:word32] = 0x00000000
	Mem0[x29 + 112:word32] = w5
	call init_yy_io (retsize: 0;)
	branch (w19 & 0x00000001) == 0x00000000 l0000000000429EC0
	// succ:  l0000000000429EA8 l0000000000429EC0
l0000000000429EA8:
	x0 = 0x00000000004E3000
	w2 = Mem0[x0 + 604:word32]
	w1 = 0x00002000
	w1 = DPB(w1, 0x00000004, 16)
	w1 = w2 | w1
	Mem0[x0 + 604:word32] = w1
	// succ:  l0000000000429EC0
l0000000000429EC0:
	x19 = 0x0000000000000000
	x26 = 0x00000000004E3000
	x20 = 0x00000000004E3000
	// succ:  l0000000000429ECC
l0000000000429ECC:
	call fn0000000000424844 (retsize: 0;)
	w31 = w0 - 0x00000130
	NZCV = cond(w31)
	branch Test(EQ,Z) l0000000000429F08
	// succ:  l0000000000429ED8 l0000000000429F08
l0000000000429ED8:
	w31 = w0 - 0x0000000A
	NZCV = cond(w31)
	branch Test(EQ,Z) l0000000000429F9C
	// succ:  l0000000000429EE0 l0000000000429F9C
l0000000000429EE0:
	w1 = w0 - 0x00000119
	w31 = w1 - 0x00000001
	NZCV = cond(w31)
	branch Test(UGT,ZC) l0000000000429FB0
	// succ:  l0000000000429EEC l0000000000429FB0
l0000000000429EEC:
	x0 = Mem0[x20 + 704:word64]
	x1 = x19
	call make_word_list (retsize: 0;)
	x19 = x0
	call fn0000000000424844 (retsize: 0;)
	w31 = w0 - 0x00000130
	NZCV = cond(w31)
	branch Test(NE,Z) l0000000000429ED8
	// succ:  l0000000000429F08 l0000000000429ED8
l0000000000429F08:
	x20 = x21 + 0x0000000000000758
	w0 = 0x0000000A
	Mem0[x20 + 32:word32] = w0
	call pop_stream (retsize: 0;)
	w5 = Mem0[x29 + 96:word32]
	Mem0[x22 + 612:word32] = w28
	Mem0[x25 + 388:word32] = w5
	w5 = Mem0[x29 + 100:word32]
	Mem0[x20 + 92:word32] = w27
	Mem0[x24 + 3436:word32] = w5
	w5 = Mem0[x29 + 104:word32]
	Mem0[x23 + 3724:word32] = w5
	w5 = Mem0[x29 + 108:word32]
	Mem0[x20 + 320:word32] = w5
	w5 = Mem0[x29 + 112:word32]
	branch w5 == 0x00000000 l0000000000429F60
	// succ:  l0000000000429F48 l0000000000429F60
l0000000000429F48:
	x0 = 0x00000000004E3000
	w2 = Mem0[x0 + 604:word32]
	w1 = 0xFFFFDFFF
	w1 = DPB(w1, 0xFFFFFFFB, 16)
	w1 = w2 & w1
	Mem0[x0 + 604:word32] = w1
	// succ:  l0000000000429F60
l0000000000429F60:
	x21 = x21 + 0x0000000000000758
	x21 = x21 + 0x0000000000000110
	x31 = x19 - x21
	NZCV = cond(x31)
	branch Test(EQ,Z) l000000000042A024
	// succ:  l0000000000429F70 l000000000042A024
l0000000000429F70:
	branch x19 == 0x0000000000000000 l000000000042A004
	// succ:  l0000000000429F74 l000000000042A004
l0000000000429F74:
	x0 = Mem0[x19:word64]
	branch x0 == 0x0000000000000000 l000000000042A004
	// succ:  l0000000000429F7C l000000000042A004
l0000000000429F7C:
	x0 = x19
	v38 = sp + 32
	x21 = Mem0[v38:word64]
	v38 = v38 + 8
	x22 = Mem0[v38:word64]
	v39 = sp + 16
	x19 = Mem0[v39:word64]
	v39 = v39 + 8
	x20 = Mem0[v39:word64]
	v40 = sp + 48
	x23 = Mem0[v40:word64]
	v40 = v40 + 8
	x24 = Mem0[v40:word64]
	v41 = sp + 64
	x25 = Mem0[v41:word64]
	v41 = v41 + 8
	x26 = Mem0[v41:word64]
	v42 = sp + 80
	x27 = Mem0[v42:word64]
	v42 = v42 + 8
	x28 = Mem0[v42:word64]
	x29 = Mem0[sp:word64]
	sp = sp + 8
	x30 = Mem0[sp:word64]
	sp = sp + 144
	// succ:  l0000000000429F98_thunk_list_reverse
l0000000000429F98_thunk_list_reverse:
	call list_reverse (retsize: 0;)
	return
	// succ:  parse_string_to_word_list_exit
l0000000000429F9C:
	x0 = x26 + 0x0000000000000298
	x0 = Mem0[x0 + 16:word64]
	v37 = Mem0[x0:byte]
	w0 = (word32) v37
	branch w0 != 0x00000000 l0000000000429ECC
	// succ:  l0000000000429FAC l0000000000429ECC
l0000000000429FAC:
	goto l0000000000429F08
	// succ:  l0000000000429F08
l0000000000429FB0:
	x20 = x21 + 0x0000000000000758
	w2 = Mem0[x20 + 48:word32]
	w5 = Mem0[x29 + 116:word32]
	x1 = 0x00000000004E3000
	w2 = w5 + w2
	w3 = Mem0[x1 + 656:word32]
	w2 = w2 - 0x00000001
	Mem0[x20 + 48:word32] = w2
	Mem0[x1 + 656:word32] = w0
	Mem0[x29 + 120:word64] = x1
	Mem0[x29 + 128:word64] = x3
	call fn00000000004201A8 (retsize: 0;)
	call reset_parser (retsize: 0;)
	x1 = Mem0[x29 + 120:word64]
	x3 = Mem0[x29 + 128:word64]
	Mem0[x1 + 656:word32] = w3
	branch x19 == 0x0000000000000000 l000000000042A050
	// succ:  l0000000000429FF4 l000000000042A050
l0000000000429FF4:
	x0 = x19
	call dispose_words (retsize: 0;)
	x19 = x20 + 0x0000000000000110
	goto l0000000000429F08
	// succ:  l0000000000429F08
l000000000042A004:
	x0 = x19
	v43 = sp + 32
	x21 = Mem0[v43:word64]
	v43 = v43 + 8
	x22 = Mem0[v43:word64]
	v44 = sp + 16
	x19 = Mem0[v44:word64]
	v44 = v44 + 8
	x20 = Mem0[v44:word64]
	v45 = sp + 48
	x23 = Mem0[v45:word64]
	v45 = v45 + 8
	x24 = Mem0[v45:word64]
	v46 = sp + 64
	x25 = Mem0[v46:word64]
	v46 = v46 + 8
	x26 = Mem0[v46:word64]
	v47 = sp + 80
	x27 = Mem0[v47:word64]
	v47 = v47 + 8
	x28 = Mem0[v47:word64]
	x29 = Mem0[sp:word64]
	sp = sp + 8
	x30 = Mem0[sp:word64]
	sp = sp + 144
	return
	// succ:  parse_string_to_word_list_exit
l000000000042A024:
	x1 = 0x00000000004DE000
	w0 = 0x00000001
	x2 = 0x00000000004E3000
	w1 = Mem0[x1 + 1712:word32]
	Mem0[x2 + 1200:word32] = w0
	branch w1 != 0x00000000 l000000000042A048
	// succ:  l000000000042A03C l000000000042A048
l000000000042A03C:
	x1 = 0x00000000004DE000
	w1 = Mem0[x1 + 1716:word32]
	branch w1 != 0x00000000 l000000000042A04C
	// succ:  l000000000042A048 l000000000042A04C
l000000000042A048:
	w0 = 0x00000002
	// succ:  l000000000042A04C
l000000000042A04C:
	call jump_to_top_level (retsize: 0;)
	// succ:  l000000000042A050
l000000000042A050:
	x19 = x20 + 0x0000000000000110
	goto l0000000000429F08
	// succ:  l0000000000429F08
parse_string_to_word_list_exit:


// save_parser_state
// Return size: 0
void save_parser_state()
save_parser_state_entry:
	// succ:  l000000000042A058
l000000000042A058:
	sp = fp
	sp = sp + -32
	Mem0[sp:word64] = x29
	sp = sp + 8
	Mem0[sp:word64] = x30
	x29 = x31 + 0x0000000000000000
	v8 = sp + 16
	Mem0[v8:word64] = x19
	v8 = v8 + 8
	Mem0[v8:word64] = x20
	x19 = x0
	branch x0 == 0x0000000000000000 l000000000042A12C
	// succ:  l000000000042A06C l000000000042A12C
l000000000042A06C:
	x0 = 0x00000000004E3000
	w0 = Mem0[x0 + 604:word32]
	x20 = 0x00000000004DE000
	Mem0[x19:word32] = w0
	call save_token_state (retsize: 0;)
	x1 = 0x00000000004E3000
	w4 = Mem0[x1 + 612:word32]
	x1 = 0x00000000004D7000
	w3 = Mem0[x1 + 388:word32]
	x1 = 0x00000000004E3000
	x20 = x20 + 0x0000000000000758
	w2 = Mem0[x1 + 3436:word32]
	x1 = 0x00000000004E3000
	w6 = Mem0[x20 + 848:word32]
	x5 = Mem0[x20 + 240:word64]
	w1 = Mem0[x1 + 1200:word32]
	w7 = Mem0[x20 + 92:word32]
	Mem0[x19 + 32:word32] = w6
	Mem0[x19 + 40:word64] = x5
	Mem0[x19 + 48:word32] = w4
	Mem0[x19 + 52:word32] = w3
	Mem0[x19 + 56:word32] = w2
	Mem0[x19 + 60:word32] = w1
	Mem0[x19 + 8:word64] = x0
	Mem0[x19 + 28:word32] = w7
	call save_pipestatus_array (retsize: 0;)
	x3 = 0x00000000004E1000
	x6 = Mem0[x3 + 1704:word64]
	x3 = 0x00000000004E1000
	x5 = Mem0[x3 + 1688:word64]
	x3 = 0x00000000004DF000
	x2 = Mem0[x20 + 304:word64]
	w1 = Mem0[x20 + 288:word32]
	w4 = Mem0[x20 + 320:word32]
	w3 = Mem0[x3 + 3724:word32]
	Mem0[x19 + 64:word64] = x0
	Mem0[x19 + 72:word64] = x6
	Mem0[x19 + 80:word64] = x5
	Mem0[x19 + 88:word32] = w4
	Mem0[x19 + 92:word32] = w3
	Mem0[x19 + 16:word64] = x2
	Mem0[x19 + 24:word32] = w1
	Mem0[x20 + 304:word64] = 0x0000000000000000
	Mem0[x20 + 288:word32] = 0x00000000
	// succ:  l000000000042A11C
l000000000042A11C:
	x0 = x19
	v22 = sp + 16
	x19 = Mem0[v22:word64]
	v22 = v22 + 8
	x20 = Mem0[v22:word64]
	x29 = Mem0[sp:word64]
	sp = sp + 8
	x30 = Mem0[sp:word64]
	sp = sp + 32
	return
	// succ:  save_parser_state_exit
l000000000042A12C:
	x1 = 0x00000000004AB000
	x0 = 0x0000000000000060
	x1 = x1 + 0xFFFFFFFFFFFFF8E0
	w2 = 0x00001701
	call sh_xmalloc (retsize: 0;)
	x19 = x0
	branch x0 == 0x0000000000000000 l000000000042A11C
	// succ:  l000000000042A148 l000000000042A11C
l000000000042A148:
	goto l000000000042A06C
	// succ:  l000000000042A06C
save_parser_state_exit:


// restore_parser_state
// Return size: 0
void restore_parser_state()
restore_parser_state_entry:
	// succ:  l000000000042A14C
l000000000042A14C:
	sp = fp
	sp = sp + -48
	Mem0[sp:word64] = x29
	sp = sp + 8
	Mem0[sp:word64] = x30
	x29 = x31 + 0x0000000000000000
	v8 = sp + 16
	Mem0[v8:word64] = x19
	v8 = v8 + 8
	Mem0[v8:word64] = x20
	Mem0[sp + 32:word64] = x21
	x19 = x0
	branch x0 == 0x0000000000000000 l000000000042A264
	// succ:  l000000000042A164 l000000000042A264
l000000000042A164:
	w1 = Mem0[x0:word32]
	x2 = 0x00000000004E3000
	x0 = Mem0[x0 + 8:word64]
	Mem0[x2 + 604:word32] = w1
	x21 = 0x00000000004DE000
	branch x0 == 0x0000000000000000 l000000000042A1B8
	// succ:  l000000000042A17C l000000000042A1B8
l000000000042A17C:
	w7 = Mem0[x0:word32]
	x21 = 0x00000000004DE000
	w6 = Mem0[x0 + 4:word32]
	w5 = Mem0[x0 + 8:word32]
	x3 = x21 + 0x0000000000000758
	w4 = Mem0[x0 + 12:word32]
	x1 = 0x00000000004AB000
	Mem0[x3 + 32:word32] = w7
	Mem0[x3 + 72:word32] = w6
	Mem0[x3 + 112:word32] = w5
	x1 = x1 + 0xFFFFFFFFFFFFF8E0
	x3 = 0x00000000004E3000
	w2 = 0x00001735
	Mem0[x3 + 656:word32] = w4
	call sh_xfree (retsize: 0;)
	// succ:  l000000000042A1B8
l000000000042A1B8:
	x5 = Mem0[x19 + 40:word64]
	x20 = x21 + 0x0000000000000758
	w4 = Mem0[x19 + 48:word32]
	w3 = Mem0[x19 + 52:word32]
	Mem0[x20 + 240:word64] = x5
	x5 = 0x00000000004E3000
	w2 = Mem0[x19 + 56:word32]
	Mem0[x5 + 612:word32] = w4
	x4 = 0x00000000004D7000
	w1 = Mem0[x19 + 60:word32]
	Mem0[x4 + 388:word32] = w3
	w7 = Mem0[x19 + 28:word32]
	x3 = 0x00000000004E3000
	w6 = Mem0[x19 + 32:word32]
	x0 = Mem0[x19 + 64:word64]
	Mem0[x3 + 3436:word32] = w2
	x2 = 0x00000000004E3000
	Mem0[x2 + 1200:word32] = w1
	Mem0[x20 + 92:word32] = w7
	Mem0[x20 + 848:word32] = w6
	call restore_pipestatus_array (retsize: 0;)
	x4 = Mem0[x19 + 72:word64]
	w2 = Mem0[x19 + 88:word32]
	x3 = Mem0[x19 + 80:word64]
	w1 = Mem0[x19 + 92:word32]
	x5 = 0x00000000004E1000
	Mem0[x5 + 1704:word64] = x4
	Mem0[x20 + 320:word32] = w2
	x4 = 0x00000000004E1000
	x2 = 0x00000000004DF000
	x0 = Mem0[x20 + 304:word64]
	Mem0[x4 + 1688:word64] = x3
	Mem0[x2 + 3724:word32] = w1
	branch x0 == 0x0000000000000000 l000000000042A250
	// succ:  l000000000042A240 l000000000042A250
l000000000042A240:
	x1 = 0x00000000004AB000
	x1 = x1 + 0xFFFFFFFFFFFFF8E0
	w2 = 0x00001751
	call sh_xfree (retsize: 0;)
	// succ:  l000000000042A250
l000000000042A250:
	x1 = Mem0[x19 + 16:word64]
	w0 = Mem0[x19 + 24:word32]
	x21 = x21 + 0x0000000000000758
	Mem0[x21 + 304:word64] = x1
	Mem0[x21 + 288:word32] = w0
	// succ:  l000000000042A264
l000000000042A264:
	v20 = sp + 16
	x19 = Mem0[v20:word64]
	v20 = v20 + 8
	x20 = Mem0[v20:word64]
	x21 = Mem0[sp + 32:word64]
	x29 = Mem0[sp:word64]
	sp = sp + 8
	x30 = Mem0[sp:word64]
	sp = sp + 48
	return
	// succ:  restore_parser_state_exit
restore_parser_state_exit:


// execute_variable_command
// Return size: 0
void execute_variable_command()
execute_variable_command_entry:
	// succ:  l000000000042A274
l000000000042A274:
	sp = fp
	sp = sp + -160
	Mem0[sp:word64] = x29
	sp = sp + 8
	Mem0[sp:word64] = x30
	x29 = x31 + 0x0000000000000000
	v8 = sp + 16
	Mem0[v8:word64] = x19
	v8 = v8 + 8
	Mem0[v8:word64] = x20
	v11 = sp + 32
	Mem0[v11:word64] = x21
	v11 = v11 + 8
	Mem0[v11:word64] = x22
	x19 = 0x00000000004AB000
	x21 = x0
	x0 = x29 + 0x0000000000000040
	Mem0[sp + 48:word64] = x23
	x19 = x19 + 0xFFFFFFFFFFFFFD88
	x23 = x1
	call save_parser_state (retsize: 0;)
	x0 = x19
	call get_string_value (retsize: 0;)
	x20 = x0
	branch x0 == 0x0000000000000000 l000000000042A35C
	// succ:  l000000000042A2B0 l000000000042A35C
l000000000042A2B0:
	x22 = 0x00000000004AB000
	strlen(x0)
	sp = sp + 0xFFFFFFFFFFFFFFF8
	x22 = x22 + 0xFFFFFFFFFFFFF8E0
	w2 = 0x000009A4
	x1 = x22
	x0 = x0 + 0x0000000000000001
	call sh_xmalloc (retsize: 0;)
	x1 = x20
	strcpy(x0, x1)
	sp = sp + 0xFFFFFFFFFFFFFFF8
	x20 = x0
	x0 = x21
	strlen(x0)
	sp = sp + 0xFFFFFFFFFFFFFFF8
	w2 = 0x000009A6
	x1 = x22
	x0 = x0 + 0x0000000000000001
	call sh_xmalloc (retsize: 0;)
	x1 = x21
	strcpy(x0, x1)
	sp = sp + 0xFFFFFFFFFFFFFFF8
	x1 = x23
	w2 = 0x00000005
	call parse_and_execute (retsize: 0;)
	x0 = x29 + 0x0000000000000040
	call restore_parser_state (retsize: 0;)
	x0 = x19
	x1 = x20
	w2 = 0x00000000
	call bind_variable (retsize: 0;)
	branch x20 == 0x0000000000000000 l000000000042A330
	// succ:  l000000000042A320 l000000000042A330
l000000000042A320:
	x0 = x20
	x1 = x22
	w2 = 0x000009AA
	call sh_xfree (retsize: 0;)
	// succ:  l000000000042A330
l000000000042A330:
	x0 = 0x00000000004DE000
	x0 = x0 + 0x0000000000000758
	w1 = Mem0[x0 + 232:word32]
	w31 = w1 - 0x0000000A
	NZCV = cond(w31)
	branch Test(NE,Z) l000000000042A348
	// succ:  l000000000042A344 l000000000042A348
l000000000042A344:
	Mem0[x0 + 232:word32] = 0x00000000
	// succ:  l000000000042A348
l000000000042A348:
	v21 = sp + 16
	x19 = Mem0[v21:word64]
	v21 = v21 + 8
	x20 = Mem0[v21:word64]
	v22 = sp + 32
	x21 = Mem0[v22:word64]
	v22 = v22 + 8
	x22 = Mem0[v22:word64]
	x23 = Mem0[sp + 48:word64]
	x29 = Mem0[sp:word64]
	sp = sp + 8
	x30 = Mem0[sp:word64]
	sp = sp + 160
	return
	// succ:  execute_variable_command_exit
l000000000042A35C:
	x0 = x21
	strlen(x0)
	sp = sp + 0xFFFFFFFFFFFFFFF8
	x1 = 0x00000000004AB000
	w2 = 0x000009A6
	x1 = x1 + 0xFFFFFFFFFFFFF8E0
	x0 = x0 + 0x0000000000000001
	call sh_xmalloc (retsize: 0;)
	x1 = x21
	strcpy(x0, x1)
	sp = sp + 0xFFFFFFFFFFFFFFF8
	x1 = x23
	w2 = 0x00000005
	call parse_and_execute (retsize: 0;)
	x0 = x29 + 0x0000000000000040
	call restore_parser_state (retsize: 0;)
	x0 = x19
	x1 = x20
	w2 = w20
	call bind_variable (retsize: 0;)
	goto l000000000042A330
	// succ:  l000000000042A330
execute_variable_command_exit:


// save_input_line_state
// Return size: 0
void save_input_line_state()
save_input_line_state_entry:
	// succ:  l000000000042A3A8
l000000000042A3A8:
	sp = fp
	sp = sp + -16
	Mem0[sp:word64] = x29
	sp = sp + 8
	Mem0[sp:word64] = x30
	x29 = x31 + 0x0000000000000000
	branch x0 == 0x0000000000000000 l000000000042A3F4
	// succ:  l000000000042A3B4 l000000000042A3F4
l000000000042A3B4:
	x1 = 0x00000000004DE000
	x1 = x1 + 0x0000000000000758
	x5 = Mem0[x1 + 24:word64]
	w4 = Mem0[x1 + 88:word32]
	w3 = Mem0[x1 + 20:word32]
	w2 = Mem0[x1 + 16:word32]
	Mem0[x0:word64] = x5
	Mem0[x0 + 12:word32] = w4
	Mem0[x0 + 16:word32] = w3
	Mem0[x0 + 8:word32] = w2
	Mem0[x1 + 24:word64] = 0x0000000000000000
	Mem0[x1 + 16:word32] = 0x00000000
	Mem0[x1 + 20:word32] = 0x00000000
	Mem0[x1 + 88:word32] = 0x00000000
	// succ:  l000000000042A3EC
l000000000042A3EC:
	x29 = Mem0[sp:word64]
	sp = sp + 8
	x30 = Mem0[sp:word64]
	sp = sp + 16
	return
	// succ:  save_input_line_state_exit
l000000000042A3F4:
	x1 = 0x00000000004AB000
	x0 = 0x0000000000000018
	x1 = x1 + 0xFFFFFFFFFFFFF8E0
	w2 = 0x0000175B
	call sh_xmalloc (retsize: 0;)
	branch x0 == 0x0000000000000000 l000000000042A3EC
	// succ:  l000000000042A40C l000000000042A3EC
l000000000042A40C:
	goto l000000000042A3B4
	// succ:  l000000000042A3B4
save_input_line_state_exit:


// restore_input_line_state
// Return size: 0
void restore_input_line_state()
restore_input_line_state_entry:
	// succ:  l000000000042A410
l000000000042A410:
	sp = fp
	sp = sp + -32
	Mem0[sp:word64] = x29
	sp = sp + 8
	Mem0[sp:word64] = x30
	x29 = x31 + 0x0000000000000000
	v8 = sp + 16
	Mem0[v8:word64] = x19
	v8 = v8 + 8
	Mem0[v8:word64] = x20
	x20 = 0x00000000004DE000
	x1 = x20 + 0x0000000000000758
	x1 = Mem0[x1 + 24:word64]
	x19 = x0
	branch x1 == 0x0000000000000000 l000000000042A444
	// succ:  l000000000042A430 l000000000042A444
l000000000042A430:
	x0 = x1
	x1 = 0x00000000004AB000
	x1 = x1 + 0xFFFFFFFFFFFFF8E0
	w2 = 0x0000176D
	call sh_xfree (retsize: 0;)
	// succ:  l000000000042A444
l000000000042A444:
	x4 = Mem0[x19:word64]
	w3 = Mem0[x19 + 12:word32]
	w2 = Mem0[x19 + 16:word32]
	w1 = Mem0[x19 + 8:word32]
	x0 = x20 + 0x0000000000000758
	Mem0[x0 + 24:word64] = x4
	Mem0[x0 + 88:word32] = w3
	Mem0[x0 + 20:word32] = w2
	Mem0[x0 + 16:word32] = w1
	v15 = sp + 16
	x19 = Mem0[v15:word64]
	v15 = v15 + 8
	x20 = Mem0[v15:word64]
	x29 = Mem0[sp:word64]
	sp = sp + 8
	x30 = Mem0[sp:word64]
	sp = sp + 32
	// succ:  l000000000042A470_thunk_fn000000000041FE90
l000000000042A470_thunk_fn000000000041FE90:
	call fn000000000041FE90 (retsize: 0;)
	return
	// succ:  restore_input_line_state_exit
restore_input_line_state_exit:


// xparse_dolparen
// Return size: 0
void xparse_dolparen()
xparse_dolparen_entry:
	// succ:  l000000000042A474
l000000000042A474:
	sp = fp
	sp = sp + -192
	Mem0[sp:word64] = x29
	sp = sp + 8
	Mem0[sp:word64] = x30
	x29 = x31 + 0x0000000000000000
	v8 = sp + 16
	Mem0[v8:word64] = x19
	v8 = v8 + 8
	Mem0[v8:word64] = x20
	w20 = w3
	w3 = w3 & 0x00000040
	NZCV = cond(w3 - w31)
	v15 = sp + 32
	Mem0[v15:word64] = x21
	v15 = v15 + 8
	Mem0[v15:word64] = x22
	w3 = 0x0000000D
	Mem0[sp + 48:word64] = x23
	x22 = x0
	w23 = 0x0000004D
	x0 = x29 + 0x0000000000000040
xparse_dolparen_exit:


// fn000000000042A6B0
// Return size: 0
void fn000000000042A6B0()
fn000000000042A6B0_entry:
	// succ:  l000000000042A6B0
l000000000042A6B0:
	sp = fp
	sp = sp + -48
	Mem0[sp:word64] = x29
	sp = sp + 8
	Mem0[sp:word64] = x30
	x29 = x31 + 0x0000000000000000
	v8 = sp + 32
	Mem0[v8:word64] = x21
	v8 = v8 + 8
	Mem0[v8:word64] = x22
	x21 = 0x00000000004DE000
	v11 = sp + 16
	Mem0[v11:word64] = x19
	v11 = v11 + 8
	Mem0[v11:word64] = x20
	x19 = x21 + 0xFFFFFFFFFFFFFAC8
	w1 = Mem0[x19:word32]
	branch w1 == 0x00000000 l000000000042A878
	// succ:  l000000000042A6D0 l000000000042A878
l000000000042A6D0:
	x20 = x21 + 0xFFFFFFFFFFFFFAC8
	x0 = Mem0[x20 + 8:word64]
	x2 = 0x00000000004AB000
l000000000042A878:
	call getmaxgroups (retsize: 0;)
	Mem0[x19:word32] = w0
	w1 = w0
	goto l000000000042A6D0
	// succ:  l000000000042A6D0
fn000000000042A6B0_exit:


// posix_initialize
// Return size: 0
void posix_initialize()
posix_initialize_entry:
	// succ:  l000000000042A888
l000000000042A888:
	sp = fp
	branch w0 == 0x00000000 l000000000042A8B4
	// succ:  l000000000042A88C l000000000042A8B4
l000000000042A88C:
	w0 = 0x00000001
	x1 = 0x00000000004DE000
	Mem0[x1 + 2200:word32] = w0
	x1 = 0x00000000004D8000
	Mem0[x1 + 2120:word32] = w0
	x1 = 0x00000000004D6000
	Mem0[x1 + 3288:word32] = w0
	x0 = 0x00000000004D8000
	Mem0[x0 + 2124:word32] = 0x00000000
	return
	// succ:  posix_initialize_exit
l000000000042A8B4:
	x0 = 0x00000000004DE000
	w1 = Mem0[x0 + 1712:word32]
	w2 = 0x00000001
	x0 = 0x00000000004D8000
	Mem0[x0 + 2124:word32] = w2
	x0 = 0x00000000004DE000
	Mem0[x0 + 2200:word32] = w1
	return
	// succ:  posix_initialize_exit
posix_initialize_exit:


// string_to_rlimtype
// Return size: 0
void string_to_rlimtype()
string_to_rlimtype_entry:
	// succ:  l000000000042A8D4
l000000000042A8D4:
	sp = fp
	branch x0 == 0x0000000000000000 l000000000042A904
	// succ:  l000000000042A8D8 l000000000042A904
l000000000042A8D8:
	v5 = Mem0[x0:byte]
	w1 = (word32) v5
	branch w1 == 0x00000000 l000000000042A90C
	// succ:  l000000000042A8E0 l000000000042A90C
l000000000042A8E0:
	w31 = w1 - 0x00000020
	NZCV = cond(w31)
	branch Test(EQ,Z) l000000000042A8FC
	// succ:  l000000000042A8E8 l000000000042A8FC
l000000000042A8E8:
	goto l000000000042A988
	// succ:  l000000000042A988
l000000000042A8EC:
	v11 = Mem0[x0:byte]
	w1 = (word32) v11
	w31 = w1 - 0x00000009
	NZCV = cond(w31)
	branch w1 == 0x00000000 l000000000042A90C
	// succ:  l000000000042A8F8 l000000000042A90C
l000000000042A8F8:
	branch Test(NE,Z) l000000000042A960
	// succ:  l000000000042A8FC l000000000042A960
l000000000042A8FC:
	x0 = x0 + 0x0000000000000001
	NZCV = cond(x0)
	branch Test(NE,Z) l000000000042A8EC
	// succ:  l000000000042A904 l000000000042A8EC
l000000000042A904:
	return
	// succ:  string_to_rlimtype_exit
l000000000042A908:
	branch w4 != 0x00000000 l000000000042A978
	// succ:  l000000000042A90C l000000000042A978
l000000000042A90C:
	w4 = 0x00000000
	// succ:  l000000000042A910
l000000000042A910:
	v13 = Mem0[x0:byte]
	w2 = (word32) v13
	w2 = w2 - 0x00000030
l000000000042A954:
	NZCV = cond(w4 - w31)
l000000000042A960:
	w31 = w1 - 0x00000020
	NZCV = cond(w31)
	branch Test(EQ,Z) l000000000042A8FC
	// succ:  l000000000042A968 l000000000042A8FC
l000000000042A968:
	w31 = w1 - 0x0000002D
	NZCV = cond(w31)
	w4 = (word32) Test(EQ,Z)
	w31 = w1 - 0x0000002B
	NZCV = cond(w31)
	branch Test(NE,Z) l000000000042A908
	// succ:  l000000000042A978 l000000000042A908
l000000000042A978:
	x0 = x0 + 0x0000000000000001
	NZCV = cond(x0)
	x1 = 0x0000000000000000
	branch Test(NE,Z) l000000000042A910
	// succ:  l000000000042A984 l000000000042A910
l000000000042A984:
	goto l000000000042A954
	// succ:  l000000000042A954
l000000000042A988:
	w31 = w1 - 0x00000009
	NZCV = cond(w31)
	branch Test(EQ,Z) l000000000042A8FC
	// succ:  l000000000042A990 l000000000042A8FC
l000000000042A990:
	goto l000000000042A968
	// succ:  l000000000042A968
string_to_rlimtype_exit:


// print_rlimtype
// Return size: 0
void print_rlimtype()
print_rlimtype_entry:
	// succ:  l000000000042A994
l000000000042A994:
	sp = fp
	sp = sp + -48
	Mem0[sp:word64] = x29
	sp = sp + 8
	Mem0[sp:word64] = x30
	x29 = x31 + 0x0000000000000000
	x5 = x31 | 0xCCCCCCCCCCCCCCCC
	Mem0[x29 + 36:byte] = 0x00
	x3 = x29 + 0x0000000000000023
	x6 = 0x000000000000000A
	x5 = x5 + 0x0000000000000001
	x2 = x0 /u x6
	x2 = x2 + (x2 << 2)
	x4 = x0 - (x2 << 1)
	x2 = x3
	x0 = SLICE(w0 *u w5, uint64, 64)
	w3 = w4 + 0x00000030
	Mem0[x2:byte] = (byte) w3
print_rlimtype_exit:


// all_digits
// Return size: 0
void all_digits()
all_digits_entry:
	// succ:  l000000000042AA1C
l000000000042AA1C:
	sp = fp
	v5 = Mem0[x0:byte]
	w1 = (word32) v5
	branch w1 == 0x00000000 l000000000042AA50
	// succ:  l000000000042AA24 l000000000042AA50
l000000000042AA24:
	w1 = w1 - 0x00000030
l000000000042AA50:
	w0 = 0x00000001
	return
	// succ:  all_digits_exit
all_digits_exit:


// legal_number
// Return size: 0
void legal_number()
legal_number_entry:
	// succ:  l000000000042AA60
l000000000042AA60:
	sp = fp
	sp = sp + -64
	Mem0[sp:word64] = x29
	sp = sp + 8
	Mem0[sp:word64] = x30
	x29 = x31 + 0x0000000000000000
	v8 = sp + 16
	Mem0[v8:word64] = x19
	v8 = v8 + 8
	Mem0[v8:word64] = x20
	Mem0[sp + 32:word64] = x21
	x20 = x1
	x19 = x0
	branch x1 == 0x0000000000000000 l000000000042AA80
	// succ:  l000000000042AA7C l000000000042AA80
l000000000042AA7C:
	Mem0[x1:word64] = 0x0000000000000000
	// succ:  l000000000042AA80
l000000000042AA80:
	__errno_location()
	sp = sp + 0xFFFFFFFFFFFFFFF8
	x21 = x0
	Mem0[x0:word32] = 0x00000000
	x1 = x29 + 0x0000000000000030
	x0 = x19
	w2 = 0x0000000A
	w3 = 0x00000000
	call __strtol_internal (retsize: 0;)
	w1 = Mem0[x21:word32]
	branch w1 != 0x00000000 l000000000042AB08
	// succ:  l000000000042AAA8 l000000000042AB08
l000000000042AAA8:
	x2 = Mem0[x29 + 48:word64]
	x31 = x2 - x19
	NZCV = cond(x31)
	branch Test(EQ,Z) l000000000042AB08
	// succ:  l000000000042AAB4 l000000000042AB08
l000000000042AAB4:
	v18 = Mem0[x2:byte]
	w3 = (word32) v18
	w31 = w3 - 0x00000020
	NZCV = cond(w31)
	branch Test(NE,Z) l000000000042AB1C
	// succ:  l000000000042AAC0 l000000000042AB1C
l000000000042AAC0:
	x2 = x2 + 0x0000000000000001
	// succ:  l000000000042AAC4
l000000000042AAC4:
	Mem0[x29 + 48:word64] = x2
	v20 = Mem0[x2:byte]
	w3 = (word32) v20
	x2 = x2 + 1
	w31 = w3 - 0x00000009
	NZCV = cond(w31)
	branch Test(EQ,Z) l000000000042AAC4
	// succ:  l000000000042AAD4 l000000000042AAC4
l000000000042AAD4:
	w31 = w3 - 0x00000020
	NZCV = cond(w31)
	branch Test(EQ,Z) l000000000042AAC4
	// succ:  l000000000042AADC l000000000042AAC4
l000000000042AADC:
	branch x19 == 0x0000000000000000 l000000000042AB08
	// succ:  l000000000042AAE0 l000000000042AB08
l000000000042AAE0:
	v21 = Mem0[x19:byte]
	w1 = (word32) v21
	branch w1 == 0x00000000 l000000000042AB08
	// succ:  l000000000042AAE8 l000000000042AB08
l000000000042AAE8:
	branch w3 != 0x00000000 l000000000042AB08
	// succ:  l000000000042AAEC l000000000042AB08
l000000000042AAEC:
	branch x20 == 0x0000000000000000 l000000000042AB28
	// succ:  l000000000042AAF0 l000000000042AB28
l000000000042AAF0:
	Mem0[x20:word64] = x0
	x21 = Mem0[sp + 32:word64]
	w0 = 0x00000001
	v23 = sp + 16
	x19 = Mem0[v23:word64]
	v23 = v23 + 8
	x20 = Mem0[v23:word64]
	x29 = Mem0[sp:word64]
	sp = sp + 8
	x30 = Mem0[sp:word64]
	sp = sp + 64
	return
	// succ:  legal_number_exit
l000000000042AB08:
	w0 = 0x00000000
	// succ:  l000000000042AB0C
l000000000042AB0C:
	v24 = sp + 16
	x19 = Mem0[v24:word64]
	v24 = v24 + 8
	x20 = Mem0[v24:word64]
	x21 = Mem0[sp + 32:word64]
	x29 = Mem0[sp:word64]
	sp = sp + 8
	x30 = Mem0[sp:word64]
	sp = sp + 64
	return
	// succ:  legal_number_exit
l000000000042AB1C:
	w31 = w3 - 0x00000009
	NZCV = cond(w31)
	branch Test(EQ,Z) l000000000042AAC0
	// succ:  l000000000042AB24 l000000000042AAC0
l000000000042AB24:
	goto l000000000042AADC
	// succ:  l000000000042AADC
l000000000042AB28:
	w0 = 0x00000001
	goto l000000000042AB0C
	// succ:  l000000000042AB0C
legal_number_exit:


// legal_identifier
// Return size: 0
void legal_identifier()
legal_identifier_entry:
	// succ:  l000000000042AB30
l000000000042AB30:
	sp = fp
	sp = sp + -48
	Mem0[sp:word64] = x29
	sp = sp + 8
	Mem0[sp:word64] = x30
	x29 = x31 + 0x0000000000000000
	v8 = sp + 16
	Mem0[v8:word64] = x19
	v8 = v8 + 8
	Mem0[v8:word64] = x20
	Mem0[sp + 32:word64] = x21
	x19 = x0
	branch x0 == 0x0000000000000000 l000000000042ABE8
	// succ:  l000000000042AB48 l000000000042ABE8
l000000000042AB48:
	v12 = Mem0[x0:byte]
	w21 = (word32) v12
	w20 = 0x00000000
	branch w21 == 0x00000000 l000000000042ABA0
	// succ:  l000000000042AB54 l000000000042ABA0
l000000000042AB54:
	__ctype_b_loc()
	sp = sp + 0xFFFFFFFFFFFFFFF8
	x4 = Mem0[x0:word64]
l000000000042ABA0:
	w0 = w20
	x21 = Mem0[sp + 32:word64]
	v17 = sp + 16
	x19 = Mem0[v17:word64]
	v17 = v17 + 8
	x20 = Mem0[v17:word64]
	x29 = Mem0[sp:word64]
	sp = sp + 8
	x30 = Mem0[sp:word64]
	sp = sp + 48
	return
	// succ:  legal_identifier_exit
l000000000042ABE8:
	w20 = w0
	w0 = w20
	x21 = Mem0[sp + 32:word64]
	v16 = sp + 16
	x19 = Mem0[v16:word64]
	v16 = v16 + 8
	x20 = Mem0[v16:word64]
	x29 = Mem0[sp:word64]
	sp = sp + 8
	x30 = Mem0[sp:word64]
	sp = sp + 48
	return
	// succ:  legal_identifier_exit
legal_identifier_exit:


// check_identifier
// Return size: 0
void check_identifier()
check_identifier_entry:
	// succ:  l000000000042AC00
l000000000042AC00:
	sp = fp
	sp = sp + -32
	Mem0[sp:word64] = x29
	sp = sp + 8
	Mem0[sp:word64] = x30
	x29 = x31 + 0x0000000000000000
	Mem0[sp + 16:word64] = x19
	x19 = x0
	w0 = Mem0[x0 + 8:word32]
	w0 = w0 & 0x00000003
	branch w0 != 0x00000000 l000000000042AC58
	// succ:  l000000000042AC1C l000000000042AC58
l000000000042AC1C:
	x0 = Mem0[x19:word64]
	v10 = Mem0[x0:byte]
	w2 = (word32) v10
	branch w2 == 0x00000000 l000000000042AC58
	// succ:  l000000000042AC28 l000000000042AC58
l000000000042AC28:
	w2 = w2 - 0x00000030
l000000000042AC58:
	x1 = 0x00000000004AB000
	w2 = 0x00000005
	x1 = x1 + 0xFFFFFFFFFFFFFF08
	x0 = 0x0000000000000000
	dcgettext(x0, x1, x2)
	sp = sp + 0xFFFFFFFFFFFFFFF8
	x1 = Mem0[x19:word64]
	call internal_error (retsize: 0;)
	w0 = 0x00000000
	x19 = Mem0[sp + 16:word64]
	x29 = Mem0[sp:word64]
	sp = sp + 8
	x30 = Mem0[sp:word64]
	sp = sp + 32
	return
	// succ:  check_identifier_exit
check_identifier_exit:


// legal_alias_name
// Return size: 0
void legal_alias_name()
legal_alias_name_entry:
	// succ:  l000000000042ACA8
l000000000042ACA8:
	sp = fp
	v5 = Mem0[x0:byte]
	w1 = (word32) v5
	branch w1 == 0x00000000 l000000000042AD20
	// succ:  l000000000042ACB0 l000000000042AD20
l000000000042ACB0:
	x5 = 0x00000000004D7000
	x5 = x5 + 0x00000000000005C0
	w2 = Mem0[x5 + (int64) ((int32) w1):word32]
	w4 = 0x00000402
	NZ = cond(w2 & w4)
	C = false
	V = false
	branch Test(NE,Z) l000000000042AD28
	// succ:  l000000000042ACC8 l000000000042AD28
l000000000042ACC8:
	w31 = w1 - 0x00000024
	NZCV = cond(w31)
	branch Test(EQ,Z) l000000000042AD28
	// succ:  l000000000042ACD0 l000000000042AD28
l000000000042ACD0:
	w2 = w1 & 0xFFFFFFFD
	w31 = w2 - 0x0000003C
	NZCV = cond(w31)
	w2 = (word32) Test(EQ,Z)
	branch w2 != 0x00000000 l000000000042AD28
	// succ:  l000000000042ACE0 l000000000042AD28
l000000000042ACE0:
	w31 = w1 - 0x0000002F
	NZCV = cond(w31)
	branch Test(NE,Z) l000000000042AD14
	// succ:  l000000000042ACE8 l000000000042AD14
l000000000042ACE8:
	goto l000000000042AD30
	// succ:  l000000000042AD30
l000000000042ACEC:
	w2 = Mem0[x5 + (int64) ((int32) w1):word32]
	NZ = cond(w2 & w4)
	C = false
	V = false
	branch Test(NE,Z) l000000000042AD28
	// succ:  l000000000042ACF8 l000000000042AD28
l000000000042ACF8:
	w31 = w1 - 0x00000024
	NZCV = cond(w31)
	branch Test(EQ,Z) l000000000042AD28
	// succ:  l000000000042AD00 l000000000042AD28
l000000000042AD00:
	w31 = w3 - 0x0000003C
	NZCV = cond(w31)
	w2 = (word32) Test(EQ,Z)
	w31 = w1 - 0x0000002F
	NZCV = cond(w31)
	branch w2 != 0x00000000 l000000000042AD28
	// succ:  l000000000042AD10 l000000000042AD28
l000000000042AD10:
	branch Test(EQ,Z) l000000000042AD30
	// succ:  l000000000042AD14 l000000000042AD30
l000000000042AD14:
	x0 = x0 + 1
	v16 = Mem0[x0:byte]
	w1 = (word32) v16
	w3 = w1 & 0xFFFFFFFD
	branch w1 != 0x00000000 l000000000042ACEC
	// succ:  l000000000042AD20 l000000000042ACEC
l000000000042AD20:
	w0 = 0x00000001
	return
	// succ:  legal_alias_name_exit
l000000000042AD28:
	w0 = 0x00000000
	return
	// succ:  legal_alias_name_exit
l000000000042AD30:
	w0 = w2
	return
	// succ:  legal_alias_name_exit
legal_alias_name_exit:


// assignment
// Return size: 0
void assignment()
assignment_entry:
	// succ:  l000000000042AD38
l000000000042AD38:
	sp = fp
	sp = sp + -48
	Mem0[sp:word64] = x29
	sp = sp + 8
	Mem0[sp:word64] = x30
	x29 = x31 + 0x0000000000000000
	v8 = sp + 16
	Mem0[v8:word64] = x19
	v8 = v8 + 8
	Mem0[v8:word64] = x20
	v11 = Mem0[x0:byte]
	w19 = (word32) v11
	x20 = x0
	Mem0[x29 + 32:word64] = x1
	__ctype_b_loc()
	sp = sp + 0xFFFFFFFFFFFFFFF8
	x4 = Mem0[x0:word64]
assignment_exit:


// sh_unset_nodelay_mode
// Return size: 0
void sh_unset_nodelay_mode()
sh_unset_nodelay_mode_entry:
	// succ:  l000000000042AE80
l000000000042AE80:
	sp = fp
	sp = sp + -32
	Mem0[sp:word64] = x29
	sp = sp + 8
	Mem0[sp:word64] = x30
	x29 = x31 + 0x0000000000000000
	w2 = 0x00000000
	w1 = 0x00000003
	Mem0[sp + 16:word64] = x19
	w19 = w0
	fcntl(x0, x1)
	sp = sp + 0xFFFFFFFFFFFFFFF8
	w2 = w0
	branch (w2 & 0x00000000) == 0x00000000 l000000000042AED0
	// succ:  l000000000042AEA4 l000000000042AED0
l000000000042AEA4:
	w0 = w2 & 0x00000800
	branch (w2 & 0x00000800) == 0x00000000 l000000000042AEB8
	// succ:  l000000000042AEAC l000000000042AEB8
l000000000042AEAC:
	x19 = Mem0[sp + 16:word64]
	x29 = Mem0[sp:word64]
	sp = sp + 8
	x30 = Mem0[sp:word64]
	sp = sp + 32
	return
	// succ:  sh_unset_nodelay_mode_exit
l000000000042AEB8:
	w0 = w19
	x19 = Mem0[sp + 16:word64]
	x29 = Mem0[sp:word64]
	sp = sp + 8
	x30 = Mem0[sp:word64]
	sp = sp + 32
	w1 = 0x00000004
	w2 = w2 & 0xFFFFF7FF
	fcntl(x0, x1)
	return
	// succ:  sh_unset_nodelay_mode_exit
l000000000042AED0:
	w0 = 0xFFFFFFFF
	goto l000000000042AEAC
	// succ:  l000000000042AEAC
sh_unset_nodelay_mode_exit:


// sh_validfd
// Return size: 0
void sh_validfd()
sh_validfd_entry:
	// succ:  l000000000042AED8
l000000000042AED8:
	sp = fp
	sp = sp + -16
	Mem0[sp:word64] = x29
	sp = sp + 8
	Mem0[sp:word64] = x30
	x29 = x31 + 0x0000000000000000
	w1 = 0x00000001
	w2 = 0x00000000
	fcntl(x0, x1)
	sp = sp + 0xFFFFFFFFFFFFFFF8
	w0 = ~w0
sh_validfd_exit:


// fd_ispipe
// Return size: 0
void fd_ispipe()
fd_ispipe_entry:
	// succ:  l000000000042AEFC
l000000000042AEFC:
	sp = fp
	sp = sp + -32
	Mem0[sp:word64] = x29
	sp = sp + 8
	Mem0[sp:word64] = x30
	x29 = x31 + 0x0000000000000000
	v8 = sp + 16
	Mem0[v8:word64] = x19
	v8 = v8 + 8
	Mem0[v8:word64] = x20
	w20 = w0
	__errno_location()
	sp = sp + 0xFFFFFFFFFFFFFFF8
	Mem0[x0:word32] = 0x00000000
	x1 = 0x0000000000000000
	x19 = x0
	w2 = 0x00000001
	w0 = w20
	lseek(x0, x1, x2)
	sp = sp + 0xFFFFFFFFFFFFFFF8
	w1 = 0x00000000
	branch (w0 & 0x00000000) != 0x00000000 l000000000042AF3C
	// succ:  l000000000042AF30 l000000000042AF3C
l000000000042AF30:
	w0 = Mem0[x19:word32]
	w31 = w0 - 0x0000001D
	NZCV = cond(w31)
	w1 = (word32) Test(EQ,Z)
	// succ:  l000000000042AF3C
l000000000042AF3C:
	w0 = w1
	v19 = sp + 16
	x19 = Mem0[v19:word64]
	v19 = v19 + 8
	x20 = Mem0[v19:word64]
	x29 = Mem0[sp:word64]
	sp = sp + 8
	x30 = Mem0[sp:word64]
	sp = sp + 32
	return
	// succ:  fd_ispipe_exit
fd_ispipe_exit:


// check_dev_tty
// Return size: 0
void check_dev_tty()
check_dev_tty_entry:
	// succ:  l000000000042AF4C
l000000000042AF4C:
	sp = fp
	sp = sp + -16
	Mem0[sp:word64] = x29
	sp = sp + 8
	Mem0[sp:word64] = x30
	x29 = x31 + 0x0000000000000000
	x0 = 0x00000000004AB000
	w1 = 0x00000802
	x0 = x0 + 0xFFFFFFFFFFFFFF28
	open(x0, x1)
	sp = sp + 0xFFFFFFFFFFFFFFF8
	branch (w0 & 0x00000000) == 0x00000000 l000000000042AF70
	// succ:  l000000000042AF68 l000000000042AF70
l000000000042AF68:
	x29 = Mem0[sp:word64]
	sp = sp + 8
	x30 = Mem0[sp:word64]
	sp = sp + 16
	close(x0)
	return
	// succ:  check_dev_tty_exit
l000000000042AF70:
	x0 = 0x00000000004DE000
	x0 = Mem0[x0 + 1664:word64]
	fileno(x0)
	sp = sp + 0xFFFFFFFFFFFFFFF8
	call ttyname (retsize: 0;)
	branch x0 == 0x0000000000000000 l000000000042AF94
	// succ:  l000000000042AF84 l000000000042AF94
l000000000042AF84:
	w1 = 0x00000802
	open(x0, x1)
	sp = sp + 0xFFFFFFFFFFFFFFF8
	x29 = Mem0[sp:word64]
	sp = sp + 8
	x30 = Mem0[sp:word64]
	sp = sp + 16
	close(x0)
	return
	// succ:  check_dev_tty_exit
l000000000042AF94:
	x29 = Mem0[sp:word64]
	sp = sp + 8
	x30 = Mem0[sp:word64]
	sp = sp + 16
	return
	// succ:  check_dev_tty_exit
check_dev_tty_exit:


// same_file
// Return size: 0
void same_file()
same_file_entry:
	// succ:  l000000000042AF9C
l000000000042AF9C:
	sp = fp
	sp = sp + -304
	Mem0[sp:word64] = x29
	sp = sp + 8
	Mem0[sp:word64] = x30
	x29 = x31 + 0x0000000000000000
	v8 = sp + 16
	Mem0[v8:word64] = x19
	v8 = v8 + 8
	Mem0[v8:word64] = x20
	x19 = x2
	x20 = x1
	x2 = x0
	branch x19 == 0x0000000000000000 l000000000042AFF8
	// succ:  l000000000042AFB8 l000000000042AFF8
l000000000042AFB8:
	branch x3 == 0x0000000000000000 l000000000042B020
	// succ:  l000000000042AFBC l000000000042B020
l000000000042AFBC:
	x2 = Mem0[x19:word64]
	x1 = Mem0[x3:word64]
	w0 = 0x00000000
	x31 = x2 - x1
	NZCV = cond(x31)
	branch Test(EQ,Z) l000000000042AFDC
	// succ:  l000000000042AFD0 l000000000042AFDC
l000000000042AFD0:
	v16 = sp + 16
	x19 = Mem0[v16:word64]
	v16 = v16 + 8
	x20 = Mem0[v16:word64]
	x29 = Mem0[sp:word64]
	sp = sp + 8
	x30 = Mem0[sp:word64]
	sp = sp + 304
	return
	// succ:  same_file_exit
l000000000042AFDC:
	x1 = Mem0[x19 + 8:word64]
	x0 = Mem0[x3 + 8:word64]
	v18 = sp + 16
	x19 = Mem0[v18:word64]
	v18 = v18 + 8
	x20 = Mem0[v18:word64]
	x31 = x1 - x0
	NZCV = cond(x31)
	w0 = (word32) Test(EQ,Z)
	x29 = Mem0[sp:word64]
	sp = sp + 8
	x30 = Mem0[sp:word64]
	sp = sp + 304
	return
	// succ:  same_file_exit
l000000000042AFF8:
	w0 = w19
	x1 = x2
	x2 = x29 + 0x00000000000000A0
	Mem0[x29 + 288:word64] = x3
	__xstat(x0, x1, x2)
	sp = sp + 0xFFFFFFFFFFFFFFF8
	x19 = x29 + 0x00000000000000A0
	x3 = Mem0[x29 + 288:word64]
	branch w0 == 0x00000000 l000000000042AFB8
	// succ:  l000000000042B018 l000000000042AFB8
l000000000042B018:
	w0 = 0x00000000
	goto l000000000042AFD0
	// succ:  l000000000042AFD0
l000000000042B020:
	w0 = w3
	x1 = x20
	x2 = x29 + 0x0000000000000020
	__xstat(x0, x1, x2)
	sp = sp + 0xFFFFFFFFFFFFFFF8
	branch w0 != 0x00000000 l000000000042B018
	// succ:  l000000000042B034 l000000000042B018
l000000000042B034:
	x3 = x29 + 0x0000000000000020
	goto l000000000042AFBC
	// succ:  l000000000042AFBC
same_file_exit:


// move_to_high_fd
// Return size: 0
void move_to_high_fd()
move_to_high_fd_entry:
	// succ:  l000000000042B03C
l000000000042B03C:
	sp = fp
	sp = sp + -64
	Mem0[sp:word64] = x29
	sp = sp + 8
	Mem0[sp:word64] = x30
	x29 = x31 + 0x0000000000000000
	v8 = sp + 16
	Mem0[v8:word64] = x19
	v8 = v8 + 8
	Mem0[v8:word64] = x20
	v11 = sp + 32
	Mem0[v11:word64] = x21
	v11 = v11 + 8
	Mem0[v11:word64] = x22
	w31 = w2 - 0x00000013
	NZCV = cond(w31)
	w20 = w0
	w21 = w1
	branch Test(LE,ZCV) l000000000042B0F4
	// succ:  l000000000042B05C l000000000042B0F4
l000000000042B05C:
	w19 = w2 - 0x00000001
	w2 = 0x00000001
	// succ:  l000000000042B064
l000000000042B064:
	NZCV = cond(w21 - w31)
	w3 = (word32) Test(NE,Z)
	w22 = w2 & w3
	NZ = cond(w22)
	C = false
	V = false
	branch Test(NE,Z) l000000000042B084
	// succ:  l000000000042B074 l000000000042B084
l000000000042B074:
	goto l000000000042B14C
	// succ:  l000000000042B14C
l000000000042B078:
	w19 = w19 - 0x00000001
	w31 = w19 - 0x00000003
	NZCV = cond(w31)
	branch Test(LE,ZCV) l000000000042B0E0
	// succ:  l000000000042B084 l000000000042B0E0
l000000000042B084:
	w0 = w19
	w1 = 0x00000001
	x2 = x29 + 0x0000000000000030
	fcntl(x0, x1)
	sp = sp + 0xFFFFFFFFFFFFFFF8
	w31 = w0 + 0x00000001
	NZCV = cond(w31)
	branch Test(NE,Z) l000000000042B078
	// succ:  l000000000042B09C l000000000042B078
l000000000042B09C:
	NZCV = cond(w20 - w19)
	branch Test(EQ,Z) l000000000042B0E0
	// succ:  l000000000042B0A4 l000000000042B0E0
l000000000042B0A4:
	branch w22 == 0x00000000 l000000000042B0E0
	// succ:  l000000000042B0A8 l000000000042B0E0
l000000000042B0A8:
	w1 = w19
	w0 = w20
	call dup2 (retsize: 0;)
	w31 = w0 + 0x00000001
	NZCV = cond(w31)
	w19 = w0
	branch Test(EQ,Z) l000000000042B0E0
	// succ:  l000000000042B0C0 l000000000042B0E0
l000000000042B0C0:
	branch w21 != 0x00000000 l000000000042B114
	// succ:  l000000000042B0C4 l000000000042B114
l000000000042B0C4:
	w0 = w20
	close(x0)
	sp = sp + 0xFFFFFFFFFFFFFFF8
	w0 = w19
	v29 = sp + 32
	x21 = Mem0[v29:word64]
	v29 = v29 + 8
	x22 = Mem0[v29:word64]
	v30 = sp + 16
	x19 = Mem0[v30:word64]
	v30 = v30 + 8
	x20 = Mem0[v30:word64]
	x29 = Mem0[sp:word64]
	sp = sp + 8
	x30 = Mem0[sp:word64]
	sp = sp + 64
	return
	// succ:  move_to_high_fd_exit
l000000000042B0E0:
	w0 = w20
	// succ:  l000000000042B0E4
l000000000042B0E4:
	v31 = sp + 16
	x19 = Mem0[v31:word64]
	v31 = v31 + 8
	x20 = Mem0[v31:word64]
	v32 = sp + 32
	x21 = Mem0[v32:word64]
	v32 = v32 + 8
	x22 = Mem0[v32:word64]
	x29 = Mem0[sp:word64]
	sp = sp + 8
	x30 = Mem0[sp:word64]
	sp = sp + 64
	return
	// succ:  move_to_high_fd_exit
l000000000042B0F4:
	call getdtablesize (retsize: 0;)
	NZCV = cond(w0 - w31)
	branch Test(LE,ZCV) l000000000042B140
	// succ:  l000000000042B100 l000000000042B140
l000000000042B100:
	w31 = w0 - 0x00000100
	NZCV = cond(w31)
	branch Test(LE,ZCV) l000000000042B130
	// succ:  l000000000042B108 l000000000042B130
l000000000042B108:
	w2 = 0x00000001
	w19 = 0x000000FF
	goto l000000000042B064
	// succ:  l000000000042B064
l000000000042B114:
	x0 = 0x00000000004DE000
	x0 = Mem0[x0 + 1640:word64]
	fileno(x0)
	sp = sp + 0xFFFFFFFFFFFFFFF8
	NZCV = cond(w0 - w20)
	branch Test(NE,Z) l000000000042B0C4
	// succ:  l000000000042B128 l000000000042B0C4
l000000000042B128:
	w0 = w19
	goto l000000000042B0E4
	// succ:  l000000000042B0E4
l000000000042B130:
	w19 = w0 - 0x00000001
	w31 = w19 - 0x00000003
	NZCV = cond(w31)
	w2 = (word32) Test(GT,NZV)
	goto l000000000042B064
	// succ:  l000000000042B064
l000000000042B140:
	w2 = 0x00000001
	w19 = 0x00000013
	goto l000000000042B064
	// succ:  l000000000042B064
l000000000042B14C:
	w22 = w2
	goto l000000000042B09C
	// succ:  l000000000042B09C
move_to_high_fd_exit:


// check_binary_file
// Return size: 0
void check_binary_file()
check_binary_file_entry:
	// succ:  l000000000042B154
l000000000042B154:
	sp = fp
	NZCV = cond(w1 - w31)
	branch Test(LE,ZCV) l000000000042B198
	// succ:  l000000000042B15C l000000000042B198
l000000000042B15C:
	v9 = Mem0[x0:byte]
	w2 = (word32) v9
	w31 = w2 - 0x0000000A
	NZCV = cond(w31)
	branch Test(EQ,Z) l000000000042B198
	// succ:  l000000000042B168 l000000000042B198
l000000000042B168:
	branch w2 == 0x00000000 l000000000042B1A0
	// succ:  l000000000042B16C l000000000042B1A0
l000000000042B16C:
	x0 = x0 + 0x0000000000000001
	w1 = w1 - 0x00000001
	x1 = x0 + x1
	goto l000000000042B190
	// succ:  l000000000042B190
l000000000042B17C:
	v14 = Mem0[x0:byte]
	w2 = (word32) v14
	x0 = x0 + 0x0000000000000001
	w31 = w2 - 0x0000000A
	NZCV = cond(w31)
	branch Test(EQ,Z) l000000000042B198
	// succ:  l000000000042B18C l000000000042B198
l000000000042B18C:
	branch w2 == 0x00000000 l000000000042B1A0
	// succ:  l000000000042B190 l000000000042B1A0
l000000000042B190:
	x31 = x0 - x1
	NZCV = cond(x31)
	branch Test(NE,Z) l000000000042B17C
	// succ:  l000000000042B198 l000000000042B17C
l000000000042B198:
	w0 = 0x00000000
	return
	// succ:  check_binary_file_exit
l000000000042B1A0:
	w0 = 0x00000001
	return
	// succ:  check_binary_file_exit
check_binary_file_exit:


// sh_openpipe
// Return size: 0
void sh_openpipe()
sh_openpipe_entry:
	// succ:  l000000000042B1A8
l000000000042B1A8:
	sp = fp
	sp = sp + -32
	Mem0[sp:word64] = x29
	sp = sp + 8
	Mem0[sp:word64] = x30
	x29 = x31 + 0x0000000000000000
	Mem0[sp + 16:word64] = x19
	x19 = x0
	call pipe (retsize: 0;)
	branch (w0 & 0x00000000) == 0x00000000 l000000000042B1EC
	// succ:  l000000000042B1C0 l000000000042B1EC
l000000000042B1C0:
	w0 = Mem0[x19:word32]
	w1 = 0x00000001
	w2 = 0x00000040
	call move_to_high_fd (retsize: 0;)
	Mem0[x19:word32] = w0
	w0 = Mem0[x19 + 4:word32]
	w1 = 0x00000001
	w2 = 0x00000040
	call move_to_high_fd (retsize: 0;)
	Mem0[x19 + 4:word32] = w0
	w0 = 0x00000000
	// succ:  l000000000042B1EC
l000000000042B1EC:
	x19 = Mem0[sp + 16:word64]
	x29 = Mem0[sp:word64]
	sp = sp + 8
	x30 = Mem0[sp:word64]
	sp = sp + 32
	return
	// succ:  sh_openpipe_exit
sh_openpipe_exit:


// sh_closepipe
// Return size: 0
void sh_closepipe()
sh_closepipe_entry:
	// succ:  l000000000042B1F8
l000000000042B1F8:
	sp = fp
	sp = sp + -32
	Mem0[sp:word64] = x29
	sp = sp + 8
	Mem0[sp:word64] = x30
	x29 = x31 + 0x0000000000000000
	Mem0[sp + 16:word64] = x19
	x19 = x0
	w0 = Mem0[x0:word32]
	branch (w0 & 0x00000000) == 0x00000000 l000000000042B214
	// succ:  l000000000042B210 l000000000042B214
l000000000042B210:
	close(x0)
	sp = sp + 0xFFFFFFFFFFFFFFF8
	// succ:  l000000000042B214
l000000000042B214:
	w0 = Mem0[x19 + 4:word32]
	branch (w0 & 0x00000000) == 0x00000000 l000000000042B220
	// succ:  l000000000042B21C l000000000042B220
l000000000042B21C:
	close(x0)
	sp = sp + 0xFFFFFFFFFFFFFFF8
	// succ:  l000000000042B220
l000000000042B220:
	w0 = 0xFFFFFFFF
	Mem0[x19 + 4:word32] = w0
	Mem0[x19:word32] = w0
	w0 = 0x00000000
	x19 = Mem0[sp + 16:word64]
	x29 = Mem0[sp:word64]
	sp = sp + 8
	x30 = Mem0[sp:word64]
	sp = sp + 32
	return
	// succ:  sh_closepipe_exit
sh_closepipe_exit:


// file_exists
// Return size: 0
void file_exists()
file_exists_entry:
	// succ:  l000000000042B23C
l000000000042B23C:
	sp = fp
	sp = sp + -144
	Mem0[sp:word64] = x29
	sp = sp + 8
	Mem0[sp:word64] = x30
	x29 = x31 + 0x0000000000000000
	x1 = x0
	x2 = x29 + 0x0000000000000010
	w0 = 0x00000000
	__xstat(x0, x1, x2)
	sp = sp + 0xFFFFFFFFFFFFFFF8
	NZCV = cond(w0 - w31)
	w0 = (word32) Test(EQ,Z)
	x29 = Mem0[sp:word64]
	sp = sp + 8
	x30 = Mem0[sp:word64]
	sp = sp + 144
	return
	// succ:  file_exists_exit
file_exists_exit:


// file_isdir
// Return size: 0
void file_isdir()
file_isdir_entry:
	// succ:  l000000000042B264
l000000000042B264:
	sp = fp
	sp = sp + -144
	Mem0[sp:word64] = x29
	sp = sp + 8
	Mem0[sp:word64] = x30
	x29 = x31 + 0x0000000000000000
	x1 = x0
	w0 = 0x00000000
	x2 = x29 + 0x0000000000000010
	__xstat(x0, x1, x2)
	sp = sp + 0xFFFFFFFFFFFFFFF8
	w1 = 0x00000000
	branch w0 != 0x00000000 l000000000042B294
	// succ:  l000000000042B284 l000000000042B294
l000000000042B284:
	w0 = Mem0[x29 + 32:word32]
	w0 = w0 & 0x0000F000
	w31 = w0 - (0x00000004 << 12)
	NZCV = cond(w31)
	w1 = (word32) Test(EQ,Z)
	// succ:  l000000000042B294
l000000000042B294:
	w0 = w1
	x29 = Mem0[sp:word64]
	sp = sp + 8
	x30 = Mem0[sp:word64]
	sp = sp + 144
	return
	// succ:  file_isdir_exit
file_isdir_exit:


// file_iswdir
// Return size: 0
void file_iswdir()
file_iswdir_entry:
	// succ:  l000000000042B2A0
l000000000042B2A0:
	sp = fp
	sp = sp + -32
	Mem0[sp:word64] = x29
	sp = sp + 8
	Mem0[sp:word64] = x30
	x29 = x31 + 0x0000000000000000
	Mem0[sp + 16:word64] = x19
	x19 = x0
	call file_isdir (retsize: 0;)
	w1 = 0x00000000
	branch w0 == 0x00000000 l000000000042B2D0
	// succ:  l000000000042B2BC l000000000042B2D0
l000000000042B2BC:
	w1 = 0x00000002
	x0 = x19
	call sh_eaccess (retsize: 0;)
	NZCV = cond(w0 - w31)
	w1 = (word32) Test(EQ,Z)
	// succ:  l000000000042B2D0
l000000000042B2D0:
	w0 = w1
	x19 = Mem0[sp + 16:word64]
	x29 = Mem0[sp:word64]
	sp = sp + 8
	x30 = Mem0[sp:word64]
	sp = sp + 32
	return
	// succ:  file_iswdir_exit
file_iswdir_exit:


// dot_or_dotdot
// Return size: 0
void dot_or_dotdot()
dot_or_dotdot_entry:
	// succ:  l000000000042B2E0
l000000000042B2E0:
	sp = fp
	branch x0 == 0x0000000000000000 l000000000042B314
	// succ:  l000000000042B2E4 l000000000042B314
l000000000042B2E4:
	v5 = Mem0[x0:byte]
	w2 = (word32) v5
	w1 = 0x00000000
	w31 = w2 - 0x0000002E
	NZCV = cond(w31)
	branch Test(EQ,Z) l000000000042B2FC
	// succ:  l000000000042B2F4 l000000000042B2FC
l000000000042B2F4:
	w0 = w1
	return
	// succ:  dot_or_dotdot_exit
l000000000042B2FC:
	v11 = Mem0[x0 + 1:byte]
	w1 = (word32) v11
	branch w1 == 0x00000000 l000000000042B330
	// succ:  l000000000042B304 l000000000042B330
l000000000042B304:
	w31 = w1 - 0x0000002F
	NZCV = cond(w31)
	branch Test(EQ,Z) l000000000042B330
	// succ:  l000000000042B30C l000000000042B330
l000000000042B30C:
	w31 = w1 - 0x0000002E
	NZCV = cond(w31)
	branch Test(EQ,Z) l000000000042B320
	// succ:  l000000000042B314 l000000000042B320
l000000000042B314:
	w1 = 0x00000000
	w0 = w1
	return
	// succ:  dot_or_dotdot_exit
l000000000042B320:
	v12 = Mem0[x0 + 2:byte]
	w0 = (word32) v12
	branch w0 == 0x00000000 l000000000042B330
	// succ:  l000000000042B328 l000000000042B330
l000000000042B328:
	w31 = w0 - 0x0000002F
	NZCV = cond(w31)
	branch Test(NE,Z) l000000000042B314
	// succ:  l000000000042B330 l000000000042B314
l000000000042B330:
	w1 = 0x00000001
	goto l000000000042B2F4
	// succ:  l000000000042B2F4
dot_or_dotdot_exit:


// absolute_pathname
// Return size: 0
void absolute_pathname()
absolute_pathname_entry:
	// succ:  l000000000042B338
l000000000042B338:
	sp = fp
	branch x0 == 0x0000000000000000 l000000000042B358
	// succ:  l000000000042B33C l000000000042B358
l000000000042B33C:
	v5 = Mem0[x0:byte]
	w1 = (word32) v5
	w2 = 0x00000000
	branch w1 == 0x00000000 l000000000042B35C
	// succ:  l000000000042B348 l000000000042B35C
l000000000042B348:
	w31 = w1 - 0x0000002F
	NZCV = cond(w31)
	branch Test(EQ,Z) l000000000042B38C
	// succ:  l000000000042B350 l000000000042B38C
l000000000042B350:
	w31 = w1 - 0x0000002E
	NZCV = cond(w31)
	branch Test(EQ,Z) l000000000042B364
	// succ:  l000000000042B358 l000000000042B364
l000000000042B358:
	w2 = 0x00000000
	// succ:  l000000000042B35C
l000000000042B35C:
	w0 = w2
	return
	// succ:  absolute_pathname_exit
l000000000042B364:
	v10 = Mem0[x0 + 1:byte]
	w1 = (word32) v10
	branch w1 == 0x00000000 l000000000042B38C
	// succ:  l000000000042B36C l000000000042B38C
l000000000042B36C:
	w31 = w1 - 0x0000002F
	NZCV = cond(w31)
	branch Test(EQ,Z) l000000000042B38C
	// succ:  l000000000042B374 l000000000042B38C
l000000000042B374:
	w31 = w1 - 0x0000002E
	NZCV = cond(w31)
	branch Test(NE,Z) l000000000042B358
	// succ:  l000000000042B37C l000000000042B358
l000000000042B37C:
	v12 = Mem0[x0 + 2:byte]
	w0 = (word32) v12
	branch w0 == 0x00000000 l000000000042B38C
	// succ:  l000000000042B384 l000000000042B38C
l000000000042B384:
	w31 = w0 - 0x0000002F
	NZCV = cond(w31)
	branch Test(NE,Z) l000000000042B358
	// succ:  l000000000042B38C l000000000042B358
l000000000042B38C:
	w2 = 0x00000001
	w0 = w2
	return
	// succ:  absolute_pathname_exit
absolute_pathname_exit:


// absolute_program
// Return size: 0
void absolute_program()
absolute_program_entry:
	// succ:  l000000000042B398
l000000000042B398:
	sp = fp
	sp = sp + -16
	Mem0[sp:word64] = x29
	sp = sp + 8
	Mem0[sp:word64] = x30
	x29 = x31 + 0x0000000000000000
	w1 = 0x0000002F
	call mbschr (retsize: 0;)
	x31 = x0 - x31
	NZCV = cond(x31)
	w0 = (word32) Test(NE,Z)
	x29 = Mem0[sp:word64]
	sp = sp + 8
	x30 = Mem0[sp:word64]
	sp = sp + 16
	return
	// succ:  absolute_program_exit
absolute_program_exit:


// make_absolute
// Return size: 0
void make_absolute()
make_absolute_entry:
	// succ:  l000000000042B3B8
l000000000042B3B8:
	sp = fp
	sp = sp + -32
	Mem0[sp:word64] = x29
	sp = sp + 8
	Mem0[sp:word64] = x30
	x29 = x31 + 0x0000000000000000
	Mem0[sp + 16:word64] = x19
	x19 = x0
	branch x1 == 0x0000000000000000 l000000000042B3F0
	// succ:  l000000000042B3CC l000000000042B3F0
l000000000042B3CC:
	v10 = Mem0[x0:byte]
	w0 = (word32) v10
	w31 = w0 - 0x0000002F
	NZCV = cond(w31)
	branch Test(EQ,Z) l000000000042B3F0
	// succ:  l000000000042B3D8 l000000000042B3F0
l000000000042B3D8:
	x0 = x1
	x1 = x19
	x19 = Mem0[sp + 16:word64]
	x29 = Mem0[sp:word64]
	sp = sp + 8
	x30 = Mem0[sp:word64]
	sp = sp + 32
	w2 = 0x00000000
	// succ:  l000000000042B3EC_thunk_sh_makepath
l000000000042B3EC_thunk_sh_makepath:
	call sh_makepath (retsize: 0;)
	return
	// succ:  make_absolute_exit
l000000000042B3F0:
	x0 = x19
	strlen(x0)
	sp = sp + 0xFFFFFFFFFFFFFFF8
	x1 = 0x00000000004AB000
	x1 = x1 + 0xFFFFFFFFFFFFFEE8
	w2 = 0x0000027A
	x0 = x0 + 0x0000000000000001
	call sh_xmalloc (retsize: 0;)
	x1 = x19
	x19 = Mem0[sp + 16:word64]
	x29 = Mem0[sp:word64]
	sp = sp + 8
	x30 = Mem0[sp:word64]
	sp = sp + 32
	strcpy(x0, x1)
	return
	// succ:  make_absolute_exit
make_absolute_exit:


// base_pathname
// Return size: 0
void base_pathname()
base_pathname_entry:
	// succ:  l000000000042B41C
l000000000042B41C:
	sp = fp
	sp = sp + -32
	Mem0[sp:word64] = x29
	sp = sp + 8
	Mem0[sp:word64] = x30
	x29 = x31 + 0x0000000000000000
	Mem0[sp + 16:word64] = x19
	x19 = x0
	v9 = Mem0[x0:byte]
	w0 = (word32) v9
	w31 = w0 - 0x0000002F
	NZCV = cond(w31)
	branch Test(EQ,Z) l000000000042B458
	// succ:  l000000000042B438 l000000000042B458
l000000000042B438:
	x0 = x19
	w1 = 0x0000002F
	strrchr(x0, x1)
	sp = sp + 0xFFFFFFFFFFFFFFF8
	x31 = x0 - x31
	NZCV = cond(x31)
l000000000042B458:
	v15 = Mem0[x19 + 1:byte]
	w1 = (word32) v15
	x0 = x19
	branch w1 != 0x00000000 l000000000042B438
	// succ:  l000000000042B464 l000000000042B438
l000000000042B464:
	x19 = Mem0[sp + 16:word64]
	x29 = Mem0[sp:word64]
	sp = sp + 8
	x30 = Mem0[sp:word64]
	sp = sp + 32
	return
	// succ:  base_pathname_exit
base_pathname_exit:


// polite_directory_format
// Return size: 0
void polite_directory_format()
polite_directory_format_entry:
	// succ:  l000000000042B470
l000000000042B470:
	sp = fp
	sp = sp + -48
	Mem0[sp:word64] = x29
	sp = sp + 8
	Mem0[sp:word64] = x30
	x29 = x31 + 0x0000000000000000
	v8 = sp + 16
	Mem0[v8:word64] = x19
	v8 = v8 + 8
	Mem0[v8:word64] = x20
	x20 = x0
	x0 = 0x00000000004AB000
	x0 = x0 + 0xFFFFFFFFFFFFFA10
	Mem0[sp + 32:word64] = x21
	call get_string_value (retsize: 0;)
	x19 = x0
	branch x0 == 0x0000000000000000 l000000000042B520
	// succ:  l000000000042B498 l000000000042B520
l000000000042B498:
	strlen(x0)
	sp = sp + 0xFFFFFFFFFFFFFFF8
	w31 = w0 - 0x00000001
	NZCV = cond(w31)
	branch Test(LE,ZCV) l000000000042B520
	// succ:  l000000000042B4A4 l000000000042B520
l000000000042B4A4:
l000000000042B520:
	x3 = x20
	x0 = x3
	v16 = sp + 16
	x19 = Mem0[v16:word64]
	v16 = v16 + 8
	x20 = Mem0[v16:word64]
	x21 = Mem0[sp + 32:word64]
	x29 = Mem0[sp:word64]
	sp = sp + 8
	x30 = Mem0[sp:word64]
	sp = sp + 48
	return
	// succ:  polite_directory_format_exit
polite_directory_format_exit:


// trim_pathname
// Return size: 0
void trim_pathname()
trim_pathname_entry:
	// succ:  l000000000042B538
l000000000042B538:
	sp = fp
	sp = sp + -48
	Mem0[sp:word64] = x29
	sp = sp + 8
	Mem0[sp:word64] = x30
	x29 = x31 + 0x0000000000000000
	v8 = sp + 16
	Mem0[v8:word64] = x19
	v8 = v8 + 8
	Mem0[v8:word64] = x20
	x19 = x0
	branch x0 == 0x0000000000000000 l000000000042B558
	// succ:  l000000000042B54C l000000000042B558
l000000000042B54C:
	strlen(x0)
	sp = sp + 0xFFFFFFFFFFFFFFF8
	x20 = x0
	branch w0 != 0x00000000 l000000000042B568
	// succ:  l000000000042B558 l000000000042B568
l000000000042B558:
	x0 = x19
	v11 = sp + 16
	x19 = Mem0[v11:word64]
	v11 = v11 + 8
	x20 = Mem0[v11:word64]
	x29 = Mem0[sp:word64]
	sp = sp + 8
	x30 = Mem0[sp:word64]
	sp = sp + 48
	return
	// succ:  trim_pathname_exit
l000000000042B568:
	x0 = 0x00000000004AB000
	x0 = x0 + 0xFFFFFFFFFFFFFF38
	call get_string_value (retsize: 0;)
	branch x0 == 0x0000000000000000 l000000000042B558
	// succ:  l000000000042B578 l000000000042B558
l000000000042B578:
	v13 = Mem0[x0:byte]
	w1 = (word32) v13
	branch w1 == 0x00000000 l000000000042B558
	// succ:  l000000000042B580 l000000000042B558
l000000000042B580:
	x1 = x29 + 0x0000000000000020
	call legal_number (retsize: 0;)
	branch w0 == 0x00000000 l000000000042B558
	// succ:  l000000000042B58C l000000000042B558
l000000000042B58C:
	x4 = Mem0[x29 + 32:word64]
	x31 = x4 - x31
	NZCV = cond(x31)
	branch Test(LE,ZCV) l000000000042B558
	// succ:  l000000000042B598 l000000000042B558
l000000000042B598:
	v18 = Mem0[x19:byte]
	w0 = (word32) v18
	w31 = w0 - 0x0000007E
	NZCV = cond(w31)
	branch Test(EQ,Z) l000000000042B61C
	// succ:  l000000000042B5A4 l000000000042B61C
l000000000042B5A4:
	x3 = x19
	// succ:  l000000000042B5A8
l000000000042B5A8:
	branch w0 == 0x00000000 l000000000042B558
	// succ:  l000000000042B5AC l000000000042B558
l000000000042B5AC:
	x2 = x3
	w1 = 0x00000000
	w31 = w0 - 0x0000002F
	NZCV = cond(w31)
	x2 = x2 + 1
	v23 = Mem0[x2:byte]
	w0 = (word32) v23
l000000000042B61C:
	x0 = x19
	goto l000000000042B628
	// succ:  l000000000042B628
l000000000042B624:
	x0 = x3
	// succ:  l000000000042B628
l000000000042B628:
	v24 = Mem0[x0 + 1:byte]
	w1 = (word32) v24
	x3 = x0 + 0x0000000000000001
	w31 = w1 - 0x0000002F
	NZCV = cond(w31)
	branch w1 == 0x00000000 l000000000042B558
	// succ:  l000000000042B638 l000000000042B558
l000000000042B638:
	branch Test(NE,Z) l000000000042B624
	// succ:  l000000000042B63C l000000000042B624
l000000000042B63C:
	x3 = x3 + 0x0000000000000001
	v25 = Mem0[x0 + 2:byte]
	w0 = (word32) v25
	goto l000000000042B5A8
	// succ:  l000000000042B5A8
trim_pathname_exit:


// extract_colon_unit
// Return size: 0
void extract_colon_unit()
extract_colon_unit_entry:
	// succ:  l000000000042B690
l000000000042B690:
	sp = fp
	sp = sp + -48
	Mem0[sp:word64] = x29
	sp = sp + 8
	Mem0[sp:word64] = x30
	x29 = x31 + 0x0000000000000000
	Mem0[sp + 16:word64] = x19
	x19 = x0
	branch x0 == 0x0000000000000000 l000000000042B788
	// succ:  l000000000042B6A4 l000000000042B788
l000000000042B6A4:
	Mem0[x29 + 32:word64] = x1
	strlen(x0)
	sp = sp + 0xFFFFFFFFFFFFFFF8
	x1 = Mem0[x29 + 32:word64]
	w6 = Mem0[x1:word32]
	NZCV = cond(w6 - w0)
	branch Test(GE,NZV) l000000000042B794
	// succ:  l000000000042B6BC l000000000042B794
l000000000042B6BC:
	branch w6 == 0x00000000 l000000000042B72C
	// succ:  l000000000042B6C0 l000000000042B72C
l000000000042B6C0:
l000000000042B6D4:
	branch w0 == 0x00000000 l000000000042B738
	// succ:  l000000000042B6D8 l000000000042B738
l000000000042B6D8:
	w31 = w0 - 0x0000003A
	NZCV = cond(w31)
	branch Test(EQ,Z) l000000000042B738
	// succ:  l000000000042B6E0 l000000000042B738
l000000000042B6E0:
l000000000042B72C:
	v13 = Mem0[x19:byte]
	w0 = (word32) v13
	x5 = x19
	goto l000000000042B6D4
	// succ:  l000000000042B6D4
l000000000042B738:
	Mem0[x1:word32] = w6
	v17 = Mem0[x5:byte]
	w0 = (word32) v17
	branch w0 != 0x00000000 l000000000042B768
	// succ:  l000000000042B744 l000000000042B768
l000000000042B744:
	x1 = 0x00000000004AB000
	x0 = 0x0000000000000001
	x1 = x1 + 0xFFFFFFFFFFFFFEE8
	w2 = 0x0000032D
	call sh_xmalloc (retsize: 0;)
	Mem0[x0:byte] = 0x00
	// succ:  l000000000042B75C
l000000000042B75C:
	x19 = Mem0[sp + 16:word64]
	x29 = Mem0[sp:word64]
	sp = sp + 8
	x30 = Mem0[sp:word64]
	sp = sp + 48
	return
	// succ:  extract_colon_unit_exit
l000000000042B768:
	w6 = w6 + 0x00000001
	Mem0[x1:word32] = w6
	goto l000000000042B744
	// succ:  l000000000042B744
l000000000042B788:
	x19 = Mem0[sp + 16:word64]
	x29 = Mem0[sp:word64]
	sp = sp + 8
	x30 = Mem0[sp:word64]
	sp = sp + 48
	return
	// succ:  extract_colon_unit_exit
l000000000042B794:
	x0 = 0x0000000000000000
	goto l000000000042B75C
	// succ:  l000000000042B75C
extract_colon_unit_exit:


// tilde_initialize
// Return size: 0
void tilde_initialize()
tilde_initialize_entry:
	// succ:  l000000000042B79C
l000000000042B79C:
	sp = fp
	sp = sp + -48
	Mem0[sp:word64] = x29
	sp = sp + 8
	Mem0[sp:word64] = x30
	x29 = x31 + 0x0000000000000000
	v8 = sp + 16
	Mem0[v8:word64] = x19
	v8 = v8 + 8
	Mem0[v8:word64] = x20
	x19 = 0x00000000004DF000
	x19 = x19 + 0xFFFFFFFFFFFFFBC8
	w0 = Mem0[x19 + -240:word32]
	x3 = 0x000000000042A000
	w1 = w0 + 0x00000001
	x3 = x3 + 0x00000000000005E8
	x2 = 0x00000000004E2000
	Mem0[sp + 32:word64] = x21
	Mem0[x2 + 3976:word64] = x3
	Mem0[x19 + -240:word32] = w1
	branch w0 != 0x00000000 l000000000042B864
	// succ:  l000000000042B7D4 l000000000042B864
l000000000042B7D4:
	w0 = 0x00000003
	x21 = 0x00000000004AB000
	x20 = 0x00000000004AB000
	call strvec_create (retsize: 0;)
	x20 = x20 + 0xFFFFFFFFFFFFFF50
	x21 = x21 + 0xFFFFFFFFFFFFFF48
	x1 = x0
	Mem0[x0 + 8:word64] = x20
	Mem0[x0:word64] = x21
	Mem0[x0 + 16:word64] = 0x0000000000000000
	w0 = 0x00000002
	Mem0[x19 + -232:word64] = x1
	call strvec_create (retsize: 0;)
	x1 = x0
	x2 = Mem0[x19 + -232:word64]
	Mem0[x0:word64] = x20
	Mem0[x0 + 8:word64] = 0x0000000000000000
	Mem0[x19 + -224:word64] = x1
	w0 = 0x00000003
	x1 = 0x00000000004DE000
	x20 = 0x00000000004AB000
	Mem0[x1 + 1568:word64] = x2
	x20 = x20 + 0xFFFFFFFFFFFFFF58
	call strvec_create (retsize: 0;)
	x1 = x0
	Mem0[x0:word64] = x20
	Mem0[x0 + 8:word64] = x21
	Mem0[x0 + 16:word64] = 0x0000000000000000
	x2 = 0x00000000004DE000
	w0 = 0x00000002
	Mem0[x19 + -216:word64] = x1
	Mem0[x2 + 1576:word64] = x1
	call strvec_create (retsize: 0;)
	Mem0[x19 + -208:word64] = x0
	Mem0[x0:word64] = x20
	Mem0[x0 + 8:word64] = 0x0000000000000000
	// succ:  l000000000042B864
l000000000042B864:
	v16 = sp + 16
	x19 = Mem0[v16:word64]
	v16 = v16 + 8
	x20 = Mem0[v16:word64]
	x21 = Mem0[sp + 32:word64]
	x29 = Mem0[sp:word64]
	sp = sp + 8
	x30 = Mem0[sp:word64]
	sp = sp + 48
	return
	// succ:  tilde_initialize_exit
tilde_initialize_exit:


// bash_tilde_find_word
// Return size: 0
void bash_tilde_find_word()
bash_tilde_find_word_entry:
	// succ:  l000000000042B874
l000000000042B874:
	sp = fp
	sp = sp + -64
	Mem0[sp:word64] = x29
	sp = sp + 8
	Mem0[sp:word64] = x30
	x29 = x31 + 0x0000000000000000
	v8 = sp + 16
	Mem0[v8:word64] = x19
	v8 = v8 + 8
	Mem0[v8:word64] = x20
	v11 = sp + 32
	Mem0[v11:word64] = x21
	v11 = v11 + 8
	Mem0[v11:word64] = x22
	Mem0[sp + 48:word64] = x23
	v15 = Mem0[x0:byte]
	w3 = (word32) v15
	x19 = x0
	w31 = w3 - 0x0000002F
	NZCV = cond(w31)
	x20 = x2
	branch Test(EQ,Z) l000000000042B994
	// succ:  l000000000042B89C l000000000042B994
l000000000042B89C:
	branch w3 == 0x00000000 l000000000042B994
	// succ:  l000000000042B8A0 l000000000042B994
l000000000042B8A0:
	w31 = w3 - 0x0000005C
	NZCV = cond(w31)
	branch Test(EQ,Z) l000000000042B94C
	// succ:  l000000000042B8A8 l000000000042B94C
l000000000042B8A8:
	w31 = w3 - 0x00000027
	NZCV = cond(w31)
	branch Test(EQ,Z) l000000000042B94C
	// succ:  l000000000042B8B0 l000000000042B94C
l000000000042B8B0:
	w31 = w3 - 0x00000022
	NZCV = cond(w31)
	x4 = x0
	branch Test(NE,Z) l000000000042B8DC
	// succ:  l000000000042B8BC l000000000042B8DC
l000000000042B8BC:
	goto l000000000042B94C
	// succ:  l000000000042B94C
l000000000042B8C0:
	w31 = w3 - 0x0000005C
	NZCV = cond(w31)
	branch w3 == 0x00000000 l000000000042B8F4
	// succ:  l000000000042B8C8 l000000000042B8F4
l000000000042B8C8:
	branch Test(EQ,Z) l000000000042B94C
	// succ:  l000000000042B8CC l000000000042B94C
l000000000042B8CC:
	w31 = w3 - 0x00000027
	NZCV = cond(w31)
	branch Test(EQ,Z) l000000000042B94C
	// succ:  l000000000042B8D4 l000000000042B94C
l000000000042B8D4:
	w31 = w3 - 0x00000022
	NZCV = cond(w31)
	branch Test(EQ,Z) l000000000042B94C
	// succ:  l000000000042B8DC l000000000042B94C
l000000000042B8DC:
	w31 = w3 - 0x0000003A
	NZCV = cond(w31)
	branch w1 == 0x00000000 l000000000042B8E8
	// succ:  l000000000042B8E4 l000000000042B8E8
l000000000042B8E4:
	branch Test(EQ,Z) l000000000042B8F4
	// succ:  l000000000042B8E8 l000000000042B8F4
l000000000042B8E8:
	x4 = x4 + 1
	v28 = Mem0[x4:byte]
	w3 = (word32) v28
	w31 = w3 - 0x0000002F
	NZCV = cond(w31)
	branch Test(NE,Z) l000000000042B8C0
	// succ:  l000000000042B8F4 l000000000042B8C0
l000000000042B8F4:
	x4 = x4 - x19
	w0 = w4 + 0x00000001
	w23 = w4
l000000000042B908:
	x1 = 0x00000000004AB000
	x1 = x1 + 0xFFFFFFFFFFFFFEE8
	w2 = 0x000003C0
	call sh_xmalloc (retsize: 0;)
	x21 = x0
	x1 = x19
	x2 = x22
	strncpy(x0, x1, x2)
	sp = sp + 0xFFFFFFFFFFFFFFF8
	Mem0[x21 + x22:byte] = 0x00
	branch x20 == 0x0000000000000000 l000000000042B98C
	// succ:  l000000000042B930 l000000000042B98C
l000000000042B930:
	Mem0[x20:word32] = w23
	x0 = x21
	v25 = sp + 16
	x19 = Mem0[v25:word64]
	v25 = v25 + 8
	x20 = Mem0[v25:word64]
	v26 = sp + 32
	x21 = Mem0[v26:word64]
	v26 = v26 + 8
	x22 = Mem0[v26:word64]
	x23 = Mem0[sp + 48:word64]
	x29 = Mem0[sp:word64]
	sp = sp + 8
	x30 = Mem0[sp:word64]
	sp = sp + 64
	return
	// succ:  bash_tilde_find_word_exit
l000000000042B94C:
	x0 = x19
	strlen(x0)
	sp = sp + 0xFFFFFFFFFFFFFFF8
	x1 = 0x00000000004AB000
	x1 = x1 + 0xFFFFFFFFFFFFFEE8
	w2 = 0x000003B7
	x0 = x0 + 0x0000000000000001
	call sh_xmalloc (retsize: 0;)
	x1 = x19
	strcpy(x0, x1)
	sp = sp + 0xFFFFFFFFFFFFFFF8
	branch x20 == 0x0000000000000000 l000000000042B978
	// succ:  l000000000042B974 l000000000042B978
l000000000042B974:
	Mem0[x20:word32] = 0x00000000
	// succ:  l000000000042B978
l000000000042B978:
	v31 = sp + 16
	x19 = Mem0[v31:word64]
	v31 = v31 + 8
	x20 = Mem0[v31:word64]
	v32 = sp + 32
	x21 = Mem0[v32:word64]
	v32 = v32 + 8
	x22 = Mem0[v32:word64]
	x23 = Mem0[sp + 48:word64]
	x29 = Mem0[sp:word64]
	sp = sp + 8
	x30 = Mem0[sp:word64]
	sp = sp + 64
	return
	// succ:  bash_tilde_find_word_exit
l000000000042B98C:
	x0 = x21
	goto l000000000042B978
	// succ:  l000000000042B978
l000000000042B994:
	x22 = 0x0000000000000000
	x0 = 0x0000000000000001
	w23 = w22
	goto l000000000042B908
	// succ:  l000000000042B908
bash_tilde_find_word_exit:


// bash_tilde_expand
// Return size: 0
void bash_tilde_expand()
bash_tilde_expand_entry:
	// succ:  l000000000042B9A4
l000000000042B9A4:
	sp = fp
	sp = sp + -64
	Mem0[sp:word64] = x29
	sp = sp + 8
	Mem0[sp:word64] = x30
	x29 = x31 + 0x0000000000000000
	v8 = sp + 16
	Mem0[v8:word64] = x19
	v8 = v8 + 8
	Mem0[v8:word64] = x20
	w2 = 0x00000001
	x20 = 0x00000000004E1000
	x19 = 0x00000000004E1000
	v12 = sp + 32
	Mem0[v12:word64] = x21
	v12 = v12 + 8
	Mem0[v12:word64] = x22
	Mem0[sp + 48:word64] = x23
	w22 = Mem0[x20 + 636:word32]
	w23 = Mem0[x19 + 648:word32]
	Mem0[x20 + 636:word32] = w2
	Mem0[x19 + 648:word32] = w2
	x21 = x0
	branch w1 == 0x00000000 l000000000042BA78
	// succ:  l000000000042B9DC l000000000042BA78
l000000000042B9DC:
	x0 = 0x00000000004DF000
	w31 = w1 - 0x00000002
	NZCV = cond(w31)
	x0 = x0 + 0xFFFFFFFFFFFFFBC8
	branch Test(EQ,Z) l000000000042BAB0
	// succ:  l000000000042B9EC l000000000042BAB0
l000000000042B9EC:
	x1 = Mem0[x0 + -232:word64]
	x0 = 0x00000000004DE000
	Mem0[x0 + 1568:word64] = x1
	v23 = Mem0[x21:byte]
	w0 = (word32) v23
	w31 = w0 - 0x0000007E
	NZCV = cond(w31)
	branch Test(NE,Z) l000000000042BA8C
	// succ:  l000000000042BA04 l000000000042BA8C
l000000000042BA04:
	x0 = x21
	// succ:  l000000000042BA08
l000000000042BA08:
	x0 = x0 + 1
	v24 = Mem0[x0:byte]
	w2 = (word32) v24
	w31 = w2 - 0x0000002F
	NZCV = cond(w31)
	branch w2 == 0x00000000 l000000000042BA8C
	// succ:  l000000000042BA14 l000000000042BA8C
l000000000042BA14:
	branch Test(EQ,Z) l000000000042BA8C
	// succ:  l000000000042BA18 l000000000042BA8C
l000000000042BA18:
	w31 = w2 - 0x0000003A
	NZCV = cond(w31)
	branch Test(EQ,Z) l000000000042BA8C
	// succ:  l000000000042BA20 l000000000042BA8C
l000000000042BA20:
	w31 = w2 - 0x00000027
	NZCV = cond(w31)
	branch Test(EQ,Z) l000000000042BA38
	// succ:  l000000000042BA28 l000000000042BA38
l000000000042BA28:
	w31 = w2 - 0x0000005C
	NZCV = cond(w31)
	branch Test(EQ,Z) l000000000042BA38
	// succ:  l000000000042BA30 l000000000042BA38
l000000000042BA30:
	w31 = w2 - 0x00000022
	NZCV = cond(w31)
	branch Test(NE,Z) l000000000042BA08
	// succ:  l000000000042BA38 l000000000042BA08
l000000000042BA38:
	x0 = x21
	strlen(x0)
	sp = sp + 0xFFFFFFFFFFFFFFF8
	x1 = 0x00000000004AB000
	w2 = 0x000003DF
	x1 = x1 + 0xFFFFFFFFFFFFFEE8
	x0 = x0 + 0x0000000000000001
	call sh_xmalloc (retsize: 0;)
	x1 = x21
	strcpy(x0, x1)
	sp = sp + 0xFFFFFFFFFFFFFFF8
	Mem0[x20 + 636:word32] = w22
	Mem0[x19 + 648:word32] = w23
	v25 = sp + 32
	x21 = Mem0[v25:word64]
	v25 = v25 + 8
	x22 = Mem0[v25:word64]
	v26 = sp + 16
	x19 = Mem0[v26:word64]
	v26 = v26 + 8
	x20 = Mem0[v26:word64]
	x23 = Mem0[sp + 48:word64]
	x29 = Mem0[sp:word64]
	sp = sp + 8
	x30 = Mem0[sp:word64]
	sp = sp + 64
	return
	// succ:  bash_tilde_expand_exit
l000000000042BA78:
	x0 = 0x00000000004DE000
	Mem0[x0 + 1568:word64] = 0x0000000000000000
	// succ:  l000000000042BA80
l000000000042BA80:
	v27 = Mem0[x21:byte]
	w0 = (word32) v27
	w31 = w0 - 0x0000007E
	NZCV = cond(w31)
	branch Test(EQ,Z) l000000000042BA04
	// succ:  l000000000042BA8C l000000000042BA04
l000000000042BA8C:
	x0 = x21
	call tilde_expand (retsize: 0;)
	Mem0[x20 + 636:word32] = w22
	Mem0[x19 + 648:word32] = w23
	v28 = sp + 32
	x21 = Mem0[v28:word64]
	v28 = v28 + 8
	x22 = Mem0[v28:word64]
	v29 = sp + 16
	x19 = Mem0[v29:word64]
	v29 = v29 + 8
	x20 = Mem0[v29:word64]
	x23 = Mem0[sp + 48:word64]
	x29 = Mem0[sp:word64]
	sp = sp + 8
	x30 = Mem0[sp:word64]
	sp = sp + 64
	return
	// succ:  bash_tilde_expand_exit
l000000000042BAB0:
	x2 = Mem0[x0 + -224:word64]
	x1 = Mem0[x0 + -208:word64]
	x0 = 0x00000000004DE000
	Mem0[x0 + 1568:word64] = x2
	x0 = 0x00000000004DE000
	Mem0[x0 + 1576:word64] = x1
	goto l000000000042BA80
	// succ:  l000000000042BA80
bash_tilde_expand_exit:


// full_pathname
// Return size: 0
void full_pathname()
full_pathname_entry:
	// succ:  l000000000042BACC
l000000000042BACC:
	sp = fp
	sp = sp + -32
	Mem0[sp:word64] = x29
	sp = sp + 8
	Mem0[sp:word64] = x30
	x29 = x31 + 0x0000000000000000
	v8 = sp + 16
	Mem0[v8:word64] = x19
	v8 = v8 + 8
	Mem0[v8:word64] = x20
	v11 = Mem0[x0:byte]
	w1 = (word32) v11
	x19 = x0
	w31 = w1 - 0x0000007E
	NZCV = cond(w31)
	branch Test(EQ,Z) l000000000042BB54
	// succ:  l000000000042BAE8 l000000000042BB54
l000000000042BAE8:
	strlen(x0)
	sp = sp + 0xFFFFFFFFFFFFFFF8
	x1 = 0x00000000004AB000
	x1 = x1 + 0xFFFFFFFFFFFFFEE8
	w2 = 0x000002A0
	x0 = x0 + 0x0000000000000001
	call sh_xmalloc (retsize: 0;)
	x1 = x19
	strcpy(x0, x1)
	sp = sp + 0xFFFFFFFFFFFFFFF8
	// succ:  l000000000042BB08
l000000000042BB08:
	v17 = Mem0[x0:byte]
	w1 = (word32) v17
	x19 = x0
	w31 = w1 - 0x0000002F
	NZCV = cond(w31)
	branch Test(EQ,Z) l000000000042BB44
	// succ:  l000000000042BB18 l000000000042BB44
l000000000042BB18:
	x1 = x0
	w2 = 0x00000006
	x0 = 0x0000000000000000
	call sh_makepath (retsize: 0;)
	x1 = 0x00000000004AB000
	x20 = x0
	x1 = x1 + 0xFFFFFFFFFFFFFEE8
	x0 = x19
	w2 = 0x000002A6
	call sh_xfree (retsize: 0;)
	x19 = x20
	// succ:  l000000000042BB44
l000000000042BB44:
	x0 = x19
	v18 = sp + 16
	x19 = Mem0[v18:word64]
	v18 = v18 + 8
	x20 = Mem0[v18:word64]
	x29 = Mem0[sp:word64]
	sp = sp + 8
	x30 = Mem0[sp:word64]
	sp = sp + 32
	return
	// succ:  full_pathname_exit
l000000000042BB54:
	w1 = 0x00000000
	call bash_tilde_expand (retsize: 0;)
	goto l000000000042BB08
	// succ:  l000000000042BB08
full_pathname_exit:


// group_member
// Return size: 0
void group_member()
group_member_entry:
	// succ:  l000000000042BB60
l000000000042BB60:
	sp = fp
	sp = sp + -48
	Mem0[sp:word64] = x29
	sp = sp + 8
	Mem0[sp:word64] = x30
	x29 = x31 + 0x0000000000000000
	x1 = 0x00000000004D6000
	x1 = x1 + 0x0000000000000660
	w2 = Mem0[x1 + 8:word32]
	v10 = sp + 16
	Mem0[v10:word64] = x19
	v10 = v10 + 8
	Mem0[v10:word64] = x20
	NZCV = cond(w2 - w0)
	branch Test(EQ,Z) l000000000042BBE0
	// succ:  l000000000042BB80 l000000000042BBE0
l000000000042BB80:
	w1 = Mem0[x1 + 12:word32]
	NZCV = cond(w1 - w0)
	branch Test(EQ,Z) l000000000042BBE0
	// succ:  l000000000042BB8C l000000000042BBE0
l000000000042BB8C:
	x19 = 0x00000000004DE000
	x20 = x19 + 0xFFFFFFFFFFFFFAC8
	w3 = Mem0[x20 + 4:word32]
	branch w3 == 0x00000000 l000000000042BBF0
	// succ:  l000000000042BB9C l000000000042BBF0
l000000000042BB9C:
	NZCV = cond(w3 - w31)
	branch Test(LE,ZCV) l000000000042BBD0
	// succ:  l000000000042BBA4 l000000000042BBD0
l000000000042BBA4:
	x19 = x19 + 0xFFFFFFFFFFFFFAC8
	x1 = Mem0[x19 + 8:word64]
	w3 = w3 - 0x00000001
	x2 = x1 + 0x0000000000000004
	x3 = x2 + (uint64) ((word32) w3)
	// succ:  l000000000042BBB8
l000000000042BBB8:
	w2 = Mem0[x1:word32]
	x1 = x1 + 0x0000000000000004
	NZCV = cond(w2 - w0)
	branch Test(EQ,Z) l000000000042BBE0
	// succ:  l000000000042BBC8 l000000000042BBE0
l000000000042BBC8:
	x31 = x1 - x3
	NZCV = cond(x31)
	branch Test(NE,Z) l000000000042BBB8
	// succ:  l000000000042BBD0 l000000000042BBB8
l000000000042BBD0:
	w0 = 0x00000000
	v20 = sp + 16
	x19 = Mem0[v20:word64]
	v20 = v20 + 8
	x20 = Mem0[v20:word64]
	x29 = Mem0[sp:word64]
	sp = sp + 8
	x30 = Mem0[sp:word64]
	sp = sp + 48
	return
	// succ:  group_member_exit
l000000000042BBE0:
	w0 = 0x00000001
	v21 = sp + 16
	x19 = Mem0[v21:word64]
	v21 = v21 + 8
	x20 = Mem0[v21:word64]
	x29 = Mem0[sp:word64]
	sp = sp + 8
	x30 = Mem0[sp:word64]
	sp = sp + 48
	return
	// succ:  group_member_exit
l000000000042BBF0:
	Mem0[x29 + 32:word64] = x0
	call fn000000000042A6B0 (retsize: 0;)
	w3 = Mem0[x20 + 4:word32]
	x0 = Mem0[x29 + 32:word64]
	goto l000000000042BB9C
	// succ:  l000000000042BB9C
group_member_exit:


// get_group_list
// Return size: 0
void get_group_list()
get_group_list_entry:
	// succ:  l000000000042BC04
l000000000042BC04:
	sp = fp
	sp = sp + -80
	Mem0[sp:word64] = x29
	sp = sp + 8
	Mem0[sp:word64] = x30
	x29 = x31 + 0x0000000000000000
	v8 = sp + 32
	Mem0[v8:word64] = x21
	v8 = v8 + 8
	Mem0[v8:word64] = x22
	x22 = 0x00000000004DF000
	x1 = x22 + 0xFFFFFFFFFFFFFBC8
	x1 = Mem0[x1 + -200:word64]
	v12 = sp + 16
	Mem0[v12:word64] = x19
	v12 = v12 + 8
	Mem0[v12:word64] = x20
	v15 = sp + 48
	Mem0[v15:word64] = x23
	v15 = v15 + 8
	Mem0[v15:word64] = x24
	v18 = sp + 64
	Mem0[v18:word64] = x25
	v18 = v18 + 8
	Mem0[v18:word64] = x26
	x20 = x0
	branch x1 == 0x0000000000000000 l000000000042BC60
	// succ:  l000000000042BC30 l000000000042BC60
l000000000042BC30:
	branch x0 == 0x0000000000000000 l000000000042BCE4
	// succ:  l000000000042BC34 l000000000042BCE4
l000000000042BC34:
	x0 = 0x00000000004DE000
	x0 = x0 + 0xFFFFFFFFFFFFFAC8
	w2 = Mem0[x0 + 4:word32]
	x0 = x1
	Mem0[x20:word32] = w2
	// succ:  l000000000042BC48
l000000000042BC48:
	v21 = sp + 16
	x19 = Mem0[v21:word64]
	v21 = v21 + 8
	x20 = Mem0[v21:word64]
	v22 = sp + 32
	x21 = Mem0[v22:word64]
	v22 = v22 + 8
	x22 = Mem0[v22:word64]
	v23 = sp + 48
	x23 = Mem0[v23:word64]
	v23 = v23 + 8
	x24 = Mem0[v23:word64]
	v24 = sp + 64
	x25 = Mem0[v24:word64]
	v24 = v24 + 8
	x26 = Mem0[v24:word64]
	x29 = Mem0[sp:word64]
	sp = sp + 8
	x30 = Mem0[sp:word64]
	sp = sp + 80
	return
	// succ:  get_group_list_exit
l000000000042BC60:
	x23 = 0x00000000004DE000
	x19 = x23 + 0xFFFFFFFFFFFFFAC8
	w0 = Mem0[x19 + 4:word32]
	branch w0 == 0x00000000 l000000000042BCFC
	// succ:  l000000000042BC70 l000000000042BCFC
l000000000042BC70:
	NZCV = cond(w0 - w31)
	branch Test(LE,ZCV) l000000000042BCEC
	// succ:  l000000000042BC78 l000000000042BCEC
l000000000042BC78:
	call strvec_create (retsize: 0;)
	x23 = x23 + 0xFFFFFFFFFFFFFAC8
	w2 = Mem0[x23 + 4:word32]
	x26 = x22 + 0xFFFFFFFFFFFFFBC8
	Mem0[x26 + -200:word64] = x0
	NZCV = cond(w2 - w31)
	branch Test(LE,ZCV) l000000000042BCD8
	// succ:  l000000000042BC94 l000000000042BCD8
l000000000042BC94:
	x19 = 0x0000000000000000
	x24 = x0
	w21 = w19
	// succ:  l000000000042BCA8
l000000000042BCA8:
	x2 = Mem0[x23 + 8:word64]
l000000000042BCD8:
	branch x20 == 0x0000000000000000 l000000000042BC48
	// succ:  l000000000042BCDC l000000000042BC48
l000000000042BCDC:
	Mem0[x20:word32] = w2
	goto l000000000042BC48
	// succ:  l000000000042BC48
l000000000042BCE4:
	x0 = x1
	goto l000000000042BC48
	// succ:  l000000000042BC48
l000000000042BCEC:
	branch x20 == 0x0000000000000000 l000000000042BD08
	// succ:  l000000000042BCF0 l000000000042BD08
l000000000042BCF0:
	Mem0[x20:word32] = 0x00000000
	x0 = 0x0000000000000000
	goto l000000000042BC48
	// succ:  l000000000042BC48
l000000000042BCFC:
	call fn000000000042A6B0 (retsize: 0;)
	w0 = Mem0[x19 + 4:word32]
	goto l000000000042BC70
	// succ:  l000000000042BC70
l000000000042BD08:
	x0 = x20
	goto l000000000042BC48
	// succ:  l000000000042BC48
get_group_list_exit:


// get_group_array
// Return size: 0
void get_group_array()
get_group_array_entry:
	// succ:  l000000000042BD10
l000000000042BD10:
	sp = fp
	sp = sp + -48
	Mem0[sp:word64] = x29
	sp = sp + 8
	Mem0[sp:word64] = x30
	x29 = x31 + 0x0000000000000000
	v8 = sp + 16
	Mem0[v8:word64] = x19
	v8 = v8 + 8
	Mem0[v8:word64] = x20
	x20 = 0x00000000004DF000
	x1 = x20 + 0xFFFFFFFFFFFFFBC8
	x1 = Mem0[x1 + -192:word64]
	v12 = sp + 32
	Mem0[v12:word64] = x21
	v12 = v12 + 8
	Mem0[v12:word64] = x22
	x19 = x0
	branch x1 == 0x0000000000000000 l000000000042BD5C
	// succ:  l000000000042BD34 l000000000042BD5C
l000000000042BD34:
	branch x0 == 0x0000000000000000 l000000000042BDD4
	// succ:  l000000000042BD38 l000000000042BDD4
l000000000042BD38:
	x0 = 0x00000000004DE000
	x0 = x0 + 0xFFFFFFFFFFFFFAC8
	w2 = Mem0[x0 + 4:word32]
	x0 = x1
	Mem0[x19:word32] = w2
	// succ:  l000000000042BD4C
l000000000042BD4C:
	v15 = sp + 16
	x19 = Mem0[v15:word64]
	v15 = v15 + 8
	x20 = Mem0[v15:word64]
	v16 = sp + 32
	x21 = Mem0[v16:word64]
	v16 = v16 + 8
	x22 = Mem0[v16:word64]
	x29 = Mem0[sp:word64]
	sp = sp + 8
	x30 = Mem0[sp:word64]
	sp = sp + 48
	return
	// succ:  get_group_array_exit
l000000000042BD5C:
	x21 = 0x00000000004DE000
	x22 = x21 + 0xFFFFFFFFFFFFFAC8
	w0 = Mem0[x22 + 4:word32]
	branch w0 == 0x00000000 l000000000042BDEC
	// succ:  l000000000042BD6C l000000000042BDEC
l000000000042BD6C:
	NZCV = cond(w0 - w31)
	branch Test(LE,ZCV) l000000000042BDDC
	// succ:  l000000000042BD74 l000000000042BDDC
l000000000042BD74:
	x1 = 0x00000000004AB000
l000000000042BDD4:
	x0 = x1
	goto l000000000042BD4C
	// succ:  l000000000042BD4C
l000000000042BDDC:
	branch x19 == 0x0000000000000000 l000000000042BDF8
	// succ:  l000000000042BDE0 l000000000042BDF8
l000000000042BDE0:
	Mem0[x19:word32] = 0x00000000
	x0 = 0x0000000000000000
	goto l000000000042BD4C
	// succ:  l000000000042BD4C
l000000000042BDEC:
	call fn000000000042A6B0 (retsize: 0;)
	w0 = Mem0[x22 + 4:word32]
	goto l000000000042BD6C
	// succ:  l000000000042BD6C
l000000000042BDF8:
	x0 = x19
	goto l000000000042BD4C
	// succ:  l000000000042BD4C
get_group_array_exit:


// cmd_init
// Return size: 0
void cmd_init()
cmd_init_entry:
	// succ:  l000000000042BE00
l000000000042BE00:
	sp = fp
	sp = sp + -48
	Mem0[sp:word64] = x29
	sp = sp + 8
	Mem0[sp:word64] = x30
	x29 = x31 + 0x0000000000000000
	Mem0[sp + 32:word64] = x21
	x21 = 0x00000000004AB000
	x21 = x21 + 0xFFFFFFFFFFFFFFA0
	v9 = sp + 16
	Mem0[v9:word64] = x19
	v9 = v9 + 8
	Mem0[v9:word64] = x20
	x1 = x21
	w2 = 0x0000004C
	x0 = 0x00000000000001E0
	x19 = 0x00000000004DF000
	call sh_xmalloc (retsize: 0;)
	x19 = x19 + 0xFFFFFFFFFFFFFB10
	Mem0[x19:word64] = x0
	w20 = 0x0000003C
	x1 = x21
	w2 = 0x0000004D
	x0 = 0x00000000000001E0
	Mem0[x19 + 8:word32] = w20
	Mem0[x19 + 12:word32] = 0x00000000
	call sh_xmalloc (retsize: 0;)
	Mem0[x19 + 16:word64] = x0
	Mem0[x19 + 24:word32] = w20
	Mem0[x19 + 28:word32] = 0x00000000
	x21 = Mem0[sp + 32:word64]
	v14 = sp + 16
	x19 = Mem0[v14:word64]
	v14 = v14 + 8
	x20 = Mem0[v14:word64]
	x29 = Mem0[sp:word64]
	sp = sp + 8
	x30 = Mem0[sp:word64]
	sp = sp + 48
	return
	// succ:  cmd_init_exit
cmd_init_exit:


// alloc_word_desc
// Return size: 0
void alloc_word_desc()
alloc_word_desc_entry:
	// succ:  l000000000042BE6C
l000000000042BE6C:
	sp = fp
	sp = sp + -16
	Mem0[sp:word64] = x29
	sp = sp + 8
	Mem0[sp:word64] = x30
	x29 = x31 + 0x0000000000000000
	x0 = 0x00000000004DF000
	x0 = x0 + 0xFFFFFFFFFFFFFB10
	w1 = Mem0[x0 + 12:word32]
	NZCV = cond(w1 - w31)
	branch Test(LE,ZCV) l000000000042BEA8
	// succ:  l000000000042BE88 l000000000042BEA8
l000000000042BE88:
	x2 = Mem0[x0:word64]
	w1 = w1 - 0x00000001
	Mem0[x0 + 12:word32] = w1
	x0 = Mem0[x2 + (int64) ((int32) w1):word64]
	Mem0[x0 + 8:word32] = 0x00000000
	Mem0[x0:word64] = 0x0000000000000000
	x29 = Mem0[sp:word64]
	sp = sp + 8
	x30 = Mem0[sp:word64]
	sp = sp + 16
	return
	// succ:  alloc_word_desc_exit
l000000000042BEA8:
	x1 = 0x00000000004AB000
	x1 = x1 + 0xFFFFFFFFFFFFFFA0
	w2 = 0x00000055
	x0 = 0x0000000000000010
	call sh_xmalloc (retsize: 0;)
	Mem0[x0 + 8:word32] = 0x00000000
	Mem0[x0:word64] = 0x0000000000000000
	x29 = Mem0[sp:word64]
	sp = sp + 8
	x30 = Mem0[sp:word64]
	sp = sp + 16
	return
	// succ:  alloc_word_desc_exit
alloc_word_desc_exit:


// make_bare_word
// Return size: 0
void make_bare_word()
make_bare_word_entry:
	// succ:  l000000000042BECC
l000000000042BECC:
	sp = fp
	sp = sp + -48
	Mem0[sp:word64] = x29
	sp = sp + 8
	Mem0[sp:word64] = x30
	x29 = x31 + 0x0000000000000000
	v8 = sp + 16
	Mem0[v8:word64] = x19
	v8 = v8 + 8
	Mem0[v8:word64] = x20
	x20 = x0
	Mem0[sp + 32:word64] = x21
	call alloc_word_desc (retsize: 0;)
	v12 = Mem0[x20:byte]
	w21 = (word32) v12
	x19 = x0
	branch w21 != 0x00000000 l000000000042BF20
	// succ:  l000000000042BEF0 l000000000042BF20
l000000000042BEF0:
	x1 = 0x00000000004AB000
	x1 = x1 + 0xFFFFFFFFFFFFFFA0
	w2 = 0x00000067
	x0 = 0x0000000000000001
	call sh_xmalloc (retsize: 0;)
	Mem0[x19:word64] = x0
	Mem0[x0:byte] = (byte) w21
	x21 = Mem0[sp + 32:word64]
	x0 = x19
	v15 = sp + 16
	x19 = Mem0[v15:word64]
	v15 = v15 + 8
	x20 = Mem0[v15:word64]
	x29 = Mem0[sp:word64]
	sp = sp + 8
	x30 = Mem0[sp:word64]
	sp = sp + 48
	return
	// succ:  make_bare_word_exit
l000000000042BF20:
	x0 = x20
	strlen(x0)
	sp = sp + 0xFFFFFFFFFFFFFFF8
	x1 = 0x00000000004AB000
	w2 = 0x00000064
	x1 = x1 + 0xFFFFFFFFFFFFFFA0
	x0 = x0 + 0x0000000000000001
	call sh_xmalloc (retsize: 0;)
	x1 = x20
	strcpy(x0, x1)
	sp = sp + 0xFFFFFFFFFFFFFFF8
	Mem0[x19:word64] = x0
	x21 = Mem0[sp + 32:word64]
	x0 = x19
	v16 = sp + 16
	x19 = Mem0[v16:word64]
	v16 = v16 + 8
	x20 = Mem0[v16:word64]
	x29 = Mem0[sp:word64]
	sp = sp + 8
	x30 = Mem0[sp:word64]
	sp = sp + 48
	return
	// succ:  make_bare_word_exit
make_bare_word_exit:


// make_word_flags
// Return size: 0
void make_word_flags()
make_word_flags_entry:
	// succ:  l000000000042BF5C
l000000000042BF5C:
	sp = fp
	sp = sp + -96
	Mem0[sp:word64] = x29
	sp = sp + 8
	Mem0[sp:word64] = x30
	x29 = x31 + 0x0000000000000000
	v6 = sp + 32
	Mem0[v6:word64] = x21
	v6 = v6 + 8
	Mem0[v6:word64] = x22
	x22 = x0
	x0 = x1
	v11 = sp + 16
	Mem0[v11:word64] = x19
	v11 = v11 + 8
	Mem0[v11:word64] = x20
	v14 = sp + 48
	Mem0[v14:word64] = x23
	v14 = v14 + 8
	Mem0[v14:word64] = x24
	Mem0[sp + 64:word64] = x25
	x21 = x1
	Mem0[x29 + 80:word64] = 0x0000000000000000
	x25 = 0x00000000004C2000
	strlen(x0)
	sp = sp + 0xFFFFFFFFFFFFFFF8
	x23 = x0
	w20 = 0x00000000
	x25 = x25 + 0xFFFFFFFFFFFFFCC0
make_word_flags_exit:


// make_word
// Return size: 0
void make_word()
make_word_entry:
	// succ:  l000000000042C080
l000000000042C080:
	sp = fp
	sp = sp + -32
	Mem0[sp:word64] = x29
	sp = sp + 8
	Mem0[sp:word64] = x30
	x29 = x31 + 0x0000000000000000
	Mem0[x29 + 16:word64] = x0
	call make_bare_word (retsize: 0;)
	x1 = Mem0[x29 + 16:word64]
	x29 = Mem0[sp:word64]
	sp = sp + 8
	x30 = Mem0[sp:word64]
	sp = sp + 32
	// succ:  l000000000042C098_thunk_make_word_flags
l000000000042C098_thunk_make_word_flags:
	call make_word_flags (retsize: 0;)
	return
	// succ:  make_word_exit
make_word_exit:


// make_word_from_token
// Return size: 0
void make_word_from_token()
make_word_from_token_entry:
	// succ:  l000000000042C09C
l000000000042C09C:
	sp = fp
	sp = sp + -32
	Mem0[sp:word64] = x29
	sp = sp + 8
	Mem0[sp:word64] = x30
	x29 = x31 + 0x0000000000000000
	Mem0[x29 + 16:byte] = (byte) w0
	x0 = x29 + 0x0000000000000010
	Mem0[x29 + 17:byte] = 0x00
	call make_word (retsize: 0;)
	x29 = Mem0[sp:word64]
	sp = sp + 8
	x30 = Mem0[sp:word64]
	sp = sp + 32
	return
	// succ:  make_word_from_token_exit
make_word_from_token_exit:


// make_word_list
// Return size: 0
void make_word_list()
make_word_list_entry:
	// succ:  l000000000042C0BC
l000000000042C0BC:
	sp = fp
	sp = sp + -32
	Mem0[sp:word64] = x29
	sp = sp + 8
	Mem0[sp:word64] = x30
	x29 = x31 + 0x0000000000000000
	x2 = 0x00000000004DF000
	x2 = x2 + 0xFFFFFFFFFFFFFB10
	w3 = Mem0[x2 + 28:word32]
	v10 = sp + 16
	Mem0[v10:word64] = x19
	v10 = v10 + 8
	Mem0[v10:word64] = x20
	NZCV = cond(w3 - w31)
	x20 = x0
	x19 = x1
	branch Test(LE,ZCV) l000000000042C108
	// succ:  l000000000042C0E4 l000000000042C108
l000000000042C0E4:
	x0 = Mem0[x2 + 16:word64]
	w3 = w3 - 0x00000001
	x0 = Mem0[x0 + (int64) ((int32) w3):word64]
	Mem0[x2 + 28:word32] = w3
	Mem0[x0 + 8:word64] = x20
	Mem0[x0:word64] = x19
	v16 = sp + 16
	x19 = Mem0[v16:word64]
	v16 = v16 + 8
	x20 = Mem0[v16:word64]
	x29 = Mem0[sp:word64]
	sp = sp + 8
	x30 = Mem0[sp:word64]
	sp = sp + 32
	return
	// succ:  make_word_list_exit
l000000000042C108:
	x1 = 0x00000000004AB000
	x1 = x1 + 0xFFFFFFFFFFFFFFA0
	w2 = 0x000000AC
	x0 = 0x0000000000000010
	call sh_xmalloc (retsize: 0;)
	Mem0[x0 + 8:word64] = x20
	Mem0[x0:word64] = x19
	v18 = sp + 16
	x19 = Mem0[v18:word64]
	v18 = v18 + 8
	x20 = Mem0[v18:word64]
	x29 = Mem0[sp:word64]
	sp = sp + 8
	x30 = Mem0[sp:word64]
	sp = sp + 32
	return
	// succ:  make_word_list_exit
make_word_list_exit:


// fn000000000042C130
// Return size: 0
void fn000000000042C130()
fn000000000042C130_entry:
	// succ:  l000000000042C130
l000000000042C130:
	sp = fp
	sp = sp + -16
	Mem0[sp:word64] = x29
	sp = sp + 8
	Mem0[sp:word64] = x30
	x29 = x31 + 0x0000000000000000
	branch x0 == 0x0000000000000000 l000000000042C168
	// succ:  l000000000042C13C l000000000042C168
l000000000042C13C:
	v8 = Mem0[x0:byte]
	w1 = (word32) v8
	branch w1 == 0x00000000 l000000000042C168
	// succ:  l000000000042C144 l000000000042C168
l000000000042C144:
	call make_word (retsize: 0;)
	w3 = Mem0[x0 + 8:word32]
	w2 = 0x00000032
	w2 = DPB(w2, 0x00000008, 16)
	w2 = w3 | w2
	Mem0[x0 + 8:word32] = w2
	x29 = Mem0[sp:word64]
	sp = sp + 8
	x30 = Mem0[sp:word64]
	sp = sp + 16
	x1 = 0x0000000000000000
	// succ:  l000000000042C164_thunk_make_word_list
l000000000042C164_thunk_make_word_list:
	call make_word_list (retsize: 0;)
	return
	// succ:  fn000000000042C130_exit
l000000000042C168:
	x0 = 0x0000000000000000
	x29 = Mem0[sp:word64]
	sp = sp + 8
	x30 = Mem0[sp:word64]
	sp = sp + 16
	return
	// succ:  fn000000000042C130_exit
fn000000000042C130_exit:


// make_command
// Return size: 0
void make_command()
make_command_entry:
	// succ:  l000000000042C174
l000000000042C174:
	sp = fp
	sp = sp + -32
	Mem0[sp:word64] = x29
	sp = sp + 8
	Mem0[sp:word64] = x30
	x29 = x31 + 0x0000000000000000
	v6 = sp + 16
	Mem0[v6:word64] = x19
	v6 = v6 + 8
	Mem0[v6:word64] = x20
	x19 = x1
	x1 = 0x00000000004AB000
	w20 = w0
	x1 = x1 + 0xFFFFFFFFFFFFFFA0
	w2 = 0x000000BA
	x0 = 0x0000000000000020
	call sh_xmalloc (retsize: 0;)
	Mem0[x0:word32] = w20
	Mem0[x0 + 24:word64] = x19
	Mem0[x0 + 4:word32] = 0x00000000
	Mem0[x19:word32] = 0x00000000
	Mem0[x0 + 16:word64] = 0x0000000000000000
	v14 = sp + 16
	x19 = Mem0[v14:word64]
	v14 = v14 + 8
	x20 = Mem0[v14:word64]
	x29 = Mem0[sp:word64]
	sp = sp + 8
	x30 = Mem0[sp:word64]
	sp = sp + 32
	return
	// succ:  make_command_exit
make_command_exit:


// command_connect
// Return size: 0
void command_connect()
command_connect_entry:
	// succ:  l000000000042C1BC
l000000000042C1BC:
	sp = fp
	sp = sp + -48
	Mem0[sp:word64] = x29
	sp = sp + 8
	Mem0[sp:word64] = x30
	x29 = x31 + 0x0000000000000000
	v6 = sp + 16
	Mem0[v6:word64] = x19
	v6 = v6 + 8
	Mem0[v6:word64] = x20
	x19 = x1
	x1 = 0x00000000004AB000
	Mem0[sp + 32:word64] = x21
	x20 = x0
	w21 = w2
	x1 = x1 + 0xFFFFFFFFFFFFFFA0
	w2 = 0x000000C9
	x0 = 0x0000000000000020
	call sh_xmalloc (retsize: 0;)
	Mem0[x0 + 24:word32] = w21
	Mem0[x0 + 8:word64] = x20
	Mem0[x0 + 16:word64] = x19
	x21 = Mem0[sp + 32:word64]
	v14 = sp + 16
	x19 = Mem0[v14:word64]
	v14 = v14 + 8
	x20 = Mem0[v14:word64]
	x29 = Mem0[sp:word64]
	sp = sp + 8
	x30 = Mem0[sp:word64]
	sp = sp + 48
	x1 = x0
	w0 = 0x00000006
	// succ:  l000000000042C20C_thunk_make_command
l000000000042C20C_thunk_make_command:
	call make_command (retsize: 0;)
	return
	// succ:  command_connect_exit
command_connect_exit:


// make_for_command
// Return size: 0
void make_for_command()
make_for_command_entry:
	// succ:  l000000000042C210
l000000000042C210:
	sp = fp
	sp = sp + -64
	Mem0[sp:word64] = x29
	sp = sp + 8
	Mem0[sp:word64] = x30
	x29 = x31 + 0x0000000000000000
	v8 = sp + 16
	Mem0[v8:word64] = x19
	v8 = v8 + 8
	Mem0[v8:word64] = x20
	x20 = x1
	x1 = 0x00000000004AB000
	Mem0[sp + 32:word64] = x21
	x19 = x2
	x21 = x0
	x1 = x1 + 0xFFFFFFFFFFFFFFA0
	w2 = 0x000000DA
	x0 = 0x0000000000000020
	Mem0[x29 + 48:word64] = x3
	call sh_xmalloc (retsize: 0;)
	x3 = Mem0[x29 + 48:word64]
	Mem0[x0 + 8:word64] = x21
	Mem0[x0 + 16:word64] = x20
	Mem0[x0 + 24:word64] = x19
	Mem0[x0:word32] = 0x00000000
	Mem0[x0 + 4:word32] = w3
	v16 = sp + 16
	x19 = Mem0[v16:word64]
	v16 = v16 + 8
	x20 = Mem0[v16:word64]
	x21 = Mem0[sp + 32:word64]
	x29 = Mem0[sp:word64]
	sp = sp + 8
	x30 = Mem0[sp:word64]
	sp = sp + 64
	x1 = x0
	w0 = 0x00000000
	// succ:  l000000000042C270_thunk_make_command
l000000000042C270_thunk_make_command:
	call make_command (retsize: 0;)
	return
	// succ:  make_for_command_exit
make_for_command_exit:


// make_select_command
// Return size: 0
void make_select_command()
make_select_command_entry:
	// succ:  l000000000042C274
l000000000042C274:
	sp = fp
	sp = sp + -64
	Mem0[sp:word64] = x29
	sp = sp + 8
	Mem0[sp:word64] = x30
	x29 = x31 + 0x0000000000000000
	v8 = sp + 16
	Mem0[v8:word64] = x19
	v8 = v8 + 8
	Mem0[v8:word64] = x20
	x20 = x1
	x1 = 0x00000000004AB000
	Mem0[sp + 32:word64] = x21
	x19 = x2
	x21 = x0
	x1 = x1 + 0xFFFFFFFFFFFFFFA0
	w2 = 0x000000DA
	x0 = 0x0000000000000020
	Mem0[x29 + 48:word64] = x3
	call sh_xmalloc (retsize: 0;)
	x3 = Mem0[x29 + 48:word64]
	Mem0[x0 + 8:word64] = x21
	Mem0[x0 + 16:word64] = x20
	Mem0[x0 + 24:word64] = x19
	Mem0[x0:word32] = 0x00000000
	Mem0[x0 + 4:word32] = w3
	v16 = sp + 16
	x19 = Mem0[v16:word64]
	v16 = v16 + 8
	x20 = Mem0[v16:word64]
	x21 = Mem0[sp + 32:word64]
	x29 = Mem0[sp:word64]
	sp = sp + 8
	x30 = Mem0[sp:word64]
	sp = sp + 64
	x1 = x0
	w0 = 0x00000005
	// succ:  l000000000042C2D4_thunk_make_command
l000000000042C2D4_thunk_make_command:
	call make_command (retsize: 0;)
	return
	// succ:  make_select_command_exit
make_select_command_exit:


// make_arith_for_command
// Return size: 0
void make_arith_for_command()
make_arith_for_command_entry:
	// succ:  l000000000042C2D8
l000000000042C2D8:
	sp = fp
	sp = sp + -96
	Mem0[sp:word64] = x29
	sp = sp + 8
	Mem0[sp:word64] = x30
	x29 = x31 + 0x0000000000000000
	v8 = sp + 64
	Mem0[v8:word64] = x25
	v8 = v8 + 8
	Mem0[v8:word64] = x26
	x26 = x0
	x0 = Mem0[x0 + 8:word64]
	v12 = sp + 48
	Mem0[v12:word64] = x23
	v12 = v12 + 8
	Mem0[v12:word64] = x24
	v15 = sp + 32
	Mem0[v15:word64] = x21
	v15 = v15 + 8
	Mem0[v15:word64] = x22
	x23 = 0x0000000000000000
	x22 = 0x00000000004AB000
	x0 = Mem0[x0:word64]
	v18 = sp + 80
	Mem0[v18:word64] = x27
	v18 = v18 + 8
	Mem0[v18:word64] = x28
	v21 = sp + 16
	Mem0[v21:word64] = x19
	v21 = v21 + 8
	Mem0[v21:word64] = x20
	x28 = x1
	w27 = w2
	w20 = 0x00000000
	x24 = x23
	x25 = x23
	x22 = x22 + 0xFFFFFFFFFFFFFFA0
	// succ:  l000000000042C320
l000000000042C320:
	v27 = Mem0[x0:byte]
	w3 = (word32) v27
	w31 = w3 - 0x00000009
	NZCV = cond(w31)
	branch Test(EQ,Z) l000000000042C3AC
	// succ:  l000000000042C32C l000000000042C3AC
l000000000042C32C:
	w31 = w3 - 0x00000020
	NZCV = cond(w31)
	branch Test(EQ,Z) l000000000042C3AC
	// succ:  l000000000042C334 l000000000042C3AC
l000000000042C334:
	w31 = w3 - 0x0000003B
	NZCV = cond(w31)
	x19 = x0
	branch Test(EQ,Z) l000000000042C400
	// succ:  l000000000042C340 l000000000042C400
l000000000042C340:
	branch w3 != 0x00000000 l000000000042C34C
	// succ:  l000000000042C344 l000000000042C34C
l000000000042C344:
	goto l000000000042C400
	// succ:  l000000000042C400
l000000000042C348:
	branch w3 == 0x00000000 l000000000042C358
	// succ:  l000000000042C34C l000000000042C358
l000000000042C34C:
	x19 = x19 + 1
	v31 = Mem0[x19:byte]
	w3 = (word32) v31
	w31 = w3 - 0x0000003B
	NZCV = cond(w31)
	branch Test(NE,Z) l000000000042C348
	// succ:  l000000000042C358 l000000000042C348
l000000000042C358:
	x31 = x0 - x19
	NZCV = cond(x31)
	x21 = 0x0000000000000000
	branch Test(ULT,C) l000000000042C3C4
	// succ:  l000000000042C364 l000000000042C3C4
l000000000042C364:
	w20 = w20 + 0x00000001
	w31 = w20 - 0x00000002
	NZCV = cond(w31)
	branch Test(EQ,Z) l000000000042C3E0
	// succ:  l000000000042C370 l000000000042C3E0
l000000000042C370:
	w31 = w20 - 0x00000003
	NZCV = cond(w31)
	branch Test(EQ,Z) l000000000042C3F0
	// succ:  l000000000042C378 l000000000042C3F0
l000000000042C378:
	w31 = w20 - 0x00000001
	NZCV = cond(w31)
	branch Test(EQ,Z) l000000000042C3B4
	// succ:  l000000000042C380 l000000000042C3B4
l000000000042C380:
	branch x21 == 0x0000000000000000 l000000000042C394
	// succ:  l000000000042C384 l000000000042C394
l000000000042C384:
	x0 = x21
	x1 = x22
	w2 = 0x0000013A
	call sh_xfree (retsize: 0;)
	// succ:  l000000000042C394
l000000000042C394:
	v34 = Mem0[x19:byte]
	w21 = (word32) v34
	branch w21 == 0x00000000 l000000000042C408
	// succ:  l000000000042C39C l000000000042C408
l000000000042C39C:
	x0 = x19 + 0x0000000000000001
	v35 = Mem0[x0:byte]
	w3 = (word32) v35
	w31 = w3 - 0x00000009
	NZCV = cond(w31)
	branch Test(NE,Z) l000000000042C32C
	// succ:  l000000000042C3AC l000000000042C32C
l000000000042C3AC:
	x0 = x0 + 0x0000000000000001
	goto l000000000042C320
	// succ:  l000000000042C320
l000000000042C3B4:
	x0 = x21
	call fn000000000042C130 (retsize: 0;)
	x25 = x0
	goto l000000000042C380
	// succ:  l000000000042C380
l000000000042C3C4:
	w1 = w21
	w2 = w19 - w0
	call substring (retsize: 0;)
	w20 = w20 + 0x00000001
	w31 = w20 - 0x00000002
	NZCV = cond(w31)
	x21 = x0
	branch Test(NE,Z) l000000000042C370
	// succ:  l000000000042C3E0 l000000000042C370
l000000000042C3E0:
	x0 = x21
	call fn000000000042C130 (retsize: 0;)
	x24 = x0
	goto l000000000042C380
	// succ:  l000000000042C380
l000000000042C3F0:
	x0 = x21
	call fn000000000042C130 (retsize: 0;)
	x23 = x0
	goto l000000000042C380
	// succ:  l000000000042C380
l000000000042C400:
	x21 = 0x0000000000000000
	goto l000000000042C364
	// succ:  l000000000042C364
l000000000042C408:
	w31 = w20 - 0x00000003
	NZCV = cond(w31)
	branch Test(NE,Z) l000000000042C480
	// succ:  l000000000042C410 l000000000042C480
l000000000042C410:
	x1 = 0x00000000004AB000
	x0 = 0x0000000000000028
	x1 = x1 + 0xFFFFFFFFFFFFFFA0
	w2 = 0x0000014B
	call sh_xmalloc (retsize: 0;)
	Mem0[x0:word32] = w21
	Mem0[x0 + 4:word32] = w27
	x19 = x0
	x0 = x25
	branch x25 == 0x0000000000000000 l000000000042C544
	// succ:  l000000000042C438 l000000000042C544
l000000000042C438:
	Mem0[x19 + 8:word64] = x0
	x0 = x24
	branch x24 == 0x0000000000000000 l000000000042C534
	// succ:  l000000000042C444 l000000000042C534
l000000000042C444:
	Mem0[x19 + 16:word64] = x0
	branch x23 == 0x0000000000000000 l000000000042C520
	// succ:  l000000000042C44C l000000000042C520
l000000000042C44C:
	x0 = x26
	Mem0[x19 + 24:word64] = x23
	Mem0[x19 + 32:word64] = x28
	call dispose_words (retsize: 0;)
	x1 = x19
	v36 = sp + 32
	x21 = Mem0[v36:word64]
	v36 = v36 + 8
	x22 = Mem0[v36:word64]
	v37 = sp + 16
	x19 = Mem0[v37:word64]
	v37 = v37 + 8
	x20 = Mem0[v37:word64]
	v38 = sp + 48
	x23 = Mem0[v38:word64]
	v38 = v38 + 8
	x24 = Mem0[v38:word64]
	v39 = sp + 64
	x25 = Mem0[v39:word64]
	v39 = v39 + 8
	x26 = Mem0[v39:word64]
	v40 = sp + 80
	x27 = Mem0[v40:word64]
	v40 = v40 + 8
	x28 = Mem0[v40:word64]
	x29 = Mem0[sp:word64]
	sp = sp + 8
	x30 = Mem0[sp:word64]
	sp = sp + 96
	w0 = 0x0000000C
	// succ:  l000000000042C47C_thunk_make_command
l000000000042C47C_thunk_make_command:
	call make_command (retsize: 0;)
	return
	// succ:  make_arith_for_command_exit
l000000000042C480:
	w31 = w20 - 0x00000002
	NZCV = cond(w31)
	branch Test(GT,NZV) l000000000042C4FC
	// succ:  l000000000042C488 l000000000042C4FC
l000000000042C488:
	x1 = 0x00000000004AB000
	x1 = x1 + 0xFFFFFFFFFFFFFFB8
	w2 = 0x00000005
	x0 = 0x0000000000000000
	dcgettext(x0, x1, x2)
	sp = sp + 0xFFFFFFFFFFFFFFF8
	x1 = x0
	w0 = w27
	call parser_error (retsize: 0;)
	// succ:  l000000000042C4A8
l000000000042C4A8:
	x1 = 0x00000000004AC000
	x1 = x1 + 0x0000000000000008
	w2 = 0x00000005
	x0 = 0x0000000000000000
	dcgettext(x0, x1, x2)
	sp = sp + 0xFFFFFFFFFFFFFFF8
	x2 = Mem0[x26 + 8:word64]
	x1 = x0
	x2 = Mem0[x2:word64]
	w0 = w27
	call parser_error (retsize: 0;)
	w1 = 0x00000002
	x0 = 0x00000000004E3000
	Mem0[x0 + 1200:word32] = w1
	v46 = sp + 16
	x19 = Mem0[v46:word64]
	v46 = v46 + 8
	x20 = Mem0[v46:word64]
	x0 = 0x0000000000000000
	v47 = sp + 32
	x21 = Mem0[v47:word64]
	v47 = v47 + 8
	x22 = Mem0[v47:word64]
	v48 = sp + 48
	x23 = Mem0[v48:word64]
	v48 = v48 + 8
	x24 = Mem0[v48:word64]
	v49 = sp + 64
	x25 = Mem0[v49:word64]
	v49 = v49 + 8
	x26 = Mem0[v49:word64]
	v50 = sp + 80
	x27 = Mem0[v50:word64]
	v50 = v50 + 8
	x28 = Mem0[v50:word64]
	x29 = Mem0[sp:word64]
	sp = sp + 8
	x30 = Mem0[sp:word64]
	sp = sp + 96
	return
	// succ:  make_arith_for_command_exit
l000000000042C4FC:
	x1 = 0x00000000004AB000
	x1 = x1 + 0xFFFFFFFFFFFFFFE8
	w2 = 0x00000005
	x0 = 0x0000000000000000
	dcgettext(x0, x1, x2)
	sp = sp + 0xFFFFFFFFFFFFFFF8
	x1 = x0
	w0 = w27
	call parser_error (retsize: 0;)
	goto l000000000042C4A8
	// succ:  l000000000042C4A8
l000000000042C520:
	x0 = 0x00000000004AD000
	x0 = x0 + 0xFFFFFFFFFFFFFB18
	call fn000000000042C130 (retsize: 0;)
	x23 = x0
	goto l000000000042C44C
	// succ:  l000000000042C44C
l000000000042C534:
	x0 = 0x00000000004AD000
	x0 = x0 + 0xFFFFFFFFFFFFFB18
	call fn000000000042C130 (retsize: 0;)
	goto l000000000042C444
	// succ:  l000000000042C444
l000000000042C544:
	x0 = 0x00000000004AD000
	x0 = x0 + 0xFFFFFFFFFFFFFB18
	call fn000000000042C130 (retsize: 0;)
	goto l000000000042C438
	// succ:  l000000000042C438
make_arith_for_command_exit:


// make_group_command
// Return size: 0
void make_group_command()
make_group_command_entry:
	// succ:  l000000000042C554
l000000000042C554:
	sp = fp
	sp = sp + -32
	Mem0[sp:word64] = x29
	sp = sp + 8
	Mem0[sp:word64] = x30
	x29 = x31 + 0x0000000000000000
	x1 = 0x00000000004AB000
	Mem0[sp + 16:word64] = x19
	x1 = x1 + 0xFFFFFFFFFFFFFFA0
	x19 = x0
	w2 = 0x00000162
	x0 = 0x0000000000000010
	call sh_xmalloc (retsize: 0;)
	Mem0[x0 + 8:word64] = x19
	x19 = Mem0[sp + 16:word64]
	x29 = Mem0[sp:word64]
	sp = sp + 8
	x30 = Mem0[sp:word64]
	sp = sp + 32
	x1 = x0
	w0 = 0x00000009
	// succ:  l000000000042C58C_thunk_make_command
l000000000042C58C_thunk_make_command:
	call make_command (retsize: 0;)
	return
	// succ:  make_group_command_exit
make_group_command_exit:


// make_case_command
// Return size: 0
void make_case_command()
make_case_command_entry:
	// succ:  l000000000042C590
l000000000042C590:
	sp = fp
	sp = sp + -64
	Mem0[sp:word64] = x29
	sp = sp + 8
	Mem0[sp:word64] = x30
	x29 = x31 + 0x0000000000000000
	v8 = sp + 16
	Mem0[v8:word64] = x20
	v8 = v8 + 8
	Mem0[v8:word64] = x21
	x20 = x1
	x1 = 0x00000000004AB000
	Mem0[sp + 32:word64] = x22
	x21 = x0
	w22 = w2
	x1 = x1 + 0xFFFFFFFFFFFFFFA0
	x0 = 0x0000000000000018
	w2 = 0x0000016F
	call sh_xmalloc (retsize: 0;)
	Mem0[x0:word32] = 0x00000000
	Mem0[x0 + 4:word32] = w22
	Mem0[x0 + 8:word64] = x21
	x1 = x0
	branch x20 == 0x0000000000000000 l000000000042C604
	// succ:  l000000000042C5D4 l000000000042C604
l000000000042C5D4:
	x0 = Mem0[x20:word64]
	branch x0 == 0x0000000000000000 l000000000042C604
	// succ:  l000000000042C5DC l000000000042C604
l000000000042C5DC:
	x0 = x20
	Mem0[x29 + 48:word64] = x1
	call list_reverse (retsize: 0;)
	x1 = Mem0[x29 + 48:word64]
	v14 = sp + 16
	x20 = Mem0[v14:word64]
	v14 = v14 + 8
	x21 = Mem0[v14:word64]
	Mem0[x1 + 16:word64] = x0
	x22 = Mem0[sp + 32:word64]
	x29 = Mem0[sp:word64]
	sp = sp + 8
	x30 = Mem0[sp:word64]
	sp = sp + 64
	w0 = 0x00000001
	// succ:  l000000000042C600_thunk_make_command
l000000000042C600_thunk_make_command:
	call make_command (retsize: 0;)
	return
	// succ:  make_case_command_exit
l000000000042C604:
	x0 = x20
	Mem0[x1 + 16:word64] = x0
	v16 = sp + 16
	x20 = Mem0[v16:word64]
	v16 = v16 + 8
	x21 = Mem0[v16:word64]
	x22 = Mem0[sp + 32:word64]
	x29 = Mem0[sp:word64]
	sp = sp + 8
	x30 = Mem0[sp:word64]
	sp = sp + 64
	w0 = 0x00000001
	// succ:  l000000000042C61C_thunk_make_command
l000000000042C61C_thunk_make_command:
	call make_command (retsize: 0;)
	return
	// succ:  make_case_command_exit
make_case_command_exit:


// make_pattern_list
// Return size: 0
void make_pattern_list()
make_pattern_list_entry:
	// succ:  l000000000042C620
l000000000042C620:
	sp = fp
	sp = sp + -48
	Mem0[sp:word64] = x29
	sp = sp + 8
	Mem0[sp:word64] = x30
	x29 = x31 + 0x0000000000000000
	Mem0[sp + 32:word64] = x21
	x21 = x1
	x1 = 0x00000000004AB000
	v10 = sp + 16
	Mem0[v10:word64] = x19
	v10 = v10 + 8
	Mem0[v10:word64] = x20
	x1 = x1 + 0xFFFFFFFFFFFFFFA0
	x20 = x0
	w2 = 0x0000017E
	x0 = 0x0000000000000020
	call sh_xmalloc (retsize: 0;)
	x19 = x0
	branch x20 == 0x0000000000000000 l000000000042C688
	// succ:  l000000000042C654 l000000000042C688
l000000000042C654:
	x0 = Mem0[x20:word64]
	branch x0 == 0x0000000000000000 l000000000042C688
	// succ:  l000000000042C65C l000000000042C688
l000000000042C65C:
	x0 = x20
	call list_reverse (retsize: 0;)
	// succ:  l000000000042C664
l000000000042C664:
	Mem0[x19 + 8:word64] = x0
	Mem0[x19 + 16:word64] = x21
	Mem0[x19:word64] = 0x0000000000000000
	Mem0[x19 + 24:word32] = 0x00000000
	x0 = x19
	x21 = Mem0[sp + 32:word64]
	v13 = sp + 16
	x19 = Mem0[v13:word64]
	v13 = v13 + 8
	x20 = Mem0[v13:word64]
	x29 = Mem0[sp:word64]
	sp = sp + 8
	x30 = Mem0[sp:word64]
	sp = sp + 48
	return
	// succ:  make_pattern_list_exit
l000000000042C688:
	x0 = x20
	goto l000000000042C664
	// succ:  l000000000042C664
make_pattern_list_exit:


// make_if_command
// Return size: 0
void make_if_command()
make_if_command_entry:
	// succ:  l000000000042C690
l000000000042C690:
	sp = fp
	sp = sp + -48
	Mem0[sp:word64] = x29
	sp = sp + 8
	Mem0[sp:word64] = x30
	x29 = x31 + 0x0000000000000000
	v8 = sp + 16
	Mem0[v8:word64] = x19
	v8 = v8 + 8
	Mem0[v8:word64] = x20
	x20 = x1
	x1 = 0x00000000004AB000
	Mem0[sp + 32:word64] = x21
	x19 = x2
	x21 = x0
	x1 = x1 + 0xFFFFFFFFFFFFFFA0
	w2 = 0x0000018C
	x0 = 0x0000000000000020
	call sh_xmalloc (retsize: 0;)
	Mem0[x0 + 8:word64] = x21
	Mem0[x0 + 16:word64] = x20
	Mem0[x0 + 24:word64] = x19
	Mem0[x0:word32] = 0x00000000
	v14 = sp + 16
	x19 = Mem0[v14:word64]
	v14 = v14 + 8
	x20 = Mem0[v14:word64]
	x21 = Mem0[sp + 32:word64]
	x29 = Mem0[sp:word64]
	sp = sp + 8
	x30 = Mem0[sp:word64]
	sp = sp + 48
	x1 = x0
	w0 = 0x00000003
	// succ:  l000000000042C6E4_thunk_make_command
l000000000042C6E4_thunk_make_command:
	call make_command (retsize: 0;)
	return
	// succ:  make_if_command_exit
make_if_command_exit:


// make_while_command
// Return size: 0
void make_while_command()
make_while_command_entry:
	// succ:  l000000000042C6E8
l000000000042C6E8:
	sp = fp
	sp = sp + -32
	Mem0[sp:word64] = x29
	sp = sp + 8
	Mem0[sp:word64] = x30
	x29 = x31 + 0x0000000000000000
	v8 = sp + 16
	Mem0[v8:word64] = x19
	v8 = v8 + 8
	Mem0[v8:word64] = x20
	x19 = x1
	x1 = 0x00000000004AB000
	x20 = x0
	x1 = x1 + 0xFFFFFFFFFFFFFFA0
	w2 = 0x0000019B
	x0 = 0x0000000000000018
	call sh_xmalloc (retsize: 0;)
	Mem0[x0 + 8:word64] = x20
	Mem0[x0 + 16:word64] = x19
	Mem0[x0:word32] = 0x00000000
	v12 = sp + 16
	x19 = Mem0[v12:word64]
	v12 = v12 + 8
	x20 = Mem0[v12:word64]
	x29 = Mem0[sp:word64]
	sp = sp + 8
	x30 = Mem0[sp:word64]
	sp = sp + 32
	x1 = x0
	w0 = 0x00000002
	// succ:  l000000000042C72C_thunk_make_command
l000000000042C72C_thunk_make_command:
	call make_command (retsize: 0;)
	return
	// succ:  make_while_command_exit
make_while_command_exit:


// make_until_command
// Return size: 0
void make_until_command()
make_until_command_entry:
	// succ:  l000000000042C730
l000000000042C730:
	sp = fp
	sp = sp + -32
	Mem0[sp:word64] = x29
	sp = sp + 8
	Mem0[sp:word64] = x30
	x29 = x31 + 0x0000000000000000
	v8 = sp + 16
	Mem0[v8:word64] = x19
	v8 = v8 + 8
	Mem0[v8:word64] = x20
	x19 = x1
	x1 = 0x00000000004AB000
	x20 = x0
	x1 = x1 + 0xFFFFFFFFFFFFFFA0
	w2 = 0x0000019B
	x0 = 0x0000000000000018
	call sh_xmalloc (retsize: 0;)
	Mem0[x0 + 8:word64] = x20
	Mem0[x0 + 16:word64] = x19
	Mem0[x0:word32] = 0x00000000
	v12 = sp + 16
	x19 = Mem0[v12:word64]
	v12 = v12 + 8
	x20 = Mem0[v12:word64]
	x29 = Mem0[sp:word64]
	sp = sp + 8
	x30 = Mem0[sp:word64]
	sp = sp + 32
	x1 = x0
	w0 = 0x00000008
	// succ:  l000000000042C774_thunk_make_command
l000000000042C774_thunk_make_command:
	call make_command (retsize: 0;)
	return
	// succ:  make_until_command_exit
make_until_command_exit:


// make_arith_command
// Return size: 0
void make_arith_command()
make_arith_command_entry:
	// succ:  l000000000042C778
l000000000042C778:
	sp = fp
	sp = sp + -48
	Mem0[sp:word64] = x29
	sp = sp + 8
	Mem0[sp:word64] = x30
	x29 = x31 + 0x0000000000000000
	v8 = sp + 16
	Mem0[v8:word64] = x19
	v8 = v8 + 8
	Mem0[v8:word64] = x20
	x20 = 0x00000000004AB000
	x20 = x20 + 0xFFFFFFFFFFFFFFA0
	Mem0[sp + 32:word64] = x21
	x1 = x20
	x21 = x0
	w2 = 0x000001B8
	x0 = 0x0000000000000020
	call sh_xmalloc (retsize: 0;)
	x19 = x0
	x1 = x20
	w2 = 0x000001B9
	x0 = 0x0000000000000010
	call sh_xmalloc (retsize: 0;)
	x1 = 0x00000000004DE000
	w1 = Mem0[x1 + 1928:word32]
	Mem0[x19 + 24:word64] = x0
	Mem0[x0 + 8:word64] = x21
	Mem0[x0:word32] = 0x00000000
	Mem0[x0 + 4:word32] = w1
	w0 = 0x0000000A
	Mem0[x19:word32] = w0
	Mem0[x19 + 16:word64] = 0x0000000000000000
	Mem0[x19 + 4:word32] = 0x00000000
	x0 = x19
	x21 = Mem0[sp + 32:word64]
	v15 = sp + 16
	x19 = Mem0[v15:word64]
	v15 = v15 + 8
	x20 = Mem0[v15:word64]
	x29 = Mem0[sp:word64]
	sp = sp + 8
	x30 = Mem0[sp:word64]
	sp = sp + 48
	return
	// succ:  make_arith_command_exit
make_arith_command_exit:


// make_cond_node
// Return size: 0
void make_cond_node()
make_cond_node_entry:
	// succ:  l000000000042C7F4
l000000000042C7F4:
	sp = fp
	sp = sp + -64
	Mem0[sp:word64] = x29
	sp = sp + 8
	Mem0[sp:word64] = x30
	x29 = x31 + 0x0000000000000000
	v8 = sp + 16
	Mem0[v8:word64] = x19
	v8 = v8 + 8
	Mem0[v8:word64] = x20
	x20 = x1
	x1 = 0x00000000004AB000
	Mem0[sp + 32:word64] = x21
	x19 = x2
	w21 = w0
	x1 = x1 + 0xFFFFFFFFFFFFFFA0
	w2 = 0x000001D3
	x0 = 0x0000000000000028
	Mem0[x29 + 48:word64] = x3
	call sh_xmalloc (retsize: 0;)
	x1 = 0x00000000004DE000
	w5 = Mem0[x1 + 1928:word32]
	x3 = Mem0[x29 + 48:word64]
	Mem0[x0 + 8:word32] = w21
	Mem0[x0 + 16:word64] = x20
	Mem0[x0 + 24:word64] = x19
	Mem0[x0:word32] = 0x00000000
	Mem0[x0 + 4:word32] = w5
	Mem0[x0 + 32:word64] = x3
	v18 = sp + 16
	x19 = Mem0[v18:word64]
	v18 = v18 + 8
	x20 = Mem0[v18:word64]
	x21 = Mem0[sp + 32:word64]
	x29 = Mem0[sp:word64]
	sp = sp + 8
	x30 = Mem0[sp:word64]
	sp = sp + 64
	return
	// succ:  make_cond_node_exit
make_cond_node_exit:


// make_cond_command
// Return size: 0
void make_cond_command()
make_cond_command_entry:
	// succ:  l000000000042C85C
l000000000042C85C:
	sp = fp
	sp = sp + -32
	Mem0[sp:word64] = x29
	sp = sp + 8
	Mem0[sp:word64] = x30
	x29 = x31 + 0x0000000000000000
	x1 = 0x00000000004AB000
	Mem0[sp + 16:word64] = x19
	x1 = x1 + 0xFFFFFFFFFFFFFFA0
	x19 = x0
	w2 = 0x000001E6
	x0 = 0x0000000000000020
	call sh_xmalloc (retsize: 0;)
	w1 = 0x0000000B
	Mem0[x0 + 24:word64] = x19
	Mem0[x0:word32] = w1
	Mem0[x0 + 16:word64] = 0x0000000000000000
	Mem0[x0 + 4:word32] = 0x00000000
	branch x19 == 0x0000000000000000 l000000000042C89C
	// succ:  l000000000042C898 l000000000042C89C
l000000000042C898:
	w19 = Mem0[x19 + 4:word32]
	// succ:  l000000000042C89C
l000000000042C89C:
	Mem0[x0 + 8:word32] = w19
	x19 = Mem0[sp + 16:word64]
	x29 = Mem0[sp:word64]
	sp = sp + 8
	x30 = Mem0[sp:word64]
	sp = sp + 32
	return
	// succ:  make_cond_command_exit
make_cond_command_exit:


// make_bare_simple_command
// Return size: 0
void make_bare_simple_command()
make_bare_simple_command_entry:
	// succ:  l000000000042C8AC
l000000000042C8AC:
	sp = fp
	sp = sp + -32
	Mem0[sp:word64] = x29
	sp = sp + 8
	Mem0[sp:word64] = x30
	x29 = x31 + 0x0000000000000000
	v8 = sp + 16
	Mem0[v8:word64] = x19
	v8 = v8 + 8
	Mem0[v8:word64] = x20
	x20 = 0x00000000004AB000
	x20 = x20 + 0xFFFFFFFFFFFFFFA0
	x1 = x20
	w2 = 0x000001FB
	x0 = 0x0000000000000020
	call sh_xmalloc (retsize: 0;)
	x19 = x0
	x1 = x20
	w2 = 0x000001FC
	x0 = 0x0000000000000018
	call sh_xmalloc (retsize: 0;)
	x1 = 0x00000000004DE000
	w1 = Mem0[x1 + 1928:word32]
	Mem0[x19 + 24:word64] = x0
	Mem0[x0:word32] = 0x00000000
	Mem0[x0 + 4:word32] = w1
	Mem0[x0 + 8:word64] = 0x0000000000000000
	Mem0[x0 + 16:word64] = 0x0000000000000000
	w0 = 0x00000004
	Mem0[x19:word32] = w0
	Mem0[x19 + 16:word64] = 0x0000000000000000
	Mem0[x19 + 4:word32] = 0x00000000
	x0 = x19
	v14 = sp + 16
	x19 = Mem0[v14:word64]
	v14 = v14 + 8
	x20 = Mem0[v14:word64]
	x29 = Mem0[sp:word64]
	sp = sp + 8
	x30 = Mem0[sp:word64]
	sp = sp + 32
	return
	// succ:  make_bare_simple_command_exit
make_bare_simple_command_exit:


// make_simple_command
// Return size: 0
void make_simple_command()
make_simple_command_entry:
	// succ:  l000000000042C920
l000000000042C920:
	sp = fp
	sp = sp + -48
	Mem0[sp:word64] = x29
	sp = sp + 8
	Mem0[sp:word64] = x30
	x29 = x31 + 0x0000000000000000
	v8 = sp + 16
	Mem0[v8:word64] = x19
	v8 = v8 + 8
	Mem0[v8:word64] = x20
	x19 = x0
	branch x2 == 0x0000000000000000 l000000000042C9AC
	// succ:  l000000000042C934 l000000000042C9AC
l000000000042C934:
	branch x19 == 0x0000000000000000 l000000000042C974
	// succ:  l000000000042C938 l000000000042C974
l000000000042C938:
	x20 = Mem0[x2 + 24:word64]
	x0 = x19
	x1 = Mem0[x20 + 8:word64]
	Mem0[x29 + 32:word64] = x2
	call make_word_list (retsize: 0;)
	x1 = 0x00000000004E3000
	w3 = Mem0[x1 + 604:word32]
	x2 = Mem0[x29 + 32:word64]
	w3 = w3 & 0xFFF7FFFF
	Mem0[x20 + 8:word64] = x0
	Mem0[x1 + 604:word32] = w3
	// succ:  l000000000042C964
l000000000042C964:
	x0 = x2
	v13 = sp + 16
	x19 = Mem0[v13:word64]
	v13 = v13 + 8
	x20 = Mem0[v13:word64]
	x29 = Mem0[sp:word64]
	sp = sp + 8
	x30 = Mem0[sp:word64]
	sp = sp + 48
	return
	// succ:  make_simple_command_exit
l000000000042C974:
	branch x1 == 0x0000000000000000 l000000000042C964
	// succ:  l000000000042C978 l000000000042C964
l000000000042C978:
	x4 = x1
	goto l000000000042C984
	// succ:  l000000000042C984
l000000000042C980:
	x4 = x3
	// succ:  l000000000042C984
l000000000042C984:
	x3 = Mem0[x4:word64]
	branch x3 != 0x0000000000000000 l000000000042C980
	// succ:  l000000000042C98C l000000000042C980
l000000000042C98C:
	x0 = Mem0[x2 + 24:word64]
	v16 = sp + 16
	x19 = Mem0[v16:word64]
	v16 = v16 + 8
	x20 = Mem0[v16:word64]
	x3 = Mem0[x0 + 16:word64]
	Mem0[x4:word64] = x3
	Mem0[x0 + 16:word64] = x1
	x29 = Mem0[sp:word64]
	sp = sp + 8
	x30 = Mem0[sp:word64]
	sp = sp + 48
	x0 = x2
	return
	// succ:  make_simple_command_exit
l000000000042C9AC:
	Mem0[x29 + 32:word64] = x1
	call make_bare_simple_command (retsize: 0;)
	x2 = x0
	x0 = 0x00000000004E3000
	w3 = Mem0[x0 + 604:word32]
	x1 = Mem0[x29 + 32:word64]
	w3 = w3 | 0x00080000
	Mem0[x0 + 604:word32] = w3
	goto l000000000042C934
	// succ:  l000000000042C934
make_simple_command_exit:


// make_here_document
// Return size: 0
void make_here_document()
make_here_document_entry:
	// succ:  l000000000042C9D0
l000000000042C9D0:
	sp = fp
	sp = sp + -144
	Mem0[sp:word64] = x29
	sp = sp + 8
	Mem0[sp:word64] = x30
	x29 = x31 + 0x0000000000000000
	v8 = sp + 48
	Mem0[v8:word64] = x23
	v8 = v8 + 8
	Mem0[v8:word64] = x24
	w24 = Mem0[x0 + 24:word32]
	v13 = sp + 16
	Mem0[v13:word64] = x19
	v13 = v13 + 8
	Mem0[v13:word64] = x20
	v16 = sp + 32
	Mem0[v16:word64] = x21
	v16 = v16 + 8
	Mem0[v16:word64] = x22
	v19 = sp + 64
	Mem0[v19:word64] = x25
	v19 = v19 + 8
	Mem0[v19:word64] = x26
	v22 = sp + 80
	Mem0[v22:word64] = x27
	v22 = v22 + 8
	Mem0[v22:word64] = x28
	Mem0[x29 + 120:word64] = x0
	Mem0[x29 + 100:word32] = w1
	w31 = w24 - 0x00000004
	NZCV = cond(w31)
	branch Test(NE,Z) l000000000042CC20
	// succ:  l000000000042CA00 l000000000042CC20
l000000000042CA00:
	x1 = Mem0[x29 + 120:word64]
	x0 = Mem0[x1 + 32:word64]
	w1 = 0x00000000
	x0 = Mem0[x0:word64]
	call string_quote_removal (retsize: 0;)
	Mem0[x29 + 104:word64] = x0
	branch x0 == 0x0000000000000000 l000000000042CC60
	// succ:  l000000000042CA1C l000000000042CC60
l000000000042CA1C:
	strlen(x0)
	sp = sp + 0xFFFFFFFFFFFFFFF8
	x2 = Mem0[x29 + 120:word64]
	x19 = x0
	x0 = Mem0[x2 + 32:word64]
	x1 = 0x00000000004AB000
	x20 = x1 + 0xFFFFFFFFFFFFFFA0
	x0 = Mem0[x0:word64]
	Mem0[x29 + 136:word64] = x1
	w2 = 0x00000258
	x1 = x20
	call sh_xfree (retsize: 0;)
	x2 = Mem0[x29 + 120:word64]
	w23 = 0x00000000
	x0 = Mem0[x2 + 32:word64]
	Mem0[x29 + 96:word32] = w19
	w0 = Mem0[x0 + 8:word32]
l000000000042CB64:
	x1 = Mem0[x29 + 120:word64]
	v39 = sp + 16
	x19 = Mem0[v39:word64]
	v39 = v39 + 8
	x20 = Mem0[v39:word64]
	x0 = Mem0[x1 + 32:word64]
	v40 = sp + 32
	x21 = Mem0[v40:word64]
	v40 = v40 + 8
	x22 = Mem0[v40:word64]
	Mem0[x0:word64] = x25
	v41 = sp + 48
	x23 = Mem0[v41:word64]
	v41 = v41 + 8
	x24 = Mem0[v41:word64]
	v42 = sp + 64
	x25 = Mem0[v42:word64]
	v42 = v42 + 8
	x26 = Mem0[v42:word64]
	v43 = sp + 80
	x27 = Mem0[v43:word64]
	v43 = v43 + 8
	x28 = Mem0[v43:word64]
	x29 = Mem0[sp:word64]
	sp = sp + 8
	x30 = Mem0[sp:word64]
	sp = sp + 144
	return
	// succ:  make_here_document_exit
l000000000042CC20:
	w31 = w24 - 0x00000008
	NZCV = cond(w31)
	branch Test(EQ,Z) l000000000042CA00
	// succ:  l000000000042CC28 l000000000042CA00
l000000000042CC28:
	x1 = 0x00000000004AC000
	x1 = x1 + 0x0000000000000020
	w2 = 0x00000005
	x0 = 0x0000000000000000
	dcgettext(x0, x1, x2)
	sp = sp + 0xFFFFFFFFFFFFFFF8
	x2 = Mem0[x29 + 120:word64]
	v33 = sp + 16
	x19 = Mem0[v33:word64]
	v33 = v33 + 8
	x20 = Mem0[v33:word64]
	v34 = sp + 32
	x21 = Mem0[v34:word64]
	v34 = v34 + 8
	x22 = Mem0[v34:word64]
	v35 = sp + 48
	x23 = Mem0[v35:word64]
	v35 = v35 + 8
	x24 = Mem0[v35:word64]
	v36 = sp + 64
	x25 = Mem0[v36:word64]
	v36 = v36 + 8
	x26 = Mem0[v36:word64]
	v37 = sp + 80
	x27 = Mem0[v37:word64]
	v37 = v37 + 8
	x28 = Mem0[v37:word64]
	w1 = Mem0[x2 + 24:word32]
	x29 = Mem0[sp:word64]
	sp = sp + 8
	x30 = Mem0[sp:word64]
	sp = sp + 144
	// succ:  l000000000042CC5C_thunk_internal_error
l000000000042CC5C_thunk_internal_error:
	call internal_error (retsize: 0;)
	return
	// succ:  make_here_document_exit
l000000000042CC60:
	x1 = 0x00000000004AB000
	Mem0[x29 + 136:word64] = x1
	w2 = 0x00000253
	x1 = x1 + 0xFFFFFFFFFFFFFFA0
	x0 = 0x0000000000000001
	call sh_xmalloc (retsize: 0;)
	x2 = Mem0[x29 + 120:word64]
	v38 = Mem0[x29 + 104:byte]
	w1 = (word32) v38
	Mem0[x2 + 40:word64] = x0
	Mem0[x0:byte] = (byte) w1
	x2 = Mem0[x29 + 136:word64]
	x0 = 0x0000000000000001
	x1 = x2 + 0xFFFFFFFFFFFFFFA0
	w2 = 0x0000029A
	call sh_xmalloc (retsize: 0;)
	x25 = x0
	Mem0[x0:byte] = 0x00
	goto l000000000042CB64
	// succ:  l000000000042CB64
make_here_document_exit:


// make_redirection
// Return size: 0
void make_redirection()
make_redirection_entry:
	// succ:  l000000000042CCA8
l000000000042CCA8:
	sp = fp
	sp = sp + -80
	Mem0[sp:word64] = x29
	sp = sp + 8
	Mem0[sp:word64] = x30
	x29 = x31 + 0x0000000000000000
	v8 = sp + 16
	Mem0[v8:word64] = x19
	v8 = v8 + 8
	Mem0[v8:word64] = x20
	w20 = w1
	x1 = 0x00000000004AB000
	v14 = sp + 32
	Mem0[v14:word64] = x21
	v14 = v14 + 8
	Mem0[v14:word64] = x22
	x1 = x1 + 0xFFFFFFFFFFFFFFA0
	x22 = x0
	x21 = x2
	x0 = 0x0000000000000030
	w2 = 0x000002AF
	Mem0[x29 + 64:word64] = x3
	call sh_xmalloc (retsize: 0;)
	x3 = Mem0[x29 + 64:word64]
	Mem0[x0 + 8:word64] = x22
	Mem0[x0 + 32:word64] = x21
	Mem0[x0 + 24:word32] = w20
	Mem0[x0 + 20:word32] = 0x00000000
	Mem0[x0 + 16:word32] = w3
	Mem0[x0:word64] = 0x0000000000000000
	w31 = w20 - 0x00000013
	NZCV = cond(w31)
	x19 = x0
	branch Test(ULE,ZC) l000000000042CD24
	// succ:  l000000000042CD04 l000000000042CD24
l000000000042CD04:
	x1 = 0x00000000004AC000
	w2 = 0x00000005
	x1 = x1 + 0x0000000000000090
	x0 = 0x0000000000000000
	dcgettext(x0, x1, x2)
	sp = sp + 0xFFFFFFFFFFFFFFF8
	w1 = w20
	call programming_error (retsize: 0;)
	abort()
l000000000042CD24:
	x0 = 0x00000000004AB000
	x0 = x0 + 0xFFFFFFFFFFFFFF8C
	v23 = Mem0[x0 + (uint64) ((uint32) w20):byte]
	w1 = (word32) v23
	x2 = 0x000000000042CD3C
	x1 = x2 + (int64) ((int8) w1)
make_redirection_exit:


// make_function_def
// Return size: 0
void make_function_def()
make_function_def_entry:
	// succ:  l000000000042CE2C
l000000000042CE2C:
	sp = fp
	sp = sp + -64
	Mem0[sp:word64] = x29
	sp = sp + 8
	Mem0[sp:word64] = x30
	x29 = x31 + 0x0000000000000000
	v8 = sp + 32
	Mem0[v8:word64] = x21
	v8 = v8 + 8
	Mem0[v8:word64] = x22
	x21 = x1
	x1 = 0x00000000004AB000
	v12 = sp + 16
	Mem0[v12:word64] = x19
	v12 = v12 + 8
	Mem0[v12:word64] = x20
	w22 = w2
	x20 = x0
	x1 = x1 + 0xFFFFFFFFFFFFFFA0
	w2 = 0x00000307
	x0 = 0x0000000000000020
	Mem0[x29 + 48:word64] = x3
	call sh_xmalloc (retsize: 0;)
	x3 = Mem0[x29 + 48:word64]
	Mem0[x0 + 16:word64] = x21
	Mem0[x0 + 8:word64] = x20
	Mem0[x0 + 4:word32] = w22
	Mem0[x0:word32] = 0x00000000
	Mem0[x21 + 8:word32] = w3
	x19 = x0
	Mem0[x0 + 24:word64] = 0x0000000000000000
	x0 = 0x00000000004AA000
	x0 = x0 + 0x00000000000003D8
	call find_variable (retsize: 0;)
	branch x0 == 0x0000000000000000 l000000000042CEB8
	// succ:  l000000000042CE90 l000000000042CEB8
l000000000042CE90:
	w1 = Mem0[x0 + 40:word32]
	branch (w1 & 0x00000004) == 0x00000000 l000000000042CEB8
	// succ:  l000000000042CE98 l000000000042CEB8
l000000000042CE98:
	x0 = Mem0[x0 + 8:word64]
	branch x0 == 0x0000000000000000 l000000000042CEB8
	// succ:  l000000000042CEA0 l000000000042CEB8
l000000000042CEA0:
	w1 = Mem0[x0 + 16:word32]
	NZCV = cond(w1 - w31)
	branch Test(LE,ZCV) l000000000042CEB8
	// succ:  l000000000042CEAC l000000000042CEB8
l000000000042CEAC:
	x1 = 0x0000000000000000
	call array_reference (retsize: 0;)
	Mem0[x19 + 24:word64] = x0
	// succ:  l000000000042CEB8
l000000000042CEB8:
	x0 = Mem0[x20:word64]
	x1 = x19
	call bind_function_def (retsize: 0;)
	Mem0[x19 + 24:word64] = 0x0000000000000000
	x1 = x19
	v22 = sp + 32
	x21 = Mem0[v22:word64]
	v22 = v22 + 8
	x22 = Mem0[v22:word64]
	v23 = sp + 16
	x19 = Mem0[v23:word64]
	v23 = v23 + 8
	x20 = Mem0[v23:word64]
	x29 = Mem0[sp:word64]
	sp = sp + 8
	x30 = Mem0[sp:word64]
	sp = sp + 64
	w0 = 0x00000007
	// succ:  l000000000042CEDC_thunk_make_command
l000000000042CEDC_thunk_make_command:
	call make_command (retsize: 0;)
	return
	// succ:  make_function_def_exit
make_function_def_exit:


// make_subshell_command
// Return size: 0
void make_subshell_command()
make_subshell_command_entry:
	// succ:  l000000000042CEE0
l000000000042CEE0:
	sp = fp
	sp = sp + -32
	Mem0[sp:word64] = x29
	sp = sp + 8
	Mem0[sp:word64] = x30
	x29 = x31 + 0x0000000000000000
	x1 = 0x00000000004AB000
	Mem0[sp + 16:word64] = x19
	x1 = x1 + 0xFFFFFFFFFFFFFFA0
	x19 = x0
	w2 = 0x00000323
	x0 = 0x0000000000000010
	call sh_xmalloc (retsize: 0;)
	Mem0[x0 + 8:word64] = x19
	x1 = x0
	w0 = 0x00000001
	Mem0[x1:word32] = w0
	x19 = Mem0[sp + 16:word64]
	x29 = Mem0[sp:word64]
	sp = sp + 8
	x30 = Mem0[sp:word64]
	sp = sp + 32
	w0 = 0x0000000D
	// succ:  l000000000042CF20_thunk_make_command
l000000000042CF20_thunk_make_command:
	call make_command (retsize: 0;)
	return
	// succ:  make_subshell_command_exit
make_subshell_command_exit:


// make_coproc_command
// Return size: 0
void make_coproc_command()
make_coproc_command_entry:
	// succ:  l000000000042CF24
l000000000042CF24:
	sp = fp
	sp = sp + -48
	Mem0[sp:word64] = x29
	sp = sp + 8
	Mem0[sp:word64] = x30
	x29 = x31 + 0x0000000000000000
	v8 = sp + 32
	Mem0[v8:word64] = x21
	v8 = v8 + 8
	Mem0[v8:word64] = x22
	x21 = 0x00000000004AB000
	x21 = x21 + 0xFFFFFFFFFFFFFFA0
	v11 = sp + 16
	Mem0[v11:word64] = x19
	v11 = v11 + 8
	Mem0[v11:word64] = x20
	w2 = 0x00000330
	x20 = x0
	x22 = x1
	x0 = 0x0000000000000018
	x1 = x21
	call sh_xmalloc (retsize: 0;)
	x19 = x0
	x0 = x20
	strlen(x0)
	sp = sp + 0xFFFFFFFFFFFFFFF8
	w2 = 0x00000331
	x1 = x21
	x0 = x0 + 0x0000000000000001
	call sh_xmalloc (retsize: 0;)
	x1 = x20
	strcpy(x0, x1)
	sp = sp + 0xFFFFFFFFFFFFFFF8
	Mem0[x19 + 8:word64] = x0
	w0 = 0x00001001
	Mem0[x19 + 16:word64] = x22
	Mem0[x19:word32] = w0
	x1 = x19
	v16 = sp + 32
	x21 = Mem0[v16:word64]
	v16 = v16 + 8
	x22 = Mem0[v16:word64]
	v17 = sp + 16
	x19 = Mem0[v17:word64]
	v17 = v17 + 8
	x20 = Mem0[v17:word64]
	x29 = Mem0[sp:word64]
	sp = sp + 8
	x30 = Mem0[sp:word64]
	sp = sp + 48
	w0 = 0x0000000E
	// succ:  l000000000042CF9C_thunk_make_command
l000000000042CF9C_thunk_make_command:
	call make_command (retsize: 0;)
	return
	// succ:  make_coproc_command_exit
make_coproc_command_exit:


// clean_simple_command
// Return size: 0
void clean_simple_command()
clean_simple_command_entry:
	// succ:  l000000000042CFA0
l000000000042CFA0:
	sp = fp
	sp = sp + -48
	Mem0[sp:word64] = x29
	sp = sp + 8
	Mem0[sp:word64] = x30
	x29 = x31 + 0x0000000000000000
	w2 = Mem0[x0:word32]
	v10 = sp + 16
	Mem0[v10:word64] = x19
	v10 = v10 + 8
	Mem0[v10:word64] = x20
	Mem0[sp + 32:word64] = x21
	w31 = w2 - 0x00000004
	NZCV = cond(w31)
	x19 = x0
	branch Test(NE,Z) l000000000042D02C
	// succ:  l000000000042CFC0 l000000000042D02C
l000000000042CFC0:
	x20 = Mem0[x0 + 24:word64]
	x0 = Mem0[x20 + 8:word64]
	branch x0 == 0x0000000000000000 l000000000042D020
	// succ:  l000000000042CFCC l000000000042D020
l000000000042CFCC:
	x1 = Mem0[x0:word64]
	branch x1 == 0x0000000000000000 l000000000042D020
	// succ:  l000000000042CFD4 l000000000042D020
l000000000042CFD4:
	call list_reverse (retsize: 0;)
	x21 = Mem0[x19 + 24:word64]
	x1 = x0
	// succ:  l000000000042CFE0
l000000000042CFE0:
	x0 = Mem0[x21 + 16:word64]
	Mem0[x20 + 8:word64] = x1
	branch x0 == 0x0000000000000000 l000000000042CFF8
	// succ:  l000000000042CFEC l000000000042CFF8
l000000000042CFEC:
	x1 = Mem0[x0:word64]
	branch x1 == 0x0000000000000000 l000000000042CFF8
	// succ:  l000000000042CFF4 l000000000042CFF8
l000000000042CFF4:
	call list_reverse (retsize: 0;)
	// succ:  l000000000042CFF8
l000000000042CFF8:
	Mem0[x21 + 16:word64] = x0
	// succ:  l000000000042CFFC
l000000000042CFFC:
	x1 = 0x00000000004E3000
	w2 = Mem0[x1 + 604:word32]
	x0 = x19
	w2 = w2 & 0xFFF7FFFF
	v18 = sp + 16
	x19 = Mem0[v18:word64]
	v18 = v18 + 8
	x20 = Mem0[v18:word64]
	x21 = Mem0[sp + 32:word64]
	Mem0[x1 + 604:word32] = w2
	x29 = Mem0[sp:word64]
	sp = sp + 8
	x30 = Mem0[sp:word64]
	sp = sp + 48
	return
	// succ:  clean_simple_command_exit
l000000000042D020:
	x21 = x20
	x1 = x0
	goto l000000000042CFE0
	// succ:  l000000000042CFE0
l000000000042D02C:
	x0 = 0x00000000004AC000
	x0 = x0 + 0x00000000000000D0
	w1 = 0x00000001
	w3 = 0x00000000
	call command_error (retsize: 0;)
	goto l000000000042CFFC
	// succ:  l000000000042CFFC
clean_simple_command_exit:


// connect_async_list
// Return size: 0
void connect_async_list()
connect_async_list_entry:
	// succ:  l000000000042D044
l000000000042D044:
	sp = fp
	sp = sp + -32
	Mem0[sp:word64] = x29
	sp = sp + 8
	Mem0[sp:word64] = x30
	x29 = x31 + 0x0000000000000000
	v8 = sp + 16
	Mem0[v8:word64] = x19
	v8 = v8 + 8
	Mem0[v8:word64] = x20
	x20 = x0
	x0 = Mem0[x0 + 24:word64]
	x19 = Mem0[x0 + 16:word64]
	branch x19 == 0x0000000000000000 l000000000042D074
	// succ:  l000000000042D060 l000000000042D074
l000000000042D060:
	w3 = Mem0[x20 + 4:word32]
	branch (w3 & 0x00000001) == 0x00000000 l000000000042D074
	// succ:  l000000000042D068 l000000000042D074
l000000000042D068:
	w0 = Mem0[x0 + 24:word32]
	w31 = w0 - 0x0000003B
	NZCV = cond(w31)
	branch Test(EQ,Z) l000000000042D084
	// succ:  l000000000042D074 l000000000042D084
l000000000042D074:
	x0 = x20
	v15 = sp + 16
	x19 = Mem0[v15:word64]
	v15 = v15 + 8
	x20 = Mem0[v15:word64]
	x29 = Mem0[sp:word64]
	sp = sp + 8
	x30 = Mem0[sp:word64]
	sp = sp + 32
	// succ:  l000000000042D080_thunk_command_connect
l000000000042D080_thunk_command_connect:
	call command_connect (retsize: 0;)
	return
	// succ:  connect_async_list_exit
l000000000042D084:
	x0 = Mem0[x19:word64]
	x0 = x0 & 0x0000000000000000
	x31 = x0 - 0x0000000000000006
	NZCV = cond(x31)
	branch Test(NE,Z) l000000000042D0EC
	// succ:  l000000000042D094 l000000000042D0EC
l000000000042D094:
	x4 = Mem0[x19 + 24:word64]
	w0 = Mem0[x4 + 24:word32]
	w31 = w0 - 0x0000003B
	NZCV = cond(w31)
	branch Test(EQ,Z) l000000000042D0BC
	// succ:  l000000000042D0A4 l000000000042D0BC
l000000000042D0A4:
	goto l000000000042D0EC
	// succ:  l000000000042D0EC
l000000000042D0A8:
	x4 = Mem0[x0 + 24:word64]
	w5 = Mem0[x4 + 24:word32]
	w31 = w5 - 0x0000003B
	NZCV = cond(w31)
	branch Test(NE,Z) l000000000042D0D0
	// succ:  l000000000042D0B8 l000000000042D0D0
l000000000042D0B8:
	x19 = x0
	// succ:  l000000000042D0BC
l000000000042D0BC:
	x0 = Mem0[x4 + 16:word64]
	x4 = Mem0[x0:word64]
	x4 = x4 & 0x0000000000000000
	x31 = x4 - 0x0000000000000006
	NZCV = cond(x31)
	branch Test(EQ,Z) l000000000042D0A8
	// succ:  l000000000042D0D0 l000000000042D0A8
l000000000042D0D0:
	call command_connect (retsize: 0;)
	x1 = Mem0[x19 + 24:word64]
	Mem0[x1 + 16:word64] = x0
	x0 = x20
	v26 = sp + 16
	x19 = Mem0[v26:word64]
	v26 = v26 + 8
	x20 = Mem0[v26:word64]
	x29 = Mem0[sp:word64]
	sp = sp + 8
	x30 = Mem0[sp:word64]
	sp = sp + 32
	return
	// succ:  connect_async_list_exit
l000000000042D0EC:
	x0 = x19
	x19 = x20
	goto l000000000042D0D0
	// succ:  l000000000042D0D0
connect_async_list_exit:


// fn000000000042D114
// Return size: 0
void fn000000000042D114()
fn000000000042D114_entry:
	// succ:  l000000000042D114
l000000000042D114:
	sp = fp
	sp = sp + -32
	Mem0[sp:word64] = x29
	sp = sp + 8
	Mem0[sp:word64] = x30
	x29 = x31 + 0x0000000000000000
	v8 = sp + 16
	Mem0[v8:word64] = x19
	v8 = v8 + 8
	Mem0[v8:word64] = x20
	x19 = 0x00000000004DF000
	x19 = x19 + 0xFFFFFFFFFFFFFB30
	x20 = Mem0[x19 + 24:word64]
	branch x20 == 0x0000000000000000 l000000000042D178
	// succ:  l000000000042D130 l000000000042D178
l000000000042D130:
	w2 = Mem0[x19 + 36:word32]
	w1 = Mem0[x19 + 32:word32]
	w0 = w0 + w2
	NZCV = cond(w0 - w1)
	branch Test(LT,NV) l000000000042D16C
	// succ:  l000000000042D144 l000000000042D16C
l000000000042D144:
	w0 = w0 + 0x00000080
	w4 = w0 & 0xFFFFFF80
	x2 = 0x00000000004AC000
	x0 = x20
l000000000042D16C:
	v19 = sp + 16
	x19 = Mem0[v19:word64]
	v19 = v19 + 8
	x20 = Mem0[v19:word64]
	x29 = Mem0[sp:word64]
	sp = sp + 8
	x30 = Mem0[sp:word64]
	sp = sp + 32
	return
	// succ:  fn000000000042D114_exit
l000000000042D178:
	w0 = w0 + 0x0000003F
	w3 = w0 & 0xFFFFFFC0
	x1 = 0x00000000004AC000
fn000000000042D114_exit:


// fn000000000042D1A4
// Return size: 0
void fn000000000042D1A4()
fn000000000042D1A4_entry:
	// succ:  l000000000042D1A4
l000000000042D1A4:
	sp = fp
	sp = sp + -352
	Mem0[sp:word64] = x29
	sp = sp + 8
	Mem0[sp:word64] = x30
	x29 = x31 + 0x0000000000000000
	v8 = sp + 16
	Mem0[v8:word64] = x19
	v8 = v8 + 8
	Mem0[v8:word64] = x20
	Mem0[x29 + 296:word64] = x1
	Mem0[x29 + 304:word64] = x2
	Mem0[x29 + 312:word64] = x3
	Mem0[x29 + 320:word64] = x4
	Mem0[x29 + 328:word64] = x5
	Mem0[x29 + 336:word64] = x6
	Mem0[x29 + 344:word64] = x7
	Mem0[x29 + 160:word128] = q0
	Mem0[x29 + 176:word128] = q1
	Mem0[x29 + 192:word128] = q2
	Mem0[x29 + 208:word128] = q3
	Mem0[x29 + 224:word128] = q4
	Mem0[x29 + 240:word128] = q5
	v24 = sp + 32
	Mem0[v24:word64] = x21
	v24 = v24 + 8
	Mem0[v24:word64] = x22
	v27 = sp + 48
	Mem0[v27:word64] = x23
	v27 = v27 + 8
	Mem0[v27:word64] = x24
	Mem0[sp + 64:word64] = x25
	x1 = x29 + 0x0000000000000100
	Mem0[x1:word128] = q6
	x2 = x29 + 0x0000000000000110
	Mem0[x2:word128] = q7
	x1 = x29 + 0x0000000000000160
	Mem0[x29 + 80:word64] = x1
	Mem0[x29 + 88:word64] = x1
	x1 = x29 + 0x0000000000000120
	Mem0[x29 + 96:word64] = x1
	w1 = 0xFFFFFFC8
	Mem0[x29 + 104:word32] = w1
	w1 = 0xFFFFFF80
	Mem0[x29 + 108:word32] = w1
	x19 = x0
	strlen(x0)
	sp = sp + 0xFFFFFFFFFFFFFFF8
	w0 = w0 + 0x00000001
	call fn000000000042D114 (retsize: 0;)
	Mem0[x29 + 129:byte] = 0x00
	branch x19 == 0x0000000000000000 l000000000042D3F8
	// succ:  l000000000042D23C l000000000042D3F8
l000000000042D23C:
	v35 = Mem0[x19:byte]
	w2 = (word32) v35
	branch w2 == 0x00000000 l000000000042D3F8
	// succ:  l000000000042D244 l000000000042D3F8
l000000000042D244:
	x1 = 0x00000000004AC000
	x0 = 0x00000000004AC000
	x23 = 0x00000000004DF000
	x24 = x1 + 0x0000000000000150
	x25 = x0 + 0x0000000000000148
	// succ:  l000000000042D258
l000000000042D258:
	w31 = w2 - 0x00000025
	NZCV = cond(w31)
	x20 = x19 + 0x0000000000000001
	branch Test(EQ,Z) l000000000042D2E0
	// succ:  l000000000042D264 l000000000042D2E0
l000000000042D264:
	Mem0[x29 + 128:byte] = (byte) w2
	// succ:  l000000000042D268
l000000000042D268:
	x2 = 0x0000000000000001
	w0 = 0x00000002
	w22 = w2
	x21 = x29 + 0x0000000000000080
	x19 = x23 + 0xFFFFFFFFFFFFFB30
	Mem0[x29 + 144:word64] = x2
	call fn000000000042D114 (retsize: 0;)
	v40 = Mem0[x19 + 18:int32]
	x4 = (word64) v40
	x0 = Mem0[x19 + 24:word64]
	x2 = Mem0[x29 + 144:word64]
	x1 = x21
	x0 = x0 + x4
	memcpy(x0, x1, x2)
	sp = sp + 0xFFFFFFFFFFFFFFF8
	w0 = Mem0[x19 + 36:word32]
	w22 = w0 + w22
	Mem0[x19 + 36:word32] = w22
	branch x20 == 0x0000000000000000 l000000000042D2B8
	// succ:  l000000000042D2AC l000000000042D2B8
l000000000042D2AC:
	x19 = x20
	// succ:  l000000000042D2B0
l000000000042D2B0:
	v41 = Mem0[x19:byte]
	w2 = (word32) v41
	branch w2 != 0x00000000 l000000000042D258
	// succ:  l000000000042D2B8 l000000000042D258
l000000000042D2B8:
	x23 = x23 + 0xFFFFFFFFFFFFFB30
	v42 = Mem0[x23 + 18:int32]
	x0 = (word64) v42
	x1 = Mem0[x23 + 24:word64]
	Mem0[x1 + x0:byte] = 0x00
	v43 = sp + 16
	x19 = Mem0[v43:word64]
	v43 = v43 + 8
	x20 = Mem0[v43:word64]
	v44 = sp + 32
	x21 = Mem0[v44:word64]
	v44 = v44 + 8
	x22 = Mem0[v44:word64]
	v45 = sp + 48
	x23 = Mem0[v45:word64]
	v45 = v45 + 8
	x24 = Mem0[v45:word64]
	x25 = Mem0[sp + 64:word64]
	x29 = Mem0[sp:word64]
	sp = sp + 8
	x30 = Mem0[sp:word64]
	sp = sp + 352
	return
	// succ:  fn000000000042D1A4_exit
l000000000042D2E0:
	v47 = Mem0[x19 + 1:byte]
	w21 = (word32) v47
	branch w21 == 0x00000000 l000000000042D264
	// succ:  l000000000042D2E8 l000000000042D264
l000000000042D2E8:
	w31 = w21 - 0x00000063
	NZCV = cond(w31)
	x19 = x19 + 0x0000000000000002
	branch Test(EQ,Z) l000000000042D3D0
	// succ:  l000000000042D2F4 l000000000042D3D0
l000000000042D2F4:
	branch Test(ULE,ZC) l000000000042D3A0
	// succ:  l000000000042D2F8 l000000000042D3A0
l000000000042D2F8:
	w31 = w21 - 0x00000064
	NZCV = cond(w31)
	branch Test(EQ,Z) l000000000042D350
	// succ:  l000000000042D300 l000000000042D350
l000000000042D300:
	w31 = w21 - 0x00000073
	NZCV = cond(w31)
	branch Test(NE,Z) l000000000042D3B4
	// succ:  l000000000042D308 l000000000042D3B4
l000000000042D308:
	w1 = Mem0[x29 + 104:word32]
	x0 = Mem0[x29 + 80:word64]
	branch (w1 & 0x00000000) == 0x00000000 l000000000042D45C
	// succ:  l000000000042D314 l000000000042D45C
l000000000042D314:
	x1 = x0 + 0x000000000000000F
	x1 = x1 & 0x0000000000000000
	Mem0[x29 + 80:word64] = x1
	// succ:  l000000000042D320
l000000000042D320:
	x21 = Mem0[x0:word64]
	x0 = x21
	strlen(x0)
	sp = sp + 0xFFFFFFFFFFFFFFF8
	x31 = x21 - x31
	NZCV = cond(x31)
	w22 = w0
	w20 = (word32) Test(NE,Z)
	branch w22 == 0x00000000 l000000000042D2B0
	// succ:  l000000000042D33C l000000000042D2B0
l000000000042D33C:
	branch w20 == 0x00000000 l000000000042D2B0
	// succ:  l000000000042D340 l000000000042D2B0
l000000000042D340:
	w0 = w22 + 0x00000001
l000000000042D350:
	w1 = Mem0[x29 + 104:word32]
	x0 = Mem0[x29 + 80:word64]
	branch (w1 & 0x00000000) == 0x00000000 l000000000042D440
	// succ:  l000000000042D35C l000000000042D440
l000000000042D35C:
	x1 = x0 + 0x000000000000000B
	x1 = x1 & 0x0000000000000000
	Mem0[x29 + 80:word64] = x1
	// succ:  l000000000042D368
l000000000042D368:
	w0 = Mem0[x0:word32]
	branch (w0 & 0x00000000) == 0x00000000 l000000000042D41C
	// succ:  l000000000042D370 l000000000042D41C
l000000000042D370:
l000000000042D38C:
	x0 = x21
	strlen(x0)
	sp = sp + 0xFFFFFFFFFFFFFFF8
	w22 = w0
	branch w22 == 0x00000000 l000000000042D2B0
	// succ:  l000000000042D39C l000000000042D2B0
l000000000042D39C:
	goto l000000000042D33C
	// succ:  l000000000042D33C
l000000000042D3A0:
	w31 = w21 - 0x00000025
	NZCV = cond(w31)
	branch Test(NE,Z) l000000000042D3B4
	// succ:  l000000000042D3A8 l000000000042D3B4
l000000000042D3A8:
	Mem0[x29 + 128:byte] = (byte) w2
	x20 = x19
	goto l000000000042D268
	// succ:  l000000000042D268
l000000000042D3B4:
	x1 = x24
	w2 = 0x00000005
	x0 = 0x0000000000000000
	dcgettext(x0, x1, x2)
	sp = sp + 0xFFFFFFFFFFFFFFF8
	w1 = w21
	call programming_error (retsize: 0;)
	goto l000000000042D2B0
	// succ:  l000000000042D2B0
l000000000042D3D0:
	w1 = Mem0[x29 + 104:word32]
	x0 = Mem0[x29 + 80:word64]
	branch (w1 & 0x00000000) == 0x00000000 l000000000042D400
	// succ:  l000000000042D3DC l000000000042D400
l000000000042D3DC:
	x1 = x0 + 0x000000000000000B
	x1 = x1 & 0x0000000000000000
	Mem0[x29 + 80:word64] = x1
	// succ:  l000000000042D3E8
l000000000042D3E8:
	w0 = Mem0[x0:word32]
	x20 = x19
	Mem0[x29 + 128:byte] = (byte) w0
	goto l000000000042D268
	// succ:  l000000000042D268
l000000000042D3F8:
	x23 = 0x00000000004DF000
	goto l000000000042D2B8
	// succ:  l000000000042D2B8
l000000000042D400:
	w2 = w1 + 0x00000008
	Mem0[x29 + 104:word32] = w2
	NZCV = cond(w2 - w31)
	branch Test(GT,NZV) l000000000042D3DC
	// succ:  l000000000042D410 l000000000042D3DC
l000000000042D410:
	x0 = Mem0[x29 + 88:word64]
	x0 = x0 + (int64) ((int32) w1)
	goto l000000000042D3E8
	// succ:  l000000000042D3E8
l000000000042D41C:
	x0 = x29 + 0x0000000000000070
	w1 = 0x00000001
	x2 = 0x000000000000000C
	x3 = x25
	w4 = 0xFFFFFFFF
	__sprintf_chk(x0, x1, x2, x3, Mem0[sp:<unknown>])
	sp = sp + 0xFFFFFFFFFFFFFFF8
	w20 = 0x00000001
	x21 = x29 + 0x0000000000000070
	goto l000000000042D38C
	// succ:  l000000000042D38C
l000000000042D440:
	w2 = w1 + 0x00000008
	Mem0[x29 + 104:word32] = w2
	NZCV = cond(w2 - w31)
	branch Test(GT,NZV) l000000000042D35C
	// succ:  l000000000042D450 l000000000042D35C
l000000000042D450:
	x0 = Mem0[x29 + 88:word64]
	x0 = x0 + (int64) ((int32) w1)
	goto l000000000042D368
	// succ:  l000000000042D368
l000000000042D45C:
	w2 = w1 + 0x00000008
	Mem0[x29 + 104:word32] = w2
	NZCV = cond(w2 - w31)
	branch Test(GT,NZV) l000000000042D314
	// succ:  l000000000042D46C l000000000042D314
l000000000042D46C:
	x0 = Mem0[x29 + 88:word64]
	x0 = x0 + (int64) ((int32) w1)
	goto l000000000042D320
	// succ:  l000000000042D320
fn000000000042D1A4_exit:


// fn000000000042D478
// Return size: 0
void fn000000000042D478()
fn000000000042D478_entry:
	// succ:  l000000000042D478
l000000000042D478:
	sp = fp
	sp = sp + -48
	Mem0[sp:word64] = x29
	sp = sp + 8
	Mem0[sp:word64] = x30
	x29 = x31 + 0x0000000000000000
	v8 = sp + 16
	Mem0[v8:word64] = x19
	v8 = v8 + 8
	Mem0[v8:word64] = x20
	v11 = sp + 32
	Mem0[v11:word64] = x21
	v11 = v11 + 8
	Mem0[v11:word64] = x22
	x19 = x0
	x20 = x1
	branch x0 == 0x0000000000000000 l000000000042D4C8
	// succ:  l000000000042D494 l000000000042D4C8
l000000000042D494:
	x22 = 0x00000000004AC000
	x21 = 0x00000000004AB000
	x22 = x22 + 0x0000000000000460
	x21 = x21 + 0xFFFFFFFFFFFFFF00
	x2 = Mem0[x19:word64]
	x3 = Mem0[x19 + 8:word64]
	x31 = x2 - x31
	NZCV = cond(x31)
	x1 = Mem0[x3:word64]
l000000000042D4C8:
	v17 = sp + 16
	x19 = Mem0[v17:word64]
	v17 = v17 + 8
	x20 = Mem0[v17:word64]
	v18 = sp + 32
	x21 = Mem0[v18:word64]
	v18 = v18 + 8
	x22 = Mem0[v18:word64]
	x29 = Mem0[sp:word64]
	sp = sp + 8
	x30 = Mem0[sp:word64]
	sp = sp + 48
	return
	// succ:  fn000000000042D478_exit
fn000000000042D478_exit:


// fn000000000042D4D8
// Return size: 0
void fn000000000042D4D8()
fn000000000042D4D8_entry:
	// succ:  l000000000042D4D8
l000000000042D4D8:
	sp = fp
	sp = sp + -32
	Mem0[sp:word64] = x29
	sp = sp + 8
	Mem0[sp:word64] = x30
	x29 = x31 + 0x0000000000000000
	v8 = sp + 16
	Mem0[v8:word64] = x19
	v8 = v8 + 8
	Mem0[v8:word64] = x20
	x20 = 0x00000000004DF000
	x20 = x20 + 0xFFFFFFFFFFFFFB30
	w1 = Mem0[x20 + 40:word32]
fn000000000042D4D8_exit:


// fn000000000042D580
// Return size: 0
void fn000000000042D580()
fn000000000042D580_entry:
	// succ:  l000000000042D580
l000000000042D580:
	sp = fp
	x1 = 0x00000000004DF000
	x1 = x1 + 0xFFFFFFFFFFFFFB30
	w0 = Mem0[x1 + 36:word32]
	NZCV = cond(w0 - w31)
	branch Test(LE,ZCV) l000000000042D5B0
	// succ:  l000000000042D594 l000000000042D5B0
l000000000042D594:
	x1 = Mem0[x1 + 24:word64]
	x0 = x1 + (int64) ((int32) w0)
	v9 = Mem0[x0 + -1:byte]
	w0 = (word32) v9
	w31 = w0 - 0x0000000A
	NZCV = cond(w31)
	branch Test(EQ,Z) l000000000042D5BC
	// succ:  l000000000042D5A8 l000000000042D5BC
l000000000042D5A8:
	w31 = w0 - 0x00000026
	NZCV = cond(w31)
	branch Test(EQ,Z) l000000000042D5BC
	// succ:  l000000000042D5B0 l000000000042D5BC
l000000000042D5B0:
	x0 = 0x00000000004AB000
	x0 = x0 + 0xFFFFFFFFFFFFF990
	// succ:  l000000000042D5B8_thunk_fn000000000042D1A4
l000000000042D5B8_thunk_fn000000000042D1A4:
	call fn000000000042D1A4 (retsize: 0;)
	return
	// succ:  fn000000000042D580_exit
l000000000042D5BC:
	return
	// succ:  fn000000000042D580_exit
fn000000000042D580_exit:


// fn000000000042D5C0
// Return size: 0
void fn000000000042D5C0()
fn000000000042D5C0_entry:
	// succ:  l000000000042D5C0
l000000000042D5C0:
	sp = fp
	sp = sp + -32
	Mem0[sp:word64] = x29
	sp = sp + 8
	Mem0[sp:word64] = x30
	x29 = x31 + 0x0000000000000000
	Mem0[sp + 16:word64] = x19
	x19 = x0
	x0 = 0x00000000004C4000
	x0 = x0 + 0xFFFFFFFFFFFFF8C0
	call fn000000000042D1A4 (retsize: 0;)
	x0 = 0x00000000004DF000
	x0 = x0 + 0xFFFFFFFFFFFFFB30
	w0 = Mem0[x0 + 4:word32]
	call fn000000000042D4D8 (retsize: 0;)
	branch x19 == 0x0000000000000000 l000000000042D5F8
	// succ:  l000000000042D5F0 l000000000042D5F8
l000000000042D5F0:
	v9 = Mem0[x19:byte]
	w0 = (word32) v9
	branch w0 != 0x00000000 l000000000042D604
	// succ:  l000000000042D5F8 l000000000042D604
l000000000042D5F8:
	x19 = Mem0[sp + 16:word64]
	x29 = Mem0[sp:word64]
	sp = sp + 8
	x30 = Mem0[sp:word64]
	sp = sp + 32
	return
	// succ:  fn000000000042D5C0_exit
l000000000042D604:
	x1 = x19
	x0 = 0x00000000004BF000
	x19 = Mem0[sp + 16:word64]
	x29 = Mem0[sp:word64]
	sp = sp + 8
	x30 = Mem0[sp:word64]
	sp = sp + 32
	x0 = x0 + 0x0000000000000050
	// succ:  l000000000042D618_thunk_fn000000000042D1A4
l000000000042D618_thunk_fn000000000042D1A4:
	call fn000000000042D1A4 (retsize: 0;)
	return
	// succ:  fn000000000042D5C0_exit
fn000000000042D5C0_exit:


// fn000000000042D61C
// Return size: 0
void fn000000000042D61C()
fn000000000042D61C_entry:
	// succ:  l000000000042D61C
l000000000042D61C:
	sp = fp
	sp = sp + -32
	Mem0[sp:word64] = x29
	sp = sp + 8
	Mem0[sp:word64] = x30
	x29 = x31 + 0x0000000000000000
	w1 = Mem0[x0 + 24:word32]
	v10 = sp + 16
	Mem0[v10:word64] = x19
	v10 = v10 + 8
	Mem0[v10:word64] = x20
	x19 = x0
	w0 = Mem0[x0 + 16:word32]
	w31 = w1 - 0x00000008
	NZCV = cond(w31)
	w20 = (word32) Test(EQ,Z)
	branch (w0 & 0x00000001) == 0x00000000 l000000000042D6DC
	// succ:  l000000000042D640 l000000000042D6DC
l000000000042D640:
	w1 = Mem0[x19 + 8:word32]
	branch w1 != 0x00000000 l000000000042D6F4
	// succ:  l000000000042D648 l000000000042D6F4
l000000000042D648:
	x0 = Mem0[x19 + 32:word64]
	w0 = Mem0[x0 + 8:word32]
	branch (w0 & 0x00000002) == 0x00000000 l000000000042D698
	// succ:  l000000000042D654 l000000000042D698
l000000000042D654:
	branch w20 != 0x00000000 l000000000042D678
	// succ:  l000000000042D658 l000000000042D678
l000000000042D658:
	x2 = Mem0[x19 + 40:word64]
	x1 = 0x00000000004AC000
	v18 = sp + 16
	x19 = Mem0[v18:word64]
	v18 = v18 + 8
	x20 = Mem0[v18:word64]
	x0 = 0x00000000004AC000
	x29 = Mem0[sp:word64]
	sp = sp + 8
	x30 = Mem0[sp:word64]
	sp = sp + 32
	x1 = x1 + 0x0000000000000460
	x0 = x0 + 0x0000000000000180
	// succ:  l000000000042D674_thunk_fn000000000042D1A4
l000000000042D674_thunk_fn000000000042D1A4:
	call fn000000000042D1A4 (retsize: 0;)
	return
	// succ:  fn000000000042D61C_exit
l000000000042D678:
	x2 = Mem0[x19 + 40:word64]
	x1 = 0x00000000004AC000
	v19 = sp + 16
	x19 = Mem0[v19:word64]
	v19 = v19 + 8
	x20 = Mem0[v19:word64]
	x0 = 0x00000000004AC000
	x29 = Mem0[sp:word64]
	sp = sp + 8
	x30 = Mem0[sp:word64]
	sp = sp + 32
	x1 = x1 + 0x0000000000000220
	x0 = x0 + 0x0000000000000180
	// succ:  l000000000042D694_thunk_fn000000000042D1A4
l000000000042D694_thunk_fn000000000042D1A4:
	call fn000000000042D1A4 (retsize: 0;)
	return
	// succ:  fn000000000042D61C_exit
l000000000042D698:
	x0 = Mem0[x19 + 40:word64]
	call sh_single_quote (retsize: 0;)
	x19 = x0
	branch w20 != 0x00000000 l000000000042D704
	// succ:  l000000000042D6A8 l000000000042D704
l000000000042D6A8:
	x1 = 0x00000000004AC000
	x1 = x1 + 0x0000000000000460
	// succ:  l000000000042D6B0
l000000000042D6B0:
	x0 = 0x00000000004AC000
	x2 = x19
	x0 = x0 + 0x0000000000000180
	call fn000000000042D1A4 (retsize: 0;)
	x0 = x19
	x1 = 0x00000000004AC000
	v20 = sp + 16
	x19 = Mem0[v20:word64]
	v20 = v20 + 8
	x20 = Mem0[v20:word64]
	x29 = Mem0[sp:word64]
	sp = sp + 8
	x30 = Mem0[sp:word64]
	sp = sp + 32
	x1 = x1 + 0x0000000000000130
	w2 = 0x0000041D
	// succ:  l000000000042D6D8_thunk_sh_xfree
l000000000042D6D8_thunk_sh_xfree:
	call sh_xfree (retsize: 0;)
	return
	// succ:  fn000000000042D61C_exit
l000000000042D6DC:
	x0 = Mem0[x19 + 8:word64]
	x1 = Mem0[x0:word64]
	x0 = 0x00000000004AC000
	x0 = x0 + 0x0000000000000178
	call fn000000000042D1A4 (retsize: 0;)
	goto l000000000042D648
	// succ:  l000000000042D648
l000000000042D6F4:
	x0 = 0x00000000004AD000
	x0 = x0 + 0x0000000000000008
	call fn000000000042D1A4 (retsize: 0;)
	goto l000000000042D648
	// succ:  l000000000042D648
l000000000042D704:
	x1 = 0x00000000004AC000
	x1 = x1 + 0x0000000000000220
	goto l000000000042D6B0
	// succ:  l000000000042D6B0
fn000000000042D61C_exit:


// fn000000000042D710
// Return size: 0
void fn000000000042D710()
fn000000000042D710_entry:
	// succ:  l000000000042D710
l000000000042D710:
	sp = fp
	sp = sp + -64
	Mem0[sp:word64] = x29
	sp = sp + 8
	Mem0[sp:word64] = x30
	x29 = x31 + 0x0000000000000000
	v8 = sp + 32
	Mem0[v8:word64] = x21
	v8 = v8 + 8
	Mem0[v8:word64] = x22
	x22 = 0x00000000004DF000
	x1 = x22 + 0xFFFFFFFFFFFFFB30
	v12 = sp + 16
	Mem0[v12:word64] = x19
	v12 = v12 + 8
	Mem0[v12:word64] = x20
	x19 = Mem0[x1 + 16:word64]
	Mem0[sp + 48:word64] = x23
	x20 = 0x00000000004BE000
	x23 = x0
	x20 = x20 + 0x0000000000000330
	branch x19 == 0x0000000000000000 l000000000042D758
	// succ:  l000000000042D740 l000000000042D758
l000000000042D740:
	x0 = x20
	call fn000000000042D1A4 (retsize: 0;)
	x0 = x19
	call fn000000000042D61C (retsize: 0;)
	x19 = Mem0[x19:word64]
	branch x19 != 0x0000000000000000 l000000000042D740
	// succ:  l000000000042D758 l000000000042D740
l000000000042D758:
	v16 = Mem0[x23:byte]
	w0 = (word32) v16
	branch w0 == 0x00000000 l000000000042D778
	// succ:  l000000000042D760 l000000000042D778
l000000000042D760:
	w31 = w0 - 0x0000003B
	NZCV = cond(w31)
	branch Test(EQ,Z) l000000000042D828
	// succ:  l000000000042D768 l000000000042D828
l000000000042D768:
	x0 = 0x00000000004BF000
	x0 = x0 + 0x0000000000000050
	x1 = x23
	call fn000000000042D1A4 (retsize: 0;)
	// succ:  l000000000042D778
l000000000042D778:
	x19 = x22 + 0xFFFFFFFFFFFFFB30
	x0 = Mem0[x19 + 16:word64]
	branch x0 == 0x0000000000000000 l000000000042D7EC
	// succ:  l000000000042D784 l000000000042D7EC
l000000000042D784:
	x20 = 0x00000000004C4000
	x20 = x20 + 0xFFFFFFFFFFFFF8C0
	x0 = x20
	call fn000000000042D1A4 (retsize: 0;)
	x19 = Mem0[x19 + 16:word64]
	branch x19 == 0x0000000000000000 l000000000042D7EC
	// succ:  l000000000042D79C l000000000042D7EC
l000000000042D79C:
	x21 = 0x00000000004AB000
	x21 = x21 + 0xFFFFFFFFFFFFFF00
	// succ:  l000000000042D7A4
l000000000042D7A4:
	x3 = Mem0[x19 + 32:word64]
	x2 = Mem0[x19 + 40:word64]
	x1 = Mem0[x3:word64]
	x0 = x21
	call fn000000000042D1A4 (retsize: 0;)
	x0 = x20
	call fn000000000042D1A4 (retsize: 0;)
	x19 = Mem0[x19:word64]
	branch x19 != 0x0000000000000000 l000000000042D7A4
	// succ:  l000000000042D7C8 l000000000042D7A4
l000000000042D7C8:
	x0 = x22 + 0xFFFFFFFFFFFFFB30
	x0 = Mem0[x0 + 16:word64]
	branch x0 == 0x0000000000000000 l000000000042D7EC
	// succ:  l000000000042D7D4 l000000000042D7EC
l000000000042D7D4:
	v24 = Mem0[x23:byte]
	w1 = (word32) v24
	branch w1 != 0x00000000 l000000000042D808
	// succ:  l000000000042D7DC l000000000042D808
l000000000042D7DC:
	call dispose_redirects (retsize: 0;)
	x0 = x22 + 0xFFFFFFFFFFFFFB30
	w1 = 0x00000001
	Mem0[x0 + 56:word32] = w1
	// succ:  l000000000042D7EC
l000000000042D7EC:
	x22 = x22 + 0xFFFFFFFFFFFFFB30
	Mem0[x22 + 16:word64] = 0x0000000000000000
	v25 = sp + 16
	x19 = Mem0[v25:word64]
	v25 = v25 + 8
	x20 = Mem0[v25:word64]
	v26 = sp + 32
	x21 = Mem0[v26:word64]
	v26 = v26 + 8
	x22 = Mem0[v26:word64]
	x23 = Mem0[sp + 48:word64]
	x29 = Mem0[sp:word64]
	sp = sp + 8
	x30 = Mem0[sp:word64]
	sp = sp + 64
	return
	// succ:  fn000000000042D710_exit
l000000000042D808:
	w31 = w1 - 0x0000003B
	NZCV = cond(w31)
	branch Test(EQ,Z) l000000000042D844
	// succ:  l000000000042D810 l000000000042D844
l000000000042D810:
	x0 = 0x00000000004BE000
	x0 = x0 + 0x0000000000000330
	call fn000000000042D1A4 (retsize: 0;)
	x0 = x22 + 0xFFFFFFFFFFFFFB30
	x0 = Mem0[x0 + 16:word64]
	goto l000000000042D7DC
	// succ:  l000000000042D7DC
l000000000042D828:
	v20 = Mem0[x23 + 1:byte]
	w0 = (word32) v20
	branch w0 == 0x00000000 l000000000042D778
	// succ:  l000000000042D830 l000000000042D778
l000000000042D830:
	x0 = 0x00000000004BF000
	x0 = x0 + 0x0000000000000050
	x1 = x23
	call fn000000000042D1A4 (retsize: 0;)
	goto l000000000042D778
	// succ:  l000000000042D778
l000000000042D844:
	v27 = Mem0[x23 + 1:byte]
	w1 = (word32) v27
	branch w1 == 0x00000000 l000000000042D7DC
	// succ:  l000000000042D84C l000000000042D7DC
l000000000042D84C:
	goto l000000000042D810
	// succ:  l000000000042D810
fn000000000042D710_exit:


// fn000000000042D850
// Return size: 0
void fn000000000042D850()
fn000000000042D850_entry:
	// succ:  l000000000042D850
l000000000042D850:
	sp = fp
	sp = sp + -32
	Mem0[sp:word64] = x29
	sp = sp + 8
	Mem0[sp:word64] = x30
	x29 = x31 + 0x0000000000000000
	v8 = sp + 16
	Mem0[v8:word64] = x19
	v8 = v8 + 8
	Mem0[v8:word64] = x20
	x19 = x0
	w0 = Mem0[x0 + 24:word32]
	x20 = Mem0[x19 + 32:word64]
	w31 = w0 - 0x00000013
	NZCV = cond(w31)
	w2 = Mem0[x19 + 32:word32]
	x3 = Mem0[x19 + 8:word64]
	w1 = Mem0[x19 + 8:word32]
	branch Test(ULE,ZC) l000000000042D888
	// succ:  l000000000042D87C l000000000042D888
l000000000042D87C:
	v17 = sp + 16
	x19 = Mem0[v17:word64]
	v17 = v17 + 8
	x20 = Mem0[v17:word64]
	x29 = Mem0[sp:word64]
	sp = sp + 8
	x30 = Mem0[sp:word64]
	sp = sp + 32
	return
	// succ:  fn000000000042D850_exit
l000000000042D888:
	x4 = 0x00000000004AC000
	x4 = x4 + 0x00000000000000E8
	v20 = Mem0[x4 + (uint64) ((uint32) w0):word16]
	w5 = (word32) v20
	x6 = 0x000000000042D8A0
	x5 = x6 + (int64) ((int16) w5)
fn000000000042D850_exit:


// fn000000000042DCBC
// Return size: 0
void fn000000000042DCBC()
fn000000000042DCBC_entry:
	// succ:  l000000000042DCBC
l000000000042DCBC:
	sp = fp
	sp = sp + -48
	Mem0[sp:word64] = x29
	sp = sp + 8
	Mem0[sp:word64] = x30
	x29 = x31 + 0x0000000000000000
	v8 = sp + 16
	Mem0[v8:word64] = x19
	v8 = v8 + 8
	Mem0[v8:word64] = x20
	v11 = sp + 32
	Mem0[v11:word64] = x21
	v11 = v11 + 8
	Mem0[v11:word64] = x22
	x20 = 0x00000000004BE000
	x22 = 0x00000000004AC000
	x21 = 0x00000000004BF000
	x19 = x0
	x22 = x22 + 0x0000000000000298
	x20 = x20 + 0x0000000000000330
	x21 = x21 + 0x0000000000000050
	// succ:  l000000000042DCE8
l000000000042DCE8:
	w1 = Mem0[x19:word32]
	branch (w1 & 0x00000004) == 0x00000000 l000000000042DD50
	// succ:  l000000000042DCF0 l000000000042DD50
l000000000042DCF0:
	w1 = Mem0[x19 + 8:word32]
	w31 = w1 - 0x00000006
	NZCV = cond(w31)
	branch Test(EQ,Z) l000000000042DD64
	// succ:  l000000000042DCFC l000000000042DD64
l000000000042DCFC:
	w31 = w1 - 0x00000001
	NZCV = cond(w31)
	branch Test(EQ,Z) l000000000042DD90
	// succ:  l000000000042DD04 l000000000042DD90
l000000000042DD04:
	w31 = w1 - 0x00000002
	NZCV = cond(w31)
	branch Test(EQ,Z) l000000000042DDAC
	// succ:  l000000000042DD0C l000000000042DDAC
l000000000042DD0C:
	w31 = w1 - 0x00000003
	NZCV = cond(w31)
	branch Test(EQ,Z) l000000000042DDC8
	// succ:  l000000000042DD14 l000000000042DDC8
l000000000042DD14:
	w31 = w1 - 0x00000004
	NZCV = cond(w31)
	branch Test(NE,Z) l000000000042DDE8
	// succ:  l000000000042DD1C l000000000042DDE8
l000000000042DD1C:
	x0 = Mem0[x19 + 24:word64]
	call fn000000000042DCBC (retsize: 0;)
	x0 = x20
	call fn000000000042D1A4 (retsize: 0;)
	x1 = Mem0[x19 + 16:word64]
	x0 = x21
	x1 = Mem0[x1:word64]
	call fn000000000042D1A4 (retsize: 0;)
	x0 = x20
	call fn000000000042D1A4 (retsize: 0;)
	x19 = Mem0[x19 + 32:word64]
	w1 = Mem0[x19:word32]
	branch (w1 & 0x00000004) == 0x00000000 l000000000042DCF0
	// succ:  l000000000042DD50 l000000000042DCF0
l000000000042DD50:
	x0 = x22
	call fn000000000042D1A4 (retsize: 0;)
	w1 = Mem0[x19 + 8:word32]
	w31 = w1 - 0x00000006
	NZCV = cond(w31)
	branch Test(NE,Z) l000000000042DCFC
	// succ:  l000000000042DD64 l000000000042DCFC
l000000000042DD64:
	x0 = 0x00000000004AC000
	x0 = x0 + 0x00000000000002A0
	call fn000000000042D1A4 (retsize: 0;)
	x0 = Mem0[x19 + 24:word64]
	call fn000000000042DCBC (retsize: 0;)
	x0 = 0x00000000004AC000
	v18 = sp + 16
	x19 = Mem0[v18:word64]
	v18 = v18 + 8
	x20 = Mem0[v18:word64]
	v19 = sp + 32
	x21 = Mem0[v19:word64]
	v19 = v19 + 8
	x22 = Mem0[v19:word64]
	x29 = Mem0[sp:word64]
	sp = sp + 8
	x30 = Mem0[sp:word64]
	sp = sp + 48
	x0 = x0 + 0x00000000000002A8
	// succ:  l000000000042DD8C_thunk_fn000000000042D1A4
l000000000042DD8C_thunk_fn000000000042D1A4:
	call fn000000000042D1A4 (retsize: 0;)
	return
	// succ:  fn000000000042DCBC_exit
l000000000042DD90:
	x0 = Mem0[x19 + 24:word64]
	call fn000000000042DCBC (retsize: 0;)
	x0 = 0x00000000004AC000
	x0 = x0 + 0x00000000000002B0
	call fn000000000042D1A4 (retsize: 0;)
	x19 = Mem0[x19 + 32:word64]
	goto l000000000042DCE8
	// succ:  l000000000042DCE8
l000000000042DDAC:
	x0 = Mem0[x19 + 24:word64]
	call fn000000000042DCBC (retsize: 0;)
	x0 = 0x00000000004AC000
	x0 = x0 + 0x00000000000002B8
	call fn000000000042D1A4 (retsize: 0;)
	x19 = Mem0[x19 + 32:word64]
	goto l000000000042DCE8
	// succ:  l000000000042DCE8
l000000000042DDC8:
	x1 = Mem0[x19 + 16:word64]
	x0 = x21
	x1 = Mem0[x1:word64]
	call fn000000000042D1A4 (retsize: 0;)
	x0 = x20
	call fn000000000042D1A4 (retsize: 0;)
	x19 = Mem0[x19 + 24:word64]
	goto l000000000042DCE8
	// succ:  l000000000042DCE8
l000000000042DDE8:
	w31 = w1 - 0x00000005
	NZCV = cond(w31)
	branch Test(EQ,Z) l000000000042DE00
	// succ:  l000000000042DDF0 l000000000042DE00
l000000000042DDF0:
	v20 = sp + 16
	x19 = Mem0[v20:word64]
	v20 = v20 + 8
	x20 = Mem0[v20:word64]
	v21 = sp + 32
	x21 = Mem0[v21:word64]
	v21 = v21 + 8
	x22 = Mem0[v21:word64]
	x29 = Mem0[sp:word64]
	sp = sp + 8
	x30 = Mem0[sp:word64]
	sp = sp + 48
	return
	// succ:  fn000000000042DCBC_exit
l000000000042DE00:
	x0 = Mem0[x19 + 16:word64]
	v22 = sp + 32
	x21 = Mem0[v22:word64]
	v22 = v22 + 8
	x22 = Mem0[v22:word64]
	x1 = Mem0[x0:word64]
	v23 = sp + 16
	x19 = Mem0[v23:word64]
	v23 = v23 + 8
	x20 = Mem0[v23:word64]
	x0 = 0x00000000004BF000
	x29 = Mem0[sp:word64]
	sp = sp + 8
	x30 = Mem0[sp:word64]
	sp = sp + 48
	x0 = x0 + 0x0000000000000050
	// succ:  l000000000042DE1C_thunk_fn000000000042D1A4
l000000000042DE1C_thunk_fn000000000042D1A4:
	call fn000000000042D1A4 (retsize: 0;)
	return
	// succ:  fn000000000042DCBC_exit
fn000000000042DCBC_exit:


// fn000000000042DE20
// Return size: 0
void fn000000000042DE20()
fn000000000042DE20_entry:
	// succ:  l000000000042DE20
l000000000042DE20:
	sp = fp
	sp = sp + -80
	Mem0[sp:word64] = x29
	sp = sp + 8
	Mem0[sp:word64] = x30
	x29 = x31 + 0x0000000000000000
	Mem0[sp + 64:word64] = x25
	x25 = 0x00000000004DF000
	v9 = sp + 16
	Mem0[v9:word64] = x19
	v9 = v9 + 8
	Mem0[v9:word64] = x20
	v12 = sp + 32
	Mem0[v12:word64] = x21
	v12 = v12 + 8
	Mem0[v12:word64] = x22
	v15 = sp + 48
	Mem0[v15:word64] = x23
	v15 = v15 + 8
	Mem0[v15:word64] = x24
	x1 = x25 + 0xFFFFFFFFFFFFFB30
	x23 = 0x0000000000000000
	Mem0[x1 + 56:word32] = 0x00000000
	x19 = x0
	x21 = x23
	branch x0 == 0x0000000000000000 l000000000042DF4C
	// succ:  l000000000042DE54 l000000000042DF4C
l000000000042DE54:
	w20 = Mem0[x19 + 24:word32]
	x22 = 0x00000000004BE000
	w31 = w20 - 0x00000008
	NZCV = cond(w31)
	w24 = 0x0000000A
	x22 = x22 + 0x0000000000000330
	branch Test(EQ,Z) l000000000042DEAC
	// succ:  l000000000042DE6C l000000000042DEAC
l000000000042DE6C:
	w31 = w20 - 0x00000004
	NZCV = cond(w31)
	branch Test(EQ,Z) l000000000042DEAC
	// succ:  l000000000042DE74 l000000000042DEAC
l000000000042DE74:
	w31 = w20 - 0x0000000E
	NZCV = cond(w31)
	branch Test(NE,Z) l000000000042DE88
	// succ:  l000000000042DE7C l000000000042DE88
l000000000042DE7C:
	w0 = Mem0[x19 + 8:word32]
	w31 = w0 - 0x00000001
	NZCV = cond(w31)
	branch Test(EQ,Z) l000000000042DF34
	// succ:  l000000000042DE88 l000000000042DF34
l000000000042DE88:
	x0 = x19
	call fn000000000042D850 (retsize: 0;)
	// succ:  l000000000042DE90
l000000000042DE90:
	x19 = Mem0[x19:word64]
	branch x19 == 0x0000000000000000 l000000000042DECC
	// succ:  l000000000042DE98 l000000000042DECC
l000000000042DE98:
	x0 = x22
	call fn000000000042D1A4 (retsize: 0;)
	w20 = Mem0[x19 + 24:word32]
	w31 = w20 - 0x00000008
	NZCV = cond(w31)
	branch Test(NE,Z) l000000000042DE6C
	// succ:  l000000000042DEAC l000000000042DE6C
l000000000042DEAC:
	x0 = x19
	call copy_redirect (retsize: 0;)
	Mem0[x0:word64] = 0x0000000000000000
	branch x21 == 0x0000000000000000 l000000000042DF64
	// succ:  l000000000042DEBC l000000000042DF64
l000000000042DEBC:
	Mem0[x23:word64] = x0
	x19 = Mem0[x19:word64]
	x23 = x0
	branch x19 != 0x0000000000000000 l000000000042DE98
	// succ:  l000000000042DECC l000000000042DE98
l000000000042DECC:
	x20 = x21
	branch x21 == 0x0000000000000000 l000000000042DF4C
	// succ:  l000000000042DED4 l000000000042DF4C
l000000000042DED4:
	x1 = x25 + 0xFFFFFFFFFFFFFB30
	w2 = Mem0[x1 + 8:word32]
	branch w2 != 0x00000000 l000000000042DF48
	// succ:  l000000000042DEE0 l000000000042DF48
l000000000042DEE0:
	x0 = 0x00000000004BE000
	x0 = x0 + 0x0000000000000330
	x19 = 0x00000000004C4000
	call fn000000000042D1A4 (retsize: 0;)
	x19 = x19 + 0xFFFFFFFFFFFFF8C0
	// succ:  l000000000042DEF4
l000000000042DEF4:
	x0 = x21
	call fn000000000042D850 (retsize: 0;)
	x0 = x19
	call fn000000000042D1A4 (retsize: 0;)
	x21 = Mem0[x21:word64]
	branch x21 != 0x0000000000000000 l000000000042DEF4
	// succ:  l000000000042DF0C l000000000042DEF4
l000000000042DF0C:
	x25 = x25 + 0xFFFFFFFFFFFFFB30
	w1 = 0x00000001
	x0 = x20
	Mem0[x25 + 56:word32] = w1
	v26 = sp + 16
	x19 = Mem0[v26:word64]
	v26 = v26 + 8
	x20 = Mem0[v26:word64]
	v27 = sp + 32
	x21 = Mem0[v27:word64]
	v27 = v27 + 8
	x22 = Mem0[v27:word64]
	v28 = sp + 48
	x23 = Mem0[v28:word64]
	v28 = v28 + 8
	x24 = Mem0[v28:word64]
	x25 = Mem0[sp + 64:word64]
	x29 = Mem0[sp:word64]
	sp = sp + 8
	x30 = Mem0[sp:word64]
	sp = sp + 80
	// succ:  l000000000042DF30_thunk_dispose_redirects
l000000000042DF30_thunk_dispose_redirects:
	call dispose_redirects (retsize: 0;)
	return
	// succ:  fn000000000042DE20_exit
l000000000042DF34:
	Mem0[x19 + 24:word32] = w24
	x0 = x19
	call fn000000000042D850 (retsize: 0;)
	Mem0[x19 + 24:word32] = w20
	goto l000000000042DE90
	// succ:  l000000000042DE90
l000000000042DF48:
	Mem0[x1 + 16:word64] = x21
	// succ:  l000000000042DF4C
l000000000042DF4C:
	v29 = sp + 16
	x19 = Mem0[v29:word64]
	v29 = v29 + 8
	x20 = Mem0[v29:word64]
	v30 = sp + 32
	x21 = Mem0[v30:word64]
	v30 = v30 + 8
	x22 = Mem0[v30:word64]
	v31 = sp + 48
	x23 = Mem0[v31:word64]
	v31 = v31 + 8
	x24 = Mem0[v31:word64]
	x25 = Mem0[sp + 64:word64]
	x29 = Mem0[sp:word64]
	sp = sp + 8
	x30 = Mem0[sp:word64]
	sp = sp + 80
	return
	// succ:  fn000000000042DE20_exit
l000000000042DF64:
	x23 = x0
	x21 = x0
	goto l000000000042DE90
	// succ:  l000000000042DE90
fn000000000042DE20_exit:


// print_word_list
// Return size: 0
void print_word_list()
print_word_list_entry:
	// succ:  l000000000042E014
l000000000042E014:
	sp = fp
	sp = sp + -48
	Mem0[sp:word64] = x29
	sp = sp + 8
	Mem0[sp:word64] = x30
	x29 = x31 + 0x0000000000000000
	v8 = sp + 16
	Mem0[v8:word64] = x19
	v8 = v8 + 8
	Mem0[v8:word64] = x20
	v11 = sp + 32
	Mem0[v11:word64] = x21
	v11 = v11 + 8
	Mem0[v11:word64] = x22
	x19 = x0
	x20 = x1
	branch x0 == 0x0000000000000000 l000000000042E064
	// succ:  l000000000042E030 l000000000042E064
l000000000042E030:
	x22 = 0x00000000004AC000
	x21 = 0x00000000004AB000
	x22 = x22 + 0x0000000000000460
	x21 = x21 + 0xFFFFFFFFFFFFFF00
	x2 = Mem0[x19:word64]
	x3 = Mem0[x19 + 8:word64]
	x31 = x2 - x31
	NZCV = cond(x31)
	x1 = Mem0[x3:word64]
l000000000042E064:
	v17 = sp + 16
	x19 = Mem0[v17:word64]
	v17 = v17 + 8
	x20 = Mem0[v17:word64]
	v18 = sp + 32
	x21 = Mem0[v18:word64]
	v18 = v18 + 8
	x22 = Mem0[v18:word64]
	x29 = Mem0[sp:word64]
	sp = sp + 8
	x30 = Mem0[sp:word64]
	sp = sp + 48
	return
	// succ:  print_word_list_exit
print_word_list_exit:


// xtrace_set
// Return size: 0
void xtrace_set()
xtrace_set_entry:
	// succ:  l000000000042E074
l000000000042E074:
	sp = fp
	sp = sp + -48
	Mem0[sp:word64] = x29
	sp = sp + 8
	Mem0[sp:word64] = x30
	x29 = x31 + 0x0000000000000000
	v8 = sp + 16
	Mem0[v8:word64] = x19
	v8 = v8 + 8
	Mem0[v8:word64] = x20
	Mem0[sp + 32:word64] = x21
	w19 = w0
	x20 = x1
	branch (w0 & 0x00000000) == 0x00000000 l000000000042E12C
	// succ:  l000000000042E090 l000000000042E12C
l000000000042E090:
	call sh_validfd (retsize: 0;)
	branch w0 == 0x00000000 l000000000042E104
	// succ:  l000000000042E098 l000000000042E104
l000000000042E098:
	branch x20 == 0x0000000000000000 l000000000042E130
	// succ:  l000000000042E09C l000000000042E130
l000000000042E09C:
	x0 = x20
	fileno(x0)
	sp = sp + 0xFFFFFFFFFFFFFFF8
	NZCV = cond(w0 - w19)
	branch Test(EQ,Z) l000000000042E0DC
	// succ:  l000000000042E0AC l000000000042E0DC
l000000000042E0AC:
	x1 = 0x00000000004AC000
	x1 = x1 + 0x0000000000000308
	w2 = 0x00000005
	x0 = 0x0000000000000000
	dcgettext(x0, x1, x2)
	sp = sp + 0xFFFFFFFFFFFFFFF8
	x21 = x0
	x0 = x20
	fileno(x0)
	sp = sp + 0xFFFFFFFFFFFFFFF8
	w2 = w0
	w1 = w19
	x0 = x21
	call internal_warning (retsize: 0;)
	// succ:  l000000000042E0DC
l000000000042E0DC:
	x0 = 0x00000000004D6000
	x0 = x0 + 0xFFFFFFFFFFFFFA20
	Mem0[x0:word32] = w19
	x0 = 0x00000000004DF000
	x0 = x0 + 0xFFFFFFFFFFFFFB30
	Mem0[x0 + 64:word64] = x20
	x21 = Mem0[sp + 32:word64]
	v20 = sp + 16
	x19 = Mem0[v20:word64]
	v20 = v20 + 8
	x20 = Mem0[v20:word64]
	x29 = Mem0[sp:word64]
	sp = sp + 8
	x30 = Mem0[sp:word64]
	sp = sp + 48
	return
	// succ:  xtrace_set_exit
l000000000042E104:
	x1 = 0x00000000004AC000
	x1 = x1 + 0x00000000000002C0
	w2 = 0x00000005
	x0 = 0x0000000000000000
	dcgettext(x0, x1, x2)
	sp = sp + 0xFFFFFFFFFFFFFFF8
	w1 = w19
	x21 = Mem0[sp + 32:word64]
	v21 = sp + 16
	x19 = Mem0[v21:word64]
	v21 = v21 + 8
	x20 = Mem0[v21:word64]
	x29 = Mem0[sp:word64]
	sp = sp + 8
	x30 = Mem0[sp:word64]
	sp = sp + 48
	// succ:  l000000000042E128_thunk_internal_error
l000000000042E128_thunk_internal_error:
	call internal_error (retsize: 0;)
	return
	// succ:  xtrace_set_exit
l000000000042E12C:
	branch x20 != 0x0000000000000000 l000000000042E0DC
	// succ:  l000000000042E130 l000000000042E0DC
l000000000042E130:
	x1 = 0x00000000004AC000
	x1 = x1 + 0x00000000000002E8
	w2 = 0x00000005
	x0 = 0x0000000000000000
	dcgettext(x0, x1, x2)
	sp = sp + 0xFFFFFFFFFFFFFFF8
	v19 = sp + 16
	x19 = Mem0[v19:word64]
	v19 = v19 + 8
	x20 = Mem0[v19:word64]
	x21 = Mem0[sp + 32:word64]
	x29 = Mem0[sp:word64]
	sp = sp + 8
	x30 = Mem0[sp:word64]
	sp = sp + 48
	// succ:  l000000000042E150_thunk_internal_error
l000000000042E150_thunk_internal_error:
	call internal_error (retsize: 0;)
	return
	// succ:  xtrace_set_exit
xtrace_set_exit:


// xtrace_init
// Return size: 0
void xtrace_init()
xtrace_init_entry:
	// succ:  l000000000042E154
l000000000042E154:
	sp = fp
	x0 = 0x00000000004DE000
	x1 = Mem0[x0 + 1640:word64]
	w0 = 0xFFFFFFFF
	// succ:  l000000000042E160_thunk_xtrace_set
l000000000042E160_thunk_xtrace_set:
	call xtrace_set (retsize: 0;)
	return
	// succ:  xtrace_init_exit
xtrace_init_exit:


// xtrace_reset
// Return size: 0
void xtrace_reset()
xtrace_reset_entry:
	// succ:  l000000000042E164
l000000000042E164:
	sp = fp
	sp = sp + -48
	Mem0[sp:word64] = x29
	sp = sp + 8
	Mem0[sp:word64] = x30
	x29 = x31 + 0x0000000000000000
	v8 = sp + 16
	Mem0[v8:word64] = x19
	v8 = v8 + 8
	Mem0[v8:word64] = x20
	x19 = 0x00000000004D6000
	x0 = x19 + 0xFFFFFFFFFFFFFA20
	w1 = Mem0[x0:word32]
	Mem0[sp + 32:word64] = x21
	x20 = 0x00000000004DF000
	branch (w1 & 0x00000000) == 0x00000000 l000000000042E1A0
	// succ:  l000000000042E188 l000000000042E1A0
l000000000042E188:
	x21 = x20 + 0xFFFFFFFFFFFFFB30
	x0 = Mem0[x21 + 64:word64]
	branch x0 == 0x0000000000000000 l000000000042E1CC
	// succ:  l000000000042E194 l000000000042E1CC
l000000000042E194:
	fflush(x0)
	sp = sp + 0xFFFFFFFFFFFFFFF8
	x0 = Mem0[x21 + 64:word64]
	fclose(x0)
	sp = sp + 0xFFFFFFFFFFFFFFF8
	// succ:  l000000000042E1A0
l000000000042E1A0:
	x0 = 0x00000000004DE000
	x0 = Mem0[x0 + 1640:word64]
	x19 = x19 + 0xFFFFFFFFFFFFFA20
	x20 = x20 + 0xFFFFFFFFFFFFFB30
	w1 = 0xFFFFFFFF
	Mem0[x19:word32] = w1
	Mem0[x20 + 64:word64] = x0
	x21 = Mem0[sp + 32:word64]
	v12 = sp + 16
	x19 = Mem0[v12:word64]
	v12 = v12 + 8
	x20 = Mem0[v12:word64]
	x29 = Mem0[sp:word64]
	sp = sp + 8
	x30 = Mem0[sp:word64]
	sp = sp + 48
	return
	// succ:  xtrace_reset_exit
l000000000042E1CC:
	w0 = w1
	close(x0)
	sp = sp + 0xFFFFFFFFFFFFFFF8
	goto l000000000042E1A0
	// succ:  l000000000042E1A0
xtrace_reset_exit:


// xtrace_fdchk
// Return size: 0
void xtrace_fdchk()
xtrace_fdchk_entry:
	// succ:  l000000000042E1D8
l000000000042E1D8:
	sp = fp
	x1 = 0x00000000004D6000
	x1 = x1 + 0xFFFFFFFFFFFFFA20
	w1 = Mem0[x1:word32]
	NZCV = cond(w0 - w1)
	branch Test(EQ,Z) l000000000042E1F0
	// succ:  l000000000042E1EC l000000000042E1F0
l000000000042E1EC:
	return
	// succ:  xtrace_fdchk_exit
l000000000042E1F0:
	// succ:  l000000000042E1F0_thunk_xtrace_reset
l000000000042E1F0_thunk_xtrace_reset:
	call xtrace_reset (retsize: 0;)
	return
	// succ:  xtrace_fdchk_exit
xtrace_fdchk_exit:


// indirection_level_string
// Return size: 0
void indirection_level_string()
indirection_level_string_entry:
	// succ:  l000000000042E1F4
l000000000042E1F4:
	sp = fp
	sp = sp + -128
	Mem0[sp:word64] = x29
	sp = sp + 8
	Mem0[sp:word64] = x30
	x29 = x31 + 0x0000000000000000
	v8 = sp + 32
	Mem0[v8:word64] = x21
	v8 = v8 + 8
	Mem0[v8:word64] = x22
	x0 = 0x00000000004AC000
	x22 = 0x00000000004DF000
	v12 = sp + 16
	Mem0[v12:word64] = x19
	v12 = v12 + 8
	Mem0[v12:word64] = x20
	v15 = sp + 48
	Mem0[v15:word64] = x23
	v15 = v15 + 8
	Mem0[v15:word64] = x24
	v18 = sp + 64
	Mem0[v18:word64] = x25
	v18 = v18 + 8
	Mem0[v18:word64] = x26
	v21 = sp + 80
	Mem0[v21:word64] = x27
	v21 = v21 + 8
	Mem0[v21:word64] = x28
	x1 = x22 + 0xFFFFFFFFFFFFFB30
	x0 = x0 + 0x0000000000000330
	Mem0[x1 + 72:byte] = 0x00
	call get_string_value (retsize: 0;)
	x19 = x0
	branch x0 == 0x0000000000000000 l000000000042E238
	// succ:  l000000000042E230 l000000000042E238
l000000000042E230:
	v24 = Mem0[x0:byte]
	w0 = (word32) v24
	branch w0 != 0x00000000 l000000000042E25C
	// succ:  l000000000042E238 l000000000042E25C
l000000000042E238:
	x0 = x22 + 0xFFFFFFFFFFFFFB30
	x0 = x0 + 0x0000000000000048
	v25 = sp + 16
	x19 = Mem0[v25:word64]
	v25 = v25 + 8
	x20 = Mem0[v25:word64]
	v26 = sp + 32
	x21 = Mem0[v26:word64]
	v26 = v26 + 8
	x22 = Mem0[v26:word64]
	v27 = sp + 48
	x23 = Mem0[v27:word64]
	v27 = v27 + 8
	x24 = Mem0[v27:word64]
	v28 = sp + 64
	x25 = Mem0[v28:word64]
	v28 = v28 + 8
	x26 = Mem0[v28:word64]
	v29 = sp + 80
	x27 = Mem0[v29:word64]
	v29 = v29 + 8
	x28 = Mem0[v29:word64]
	x29 = Mem0[sp:word64]
	sp = sp + 8
	x30 = Mem0[sp:word64]
	sp = sp + 128
	return
	// succ:  indirection_level_string_exit
l000000000042E25C:
	w1 = 0x0000002B
	w0 = 0x00000078
	call change_flag (retsize: 0;)
	x0 = x19
	call decode_prompt_string (retsize: 0;)
	x24 = x0
	w1 = 0x0000002D
	w0 = 0x00000078
	call change_flag (retsize: 0;)
	branch x24 == 0x0000000000000000 l000000000042E238
	// succ:  l000000000042E284 l000000000042E238
l000000000042E284:
	v31 = Mem0[x24:byte]
	w0 = (word32) v31
	branch w0 == 0x00000000 l000000000042E238
	// succ:  l000000000042E28C l000000000042E238
l000000000042E28C:
	__ctype_get_mb_cur_max()
	sp = sp + 0xFFFFFFFFFFFFFFF8
	x1 = x0
	x0 = x24
	call strnlen (retsize: 0;)
	x19 = x0
	__ctype_get_mb_cur_max()
	sp = sp + 0xFFFFFFFFFFFFFFF8
	x31 = x0 - 0x0000000000000001
	NZCV = cond(x31)
	branch Test(ULE,ZC) l000000000042E354
	// succ:  l000000000042E2AC l000000000042E354
l000000000042E2AC:
	x0 = x24
l000000000042E2E8:
	branch w27 == 0x00000000 l000000000042E3E0
	// succ:  l000000000042E2EC l000000000042E3E0
l000000000042E2EC:
	x0 = 0x00000000004DE000
	w26 = Mem0[x0 + 1856:word32]
	NZCV = cond(w26 - w31)
	branch Test(LE,ZCV) l000000000042E368
	// succ:  l000000000042E2FC l000000000042E368
l000000000042E2FC:
	x28 = x22 + 0xFFFFFFFFFFFFFB30
	w20 = 0x00000000
l000000000042E354:
	v35 = Mem0[x24:byte]
	w27 = (word32) v35
	Mem0[x29 + 97:byte] = 0x00
	Mem0[x29 + 96:byte] = (byte) w27
	x23 = 0x0000000000000001
	goto l000000000042E2E8
	// succ:  l000000000042E2E8
l000000000042E368:
	w19 = 0x00000000
	// succ:  l000000000042E36C
l000000000042E36C:
	v41 = Mem0[x24:byte]
	w0 = (word32) v41
	branch w0 == 0x00000000 l000000000042E3BC
	// succ:  l000000000042E374 l000000000042E3BC
l000000000042E374:
	v43 = Mem0[x24 + x23:byte]
	w2 = (word32) v43
	branch w2 == 0x00000000 l000000000042E3BC
	// succ:  l000000000042E37C l000000000042E3BC
l000000000042E37C:
	w31 = w19 - 0x00000062
	NZCV = cond(w31)
	branch Test(GT,NZV) l000000000042E3BC
	// succ:  l000000000042E384 l000000000042E3BC
l000000000042E384:
	x23 = x23 + 0x0000000000000001
	x3 = x24 + x23
	x1 = x22 + 0xFFFFFFFFFFFFFB30
	goto l000000000042E3A4
	// succ:  l000000000042E3A4
l000000000042E394:
	v47 = Mem0[x3:byte]
	w2 = (word32) v47
	x3 = x3 + 0x0000000000000001
	branch w2 == 0x00000000 l000000000042E3BC
	// succ:  l000000000042E3A0 l000000000042E3BC
l000000000042E3A0:
	branch Test(EQ,Z) l000000000042E3BC
	// succ:  l000000000042E3A4 l000000000042E3BC
l000000000042E3A4:
	x0 = x1 + 0x0000000000000048
	Mem0[x0 + (int64) ((int32) w19):byte] = (byte) w2
	v46 = Mem0[x24:byte]
	w0 = (word32) v46
	w19 = w19 + 0x00000001
	w31 = w19 - 0x00000063
	NZCV = cond(w31)
	branch w0 != 0x00000000 l000000000042E394
	// succ:  l000000000042E3BC l000000000042E394
l000000000042E3BC:
	x3 = x22 + 0xFFFFFFFFFFFFFB30
	x1 = 0x00000000004AC000
	x3 = x3 + 0x0000000000000048
	x0 = x24
	x1 = x1 + 0x0000000000000130
	w2 = 0x000001CF
	Mem0[x3 + (int64) ((int32) w19):byte] = 0x00
	call sh_xfree (retsize: 0;)
	goto l000000000042E238
	// succ:  l000000000042E238
l000000000042E3E0:
	w19 = w27
	goto l000000000042E36C
	// succ:  l000000000042E36C
indirection_level_string_exit:


// xtrace_print_assignment
// Return size: 0
void xtrace_print_assignment()
xtrace_print_assignment_entry:
	// succ:  l000000000042E3E8
l000000000042E3E8:
	sp = fp
	sp = sp + -64
	Mem0[sp:word64] = x29
	sp = sp + 8
	Mem0[sp:word64] = x30
	x29 = x31 + 0x0000000000000000
	v8 = sp + 16
	Mem0[v8:word64] = x19
	v8 = v8 + 8
	Mem0[v8:word64] = x20
	x19 = 0x00000000004DF000
	x4 = x19 + 0xFFFFFFFFFFFFFB30
	x20 = Mem0[x4 + 64:word64]
	v12 = sp + 32
	Mem0[v12:word64] = x21
	v12 = v12 + 8
	Mem0[v12:word64] = x22
	x22 = x0
	x21 = x1
	branch x20 == 0x0000000000000000 l000000000042E52C
	// succ:  l000000000042E410 l000000000042E52C
l000000000042E410:
	x0 = x19 + 0xFFFFFFFFFFFFFB30
	Mem0[x0 + 64:word64] = x20
	branch w3 != 0x00000000 l000000000042E49C
	// succ:  l000000000042E41C l000000000042E49C
l000000000042E41C:
	v17 = Mem0[x21:byte]
	w0 = (word32) v17
	branch w0 == 0x00000000 l000000000042E460
	// succ:  l000000000042E424 l000000000042E460
l000000000042E424:
	branch w2 == 0x00000000 l000000000042E4B4
	// succ:  l000000000042E428 l000000000042E4B4
l000000000042E428:
	x0 = x19 + 0xFFFFFFFFFFFFFB30
	x2 = 0x00000000004AC000
	x0 = Mem0[x0 + 64:word64]
	w1 = 0x00000001
	x2 = x2 + 0x0000000000000338
	x3 = x22
	x4 = x21
	__fprintf_chk(x0, x1, x2, Mem0[sp:<unknown>])
	sp = sp + 0xFFFFFFFFFFFFFFF8
	// succ:  l000000000042E448
l000000000042E448:
	x19 = x19 + 0xFFFFFFFFFFFFFB30
	x0 = Mem0[x19 + 64:word64]
	v22 = sp + 32
	x21 = Mem0[v22:word64]
	v22 = v22 + 8
	x22 = Mem0[v22:word64]
	v23 = sp + 16
	x19 = Mem0[v23:word64]
	v23 = v23 + 8
	x20 = Mem0[v23:word64]
	x29 = Mem0[sp:word64]
	sp = sp + 8
	x30 = Mem0[sp:word64]
	sp = sp + 64
	fflush(x0)
	return
	// succ:  xtrace_print_assignment_exit
l000000000042E460:
	branch w2 != 0x00000000 l000000000042E428
	// succ:  l000000000042E464 l000000000042E428
l000000000042E464:
	x0 = x19 + 0xFFFFFFFFFFFFFB30
	x0 = Mem0[x0 + 64:word64]
	x2 = 0x00000000004AC000
	x3 = x22
	x4 = x21
	w1 = 0x00000001
	x2 = x2 + 0x0000000000000348
	__fprintf_chk(x0, x1, x2, Mem0[sp:<unknown>])
	sp = sp + 0xFFFFFFFFFFFFFFF8
	x19 = x19 + 0xFFFFFFFFFFFFFB30
	x0 = Mem0[x19 + 64:word64]
	v28 = sp + 32
	x21 = Mem0[v28:word64]
	v28 = v28 + 8
	x22 = Mem0[v28:word64]
	v29 = sp + 16
	x19 = Mem0[v29:word64]
	v29 = v29 + 8
	x20 = Mem0[v29:word64]
	x29 = Mem0[sp:word64]
	sp = sp + 8
	x30 = Mem0[sp:word64]
	sp = sp + 64
	fflush(x0)
	return
	// succ:  xtrace_print_assignment_exit
l000000000042E49C:
	Mem0[x29 + 48:word64] = x2
	call indirection_level_string (retsize: 0;)
	x1 = x20
	fputs(x0, x1)
	sp = sp + 0xFFFFFFFFFFFFFFF8
	x2 = Mem0[x29 + 48:word64]
	goto l000000000042E41C
	// succ:  l000000000042E41C
l000000000042E4B4:
	x0 = x21
	Mem0[x29 + 48:word64] = x2
	call sh_contains_shell_metas (retsize: 0;)
	x2 = Mem0[x29 + 48:word64]
	branch w0 == 0x00000000 l000000000042E538
	// succ:  l000000000042E4C8 l000000000042E538
l000000000042E4C8:
	x0 = x21
	call sh_single_quote (retsize: 0;)
	x20 = x0
	// succ:  l000000000042E4D4
l000000000042E4D4:
	x0 = x19 + 0xFFFFFFFFFFFFFB30
	x0 = Mem0[x0 + 64:word64]
	x2 = 0x00000000004AC000
	w1 = 0x00000001
	x2 = x2 + 0x0000000000000348
	x3 = x22
	x4 = x20
	__fprintf_chk(x0, x1, x2, Mem0[sp:<unknown>])
	sp = sp + 0xFFFFFFFFFFFFFFF8
	x31 = x21 - x20
	NZCV = cond(x31)
	branch Test(EQ,Z) l000000000042E448
	// succ:  l000000000042E4FC l000000000042E448
l000000000042E4FC:
	branch x20 == 0x0000000000000000 l000000000042E448
	// succ:  l000000000042E500 l000000000042E448
l000000000042E500:
	x1 = 0x00000000004AC000
	x0 = x20
	x1 = x1 + 0x0000000000000130
	w2 = 0x000001EF
	call sh_xfree (retsize: 0;)
	x19 = x19 + 0xFFFFFFFFFFFFFB30
	x0 = Mem0[x19 + 64:word64]
	v26 = sp + 32
	x21 = Mem0[v26:word64]
	v26 = v26 + 8
	x22 = Mem0[v26:word64]
	v27 = sp + 16
	x19 = Mem0[v27:word64]
	v27 = v27 + 8
	x20 = Mem0[v27:word64]
	x29 = Mem0[sp:word64]
	sp = sp + 8
	x30 = Mem0[sp:word64]
	sp = sp + 64
	fflush(x0)
	return
	// succ:  xtrace_print_assignment_exit
l000000000042E52C:
	x0 = 0x00000000004DE000
	x20 = Mem0[x0 + 1640:word64]
	goto l000000000042E410
	// succ:  l000000000042E410
l000000000042E538:
	x0 = x21
	Mem0[x29 + 48:word64] = x2
	call ansic_shouldquote (retsize: 0;)
	x20 = x21
	x2 = Mem0[x29 + 48:word64]
	branch w0 == 0x00000000 l000000000042E4D4
	// succ:  l000000000042E550 l000000000042E4D4
l000000000042E550:
	w1 = w2
	x0 = x21
	x2 = 0x0000000000000000
	call ansic_quote (retsize: 0;)
	x20 = x0
	goto l000000000042E4D4
	// succ:  l000000000042E4D4
xtrace_print_assignment_exit:


// xtrace_print_word_list
// Return size: 0
void xtrace_print_word_list()
xtrace_print_word_list_entry:
	// succ:  l000000000042E568
l000000000042E568:
	sp = fp
	sp = sp + -80
	Mem0[sp:word64] = x29
	sp = sp + 8
	Mem0[sp:word64] = x30
	x29 = x31 + 0x0000000000000000
	v6 = sp + 32
	Mem0[v6:word64] = x21
	v6 = v6 + 8
	Mem0[v6:word64] = x22
	x21 = 0x00000000004DF000
	x2 = x21 + 0xFFFFFFFFFFFFFB30
	v10 = sp + 16
	Mem0[v10:word64] = x19
	v10 = v10 + 8
	Mem0[v10:word64] = x20
	x20 = Mem0[x2 + 64:word64]
	v13 = sp + 48
	Mem0[v13:word64] = x23
	v13 = v13 + 8
	Mem0[v13:word64] = x24
	Mem0[sp + 64:word64] = x25
	x19 = x0
	branch x20 == 0x0000000000000000 l000000000042E71C
	// succ:  l000000000042E594 l000000000042E71C
l000000000042E594:
	x0 = x21 + 0xFFFFFFFFFFFFFB30
	Mem0[x0 + 64:word64] = x20
	branch w1 != 0x00000000 l000000000042E6BC
	// succ:  l000000000042E5A0 l000000000042E6BC
l000000000042E5A0:
	branch x19 == 0x0000000000000000 l000000000042E65C
	// succ:  l000000000042E5A4 l000000000042E65C
l000000000042E5A4:
	x25 = 0x00000000004AB000
	x23 = 0x00000000004AC000
	x22 = 0x00000000004BE000
	x25 = x25 + 0xFFFFFFFFFFFFFF00
	x23 = x23 + 0x0000000000000460
	x22 = x22 + 0x0000000000000330
	goto l000000000042E5DC
	// succ:  l000000000042E5DC
l000000000042E5C0:
	x4 = Mem0[x19:word64]
	x0 = Mem0[x3 + 64:word64]
	x31 = x4 - x31
	NZCV = cond(x31)
l000000000042E5DC:
	x0 = Mem0[x19 + 8:word64]
	x2 = 0x00000000004AC000
	x20 = Mem0[x0:word64]
	x3 = x21 + 0xFFFFFFFFFFFFFB30
	w1 = 0x00000001
	x2 = x2 + 0x0000000000000350
	branch x20 == 0x0000000000000000 l000000000042E5C0
	// succ:  l000000000042E5F8 l000000000042E5C0
l000000000042E5F8:
	v20 = Mem0[x20:byte]
	w0 = (word32) v20
	branch w0 == 0x00000000 l000000000042E5C0
	// succ:  l000000000042E600 l000000000042E5C0
l000000000042E600:
	x0 = x20
	call sh_contains_shell_metas (retsize: 0;)
	w24 = w0
	x0 = x20
	branch w24 == 0x00000000 l000000000042E688
	// succ:  l000000000042E614 l000000000042E688
l000000000042E614:
	call sh_single_quote (retsize: 0;)
	x1 = Mem0[x19:word64]
	x20 = x0
	x0 = x21 + 0xFFFFFFFFFFFFFB30
	x31 = x1 - x31
	NZCV = cond(x31)
	x0 = Mem0[x0 + 64:word64]
l000000000042E65C:
	x21 = x21 + 0xFFFFFFFFFFFFFB30
	x1 = Mem0[x21 + 64:word64]
	w0 = 0x0000000A
	fputc(x0, x1)
	sp = sp + 0xFFFFFFFFFFFFFFF8
	x0 = Mem0[x21 + 64:word64]
	v27 = sp + 16
	x19 = Mem0[v27:word64]
	v27 = v27 + 8
	x20 = Mem0[v27:word64]
	v28 = sp + 32
	x21 = Mem0[v28:word64]
	v28 = v28 + 8
	x22 = Mem0[v28:word64]
	v29 = sp + 48
	x23 = Mem0[v29:word64]
	v29 = v29 + 8
	x24 = Mem0[v29:word64]
	x25 = Mem0[sp + 64:word64]
	x29 = Mem0[sp:word64]
	sp = sp + 8
	x30 = Mem0[sp:word64]
	sp = sp + 80
	fflush(x0)
	return
	// succ:  xtrace_print_word_list_exit
l000000000042E688:
	x0 = x20
	call ansic_shouldquote (retsize: 0;)
	x4 = x21 + 0xFFFFFFFFFFFFFB30
	w1 = 0x00000001
	x2 = x25
	x3 = x20
	branch w0 != 0x00000000 l000000000042E6CC
	// succ:  l000000000042E6A4 l000000000042E6CC
l000000000042E6A4:
	x5 = Mem0[x19:word64]
	x0 = Mem0[x4 + 64:word64]
	x31 = x5 - x31
	NZCV = cond(x31)
l000000000042E6BC:
	call indirection_level_string (retsize: 0;)
	x1 = x20
	fputs(x0, x1)
	sp = sp + 0xFFFFFFFFFFFFFFF8
	goto l000000000042E5A0
	// succ:  l000000000042E5A0
l000000000042E6CC:
	w1 = w24
	x0 = x20
	x2 = 0x0000000000000000
	call ansic_quote (retsize: 0;)
	x1 = Mem0[x19:word64]
	x20 = x0
	x0 = x21 + 0xFFFFFFFFFFFFFB30
	x31 = x1 - x31
	NZCV = cond(x31)
	x0 = Mem0[x0 + 64:word64]
	x2 = x25
l000000000042E71C:
	x0 = 0x00000000004DE000
	x20 = Mem0[x0 + 1640:word64]
	goto l000000000042E594
	// succ:  l000000000042E594
xtrace_print_word_list_exit:


// print_for_command_head
// Return size: 0
void print_for_command_head()
print_for_command_head_entry:
	// succ:  l000000000042E728
l000000000042E728:
	sp = fp
	sp = sp + -32
	Mem0[sp:word64] = x29
	sp = sp + 8
	Mem0[sp:word64] = x30
	x29 = x31 + 0x0000000000000000
	Mem0[sp + 16:word64] = x19
	x19 = x0
	x0 = Mem0[x0 + 8:word64]
	x1 = Mem0[x0:word64]
	x0 = 0x00000000004AC000
	x0 = x0 + 0x0000000000000358
	call fn000000000042D1A4 (retsize: 0;)
	x0 = Mem0[x19 + 16:word64]
	x1 = 0x00000000004BE000
	x19 = Mem0[sp + 16:word64]
	x29 = Mem0[sp:word64]
	sp = sp + 8
	x30 = Mem0[sp:word64]
	sp = sp + 32
	x1 = x1 + 0x0000000000000330
	// succ:  l000000000042E760_thunk_fn000000000042D478
l000000000042E760_thunk_fn000000000042D478:
	call fn000000000042D478 (retsize: 0;)
	return
	// succ:  print_for_command_head_exit
print_for_command_head_exit:


// xtrace_print_for_command_head
// Return size: 0
void xtrace_print_for_command_head()
xtrace_print_for_command_head_entry:
	// succ:  l000000000042E764
l000000000042E764:
	sp = fp
	sp = sp + -48
	Mem0[sp:word64] = x29
	sp = sp + 8
	Mem0[sp:word64] = x30
	x29 = x31 + 0x0000000000000000
	v8 = sp + 16
	Mem0[v8:word64] = x19
	v8 = v8 + 8
	Mem0[v8:word64] = x20
	x20 = 0x00000000004DF000
	x1 = x20 + 0xFFFFFFFFFFFFFB30
	x1 = Mem0[x1 + 64:word64]
	x19 = x0
	branch x1 == 0x0000000000000000 l000000000042E7CC
	// succ:  l000000000042E784 l000000000042E7CC
l000000000042E784:
	x20 = x20 + 0xFFFFFFFFFFFFFB30
	Mem0[x20 + 64:word64] = x1
	Mem0[x29 + 32:word64] = x1
	call indirection_level_string (retsize: 0;)
	x1 = Mem0[x29 + 32:word64]
	fputs(x0, x1)
	sp = sp + 0xFFFFFFFFFFFFFFF8
	x1 = Mem0[x19 + 8:word64]
	x0 = Mem0[x20 + 64:word64]
	x3 = Mem0[x1:word64]
	x2 = 0x00000000004AC000
	w1 = 0x00000001
	x2 = x2 + 0x0000000000000358
	__fprintf_chk(x0, x1, x2, Mem0[sp:<unknown>])
	sp = sp + 0xFFFFFFFFFFFFFFF8
	x0 = Mem0[x19 + 16:word64]
	v14 = sp + 16
	x19 = Mem0[v14:word64]
	v14 = v14 + 8
	x20 = Mem0[v14:word64]
	x29 = Mem0[sp:word64]
	sp = sp + 8
	x30 = Mem0[sp:word64]
	sp = sp + 48
	w1 = 0x00000000
	// succ:  l000000000042E7C8_thunk_xtrace_print_word_list
l000000000042E7C8_thunk_xtrace_print_word_list:
	call xtrace_print_word_list (retsize: 0;)
	return
	// succ:  xtrace_print_for_command_head_exit
l000000000042E7CC:
	x0 = 0x00000000004DE000
	x1 = Mem0[x0 + 1640:word64]
	goto l000000000042E784
	// succ:  l000000000042E784
xtrace_print_for_command_head_exit:


// print_select_command_head
// Return size: 0
void print_select_command_head()
print_select_command_head_entry:
	// succ:  l000000000042E7D8
l000000000042E7D8:
	sp = fp
	sp = sp + -32
	Mem0[sp:word64] = x29
	sp = sp + 8
	Mem0[sp:word64] = x30
	x29 = x31 + 0x0000000000000000
	Mem0[sp + 16:word64] = x19
	x19 = x0
	x0 = Mem0[x0 + 8:word64]
	x1 = Mem0[x0:word64]
	x0 = 0x00000000004AC000
	x0 = x0 + 0x0000000000000368
	call fn000000000042D1A4 (retsize: 0;)
	x0 = Mem0[x19 + 16:word64]
	x1 = 0x00000000004BE000
	x19 = Mem0[sp + 16:word64]
	x29 = Mem0[sp:word64]
	sp = sp + 8
	x30 = Mem0[sp:word64]
	sp = sp + 32
	x1 = x1 + 0x0000000000000330
	// succ:  l000000000042E810_thunk_fn000000000042D478
l000000000042E810_thunk_fn000000000042D478:
	call fn000000000042D478 (retsize: 0;)
	return
	// succ:  print_select_command_head_exit
print_select_command_head_exit:


// xtrace_print_select_command_head
// Return size: 0
void xtrace_print_select_command_head()
xtrace_print_select_command_head_entry:
	// succ:  l000000000042E814
l000000000042E814:
	sp = fp
	sp = sp + -48
	Mem0[sp:word64] = x29
	sp = sp + 8
	Mem0[sp:word64] = x30
	x29 = x31 + 0x0000000000000000
	v8 = sp + 16
	Mem0[v8:word64] = x19
	v8 = v8 + 8
	Mem0[v8:word64] = x20
	x20 = 0x00000000004DF000
	x1 = x20 + 0xFFFFFFFFFFFFFB30
	x1 = Mem0[x1 + 64:word64]
	x19 = x0
	branch x1 == 0x0000000000000000 l000000000042E87C
	// succ:  l000000000042E834 l000000000042E87C
l000000000042E834:
	x20 = x20 + 0xFFFFFFFFFFFFFB30
	Mem0[x20 + 64:word64] = x1
	Mem0[x29 + 32:word64] = x1
	call indirection_level_string (retsize: 0;)
	x1 = Mem0[x29 + 32:word64]
	fputs(x0, x1)
	sp = sp + 0xFFFFFFFFFFFFFFF8
	x1 = Mem0[x19 + 8:word64]
	x0 = Mem0[x20 + 64:word64]
	x3 = Mem0[x1:word64]
	x2 = 0x00000000004AC000
	w1 = 0x00000001
	x2 = x2 + 0x0000000000000368
	__fprintf_chk(x0, x1, x2, Mem0[sp:<unknown>])
	sp = sp + 0xFFFFFFFFFFFFFFF8
	x0 = Mem0[x19 + 16:word64]
	v14 = sp + 16
	x19 = Mem0[v14:word64]
	v14 = v14 + 8
	x20 = Mem0[v14:word64]
	x29 = Mem0[sp:word64]
	sp = sp + 8
	x30 = Mem0[sp:word64]
	sp = sp + 48
	w1 = 0x00000000
	// succ:  l000000000042E878_thunk_xtrace_print_word_list
l000000000042E878_thunk_xtrace_print_word_list:
	call xtrace_print_word_list (retsize: 0;)
	return
	// succ:  xtrace_print_select_command_head_exit
l000000000042E87C:
	x0 = 0x00000000004DE000
	x1 = Mem0[x0 + 1640:word64]
	goto l000000000042E834
	// succ:  l000000000042E834
xtrace_print_select_command_head_exit:


// print_case_command_head
// Return size: 0
void print_case_command_head()
print_case_command_head_entry:
	// succ:  l000000000042E888
l000000000042E888:
	sp = fp
	x0 = Mem0[x0 + 8:word64]
	x1 = Mem0[x0:word64]
	x0 = 0x00000000004AC000
	x0 = x0 + 0x0000000000000378
	// succ:  l000000000042E898_thunk_fn000000000042D1A4
l000000000042E898_thunk_fn000000000042D1A4:
	call fn000000000042D1A4 (retsize: 0;)
	return
	// succ:  print_case_command_head_exit
print_case_command_head_exit:


// xtrace_print_case_command_head
// Return size: 0
void xtrace_print_case_command_head()
xtrace_print_case_command_head_entry:
	// succ:  l000000000042E89C
l000000000042E89C:
	sp = fp
	sp = sp + -48
	Mem0[sp:word64] = x29
	sp = sp + 8
	Mem0[sp:word64] = x30
	x29 = x31 + 0x0000000000000000
	v8 = sp + 16
	Mem0[v8:word64] = x19
	v8 = v8 + 8
	Mem0[v8:word64] = x20
	x19 = 0x00000000004DF000
	x1 = x19 + 0xFFFFFFFFFFFFFB30
	x1 = Mem0[x1 + 64:word64]
	x20 = x0
	branch x1 == 0x0000000000000000 l000000000042E8F8
	// succ:  l000000000042E8BC l000000000042E8F8
l000000000042E8BC:
	x19 = x19 + 0xFFFFFFFFFFFFFB30
	Mem0[x19 + 64:word64] = x1
	Mem0[x29 + 32:word64] = x1
	call indirection_level_string (retsize: 0;)
	x1 = Mem0[x29 + 32:word64]
	fputs(x0, x1)
	sp = sp + 0xFFFFFFFFFFFFFFF8
	x1 = Mem0[x20 + 8:word64]
	x0 = Mem0[x19 + 64:word64]
	x3 = Mem0[x1:word64]
	v12 = sp + 16
	x19 = Mem0[v12:word64]
	v12 = v12 + 8
	x20 = Mem0[v12:word64]
	x2 = 0x00000000004AC000
	x29 = Mem0[sp:word64]
	sp = sp + 8
	x30 = Mem0[sp:word64]
	sp = sp + 48
	w1 = 0x00000001
	x2 = x2 + 0x0000000000000388
	__fprintf_chk(x0, x1, x2, Mem0[sp:<unknown>])
	return
	// succ:  xtrace_print_case_command_head_exit
l000000000042E8F8:
	x0 = 0x00000000004DE000
	x1 = Mem0[x0 + 1640:word64]
	goto l000000000042E8BC
	// succ:  l000000000042E8BC
xtrace_print_case_command_head_exit:


// print_arith_command
// Return size: 0
void print_arith_command()
print_arith_command_entry:
	// succ:  l000000000042E904
l000000000042E904:
	sp = fp
	sp = sp + -32
	Mem0[sp:word64] = x29
	sp = sp + 8
	Mem0[sp:word64] = x30
	x29 = x31 + 0x0000000000000000
	Mem0[sp + 16:word64] = x19
	x19 = x0
	x0 = 0x00000000004AC000
	x0 = x0 + 0x0000000000000398
	call fn000000000042D1A4 (retsize: 0;)
	x1 = 0x00000000004BE000
	x0 = x19
	x1 = x1 + 0x0000000000000330
	call fn000000000042D478 (retsize: 0;)
	x0 = 0x00000000004AC000
	x19 = Mem0[sp + 16:word64]
	x29 = Mem0[sp:word64]
	sp = sp + 8
	x30 = Mem0[sp:word64]
	sp = sp + 32
	x0 = x0 + 0x00000000000003A0
	// succ:  l000000000042E940_thunk_fn000000000042D1A4
l000000000042E940_thunk_fn000000000042D1A4:
	call fn000000000042D1A4 (retsize: 0;)
	return
	// succ:  print_arith_command_exit
print_arith_command_exit:


// print_cond_command
// Return size: 0
void print_cond_command()
print_cond_command_entry:
	// succ:  l000000000042E944
l000000000042E944:
	sp = fp
	sp = sp + -32
	Mem0[sp:word64] = x29
	sp = sp + 8
	Mem0[sp:word64] = x30
	x29 = x31 + 0x0000000000000000
	Mem0[sp + 16:word64] = x19
	x19 = x0
	x0 = 0x00000000004AC000
	x0 = x0 + 0x00000000000003A8
	call fn000000000042D1A4 (retsize: 0;)
	x0 = x19
	call fn000000000042DCBC (retsize: 0;)
	x0 = 0x00000000004AC000
	x19 = Mem0[sp + 16:word64]
	x29 = Mem0[sp:word64]
	sp = sp + 8
	x30 = Mem0[sp:word64]
	sp = sp + 32
	x0 = x0 + 0x00000000000003B0
	// succ:  l000000000042E978_thunk_fn000000000042D1A4
l000000000042E978_thunk_fn000000000042D1A4:
	call fn000000000042D1A4 (retsize: 0;)
	return
	// succ:  print_cond_command_exit
print_cond_command_exit:


// xtrace_print_cond_term
// Return size: 0
void xtrace_print_cond_term()
xtrace_print_cond_term_entry:
	// succ:  l000000000042E97C
l000000000042E97C:
	sp = fp
	sp = sp + -80
	Mem0[sp:word64] = x29
	sp = sp + 8
	Mem0[sp:word64] = x30
	x29 = x31 + 0x0000000000000000
	v8 = sp + 16
	Mem0[v8:word64] = x19
	v8 = v8 + 8
	Mem0[v8:word64] = x20
	x19 = 0x00000000004DF000
	x5 = x19 + 0xFFFFFFFFFFFFFB30
	v12 = sp + 32
	Mem0[v12:word64] = x21
	v12 = v12 + 8
	Mem0[v12:word64] = x22
	x21 = Mem0[x5 + 64:word64]
	v15 = sp + 48
	Mem0[v15:word64] = x23
	v15 = v15 + 8
	Mem0[v15:word64] = x24
	v18 = sp + 64
	Mem0[v18:word64] = x25
	v18 = v18 + 8
	Mem0[v18:word64] = x26
	w22 = w0
	w24 = w1
	x26 = x2
	x23 = x3
	x25 = x4
	branch x21 == 0x0000000000000000 l000000000042EAFC
	// succ:  l000000000042E9B8 l000000000042EAFC
l000000000042E9B8:
	x20 = x19 + 0xFFFFFFFFFFFFFB30
	Mem0[x20 + 64:word64] = x21
	Mem0[x20 + 36:word32] = 0x00000000
	call indirection_level_string (retsize: 0;)
	x1 = x21
	fputs(x0, x1)
	sp = sp + 0xFFFFFFFFFFFFFFF8
	x0 = 0x00000000004AC000
	x3 = Mem0[x20 + 64:word64]
	x0 = x0 + 0x00000000000003A8
	x1 = 0x0000000000000001
	x2 = 0x0000000000000003
	fwrite(x0, x1, x2, x3)
	sp = sp + 0xFFFFFFFFFFFFFFF8
	branch w24 != 0x00000000 l000000000042EA8C
	// succ:  l000000000042E9EC l000000000042EA8C
l000000000042E9EC:
	w31 = w22 - 0x00000003
	NZCV = cond(w31)
	branch Test(EQ,Z) l000000000042EAAC
	// succ:  l000000000042E9F4 l000000000042EAAC
l000000000042E9F4:
	w31 = w22 - 0x00000004
	NZCV = cond(w31)
	branch Test(EQ,Z) l000000000042EA34
	// succ:  l000000000042E9FC l000000000042EA34
l000000000042E9FC:
	x19 = x19 + 0xFFFFFFFFFFFFFB30
	x3 = Mem0[x19 + 64:word64]
	x0 = 0x00000000004AC000
	x1 = 0x0000000000000001
	x2 = 0x0000000000000004
	x0 = x0 + 0x00000000000003D0
	fwrite(x0, x1, x2, x3)
	sp = sp + 0xFFFFFFFFFFFFFFF8
	x0 = Mem0[x19 + 64:word64]
	v31 = sp + 32
	x21 = Mem0[v31:word64]
	v31 = v31 + 8
	x22 = Mem0[v31:word64]
	v32 = sp + 16
	x19 = Mem0[v32:word64]
	v32 = v32 + 8
	x20 = Mem0[v32:word64]
	v33 = sp + 48
	x23 = Mem0[v33:word64]
	v33 = v33 + 8
	x24 = Mem0[v33:word64]
	v34 = sp + 64
	x25 = Mem0[v34:word64]
	v34 = v34 + 8
	x26 = Mem0[v34:word64]
	x29 = Mem0[sp:word64]
	sp = sp + 8
	x30 = Mem0[sp:word64]
	sp = sp + 80
	fflush(x0)
	return
	// succ:  xtrace_print_cond_term_exit
l000000000042EA34:
	x0 = x19 + 0xFFFFFFFFFFFFFB30
	x1 = Mem0[x0 + 64:word64]
	branch x23 == 0x0000000000000000 l000000000042EA48
	// succ:  l000000000042EA40 l000000000042EA48
l000000000042EA40:
	v35 = Mem0[x23:byte]
	w0 = (word32) v35
	branch w0 != 0x00000000 l000000000042EAE4
	// succ:  l000000000042EA48 l000000000042EAE4
l000000000042EA48:
	x0 = 0x00000000004AC000
	x0 = x0 + 0x00000000000003B8
	// succ:  l000000000042EA50
l000000000042EA50:
	fputs(x0, x1)
	sp = sp + 0xFFFFFFFFFFFFFFF8
	x20 = x19 + 0xFFFFFFFFFFFFFB30
	x0 = Mem0[x20 + 64:word64]
	x3 = Mem0[x26:word64]
	x2 = 0x00000000004AC000
	w1 = 0x00000001
	x2 = x2 + 0x00000000000003C8
	__fprintf_chk(x0, x1, x2, Mem0[sp:<unknown>])
	sp = sp + 0xFFFFFFFFFFFFFFF8
	x1 = Mem0[x20 + 64:word64]
	branch x25 == 0x0000000000000000 l000000000042EAEC
	// succ:  l000000000042EA78 l000000000042EAEC
l000000000042EA78:
	v36 = Mem0[x25:byte]
	w0 = (word32) v36
	branch w0 == 0x00000000 l000000000042EAEC
	// succ:  l000000000042EA80 l000000000042EAEC
l000000000042EA80:
	x0 = x25
	fputs(x0, x1)
	sp = sp + 0xFFFFFFFFFFFFFFF8
	goto l000000000042E9FC
	// succ:  l000000000042E9FC
l000000000042EA8C:
	x3 = Mem0[x20 + 64:word64]
	x0 = 0x00000000004AC000
	x0 = x0 + 0x0000000000000298
	x1 = 0x0000000000000001
	x2 = 0x0000000000000002
	fwrite(x0, x1, x2, x3)
	sp = sp + 0xFFFFFFFFFFFFFFF8
	w31 = w22 - 0x00000003
	NZCV = cond(w31)
	branch Test(NE,Z) l000000000042E9F4
	// succ:  l000000000042EAAC l000000000042E9F4
l000000000042EAAC:
	x20 = x19 + 0xFFFFFFFFFFFFFB30
	x0 = Mem0[x20 + 64:word64]
	x3 = Mem0[x26:word64]
	x2 = 0x00000000004AC000
	w1 = 0x00000001
	x2 = x2 + 0x00000000000003C0
	__fprintf_chk(x0, x1, x2, Mem0[sp:<unknown>])
	sp = sp + 0xFFFFFFFFFFFFFFF8
	x1 = Mem0[x20 + 64:word64]
	branch x23 == 0x0000000000000000 l000000000042EAEC
	// succ:  l000000000042EAD0 l000000000042EAEC
l000000000042EAD0:
	v37 = Mem0[x23:byte]
	w0 = (word32) v37
	branch w0 == 0x00000000 l000000000042EAEC
	// succ:  l000000000042EAD8 l000000000042EAEC
l000000000042EAD8:
	x0 = x23
	fputs(x0, x1)
	sp = sp + 0xFFFFFFFFFFFFFFF8
	goto l000000000042E9FC
	// succ:  l000000000042E9FC
l000000000042EAE4:
	x0 = x23
	goto l000000000042EA50
	// succ:  l000000000042EA50
l000000000042EAEC:
	x0 = 0x00000000004AC000
	x0 = x0 + 0x00000000000003B8
	fputs(x0, x1)
	sp = sp + 0xFFFFFFFFFFFFFFF8
	goto l000000000042E9FC
	// succ:  l000000000042E9FC
l000000000042EAFC:
	x0 = 0x00000000004DE000
	x21 = Mem0[x0 + 1640:word64]
	goto l000000000042E9B8
	// succ:  l000000000042E9B8
xtrace_print_cond_term_exit:


// xtrace_print_arith_cmd
// Return size: 0
void xtrace_print_arith_cmd()
xtrace_print_arith_cmd_entry:
	// succ:  l000000000042EB08
l000000000042EB08:
	sp = fp
	sp = sp + -80
	Mem0[sp:word64] = x29
	sp = sp + 8
	Mem0[sp:word64] = x30
	x29 = x31 + 0x0000000000000000
	v8 = sp + 48
	Mem0[v8:word64] = x23
	v8 = v8 + 8
	Mem0[v8:word64] = x24
	x24 = 0x00000000004DF000
	x1 = x24 + 0xFFFFFFFFFFFFFB30
	x1 = Mem0[x1 + 64:word64]
	v12 = sp + 16
	Mem0[v12:word64] = x19
	v12 = v12 + 8
	Mem0[v12:word64] = x20
	v15 = sp + 32
	Mem0[v15:word64] = x21
	v15 = v15 + 8
	Mem0[v15:word64] = x22
	x19 = x0
	branch x1 == 0x0000000000000000 l000000000042EBDC
	// succ:  l000000000042EB30 l000000000042EBDC
l000000000042EB30:
	x23 = x24 + 0xFFFFFFFFFFFFFB30
	Mem0[x23 + 64:word64] = x1
	Mem0[x29 + 64:word64] = x1
	call indirection_level_string (retsize: 0;)
	x1 = Mem0[x29 + 64:word64]
	fputs(x0, x1)
	sp = sp + 0xFFFFFFFFFFFFFFF8
	x0 = 0x00000000004AC000
	x3 = Mem0[x23 + 64:word64]
	x0 = x0 + 0x00000000000003D8
	x1 = 0x0000000000000001
	x2 = 0x0000000000000003
	fwrite(x0, x1, x2, x3)
	sp = sp + 0xFFFFFFFFFFFFFFF8
	branch x19 == 0x0000000000000000 l000000000042EBA8
	// succ:  l000000000042EB64 l000000000042EBA8
l000000000042EB64:
	x22 = 0x00000000004BE000
	x21 = 0x00000000004AC000
	x20 = 0x00000000004AB000
	x22 = x22 + 0x0000000000000330
	x21 = x21 + 0x0000000000000460
	x20 = x20 + 0xFFFFFFFFFFFFFF00
	x1 = Mem0[x19:word64]
	x3 = Mem0[x19 + 8:word64]
	x31 = x1 - x31
	NZCV = cond(x31)
	x0 = Mem0[x23 + 64:word64]
	x3 = Mem0[x3:word64]
l000000000042EBA8:
	x24 = x24 + 0xFFFFFFFFFFFFFB30
	x3 = Mem0[x24 + 64:word64]
	x0 = 0x00000000004AC000
	x1 = 0x0000000000000001
	x2 = 0x0000000000000004
	x0 = x0 + 0x00000000000003E0
	fwrite(x0, x1, x2, x3)
	sp = sp + 0xFFFFFFFFFFFFFFF8
	x0 = Mem0[x24 + 64:word64]
	v20 = sp + 16
	x19 = Mem0[v20:word64]
	v20 = v20 + 8
	x20 = Mem0[v20:word64]
	v21 = sp + 32
	x21 = Mem0[v21:word64]
	v21 = v21 + 8
	x22 = Mem0[v21:word64]
	v22 = sp + 48
	x23 = Mem0[v22:word64]
	v22 = v22 + 8
	x24 = Mem0[v22:word64]
	x29 = Mem0[sp:word64]
	sp = sp + 8
	x30 = Mem0[sp:word64]
	sp = sp + 80
	fflush(x0)
	return
	// succ:  xtrace_print_arith_cmd_exit
l000000000042EBDC:
	x0 = 0x00000000004DE000
	x1 = Mem0[x0 + 1640:word64]
	goto l000000000042EB30
	// succ:  l000000000042EB30
xtrace_print_arith_cmd_exit:


// print_simple_command
// Return size: 0
void print_simple_command()
print_simple_command_entry:
	// succ:  l000000000042EBE8
l000000000042EBE8:
	sp = fp
	sp = sp + -32
	Mem0[sp:word64] = x29
	sp = sp + 8
	Mem0[sp:word64] = x30
	x29 = x31 + 0x0000000000000000
	v8 = sp + 16
	Mem0[v8:word64] = x19
	v8 = v8 + 8
	Mem0[v8:word64] = x20
	x20 = 0x00000000004BE000
	x19 = x0
	x20 = x20 + 0x0000000000000330
	x0 = Mem0[x0 + 8:word64]
	x1 = x20
	call fn000000000042D478 (retsize: 0;)
	x0 = Mem0[x19 + 16:word64]
	branch x0 == 0x0000000000000000 l000000000042EC2C
	// succ:  l000000000042EC14 l000000000042EC2C
l000000000042EC14:
	x0 = x20
	call fn000000000042D1A4 (retsize: 0;)
	x0 = Mem0[x19 + 16:word64]
	v11 = sp + 16
	x19 = Mem0[v11:word64]
	v11 = v11 + 8
	x20 = Mem0[v11:word64]
	x29 = Mem0[sp:word64]
	sp = sp + 8
	x30 = Mem0[sp:word64]
	sp = sp + 32
	// succ:  l000000000042EC28_thunk_fn000000000042DE20
l000000000042EC28_thunk_fn000000000042DE20:
	call fn000000000042DE20 (retsize: 0;)
	return
	// succ:  print_simple_command_exit
l000000000042EC2C:
	v12 = sp + 16
	x19 = Mem0[v12:word64]
	v12 = v12 + 8
	x20 = Mem0[v12:word64]
	x29 = Mem0[sp:word64]
	sp = sp + 8
	x30 = Mem0[sp:word64]
	sp = sp + 32
	return
	// succ:  print_simple_command_exit
print_simple_command_exit:


// fn000000000042EC38
// Return size: 0
void fn000000000042EC38()
fn000000000042EC38_entry:
	// succ:  l000000000042EC38
l000000000042EC38:
	sp = fp
	sp = sp + -144
	Mem0[sp:word64] = x29
	sp = sp + 8
	Mem0[sp:word64] = x30
	x29 = x31 + 0x0000000000000000
	v8 = sp + 16
	Mem0[v8:word64] = x19
	v8 = v8 + 8
	Mem0[v8:word64] = x20
	v11 = sp + 32
	Mem0[v11:word64] = x21
	v11 = v11 + 8
	Mem0[v11:word64] = x22
	v14 = sp + 48
	Mem0[v14:word64] = x23
	v14 = v14 + 8
	Mem0[v14:word64] = x24
	v17 = sp + 64
	Mem0[v17:word64] = x25
	v17 = v17 + 8
	Mem0[v17:word64] = x26
	v20 = sp + 80
	Mem0[v20:word64] = x27
	v20 = v20 + 8
	Mem0[v20:word64] = x28
	x19 = x0
	branch x0 == 0x0000000000000000 l000000000042F420
	// succ:  l000000000042EC5C l000000000042F420
l000000000042EC5C:
	x20 = 0x00000000004DF000
	x0 = x20 + 0xFFFFFFFFFFFFFB30
	w1 = Mem0[x0 + 172:word32]
	branch w1 == 0x00000000 l000000000042ED28
	// succ:  l000000000042EC6C l000000000042ED28
l000000000042EC6C:
	w1 = w1 - 0x00000001
	Mem0[x0 + 172:word32] = w1
	// succ:  l000000000042EC74
l000000000042EC74:
	w0 = Mem0[x19 + 4:word32]
	branch (w0 & 0x00000080) == 0x00000000 l000000000042ECF0
	// succ:  l000000000042EC7C l000000000042ECF0
l000000000042EC7C:
	branch (w0 & 0x00000004) == 0x00000000 l000000000042ED18
	// succ:  l000000000042EC80 l000000000042ED18
l000000000042EC80:
	w2 = Mem0[x19:word32]
	w31 = w2 - 0x0000000E
	NZCV = cond(w31)
	branch Test(ULE,ZC) l000000000042ECD8
	// succ:  l000000000042EC8C l000000000042ECD8
l000000000042EC8C:
	x0 = 0x00000000004AC000
	x0 = x0 + 0x0000000000000490
	w1 = 0x00000001
	w3 = 0x00000000
	call command_error (retsize: 0;)
	x0 = Mem0[x19 + 16:word64]
	branch x0 == 0x0000000000000000 l000000000042ECBC
	// succ:  l000000000042ECA8 l000000000042ECBC
l000000000042ECA8:
	x0 = 0x00000000004BE000
	x0 = x0 + 0x0000000000000330
	call fn000000000042D1A4 (retsize: 0;)
	x0 = Mem0[x19 + 16:word64]
	call fn000000000042DE20 (retsize: 0;)
	// succ:  l000000000042ECBC
l000000000042ECBC:
	v29 = sp + 16
	x19 = Mem0[v29:word64]
	v29 = v29 + 8
	x20 = Mem0[v29:word64]
	v30 = sp + 32
	x21 = Mem0[v30:word64]
	v30 = v30 + 8
	x22 = Mem0[v30:word64]
	v31 = sp + 48
	x23 = Mem0[v31:word64]
	v31 = v31 + 8
	x24 = Mem0[v31:word64]
	v32 = sp + 64
	x25 = Mem0[v32:word64]
	v32 = v32 + 8
	x26 = Mem0[v32:word64]
	v33 = sp + 80
	x27 = Mem0[v33:word64]
	v33 = v33 + 8
	x28 = Mem0[v33:word64]
	x29 = Mem0[sp:word64]
	sp = sp + 8
	x30 = Mem0[sp:word64]
	sp = sp + 144
	return
	// succ:  fn000000000042EC38_exit
l000000000042ECD8:
	x0 = 0x00000000004AC000
	x0 = x0 + 0x0000000000000110
	v34 = Mem0[x0 + (uint64) ((uint32) w2):word16]
	w3 = (word32) v34
	x1 = 0x000000000042ECF0
	x3 = x1 + (int64) ((int16) w3)
l000000000042ECF0:
	x0 = 0x00000000004AC000
	x0 = x0 + 0x00000000000003E8
	call fn000000000042D1A4 (retsize: 0;)
	w0 = Mem0[x19 + 4:word32]
	branch (w0 & 0x00000100) == 0x00000000 l000000000042EC7C
	// succ:  l000000000042ED04 l000000000042EC7C
l000000000042ED04:
	x0 = 0x00000000004AC000
	x0 = x0 + 0x00000000000003F0
	call fn000000000042D1A4 (retsize: 0;)
	w0 = Mem0[x19 + 4:word32]
	branch (w0 & 0x00000004) == 0x00000000 l000000000042EC80
	// succ:  l000000000042ED18 l000000000042EC80
l000000000042ED18:
	x0 = 0x00000000004AC000
	x0 = x0 + 0x0000000000000298
	call fn000000000042D1A4 (retsize: 0;)
	goto l000000000042EC80
	// succ:  l000000000042EC80
l000000000042ED28:
	w0 = Mem0[x0 + 4:word32]
	call fn000000000042D4D8 (retsize: 0;)
	goto l000000000042EC74
	// succ:  l000000000042EC74
l000000000042F420:
	x0 = 0x00000000004AC000
	x0 = x0 + 0x0000000000000460
	call fn000000000042D1A4 (retsize: 0;)
	goto l000000000042ECBC
	// succ:  l000000000042ECBC
fn000000000042EC38_exit:


// make_command_string
// Return size: 0
void make_command_string()
make_command_string_entry:
	// succ:  l000000000042F548
l000000000042F548:
	sp = fp
	sp = sp + -32
	Mem0[sp:word64] = x29
	sp = sp + 8
	Mem0[sp:word64] = x30
	x29 = x31 + 0x0000000000000000
	Mem0[sp + 16:word64] = x19
	x19 = 0x00000000004DF000
	x19 = x19 + 0xFFFFFFFFFFFFFB30
	Mem0[x19 + 56:word32] = 0x00000000
	Mem0[x19 + 36:word32] = 0x00000000
	Mem0[x19 + 16:word64] = 0x0000000000000000
	call fn000000000042EC38 (retsize: 0;)
	x0 = Mem0[x19 + 24:word64]
	x19 = Mem0[sp + 16:word64]
	x29 = Mem0[sp:word64]
	sp = sp + 8
	x30 = Mem0[sp:word64]
	sp = sp + 32
	return
	// succ:  make_command_string_exit
make_command_string_exit:


// print_command
// Return size: 0
void print_command()
print_command_entry:
	// succ:  l000000000042F57C
l000000000042F57C:
	sp = fp
	sp = sp + -32
	Mem0[sp:word64] = x29
	sp = sp + 8
	Mem0[sp:word64] = x30
	x29 = x31 + 0x0000000000000000
	Mem0[sp + 16:word64] = x19
	x19 = 0x00000000004DF000
	x19 = x19 + 0xFFFFFFFFFFFFFB30
	Mem0[x19 + 36:word32] = 0x00000000
	Mem0[x19 + 56:word32] = 0x00000000
	Mem0[x19 + 16:word64] = 0x0000000000000000
	call fn000000000042EC38 (retsize: 0;)
	x2 = Mem0[x19 + 24:word64]
	x1 = 0x00000000004BF000
	x19 = Mem0[sp + 16:word64]
	x29 = Mem0[sp:word64]
	sp = sp + 8
	x30 = Mem0[sp:word64]
	sp = sp + 32
	w0 = 0x00000001
	x1 = x1 + 0x0000000000000050
	__printf_chk(x0, x1, Mem0[sp:<unknown>])
	return
	// succ:  print_command_exit
print_command_exit:


// fn000000000042F5BC
// Return size: 0
void fn000000000042F5BC()
fn000000000042F5BC_entry:
	// succ:  l000000000042F5BC
l000000000042F5BC:
	sp = fp
	sp = sp + -48
	Mem0[sp:word64] = x29
	sp = sp + 8
	Mem0[sp:word64] = x30
	x29 = x31 + 0x0000000000000000
	v8 = sp + 32
	Mem0[v8:word64] = x21
	v8 = v8 + 8
	Mem0[v8:word64] = x22
	x21 = x0
	x0 = 0x00000000004AC000
	v12 = sp + 16
	Mem0[v12:word64] = x19
	v12 = v12 + 8
	Mem0[v12:word64] = x20
	x0 = x0 + 0x00000000000003C0
	x19 = 0x00000000004DF000
	x22 = x1
	x1 = x2
	call fn000000000042D1A4 (retsize: 0;)
	x20 = x19 + 0xFFFFFFFFFFFFFB30
	w1 = Mem0[x20 + 172:word32]
	x0 = Mem0[x21:word64]
	w1 = w1 + 0x00000001
	Mem0[x20 + 172:word32] = w1
	call fn000000000042EC38 (retsize: 0;)
	x0 = Mem0[x20 + 16:word64]
	branch x0 == 0x0000000000000000 l000000000042F614
	// succ:  l000000000042F608 l000000000042F614
l000000000042F608:
	x0 = 0x00000000004AC000
	x0 = x0 + 0x0000000000000460
	call fn000000000042D710 (retsize: 0;)
	// succ:  l000000000042F614
l000000000042F614:
	call fn000000000042D580 (retsize: 0;)
	x0 = 0x00000000004AC000
	x0 = x0 + 0x00000000000004A0
	call fn000000000042D1A4 (retsize: 0;)
	x21 = 0x00000000004D6000
	x20 = x19 + 0xFFFFFFFFFFFFFB30
	x0 = x21 + 0xFFFFFFFFFFFFFA20
	w1 = Mem0[x20 + 4:word32]
	w2 = Mem0[x0 + 4:word32]
	x0 = Mem0[x22:word64]
	w1 = w1 + w2
	Mem0[x20 + 4:word32] = w1
	call fn000000000042EC38 (retsize: 0;)
	x0 = Mem0[x20 + 16:word64]
	branch x0 == 0x0000000000000000 l000000000042F65C
	// succ:  l000000000042F650 l000000000042F65C
l000000000042F650:
	x0 = 0x00000000004AC000
	x0 = x0 + 0x0000000000000460
	call fn000000000042D710 (retsize: 0;)
	// succ:  l000000000042F65C
l000000000042F65C:
	x19 = x19 + 0xFFFFFFFFFFFFFB30
	x21 = x21 + 0xFFFFFFFFFFFFFA20
	w0 = Mem0[x19 + 4:word32]
	w1 = Mem0[x21 + 4:word32]
	w0 = w0 - w1
	Mem0[x19 + 4:word32] = w0
	call fn000000000042D580 (retsize: 0;)
	x0 = 0x00000000004BD000
	v18 = sp + 16
	x19 = Mem0[v18:word64]
	v18 = v18 + 8
	x20 = Mem0[v18:word64]
	v19 = sp + 32
	x21 = Mem0[v19:word64]
	v19 = v19 + 8
	x22 = Mem0[v19:word64]
	x29 = Mem0[sp:word64]
	sp = sp + 8
	x30 = Mem0[sp:word64]
	sp = sp + 48
	x0 = x0 + 0xFFFFFFFFFFFFFA80
	// succ:  l000000000042F68C_thunk_fn000000000042D5C0
l000000000042F68C_thunk_fn000000000042D5C0:
	call fn000000000042D5C0 (retsize: 0;)
	return
	// succ:  fn000000000042F5BC_exit
fn000000000042F5BC_exit:


// named_function_string
// Return size: 0
void named_function_string()
named_function_string_entry:
	// succ:  l000000000042F690
l000000000042F690:
	sp = fp
	sp = sp + -80
	Mem0[sp:word64] = x29
	sp = sp + 8
	Mem0[sp:word64] = x30
	x29 = x31 + 0x0000000000000000
	v8 = sp + 16
	Mem0[v8:word64] = x19
	v8 = v8 + 8
	Mem0[v8:word64] = x20
	x19 = 0x00000000004DF000
	v11 = sp + 32
	Mem0[v11:word64] = x21
	v11 = v11 + 8
	Mem0[v11:word64] = x22
	v14 = sp + 64
	Mem0[v14:word64] = x25
	v14 = v14 + 8
	Mem0[v14:word64] = x26
	x3 = x19 + 0xFFFFFFFFFFFFFB30
	v18 = sp + 48
	Mem0[v18:word64] = x23
	v18 = v18 + 8
	Mem0[v18:word64] = x24
	x22 = 0x00000000004D6000
	x5 = x22 + 0xFFFFFFFFFFFFFA20
	Mem0[x3 + 56:word32] = 0x00000000
	Mem0[x3 + 36:word32] = 0x00000000
	Mem0[x3 + 16:word64] = 0x0000000000000000
	x4 = x0
	x20 = x1
	w21 = w2
	w26 = Mem0[x3 + 4:word32]
	w25 = Mem0[x5 + 4:word32]
	branch x0 == 0x0000000000000000 l000000000042F6E4
	// succ:  l000000000042F6DC l000000000042F6E4
l000000000042F6DC:
	v28 = Mem0[x0:byte]
	w0 = (word32) v28
	branch w0 != 0x00000000 l000000000042F868
	// succ:  l000000000042F6E4 l000000000042F868
l000000000042F6E4:
	x0 = 0x00000000004AC000
	x0 = x0 + 0x00000000000004A8
	call fn000000000042D1A4 (retsize: 0;)
	w23 = w21 & 0x00000001
	branch (w21 & 0x00000001) == 0x00000000 l000000000042F7C4
	// succ:  l000000000042F6F8 l000000000042F7C4
l000000000042F6F8:
	x2 = x19 + 0xFFFFFFFFFFFFFB30
	w1 = Mem0[x2:word32]
	x0 = x22 + 0xFFFFFFFFFFFFFA20
	Mem0[x0 + 4:word32] = w23
	x0 = 0x00000000004AC000
	w1 = w1 + 0x00000001
	w3 = 0x00000001
	x0 = x0 + 0x0000000000000478
	Mem0[x2:word32] = w1
	Mem0[x2 + 4:word32] = w3
	call fn000000000042D1A4 (retsize: 0;)
	x0 = x20
	call copy_command (retsize: 0;)
	w1 = Mem0[x0:word32]
	x20 = x0
	w31 = w1 - 0x00000009
	NZCV = cond(w31)
	branch Test(EQ,Z) l000000000042F818
	// succ:  l000000000042F73C l000000000042F818
l000000000042F73C:
	call fn000000000042EC38 (retsize: 0;)
	x0 = x19 + 0xFFFFFFFFFFFFFB30
	w1 = Mem0[x0:word32]
	x22 = x22 + 0xFFFFFFFFFFFFFA20
	w1 = w1 - 0x00000001
	Mem0[x0 + 4:word32] = w26
	Mem0[x22 + 4:word32] = w25
	Mem0[x0:word32] = w1
	// succ:  l000000000042F75C
l000000000042F75C:
	x0 = 0x00000000004AD000
	x0 = x0 + 0xFFFFFFFFFFFFFB88
	call fn000000000042D5C0 (retsize: 0;)
	// succ:  l000000000042F768
l000000000042F768:
	x19 = x19 + 0xFFFFFFFFFFFFFB30
	x19 = Mem0[x19 + 24:word64]
	branch w23 != 0x00000000 l000000000042F780
	// succ:  l000000000042F774 l000000000042F780
l000000000042F774:
	v36 = Mem0[x19 + 2:byte]
	w0 = (word32) v36
	w31 = w0 - 0x0000000A
	NZCV = cond(w31)
	branch Test(EQ,Z) l000000000042F87C
	// succ:  l000000000042F780 l000000000042F87C
l000000000042F780:
	x0 = x20
	call dispose_command (retsize: 0;)
	branch (w21 & 0x00000002) == 0x00000000 l000000000042F7A8
	// succ:  l000000000042F78C l000000000042F7A8
l000000000042F78C:
	x0 = x19
	v37 = sp + 32
	x21 = Mem0[v37:word64]
	v37 = v37 + 8
	x22 = Mem0[v37:word64]
	v38 = sp + 16
	x19 = Mem0[v38:word64]
	v38 = v38 + 8
	x20 = Mem0[v38:word64]
	v39 = sp + 48
	x23 = Mem0[v39:word64]
	v39 = v39 + 8
	x24 = Mem0[v39:word64]
	v40 = sp + 64
	x25 = Mem0[v40:word64]
	v40 = v40 + 8
	x26 = Mem0[v40:word64]
	x29 = Mem0[sp:word64]
	sp = sp + 8
	x30 = Mem0[sp:word64]
	sp = sp + 80
	return
	// succ:  named_function_string_exit
l000000000042F7A8:
	x0 = x19
	v41 = sp + 32
	x21 = Mem0[v41:word64]
	v41 = v41 + 8
	x22 = Mem0[v41:word64]
	v42 = sp + 16
	x19 = Mem0[v42:word64]
	v42 = v42 + 8
	x20 = Mem0[v42:word64]
	v43 = sp + 48
	x23 = Mem0[v43:word64]
	v43 = v43 + 8
	x24 = Mem0[v43:word64]
	v44 = sp + 64
	x25 = Mem0[v44:word64]
	v44 = v44 + 8
	x26 = Mem0[v44:word64]
	x29 = Mem0[sp:word64]
	sp = sp + 8
	x30 = Mem0[sp:word64]
	sp = sp + 80
	// succ:  l000000000042F7C0_thunk_remove_quoted_escapes
l000000000042F7C0_thunk_remove_quoted_escapes:
	call remove_quoted_escapes (retsize: 0;)
	return
	// succ:  named_function_string_exit
l000000000042F7C4:
	x0 = 0x00000000004C4000
	x0 = x0 + 0xFFFFFFFFFFFFF8C0
	call fn000000000042D1A4 (retsize: 0;)
	x0 = x19 + 0xFFFFFFFFFFFFFB30
	x3 = x22 + 0xFFFFFFFFFFFFFA20
	w1 = Mem0[x0 + 4:word32]
	w2 = Mem0[x0:word32]
	w3 = Mem0[x3 + 4:word32]
	w2 = w2 + 0x00000001
	w1 = w1 + w3
	Mem0[x0 + 4:word32] = w1
	Mem0[x0:word32] = w2
	x0 = 0x00000000004AC000
	x0 = x0 + 0x0000000000000468
	call fn000000000042D1A4 (retsize: 0;)
	x0 = x20
	call copy_command (retsize: 0;)
	w1 = Mem0[x0:word32]
	x20 = x0
	w31 = w1 - 0x00000009
	NZCV = cond(w31)
	branch Test(NE,Z) l000000000042F73C
	// succ:  l000000000042F818 l000000000042F73C
l000000000042F818:
	x0 = Mem0[x0 + 24:word64]
	x24 = Mem0[x20 + 16:word64]
	x0 = Mem0[x0 + 8:word64]
	Mem0[x20 + 16:word64] = 0x0000000000000000
	call fn000000000042EC38 (retsize: 0;)
	x0 = x19 + 0xFFFFFFFFFFFFFB30
	w1 = Mem0[x0:word32]
	x22 = x22 + 0xFFFFFFFFFFFFFA20
	w1 = w1 - 0x00000001
	Mem0[x0 + 4:word32] = w26
	Mem0[x22 + 4:word32] = w25
	Mem0[x0:word32] = w1
	branch x24 == 0x0000000000000000 l000000000042F75C
	// succ:  l000000000042F84C l000000000042F75C
l000000000042F84C:
	x0 = 0x00000000004AC000
	x0 = x0 + 0x0000000000000470
	call fn000000000042D5C0 (retsize: 0;)
	x0 = x24
	call fn000000000042DE20 (retsize: 0;)
	Mem0[x20 + 16:word64] = x24
	goto l000000000042F768
	// succ:  l000000000042F768
l000000000042F868:
	x0 = 0x00000000004AC000
	x0 = x0 + 0x00000000000003C0
	x1 = x4
	call fn000000000042D1A4 (retsize: 0;)
	goto l000000000042F6E4
	// succ:  l000000000042F6E4
l000000000042F87C:
	x0 = x19 + 0x0000000000000002
	x1 = x19 + 0x0000000000000003
	strcpy(x0, x1)
	sp = sp + 0xFFFFFFFFFFFFFFF8
	goto l000000000042F780
	// succ:  l000000000042F780
named_function_string_exit:


// dispose_word
// Return size: 0
void dispose_word()
dispose_word_entry:
	// succ:  l000000000042F88C
l000000000042F88C:
	sp = fp
	sp = sp + -32
	Mem0[sp:word64] = x29
	sp = sp + 8
	Mem0[sp:word64] = x30
	x29 = x31 + 0x0000000000000000
	Mem0[sp + 16:word64] = x19
	x19 = x0
	x0 = Mem0[x0:word64]
	branch x0 == 0x0000000000000000 l000000000042F8B4
	// succ:  l000000000042F8A4 l000000000042F8B4
l000000000042F8A4:
	x1 = 0x00000000004AC000
	x1 = x1 + 0x00000000000004E0
	w2 = 0x000000F9
	call sh_xfree (retsize: 0;)
	// succ:  l000000000042F8B4
l000000000042F8B4:
	x2 = 0x00000000004DF000
	x1 = x2 + 0xFFFFFFFFFFFFFB10
	w3 = Mem0[x1 + 12:word32]
	w0 = Mem0[x1 + 8:word32]
	NZCV = cond(w3 - w0)
	branch Test(GE,NZV) l000000000042F930
	// succ:  l000000000042F8CC l000000000042F930
l000000000042F8CC:
	w0 = 0xFFFFFFDF
	Mem0[x19:byte] = (byte) w0
	Mem0[x19 + 1:byte] = (byte) w0
	Mem0[x19 + 2:byte] = (byte) w0
	Mem0[x19 + 3:byte] = (byte) w0
	Mem0[x19 + 4:byte] = (byte) w0
	Mem0[x19 + 5:byte] = (byte) w0
	Mem0[x19 + 6:byte] = (byte) w0
	Mem0[x19 + 7:byte] = (byte) w0
	Mem0[x19 + 8:byte] = (byte) w0
	Mem0[x19 + 9:byte] = (byte) w0
	Mem0[x19 + 10:byte] = (byte) w0
	Mem0[x19 + 11:byte] = (byte) w0
	Mem0[x19 + 12:byte] = (byte) w0
	Mem0[x19 + 13:byte] = (byte) w0
	Mem0[x19 + 14:byte] = (byte) w0
	Mem0[x19 + 15:byte] = (byte) w0
	w0 = Mem0[x1 + 12:word32]
	x2 = Mem0[x2 + 2832:word64]
	w3 = w0 + 0x00000001
	Mem0[x1 + 12:word32] = w3
	Mem0[x2 + (int64) ((int32) w0):word64] = x19
	x19 = Mem0[sp + 16:word64]
	x29 = Mem0[sp:word64]
	sp = sp + 8
	x30 = Mem0[sp:word64]
	sp = sp + 32
	return
	// succ:  dispose_word_exit
l000000000042F930:
	x0 = x19
	x1 = 0x00000000004AC000
	x19 = Mem0[sp + 16:word64]
	x29 = Mem0[sp:word64]
	sp = sp + 8
	x30 = Mem0[sp:word64]
	sp = sp + 32
	x1 = x1 + 0x00000000000004E0
	w2 = 0x000000FA
	// succ:  l000000000042F948_thunk_sh_xfree
l000000000042F948_thunk_sh_xfree:
	call sh_xfree (retsize: 0;)
	return
	// succ:  dispose_word_exit
dispose_word_exit:


// dispose_cond_node
// Return size: 0
void dispose_cond_node()
dispose_cond_node_entry:
	// succ:  l000000000042F94C
l000000000042F94C:
	sp = fp
	sp = sp + -32
	Mem0[sp:word64] = x29
	sp = sp + 8
	Mem0[sp:word64] = x30
	x29 = x31 + 0x0000000000000000
	Mem0[sp + 16:word64] = x19
	x19 = x0
	branch x0 == 0x0000000000000000 l000000000042F9A0
	// succ:  l000000000042F960 l000000000042F9A0
l000000000042F960:
	x0 = Mem0[x0 + 24:word64]
	branch x0 == 0x0000000000000000 l000000000042F96C
	// succ:  l000000000042F968 l000000000042F96C
l000000000042F968:
	call dispose_cond_node (retsize: 0;)
	// succ:  l000000000042F96C
l000000000042F96C:
	x0 = Mem0[x19 + 32:word64]
	branch x0 == 0x0000000000000000 l000000000042F978
	// succ:  l000000000042F974 l000000000042F978
l000000000042F974:
	call dispose_cond_node (retsize: 0;)
	// succ:  l000000000042F978
l000000000042F978:
	x0 = Mem0[x19 + 16:word64]
	branch x0 == 0x0000000000000000 l000000000042F984
	// succ:  l000000000042F980 l000000000042F984
l000000000042F980:
	call dispose_word (retsize: 0;)
	// succ:  l000000000042F984
l000000000042F984:
	x0 = x19
	x1 = 0x00000000004AC000
	x19 = Mem0[sp + 16:word64]
	x29 = Mem0[sp:word64]
	sp = sp + 8
	x30 = Mem0[sp:word64]
	sp = sp + 32
	x1 = x1 + 0x00000000000004E0
	w2 = 0x000000DE
	// succ:  l000000000042F99C_thunk_sh_xfree
l000000000042F99C_thunk_sh_xfree:
	call sh_xfree (retsize: 0;)
	return
	// succ:  dispose_cond_node_exit
l000000000042F9A0:
	x19 = Mem0[sp + 16:word64]
	x29 = Mem0[sp:word64]
	sp = sp + 8
	x30 = Mem0[sp:word64]
	sp = sp + 32
	return
	// succ:  dispose_cond_node_exit
dispose_cond_node_exit:


// dispose_word_desc
// Return size: 0
void dispose_word_desc()
dispose_word_desc_entry:
	// succ:  l000000000042F9AC
l000000000042F9AC:
	sp = fp
	x3 = 0x00000000004DF000
	x2 = x3 + 0xFFFFFFFFFFFFFB10
	w5 = Mem0[x2 + 12:word32]
	w4 = Mem0[x2 + 8:word32]
	Mem0[x0:word64] = 0x0000000000000000
	NZCV = cond(w5 - w4)
	x1 = x0
	branch Test(GE,NZV) l000000000042FA28
	// succ:  l000000000042F9CC l000000000042FA28
l000000000042F9CC:
	w0 = 0xFFFFFFDF
	Mem0[x1:byte] = (byte) w0
	Mem0[x1 + 1:byte] = (byte) w0
	Mem0[x1 + 2:byte] = (byte) w0
	Mem0[x1 + 3:byte] = (byte) w0
	Mem0[x1 + 4:byte] = (byte) w0
	Mem0[x1 + 5:byte] = (byte) w0
	Mem0[x1 + 6:byte] = (byte) w0
	Mem0[x1 + 7:byte] = (byte) w0
	Mem0[x1 + 8:byte] = (byte) w0
	Mem0[x1 + 9:byte] = (byte) w0
	Mem0[x1 + 10:byte] = (byte) w0
	Mem0[x1 + 11:byte] = (byte) w0
	Mem0[x1 + 12:byte] = (byte) w0
	Mem0[x1 + 13:byte] = (byte) w0
	Mem0[x1 + 14:byte] = (byte) w0
	Mem0[x1 + 15:byte] = (byte) w0
	w0 = Mem0[x2 + 12:word32]
	x3 = Mem0[x3 + 2832:word64]
	w4 = w0 + 0x00000001
	Mem0[x2 + 12:word32] = w4
	Mem0[x3 + (int64) ((int32) w0):word64] = x1
	return
	// succ:  dispose_word_desc_exit
l000000000042FA28:
	x1 = 0x00000000004AC000
	x1 = x1 + 0x00000000000004E0
	w2 = 0x00000103
	// succ:  l000000000042FA34_thunk_sh_xfree
l000000000042FA34_thunk_sh_xfree:
	call sh_xfree (retsize: 0;)
	return
	// succ:  dispose_word_desc_exit
dispose_word_desc_exit:


// dispose_words
// Return size: 0
void dispose_words()
dispose_words_entry:
	// succ:  l000000000042FA38
l000000000042FA38:
	sp = fp
	sp = sp + -64
	Mem0[sp:word64] = x29
	sp = sp + 8
	Mem0[sp:word64] = x30
	x29 = x31 + 0x0000000000000000
	v8 = sp + 16
	Mem0[v8:word64] = x19
	v8 = v8 + 8
	Mem0[v8:word64] = x20
	v11 = sp + 32
	Mem0[v11:word64] = x21
	v11 = v11 + 8
	Mem0[v11:word64] = x22
	Mem0[sp + 48:word64] = x23
	x19 = x0
	x22 = 0x00000000004DF000
	branch x0 == 0x0000000000000000 l000000000042FB14
	// succ:  l000000000042FA58 l000000000042FB14
l000000000042FA58:
	x0 = Mem0[x19 + 8:word64]
	x21 = Mem0[x19:word64]
	call dispose_word (retsize: 0;)
	x0 = x22 + 0xFFFFFFFFFFFFFB20
	w3 = Mem0[x0 + 12:word32]
	w2 = Mem0[x0 + 8:word32]
	x23 = 0x00000000004AC000
	NZCV = cond(w3 - w2)
	x23 = x23 + 0x00000000000004E0
	w20 = 0xFFFFFFDF
	branch Test(GE,NZV) l000000000042FB00
	// succ:  l000000000042FA84 l000000000042FB00
l000000000042FA84:
	Mem0[x19:byte] = (byte) w20
	Mem0[x19 + 1:byte] = (byte) w20
	Mem0[x19 + 2:byte] = (byte) w20
	Mem0[x19 + 3:byte] = (byte) w20
	Mem0[x19 + 4:byte] = (byte) w20
	Mem0[x19 + 5:byte] = (byte) w20
	Mem0[x19 + 6:byte] = (byte) w20
	Mem0[x19 + 7:byte] = (byte) w20
	Mem0[x19 + 8:byte] = (byte) w20
	Mem0[x19 + 9:byte] = (byte) w20
	Mem0[x19 + 10:byte] = (byte) w20
	Mem0[x19 + 11:byte] = (byte) w20
	Mem0[x19 + 12:byte] = (byte) w20
	Mem0[x19 + 13:byte] = (byte) w20
	Mem0[x19 + 14:byte] = (byte) w20
	Mem0[x19 + 15:byte] = (byte) w20
	w2 = Mem0[x0 + 12:word32]
	x3 = Mem0[x22 + 2848:word64]
	w4 = w2 + 0x00000001
	Mem0[x0 + 12:word32] = w4
	Mem0[x3 + (int64) ((int32) w2):word64] = x19
	branch x21 == 0x0000000000000000 l000000000042FB14
	// succ:  l000000000042FADC l000000000042FB14
l000000000042FADC:
	x19 = x21
	x0 = Mem0[x19 + 8:word64]
	x21 = Mem0[x19:word64]
	call dispose_word (retsize: 0;)
	x0 = x22 + 0xFFFFFFFFFFFFFB20
	w3 = Mem0[x0 + 12:word32]
	w2 = Mem0[x0 + 8:word32]
	NZCV = cond(w3 - w2)
	branch Test(LT,NV) l000000000042FA84
	// succ:  l000000000042FB00 l000000000042FA84
l000000000042FB00:
	x0 = x19
	x1 = x23
	w2 = 0x00000115
	call sh_xfree (retsize: 0;)
	branch x21 != 0x0000000000000000 l000000000042FADC
	// succ:  l000000000042FB14 l000000000042FADC
l000000000042FB14:
	v23 = sp + 16
	x19 = Mem0[v23:word64]
	v23 = v23 + 8
	x20 = Mem0[v23:word64]
	v24 = sp + 32
	x21 = Mem0[v24:word64]
	v24 = v24 + 8
	x22 = Mem0[v24:word64]
	x23 = Mem0[sp + 48:word64]
	x29 = Mem0[sp:word64]
	sp = sp + 8
	x30 = Mem0[sp:word64]
	sp = sp + 64
	return
	// succ:  dispose_words_exit
dispose_words_exit:


// dispose_redirects
// Return size: 0
void dispose_redirects()
dispose_redirects_entry:
	// succ:  l000000000042FB28
l000000000042FB28:
	sp = fp
	sp = sp + -48
	Mem0[sp:word64] = x29
	sp = sp + 8
	Mem0[sp:word64] = x30
	x29 = x31 + 0x0000000000000000
	v8 = sp + 16
	Mem0[v8:word64] = x19
	v8 = v8 + 8
	Mem0[v8:word64] = x20
	v11 = sp + 32
	Mem0[v11:word64] = x21
	v11 = v11 + 8
	Mem0[v11:word64] = x22
	x19 = x0
	branch x0 == 0x0000000000000000 l000000000042FBC0
	// succ:  l000000000042FB40 l000000000042FBC0
l000000000042FB40:
	w0 = Mem0[x19 + 16:word32]
	x22 = 0x00000000004AC000
	x21 = 0x00000000004AC000
	x22 = x22 + 0x00000000000004AC
	x21 = x21 + 0x00000000000004E0
	x20 = Mem0[x19:word64]
	branch (w0 & 0x00000001) == 0x00000000 l000000000042FBB4
	// succ:  l000000000042FB5C l000000000042FBB4
l000000000042FB5C:
	w0 = Mem0[x19 + 24:word32]
	w31 = w0 - 0x00000013
	NZCV = cond(w31)
	branch Test(UGT,ZC) l000000000042FB90
	// succ:  l000000000042FB68 l000000000042FB90
l000000000042FB68:
	v18 = Mem0[x22 + (uint64) ((uint32) w0):byte]
	w2 = (word32) v18
	x1 = 0x000000000042FB78
	x2 = x1 + (int64) ((int8) w2)
	call x2 (retsize: 0;)
	return
	// succ:  dispose_redirects_exit
l000000000042FB90:
	x0 = x19
	x1 = x21
	w2 = 0x00000154
	call sh_xfree (retsize: 0;)
	branch x20 == 0x0000000000000000 l000000000042FBC0
	// succ:  l000000000042FBA4 l000000000042FBC0
l000000000042FBA4:
	x19 = x20
	w0 = Mem0[x19 + 16:word32]
	x20 = Mem0[x19:word64]
	branch (w0 & 0x00000001) == 0x00000000 l000000000042FB5C
	// succ:  l000000000042FBB4 l000000000042FB5C
l000000000042FBB4:
	x0 = Mem0[x19 + 8:word64]
	call dispose_word (retsize: 0;)
	goto l000000000042FB5C
	// succ:  l000000000042FB5C
l000000000042FBC0:
	v21 = sp + 16
	x19 = Mem0[v21:word64]
	v21 = v21 + 8
	x20 = Mem0[v21:word64]
	v22 = sp + 32
	x21 = Mem0[v22:word64]
	v22 = v22 + 8
	x22 = Mem0[v22:word64]
	x29 = Mem0[sp:word64]
	sp = sp + 8
	x30 = Mem0[sp:word64]
	sp = sp + 48
	return
	// succ:  dispose_redirects_exit
dispose_redirects_exit:


// dispose_command
// Return size: 0
void dispose_command()
dispose_command_entry:
	// succ:  l000000000042FBD0
l000000000042FBD0:
	sp = fp
	sp = sp + -64
	Mem0[sp:word64] = x29
	sp = sp + 8
	Mem0[sp:word64] = x30
	x29 = x31 + 0x0000000000000000
	v6 = sp + 16
	Mem0[v6:word64] = x19
	v6 = v6 + 8
	Mem0[v6:word64] = x20
	v9 = sp + 32
	Mem0[v9:word64] = x21
	v9 = v9 + 8
	Mem0[v9:word64] = x22
	v12 = sp + 48
	Mem0[v12:word64] = x23
	v12 = v12 + 8
	Mem0[v12:word64] = x24
	x19 = x0
	branch x0 == 0x0000000000000000 l000000000042FEA4
	// succ:  l000000000042FBEC l000000000042FEA4
l000000000042FBEC:
	x0 = Mem0[x0 + 16:word64]
	branch x0 == 0x0000000000000000 l000000000042FBF8
	// succ:  l000000000042FBF4 l000000000042FBF8
l000000000042FBF4:
	call dispose_redirects (retsize: 0;)
	// succ:  l000000000042FBF8
l000000000042FBF8:
	w2 = Mem0[x19:word32]
	w31 = w2 - 0x0000000E
	NZCV = cond(w31)
	branch Test(ULE,ZC) l000000000042FC3C
	// succ:  l000000000042FC04 l000000000042FC3C
l000000000042FC04:
	x0 = 0x00000000004AC000
	x0 = x0 + 0x00000000000004F8
	w1 = 0x00000001
	w3 = 0x00000000
	call command_error (retsize: 0;)
	x21 = 0x00000000004AC000
	x0 = x19
	x1 = x21 + 0x00000000000004E0
	v23 = sp + 16
	x19 = Mem0[v23:word64]
	v23 = v23 + 8
	x20 = Mem0[v23:word64]
	v24 = sp + 32
	x21 = Mem0[v24:word64]
	v24 = v24 + 8
	x22 = Mem0[v24:word64]
	v25 = sp + 48
	x23 = Mem0[v25:word64]
	v25 = v25 + 8
	x24 = Mem0[v25:word64]
	x29 = Mem0[sp:word64]
	sp = sp + 8
	x30 = Mem0[sp:word64]
	sp = sp + 64
	w2 = 0x000000CD
	// succ:  l000000000042FC38_thunk_sh_xfree
l000000000042FC38_thunk_sh_xfree:
	call sh_xfree (retsize: 0;)
	return
	// succ:  dispose_command_exit
l000000000042FC3C:
	x0 = 0x00000000004AC000
	x0 = x0 + 0x00000000000004C0
	v26 = Mem0[x0 + (uint64) ((uint32) w2):word16]
	w1 = (word32) v26
	x3 = 0x000000000042FC54
	x1 = x3 + (int64) ((int16) w1)
l000000000042FEA4:
	v28 = sp + 16
	x19 = Mem0[v28:word64]
	v28 = v28 + 8
	x20 = Mem0[v28:word64]
	v29 = sp + 32
	x21 = Mem0[v29:word64]
	v29 = v29 + 8
	x22 = Mem0[v29:word64]
	v30 = sp + 48
	x23 = Mem0[v30:word64]
	v30 = v30 + 8
	x24 = Mem0[v30:word64]
	x29 = Mem0[sp:word64]
	sp = sp + 8
	x30 = Mem0[sp:word64]
	sp = sp + 64
	return
	// succ:  dispose_command_exit
dispose_command_exit:


// dispose_function_def_contents
// Return size: 0
void dispose_function_def_contents()
dispose_function_def_contents_entry:
	// succ:  l000000000042FEB8
l000000000042FEB8:
	sp = fp
	sp = sp + -32
	Mem0[sp:word64] = x29
	sp = sp + 8
	Mem0[sp:word64] = x30
	x29 = x31 + 0x0000000000000000
	Mem0[sp + 16:word64] = x19
	x19 = x0
	x0 = Mem0[x0 + 8:word64]
	call dispose_word (retsize: 0;)
	x0 = Mem0[x19 + 16:word64]
	call dispose_command (retsize: 0;)
	x0 = Mem0[x19 + 24:word64]
	branch x0 == 0x0000000000000000 l000000000042FEF8
	// succ:  l000000000042FEE0 l000000000042FEF8
l000000000042FEE0:
	x19 = Mem0[sp + 16:word64]
	x1 = 0x00000000004AC000
	x29 = Mem0[sp:word64]
	sp = sp + 8
	x30 = Mem0[sp:word64]
	sp = sp + 32
	x1 = x1 + 0x00000000000004E0
	w2 = 0x000000E9
	// succ:  l000000000042FEF4_thunk_sh_xfree
l000000000042FEF4_thunk_sh_xfree:
	call sh_xfree (retsize: 0;)
	return
	// succ:  dispose_function_def_contents_exit
l000000000042FEF8:
	x19 = Mem0[sp + 16:word64]
	x29 = Mem0[sp:word64]
	sp = sp + 8
	x30 = Mem0[sp:word64]
	sp = sp + 32
	return
	// succ:  dispose_function_def_contents_exit
dispose_function_def_contents_exit:


// dispose_function_def
// Return size: 0
void dispose_function_def()
dispose_function_def_entry:
	// succ:  l000000000042FF04
l000000000042FF04:
	sp = fp
	sp = sp + -32
	Mem0[sp:word64] = x29
	sp = sp + 8
	Mem0[sp:word64] = x30
	x29 = x31 + 0x0000000000000000
	Mem0[sp + 16:word64] = x19
	x19 = x0
	call dispose_function_def_contents (retsize: 0;)
	x0 = x19
	x1 = 0x00000000004AC000
	x19 = Mem0[sp + 16:word64]
	x29 = Mem0[sp:word64]
	sp = sp + 8
	x30 = Mem0[sp:word64]
	sp = sp + 32
	x1 = x1 + 0x00000000000004E0
	w2 = 0x000000F1
	// succ:  l000000000042FF30_thunk_sh_xfree
l000000000042FF30_thunk_sh_xfree:
	call sh_xfree (retsize: 0;)
	return
	// succ:  dispose_function_def_exit
dispose_function_def_exit:


// dispose_fd_bitmap
// Return size: 0
void dispose_fd_bitmap()
dispose_fd_bitmap_entry:
	// succ:  l000000000043009C
l000000000043009C:
	sp = fp
	sp = sp + -32
	Mem0[sp:word64] = x29
	sp = sp + 8
	Mem0[sp:word64] = x30
	x29 = x31 + 0x0000000000000000
	v8 = sp + 16
	Mem0[v8:word64] = x19
	v8 = v8 + 8
	Mem0[v8:word64] = x20
	x19 = x0
	x0 = Mem0[x0 + 8:word64]
	x20 = 0x00000000004AC000
	branch x0 == 0x0000000000000000 l00000000004300C4
	// succ:  l00000000004300B8 l00000000004300C4
l00000000004300B8:
	x1 = x20 + 0x0000000000000560
	w2 = 0x0000013A
	call sh_xfree (retsize: 0;)
	// succ:  l00000000004300C4
l00000000004300C4:
	x0 = x19
	x1 = x20 + 0x0000000000000560
	v12 = sp + 16
	x19 = Mem0[v12:word64]
	v12 = v12 + 8
	x20 = Mem0[v12:word64]
	x29 = Mem0[sp:word64]
	sp = sp + 8
	x30 = Mem0[sp:word64]
	sp = sp + 32
	w2 = 0x0000013B
	// succ:  l00000000004300D8_thunk_sh_xfree
l00000000004300D8_thunk_sh_xfree:
	call sh_xfree (retsize: 0;)
	return
	// succ:  dispose_fd_bitmap_exit
dispose_fd_bitmap_exit:


// close_fd_bitmap
// Return size: 0
void close_fd_bitmap()
close_fd_bitmap_entry:
	// succ:  l00000000004300DC
l00000000004300DC:
	sp = fp
	sp = sp + -32
	Mem0[sp:word64] = x29
	sp = sp + 8
	Mem0[sp:word64] = x30
	x29 = x31 + 0x0000000000000000
	v8 = sp + 16
	Mem0[v8:word64] = x19
	v8 = v8 + 8
	Mem0[v8:word64] = x20
	x20 = x0
	branch x0 == 0x0000000000000000 l0000000000430144
	// succ:  l00000000004300F0 l0000000000430144
l00000000004300F0:
	w0 = Mem0[x0:word32]
	NZCV = cond(w0 - w31)
	branch Test(LE,ZCV) l0000000000430144
	// succ:  l00000000004300FC l0000000000430144
l00000000004300FC:
	x19 = 0x0000000000000000
	goto l0000000000430114
	// succ:  l0000000000430114
l0000000000430104:
	w1 = w19 + 0x00000001
	NZCV = cond(w1 - w0)
	x19 = x19 + 0x0000000000000001
	branch Test(GE,NZV) l0000000000430144
	// succ:  l0000000000430114 l0000000000430144
l0000000000430114:
	x1 = Mem0[x20 + 8:word64]
	v17 = Mem0[x1 + x19:byte]
	w1 = (word32) v17
	branch w1 == 0x00000000 l0000000000430104
	// succ:  l0000000000430120 l0000000000430104
l0000000000430120:
	w0 = w19
	close(x0)
	sp = sp + 0xFFFFFFFFFFFFFFF8
	x0 = Mem0[x20 + 8:word64]
	w1 = w19 + 0x00000001
	Mem0[x0 + x19:byte] = 0x00
	w0 = Mem0[x20:word32]
	x19 = x19 + 0x0000000000000001
	NZCV = cond(w1 - w0)
	branch Test(LT,NV) l0000000000430114
	// succ:  l0000000000430144 l0000000000430114
l0000000000430144:
	v14 = sp + 16
	x19 = Mem0[v14:word64]
	v14 = v14 + 8
	x20 = Mem0[v14:word64]
	x29 = Mem0[sp:word64]
	sp = sp + 8
	x30 = Mem0[sp:word64]
	sp = sp + 32
	return
	// succ:  close_fd_bitmap_exit
close_fd_bitmap_exit:


// fn0000000000430150
// Return size: 0
void fn0000000000430150()
fn0000000000430150_entry:
	// succ:  l0000000000430150
l0000000000430150:
	sp = fp
	sp = sp + -32
	Mem0[sp:word64] = x29
	sp = sp + 8
	Mem0[sp:word64] = x30
	x29 = x31 + 0x0000000000000000
	branch (w0 & 0x00000000) == 0x00000000 l0000000000430168
	// succ:  l000000000043015C l0000000000430168
l000000000043015C:
	Mem0[x29 + 16:word64] = x1
	close(x0)
	sp = sp + 0xFFFFFFFFFFFFFFF8
	x1 = Mem0[x29 + 16:word64]
	// succ:  l0000000000430168
l0000000000430168:
	branch (w1 & 0x00000000) == 0x00000000 l0000000000430178
	// succ:  l000000000043016C l0000000000430178
l000000000043016C:
	x29 = Mem0[sp:word64]
	sp = sp + 8
	x30 = Mem0[sp:word64]
	sp = sp + 32
	w0 = w1
	close(x0)
	return
	// succ:  fn0000000000430150_exit
l0000000000430178:
	x29 = Mem0[sp:word64]
	sp = sp + 8
	x30 = Mem0[sp:word64]
	sp = sp + 32
	return
	// succ:  fn0000000000430150_exit
fn0000000000430150_exit:


// fn00000000004301D0
// Return size: 0
void fn00000000004301D0()
fn00000000004301D0_entry:
	// succ:  l00000000004301D0
l00000000004301D0:
	sp = fp
	sp = sp + -32
	Mem0[sp:word64] = x29
	sp = sp + 8
	Mem0[sp:word64] = x30
	x29 = x31 + 0x0000000000000000
	v8 = sp + 16
	Mem0[v8:word64] = x19
	v8 = v8 + 8
	Mem0[v8:word64] = x20
	w19 = w1
	x1 = 0x00000000004AC000
	w20 = w0
	x1 = x1 + 0x0000000000000578
	w2 = 0x00000005
	x0 = 0x0000000000000000
	dcgettext(x0, x1, x2)
	sp = sp + 0xFFFFFFFFFFFFFFF8
	w1 = w20
	w2 = w19
	v17 = sp + 16
	x19 = Mem0[v17:word64]
	v17 = v17 + 8
	x20 = Mem0[v17:word64]
	x29 = Mem0[sp:word64]
	sp = sp + 8
	x30 = Mem0[sp:word64]
	sp = sp + 32
	// succ:  l0000000000430208_thunk_sys_error
l0000000000430208_thunk_sys_error:
	call sys_error (retsize: 0;)
	return
	// succ:  fn00000000004301D0_exit
fn00000000004301D0_exit:


// fn000000000043020C
// Return size: 0
void fn000000000043020C()
fn000000000043020C_entry:
	// succ:  l000000000043020C
l000000000043020C:
	sp = fp
	sp = sp + -16
	Mem0[sp:word64] = x29
	sp = sp + 8
	Mem0[sp:word64] = x30
	x29 = x31 + 0x0000000000000000
	x1 = x0
	branch x0 == 0x0000000000000000 l0000000000430240
	// succ:  l000000000043021C l0000000000430240
l000000000043021C:
	x0 = 0x00000000004AB000
	w2 = 0x00000000
	x0 = x0 + 0xFFFFFFFFFFFFFD88
	call bind_variable (retsize: 0;)
	w1 = Mem0[x0 + 40:word32]
	w1 = w1 & 0xFFFFFFFE
	Mem0[x0 + 40:word32] = w1
	x29 = Mem0[sp:word64]
	sp = sp + 8
	x30 = Mem0[sp:word64]
	sp = sp + 16
	return
	// succ:  fn000000000043020C_exit
l0000000000430240:
	x1 = 0x00000000004AC000
	x1 = x1 + 0x0000000000000460
	goto l000000000043021C
	// succ:  l000000000043021C
fn000000000043020C_exit:


// fn000000000043024C
// Return size: 0
void fn000000000043024C()
fn000000000043024C_entry:
	// succ:  l000000000043024C
l000000000043024C:
	sp = fp
	sp = sp + -64
	Mem0[sp:word64] = x29
	sp = sp + 8
	Mem0[sp:word64] = x30
	x29 = x31 + 0x0000000000000000
	v8 = sp + 16
	Mem0[v8:word64] = x19
	v8 = v8 + 8
	Mem0[v8:word64] = x20
	v11 = sp + 32
	Mem0[v11:word64] = x21
	v11 = v11 + 8
	Mem0[v11:word64] = x22
	Mem0[sp + 48:word64] = x23
	x20 = x1
	call expand_words_no_vars (retsize: 0;)
	x19 = x0
	branch x0 == 0x0000000000000000 l0000000000430350
	// succ:  l0000000000430270 l0000000000430350
l0000000000430270:
	x1 = 0x00000000004DF000
	w1 = Mem0[x1 + 3744:word32]
	branch w1 != 0x00000000 l0000000000430348
	// succ:  l000000000043027C l0000000000430348
l000000000043027C:
	x2 = 0x00000000004AC000
	x2 = x2 + 0x0000000000000398
	x1 = 0x00000000004E3000
	x0 = x19
	Mem0[x1 + 1192:word64] = x2
	x1 = 0x00000000004DF000
	Mem0[x1 + 2900:word32] = 0x00000000
	call print_arith_command (retsize: 0;)
	w0 = 0x00000041
	call signal_in_progress (retsize: 0;)
	branch w0 != 0x00000000 l00000000004302EC
	// succ:  l00000000004302A8 l00000000004302EC
l00000000004302A8:
	x21 = 0x00000000004E3000
	x0 = Mem0[x21 + 720:word64]
	x23 = 0x00000000004AC000
	branch x0 == 0x0000000000000000 l00000000004302C4
	// succ:  l00000000004302B8 l00000000004302C4
l00000000004302B8:
	x1 = x23 + 0x0000000000000560
	w2 = 0x00000A1B
	call sh_xfree (retsize: 0;)
	// succ:  l00000000004302C4
l00000000004302C4:
	x22 = 0x00000000004DF000
	x0 = Mem0[x22 + 2888:word64]
	strlen(x0)
	sp = sp + 0xFFFFFFFFFFFFFFF8
	x1 = x23 + 0x0000000000000560
	w2 = 0x00000A1C
	x0 = x0 + 0x0000000000000001
	call sh_xmalloc (retsize: 0;)
	x1 = Mem0[x22 + 2888:word64]
	strcpy(x0, x1)
	sp = sp + 0xFFFFFFFFFFFFFFF8
	Mem0[x21 + 720:word64] = x0
	// succ:  l00000000004302EC
l00000000004302EC:
	call run_debug_trap (retsize: 0;)
	x1 = 0x00000000004DE000
	w1 = Mem0[x1 + 1844:word32]
	branch w1 == 0x00000000 l0000000000430300
	// succ:  l00000000004302FC l0000000000430300
l00000000004302FC:
	branch w0 != 0x00000000 l0000000000430334
	// succ:  l0000000000430300 l0000000000430334
l0000000000430300:
	x0 = Mem0[x19 + 8:word64]
	x1 = x20
	x0 = Mem0[x0:word64]
	call evalexp (retsize: 0;)
	x20 = x0
	// succ:  l0000000000430314
l0000000000430314:
	x0 = x19
	call dispose_words (retsize: 0;)
	// succ:  l000000000043031C
l000000000043031C:
	x0 = x20
	v21 = sp + 32
	x21 = Mem0[v21:word64]
	v21 = v21 + 8
	x22 = Mem0[v21:word64]
	v22 = sp + 16
	x19 = Mem0[v22:word64]
	v22 = v22 + 8
	x20 = Mem0[v22:word64]
	x23 = Mem0[sp + 48:word64]
	x29 = Mem0[sp:word64]
	sp = sp + 8
	x30 = Mem0[sp:word64]
	sp = sp + 64
	return
	// succ:  fn000000000043024C_exit
l0000000000430334:
	branch x20 == 0x0000000000000000 l0000000000430314
	// succ:  l0000000000430338 l0000000000430314
l0000000000430338:
	w0 = 0x00000001
	Mem0[x20:word32] = w0
	x20 = 0x0000000000000000
	goto l0000000000430314
	// succ:  l0000000000430314
l0000000000430348:
	call xtrace_print_arith_cmd (retsize: 0;)
	goto l000000000043027C
	// succ:  l000000000043027C
l0000000000430350:
	branch x20 == 0x0000000000000000 l000000000043031C
	// succ:  l0000000000430354 l000000000043031C
l0000000000430354:
	w0 = 0x00000001
	Mem0[x20:word32] = w0
	x20 = x19
	x0 = x20
	v19 = sp + 32
	x21 = Mem0[v19:word64]
	v19 = v19 + 8
	x22 = Mem0[v19:word64]
	v20 = sp + 16
	x19 = Mem0[v20:word64]
	v20 = v20 + 8
	x20 = Mem0[v20:word64]
	x23 = Mem0[sp + 48:word64]
	x29 = Mem0[sp:word64]
	sp = sp + 8
	x30 = Mem0[sp:word64]
	sp = sp + 64
	return
	// succ:  fn000000000043024C_exit
fn000000000043024C_exit:


// fn0000000000430378
// Return size: 0
void fn0000000000430378()
fn0000000000430378_entry:
	// succ:  l0000000000430378
l0000000000430378:
	sp = fp
	sp = sp + -64
	Mem0[sp:word64] = x29
	sp = sp + 8
	Mem0[sp:word64] = x30
	x29 = x31 + 0x0000000000000000
	v8 = sp + 32
	Mem0[v8:word64] = x21
	v8 = v8 + 8
	Mem0[v8:word64] = x22
	x21 = x0
	x0 = 0x0000000000000000
	x1 = x21
	x2 = x0
	v14 = sp + 16
	Mem0[v14:word64] = x19
	v14 = v14 + 8
	Mem0[v14:word64] = x20
	Mem0[sp + 48:word64] = x23
	mbstowcs(x0, x1, x2)
	sp = sp + 0xFFFFFFFFFFFFFFF8
	x31 = x0 + 0x0000000000000001
	NZCV = cond(x31)
	x19 = x0
	branch Test(EQ,Z) l0000000000430410
	// succ:  l00000000004303AC l0000000000430410
l00000000004303AC:
	x23 = x0 + 0x0000000000000001
l00000000004303B4:
	x22 = 0x00000000004AC000
	x22 = x22 + 0x0000000000000560
	x1 = x22
	w2 = 0x00000AA9
	call sh_xmalloc (retsize: 0;)
	x2 = x23
	x1 = x21
	x20 = x0
	mbstowcs(x0, x1, x2)
	sp = sp + 0xFFFFFFFFFFFFFFF8
	x1 = x19
	x0 = x20
	wcswidth(x0, x1)
	sp = sp + 0xFFFFFFFFFFFFFFF8
	w19 = w0
	x1 = x22
	x0 = x20
	w2 = 0x00000AAC
	call sh_xfree (retsize: 0;)
	w0 = w19
	v21 = sp + 32
	x21 = Mem0[v21:word64]
	v21 = v21 + 8
	x22 = Mem0[v21:word64]
	v22 = sp + 16
	x19 = Mem0[v22:word64]
	v22 = v22 + 8
	x20 = Mem0[v22:word64]
	x23 = Mem0[sp + 48:word64]
	x29 = Mem0[sp:word64]
	sp = sp + 8
	x30 = Mem0[sp:word64]
	sp = sp + 64
	return
	// succ:  fn0000000000430378_exit
l0000000000430410:
	x0 = 0x0000000000000004
	x23 = 0x0000000000000001
	x19 = 0x0000000000000000
	goto l00000000004303B4
	// succ:  l00000000004303B4
fn0000000000430378_exit:


// fn0000000000430434
// Return size: 0
void fn0000000000430434()
fn0000000000430434_entry:
	// succ:  l0000000000430434
l0000000000430434:
	sp = fp
	sp = sp + -80
	Mem0[sp:word64] = x29
	sp = sp + 8
	Mem0[sp:word64] = x30
	x29 = x31 + 0x0000000000000000
	v8 = sp + 16
	Mem0[v8:word64] = x19
	v8 = v8 + 8
	Mem0[v8:word64] = x20
	x19 = x0
	w0 = Mem0[x0:word32]
	v13 = sp + 48
	Mem0[v13:word64] = x23
	v13 = v13 + 8
	Mem0[v13:word64] = x24
	v16 = sp + 32
	Mem0[v16:word64] = x21
	v16 = v16 + 8
	Mem0[v16:word64] = x22
	v19 = sp + 64
	Mem0[v19:word64] = x25
	v19 = v19 + 8
	Mem0[v19:word64] = x26
	w24 = w0 & 0x00000004
	w20 = w0 & 0x00000008
	branch (w0 & 0x00000008) == 0x00000000 l0000000000430488
	// succ:  l0000000000430460 l0000000000430488
l0000000000430460:
	x0 = Mem0[x19 + 24:word64]
	branch x0 == 0x0000000000000000 l0000000000430474
	// succ:  l0000000000430468 l0000000000430474
l0000000000430468:
	w1 = Mem0[x0:word32]
	w1 = w1 | 0x00000008
	Mem0[x0:word32] = w1
	// succ:  l0000000000430474
l0000000000430474:
	x0 = Mem0[x19 + 32:word64]
	branch x0 == 0x0000000000000000 l0000000000430488
	// succ:  l000000000043047C l0000000000430488
l000000000043047C:
	w1 = Mem0[x0:word32]
	w1 = w1 | 0x00000008
	Mem0[x0:word32] = w1
	// succ:  l0000000000430488
l0000000000430488:
	w2 = Mem0[x19 + 8:word32]
	w31 = w2 - 0x00000006
	NZCV = cond(w31)
	branch Test(EQ,Z) l0000000000430730
	// succ:  l0000000000430494 l0000000000430730
l0000000000430494:
	w31 = w2 - 0x00000002
	NZCV = cond(w31)
	branch Test(EQ,Z) l0000000000430768
	// succ:  l000000000043049C l0000000000430768
l000000000043049C:
	w31 = w2 - 0x00000001
	NZCV = cond(w31)
	branch Test(EQ,Z) l0000000000430788
	// succ:  l00000000004304A4 l0000000000430788
l00000000004304A4:
	w31 = w2 - 0x00000003
	NZCV = cond(w31)
	branch Test(EQ,Z) l0000000000430660
	// succ:  l00000000004304AC l0000000000430660
l00000000004304AC:
	w31 = w2 - 0x00000004
	NZCV = cond(w31)
	branch Test(NE,Z) l00000000004307D8
	// succ:  l00000000004304B4 l00000000004307D8
l00000000004304B4:
	x0 = Mem0[x19 + 16:word64]
	x0 = Mem0[x0:word64]
	v27 = Mem0[x0 + 1:byte]
	w2 = (word32) v27
	w31 = w2 - 0x0000003D
	NZCV = cond(w31)
	branch Test(EQ,Z) l0000000000430740
	// succ:  l00000000004304C8 l0000000000430740
l00000000004304C8:
	v28 = Mem0[x0:byte]
	w1 = (word32) v28
	w26 = 0x00000000
	w31 = w1 - 0x0000003D
	NZCV = cond(w31)
	branch Test(EQ,Z) l0000000000430704
	// succ:  l00000000004304D8 l0000000000430704
l00000000004304D8:
	w25 = 0x00000000
	// succ:  l00000000004304DC
l00000000004304DC:
	branch w20 == 0x00000000 l0000000000430648
	// succ:  l00000000004304E0 l0000000000430648
l00000000004304E0:
	x21 = 0x00000000004DF000
	x21 = x21 + 0xFFFFFFFFFFFFFBE8
	x0 = Mem0[x19 + 24:word64]
	w1 = Mem0[x21:word32]
	x0 = Mem0[x0 + 16:word64]
	w2 = w1 + 0x00000001
	w1 = 0x00000000
	Mem0[x21:word32] = w2
	call cond_expand_word (retsize: 0;)
	x22 = x0
	w0 = Mem0[x21:word32]
	w0 = w0 - 0x00000001
	Mem0[x21:word32] = w0
	// succ:  l0000000000430514
l0000000000430514:
	x23 = 0x00000000004AC000
	branch x22 == 0x0000000000000000 l0000000000430728
	// succ:  l000000000043051C l0000000000430728
l000000000043051C:
	branch w20 == 0x00000000 l0000000000430534
	// succ:  l0000000000430520 l0000000000430534
l0000000000430520:
	x0 = 0x00000000004DF000
	x0 = x0 + 0xFFFFFFFFFFFFFBE8
	w1 = Mem0[x0:word32]
	w1 = w1 + 0x00000001
	Mem0[x0:word32] = w1
	// succ:  l0000000000430534
l0000000000430534:
	x0 = Mem0[x19 + 32:word64]
	w1 = w26
	x0 = Mem0[x0 + 16:word64]
	branch w25 == 0x00000000 l0000000000430558
	// succ:  l0000000000430544 l0000000000430558
l0000000000430544:
	x2 = 0x00000000004D7000
	w2 = Mem0[x2 + 376:word32]
	w31 = w2 - 0x00000020
	NZCV = cond(w31)
	w2 = 0x00000002
l0000000000430558:
	call cond_expand_word (retsize: 0;)
	x21 = x0
	branch w20 == 0x00000000 l0000000000430578
	// succ:  l0000000000430564 l0000000000430578
l0000000000430564:
	x0 = 0x00000000004DF000
	x0 = x0 + 0xFFFFFFFFFFFFFBE8
	w1 = Mem0[x0:word32]
	w1 = w1 - 0x00000001
	Mem0[x0:word32] = w1
	// succ:  l0000000000430578
l0000000000430578:
	x0 = 0x00000000004DF000
	w1 = Mem0[x0 + 3744:word32]
	x31 = x21 - x31
	NZCV = cond(x31)
	x0 = x23 + 0x0000000000000460
l00000000004305E8:
	branch w24 == 0x00000000 l00000000004305F4
	// succ:  l00000000004305EC l00000000004305F4
l00000000004305EC:
	NZCV = cond(w20 - w31)
	w20 = (word32) Test(EQ,Z)
	// succ:  l00000000004305F4
l00000000004305F4:
	w0 = w20
	v33 = sp + 32
	x21 = Mem0[v33:word64]
	v33 = v33 + 8
	x22 = Mem0[v33:word64]
	v34 = sp + 16
	x19 = Mem0[v34:word64]
	v34 = v34 + 8
	x20 = Mem0[v34:word64]
	v35 = sp + 48
	x23 = Mem0[v35:word64]
	v35 = v35 + 8
	x24 = Mem0[v35:word64]
	v36 = sp + 64
	x25 = Mem0[v36:word64]
	v36 = v36 + 8
	x26 = Mem0[v36:word64]
	x29 = Mem0[sp:word64]
	sp = sp + 8
	x30 = Mem0[sp:word64]
	sp = sp + 80
	return
	// succ:  fn0000000000430434_exit
l0000000000430648:
	x0 = Mem0[x19 + 24:word64]
	w1 = w20
	x0 = Mem0[x0 + 16:word64]
	call cond_expand_word (retsize: 0;)
	x22 = x0
	goto l0000000000430514
	// succ:  l0000000000430514
l0000000000430660:
	branch w20 == 0x00000000 l000000000043079C
	// succ:  l0000000000430664 l000000000043079C
l0000000000430664:
	x20 = 0x00000000004DF000
	x20 = x20 + 0xFFFFFFFFFFFFFBE8
	x0 = Mem0[x19 + 24:word64]
	w1 = Mem0[x20:word32]
	x0 = Mem0[x0 + 16:word64]
	w2 = w1 + 0x00000001
	w1 = 0x00000000
	Mem0[x20:word32] = w2
	call cond_expand_word (retsize: 0;)
	x21 = x0
	w0 = Mem0[x20:word32]
	w0 = w0 - 0x00000001
	Mem0[x20:word32] = w0
	// succ:  l0000000000430698
l0000000000430698:
	x23 = 0x00000000004AC000
	branch x21 == 0x0000000000000000 l00000000004307D0
	// succ:  l00000000004306A0 l00000000004307D0
l00000000004306A0:
	x0 = 0x00000000004DF000
	w0 = Mem0[x0 + 3744:word32]
	branch w0 != 0x00000000 l00000000004307B4
	// succ:  l00000000004306AC l00000000004307B4
l00000000004306AC:
	x0 = Mem0[x19 + 16:word64]
	x1 = x21
	x0 = Mem0[x0:word64]
	x23 = x23 + 0x0000000000000460
	call unary_test (retsize: 0;)
	NZCV = cond(w0 - w31)
	w20 = (word32) Test(EQ,Z)
	x31 = x21 - x23
	NZCV = cond(x31)
	branch Test(EQ,Z) l00000000004305E8
	// succ:  l00000000004306D0 l00000000004305E8
l00000000004306D0:
	x1 = 0x00000000004AC000
	x0 = x21
	x1 = x1 + 0x0000000000000560
	w2 = 0x00000D30
	call sh_xfree (retsize: 0;)
	goto l00000000004305E8
	// succ:  l00000000004305E8
l0000000000430704:
	NZCV = cond(w2 - w26)
	w26 = (word32) Test(EQ,Z)
	w31 = w2 - 0x0000007E
	NZCV = cond(w31)
	branch Test(NE,Z) l00000000004304D8
	// succ:  l0000000000430714 l00000000004304D8
l0000000000430714:
	v31 = Mem0[x0 + 2:byte]
	w0 = (word32) v31
	w25 = 0x00000001
	branch w0 == 0x00000000 l00000000004304DC
	// succ:  l0000000000430720 l00000000004304DC
l0000000000430720:
	w25 = 0x00000000
	goto l00000000004304DC
	// succ:  l00000000004304DC
l0000000000430728:
	x22 = x23 + 0x0000000000000460
	goto l000000000043051C
	// succ:  l000000000043051C
l0000000000430730:
	x0 = Mem0[x19 + 24:word64]
	call fn0000000000430434 (retsize: 0;)
	w20 = w0
	goto l00000000004305E8
	// succ:  l00000000004305E8
l0000000000430740:
	v37 = Mem0[x0 + 2:byte]
	w1 = (word32) v37
	branch w1 != 0x00000000 l00000000004304C8
	// succ:  l0000000000430748 l00000000004304C8
l0000000000430748:
	v38 = Mem0[x0:byte]
	w0 = (word32) v38
	w25 = 0x00000000
	w31 = w0 - 0x0000003D
	NZCV = cond(w31)
	w26 = (word32) Test(EQ,Z)
	w31 = w0 - 0x00000021
	NZCV = cond(w31)
	w0 = (word32) Test(EQ,Z)
	w26 = w26 | w0
	goto l00000000004304DC
	// succ:  l00000000004304DC
l0000000000430768:
	x0 = Mem0[x19 + 24:word64]
	call fn0000000000430434 (retsize: 0;)
	w20 = w0
	branch w0 == 0x00000000 l00000000004305E8
	// succ:  l0000000000430778 l00000000004305E8
l0000000000430778:
	x0 = Mem0[x19 + 32:word64]
	call fn0000000000430434 (retsize: 0;)
	w20 = w0
	goto l00000000004305E8
	// succ:  l00000000004305E8
l0000000000430788:
	x0 = Mem0[x19 + 24:word64]
	call fn0000000000430434 (retsize: 0;)
	w20 = w0
	branch w0 != 0x00000000 l00000000004305E8
	// succ:  l0000000000430798 l00000000004305E8
l0000000000430798:
	goto l0000000000430778
	// succ:  l0000000000430778
l000000000043079C:
	x0 = Mem0[x19 + 24:word64]
	w1 = w20
	x0 = Mem0[x0 + 16:word64]
	call cond_expand_word (retsize: 0;)
	x21 = x0
	goto l0000000000430698
	// succ:  l0000000000430698
l00000000004307B4:
	w0 = Mem0[x19 + 8:word32]
	x2 = Mem0[x19 + 16:word64]
	w1 = w24
	x3 = x21
	x4 = 0x0000000000000000
	call xtrace_print_cond_term (retsize: 0;)
	goto l00000000004306AC
	// succ:  l00000000004306AC
l00000000004307D0:
	x21 = x23 + 0x0000000000000460
	goto l00000000004306A0
	// succ:  l00000000004306A0
l00000000004307D8:
	x0 = 0x00000000004AC000
	x0 = x0 + 0x0000000000000598
	w1 = 0x00000001
	w3 = 0x00000000
	call command_error (retsize: 0;)
	w0 = 0x00000002
	call jump_to_top_level (retsize: 0;)
	// succ:  l00000000004307F0_thunk_fn00000000004307F4
l00000000004307F0_thunk_fn00000000004307F4:
	call fn00000000004307F4 (retsize: 0;)
	return
	// succ:  fn0000000000430434_exit
fn0000000000430434_exit:


// fn00000000004307F4
// Return size: 0
void fn00000000004307F4()
fn00000000004307F4_entry:
	// succ:  l00000000004307F4
l00000000004307F4:
	sp = fp
	sp = sp + -32
	Mem0[sp:word64] = x29
	sp = sp + 8
	Mem0[sp:word64] = x30
	x29 = x31 + 0x0000000000000000
	v8 = sp + 16
	Mem0[v8:word64] = x19
	v8 = v8 + 8
	Mem0[v8:word64] = x20
	w31 = w0 + 0x00000001
	NZCV = cond(w31)
	w20 = w0
	w19 = w1
	branch Test(EQ,Z) l000000000043082C
	// succ:  l0000000000430810 l000000000043082C
l0000000000430810:
	w1 = 0x00000000
	call dup2 (retsize: 0;)
	branch (w0 & 0x00000000) == 0x00000000 l0000000000430898
	// succ:  l000000000043081C l0000000000430898
l000000000043081C:
	NZCV = cond(w20 - w31)
	branch Test(LE,ZCV) l000000000043082C
	// succ:  l0000000000430824 l000000000043082C
l0000000000430824:
	w0 = w20
	close(x0)
	sp = sp + 0xFFFFFFFFFFFFFFF8
	// succ:  l000000000043082C
l000000000043082C:
	w31 = w19 + 0x00000001
	NZCV = cond(w31)
	branch Test(EQ,Z) l0000000000430858
	// succ:  l0000000000430834 l0000000000430858
l0000000000430834:
	w31 = w19 + 0x00000002
	NZCV = cond(w31)
	branch Test(EQ,Z) l0000000000430864
	// succ:  l000000000043083C l0000000000430864
l000000000043083C:
	w1 = 0x00000001
	w0 = w19
	call dup2 (retsize: 0;)
	branch (w0 & 0x00000000) == 0x00000000 l00000000004308A8
	// succ:  l000000000043084C l00000000004308A8
l000000000043084C:
	w31 = w19 - 0x00000001
	NZCV = cond(w31)
	branch Test(GT,NZV) l0000000000430888
	// succ:  l0000000000430854 l0000000000430888
l0000000000430854:
	branch w19 == 0x00000000 l0000000000430888
	// succ:  l0000000000430858 l0000000000430888
l0000000000430858:
	v19 = sp + 16
	x19 = Mem0[v19:word64]
	v19 = v19 + 8
	x20 = Mem0[v19:word64]
	x29 = Mem0[sp:word64]
	sp = sp + 8
	x30 = Mem0[sp:word64]
	sp = sp + 32
	return
	// succ:  fn00000000004307F4_exit
l0000000000430864:
	w1 = 0x00000002
	w0 = 0x00000001
	call dup2 (retsize: 0;)
	branch (w0 & 0x00000000) == 0x00000000 l0000000000430858
	// succ:  l0000000000430874 l0000000000430858
l0000000000430874:
	v21 = sp + 16
	x19 = Mem0[v21:word64]
	v21 = v21 + 8
	x20 = Mem0[v21:word64]
	x29 = Mem0[sp:word64]
	sp = sp + 8
	x30 = Mem0[sp:word64]
	sp = sp + 32
	w0 = 0x00000001
	w1 = 0x00000002
	// succ:  l0000000000430884_thunk_fn00000000004301D0
l0000000000430884_thunk_fn00000000004301D0:
	call fn00000000004301D0 (retsize: 0;)
	return
	// succ:  fn00000000004307F4_exit
l0000000000430888:
	w0 = w19
	v20 = sp + 16
	x19 = Mem0[v20:word64]
	v20 = v20 + 8
	x20 = Mem0[v20:word64]
	x29 = Mem0[sp:word64]
	sp = sp + 8
	x30 = Mem0[sp:word64]
	sp = sp + 32
	close(x0)
	return
	// succ:  fn00000000004307F4_exit
l0000000000430898:
	w0 = w20
	w1 = 0x00000000
	call fn00000000004301D0 (retsize: 0;)
	goto l000000000043081C
	// succ:  l000000000043081C
l00000000004308A8:
	w0 = w19
	w1 = 0x00000001
	call fn00000000004301D0 (retsize: 0;)
	goto l000000000043084C
	// succ:  l000000000043084C
fn00000000004307F4_exit:


// fn00000000004308B8
// Return size: 0
void fn00000000004308B8()
fn00000000004308B8_entry:
	// succ:  l00000000004308B8
l00000000004308B8:
	sp = fp
	sp = sp + -32
	Mem0[sp:word64] = x29
	sp = sp + 8
	Mem0[sp:word64] = x30
	x29 = x31 + 0x0000000000000000
	x0 = 0x00000000004AC000
	x0 = x0 + 0x00000000000005B0
	w1 = 0x00000000
	Mem0[sp + 16:word64] = x19
	open(x0, x1)
	sp = sp + 0xFFFFFFFFFFFFFFF8
	NZCV = cond(w0 - w31)
	w19 = w0
	branch Test(GT,NZV) l00000000004308F0
	// succ:  l00000000004308E0 l00000000004308F0
l00000000004308E0:
	branch Test(NE,Z) l0000000000430908
	// succ:  l00000000004308E4 l0000000000430908
l00000000004308E4:
	x19 = Mem0[sp + 16:word64]
	x29 = Mem0[sp:word64]
	sp = sp + 8
	x30 = Mem0[sp:word64]
	sp = sp + 32
	return
	// succ:  fn00000000004308B8_exit
l00000000004308F0:
	w1 = 0x00000000
	call dup2 (retsize: 0;)
	w0 = w19
	x19 = Mem0[sp + 16:word64]
	x29 = Mem0[sp:word64]
	sp = sp + 8
	x30 = Mem0[sp:word64]
	sp = sp + 32
	close(x0)
	return
	// succ:  fn00000000004308B8_exit
l0000000000430908:
	x1 = 0x00000000004AC000
	x1 = x1 + 0x00000000000005C0
	w2 = 0x00000005
	x0 = 0x0000000000000000
	dcgettext(x0, x1, x2)
	sp = sp + 0xFFFFFFFFFFFFFFF8
	x19 = x0
	__errno_location()
	sp = sp + 0xFFFFFFFFFFFFFFF8
	w0 = Mem0[x0:word32]
	strerror(x0)
	sp = sp + 0xFFFFFFFFFFFFFFF8
	x1 = x0
	x0 = x19
	x19 = Mem0[sp + 16:word64]
	x29 = Mem0[sp:word64]
	sp = sp + 8
	x30 = Mem0[sp:word64]
	sp = sp + 32
	// succ:  l000000000043093C_thunk_internal_error
l000000000043093C_thunk_internal_error:
	call internal_error (retsize: 0;)
	return
	// succ:  fn00000000004308B8_exit
fn00000000004308B8_exit:


// fn0000000000430940
// Return size: 0
void fn0000000000430940()
fn0000000000430940_entry:
	// succ:  l0000000000430940
l0000000000430940:
	sp = fp
	sp = sp + -112
	Mem0[sp:word64] = x29
	sp = sp + 8
	Mem0[sp:word64] = x30
	x29 = x31 + 0x0000000000000000
	v8 = sp + 16
	Mem0[v8:word64] = x19
	v8 = v8 + 8
	Mem0[v8:word64] = x20
	v11 = sp + 80
	Mem0[v11:word64] = x27
	v11 = v11 + 8
	Mem0[v11:word64] = x28
	v14 = sp + 32
	Mem0[v14:word64] = x21
	v14 = v14 + 8
	Mem0[v14:word64] = x22
	v17 = sp + 64
	Mem0[v17:word64] = x25
	v17 = v17 + 8
	Mem0[v17:word64] = x26
	x22 = 0x00000000004DF000
	v20 = sp + 48
	Mem0[v20:word64] = x23
	v20 = v20 + 8
	Mem0[v20:word64] = x24
	w20 = w3
	x19 = x0
	x25 = x1
	w28 = w2
	w27 = Mem0[x22 + 3708:word32]
	branch w3 != 0x00000000 l000000000043097C
	// succ:  l0000000000430978 l000000000043097C
l0000000000430978:
	branch (w28 & 0x00000008) == 0x00000000 l0000000000430AF8
	// succ:  l000000000043097C l0000000000430AF8
l000000000043097C:
	x21 = 0x0000000000000000
	w26 = w21
	x23 = 0x000000000046D000
	x24 = 0x0000000000479000
	// succ:  l000000000043098C
l000000000043098C:
	x24 = x24 + 0x000000000000036C
	x31 = x19 - x24
	NZCV = cond(x31)
	branch Test(EQ,Z) l0000000000430B44
	// succ:  l0000000000430998 l0000000000430B44
l0000000000430998:
	x0 = 0x0000000000470000
	x0 = x0 + 0xFFFFFFFFFFFFFA80
	x31 = x19 - x0
	NZCV = cond(x31)
	branch Test(EQ,Z) l0000000000430B44
	// succ:  l00000000004309A8 l0000000000430B44
l00000000004309A8:
	x0 = 0x0000000000478000
	x0 = x0 + 0x000000000000046C
	x31 = x19 - x0
	NZCV = cond(x31)
	branch Test(EQ,Z) l0000000000430B44
	// succ:  l00000000004309B8 l0000000000430B44
l00000000004309B8:
	w28 = 0x00000000
	// succ:  l00000000004309BC
l00000000004309BC:
	x24 = 0x00000000004DE000
	w0 = Mem0[x24 + 1716:word32]
	branch w0 == 0x00000000 l0000000000430A74
	// succ:  l00000000004309C8 l0000000000430A74
l00000000004309C8:
	branch w20 != 0x00000000 l00000000004309DC
	// succ:  l00000000004309CC l00000000004309DC
l00000000004309CC:
	x3 = 0x0000000000477000
	x0 = x3 + 0xFFFFFFFFFFFFF884
	x31 = x19 - x0
	NZCV = cond(x31)
	branch Test(EQ,Z) l0000000000430C4C
	// succ:  l00000000004309DC l0000000000430C4C
l00000000004309DC:
	x1 = 0x00000000004DF000
	x1 = x1 + 0xFFFFFFFFFFFFFBE8
	x23 = x23 + 0xFFFFFFFFFFFFFC64
	w0 = Mem0[x1 + 8:word32]
	w2 = Mem0[x1 + 4:word32]
	x31 = x19 - x23
	NZCV = cond(x31)
	w3 = (word32) Test(EQ,Z)
	w3 = w3 | w0
	w2 = w2 + 0x00000001
	x0 = Mem0[x25:word64]
	Mem0[x1 + 4:word32] = w2
	Mem0[x1 + 8:word32] = w3
	call x19 (retsize: 0;)
	w23 = w0
	// succ:  l0000000000430A14
l0000000000430A14:
	branch w28 != 0x00000000 l0000000000430AE4
	// succ:  l0000000000430A18 l0000000000430AE4
l0000000000430A18:
	branch w26 == 0x00000000 l0000000000430A54
	// succ:  l0000000000430A1C l0000000000430A54
l0000000000430A1C:
	w0 = Mem0[x22 + 3708:word32]
	w27 = w27 + w0
	Mem0[x22 + 3708:word32] = w27
	branch x21 == 0x0000000000000000 l0000000000430A48
	// succ:  l0000000000430A2C l0000000000430A48
l0000000000430A2C:
	x0 = x21
	call set_error_trap (retsize: 0;)
	x1 = 0x00000000004AC000
	x0 = x21
	x1 = x1 + 0x0000000000000560
	w2 = 0x0000101D
	call sh_xfree (retsize: 0;)
	// succ:  l0000000000430A48
l0000000000430A48:
	x0 = 0x00000000004AC000
	x0 = x0 + 0x00000000000005F8
	call discard_unwind_frame (retsize: 0;)
	// succ:  l0000000000430A54
l0000000000430A54:
	w0 = w23
	v37 = sp + 16
	x19 = Mem0[v37:word64]
	v37 = v37 + 8
	x20 = Mem0[v37:word64]
	v38 = sp + 32
	x21 = Mem0[v38:word64]
	v38 = v38 + 8
	x22 = Mem0[v38:word64]
	v39 = sp + 48
	x23 = Mem0[v39:word64]
	v39 = v39 + 8
	x24 = Mem0[v39:word64]
	v40 = sp + 64
	x25 = Mem0[v40:word64]
	v40 = v40 + 8
	x26 = Mem0[v40:word64]
	v41 = sp + 80
	x27 = Mem0[v41:word64]
	v41 = v41 + 8
	x28 = Mem0[v41:word64]
	x29 = Mem0[sp:word64]
	sp = sp + 8
	x30 = Mem0[sp:word64]
	sp = sp + 112
	return
	// succ:  fn0000000000430940_exit
l0000000000430A74:
	x2 = 0x00000000004DF000
	x2 = x2 + 0xFFFFFFFFFFFFFBE8
	x23 = x23 + 0xFFFFFFFFFFFFFC64
	w0 = Mem0[x2 + 8:word32]
	w1 = Mem0[x2 + 4:word32]
	x31 = x19 - x23
	NZCV = cond(x31)
	w3 = (word32) Test(EQ,Z)
	w3 = w3 | w0
	w1 = w1 + 0x00000001
	x0 = Mem0[x25:word64]
	Mem0[x2 + 4:word32] = w1
	Mem0[x2 + 8:word32] = w3
	call x19 (retsize: 0;)
	w23 = w0
	w0 = Mem0[x24 + 1716:word32]
	branch w0 == 0x00000000 l0000000000430A14
	// succ:  l0000000000430AB4 l0000000000430A14
l0000000000430AB4:
	branch w20 != 0x00000000 l0000000000430A18
	// succ:  l0000000000430AB8 l0000000000430A18
l0000000000430AB8:
	x0 = 0x0000000000477000
	x0 = x0 + 0xFFFFFFFFFFFFF884
	x31 = x19 - x0
	NZCV = cond(x31)
	branch Test(NE,Z) l0000000000430A14
	// succ:  l0000000000430AC8 l0000000000430A14
l0000000000430AC8:
	x2 = 0x00000000004DF000
	// succ:  l0000000000430ACC
l0000000000430ACC:
	x0 = Mem0[x2 + 3208:word64]
	branch x0 == 0x0000000000000000 l0000000000430A14
	// succ:  l0000000000430AD4 l0000000000430A14
l0000000000430AD4:
	x0 = 0x00000000004AC000
	x0 = x0 + 0x0000000000000618
	call discard_unwind_frame (retsize: 0;)
	branch w28 == 0x00000000 l0000000000430A18
	// succ:  l0000000000430AE4 l0000000000430A18
l0000000000430AE4:
	branch w20 != 0x00000000 l0000000000430A18
	// succ:  l0000000000430AE8 l0000000000430A18
l0000000000430AE8:
	x0 = 0x00000000004AC000
	x0 = x0 + 0x0000000000000608
	call run_unwind_frame (retsize: 0;)
	goto l0000000000430A18
	// succ:  l0000000000430A18
l0000000000430AF8:
	x0 = 0x0000000000470000
	x0 = x0 + 0xFFFFFFFFFFFFFA80
	x31 = x19 - x0
	NZCV = cond(x31)
	x23 = 0x000000000046D000
	x24 = 0x0000000000479000
	branch Test(EQ,Z) l0000000000430BA4
	// succ:  l0000000000430B10 l0000000000430BA4
l0000000000430B10:
	x0 = x23 + 0xFFFFFFFFFFFFFC64
	x31 = x19 - x0
	NZCV = cond(x31)
	x24 = 0x0000000000479000
	branch Test(EQ,Z) l0000000000430BA4
	// succ:  l0000000000430B20 l0000000000430BA4
l0000000000430B20:
	x0 = x24 + 0x000000000000036C
	x31 = x19 - x0
	NZCV = cond(x31)
	branch Test(EQ,Z) l0000000000430BA4
	// succ:  l0000000000430B2C l0000000000430BA4
l0000000000430B2C:
	x0 = 0x0000000000478000
	x0 = x0 + 0x000000000000046C
	x21 = 0x0000000000000000
	x31 = x19 - x0
	NZCV = cond(x31)
	w26 = w21
	branch Test(NE,Z) l00000000004309B8
	// succ:  l0000000000430B44 l00000000004309B8
l0000000000430B44:
	branch w20 != 0x00000000 l0000000000430B54
	// succ:  l0000000000430B48 l0000000000430B54
l0000000000430B48:
	x0 = 0x00000000004AC000
	x0 = x0 + 0x0000000000000608
	call begin_unwind_frame (retsize: 0;)
	// succ:  l0000000000430B54
l0000000000430B54:
	x2 = 0x00000000004DF000
	x1 = Mem0[x2 + 3208:word64]
	branch x1 == 0x0000000000000000 l0000000000430BD8
	// succ:  l0000000000430B60 l0000000000430BD8
l0000000000430B60:
	w0 = 0x00000008
	Mem0[x29 + 104:word64] = x2
	call push_scope (retsize: 0;)
	x2 = Mem0[x29 + 104:word64]
	branch w20 != 0x00000000 l0000000000430B98
	// succ:  l0000000000430B74 l0000000000430B98
l0000000000430B74:
	x1 = 0x0000000000000000
	branch (w28 & 0x00000800) == 0x00000000 l0000000000430B84
	// succ:  l0000000000430B7C l0000000000430B84
l0000000000430B7C:
	x1 = 0x00000000004AD000
	x1 = x1 + 0xFFFFFFFFFFFFFB18
	// succ:  l0000000000430B84
l0000000000430B84:
	x0 = 0x000000000043A000
	x0 = x0 + 0x00000000000007C4
	Mem0[x29 + 104:word64] = x2
	call add_unwind_protect (retsize: 0;)
	x2 = Mem0[x29 + 104:word64]
	// succ:  l0000000000430B98
l0000000000430B98:
	Mem0[x2 + 3208:word64] = 0x0000000000000000
	w28 = 0x00000001
	goto l00000000004309BC
	// succ:  l00000000004309BC
l0000000000430BA4:
	x0 = 0x00000000004AC000
	x0 = x0 + 0x00000000000005F8
	call begin_unwind_frame (retsize: 0;)
	x0 = x22 + 0xFFFFFFFFFFFFFE7C
	w1 = 0x00000004
	call unwind_protect_mem (retsize: 0;)
	w0 = 0x00000042
	call signal_is_trapped (retsize: 0;)
	branch w0 != 0x00000000 l0000000000430BE0
	// succ:  l0000000000430BC8 l0000000000430BE0
l0000000000430BC8:
	x21 = 0x0000000000000000
	// succ:  l0000000000430BCC
l0000000000430BCC:
	Mem0[x22 + 3708:word32] = 0x00000000
	w26 = 0x00000001
	goto l000000000043098C
	// succ:  l000000000043098C
l0000000000430BD8:
	w28 = 0x00000001
	goto l00000000004309BC
	// succ:  l00000000004309BC
l0000000000430BE0:
	w0 = 0x00000042
	call signal_is_ignored (retsize: 0;)
	branch w0 != 0x00000000 l0000000000430BC8
	// succ:  l0000000000430BEC l0000000000430BC8
l0000000000430BEC:
	x0 = 0x00000000004E3000
	x21 = Mem0[x0 + 2696:word64]
	branch x21 == 0x0000000000000000 l0000000000430BCC
	// succ:  l0000000000430BF8 l0000000000430BCC
l0000000000430BF8:
	x0 = x21
	strlen(x0)
	sp = sp + 0xFFFFFFFFFFFFFFF8
	x1 = 0x00000000004AC000
	w2 = 0x00000FE2
	x1 = x1 + 0x0000000000000560
	x0 = x0 + 0x0000000000000001
	call sh_xmalloc (retsize: 0;)
	x1 = x21
	strcpy(x0, x1)
	sp = sp + 0xFFFFFFFFFFFFFFF8
	x21 = x0
	x0 = 0x000000000046C000
	x1 = x21
	x0 = x0 + 0x00000000000004C4
	call add_unwind_protect (retsize: 0;)
	x0 = 0x0000000000455000
	x0 = x0 + 0x0000000000000440
	x1 = x21
	call add_unwind_protect (retsize: 0;)
	w0 = 0x00000042
	call restore_default_signal (retsize: 0;)
	goto l0000000000430BCC
	// succ:  l0000000000430BCC
l0000000000430C4C:
	x2 = 0x00000000004DF000
	x0 = Mem0[x2 + 3208:word64]
	branch x0 == 0x0000000000000000 l0000000000430C84
	// succ:  l0000000000430C58 l0000000000430C84
l0000000000430C58:
	x0 = 0x00000000004AC000
	x0 = x0 + 0x0000000000000618
	Mem0[x29 + 104:word64] = x2
	Mem0[x29 + 96:word64] = x3
	call begin_unwind_frame (retsize: 0;)
	x0 = 0x000000000043C000
	x0 = x0 + 0x0000000000000008
	x1 = 0x0000000000000000
	call add_unwind_protect (retsize: 0;)
	x2 = Mem0[x29 + 104:word64]
	x3 = Mem0[x29 + 96:word64]
	// succ:  l0000000000430C84
l0000000000430C84:
	x1 = 0x00000000004DF000
	x1 = x1 + 0xFFFFFFFFFFFFFBE8
	x3 = x3 + 0xFFFFFFFFFFFFF884
	x23 = x23 + 0xFFFFFFFFFFFFFC64
	w5 = Mem0[x1 + 4:word32]
	w4 = Mem0[x1 + 8:word32]
	x31 = x3 - x23
	NZCV = cond(x31)
	w3 = (word32) Test(EQ,Z)
	x0 = Mem0[x25:word64]
	w5 = w5 + 0x00000001
	w4 = w3 | w4
	Mem0[x1 + 4:word32] = w5
	Mem0[x1 + 8:word32] = w4
	Mem0[x29 + 104:word64] = x2
	call return_builtin (retsize: 0;)
	w23 = w0
	w0 = Mem0[x24 + 1716:word32]
	x2 = Mem0[x29 + 104:word64]
	branch w0 != 0x00000000 l0000000000430ACC
	// succ:  l0000000000430CD0 l0000000000430ACC
l0000000000430CD0:
	branch w28 == 0x00000000 l0000000000430A18
	// succ:  l0000000000430CD4 l0000000000430A18
l0000000000430CD4:
	goto l0000000000430AE4
	// succ:  l0000000000430AE4
fn0000000000430940_exit:


// fn0000000000430CD8
// Return size: 0
void fn0000000000430CD8()
fn0000000000430CD8_entry:
	// succ:  l0000000000430CD8
l0000000000430CD8:
	sp = fp
	sp = sp + -16
	Mem0[sp:word64] = x29
	sp = sp + 8
	Mem0[sp:word64] = x30
	x29 = x31 + 0x0000000000000000
	x1 = 0x0000000000000001
	w0 = 0x00000002
	call set_signal_handler (retsize: 0;)
	w0 = 0x00000002
	call set_signal_ignored (retsize: 0;)
	x1 = 0x0000000000000001
	w0 = 0x00000003
	call set_signal_handler (retsize: 0;)
	x29 = Mem0[sp:word64]
	sp = sp + 8
	x30 = Mem0[sp:word64]
	sp = sp + 16
	w0 = 0x00000003
	// succ:  l0000000000430D08_thunk_set_signal_ignored
l0000000000430D08_thunk_set_signal_ignored:
	call set_signal_ignored (retsize: 0;)
	return
	// succ:  fn0000000000430CD8_exit
fn0000000000430CD8_exit:


// new_fd_bitmap
// Return size: 0
void new_fd_bitmap()
new_fd_bitmap_entry:
	// succ:  l0000000000430D0C
l0000000000430D0C:
	sp = fp
	sp = sp + -48
	Mem0[sp:word64] = x29
	sp = sp + 8
	Mem0[sp:word64] = x30
	x29 = x31 + 0x0000000000000000
	Mem0[sp + 32:word64] = x21
	x21 = 0x00000000004AC000
	x21 = x21 + 0x0000000000000560
	v9 = sp + 16
	Mem0[v9:word64] = x19
	v9 = v9 + 8
	Mem0[v9:word64] = x20
	x1 = x21
new_fd_bitmap_exit:


// executing_line_number
// Return size: 0
void executing_line_number()
executing_line_number_entry:
	// succ:  l0000000000430D90
l0000000000430D90:
	sp = fp
	x0 = 0x00000000004DE000
	w0 = Mem0[x0 + 1796:word32]
	branch w0 == 0x00000000 l0000000000430DE0
	// succ:  l0000000000430D9C l0000000000430DE0
l0000000000430D9C:
	x0 = 0x00000000004DF000
	x1 = x0 + 0xFFFFFFFFFFFFFBE8
	w1 = Mem0[x1 + 12:word32]
	branch w1 != 0x00000000 l0000000000430DE0
	// succ:  l0000000000430DAC l0000000000430DE0
l0000000000430DAC:
	x1 = 0x00000000004DF000
	w1 = Mem0[x1 + 3168:word32]
	branch w1 != 0x00000000 l0000000000430DEC
	// succ:  l0000000000430DB8 l0000000000430DEC
l0000000000430DB8:
	x0 = x0 + 0xFFFFFFFFFFFFFBE8
	x0 = Mem0[x0 + 16:word64]
	branch x0 == 0x0000000000000000 l0000000000430DE0
	// succ:  l0000000000430DC4 l0000000000430DE0
l0000000000430DC4:
	w1 = Mem0[x0:word32]
	w31 = w1 - 0x0000000B
	NZCV = cond(w31)
	branch Test(EQ,Z) l0000000000430DFC
	// succ:  l0000000000430DD0 l0000000000430DFC
l0000000000430DD0:
	w31 = w1 - 0x0000000A
	NZCV = cond(w31)
	branch Test(EQ,Z) l0000000000430DFC
	// succ:  l0000000000430DD8 l0000000000430DFC
l0000000000430DD8:
	w31 = w1 - 0x0000000C
	NZCV = cond(w31)
	branch Test(EQ,Z) l0000000000430DFC
	// succ:  l0000000000430DE0 l0000000000430DFC
l0000000000430DE0:
	x0 = 0x00000000004DE000
	w0 = Mem0[x0 + 1928:word32]
	return
	// succ:  executing_line_number_exit
l0000000000430DEC:
	x1 = 0x00000000004DE000
	w1 = Mem0[x1 + 1712:word32]
	branch w1 != 0x00000000 l0000000000430DE0
	// succ:  l0000000000430DF8 l0000000000430DE0
l0000000000430DF8:
	goto l0000000000430DB8
	// succ:  l0000000000430DB8
l0000000000430DFC:
	x0 = Mem0[x0 + 24:word64]
	w0 = Mem0[x0 + 4:word32]
	return
	// succ:  executing_line_number_exit
executing_line_number_exit:


// dispose_exec_redirects
// Return size: 0
void dispose_exec_redirects()
dispose_exec_redirects_entry:
	// succ:  l0000000000430E08
l0000000000430E08:
	sp = fp
	sp = sp + -32
	Mem0[sp:word64] = x29
	sp = sp + 8
	Mem0[sp:word64] = x30
	x29 = x31 + 0x0000000000000000
	Mem0[sp + 16:word64] = x19
	x19 = 0x00000000004DF000
	x19 = x19 + 0xFFFFFFFFFFFFFBE8
	x0 = Mem0[x19 + 24:word64]
	branch x0 == 0x0000000000000000 l0000000000430E2C
	// succ:  l0000000000430E24 l0000000000430E2C
l0000000000430E24:
	call dispose_redirects (retsize: 0;)
	Mem0[x19 + 24:word64] = 0x0000000000000000
	// succ:  l0000000000430E2C
l0000000000430E2C:
	x19 = Mem0[sp + 16:word64]
	x29 = Mem0[sp:word64]
	sp = sp + 8
	x30 = Mem0[sp:word64]
	sp = sp + 32
	return
	// succ:  dispose_exec_redirects_exit
dispose_exec_redirects_exit:


// getcoprocbypid
// Return size: 0
void getcoprocbypid()
getcoprocbypid_entry:
	// succ:  l0000000000430E38
l0000000000430E38:
	sp = fp
	x1 = 0x00000000004D6000
	x1 = x1 + 0xFFFFFFFFFFFFFA28
	w2 = Mem0[x1 + 8:word32]
	NZCV = cond(w2 - w0)
getcoprocbypid_exit:


// getcoprocbyname
// Return size: 0
void getcoprocbyname()
getcoprocbyname_entry:
	// succ:  l0000000000430E50
l0000000000430E50:
	sp = fp
	sp = sp + -32
	Mem0[sp:word64] = x29
	sp = sp + 8
	Mem0[sp:word64] = x30
	x29 = x31 + 0x0000000000000000
	Mem0[sp + 16:word64] = x19
	x19 = 0x00000000004D6000
	x19 = x19 + 0xFFFFFFFFFFFFFA28
	x2 = Mem0[x19:word64]
	x1 = x0
	branch x2 == 0x0000000000000000 l0000000000430EAC
	// succ:  l0000000000430E70 l0000000000430EAC
l0000000000430E70:
	v11 = Mem0[x2:byte]
	w3 = (word32) v11
	v13 = Mem0[x0:byte]
	w0 = (word32) v13
	NZCV = cond(w3 - w0)
	branch Test(NE,Z) l0000000000430E9C
	// succ:  l0000000000430E80 l0000000000430E9C
l0000000000430E80:
	x0 = x2
	strcmp(x0, x1)
	sp = sp + 0xFFFFFFFFFFFFFFF8
	NZCV = cond(w0 - w31)
l0000000000430E90:
	x19 = Mem0[sp + 16:word64]
	x29 = Mem0[sp:word64]
	sp = sp + 8
	x30 = Mem0[sp:word64]
	sp = sp + 32
	return
	// succ:  getcoprocbyname_exit
l0000000000430E9C:
	x0 = 0x0000000000000000
	x19 = Mem0[sp + 16:word64]
	x29 = Mem0[sp:word64]
	sp = sp + 8
	x30 = Mem0[sp:word64]
	sp = sp + 32
	return
	// succ:  getcoprocbyname_exit
l0000000000430EAC:
	x0 = x2
	goto l0000000000430E90
	// succ:  l0000000000430E90
getcoprocbyname_exit:


// coproc_init
// Return size: 0
void coproc_init()
coproc_init_entry:
	// succ:  l0000000000430EB4
l0000000000430EB4:
	sp = fp
	w1 = 0xFFFFFFFF
	Mem0[x0:word64] = 0x0000000000000000
	Mem0[x0 + 8:word32] = w1
	Mem0[x0 + 16:word32] = w1
	Mem0[x0 + 12:word32] = w1
	Mem0[x0 + 24:word32] = w1
	Mem0[x0 + 20:word32] = w1
	Mem0[x0 + 32:word32] = 0x00000000
	Mem0[x0 + 28:word32] = 0x00000000
	return
	// succ:  coproc_init_exit
coproc_init_exit:


// coproc_alloc
// Return size: 0
void coproc_alloc()
coproc_alloc_entry:
	// succ:  l0000000000430EDC
l0000000000430EDC:
	sp = fp
	sp = sp + -48
	Mem0[sp:word64] = x29
	sp = sp + 8
	Mem0[sp:word64] = x30
	x29 = x31 + 0x0000000000000000
	v8 = sp + 16
	Mem0[v8:word64] = x19
	v8 = v8 + 8
	Mem0[v8:word64] = x20
	x19 = 0x00000000004D6000
	x19 = x19 + 0xFFFFFFFFFFFFFA28
	w2 = 0xFFFFFFFF
	Mem0[sp + 32:word64] = x21
	w20 = w1
	x21 = x0
	Mem0[x19 + 8:word32] = w2
	Mem0[x19 + 16:word32] = w2
	Mem0[x19 + 12:word32] = w2
	Mem0[x19 + 24:word32] = w2
	Mem0[x19 + 20:word32] = w2
	Mem0[x19:word64] = 0x0000000000000000
	Mem0[x19 + 32:word32] = 0x00000000
	Mem0[x19 + 28:word32] = 0x00000000
	strlen(x0)
	sp = sp + 0xFFFFFFFFFFFFFFF8
	x1 = 0x00000000004AC000
	w2 = 0x000006EC
	x1 = x1 + 0x0000000000000560
	x0 = x0 + 0x0000000000000001
	call sh_xmalloc (retsize: 0;)
	x1 = x21
	strcpy(x0, x1)
	sp = sp + 0xFFFFFFFFFFFFFFF8
	Mem0[x19:word64] = x0
	Mem0[x19 + 8:word32] = w20
	x0 = x19
	x21 = Mem0[sp + 32:word64]
	v15 = sp + 16
	x19 = Mem0[v15:word64]
	v15 = v15 + 8
	x20 = Mem0[v15:word64]
	x29 = Mem0[sp:word64]
	sp = sp + 8
	x30 = Mem0[sp:word64]
	sp = sp + 48
	return
	// succ:  coproc_alloc_exit
coproc_alloc_exit:


// coproc_close
// Return size: 0
void coproc_close()
coproc_close_entry:
	// succ:  l0000000000430F5C
l0000000000430F5C:
	sp = fp
	sp = sp + -32
	Mem0[sp:word64] = x29
	sp = sp + 8
	Mem0[sp:word64] = x30
	x29 = x31 + 0x0000000000000000
	Mem0[sp + 16:word64] = x19
	x19 = x0
	w0 = Mem0[x0 + 12:word32]
	branch (w0 & 0x00000000) == 0x00000000 l0000000000430F80
	// succ:  l0000000000430F74 l0000000000430F80
l0000000000430F74:
	close(x0)
	sp = sp + 0xFFFFFFFFFFFFFFF8
	w0 = 0xFFFFFFFF
	Mem0[x19 + 12:word32] = w0
	// succ:  l0000000000430F80
l0000000000430F80:
	w0 = Mem0[x19 + 16:word32]
	branch (w0 & 0x00000000) == 0x00000000 l0000000000430F94
	// succ:  l0000000000430F88 l0000000000430F94
l0000000000430F88:
	close(x0)
	sp = sp + 0xFFFFFFFFFFFFFFF8
	w0 = 0xFFFFFFFF
	Mem0[x19 + 16:word32] = w0
	// succ:  l0000000000430F94
l0000000000430F94:
	w0 = 0xFFFFFFFF
	Mem0[x19 + 24:word32] = w0
	Mem0[x19 + 20:word32] = w0
	x19 = Mem0[sp + 16:word64]
	x29 = Mem0[sp:word64]
	sp = sp + 8
	x30 = Mem0[sp:word64]
	sp = sp + 32
	return
	// succ:  coproc_close_exit
coproc_close_exit:


// coproc_closeall
// Return size: 0
void coproc_closeall()
coproc_closeall_entry:
	// succ:  l0000000000430FAC
l0000000000430FAC:
	sp = fp
	x0 = 0x00000000004D6000
	x0 = x0 + 0xFFFFFFFFFFFFFA28
	// succ:  l0000000000430FB4_thunk_coproc_close
l0000000000430FB4_thunk_coproc_close:
	call coproc_close (retsize: 0;)
	return
	// succ:  coproc_closeall_exit
coproc_closeall_exit:


// coproc_rclose
// Return size: 0
void coproc_rclose()
coproc_rclose_entry:
	// succ:  l0000000000430FB8
l0000000000430FB8:
	sp = fp
	sp = sp + -32
	Mem0[sp:word64] = x29
	sp = sp + 8
	Mem0[sp:word64] = x30
	x29 = x31 + 0x0000000000000000
	Mem0[sp + 16:word64] = x19
	x19 = x0
	w0 = Mem0[x0 + 12:word32]
	branch (w0 & 0x00000000) == 0x00000000 l0000000000430FD8
	// succ:  l0000000000430FD0 l0000000000430FD8
l0000000000430FD0:
	NZCV = cond(w0 - w1)
	branch Test(EQ,Z) l0000000000430FE4
	// succ:  l0000000000430FD8 l0000000000430FE4
l0000000000430FD8:
	x19 = Mem0[sp + 16:word64]
	x29 = Mem0[sp:word64]
	sp = sp + 8
	x30 = Mem0[sp:word64]
	sp = sp + 32
	return
	// succ:  coproc_rclose_exit
l0000000000430FE4:
	close(x0)
	sp = sp + 0xFFFFFFFFFFFFFFF8
	w0 = 0xFFFFFFFF
	Mem0[x19 + 12:word32] = w0
	x19 = Mem0[sp + 16:word64]
	x29 = Mem0[sp:word64]
	sp = sp + 8
	x30 = Mem0[sp:word64]
	sp = sp + 32
	return
	// succ:  coproc_rclose_exit
coproc_rclose_exit:


// coproc_wclose
// Return size: 0
void coproc_wclose()
coproc_wclose_entry:
	// succ:  l0000000000430FFC
l0000000000430FFC:
	sp = fp
	sp = sp + -32
	Mem0[sp:word64] = x29
	sp = sp + 8
	Mem0[sp:word64] = x30
	x29 = x31 + 0x0000000000000000
	Mem0[sp + 16:word64] = x19
	x19 = x0
	w0 = Mem0[x0 + 16:word32]
	branch (w0 & 0x00000000) == 0x00000000 l000000000043101C
	// succ:  l0000000000431014 l000000000043101C
l0000000000431014:
	NZCV = cond(w0 - w1)
	branch Test(EQ,Z) l0000000000431028
	// succ:  l000000000043101C l0000000000431028
l000000000043101C:
	x19 = Mem0[sp + 16:word64]
	x29 = Mem0[sp:word64]
	sp = sp + 8
	x30 = Mem0[sp:word64]
	sp = sp + 32
	return
	// succ:  coproc_wclose_exit
l0000000000431028:
	close(x0)
	sp = sp + 0xFFFFFFFFFFFFFFF8
	w0 = 0xFFFFFFFF
	Mem0[x19 + 16:word32] = w0
	x19 = Mem0[sp + 16:word64]
	x29 = Mem0[sp:word64]
	sp = sp + 8
	x30 = Mem0[sp:word64]
	sp = sp + 32
	return
	// succ:  coproc_wclose_exit
coproc_wclose_exit:


// coproc_fdsave
// Return size: 0
void coproc_fdsave()
coproc_fdsave_entry:
	// succ:  l0000000000431040
l0000000000431040:
	sp = fp
	w2 = Mem0[x0 + 12:word32]
	w1 = Mem0[x0 + 16:word32]
	Mem0[x0 + 20:word32] = w2
	Mem0[x0 + 24:word32] = w1
	return
	// succ:  coproc_fdsave_exit
coproc_fdsave_exit:


// coproc_fdrestore
// Return size: 0
void coproc_fdrestore()
coproc_fdrestore_entry:
	// succ:  l0000000000431054
l0000000000431054:
	sp = fp
	w2 = Mem0[x0 + 20:word32]
	w1 = Mem0[x0 + 24:word32]
	Mem0[x0 + 12:word32] = w2
	Mem0[x0 + 16:word32] = w1
	return
	// succ:  coproc_fdrestore_exit
coproc_fdrestore_exit:


// coproc_pidchk
// Return size: 0
void coproc_pidchk()
coproc_pidchk_entry:
	// succ:  l0000000000431068
l0000000000431068:
	sp = fp
	x2 = 0x00000000004D6000
	x2 = x2 + 0xFFFFFFFFFFFFFA28
	w3 = Mem0[x2 + 8:word32]
	NZCV = cond(w0 - w3)
	branch Test(EQ,Z) l0000000000431080
	// succ:  l000000000043107C l0000000000431080
l000000000043107C:
	return
	// succ:  coproc_pidchk_exit
l0000000000431080:
	w0 = Mem0[x2 + 28:word32]
	Mem0[x2 + 32:word32] = w1
	w0 = w0 & 0xFFFFFFFE
	w0 = w0 | 0x00000002
	Mem0[x2 + 28:word32] = w0
	return
	// succ:  coproc_pidchk_exit
coproc_pidchk_exit:


// coproc_setvars
// Return size: 0
void coproc_setvars()
coproc_setvars_entry:
	// succ:  l0000000000431098
l0000000000431098:
	sp = fp
	sp = sp + -48
	Mem0[sp:word64] = x29
	sp = sp + 8
	Mem0[sp:word64] = x30
	x29 = x31 + 0x0000000000000000
	v6 = sp + 16
	Mem0[v6:word64] = x19
	v6 = v6 + 8
	Mem0[v6:word64] = x20
	x19 = x0
	x0 = Mem0[x0:word64]
	v10 = sp + 32
	Mem0[v10:word64] = x21
	v10 = v10 + 8
	Mem0[v10:word64] = x22
	branch x0 == 0x0000000000000000 l00000000004311B8
	// succ:  l00000000004310B4 l00000000004311B8
l00000000004310B4:
	strlen(x0)
	sp = sp + 0xFFFFFFFFFFFFFFF8
	w0 = w0 + 0x00000010
	x20 = 0x00000000004AC000
	x1 = x20 + 0x0000000000000560
	w2 = 0x00000795
l00000000004311B8:
	v16 = sp + 16
	x19 = Mem0[v16:word64]
	v16 = v16 + 8
	x20 = Mem0[v16:word64]
	v17 = sp + 32
	x21 = Mem0[v17:word64]
	v17 = v17 + 8
	x22 = Mem0[v17:word64]
	x29 = Mem0[sp:word64]
	sp = sp + 8
	x30 = Mem0[sp:word64]
	sp = sp + 48
	return
	// succ:  coproc_setvars_exit
coproc_setvars_exit:


// coproc_checkfd
// Return size: 0
void coproc_checkfd()
coproc_checkfd_entry:
	// succ:  l00000000004311D4
l00000000004311D4:
	sp = fp
	w2 = Mem0[x0 + 12:word32]
	branch (w2 & 0x00000000) == 0x00000000 l000000000043120C
	// succ:  l00000000004311DC l000000000043120C
l00000000004311DC:
	NZCV = cond(w2 - w1)
	w3 = 0x00000000
	branch Test(EQ,Z) l0000000000431214
	// succ:  l00000000004311E8 l0000000000431214
l00000000004311E8:
	w2 = Mem0[x0 + 16:word32]
	branch (w2 & 0x00000000) == 0x00000000 l00000000004311F8
	// succ:  l00000000004311F0 l00000000004311F8
l00000000004311F0:
	NZCV = cond(w1 - w2)
	branch Test(EQ,Z) l0000000000431200
	// succ:  l00000000004311F8 l0000000000431200
l00000000004311F8:
	branch w3 != 0x00000000 l0000000000431208
	// succ:  l00000000004311FC l0000000000431208
l00000000004311FC:
	return
	// succ:  coproc_checkfd_exit
l0000000000431200:
	w1 = 0xFFFFFFFF
	Mem0[x0 + 16:word32] = w1
	// succ:  l0000000000431208
l0000000000431208:
	// succ:  l0000000000431208_thunk_coproc_setvars
l0000000000431208_thunk_coproc_setvars:
	call coproc_setvars (retsize: 0;)
	return
	// succ:  coproc_checkfd_exit
l000000000043120C:
	w3 = 0x00000000
	goto l00000000004311E8
	// succ:  l00000000004311E8
l0000000000431214:
	w3 = 0xFFFFFFFF
	Mem0[x0 + 12:word32] = w3
	goto l00000000004311E8
	// succ:  l00000000004311E8
coproc_checkfd_exit:


// coproc_fdchk
// Return size: 0
void coproc_fdchk()
coproc_fdchk_entry:
	// succ:  l0000000000431220
l0000000000431220:
	sp = fp
	w1 = w0
	x0 = 0x00000000004D6000
	x0 = x0 + 0xFFFFFFFFFFFFFA28
	// succ:  l000000000043122C_thunk_coproc_checkfd
l000000000043122C_thunk_coproc_checkfd:
	call coproc_checkfd (retsize: 0;)
	return
	// succ:  coproc_fdchk_exit
coproc_fdchk_exit:


// coproc_fdclose
// Return size: 0
void coproc_fdclose()
coproc_fdclose_entry:
	// succ:  l0000000000431230
l0000000000431230:
	sp = fp
	sp = sp + -48
	Mem0[sp:word64] = x29
	sp = sp + 8
	Mem0[sp:word64] = x30
	x29 = x31 + 0x0000000000000000
	Mem0[sp + 16:word64] = x19
	x19 = x0
	w0 = Mem0[x0 + 12:word32]
	branch (w0 & 0x00000000) == 0x00000000 l0000000000431250
	// succ:  l0000000000431248 l0000000000431250
l0000000000431248:
	NZCV = cond(w1 - w0)
	branch Test(EQ,Z) l0000000000431290
	// succ:  l0000000000431250 l0000000000431290
l0000000000431250:
	w2 = Mem0[x19 + 16:word32]
	branch (w2 & 0x00000000) == 0x00000000 l0000000000431260
	// succ:  l0000000000431258 l0000000000431260
l0000000000431258:
	NZCV = cond(w1 - w2)
	branch Test(EQ,Z) l0000000000431270
	// succ:  l0000000000431260 l0000000000431270
l0000000000431260:
	x0 = x19
	x19 = Mem0[sp + 16:word64]
	x29 = Mem0[sp:word64]
	sp = sp + 8
	x30 = Mem0[sp:word64]
	sp = sp + 48
	// succ:  l000000000043126C_thunk_coproc_setvars
l000000000043126C_thunk_coproc_setvars:
	call coproc_setvars (retsize: 0;)
	return
	// succ:  coproc_fdclose_exit
l0000000000431270:
	w0 = w1
	close(x0)
	sp = sp + 0xFFFFFFFFFFFFFFF8
	w0 = 0xFFFFFFFF
	Mem0[x19 + 16:word32] = w0
	x0 = x19
	x19 = Mem0[sp + 16:word64]
	x29 = Mem0[sp:word64]
	sp = sp + 8
	x30 = Mem0[sp:word64]
	sp = sp + 48
	// succ:  l000000000043128C_thunk_coproc_setvars
l000000000043128C_thunk_coproc_setvars:
	call coproc_setvars (retsize: 0;)
	return
	// succ:  coproc_fdclose_exit
l0000000000431290:
	w0 = w1
	Mem0[x29 + 32:word64] = x1
	close(x0)
	sp = sp + 0xFFFFFFFFFFFFFFF8
	w0 = 0xFFFFFFFF
	Mem0[x19 + 12:word32] = w0
	x1 = Mem0[x29 + 32:word64]
	goto l0000000000431250
	// succ:  l0000000000431250
coproc_fdclose_exit:


// coproc_unsetvars
// Return size: 0
void coproc_unsetvars()
coproc_unsetvars_entry:
	// succ:  l00000000004312AC
l00000000004312AC:
	sp = fp
	sp = sp + -48
	Mem0[sp:word64] = x29
	sp = sp + 8
	Mem0[sp:word64] = x30
	x29 = x31 + 0x0000000000000000
	v8 = sp + 16
	Mem0[v8:word64] = x19
	v8 = v8 + 8
	Mem0[v8:word64] = x20
	x19 = x0
	x0 = Mem0[x0:word64]
	Mem0[sp + 32:word64] = x21
	branch x0 == 0x0000000000000000 l0000000000431330
	// succ:  l00000000004312C8 l0000000000431330
l00000000004312C8:
	strlen(x0)
	sp = sp + 0xFFFFFFFFFFFFFFF8
	x21 = 0x00000000004AC000
	x21 = x21 + 0x0000000000000560
	w0 = w0 + 0x00000010
	x1 = x21
	w2 = 0x000007C5
l0000000000431330:
	v14 = sp + 16
	x19 = Mem0[v14:word64]
	v14 = v14 + 8
	x20 = Mem0[v14:word64]
	x21 = Mem0[sp + 32:word64]
	x29 = Mem0[sp:word64]
	sp = sp + 8
	x30 = Mem0[sp:word64]
	sp = sp + 48
	return
	// succ:  coproc_unsetvars_exit
coproc_unsetvars_exit:


// coproc_dispose
// Return size: 0
void coproc_dispose()
coproc_dispose_entry:
	// succ:  l0000000000431340
l0000000000431340:
	sp = fp
	sp = sp + -32
	Mem0[sp:word64] = x29
	sp = sp + 8
	Mem0[sp:word64] = x30
	x29 = x31 + 0x0000000000000000
	Mem0[sp + 16:word64] = x19
	x19 = x0
	branch x0 == 0x0000000000000000 l000000000043139C
	// succ:  l0000000000431354 l000000000043139C
l0000000000431354:
	call coproc_unsetvars (retsize: 0;)
	x0 = Mem0[x19:word64]
	branch x0 == 0x0000000000000000 l0000000000431370
	// succ:  l0000000000431360 l0000000000431370
l0000000000431360:
	x1 = 0x00000000004AC000
	x1 = x1 + 0x0000000000000560
	w2 = 0x000006FA
	call sh_xfree (retsize: 0;)
	// succ:  l0000000000431370
l0000000000431370:
	x0 = x19
	call coproc_close (retsize: 0;)
	w0 = 0xFFFFFFFF
	Mem0[x19:word64] = 0x0000000000000000
	Mem0[x19 + 8:word32] = w0
	Mem0[x19 + 16:word32] = w0
	Mem0[x19 + 12:word32] = w0
	Mem0[x19 + 24:word32] = w0
	Mem0[x19 + 20:word32] = w0
	Mem0[x19 + 32:word32] = 0x00000000
	Mem0[x19 + 28:word32] = 0x00000000
	// succ:  l000000000043139C
l000000000043139C:
	x19 = Mem0[sp + 16:word64]
	x29 = Mem0[sp:word64]
	sp = sp + 8
	x30 = Mem0[sp:word64]
	sp = sp + 32
	return
	// succ:  coproc_dispose_exit
coproc_dispose_exit:


// coproc_flush
// Return size: 0
void coproc_flush()
coproc_flush_entry:
	// succ:  l00000000004313A8
l00000000004313A8:
	sp = fp
	x0 = 0x00000000004D6000
	x0 = x0 + 0xFFFFFFFFFFFFFA28
	// succ:  l00000000004313B0_thunk_coproc_dispose
l00000000004313B0_thunk_coproc_dispose:
	call coproc_dispose (retsize: 0;)
	return
	// succ:  coproc_flush_exit
coproc_flush_exit:


// coproc_reap
// Return size: 0
void coproc_reap()
coproc_reap_entry:
	// succ:  l00000000004313B4
l00000000004313B4:
	sp = fp
	x0 = 0x00000000004D6000
	x0 = x0 + 0xFFFFFFFFFFFFFA28
	w1 = Mem0[x0 + 28:word32]
	branch (w1 & 0x00000002) == 0x00000000 l00000000004313C8
	// succ:  l00000000004313C4 l00000000004313C8
l00000000004313C4:
	return
	// succ:  coproc_reap_exit
l00000000004313C8:
	// succ:  l00000000004313C8_thunk_coproc_dispose
l00000000004313C8_thunk_coproc_dispose:
	call coproc_dispose (retsize: 0;)
	return
	// succ:  coproc_reap_exit
coproc_reap_exit:


// setup_async_signals
// Return size: 0
void setup_async_signals()
setup_async_signals_entry:
	// succ:  l00000000004313CC
l00000000004313CC:
	sp = fp
	x0 = 0x00000000004D6000
	w0 = Mem0[x0 + 3420:word32]
	branch w0 == 0x00000000 l00000000004313DC
	// succ:  l00000000004313D8 l00000000004313DC
l00000000004313D8:
	return
	// succ:  setup_async_signals_exit
l00000000004313DC:
	// succ:  l00000000004313DC_thunk_fn0000000000430CD8
l00000000004313DC_thunk_fn0000000000430CD8:
	call fn0000000000430CD8 (retsize: 0;)
	return
	// succ:  setup_async_signals_exit
setup_async_signals_exit:


// shell_execve
// Return size: 0
void shell_execve()
shell_execve_entry:
	// succ:  l00000000004313E0
l00000000004313E0:
	sp = fp
	sp = sp + -192
	Mem0[sp:word64] = x29
	sp = sp + 8
	Mem0[sp:word64] = x30
	x29 = x31 + 0x0000000000000000
	v8 = sp + 16
	Mem0[v8:word64] = x19
	v8 = v8 + 8
	Mem0[v8:word64] = x20
	v11 = sp + 32
	Mem0[v11:word64] = x21
	v11 = v11 + 8
	Mem0[v11:word64] = x22
	v14 = sp + 48
	Mem0[v14:word64] = x23
	v14 = v14 + 8
	Mem0[v14:word64] = x24
	x22 = x1
	x23 = x2
	v19 = sp + 64
	Mem0[v19:word64] = x25
	v19 = v19 + 8
	Mem0[v19:word64] = x26
	v22 = sp + 80
	Mem0[v22:word64] = x27
	v22 = v22 + 8
	Mem0[v22:word64] = x28
	x20 = x0
	call execve (retsize: 0;)
	__errno_location()
	sp = sp + 0xFFFFFFFFFFFFFFF8
	x3 = 0x00000000004E1000
	w4 = Mem0[x3 + 644:word32]
	x21 = x0
	w19 = Mem0[x0:word32]
	branch w4 != 0x00000000 l0000000000431504
	// succ:  l0000000000431424 l0000000000431504
l0000000000431424:
	w31 = w19 - 0x00000008
	NZCV = cond(w31)
	x0 = x20
	branch Test(EQ,Z) l0000000000431518
	// succ:  l0000000000431430 l0000000000431518
l0000000000431430:
	call file_isdir (retsize: 0;)
	branch w0 == 0x00000000 l0000000000431494
	// succ:  l0000000000431438 l0000000000431494
l0000000000431438:
	x1 = 0x00000000004BE000
	x1 = x1 + 0x00000000000007D0
	w2 = 0x00000005
	x0 = 0x0000000000000000
	dcgettext(x0, x1, x2)
	sp = sp + 0xFFFFFFFFFFFFFFF8
	x21 = x0
	w0 = 0x00000015
	strerror(x0)
	sp = sp + 0xFFFFFFFFFFFFFFF8
	x2 = x0
	x1 = x20
	x0 = x21
	call internal_error (retsize: 0;)
	// succ:  l0000000000431468
l0000000000431468:
	w31 = w19 - 0x00000002
	NZCV = cond(w31)
	w0 = 0x0000007E
	w1 = 0x0000007F
l0000000000431478:
	v40 = sp + 16
	x19 = Mem0[v40:word64]
	v40 = v40 + 8
	x20 = Mem0[v40:word64]
	v41 = sp + 32
	x21 = Mem0[v41:word64]
	v41 = v41 + 8
	x22 = Mem0[v41:word64]
	v42 = sp + 48
	x23 = Mem0[v42:word64]
	v42 = v42 + 8
	x24 = Mem0[v42:word64]
	v43 = sp + 64
	x25 = Mem0[v43:word64]
	v43 = v43 + 8
	x26 = Mem0[v43:word64]
	v44 = sp + 80
	x27 = Mem0[v44:word64]
	v44 = v44 + 8
	x28 = Mem0[v44:word64]
	x29 = Mem0[sp:word64]
	sp = sp + 8
	x30 = Mem0[sp:word64]
	sp = sp + 192
	return
	// succ:  shell_execve_exit
l0000000000431494:
	x0 = x20
	call executable_file (retsize: 0;)
	branch w0 == 0x00000000 l00000000004314F4
	// succ:  l00000000004314A0 l00000000004314F4
l00000000004314A0:
	w31 = w19 - 0x0000000C
	NZCV = cond(w31)
	branch Test(EQ,Z) l00000000004314F4
	// succ:  l00000000004314A8 l00000000004314F4
l00000000004314A8:
	w31 = w19 - 0x00000007
	NZCV = cond(w31)
	w1 = (word32) Test(EQ,Z)
	branch w1 != 0x00000000 l00000000004314F4
	// succ:  l00000000004314B4 l00000000004314F4
l00000000004314B4:
	x0 = x20
	open(x0, x1)
	sp = sp + 0xFFFFFFFFFFFFFFF8
	w22 = w0
	branch (w0 & 0x00000000) == 0x00000000 l00000000004314F4
	// succ:  l00000000004314C4 l00000000004314F4
l00000000004314C4:
	x1 = x29 + 0x0000000000000060
	x2 = 0x0000000000000050
	read(x0, x1, x2)
	sp = sp + 0xFFFFFFFFFFFFFFF8
	x23 = x0
	w0 = w22
	close(x0)
	sp = sp + 0xFFFFFFFFFFFFFFF8
	w31 = w23 - 0x00000002
	NZCV = cond(w31)
	w3 = w23
	branch Test(LE,ZCV) l00000000004314F4
	// succ:  l00000000004314E8 l00000000004314F4
l00000000004314E8:
	v48 = Mem0[x29 + 96:byte]
	w0 = (word32) v48
	w31 = w0 - 0x00000023
	NZCV = cond(w31)
	branch Test(EQ,Z) l0000000000431744
	// succ:  l00000000004314F4 l0000000000431744
l00000000004314F4:
	Mem0[x21:word32] = w19
	x0 = x20
	call file_error (retsize: 0;)
	goto l0000000000431468
	// succ:  l0000000000431468
l0000000000431504:
	w0 = Mem0[x3 + 644:word32]
	call termsig_handler (retsize: 0;)
	w31 = w19 - 0x00000008
	NZCV = cond(w31)
	x0 = x20
	branch Test(NE,Z) l0000000000431430
	// succ:  l0000000000431518 l0000000000431430
l0000000000431518:
	w1 = 0x00000000
	open(x0, x1)
	sp = sp + 0xFFFFFFFFFFFFFFF8
	w19 = w0
	branch (w0 & 0x00000000) == 0x00000000 l000000000043159C
	// succ:  l0000000000431528 l000000000043159C
l0000000000431528:
	x1 = x29 + 0x0000000000000060
	x2 = 0x0000000000000050
	read(x0, x1, x2)
	sp = sp + 0xFFFFFFFFFFFFFFF8
	x21 = x0
	w0 = w19
	close(x0)
	sp = sp + 0xFFFFFFFFFFFFFFF8
	NZCV = cond(w21 - w31)
	w0 = w21
	branch Test(EQ,Z) l0000000000431478
	// succ:  l000000000043154C l0000000000431478
l000000000043154C:
	branch Test(LE,ZCV) l000000000043159C
	// succ:  l0000000000431550 l000000000043159C
l0000000000431550:
	x0 = x29 + 0x0000000000000060
	w1 = w21
	call check_binary_file (retsize: 0;)
	branch w0 == 0x00000000 l000000000043159C
	// succ:  l0000000000431560 l000000000043159C
l0000000000431560:
	x1 = 0x00000000004AA000
	w2 = 0x00000005
	x1 = x1 + 0x0000000000000418
	x0 = 0x0000000000000000
	dcgettext(x0, x1, x2)
	sp = sp + 0xFFFFFFFFFFFFFFF8
	x1 = x20
	call internal_error (retsize: 0;)
	w0 = 0x0000007E
	v35 = sp + 16
	x19 = Mem0[v35:word64]
	v35 = v35 + 8
	x20 = Mem0[v35:word64]
	v36 = sp + 32
	x21 = Mem0[v36:word64]
	v36 = v36 + 8
	x22 = Mem0[v36:word64]
	v37 = sp + 48
	x23 = Mem0[v37:word64]
	v37 = v37 + 8
	x24 = Mem0[v37:word64]
	v38 = sp + 64
	x25 = Mem0[v38:word64]
	v38 = v38 + 8
	x26 = Mem0[v38:word64]
	v39 = sp + 80
	x27 = Mem0[v39:word64]
	v39 = v39 + 8
	x28 = Mem0[v39:word64]
	x29 = Mem0[sp:word64]
	sp = sp + 8
	x30 = Mem0[sp:word64]
	sp = sp + 192
	return
	// succ:  shell_execve_exit
l000000000043159C:
	call delete_all_aliases (retsize: 0;)
	x0 = 0x00000000004E3000
	Mem0[x0 + 3428:word32] = 0x00000000
	call without_job_control (retsize: 0;)
	call set_sigchld_handler (retsize: 0;)
	call init_job_stats (retsize: 0;)
	call reset_shell_flags (retsize: 0;)
	call reset_shell_options (retsize: 0;)
	call reset_shopt_options (retsize: 0;)
	x0 = 0x00000000004DF000
	x1 = Mem0[x0 + 3200:word64]
	w2 = Mem0[x1 + 12:word32]
	branch (w2 & 0x00000008) == 0x00000000 l00000000004315D8
	// succ:  l00000000004315D0 l00000000004315D8
l00000000004315D0:
	x1 = Mem0[x1 + 24:word64]
	Mem0[x0 + 3200:word64] = x1
	// succ:  l00000000004315D8
l00000000004315D8:
	w0 = 0x00000000
	call clear_unwind_protect_list (retsize: 0;)
	x2 = 0x00000000004E1000
	x27 = 0x00000000004DF000
	x0 = 0x00000000004DE000
	Mem0[x2 + 1720:word32] = 0x00000000
	x2 = 0x00000000004E3000
	x1 = x27 + 0xFFFFFFFFFFFFFBE8
	Mem0[x2 + 1188:word32] = 0x00000000
	w0 = Mem0[x0 + 1712:word32]
	x2 = 0x00000000004DF000
	Mem0[x1 + 32:word32] = 0x00000000
	Mem0[x2 + 3168:word32] = 0x00000000
	Mem0[x1 + 36:word32] = 0x00000000
	branch w0 != 0x00000000 l0000000000431618
	// succ:  l0000000000431614 l0000000000431618
l0000000000431614:
	call unset_bash_input (retsize: 0;)
	// succ:  l0000000000431618
l0000000000431618:
	call set_sigint_handler (retsize: 0;)
	x0 = x22
	call strvec_len (retsize: 0;)
	w21 = w0
	w1 = w0 + 0x00000002
	x0 = x22
	call strvec_resize (retsize: 0;)
	x19 = x0
	w25 = w21 + 0x00000001
	branch w21 == 0x00000000 l0000000000431670
	// succ:  l0000000000431640 l0000000000431670
l0000000000431640:
	x1 = x0 - 0x0000000000000010
	x0 = 0xFFFFFFFFFFFFFFF8
	x0 = x0 + (int64) ((int32) w21)
	w2 = w21 - 0x00000001
	x21 = x1 + (int64) ((int32) w21)
	x0 = x19 + x0
	x21 = x21 - (uint64) ((word32) w2)
	// succ:  l000000000043165C
l000000000043165C:
	x1 = Mem0[x0:word64]
	x0 = x0 - 0x0000000000000008
	Mem0[x0 + 16:word64] = x1
	x31 = x0 - x21
	NZCV = cond(x31)
	branch Test(NE,Z) l000000000043165C
	// succ:  l0000000000431670 l000000000043165C
l0000000000431670:
	x0 = 0x00000000004DE000
	x0 = Mem0[x0 + 1728:word64]
	Mem0[x19 + 8:word64] = x20
	Mem0[x19:word64] = x0
	Mem0[x19 + (int64) ((int32) w25):word64] = 0x0000000000000000
	x0 = Mem0[x19:word64]
	v53 = Mem0[x0:byte]
	w1 = (word32) v53
	w31 = w1 - 0x0000002D
	NZCV = cond(w31)
	branch Test(EQ,Z) l00000000004318A8
	// succ:  l0000000000431694 l00000000004318A8
l0000000000431694:
	x0 = 0x00000000004DF000
	w0 = Mem0[x0 + 3696:word32]
	branch w0 != 0x00000000 l0000000000431898
	// succ:  l00000000004316A0 l0000000000431898
l00000000004316A0:
	x20 = 0x00000000004E3000
	x0 = Mem0[x20 + 520:word64]
	x21 = 0x00000000004E3000
	branch x0 == 0x0000000000000000 l0000000000431710
	// succ:  l00000000004316B0 l0000000000431710
l00000000004316B0:
	w0 = Mem0[x21 + 592:word32]
	x22 = 0x00000000004AC000
	w31 = w0 - 0x00000001
	NZCV = cond(w31)
	branch Test(LE,ZCV) l0000000000431700
	// succ:  l00000000004316C0 l0000000000431700
l00000000004316C0:
	x26 = 0x0000000000000008
	w24 = 0x00000001
	x3 = x22 + 0x0000000000000560
	x28 = x21 + 0x0000000000000250
	// succ:  l00000000004316D0
l00000000004316D0:
	x0 = Mem0[x20 + 520:word64]
	x1 = x3
	x0 = Mem0[x0 + x26:word64]
	w2 = 0x000013DA
	Mem0[x29 + 176:word64] = x3
	call sh_xfree (retsize: 0;)
	w0 = Mem0[x28:word32]
	w24 = w24 + 0x00000001
	NZCV = cond(w0 - w24)
	x26 = x26 + 0x0000000000000008
	x3 = Mem0[x29 + 176:word64]
	branch Test(GT,NZV) l00000000004316D0
	// succ:  l0000000000431700 l00000000004316D0
l0000000000431700:
	x0 = Mem0[x20 + 520:word64]
	x1 = x22 + 0x0000000000000560
	w2 = 0x000013DB
	call sh_xfree (retsize: 0;)
	// succ:  l0000000000431710
l0000000000431710:
	x27 = x27 + 0xFFFFFFFFFFFFFBE8
	x0 = Mem0[x27 + 16:word64]
	call dispose_command (retsize: 0;)
	x0 = 0x00000000004E3000
	Mem0[x0 + 200:word64] = x23
	Mem0[x27 + 16:word64] = 0x0000000000000000
	Mem0[x21 + 592:word32] = w25
	Mem0[x20 + 520:word64] = x19
	call unbind_args (retsize: 0;)
	x0 = 0x00000000004E3000
	x0 = x0 + 0x00000000000000D0
	w1 = 0x00000001
	call __longjmp_chk (retsize: 0;)
	// succ:  l0000000000431744
l0000000000431744:
	v49 = Mem0[x29 + 97:byte]
	w0 = (word32) v49
	w31 = w0 - 0x00000021
	NZCV = cond(w31)
	branch Test(NE,Z) l00000000004314F4
	// succ:  l0000000000431750 l00000000004314F4
l0000000000431750:
	x0 = x29 + 0x0000000000000062
	w1 = 0x00000002
	// succ:  l0000000000431758
l0000000000431758:
	v50 = Mem0[x0:byte]
	w4 = (word32) v50
	w31 = w4 - 0x00000009
	NZCV = cond(w31)
	branch Test(NE,Z) l00000000004317E0
	// succ:  l0000000000431764 l00000000004317E0
l0000000000431764:
	w1 = w1 + 0x00000001
	NZCV = cond(w3 - w1)
	x0 = x0 + 0x0000000000000001
	branch Test(GT,NZV) l0000000000431758
	// succ:  l0000000000431774 l0000000000431758
l0000000000431774:
	w2 = w1
	// succ:  l0000000000431778
l0000000000431778:
	x0 = x29 + 0x0000000000000060
	call substring (retsize: 0;)
	x22 = x0
	strlen(x0)
	sp = sp + 0xFFFFFFFFFFFFFFF8
l00000000004317E0:
	w31 = w4 - 0x00000020
	NZCV = cond(w31)
	branch Test(EQ,Z) l0000000000431764
	// succ:  l00000000004317E8 l0000000000431764
l00000000004317E8:
	NZCV = cond(w23 - w1)
	w2 = w1
	branch Test(LE,ZCV) l0000000000431778
	// succ:  l00000000004317F4 l0000000000431778
l00000000004317F4:
	w4 = w4 - 0x00000009
l0000000000431898:
	w1 = 0x0000002B
	w0 = 0x00000072
	call change_flag (retsize: 0;)
	goto l00000000004316A0
	// succ:  l00000000004316A0
l00000000004318A8:
	x0 = x0 + 0x0000000000000001
	Mem0[x19:word64] = x0
	goto l0000000000431694
	// succ:  l0000000000431694
shell_execve_exit:


// fn00000000004318B4
// Return size: 0
void fn00000000004318B4()
fn00000000004318B4_entry:
	// succ:  l00000000004318B4
l00000000004318B4:
	sp = fp
	x31 = x31 - 0x00000000000000D0
	v6 = sp + 16
	Mem0[v6:word64] = x29
	v6 = v6 + 8
	Mem0[v6:word64] = x30
	x29 = x31 + 0x0000000000000010
	x6 = 0x00000000004DF000
	x7 = 0x00000000004DF000
	v11 = sp + 32
	Mem0[v11:word64] = x19
	v11 = v11 + 8
	Mem0[v11:word64] = x20
	v14 = sp + 48
	Mem0[v14:word64] = x21
	v14 = v14 + 8
	Mem0[v14:word64] = x22
	v17 = sp + 64
	Mem0[v17:word64] = x23
	v17 = v17 + 8
	Mem0[v17:word64] = x24
	x5 = x6 + 0xFFFFFFFFFFFFFBE8
	v21 = sp + 80
	Mem0[v21:word64] = x25
	v21 = v21 + 8
	Mem0[v21:word64] = x26
	v24 = sp + 96
	Mem0[v24:word64] = x27
	v24 = v24 + 8
	Mem0[v24:word64] = x28
	w6 = Mem0[x7 + 3168:word32]
	Mem0[x5 + 40:word32] = 0x00000000
	Mem0[x29 + 120:word64] = x4
	x21 = x0
	w19 = w1
	w20 = w2
	w24 = w3
	branch w6 == 0x00000000 l000000000043190C
	// succ:  l0000000000431900 l000000000043190C
l0000000000431900:
	x0 = 0x00000000004DE000
	w0 = Mem0[x0 + 1712:word32]
	branch w0 != 0x00000000 l0000000000431EA4
	// succ:  l000000000043190C l0000000000431EA4
l000000000043190C:
	x0 = x21
	x1 = 0x00000000004DF000
	Mem0[x1 + 2900:word32] = 0x00000000
	call print_simple_command (retsize: 0;)
	w0 = 0x00000041
	call signal_in_progress (retsize: 0;)
	branch w0 != 0x00000000 l0000000000431934
	// succ:  l0000000000431928 l0000000000431934
l0000000000431928:
	x0 = 0x00000000004E3000
	w0 = Mem0[x0 + 1632:word32]
	branch w0 == 0x00000000 l0000000000431E54
	// succ:  l0000000000431934 l0000000000431E54
l0000000000431934:
	call run_debug_trap (retsize: 0;)
	w25 = w0
	x0 = 0x00000000004DE000
	w0 = Mem0[x0 + 1844:word32]
	branch w0 == 0x00000000 l000000000043194C
	// succ:  l0000000000431948 l000000000043194C
l0000000000431948:
	branch w25 != 0x00000000 l0000000000431F68
	// succ:  l000000000043194C l0000000000431F68
l000000000043194C:
	x27 = Mem0[x21 + 8:word64]
	branch x27 == 0x0000000000000000 l000000000043228C
	// succ:  l0000000000431954 l000000000043228C
l0000000000431954:
	x0 = Mem0[x27 + 8:word64]
	w22 = Mem0[x0 + 8:word32]
	w22 = w22 & 0x00000002
	Mem0[x29 + 144:word32] = w22
	// succ:  l0000000000431964
l0000000000431964:
	w31 = w20 + 0x00000001
	NZCV = cond(w31)
	w4 = (word32) Test(NE,Z)
	w31 = w19 + 0x00000001
	NZCV = cond(w31)
	w3 = (word32) Test(NE,Z)
	x28 = 0x00000000004D6000
	w22 = w4 | w3
	w3 = Mem0[x28 + 3416:word32]
	x26 = 0x00000000004D6000
	w0 = 0xFFFFFFFF
	Mem0[x26 + 3468:word32] = w0
	Mem0[x29 + 112:word32] = w3
	branch w22 == 0x00000000 l0000000000431D04
	// succ:  l0000000000431994 l0000000000431D04
l0000000000431994:
	w31 = w19 + 0x00000001
	NZCV = cond(w31)
	branch Test(NE,Z) l00000000004319A4
	// succ:  l000000000043199C l00000000004319A4
l000000000043199C:
	w31 = w20 + 0x00000001
	NZCV = cond(w31)
	branch Test(EQ,Z) l0000000000432294
	// succ:  l00000000004319A4 l0000000000432294
l00000000004319A4:
	Mem0[x29 + 176:word64] = x4
	x23 = 0x00000000004E3000
	call maybe_make_export_env (retsize: 0;)
	x0 = Mem0[x23 + 720:word64]
	strlen(x0)
	sp = sp + 0xFFFFFFFFFFFFFFF8
	x1 = 0x00000000004AC000
	w2 = 0x00000E8D
	x1 = x1 + 0x0000000000000560
	x0 = x0 + 0x0000000000000001
	call sh_xmalloc (retsize: 0;)
	x1 = Mem0[x23 + 720:word64]
	strcpy(x0, x1)
	sp = sp + 0xFFFFFFFFFFFFFFF8
	w1 = w24
	call make_child (retsize: 0;)
	x4 = Mem0[x29 + 176:word64]
	branch w0 != 0x00000000 l0000000000431EC8
	// succ:  l00000000004319E4 l0000000000431EC8
l00000000004319E4:
	w0 = Mem0[x21:word32]
	x23 = 0x00000000004E3000
	w0 = w0 | 0x00000040
	Mem0[x21:word32] = w0
	branch w22 == 0x00000000 l0000000000431F70
	// succ:  l00000000004319F8 l0000000000431F70
l00000000004319F8:
	w0 = 0x00000018
	Mem0[x23 + 1184:word32] = w0
	// succ:  l0000000000431A00
l0000000000431A00:
	branch w24 == 0x00000000 l0000000000431A10
	// succ:  l0000000000431A04 l0000000000431A10
l0000000000431A04:
	w0 = Mem0[x23 + 1184:word32]
	w0 = w0 | 0x00000001
	Mem0[x23 + 1184:word32] = w0
	// succ:  l0000000000431A10
l0000000000431A10:
	x6 = Mem0[x29 + 120:word64]
	branch x6 == 0x0000000000000000 l0000000000431A20
	// succ:  l0000000000431A18 l0000000000431A20
l0000000000431A18:
	x0 = x6
	call close_fd_bitmap (retsize: 0;)
	// succ:  l0000000000431A20
l0000000000431A20:
	w1 = w20
	w0 = w19
	call fn00000000004307F4 (retsize: 0;)
	x0 = 0x00000000004D6000
	x0 = x0 + 0xFFFFFFFFFFFFFA28
	call coproc_close (retsize: 0;)
	w3 = Mem0[x29 + 112:word32]
	w7 = 0x00000001
	w1 = Mem0[x21:word32]
	Mem0[x29 + 136:word32] = w7
	Mem0[x28 + 3416:word32] = w3
	x27 = Mem0[x21 + 8:word64]
	w20 = w1 & 0x00000020
	branch (w1 & 0x00000020) == 0x00000000 l0000000000431D18
	// succ:  l0000000000431A58 l0000000000431D18
l0000000000431A58:
	x0 = x27
	call copy_word_list (retsize: 0;)
	x19 = x0
	branch x19 == 0x0000000000000000 l0000000000431DCC
	// succ:  l0000000000431A68 l0000000000431DCC
l0000000000431A68:
	x1 = 0x00000000004AC000
	x0 = x1 + 0x0000000000000658
	call begin_unwind_frame (retsize: 0;)
	x0 = 0x00000000004DF000
	w0 = Mem0[x0 + 3744:word32]
	branch w0 != 0x00000000 l00000000004322FC
	// succ:  l0000000000431A80 l00000000004322FC
l0000000000431A80:
	w0 = Mem0[x21:word32]
	branch (w0 & 0x00000010) == 0x00000000 l0000000000431F7C
	// succ:  l0000000000431A88 l0000000000431F7C
l0000000000431A88:
	Mem0[x29 + 128:word64] = 0x0000000000000000
	w6 = Mem0[x29 + 128:word32]
	x20 = Mem0[x29 + 128:word64]
	Mem0[x29 + 168:word32] = w6
	// succ:  l0000000000431A98
l0000000000431A98:
	x0 = 0x000000000042F000
	x0 = x0 + 0xFFFFFFFFFFFFFA38
	x1 = x19
	x25 = 0x00000000004E1000
	call add_unwind_protect (retsize: 0;)
	w0 = Mem0[x25 + 644:word32]
	branch w0 != 0x00000000 l00000000004322F0
	// succ:  l0000000000431AB4 l00000000004322F0
l0000000000431AB4:
	x7 = 0x00000000004E1000
	w0 = Mem0[x7 + 632:word32]
	branch w0 != 0x00000000 l0000000000431FA4
	// succ:  l0000000000431AC0 l0000000000431FA4
l0000000000431AC0:
	x1 = x19
	goto l0000000000431ACC
	// succ:  l0000000000431ACC
l0000000000431AC8:
	x1 = x0
	// succ:  l0000000000431ACC
l0000000000431ACC:
	x0 = Mem0[x1:word64]
	branch x0 != 0x0000000000000000 l0000000000431AC8
	// succ:  l0000000000431AD4 l0000000000431AC8
l0000000000431AD4:
	x0 = Mem0[x19 + 8:word64]
	x1 = Mem0[x1 + 8:word64]
	x0 = Mem0[x0:word64]
	x1 = Mem0[x1:word64]
	Mem0[x29 + 160:word64] = x1
	v51 = Mem0[x0:byte]
	w1 = (word32) v51
	w31 = w1 - 0x00000025
	NZCV = cond(w31)
	branch Test(EQ,Z) l000000000043230C
	// succ:  l0000000000431AF4 l000000000043230C
l0000000000431AF4:
	x6 = 0x00000000004D6000
	w2 = Mem0[x6 + 3420:word32]
	branch w2 == 0x00000000 l0000000000431B1C
	// succ:  l0000000000431B00 l0000000000431B1C
l0000000000431B00:
	w7 = Mem0[x29 + 144:word32]
	w2 = Mem0[x29 + 136:word32]
	w22 = w7 | w24
	w22 = w22 | w2
	branch w22 != 0x00000000 l0000000000431B1C
	// succ:  l0000000000431B14 l0000000000431B1C
l0000000000431B14:
	x2 = Mem0[x19:word64]
	branch x2 == 0x0000000000000000 l0000000000432714
	// succ:  l0000000000431B1C l0000000000432714
l0000000000431B1C:
	x3 = Mem0[x29 + 128:word64]
	x2 = 0x00000000004E3000
	x31 = x3 - x31
	NZCV = cond(x31)
	w6 = (word32) Test(EQ,Z)
	x31 = x3 - x31
	NZCV = cond(x31)
	w1 = (word32) Test(NE,Z)
	x7 = 0x00000000004DF000
	Mem0[x29 + 144:word32] = w1
	Mem0[x29 + 112:word64] = x2
	x1 = 0x00000000004E3000
	x22 = x7 + 0xFFFFFFFFFFFFFBE8
	x27 = x1 + 0x00000000000004A0
	x7 = Mem0[x29 + 112:word64]
	x1 = 0x00000000004DE000
	x3 = x22 + 0x0000000000000004
	x28 = x1 + 0x0000000000000744
	w1 = Mem0[x25 + 644:word32]
	Mem0[x29 + 148:word32] = w6
	Mem0[x29 + 152:word64] = x3
	Mem0[x7 + 1192:word64] = x0
	x23 = 0x00000000004E1000
	branch w1 != 0x00000000 l0000000000431CB0
	// succ:  l0000000000431B74 l0000000000431CB0
l0000000000431B74:
	x1 = 0x00000000004E1000
	w0 = Mem0[x1 + 632:word32]
	branch w0 != 0x00000000 l0000000000431CC4
	// succ:  l0000000000431B80 l0000000000431CC4
l0000000000431B80:
	branch x20 == 0x0000000000000000 l0000000000431CCC
	// succ:  l0000000000431B84 l0000000000431CCC
l0000000000431B84:
	x0 = Mem0[x23 + 1688:word64]
	x6 = 0x00000000004E1000
	Mem0[x23 + 1688:word64] = x20
	Mem0[x6 + 1704:word64] = x0
	branch x20 == 0x0000000000000000 l0000000000431CF8
	// succ:  l0000000000431B98 l0000000000431CF8
l0000000000431B98:
	w0 = Mem0[x22 + 4:word32]
	x26 = x22
	x26 = x26 + 8
	w3 = Mem0[x26:word32]
	Mem0[x29 + 104:word32] = w0
	x0 = Mem0[x29 + 152:word64]
	w1 = 0x00000004
	Mem0[x29 + 100:word32] = w3
	call unwind_protect_mem (retsize: 0;)
	x0 = x26
	w1 = 0x00000004
	call unwind_protect_mem (retsize: 0;)
	// succ:  l0000000000431BC4
l0000000000431BC4:
	w0 = Mem0[x29 + 136:word32]
	branch w0 == 0x00000000 l0000000000432488
	// succ:  l0000000000431BCC l0000000000432488
l0000000000431BCC:
	call reset_signal_handlers (retsize: 0;)
	w0 = Mem0[x27:word32]
	w0 = w0 | 0x00000080
	Mem0[x27:word32] = w0
	branch w24 == 0x00000000 l0000000000431C00
	// succ:  l0000000000431BE0 l0000000000431C00
l0000000000431BE0:
	w0 = Mem0[x21:word32]
	branch (w0 & 0x00000400) == 0x00000000 l0000000000431BF4
	// succ:  l0000000000431BE8 l0000000000431BF4
l0000000000431BE8:
	x0 = Mem0[x21 + 16:word64]
	call stdin_redirects (retsize: 0;)
	branch w0 == 0x00000000 l00000000004323D8
	// succ:  l0000000000431BF4 l00000000004323D8
l0000000000431BF4:
	x2 = 0x00000000004D6000
	w0 = Mem0[x2 + 3420:word32]
	branch w0 == 0x00000000 l0000000000432158
	// succ:  l0000000000431C00 l0000000000432158
l0000000000431C00:
	w2 = Mem0[x22 + 64:word32]
	w0 = Mem0[x21:word32]
	w8 = w2 + 0x00000001
	x1 = Mem0[x21 + 16:word64]
	w4 = 0xFFFFFFFF
	Mem0[sp:word32] = w0
	x3 = Mem0[x29 + 128:word64]
	x7 = Mem0[x29 + 120:word64]
	x0 = x19
	x2 = x20
	w5 = w4
	w6 = w24
	Mem0[x22 + 64:word32] = w8
	call fn0000000000435F58 (retsize: 0;)
	w0 = Mem0[x22 + 64:word32]
	w0 = w0 - 0x00000001
	Mem0[x22 + 64:word32] = w0
	// succ:  l0000000000431C44
l0000000000431C44:
	w0 = Mem0[x28:word32]
	branch w0 == 0x00000000 l0000000000432020
	// succ:  l0000000000431C4C l0000000000432020
l0000000000431C4C:
	x0 = 0x00000000004DE000
	w0 = Mem0[x0 + 1704:word32]
	branch w0 == 0x00000000 l0000000000432020
	// succ:  l0000000000431C58 l0000000000432020
l0000000000431C58:
	x0 = Mem0[x19 + 8:word64]
	branch x0 == 0x0000000000000000 l0000000000432020
	// succ:  l0000000000431C60 l0000000000432020
l0000000000431C60:
	x26 = Mem0[x0:word64]
	x0 = x26
	call search_for_command (retsize: 0;)
	branch x0 == 0x0000000000000000 l0000000000432018
	// succ:  l0000000000431C70 l0000000000432018
l0000000000431C70:
	call file_isdir (retsize: 0;)
	branch w0 == 0x00000000 l0000000000432020
	// succ:  l0000000000431C78 l0000000000432020
l0000000000431C78:
	x0 = 0x00000000004AC000
	x0 = x0 + 0x00000000000006A0
	call make_word (retsize: 0;)
	x1 = x19
	call make_word_list (retsize: 0;)
	w1 = 0x00000000
	x19 = x0
	call xtrace_print_word_list (retsize: 0;)
	x0 = Mem0[x19 + 8:word64]
	x7 = Mem0[x29 + 112:word64]
	x0 = Mem0[x0:word64]
	w1 = Mem0[x25 + 644:word32]
	Mem0[x7 + 1192:word64] = x0
	branch w1 == 0x00000000 l0000000000431B74
	// succ:  l0000000000431CB0 l0000000000431B74
l0000000000431CB0:
	w0 = Mem0[x25 + 644:word32]
	call termsig_handler (retsize: 0;)
	x1 = 0x00000000004E1000
	w0 = Mem0[x1 + 632:word32]
	branch w0 == 0x00000000 l0000000000431B80
	// succ:  l0000000000431CC4 l0000000000431B80
l0000000000431CC4:
	call throw_to_top_level (retsize: 0;)
	branch x20 != 0x0000000000000000 l0000000000431B84
	// succ:  l0000000000431CCC l0000000000431B84
l0000000000431CCC:
	w2 = Mem0[x29 + 148:word32]
	branch w2 == 0x00000000 l0000000000431B84
	// succ:  l0000000000431CD4 l0000000000431B84
l0000000000431CD4:
	x3 = Mem0[x29 + 112:word64]
	x0 = Mem0[x3 + 1192:word64]
	call find_shell_builtin (retsize: 0;)
	x20 = x0
	x0 = Mem0[x23 + 1688:word64]
	x6 = 0x00000000004E1000
	Mem0[x23 + 1688:word64] = x20
	Mem0[x6 + 1704:word64] = x0
	branch x20 != 0x0000000000000000 l0000000000431B98
	// succ:  l0000000000431CF8 l0000000000431B98
l0000000000431CF8:
	w7 = Mem0[x29 + 144:word32]
	branch w7 == 0x00000000 l0000000000431C44
	// succ:  l0000000000431D00 l0000000000431C44
l0000000000431D00:
	goto l0000000000431BC4
	// succ:  l0000000000431BC4
l0000000000431D04:
	branch w24 != 0x00000000 l000000000043199C
	// succ:  l0000000000431D08 l000000000043199C
l0000000000431D08:
	w1 = Mem0[x21:word32]
	Mem0[x29 + 136:word32] = 0x00000000
	w20 = w1 & 0x00000020
	branch (w1 & 0x00000020) == 0x00000000 l0000000000431A58
	// succ:  l0000000000431D18 l0000000000431A58
l0000000000431D18:
	x7 = 0x00000000004DF000
	x2 = Mem0[x29 + 120:word64]
	x0 = x7 + 0xFFFFFFFFFFFFFBE8
	Mem0[x0 + 48:word64] = x2
	branch x27 == 0x0000000000000000 l00000000004323AC
	// succ:  l0000000000431D2C l00000000004323AC
l0000000000431D2C:
	x19 = x27
	w25 = w20
	x23 = 0x0000000000000000
	// succ:  l0000000000431D38
l0000000000431D38:
	x2 = Mem0[x19 + 8:word64]
	w3 = Mem0[x2 + 8:word32]
	branch (w3 & 0x00000004) == 0x00000000 l0000000000431FAC
	// succ:  l0000000000431D44 l0000000000431FAC
l0000000000431D44:
	branch x23 == 0x0000000000000000 l0000000000431F18
	// succ:  l0000000000431D48 l0000000000431F18
l0000000000431D48:
	branch w25 != 0x00000000 l0000000000431F54
	// succ:  l0000000000431D4C l0000000000431F54
l0000000000431D4C:
	w0 = 0x000000B0
	w0 = DPB(w0, 0x00000002, 16)
	w3 = w3 | w0
	Mem0[x2 + 8:word32] = w3
	// succ:  l0000000000431D5C
l0000000000431D5C:
	branch w20 == 0x00000000 l0000000000431D70
	// succ:  l0000000000431D60 l0000000000431D70
l0000000000431D60:
	w0 = Mem0[x2 + 8:word32]
	w20 = 0x00000001
	w0 = w0 | 0x01000000
	Mem0[x2 + 8:word32] = w0
	// succ:  l0000000000431D70
l0000000000431D70:
	x19 = Mem0[x19:word64]
	branch x19 != 0x0000000000000000 l0000000000431D38
	// succ:  l0000000000431D78 l0000000000431D38
l0000000000431D78:
	w1 = Mem0[x21:word32]
	x0 = Mem0[x21 + 8:word64]
	// succ:  l0000000000431D80
l0000000000431D80:
	branch (w1 & 0x00000008) == 0x00000000 l0000000000431D98
	// succ:  l0000000000431D84 l0000000000431D98
l0000000000431D84:
	x6 = 0x00000000004DF000
	x1 = x6 + 0xFFFFFFFFFFFFFBE8
	w2 = Mem0[x1:word32]
	w2 = w2 + 0x00000001
	Mem0[x1:word32] = w2
	// succ:  l0000000000431D98
l0000000000431D98:
	call expand_words (retsize: 0;)
	x19 = x0
	w0 = Mem0[x21:word32]
	branch (w0 & 0x00000008) == 0x00000000 l0000000000431DBC
	// succ:  l0000000000431DA8 l0000000000431DBC
l0000000000431DA8:
	x1 = 0x00000000004DF000
	x0 = x1 + 0xFFFFFFFFFFFFFBE8
	w1 = Mem0[x0:word32]
	w1 = w1 - 0x00000001
	Mem0[x0:word32] = w1
	// succ:  l0000000000431DBC
l0000000000431DBC:
	x2 = 0x00000000004DF000
	x0 = x2 + 0xFFFFFFFFFFFFFBE8
	Mem0[x0 + 48:word64] = 0x0000000000000000
	branch x19 != 0x0000000000000000 l0000000000431A68
	// succ:  l0000000000431DCC l0000000000431A68
l0000000000431DCC:
	w3 = Mem0[x29 + 136:word32]
	x0 = 0x00000000004E3000
	x20 = Mem0[x21 + 16:word64]
	NZCV = cond(w3 - w31)
	Mem0[x0 + 1192:word64] = x19
l0000000000431E54:
	x22 = 0x00000000004E3000
	x0 = Mem0[x22 + 720:word64]
	branch x0 == 0x0000000000000000 l0000000000431E70
	// succ:  l0000000000431E60 l0000000000431E70
l0000000000431E60:
	x1 = 0x00000000004AC000
	x1 = x1 + 0x0000000000000560
	w2 = 0x00000E61
	call sh_xfree (retsize: 0;)
	// succ:  l0000000000431E70
l0000000000431E70:
	x23 = 0x00000000004DF000
	x0 = Mem0[x23 + 2888:word64]
	branch x0 == 0x0000000000000000 l0000000000431E9C
	// succ:  l0000000000431E7C l0000000000431E9C
l0000000000431E7C:
	strlen(x0)
	sp = sp + 0xFFFFFFFFFFFFFFF8
	x1 = 0x00000000004AC000
	x1 = x1 + 0x0000000000000560
	w2 = 0x00000E62
	x0 = x0 + 0x0000000000000001
	call sh_xmalloc (retsize: 0;)
	x1 = Mem0[x23 + 2888:word64]
	strcpy(x0, x1)
	sp = sp + 0xFFFFFFFFFFFFFFF8
	// succ:  l0000000000431E9C
l0000000000431E9C:
	Mem0[x22 + 720:word64] = x0
	goto l0000000000431934
	// succ:  l0000000000431934
l0000000000431EA4:
	x0 = 0x00000000004E1000
	w0 = Mem0[x0 + 1716:word32]
	branch w0 != 0x00000000 l000000000043190C
	// succ:  l0000000000431EB0 l000000000043190C
l0000000000431EB0:
	x0 = 0x00000000004DE000
	w1 = Mem0[x0 + 1928:word32]
	w2 = Mem0[x5 + 44:word32]
	w1 = w1 - w2
	Mem0[x0 + 1928:word32] = w1
	goto l000000000043190C
	// succ:  l000000000043190C
l0000000000431EC8:
	branch w4 == 0x00000000 l0000000000431ED4
	// succ:  l0000000000431ECC l0000000000431ED4
l0000000000431ECC:
	x0 = 0x00000000004E3000
	w25 = Mem0[x0 + 1200:word32]
	// succ:  l0000000000431ED4
l0000000000431ED4:
	w0 = w19
	w1 = w20
	call fn0000000000430150 (retsize: 0;)
	call unlink_fifo_list (retsize: 0;)
	x0 = 0x0000000000000000
	call fn000000000043020C (retsize: 0;)
	w19 = w25
	// succ:  l0000000000431EF0
l0000000000431EF0:
	x31 = x29 - 0x0000000000000010
	w0 = w19
	v43 = sp + 48
	x21 = Mem0[v43:word64]
	v43 = v43 + 8
	x22 = Mem0[v43:word64]
	v44 = sp + 32
	x19 = Mem0[v44:word64]
	v44 = v44 + 8
	x20 = Mem0[v44:word64]
	v45 = sp + 64
	x23 = Mem0[v45:word64]
	v45 = v45 + 8
	x24 = Mem0[v45:word64]
	v46 = sp + 80
	x25 = Mem0[v46:word64]
	v46 = v46 + 8
	x26 = Mem0[v46:word64]
	v47 = sp + 96
	x27 = Mem0[v47:word64]
	v47 = v47 + 8
	x28 = Mem0[v47:word64]
	v48 = sp + 16
	x29 = Mem0[v48:word64]
	v48 = v48 + 8
	x30 = Mem0[v48:word64]
	x31 = x31 + 0x00000000000000D0
	return
	// succ:  fn00000000004318B4_exit
l0000000000431F18:
	x0 = Mem0[x27 + 8:word64]
	w1 = w23
	x0 = Mem0[x0:word64]
	call builtin_address_internal (retsize: 0;)
	x23 = x0
	branch x0 == 0x0000000000000000 l0000000000431D78
	// succ:  l0000000000431F30 l0000000000431D78
l0000000000431F30:
	w0 = Mem0[x0 + 16:word32]
	branch (w0 & 0x00000010) == 0x00000000 l0000000000431D78
	// succ:  l0000000000431F38 l0000000000431D78
l0000000000431F38:
	x0 = Mem0[x27 + 8:word64]
	x2 = Mem0[x19 + 8:word64]
	w1 = Mem0[x0 + 8:word32]
	w1 = w1 | 0x00010000
	Mem0[x0 + 8:word32] = w1
	w3 = Mem0[x2 + 8:word32]
	branch w25 == 0x00000000 l0000000000431D4C
	// succ:  l0000000000431F54 l0000000000431D4C
l0000000000431F54:
	w1 = 0x000000B0
	w1 = DPB(w1, 0x00000042, 16)
	w3 = w3 | w1
	Mem0[x2 + 8:word32] = w3
	goto l0000000000431D5C
	// succ:  l0000000000431D5C
l0000000000431F68:
	w19 = 0x00000000
	goto l0000000000431EF0
	// succ:  l0000000000431EF0
l0000000000431F70:
	w0 = 0x00000008
	Mem0[x23 + 1184:word32] = w0
	goto l0000000000431A00
	// succ:  l0000000000431A00
l0000000000431F7C:
	x0 = 0x00000000004DE000
	w0 = Mem0[x0 + 1716:word32]
	branch w0 != 0x00000000 l00000000004323E0
	// succ:  l0000000000431F88 l00000000004323E0
l0000000000431F88:
	x0 = Mem0[x19 + 8:word64]
	x20 = 0x0000000000000000
	x0 = Mem0[x0:word64]
	Mem0[x29 + 168:word32] = w20
	call find_function (retsize: 0;)
	Mem0[x29 + 128:word64] = x0
	goto l0000000000431A98
	// succ:  l0000000000431A98
l0000000000431FA4:
	call throw_to_top_level (retsize: 0;)
	goto l0000000000431AC0
	// succ:  l0000000000431AC0
l0000000000431FAC:
	x2 = Mem0[x2:word64]
	v55 = Mem0[x2:byte]
	w3 = (word32) v55
	w31 = w3 - 0x0000002D
	NZCV = cond(w31)
	branch Test(NE,Z) l0000000000431D70
	// succ:  l0000000000431FBC l0000000000431D70
l0000000000431FBC:
	x28 = x2 + 0x0000000000000001
	x0 = x28
	w1 = 0x00000041
	strchr(x0, x1)
	sp = sp + 0xFFFFFFFFFFFFFFF8
	branch x0 == 0x0000000000000000 l0000000000432160
	// succ:  l0000000000431FD0 l0000000000432160
l0000000000431FD0:
	x0 = Mem0[x27 + 8:word64]
	branch x23 == 0x0000000000000000 l0000000000432364
	// succ:  l0000000000431FD8 l0000000000432364
l0000000000431FD8:
	w0 = Mem0[x0 + 8:word32]
	// succ:  l0000000000431FDC
l0000000000431FDC:
	branch (w0 & 0x00000000) == 0x00000000 l0000000000431D70
	// succ:  l0000000000431FE0 l0000000000431D70
l0000000000431FE0:
	x0 = Mem0[x19 + 8:word64]
	w1 = 0x00000041
	x28 = Mem0[x0:word64]
	x28 = x28 + 0x0000000000000001
	x0 = x28
	strchr(x0, x1)
	sp = sp + 0xFFFFFFFFFFFFFFF8
	x31 = x0 - x31
	NZCV = cond(x31)
	w1 = 0x00000067
	x0 = x28
l0000000000432018:
	x0 = x26
	goto l0000000000431C70
	// succ:  l0000000000431C70
l0000000000432020:
	x22 = 0x00000000004E3000
	x0 = Mem0[x22 + 720:word64]
	x25 = 0x00000000004AC000
	strlen(x0)
	sp = sp + 0xFFFFFFFFFFFFFFF8
	x1 = x25 + 0x0000000000000560
	w2 = 0x00000F8F
	x0 = x0 + 0x0000000000000001
	call sh_xmalloc (retsize: 0;)
	x1 = Mem0[x22 + 720:word64]
	x23 = 0x00000000004E3000
	strcpy(x0, x1)
	sp = sp + 0xFFFFFFFFFFFFFFF8
	x27 = x0
	w0 = Mem0[x23 + 1184:word32]
	w22 = Mem0[x21:word32]
	branch (w0 & 0x00000004) == 0x00000000 l0000000000432234
	// succ:  l000000000043205C l0000000000432234
l000000000043205C:
	w6 = w22 & 0x00000040
	Mem0[x29 + 128:word32] = w6
	branch (w22 & 0x00000040) == 0x00000000 l0000000000432468
	// succ:  l0000000000432068 l0000000000432468
l0000000000432068:
	x1 = 0x00000000004DF000
	x21 = Mem0[x21 + 16:word64]
	x0 = Mem0[x19 + 8:word64]
	w1 = Mem0[x1 + 3696:word32]
	Mem0[x29 + 136:word64] = x21
	x28 = Mem0[x0:word64]
	branch w1 == 0x00000000 l0000000000432174
	// succ:  l0000000000432084 l0000000000432174
l0000000000432084:
	x0 = x28
	w1 = 0x0000002F
	call mbschr (retsize: 0;)
	branch x0 == 0x0000000000000000 l0000000000432174
	// succ:  l0000000000432094 l0000000000432174
l0000000000432094:
	x1 = 0x00000000004AC000
	w2 = 0x00000005
	x1 = x1 + 0x00000000000006A8
	x0 = 0x0000000000000000
	dcgettext(x0, x1, x2)
	sp = sp + 0xFFFFFFFFFFFFFFF8
	x1 = x28
	call internal_error (retsize: 0;)
	w22 = 0x00000001
	x0 = 0x00000000004E3000
	w6 = Mem0[x29 + 128:word32]
	Mem0[x0 + 1200:word32] = w22
	x21 = 0x0000000000000000
	branch w6 != 0x00000000 l0000000000432394
	// succ:  l00000000004320C8 l0000000000432394
l00000000004320C8:
	w0 = 0xFFFFFFFF
	w1 = w0
	call fn0000000000430150 (retsize: 0;)
	x6 = 0x00000000004DF000
	w0 = Mem0[x6 + 3168:word32]
	branch w0 == 0x00000000 l0000000000432150
	// succ:  l00000000004320E0 l0000000000432150
l00000000004320E0:
	branch x21 == 0x0000000000000000 l00000000004320F4
	// succ:  l00000000004320E4 l00000000004320F4
l00000000004320E4:
	x0 = x21
	x1 = x25 + 0x0000000000000560
	w2 = 0x000012A5
	call sh_xfree (retsize: 0;)
	// succ:  l00000000004320F4
l00000000004320F4:
	x0 = Mem0[x29 + 160:word64]
	call fn000000000043020C (retsize: 0;)
	branch x27 == 0x0000000000000000 l0000000000432110
	// succ:  l0000000000432100 l0000000000432110
l0000000000432100:
	x0 = x27
	x1 = x25 + 0x0000000000000560
	w2 = 0x00000F9C
	call sh_xfree (retsize: 0;)
	// succ:  l0000000000432110
l0000000000432110:
	x0 = x19
	call dispose_words (retsize: 0;)
	branch x20 == 0x0000000000000000 l0000000000432134
	// succ:  l000000000043211C l0000000000432134
l000000000043211C:
	w2 = Mem0[x29 + 104:word32]
	x7 = 0x00000000004DF000
	w0 = Mem0[x29 + 100:word32]
	x1 = x7 + 0xFFFFFFFFFFFFFBE8
	Mem0[x1 + 4:word32] = w2
	Mem0[x1 + 8:word32] = w0
	// succ:  l0000000000432134
l0000000000432134:
	x1 = 0x00000000004AC000
	x0 = x1 + 0x0000000000000658
	call discard_unwind_frame (retsize: 0;)
	x2 = Mem0[x29 + 112:word64]
	w19 = w22
	Mem0[x2 + 1192:word64] = 0x0000000000000000
	goto l0000000000431EF0
	// succ:  l0000000000431EF0
l0000000000432150:
	call unlink_fifo_list (retsize: 0;)
	goto l00000000004320E0
	// succ:  l00000000004320E0
l0000000000432158:
	call fn0000000000430CD8 (retsize: 0;)
	goto l0000000000431C00
	// succ:  l0000000000431C00
l0000000000432160:
	x0 = x28
	w1 = 0x00000067
	strchr(x0, x1)
	sp = sp + 0xFFFFFFFFFFFFFFF8
	branch x0 != 0x0000000000000000 l0000000000431FD0
	// succ:  l0000000000432170 l0000000000431FD0
l0000000000432170:
	goto l0000000000431D70
	// succ:  l0000000000431D70
l0000000000432174:
	x0 = x28
	call search_for_command (retsize: 0;)
	x21 = x0
	branch x0 == 0x0000000000000000 l0000000000432190
	// succ:  l0000000000432184 l0000000000432190
l0000000000432184:
	call maybe_make_export_env (retsize: 0;)
	x0 = x21
	call put_command_name_into_env (retsize: 0;)
	// succ:  l0000000000432190
l0000000000432190:
	w7 = Mem0[x29 + 128:word32]
	branch w7 == 0x00000000 l0000000000432240
	// succ:  l0000000000432198 l0000000000432240
l0000000000432198:
	call reset_terminating_signals (retsize: 0;)
	call restore_original_signals (retsize: 0;)
	branch w24 != 0x00000000 l00000000004323B4
	// succ:  l00000000004321A4 l00000000004323B4
l00000000004321A4:
	x2 = Mem0[x29 + 120:word64]
	branch x2 == 0x0000000000000000 l00000000004321B4
	// succ:  l00000000004321AC l00000000004321B4
l00000000004321AC:
	x0 = x2
	call close_fd_bitmap (retsize: 0;)
	// succ:  l00000000004321B4
l00000000004321B4:
	w0 = 0xFFFFFFFF
	w1 = w0
	x20 = 0x00000000004DE000
	call fn00000000004307F4 (retsize: 0;)
	w22 = Mem0[x20 + 1704:word32]
	branch w24 == 0x00000000 l00000000004321D0
	// succ:  l00000000004321CC l00000000004321D0
l00000000004321CC:
	Mem0[x20 + 1704:word32] = 0x00000000
	// succ:  l00000000004321D0
l00000000004321D0:
	w0 = 0x00000008
	x3 = Mem0[x29 + 136:word64]
	Mem0[x23 + 1184:word32] = w0
	branch x3 == 0x0000000000000000 l00000000004321F0
	// succ:  l00000000004321E0 l00000000004321F0
l00000000004321E0:
	x0 = x3
	w1 = 0x00000001
	call do_redirections (retsize: 0;)
	branch w0 != 0x00000000 l0000000000432888
	// succ:  l00000000004321F0 l0000000000432888
l00000000004321F0:
	branch w24 == 0x00000000 l00000000004321F8
	// succ:  l00000000004321F4 l00000000004321F8
l00000000004321F4:
	Mem0[x20 + 1704:word32] = w22
	// succ:  l00000000004321F8
l00000000004321F8:
	branch x21 != 0x0000000000000000 l000000000043291C
	// succ:  l00000000004321FC l000000000043291C
l00000000004321FC:
	x22 = 0x00000000004AC000
	x22 = x22 + 0x00000000000006E0
	x0 = x22
	call find_function (retsize: 0;)
	x20 = x0
	branch x0 == 0x0000000000000000 l000000000043276C
	// succ:  l0000000000432214 l000000000043276C
l0000000000432214:
	x0 = x22
	call make_word (retsize: 0;)
	x1 = x19
	call make_word_list (retsize: 0;)
	x1 = x0
	x0 = x20
	call execute_shell_function (retsize: 0;)
	exit(x0)
l0000000000432234:
	w3 = w22 & 0x00000040
	Mem0[x29 + 128:word32] = w3
	goto l0000000000432068
	// succ:  l0000000000432068
l0000000000432240:
	x0 = x27
	strlen(x0)
	sp = sp + 0xFFFFFFFFFFFFFFF8
	w2 = 0x0000124B
	x1 = x25 + 0x0000000000000560
	x0 = x0 + 0x0000000000000001
	call sh_xmalloc (retsize: 0;)
	x1 = x27
	strcpy(x0, x1)
	sp = sp + 0xFFFFFFFFFFFFFFF8
	w1 = w24
	call make_child (retsize: 0;)
	branch w0 == 0x00000000 l0000000000432198
	// succ:  l000000000043226C l0000000000432198
l000000000043226C:
	w0 = 0xFFFFFFFF
	w1 = w0
	w22 = Mem0[x29 + 128:word32]
	call fn0000000000430150 (retsize: 0;)
	x6 = 0x00000000004DF000
	w0 = Mem0[x6 + 3168:word32]
	branch w0 != 0x00000000 l00000000004320E0
	// succ:  l0000000000432288 l00000000004320E0
l0000000000432288:
	goto l0000000000432150
	// succ:  l0000000000432150
l000000000043228C:
	Mem0[x29 + 144:word32] = w27
	goto l0000000000431964
	// succ:  l0000000000431964
l0000000000432294:
	branch x27 == 0x0000000000000000 l00000000004322B4
	// succ:  l0000000000432298 l00000000004322B4
l0000000000432298:
	x0 = Mem0[x27 + 8:word64]
	branch x0 == 0x0000000000000000 l00000000004322B4
	// succ:  l00000000004322A0 l00000000004322B4
l00000000004322A0:
	x0 = Mem0[x0:word64]
	branch x0 == 0x0000000000000000 l00000000004322B4
	// succ:  l00000000004322A8 l00000000004322B4
l00000000004322A8:
	v42 = Mem0[x0:byte]
	w0 = (word32) v42
	w31 = w0 - 0x00000025
	NZCV = cond(w31)
	branch Test(EQ,Z) l0000000000431D08
	// succ:  l00000000004322B4 l0000000000431D08
l00000000004322B4:
	call maybe_make_export_env (retsize: 0;)
	x23 = 0x00000000004E3000
	x0 = Mem0[x23 + 720:word64]
	strlen(x0)
	sp = sp + 0xFFFFFFFFFFFFFFF8
	x1 = 0x00000000004AC000
	x1 = x1 + 0x0000000000000560
	w2 = 0x00000E8D
	x0 = x0 + 0x0000000000000001
	call sh_xmalloc (retsize: 0;)
	x1 = Mem0[x23 + 720:word64]
	strcpy(x0, x1)
	sp = sp + 0xFFFFFFFFFFFFFFF8
	w1 = w24
	call make_child (retsize: 0;)
	branch w0 == 0x00000000 l00000000004319E4
	// succ:  l00000000004322EC l00000000004319E4
l00000000004322EC:
	goto l0000000000431ED4
	// succ:  l0000000000431ED4
l00000000004322F0:
	w0 = Mem0[x25 + 644:word32]
	call termsig_handler (retsize: 0;)
	goto l0000000000431AB4
	// succ:  l0000000000431AB4
l00000000004322FC:
	x0 = x19
	w1 = 0x00000001
	call xtrace_print_word_list (retsize: 0;)
	goto l0000000000431A80
	// succ:  l0000000000431A80
l000000000043230C:
	w2 = Mem0[x29 + 136:word32]
	branch w2 != 0x00000000 l0000000000431AF4
	// succ:  l0000000000432314 l0000000000431AF4
l0000000000432314:
	branch w24 == 0x00000000 l0000000000432690
	// succ:  l0000000000432318 l0000000000432690
l0000000000432318:
	x1 = 0x00000000004AC000
	x1 = x1 + 0x0000000000000648
	// succ:  l0000000000432320
l0000000000432320:
	x21 = 0x00000000004E1000
	x3 = 0x00000000004E3000
	x2 = Mem0[x21 + 1688:word64]
	Mem0[x3 + 1192:word64] = x1
	x0 = x1
	x1 = 0x00000000004E1000
	Mem0[x1 + 1704:word64] = x2
	Mem0[x29 + 112:word64] = x3
	call builtin_address (retsize: 0;)
	x1 = x0
	Mem0[x21 + 1688:word64] = x0
	x0 = x19
	call x1 (retsize: 0;)
	w22 = w0
	// succ:  l0000000000432358
l0000000000432358:
	x0 = Mem0[x29 + 160:word64]
	call fn000000000043020C (retsize: 0;)
	goto l0000000000432110
	// succ:  l0000000000432110
l0000000000432364:
	x0 = Mem0[x0:word64]
	w1 = w23
	call builtin_address_internal (retsize: 0;)
	x23 = x0
	branch x0 == 0x0000000000000000 l0000000000431D78
	// succ:  l0000000000432378 l0000000000431D78
l0000000000432378:
	w0 = Mem0[x0 + 16:word32]
	branch (w0 & 0x00000010) == 0x00000000 l0000000000431D78
	// succ:  l0000000000432380 l0000000000431D78
l0000000000432380:
	x1 = Mem0[x27 + 8:word64]
	w0 = Mem0[x1 + 8:word32]
	w0 = w0 | 0x00010000
	Mem0[x1 + 8:word32] = w0
	goto l0000000000431FDC
	// succ:  l0000000000431FDC
l0000000000432394:
	w0 = 0x00000001
	exit(x0)
l00000000004323AC:
	x0 = x27
	goto l0000000000431D80
	// succ:  l0000000000431D80
l00000000004323B4:
	branch (w22 & 0x00000400) == 0x00000000 l00000000004323C4
	// succ:  l00000000004323B8 l00000000004323C4
l00000000004323B8:
	x0 = Mem0[x29 + 136:word64]
	call stdin_redirects (retsize: 0;)
	branch w0 == 0x00000000 l0000000000432868
	// succ:  l00000000004323C4 l0000000000432868
l00000000004323C4:
	x1 = 0x00000000004D6000
	w0 = Mem0[x1 + 3420:word32]
	branch w0 != 0x00000000 l00000000004321A4
	// succ:  l00000000004323D0 l00000000004321A4
l00000000004323D0:
	call fn0000000000430CD8 (retsize: 0;)
	goto l00000000004321A4
	// succ:  l00000000004321A4
l00000000004323D8:
	call fn00000000004308B8 (retsize: 0;)
	goto l0000000000431BF4
	// succ:  l0000000000431BF4
l00000000004323E0:
	x0 = Mem0[x19 + 8:word64]
	x0 = Mem0[x0:word64]
	call find_special_builtin (retsize: 0;)
	x20 = x0
	branch x0 == 0x0000000000000000 l0000000000431F88
	// succ:  l00000000004323F4 l0000000000431F88
l00000000004323F4:
	x0 = 0x00000000004DE000
	w0 = Mem0[x0 + 1712:word32]
	branch w0 == 0x00000000 l0000000000432410
	// succ:  l0000000000432400 l0000000000432410
l0000000000432400:
	w6 = 0x00000001
	Mem0[x29 + 128:word64] = 0x0000000000000000
	Mem0[x29 + 168:word32] = w6
	goto l0000000000431A98
	// succ:  l0000000000431A98
l0000000000432410:
	x0 = 0x00000000004E3000
	w3 = 0x00000001
	w0 = Mem0[x0 + 1216:word32]
	Mem0[x29 + 128:word64] = 0x0000000000000000
	Mem0[x29 + 168:word32] = w3
	branch w0 == 0x00000000 l0000000000431A98
	// succ:  l0000000000432428 l0000000000431A98
l0000000000432428:
	x1 = 0x00000000004E3000
	w0 = 0x00000004
	Mem0[x1 + 1200:word32] = w3
	call jump_to_top_level (retsize: 0;)
	w0 = 0xFFFFFFFF
	w1 = w0
	call fn0000000000430150 (retsize: 0;)
	w19 = 0x00000000
	call unlink_fifo_list (retsize: 0;)
	w7 = Mem0[x29 + 136:word32]
	branch w7 != 0x00000000 l0000000000432894
	// succ:  l0000000000432454 l0000000000432894
l0000000000432454:
	x0 = 0x0000000000000000
	call fn000000000043020C (retsize: 0;)
	w0 = w19
	call set_pipestatus_from_exit (retsize: 0;)
	goto l0000000000431EF0
	// succ:  l0000000000431EF0
l0000000000432468:
	call fifos_pending (retsize: 0;)
	NZCV = cond(w0 - w31)
	w22 = Mem0[x21:word32]
	branch Test(LE,ZCV) l0000000000432234
	// succ:  l0000000000432478 l0000000000432234
l0000000000432478:
	w22 = w22 & 0xFFFFFFBF
	Mem0[x29 + 128:word32] = 0x00000000
	Mem0[x21:word32] = w22
	goto l0000000000432068
	// succ:  l0000000000432068
l0000000000432488:
	x22 = Mem0[x21 + 16:word64]
	w25 = Mem0[x21:word32]
	call num_fifos (retsize: 0;)
	w27 = w0
	x0 = x29 + 0x0000000000000060
	call copy_fifo_list (retsize: 0;)
	x24 = x0
	w1 = 0x00000003
	x0 = x22
	call do_redirections (retsize: 0;)
	branch w0 != 0x00000000 l000000000043269C
	// succ:  l00000000004324B4 l000000000043269C
l00000000004324B4:
	x6 = 0x0000000000471000
	x0 = x6 + 0xFFFFFFFFFFFFFCE0
	x7 = 0x00000000004DF000
	x22 = x7 + 0xFFFFFFFFFFFFFBE8
	x31 = x20 - x0
	NZCV = cond(x31)
	x21 = Mem0[x22 + 56:word64]
	branch Test(EQ,Z) l0000000000432814
	// succ:  l00000000004324D0 l0000000000432814
l00000000004324D0:
	x0 = Mem0[x22 + 24:word64]
	branch x0 == 0x0000000000000000 l00000000004324E0
	// succ:  l00000000004324D8 l00000000004324E0
l00000000004324D8:
	call dispose_redirects (retsize: 0;)
	Mem0[x22 + 24:word64] = 0x0000000000000000
	// succ:  l00000000004324E0
l00000000004324E0:
	branch x21 == 0x0000000000000000 l0000000000432500
	// succ:  l00000000004324E4 l0000000000432500
l00000000004324E4:
	x0 = 0x00000000004AC000
	x0 = x0 + 0x0000000000000690
	call begin_unwind_frame (retsize: 0;)
	x0 = 0x0000000000430000
	x0 = x0 + 0x0000000000000180
	x1 = x21
	call add_unwind_protect (retsize: 0;)
	// succ:  l0000000000432500
l0000000000432500:
	x1 = 0x00000000004DF000
	x0 = x1 + 0xFFFFFFFFFFFFFBE8
	Mem0[x0 + 56:word64] = 0x0000000000000000
	branch x20 == 0x0000000000000000 l00000000004327D8
	// succ:  l0000000000432510 l00000000004327D8
l0000000000432510:
	x0 = x20
	x1 = x19
	w2 = w25
	w3 = 0x00000000
	call fn0000000000430940 (retsize: 0;)
	w22 = w0
	// succ:  l0000000000432528
l0000000000432528:
	x25 = 0x00000000004DE000
	x0 = Mem0[x25 + 1648:word64]
	fflush(x0)
	sp = sp + 0xFFFFFFFFFFFFFFF8
	x0 = Mem0[x25 + 1648:word64]
	call fpurge (retsize: 0;)
	x0 = Mem0[x25 + 1648:word64]
	ferror(x0)
	sp = sp + 0xFFFFFFFFFFFFFFF8
	branch w0 != 0x00000000 l00000000004327C4
	// succ:  l0000000000432548 l00000000004327C4
l0000000000432548:
	x0 = 0x000000000046D000
	x0 = x0 + 0xFFFFFFFFFFFFFC64
	x31 = x20 - x0
	NZCV = cond(x31)
	branch Test(EQ,Z) l00000000004325F8
	// succ:  l0000000000432558 l00000000004325F8
l0000000000432558:
	branch x21 == 0x0000000000000000 l0000000000432574
	// succ:  l000000000043255C l0000000000432574
l000000000043255C:
	x6 = 0x00000000004DF000
	x0 = 0x00000000004AC000
	x1 = x6 + 0xFFFFFFFFFFFFFBE8
	x0 = x0 + 0x0000000000000690
	Mem0[x1 + 56:word64] = x21
	call discard_unwind_frame (retsize: 0;)
	// succ:  l0000000000432574
l0000000000432574:
	x7 = 0x00000000004DF000
	x23 = x7 + 0xFFFFFFFFFFFFFBE8
	x21 = Mem0[x23 + 56:word64]
	branch x21 == 0x0000000000000000 l000000000043259C
	// succ:  l0000000000432584 l000000000043259C
l0000000000432584:
	w1 = 0x00000001
	x0 = x21
	call do_redirections (retsize: 0;)
	x0 = x21
	call dispose_redirects (retsize: 0;)
	Mem0[x23 + 56:word64] = 0x0000000000000000
	// succ:  l000000000043259C
l000000000043259C:
	call num_fifos (retsize: 0;)
	NZCV = cond(w27 - w0)
	branch Test(LT,NV) l000000000043279C
	// succ:  l00000000004325A8 l000000000043279C
l00000000004325A8:
	x1 = 0x00000000004AC000
	x0 = x24
	x1 = x1 + 0x0000000000000560
	w2 = 0x000011E7
	call sh_xfree (retsize: 0;)
	branch x20 == 0x0000000000000000 l00000000004327AC
	// succ:  l00000000004325C0 l00000000004327AC
l00000000004325C0:
	w31 = w22 - 0x00000100
	NZCV = cond(w31)
	branch Test(GT,NZV) l0000000000432830
	// succ:  l00000000004325C8 l0000000000432830
l00000000004325C8:
	x0 = 0x00000000004DE000
	w0 = Mem0[x0 + 1716:word32]
	branch w0 == 0x00000000 l00000000004325EC
	// succ:  l00000000004325D4 l00000000004325EC
l00000000004325D4:
	w0 = Mem0[x29 + 168:word32]
	branch w0 == 0x00000000 l00000000004325EC
	// succ:  l00000000004325DC l00000000004325EC
l00000000004325DC:
	x0 = 0x00000000004DF000
	x0 = Mem0[x0 + 3208:word64]
	branch x0 == 0x0000000000000000 l00000000004325EC
	// succ:  l00000000004325E8 l00000000004325EC
l00000000004325E8:
	call merge_temporary_env (retsize: 0;)
	// succ:  l00000000004325EC
l00000000004325EC:
	w0 = w22
	call set_pipestatus_from_exit (retsize: 0;)
	goto l0000000000432358
	// succ:  l0000000000432358
l00000000004325F8:
	x1 = Mem0[x23 + 1688:word64]
	x2 = 0x0000000000471000
	x0 = x2 + 0xFFFFFFFFFFFFFCE0
	x31 = x1 - x0
	NZCV = cond(x31)
	branch Test(NE,Z) l0000000000432558
	// succ:  l000000000043260C l0000000000432558
l000000000043260C:
	branch x21 == 0x0000000000000000 l0000000000432870
	// succ:  l0000000000432610 l0000000000432870
l0000000000432610:
	x0 = x21
	call dispose_redirects (retsize: 0;)
	x3 = 0x00000000004DF000
	x1 = x3 + 0xFFFFFFFFFFFFFBE8
	x2 = Mem0[x1 + 24:word64]
	x0 = 0x00000000004AC000
	x0 = x0 + 0x0000000000000690
	Mem0[x1 + 56:word64] = x2
	Mem0[x1 + 24:word64] = 0x0000000000000000
	call discard_unwind_frame (retsize: 0;)
	goto l0000000000432574
	// succ:  l0000000000432574
l0000000000432690:
	x1 = 0x00000000004AC000
	x1 = x1 + 0x0000000000000650
	goto l0000000000432320
	// succ:  l0000000000432320
l000000000043269C:
	x3 = 0x00000000004DF000
	x21 = x3 + 0xFFFFFFFFFFFFFBE8
	x22 = Mem0[x21 + 56:word64]
	w1 = 0x00000001
	x0 = x22
	call do_redirections (retsize: 0;)
	x0 = x22
	call dispose_redirects (retsize: 0;)
	x0 = Mem0[x21 + 24:word64]
	Mem0[x21 + 56:word64] = 0x0000000000000000
	branch x0 == 0x0000000000000000 l00000000004326D0
	// succ:  l00000000004326C8 l00000000004326D0
l00000000004326C8:
	call dispose_redirects (retsize: 0;)
	Mem0[x21 + 24:word64] = 0x0000000000000000
	// succ:  l00000000004326D0
l00000000004326D0:
	x1 = 0x00000000004AC000
	x0 = x24
	x1 = x1 + 0x0000000000000560
	w2 = 0x0000119C
	call sh_xfree (retsize: 0;)
	w22 = 0x00000001
	branch x20 == 0x0000000000000000 l00000000004327BC
	// succ:  l00000000004326EC l00000000004327BC
l00000000004326EC:
	w6 = Mem0[x29 + 168:word32]
	branch w6 == 0x00000000 l00000000004325EC
	// succ:  l00000000004326F4 l00000000004325EC
l00000000004326F4:
	x7 = 0x00000000004DF000
	x1 = 0x00000000004DE000
	x0 = x7 + 0xFFFFFFFFFFFFFBE8
	w2 = 0x00000001
	w1 = Mem0[x1 + 1716:word32]
	Mem0[x0 + 40:word32] = w2
	branch w1 != 0x00000000 l00000000004325DC
	// succ:  l0000000000432710 l00000000004325DC
l0000000000432710:
	goto l00000000004325EC
	// succ:  l00000000004325EC
l0000000000432714:
	branch w1 == 0x00000000 l0000000000431B1C
	// succ:  l0000000000432718 l0000000000431B1C
l0000000000432718:
	x1 = Mem0[x21 + 16:word64]
	branch x1 != 0x0000000000000000 l0000000000431B1C
	// succ:  l0000000000432720 l0000000000431B1C
l0000000000432720:
	x0 = 0x00000000004AC000
	x0 = x0 + 0x0000000000000668
	call get_string_value (retsize: 0;)
	branch x0 == 0x0000000000000000 l0000000000432760
	// succ:  l0000000000432730 l0000000000432760
l0000000000432730:
	v64 = Mem0[x0:byte]
	w1 = (word32) v64
	w31 = w1 - 0x00000065
	NZCV = cond(w31)
	branch Test(EQ,Z) l00000000004328B4
	// succ:  l000000000043273C l00000000004328B4
l000000000043273C:
	w31 = w1 - 0x00000073
	NZCV = cond(w31)
	branch Test(EQ,Z) l000000000043289C
	// succ:  l0000000000432744 l000000000043289C
l0000000000432744:
	w1 = 0x00000019
	// succ:  l0000000000432748
l0000000000432748:
	x0 = Mem0[x19 + 8:word64]
	x0 = Mem0[x0:word64]
	call get_job_by_name (retsize: 0;)
	w31 = w0 + 0x00000001
	NZCV = cond(w31)
	w22 = w0
	branch Test(NE,Z) l00000000004328CC
	// succ:  l0000000000432760 l00000000004328CC
l0000000000432760:
	x0 = Mem0[x19 + 8:word64]
	x0 = Mem0[x0:word64]
	goto l0000000000431B1C
	// succ:  l0000000000431B1C
l000000000043276C:
	x0 = x28
	call ansic_shouldquote (retsize: 0;)
	branch w0 != 0x00000000 l00000000004327FC
	// succ:  l0000000000432778 l00000000004327FC
l0000000000432778:
	x1 = 0x00000000004AC000
	w2 = 0x00000005
	x1 = x1 + 0x0000000000000700
	x0 = 0x0000000000000000
	dcgettext(x0, x1, x2)
	sp = sp + 0xFFFFFFFFFFFFFFF8
	x1 = x28
	call internal_error (retsize: 0;)
	w0 = 0x0000007F
	exit(x0)
l000000000043279C:
	w1 = Mem0[x29 + 96:word32]
	x0 = x24
	call close_new_fifos (retsize: 0;)
	goto l00000000004325A8
	// succ:  l00000000004325A8
l00000000004327AC:
	w31 = w22 - 0x00000102
	NZCV = cond(w31)
	branch Test(EQ,Z) l0000000000432828
	// succ:  l00000000004327B4 l0000000000432828
l00000000004327B4:
	w31 = w22 - 0x00000100
	NZCV = cond(w31)
	branch Test(LE,ZCV) l00000000004325EC
	// succ:  l00000000004327BC l00000000004325EC
l00000000004327BC:
	w22 = 0x00000001
	goto l00000000004325EC
	// succ:  l00000000004325EC
l00000000004327C4:
	x0 = Mem0[x25 + 1648:word64]
	call clearerr (retsize: 0;)
	goto l0000000000432548
	// succ:  l0000000000432548
l00000000004327D8:
	x0 = Mem0[x29 + 128:word64]
	x3 = Mem0[x29 + 120:word64]
	x1 = x19
	w2 = w25
	w4 = w20
	w5 = w20
	call fn00000000004358AC (retsize: 0;)
	w22 = w0
	goto l0000000000432528
	// succ:  l0000000000432528
l00000000004327FC:
	x0 = x28
	w1 = w21
	x2 = x21
	call ansic_quote (retsize: 0;)
	x28 = x0
	goto l0000000000432778
	// succ:  l0000000000432778
l0000000000432814:
	x0 = x21
	call dispose_redirects (retsize: 0;)
	x21 = Mem0[x22 + 24:word64]
	Mem0[x22 + 24:word64] = 0x0000000000000000
	goto l00000000004324E0
	// succ:  l00000000004324E0
l0000000000432828:
	w22 = 0x00000002
	goto l00000000004325EC
	// succ:  l00000000004325EC
l0000000000432830:
	w0 = w22 - 0x00000101
	w31 = w0 - 0x00000004
	NZCV = cond(w31)
	w22 = 0x00000000
	branch Test(UGT,ZC) l00000000004326EC
	// succ:  l0000000000432840 l00000000004326EC
l0000000000432840:
	x1 = 0x00000000004AC000
	x1 = x1 + 0x0000000000000508
	v63 = Mem0[x1 + (uint64) ((uint32) w0):byte]
	w2 = (word32) v63
	x3 = 0x0000000000432858
	x2 = x3 + (int64) ((int8) w2)
l0000000000432868:
	call fn00000000004308B8 (retsize: 0;)
	goto l00000000004323C4
	// succ:  l00000000004323C4
l0000000000432870:
	x3 = 0x00000000004DF000
	x0 = x3 + 0xFFFFFFFFFFFFFBE8
	x1 = Mem0[x0 + 24:word64]
	Mem0[x0 + 24:word64] = x21
	Mem0[x0 + 56:word64] = x1
	goto l0000000000432574
	// succ:  l0000000000432574
l0000000000432888:
	call unlink_fifo_list (retsize: 0;)
	w0 = 0x00000001
	exit(x0)
l0000000000432894:
	w0 = w19
	exit(x0)
l000000000043289C:
	x1 = 0x00000000004AC000
	x1 = x1 + 0x0000000000000680
	strcmp(x0, x1)
	sp = sp + 0xFFFFFFFFFFFFFFF8
	branch w0 != 0x00000000 l0000000000432744
	// succ:  l00000000004328AC l0000000000432744
l00000000004328AC:
	w1 = 0x0000001A
	goto l0000000000432748
	// succ:  l0000000000432748
l00000000004328B4:
	x1 = 0x00000000004AC000
	x1 = x1 + 0x0000000000000678
	strcmp(x0, x1)
	sp = sp + 0xFFFFFFFFFFFFFFF8
	w1 = 0x0000001C
	branch w0 == 0x00000000 l0000000000432748
	// succ:  l00000000004328C8 l0000000000432748
l00000000004328C8:
	goto l0000000000432744
	// succ:  l0000000000432744
l00000000004328CC:
	x6 = 0x00000000004AC000
	x0 = x6 + 0x0000000000000658
	call run_unwind_frame (retsize: 0;)
	x19 = 0x00000000004E1000
	x1 = 0x00000000004AC000
	x2 = Mem0[x19 + 1688:word64]
	x1 = x1 + 0x0000000000000650
	x3 = 0x00000000004E3000
	Mem0[x3 + 1192:word64] = x1
	x0 = x1
	x1 = 0x00000000004E1000
	Mem0[x1 + 1704:word64] = x2
	call builtin_address (retsize: 0;)
	Mem0[x19 + 1688:word64] = x0
	w1 = 0x00000001
	w0 = w22
	call start_job (retsize: 0;)
	NZCV = cond(w0 - w31)
l000000000043291C:
	w1 = 0x00000000
	w2 = w1
	x3 = 0x0000000000000000
	x0 = x19
	call strvec_from_word_list (retsize: 0;)
	x1 = 0x00000000004DF000
	x2 = Mem0[x1 + 3240:word64]
	x1 = x0
	x0 = x21
	call shell_execve (retsize: 0;)
	exit(x0)
fn00000000004318B4_exit:


// execute_command_internal
// Return size: 0
void execute_command_internal()
execute_command_internal_entry:
	// succ:  l0000000000432948
l0000000000432948:
	sp = fp
	sp = sp + -336
	Mem0[sp:word64] = x29
	sp = sp + 8
	Mem0[sp:word64] = x30
	x29 = x31 + 0x0000000000000000
	v8 = sp + 16
	Mem0[v8:word64] = x19
	v8 = v8 + 8
	Mem0[v8:word64] = x20
	x20 = 0x00000000004E1000
	w5 = Mem0[x20 + 1660:word32]
	v12 = sp + 80
	Mem0[v12:word64] = x27
	v12 = v12 + 8
	Mem0[v12:word64] = x28
	v15 = sp + 32
	Mem0[v15:word64] = x21
	v15 = v15 + 8
	Mem0[v15:word64] = x22
	v18 = sp + 64
	Mem0[v18:word64] = x25
	v18 = v18 + 8
	Mem0[v18:word64] = x26
	v21 = sp + 48
	Mem0[v21:word64] = x23
	v21 = v21 + 8
	Mem0[v21:word64] = x24
	x19 = x0
	w27 = w1
	w28 = w2
	w21 = w3
	x25 = x4
	branch w5 != 0x00000000 l0000000000432A68
	// succ:  l0000000000432984 l0000000000432A68
l0000000000432984:
	x22 = 0x00000000004E1000
	w3 = Mem0[x22 + 1664:word32]
	branch w3 != 0x00000000 l0000000000432A68
	// succ:  l0000000000432990 l0000000000432A68
l0000000000432990:
	branch x0 == 0x0000000000000000 l0000000000432A70
	// succ:  l0000000000432994 l0000000000432A70
l0000000000432994:
	x0 = 0x00000000004DF000
	w0 = Mem0[x0 + 3700:word32]
	branch w0 != 0x00000000 l0000000000432AA0
	// succ:  l00000000004329A0 l0000000000432AA0
l00000000004329A0:
	x24 = 0x00000000004E1000
	w0 = Mem0[x24 + 644:word32]
	branch w0 != 0x00000000 l0000000000432A94
	// succ:  l00000000004329AC l0000000000432A94
l00000000004329AC:
	x1 = 0x00000000004E1000
	w0 = Mem0[x1 + 632:word32]
	branch w0 != 0x00000000 l0000000000432A8C
	// succ:  l00000000004329B8 l0000000000432A8C
l00000000004329B8:
	call run_pending_traps (retsize: 0;)
	x23 = 0x00000000004DF000
	w0 = Mem0[x19 + 4:word32]
	x2 = x23 + 0xFFFFFFFFFFFFFBE8
	x26 = 0x00000000004DF000
	Mem0[x2 + 16:word64] = x19
	w1 = Mem0[x26 + 3708:word32]
l0000000000432A68:
	x0 = 0x00000000004E3000
	w0 = Mem0[x0 + 1200:word32]
	// succ:  l0000000000432A70
l0000000000432A70:
	v33 = sp + 16
	x19 = Mem0[v33:word64]
	v33 = v33 + 8
	x20 = Mem0[v33:word64]
	v34 = sp + 32
	x21 = Mem0[v34:word64]
	v34 = v34 + 8
	x22 = Mem0[v34:word64]
	v35 = sp + 48
	x23 = Mem0[v35:word64]
	v35 = v35 + 8
	x24 = Mem0[v35:word64]
	v36 = sp + 64
	x25 = Mem0[v36:word64]
	v36 = v36 + 8
	x26 = Mem0[v36:word64]
	v37 = sp + 80
	x27 = Mem0[v37:word64]
	v37 = v37 + 8
	x28 = Mem0[v37:word64]
	x29 = Mem0[sp:word64]
	sp = sp + 8
	x30 = Mem0[sp:word64]
	sp = sp + 336
	return
	// succ:  execute_command_internal_exit
l0000000000432A8C:
	call throw_to_top_level (retsize: 0;)
	goto l00000000004329B8
	// succ:  l00000000004329B8
l0000000000432A94:
	w0 = Mem0[x24 + 644:word32]
	call termsig_handler (retsize: 0;)
	goto l00000000004329AC
	// succ:  l00000000004329AC
l0000000000432AA0:
	w0 = w3
	v38 = sp + 16
	x19 = Mem0[v38:word64]
	v38 = v38 + 8
	x20 = Mem0[v38:word64]
	v39 = sp + 32
	x21 = Mem0[v39:word64]
	v39 = v39 + 8
	x22 = Mem0[v39:word64]
	v40 = sp + 48
	x23 = Mem0[v40:word64]
	v40 = v40 + 8
	x24 = Mem0[v40:word64]
	v41 = sp + 64
	x25 = Mem0[v41:word64]
	v41 = v41 + 8
	x26 = Mem0[v41:word64]
	v42 = sp + 80
	x27 = Mem0[v42:word64]
	v42 = v42 + 8
	x28 = Mem0[v42:word64]
	x29 = Mem0[sp:word64]
	sp = sp + 8
	x30 = Mem0[sp:word64]
	sp = sp + 336
	return
	// succ:  execute_command_internal_exit
execute_command_internal_exit:


// execute_command
// Return size: 0
void execute_command()
execute_command_entry:
	// succ:  l0000000000434C40
l0000000000434C40:
	sp = fp
	sp = sp + -48
	Mem0[sp:word64] = x29
	sp = sp + 8
	Mem0[sp:word64] = x30
	x29 = x31 + 0x0000000000000000
	x1 = 0x00000000004DF000
	v9 = sp + 16
	Mem0[v9:word64] = x19
	v9 = v9 + 8
	Mem0[v9:word64] = x20
	x1 = x1 + 0xFFFFFFFFFFFFFBE8
	Mem0[sp + 32:word64] = x21
	x20 = 0x00000000004AC000
	x21 = x0
	w0 = 0x00000020
	Mem0[x1 + 48:word64] = 0x0000000000000000
	x20 = x20 + 0x00000000000007C8
	call new_fd_bitmap (retsize: 0;)
	x19 = x0
	x0 = x20
	call begin_unwind_frame (retsize: 0;)
	x0 = 0x0000000000430000
	x1 = x19
	x0 = x0 + 0x000000000000009C
	call add_unwind_protect (retsize: 0;)
	w2 = 0xFFFFFFFF
	w1 = 0x00000000
	w3 = w2
	x4 = x19
	x0 = x21
	call execute_command_internal (retsize: 0;)
	w21 = w0
	x0 = x19
	call dispose_fd_bitmap (retsize: 0;)
	x0 = x20
	call discard_unwind_frame (retsize: 0;)
	x0 = 0x00000000004DF000
	w0 = Mem0[x0 + 3168:word32]
	branch w0 == 0x00000000 l0000000000434D00
	// succ:  l0000000000434CC4 l0000000000434D00
l0000000000434CC4:
	x1 = 0x00000000004E1000
	w0 = Mem0[x1 + 644:word32]
	branch w0 != 0x00000000 l0000000000434CF4
	// succ:  l0000000000434CD0 l0000000000434CF4
l0000000000434CD0:
	x0 = 0x00000000004E1000
	w0 = Mem0[x0 + 632:word32]
	branch w0 == 0x00000000 l0000000000434CE0
	// succ:  l0000000000434CDC l0000000000434CE0
l0000000000434CDC:
	call throw_to_top_level (retsize: 0;)
	// succ:  l0000000000434CE0
l0000000000434CE0:
	w0 = w21
	v18 = sp + 16
	x19 = Mem0[v18:word64]
	v18 = v18 + 8
	x20 = Mem0[v18:word64]
	x21 = Mem0[sp + 32:word64]
	x29 = Mem0[sp:word64]
	sp = sp + 8
	x30 = Mem0[sp:word64]
	sp = sp + 48
	return
	// succ:  execute_command_exit
l0000000000434CF4:
	w0 = Mem0[x1 + 644:word32]
	call termsig_handler (retsize: 0;)
	goto l0000000000434CD0
	// succ:  l0000000000434CD0
l0000000000434D00:
	call unlink_fifo_list (retsize: 0;)
	goto l0000000000434CC4
	// succ:  l0000000000434CC4
execute_command_exit:


// fn0000000000434D08
// Return size: 0
void fn0000000000434D08()
fn0000000000434D08_entry:
	// succ:  l0000000000434D08
l0000000000434D08:
	sp = fp
	sp = sp + -112
	Mem0[sp:word64] = x29
	sp = sp + 8
	Mem0[sp:word64] = x30
	x29 = x31 + 0x0000000000000000
	v8 = sp + 32
	Mem0[v8:word64] = x21
	v8 = v8 + 8
	Mem0[v8:word64] = x22
	x21 = x0
	x0 = Mem0[x0 + 8:word64]
	v12 = sp + 64
	Mem0[v12:word64] = x25
	v12 = v12 + 8
	Mem0[v12:word64] = x26
	x26 = 0x00000000004E1000
	w2 = Mem0[x0 + 4:word32]
	w3 = Mem0[x26 + 1656:word32]
	v17 = sp + 80
	Mem0[v17:word64] = x27
	v17 = v17 + 8
	Mem0[v17:word64] = x28
	w4 = w2 | 0x00000008
	v21 = sp + 16
	Mem0[v21:word64] = x19
	v21 = v21 + 8
	Mem0[v21:word64] = x20
	w2 = Mem0[x21:word32]
	v24 = sp + 48
	Mem0[v24:word64] = x23
	v24 = v24 + 8
	Mem0[v24:word64] = x24
	w3 = w3 + 0x00000001
	Mem0[x26 + 1656:word32] = w3
	Mem0[x0 + 4:word32] = w4
	w27 = w1
	branch (w2 & 0x00000008) == 0x00000000 l0000000000434D64
	// succ:  l0000000000434D54 l0000000000434D64
l0000000000434D54:
	x2 = Mem0[x21 + 16:word64]
	w1 = Mem0[x2 + 4:word32]
	w1 = w1 | 0x00000008
	Mem0[x2 + 4:word32] = w1
	// succ:  l0000000000434D64
l0000000000434D64:
	NZCV = cond(w27 - w31)
	w19 = (word32) Test(EQ,Z)
	x25 = 0x00000000004DE000
	call execute_command (retsize: 0;)
	w2 = Mem0[x25 + 1712:word32]
	x20 = 0x00000000004E1000
	x23 = 0x00000000004E1000
	x24 = 0x00000000004E1000
	w28 = 0x00000000
	x22 = 0x00000000004E1000
	x20 = x20 + 0x0000000000000284
	x23 = x23 + 0x0000000000000278
	x24 = x24 + 0x0000000000000680
	branch w2 == 0x00000000 l0000000000434E00
	// succ:  l0000000000434D9C l0000000000434E00
l0000000000434D9C:
	branch w0 != 0x00000000 l0000000000434E98
	// succ:  l0000000000434DA0 l0000000000434E98
l0000000000434DA0:
	branch w0 == 0x00000000 l0000000000434E14
	// succ:  l0000000000434DA4 l0000000000434E14
l0000000000434DA4:
	w0 = Mem0[x20:word32]
	branch w0 != 0x00000000 l0000000000434E8C
	// succ:  l0000000000434DAC l0000000000434E8C
l0000000000434DAC:
	w0 = Mem0[x23:word32]
	branch w0 != 0x00000000 l0000000000434E84
	// succ:  l0000000000434DB4 l0000000000434E84
l0000000000434DB4:
	x0 = Mem0[x21 + 16:word64]
	call execute_command (retsize: 0;)
	w2 = Mem0[x20:word32]
	w28 = w0
	branch w2 != 0x00000000 l0000000000434E78
	// succ:  l0000000000434DC8 l0000000000434E78
l0000000000434DC8:
	w2 = Mem0[x23:word32]
	branch w2 != 0x00000000 l0000000000434E5C
	// succ:  l0000000000434DD0 l0000000000434E5C
l0000000000434DD0:
	w2 = Mem0[x22 + 1660:word32]
	x0 = x22 + 0x000000000000067C
	branch w2 != 0x00000000 l0000000000434E6C
	// succ:  l0000000000434DDC l0000000000434E6C
l0000000000434DDC:
	w2 = Mem0[x24:word32]
	branch w2 == 0x00000000 l0000000000434DF0
	// succ:  l0000000000434DE4 l0000000000434DF0
l0000000000434DE4:
	w2 = w2 - 0x00000001
	Mem0[x24:word32] = w2
	branch w2 != 0x00000000 l0000000000434E30
	// succ:  l0000000000434DF0 l0000000000434E30
l0000000000434DF0:
	x0 = Mem0[x21 + 8:word64]
	call execute_command (retsize: 0;)
	w2 = Mem0[x25 + 1712:word32]
	branch w2 != 0x00000000 l0000000000434D9C
	// succ:  l0000000000434E00 l0000000000434D9C
l0000000000434E00:
	Mem0[x29 + 96:word64] = x0
	call reap_dead_jobs (retsize: 0;)
	x0 = Mem0[x29 + 96:word64]
	branch w0 == 0x00000000 l0000000000434DA0
	// succ:  l0000000000434E10 l0000000000434DA0
l0000000000434E10:
	goto l0000000000434E98
	// succ:  l0000000000434E98
l0000000000434E14:
	w31 = w27 - 0x00000001
	NZCV = cond(w31)
	branch Test(NE,Z) l0000000000434DA4
	// succ:  l0000000000434E1C l0000000000434DA4
l0000000000434E1C:
	w0 = Mem0[x22 + 1660:word32]
	branch w0 == 0x00000000 l0000000000434E30
	// succ:  l0000000000434E24 l0000000000434E30
l0000000000434E24:
	w0 = w0 - 0x00000001
	x1 = 0x00000000004E1000
	Mem0[x1 + 1660:word32] = w0
	// succ:  l0000000000434E30
l0000000000434E30:
	w1 = Mem0[x26 + 1656:word32]
	w0 = w28
	w1 = w1 - 0x00000001
	Mem0[x26 + 1656:word32] = w1
	v34 = sp + 16
	x19 = Mem0[v34:word64]
	v34 = v34 + 8
	x20 = Mem0[v34:word64]
	v35 = sp + 32
	x21 = Mem0[v35:word64]
	v35 = v35 + 8
	x22 = Mem0[v35:word64]
	v36 = sp + 48
	x23 = Mem0[v36:word64]
	v36 = v36 + 8
	x24 = Mem0[v36:word64]
	v37 = sp + 64
	x25 = Mem0[v37:word64]
	v37 = v37 + 8
	x26 = Mem0[v37:word64]
	v38 = sp + 80
	x27 = Mem0[v38:word64]
	v38 = v38 + 8
	x28 = Mem0[v38:word64]
	x29 = Mem0[sp:word64]
	sp = sp + 8
	x30 = Mem0[sp:word64]
	sp = sp + 112
	return
	// succ:  fn0000000000434D08_exit
l0000000000434E5C:
	call throw_to_top_level (retsize: 0;)
	w2 = Mem0[x22 + 1660:word32]
	x0 = x22 + 0x000000000000067C
	branch w2 == 0x00000000 l0000000000434DDC
	// succ:  l0000000000434E6C l0000000000434DDC
l0000000000434E6C:
	w2 = w2 - 0x00000001
	Mem0[x0:word32] = w2
	goto l0000000000434E30
	// succ:  l0000000000434E30
l0000000000434E78:
	w0 = Mem0[x20:word32]
	call termsig_handler (retsize: 0;)
	goto l0000000000434DC8
	// succ:  l0000000000434DC8
l0000000000434E84:
	call throw_to_top_level (retsize: 0;)
	goto l0000000000434DB4
	// succ:  l0000000000434DB4
l0000000000434E8C:
	w0 = Mem0[x20:word32]
	call termsig_handler (retsize: 0;)
	goto l0000000000434DAC
	// succ:  l0000000000434DAC
l0000000000434E98:
	branch w19 == 0x00000000 l0000000000434DA0
	// succ:  l0000000000434E9C l0000000000434DA0
l0000000000434E9C:
	goto l0000000000434E1C
	// succ:  l0000000000434E1C
fn0000000000434D08_exit:


// fn0000000000434EA0
// Return size: 0
void fn0000000000434EA0()
fn0000000000434EA0_entry:
	// succ:  l0000000000434EA0
l0000000000434EA0:
	sp = fp
	sp = sp + -128
	Mem0[sp:word64] = x29
	sp = sp + 8
	Mem0[sp:word64] = x30
	x29 = x31 + 0x0000000000000000
	x5 = 0x00000000004DF000
	x5 = x5 + 0xFFFFFFFFFFFFFBE8
	w6 = Mem0[x5 + 64:word32]
	v10 = sp + 16
	Mem0[v10:word64] = x19
	v10 = v10 + 8
	Mem0[v10:word64] = x20
	v13 = sp + 32
	Mem0[v13:word64] = x21
	v13 = v13 + 8
	Mem0[v13:word64] = x22
	v16 = sp + 48
	Mem0[v16:word64] = x23
	v16 = v16 + 8
	Mem0[v16:word64] = x24
	Mem0[sp + 64:word64] = x25
	w6 = w6 + 0x00000001
	Mem0[x5 + 64:word32] = w6
	Mem0[x29 + 96:word64] = x4
	w20 = w1
	x19 = x0
	w22 = w2
	w25 = w3
	w21 = Mem0[x0 + 4:word32]
	w24 = w1
	branch w1 == 0x00000000 l0000000000434EF4
	// succ:  l0000000000434EEC l0000000000434EF4
l0000000000434EEC:
	w24 = w21 & 0x00000400
	branch (w21 & 0x00000400) == 0x00000000 l0000000000435224
	// succ:  l0000000000434EF4 l0000000000435224
l0000000000434EF4:
	w4 = Mem0[x19:word32]
	w0 = w21 & 0x00000001
	w31 = w4 - 0x0000000D
	NZCV = cond(w31)
l0000000000435224:
	w31 = w2 + 0x00000001
	NZCV = cond(w31)
	w24 = 0x00000000
	branch Test(NE,Z) l0000000000434EF4
	// succ:  l0000000000435230 l0000000000434EF4
l0000000000435230:
	x0 = Mem0[x19 + 16:word64]
	call stdin_redirects (retsize: 0;)
	NZCV = cond(w0 - w24)
	w21 = Mem0[x19 + 4:word32]
	w24 = (word32) Test(EQ,Z)
	goto l0000000000434EF4
	// succ:  l0000000000434EF4
fn0000000000434EA0_exit:


// fn00000000004352F0
// Return size: 0
void fn00000000004352F0()
fn00000000004352F0_entry:
	// succ:  l00000000004352F0
l00000000004352F0:
	sp = fp
	x31 = x31 - 0x0000000000000330
	sp = sp + -96
	Mem0[sp:word64] = x29
	sp = sp + 8
	Mem0[sp:word64] = x30
	x29 = x31 + 0x0000000000000000
	v8 = sp + 16
	Mem0[v8:word64] = x19
	v8 = v8 + 8
	Mem0[v8:word64] = x20
	v11 = sp + 32
	Mem0[v11:word64] = x21
	v11 = v11 + 8
	Mem0[v11:word64] = x22
	x19 = x0
	w22 = w1
	x0 = x29 + 0x00000000000002D0
	x1 = x29 + 0x0000000000000310
	Mem0[x29 + 880:word64] = x2
	Mem0[x29 + 888:word64] = x3
	Mem0[x29 + 896:word64] = x4
	v21 = sp + 48
	Mem0[v21:word64] = x23
	v21 = v21 + 8
	Mem0[v21:word64] = x24
	v24 = sp + 64
	Mem0[v24:word64] = x25
	v24 = v24 + 8
	Mem0[v24:word64] = x26
	v27 = sp + 80
	Mem0[v27:word64] = x27
	v27 = v27 + 8
	Mem0[v27:word64] = x28
	gettimeofday(x0, x1)
	sp = sp + 0xFFFFFFFFFFFFFFF8
	x1 = x29 + 0x0000000000000210
	w0 = 0x00000000
	call getrusage (retsize: 0;)
	w0 = 0xFFFFFFFF
	x1 = x29 + 0x00000000000000F0
	call getrusage (retsize: 0;)
	w0 = Mem0[x19:word32]
	w20 = Mem0[x19 + 4:word32]
	w31 = w0 - 0x00000004
	NZCV = cond(w31)
	w21 = w20 & 0x00000100
	w23 = 0x00000000
	x2 = Mem0[x29 + 880:word64]
	x3 = Mem0[x29 + 888:word64]
	x4 = Mem0[x29 + 896:word64]
	branch Test(EQ,Z) l0000000000435788
	// succ:  l000000000043536C l0000000000435788
l000000000043536C:
	w0 = w20 & 0xFFFFFE7F
	Mem0[x19 + 4:word32] = w0
	w1 = w22
	x0 = x19
	call execute_command_internal (retsize: 0;)
	x1 = x29 + 0x0000000000000310
	Mem0[x19 + 4:word32] = w20
	w24 = w0
	x0 = x29 + 0x00000000000002C0
	Mem0[x29 + 792:word64] = 0x0000000000000000
	Mem0[x29 + 800:word64] = 0x0000000000000000
	Mem0[x29 + 808:word64] = 0x0000000000000000
	Mem0[x29 + 816:word32] = 0x00000000
	Mem0[x29 + 820:word32] = 0x00000000
	Mem0[x29 + 824:word32] = 0x00000000
	gettimeofday(x0, x1)
	sp = sp + 0xFFFFFFFFFFFFFFF8
	x1 = x29 + 0x0000000000000180
	w0 = 0x00000000
	call getrusage (retsize: 0;)
	x1 = x29 + 0x0000000000000060
	w0 = 0xFFFFFFFF
	call getrusage (retsize: 0;)
	x1 = x29 + 0x00000000000002D0
	x2 = x29 + 0x00000000000002C0
	x0 = x29 + 0x0000000000000300
	call difftimeval (retsize: 0;)
	x0 = x29 + 0x0000000000000300
	x1 = x29 + 0x0000000000000328
	x2 = x29 + 0x0000000000000338
	call timeval_to_secs (retsize: 0;)
	x1 = x29 + 0x0000000000000210
	x2 = x29 + 0x0000000000000180
	x0 = x29 + 0x00000000000002C0
	call difftimeval (retsize: 0;)
	x19 = x0
	x1 = x29 + 0x00000000000000F0
	x2 = x29 + 0x0000000000000060
	x0 = x29 + 0x00000000000002D0
	call difftimeval (retsize: 0;)
	x1 = x19
	x2 = x0
	x0 = x29 + 0x00000000000002F0
	call addtimeval (retsize: 0;)
	x0 = x29 + 0x00000000000002F0
	x1 = x29 + 0x0000000000000320
	x2 = x29 + 0x0000000000000334
	call timeval_to_secs (retsize: 0;)
	x1 = x29 + 0x0000000000000220
	x2 = x29 + 0x0000000000000190
	x0 = x29 + 0x00000000000002C0
	call difftimeval (retsize: 0;)
	x19 = x0
	x1 = x29 + 0x0000000000000100
	x2 = x29 + 0x0000000000000070
	x0 = x29 + 0x00000000000002D0
	call difftimeval (retsize: 0;)
	x2 = x0
	x1 = x19
	x0 = x29 + 0x00000000000002E0
	call addtimeval (retsize: 0;)
	x0 = x29 + 0x00000000000002E0
	x1 = x29 + 0x0000000000000318
	x2 = x29 + 0x0000000000000330
	call timeval_to_secs (retsize: 0;)
	x0 = x29 + 0x0000000000000300
	x1 = x29 + 0x00000000000002F0
	x2 = x29 + 0x00000000000002E0
	call timeval_to_cpu (retsize: 0;)
	w20 = w0
	branch w21 == 0x00000000 l0000000000435708
	// succ:  l0000000000435484 l0000000000435708
l0000000000435484:
	x19 = 0x00000000004AC000
	x19 = x19 + 0x00000000000007D8
	// succ:  l000000000043548C
l000000000043548C:
	v36 = Mem0[x19:byte]
	w1 = (word32) v36
	branch w1 != 0x00000000 l00000000004354B8
	// succ:  l0000000000435494 l00000000004354B8
l0000000000435494:
	w0 = w24
	v37 = sp + 16
	x19 = Mem0[v37:word64]
	v37 = v37 + 8
	x20 = Mem0[v37:word64]
	v38 = sp + 32
	x21 = Mem0[v38:word64]
	v38 = v38 + 8
	x22 = Mem0[v38:word64]
	v39 = sp + 48
	x23 = Mem0[v39:word64]
	v39 = v39 + 8
	x24 = Mem0[v39:word64]
	v40 = sp + 64
	x25 = Mem0[v40:word64]
	v40 = v40 + 8
	x26 = Mem0[v40:word64]
	v41 = sp + 80
	x27 = Mem0[v41:word64]
	v41 = v41 + 8
	x28 = Mem0[v41:word64]
	x29 = Mem0[sp:word64]
	sp = sp + 8
	x30 = Mem0[sp:word64]
	sp = sp + 96
	x31 = x31 + 0x0000000000000330
	return
	// succ:  fn00000000004352F0_exit
l00000000004354B8:
	x1 = 0x00000000004DE000
	x0 = x19
	x26 = Mem0[x1 + 1640:word64]
	strlen(x0)
	sp = sp + 0xFFFFFFFFFFFFFFF8
	x3 = Mem0[x29 + 808:word64]
l0000000000435708:
	x0 = 0x00000000004AC000
	x0 = x0 + 0xFFFFFFFFFFFFF830
	call get_string_value (retsize: 0;)
	x19 = x0
	branch x0 != 0x0000000000000000 l000000000043548C
	// succ:  l000000000043571C l000000000043548C
l000000000043571C:
	x0 = 0x00000000004DE000
	w0 = Mem0[x0 + 1716:word32]
	branch w0 == 0x00000000 l0000000000435868
	// succ:  l0000000000435728 l0000000000435868
l0000000000435728:
	branch w23 == 0x00000000 l0000000000435868
	// succ:  l000000000043572C l0000000000435868
l000000000043572C:
	x19 = 0x00000000004AC000
	x19 = x19 + 0x00000000000007F8
	goto l000000000043548C
	// succ:  l000000000043548C
l0000000000435788:
	x0 = Mem0[x19 + 24:word64]
	x1 = Mem0[x0 + 8:word64]
	branch x1 != 0x0000000000000000 l000000000043536C
	// succ:  l0000000000435794 l000000000043536C
l0000000000435794:
	x0 = Mem0[x0 + 16:word64]
	branch x0 != 0x0000000000000000 l000000000043536C
	// succ:  l000000000043579C l000000000043536C
l000000000043579C:
	x1 = 0x00000000004DE000
	w1 = Mem0[x1 + 1716:word32]
	branch w1 == 0x00000000 l00000000004357D8
	// succ:  l00000000004357A8 l00000000004357D8
l00000000004357A8:
	x1 = 0x00000000004E3000
	x1 = Mem0[x1 + 552:word64]
	Mem0[x29 + 256:word64] = x0
	Mem0[x29 + 544:word64] = x0
	Mem0[x29 + 240:word64] = x0
	Mem0[x29 + 528:word64] = x0
	Mem0[x29 + 264:word64] = x0
	Mem0[x29 + 552:word64] = x0
	Mem0[x29 + 248:word64] = x0
	Mem0[x29 + 536:word64] = x0
	Mem0[x29 + 720:word64] = x1
	Mem0[x29 + 728:word64] = x0
	// succ:  l00000000004357D8
l00000000004357D8:
	w23 = 0x00000001
	goto l000000000043536C
	// succ:  l000000000043536C
l0000000000435868:
	x19 = 0x00000000004AC000
	x19 = x19 + 0xFFFFFFFFFFFFF810
	goto l000000000043548C
	// succ:  l000000000043548C
fn00000000004352F0_exit:


// fn00000000004358AC
// Return size: 0
void fn00000000004358AC()
fn00000000004358AC_entry:
	// succ:  l00000000004358AC
l00000000004358AC:
	sp = fp
	sp = sp + -128
	Mem0[sp:word64] = x29
	sp = sp + 8
	Mem0[sp:word64] = x30
	x29 = x31 + 0x0000000000000000
	v8 = sp + 16
	Mem0[v8:word64] = x19
	v8 = v8 + 8
	Mem0[v8:word64] = x20
	x20 = 0x00000000004DF000
	x20 = x20 + 0xFFFFFFFFFFFFFBE8
	w6 = Mem0[x20 + 84:word32]
	v12 = sp + 32
	Mem0[v12:word64] = x21
	v12 = v12 + 8
	Mem0[v12:word64] = x22
	Mem0[sp + 64:word64] = x25
	v16 = sp + 48
	Mem0[v16:word64] = x23
	v16 = v16 + 8
	Mem0[v16:word64] = x24
	NZCV = cond(w6 - w31)
	Mem0[x29 + 120:word64] = x3
	Mem0[x29 + 80:word32] = w5
	x19 = x0
	x21 = x1
	w22 = w2
	w25 = w4
	branch Test(LE,ZCV) l00000000004358FC
	// succ:  l00000000004358F0 l00000000004358FC
l00000000004358F0:
	w2 = Mem0[x20 + 32:word32]
	NZCV = cond(w6 - w2)
	branch Test(LE,ZCV) l0000000000435F3C
	// succ:  l00000000004358FC l0000000000435F3C
l00000000004358FC:
	x0 = 0x00000000004AA000
	x0 = x0 + 0x00000000000003C8
	call find_variable (retsize: 0;)
	Mem0[x29 + 96:word64] = x0
	branch x0 == 0x0000000000000000 l0000000000435E70
	// succ:  l0000000000435910 l0000000000435E70
l0000000000435910:
	w0 = Mem0[x0 + 40:word32]
	x20 = 0x0000000000000000
	branch (w0 & 0x00000004) == 0x00000000 l0000000000435CB0
	// succ:  l000000000043591C l0000000000435CB0
l000000000043591C:
	x0 = 0x00000000004AA000
	x0 = x0 + 0x00000000000003D8
	call find_variable (retsize: 0;)
	branch x0 == 0x0000000000000000 l0000000000435CC8
	// succ:  l000000000043592C l0000000000435CC8
l000000000043592C:
	w1 = Mem0[x0 + 40:word32]
	Mem0[x29 + 104:word64] = 0x0000000000000000
	branch (w1 & 0x00000004) == 0x00000000 l0000000000435C90
	// succ:  l0000000000435938 l0000000000435C90
l0000000000435938:
	x0 = 0x00000000004AA000
	x0 = x0 + 0x00000000000003E8
	call find_variable (retsize: 0;)
	branch x0 == 0x0000000000000000 l0000000000435CA8
	// succ:  l0000000000435948 l0000000000435CA8
l0000000000435948:
	w1 = Mem0[x0 + 40:word32]
	Mem0[x29 + 112:word64] = 0x0000000000000000
	branch (w1 & 0x00000004) == 0x00000000 l0000000000435C84
	// succ:  l0000000000435954 l0000000000435C84
l0000000000435954:
	x0 = Mem0[x19 + 8:word64]
	call copy_command (retsize: 0;)
	Mem0[x29 + 88:word64] = x0
	branch x0 == 0x0000000000000000 l0000000000435978
	// succ:  l0000000000435964 l0000000000435978
l0000000000435964:
	branch (w22 & 0x00000008) == 0x00000000 l0000000000435978
	// succ:  l0000000000435968 l0000000000435978
l0000000000435968:
	x1 = Mem0[x29 + 88:word64]
	w0 = Mem0[x1 + 4:word32]
	w0 = w0 | 0x00000008
	Mem0[x1 + 4:word32] = w0
	// succ:  l0000000000435978
l0000000000435978:
	w2 = Mem0[x29 + 80:word32]
	branch w2 == 0x00000000 l0000000000435BDC
	// succ:  l0000000000435980 l0000000000435BDC
l0000000000435980:
	x1 = 0x00000000004DF000
	x2 = Mem0[x1 + 3208:word64]
	x0 = Mem0[x19:word64]
	w1 = Mem0[x29 + 80:word32]
	call push_context (retsize: 0;)
	// succ:  l0000000000435994
l0000000000435994:
	x1 = 0x00000000004DF000
	w0 = 0x00000001
	Mem0[x1 + 3208:word64] = 0x0000000000000000
	x1 = 0x00000000004E3000
	Mem0[x1 + 1176:word64] = x19
	call make_funcname_visible (retsize: 0;)
	w0 = 0x00000041
	call signal_is_trapped (retsize: 0;)
	branch w0 != 0x00000000 l0000000000435CD0
	// succ:  l00000000004359B8 l0000000000435CD0
l00000000004359B8:
	w0 = 0x00000042
	x24 = 0x0000000000000000
	call signal_is_trapped (retsize: 0;)
	branch w0 != 0x00000000 l0000000000435CF0
	// succ:  l00000000004359C8 l0000000000435CF0
l00000000004359C8:
	w0 = 0x00000043
	x23 = 0x0000000000000000
	call signal_is_trapped (retsize: 0;)
	branch w0 != 0x00000000 l0000000000435D10
	// succ:  l00000000004359D8 l0000000000435D10
l00000000004359D8:
	x22 = 0x0000000000000000
	// succ:  l00000000004359DC
l00000000004359DC:
	branch x24 == 0x0000000000000000 l0000000000435A04
	// succ:  l00000000004359E0 l0000000000435A04
l00000000004359E0:
	w0 = Mem0[x19 + 40:word32]
	branch (w0 & 0x00000080) == 0x00000000 l0000000000435A04
	// succ:  l00000000004359E8 l0000000000435A04
l00000000004359E8:
	x0 = 0x00000000004DF000
	w0 = Mem0[x0 + 3772:word32]
	branch w0 != 0x00000000 l0000000000435A04
	// succ:  l00000000004359F4 l0000000000435A04
l00000000004359F4:
	w2 = Mem0[x29 + 80:word32]
	branch w2 == 0x00000000 l0000000000435E24
	// succ:  l00000000004359FC l0000000000435E24
l00000000004359FC:
	w0 = 0x00000041
	call restore_default_signal (retsize: 0;)
	// succ:  l0000000000435A04
l0000000000435A04:
	branch x23 == 0x0000000000000000 l0000000000435A24
	// succ:  l0000000000435A08 l0000000000435A24
l0000000000435A08:
	x0 = 0x00000000004DF000
	w0 = Mem0[x0 + 3768:word32]
	branch w0 != 0x00000000 l0000000000435A24
	// succ:  l0000000000435A14 l0000000000435A24
l0000000000435A14:
	w0 = Mem0[x29 + 80:word32]
	branch w0 == 0x00000000 l0000000000435ED8
	// succ:  l0000000000435A1C l0000000000435ED8
l0000000000435A1C:
	w0 = 0x00000042
	call restore_default_signal (retsize: 0;)
	// succ:  l0000000000435A24
l0000000000435A24:
	branch x22 == 0x0000000000000000 l0000000000435A3C
	// succ:  l0000000000435A28 l0000000000435A3C
l0000000000435A28:
	w0 = 0x00000041
	call signal_in_progress (retsize: 0;)
	branch w0 != 0x00000000 l0000000000435DF4
	// succ:  l0000000000435A34 l0000000000435DF4
l0000000000435A34:
	w0 = Mem0[x19 + 40:word32]
	branch (w0 & 0x00000080) == 0x00000000 l0000000000435DE8
	// succ:  l0000000000435A3C l0000000000435DE8
l0000000000435A3C:
	x2 = 0x00000000004DF000
	x0 = 0x00000000004E3000
	x2 = x2 + 0xFFFFFFFFFFFFFBE8
	x0 = Mem0[x0 + 1176:word64]
	w1 = Mem0[x2 + 32:word32]
	x0 = Mem0[x0:word64]
	w1 = w1 + 0x00000001
	Mem0[x2 + 32:word32] = w1
	call find_function_def (retsize: 0;)
	branch x0 == 0x0000000000000000 l0000000000435E80
	// succ:  l0000000000435A64 l0000000000435E80
l0000000000435A64:
	x19 = Mem0[x0 + 24:word64]
	// succ:  l0000000000435A68
l0000000000435A68:
	x0 = 0x00000000004E3000
	x0 = Mem0[x0 + 1176:word64]
	w1 = 0x00000001
	x2 = Mem0[x0:word64]
	x0 = x20
	call array_rshift (retsize: 0;)
	x0 = Mem0[x29 + 104:word64]
	x2 = x19
	w1 = 0x00000001
	call array_rshift (retsize: 0;)
	call executing_line_number (retsize: 0;)
l0000000000435BDC:
	x0 = 0x00000000004AC000
	x0 = x0 + 0xFFFFFFFFFFFFF8A8
	call begin_unwind_frame (retsize: 0;)
	x0 = 0x00000000004DF000
	x2 = Mem0[x0 + 3208:word64]
	w1 = Mem0[x29 + 80:word32]
	x0 = Mem0[x19:word64]
	call push_context (retsize: 0;)
	x0 = 0x000000000043A000
	x0 = x0 + 0xFFFFFFFFFFFFF9DC
	x1 = 0x0000000000000000
	call add_unwind_protect (retsize: 0;)
	x0 = 0x00000000004DE000
	x0 = x0 + 0x0000000000000788
	w1 = 0x00000004
	call unwind_protect_mem (retsize: 0;)
	x0 = 0x00000000004E3000
	x0 = x0 + 0x00000000000004A4
	w1 = 0x00000004
	call unwind_protect_mem (retsize: 0;)
	x0 = 0x00000000004E3000
	x0 = x0 + 0x0000000000000360
	w1 = 0x00000138
	call unwind_protect_mem (retsize: 0;)
	x1 = Mem0[x29 + 88:word64]
	x0 = 0x000000000042F000
	x0 = x0 + 0xFFFFFFFFFFFFFBD0
	call add_unwind_protect (retsize: 0;)
	x0 = 0x00000000004E3000
	x0 = x0 + 0x0000000000000498
	w1 = 0x00000008
	call unwind_protect_mem (retsize: 0;)
	x0 = 0x00000000004E1000
	x0 = x0 + 0x0000000000000678
	w1 = 0x00000004
	call unwind_protect_mem (retsize: 0;)
	x0 = 0x00000000004DF000
	x0 = x0 + 0xFFFFFFFFFFFFFBE8
	x0 = x0 + 0x0000000000000020
	w1 = 0x00000004
	call unwind_protect_mem (retsize: 0;)
	goto l0000000000435994
	// succ:  l0000000000435994
l0000000000435C84:
	x0 = Mem0[x0 + 8:word64]
	Mem0[x29 + 112:word64] = x0
	goto l0000000000435954
	// succ:  l0000000000435954
l0000000000435C90:
	x0 = Mem0[x0 + 8:word64]
	Mem0[x29 + 104:word64] = x0
	x0 = 0x00000000004AA000
	x0 = x0 + 0x00000000000003E8
	call find_variable (retsize: 0;)
	branch x0 != 0x0000000000000000 l0000000000435948
	// succ:  l0000000000435CA8 l0000000000435948
l0000000000435CA8:
	Mem0[x29 + 112:word64] = x0
	goto l0000000000435954
	// succ:  l0000000000435954
l0000000000435CB0:
	x2 = Mem0[x29 + 96:word64]
	x0 = 0x00000000004AA000
	x0 = x0 + 0x00000000000003D8
	x20 = Mem0[x2 + 8:word64]
	call find_variable (retsize: 0;)
	branch x0 != 0x0000000000000000 l000000000043592C
	// succ:  l0000000000435CC8 l000000000043592C
l0000000000435CC8:
	Mem0[x29 + 104:word64] = x0
	goto l0000000000435938
	// succ:  l0000000000435938
l0000000000435CD0:
	w0 = 0x00000041
	call signal_is_ignored (retsize: 0;)
	branch w0 != 0x00000000 l00000000004359B8
	// succ:  l0000000000435CDC l00000000004359B8
l0000000000435CDC:
	x0 = 0x00000000004E3000
	x24 = Mem0[x0 + 2688:word64]
	w0 = 0x00000042
	call signal_is_trapped (retsize: 0;)
	branch w0 == 0x00000000 l00000000004359C8
	// succ:  l0000000000435CF0 l00000000004359C8
l0000000000435CF0:
	w0 = 0x00000042
	call signal_is_ignored (retsize: 0;)
	branch w0 != 0x00000000 l00000000004359C8
	// succ:  l0000000000435CFC l00000000004359C8
l0000000000435CFC:
	x0 = 0x00000000004E3000
	x23 = Mem0[x0 + 2696:word64]
	w0 = 0x00000043
	call signal_is_trapped (retsize: 0;)
	branch w0 == 0x00000000 l00000000004359D8
	// succ:  l0000000000435D10 l00000000004359D8
l0000000000435D10:
	w0 = 0x00000043
	call signal_is_ignored (retsize: 0;)
	branch w0 != 0x00000000 l00000000004359D8
	// succ:  l0000000000435D1C l00000000004359D8
l0000000000435D1C:
	x0 = 0x00000000004E3000
	x22 = Mem0[x0 + 2704:word64]
	goto l00000000004359DC
	// succ:  l00000000004359DC
l0000000000435DE8:
	x0 = 0x00000000004DF000
	w0 = Mem0[x0 + 3772:word32]
	branch w0 != 0x00000000 l0000000000435A3C
	// succ:  l0000000000435DF4 l0000000000435A3C
l0000000000435DF4:
	w2 = Mem0[x29 + 80:word32]
	branch w2 == 0x00000000 l0000000000435E8C
	// succ:  l0000000000435DFC l0000000000435E8C
l0000000000435DFC:
	w0 = 0x00000043
	call restore_default_signal (retsize: 0;)
	goto l0000000000435A3C
	// succ:  l0000000000435A3C
l0000000000435E24:
	x0 = x24
	strlen(x0)
	sp = sp + 0xFFFFFFFFFFFFFFF8
	x1 = 0x00000000004AC000
	w2 = 0x00001075
	x1 = x1 + 0x0000000000000560
	x0 = x0 + 0x0000000000000001
	call sh_xmalloc (retsize: 0;)
	x1 = x24
	strcpy(x0, x1)
	sp = sp + 0xFFFFFFFFFFFFFFF8
	x24 = x0
	x0 = 0x000000000046C000
	x1 = x24
	x0 = x0 + 0x00000000000004C4
	call add_unwind_protect (retsize: 0;)
	x0 = 0x0000000000455000
	x0 = x0 + 0x0000000000000434
	x1 = x24
	call add_unwind_protect (retsize: 0;)
	goto l00000000004359FC
	// succ:  l00000000004359FC
l0000000000435E70:
	x20 = Mem0[x29 + 96:word64]
	goto l000000000043591C
	// succ:  l000000000043591C
l0000000000435E80:
	x19 = 0x00000000004AC000
	x19 = x19 + 0x0000000000000460
	goto l0000000000435A68
	// succ:  l0000000000435A68
l0000000000435E8C:
	x0 = x22
	strlen(x0)
	sp = sp + 0xFFFFFFFFFFFFFFF8
	x1 = 0x00000000004AC000
	w2 = 0x00001092
	x1 = x1 + 0x0000000000000560
	x0 = x0 + 0x0000000000000001
	call sh_xmalloc (retsize: 0;)
	x1 = x22
	strcpy(x0, x1)
	sp = sp + 0xFFFFFFFFFFFFFFF8
	x19 = x0
	x0 = 0x000000000046C000
	x1 = x19
	x0 = x0 + 0x00000000000004C4
	call add_unwind_protect (retsize: 0;)
	x0 = 0x0000000000455000
	x0 = x0 + 0x000000000000044C
	x1 = x19
	call add_unwind_protect (retsize: 0;)
	goto l0000000000435DFC
	// succ:  l0000000000435DFC
l0000000000435ED8:
	x0 = x23
	strlen(x0)
	sp = sp + 0xFFFFFFFFFFFFFFF8
	x1 = 0x00000000004AC000
	w2 = 0x00001081
	x1 = x1 + 0x0000000000000560
	x0 = x0 + 0x0000000000000001
	call sh_xmalloc (retsize: 0;)
	x1 = x23
	strcpy(x0, x1)
	sp = sp + 0xFFFFFFFFFFFFFFF8
	x23 = x0
	x0 = 0x000000000046C000
	x1 = x23
	x0 = x0 + 0x00000000000004C4
	call add_unwind_protect (retsize: 0;)
	x0 = 0x0000000000455000
	x0 = x0 + 0x0000000000000440
	x1 = x23
	call add_unwind_protect (retsize: 0;)
	goto l0000000000435A1C
	// succ:  l0000000000435A1C
l0000000000435F3C:
	x1 = Mem0[x0:word64]
	x0 = 0x00000000004AC000
	x0 = x0 + 0xFFFFFFFFFFFFF870
	call internal_error (retsize: 0;)
	w0 = 0x00000002
	Mem0[x20 + 32:word32] = 0x00000000
	call jump_to_top_level (retsize: 0;)
	sp = sp + -112
	Mem0[sp:word64] = x29
	sp = sp + 8
	Mem0[sp:word64] = x30
	x29 = x31 + 0x0000000000000000
	Mem0[x29 + 80:word64] = x2
	x8 = Mem0[x29 + 80:word64]
	x2 = 0x0000000000474000
	x2 = x2 + 0x000000000000065C
	v32 = sp + 16
	Mem0[v32:word64] = x19
	v32 = v32 + 8
	Mem0[v32:word64] = x20
	v33 = sp + 32
	Mem0[v33:word64] = x21
	v33 = v33 + 8
	Mem0[v33:word64] = x22
	v34 = sp + 48
	Mem0[v34:word64] = x23
	v34 = v34 + 8
	Mem0[v34:word64] = x24
	Mem0[sp + 64:word64] = x25
	x31 = x8 - x2
	NZCV = cond(x31)
	Mem0[x29 + 96:word64] = x0
	x23 = x1
	x25 = x3
	w21 = w4
	w19 = w5
	w22 = w6
	x20 = x7
	branch Test(EQ,Z) l00000000004360EC
	// succ:  l0000000000435FA0_thunk_fn0000000000435FA4 l0000000000435FA0_thunk_fn00000000004360EC
l0000000000435FA0_thunk_fn0000000000435FA4:
	call fn0000000000435FA4 (retsize: 0;)
	return
	// succ:  fn00000000004358AC_exit
l0000000000435FA0_thunk_fn00000000004360EC:
	call fn00000000004360EC (retsize: 0;)
	return
	// succ:  fn00000000004358AC_exit
fn00000000004358AC_exit:


// fn0000000000435F58
// Return size: 0
void fn0000000000435F58()
fn0000000000435F58_entry:
	// succ:  l0000000000435F58
l0000000000435F58:
	sp = fp
	sp = sp + -112
	Mem0[sp:word64] = x29
	sp = sp + 8
	Mem0[sp:word64] = x30
	x29 = x31 + 0x0000000000000000
	Mem0[x29 + 80:word64] = x2
	x8 = Mem0[x29 + 80:word64]
	x2 = 0x0000000000474000
	x2 = x2 + 0x000000000000065C
	v10 = sp + 16
	Mem0[v10:word64] = x19
	v10 = v10 + 8
	Mem0[v10:word64] = x20
	v13 = sp + 32
	Mem0[v13:word64] = x21
	v13 = v13 + 8
	Mem0[v13:word64] = x22
	v16 = sp + 48
	Mem0[v16:word64] = x23
	v16 = v16 + 8
	Mem0[v16:word64] = x24
	Mem0[sp + 64:word64] = x25
	x31 = x8 - x2
	NZCV = cond(x31)
	Mem0[x29 + 96:word64] = x0
	x23 = x1
	x25 = x3
	w21 = w4
	w19 = w5
	w22 = w6
	x20 = x7
	branch Test(EQ,Z) l0000000000435FA0_thunk_fn00000000004360EC
	// succ:  l0000000000435FA0_thunk_fn0000000000435FA4 l0000000000435FA0_thunk_fn00000000004360EC
l0000000000435FA0_thunk_fn0000000000435FA4:
	call fn0000000000435FA4 (retsize: 0;)
	return
	// succ:  fn0000000000435F58_exit
l0000000000435FA0_thunk_fn00000000004360EC:
	call fn00000000004360EC (retsize: 0;)
	return
	// succ:  fn0000000000435F58_exit
fn0000000000435F58_exit:


// fn0000000000435FA4
// Return size: 0
void fn0000000000435FA4()
fn0000000000435FA4_entry:
	// succ:  l0000000000435FA4
l0000000000435FA4:
	sp = v3
	w31 = w5 + 0x00000001
	NZCV = cond(w31)
	w2 = (word32) Test(NE,Z)
	w24 = 0x00000000
	// succ:  l0000000000435FAC_thunk_fn00000000004360EC
l0000000000435FAC_thunk_fn00000000004360EC:
	call fn00000000004360EC (retsize: 0;)
	return
	// succ:  fn0000000000435FA4_exit
fn0000000000435FA4_exit:


// fn00000000004360EC
// Return size: 0
void fn00000000004360EC()
fn00000000004360EC_entry:
	goto l00000000004360EC
	// succ:  l00000000004360EC
l0000000000435FB0:
	x1 = 0x00000000004DE000
	Mem0[x1 + 1704:word32] = 0x00000000
	x1 = 0x00000000004DE000
	Mem0[x1 + 1736:word32] = 0x00000000
	branch w22 == 0x00000000 l0000000000435FD4
	// succ:  l0000000000435FC4 l0000000000435FD4
l0000000000435FC4:
	x1 = 0x00000000004E3000
	w0 = Mem0[x1 + 1184:word32]
	w0 = w0 | 0x00000001
	Mem0[x1 + 1184:word32] = w0
	// succ:  l0000000000435FD4
l0000000000435FD4:
	branch w2 != 0x00000000 l0000000000436068
	// succ:  l0000000000435FD8 l0000000000436068
l0000000000435FD8:
	w31 = w21 + 0x00000001
	NZCV = cond(w31)
	branch Test(NE,Z) l0000000000436068
	// succ:  l0000000000435FE0 l0000000000436068
l0000000000435FE0:
	call maybe_make_export_env (retsize: 0;)
	branch w24 == 0x00000000 l000000000043607C
	// succ:  l0000000000435FE8 l000000000043607C
l0000000000435FE8:
	call kill_current_pipeline (retsize: 0;)
	// succ:  l0000000000435FEC
l0000000000435FEC:
	call set_sigchld_handler (retsize: 0;)
	call set_sigint_handler (retsize: 0;)
	branch x20 == 0x0000000000000000 l0000000000436000
	// succ:  l0000000000435FF8 l0000000000436000
l0000000000435FF8:
	x0 = x20
	call close_fd_bitmap (retsize: 0;)
	// succ:  l0000000000436000
l0000000000436000:
	w1 = w19
	w0 = w21
	call fn00000000004307F4 (retsize: 0;)
	x0 = x23
	w1 = 0x00000001
	call do_redirections (retsize: 0;)
	branch w0 != 0x00000000 l00000000004360B0
	// succ:  l000000000043601C l00000000004360B0
l000000000043601C:
	x8 = Mem0[x29 + 80:word64]
	branch x8 == 0x0000000000000000 l000000000043610C
	// succ:  l0000000000436024 l000000000043610C
l0000000000436024:
	x0 = 0x00000000004E3000
	x0 = x0 + 0xFFFFFFFFFFFFFC28
	w1 = 0x00000001
	call __sigsetjmp (retsize: 0;)
	Mem0[x29 + 88:word32] = w0
	x0 = 0x00000000004E3000
	w0 = Mem0[x0 + 1188:word32]
	branch w0 != 0x00000000 l0000000000436084
	// succ:  l0000000000436044 l0000000000436084
l0000000000436044:
	w8 = Mem0[x29 + 88:word32]
	w31 = w8 - 0x00000003
	NZCV = cond(w31)
	branch Test(EQ,Z) l0000000000436140
	// succ:  l0000000000436050 l0000000000436140
l0000000000436050:
	w1 = Mem0[x29 + 88:word32]
	branch w1 != 0x00000000 l00000000004360B0
	// succ:  l0000000000436058 l00000000004360B0
l0000000000436058:
	branch w0 == 0x00000000 l00000000004360B8
	// succ:  l000000000043605C l00000000004360B8
l000000000043605C:
	x0 = 0x00000000004E3000
	w0 = Mem0[x0 + 856:word32]
	exit(x0)
l0000000000436068:
	x1 = 0x00000000004E3000
	w0 = Mem0[x1 + 1184:word32]
	w0 = w0 | 0x00000010
	Mem0[x1 + 1184:word32] = w0
	goto l0000000000435FE0
	// succ:  l0000000000435FE0
l000000000043607C:
	call without_job_control (retsize: 0;)
	goto l0000000000435FEC
	// succ:  l0000000000435FEC
l0000000000436084:
	x0 = 0x0000000000477000
	x1 = Mem0[x29 + 80:word64]
	x0 = x0 + 0xFFFFFFFFFFFFF884
	x31 = x1 - x0
	NZCV = cond(x31)
	w0 = 0x00000000
	branch Test(NE,Z) l0000000000436044
	// succ:  l000000000043609C l0000000000436044
l000000000043609C:
	x0 = 0x00000000004E3000
	x0 = x0 + 0x0000000000000360
	w1 = 0x00000001
	call __sigsetjmp (retsize: 0;)
	goto l0000000000436044
	// succ:  l0000000000436044
l00000000004360B0:
	w0 = 0x00000001
	exit(x0)
l00000000004360B8:
	x1 = Mem0[x29 + 96:word64]
	w2 = Mem0[x29 + 112:word32]
	x0 = Mem0[x29 + 80:word64]
	w3 = 0x00000001
	call fn0000000000430940 (retsize: 0;)
	w19 = w0
	x0 = 0x00000000004DE000
	x0 = Mem0[x0 + 1648:word64]
	fflush(x0)
	sp = sp + 0xFFFFFFFFFFFFFFF8
	w31 = w19 - 0x00000102
	NZCV = cond(w31)
	w0 = 0x00000002
l00000000004360EC:
	sp = v3
	x0 = 0x00000000004E3000
	w0 = Mem0[x0 + 1184:word32]
	w31 = w5 + 0x00000001
	NZCV = cond(w31)
	w2 = (word32) Test(NE,Z)
	w24 = 0x00000001
	branch (w0 & 0x00000001) == 0x00000000 l0000000000435FB0
	// succ:  l0000000000436104 l0000000000435FB0
l0000000000436104:
	w24 = w2
	goto l0000000000435FB0
	// succ:  l0000000000435FB0
l000000000043610C:
	x1 = Mem0[x29 + 96:word64]
	w2 = Mem0[x29 + 112:word32]
	x3 = x20
	w4 = w22
	w5 = 0x00000001
	x0 = x25
	call fn00000000004358AC (retsize: 0;)
	w19 = w0
	x0 = 0x00000000004DE000
	x0 = Mem0[x0 + 1648:word64]
	fflush(x0)
	sp = sp + 0xFFFFFFFFFFFFFFF8
	w0 = w19
	exit(x0)
l0000000000436140:
	x0 = 0x00000000004E3000
	w0 = Mem0[x0 + 1200:word32]
	exit(x0)
fn00000000004360EC_exit:


// execute_shell_function
// Return size: 0
void execute_shell_function()
execute_shell_function_entry:
	// succ:  l000000000043614C
l000000000043614C:
	sp = fp
	sp = sp + -48
	Mem0[sp:word64] = x29
	sp = sp + 8
	Mem0[sp:word64] = x30
	x29 = x31 + 0x0000000000000000
	v8 = sp + 16
	Mem0[v8:word64] = x19
	v8 = v8 + 8
	Mem0[v8:word64] = x20
	v11 = sp + 32
	Mem0[v11:word64] = x21
	v11 = v11 + 8
	Mem0[v11:word64] = x22
	x20 = 0x00000000004AC000
	x22 = x0
	w0 = 0x00000020
	x21 = x1
	x20 = x20 + 0xFFFFFFFFFFFFF8C0
	call new_fd_bitmap (retsize: 0;)
	x19 = x0
	x0 = x20
	call begin_unwind_frame (retsize: 0;)
	x0 = 0x0000000000430000
	x1 = x19
	x0 = x0 + 0x000000000000009C
	call add_unwind_protect (retsize: 0;)
	w2 = 0x00000000
	x1 = x21
	x3 = x19
	w4 = w2
	w5 = w2
	x0 = x22
	call fn00000000004358AC (retsize: 0;)
	w21 = w0
	x0 = x19
	call dispose_fd_bitmap (retsize: 0;)
	x0 = x20
	call discard_unwind_frame (retsize: 0;)
	w0 = w21
	v20 = sp + 16
	x19 = Mem0[v20:word64]
	v20 = v20 + 8
	x20 = Mem0[v20:word64]
	v21 = sp + 32
	x21 = Mem0[v21:word64]
	v21 = v21 + 8
	x22 = Mem0[v21:word64]
	x29 = Mem0[sp:word64]
	sp = sp + 8
	x30 = Mem0[sp:word64]
	sp = sp + 48
	return
	// succ:  execute_shell_function_exit
execute_shell_function_exit:


// fn00000000004361D4
// Return size: 0
void fn00000000004361D4()
fn00000000004361D4_entry:
	// succ:  l00000000004361D4
l00000000004361D4:
	sp = fp
	sp = sp + -384
	Mem0[sp:word64] = x29
	sp = sp + 8
	Mem0[sp:word64] = x30
	x29 = x31 + 0x0000000000000000
	v8 = sp + 16
	Mem0[v8:word64] = x19
	v8 = v8 + 8
	Mem0[v8:word64] = x20
	x20 = x0
	x0 = x29 + 0x00000000000000E0
	Mem0[x29 + 368:word32] = w3
	v13 = sp + 32
	Mem0[v13:word64] = x21
	v13 = v13 + 8
	Mem0[v13:word64] = x22
	v16 = sp + 64
	Mem0[v16:word64] = x25
	v16 = v16 + 8
	Mem0[v16:word64] = x26
	w21 = w2
	x22 = x4
	v22 = sp + 80
	Mem0[v22:word64] = x27
	v22 = v22 + 8
	Mem0[v22:word64] = x28
	v25 = sp + 48
	Mem0[v25:word64] = x23
	v25 = v25 + 8
	Mem0[v25:word64] = x24
	w26 = w1
	sigemptyset(x0)
	sp = sp + 0xFFFFFFFFFFFFFFF8
	w1 = 0x00000011
	x0 = x29 + 0x00000000000000E0
	sigaddset(x0, x1)
	sp = sp + 0xFFFFFFFFFFFFFFF8
	x0 = x29 + 0x0000000000000060
	sigemptyset(x0)
	sp = sp + 0xFFFFFFFFFFFFFFF8
	w0 = 0x00000000
	x1 = x29 + 0x00000000000000E0
	x2 = x29 + 0x0000000000000060
	sigprocmask(x0, x1, x2)
	sp = sp + 0xFFFFFFFFFFFFFFF8
	w24 = Mem0[x20 + 4:word32]
	x25 = 0x00000000004AC000
	x28 = 0x0000000000430000
	x27 = 0x0000000000430000
fn00000000004361D4_exit:


// fn00000000004366F0
// Return size: 0
void fn00000000004366F0()
fn00000000004366F0_entry:
	// succ:  l00000000004366F0
l00000000004366F0:
	sp = fp
	sp = sp + -48
	Mem0[sp:word64] = x29
	sp = sp + 8
	Mem0[sp:word64] = x30
	x29 = x31 + 0x0000000000000000
	Mem0[sp + 32:word64] = x21
	x21 = 0x00000000004AC000
	x21 = x21 + 0xFFFFFFFFFFFFF910
	v9 = sp + 16
	Mem0[v9:word64] = x19
	v9 = v9 + 8
	Mem0[v9:word64] = x20
	x1 = x21
	w20 = w0
	w2 = 0x00000B62
	x0 = 0x0000000000000010
	call sh_xmalloc (retsize: 0;)
	x19 = x0
	w0 = w20 + 0x00000001
	x1 = x21
	w2 = 0x00000B63
fn00000000004366F0_exit:


// fn0000000000436758
// Return size: 0
void fn0000000000436758()
fn0000000000436758_entry:
	// succ:  l0000000000436758
l0000000000436758:
	sp = fp
	sp = sp + -48
	Mem0[sp:word64] = x29
	sp = sp + 8
	Mem0[sp:word64] = x30
	x29 = x31 + 0x0000000000000000
	Mem0[sp + 32:word64] = x21
	x21 = 0x00000000004AC000
	x21 = x21 + 0xFFFFFFFFFFFFF910
	v9 = sp + 16
	Mem0[v9:word64] = x19
	v9 = v9 + 8
	Mem0[v9:word64] = x20
	x1 = x21
	x20 = x0
	w2 = 0x000007C2
	x0 = 0x0000000000000030
	call sh_xmalloc (retsize: 0;)
	x19 = x0
	x0 = x20
	strlen(x0)
	sp = sp + 0xFFFFFFFFFFFFFFF8
	w2 = 0x000007C4
	x1 = x21
	x0 = x0 + 0x0000000000000001
	call sh_xmalloc (retsize: 0;)
	x1 = x20
	strcpy(x0, x1)
	sp = sp + 0xFFFFFFFFFFFFFFF8
	Mem0[x19:word64] = x0
	Mem0[x19 + 8:word64] = 0x0000000000000000
	Mem0[x19 + 16:word64] = 0x0000000000000000
	Mem0[x19 + 24:word64] = 0x0000000000000000
	Mem0[x19 + 32:word64] = 0x0000000000000000
	Mem0[x19 + 40:word32] = 0x00000000
	Mem0[x19 + 44:word32] = 0x00000000
	x0 = x19
	x21 = Mem0[sp + 32:word64]
	v13 = sp + 16
	x19 = Mem0[v13:word64]
	v13 = v13 + 8
	x20 = Mem0[v13:word64]
	x29 = Mem0[sp:word64]
	sp = sp + 8
	x30 = Mem0[sp:word64]
	sp = sp + 48
	return
	// succ:  fn0000000000436758_exit
fn0000000000436758_exit:


// fn00000000004368F0
// Return size: 0
void fn00000000004368F0()
fn00000000004368F0_entry:
	// succ:  l00000000004368F0
l00000000004368F0:
	sp = fp
	sp = sp + -48
	Mem0[sp:word64] = x29
	sp = sp + 8
	Mem0[sp:word64] = x30
	x29 = x31 + 0x0000000000000000
	x1 = 0x0000000000000000
	x0 = x29 + 0x0000000000000020
	Mem0[sp + 16:word64] = x19
	gettimeofday(x0, x1)
	sp = sp + 0xFFFFFFFFFFFFFFF8
	x1 = Mem0[x29 + 40:word64]
	x0 = Mem0[x29 + 32:word64]
	x19 = x1 ^ x0
	call getpid (retsize: 0;)
fn00000000004368F0_exit:


// sv_path
// Return size: 0
void sv_path()
sv_path_entry:
	// succ:  l0000000000436FFC
l0000000000436FFC:
	sp = fp
	// succ:  l0000000000436FFC_thunk_phash_flush
l0000000000436FFC_thunk_phash_flush:
	call phash_flush (retsize: 0;)
	return
	// succ:  sv_path_exit
sv_path_exit:


// sv_mail
// Return size: 0
void sv_mail()
sv_mail_entry:
	// succ:  l0000000000437000
l0000000000437000:
	sp = fp
	sp = sp + -16
	Mem0[sp:word64] = x29
	sp = sp + 8
	Mem0[sp:word64] = x30
	x29 = x31 + 0x0000000000000000
	v8 = Mem0[x0 + 4:byte]
	w0 = (word32) v8
	w31 = w0 - 0x00000043
	NZCV = cond(w31)
	branch Test(EQ,Z) l0000000000437020
	// succ:  l0000000000437014 l0000000000437020
l0000000000437014:
	call free_mail_files (retsize: 0;)
	x29 = Mem0[sp:word64]
	sp = sp + 8
	x30 = Mem0[sp:word64]
	sp = sp + 16
	// succ:  l000000000043701C_thunk_remember_mail_dates
l000000000043701C_thunk_remember_mail_dates:
	call remember_mail_dates (retsize: 0;)
	return
	// succ:  sv_mail_exit
l0000000000437020:
	x29 = Mem0[sp:word64]
	sp = sp + 8
	x30 = Mem0[sp:word64]
	sp = sp + 16
	// succ:  l0000000000437024_thunk_reset_mail_timer
l0000000000437024_thunk_reset_mail_timer:
	call reset_mail_timer (retsize: 0;)
	return
	// succ:  sv_mail_exit
sv_mail_exit:


// sv_globignore
// Return size: 0
void sv_globignore()
sv_globignore_entry:
	// succ:  l0000000000437028
l0000000000437028:
	sp = fp
	x1 = 0x00000000004DF000
	w1 = Mem0[x1 + 3752:word32]
	branch w1 == 0x00000000 l0000000000437038
	// succ:  l0000000000437034 l0000000000437038
l0000000000437034:
	return
	// succ:  sv_globignore_exit
l0000000000437038:
	// succ:  l0000000000437038_thunk_setup_glob_ignore
l0000000000437038_thunk_setup_glob_ignore:
	call setup_glob_ignore (retsize: 0;)
	return
	// succ:  sv_globignore_exit
sv_globignore_exit:


// sv_histignore
// Return size: 0
void sv_histignore()
sv_histignore_entry:
	// succ:  l000000000043703C
l000000000043703C:
	sp = fp
	// succ:  l000000000043703C_thunk_setup_history_ignore
l000000000043703C_thunk_setup_history_ignore:
	call setup_history_ignore (retsize: 0;)
	return
	// succ:  sv_histignore_exit
sv_histignore_exit:


// fn0000000000437124
// Return size: 0
void fn0000000000437124()
fn0000000000437124_entry:
	// succ:  l0000000000437124
l0000000000437124:
	sp = fp
	branch (w1 & 0x00000008) == 0x00000000 l0000000000437144
	// succ:  l0000000000437128 l0000000000437144
l0000000000437128:
	branch (w1 & 0x00000004) == 0x00000000 l000000000043714C
	// succ:  l000000000043712C l000000000043714C
l000000000043712C:
	branch (w1 & 0x00000040) == 0x00000000 l0000000000437148
	// succ:  l0000000000437130 l0000000000437148
l0000000000437130:
	branch x0 == 0x0000000000000000 l0000000000437150
	// succ:  l0000000000437134 l0000000000437150
l0000000000437134:
	x1 = 0x00000000004AC000
	x1 = x1 + 0xFFFFFFFFFFFFF910
	w2 = 0x00000A48
	// succ:  l0000000000437140_thunk_sh_xfree
l0000000000437140_thunk_sh_xfree:
	call sh_xfree (retsize: 0;)
	return
	// succ:  fn0000000000437124_exit
l0000000000437144:
	// succ:  l0000000000437144_thunk_dispose_command
l0000000000437144_thunk_dispose_command:
	call dispose_command (retsize: 0;)
	return
	// succ:  fn0000000000437124_exit
l0000000000437148:
	// succ:  l0000000000437148_thunk_assoc_dispose
l0000000000437148_thunk_assoc_dispose:
	call assoc_dispose (retsize: 0;)
	return
	// succ:  fn0000000000437124_exit
l000000000043714C:
	// succ:  l000000000043714C_thunk_array_dispose
l000000000043714C_thunk_array_dispose:
	call array_dispose (retsize: 0;)
	return
	// succ:  fn0000000000437124_exit
l0000000000437150:
	return
	// succ:  fn0000000000437124_exit
fn0000000000437124_exit:


// fn0000000000437154
// Return size: 0
void fn0000000000437154()
fn0000000000437154_entry:
	// succ:  l0000000000437154
l0000000000437154:
	sp = fp
	sp = sp + -128
	Mem0[sp:word64] = x29
	sp = sp + 8
	Mem0[sp:word64] = x30
	x29 = x31 + 0x0000000000000000
	v8 = sp + 64
	Mem0[v8:word64] = x25
	v8 = v8 + 8
	Mem0[v8:word64] = x26
	v11 = sp + 80
	Mem0[v11:word64] = x27
	v11 = v11 + 8
	Mem0[v11:word64] = x28
	v14 = sp + 16
	Mem0[v14:word64] = x19
	v14 = v14 + 8
	Mem0[v14:word64] = x20
	v17 = sp + 32
	Mem0[v17:word64] = x21
	v17 = v17 + 8
	Mem0[v17:word64] = x22
	v20 = sp + 48
	Mem0[v20:word64] = x23
	v20 = v20 + 8
	Mem0[v20:word64] = x24
	Mem0[x29 + 112:word64] = x0
	x26 = x1
	x27 = x2
	branch x0 == 0x0000000000000000 l00000000004372B0
	// succ:  l0000000000437180 l00000000004372B0
l0000000000437180:
	w0 = Mem0[x0 + 12:word32]
	branch w0 == 0x00000000 l00000000004372B0
	// succ:  l0000000000437188 l00000000004372B0
l0000000000437188:
	branch x2 == 0x0000000000000000 l00000000004372CC
	// succ:  l000000000043718C l00000000004372CC
l000000000043718C:
	x1 = Mem0[x29 + 112:word64]
	w0 = Mem0[x1 + 8:word32]
	NZCV = cond(w0 - w31)
	branch Test(LE,ZCV) l00000000004372B0
	// succ:  l000000000043719C l00000000004372B0
l000000000043719C:
	Mem0[x29 + 104:word64] = 0x0000000000000000
	w2 = Mem0[x29 + 104:word32]
	x1 = 0x00000000004AC000
	x1 = x1 + 0xFFFFFFFFFFFFF910
	Mem0[x29 + 100:word32] = w2
	Mem0[x29 + 120:word64] = x1
	// succ:  l00000000004371B4
l00000000004371B4:
	x2 = Mem0[x29 + 112:word64]
	x1 = Mem0[x2:word64]
	x2 = Mem0[x29 + 104:word64]
	x22 = Mem0[x1 + x2:word64]
	branch x22 == 0x0000000000000000 l0000000000437290
	// succ:  l00000000004371C8 l0000000000437290
l00000000004371C8:
	x31 = x27 - x31
	NZCV = cond(x31)
	w0 = (word32) Test(NE,Z)
	Mem0[x29 + 96:word32] = w0
	goto l00000000004371EC
	// succ:  l00000000004371EC
l00000000004371D8:
	x0 = x23
	call x26 (retsize: 0;)
	branch w0 != 0x00000000 l00000000004371F4
	// succ:  l00000000004371E4 l00000000004371F4
l00000000004371E4:
	x22 = Mem0[x22:word64]
	branch x22 == 0x0000000000000000 l0000000000437288
	// succ:  l00000000004371EC l0000000000437288
l00000000004371EC:
	x23 = Mem0[x22 + 16:word64]
	branch x26 != 0x0000000000000000 l00000000004371D8
	// succ:  l00000000004371F4 l00000000004371D8
l00000000004371F4:
	w1 = Mem0[x29 + 96:word32]
	branch w1 == 0x00000000 l00000000004371E4
	// succ:  l00000000004371FC l00000000004371E4
l00000000004371FC:
	w21 = Mem0[x27 + 12:word32]
	NZCV = cond(w21 - w31)
	branch Test(LE,ZCV) l000000000043731C
	// succ:  l0000000000437208 l000000000043731C
l0000000000437208:
	x24 = Mem0[x23:word64]
	x28 = Mem0[x27:word64]
	v43 = Mem0[x24:byte]
	w25 = (word32) v43
	x20 = x28
	w19 = 0x00000000
	goto l0000000000437228
	// succ:  l0000000000437228
l0000000000437220:
	NZCV = cond(w19 - w21)
	branch Test(EQ,Z) l0000000000437258
	// succ:  l0000000000437228 l0000000000437258
l0000000000437228:
	x3 = Mem0[x20:word64]
	w19 = w19 + 0x00000001
	x1 = Mem0[x3:word64]
	x20 = x20 + 0x0000000000000008
	v48 = Mem0[x1:byte]
	w3 = (word32) v48
	NZCV = cond(w3 - w25)
	branch Test(NE,Z) l0000000000437220
	// succ:  l0000000000437244 l0000000000437220
l0000000000437244:
	x0 = x24
	strcmp(x0, x1)
	sp = sp + 0xFFFFFFFFFFFFFFF8
	branch w0 == 0x00000000 l00000000004371E4
	// succ:  l0000000000437250 l00000000004371E4
l0000000000437250:
	NZCV = cond(w19 - w21)
	branch Test(NE,Z) l0000000000437228
	// succ:  l0000000000437258 l0000000000437228
l0000000000437258:
	w0 = Mem0[x27 + 8:word32]
	NZCV = cond(w0 - w19)
	branch Test(LE,ZCV) l00000000004372EC
	// succ:  l0000000000437264 l00000000004372EC
l0000000000437264:
	w0 = w21 + 0x00000001
	Mem0[x27 + 12:word32] = w0
	Mem0[x28 + (int64) ((int32) w21):word64] = x23
	x0 = Mem0[x27:word64]
	x2 = 0x0000000000000008
	x21 = x2 + (int64) ((int32) w21)
	Mem0[x0 + x21:word64] = 0x0000000000000000
	x22 = Mem0[x22:word64]
	branch x22 != 0x0000000000000000 l00000000004371EC
	// succ:  l0000000000437288 l00000000004371EC
l0000000000437288:
	x1 = Mem0[x29 + 112:word64]
	w0 = Mem0[x1 + 8:word32]
	// succ:  l0000000000437290
l0000000000437290:
	w1 = Mem0[x29 + 100:word32]
	x2 = Mem0[x29 + 104:word64]
	w1 = w1 + 0x00000001
	x2 = x2 + 0x0000000000000008
	Mem0[x29 + 100:word32] = w1
	NZCV = cond(w0 - w1)
	Mem0[x29 + 104:word64] = x2
	branch Test(GT,NZV) l00000000004371B4
	// succ:  l00000000004372B0 l00000000004371B4
l00000000004372B0:
	v30 = sp + 16
	x19 = Mem0[v30:word64]
	v30 = v30 + 8
	x20 = Mem0[v30:word64]
	v31 = sp + 32
	x21 = Mem0[v31:word64]
	v31 = v31 + 8
	x22 = Mem0[v31:word64]
	v32 = sp + 48
	x23 = Mem0[v32:word64]
	v32 = v32 + 8
	x24 = Mem0[v32:word64]
	v33 = sp + 64
	x25 = Mem0[v33:word64]
	v33 = v33 + 8
	x26 = Mem0[v33:word64]
	v34 = sp + 80
	x27 = Mem0[v34:word64]
	v34 = v34 + 8
	x28 = Mem0[v34:word64]
	x29 = Mem0[sp:word64]
	sp = sp + 8
	x30 = Mem0[sp:word64]
	sp = sp + 128
	return
	// succ:  fn0000000000437154_exit
l00000000004372CC:
	branch x1 != 0x0000000000000000 l000000000043718C
	// succ:  l00000000004372D0 l000000000043718C
l00000000004372D0:
	v35 = sp + 16
	x19 = Mem0[v35:word64]
	v35 = v35 + 8
	x20 = Mem0[v35:word64]
	v36 = sp + 32
	x21 = Mem0[v36:word64]
	v36 = v36 + 8
	x22 = Mem0[v36:word64]
	v37 = sp + 48
	x23 = Mem0[v37:word64]
	v37 = v37 + 8
	x24 = Mem0[v37:word64]
	v38 = sp + 64
	x25 = Mem0[v38:word64]
	v38 = v38 + 8
	x26 = Mem0[v38:word64]
	v39 = sp + 80
	x27 = Mem0[v39:word64]
	v39 = v39 + 8
	x28 = Mem0[v39:word64]
	x29 = Mem0[sp:word64]
	sp = sp + 8
	x30 = Mem0[sp:word64]
	sp = sp + 128
	return
	// succ:  fn0000000000437154_exit
l00000000004372EC:
	w2 = w0 + 0x00000010
	w1 = w0 + 0x00000011
	Mem0[x27 + 8:word32] = w2
	x2 = Mem0[x29 + 120:word64]
	x0 = x28
l000000000043731C:
	x28 = Mem0[x27:word64]
	w19 = 0x00000000
	goto l0000000000437258
	// succ:  l0000000000437258
fn0000000000437154_exit:


// fn0000000000437328
// Return size: 0
void fn0000000000437328()
fn0000000000437328_entry:
	// succ:  l0000000000437328
l0000000000437328:
	sp = fp
	sp = sp + -16
	Mem0[sp:word64] = x29
	sp = sp + 8
	Mem0[sp:word64] = x30
	x29 = x31 + 0x0000000000000000
	x1 = Mem0[x0 + 8:word64]
	branch x1 == 0x0000000000000000 l000000000043735C
	// succ:  l0000000000437338 l000000000043735C
l0000000000437338:
	w2 = 0x00000003
	x0 = 0x0000000000000000
	call named_function_string (retsize: 0;)
	x1 = 0x00000000004BF000
	x29 = Mem0[sp:word64]
	sp = sp + 8
	x30 = Mem0[sp:word64]
	sp = sp + 16
	x2 = x0
	x1 = x1 + 0x0000000000000050
	w0 = 0x00000001
	__printf_chk(x0, x1, Mem0[sp:<unknown>])
	return
	// succ:  fn0000000000437328_exit
l000000000043735C:
	x29 = Mem0[sp:word64]
	sp = sp + 8
	x30 = Mem0[sp:word64]
	sp = sp + 16
	return
	// succ:  fn0000000000437328_exit
fn0000000000437328_exit:


// fn0000000000437364
// Return size: 0
void fn0000000000437364()
fn0000000000437364_entry:
	// succ:  l0000000000437364
l0000000000437364:
	sp = fp
	sp = sp + -96
	Mem0[sp:word64] = x29
	sp = sp + 8
	Mem0[sp:word64] = x30
	x29 = x31 + 0x0000000000000000
	v8 = sp + 16
	Mem0[v8:word64] = x19
	v8 = v8 + 8
	Mem0[v8:word64] = x20
	v11 = sp + 48
	Mem0[v11:word64] = x23
	v11 = v11 + 8
	Mem0[v11:word64] = x24
	v14 = sp + 80
	Mem0[v14:word64] = x27
	v14 = v14 + 8
	Mem0[v14:word64] = x28
	x24 = x0
	v18 = sp + 32
	Mem0[v18:word64] = x21
	v18 = v18 + 8
	Mem0[v18:word64] = x22
	v21 = sp + 64
	Mem0[v21:word64] = x25
	v21 = v21 + 8
	Mem0[v21:word64] = x26
	call strvec_len (retsize: 0;)
	w0 = w0 + 0x00000001
	call strvec_create (retsize: 0;)
	x20 = Mem0[x24:word64]
	x27 = x0
	branch x20 == 0x0000000000000000 l000000000043751C
	// succ:  l000000000043739C l000000000043751C
l000000000043739C:
	x28 = 0x00000000004AC000
	x24 = x24 + 0x0000000000000008
	w22 = 0x00000000
	x28 = x28 + 0xFFFFFFFFFFFFF910
	// succ:  l00000000004373AC
l00000000004373AC:
	x19 = Mem0[x20 + 16:word64]
	branch x19 == 0x0000000000000000 l0000000000437448
	// succ:  l00000000004373B4 l0000000000437448
l00000000004373B4:
	x23 = x27 + (int64) ((int32) w22)
	x21 = x19
	// succ:  l00000000004373BC
l00000000004373BC:
	x0 = x21
	strlen(x0)
	sp = sp + 0xFFFFFFFFFFFFFFF8
	w2 = 0x00000DA9
	x1 = x28
	x0 = x0 + 0x0000000000000001
	call sh_xmalloc (retsize: 0;)
	x1 = x21
	strcpy(x0, x1)
	sp = sp + 0xFFFFFFFFFFFFFFF8
	x25 = 0x00000000004AC000
	Mem0[x23:word64] = x0
	x2 = Mem0[x20 + 16:word64]
	x31 = x2 - x19
	NZCV = cond(x31)
	branch Test(EQ,Z) l0000000000437414
	// succ:  l00000000004373F0 l0000000000437414
l00000000004373F0:
	branch x0 == 0x0000000000000000 l0000000000437410
	// succ:  l00000000004373F4 l0000000000437410
l00000000004373F4:
	strlen(x0)
	sp = sp + 0xFFFFFFFFFFFFFFF8
	x1 = x25 + 0xFFFFFFFFFFFFF910
	w2 = 0x00000DAD
	x0 = x0 + 0x0000000000000001
	call sh_xmalloc (retsize: 0;)
	x1 = Mem0[x23:word64]
	strcpy(x0, x1)
	sp = sp + 0xFFFFFFFFFFFFFFF8
	// succ:  l0000000000437410
l0000000000437410:
	Mem0[x20 + 16:word64] = x0
	// succ:  l0000000000437414
l0000000000437414:
	w22 = w22 + 0x00000001
	// succ:  l0000000000437418
l0000000000437418:
	x20 = Mem0[x24:word64]
	x24 = x24 + 8
	branch x20 != 0x0000000000000000 l00000000004373AC
	// succ:  l0000000000437420 l00000000004373AC
l0000000000437420:
l0000000000437424:
	Mem0[x27 + x22:word64] = 0x0000000000000000
	x0 = x27
	v29 = sp + 16
	x19 = Mem0[v29:word64]
	v29 = v29 + 8
	x20 = Mem0[v29:word64]
	v30 = sp + 32
	x21 = Mem0[v30:word64]
	v30 = v30 + 8
	x22 = Mem0[v30:word64]
	v31 = sp + 48
	x23 = Mem0[v31:word64]
	v31 = v31 + 8
	x24 = Mem0[v31:word64]
	v32 = sp + 64
	x25 = Mem0[v32:word64]
	v32 = v32 + 8
	x26 = Mem0[v32:word64]
	v33 = sp + 80
	x27 = Mem0[v33:word64]
	v33 = v33 + 8
	x28 = Mem0[v33:word64]
	x29 = Mem0[sp:word64]
	sp = sp + 8
	x30 = Mem0[sp:word64]
	sp = sp + 96
	return
	// succ:  fn0000000000437364_exit
l0000000000437448:
	w0 = Mem0[x20 + 40:word32]
	branch (w0 & 0x00000008) == 0x00000000 l0000000000437500
	// succ:  l0000000000437450 l0000000000437500
l0000000000437450:
	w1 = 0x00000044
	NZ = cond(w0 & w1)
	C = false
	V = false
	branch Test(NE,Z) l0000000000437418
	// succ:  l000000000043745C l0000000000437418
l000000000043745C:
	x19 = Mem0[x20 + 8:word64]
	branch x19 == 0x0000000000000000 l0000000000437418
	// succ:  l0000000000437464 l0000000000437418
l0000000000437464:
	x21 = Mem0[x20 + 16:word64]
	x23 = x27 + (int64) ((int32) w22)
	x31 = x19 - x21
	NZCV = cond(x31)
	branch Test(EQ,Z) l00000000004373BC
	// succ:  l0000000000437474 l00000000004373BC
l0000000000437474:
	x25 = Mem0[x20:word64]
	x0 = x25
	strlen(x0)
	sp = sp + 0xFFFFFFFFFFFFFFF8
	x26 = x0
	v38 = Mem0[x19:byte]
	w0 = (word32) v38
	w2 = 0x00000000
	branch w0 == 0x00000000 l00000000004374B4
	// succ:  l0000000000437490 l00000000004374B4
l0000000000437490:
	v39 = Mem0[x19 + 1:byte]
	w0 = (word32) v39
	w2 = 0x00000001
	branch w0 == 0x00000000 l00000000004374B4
	// succ:  l000000000043749C l00000000004374B4
l000000000043749C:
	v40 = Mem0[x19 + 2:byte]
	w0 = (word32) v40
	w2 = 0x00000002
	branch w0 == 0x00000000 l00000000004374B4
	// succ:  l00000000004374A8 l00000000004374B4
l00000000004374A8:
	x0 = x19
	strlen(x0)
	sp = sp + 0xFFFFFFFFFFFFFFF8
	w2 = w0
	// succ:  l00000000004374B4
l00000000004374B4:
	w3 = w26 + 0x00000002
	w0 = w3 + w2
	x1 = x28
	w2 = 0x00000D4E
l0000000000437500:
	x1 = Mem0[x20 + 8:word64]
	x0 = x19
	w2 = w19
	call named_function_string (retsize: 0;)
	x19 = x0
	branch x19 == 0x0000000000000000 l0000000000437418
	// succ:  l0000000000437518 l0000000000437418
l0000000000437518:
	goto l0000000000437464
	// succ:  l0000000000437464
l000000000043751C:
	x22 = x20
	goto l0000000000437424
	// succ:  l0000000000437424
fn0000000000437364_exit:


// sh_get_home_dir
// Return size: 0
void sh_get_home_dir()
sh_get_home_dir_entry:
	// succ:  l000000000043753C
l000000000043753C:
	sp = fp
	sp = sp + -32
	Mem0[sp:word64] = x29
	sp = sp + 8
	Mem0[sp:word64] = x30
	x29 = x31 + 0x0000000000000000
	Mem0[sp + 16:word64] = x19
	x19 = 0x00000000004D6000
	x19 = x19 + 0x0000000000000660
	x0 = Mem0[x19 + 32:word64]
	branch x0 == 0x0000000000000000 l0000000000437564
	// succ:  l0000000000437558 l0000000000437564
l0000000000437558:
	x19 = Mem0[sp + 16:word64]
	x29 = Mem0[sp:word64]
	sp = sp + 8
	x30 = Mem0[sp:word64]
	sp = sp + 32
	return
	// succ:  sh_get_home_dir_exit
l0000000000437564:
	call get_current_user_info (retsize: 0;)
	x0 = Mem0[x19 + 32:word64]
	x19 = Mem0[sp + 16:word64]
	x29 = Mem0[sp:word64]
	sp = sp + 8
	x30 = Mem0[sp:word64]
	sp = sp + 32
	return
	// succ:  sh_get_home_dir_exit
sh_get_home_dir_exit:


// print_func_list
// Return size: 0
void print_func_list()
print_func_list_entry:
	// succ:  l0000000000437578
l0000000000437578:
	sp = fp
	sp = sp + -48
	Mem0[sp:word64] = x29
	sp = sp + 8
	Mem0[sp:word64] = x30
	x29 = x31 + 0x0000000000000000
	v8 = sp + 16
	Mem0[v8:word64] = x19
	v8 = v8 + 8
	Mem0[v8:word64] = x20
	Mem0[sp + 32:word64] = x21
	branch x0 == 0x0000000000000000 l00000000004375E4
	// succ:  l000000000043758C l00000000004375E4
l000000000043758C:
	x19 = Mem0[x0:word64]
	branch x19 == 0x0000000000000000 l00000000004375E4
	// succ:  l0000000000437594 l00000000004375E4
l0000000000437594:
	x21 = 0x00000000004AC000
	x20 = x0 + 0x0000000000000008
	x21 = x21 + 0x00000000000003C0
	goto l00000000004375B4
	// succ:  l00000000004375B4
l00000000004375A4:
	w0 = 0x0000000A
	putchar(x0)
	sp = sp + 0xFFFFFFFFFFFFFFF8
	x19 = Mem0[x20:word64]
	x20 = x20 + 8
	branch x19 == 0x0000000000000000 l00000000004375E4
	// succ:  l00000000004375B4 l00000000004375E4
l00000000004375B4:
	x2 = Mem0[x19:word64]
	x1 = x21
	w0 = 0x00000001
	__printf_chk(x0, x1, Mem0[sp:<unknown>])
	sp = sp + 0xFFFFFFFFFFFFFFF8
	w0 = Mem0[x19 + 40:word32]
	branch (w0 & 0x00000008) == 0x00000000 l00000000004375A4
	// succ:  l00000000004375CC l00000000004375A4
l00000000004375CC:
	x0 = x19
	call fn0000000000437328 (retsize: 0;)
	w0 = 0x0000000A
	putchar(x0)
	sp = sp + 0xFFFFFFFFFFFFFFF8
	x19 = Mem0[x20:word64]
	x20 = x20 + 8
	branch x19 != 0x0000000000000000 l00000000004375B4
	// succ:  l00000000004375E4 l00000000004375B4
l00000000004375E4:
	v11 = sp + 16
	x19 = Mem0[v11:word64]
	v11 = v11 + 8
	x20 = Mem0[v11:word64]
	x21 = Mem0[sp + 32:word64]
	x29 = Mem0[sp:word64]
	sp = sp + 8
	x30 = Mem0[sp:word64]
	sp = sp + 48
	return
	// succ:  print_func_list_exit
print_func_list_exit:


// print_var_value
// Return size: 0
void print_var_value()
print_var_value_entry:
	// succ:  l00000000004375F4
l00000000004375F4:
	sp = fp
	sp = sp + -32
	Mem0[sp:word64] = x29
	sp = sp + 8
	Mem0[sp:word64] = x30
	x29 = x31 + 0x0000000000000000
	x2 = Mem0[x0 + 8:word64]
	v10 = sp + 16
	Mem0[v10:word64] = x19
	v10 = v10 + 8
	Mem0[v10:word64] = x20
	x19 = x0
	branch x2 == 0x0000000000000000 l0000000000437658
	// succ:  l000000000043760C l0000000000437658
l000000000043760C:
	branch w1 == 0x00000000 l000000000043762C
	// succ:  l0000000000437610 l000000000043762C
l0000000000437610:
	x0 = 0x00000000004DE000
	w20 = Mem0[x0 + 1716:word32]
	branch w20 == 0x00000000 l0000000000437644
	// succ:  l000000000043761C l0000000000437644
l000000000043761C:
	x0 = x2
	call sh_contains_shell_metas (retsize: 0;)
	branch w0 != 0x00000000 l0000000000437664
	// succ:  l0000000000437628 l0000000000437664
l0000000000437628:
	x2 = Mem0[x19 + 8:word64]
	// succ:  l000000000043762C
l000000000043762C:
	v18 = sp + 16
	x19 = Mem0[v18:word64]
	v18 = v18 + 8
	x20 = Mem0[v18:word64]
	x1 = 0x00000000004BF000
	x29 = Mem0[sp:word64]
	sp = sp + 8
	x30 = Mem0[sp:word64]
	sp = sp + 32
	w0 = 0x00000001
	x1 = x1 + 0x0000000000000050
	__printf_chk(x0, x1, Mem0[sp:<unknown>])
	return
	// succ:  print_var_value_exit
l0000000000437644:
	x0 = x2
	call ansic_shouldquote (retsize: 0;)
	branch w0 != 0x00000000 l00000000004376A0
	// succ:  l0000000000437650 l00000000004376A0
l0000000000437650:
	x2 = Mem0[x19 + 8:word64]
	goto l000000000043761C
	// succ:  l000000000043761C
l0000000000437658:
	v14 = sp + 16
	x19 = Mem0[v14:word64]
	v14 = v14 + 8
	x20 = Mem0[v14:word64]
	x29 = Mem0[sp:word64]
	sp = sp + 8
	x30 = Mem0[sp:word64]
	sp = sp + 32
	return
	// succ:  print_var_value_exit
l0000000000437664:
	x0 = Mem0[x19 + 8:word64]
	call sh_single_quote (retsize: 0;)
	x1 = 0x00000000004BF000
	x19 = x0
	x2 = x0
	x1 = x1 + 0x0000000000000050
	w0 = 0x00000001
	__printf_chk(x0, x1, Mem0[sp:<unknown>])
	sp = sp + 0xFFFFFFFFFFFFFFF8
	x0 = x19
	x1 = 0x00000000004AC000
	v16 = sp + 16
	x19 = Mem0[v16:word64]
	v16 = v16 + 8
	x20 = Mem0[v16:word64]
	x29 = Mem0[sp:word64]
	sp = sp + 8
	x30 = Mem0[sp:word64]
	sp = sp + 32
	x1 = x1 + 0xFFFFFFFFFFFFF910
	w2 = 0x000003F9
	// succ:  l000000000043769C_thunk_sh_xfree
l000000000043769C_thunk_sh_xfree:
	call sh_xfree (retsize: 0;)
	return
	// succ:  print_var_value_exit
l00000000004376A0:
	x0 = Mem0[x19 + 8:word64]
	w1 = w20
	x2 = 0x0000000000000000
	call ansic_quote (retsize: 0;)
	x1 = 0x00000000004BF000
	x19 = x0
	x2 = x0
	x1 = x1 + 0x0000000000000050
	w0 = 0x00000001
	__printf_chk(x0, x1, Mem0[sp:<unknown>])
	sp = sp + 0xFFFFFFFFFFFFFFF8
	x0 = x19
	x1 = 0x00000000004AC000
	v19 = sp + 16
	x19 = Mem0[v19:word64]
	v19 = v19 + 8
	x20 = Mem0[v19:word64]
	x29 = Mem0[sp:word64]
	sp = sp + 8
	x30 = Mem0[sp:word64]
	sp = sp + 32
	x1 = x1 + 0xFFFFFFFFFFFFF910
	w2 = 0x000003F3
	// succ:  l00000000004376E0_thunk_sh_xfree
l00000000004376E0_thunk_sh_xfree:
	call sh_xfree (retsize: 0;)
	return
	// succ:  print_var_value_exit
print_var_value_exit:


// print_assignment
// Return size: 0
void print_assignment()
print_assignment_entry:
	// succ:  l00000000004376E4
l00000000004376E4:
	sp = fp
	sp = sp + -32
	Mem0[sp:word64] = x29
	sp = sp + 8
	Mem0[sp:word64] = x30
	x29 = x31 + 0x0000000000000000
	x1 = Mem0[x0 + 8:word64]
	Mem0[sp + 16:word64] = x19
	x19 = x0
	branch x1 == 0x0000000000000000 l0000000000437794
	// succ:  l00000000004376FC l0000000000437794
l00000000004376FC:
	w2 = Mem0[x0 + 40:word32]
	w3 = w2 & 0x00000008
	branch (w2 & 0x00000008) == 0x00000000 l0000000000437744
	// succ:  l0000000000437708 l0000000000437744
l0000000000437708:
	w1 = w2 & 0x00000004
	branch (w2 & 0x00000004) == 0x00000000 l0000000000437784
	// succ:  l0000000000437710 l0000000000437784
l0000000000437710:
	branch (w2 & 0x00000040) == 0x00000000 l0000000000437778
	// succ:  l0000000000437714 l0000000000437778
l0000000000437714:
	x2 = Mem0[x0:word64]
	x1 = 0x00000000004AC000
	x1 = x1 + 0xFFFFFFFFFFFFF928
	w0 = 0x00000001
	__printf_chk(x0, x1, Mem0[sp:<unknown>])
	sp = sp + 0xFFFFFFFFFFFFFFF8
	x0 = x19
	w1 = 0x00000001
	call print_var_value (retsize: 0;)
	// succ:  l0000000000437734
l0000000000437734:
	x19 = Mem0[sp + 16:word64]
	x29 = Mem0[sp:word64]
	sp = sp + 8
	x30 = Mem0[sp:word64]
	sp = sp + 32
	w0 = 0x0000000A
	putchar(x0)
	return
	// succ:  print_assignment_exit
l0000000000437744:
	x2 = Mem0[x0:word64]
	x1 = 0x00000000004BF000
	w0 = 0x00000001
	x1 = x1 + 0x0000000000000050
	__printf_chk(x0, x1, Mem0[sp:<unknown>])
	sp = sp + 0xFFFFFFFFFFFFFFF8
	w0 = Mem0[x19 + 40:word32]
	branch (w0 & 0x00000008) == 0x00000000 l0000000000437734
	// succ:  l0000000000437760 l0000000000437734
l0000000000437760:
	x0 = x19
	call fn0000000000437328 (retsize: 0;)
	x19 = Mem0[sp + 16:word64]
	x29 = Mem0[sp:word64]
	sp = sp + 8
	x30 = Mem0[sp:word64]
	sp = sp + 32
	w0 = 0x0000000A
	putchar(x0)
	return
	// succ:  print_assignment_exit
l0000000000437778:
	x19 = Mem0[sp + 16:word64]
	x29 = Mem0[sp:word64]
	sp = sp + 8
	x30 = Mem0[sp:word64]
	sp = sp + 32
	// succ:  l0000000000437780_thunk_print_assoc_assignment
l0000000000437780_thunk_print_assoc_assignment:
	call print_assoc_assignment (retsize: 0;)
	return
	// succ:  print_assignment_exit
l0000000000437784:
	x19 = Mem0[sp + 16:word64]
	x29 = Mem0[sp:word64]
	sp = sp + 8
	x30 = Mem0[sp:word64]
	sp = sp + 32
	w1 = w3
	// succ:  l0000000000437790_thunk_print_array_assignment
l0000000000437790_thunk_print_array_assignment:
	call print_array_assignment (retsize: 0;)
	return
	// succ:  print_assignment_exit
l0000000000437794:
	x19 = Mem0[sp + 16:word64]
	x29 = Mem0[sp:word64]
	sp = sp + 8
	x30 = Mem0[sp:word64]
	sp = sp + 32
	return
	// succ:  print_assignment_exit
print_assignment_exit:


// print_var_list
// Return size: 0
void print_var_list()
print_var_list_entry:
	// succ:  l00000000004377A0
l00000000004377A0:
	sp = fp
	sp = sp + -32
	Mem0[sp:word64] = x29
	sp = sp + 8
	Mem0[sp:word64] = x30
	x29 = x31 + 0x0000000000000000
	Mem0[sp + 16:word64] = x19
	x19 = x0
	branch x0 == 0x0000000000000000 l00000000004377E0
	// succ:  l00000000004377B4 l00000000004377E0
l00000000004377B4:
	x0 = Mem0[x0:word64]
	branch x0 == 0x0000000000000000 l00000000004377E0
	// succ:  l00000000004377BC l00000000004377E0
l00000000004377BC:
	x19 = x19 + 0x0000000000000008
	goto l00000000004377CC
	// succ:  l00000000004377CC
l00000000004377C4:
	x0 = Mem0[x19:word64]
	x19 = x19 + 8
	branch x0 == 0x0000000000000000 l00000000004377E0
	// succ:  l00000000004377CC l00000000004377E0
l00000000004377CC:
	w1 = Mem0[x0 + 40:word32]
	branch (w1 & 0x00001000) == 0x00000000 l00000000004377C4
	// succ:  l00000000004377D4 l00000000004377C4
l00000000004377D4:
	call print_assignment (retsize: 0;)
	x0 = Mem0[x19:word64]
	x19 = x19 + 8
	branch x0 != 0x0000000000000000 l00000000004377CC
	// succ:  l00000000004377E0 l00000000004377CC
l00000000004377E0:
	x19 = Mem0[sp + 16:word64]
	x29 = Mem0[sp:word64]
	sp = sp + 8
	x30 = Mem0[sp:word64]
	sp = sp + 32
	return
	// succ:  print_var_list_exit
print_var_list_exit:


// print_var_function
// Return size: 0
void print_var_function()
print_var_function_entry:
	// succ:  l00000000004377EC
l00000000004377EC:
	sp = fp
	w1 = Mem0[x0 + 40:word32]
	branch (w1 & 0x00000008) == 0x00000000 l00000000004377F8
	// succ:  l00000000004377F4 l00000000004377F8
l00000000004377F4:
	// succ:  l00000000004377F4_thunk_fn0000000000437328
l00000000004377F4_thunk_fn0000000000437328:
	call fn0000000000437328 (retsize: 0;)
	return
	// succ:  print_var_function_exit
l00000000004377F8:
	return
	// succ:  print_var_function_exit
print_var_function_exit:


// get_random_number
// Return size: 0
void get_random_number()
get_random_number_entry:
	// succ:  l00000000004377FC
l00000000004377FC:
	sp = fp
	sp = sp + -48
	Mem0[sp:word64] = x29
	sp = sp + 8
	Mem0[sp:word64] = x30
	x29 = x31 + 0x0000000000000000
	v8 = sp + 16
	Mem0[v8:word64] = x19
	v8 = v8 + 8
	Mem0[v8:word64] = x20
	call getpid (retsize: 0;)
	x1 = 0x00000000004E3000
	w1 = Mem0[x1 + 1184:word32]
	x19 = 0x00000000004DF000
	branch w1 == 0x00000000 l000000000043783C
	// succ:  l000000000043781C l000000000043783C
l000000000043781C:
	x20 = x19 + 0xFFFFFFFFFFFFFC60
	w1 = Mem0[x20 + 24:word32]
	NZCV = cond(w1 - w0)
	branch Test(EQ,Z) l000000000043783C
	// succ:  l000000000043782C l000000000043783C
l000000000043782C:
	Mem0[x29 + 32:word64] = x0
	call fn00000000004368F0 (retsize: 0;)
	x0 = Mem0[x29 + 32:word64]
	Mem0[x20 + 24:word32] = w0
	// succ:  l000000000043783C
l000000000043783C:
	x7 = 0x00000000004D6000
	x19 = x19 + 0xFFFFFFFFFFFFFC60
	x0 = x7 + 0xFFFFFFFFFFFFFA50
	w5 = Mem0[x19 + 4:word32]
	x1 = Mem0[x0:word64]
	x6 = 0x00000000000041A7
	x4 = 0xFFFFFFFFFFFFF4EC
	// succ:  l0000000000437878
l0000000000437878:
	x0 = 0xFFFFFFFFFFFFFB79
	x0 = DPB(x0, 0x1FE3, 16)
	x0 = DPB(x0, 0x05AF, 32)
	x0 = DPB(x0, 0x41A7, 48)
	x0 = SLICE(w1 *u w0, uint64, 64)
	x3 = 0xFFFFFFFFFFFFF31D
	x2 = 0xFFFFFFFFFFFFF31D
get_random_number_exit:


// var_lookup
// Return size: 0
void var_lookup()
var_lookup_entry:
	// succ:  l0000000000437938
l0000000000437938:
	sp = fp
	sp = sp + -32
	Mem0[sp:word64] = x29
	sp = sp + 8
	Mem0[sp:word64] = x30
	x29 = x31 + 0x0000000000000000
	v8 = sp + 16
	Mem0[v8:word64] = x19
	v8 = v8 + 8
	Mem0[v8:word64] = x20
	x19 = x1
	x20 = x0
	branch x1 != 0x0000000000000000 l000000000043795C
	// succ:  l0000000000437950 l000000000043795C
l0000000000437950:
	goto l0000000000437984
	// succ:  l0000000000437984
l0000000000437954:
	x19 = Mem0[x19 + 24:word64]
	branch x19 == 0x0000000000000000 l0000000000437984
	// succ:  l000000000043795C l0000000000437984
l000000000043795C:
	x1 = Mem0[x19 + 32:word64]
	x0 = x20
	w2 = 0x00000000
	call hash_search (retsize: 0;)
	branch x0 == 0x0000000000000000 l0000000000437954
	// succ:  l0000000000437970 l0000000000437954
l0000000000437970:
	x0 = Mem0[x0 + 16:word64]
	branch x0 == 0x0000000000000000 l0000000000437954
	// succ:  l0000000000437978 l0000000000437954
l0000000000437978:
	v12 = sp + 16
	x19 = Mem0[v12:word64]
	v12 = v12 + 8
	x20 = Mem0[v12:word64]
	x29 = Mem0[sp:word64]
	sp = sp + 8
	x30 = Mem0[sp:word64]
	sp = sp + 32
	return
	// succ:  var_lookup_exit
l0000000000437984:
	x0 = x19
	v13 = sp + 16
	x19 = Mem0[v13:word64]
	v13 = v13 + 8
	x20 = Mem0[v13:word64]
	x29 = Mem0[sp:word64]
	sp = sp + 8
	x30 = Mem0[sp:word64]
	sp = sp + 32
	return
	// succ:  var_lookup_exit
var_lookup_exit:


// find_variable_internal
// Return size: 0
void find_variable_internal()
find_variable_internal_entry:
	// succ:  l0000000000437994
l0000000000437994:
	sp = fp
	sp = sp + -32
	Mem0[sp:word64] = x29
	sp = sp + 8
	Mem0[sp:word64] = x30
	x29 = x31 + 0x0000000000000000
	v6 = sp + 16
	Mem0[v6:word64] = x19
	v6 = v6 + 8
	Mem0[v6:word64] = x20
	x20 = x0
	branch w1 != 0x00000000 l00000000004379DC
	// succ:  l00000000004379A8 l00000000004379DC
l00000000004379A8:
	x0 = 0x00000000004E3000
	w0 = Mem0[x0 + 3484:word32]
	branch w0 == 0x00000000 l00000000004379D0
	// succ:  l00000000004379B4 l00000000004379D0
l00000000004379B4:
	x19 = 0x00000000004DF000
	// succ:  l00000000004379B8
l00000000004379B8:
	x19 = x19 + 0xFFFFFFFFFFFFFC60
	x1 = Mem0[x19 + 32:word64]
	x0 = x20
	call var_lookup (retsize: 0;)
	branch x0 != 0x0000000000000000 l0000000000437A04
	// succ:  l00000000004379CC l0000000000437A04
l00000000004379CC:
	goto l0000000000437A10
	// succ:  l0000000000437A10
l00000000004379D0:
	x0 = 0x00000000004E3000
	w0 = Mem0[x0 + 1184:word32]
	branch w0 == 0x00000000 l00000000004379B4
	// succ:  l00000000004379DC l00000000004379B4
l00000000004379DC:
	x19 = 0x00000000004DF000
	x0 = x19 + 0xFFFFFFFFFFFFFC60
	x1 = Mem0[x0 + 40:word64]
	branch x1 == 0x0000000000000000 l00000000004379B8
	// succ:  l00000000004379EC l00000000004379B8
l00000000004379EC:
	x0 = x20
	w2 = 0x00000000
	call hash_search (retsize: 0;)
	branch x0 == 0x0000000000000000 l00000000004379B8
	// succ:  l00000000004379FC l00000000004379B8
l00000000004379FC:
	x0 = Mem0[x0 + 16:word64]
	branch x0 == 0x0000000000000000 l00000000004379B8
	// succ:  l0000000000437A04 l00000000004379B8
l0000000000437A04:
	x2 = Mem0[x0 + 24:word64]
	branch x2 == 0x0000000000000000 l0000000000437A10
	// succ:  l0000000000437A0C l0000000000437A10
l0000000000437A0C:
	call x2 (retsize: 0;)
	// succ:  l0000000000437A10
l0000000000437A10:
	v13 = sp + 16
	x19 = Mem0[v13:word64]
	v13 = v13 + 8
	x20 = Mem0[v13:word64]
	x29 = Mem0[sp:word64]
	sp = sp + 8
	x30 = Mem0[sp:word64]
	sp = sp + 32
	return
	// succ:  find_variable_internal_exit
find_variable_internal_exit:


// find_global_variable
// Return size: 0
void find_global_variable()
find_global_variable_entry:
	// succ:  l0000000000437A1C
l0000000000437A1C:
	sp = fp
	sp = sp + -16
	Mem0[sp:word64] = x29
	sp = sp + 8
	Mem0[sp:word64] = x30
	x29 = x31 + 0x0000000000000000
	x1 = 0x00000000004DF000
	x1 = x1 + 0xFFFFFFFFFFFFFC60
	x1 = Mem0[x1 + 48:word64]
	call var_lookup (retsize: 0;)
	x1 = x0
	branch x0 == 0x0000000000000000 l0000000000437A50
	// succ:  l0000000000437A3C l0000000000437A50
l0000000000437A3C:
	x2 = Mem0[x0 + 24:word64]
	branch x2 == 0x0000000000000000 l0000000000437A50
	// succ:  l0000000000437A44 l0000000000437A50
l0000000000437A44:
	call x2 (retsize: 0;)
	x29 = Mem0[sp:word64]
	sp = sp + 8
	x30 = Mem0[sp:word64]
	sp = sp + 16
	return
	// succ:  find_global_variable_exit
l0000000000437A50:
	x0 = x1
	x29 = Mem0[sp:word64]
	sp = sp + 8
	x30 = Mem0[sp:word64]
	sp = sp + 16
	return
	// succ:  find_global_variable_exit
find_global_variable_exit:


// find_variable
// Return size: 0
void find_variable()
find_variable_entry:
	// succ:  l0000000000437A5C
l0000000000437A5C:
	sp = fp
	x1 = 0x00000000004E3000
	w2 = Mem0[x1 + 3484:word32]
	w1 = 0x00000000
	branch w2 != 0x00000000 l0000000000437A84
	// succ:  l0000000000437A6C l0000000000437A84
l0000000000437A6C:
	x2 = 0x00000000004E3000
	w2 = Mem0[x2 + 1624:word32]
	branch w2 != 0x00000000 l0000000000437A88
	// succ:  l0000000000437A78 l0000000000437A88
l0000000000437A78:
	x2 = 0x00000000004DF000
	w2 = Mem0[x2 + 3052:word32]
	branch w2 != 0x00000000 l0000000000437A88
	// succ:  l0000000000437A84 l0000000000437A88
l0000000000437A84:
	// succ:  l0000000000437A84_thunk_find_variable_internal
l0000000000437A84_thunk_find_variable_internal:
	call find_variable_internal (retsize: 0;)
	return
	// succ:  find_variable_exit
l0000000000437A88:
	w1 = 0x00000001
	// succ:  l0000000000437A8C_thunk_find_variable_internal
l0000000000437A8C_thunk_find_variable_internal:
	call find_variable_internal (retsize: 0;)
	return
	// succ:  find_variable_exit
find_variable_exit:


// make_funcname_visible
// Return size: 0
void make_funcname_visible()
make_funcname_visible_entry:
	// succ:  l0000000000437A90
l0000000000437A90:
	sp = fp
	sp = sp + -32
	Mem0[sp:word64] = x29
	sp = sp + 8
	Mem0[sp:word64] = x30
	x29 = x31 + 0x0000000000000000
	Mem0[sp + 16:word64] = x19
	w19 = w0
	x0 = 0x00000000004AA000
	x0 = x0 + 0x00000000000003C8
	call find_variable (retsize: 0;)
	branch x0 == 0x0000000000000000 l0000000000437AC8
	// succ:  l0000000000437AB0 l0000000000437AC8
l0000000000437AB0:
	x1 = Mem0[x0 + 24:word64]
	branch x1 == 0x0000000000000000 l0000000000437AC8
	// succ:  l0000000000437AB8 l0000000000437AC8
l0000000000437AB8:
	w1 = Mem0[x0 + 40:word32]
	branch w19 != 0x00000000 l0000000000437AD4
	// succ:  l0000000000437AC0 l0000000000437AD4
l0000000000437AC0:
	w1 = w1 | 0x00001000
	Mem0[x0 + 40:word32] = w1
	// succ:  l0000000000437AC8
l0000000000437AC8:
	x19 = Mem0[sp + 16:word64]
	x29 = Mem0[sp:word64]
	sp = sp + 8
	x30 = Mem0[sp:word64]
	sp = sp + 32
	return
	// succ:  make_funcname_visible_exit
l0000000000437AD4:
	w1 = w1 & 0xFFFFEFFF
	Mem0[x0 + 40:word32] = w1
	x19 = Mem0[sp + 16:word64]
	x29 = Mem0[sp:word64]
	sp = sp + 8
	x30 = Mem0[sp:word64]
	sp = sp + 32
	return
	// succ:  make_funcname_visible_exit
make_funcname_visible_exit:


// sv_ifs
// Return size: 0
void sv_ifs()
sv_ifs_entry:
	// succ:  l0000000000437AE8
l0000000000437AE8:
	sp = fp
	sp = sp + -16
	Mem0[sp:word64] = x29
	sp = sp + 8
	Mem0[sp:word64] = x30
	x29 = x31 + 0x0000000000000000
	x0 = 0x00000000004AC000
	x0 = x0 + 0xFFFFFFFFFFFFF930
	call find_variable (retsize: 0;)
	x29 = Mem0[sp:word64]
	sp = sp + 8
	x30 = Mem0[sp:word64]
	sp = sp + 16
	// succ:  l0000000000437B00_thunk_setifs
l0000000000437B00_thunk_setifs:
	call setifs (retsize: 0;)
	return
	// succ:  sv_ifs_exit
sv_ifs_exit:


// sv_funcnest
// Return size: 0
void sv_funcnest()
sv_funcnest_entry:
	// succ:  l0000000000437B04
l0000000000437B04:
	sp = fp
	sp = sp + -32
	Mem0[sp:word64] = x29
	sp = sp + 8
	Mem0[sp:word64] = x30
	x29 = x31 + 0x0000000000000000
	call find_variable (retsize: 0;)
	branch x0 == 0x0000000000000000 l0000000000437B28
	// succ:  l0000000000437B14 l0000000000437B28
l0000000000437B14:
	x0 = Mem0[x0 + 8:word64]
	x1 = x29 + 0x0000000000000010
	call legal_number (retsize: 0;)
	branch w0 == 0x00000000 l0000000000437B28
	// succ:  l0000000000437B24 l0000000000437B28
l0000000000437B24:
	x0 = Mem0[x29 + 16:word64]
	// succ:  l0000000000437B28
l0000000000437B28:
	x1 = 0x00000000004DF000
	Mem0[x1 + 3132:word32] = w0
	x29 = Mem0[sp:word64]
	sp = sp + 8
	x30 = Mem0[sp:word64]
	sp = sp + 32
	return
	// succ:  sv_funcnest_exit
sv_funcnest_exit:


// sv_comp_wordbreaks
// Return size: 0
void sv_comp_wordbreaks()
sv_comp_wordbreaks_entry:
	// succ:  l0000000000437B38
l0000000000437B38:
	sp = fp
	sp = sp + -16
	Mem0[sp:word64] = x29
	sp = sp + 8
	Mem0[sp:word64] = x30
	x29 = x31 + 0x0000000000000000
	call find_variable (retsize: 0;)
	branch x0 == 0x0000000000000000 l0000000000437B50
	// succ:  l0000000000437B48 l0000000000437B50
l0000000000437B48:
	x29 = Mem0[sp:word64]
	sp = sp + 8
	x30 = Mem0[sp:word64]
	sp = sp + 16
	return
	// succ:  sv_comp_wordbreaks_exit
l0000000000437B50:
	x29 = Mem0[sp:word64]
	sp = sp + 8
	x30 = Mem0[sp:word64]
	sp = sp + 16
	// succ:  l0000000000437B54_thunk_reset_completer_word_break_chars
l0000000000437B54_thunk_reset_completer_word_break_chars:
	call reset_completer_word_break_chars (retsize: 0;)
	return
	// succ:  sv_comp_wordbreaks_exit
sv_comp_wordbreaks_exit:


// sv_hostfile
// Return size: 0
void sv_hostfile()
sv_hostfile_entry:
	// succ:  l0000000000437B58
l0000000000437B58:
	sp = fp
	sp = sp + -16
	Mem0[sp:word64] = x29
	sp = sp + 8
	Mem0[sp:word64] = x30
	x29 = x31 + 0x0000000000000000
	call find_variable (retsize: 0;)
	branch x0 == 0x0000000000000000 l0000000000437B78
	// succ:  l0000000000437B68 l0000000000437B78
l0000000000437B68:
	x0 = 0x00000000004E1000
	Mem0[x0 + 1256:word32] = 0x00000000
	x29 = Mem0[sp:word64]
	sp = sp + 8
	x30 = Mem0[sp:word64]
	sp = sp + 16
	return
	// succ:  sv_hostfile_exit
l0000000000437B78:
	x29 = Mem0[sp:word64]
	sp = sp + 8
	x30 = Mem0[sp:word64]
	sp = sp + 16
	// succ:  l0000000000437B7C_thunk_clear_hostname_list
l0000000000437B7C_thunk_clear_hostname_list:
	call clear_hostname_list (retsize: 0;)
	return
	// succ:  sv_hostfile_exit
sv_hostfile_exit:


// sv_histtimefmt
// Return size: 0
void sv_histtimefmt()
sv_histtimefmt_entry:
	// succ:  l0000000000437B80
l0000000000437B80:
	sp = fp
	sp = sp + -16
	Mem0[sp:word64] = x29
	sp = sp + 8
	Mem0[sp:word64] = x30
	x29 = x31 + 0x0000000000000000
	call find_variable (retsize: 0;)
	x31 = x0 - x31
	NZCV = cond(x31)
	w1 = (word32) Test(NE,Z)
	x0 = 0x00000000004E2000
	Mem0[x0 + 3952:word32] = w1
	x29 = Mem0[sp:word64]
	sp = sp + 8
	x30 = Mem0[sp:word64]
	sp = sp + 16
	return
	// succ:  sv_histtimefmt_exit
sv_histtimefmt_exit:


// sv_ignoreeof
// Return size: 0
void sv_ignoreeof()
sv_ignoreeof_entry:
	// succ:  l0000000000437BA4
l0000000000437BA4:
	sp = fp
	sp = sp + -32
	Mem0[sp:word64] = x29
	sp = sp + 8
	Mem0[sp:word64] = x30
	x29 = x31 + 0x0000000000000000
	x1 = 0x00000000004DE000
	Mem0[x1 + 2728:word32] = 0x00000000
	Mem0[sp + 16:word64] = x19
	call find_variable (retsize: 0;)
	x31 = x0 - x31
	NZCV = cond(x31)
	w1 = (word32) Test(NE,Z)
	x2 = 0x00000000004DE000
	Mem0[x2 + 2732:word32] = w1
	branch w1 == 0x00000000 l0000000000437BEC
	// succ:  l0000000000437BD0 l0000000000437BEC
l0000000000437BD0:
	x19 = Mem0[x0 + 8:word64]
	branch x19 == 0x0000000000000000 l0000000000437BEC
	// succ:  l0000000000437BD8 l0000000000437BEC
l0000000000437BD8:
	v14 = Mem0[x19:byte]
	w0 = (word32) v14
	branch w0 != 0x00000000 l0000000000437BF8
	// succ:  l0000000000437BE0 l0000000000437BF8
l0000000000437BE0:
	w0 = 0x0000000A
	// succ:  l0000000000437BE4
l0000000000437BE4:
	x1 = 0x00000000004D6000
	Mem0[x1 + 2572:word32] = w0
	// succ:  l0000000000437BEC
l0000000000437BEC:
	x19 = Mem0[sp + 16:word64]
	x29 = Mem0[sp:word64]
	sp = sp + 8
	x30 = Mem0[sp:word64]
	sp = sp + 32
	// succ:  l0000000000437BF4_thunk_set_shellopts
l0000000000437BF4_thunk_set_shellopts:
	call set_shellopts (retsize: 0;)
	return
	// succ:  sv_ignoreeof_exit
l0000000000437BF8:
	x0 = x19
	call all_digits (retsize: 0;)
	branch w0 == 0x00000000 l0000000000437BE0
	// succ:  l0000000000437C04 l0000000000437BE0
l0000000000437C04:
	x0 = x19
	x1 = 0x0000000000000000
	w2 = 0x0000000A
	strtol(x0)
	sp = sp + 0xFFFFFFFFFFFFFFF8
	goto l0000000000437BE4
	// succ:  l0000000000437BE4
sv_ignoreeof_exit:


// sv_strict_posix
// Return size: 0
void sv_strict_posix()
sv_strict_posix_entry:
	// succ:  l0000000000437C18
l0000000000437C18:
	sp = fp
	sp = sp + -32
	Mem0[sp:word64] = x29
	sp = sp + 8
	Mem0[sp:word64] = x30
	x29 = x31 + 0x0000000000000000
	Mem0[sp + 16:word64] = x19
	call find_variable (retsize: 0;)
	x31 = x0 - x31
	NZCV = cond(x31)
	w1 = (word32) Test(NE,Z)
	w0 = w1
	x19 = 0x00000000004DE000
	Mem0[x19 + 1716:word32] = w1
	call posix_initialize (retsize: 0;)
	x0 = 0x00000000004DE000
	w0 = Mem0[x0 + 1712:word32]
	branch w0 == 0x00000000 l0000000000437C54
	// succ:  l0000000000437C4C l0000000000437C54
l0000000000437C4C:
	w0 = Mem0[x19 + 1716:word32]
	call posix_readline_initialize (retsize: 0;)
	// succ:  l0000000000437C54
l0000000000437C54:
	x19 = Mem0[sp + 16:word64]
	x29 = Mem0[sp:word64]
	sp = sp + 8
	x30 = Mem0[sp:word64]
	sp = sp + 32
	// succ:  l0000000000437C5C_thunk_set_shellopts
l0000000000437C5C_thunk_set_shellopts:
	call set_shellopts (retsize: 0;)
	return
	// succ:  sv_strict_posix_exit
sv_strict_posix_exit:


// sv_xtracefd
// Return size: 0
void sv_xtracefd()
sv_xtracefd_entry:
	// succ:  l0000000000437C60
l0000000000437C60:
	sp = fp
	sp = sp + -64
	Mem0[sp:word64] = x29
	sp = sp + 8
	Mem0[sp:word64] = x30
	x29 = x31 + 0x0000000000000000
	v8 = sp + 16
	Mem0[v8:word64] = x19
	v8 = v8 + 8
	Mem0[v8:word64] = x20
	v11 = sp + 32
	Mem0[v11:word64] = x21
	v11 = v11 + 8
	Mem0[v11:word64] = x22
	x21 = x0
	call find_variable (retsize: 0;)
	x20 = x0
	branch x0 == 0x0000000000000000 l0000000000437C90
	// succ:  l0000000000437C80 l0000000000437C90
l0000000000437C80:
	x19 = Mem0[x0 + 8:word64]
	branch x19 == 0x0000000000000000 l0000000000437C90
	// succ:  l0000000000437C88 l0000000000437C90
l0000000000437C88:
	v14 = Mem0[x19:byte]
	w2 = (word32) v14
	branch w2 != 0x00000000 l0000000000437CA4
	// succ:  l0000000000437C90 l0000000000437CA4
l0000000000437C90:
	call xtrace_reset (retsize: 0;)
	// succ:  l0000000000437C94
l0000000000437C94:
	v15 = sp + 16
	x19 = Mem0[v15:word64]
	v15 = v15 + 8
	x20 = Mem0[v15:word64]
	v16 = sp + 32
	x21 = Mem0[v16:word64]
	v16 = v16 + 8
	x22 = Mem0[v16:word64]
	x29 = Mem0[sp:word64]
	sp = sp + 8
	x30 = Mem0[sp:word64]
	sp = sp + 64
	return
	// succ:  sv_xtracefd_exit
l0000000000437CA4:
	x1 = x29 + 0x0000000000000030
	x0 = x19
	w2 = 0x0000000A
	strtol(x0)
	sp = sp + 0xFFFFFFFFFFFFFFF8
	x1 = Mem0[x29 + 48:word64]
	x22 = x0
	x31 = x1 - x19
	NZCV = cond(x31)
	branch Test(EQ,Z) l0000000000437CCC
	// succ:  l0000000000437CC4 l0000000000437CCC
l0000000000437CC4:
	v21 = Mem0[x1:byte]
	w1 = (word32) v21
	branch w1 == 0x00000000 l0000000000437CFC
	// succ:  l0000000000437CCC l0000000000437CFC
l0000000000437CCC:
	x1 = 0x00000000004AC000
	w2 = 0x00000005
	x1 = x1 + 0xFFFFFFFFFFFFF958
	x0 = 0x0000000000000000
	dcgettext(x0, x1, x2)
	sp = sp + 0xFFFFFFFFFFFFFFF8
	x2 = Mem0[x20 + 8:word64]
	x1 = x21
	call internal_error (retsize: 0;)
	v23 = sp + 16
	x19 = Mem0[v23:word64]
	v23 = v23 + 8
	x20 = Mem0[v23:word64]
	v24 = sp + 32
	x21 = Mem0[v24:word64]
	v24 = v24 + 8
	x22 = Mem0[v24:word64]
	x29 = Mem0[sp:word64]
	sp = sp + 8
	x30 = Mem0[sp:word64]
	sp = sp + 64
	return
	// succ:  sv_xtracefd_exit
l0000000000437CFC:
	call sh_validfd (retsize: 0;)
	branch w0 == 0x00000000 l0000000000437CCC
	// succ:  l0000000000437D04 l0000000000437CCC
l0000000000437D04:
	x1 = 0x00000000004AD000
	x1 = x1 + 0x0000000000000208
	w0 = w22
	fdopen(x0, x1)
	sp = sp + 0xFFFFFFFFFFFFFFF8
	x1 = x0
	branch x0 == 0x0000000000000000 l0000000000437D28
	// succ:  l0000000000437D1C l0000000000437D28
l0000000000437D1C:
	w0 = w22
	call xtrace_set (retsize: 0;)
	goto l0000000000437C94
	// succ:  l0000000000437C94
l0000000000437D28:
	x1 = 0x00000000004AC000
	x1 = x1 + 0xFFFFFFFFFFFFF938
	w2 = 0x00000005
	dcgettext(x0, x1, x2)
	sp = sp + 0xFFFFFFFFFFFFFFF8
	x2 = Mem0[x20 + 8:word64]
	x1 = x21
	call internal_error (retsize: 0;)
	goto l0000000000437C94
	// succ:  l0000000000437C94
sv_xtracefd_exit:


// find_function
// Return size: 0
void find_function()
find_function_entry:
	// succ:  l0000000000437D48
l0000000000437D48:
	sp = fp
	sp = sp + -16
	Mem0[sp:word64] = x29
	sp = sp + 8
	Mem0[sp:word64] = x30
	x29 = x31 + 0x0000000000000000
	x1 = 0x00000000004DF000
	x1 = x1 + 0xFFFFFFFFFFFFFC60
	x1 = Mem0[x1 + 56:word64]
	w2 = 0x00000000
	call hash_search (retsize: 0;)
	branch x0 == 0x0000000000000000 l0000000000437D6C
	// succ:  l0000000000437D68 l0000000000437D6C
l0000000000437D68:
	x0 = Mem0[x0 + 16:word64]
	// succ:  l0000000000437D6C
l0000000000437D6C:
	x29 = Mem0[sp:word64]
	sp = sp + 8
	x30 = Mem0[sp:word64]
	sp = sp + 16
	return
	// succ:  find_function_exit
find_function_exit:


// find_function_def
// Return size: 0
void find_function_def()
find_function_def_entry:
	// succ:  l0000000000437D74
l0000000000437D74:
	sp = fp
	sp = sp + -16
	Mem0[sp:word64] = x29
	sp = sp + 8
	Mem0[sp:word64] = x30
	x29 = x31 + 0x0000000000000000
	x1 = 0x00000000004DF000
	x1 = x1 + 0xFFFFFFFFFFFFFC60
	x1 = Mem0[x1 + 64:word64]
	w2 = 0x00000000
	call hash_search (retsize: 0;)
	branch x0 == 0x0000000000000000 l0000000000437D98
	// succ:  l0000000000437D94 l0000000000437D98
l0000000000437D94:
	x0 = Mem0[x0 + 16:word64]
	// succ:  l0000000000437D98
l0000000000437D98:
	x29 = Mem0[sp:word64]
	sp = sp + 8
	x30 = Mem0[sp:word64]
	sp = sp + 16
	return
	// succ:  find_function_def_exit
find_function_def_exit:


// get_variable_value
// Return size: 0
void get_variable_value()
get_variable_value_entry:
	// succ:  l0000000000437DA0
l0000000000437DA0:
	sp = fp
	branch x0 == 0x0000000000000000 l0000000000437DB4
	// succ:  l0000000000437DA4 l0000000000437DB4
l0000000000437DA4:
	w1 = Mem0[x0 + 40:word32]
	x0 = Mem0[x0 + 8:word64]
	branch (w1 & 0x00000004) == 0x00000000 l0000000000437DB8
	// succ:  l0000000000437DB0 l0000000000437DB8
l0000000000437DB0:
	branch (w1 & 0x00000040) == 0x00000000 l0000000000437DC0
	// succ:  l0000000000437DB4 l0000000000437DC0
l0000000000437DB4:
	return
	// succ:  get_variable_value_exit
l0000000000437DB8:
	x1 = 0x0000000000000000
	// succ:  l0000000000437DBC_thunk_array_reference
l0000000000437DBC_thunk_array_reference:
	call array_reference (retsize: 0;)
	return
	// succ:  get_variable_value_exit
l0000000000437DC0:
	x1 = 0x00000000004AC000
	x1 = x1 + 0xFFFFFFFFFFFFF988
	// succ:  l0000000000437DC8_thunk_assoc_reference
l0000000000437DC8_thunk_assoc_reference:
	call assoc_reference (retsize: 0;)
	return
	// succ:  get_variable_value_exit
get_variable_value_exit:


// get_string_value
// Return size: 0
void get_string_value()
get_string_value_entry:
	// succ:  l0000000000437DCC
l0000000000437DCC:
	sp = fp
	sp = sp + -16
	Mem0[sp:word64] = x29
	sp = sp + 8
	Mem0[sp:word64] = x30
	x29 = x31 + 0x0000000000000000
	call find_variable (retsize: 0;)
	branch x0 == 0x0000000000000000 l0000000000437DE4
	// succ:  l0000000000437DDC l0000000000437DE4
l0000000000437DDC:
	x29 = Mem0[sp:word64]
	sp = sp + 8
	x30 = Mem0[sp:word64]
	sp = sp + 16
	// succ:  l0000000000437DE0_thunk_get_variable_value
l0000000000437DE0_thunk_get_variable_value:
	call get_variable_value (retsize: 0;)
	return
	// succ:  get_string_value_exit
l0000000000437DE4:
	x29 = Mem0[sp:word64]
	sp = sp + 8
	x30 = Mem0[sp:word64]
	sp = sp + 16
	return
	// succ:  get_string_value_exit
get_string_value_exit:


// sv_terminal
// Return size: 0
void sv_terminal()
sv_terminal_entry:
	// succ:  l0000000000437DEC
l0000000000437DEC:
	sp = fp
	sp = sp + -16
	Mem0[sp:word64] = x29
	sp = sp + 8
	Mem0[sp:word64] = x30
	x29 = x31 + 0x0000000000000000
	x0 = 0x00000000004DE000
	w0 = Mem0[x0 + 1712:word32]
	branch w0 == 0x00000000 l0000000000437E0C
	// succ:  l0000000000437E00 l0000000000437E0C
l0000000000437E00:
	x0 = 0x00000000004DE000
	w0 = Mem0[x0 + 1720:word32]
	branch w0 == 0x00000000 l0000000000437E14
	// succ:  l0000000000437E0C l0000000000437E14
l0000000000437E0C:
	x29 = Mem0[sp:word64]
	sp = sp + 8
	x30 = Mem0[sp:word64]
	sp = sp + 16
	return
	// succ:  sv_terminal_exit
l0000000000437E14:
	x0 = 0x00000000004AA000
	x0 = x0 + 0x0000000000000310
	call get_string_value (retsize: 0;)
	x29 = Mem0[sp:word64]
	sp = sp + 8
	x30 = Mem0[sp:word64]
	sp = sp + 16
	// succ:  l0000000000437E24_thunk_rl_reset_terminal
l0000000000437E24_thunk_rl_reset_terminal:
	call rl_reset_terminal (retsize: 0;)
	return
	// succ:  sv_terminal_exit
sv_terminal_exit:


// sv_histsize
// Return size: 0
void sv_histsize()
sv_histsize_entry:
	// succ:  l0000000000437E28
l0000000000437E28:
	sp = fp
	sp = sp + -48
	Mem0[sp:word64] = x29
	sp = sp + 8
	Mem0[sp:word64] = x30
	x29 = x31 + 0x0000000000000000
	Mem0[sp + 16:word64] = x19
	x19 = x0
	call get_string_value (retsize: 0;)
	branch x0 == 0x0000000000000000 l0000000000437E48
	// succ:  l0000000000437E40 l0000000000437E48
l0000000000437E40:
	v9 = Mem0[x0:byte]
	w1 = (word32) v9
	branch w1 != 0x00000000 l0000000000437E60
	// succ:  l0000000000437E48 l0000000000437E60
l0000000000437E48:
	v11 = Mem0[x19 + 4:byte]
	w0 = (word32) v11
	w31 = w0 - 0x00000053
	NZCV = cond(w31)
	branch Test(EQ,Z) l0000000000437EA8
	// succ:  l0000000000437E54 l0000000000437EA8
l0000000000437E54:
	x19 = Mem0[sp + 16:word64]
	x29 = Mem0[sp:word64]
	sp = sp + 8
	x30 = Mem0[sp:word64]
	sp = sp + 48
	return
	// succ:  sv_histsize_exit
l0000000000437E60:
	x1 = x29 + 0x0000000000000020
	call legal_number (retsize: 0;)
	branch w0 == 0x00000000 l0000000000437E54
	// succ:  l0000000000437E6C l0000000000437E54
l0000000000437E6C:
	v16 = Mem0[x19 + 4:byte]
	w0 = (word32) v16
	x19 = Mem0[x29 + 32:word64]
	w31 = w0 - 0x00000053
	NZCV = cond(w31)
	branch Test(EQ,Z) l0000000000437EB8
	// succ:  l0000000000437E7C l0000000000437EB8
l0000000000437E7C:
	x0 = 0x00000000004AC000
	x0 = x0 + 0xFFFFFFFFFFFFF990
	call get_string_value (retsize: 0;)
	w1 = w19
	call history_truncate_file (retsize: 0;)
	x0 = 0x00000000004E3000
	w1 = Mem0[x0 + 3424:word32]
	NZCV = cond(w19 - w1)
	branch Test(GT,NZV) l0000000000437E54
	// succ:  l0000000000437EA0 l0000000000437E54
l0000000000437EA0:
	Mem0[x0 + 3424:word32] = w19
	goto l0000000000437E54
	// succ:  l0000000000437E54
l0000000000437EA8:
	call unstifle_history (retsize: 0;)
	x19 = Mem0[sp + 16:word64]
	x29 = Mem0[sp:word64]
	sp = sp + 8
	x30 = Mem0[sp:word64]
	sp = sp + 48
	return
	// succ:  sv_histsize_exit
l0000000000437EB8:
	w0 = w19
	call stifle_history (retsize: 0;)
	call where_history (retsize: 0;)
	x1 = 0x00000000004E3000
	w2 = Mem0[x1 + 3428:word32]
	NZCV = cond(w0 - w2)
	branch Test(GE,NZV) l0000000000437E54
	// succ:  l0000000000437ED4 l0000000000437E54
l0000000000437ED4:
	Mem0[x1 + 3428:word32] = w0
	goto l0000000000437E54
	// succ:  l0000000000437E54
sv_histsize_exit:


// sv_history_control
// Return size: 0
void sv_history_control()
sv_history_control_entry:
	// succ:  l0000000000437EDC
l0000000000437EDC:
	sp = fp
	sp = sp + -80
	Mem0[sp:word64] = x29
	sp = sp + 8
	Mem0[sp:word64] = x30
	x29 = x31 + 0x0000000000000000
	v8 = sp + 32
	Mem0[v8:word64] = x21
	v8 = v8 + 8
	Mem0[v8:word64] = x22
	x21 = 0x00000000004E3000
	v11 = sp + 16
	Mem0[v11:word64] = x19
	v11 = v11 + 8
	Mem0[v11:word64] = x20
	v14 = sp + 48
	Mem0[v14:word64] = x23
	v14 = v14 + 8
	Mem0[v14:word64] = x24
	Mem0[x21 + 3448:word32] = 0x00000000
	call get_string_value (retsize: 0;)
	x20 = x0
	branch x0 == 0x0000000000000000 l0000000000437F84
	// succ:  l0000000000437F04 l0000000000437F84
l0000000000437F04:
	v17 = Mem0[x0:byte]
	w0 = (word32) v17
	branch w0 == 0x00000000 l0000000000437F84
	// succ:  l0000000000437F0C l0000000000437F84
l0000000000437F0C:
	x24 = 0x00000000004AC000
	x22 = 0x00000000004AC000
	x23 = 0x00000000004AC000
	Mem0[x29 + 64:word32] = 0x00000000
	x24 = x24 + 0xFFFFFFFFFFFFF9D0
	x22 = x22 + 0xFFFFFFFFFFFFF9A0
	x23 = x23 + 0xFFFFFFFFFFFFF9B0
	goto l0000000000437F48
	// succ:  l0000000000437F48
l0000000000437F2C:
	w31 = w2 - 0x00000065
	NZCV = cond(w31)
	branch Test(EQ,Z) l0000000000437FDC
	// succ:  l0000000000437F34 l0000000000437FDC
l0000000000437F34:
	x1 = 0x00000000004AC000
	x0 = x19
	x1 = x1 + 0xFFFFFFFFFFFFF910
	w2 = 0x000011B6
	call sh_xfree (retsize: 0;)
	// succ:  l0000000000437F48
l0000000000437F48:
	x0 = x20
	x1 = x29 + 0x0000000000000040
	call extract_colon_unit (retsize: 0;)
	x19 = x0
	branch x0 == 0x0000000000000000 l0000000000437F84
	// succ:  l0000000000437F5C l0000000000437F84
l0000000000437F5C:
	v23 = Mem0[x19:byte]
	w2 = (word32) v23
	w31 = w2 - 0x00000069
	NZCV = cond(w31)
	branch Test(NE,Z) l0000000000437F2C
	// succ:  l0000000000437F68 l0000000000437F2C
l0000000000437F68:
	x1 = x22
	strcmp(x0, x1)
	sp = sp + 0xFFFFFFFFFFFFFFF8
	branch w0 != 0x00000000 l0000000000437F98
	// succ:  l0000000000437F74 l0000000000437F98
l0000000000437F74:
	w0 = Mem0[x21 + 3448:word32]
	w0 = w0 | 0x00000001
	Mem0[x21 + 3448:word32] = w0
	goto l0000000000437F34
	// succ:  l0000000000437F34
l0000000000437F84:
	v18 = sp + 16
	x19 = Mem0[v18:word64]
	v18 = v18 + 8
	x20 = Mem0[v18:word64]
	v19 = sp + 32
	x21 = Mem0[v19:word64]
	v19 = v19 + 8
	x22 = Mem0[v19:word64]
	v20 = sp + 48
	x23 = Mem0[v20:word64]
	v20 = v20 + 8
	x24 = Mem0[v20:word64]
	x29 = Mem0[sp:word64]
	sp = sp + 8
	x30 = Mem0[sp:word64]
	sp = sp + 80
	return
	// succ:  sv_history_control_exit
l0000000000437F98:
	x0 = x19
	x1 = x23
	strcmp(x0, x1)
	sp = sp + 0xFFFFFFFFFFFFFFF8
	branch w0 != 0x00000000 l0000000000437FB8
	// succ:  l0000000000437FA8 l0000000000437FB8
l0000000000437FA8:
	w0 = Mem0[x21 + 3448:word32]
	w0 = w0 | 0x00000002
	Mem0[x21 + 3448:word32] = w0
	goto l0000000000437F34
	// succ:  l0000000000437F34
l0000000000437FB8:
	x1 = 0x00000000004AC000
	x0 = x19
	x1 = x1 + 0xFFFFFFFFFFFFF9C0
	strcmp(x0, x1)
	sp = sp + 0xFFFFFFFFFFFFFFF8
	branch w0 != 0x00000000 l0000000000437F34
	// succ:  l0000000000437FCC l0000000000437F34
l0000000000437FCC:
	w0 = Mem0[x21 + 3448:word32]
	w0 = w0 | 0x00000003
	Mem0[x21 + 3448:word32] = w0
	goto l0000000000437F34
	// succ:  l0000000000437F34
l0000000000437FDC:
	x1 = x24
	strcmp(x0, x1)
	sp = sp + 0xFFFFFFFFFFFFFFF8
	branch w0 != 0x00000000 l0000000000437F34
	// succ:  l0000000000437FE8 l0000000000437F34
l0000000000437FE8:
	w0 = Mem0[x21 + 3448:word32]
	w0 = w0 | 0x00000004
	Mem0[x21 + 3448:word32] = w0
	goto l0000000000437F34
	// succ:  l0000000000437F34
sv_history_control_exit:


// sv_histchars
// Return size: 0
void sv_histchars()
sv_histchars_entry:
	// succ:  l0000000000437FF8
l0000000000437FF8:
	sp = fp
	sp = sp + -16
	Mem0[sp:word64] = x29
	sp = sp + 8
	Mem0[sp:word64] = x30
	x29 = x31 + 0x0000000000000000
	call get_string_value (retsize: 0;)
	branch x0 == 0x0000000000000000 l0000000000438044
	// succ:  l0000000000438008 l0000000000438044
l0000000000438008:
	v7 = Mem0[x0:byte]
	w1 = (word32) v7
	x2 = 0x00000000004DE000
	Mem0[x2 + 1552:byte] = (byte) w1
	v10 = Mem0[x0:byte]
	w1 = (word32) v10
	branch w1 == 0x00000000 l000000000043803C
	// succ:  l000000000043801C l000000000043803C
l000000000043801C:
	v11 = Mem0[x0 + 1:byte]
	w1 = (word32) v11
	branch w1 == 0x00000000 l000000000043803C
	// succ:  l0000000000438024 l000000000043803C
l0000000000438024:
	x2 = 0x00000000004DE000
	v12 = Mem0[x0 + 2:byte]
	w0 = (word32) v12
	Mem0[x2 + 1553:byte] = (byte) w1
	branch w0 == 0x00000000 l000000000043803C
	// succ:  l0000000000438034 l000000000043803C
l0000000000438034:
	x1 = 0x00000000004E2000
	Mem0[x1 + -208:byte] = (byte) w0
	// succ:  l000000000043803C
l000000000043803C:
	x29 = Mem0[sp:word64]
	sp = sp + 8
	x30 = Mem0[sp:word64]
	sp = sp + 16
	return
	// succ:  sv_histchars_exit
l0000000000438044:
	w1 = 0x00000021
	x0 = 0x00000000004DE000
	Mem0[x0 + 1552:byte] = (byte) w1
	w1 = 0x0000005E
	x0 = 0x00000000004DE000
	Mem0[x0 + 1553:byte] = (byte) w1
	w1 = 0x00000023
	x0 = 0x00000000004E2000
	Mem0[x0 + -208:byte] = (byte) w1
	x29 = Mem0[sp:word64]
	sp = sp + 8
	x30 = Mem0[sp:word64]
	sp = sp + 16
	return
	// succ:  sv_histchars_exit
sv_histchars_exit:


// sv_optind
// Return size: 0
void sv_optind()
sv_optind_entry:
	// succ:  l0000000000438070
l0000000000438070:
	sp = fp
	sp = sp + -16
	Mem0[sp:word64] = x29
	sp = sp + 8
	Mem0[sp:word64] = x30
	x29 = x31 + 0x0000000000000000
	x0 = 0x00000000004AC000
	x0 = x0 + 0xFFFFFFFFFFFFF9E0
	call get_string_value (retsize: 0;)
	branch x0 == 0x0000000000000000 l0000000000438090
	// succ:  l0000000000438088 l0000000000438090
l0000000000438088:
	v8 = Mem0[x0:byte]
	w1 = (word32) v8
	branch w1 != 0x00000000 l000000000043809C
	// succ:  l0000000000438090 l000000000043809C
l0000000000438090:
	w0 = 0x00000000
	// succ:  l0000000000438094
l0000000000438094:
	x29 = Mem0[sp:word64]
	sp = sp + 8
	x30 = Mem0[sp:word64]
	sp = sp + 16
	// succ:  l0000000000438098_thunk_getopts_reset
l0000000000438098_thunk_getopts_reset:
	call getopts_reset (retsize: 0;)
	return
	// succ:  sv_optind_exit
l000000000043809C:
	x1 = 0x0000000000000000
	w2 = 0x0000000A
	strtol(x0)
	sp = sp + 0xFFFFFFFFFFFFFFF8
	w31 = w0 - 0x00000001
	NZCV = cond(w31)
	x1 = x0
	branch Test(EQ,Z) l0000000000438090
	// succ:  l00000000004380B4 l0000000000438090
l00000000004380B4:
	branch (w1 & 0x00000000) == 0x00000000 l0000000000438090
	// succ:  l00000000004380B8 l0000000000438090
l00000000004380B8:
	goto l0000000000438094
	// succ:  l0000000000438094
sv_optind_exit:


// sv_opterr
// Return size: 0
void sv_opterr()
sv_opterr_entry:
	// succ:  l00000000004380BC
l00000000004380BC:
	sp = fp
	sp = sp + -16
	Mem0[sp:word64] = x29
	sp = sp + 8
	Mem0[sp:word64] = x30
	x29 = x31 + 0x0000000000000000
	x0 = 0x00000000004AC000
	x0 = x0 + 0xFFFFFFFFFFFFF9E8
	call get_string_value (retsize: 0;)
	branch x0 == 0x0000000000000000 l0000000000438100
	// succ:  l00000000004380D4 l0000000000438100
l00000000004380D4:
	v7 = Mem0[x0:byte]
	w2 = (word32) v7
	w1 = 0x00000001
	branch w2 == 0x00000000 l00000000004380F0
	// succ:  l00000000004380E0 l00000000004380F0
l00000000004380E0:
	x1 = 0x0000000000000000
	w2 = 0x0000000A
	strtol(x0)
	sp = sp + 0xFFFFFFFFFFFFFFF8
	w1 = w0
	// succ:  l00000000004380F0
l00000000004380F0:
	x0 = 0x00000000004D8000
	Mem0[x0 + 2136:word32] = w1
	x29 = Mem0[sp:word64]
	sp = sp + 8
	x30 = Mem0[sp:word64]
	sp = sp + 16
	return
	// succ:  sv_opterr_exit
l0000000000438100:
	w1 = 0x00000001
	x0 = 0x00000000004D8000
	Mem0[x0 + 2136:word32] = w1
	x29 = Mem0[sp:word64]
	sp = sp + 8
	x30 = Mem0[sp:word64]
	sp = sp + 16
	return
	// succ:  sv_opterr_exit
sv_opterr_exit:


// sv_locale
// Return size: 0
void sv_locale()
sv_locale_entry:
	// succ:  l0000000000438114
l0000000000438114:
	sp = fp
	sp = sp + -32
	Mem0[sp:word64] = x29
	sp = sp + 8
	Mem0[sp:word64] = x30
	x29 = x31 + 0x0000000000000000
	Mem0[sp + 16:word64] = x19
	x19 = x0
	call get_string_value (retsize: 0;)
	x1 = x0
	v10 = Mem0[x19:byte]
	w0 = (word32) v10
	w31 = w0 - 0x0000004C
	NZCV = cond(w31)
	branch Test(EQ,Z) l0000000000438148
	// succ:  l0000000000438138 l0000000000438148
l0000000000438138:
	x0 = x19
	x19 = Mem0[sp + 16:word64]
	x29 = Mem0[sp:word64]
	sp = sp + 8
	x30 = Mem0[sp:word64]
	sp = sp + 32
	// succ:  l0000000000438144_thunk_set_locale_var
l0000000000438144_thunk_set_locale_var:
	call set_locale_var (retsize: 0;)
	return
	// succ:  sv_locale_exit
l0000000000438148:
	v14 = Mem0[x19 + 1:byte]
	w0 = (word32) v14
	w31 = w0 - 0x00000041
	NZCV = cond(w31)
	branch Test(NE,Z) l0000000000438138
	// succ:  l0000000000438154 l0000000000438138
l0000000000438154:
	x0 = x19
	x19 = Mem0[sp + 16:word64]
	x29 = Mem0[sp:word64]
	sp = sp + 8
	x30 = Mem0[sp:word64]
	sp = sp + 32
	// succ:  l0000000000438160_thunk_set_lang
l0000000000438160_thunk_set_lang:
	call set_lang (retsize: 0;)
	return
	// succ:  sv_locale_exit
sv_locale_exit:


// sh_get_env_value
// Return size: 0
void sh_get_env_value()
sh_get_env_value_entry:
	// succ:  l0000000000438164
l0000000000438164:
	sp = fp
	// succ:  l0000000000438164_thunk_get_string_value
l0000000000438164_thunk_get_string_value:
	call get_string_value (retsize: 0;)
	return
	// succ:  sh_get_env_value_exit
sh_get_env_value_exit:


// make_variable_value
// Return size: 0
void make_variable_value()
make_variable_value_entry:
	// succ:  l0000000000438168
l0000000000438168:
	sp = fp
	sp = sp + -80
	Mem0[sp:word64] = x29
	sp = sp + 8
	Mem0[sp:word64] = x30
	x29 = x31 + 0x0000000000000000
	w3 = Mem0[x0 + 40:word32]
	v10 = sp + 16
	Mem0[v10:word64] = x19
	v10 = v10 + 8
	Mem0[v10:word64] = x20
	v13 = sp + 32
	Mem0[v13:word64] = x21
	v13 = v13 + 8
	Mem0[v13:word64] = x22
	v16 = sp + 48
	Mem0[v16:word64] = x23
	v16 = v16 + 8
	Mem0[v16:word64] = x24
	x19 = x0
	x20 = x1
	branch (w3 & 0x00000010) == 0x00000000 l00000000004381E0
	// succ:  l000000000043818C l00000000004381E0
l000000000043818C:
	branch (w2 & 0x00000001) == 0x00000000 l0000000000438410
	// succ:  l0000000000438190 l0000000000438410
l0000000000438190:
	x0 = Mem0[x19 + 8:word64]
	x1 = x29 + 0x0000000000000040
	call evalexp (retsize: 0;)
	x19 = x0
	w0 = Mem0[x29 + 64:word32]
	branch w0 == 0x00000000 l0000000000438424
	// succ:  l00000000004381A8 l0000000000438424
l00000000004381A8:
	x1 = x29 + 0x0000000000000040
	x0 = x20
	call evalexp (retsize: 0;)
	w1 = Mem0[x29 + 64:word32]
	x0 = x19 + x0
	branch w1 == 0x00000000 l0000000000438424
	// succ:  l00000000004381C0 l0000000000438424
l00000000004381C0:
	call itos (retsize: 0;)
	x19 = x0
	// succ:  l00000000004381C8
l00000000004381C8:
	x0 = x19
	v21 = sp + 32
	x21 = Mem0[v21:word64]
	v21 = v21 + 8
	x22 = Mem0[v21:word64]
	v22 = sp + 16
	x19 = Mem0[v22:word64]
	v22 = v22 + 8
	x20 = Mem0[v22:word64]
	v23 = sp + 48
	x23 = Mem0[v23:word64]
	v23 = v23 + 8
	x24 = Mem0[v23:word64]
	x29 = Mem0[sp:word64]
	sp = sp + 8
	x30 = Mem0[sp:word64]
	sp = sp + 80
	return
	// succ:  make_variable_value_exit
l00000000004381E0:
	w31 = w3 & 0x00000700
	NZ = cond(w31)
	C = false
	V = false
	branch Test(NE,Z) l000000000043822C
	// succ:  l00000000004381E8 l000000000043822C
l00000000004381E8:
	branch x20 == 0x0000000000000000 l00000000004384CC
	// succ:  l00000000004381EC l00000000004384CC
l00000000004381EC:
	branch (w2 & 0x00000001) == 0x00000000 l000000000043834C
	// succ:  l00000000004381F0 l000000000043834C
l00000000004381F0:
	v30 = Mem0[x20:byte]
	w21 = (word32) v30
	branch w21 != 0x00000000 l00000000004383E4
	// succ:  l00000000004381F8 l00000000004383E4
l00000000004381F8:
	x1 = 0x00000000004AC000
	x1 = x1 + 0xFFFFFFFFFFFFF910
	w2 = 0x00000883
	x0 = 0x0000000000000001
	call sh_xmalloc (retsize: 0;)
	Mem0[x0:byte] = (byte) w21
	x19 = x0
	x0 = x19
	v31 = sp + 32
	x21 = Mem0[v31:word64]
	v31 = v31 + 8
	x22 = Mem0[v31:word64]
	v32 = sp + 16
	x19 = Mem0[v32:word64]
	v32 = v32 + 8
	x20 = Mem0[v32:word64]
	v33 = sp + 48
	x23 = Mem0[v33:word64]
	v33 = v33 + 8
	x24 = Mem0[v33:word64]
	x29 = Mem0[sp:word64]
	sp = sp + 8
	x30 = Mem0[sp:word64]
	sp = sp + 80
	return
	// succ:  make_variable_value_exit
l000000000043822C:
	branch (w2 & 0x00000001) == 0x00000000 l00000000004382B4
	// succ:  l0000000000438230 l00000000004382B4
l0000000000438230:
	v41 = Mem0[x20:byte]
	w23 = (word32) v41
	branch w23 == 0x00000000 l00000000004383C4
	// succ:  l0000000000438238 l00000000004383C4
l0000000000438238:
	x0 = x20
	strlen(x0)
	sp = sp + 0xFFFFFFFFFFFFFFF8
	x22 = 0x00000000004AC000
	w2 = 0x00000865
	x1 = x22 + 0xFFFFFFFFFFFFF910
	x0 = x0 + 0x0000000000000001
	call sh_xmalloc (retsize: 0;)
	x1 = x20
	strcpy(x0, x1)
	sp = sp + 0xFFFFFFFFFFFFFFF8
	x21 = x0
	// succ:  l0000000000438260
l0000000000438260:
	w0 = Mem0[x19 + 40:word32]
	w2 = 0x00000004
	branch (w0 & 0x00000400) == 0x00000000 l000000000043827C
	// succ:  l000000000043826C l000000000043827C
l000000000043826C:
	w0 = w0 & 0x00000100
	NZCV = cond(w0 - w31)
	w2 = 0x00000002
l000000000043827C:
	x0 = x21
	x1 = 0x0000000000000000
	call sh_modcase (retsize: 0;)
	x19 = x0
	x1 = x22 + 0xFFFFFFFFFFFFF910
	x0 = x21
	w2 = 0x0000086E
	call sh_xfree (retsize: 0;)
	x0 = x19
	v46 = sp + 32
	x21 = Mem0[v46:word64]
	v46 = v46 + 8
	x22 = Mem0[v46:word64]
	v47 = sp + 16
	x19 = Mem0[v47:word64]
	v47 = v47 + 8
	x20 = Mem0[v47:word64]
	v48 = sp + 48
	x23 = Mem0[v48:word64]
	v48 = v48 + 8
	x24 = Mem0[v48:word64]
	x29 = Mem0[sp:word64]
	sp = sp + 8
	x30 = Mem0[sp:word64]
	sp = sp + 80
	return
	// succ:  make_variable_value_exit
l00000000004382B4:
	call get_variable_value (retsize: 0;)
	x23 = x0
	branch x0 == 0x0000000000000000 l000000000043849C
	// succ:  l00000000004382C0 l000000000043849C
l00000000004382C0:
	v43 = Mem0[x23:byte]
	w0 = (word32) v43
	branch w0 == 0x00000000 l0000000000438430
	// succ:  l00000000004382C8 l0000000000438430
l00000000004382C8:
	v44 = Mem0[x23 + 1:byte]
	w0 = (word32) v44
	branch w0 == 0x00000000 l0000000000438460
	// succ:  l00000000004382D0 l0000000000438460
l00000000004382D0:
	v45 = Mem0[x23 + 2:byte]
	w0 = (word32) v45
	branch w0 == 0x00000000 l00000000004384B4
	// succ:  l00000000004382D8 l00000000004384B4
l00000000004382D8:
	x0 = x23
	strlen(x0)
	sp = sp + 0xFFFFFFFFFFFFFFF8
l00000000004382E8:
	branch x20 == 0x0000000000000000 l0000000000438478
	// succ:  l00000000004382EC l0000000000438478
l00000000004382EC:
	v49 = Mem0[x20:byte]
	w0 = (word32) v49
	x1 = 0x0000000000000000
	branch w0 == 0x00000000 l000000000043831C
	// succ:  l00000000004382F8 l000000000043831C
l00000000004382F8:
	v50 = Mem0[x20 + 1:byte]
	w0 = (word32) v50
	x1 = 0x0000000000000001
	branch w0 == 0x00000000 l000000000043831C
	// succ:  l0000000000438304 l000000000043831C
l0000000000438304:
	v51 = Mem0[x20 + 2:byte]
	w0 = (word32) v51
	x1 = 0x0000000000000002
	branch w0 == 0x00000000 l000000000043831C
	// succ:  l0000000000438310 l000000000043831C
l0000000000438310:
	x0 = x20
	strlen(x0)
	sp = sp + 0xFFFFFFFFFFFFFFF8
	x1 = x0
	// succ:  l000000000043831C
l000000000043831C:
	x22 = 0x00000000004AC000
	w2 = 0x0000085F
	x0 = x1 + x21
	x1 = x22 + 0xFFFFFFFFFFFFF910
	call sh_xmalloc (retsize: 0;)
	x1 = x23
	x21 = x0
	strcpy(x0, x1)
	sp = sp + 0xFFFFFFFFFFFFFFF8
	x0 = x21 + x24
	x1 = x20
	strcpy(x0, x1)
	sp = sp + 0xFFFFFFFFFFFFFFF8
	goto l0000000000438260
	// succ:  l0000000000438260
l000000000043834C:
	call get_variable_value (retsize: 0;)
	x21 = x0
	branch x0 == 0x0000000000000000 l00000000004384A8
	// succ:  l0000000000438358 l00000000004384A8
l0000000000438358:
	v34 = Mem0[x21:byte]
	w0 = (word32) v34
	branch w0 != 0x00000000 l000000000043843C
	// succ:  l0000000000438360 l000000000043843C
l0000000000438360:
	x19 = 0x0000000000000001
	x22 = 0x0000000000000000
	// succ:  l0000000000438368
l0000000000438368:
	v35 = Mem0[x20:byte]
	w1 = (word32) v35
	x0 = 0x0000000000000000
	branch w1 == 0x00000000 l0000000000438394
	// succ:  l0000000000438374 l0000000000438394
l0000000000438374:
	v36 = Mem0[x20 + 1:byte]
	w1 = (word32) v36
	x0 = 0x0000000000000001
	branch w1 == 0x00000000 l0000000000438394
	// succ:  l0000000000438380 l0000000000438394
l0000000000438380:
	v37 = Mem0[x20 + 2:byte]
	w1 = (word32) v37
	x0 = 0x0000000000000002
	branch w1 == 0x00000000 l0000000000438394
	// succ:  l000000000043838C l0000000000438394
l000000000043838C:
	x0 = x20
	strlen(x0)
	sp = sp + 0xFFFFFFFFFFFFFFF8
	// succ:  l0000000000438394
l0000000000438394:
	x1 = 0x00000000004AC000
	w2 = 0x0000087A
	x0 = x0 + x19
	x1 = x1 + 0xFFFFFFFFFFFFF910
	call sh_xmalloc (retsize: 0;)
	x1 = x21
	x19 = x0
	strcpy(x0, x1)
	sp = sp + 0xFFFFFFFFFFFFFFF8
	x0 = x19 + x22
	x1 = x20
	strcpy(x0, x1)
	sp = sp + 0xFFFFFFFFFFFFFFF8
	goto l00000000004381C8
	// succ:  l00000000004381C8
l00000000004383C4:
	x22 = 0x00000000004AC000
	x0 = 0x0000000000000001
	x1 = x22 + 0xFFFFFFFFFFFFF910
	w2 = 0x00000868
	call sh_xmalloc (retsize: 0;)
	x21 = x0
	Mem0[x0:byte] = (byte) w23
	goto l0000000000438260
	// succ:  l0000000000438260
l00000000004383E4:
	x0 = x20
	strlen(x0)
	sp = sp + 0xFFFFFFFFFFFFFFF8
	x1 = 0x00000000004AC000
	w2 = 0x00000880
	x1 = x1 + 0xFFFFFFFFFFFFF910
	x0 = x0 + 0x0000000000000001
	call sh_xmalloc (retsize: 0;)
	x1 = x20
	strcpy(x0, x1)
	sp = sp + 0xFFFFFFFFFFFFFFF8
	x19 = x0
	goto l00000000004381C8
	// succ:  l00000000004381C8
l0000000000438410:
	x1 = x29 + 0x0000000000000040
	x0 = x20
	call evalexp (retsize: 0;)
	w1 = Mem0[x29 + 64:word32]
	branch w1 != 0x00000000 l00000000004381C0
	// succ:  l0000000000438424 l00000000004381C0
l0000000000438424:
	call top_level_cleanup (retsize: 0;)
	w0 = 0x00000002
	call jump_to_top_level (retsize: 0;)
	// succ:  l0000000000438430
l0000000000438430:
	x21 = 0x0000000000000001
	x24 = 0x0000000000000000
	goto l00000000004382E8
	// succ:  l00000000004382E8
l000000000043843C:
	v38 = Mem0[x21 + 1:byte]
	w0 = (word32) v38
	branch w0 == 0x00000000 l000000000043846C
	// succ:  l0000000000438444 l000000000043846C
l0000000000438444:
	v39 = Mem0[x21 + 2:byte]
	w0 = (word32) v39
	branch w0 == 0x00000000 l00000000004384C0
	// succ:  l000000000043844C l00000000004384C0
l000000000043844C:
	x0 = x21
	strlen(x0)
	sp = sp + 0xFFFFFFFFFFFFFFF8
l0000000000438460:
	x21 = 0x0000000000000002
	x24 = 0x0000000000000001
	goto l00000000004382E8
	// succ:  l00000000004382E8
l000000000043846C:
	x19 = 0x0000000000000002
	x22 = 0x0000000000000001
	goto l0000000000438368
	// succ:  l0000000000438368
l0000000000438478:
	x22 = 0x00000000004AC000
	x1 = x22 + 0xFFFFFFFFFFFFF910
	x0 = x21
	w2 = 0x0000085F
	call sh_xmalloc (retsize: 0;)
	x1 = x23
	x21 = x0
	strcpy(x0, x1)
	sp = sp + 0xFFFFFFFFFFFFFFF8
	goto l0000000000438260
	// succ:  l0000000000438260
l000000000043849C:
	x23 = 0x00000000004AC000
	x23 = x23 + 0x0000000000000460
	goto l00000000004382C0
	// succ:  l00000000004382C0
l00000000004384A8:
	x21 = 0x00000000004AC000
	x21 = x21 + 0x0000000000000460
	goto l0000000000438358
	// succ:  l0000000000438358
l00000000004384B4:
	x21 = 0x0000000000000003
	x24 = 0x0000000000000002
	goto l00000000004382E8
	// succ:  l00000000004382E8
l00000000004384C0:
	x19 = 0x0000000000000003
	x22 = 0x0000000000000002
	goto l0000000000438368
	// succ:  l0000000000438368
l00000000004384CC:
	x19 = x20
	goto l00000000004381C8
	// succ:  l00000000004381C8
make_variable_value_exit:


// bind_variable_value
// Return size: 0
void bind_variable_value()
bind_variable_value_entry:
	// succ:  l00000000004384D4
l00000000004384D4:
	sp = fp
	sp = sp + -48
	Mem0[sp:word64] = x29
	sp = sp + 8
	Mem0[sp:word64] = x30
	x29 = x31 + 0x0000000000000000
	w3 = Mem0[x0 + 40:word32]
	v10 = sp + 16
	Mem0[v10:word64] = x19
	v10 = v10 + 8
	Mem0[v10:word64] = x20
	Mem0[sp + 32:word64] = x21
	w3 = w3 & 0xFFFFEFFF
	x4 = Mem0[x0 + 32:word64]
	Mem0[x0 + 40:word32] = w3
	x19 = x0
	x21 = x1
	w3 = w2
	branch x4 == 0x0000000000000000 l00000000004385BC
	// succ:  l0000000000438504 l00000000004385BC
l0000000000438504:
	branch (w3 & 0x00000001) == 0x00000000 l0000000000438578
	// succ:  l0000000000438508 l0000000000438578
l0000000000438508:
	x2 = 0xFFFFFFFFFFFFFFFF
	x3 = 0x0000000000000000
	call x4 (retsize: 0;)
	// succ:  l0000000000438514
l0000000000438514:
	x0 = Mem0[x19 + 16:word64]
	branch x0 == 0x0000000000000000 l0000000000438530
	// succ:  l000000000043851C l0000000000438530
l000000000043851C:
	x1 = 0x00000000004AC000
	x1 = x1 + 0xFFFFFFFFFFFFF910
	w2 = 0x00000923
	call sh_xfree (retsize: 0;)
	Mem0[x19 + 16:word64] = 0x0000000000000000
	// succ:  l0000000000438530
l0000000000438530:
	x0 = 0x00000000004DF000
	w0 = Mem0[x0 + 3712:word32]
	branch w0 != 0x00000000 l0000000000438568
	// succ:  l000000000043853C l0000000000438568
l000000000043853C:
	w0 = Mem0[x19 + 40:word32]
	// succ:  l0000000000438540
l0000000000438540:
	branch (w0 & 0x00000001) == 0x00000000 l0000000000438554
	// succ:  l0000000000438544 l0000000000438554
l0000000000438544:
	x0 = 0x00000000004D6000
	w1 = 0x00000001
	x0 = x0 + 0xFFFFFFFFFFFFFA50
	Mem0[x0 + 8:word32] = w1
	// succ:  l0000000000438554
l0000000000438554:
	x0 = x19
	x21 = Mem0[sp + 32:word64]
	v21 = sp + 16
	x19 = Mem0[v21:word64]
	v21 = v21 + 8
	x20 = Mem0[v21:word64]
	x29 = Mem0[sp:word64]
	sp = sp + 8
	x30 = Mem0[sp:word64]
	sp = sp + 48
	return
	// succ:  bind_variable_value_exit
l0000000000438568:
	w0 = Mem0[x19 + 40:word32]
	w0 = w0 | 0x00000001
	Mem0[x19 + 40:word32] = w0
	goto l0000000000438540
	// succ:  l0000000000438540
l0000000000438578:
	call make_variable_value (retsize: 0;)
	x20 = x0
	x4 = Mem0[x19 + 32:word64]
	x0 = x19
	x1 = x20
	x2 = 0xFFFFFFFFFFFFFFFF
	x3 = 0x0000000000000000
	call x4 (retsize: 0;)
	branch x20 == 0x0000000000000000 l0000000000438514
	// succ:  l000000000043859C l0000000000438514
l000000000043859C:
	x31 = x21 - x20
	NZCV = cond(x31)
	branch Test(EQ,Z) l0000000000438514
	// succ:  l00000000004385A4 l0000000000438514
l00000000004385A4:
	x1 = 0x00000000004AC000
	x0 = x20
	x1 = x1 + 0xFFFFFFFFFFFFF910
	w2 = 0x0000091A
	call sh_xfree (retsize: 0;)
	goto l0000000000438514
	// succ:  l0000000000438514
l00000000004385BC:
	call make_variable_value (retsize: 0;)
	x20 = x0
	x0 = Mem0[x19 + 8:word64]
	branch x0 == 0x0000000000000000 l00000000004385DC
	// succ:  l00000000004385CC l00000000004385DC
l00000000004385CC:
	x1 = 0x00000000004AC000
	x1 = x1 + 0xFFFFFFFFFFFFF910
	w2 = 0x0000091F
	call sh_xfree (retsize: 0;)
	// succ:  l00000000004385DC
l00000000004385DC:
	Mem0[x19 + 8:word64] = x20
	goto l0000000000438514
	// succ:  l0000000000438514
bind_variable_value_exit:


// bind_function
// Return size: 0
void bind_function()
bind_function_entry:
	// succ:  l00000000004385E4
l00000000004385E4:
	sp = fp
	sp = sp + -48
	Mem0[sp:word64] = x29
	sp = sp + 8
	Mem0[sp:word64] = x30
	x29 = x31 + 0x0000000000000000
	v8 = sp + 16
	Mem0[v8:word64] = x19
	v8 = v8 + 8
	Mem0[v8:word64] = x20
	v11 = sp + 32
	Mem0[v11:word64] = x21
	v11 = v11 + 8
	Mem0[v11:word64] = x22
	x20 = x1
	x21 = x0
	call find_function (retsize: 0;)
	x19 = x0
	branch x0 == 0x0000000000000000 l00000000004386A4
	// succ:  l0000000000438608 l00000000004386A4
l0000000000438608:
	x0 = Mem0[x0 + 16:word64]
	branch x0 == 0x0000000000000000 l0000000000438624
	// succ:  l0000000000438610 l0000000000438624
l0000000000438610:
	x1 = 0x00000000004AC000
	x1 = x1 + 0xFFFFFFFFFFFFF910
	w2 = 0x0000097B
	call sh_xfree (retsize: 0;)
	Mem0[x19 + 16:word64] = 0x0000000000000000
	// succ:  l0000000000438624
l0000000000438624:
	x0 = Mem0[x19 + 8:word64]
	branch x0 == 0x0000000000000000 l0000000000438630
	// succ:  l000000000043862C l0000000000438630
l000000000043862C:
	call dispose_command (retsize: 0;)
	// succ:  l0000000000438630
l0000000000438630:
	branch x20 == 0x0000000000000000 l000000000043869C
	// succ:  l0000000000438634 l000000000043869C
l0000000000438634:
	x0 = x20
	call copy_command (retsize: 0;)
	Mem0[x19 + 8:word64] = x0
	// succ:  l0000000000438640
l0000000000438640:
	w1 = Mem0[x19 + 40:word32]
	x2 = 0x00000000004DF000
	w0 = w1 | 0x00000008
	w2 = Mem0[x2 + 3712:word32]
	Mem0[x19 + 40:word32] = w0
	branch w2 == 0x00000000 l0000000000438660
	// succ:  l0000000000438658 l0000000000438660
l0000000000438658:
	w0 = 0x00000009
	w0 = w1 | w0
	// succ:  l0000000000438660
l0000000000438660:
	w1 = w0 & 0xFFFFEFFF
	Mem0[x19 + 40:word32] = w1
	branch (w0 & 0x00000001) == 0x00000000 l000000000043867C
	// succ:  l000000000043866C l000000000043867C
l000000000043866C:
	x0 = 0x00000000004D6000
	w1 = 0x00000001
	x0 = x0 + 0xFFFFFFFFFFFFFA50
	Mem0[x0 + 8:word32] = w1
	// succ:  l000000000043867C
l000000000043867C:
	x0 = 0x00000000004D7000
	x0 = x0 + 0x0000000000000338
	call set_itemlist_dirty (retsize: 0;)
	x0 = x19
	v18 = sp + 32
	x21 = Mem0[v18:word64]
	v18 = v18 + 8
	x22 = Mem0[v18:word64]
	v19 = sp + 16
	x19 = Mem0[v19:word64]
	v19 = v19 + 8
	x20 = Mem0[v19:word64]
	x29 = Mem0[sp:word64]
	sp = sp + 8
	x30 = Mem0[sp:word64]
	sp = sp + 48
	return
	// succ:  bind_function_exit
l000000000043869C:
	Mem0[x19 + 8:word64] = x20
	goto l0000000000438640
	// succ:  l0000000000438640
l00000000004386A4:
	x0 = x21
	strlen(x0)
	sp = sp + 0xFFFFFFFFFFFFFFF8
	x1 = 0x00000000004AC000
	w2 = 0x00000976
	x1 = x1 + 0xFFFFFFFFFFFFF910
	x0 = x0 + 0x0000000000000001
	call sh_xmalloc (retsize: 0;)
	x1 = x21
	strcpy(x0, x1)
	sp = sp + 0xFFFFFFFFFFFFFFF8
	x1 = 0x00000000004DF000
	x1 = x1 + 0xFFFFFFFFFFFFFC60
	x1 = Mem0[x1 + 56:word64]
	w2 = 0x00000001
	call hash_insert (retsize: 0;)
	x22 = x0
	x0 = x21
	call fn0000000000436758 (retsize: 0;)
	x19 = x0
	Mem0[x22 + 16:word64] = x0
	goto l0000000000438624
	// succ:  l0000000000438624
bind_function_exit:


// bind_function_def
// Return size: 0
void bind_function_def()
bind_function_def_entry:
	// succ:  l00000000004386F4
l00000000004386F4:
	sp = fp
	sp = sp + -48
	Mem0[sp:word64] = x29
	sp = sp + 8
	Mem0[sp:word64] = x30
	x29 = x31 + 0x0000000000000000
	v8 = sp + 16
	Mem0[v8:word64] = x19
	v8 = v8 + 8
	Mem0[v8:word64] = x20
	v11 = sp + 32
	Mem0[v11:word64] = x21
	v11 = v11 + 8
	Mem0[v11:word64] = x22
	x20 = x1
	x21 = x0
	call find_function_def (retsize: 0;)
	x19 = x0
	branch x0 == 0x0000000000000000 l0000000000438734
	// succ:  l0000000000438718 l0000000000438734
l0000000000438718:
	call dispose_function_def_contents (retsize: 0;)
	x0 = x20
	x1 = x19
	v14 = sp + 32
	x21 = Mem0[v14:word64]
	v14 = v14 + 8
	x22 = Mem0[v14:word64]
	v15 = sp + 16
	x19 = Mem0[v15:word64]
	v15 = v15 + 8
	x20 = Mem0[v15:word64]
	x29 = Mem0[sp:word64]
	sp = sp + 8
	x30 = Mem0[sp:word64]
	sp = sp + 48
	// succ:  l0000000000438730_thunk_copy_function_def_contents
l0000000000438730_thunk_copy_function_def_contents:
	call copy_function_def_contents (retsize: 0;)
	return
	// succ:  bind_function_def_exit
l0000000000438734:
	x22 = Mem0[x20 + 16:word64]
	x0 = x20
	Mem0[x20 + 16:word64] = x19
	call copy_function_def (retsize: 0;)
	x19 = x0
	Mem0[x20 + 16:word64] = x22
	x0 = x21
	strlen(x0)
	sp = sp + 0xFFFFFFFFFFFFFFF8
	x1 = 0x00000000004AC000
	w2 = 0x000009AF
	x1 = x1 + 0xFFFFFFFFFFFFF910
	x0 = x0 + 0x0000000000000001
	call sh_xmalloc (retsize: 0;)
	x1 = x21
	strcpy(x0, x1)
	sp = sp + 0xFFFFFFFFFFFFFFF8
	x1 = 0x00000000004DF000
	x1 = x1 + 0xFFFFFFFFFFFFFC60
	x1 = Mem0[x1 + 64:word64]
	w2 = 0x00000001
	call hash_insert (retsize: 0;)
	Mem0[x0 + 16:word64] = x19
	v17 = sp + 32
	x21 = Mem0[v17:word64]
	v17 = v17 + 8
	x22 = Mem0[v17:word64]
	v18 = sp + 16
	x19 = Mem0[v18:word64]
	v18 = v18 + 8
	x20 = Mem0[v18:word64]
	x29 = Mem0[sp:word64]
	sp = sp + 8
	x30 = Mem0[sp:word64]
	sp = sp + 48
	return
	// succ:  bind_function_def_exit
bind_function_def_exit:


// dispose_variable
// Return size: 0
void dispose_variable()
dispose_variable_entry:
	// succ:  l0000000000438798
l0000000000438798:
	sp = fp
	sp = sp + -32
	Mem0[sp:word64] = x29
	sp = sp + 8
	Mem0[sp:word64] = x30
	x29 = x31 + 0x0000000000000000
	v8 = sp + 16
	Mem0[v8:word64] = x19
	v8 = v8 + 8
	Mem0[v8:word64] = x20
	x19 = x0
	branch x0 == 0x0000000000000000 l0000000000438818
	// succ:  l00000000004387AC l0000000000438818
l00000000004387AC:
	w1 = Mem0[x0 + 40:word32]
	branch (w1 & 0x00000000) == 0x00000000 l000000000043880C
	// succ:  l00000000004387B4 l000000000043880C
l00000000004387B4:
	x0 = Mem0[x19 + 16:word64]
	x20 = 0x00000000004AC000
	branch x0 == 0x0000000000000000 l00000000004387CC
	// succ:  l00000000004387C0 l00000000004387CC
l00000000004387C0:
	x1 = x20 + 0xFFFFFFFFFFFFF910
	w2 = 0x00000A55
	call sh_xfree (retsize: 0;)
	// succ:  l00000000004387CC
l00000000004387CC:
	x0 = Mem0[x19:word64]
	x1 = x20 + 0xFFFFFFFFFFFFF910
	w2 = 0x00000A57
	call sh_xfree (retsize: 0;)
	w0 = Mem0[x19 + 40:word32]
	branch (w0 & 0x00000001) == 0x00000000 l00000000004387F4
	// succ:  l00000000004387E4 l00000000004387F4
l00000000004387E4:
	x0 = 0x00000000004D6000
	w1 = 0x00000001
	x0 = x0 + 0xFFFFFFFFFFFFFA50
	Mem0[x0 + 8:word32] = w1
	// succ:  l00000000004387F4
l00000000004387F4:
	x0 = x19
	x1 = x20 + 0xFFFFFFFFFFFFF910
	v15 = sp + 16
	x19 = Mem0[v15:word64]
	v15 = v15 + 8
	x20 = Mem0[v15:word64]
	x29 = Mem0[sp:word64]
	sp = sp + 8
	x30 = Mem0[sp:word64]
	sp = sp + 32
	w2 = 0x00000A5C
	// succ:  l0000000000438808_thunk_sh_xfree
l0000000000438808_thunk_sh_xfree:
	call sh_xfree (retsize: 0;)
	return
	// succ:  dispose_variable_exit
l000000000043880C:
	x0 = Mem0[x19 + 8:word64]
	call fn0000000000437124 (retsize: 0;)
	goto l00000000004387B4
	// succ:  l00000000004387B4
l0000000000438818:
	v13 = sp + 16
	x19 = Mem0[v13:word64]
	v13 = v13 + 8
	x20 = Mem0[v13:word64]
	x29 = Mem0[sp:word64]
	sp = sp + 8
	x30 = Mem0[sp:word64]
	sp = sp + 32
	return
	// succ:  dispose_variable_exit
dispose_variable_exit:


// unbind_func
// Return size: 0
void unbind_func()
unbind_func_entry:
	// succ:  l0000000000438828
l0000000000438828:
	sp = fp
	sp = sp + -32
	Mem0[sp:word64] = x29
	sp = sp + 8
	Mem0[sp:word64] = x30
	x29 = x31 + 0x0000000000000000
	x1 = 0x00000000004DF000
	x1 = x1 + 0xFFFFFFFFFFFFFC60
	x1 = Mem0[x1 + 56:word64]
	w2 = 0x00000000
	v10 = sp + 16
	Mem0[v10:word64] = x19
	v10 = v10 + 8
	Mem0[v10:word64] = x20
	call hash_remove (retsize: 0;)
	x19 = x0
	branch x0 == 0x0000000000000000 l00000000004388C0
	// succ:  l0000000000438850 l00000000004388C0
l0000000000438850:
	x0 = 0x00000000004D7000
	x0 = x0 + 0x0000000000000338
	call set_itemlist_dirty (retsize: 0;)
	x0 = Mem0[x19 + 16:word64]
	branch x0 == 0x0000000000000000 l0000000000438870
	// succ:  l0000000000438864 l0000000000438870
l0000000000438864:
	w1 = Mem0[x0 + 40:word32]
	branch (w1 & 0x00000001) == 0x00000000 l00000000004388A8
	// succ:  l000000000043886C l00000000004388A8
l000000000043886C:
	call dispose_variable (retsize: 0;)
	// succ:  l0000000000438870
l0000000000438870:
	x20 = 0x00000000004AC000
	x20 = x20 + 0xFFFFFFFFFFFFF910
	x0 = Mem0[x19 + 8:word64]
	w2 = 0x00000A80
	x1 = x20
	call sh_xfree (retsize: 0;)
	x0 = x19
	x1 = x20
	w2 = 0x00000A81
	call sh_xfree (retsize: 0;)
	w0 = 0x00000000
	// succ:  l000000000043889C
l000000000043889C:
	v14 = sp + 16
	x19 = Mem0[v14:word64]
	v14 = v14 + 8
	x20 = Mem0[v14:word64]
	x29 = Mem0[sp:word64]
	sp = sp + 8
	x30 = Mem0[sp:word64]
	sp = sp + 32
	return
	// succ:  unbind_func_exit
l00000000004388A8:
	x1 = 0x00000000004D6000
	x1 = x1 + 0xFFFFFFFFFFFFFA50
	w2 = Mem0[x1 + 8:word32]
	w2 = w2 + 0x00000001
	Mem0[x1 + 8:word32] = w2
	goto l000000000043886C
	// succ:  l000000000043886C
l00000000004388C0:
	w0 = 0xFFFFFFFF
	goto l000000000043889C
	// succ:  l000000000043889C
unbind_func_exit:


// unbind_function_def
// Return size: 0
void unbind_function_def()
unbind_function_def_entry:
	// succ:  l00000000004388C8
l00000000004388C8:
	sp = fp
	sp = sp + -32
	Mem0[sp:word64] = x29
	sp = sp + 8
	Mem0[sp:word64] = x30
	x29 = x31 + 0x0000000000000000
	x1 = 0x00000000004DF000
	x1 = x1 + 0xFFFFFFFFFFFFFC60
	x1 = Mem0[x1 + 64:word64]
	w2 = 0x00000000
	v10 = sp + 16
	Mem0[v10:word64] = x19
	v10 = v10 + 8
	Mem0[v10:word64] = x20
	call hash_remove (retsize: 0;)
	x19 = x0
	branch x0 == 0x0000000000000000 l0000000000438934
	// succ:  l00000000004388F0 l0000000000438934
l00000000004388F0:
	x0 = Mem0[x0 + 16:word64]
	branch x0 == 0x0000000000000000 l00000000004388FC
	// succ:  l00000000004388F8 l00000000004388FC
l00000000004388F8:
	call dispose_function_def (retsize: 0;)
	// succ:  l00000000004388FC
l00000000004388FC:
	x20 = 0x00000000004AC000
	x20 = x20 + 0xFFFFFFFFFFFFF910
	x0 = Mem0[x19 + 8:word64]
	w2 = 0x00000A97
	x1 = x20
	call sh_xfree (retsize: 0;)
	x0 = x19
	x1 = x20
	w2 = 0x00000A98
	call sh_xfree (retsize: 0;)
	w0 = 0x00000000
	// succ:  l0000000000438928
l0000000000438928:
	v13 = sp + 16
	x19 = Mem0[v13:word64]
	v13 = v13 + 8
	x20 = Mem0[v13:word64]
	x29 = Mem0[sp:word64]
	sp = sp + 8
	x30 = Mem0[sp:word64]
	sp = sp + 32
	return
	// succ:  unbind_function_def_exit
l0000000000438934:
	w0 = 0xFFFFFFFF
	goto l0000000000438928
	// succ:  l0000000000438928
unbind_function_def_exit:


// kill_all_local_variables
// Return size: 0
void kill_all_local_variables()
kill_all_local_variables_entry:
	// succ:  l000000000043893C
l000000000043893C:
	sp = fp
	sp = sp + -32
	Mem0[sp:word64] = x29
	sp = sp + 8
	Mem0[sp:word64] = x30
	x29 = x31 + 0x0000000000000000
	x0 = 0x00000000004DF000
	x0 = x0 + 0xFFFFFFFFFFFFFC60
	Mem0[sp + 16:word64] = x19
	x19 = Mem0[x0 + 32:word64]
	branch x19 == 0x0000000000000000 l0000000000438978
	// succ:  l0000000000438958 l0000000000438978
l0000000000438958:
	w2 = Mem0[x0:word32]
	// succ:  l000000000043895C
l000000000043895C:
	w1 = Mem0[x19 + 12:word32]
	branch (w1 & 0x00000004) == 0x00000000 l0000000000438970
	// succ:  l0000000000438964 l0000000000438970
l0000000000438964:
	w0 = Mem0[x19 + 8:word32]
	NZCV = cond(w0 - w2)
	branch Test(EQ,Z) l0000000000438984
	// succ:  l0000000000438970 l0000000000438984
l0000000000438970:
	x19 = Mem0[x19 + 24:word64]
	branch x19 != 0x0000000000000000 l000000000043895C
	// succ:  l0000000000438978 l000000000043895C
l0000000000438978:
	x19 = Mem0[sp + 16:word64]
	x29 = Mem0[sp:word64]
	sp = sp + 8
	x30 = Mem0[sp:word64]
	sp = sp + 32
	return
	// succ:  kill_all_local_variables_exit
l0000000000438984:
	x0 = Mem0[x19 + 32:word64]
	branch x0 == 0x0000000000000000 l0000000000438990
	// succ:  l000000000043898C l0000000000438990
l000000000043898C:
	branch (w1 & 0x00000001) == 0x00000000 l00000000004389A0
	// succ:  l0000000000438990 l00000000004389A0
l0000000000438990:
	Mem0[x19 + 32:word64] = 0x0000000000000000
	// succ:  l0000000000438994
l0000000000438994:
	x19 = Mem0[sp + 16:word64]
	x29 = Mem0[sp:word64]
	sp = sp + 8
	x30 = Mem0[sp:word64]
	sp = sp + 32
	return
	// succ:  kill_all_local_variables_exit
l00000000004389A0:
	x1 = 0x0000000000438000
	x1 = x1 + 0xFFFFFFFFFFFFF824
	call hash_flush (retsize: 0;)
	x0 = Mem0[x19 + 32:word64]
	call hash_dispose (retsize: 0;)
	Mem0[x19 + 32:word64] = 0x0000000000000000
	goto l0000000000438994
	// succ:  l0000000000438994
kill_all_local_variables_exit:


// delete_all_variables
// Return size: 0
void delete_all_variables()
delete_all_variables_entry:
	// succ:  l00000000004389BC
l00000000004389BC:
	sp = fp
	x1 = 0x0000000000438000
	x1 = x1 + 0xFFFFFFFFFFFFF824
	// succ:  l00000000004389C4_thunk_hash_flush
l00000000004389C4_thunk_hash_flush:
	call hash_flush (retsize: 0;)
	return
	// succ:  delete_all_variables_exit
delete_all_variables_exit:


// map_over
// Return size: 0
void map_over()
map_over_entry:
	// succ:  l00000000004389C8
l00000000004389C8:
	sp = fp
	sp = sp + -48
	Mem0[sp:word64] = x29
	sp = sp + 8
	Mem0[sp:word64] = x30
	x29 = x31 + 0x0000000000000000
	v8 = sp + 16
	Mem0[v8:word64] = x19
	v8 = v8 + 8
	Mem0[v8:word64] = x20
	Mem0[sp + 32:word64] = x21
	x19 = x1
	x21 = x0
	branch x1 == 0x0000000000000000 l0000000000438A68
	// succ:  l00000000004389E4 l0000000000438A68
l00000000004389E4:
	x2 = x1
	w0 = 0x00000000
	// succ:  l00000000004389EC
l00000000004389EC:
	x3 = Mem0[x2 + 32:word64]
	branch x3 == 0x0000000000000000 l00000000004389F8
	// succ:  l00000000004389F4 l00000000004389F8
l00000000004389F4:
	w3 = Mem0[x3 + 12:word32]
	// succ:  l00000000004389F8
l00000000004389F8:
	x2 = Mem0[x2 + 24:word64]
	w0 = w0 + w3
	branch x2 != 0x0000000000000000 l00000000004389EC
	// succ:  l0000000000438A04 l00000000004389EC
l0000000000438A04:
	branch w0 == 0x00000000 l0000000000438A54
	// succ:  l0000000000438A08 l0000000000438A54
l0000000000438A08:
	call fn00000000004366F0 (retsize: 0;)
	x20 = x0
	// succ:  l0000000000438A10
l0000000000438A10:
	x0 = Mem0[x19 + 32:word64]
	x1 = x21
	x2 = x20
	call fn0000000000437154 (retsize: 0;)
	x19 = Mem0[x19 + 24:word64]
	branch x19 != 0x0000000000000000 l0000000000438A10
	// succ:  l0000000000438A28 l0000000000438A10
l0000000000438A28:
	x1 = 0x00000000004AC000
	x19 = Mem0[x20:word64]
	x0 = x20
	x1 = x1 + 0xFFFFFFFFFFFFF910
	w2 = 0x00000BA8
	call sh_xfree (retsize: 0;)
	x0 = x19
	// succ:  l0000000000438A44
l0000000000438A44:
	v16 = sp + 16
	x19 = Mem0[v16:word64]
	v16 = v16 + 8
	x20 = Mem0[v16:word64]
	x21 = Mem0[sp + 32:word64]
	x29 = Mem0[sp:word64]
	sp = sp + 8
	x30 = Mem0[sp:word64]
	sp = sp + 48
	return
	// succ:  map_over_exit
l0000000000438A54:
	x0 = x2
	v18 = sp + 16
	x19 = Mem0[v18:word64]
	v18 = v18 + 8
	x20 = Mem0[v18:word64]
	x21 = Mem0[sp + 32:word64]
	x29 = Mem0[sp:word64]
	sp = sp + 8
	x30 = Mem0[sp:word64]
	sp = sp + 48
	return
	// succ:  map_over_exit
l0000000000438A68:
	x0 = x1
	goto l0000000000438A44
	// succ:  l0000000000438A44
map_over_exit:


// map_over_funcs
// Return size: 0
void map_over_funcs()
map_over_funcs_entry:
	// succ:  l0000000000438A70
l0000000000438A70:
	sp = fp
	sp = sp + -48
	Mem0[sp:word64] = x29
	sp = sp + 8
	Mem0[sp:word64] = x30
	x29 = x31 + 0x0000000000000000
	v8 = sp + 16
	Mem0[v8:word64] = x19
	v8 = v8 + 8
	Mem0[v8:word64] = x20
	x20 = 0x00000000004DF000
	x20 = x20 + 0xFFFFFFFFFFFFFC60
	x2 = Mem0[x20 + 56:word64]
	x1 = x0
	branch x2 == 0x0000000000000000 l0000000000438AE4
	// succ:  l0000000000438A90 l0000000000438AE4
l0000000000438A90:
	w0 = Mem0[x2 + 12:word32]
	branch w0 == 0x00000000 l0000000000438ADC
	// succ:  l0000000000438A98 l0000000000438ADC
l0000000000438A98:
	Mem0[x29 + 32:word64] = x1
	call fn00000000004366F0 (retsize: 0;)
	x19 = x0
	x1 = Mem0[x29 + 32:word64]
	x0 = Mem0[x20 + 56:word64]
	x2 = x19
	call fn0000000000437154 (retsize: 0;)
	x1 = 0x00000000004AC000
	x20 = Mem0[x19:word64]
	x0 = x19
	x1 = x1 + 0xFFFFFFFFFFFFF910
	w2 = 0x00000BBB
	call sh_xfree (retsize: 0;)
	x0 = x20
	// succ:  l0000000000438AD0
l0000000000438AD0:
	v14 = sp + 16
	x19 = Mem0[v14:word64]
	v14 = v14 + 8
	x20 = Mem0[v14:word64]
	x29 = Mem0[sp:word64]
	sp = sp + 8
	x30 = Mem0[sp:word64]
	sp = sp + 48
	return
	// succ:  map_over_funcs_exit
l0000000000438ADC:
	x0 = 0x0000000000000000
	goto l0000000000438AD0
	// succ:  l0000000000438AD0
l0000000000438AE4:
	x0 = x2
	goto l0000000000438AD0
	// succ:  l0000000000438AD0
map_over_funcs_exit:


// sort_variables
// Return size: 0
void sort_variables()
sort_variables_entry:
	// succ:  l0000000000438AEC
l0000000000438AEC:
	sp = fp
	sp = sp + -32
	Mem0[sp:word64] = x29
	sp = sp + 8
	Mem0[sp:word64] = x30
	x29 = x31 + 0x0000000000000000
	Mem0[sp + 16:word64] = x19
	x19 = x0
	call strvec_len (retsize: 0;)
sort_variables_exit:


// fn0000000000438B20
// Return size: 0
void fn0000000000438B20()
fn0000000000438B20_entry:
	// succ:  l0000000000438B20
l0000000000438B20:
	sp = fp
	sp = sp + -32
	Mem0[sp:word64] = x29
	sp = sp + 8
	Mem0[sp:word64] = x30
	x29 = x31 + 0x0000000000000000
	x1 = 0x00000000004DF000
	x1 = x1 + 0xFFFFFFFFFFFFFC60
	x1 = Mem0[x1 + 32:word64]
	Mem0[sp + 16:word64] = x19
	call map_over (retsize: 0;)
	x19 = x0
	branch x0 == 0x0000000000000000 l0000000000438B48
	goto l0000000000438B44
	// succ:  l0000000000438B44 l0000000000438B48
l0000000000438B20:
l0000000000438B44:
	call sort_variables (retsize: 0;)
	// succ:  l0000000000438B48
l0000000000438B48:
	x0 = x19
	x19 = Mem0[sp + 16:word64]
	x29 = Mem0[sp:word64]
	sp = sp + 8
	x30 = Mem0[sp:word64]
	sp = sp + 32
	return
	// succ:  fn0000000000438B20_exit
fn0000000000438B20_exit:


// all_shell_variables
// Return size: 0
void all_shell_variables()
all_shell_variables_entry:
	// succ:  l0000000000438B58
l0000000000438B58:
	sp = fp
	x0 = 0x0000000000000000
	// succ:  l0000000000438B5C_thunk_fn0000000000438B20
l0000000000438B5C_thunk_fn0000000000438B20:
	call fn0000000000438B20 (retsize: 0;)
	return
	// succ:  all_shell_variables_exit
all_shell_variables_exit:


// all_shell_functions
// Return size: 0
void all_shell_functions()
all_shell_functions_entry:
	// succ:  l0000000000438B60
l0000000000438B60:
	sp = fp
	sp = sp + -32
	Mem0[sp:word64] = x29
	sp = sp + 8
	Mem0[sp:word64] = x30
	x29 = x31 + 0x0000000000000000
	x0 = 0x0000000000000000
	Mem0[sp + 16:word64] = x19
	call map_over_funcs (retsize: 0;)
	x19 = x0
	branch x0 == 0x0000000000000000 l0000000000438B80
	// succ:  l0000000000438B7C l0000000000438B80
l0000000000438B7C:
	call sort_variables (retsize: 0;)
	// succ:  l0000000000438B80
l0000000000438B80:
	x0 = x19
	x19 = Mem0[sp + 16:word64]
	x29 = Mem0[sp:word64]
	sp = sp + 8
	x30 = Mem0[sp:word64]
	sp = sp + 32
	return
	// succ:  all_shell_functions_exit
all_shell_functions_exit:


// all_visible_functions
// Return size: 0
void all_visible_functions()
all_visible_functions_entry:
	// succ:  l0000000000438B90
l0000000000438B90:
	sp = fp
	sp = sp + -32
	Mem0[sp:word64] = x29
	sp = sp + 8
	Mem0[sp:word64] = x30
	x29 = x31 + 0x0000000000000000
	x0 = 0x0000000000436000
	x0 = x0 + 0x00000000000005F8
	Mem0[sp + 16:word64] = x19
	call map_over_funcs (retsize: 0;)
	x19 = x0
	branch x0 == 0x0000000000000000 l0000000000438BB4
	// succ:  l0000000000438BB0 l0000000000438BB4
l0000000000438BB0:
	call sort_variables (retsize: 0;)
	// succ:  l0000000000438BB4
l0000000000438BB4:
	x0 = x19
	x19 = Mem0[sp + 16:word64]
	x29 = Mem0[sp:word64]
	sp = sp + 8
	x30 = Mem0[sp:word64]
	sp = sp + 32
	return
	// succ:  all_visible_functions_exit
all_visible_functions_exit:


// all_visible_variables
// Return size: 0
void all_visible_variables()
all_visible_variables_entry:
	// succ:  l0000000000438BC4
l0000000000438BC4:
	sp = fp
	x0 = 0x0000000000436000
	x0 = x0 + 0x00000000000005F8
	// succ:  l0000000000438BCC_thunk_fn0000000000438B20
l0000000000438BCC_thunk_fn0000000000438B20:
	call fn0000000000438B20 (retsize: 0;)
	return
	// succ:  all_visible_variables_exit
all_visible_variables_exit:


// all_exported_variables
// Return size: 0
void all_exported_variables()
all_exported_variables_entry:
	// succ:  l0000000000438BD0
l0000000000438BD0:
	sp = fp
	x0 = 0x0000000000436000
	x0 = x0 + 0x000000000000060C
	// succ:  l0000000000438BD8_thunk_fn0000000000438B20
l0000000000438BD8_thunk_fn0000000000438B20:
	call fn0000000000438B20 (retsize: 0;)
	return
	// succ:  all_exported_variables_exit
all_exported_variables_exit:


// local_exported_variables
// Return size: 0
void local_exported_variables()
local_exported_variables_entry:
	// succ:  l0000000000438BDC
l0000000000438BDC:
	sp = fp
	x0 = 0x0000000000436000
	x0 = x0 + 0x0000000000000644
	// succ:  l0000000000438BE4_thunk_fn0000000000438B20
l0000000000438BE4_thunk_fn0000000000438B20:
	call fn0000000000438B20 (retsize: 0;)
	return
	// succ:  local_exported_variables_exit
local_exported_variables_exit:


// all_local_variables
// Return size: 0
void all_local_variables()
all_local_variables_entry:
	// succ:  l0000000000438BE8
l0000000000438BE8:
	sp = fp
	sp = sp + -32
	Mem0[sp:word64] = x29
	sp = sp + 8
	Mem0[sp:word64] = x30
	x29 = x31 + 0x0000000000000000
	x0 = 0x00000000004DF000
	x0 = x0 + 0xFFFFFFFFFFFFFC60
	v9 = sp + 16
	Mem0[v9:word64] = x19
	v9 = v9 + 8
	Mem0[v9:word64] = x20
	x19 = Mem0[x0 + 32:word64]
	branch x19 == 0x0000000000000000 l0000000000438C24
	// succ:  l0000000000438C04 l0000000000438C24
l0000000000438C04:
	w2 = Mem0[x0:word32]
	// succ:  l0000000000438C08
l0000000000438C08:
	w1 = Mem0[x19 + 12:word32]
	branch (w1 & 0x00000004) == 0x00000000 l0000000000438C1C
	// succ:  l0000000000438C10 l0000000000438C1C
l0000000000438C10:
	w0 = Mem0[x19 + 8:word32]
	NZCV = cond(w0 - w2)
	branch Test(EQ,Z) l0000000000438C4C
	// succ:  l0000000000438C1C l0000000000438C4C
l0000000000438C1C:
	x19 = Mem0[x19 + 24:word64]
	branch x19 != 0x0000000000000000 l0000000000438C08
	// succ:  l0000000000438C24 l0000000000438C08
l0000000000438C24:
	x1 = 0x00000000004AC000
	x1 = x1 + 0xFFFFFFFFFFFFF9F0
	w2 = 0x00000005
	x0 = 0x0000000000000000
	dcgettext(x0, x1, x2)
	sp = sp + 0xFFFFFFFFFFFFFFF8
	call internal_error (retsize: 0;)
	// succ:  l0000000000438C3C
l0000000000438C3C:
	x0 = 0x0000000000000000
	// succ:  l0000000000438C40
l0000000000438C40:
	v17 = sp + 16
	x19 = Mem0[v17:word64]
	v17 = v17 + 8
	x20 = Mem0[v17:word64]
	x29 = Mem0[sp:word64]
	sp = sp + 8
	x30 = Mem0[sp:word64]
	sp = sp + 32
	return
	// succ:  all_local_variables_exit
l0000000000438C4C:
	x0 = Mem0[x19 + 32:word64]
	branch x0 == 0x0000000000000000 l0000000000438C40
	// succ:  l0000000000438C54 l0000000000438C40
l0000000000438C54:
	w0 = Mem0[x0 + 12:word32]
	branch w0 == 0x00000000 l0000000000438C3C
	// succ:  l0000000000438C5C l0000000000438C3C
l0000000000438C5C:
	branch (w1 & 0x00000001) == 0x00000000 l0000000000438C3C
	// succ:  l0000000000438C60 l0000000000438C3C
l0000000000438C60:
	call fn00000000004366F0 (retsize: 0;)
	x20 = x0
	x1 = 0x0000000000436000
	x0 = Mem0[x19 + 32:word64]
	x1 = x1 + 0x0000000000000684
	x2 = x20
	call fn0000000000437154 (retsize: 0;)
	x1 = 0x00000000004AC000
	x19 = Mem0[x20:word64]
	x0 = x20
	x1 = x1 + 0xFFFFFFFFFFFFF910
	w2 = 0x00000C79
	call sh_xfree (retsize: 0;)
	x0 = x19
	branch x19 == 0x0000000000000000 l0000000000438C40
	// succ:  l0000000000438C9C l0000000000438C40
l0000000000438C9C:
	call sort_variables (retsize: 0;)
	x0 = x19
	v18 = sp + 16
	x19 = Mem0[v18:word64]
	v18 = v18 + 8
	x20 = Mem0[v18:word64]
	x29 = Mem0[sp:word64]
	sp = sp + 8
	x30 = Mem0[sp:word64]
	sp = sp + 32
	return
	// succ:  all_local_variables_exit
all_local_variables_exit:


// all_array_variables
// Return size: 0
void all_array_variables()
all_array_variables_entry:
	// succ:  l0000000000438CB0
l0000000000438CB0:
	sp = fp
	x0 = 0x0000000000436000
	x0 = x0 + 0x00000000000006C0
	// succ:  l0000000000438CB8_thunk_fn0000000000438B20
l0000000000438CB8_thunk_fn0000000000438B20:
	call fn0000000000438B20 (retsize: 0;)
	return
	// succ:  all_array_variables_exit
all_array_variables_exit:


// all_variables_matching_prefix
// Return size: 0
void all_variables_matching_prefix()
all_variables_matching_prefix_entry:
	// succ:  l0000000000438CBC
l0000000000438CBC:
	sp = fp
	sp = sp + -112
	Mem0[sp:word64] = x29
	sp = sp + 8
	Mem0[sp:word64] = x30
	x29 = x31 + 0x0000000000000000
	v8 = sp + 48
	Mem0[v8:word64] = x23
	v8 = v8 + 8
	Mem0[v8:word64] = x24
	v11 = sp + 16
	Mem0[v11:word64] = x19
	v11 = v11 + 8
	Mem0[v11:word64] = x20
	v14 = sp + 32
	Mem0[v14:word64] = x21
	v14 = v14 + 8
	Mem0[v14:word64] = x22
	v17 = sp + 64
	Mem0[v17:word64] = x25
	v17 = v17 + 8
	Mem0[v17:word64] = x26
	v20 = sp + 80
	Mem0[v20:word64] = x27
	v20 = v20 + 8
	Mem0[v20:word64] = x28
	x23 = x0
	branch x0 == 0x0000000000000000 l0000000000438E1C
	// succ:  l0000000000438CE0 l0000000000438E1C
l0000000000438CE0:
	v23 = Mem0[x0:byte]
	w1 = (word32) v23
	w24 = 0x00000000
	branch w1 != 0x00000000 l0000000000438DF8
	// succ:  l0000000000438CEC l0000000000438DF8
l0000000000438CEC:
	x0 = 0x0000000000436000
	x0 = x0 + 0x00000000000005F8
	call fn0000000000438B20 (retsize: 0;)
	x25 = x0
	branch x0 == 0x0000000000000000 l0000000000438DC4
	// succ:  l0000000000438D00 l0000000000438DC4
l0000000000438D00:
	x0 = Mem0[x0:word64]
	branch x0 == 0x0000000000000000 l0000000000438DC4
	// succ:  l0000000000438D08 l0000000000438DC4
l0000000000438D08:
	x19 = x25 + 0x0000000000000008
	x2 = x19
	w0 = 0x00000001
	// succ:  l0000000000438D14
l0000000000438D14:
	x20 = Mem0[x2:word64]
	x2 = x2 + 8
	w0 = w0 + 0x00000001
	branch x20 != 0x0000000000000000 l0000000000438D14
	// succ:  l0000000000438D20 l0000000000438D14
l0000000000438D20:
	call strvec_create (retsize: 0;)
	x3 = Mem0[x25:word64]
	x26 = x0
	branch x3 == 0x0000000000000000 l0000000000438E24
	// succ:  l0000000000438D30 l0000000000438E24
l0000000000438D30:
	x28 = 0x00000000004AC000
l0000000000438DAC:
	x0 = x25
	Mem0[x26 + x20:word64] = 0x0000000000000000
	x1 = x28 + 0xFFFFFFFFFFFFF910
	w2 = 0x00000CA4
	call sh_xfree (retsize: 0;)
	x0 = x26
	// succ:  l0000000000438DC4
l0000000000438DC4:
	v30 = sp + 16
	x19 = Mem0[v30:word64]
	v30 = v30 + 8
	x20 = Mem0[v30:word64]
	v31 = sp + 32
	x21 = Mem0[v31:word64]
	v31 = v31 + 8
	x22 = Mem0[v31:word64]
	v32 = sp + 48
	x23 = Mem0[v32:word64]
	v32 = v32 + 8
	x24 = Mem0[v32:word64]
	v33 = sp + 64
	x25 = Mem0[v33:word64]
	v33 = v33 + 8
	x26 = Mem0[v33:word64]
	v34 = sp + 80
	x27 = Mem0[v34:word64]
	v34 = v34 + 8
	x28 = Mem0[v34:word64]
	x29 = Mem0[sp:word64]
	sp = sp + 8
	x30 = Mem0[sp:word64]
	sp = sp + 112
	return
	// succ:  all_variables_matching_prefix_exit
l0000000000438DF8:
	v35 = Mem0[x0 + 1:byte]
	w1 = (word32) v35
	w24 = 0x00000001
	branch w1 == 0x00000000 l0000000000438CEC
	// succ:  l0000000000438E04 l0000000000438CEC
l0000000000438E04:
	v36 = Mem0[x0 + 2:byte]
	w1 = (word32) v36
	w24 = 0x00000002
	branch w1 == 0x00000000 l0000000000438CEC
	// succ:  l0000000000438E10 l0000000000438CEC
l0000000000438E10:
	strlen(x0)
	sp = sp + 0xFFFFFFFFFFFFFFF8
	w24 = w0
	goto l0000000000438CEC
	// succ:  l0000000000438CEC
l0000000000438E1C:
	w24 = w0
	goto l0000000000438CEC
	// succ:  l0000000000438CEC
l0000000000438E24:
	x20 = x3
	x28 = 0x00000000004AC000
	goto l0000000000438DAC
	// succ:  l0000000000438DAC
all_variables_matching_prefix_exit:


// find_tempenv_variable
// Return size: 0
void find_tempenv_variable()
find_tempenv_variable_entry:
	// succ:  l0000000000438E30
l0000000000438E30:
	sp = fp
	sp = sp + -16
	Mem0[sp:word64] = x29
	sp = sp + 8
	Mem0[sp:word64] = x30
	x29 = x31 + 0x0000000000000000
	x1 = 0x00000000004DF000
	x1 = x1 + 0xFFFFFFFFFFFFFC60
	x1 = Mem0[x1 + 40:word64]
	branch x1 == 0x0000000000000000 l0000000000438E60
	// succ:  l0000000000438E48 l0000000000438E60
l0000000000438E48:
	w2 = 0x00000000
	call hash_search (retsize: 0;)
	branch x0 == 0x0000000000000000 l0000000000438E60
	// succ:  l0000000000438E54 l0000000000438E60
l0000000000438E54:
	x0 = Mem0[x0 + 16:word64]
	x29 = Mem0[sp:word64]
	sp = sp + 8
	x30 = Mem0[sp:word64]
	sp = sp + 16
	return
	// succ:  find_tempenv_variable_exit
l0000000000438E60:
	x0 = 0x0000000000000000
	x29 = Mem0[sp:word64]
	sp = sp + 8
	x30 = Mem0[sp:word64]
	sp = sp + 16
	return
	// succ:  find_tempenv_variable_exit
find_tempenv_variable_exit:


// add_or_supercede_exported_var
// Return size: 0
void add_or_supercede_exported_var()
add_or_supercede_exported_var_entry:
	// succ:  l0000000000438E6C
l0000000000438E6C:
	sp = fp
	sp = sp + -112
	Mem0[sp:word64] = x29
	sp = sp + 8
	Mem0[sp:word64] = x30
	x29 = x31 + 0x0000000000000000
	v8 = sp + 80
	Mem0[v8:word64] = x27
	v8 = v8 + 8
	Mem0[v8:word64] = x28
	w28 = w1
	w1 = 0x00000000
	v13 = sp + 16
	Mem0[v13:word64] = x19
	v13 = v13 + 8
	Mem0[v13:word64] = x20
	v16 = sp + 48
	Mem0[v16:word64] = x23
	v16 = v16 + 8
	Mem0[v16:word64] = x24
	v19 = sp + 32
	Mem0[v19:word64] = x21
	v19 = v19 + 8
	Mem0[v19:word64] = x22
	v22 = sp + 64
	Mem0[v22:word64] = x25
	v22 = v22 + 8
	Mem0[v22:word64] = x26
	x24 = x0
	call assignment (retsize: 0;)
	w19 = w0
	branch w0 == 0x00000000 l0000000000439000
	// succ:  l0000000000438EA0 l0000000000439000
l0000000000438EA0:
l0000000000439000:
	x0 = 0x00000000004DF000
	x0 = x0 + 0xFFFFFFFFFFFFFC60
	x0 = Mem0[x0 + 72:word64]
	v26 = sp + 16
	x19 = Mem0[v26:word64]
	v26 = v26 + 8
	x20 = Mem0[v26:word64]
	v27 = sp + 32
	x21 = Mem0[v27:word64]
	v27 = v27 + 8
	x22 = Mem0[v27:word64]
	v28 = sp + 48
	x23 = Mem0[v28:word64]
	v28 = v28 + 8
	x24 = Mem0[v28:word64]
	v29 = sp + 64
	x25 = Mem0[v29:word64]
	v29 = v29 + 8
	x26 = Mem0[v29:word64]
	v30 = sp + 80
	x27 = Mem0[v30:word64]
	v30 = v30 + 8
	x28 = Mem0[v30:word64]
	x29 = Mem0[sp:word64]
	sp = sp + 8
	x30 = Mem0[sp:word64]
	sp = sp + 112
	return
	// succ:  add_or_supercede_exported_var_exit
add_or_supercede_exported_var_exit:


// fn00000000004390B0
// Return size: 0
void fn00000000004390B0()
fn00000000004390B0_entry:
	// succ:  l00000000004390B0
l00000000004390B0:
	sp = fp
	sp = sp + -64
	Mem0[sp:word64] = x29
	sp = sp + 8
	Mem0[sp:word64] = x30
	x29 = x31 + 0x0000000000000000
	v8 = sp + 32
	Mem0[v8:word64] = x21
	v8 = v8 + 8
	Mem0[v8:word64] = x22
	v11 = sp + 16
	Mem0[v11:word64] = x19
	v11 = v11 + 8
	Mem0[v11:word64] = x20
	v14 = sp + 48
	Mem0[v14:word64] = x23
	v14 = v14 + 8
	Mem0[v14:word64] = x24
	x22 = x0
	branch x0 == 0x0000000000000000 l000000000043917C
	// succ:  l00000000004390CC l000000000043917C
l00000000004390CC:
	x0 = Mem0[x0:word64]
	branch x0 == 0x0000000000000000 l0000000000439158
	// succ:  l00000000004390D4 l0000000000439158
l00000000004390D4:
	x19 = 0x00000000004DF000
	x19 = x19 + 0xFFFFFFFFFFFFFC60
	w2 = Mem0[x19 + 80:word32]
	x20 = x22 + 0x0000000000000008
	x21 = x22
	x24 = 0x00000000004DE000
	x23 = 0x0000000000000008
	goto l0000000000439120
	// succ:  l0000000000439120
l00000000004390F4:
	x4 = Mem0[x19 + 72:word64]
	// succ:  l00000000004390F8
l00000000004390F8:
	x1 = Mem0[x21:word64]
	x3 = x23 + (int64) ((int32) w2)
	Mem0[x4 + (int64) ((int32) w2):word64] = x1
	x1 = Mem0[x19 + 72:word64]
	w2 = w2 + 0x00000001
	Mem0[x1 + x3:word64] = 0x0000000000000000
	x21 = x20
	x1 = Mem0[x20:word64]
	x20 = x20 + 8
	Mem0[x19 + 80:word32] = w2
	branch x1 == 0x0000000000000000 l0000000000439158
	// succ:  l0000000000439120 l0000000000439158
l0000000000439120:
	w1 = Mem0[x19 + 84:word32]
	w3 = w1 - 0x00000001
	NZCV = cond(w3 - w2)
	branch Test(GT,NZV) l00000000004390F4
	// succ:  l0000000000439130 l00000000004390F4
l0000000000439130:
	w2 = w1 + 0x00000010
	x0 = Mem0[x19 + 72:word64]
	w1 = w2
	Mem0[x19 + 84:word32] = w2
	call strvec_resize (retsize: 0;)
	w2 = Mem0[x19 + 80:word32]
	Mem0[x19 + 72:word64] = x0
	Mem0[x24 + 1672:word64] = x0
	x4 = x0
	goto l00000000004390F8
	// succ:  l00000000004390F8
l0000000000439158:
	x0 = x22
	v25 = sp + 16
	x19 = Mem0[v25:word64]
	v25 = v25 + 8
	x20 = Mem0[v25:word64]
	v26 = sp + 32
	x21 = Mem0[v26:word64]
	v26 = v26 + 8
	x22 = Mem0[v26:word64]
	v27 = sp + 48
	x23 = Mem0[v27:word64]
	v27 = v27 + 8
	x24 = Mem0[v27:word64]
	x1 = 0x00000000004AC000
	x29 = Mem0[sp:word64]
	sp = sp + 8
	x30 = Mem0[sp:word64]
	sp = sp + 64
	x1 = x1 + 0xFFFFFFFFFFFFF910
	w2 = 0x00000E2A
	// succ:  l0000000000439178_thunk_sh_xfree
l0000000000439178_thunk_sh_xfree:
	call sh_xfree (retsize: 0;)
	return
	// succ:  fn00000000004390B0_exit
l000000000043917C:
	v17 = sp + 16
	x19 = Mem0[v17:word64]
	v17 = v17 + 8
	x20 = Mem0[v17:word64]
	v18 = sp + 32
	x21 = Mem0[v18:word64]
	v18 = v18 + 8
	x22 = Mem0[v18:word64]
	v19 = sp + 48
	x23 = Mem0[v19:word64]
	v19 = v19 + 8
	x24 = Mem0[v19:word64]
	x29 = Mem0[sp:word64]
	sp = sp + 8
	x30 = Mem0[sp:word64]
	sp = sp + 64
	return
	// succ:  fn00000000004390B0_exit
fn00000000004390B0_exit:


// update_export_env_inplace
// Return size: 0
void update_export_env_inplace()
update_export_env_inplace_entry:
	// succ:  l0000000000439190
l0000000000439190:
	sp = fp
	sp = sp + -64
	Mem0[sp:word64] = x29
	sp = sp + 8
	Mem0[sp:word64] = x30
	x29 = x31 + 0x0000000000000000
	v8 = sp + 16
	Mem0[v8:word64] = x19
	v8 = v8 + 8
	Mem0[v8:word64] = x20
	v11 = sp + 32
	Mem0[v11:word64] = x21
	v11 = v11 + 8
	Mem0[v11:word64] = x22
	x19 = x2
	x22 = x0
	branch x2 == 0x0000000000000000 l0000000000439244
	// succ:  l00000000004391AC l0000000000439244
l00000000004391AC:
	v15 = Mem0[x2:byte]
	w0 = (word32) v15
	x3 = 0x0000000000000000
	branch w0 == 0x00000000 l00000000004391D0
	// succ:  l00000000004391B8 l00000000004391D0
l00000000004391B8:
	v17 = Mem0[x2 + 1:byte]
	w0 = (word32) v17
	x3 = 0x0000000000000001
	branch w0 == 0x00000000 l00000000004391D0
	// succ:  l00000000004391C4 l00000000004391D0
l00000000004391C4:
	v18 = Mem0[x2 + 2:byte]
	w0 = (word32) v18
	x3 = 0x0000000000000002
	branch w0 != 0x00000000 l000000000043922C
	// succ:  l00000000004391D0 l000000000043922C
l00000000004391D0:
l000000000043922C:
	x0 = x2
	Mem0[x29 + 48:word64] = x1
	strlen(x0)
	sp = sp + 0xFFFFFFFFFFFFFFF8
	x3 = x0
	x1 = Mem0[x29 + 48:word64]
	goto l00000000004391D0
	// succ:  l00000000004391D0
l0000000000439244:
update_export_env_inplace_exit:


// put_command_name_into_env
// Return size: 0
void put_command_name_into_env()
put_command_name_into_env_entry:
	// succ:  l000000000043926C
l000000000043926C:
	sp = fp
	x2 = x0
	x0 = 0x00000000004AC000
	x0 = x0 + 0xFFFFFFFFFFFFFA38
	w1 = 0x00000002
	// succ:  l000000000043927C_thunk_update_export_env_inplace
l000000000043927C_thunk_update_export_env_inplace:
	call update_export_env_inplace (retsize: 0;)
	return
	// succ:  put_command_name_into_env_exit
put_command_name_into_env_exit:


// new_var_context
// Return size: 0
void new_var_context()
new_var_context_entry:
	// succ:  l0000000000439280
l0000000000439280:
	sp = fp
	sp = sp + -48
	Mem0[sp:word64] = x29
	sp = sp + 8
	Mem0[sp:word64] = x30
	x29 = x31 + 0x0000000000000000
	v8 = sp + 32
	Mem0[v8:word64] = x21
	v8 = v8 + 8
	Mem0[v8:word64] = x22
	x21 = 0x00000000004AC000
	x21 = x21 + 0xFFFFFFFFFFFFF910
	v11 = sp + 16
	Mem0[v11:word64] = x19
	v11 = v11 + 8
	Mem0[v11:word64] = x20
	w22 = w1
	x20 = x0
	x1 = x21
	x0 = 0x0000000000000028
	w2 = 0x00000EDE
	call sh_xmalloc (retsize: 0;)
	x19 = x0
	x0 = x20
	branch x20 == 0x0000000000000000 l00000000004392D8
	// succ:  l00000000004392BC l00000000004392D8
l00000000004392BC:
	strlen(x0)
	sp = sp + 0xFFFFFFFFFFFFFFF8
	x1 = x21
	w2 = 0x00000EDF
	x0 = x0 + 0x0000000000000001
	call sh_xmalloc (retsize: 0;)
	x1 = x20
	strcpy(x0, x1)
	sp = sp + 0xFFFFFFFFFFFFFFF8
	// succ:  l00000000004392D8
l00000000004392D8:
	x1 = 0x00000000004DF000
	x1 = x1 + 0xFFFFFFFFFFFFFC60
	w1 = Mem0[x1:word32]
	Mem0[x19 + 12:word32] = w22
	Mem0[x19:word64] = x0
	Mem0[x19 + 8:word32] = w1
	Mem0[x19 + 24:word64] = 0x0000000000000000
	Mem0[x19 + 16:word64] = 0x0000000000000000
	Mem0[x19 + 32:word64] = 0x0000000000000000
	x0 = x19
	v17 = sp + 32
	x21 = Mem0[v17:word64]
	v17 = v17 + 8
	x22 = Mem0[v17:word64]
	v18 = sp + 16
	x19 = Mem0[v18:word64]
	v18 = v18 + 8
	x20 = Mem0[v18:word64]
	x29 = Mem0[sp:word64]
	sp = sp + 8
	x30 = Mem0[sp:word64]
	sp = sp + 48
	return
	// succ:  new_var_context_exit
new_var_context_exit:


// fn0000000000439310
// Return size: 0
void fn0000000000439310()
fn0000000000439310_entry:
	// succ:  l0000000000439310
l0000000000439310:
	sp = fp
	sp = sp + -48
	Mem0[sp:word64] = x29
	sp = sp + 8
	Mem0[sp:word64] = x30
	x29 = x31 + 0x0000000000000000
	v8 = sp + 16
	Mem0[v8:word64] = x19
	v8 = v8 + 8
	Mem0[v8:word64] = x20
	x19 = 0x00000000004DF000
	v11 = sp + 32
	Mem0[v11:word64] = x21
	v11 = v11 + 8
	Mem0[v11:word64] = x22
	x21 = x19 + 0xFFFFFFFFFFFFFC60
	x20 = Mem0[x21 + 32:word64]
	branch x20 == 0x0000000000000000 l0000000000439370
	// succ:  l0000000000439330 l0000000000439370
l0000000000439330:
	x20 = x19 + 0xFFFFFFFFFFFFFC60
	x0 = Mem0[x20 + 56:word64]
	branch x0 == 0x0000000000000000 l000000000043939C
	// succ:  l000000000043933C l000000000043939C
l000000000043933C:
	x19 = x19 + 0xFFFFFFFFFFFFFC60
	x0 = Mem0[x19 + 64:word64]
	branch x0 == 0x0000000000000000 l0000000000439358
	// succ:  l0000000000439348 l0000000000439358
l0000000000439348:
	v13 = sp + 16
	x19 = Mem0[v13:word64]
	v13 = v13 + 8
	x20 = Mem0[v13:word64]
	v14 = sp + 32
	x21 = Mem0[v14:word64]
	v14 = v14 + 8
	x22 = Mem0[v14:word64]
	x29 = Mem0[sp:word64]
	sp = sp + 8
	x30 = Mem0[sp:word64]
	sp = sp + 48
	return
	// succ:  fn0000000000439310_exit
l0000000000439358:
	call hash_create (retsize: 0;)
	Mem0[x19 + 64:word64] = x0
	v18 = sp + 32
	x21 = Mem0[v18:word64]
	v18 = v18 + 8
	x22 = Mem0[v18:word64]
	v19 = sp + 16
	x19 = Mem0[v19:word64]
	v19 = v19 + 8
	x20 = Mem0[v19:word64]
	x29 = Mem0[sp:word64]
	sp = sp + 8
	x30 = Mem0[sp:word64]
	sp = sp + 48
	return
	// succ:  fn0000000000439310_exit
l0000000000439370:
	w1 = w20
	x0 = x20
	call new_var_context (retsize: 0;)
	x22 = x0
	Mem0[x0 + 8:word32] = w20
	w0 = w20
	Mem0[x21 + 48:word64] = x22
	Mem0[x21 + 32:word64] = x22
	call hash_create (retsize: 0;)
	Mem0[x22 + 32:word64] = x0
	goto l0000000000439330
	// succ:  l0000000000439330
l000000000043939C:
	call hash_create (retsize: 0;)
	Mem0[x20 + 56:word64] = x0
	goto l000000000043933C
	// succ:  l000000000043933C
fn0000000000439310_exit:


// fn00000000004393A8
// Return size: 0
void fn00000000004393A8()
fn00000000004393A8_entry:
	// succ:  l00000000004393A8
l00000000004393A8:
	sp = fp
	sp = sp + -48
	Mem0[sp:word64] = x29
	sp = sp + 8
	Mem0[sp:word64] = x30
	x29 = x31 + 0x0000000000000000
	v8 = sp + 16
	Mem0[v8:word64] = x19
	v8 = v8 + 8
	Mem0[v8:word64] = x20
	Mem0[sp + 32:word64] = x21
	x19 = x0
	x21 = x1
	call fn0000000000436758 (retsize: 0;)
	x20 = x0
	x0 = 0x00000000004DF000
	x0 = x0 + 0xFFFFFFFFFFFFFC60
	x0 = Mem0[x0 + 32:word64]
	branch x0 == 0x0000000000000000 l0000000000439420
	// succ:  l00000000004393D8 l0000000000439420
l00000000004393D8:
	x0 = x19
	strlen(x0)
	sp = sp + 0xFFFFFFFFFFFFFFF8
	x1 = 0x00000000004AC000
	w2 = 0x000007E5
	x1 = x1 + 0xFFFFFFFFFFFFF910
	x0 = x0 + 0x0000000000000001
	call sh_xmalloc (retsize: 0;)
	x1 = x19
	strcpy(x0, x1)
	sp = sp + 0xFFFFFFFFFFFFFFF8
	x1 = x21
	w2 = 0x00000001
	call hash_insert (retsize: 0;)
	Mem0[x0 + 16:word64] = x20
	x21 = Mem0[sp + 32:word64]
	x0 = x20
	v13 = sp + 16
	x19 = Mem0[v13:word64]
	v13 = v13 + 8
	x20 = Mem0[v13:word64]
	x29 = Mem0[sp:word64]
	sp = sp + 8
	x30 = Mem0[sp:word64]
	sp = sp + 48
	return
	// succ:  fn00000000004393A8_exit
l0000000000439420:
	call fn0000000000439310 (retsize: 0;)
	goto l00000000004393D8
	// succ:  l00000000004393D8
fn00000000004393A8_exit:


// fn0000000000439428
// Return size: 0
void fn0000000000439428()
fn0000000000439428_entry:
	// succ:  l0000000000439428
l0000000000439428:
	sp = v3
	sp = sp + -64
	Mem0[sp:word64] = x29
	sp = sp + 8
	Mem0[sp:word64] = x30
	x29 = x31 + 0x0000000000000000
	v7 = sp + 32
	Mem0[v7:word64] = x21
	v7 = v7 + 8
	Mem0[v7:word64] = x22
	v10 = sp + 16
	Mem0[v10:word64] = x19
	v10 = v10 + 8
	Mem0[v10:word64] = x20
	x22 = x0
	x20 = x2
	x21 = x1
	w2 = w3 & 0x00000001
	branch (w3 & 0x00000001) == 0x00000000 l000000000043949C
	// succ:  l000000000043944C l000000000043949C
l000000000043944C:
	x1 = x20
	x0 = x22
	call fn00000000004393A8 (retsize: 0;)
	x1 = x21
	w2 = 0x00000000
	x19 = x0
	call make_variable_value (retsize: 0;)
	w1 = Mem0[x19 + 40:word32]
	Mem0[x19 + 8:word64] = x0
	// succ:  l0000000000439470
l0000000000439470:
	x0 = 0x00000000004DF000
	w0 = Mem0[x0 + 3712:word32]
	branch w0 == 0x00000000 l0000000000439484
	// succ:  l000000000043947C l0000000000439484
l000000000043947C:
	w1 = w1 | 0x00000001
	Mem0[x19 + 40:word32] = w1
	// succ:  l0000000000439484
l0000000000439484:
	branch (w1 & 0x00000001) == 0x00000000 l0000000000439530
	// succ:  l0000000000439488 l0000000000439530
l0000000000439488:
	x0 = 0x00000000004D6000
	w1 = 0x00000001
	x0 = x0 + 0xFFFFFFFFFFFFFA50
	Mem0[x0 + 8:word32] = w1
	goto l0000000000439530
	// succ:  l0000000000439530
l000000000043949C:
	x1 = x20
	Mem0[x29 + 48:word64] = x4
	call hash_search (retsize: 0;)
	x4 = Mem0[x29 + 48:word64]
	branch x0 == 0x0000000000000000 l000000000043944C
	// succ:  l00000000004394B0 l000000000043944C
l00000000004394B0:
	x19 = Mem0[x0 + 16:word64]
	branch x19 == 0x0000000000000000 l000000000043944C
	// succ:  l00000000004394B8 l000000000043944C
l00000000004394B8:
	x20 = Mem0[x19 + 32:word64]
	branch x20 == 0x0000000000000000 l00000000004395C0
	// succ:  l00000000004394C0 l00000000004395C0
l00000000004394C0:
	x0 = Mem0[x19 + 16:word64]
	branch x0 == 0x0000000000000000 l00000000004394E4
	// succ:  l00000000004394C8 l00000000004394E4
l00000000004394C8:
	x1 = 0x00000000004AC000
	x1 = x1 + 0xFFFFFFFFFFFFF910
	w2 = 0x000008A2
	Mem0[x29 + 48:word64] = x4
	call sh_xfree (retsize: 0;)
	x4 = Mem0[x29 + 48:word64]
	Mem0[x19 + 16:word64] = 0x0000000000000000
	// succ:  l00000000004394E4
l00000000004394E4:
	x20 = x21
	branch (w4 & 0x00000001) == 0x00000000 l00000000004395A8
	// succ:  l00000000004394EC l00000000004395A8
l00000000004394EC:
	w0 = Mem0[x19 + 40:word32]
	branch (w0 & 0x00000040) == 0x00000000 l0000000000439564
	// succ:  l00000000004394F4 l0000000000439564
l00000000004394F4:
	branch (w0 & 0x00000004) == 0x00000000 l0000000000439544
	// succ:  l00000000004394F8 l0000000000439544
l00000000004394F8:
	x2 = 0x0000000000000000
	x4 = Mem0[x19 + 32:word64]
	x0 = x19
	x1 = x20
	x3 = x2
	call x4 (retsize: 0;)
	x19 = x0
	// succ:  l0000000000439514
l0000000000439514:
	x31 = x20 - x21
	NZCV = cond(x31)
	branch Test(EQ,Z) l0000000000439530
	// succ:  l000000000043951C l0000000000439530
l000000000043951C:
	x1 = 0x00000000004AC000
	x0 = x20
	x1 = x1 + 0xFFFFFFFFFFFFF910
	w2 = 0x000008AB
	call sh_xfree (retsize: 0;)
	// succ:  l0000000000439530
l0000000000439530:
	x0 = x19
	v20 = sp + 32
	x21 = Mem0[v20:word64]
	v20 = v20 + 8
	x22 = Mem0[v20:word64]
	v21 = sp + 16
	x19 = Mem0[v21:word64]
	v21 = v21 + 8
	x20 = Mem0[v21:word64]
	x29 = Mem0[sp:word64]
	sp = sp + 8
	x30 = Mem0[sp:word64]
	sp = sp + 64
	return
	// succ:  fn0000000000439428_exit
l0000000000439544:
	x4 = Mem0[x19 + 32:word64]
	x0 = x19
	x1 = x20
	x2 = 0xFFFFFFFFFFFFFFFF
	x3 = 0x0000000000000000
	call x4 (retsize: 0;)
	x19 = x0
	goto l0000000000439514
	// succ:  l0000000000439514
l0000000000439564:
	x1 = 0x00000000004AC000
	x1 = x1 + 0xFFFFFFFFFFFFF910
	w2 = 0x000008A5
	x0 = 0x0000000000000002
	x22 = Mem0[x19 + 32:word64]
	call sh_xmalloc (retsize: 0;)
	x3 = x0
	x0 = 0x00000000004AC000
	x0 = x0 + 0xFFFFFFFFFFFFF988
	v27 = Mem0[x0:word16]
	w1 = (word32) v27
	x2 = 0xFFFFFFFFFFFFFFFF
	x0 = x19
	Mem0[x3:word16] = (word16) w1
	x1 = x20
	call x22 (retsize: 0;)
	x19 = x0
	goto l0000000000439514
	// succ:  l0000000000439514
l00000000004395A8:
	x0 = x19
	x1 = x21
	w2 = w4
	call make_variable_value (retsize: 0;)
	x20 = x0
	goto l00000000004394EC
	// succ:  l00000000004394EC
l00000000004395C0:
	w0 = Mem0[x19 + 40:word32]
	w1 = 0x00004002
	NZ = cond(w0 & w1)
	C = false
	V = false
	branch Test(EQ,Z) l00000000004395E0
	// succ:  l00000000004395D0 l00000000004395E0
l00000000004395D0:
	branch (w0 & 0x00000002) == 0x00000000 l0000000000439530
	// succ:  l00000000004395D4 l0000000000439530
l00000000004395D4:
	x0 = x22
	call err_readonly (retsize: 0;)
	goto l0000000000439530
	// succ:  l0000000000439530
l00000000004395E0:
	w0 = w0 & 0xFFFFEFFF
	Mem0[x19 + 40:word32] = w0
	x1 = x21
	x0 = x19
	w2 = w4
	call make_variable_value (retsize: 0;)
	x21 = x0
	x0 = Mem0[x19 + 16:word64]
	branch x0 == 0x0000000000000000 l0000000000439618
	// succ:  l0000000000439604 l0000000000439618
l0000000000439604:
	x1 = 0x00000000004AC000
	x1 = x1 + 0xFFFFFFFFFFFFF910
	w2 = 0x000008BD
	call sh_xfree (retsize: 0;)
	Mem0[x19 + 16:word64] = x20
	// succ:  l0000000000439618
l0000000000439618:
	w1 = Mem0[x19 + 40:word32]
	branch (w1 & 0x00000004) == 0x00000000 l0000000000439648
	// succ:  l0000000000439620 l0000000000439648
l0000000000439620:
	branch (w1 & 0x00000040) == 0x00000000 l0000000000439674
	// succ:  l0000000000439624 l0000000000439674
l0000000000439624:
	x0 = Mem0[x19 + 8:word64]
	branch x0 == 0x0000000000000000 l0000000000439640
	// succ:  l000000000043962C l0000000000439640
l000000000043962C:
	x1 = 0x00000000004AC000
	x1 = x1 + 0xFFFFFFFFFFFFF910
	w2 = 0x000008D1
	call sh_xfree (retsize: 0;)
	w1 = Mem0[x19 + 40:word32]
	// succ:  l0000000000439640
l0000000000439640:
	Mem0[x19 + 8:word64] = x21
	goto l0000000000439470
	// succ:  l0000000000439470
l0000000000439648:
	x0 = Mem0[x19 + 8:word64]
	x1 = 0x0000000000000000
	x2 = x21
	call array_insert (retsize: 0;)
	x1 = 0x00000000004AC000
	x1 = x1 + 0xFFFFFFFFFFFFF910
	x0 = x21
	w2 = 0x000008C7
	call sh_xfree (retsize: 0;)
	w1 = Mem0[x19 + 40:word32]
	goto l0000000000439470
	// succ:  l0000000000439470
l0000000000439674:
	x20 = 0x00000000004AC000
	x20 = x20 + 0xFFFFFFFFFFFFF910
	x1 = x20
	w2 = 0x000008CB
	x0 = 0x0000000000000002
	x22 = Mem0[x19 + 8:word64]
	call sh_xmalloc (retsize: 0;)
	x1 = x0
	x0 = 0x00000000004AC000
	x0 = x0 + 0xFFFFFFFFFFFFF988
	v31 = Mem0[x0:word16]
	w3 = (word32) v31
	x2 = x21
	Mem0[x1:word16] = (word16) w3
	x0 = x22
	call assoc_insert (retsize: 0;)
	x1 = x20
	x0 = x21
	w2 = 0x000008CC
	call sh_xfree (retsize: 0;)
	w1 = Mem0[x19 + 40:word32]
	goto l0000000000439470
	// succ:  l0000000000439470
fn0000000000439428_exit:


// make_local_variable
// Return size: 0
void make_local_variable()
make_local_variable_entry:
	// succ:  l0000000000439920
l0000000000439920:
	sp = fp
	sp = sp + -80
	Mem0[sp:word64] = x29
	sp = sp + 8
	Mem0[sp:word64] = x30
	x29 = x31 + 0x0000000000000000
	v8 = sp + 16
	Mem0[v8:word64] = x19
	v8 = v8 + 8
	Mem0[v8:word64] = x20
	v11 = sp + 48
	Mem0[v11:word64] = x23
	v11 = v11 + 8
	Mem0[v11:word64] = x24
	v14 = sp + 32
	Mem0[v14:word64] = x21
	v14 = v14 + 8
	Mem0[v14:word64] = x22
	Mem0[sp + 64:word64] = x25
	x23 = x0
	call find_variable (retsize: 0;)
	x20 = x0
	branch x0 == 0x0000000000000000 l0000000000439AE8
	// succ:  l0000000000439948 l0000000000439AE8
l0000000000439948:
	w2 = Mem0[x0 + 40:word32]
	x21 = 0x00000000004DF000
	branch (w2 & 0x00000020) == 0x00000000 l0000000000439968
	// succ:  l0000000000439954 l0000000000439968
l0000000000439954:
	x4 = x21 + 0xFFFFFFFFFFFFFC60
	w3 = Mem0[x20 + 44:word32]
	w4 = Mem0[x4:word32]
	NZCV = cond(w3 - w4)
	branch Test(EQ,Z) l0000000000439AB4
	// succ:  l0000000000439968 l0000000000439AB4
l0000000000439968:
	w24 = w2 & 0x00100000
	branch (w2 & 0x00000000) == 0x00000000 l00000000004399D4
	// succ:  l0000000000439970 l00000000004399D4
l0000000000439970:
	x2 = x21 + 0xFFFFFFFFFFFFFC60
	x19 = Mem0[x2 + 32:word64]
	branch x19 == 0x0000000000000000 l000000000043999C
	// succ:  l000000000043997C l000000000043999C
l000000000043997C:
	w3 = Mem0[x2:word32]
	// succ:  l0000000000439980
l0000000000439980:
	w2 = Mem0[x19 + 12:word32]
	branch (w2 & 0x00000004) == 0x00000000 l0000000000439994
	// succ:  l0000000000439988 l0000000000439994
l0000000000439988:
	w2 = Mem0[x19 + 8:word32]
	NZCV = cond(w2 - w3)
	branch Test(EQ,Z) l00000000004399E0
	// succ:  l0000000000439994 l00000000004399E0
l0000000000439994:
	x19 = Mem0[x19 + 24:word64]
	branch x19 != 0x0000000000000000 l0000000000439980
	// succ:  l000000000043999C l0000000000439980
l000000000043999C:
	x1 = 0x00000000004AC000
	x1 = x1 + 0xFFFFFFFFFFFFFA40
	w2 = 0x00000005
	x0 = 0x0000000000000000
	dcgettext(x0, x1, x2)
	sp = sp + 0xFFFFFFFFFFFFFFF8
	call internal_error (retsize: 0;)
	x20 = 0x0000000000000000
	// succ:  l00000000004399B8
l00000000004399B8:
	x0 = x20
	v26 = sp + 32
	x21 = Mem0[v26:word64]
	v26 = v26 + 8
	x22 = Mem0[v26:word64]
	v27 = sp + 16
	x19 = Mem0[v27:word64]
	v27 = v27 + 8
	x20 = Mem0[v27:word64]
	v28 = sp + 48
	x23 = Mem0[v28:word64]
	v28 = v28 + 8
	x24 = Mem0[v28:word64]
	x25 = Mem0[sp + 64:word64]
	x29 = Mem0[sp:word64]
	sp = sp + 8
	x30 = Mem0[sp:word64]
	sp = sp + 80
	return
	// succ:  make_local_variable_exit
l00000000004399D4:
	x25 = Mem0[x20 + 8:word64]
	w24 = 0x00000001
	goto l0000000000439970
	// succ:  l0000000000439970
l00000000004399E0:
	x0 = Mem0[x19 + 32:word64]
	branch x0 == 0x0000000000000000 l0000000000439AC0
	// succ:  l00000000004399E8 l0000000000439AC0
l00000000004399E8:
	branch x20 == 0x0000000000000000 l0000000000439AD0
	// succ:  l00000000004399EC l0000000000439AD0
l00000000004399EC:
	w2 = Mem0[x20 + 40:word32]
	branch (w2 & 0x00004000) == 0x00000000 l0000000000439A88
	// succ:  l00000000004399F4 l0000000000439A88
l00000000004399F4:
	x0 = Mem0[x20 + 40:word64]
	x3 = 0x0000000000000000
	x3 = DPB(x3, 0x0002, 0)
	x0 = x0 & x3
	x31 = x0 - 0x0000000000000002
	NZCV = cond(x31)
	branch Test(EQ,Z) l0000000000439A88
	// succ:  l0000000000439A0C l0000000000439A88
l0000000000439A0C:
	x1 = Mem0[x19 + 32:word64]
	x0 = x23
	call fn00000000004393A8 (retsize: 0;)
	x22 = x0
	branch w24 != 0x00000000 l0000000000439AF4
	// succ:  l0000000000439A20 l0000000000439AF4
l0000000000439A20:
	w0 = Mem0[x20 + 40:word32]
	w0 = w0 & 0x00000001
	Mem0[x22 + 40:word32] = w0
	// succ:  l0000000000439A2C
l0000000000439A2C:
	w1 = Mem0[x19 + 12:word32]
	x21 = x21 + 0xFFFFFFFFFFFFFC60
	w1 = w1 | 0x00000001
	w2 = Mem0[x21:word32]
	Mem0[x19 + 12:word32] = w1
	w0 = w0 | 0x00000020
	Mem0[x22 + 44:word32] = w2
	Mem0[x22 + 40:word32] = w0
	v32 = Mem0[x23:byte]
	w0 = (word32) v32
	x20 = x22
	w31 = w0 - 0x00000049
	NZCV = cond(w31)
	branch Test(NE,Z) l00000000004399B8
	// succ:  l0000000000439A5C l00000000004399B8
l0000000000439A5C:
	v34 = Mem0[x23 + 1:byte]
	w0 = (word32) v34
	w31 = w0 - 0x00000046
	NZCV = cond(w31)
	branch Test(NE,Z) l00000000004399B8
	// succ:  l0000000000439A68 l00000000004399B8
l0000000000439A68:
	v35 = Mem0[x23 + 2:byte]
	w0 = (word32) v35
	w31 = w0 - 0x00000053
	NZCV = cond(w31)
	branch Test(NE,Z) l00000000004399B8
	// succ:  l0000000000439A74 l00000000004399B8
l0000000000439A74:
	v36 = Mem0[x23 + 3:byte]
	w0 = (word32) v36
	branch w0 != 0x00000000 l00000000004399B8
	// succ:  l0000000000439A7C l00000000004399B8
l0000000000439A7C:
	x0 = x22
	call setifs (retsize: 0;)
	goto l00000000004399B8
	// succ:  l00000000004399B8
l0000000000439A88:
	x20 = 0x0000000000000000
	branch (w2 & 0x00000002) == 0x00000000 l00000000004399B8
	// succ:  l0000000000439A90 l00000000004399B8
l0000000000439A90:
	x0 = x23
	call sh_readonly (retsize: 0;)
	x0 = x20
	v37 = sp + 32
	x21 = Mem0[v37:word64]
	v37 = v37 + 8
	x22 = Mem0[v37:word64]
	v38 = sp + 16
	x19 = Mem0[v38:word64]
	v38 = v38 + 8
	x20 = Mem0[v38:word64]
	v39 = sp + 48
	x23 = Mem0[v39:word64]
	v39 = v39 + 8
	x24 = Mem0[v39:word64]
	x25 = Mem0[sp + 64:word64]
	x29 = Mem0[sp:word64]
	sp = sp + 8
	x30 = Mem0[sp:word64]
	sp = sp + 80
	return
	// succ:  make_local_variable_exit
l0000000000439AB4:
	w2 = w2 & 0xFFFFEFFF
	Mem0[x20 + 40:word32] = w2
	goto l00000000004399B8
	// succ:  l00000000004399B8
l0000000000439AC0:
	w0 = 0x00000004
	call hash_create (retsize: 0;)
	Mem0[x19 + 32:word64] = x0
	branch x20 != 0x0000000000000000 l00000000004399EC
	// succ:  l0000000000439AD0 l00000000004399EC
l0000000000439AD0:
	x1 = Mem0[x19 + 32:word64]
	x0 = x23
	call fn00000000004393A8 (retsize: 0;)
	x22 = x0
	w0 = Mem0[x0 + 40:word32]
	goto l0000000000439A2C
	// succ:  l0000000000439A2C
l0000000000439AE8:
	w24 = w0
	x21 = 0x00000000004DF000
	goto l0000000000439970
	// succ:  l0000000000439970
l0000000000439AF4:
	x0 = x25
	strlen(x0)
	sp = sp + 0xFFFFFFFFFFFFFFF8
	x1 = 0x00000000004AC000
	w2 = 0x000007AB
	x1 = x1 + 0xFFFFFFFFFFFFF910
	x0 = x0 + 0x0000000000000001
	call sh_xmalloc (retsize: 0;)
	x1 = x25
	strcpy(x0, x1)
	sp = sp + 0xFFFFFFFFFFFFFFF8
	Mem0[x22 + 8:word64] = x0
	goto l0000000000439A20
	// succ:  l0000000000439A20
make_local_variable_exit:


// make_local_array_variable
// Return size: 0
void make_local_array_variable()
make_local_array_variable_entry:
	// succ:  l0000000000439B20
l0000000000439B20:
	sp = fp
	sp = sp + -32
	Mem0[sp:word64] = x29
	sp = sp + 8
	Mem0[sp:word64] = x30
	x29 = x31 + 0x0000000000000000
	v8 = sp + 16
	Mem0[v8:word64] = x19
	v8 = v8 + 8
	Mem0[v8:word64] = x20
	call make_local_variable (retsize: 0;)
	x19 = x0
	branch x0 == 0x0000000000000000 l0000000000439B64
	// succ:  l0000000000439B38 l0000000000439B64
l0000000000439B38:
	w0 = Mem0[x0 + 40:word32]
	branch (w0 & 0x00000004) == 0x00000000 l0000000000439B64
	// succ:  l0000000000439B40 l0000000000439B64
l0000000000439B40:
	call array_create (retsize: 0;)
	x20 = x0
	w1 = Mem0[x19 + 40:word32]
	x0 = Mem0[x19 + 8:word64]
	call fn0000000000437124 (retsize: 0;)
	w1 = Mem0[x19 + 40:word32]
	Mem0[x19 + 8:word64] = x20
	w1 = w1 | 0x00000004
	Mem0[x19 + 40:word32] = w1
	// succ:  l0000000000439B64
l0000000000439B64:
	x0 = x19
	v12 = sp + 16
	x19 = Mem0[v12:word64]
	v12 = v12 + 8
	x20 = Mem0[v12:word64]
	x29 = Mem0[sp:word64]
	sp = sp + 8
	x30 = Mem0[sp:word64]
	sp = sp + 32
	return
	// succ:  make_local_array_variable_exit
make_local_array_variable_exit:


// make_local_assoc_variable
// Return size: 0
void make_local_assoc_variable()
make_local_assoc_variable_entry:
	// succ:  l0000000000439B74
l0000000000439B74:
	sp = fp
	sp = sp + -32
	Mem0[sp:word64] = x29
	sp = sp + 8
	Mem0[sp:word64] = x30
	x29 = x31 + 0x0000000000000000
	v8 = sp + 16
	Mem0[v8:word64] = x19
	v8 = v8 + 8
	Mem0[v8:word64] = x20
	call make_local_variable (retsize: 0;)
	x19 = x0
	branch x0 == 0x0000000000000000 l0000000000439BB8
	// succ:  l0000000000439B8C l0000000000439BB8
l0000000000439B8C:
	w1 = Mem0[x0 + 40:word32]
	w20 = w1 & 0x00000040
	branch (w1 & 0x00000040) == 0x00000000 l0000000000439BB8
	// succ:  l0000000000439B98 l0000000000439BB8
l0000000000439B98:
	x0 = Mem0[x19 + 8:word64]
	call fn0000000000437124 (retsize: 0;)
	w0 = w20
	call hash_create (retsize: 0;)
	w1 = Mem0[x19 + 40:word32]
	Mem0[x19 + 8:word64] = x0
	w1 = w1 | 0x00000040
	Mem0[x19 + 40:word32] = w1
	// succ:  l0000000000439BB8
l0000000000439BB8:
	x0 = x19
	v13 = sp + 16
	x19 = Mem0[v13:word64]
	v13 = v13 + 8
	x20 = Mem0[v13:word64]
	x29 = Mem0[sp:word64]
	sp = sp + 8
	x30 = Mem0[sp:word64]
	sp = sp + 32
	return
	// succ:  make_local_assoc_variable_exit
make_local_assoc_variable_exit:


// make_new_array_variable
// Return size: 0
void make_new_array_variable()
make_new_array_variable_entry:
	// succ:  l0000000000439BC8
l0000000000439BC8:
	sp = fp
	sp = sp + -32
	Mem0[sp:word64] = x29
	sp = sp + 8
	Mem0[sp:word64] = x30
	x29 = x31 + 0x0000000000000000
	x1 = 0x00000000004DF000
	x1 = x1 + 0xFFFFFFFFFFFFFC60
	x1 = Mem0[x1 + 48:word64]
	Mem0[sp + 16:word64] = x19
	x1 = Mem0[x1 + 32:word64]
	call fn00000000004393A8 (retsize: 0;)
	x19 = x0
	call array_create (retsize: 0;)
	w1 = Mem0[x19 + 40:word32]
	Mem0[x19 + 8:word64] = x0
	w1 = w1 | 0x00000004
	Mem0[x19 + 40:word32] = w1
	x0 = x19
	x19 = Mem0[sp + 16:word64]
	x29 = Mem0[sp:word64]
	sp = sp + 8
	x30 = Mem0[sp:word64]
	sp = sp + 32
	return
	// succ:  make_new_array_variable_exit
make_new_array_variable_exit:


// fn0000000000439C10
// Return size: 0
void fn0000000000439C10()
fn0000000000439C10_entry:
	// succ:  l0000000000439C10
l0000000000439C10:
	sp = fp
	sp = sp + -48
	Mem0[sp:word64] = x29
	sp = sp + 8
	Mem0[sp:word64] = x30
	x29 = x31 + 0x0000000000000000
	v8 = sp + 16
	Mem0[v8:word64] = x19
	v8 = v8 + 8
	Mem0[v8:word64] = x20
	v11 = sp + 32
	Mem0[v11:word64] = x21
	v11 = v11 + 8
	Mem0[v11:word64] = x22
	x20 = x0
	x22 = x1
	x21 = x2
	w19 = w3
	call find_variable (retsize: 0;)
	branch x0 == 0x0000000000000000 l0000000000439C48
	// succ:  l0000000000439C38 l0000000000439C48
l0000000000439C38:
	v17 = sp + 16
	x19 = Mem0[v17:word64]
	v17 = v17 + 8
	x20 = Mem0[v17:word64]
	v18 = sp + 32
	x21 = Mem0[v18:word64]
	v18 = v18 + 8
	x22 = Mem0[v18:word64]
	x29 = Mem0[sp:word64]
	sp = sp + 8
	x30 = Mem0[sp:word64]
	sp = sp + 48
	return
	// succ:  fn0000000000439C10_exit
l0000000000439C48:
	x0 = x20
	call make_new_array_variable (retsize: 0;)
	Mem0[x0 + 24:word64] = x22
	Mem0[x0 + 32:word64] = x21
	branch w19 == 0x00000000 l0000000000439C38
	// succ:  l0000000000439C5C l0000000000439C38
l0000000000439C5C:
	w1 = Mem0[x0 + 40:word32]
	w19 = w1 | w19
	Mem0[x0 + 40:word32] = w19
	goto l0000000000439C38
	// succ:  l0000000000439C38
fn0000000000439C10_exit:


// make_new_assoc_variable
// Return size: 0
void make_new_assoc_variable()
make_new_assoc_variable_entry:
	// succ:  l0000000000439C6C
l0000000000439C6C:
	sp = fp
	sp = sp + -32
	Mem0[sp:word64] = x29
	sp = sp + 8
	Mem0[sp:word64] = x30
	x29 = x31 + 0x0000000000000000
	x1 = 0x00000000004DF000
	x1 = x1 + 0xFFFFFFFFFFFFFC60
	x1 = Mem0[x1 + 48:word64]
	Mem0[sp + 16:word64] = x19
	x1 = Mem0[x1 + 32:word64]
	call fn00000000004393A8 (retsize: 0;)
	x19 = x0
	w0 = 0x00000000
	call hash_create (retsize: 0;)
	w1 = Mem0[x19 + 40:word32]
	Mem0[x19 + 8:word64] = x0
	w1 = w1 | 0x00000040
	Mem0[x19 + 40:word32] = w1
	x0 = x19
	x19 = Mem0[sp + 16:word64]
	x29 = Mem0[sp:word64]
	sp = sp + 8
	x30 = Mem0[sp:word64]
	sp = sp + 32
	return
	// succ:  make_new_assoc_variable_exit
make_new_assoc_variable_exit:


// set_if_not
// Return size: 0
void set_if_not()
set_if_not_entry:
	// succ:  l0000000000439CB8
l0000000000439CB8:
	sp = fp
	sp = sp + -48
	Mem0[sp:word64] = x29
	sp = sp + 8
	Mem0[sp:word64] = x30
	x29 = x31 + 0x0000000000000000
	v8 = sp + 16
	Mem0[v8:word64] = x19
	v8 = v8 + 8
	Mem0[v8:word64] = x20
	x20 = 0x00000000004DF000
	x2 = x20 + 0xFFFFFFFFFFFFFC60
	x2 = Mem0[x2 + 32:word64]
	x19 = x0
	branch x2 == 0x0000000000000000 l0000000000439D1C
	// succ:  l0000000000439CD8 l0000000000439D1C
l0000000000439CD8:
	x0 = x19
	Mem0[x29 + 32:word64] = x1
	call find_variable (retsize: 0;)
	x4 = x0
	x1 = Mem0[x29 + 32:word64]
	branch x0 == 0x0000000000000000 l0000000000439CFC
	// succ:  l0000000000439CF0 l0000000000439CFC
l0000000000439CF0:
	v13 = sp + 16
	x19 = Mem0[v13:word64]
	v13 = v13 + 8
	x20 = Mem0[v13:word64]
	x29 = Mem0[sp:word64]
	sp = sp + 8
	x30 = Mem0[sp:word64]
	sp = sp + 48
	return
	// succ:  set_if_not_exit
l0000000000439CFC:
	x20 = x20 + 0xFFFFFFFFFFFFFC60
	x2 = Mem0[x20 + 48:word64]
	x0 = x19
	x2 = Mem0[x2 + 32:word64]
	v14 = sp + 16
	x19 = Mem0[v14:word64]
	v14 = v14 + 8
	x20 = Mem0[v14:word64]
	x29 = Mem0[sp:word64]
	sp = sp + 8
	x30 = Mem0[sp:word64]
	sp = sp + 48
	w3 = 0x00000001
	// succ:  l0000000000439D18_thunk_fn0000000000439428
l0000000000439D18_thunk_fn0000000000439428:
	call fn0000000000439428 (retsize: 0;)
	return
	// succ:  set_if_not_exit
l0000000000439D1C:
	Mem0[x29 + 32:word64] = x1
	call fn0000000000439310 (retsize: 0;)
	x1 = Mem0[x29 + 32:word64]
	goto l0000000000439CD8
	// succ:  l0000000000439CD8
set_if_not_exit:


// bind_variable
// Return size: 0
void bind_variable()
bind_variable_entry:
	// succ:  l0000000000439D2C
l0000000000439D2C:
	sp = fp
	sp = sp + -64
	Mem0[sp:word64] = x29
	sp = sp + 8
	Mem0[sp:word64] = x30
	x29 = x31 + 0x0000000000000000
	v8 = sp + 32
	Mem0[v8:word64] = x21
	v8 = v8 + 8
	Mem0[v8:word64] = x22
	x21 = 0x00000000004DF000
	x3 = x21 + 0xFFFFFFFFFFFFFC60
	x3 = Mem0[x3 + 32:word64]
	v12 = sp + 16
	Mem0[v12:word64] = x19
	v12 = v12 + 8
	Mem0[v12:word64] = x20
	v15 = sp + 48
	Mem0[v15:word64] = x23
	v15 = v15 + 8
	Mem0[v15:word64] = x24
	x20 = x0
	x22 = x1
	w23 = w2
	branch x3 == 0x0000000000000000 l0000000000439E74
	// succ:  l0000000000439D5C l0000000000439E74
l0000000000439D5C:
	x0 = x21 + 0xFFFFFFFFFFFFFC60
	x1 = Mem0[x0 + 40:word64]
	branch x1 == 0x0000000000000000 l0000000000439DDC
	// succ:  l0000000000439D68 l0000000000439DDC
l0000000000439D68:
	x0 = x20
	w2 = 0x00000000
	call hash_search (retsize: 0;)
	branch x0 == 0x0000000000000000 l0000000000439DDC
	// succ:  l0000000000439D78 l0000000000439DDC
l0000000000439D78:
	x19 = Mem0[x0 + 16:word64]
	branch x19 == 0x0000000000000000 l0000000000439DDC
	// succ:  l0000000000439D80 l0000000000439DDC
l0000000000439D80:
	x0 = Mem0[x19 + 8:word64]
	x24 = 0x00000000004AC000
	branch x0 == 0x0000000000000000 l0000000000439D98
	// succ:  l0000000000439D8C l0000000000439D98
l0000000000439D8C:
	x1 = x24 + 0xFFFFFFFFFFFFF910
	w2 = 0x00000CBB
	call sh_xfree (retsize: 0;)
	// succ:  l0000000000439D98
l0000000000439D98:
	x0 = x22
	strlen(x0)
	sp = sp + 0xFFFFFFFFFFFFFFF8
	x24 = x24 + 0xFFFFFFFFFFFFF910
	w2 = 0x00000CBC
	x1 = x24
	x0 = x0 + 0x0000000000000001
	call sh_xmalloc (retsize: 0;)
	x1 = x22
	strcpy(x0, x1)
	sp = sp + 0xFFFFFFFFFFFFFFF8
	x1 = Mem0[x19 + 16:word64]
	Mem0[x19 + 8:word64] = x0
	branch x1 == 0x0000000000000000 l0000000000439DDC
	// succ:  l0000000000439DC8 l0000000000439DDC
l0000000000439DC8:
	x0 = x1
	w2 = 0x00000CBD
	x1 = x24
	call sh_xfree (retsize: 0;)
	Mem0[x19 + 16:word64] = 0x0000000000000000
	// succ:  l0000000000439DDC
l0000000000439DDC:
	x0 = x21 + 0xFFFFFFFFFFFFFC60
	x19 = Mem0[x0 + 32:word64]
	branch x19 != 0x0000000000000000 l0000000000439DF4
	// succ:  l0000000000439DE8 l0000000000439DF4
l0000000000439DE8:
	goto l0000000000439E44
	// succ:  l0000000000439E44
l0000000000439DEC:
	x19 = Mem0[x19 + 24:word64]
	branch x19 == 0x0000000000000000 l0000000000439E44
	// succ:  l0000000000439DF4 l0000000000439E44
l0000000000439DF4:
	w3 = Mem0[x19 + 12:word32]
	w31 = w3 & 0x0000000C
	NZ = cond(w31)
	C = false
	V = false
	branch Test(EQ,Z) l0000000000439DEC
	// succ:  l0000000000439E00 l0000000000439DEC
l0000000000439E00:
	x1 = Mem0[x19 + 32:word64]
	x0 = x20
	w2 = 0x00000000
	call hash_search (retsize: 0;)
	branch x0 == 0x0000000000000000 l0000000000439DEC
	// succ:  l0000000000439E14 l0000000000439DEC
l0000000000439E14:
	x3 = Mem0[x0 + 16:word64]
	branch x3 == 0x0000000000000000 l0000000000439DEC
	// succ:  l0000000000439E1C l0000000000439DEC
l0000000000439E1C:
	x2 = Mem0[x19 + 32:word64]
	x0 = x20
	x1 = x22
	w4 = w23
	v28 = sp + 16
	x19 = Mem0[v28:word64]
	v28 = v28 + 8
	x20 = Mem0[v28:word64]
	v29 = sp + 32
	x21 = Mem0[v29:word64]
	v29 = v29 + 8
	x22 = Mem0[v29:word64]
	v30 = sp + 48
	x23 = Mem0[v30:word64]
	v30 = v30 + 8
	x24 = Mem0[v30:word64]
	x29 = Mem0[sp:word64]
	sp = sp + 8
	x30 = Mem0[sp:word64]
	sp = sp + 64
	w3 = 0x00000000
	// succ:  l0000000000439E40_thunk_fn0000000000439428
l0000000000439E40_thunk_fn0000000000439428:
	call fn0000000000439428 (retsize: 0;)
	return
	// succ:  bind_variable_exit
l0000000000439E44:
	x21 = x21 + 0xFFFFFFFFFFFFFC60
	x1 = Mem0[x21 + 48:word64]
	x0 = x20
	x2 = Mem0[x1 + 32:word64]
	w4 = w23
	x1 = x22
	v31 = sp + 16
	x19 = Mem0[v31:word64]
	v31 = v31 + 8
	x20 = Mem0[v31:word64]
	v32 = sp + 32
	x21 = Mem0[v32:word64]
	v32 = v32 + 8
	x22 = Mem0[v32:word64]
	v33 = sp + 48
	x23 = Mem0[v33:word64]
	v33 = v33 + 8
	x24 = Mem0[v33:word64]
	x29 = Mem0[sp:word64]
	sp = sp + 8
	x30 = Mem0[sp:word64]
	sp = sp + 64
	w3 = 0x00000000
	// succ:  l0000000000439E70_thunk_fn0000000000439428
l0000000000439E70_thunk_fn0000000000439428:
	call fn0000000000439428 (retsize: 0;)
	return
	// succ:  bind_variable_exit
l0000000000439E74:
	call fn0000000000439310 (retsize: 0;)
	goto l0000000000439D5C
	// succ:  l0000000000439D5C
bind_variable_exit:


// adjust_shell_level
// Return size: 0
void adjust_shell_level()
adjust_shell_level_entry:
	// succ:  l0000000000439E7C
l0000000000439E7C:
	sp = fp
	sp = sp + -48
	Mem0[sp:word64] = x29
	sp = sp + 8
	Mem0[sp:word64] = x30
	x29 = x31 + 0x0000000000000000
	v8 = sp + 16
	Mem0[v8:word64] = x19
	v8 = v8 + 8
	Mem0[v8:word64] = x20
	x19 = 0x00000000004AC000
	w20 = w0
	x0 = x19 + 0xFFFFFFFFFFFFFA80
	call get_string_value (retsize: 0;)
	branch x0 == 0x0000000000000000 l0000000000439EA4
	// succ:  l0000000000439E9C l0000000000439EA4
l0000000000439E9C:
	v13 = Mem0[x0:byte]
	w1 = (word32) v13
	branch w1 != 0x00000000 l0000000000439FC0
	// succ:  l0000000000439EA4 l0000000000439FC0
l0000000000439EA4:
	Mem0[x29 + 32:word64] = 0x0000000000000000
	w2 = 0x00000000
	// succ:  l0000000000439EAC
l0000000000439EAC:
	w2 = w2 + w20
	x20 = 0x00000000004DF000
	x20 = x20 + 0xFFFFFFFFFFFFFC60
	Mem0[x20 + 88:word32] = w2
	branch (w2 & 0x00000000) == 0x00000000 l0000000000439FA8
	// succ:  l0000000000439EC0 l0000000000439FA8
l0000000000439EC0:
	w31 = w2 - 0x000003E8
	NZCV = cond(w31)
	branch Test(GT,NZV) l0000000000439FD4
	// succ:  l0000000000439EC8 l0000000000439FD4
l0000000000439EC8:
	w31 = w2 - 0x00000009
	NZCV = cond(w31)
	branch Test(LE,ZCV) l000000000043A000
	// succ:  l0000000000439ED0 l000000000043A000
l0000000000439ED0:
	w31 = w2 - 0x00000063
	NZCV = cond(w31)
	branch Test(LE,ZCV) l0000000000439F6C
	// succ:  l0000000000439ED8 l0000000000439F6C
l0000000000439ED8:
	w31 = w2 - 0x000003E8
	NZCV = cond(w31)
	x1 = x29 + 0x0000000000000028
	branch Test(EQ,Z) l0000000000439F38
	// succ:  l0000000000439EE4 l0000000000439F38
l0000000000439EE4:
	w3 = 0xFFFF851F
	w3 = DPB(w3, 0x000051EB, 16)
	x3 = (int64) (w2 *s w3)
l0000000000439F38:
	x0 = x19 + 0xFFFFFFFFFFFFFA80
	w2 = 0x00000000
	call bind_variable (retsize: 0;)
	w1 = Mem0[x0 + 40:word32]
	v23 = sp + 16
	x19 = Mem0[v23:word64]
	v23 = v23 + 8
	x20 = Mem0[v23:word64]
	w1 = w1 | 0x00000001
	Mem0[x0 + 40:word32] = w1
	x0 = 0x00000000004D6000
	w1 = 0x00000001
	x0 = x0 + 0xFFFFFFFFFFFFFA50
	Mem0[x0 + 8:word32] = w1
	x29 = Mem0[sp:word64]
	sp = sp + 8
	x30 = Mem0[sp:word64]
	sp = sp + 48
	return
	// succ:  adjust_shell_level_exit
l0000000000439F6C:
	w0 = 0x00006667
	w0 = DPB(w0, 0x00006666, 16)
	x0 = (int64) (w2 *s w0)
l0000000000439FA8:
	Mem0[x20 + 88:word32] = 0x00000000
	w2 = 0x00000030
	// succ:  l0000000000439FB0
l0000000000439FB0:
	x1 = x29 + 0x0000000000000028
	Mem0[x29 + 40:byte] = (byte) w2
	Mem0[x1 + 1:byte] = 0x00
	goto l0000000000439F38
	// succ:  l0000000000439F38
l0000000000439FC0:
	x1 = x29 + 0x0000000000000020
	call legal_number (retsize: 0;)
	branch w0 == 0x00000000 l0000000000439EA4
	// succ:  l0000000000439FCC l0000000000439EA4
l0000000000439FCC:
	w2 = Mem0[x29 + 32:word32]
	goto l0000000000439EAC
	// succ:  l0000000000439EAC
l0000000000439FD4:
	x1 = 0x00000000004AC000
	w2 = 0x00000005
	x1 = x1 + 0xFFFFFFFFFFFFFA88
	x0 = 0x0000000000000000
	dcgettext(x0, x1, x2)
	sp = sp + 0xFFFFFFFFFFFFFFF8
	w1 = Mem0[x20 + 88:word32]
	call internal_warning (retsize: 0;)
	w0 = 0x00000001
	Mem0[x20 + 88:word32] = w0
	w2 = 0x00000031
	goto l0000000000439FB0
	// succ:  l0000000000439FB0
l000000000043A000:
	w2 = w2 + 0x00000030
adjust_shell_level_exit:


// set_pwd
// Return size: 0
void set_pwd()
set_pwd_entry:
	// succ:  l000000000043A00C
l000000000043A00C:
	sp = fp
	sp = sp + -48
	Mem0[sp:word64] = x29
	sp = sp + 8
	Mem0[sp:word64] = x30
	x29 = x31 + 0x0000000000000000
	x0 = 0x00000000004AB000
	x0 = x0 + 0xFFFFFFFFFFFFFA10
	v9 = sp + 16
	Mem0[v9:word64] = x19
	v9 = v9 + 8
	Mem0[v9:word64] = x20
	Mem0[sp + 32:word64] = x21
	call find_variable (retsize: 0;)
	branch x0 == 0x0000000000000000 l000000000043A170
	// succ:  l000000000043A02C l000000000043A170
l000000000043A02C:
	x19 = Mem0[x0 + 8:word64]
	// succ:  l000000000043A030
l000000000043A030:
	x20 = 0x00000000004AA000
	x0 = x20 + 0x0000000000000520
	call find_variable (retsize: 0;)
	branch x0 == 0x0000000000000000 l000000000043A06C
	// succ:  l000000000043A040 l000000000043A06C
l000000000043A040:
	w1 = Mem0[x0 + 40:word32]
	branch (w1 & 0x00008000) == 0x00000000 l000000000043A06C
	// succ:  l000000000043A048 l000000000043A06C
l000000000043A048:
	x21 = Mem0[x0 + 8:word64]
	branch x21 == 0x0000000000000000 l000000000043A06C
	// succ:  l000000000043A050 l000000000043A06C
l000000000043A050:
	x2 = 0x0000000000000000
	x1 = 0x00000000004B2000
	x0 = x21
	x1 = x1 + 0xFFFFFFFFFFFFFD68
	x3 = x2
	call same_file (retsize: 0;)
	branch w0 != 0x00000000 l000000000043A164
	// succ:  l000000000043A06C l000000000043A164
l000000000043A06C:
	branch x19 == 0x0000000000000000 l000000000043A07C
	// succ:  l000000000043A070 l000000000043A07C
l000000000043A070:
	x0 = 0x00000000004DE000
	w0 = Mem0[x0 + 1712:word32]
	branch w0 != 0x00000000 l000000000043A104
	// succ:  l000000000043A07C l000000000043A104
l000000000043A07C:
	x0 = 0x00000000004AC000
	x0 = x0 + 0xFFFFFFFFFFFFFAB8
	call get_working_directory (retsize: 0;)
	x19 = x0
	branch x0 == 0x0000000000000000 l000000000043A0D0
	// succ:  l000000000043A090 l000000000043A0D0
l000000000043A090:
	x1 = x0
	w2 = 0x00000000
	x0 = x20 + 0x0000000000000520
	call bind_variable (retsize: 0;)
	w1 = Mem0[x0 + 40:word32]
	x3 = 0x00000000004D6000
	w1 = w1 | 0x00000001
	Mem0[x0 + 40:word32] = w1
	x1 = 0x00000000004AC000
	w4 = 0x00000001
	x3 = x3 + 0xFFFFFFFFFFFFFA50
	x0 = x19
	x1 = x1 + 0xFFFFFFFFFFFFF910
	w2 = 0x00000339
	Mem0[x3 + 8:word32] = w4
	call sh_xfree (retsize: 0;)
	// succ:  l000000000043A0D0
l000000000043A0D0:
	x1 = 0x0000000000000000
	x0 = 0x00000000004AB000
	w2 = w1
	x0 = x0 + 0xFFFFFFFFFFFFFEE0
	call bind_variable (retsize: 0;)
	w1 = Mem0[x0 + 40:word32]
	w2 = 0x00001001
	w1 = w1 | w2
	Mem0[x0 + 40:word32] = w1
	v18 = sp + 16
	x19 = Mem0[v18:word64]
	v18 = v18 + 8
	x20 = Mem0[v18:word64]
	x21 = Mem0[sp + 32:word64]
	x29 = Mem0[sp:word64]
	sp = sp + 8
	x30 = Mem0[sp:word64]
	sp = sp + 48
	return
	// succ:  set_pwd_exit
l000000000043A104:
	x0 = 0x00000000004DE000
	w0 = Mem0[x0 + 1736:word32]
	branch w0 == 0x00000000 l000000000043A07C
	// succ:  l000000000043A110 l000000000043A07C
l000000000043A110:
	x2 = 0x0000000000000000
	x1 = 0x00000000004B2000
	x0 = x19
	x1 = x1 + 0xFFFFFFFFFFFFFD68
	x3 = x2
	call same_file (retsize: 0;)
	branch w0 == 0x00000000 l000000000043A07C
	// succ:  l000000000043A12C l000000000043A07C
l000000000043A12C:
	x0 = x19
	call set_working_directory (retsize: 0;)
	x1 = x19
	x0 = x20 + 0x0000000000000520
	w2 = 0x00000000
	call bind_variable (retsize: 0;)
	w1 = Mem0[x0 + 40:word32]
	w1 = w1 | 0x00000001
	Mem0[x0 + 40:word32] = w1
	x0 = 0x00000000004D6000
	w1 = 0x00000001
	x0 = x0 + 0xFFFFFFFFFFFFFA50
	Mem0[x0 + 8:word32] = w1
	goto l000000000043A0D0
	// succ:  l000000000043A0D0
l000000000043A164:
	x0 = x21
	call set_working_directory (retsize: 0;)
	goto l000000000043A0D0
	// succ:  l000000000043A0D0
l000000000043A170:
	x19 = x0
	goto l000000000043A030
	// succ:  l000000000043A030
set_pwd_exit:


// set_ppid
// Return size: 0
void set_ppid()
set_ppid_entry:
	// succ:  l000000000043A178
l000000000043A178:
	sp = fp
	sp = sp + -64
	Mem0[sp:word64] = x29
	sp = sp + 8
	Mem0[sp:word64] = x30
	x29 = x31 + 0x0000000000000000
	Mem0[sp + 16:word64] = x19
	call getppid (retsize: 0;)
	x1 = x29 + 0x0000000000000020
	x2 = 0x000000000000000C
set_ppid_exit:


// sh_set_lines_and_columns
// Return size: 0
void sh_set_lines_and_columns()
sh_set_lines_and_columns_entry:
	// succ:  l000000000043A1E8
l000000000043A1E8:
	sp = fp
	sp = sp + -48
	Mem0[sp:word64] = x29
	sp = sp + 8
	Mem0[sp:word64] = x30
	x29 = x31 + 0x0000000000000000
	Mem0[sp + 16:word64] = x19
	x2 = 0x000000000000000C
	w19 = w1
sh_set_lines_and_columns_exit:


// bind_int_variable
// Return size: 0
void bind_int_variable()
bind_int_variable_entry:
	// succ:  l000000000043A24C
l000000000043A24C:
	sp = fp
	sp = sp + -48
	Mem0[sp:word64] = x29
	sp = sp + 8
	Mem0[sp:word64] = x30
	x29 = x31 + 0x0000000000000000
	v8 = sp + 16
	Mem0[v8:word64] = x19
	v8 = v8 + 8
	Mem0[v8:word64] = x20
	Mem0[sp + 32:word64] = x21
	x19 = x0
	x21 = x1
	call valid_array_reference (retsize: 0;)
	w20 = w0
	branch w0 == 0x00000000 l000000000043A2D8
	// succ:  l000000000043A270 l000000000043A2D8
l000000000043A270:
	x1 = 0x0000000000000000
	x2 = x1
	x0 = x19
	call array_variable_part (retsize: 0;)
	w2 = 0x00000001
	branch x0 == 0x0000000000000000 l000000000043A2E8
	// succ:  l000000000043A288 l000000000043A2E8
l000000000043A288:
	w4 = Mem0[x0 + 40:word32]
	w1 = w4 & 0xFFFFFFEF
	Mem0[x0 + 40:word32] = w1
l000000000043A298:
	x0 = x19
	x1 = x21
	branch w2 == 0x00000000 l000000000043A2D0
	// succ:  l000000000043A2A4 l000000000043A2D0
l000000000043A2A4:
	w2 = 0x00000000
	call assign_array_element (retsize: 0;)
	// succ:  l000000000043A2AC
l000000000043A2AC:
	branch x0 == 0x0000000000000000 l000000000043A2C0
	// succ:  l000000000043A2B0 l000000000043A2C0
l000000000043A2B0:
	branch w20 == 0x00000000 l000000000043A2C0
	// succ:  l000000000043A2B4 l000000000043A2C0
l000000000043A2B4:
	w1 = Mem0[x0 + 40:word32]
	w1 = w1 | 0x00000010
	Mem0[x0 + 40:word32] = w1
	// succ:  l000000000043A2C0
l000000000043A2C0:
	v18 = sp + 16
	x19 = Mem0[v18:word64]
	v18 = v18 + 8
	x20 = Mem0[v18:word64]
	x21 = Mem0[sp + 32:word64]
	x29 = Mem0[sp:word64]
	sp = sp + 8
	x30 = Mem0[sp:word64]
	sp = sp + 48
	return
	// succ:  bind_int_variable_exit
l000000000043A2D0:
	call bind_variable (retsize: 0;)
	goto l000000000043A2AC
	// succ:  l000000000043A2AC
l000000000043A2D8:
	x0 = x19
	call find_variable (retsize: 0;)
	w2 = w20
	branch x0 != 0x0000000000000000 l000000000043A288
	// succ:  l000000000043A2E8 l000000000043A288
l000000000043A2E8:
	w20 = w0
	goto l000000000043A298
	// succ:  l000000000043A298
bind_int_variable_exit:


// bind_var_to_int
// Return size: 0
void bind_var_to_int()
bind_var_to_int_entry:
	// succ:  l000000000043A2F0
l000000000043A2F0:
	sp = fp
	sp = sp + -64
	Mem0[sp:word64] = x29
	sp = sp + 8
	Mem0[sp:word64] = x30
	x29 = x31 + 0x0000000000000000
	Mem0[sp + 16:word64] = x19
	x2 = x29 + 0x0000000000000020
	x19 = x0
	x3 = 0x0000000000000016
	w4 = 0x00000000
	x0 = x1
	w1 = 0x0000000A
	call fmtulong (retsize: 0;)
	x1 = x0
	x0 = x19
	call bind_int_variable (retsize: 0;)
	x19 = Mem0[sp + 16:word64]
	x29 = Mem0[sp:word64]
	sp = sp + 8
	x30 = Mem0[sp:word64]
	sp = sp + 64
	return
	// succ:  bind_var_to_int_exit
bind_var_to_int_exit:


// set_var_read_only
// Return size: 0
void set_var_read_only()
set_var_read_only_entry:
	// succ:  l000000000043A330
l000000000043A330:
	sp = fp
	sp = sp + -32
	Mem0[sp:word64] = x29
	sp = sp + 8
	Mem0[sp:word64] = x30
	x29 = x31 + 0x0000000000000000
	Mem0[sp + 16:word64] = x19
	x19 = x0
	call find_variable (retsize: 0;)
	x2 = x0
	branch x0 == 0x0000000000000000 l000000000043A364
	// succ:  l000000000043A34C l000000000043A364
l000000000043A34C:
	w0 = Mem0[x2 + 40:word32]
	// succ:  l000000000043A350
l000000000043A350:
	w0 = w0 | 0x00000002
	Mem0[x2 + 40:word32] = w0
	x19 = Mem0[sp + 16:word64]
	x29 = Mem0[sp:word64]
	sp = sp + 8
	x30 = Mem0[sp:word64]
	sp = sp + 32
	return
	// succ:  set_var_read_only_exit
l000000000043A364:
	x1 = 0x00000000004AC000
	x0 = x19
	x1 = x1 + 0x0000000000000460
	call bind_variable (retsize: 0;)
	x2 = x0
	x0 = 0x00000000004DF000
	w0 = Mem0[x0 + 3756:word32]
	branch w0 != 0x00000000 l000000000043A34C
	// succ:  l000000000043A384 l000000000043A34C
l000000000043A384:
	w0 = Mem0[x2 + 40:word32]
	branch x2 == 0x0000000000000000 l000000000043A350
	// succ:  l000000000043A38C l000000000043A350
l000000000043A38C:
	w0 = w0 | 0x00001000
	Mem0[x2 + 40:word32] = w0
	goto l000000000043A350
	// succ:  l000000000043A350
set_var_read_only_exit:


// fn000000000043A398
// Return size: 0
void fn000000000043A398()
fn000000000043A398_entry:
	// succ:  l000000000043A398
l000000000043A398:
	sp = fp
	sp = sp + -48
	Mem0[sp:word64] = x29
	sp = sp + 8
	Mem0[sp:word64] = x30
	x29 = x31 + 0x0000000000000000
	v8 = sp + 16
	Mem0[v8:word64] = x19
	v8 = v8 + 8
	Mem0[v8:word64] = x20
	x19 = 0x00000000004DF000
	x20 = x19 + 0xFFFFFFFFFFFFFC60
	x0 = Mem0[x20 + 72:word64]
	v12 = sp + 32
	Mem0[v12:word64] = x21
	v12 = v12 + 8
	Mem0[v12:word64] = x22
	branch x0 == 0x0000000000000000 l000000000043A3C0
	goto l000000000043A3B8
	// succ:  l000000000043A3B8 l000000000043A3C0
l000000000043A398:
l000000000043A3B8:
	call strvec_flush (retsize: 0;)
	x0 = Mem0[x20 + 72:word64]
	// succ:  l000000000043A3C0
l000000000043A3C0:
	x1 = x19 + 0xFFFFFFFFFFFFFC60
	x1 = Mem0[x1 + 32:word64]
	branch x1 == 0x0000000000000000 l000000000043A560
	// succ:  l000000000043A3CC l000000000043A560
l000000000043A3CC:
	w3 = 0x00000000
	// succ:  l000000000043A3D0
l000000000043A3D0:
	x2 = Mem0[x1 + 32:word64]
	branch x2 == 0x0000000000000000 l000000000043A3DC
	// succ:  l000000000043A3D8 l000000000043A3DC
l000000000043A3D8:
	w2 = Mem0[x2 + 12:word32]
	// succ:  l000000000043A3DC
l000000000043A3DC:
	x1 = Mem0[x1 + 24:word64]
	w3 = w3 + w2
	branch x1 != 0x0000000000000000 l000000000043A3D0
	// succ:  l000000000043A3E8 l000000000043A3D0
l000000000043A3E8:
	x1 = x19 + 0xFFFFFFFFFFFFFC60
	x1 = Mem0[x1 + 56:word64]
	branch x1 == 0x0000000000000000 l000000000043A3F8
	// succ:  l000000000043A3F4 l000000000043A3F8
l000000000043A3F4:
	w1 = Mem0[x1 + 12:word32]
	// succ:  l000000000043A3F8
l000000000043A3F8:
	x4 = x19 + 0xFFFFFFFFFFFFFC60
	x2 = Mem0[x4 + 40:word64]
	w3 = w3 + w1
	w3 = w3 + 0x00000001
	branch x2 == 0x0000000000000000 l000000000043A410
	// succ:  l000000000043A40C l000000000043A410
l000000000043A40C:
	w2 = Mem0[x2 + 12:word32]
	// succ:  l000000000043A410
l000000000043A410:
	x20 = x19 + 0xFFFFFFFFFFFFFC60
	w4 = Mem0[x20 + 84:word32]
	w2 = w3 + w2
	NZCV = cond(w2 - w4)
	branch Test(GT,NZV) l000000000043A4EC
	// succ:  l000000000043A424 l000000000043A4EC
l000000000043A424:
	x21 = x19 + 0xFFFFFFFFFFFFFC60
	Mem0[x0:word64] = 0x0000000000000000
	x0 = Mem0[x21 + 40:word64]
	Mem0[x21 + 80:word32] = 0x00000000
	branch x0 == 0x0000000000000000 l000000000043A4E4
	// succ:  l000000000043A438 l000000000043A4E4
l000000000043A438:
	x0 = 0x0000000000000000
	w1 = w0
	call new_var_context (retsize: 0;)
	x20 = x0
	x1 = Mem0[x21 + 40:word64]
	x0 = Mem0[x21 + 32:word64]
	Mem0[x20 + 32:word64] = x1
	Mem0[x20 + 24:word64] = x0
	// succ:  l000000000043A458
l000000000043A458:
	x0 = 0x0000000000436000
	x0 = x0 + 0x0000000000000624
	x1 = x20
	call map_over (retsize: 0;)
	x21 = x0
	branch x0 == 0x0000000000000000 l000000000043A498
	// succ:  l000000000043A470 l000000000043A498
l000000000043A470:
	call fn0000000000437364 (retsize: 0;)
	x1 = 0x00000000004AC000
	x22 = x0
	x1 = x1 + 0xFFFFFFFFFFFFF910
	x0 = x21
	w2 = 0x00000DD4
	call sh_xfree (retsize: 0;)
	branch x22 == 0x0000000000000000 l000000000043A498
	// succ:  l000000000043A490 l000000000043A498
l000000000043A490:
	x0 = x22
	call fn00000000004390B0 (retsize: 0;)
	// succ:  l000000000043A498
l000000000043A498:
	x19 = x19 + 0xFFFFFFFFFFFFFC60
	x0 = Mem0[x19 + 32:word64]
	x31 = x20 - x0
	NZCV = cond(x31)
	branch Test(EQ,Z) l000000000043A4BC
	// succ:  l000000000043A4A8 l000000000043A4BC
l000000000043A4A8:
	x1 = 0x00000000004AC000
	x0 = x20
	x1 = x1 + 0xFFFFFFFFFFFFF910
	w2 = 0x00000E84
	call sh_xfree (retsize: 0;)
	// succ:  l000000000043A4BC
l000000000043A4BC:
	x0 = 0x00000000004DF000
	w0 = Mem0[x0 + 3696:word32]
	branch w0 == 0x00000000 l000000000043A508
	// succ:  l000000000043A4C8 l000000000043A508
l000000000043A4C8:
	x0 = 0x00000000004D6000
	x0 = x0 + 0xFFFFFFFFFFFFFA50
	Mem0[x0 + 8:word32] = 0x00000000
	v24 = sp + 16
	x19 = Mem0[v24:word64]
	v24 = v24 + 8
	x20 = Mem0[v24:word64]
	v25 = sp + 32
	x21 = Mem0[v25:word64]
	v25 = v25 + 8
	x22 = Mem0[v25:word64]
	x29 = Mem0[sp:word64]
	sp = sp + 8
	x30 = Mem0[sp:word64]
	sp = sp + 48
	return
	// succ:  fn000000000043A398_exit
l000000000043A4E4:
	x20 = Mem0[x21 + 32:word64]
	goto l000000000043A458
	// succ:  l000000000043A458
l000000000043A4EC:
	w1 = w2
	Mem0[x20 + 84:word32] = w2
	call strvec_resize (retsize: 0;)
	x1 = 0x00000000004DE000
	Mem0[x20 + 72:word64] = x0
	Mem0[x1 + 1672:word64] = x0
	goto l000000000043A424
	// succ:  l000000000043A424
l000000000043A508:
	x0 = 0x0000000000436000
	x0 = x0 + 0x000000000000060C
	call map_over_funcs (retsize: 0;)
	x20 = x0
	branch x0 == 0x0000000000000000 l000000000043A4C8
	// succ:  l000000000043A51C l000000000043A4C8
l000000000043A51C:
	call fn0000000000437364 (retsize: 0;)
	x1 = 0x00000000004AC000
	x19 = x0
	x1 = x1 + 0xFFFFFFFFFFFFF910
	x0 = x20
	w2 = 0x00000DE4
	call sh_xfree (retsize: 0;)
	branch x19 == 0x0000000000000000 l000000000043A4C8
	// succ:  l000000000043A53C l000000000043A4C8
l000000000043A53C:
	x0 = x19
	call fn00000000004390B0 (retsize: 0;)
	x0 = 0x00000000004D6000
	x0 = x0 + 0xFFFFFFFFFFFFFA50
	Mem0[x0 + 8:word32] = 0x00000000
	v26 = sp + 16
	x19 = Mem0[v26:word64]
	v26 = v26 + 8
	x20 = Mem0[v26:word64]
	v27 = sp + 32
	x21 = Mem0[v27:word64]
	v27 = v27 + 8
	x22 = Mem0[v27:word64]
	x29 = Mem0[sp:word64]
	sp = sp + 8
	x30 = Mem0[sp:word64]
	sp = sp + 48
	return
	// succ:  fn000000000043A398_exit
l000000000043A560:
	w3 = w1
	goto l000000000043A3E8
	// succ:  l000000000043A3E8
fn000000000043A398_exit:


// maybe_make_export_env
// Return size: 0
void maybe_make_export_env()
maybe_make_export_env_entry:
	// succ:  l000000000043A568
l000000000043A568:
	sp = fp
	x0 = 0x00000000004D6000
	x0 = x0 + 0xFFFFFFFFFFFFFA50
	w0 = Mem0[x0 + 8:word32]
	branch w0 == 0x00000000 l000000000043A57C
	// succ:  l000000000043A578 l000000000043A57C
l000000000043A578:
	// succ:  l000000000043A578_thunk_fn000000000043A398
l000000000043A578_thunk_fn000000000043A398:
	call fn000000000043A398 (retsize: 0;)
	return
	// succ:  maybe_make_export_env_exit
l000000000043A57C:
	return
	// succ:  maybe_make_export_env_exit
maybe_make_export_env_exit:


// chkexport
// Return size: 0
void chkexport()
chkexport_entry:
	// succ:  l000000000043A580
l000000000043A580:
	sp = fp
	sp = sp + -32
	Mem0[sp:word64] = x29
	sp = sp + 8
	Mem0[sp:word64] = x30
	x29 = x31 + 0x0000000000000000
	Mem0[sp + 16:word64] = x19
	call find_variable (retsize: 0;)
	branch x0 == 0x0000000000000000 l000000000043A5B8
	// succ:  l000000000043A594 l000000000043A5B8
l000000000043A594:
	w1 = Mem0[x0 + 40:word32]
	w0 = w1 & 0x00000001
	branch (w1 & 0x00000001) == 0x00000000 l000000000043A5B8
	// succ:  l000000000043A5A0 l000000000043A5B8
l000000000043A5A0:
	x0 = 0x00000000004D6000
	x0 = x0 + 0xFFFFFFFFFFFFFA50
	w19 = 0x00000001
	Mem0[x0 + 8:word32] = w19
	call fn000000000043A398 (retsize: 0;)
	w0 = w19
	// succ:  l000000000043A5B8
l000000000043A5B8:
	x19 = Mem0[sp + 16:word64]
	x29 = Mem0[sp:word64]
	sp = sp + 8
	x30 = Mem0[sp:word64]
	sp = sp + 32
	return
	// succ:  chkexport_exit
chkexport_exit:


// sv_tz
// Return size: 0
void sv_tz()
sv_tz_entry:
	// succ:  l000000000043A5C4
l000000000043A5C4:
	sp = fp
	sp = sp + -16
	Mem0[sp:word64] = x29
	sp = sp + 8
	Mem0[sp:word64] = x30
	x29 = x31 + 0x0000000000000000
	call chkexport (retsize: 0;)
	branch w0 != 0x00000000 l000000000043A5DC
	// succ:  l000000000043A5D4 l000000000043A5DC
l000000000043A5D4:
	x29 = Mem0[sp:word64]
	sp = sp + 8
	x30 = Mem0[sp:word64]
	sp = sp + 16
	return
	// succ:  sv_tz_exit
l000000000043A5DC:
	x29 = Mem0[sp:word64]
	sp = sp + 8
	x30 = Mem0[sp:word64]
	sp = sp + 16
	call tzset (retsize: 0;)
	return
	// succ:  sv_tz_exit
sv_tz_exit:


// dispose_var_context
// Return size: 0
void dispose_var_context()
dispose_var_context_entry:
	// succ:  l000000000043A5E4
l000000000043A5E4:
	sp = fp
	sp = sp + -32
	Mem0[sp:word64] = x29
	sp = sp + 8
	Mem0[sp:word64] = x30
	x29 = x31 + 0x0000000000000000
	v6 = sp + 16
	Mem0[v6:word64] = x19
	v6 = v6 + 8
	Mem0[v6:word64] = x20
	x19 = x0
	x0 = Mem0[x0:word64]
	x20 = 0x00000000004AC000
	branch x0 == 0x0000000000000000 l000000000043A60C
	// succ:  l000000000043A600 l000000000043A60C
l000000000043A600:
	x1 = x20 + 0xFFFFFFFFFFFFF910
	w2 = 0x00000EEF
	call sh_xfree (retsize: 0;)
	// succ:  l000000000043A60C
l000000000043A60C:
	x0 = Mem0[x19 + 32:word64]
	branch x0 == 0x0000000000000000 l000000000043A628
	// succ:  l000000000043A614 l000000000043A628
l000000000043A614:
	x1 = 0x0000000000438000
	x1 = x1 + 0xFFFFFFFFFFFFF824
	call hash_flush (retsize: 0;)
	x0 = Mem0[x19 + 32:word64]
	call hash_dispose (retsize: 0;)
	// succ:  l000000000043A628
l000000000043A628:
	x0 = x19
	x1 = x20 + 0xFFFFFFFFFFFFF910
	v12 = sp + 16
	x19 = Mem0[v12:word64]
	v12 = v12 + 8
	x20 = Mem0[v12:word64]
	x29 = Mem0[sp:word64]
	sp = sp + 8
	x30 = Mem0[sp:word64]
	sp = sp + 32
	w2 = 0x00000EF7
	// succ:  l000000000043A63C_thunk_sh_xfree
l000000000043A63C_thunk_sh_xfree:
	call sh_xfree (retsize: 0;)
	return
	// succ:  dispose_var_context_exit
dispose_var_context_exit:


// push_var_context
// Return size: 0
void push_var_context()
push_var_context_entry:
	// succ:  l000000000043A640
l000000000043A640:
	sp = fp
	sp = sp + -48
	Mem0[sp:word64] = x29
	sp = sp + 8
	Mem0[sp:word64] = x30
	x29 = x31 + 0x0000000000000000
	Mem0[sp + 16:word64] = x19
	Mem0[x29 + 32:word64] = x2
	call new_var_context (retsize: 0;)
	x2 = Mem0[x29 + 32:word64]
	x19 = x0
	Mem0[x0 + 32:word64] = x2
	branch x2 == 0x0000000000000000 l000000000043A684
	goto l000000000043A664
	// succ:  l000000000043A664 l000000000043A684
l000000000043A640:
l000000000043A664:
	x1 = 0x0000000000436000
	x0 = x2
	x1 = x1 + 0x00000000000006D8
	x2 = 0x0000000000000000
	call fn0000000000437154 (retsize: 0;)
	w0 = Mem0[x19 + 12:word32]
	w0 = w0 | 0x00000002
	Mem0[x19 + 12:word32] = w0
	// succ:  l000000000043A684
l000000000043A684:
	x2 = 0x00000000004DF000
	x2 = x2 + 0xFFFFFFFFFFFFFC60
	x1 = Mem0[x2 + 32:word64]
	Mem0[x2 + 32:word64] = x19
	Mem0[x19 + 24:word64] = x1
	Mem0[x1 + 16:word64] = x19
	x0 = x19
	x19 = Mem0[sp + 16:word64]
	x29 = Mem0[sp:word64]
	sp = sp + 8
	x30 = Mem0[sp:word64]
	sp = sp + 48
	return
	// succ:  push_var_context_exit
push_var_context_exit:


// pop_var_context
// Return size: 0
void pop_var_context()
pop_var_context_entry:
	// succ:  l000000000043A6AC
l000000000043A6AC:
	sp = fp
	sp = sp + -32
	Mem0[sp:word64] = x29
	sp = sp + 8
	Mem0[sp:word64] = x30
	x29 = x31 + 0x0000000000000000
	x2 = 0x00000000004DF000
	x2 = x2 + 0xFFFFFFFFFFFFFC60
	Mem0[sp + 16:word64] = x19
	x19 = Mem0[x2 + 32:word64]
	w0 = Mem0[x19 + 12:word32]
	branch (w0 & 0x00000004) == 0x00000000 l000000000043A700
	// succ:  l000000000043A6CC l000000000043A700
l000000000043A6CC:
	x1 = Mem0[x19 + 24:word64]
	branch x1 == 0x0000000000000000 l000000000043A720
	// succ:  l000000000043A6D4 l000000000043A720
l000000000043A6D4:
	x0 = Mem0[x19 + 32:word64]
	Mem0[x2 + 32:word64] = x1
	Mem0[x1 + 16:word64] = 0x0000000000000000
	branch x0 == 0x0000000000000000 l000000000043A6F0
	// succ:  l000000000043A6E4 l000000000043A6F0
l000000000043A6E4:
	x1 = 0x000000000043C000
	x1 = x1 + 0x0000000000000028
	call hash_flush (retsize: 0;)
	// succ:  l000000000043A6F0
l000000000043A6F0:
	x0 = x19
	x19 = Mem0[sp + 16:word64]
	x29 = Mem0[sp:word64]
	sp = sp + 8
	x30 = Mem0[sp:word64]
	sp = sp + 32
	// succ:  l000000000043A6FC_thunk_dispose_var_context
l000000000043A6FC_thunk_dispose_var_context:
	call dispose_var_context (retsize: 0;)
	return
	// succ:  pop_var_context_exit
l000000000043A700:
	x1 = 0x00000000004AC000
	x1 = x1 + 0xFFFFFFFFFFFFFAD8
	w2 = 0x00000005
	x0 = 0x0000000000000000
	dcgettext(x0, x1, x2)
	sp = sp + 0xFFFFFFFFFFFFFFF8
	x19 = Mem0[sp + 16:word64]
	x29 = Mem0[sp:word64]
	sp = sp + 8
	x30 = Mem0[sp:word64]
	sp = sp + 32
	// succ:  l000000000043A71C_thunk_internal_error
l000000000043A71C_thunk_internal_error:
	call internal_error (retsize: 0;)
	return
	// succ:  pop_var_context_exit
l000000000043A720:
	x0 = x1
	x1 = 0x00000000004AC000
	x1 = x1 + 0xFFFFFFFFFFFFFB18
	w2 = 0x00000005
	dcgettext(x0, x1, x2)
	sp = sp + 0xFFFFFFFFFFFFFFF8
	x19 = Mem0[sp + 16:word64]
	x29 = Mem0[sp:word64]
	sp = sp + 8
	x30 = Mem0[sp:word64]
	sp = sp + 32
	// succ:  l000000000043A73C_thunk_internal_error
l000000000043A73C_thunk_internal_error:
	call internal_error (retsize: 0;)
	return
	// succ:  pop_var_context_exit
pop_var_context_exit:


// delete_all_contexts
// Return size: 0
void delete_all_contexts()
delete_all_contexts_entry:
	// succ:  l000000000043A740
l000000000043A740:
	sp = fp
	sp = sp + -48
	Mem0[sp:word64] = x29
	sp = sp + 8
	Mem0[sp:word64] = x30
	x29 = x31 + 0x0000000000000000
	Mem0[sp + 32:word64] = x21
	x21 = 0x00000000004DF000
	v9 = sp + 16
	Mem0[v9:word64] = x19
	v9 = v9 + 8
	Mem0[v9:word64] = x20
	x20 = x21 + 0xFFFFFFFFFFFFFC60
	x2 = Mem0[x20 + 48:word64]
	x1 = x0
	x31 = x0 - x2
	NZCV = cond(x31)
	branch Test(EQ,Z) l000000000043A784
	// succ:  l000000000043A768 l000000000043A784
l000000000043A768:
	x0 = x1
	x19 = Mem0[x1 + 24:word64]
	call dispose_var_context (retsize: 0;)
	x2 = Mem0[x20 + 48:word64]
	x1 = x19
	x31 = x2 - x19
	NZCV = cond(x31)
	branch Test(NE,Z) l000000000043A768
	// succ:  l000000000043A784 l000000000043A768
l000000000043A784:
	x0 = Mem0[x2 + 32:word64]
	x1 = 0x0000000000438000
	x1 = x1 + 0xFFFFFFFFFFFFF824
	call hash_flush (retsize: 0;)
	x21 = x21 + 0xFFFFFFFFFFFFFC60
	x0 = Mem0[x21 + 48:word64]
	v15 = sp + 16
	x19 = Mem0[v15:word64]
	v15 = v15 + 8
	x20 = Mem0[v15:word64]
	Mem0[x21 + 32:word64] = x0
	x21 = Mem0[sp + 32:word64]
	x29 = Mem0[sp:word64]
	sp = sp + 8
	x30 = Mem0[sp:word64]
	sp = sp + 48
	return
	// succ:  delete_all_contexts_exit
delete_all_contexts_exit:


// push_scope
// Return size: 0
void push_scope()
push_scope_entry:
	// succ:  l000000000043A7B0
l000000000043A7B0:
	sp = fp
	w3 = w0
	x2 = x1
	x0 = 0x0000000000000000
	w1 = w3
	// succ:  l000000000043A7C0_thunk_push_var_context
l000000000043A7C0_thunk_push_var_context:
	call push_var_context (retsize: 0;)
	return
	// succ:  push_scope_exit
push_scope_exit:


// pop_scope
// Return size: 0
void pop_scope()
pop_scope_entry:
	// succ:  l000000000043A7C4
l000000000043A7C4:
	sp = fp
	sp = sp + -48
	Mem0[sp:word64] = x29
	sp = sp + 8
	Mem0[sp:word64] = x30
	x29 = x31 + 0x0000000000000000
	x2 = 0x00000000004DF000
	x1 = x2 + 0xFFFFFFFFFFFFFC60
	v10 = sp + 16
	Mem0[v10:word64] = x19
	v10 = v10 + 8
	Mem0[v10:word64] = x20
	x19 = Mem0[x1 + 32:word64]
	Mem0[sp + 32:word64] = x21
	w1 = Mem0[x19 + 12:word32]
	w21 = w0
	w31 = w1 & 0x00000018
	NZ = cond(w31)
	C = false
	V = false
	branch Test(EQ,Z) l000000000043A878
	// succ:  l000000000043A7F0 l000000000043A878
l000000000043A7F0:
	x1 = Mem0[x19 + 24:word64]
	branch x1 == 0x0000000000000000 l000000000043A7FC
	// succ:  l000000000043A7F8 l000000000043A7FC
l000000000043A7F8:
	Mem0[x1 + 16:word64] = 0x0000000000000000
	// succ:  l000000000043A7FC
l000000000043A7FC:
	x2 = x2 + 0xFFFFFFFFFFFFFC60
	x0 = Mem0[x19:word64]
	Mem0[x2 + 32:word64] = x1
	x20 = 0x00000000004AC000
	branch x0 == 0x0000000000000000 l000000000043A81C
	// succ:  l000000000043A810 l000000000043A81C
l000000000043A810:
	x1 = x20 + 0xFFFFFFFFFFFFF910
	w2 = 0x00000FA6
	call sh_xfree (retsize: 0;)
	// succ:  l000000000043A81C
l000000000043A81C:
	x0 = Mem0[x19 + 32:word64]
	branch x0 == 0x0000000000000000 l000000000043A83C
	// succ:  l000000000043A824 l000000000043A83C
l000000000043A824:
	branch w21 != 0x00000000 l000000000043A868
	// succ:  l000000000043A828 l000000000043A868
l000000000043A828:
	x1 = 0x000000000043C000
	x1 = x1 + 0x0000000000000120
	call hash_flush (retsize: 0;)
	// succ:  l000000000043A834
l000000000043A834:
	x0 = Mem0[x19 + 32:word64]
	call hash_dispose (retsize: 0;)
	// succ:  l000000000043A83C
l000000000043A83C:
	x1 = x20 + 0xFFFFFFFFFFFFF910
	x0 = x19
	w2 = 0x00000FAF
	call sh_xfree (retsize: 0;)
	x0 = 0x00000000004AC000
	x0 = x0 + 0xFFFFFFFFFFFFF930
	call find_variable (retsize: 0;)
	v23 = sp + 16
	x19 = Mem0[v23:word64]
	v23 = v23 + 8
	x20 = Mem0[v23:word64]
	x21 = Mem0[sp + 32:word64]
	x29 = Mem0[sp:word64]
	sp = sp + 8
	x30 = Mem0[sp:word64]
	sp = sp + 48
	// succ:  l000000000043A864_thunk_setifs
l000000000043A864_thunk_setifs:
	call setifs (retsize: 0;)
	return
	// succ:  pop_scope_exit
l000000000043A868:
	x1 = 0x000000000043C000
	x1 = x1 + 0x0000000000000028
	call hash_flush (retsize: 0;)
	goto l000000000043A834
	// succ:  l000000000043A834
l000000000043A878:
	x1 = 0x00000000004AC000
	x1 = x1 + 0xFFFFFFFFFFFFFB48
	w2 = 0x00000005
	x0 = 0x0000000000000000
	dcgettext(x0, x1, x2)
	sp = sp + 0xFFFFFFFFFFFFFFF8
	v22 = sp + 16
	x19 = Mem0[v22:word64]
	v22 = v22 + 8
	x20 = Mem0[v22:word64]
	x21 = Mem0[sp + 32:word64]
	x29 = Mem0[sp:word64]
	sp = sp + 8
	x30 = Mem0[sp:word64]
	sp = sp + 48
	// succ:  l000000000043A898_thunk_internal_error
l000000000043A898_thunk_internal_error:
	call internal_error (retsize: 0;)
	return
	// succ:  pop_scope_exit
pop_scope_exit:


// push_dollar_vars
// Return size: 0
void push_dollar_vars()
push_dollar_vars_entry:
	// succ:  l000000000043A89C
l000000000043A89C:
	sp = fp
	sp = sp + -48
	Mem0[sp:word64] = x29
	sp = sp + 8
	Mem0[sp:word64] = x30
	x29 = x31 + 0x0000000000000000
	v8 = sp + 16
	Mem0[v8:word64] = x19
	v8 = v8 + 8
	Mem0[v8:word64] = x20
	x20 = 0x00000000004DF000
	x19 = x20 + 0xFFFFFFFFFFFFFC60
	w2 = Mem0[x19 + 92:word32]
	w3 = Mem0[x19 + 96:word32]
	w1 = w2 + 0x00000001
	Mem0[sp + 32:word64] = x21
	NZCV = cond(w1 - w3)
	branch Test(GE,NZV) l000000000043A8FC
	// succ:  l000000000043A8C8 l000000000043A8FC
l000000000043A8C8:
	x21 = Mem0[x19 + 104:word64]
	x19 = x20 + 0xFFFFFFFFFFFFFC60
	Mem0[x19 + 92:word32] = w1
l000000000043A8FC:
	w4 = w3 + 0x0000000A
	x0 = Mem0[x19 + 104:word64]
	x2 = 0x00000000004AC000
push_dollar_vars_exit:


// push_context
// Return size: 0
void push_context()
push_context_entry:
	// succ:  l000000000043A930
l000000000043A930:
	sp = fp
	sp = sp + -32
	Mem0[sp:word64] = x29
	sp = sp + 8
	Mem0[sp:word64] = x30
	x29 = x31 + 0x0000000000000000
	branch w1 != 0x00000000 l000000000043A950
	// succ:  l000000000043A93C l000000000043A950
l000000000043A93C:
	Mem0[x29 + 16:word64] = x0
	Mem0[x29 + 24:word64] = x2
	call push_dollar_vars (retsize: 0;)
	x2 = Mem0[x29 + 24:word64]
	x0 = Mem0[x29 + 16:word64]
	// succ:  l000000000043A950
l000000000043A950:
	x3 = 0x00000000004DF000
	x3 = x3 + 0xFFFFFFFFFFFFFC60
	w1 = Mem0[x3:word32]
	w4 = w1 + 0x00000001
	Mem0[x3:word32] = w4
	x29 = Mem0[sp:word64]
	sp = sp + 8
	x30 = Mem0[sp:word64]
	sp = sp + 32
	w1 = 0x00000004
	// succ:  l000000000043A96C_thunk_push_var_context
l000000000043A96C_thunk_push_var_context:
	call push_var_context (retsize: 0;)
	return
	// succ:  push_context_exit
push_context_exit:


// pop_dollar_vars
// Return size: 0
void pop_dollar_vars()
pop_dollar_vars_entry:
	// succ:  l000000000043A970
l000000000043A970:
	sp = fp
	sp = sp + -32
	Mem0[sp:word64] = x29
	sp = sp + 8
	Mem0[sp:word64] = x30
	x29 = x31 + 0x0000000000000000
	Mem0[sp + 16:word64] = x19
	x19 = 0x00000000004DF000
	x19 = x19 + 0xFFFFFFFFFFFFFC60
	x0 = Mem0[x19 + 104:word64]
	branch x0 == 0x0000000000000000 l000000000043A994
	// succ:  l000000000043A98C l000000000043A994
l000000000043A98C:
	w1 = Mem0[x19 + 92:word32]
	branch w1 != 0x00000000 l000000000043A9A0
	// succ:  l000000000043A994 l000000000043A9A0
l000000000043A994:
	x19 = Mem0[sp + 16:word64]
	x29 = Mem0[sp:word64]
	sp = sp + 8
	x30 = Mem0[sp:word64]
	sp = sp + 32
	return
	// succ:  pop_dollar_vars_exit
l000000000043A9A0:
	w2 = w1 - 0x00000001
	x0 = Mem0[x0 + (int64) ((int32) w2):word64]
	w1 = 0x00000001
	Mem0[x19 + 92:word32] = w2
	call remember_args (retsize: 0;)
	v11 = Mem0[x19 + 46:int32]
	x1 = (word64) v11
	x0 = Mem0[x19 + 104:word64]
	x0 = Mem0[x0 + x1:word64]
	call dispose_words (retsize: 0;)
	v12 = Mem0[x19 + 46:int32]
	x1 = (word64) v12
	x0 = Mem0[x19 + 104:word64]
	x19 = Mem0[sp + 16:word64]
	Mem0[x0 + x1:word64] = 0x0000000000000000
	x29 = Mem0[sp:word64]
	sp = sp + 8
	x30 = Mem0[sp:word64]
	sp = sp + 32
	// succ:  l000000000043A9D8_thunk_set_dollar_vars_unchanged
l000000000043A9D8_thunk_set_dollar_vars_unchanged:
	call set_dollar_vars_unchanged (retsize: 0;)
	return
	// succ:  pop_dollar_vars_exit
pop_dollar_vars_exit:


// pop_context
// Return size: 0
void pop_context()
pop_context_entry:
	// succ:  l000000000043A9DC
l000000000043A9DC:
	sp = fp
	sp = sp + -16
	Mem0[sp:word64] = x29
	sp = sp + 8
	Mem0[sp:word64] = x30
	x29 = x31 + 0x0000000000000000
	call pop_dollar_vars (retsize: 0;)
	x0 = 0x00000000004DF000
	x0 = x0 + 0xFFFFFFFFFFFFFC60
	w1 = Mem0[x0:word32]
	w1 = w1 - 0x00000001
	Mem0[x0:word32] = w1
	call pop_var_context (retsize: 0;)
	x0 = 0x00000000004AC000
	x0 = x0 + 0xFFFFFFFFFFFFF930
	call find_variable (retsize: 0;)
	x29 = Mem0[sp:word64]
	sp = sp + 8
	x30 = Mem0[sp:word64]
	sp = sp + 16
	// succ:  l000000000043AA10_thunk_setifs
l000000000043AA10_thunk_setifs:
	call setifs (retsize: 0;)
	return
	// succ:  pop_context_exit
pop_context_exit:


// dispose_saved_dollar_vars
// Return size: 0
void dispose_saved_dollar_vars()
dispose_saved_dollar_vars_entry:
	// succ:  l000000000043AA14
l000000000043AA14:
	sp = fp
	sp = sp + -32
	Mem0[sp:word64] = x29
	sp = sp + 8
	Mem0[sp:word64] = x30
	x29 = x31 + 0x0000000000000000
	Mem0[sp + 16:word64] = x19
	x19 = 0x00000000004DF000
	x19 = x19 + 0xFFFFFFFFFFFFFC60
	x0 = Mem0[x19 + 104:word64]
	branch x0 == 0x0000000000000000 l000000000043AA4C
	// succ:  l000000000043AA30 l000000000043AA4C
l000000000043AA30:
	w1 = Mem0[x19 + 92:word32]
	branch w1 == 0x00000000 l000000000043AA4C
	// succ:  l000000000043AA38 l000000000043AA4C
l000000000043AA38:
	x0 = Mem0[x0 + (int64) ((int32) w1):word64]
	call dispose_words (retsize: 0;)
	v10 = Mem0[x19 + 46:int32]
	x1 = (word64) v10
	x0 = Mem0[x19 + 104:word64]
	Mem0[x0 + x1:word64] = 0x0000000000000000
	// succ:  l000000000043AA4C
l000000000043AA4C:
	x19 = Mem0[sp + 16:word64]
	x29 = Mem0[sp:word64]
	sp = sp + 8
	x30 = Mem0[sp:word64]
	sp = sp + 32
	return
	// succ:  dispose_saved_dollar_vars_exit
dispose_saved_dollar_vars_exit:


// push_args
// Return size: 0
void push_args()
push_args_entry:
	// succ:  l000000000043AA58
l000000000043AA58:
	sp = fp
	sp = sp + -48
	Mem0[sp:word64] = x29
	sp = sp + 8
	Mem0[sp:word64] = x30
	x29 = x31 + 0x0000000000000000
	v8 = sp + 16
	Mem0[v8:word64] = x19
	v8 = v8 + 8
	Mem0[v8:word64] = x20
	x19 = x0
	x0 = 0x00000000004AC000
	x0 = x0 + 0xFFFFFFFFFFFFFB90
	v12 = sp + 32
	Mem0[v12:word64] = x21
	v12 = v12 + 8
	Mem0[v12:word64] = x22
	call find_variable (retsize: 0;)
	branch x0 == 0x0000000000000000 l000000000043AB2C
	// succ:  l000000000043AA7C l000000000043AB2C
l000000000043AA7C:
	w1 = Mem0[x0 + 40:word32]
	x21 = 0x0000000000000000
	branch (w1 & 0x00000004) == 0x00000000 l000000000043AB10
	// succ:  l000000000043AA88 l000000000043AB10
l000000000043AA88:
	x0 = 0x00000000004AC000
	x0 = x0 + 0xFFFFFFFFFFFFFBA0
	call find_variable (retsize: 0;)
	branch x0 == 0x0000000000000000 l000000000043AB24
	// succ:  l000000000043AA98 l000000000043AB24
l000000000043AA98:
	w1 = Mem0[x0 + 40:word32]
	x22 = 0x0000000000000000
	branch (w1 & 0x00000004) == 0x00000000 l000000000043AB08
	// succ:  l000000000043AAA4 l000000000043AB08
l000000000043AAA4:
	branch x19 == 0x0000000000000000 l000000000043AB34
	// succ:  l000000000043AAA8 l000000000043AB34
l000000000043AAA8:
	x20 = 0x0000000000000000
	// succ:  l000000000043AAAC
l000000000043AAAC:
	x1 = Mem0[x19 + 8:word64]
	x0 = x21
	x2 = Mem0[x1:word64]
	w1 = 0x00000001
	call array_rshift (retsize: 0;)
	x19 = Mem0[x19:word64]
	x20 = x20 + 0x0000000000000001
	branch x19 != 0x0000000000000000 l000000000043AAAC
	// succ:  l000000000043AACC l000000000043AAAC
l000000000043AACC:
	x0 = x20
	call itos (retsize: 0;)
	x19 = x0
	x2 = x19
	x0 = x22
	w1 = 0x00000001
	call array_rshift (retsize: 0;)
	x0 = x19
	v16 = sp + 32
	x21 = Mem0[v16:word64]
	v16 = v16 + 8
	x22 = Mem0[v16:word64]
	v17 = sp + 16
	x19 = Mem0[v17:word64]
	v17 = v17 + 8
	x20 = Mem0[v17:word64]
	x1 = 0x00000000004AC000
	x29 = Mem0[sp:word64]
	sp = sp + 8
	x30 = Mem0[sp:word64]
	sp = sp + 48
	x1 = x1 + 0xFFFFFFFFFFFFF910
	w2 = 0x00001012
	// succ:  l000000000043AB04_thunk_sh_xfree
l000000000043AB04_thunk_sh_xfree:
	call sh_xfree (retsize: 0;)
	return
	// succ:  push_args_exit
l000000000043AB08:
	x22 = Mem0[x0 + 8:word64]
	goto l000000000043AAA4
	// succ:  l000000000043AAA4
l000000000043AB10:
	x21 = Mem0[x0 + 8:word64]
	x0 = 0x00000000004AC000
	x0 = x0 + 0xFFFFFFFFFFFFFBA0
	call find_variable (retsize: 0;)
	branch x0 != 0x0000000000000000 l000000000043AA98
	// succ:  l000000000043AB24 l000000000043AA98
l000000000043AB24:
	x22 = x0
	goto l000000000043AAA4
	// succ:  l000000000043AAA4
l000000000043AB2C:
	x21 = x0
	goto l000000000043AA88
	// succ:  l000000000043AA88
l000000000043AB34:
	x20 = x19
	goto l000000000043AACC
	// succ:  l000000000043AACC
push_args_exit:


// pop_args
// Return size: 0
void pop_args()
pop_args_entry:
	// succ:  l000000000043AB3C
l000000000043AB3C:
	sp = fp
	sp = sp + -48
	Mem0[sp:word64] = x29
	sp = sp + 8
	Mem0[sp:word64] = x30
	x29 = x31 + 0x0000000000000000
	x0 = 0x00000000004AC000
	x0 = x0 + 0xFFFFFFFFFFFFFB90
	v7 = sp + 16
	Mem0[v7:word64] = x19
	v7 = v7 + 8
	Mem0[v7:word64] = x20
	call find_variable (retsize: 0;)
	branch x0 == 0x0000000000000000 l000000000043AC2C
	// succ:  l000000000043AB58 l000000000043AC2C
l000000000043AB58:
	w1 = Mem0[x0 + 40:word32]
	x19 = 0x0000000000000000
	branch (w1 & 0x00000004) == 0x00000000 l000000000043ABC8
	// succ:  l000000000043AB64 l000000000043ABC8
l000000000043AB64:
	x0 = 0x00000000004AC000
	x0 = x0 + 0xFFFFFFFFFFFFFBA0
	call find_variable (retsize: 0;)
	branch x0 == 0x0000000000000000 l000000000043ABDC
	// succ:  l000000000043AB74 l000000000043ABDC
l000000000043AB74:
	w2 = Mem0[x0 + 40:word32]
	x1 = 0x0000000000000000
	branch (w2 & 0x00000004) == 0x00000000 l000000000043ABC0
	// succ:  l000000000043AB80 l000000000043ABC0
l000000000043AB80:
	x0 = x1
	w2 = 0x00000000
	w1 = 0x00000001
	call array_shift (retsize: 0;)
	x20 = x0
	branch x0 == 0x0000000000000000 l000000000043ABA8
	// succ:  l000000000043AB98 l000000000043ABA8
l000000000043AB98:
	x0 = Mem0[x0 + 8:word64]
	x1 = x29 + 0x0000000000000020
	call legal_number (retsize: 0;)
	branch w0 != 0x00000000 l000000000043ABE4
	// succ:  l000000000043ABA8 l000000000043ABE4
l000000000043ABA8:
	Mem0[x29 + 32:word64] = 0x0000000000000000
	// succ:  l000000000043ABAC
l000000000043ABAC:
	x0 = x20
	call array_dispose_element (retsize: 0;)
	v14 = sp + 16
	x19 = Mem0[v14:word64]
	v14 = v14 + 8
	x20 = Mem0[v14:word64]
	x29 = Mem0[sp:word64]
	sp = sp + 8
	x30 = Mem0[sp:word64]
	sp = sp + 48
	return
	// succ:  pop_args_exit
l000000000043ABC0:
	x1 = Mem0[x0 + 8:word64]
	goto l000000000043AB80
	// succ:  l000000000043AB80
l000000000043ABC8:
	x19 = Mem0[x0 + 8:word64]
	x0 = 0x00000000004AC000
	x0 = x0 + 0xFFFFFFFFFFFFFBA0
	call find_variable (retsize: 0;)
	branch x0 != 0x0000000000000000 l000000000043AB74
	// succ:  l000000000043ABDC l000000000043AB74
l000000000043ABDC:
	x1 = x0
	goto l000000000043AB80
	// succ:  l000000000043AB80
l000000000043ABE4:
	x0 = Mem0[x29 + 32:word64]
	x31 = x0 - x31
	NZCV = cond(x31)
	branch Test(LE,ZCV) l000000000043ABAC
	// succ:  l000000000043ABF0 l000000000043ABAC
l000000000043ABF0:
	w1 = 0x00000001
	w2 = 0x00000000
	x0 = x19
	call array_shift (retsize: 0;)
	call array_dispose_element (retsize: 0;)
	x1 = Mem0[x29 + 32:word64]
	x1 = x1 - 0x0000000000000001
	Mem0[x29 + 32:word64] = x1
	x31 = x1 - x31
	NZCV = cond(x31)
	branch Test(GT,NZV) l000000000043ABF0
	// succ:  l000000000043AC18 l000000000043ABF0
l000000000043AC18:
	x0 = x20
	call array_dispose_element (retsize: 0;)
	v18 = sp + 16
	x19 = Mem0[v18:word64]
	v18 = v18 + 8
	x20 = Mem0[v18:word64]
	x29 = Mem0[sp:word64]
	sp = sp + 8
	x30 = Mem0[sp:word64]
	sp = sp + 48
	return
	// succ:  pop_args_exit
l000000000043AC2C:
	x19 = x0
	goto l000000000043AB64
	// succ:  l000000000043AB64
pop_args_exit:


// stupidly_hack_special_variables
// Return size: 0
void stupidly_hack_special_variables()
stupidly_hack_special_variables_entry:
	// succ:  l000000000043AC34
l000000000043AC34:
	sp = fp
	sp = sp + -64
	Mem0[sp:word64] = x29
	sp = sp + 8
	Mem0[sp:word64] = x30
	x29 = x31 + 0x0000000000000000
	v8 = sp + 16
	Mem0[v8:word64] = x19
	v8 = v8 + 8
	Mem0[v8:word64] = x20
	x19 = 0x00000000004DF000
	x19 = x19 + 0xFFFFFFFFFFFFFC60
	w1 = Mem0[x19 + 112:word32]
	v12 = sp + 32
	Mem0[v12:word64] = x21
	v12 = v12 + 8
	Mem0[v12:word64] = x22
	Mem0[sp + 48:word64] = x23
	x22 = x0
	x23 = 0x00000000004D6000
	branch w1 == 0x00000000 l000000000043ACD8
	// succ:  l000000000043AC60 l000000000043ACD8
l000000000043AC60:
	x21 = x23 + 0xFFFFFFFFFFFFFA50
	x0 = Mem0[x21 + 16:word64]
	x21 = x21 + 0x0000000000000010
	branch x0 == 0x0000000000000000 l000000000043ACC4
	// succ:  l000000000043AC70 l000000000043ACC4
l000000000043AC70:
	v16 = Mem0[x22:byte]
	w19 = (word32) v16
	x21 = x21 + 0x0000000000000010
	w20 = 0x00000000
	goto l000000000043AC94
	// succ:  l000000000043AC94
l000000000043AC80:
	NZCV = cond(w2 - w31)
	branch Test(GT,NZV) l000000000043ACC4
	// succ:  l000000000043AC88 l000000000043ACC4
l000000000043AC88:
	x0 = Mem0[x21:word64]
	x21 = x21 + 16
	w20 = w20 + 0x00000001
	branch x0 == 0x0000000000000000 l000000000043ACC4
	// succ:  l000000000043AC94 l000000000043ACC4
l000000000043AC94:
	v23 = Mem0[x0:byte]
	w2 = (word32) v23
	x1 = x22
	w2 = w2 - w19
	NZCV = cond(w2)
	branch Test(NE,Z) l000000000043AC80
	// succ:  l000000000043ACA4 l000000000043AC80
l000000000043ACA4:
	strcmp(x0, x1)
	sp = sp + 0xFFFFFFFFFFFFFFF8
	w2 = w0
	branch w0 != 0x00000000 l000000000043AC80
	// succ:  l000000000043ACB0 l000000000043AC80
l000000000043ACB0:
	x23 = x23 + 0xFFFFFFFFFFFFFA50
	x20 = x23 + (int64) ((int32) w20)
	x1 = Mem0[x20 + 24:word64]
	x0 = x22
	call x1 (retsize: 0;)
	// succ:  l000000000043ACC4
l000000000043ACC4:
	v26 = sp + 16
	x19 = Mem0[v26:word64]
	v26 = v26 + 8
	x20 = Mem0[v26:word64]
	v27 = sp + 32
	x21 = Mem0[v27:word64]
	v27 = v27 + 8
	x22 = Mem0[v27:word64]
	x23 = Mem0[sp + 48:word64]
	x29 = Mem0[sp:word64]
	sp = sp + 8
	x30 = Mem0[sp:word64]
	sp = sp + 64
	return
	// succ:  stupidly_hack_special_variables_exit
l000000000043ACD8:
	x0 = x23 + 0xFFFFFFFFFFFFFA50
	x3 = 0x0000000000436000
	x0 = x0 + 0x0000000000000010
	x1 = 0x0000000000000022
	x2 = 0x0000000000000010
	x3 = x3 + 0xFFFFFFFFFFFFFFD8
	call qsort (retsize: 0;)
	w0 = 0x00000001
	Mem0[x19 + 112:word32] = w0
	goto l000000000043AC60
	// succ:  l000000000043AC60
stupidly_hack_special_variables_exit:


// assign_in_env
// Return size: 0
void assign_in_env()
assign_in_env_entry:
	// succ:  l000000000043AD00
l000000000043AD00:
	sp = fp
	sp = sp + -80
	Mem0[sp:word64] = x29
	sp = sp + 8
	Mem0[sp:word64] = x30
	x29 = x31 + 0x0000000000000000
	v8 = sp + 16
	Mem0[v8:word64] = x19
	v8 = v8 + 8
	Mem0[v8:word64] = x20
	x19 = Mem0[x0:word64]
	Mem0[sp + 64:word64] = x25
	x0 = x19
	w25 = w1
	w1 = 0x00000000
	v15 = sp + 32
	Mem0[v15:word64] = x21
	v15 = v15 + 8
	Mem0[v15:word64] = x22
	v18 = sp + 48
	Mem0[v18:word64] = x23
	v18 = v18 + 8
	Mem0[v18:word64] = x24
	call assignment (retsize: 0;)
	w21 = w0
	x0 = x19
	strlen(x0)
	sp = sp + 0xFFFFFFFFFFFFFFF8
	x22 = 0x00000000004AC000
	w2 = 0x000009C6
	x1 = x22 + 0xFFFFFFFFFFFFF910
	x0 = x0 + 0x0000000000000001
	call sh_xmalloc (retsize: 0;)
	x1 = x19
	strcpy(x0, x1)
	sp = sp + 0xFFFFFFFFFFFFFFF8
assign_in_env_exit:


// makunbound
// Return size: 0
void makunbound()
makunbound_entry:
	// succ:  l000000000043AFBC
l000000000043AFBC:
	sp = fp
	sp = sp + -48
	Mem0[sp:word64] = x29
	sp = sp + 8
	Mem0[sp:word64] = x30
	x29 = x31 + 0x0000000000000000
	v8 = sp + 16
	Mem0[v8:word64] = x19
	v8 = v8 + 8
	Mem0[v8:word64] = x20
	v11 = sp + 32
	Mem0[v11:word64] = x21
	v11 = v11 + 8
	Mem0[v11:word64] = x22
	x19 = x1
	x21 = x0
	branch x1 != 0x0000000000000000 l000000000043AFE4
	goto l000000000043AFD8
	// succ:  l000000000043AFD8 l000000000043AFE4
l000000000043AFBC:
l000000000043AFD8:
	goto l000000000043B0BC
	// succ:  l000000000043B0BC
l000000000043AFDC:
	x19 = Mem0[x19 + 24:word64]
	branch x19 == 0x0000000000000000 l000000000043B0BC
	// succ:  l000000000043AFE4 l000000000043B0BC
l000000000043AFE4:
	x1 = Mem0[x19 + 32:word64]
	x0 = x21
	w2 = 0x00000000
	call hash_remove (retsize: 0;)
	x20 = x0
	branch x0 == 0x0000000000000000 l000000000043AFDC
	// succ:  l000000000043AFFC l000000000043AFDC
l000000000043AFFC:
	x22 = Mem0[x0 + 16:word64]
	branch x22 == 0x0000000000000000 l000000000043B03C
	// succ:  l000000000043B004 l000000000043B03C
l000000000043B004:
	w0 = Mem0[x22 + 40:word32]
	branch (w0 & 0x00000001) == 0x00000000 l000000000043B020
	// succ:  l000000000043B00C l000000000043B020
l000000000043B00C:
	x1 = 0x00000000004D6000
	x1 = x1 + 0xFFFFFFFFFFFFFA50
	w2 = Mem0[x1 + 8:word32]
	w2 = w2 + 0x00000001
	Mem0[x1 + 8:word32] = w2
	// succ:  l000000000043B020
l000000000043B020:
	branch (w0 & 0x00000020) == 0x00000000 l000000000043B03C
	// succ:  l000000000043B024 l000000000043B03C
l000000000043B024:
	x2 = 0x00000000004DF000
	x2 = x2 + 0xFFFFFFFFFFFFFC60
	w1 = Mem0[x22 + 44:word32]
	w2 = Mem0[x2:word32]
	NZCV = cond(w1 - w2)
	branch Test(EQ,Z) l000000000043B0D0
	// succ:  l000000000043B03C l000000000043B0D0
l000000000043B03C:
	x0 = x21
	x19 = 0x00000000004AC000
	strlen(x0)
	sp = sp + 0xFFFFFFFFFFFFFFF8
	x19 = x19 + 0xFFFFFFFFFFFFF910
	w2 = 0x00000ADF
	x1 = x19
	x0 = x0 + 0x0000000000000001
	call sh_xmalloc (retsize: 0;)
	x1 = x21
	strcpy(x0, x1)
	sp = sp + 0xFFFFFFFFFFFFFFF8
	x21 = x0
	x0 = Mem0[x20 + 8:word64]
	x1 = x19
	w2 = 0x00000AE1
	call sh_xfree (retsize: 0;)
	x1 = x19
	w2 = 0x00000AE2
	x0 = x20
	call sh_xfree (retsize: 0;)
	x0 = x22
	call dispose_variable (retsize: 0;)
	x0 = x21
	call stupidly_hack_special_variables (retsize: 0;)
	x0 = x21
	x1 = x19
	w2 = 0x00000AE6
	call sh_xfree (retsize: 0;)
	w0 = 0x00000000
	v22 = sp + 16
	x19 = Mem0[v22:word64]
	v22 = v22 + 8
	x20 = Mem0[v22:word64]
	v23 = sp + 32
	x21 = Mem0[v23:word64]
	v23 = v23 + 8
	x22 = Mem0[v23:word64]
	x29 = Mem0[sp:word64]
	sp = sp + 8
	x30 = Mem0[sp:word64]
	sp = sp + 48
	return
	// succ:  makunbound_exit
l000000000043B0BC:
	w0 = 0xFFFFFFFF
	v16 = sp + 16
	x19 = Mem0[v16:word64]
	v16 = v16 + 8
	x20 = Mem0[v16:word64]
	v17 = sp + 32
	x21 = Mem0[v17:word64]
	v17 = v17 + 8
	x22 = Mem0[v17:word64]
	x29 = Mem0[sp:word64]
	sp = sp + 8
	x30 = Mem0[sp:word64]
	sp = sp + 48
	return
	// succ:  makunbound_exit
l000000000043B0D0:
	x21 = 0x00000000004AC000
	branch (w0 & 0x00000000) == 0x00000000 l000000000043B0F4
	// succ:  l000000000043B0D8 l000000000043B0F4
l000000000043B0D8:
	branch (w0 & 0x00000004) == 0x00000000 l000000000043B1AC
	// succ:  l000000000043B0DC l000000000043B1AC
l000000000043B0DC:
	branch (w0 & 0x00000040) == 0x00000000 l000000000043B1B8
	// succ:  l000000000043B0E0 l000000000043B1B8
l000000000043B0E0:
	x0 = Mem0[x22 + 8:word64]
	branch x0 == 0x0000000000000000 l000000000043B0F4
	// succ:  l000000000043B0E8 l000000000043B0F4
l000000000043B0E8:
	x1 = x21 + 0xFFFFFFFFFFFFF910
	w2 = 0x00000AC9
	call sh_xfree (retsize: 0;)
	// succ:  l000000000043B0F4
l000000000043B0F4:
	w2 = Mem0[x22 + 40:word32]
	w1 = 0x00000001
	w1 = DPB(w1, 0x00000010, 16)
	w0 = 0x00000001
	w1 = w2 & w1
	w0 = DPB(w0, 0x00000010, 16)
	NZCV = cond(w1 - w0)
	w1 = (word32) Test(EQ,Z)
	w0 = 0x00001020
	w1 = w1 | w0
	x0 = Mem0[x22 + 16:word64]
	Mem0[x22 + 40:word32] = w1
	Mem0[x22 + 8:word64] = 0x0000000000000000
	branch x0 == 0x0000000000000000 l000000000043B13C
	// succ:  l000000000043B12C l000000000043B13C
l000000000043B12C:
	x1 = x21 + 0xFFFFFFFFFFFFF910
	w2 = 0x00000AD1
	call sh_xfree (retsize: 0;)
	Mem0[x22 + 16:word64] = 0x0000000000000000
	// succ:  l000000000043B13C
l000000000043B13C:
	x0 = Mem0[x22:word64]
	x21 = x21 + 0xFFFFFFFFFFFFF910
	strlen(x0)
	sp = sp + 0xFFFFFFFFFFFFFFF8
	w2 = 0x00000AD3
	x1 = x21
	x0 = x0 + 0x0000000000000001
	call sh_xmalloc (retsize: 0;)
	x1 = Mem0[x22:word64]
	strcpy(x0, x1)
	sp = sp + 0xFFFFFFFFFFFFFFF8
	x1 = Mem0[x19 + 32:word64]
	w2 = 0x00000000
	call hash_insert (retsize: 0;)
	Mem0[x0 + 16:word64] = x22
	x0 = Mem0[x22:word64]
	call stupidly_hack_special_variables (retsize: 0;)
	x0 = Mem0[x20 + 8:word64]
	x1 = x21
	w2 = 0x00000AD7
	call sh_xfree (retsize: 0;)
	x0 = x20
	x1 = x21
	w2 = 0x00000AD8
	call sh_xfree (retsize: 0;)
	w0 = 0x00000000
	v24 = sp + 16
	x19 = Mem0[v24:word64]
	v24 = v24 + 8
	x20 = Mem0[v24:word64]
	v25 = sp + 32
	x21 = Mem0[v25:word64]
	v25 = v25 + 8
	x22 = Mem0[v25:word64]
	x29 = Mem0[sp:word64]
	sp = sp + 8
	x30 = Mem0[sp:word64]
	sp = sp + 48
	return
	// succ:  makunbound_exit
l000000000043B1AC:
	x0 = Mem0[x22 + 8:word64]
	call array_dispose (retsize: 0;)
	goto l000000000043B0F4
	// succ:  l000000000043B0F4
l000000000043B1B8:
	x0 = Mem0[x22 + 8:word64]
	call assoc_dispose (retsize: 0;)
	goto l000000000043B0F4
	// succ:  l000000000043B0F4
makunbound_exit:


// unbind_variable
// Return size: 0
void unbind_variable()
unbind_variable_entry:
	// succ:  l000000000043B1C4
l000000000043B1C4:
	sp = fp
	x1 = 0x00000000004DF000
	x1 = x1 + 0xFFFFFFFFFFFFFC60
	x1 = Mem0[x1 + 32:word64]
	// succ:  l000000000043B1D0_thunk_makunbound
l000000000043B1D0_thunk_makunbound:
	call makunbound (retsize: 0;)
	return
	// succ:  unbind_variable_exit
unbind_variable_exit:


// initialize_shell_variables
// Return size: 0
void initialize_shell_variables()
initialize_shell_variables_entry:
	// succ:  l000000000043B1D4
l000000000043B1D4:
	sp = fp
	sp = sp + -144
	Mem0[sp:word64] = x29
	sp = sp + 8
	Mem0[sp:word64] = x30
	x29 = x31 + 0x0000000000000000
	v8 = sp + 32
	Mem0[v8:word64] = x21
	v8 = v8 + 8
	Mem0[v8:word64] = x22
	x21 = x0
	v12 = sp + 64
	Mem0[v12:word64] = x25
	v12 = v12 + 8
	Mem0[v12:word64] = x26
	v15 = sp + 80
	Mem0[v15:word64] = x27
	v15 = v15 + 8
	Mem0[v15:word64] = x28
	v18 = sp + 16
	Mem0[v18:word64] = x19
	v18 = v18 + 8
	Mem0[v18:word64] = x20
	v21 = sp + 48
	Mem0[v21:word64] = x23
	v21 = v21 + 8
	Mem0[v21:word64] = x24
	w24 = w1
	call fn0000000000439310 (retsize: 0;)
	x20 = Mem0[x21:word64]
	x27 = 0x00000000004D6000
	x26 = 0x00000000004DF000
	x28 = 0x00000000004AC000
	x25 = 0x00000000004AC000
	x27 = x27 + 0xFFFFFFFFFFFFFA50
	x26 = x26 + 0xFFFFFFFFFFFFFE74
	x28 = x28 + 0xFFFFFFFFFFFFFBE0
	branch x20 == 0x0000000000000000 l000000000043B24C
	// succ:  l000000000043B220 l000000000043B24C
l000000000043B220:
	x3 = x20
	goto l000000000043B230
	// succ:  l000000000043B230
l000000000043B228:
	branch Test(EQ,Z) l000000000043B90C
	// succ:  l000000000043B22C l000000000043B90C
l000000000043B22C:
	x3 = x19
	// succ:  l000000000043B230
l000000000043B230:
	x19 = x3
	v28 = Mem0[x19:byte]
	w2 = (word32) v28
	x19 = x19 + 1
	w31 = w2 - 0x0000003D
	NZCV = cond(w31)
	branch w2 != 0x00000000 l000000000043B228
	// succ:  l000000000043B240 l000000000043B228
l000000000043B240:
	x21 = x21 + 0x0000000000000008
	x20 = Mem0[x21:word64]
	branch x20 != 0x0000000000000000 l000000000043B220
	// succ:  l000000000043B24C l000000000043B220
l000000000043B24C:
	call set_pwd (retsize: 0;)
	x0 = 0x00000000004E3000
	x1 = Mem0[x0 + 1224:word64]
	x0 = 0x00000000004AB000
	x0 = x0 + 0xFFFFFFFFFFFFFD88
	call set_if_not (retsize: 0;)
	call getpid (retsize: 0;)
	x1 = 0x00000000004E3000
	Mem0[x1 + 1220:word32] = w0
	x1 = 0x00000000004AC000
	x0 = 0x00000000004AA000
	x1 = x1 + 0xFFFFFFFFFFFFFC18
	x0 = x0 + 0x0000000000000210
	call set_if_not (retsize: 0;)
	x0 = 0x00000000004AA000
	x1 = 0x00000000004AA000
	x0 = x0 + 0x0000000000000310
	x1 = x1 + 0x0000000000000328
	x21 = 0x00000000004DE000
	call set_if_not (retsize: 0;)
	w0 = Mem0[x21 + 1712:word32]
	branch w0 != 0x00000000 l000000000043BB80
	// succ:  l000000000043B2A4 l000000000043BB80
l000000000043B2A4:
	x1 = 0x00000000004AC000
	x0 = 0x00000000004AC000
	x1 = x1 + 0xFFFFFFFFFFFFFC58
	x0 = x0 + 0x0000000000000330
	call set_if_not (retsize: 0;)
	x1 = 0x00000000004AC000
	x0 = 0x00000000004AC000
	w2 = 0x00000000
	x1 = x1 + 0xFFFFFFFFFFFFFC60
	x0 = x0 + 0xFFFFFFFFFFFFF930
	call bind_variable (retsize: 0;)
	call setifs (retsize: 0;)
	x1 = 0x00000000004AC000
	x0 = 0x00000000004AC000
	x1 = x1 + 0xFFFFFFFFFFFFFC78
	x0 = x0 + 0xFFFFFFFFFFFFFC68
	call set_if_not (retsize: 0;)
	x1 = 0x00000000004AA000
	x0 = 0x00000000004AC000
	x1 = x1 + 0x0000000000000000
	x0 = x0 + 0xFFFFFFFFFFFFFC80
	call set_if_not (retsize: 0;)
	x23 = 0x00000000004A9000
	x0 = 0x00000000004AC000
	x1 = x23 + 0xFFFFFFFFFFFFFFF0
	x0 = x0 + 0xFFFFFFFFFFFFFC88
	call set_if_not (retsize: 0;)
	x0 = 0x00000000004DE000
	x1 = Mem0[x0 + 1752:word64]
	x0 = 0x00000000004AC000
	x0 = x0 + 0xFFFFFFFFFFFFFC98
	call set_if_not (retsize: 0;)
	w0 = Mem0[x21 + 1712:word32]
	branch w0 == 0x00000000 l000000000043B358
	// succ:  l000000000043B32C l000000000043B358
l000000000043B32C:
	x0 = 0x00000000004DE000
	w0 = Mem0[x0 + 1716:word32]
	branch w0 != 0x00000000 l000000000043BB00
	// succ:  l000000000043B338 l000000000043BB00
l000000000043B338:
	x1 = 0x00000000004AC000
	x1 = x1 + 0xFFFFFFFFFFFFFBB8
	// succ:  l000000000043B340
l000000000043B340:
	x0 = 0x00000000004AC000
	x0 = x0 + 0xFFFFFFFFFFFFFCA8
	call set_if_not (retsize: 0;)
	w1 = Mem0[x0 + 40:word32]
	w1 = w1 | 0x00000010
	Mem0[x0 + 40:word32] = w1
	// succ:  l000000000043B358
l000000000043B358:
	w0 = 0x00000001
	call adjust_shell_level (retsize: 0;)
	x19 = 0x00000000004AD000
	call set_ppid (retsize: 0;)
	x19 = x19 + 0xFFFFFFFFFFFFFB18
	x0 = 0x00000000004AC000
	x1 = x19
	w2 = 0x00000000
	x0 = x0 + 0xFFFFFFFFFFFFF9E0
	call bind_variable (retsize: 0;)
	w2 = Mem0[x0 + 40:word32]
	x1 = x0
	w2 = w2 | 0x00000010
	Mem0[x1 + 40:word32] = w2
	w0 = 0x00000000
	call getopts_reset (retsize: 0;)
	x0 = 0x00000000004AC000
	x1 = x19
	w2 = 0x00000000
	x0 = x0 + 0xFFFFFFFFFFFFF9E8
	call bind_variable (retsize: 0;)
	x19 = 0x00000000004DE000
	w0 = Mem0[x19 + 1736:word32]
	w2 = 0x00000001
	x1 = 0x00000000004D8000
	Mem0[x1 + 2136:word32] = w2
	NZCV = cond(w0 - w2)
	x20 = 0x00000000004D6000
	branch Test(EQ,Z) l000000000043BBAC
	// succ:  l000000000043B3CC l000000000043BBAC
l000000000043B3CC:
	x22 = 0x00000000004DE000
	x0 = Mem0[x22 + 1728:word64]
	v32 = Mem0[x0:byte]
	w1 = (word32) v32
	w31 = w1 - 0x0000002F
	NZCV = cond(w31)
	branch Test(EQ,Z) l000000000043BD70
	// succ:  l000000000043B3E0 l000000000043BD70
l000000000043B3E0:
	w31 = w1 - 0x0000002E
	NZCV = cond(w31)
	branch Test(EQ,Z) l000000000043BA94
	// succ:  l000000000043B3E8 l000000000043BA94
l000000000043B3E8:
	call find_user_command (retsize: 0;)
	x24 = x0
	branch x0 == 0x0000000000000000 l000000000043BCFC
	// succ:  l000000000043B3F4 l000000000043BCFC
l000000000043B3F4:
	call full_pathname (retsize: 0;)
	x19 = x0
	x1 = x25 + 0xFFFFFFFFFFFFF910
	x0 = x24
	w2 = 0x000002DB
	call sh_xfree (retsize: 0;)
	// succ:  l000000000043B40C
l000000000043B40C:
	x0 = 0x00000000004AC000
	x1 = x19
	w2 = 0x00000000
	x0 = x0 + 0xFFFFFFFFFFFFFCB8
	call bind_variable (retsize: 0;)
	x0 = x19
	x1 = x25 + 0xFFFFFFFFFFFFF910
	w2 = 0x000001ED
	call sh_xfree (retsize: 0;)
	x19 = 0x00000000004AC000
	x0 = x19 + 0xFFFFFFFFFFFFFD88
	call find_variable (retsize: 0;)
	branch x0 == 0x0000000000000000 l000000000043BC0C
	// succ:  l000000000043B440 l000000000043BC0C
l000000000043B440:
	call shell_version_string (retsize: 0;)
	x1 = x0
	x0 = 0x00000000004AC000
	w2 = 0x00000000
	x0 = x0 + 0xFFFFFFFFFFFFFCC0
	call bind_variable (retsize: 0;)
	x24 = 0x00000000004DF000
	x0 = x24 + 0xFFFFFFFFFFFFFC60
	x19 = 0x00000000004AC000
	x1 = Mem0[x0 + 32:word64]
	x19 = x19 + 0xFFFFFFFFFFFFFCD0
	x0 = x19
	call makunbound (retsize: 0;)
	x0 = x19
	call make_new_array_variable (retsize: 0;)
	x22 = x0
	x0 = 0x00000000004AE000
	x1 = Mem0[x0 + 1408:word64]
	x2 = 0x0000000000000020
	x0 = x29 + 0x0000000000000060
	x19 = Mem0[x22 + 8:word64]
	call __strcpy_chk (retsize: 0;)
	x0 = x29 + 0x0000000000000060
	w1 = 0x0000002E
	strchr(x0, x1)
	sp = sp + 0xFFFFFFFFFFFFFFF8
	branch x0 == 0x0000000000000000 l000000000043BD28
	// succ:  l000000000043B4A8 l000000000043BD28
l000000000043B4A8:
	x26 = x0 + 0x0000000000000001
	Mem0[x0:byte] = 0x00
	// succ:  l000000000043B4B0
l000000000043B4B0:
	x1 = 0x0000000000000000
	x2 = x29 + 0x0000000000000060
	x0 = x19
	call array_insert (retsize: 0;)
	x1 = 0x0000000000000001
	x2 = x26
	x0 = x19
	call array_insert (retsize: 0;)
	x0 = 0x00000000004AE000
	v34 = Mem0[x0 + 702:int32]
	x0 = (word64) v34
	x1 = x29 + 0x0000000000000080
	x2 = 0x000000000000000C
	call inttostr (retsize: 0;)
	x2 = x0
	x1 = 0x0000000000000002
	x0 = x19
	call array_insert (retsize: 0;)
	x0 = 0x00000000004AE000
	v35 = Mem0[x0 + 700:int32]
	x0 = (word64) v35
	x1 = x29 + 0x0000000000000080
	x2 = 0x000000000000000C
	call inttostr (retsize: 0;)
	x2 = x0
	x1 = 0x0000000000000003
	x0 = x19
	call array_insert (retsize: 0;)
	x0 = 0x00000000004AE000
	x2 = Mem0[x0 + 1392:word64]
	x1 = 0x0000000000000004
	x0 = x19
	call array_insert (retsize: 0;)
	x1 = 0x0000000000000005
	x0 = x19
	x2 = x23 + 0xFFFFFFFFFFFFFFF0
	call array_insert (retsize: 0;)
	w0 = Mem0[x22 + 40:word32]
	x1 = 0x00000000004E3000
	w0 = w0 | 0x00000002
	x1 = Mem0[x1 + 568:word64]
	Mem0[x22 + 40:word32] = w0
	branch x1 == 0x0000000000000000 l000000000043B564
	// succ:  l000000000043B554 l000000000043B564
l000000000043B554:
	x0 = 0x00000000004AC000
	x0 = x0 + 0xFFFFFFFFFFFFFCE0
	w2 = 0x00000000
	call bind_variable (retsize: 0;)
	// succ:  l000000000043B564
l000000000043B564:
	x0 = 0x00000000004AA000
	x0 = x0 + 0x0000000000000268
	call find_variable (retsize: 0;)
	branch x0 == 0x0000000000000000 l000000000043BD94
	// succ:  l000000000043B574 l000000000043BD94
l000000000043B574:
	w1 = Mem0[x0 + 40:word32]
	branch (w1 & 0x00008000) == 0x00000000 l000000000043BC00
	// succ:  l000000000043B57C l000000000043BC00
l000000000043B57C:
	x19 = 0x00000000004D7000
	w0 = Mem0[x19 + 388:word32]
	branch w0 == 0x00000000 l000000000043B5C8
	// succ:  l000000000043B588 l000000000043B5C8
l000000000043B588:
	x0 = 0x00000000004DE000
	w0 = Mem0[x0 + 1716:word32]
	branch w0 != 0x00000000 l000000000043BB0C
	// succ:  l000000000043B594 l000000000043BB0C
l000000000043B594:
	x0 = 0x00000000004AC000
	x0 = x0 + 0xFFFFFFFFFFFFFBD0
	// succ:  l000000000043B59C
l000000000043B59C:
	w1 = 0x00000000
	call bash_tilde_expand (retsize: 0;)
	x1 = x0
	x22 = x0
	x0 = 0x00000000004AC000
	x0 = x0 + 0xFFFFFFFFFFFFF990
	call set_if_not (retsize: 0;)
	x0 = x22
	x1 = x25 + 0xFFFFFFFFFFFFF910
	w2 = 0x0000020F
	call sh_xfree (retsize: 0;)
	// succ:  l000000000043B5C8
l000000000043B5C8:
	call fn00000000004368F0 (retsize: 0;)
	w0 = Mem0[x21 + 1712:word32]
	branch w0 != 0x00000000 l000000000043BB20
	// succ:  l000000000043B5D4 l000000000043BB20
l000000000043B5D4:
	w0 = Mem0[x20 + 1632:word32]
	x2 = 0x000000000000000B
	x1 = x29 + 0x0000000000000060
	x19 = 0x00000000004AC000
	call inttostr (retsize: 0;)
	x19 = x19 + 0xFFFFFFFFFFFFFD48
	x21 = x0
	x0 = x19
	call find_variable (retsize: 0;)
	x2 = x0
	branch x0 == 0x0000000000000000 l000000000043BDA8
	// succ:  l000000000043B600 l000000000043BDA8
l000000000043B600:
	x2 = x20 + 0x0000000000000660
	w0 = Mem0[x2 + 4:word32]
	w3 = Mem0[x20 + 1632:word32]
	NZCV = cond(w0 - w3)
	branch Test(EQ,Z) l000000000043B628
	// succ:  l000000000043B614 l000000000043B628
l000000000043B614:
	w0 = w0
	x1 = x29 + 0x0000000000000060
	x2 = 0x000000000000000B
	call inttostr (retsize: 0;)
	x21 = x0
	// succ:  l000000000043B628
l000000000043B628:
	x19 = 0x00000000004AC000
	x19 = x19 + 0xFFFFFFFFFFFFFD50
	x0 = x19
	call find_variable (retsize: 0;)
	x2 = x0
	branch x0 == 0x0000000000000000 l000000000043BD30
	// succ:  l000000000043B640 l000000000043BD30
l000000000043B640:
	x0 = 0x00000000004AC000
	x0 = x0 + 0xFFFFFFFFFFFFFD58
	call find_variable (retsize: 0;)
	branch x0 == 0x0000000000000000 l000000000043B660
	// succ:  l000000000043B650 l000000000043B660
l000000000043B650:
	w1 = Mem0[x0 + 40:word32]
	branch (w1 & 0x00008000) == 0x00000000 l000000000043B660
	// succ:  l000000000043B658 l000000000043B660
l000000000043B658:
	x0 = Mem0[x0:word64]
	call sv_xtracefd (retsize: 0;)
	// succ:  l000000000043B660
l000000000043B660:
	x20 = 0x00000000004AC000
	x0 = x20 + 0xFFFFFFFFFFFFFD68
	call find_variable (retsize: 0;)
	x19 = x0
	branch x0 == 0x0000000000000000 l000000000043BB18
	// succ:  l000000000043B674 l000000000043BB18
l000000000043B674:
	x24 = x24 + 0xFFFFFFFFFFFFFC60
	x0 = Mem0[x0 + 8:word64]
	x1 = x24 + 0x0000000000000008
	call legal_number (retsize: 0;)
	branch w0 == 0x00000000 l000000000043BAF8
	// succ:  l000000000043B688 l000000000043BAF8
l000000000043B688:
	x1 = Mem0[x19 + 8:word64]
	// succ:  l000000000043B68C
l000000000043B68C:
	w2 = 0x00000000
	x0 = x20 + 0xFFFFFFFFFFFFFD68
	call bind_variable (retsize: 0;)
	x3 = 0x0000000000436000
	x3 = x3 + 0xFFFFFFFFFFFFFF38
	Mem0[x0 + 24:word64] = x3
	x3 = 0x0000000000436000
	x3 = x3 + 0xFFFFFFFFFFFFFEEC
	x1 = 0x0000000000000000
	Mem0[x0 + 32:word64] = x3
	x0 = 0x00000000004AC000
	w2 = w1
	x0 = x0 + 0xFFFFFFFFFFFFFD70
	call bind_variable (retsize: 0;)
	x3 = 0x0000000000436000
	x1 = 0x0000000000000000
	x3 = x3 + 0xFFFFFFFFFFFFF85C
	Mem0[x0 + 24:word64] = x3
	Mem0[x0 + 32:word64] = x1
	x0 = 0x00000000004AC000
	w2 = w1
	x0 = x0 + 0xFFFFFFFFFFFFFD80
	call bind_variable (retsize: 0;)
	x3 = 0x0000000000436000
	x3 = x3 + 0xFFFFFFFFFFFFFDAC
	Mem0[x0 + 24:word64] = x3
	x3 = 0x0000000000436000
	x3 = x3 + 0xFFFFFFFFFFFFFE50
	x1 = 0x0000000000000000
	Mem0[x0 + 32:word64] = x3
	x0 = 0x00000000004AC000
	w2 = w1
	x0 = x0 + 0xFFFFFFFFFFFFFD90
	call bind_variable (retsize: 0;)
	x4 = 0x0000000000437000
	w2 = Mem0[x0 + 40:word32]
	x4 = x4 + 0xFFFFFFFFFFFFF8D0
	Mem0[x0 + 24:word64] = x4
	x4 = 0x0000000000437000
	w3 = w2 | 0x00000010
	x4 = x4 + 0x00000000000000C8
	x1 = 0x0000000000000000
	Mem0[x0 + 32:word64] = x4
	Mem0[x0 + 40:word32] = w3
	x0 = 0x00000000004AC000
	w2 = w1
	x0 = x0 + 0xFFFFFFFFFFFFFD98
	call bind_variable (retsize: 0;)
	x4 = 0x0000000000436000
	w2 = Mem0[x0 + 40:word32]
	x4 = x4 + 0xFFFFFFFFFFFFFEA0
	Mem0[x0 + 24:word64] = x4
	x4 = 0x0000000000436000
	w3 = w2 | 0x00000010
	x4 = x4 + 0xFFFFFFFFFFFFFDF8
	x1 = 0x0000000000000000
	Mem0[x0 + 32:word64] = x4
	Mem0[x0 + 40:word32] = w3
	x0 = 0x00000000004AC000
	w2 = w1
	x0 = x0 + 0xFFFFFFFFFFFFFDA0
	call bind_variable (retsize: 0;)
	x4 = 0x0000000000436000
	w2 = Mem0[x0 + 40:word32]
	x4 = x4 + 0xFFFFFFFFFFFFFD50
	Mem0[x0 + 24:word64] = x4
	w3 = 0x00000012
	x4 = 0x0000000000436000
	w3 = w2 | w3
	x4 = x4 + 0x00000000000005E8
	x1 = 0x0000000000000000
	Mem0[x0 + 32:word64] = x4
	Mem0[x0 + 40:word32] = w3
	x0 = 0x00000000004AC000
	w2 = w1
	x0 = x0 + 0xFFFFFFFFFFFFFDA8
	call bind_variable (retsize: 0;)
	w2 = Mem0[x0 + 40:word32]
	x4 = 0x0000000000436000
	x1 = 0x0000000000000000
	w3 = w2 | 0x00000010
	x4 = x4 + 0xFFFFFFFFFFFFFD04
	Mem0[x0 + 24:word64] = x4
	Mem0[x0 + 32:word64] = x1
	Mem0[x0 + 40:word32] = w3
	x0 = 0x00000000004AC000
	w2 = w1
	x0 = x0 + 0xFFFFFFFFFFFFFDB0
	call bind_variable (retsize: 0;)
	x4 = 0x0000000000436000
	x4 = x4 + 0xFFFFFFFFFFFFFC78
	Mem0[x0 + 24:word64] = x4
	x4 = 0x0000000000436000
	x4 = x4 + 0x00000000000007D8
	Mem0[x0 + 32:word64] = x4
	x1 = 0x0000000000436000
	x2 = 0x0000000000436000
	x0 = 0x00000000004AC000
	x1 = x1 + 0xFFFFFFFFFFFFFC28
	x2 = x2 + 0xFFFFFFFFFFFFFBF4
	w3 = 0x00000000
	x0 = x0 + 0xFFFFFFFFFFFFFDC0
	call fn0000000000439C10 (retsize: 0;)
	x21 = 0x0000000000436000
	x19 = x21 + 0x00000000000005EC
	x1 = 0x0000000000437000
	x0 = 0x00000000004AC000
	x2 = x19
	x1 = x1 + 0x0000000000000040
	w3 = 0x00004000
	x0 = x0 + 0xFFFFFFFFFFFFFDD0
	call fn0000000000439C10 (retsize: 0;)
	x20 = 0x0000000000436000
	x20 = x20 + 0x00000000000005F0
	x0 = 0x00000000004AC000
	x2 = x19
	x1 = x20
	w3 = 0x00006000
	x0 = x0 + 0xFFFFFFFFFFFFFBA0
	call fn0000000000439C10 (retsize: 0;)
	x0 = 0x00000000004AC000
	x2 = x19
	x1 = x20
	w3 = 0x00006000
	x0 = x0 + 0xFFFFFFFFFFFFFB90
	call fn0000000000439C10 (retsize: 0;)
	x0 = 0x00000000004AA000
	x2 = x19
	x1 = x20
	w3 = 0x00006000
	x0 = x0 + 0x00000000000003D8
	call fn0000000000439C10 (retsize: 0;)
	x0 = 0x00000000004AA000
	x2 = x19
	x0 = x0 + 0x00000000000003E8
	x1 = x20
	w3 = 0x00006000
	x19 = 0x00000000004AC000
	call fn0000000000439C10 (retsize: 0;)
	x19 = x19 + 0xFFFFFFFFFFFFFDD8
	x0 = x19
	call find_variable (retsize: 0;)
	branch x0 == 0x0000000000000000 l000000000043BC34
	// succ:  l000000000043B8C8 l000000000043BC34
l000000000043B8C8:
	x19 = 0x00000000004AC000
	x19 = x19 + 0xFFFFFFFFFFFFFDE8
	x0 = x19
	call find_variable (retsize: 0;)
	branch x0 == 0x0000000000000000 l000000000043BC74
	// succ:  l000000000043B8DC l000000000043BC74
l000000000043B8DC:
	x19 = 0x00000000004AA000
	x19 = x19 + 0x00000000000003C8
	x0 = x19
	call find_variable (retsize: 0;)
	branch x0 == 0x0000000000000000 l000000000043BCB4
	// succ:  l000000000043B8F0 l000000000043BCB4
l000000000043B8F0:
	v41 = sp + 16
	x19 = Mem0[v41:word64]
	v41 = v41 + 8
	x20 = Mem0[v41:word64]
	v42 = sp + 32
	x21 = Mem0[v42:word64]
	v42 = v42 + 8
	x22 = Mem0[v42:word64]
	v43 = sp + 48
	x23 = Mem0[v43:word64]
	v43 = v43 + 8
	x24 = Mem0[v43:word64]
	v44 = sp + 64
	x25 = Mem0[v44:word64]
	v44 = v44 + 8
	x26 = Mem0[v44:word64]
	v45 = sp + 80
	x27 = Mem0[v45:word64]
	v45 = v45 + 8
	x28 = Mem0[v45:word64]
	x29 = Mem0[sp:word64]
	sp = sp + 8
	x30 = Mem0[sp:word64]
	sp = sp + 144
	return
	// succ:  initialize_shell_variables_exit
l000000000043B90C:
	x2 = x19 - x20
	w23 = w2 - 0x00000001
	NZCV = cond(w23)
	branch Test(EQ,Z) l000000000043B240
	// succ:  l000000000043B918 l000000000043B240
l000000000043B918:
l000000000043BA94:
	v38 = Mem0[x0 + 1:byte]
	w1 = (word32) v38
	w31 = w1 - 0x0000002F
	NZCV = cond(w31)
	branch Test(NE,Z) l000000000043B3E8
	// succ:  l000000000043BAA0 l000000000043B3E8
l000000000043BAA0:
	x0 = 0x00000000004AA000
	x0 = x0 + 0x0000000000000520
	call get_string_value (retsize: 0;)
	x26 = x0
	branch x0 == 0x0000000000000000 l000000000043BE04
	// succ:  l000000000043BAB4 l000000000043BE04
l000000000043BAB4:
	strlen(x0)
	sp = sp + 0xFFFFFFFFFFFFFFF8
l000000000043BAF8:
	Mem0[x24 + 8:word64] = 0x0000000000000000
	goto l000000000043B688
	// succ:  l000000000043B688
l000000000043BB00:
	x1 = 0x00000000004AC000
	x1 = x1 + 0xFFFFFFFFFFFFFBB0
	goto l000000000043B340
	// succ:  l000000000043B340
l000000000043BB0C:
	x0 = 0x00000000004AC000
	x0 = x0 + 0xFFFFFFFFFFFFFBC0
	goto l000000000043B59C
	// succ:  l000000000043B59C
l000000000043BB18:
	x1 = x0
	goto l000000000043B68C
	// succ:  l000000000043B68C
l000000000043BB20:
	x0 = 0x00000000004AC000
	x0 = x0 + 0xFFFFFFFFFFFFFCF8
	call find_variable (retsize: 0;)
	branch x0 == 0x0000000000000000 l000000000043BE8C
	// succ:  l000000000043BB30 l000000000043BE8C
l000000000043BB30:
	w1 = Mem0[x0 + 40:word32]
	branch (w1 & 0x00008000) == 0x00000000 l000000000043BC28
	// succ:  l000000000043BB38 l000000000043BC28
l000000000043BB38:
	w0 = Mem0[x21 + 1712:word32]
	branch w0 == 0x00000000 l000000000043B5D4
	// succ:  l000000000043BB40 l000000000043B5D4
l000000000043BB40:
	w0 = Mem0[x19 + 388:word32]
	branch w0 == 0x00000000 l000000000043B5D4
	// succ:  l000000000043BB48 l000000000043B5D4
l000000000043BB48:
	x0 = 0x00000000004AC000
	x0 = x0 + 0xFFFFFFFFFFFFFD18
	call sv_history_control (retsize: 0;)
	x0 = 0x00000000004AC000
	x0 = x0 + 0xFFFFFFFFFFFFFD28
	call setup_history_ignore (retsize: 0;)
	x0 = 0x00000000004AC000
	x0 = x0 + 0xFFFFFFFFFFFFFD38
	call find_variable (retsize: 0;)
	x31 = x0 - x31
	NZCV = cond(x31)
	w1 = (word32) Test(NE,Z)
	x0 = 0x00000000004E2000
	Mem0[x0 + 3952:word32] = w1
	goto l000000000043B5D4
	// succ:  l000000000043B5D4
l000000000043BB80:
	x0 = 0x00000000004D6000
	x1 = Mem0[x0 + 2584:word64]
	x0 = 0x00000000004AA000
	x0 = x0 + 0x0000000000000340
	call set_if_not (retsize: 0;)
	x0 = 0x00000000004D6000
	x1 = Mem0[x0 + 2576:word64]
	x0 = 0x00000000004AA000
	x0 = x0 + 0x0000000000000348
	call set_if_not (retsize: 0;)
	goto l000000000043B2A4
	// succ:  l000000000043B2A4
l000000000043BBAC:
	x0 = 0x00000000004DE000
	w0 = Mem0[x0 + 1716:word32]
	branch w0 == 0x00000000 l000000000043BD50
	// succ:  l000000000043BBB8 l000000000043BD50
l000000000043BBB8:
	x22 = 0x00000000004DE000
	x0 = Mem0[x22 + 1728:word64]
	v37 = Mem0[x0:byte]
	w1 = (word32) v37
	w31 = w1 - 0x0000002F
	NZCV = cond(w31)
	branch Test(EQ,Z) l000000000043BD70
	// succ:  l000000000043BBCC l000000000043BD70
l000000000043BBCC:
	x19 = x20 + 0x0000000000000660
	x0 = Mem0[x19 + 24:word64]
	branch x0 == 0x0000000000000000 l000000000043BDF8
	// succ:  l000000000043BBD8 l000000000043BDF8
l000000000043BBD8:
	strlen(x0)
	sp = sp + 0xFFFFFFFFFFFFFFF8
	x1 = x25 + 0xFFFFFFFFFFFFF910
	w2 = 0x000002A2
	// succ:  l000000000043BBE4
l000000000043BBE4:
	x0 = x0 + 0x0000000000000001
	call sh_xmalloc (retsize: 0;)
	x1 = x20 + 0x0000000000000660
	x1 = Mem0[x1 + 24:word64]
	strcpy(x0, x1)
	sp = sp + 0xFFFFFFFFFFFFFFF8
	x19 = x0
	goto l000000000043B40C
	// succ:  l000000000043B40C
l000000000043BC00:
	x0 = Mem0[x0:word64]
	call sv_strict_posix (retsize: 0;)
	goto l000000000043B57C
	// succ:  l000000000043B57C
l000000000043BC0C:
	x22 = x20 + 0x0000000000000660
	x1 = Mem0[x22 + 24:word64]
	branch x1 == 0x0000000000000000 l000000000043BEBC
	// succ:  l000000000043BC18 l000000000043BEBC
l000000000043BC18:
	x0 = x19 + 0xFFFFFFFFFFFFFD88
	w2 = 0x00000000
	call bind_variable (retsize: 0;)
	goto l000000000043B440
	// succ:  l000000000043B440
l000000000043BC28:
	x0 = Mem0[x0:word64]
	call sv_ignoreeof (retsize: 0;)
	goto l000000000043BB38
	// succ:  l000000000043BB38
l000000000043BC34:
	x0 = x19
	call make_new_assoc_variable (retsize: 0;)
	x2 = 0x0000000000436000
	w1 = Mem0[x0 + 40:word32]
	x2 = x2 + 0xFFFFFFFFFFFFFBA0
	Mem0[x0 + 24:word64] = x2
	x19 = 0x00000000004AC000
	x2 = 0x0000000000436000
	w1 = w1 | 0x00020000
	x2 = x2 + 0xFFFFFFFFFFFFFBC4
	x19 = x19 + 0xFFFFFFFFFFFFFDE8
	Mem0[x0 + 32:word64] = x2
	Mem0[x0 + 40:word32] = w1
	x0 = x19
	call find_variable (retsize: 0;)
	branch x0 != 0x0000000000000000 l000000000043B8DC
	// succ:  l000000000043BC74 l000000000043B8DC
l000000000043BC74:
	x0 = x19
	call make_new_assoc_variable (retsize: 0;)
	x2 = 0x0000000000436000
	w1 = Mem0[x0 + 40:word32]
	x2 = x2 + 0xFFFFFFFFFFFFFA74
	Mem0[x0 + 24:word64] = x2
	x19 = 0x00000000004AA000
	x2 = 0x0000000000436000
	w1 = w1 | 0x00020000
	x2 = x2 + 0xFFFFFFFFFFFFFA4C
	x19 = x19 + 0x00000000000003C8
	Mem0[x0 + 32:word64] = x2
	Mem0[x0 + 40:word32] = w1
	x0 = x19
	call find_variable (retsize: 0;)
	branch x0 != 0x0000000000000000 l000000000043B8F0
	// succ:  l000000000043BCB4 l000000000043B8F0
l000000000043BCB4:
	x0 = x19
	call make_new_array_variable (retsize: 0;)
	w1 = Mem0[x0 + 40:word32]
	w2 = 0x00005000
	w1 = w1 | w2
	x2 = 0x0000000000436000
	x21 = x21 + 0x00000000000005EC
	x2 = x2 + 0x00000000000005F4
	Mem0[x0 + 32:word64] = x21
	Mem0[x0 + 24:word64] = x2
	Mem0[x0 + 40:word32] = w1
	v46 = sp + 16
	x19 = Mem0[v46:word64]
	v46 = v46 + 8
	x20 = Mem0[v46:word64]
	v47 = sp + 32
	x21 = Mem0[v47:word64]
	v47 = v47 + 8
	x22 = Mem0[v47:word64]
	v48 = sp + 48
	x23 = Mem0[v48:word64]
	v48 = v48 + 8
	x24 = Mem0[v48:word64]
	v49 = sp + 64
	x25 = Mem0[v49:word64]
	v49 = v49 + 8
	x26 = Mem0[v49:word64]
	v50 = sp + 80
	x27 = Mem0[v50:word64]
	v50 = v50 + 8
	x28 = Mem0[v50:word64]
	x29 = Mem0[sp:word64]
	sp = sp + 8
	x30 = Mem0[sp:word64]
	sp = sp + 144
	return
	// succ:  initialize_shell_variables_exit
l000000000043BCFC:
	x0 = Mem0[x22 + 1728:word64]
	x22 = 0x00000000004DE000
	call file_status (retsize: 0;)
	branch (w0 & 0x00000002) == 0x00000000 l000000000043BE18
	// succ:  l000000000043BD0C l000000000043BE18
l000000000043BD0C:
	x19 = x20 + 0x0000000000000660
	x0 = Mem0[x19 + 24:word64]
	branch x0 == 0x0000000000000000 l000000000043BEC8
	// succ:  l000000000043BD18 l000000000043BEC8
l000000000043BD18:
	strlen(x0)
	sp = sp + 0xFFFFFFFFFFFFFFF8
	x1 = x25 + 0xFFFFFFFFFFFFF910
	w2 = 0x000002D5
	goto l000000000043BBE4
	// succ:  l000000000043BBE4
l000000000043BD28:
	x26 = x0
	goto l000000000043B4B0
	// succ:  l000000000043B4B0
l000000000043BD30:
	x1 = x21
	x0 = x19
	call bind_variable (retsize: 0;)
	w1 = Mem0[x0 + 40:word32]
	w2 = 0x00000012
	w1 = w1 | w2
	Mem0[x0 + 40:word32] = w1
	goto l000000000043B640
	// succ:  l000000000043B640
l000000000043BD50:
	x22 = 0x00000000004AB000
	x0 = x22 + 0xFFFFFFFFFFFFFA10
	call find_variable (retsize: 0;)
	branch x0 == 0x0000000000000000 l000000000043BE70
	// succ:  l000000000043BD60 l000000000043BE70
l000000000043BD60:
	w0 = Mem0[x19 + 1736:word32]
	w31 = w0 - 0x00000001
	NZCV = cond(w31)
	branch Test(EQ,Z) l000000000043BBB8
	// succ:  l000000000043BD6C l000000000043BBB8
l000000000043BD6C:
	goto l000000000043B3CC
	// succ:  l000000000043B3CC
l000000000043BD70:
	strlen(x0)
	sp = sp + 0xFFFFFFFFFFFFFFF8
	x1 = x25 + 0xFFFFFFFFFFFFF910
	w2 = 0x000002A5
	// succ:  l000000000043BD7C
l000000000043BD7C:
	x0 = x0 + 0x0000000000000001
	call sh_xmalloc (retsize: 0;)
	x1 = Mem0[x22 + 1728:word64]
	strcpy(x0, x1)
	sp = sp + 0xFFFFFFFFFFFFFFF8
	x19 = x0
	goto l000000000043B40C
	// succ:  l000000000043B40C
l000000000043BD94:
	x0 = 0x00000000004AA000
	x0 = x0 + 0x0000000000000278
	call find_variable (retsize: 0;)
	branch x0 == 0x0000000000000000 l000000000043B57C
	// succ:  l000000000043BDA4 l000000000043B57C
l000000000043BDA4:
	goto l000000000043B574
	// succ:  l000000000043B574
l000000000043BDA8:
	x1 = x21
	x0 = x19
	call bind_variable (retsize: 0;)
	w1 = Mem0[x0 + 40:word32]
	w2 = 0x00000012
	w1 = w1 | w2
	Mem0[x0 + 40:word32] = w1
	goto l000000000043B600
	// succ:  l000000000043B600
l000000000043BDF8:
	call get_current_user_info (retsize: 0;)
	x0 = Mem0[x19 + 24:word64]
	goto l000000000043BBD8
	// succ:  l000000000043BBD8
l000000000043BE04:
	x0 = Mem0[x22 + 1728:word64]
	strlen(x0)
	sp = sp + 0xFFFFFFFFFFFFFFF8
	x1 = x25 + 0xFFFFFFFFFFFFF910
	w2 = 0x000002B5
	goto l000000000043BD7C
	// succ:  l000000000043BD7C
l000000000043BE18:
	x0 = 0x00000000004AA000
	x19 = Mem0[x22 + 1728:word64]
	x0 = x0 + 0x0000000000000520
	call get_string_value (retsize: 0;)
	x1 = x0
	x0 = x19
	call make_absolute (retsize: 0;)
	x1 = Mem0[x22 + 1728:word64]
	x19 = x0
	v51 = Mem0[x1:byte]
	w1 = (word32) v51
	w31 = w1 - 0x0000002E
	NZCV = cond(w31)
	branch Test(NE,Z) l000000000043B40C
	// succ:  l000000000043BE48 l000000000043B40C
l000000000043BE48:
	w1 = 0x00000003
	call sh_canonpath (retsize: 0;)
	x22 = x0
	branch x0 == 0x0000000000000000 l000000000043B40C
	// succ:  l000000000043BE58 l000000000043B40C
l000000000043BE58:
	x0 = x19
	x1 = x25 + 0xFFFFFFFFFFFFF910
	w2 = 0x000002CC
	call sh_xfree (retsize: 0;)
	x19 = x22
	goto l000000000043B40C
	// succ:  l000000000043B40C
l000000000043BE70:
	x24 = x20 + 0x0000000000000660
	x1 = Mem0[x24 + 32:word64]
	branch x1 == 0x0000000000000000 l000000000043BED4
	// succ:  l000000000043BE7C l000000000043BED4
l000000000043BE7C:
	x0 = x22 + 0xFFFFFFFFFFFFFA10
	w2 = 0x00000000
	call bind_variable (retsize: 0;)
	goto l000000000043BD60
	// succ:  l000000000043BD60
l000000000043BE8C:
	x0 = 0x00000000004AC000
	x0 = x0 + 0xFFFFFFFFFFFFFD08
	call find_variable (retsize: 0;)
	branch x0 == 0x0000000000000000 l000000000043BB38
	// succ:  l000000000043BE9C l000000000043BB38
l000000000043BE9C:
	goto l000000000043BB30
	// succ:  l000000000043BB30
l000000000043BEBC:
	call get_current_user_info (retsize: 0;)
	x1 = Mem0[x22 + 24:word64]
	goto l000000000043BC18
	// succ:  l000000000043BC18
l000000000043BEC8:
	call get_current_user_info (retsize: 0;)
	x0 = Mem0[x19 + 24:word64]
	goto l000000000043BD18
	// succ:  l000000000043BD18
l000000000043BED4:
	call get_current_user_info (retsize: 0;)
	x1 = Mem0[x24 + 32:word64]
	goto l000000000043BE7C
	// succ:  l000000000043BE7C
initialize_shell_variables_exit:


// fn000000000043BEE0
// Return size: 0
void fn000000000043BEE0()
fn000000000043BEE0_entry:
	// succ:  l000000000043BEE0
l000000000043BEE0:
	sp = fp
	sp = sp + -80
	Mem0[sp:word64] = x29
	sp = sp + 8
	Mem0[sp:word64] = x30
	x29 = x31 + 0x0000000000000000
	v6 = sp + 16
	Mem0[v6:word64] = x19
	v6 = v6 + 8
	Mem0[v6:word64] = x20
	x20 = 0x00000000004DF000
	x1 = x20 + 0xFFFFFFFFFFFFFC60
	x2 = Mem0[x1 + 40:word64]
	v11 = sp + 32
	Mem0[v11:word64] = x21
	v11 = v11 + 8
	Mem0[v11:word64] = x22
	Mem0[sp + 48:word64] = x23
	x1 = x0
	branch x2 == 0x0000000000000000 l000000000043BFBC
	// succ:  l000000000043BF08 l000000000043BFBC
l000000000043BF08:
	w0 = Mem0[x2 + 12:word32]
	w0 = w0 + 0x00000001
	// succ:  l000000000043BF10
l000000000043BF10:
	x23 = 0x00000000004E3000
	Mem0[x29 + 64:word64] = x1
	x21 = 0x00000000004E3000
	call strvec_create (retsize: 0;)
	Mem0[x21 + 1208:word64] = x0
	Mem0[x23 + 1304:word32] = 0x00000000
	x20 = x20 + 0xFFFFFFFFFFFFFC60
	Mem0[x0:word64] = 0x0000000000000000
	x0 = Mem0[x20 + 40:word64]
	x1 = Mem0[x29 + 64:word64]
	x19 = 0x0000000000000000
	call hash_flush (retsize: 0;)
	x0 = Mem0[x20 + 40:word64]
	x22 = x23 + 0x0000000000000518
	call hash_dispose (retsize: 0;)
	w0 = Mem0[x23 + 1304:word32]
	x1 = Mem0[x21 + 1208:word64]
	Mem0[x20 + 40:word64] = x19
	Mem0[x1 + (int64) ((int32) w0):word64] = x19
	x1 = 0x00000000004D6000
	w2 = 0x00000001
	x1 = x1 + 0xFFFFFFFFFFFFFA50
	Mem0[x1 + 8:word32] = w2
	NZCV = cond(w0 - w31)
	w20 = w19
	branch Test(LE,ZCV) l000000000043BF98
	// succ:  l000000000043BF78 l000000000043BF98
l000000000043BF78:
	x0 = Mem0[x21 + 1208:word64]
	w20 = w20 + 0x00000001
	x0 = Mem0[x0 + x19:word64]
	x19 = x19 + 0x0000000000000008
	call stupidly_hack_special_variables (retsize: 0;)
	w0 = Mem0[x22:word32]
	NZCV = cond(w0 - w20)
	branch Test(GT,NZV) l000000000043BF78
	// succ:  l000000000043BF98 l000000000043BF78
l000000000043BF98:
	x0 = Mem0[x21 + 1208:word64]
	call strvec_dispose (retsize: 0;)
	Mem0[x21 + 1208:word64] = 0x0000000000000000
	Mem0[x23 + 1304:word32] = 0x00000000
	v24 = sp + 16
	x19 = Mem0[v24:word64]
	v24 = v24 + 8
	x20 = Mem0[v24:word64]
	v25 = sp + 32
	x21 = Mem0[v25:word64]
	v25 = v25 + 8
	x22 = Mem0[v25:word64]
	x23 = Mem0[sp + 48:word64]
	x29 = Mem0[sp:word64]
	sp = sp + 8
	x30 = Mem0[sp:word64]
	sp = sp + 80
	return
	// succ:  fn000000000043BEE0_exit
l000000000043BFBC:
	w0 = 0x00000001
	goto l000000000043BF10
	// succ:  l000000000043BF10
fn000000000043BEE0_exit:


// dispose_used_env_vars
// Return size: 0
void dispose_used_env_vars()
dispose_used_env_vars_entry:
	// succ:  l000000000043BFC4
l000000000043BFC4:
	sp = fp
	sp = sp + -16
	Mem0[sp:word64] = x29
	sp = sp + 8
	Mem0[sp:word64] = x30
	x29 = x31 + 0x0000000000000000
	x0 = 0x00000000004DF000
	x0 = x0 + 0xFFFFFFFFFFFFFC60
	x0 = Mem0[x0 + 40:word64]
	branch x0 == 0x0000000000000000 l000000000043BFF8
	// succ:  l000000000043BFDC l000000000043BFF8
l000000000043BFDC:
	x0 = 0x0000000000439000
	x0 = x0 + 0xFFFFFFFFFFFFF844
	call fn000000000043BEE0 (retsize: 0;)
	x0 = 0x00000000004D6000
	x0 = x0 + 0xFFFFFFFFFFFFFA50
	w0 = Mem0[x0 + 8:word32]
	branch w0 != 0x00000000 l000000000043C000
	// succ:  l000000000043BFF8 l000000000043C000
l000000000043BFF8:
	x29 = Mem0[sp:word64]
	sp = sp + 8
	x30 = Mem0[sp:word64]
	sp = sp + 16
	return
	// succ:  dispose_used_env_vars_exit
l000000000043C000:
	x29 = Mem0[sp:word64]
	sp = sp + 8
	x30 = Mem0[sp:word64]
	sp = sp + 16
	// succ:  l000000000043C004_thunk_fn000000000043A398
l000000000043C004_thunk_fn000000000043A398:
	call fn000000000043A398 (retsize: 0;)
	return
	// succ:  dispose_used_env_vars_exit
dispose_used_env_vars_exit:


// merge_temporary_env
// Return size: 0
void merge_temporary_env()
merge_temporary_env_entry:
	// succ:  l000000000043C008
l000000000043C008:
	sp = fp
	x0 = 0x00000000004DF000
	x0 = x0 + 0xFFFFFFFFFFFFFC60
	x0 = Mem0[x0 + 40:word64]
	branch x0 == 0x0000000000000000 l000000000043C024
	// succ:  l000000000043C018 l000000000043C024
l000000000043C018:
	x0 = 0x0000000000439000
	x0 = x0 + 0x00000000000006C8
	// succ:  l000000000043C020_thunk_fn000000000043BEE0
l000000000043C020_thunk_fn000000000043BEE0:
	call fn000000000043BEE0 (retsize: 0;)
	return
	// succ:  merge_temporary_env_exit
l000000000043C024:
	return
	// succ:  merge_temporary_env_exit
merge_temporary_env_exit:


// reinit_special_variables
// Return size: 0
void reinit_special_variables()
reinit_special_variables_entry:
	// succ:  l000000000043C1D0
l000000000043C1D0:
	sp = fp
	sp = sp + -16
	Mem0[sp:word64] = x29
	sp = sp + 8
	Mem0[sp:word64] = x30
	x29 = x31 + 0x0000000000000000
	x0 = 0x00000000004AC000
	x0 = x0 + 0xFFFFFFFFFFFFFDB0
	call sv_comp_wordbreaks (retsize: 0;)
	x0 = 0x00000000004DF000
	w0 = Mem0[x0 + 3752:word32]
	branch w0 != 0x00000000 l000000000043C1FC
	// succ:  l000000000043C1F0 l000000000043C1FC
l000000000043C1F0:
	x0 = 0x00000000004AC000
	x0 = x0 + 0xFFFFFFFFFFFFFDF8
	call setup_glob_ignore (retsize: 0;)
	// succ:  l000000000043C1FC
l000000000043C1FC:
	x0 = 0x00000000004AC000
	x29 = Mem0[sp:word64]
	sp = sp + 8
	x30 = Mem0[sp:word64]
	sp = sp + 16
	x0 = x0 + 0xFFFFFFFFFFFFF9E8
	// succ:  l000000000043C208_thunk_sv_opterr
l000000000043C208_thunk_sv_opterr:
	call sv_opterr (retsize: 0;)
	return
	// succ:  reinit_special_variables_exit
reinit_special_variables_exit:


// set_pipestatus_array
// Return size: 0
void set_pipestatus_array()
set_pipestatus_array_entry:
	// succ:  l000000000043C20C
l000000000043C20C:
	sp = fp
	sp = sp + -96
	Mem0[sp:word64] = x29
	sp = sp + 8
	Mem0[sp:word64] = x30
	x29 = x31 + 0x0000000000000000
	v6 = sp + 16
	Mem0[v6:word64] = x19
	v6 = v6 + 8
	Mem0[v6:word64] = x20
	x19 = 0x00000000004AC000
	x19 = x19 + 0xFFFFFFFFFFFFFE08
	v9 = sp + 32
	Mem0[v9:word64] = x21
	v9 = v9 + 8
	Mem0[v9:word64] = x22
	x22 = x0
	x0 = x19
	v13 = sp + 48
	Mem0[v13:word64] = x23
	v13 = v13 + 8
	Mem0[v13:word64] = x24
	Mem0[sp + 64:word64] = x25
	w24 = w1
	call find_variable (retsize: 0;)
	branch x0 == 0x0000000000000000 l000000000043C3A0
	// succ:  l000000000043C240 l000000000043C3A0
l000000000043C240:
	w1 = Mem0[x0 + 40:word32]
	branch (w1 & 0x00000004) == 0x00000000 l000000000043C2FC
	// succ:  l000000000043C248 l000000000043C2FC
l000000000043C248:
	x20 = Mem0[x0 + 8:word64]
	branch x20 == 0x0000000000000000 l000000000043C314
	// succ:  l000000000043C250 l000000000043C314
l000000000043C250:
	w0 = Mem0[x20 + 16:word32]
	branch w0 == 0x00000000 l000000000043C314
	// succ:  l000000000043C258 l000000000043C314
l000000000043C258:
	NZCV = cond(w0 - w24)
	branch Test(EQ,Z) l000000000043C36C
	// succ:  l000000000043C260 l000000000043C36C
l000000000043C260:
	branch Test(GT,NZV) l000000000043C3AC
	// succ:  l000000000043C264 l000000000043C3AC
l000000000043C264:
	NZCV = cond(w0 - w31)
	x19 = Mem0[x20 + 24:word64]
	branch Test(LE,ZCV) l000000000043C3FC
	// succ:  l000000000043C270 l000000000043C3FC
l000000000043C270:
	x25 = 0x00000000004AC000
	x23 = x22
	w21 = 0x00000000
	x25 = x25 + 0xFFFFFFFFFFFFF910
	// succ:  l000000000043C280
l000000000043C280:
	x19 = Mem0[x19 + 16:word64]
	w2 = 0x00001264
	x0 = Mem0[x19 + 8:word64]
	x1 = x25
	call sh_xfree (retsize: 0;)
	v28 = Mem0[x23:int32]
	x0 = (word64) v28
	x23 = x23 + 4
	w21 = w21 + 0x00000001
	call itos (retsize: 0;)
	w2 = Mem0[x20 + 16:word32]
	Mem0[x19 + 8:word64] = x0
	NZCV = cond(w2 - w21)
	branch Test(GT,NZV) l000000000043C280
	// succ:  l000000000043C2B0 l000000000043C280
l000000000043C2B0:
	NZCV = cond(w24 - w21)
	branch Test(LE,ZCV) l000000000043C2FC
	// succ:  l000000000043C2B8 l000000000043C2FC
l000000000043C2B8:
	w24 = w24 - 0x00000001
	w24 = w24 - w21
l000000000043C2FC:
	v29 = sp + 16
	x19 = Mem0[v29:word64]
	v29 = v29 + 8
	x20 = Mem0[v29:word64]
	v30 = sp + 32
	x21 = Mem0[v30:word64]
	v30 = v30 + 8
	x22 = Mem0[v30:word64]
	v31 = sp + 48
	x23 = Mem0[v31:word64]
	v31 = v31 + 8
	x24 = Mem0[v31:word64]
	x25 = Mem0[sp + 64:word64]
	x29 = Mem0[sp:word64]
	sp = sp + 8
	x30 = Mem0[sp:word64]
	sp = sp + 96
	return
	// succ:  set_pipestatus_array_exit
l000000000043C314:
	NZCV = cond(w24 - w31)
	branch Test(LE,ZCV) l000000000043C2FC
	// succ:  l000000000043C31C l000000000043C2FC
l000000000043C31C:
	w21 = w24 - 0x00000001
	x21 = x21 + 0x0000000000000001
	x19 = 0x0000000000000000
	// succ:  l000000000043C328
l000000000043C328:
	v34 = Mem0[x22 + x19 * 4:int32]
	x0 = (word64) v34
	x1 = x29 + 0x0000000000000050
	x2 = 0x000000000000000C
	call inttostr (retsize: 0;)
	x2 = x0
	x1 = x19
	x0 = x20
	call array_insert (retsize: 0;)
	x19 = x19 + 0x0000000000000001
	x31 = x19 - x21
	NZCV = cond(x31)
	branch Test(NE,Z) l000000000043C328
	// succ:  l000000000043C354 l000000000043C328
l000000000043C354:
	v35 = sp + 16
	x19 = Mem0[v35:word64]
	v35 = v35 + 8
	x20 = Mem0[v35:word64]
	v36 = sp + 32
	x21 = Mem0[v36:word64]
	v36 = v36 + 8
	x22 = Mem0[v36:word64]
	v37 = sp + 48
	x23 = Mem0[v37:word64]
	v37 = v37 + 8
	x24 = Mem0[v37:word64]
	x25 = Mem0[sp + 64:word64]
	x29 = Mem0[sp:word64]
	sp = sp + 8
	x30 = Mem0[sp:word64]
	sp = sp + 96
	return
	// succ:  set_pipestatus_array_exit
l000000000043C36C:
	w31 = w24 - 0x00000001
	NZCV = cond(w31)
	branch Test(NE,Z) l000000000043C264
	// succ:  l000000000043C374 l000000000043C264
l000000000043C374:
	x0 = Mem0[x20 + 24:word64]
	x1 = 0x00000000004AC000
	x19 = Mem0[x0 + 16:word64]
	x1 = x1 + 0xFFFFFFFFFFFFF910
	x0 = Mem0[x19 + 8:word64]
	w2 = 0x0000125A
	call sh_xfree (retsize: 0;)
	v33 = Mem0[x22:int32]
	x0 = (word64) v33
	call itos (retsize: 0;)
	Mem0[x19 + 8:word64] = x0
	goto l000000000043C2FC
	// succ:  l000000000043C2FC
l000000000043C3A0:
	x0 = x19
	call make_new_array_variable (retsize: 0;)
	goto l000000000043C240
	// succ:  l000000000043C240
l000000000043C3AC:
	x0 = x20
	call array_flush (retsize: 0;)
	w0 = Mem0[x22:word32]
	w31 = w0 + 0x00000001
	NZCV = cond(w31)
	branch Test(EQ,Z) l000000000043C2FC
	// succ:  l000000000043C3C0 l000000000043C2FC
l000000000043C3C0:
	x22 = x22 + 0x0000000000000004
	x19 = 0x0000000000000000
	x1 = x29 + 0x0000000000000050
	x2 = 0x000000000000000C
l000000000043C3FC:
	w21 = 0x00000000
	goto l000000000043C2B0
	// succ:  l000000000043C2B0
set_pipestatus_array_exit:


// save_pipestatus_array
// Return size: 0
void save_pipestatus_array()
save_pipestatus_array_entry:
	// succ:  l000000000043C404
l000000000043C404:
	sp = fp
	sp = sp + -16
	Mem0[sp:word64] = x29
	sp = sp + 8
	Mem0[sp:word64] = x30
	x29 = x31 + 0x0000000000000000
	x0 = 0x00000000004AC000
	x0 = x0 + 0xFFFFFFFFFFFFFE08
	call find_variable (retsize: 0;)
	branch x0 == 0x0000000000000000 l000000000043C434
	// succ:  l000000000043C41C l000000000043C434
l000000000043C41C:
	w1 = Mem0[x0 + 40:word32]
	branch (w1 & 0x00000004) == 0x00000000 l000000000043C434
	// succ:  l000000000043C424 l000000000043C434
l000000000043C424:
	x0 = Mem0[x0 + 8:word64]
	branch x0 == 0x0000000000000000 l000000000043C434
	// succ:  l000000000043C42C l000000000043C434
l000000000043C42C:
	x29 = Mem0[sp:word64]
	sp = sp + 8
	x30 = Mem0[sp:word64]
	sp = sp + 16
	// succ:  l000000000043C430_thunk_array_copy
l000000000043C430_thunk_array_copy:
	call array_copy (retsize: 0;)
	return
	// succ:  save_pipestatus_array_exit
l000000000043C434:
	x0 = 0x0000000000000000
	x29 = Mem0[sp:word64]
	sp = sp + 8
	x30 = Mem0[sp:word64]
	sp = sp + 16
	return
	// succ:  save_pipestatus_array_exit
save_pipestatus_array_exit:


// restore_pipestatus_array
// Return size: 0
void restore_pipestatus_array()
restore_pipestatus_array_entry:
	// succ:  l000000000043C440
l000000000043C440:
	sp = fp
	sp = sp + -32
	Mem0[sp:word64] = x29
	sp = sp + 8
	Mem0[sp:word64] = x30
	x29 = x31 + 0x0000000000000000
	Mem0[sp + 16:word64] = x19
	x19 = x0
	x0 = 0x00000000004AC000
	x0 = x0 + 0xFFFFFFFFFFFFFE08
	call find_variable (retsize: 0;)
	x1 = x0
	branch x0 == 0x0000000000000000 l000000000043C484
	// succ:  l000000000043C464 l000000000043C484
l000000000043C464:
	w2 = Mem0[x0 + 40:word32]
	branch (w2 & 0x00000004) == 0x00000000 l000000000043C484
	// succ:  l000000000043C46C l000000000043C484
l000000000043C46C:
	x0 = Mem0[x1 + 8:word64]
	branch x0 == 0x0000000000000000 l000000000043C484
	// succ:  l000000000043C474 l000000000043C484
l000000000043C474:
	Mem0[x1 + 8:word64] = x19
	x19 = Mem0[sp + 16:word64]
	x29 = Mem0[sp:word64]
	sp = sp + 8
	x30 = Mem0[sp:word64]
	sp = sp + 32
	// succ:  l000000000043C480_thunk_array_dispose
l000000000043C480_thunk_array_dispose:
	call array_dispose (retsize: 0;)
	return
	// succ:  restore_pipestatus_array_exit
l000000000043C484:
	x19 = Mem0[sp + 16:word64]
	x29 = Mem0[sp:word64]
	sp = sp + 8
	x30 = Mem0[sp:word64]
	sp = sp + 32
	return
	// succ:  restore_pipestatus_array_exit
restore_pipestatus_array_exit:


// set_pipestatus_from_exit
// Return size: 0
void set_pipestatus_from_exit()
set_pipestatus_from_exit_entry:
	// succ:  l000000000043C490
l000000000043C490:
	sp = fp
	x2 = 0x00000000004D6000
	x2 = x2 + 0xFFFFFFFFFFFFFA50
	Mem0[x2 + 576:word32] = w0
	w1 = 0x00000001
	x0 = x2 + 0x0000000000000240
	// succ:  l000000000043C4A4_thunk_set_pipestatus_array
l000000000043C4A4_thunk_set_pipestatus_array:
	call set_pipestatus_array (retsize: 0;)
	return
	// succ:  set_pipestatus_from_exit_exit
set_pipestatus_from_exit_exit:


// fn000000000043C4A8
// Return size: 0
void fn000000000043C4A8()
fn000000000043C4A8_entry:
	// succ:  l000000000043C4A8
l000000000043C4A8:
	sp = fp
	sp = sp + -48
	Mem0[sp:word64] = x29
	sp = sp + 8
	Mem0[sp:word64] = x30
	x29 = x31 + 0x0000000000000000
	x1 = 0x00000000004AC000
	v9 = sp + 16
	Mem0[v9:word64] = x19
	v9 = v9 + 8
	Mem0[v9:word64] = x20
	x1 = x1 + 0xFFFFFFFFFFFFFF40
	x20 = x0
	w2 = 0x00000130
	x0 = 0x0000000000000028
	Mem0[sp + 32:word64] = x21
	call sh_xmalloc (retsize: 0;)
	x19 = x0
	w2 = Mem0[x20:word32]
	w1 = Mem0[x20 + 4:word32]
	w0 = Mem0[x20 + 8:word32]
	x21 = Mem0[x20 + 16:word64]
	Mem0[x19:word32] = w2
	Mem0[x19 + 4:word32] = w1
	Mem0[x19 + 8:word32] = w0
	branch x21 == 0x0000000000000000 l000000000043C508
	// succ:  l000000000043C4F4 l000000000043C508
l000000000043C4F4:
	x0 = Mem0[x21:word64]
	call make_bare_word (retsize: 0;)
	w1 = Mem0[x21 + 8:word32]
	x21 = x0
	Mem0[x0 + 8:word32] = w1
	// succ:  l000000000043C508
l000000000043C508:
	x0 = Mem0[x20 + 24:word64]
	Mem0[x19 + 16:word64] = x21
	branch x0 == 0x0000000000000000 l000000000043C544
	// succ:  l000000000043C514 l000000000043C544
l000000000043C514:
	call fn000000000043C4A8 (retsize: 0;)
	x1 = x0
	// succ:  l000000000043C51C
l000000000043C51C:
	x0 = Mem0[x20 + 32:word64]
	Mem0[x19 + 24:word64] = x1
	branch x0 == 0x0000000000000000 l000000000043C52C
	// succ:  l000000000043C528 l000000000043C52C
l000000000043C528:
	call fn000000000043C4A8 (retsize: 0;)
	// succ:  l000000000043C52C
l000000000043C52C:
	Mem0[x19 + 32:word64] = x0
	x21 = Mem0[sp + 32:word64]
	x0 = x19
	v15 = sp + 16
	x19 = Mem0[v15:word64]
	v15 = v15 + 8
	x20 = Mem0[v15:word64]
	x29 = Mem0[sp:word64]
	sp = sp + 8
	x30 = Mem0[sp:word64]
	sp = sp + 48
	return
	// succ:  fn000000000043C4A8_exit
l000000000043C544:
	x1 = x0
	goto l000000000043C51C
	// succ:  l000000000043C51C
fn000000000043C4A8_exit:


// copy_word
// Return size: 0
void copy_word()
copy_word_entry:
	// succ:  l000000000043C54C
l000000000043C54C:
	sp = fp
	sp = sp + -32
	Mem0[sp:word64] = x29
	sp = sp + 8
	Mem0[sp:word64] = x30
	x29 = x31 + 0x0000000000000000
	Mem0[sp + 16:word64] = x19
	x19 = x0
	x0 = Mem0[x0:word64]
	call make_bare_word (retsize: 0;)
	w1 = Mem0[x19 + 8:word32]
	x19 = Mem0[sp + 16:word64]
	Mem0[x0 + 8:word32] = w1
	x29 = Mem0[sp:word64]
	sp = sp + 8
	x30 = Mem0[sp:word64]
	sp = sp + 32
	return
	// succ:  copy_word_exit
copy_word_exit:


// copy_word_list
// Return size: 0
void copy_word_list()
copy_word_list_entry:
	// succ:  l000000000043C578
l000000000043C578:
	sp = fp
	sp = sp + -48
	Mem0[sp:word64] = x29
	sp = sp + 8
	Mem0[sp:word64] = x30
	x29 = x31 + 0x0000000000000000
	v8 = sp + 16
	Mem0[v8:word64] = x19
	v8 = v8 + 8
	Mem0[v8:word64] = x20
	x1 = 0x0000000000000000
	x19 = x0
	branch x0 == 0x0000000000000000 l000000000043C5D4
	// succ:  l000000000043C590 l000000000043C5D4
l000000000043C590:
	x20 = Mem0[x19 + 8:word64]
	x0 = Mem0[x20:word64]
	Mem0[x29 + 32:word64] = x1
	call make_bare_word (retsize: 0;)
	w2 = Mem0[x20 + 8:word32]
	x1 = Mem0[x29 + 32:word64]
	Mem0[x0 + 8:word32] = w2
	call make_word_list (retsize: 0;)
	x19 = Mem0[x19:word64]
	x1 = x0
	branch x19 != 0x0000000000000000 l000000000043C590
	// succ:  l000000000043C5BC l000000000043C590
l000000000043C5BC:
	branch x0 == 0x0000000000000000 l000000000043C5D4
	// succ:  l000000000043C5C0 l000000000043C5D4
l000000000043C5C0:
	x2 = Mem0[x0:word64]
	branch x2 == 0x0000000000000000 l000000000043C5D8
	// succ:  l000000000043C5C8 l000000000043C5D8
l000000000043C5C8:
	v13 = sp + 16
	x19 = Mem0[v13:word64]
	v13 = v13 + 8
	x20 = Mem0[v13:word64]
	x29 = Mem0[sp:word64]
	sp = sp + 8
	x30 = Mem0[sp:word64]
	sp = sp + 48
	// succ:  l000000000043C5D0_thunk_list_reverse
l000000000043C5D0_thunk_list_reverse:
	call list_reverse (retsize: 0;)
	return
	// succ:  copy_word_list_exit
l000000000043C5D4:
	x0 = 0x0000000000000000
	// succ:  l000000000043C5D8
l000000000043C5D8:
	v14 = sp + 16
	x19 = Mem0[v14:word64]
	v14 = v14 + 8
	x20 = Mem0[v14:word64]
	x29 = Mem0[sp:word64]
	sp = sp + 8
	x30 = Mem0[sp:word64]
	sp = sp + 48
	return
	// succ:  copy_word_list_exit
copy_word_list_exit:


// copy_redirect
// Return size: 0
void copy_redirect()
copy_redirect_entry:
	// succ:  l000000000043C5E4
l000000000043C5E4:
	sp = fp
	sp = sp + -48
	Mem0[sp:word64] = x29
	sp = sp + 8
	Mem0[sp:word64] = x30
	x29 = x31 + 0x0000000000000000
	v8 = sp + 32
	Mem0[v8:word64] = x21
	v8 = v8 + 8
	Mem0[v8:word64] = x22
	x21 = 0x00000000004AC000
	v11 = sp + 16
	Mem0[v11:word64] = x19
	v11 = v11 + 8
	Mem0[v11:word64] = x20
	w2 = 0x00000073
	x19 = x0
	x1 = x21 + 0xFFFFFFFFFFFFFF40
	x0 = 0x0000000000000030
	call sh_xmalloc (retsize: 0;)
copy_redirect_exit:


// copy_redirects
// Return size: 0
void copy_redirects()
copy_redirects_entry:
	// succ:  l000000000043C6C0
l000000000043C6C0:
	sp = fp
	sp = sp + -32
	Mem0[sp:word64] = x29
	sp = sp + 8
	Mem0[sp:word64] = x30
	x29 = x31 + 0x0000000000000000
	v8 = sp + 16
	Mem0[v8:word64] = x19
	v8 = v8 + 8
	Mem0[v8:word64] = x20
	x19 = x0
	branch x0 == 0x0000000000000000 l000000000043C704
	// succ:  l000000000043C6D4 l000000000043C704
l000000000043C6D4:
	x20 = 0x0000000000000000
	goto l000000000043C6E0
	// succ:  l000000000043C6E0
l000000000043C6DC:
	x20 = x0
	// succ:  l000000000043C6E0
l000000000043C6E0:
	x0 = x19
	call copy_redirect (retsize: 0;)
	Mem0[x0:word64] = x20
	x19 = Mem0[x19:word64]
	branch x19 != 0x0000000000000000 l000000000043C6DC
	// succ:  l000000000043C6F4 l000000000043C6DC
l000000000043C6F4:
	branch x20 == 0x0000000000000000 l000000000043C704
	// succ:  l000000000043C6F8 l000000000043C704
l000000000043C6F8:
	v11 = sp + 16
	x19 = Mem0[v11:word64]
	v11 = v11 + 8
	x20 = Mem0[v11:word64]
	x29 = Mem0[sp:word64]
	sp = sp + 8
	x30 = Mem0[sp:word64]
	sp = sp + 32
	// succ:  l000000000043C700_thunk_list_reverse
l000000000043C700_thunk_list_reverse:
	call list_reverse (retsize: 0;)
	return
	// succ:  copy_redirects_exit
l000000000043C704:
	v10 = sp + 16
	x19 = Mem0[v10:word64]
	v10 = v10 + 8
	x20 = Mem0[v10:word64]
	x29 = Mem0[sp:word64]
	sp = sp + 8
	x30 = Mem0[sp:word64]
	sp = sp + 32
	return
	// succ:  copy_redirects_exit
copy_redirects_exit:


// copy_command
// Return size: 0
void copy_command()
copy_command_entry:
	// succ:  l000000000043C710
l000000000043C710:
	sp = fp
	sp = sp + -64
	Mem0[sp:word64] = x29
	sp = sp + 8
	Mem0[sp:word64] = x30
	x29 = x31 + 0x0000000000000000
	v8 = sp + 16
	Mem0[v8:word64] = x19
	v8 = v8 + 8
	Mem0[v8:word64] = x20
	v11 = sp + 32
	Mem0[v11:word64] = x21
	v11 = v11 + 8
	Mem0[v11:word64] = x22
	v14 = sp + 48
	Mem0[v14:word64] = x23
	v14 = v14 + 8
	Mem0[v14:word64] = x24
	x19 = x0
	branch x0 == 0x0000000000000000 l000000000043C7B0
	// succ:  l000000000043C72C l000000000043C7B0
l000000000043C72C:
	x21 = 0x00000000004AC000
	x1 = x21 + 0xFFFFFFFFFFFFFF40
	w2 = 0x0000016D
	x0 = 0x0000000000000020
	call sh_xmalloc (retsize: 0;)
l000000000043C7B0:
	v21 = sp + 16
	x19 = Mem0[v21:word64]
	v21 = v21 + 8
	x20 = Mem0[v21:word64]
	v22 = sp + 32
	x21 = Mem0[v22:word64]
	v22 = v22 + 8
	x22 = Mem0[v22:word64]
	v23 = sp + 48
	x23 = Mem0[v23:word64]
	v23 = v23 + 8
	x24 = Mem0[v23:word64]
	x29 = Mem0[sp:word64]
	sp = sp + 8
	x30 = Mem0[sp:word64]
	sp = sp + 64
	return
	// succ:  copy_command_exit
copy_command_exit:


// copy_function_def_contents
// Return size: 0
void copy_function_def_contents()
copy_function_def_contents_entry:
	// succ:  l000000000043CB70
l000000000043CB70:
	sp = fp
	sp = sp + -48
	Mem0[sp:word64] = x29
	sp = sp + 8
	Mem0[sp:word64] = x30
	x29 = x31 + 0x0000000000000000
	Mem0[sp + 32:word64] = x21
	x21 = Mem0[x0 + 8:word64]
	v8 = sp + 16
	Mem0[v8:word64] = x19
	v8 = v8 + 8
	Mem0[v8:word64] = x20
	x20 = x0
	x0 = Mem0[x21:word64]
	x19 = x1
	call make_bare_word (retsize: 0;)
	w2 = Mem0[x21 + 8:word32]
	x1 = Mem0[x20 + 16:word64]
	Mem0[x0 + 8:word32] = w2
	Mem0[x19 + 8:word64] = x0
	branch x1 == 0x0000000000000000 l000000000043CBB4
	// succ:  l000000000043CBA8 l000000000043CBB4
l000000000043CBA8:
	x0 = x1
	call copy_command (retsize: 0;)
	x1 = x0
	// succ:  l000000000043CBB4
l000000000043CBB4:
	w3 = Mem0[x20:word32]
	w2 = Mem0[x20 + 4:word32]
	x0 = Mem0[x20 + 24:word64]
	Mem0[x19 + 16:word64] = x1
	Mem0[x19:word32] = w3
	Mem0[x19 + 4:word32] = w2
	branch x0 == 0x0000000000000000 l000000000043CBF0
	// succ:  l000000000043CBD0 l000000000043CBF0
l000000000043CBD0:
	strlen(x0)
	sp = sp + 0xFFFFFFFFFFFFFFF8
	x1 = 0x00000000004AC000
	x1 = x1 + 0xFFFFFFFFFFFFFF40
	w2 = 0x00000152
	x0 = x0 + 0x0000000000000001
	call sh_xmalloc (retsize: 0;)
	x1 = Mem0[x20 + 24:word64]
	strcpy(x0, x1)
	sp = sp + 0xFFFFFFFFFFFFFFF8
	// succ:  l000000000043CBF0
l000000000043CBF0:
	Mem0[x19 + 24:word64] = x0
	x21 = Mem0[sp + 32:word64]
	x0 = x19
	v14 = sp + 16
	x19 = Mem0[v14:word64]
	v14 = v14 + 8
	x20 = Mem0[v14:word64]
	x29 = Mem0[sp:word64]
	sp = sp + 8
	x30 = Mem0[sp:word64]
	sp = sp + 48
	return
	// succ:  copy_function_def_contents_exit
copy_function_def_contents_exit:


// copy_function_def
// Return size: 0
void copy_function_def()
copy_function_def_entry:
	// succ:  l000000000043CC08
l000000000043CC08:
	sp = fp
	sp = sp + -32
	Mem0[sp:word64] = x29
	sp = sp + 8
	Mem0[sp:word64] = x30
	x29 = x31 + 0x0000000000000000
	x1 = 0x00000000004AC000
	Mem0[sp + 16:word64] = x19
	x1 = x1 + 0xFFFFFFFFFFFFFF40
	x19 = x0
	w2 = 0x0000015C
	x0 = 0x0000000000000020
	call sh_xmalloc (retsize: 0;)
	x1 = x0
	x0 = x19
	x19 = Mem0[sp + 16:word64]
	x29 = Mem0[sp:word64]
	sp = sp + 8
	x30 = Mem0[sp:word64]
	sp = sp + 32
	// succ:  l000000000043CC3C_thunk_copy_function_def_contents
l000000000043CC3C_thunk_copy_function_def_contents:
	call copy_function_def_contents (retsize: 0;)
	return
	// succ:  copy_function_def_exit
copy_function_def_exit:


// fn000000000043CC40
// Return size: 0
void fn000000000043CC40()
fn000000000043CC40_entry:
	// succ:  l000000000043CC40
l000000000043CC40:
	sp = fp
	sp = sp + -48
	Mem0[sp:word64] = x29
	sp = sp + 8
	Mem0[sp:word64] = x30
	x29 = x31 + 0x0000000000000000
	x1 = 0x00000000004AC000
	v9 = sp + 16
	Mem0[v9:word64] = x19
	v9 = v9 + 8
	Mem0[v9:word64] = x20
	x1 = x1 + 0xFFFFFFFFFFFFFF40
	x20 = x0
	w2 = 0x000000B1
	x0 = 0x0000000000000020
	Mem0[sp + 32:word64] = x21
	call sh_xmalloc (retsize: 0;)
	x21 = Mem0[x20 + 8:word64]
	w2 = Mem0[x20:word32]
	w1 = Mem0[x20 + 4:word32]
	x19 = x0
	x0 = Mem0[x21:word64]
	Mem0[x19:word32] = w2
	Mem0[x19 + 4:word32] = w1
	call make_bare_word (retsize: 0;)
	w2 = Mem0[x21 + 8:word32]
	x1 = x0
	x0 = Mem0[x20 + 16:word64]
	Mem0[x1 + 8:word32] = w2
	Mem0[x19 + 8:word64] = x1
	call copy_word_list (retsize: 0;)
	Mem0[x19 + 16:word64] = x0
	x0 = Mem0[x20 + 24:word64]
	call copy_command (retsize: 0;)
	Mem0[x19 + 24:word64] = x0
	x21 = Mem0[sp + 32:word64]
	x0 = x19
	v14 = sp + 16
	x19 = Mem0[v14:word64]
	v14 = v14 + 8
	x20 = Mem0[v14:word64]
	x29 = Mem0[sp:word64]
	sp = sp + 8
	x30 = Mem0[sp:word64]
	sp = sp + 48
	return
	// succ:  fn000000000043CC40_exit
fn000000000043CC40_exit:


// get_name_for_error
// Return size: 0
void get_name_for_error()
get_name_for_error_entry:
	// succ:  l000000000043CCC4
l000000000043CCC4:
	sp = fp
	sp = sp + -16
	Mem0[sp:word64] = x29
	sp = sp + 8
	Mem0[sp:word64] = x30
	x29 = x31 + 0x0000000000000000
	x0 = 0x00000000004DE000
	w0 = Mem0[x0 + 1712:word32]
	branch w0 == 0x00000000 l000000000043CCFC
	// succ:  l000000000043CCD8 l000000000043CCFC
l000000000043CCD8:
	x0 = 0x00000000004DE000
	x0 = Mem0[x0 + 1728:word64]
	branch x0 == 0x0000000000000000 l000000000043CCEC
	// succ:  l000000000043CCE4 l000000000043CCEC
l000000000043CCE4:
	v9 = Mem0[x0:byte]
	w1 = (word32) v9
	branch w1 != 0x00000000 l000000000043CD44
	// succ:  l000000000043CCEC l000000000043CD44
l000000000043CCEC:
	x0 = 0x00000000004AA000
	x0 = x0 + 0x0000000000000260
	x29 = Mem0[sp:word64]
	sp = sp + 8
	x30 = Mem0[sp:word64]
	sp = sp + 16
	return
	// succ:  get_name_for_error_exit
l000000000043CCFC:
	x0 = 0x00000000004AA000
	x0 = x0 + 0x00000000000003D8
	call find_variable (retsize: 0;)
	branch x0 == 0x0000000000000000 l000000000043CD30
	// succ:  l000000000043CD0C l000000000043CD30
l000000000043CD0C:
	w1 = Mem0[x0 + 40:word32]
	branch (w1 & 0x00000004) == 0x00000000 l000000000043CD30
	// succ:  l000000000043CD14 l000000000043CD30
l000000000043CD14:
	x0 = Mem0[x0 + 8:word64]
	branch x0 == 0x0000000000000000 l000000000043CD30
	// succ:  l000000000043CD1C l000000000043CD30
l000000000043CD1C:
	x1 = 0x0000000000000000
	call array_reference (retsize: 0;)
	branch x0 == 0x0000000000000000 l000000000043CD30
	// succ:  l000000000043CD28 l000000000043CD30
l000000000043CD28:
	v11 = Mem0[x0:byte]
	w1 = (word32) v11
	branch w1 != 0x00000000 l000000000043CD3C
	// succ:  l000000000043CD30 l000000000043CD3C
l000000000043CD30:
	x0 = 0x00000000004E3000
	x0 = Mem0[x0 + 1224:word64]
	branch x0 == 0x0000000000000000 l000000000043CCD8
	// succ:  l000000000043CD3C l000000000043CCD8
l000000000043CD3C:
	x29 = Mem0[sp:word64]
	sp = sp + 8
	x30 = Mem0[sp:word64]
	sp = sp + 16
	return
	// succ:  get_name_for_error_exit
l000000000043CD44:
	call base_pathname (retsize: 0;)
	branch x0 == 0x0000000000000000 l000000000043CCEC
	// succ:  l000000000043CD4C l000000000043CCEC
l000000000043CD4C:
	goto l000000000043CD3C
	// succ:  l000000000043CD3C
get_name_for_error_exit:


// fn000000000043CD50
// Return size: 0
void fn000000000043CD50()
fn000000000043CD50_entry:
	// succ:  l000000000043CD50
l000000000043CD50:
	sp = fp
	sp = sp + -48
	Mem0[sp:word64] = x29
	sp = sp + 8
	Mem0[sp:word64] = x30
	x29 = x31 + 0x0000000000000000
	Mem0[sp + 16:word64] = x19
	w19 = w0
	call get_name_for_error (retsize: 0;)
	x3 = x0
	branch w19 == 0x00000000 l000000000043CD78
	// succ:  l000000000043CD6C l000000000043CD78
l000000000043CD6C:
	x0 = 0x00000000004DE000
	w0 = Mem0[x0 + 1712:word32]
	branch w0 == 0x00000000 l000000000043CD98
	// succ:  l000000000043CD78 l000000000043CD98
l000000000043CD78:
	x0 = 0x00000000004DE000
	x19 = Mem0[sp + 16:word64]
	x0 = Mem0[x0 + 1640:word64]
	x2 = 0x00000000004AC000
	x29 = Mem0[sp:word64]
	sp = sp + 8
	x30 = Mem0[sp:word64]
	sp = sp + 48
	w1 = 0x00000001
	x2 = x2 + 0xFFFFFFFFFFFFFFA0
	__fprintf_chk(x0, x1, x2, Mem0[sp:<unknown>])
	return
	// succ:  fn000000000043CD50_exit
l000000000043CD98:
	Mem0[x29 + 40:word64] = x3
	call executing_line_number (retsize: 0;)
	NZCV = cond(w0 - w31)
	w5 = w0
	x3 = Mem0[x29 + 40:word64]
	branch Test(LE,ZCV) l000000000043CD78
	// succ:  l000000000043CDB0 l000000000043CD78
l000000000043CDB0:
	x1 = 0x00000000004DF000
	x1 = x1 + 0xFFFFFFFFFFFFFCE0
	w1 = Mem0[x1:word32]
	x2 = 0x00000000004DE000
	x19 = Mem0[x2 + 1640:word64]
	branch w1 == 0x00000000 l000000000043CDEC
	// succ:  l000000000043CDC8 l000000000043CDEC
l000000000043CDC8:
	x0 = x19
	x4 = 0x00000000004AC000
	x19 = Mem0[sp + 16:word64]
	x2 = 0x00000000004AC000
	x29 = Mem0[sp:word64]
	sp = sp + 8
	x30 = Mem0[sp:word64]
	sp = sp + 48
	x4 = x4 + 0x0000000000000460
	w1 = 0x00000001
	x2 = x2 + 0xFFFFFFFFFFFFFF90
	__fprintf_chk(x0, x1, x2, Mem0[sp:<unknown>])
	return
	// succ:  fn000000000043CD50_exit
l000000000043CDEC:
	x1 = 0x00000000004AC000
	x1 = x1 + 0xFFFFFFFFFFFFFF88
	w2 = 0x00000005
	x0 = 0x0000000000000000
	Mem0[x29 + 32:word64] = x5
	dcgettext(x0, x1, x2)
	sp = sp + 0xFFFFFFFFFFFFFFF8
	x4 = x0
	x3 = Mem0[x29 + 40:word64]
	x5 = Mem0[x29 + 32:word64]
	x0 = x19
	x2 = 0x00000000004AC000
	x19 = Mem0[sp + 16:word64]
	x29 = Mem0[sp:word64]
	sp = sp + 8
	x30 = Mem0[sp:word64]
	sp = sp + 48
	w1 = 0x00000001
	x2 = x2 + 0xFFFFFFFFFFFFFF90
	__fprintf_chk(x0, x1, x2, Mem0[sp:<unknown>])
	return
	// succ:  fn000000000043CD50_exit
fn000000000043CD50_exit:


// programming_error
// Return size: 0
void programming_error()
programming_error_entry:
	// succ:  l000000000043CE2C
l000000000043CE2C:
	sp = fp
	sp = sp + -336
	Mem0[sp:word64] = x29
	sp = sp + 8
	Mem0[sp:word64] = x30
	x29 = x31 + 0x0000000000000000
	v6 = sp + 16
	Mem0[v6:word64] = x19
	v6 = v6 + 8
	Mem0[v6:word64] = x20
	x20 = x0
	x0 = 0x00000000004D6000
	Mem0[x29 + 144:word128] = q0
	Mem0[x29 + 160:word128] = q1
	Mem0[x29 + 176:word128] = q2
	Mem0[x29 + 192:word128] = q3
	Mem0[x29 + 208:word128] = q4
	Mem0[x29 + 224:word128] = q5
	Mem0[x29 + 240:word128] = q6
	Mem0[x29 + 280:word64] = x1
	Mem0[x29 + 304:word64] = x4
	Mem0[x29 + 312:word64] = x5
	Mem0[x29 + 320:word64] = x6
	Mem0[x29 + 328:word64] = x7
	x4 = x29 + 0x0000000000000100
	Mem0[sp + 32:word64] = x21
	w0 = Mem0[x0 + 3440:word32]
	w1 = 0x00000000
	Mem0[x4:word128] = q7
	Mem0[x29 + 288:word64] = x2
	Mem0[x29 + 296:word64] = x3
	call give_terminal_to (retsize: 0;)
	x0 = x29 + 0x0000000000000150
	Mem0[x29 + 80:word64] = x0
	Mem0[x29 + 88:word64] = x0
	x0 = x29 + 0x0000000000000110
	Mem0[x29 + 96:word64] = x0
	w0 = 0xFFFFFFC8
	Mem0[x29 + 104:word32] = w0
	w0 = 0xFFFFFF80
	Mem0[x29 + 108:word32] = w0
	x19 = 0x00000000004DE000
	v28 = x29 + 80
	x4 = Mem0[v28:word64]
	v28 = v28 + 8
	x5 = Mem0[v28:word64]
	v29 = x29 + 96
	x6 = Mem0[v29:word64]
	v29 = v29 + 8
	x7 = Mem0[v29:word64]
	x0 = Mem0[x19 + 1640:word64]
	w1 = 0x00000001
	x2 = x20
	x3 = x29 + 0x0000000000000070
	v30 = x29 + 48
	Mem0[v30:word64] = x4
	v30 = v30 + 8
	Mem0[v30:word64] = x5
	v31 = x29 + 64
	Mem0[v31:word64] = x6
	v31 = v31 + 8
	Mem0[v31:word64] = x7
	v32 = x29 + 112
	Mem0[v32:word64] = x4
	v32 = v32 + 8
	Mem0[v32:word64] = x5
	v33 = x29 + 128
	Mem0[v33:word64] = x6
	v33 = v33 + 8
	Mem0[v33:word64] = x7
	__vfprintf_chk(x0, x1, x2, x3)
	sp = sp + 0xFFFFFFFFFFFFFFF8
	x1 = Mem0[x19 + 1640:word64]
	w0 = 0x0000000A
	fputc(x0, x1)
	sp = sp + 0xFFFFFFFFFFFFFFF8
	x0 = 0x00000000004D7000
	w0 = Mem0[x0 + 388:word32]
	branch w0 != 0x00000000 l000000000043CF30
	// succ:  l000000000043CEFC l000000000043CF30
l000000000043CEFC:
	x1 = 0x00000000004AC000
	x20 = Mem0[x19 + 1640:word64]
	x1 = x1 + 0xFFFFFFFFFFFFFFC8
	w2 = 0x00000005
	x0 = 0x0000000000000000
	dcgettext(x0, x1, x2)
	sp = sp + 0xFFFFFFFFFFFFFFF8
	x2 = x0
	w1 = 0x00000001
	x0 = x20
	__fprintf_chk(x0, x1, x2, Mem0[sp:<unknown>])
	sp = sp + 0xFFFFFFFFFFFFFFF8
	x0 = Mem0[x19 + 1640:word64]
	fflush(x0)
	sp = sp + 0xFFFFFFFFFFFFFFF8
	abort()
l000000000043CF30:
	call last_history_line (retsize: 0;)
	x1 = 0x00000000004AC000
	x21 = x0
	w2 = 0x00000005
	x0 = 0x0000000000000000
	x1 = x1 + 0xFFFFFFFFFFFFFFB0
	x20 = Mem0[x19 + 1640:word64]
	dcgettext(x0, x1, x2)
	sp = sp + 0xFFFFFFFFFFFFFFF8
	x2 = x0
	x3 = x21
	branch x21 == 0x0000000000000000 l000000000043CF6C
	// succ:  l000000000043CF5C l000000000043CF6C
l000000000043CF5C:
	x0 = x20
	w1 = 0x00000001
	__fprintf_chk(x0, x1, x2, Mem0[sp:<unknown>])
	sp = sp + 0xFFFFFFFFFFFFFFF8
	goto l000000000043CEFC
	// succ:  l000000000043CEFC
l000000000043CF6C:
	x3 = 0x00000000004AC000
	x3 = x3 + 0xFFFFFFFFFFFFFFA8
	goto l000000000043CF5C
	// succ:  l000000000043CF5C
programming_error_exit:


// report_error
// Return size: 0
void report_error()
report_error_entry:
	// succ:  l000000000043CF78
l000000000043CF78:
	sp = fp
	sp = sp + -320
	Mem0[sp:word64] = x29
	sp = sp + 8
	Mem0[sp:word64] = x30
	x29 = x31 + 0x0000000000000000
	v6 = sp + 16
	Mem0[v6:word64] = x19
	v6 = v6 + 8
	Mem0[v6:word64] = x20
	x20 = x0
	w0 = 0x00000001
	Mem0[x29 + 128:word128] = q0
	Mem0[x29 + 144:word128] = q1
	Mem0[x29 + 160:word128] = q2
	Mem0[x29 + 176:word128] = q3
	Mem0[x29 + 192:word128] = q4
	Mem0[x29 + 208:word128] = q5
	Mem0[x29 + 224:word128] = q6
	Mem0[x29 + 240:word128] = q7
	Mem0[x29 + 288:word64] = x4
	Mem0[x29 + 296:word64] = x5
	Mem0[x29 + 304:word64] = x6
	Mem0[x29 + 312:word64] = x7
	Mem0[x29 + 264:word64] = x1
	Mem0[x29 + 272:word64] = x2
	Mem0[x29 + 280:word64] = x3
	call fn000000000043CD50 (retsize: 0;)
	x0 = x29 + 0x0000000000000140
	Mem0[x29 + 64:word64] = x0
	Mem0[x29 + 72:word64] = x0
	x0 = x29 + 0x0000000000000100
	Mem0[x29 + 80:word64] = x0
	w0 = 0xFFFFFFC8
	Mem0[x29 + 88:word32] = w0
	w0 = 0xFFFFFF80
	Mem0[x29 + 92:word32] = w0
	x19 = 0x00000000004DE000
	v26 = x29 + 64
	x4 = Mem0[v26:word64]
	v26 = v26 + 8
	x5 = Mem0[v26:word64]
	v27 = x29 + 80
	x6 = Mem0[v27:word64]
	v27 = v27 + 8
	x7 = Mem0[v27:word64]
	x0 = Mem0[x19 + 1640:word64]
	w1 = 0x00000001
	x2 = x20
	x3 = x29 + 0x0000000000000060
	v29 = x29 + 32
	Mem0[v29:word64] = x4
	v29 = v29 + 8
	Mem0[v29:word64] = x5
	v30 = x29 + 48
	Mem0[v30:word64] = x6
	v30 = v30 + 8
	Mem0[v30:word64] = x7
	v31 = x29 + 96
	Mem0[v31:word64] = x4
	v31 = v31 + 8
	Mem0[v31:word64] = x5
	v32 = x29 + 112
	Mem0[v32:word64] = x6
	v32 = v32 + 8
	Mem0[v32:word64] = x7
	__vfprintf_chk(x0, x1, x2, x3)
	sp = sp + 0xFFFFFFFFFFFFFFF8
	x1 = Mem0[x19 + 1640:word64]
	w0 = 0x0000000A
	fputc(x0, x1)
	sp = sp + 0xFFFFFFFFFFFFFFF8
	x0 = 0x00000000004DF000
	w0 = Mem0[x0 + 3708:word32]
	branch w0 != 0x00000000 l000000000043D044
	// succ:  l000000000043D038 l000000000043D044
l000000000043D038:
	v33 = sp + 16
	x19 = Mem0[v33:word64]
	v33 = v33 + 8
	x20 = Mem0[v33:word64]
	x29 = Mem0[sp:word64]
	sp = sp + 8
	x30 = Mem0[sp:word64]
	sp = sp + 320
	return
	// succ:  report_error_exit
l000000000043D044:
	x0 = 0x00000000004E3000
	w1 = Mem0[x0 + 1200:word32]
	branch w1 != 0x00000000 l000000000043D058
	// succ:  l000000000043D050 l000000000043D058
l000000000043D050:
	w1 = 0x00000001
	Mem0[x0 + 1200:word32] = w1
	// succ:  l000000000043D058
l000000000043D058:
	w0 = Mem0[x0 + 1200:word32]
	call exit_shell (retsize: 0;)
	// succ:  l000000000043D05C_thunk_file_error
l000000000043D05C_thunk_file_error:
	call file_error (retsize: 0;)
	return
	// succ:  report_error_exit
report_error_exit:


// file_error
// Return size: 0
void file_error()
file_error_entry:
	// succ:  l000000000043D060
l000000000043D060:
	sp = fp
	sp = sp + -32
	Mem0[sp:word64] = x29
	sp = sp + 8
	Mem0[sp:word64] = x30
	x29 = x31 + 0x0000000000000000
	Mem0[x29 + 16:word64] = x0
	__errno_location()
	sp = sp + 0xFFFFFFFFFFFFFFF8
	w0 = Mem0[x0:word32]
	strerror(x0)
	sp = sp + 0xFFFFFFFFFFFFFFF8
	x2 = x0
	x1 = Mem0[x29 + 16:word64]
	x0 = 0x00000000004BE000
	x29 = Mem0[sp:word64]
	sp = sp + 8
	x30 = Mem0[sp:word64]
	sp = sp + 32
	x0 = x0 + 0x00000000000007D0
	// succ:  l000000000043D08C_thunk_report_error
l000000000043D08C_thunk_report_error:
	call report_error (retsize: 0;)
	return
	// succ:  file_error_exit
file_error_exit:


// fatal_error
// Return size: 0
void fatal_error()
fatal_error_entry:
	// succ:  l000000000043D090
l000000000043D090:
	sp = fp
	sp = sp + -320
	Mem0[sp:word64] = x29
	sp = sp + 8
	Mem0[sp:word64] = x30
	x29 = x31 + 0x0000000000000000
	v6 = sp + 16
	Mem0[v6:word64] = x19
	v6 = v6 + 8
	Mem0[v6:word64] = x20
	x20 = x0
	w0 = 0x00000000
	Mem0[x29 + 128:word128] = q0
	Mem0[x29 + 144:word128] = q1
	Mem0[x29 + 160:word128] = q2
	Mem0[x29 + 176:word128] = q3
	Mem0[x29 + 192:word128] = q4
	Mem0[x29 + 208:word128] = q5
	Mem0[x29 + 224:word128] = q6
	Mem0[x29 + 240:word128] = q7
	Mem0[x29 + 288:word64] = x4
	Mem0[x29 + 296:word64] = x5
	Mem0[x29 + 304:word64] = x6
	Mem0[x29 + 312:word64] = x7
	Mem0[x29 + 264:word64] = x1
	Mem0[x29 + 272:word64] = x2
	Mem0[x29 + 280:word64] = x3
	call fn000000000043CD50 (retsize: 0;)
	x0 = x29 + 0x0000000000000140
	Mem0[x29 + 64:word64] = x0
	Mem0[x29 + 72:word64] = x0
	x0 = x29 + 0x0000000000000100
	Mem0[x29 + 80:word64] = x0
	w0 = 0xFFFFFFC8
	Mem0[x29 + 88:word32] = w0
	w0 = 0xFFFFFF80
	Mem0[x29 + 92:word32] = w0
	x19 = 0x00000000004DE000
	v26 = x29 + 64
	x4 = Mem0[v26:word64]
	v26 = v26 + 8
	x5 = Mem0[v26:word64]
	v27 = x29 + 80
	x6 = Mem0[v27:word64]
	v27 = v27 + 8
	x7 = Mem0[v27:word64]
	x0 = Mem0[x19 + 1640:word64]
	w1 = 0x00000001
	x2 = x20
	x3 = x29 + 0x0000000000000060
	v29 = x29 + 32
	Mem0[v29:word64] = x4
	v29 = v29 + 8
	Mem0[v29:word64] = x5
	v30 = x29 + 48
	Mem0[v30:word64] = x6
	v30 = v30 + 8
	Mem0[v30:word64] = x7
	v31 = x29 + 96
	Mem0[v31:word64] = x4
	v31 = v31 + 8
	Mem0[v31:word64] = x5
	v32 = x29 + 112
	Mem0[v32:word64] = x6
	v32 = v32 + 8
	Mem0[v32:word64] = x7
	__vfprintf_chk(x0, x1, x2, x3)
	sp = sp + 0xFFFFFFFFFFFFFFF8
	x1 = Mem0[x19 + 1640:word64]
	w0 = 0x0000000A
	fputc(x0, x1)
	sp = sp + 0xFFFFFFFFFFFFFFF8
	w0 = 0x00000002
	call sh_exit (retsize: 0;)
	// succ:  l000000000043D148_thunk_internal_error
l000000000043D148_thunk_internal_error:
	call internal_error (retsize: 0;)
	return
	// succ:  fatal_error_exit
fatal_error_exit:


// internal_error
// Return size: 0
void internal_error()
internal_error_entry:
	// succ:  l000000000043D14C
l000000000043D14C:
	sp = fp
	sp = sp + -320
	Mem0[sp:word64] = x29
	sp = sp + 8
	Mem0[sp:word64] = x30
	x29 = x31 + 0x0000000000000000
	v8 = sp + 16
	Mem0[v8:word64] = x19
	v8 = v8 + 8
	Mem0[v8:word64] = x20
	x20 = x0
	w0 = 0x00000001
	Mem0[x29 + 128:word128] = q0
	Mem0[x29 + 144:word128] = q1
	Mem0[x29 + 160:word128] = q2
	Mem0[x29 + 176:word128] = q3
	Mem0[x29 + 192:word128] = q4
	Mem0[x29 + 208:word128] = q5
	Mem0[x29 + 224:word128] = q6
	Mem0[x29 + 240:word128] = q7
	Mem0[x29 + 264:word64] = x1
	Mem0[x29 + 272:word64] = x2
	Mem0[x29 + 280:word64] = x3
	Mem0[x29 + 288:word64] = x4
	Mem0[x29 + 296:word64] = x5
	Mem0[x29 + 304:word64] = x6
	Mem0[x29 + 312:word64] = x7
	call fn000000000043CD50 (retsize: 0;)
	x0 = x29 + 0x0000000000000140
	Mem0[x29 + 64:word64] = x0
	Mem0[x29 + 72:word64] = x0
	x0 = x29 + 0x0000000000000100
	Mem0[x29 + 80:word64] = x0
	w0 = 0xFFFFFFC8
	Mem0[x29 + 88:word32] = w0
	w0 = 0xFFFFFF80
	Mem0[x29 + 92:word32] = w0
	x19 = 0x00000000004DE000
	v26 = x29 + 64
	x4 = Mem0[v26:word64]
	v26 = v26 + 8
	x5 = Mem0[v26:word64]
	v27 = x29 + 80
	x6 = Mem0[v27:word64]
	v27 = v27 + 8
	x7 = Mem0[v27:word64]
	x0 = Mem0[x19 + 1640:word64]
	x2 = x20
	x3 = x29 + 0x0000000000000060
	w1 = 0x00000001
	v29 = x29 + 32
	Mem0[v29:word64] = x4
	v29 = v29 + 8
	Mem0[v29:word64] = x5
	v30 = x29 + 48
	Mem0[v30:word64] = x6
	v30 = v30 + 8
	Mem0[v30:word64] = x7
	v31 = x29 + 96
	Mem0[v31:word64] = x4
	v31 = v31 + 8
	Mem0[v31:word64] = x5
	v32 = x29 + 112
	Mem0[v32:word64] = x6
	v32 = v32 + 8
	Mem0[v32:word64] = x7
	__vfprintf_chk(x0, x1, x2, x3)
	sp = sp + 0xFFFFFFFFFFFFFFF8
	x1 = Mem0[x19 + 1640:word64]
	w0 = 0x0000000A
	fputc(x0, x1)
	sp = sp + 0xFFFFFFFFFFFFFFF8
	v33 = sp + 16
	x19 = Mem0[v33:word64]
	v33 = v33 + 8
	x20 = Mem0[v33:word64]
	x29 = Mem0[sp:word64]
	sp = sp + 8
	x30 = Mem0[sp:word64]
	sp = sp + 320
	return
	// succ:  internal_error_exit
internal_error_exit:


// internal_warning
// Return size: 0
void internal_warning()
internal_warning_entry:
	// succ:  l000000000043D20C
l000000000043D20C:
	sp = fp
	sp = sp + -336
	Mem0[sp:word64] = x29
	sp = sp + 8
	Mem0[sp:word64] = x30
	x29 = x31 + 0x0000000000000000
	Mem0[x29 + 144:word128] = q0
	Mem0[x29 + 160:word128] = q1
	Mem0[x29 + 176:word128] = q2
	Mem0[x29 + 192:word128] = q3
	Mem0[x29 + 208:word128] = q4
	Mem0[x29 + 224:word128] = q5
	Mem0[x29 + 240:word128] = q6
	v13 = sp + 16
	Mem0[v13:word64] = x19
	v13 = v13 + 8
	Mem0[v13:word64] = x20
	Mem0[x29 + 304:word64] = x4
	Mem0[x29 + 312:word64] = x5
	Mem0[x29 + 320:word64] = x6
	Mem0[x29 + 328:word64] = x7
	Mem0[sp + 32:word64] = x21
	Mem0[x29 + 296:word64] = x3
	x3 = x29 + 0x0000000000000100
	Mem0[x3:word128] = q7
	x20 = x0
	w0 = 0x00000001
	Mem0[x29 + 280:word64] = x1
	Mem0[x29 + 288:word64] = x2
	call fn000000000043CD50 (retsize: 0;)
	x19 = 0x00000000004DE000
	x1 = 0x00000000004AC000
	x21 = Mem0[x19 + 1640:word64]
	x1 = x1 + 0xFFFFFFFFFFFFFFD8
	w2 = 0x00000005
	x0 = 0x0000000000000000
	dcgettext(x0, x1, x2)
	sp = sp + 0xFFFFFFFFFFFFFFF8
	x2 = x0
	w1 = 0x00000001
	x0 = x21
	__fprintf_chk(x0, x1, x2, Mem0[sp:<unknown>])
	sp = sp + 0xFFFFFFFFFFFFFFF8
	x0 = x29 + 0x0000000000000150
	Mem0[x29 + 80:word64] = x0
	Mem0[x29 + 88:word64] = x0
	x0 = x29 + 0x0000000000000110
	Mem0[x29 + 96:word64] = x0
	w0 = 0xFFFFFFC8
	Mem0[x29 + 104:word32] = w0
	w0 = 0xFFFFFF80
	Mem0[x29 + 108:word32] = w0
	v29 = x29 + 80
	x4 = Mem0[v29:word64]
	v29 = v29 + 8
	x5 = Mem0[v29:word64]
	v30 = x29 + 96
	x6 = Mem0[v30:word64]
	v30 = v30 + 8
	x7 = Mem0[v30:word64]
	x0 = Mem0[x19 + 1640:word64]
	x2 = x20
	x3 = x29 + 0x0000000000000070
	w1 = 0x00000001
	v31 = x29 + 48
	Mem0[v31:word64] = x4
	v31 = v31 + 8
	Mem0[v31:word64] = x5
	v32 = x29 + 64
	Mem0[v32:word64] = x6
	v32 = v32 + 8
	Mem0[v32:word64] = x7
	v33 = x29 + 112
	Mem0[v33:word64] = x4
	v33 = v33 + 8
	Mem0[v33:word64] = x5
	v34 = x29 + 128
	Mem0[v34:word64] = x6
	v34 = v34 + 8
	Mem0[v34:word64] = x7
	__vfprintf_chk(x0, x1, x2, x3)
	sp = sp + 0xFFFFFFFFFFFFFFF8
	x1 = Mem0[x19 + 1640:word64]
	w0 = 0x0000000A
	fputc(x0, x1)
	sp = sp + 0xFFFFFFFFFFFFFFF8
	v35 = sp + 16
	x19 = Mem0[v35:word64]
	v35 = v35 + 8
	x20 = Mem0[v35:word64]
	x21 = Mem0[sp + 32:word64]
	x29 = Mem0[sp:word64]
	sp = sp + 8
	x30 = Mem0[sp:word64]
	sp = sp + 336
	return
	// succ:  internal_warning_exit
internal_warning_exit:


// sys_error
// Return size: 0
void sys_error()
sys_error_entry:
	// succ:  l000000000043D300
l000000000043D300:
	sp = fp
	sp = sp + -336
	Mem0[sp:word64] = x29
	sp = sp + 8
	Mem0[sp:word64] = x30
	x29 = x31 + 0x0000000000000000
	Mem0[x29 + 144:word128] = q0
	Mem0[x29 + 160:word128] = q1
	Mem0[x29 + 176:word128] = q2
	Mem0[x29 + 192:word128] = q3
	Mem0[x29 + 208:word128] = q4
	Mem0[x29 + 224:word128] = q5
	Mem0[x29 + 240:word128] = q6
	v13 = sp + 16
	Mem0[v13:word64] = x19
	v13 = v13 + 8
	Mem0[v13:word64] = x20
	Mem0[x29 + 312:word64] = x5
	Mem0[x29 + 320:word64] = x6
	Mem0[x29 + 328:word64] = x7
	Mem0[x29 + 304:word64] = x4
	x4 = x29 + 0x0000000000000100
	Mem0[x4:word128] = q7
	Mem0[x29 + 280:word64] = x1
	Mem0[x29 + 288:word64] = x2
	Mem0[x29 + 296:word64] = x3
	Mem0[x29 + 128:word64] = x0
	__errno_location()
	sp = sp + 0xFFFFFFFFFFFFFFF8
	w20 = Mem0[x0:word32]
	w0 = 0x00000000
	call fn000000000043CD50 (retsize: 0;)
	x0 = x29 + 0x0000000000000150
	Mem0[x29 + 64:word64] = x0
	Mem0[x29 + 72:word64] = x0
	x0 = x29 + 0x0000000000000110
	Mem0[x29 + 80:word64] = x0
	w0 = 0xFFFFFFC8
	Mem0[x29 + 88:word32] = w0
	w0 = 0xFFFFFF80
	Mem0[x29 + 92:word32] = w0
	x19 = 0x00000000004DE000
	v27 = x29 + 64
	x4 = Mem0[v27:word64]
	v27 = v27 + 8
	x5 = Mem0[v27:word64]
	v28 = x29 + 80
	x6 = Mem0[v28:word64]
	v28 = v28 + 8
	x7 = Mem0[v28:word64]
	x2 = Mem0[x29 + 128:word64]
	x0 = Mem0[x19 + 1640:word64]
	x3 = x29 + 0x0000000000000060
	w1 = 0x00000001
	v30 = x29 + 32
	Mem0[v30:word64] = x4
	v30 = v30 + 8
	Mem0[v30:word64] = x5
	v31 = x29 + 48
	Mem0[v31:word64] = x6
	v31 = v31 + 8
	Mem0[v31:word64] = x7
	v32 = x29 + 96
	Mem0[v32:word64] = x4
	v32 = v32 + 8
	Mem0[v32:word64] = x5
	v33 = x29 + 112
	Mem0[v33:word64] = x6
	v33 = v33 + 8
	Mem0[v33:word64] = x7
	__vfprintf_chk(x0, x1, x2, x3)
	sp = sp + 0xFFFFFFFFFFFFFFF8
	w0 = w20
	x19 = Mem0[x19 + 1640:word64]
	strerror(x0)
	sp = sp + 0xFFFFFFFFFFFFFFF8
	x2 = 0x00000000004AC000
	x3 = x0
	w1 = 0x00000001
	x0 = x19
	x2 = x2 + 0xFFFFFFFFFFFFFFE8
	__fprintf_chk(x0, x1, x2, Mem0[sp:<unknown>])
	sp = sp + 0xFFFFFFFFFFFFFFF8
	v34 = sp + 16
	x19 = Mem0[v34:word64]
	v34 = v34 + 8
	x20 = Mem0[v34:word64]
	x29 = Mem0[sp:word64]
	sp = sp + 8
	x30 = Mem0[sp:word64]
	sp = sp + 336
	return
	// succ:  sys_error_exit
sys_error_exit:


// parser_error
// Return size: 0
void parser_error()
parser_error_entry:
	// succ:  l000000000043D3E4
l000000000043D3E4:
	sp = fp
	sp = sp + -352
	Mem0[sp:word64] = x29
	sp = sp + 8
	Mem0[sp:word64] = x30
	x29 = x31 + 0x0000000000000000
	v8 = sp + 32
	Mem0[v8:word64] = x21
	v8 = v8 + 8
	Mem0[v8:word64] = x22
	Mem0[x29 + 320:word64] = x4
	v12 = sp + 16
	Mem0[v12:word64] = x19
	v12 = v12 + 8
	Mem0[v12:word64] = x20
	Mem0[x29 + 304:word64] = x2
	Mem0[x29 + 312:word64] = x3
	Mem0[x29 + 328:word64] = x5
	Mem0[x29 + 336:word64] = x6
	Mem0[x29 + 344:word64] = x7
	Mem0[x29 + 176:word128] = q0
	Mem0[x29 + 192:word128] = q1
	Mem0[x29 + 208:word128] = q2
	Mem0[x29 + 224:word128] = q3
	Mem0[x29 + 240:word128] = q4
	Mem0[sp + 48:word64] = x23
	x2 = x29 + 0x0000000000000100
	Mem0[x2:word128] = q5
	x2 = x29 + 0x0000000000000110
	Mem0[x2:word128] = q6
	x2 = x29 + 0x0000000000000120
	Mem0[x2:word128] = q7
	x21 = x1
	w22 = w0
	call get_name_for_error (retsize: 0;)
	x20 = x0
	call yy_input_name (retsize: 0;)
	x1 = 0x00000000004DE000
	w1 = Mem0[x1 + 1704:word32]
	x4 = x0
	branch w1 != 0x00000000 l000000000043D58C
	// succ:  l000000000043D460 l000000000043D58C
l000000000043D460:
	x0 = 0x00000000004DE000
	w0 = Mem0[x0 + 1712:word32]
	branch w0 == 0x00000000 l000000000043D524
	// succ:  l000000000043D46C l000000000043D524
l000000000043D46C:
	x0 = 0x00000000004DF000
	x0 = x0 + 0xFFFFFFFFFFFFFCE0
	w0 = Mem0[x0:word32]
	x19 = 0x00000000004DE000
	x23 = Mem0[x19 + 1640:word64]
	branch w0 == 0x00000000 l000000000043D5AC
	// succ:  l000000000043D484 l000000000043D5AC
l000000000043D484:
	x5 = 0x00000000004AC000
	x5 = x5 + 0x0000000000000460
	// succ:  l000000000043D48C
l000000000043D48C:
	x2 = 0x00000000004AC000
	x0 = x23
	w1 = 0x00000001
	x2 = x2 + 0xFFFFFFFFFFFFFFF0
	x3 = x20
	w6 = w22
	__fprintf_chk(x0, x1, x2, Mem0[sp:<unknown>])
	sp = sp + 0xFFFFFFFFFFFFFFF8
	// succ:  l000000000043D4A8
l000000000043D4A8:
	x0 = x29 + 0x0000000000000160
	Mem0[x29 + 96:word64] = x0
	Mem0[x29 + 104:word64] = x0
	x0 = x29 + 0x0000000000000130
	Mem0[x29 + 112:word64] = x0
	w0 = 0xFFFFFFD0
	Mem0[x29 + 120:word32] = w0
	w0 = 0xFFFFFF80
	Mem0[x29 + 124:word32] = w0
	v33 = x29 + 96
	x4 = Mem0[v33:word64]
	v33 = v33 + 8
	x5 = Mem0[v33:word64]
	v34 = x29 + 112
	x6 = Mem0[v34:word64]
	v34 = v34 + 8
	x7 = Mem0[v34:word64]
	x0 = Mem0[x19 + 1640:word64]
	w1 = 0x00000001
	x2 = x21
	x3 = x29 + 0x0000000000000080
	v35 = x29 + 64
	Mem0[v35:word64] = x4
	v35 = v35 + 8
	Mem0[v35:word64] = x5
	v36 = x29 + 80
	Mem0[v36:word64] = x6
	v36 = v36 + 8
	Mem0[v36:word64] = x7
	v37 = x29 + 128
	Mem0[v37:word64] = x4
	v37 = v37 + 8
	Mem0[v37:word64] = x5
	v38 = x29 + 144
	Mem0[v38:word64] = x6
	v38 = v38 + 8
	Mem0[v38:word64] = x7
	__vfprintf_chk(x0, x1, x2, x3)
	sp = sp + 0xFFFFFFFFFFFFFFF8
	x1 = Mem0[x19 + 1640:word64]
	w0 = 0x0000000A
	fputc(x0, x1)
	sp = sp + 0xFFFFFFFFFFFFFFF8
	x0 = 0x00000000004DF000
	w0 = Mem0[x0 + 3708:word32]
	branch w0 != 0x00000000 l000000000043D5EC
	// succ:  l000000000043D510 l000000000043D5EC
l000000000043D510:
	v39 = sp + 16
	x19 = Mem0[v39:word64]
	v39 = v39 + 8
	x20 = Mem0[v39:word64]
	v40 = sp + 32
	x21 = Mem0[v40:word64]
	v40 = v40 + 8
	x22 = Mem0[v40:word64]
	x23 = Mem0[sp + 48:word64]
	x29 = Mem0[sp:word64]
	sp = sp + 8
	x30 = Mem0[sp:word64]
	sp = sp + 352
	return
	// succ:  parser_error_exit
l000000000043D524:
	v42 = Mem0[x20:byte]
	w1 = (word32) v42
	v43 = Mem0[x4:byte]
	w0 = (word32) v43
	NZCV = cond(w1 - w0)
	branch Test(NE,Z) l000000000043D46C
	// succ:  l000000000043D534 l000000000043D46C
l000000000043D534:
	x1 = x4
	x0 = x20
	Mem0[x29 + 160:word64] = x4
	strcmp(x0, x1)
	sp = sp + 0xFFFFFFFFFFFFFFF8
	x4 = Mem0[x29 + 160:word64]
	branch w0 != 0x00000000 l000000000043D46C
	// succ:  l000000000043D54C l000000000043D46C
l000000000043D54C:
	x0 = 0x00000000004DF000
	x0 = x0 + 0xFFFFFFFFFFFFFCE0
	w0 = Mem0[x0:word32]
	x19 = 0x00000000004DE000
	x23 = Mem0[x19 + 1640:word64]
	branch w0 == 0x00000000 l000000000043D5D0
	// succ:  l000000000043D564 l000000000043D5D0
l000000000043D564:
	x4 = 0x00000000004AC000
	x4 = x4 + 0x0000000000000460
	// succ:  l000000000043D56C
l000000000043D56C:
	x2 = 0x00000000004AC000
	x0 = x23
	w1 = 0x00000001
	x2 = x2 + 0xFFFFFFFFFFFFFF90
	x3 = x20
	w5 = w22
	__fprintf_chk(x0, x1, x2, Mem0[sp:<unknown>])
	sp = sp + 0xFFFFFFFFFFFFFFF8
	goto l000000000043D4A8
	// succ:  l000000000043D4A8
l000000000043D58C:
	x19 = 0x00000000004DE000
	x0 = Mem0[x19 + 1640:word64]
	x2 = 0x00000000004AC000
	w1 = 0x00000001
	x2 = x2 + 0xFFFFFFFFFFFFFFA0
	x3 = x20
	__fprintf_chk(x0, x1, x2, Mem0[sp:<unknown>])
	sp = sp + 0xFFFFFFFFFFFFFFF8
	goto l000000000043D4A8
	// succ:  l000000000043D4A8
l000000000043D5AC:
	x1 = 0x00000000004AC000
	x0 = 0x0000000000000000
	x1 = x1 + 0xFFFFFFFFFFFFFF88
	w2 = 0x00000005
	Mem0[x29 + 160:word64] = x4
	dcgettext(x0, x1, x2)
	sp = sp + 0xFFFFFFFFFFFFFFF8
	x5 = x0
	x4 = Mem0[x29 + 160:word64]
	goto l000000000043D48C
	// succ:  l000000000043D48C
l000000000043D5D0:
	x1 = 0x00000000004AC000
	x0 = 0x0000000000000000
	x1 = x1 + 0xFFFFFFFFFFFFFF88
	w2 = 0x00000005
	dcgettext(x0, x1, x2)
	sp = sp + 0xFFFFFFFFFFFFFFF8
	x4 = x0
	goto l000000000043D56C
	// succ:  l000000000043D56C
l000000000043D5EC:
	w1 = 0x00000002
	x2 = 0x00000000004E3000
	w0 = w1
	Mem0[x2 + 1200:word32] = w1
	call exit_shell (retsize: 0;)
	// succ:  l000000000043D5FC_thunk_command_error
l000000000043D5FC_thunk_command_error:
	call command_error (retsize: 0;)
	return
	// succ:  parser_error_exit
parser_error_exit:


// command_error
// Return size: 0
void command_error()
command_error_entry:
	// succ:  l000000000043D600
l000000000043D600:
	sp = fp
	sp = sp + -48
	Mem0[sp:word64] = x29
	sp = sp + 8
	Mem0[sp:word64] = x30
	x29 = x31 + 0x0000000000000000
	w31 = w1 - 0x00000004
	NZCV = cond(w31)
	x3 = 0x00000000004AC000
command_error_exit:


// command_errstr
// Return size: 0
void command_errstr()
command_errstr_entry:
	// succ:  l000000000043D650
l000000000043D650:
	sp = fp
	w31 = w0 - 0x00000004
	NZCV = cond(w31)
	x1 = 0x00000000004AC000
command_errstr_exit:


// err_badarraysub
// Return size: 0
void err_badarraysub()
err_badarraysub_entry:
	// succ:  l000000000043D670
l000000000043D670:
	sp = fp
	sp = sp + -32
	Mem0[sp:word64] = x29
	sp = sp + 8
	Mem0[sp:word64] = x30
	x29 = x31 + 0x0000000000000000
	x1 = 0x00000000004AE000
	x1 = Mem0[x1 + 1840:word64]
	Mem0[sp + 16:word64] = x19
	w2 = 0x00000005
	x19 = x0
	x0 = 0x0000000000000000
	dcgettext(x0, x1, x2)
	sp = sp + 0xFFFFFFFFFFFFFFF8
	x2 = x0
	x1 = x19
	x0 = 0x00000000004BE000
	x19 = Mem0[sp + 16:word64]
	x29 = Mem0[sp:word64]
	sp = sp + 8
	x30 = Mem0[sp:word64]
	sp = sp + 32
	x0 = x0 + 0x00000000000007D0
	// succ:  l000000000043D6AC_thunk_report_error
l000000000043D6AC_thunk_report_error:
	call report_error (retsize: 0;)
	return
	// succ:  err_badarraysub_exit
err_badarraysub_exit:


// err_unboundvar
// Return size: 0
void err_unboundvar()
err_unboundvar_entry:
	// succ:  l000000000043D6B0
l000000000043D6B0:
	sp = fp
	sp = sp + -32
	Mem0[sp:word64] = x29
	sp = sp + 8
	Mem0[sp:word64] = x30
	x29 = x31 + 0x0000000000000000
	x1 = 0x00000000004AD000
	Mem0[sp + 16:word64] = x19
	x1 = x1 + 0x0000000000000010
	x19 = x0
	w2 = 0x00000005
	x0 = 0x0000000000000000
	dcgettext(x0, x1, x2)
	sp = sp + 0xFFFFFFFFFFFFFFF8
	x1 = x19
	x19 = Mem0[sp + 16:word64]
	x29 = Mem0[sp:word64]
	sp = sp + 8
	x30 = Mem0[sp:word64]
	sp = sp + 32
	// succ:  l000000000043D6E0_thunk_report_error
l000000000043D6E0_thunk_report_error:
	call report_error (retsize: 0;)
	return
	// succ:  err_unboundvar_exit
err_unboundvar_exit:


// err_readonly
// Return size: 0
void err_readonly()
err_readonly_entry:
	// succ:  l000000000043D6E4
l000000000043D6E4:
	sp = fp
	sp = sp + -32
	Mem0[sp:word64] = x29
	sp = sp + 8
	Mem0[sp:word64] = x30
	x29 = x31 + 0x0000000000000000
	x1 = 0x00000000004AD000
	Mem0[sp + 16:word64] = x19
	x1 = x1 + 0x0000000000000028
	x19 = x0
	w2 = 0x00000005
	x0 = 0x0000000000000000
	dcgettext(x0, x1, x2)
	sp = sp + 0xFFFFFFFFFFFFFFF8
	x1 = x19
	x19 = Mem0[sp + 16:word64]
	x29 = Mem0[sp:word64]
	sp = sp + 8
	x30 = Mem0[sp:word64]
	sp = sp + 32
	// succ:  l000000000043D714_thunk_report_error
l000000000043D714_thunk_report_error:
	call report_error (retsize: 0;)
	return
	// succ:  err_readonly_exit
err_readonly_exit:


// fn000000000043D718
// Return size: 0
void fn000000000043D718()
fn000000000043D718_entry:
	// succ:  l000000000043D718
l000000000043D718:
	sp = fp
	sp = sp + -48
	Mem0[sp:word64] = x29
	sp = sp + 8
	Mem0[sp:word64] = x30
	x29 = x31 + 0x0000000000000000
	v8 = sp + 32
	Mem0[v8:word64] = x21
	v8 = v8 + 8
	Mem0[v8:word64] = x22
	x21 = 0x00000000004DF000
	v11 = sp + 16
	Mem0[v11:word64] = x19
	v11 = v11 + 8
	Mem0[v11:word64] = x20
	x19 = x21 + 0xFFFFFFFFFFFFFCE8
	w0 = Mem0[x19:word32]
	x22 = 0x00000000004AD000
	w0 = w0 - 0x00000001
	Mem0[x19:word32] = w0
	NZCV = cond(w0 - w31)
	x20 = x22 + 0x00000000000000C0
	branch Test(LE,ZCV) l000000000043D7C0
	// succ:  l000000000043D74C l000000000043D7C0
l000000000043D74C:
	x4 = Mem0[x19 + 8:word64]
	x1 = x20
	x0 = Mem0[x4 + (int64) ((int32) w0):word64]
	w2 = 0x00000128
	x3 = Mem0[x0 + 40:word64]
	x0 = x3
	branch x3 == 0x0000000000000000 l000000000043D770
	// succ:  l000000000043D768 l000000000043D770
l000000000043D768:
	call sh_xfree (retsize: 0;)
	x4 = Mem0[x19 + 8:word64]
	// succ:  l000000000043D770
l000000000043D770:
	v24 = Mem0[x19:int32]
	x0 = (word64) v24
	x1 = x20
	x3 = Mem0[x4 + x0:word64]
	w2 = 0x0000012B
	x4 = Mem0[x3 + 8:word64]
	x0 = x4
	branch x4 == 0x0000000000000000 l000000000043D79C
	// succ:  l000000000043D78C l000000000043D79C
l000000000043D78C:
	call sh_xfree (retsize: 0;)
	v25 = Mem0[x19:int32]
	x2 = (word64) v25
	x0 = Mem0[x19 + 8:word64]
	x3 = Mem0[x0 + x2:word64]
	// succ:  l000000000043D79C
l000000000043D79C:
	x0 = x3
	x1 = x20
	w2 = 0x0000012D
	call sh_xfree (retsize: 0;)
	w0 = Mem0[x19:word32]
	w0 = w0 - 0x00000001
	Mem0[x19:word32] = w0
	NZCV = cond(w0 - w31)
	branch Test(GT,NZV) l000000000043D74C
	// succ:  l000000000043D7C0 l000000000043D74C
l000000000043D7C0:
	x21 = x21 + 0xFFFFFFFFFFFFFCE8
	x2 = Mem0[x21 + 8:word64]
	x1 = x22 + 0x00000000000000C0
	x0 = Mem0[x2 + (int64) ((int32) w0):word64]
	w2 = 0x0000012F
	call sh_xfree (retsize: 0;)
	Mem0[x21 + 16:word32] = 0x00000000
	v22 = sp + 16
	x19 = Mem0[v22:word64]
	v22 = v22 + 8
	x20 = Mem0[v22:word64]
	v23 = sp + 32
	x21 = Mem0[v23:word64]
	v23 = v23 + 8
	x22 = Mem0[v23:word64]
	x29 = Mem0[sp:word64]
	sp = sp + 8
	x30 = Mem0[sp:word64]
	sp = sp + 48
	return
	// succ:  fn000000000043D718_exit
fn000000000043D718_exit:


// fn000000000043D7EC
// Return size: 0
void fn000000000043D7EC()
fn000000000043D7EC_entry:
	// succ:  l000000000043D7EC
l000000000043D7EC:
	sp = fp
	sp = sp + -96
	Mem0[sp:word64] = x29
	sp = sp + 8
	Mem0[sp:word64] = x30
	x29 = x31 + 0x0000000000000000
	v8 = sp + 16
	Mem0[v8:word64] = x19
	v8 = v8 + 8
	Mem0[v8:word64] = x20
	v11 = sp + 32
	Mem0[v11:word64] = x21
	v11 = v11 + 8
	Mem0[v11:word64] = x22
	x3 = 0x0000000000000016
	w4 = 0x00000000
	x19 = x0
	x22 = x2
	x0 = x1
	x2 = x29 + 0x0000000000000030
	w1 = 0x0000000A
	call fmtumax (retsize: 0;)
	x1 = 0x0000000000000000
	x5 = x0
	x2 = x1
	x0 = x19
	Mem0[x29 + 80:word64] = x5
	x20 = 0x00000000004AD000
	call array_variable_name (retsize: 0;)
	x21 = x0
	x20 = x20 + 0x00000000000000C0
	strlen(x0)
	sp = sp + 0xFFFFFFFFFFFFFFF8
	x1 = x20
	w2 = 0x0000014C
	x0 = x0 + 0x0000000000000019
	call sh_xmalloc (retsize: 0;)
	x5 = Mem0[x29 + 80:word64]
	x3 = 0x00000000004AD000
	x4 = x21
	x3 = x3 + 0x00000000000000D0
	x2 = 0xFFFFFFFFFFFFFFFF
	w1 = 0x00000001
	x19 = x0
	__sprintf_chk(x0, x1, x2, x3, Mem0[sp:<unknown>])
	sp = sp + 0xFFFFFFFFFFFFFFF8
	x1 = x22
	x0 = x19
	call bind_int_variable (retsize: 0;)
	x0 = x19
	call stupidly_hack_special_variables (retsize: 0;)
	x0 = x21
	x1 = x20
	w2 = 0x00000152
	call sh_xfree (retsize: 0;)
	x0 = x19
	x1 = x20
	w2 = 0x00000153
	call sh_xfree (retsize: 0;)
	v21 = sp + 16
	x19 = Mem0[v21:word64]
	v21 = v21 + 8
	x20 = Mem0[v21:word64]
	v22 = sp + 32
	x21 = Mem0[v22:word64]
	v22 = v22 + 8
	x22 = Mem0[v22:word64]
	x29 = Mem0[sp:word64]
	sp = sp + 8
	x30 = Mem0[sp:word64]
	sp = sp + 96
	return
	// succ:  fn000000000043D7EC_exit
fn000000000043D7EC_exit:


// fn000000000043D8B8
// Return size: 0
void fn000000000043D8B8()
fn000000000043D8B8_entry:
	// succ:  l000000000043D8B8
l000000000043D8B8:
	sp = fp
	sp = sp + -48
	Mem0[sp:word64] = x29
	sp = sp + 8
	Mem0[sp:word64] = x30
	x29 = x31 + 0x0000000000000000
	v8 = sp + 16
	Mem0[v8:word64] = x19
	v8 = v8 + 8
	Mem0[v8:word64] = x20
	x19 = 0x00000000004DF000
	x1 = x19 + 0xFFFFFFFFFFFFFCE8
	x3 = Mem0[x1 + 24:word64]
	x4 = x0
	v14 = Mem0[x3:byte]
	w1 = (word32) v14
	x0 = 0x00000000004E3000
	w31 = w1 - 0x00000009
	NZCV = cond(w31)
	x20 = Mem0[x0 + 1192:word64]
	branch Test(NE,Z) l000000000043D974
	// succ:  l000000000043D8E8 l000000000043D974
l000000000043D8E8:
	x3 = x3 + 1
	v19 = Mem0[x3:byte]
	w2 = (word32) v19
	w31 = w2 - 0x00000009
	NZCV = cond(w31)
	branch Test(EQ,Z) l000000000043D8E8
	// succ:  l000000000043D8F4 l000000000043D8E8
l000000000043D8F4:
	w31 = w2 - 0x00000020
	NZCV = cond(w31)
	branch Test(EQ,Z) l000000000043D8E8
	// succ:  l000000000043D8FC l000000000043D8E8
l000000000043D8FC:
	x1 = 0x00000000004AD000
	x0 = 0x0000000000000000
	x1 = x1 + 0x00000000000000D8
	w2 = 0x00000005
	Mem0[x29 + 32:word64] = x3
	Mem0[x29 + 40:word64] = x4
	dcgettext(x0, x1, x2)
	sp = sp + 0xFFFFFFFFFFFFFFF8
	x3 = Mem0[x29 + 32:word64]
	x4 = Mem0[x29 + 40:word64]
	branch x20 == 0x0000000000000000 l000000000043D964
	// succ:  l000000000043D924 l000000000043D964
l000000000043D924:
	x2 = 0x00000000004C4000
	x1 = x20
	x2 = x2 + 0xFFFFFFFFFFFFFD10
	// succ:  l000000000043D930
l000000000043D930:
	x5 = x19 + 0xFFFFFFFFFFFFFCE8
	x5 = Mem0[x5 + 32:word64]
	branch x5 == 0x0000000000000000 l000000000043D958
	// succ:  l000000000043D93C l000000000043D958
l000000000043D93C:
	v23 = Mem0[x5:byte]
	w6 = (word32) v23
	branch w6 == 0x00000000 l000000000043D958
	// succ:  l000000000043D944 l000000000043D958
l000000000043D944:
	call internal_error (retsize: 0;)
	x0 = x19 + 0xFFFFFFFFFFFFFCE8
	x0 = x0 + 0x0000000000000028
	w1 = 0x00000001
	call __longjmp_chk (retsize: 0;)
	// succ:  l000000000043D958
l000000000043D958:
	x5 = 0x00000000004AC000
	x5 = x5 + 0x0000000000000460
	goto l000000000043D944
	// succ:  l000000000043D944
l000000000043D964:
	x1 = 0x00000000004AC000
	x1 = x1 + 0x0000000000000460
	x2 = x1
	goto l000000000043D930
	// succ:  l000000000043D930
l000000000043D974:
	w31 = w1 - 0x00000020
	NZCV = cond(w31)
	branch Test(EQ,Z) l000000000043D8E8
	// succ:  l000000000043D97C l000000000043D8E8
l000000000043D97C:
	goto l000000000043D8FC
	// succ:  l000000000043D8FC
fn000000000043D8B8_exit:


// fn000000000043D980
// Return size: 0
void fn000000000043D980()
fn000000000043D980_entry:
	// succ:  l000000000043D980
l000000000043D980:
	sp = fp
	sp = sp + -240
	Mem0[sp:word64] = x29
	sp = sp + 8
	Mem0[sp:word64] = x30
	x29 = x31 + 0x0000000000000000
	v8 = sp + 80
	Mem0[v8:word64] = x27
	v8 = v8 + 8
	Mem0[v8:word64] = x28
	x27 = 0x00000000004DF000
	x0 = x27 + 0xFFFFFFFFFFFFFCE8
	v12 = sp + 32
	Mem0[v12:word64] = x21
	v12 = v12 + 8
	Mem0[v12:word64] = x22
	x21 = Mem0[x0 + 352:word64]
	v15 = sp + 16
	Mem0[v15:word64] = x19
	v15 = v15 + 8
	Mem0[v15:word64] = x20
	v18 = sp + 48
	Mem0[v18:word64] = x23
	v18 = v18 + 8
	Mem0[v18:word64] = x24
	v21 = sp + 64
	Mem0[v21:word64] = x25
	v21 = v21 + 8
	Mem0[v21:word64] = x26
	branch x21 == 0x0000000000000000 l000000000043DC30
	// succ:  l000000000043D9AC l000000000043DC30
l000000000043D9AC:
	v23 = Mem0[x21:byte]
	w20 = (word32) v23
	branch w20 == 0x00000000 l000000000043DC30
	// succ:  l000000000043D9B4 l000000000043DC30
l000000000043D9B4:
	w0 = w20 - 0x00000009
l000000000043DC30:
	x27 = x27 + 0xFFFFFFFFFFFFFCE8
	w0 = Mem0[x27 + 368:word32]
	Mem0[x27 + 352:word64] = x21
	Mem0[x27 + 372:word32] = w0
	Mem0[x27 + 368:word32] = 0x00000000
	v25 = sp + 16
	x19 = Mem0[v25:word64]
	v25 = v25 + 8
	x20 = Mem0[v25:word64]
	v26 = sp + 32
	x21 = Mem0[v26:word64]
	v26 = v26 + 8
	x22 = Mem0[v26:word64]
	v27 = sp + 48
	x23 = Mem0[v27:word64]
	v27 = v27 + 8
	x24 = Mem0[v27:word64]
	v28 = sp + 64
	x25 = Mem0[v28:word64]
	v28 = v28 + 8
	x26 = Mem0[v28:word64]
	v29 = sp + 80
	x27 = Mem0[v29:word64]
	v29 = v29 + 8
	x28 = Mem0[v29:word64]
	x29 = Mem0[sp:word64]
	sp = sp + 8
	x30 = Mem0[sp:word64]
	sp = sp + 240
	return
	// succ:  fn000000000043D980_exit
fn000000000043D980_exit:


// fn000000000043E2FC
// Return size: 0
void fn000000000043E2FC()
fn000000000043E2FC_entry:
	// succ:  l000000000043E2FC
l000000000043E2FC:
	sp = fp
	sp = sp + -32
	Mem0[sp:word64] = x29
	sp = sp + 8
	Mem0[sp:word64] = x30
	x29 = x31 + 0x0000000000000000
	Mem0[sp + 16:word64] = x19
	x19 = 0x00000000004DF000
	call fn000000000043F054 (retsize: 0;)
	x19 = x19 + 0xFFFFFFFFFFFFFCE8
	w1 = Mem0[x19 + 368:word32]
	w31 = w1 - 0x0000002C
	NZCV = cond(w31)
	branch Test(NE,Z) l000000000043E334
	// succ:  l000000000043E320 l000000000043E334
l000000000043E320:
	call fn000000000043D980 (retsize: 0;)
	call fn000000000043F054 (retsize: 0;)
	w1 = Mem0[x19 + 368:word32]
	w31 = w1 - 0x0000002C
	NZCV = cond(w31)
	branch Test(EQ,Z) l000000000043E320
	// succ:  l000000000043E334 l000000000043E320
l000000000043E334:
	x19 = Mem0[sp + 16:word64]
	x29 = Mem0[sp:word64]
	sp = sp + 8
	x30 = Mem0[sp:word64]
	sp = sp + 32
	return
	// succ:  fn000000000043E2FC_exit
fn000000000043E2FC_exit:


// fn000000000043E340
// Return size: 0
void fn000000000043E340()
fn000000000043E340_entry:
	// succ:  l000000000043E340
l000000000043E340:
	sp = fp
	sp = sp + -80
	Mem0[sp:word64] = x29
	sp = sp + 8
	Mem0[sp:word64] = x30
	x29 = x31 + 0x0000000000000000
	v8 = sp + 16
	Mem0[v8:word64] = x19
	v8 = v8 + 8
	Mem0[v8:word64] = x20
	v11 = sp + 32
	Mem0[v11:word64] = x21
	v11 = v11 + 8
	Mem0[v11:word64] = x22
	v14 = sp + 48
	Mem0[v14:word64] = x23
	v14 = v14 + 8
	Mem0[v14:word64] = x24
	Mem0[sp + 64:word64] = x25
	x20 = x0
	branch x0 == 0x0000000000000000 l000000000043E578
	// succ:  l000000000043E360 l000000000043E578
l000000000043E360:
	v18 = Mem0[x0:byte]
	w3 = (word32) v18
	branch w3 == 0x00000000 l000000000043E5A0
	// succ:  l000000000043E368 l000000000043E5A0
l000000000043E368:
	x2 = x0
	w4 = w3 - 0x00000009
l000000000043E578:
	v21 = sp + 16
	x19 = Mem0[v21:word64]
	v21 = v21 + 8
	x20 = Mem0[v21:word64]
	v22 = sp + 32
	x21 = Mem0[v22:word64]
	v22 = v22 + 8
	x22 = Mem0[v22:word64]
	v23 = sp + 48
	x23 = Mem0[v23:word64]
	v23 = v23 + 8
	x24 = Mem0[v23:word64]
	x25 = Mem0[sp + 64:word64]
	x29 = Mem0[sp:word64]
	sp = sp + 8
	x30 = Mem0[sp:word64]
	sp = sp + 80
	return
	// succ:  fn000000000043E340_exit
l000000000043E5A0:
	x0 = 0x0000000000000000
	v24 = sp + 16
	x19 = Mem0[v24:word64]
	v24 = v24 + 8
	x20 = Mem0[v24:word64]
	v25 = sp + 32
	x21 = Mem0[v25:word64]
	v25 = v25 + 8
	x22 = Mem0[v25:word64]
	v26 = sp + 48
	x23 = Mem0[v26:word64]
	v26 = v26 + 8
	x24 = Mem0[v26:word64]
	x25 = Mem0[sp + 64:word64]
	x29 = Mem0[sp:word64]
	sp = sp + 8
	x30 = Mem0[sp:word64]
	sp = sp + 80
	return
	// succ:  fn000000000043E340_exit
fn000000000043E340_exit:


// fn000000000043E620
// Return size: 0
void fn000000000043E620()
fn000000000043E620_entry:
	// succ:  l000000000043E620
l000000000043E620:
	sp = fp
	sp = sp + -224
	Mem0[sp:word64] = x29
	sp = sp + 8
	Mem0[sp:word64] = x30
	x29 = x31 + 0x0000000000000000
	v8 = sp + 32
	Mem0[v8:word64] = x21
	v8 = v8 + 8
	Mem0[v8:word64] = x22
	x21 = 0x00000000004DF000
	v11 = sp + 16
	Mem0[v11:word64] = x19
	v11 = v11 + 8
	Mem0[v11:word64] = x20
	v14 = sp + 64
	Mem0[v14:word64] = x25
	v14 = v14 + 8
	Mem0[v14:word64] = x26
	v17 = sp + 48
	Mem0[v17:word64] = x23
	v17 = v17 + 8
	Mem0[v17:word64] = x24
	v20 = sp + 80
	Mem0[v20:word64] = x27
	v20 = v20 + 8
	Mem0[v20:word64] = x28
	x20 = 0x0000000000000001
	x25 = x21 + 0xFFFFFFFFFFFFFCE8
	// succ:  l000000000043E648
l000000000043E648:
	w19 = Mem0[x25 + 368:word32]
	w31 = w19 - 0x00000021
	NZCV = cond(w31)
	branch Test(EQ,Z) l000000000043E67C
	// succ:  l000000000043E654 l000000000043E67C
l000000000043E654:
	w31 = w19 - 0x0000007E
	NZCV = cond(w31)
	branch Test(EQ,Z) l000000000043E6B8
	// succ:  l000000000043E65C l000000000043E6B8
l000000000043E65C:
	w31 = w19 - 0x0000002D
	NZCV = cond(w31)
	branch Test(EQ,Z) l000000000043E6AC
	// succ:  l000000000043E664 l000000000043E6AC
l000000000043E664:
	w31 = w19 - 0x0000002B
	NZCV = cond(w31)
	branch Test(NE,Z) l000000000043E6E4
	// succ:  l000000000043E66C l000000000043E6E4
l000000000043E66C:
	call fn000000000043D980 (retsize: 0;)
	w19 = Mem0[x25 + 368:word32]
	w31 = w19 - 0x00000021
	NZCV = cond(w31)
	branch Test(NE,Z) l000000000043E654
	// succ:  l000000000043E67C l000000000043E654
l000000000043E67C:
	call fn000000000043D980 (retsize: 0;)
	call fn000000000043E620 (retsize: 0;)
	x31 = x0 - x31
	NZCV = cond(x31)
	x26 = (word64) Test(EQ,Z)
	x0 = x26 * x20
	v26 = sp + 32
	x21 = Mem0[v26:word64]
	v26 = v26 + 8
	x22 = Mem0[v26:word64]
	v27 = sp + 16
	x19 = Mem0[v27:word64]
	v27 = v27 + 8
	x20 = Mem0[v27:word64]
	v28 = sp + 48
	x23 = Mem0[v28:word64]
	v28 = v28 + 8
	x24 = Mem0[v28:word64]
	v29 = sp + 64
	x25 = Mem0[v29:word64]
	v29 = v29 + 8
	x26 = Mem0[v29:word64]
	v30 = sp + 80
	x27 = Mem0[v30:word64]
	v30 = v30 + 8
	x28 = Mem0[v30:word64]
	x29 = Mem0[sp:word64]
	sp = sp + 8
	x30 = Mem0[sp:word64]
	sp = sp + 224
	return
	// succ:  fn000000000043E620_exit
l000000000043E6AC:
	call fn000000000043D980 (retsize: 0;)
	x20 = x31 - x20
	goto l000000000043E648
	// succ:  l000000000043E648
l000000000043E6B8:
	call fn000000000043D980 (retsize: 0;)
	call fn000000000043E620 (retsize: 0;)
	x26 = ~x0
	x0 = x26 * x20
	v48 = sp + 32
	x21 = Mem0[v48:word64]
	v48 = v48 + 8
	x22 = Mem0[v48:word64]
	v49 = sp + 16
	x19 = Mem0[v49:word64]
	v49 = v49 + 8
	x20 = Mem0[v49:word64]
	v50 = sp + 48
	x23 = Mem0[v50:word64]
	v50 = v50 + 8
	x24 = Mem0[v50:word64]
	v51 = sp + 64
	x25 = Mem0[v51:word64]
	v51 = v51 + 8
	x26 = Mem0[v51:word64]
	v52 = sp + 80
	x27 = Mem0[v52:word64]
	v52 = v52 + 8
	x28 = Mem0[v52:word64]
	x29 = Mem0[sp:word64]
	sp = sp + 8
	x30 = Mem0[sp:word64]
	sp = sp + 224
	return
	// succ:  fn000000000043E620_exit
l000000000043E6E4:
	w0 = w19 - 0x0000000E
	w31 = w0 - 0x00000001
	NZCV = cond(w31)
	branch Test(ULE,ZC) l000000000043E7E4
	// succ:  l000000000043E6F0 l000000000043E7E4
l000000000043E6F0:
	w31 = w19 - 0x00000028
	NZCV = cond(w31)
	branch Test(EQ,Z) l000000000043E868
	// succ:  l000000000043E6F8 l000000000043E868
l000000000043E6F8:
	w0 = w19 - 0x00000005
	w31 = w0 - 0x00000001
	NZCV = cond(w31)
	branch Test(UGT,ZC) l000000000043E984
	// succ:  l000000000043E704 l000000000043E984
l000000000043E704:
	w31 = w19 - 0x00000005
	NZCV = cond(w31)
	x26 = Mem0[x25 + 376:word64]
	branch Test(EQ,Z) l000000000043E734
	// succ:  l000000000043E710 l000000000043E734
l000000000043E710:
	call fn000000000043D980 (retsize: 0;)
	x0 = x26 * x20
	v33 = sp + 32
	x21 = Mem0[v33:word64]
	v33 = v33 + 8
	x22 = Mem0[v33:word64]
	v34 = sp + 16
	x19 = Mem0[v34:word64]
	v34 = v34 + 8
	x20 = Mem0[v34:word64]
	v35 = sp + 48
	x23 = Mem0[v35:word64]
	v35 = v35 + 8
	x24 = Mem0[v35:word64]
	v36 = sp + 64
	x25 = Mem0[v36:word64]
	v36 = v36 + 8
	x26 = Mem0[v36:word64]
	v37 = sp + 80
	x27 = Mem0[v37:word64]
	v37 = v37 + 8
	x28 = Mem0[v37:word64]
	x29 = Mem0[sp:word64]
	sp = sp + 8
	x30 = Mem0[sp:word64]
	sp = sp + 224
	return
	// succ:  fn000000000043E620_exit
l000000000043E734:
	w0 = Mem0[x25 + 372:word32]
	x22 = 0x00000000004D6000
	Mem0[x29 + 192:word32] = w0
	x0 = Mem0[x25 + 352:word64]
	x28 = x22 + 0xFFFFFFFFFFFFFC98
	Mem0[x29 + 200:word64] = x0
	x0 = Mem0[x25 + 32:word64]
	v43 = x28 + 16
	x2 = Mem0[v43:word64]
	v43 = v43 + 8
	x3 = Mem0[v43:word64]
l000000000043E7E4:
	Mem0[x25 + 372:word32] = w19
	call fn000000000043D980 (retsize: 0;)
	w0 = Mem0[x25 + 368:word32]
	w31 = w0 - 0x00000005
	NZCV = cond(w31)
	branch Test(NE,Z) l000000000043E96C
	// succ:  l000000000043E7F8 l000000000043E96C
l000000000043E7F8:
	w31 = w19 - 0x0000000E
	NZCV = cond(w31)
	x0 = Mem0[x25 + 376:word64]
	x6 = 0xFFFFFFFFFFFFFFFF
l000000000043E868:
	call fn000000000043D980 (retsize: 0;)
	call fn000000000043E2FC (retsize: 0;)
	x26 = x0
	w0 = Mem0[x25 + 368:word32]
	w31 = w0 - 0x00000029
	NZCV = cond(w31)
	branch Test(EQ,Z) l000000000043E710
	// succ:  l000000000043E880 l000000000043E710
l000000000043E880:
	x1 = 0x00000000004AD000
	x1 = x1 + 0x0000000000000250
	w2 = 0x00000005
	x0 = 0x0000000000000000
	dcgettext(x0, x1, x2)
	sp = sp + 0xFFFFFFFFFFFFFFF8
	call fn000000000043D8B8 (retsize: 0;)
	w31 = w0 - 0x00000010
	NZCV = cond(w31)
	x0 = 0xFFFFFFFFFFFFFFFF
l000000000043E96C:
	x1 = 0x00000000004AD000
	x1 = x1 + 0x0000000000000210
	w2 = 0x00000005
	x0 = 0x0000000000000000
	dcgettext(x0, x1, x2)
	sp = sp + 0xFFFFFFFFFFFFFFF8
	call fn000000000043D8B8 (retsize: 0;)
	// succ:  l000000000043E984
l000000000043E984:
	x1 = 0x00000000004AD000
	x1 = x1 + 0x0000000000000158
	w2 = 0x00000005
	x0 = 0x0000000000000000
	dcgettext(x0, x1, x2)
	sp = sp + 0xFFFFFFFFFFFFFFF8
	call fn000000000043D8B8 (retsize: 0;)
	// succ:  l000000000043E998_thunk_fn000000000043E99C
l000000000043E998_thunk_fn000000000043E99C:
	call fn000000000043E99C (retsize: 0;)
	return
	// succ:  fn000000000043E620_exit
fn000000000043E620_exit:


// fn000000000043E99C
// Return size: 0
void fn000000000043E99C()
fn000000000043E99C_entry:
	// succ:  l000000000043E99C
l000000000043E99C:
	sp = fp
	sp = sp + -32
	Mem0[sp:word64] = x29
	sp = sp + 8
	Mem0[sp:word64] = x30
	x29 = x31 + 0x0000000000000000
	v8 = sp + 16
	Mem0[v8:word64] = x19
	v8 = v8 + 8
	Mem0[v8:word64] = x20
	x20 = 0x00000000004DF000
	call fn000000000043E620 (retsize: 0;)
	x20 = x20 + 0xFFFFFFFFFFFFFCE8
	x19 = x0
	w0 = Mem0[x20 + 368:word32]
	w31 = w0 - 0x0000000D
	NZCV = cond(w31)
	branch Test(NE,Z) l000000000043EA00
	// succ:  l000000000043E9C4 l000000000043EA00
l000000000043E9C4:
	call fn000000000043D980 (retsize: 0;)
	call fn000000000043E99C (retsize: 0;)
	x31 = x0 - x31
	NZCV = cond(x31)
	branch Test(EQ,Z) l000000000043EA10
	// succ:  l000000000043E9D4 l000000000043EA10
l000000000043E9D4:
	branch Test(LT,NV) l000000000043EA20
	// succ:  l000000000043E9D8 l000000000043EA20
l000000000043E9D8:
	x1 = x0 - 0x0000000000000001
	x2 = 0x0000000000000001
	// succ:  l000000000043E9E0
l000000000043E9E0:
	x1 = x1 - 0x0000000000000001
	x31 = x1 + 0x0000000000000001
	NZCV = cond(x31)
	x2 = x2 * x19
	branch Test(NE,Z) l000000000043E9E0
	// succ:  l000000000043E9F0 l000000000043E9E0
l000000000043E9F0:
	w0 = Mem0[x20 + 368:word32]
	x19 = x2
	w31 = w0 - 0x0000000D
	NZCV = cond(w31)
	branch Test(EQ,Z) l000000000043E9C4
	// succ:  l000000000043EA00 l000000000043E9C4
l000000000043EA00:
	x0 = x19
	v17 = sp + 16
	x19 = Mem0[v17:word64]
	v17 = v17 + 8
	x20 = Mem0[v17:word64]
	x29 = Mem0[sp:word64]
	sp = sp + 8
	x30 = Mem0[sp:word64]
	sp = sp + 32
	return
	// succ:  fn000000000043E99C_exit
l000000000043EA10:
	x0 = 0x0000000000000001
	v19 = sp + 16
	x19 = Mem0[v19:word64]
	v19 = v19 + 8
	x20 = Mem0[v19:word64]
	x29 = Mem0[sp:word64]
	sp = sp + 8
	x30 = Mem0[sp:word64]
	sp = sp + 32
	return
	// succ:  fn000000000043E99C_exit
l000000000043EA20:
	x1 = 0x00000000004AD000
	x1 = x1 + 0x0000000000000260
	w2 = 0x00000005
	x0 = 0x0000000000000000
	dcgettext(x0, x1, x2)
	sp = sp + 0xFFFFFFFFFFFFFFF8
	call fn000000000043D8B8 (retsize: 0;)
	// succ:  l000000000043EA34_thunk_fn000000000043EA38
l000000000043EA34_thunk_fn000000000043EA38:
	call fn000000000043EA38 (retsize: 0;)
	return
	// succ:  fn000000000043E99C_exit
fn000000000043E99C_exit:


// fn000000000043EA38
// Return size: 0
void fn000000000043EA38()
fn000000000043EA38_entry:
	// succ:  l000000000043EA38
l000000000043EA38:
	sp = fp
	sp = sp + -64
	Mem0[sp:word64] = x29
	sp = sp + 8
	Mem0[sp:word64] = x30
	x29 = x31 + 0x0000000000000000
	v8 = sp + 32
	Mem0[v8:word64] = x21
	v8 = v8 + 8
	Mem0[v8:word64] = x22
	Mem0[sp + 48:word64] = x23
	v12 = sp + 16
	Mem0[v12:word64] = x19
	v12 = v12 + 8
	Mem0[v12:word64] = x20
	x23 = 0x00000000004DF000
	call fn000000000043E99C (retsize: 0;)
	x22 = x0
	x23 = x23 + 0xFFFFFFFFFFFFFCE8
	// succ:  l000000000043EA5C
l000000000043EA5C:
	w19 = Mem0[x23 + 368:word32]
	w31 = w19 - 0x0000002A
	NZCV = cond(w31)
	w21 = (word32) Test(EQ,Z)
	w31 = w19 - 0x0000002F
	NZCV = cond(w31)
	w20 = (word32) Test(EQ,Z)
	branch w20 != 0x00000000 l000000000043EAC8
	// succ:  l000000000043EA74 l000000000043EAC8
l000000000043EA74:
	branch w21 != 0x00000000 l000000000043EAC8
	// succ:  l000000000043EA78 l000000000043EAC8
l000000000043EA78:
	w31 = w19 - 0x00000025
	NZCV = cond(w31)
	branch Test(NE,Z) l000000000043EAF8
	// succ:  l000000000043EA80 l000000000043EAF8
l000000000043EA80:
	call fn000000000043D980 (retsize: 0;)
	call fn000000000043E99C (retsize: 0;)
	w1 = 0x00000001
	// succ:  l000000000043EA8C
l000000000043EA8C:
	branch x0 != 0x0000000000000000 l000000000043EA9C
	// succ:  l000000000043EA90 l000000000043EA9C
l000000000043EA90:
	w2 = Mem0[x23 + 16:word32]
	branch w2 == 0x00000000 l000000000043EB10
	// succ:  l000000000043EA98 l000000000043EB10
l000000000043EA98:
	x0 = 0x0000000000000001
	// succ:  l000000000043EA9C
l000000000043EA9C:
	branch w21 != 0x00000000 l000000000043EAE8
	// succ:  l000000000043EAA0 l000000000043EAE8
l000000000043EAA0:
	branch w20 != 0x00000000 l000000000043EAF0
	// succ:  l000000000043EAA4 l000000000043EAF0
l000000000043EAA4:
	branch w1 == 0x00000000 l000000000043EA5C
	// succ:  l000000000043EAA8 l000000000043EA5C
l000000000043EAA8:
	w19 = Mem0[x23 + 368:word32]
	x1 = x22 / x0
	w31 = w19 - 0x0000002A
	NZCV = cond(w31)
	w21 = (word32) Test(EQ,Z)
	w31 = w19 - 0x0000002F
	NZCV = cond(w31)
	w20 = (word32) Test(EQ,Z)
	x22 = x22 - x1 * x0
	branch w20 == 0x00000000 l000000000043EA74
	// succ:  l000000000043EAC8 l000000000043EA74
l000000000043EAC8:
	call fn000000000043D980 (retsize: 0;)
	call fn000000000043E99C (retsize: 0;)
	w31 = w19 - 0x00000025
	NZCV = cond(w31)
	w2 = (word32) Test(EQ,Z)
	w1 = w2 | w20
	branch w1 == 0x00000000 l000000000043EA9C
	// succ:  l000000000043EAE0 l000000000043EA9C
l000000000043EAE0:
	w1 = w2
	goto l000000000043EA8C
	// succ:  l000000000043EA8C
l000000000043EAE8:
	x22 = x22 * x0
	goto l000000000043EA5C
	// succ:  l000000000043EA5C
l000000000043EAF0:
	x22 = x22 / x0
	goto l000000000043EA5C
	// succ:  l000000000043EA5C
l000000000043EAF8:
	x0 = x22
	v22 = sp + 16
	x19 = Mem0[v22:word64]
	v22 = v22 + 8
	x20 = Mem0[v22:word64]
	v23 = sp + 32
	x21 = Mem0[v23:word64]
	v23 = v23 + 8
	x22 = Mem0[v23:word64]
	x23 = Mem0[sp + 48:word64]
	x29 = Mem0[sp:word64]
	sp = sp + 8
	x30 = Mem0[sp:word64]
	sp = sp + 64
	return
	// succ:  fn000000000043EA38_exit
l000000000043EB10:
	x1 = 0x00000000004AD000
	x1 = x1 + 0x0000000000000278
	w2 = 0x00000005
	dcgettext(x0, x1, x2)
	sp = sp + 0xFFFFFFFFFFFFFFF8
	call fn000000000043D8B8 (retsize: 0;)
	// succ:  l000000000043EB20_thunk_fn000000000043EB24
l000000000043EB20_thunk_fn000000000043EB24:
	call fn000000000043EB24 (retsize: 0;)
	return
	// succ:  fn000000000043EA38_exit
fn000000000043EA38_exit:


// fn000000000043EB24
// Return size: 0
void fn000000000043EB24()
fn000000000043EB24_entry:
	// succ:  l000000000043EB24
l000000000043EB24:
	sp = fp
	sp = sp + -48
	Mem0[sp:word64] = x29
	sp = sp + 8
	Mem0[sp:word64] = x30
	x29 = x31 + 0x0000000000000000
	v8 = sp + 16
	Mem0[v8:word64] = x19
	v8 = v8 + 8
	Mem0[v8:word64] = x20
	v11 = sp + 32
	Mem0[v11:word64] = x21
	v11 = v11 + 8
	Mem0[v11:word64] = x22
	call fn000000000043EA38 (retsize: 0;)
	x22 = 0x00000000004DF000
	x20 = x0
	x22 = x22 + 0xFFFFFFFFFFFFFCE8
	// succ:  l000000000043EB44
l000000000043EB44:
	w1 = Mem0[x22 + 368:word32]
	w31 = w1 - 0x0000002B
	NZCV = cond(w31)
	w21 = (word32) Test(EQ,Z)
	w31 = w1 - 0x0000002D
	NZCV = cond(w31)
	w19 = (word32) Test(EQ,Z)
	branch w19 == 0x00000000 l000000000043EB8C
	// succ:  l000000000043EB5C l000000000043EB8C
l000000000043EB5C:
	call fn000000000043D980 (retsize: 0;)
	call fn000000000043EA38 (retsize: 0;)
	x1 = x20 - x0
	NZCV = cond(w19 - w31)
	branch w21 != 0x00000000 l000000000043EBA4
	// succ:  l000000000043EB70 l000000000043EBA4
l000000000043EB70:
l000000000043EB8C:
	branch w21 != 0x00000000 l000000000043EB5C
	// succ:  l000000000043EB90 l000000000043EB5C
l000000000043EB90:
	x0 = x20
	v20 = sp + 32
	x21 = Mem0[v20:word64]
	v20 = v20 + 8
	x22 = Mem0[v20:word64]
	v21 = sp + 16
	x19 = Mem0[v21:word64]
	v21 = v21 + 8
	x20 = Mem0[v21:word64]
	x29 = Mem0[sp:word64]
	sp = sp + 8
	x30 = Mem0[sp:word64]
	sp = sp + 48
	return
	// succ:  fn000000000043EB24_exit
l000000000043EBA4:
	x20 = x20 + x0
	goto l000000000043EB44
	// succ:  l000000000043EB44
fn000000000043EB24_exit:


// fn000000000043EBAC
// Return size: 0
void fn000000000043EBAC()
fn000000000043EBAC_entry:
	// succ:  l000000000043EBAC
l000000000043EBAC:
	sp = fp
	sp = sp + -48
	Mem0[sp:word64] = x29
	sp = sp + 8
	Mem0[sp:word64] = x30
	x29 = x31 + 0x0000000000000000
	v8 = sp + 16
	Mem0[v8:word64] = x19
	v8 = v8 + 8
	Mem0[v8:word64] = x20
	Mem0[sp + 32:word64] = x21
	call fn000000000043EB24 (retsize: 0;)
	x21 = 0x00000000004DF000
	x20 = x0
	x21 = x21 + 0xFFFFFFFFFFFFFCE8
	// succ:  l000000000043EBCC
l000000000043EBCC:
	w19 = Mem0[x21 + 368:word32]
	w1 = w19 - 0x00000009
	w31 = w1 - 0x00000001
	NZCV = cond(w31)
	branch Test(UGT,ZC) l000000000043EC00
	// succ:  l000000000043EBDC l000000000043EC00
l000000000043EBDC:
	call fn000000000043D980 (retsize: 0;)
	call fn000000000043EB24 (retsize: 0;)
	w31 = w19 - 0x00000009
	NZCV = cond(w31)
	branch Test(EQ,Z) l000000000043EC14
	// succ:  l000000000043EBEC l000000000043EC14
l000000000043EBEC:
	w19 = Mem0[x21 + 368:word32]
	x20 = x20 >> x0
	w1 = w19 - 0x00000009
	w31 = w1 - 0x00000001
	NZCV = cond(w31)
	branch Test(ULE,ZC) l000000000043EBDC
	// succ:  l000000000043EC00 l000000000043EBDC
l000000000043EC00:
	x0 = x20
	x21 = Mem0[sp + 32:word64]
	v17 = sp + 16
	x19 = Mem0[v17:word64]
	v17 = v17 + 8
	x20 = Mem0[v17:word64]
	x29 = Mem0[sp:word64]
	sp = sp + 8
	x30 = Mem0[sp:word64]
	sp = sp + 48
	return
	// succ:  fn000000000043EBAC_exit
l000000000043EC14:
	x20 = x20 << x0
	goto l000000000043EBCC
	// succ:  l000000000043EBCC
fn000000000043EBAC_exit:


// fn000000000043EC1C
// Return size: 0
void fn000000000043EC1C()
fn000000000043EC1C_entry:
	// succ:  l000000000043EC1C
l000000000043EC1C:
	sp = fp
	sp = sp + -48
	Mem0[sp:word64] = x29
	sp = sp + 8
	Mem0[sp:word64] = x30
	x29 = x31 + 0x0000000000000000
	v8 = sp + 32
	Mem0[v8:word64] = x21
	v8 = v8 + 8
	Mem0[v8:word64] = x22
	v11 = sp + 16
	Mem0[v11:word64] = x19
	v11 = v11 + 8
	Mem0[v11:word64] = x20
	x22 = 0x00000000004DF000
	call fn000000000043EBAC (retsize: 0;)
	x21 = x0
	x22 = x22 + 0xFFFFFFFFFFFFFCE8
	// succ:  l000000000043EC3C
l000000000043EC3C:
	w19 = Mem0[x22 + 368:word32]
	w31 = w19 - 0x0000003C
	NZCV = cond(w31)
	w0 = w19 - 0x00000003
	w20 = (word32) Test(EQ,Z)
	w31 = w0 - 0x00000001
	NZCV = cond(w31)
	branch Test(ULE,ZC) l000000000043EC88
	// succ:  l000000000043EC54 l000000000043EC88
l000000000043EC54:
	branch w20 != 0x00000000 l000000000043EC88
	// succ:  l000000000043EC58 l000000000043EC88
l000000000043EC58:
	w31 = w19 - 0x0000003E
	NZCV = cond(w31)
	branch Test(NE,Z) l000000000043ECC8
	// succ:  l000000000043EC60 l000000000043ECC8
l000000000043EC60:
	call fn000000000043D980 (retsize: 0;)
	call fn000000000043EBAC (retsize: 0;)
	// succ:  l000000000043EC68
l000000000043EC68:
	w19 = Mem0[x22 + 368:word32]
	x31 = x21 - x0
	NZCV = cond(x31)
	x21 = (word64) Test(GT,NZV)
	w0 = w19 - 0x00000003
	w31 = w19 - 0x0000003C
	NZCV = cond(w31)
	w20 = (word32) Test(EQ,Z)
	w31 = w0 - 0x00000001
	NZCV = cond(w31)
	branch Test(UGT,ZC) l000000000043EC54
	// succ:  l000000000043EC88 l000000000043EC54
l000000000043EC88:
	call fn000000000043D980 (retsize: 0;)
	call fn000000000043EBAC (retsize: 0;)
	w31 = w19 - 0x00000003
	NZCV = cond(w31)
	branch Test(NE,Z) l000000000043ECA4
	// succ:  l000000000043EC98 l000000000043ECA4
l000000000043EC98:
	x31 = x21 - x0
	NZCV = cond(x31)
	x21 = (word64) Test(LE,ZCV)
	goto l000000000043EC3C
	// succ:  l000000000043EC3C
l000000000043ECA4:
	w31 = w19 - 0x00000004
	NZCV = cond(w31)
	branch Test(EQ,Z) l000000000043ECBC
	// succ:  l000000000043ECAC l000000000043ECBC
l000000000043ECAC:
	branch w20 == 0x00000000 l000000000043EC68
	// succ:  l000000000043ECB0 l000000000043EC68
l000000000043ECB0:
	x31 = x21 - x0
	NZCV = cond(x31)
	x21 = (word64) Test(LT,NV)
	goto l000000000043EC3C
	// succ:  l000000000043EC3C
l000000000043ECBC:
	x31 = x21 - x0
	NZCV = cond(x31)
	x21 = (word64) Test(GE,NZV)
	goto l000000000043EC3C
	// succ:  l000000000043EC3C
l000000000043ECC8:
	x0 = x21
	v22 = sp + 16
	x19 = Mem0[v22:word64]
	v22 = v22 + 8
	x20 = Mem0[v22:word64]
	v23 = sp + 32
	x21 = Mem0[v23:word64]
	v23 = v23 + 8
	x22 = Mem0[v23:word64]
	x29 = Mem0[sp:word64]
	sp = sp + 8
	x30 = Mem0[sp:word64]
	sp = sp + 48
	return
	// succ:  fn000000000043EC1C_exit
fn000000000043EC1C_exit:


// fn000000000043ECDC
// Return size: 0
void fn000000000043ECDC()
fn000000000043ECDC_entry:
	// succ:  l000000000043ECDC
l000000000043ECDC:
	sp = fp
	sp = sp + -48
	Mem0[sp:word64] = x29
	sp = sp + 8
	Mem0[sp:word64] = x30
	x29 = x31 + 0x0000000000000000
	v8 = sp + 16
	Mem0[v8:word64] = x19
	v8 = v8 + 8
	Mem0[v8:word64] = x20
	Mem0[sp + 32:word64] = x21
	x20 = 0x00000000004DF000
	call fn000000000043EC1C (retsize: 0;)
	x21 = x0
	x20 = x20 + 0xFFFFFFFFFFFFFCE8
	// succ:  l000000000043ECFC
l000000000043ECFC:
	w19 = Mem0[x20 + 368:word32]
	w1 = w19 - 0x00000001
	w31 = w1 - 0x00000001
	NZCV = cond(w31)
	branch Test(UGT,ZC) l000000000043ED34
	// succ:  l000000000043ED0C l000000000043ED34
l000000000043ED0C:
	call fn000000000043D980 (retsize: 0;)
	call fn000000000043EC1C (retsize: 0;)
	w31 = w19 - 0x00000001
	NZCV = cond(w31)
	branch Test(EQ,Z) l000000000043ED48
	// succ:  l000000000043ED1C l000000000043ED48
l000000000043ED1C:
	w19 = Mem0[x20 + 368:word32]
	x31 = x21 - x0
	NZCV = cond(x31)
	w1 = w19 - 0x00000001
	x21 = (word64) Test(NE,Z)
	w31 = w1 - 0x00000001
	NZCV = cond(w31)
	branch Test(ULE,ZC) l000000000043ED0C
	// succ:  l000000000043ED34 l000000000043ED0C
l000000000043ED34:
	x0 = x21
	v17 = sp + 16
	x19 = Mem0[v17:word64]
	v17 = v17 + 8
	x20 = Mem0[v17:word64]
	x21 = Mem0[sp + 32:word64]
	x29 = Mem0[sp:word64]
	sp = sp + 8
	x30 = Mem0[sp:word64]
	sp = sp + 48
	return
	// succ:  fn000000000043ECDC_exit
l000000000043ED48:
	x31 = x21 - x0
	NZCV = cond(x31)
	x21 = (word64) Test(EQ,Z)
	goto l000000000043ECFC
	// succ:  l000000000043ECFC
fn000000000043ECDC_exit:


// fn000000000043ED54
// Return size: 0
void fn000000000043ED54()
fn000000000043ED54_entry:
	// succ:  l000000000043ED54
l000000000043ED54:
	sp = fp
	sp = sp + -32
	Mem0[sp:word64] = x29
	sp = sp + 8
	Mem0[sp:word64] = x30
	x29 = x31 + 0x0000000000000000
	v8 = sp + 16
	Mem0[v8:word64] = x19
	v8 = v8 + 8
	Mem0[v8:word64] = x20
	x20 = 0x00000000004DF000
	call fn000000000043ECDC (retsize: 0;)
	x20 = x20 + 0xFFFFFFFFFFFFFCE8
	x19 = x0
	w0 = Mem0[x20 + 368:word32]
	w31 = w0 - 0x00000026
	NZCV = cond(w31)
	branch Test(NE,Z) l000000000043ED94
	// succ:  l000000000043ED7C l000000000043ED94
l000000000043ED7C:
	call fn000000000043D980 (retsize: 0;)
	call fn000000000043ECDC (retsize: 0;)
	w1 = Mem0[x20 + 368:word32]
	x19 = x19 & x0
	w31 = w1 - 0x00000026
	NZCV = cond(w31)
	branch Test(EQ,Z) l000000000043ED7C
	// succ:  l000000000043ED94 l000000000043ED7C
l000000000043ED94:
	x0 = x19
	v15 = sp + 16
	x19 = Mem0[v15:word64]
	v15 = v15 + 8
	x20 = Mem0[v15:word64]
	x29 = Mem0[sp:word64]
	sp = sp + 8
	x30 = Mem0[sp:word64]
	sp = sp + 32
	return
	// succ:  fn000000000043ED54_exit
fn000000000043ED54_exit:


// fn000000000043EDA4
// Return size: 0
void fn000000000043EDA4()
fn000000000043EDA4_entry:
	// succ:  l000000000043EDA4
l000000000043EDA4:
	sp = fp
	sp = sp + -32
	Mem0[sp:word64] = x29
	sp = sp + 8
	Mem0[sp:word64] = x30
	x29 = x31 + 0x0000000000000000
	v8 = sp + 16
	Mem0[v8:word64] = x19
	v8 = v8 + 8
	Mem0[v8:word64] = x20
	x20 = 0x00000000004DF000
	call fn000000000043ED54 (retsize: 0;)
	x20 = x20 + 0xFFFFFFFFFFFFFCE8
	x19 = x0
	w0 = Mem0[x20 + 368:word32]
	w31 = w0 - 0x0000005E
	NZCV = cond(w31)
	branch Test(NE,Z) l000000000043EDE4
	// succ:  l000000000043EDCC l000000000043EDE4
l000000000043EDCC:
	call fn000000000043D980 (retsize: 0;)
	call fn000000000043ED54 (retsize: 0;)
	w1 = Mem0[x20 + 368:word32]
	x19 = x19 ^ x0
	w31 = w1 - 0x0000005E
	NZCV = cond(w31)
	branch Test(EQ,Z) l000000000043EDCC
	// succ:  l000000000043EDE4 l000000000043EDCC
l000000000043EDE4:
	x0 = x19
	v15 = sp + 16
	x19 = Mem0[v15:word64]
	v15 = v15 + 8
	x20 = Mem0[v15:word64]
	x29 = Mem0[sp:word64]
	sp = sp + 8
	x30 = Mem0[sp:word64]
	sp = sp + 32
	return
	// succ:  fn000000000043EDA4_exit
fn000000000043EDA4_exit:


// fn000000000043EDF4
// Return size: 0
void fn000000000043EDF4()
fn000000000043EDF4_entry:
	// succ:  l000000000043EDF4
l000000000043EDF4:
	sp = fp
	sp = sp + -32
	Mem0[sp:word64] = x29
	sp = sp + 8
	Mem0[sp:word64] = x30
	x29 = x31 + 0x0000000000000000
	v8 = sp + 16
	Mem0[v8:word64] = x19
	v8 = v8 + 8
	Mem0[v8:word64] = x20
	x20 = 0x00000000004DF000
	call fn000000000043EDA4 (retsize: 0;)
	x20 = x20 + 0xFFFFFFFFFFFFFCE8
	x19 = x0
	w0 = Mem0[x20 + 368:word32]
	w31 = w0 - 0x0000007C
	NZCV = cond(w31)
	branch Test(NE,Z) l000000000043EE34
	// succ:  l000000000043EE1C l000000000043EE34
l000000000043EE1C:
	call fn000000000043D980 (retsize: 0;)
	call fn000000000043EDA4 (retsize: 0;)
	w1 = Mem0[x20 + 368:word32]
	x19 = x19 | x0
	w31 = w1 - 0x0000007C
	NZCV = cond(w31)
	branch Test(EQ,Z) l000000000043EE1C
	// succ:  l000000000043EE34 l000000000043EE1C
l000000000043EE34:
	x0 = x19
	v15 = sp + 16
	x19 = Mem0[v15:word64]
	v15 = v15 + 8
	x20 = Mem0[v15:word64]
	x29 = Mem0[sp:word64]
	sp = sp + 8
	x30 = Mem0[sp:word64]
	sp = sp + 32
	return
	// succ:  fn000000000043EDF4_exit
fn000000000043EDF4_exit:


// fn000000000043EE44
// Return size: 0
void fn000000000043EE44()
fn000000000043EE44_entry:
	// succ:  l000000000043EE44
l000000000043EE44:
	sp = fp
	sp = sp + -48
	Mem0[sp:word64] = x29
	sp = sp + 8
	Mem0[sp:word64] = x30
	x29 = x31 + 0x0000000000000000
	v8 = sp + 16
	Mem0[v8:word64] = x19
	v8 = v8 + 8
	Mem0[v8:word64] = x20
	x19 = 0x00000000004DF000
	x19 = x19 + 0xFFFFFFFFFFFFFCE8
	Mem0[sp + 32:word64] = x21
	call fn000000000043EDF4 (retsize: 0;)
	w21 = Mem0[x19 + 368:word32]
	x20 = x0
	w31 = w21 - 0x00000007
	NZCV = cond(w31)
	branch Test(NE,Z) l000000000043EEB8
	// succ:  l000000000043EE70 l000000000043EEB8
l000000000043EE70:
	branch x20 != 0x0000000000000000 l000000000043EECC
	// succ:  l000000000043EE74 l000000000043EECC
l000000000043EE74:
	w0 = Mem0[x19 + 16:word32]
	w0 = w0 + 0x00000001
	Mem0[x19 + 16:word32] = w0
	call fn000000000043D980 (retsize: 0;)
	call fn000000000043EDF4 (retsize: 0;)
	w1 = Mem0[x19 + 16:word32]
	w1 = w1 - 0x00000001
	Mem0[x19 + 16:word32] = w1
	// succ:  l000000000043EE94
l000000000043EE94:
	x31 = x0 - x31
	NZCV = cond(x31)
	w1 = Mem0[x19 + 368:word32]
	w0 = (word32) Test(NE,Z)
	x31 = x20 - x31
	NZCV = cond(x31)
	x20 = (word64) Test(NE,Z)
	Mem0[x19 + 372:word32] = w21
	w31 = w1 - 0x00000007
	NZCV = cond(w31)
	x20 = x20 & x0
	branch Test(EQ,Z) l000000000043EE70
	// succ:  l000000000043EEB8 l000000000043EE70
l000000000043EEB8:
	x0 = x20
	x21 = Mem0[sp + 32:word64]
	v17 = sp + 16
	x19 = Mem0[v17:word64]
	v17 = v17 + 8
	x20 = Mem0[v17:word64]
	x29 = Mem0[sp:word64]
	sp = sp + 8
	x30 = Mem0[sp:word64]
	sp = sp + 48
	return
	// succ:  fn000000000043EE44_exit
l000000000043EECC:
	call fn000000000043D980 (retsize: 0;)
	call fn000000000043EDF4 (retsize: 0;)
	goto l000000000043EE94
	// succ:  l000000000043EE94
fn000000000043EE44_exit:


// fn000000000043EED8
// Return size: 0
void fn000000000043EED8()
fn000000000043EED8_entry:
	// succ:  l000000000043EED8
l000000000043EED8:
	sp = fp
	sp = sp + -64
	Mem0[sp:word64] = x29
	sp = sp + 8
	Mem0[sp:word64] = x30
	x29 = x31 + 0x0000000000000000
	v8 = sp + 32
	Mem0[v8:word64] = x21
	v8 = v8 + 8
	Mem0[v8:word64] = x22
	x22 = 0x00000000004DF000
	v11 = sp + 16
	Mem0[v11:word64] = x19
	v11 = v11 + 8
	Mem0[v11:word64] = x20
	call fn000000000043EE44 (retsize: 0;)
	x19 = x22 + 0xFFFFFFFFFFFFFCE8
	w1 = Mem0[x19 + 368:word32]
	x20 = x0
	w31 = w1 - 0x00000008
	NZCV = cond(w31)
	branch Test(NE,Z) l000000000043EF48
	// succ:  l000000000043EF04 l000000000043EF48
l000000000043EF04:
	w21 = w1
	// succ:  l000000000043EF08
l000000000043EF08:
	branch x20 == 0x0000000000000000 l000000000043EF64
	// succ:  l000000000043EF0C l000000000043EF64
l000000000043EF0C:
	w0 = Mem0[x19 + 16:word32]
	w0 = w0 + 0x00000001
	Mem0[x19 + 16:word32] = w0
	call fn000000000043D980 (retsize: 0;)
	call fn000000000043EE44 (retsize: 0;)
	w1 = Mem0[x19 + 16:word32]
	w1 = w1 - 0x00000001
	Mem0[x19 + 16:word32] = w1
	// succ:  l000000000043EF2C
l000000000043EF2C:
	x20 = x0 | x20
	w1 = Mem0[x19 + 368:word32]
	x31 = x20 - x31
	NZCV = cond(x31)
	x20 = (word64) Test(NE,Z)
	Mem0[x19 + 372:word32] = w21
	w31 = w1 - 0x00000008
	NZCV = cond(w31)
	branch Test(EQ,Z) l000000000043EF08
	// succ:  l000000000043EF48 l000000000043EF08
l000000000043EF48:
	w31 = w1 - 0x0000003F
	NZCV = cond(w31)
	branch Test(EQ,Z) l000000000043EF70
	// succ:  l000000000043EF50 l000000000043EF70
l000000000043EF50:
	x0 = x20
	v19 = sp + 32
	x21 = Mem0[v19:word64]
	v19 = v19 + 8
	x22 = Mem0[v19:word64]
	v20 = sp + 16
	x19 = Mem0[v20:word64]
	v20 = v20 + 8
	x20 = Mem0[v20:word64]
	x29 = Mem0[sp:word64]
	sp = sp + 8
	x30 = Mem0[sp:word64]
	sp = sp + 64
	return
	// succ:  fn000000000043EED8_exit
l000000000043EF64:
	call fn000000000043D980 (retsize: 0;)
	call fn000000000043EE44 (retsize: 0;)
	goto l000000000043EF2C
	// succ:  l000000000043EF2C
l000000000043EF70:
	call fn000000000043D980 (retsize: 0;)
	x19 = x22 + 0xFFFFFFFFFFFFFCE8
	w0 = Mem0[x19 + 368:word32]
	w31 = w0 - 0x0000003A
	NZCV = cond(w31)
	branch Test(EQ,Z) l000000000043F024
	// succ:  l000000000043EF84 l000000000043F024
l000000000043EF84:
	branch w0 == 0x00000000 l000000000043F024
	// succ:  l000000000043EF88 l000000000043F024
l000000000043EF88:
	branch x20 != 0x0000000000000000 l000000000043F010
	// succ:  l000000000043EF8C l000000000043F010
l000000000043EF8C:
	w0 = Mem0[x19 + 16:word32]
	w0 = w0 + 0x00000001
	Mem0[x19 + 16:word32] = w0
	call fn000000000043E2FC (retsize: 0;)
	w1 = Mem0[x19 + 16:word32]
	w1 = w1 - 0x00000001
	Mem0[x19 + 16:word32] = w1
	// succ:  l000000000043EFA8
l000000000043EFA8:
	x19 = x22 + 0xFFFFFFFFFFFFFCE8
	w1 = Mem0[x19 + 368:word32]
	w31 = w1 - 0x0000003A
	NZCV = cond(w31)
	branch Test(NE,Z) l000000000043F03C
	// succ:  l000000000043EFB8 l000000000043F03C
l000000000043EFB8:
	Mem0[x29 + 48:word64] = x0
	call fn000000000043D980 (retsize: 0;)
	w1 = Mem0[x19 + 368:word32]
	x0 = Mem0[x29 + 48:word64]
	branch w1 == 0x00000000 l000000000043F024
	// succ:  l000000000043EFCC l000000000043F024
l000000000043EFCC:
	branch x20 == 0x0000000000000000 l000000000043F018
	// succ:  l000000000043EFD0 l000000000043F018
l000000000043EFD0:
	w1 = Mem0[x19 + 16:word32]
	x20 = x0
	w1 = w1 + 0x00000001
	Mem0[x19 + 16:word32] = w1
	call fn000000000043EED8 (retsize: 0;)
	w0 = Mem0[x19 + 16:word32]
	w0 = w0 - 0x00000001
	Mem0[x19 + 16:word32] = w0
	// succ:  l000000000043EFF0
l000000000043EFF0:
	x22 = x22 + 0xFFFFFFFFFFFFFCE8
	w0 = 0x0000000C
	Mem0[x22 + 372:word32] = w0
	x0 = x20
	v21 = sp + 32
	x21 = Mem0[v21:word64]
	v21 = v21 + 8
	x22 = Mem0[v21:word64]
	v22 = sp + 16
	x19 = Mem0[v22:word64]
	v22 = v22 + 8
	x20 = Mem0[v22:word64]
	x29 = Mem0[sp:word64]
	sp = sp + 8
	x30 = Mem0[sp:word64]
	sp = sp + 64
	return
	// succ:  fn000000000043EED8_exit
l000000000043F010:
	call fn000000000043E2FC (retsize: 0;)
	goto l000000000043EFA8
	// succ:  l000000000043EFA8
l000000000043F018:
	call fn000000000043EED8 (retsize: 0;)
	x20 = x0
	goto l000000000043EFF0
	// succ:  l000000000043EFF0
l000000000043F024:
	x1 = 0x00000000004AD000
	x1 = x1 + 0x0000000000000288
	w2 = 0x00000005
	x0 = 0x0000000000000000
	dcgettext(x0, x1, x2)
	sp = sp + 0xFFFFFFFFFFFFFFF8
	call fn000000000043D8B8 (retsize: 0;)
	// succ:  l000000000043F03C
l000000000043F03C:
	x1 = 0x00000000004AD000
	x1 = x1 + 0x00000000000002A0
	w2 = 0x00000005
	x0 = 0x0000000000000000
	dcgettext(x0, x1, x2)
	sp = sp + 0xFFFFFFFFFFFFFFF8
	call fn000000000043D8B8 (retsize: 0;)
	// succ:  l000000000043F050_thunk_fn000000000043F054
l000000000043F050_thunk_fn000000000043F054:
	call fn000000000043F054 (retsize: 0;)
	return
	// succ:  fn000000000043EED8_exit
fn000000000043EED8_exit:


// fn000000000043F054
// Return size: 0
void fn000000000043F054()
fn000000000043F054_entry:
	// succ:  l000000000043F054
l000000000043F054:
	sp = fp
	sp = sp + -64
	Mem0[sp:word64] = x29
	sp = sp + 8
	Mem0[sp:word64] = x30
	x29 = x31 + 0x0000000000000000
	v8 = sp + 16
	Mem0[v8:word64] = x19
	v8 = v8 + 8
	Mem0[v8:word64] = x20
	v11 = sp + 32
	Mem0[v11:word64] = x21
	v11 = v11 + 8
	Mem0[v11:word64] = x22
	v14 = sp + 48
	Mem0[v14:word64] = x23
	v14 = v14 + 8
	Mem0[v14:word64] = x24
	x20 = 0x00000000004DF000
	call fn000000000043EED8 (retsize: 0;)
	x19 = x0
	x0 = x20 + 0xFFFFFFFFFFFFFCE8
	w1 = Mem0[x0 + 368:word32]
	w31 = w1 - 0x0000000B
	NZCV = cond(w31)
	w0 = (word32) Test(EQ,Z)
	branch w0 == 0x00000000 l000000000043F1E4
	// succ:  l000000000043F088 l000000000043F1E4
l000000000043F088:
	x21 = x20 + 0xFFFFFFFFFFFFFCE8
	w1 = Mem0[x21 + 372:word32]
	w31 = w1 - 0x00000005
	NZCV = cond(w31)
	branch Test(NE,Z) l000000000043F2F0
	// succ:  l000000000043F098 l000000000043F2F0
l000000000043F098:
	branch w0 != 0x00000000 l000000000043F168
	// succ:  l000000000043F09C l000000000043F168
l000000000043F09C:
	x0 = Mem0[x21 + 360:word64]
	x23 = 0x00000000004AD000
	strlen(x0)
	sp = sp + 0xFFFFFFFFFFFFFFF8
	w2 = 0x000001D7
	x1 = x23 + 0x00000000000000C0
	x0 = x0 + 0x0000000000000001
	call sh_xmalloc (retsize: 0;)
	x1 = Mem0[x21 + 360:word64]
	strcpy(x0, x1)
	sp = sp + 0xFFFFFFFFFFFFFFF8
	x24 = x0
	x0 = 0x00000000004D6000
	x0 = x0 + 0xFFFFFFFFFFFFFC98
	x21 = Mem0[x0 + 24:word64]
	call fn000000000043D980 (retsize: 0;)
	call fn000000000043F054 (retsize: 0;)
	x19 = x0
	// succ:  l000000000043F0DC
l000000000043F0DC:
	x0 = x19
	call itos (retsize: 0;)
	x22 = x0
	x0 = x20 + 0xFFFFFFFFFFFFFCE8
	w0 = Mem0[x0 + 16:word32]
	branch w0 != 0x00000000 l000000000043F10C
	// succ:  l000000000043F0F4 l000000000043F10C
l000000000043F0F4:
	x31 = x21 + 0x0000000000000001
	NZCV = cond(x31)
	x0 = x24
	branch Test(EQ,Z) l000000000043F298
	// succ:  l000000000043F100 l000000000043F298
l000000000043F100:
	x1 = x21
	x2 = x22
	call fn000000000043D7EC (retsize: 0;)
	// succ:  l000000000043F10C
l000000000043F10C:
	x21 = x23 + 0x00000000000000C0
	w2 = 0x00000217
	x0 = x22
	x1 = x21
	call sh_xfree (retsize: 0;)
	x0 = x24
	x1 = x21
	w2 = 0x00000218
	call sh_xfree (retsize: 0;)
	x0 = x20 + 0xFFFFFFFFFFFFFCE8
	x0 = Mem0[x0 + 360:word64]
	branch x0 == 0x0000000000000000 l000000000043F148
	// succ:  l000000000043F13C l000000000043F148
l000000000043F13C:
	x1 = x21
	w2 = 0x00000219
	call sh_xfree (retsize: 0;)
	// succ:  l000000000043F148
l000000000043F148:
	x20 = x20 + 0xFFFFFFFFFFFFFCE8
	x0 = x19
	Mem0[x20 + 360:word64] = 0x0000000000000000
	v30 = sp + 32
	x21 = Mem0[v30:word64]
	v30 = v30 + 8
	x22 = Mem0[v30:word64]
	v31 = sp + 16
	x19 = Mem0[v31:word64]
	v31 = v31 + 8
	x20 = Mem0[v31:word64]
	v32 = sp + 48
	x23 = Mem0[v32:word64]
	v32 = v32 + 8
	x24 = Mem0[v32:word64]
	x29 = Mem0[sp:word64]
	sp = sp + 8
	x30 = Mem0[sp:word64]
	sp = sp + 64
	return
	// succ:  fn000000000043F054_exit
l000000000043F168:
	x0 = Mem0[x21 + 360:word64]
	x23 = 0x00000000004AD000
	strlen(x0)
	sp = sp + 0xFFFFFFFFFFFFFFF8
	w2 = 0x000001D7
	x1 = x23 + 0x00000000000000C0
	x0 = x0 + 0x0000000000000001
	w22 = Mem0[x21 + 384:word32]
	call sh_xmalloc (retsize: 0;)
	x1 = Mem0[x21 + 360:word64]
	strcpy(x0, x1)
	sp = sp + 0xFFFFFFFFFFFFFFF8
	x24 = x0
	x0 = 0x00000000004D6000
	x0 = x0 + 0xFFFFFFFFFFFFFC98
	x21 = Mem0[x0 + 24:word64]
	call fn000000000043D980 (retsize: 0;)
	call fn000000000043F054 (retsize: 0;)
	w31 = w22 - 0x00000025
	NZCV = cond(w31)
	branch Test(NE,Z) l000000000043F204
	// succ:  l000000000043F1B0 l000000000043F204
l000000000043F1B0:
	branch x0 == 0x0000000000000000 l000000000043F210
	// succ:  l000000000043F1B4 l000000000043F210
l000000000043F1B4:
	w31 = w22 - 0x0000002A
	NZCV = cond(w31)
	branch Test(EQ,Z) l000000000043F2E8
	// succ:  l000000000043F1BC l000000000043F2E8
l000000000043F1BC:
	branch Test(LE,ZCV) l000000000043F238
	// succ:  l000000000043F1C0 l000000000043F238
l000000000043F1C0:
	w31 = w22 - 0x0000002F
	NZCV = cond(w31)
	branch Test(EQ,Z) l000000000043F2C8
	// succ:  l000000000043F1C8 l000000000043F2C8
l000000000043F1C8:
	branch Test(GT,NZV) l000000000043F25C
	// succ:  l000000000043F1CC l000000000043F25C
l000000000043F1CC:
	w31 = w22 - 0x0000002B
	NZCV = cond(w31)
	branch Test(EQ,Z) l000000000043F2AC
	// succ:  l000000000043F1D4 l000000000043F2AC
l000000000043F1D4:
	w31 = w22 - 0x0000002D
	NZCV = cond(w31)
	x19 = x19 - x0
	branch Test(EQ,Z) l000000000043F0DC
	// succ:  l000000000043F1E0 l000000000043F0DC
l000000000043F1E0:
	goto l000000000043F270
	// succ:  l000000000043F270
l000000000043F1E4:
	w31 = w1 - 0x0000003D
	NZCV = cond(w31)
	branch Test(EQ,Z) l000000000043F088
	// succ:  l000000000043F1EC l000000000043F088
l000000000043F1EC:
	x0 = x19
	v24 = sp + 32
	x21 = Mem0[v24:word64]
	v24 = v24 + 8
	x22 = Mem0[v24:word64]
	v25 = sp + 16
	x19 = Mem0[v25:word64]
	v25 = v25 + 8
	x20 = Mem0[v25:word64]
	v26 = sp + 48
	x23 = Mem0[v26:word64]
	v26 = v26 + 8
	x24 = Mem0[v26:word64]
	x29 = Mem0[sp:word64]
	sp = sp + 8
	x30 = Mem0[sp:word64]
	sp = sp + 64
	return
	// succ:  fn000000000043F054_exit
l000000000043F204:
	w31 = w22 - 0x0000002F
	NZCV = cond(w31)
	branch Test(NE,Z) l000000000043F1B4
	// succ:  l000000000043F20C l000000000043F1B4
l000000000043F20C:
	branch x0 != 0x0000000000000000 l000000000043F1B4
	// succ:  l000000000043F210 l000000000043F1B4
l000000000043F210:
	x0 = x20 + 0xFFFFFFFFFFFFFCE8
	w1 = Mem0[x0 + 16:word32]
	x0 = 0x0000000000000001
	branch w1 != 0x00000000 l000000000043F1B4
	// succ:  l000000000043F220 l000000000043F1B4
l000000000043F220:
	x1 = 0x00000000004AD000
	x1 = x1 + 0x0000000000000278
	w2 = 0x00000005
	x0 = 0x0000000000000000
	dcgettext(x0, x1, x2)
	sp = sp + 0xFFFFFFFFFFFFFFF8
	call fn000000000043D8B8 (retsize: 0;)
	// succ:  l000000000043F238
l000000000043F238:
	w31 = w22 - 0x0000000A
	NZCV = cond(w31)
	branch Test(EQ,Z) l000000000043F2E0
	// succ:  l000000000043F240 l000000000043F2E0
l000000000043F240:
	branch Test(LE,ZCV) l000000000043F2D0
	// succ:  l000000000043F244 l000000000043F2D0
l000000000043F244:
	w31 = w22 - 0x00000025
	NZCV = cond(w31)
	branch Test(EQ,Z) l000000000043F2BC
	// succ:  l000000000043F24C l000000000043F2BC
l000000000043F24C:
	w31 = w22 - 0x00000026
	NZCV = cond(w31)
	x19 = x19 & x0
	branch Test(EQ,Z) l000000000043F0DC
	// succ:  l000000000043F258 l000000000043F0DC
l000000000043F258:
	goto l000000000043F270
	// succ:  l000000000043F270
l000000000043F25C:
	w31 = w22 - 0x0000005E
	NZCV = cond(w31)
	branch Test(EQ,Z) l000000000043F2B4
	// succ:  l000000000043F264 l000000000043F2B4
l000000000043F264:
	w31 = w22 - 0x0000007C
	NZCV = cond(w31)
	x19 = x19 | x0
	branch Test(EQ,Z) l000000000043F0DC
	// succ:  l000000000043F270 l000000000043F0DC
l000000000043F270:
	x0 = x24
	x1 = x23 + 0x00000000000000C0
	w2 = 0x00000208
	call sh_xfree (retsize: 0;)
	x1 = 0x00000000004AD000
	x1 = x1 + 0x00000000000002F0
	w2 = 0x00000005
	x0 = 0x0000000000000000
	dcgettext(x0, x1, x2)
	sp = sp + 0xFFFFFFFFFFFFFFF8
	call fn000000000043D8B8 (retsize: 0;)
	// succ:  l000000000043F298
l000000000043F298:
	x1 = x22
	call bind_int_variable (retsize: 0;)
	x0 = x24
	call stupidly_hack_special_variables (retsize: 0;)
	goto l000000000043F10C
	// succ:  l000000000043F10C
l000000000043F2AC:
	x19 = x19 + x0
	goto l000000000043F0DC
	// succ:  l000000000043F0DC
l000000000043F2B4:
	x19 = x19 ^ x0
	goto l000000000043F0DC
	// succ:  l000000000043F0DC
l000000000043F2BC:
	x1 = x19 / x0
	x19 = x19 - x1 * x0
	goto l000000000043F0DC
	// succ:  l000000000043F0DC
l000000000043F2C8:
	x19 = x19 / x0
	goto l000000000043F0DC
	// succ:  l000000000043F0DC
l000000000043F2D0:
	w31 = w22 - 0x00000009
	NZCV = cond(w31)
	branch Test(NE,Z) l000000000043F270
	// succ:  l000000000043F2D8 l000000000043F270
l000000000043F2D8:
	x19 = x19 << x0
	goto l000000000043F0DC
	// succ:  l000000000043F0DC
l000000000043F2E0:
	x19 = x19 >> x0
	goto l000000000043F0DC
	// succ:  l000000000043F0DC
l000000000043F2E8:
	x19 = x19 * x0
	goto l000000000043F0DC
	// succ:  l000000000043F0DC
l000000000043F2F0:
	x1 = 0x00000000004AD000
	x1 = x1 + 0x00000000000002C8
	w2 = 0x00000005
	x0 = 0x0000000000000000
	dcgettext(x0, x1, x2)
	sp = sp + 0xFFFFFFFFFFFFFFF8
	call fn000000000043D8B8 (retsize: 0;)
	// succ:  l000000000043F304_thunk_evalexp
l000000000043F304_thunk_evalexp:
	call evalexp (retsize: 0;)
	return
	// succ:  fn000000000043F054_exit
fn000000000043F054_exit:


// evalexp
// Return size: 0
void evalexp()
evalexp_entry:
	// succ:  l000000000043F308
l000000000043F308:
	sp = fp
	sp = sp + -368
	Mem0[sp:word64] = x29
	sp = sp + 8
	Mem0[sp:word64] = x30
	x29 = x31 + 0x0000000000000000
	x3 = 0x00000000004DF000
	x3 = x3 + 0xFFFFFFFFFFFFFCE8
	Mem0[sp + 16:word64] = x19
	x19 = x3 + 0x0000000000000028
	Mem0[x29 + 360:word64] = x0
	Mem0[x29 + 352:word64] = x1
	x0 = x29 + 0x0000000000000020
	x1 = x19
	x2 = 0x0000000000000138
	Mem0[x3 + 16:word32] = 0x00000000
	memcpy(x0, x1, x2)
	sp = sp + 0xFFFFFFFFFFFFFFF8
	x0 = x19
	w1 = 0x00000001
	call __sigsetjmp (retsize: 0;)
	branch w0 == 0x00000000 l000000000043F3BC
	// succ:  l000000000043F34C l000000000043F3BC
l000000000043F34C:
	x0 = 0x00000000004DF000
	x0 = x0 + 0xFFFFFFFFFFFFFCE8
	x0 = Mem0[x0 + 360:word64]
	branch x0 == 0x0000000000000000 l000000000043F36C
	// succ:  l000000000043F35C l000000000043F36C
l000000000043F35C:
	x1 = 0x00000000004AD000
	x1 = x1 + 0x00000000000000C0
	w2 = 0x00000175
	call sh_xfree (retsize: 0;)
	// succ:  l000000000043F36C
l000000000043F36C:
	x0 = 0x00000000004DF000
	x0 = x0 + 0xFFFFFFFFFFFFFCE8
	x0 = Mem0[x0 + 24:word64]
	branch x0 == 0x0000000000000000 l000000000043F38C
	// succ:  l000000000043F37C l000000000043F38C
l000000000043F37C:
	x1 = 0x00000000004AD000
	x1 = x1 + 0x00000000000000C0
	w2 = 0x00000176
	call sh_xfree (retsize: 0;)
	// succ:  l000000000043F38C
l000000000043F38C:
	x0 = 0x00000000004DF000
	x0 = x0 + 0xFFFFFFFFFFFFFCE8
	Mem0[x0 + 24:word64] = 0x0000000000000000
	Mem0[x0 + 360:word64] = 0x0000000000000000
	call fn000000000043D718 (retsize: 0;)
	x0 = Mem0[x29 + 352:word64]
	branch x0 == 0x0000000000000000 l000000000043F400
	// succ:  l000000000043F3A8 l000000000043F400
l000000000043F3A8:
	Mem0[x0:word32] = 0x00000000
	x19 = Mem0[sp + 16:word64]
	x0 = 0x0000000000000000
	x29 = Mem0[sp:word64]
	sp = sp + 8
	x30 = Mem0[sp:word64]
	sp = sp + 368
	return
	// succ:  evalexp_exit
l000000000043F3BC:
	x0 = Mem0[x29 + 360:word64]
	call fn000000000043E340 (retsize: 0;)
	x1 = Mem0[x29 + 352:word64]
	x19 = x0
	branch x1 == 0x0000000000000000 l000000000043F3D8
	// succ:  l000000000043F3D0 l000000000043F3D8
l000000000043F3D0:
	w0 = 0x00000001
	Mem0[x1:word32] = w0
	// succ:  l000000000043F3D8
l000000000043F3D8:
	x0 = 0x00000000004DF000
	x0 = x0 + 0xFFFFFFFFFFFFFCE8
	x1 = x29 + 0x0000000000000020
	x2 = 0x0000000000000138
	x0 = x0 + 0x0000000000000028
	memcpy(x0, x1, x2)
	sp = sp + 0xFFFFFFFFFFFFFFF8
	x0 = x19
	x19 = Mem0[sp + 16:word64]
	x29 = Mem0[sp:word64]
	sp = sp + 8
	x30 = Mem0[sp:word64]
	sp = sp + 368
	return
	// succ:  evalexp_exit
l000000000043F400:
	x0 = Mem0[x29 + 352:word64]
	x19 = Mem0[sp + 16:word64]
	x29 = Mem0[sp:word64]
	sp = sp + 8
	x30 = Mem0[sp:word64]
	sp = sp + 368
	return
	// succ:  evalexp_exit
evalexp_exit:


// find_flag
// Return size: 0
void find_flag()
find_flag_entry:
	// succ:  l000000000043F410
l000000000043F410:
	sp = fp
	w31 = w0 - 0x00000061
	NZCV = cond(w31)
	branch Test(EQ,Z) l000000000043F44C
	// succ:  l000000000043F418 l000000000043F44C
l000000000043F418:
	x4 = 0x00000000004AD000
	x1 = x4 + 0x0000000000000340
	x1 = x1 + 0x0000000000000010
	w3 = 0x00000000
	goto l000000000043F434
	// succ:  l000000000043F434
l000000000043F42C:
	x1 = x1 + 0x0000000000000010
	branch Test(EQ,Z) l000000000043F454
	// succ:  l000000000043F434 l000000000043F454
l000000000043F434:
	v13 = Mem0[x1:byte]
	w2 = (word32) v13
	w3 = w3 + 0x00000001
	NZCV = cond(w2 - w0)
	branch w2 != 0x00000000 l000000000043F42C
	// succ:  l000000000043F444 l000000000043F42C
l000000000043F444:
	x0 = 0x0000000000000000
	return
	// succ:  find_flag_exit
l000000000043F44C:
	w3 = 0x00000000
	x4 = 0x00000000004AD000
	// succ:  l000000000043F454
l000000000043F454:
	x4 = x4 + 0x0000000000000340
	x3 = x4 + (int64) ((int32) w3)
	x0 = Mem0[x3 + 8:word64]
	return
	// succ:  find_flag_exit
find_flag_exit:


// change_flag
// Return size: 0
void change_flag()
change_flag_entry:
	// succ:  l000000000043F464
l000000000043F464:
	sp = fp
	sp = sp + -32
	Mem0[sp:word64] = x29
	sp = sp + 8
	Mem0[sp:word64] = x30
	x29 = x31 + 0x0000000000000000
	x6 = 0x00000000004DF000
	x2 = x6 + 0xFFFFFFFFFFFFFE70
	w2 = Mem0[x2:word32]
	Mem0[sp + 16:word64] = x19
	w5 = w0
	branch w2 == 0x00000000 l000000000043F48C
	// succ:  l000000000043F484 l000000000043F48C
l000000000043F484:
	w31 = w0 - 0x00000072
	NZCV = cond(w31)
	branch Test(EQ,Z) l000000000043F594
	// succ:  l000000000043F48C l000000000043F594
l000000000043F48C:
	w31 = w5 - 0x00000061
	NZCV = cond(w31)
	branch Test(EQ,Z) l000000000043F4D4
	// succ:  l000000000043F494 l000000000043F4D4
l000000000043F494:
	x0 = 0x00000000004AD000
	x2 = x0 + 0x0000000000000340
	x2 = x2 + 0x0000000000000010
	w4 = 0x00000000
	goto l000000000043F4B4
	// succ:  l000000000043F4B4
l000000000043F4A8:
	NZCV = cond(w5 - w3)
	x2 = x2 + 0x0000000000000010
	branch Test(EQ,Z) l000000000043F4DC
	// succ:  l000000000043F4B4 l000000000043F4DC
l000000000043F4B4:
	v24 = Mem0[x2:byte]
	w3 = (word32) v24
	w4 = w4 + 0x00000001
	branch w3 != 0x00000000 l000000000043F4A8
	// succ:  l000000000043F4C0 l000000000043F4A8
l000000000043F4C0:
	w19 = 0xFFFFFFFF
	// succ:  l000000000043F4C4
l000000000043F4C4:
	w0 = w19
	x19 = Mem0[sp + 16:word64]
	x29 = Mem0[sp:word64]
	sp = sp + 8
	x30 = Mem0[sp:word64]
	sp = sp + 32
	return
	// succ:  change_flag_exit
l000000000043F4D4:
	w4 = 0x00000000
	x0 = 0x00000000004AD000
	// succ:  l000000000043F4DC
l000000000043F4DC:
	x0 = x0 + 0x0000000000000340
	x4 = x0 + (int64) ((int32) w4)
	x2 = Mem0[x4 + 8:word64]
	w19 = 0xFFFFFFFF
	branch x2 == 0x0000000000000000 l000000000043F4C4
	// succ:  l000000000043F4F0 l000000000043F4C4
l000000000043F4F0:
	w31 = w1 - 0x0000002B
	NZCV = cond(w31)
	branch Test(NE,Z) l000000000043F5A0
	// succ:  l000000000043F4F8 l000000000043F5A0
l000000000043F4F8:
	w31 = w1 - 0x0000002D
	NZCV = cond(w31)
	w0 = (word32) Test(EQ,Z)
	w5 = w5 - 0x00000048
	w19 = Mem0[x2:word32]
	w31 = w5 - 0x0000002A
	NZCV = cond(w31)
	Mem0[x2:word32] = w0
	branch Test(UGT,ZC) l000000000043F4C4
	// succ:  l000000000043F514 l000000000043F4C4
l000000000043F514:
	x2 = 0x00000000004AD000
	x2 = x2 + 0x0000000000000310
	v22 = Mem0[x2 + (uint64) ((uint32) w5):byte]
	w3 = (word32) v22
	x4 = 0x000000000043F52C
	x3 = x4 + (int64) ((int8) w3)
l000000000043F594:
	w31 = w1 - 0x0000002B
	NZCV = cond(w31)
	branch Test(NE,Z) l000000000043F48C
	// succ:  l000000000043F59C l000000000043F48C
l000000000043F59C:
	goto l000000000043F4C0
	// succ:  l000000000043F4C0
l000000000043F5A0:
	w31 = w1 - 0x0000002D
	NZCV = cond(w31)
	branch Test(EQ,Z) l000000000043F4F8
	// succ:  l000000000043F5A8 l000000000043F4F8
l000000000043F5A8:
	goto l000000000043F4C4
	// succ:  l000000000043F4C4
change_flag_exit:


// which_set_flags
// Return size: 0
void which_set_flags()
which_set_flags_entry:
	// succ:  l000000000043F5AC
l000000000043F5AC:
	sp = fp
	sp = sp + -32
	Mem0[sp:word64] = x29
	sp = sp + 8
	Mem0[sp:word64] = x30
	x29 = x31 + 0x0000000000000000
	v8 = sp + 16
	Mem0[v8:word64] = x19
	v8 = v8 + 8
	Mem0[v8:word64] = x20
	x19 = 0x00000000004E3000
	x20 = 0x00000000004E3000
	v10 = Mem0[x19 + 288:int32]
	x1 = (word64) v10
	v12 = Mem0[x20 + 264:int32]
	x0 = (word64) v12
	w2 = 0x0000012E
	x0 = x1 + x0
	x1 = 0x00000000004AD000
	x1 = x1 + 0x00000000000004B0
	x0 = x0 + 0x0000000000000018
	call sh_xmalloc (retsize: 0;)
	x1 = 0x00000000004AD000
	x1 = x1 + 0x0000000000000340
	x1 = x1 + 0x0000000000000008
	w2 = 0x00000061
	w4 = 0x00000000
	// succ:  l000000000043F5F4
l000000000043F5F4:
	x3 = Mem0[x1:word64]
	x1 = x1 + 0x0000000000000010
	w3 = Mem0[x3:word32]
	branch w3 == 0x00000000 l000000000043F60C
	// succ:  l000000000043F604 l000000000043F60C
l000000000043F604:
	Mem0[x0 + (int64) ((int32) w4):byte] = (byte) w2
	w4 = w4 + 0x00000001
	// succ:  l000000000043F60C
l000000000043F60C:
	v17 = Mem0[x1 + -8:byte]
	w2 = (word32) v17
	branch w2 != 0x00000000 l000000000043F5F4
	// succ:  l000000000043F614 l000000000043F5F4
l000000000043F614:
	w1 = Mem0[x20 + 528:word32]
	w2 = w4
	branch w1 == 0x00000000 l000000000043F62C
	// succ:  l000000000043F620 l000000000043F62C
l000000000043F620:
	w1 = 0x00000063
	w4 = w4 + 0x00000001
	Mem0[x0 + (int64) ((int32) w2):byte] = (byte) w1
	// succ:  l000000000043F62C
l000000000043F62C:
	w1 = Mem0[x19 + 576:word32]
	branch w1 == 0x00000000 l000000000043F640
	// succ:  l000000000043F634 l000000000043F640
l000000000043F634:
	w1 = 0x00000073
	Mem0[x0 + (int64) ((int32) w4):byte] = (byte) w1
	w4 = w4 + 0x00000001
	// succ:  l000000000043F640
l000000000043F640:
	Mem0[x0 + (int64) ((int32) w4):byte] = 0x00
	v19 = sp + 16
	x19 = Mem0[v19:word64]
	v19 = v19 + 8
	x20 = Mem0[v19:word64]
	x29 = Mem0[sp:word64]
	sp = sp + 8
	x30 = Mem0[sp:word64]
	sp = sp + 32
	return
	// succ:  which_set_flags_exit
which_set_flags_exit:


// reset_shell_flags
// Return size: 0
void reset_shell_flags()
reset_shell_flags_entry:
	// succ:  l000000000043F650
l000000000043F650:
	sp = fp
	x0 = 0x00000000004DF000
	x1 = 0x00000000004D6000
	x0 = x0 + 0xFFFFFFFFFFFFFE70
	x1 = x1 + 0xFFFFFFFFFFFFFCD8
	w2 = 0x00000001
	Mem0[x0 + 8:word32] = 0x00000000
	Mem0[x0 + 12:word32] = 0x00000000
	Mem0[x0 + 16:word32] = 0x00000000
	Mem0[x0 + 20:word32] = 0x00000000
	Mem0[x0 + 4:word32] = 0x00000000
	Mem0[x0 + 24:word32] = 0x00000000
	Mem0[x0 + 28:word32] = 0x00000000
	Mem0[x0 + 32:word32] = 0x00000000
	Mem0[x0 + 36:word32] = 0x00000000
	Mem0[x0 + 40:word32] = 0x00000000
	Mem0[x0 + 44:word32] = 0x00000000
	Mem0[x0 + 48:word32] = 0x00000000
	Mem0[x0 + 52:word32] = 0x00000000
	Mem0[x0 + 56:word32] = 0x00000000
	Mem0[x0 + 60:word32] = 0x00000000
	Mem0[x0 + 64:word32] = 0x00000000
	Mem0[x1:word32] = w2
	Mem0[x1 + 4:word32] = w2
	Mem0[x0 + 68:word32] = 0x00000000
	Mem0[x1 + 8:word32] = w2
	Mem0[x1 + 12:word32] = w2
	Mem0[x0:word32] = 0x00000000
	return
	// succ:  reset_shell_flags_exit
reset_shell_flags_exit:


// initialize_flags
// Return size: 0
void initialize_flags()
initialize_flags_entry:
	// succ:  l000000000043F6C0
l000000000043F6C0:
	sp = fp
	x2 = 0x00000000004AD000
	x4 = 0x00000000004D6000
	x2 = x2 + 0x0000000000000340
	x4 = x4 + 0xFFFFFFFFFFFFFCD8
	x2 = x2 + 0x0000000000000010
	x0 = 0x0000000000000000
	w1 = 0x00000061
	x4 = x4 + 0x0000000000000010
	// succ:  l000000000043F6E0
l000000000043F6E0:
	x3 = x4 + x0
	Mem0[x3 + 1:byte] = (byte) w1
	v8 = Mem0[x2:byte]
	w1 = (word32) v8
	x2 = x2 + 16
	w3 = w0
	x0 = x0 + 0x0000000000000001
	branch w1 != 0x00000000 l000000000043F6E0
	// succ:  l000000000043F6F8 l000000000043F6E0
l000000000043F6F8:
	w0 = w3 + 0x00000002
	w2 = 0x0000006F
	Mem0[x4 + (int64) ((int32) w0):byte] = (byte) w2
	w0 = w3 + 0x00000003
	w2 = 0x0000003B
	Mem0[x4 + (int64) ((int32) w0):byte] = (byte) w2
	w3 = w3 + 0x00000004
	Mem0[x4 + (int64) ((int32) w3):byte] = (byte) w1
	return
	// succ:  initialize_flags_exit
initialize_flags_exit:


// fn000000000043F71C
// Return size: 0
void fn000000000043F71C()
fn000000000043F71C_entry:
	// succ:  l000000000043F71C
l000000000043F71C:
	sp = fp
	x3 = 0x00000000004D6000
	x3 = x3 + 0xFFFFFFFFFFFFFD08
	w8 = Mem0[x3 + 28:word32]
	NZCV = cond(w8 - w31)
	branch Test(LE,ZCV) l000000000043F7A8
	// succ:  l000000000043F730 l000000000043F7A8
l000000000043F730:
	x3 = 0x00000000004DF000
	x3 = x3 + 0xFFFFFFFFFFFFFEC8
	x6 = Mem0[x3:word64]
	w7 = 0x00000000
	// succ:  l000000000043F740
l000000000043F740:
	x3 = Mem0[x6:word64]
	branch x3 == 0x0000000000000000 l000000000043F798
	// succ:  l000000000043F748 l000000000043F798
l000000000043F748:
	x5 = Mem0[x3 + 8:word64]
	x3 = x5
	goto l000000000043F760
	// succ:  l000000000043F760
l000000000043F754:
	x3 = Mem0[x3:word64]
	x31 = x5 - x3
	NZCV = cond(x31)
	branch Test(EQ,Z) l000000000043F798
	// succ:  l000000000043F760 l000000000043F798
l000000000043F760:
	w4 = Mem0[x3 + 8:word32]
	NZCV = cond(w4 - w0)
	branch Test(NE,Z) l000000000043F754
	// succ:  l000000000043F76C l000000000043F754
l000000000043F76C:
	branch w1 == 0x00000000 l000000000043F788
	// succ:  l000000000043F770 l000000000043F788
l000000000043F770:
	w4 = Mem0[x3 + 16:word32]
	w31 = w4 - 0x00000001
	NZCV = cond(w31)
	branch Test(EQ,Z) l000000000043F788
	// succ:  l000000000043F77C l000000000043F788
l000000000043F77C:
	v15 = Mem0[x3 + 12:byte]
	w4 = (word32) v15
	w31 = w4 - 0x0000007F
	NZCV = cond(w31)
	branch Test(NE,Z) l000000000043F754
	// succ:  l000000000043F788 l000000000043F754
l000000000043F788:
	branch x2 == 0x0000000000000000 l000000000043F790
	// succ:  l000000000043F78C l000000000043F790
l000000000043F78C:
	Mem0[x2:word64] = x3
	// succ:  l000000000043F790
l000000000043F790:
	w0 = w7
	return
	// succ:  fn000000000043F71C_exit
l000000000043F798:
	w7 = w7 + 0x00000001
	NZCV = cond(w7 - w8)
	x6 = x6 + 0x0000000000000008
	branch Test(NE,Z) l000000000043F740
	// succ:  l000000000043F7A8 l000000000043F740
l000000000043F7A8:
	w0 = 0xFFFFFFFF
	return
	// succ:  fn000000000043F71C_exit
fn000000000043F71C_exit:


// fn000000000043F7B0
// Return size: 0
void fn000000000043F7B0()
fn000000000043F7B0_entry:
	// succ:  l000000000043F7B0
l000000000043F7B0:
	sp = fp
	sp = sp + -48
	Mem0[sp:word64] = x29
	sp = sp + 8
	Mem0[sp:word64] = x30
	x29 = x31 + 0x0000000000000000
	v8 = sp + 16
	Mem0[v8:word64] = x19
	v8 = v8 + 8
	Mem0[v8:word64] = x20
	x19 = x2
	branch x2 == 0x0000000000000000 l000000000043F7CC
	// succ:  l000000000043F7C4 l000000000043F7CC
l000000000043F7C4:
	w2 = 0xFFFFFFFF
	Mem0[x19:word32] = w2
	// succ:  l000000000043F7CC
l000000000043F7CC:
	x20 = 0x00000000004DF000
	x2 = x20 + 0xFFFFFFFFFFFFFEC8
	x5 = Mem0[x2 + 8:word64]
	branch x5 == 0x0000000000000000 l000000000043F830
	// succ:  l000000000043F7DC l000000000043F830
l000000000043F7DC:
	Mem0[x29 + 32:word64] = x5
	x3 = x5
	goto l000000000043F7F4
	// succ:  l000000000043F7F4
l000000000043F7E8:
	x3 = Mem0[x3:word64]
	x31 = x5 - x3
	NZCV = cond(x31)
	branch Test(EQ,Z) l000000000043F82C
	// succ:  l000000000043F7F4 l000000000043F82C
l000000000043F7F4:
	w4 = Mem0[x3 + 8:word32]
	NZCV = cond(w4 - w0)
	branch Test(NE,Z) l000000000043F7E8
	// succ:  l000000000043F800 l000000000043F7E8
l000000000043F800:
	branch w1 == 0x00000000 l000000000043F81C
	// succ:  l000000000043F804 l000000000043F81C
l000000000043F804:
	w4 = Mem0[x3 + 16:word32]
	w31 = w4 - 0x00000001
	NZCV = cond(w31)
	branch Test(EQ,Z) l000000000043F81C
	// succ:  l000000000043F810 l000000000043F81C
l000000000043F810:
	v19 = Mem0[x3 + 12:byte]
	w4 = (word32) v19
	w31 = w4 - 0x0000007F
	NZCV = cond(w31)
	branch Test(NE,Z) l000000000043F7E8
	// succ:  l000000000043F81C l000000000043F7E8
l000000000043F81C:
	x0 = x3
	v21 = sp + 16
	x19 = Mem0[v21:word64]
	v21 = v21 + 8
	x20 = Mem0[v21:word64]
	x29 = Mem0[sp:word64]
	sp = sp + 8
	x30 = Mem0[sp:word64]
	sp = sp + 48
	return
	// succ:  fn000000000043F7B0_exit
l000000000043F82C:
	Mem0[x29 + 32:word64] = x5
	// succ:  l000000000043F830
l000000000043F830:
	x2 = x29 + 0x0000000000000020
	call fn000000000043F71C (retsize: 0;)
	branch x19 == 0x0000000000000000 l000000000043F840
	// succ:  l000000000043F83C l000000000043F840
l000000000043F83C:
	Mem0[x19:word32] = w0
	// succ:  l000000000043F840
l000000000043F840:
	w31 = w0 + 0x00000001
	NZCV = cond(w31)
	branch Test(EQ,Z) l000000000043F868
	// succ:  l000000000043F848 l000000000043F868
l000000000043F848:
	x20 = x20 + 0xFFFFFFFFFFFFFEC8
	x1 = Mem0[x20:word64]
	v23 = sp + 16
	x19 = Mem0[v23:word64]
	v23 = v23 + 8
	x20 = Mem0[v23:word64]
	x0 = Mem0[x1 + (int64) ((int32) w0):word64]
	x29 = Mem0[sp:word64]
	sp = sp + 8
	x30 = Mem0[sp:word64]
	sp = sp + 48
	x3 = Mem0[x0 + 8:word64]
	x0 = x3
	return
	// succ:  fn000000000043F7B0_exit
l000000000043F868:
	x3 = 0x0000000000000000
	x0 = x3
	v24 = sp + 16
	x19 = Mem0[v24:word64]
	v24 = v24 + 8
	x20 = Mem0[v24:word64]
	x29 = Mem0[sp:word64]
	sp = sp + 8
	x30 = Mem0[sp:word64]
	sp = sp + 48
	return
	// succ:  fn000000000043F7B0_exit
fn000000000043F7B0_exit:


// fn000000000043F8CC
// Return size: 0
void fn000000000043F8CC()
fn000000000043F8CC_entry:
	// succ:  l000000000043F8CC
l000000000043F8CC:
	sp = fp
	x1 = 0x00000000004DF000
	x1 = x1 + 0xFFFFFFFFFFFFFEC8
	x1 = Mem0[x1:word64]
	w3 = 0x00000001
	x4 = Mem0[x1 + (int64) ((int32) w0):word64]
	x2 = Mem0[x4 + 8:word64]
	x0 = x2
	goto l000000000043F8F8
	// succ:  l000000000043F8F8
l000000000043F8EC:
	x0 = Mem0[x0:word64]
	x31 = x2 - x0
	NZCV = cond(x31)
	branch Test(EQ,Z) l000000000043F914
	// succ:  l000000000043F8F8 l000000000043F914
l000000000043F8F8:
	v10 = Mem0[x0 + 12:byte]
	w1 = (word32) v10
	w31 = w1 - 0x0000007F
	NZCV = cond(w31)
	branch Test(NE,Z) l000000000043F8EC
	// succ:  l000000000043F904 l000000000043F8EC
l000000000043F904:
	Mem0[x0 + 16:word32] = w3
	x0 = Mem0[x0:word64]
	x31 = x2 - x0
	NZCV = cond(x31)
	branch Test(NE,Z) l000000000043F8F8
	// succ:  l000000000043F914 l000000000043F8F8
l000000000043F914:
	w0 = 0x00000001
	Mem0[x4 + 20:word32] = w0
	return
	// succ:  fn000000000043F8CC_exit
fn000000000043F8CC_exit:


// fn000000000043F920
// Return size: 0
void fn000000000043F920()
fn000000000043F920_entry:
	// succ:  l000000000043F920
l000000000043F920:
	sp = fp
	sp = sp + -288
	Mem0[sp:word64] = x29
	sp = sp + 8
	Mem0[sp:word64] = x30
	x29 = x31 + 0x0000000000000000
	v8 = sp + 16
	Mem0[v8:word64] = x19
	v8 = v8 + 8
	Mem0[v8:word64] = x20
	w19 = w0
	x0 = x29 + 0x00000000000000A0
	w20 = w1
	sigemptyset(x0)
	sp = sp + 0xFFFFFFFFFFFFFFF8
	w1 = 0x00000011
	x0 = x29 + 0x00000000000000A0
	sigaddset(x0, x1)
	sp = sp + 0xFFFFFFFFFFFFFFF8
	x0 = x29 + 0x0000000000000020
	sigemptyset(x0)
	sp = sp + 0xFFFFFFFFFFFFFFF8
	w0 = 0x00000000
	x1 = x29 + 0x00000000000000A0
	x2 = x29 + 0x0000000000000020
	sigprocmask(x0, x1, x2)
	sp = sp + 0xFFFFFFFFFFFFFFF8
	w19 = w19 - 0x00000001
	NZCV = cond(w19)
	branch Test(LT,N) l000000000043F9BC
	// succ:  l000000000043F968 l000000000043F9BC
l000000000043F968:
	x0 = 0x00000000004DF000
	x0 = x0 + 0xFFFFFFFFFFFFFEC8
	x0 = Mem0[x0:word64]
	x0 = x0 + (int64) ((int32) w19)
	// succ:  l000000000043F978
l000000000043F978:
	x2 = Mem0[x0:word64]
	x0 = x0 - 0x0000000000000008
	branch x2 == 0x0000000000000000 l000000000043F990
	// succ:  l000000000043F984 l000000000043F990
l000000000043F984:
	w2 = Mem0[x2 + 20:word32]
	NZCV = cond(w2 - w20)
	branch Test(EQ,Z) l000000000043F99C
	// succ:  l000000000043F990 l000000000043F99C
l000000000043F990:
	w19 = w19 - 0x00000001
	w31 = w19 + 0x00000001
	NZCV = cond(w31)
	branch Test(NE,Z) l000000000043F978
	// succ:  l000000000043F99C l000000000043F978
l000000000043F99C:
	x1 = x29 + 0x0000000000000020
	x2 = 0x0000000000000000
	w0 = 0x00000002
	sigprocmask(x0, x1, x2)
	sp = sp + 0xFFFFFFFFFFFFFFF8
	w0 = w19
	v21 = sp + 16
	x19 = Mem0[v21:word64]
	v21 = v21 + 8
	x20 = Mem0[v21:word64]
	x29 = Mem0[sp:word64]
	sp = sp + 8
	x30 = Mem0[sp:word64]
	sp = sp + 288
	return
	// succ:  fn000000000043F920_exit
l000000000043F9BC:
	w19 = 0xFFFFFFFF
	goto l000000000043F99C
	// succ:  l000000000043F99C
fn000000000043F920_exit:


// fn000000000043F9C4
// Return size: 0
void fn000000000043F9C4()
fn000000000043F9C4_entry:
	// succ:  l000000000043F9C4
l000000000043F9C4:
	sp = fp
	sp = sp + -32
	Mem0[sp:word64] = x29
	sp = sp + 8
	Mem0[sp:word64] = x30
	x29 = x31 + 0x0000000000000000
	v8 = sp + 16
	Mem0[v8:word64] = x19
	v8 = v8 + 8
	Mem0[v8:word64] = x20
	x19 = 0x00000000004D6000
	x2 = x19 + 0xFFFFFFFFFFFFFD08
	w1 = Mem0[x2 + 48:word32]
	NZCV = cond(w1 - w0)
	branch Test(EQ,Z) l000000000043FA60
	// succ:  l000000000043F9E4 l000000000043FA60
l000000000043F9E4:
	Mem0[x2 + 52:word32] = w1
	Mem0[x2 + 48:word32] = w0
	// succ:  l000000000043F9EC
l000000000043F9EC:
	w31 = w1 + 0x00000001
	NZCV = cond(w31)
	branch Test(EQ,Z) l000000000043FAA4
	// succ:  l000000000043F9F4 l000000000043FAA4
l000000000043F9F4:
	x20 = 0x00000000004DF000
	x2 = x20 + 0xFFFFFFFFFFFFFEC8
	x2 = Mem0[x2:word64]
	x1 = Mem0[x2 + (int64) ((int32) w1):word64]
	branch x1 == 0x0000000000000000 l000000000043FA14
	// succ:  l000000000043FA08 l000000000043FA14
l000000000043FA08:
	w1 = Mem0[x1 + 20:word32]
	w31 = w1 - 0x00000002
	NZCV = cond(w31)
	branch Test(EQ,Z) l000000000043FA4C
	// succ:  l000000000043FA14 l000000000043FA4C
l000000000043FA14:
	x1 = Mem0[x2 + (int64) ((int32) w0):word64]
	w1 = Mem0[x1 + 20:word32]
	w31 = w1 - 0x00000002
	NZCV = cond(w31)
	branch Test(EQ,Z) l000000000043FA8C
	// succ:  l000000000043FA24 l000000000043FA8C
l000000000043FA24:
	w31 = w1 - 0x00000001
	NZCV = cond(w31)
	branch Test(EQ,Z) l000000000043FA38
	// succ:  l000000000043FA2C l000000000043FA38
l000000000043FA2C:
	x0 = x19 + 0xFFFFFFFFFFFFFD08
	w0 = Mem0[x0 + 28:word32]
	w1 = 0x00000001
	// succ:  l000000000043FA38
l000000000043FA38:
	call fn000000000043F920 (retsize: 0;)
	w31 = w0 + 0x00000001
	NZCV = cond(w31)
	x19 = x19 + 0xFFFFFFFFFFFFFD08
	branch Test(EQ,Z) l000000000043FA58
	// succ:  l000000000043FA48 l000000000043FA58
l000000000043FA48:
	Mem0[x19 + 52:word32] = w0
	// succ:  l000000000043FA4C
l000000000043FA4C:
	v18 = sp + 16
	x19 = Mem0[v18:word64]
	v18 = v18 + 8
	x20 = Mem0[v18:word64]
	x29 = Mem0[sp:word64]
	sp = sp + 8
	x30 = Mem0[sp:word64]
	sp = sp + 32
	return
	// succ:  fn000000000043F9C4_exit
l000000000043FA58:
	w0 = Mem0[x19 + 48:word32]
	goto l000000000043FA48
	// succ:  l000000000043FA48
l000000000043FA60:
	w2 = Mem0[x2 + 52:word32]
	NZCV = cond(w1 - w2)
	branch Test(NE,Z) l000000000043FAC8
	// succ:  l000000000043FA6C l000000000043FAC8
l000000000043FA6C:
	x20 = 0x00000000004DF000
	x0 = x20 + 0xFFFFFFFFFFFFFEC8
	x2 = Mem0[x0:word64]
	w0 = w1
	x1 = Mem0[x2 + (int64) ((int32) w0):word64]
	w1 = Mem0[x1 + 20:word32]
	w31 = w1 - 0x00000002
	NZCV = cond(w31)
	branch Test(NE,Z) l000000000043FA24
	// succ:  l000000000043FA8C l000000000043FA24
l000000000043FA8C:
	call fn000000000043F920 (retsize: 0;)
	w31 = w0 + 0x00000001
	NZCV = cond(w31)
	branch Test(EQ,Z) l000000000043FAAC
	// succ:  l000000000043FA98 l000000000043FAAC
l000000000043FA98:
	x19 = x19 + 0xFFFFFFFFFFFFFD08
	Mem0[x19 + 52:word32] = w0
	goto l000000000043FA4C
	// succ:  l000000000043FA4C
l000000000043FAA4:
	w1 = w0
	goto l000000000043FA6C
	// succ:  l000000000043FA6C
l000000000043FAAC:
	x0 = x19 + 0xFFFFFFFFFFFFFD08
	x20 = x20 + 0xFFFFFFFFFFFFFEC8
	w0 = Mem0[x0 + 48:word32]
	x1 = Mem0[x20:word64]
	x1 = Mem0[x1 + (int64) ((int32) w0):word64]
	w1 = Mem0[x1 + 20:word32]
	goto l000000000043FA24
	// succ:  l000000000043FA24
l000000000043FAC8:
	w0 = w1
	w1 = w2
	goto l000000000043F9EC
	// succ:  l000000000043F9EC
fn000000000043F9C4_exit:


// fn000000000043FAD4
// Return size: 0
void fn000000000043FAD4()
fn000000000043FAD4_entry:
	// succ:  l000000000043FAD4
l000000000043FAD4:
	sp = fp
	sp = sp + -32
	Mem0[sp:word64] = x29
	sp = sp + 8
	Mem0[sp:word64] = x30
	x29 = x31 + 0x0000000000000000
	Mem0[sp + 16:word64] = x19
	x19 = 0x00000000004D6000
	x0 = x19 + 0xFFFFFFFFFFFFFD08
	w1 = Mem0[x0 + 28:word32]
	branch w1 == 0x00000000 l000000000043FB1C
	// succ:  l000000000043FAF0 l000000000043FB1C
l000000000043FAF0:
	w0 = Mem0[x0 + 48:word32]
	w31 = w0 + 0x00000001
	NZCV = cond(w31)
	branch Test(EQ,Z) l000000000043FB1C
	// succ:  l000000000043FAFC l000000000043FB1C
l000000000043FAFC:
	x2 = 0x00000000004DF000
	x2 = x2 + 0xFFFFFFFFFFFFFEC8
	x2 = Mem0[x2:word64]
	x2 = Mem0[x2 + (int64) ((int32) w0):word64]
	branch x2 == 0x0000000000000000 l000000000043FB1C
	// succ:  l000000000043FB10 l000000000043FB1C
l000000000043FB10:
	w2 = Mem0[x2 + 20:word32]
	w31 = w2 - 0x00000002
	NZCV = cond(w31)
	branch Test(EQ,Z) l000000000043FB8C
	// succ:  l000000000043FB1C l000000000043FB8C
l000000000043FB1C:
	x0 = x19 + 0xFFFFFFFFFFFFFD08
	w0 = Mem0[x0 + 52:word32]
	w31 = w0 + 0x00000001
	NZCV = cond(w31)
	branch Test(EQ,Z) l000000000043FB4C
	// succ:  l000000000043FB2C l000000000043FB4C
l000000000043FB2C:
	x2 = 0x00000000004DF000
	x2 = x2 + 0xFFFFFFFFFFFFFEC8
	x2 = Mem0[x2:word64]
	x2 = Mem0[x2 + (int64) ((int32) w0):word64]
	branch x2 == 0x0000000000000000 l000000000043FB4C
	// succ:  l000000000043FB40 l000000000043FB4C
l000000000043FB40:
	w2 = Mem0[x2 + 20:word32]
	w31 = w2 - 0x00000002
	NZCV = cond(w31)
	branch Test(EQ,Z) l000000000043FB8C
	// succ:  l000000000043FB4C l000000000043FB8C
l000000000043FB4C:
	w0 = w1
	w1 = 0x00000002
	call fn000000000043F920 (retsize: 0;)
	w31 = w0 + 0x00000001
	NZCV = cond(w31)
	branch Test(NE,Z) l000000000043FB8C
	// succ:  l000000000043FB60 l000000000043FB8C
l000000000043FB60:
	x19 = x19 + 0xFFFFFFFFFFFFFD08
	w0 = Mem0[x19 + 28:word32]
	w1 = 0x00000001
	call fn000000000043F920 (retsize: 0;)
	w31 = w0 + 0x00000001
	NZCV = cond(w31)
	branch Test(NE,Z) l000000000043FB8C
	// succ:  l000000000043FB78 l000000000043FB8C
l000000000043FB78:
	Mem0[x19 + 52:word32] = w0
	Mem0[x19 + 48:word32] = w0
	x19 = Mem0[sp + 16:word64]
	x29 = Mem0[sp:word64]
	sp = sp + 8
	x30 = Mem0[sp:word64]
	sp = sp + 32
	return
	// succ:  fn000000000043FAD4_exit
l000000000043FB8C:
	x19 = Mem0[sp + 16:word64]
	x29 = Mem0[sp:word64]
	sp = sp + 8
	x30 = Mem0[sp:word64]
	sp = sp + 32
	// succ:  l000000000043FB94_thunk_fn000000000043F9C4
l000000000043FB94_thunk_fn000000000043F9C4:
	call fn000000000043F9C4 (retsize: 0;)
	return
	// succ:  fn000000000043FAD4_exit
fn000000000043FAD4_exit:


// fn000000000043FB98
// Return size: 0
void fn000000000043FB98()
fn000000000043FB98_entry:
	// succ:  l000000000043FB98
l000000000043FB98:
	sp = fp
	sp = sp + -64
	Mem0[sp:word64] = x29
	sp = sp + 8
	Mem0[sp:word64] = x30
	x29 = x31 + 0x0000000000000000
	v8 = sp + 32
	Mem0[v8:word64] = x21
	v8 = v8 + 8
	Mem0[v8:word64] = x22
	x22 = 0x00000000004AD000
	v11 = sp + 16
	Mem0[v11:word64] = x19
	v11 = v11 + 8
	Mem0[v11:word64] = x20
	Mem0[sp + 48:word64] = x23
	x19 = x0
	x23 = x0
	w21 = 0x00000000
	x22 = x22 + 0x0000000000000510
	goto l000000000043FBC8
	// succ:  l000000000043FBC8
l000000000043FBC4:
	x19 = x20
	// succ:  l000000000043FBC8
l000000000043FBC8:
	x3 = Mem0[x19 + 24:word64]
	x1 = x22
	x0 = x3
	w2 = 0x0000043D
	x20 = Mem0[x19:word64]
	branch x3 == 0x0000000000000000 l000000000043FBE4
	// succ:  l000000000043FBE0 l000000000043FBE4
l000000000043FBE0:
	call sh_xfree (retsize: 0;)
	// succ:  l000000000043FBE4
l000000000043FBE4:
	x0 = x19
	x1 = x22
	w2 = 0x0000043E
	call sh_xfree (retsize: 0;)
	x31 = x23 - x20
	NZCV = cond(x31)
	w21 = w21 + 0x00000001
	branch Test(NE,Z) l000000000043FBC4
	// succ:  l000000000043FC00 l000000000043FBC4
l000000000043FC00:
	w0 = w21
	v21 = sp + 16
	x19 = Mem0[v21:word64]
	v21 = v21 + 8
	x20 = Mem0[v21:word64]
	v22 = sp + 32
	x21 = Mem0[v22:word64]
	v22 = v22 + 8
	x22 = Mem0[v22:word64]
	x23 = Mem0[sp + 48:word64]
	x29 = Mem0[sp:word64]
	sp = sp + 8
	x30 = Mem0[sp:word64]
	sp = sp + 64
	return
	// succ:  fn000000000043FB98_exit
fn000000000043FB98_exit:


// fn000000000043FC18
// Return size: 0
void fn000000000043FC18()
fn000000000043FC18_entry:
	// succ:  l000000000043FC18
l000000000043FC18:
	sp = fp
	sp = sp + -16
	Mem0[sp:word64] = x29
	sp = sp + 8
	Mem0[sp:word64] = x30
	x29 = x31 + 0x0000000000000000
	x5 = 0x00000000004DF000
	x1 = x5 + 0xFFFFFFFFFFFFFEC8
	x4 = Mem0[x1 + 16:word64]
	branch x4 == 0x0000000000000000 l000000000043FCFC
	// succ:  l000000000043FC30 l000000000043FCFC
l000000000043FC30:
	w1 = Mem0[x4 + 8:word32]
	x2 = x4
	NZCV = cond(w1 - w0)
	branch Test(NE,Z) l000000000043FC54
	// succ:  l000000000043FC40 l000000000043FC54
l000000000043FC40:
	goto l000000000043FCE8
	// succ:  l000000000043FCE8
l000000000043FC44:
	w3 = Mem0[x1 + 8:word32]
	NZCV = cond(w3 - w0)
	branch Test(EQ,Z) l000000000043FC68
	// succ:  l000000000043FC50 l000000000043FC68
l000000000043FC50:
	x2 = x1
	// succ:  l000000000043FC54
l000000000043FC54:
	x1 = Mem0[x2:word64]
	branch x1 != 0x0000000000000000 l000000000043FC44
	// succ:  l000000000043FC5C l000000000043FC44
l000000000043FC5C:
	w0 = w1
	// succ:  l000000000043FC60
l000000000043FC60:
	x29 = Mem0[sp:word64]
	sp = sp + 8
	x30 = Mem0[sp:word64]
	sp = sp + 16
	return
	// succ:  fn000000000043FC18_exit
l000000000043FC68:
	x0 = Mem0[x1:word64]
	x31 = x4 - x1
	NZCV = cond(x31)
	Mem0[x2:word64] = x0
	branch Test(EQ,Z) l000000000043FCE8
	// succ:  l000000000043FC78 l000000000043FCE8
l000000000043FC78:
	x0 = x5 + 0xFFFFFFFFFFFFFEC8
	x3 = Mem0[x0 + 24:word64]
	x0 = x0 + 0x0000000000000010
	x31 = x1 - x3
	NZCV = cond(x31)
	branch Test(EQ,Z) l000000000043FCE0
	// succ:  l000000000043FC8C l000000000043FCE0
l000000000043FC8C:
	x5 = x5 + 0xFFFFFFFFFFFFFEC8
	x0 = x5 + 0x0000000000000010
	w2 = Mem0[x0 + 16:word32]
	w2 = w2 - 0x00000001
	Mem0[x0 + 16:word32] = w2
	branch w2 != 0x00000000 l000000000043FCCC
	// succ:  l000000000043FCA4 l000000000043FCCC
l000000000043FCA4:
	Mem0[x0 + 8:word64] = 0x0000000000000000
	Mem0[x5 + 16:word64] = 0x0000000000000000
	// succ:  l000000000043FCAC
l000000000043FCAC:
	x0 = x1
	x1 = 0x00000000004AD000
	x1 = x1 + 0x0000000000000510
	w2 = 0x000002D9
	call sh_xfree (retsize: 0;)
	w0 = 0x00000001
	x29 = Mem0[sp:word64]
	sp = sp + 8
	x30 = Mem0[sp:word64]
	sp = sp + 16
	return
	// succ:  fn000000000043FC18_exit
l000000000043FCCC:
	w31 = w2 - 0x00000001
	NZCV = cond(w31)
	branch Test(NE,Z) l000000000043FCAC
	// succ:  l000000000043FCD4 l000000000043FCAC
l000000000043FCD4:
	x2 = Mem0[x5 + 16:word64]
	Mem0[x0 + 8:word64] = x2
	goto l000000000043FCAC
	// succ:  l000000000043FCAC
l000000000043FCE0:
	Mem0[x0 + 8:word64] = x2
	goto l000000000043FC8C
	// succ:  l000000000043FC8C
l000000000043FCE8:
	x1 = Mem0[x4:word64]
	x0 = x5 + 0xFFFFFFFFFFFFFEC8
	Mem0[x0 + 16:word64] = x1
	x1 = x4
	goto l000000000043FC8C
	// succ:  l000000000043FC8C
l000000000043FCFC:
	w0 = w4
	goto l000000000043FC60
	// succ:  l000000000043FC60
fn000000000043FC18_exit:


// fn000000000043FD04
// Return size: 0
void fn000000000043FD04()
fn000000000043FD04_entry:
	// succ:  l000000000043FD04
l000000000043FD04:
	sp = fp
	sp = sp + -48
	Mem0[sp:word64] = x29
	sp = sp + 8
	Mem0[sp:word64] = x30
	x29 = x31 + 0x0000000000000000
	Mem0[sp + 32:word64] = x21
	x21 = 0x00000000004DF000
	x0 = x21 + 0xFFFFFFFFFFFFFEC8
	x0 = Mem0[x0 + 16:word64]
	v10 = sp + 16
	Mem0[v10:word64] = x19
	v10 = v10 + 8
	Mem0[v10:word64] = x20
	x20 = 0x00000000004AD000
	x20 = x20 + 0x0000000000000510
	branch x0 != 0x0000000000000000 l000000000043FD34
	// succ:  l000000000043FD2C l000000000043FD34
l000000000043FD2C:
	goto l000000000043FD48
	// succ:  l000000000043FD48
l000000000043FD30:
	x0 = x19
	// succ:  l000000000043FD34
l000000000043FD34:
	x19 = Mem0[x0:word64]
	x1 = x20
	w2 = 0x000002E7
	call sh_xfree (retsize: 0;)
	branch x19 != 0x0000000000000000 l000000000043FD30
	// succ:  l000000000043FD48 l000000000043FD30
l000000000043FD48:
	x21 = x21 + 0xFFFFFFFFFFFFFEC8
	Mem0[x21 + 24:word64] = 0x0000000000000000
	Mem0[x21 + 16:word64] = 0x0000000000000000
	Mem0[x21 + 32:word32] = 0x00000000
	v13 = sp + 16
	x19 = Mem0[v13:word64]
	v13 = v13 + 8
	x20 = Mem0[v13:word64]
	x21 = Mem0[sp + 32:word64]
	x29 = Mem0[sp:word64]
	sp = sp + 8
	x30 = Mem0[sp:word64]
	sp = sp + 48
	return
	// succ:  fn000000000043FD04_exit
fn000000000043FD04_exit:


// fn000000000043FD68
// Return size: 0
void fn000000000043FD68()
fn000000000043FD68_entry:
	// succ:  l000000000043FD68
l000000000043FD68:
	sp = fp
	sp = sp + -32
	Mem0[sp:word64] = x29
	sp = sp + 8
	Mem0[sp:word64] = x30
	x29 = x31 + 0x0000000000000000
	v8 = sp + 16
	Mem0[v8:word64] = x19
	v8 = v8 + 8
	Mem0[v8:word64] = x20
	x19 = 0x00000000004D6000
	x19 = x19 + 0xFFFFFFFFFFFFFD08
	x1 = Mem0[x19 + 72:word64]
	x20 = 0x0000000000443000
	x20 = x20 + 0xFFFFFFFFFFFFF8DC
	x31 = x1 - x20
	NZCV = cond(x31)
	branch Test(EQ,Z) l000000000043FD9C
	// succ:  l000000000043FD90 l000000000043FD9C
l000000000043FD90:
	w0 = 0x00000002
	call set_signal_handler (retsize: 0;)
	Mem0[x19 + 72:word64] = x20
	// succ:  l000000000043FD9C
l000000000043FD9C:
	v13 = sp + 16
	x19 = Mem0[v13:word64]
	v13 = v13 + 8
	x20 = Mem0[v13:word64]
	x29 = Mem0[sp:word64]
	sp = sp + 8
	x30 = Mem0[sp:word64]
	sp = sp + 32
	return
	// succ:  fn000000000043FD68_exit
fn000000000043FD68_exit:


// fn000000000043FDA8
// Return size: 0
void fn000000000043FDA8()
fn000000000043FDA8_entry:
	// succ:  l000000000043FDA8
l000000000043FDA8:
	sp = fp
	sp = sp + -32
	Mem0[sp:word64] = x29
	sp = sp + 8
	Mem0[sp:word64] = x30
	x29 = x31 + 0x0000000000000000
	x0 = 0x00000000004AA000
	x0 = x0 + 0x0000000000000520
	Mem0[sp + 16:word64] = x19
	call get_string_value (retsize: 0;)
	branch x0 == 0x0000000000000000 l000000000043FDD0
	// succ:  l000000000043FDC4 l000000000043FDD0
l000000000043FDC4:
	x19 = Mem0[sp + 16:word64]
	x29 = Mem0[sp:word64]
	sp = sp + 8
	x30 = Mem0[sp:word64]
	sp = sp + 32
	return
	// succ:  fn000000000043FDA8_exit
l000000000043FDD0:
	x0 = 0x00000000004E1000
	x0 = Mem0[x0 + 1696:word64]
	branch x0 == 0x0000000000000000 l000000000043FDE8
	// succ:  l000000000043FDDC l000000000043FDE8
l000000000043FDDC:
	x1 = 0x00000000004DF000
	w1 = Mem0[x1 + 3760:word32]
	branch w1 != 0x00000000 l000000000043FDC4
	// succ:  l000000000043FDE8 l000000000043FDC4
l000000000043FDE8:
	x19 = 0x00000000004DF000
	x19 = x19 + 0xFFFFFFFFFFFFFEC8
	x19 = x19 + 0x0000000000000028
	x0 = x19
	x1 = 0x0000000000001000
	call getcwd (retsize: 0;)
	branch x0 == 0x0000000000000000 l000000000043FE0C
	// succ:  l000000000043FE04 l000000000043FE0C
l000000000043FE04:
	x0 = x19
	goto l000000000043FDC4
	// succ:  l000000000043FDC4
l000000000043FE0C:
	x0 = 0x00000000004AD000
	x0 = x0 + 0x0000000000000520
	goto l000000000043FDC4
	// succ:  l000000000043FDC4
fn000000000043FDA8_exit:


// fn000000000043FF38
// Return size: 0
void fn000000000043FF38()
fn000000000043FF38_entry:
	// succ:  l000000000043FF38
l000000000043FF38:
	sp = fp
	w1 = w0 & 0x0000007F
	w2 = w1 + 0x00000001
fn000000000043FF38_exit:


// fn000000000043FF70
// Return size: 0
void fn000000000043FF70()
fn000000000043FF70_entry:
	// succ:  l000000000043FF70
l000000000043FF70:
	sp = fp
	sp = sp + -80
	Mem0[sp:word64] = x29
	sp = sp + 8
	Mem0[sp:word64] = x30
	x29 = x31 + 0x0000000000000000
	Mem0[sp + 64:word64] = x25
	x25 = 0x00000000004DF000
	x1 = x25 + 0xFFFFFFFFFFFFFEC8
	x1 = Mem0[x1:word64]
	v10 = sp + 48
	Mem0[v10:word64] = x23
	v10 = v10 + 8
	Mem0[v10:word64] = x24
fn000000000043FF70_exit:


// fn000000000044007C
// Return size: 0
void fn000000000044007C()
fn000000000044007C_entry:
	// succ:  l000000000044007C
l000000000044007C:
	sp = fp
	x1 = 0x00000000004DF000
	w1 = Mem0[x1 + 3748:word32]
	branch w1 == 0x00000000 l00000000004400C4
	// succ:  l0000000000440088 l00000000004400C4
l0000000000440088:
	x1 = 0x00000000004DF000
	x1 = x1 + 0xFFFFFFFFFFFFFEC8
	x1 = Mem0[x1:word64]
	w3 = 0x00000000
	x0 = Mem0[x1 + (int64) ((int32) w0):word64]
	x0 = Mem0[x0 + 8:word64]
	x1 = x0
	w2 = Mem0[x1 + 12:word32]
	x1 = Mem0[x1:word64]
	NZCV = cond(w2 - w31)
l00000000004400C4:
	x1 = 0x00000000004DF000
	x1 = x1 + 0xFFFFFFFFFFFFFEC8
	x1 = Mem0[x1:word64]
	x0 = Mem0[x1 + (int64) ((int32) w0):word64]
	x2 = Mem0[x0 + 8:word64]
	x1 = x2
	goto l00000000004400E4
	// succ:  l00000000004400E4
l00000000004400E0:
	x1 = x0
	// succ:  l00000000004400E4
l00000000004400E4:
	x0 = Mem0[x1:word64]
	x31 = x2 - x0
	NZCV = cond(x31)
	branch Test(NE,Z) l00000000004400E0
	// succ:  l00000000004400F0 l00000000004400E0
l00000000004400F0:
	w0 = Mem0[x1 + 12:word32]
	return
	// succ:  fn000000000044007C_exit
fn000000000044007C_exit:


// fn00000000004400F8
// Return size: 0
void fn00000000004400F8()
fn00000000004400F8_entry:
	// succ:  l00000000004400F8
l00000000004400F8:
	sp = fp
	sp = sp + -32
	Mem0[sp:word64] = x29
	sp = sp + 8
	Mem0[sp:word64] = x30
	x29 = x31 + 0x0000000000000000
	v8 = sp + 16
	Mem0[v8:word64] = x19
	v8 = v8 + 8
	Mem0[v8:word64] = x20
	w19 = w0
	call strsignal (retsize: 0;)
	x1 = x0
	branch x0 == 0x0000000000000000 l0000000000440124
	// succ:  l0000000000440114 l0000000000440124
l0000000000440114:
	x0 = x1
	v13 = sp + 16
	x19 = Mem0[v13:word64]
	v13 = v13 + 8
	x20 = Mem0[v13:word64]
	x29 = Mem0[sp:word64]
	sp = sp + 8
	x30 = Mem0[sp:word64]
	sp = sp + 32
	return
	// succ:  fn00000000004400F8_exit
l0000000000440124:
	x1 = 0x00000000004AD000
	x20 = 0x00000000004E0000
	x1 = x1 + 0x0000000000000530
	w2 = 0x00000005
	x20 = x20 + 0xFFFFFFFFFFFFFFC8
	dcgettext(x0, x1, x2)
	sp = sp + 0xFFFFFFFFFFFFFFF8
	x20 = x20 - 0x00000000000000C8
	x3 = x0
	w4 = w19
	x0 = x20
	w1 = 0x00000001
	x2 = 0x0000000000000040
	__sprintf_chk(x0, x1, x2, x3, Mem0[sp:<unknown>])
	sp = sp + 0xFFFFFFFFFFFFFFF8
	x1 = x20
	x0 = x1
	v19 = sp + 16
	x19 = Mem0[v19:word64]
	v19 = v19 + 8
	x20 = Mem0[v19:word64]
	x29 = Mem0[sp:word64]
	sp = sp + 8
	x30 = Mem0[sp:word64]
	sp = sp + 32
	return
	// succ:  fn00000000004400F8_exit
fn00000000004400F8_exit:


// fn000000000044016C
// Return size: 0
void fn000000000044016C()
fn000000000044016C_entry:
	// succ:  l000000000044016C
l000000000044016C:
	sp = fp
	sp = sp + -160
	Mem0[sp:word64] = x29
	sp = sp + 8
	Mem0[sp:word64] = x30
	x29 = x31 + 0x0000000000000000
	v8 = sp + 16
	Mem0[v8:word64] = x19
	v8 = v8 + 8
	Mem0[v8:word64] = x20
	v11 = sp + 48
	Mem0[v11:word64] = x23
	v11 = v11 + 8
	Mem0[v11:word64] = x24
	v14 = sp + 32
	Mem0[v14:word64] = x21
	v14 = v14 + 8
	Mem0[v14:word64] = x22
	v17 = sp + 64
	Mem0[v17:word64] = x25
	v17 = v17 + 8
	Mem0[v17:word64] = x26
	v20 = sp + 80
	Mem0[v20:word64] = x27
	v20 = v20 + 8
	Mem0[v20:word64] = x28
	w31 = w1 - 0x00000002
	NZCV = cond(w31)
	w19 = w1
	w23 = w0
	x20 = x2
	branch Test(EQ,Z) l000000000044079C
	// succ:  l000000000044019C l000000000044079C
l000000000044019C:
	w31 = w1 - 0x00000003
	NZCV = cond(w31)
	branch Test(EQ,Z) l0000000000440724
	// succ:  l00000000004401A4 l0000000000440724
l00000000004401A4:
	w31 = w1 - 0x00000004
	NZCV = cond(w31)
l0000000000440724:
	x27 = 0x00000000004DF000
	x0 = x27 + 0xFFFFFFFFFFFFFEC8
	x0 = Mem0[x0:word64]
l000000000044079C:
	x0 = 0x00000000004DF000
	x0 = x0 + 0xFFFFFFFFFFFFFEC8
	x0 = Mem0[x0:word64]
	v30 = sp + 16
	x19 = Mem0[v30:word64]
	v30 = v30 + 8
	x20 = Mem0[v30:word64]
	x1 = Mem0[x0 + (int64) ((int32) w23):word64]
	x0 = x2
	x2 = Mem0[x1 + 8:word64]
	v32 = sp + 32
	x21 = Mem0[v32:word64]
	v32 = v32 + 8
	x22 = Mem0[v32:word64]
	v34 = Mem0[x2 + 4:int32]
	x3 = (word64) v34
	v35 = sp + 48
	x23 = Mem0[v35:word64]
	v35 = v35 + 8
	x24 = Mem0[v35:word64]
	v36 = sp + 64
	x25 = Mem0[v36:word64]
	v36 = v36 + 8
	x26 = Mem0[v36:word64]
	v37 = sp + 80
	x27 = Mem0[v37:word64]
	v37 = v37 + 8
	x28 = Mem0[v37:word64]
	x2 = 0x00000000004AD000
	x29 = Mem0[sp:word64]
	sp = sp + 8
	x30 = Mem0[sp:word64]
	sp = sp + 160
	w1 = 0x00000001
	x2 = x2 + 0x0000000000000550
	__fprintf_chk(x0, x1, x2, Mem0[sp:<unknown>])
	return
	// succ:  fn000000000044016C_exit
fn000000000044016C_exit:


// fn0000000000440834
// Return size: 0
void fn0000000000440834()
fn0000000000440834_entry:
	// succ:  l0000000000440834
l0000000000440834:
	sp = fp
	sp = sp + -16
	Mem0[sp:word64] = x29
	sp = sp + 8
	Mem0[sp:word64] = x30
	x29 = x31 + 0x0000000000000000
	w31 = w2 + 0x00000001
	NZCV = cond(w31)
	branch Test(EQ,Z) l000000000044085C
	// succ:  l0000000000440844 l000000000044085C
l0000000000440844:
	w4 = Mem0[x0 + 20:word32]
	NZCV = cond(w4 - w2)
	branch Test(EQ,Z) l000000000044085C
	// succ:  l0000000000440850 l000000000044085C
l0000000000440850:
	w0 = 0x00000000
	x29 = Mem0[sp:word64]
	sp = sp + 8
	x30 = Mem0[sp:word64]
	sp = sp + 16
	return
	// succ:  fn0000000000440834_exit
l000000000044085C:
	x0 = 0x00000000004DE000
	x2 = Mem0[x0 + 1648:word64]
	w0 = w3
	call fn000000000044016C (retsize: 0;)
	w0 = 0x00000000
	x29 = Mem0[sp:word64]
	sp = sp + 8
	x30 = Mem0[sp:word64]
	sp = sp + 16
	return
	// succ:  fn0000000000440834_exit
fn0000000000440834_exit:


// fn0000000000440878
// Return size: 0
void fn0000000000440878()
fn0000000000440878_entry:
	// succ:  l0000000000440878
l0000000000440878:
	sp = v3
	sp = sp + -336
	Mem0[sp:word64] = x29
	sp = sp + 8
	Mem0[sp:word64] = x30
	x29 = x31 + 0x0000000000000000
	v7 = sp + 32
	Mem0[v7:word64] = x21
	v7 = v7 + 8
	Mem0[v7:word64] = x22
	w22 = w0
	x0 = x29 + 0x00000000000000D0
	v13 = sp + 48
	Mem0[v13:word64] = x23
	v13 = v13 + 8
	Mem0[v13:word64] = x24
	Mem0[sp + 64:word64] = x25
	w23 = w1
	v19 = sp + 16
	Mem0[v19:word64] = x19
	v19 = v19 + 8
	Mem0[v19:word64] = x20
	sigemptyset(x0)
	sp = sp + 0xFFFFFFFFFFFFFFF8
	w1 = 0x00000011
	x0 = x29 + 0x00000000000000D0
	sigaddset(x0, x1)
	sp = sp + 0xFFFFFFFFFFFFFFF8
	x0 = x29 + 0x0000000000000050
	sigemptyset(x0)
	sp = sp + 0xFFFFFFFFFFFFFFF8
	w0 = 0x00000000
	x1 = x29 + 0x00000000000000D0
	x2 = x29 + 0x0000000000000050
	x25 = 0x00000000004D6000
	sigprocmask(x0, x1, x2)
	sp = sp + 0xFFFFFFFFFFFFFFF8
	x25 = x25 + 0xFFFFFFFFFFFFFD08
	w0 = Mem0[x25 + 28:word32]
	NZCV = cond(w0 - w31)
	branch Test(LE,ZCV) l0000000000440924
	// succ:  l00000000004408D8 l0000000000440924
l00000000004408D8:
	x20 = 0x0000000000000000
	x24 = 0x00000000004DF000
	w19 = w20
	x24 = x24 + 0xFFFFFFFFFFFFFEC8
	// succ:  l00000000004408E8
l00000000004408E8:
	x4 = Mem0[x24:word64]
	w3 = w19
	x4 = Mem0[x4 + x20:word64]
	w19 = w19 + 0x00000001
	x0 = x4
	w1 = w22
	w2 = w23
	branch x4 == 0x0000000000000000 l0000000000440914
	// succ:  l0000000000440908 l0000000000440914
l0000000000440908:
	call fn0000000000440834 (retsize: 0;)
	w21 = w0
	branch w0 != 0x00000000 l0000000000440928
	// succ:  l0000000000440914 l0000000000440928
l0000000000440914:
	w3 = Mem0[x25 + 28:word32]
	x20 = x20 + 0x0000000000000008
	NZCV = cond(w19 - w3)
	branch Test(LT,NV) l00000000004408E8
	// succ:  l0000000000440924 l00000000004408E8
l0000000000440924:
	w21 = 0x00000000
	// succ:  l0000000000440928
l0000000000440928:
	x1 = x29 + 0x0000000000000050
	x2 = 0x0000000000000000
	w0 = 0x00000002
	sigprocmask(x0, x1, x2)
	sp = sp + 0xFFFFFFFFFFFFFFF8
	w0 = w21
	v34 = sp + 16
	x19 = Mem0[v34:word64]
	v34 = v34 + 8
	x20 = Mem0[v34:word64]
	v35 = sp + 32
	x21 = Mem0[v35:word64]
	v35 = v35 + 8
	x22 = Mem0[v35:word64]
	v36 = sp + 48
	x23 = Mem0[v36:word64]
	v36 = v36 + 8
	x24 = Mem0[v36:word64]
	x25 = Mem0[sp + 64:word64]
	x29 = Mem0[sp:word64]
	sp = sp + 8
	x30 = Mem0[sp:word64]
	sp = sp + 336
	return
	// succ:  fn0000000000440878_exit
fn0000000000440878_exit:


// fn0000000000440954
// Return size: 0
void fn0000000000440954()
fn0000000000440954_entry:
	// succ:  l0000000000440954
l0000000000440954:
	sp = fp
	x1 = 0x00000000004DF000
	x1 = x1 + 0xFFFFFFFFFFFFFEC8
	x1 = Mem0[x1:word64]
	x0 = Mem0[x1 + (int64) ((int32) w0):word64]
	x2 = Mem0[x0 + 8:word64]
	branch x2 == 0x0000000000000000 l0000000000440994
	// succ:  l000000000044096C l0000000000440994
l000000000044096C:
	x0 = Mem0[x2:word64]
	x31 = x2 - x0
	NZCV = cond(x31)
	branch Test(EQ,Z) l0000000000440990
	// succ:  l0000000000440978 l0000000000440990
l0000000000440978:
	branch x0 == 0x0000000000000000 l0000000000440990
	// succ:  l000000000044097C l0000000000440990
l000000000044097C:
	x1 = Mem0[x0:word64]
	x31 = x2 - x1
	NZCV = cond(x31)
	branch Test(EQ,Z) l0000000000440990
	// succ:  l0000000000440988 l0000000000440990
l0000000000440988:
	x0 = x1
	branch x0 != 0x0000000000000000 l000000000044097C
	// succ:  l0000000000440990 l000000000044097C
l0000000000440990:
	return
	// succ:  fn0000000000440954_exit
l0000000000440994:
	x0 = x2
	return
	// succ:  fn0000000000440954_exit
fn0000000000440954_exit:


// fn000000000044099C
// Return size: 0
void fn000000000044099C()
fn000000000044099C_entry:
	// succ:  l000000000044099C
l000000000044099C:
	sp = fp
	sp = sp + -336
	Mem0[sp:word64] = x29
	sp = sp + 8
	Mem0[sp:word64] = x30
	x29 = x31 + 0x0000000000000000
	v8 = sp + 16
	Mem0[v8:word64] = x19
	v8 = v8 + 8
	Mem0[v8:word64] = x20
	x20 = 0x00000000004D6000
	x19 = x20 + 0xFFFFFFFFFFFFFD08
	w1 = Mem0[x19 + 28:word32]
	v12 = sp + 32
	Mem0[v12:word64] = x21
	v12 = v12 + 8
	Mem0[v12:word64] = x22
	v15 = sp + 48
	Mem0[v15:word64] = x23
	v15 = v15 + 8
	Mem0[v15:word64] = x24
	v18 = sp + 64
	Mem0[v18:word64] = x25
	v18 = v18 + 8
	Mem0[v18:word64] = x26
	w22 = w0
	branch w1 != 0x00000000 l00000000004409E0
	// succ:  l00000000004409C8 l00000000004409E0
l00000000004409C8:
	v21 = sp + 16
	x19 = Mem0[v21:word64]
	v21 = v21 + 8
	x20 = Mem0[v21:word64]
	v22 = sp + 32
	x21 = Mem0[v22:word64]
	v22 = v22 + 8
	x22 = Mem0[v22:word64]
	v23 = sp + 48
	x23 = Mem0[v23:word64]
	v23 = v23 + 8
	x24 = Mem0[v23:word64]
	v24 = sp + 64
	x25 = Mem0[v24:word64]
	v24 = v24 + 8
	x26 = Mem0[v24:word64]
	x29 = Mem0[sp:word64]
	sp = sp + 8
	x30 = Mem0[sp:word64]
	sp = sp + 336
	return
	// succ:  fn000000000044099C_exit
l00000000004409E0:
	x0 = x29 + 0x00000000000000D0
	sigemptyset(x0)
	sp = sp + 0xFFFFFFFFFFFFFFF8
	w1 = 0x00000011
	x0 = x29 + 0x00000000000000D0
	sigaddset(x0, x1)
	sp = sp + 0xFFFFFFFFFFFFFFF8
	x0 = x29 + 0x0000000000000050
	sigemptyset(x0)
	sp = sp + 0xFFFFFFFFFFFFFFF8
	w0 = 0x00000000
	x1 = x29 + 0x00000000000000D0
	x2 = x29 + 0x0000000000000050
	sigprocmask(x0, x1, x2)
	sp = sp + 0xFFFFFFFFFFFFFFF8
	branch w22 != 0x00000000 l0000000000440B30
	// succ:  l0000000000440A10 l0000000000440B30
l0000000000440A10:
	w5 = Mem0[x19 + 28:word32]
	NZCV = cond(w5 - w31)
	branch Test(LE,ZCV) l0000000000440C0C
	// succ:  l0000000000440A1C l0000000000440C0C
l0000000000440A1C:
	x0 = 0x00000000004DF000
	x0 = x0 + 0xFFFFFFFFFFFFFEC8
	x1 = Mem0[x0:word64]
	w5 = w5 - 0x00000001
	x3 = x1 + 0x0000000000000008
	x5 = x3 + (uint64) ((word32) w5)
	goto l0000000000440A48
	// succ:  l0000000000440A48
l0000000000440A38:
	x31 = x3 - x5
	NZCV = cond(x31)
	x1 = x3
	branch Test(EQ,Z) l0000000000440A88
	// succ:  l0000000000440A44 l0000000000440A88
l0000000000440A44:
	x3 = x3 + 0x0000000000000008
	// succ:  l0000000000440A48
l0000000000440A48:
	x1 = Mem0[x1:word64]
	branch x1 == 0x0000000000000000 l0000000000440A38
	// succ:  l0000000000440A50 l0000000000440A38
l0000000000440A50:
	w2 = Mem0[x1 + 20:word32]
	w31 = w2 - 0x00000004
	NZCV = cond(w31)
	branch Test(NE,Z) l0000000000440A38
	// succ:  l0000000000440A5C l0000000000440A38
l0000000000440A5C:
	x4 = Mem0[x1 + 8:word64]
	w2 = 0x00000000
	x1 = x4
	// succ:  l0000000000440A68
l0000000000440A68:
	x1 = Mem0[x1:word64]
	w2 = w2 + 0x00000001
	x31 = x4 - x1
	NZCV = cond(x31)
	branch Test(NE,Z) l0000000000440A68
	// succ:  l0000000000440A78 l0000000000440A68
l0000000000440A78:
	x31 = x3 - x5
	NZCV = cond(x31)
	w22 = w22 + w2
	x1 = x3
	branch Test(NE,Z) l0000000000440A44
	// succ:  l0000000000440A88 l0000000000440A44
l0000000000440A88:
l0000000000440A8C:
	x19 = x20 + 0xFFFFFFFFFFFFFD08
	x24 = Mem0[x19:word64]
	branch (w24 & 0x00000000) != 0x00000000 l0000000000440BF4
	// succ:  l0000000000440A98 l0000000000440BF4
l0000000000440A98:
	x31 = x21 - x24
	NZCV = cond(x31)
	branch Test(LE,ZCV) l0000000000440B9C
	// succ:  l0000000000440AA0 l0000000000440B9C
l0000000000440AA0:
	x20 = x20 + 0xFFFFFFFFFFFFFD08
	w23 = Mem0[x20 + 28:word32]
	NZCV = cond(w23 - w31)
	branch Test(LE,ZCV) l0000000000440B9C
	// succ:  l0000000000440AB0 l0000000000440B9C
l0000000000440AB0:
	x0 = 0x00000000004DE000
	w25 = Mem0[x0 + 1712:word32]
	x0 = 0x00000000004DF000
	x0 = x0 + 0xFFFFFFFFFFFFFEC8
	w26 = Mem0[x20 + 80:word32]
	x21 = Mem0[x0:word64]
	w20 = 0x00000000
	goto l0000000000440AE0
	// succ:  l0000000000440AE0
l0000000000440AD0:
	w20 = w20 + 0x00000001
	NZCV = cond(w20 - w23)
	x21 = x21 + 0x0000000000000008
	branch Test(EQ,Z) l0000000000440B9C
	// succ:  l0000000000440AE0 l0000000000440B9C
l0000000000440AE0:
	x19 = Mem0[x21:word64]
	branch x19 == 0x0000000000000000 l0000000000440AD0
	// succ:  l0000000000440AE8 l0000000000440AD0
l0000000000440AE8:
	w1 = Mem0[x19 + 20:word32]
	w31 = w1 - 0x00000004
	NZCV = cond(w31)
	branch Test(NE,Z) l0000000000440AD0
	// succ:  l0000000000440AF4 l0000000000440AD0
l0000000000440AF4:
	branch w25 == 0x00000000 l0000000000440BC4
	// succ:  l0000000000440AF8 l0000000000440BC4
l0000000000440AF8:
	x3 = Mem0[x19 + 8:word64]
	w2 = 0x00000000
	x1 = x3
	// succ:  l0000000000440B04
l0000000000440B04:
	x1 = Mem0[x1:word64]
	w2 = w2 + 0x00000001
	x31 = x3 - x1
	NZCV = cond(x31)
	branch Test(NE,Z) l0000000000440B04
	// succ:  l0000000000440B14 l0000000000440B04
l0000000000440B14:
	w22 = w22 - w2
	NZCV = cond(x24 - (int64) ((int32) w22))
	branch Test(GE,NZV) l0000000000440B9C
	// succ:  l0000000000440B20 l0000000000440B9C
l0000000000440B20:
	w0 = Mem0[x19 + 24:word32]
	w0 = w0 | 0x00000002
	Mem0[x19 + 24:word32] = w0
	goto l0000000000440AD0
	// succ:  l0000000000440AD0
l0000000000440B30:
	w22 = Mem0[x19 + 28:word32]
	NZCV = cond(w22 - w31)
	branch Test(LE,ZCV) l0000000000440B9C
	// succ:  l0000000000440B3C l0000000000440B9C
l0000000000440B3C:
	x0 = 0x00000000004DE000
	w23 = Mem0[x0 + 1712:word32]
	x0 = 0x00000000004DF000
	x0 = x0 + 0xFFFFFFFFFFFFFEC8
	w24 = Mem0[x19 + 80:word32]
	x21 = Mem0[x0:word64]
	w20 = 0x00000000
	goto l0000000000440B68
	// succ:  l0000000000440B68
l0000000000440B5C:
	w20 = w20 + 0x00000001
	NZCV = cond(w20 - w22)
	branch Test(EQ,Z) l0000000000440B9C
	// succ:  l0000000000440B68 l0000000000440B9C
l0000000000440B68:
	x19 = Mem0[x21:word64]
	x21 = x21 + 0x0000000000000008
	branch x19 == 0x0000000000000000 l0000000000440B5C
	// succ:  l0000000000440B74 l0000000000440B5C
l0000000000440B74:
	w0 = Mem0[x19 + 20:word32]
	w31 = w0 - 0x00000004
	NZCV = cond(w31)
	branch Test(NE,Z) l0000000000440B5C
	// succ:  l0000000000440B80 l0000000000440B5C
l0000000000440B80:
	branch w23 == 0x00000000 l0000000000440BDC
	// succ:  l0000000000440B84 l0000000000440BDC
l0000000000440B84:
	w0 = Mem0[x19 + 24:word32]
	w20 = w20 + 0x00000001
	w0 = w0 | 0x00000002
	Mem0[x19 + 24:word32] = w0
	NZCV = cond(w20 - w22)
	branch Test(NE,Z) l0000000000440B68
	// succ:  l0000000000440B9C l0000000000440B68
l0000000000440B9C:
	x1 = x29 + 0x0000000000000050
	x2 = 0x0000000000000000
	w0 = 0x00000002
	sigprocmask(x0, x1, x2)
	sp = sp + 0xFFFFFFFFFFFFFFF8
	v41 = sp + 16
	x19 = Mem0[v41:word64]
	v41 = v41 + 8
	x20 = Mem0[v41:word64]
	v42 = sp + 32
	x21 = Mem0[v42:word64]
	v42 = v42 + 8
	x22 = Mem0[v42:word64]
	v43 = sp + 48
	x23 = Mem0[v43:word64]
	v43 = v43 + 8
	x24 = Mem0[v43:word64]
	v44 = sp + 64
	x25 = Mem0[v44:word64]
	v44 = v44 + 8
	x26 = Mem0[v44:word64]
	x29 = Mem0[sp:word64]
	sp = sp + 8
	x30 = Mem0[sp:word64]
	sp = sp + 336
	return
	// succ:  fn000000000044099C_exit
l0000000000440BC4:
	w0 = w20
	call fn0000000000440954 (retsize: 0;)
	w0 = Mem0[x0 + 8:word32]
	NZCV = cond(w26 - w0)
	branch Test(NE,Z) l0000000000440AF8
	// succ:  l0000000000440BD8 l0000000000440AF8
l0000000000440BD8:
	goto l0000000000440AD0
	// succ:  l0000000000440AD0
l0000000000440BDC:
	w0 = w20
	call fn0000000000440954 (retsize: 0;)
	w0 = Mem0[x0 + 8:word32]
	NZCV = cond(w24 - w0)
	branch Test(NE,Z) l0000000000440B84
	// succ:  l0000000000440BF0 l0000000000440B84
l0000000000440BF0:
	goto l0000000000440B5C
	// succ:  l0000000000440B5C
l0000000000440BF4:
	call getmaxchild (retsize: 0;)
	x24 = x0
	branch (w24 & 0x00000000) != 0x00000000 l0000000000440C04
	// succ:  l0000000000440C00 l0000000000440C04
l0000000000440C00:
	x24 = 0x0000000000000020
	// succ:  l0000000000440C04
l0000000000440C04:
	Mem0[x19:word64] = x24
	goto l0000000000440A98
	// succ:  l0000000000440A98
l0000000000440C0C:
	x21 = 0x0000000000000000
	w22 = w21
	goto l0000000000440A8C
	// succ:  l0000000000440A8C
fn000000000044099C_exit:


// fn0000000000440C18
// Return size: 0
void fn0000000000440C18()
fn0000000000440C18_entry:
	// succ:  l0000000000440C18
l0000000000440C18:
	sp = fp
	sp = sp + -384
	Mem0[sp:word64] = x29
	sp = sp + 8
	Mem0[sp:word64] = x30
	x29 = x31 + 0x0000000000000000
	v8 = sp + 48
	Mem0[v8:word64] = x23
	v8 = v8 + 8
	Mem0[v8:word64] = x24
	x24 = 0x00000000004DF000
	x0 = x24 + 0xFFFFFFFFFFFFFEC8
	x0 = Mem0[x0:word64]
	v12 = sp + 16
	Mem0[v12:word64] = x19
	v12 = v12 + 8
	Mem0[v12:word64] = x20
	v15 = sp + 32
	Mem0[v15:word64] = x21
	v15 = v15 + 8
	Mem0[v15:word64] = x22
	v18 = sp + 64
	Mem0[v18:word64] = x25
	v18 = v18 + 8
	Mem0[v18:word64] = x26
	v21 = sp + 80
	Mem0[v21:word64] = x27
	v21 = v21 + 8
	Mem0[v21:word64] = x28
	branch x0 == 0x0000000000000000 l0000000000440D7C
	// succ:  l0000000000440C44 l0000000000440D7C
l0000000000440C44:
	x23 = 0x00000000004D6000
	x19 = x23 + 0xFFFFFFFFFFFFFD08
	w0 = Mem0[x19 + 28:word32]
	branch w0 == 0x00000000 l0000000000440D7C
	// succ:  l0000000000440C54 l0000000000440D7C
l0000000000440C54:
	x26 = 0x00000000004E0000
	x1 = x26 + 0xFFFFFFFFFFFFFFC8
	x2 = Mem0[x1 + -128:word64]
	branch x2 == 0x0000000000000000 l0000000000440F4C
	// succ:  l0000000000440C64 l0000000000440F4C
l0000000000440C64:
	x0 = x29 + 0x00000000000000E0
	sigemptyset(x0)
	sp = sp + 0xFFFFFFFFFFFFFFF8
	w1 = 0x00000011
	x0 = x29 + 0x00000000000000E0
	sigaddset(x0, x1)
	sp = sp + 0xFFFFFFFFFFFFFFF8
	w1 = 0x00000016
	x0 = x29 + 0x00000000000000E0
	sigaddset(x0, x1)
	sp = sp + 0xFFFFFFFFFFFFFFF8
	x0 = x29 + 0x0000000000000060
	sigemptyset(x0)
	sp = sp + 0xFFFFFFFFFFFFFFF8
	w0 = 0x00000000
	x1 = x29 + 0x00000000000000E0
	x2 = x29 + 0x0000000000000060
	sigprocmask(x0, x1, x2)
	sp = sp + 0xFFFFFFFFFFFFFFF8
	w0 = Mem0[x19 + 28:word32]
	// succ:  l0000000000440CA0
l0000000000440CA0:
	NZCV = cond(w0 - w31)
	branch Test(LE,ZCV) l0000000000440D60
	// succ:  l0000000000440CA8 l0000000000440D60
l0000000000440CA8:
	x0 = 0x00000000004AD000
	x20 = 0x0000000000000000
	x25 = 0x00000000004DE000
	x27 = 0x00000000004DE000
	x0 = x0 + 0x0000000000000628
	x28 = x20
	w19 = w20
	x25 = x25 + 0x00000000000006AC
	x27 = x27 + 0x00000000000006B0
	Mem0[x29 + 352:word64] = x0
	goto l0000000000440CEC
	// succ:  l0000000000440CEC
l0000000000440CD4:
	x1 = x23 + 0xFFFFFFFFFFFFFD08
	w1 = Mem0[x1 + 28:word32]
	w19 = w19 + 0x00000001
	NZCV = cond(w19 - w1)
	x20 = x20 + 0x0000000000000008
	branch Test(GE,NZV) l0000000000440D60
	// succ:  l0000000000440CEC l0000000000440D60
l0000000000440CEC:
	x1 = x24 + 0xFFFFFFFFFFFFFEC8
	x1 = Mem0[x1:word64]
	x21 = Mem0[x1 + x20:word64]
	branch x21 == 0x0000000000000000 l0000000000440CD4
	// succ:  l0000000000440CFC l0000000000440CD4
l0000000000440CFC:
	w22 = Mem0[x21 + 24:word32]
	branch (w22 & 0x00000002) == 0x00000000 l0000000000440CD4
	// succ:  l0000000000440D04 l0000000000440CD4
l0000000000440D04:
	w0 = w19
	call fn000000000044007C (retsize: 0;)
	w1 = Mem0[x25:word32]
	w4 = w0
	branch w1 == 0x00000000 l0000000000440DB8
	// succ:  l0000000000440D18 l0000000000440DB8
l0000000000440D18:
	w3 = Mem0[x21 + 20:word32]
	x2 = x23 + 0xFFFFFFFFFFFFFD08
	w2 = Mem0[x2 + 84:word32]
	branch w2 != 0x00000000 l0000000000440D98
	// succ:  l0000000000440D28 l0000000000440D98
l0000000000440D28:
	w0 = Mem0[x27:word32]
	branch w0 == 0x00000000 l0000000000440D98
	// succ:  l0000000000440D30 l0000000000440D98
l0000000000440D30:
	w31 = w3 - 0x00000004
	NZCV = cond(w31)
	branch Test(NE,Z) l0000000000440CD4
	// succ:  l0000000000440D38 l0000000000440CD4
l0000000000440D38:
	w0 = Mem0[x27:word32]
	branch w0 == 0x00000000 l0000000000441038
	// succ:  l0000000000440D40 l0000000000441038
l0000000000440D40:
	w22 = w22 | 0x00000002
	Mem0[x21 + 24:word32] = w22
	x1 = x23 + 0xFFFFFFFFFFFFFD08
	w1 = Mem0[x1 + 28:word32]
	w19 = w19 + 0x00000001
	NZCV = cond(w19 - w1)
	x20 = x20 + 0x0000000000000008
	branch Test(LT,NV) l0000000000440CEC
	// succ:  l0000000000440D60 l0000000000440CEC
l0000000000440D60:
	x26 = x26 + 0xFFFFFFFFFFFFFFC8
	x0 = Mem0[x26 + -128:word64]
	branch x0 == 0x0000000000000000 l0000000000440F5C
	// succ:  l0000000000440D6C l0000000000440F5C
l0000000000440D6C:
	x1 = x29 + 0x0000000000000060
	x2 = 0x0000000000000000
	w0 = 0x00000002
	sigprocmask(x0, x1, x2)
	sp = sp + 0xFFFFFFFFFFFFFFF8
	// succ:  l0000000000440D7C
l0000000000440D7C:
	v31 = sp + 16
	x19 = Mem0[v31:word64]
	v31 = v31 + 8
	x20 = Mem0[v31:word64]
	v32 = sp + 32
	x21 = Mem0[v32:word64]
	v32 = v32 + 8
	x22 = Mem0[v32:word64]
	v33 = sp + 48
	x23 = Mem0[v33:word64]
	v33 = v33 + 8
	x24 = Mem0[v33:word64]
	v34 = sp + 64
	x25 = Mem0[v34:word64]
	v34 = v34 + 8
	x26 = Mem0[v34:word64]
	v35 = sp + 80
	x27 = Mem0[v35:word64]
	v35 = v35 + 8
	x28 = Mem0[v35:word64]
	x29 = Mem0[sp:word64]
	sp = sp + 8
	x30 = Mem0[sp:word64]
	sp = sp + 384
	return
	// succ:  fn0000000000440C18_exit
l0000000000440D98:
	w31 = w1 - 0x00000002
	NZCV = cond(w31)
	branch Test(EQ,Z) l0000000000440DFC
	// succ:  l0000000000440DA0 l0000000000440DFC
l0000000000440DA0:
	w3 = w3 - 0x00000001
	w31 = w3 - 0x00000007
	NZCV = cond(w31)
	branch Test(ULE,ZC) l0000000000440DE4
	// succ:  l0000000000440DAC l0000000000440DE4
l0000000000440DAC:
	x0 = Mem0[x29 + 352:word64]
	call programming_error (retsize: 0;)
	goto l0000000000440CD4
	// succ:  l0000000000440CD4
l0000000000440DB8:
	w0 = w0 & 0x0000007F
	w0 = w0 + 0x00000001
l0000000000440DE4:
	x0 = 0x00000000004AD000
	x0 = x0 + 0x00000000000004C0
	v49 = Mem0[x0 + (uint64) ((uint32) w3):byte]
	w5 = (word32) v49
	x1 = 0x0000000000440DFC
	x5 = x1 + (int64) ((int8) w5)
l0000000000440DFC:
	x0 = 0x00000000004E3000
	w0 = Mem0[x0 + 1184:word32]
	branch (w0 & 0x00000004) == 0x00000000 l0000000000440DA0
	// succ:  l0000000000440E08 l0000000000440DA0
l0000000000440E08:
	goto l0000000000440D30
	// succ:  l0000000000440D30
l0000000000440F4C:
	w2 = Mem0[x1 + -120:word32]
	w2 = w2 + 0x00000001
	Mem0[x1 + -120:word32] = w2
	goto l0000000000440CA0
	// succ:  l0000000000440CA0
l0000000000440F5C:
	w0 = Mem0[x26 + -120:word32]
	v42 = sp + 16
	x19 = Mem0[v42:word64]
	v42 = v42 + 8
	x20 = Mem0[v42:word64]
	w0 = w0 - 0x00000001
	Mem0[x26 + -120:word32] = w0
	v43 = sp + 32
	x21 = Mem0[v43:word64]
	v43 = v43 + 8
	x22 = Mem0[v43:word64]
	v44 = sp + 48
	x23 = Mem0[v44:word64]
	v44 = v44 + 8
	x24 = Mem0[v44:word64]
	v45 = sp + 64
	x25 = Mem0[v45:word64]
	v45 = v45 + 8
	x26 = Mem0[v45:word64]
	v46 = sp + 80
	x27 = Mem0[v46:word64]
	v46 = v46 + 8
	x28 = Mem0[v46:word64]
	x29 = Mem0[sp:word64]
	sp = sp + 8
	x30 = Mem0[sp:word64]
	sp = sp + 384
	return
	// succ:  fn0000000000440C18_exit
l0000000000441038:
	w0 = w19
	call fn0000000000440954 (retsize: 0;)
	x1 = x23 + 0xFFFFFFFFFFFFFD08
	w2 = Mem0[x0 + 8:word32]
	w0 = Mem0[x1 + 80:word32]
	NZCV = cond(w2 - w0)
	branch Test(NE,Z) l0000000000440D40
	// succ:  l0000000000441054 l0000000000440D40
l0000000000441054:
	goto l0000000000440CD4
	// succ:  l0000000000440CD4
fn0000000000440C18_exit:


// init_job_stats
// Return size: 0
void init_job_stats()
init_job_stats_entry:
	// succ:  l0000000000441178
l0000000000441178:
	sp = fp
	x8 = 0x00000000004AD000
	x8 = x8 + 0x00000000000004C8
init_job_stats_exit:


// stop_making_children
// Return size: 0
void stop_making_children()
stop_making_children_entry:
	// succ:  l00000000004411C0
l00000000004411C0:
	sp = fp
	x0 = 0x00000000004E0000
	x0 = x0 + 0xFFFFFFFFFFFFFFC8
	Mem0[x0 + -116:word32] = 0x00000000
	return
	// succ:  stop_making_children_exit
stop_making_children_exit:


// cleanup_the_pipeline
// Return size: 0
void cleanup_the_pipeline()
cleanup_the_pipeline_entry:
	// succ:  l00000000004411D0
l00000000004411D0:
	sp = fp
	sp = sp + -288
	Mem0[sp:word64] = x29
	sp = sp + 8
	Mem0[sp:word64] = x30
	x29 = x31 + 0x0000000000000000
	x0 = x29 + 0x00000000000000A0
	Mem0[sp + 16:word64] = x19
	sigemptyset(x0)
	sp = sp + 0xFFFFFFFFFFFFFFF8
	w1 = 0x00000011
	x0 = x29 + 0x00000000000000A0
	sigaddset(x0, x1)
	sp = sp + 0xFFFFFFFFFFFFFFF8
	x0 = x29 + 0x0000000000000020
	sigemptyset(x0)
	sp = sp + 0xFFFFFFFFFFFFFFF8
	x1 = x29 + 0x00000000000000A0
	x2 = x29 + 0x0000000000000020
	w0 = 0x00000000
	sigprocmask(x0, x1, x2)
	sp = sp + 0xFFFFFFFFFFFFFFF8
	x3 = 0x00000000004DF000
	x3 = x3 + 0xFFFFFFFFFFFFFEC8
	x19 = Mem0[x3 + 8:word64]
	x2 = 0x0000000000000000
	w0 = 0x00000002
	x1 = x29 + 0x0000000000000020
	Mem0[x3 + 8:word64] = x2
	sigprocmask(x0, x1, x2)
	sp = sp + 0xFFFFFFFFFFFFFFF8
	branch x19 == 0x0000000000000000 l0000000000441234
	// succ:  l000000000044122C l0000000000441234
l000000000044122C:
	x0 = x19
	call fn000000000043FB98 (retsize: 0;)
	// succ:  l0000000000441234
l0000000000441234:
	x19 = Mem0[sp + 16:word64]
	x29 = Mem0[sp:word64]
	sp = sp + 8
	x30 = Mem0[sp:word64]
	sp = sp + 288
	return
	// succ:  cleanup_the_pipeline_exit
cleanup_the_pipeline_exit:


// save_pipeline
// Return size: 0
void save_pipeline()
save_pipeline_entry:
	// succ:  l0000000000441240
l0000000000441240:
	sp = fp
	x2 = 0x00000000004DF000
	x2 = x2 + 0xFFFFFFFFFFFFFEC8
	x1 = 0x00000000004E0000
	x3 = Mem0[x2 + 8:word64]
	x4 = x1 + 0xFFFFFFFFFFFFFFC8
	Mem0[x4 + -112:word64] = x3
	branch w0 == 0x00000000 l0000000000441260
	// succ:  l000000000044125C l0000000000441260
l000000000044125C:
	Mem0[x2 + 8:word64] = 0x0000000000000000
	// succ:  l0000000000441260
l0000000000441260:
	x1 = x1 + 0xFFFFFFFFFFFFFFC8
	w0 = Mem0[x1 + -116:word32]
	Mem0[x1 + -104:word32] = w0
	return
	// succ:  save_pipeline_exit
save_pipeline_exit:


// restore_pipeline
// Return size: 0
void restore_pipeline()
restore_pipeline_entry:
	// succ:  l0000000000441270
l0000000000441270:
	sp = fp
	x1 = 0x00000000004E0000
	x1 = x1 + 0xFFFFFFFFFFFFFFC8
	x4 = Mem0[x1 + -112:word64]
	w3 = Mem0[x1 + -104:word32]
	x2 = 0x00000000004DF000
	x2 = x2 + 0xFFFFFFFFFFFFFEC8
	x5 = Mem0[x2 + 8:word64]
	Mem0[x1 + -116:word32] = w3
	Mem0[x2 + 8:word64] = x4
	branch w0 != 0x00000000 l000000000044129C
	// succ:  l0000000000441298 l000000000044129C
l0000000000441298:
	return
	// succ:  restore_pipeline_exit
l000000000044129C:
	branch x5 == 0x0000000000000000 l0000000000441298
	// succ:  l00000000004412A0 l0000000000441298
l00000000004412A0:
	x0 = x5
	// succ:  l00000000004412A4_thunk_fn000000000043FB98
l00000000004412A4_thunk_fn000000000043FB98:
	call fn000000000043FB98 (retsize: 0;)
	return
	// succ:  restore_pipeline_exit
restore_pipeline_exit:


// start_pipeline
// Return size: 0
void start_pipeline()
start_pipeline_entry:
	// succ:  l00000000004412A8
l00000000004412A8:
	sp = fp
	sp = sp + -32
	Mem0[sp:word64] = x29
	sp = sp + 8
	Mem0[sp:word64] = x30
	x29 = x31 + 0x0000000000000000
	x0 = 0x00000000004DF000
	x0 = x0 + 0xFFFFFFFFFFFFFEC8
	x0 = Mem0[x0 + 8:word64]
	Mem0[sp + 16:word64] = x19
	x19 = 0x00000000004D6000
	branch x0 == 0x0000000000000000 l00000000004412E4
	// succ:  l00000000004412C8 l00000000004412E4
l00000000004412C8:
	call cleanup_the_pipeline (retsize: 0;)
	x0 = x19 + 0xFFFFFFFFFFFFFD08
	x1 = 0x00000000004E0000
	x1 = x1 + 0xFFFFFFFFFFFFFFC8
	x0 = x0 + 0x0000000000000060
	Mem0[x1 + -100:word32] = 0x00000000
	call sh_closepipe (retsize: 0;)
	// succ:  l00000000004412E4
l00000000004412E4:
	x0 = x19 + 0xFFFFFFFFFFFFFD08
	w1 = Mem0[x0 + 84:word32]
	branch w1 != 0x00000000 l00000000004412FC
	// succ:  l00000000004412F0 l00000000004412FC
l00000000004412F0:
	x19 = Mem0[sp + 16:word64]
	x29 = Mem0[sp:word64]
	sp = sp + 8
	x30 = Mem0[sp:word64]
	sp = sp + 32
	return
	// succ:  start_pipeline_exit
l00000000004412FC:
	x0 = x0 + 0x0000000000000060
	call pipe (retsize: 0;)
	w31 = w0 + 0x00000001
	NZCV = cond(w31)
	branch Test(NE,Z) l00000000004412F0
	// succ:  l000000000044130C l00000000004412F0
l000000000044130C:
	x1 = 0x00000000004AD000
	x1 = x1 + 0x0000000000000640
	w2 = 0x00000005
	x0 = 0x0000000000000000
	dcgettext(x0, x1, x2)
	sp = sp + 0xFFFFFFFFFFFFFFF8
	x19 = Mem0[sp + 16:word64]
	x29 = Mem0[sp:word64]
	sp = sp + 8
	x30 = Mem0[sp:word64]
	sp = sp + 32
	// succ:  l0000000000441328_thunk_sys_error
l0000000000441328_thunk_sys_error:
	call sys_error (retsize: 0;)
	return
	// succ:  start_pipeline_exit
start_pipeline_exit:


// making_children
// Return size: 0
void making_children()
making_children_entry:
	// succ:  l000000000044132C
l000000000044132C:
	sp = fp
	x0 = 0x00000000004E0000
	x0 = x0 + 0xFFFFFFFFFFFFFFC8
	w1 = Mem0[x0 + -116:word32]
	branch w1 == 0x00000000 l0000000000441340
	// succ:  l000000000044133C l0000000000441340
l000000000044133C:
	return
	// succ:  making_children_exit
l0000000000441340:
	w1 = 0x00000001
	Mem0[x0 + -116:word32] = w1
	// succ:  l0000000000441348_thunk_start_pipeline
l0000000000441348_thunk_start_pipeline:
	call start_pipeline (retsize: 0;)
	return
	// succ:  making_children_exit
making_children_exit:


// delete_job
// Return size: 0
void delete_job()
delete_job_entry:
	// succ:  l000000000044134C
l000000000044134C:
	sp = fp
	sp = sp + -96
	Mem0[sp:word64] = x29
	sp = sp + 8
	Mem0[sp:word64] = x30
	x29 = x31 + 0x0000000000000000
	v8 = sp + 16
	Mem0[v8:word64] = x19
	v8 = v8 + 8
	Mem0[v8:word64] = x20
	x19 = 0x00000000004D6000
	x2 = x19 + 0xFFFFFFFFFFFFFD08
	w2 = Mem0[x2 + 28:word32]
	v13 = sp + 32
	Mem0[v13:word64] = x21
	v13 = v13 + 8
	Mem0[v13:word64] = x22
	v16 = sp + 48
	Mem0[v16:word64] = x23
	v16 = v16 + 8
	Mem0[v16:word64] = x24
	v19 = sp + 64
	Mem0[v19:word64] = x25
	v19 = v19 + 8
	Mem0[v19:word64] = x26
	v22 = sp + 80
	Mem0[v22:word64] = x27
	v22 = v22 + 8
	Mem0[v22:word64] = x28
	w21 = w0
	w22 = w1
	branch w2 == 0x00000000 l00000000004414E0
	// succ:  l0000000000441380 l00000000004414E0
l0000000000441380:
	x0 = 0x00000000004E0000
	x0 = x0 + 0xFFFFFFFFFFFFFFC8
	w0 = Mem0[x0 + -96:word32]
	branch w0 != 0x00000000 l00000000004414E0
	// succ:  l0000000000441390 l00000000004414E0
l0000000000441390:
	x25 = 0x00000000004DF000
	branch (w22 & 0x00000001) == 0x00000000 l00000000004414FC
	// succ:  l0000000000441398 l00000000004414FC
l0000000000441398:
	x0 = 0x00000000004E3000
	w0 = Mem0[x0 + 1184:word32]
	branch w0 != 0x00000000 l00000000004414FC
	// succ:  l00000000004413A4 l00000000004414FC
l00000000004413A4:
	x24 = x25 + 0xFFFFFFFFFFFFFEC8
	x26 = Mem0[x24:word64]
l00000000004414E0:
	v28 = sp + 16
	x19 = Mem0[v28:word64]
	v28 = v28 + 8
	x20 = Mem0[v28:word64]
	v29 = sp + 32
	x21 = Mem0[v29:word64]
	v29 = v29 + 8
	x22 = Mem0[v29:word64]
	v30 = sp + 48
	x23 = Mem0[v30:word64]
	v30 = v30 + 8
	x24 = Mem0[v30:word64]
	v31 = sp + 64
	x25 = Mem0[v31:word64]
	v31 = v31 + 8
	x26 = Mem0[v31:word64]
	v32 = sp + 80
	x27 = Mem0[v32:word64]
	v32 = v32 + 8
	x28 = Mem0[v32:word64]
	x29 = Mem0[sp:word64]
	sp = sp + 8
	x30 = Mem0[sp:word64]
	sp = sp + 96
	return
	// succ:  delete_job_exit
l00000000004414FC:
	x0 = x25 + 0xFFFFFFFFFFFFFEC8
	x0 = Mem0[x0:word64]
delete_job_exit:


// nohup_job
// Return size: 0
void nohup_job()
nohup_job_entry:
	// succ:  l0000000000441724
l0000000000441724:
	sp = fp
	x1 = 0x00000000004D6000
	x1 = x1 + 0xFFFFFFFFFFFFFD08
	w1 = Mem0[x1 + 28:word32]
	branch w1 == 0x00000000 l0000000000441754
	// succ:  l0000000000441734 l0000000000441754
l0000000000441734:
	x1 = 0x00000000004DF000
	x1 = x1 + 0xFFFFFFFFFFFFFEC8
	x1 = Mem0[x1:word64]
	x0 = Mem0[x1 + (int64) ((int32) w0):word64]
	branch x0 == 0x0000000000000000 l0000000000441754
	// succ:  l0000000000441748 l0000000000441754
l0000000000441748:
	w1 = Mem0[x0 + 24:word32]
	w1 = w1 | 0x00000008
	Mem0[x0 + 24:word32] = w1
	// succ:  l0000000000441754
l0000000000441754:
	return
	// succ:  nohup_job_exit
nohup_job_exit:


// append_process
// Return size: 0
void append_process()
append_process_entry:
	// succ:  l0000000000441758
l0000000000441758:
	sp = fp
	sp = sp + -64
	Mem0[sp:word64] = x29
	sp = sp + 8
	Mem0[sp:word64] = x30
	x29 = x31 + 0x0000000000000000
	v8 = sp + 16
	Mem0[v8:word64] = x19
	v8 = v8 + 8
	Mem0[v8:word64] = x20
	w19 = w1
	x1 = 0x00000000004AD000
	Mem0[sp + 32:word64] = x21
	w20 = w2
	x21 = x0
	x1 = x1 + 0x0000000000000510
	w2 = 0x0000047E
	x0 = 0x0000000000000020
	Mem0[x29 + 48:word64] = x3
	call sh_xmalloc (retsize: 0;)
	x1 = 0x00000000004DF000
	x3 = Mem0[x29 + 48:word64]
	x1 = x1 + 0xFFFFFFFFFFFFFEC8
	x5 = Mem0[x1:word64]
	Mem0[x0 + 24:word64] = x21
	Mem0[x0:word64] = 0x0000000000000000
append_process_exit:


// terminate_current_pipeline
// Return size: 0
void terminate_current_pipeline()
terminate_current_pipeline_entry:
	// succ:  l000000000044180C
l000000000044180C:
	sp = fp
	sp = sp + -32
	Mem0[sp:word64] = x29
	sp = sp + 8
	Mem0[sp:word64] = x30
	x29 = x31 + 0x0000000000000000
	Mem0[sp + 16:word64] = x19
	x19 = 0x00000000004E0000
	x19 = x19 + 0xFFFFFFFFFFFFFFC8
	w0 = Mem0[x19 + -100:word32]
	branch w0 == 0x00000000 l0000000000441858
	// succ:  l0000000000441828 l0000000000441858
l0000000000441828:
	x1 = 0x00000000004D6000
	x1 = x1 + 0xFFFFFFFFFFFFFD08
	w1 = Mem0[x1 + 104:word32]
	NZCV = cond(w0 - w1)
	branch Test(EQ,Z) l0000000000441858
	// succ:  l000000000044183C l0000000000441858
l000000000044183C:
	w1 = 0x0000000F
	call killpg (retsize: 0;)
	w0 = Mem0[x19 + -100:word32]
	x19 = Mem0[sp + 16:word64]
	x29 = Mem0[sp:word64]
	sp = sp + 8
	x30 = Mem0[sp:word64]
	sp = sp + 32
	w1 = 0x00000012
	call killpg (retsize: 0;)
	return
	// succ:  terminate_current_pipeline_exit
l0000000000441858:
	x19 = Mem0[sp + 16:word64]
	x29 = Mem0[sp:word64]
	sp = sp + 8
	x30 = Mem0[sp:word64]
	sp = sp + 32
	return
	// succ:  terminate_current_pipeline_exit
terminate_current_pipeline_exit:


// terminate_stopped_jobs
// Return size: 0
void terminate_stopped_jobs()
terminate_stopped_jobs_entry:
	// succ:  l0000000000441864
l0000000000441864:
	sp = fp
	sp = sp + -48
	Mem0[sp:word64] = x29
	sp = sp + 8
	Mem0[sp:word64] = x30
	x29 = x31 + 0x0000000000000000
	v8 = sp + 32
	Mem0[v8:word64] = x21
	v8 = v8 + 8
	Mem0[v8:word64] = x22
	x22 = 0x00000000004D6000
	x22 = x22 + 0xFFFFFFFFFFFFFD08
	w0 = Mem0[x22 + 28:word32]
	v12 = sp + 16
	Mem0[v12:word64] = x19
	v12 = v12 + 8
	Mem0[v12:word64] = x20
	NZCV = cond(w0 - w31)
	branch Test(LE,ZCV) l00000000004418F8
	// succ:  l0000000000441888 l00000000004418F8
l0000000000441888:
	x19 = 0x0000000000000000
	x21 = 0x00000000004DF000
	w20 = w19
	x21 = x21 + 0xFFFFFFFFFFFFFEC8
	goto l00000000004418AC
	// succ:  l00000000004418AC
l000000000044189C:
	w0 = Mem0[x22 + 28:word32]
	x19 = x19 + 0x0000000000000008
	NZCV = cond(w0 - w20)
	branch Test(LE,ZCV) l00000000004418F8
	// succ:  l00000000004418AC l00000000004418F8
l00000000004418AC:
	x0 = Mem0[x21:word64]
	w20 = w20 + 0x00000001
	x0 = Mem0[x0 + x19:word64]
	branch x0 == 0x0000000000000000 l000000000044189C
	// succ:  l00000000004418BC l000000000044189C
l00000000004418BC:
	w1 = Mem0[x0 + 20:word32]
	w31 = w1 - 0x00000002
	NZCV = cond(w31)
	branch Test(NE,Z) l000000000044189C
	// succ:  l00000000004418C8 l000000000044189C
l00000000004418C8:
	w0 = Mem0[x0 + 16:word32]
	w1 = 0x0000000F
	call killpg (retsize: 0;)
	x0 = Mem0[x21:word64]
	w1 = 0x00000012
	x0 = Mem0[x0 + x19:word64]
	x19 = x19 + 0x0000000000000008
	w0 = Mem0[x0 + 16:word32]
	call killpg (retsize: 0;)
	w0 = Mem0[x22 + 28:word32]
	NZCV = cond(w0 - w20)
	branch Test(GT,NZV) l00000000004418AC
	// succ:  l00000000004418F8 l00000000004418AC
l00000000004418F8:
	v18 = sp + 16
	x19 = Mem0[v18:word64]
	v18 = v18 + 8
	x20 = Mem0[v18:word64]
	v19 = sp + 32
	x21 = Mem0[v19:word64]
	v19 = v19 + 8
	x22 = Mem0[v19:word64]
	x29 = Mem0[sp:word64]
	sp = sp + 8
	x30 = Mem0[sp:word64]
	sp = sp + 48
	return
	// succ:  terminate_stopped_jobs_exit
terminate_stopped_jobs_exit:


// hangup_all_jobs
// Return size: 0
void hangup_all_jobs()
hangup_all_jobs_entry:
	// succ:  l0000000000441908
l0000000000441908:
	sp = fp
	sp = sp + -48
	Mem0[sp:word64] = x29
	sp = sp + 8
	Mem0[sp:word64] = x30
	x29 = x31 + 0x0000000000000000
	v8 = sp + 32
	Mem0[v8:word64] = x21
	v8 = v8 + 8
	Mem0[v8:word64] = x22
	x22 = 0x00000000004D6000
	x22 = x22 + 0xFFFFFFFFFFFFFD08
	w0 = Mem0[x22 + 28:word32]
	v12 = sp + 16
	Mem0[v12:word64] = x19
	v12 = v12 + 8
	Mem0[v12:word64] = x20
	NZCV = cond(w0 - w31)
	branch Test(LE,ZCV) l00000000004419A4
	// succ:  l000000000044192C l00000000004419A4
l000000000044192C:
	x19 = 0x0000000000000000
	x21 = 0x00000000004DF000
	w20 = w19
	x21 = x21 + 0xFFFFFFFFFFFFFEC8
	goto l0000000000441950
	// succ:  l0000000000441950
l0000000000441940:
	w0 = Mem0[x22 + 28:word32]
	x19 = x19 + 0x0000000000000008
	NZCV = cond(w0 - w20)
	branch Test(LE,ZCV) l00000000004419A4
	// succ:  l0000000000441950 l00000000004419A4
l0000000000441950:
	x0 = Mem0[x21:word64]
	w20 = w20 + 0x00000001
	x0 = Mem0[x0 + x19:word64]
	branch x0 == 0x0000000000000000 l0000000000441940
	// succ:  l0000000000441960 l0000000000441940
l0000000000441960:
	w1 = Mem0[x0 + 24:word32]
	branch (w1 & 0x00000008) == 0x00000000 l0000000000441940
	// succ:  l0000000000441968 l0000000000441940
l0000000000441968:
	w0 = Mem0[x0 + 16:word32]
	w1 = 0x00000001
	call killpg (retsize: 0;)
	x0 = Mem0[x21:word64]
	x0 = Mem0[x0 + x19:word64]
	w1 = Mem0[x0 + 20:word32]
	w31 = w1 - 0x00000002
	NZCV = cond(w31)
	branch Test(NE,Z) l0000000000441940
	// succ:  l0000000000441988 l0000000000441940
l0000000000441988:
	w0 = Mem0[x0 + 16:word32]
	w1 = 0x00000012
	call killpg (retsize: 0;)
	w0 = Mem0[x22 + 28:word32]
	x19 = x19 + 0x0000000000000008
	NZCV = cond(w0 - w20)
	branch Test(GT,NZV) l0000000000441950
	// succ:  l00000000004419A4 l0000000000441950
l00000000004419A4:
	v18 = sp + 16
	x19 = Mem0[v18:word64]
	v18 = v18 + 8
	x20 = Mem0[v18:word64]
	v19 = sp + 32
	x21 = Mem0[v19:word64]
	v19 = v19 + 8
	x22 = Mem0[v19:word64]
	x29 = Mem0[sp:word64]
	sp = sp + 8
	x30 = Mem0[sp:word64]
	sp = sp + 48
	return
	// succ:  hangup_all_jobs_exit
hangup_all_jobs_exit:


// kill_current_pipeline
// Return size: 0
void kill_current_pipeline()
kill_current_pipeline_entry:
	// succ:  l00000000004419B4
l00000000004419B4:
	sp = fp
	x0 = 0x00000000004E0000
	x0 = x0 + 0xFFFFFFFFFFFFFFC8
	Mem0[x0 + -116:word32] = 0x00000000
	// succ:  l00000000004419C0_thunk_start_pipeline
l00000000004419C0_thunk_start_pipeline:
	call start_pipeline (retsize: 0;)
	return
	// succ:  kill_current_pipeline_exit
kill_current_pipeline_exit:


// get_job_by_pid
// Return size: 0
void get_job_by_pid()
get_job_by_pid_entry:
	// succ:  l00000000004419C4
l00000000004419C4:
	sp = fp
	sp = sp + -288
	Mem0[sp:word64] = x29
	sp = sp + 8
	Mem0[sp:word64] = x30
	x29 = x31 + 0x0000000000000000
	Mem0[sp + 16:word64] = x19
	w19 = w0
	branch w1 != 0x00000000 l00000000004419F4
	// succ:  l00000000004419D8 l00000000004419F4
l00000000004419D8:
	x2 = 0x0000000000000000
	call fn000000000043F71C (retsize: 0;)
	w19 = w0
	w0 = w19
	x19 = Mem0[sp + 16:word64]
	x29 = Mem0[sp:word64]
	sp = sp + 8
	x30 = Mem0[sp:word64]
	sp = sp + 288
	return
	// succ:  get_job_by_pid_exit
l00000000004419F4:
	x0 = x29 + 0x00000000000000A0
	sigemptyset(x0)
	sp = sp + 0xFFFFFFFFFFFFFFF8
	w1 = 0x00000011
	x0 = x29 + 0x00000000000000A0
	sigaddset(x0, x1)
	sp = sp + 0xFFFFFFFFFFFFFFF8
	x0 = x29 + 0x0000000000000020
	sigemptyset(x0)
	sp = sp + 0xFFFFFFFFFFFFFFF8
	x1 = x29 + 0x00000000000000A0
	x2 = x29 + 0x0000000000000020
	w0 = 0x00000000
	sigprocmask(x0, x1, x2)
	sp = sp + 0xFFFFFFFFFFFFFFF8
	w0 = w19
	w1 = 0x00000000
	x2 = 0x0000000000000000
	call fn000000000043F71C (retsize: 0;)
	w19 = w0
	x1 = x29 + 0x0000000000000020
	x2 = 0x0000000000000000
	w0 = 0x00000002
	sigprocmask(x0, x1, x2)
	sp = sp + 0xFFFFFFFFFFFFFFF8
	w0 = w19
	x19 = Mem0[sp + 16:word64]
	x29 = Mem0[sp:word64]
	sp = sp + 8
	x30 = Mem0[sp:word64]
	sp = sp + 288
	return
	// succ:  get_job_by_pid_exit
get_job_by_pid_exit:


// describe_pid
// Return size: 0
void describe_pid()
describe_pid_entry:
	// succ:  l0000000000441A54
l0000000000441A54:
	sp = fp
	sp = sp + -288
	Mem0[sp:word64] = x29
	sp = sp + 8
	Mem0[sp:word64] = x30
	x29 = x31 + 0x0000000000000000
	Mem0[sp + 16:word64] = x19
	w19 = w0
	x0 = x29 + 0x00000000000000A0
	sigemptyset(x0)
	sp = sp + 0xFFFFFFFFFFFFFFF8
	w1 = 0x00000011
	x0 = x29 + 0x00000000000000A0
	sigaddset(x0, x1)
	sp = sp + 0xFFFFFFFFFFFFFFF8
	x0 = x29 + 0x0000000000000020
	sigemptyset(x0)
	sp = sp + 0xFFFFFFFFFFFFFFF8
	x1 = x29 + 0x00000000000000A0
	x2 = x29 + 0x0000000000000020
	w0 = 0x00000000
	sigprocmask(x0, x1, x2)
	sp = sp + 0xFFFFFFFFFFFFFFF8
	w0 = w19
	w1 = 0x00000000
	x2 = 0x0000000000000000
	call fn000000000043F71C (retsize: 0;)
	w31 = w0 + 0x00000001
	NZCV = cond(w31)
	w3 = w0
	branch Test(EQ,Z) l0000000000441AE8
	// succ:  l0000000000441AAC l0000000000441AE8
l0000000000441AAC:
	x0 = 0x00000000004DE000
	w1 = 0x00000001
	x0 = Mem0[x0 + 1640:word64]
	x2 = 0x00000000004AD000
	w3 = w3 + w1
l0000000000441AE8:
	x1 = 0x00000000004AD000
	w2 = 0x00000005
	x1 = x1 + 0x00000000000006A0
	x0 = 0x0000000000000000
	dcgettext(x0, x1, x2)
	sp = sp + 0xFFFFFFFFFFFFFFF8
describe_pid_exit:


// list_one_job
// Return size: 0
void list_one_job()
list_one_job_entry:
	// succ:  l0000000000441B20
l0000000000441B20:
	sp = fp
	x0 = 0x00000000004DE000
	x2 = Mem0[x0 + 1648:word64]
	w0 = w3
	// succ:  l0000000000441B2C_thunk_fn000000000044016C
l0000000000441B2C_thunk_fn000000000044016C:
	call fn000000000044016C (retsize: 0;)
	return
	// succ:  list_one_job_exit
list_one_job_exit:


// ignore_tty_job_signals
// Return size: 0
void ignore_tty_job_signals()
ignore_tty_job_signals_entry:
	// succ:  l0000000000441B30
l0000000000441B30:
	sp = fp
	sp = sp + -16
	Mem0[sp:word64] = x29
	sp = sp + 8
	Mem0[sp:word64] = x30
	x29 = x31 + 0x0000000000000000
	x1 = 0x0000000000000001
	w0 = 0x00000014
	call set_signal_handler (retsize: 0;)
	x1 = 0x0000000000000001
	w0 = 0x00000015
	call set_signal_handler (retsize: 0;)
	x29 = Mem0[sp:word64]
	sp = sp + 8
	x30 = Mem0[sp:word64]
	sp = sp + 16
	w0 = 0x00000016
	x1 = 0x0000000000000001
	// succ:  l0000000000441B5C_thunk_set_signal_handler
l0000000000441B5C_thunk_set_signal_handler:
	call set_signal_handler (retsize: 0;)
	return
	// succ:  ignore_tty_job_signals_exit
ignore_tty_job_signals_exit:


// default_tty_job_signals
// Return size: 0
void default_tty_job_signals()
default_tty_job_signals_entry:
	// succ:  l0000000000441B60
l0000000000441B60:
	sp = fp
	sp = sp + -16
	Mem0[sp:word64] = x29
	sp = sp + 8
	Mem0[sp:word64] = x30
	x29 = x31 + 0x0000000000000000
	x1 = 0x0000000000000000
	w0 = 0x00000014
	call set_signal_handler (retsize: 0;)
	x1 = 0x0000000000000000
	w0 = 0x00000015
	call set_signal_handler (retsize: 0;)
	x29 = Mem0[sp:word64]
	sp = sp + 8
	x30 = Mem0[sp:word64]
	sp = sp + 16
	w0 = 0x00000016
	x1 = 0x0000000000000000
	// succ:  l0000000000441B8C_thunk_set_signal_handler
l0000000000441B8C_thunk_set_signal_handler:
	call set_signal_handler (retsize: 0;)
	return
	// succ:  default_tty_job_signals_exit
default_tty_job_signals_exit:


// get_tty_state
// Return size: 0
void get_tty_state()
get_tty_state_entry:
	// succ:  l0000000000441B90
l0000000000441B90:
	sp = fp
	sp = sp + -16
	Mem0[sp:word64] = x29
	sp = sp + 8
	Mem0[sp:word64] = x30
	x29 = x31 + 0x0000000000000000
	x0 = 0x00000000004D6000
	x0 = x0 + 0xFFFFFFFFFFFFFD08
	w0 = Mem0[x0 + 108:word32]
	w31 = w0 + 0x00000001
	NZCV = cond(w31)
	branch Test(EQ,Z) l0000000000441BEC
	// succ:  l0000000000441BAC l0000000000441BEC
l0000000000441BAC:
	x1 = 0x00000000004E0000
	x1 = x1 + 0xFFFFFFFFFFFFFFC8
	x1 = x1 - 0x0000000000000058
	call tcgetattr (retsize: 0;)
	branch (w0 & 0x00000000) == 0x00000000 l0000000000441C04
	// succ:  l0000000000441BC0 l0000000000441C04
l0000000000441BC0:
	x0 = 0x00000000004E3000
	w0 = Mem0[x0 + 1308:word32]
	branch w0 != 0x00000000 l0000000000441BD8
	// succ:  l0000000000441BCC l0000000000441BD8
l0000000000441BCC:
	w0 = 0x00000000
	// succ:  l0000000000441BD0
l0000000000441BD0:
	x29 = Mem0[sp:word64]
	sp = sp + 8
	x30 = Mem0[sp:word64]
	sp = sp + 16
	return
	// succ:  get_tty_state_exit
l0000000000441BD8:
	x1 = 0x0000000000000000
	w0 = 0x00000000
	x2 = x1
	call get_new_window_size (retsize: 0;)
	goto l0000000000441BCC
	// succ:  l0000000000441BCC
l0000000000441BEC:
	x0 = 0x00000000004DE000
	x0 = Mem0[x0 + 1640:word64]
	fileno(x0)
	sp = sp + 0xFFFFFFFFFFFFFFF8
	w31 = w0 + 0x00000001
	NZCV = cond(w31)
	branch Test(EQ,Z) l0000000000441BCC
	// succ:  l0000000000441C00 l0000000000441BCC
l0000000000441C00:
	goto l0000000000441BAC
	// succ:  l0000000000441BAC
l0000000000441C04:
	w0 = 0xFFFFFFFF
	goto l0000000000441BD0
	// succ:  l0000000000441BD0
get_tty_state_exit:


// set_tty_state
// Return size: 0
void set_tty_state()
set_tty_state_entry:
	// succ:  l0000000000441C0C
l0000000000441C0C:
	sp = fp
	sp = sp + -32
	Mem0[sp:word64] = x29
	sp = sp + 8
	Mem0[sp:word64] = x30
	x29 = x31 + 0x0000000000000000
	x0 = 0x00000000004D6000
	x0 = x0 + 0xFFFFFFFFFFFFFD08
	v9 = sp + 16
	Mem0[v9:word64] = x19
	v9 = v9 + 8
	Mem0[v9:word64] = x20
	w19 = Mem0[x0 + 108:word32]
	w31 = w19 + 0x00000001
	NZCV = cond(w31)
	branch Test(EQ,Z) l0000000000441C90
	// succ:  l0000000000441C2C l0000000000441C90
l0000000000441C2C:
	x2 = 0x00000000004E0000
	x2 = x2 + 0xFFFFFFFFFFFFFFC8
	w1 = 0x00000001
	w0 = w19
	x2 = x2 - 0x0000000000000058
	tcsetattr(x0, x1, x2)
	sp = sp + 0xFFFFFFFFFFFFFFF8
	branch (w0 & 0x00000000) == 0x00000000 l0000000000441C5C
	// succ:  l0000000000441C48 l0000000000441C5C
l0000000000441C48:
	w20 = 0x00000000
	// succ:  l0000000000441C4C
l0000000000441C4C:
	w0 = w20
	v19 = sp + 16
	x19 = Mem0[v19:word64]
	v19 = v19 + 8
	x20 = Mem0[v19:word64]
	x29 = Mem0[sp:word64]
	sp = sp + 8
	x30 = Mem0[sp:word64]
	sp = sp + 32
	return
	// succ:  set_tty_state_exit
l0000000000441C5C:
	x0 = 0x00000000004DE000
	w0 = Mem0[x0 + 1704:word32]
	w20 = 0xFFFFFFFF
	branch w0 == 0x00000000 l0000000000441C4C
	// succ:  l0000000000441C6C l0000000000441C4C
l0000000000441C6C:
	call getpid (retsize: 0;)
l0000000000441C90:
	x0 = 0x00000000004DE000
	x0 = Mem0[x0 + 1640:word64]
	fileno(x0)
	sp = sp + 0xFFFFFFFFFFFFFFF8
	w31 = w0 + 0x00000001
	NZCV = cond(w31)
	w19 = w0
	branch Test(EQ,Z) l0000000000441C48
	// succ:  l0000000000441CA8 l0000000000441C48
l0000000000441CA8:
	goto l0000000000441C2C
	// succ:  l0000000000441C2C
set_tty_state_exit:


// job_exit_status
// Return size: 0
void job_exit_status()
job_exit_status_entry:
	// succ:  l0000000000441CAC
l0000000000441CAC:
	sp = fp
	sp = sp + -16
	Mem0[sp:word64] = x29
	sp = sp + 8
	Mem0[sp:word64] = x30
	x29 = x31 + 0x0000000000000000
	call fn000000000044007C (retsize: 0;)
	x29 = Mem0[sp:word64]
	sp = sp + 8
	x30 = Mem0[sp:word64]
	sp = sp + 16
	// succ:  l0000000000441CBC_thunk_fn000000000043FF38
l0000000000441CBC_thunk_fn000000000043FF38:
	call fn000000000043FF38 (retsize: 0;)
	return
	// succ:  job_exit_status_exit
job_exit_status_exit:


// job_exit_signal
// Return size: 0
void job_exit_signal()
job_exit_signal_entry:
	// succ:  l0000000000441CC0
l0000000000441CC0:
	sp = fp
	sp = sp + -16
	Mem0[sp:word64] = x29
	sp = sp + 8
	Mem0[sp:word64] = x30
	x29 = x31 + 0x0000000000000000
	call fn000000000044007C (retsize: 0;)
	w0 = w0 & 0x0000007F
	w1 = w0 + 0x00000001
job_exit_signal_exit:


// kill_pid
// Return size: 0
void kill_pid()
kill_pid_entry:
	// succ:  l0000000000441CE8
l0000000000441CE8:
	sp = fp
	sp = sp + -336
	Mem0[sp:word64] = x29
	sp = sp + 8
	Mem0[sp:word64] = x30
	x29 = x31 + 0x0000000000000000
	v8 = sp + 16
	Mem0[v8:word64] = x19
	v8 = v8 + 8
	Mem0[v8:word64] = x20
	v11 = sp + 32
	Mem0[v11:word64] = x21
	v11 = v11 + 8
	Mem0[v11:word64] = x22
	v14 = sp + 48
	Mem0[v14:word64] = x23
	v14 = v14 + 8
	Mem0[v14:word64] = x24
	w31 = w0 + 0x00000001
	NZCV = cond(w31)
	w19 = w0
	w20 = w1
	branch Test(LT,NV) l0000000000441D30
	// succ:  l0000000000441D0C l0000000000441D30
l0000000000441D0C:
	branch w2 != 0x00000000 l0000000000441E14
	// succ:  l0000000000441D10 l0000000000441E14
l0000000000441D10:
	call kill (retsize: 0;)
	w19 = w0
	w0 = w19
	v23 = sp + 32
	x21 = Mem0[v23:word64]
	v23 = v23 + 8
	x22 = Mem0[v23:word64]
	v24 = sp + 16
	x19 = Mem0[v24:word64]
	v24 = v24 + 8
	x20 = Mem0[v24:word64]
	v25 = sp + 48
	x23 = Mem0[v25:word64]
	v25 = v25 + 8
	x24 = Mem0[v25:word64]
	x29 = Mem0[sp:word64]
	sp = sp + 8
	x30 = Mem0[sp:word64]
	sp = sp + 336
	return
	// succ:  kill_pid_exit
l0000000000441D30:
	w19 = w31 - w0
	w23 = 0x00000001
	// succ:  l0000000000441D38
l0000000000441D38:
	x0 = x29 + 0x00000000000000C0
	sigemptyset(x0)
	sp = sp + 0xFFFFFFFFFFFFFFF8
	w1 = 0x00000011
	x0 = x29 + 0x00000000000000C0
	sigaddset(x0, x1)
	sp = sp + 0xFFFFFFFFFFFFFFF8
	x0 = x29 + 0x0000000000000040
	sigemptyset(x0)
	sp = sp + 0xFFFFFFFFFFFFFFF8
	x1 = x29 + 0x00000000000000C0
	x2 = x29 + 0x0000000000000040
	w0 = 0x00000000
	sigprocmask(x0, x1, x2)
	sp = sp + 0xFFFFFFFFFFFFFFF8
	x2 = x29 + 0x0000000000000140
	w0 = w19
	w1 = 0x00000000
	call fn000000000043F7B0 (retsize: 0;)
	w2 = Mem0[x29 + 320:word32]
	x24 = x0
	w31 = w2 + 0x00000001
	NZCV = cond(w31)
	branch Test(EQ,Z) l0000000000441EB0
	// succ:  l0000000000441D84 l0000000000441EB0
l0000000000441D84:
	x22 = 0x00000000004DF000
	x21 = x22 + 0xFFFFFFFFFFFFFEC8
	x1 = Mem0[x21:word64]
	x0 = 0x00000000004D6000
	x1 = Mem0[x1 + (int64) ((int32) w2):word64]
	x0 = x0 + 0xFFFFFFFFFFFFFD08
	w3 = Mem0[x1 + 24:word32]
	w0 = Mem0[x0 + 104:word32]
	w3 = w3 & 0xFFFFFFFD
	Mem0[x1 + 24:word32] = w3
	w3 = Mem0[x1 + 16:word32]
	NZCV = cond(w3 - w0)
	branch w23 == 0x00000000 l0000000000441E1C
	// succ:  l0000000000441DB8 l0000000000441E1C
l0000000000441DB8:
	branch Test(EQ,Z) l0000000000441EB0
	// succ:  l0000000000441DBC l0000000000441EB0
l0000000000441DBC:
	w0 = w3
	w1 = w20
	call killpg (retsize: 0;)
	w19 = w0
	branch x24 == 0x0000000000000000 l0000000000441DEC
	// succ:  l0000000000441DD0 l0000000000441DEC
l0000000000441DD0:
	x1 = x22 + 0xFFFFFFFFFFFFFEC8
	w0 = Mem0[x29 + 320:word32]
	x1 = Mem0[x1:word64]
	x1 = Mem0[x1 + (int64) ((int32) w0):word64]
	w2 = Mem0[x1 + 20:word32]
	w31 = w2 - 0x00000002
	NZCV = cond(w31)
	branch Test(EQ,Z) l0000000000441ED0
	// succ:  l0000000000441DEC l0000000000441ED0
l0000000000441DEC:
	x1 = x29 + 0x0000000000000040
	x2 = 0x0000000000000000
	w0 = 0x00000002
	sigprocmask(x0, x1, x2)
	sp = sp + 0xFFFFFFFFFFFFFFF8
	// succ:  l0000000000441DFC
l0000000000441DFC:
	w0 = w19
	v32 = sp + 32
	x21 = Mem0[v32:word64]
	v32 = v32 + 8
	x22 = Mem0[v32:word64]
	v33 = sp + 16
	x19 = Mem0[v33:word64]
	v33 = v33 + 8
	x20 = Mem0[v33:word64]
	v34 = sp + 48
	x23 = Mem0[v34:word64]
	v34 = v34 + 8
	x24 = Mem0[v34:word64]
	x29 = Mem0[sp:word64]
	sp = sp + 8
	x30 = Mem0[sp:word64]
	sp = sp + 336
	return
	// succ:  kill_pid_exit
l0000000000441E14:
	w23 = 0x00000000
	goto l0000000000441D38
	// succ:  l0000000000441D38
l0000000000441E1C:
	branch Test(NE,Z) l0000000000441DBC
	// succ:  l0000000000441E20 l0000000000441DBC
l0000000000441E20:
	x19 = Mem0[x1 + 8:word64]
	goto l0000000000441E48
	// succ:  l0000000000441E48
l0000000000441E28:
	v36 = Mem0[x19 + 12:byte]
	w0 = (word32) v36
	w31 = w0 - 0x0000007F
	NZCV = cond(w31)
	branch Test(EQ,Z) l0000000000441E54
	// succ:  l0000000000441E34 l0000000000441E54
l0000000000441E34:
	x0 = Mem0[x21:word64]
	x0 = Mem0[x0 + (int64) ((int32) w2):word64]
	x0 = Mem0[x0 + 8:word64]
	x31 = x0 - x19
	NZCV = cond(x31)
	branch Test(EQ,Z) l0000000000441E98
	// succ:  l0000000000441E48 l0000000000441E98
l0000000000441E48:
	w0 = Mem0[x19 + 16:word32]
	w31 = w0 - 0x00000001
	NZCV = cond(w31)
	branch Test(NE,Z) l0000000000441E28
	// succ:  l0000000000441E54 l0000000000441E28
l0000000000441E54:
	w0 = Mem0[x19 + 8:word32]
	w1 = w20
	call kill (retsize: 0;)
	w0 = Mem0[x19 + 16:word32]
	w31 = w20 - 0x00000001
	NZCV = cond(w31)
	branch w0 != 0x00000000 l0000000000441E7C
	// succ:  l0000000000441E6C l0000000000441E7C
l0000000000441E6C:
	w1 = 0x00000012
	branch Test(EQ,Z) l0000000000441EC4
	// succ:  l0000000000441E74 l0000000000441EC4
l0000000000441E74:
	w31 = w20 - 0x0000000F
	NZCV = cond(w31)
	branch Test(EQ,Z) l0000000000441EC4
	// succ:  l0000000000441E7C l0000000000441EC4
l0000000000441E7C:
	w2 = Mem0[x29 + 320:word32]
	x0 = Mem0[x21:word64]
	x19 = Mem0[x19:word64]
	x0 = Mem0[x0 + (int64) ((int32) w2):word64]
	x0 = Mem0[x0 + 8:word64]
	x31 = x0 - x19
	NZCV = cond(x31)
	branch Test(NE,Z) l0000000000441E48
	// succ:  l0000000000441E98 l0000000000441E48
l0000000000441E98:
	x1 = x29 + 0x0000000000000040
	x2 = 0x0000000000000000
	w0 = 0x00000002
	w19 = 0x00000000
	sigprocmask(x0, x1, x2)
	sp = sp + 0xFFFFFFFFFFFFFFF8
	goto l0000000000441DFC
	// succ:  l0000000000441DFC
l0000000000441EB0:
	w0 = w19
	w1 = w20
	call killpg (retsize: 0;)
	w19 = w0
	goto l0000000000441DEC
	// succ:  l0000000000441DEC
l0000000000441EC4:
	w0 = Mem0[x19 + 8:word32]
	call kill (retsize: 0;)
	goto l0000000000441E7C
	// succ:  l0000000000441E7C
l0000000000441ED0:
	w31 = w20 - 0x00000001
	NZCV = cond(w31)
	branch Test(EQ,Z) l0000000000441F10
	// succ:  l0000000000441ED8 l0000000000441F10
l0000000000441ED8:
	w31 = w20 - 0x0000000F
	NZCV = cond(w31)
	branch Test(EQ,Z) l0000000000441F10
	// succ:  l0000000000441EE0 l0000000000441F10
l0000000000441EE0:
	w31 = w20 - 0x00000012
	NZCV = cond(w31)
	branch Test(NE,Z) l0000000000441DEC
	// succ:  l0000000000441EE8 l0000000000441DEC
l0000000000441EE8:
	call fn000000000043F8CC (retsize: 0;)
	x22 = x22 + 0xFFFFFFFFFFFFFEC8
	v35 = Mem0[x29 + 160:int32]
	x1 = (word64) v35
	x0 = Mem0[x22:word64]
	x0 = Mem0[x0 + x1:word64]
	w1 = Mem0[x0 + 24:word32]
	w1 = w1 & 0xFFFFFFFE
	w1 = w1 | 0x00000002
	Mem0[x0 + 24:word32] = w1
	goto l0000000000441DEC
	// succ:  l0000000000441DEC
l0000000000441F10:
	w0 = Mem0[x1 + 16:word32]
	w1 = 0x00000012
	call killpg (retsize: 0;)
	x1 = x22 + 0xFFFFFFFFFFFFFEC8
	w0 = Mem0[x29 + 320:word32]
	x1 = Mem0[x1:word64]
	x1 = Mem0[x1 + (int64) ((int32) w0):word64]
	w1 = Mem0[x1 + 20:word32]
	w31 = w1 - 0x00000002
	NZCV = cond(w31)
	branch Test(EQ,Z) l0000000000441EE0
	// succ:  l0000000000441F38 l0000000000441EE0
l0000000000441F38:
	goto l0000000000441DEC
	// succ:  l0000000000441DEC
kill_pid_exit:


// run_sigchld_trap
// Return size: 0
void run_sigchld_trap()
run_sigchld_trap_entry:
	// succ:  l0000000000441F3C
l0000000000441F3C:
	sp = fp
	sp = sp + -80
	Mem0[sp:word64] = x29
	sp = sp + 8
	Mem0[sp:word64] = x30
	x29 = x31 + 0x0000000000000000
	v8 = sp + 16
	Mem0[v8:word64] = x19
	v8 = v8 + 8
	Mem0[v8:word64] = x20
	x19 = 0x00000000004E3000
	x19 = x19 + 0xFFFFFFFFFFFFF878
	v11 = sp + 32
	Mem0[v11:word64] = x21
	v11 = v11 + 8
	Mem0[v11:word64] = x22
	w21 = w0
	x0 = Mem0[x19 + 136:word64]
	v17 = sp + 48
	Mem0[v17:word64] = x23
	v17 = v17 + 8
	Mem0[v17:word64] = x24
	x23 = 0x00000000004AD000
	v20 = sp + 64
	Mem0[v20:word64] = x25
	v20 = v20 + 8
	Mem0[v20:word64] = x26
	x23 = x23 + 0x0000000000000510
	strlen(x0)
	sp = sp + 0xFFFFFFFFFFFFFFF8
	w2 = 0x00000D61
	x1 = x23
	x0 = x0 + 0x0000000000000001
	call sh_xmalloc (retsize: 0;)
	x1 = Mem0[x19 + 136:word64]
	x26 = 0x00000000004AD000
	strcpy(x0, x1)
	sp = sp + 0xFFFFFFFFFFFFFFF8
	x20 = x0
	x0 = x26 + 0x00000000000006E0
	call begin_unwind_frame (retsize: 0;)
	x0 = 0x00000000004E3000
	x0 = x0 + 0x00000000000004B0
	w1 = 0x00000004
	call unwind_protect_mem (retsize: 0;)
	x0 = 0x00000000004E3000
	x0 = x0 + 0x000000000000035C
	w1 = 0x00000004
	call unwind_protect_mem (retsize: 0;)
	x0 = 0x00000000004D6000
	x0 = x0 + 0xFFFFFFFFFFFFFD08
	x0 = x0 + 0x0000000000000070
	w1 = 0x00000004
	x25 = 0x00000000004E1000
	call unwind_protect_mem (retsize: 0;)
	x25 = x25 + 0x000000000000027C
	x0 = x25
	w1 = 0x00000004
	x22 = 0x00000000004E0000
	call unwind_protect_mem (retsize: 0;)
	x22 = x22 + 0xFFFFFFFFFFFFFFC8
	x0 = x22 - 0x0000000000000060
	w1 = 0x00000004
	x24 = 0x00000000004DF000
	call unwind_protect_mem (retsize: 0;)
	x24 = x24 + 0xFFFFFFFFFFFFFEC8
	x0 = x24 + 0x0000000000000008
	w1 = 0x00000008
	call unwind_protect_mem (retsize: 0;)
	x19 = 0x00000000004E1000
	x0 = x19 + 0x0000000000000028
	w1 = 0x00000008
	call unwind_protect_mem (retsize: 0;)
	x0 = 0x000000000046C000
	x0 = x0 + 0x00000000000004C4
	x1 = x20
	call add_unwind_protect (retsize: 0;)
	x0 = 0x0000000000455000
	x0 = x0 + 0x00000000000003FC
	x1 = x20
	call add_unwind_protect (retsize: 0;)
	Mem0[x19 + 40:word64] = 0x0000000000000000
	Mem0[x24 + 8:word64] = 0x0000000000000000
	call set_impossible_sigchld_trap (retsize: 0;)
	w24 = 0x00000001
	Mem0[x22 + -96:word32] = w24
	NZCV = cond(w21 - w31)
	x22 = 0x00000000004AD000
	x22 = x22 + 0x00000000000006E8
	w19 = 0x00000000
	branch Test(LE,ZCV) l000000000044209C
	// succ:  l0000000000442060 l000000000044209C
l0000000000442060:
	x0 = x20
	Mem0[x25:word32] = w24
	strlen(x0)
	sp = sp + 0xFFFFFFFFFFFFFFF8
	w2 = 0x00000D7A
	x1 = x23
	x0 = x0 + 0x0000000000000001
	call sh_xmalloc (retsize: 0;)
	x1 = x20
	strcpy(x0, x1)
	sp = sp + 0xFFFFFFFFFFFFFFF8
	x1 = x22
	w2 = 0x00000014
	call parse_and_execute (retsize: 0;)
	w19 = w19 + 0x00000001
	NZCV = cond(w19 - w21)
	branch Test(NE,Z) l0000000000442060
	// succ:  l000000000044209C l0000000000442060
l000000000044209C:
	x0 = x26 + 0x00000000000006E0
	v30 = sp + 16
	x19 = Mem0[v30:word64]
	v30 = v30 + 8
	x20 = Mem0[v30:word64]
	v31 = sp + 32
	x21 = Mem0[v31:word64]
	v31 = v31 + 8
	x22 = Mem0[v31:word64]
	v32 = sp + 48
	x23 = Mem0[v32:word64]
	v32 = v32 + 8
	x24 = Mem0[v32:word64]
	v33 = sp + 64
	x25 = Mem0[v33:word64]
	v33 = v33 + 8
	x26 = Mem0[v33:word64]
	x29 = Mem0[sp:word64]
	sp = sp + 8
	x30 = Mem0[sp:word64]
	sp = sp + 80
	// succ:  l00000000004420B4_thunk_run_unwind_frame
l00000000004420B4_thunk_run_unwind_frame:
	call run_unwind_frame (retsize: 0;)
	return
	// succ:  run_sigchld_trap_exit
run_sigchld_trap_exit:


// fn00000000004420B8
// Return size: 0
void fn00000000004420B8()
fn00000000004420B8_entry:
	// succ:  l00000000004420B8
l00000000004420B8:
	sp = fp
	sp = sp + -160
	Mem0[sp:word64] = x29
	sp = sp + 8
	Mem0[sp:word64] = x30
	x29 = x31 + 0x0000000000000000
	v6 = sp + 48
	Mem0[v6:word64] = x23
	v6 = v6 + 8
	Mem0[v6:word64] = x24
	x23 = 0x00000000004E0000
	w24 = w0
	w0 = 0xFFFFFFFF
	v11 = sp + 80
	Mem0[v11:word64] = x27
	v11 = v11 + 8
	Mem0[v11:word64] = x28
	x1 = x23 + 0xFFFFFFFFFFFFFFC8
	Mem0[x29 + 120:word32] = w0
	x28 = 0x00000000004DF000
	x0 = 0x00000000004AD000
	v16 = sp + 64
	Mem0[v16:word64] = x25
	v16 = v16 + 8
	Mem0[v16:word64] = x26
	x0 = x0 + 0x00000000000006F0
	w25 = 0x00000000
	x26 = 0x00000000004E3000
	x28 = x28 + 0xFFFFFFFFFFFFFEC8
	w3 = Mem0[x1 + -28:word32]
	v21 = sp + 32
	Mem0[v21:word64] = x21
	v21 = v21 + 8
	Mem0[v21:word64] = x22
	v24 = sp + 16
	Mem0[v24:word64] = x19
	v24 = v24 + 8
	Mem0[v24:word64] = x20
	w27 = w25
	x21 = 0x00000000004D6000
	x22 = 0x00000000004E1000
	x26 = x26 + 0x00000000000004A0
	Mem0[x29 + 128:word64] = x0
	Mem0[x29 + 112:word64] = x28
	// succ:  l000000000044211C
l000000000044211C:
	x1 = x21 + 0xFFFFFFFFFFFFFD08
	w2 = Mem0[x1 + 84:word32]
	w19 = 0x00000000
	branch w2 == 0x00000000 l000000000044213C
	// succ:  l000000000044212C l000000000044213C
l000000000044212C:
	w0 = Mem0[x26:word32]
	branch w0 != 0x00000000 l000000000044213C
	// succ:  l0000000000442134 l000000000044213C
l0000000000442134:
	w19 = Mem0[x1 + 116:word32]
	w19 = w19 | 0x00000002
	// succ:  l000000000044213C
l000000000044213C:
	branch w3 != 0x00000000 l0000000000442260
	// succ:  l0000000000442140 l0000000000442260
l0000000000442140:
	branch w24 == 0x00000000 l0000000000442260
	// succ:  l0000000000442144 l0000000000442260
l0000000000442144:
	w0 = Mem0[x22 + 644:word32]
	branch w0 != 0x00000000 l000000000044226C
	// succ:  l000000000044214C l000000000044226C
l000000000044214C:
	w31 = w24 - 0x00000001
	NZCV = cond(w31)
	branch Test(EQ,Z) l000000000044227C
	// succ:  l0000000000442154 l000000000044227C
l0000000000442154:
	w0 = 0xFFFFFFFF
	x1 = x29 + 0x0000000000000064
	w2 = w19
	call waitpid (retsize: 0;)
	x28 = x21 + 0xFFFFFFFFFFFFFD08
	w20 = w0
	w0 = Mem0[x28 + 116:word32]
	branch w0 == 0x00000000 l0000000000442178
	// succ:  l0000000000442174 l0000000000442178
l0000000000442174:
	branch (w20 & 0x00000000) == 0x00000000 l0000000000442514
	// succ:  l0000000000442178 l0000000000442514
l0000000000442178:
	x0 = x23 + 0xFFFFFFFFFFFFFFC8
	w1 = Mem0[x0 + -28:word32]
	NZCV = cond(w1 - w31)
	branch Test(LE,ZCV) l0000000000442194
	// succ:  l0000000000442188 l0000000000442194
l0000000000442188:
	branch (w19 & 0x00000001) == 0x00000000 l0000000000442194
	// succ:  l000000000044218C l0000000000442194
l000000000044218C:
	w1 = w1 - 0x00000001
	Mem0[x0 + -28:word32] = w1
	// succ:  l0000000000442194
l0000000000442194:
	branch (w20 & 0x00000000) == 0x00000000 l0000000000442450
	// succ:  l0000000000442198 l0000000000442450
l0000000000442198:
	w0 = Mem0[x22 + 644:word32]
	branch w0 != 0x00000000 l0000000000442444
	// succ:  l00000000004421A0 l0000000000442444
l00000000004421A0:
	NZCV = cond(w20 - w31)
	branch Test(LE,ZCV) l0000000000442240
	// succ:  l00000000004421A8 l0000000000442240
l00000000004421A8:
	w0 = Mem0[x29 + 100:word32]
	w1 = 0xFFFFFFFF
	NZCV = cond(w0 - w1)
	branch Test(EQ,Z) l00000000004421CC
	// succ:  l00000000004421B8 l00000000004421CC
l00000000004421B8:
	x0 = x21 + 0xFFFFFFFFFFFFFD08
	w1 = Mem0[x0 + 8:word32]
	w25 = w25 + 0x00000001
	w1 = w1 - 0x00000001
	Mem0[x0 + 8:word32] = w1
	// succ:  l00000000004421CC
l00000000004421CC:
	w0 = w20
	w1 = 0x00000001
	x2 = x29 + 0x0000000000000060
	call fn000000000043F7B0 (retsize: 0;)
	x19 = x0
	branch x0 == 0x0000000000000000 l0000000000442208
	// succ:  l00000000004421E4 l0000000000442208
l00000000004421E4:
	w0 = Mem0[x0 + 8:word32]
	NZCV = cond(w20 - w0)
	branch Test(NE,Z) l0000000000442200
	// succ:  l00000000004421F0 l0000000000442200
l00000000004421F0:
	goto l00000000004422A8
	// succ:  l00000000004422A8
l00000000004421F4:
	w2 = Mem0[x19 + 8:word32]
	NZCV = cond(w20 - w2)
	branch Test(EQ,Z) l00000000004422A8
	// succ:  l0000000000442200 l00000000004422A8
l0000000000442200:
	x19 = Mem0[x19:word64]
	branch x19 != 0x0000000000000000 l00000000004421F4
	// succ:  l0000000000442208 l00000000004421F4
l0000000000442208:
	w1 = Mem0[x29 + 100:word32]
	w0 = w20
	call coproc_pidchk (retsize: 0;)
	w0 = Mem0[x29 + 100:word32]
	w0 = w0 & 0x0000007F
	NZ = cond(w0)
	C = false
	V = false
	branch Test(EQ,Z) l0000000000442230
	// succ:  l0000000000442220 l0000000000442230
l0000000000442220:
	w0 = w0 + 0x00000001
l0000000000442230:
	x0 = x21 + 0xFFFFFFFFFFFFFD08
	w1 = Mem0[x0 + 12:word32]
	w1 = w1 + 0x00000001
	Mem0[x0 + 12:word32] = w1
	// succ:  l0000000000442240
l0000000000442240:
	x0 = x23 + 0xFFFFFFFFFFFFFFC8
	w0 = Mem0[x0 + -28:word32]
	branch w0 != 0x00000000 l0000000000442250
	// succ:  l000000000044224C l0000000000442250
l000000000044224C:
	branch w24 != 0x00000000 l0000000000442464
	// succ:  l0000000000442250 l0000000000442464
l0000000000442250:
	NZCV = cond(w20 - w31)
	branch Test(LE,ZCV) l0000000000442464
	// succ:  l0000000000442258 l0000000000442464
l0000000000442258:
	w3 = w0
	goto l000000000044211C
	// succ:  l000000000044211C
l0000000000442260:
	w0 = Mem0[x22 + 644:word32]
	w19 = w19 | 0x00000001
	branch w0 == 0x00000000 l000000000044214C
	// succ:  l000000000044226C l000000000044214C
l000000000044226C:
	w0 = Mem0[x22 + 644:word32]
	call termsig_handler (retsize: 0;)
	w31 = w24 - 0x00000001
	NZCV = cond(w31)
	branch Test(NE,Z) l0000000000442154
	// succ:  l000000000044227C l0000000000442154
l000000000044227C:
	x0 = x23 + 0xFFFFFFFFFFFFFFC8
	w0 = Mem0[x0 + -120:word32]
	branch w0 != 0x00000000 l0000000000442154
	// succ:  l0000000000442288 l0000000000442154
l0000000000442288:
	branch (w19 & 0x00000001) == 0x00000000 l0000000000442154
	// succ:  l000000000044228C l0000000000442154
l000000000044228C:
	x1 = Mem0[x29 + 128:word64]
	w2 = 0x00000005
	x0 = 0x0000000000000000
	dcgettext(x0, x1, x2)
	sp = sp + 0xFFFFFFFFFFFFFFF8
	call internal_warning (retsize: 0;)
	w19 = w19 | 0x00000001
	goto l0000000000442154
	// succ:  l0000000000442154
l00000000004422A8:
	w1 = Mem0[x29 + 100:word32]
	w0 = w20
	call coproc_pidchk (retsize: 0;)
	w0 = Mem0[x29 + 100:word32]
	w1 = 0xFFFFFFFF
	NZCV = cond(w0 - w1)
	w1 = (word32) Test(EQ,Z)
	Mem0[x19 + 12:word32] = w0
	Mem0[x19 + 16:word32] = w1
	branch w1 == 0x00000000 l0000000000442414
	// succ:  l00000000004422D0 l0000000000442414
l00000000004422D0:
	w6 = Mem0[x29 + 96:word32]
	w31 = w6 + 0x00000001
	NZCV = cond(w31)
	w14 = w6
	branch Test(EQ,Z) l0000000000442240
	// succ:  l00000000004422E0 l0000000000442240
l00000000004422E0:
	x3 = Mem0[x29 + 112:word64]
l0000000000442414:
	x0 = x21 + 0xFFFFFFFFFFFFFD08
	w1 = Mem0[x0 + 24:word32]
	w6 = Mem0[x29 + 96:word32]
	w1 = w1 + 0x00000001
	Mem0[x0 + 24:word32] = w1
	w31 = w6 + 0x00000001
	NZCV = cond(w31)
	branch Test(EQ,Z) l0000000000442240
	// succ:  l0000000000442430 l0000000000442240
l0000000000442430:
	w1 = Mem0[x0 + 12:word32]
	w14 = w6
	w1 = w1 + 0x00000001
	Mem0[x0 + 12:word32] = w1
	goto l00000000004422E0
	// succ:  l00000000004422E0
l0000000000442444:
	w0 = Mem0[x22 + 644:word32]
	call termsig_handler (retsize: 0;)
	goto l00000000004421A0
	// succ:  l00000000004421A0
l0000000000442450:
	__errno_location()
	sp = sp + 0xFFFFFFFFFFFFFFF8
	w0 = Mem0[x0:word32]
	w31 = w0 - 0x0000000A
	NZCV = cond(w31)
	branch Test(NE,Z) l0000000000442198
	// succ:  l0000000000442460 l0000000000442198
l0000000000442460:
	branch w25 == 0x00000000 l00000000004427D4
	// succ:  l0000000000442464 l00000000004427D4
l0000000000442464:
	branch w27 == 0x00000000 l000000000044247C
	// succ:  l0000000000442468 l000000000044247C
l0000000000442468:
	w3 = Mem0[x29 + 120:word32]
	w31 = w3 + 0x00000001
	NZCV = cond(w31)
	branch Test(EQ,Z) l0000000000442648
	// succ:  l0000000000442474 l0000000000442648
l0000000000442474:
	x0 = x3
	call fn000000000043F9C4 (retsize: 0;)
	// succ:  l000000000044247C
l000000000044247C:
	x21 = x21 + 0xFFFFFFFFFFFFFD08
	w0 = Mem0[x21 + 84:word32]
	branch w0 != 0x00000000 l00000000004425CC
	// succ:  l0000000000442488 l00000000004425CC
l0000000000442488:
	x0 = 0x00000000004DF000
	w1 = Mem0[x0 + 3764:word32]
	w0 = w25
	branch w1 == 0x00000000 l00000000004424A4
	// succ:  l0000000000442498 l00000000004424A4
l0000000000442498:
	x1 = 0x00000000004DE000
	w1 = Mem0[x1 + 1704:word32]
	branch w1 != 0x00000000 l0000000000442620
	// succ:  l00000000004424A4 l0000000000442620
l00000000004424A4:
	v40 = sp + 16
	x19 = Mem0[v40:word64]
	v40 = v40 + 8
	x20 = Mem0[v40:word64]
	v41 = sp + 32
	x21 = Mem0[v41:word64]
	v41 = v41 + 8
	x22 = Mem0[v41:word64]
	v42 = sp + 48
	x23 = Mem0[v42:word64]
	v42 = v42 + 8
	x24 = Mem0[v42:word64]
	v43 = sp + 64
	x25 = Mem0[v43:word64]
	v43 = v43 + 8
	x26 = Mem0[v43:word64]
	v44 = sp + 80
	x27 = Mem0[v44:word64]
	v44 = v44 + 8
	x28 = Mem0[v44:word64]
	x29 = Mem0[sp:word64]
	sp = sp + 8
	x30 = Mem0[sp:word64]
	sp = sp + 160
	return
	// succ:  fn00000000004420B8_exit
l0000000000442514:
	__errno_location()
	sp = sp + 0xFFFFFFFFFFFFFFF8
	w0 = Mem0[x0:word32]
	w31 = w0 - 0x00000016
	NZCV = cond(w31)
	branch Test(NE,Z) l0000000000442178
	// succ:  l0000000000442524 l0000000000442178
l0000000000442524:
	Mem0[x28 + 116:word32] = 0x00000000
	goto l0000000000442240
	// succ:  l0000000000442240
l00000000004425CC:
	w0 = 0x00000011
	call signal_is_trapped (retsize: 0;)
	branch w0 == 0x00000000 l0000000000442488
	// succ:  l00000000004425D8 l0000000000442488
l00000000004425D8:
	branch w25 == 0x00000000 l0000000000442488
	// succ:  l00000000004425DC l0000000000442488
l00000000004425DC:
	x0 = 0x00000000004E3000
	x0 = Mem0[x0 + 2304:word64]
	x31 = x0 - 0x0000000000000001
	NZCV = cond(x31)
	branch Test(EQ,Z) l0000000000442488
	// succ:  l00000000004425EC l0000000000442488
l00000000004425EC:
	x0 = 0x00000000004DE000
	w0 = Mem0[x0 + 1716:word32]
	branch w0 == 0x00000000 l0000000000442614
	// succ:  l00000000004425F8 l0000000000442614
l00000000004425F8:
	x0 = 0x00000000004E1000
	x0 = Mem0[x0 + 1688:word64]
	branch x0 == 0x0000000000000000 l0000000000442614
	// succ:  l0000000000442604 l0000000000442614
l0000000000442604:
	x1 = 0x000000000047B000
	x1 = x1 + 0x0000000000000318
	x31 = x0 - x1
	NZCV = cond(x31)
	branch Test(EQ,Z) l00000000004427A8
	// succ:  l0000000000442614 l00000000004427A8
l0000000000442614:
	w0 = w25
	call run_sigchld_trap (retsize: 0;)
	goto l0000000000442488
	// succ:  l0000000000442488
l0000000000442620:
	Mem0[x29 + 136:word64] = x0
	call fn0000000000440C18 (retsize: 0;)
	x0 = Mem0[x29 + 136:word64]
	v45 = sp + 16
	x19 = Mem0[v45:word64]
	v45 = v45 + 8
	x20 = Mem0[v45:word64]
	v46 = sp + 32
	x21 = Mem0[v46:word64]
	v46 = v46 + 8
	x22 = Mem0[v46:word64]
	v47 = sp + 48
	x23 = Mem0[v47:word64]
	v47 = v47 + 8
	x24 = Mem0[v47:word64]
	v48 = sp + 64
	x25 = Mem0[v48:word64]
	v48 = v48 + 8
	x26 = Mem0[v48:word64]
	v49 = sp + 80
	x27 = Mem0[v49:word64]
	v49 = v49 + 8
	x28 = Mem0[v49:word64]
	x29 = Mem0[sp:word64]
	sp = sp + 8
	x30 = Mem0[sp:word64]
	sp = sp + 160
	return
	// succ:  fn00000000004420B8_exit
l0000000000442648:
	call fn000000000043FAD4 (retsize: 0;)
	goto l000000000044247C
	// succ:  l000000000044247C
l00000000004427A8:
	x1 = 0x00000000004E1000
	w0 = 0x00000011
	Mem0[x1 + 636:word32] = 0x00000000
	call trap_handler (retsize: 0;)
	x0 = 0x00000000004E3000
	w3 = 0x00000011
	x2 = 0x00000000004E3000
	x0 = x0 + 0xFFFFFFFFFFFFFDC8
	w1 = 0x00000001
	Mem0[x2 + 2164:word32] = w3
	call __longjmp_chk (retsize: 0;)
	// succ:  l00000000004427D4
l00000000004427D4:
	w0 = 0xFFFFFFFF
	goto l00000000004424A4
	// succ:  l00000000004424A4
fn00000000004420B8_exit:


// fn0000000000442820
// Return size: 0
void fn0000000000442820()
fn0000000000442820_entry:
	// succ:  l0000000000442820
l0000000000442820:
	sp = fp
	sp = sp + -64
	Mem0[sp:word64] = x29
	sp = sp + 8
	Mem0[sp:word64] = x30
	x29 = x31 + 0x0000000000000000
	v6 = sp + 32
	Mem0[v6:word64] = x21
	v6 = v6 + 8
	Mem0[v6:word64] = x22
	x21 = 0x00000000004D6000
	x21 = x21 + 0xFFFFFFFFFFFFFD08
	w0 = Mem0[x21 + 28:word32]
	v10 = sp + 16
	Mem0[v10:word64] = x19
	v10 = v10 + 8
	Mem0[v10:word64] = x20
	v13 = sp + 48
	Mem0[v13:word64] = x23
	v13 = v13 + 8
	Mem0[v13:word64] = x24
	branch w0 == 0x00000000 l0000000000442908
	// succ:  l0000000000442844 l0000000000442908
l0000000000442844:
	x23 = 0x00000000004E0000
	x1 = x23 + 0xFFFFFFFFFFFFFFC8
	w2 = Mem0[x1 + -96:word32]
	branch w2 != 0x00000000 l0000000000442908
	// succ:  l0000000000442854 l0000000000442908
l0000000000442854:
	w2 = Mem0[x1 + -120:word32]
	NZCV = cond(w0 - w31)
	w2 = w2 + 0x00000001
	Mem0[x1 + -120:word32] = w2
	w24 = Mem0[x1 + -28:word32]
	branch Test(LE,ZCV) l00000000004428D0
	// succ:  l000000000044286C l00000000004428D0
l000000000044286C:
	x19 = 0x0000000000000000
	x22 = 0x00000000004DF000
	w20 = w19
	x22 = x22 + 0xFFFFFFFFFFFFFEC8
	goto l0000000000442890
	// succ:  l0000000000442890
l0000000000442880:
	w0 = Mem0[x21 + 28:word32]
	w20 = w20 + 0x00000001
	NZCV = cond(w20 - w0)
	branch Test(GE,NZV) l00000000004428D0
	// succ:  l0000000000442890 l00000000004428D0
l0000000000442890:
	x0 = Mem0[x22:word64]
	x0 = Mem0[x0 + x19:word64]
	x19 = x19 + 0x0000000000000008
	branch x0 == 0x0000000000000000 l0000000000442880
	// succ:  l00000000004428A0 l0000000000442880
l00000000004428A0:
	w1 = Mem0[x0 + 20:word32]
	w31 = w1 - 0x00000004
	NZCV = cond(w31)
	branch Test(NE,Z) l0000000000442880
	// succ:  l00000000004428AC l0000000000442880
l00000000004428AC:
	w0 = Mem0[x0 + 24:word32]
	branch (w0 & 0x00000002) == 0x00000000 l0000000000442880
	// succ:  l00000000004428B4 l0000000000442880
l00000000004428B4:
	w0 = w20
	w1 = 0x00000000
	call delete_job (retsize: 0;)
	w0 = Mem0[x21 + 28:word32]
	w20 = w20 + 0x00000001
	NZCV = cond(w20 - w0)
	branch Test(LT,NV) l0000000000442890
	// succ:  l00000000004428D0 l0000000000442890
l00000000004428D0:
	call coproc_reap (retsize: 0;)
	x23 = x23 + 0xFFFFFFFFFFFFFFC8
	w0 = Mem0[x23 + -120:word32]
	w0 = w0 - 0x00000001
	Mem0[x23 + -120:word32] = w0
	branch w0 != 0x00000000 l0000000000442908
	// succ:  l00000000004428E8 l0000000000442908
l00000000004428E8:
	w1 = Mem0[x23 + -28:word32]
	NZCV = cond(w24 - w1)
	branch Test(EQ,Z) l0000000000442908
	// succ:  l00000000004428F4 l0000000000442908
l00000000004428F4:
	v28 = sp + 16
	x19 = Mem0[v28:word64]
	v28 = v28 + 8
	x20 = Mem0[v28:word64]
	v29 = sp + 32
	x21 = Mem0[v29:word64]
	v29 = v29 + 8
	x22 = Mem0[v29:word64]
	v30 = sp + 48
	x23 = Mem0[v30:word64]
	v30 = v30 + 8
	x24 = Mem0[v30:word64]
	x29 = Mem0[sp:word64]
	sp = sp + 8
	x30 = Mem0[sp:word64]
	sp = sp + 64
	// succ:  l0000000000442904_thunk_fn00000000004420B8
l0000000000442904_thunk_fn00000000004420B8:
	call fn00000000004420B8 (retsize: 0;)
	return
	// succ:  fn0000000000442820_exit
l0000000000442908:
	v31 = sp + 16
	x19 = Mem0[v31:word64]
	v31 = v31 + 8
	x20 = Mem0[v31:word64]
	v32 = sp + 32
	x21 = Mem0[v32:word64]
	v32 = v32 + 8
	x22 = Mem0[v32:word64]
	v33 = sp + 48
	x23 = Mem0[v33:word64]
	v33 = v33 + 8
	x24 = Mem0[v33:word64]
	x29 = Mem0[sp:word64]
	sp = sp + 8
	x30 = Mem0[sp:word64]
	sp = sp + 64
	return
	// succ:  fn0000000000442820_exit
fn0000000000442820_exit:


// list_stopped_jobs
// Return size: 0
void list_stopped_jobs()
list_stopped_jobs_entry:
	// succ:  l000000000044291C
l000000000044291C:
	sp = fp
	sp = sp + -32
	Mem0[sp:word64] = x29
	sp = sp + 8
	Mem0[sp:word64] = x30
	x29 = x31 + 0x0000000000000000
	Mem0[x29 + 16:word64] = x0
	call fn0000000000442820 (retsize: 0;)
	x1 = 0x00000000004D6000
	x1 = x1 + 0xFFFFFFFFFFFFFD08
	w1 = Mem0[x1 + 28:word32]
	x0 = Mem0[x29 + 16:word64]
	branch w1 != 0x00000000 l0000000000442948
	// succ:  l0000000000442940 l0000000000442948
l0000000000442940:
	x29 = Mem0[sp:word64]
	sp = sp + 8
	x30 = Mem0[sp:word64]
	sp = sp + 32
	return
	// succ:  list_stopped_jobs_exit
l0000000000442948:
	x29 = Mem0[sp:word64]
	sp = sp + 8
	x30 = Mem0[sp:word64]
	sp = sp + 32
	w1 = 0x00000002
	// succ:  l0000000000442950_thunk_fn0000000000440878
l0000000000442950_thunk_fn0000000000440878:
	call fn0000000000440878 (retsize: 0;)
	return
	// succ:  list_stopped_jobs_exit
list_stopped_jobs_exit:


// list_running_jobs
// Return size: 0
void list_running_jobs()
list_running_jobs_entry:
	// succ:  l0000000000442954
l0000000000442954:
	sp = fp
	sp = sp + -32
	Mem0[sp:word64] = x29
	sp = sp + 8
	Mem0[sp:word64] = x30
	x29 = x31 + 0x0000000000000000
	Mem0[x29 + 16:word64] = x0
	call fn0000000000442820 (retsize: 0;)
	x1 = 0x00000000004D6000
	x1 = x1 + 0xFFFFFFFFFFFFFD08
	w1 = Mem0[x1 + 28:word32]
	x0 = Mem0[x29 + 16:word64]
	branch w1 != 0x00000000 l0000000000442980
	// succ:  l0000000000442978 l0000000000442980
l0000000000442978:
	x29 = Mem0[sp:word64]
	sp = sp + 8
	x30 = Mem0[sp:word64]
	sp = sp + 32
	return
	// succ:  list_running_jobs_exit
l0000000000442980:
	x29 = Mem0[sp:word64]
	sp = sp + 8
	x30 = Mem0[sp:word64]
	sp = sp + 32
	w1 = 0x00000001
	// succ:  l0000000000442988_thunk_fn0000000000440878
l0000000000442988_thunk_fn0000000000440878:
	call fn0000000000440878 (retsize: 0;)
	return
	// succ:  list_running_jobs_exit
list_running_jobs_exit:


// list_all_jobs
// Return size: 0
void list_all_jobs()
list_all_jobs_entry:
	// succ:  l000000000044298C
l000000000044298C:
	sp = fp
	sp = sp + -32
	Mem0[sp:word64] = x29
	sp = sp + 8
	Mem0[sp:word64] = x30
	x29 = x31 + 0x0000000000000000
	Mem0[x29 + 16:word64] = x0
	call fn0000000000442820 (retsize: 0;)
	x1 = 0x00000000004D6000
	x1 = x1 + 0xFFFFFFFFFFFFFD08
	w1 = Mem0[x1 + 28:word32]
	x0 = Mem0[x29 + 16:word64]
	branch w1 != 0x00000000 l00000000004429B8
	// succ:  l00000000004429B0 l00000000004429B8
l00000000004429B0:
	x29 = Mem0[sp:word64]
	sp = sp + 8
	x30 = Mem0[sp:word64]
	sp = sp + 32
	return
	// succ:  list_all_jobs_exit
l00000000004429B8:
	x29 = Mem0[sp:word64]
	sp = sp + 8
	x30 = Mem0[sp:word64]
	sp = sp + 32
	w1 = 0xFFFFFFFF
	// succ:  l00000000004429C0_thunk_fn0000000000440878
l00000000004429C0_thunk_fn0000000000440878:
	call fn0000000000440878 (retsize: 0;)
	return
	// succ:  list_all_jobs_exit
list_all_jobs_exit:


// notify_and_cleanup
// Return size: 0
void notify_and_cleanup()
notify_and_cleanup_entry:
	// succ:  l00000000004429C4
l00000000004429C4:
	sp = fp
	sp = sp + -16
	Mem0[sp:word64] = x29
	sp = sp + 8
	Mem0[sp:word64] = x30
	x29 = x31 + 0x0000000000000000
	x0 = 0x00000000004E0000
	x0 = x0 + 0xFFFFFFFFFFFFFFC8
	w0 = Mem0[x0 + -96:word32]
	branch w0 != 0x00000000 l0000000000442A0C
	// succ:  l00000000004429DC l0000000000442A0C
l00000000004429DC:
	x0 = 0x00000000004DE000
	w0 = Mem0[x0 + 1704:word32]
	branch w0 != 0x00000000 l0000000000442A00
	// succ:  l00000000004429E8 l0000000000442A00
l00000000004429E8:
	x0 = 0x00000000004DE000
	w0 = Mem0[x0 + 1712:word32]
	branch w0 == 0x00000000 l0000000000442A00
	// succ:  l00000000004429F4 l0000000000442A00
l00000000004429F4:
	x0 = 0x00000000004E1000
	w0 = Mem0[x0 + 1716:word32]
	branch w0 == 0x00000000 l0000000000442A04
	// succ:  l0000000000442A00 l0000000000442A04
l0000000000442A00:
	call fn0000000000440C18 (retsize: 0;)
	// succ:  l0000000000442A04
l0000000000442A04:
	x29 = Mem0[sp:word64]
	sp = sp + 8
	x30 = Mem0[sp:word64]
	sp = sp + 16
	// succ:  l0000000000442A08_thunk_fn0000000000442820
l0000000000442A08_thunk_fn0000000000442820:
	call fn0000000000442820 (retsize: 0;)
	return
	// succ:  notify_and_cleanup_exit
l0000000000442A0C:
	x29 = Mem0[sp:word64]
	sp = sp + 8
	x30 = Mem0[sp:word64]
	sp = sp + 16
	return
	// succ:  notify_and_cleanup_exit
notify_and_cleanup_exit:


// reap_dead_jobs
// Return size: 0
void reap_dead_jobs()
reap_dead_jobs_entry:
	// succ:  l0000000000442A14
l0000000000442A14:
	sp = fp
	sp = sp + -16
	Mem0[sp:word64] = x29
	sp = sp + 8
	Mem0[sp:word64] = x30
	x29 = x31 + 0x0000000000000000
	w0 = 0x00000000
	call fn000000000044099C (retsize: 0;)
	x29 = Mem0[sp:word64]
	sp = sp + 8
	x30 = Mem0[sp:word64]
	sp = sp + 16
	// succ:  l0000000000442A28_thunk_fn0000000000442820
l0000000000442A28_thunk_fn0000000000442820:
	call fn0000000000442820 (retsize: 0;)
	return
	// succ:  reap_dead_jobs_exit
reap_dead_jobs_exit:


// initialize_job_signals
// Return size: 0
void initialize_job_signals()
initialize_job_signals_entry:
	// succ:  l0000000000442A74
l0000000000442A74:
	sp = fp
	sp = sp + -32
	Mem0[sp:word64] = x29
	sp = sp + 8
	Mem0[sp:word64] = x30
	x29 = x31 + 0x0000000000000000
	x0 = 0x00000000004DE000
	w0 = Mem0[x0 + 1704:word32]
	v8 = sp + 16
	Mem0[v8:word64] = x19
	v8 = v8 + 8
	Mem0[v8:word64] = x20
	branch w0 != 0x00000000 l0000000000442AF4
	// succ:  l0000000000442A8C l0000000000442AF4
l0000000000442A8C:
	x0 = 0x00000000004D6000
	x0 = x0 + 0xFFFFFFFFFFFFFD08
	w0 = Mem0[x0 + 84:word32]
	branch w0 != 0x00000000 l0000000000442AA8
	// succ:  l0000000000442A9C l0000000000442AA8
l0000000000442A9C:
	v11 = sp + 16
	x19 = Mem0[v11:word64]
	v11 = v11 + 8
	x20 = Mem0[v11:word64]
	x29 = Mem0[sp:word64]
	sp = sp + 8
	x30 = Mem0[sp:word64]
	sp = sp + 32
	return
	// succ:  initialize_job_signals_exit
l0000000000442AA8:
	x20 = 0x0000000000444000
	x20 = x20 + 0x000000000000037C
	x1 = x20
	w0 = 0x00000014
	x19 = 0x00000000004E0000
	call set_signal_handler (retsize: 0;)
	x19 = x19 + 0xFFFFFFFFFFFFFFC8
	Mem0[x19 + -24:word64] = x0
	x1 = x20
	w0 = 0x00000015
	call set_signal_handler (retsize: 0;)
	Mem0[x19 + -16:word64] = x0
	x1 = x20
	w0 = 0x00000016
	call set_signal_handler (retsize: 0;)
	Mem0[x19 + -128:word64] = x0
	v13 = sp + 16
	x19 = Mem0[v13:word64]
	v13 = v13 + 8
	x20 = Mem0[v13:word64]
	x29 = Mem0[sp:word64]
	sp = sp + 8
	x30 = Mem0[sp:word64]
	sp = sp + 32
	return
	// succ:  initialize_job_signals_exit
l0000000000442AF4:
	x1 = 0x0000000000457000
	x1 = x1 + 0xFFFFFFFFFFFFFA6C
	w0 = 0x00000002
	call set_signal_handler (retsize: 0;)
	x1 = 0x0000000000000001
	w0 = 0x00000014
	call set_signal_handler (retsize: 0;)
	x1 = 0x0000000000000001
	w0 = 0x00000016
	call set_signal_handler (retsize: 0;)
	v14 = sp + 16
	x19 = Mem0[v14:word64]
	v14 = v14 + 8
	x20 = Mem0[v14:word64]
	x29 = Mem0[sp:word64]
	sp = sp + 8
	x30 = Mem0[sp:word64]
	sp = sp + 32
	w0 = 0x00000015
	x1 = 0x0000000000000001
	// succ:  l0000000000442B2C_thunk_set_signal_handler
l0000000000442B2C_thunk_set_signal_handler:
	call set_signal_handler (retsize: 0;)
	return
	// succ:  initialize_job_signals_exit
initialize_job_signals_exit:


// give_terminal_to
// Return size: 0
void give_terminal_to()
give_terminal_to_entry:
	// succ:  l0000000000442B60
l0000000000442B60:
	sp = fp
	sp = sp + -304
	Mem0[sp:word64] = x29
	sp = sp + 8
	Mem0[sp:word64] = x30
	x29 = x31 + 0x0000000000000000
	v8 = sp + 16
	Mem0[v8:word64] = x19
	v8 = v8 + 8
	Mem0[v8:word64] = x20
	x19 = 0x00000000004D6000
	x19 = x19 + 0xFFFFFFFFFFFFFD08
	w2 = Mem0[x19 + 84:word32]
	Mem0[sp + 32:word64] = x21
	w1 = w1 | w2
	w21 = w0
	w20 = 0x00000000
	branch w1 != 0x00000000 l0000000000442BA0
	// succ:  l0000000000442B8C l0000000000442BA0
l0000000000442B8C:
	w0 = w20
	x21 = Mem0[sp + 32:word64]
	v15 = sp + 16
	x19 = Mem0[v15:word64]
	v15 = v15 + 8
	x20 = Mem0[v15:word64]
	x29 = Mem0[sp:word64]
	sp = sp + 8
	x30 = Mem0[sp:word64]
	sp = sp + 304
	return
	// succ:  give_terminal_to_exit
l0000000000442BA0:
	x0 = x29 + 0x00000000000000B0
	sigemptyset(x0)
	sp = sp + 0xFFFFFFFFFFFFFFF8
	w1 = 0x00000016
	x0 = x29 + 0x00000000000000B0
	sigaddset(x0, x1)
	sp = sp + 0xFFFFFFFFFFFFFFF8
	w1 = 0x00000015
	x0 = x29 + 0x00000000000000B0
	sigaddset(x0, x1)
	sp = sp + 0xFFFFFFFFFFFFFFF8
	w1 = 0x00000014
	x0 = x29 + 0x00000000000000B0
	sigaddset(x0, x1)
	sp = sp + 0xFFFFFFFFFFFFFFF8
	w1 = 0x00000011
	x0 = x29 + 0x00000000000000B0
	sigaddset(x0, x1)
	sp = sp + 0xFFFFFFFFFFFFFFF8
	x0 = x29 + 0x0000000000000030
	sigemptyset(x0)
	sp = sp + 0xFFFFFFFFFFFFFFF8
	x1 = x29 + 0x00000000000000B0
	w0 = w20
	x2 = x29 + 0x0000000000000030
	sigprocmask(x0, x1, x2)
	sp = sp + 0xFFFFFFFFFFFFFFF8
	w0 = Mem0[x19 + 108:word32]
	w1 = w21
	tcsetpgrp(x0, x1)
	sp = sp + 0xFFFFFFFFFFFFFFF8
	branch (w0 & 0x00000000) == 0x00000000 l0000000000442C28
	// succ:  l0000000000442C00 l0000000000442C28
l0000000000442C00:
	x1 = x29 + 0x0000000000000030
	x2 = 0x0000000000000000
	w0 = 0x00000002
	Mem0[x19 + 120:word32] = w21
	sigprocmask(x0, x1, x2)
	sp = sp + 0xFFFFFFFFFFFFFFF8
	w0 = w20
	x21 = Mem0[sp + 32:word64]
	v19 = sp + 16
	x19 = Mem0[v19:word64]
	v19 = v19 + 8
	x20 = Mem0[v19:word64]
	x29 = Mem0[sp:word64]
	sp = sp + 8
	x30 = Mem0[sp:word64]
	sp = sp + 304
	return
	// succ:  give_terminal_to_exit
l0000000000442C28:
	__errno_location()
	sp = sp + 0xFFFFFFFFFFFFFFF8
	w21 = Mem0[x0:word32]
	x19 = x0
	x1 = x29 + 0x0000000000000030
	w0 = 0x00000002
	x2 = 0x0000000000000000
	sigprocmask(x0, x1, x2)
	sp = sp + 0xFFFFFFFFFFFFFFF8
	w20 = 0xFFFFFFFF
	Mem0[x19:word32] = w21
	goto l0000000000442B8C
	// succ:  l0000000000442B8C
give_terminal_to_exit:


// make_child
// Return size: 0
void make_child()
make_child_entry:
	// succ:  l0000000000442C50
l0000000000442C50:
	sp = fp
	sp = sp + -352
	Mem0[sp:word64] = x29
	sp = sp + 8
	Mem0[sp:word64] = x30
	x29 = x31 + 0x0000000000000000
	Mem0[sp + 64:word64] = x25
	x25 = x0
	x0 = x29 + 0x00000000000000D0
	v10 = sp + 48
	Mem0[v10:word64] = x23
	v10 = v10 + 8
	Mem0[v10:word64] = x24
	v13 = sp + 16
	Mem0[v13:word64] = x19
	v13 = v13 + 8
	Mem0[v13:word64] = x20
	w24 = w1
	v18 = sp + 32
	Mem0[v18:word64] = x21
	v18 = v18 + 8
	Mem0[v18:word64] = x22
	sigemptyset(x0)
	sp = sp + 0xFFFFFFFFFFFFFFF8
	w1 = 0x00000011
	x0 = x29 + 0x00000000000000D0
	sigaddset(x0, x1)
	sp = sp + 0xFFFFFFFFFFFFFFF8
	w1 = 0x00000002
	x0 = x29 + 0x00000000000000D0
	sigaddset(x0, x1)
	sp = sp + 0xFFFFFFFFFFFFFFF8
	x0 = x29 + 0x0000000000000050
	sigemptyset(x0)
	sp = sp + 0xFFFFFFFFFFFFFFF8
	x1 = x29 + 0x00000000000000D0
	x2 = x29 + 0x0000000000000050
	w0 = 0x00000000
	sigprocmask(x0, x1, x2)
	sp = sp + 0xFFFFFFFFFFFFFFF8
	x23 = 0x00000000004E0000
	x1 = x23 + 0xFFFFFFFFFFFFFFC8
	w2 = Mem0[x1 + -116:word32]
	branch w2 == 0x00000000 l0000000000443040
	// succ:  l0000000000442CB8 l0000000000443040
l0000000000442CB8:
	x0 = 0x00000000004D6000
	w0 = Mem0[x0 + 1672:word32]
	w31 = w0 + 0x00000001
	NZCV = cond(w31)
	branch Test(EQ,Z) l0000000000442CD8
	// succ:  l0000000000442CC8 l0000000000442CD8
l0000000000442CC8:
	branch w24 == 0x00000000 l0000000000442CD4
	// succ:  l0000000000442CCC l0000000000442CD4
l0000000000442CCC:
	NZCV = cond(w0 - w31)
	branch Test(LE,ZCV) l0000000000442CD8
	// succ:  l0000000000442CD4 l0000000000442CD8
l0000000000442CD4:
	call sync_buffered_stream (retsize: 0;)
	// succ:  l0000000000442CD8
l0000000000442CD8:
	x22 = 0x00000000004AD000
	w19 = 0x00000005
	w20 = 0x00000001
	x22 = x22 + 0x0000000000000728
	goto l0000000000442D24
	// succ:  l0000000000442D24
l0000000000442CEC:
	__errno_location()
	sp = sp + 0xFFFFFFFFFFFFFFF8
	w2 = Mem0[x0:word32]
	w0 = 0x00000000
	w31 = w2 - 0x0000000B
	NZCV = cond(w31)
	branch Test(NE,Z) l0000000000442EB8
	// succ:  l0000000000442D00 l0000000000442EB8
l0000000000442D00:
	w19 = w19 - 0x00000001
	NZCV = cond(w19)
	branch Test(EQ,Z) l0000000000442EB8
	// succ:  l0000000000442D08 l0000000000442EB8
l0000000000442D08:
	call fn00000000004420B8 (retsize: 0;)
	x0 = x22
	call sys_error (retsize: 0;)
	w0 = w20
	call sleep (retsize: 0;)
	branch w0 != 0x00000000 l0000000000442EB8
	// succ:  l0000000000442D20 l0000000000442EB8
l0000000000442D20:
l0000000000442D24:
	call fork (retsize: 0;)
	NZCV = cond(w0 - w31)
	w21 = w0
	branch Test(LT,NV) l0000000000442CEC
	// succ:  l0000000000442D34 l0000000000442CEC
l0000000000442D34:
	branch Test(EQ,Z) l0000000000442F4C
	// succ:  l0000000000442D38 l0000000000442F4C
l0000000000442D38:
	x19 = 0x00000000004D6000
	x1 = x19 + 0xFFFFFFFFFFFFFD08
	w0 = Mem0[x1 + 88:word32]
	x20 = 0x00000000004DF000
	w31 = w0 + 0x00000001
	NZCV = cond(w31)
	branch Test(NE,Z) l0000000000442F08
	// succ:  l0000000000442D50 l0000000000442F08
l0000000000442D50:
	Mem0[x1 + 88:word32] = w21
	// succ:  l0000000000442D54
l0000000000442D54:
	x0 = x19 + 0xFFFFFFFFFFFFFD08
	w1 = Mem0[x0 + 84:word32]
	x23 = x23 + 0xFFFFFFFFFFFFFFC8
	branch w1 == 0x00000000 l0000000000442F38
	// succ:  l0000000000442D64 l0000000000442F38
l0000000000442D64:
	w1 = Mem0[x23 + -100:word32]
	branch w1 == 0x00000000 l000000000044305C
	// succ:  l0000000000442D6C l000000000044305C
l0000000000442D6C:
	w0 = w21
	call setpgid (retsize: 0;)
	// succ:  l0000000000442D74
l0000000000442D74:
	x1 = 0x00000000004AD000
	x1 = x1 + 0x0000000000000510
	x0 = 0x0000000000000020
	w2 = 0x00000460
	call sh_xmalloc (retsize: 0;)
	x1 = x20 + 0xFFFFFFFFFFFFFEC8
	x4 = Mem0[x1 + 8:word64]
	x5 = x0
	Mem0[x0:word64] = x4
	Mem0[x0 + 8:word32] = w21
	Mem0[x0 + 12:word32] = 0x00000000
	w0 = 0x00000001
	Mem0[x5 + 16:word32] = w0
	Mem0[x5 + 24:word64] = x25
	Mem0[x1 + 8:word64] = x5
	x3 = x4
	branch x4 != 0x0000000000000000 l0000000000442DC0
	// succ:  l0000000000442DB8 l0000000000442DC0
l0000000000442DB8:
	goto l00000000004430CC
	// succ:  l00000000004430CC
l0000000000442DBC:
	x3 = x2
	// succ:  l0000000000442DC0
l0000000000442DC0:
	x2 = Mem0[x3:word64]
	x31 = x4 - x2
	NZCV = cond(x31)
	branch Test(NE,Z) l0000000000442DBC
	// succ:  l0000000000442DCC l0000000000442DBC
l0000000000442DCC:
	Mem0[x3:word64] = x5
	// succ:  l0000000000442DD0
l0000000000442DD0:
	branch w24 == 0x00000000 l0000000000442DDC
	// succ:  l0000000000442DD4 l0000000000442DDC
l0000000000442DD4:
	x0 = x19 + 0xFFFFFFFFFFFFFD08
	Mem0[x0 + 80:word32] = w21
	// succ:  l0000000000442DDC
l0000000000442DDC:
	x0 = x19 + 0xFFFFFFFFFFFFFD08
	w0 = Mem0[x0 + 92:word32]
	NZCV = cond(w0 - w31)
	branch Test(LE,ZCV) l0000000000442E4C
	// succ:  l0000000000442DEC l0000000000442E4C
l0000000000442DEC:
	w0 = w21
	w1 = 0x00000000
	x2 = x29 + 0x0000000000000150
	call fn000000000043F71C (retsize: 0;)
	w31 = w0 + 0x00000001
	NZCV = cond(w31)
	w22 = w0
	branch Test(EQ,Z) l0000000000442E4C
	// succ:  l0000000000442E08 l0000000000442E4C
l0000000000442E08:
	x1 = x20 + 0xFFFFFFFFFFFFFEC8
	x1 = Mem0[x1:word64]
	x1 = Mem0[x1 + (int64) ((int32) w0):word64]
	w1 = Mem0[x1 + 20:word32]
	w31 = w1 - 0x00000004
	NZCV = cond(w31)
	branch Test(EQ,Z) l00000000004430D4
	// succ:  l0000000000442E20 l00000000004430D4
l0000000000442E20:
	x1 = 0x00000000004AD000
	x1 = x1 + 0x0000000000000758
	w2 = 0x00000005
	x0 = 0x0000000000000000
	dcgettext(x0, x1, x2)
	sp = sp + 0xFFFFFFFFFFFFFFF8
	w1 = w21
	w2 = w22
	call internal_warning (retsize: 0;)
	x0 = Mem0[x29 + 336:word64]
	branch x0 == 0x0000000000000000 l0000000000442E4C
	// succ:  l0000000000442E48 l0000000000442E4C
l0000000000442E48:
	Mem0[x0 + 8:word32] = 0x00000000
	// succ:  l0000000000442E4C
l0000000000442E4C:
	x0 = x19 + 0xFFFFFFFFFFFFFD08
	x20 = x20 + 0xFFFFFFFFFFFFFEC8
	w2 = Mem0[x0 + 12:word32]
	w1 = Mem0[x20 + 32:word32]
	x0 = Mem0[x0:word64]
	w1 = w2 + w1
	NZCV = cond(x0 - (int64) ((int32) w1))
	branch Test(LE,ZCV) l0000000000443050
	// succ:  l0000000000442E6C l0000000000443050
l0000000000442E6C:
	x19 = x19 + 0xFFFFFFFFFFFFFD08
	w1 = Mem0[x19 + 20:word32]
	w0 = Mem0[x19 + 8:word32]
	w4 = w1 + 0x00000001
	w3 = w0 + 0x00000001
	x1 = x29 + 0x0000000000000050
	x2 = 0x0000000000000000
	w0 = 0x00000002
	Mem0[x19 + 112:word32] = w21
	Mem0[x19 + 20:word32] = w4
	Mem0[x19 + 8:word32] = w3
	sigprocmask(x0, x1, x2)
	sp = sp + 0xFFFFFFFFFFFFFFF8
	w0 = w21
	v38 = sp + 16
	x19 = Mem0[v38:word64]
	v38 = v38 + 8
	x20 = Mem0[v38:word64]
	v39 = sp + 32
	x21 = Mem0[v39:word64]
	v39 = v39 + 8
	x22 = Mem0[v39:word64]
	v40 = sp + 48
	x23 = Mem0[v40:word64]
	v40 = v40 + 8
	x24 = Mem0[v40:word64]
	x25 = Mem0[sp + 64:word64]
	x29 = Mem0[sp:word64]
	sp = sp + 8
	x30 = Mem0[sp:word64]
	sp = sp + 352
	return
	// succ:  make_child_exit
l0000000000442EB8:
	x0 = 0x00000000004AD000
	x0 = x0 + 0x0000000000000780
	call sys_error (retsize: 0;)
	x20 = 0x00000000004DF000
	call terminate_current_pipeline (retsize: 0;)
	x0 = x20 + 0xFFFFFFFFFFFFFEC8
	x0 = Mem0[x0 + 8:word64]
	branch x0 == 0x0000000000000000 l0000000000442EE4
	// succ:  l0000000000442ED8 l0000000000442EE4
l0000000000442ED8:
	x0 = x23 + 0xFFFFFFFFFFFFFFC8
	Mem0[x0 + -116:word32] = 0x00000000
	call start_pipeline (retsize: 0;)
	// succ:  l0000000000442EE4
l0000000000442EE4:
	w1 = 0x0000007E
	x0 = 0x00000000004E3000
	Mem0[x0 + 1200:word32] = w1
	x19 = 0x00000000004D6000
	call throw_to_top_level (retsize: 0;)
	x1 = x19 + 0xFFFFFFFFFFFFFD08
	w0 = Mem0[x1 + 88:word32]
	w31 = w0 + 0x00000001
	NZCV = cond(w31)
	branch Test(EQ,Z) l0000000000442D50
	// succ:  l0000000000442F08 l0000000000442D50
l0000000000442F08:
	w2 = Mem0[x1 + 92:word32]
	w31 = w2 + 0x00000001
	NZCV = cond(w31)
	branch Test(EQ,Z) l00000000004430AC
	// succ:  l0000000000442F14 l00000000004430AC
l0000000000442F14:
	branch w2 != 0x00000000 l0000000000442D54
	// succ:  l0000000000442F18 l0000000000442D54
l0000000000442F18:
	NZCV = cond(w0 - w21)
	branch Test(GT,NZV) l0000000000442D54
	// succ:  l0000000000442F20 l0000000000442D54
l0000000000442F20:
	w0 = 0x00000001
	Mem0[x1 + 92:word32] = w0
	x0 = x19 + 0xFFFFFFFFFFFFFD08
	w1 = Mem0[x0 + 84:word32]
	x23 = x23 + 0xFFFFFFFFFFFFFFC8
	branch w1 != 0x00000000 l0000000000442D64
	// succ:  l0000000000442F38 l0000000000442D64
l0000000000442F38:
	w1 = Mem0[x23 + -100:word32]
	branch w1 != 0x00000000 l0000000000442D74
	// succ:  l0000000000442F40 l0000000000442D74
l0000000000442F40:
	w0 = Mem0[x0 + 104:word32]
	Mem0[x23 + -100:word32] = w0
	goto l0000000000442D74
	// succ:  l0000000000442D74
l0000000000442F4C:
	call getpid (retsize: 0;)
	w20 = w0
	w0 = w21
	call unset_bash_input (retsize: 0;)
	x1 = 0x00000000004E3000
	x1 = x1 + 0xFFFFFFFFFFFFFBA8
	w0 = 0x00000002
	x2 = 0x0000000000000000
	sigprocmask(x0, x1, x2)
	sp = sp + 0xFFFFFFFFFFFFFFF8
	x19 = 0x00000000004D6000
	x0 = x19 + 0xFFFFFFFFFFFFFD08
	w1 = Mem0[x0 + 84:word32]
	branch w1 == 0x00000000 l0000000000443068
	// succ:  l0000000000442F80 l0000000000443068
l0000000000442F80:
	x1 = x23 + 0xFFFFFFFFFFFFFFC8
	w0 = Mem0[x1 + -100:word32]
	branch w0 != 0x00000000 l0000000000442F94
	// succ:  l0000000000442F8C l0000000000442F94
l0000000000442F8C:
	Mem0[x1 + -100:word32] = w20
	w0 = w20
	// succ:  l0000000000442F94
l0000000000442F94:
	x1 = x19 + 0xFFFFFFFFFFFFFD08
	w1 = Mem0[x1 + 104:word32]
	NZCV = cond(w1 - w0)
	branch Test(EQ,Z) l00000000004430E0
	// succ:  l0000000000442FA4 l00000000004430E0
l0000000000442FA4:
	call default_tty_job_signals (retsize: 0;)
	// succ:  l0000000000442FA8
l0000000000442FA8:
	x21 = x23 + 0xFFFFFFFFFFFFFFC8
	w1 = Mem0[x21 + -100:word32]
	w0 = w20
	call setpgid (retsize: 0;)
	branch (w0 & 0x00000000) == 0x00000000 l00000000004430E8
	// succ:  l0000000000442FBC l00000000004430E8
l0000000000442FBC:
	x23 = x23 + 0xFFFFFFFFFFFFFFC8
	branch w24 != 0x00000000 l00000000004430C4
	// succ:  l0000000000442FC4 l00000000004430C4
l0000000000442FC4:
	x1 = x19 + 0xFFFFFFFFFFFFFD08
	w0 = Mem0[x23 + -100:word32]
	w1 = Mem0[x1 + 104:word32]
	NZCV = cond(w0 - w1)
	branch Test(EQ,Z) l0000000000442FE4
	// succ:  l0000000000442FD8 l0000000000442FE4
l0000000000442FD8:
	x1 = 0x00000000004E3000
	w1 = Mem0[x1 + 1184:word32]
	branch (w1 & 0x00000001) == 0x00000000 l00000000004430BC
	// succ:  l0000000000442FE4 l00000000004430BC
l0000000000442FE4:
	NZCV = cond(w20 - w0)
	branch Test(NE,Z) l0000000000443080
	// succ:  l0000000000442FEC l0000000000443080
l0000000000442FEC:
	x20 = x19 + 0xFFFFFFFFFFFFFD08
	w0 = Mem0[x20 + 100:word32]
	branch (w0 & 0x00000000) == 0x00000000 l0000000000443004
	// succ:  l0000000000442FF8 l0000000000443004
l0000000000442FF8:
	close(x0)
	sp = sp + 0xFFFFFFFFFFFFFFF8
	w0 = 0xFFFFFFFF
	Mem0[x20 + 100:word32] = w0
	// succ:  l0000000000443004
l0000000000443004:
	x20 = x19 + 0xFFFFFFFFFFFFFD08
	w0 = Mem0[x20 + 96:word32]
	branch (w0 & 0x00000000) == 0x00000000 l0000000000443028
	// succ:  l0000000000443010 l0000000000443028
l0000000000443010:
	goto l0000000000443080
	// succ:  l0000000000443080
l0000000000443014:
	__errno_location()
	sp = sp + 0xFFFFFFFFFFFFFFF8
	w0 = Mem0[x0:word32]
	w31 = w0 - 0x00000004
	NZCV = cond(w31)
	branch Test(NE,Z) l0000000000443080
	// succ:  l0000000000443024 l0000000000443080
l0000000000443024:
	w0 = Mem0[x20 + 96:word32]
	// succ:  l0000000000443028
l0000000000443028:
	x1 = x29 + 0x0000000000000150
	x2 = 0x0000000000000001
	read(x0, x1, x2)
	sp = sp + 0xFFFFFFFFFFFFFFF8
	x31 = x0 + 0x0000000000000001
	NZCV = cond(x31)
	branch Test(EQ,Z) l0000000000443014
	// succ:  l000000000044303C l0000000000443014
l000000000044303C:
	goto l0000000000443080
	// succ:  l0000000000443080
l0000000000443040:
	w0 = 0x00000001
	Mem0[x1 + -116:word32] = w0
	call start_pipeline (retsize: 0;)
	goto l0000000000442CB8
	// succ:  l0000000000442CB8
l0000000000443050:
	w0 = w21
	call fn000000000043FC18 (retsize: 0;)
	goto l0000000000442E6C
	// succ:  l0000000000442E6C
l000000000044305C:
	Mem0[x23 + -100:word32] = w21
	w1 = w21
	goto l0000000000442D6C
	// succ:  l0000000000442D6C
l0000000000443068:
	x23 = x23 + 0xFFFFFFFFFFFFFFC8
	w1 = Mem0[x23 + -100:word32]
	branch w1 != 0x00000000 l000000000044307C
	// succ:  l0000000000443074 l000000000044307C
l0000000000443074:
	w0 = Mem0[x0 + 104:word32]
	Mem0[x23 + -100:word32] = w0
	// succ:  l000000000044307C
l000000000044307C:
	call default_tty_job_signals (retsize: 0;)
	// succ:  l0000000000443080
l0000000000443080:
	x0 = x19 + 0xFFFFFFFFFFFFFD08
	x0 = x0 + 0x0000000000000060
	call sh_closepipe (retsize: 0;)
	w21 = 0x00000000
	w0 = w21
	v41 = sp + 16
	x19 = Mem0[v41:word64]
	v41 = v41 + 8
	x20 = Mem0[v41:word64]
	v42 = sp + 32
	x21 = Mem0[v42:word64]
	v42 = v42 + 8
	x22 = Mem0[v42:word64]
	v43 = sp + 48
	x23 = Mem0[v43:word64]
	v43 = v43 + 8
	x24 = Mem0[v43:word64]
	x25 = Mem0[sp + 64:word64]
	x29 = Mem0[sp:word64]
	sp = sp + 8
	x30 = Mem0[sp:word64]
	sp = sp + 352
	return
	// succ:  make_child_exit
l00000000004430AC:
	NZCV = cond(w0 - w21)
	branch Test(LE,ZCV) l0000000000442D54
	// succ:  l00000000004430B4 l0000000000442D54
l00000000004430B4:
	Mem0[x1 + 92:word32] = 0x00000000
	goto l0000000000442D54
	// succ:  l0000000000442D54
l00000000004430BC:
	w1 = w24
	call give_terminal_to (retsize: 0;)
	// succ:  l00000000004430C4
l00000000004430C4:
	w0 = Mem0[x23 + -100:word32]
	goto l0000000000442FE4
	// succ:  l0000000000442FE4
l00000000004430CC:
	Mem0[x5:word64] = x5
	goto l0000000000442DD0
	// succ:  l0000000000442DD0
l00000000004430D4:
	w1 = 0x00000002
	call delete_job (retsize: 0;)
	goto l0000000000442E4C
	// succ:  l0000000000442E4C
l00000000004430E0:
	call ignore_tty_job_signals (retsize: 0;)
	goto l0000000000442FA8
	// succ:  l0000000000442FA8
l00000000004430E8:
	x1 = 0x00000000004AD000
	x1 = x1 + 0x0000000000000738
	w2 = 0x00000005
	x0 = 0x0000000000000000
	dcgettext(x0, x1, x2)
	sp = sp + 0xFFFFFFFFFFFFFFF8
	v44 = Mem0[x21 + -100:int32]
	x2 = (word64) v44
make_child_exit:


// wait_for
// Return size: 0
void wait_for()
wait_for_entry:
	// succ:  l000000000044310C
l000000000044310C:
	sp = fp
	sp = sp + -368
	Mem0[sp:word64] = x29
	sp = sp + 8
	Mem0[sp:word64] = x30
	x29 = x31 + 0x0000000000000000
	v8 = sp + 48
	Mem0[v8:word64] = x23
	v8 = v8 + 8
	Mem0[v8:word64] = x24
	w24 = w0
	x0 = x29 + 0x00000000000000E0
	v14 = sp + 64
	Mem0[v14:word64] = x25
	v14 = v14 + 8
	Mem0[v14:word64] = x26
	v17 = sp + 80
	Mem0[v17:word64] = x27
	v17 = v17 + 8
	Mem0[v17:word64] = x28
	v20 = sp + 16
	Mem0[v20:word64] = x19
	v20 = v20 + 8
	Mem0[v20:word64] = x20
	v23 = sp + 32
	Mem0[v23:word64] = x21
	v23 = v23 + 8
	Mem0[v23:word64] = x22
	sigemptyset(x0)
	sp = sp + 0xFFFFFFFFFFFFFFF8
	w1 = 0x00000011
	x0 = x29 + 0x00000000000000E0
	sigaddset(x0, x1)
	sp = sp + 0xFFFFFFFFFFFFFFF8
	x0 = x29 + 0x0000000000000060
	sigemptyset(x0)
	sp = sp + 0xFFFFFFFFFFFFFFF8
	x1 = x29 + 0x00000000000000E0
	w0 = 0x00000000
	x2 = x29 + 0x0000000000000060
	sigprocmask(x0, x1, x2)
	sp = sp + 0xFFFFFFFFFFFFFFF8
	x26 = 0x00000000004D6000
	x27 = 0x00000000004E0000
	x0 = x26 + 0xFFFFFFFFFFFFFD08
	x1 = x27 + 0xFFFFFFFFFFFFFFC8
	w0 = Mem0[x0 + 84:word32]
	Mem0[x1 + -216:word32] = 0x00000000
	branch w0 == 0x00000000 l00000000004433B4
	// succ:  l0000000000443174 l00000000004433B4
l0000000000443174:
	x0 = 0x00000000004E3000
	w0 = Mem0[x0 + 1184:word32]
	branch (w0 & 0x00000004) == 0x00000000 l00000000004433B4
	// succ:  l0000000000443180 l00000000004433B4
l0000000000443180:
	x25 = 0x00000000004DE000
	w0 = Mem0[x25 + 1704:word32]
	x21 = 0x00000000004E1000
	branch w0 == 0x00000000 l00000000004431A0
	// succ:  l0000000000443190 l00000000004431A0
l0000000000443190:
	x0 = x26 + 0xFFFFFFFFFFFFFD08
	w0 = Mem0[x0 + 84:word32]
	x21 = 0x00000000004E1000
	branch w0 == 0x00000000 l00000000004434C4
	// succ:  l00000000004431A0 l00000000004434C4
l00000000004431A0:
	w0 = Mem0[x21 + 644:word32]
	branch w0 != 0x00000000 l0000000000443540
	// succ:  l00000000004431A8 l0000000000443540
l00000000004431A8:
	x0 = 0x000000000047B000
	x0 = x0 + 0x0000000000000318
	x23 = 0x00000000004DF000
	x28 = 0x00000000004E1000
	w19 = 0xFFFFFFFF
	Mem0[x29 + 352:word64] = x0
	x23 = x23 + 0xFFFFFFFFFFFFFEC8
	x28 = x28 + 0x0000000000000278
	// succ:  l00000000004431C8
l00000000004431C8:
	w0 = w24
	w1 = 0x00000000
	x2 = 0x0000000000000000
	call fn000000000043F7B0 (retsize: 0;)
	x20 = x0
	branch x0 == 0x0000000000000000 l00000000004434E0
	// succ:  l00000000004431E0 l00000000004434E0
l00000000004431E0:
	w31 = w19 + 0x00000001
	NZCV = cond(w31)
	branch Test(EQ,Z) l0000000000443484
	// succ:  l00000000004431E8 l0000000000443484
l00000000004431E8:
	w0 = Mem0[x0 + 16:word32]
	w31 = w0 - 0x00000001
	NZCV = cond(w31)
	branch Test(EQ,Z) l00000000004433E4
	// succ:  l00000000004431F4 l00000000004433E4
l00000000004431F4:
	x2 = Mem0[x23:word64]
	x0 = Mem0[x2 + (int64) ((int32) w19):word64]
	w2 = Mem0[x0 + 20:word32]
	w31 = w2 - 0x00000001
	NZCV = cond(w31)
	branch Test(EQ,Z) l00000000004433E4
	// succ:  l0000000000443208 l00000000004433E4
l0000000000443208:
	w2 = Mem0[x25 + 1704:word32]
	branch w2 == 0x00000000 l000000000044322C
	// succ:  l0000000000443210 l000000000044322C
l0000000000443210:
	x0 = x26 + 0xFFFFFFFFFFFFFD08
	w0 = Mem0[x0 + 84:word32]
	branch w0 != 0x00000000 l000000000044322C
	// succ:  l000000000044321C l000000000044322C
l000000000044321C:
	w0 = Mem0[x21 + 644:word32]
	branch w0 != 0x00000000 l00000000004434B8
	// succ:  l0000000000443224 l00000000004434B8
l0000000000443224:
	w0 = Mem0[x28:word32]
	branch w0 != 0x00000000 l00000000004434B0
	// succ:  l000000000044322C l00000000004434B0
l000000000044322C:
	w2 = Mem0[x21 + 644:word32]
	branch w2 != 0x00000000 l0000000000443478
	// succ:  l0000000000443234 l0000000000443478
l0000000000443234:
	w2 = Mem0[x20 + 16:word32]
	w31 = w2 - 0x00000001
	NZCV = cond(w31)
	branch Test(EQ,Z) l00000000004431C8
	// succ:  l0000000000443240 l00000000004431C8
l0000000000443240:
	w31 = w19 + 0x00000001
	NZCV = cond(w31)
	branch Test(EQ,Z) l000000000044354C
	// succ:  l0000000000443248 l000000000044354C
l0000000000443248:
	x2 = Mem0[x23:word64]
	x2 = Mem0[x2 + (int64) ((int32) w19):word64]
	w22 = Mem0[x2 + 20:word32]
	w31 = w22 - 0x00000001
	NZCV = cond(w31)
	branch Test(EQ,Z) l00000000004431C8
	// succ:  l000000000044325C l00000000004431C8
l000000000044325C:
	w0 = w19
	call fn000000000044007C (retsize: 0;)
	call fn000000000043FF38 (retsize: 0;)
	w23 = w0
	w0 = w19
	call job_exit_signal (retsize: 0;)
	x1 = 0x00000000004E3000
	Mem0[x1 + 860:word32] = w0
	w31 = w22 - 0x00000002
	NZCV = cond(w31)
	w0 = Mem0[x20 + 12:word32]
	branch Test(EQ,Z) l0000000000443588
	// succ:  l0000000000443288 l0000000000443588
l0000000000443288:
	w1 = w0 & 0x000000FF
	w31 = w1 - 0x0000007F
	NZCV = cond(w31)
	branch Test(EQ,Z) l0000000000443588
	// succ:  l0000000000443294 l0000000000443588
l0000000000443294:
	w31 = w19 + 0x00000001
	NZCV = cond(w31)
	branch Test(EQ,Z) l00000000004436BC
	// succ:  l000000000044329C l00000000004436BC
l000000000044329C:
	x21 = 0x00000000004DF000
	x0 = x21 + 0xFFFFFFFFFFFFFEC8
	x0 = Mem0[x0:word64]
l0000000000443380:
	x1 = x29 + 0x0000000000000060
	x2 = 0x0000000000000000
	w0 = 0x00000002
	sigprocmask(x0, x1, x2)
	sp = sp + 0xFFFFFFFFFFFFFFF8
	call fn000000000043FD68 (retsize: 0;)
	w0 = w23
	v34 = sp + 16
	x19 = Mem0[v34:word64]
	v34 = v34 + 8
	x20 = Mem0[v34:word64]
	v35 = sp + 32
	x21 = Mem0[v35:word64]
	v35 = v35 + 8
	x22 = Mem0[v35:word64]
	v36 = sp + 48
	x23 = Mem0[v36:word64]
	v36 = v36 + 8
	x24 = Mem0[v36:word64]
	v37 = sp + 64
	x25 = Mem0[v37:word64]
	v37 = v37 + 8
	x26 = Mem0[v37:word64]
	v38 = sp + 80
	x27 = Mem0[v38:word64]
	v38 = v38 + 8
	x28 = Mem0[v38:word64]
	x29 = Mem0[sp:word64]
	sp = sp + 8
	x30 = Mem0[sp:word64]
	sp = sp + 368
	return
	// succ:  wait_for_exit
l00000000004433B4:
	x1 = 0x000000000043F000
	x1 = x1 + 0xFFFFFFFFFFFFFE18
	w0 = 0x00000002
	call set_signal_handler (retsize: 0;)
	x1 = x0
	x0 = x26 + 0xFFFFFFFFFFFFFD08
	Mem0[x0 + 72:word64] = x1
	x31 = x1 - 0x0000000000000001
	NZCV = cond(x31)
	branch Test(NE,Z) l0000000000443180
	// succ:  l00000000004433D8 l0000000000443180
l00000000004433D8:
	w0 = 0x00000002
	call set_signal_handler (retsize: 0;)
	goto l0000000000443180
	// succ:  l0000000000443180
l00000000004433E4:
	w1 = 0x00000001
	x22 = x27 + 0xFFFFFFFFFFFFFFC8
	w0 = w1
	Mem0[x22 + -120:word32] = w1
	call fn00000000004420B8 (retsize: 0;)
	w31 = w0 + 0x00000001
	NZCV = cond(w31)
	Mem0[x22 + -120:word32] = 0x00000000
	w1 = w0
	branch Test(NE,Z) l0000000000443208
	// succ:  l0000000000443408 l0000000000443208
l0000000000443408:
	Mem0[x29 + 360:word64] = x1
	__errno_location()
	sp = sp + 0xFFFFFFFFFFFFFFF8
	w0 = Mem0[x0:word32]
	x1 = Mem0[x29 + 360:word64]
	w31 = w0 - 0x0000000A
	NZCV = cond(w31)
	branch Test(NE,Z) l0000000000443208
	// succ:  l0000000000443420 l0000000000443208
l0000000000443420:
	x0 = 0x00000000004E1000
	x0 = Mem0[x0 + 1688:word64]
	x2 = Mem0[x29 + 352:word64]
	x31 = x0 - x2
	NZCV = cond(x31)
	branch Test(EQ,Z) l00000000004436F0
	// succ:  l0000000000443434 l00000000004436F0
l0000000000443434:
	x0 = x26 + 0xFFFFFFFFFFFFFD08
	Mem0[x20 + 16:word32] = 0x00000000
	Mem0[x20 + 12:word32] = 0x00000000
	Mem0[x0 + 8:word32] = 0x00000000
	w31 = w19 + 0x00000001
	NZCV = cond(w31)
	branch Test(EQ,Z) l0000000000443208
	// succ:  l000000000044344C l0000000000443208
l000000000044344C:
	x2 = Mem0[x23:word64]
	w1 = Mem0[x0 + 12:word32]
	x3 = Mem0[x2 + (int64) ((int32) w19):word64]
	w2 = Mem0[x0 + 44:word32]
	w4 = 0x00000004
	Mem0[x3 + 20:word32] = w4
	w1 = w1 + 0x00000001
	w2 = w2 + 0x00000001
	Mem0[x0 + 12:word32] = w1
	Mem0[x0 + 44:word32] = w2
	goto l0000000000443208
	// succ:  l0000000000443208
l0000000000443478:
	w0 = Mem0[x21 + 644:word32]
	call termsig_handler (retsize: 0;)
	goto l0000000000443234
	// succ:  l0000000000443234
l0000000000443484:
	w0 = w24
	w1 = 0x00000000
	x2 = 0x0000000000000000
	call fn000000000043F71C (retsize: 0;)
	w19 = w0
	w0 = Mem0[x20 + 16:word32]
	w31 = w0 - 0x00000001
	NZCV = cond(w31)
	branch Test(EQ,Z) l00000000004433E4
	// succ:  l00000000004434A4 l00000000004433E4
l00000000004434A4:
	w31 = w19 + 0x00000001
	NZCV = cond(w31)
	branch Test(NE,Z) l00000000004431F4
	// succ:  l00000000004434AC l00000000004431F4
l00000000004434AC:
	goto l0000000000443208
	// succ:  l0000000000443208
l00000000004434B0:
	call throw_to_top_level (retsize: 0;)
	goto l000000000044322C
	// succ:  l000000000044322C
l00000000004434B8:
	w0 = Mem0[x21 + 644:word32]
	call termsig_handler (retsize: 0;)
	goto l0000000000443224
	// succ:  l0000000000443224
l00000000004434C4:
	w0 = Mem0[x21 + 644:word32]
	branch w0 != 0x00000000 l00000000004435C0
	// succ:  l00000000004434CC l00000000004435C0
l00000000004434CC:
	x0 = 0x00000000004E1000
	w0 = Mem0[x0 + 632:word32]
	branch w0 == 0x00000000 l00000000004431A0
	// succ:  l00000000004434D8 l00000000004431A0
l00000000004434D8:
	call throw_to_top_level (retsize: 0;)
	goto l00000000004431A0
	// succ:  l00000000004431A0
l00000000004434E0:
	x26 = x26 + 0xFFFFFFFFFFFFFD08
	w0 = Mem0[x26 + 104:word32]
	w1 = w20
	call give_terminal_to (retsize: 0;)
	x1 = x29 + 0x0000000000000060
	x2 = x20
	w0 = 0x00000002
	sigprocmask(x0, x1, x2)
	sp = sp + 0xFFFFFFFFFFFFFFF8
	x1 = 0x00000000004AD000
	w2 = 0x00000005
	x1 = x1 + 0x0000000000000788
	x0 = x20
	dcgettext(x0, x1, x2)
	sp = sp + 0xFFFFFFFFFFFFFFF8
l0000000000443540:
	w0 = Mem0[x21 + 644:word32]
	call termsig_handler (retsize: 0;)
	goto l00000000004431A8
	// succ:  l00000000004431A8
l000000000044354C:
	w20 = Mem0[x20 + 12:word32]
	w0 = w20
	call fn000000000043FF38 (retsize: 0;)
	w23 = w0
	w0 = w20 & 0x0000007F
	w1 = w0 + 0x00000001
l0000000000443588:
l00000000004435C0:
	w0 = Mem0[x21 + 644:word32]
	call termsig_handler (retsize: 0;)
	goto l00000000004434CC
	// succ:  l00000000004434CC
l00000000004436BC:
	x26 = x26 + 0xFFFFFFFFFFFFFD08
	w0 = Mem0[x26 + 104:word32]
	w1 = 0x00000000
	call give_terminal_to (retsize: 0;)
	goto l0000000000443380
	// succ:  l0000000000443380
l00000000004436F0:
	w23 = w1
	goto l0000000000443380
	// succ:  l0000000000443380
wait_for_exit:


// wait_for_single_pid
// Return size: 0
void wait_for_single_pid()
wait_for_single_pid_entry:
	// succ:  l0000000000443734
l0000000000443734:
	sp = fp
	sp = sp + -288
	Mem0[sp:word64] = x29
	sp = sp + 8
	Mem0[sp:word64] = x30
	x29 = x31 + 0x0000000000000000
	v8 = sp + 16
	Mem0[v8:word64] = x19
	v8 = v8 + 8
	Mem0[v8:word64] = x20
	w19 = w0
	x0 = x29 + 0x00000000000000A0
	sigemptyset(x0)
	sp = sp + 0xFFFFFFFFFFFFFFF8
	w1 = 0x00000011
	x0 = x29 + 0x00000000000000A0
	sigaddset(x0, x1)
	sp = sp + 0xFFFFFFFFFFFFFFF8
	x0 = x29 + 0x0000000000000020
	sigemptyset(x0)
	sp = sp + 0xFFFFFFFFFFFFFFF8
	x1 = x29 + 0x00000000000000A0
	x2 = x29 + 0x0000000000000020
	w0 = 0x00000000
	sigprocmask(x0, x1, x2)
	sp = sp + 0xFFFFFFFFFFFFFFF8
	w1 = 0x00000000
	x2 = 0x0000000000000000
	w0 = w19
	call fn000000000043F7B0 (retsize: 0;)
	x20 = x0
	x1 = x29 + 0x0000000000000020
	w0 = 0x00000002
	x2 = 0x0000000000000000
	sigprocmask(x0, x1, x2)
	sp = sp + 0xFFFFFFFFFFFFFFF8
	branch x20 == 0x0000000000000000 l000000000044387C
	// succ:  l0000000000443798 l000000000044387C
l0000000000443798:
	w0 = w19
	call wait_for (retsize: 0;)
	w20 = w0
	x0 = x29 + 0x00000000000000A0
	sigemptyset(x0)
	sp = sp + 0xFFFFFFFFFFFFFFF8
	w1 = 0x00000011
	x0 = x29 + 0x00000000000000A0
	sigaddset(x0, x1)
	sp = sp + 0xFFFFFFFFFFFFFFF8
	x0 = x29 + 0x0000000000000020
	sigemptyset(x0)
	sp = sp + 0xFFFFFFFFFFFFFFF8
	x1 = x29 + 0x00000000000000A0
	x2 = x29 + 0x0000000000000020
	w0 = 0x00000000
	sigprocmask(x0, x1, x2)
	sp = sp + 0xFFFFFFFFFFFFFFF8
	w0 = w19
	w1 = 0x00000000
	x2 = 0x0000000000000000
	call fn000000000043F71C (retsize: 0;)
	w31 = w0 + 0x00000001
	NZCV = cond(w31)
	branch Test(EQ,Z) l0000000000443808
	// succ:  l00000000004437E8 l0000000000443808
l00000000004437E8:
	x1 = 0x00000000004DF000
	x1 = x1 + 0xFFFFFFFFFFFFFEC8
	x1 = Mem0[x1:word64]
	x1 = Mem0[x1 + (int64) ((int32) w0):word64]
	branch x1 == 0x0000000000000000 l0000000000443808
	// succ:  l00000000004437FC l0000000000443808
l00000000004437FC:
	w0 = Mem0[x1 + 20:word32]
	w31 = w0 - 0x00000004
	NZCV = cond(w31)
	branch Test(EQ,Z) l0000000000443850
	// succ:  l0000000000443808 l0000000000443850
l0000000000443808:
	w0 = 0x00000002
	x1 = x29 + 0x0000000000000020
	x2 = 0x0000000000000000
	sigprocmask(x0, x1, x2)
	sp = sp + 0xFFFFFFFFFFFFFFF8
	x0 = 0x00000000004DE000
	w0 = Mem0[x0 + 1716:word32]
	branch w0 != 0x00000000 l0000000000443834
	// succ:  l0000000000443824 l0000000000443834
l0000000000443824:
	w0 = w20
	v19 = sp + 16
	x19 = Mem0[v19:word64]
	v19 = v19 + 8
	x20 = Mem0[v19:word64]
	x29 = Mem0[sp:word64]
	sp = sp + 8
	x30 = Mem0[sp:word64]
	sp = sp + 288
	return
	// succ:  wait_for_single_pid_exit
l0000000000443834:
	call fn0000000000442820 (retsize: 0;)
	w0 = w19
	call fn000000000043FC18 (retsize: 0;)
	w0 = w20
	v21 = sp + 16
	x19 = Mem0[v21:word64]
	v21 = v21 + 8
	x20 = Mem0[v21:word64]
	x29 = Mem0[sp:word64]
	sp = sp + 8
	x30 = Mem0[sp:word64]
	sp = sp + 288
	return
	// succ:  wait_for_single_pid_exit
l0000000000443850:
	w0 = Mem0[x1 + 24:word32]
	x2 = 0x0000000000000000
	w0 = w0 | 0x00000002
	Mem0[x1 + 24:word32] = w0
	w0 = 0x00000002
	x1 = x29 + 0x0000000000000020
	sigprocmask(x0, x1, x2)
	sp = sp + 0xFFFFFFFFFFFFFFF8
	x0 = 0x00000000004DE000
	w0 = Mem0[x0 + 1716:word32]
	branch w0 == 0x00000000 l0000000000443824
	// succ:  l0000000000443878 l0000000000443824
l0000000000443878:
	goto l0000000000443834
	// succ:  l0000000000443834
l000000000044387C:
	x0 = 0x00000000004DF000
	x0 = x0 + 0xFFFFFFFFFFFFFEC8
	x2 = Mem0[x0 + 16:word64]
	branch x2 != 0x0000000000000000 l0000000000443898
	// succ:  l000000000044388C l0000000000443898
l000000000044388C:
	goto l00000000004438AC
	// succ:  l00000000004438AC
l0000000000443890:
	x2 = Mem0[x2:word64]
	branch x2 == 0x0000000000000000 l00000000004438AC
	// succ:  l0000000000443898 l00000000004438AC
l0000000000443898:
	w0 = Mem0[x2 + 8:word32]
	NZCV = cond(w19 - w0)
	branch Test(NE,Z) l0000000000443890
	// succ:  l00000000004438A4 l0000000000443890
l00000000004438A4:
	w20 = Mem0[x2 + 12:word32]
	branch (w20 & 0x00000000) == 0x00000000 l0000000000443824
	// succ:  l00000000004438AC l0000000000443824
l00000000004438AC:
	x1 = 0x00000000004AD000
	w2 = 0x00000005
	x1 = x1 + 0x00000000000007B0
	x0 = 0x0000000000000000
	dcgettext(x0, x1, x2)
	sp = sp + 0xFFFFFFFFFFFFFFF8
wait_for_single_pid_exit:


// wait_for_background_pids
// Return size: 0
void wait_for_background_pids()
wait_for_background_pids_entry:
	// succ:  l00000000004438DC
l00000000004438DC:
	sp = fp
	x31 = x31 - 0x0000000000000200
	sp = sp + -64
	Mem0[sp:word64] = x29
	sp = sp + 8
	Mem0[sp:word64] = x30
	x29 = x31 + 0x0000000000000000
	v8 = sp + 32
	Mem0[v8:word64] = x21
	v8 = v8 + 8
	Mem0[v8:word64] = x22
	v11 = sp + 48
	Mem0[v11:word64] = x23
	v11 = v11 + 8
	Mem0[v11:word64] = x24
	x21 = 0x00000000004E1000
	x23 = 0x00000000004DF000
	x24 = 0x00000000004E1000
	v14 = sp + 16
	Mem0[v14:word64] = x19
	v14 = v14 + 8
	Mem0[v14:word64] = x20
	x22 = 0x00000000004D6000
	x23 = x23 + 0xFFFFFFFFFFFFFEC8
	x21 = x21 + 0x0000000000000284
	x24 = x24 + 0x0000000000000278
	// succ:  l0000000000443910
l0000000000443910:
	x0 = x29 + 0x00000000000001C0
	sigemptyset(x0)
	sp = sp + 0xFFFFFFFFFFFFFFF8
	w1 = 0x00000011
	x0 = x29 + 0x00000000000001C0
	sigaddset(x0, x1)
	sp = sp + 0xFFFFFFFFFFFFFFF8
	x0 = x29 + 0x0000000000000140
	sigemptyset(x0)
	sp = sp + 0xFFFFFFFFFFFFFFF8
	w0 = 0x00000000
	x1 = x29 + 0x00000000000001C0
	x2 = x29 + 0x0000000000000140
	sigprocmask(x0, x1, x2)
	sp = sp + 0xFFFFFFFFFFFFFFF8
	x0 = x22 + 0xFFFFFFFFFFFFFD08
	w4 = Mem0[x0 + 28:word32]
	NZCV = cond(w4 - w31)
	branch Test(LE,ZCV) l0000000000443ABC
	// succ:  l000000000044394C l0000000000443ABC
l000000000044394C:
	x2 = Mem0[x23:word64]
	w0 = 0x00000000
	goto l0000000000443964
	// succ:  l0000000000443964
l0000000000443958:
	w0 = w0 + 0x00000001
	NZCV = cond(w0 - w4)
	branch Test(EQ,Z) l0000000000443A84
	// succ:  l0000000000443964 l0000000000443A84
l0000000000443964:
	x1 = Mem0[x2:word64]
	x2 = x2 + 0x0000000000000008
	branch x1 == 0x0000000000000000 l0000000000443958
	// succ:  l0000000000443970 l0000000000443958
l0000000000443970:
	w3 = Mem0[x1 + 20:word32]
	w31 = w3 - 0x00000001
	NZCV = cond(w31)
	branch Test(NE,Z) l0000000000443958
	// succ:  l000000000044397C l0000000000443958
l000000000044397C:
	w1 = Mem0[x1 + 24:word32]
	branch (w1 & 0x00000001) == 0x00000000 l0000000000443958
	// succ:  l0000000000443984 l0000000000443958
l0000000000443984:
	call fn0000000000440954 (retsize: 0;)
	w20 = Mem0[x0 + 8:word32]
	x1 = x29 + 0x0000000000000140
	w0 = 0x00000002
	x2 = 0x0000000000000000
	sigprocmask(x0, x1, x2)
	sp = sp + 0xFFFFFFFFFFFFFFF8
	w0 = Mem0[x21:word32]
	branch w0 != 0x00000000 l0000000000443A78
	// succ:  l00000000004439A4 l0000000000443A78
l00000000004439A4:
	w0 = Mem0[x24:word32]
	branch w0 != 0x00000000 l0000000000443A70
	// succ:  l00000000004439AC l0000000000443A70
l00000000004439AC:
	__errno_location()
	sp = sp + 0xFFFFFFFFFFFFFFF8
	Mem0[x0:word32] = 0x00000000
	x19 = x0
	w0 = w20
	call wait_for_single_pid (retsize: 0;)
	w31 = w0 + 0x00000001
	NZCV = cond(w31)
	branch Test(NE,Z) l0000000000443910
	// succ:  l00000000004439C8 l0000000000443910
l00000000004439C8:
	w0 = Mem0[x19:word32]
	w31 = w0 - 0x0000000A
	NZCV = cond(w31)
	branch Test(NE,Z) l0000000000443910
	// succ:  l00000000004439D4 l0000000000443910
l00000000004439D4:
	x19 = x22 + 0xFFFFFFFFFFFFFD08
	w0 = Mem0[x19 + 28:word32]
	branch w0 == 0x00000000 l0000000000443910
	// succ:  l00000000004439E0 l0000000000443910
l00000000004439E0:
	x0 = x29 + 0x00000000000000C0
	sigemptyset(x0)
	sp = sp + 0xFFFFFFFFFFFFFFF8
	w1 = 0x00000011
	x0 = x29 + 0x00000000000000C0
	sigaddset(x0, x1)
	sp = sp + 0xFFFFFFFFFFFFFFF8
	x0 = x29 + 0x0000000000000040
	sigemptyset(x0)
	sp = sp + 0xFFFFFFFFFFFFFFF8
	w0 = 0x00000000
	x1 = x29 + 0x00000000000000C0
	x2 = x29 + 0x0000000000000040
	sigprocmask(x0, x1, x2)
	sp = sp + 0xFFFFFFFFFFFFFFF8
	w3 = Mem0[x19 + 28:word32]
	NZCV = cond(w3 - w31)
	branch Test(LE,ZCV) l0000000000443A5C
	// succ:  l0000000000443A18 l0000000000443A5C
l0000000000443A18:
	x1 = Mem0[x23:word64]
	w3 = w3 - 0x00000001
	x0 = x1 + 0x0000000000000008
	w2 = Mem0[x19 + 44:word32]
	x3 = x0 + (uint64) ((word32) w3)
	w4 = 0x00000004
	goto l0000000000443A38
	// succ:  l0000000000443A38
l0000000000443A34:
	x0 = x0 + 0x0000000000000008
	// succ:  l0000000000443A38
l0000000000443A38:
	x1 = Mem0[x1:word64]
	x31 = x0 - x3
	NZCV = cond(x31)
	branch x1 == 0x0000000000000000 l0000000000443A4C
	// succ:  l0000000000443A44 l0000000000443A4C
l0000000000443A44:
	Mem0[x1 + 20:word32] = w4
	w2 = w2 + 0x00000001
	// succ:  l0000000000443A4C
l0000000000443A4C:
	x1 = x0
	branch Test(NE,Z) l0000000000443A34
	// succ:  l0000000000443A54 l0000000000443A34
l0000000000443A54:
	x0 = x22 + 0xFFFFFFFFFFFFFD08
	Mem0[x0 + 44:word32] = w2
	// succ:  l0000000000443A5C
l0000000000443A5C:
	x1 = x29 + 0x0000000000000040
	x2 = 0x0000000000000000
	w0 = 0x00000002
	sigprocmask(x0, x1, x2)
	sp = sp + 0xFFFFFFFFFFFFFFF8
	goto l0000000000443910
	// succ:  l0000000000443910
l0000000000443A70:
	call throw_to_top_level (retsize: 0;)
	goto l00000000004439AC
	// succ:  l00000000004439AC
l0000000000443A78:
	w0 = Mem0[x21:word32]
	call termsig_handler (retsize: 0;)
	goto l00000000004439A4
	// succ:  l00000000004439A4
l0000000000443A84:
	x1 = x29 + 0x0000000000000140
	x2 = 0x0000000000000000
	w0 = 0x00000002
	sigprocmask(x0, x1, x2)
	sp = sp + 0xFFFFFFFFFFFFFFF8
	w0 = 0x00000001
	call fn000000000044099C (retsize: 0;)
	call fn0000000000442820 (retsize: 0;)
	call fn000000000043FD04 (retsize: 0;)
	v29 = sp + 16
	x19 = Mem0[v29:word64]
	v29 = v29 + 8
	x20 = Mem0[v29:word64]
	v30 = sp + 32
	x21 = Mem0[v30:word64]
	v30 = v30 + 8
	x22 = Mem0[v30:word64]
	v31 = sp + 48
	x23 = Mem0[v31:word64]
	v31 = v31 + 8
	x24 = Mem0[v31:word64]
	x29 = Mem0[sp:word64]
	sp = sp + 8
	x30 = Mem0[sp:word64]
	sp = sp + 64
	x31 = x31 + 0x0000000000000200
	return
	// succ:  wait_for_background_pids_exit
l0000000000443ABC:
	branch Test(EQ,Z) l0000000000443A84
	// succ:  l0000000000443AC0 l0000000000443A84
l0000000000443AC0:
	w0 = 0x00000000
	goto l0000000000443984
	// succ:  l0000000000443984
wait_for_background_pids_exit:


// wait_for_job
// Return size: 0
void wait_for_job()
wait_for_job_entry:
	// succ:  l0000000000443AC8
l0000000000443AC8:
	sp = fp
	sp = sp + -304
	Mem0[sp:word64] = x29
	sp = sp + 8
	Mem0[sp:word64] = x30
	x29 = x31 + 0x0000000000000000
	v8 = sp + 16
	Mem0[v8:word64] = x19
	v8 = v8 + 8
	Mem0[v8:word64] = x20
	w19 = w0
	x0 = x29 + 0x00000000000000B0
	v14 = sp + 32
	Mem0[v14:word64] = x21
	v14 = v14 + 8
	Mem0[v14:word64] = x22
	sigemptyset(x0)
	sp = sp + 0xFFFFFFFFFFFFFFF8
	w1 = 0x00000011
	x0 = x29 + 0x00000000000000B0
	sigaddset(x0, x1)
	sp = sp + 0xFFFFFFFFFFFFFFF8
	x0 = x29 + 0x0000000000000030
	sigemptyset(x0)
	sp = sp + 0xFFFFFFFFFFFFFFF8
	w0 = 0x00000000
	x1 = x29 + 0x00000000000000B0
	x2 = x29 + 0x0000000000000030
	sigprocmask(x0, x1, x2)
	sp = sp + 0xFFFFFFFFFFFFFFF8
	x20 = 0x00000000004DF000
	x0 = x20 + 0xFFFFFFFFFFFFFEC8
	x0 = Mem0[x0:word64]
wait_for_job_exit:


// start_job
// Return size: 0
void start_job()
start_job_entry:
	// succ:  l0000000000443BF4
l0000000000443BF4:
	sp = fp
	sp = sp + -368
	Mem0[sp:word64] = x29
	sp = sp + 8
	Mem0[sp:word64] = x30
	x29 = x31 + 0x0000000000000000
	v8 = sp + 48
	Mem0[v8:word64] = x23
	v8 = v8 + 8
	Mem0[v8:word64] = x24
	w24 = w0
	x0 = x29 + 0x00000000000000E0
	v14 = sp + 32
	Mem0[v14:word64] = x21
	v14 = v14 + 8
	Mem0[v14:word64] = x22
	w23 = w1
	v19 = sp + 16
	Mem0[v19:word64] = x19
	v19 = v19 + 8
	Mem0[v19:word64] = x20
	v22 = sp + 64
	Mem0[v22:word64] = x25
	v22 = v22 + 8
	Mem0[v22:word64] = x26
	v25 = sp + 80
	Mem0[v25:word64] = x27
	v25 = v25 + 8
	Mem0[v25:word64] = x28
	sigemptyset(x0)
	sp = sp + 0xFFFFFFFFFFFFFFF8
	w1 = 0x00000011
	x0 = x29 + 0x00000000000000E0
	sigaddset(x0, x1)
	sp = sp + 0xFFFFFFFFFFFFFFF8
	x0 = x29 + 0x0000000000000060
	sigemptyset(x0)
	sp = sp + 0xFFFFFFFFFFFFFFF8
	w0 = 0x00000000
	x1 = x29 + 0x00000000000000E0
	x2 = x29 + 0x0000000000000060
	sigprocmask(x0, x1, x2)
	sp = sp + 0xFFFFFFFFFFFFFFF8
	x22 = 0x00000000004DF000
	x0 = x22 + 0xFFFFFFFFFFFFFEC8
	x0 = Mem0[x0:word64]
start_job_exit:


// initialize_job_control
// Return size: 0
void initialize_job_control()
initialize_job_control_entry:
	// succ:  l0000000000443FF4
l0000000000443FF4:
	sp = fp
	sp = sp + -64
	Mem0[sp:word64] = x29
	sp = sp + 8
	Mem0[sp:word64] = x30
	x29 = x31 + 0x0000000000000000
	v8 = sp + 16
	Mem0[v8:word64] = x19
	v8 = v8 + 8
	Mem0[v8:word64] = x20
	x19 = 0x00000000004D6000
	v11 = sp + 32
	Mem0[v11:word64] = x21
	v11 = v11 + 8
	Mem0[v11:word64] = x22
	v14 = sp + 48
	Mem0[v14:word64] = x23
	v14 = v14 + 8
	Mem0[v14:word64] = x24
	x20 = x19 + 0xFFFFFFFFFFFFFD08
	call getpgrp (retsize: 0;)
	Mem0[x20 + 104:word32] = w0
	w31 = w0 + 0x00000001
	NZCV = cond(w31)
	branch Test(EQ,Z) l000000000044435C
	goto l0000000000444020
	// succ:  l0000000000444020 l000000000044435C
l0000000000443FF4:
l0000000000444020:
	x21 = 0x00000000004DE000
	w1 = Mem0[x21 + 1704:word32]
	branch w1 == 0x00000000 l00000000004442A8
	// succ:  l000000000044402C l00000000004442A8
l000000000044402C:
	x0 = 0x00000000004DF000
	w1 = 0xFFFFFFFF
	w0 = Mem0[x0 + 3736:word32]
	Mem0[x20 + 108:word32] = w1
	x22 = 0x00000000004DE000
	branch w0 != 0x00000000 l0000000000444308
	// succ:  l0000000000444044 l0000000000444308
l0000000000444044:
	x0 = Mem0[x22 + 1640:word64]
	fileno(x0)
	sp = sp + 0xFFFFFFFFFFFFFFF8
	dup(x0)
	sp = sp + 0xFFFFFFFFFFFFFFF8
	x1 = x19 + 0xFFFFFFFFFFFFFD08
	Mem0[x1 + 108:word32] = w0
	// succ:  l0000000000444058
l0000000000444058:
	x20 = x19 + 0xFFFFFFFFFFFFFD08
	w1 = 0x00000001
	w2 = 0xFFFFFFFF
	call move_to_high_fd (retsize: 0;)
	w23 = Mem0[x20 + 104:word32]
	Mem0[x20 + 108:word32] = w0
	branch w23 == 0x00000000 l0000000000444270
	// succ:  l0000000000444074 l0000000000444270
l0000000000444074:
	tcgetpgrp(x0)
	sp = sp + 0xFFFFFFFFFFFFFFF8
	x20 = x19 + 0xFFFFFFFFFFFFFD08
	Mem0[x20 + 120:word32] = w0
	w31 = w0 + 0x00000001
	NZCV = cond(w31)
	branch Test(EQ,Z) l00000000004440D0
	// succ:  l0000000000444088 l00000000004440D0
l0000000000444088:
	w1 = Mem0[x20 + 104:word32]
	NZCV = cond(w0 - w1)
	branch Test(EQ,Z) l00000000004440E0
	// succ:  l0000000000444094 l00000000004440E0
l0000000000444094:
	x1 = 0x0000000000000000
	w0 = 0x00000015
	call set_signal_handler (retsize: 0;)
	x23 = x0
	w1 = 0x00000015
	w0 = 0x00000000
	call kill (retsize: 0;)
	x1 = x23
	w0 = 0x00000015
	call set_signal_handler (retsize: 0;)
	w0 = Mem0[x20 + 108:word32]
	tcgetpgrp(x0)
	sp = sp + 0xFFFFFFFFFFFFFFF8
	Mem0[x20 + 120:word32] = w0
	w31 = w0 + 0x00000001
	NZCV = cond(w31)
	branch Test(NE,Z) l0000000000444088
	// succ:  l00000000004440D0 l0000000000444088
l00000000004440D0:
	__errno_location()
	sp = sp + 0xFFFFFFFFFFFFFFF8
	w24 = Mem0[x0:word32]
	w0 = Mem0[x20 + 104:word32]
	goto l00000000004440E4
	// succ:  l00000000004440E4
l00000000004440E0:
	w24 = 0xFFFFFFFF
	// succ:  l00000000004440E4
l00000000004440E4:
	x20 = x19 + 0xFFFFFFFFFFFFFD08
	Mem0[x20 + 124:word32] = w0
	call getpid (retsize: 0;)
	w1 = w0
	w0 = Mem0[x20 + 124:word32]
	Mem0[x20 + 104:word32] = w1
	NZCV = cond(w1 - w0)
	branch Test(EQ,Z) l0000000000444208
	// succ:  l0000000000444104 l0000000000444208
l0000000000444104:
	w0 = 0x00000000
	call setpgid (retsize: 0;)
	branch (w0 & 0x00000000) == 0x00000000 l00000000004441E8
	// succ:  l0000000000444110 l00000000004441E8
l0000000000444110:
	w0 = Mem0[x20 + 104:word32]
	w1 = Mem0[x20 + 124:word32]
	w2 = 0x00000001
	Mem0[x20 + 84:word32] = w2
	NZCV = cond(w1 - w0)
	branch Test(EQ,Z) l0000000000444214
	// succ:  l0000000000444128 l0000000000444214
l0000000000444128:
	w1 = Mem0[x20 + 120:word32]
	NZCV = cond(w1 - w0)
	branch Test(EQ,Z) l0000000000444214
	// succ:  l0000000000444134 l0000000000444214
l0000000000444134:
	w1 = 0x00000000
	call give_terminal_to (retsize: 0;)
	branch (w0 & 0x00000000) == 0x00000000 l0000000000444340
	// succ:  l0000000000444140 l0000000000444340
l0000000000444140:
	w0 = Mem0[x20 + 84:word32]
	branch w0 != 0x00000000 l0000000000444214
	// succ:  l0000000000444148 l0000000000444214
l0000000000444148:
	x1 = 0x00000000004AD000
	x1 = x1 + 0xFFFFFFFFFFFFF8D0
	w2 = 0x00000005
	x0 = 0x0000000000000000
	dcgettext(x0, x1, x2)
	sp = sp + 0xFFFFFFFFFFFFFFF8
	call internal_error (retsize: 0;)
	// succ:  l0000000000444160
l0000000000444160:
	x0 = Mem0[x22 + 1640:word64]
	fileno(x0)
	sp = sp + 0xFFFFFFFFFFFFFFF8
	x1 = x19 + 0xFFFFFFFFFFFFFD08
	w1 = Mem0[x1 + 108:word32]
	NZCV = cond(w0 - w1)
	branch Test(EQ,Z) l0000000000444188
	// succ:  l0000000000444178 l0000000000444188
l0000000000444178:
	w0 = w1
	w2 = 0x00000001
	w1 = 0x00000002
	fcntl(x0, x1)
	sp = sp + 0xFFFFFFFFFFFFFFF8
	// succ:  l0000000000444188
l0000000000444188:
	x1 = 0x0000000000442000
	x1 = x1 + 0xFFFFFFFFFFFFFA2C
	w0 = 0x00000011
	call set_signal_handler (retsize: 0;)
	x0 = x19 + 0xFFFFFFFFFFFFFD08
	w0 = Mem0[x0 + 84:word32]
	w2 = 0x0000002B
	NZCV = cond(w0 - w31)
	w1 = 0x0000002D
	w0 = 0x0000006D
l00000000004441E8:
	x1 = 0x00000000004AD000
	x1 = x1 + 0xFFFFFFFFFFFFF888
	w2 = 0x00000005
	x0 = 0x0000000000000000
	dcgettext(x0, x1, x2)
	sp = sp + 0xFFFFFFFFFFFFFFF8
	call sys_error (retsize: 0;)
	w0 = Mem0[x20 + 124:word32]
	Mem0[x20 + 104:word32] = w0
	// succ:  l0000000000444208
l0000000000444208:
	x0 = x19 + 0xFFFFFFFFFFFFFD08
	w1 = 0x00000001
	Mem0[x0 + 84:word32] = w1
	// succ:  l0000000000444214
l0000000000444214:
	x20 = x19 + 0xFFFFFFFFFFFFFD08
	w0 = Mem0[x20 + 108:word32]
	tcgetpgrp(x0)
	sp = sp + 0xFFFFFFFFFFFFFFF8
	w31 = w0 + 0x00000001
	NZCV = cond(w31)
	w23 = w0
	branch Test(EQ,Z) l0000000000444238
	// succ:  l000000000044422C l0000000000444238
l000000000044422C:
	w0 = Mem0[x20 + 104:word32]
	NZCV = cond(w23 - w0)
	branch Test(EQ,Z) l000000000044429C
	// succ:  l0000000000444238 l000000000044429C
l0000000000444238:
	w31 = w24 + 0x00000001
	NZCV = cond(w31)
	branch Test(EQ,Z) l0000000000444248
	// succ:  l0000000000444240 l0000000000444248
l0000000000444240:
	__errno_location()
	sp = sp + 0xFFFFFFFFFFFFFFF8
	Mem0[x0:word32] = w24
	// succ:  l0000000000444248
l0000000000444248:
	x1 = 0x00000000004AD000
	w2 = 0x00000005
	x1 = x1 + 0xFFFFFFFFFFFFF8A8
	x0 = 0x0000000000000000
	dcgettext(x0, x1, x2)
	sp = sp + 0xFFFFFFFFFFFFFFF8
	w1 = w23
	call sys_error (retsize: 0;)
	x0 = x19 + 0xFFFFFFFFFFFFFD08
	Mem0[x0 + 84:word32] = 0x00000000
	goto l0000000000444148
	// succ:  l0000000000444148
l0000000000444270:
	call getpid (retsize: 0;)
	w2 = w0
	w1 = w0
	w0 = w23
	Mem0[x20 + 104:word32] = w2
	call setpgid (retsize: 0;)
	w0 = Mem0[x20 + 108:word32]
	w1 = Mem0[x20 + 104:word32]
	tcsetpgrp(x0, x1)
	sp = sp + 0xFFFFFFFFFFFFFFF8
	w0 = Mem0[x20 + 108:word32]
	goto l0000000000444074
	// succ:  l0000000000444074
l000000000044429C:
	w0 = Mem0[x20 + 84:word32]
	branch w0 != 0x00000000 l0000000000444160
	// succ:  l00000000004442A4 l0000000000444160
l00000000004442A4:
	goto l0000000000444148
	// succ:  l0000000000444148
l00000000004442A8:
	x22 = 0x00000000004DE000
	x0 = Mem0[x22 + 1640:word64]
	Mem0[x20 + 84:word32] = w1
	w1 = 0xFFFFFFFF
	Mem0[x20 + 124:word32] = w1
	fileno(x0)
	sp = sp + 0xFFFFFFFFFFFFFFF8
	Mem0[x20 + 108:word32] = w0
	goto l0000000000444160
	// succ:  l0000000000444160
l0000000000444308:
	x0 = Mem0[x22 + 1640:word64]
	fileno(x0)
	sp = sp + 0xFFFFFFFFFFFFFFF8
	isatty(x0)
	sp = sp + 0xFFFFFFFFFFFFFFF8
	branch w0 == 0x00000000 l0000000000444328
	// succ:  l0000000000444318 l0000000000444328
l0000000000444318:
	w0 = Mem0[x20 + 108:word32]
	// succ:  l000000000044431C
l000000000044431C:
	w31 = w0 + 0x00000001
	NZCV = cond(w31)
	branch Test(NE,Z) l0000000000444058
	// succ:  l0000000000444324 l0000000000444058
l0000000000444324:
	goto l0000000000444044
	// succ:  l0000000000444044
l0000000000444328:
	x0 = 0x00000000004AB000
	x0 = x0 + 0xFFFFFFFFFFFFFF28
	w1 = 0x00000802
	open(x0, x1)
	sp = sp + 0xFFFFFFFFFFFFFFF8
	Mem0[x20 + 108:word32] = w0
	goto l000000000044431C
	// succ:  l000000000044431C
l0000000000444340:
	w1 = Mem0[x20 + 124:word32]
	w0 = 0x00000000
	call setpgid (retsize: 0;)
	w0 = Mem0[x20 + 124:word32]
	Mem0[x20 + 84:word32] = 0x00000000
	Mem0[x20 + 104:word32] = w0
	goto l0000000000444148
	// succ:  l0000000000444148
l000000000044435C:
	x1 = 0x00000000004AD000
	x1 = x1 + 0xFFFFFFFFFFFFF860
	w2 = 0x00000005
	x0 = 0x0000000000000000
	dcgettext(x0, x1, x2)
	sp = sp + 0xFFFFFFFFFFFFFFF8
	call sys_error (retsize: 0;)
	w0 = 0x00000001
	exit(x0)
initialize_job_control_exit:


// stop_pipeline
// Return size: 0
void stop_pipeline()
stop_pipeline_entry:
	// succ:  l00000000004443F4
l00000000004443F4:
	sp = fp
	x31 = x31 - 0x0000000000000200
	sp = sp + -96
	Mem0[sp:word64] = x29
	sp = sp + 8
	Mem0[sp:word64] = x30
	x29 = x31 + 0x0000000000000000
	v8 = sp + 64
	Mem0[v8:word64] = x25
	v8 = v8 + 8
	Mem0[v8:word64] = x26
	w25 = w0
	x0 = x29 + 0x00000000000001E0
	v14 = sp + 16
	Mem0[v14:word64] = x19
	v14 = v14 + 8
	Mem0[v14:word64] = x20
	v17 = sp + 48
	Mem0[v17:word64] = x23
	v17 = v17 + 8
	Mem0[v17:word64] = x24
	v20 = sp + 32
	Mem0[v20:word64] = x21
	v20 = v20 + 8
	Mem0[v20:word64] = x22
	x24 = x1
	v24 = sp + 80
	Mem0[v24:word64] = x27
	v24 = v24 + 8
	Mem0[v24:word64] = x28
	sigemptyset(x0)
	sp = sp + 0xFFFFFFFFFFFFFFF8
	w1 = 0x00000011
	x0 = x29 + 0x00000000000001E0
	sigaddset(x0, x1)
	sp = sp + 0xFFFFFFFFFFFFFFF8
	x0 = x29 + 0x0000000000000160
	sigemptyset(x0)
	sp = sp + 0xFFFFFFFFFFFFFFF8
	x1 = x29 + 0x00000000000001E0
	x2 = x29 + 0x0000000000000160
	w0 = 0x00000000
	x20 = 0x00000000004D6000
	sigprocmask(x0, x1, x2)
	sp = sp + 0xFFFFFFFFFFFFFFF8
	x19 = x20 + 0xFFFFFFFFFFFFFD08
	x0 = x19 + 0x0000000000000060
	call sh_closepipe (retsize: 0;)
	call fn0000000000442820 (retsize: 0;)
	w23 = Mem0[x19 + 28:word32]
	branch w23 == 0x00000000 l0000000000444690
	// succ:  l0000000000444464 l0000000000444690
l0000000000444464:
	x0 = 0x00000000004DE000
	w0 = Mem0[x0 + 1704:word32]
	x21 = 0x00000000004DF000
	branch w0 == 0x00000000 l0000000000444708
	// succ:  l0000000000444474 l0000000000444708
l0000000000444474:
	x0 = x21 + 0xFFFFFFFFFFFFFEC8
	x1 = Mem0[x0:word64]
	x0 = x1 + (int64) ((int32) w23)
	x0 = Mem0[x0 + -8:word64]
	branch x0 != 0x0000000000000000 l00000000004449D4
	// succ:  l0000000000444488 l00000000004449D4
l0000000000444488:
	x0 = 0xFFFFFFFFFFFFFFF0
	x0 = x0 + (int64) ((int32) w23)
	x0 = x1 + x0
	w19 = w23
	goto l00000000004444A4
	// succ:  l00000000004444A4
l000000000044449C:
	x1 = Mem0[x0:word64]
	x0 = x0 + -8
	branch x1 != 0x0000000000000000 l00000000004444AC
	// succ:  l00000000004444A4 l00000000004444AC
l00000000004444A4:
	w19 = w19 - 0x00000001
	NZCV = cond(w19)
	branch Test(NE,Z) l000000000044449C
	// succ:  l00000000004444AC l000000000044449C
l00000000004444AC:
	x0 = 0x00000000004DE000
	w0 = Mem0[x0 + 1712:word32]
	branch w0 == 0x00000000 l00000000004444C8
	// succ:  l00000000004444B8 l00000000004444C8
l00000000004444B8:
	x0 = 0x00000000004E3000
	w0 = Mem0[x0 + 1184:word32]
	x22 = 0x00000000004E0000
	branch w0 == 0x00000000 l00000000004448D0
	// succ:  l00000000004444C8 l00000000004448D0
l00000000004444C8:
	NZCV = cond(w19 - w23)
	x22 = 0x00000000004E0000
	branch Test(EQ,Z) l00000000004449DC
	// succ:  l00000000004444D4 l00000000004449DC
l00000000004444D4:
	x26 = x21 + 0xFFFFFFFFFFFFFEC8
	x3 = Mem0[x26 + 8:word64]
	branch x3 == 0x0000000000000000 l0000000000444958
	// succ:  l00000000004444E0 l0000000000444958
l00000000004444E0:
	x23 = 0x00000000004AD000
	x0 = 0x0000000000000038
	x1 = x23 + 0x0000000000000510
	w2 = 0x0000022F
	call sh_xmalloc (retsize: 0;)
	x3 = Mem0[x26 + 8:word64]
	x27 = x0
	x4 = Mem0[x3:word64]
	x31 = x3 - x4
	NZCV = cond(x31)
	branch Test(EQ,Z) l0000000000444BC8
	// succ:  l0000000000444508 l0000000000444BC8
l0000000000444508:
	w26 = 0x00000001
	goto l0000000000444514
	// succ:  l0000000000444514
l0000000000444510:
	x4 = x2
	// succ:  l0000000000444514
l0000000000444514:
	x2 = Mem0[x4:word64]
	w26 = w26 + 0x00000001
	x31 = x3 - x2
	NZCV = cond(x31)
	branch Test(NE,Z) l0000000000444510
	// succ:  l0000000000444524 l0000000000444510
l0000000000444524:
	Mem0[x4:word64] = 0x0000000000000000
	x2 = Mem0[x3:word64]
	branch x2 == 0x0000000000000000 l0000000000444540
	// succ:  l0000000000444530 l0000000000444540
l0000000000444530:
	x0 = x3
	call list_reverse (retsize: 0;)
	x2 = Mem0[x0:word64]
	x3 = x0
	// succ:  l0000000000444540
l0000000000444540:
	Mem0[x27 + 8:word64] = x3
	x0 = x3
	branch x2 == 0x0000000000000000 l0000000000444558
	// succ:  l000000000044454C l0000000000444558
l000000000044454C:
	x0 = x2
	x2 = Mem0[x2:word64]
	branch x2 != 0x0000000000000000 l000000000044454C
	// succ:  l0000000000444558 l000000000044454C
l0000000000444558:
	x1 = x22 + 0xFFFFFFFFFFFFFFC8
	w5 = Mem0[x1 + -100:word32]
	x4 = x20 + 0xFFFFFFFFFFFFFD08
	Mem0[x0:word64] = x3
	w4 = Mem0[x4 + 84:word32]
	x0 = x21 + 0xFFFFFFFFFFFFFEC8
	Mem0[x0 + 8:word64] = x2
	Mem0[x27 + 16:word32] = w5
	Mem0[x1 + -100:word32] = w2
	Mem0[x27 + 24:word32] = w2
	branch w4 != 0x00000000 l00000000004447BC
	// succ:  l0000000000444584 l00000000004447BC
l0000000000444584:
	w4 = 0x00000000
	x2 = x3
	w5 = w4
	// succ:  l0000000000444590
l0000000000444590:
	w6 = Mem0[x2 + 16:word32]
	v42 = Mem0[x2 + 12:byte]
	w8 = (word32) v42
	w31 = w6 - 0x00000001
	NZCV = cond(w31)
	x2 = Mem0[x2:word64]
	w7 = (word32) Test(EQ,Z)
	w31 = w8 - 0x0000007F
	NZCV = cond(w31)
	w6 = (word32) Test(EQ,Z)
	x31 = x3 - x2
	NZCV = cond(x31)
	w5 = w5 | w7
	w4 = w4 | w6
	branch Test(NE,Z) l0000000000444590
	// succ:  l00000000004445BC l0000000000444590
l00000000004445BC:
	w0 = 0x00000001
	branch w5 == 0x00000000 l0000000000444758
	// succ:  l00000000004445C4 l0000000000444758
l00000000004445C4:
	Mem0[x27 + 20:word32] = w0
	x0 = 0x00000000004AA000
	x0 = x0 + 0x0000000000000520
	call get_string_value (retsize: 0;)
	x28 = x0
	branch x0 == 0x0000000000000000 l0000000000444780
	// succ:  l00000000004445DC l0000000000444780
l00000000004445DC:
	strlen(x0)
	sp = sp + 0xFFFFFFFFFFFFFFF8
	x1 = x23 + 0x0000000000000510
	w2 = 0x00000184
	x0 = x0 + 0x0000000000000001
	call sh_xmalloc (retsize: 0;)
	x1 = x28
	strcpy(x0, x1)
	sp = sp + 0xFFFFFFFFFFFFFFF8
	// succ:  l00000000004445F8
l00000000004445F8:
	x21 = x21 + 0xFFFFFFFFFFFFFEC8
	x2 = Mem0[x21:word64]
	w1 = Mem0[x27 + 20:word32]
	Mem0[x27:word64] = x0
	Mem0[x27 + 32:word64] = x24
	Mem0[x27 + 40:word64] = 0x0000000000000000
	Mem0[x27 + 48:word64] = 0x0000000000000000
	Mem0[x2 + (int64) ((int32) w19):word64] = x27
	w31 = w1 - 0x00000004
	NZCV = cond(w31)
	branch Test(EQ,Z) l0000000000444B7C
	// succ:  l0000000000444620 l0000000000444B7C
l0000000000444620:
	x1 = x20 + 0xFFFFFFFFFFFFFD08
	w2 = Mem0[x1 + 16:word32]
	w0 = Mem0[x1 + 40:word32]
	w2 = w2 + w26
	w0 = w0 + 0x00000001
	Mem0[x1 + 16:word32] = w2
	Mem0[x1 + 32:word32] = w19
	Mem0[x1 + 40:word32] = w0
	Mem0[x1 + 56:word64] = x27
	branch w25 == 0x00000000 l0000000000444978
	// succ:  l0000000000444648 l0000000000444978
l0000000000444648:
	branch x27 != 0x0000000000000000 l0000000000444BA4
	// succ:  l000000000044464C l0000000000444BA4
l000000000044464C:
	call fn000000000043FAD4 (retsize: 0;)
	x22 = x22 + 0xFFFFFFFFFFFFFFC8
	x1 = x29 + 0x0000000000000160
	x2 = 0x0000000000000000
	w0 = 0x00000002
	Mem0[x22 + -116:word32] = 0x00000000
	sigprocmask(x0, x1, x2)
	sp = sp + 0xFFFFFFFFFFFFFFF8
	// succ:  l0000000000444668
l0000000000444668:
	x20 = x20 + 0xFFFFFFFFFFFFFD08
	w0 = Mem0[x20 + 48:word32]
	v44 = sp + 32
	x21 = Mem0[v44:word64]
	v44 = v44 + 8
	x22 = Mem0[v44:word64]
	v45 = sp + 16
	x19 = Mem0[v45:word64]
	v45 = v45 + 8
	x20 = Mem0[v45:word64]
	v46 = sp + 48
	x23 = Mem0[v46:word64]
	v46 = v46 + 8
	x24 = Mem0[v46:word64]
	v47 = sp + 64
	x25 = Mem0[v47:word64]
	v47 = v47 + 8
	x26 = Mem0[v47:word64]
	v48 = sp + 80
	x27 = Mem0[v48:word64]
	v48 = v48 + 8
	x28 = Mem0[v48:word64]
	x29 = Mem0[sp:word64]
	sp = sp + 8
	x30 = Mem0[sp:word64]
	sp = sp + 96
	x31 = x31 + 0x0000000000000200
	return
	// succ:  stop_pipeline_exit
l0000000000444690:
	x1 = 0x00000000004AD000
	w3 = 0x00000008
	x0 = 0x0000000000000040
	x1 = x1 + 0x0000000000000510
	w2 = 0x000001F2
	Mem0[x19 + 28:word32] = w3
	x21 = 0x00000000004DF000
	call sh_xmalloc (retsize: 0;)
	w23 = Mem0[x19 + 28:word32]
	x3 = x21 + 0xFFFFFFFFFFFFFEC8
	Mem0[x3:word64] = x0
	NZCV = cond(w23 - w31)
	branch Test(LE,ZCV) l00000000004446EC
	// succ:  l00000000004446C4 l00000000004446EC
l00000000004446C4:
	w2 = w23 - 0x00000001
	x2 = x2 + 0x0000000000000001
l00000000004446EC:
	x1 = 0x00000000004DE000
	x0 = x20 + 0xFFFFFFFFFFFFFD08
	w1 = Mem0[x1 + 1704:word32]
	Mem0[x0 + 40:word32] = 0x00000000
	Mem0[x0 + 32:word32] = 0x00000000
	Mem0[x0 + 36:word32] = 0x00000000
	branch w1 != 0x00000000 l00000000004449D0
	// succ:  l0000000000444708 l00000000004449D0
l0000000000444708:
	x0 = x20 + 0xFFFFFFFFFFFFFD08
	w19 = Mem0[x0 + 32:word32]
	NZCV = cond(w19 - w31)
l0000000000444758:
	NZCV = cond(w4 - w31)
	w1 = 0x00000004
	w0 = 0x00000002
l0000000000444780:
	x0 = 0x00000000004AD000
	x0 = x0 + 0xFFFFFFFFFFFFF8F0
	call get_working_directory (retsize: 0;)
	branch x0 != 0x0000000000000000 l00000000004445F8
	// succ:  l0000000000444790 l00000000004445F8
l0000000000444790:
	x1 = x23 + 0x0000000000000510
	w2 = 0x0000018A
	x0 = 0x000000000000000A
	call sh_xmalloc (retsize: 0;)
	x1 = 0x00000000004AD000
	x1 = x1 + 0x0000000000000520
	x2 = Mem0[x1:word64]
	v55 = Mem0[x1 + 8:word16]
	w1 = (word32) v55
	Mem0[x0:word64] = x2
	Mem0[x0 + 8:word16] = (word16) w1
	goto l00000000004445F8
	// succ:  l00000000004445F8
l00000000004447BC:
	w0 = 0x00000004
	Mem0[x27 + 24:word32] = w0
	goto l0000000000444584
	// succ:  l0000000000444584
l00000000004448D0:
	NZCV = cond(w19 - w23)
	branch Test(NE,Z) l00000000004444D4
	// succ:  l00000000004448D8 l00000000004444D4
l00000000004448D8:
	w4 = w23 + 0x00000008
	x26 = x21 + 0xFFFFFFFFFFFFFEC8
l0000000000444958:
	branch w25 != 0x00000000 l000000000044464C
	// succ:  l000000000044495C l000000000044464C
l000000000044495C:
	x22 = x22 + 0xFFFFFFFFFFFFFFC8
	x1 = x29 + 0x0000000000000160
	x2 = x3
	w0 = 0x00000002
	Mem0[x22 + -116:word32] = w3
	sigprocmask(x0, x1, x2)
	sp = sp + 0xFFFFFFFFFFFFFFF8
	goto l0000000000444668
	// succ:  l0000000000444668
l0000000000444978:
	w2 = Mem0[x27 + 24:word32]
	w0 = Mem0[x1 + 84:word32]
	w2 = w2 | 0x00000001
	Mem0[x27 + 24:word32] = w2
	branch w0 == 0x00000000 l0000000000444994
	// succ:  l000000000044498C l0000000000444994
l000000000044498C:
	w21 = Mem0[x27 + 16:word32]
	branch w21 != 0x00000000 l0000000000444B3C
	// succ:  l0000000000444994 l0000000000444B3C
l0000000000444994:
	x22 = x22 + 0xFFFFFFFFFFFFFFC8
	w0 = 0x00000002
	// succ:  l000000000044499C
l000000000044499C:
	x1 = x29 + 0x0000000000000160
	x2 = 0x0000000000000000
	Mem0[x22 + -116:word32] = 0x00000000
	sigprocmask(x0, x1, x2)
	sp = sp + 0xFFFFFFFFFFFFFFF8
	w0 = w19
	v50 = sp + 32
	x21 = Mem0[v50:word64]
	v50 = v50 + 8
	x22 = Mem0[v50:word64]
	v51 = sp + 16
	x19 = Mem0[v51:word64]
	v51 = v51 + 8
	x20 = Mem0[v51:word64]
	v52 = sp + 48
	x23 = Mem0[v52:word64]
	v52 = v52 + 8
	x24 = Mem0[v52:word64]
	v53 = sp + 64
	x25 = Mem0[v53:word64]
	v53 = v53 + 8
	x26 = Mem0[v53:word64]
	v54 = sp + 80
	x27 = Mem0[v54:word64]
	v54 = v54 + 8
	x28 = Mem0[v54:word64]
	x29 = Mem0[sp:word64]
	sp = sp + 8
	x30 = Mem0[sp:word64]
	sp = sp + 96
	x31 = x31 + 0x0000000000000200
	return
	// succ:  stop_pipeline_exit
l00000000004449D0:
	branch w23 != 0x00000000 l0000000000444474
	// succ:  l00000000004449D4 l0000000000444474
l00000000004449D4:
	w19 = w23
	goto l00000000004444AC
	// succ:  l00000000004444AC
l00000000004449DC:
	w31 = w19 - 0xFFFFFFFF
	NZCV = cond(w31)
	w23 = w19
	branch Test(LE,ZCV) l00000000004448D8
	// succ:  l00000000004449E8 l00000000004448D8
l00000000004449E8:
	x0 = x22 + 0xFFFFFFFFFFFFFFC8
	w0 = Mem0[x0 + -96:word32]
	branch w0 != 0x00000000 l00000000004448D0
	// succ:  l00000000004449F4 l00000000004448D0
l00000000004449F4:
	call fn000000000044099C (retsize: 0;)
	call fn0000000000442820 (retsize: 0;)
	x0 = x20 + 0xFFFFFFFFFFFFFD08
	w0 = Mem0[x0 + 40:word32]
l0000000000444B3C:
	x0 = 0x00000000004E3000
	w0 = Mem0[x0 + 1184:word32]
	branch (w0 & 0x00000001) == 0x00000000 l0000000000444994
	// succ:  l0000000000444B48 l0000000000444994
l0000000000444B48:
	w0 = Mem0[x1 + 108:word32]
	w24 = Mem0[x1 + 104:word32]
	tcgetpgrp(x0)
	sp = sp + 0xFFFFFFFFFFFFFFF8
	w23 = w0
	branch (w23 & 0x00000000) == 0x00000000 l0000000000444BFC
	// succ:  l0000000000444B5C l0000000000444BFC
l0000000000444B5C:
	NZCV = cond(w21 - w23)
	branch Test(EQ,Z) l0000000000444C1C
	// succ:  l0000000000444B64 l0000000000444C1C
l0000000000444B64:
	NZCV = cond(w24 - w23)
	branch Test(NE,Z) l0000000000444994
	// succ:  l0000000000444B6C l0000000000444994
l0000000000444B6C:
	w0 = w21
	w1 = 0x00000000
	call give_terminal_to (retsize: 0;)
	goto l0000000000444994
	// succ:  l0000000000444994
l0000000000444B7C:
	w0 = Mem0[x27 + 24:word32]
	branch (w0 & 0x00000001) == 0x00000000 l0000000000444BD4
	// succ:  l0000000000444B84 l0000000000444BD4
l0000000000444B84:
	x0 = x20 + 0xFFFFFFFFFFFFFD08
	w2 = Mem0[x0 + 12:word32]
	w1 = Mem0[x0 + 44:word32]
	w2 = w2 + w26
	w1 = w1 + 0x00000001
	Mem0[x0 + 12:word32] = w2
	Mem0[x0 + 44:word32] = w1
	goto l0000000000444620
	// succ:  l0000000000444620
l0000000000444BA4:
	w0 = Mem0[x27 + 24:word32]
	x22 = x22 + 0xFFFFFFFFFFFFFFC8
	w0 = w0 & 0xFFFFFFFE
	w0 = w0 | 0x00000020
	Mem0[x27 + 24:word32] = w0
	Mem0[x1 + 64:word64] = x27
	call fn000000000043FAD4 (retsize: 0;)
	w0 = 0x00000002
	goto l000000000044499C
	// succ:  l000000000044499C
l0000000000444BC8:
	x4 = x3
	w26 = 0x00000001
	goto l0000000000444524
	// succ:  l0000000000444524
l0000000000444BD4:
	w0 = w19
	call fn000000000043FF70 (retsize: 0;)
	w0 = Mem0[x27 + 20:word32]
	w31 = w0 - 0x00000004
	NZCV = cond(w31)
	branch Test(EQ,Z) l0000000000444B84
	// succ:  l0000000000444BE8 l0000000000444B84
l0000000000444BE8:
	goto l0000000000444620
	// succ:  l0000000000444620
l0000000000444BFC:
	__errno_location()
	sp = sp + 0xFFFFFFFFFFFFFFF8
	w0 = Mem0[x0:word32]
	w31 = w0 - 0x00000019
	NZCV = cond(w31)
	branch Test(NE,Z) l0000000000444B5C
	// succ:  l0000000000444C0C l0000000000444B5C
l0000000000444C0C:
	goto l0000000000444994
	// succ:  l0000000000444994
l0000000000444C1C:
	x20 = x20 + 0xFFFFFFFFFFFFFD08
	Mem0[x20 + 120:word32] = w21
	goto l0000000000444994
	// succ:  l0000000000444994
stop_pipeline_exit:


// delete_all_jobs
// Return size: 0
void delete_all_jobs()
delete_all_jobs_entry:
	// succ:  l0000000000444C54
l0000000000444C54:
	sp = fp
	sp = sp + -320
	Mem0[sp:word64] = x29
	sp = sp + 8
	Mem0[sp:word64] = x30
	x29 = x31 + 0x0000000000000000
	v8 = sp + 32
	Mem0[v8:word64] = x21
	v8 = v8 + 8
	Mem0[v8:word64] = x22
	w21 = w0
	x0 = x29 + 0x00000000000000C0
	v14 = sp + 48
	Mem0[v14:word64] = x23
	v14 = v14 + 8
	Mem0[v14:word64] = x24
	v17 = sp + 16
	Mem0[v17:word64] = x19
	v17 = v17 + 8
	Mem0[v17:word64] = x20
	sigemptyset(x0)
	sp = sp + 0xFFFFFFFFFFFFFFF8
	w1 = 0x00000011
	x0 = x29 + 0x00000000000000C0
	sigaddset(x0, x1)
	sp = sp + 0xFFFFFFFFFFFFFFF8
	x0 = x29 + 0x0000000000000040
	sigemptyset(x0)
	sp = sp + 0xFFFFFFFFFFFFFFF8
	w0 = 0x00000000
	x1 = x29 + 0x00000000000000C0
	x2 = x29 + 0x0000000000000040
	x24 = 0x00000000004D6000
	sigprocmask(x0, x1, x2)
	sp = sp + 0xFFFFFFFFFFFFFFF8
	x22 = x24 + 0xFFFFFFFFFFFFFD08
	w0 = Mem0[x22 + 28:word32]
	NZCV = cond(w0 - w31)
	branch Test(EQ,Z) l0000000000444D44
	// succ:  l0000000000444CAC l0000000000444D44
l0000000000444CAC:
	w0 = 0xFFFFFFFF
	Mem0[x22 + 52:word32] = w0
	Mem0[x22 + 48:word32] = w0
	branch Test(LE,ZCV) l0000000000444D1C
	// succ:  l0000000000444CBC l0000000000444D1C
l0000000000444CBC:
	x20 = 0x0000000000000000
	x23 = 0x00000000004DF000
	w19 = w20
	x23 = x23 + 0xFFFFFFFFFFFFFEC8
	goto l0000000000444CEC
	// succ:  l0000000000444CEC
l0000000000444CD0:
	w2 = Mem0[x2 + 20:word32]
	NZCV = cond(w2 - w1)
	branch Test(EQ,Z) l0000000000444D08
	// succ:  l0000000000444CDC l0000000000444D08
l0000000000444CDC:
	w1 = Mem0[x22 + 28:word32]
	x20 = x20 + 0x0000000000000008
	NZCV = cond(w1 - w19)
	branch Test(LE,ZCV) l0000000000444D1C
	// succ:  l0000000000444CEC l0000000000444D1C
l0000000000444CEC:
	x1 = Mem0[x23:word64]
	w0 = w19
	x2 = Mem0[x1 + x20:word64]
	w19 = w19 + 0x00000001
	w1 = 0x00000001
	branch x2 == 0x0000000000000000 l0000000000444CDC
	// succ:  l0000000000444D04 l0000000000444CDC
l0000000000444D04:
	branch w21 != 0x00000000 l0000000000444CD0
	// succ:  l0000000000444D08 l0000000000444CD0
l0000000000444D08:
	call delete_job (retsize: 0;)
	w1 = Mem0[x22 + 28:word32]
	x20 = x20 + 0x0000000000000008
	NZCV = cond(w1 - w19)
	branch Test(GT,NZV) l0000000000444CEC
	// succ:  l0000000000444D1C l0000000000444CEC
l0000000000444D1C:
	branch w21 == 0x00000000 l0000000000444D50
	// succ:  l0000000000444D20 l0000000000444D50
l0000000000444D20:
	x1 = x29 + 0x0000000000000040
	x2 = 0x0000000000000000
	w0 = 0x00000002
	sigprocmask(x0, x1, x2)
	sp = sp + 0xFFFFFFFFFFFFFFF8
	v28 = sp + 16
	x19 = Mem0[v28:word64]
	v28 = v28 + 8
	x20 = Mem0[v28:word64]
	v29 = sp + 32
	x21 = Mem0[v29:word64]
	v29 = v29 + 8
	x22 = Mem0[v29:word64]
	v30 = sp + 48
	x23 = Mem0[v30:word64]
	v30 = v30 + 8
	x24 = Mem0[v30:word64]
	x29 = Mem0[sp:word64]
	sp = sp + 8
	x30 = Mem0[sp:word64]
	sp = sp + 320
	return
	// succ:  delete_all_jobs_exit
l0000000000444D44:
	branch w21 != 0x00000000 l0000000000444D20
	// succ:  l0000000000444D48 l0000000000444D20
l0000000000444D48:
	call fn000000000043FD04 (retsize: 0;)
	goto l0000000000444D20
	// succ:  l0000000000444D20
l0000000000444D50:
	x0 = 0x00000000004DF000
	x0 = x0 + 0xFFFFFFFFFFFFFEC8
	x0 = Mem0[x0:word64]
	x1 = 0x00000000004AD000
	x24 = x24 + 0xFFFFFFFFFFFFFD08
	x1 = x1 + 0x0000000000000510
	w2 = 0x00000F72
	call sh_xfree (retsize: 0;)
	Mem0[x24 + 28:word32] = w21
	Mem0[x24 + 40:word32] = w21
	Mem0[x24 + 32:word32] = w21
	Mem0[x24 + 36:word32] = w21
	call fn000000000043FD04 (retsize: 0;)
	goto l0000000000444D20
	// succ:  l0000000000444D20
delete_all_jobs_exit:


// nohup_all_jobs
// Return size: 0
void nohup_all_jobs()
nohup_all_jobs_entry:
	// succ:  l0000000000444D88
l0000000000444D88:
	sp = fp
	sp = sp + -288
	Mem0[sp:word64] = x29
	sp = sp + 8
	Mem0[sp:word64] = x30
	x29 = x31 + 0x0000000000000000
	Mem0[sp + 16:word64] = x19
	w19 = w0
	x0 = x29 + 0x00000000000000A0
	sigemptyset(x0)
	sp = sp + 0xFFFFFFFFFFFFFFF8
	w1 = 0x00000011
	x0 = x29 + 0x00000000000000A0
	sigaddset(x0, x1)
	sp = sp + 0xFFFFFFFFFFFFFFF8
	x0 = x29 + 0x0000000000000020
	sigemptyset(x0)
	sp = sp + 0xFFFFFFFFFFFFFFF8
	w0 = 0x00000000
	x1 = x29 + 0x00000000000000A0
	x2 = x29 + 0x0000000000000020
	sigprocmask(x0, x1, x2)
	sp = sp + 0xFFFFFFFFFFFFFFF8
	x0 = 0x00000000004D6000
	x0 = x0 + 0xFFFFFFFFFFFFFD08
	w4 = Mem0[x0 + 28:word32]
	NZCV = cond(w4 - w31)
	branch Test(LE,ZCV) l0000000000444E30
	// succ:  l0000000000444DD8 l0000000000444E30
l0000000000444DD8:
	x0 = 0x00000000004DF000
	x0 = x0 + 0xFFFFFFFFFFFFFEC8
	x3 = Mem0[x0:word64]
	w4 = w4 - 0x00000001
	x1 = x3 + 0x0000000000000008
	x4 = x1 + (uint64) ((word32) w4)
	goto l0000000000444E0C
	// succ:  l0000000000444E0C
l0000000000444DF4:
	w0 = Mem0[x2 + 24:word32]
	w0 = w0 | 0x00000008
	Mem0[x2 + 24:word32] = w0
	// succ:  l0000000000444E00
l0000000000444E00:
	x31 = x1 - x4
	NZCV = cond(x31)
	branch Test(EQ,Z) l0000000000444E30
	// succ:  l0000000000444E08 l0000000000444E30
l0000000000444E08:
	x1 = x1 + 0x0000000000000008
	// succ:  l0000000000444E0C
l0000000000444E0C:
	x2 = Mem0[x3:word64]
	x3 = x1
	branch x2 == 0x0000000000000000 l0000000000444E00
	// succ:  l0000000000444E18 l0000000000444E00
l0000000000444E18:
	branch w19 == 0x00000000 l0000000000444DF4
	// succ:  l0000000000444E1C l0000000000444DF4
l0000000000444E1C:
	w0 = Mem0[x2 + 20:word32]
	w31 = w0 - 0x00000001
	NZCV = cond(w31)
	branch Test(EQ,Z) l0000000000444DF4
	// succ:  l0000000000444E28 l0000000000444DF4
l0000000000444E28:
	x31 = x1 - x4
	NZCV = cond(x31)
	branch Test(NE,Z) l0000000000444E08
	// succ:  l0000000000444E30 l0000000000444E08
l0000000000444E30:
	x1 = x29 + 0x0000000000000020
	x2 = 0x0000000000000000
	w0 = 0x00000002
	sigprocmask(x0, x1, x2)
	sp = sp + 0xFFFFFFFFFFFFFFF8
	x19 = Mem0[sp + 16:word64]
	x29 = Mem0[sp:word64]
	sp = sp + 8
	x30 = Mem0[sp:word64]
	sp = sp + 288
	return
	// succ:  nohup_all_jobs_exit
nohup_all_jobs_exit:


// count_all_jobs
// Return size: 0
void count_all_jobs()
count_all_jobs_entry:
	// succ:  l0000000000444E4C
l0000000000444E4C:
	sp = fp
	sp = sp + -288
	Mem0[sp:word64] = x29
	sp = sp + 8
	Mem0[sp:word64] = x30
	x29 = x31 + 0x0000000000000000
	x0 = x29 + 0x00000000000000A0
	Mem0[sp + 16:word64] = x19
	sigemptyset(x0)
	sp = sp + 0xFFFFFFFFFFFFFFF8
	w1 = 0x00000011
	x0 = x29 + 0x00000000000000A0
	sigaddset(x0, x1)
	sp = sp + 0xFFFFFFFFFFFFFFF8
	x0 = x29 + 0x0000000000000020
	sigemptyset(x0)
	sp = sp + 0xFFFFFFFFFFFFFFF8
	w0 = 0x00000000
	x1 = x29 + 0x00000000000000A0
	x2 = x29 + 0x0000000000000020
	sigprocmask(x0, x1, x2)
	sp = sp + 0xFFFFFFFFFFFFFFF8
	x0 = 0x00000000004D6000
	x0 = x0 + 0xFFFFFFFFFFFFFD08
	w4 = Mem0[x0 + 28:word32]
	NZCV = cond(w4 - w31)
	branch Test(LE,ZCV) l0000000000444EFC
	// succ:  l0000000000444E98 l0000000000444EFC
l0000000000444E98:
	x0 = 0x00000000004DF000
	x0 = x0 + 0xFFFFFFFFFFFFFEC8
	x3 = Mem0[x0:word64]
	w4 = w4 - 0x00000001
	x1 = x3 + 0x0000000000000008
	x4 = x1 + (uint64) ((word32) w4)
	w19 = 0x00000000
	goto l0000000000444EBC
	// succ:  l0000000000444EBC
l0000000000444EB8:
	x1 = x1 + 0x0000000000000008
	// succ:  l0000000000444EBC
l0000000000444EBC:
	x2 = Mem0[x3:word64]
	x3 = x1
	branch x2 == 0x0000000000000000 l0000000000444ED4
	// succ:  l0000000000444EC8 l0000000000444ED4
l0000000000444EC8:
	w0 = Mem0[x2 + 20:word32]
	w31 = w0 - 0x00000004
	NZCV = cond(w31)
l0000000000444ED4:
	x31 = x1 - x4
	NZCV = cond(x31)
	branch Test(NE,Z) l0000000000444EB8
	// succ:  l0000000000444EDC l0000000000444EB8
l0000000000444EDC:
	x1 = x29 + 0x0000000000000020
	x2 = 0x0000000000000000
	w0 = 0x00000002
	sigprocmask(x0, x1, x2)
	sp = sp + 0xFFFFFFFFFFFFFFF8
	w0 = w19
	x19 = Mem0[sp + 16:word64]
	x29 = Mem0[sp:word64]
	sp = sp + 8
	x30 = Mem0[sp:word64]
	sp = sp + 288
	return
	// succ:  count_all_jobs_exit
l0000000000444EFC:
	w19 = 0x00000000
	goto l0000000000444EDC
	// succ:  l0000000000444EDC
count_all_jobs_exit:


// freeze_jobs_list
// Return size: 0
void freeze_jobs_list()
freeze_jobs_list_entry:
	// succ:  l0000000000444F04
l0000000000444F04:
	sp = fp
	x0 = 0x00000000004E0000
	w1 = 0x00000001
	x0 = x0 + 0xFFFFFFFFFFFFFFC8
	Mem0[x0 + -96:word32] = w1
	return
	// succ:  freeze_jobs_list_exit
freeze_jobs_list_exit:


// unfreeze_jobs_list
// Return size: 0
void unfreeze_jobs_list()
unfreeze_jobs_list_entry:
	// succ:  l0000000000444F18
l0000000000444F18:
	sp = fp
	x0 = 0x00000000004E0000
	x0 = x0 + 0xFFFFFFFFFFFFFFC8
	Mem0[x0 + -96:word32] = 0x00000000
	return
	// succ:  unfreeze_jobs_list_exit
unfreeze_jobs_list_exit:


// set_job_control
// Return size: 0
void set_job_control()
set_job_control_entry:
	// succ:  l0000000000444F28
l0000000000444F28:
	sp = fp
	x2 = 0x00000000004D6000
	x2 = x2 + 0xFFFFFFFFFFFFFD08
	w1 = Mem0[x2 + 84:word32]
	Mem0[x2 + 84:word32] = w0
	NZCV = cond(w1 - w0)
	branch Test(EQ,Z) l0000000000444F50
	// succ:  l0000000000444F40 l0000000000444F50
l0000000000444F40:
	branch w0 == 0x00000000 l0000000000444F50
	// succ:  l0000000000444F44 l0000000000444F50
l0000000000444F44:
	x0 = 0x00000000004E0000
	x0 = x0 + 0xFFFFFFFFFFFFFFC8
	Mem0[x0 + -100:word32] = 0x00000000
	// succ:  l0000000000444F50
l0000000000444F50:
	w0 = w1
	return
	// succ:  set_job_control_exit
set_job_control_exit:


// without_job_control
// Return size: 0
void without_job_control()
without_job_control_entry:
	// succ:  l0000000000444F58
l0000000000444F58:
	sp = fp
	sp = sp + -32
	Mem0[sp:word64] = x29
	sp = sp + 8
	Mem0[sp:word64] = x30
	x29 = x31 + 0x0000000000000000
	x0 = 0x00000000004E0000
	Mem0[sp + 16:word64] = x19
	x0 = x0 + 0xFFFFFFFFFFFFFFC8
	x19 = 0x00000000004D6000
	x19 = x19 + 0xFFFFFFFFFFFFFD08
	Mem0[x0 + -116:word32] = 0x00000000
	call start_pipeline (retsize: 0;)
	x0 = x19 + 0x0000000000000060
	call sh_closepipe (retsize: 0;)
	w0 = 0x00000000
	call delete_all_jobs (retsize: 0;)
	Mem0[x19 + 84:word32] = 0x00000000
	x19 = Mem0[sp + 16:word64]
	x29 = Mem0[sp:word64]
	sp = sp + 8
	x30 = Mem0[sp:word64]
	sp = sp + 32
	return
	// succ:  without_job_control_exit
without_job_control_exit:


// end_job_control
// Return size: 0
void end_job_control()
end_job_control_entry:
	// succ:  l0000000000444F9C
l0000000000444F9C:
	sp = fp
	sp = sp + -32
	Mem0[sp:word64] = x29
	sp = sp + 8
	Mem0[sp:word64] = x30
	x29 = x31 + 0x0000000000000000
	x0 = 0x00000000004DE000
	w0 = Mem0[x0 + 1712:word32]
	Mem0[sp + 16:word64] = x19
	x19 = 0x00000000004D6000
	branch w0 != 0x00000000 l0000000000444FD4
	// succ:  l0000000000444FB8 l0000000000444FD4
l0000000000444FB8:
	x19 = x19 + 0xFFFFFFFFFFFFFD08
	w1 = Mem0[x19 + 124:word32]
	branch (w1 & 0x00000000) == 0x00000000 l0000000000444FE4
	// succ:  l0000000000444FC4 l0000000000444FE4
l0000000000444FC4:
	x19 = Mem0[sp + 16:word64]
	x29 = Mem0[sp:word64]
	sp = sp + 8
	x30 = Mem0[sp:word64]
	sp = sp + 32
	w0 = 0x00000000
	call setpgid (retsize: 0;)
	return
	// succ:  end_job_control_exit
l0000000000444FD4:
	call terminate_stopped_jobs (retsize: 0;)
	x0 = x19 + 0xFFFFFFFFFFFFFD08
	w0 = Mem0[x0 + 124:word32]
	branch (w0 & 0x00000000) == 0x00000000 l0000000000444FF0
	// succ:  l0000000000444FE4 l0000000000444FF0
l0000000000444FE4:
	x19 = Mem0[sp + 16:word64]
	x29 = Mem0[sp:word64]
	sp = sp + 8
	x30 = Mem0[sp:word64]
	sp = sp + 32
	return
	// succ:  end_job_control_exit
l0000000000444FF0:
	w1 = 0x00000001
	call give_terminal_to (retsize: 0;)
	goto l0000000000444FB8
	// succ:  l0000000000444FB8
end_job_control_exit:


// restart_job_control
// Return size: 0
void restart_job_control()
restart_job_control_entry:
	// succ:  l0000000000444FFC
l0000000000444FFC:
	sp = fp
	sp = sp + -16
	Mem0[sp:word64] = x29
	sp = sp + 8
	Mem0[sp:word64] = x30
	x29 = x31 + 0x0000000000000000
	x0 = 0x00000000004D6000
	x0 = x0 + 0xFFFFFFFFFFFFFD08
	w0 = Mem0[x0 + 108:word32]
	w31 = w0 + 0x00000001
	NZCV = cond(w31)
	branch Test(EQ,Z) l000000000044501C
	// succ:  l0000000000445018 l000000000044501C
l0000000000445018:
	close(x0)
	sp = sp + 0xFFFFFFFFFFFFFFF8
	// succ:  l000000000044501C
l000000000044501C:
	x29 = Mem0[sp:word64]
	sp = sp + 8
	x30 = Mem0[sp:word64]
	sp = sp + 16
	w0 = 0x00000000
	// succ:  l0000000000445024_thunk_initialize_job_control
l0000000000445024_thunk_initialize_job_control:
	call initialize_job_control (retsize: 0;)
	return
	// succ:  restart_job_control_exit
restart_job_control_exit:


// set_sigchld_handler
// Return size: 0
void set_sigchld_handler()
set_sigchld_handler_entry:
	// succ:  l0000000000445028
l0000000000445028:
	sp = fp
	x1 = 0x0000000000442000
	w0 = 0x00000011
	x1 = x1 + 0xFFFFFFFFFFFFFA2C
	// succ:  l0000000000445034_thunk_set_signal_handler
l0000000000445034_thunk_set_signal_handler:
	call set_signal_handler (retsize: 0;)
	return
	// succ:  set_sigchld_handler_exit
set_sigchld_handler_exit:


// close_pgrp_pipe
// Return size: 0
void close_pgrp_pipe()
close_pgrp_pipe_entry:
	// succ:  l0000000000445038
l0000000000445038:
	sp = fp
	x0 = 0x00000000004D6000
	x0 = x0 + 0xFFFFFFFFFFFFFD08
	x0 = x0 + 0x0000000000000060
	// succ:  l0000000000445044_thunk_sh_closepipe
l0000000000445044_thunk_sh_closepipe:
	call sh_closepipe (retsize: 0;)
	return
	// succ:  close_pgrp_pipe_exit
close_pgrp_pipe_exit:


// save_pgrp_pipe
// Return size: 0
void save_pgrp_pipe()
save_pgrp_pipe_entry:
	// succ:  l0000000000445048
l0000000000445048:
	sp = fp
	x2 = 0x00000000004D6000
	x2 = x2 + 0xFFFFFFFFFFFFFD08
	w3 = Mem0[x2 + 96:word32]
	Mem0[x0:word32] = w3
	w3 = Mem0[x2 + 100:word32]
	Mem0[x0 + 4:word32] = w3
	branch w1 == 0x00000000 l0000000000445070
	// succ:  l0000000000445064 l0000000000445070
l0000000000445064:
	w0 = 0xFFFFFFFF
	Mem0[x2 + 100:word32] = w0
	Mem0[x2 + 96:word32] = w0
	// succ:  l0000000000445070
l0000000000445070:
	return
	// succ:  save_pgrp_pipe_exit
save_pgrp_pipe_exit:


// restore_pgrp_pipe
// Return size: 0
void restore_pgrp_pipe()
restore_pgrp_pipe_entry:
	// succ:  l0000000000445074
l0000000000445074:
	sp = fp
	w2 = Mem0[x0:word32]
	x1 = 0x00000000004D6000
	x1 = x1 + 0xFFFFFFFFFFFFFD08
	Mem0[x1 + 96:word32] = w2
	w0 = Mem0[x0 + 4:word32]
	Mem0[x1 + 100:word32] = w0
	return
	// succ:  restore_pgrp_pipe_exit
restore_pgrp_pipe_exit:


// fn0000000000445090
// Return size: 0
void fn0000000000445090()
fn0000000000445090_entry:
	// succ:  l0000000000445090
l0000000000445090:
	sp = fp
	sp = sp + -32
	Mem0[sp:word64] = x29
	sp = sp + 8
	Mem0[sp:word64] = x30
	x29 = x31 + 0x0000000000000000
	Mem0[sp + 16:word64] = x19
	w19 = w0
	x0 = 0x00000000004E3000
	w0 = Mem0[x0 + 1200:word32]
	call set_pipestatus_from_exit (retsize: 0;)
	x1 = 0x00000000004E1000
	x1 = x1 + 0x0000000000000008
	x0 = 0x00000000004E1000
	Mem0[x1:word32] = 0x00000000
	x1 = 0x00000000004E3000
	Mem0[x1 + 3484:word32] = 0x00000000
	w0 = Mem0[x0 + 1720:word32]
	x1 = 0x00000000004E3000
	Mem0[x1 + 1624:word32] = 0x00000000
	branch w0 == 0x00000000 l00000000004450DC
	// succ:  l00000000004450D4 l00000000004450DC
l00000000004450D4:
	w0 = w19
	call jump_to_top_level (retsize: 0;)
	// succ:  l00000000004450DC
l00000000004450DC:
	call top_level_cleanup (retsize: 0;)
	goto l00000000004450D4
	// succ:  l00000000004450D4
fn0000000000445090_exit:


// fn00000000004450E4
// Return size: 0
void fn00000000004450E4()
fn00000000004450E4_entry:
	// succ:  l00000000004450E4
l00000000004450E4:
	sp = fp
	sp = sp + -48
	Mem0[sp:word64] = x29
	sp = sp + 8
	Mem0[sp:word64] = x30
	x29 = x31 + 0x0000000000000000
	v8 = sp + 16
	Mem0[v8:word64] = x19
	v8 = v8 + 8
	Mem0[v8:word64] = x20
	x19 = x0
	w20 = w1
	branch x0 == 0x0000000000000000 l00000000004451C4
	// succ:  l00000000004450FC l00000000004451C4
l00000000004450FC:
	v13 = Mem0[x0:byte]
	w0 = (word32) v13
	w31 = w0 - 0x00000040
	NZCV = cond(w31)
	branch Test(EQ,Z) l0000000000445134
	// succ:  l0000000000445108 l0000000000445134
l0000000000445108:
	w31 = w0 - 0x0000002A
	NZCV = cond(w31)
	branch Test(NE,Z) l000000000044513C
	// succ:  l0000000000445110 l000000000044513C
l0000000000445110:
	v17 = Mem0[x19 + 1:byte]
	w0 = (word32) v17
	branch w0 != 0x00000000 l000000000044513C
	// succ:  l0000000000445118 l000000000044513C
l0000000000445118:
	branch w1 != 0x00000000 l000000000044513C
	// succ:  l000000000044511C l000000000044513C
l000000000044511C:
	w0 = 0x00000001
	branch x3 == 0x0000000000000000 l0000000000445154
	// succ:  l0000000000445124 l0000000000445154
l0000000000445124:
	Mem0[x3:word32] = w0
	v19 = sp + 16
	x19 = Mem0[v19:word64]
	v19 = v19 + 8
	x20 = Mem0[v19:word64]
	x29 = Mem0[sp:word64]
	sp = sp + 8
	x30 = Mem0[sp:word64]
	sp = sp + 48
	return
	// succ:  fn00000000004450E4_exit
l0000000000445134:
	v22 = Mem0[x19 + 1:byte]
	w0 = (word32) v22
	branch w0 == 0x00000000 l00000000004451AC
	// succ:  l000000000044513C l00000000004451AC
l000000000044513C:
	x0 = x19
	Mem0[x29 + 32:word64] = x2
	Mem0[x29 + 40:word64] = x3
	call valid_array_reference (retsize: 0;)
	branch w0 != 0x00000000 l0000000000445160
	// succ:  l0000000000445150 l0000000000445160
l0000000000445150:
	w0 = 0x00000000
	// succ:  l0000000000445154
l0000000000445154:
	v21 = sp + 16
	x19 = Mem0[v21:word64]
	v21 = v21 + 8
	x20 = Mem0[v21:word64]
	x29 = Mem0[sp:word64]
	sp = sp + 8
	x30 = Mem0[sp:word64]
	sp = sp + 48
	return
	// succ:  fn00000000004450E4_exit
l0000000000445160:
	x0 = x19
	w1 = 0x0000005B
	call mbschr (retsize: 0;)
	x2 = Mem0[x29 + 32:word64]
	x3 = Mem0[x29 + 40:word64]
	branch x0 == 0x0000000000000000 l0000000000445150
	// succ:  l0000000000445178 l0000000000445150
l0000000000445178:
	v23 = Mem0[x0 + 1:byte]
	w1 = (word32) v23
	w31 = w1 - 0x00000040
	NZCV = cond(w31)
	branch Test(EQ,Z) l00000000004451A0
	// succ:  l0000000000445184 l00000000004451A0
l0000000000445184:
	w31 = w1 - 0x0000002A
	NZCV = cond(w31)
	branch Test(NE,Z) l0000000000445150
	// succ:  l000000000044518C l0000000000445150
l000000000044518C:
	v24 = Mem0[x0 + 2:byte]
	w0 = (word32) v24
	w31 = w0 - 0x0000005D
	NZCV = cond(w31)
	branch Test(NE,Z) l0000000000445150
	// succ:  l0000000000445198 l0000000000445150
l0000000000445198:
	branch w20 == 0x00000000 l000000000044511C
	// succ:  l000000000044519C l000000000044511C
l000000000044519C:
	goto l0000000000445150
	// succ:  l0000000000445150
l00000000004451A0:
	v25 = Mem0[x0 + 2:byte]
	w0 = (word32) v25
	w31 = w0 - 0x0000005D
	NZCV = cond(w31)
	branch Test(NE,Z) l0000000000445150
	// succ:  l00000000004451AC l0000000000445150
l00000000004451AC:
	w20 = w20 & 0x00000003
	branch w20 == 0x00000000 l000000000044511C
	// succ:  l00000000004451B4 l000000000044511C
l00000000004451B4:
	branch x2 == 0x0000000000000000 l000000000044511C
	// succ:  l00000000004451B8 l000000000044511C
l00000000004451B8:
	w0 = 0x00000001
	Mem0[x2:word32] = w0
	goto l000000000044511C
	// succ:  l000000000044511C
l00000000004451C4:
	branch x2 == 0x0000000000000000 l00000000004451CC
	// succ:  l00000000004451C8 l00000000004451CC
l00000000004451C8:
	Mem0[x2:word32] = w0
	// succ:  l00000000004451CC
l00000000004451CC:
	branch x3 == 0x0000000000000000 l0000000000445150
	// succ:  l00000000004451D0 l0000000000445150
l00000000004451D0:
	Mem0[x3:word32] = 0x00000000
	goto l0000000000445150
	// succ:  l0000000000445150
fn00000000004450E4_exit:


// fn00000000004451D8
// Return size: 0
void fn00000000004451D8()
fn00000000004451D8_entry:
	// succ:  l00000000004451D8
l00000000004451D8:
	sp = fp
	sp = sp + -96
	Mem0[sp:word64] = x29
	sp = sp + 8
	Mem0[sp:word64] = x30
	x29 = x31 + 0x0000000000000000
	v8 = sp + 16
	Mem0[v8:word64] = x19
	v8 = v8 + 8
	Mem0[v8:word64] = x20
	v11 = sp + 32
	Mem0[v11:word64] = x21
	v11 = v11 + 8
	Mem0[v11:word64] = x22
	v14 = sp + 48
	Mem0[v14:word64] = x23
	v14 = v14 + 8
	Mem0[v14:word64] = x24
	Mem0[sp + 64:word64] = x25
	x20 = x0
	x22 = x1
	branch x0 == 0x0000000000000000 l00000000004454A0
	// succ:  l00000000004451FC l00000000004454A0
l00000000004451FC:
	v19 = Mem0[x0:byte]
	w1 = (word32) v19
	x19 = 0x0000000000000000
	branch w1 == 0x00000000 l0000000000445230
	// succ:  l0000000000445208 l0000000000445230
l0000000000445208:
	v20 = Mem0[x0 + 1:byte]
	w1 = (word32) v20
	x19 = 0x0000000000000001
	branch w1 == 0x00000000 l0000000000445230
	// succ:  l0000000000445214 l0000000000445230
l0000000000445214:
	v21 = Mem0[x0 + 2:byte]
	w1 = (word32) v21
	x19 = 0x0000000000000002
	branch w1 == 0x00000000 l0000000000445230
	// succ:  l0000000000445220 l0000000000445230
l0000000000445220:
	Mem0[x29 + 80:word64] = x2
	strlen(x0)
	sp = sp + 0xFFFFFFFFFFFFFFF8
	x2 = Mem0[x29 + 80:word64]
l0000000000445230:
	w2 = w2 - 0x00000001
	w31 = w2 - 0x00000003
	NZCV = cond(w31)
	x19 = x20 + x19
	branch Test(ULE,ZC) l000000000044525C
	// succ:  l0000000000445240 l000000000044525C
l0000000000445240:
	x0 = x20
	v29 = sp + 16
	x19 = Mem0[v29:word64]
	v29 = v29 + 8
	x20 = Mem0[v29:word64]
	v30 = sp + 32
	x21 = Mem0[v30:word64]
	v30 = v30 + 8
	x22 = Mem0[v30:word64]
	v31 = sp + 48
	x23 = Mem0[v31:word64]
	v31 = v31 + 8
	x24 = Mem0[v31:word64]
	x25 = Mem0[sp + 64:word64]
	x29 = Mem0[sp:word64]
	sp = sp + 8
	x30 = Mem0[sp:word64]
	sp = sp + 96
	return
	// succ:  fn00000000004451D8_exit
l000000000044525C:
	x0 = 0x00000000004AD000
	x0 = x0 + 0xFFFFFFFFFFFFF908
	v27 = Mem0[x0 + (uint64) ((uint32) w2):byte]
	w1 = (word32) v27
	x3 = 0x0000000000445274
	x1 = x3 + (int64) ((int8) w1)
l00000000004454A0:
	w2 = w2 - 0x00000001
	x19 = x0
	w31 = w2 - 0x00000003
	NZCV = cond(w31)
	x19 = x20 + x19
	branch Test(UGT,ZC) l0000000000445240
	// succ:  l00000000004454B4 l0000000000445240
l00000000004454B4:
	goto l000000000044525C
	// succ:  l000000000044525C
fn00000000004451D8_exit:


// fn00000000004454B8
// Return size: 0
void fn00000000004454B8()
fn00000000004454B8_entry:
	// succ:  l00000000004454B8
l00000000004454B8:
	sp = fp
	sp = sp + -112
	Mem0[sp:word64] = x29
	sp = sp + 8
	Mem0[sp:word64] = x30
	x29 = x31 + 0x0000000000000000
	v8 = sp + 16
	Mem0[v8:word64] = x19
	v8 = v8 + 8
	Mem0[v8:word64] = x20
	v11 = sp + 32
	Mem0[v11:word64] = x21
	v11 = v11 + 8
	Mem0[v11:word64] = x22
	v14 = sp + 48
	Mem0[v14:word64] = x23
	v14 = v14 + 8
	Mem0[v14:word64] = x24
	v17 = sp + 80
	Mem0[v17:word64] = x27
	v17 = v17 + 8
	Mem0[v17:word64] = x28
	v20 = sp + 64
	Mem0[v20:word64] = x25
	v20 = v20 + 8
	Mem0[v20:word64] = x26
	Mem0[x29 + 96:word64] = x3
	x20 = x0
	x21 = x1
	w24 = w2
	x28 = x4
	v28 = Mem0[x1:byte]
	w19 = (word32) v28
	w0 = w1
	branch x1 == 0x0000000000000000 l0000000000445518
	// succ:  l00000000004454F4 l0000000000445518
l00000000004454F4:
	branch w19 == 0x00000000 l0000000000445654
	// succ:  l00000000004454F8 l0000000000445654
l00000000004454F8:
	v31 = Mem0[x1 + 1:byte]
	w1 = (word32) v31
	w0 = 0x00000001
	branch w1 == 0x00000000 l0000000000445518
	// succ:  l0000000000445504 l0000000000445518
l0000000000445504:
	v32 = Mem0[x21 + 2:byte]
	w1 = (word32) v32
	w0 = 0x00000002
	branch w1 == 0x00000000 l0000000000445518
	// succ:  l0000000000445510 l0000000000445518
l0000000000445510:
	x0 = x21
	strlen(x0)
	sp = sp + 0xFFFFFFFFFFFFFFF8
	// succ:  l0000000000445518
l0000000000445518:
	w31 = w19 - 0x0000002A
	NZCV = cond(w31)
	branch Test(NE,Z) l0000000000445848
	// succ:  l0000000000445520 l0000000000445848
l0000000000445520:
	v36 = Mem0[x21 + 1:byte]
	w1 = (word32) v36
	x26 = 0x00000000004E1000
	w31 = w1 - 0x00000028
	NZCV = cond(w31)
	branch Test(EQ,Z) l0000000000445888
	// succ:  l0000000000445530 l0000000000445888
l0000000000445530:
	x1 = x21 + (int64) ((int32) w0)
	v37 = Mem0[x1 + -1:byte]
	w1 = (word32) v37
	w31 = w1 - 0x0000002A
	NZCV = cond(w31)
	branch Test(EQ,Z) l00000000004458A4
	// succ:  l0000000000445540 l00000000004458A4
l0000000000445540:
	w0 = w0 + 0x00000003
l0000000000445568:
	w0 = 0x0000002A
	Mem0[x19:byte] = (byte) w0
	v42 = Mem0[x21:byte]
	w5 = (word32) v42
	x6 = x19 + 0x0000000000000001
	x7 = x21
	branch w5 == 0x00000000 l0000000000445590
	// succ:  l0000000000445580 l0000000000445590
l0000000000445580:
	x7 = x21
	// succ:  l0000000000445584
l0000000000445584:
	Mem0[x6:byte] = (byte) w5
	x6 = x6 + 1
	x7 = x7 + 1
	v44 = Mem0[x7:byte]
	w5 = (word32) v44
	branch w5 != 0x00000000 l0000000000445584
	// succ:  l0000000000445590 l0000000000445584
l0000000000445590:
	v45 = Mem0[x7 + -1:byte]
	w0 = (word32) v45
	w31 = w0 - 0x0000002A
	NZCV = cond(w31)
	branch Test(EQ,Z) l0000000000445728
	// succ:  l000000000044559C l0000000000445728
l000000000044559C:
	w1 = 0x0000002A
	x0 = x6 + 0x0000000000000001
	Mem0[x6:byte] = (byte) w1
	// succ:  l00000000004455A8
l00000000004455A8:
	Mem0[x0:byte] = 0x00
	// succ:  l00000000004455AC
l00000000004455AC:
	w0 = Mem0[x26 + 616:word32]
	w2 = 0x00000020
	NZCV = cond(w0 - w31)
l0000000000445654:
	x1 = 0x00000000004AD000
	x0 = 0x0000000000000003
	x1 = x1 + 0xFFFFFFFFFFFFFA20
	w2 = 0x00000FBB
	call sh_xmalloc (retsize: 0;)
	v39 = Mem0[x21:byte]
	w5 = (word32) v39
	x26 = 0x00000000004E1000
	w31 = w5 - 0x0000002A
	NZCV = cond(w31)
	x19 = x0
	branch Test(NE,Z) l0000000000445568
	// succ:  l000000000044567C l0000000000445568
l000000000044567C:
	v40 = Mem0[x21 + 1:byte]
	w0 = (word32) v40
	x6 = x19
	w31 = w0 - 0x00000028
	NZCV = cond(w31)
	branch Test(NE,Z) l0000000000445580
	// succ:  l000000000044568C l0000000000445580
l000000000044568C:
	w0 = Mem0[x26 + 616:word32]
	branch w0 != 0x00000000 l0000000000445568
	// succ:  l0000000000445694 l0000000000445568
l0000000000445694:
	x6 = x19
	goto l0000000000445580
	// succ:  l0000000000445580
l0000000000445728:
	v46 = Mem0[x6 + -2:byte]
	w1 = (word32) v46
	x0 = x6
	w31 = w1 - 0x0000005C
	NZCV = cond(w31)
	branch Test(NE,Z) l00000000004455A8
	// succ:  l0000000000445738 l00000000004455A8
l0000000000445738:
	goto l000000000044559C
	// succ:  l000000000044559C
l0000000000445848:
	w0 = w0 + 0x00000003
l0000000000445888:
	w1 = Mem0[x26 + 616:word32]
	branch w1 == 0x00000000 l0000000000445530
	// succ:  l0000000000445890 l0000000000445530
l0000000000445890:
	goto l0000000000445540
	// succ:  l0000000000445540
l00000000004458A4:
	x19 = x21
	goto l00000000004455AC
	// succ:  l00000000004455AC
fn00000000004454B8_exit:


// fn00000000004458AC
// Return size: 0
void fn00000000004458AC()
fn00000000004458AC_entry:
	// succ:  l00000000004458AC
l00000000004458AC:
	sp = fp
	sp = sp + -144
	Mem0[sp:word64] = x29
	sp = sp + 8
	Mem0[sp:word64] = x30
	x29 = x31 + 0x0000000000000000
	v8 = sp + 32
	Mem0[v8:word64] = x21
	v8 = v8 + 8
	Mem0[v8:word64] = x22
	v11 = sp + 64
	Mem0[v11:word64] = x25
	v11 = v11 + 8
	Mem0[v11:word64] = x26
	v14 = sp + 80
	Mem0[v14:word64] = x27
	v14 = v14 + 8
	Mem0[v14:word64] = x28
	v17 = sp + 16
	Mem0[v17:word64] = x19
	v17 = v17 + 8
	Mem0[v17:word64] = x20
	v20 = sp + 48
	Mem0[v20:word64] = x23
	v20 = v20 + 8
	Mem0[v20:word64] = x24
	x27 = x3
	v23 = Mem0[x3:byte]
	w3 = (word32) v23
	Mem0[x29 + 104:word64] = 0x0000000000000000
	w31 = w3 - 0x00000027
	NZCV = cond(w31)
	Mem0[x29 + 112:word64] = x1
	Mem0[x29 + 128:word64] = x2
	x22 = x0
	w25 = w4
	branch Test(EQ,Z) l0000000000445B10
	// succ:  l00000000004458EC l0000000000445B10
l00000000004458EC:
	x0 = 0x00000000004C2000
	x0 = x0 + 0xFFFFFFFFFFFFFCC0
	x2 = Mem0[x29 + 128:word64]
	Mem0[x29 + 120:word64] = x0
	x0 = 0x00000000004AD000
	x0 = x0 + 0xFFFFFFFFFFFFFA20
	w21 = Mem0[x2:word32]
	x28 = 0x0000000000000000
	w26 = w25 & 0x00000010
	Mem0[x29 + 136:word64] = x0
l0000000000445B10:
	v35 = Mem0[x27 + 1:byte]
	w0 = (word32) v35
	branch w0 != 0x00000000 l00000000004458EC
	// succ:  l0000000000445B18 l00000000004458EC
l0000000000445B18:
	Mem0[x29 + 96:word64] = 0x0000000000000000
	__ctype_get_mb_cur_max()
	sp = sp + 0xFFFFFFFFFFFFFFF8
	x31 = x0 - 0x0000000000000001
	NZCV = cond(x31)
	branch Test(ULE,ZC) l0000000000445BCC
	// succ:  l0000000000445B28 l0000000000445BCC
l0000000000445B28:
	x1 = Mem0[x29 + 128:word64]
	w20 = Mem0[x1:word32]
l0000000000445B40:
	x23 = 0x00000000004C2000
	x23 = x23 + 0xFFFFFFFFFFFFFCC0
l0000000000445BCC:
	x0 = Mem0[x29 + 128:word64]
	x24 = 0x0000000000000000
	w20 = Mem0[x0:word32]
	goto l0000000000445B40
	// succ:  l0000000000445B40
fn00000000004458AC_exit:


// fn0000000000445C24
// Return size: 0
void fn0000000000445C24()
fn0000000000445C24_entry:
	// succ:  l0000000000445C24
l0000000000445C24:
	sp = fp
	sp = sp + -128
	Mem0[sp:word64] = x29
	sp = sp + 8
	Mem0[sp:word64] = x30
	x29 = x31 + 0x0000000000000000
	v8 = sp + 16
	Mem0[v8:word64] = x19
	v8 = v8 + 8
	Mem0[v8:word64] = x20
	v11 = sp + 32
	Mem0[v11:word64] = x21
	v11 = v11 + 8
	Mem0[v11:word64] = x22
	v14 = sp + 48
	Mem0[v14:word64] = x23
	v14 = v14 + 8
	Mem0[v14:word64] = x24
	v17 = sp + 64
	Mem0[v17:word64] = x25
	v17 = v17 + 8
	Mem0[v17:word64] = x26
	Mem0[sp + 80:word64] = x27
	x19 = x0
	x20 = x1
	w21 = w2
	branch x0 == 0x0000000000000000 l0000000000445D94
	// succ:  l0000000000445C50 l0000000000445D94
l0000000000445C50:
	v24 = Mem0[x0:byte]
	w0 = (word32) v24
	branch w0 == 0x00000000 l0000000000445C64
	// succ:  l0000000000445C58 l0000000000445C64
l0000000000445C58:
	branch x1 == 0x0000000000000000 l0000000000445C64
	// succ:  l0000000000445C5C l0000000000445C64
l0000000000445C5C:
	v25 = Mem0[x1:byte]
	w0 = (word32) v25
	branch w0 != 0x00000000 l0000000000445CAC
	// succ:  l0000000000445C64 l0000000000445CAC
l0000000000445C64:
	x0 = x19
	strlen(x0)
	sp = sp + 0xFFFFFFFFFFFFFFF8
	x1 = 0x00000000004AD000
	w2 = 0x00000F6B
	x1 = x1 + 0xFFFFFFFFFFFFFA20
	x0 = x0 + 0x0000000000000001
	call sh_xmalloc (retsize: 0;)
	x1 = x19
	strcpy(x0, x1)
	sp = sp + 0xFFFFFFFFFFFFFFF8
	x20 = x0
	// succ:  l0000000000445C8C
l0000000000445C8C:
	x0 = x20
	v26 = sp + 32
	x21 = Mem0[v26:word64]
	v26 = v26 + 8
	x22 = Mem0[v26:word64]
	v27 = sp + 16
	x19 = Mem0[v27:word64]
	v27 = v27 + 8
	x20 = Mem0[v27:word64]
	v28 = sp + 48
	x23 = Mem0[v28:word64]
	v28 = v28 + 8
	x24 = Mem0[v28:word64]
	v29 = sp + 64
	x25 = Mem0[v29:word64]
	v29 = v29 + 8
	x26 = Mem0[v29:word64]
	x27 = Mem0[sp + 80:word64]
	x29 = Mem0[sp:word64]
	sp = sp + 8
	x30 = Mem0[sp:word64]
	sp = sp + 128
	return
	// succ:  fn0000000000445C24_exit
l0000000000445CAC:
	__ctype_get_mb_cur_max()
	sp = sp + 0xFFFFFFFFFFFFFFF8
	x31 = x0 - 0x0000000000000001
	NZCV = cond(x31)
	branch Test(ULE,ZC) l0000000000445D50
	// succ:  l0000000000445CB8 l0000000000445D50
l0000000000445CB8:
	x0 = x29 + 0x0000000000000068
	x1 = 0x0000000000000000
	x2 = x20
	call xdupmbstowcs (retsize: 0;)
	x31 = x0 + 0x0000000000000001
	NZCV = cond(x31)
	branch Test(EQ,Z) l0000000000445DB8
	// succ:  l0000000000445CD0 l0000000000445DB8
l0000000000445CD0:
	x0 = x29 + 0x0000000000000070
	x1 = 0x0000000000000000
	x2 = x19
	call xdupmbstowcs (retsize: 0;)
	x31 = x0 + 0x0000000000000001
	NZCV = cond(x31)
	branch Test(EQ,Z) l000000000044601C
	// succ:  l0000000000445CE8 l000000000044601C
l0000000000445CE8:
	w21 = w21 - 0x00000001
	w31 = w21 - 0x00000003
	NZCV = cond(w31)
	x20 = Mem0[x29 + 112:word64]
	x22 = Mem0[x29 + 104:word64]
	branch Test(ULE,ZC) l0000000000445DE0
	// succ:  l0000000000445CFC l0000000000445DE0
l0000000000445CFC:
	Mem0[x29 + 120:word64] = x20
	x0 = x20
	x20 = 0x00000000004AD000
	x20 = x20 + 0xFFFFFFFFFFFFFA20
	x1 = x20
	w2 = 0x00000F87
	call sh_xfree (retsize: 0;)
	x0 = Mem0[x29 + 104:word64]
	x1 = x20
	w2 = 0x00000F88
	call sh_xfree (retsize: 0;)
	x0 = x19
	strlen(x0)
	sp = sp + 0xFFFFFFFFFFFFFFF8
	x1 = x20
	w2 = 0x00000F89
	x0 = x0 + 0x0000000000000001
	call sh_xmalloc (retsize: 0;)
	x1 = x19
	strcpy(x0, x1)
	sp = sp + 0xFFFFFFFFFFFFFFF8
	x20 = x0
	goto l0000000000445C8C
	// succ:  l0000000000445C8C
l0000000000445D50:
	x1 = x20
	x0 = x19
	w2 = w21
	call fn00000000004451D8 (retsize: 0;)
	x31 = x19 - x0
	NZCV = cond(x31)
	x20 = x0
	branch Test(NE,Z) l0000000000445C8C
	// succ:  l0000000000445D6C l0000000000445C8C
l0000000000445D6C:
	strlen(x0)
	sp = sp + 0xFFFFFFFFFFFFFFF8
	w2 = 0x00000F9B
	// succ:  l0000000000445D74
l0000000000445D74:
	x1 = 0x00000000004AD000
	x1 = x1 + 0xFFFFFFFFFFFFFA20
	x0 = x0 + 0x0000000000000001
	call sh_xmalloc (retsize: 0;)
	x1 = x20
	strcpy(x0, x1)
	sp = sp + 0xFFFFFFFFFFFFFFF8
	x20 = x0
	goto l0000000000445C8C
	// succ:  l0000000000445C8C
l0000000000445D94:
	x20 = x0
	x0 = x20
	v30 = sp + 32
	x21 = Mem0[v30:word64]
	v30 = v30 + 8
	x22 = Mem0[v30:word64]
	v31 = sp + 16
	x19 = Mem0[v31:word64]
	v31 = v31 + 8
	x20 = Mem0[v31:word64]
	v32 = sp + 48
	x23 = Mem0[v32:word64]
	v32 = v32 + 8
	x24 = Mem0[v32:word64]
	v33 = sp + 64
	x25 = Mem0[v33:word64]
	v33 = v33 + 8
	x26 = Mem0[v33:word64]
	x27 = Mem0[sp + 80:word64]
	x29 = Mem0[sp:word64]
	sp = sp + 8
	x30 = Mem0[sp:word64]
	sp = sp + 128
	return
	// succ:  fn0000000000445C24_exit
l0000000000445DB8:
	x1 = x20
	x0 = x19
	w2 = w21
	call fn00000000004451D8 (retsize: 0;)
	x31 = x19 - x0
	NZCV = cond(x31)
	x20 = x0
	branch Test(NE,Z) l0000000000445C8C
	// succ:  l0000000000445DD4 l0000000000445C8C
l0000000000445DD4:
	strlen(x0)
	sp = sp + 0xFFFFFFFFFFFFFFF8
	w2 = 0x00000F79
	goto l0000000000445D74
	// succ:  l0000000000445D74
l0000000000445DE0:
	x1 = 0x00000000004AD000
	x1 = x1 + 0xFFFFFFFFFFFFF90C
	v39 = Mem0[x1 + (uint64) ((uint32) w21):byte]
	w2 = (word32) v39
	x3 = 0x0000000000445DF8
	x2 = x3 + (int64) ((int8) w2)
l000000000044601C:
	x22 = 0x00000000004AD000
	x0 = Mem0[x29 + 104:word64]
	x22 = x22 + 0xFFFFFFFFFFFFFA20
	x1 = x22
	w2 = 0x00000F7E
	call sh_xfree (retsize: 0;)
	x1 = x20
	x0 = x19
	w2 = w21
	call fn00000000004451D8 (retsize: 0;)
	x31 = x19 - x0
	NZCV = cond(x31)
	x20 = x0
	branch Test(NE,Z) l0000000000445C8C
	// succ:  l0000000000446050 l0000000000445C8C
l0000000000446050:
	strlen(x0)
	sp = sp + 0xFFFFFFFFFFFFFFF8
	w2 = 0x00000F80
	x1 = x22
	x0 = x0 + 0x0000000000000001
	call sh_xmalloc (retsize: 0;)
	x1 = x20
	strcpy(x0, x1)
	sp = sp + 0xFFFFFFFFFFFFFFF8
	x20 = x0
	goto l0000000000445C8C
	// succ:  l0000000000445C8C
fn0000000000445C24_exit:


// fn0000000000446080
// Return size: 0
void fn0000000000446080()
fn0000000000446080_entry:
	// succ:  l0000000000446080
l0000000000446080:
	sp = fp
	sp = sp + -16
	Mem0[sp:word64] = x29
	sp = sp + 8
	Mem0[sp:word64] = x30
	x29 = x31 + 0x0000000000000000
	x1 = 0x00000000004AD000
	x1 = x1 + 0xFFFFFFFFFFFFFA20
	w2 = 0x00000DCC
	x0 = 0x0000000000000003
	call sh_xmalloc (retsize: 0;)
	w2 = 0x0000007F
	Mem0[x0:byte] = (byte) w2
	Mem0[x0 + 1:byte] = 0x00
	x29 = Mem0[sp:word64]
	sp = sp + 8
	x30 = Mem0[sp:word64]
	sp = sp + 16
	return
	// succ:  fn0000000000446080_exit
fn0000000000446080_exit:


// sub_append_string
// Return size: 0
void sub_append_string()
sub_append_string_entry:
	// succ:  l00000000004460B0
l00000000004460B0:
	sp = fp
	sp = sp + -80
	Mem0[sp:word64] = x29
	sp = sp + 8
	Mem0[sp:word64] = x30
	x29 = x31 + 0x0000000000000000
	v8 = sp + 16
	Mem0[v8:word64] = x19
	v8 = v8 + 8
	Mem0[v8:word64] = x20
	v11 = sp + 32
	Mem0[v11:word64] = x21
	v11 = v11 + 8
	Mem0[v11:word64] = x22
	v14 = sp + 48
	Mem0[v14:word64] = x23
	v14 = v14 + 8
	Mem0[v14:word64] = x24
	x19 = x0
	x20 = x1
	x21 = x2
	branch x0 == 0x0000000000000000 l000000000044612C
	// succ:  l00000000004460D4 l000000000044612C
l00000000004460D4:
	v19 = Mem0[x0:byte]
	w1 = (word32) v19
	branch w1 != 0x00000000 l0000000000446144
	// succ:  l00000000004460DC l0000000000446144
l00000000004460DC:
	x23 = 0x0000000000000000
	w22 = w23
	// succ:  l00000000004460E4
l00000000004460E4:
	w0 = Mem0[x21:word32]
	w1 = Mem0[x3:word32]
	x24 = 0x00000000004AD000
	w1 = w1 - w0
	NZCV = cond(w22 - w1)
	branch Test(GE,NZV) l000000000044616C
	// succ:  l00000000004460FC l000000000044616C
l00000000004460FC:
	x1 = x19
	x2 = x23
	x0 = x20 + (int64) ((int32) w0)
	memcpy(x0, x1, x2)
	sp = sp + 0xFFFFFFFFFFFFFFF8
	w1 = Mem0[x21:word32]
	x0 = x19
	w22 = w22 + w1
	Mem0[x21:word32] = w22
	Mem0[x20 + (int64) ((int32) w22):byte] = 0x00
	x1 = x24 + 0xFFFFFFFFFFFFFA20
	w2 = 0x0000029F
	call sh_xfree (retsize: 0;)
	// succ:  l000000000044612C
l000000000044612C:
	x0 = x20
	v27 = sp + 32
	x21 = Mem0[v27:word64]
	v27 = v27 + 8
	x22 = Mem0[v27:word64]
	v28 = sp + 16
	x19 = Mem0[v28:word64]
	v28 = v28 + 8
	x20 = Mem0[v28:word64]
	v29 = sp + 48
	x23 = Mem0[v29:word64]
	v29 = v29 + 8
	x24 = Mem0[v29:word64]
	x29 = Mem0[sp:word64]
	sp = sp + 8
	x30 = Mem0[sp:word64]
	sp = sp + 80
	return
	// succ:  sub_append_string_exit
l0000000000446144:
	v30 = Mem0[x0 + 1:byte]
	w1 = (word32) v30
	branch w1 == 0x00000000 l00000000004461B0
	// succ:  l000000000044614C l00000000004461B0
l000000000044614C:
	v31 = Mem0[x0 + 2:byte]
	w1 = (word32) v31
	branch w1 == 0x00000000 l00000000004461BC
	// succ:  l0000000000446154 l00000000004461BC
l0000000000446154:
	Mem0[x29 + 64:word64] = x3
	strlen(x0)
	sp = sp + 0xFFFFFFFFFFFFFFF8
	w22 = w0
l000000000044616C:
	w0 = w22 + w0
l00000000004461B0:
	x23 = 0x0000000000000001
	w22 = w23
	goto l00000000004460E4
	// succ:  l00000000004460E4
l00000000004461BC:
	x23 = 0x0000000000000002
	w22 = w23
	goto l00000000004460E4
	// succ:  l00000000004460E4
sub_append_string_exit:


// extract_command_subst
// Return size: 0
void extract_command_subst()
extract_command_subst_entry:
	// succ:  l00000000004461C8
l00000000004461C8:
	sp = fp
	v5 = Mem0[x1:int32]
	x4 = (word64) v5
	x7 = x1
	v9 = Mem0[x0 + x4:byte]
	w8 = (word32) v9
	w5 = w2
	w31 = w8 - 0x00000028
	NZCV = cond(w31)
	x4 = x0 + x4
	branch Test(EQ,Z) l000000000044620C
	// succ:  l00000000004461E4 l000000000044620C
l00000000004461E4:
	x1 = 0x00000000004E1000
	x1 = x1 + 0x0000000000000008
	w1 = Mem0[x1 + 4:word32]
	w3 = 0x00000040
	NZCV = cond(w1 - w31)
l000000000044620C:
	x2 = 0x00000000004AD000
	x3 = 0x00000000004C4000
	x4 = 0x00000000004AE000
	x2 = x2 + 0xFFFFFFFFFFFFFA30
	x3 = x3 + 0x0000000000000028
	x4 = x4 + 0x0000000000000718
	w5 = w5 | 0x00000008
	// succ:  l0000000000446228_thunk_fn000000000044622C
l0000000000446228_thunk_fn000000000044622C:
	call fn000000000044622C (retsize: 0;)
	return
	// succ:  extract_command_subst_exit
extract_command_subst_exit:


// fn000000000044622C
// Return size: 0
void fn000000000044622C()
fn000000000044622C_entry:
	// succ:  l000000000044622C
l000000000044622C:
	sp = v3
	sp = sp + -192
	Mem0[sp:word64] = x29
	sp = sp + 8
	Mem0[sp:word64] = x30
	x29 = x31 + 0x0000000000000000
	v7 = sp + 16
	Mem0[v7:word64] = x19
	v7 = v7 + 8
	Mem0[v7:word64] = x20
	w20 = Mem0[x1:word32]
	v12 = sp + 32
	Mem0[v12:word64] = x21
	v12 = v12 + 8
	Mem0[v12:word64] = x22
fn000000000044622C_exit:


// fn0000000000447728
// Return size: 0
void fn0000000000447728()
fn0000000000447728_entry:
	// succ:  l0000000000447728
l0000000000447728:
	sp = fp
	sp = sp + -160
	Mem0[sp:word64] = x29
	sp = sp + 8
	Mem0[sp:word64] = x30
	x29 = x31 + 0x0000000000000000
	v8 = sp + 80
	Mem0[v8:word64] = x27
	v8 = v8 + 8
	Mem0[v8:word64] = x28
	v10 = Mem0[x1:int32]
	x28 = (word64) v10
	x27 = x0
	x0 = x0 + x28
	v14 = sp + 16
	Mem0[v14:word64] = x19
	v14 = v14 + 8
	Mem0[v14:word64] = x20
	v17 = sp + 32
	Mem0[v17:word64] = x21
	v17 = v17 + 8
	Mem0[v17:word64] = x22
	v20 = sp + 48
	Mem0[v20:word64] = x23
	v20 = v20 + 8
	Mem0[v20:word64] = x24
	v23 = sp + 64
	Mem0[v23:word64] = x25
	v23 = v23 + 8
	Mem0[v23:word64] = x26
	Mem0[x29 + 112:word64] = x1
	w23 = w2
	Mem0[x29 + 96:word64] = 0x0000000000000000
	strlen(x0)
	sp = sp + 0xFFFFFFFFFFFFFFF8
	x28 = x0 + x28
	x2 = 0x00000000004AD000
	x1 = x2 + 0xFFFFFFFFFFFFFA20
	x28 = x27 + x28
	w2 = 0x00000311
	x0 = x0 + 0x0000000000000001
	Mem0[x29 + 120:word64] = x28
	call sh_xmalloc (retsize: 0;)
	x3 = Mem0[x29 + 112:word64]
	x2 = 0x00000000004E1000
	w20 = Mem0[x3:word32]
	x2 = x2 + 0x0000000000000008
fn0000000000447728_exit:


// extract_arithmetic_subst
// Return size: 0
void extract_arithmetic_subst()
extract_arithmetic_subst_entry:
	// succ:  l0000000000447AF8
l0000000000447AF8:
	sp = fp
	x2 = 0x00000000004AD000
	x3 = 0x00000000004AD000
	x4 = 0x00000000004BD000
	x2 = x2 + 0xFFFFFFFFFFFFFA60
	x3 = x3 + 0xFFFFFFFFFFFFFA68
	x4 = x4 + 0x00000000000005E8
	w5 = 0x00000000
	// succ:  l0000000000447B14_thunk_fn000000000044622C
l0000000000447B14_thunk_fn000000000044622C:
	call fn000000000044622C (retsize: 0;)
	return
	// succ:  extract_arithmetic_subst_exit
extract_arithmetic_subst_exit:


// extract_process_subst
// Return size: 0
void extract_process_subst()
extract_process_subst_entry:
	// succ:  l0000000000447B18
l0000000000447B18:
	sp = fp
	x4 = x1
	x3 = 0x00000000004C4000
	x1 = x2
	x2 = x4
	x4 = 0x00000000004AE000
	x3 = x3 + 0x0000000000000028
	x4 = x4 + 0x0000000000000718
	w5 = 0x00000000
	// succ:  l0000000000447B38_thunk_fn000000000044622C
l0000000000447B38_thunk_fn000000000044622C:
	call fn000000000044622C (retsize: 0;)
	return
	// succ:  extract_process_subst_exit
extract_process_subst_exit:


// extract_array_assignment_list
// Return size: 0
void extract_array_assignment_list()
extract_array_assignment_list_entry:
	// succ:  l0000000000447B3C
l0000000000447B3C:
	sp = fp
	sp = sp + -48
	Mem0[sp:word64] = x29
	sp = sp + 8
	Mem0[sp:word64] = x30
	x29 = x31 + 0x0000000000000000
	v8 = sp + 16
	Mem0[v8:word64] = x19
	v8 = v8 + 8
	Mem0[v8:word64] = x20
	Mem0[sp + 32:word64] = x21
	x19 = x0
	x20 = x1
	strlen(x0)
	sp = sp + 0xFFFFFFFFFFFFFFF8
	x2 = x0
	x0 = x19 + (int64) ((int32) w0)
	v15 = Mem0[x0 + -1:byte]
	w1 = (word32) v15
	x0 = 0x0000000000000000
	w31 = w1 - 0x00000029
	NZCV = cond(w31)
	branch Test(NE,Z) l0000000000447B88
	// succ:  l0000000000447B70 l0000000000447B88
l0000000000447B70:
	w21 = w2 - 0x00000001
	w1 = Mem0[x20:word32]
	x0 = x19
	w2 = w21
	call substring (retsize: 0;)
	Mem0[x20:word32] = w21
	// succ:  l0000000000447B88
l0000000000447B88:
	v21 = sp + 16
	x19 = Mem0[v21:word64]
	v21 = v21 + 8
	x20 = Mem0[v21:word64]
	x21 = Mem0[sp + 32:word64]
	x29 = Mem0[sp:word64]
	sp = sp + 8
	x30 = Mem0[sp:word64]
	sp = sp + 48
	return
	// succ:  extract_array_assignment_list_exit
extract_array_assignment_list_exit:


// de_backslash
// Return size: 0
void de_backslash()
de_backslash_entry:
	// succ:  l0000000000447B98
l0000000000447B98:
	sp = fp
	sp = sp + -80
	Mem0[sp:word64] = x29
	sp = sp + 8
	Mem0[sp:word64] = x30
	x29 = x31 + 0x0000000000000000
	v8 = sp + 16
	Mem0[v8:word64] = x19
	v8 = v8 + 8
	Mem0[v8:word64] = x20
	w20 = 0x00000000
	v12 = sp + 32
	Mem0[v12:word64] = x21
	v12 = v12 + 8
	Mem0[v12:word64] = x22
	v15 = sp + 48
	Mem0[v15:word64] = x23
	v15 = v15 + 8
	Mem0[v15:word64] = x24
	x21 = x0
	Mem0[x29 + 64:word64] = 0x0000000000000000
	w19 = w20
	strlen(x0)
	sp = sp + 0xFFFFFFFFFFFFFFF8
	x22 = x0
de_backslash_exit:


// skipsubscript
// Return size: 0
void skipsubscript()
skipsubscript_entry:
	goto l0000000000447D08
	// succ:  l0000000000447D08
l0000000000446988:
	sp = sp + -160
	Mem0[sp:word64] = x29
	sp = sp + 8
	Mem0[sp:word64] = x30
	x29 = x31 + 0x0000000000000000
	v8 = sp + 16
	Mem0[v8:word64] = x19
	v8 = v8 + 8
	Mem0[v8:word64] = x20
l0000000000447D08:
	sp = fp
	goto l0000000000446988
	// succ:  l0000000000446988
skipsubscript_exit:


// skip_to_delim
// Return size: 0
void skip_to_delim()
skip_to_delim_entry:
	// succ:  l0000000000447D0C
l0000000000447D0C:
	sp = fp
	sp = sp + -176
	Mem0[sp:word64] = x29
	sp = sp + 8
	Mem0[sp:word64] = x30
	x29 = x31 + 0x0000000000000000
	v8 = sp + 16
	Mem0[v8:word64] = x19
	v8 = v8 + 8
	Mem0[v8:word64] = x20
skip_to_delim_exit:


// char_is_quoted
// Return size: 0
void char_is_quoted()
char_is_quoted_entry:
	// succ:  l00000000004481E4
l00000000004481E4:
	sp = fp
	sp = sp + -112
	Mem0[sp:word64] = x29
	sp = sp + 8
	Mem0[sp:word64] = x30
	x29 = x31 + 0x0000000000000000
	v8 = sp + 16
	Mem0[v8:word64] = x19
	v8 = v8 + 8
	Mem0[v8:word64] = x20
	v11 = sp + 48
	Mem0[v11:word64] = x23
	v11 = v11 + 8
	Mem0[v11:word64] = x24
	v14 = sp + 32
	Mem0[v14:word64] = x21
	v14 = v14 + 8
	Mem0[v14:word64] = x22
	v17 = sp + 64
	Mem0[v17:word64] = x25
	v17 = v17 + 8
	Mem0[v17:word64] = x26
	Mem0[sp + 80:word64] = x27
	w23 = w1
	x26 = 0x00000000004E1000
	x20 = x0
	Mem0[x29 + 104:word64] = 0x0000000000000000
	strlen(x0)
	sp = sp + 0xFFFFFFFFFFFFFFF8
	x27 = x0
	w1 = 0x00000001
	x0 = x26 + 0x0000000000000008
	w22 = 0x00000000
	x24 = 0x00000000004C2000
	Mem0[x0 + 4:word32] = w1
	w19 = w22
	x24 = x24 + 0xFFFFFFFFFFFFFCC0
	branch (w23 & 0x00000000) == 0x00000000 l00000000004482EC
	// succ:  l0000000000448238 l00000000004482EC
l0000000000448238:
l000000000044825C:
	v25 = sp + 16
	x19 = Mem0[v25:word64]
	v25 = v25 + 8
	x20 = Mem0[v25:word64]
	v26 = sp + 32
	x21 = Mem0[v26:word64]
	v26 = v26 + 8
	x22 = Mem0[v26:word64]
	v27 = sp + 48
	x23 = Mem0[v27:word64]
	v27 = v27 + 8
	x24 = Mem0[v27:word64]
	v28 = sp + 64
	x25 = Mem0[v28:word64]
	v28 = v28 + 8
	x26 = Mem0[v28:word64]
	x27 = Mem0[sp + 80:word64]
	x29 = Mem0[sp:word64]
	sp = sp + 8
	x30 = Mem0[sp:word64]
	sp = sp + 112
	return
	// succ:  char_is_quoted_exit
l00000000004482EC:
	x26 = x26 + 0x0000000000000008
	Mem0[x26 + 4:word32] = 0x00000000
	w0 = 0x00000000
	goto l000000000044825C
	// succ:  l000000000044825C
char_is_quoted_exit:


// unclosed_pair
// Return size: 0
void unclosed_pair()
unclosed_pair_entry:
	// succ:  l0000000000448474
l0000000000448474:
	sp = fp
	sp = sp + -144
	Mem0[sp:word64] = x29
	sp = sp + 8
	Mem0[sp:word64] = x30
	x29 = x31 + 0x0000000000000000
	v8 = sp + 32
	Mem0[v8:word64] = x21
	v8 = v8 + 8
	Mem0[v8:word64] = x22
	v11 = sp + 64
	Mem0[v11:word64] = x25
	v11 = v11 + 8
	Mem0[v11:word64] = x26
	v14 = sp + 80
	Mem0[v14:word64] = x27
	v14 = v14 + 8
	Mem0[v14:word64] = x28
	w22 = w1
	x27 = x2
	v20 = sp + 16
	Mem0[v20:word64] = x19
	v20 = v20 + 8
	Mem0[v20:word64] = x20
	v23 = sp + 48
	Mem0[v23:word64] = x23
	v23 = v23 + 8
	Mem0[v23:word64] = x24
	x21 = x0
	Mem0[x29 + 104:word64] = 0x0000000000000000
	strlen(x0)
	sp = sp + 0xFFFFFFFFFFFFFFF8
	Mem0[x29 + 112:word64] = x0
	x0 = x27
	strlen(x0)
	sp = sp + 0xFFFFFFFFFFFFFFF8
	w26 = w0
	branch (w22 & 0x00000000) == 0x00000000 l00000000004484E0
	// succ:  l00000000004484B8 l00000000004484E0
l00000000004484B8:
	w25 = 0x00000000
	x28 = 0x00000000004C2000
l00000000004484E0:
	w0 = 0x00000000
	v28 = sp + 16
	x19 = Mem0[v28:word64]
	v28 = v28 + 8
	x20 = Mem0[v28:word64]
	v29 = sp + 32
	x21 = Mem0[v29:word64]
	v29 = v29 + 8
	x22 = Mem0[v29:word64]
	v30 = sp + 48
	x23 = Mem0[v30:word64]
	v30 = v30 + 8
	x24 = Mem0[v30:word64]
	v31 = sp + 64
	x25 = Mem0[v31:word64]
	v31 = v31 + 8
	x26 = Mem0[v31:word64]
	v32 = sp + 80
	x27 = Mem0[v32:word64]
	v32 = v32 + 8
	x28 = Mem0[v32:word64]
	x29 = Mem0[sp:word64]
	sp = sp + 8
	x30 = Mem0[sp:word64]
	sp = sp + 144
	return
	// succ:  unclosed_pair_exit
unclosed_pair_exit:


// split_at_delims
// Return size: 0
void split_at_delims()
split_at_delims_entry:
	// succ:  l0000000000448750
l0000000000448750:
	sp = fp
	sp = sp + -176
	Mem0[sp:word64] = x29
	sp = sp + 8
	Mem0[sp:word64] = x30
	x29 = x31 + 0x0000000000000000
	v8 = sp + 32
	Mem0[v8:word64] = x21
	v8 = v8 + 8
	Mem0[v8:word64] = x22
	v11 = sp + 48
	Mem0[v11:word64] = x23
	v11 = v11 + 8
	Mem0[v11:word64] = x24
	v14 = sp + 64
	Mem0[v14:word64] = x25
	v14 = v14 + 8
	Mem0[v14:word64] = x26
	v17 = sp + 16
	Mem0[v17:word64] = x19
	v17 = v17 + 8
	Mem0[v17:word64] = x20
	v20 = sp + 80
	Mem0[v20:word64] = x27
	v20 = v20 + 8
	Mem0[v20:word64] = x28
	Mem0[x29 + 164:word32] = w1
	Mem0[x29 + 112:word32] = w3
	Mem0[x29 + 144:word64] = x5
	Mem0[x29 + 152:word64] = x6
	x24 = x0
	x21 = x2
	w25 = w4
	branch x0 == 0x0000000000000000 l00000000004489F4
	// succ:  l000000000044878C l00000000004489F4
l000000000044878C:
	v29 = Mem0[x0:byte]
	w1 = (word32) v29
	branch w1 == 0x00000000 l00000000004489F4
	// succ:  l0000000000448794 l00000000004489F4
l0000000000448794:
	branch x2 == 0x0000000000000000 l0000000000448C3C
	// succ:  l0000000000448798 l0000000000448C3C
l0000000000448798:
	x0 = x2
	Mem0[x29 + 96:word64] = 0x0000000000000000
	strlen(x0)
	sp = sp + 0xFFFFFFFFFFFFFFF8
	x1 = 0x00000000004AD000
	x23 = x0
	x1 = x1 + 0xFFFFFFFFFFFFFA20
	x0 = x0 + 0x0000000000000001
	w2 = 0x000007A5
	w19 = 0x00000000
	call sh_xmalloc (retsize: 0;)
	Mem0[x29 + 120:word64] = x0
	w26 = w19
l0000000000448870:
	x20 = x24 + 0x0000000000000001
	x23 = x24
	w19 = 0x00000000
	x0 = x21
	call mbschr (retsize: 0;)
	branch x0 == 0x0000000000000000 l0000000000448C14
	// succ:  l0000000000448888 l0000000000448C14
l0000000000448888:
	v41 = Mem0[x23:byte]
	w0 = (word32) v41
	x23 = x20
	w1 = w0 - 0x00000009
l00000000004488A8:
	branch w0 == 0x00000000 l0000000000448A3C
	// succ:  l00000000004488AC l0000000000448A3C
l00000000004488AC:
	x1 = Mem0[x29 + 120:word64]
	x0 = Mem0[x29 + 152:word64]
	x31 = x1 - x31
	NZCV = cond(x31)
	x28 = 0x0000000000000000
	w2 = (word32) Test(NE,Z)
	x1 = 0x00000000004AD000
	x31 = x0 - x28
	NZCV = cond(x31)
	x0 = 0x00000000004AC000
	w25 = w25 | 0x00000001
	Mem0[x29 + 160:word32] = w2
	x1 = x1 + 0xFFFFFFFFFFFFFA20
	w2 = (word32) Test(NE,Z)
	x0 = x0 + 0x0000000000000460
	Mem0[x29 + 128:word32] = w25
	Mem0[x29 + 132:word32] = w2
	w25 = 0xFFFFFFFF
	Mem0[x29 + 116:word32] = w28
	Mem0[x29 + 136:word64] = x1
	Mem0[x29 + 168:word64] = x0
	w3 = Mem0[x29 + 128:word32]
	x0 = x24
	w1 = w19
	x2 = x21
	call skip_to_delim (retsize: 0;)
	NZCV = cond(w19 - w0)
	w23 = w0
	branch Test(NE,Z) l0000000000448928
	// succ:  l0000000000448918 l0000000000448928
l0000000000448918:
	w0 = Mem0[x29 + 160:word32]
	branch w0 == 0x00000000 l0000000000448928
	// succ:  l0000000000448920 l0000000000448928
l0000000000448920:
	v52 = Mem0[x24 + (int64) ((int32) w19):byte]
	w1 = (word32) v52
	branch w1 != 0x00000000 l0000000000448ADC
	// succ:  l0000000000448928 l0000000000448ADC
l0000000000448928:
	x20 = x24 + (int64) ((int32) w23)
	w2 = w23
	w1 = w19
	x0 = x24
	call substring (retsize: 0;)
	x26 = x0
	call make_word (retsize: 0;)
	x1 = x28
	call make_word_list (retsize: 0;)
	x1 = Mem0[x29 + 136:word64]
	w2 = 0x000007E5
	x28 = x0
	x0 = x26
	call sh_xfree (retsize: 0;)
	w1 = Mem0[x29 + 112:word32]
	w2 = Mem0[x29 + 116:word32]
	NZCV = cond(w1 - w23)
	w26 = w2 + 0x00000001
	branch Test(GT,NZV) l000000000044897C
	// succ:  l0000000000448974 l000000000044897C
l0000000000448974:
	NZCV = cond(w1 - w19)
l000000000044897C:
	w31 = w25 + 0x00000001
	NZCV = cond(w31)
	branch Test(NE,Z) l00000000004489A4
	// succ:  l0000000000448984 l00000000004489A4
l0000000000448984:
	w0 = Mem0[x29 + 132:word32]
	branch w0 == 0x00000000 l00000000004489A4
	// succ:  l000000000044898C l00000000004489A4
l000000000044898C:
	w1 = Mem0[x29 + 112:word32]
	w0 = w19 - 0x00000001
	NZCV = cond(w0 - w1)
	branch Test(EQ,Z) l0000000000448BC0
	// succ:  l000000000044899C l0000000000448BC0
l000000000044899C:
	NZCV = cond(w19 - w1)
	branch Test(GT,NZV) l0000000000448B9C
	// succ:  l00000000004489A4 l0000000000448B9C
l00000000004489A4:
	v55 = Mem0[x20:byte]
	w1 = (word32) v55
	branch w1 == 0x00000000 l0000000000448A88
	// succ:  l00000000004489AC l0000000000448A88
l00000000004489AC:
l00000000004489F4:
	x0 = Mem0[x29 + 144:word64]
	branch x0 == 0x0000000000000000 l0000000000448A00
	// succ:  l00000000004489FC l0000000000448A00
l00000000004489FC:
	Mem0[x0:word32] = 0x00000000
	// succ:  l0000000000448A00
l0000000000448A00:
	x1 = Mem0[x29 + 152:word64]
	branch x1 == 0x0000000000000000 l0000000000448A3C
	// succ:  l0000000000448A08 l0000000000448A3C
l0000000000448A08:
	x2 = Mem0[x29 + 152:word64]
	x0 = 0x0000000000000000
	Mem0[x2:word32] = 0x00000000
	v35 = sp + 16
	x19 = Mem0[v35:word64]
	v35 = v35 + 8
	x20 = Mem0[v35:word64]
	v36 = sp + 32
	x21 = Mem0[v36:word64]
	v36 = v36 + 8
	x22 = Mem0[v36:word64]
	v37 = sp + 48
	x23 = Mem0[v37:word64]
	v37 = v37 + 8
	x24 = Mem0[v37:word64]
	v38 = sp + 64
	x25 = Mem0[v38:word64]
	v38 = v38 + 8
	x26 = Mem0[v38:word64]
	v39 = sp + 80
	x27 = Mem0[v39:word64]
	v39 = v39 + 8
	x28 = Mem0[v39:word64]
	x29 = Mem0[sp:word64]
	sp = sp + 8
	x30 = Mem0[sp:word64]
	sp = sp + 176
	return
	// succ:  split_at_delims_exit
l0000000000448A3C:
	x0 = 0x0000000000000000
	v43 = sp + 16
	x19 = Mem0[v43:word64]
	v43 = v43 + 8
	x20 = Mem0[v43:word64]
	v44 = sp + 32
	x21 = Mem0[v44:word64]
	v44 = v44 + 8
	x22 = Mem0[v44:word64]
	v45 = sp + 48
	x23 = Mem0[v45:word64]
	v45 = v45 + 8
	x24 = Mem0[v45:word64]
	v46 = sp + 64
	x25 = Mem0[v46:word64]
	v46 = v46 + 8
	x26 = Mem0[v46:word64]
	v47 = sp + 80
	x27 = Mem0[v47:word64]
	v47 = v47 + 8
	x28 = Mem0[v47:word64]
	x29 = Mem0[sp:word64]
	sp = sp + 8
	x30 = Mem0[sp:word64]
	sp = sp + 176
	return
	// succ:  split_at_delims_exit
l0000000000448A88:
	w31 = w25 + 0x00000001
	NZCV = cond(w31)
	branch Test(EQ,Z) l0000000000448B34
	// succ:  l0000000000448A90 l0000000000448B34
l0000000000448A90:
	x1 = Mem0[x29 + 144:word64]
	branch x1 == 0x0000000000000000 l0000000000448A9C
	// succ:  l0000000000448A98 l0000000000448A9C
l0000000000448A98:
	Mem0[x1:word32] = w26
	// succ:  l0000000000448A9C
l0000000000448A9C:
	w2 = Mem0[x29 + 132:word32]
	branch w2 == 0x00000000 l0000000000448AAC
	// succ:  l0000000000448AA4 l0000000000448AAC
l0000000000448AA4:
	x0 = Mem0[x29 + 152:word64]
	Mem0[x0:word32] = w25
	// succ:  l0000000000448AAC
l0000000000448AAC:
	branch x28 == 0x0000000000000000 l0000000000448A3C
	// succ:  l0000000000448AB0 l0000000000448A3C
l0000000000448AB0:
	x0 = Mem0[x28:word64]
	branch x0 == 0x0000000000000000 l0000000000448C1C
	// succ:  l0000000000448AB8 l0000000000448C1C
l0000000000448AB8:
	x0 = x28
	call list_reverse (retsize: 0;)
	v59 = sp + 16
	x19 = Mem0[v59:word64]
	v59 = v59 + 8
	x20 = Mem0[v59:word64]
	v60 = sp + 32
	x21 = Mem0[v60:word64]
	v60 = v60 + 8
	x22 = Mem0[v60:word64]
	v61 = sp + 48
	x23 = Mem0[v61:word64]
	v61 = v61 + 8
	x24 = Mem0[v61:word64]
	v62 = sp + 64
	x25 = Mem0[v62:word64]
	v62 = v62 + 8
	x26 = Mem0[v62:word64]
	v63 = sp + 80
	x27 = Mem0[v63:word64]
	v63 = v63 + 8
	x28 = Mem0[v63:word64]
	x29 = Mem0[sp:word64]
	sp = sp + 8
	x30 = Mem0[sp:word64]
	sp = sp + 176
	return
	// succ:  split_at_delims_exit
l0000000000448ADC:
	x0 = Mem0[x29 + 120:word64]
	call mbschr (retsize: 0;)
	branch x0 == 0x0000000000000000 l0000000000448928
	// succ:  l0000000000448AE8 l0000000000448928
l0000000000448AE8:
	w23 = w19 + 0x00000001
l0000000000448B34:
	w0 = Mem0[x29 + 132:word32]
	branch w0 == 0x00000000 l0000000000448A90
	// succ:  l0000000000448B3C l0000000000448A90
l0000000000448B3C:
	w1 = Mem0[x29 + 112:word32]
	NZCV = cond(w23 - w1)
	branch Test(LE,ZCV) l0000000000448B58
	// succ:  l0000000000448B48 l0000000000448B58
l0000000000448B48:
	w2 = Mem0[x29 + 164:word32]
	w25 = 0xFFFFFFFF
	NZCV = cond(w1 - w2)
	branch Test(LT,NV) l0000000000448A90
	// succ:  l0000000000448B58 l0000000000448A90
l0000000000448B58:
	w0 = Mem0[x29 + 112:word32]
	x24 = x24 + (int64) ((int32) w0)
	v58 = Mem0[x24 + -1:byte]
	w0 = (word32) v58
	w31 = w0 - 0x00000009
	NZCV = cond(w31)
	branch Test(EQ,Z) l0000000000448B78
	// succ:  l0000000000448B6C l0000000000448B78
l0000000000448B6C:
	w31 = w0 - 0x00000020
	NZCV = cond(w31)
	w25 = w26
	branch Test(NE,Z) l0000000000448A90
	// succ:  l0000000000448B78 l0000000000448A90
l0000000000448B78:
	x0 = 0x00000000004AC000
	x0 = x0 + 0x0000000000000460
	call make_word (retsize: 0;)
	x1 = x28
	w26 = w26 + 0x00000001
	call make_word_list (retsize: 0;)
	x28 = x0
	w25 = w26
	goto l0000000000448A90
	// succ:  l0000000000448A90
l0000000000448B9C:
	x0 = Mem0[x29 + 168:word64]
	w25 = w26
	call make_word (retsize: 0;)
	x1 = Mem0[x28:word64]
	call make_word_list (retsize: 0;)
	w2 = Mem0[x29 + 116:word32]
	Mem0[x28:word64] = x0
	w26 = w2 + 0x00000002
	goto l00000000004489A4
	// succ:  l00000000004489A4
l0000000000448BC0:
	w25 = w26
	goto l00000000004489A4
	// succ:  l00000000004489A4
l0000000000448C14:
	v42 = Mem0[x23:byte]
	w0 = (word32) v42
	goto l00000000004488A8
	// succ:  l00000000004488A8
l0000000000448C1C:
	x0 = x28
	v64 = sp + 16
	x19 = Mem0[v64:word64]
	v64 = v64 + 8
	x20 = Mem0[v64:word64]
	v65 = sp + 32
	x21 = Mem0[v65:word64]
	v65 = v65 + 8
	x22 = Mem0[v65:word64]
	v66 = sp + 48
	x23 = Mem0[v66:word64]
	v66 = v66 + 8
	x24 = Mem0[v66:word64]
	v67 = sp + 64
	x25 = Mem0[v67:word64]
	v67 = v67 + 8
	x26 = Mem0[v67:word64]
	v68 = sp + 80
	x27 = Mem0[v68:word64]
	v68 = v68 + 8
	x28 = Mem0[v68:word64]
	x29 = Mem0[sp:word64]
	sp = sp + 8
	x30 = Mem0[sp:word64]
	sp = sp + 176
	return
	// succ:  split_at_delims_exit
l0000000000448C3C:
	x0 = 0x00000000004E3000
	x21 = Mem0[x0 + 1600:word64]
	w22 = 0x00000001
	Mem0[x29 + 120:word64] = x2
	goto l0000000000448870
	// succ:  l0000000000448870
split_at_delims_exit:


// string_list_internal
// Return size: 0
void string_list_internal()
string_list_internal_entry:
	// succ:  l0000000000448C50
l0000000000448C50:
	sp = fp
	sp = sp + -96
	Mem0[sp:word64] = x29
	sp = sp + 8
	Mem0[sp:word64] = x30
	x29 = x31 + 0x0000000000000000
	v8 = sp + 48
	Mem0[v8:word64] = x23
	v8 = v8 + 8
	Mem0[v8:word64] = x24
	v11 = sp + 64
	Mem0[v11:word64] = x25
	v11 = v11 + 8
	Mem0[v11:word64] = x26
	v14 = sp + 16
	Mem0[v14:word64] = x19
	v14 = v14 + 8
	Mem0[v14:word64] = x20
	v17 = sp + 32
	Mem0[v17:word64] = x21
	v17 = v17 + 8
	Mem0[v17:word64] = x22
	Mem0[sp + 80:word64] = x27
	x23 = x0
	x25 = x1
	branch x0 == 0x0000000000000000 l0000000000448D74
	// succ:  l0000000000448C78 l0000000000448D74
l0000000000448C78:
	x19 = Mem0[x0:word64]
	branch x19 == 0x0000000000000000 l0000000000448DC0
	// succ:  l0000000000448C80 l0000000000448DC0
l0000000000448C80:
	branch x1 == 0x0000000000000000 l0000000000448DB8
	// succ:  l0000000000448C84 l0000000000448DB8
l0000000000448C84:
	v22 = Mem0[x1:byte]
	w0 = (word32) v22
	w24 = 0x00000000
	branch w0 != 0x00000000 l0000000000448D90
	// succ:  l0000000000448C90 l0000000000448D90
l0000000000448C90:
	x2 = x23
	w20 = 0x00000000
	goto l0000000000448CBC
	// succ:  l0000000000448CBC
l0000000000448C9C:
	x0 = Mem0[x2 + 8:word64]
	w20 = w20 + w24
	x0 = Mem0[x0:word64]
	strlen(x0)
	sp = sp + 0xFFFFFFFFFFFFFFF8
	w20 = w20 + w0
	branch x19 == 0x0000000000000000 l0000000000448CD8
	// succ:  l0000000000448CB4 l0000000000448CD8
l0000000000448CB4:
	x2 = x19
	x19 = Mem0[x19:word64]
	// succ:  l0000000000448CBC
l0000000000448CBC:
	x31 = x2 - x23
	NZCV = cond(x31)
	branch Test(NE,Z) l0000000000448C9C
	// succ:  l0000000000448CC4 l0000000000448C9C
l0000000000448CC4:
	x0 = Mem0[x23 + 8:word64]
	x0 = Mem0[x0:word64]
	strlen(x0)
	sp = sp + 0xFFFFFFFFFFFFFFF8
	w20 = w20 + w0
	goto l0000000000448CB4
	// succ:  l0000000000448CB4
l0000000000448CD8:
	w0 = w20 + 0x00000001
	x1 = 0x00000000004AD000
l0000000000448D74:
	v26 = sp + 16
	x19 = Mem0[v26:word64]
	v26 = v26 + 8
	x20 = Mem0[v26:word64]
	v27 = sp + 32
	x21 = Mem0[v27:word64]
	v27 = v27 + 8
	x22 = Mem0[v27:word64]
	v28 = sp + 48
	x23 = Mem0[v28:word64]
	v28 = v28 + 8
	x24 = Mem0[v28:word64]
	v29 = sp + 64
	x25 = Mem0[v29:word64]
	v29 = v29 + 8
	x26 = Mem0[v29:word64]
	x27 = Mem0[sp + 80:word64]
	x29 = Mem0[sp:word64]
	sp = sp + 8
	x30 = Mem0[sp:word64]
	sp = sp + 96
	return
	// succ:  string_list_internal_exit
l0000000000448D90:
	v32 = Mem0[x1 + 1:byte]
	w0 = (word32) v32
	w24 = 0x00000001
	branch w0 == 0x00000000 l0000000000448C90
	// succ:  l0000000000448D9C l0000000000448C90
l0000000000448D9C:
	v33 = Mem0[x1 + 2:byte]
	w0 = (word32) v33
	w24 = 0x00000002
	branch w0 == 0x00000000 l0000000000448C90
	// succ:  l0000000000448DA8 l0000000000448C90
l0000000000448DA8:
	x0 = x1
	strlen(x0)
	sp = sp + 0xFFFFFFFFFFFFFFF8
	w24 = w0
	goto l0000000000448C90
	// succ:  l0000000000448C90
l0000000000448DB8:
	w24 = w1
	goto l0000000000448C90
	// succ:  l0000000000448C90
l0000000000448DC0:
	x0 = Mem0[x0 + 8:word64]
	x0 = Mem0[x0:word64]
	strlen(x0)
	sp = sp + 0xFFFFFFFFFFFFFFF8
	x1 = 0x00000000004AD000
	x1 = x1 + 0xFFFFFFFFFFFFFA20
	w2 = 0x00000849
	x0 = x0 + 0x0000000000000001
	call sh_xmalloc (retsize: 0;)
	x1 = Mem0[x23 + 8:word64]
	v36 = sp + 16
	x19 = Mem0[v36:word64]
	v36 = v36 + 8
	x20 = Mem0[v36:word64]
	v37 = sp + 32
	x21 = Mem0[v37:word64]
	v37 = v37 + 8
	x22 = Mem0[v37:word64]
	v38 = sp + 48
	x23 = Mem0[v38:word64]
	v38 = v38 + 8
	x24 = Mem0[v38:word64]
	v39 = sp + 64
	x25 = Mem0[v39:word64]
	v39 = v39 + 8
	x26 = Mem0[v39:word64]
	x27 = Mem0[sp + 80:word64]
	x1 = Mem0[x1:word64]
	x29 = Mem0[sp:word64]
	sp = sp + 8
	x30 = Mem0[sp:word64]
	sp = sp + 96
	strcpy(x0, x1)
	return
	// succ:  string_list_internal_exit
string_list_internal_exit:


// string_list
// Return size: 0
void string_list()
string_list_entry:
	// succ:  l0000000000448E04
l0000000000448E04:
	sp = fp
	x1 = 0x00000000004BE000
	x1 = x1 + 0x0000000000000330
	// succ:  l0000000000448E0C_thunk_string_list_internal
l0000000000448E0C_thunk_string_list_internal:
	call string_list_internal (retsize: 0;)
	return
	// succ:  string_list_exit
string_list_exit:


// ifs_firstchar
// Return size: 0
void ifs_firstchar()
ifs_firstchar_entry:
	// succ:  l0000000000448E10
l0000000000448E10:
	sp = fp
	sp = sp + -48
	Mem0[sp:word64] = x29
	sp = sp + 8
	Mem0[sp:word64] = x30
	x29 = x31 + 0x0000000000000000
	x1 = 0x00000000004AD000
	v9 = sp + 16
	Mem0[v9:word64] = x19
	v9 = v9 + 8
	Mem0[v9:word64] = x20
	w2 = 0x00000882
	x20 = x0
	x1 = x1 + 0xFFFFFFFFFFFFFA20
	x0 = 0x0000000000000011
	Mem0[sp + 32:word64] = x21
	call sh_xmalloc (retsize: 0;)
	x21 = 0x00000000004E3000
	x2 = Mem0[x21 + 1616:word64]
	x19 = x0
	x31 = x2 - 0x0000000000000001
	NZCV = cond(x31)
	branch Test(EQ,Z) l0000000000448E80
	// succ:  l0000000000448E4C l0000000000448E80
l0000000000448E4C:
	x1 = 0x00000000004E3000
	x1 = x1 + 0x0000000000000520
	memcpy(x0, x1, x2)
	sp = sp + 0xFFFFFFFFFFFFFFF8
	x1 = Mem0[x21 + 1616:word64]
	w0 = w1
	Mem0[x19 + (int64) ((int32) w1):byte] = 0x00
	// succ:  l0000000000448E64
l0000000000448E64:
	branch x20 == 0x0000000000000000 l0000000000448E6C
	// succ:  l0000000000448E68 l0000000000448E6C
l0000000000448E68:
	Mem0[x20:word32] = w0
	// succ:  l0000000000448E6C
l0000000000448E6C:
	x0 = x19
	x21 = Mem0[sp + 32:word64]
	v20 = sp + 16
	x19 = Mem0[v20:word64]
	v20 = v20 + 8
	x20 = Mem0[v20:word64]
	x29 = Mem0[sp:word64]
	sp = sp + 8
	x30 = Mem0[sp:word64]
	sp = sp + 48
	return
	// succ:  ifs_firstchar_exit
l0000000000448E80:
	x0 = 0x00000000004E3000
	v18 = Mem0[x0 + 1312:byte]
	w0 = (word32) v18
	Mem0[x19 + 1:byte] = 0x00
	NZCV = cond(w0 - w31)
	Mem0[x19:byte] = (byte) w0
	w0 = (word32) Test(NE,Z)
	goto l0000000000448E64
	// succ:  l0000000000448E64
ifs_firstchar_exit:


// string_list_dollar_star
// Return size: 0
void string_list_dollar_star()
string_list_dollar_star_entry:
	// succ:  l0000000000448E9C
l0000000000448E9C:
	sp = fp
	sp = sp + -48
	Mem0[sp:word64] = x29
	sp = sp + 8
	Mem0[sp:word64] = x30
	x29 = x31 + 0x0000000000000000
	v8 = sp + 16
	Mem0[v8:word64] = x19
	v8 = v8 + 8
	Mem0[v8:word64] = x20
	Mem0[sp + 32:word64] = x21
	x20 = x0
	__ctype_get_mb_cur_max()
	sp = sp + 0xFFFFFFFFFFFFFFF8
	x1 = 0x00000000004E3000
	x19 = Mem0[x1 + 1616:word64]
	x0 = x0 + 0x0000000000000010
	x0 = x0 & 0x0000000000000000
	x1 = x31 + 0x0000000000000000
	x31 = x1 - x0
	x31 = x19 - 0x0000000000000001
	NZCV = cond(x31)
	x21 = x31 + 0x0000000000000000
	branch Test(EQ,Z) l0000000000448F10
	// succ:  l0000000000448ED8 l0000000000448F10
l0000000000448ED8:
	x1 = 0x00000000004E3000
	x2 = x19
	x0 = x31 + 0x0000000000000000
	x1 = x1 + 0x0000000000000520
	memcpy(x0, x1, x2)
	sp = sp + 0xFFFFFFFFFFFFFFF8
	x1 = x21
	Mem0[sp + x19:byte] = 0x00
	x0 = x20
	call string_list_internal (retsize: 0;)
	x31 = x29 + 0x0000000000000000
	v15 = sp + 16
	x19 = Mem0[v15:word64]
	v15 = v15 + 8
	x20 = Mem0[v15:word64]
	x21 = Mem0[sp + 32:word64]
	x29 = Mem0[sp:word64]
	sp = sp + 8
	x30 = Mem0[sp:word64]
	sp = sp + 48
	return
	// succ:  string_list_dollar_star_exit
l0000000000448F10:
	x0 = 0x00000000004E3000
	v17 = Mem0[x0 + 1312:byte]
	w0 = (word32) v17
	x1 = x21
	Mem0[sp:byte] = (byte) w0
	Mem0[sp + 1:byte] = 0x00
	x0 = x20
	call string_list_internal (retsize: 0;)
	x31 = x29 + 0x0000000000000000
	v18 = sp + 16
	x19 = Mem0[v18:word64]
	v18 = v18 + 8
	x20 = Mem0[v18:word64]
	x21 = Mem0[sp + 32:word64]
	x29 = Mem0[sp:word64]
	sp = sp + 8
	x30 = Mem0[sp:word64]
	sp = sp + 48
	return
	// succ:  string_list_dollar_star_exit
string_list_dollar_star_exit:


// get_word_from_string
// Return size: 0
void get_word_from_string()
get_word_from_string_entry:
	// succ:  l0000000000448F40
l0000000000448F40:
	sp = fp
	sp = sp + -80
	Mem0[sp:word64] = x29
	sp = sp + 8
	Mem0[sp:word64] = x30
	x29 = x31 + 0x0000000000000000
	v8 = sp + 32
	Mem0[v8:word64] = x21
	v8 = v8 + 8
	Mem0[v8:word64] = x22
	v11 = sp + 48
	Mem0[v11:word64] = x23
	v11 = v11 + 8
	Mem0[v11:word64] = x24
	v14 = sp + 16
	Mem0[v14:word64] = x19
	v14 = v14 + 8
	Mem0[v14:word64] = x20
	x22 = x0
	x21 = x1
	x23 = x2
	branch x0 == 0x0000000000000000 l00000000004490D0
	// succ:  l0000000000448F64 l00000000004490D0
l0000000000448F64:
	x20 = Mem0[x0:word64]
	branch x20 == 0x0000000000000000 l00000000004490D0
	// succ:  l0000000000448F6C l00000000004490D0
l0000000000448F6C:
	v19 = Mem0[x20:byte]
	w5 = (word32) v19
	branch w5 == 0x00000000 l00000000004490D0
	// succ:  l0000000000448F74 l00000000004490D0
l0000000000448F74:
	branch x1 == 0x0000000000000000 l0000000000448F84
	// succ:  l0000000000448F78 l0000000000448F84
l0000000000448F78:
	v21 = Mem0[x1:byte]
	w0 = (word32) v21
	w31 = w0 - 0x00000020
	NZCV = cond(w31)
	branch Test(EQ,Z) l0000000000449214
	// succ:  l0000000000448F84 l0000000000449214
l0000000000448F84:
	x31 = x21 - x31
	NZCV = cond(x31)
	w0 = (word32) Test(EQ,Z)
	// succ:  l0000000000448F8C
l0000000000448F8C:
	x1 = 0x00000000004E3000
	x6 = Mem0[x1 + 1600:word64]
	branch x6 == 0x0000000000000000 l0000000000449264
	// succ:  l0000000000448F98 l0000000000449264
l0000000000448F98:
	v27 = Mem0[x6:byte]
	w7 = (word32) v27
	branch w7 == 0x00000000 l0000000000449270
	// succ:  l0000000000448FA0 l0000000000449270
l0000000000448FA0:
	w19 = 0x00000000
	goto l0000000000448FC0
	// succ:  l0000000000448FC0
l0000000000448FA8:
	w31 = w7 - 0x0000007F
	NZCV = cond(w31)
l0000000000448FB8:
	v36 = Mem0[x6:byte]
	w7 = (word32) v36
	branch w7 == 0x00000000 l0000000000448FD8
	// succ:  l0000000000448FC0 l0000000000448FD8
l0000000000448FC0:
	w31 = w7 - 0x00000001
	NZCV = cond(w31)
	w4 = w19 | 0x00000020
	branch Test(NE,Z) l0000000000448FA8
	// succ:  l0000000000448FCC l0000000000448FA8
l0000000000448FCC:
	x6 = x6 + 0x0000000000000001
	NZCV = cond(x6)
	w19 = w19 | 0x00000010
	branch Test(NE,Z) l0000000000448FB8
	// succ:  l0000000000448FD8 l0000000000448FB8
l0000000000448FD8:
	branch w0 == 0x00000000 l00000000004490E8
	// succ:  l0000000000448FDC l00000000004490E8
l0000000000448FDC:
	x6 = 0x00000000004E3000
	w4 = w5 - 0x00000009
l0000000000449008:
	x0 = x20
	strlen(x0)
	sp = sp + 0xFFFFFFFFFFFFFFF8
	x24 = x0
	// succ:  l0000000000449014
l0000000000449014:
	x3 = x21
	x0 = x20
	x1 = x24
	x2 = x29 + 0x0000000000000048
	w4 = w19
	call fn00000000004458AC (retsize: 0;)
	v39 = Mem0[x29 + 36:int32]
	x7 = (word64) v39
	x21 = x0
	x7 = x20 + x7
	branch x23 == 0x0000000000000000 l0000000000449040
	// succ:  l000000000044903C l0000000000449040
l000000000044903C:
	Mem0[x23:word64] = x7
	// succ:  l0000000000449040
l0000000000449040:
	v41 = Mem0[x7:byte]
	w3 = (word32) v41
	branch w3 == 0x00000000 l00000000004491F8
	// succ:  l0000000000449048 l00000000004491F8
l0000000000449048:
	w0 = w3 - 0x00000009
l00000000004490D0:
	x0 = 0x0000000000000000
	v29 = sp + 16
	x19 = Mem0[v29:word64]
	v29 = v29 + 8
	x20 = Mem0[v29:word64]
	v30 = sp + 32
	x21 = Mem0[v30:word64]
	v30 = v30 + 8
	x22 = Mem0[v30:word64]
	v31 = sp + 48
	x23 = Mem0[v31:word64]
	v31 = v31 + 8
	x24 = Mem0[v31:word64]
	x29 = Mem0[sp:word64]
	sp = sp + 8
	x30 = Mem0[sp:word64]
	sp = sp + 80
	return
	// succ:  get_word_from_string_exit
l00000000004490E8:
	v34 = Mem0[x21:byte]
	w0 = (word32) v34
	branch w0 == 0x00000000 l0000000000448FDC
	// succ:  l00000000004490F0 l0000000000448FDC
l00000000004490F0:
	Mem0[x29 + 72:word32] = 0x00000000
	__ctype_get_mb_cur_max()
	sp = sp + 0xFFFFFFFFFFFFFFF8
	x31 = x0 - 0x0000000000000001
	NZCV = cond(x31)
	branch Test(UGT,ZC) l0000000000449008
	// succ:  l0000000000449100 l0000000000449008
l0000000000449100:
	x24 = 0x0000000000000001
	goto l0000000000449014
	// succ:  l0000000000449014
l00000000004491F8:
	Mem0[x22:word64] = x7
	x0 = x21
	v46 = sp + 16
	x19 = Mem0[v46:word64]
	v46 = v46 + 8
	x20 = Mem0[v46:word64]
	v47 = sp + 32
	x21 = Mem0[v47:word64]
	v47 = v47 + 8
	x22 = Mem0[v47:word64]
	v48 = sp + 48
	x23 = Mem0[v48:word64]
	v48 = v48 + 8
	x24 = Mem0[v48:word64]
	x29 = Mem0[sp:word64]
	sp = sp + 8
	x30 = Mem0[sp:word64]
	sp = sp + 80
	return
	// succ:  get_word_from_string_exit
l0000000000449214:
	v42 = Mem0[x1 + 1:byte]
	w0 = (word32) v42
	w31 = w0 - 0x00000009
	NZCV = cond(w31)
	branch Test(NE,Z) l0000000000448F84
	// succ:  l0000000000449220 l0000000000448F84
l0000000000449220:
	v43 = Mem0[x1 + 2:byte]
	w0 = (word32) v43
	w31 = w0 - 0x0000000A
	NZCV = cond(w31)
	branch Test(NE,Z) l0000000000448F84
	// succ:  l000000000044922C l0000000000448F84
l000000000044922C:
	v45 = Mem0[x1 + 3:byte]
	w1 = (word32) v45
	w0 = 0x00000001
	branch w1 == 0x00000000 l0000000000448F8C
	// succ:  l0000000000449238 l0000000000448F8C
l0000000000449238:
	goto l0000000000448F84
	// succ:  l0000000000448F84
l0000000000449264:
	w19 = w6
	branch w0 != 0x00000000 l0000000000448FDC
	// succ:  l000000000044926C l0000000000448FDC
l000000000044926C:
	goto l00000000004490E8
	// succ:  l00000000004490E8
l0000000000449270:
	w19 = w7
	branch w0 != 0x00000000 l0000000000448FDC
	// succ:  l0000000000449278 l0000000000448FDC
l0000000000449278:
	goto l00000000004490E8
	// succ:  l00000000004490E8
get_word_from_string_exit:


// strip_trailing_ifs_whitespace
// Return size: 0
void strip_trailing_ifs_whitespace()
strip_trailing_ifs_whitespace_entry:
	// succ:  l000000000044927C
l000000000044927C:
	sp = fp
	sp = sp + -48
	Mem0[sp:word64] = x29
	sp = sp + 8
	Mem0[sp:word64] = x30
	x29 = x31 + 0x0000000000000000
	Mem0[sp + 16:word64] = x19
	x19 = x0
	branch x0 == 0x0000000000000000 l0000000000449368
	// succ:  l0000000000449290 l0000000000449368
l0000000000449290:
	v9 = Mem0[x0:byte]
	w1 = (word32) v9
	branch w1 == 0x00000000 l0000000000449334
	// succ:  l0000000000449298 l0000000000449334
l0000000000449298:
	v11 = Mem0[x0 + 1:byte]
	w3 = (word32) v11
	x1 = x0
	branch w3 == 0x00000000 l0000000000449320
	// succ:  l00000000004492A4 l0000000000449320
l00000000004492A4:
	v13 = Mem0[x0 + 2:byte]
	w3 = (word32) v13
	x1 = 0x0000000000000001
	branch w3 == 0x00000000 l0000000000449338
	// succ:  l00000000004492B0 l0000000000449338
l00000000004492B0:
	Mem0[x29 + 32:word64] = x2
	strlen(x0)
	sp = sp + 0xFFFFFFFFFFFFFFF8
	x1 = x0 - 0x0000000000000001
	x1 = x19 + x1
	x31 = x19 - x1
	NZCV = cond(x31)
	x2 = Mem0[x29 + 32:word64]
	branch Test(UGE,C) l0000000000449320
	// succ:  l00000000004492CC l0000000000449320
l00000000004492CC:
	x6 = 0x00000000004E3000
	v18 = Mem0[x1:byte]
	w3 = (word32) v18
	x5 = x6 + 0x0000000000000530
	w4 = w3 - 0x00000009
l0000000000449320:
	Mem0[x1 + 1:byte] = 0x00
	x0 = x19
	x19 = Mem0[sp + 16:word64]
	x29 = Mem0[sp:word64]
	sp = sp + 8
	x30 = Mem0[sp:word64]
	sp = sp + 48
	return
	// succ:  strip_trailing_ifs_whitespace_exit
l0000000000449334:
	x1 = 0xFFFFFFFFFFFFFFFF
	// succ:  l0000000000449338
l0000000000449338:
	x1 = x19 + x1
	x31 = x19 - x1
	NZCV = cond(x31)
	branch Test(ULT,C) l00000000004492CC
	// succ:  l0000000000449344 l00000000004492CC
l0000000000449344:
	goto l0000000000449320
	// succ:  l0000000000449320
l0000000000449368:
	x1 = 0xFFFFFFFFFFFFFFFF
	goto l00000000004492CC
	// succ:  l00000000004492CC
strip_trailing_ifs_whitespace_exit:


// list_rest_of_args
// Return size: 0
void list_rest_of_args()
list_rest_of_args_entry:
	// succ:  l0000000000449370
l0000000000449370:
	sp = fp
	sp = sp + -48
	Mem0[sp:word64] = x29
	sp = sp + 8
	Mem0[sp:word64] = x30
	x29 = x31 + 0x0000000000000000
	v8 = sp + 16
	Mem0[v8:word64] = x19
	v8 = v8 + 8
	Mem0[v8:word64] = x20
	x19 = 0x00000000004E3000
	x19 = x19 + 0x00000000000004C8
	x20 = x19 + 0x0000000000000048
	x1 = 0x0000000000000000
	// succ:  l000000000044938C
l000000000044938C:
	x2 = Mem0[x19 + 8:word64]
	x19 = x19 + 0x0000000000000008
	x0 = x2
	branch x2 == 0x0000000000000000 l00000000004493B8
	// succ:  l000000000044939C l00000000004493B8
l000000000044939C:
	Mem0[x29 + 32:word64] = x1
	call make_bare_word (retsize: 0;)
	x1 = Mem0[x29 + 32:word64]
	call make_word_list (retsize: 0;)
	x31 = x19 - x20
	NZCV = cond(x31)
	x1 = x0
	branch Test(NE,Z) l000000000044938C
	// succ:  l00000000004493B8 l000000000044938C
l00000000004493B8:
	x0 = 0x00000000004DF000
	x19 = Mem0[x0 + 3288:word64]
	branch x19 == 0x0000000000000000 l00000000004493E8
	// succ:  l00000000004493C4 l00000000004493E8
l00000000004493C4:
	x0 = Mem0[x19 + 8:word64]
	x0 = Mem0[x0:word64]
	Mem0[x29 + 32:word64] = x1
	call make_bare_word (retsize: 0;)
	x1 = Mem0[x29 + 32:word64]
	call make_word_list (retsize: 0;)
	x19 = Mem0[x19:word64]
	x1 = x0
	branch x19 != 0x0000000000000000 l00000000004493C4
	// succ:  l00000000004493E8 l00000000004493C4
l00000000004493E8:
	branch x1 == 0x0000000000000000 l0000000000449404
	// succ:  l00000000004493EC l0000000000449404
l00000000004493EC:
	x0 = Mem0[x1:word64]
	branch x0 == 0x0000000000000000 l0000000000449404
	// succ:  l00000000004493F4 l0000000000449404
l00000000004493F4:
	v14 = sp + 16
	x19 = Mem0[v14:word64]
	v14 = v14 + 8
	x20 = Mem0[v14:word64]
	x29 = Mem0[sp:word64]
	sp = sp + 8
	x30 = Mem0[sp:word64]
	sp = sp + 48
	x0 = x1
	// succ:  l0000000000449400_thunk_list_reverse
l0000000000449400_thunk_list_reverse:
	call list_reverse (retsize: 0;)
	return
	// succ:  list_rest_of_args_exit
l0000000000449404:
	x0 = x1
	v15 = sp + 16
	x19 = Mem0[v15:word64]
	v15 = v15 + 8
	x20 = Mem0[v15:word64]
	x29 = Mem0[sp:word64]
	sp = sp + 8
	x30 = Mem0[sp:word64]
	sp = sp + 48
	return
	// succ:  list_rest_of_args_exit
list_rest_of_args_exit:


// number_of_args
// Return size: 0
void number_of_args()
number_of_args_entry:
	// succ:  l0000000000449414
l0000000000449414:
	sp = fp
	x1 = 0x00000000004E3000
	x1 = x1 + 0x00000000000004C8
	w2 = 0x00000000
	goto l0000000000449428
	// succ:  l0000000000449428
l0000000000449424:
	w2 = w0
	// succ:  l0000000000449428
l0000000000449428:
	x3 = Mem0[x1 + 8:word64]
	w0 = w2 + 0x00000001
	w31 = w0 - 0x00000009
	NZCV = cond(w31)
	branch x3 == 0x0000000000000000 l000000000044945C
	// succ:  l0000000000449438 l000000000044945C
l0000000000449438:
	x1 = x1 + 0x0000000000000008
	branch Test(NE,Z) l0000000000449424
	// succ:  l0000000000449440 l0000000000449424
l0000000000449440:
	x1 = 0x00000000004DF000
	x1 = Mem0[x1 + 3288:word64]
	branch x1 == 0x0000000000000000 l0000000000449458
	// succ:  l000000000044944C l0000000000449458
l000000000044944C:
	x1 = Mem0[x1:word64]
	w0 = w0 + 0x00000001
	branch x1 != 0x0000000000000000 l000000000044944C
	// succ:  l0000000000449458 l000000000044944C
l0000000000449458:
	return
	// succ:  number_of_args_exit
l000000000044945C:
	w0 = w2
	goto l0000000000449440
	// succ:  l0000000000449440
number_of_args_exit:


// get_dollar_var_value
// Return size: 0
void get_dollar_var_value()
get_dollar_var_value_entry:
	// succ:  l0000000000449464
l0000000000449464:
	sp = fp
	sp = sp + -32
	Mem0[sp:word64] = x29
	sp = sp + 8
	Mem0[sp:word64] = x30
	x29 = x31 + 0x0000000000000000
	v8 = sp + 16
	Mem0[v8:word64] = x19
	v8 = v8 + 8
	Mem0[v8:word64] = x20
	x31 = x0 - 0x0000000000000009
	NZCV = cond(x31)
	x20 = x0
	branch Test(GT,NZV) l00000000004494B4
	// succ:  l000000000044947C l00000000004494B4
l000000000044947C:
	x19 = 0x00000000004E3000
	x19 = x19 + 0x00000000000004C8
	x0 = Mem0[x19 + x0:word64]
	branch x0 == 0x0000000000000000 l00000000004494DC
	// succ:  l000000000044948C l00000000004494DC
l000000000044948C:
	strlen(x0)
	sp = sp + 0xFFFFFFFFFFFFFFF8
	x1 = 0x00000000004AD000
	x1 = x1 + 0xFFFFFFFFFFFFFA20
	w2 = 0x00000B71
	x0 = x0 + 0x0000000000000001
	call sh_xmalloc (retsize: 0;)
	x1 = Mem0[x19 + x20:word64]
	v14 = sp + 16
	x19 = Mem0[v14:word64]
	v14 = v14 + 8
	x20 = Mem0[v14:word64]
	x29 = Mem0[sp:word64]
	sp = sp + 8
	x30 = Mem0[sp:word64]
	sp = sp + 32
	strcpy(x0, x1)
	return
	// succ:  get_dollar_var_value_exit
l00000000004494B4:
	x0 = 0x00000000004DF000
	x19 = Mem0[x0 + 3288:word64]
	branch x19 == 0x0000000000000000 l00000000004494DC
	// succ:  l00000000004494C0 l00000000004494DC
l00000000004494C0:
	x31 = x20 - 0x000000000000000A
	NZCV = cond(x31)
	x0 = x20 - 0x000000000000000B
	// succ:  l00000000004494C8
l00000000004494C8:
	branch Test(EQ,Z) l00000000004494EC
	// succ:  l00000000004494CC l00000000004494EC
l00000000004494CC:
	x19 = Mem0[x19:word64]
	x0 = x0 - 0x0000000000000001
	x31 = x0 + 0x0000000000000001
	NZCV = cond(x31)
	branch x19 != 0x0000000000000000 l00000000004494C8
	// succ:  l00000000004494DC l00000000004494C8
l00000000004494DC:
	x0 = 0x0000000000000000
	v16 = sp + 16
	x19 = Mem0[v16:word64]
	v16 = v16 + 8
	x20 = Mem0[v16:word64]
	x29 = Mem0[sp:word64]
	sp = sp + 8
	x30 = Mem0[sp:word64]
	sp = sp + 32
	return
	// succ:  get_dollar_var_value_exit
l00000000004494EC:
	x0 = Mem0[x19 + 8:word64]
	x0 = Mem0[x0:word64]
	strlen(x0)
	sp = sp + 0xFFFFFFFFFFFFFFF8
	x1 = 0x00000000004AD000
	x1 = x1 + 0xFFFFFFFFFFFFFA20
	w2 = 0x00000B77
	x0 = x0 + 0x0000000000000001
	call sh_xmalloc (retsize: 0;)
	x1 = Mem0[x19 + 8:word64]
	v17 = sp + 16
	x19 = Mem0[v17:word64]
	v17 = v17 + 8
	x20 = Mem0[v17:word64]
	x1 = Mem0[x1:word64]
	x29 = Mem0[sp:word64]
	sp = sp + 8
	x30 = Mem0[sp:word64]
	sp = sp + 32
	strcpy(x0, x1)
	return
	// succ:  get_dollar_var_value_exit
get_dollar_var_value_exit:


// string_rest_of_args
// Return size: 0
void string_rest_of_args()
string_rest_of_args_entry:
	// succ:  l0000000000449520
l0000000000449520:
	sp = fp
	sp = sp + -32
	Mem0[sp:word64] = x29
	sp = sp + 8
	Mem0[sp:word64] = x30
	x29 = x31 + 0x0000000000000000
	v8 = sp + 16
	Mem0[v8:word64] = x19
	v8 = v8 + 8
	Mem0[v8:word64] = x20
	w20 = w0
	call list_rest_of_args (retsize: 0;)
	x19 = x0
	branch w20 != 0x00000000 l0000000000449564
	// succ:  l000000000044953C l0000000000449564
l000000000044953C:
	x1 = 0x00000000004BE000
	x1 = x1 + 0x0000000000000330
	call string_list_internal (retsize: 0;)
	x20 = x0
	x0 = x19
	call dispose_words (retsize: 0;)
	x0 = x20
	v13 = sp + 16
	x19 = Mem0[v13:word64]
	v13 = v13 + 8
	x20 = Mem0[v13:word64]
	x29 = Mem0[sp:word64]
	sp = sp + 8
	x30 = Mem0[sp:word64]
	sp = sp + 32
	return
	// succ:  string_rest_of_args_exit
l0000000000449564:
	call string_list_dollar_star (retsize: 0;)
	x20 = x0
	x0 = x19
	call dispose_words (retsize: 0;)
	x0 = x20
	v14 = sp + 16
	x19 = Mem0[v14:word64]
	v14 = v14 + 8
	x20 = Mem0[v14:word64]
	x29 = Mem0[sp:word64]
	sp = sp + 8
	x30 = Mem0[sp:word64]
	sp = sp + 32
	return
	// succ:  string_rest_of_args_exit
string_rest_of_args_exit:


// remove_backslashes
// Return size: 0
void remove_backslashes()
remove_backslashes_entry:
	// succ:  l0000000000449584
l0000000000449584:
	sp = fp
	sp = sp + -32
	Mem0[sp:word64] = x29
	sp = sp + 8
	Mem0[sp:word64] = x30
	x29 = x31 + 0x0000000000000000
	Mem0[sp + 16:word64] = x19
	x19 = x0
	strlen(x0)
	sp = sp + 0xFFFFFFFFFFFFFFF8
	x1 = 0x00000000004AD000
	x0 = x0 + 0x0000000000000001
	x1 = x1 + 0xFFFFFFFFFFFFFA20
	w2 = 0x00000C37
	call sh_xmalloc (retsize: 0;)
	branch x19 == 0x0000000000000000 l00000000004495F8
	// succ:  l00000000004495B0 l00000000004495F8
l00000000004495B0:
	v11 = Mem0[x19:byte]
	w1 = (word32) v11
	x2 = x0
	branch w1 != 0x00000000 l00000000004495D4
	// succ:  l00000000004495BC l00000000004495D4
l00000000004495BC:
	goto l00000000004495E8
	// succ:  l00000000004495E8
l00000000004495D4:
	w31 = w1 - 0x0000005C
	NZCV = cond(w31)
l00000000004495E8:
	Mem0[x2:byte] = 0x00
	x19 = Mem0[sp + 16:word64]
	x29 = Mem0[sp:word64]
	sp = sp + 8
	x30 = Mem0[sp:word64]
	sp = sp + 32
	return
	// succ:  remove_backslashes_exit
l00000000004495F8:
	x2 = x0
	goto l00000000004495E8
	// succ:  l00000000004495E8
remove_backslashes_exit:


// quote_escapes
// Return size: 0
void quote_escapes()
quote_escapes_entry:
	// succ:  l0000000000449600
l0000000000449600:
	sp = fp
	sp = sp + -112
	Mem0[sp:word64] = x29
	sp = sp + 8
	Mem0[sp:word64] = x30
	x29 = x31 + 0x0000000000000000
	v8 = sp + 16
	Mem0[v8:word64] = x19
	v8 = v8 + 8
	Mem0[v8:word64] = x20
	v11 = sp + 48
	Mem0[v11:word64] = x23
	v11 = v11 + 8
	Mem0[v11:word64] = x24
	x20 = x0
	v15 = sp + 32
	Mem0[v15:word64] = x21
	v15 = v15 + 8
	Mem0[v15:word64] = x22
	v18 = sp + 64
	Mem0[v18:word64] = x25
	v18 = v18 + 8
	Mem0[v18:word64] = x26
	v21 = sp + 80
	Mem0[v21:word64] = x27
	v21 = v21 + 8
	Mem0[v21:word64] = x28
	Mem0[x29 + 96:word64] = 0x0000000000000000
	strlen(x0)
	sp = sp + 0xFFFFFFFFFFFFFFF8
	x1 = 0x00000000004E3000
	x1 = Mem0[x1 + 1600:word64]
	x23 = x20 + x0
	branch x1 == 0x0000000000000000 l00000000004497D4
	// succ:  l0000000000449638 l00000000004497D4
l0000000000449638:
	v24 = Mem0[x1:byte]
	w2 = (word32) v24
	branch w2 == 0x00000000 l00000000004497B0
	// succ:  l0000000000449640 l00000000004497B0
l0000000000449640:
	w22 = 0x00000000
	w21 = w22
	goto l0000000000449654
	// succ:  l0000000000449654
l000000000044964C:
	v33 = Mem0[x1:byte]
	w2 = (word32) v33
	branch w2 == 0x00000000 l00000000004497C0
	// succ:  l0000000000449654 l00000000004497C0
l0000000000449654:
	w31 = w2 - 0x00000001
	NZCV = cond(w31)
	w3 = (word32) Test(EQ,Z)
	w31 = w2 - 0x0000007F
	NZCV = cond(w31)
	w2 = (word32) Test(EQ,Z)
	x1 = x1 + 0x0000000000000001
	NZCV = cond(x1)
	w21 = w21 | w3
	w22 = w22 | w2
	branch Test(NE,Z) l000000000044964C
	// succ:  l0000000000449674 l000000000044964C
l0000000000449674:
	w24 = w1
	// succ:  l0000000000449678
l0000000000449678:
l00000000004497B0:
	w22 = w2
	w24 = 0x00000001
	w21 = w2
	goto l0000000000449678
	// succ:  l0000000000449678
l00000000004497C0:
	w24 = w2
	goto l0000000000449678
	// succ:  l0000000000449678
l00000000004497D4:
	w24 = w1
	w22 = w1
	w21 = w1
	goto l0000000000449678
	// succ:  l0000000000449678
quote_escapes_exit:


// dequote_escapes
// Return size: 0
void dequote_escapes()
dequote_escapes_entry:
	// succ:  l00000000004497E4
l00000000004497E4:
	sp = fp
	sp = sp + -96
	Mem0[sp:word64] = x29
	sp = sp + 8
	Mem0[sp:word64] = x30
	x29 = x31 + 0x0000000000000000
	v8 = sp + 16
	Mem0[v8:word64] = x19
	v8 = v8 + 8
	Mem0[v8:word64] = x20
	v11 = sp + 32
	Mem0[v11:word64] = x21
	v11 = v11 + 8
	Mem0[v11:word64] = x22
	v14 = sp + 48
	Mem0[v14:word64] = x23
	v14 = v14 + 8
	Mem0[v14:word64] = x24
	Mem0[sp + 64:word64] = x25
	Mem0[x29 + 80:word64] = 0x0000000000000000
	x20 = x0
	branch x0 == 0x0000000000000000 l0000000000449960
	// succ:  l0000000000449808 l0000000000449960
l0000000000449808:
	strlen(x0)
	sp = sp + 0xFFFFFFFFFFFFFFF8
	x1 = 0x00000000004AD000
	x23 = x0
	x1 = x1 + 0xFFFFFFFFFFFFFA20
	x0 = x0 + 0x0000000000000001
	w2 = 0x00000DAD
	call sh_xmalloc (retsize: 0;)
	x24 = x0
	w1 = 0x00000001
	x0 = x20
	x23 = x20 + x23
	strchr(x0, x1)
	sp = sp + 0xFFFFFFFFFFFFFFF8
	branch x0 == 0x0000000000000000 l0000000000449984
	// succ:  l000000000044983C l0000000000449984
l000000000044983C:
	x0 = 0x00000000004E3000
	x22 = Mem0[x0 + 1600:word64]
	branch x22 == 0x0000000000000000 l0000000000449854
	// succ:  l0000000000449848 l0000000000449854
l0000000000449848:
	v21 = Mem0[x22:byte]
	w0 = (word32) v21
	NZCV = cond(w0 - w31)
	w22 = (word32) Test(EQ,Z)
	// succ:  l0000000000449854
l0000000000449854:
	x21 = 0x00000000004C2000
	v29 = Mem0[x20:byte]
	w1 = (word32) v29
	x19 = x24
	x21 = x21 + 0xFFFFFFFFFFFFFCC0
	// succ:  l0000000000449864
l0000000000449864:
	branch w1 == 0x00000000 l00000000004498E8
	// succ:  l0000000000449868 l00000000004498E8
l0000000000449868:
	w31 = w1 - 0x00000001
	NZCV = cond(w31)
	branch Test(NE,Z) l0000000000449890
	// succ:  l0000000000449870 l0000000000449890
l0000000000449870:
	v30 = Mem0[x20 + 1:byte]
	w1 = (word32) v30
	w31 = w1 - 0x0000007F
	NZCV = cond(w31)
	branch Test(EQ,Z) l0000000000449954
	// succ:  l000000000044987C l0000000000449954
l000000000044987C:
	w31 = w1 - 0x00000001
	NZCV = cond(w31)
	branch Test(EQ,Z) l0000000000449954
	// succ:  l0000000000449884 l0000000000449954
l0000000000449884:
	branch w22 == 0x00000000 l0000000000449890
	// succ:  l0000000000449888 l0000000000449890
l0000000000449888:
	w31 = w1 - 0x00000020
	NZCV = cond(w31)
l0000000000449890:
	__ctype_get_mb_cur_max()
	sp = sp + 0xFFFFFFFFFFFFFFF8
	x31 = x0 - 0x0000000000000001
	NZCV = cond(x31)
	branch Test(ULE,ZC) l000000000044993C
	// succ:  l000000000044989C l000000000044993C
l000000000044989C:
	v33 = Mem0[x20:byte]
	w4 = (word32) v33
	x0 = 0x0000000000000001
l00000000004498E8:
	Mem0[x19:byte] = 0x00
	x0 = x24
	// succ:  l00000000004498F0
l00000000004498F0:
	v34 = sp + 16
	x19 = Mem0[v34:word64]
	v34 = v34 + 8
	x20 = Mem0[v34:word64]
	v35 = sp + 32
	x21 = Mem0[v35:word64]
	v35 = v35 + 8
	x22 = Mem0[v35:word64]
	v36 = sp + 48
	x23 = Mem0[v36:word64]
	v36 = v36 + 8
	x24 = Mem0[v36:word64]
	x25 = Mem0[sp + 64:word64]
	x29 = Mem0[sp:word64]
	sp = sp + 8
	x30 = Mem0[sp:word64]
	sp = sp + 96
	return
	// succ:  dequote_escapes_exit
l000000000044993C:
	v37 = Mem0[x20:byte]
	w1 = (word32) v37
	x19 = x19 + 0x0000000000000001
	Mem0[x19 + -1:byte] = (byte) w1
	v38 = Mem0[x20 + 1:byte]
	w1 = (word32) v38
	x20 = x20 + 0x0000000000000001
	goto l0000000000449864
	// succ:  l0000000000449864
l0000000000449954:
	x20 = x20 + 0x0000000000000001
	branch w1 != 0x00000000 l0000000000449890
	// succ:  l000000000044995C l0000000000449890
l000000000044995C:
	goto l00000000004498E8
	// succ:  l00000000004498E8
l0000000000449960:
	v26 = sp + 16
	x19 = Mem0[v26:word64]
	v26 = v26 + 8
	x20 = Mem0[v26:word64]
	v27 = sp + 32
	x21 = Mem0[v27:word64]
	v27 = v27 + 8
	x22 = Mem0[v27:word64]
	v28 = sp + 48
	x23 = Mem0[v28:word64]
	v28 = v28 + 8
	x24 = Mem0[v28:word64]
	x25 = Mem0[sp + 64:word64]
	x29 = Mem0[sp:word64]
	sp = sp + 8
	x30 = Mem0[sp:word64]
	sp = sp + 96
	return
	// succ:  dequote_escapes_exit
l0000000000449984:
	x0 = x24
	x1 = x20
	strcpy(x0, x1)
	sp = sp + 0xFFFFFFFFFFFFFFF8
	goto l00000000004498F0
	// succ:  l00000000004498F0
dequote_escapes_exit:


// quote_string
// Return size: 0
void quote_string()
quote_string_entry:
	// succ:  l0000000000449994
l0000000000449994:
	sp = fp
	sp = sp + -96
	Mem0[sp:word64] = x29
	sp = sp + 8
	Mem0[sp:word64] = x30
	x29 = x31 + 0x0000000000000000
	v8 = sp + 16
	Mem0[v8:word64] = x19
	v8 = v8 + 8
	Mem0[v8:word64] = x20
	v11 = sp + 32
	Mem0[v11:word64] = x21
	v11 = v11 + 8
	Mem0[v11:word64] = x22
	v14 = sp + 48
	Mem0[v14:word64] = x23
	v14 = v14 + 8
	Mem0[v14:word64] = x24
	Mem0[sp + 64:word64] = x25
	v18 = Mem0[x0:byte]
	w19 = (word32) v18
	x20 = x0
	branch w19 == 0x00000000 l0000000000449AB8
	// succ:  l00000000004499B8 l0000000000449AB8
l00000000004499B8:
	Mem0[x29 + 80:word64] = 0x0000000000000000
	strlen(x0)
	sp = sp + 0xFFFFFFFFFFFFFFF8
	x21 = x0
	x1 = 0x00000000004AD000
l0000000000449AB8:
	x1 = 0x00000000004AD000
	x1 = x1 + 0xFFFFFFFFFFFFFA20
	w2 = 0x00000DE8
	x0 = 0x0000000000000002
	call sh_xmalloc (retsize: 0;)
	x24 = x0
	w0 = 0x0000007F
	Mem0[x24:byte] = (byte) w0
	Mem0[x24 + 1:byte] = (byte) w19
	x0 = x24
	v22 = sp + 16
	x19 = Mem0[v22:word64]
	v22 = v22 + 8
	x20 = Mem0[v22:word64]
	v23 = sp + 32
	x21 = Mem0[v23:word64]
	v23 = v23 + 8
	x22 = Mem0[v23:word64]
	v24 = sp + 48
	x23 = Mem0[v24:word64]
	v24 = v24 + 8
	x24 = Mem0[v24:word64]
	x25 = Mem0[sp + 64:word64]
	x29 = Mem0[sp:word64]
	sp = sp + 8
	x30 = Mem0[sp:word64]
	sp = sp + 96
	return
	// succ:  quote_string_exit
quote_string_exit:


// fn0000000000449B04
// Return size: 0
void fn0000000000449B04()
fn0000000000449B04_entry:
	// succ:  l0000000000449B04
l0000000000449B04:
	sp = fp
	sp = sp + -64
	Mem0[sp:word64] = x29
	sp = sp + 8
	Mem0[sp:word64] = x30
	x29 = x31 + 0x0000000000000000
	v8 = sp + 16
	Mem0[v8:word64] = x19
	v8 = v8 + 8
	Mem0[v8:word64] = x20
	v11 = sp + 32
	Mem0[v11:word64] = x21
	v11 = v11 + 8
	Mem0[v11:word64] = x22
	Mem0[sp + 48:word64] = x23
	x22 = 0x00000000004AD000
	x23 = x0
	x19 = x0
	x22 = x22 + 0xFFFFFFFFFFFFFA20
	branch x0 != 0x0000000000000000 l0000000000449B58
	// succ:  l0000000000449B2C l0000000000449B58
l0000000000449B2C:
	goto l0000000000449BA4
	// succ:  l0000000000449BA4
l0000000000449B30:
	x2 = Mem0[x19 + 8:word64]
	x0 = x20
	w3 = Mem0[x2 + 8:word32]
	x1 = x22
	w3 = w3 | 0x00000002
	Mem0[x2 + 8:word32] = w3
	w2 = 0x00000E38
	call sh_xfree (retsize: 0;)
	x19 = Mem0[x19:word64]
	branch x19 == 0x0000000000000000 l0000000000449BA4
	// succ:  l0000000000449B58 l0000000000449BA4
l0000000000449B58:
	x21 = Mem0[x19 + 8:word64]
	x20 = Mem0[x21:word64]
	x0 = x20
	call quote_string (retsize: 0;)
	Mem0[x21:word64] = x0
	v15 = Mem0[x20:byte]
	w2 = (word32) v15
	branch w2 != 0x00000000 l0000000000449B30
	// succ:  l0000000000449B74 l0000000000449B30
l0000000000449B74:
	x2 = Mem0[x19 + 8:word64]
	x0 = x20
	w3 = Mem0[x2 + 8:word32]
	x1 = x22
	w3 = w3 | 0x00040000
	Mem0[x2 + 8:word32] = w3
	w3 = w3 | 0x00000002
	Mem0[x2 + 8:word32] = w3
	w2 = 0x00000E38
	call sh_xfree (retsize: 0;)
	x19 = Mem0[x19:word64]
	branch x19 != 0x0000000000000000 l0000000000449B58
	// succ:  l0000000000449BA4 l0000000000449B58
l0000000000449BA4:
	x0 = x23
	v19 = sp + 16
	x19 = Mem0[v19:word64]
	v19 = v19 + 8
	x20 = Mem0[v19:word64]
	v20 = sp + 32
	x21 = Mem0[v20:word64]
	v20 = v20 + 8
	x22 = Mem0[v20:word64]
	x23 = Mem0[sp + 48:word64]
	x29 = Mem0[sp:word64]
	sp = sp + 8
	x30 = Mem0[sp:word64]
	sp = sp + 64
	return
	// succ:  fn0000000000449B04_exit
fn0000000000449B04_exit:


// string_list_dollar_at
// Return size: 0
void string_list_dollar_at()
string_list_dollar_at_entry:
	// succ:  l0000000000449BBC
l0000000000449BBC:
	sp = fp
	sp = sp + -64
	Mem0[sp:word64] = x29
	sp = sp + 8
	Mem0[sp:word64] = x30
	x29 = x31 + 0x0000000000000000
	v8 = sp + 48
	Mem0[v8:word64] = x23
	v8 = v8 + 8
	Mem0[v8:word64] = x24
	v11 = sp + 16
	Mem0[v11:word64] = x19
	v11 = v11 + 8
	Mem0[v11:word64] = x20
	v14 = sp + 32
	Mem0[v14:word64] = x21
	v14 = v14 + 8
	Mem0[v14:word64] = x22
	w19 = w1
	x23 = x0
	__ctype_get_mb_cur_max()
	sp = sp + 0xFFFFFFFFFFFFFFF8
	x1 = 0x00000000004E3000
	x0 = x0 + 0x0000000000000010
	x0 = x0 & 0x0000000000000000
	x2 = Mem0[x1 + 1584:word64]
	x1 = x31 + 0x0000000000000000
	x31 = x1 - x0
	x24 = x31 + 0x0000000000000000
	branch x2 == 0x0000000000000000 l0000000000449C0C
	// succ:  l0000000000449BFC l0000000000449C0C
l0000000000449BFC:
	x0 = Mem0[x2 + 8:word64]
	branch x0 == 0x0000000000000000 l0000000000449C0C
	// succ:  l0000000000449C04 l0000000000449C0C
l0000000000449C04:
	v21 = Mem0[x0:byte]
	w0 = (word32) v21
	branch w0 != 0x00000000 l0000000000449C84
	// succ:  l0000000000449C0C l0000000000449C84
l0000000000449C0C:
	w0 = 0x00000020
	Mem0[x24:byte] = (byte) w0
	Mem0[x24 + 1:byte] = 0x00
	// succ:  l0000000000449C18
l0000000000449C18:
	w0 = 0x0000000B
	NZ = cond(w19 & w0)
	C = false
	V = false
	branch Test(NE,Z) l0000000000449CB0
	// succ:  l0000000000449C24 l0000000000449CB0
l0000000000449C24:
	x22 = 0x00000000004AD000
	x19 = x23
	x22 = x22 + 0xFFFFFFFFFFFFFA20
	branch x23 == 0x0000000000000000 l0000000000449C60
	// succ:  l0000000000449C34 l0000000000449C60
l0000000000449C34:
	x21 = Mem0[x19 + 8:word64]
	x20 = Mem0[x21:word64]
	x0 = x20
	call quote_escapes (retsize: 0;)
	Mem0[x21:word64] = x0
	x1 = x22
	x0 = x20
	w2 = 0x00000D8D
	call sh_xfree (retsize: 0;)
	x19 = Mem0[x19:word64]
	branch x19 != 0x0000000000000000 l0000000000449C34
	// succ:  l0000000000449C60 l0000000000449C34
l0000000000449C60:
	x1 = x24
	x0 = x23
	call string_list_internal (retsize: 0;)
	x31 = x29 + 0x0000000000000000
	v27 = sp + 16
	x19 = Mem0[v27:word64]
	v27 = v27 + 8
	x20 = Mem0[v27:word64]
	v28 = sp + 32
	x21 = Mem0[v28:word64]
	v28 = v28 + 8
	x22 = Mem0[v28:word64]
	v29 = sp + 48
	x23 = Mem0[v29:word64]
	v29 = v29 + 8
	x24 = Mem0[v29:word64]
	x29 = Mem0[sp:word64]
	sp = sp + 8
	x30 = Mem0[sp:word64]
	sp = sp + 64
	return
	// succ:  string_list_dollar_at_exit
l0000000000449C84:
	x0 = 0x00000000004E3000
	x20 = Mem0[x0 + 1616:word64]
	x31 = x20 - 0x0000000000000001
	NZCV = cond(x31)
	branch Test(NE,Z) l0000000000449CC0
	// succ:  l0000000000449C94 l0000000000449CC0
l0000000000449C94:
	x0 = 0x00000000004E3000
	v31 = Mem0[x0 + 1312:byte]
	w0 = (word32) v31
	Mem0[sp + 1:byte] = 0x00
	Mem0[sp:byte] = (byte) w0
	w0 = 0x0000000B
	NZ = cond(w19 & w0)
	C = false
	V = false
	branch Test(EQ,Z) l0000000000449C24
	// succ:  l0000000000449CB0 l0000000000449C24
l0000000000449CB0:
	x0 = x23
	call fn0000000000449B04 (retsize: 0;)
	x23 = x0
	goto l0000000000449C60
	// succ:  l0000000000449C60
l0000000000449CC0:
	x1 = 0x00000000004E3000
	x0 = x31 + 0x0000000000000000
	x1 = x1 + 0x0000000000000520
	x2 = x20
	memcpy(x0, x1, x2)
	sp = sp + 0xFFFFFFFFFFFFFFF8
	Mem0[sp + x20:byte] = 0x00
	goto l0000000000449C18
	// succ:  l0000000000449C18
string_list_dollar_at_exit:


// dequote_string
// Return size: 0
void dequote_string()
dequote_string_entry:
	// succ:  l0000000000449CDC
l0000000000449CDC:
	sp = fp
	sp = sp + -80
	Mem0[sp:word64] = x29
	sp = sp + 8
	Mem0[sp:word64] = x30
	x29 = x31 + 0x0000000000000000
	v8 = sp + 48
	Mem0[v8:word64] = x23
	v8 = v8 + 8
	Mem0[v8:word64] = x24
	v11 = sp + 16
	Mem0[v11:word64] = x19
	v11 = v11 + 8
	Mem0[v11:word64] = x20
	v14 = sp + 32
	Mem0[v14:word64] = x21
	v14 = v14 + 8
	Mem0[v14:word64] = x22
	x19 = x0
	Mem0[x29 + 64:word64] = 0x0000000000000000
	strlen(x0)
	sp = sp + 0xFFFFFFFFFFFFFFF8
	x1 = 0x00000000004AD000
	x23 = x0
	x1 = x1 + 0xFFFFFFFFFFFFFA20
	x0 = x0 + 0x0000000000000001
	w2 = 0x00000E0B
	call sh_xmalloc (retsize: 0;)
	v19 = Mem0[x19:byte]
	w21 = (word32) v19
	x24 = x0
	w31 = w21 - 0x0000007F
	NZCV = cond(w31)
	branch Test(EQ,Z) l0000000000449E20
	// succ:  l0000000000449D24 l0000000000449E20
l0000000000449D24:
	x0 = x19
	w1 = 0x00000001
	x22 = 0x00000000004C2000
	strchr(x0, x1)
	sp = sp + 0xFFFFFFFFFFFFFFF8
	x23 = x19 + x23
	x20 = x24
	x22 = x22 + 0xFFFFFFFFFFFFFCC0
	branch x0 == 0x0000000000000000 l0000000000449E50
	// succ:  l0000000000449D44 l0000000000449E50
l0000000000449D44:
	branch w21 == 0x00000000 l0000000000449DB8
	// succ:  l0000000000449D48 l0000000000449DB8
l0000000000449D48:
	w31 = w21 - 0x00000001
	NZCV = cond(w31)
	branch Test(NE,Z) l0000000000449D5C
	// succ:  l0000000000449D50 l0000000000449D5C
l0000000000449D50:
	v24 = Mem0[x19 + 1:byte]
	w1 = (word32) v24
	x19 = x19 + 0x0000000000000001
	branch w1 == 0x00000000 l0000000000449DB8
	// succ:  l0000000000449D5C l0000000000449DB8
l0000000000449D5C:
	__ctype_get_mb_cur_max()
	sp = sp + 0xFFFFFFFFFFFFFFF8
	x31 = x0 - 0x0000000000000001
	NZCV = cond(x31)
	branch Test(ULE,ZC) l0000000000449E08
	// succ:  l0000000000449D68 l0000000000449E08
l0000000000449D68:
	v26 = Mem0[x19:byte]
	w2 = (word32) v26
	x0 = 0x0000000000000001
l0000000000449DB8:
	Mem0[x20:byte] = 0x00
	x0 = x24
	// succ:  l0000000000449DC0
l0000000000449DC0:
	v34 = sp + 16
	x19 = Mem0[v34:word64]
	v34 = v34 + 8
	x20 = Mem0[v34:word64]
	v35 = sp + 32
	x21 = Mem0[v35:word64]
	v35 = v35 + 8
	x22 = Mem0[v35:word64]
	v36 = sp + 48
	x23 = Mem0[v36:word64]
	v36 = v36 + 8
	x24 = Mem0[v36:word64]
	x29 = Mem0[sp:word64]
	sp = sp + 8
	x30 = Mem0[sp:word64]
	sp = sp + 80
	return
	// succ:  dequote_string_exit
l0000000000449E08:
	v32 = Mem0[x19:byte]
	w1 = (word32) v32
	x20 = x20 + 0x0000000000000001
	Mem0[x20 + -1:byte] = (byte) w1
	v33 = Mem0[x19 + 1:byte]
	w21 = (word32) v33
	x19 = x19 + 0x0000000000000001
	goto l0000000000449D44
	// succ:  l0000000000449D44
l0000000000449E20:
	v28 = Mem0[x19 + 1:byte]
	w0 = (word32) v28
	branch w0 != 0x00000000 l0000000000449D24
	// succ:  l0000000000449E28 l0000000000449D24
l0000000000449E28:
	Mem0[x24:byte] = (byte) w0
	v29 = sp + 16
	x19 = Mem0[v29:word64]
	v29 = v29 + 8
	x20 = Mem0[v29:word64]
	x0 = x24
	v30 = sp + 32
	x21 = Mem0[v30:word64]
	v30 = v30 + 8
	x22 = Mem0[v30:word64]
	v31 = sp + 48
	x23 = Mem0[v31:word64]
	v31 = v31 + 8
	x24 = Mem0[v31:word64]
	x29 = Mem0[sp:word64]
	sp = sp + 8
	x30 = Mem0[sp:word64]
	sp = sp + 80
	return
	// succ:  dequote_string_exit
l0000000000449E50:
	x0 = x24
	x1 = x19
	strcpy(x0, x1)
	sp = sp + 0xFFFFFFFFFFFFFFF8
	goto l0000000000449DC0
	// succ:  l0000000000449DC0
dequote_string_exit:


// fn0000000000449E60
// Return size: 0
void fn0000000000449E60()
fn0000000000449E60_entry:
	// succ:  l0000000000449E60
l0000000000449E60:
	sp = fp
	sp = sp + -112
	Mem0[sp:word64] = x29
	sp = sp + 8
	Mem0[sp:word64] = x30
	x29 = x31 + 0x0000000000000000
	v8 = sp + 32
	Mem0[v8:word64] = x21
	v8 = v8 + 8
	Mem0[v8:word64] = x22
	v11 = sp + 64
	Mem0[v11:word64] = x25
	v11 = v11 + 8
	Mem0[v11:word64] = x26
	v14 = sp + 16
	Mem0[v14:word64] = x19
	v14 = v14 + 8
	Mem0[v14:word64] = x20
	v17 = sp + 48
	Mem0[v17:word64] = x23
	v17 = v17 + 8
	Mem0[v17:word64] = x24
	Mem0[sp + 80:word64] = x27
	v21 = Mem0[x0:byte]
	w8 = (word32) v21
	x19 = x0
	w31 = w8 - 0x0000002A
	NZCV = cond(w31)
	w7 = (word32) Test(EQ,Z)
	x26 = x1
	x24 = x2
	w27 = w3
	w25 = w4
	x21 = x5
	x22 = x6
	branch w7 != 0x00000000 l0000000000449F6C
	// succ:  l0000000000449EA8 l0000000000449F6C
l0000000000449EA8:
	w31 = w8 - 0x00000040
	NZCV = cond(w31)
	w20 = w7
	branch Test(EQ,Z) l0000000000449F6C
	// succ:  l0000000000449EB4 l0000000000449F6C
l0000000000449EB4:
	Mem0[x21:word64] = 0x0000000000000000
	x0 = x19
	call valid_array_reference (retsize: 0;)
	branch w0 == 0x00000000 l0000000000449F90
	// succ:  l0000000000449EC4 l0000000000449F90
l0000000000449EC4:
	x0 = x19
	x1 = x29 + 0x0000000000000068
	x2 = 0x0000000000000000
	call array_variable_part (retsize: 0;)
	x23 = x0
	x0 = 0x8000000000000000
	x31 = x24 - x0
	NZCV = cond(x31)
	branch Test(EQ,Z) l000000000044A0A8
	// succ:  l0000000000449EE4 l000000000044A0A8
l0000000000449EE4:
	w0 = w25 & 0x00000004
	NZCV = cond(w0 - w31)
l0000000000449EF0:
	Mem0[x29 + 96:word64] = x24
	branch x23 == 0x0000000000000000 l000000000044A040
	// succ:  l0000000000449EF8 l000000000044A040
l0000000000449EF8:
	w0 = Mem0[x23 + 40:word32]
	w1 = 0x00000044
	NZ = cond(w0 & w1)
	C = false
	V = false
	branch Test(EQ,Z) l000000000044A01C
	// succ:  l0000000000449F08 l000000000044A01C
l0000000000449F08:
	x0 = Mem0[x29 + 104:word64]
	v50 = Mem0[x0:byte]
	w1 = (word32) v50
	w31 = w1 - 0x0000002A
	NZCV = cond(w31)
	w2 = (word32) Test(EQ,Z)
	branch w2 == 0x00000000 l000000000044A0B0
	// succ:  l0000000000449F1C l000000000044A0B0
l0000000000449F1C:
	v51 = Mem0[x0 + 1:byte]
	w0 = (word32) v51
	w31 = w0 - 0x0000005D
	NZCV = cond(w31)
	branch Test(EQ,Z) l000000000044A0E4
	// succ:  l0000000000449F28 l000000000044A0E4
l0000000000449F28:
	x0 = x19
	w1 = 0x00000001
	w2 = w25
	x3 = 0x0000000000000000
	x4 = x29 + 0x0000000000000060
	call array_value (retsize: 0;)
	Mem0[x22:word64] = x0
	w20 = 0x00000003
	Mem0[x21:word64] = x23
	w0 = w20
	v54 = sp + 32
	x21 = Mem0[v54:word64]
	v54 = v54 + 8
	x22 = Mem0[v54:word64]
	v55 = sp + 16
	x19 = Mem0[v55:word64]
	v55 = v55 + 8
	x20 = Mem0[v55:word64]
	v56 = sp + 48
	x23 = Mem0[v56:word64]
	v56 = v56 + 8
	x24 = Mem0[v56:word64]
	v57 = sp + 64
	x25 = Mem0[v57:word64]
	v57 = v57 + 8
	x26 = Mem0[v57:word64]
	x27 = Mem0[sp + 80:word64]
	x29 = Mem0[sp:word64]
	sp = sp + 8
	x30 = Mem0[sp:word64]
	sp = sp + 112
	return
	// succ:  fn0000000000449E60_exit
l0000000000449F6C:
	v36 = Mem0[x19 + 1:byte]
	w0 = (word32) v36
	branch w0 != 0x00000000 l0000000000449FF0
	// succ:  l0000000000449F74 l0000000000449FF0
l0000000000449F74:
	NZCV = cond(w7 - w31)
	w20 = 0x00000081
	Mem0[x21:word64] = 0x0000000000000000
	x0 = x19
l0000000000449F90:
	x0 = x19
	call find_variable (retsize: 0;)
	branch x0 == 0x0000000000000000 l0000000000449FF8
	// succ:  l0000000000449F9C l0000000000449FF8
l0000000000449F9C:
	w1 = Mem0[x0 + 40:word32]
	branch (w1 & 0x00001000) == 0x00000000 l0000000000449FF8
	// succ:  l0000000000449FA4 l0000000000449FF8
l0000000000449FA4:
	w2 = 0x00000044
	NZ = cond(w1 & w2)
	C = false
	V = false
	branch Test(EQ,Z) l0000000000449FF8
	// succ:  l0000000000449FB0 l0000000000449FF8
l0000000000449FB0:
	Mem0[x21:word64] = x0
	x0 = Mem0[x0 + 8:word64]
	branch (w1 & 0x00000040) == 0x00000000 l000000000044A0D8
	// succ:  l0000000000449FBC l000000000044A0D8
l0000000000449FBC:
	x1 = 0x00000000004AC000
	x1 = x1 + 0xFFFFFFFFFFFFF988
	call assoc_reference (retsize: 0;)
	// succ:  l0000000000449FC8
l0000000000449FC8:
	Mem0[x22:word64] = x0
	w20 = 0x00000003
	w0 = w20
	v42 = sp + 32
	x21 = Mem0[v42:word64]
	v42 = v42 + 8
	x22 = Mem0[v42:word64]
	v43 = sp + 16
	x19 = Mem0[v43:word64]
	v43 = v43 + 8
	x20 = Mem0[v43:word64]
	v44 = sp + 48
	x23 = Mem0[v44:word64]
	v44 = v44 + 8
	x24 = Mem0[v44:word64]
	v45 = sp + 64
	x25 = Mem0[v45:word64]
	v45 = v45 + 8
	x26 = Mem0[v45:word64]
	x27 = Mem0[sp + 80:word64]
	x29 = Mem0[sp:word64]
	sp = sp + 8
	x30 = Mem0[sp:word64]
	sp = sp + 112
	return
	// succ:  fn0000000000449E60_exit
l0000000000449FF0:
	w20 = 0x00000000
	goto l0000000000449EB4
	// succ:  l0000000000449EB4
l0000000000449FF8:
	branch w20 != 0x00000000 l000000000044A084
	// succ:  l0000000000449FFC l000000000044A084
l0000000000449FFC:
	branch x26 == 0x0000000000000000 l000000000044A084
	// succ:  l000000000044A000 l000000000044A084
l000000000044A000:
	w20 = w27 & 0x00000003
	NZ = cond(w20)
	C = false
	V = false
	x0 = x26
	branch Test(EQ,Z) l000000000044A0CC
	// succ:  l000000000044A00C l000000000044A0CC
l000000000044A00C:
	call dequote_string (retsize: 0;)
	Mem0[x22:word64] = x0
	w20 = 0x00000000
	goto l000000000044A064
	// succ:  l000000000044A064
l000000000044A01C:
	x1 = Mem0[x29 + 104:word64]
	v62 = Mem0[x1:byte]
	w0 = (word32) v62
	w31 = w0 - 0x0000002A
	NZCV = cond(w31)
	branch Test(EQ,Z) l000000000044A034
	// succ:  l000000000044A02C l000000000044A034
l000000000044A02C:
	w31 = w0 - 0x00000040
	NZCV = cond(w31)
	branch Test(NE,Z) l000000000044A040
	// succ:  l000000000044A034 l000000000044A040
l000000000044A034:
	v63 = Mem0[x1 + 1:byte]
	w0 = (word32) v63
	w31 = w0 - 0x0000005D
	NZCV = cond(w31)
	branch Test(EQ,Z) l000000000044A0BC
	// succ:  l000000000044A040 l000000000044A0BC
l000000000044A040:
	Mem0[x21:word64] = x23
	x0 = x19
	w1 = 0x00000001
	w2 = w25
	x3 = 0x0000000000000000
	x4 = x29 + 0x0000000000000060
	call array_value (retsize: 0;)
	Mem0[x22:word64] = x0
	w20 = 0x00000003
	// succ:  l000000000044A064
l000000000044A064:
	w0 = w20
	v46 = sp + 32
	x21 = Mem0[v46:word64]
	v46 = v46 + 8
	x22 = Mem0[v46:word64]
	v47 = sp + 16
	x19 = Mem0[v47:word64]
	v47 = v47 + 8
	x20 = Mem0[v47:word64]
	v48 = sp + 48
	x23 = Mem0[v48:word64]
	v48 = v48 + 8
	x24 = Mem0[v48:word64]
	v49 = sp + 64
	x25 = Mem0[v49:word64]
	v49 = v49 + 8
	x26 = Mem0[v49:word64]
	x27 = Mem0[sp + 80:word64]
	x29 = Mem0[sp:word64]
	sp = sp + 8
	x30 = Mem0[sp:word64]
	sp = sp + 112
	return
	// succ:  fn0000000000449E60_exit
l000000000044A084:
	Mem0[x22:word64] = x26
	w0 = w20
	v58 = sp + 32
	x21 = Mem0[v58:word64]
	v58 = v58 + 8
	x22 = Mem0[v58:word64]
	v59 = sp + 16
	x19 = Mem0[v59:word64]
	v59 = v59 + 8
	x20 = Mem0[v59:word64]
	v60 = sp + 48
	x23 = Mem0[v60:word64]
	v60 = v60 + 8
	x24 = Mem0[v60:word64]
	v61 = sp + 64
	x25 = Mem0[v61:word64]
	v61 = v61 + 8
	x26 = Mem0[v61:word64]
	x27 = Mem0[sp + 80:word64]
	x29 = Mem0[sp:word64]
	sp = sp + 8
	x30 = Mem0[sp:word64]
	sp = sp + 112
	return
	// succ:  fn0000000000449E60_exit
l000000000044A0A8:
	x24 = 0x0000000000000000
	goto l0000000000449EF0
	// succ:  l0000000000449EF0
l000000000044A0B0:
	w31 = w1 - 0x00000040
	NZCV = cond(w31)
	branch Test(EQ,Z) l0000000000449F1C
	// succ:  l000000000044A0B8 l0000000000449F1C
l000000000044A0B8:
	goto l0000000000449F28
	// succ:  l0000000000449F28
l000000000044A0BC:
	Mem0[x21:word64] = x23
	w20 = w27 & 0x00000003
	NZ = cond(w20)
	C = false
	V = false
	x0 = x26
	branch Test(NE,Z) l000000000044A00C
	// succ:  l000000000044A0CC l000000000044A00C
l000000000044A0CC:
	call dequote_escapes (retsize: 0;)
	Mem0[x22:word64] = x0
	goto l000000000044A064
	// succ:  l000000000044A064
l000000000044A0D8:
	x1 = 0x0000000000000000
	call array_reference (retsize: 0;)
	goto l0000000000449FC8
	// succ:  l0000000000449FC8
l000000000044A0E4:
	x0 = Mem0[x23 + 8:word64]
	NZCV = cond(w2 - w31)
	w1 = 0x00000002
	w20 = 0x00000082
	Mem0[x22:word64] = x0
fn0000000000449E60_exit:


// dequote_list
// Return size: 0
void dequote_list()
dequote_list_entry:
	// succ:  l000000000044A104
l000000000044A104:
	sp = fp
	sp = sp + -48
	Mem0[sp:word64] = x29
	sp = sp + 8
	Mem0[sp:word64] = x30
	x29 = x31 + 0x0000000000000000
	v8 = sp + 32
	Mem0[v8:word64] = x21
	v8 = v8 + 8
	Mem0[v8:word64] = x22
	v11 = sp + 16
	Mem0[v11:word64] = x19
	v11 = v11 + 8
	Mem0[v11:word64] = x20
	x21 = 0x00000000004AD000
	x22 = x0
	x19 = x0
	x21 = x21 + 0xFFFFFFFFFFFFFA20
	branch x0 != 0x0000000000000000 l000000000044A140
	// succ:  l000000000044A128 l000000000044A140
l000000000044A128:
	goto l000000000044A198
	// succ:  l000000000044A198
l000000000044A12C:
	call sh_xfree (retsize: 0;)
	x2 = Mem0[x19 + 8:word64]
	x19 = Mem0[x19:word64]
	Mem0[x2:word64] = x20
	branch x19 == 0x0000000000000000 l000000000044A198
	// succ:  l000000000044A140 l000000000044A198
l000000000044A140:
	x2 = Mem0[x19 + 8:word64]
	x0 = Mem0[x2:word64]
	call dequote_string (retsize: 0;)
	x4 = Mem0[x19 + 8:word64]
	x20 = x0
	x3 = Mem0[x4:word64]
	x1 = x21
	v18 = Mem0[x3:byte]
	w5 = (word32) v18
	w2 = 0x00000E4A
	w31 = w5 - 0x0000007F
	NZCV = cond(w31)
	x0 = x3
	branch Test(NE,Z) l000000000044A12C
	// succ:  l000000000044A170 l000000000044A12C
l000000000044A170:
	v24 = Mem0[x3 + 1:byte]
	w3 = (word32) v24
	branch w3 != 0x00000000 l000000000044A12C
	// succ:  l000000000044A178 l000000000044A12C
l000000000044A178:
	w3 = Mem0[x4 + 8:word32]
	w3 = w3 & 0xFFFBFFFF
	Mem0[x4 + 8:word32] = w3
	call sh_xfree (retsize: 0;)
	x2 = Mem0[x19 + 8:word64]
	x19 = Mem0[x19:word64]
	Mem0[x2:word64] = x20
	branch x19 != 0x0000000000000000 l000000000044A140
	// succ:  l000000000044A198 l000000000044A140
l000000000044A198:
	x0 = x22
	v25 = sp + 16
	x19 = Mem0[v25:word64]
	v25 = v25 + 8
	x20 = Mem0[v25:word64]
	v26 = sp + 32
	x21 = Mem0[v26:word64]
	v26 = v26 + 8
	x22 = Mem0[v26:word64]
	x29 = Mem0[sp:word64]
	sp = sp + 8
	x30 = Mem0[sp:word64]
	sp = sp + 48
	return
	// succ:  dequote_list_exit
dequote_list_exit:


// remove_quoted_escapes
// Return size: 0
void remove_quoted_escapes()
remove_quoted_escapes_entry:
	// succ:  l000000000044A1AC
l000000000044A1AC:
	sp = fp
	sp = sp + -32
	Mem0[sp:word64] = x29
	sp = sp + 8
	Mem0[sp:word64] = x30
	x29 = x31 + 0x0000000000000000
	v6 = sp + 16
	Mem0[v6:word64] = x19
	v6 = v6 + 8
	Mem0[v6:word64] = x20
	x19 = x0
	branch x0 == 0x0000000000000000 l000000000044A1E8
	// succ:  l000000000044A1C0 l000000000044A1E8
l000000000044A1C0:
	call dequote_escapes (retsize: 0;)
	x20 = x0
	x1 = x20
	x0 = x19
	strcpy(x0, x1)
	sp = sp + 0xFFFFFFFFFFFFFFF8
	x1 = 0x00000000004AD000
	x0 = x20
	x1 = x1 + 0xFFFFFFFFFFFFFA20
	w2 = 0x00000E5C
	call sh_xfree (retsize: 0;)
	// succ:  l000000000044A1E8
l000000000044A1E8:
	x0 = x19
	v12 = sp + 16
	x19 = Mem0[v12:word64]
	v12 = v12 + 8
	x20 = Mem0[v12:word64]
	x29 = Mem0[sp:word64]
	sp = sp + 8
	x30 = Mem0[sp:word64]
	sp = sp + 32
	return
	// succ:  remove_quoted_escapes_exit
remove_quoted_escapes_exit:


// remove_quoted_nulls
// Return size: 0
void remove_quoted_nulls()
remove_quoted_nulls_entry:
	// succ:  l000000000044A1F8
l000000000044A1F8:
	sp = fp
	sp = sp + -96
	Mem0[sp:word64] = x29
	sp = sp + 8
	Mem0[sp:word64] = x30
	x29 = x31 + 0x0000000000000000
	w1 = 0x0000007F
	v9 = sp + 32
	Mem0[v9:word64] = x21
	v9 = v9 + 8
	Mem0[v9:word64] = x22
	v12 = sp + 16
	Mem0[v12:word64] = x19
	v12 = v12 + 8
	Mem0[v12:word64] = x20
	v15 = sp + 48
	Mem0[v15:word64] = x23
	v15 = v15 + 8
	Mem0[v15:word64] = x24
	Mem0[sp + 64:word64] = x25
	x22 = x0
	Mem0[x29 + 80:word64] = 0x0000000000000000
	strchr(x0, x1)
	sp = sp + 0xFFFFFFFFFFFFFFF8
	branch x0 == 0x0000000000000000 l000000000044A2E4
	// succ:  l000000000044A224 l000000000044A2E4
l000000000044A224:
	x0 = x22
	w21 = 0x00000000
	strlen(x0)
	sp = sp + 0xFFFFFFFFFFFFFFF8
	w20 = w21
	x23 = x0
l000000000044A2E4:
	x0 = x22
	v21 = sp + 16
	x19 = Mem0[v21:word64]
	v21 = v21 + 8
	x20 = Mem0[v21:word64]
	v22 = sp + 32
	x21 = Mem0[v22:word64]
	v22 = v22 + 8
	x22 = Mem0[v22:word64]
	v23 = sp + 48
	x23 = Mem0[v23:word64]
	v23 = v23 + 8
	x24 = Mem0[v23:word64]
	x25 = Mem0[sp + 64:word64]
	x29 = Mem0[sp:word64]
	sp = sp + 8
	x30 = Mem0[sp:word64]
	sp = sp + 96
	return
	// succ:  remove_quoted_nulls_exit
remove_quoted_nulls_exit:


// list_string
// Return size: 0
void list_string()
list_string_entry:
	// succ:  l000000000044A378
l000000000044A378:
	sp = fp
	sp = sp + -128
	Mem0[sp:word64] = x29
	sp = sp + 8
	Mem0[sp:word64] = x30
	x29 = x31 + 0x0000000000000000
	v8 = sp + 16
	Mem0[v8:word64] = x19
	v8 = v8 + 8
	Mem0[v8:word64] = x20
	v11 = sp + 64
	Mem0[v11:word64] = x25
	v11 = v11 + 8
	Mem0[v11:word64] = x26
	v14 = sp + 80
	Mem0[v14:word64] = x27
	v14 = v14 + 8
	Mem0[v14:word64] = x28
	v17 = sp + 32
	Mem0[v17:word64] = x21
	v17 = v17 + 8
	Mem0[v17:word64] = x22
	v20 = sp + 48
	Mem0[v20:word64] = x23
	v20 = v20 + 8
	Mem0[v20:word64] = x24
	x27 = x0
	x19 = x1
	w26 = w2
	branch x0 == 0x0000000000000000 l000000000044A6C4
	// succ:  l000000000044A3A4 l000000000044A6C4
l000000000044A3A4:
	v26 = Mem0[x0:byte]
	w0 = (word32) v26
	branch w0 == 0x00000000 l000000000044A6C4
	// succ:  l000000000044A3AC l000000000044A6C4
l000000000044A3AC:
	branch x1 == 0x0000000000000000 l000000000044A834
	// succ:  l000000000044A3B0 l000000000044A834
l000000000044A3B0:
	v28 = Mem0[x1:byte]
	w1 = (word32) v28
	w25 = 0x00000000
	w31 = w1 - 0x00000020
	NZCV = cond(w31)
	branch Test(EQ,Z) l000000000044A7F8
	// succ:  l000000000044A3C0 l000000000044A7F8
l000000000044A3C0:
	x1 = 0x00000000004E3000
	x1 = Mem0[x1 + 1600:word64]
	branch x1 == 0x0000000000000000 l000000000044A83C
	// succ:  l000000000044A3CC l000000000044A83C
l000000000044A3CC:
	v34 = Mem0[x1:byte]
	w3 = (word32) v34
	branch w3 == 0x00000000 l000000000044A848
	// succ:  l000000000044A3D4 l000000000044A848
l000000000044A3D4:
	w20 = 0x00000000
	goto l000000000044A3F4
	// succ:  l000000000044A3F4
l000000000044A3DC:
	w31 = w3 - 0x0000007F
	NZCV = cond(w31)
l000000000044A3EC:
	v45 = Mem0[x1:byte]
	w3 = (word32) v45
	branch w3 == 0x00000000 l000000000044A40C
	// succ:  l000000000044A3F4 l000000000044A40C
l000000000044A3F4:
	w31 = w3 - 0x00000001
	NZCV = cond(w31)
	w4 = w20 | 0x00000020
	branch Test(NE,Z) l000000000044A3DC
	// succ:  l000000000044A400 l000000000044A3DC
l000000000044A400:
	x1 = x1 + 0x0000000000000001
	NZCV = cond(x1)
	w20 = w20 | 0x00000010
	branch Test(NE,Z) l000000000044A3EC
	// succ:  l000000000044A40C l000000000044A3EC
l000000000044A40C:
	branch x19 != 0x0000000000000000 l000000000044A794
	// succ:  l000000000044A410 l000000000044A794
l000000000044A410:
	x2 = 0x00000000004E3000
	w1 = w0 - 0x00000009
l000000000044A438:
	x0 = x27
	strlen(x0)
	sp = sp + 0xFFFFFFFFFFFFFFF8
	x23 = x0
	// succ:  l000000000044A444
l000000000044A444:
	x0 = 0x00000000004C2000
	x22 = x29 + 0x0000000000000060
	x24 = 0x00000000004AD000
	x0 = x0 + 0xFFFFFFFFFFFFFCC0
	v47 = Mem0[x27:byte]
	w5 = (word32) v47
	x22 = x22 + 8
	Mem0[x22:word32] = 0x00000000
	x21 = 0x0000000000000000
	w26 = w26 & 0x00000003
	x24 = x24 + 0xFFFFFFFFFFFFFA20
	Mem0[x29 + 112:word64] = x0
	branch w5 == 0x00000000 l000000000044A638
	// succ:  l000000000044A470 l000000000044A638
l000000000044A470:
	x0 = x27
	x1 = x23
	x2 = x22
	x3 = x19
	w4 = w20
	call fn00000000004458AC (retsize: 0;)
	x28 = x0
	branch x0 == 0x0000000000000000 l000000000044A638
	// succ:  l000000000044A490 l000000000044A638
l000000000044A490:
	v49 = Mem0[x0:byte]
	w0 = (word32) v49
	w31 = w0 - 0x0000007F
	NZCV = cond(w31)
	branch Test(EQ,Z) l000000000044A71C
	// succ:  l000000000044A49C l000000000044A71C
l000000000044A49C:
	branch w0 != 0x00000000 l000000000044A724
	// succ:  l000000000044A4A0 l000000000044A724
l000000000044A4A0:
	branch w25 != 0x00000000 l000000000044A4FC
	// succ:  l000000000044A4A4 l000000000044A4FC
l000000000044A4A4:
	v50 = Mem0[x29 + 52:int32]
	x0 = (word64) v50
	v51 = Mem0[x27 + x0:byte]
	w0 = (word32) v51
	w1 = w0 - 0x00000009
l000000000044A4C4:
	call alloc_word_desc (retsize: 0;)
	Mem0[x29 + 120:word64] = x0
	call fn0000000000446080 (retsize: 0;)
	x1 = Mem0[x29 + 120:word64]
	w2 = 0x00000002
	w3 = Mem0[x1 + 8:word32]
	w2 = DPB(w2, 0x00000004, 16)
	w2 = w3 | w2
	Mem0[x1:word64] = x0
	Mem0[x1 + 8:word32] = w2
	x0 = x1
	x1 = x21
	call make_word_list (retsize: 0;)
	x21 = x0
	// succ:  l000000000044A4FC
l000000000044A4FC:
	x0 = x28
	x1 = x24
	w2 = 0x000009B3
	call sh_xfree (retsize: 0;)
	v52 = Mem0[x29 + 52:int32]
	x0 = (word64) v52
	v53 = Mem0[x27 + x0:byte]
	w5 = (word32) v53
	branch w5 == 0x00000000 l000000000044A638
	// succ:  l000000000044A518 l000000000044A638
l000000000044A518:
	w0 = w5 - 0x00000009
l000000000044A638:
	branch x21 == 0x0000000000000000 l000000000044A6C4
	// succ:  l000000000044A63C l000000000044A6C4
l000000000044A63C:
	x0 = Mem0[x21:word64]
	branch x0 == 0x0000000000000000 l000000000044A7B4
	// succ:  l000000000044A644 l000000000044A7B4
l000000000044A644:
	x0 = x21
	call list_reverse (retsize: 0;)
	v55 = sp + 16
	x19 = Mem0[v55:word64]
	v55 = v55 + 8
	x20 = Mem0[v55:word64]
	v56 = sp + 32
	x21 = Mem0[v56:word64]
	v56 = v56 + 8
	x22 = Mem0[v56:word64]
	v57 = sp + 48
	x23 = Mem0[v57:word64]
	v57 = v57 + 8
	x24 = Mem0[v57:word64]
	v58 = sp + 64
	x25 = Mem0[v58:word64]
	v58 = v58 + 8
	x26 = Mem0[v58:word64]
	v59 = sp + 80
	x27 = Mem0[v59:word64]
	v59 = v59 + 8
	x28 = Mem0[v59:word64]
	x29 = Mem0[sp:word64]
	sp = sp + 8
	x30 = Mem0[sp:word64]
	sp = sp + 128
	return
	// succ:  list_string_exit
l000000000044A6C4:
	x0 = 0x0000000000000000
	v36 = sp + 16
	x19 = Mem0[v36:word64]
	v36 = v36 + 8
	x20 = Mem0[v36:word64]
	v37 = sp + 32
	x21 = Mem0[v37:word64]
	v37 = v37 + 8
	x22 = Mem0[v37:word64]
	v38 = sp + 48
	x23 = Mem0[v38:word64]
	v38 = v38 + 8
	x24 = Mem0[v38:word64]
	v39 = sp + 64
	x25 = Mem0[v39:word64]
	v39 = v39 + 8
	x26 = Mem0[v39:word64]
	v40 = sp + 80
	x27 = Mem0[v40:word64]
	v40 = v40 + 8
	x28 = Mem0[v40:word64]
	x29 = Mem0[sp:word64]
	sp = sp + 8
	x30 = Mem0[sp:word64]
	sp = sp + 128
	return
	// succ:  list_string_exit
l000000000044A71C:
	v54 = Mem0[x28 + 1:byte]
	w0 = (word32) v54
	branch w0 == 0x00000000 l000000000044A4C4
	// succ:  l000000000044A724 l000000000044A4C4
l000000000044A724:
	x0 = x28
	call remove_quoted_nulls (retsize: 0;)
	x0 = x28
	call make_word (retsize: 0;)
	x1 = x21
	call make_word_list (retsize: 0;)
	x21 = x0
	x0 = Mem0[x0 + 8:word64]
	w1 = Mem0[x0 + 8:word32]
	w1 = w1 & 0xFFFBFFFF
	branch w26 == 0x00000000 l000000000044A754
	// succ:  l000000000044A750 l000000000044A754
l000000000044A750:
	w1 = w1 | 0x00000002
	// succ:  l000000000044A754
l000000000044A754:
	Mem0[x0 + 8:word32] = w1
	goto l000000000044A4FC
	// succ:  l000000000044A4FC
l000000000044A794:
	branch w26 == 0x00000000 l000000000044A410
	// succ:  l000000000044A798 l000000000044A410
l000000000044A798:
	v43 = Mem0[x19:byte]
	w1 = (word32) v43
	branch w1 == 0x00000000 l000000000044A410
	// succ:  l000000000044A7A0 l000000000044A410
l000000000044A7A0:
	__ctype_get_mb_cur_max()
	sp = sp + 0xFFFFFFFFFFFFFFF8
	x31 = x0 - 0x0000000000000001
	NZCV = cond(x31)
	branch Test(UGT,ZC) l000000000044A438
	// succ:  l000000000044A7AC l000000000044A438
l000000000044A7AC:
	x23 = 0x0000000000000001
	goto l000000000044A444
	// succ:  l000000000044A444
l000000000044A7B4:
	x0 = x21
	v60 = sp + 16
	x19 = Mem0[v60:word64]
	v60 = v60 + 8
	x20 = Mem0[v60:word64]
	v61 = sp + 32
	x21 = Mem0[v61:word64]
	v61 = v61 + 8
	x22 = Mem0[v61:word64]
	v62 = sp + 48
	x23 = Mem0[v62:word64]
	v62 = v62 + 8
	x24 = Mem0[v62:word64]
	v63 = sp + 64
	x25 = Mem0[v63:word64]
	v63 = v63 + 8
	x26 = Mem0[v63:word64]
	v64 = sp + 80
	x27 = Mem0[v64:word64]
	v64 = v64 + 8
	x28 = Mem0[v64:word64]
	x29 = Mem0[sp:word64]
	sp = sp + 8
	x30 = Mem0[sp:word64]
	sp = sp + 128
	return
	// succ:  list_string_exit
l000000000044A7F8:
	v65 = Mem0[x19 + 1:byte]
	w1 = (word32) v65
	w31 = w1 - 0x00000009
	NZCV = cond(w31)
	branch Test(NE,Z) l000000000044A3C0
	// succ:  l000000000044A804 l000000000044A3C0
l000000000044A804:
	v66 = Mem0[x19 + 2:byte]
	w1 = (word32) v66
	w31 = w1 - 0x0000000A
	NZCV = cond(w31)
	branch Test(NE,Z) l000000000044A3C0
	// succ:  l000000000044A810 l000000000044A3C0
l000000000044A810:
	v67 = Mem0[x19 + 3:byte]
	w1 = (word32) v67
	NZCV = cond(w1 - w25)
	w25 = (word32) Test(EQ,Z)
	goto l000000000044A3C0
	// succ:  l000000000044A3C0
l000000000044A834:
	w25 = w1
	goto l000000000044A3C0
	// succ:  l000000000044A3C0
l000000000044A83C:
	w20 = w1
	branch x19 == 0x0000000000000000 l000000000044A410
	// succ:  l000000000044A844 l000000000044A410
l000000000044A844:
	goto l000000000044A794
	// succ:  l000000000044A794
l000000000044A848:
	w20 = w3
	branch x19 == 0x0000000000000000 l000000000044A410
	// succ:  l000000000044A850 l000000000044A410
l000000000044A850:
	goto l000000000044A794
	// succ:  l000000000044A794
list_string_exit:


// word_list_remove_quoted_nulls
// Return size: 0
void word_list_remove_quoted_nulls()
word_list_remove_quoted_nulls_entry:
	// succ:  l000000000044A854
l000000000044A854:
	sp = fp
	sp = sp + -32
	Mem0[sp:word64] = x29
	sp = sp + 8
	Mem0[sp:word64] = x30
	x29 = x31 + 0x0000000000000000
	Mem0[sp + 16:word64] = x19
	x19 = x0
	branch x0 == 0x0000000000000000 l000000000044A88C
	// succ:  l000000000044A868 l000000000044A88C
l000000000044A868:
	x0 = Mem0[x19 + 8:word64]
	x0 = Mem0[x0:word64]
	call remove_quoted_nulls (retsize: 0;)
	x0 = Mem0[x19 + 8:word64]
	x19 = Mem0[x19:word64]
	w1 = Mem0[x0 + 8:word32]
	w1 = w1 & 0xFFFBFFFF
	Mem0[x0 + 8:word32] = w1
	branch x19 != 0x0000000000000000 l000000000044A868
	// succ:  l000000000044A88C l000000000044A868
l000000000044A88C:
	x19 = Mem0[sp + 16:word64]
	x29 = Mem0[sp:word64]
	sp = sp + 8
	x30 = Mem0[sp:word64]
	sp = sp + 32
	return
	// succ:  word_list_remove_quoted_nulls_exit
word_list_remove_quoted_nulls_exit:


// string_list_pos_params
// Return size: 0
void string_list_pos_params()
string_list_pos_params_entry:
	// succ:  l000000000044A898
l000000000044A898:
	sp = fp
	sp = sp + -32
	Mem0[sp:word64] = x29
	sp = sp + 8
	Mem0[sp:word64] = x30
	x29 = x31 + 0x0000000000000000
	Mem0[sp + 16:word64] = x19
	w31 = w0 - 0x0000002A
	NZCV = cond(w31)
	branch Test(EQ,Z) l000000000044A8D4
	// succ:  l000000000044A8AC l000000000044A8D4
l000000000044A8AC:
	w31 = w0 - 0x00000040
	NZCV = cond(w31)
	branch Test(EQ,Z) l000000000044A8EC
	// succ:  l000000000044A8B4 l000000000044A8EC
l000000000044A8B4:
	w2 = w2 & 0x00000003
	x0 = x1
	branch w2 != 0x00000000 l000000000044A908
	// succ:  l000000000044A8C0 l000000000044A908
l000000000044A8C0:
	x19 = Mem0[sp + 16:word64]
	x1 = 0x00000000004BE000
	x29 = Mem0[sp:word64]
	sp = sp + 8
	x30 = Mem0[sp:word64]
	sp = sp + 32
	x1 = x1 + 0x0000000000000330
	// succ:  l000000000044A8D0_thunk_string_list_internal
l000000000044A8D0_thunk_string_list_internal:
	call string_list_internal (retsize: 0;)
	return
	// succ:  string_list_pos_params_exit
l000000000044A8D4:
	branch (w2 & 0x00000001) == 0x00000000 l000000000044A920
	// succ:  l000000000044A8D8 l000000000044A920
l000000000044A8D8:
	branch (w2 & 0x00000002) == 0x00000000 l000000000044A940
	// succ:  l000000000044A8DC l000000000044A940
l000000000044A8DC:
	x19 = Mem0[sp + 16:word64]
	x29 = Mem0[sp:word64]
	sp = sp + 8
	x30 = Mem0[sp:word64]
	sp = sp + 32
	x0 = x1
	// succ:  l000000000044A8E8_thunk_string_list_dollar_star
l000000000044A8E8_thunk_string_list_dollar_star:
	call string_list_dollar_star (retsize: 0;)
	return
	// succ:  string_list_pos_params_exit
l000000000044A8EC:
	w0 = w2 & 0x00000003
	branch w0 == 0x00000000 l000000000044A8DC
	// succ:  l000000000044A8F4 l000000000044A8DC
l000000000044A8F4:
	x19 = Mem0[sp + 16:word64]
	x29 = Mem0[sp:word64]
	sp = sp + 8
	x30 = Mem0[sp:word64]
	sp = sp + 32
	x0 = x1
	w1 = w2
	// succ:  l000000000044A904_thunk_string_list_dollar_at
l000000000044A904_thunk_string_list_dollar_at:
	call string_list_dollar_at (retsize: 0;)
	return
	// succ:  string_list_pos_params_exit
l000000000044A908:
	call fn0000000000449B04 (retsize: 0;)
	x1 = 0x00000000004BE000
	x19 = Mem0[sp + 16:word64]
	x29 = Mem0[sp:word64]
	sp = sp + 8
	x30 = Mem0[sp:word64]
	sp = sp + 32
	x1 = x1 + 0x0000000000000330
	// succ:  l000000000044A91C_thunk_string_list_internal
l000000000044A91C_thunk_string_list_internal:
	call string_list_internal (retsize: 0;)
	return
	// succ:  string_list_pos_params_exit
l000000000044A920:
	x0 = x1
	call fn0000000000449B04 (retsize: 0;)
	x19 = x0
	call word_list_remove_quoted_nulls (retsize: 0;)
	x0 = x19
	x19 = Mem0[sp + 16:word64]
	x29 = Mem0[sp:word64]
	sp = sp + 8
	x30 = Mem0[sp:word64]
	sp = sp + 32
	// succ:  l000000000044A93C_thunk_string_list_dollar_star
l000000000044A93C_thunk_string_list_dollar_star:
	call string_list_dollar_star (retsize: 0;)
	return
	// succ:  string_list_pos_params_exit
l000000000044A940:
	x0 = x1
	call fn0000000000449B04 (retsize: 0;)
	x19 = x0
	call word_list_remove_quoted_nulls (retsize: 0;)
	x0 = x19
	goto l000000000044A8C0
	// succ:  l000000000044A8C0
string_list_pos_params_exit:


// fn000000000044A958
// Return size: 0
void fn000000000044A958()
fn000000000044A958_entry:
	// succ:  l000000000044A958
l000000000044A958:
	sp = fp
	sp = sp + -96
	Mem0[sp:word64] = x29
	sp = sp + 8
	Mem0[sp:word64] = x30
	x29 = x31 + 0x0000000000000000
	v8 = sp + 48
	Mem0[v8:word64] = x23
	v8 = v8 + 8
	Mem0[v8:word64] = x24
	v11 = sp + 64
	Mem0[v11:word64] = x25
	v11 = v11 + 8
	Mem0[v11:word64] = x26
	v14 = sp + 16
	Mem0[v14:word64] = x19
	v14 = v14 + 8
	Mem0[v14:word64] = x20
	v17 = sp + 32
	Mem0[v17:word64] = x21
	v17 = v17 + 8
	Mem0[v17:word64] = x22
	v20 = sp + 80
	Mem0[v20:word64] = x27
	v20 = v20 + 8
	Mem0[v20:word64] = x28
	x19 = x0
	x23 = x1
	w24 = w2
	w25 = w3
	w26 = w4
	x21 = 0x0000000000000000
	branch x0 == 0x0000000000000000 l000000000044AA54
	// succ:  l000000000044A990 l000000000044AA54
l000000000044A990:
	x1 = 0x00000000004AD000
	x0 = 0x00000000004AC000
	x28 = x1 + 0xFFFFFFFFFFFFFA20
	x27 = x0 + 0x0000000000000460
	// succ:  l000000000044A9A0
l000000000044A9A0:
	x5 = Mem0[x19 + 8:word64]
	x1 = x23
	x0 = Mem0[x5:word64]
	w2 = w24
	call fn0000000000445C24 (retsize: 0;)
	x22 = x0
	call alloc_word_desc (retsize: 0;)
	x20 = x0
	x5 = x22
	branch x22 == 0x0000000000000000 l000000000044AA34
	// succ:  l000000000044A9C8 l000000000044AA34
l000000000044A9C8:
	x1 = x21
	Mem0[x20:word64] = x5
	x0 = x20
	call make_word_list (retsize: 0;)
	x19 = Mem0[x19:word64]
	x21 = x0
	branch x19 != 0x0000000000000000 l000000000044A9A0
	// succ:  l000000000044A9E4 l000000000044A9A0
l000000000044A9E4:
	branch x0 == 0x0000000000000000 l000000000044AA54
	// succ:  l000000000044A9E8 l000000000044AA54
l000000000044A9E8:
	x1 = Mem0[x0:word64]
	branch x1 == 0x0000000000000000 l000000000044A9F8
	// succ:  l000000000044A9F0 l000000000044A9F8
l000000000044A9F0:
	call list_reverse (retsize: 0;)
	x21 = x0
	// succ:  l000000000044A9F8
l000000000044A9F8:
	x1 = x21
	w2 = w26
	w0 = w25
	call string_list_pos_params (retsize: 0;)
	x19 = x0
	x0 = x21
	call dispose_words (retsize: 0;)
	x0 = x19
	v31 = sp + 32
	x21 = Mem0[v31:word64]
	v31 = v31 + 8
	x22 = Mem0[v31:word64]
	v32 = sp + 16
	x19 = Mem0[v32:word64]
	v32 = v32 + 8
	x20 = Mem0[v32:word64]
	v33 = sp + 48
	x23 = Mem0[v33:word64]
	v33 = v33 + 8
	x24 = Mem0[v33:word64]
	v34 = sp + 64
	x25 = Mem0[v34:word64]
	v34 = v34 + 8
	x26 = Mem0[v34:word64]
	v35 = sp + 80
	x27 = Mem0[v35:word64]
	v35 = v35 + 8
	x28 = Mem0[v35:word64]
	x29 = Mem0[sp:word64]
	sp = sp + 8
	x30 = Mem0[sp:word64]
	sp = sp + 96
	return
	// succ:  fn000000000044A958_exit
l000000000044AA34:
	x1 = x28
	w2 = 0x0000115B
	x0 = 0x0000000000000001
	call sh_xmalloc (retsize: 0;)
	v37 = Mem0[x27:byte]
	w1 = (word32) v37
	x5 = x0
	Mem0[x0:byte] = (byte) w1
	goto l000000000044A9C8
	// succ:  l000000000044A9C8
l000000000044AA54:
	x21 = 0x0000000000000000
	goto l000000000044A9F8
	// succ:  l000000000044A9F8
fn000000000044A958_exit:


// copy_fifo_list
// Return size: 0
void copy_fifo_list()
copy_fifo_list_entry:
	// succ:  l000000000044AA5C
l000000000044AA5C:
	sp = fp
	sp = sp + -32
	Mem0[sp:word64] = x29
	sp = sp + 8
	Mem0[sp:word64] = x30
	x29 = x31 + 0x0000000000000000
	Mem0[sp + 16:word64] = x19
	x19 = 0x00000000004E1000
	x1 = x19 + 0x0000000000000008
	w2 = Mem0[x1 + 12:word32]
	branch w2 == 0x00000000 l000000000044AA80
	// succ:  l000000000044AA78 l000000000044AA80
l000000000044AA78:
	w3 = Mem0[x1 + 16:word32]
	branch w3 != 0x00000000 l000000000044AA98
	// succ:  l000000000044AA80 l000000000044AA98
l000000000044AA80:
	branch x0 == 0x0000000000000000 l000000000044AA88
	// succ:  l000000000044AA84 l000000000044AA88
l000000000044AA84:
	Mem0[x0:word32] = 0x00000000
	// succ:  l000000000044AA88
l000000000044AA88:
	x0 = 0x0000000000000000
	x19 = Mem0[sp + 16:word64]
	x29 = Mem0[sp:word64]
	sp = sp + 8
	x30 = Mem0[sp:word64]
	sp = sp + 32
	return
	// succ:  copy_fifo_list_exit
l000000000044AA98:
	branch x0 == 0x0000000000000000 l000000000044AAA0
	// succ:  l000000000044AA9C l000000000044AAA0
l000000000044AA9C:
	Mem0[x0:word32] = w3
	// succ:  l000000000044AAA0
l000000000044AAA0:
	x1 = 0x00000000004AD000
	x1 = x1 + 0xFFFFFFFFFFFFFA20
	w2 = 0x000012DC
copy_fifo_list_exit:


// fifos_pending
// Return size: 0
void fifos_pending()
fifos_pending_entry:
	// succ:  l000000000044AACC
l000000000044AACC:
	sp = fp
	w0 = 0x00000000
	return
	// succ:  fifos_pending_exit
fifos_pending_exit:


// num_fifos
// Return size: 0
void num_fifos()
num_fifos_entry:
	// succ:  l000000000044AAD4
l000000000044AAD4:
	sp = fp
	x0 = 0x00000000004E1000
	x0 = x0 + 0x0000000000000008
	w0 = Mem0[x0 + 12:word32]
	return
	// succ:  num_fifos_exit
num_fifos_exit:


// unlink_fifo
// Return size: 0
void unlink_fifo()
unlink_fifo_entry:
	// succ:  l000000000044AAE4
l000000000044AAE4:
	sp = fp
	sp = sp + -32
	Mem0[sp:word64] = x29
	sp = sp + 8
	Mem0[sp:word64] = x30
	x29 = x31 + 0x0000000000000000
	v8 = sp + 16
	Mem0[v8:word64] = x19
	v8 = v8 + 8
	Mem0[v8:word64] = x20
	x19 = 0x00000000004E1000
	x19 = x19 + 0x0000000000000008
	x1 = Mem0[x19 + 24:word64]
unlink_fifo_exit:


// fn000000000044AB2C
// Return size: 0
void fn000000000044AB2C()
fn000000000044AB2C_entry:
	// succ:  l000000000044AB2C
l000000000044AB2C:
	sp = fp
	sp = sp + -48
	Mem0[sp:word64] = x29
	sp = sp + 8
	Mem0[sp:word64] = x30
	x29 = x31 + 0x0000000000000000
	Mem0[sp + 32:word64] = x21
	x21 = 0x00000000004E1000
	v7 = sp + 16
	Mem0[v7:word64] = x19
	v7 = v7 + 8
	Mem0[v7:word64] = x20
	x20 = x21 + 0x0000000000000008
	w0 = Mem0[x20 + 12:word32]
	branch w0 == 0x00000000 l000000000044AB80
	// succ:  l000000000044AB4C l000000000044AB80
l000000000044AB4C:
	w0 = Mem0[x20 + 16:word32]
	NZCV = cond(w0 - w31)
	branch Test(LE,ZCV) l000000000044AB80
	// succ:  l000000000044AB58 l000000000044AB80
l000000000044AB58:
	w19 = 0x00000000
	goto l000000000044AB6C
	// succ:  l000000000044AB6C
l000000000044AB60:
	w0 = Mem0[x20 + 16:word32]
	NZCV = cond(w19 - w0)
	branch Test(GE,NZV) l000000000044AB80
	// succ:  l000000000044AB6C l000000000044AB80
l000000000044AB6C:
	w0 = w19
	call unlink_fifo (retsize: 0;)
	w0 = Mem0[x20 + 12:word32]
	w19 = w19 + 0x00000001
	branch w0 != 0x00000000 l000000000044AB60
	// succ:  l000000000044AB80 l000000000044AB60
l000000000044AB80:
	x21 = x21 + 0x0000000000000008
	Mem0[x21 + 12:word32] = 0x00000000
	v15 = sp + 16
	x19 = Mem0[v15:word64]
	v15 = v15 + 8
	x20 = Mem0[v15:word64]
	x21 = Mem0[sp + 32:word64]
	x29 = Mem0[sp:word64]
	sp = sp + 8
	x30 = Mem0[sp:word64]
	sp = sp + 48
	return
	// succ:  fn000000000044AB2C_exit
fn000000000044AB2C_exit:


// unlink_fifo_list
// Return size: 0
void unlink_fifo_list()
unlink_fifo_list_entry:
	// succ:  l000000000044AB98
l000000000044AB98:
	sp = fp
	x0 = 0x00000000004E1000
	x0 = x0 + 0x0000000000000008
	w0 = Mem0[x0 + 12:word32]
	branch w0 == 0x00000000 l000000000044ABAC
	// succ:  l000000000044ABA8 l000000000044ABAC
l000000000044ABA8:
	// succ:  l000000000044ABA8_thunk_fn000000000044AB2C
l000000000044ABA8_thunk_fn000000000044AB2C:
	call fn000000000044AB2C (retsize: 0;)
	return
	// succ:  unlink_fifo_list_exit
l000000000044ABAC:
	return
	// succ:  unlink_fifo_list_exit
unlink_fifo_list_exit:


// close_new_fifos
// Return size: 0
void close_new_fifos()
close_new_fifos_entry:
	// succ:  l000000000044ABB0
l000000000044ABB0:
	sp = fp
	sp = sp + -64
	Mem0[sp:word64] = x29
	sp = sp + 8
	Mem0[sp:word64] = x30
	x29 = x31 + 0x0000000000000000
	v8 = sp + 16
	Mem0[v8:word64] = x19
	v8 = v8 + 8
	Mem0[v8:word64] = x20
	v11 = sp + 32
	Mem0[v11:word64] = x21
	v11 = v11 + 8
	Mem0[v11:word64] = x22
	v14 = sp + 48
	Mem0[v14:word64] = x23
	v14 = v14 + 8
	Mem0[v14:word64] = x24
	x21 = x0
	w20 = w1
	branch x0 == 0x0000000000000000 l000000000044AC60
	// succ:  l000000000044ABD0 l000000000044AC60
l000000000044ABD0:
	NZCV = cond(w1 - w31)
	x24 = 0x00000000004E1000
	branch Test(LE,ZCV) l000000000044AC84
	// succ:  l000000000044ABDC l000000000044AC84
l000000000044ABDC:
	x23 = x24 + 0x0000000000000008
	w22 = w1 - 0x00000001
	w2 = Mem0[x23 + 16:word32]
	x22 = x22 + 0x0000000000000001
	x19 = 0x0000000000000000
	// succ:  l000000000044ABF0
l000000000044ABF0:
	v23 = Mem0[x21 + x19:byte]
	w1 = (word32) v23
	NZCV = cond(w19 - w2)
	branch w1 != 0x00000000 l000000000044AC0C
	// succ:  l000000000044ABFC l000000000044AC0C
l000000000044ABFC:
	branch Test(GE,NZV) l000000000044AC0C
	// succ:  l000000000044AC00 l000000000044AC0C
l000000000044AC00:
	x0 = Mem0[x23 + 24:word64]
	v27 = Mem0[x0 + x19:byte]
	w0 = (word32) v27
	branch w0 != 0x00000000 l000000000044AC50
	// succ:  l000000000044AC0C l000000000044AC50
l000000000044AC0C:
	x19 = x19 + 0x0000000000000001
	x31 = x19 - x22
	NZCV = cond(x31)
	branch Test(NE,Z) l000000000044ABF0
	// succ:  l000000000044AC18 l000000000044ABF0
l000000000044AC18:
	NZCV = cond(w2 - w20)
	branch Test(LE,ZCV) l000000000044AC3C
	// succ:  l000000000044AC20 l000000000044AC3C
l000000000044AC20:
	x19 = x24 + 0x0000000000000008
	// succ:  l000000000044AC24
l000000000044AC24:
	w0 = w20
	call unlink_fifo (retsize: 0;)
	w0 = Mem0[x19 + 16:word32]
	w20 = w20 + 0x00000001
	NZCV = cond(w0 - w20)
	branch Test(GT,NZV) l000000000044AC24
	// succ:  l000000000044AC3C l000000000044AC24
l000000000044AC3C:
	v29 = sp + 16
	x19 = Mem0[v29:word64]
	v29 = v29 + 8
	x20 = Mem0[v29:word64]
	v30 = sp + 32
	x21 = Mem0[v30:word64]
	v30 = v30 + 8
	x22 = Mem0[v30:word64]
	v31 = sp + 48
	x23 = Mem0[v31:word64]
	v31 = v31 + 8
	x24 = Mem0[v31:word64]
	x29 = Mem0[sp:word64]
	sp = sp + 8
	x30 = Mem0[sp:word64]
	sp = sp + 64
	return
	// succ:  close_new_fifos_exit
l000000000044AC50:
	w0 = w19
	call unlink_fifo (retsize: 0;)
	w2 = Mem0[x23 + 16:word32]
	goto l000000000044AC0C
	// succ:  l000000000044AC0C
l000000000044AC60:
	x0 = 0x00000000004E1000
	x0 = x0 + 0x0000000000000008
	w0 = Mem0[x0 + 12:word32]
	branch w0 == 0x00000000 l000000000044AC3C
	// succ:  l000000000044AC70 l000000000044AC3C
l000000000044AC70:
	v32 = sp + 16
	x19 = Mem0[v32:word64]
	v32 = v32 + 8
	x20 = Mem0[v32:word64]
	v33 = sp + 32
	x21 = Mem0[v33:word64]
	v33 = v33 + 8
	x22 = Mem0[v33:word64]
	v34 = sp + 48
	x23 = Mem0[v34:word64]
	v34 = v34 + 8
	x24 = Mem0[v34:word64]
	x29 = Mem0[sp:word64]
	sp = sp + 8
	x30 = Mem0[sp:word64]
	sp = sp + 64
	// succ:  l000000000044AC80_thunk_fn000000000044AB2C
l000000000044AC80_thunk_fn000000000044AB2C:
	call fn000000000044AB2C (retsize: 0;)
	return
	// succ:  close_new_fifos_exit
l000000000044AC84:
	x0 = x24 + 0x0000000000000008
	w2 = Mem0[x0 + 16:word32]
	goto l000000000044AC18
	// succ:  l000000000044AC18
close_new_fifos_exit:


// command_substitute
// Return size: 0
void command_substitute()
command_substitute_entry:
	// succ:  l000000000044AC90
l000000000044AC90:
	sp = fp
	sp = sp + -272
	Mem0[sp:word64] = x29
	sp = sp + 8
	Mem0[sp:word64] = x30
	x29 = x31 + 0x0000000000000000
	v8 = sp + 64
	Mem0[v8:word64] = x25
	v8 = v8 + 8
	Mem0[v8:word64] = x26
	v11 = sp + 16
	Mem0[v11:word64] = x19
	v11 = v11 + 8
	Mem0[v11:word64] = x20
	v14 = sp + 32
	Mem0[v14:word64] = x21
	v14 = v14 + 8
	Mem0[v14:word64] = x22
	v17 = sp + 48
	Mem0[v17:word64] = x23
	v17 = v17 + 8
	Mem0[v17:word64] = x24
	v20 = sp + 80
	Mem0[v20:word64] = x27
	v20 = v20 + 8
	Mem0[v20:word64] = x28
	Mem0[x29 + 240:word64] = x0
	w25 = w1
	branch x0 == 0x0000000000000000 l000000000044B324
	// succ:  l000000000044ACB8 l000000000044B324
l000000000044ACB8:
	v25 = Mem0[x0:byte]
	w0 = (word32) v25
	branch w0 == 0x00000000 l000000000044AFF0
	// succ:  l000000000044ACC0 l000000000044AFF0
l000000000044ACC0:
	w31 = w0 - 0x0000000A
	NZCV = cond(w31)
	branch Test(EQ,Z) l000000000044AFE4
	// succ:  l000000000044ACC8 l000000000044AFE4
l000000000044ACC8:
	x0 = 0x00000000004DE000
	w0 = Mem0[x0 + 1840:word32]
	branch w0 != 0x00000000 l000000000044AEC4
	// succ:  l000000000044ACD4 l000000000044AEC4
l000000000044ACD4:
	x0 = 0x00000000004E1000
	x0 = x0 + 0x0000000000000008
	x1 = Mem0[x0 + 32:word64]
	branch x1 == 0x0000000000000000 l000000000044B23C
	// succ:  l000000000044ACE4 l000000000044B23C
l000000000044ACE4:
	x0 = Mem0[x0 + 40:word64]
	branch x0 == 0x0000000000000000 l000000000044B23C
	// succ:  l000000000044ACEC l000000000044B23C
l000000000044ACEC:
	x0 = 0x00000000004DE000
	w0 = Mem0[x0 + 1704:word32]
	Mem0[x29 + 248:word32] = w0
	branch w0 != 0x00000000 l000000000044AEA8
	// succ:  l000000000044ACFC l000000000044AEA8
l000000000044ACFC:
	x0 = x29 + 0x00000000000000E0
	call pipe (retsize: 0;)
	branch (w0 & 0x00000000) == 0x00000000 l000000000044B32C
	// succ:  l000000000044AD08 l000000000044B32C
l000000000044AD08:
	x2 = 0x00000000004D6000
	x0 = 0x00000000004E3000
	w2 = Mem0[x2 + 3448:word32]
	w1 = Mem0[x0 + 1184:word32]
	Mem0[x29 + 256:word32] = w2
	x0 = 0x00000000004E0000
	w23 = Mem0[x0 + 3940:word32]
	branch (w1 & 0x00000010) == 0x00000000 l000000000044AEE4
	// succ:  l000000000044AD28 l000000000044AEE4
l000000000044AD28:
	call cleanup_the_pipeline (retsize: 0;)
	x21 = 0x00000000004E3000
	x19 = 0x00000000004D6000
	w1 = Mem0[x21 + 1184:word32]
	w22 = Mem0[x19 + 3416:word32]
	x0 = 0x0000000000000000
	w1 = w1 & 0x00000001
	call make_child (retsize: 0;)
	Mem0[x19 + 3416:word32] = w22
	w26 = w0
	branch w0 == 0x00000000 l000000000044B010
	// succ:  l000000000044AD54 l000000000044B010
l000000000044AD54:
	call set_sigchld_handler (retsize: 0;)
	call stop_making_children (retsize: 0;)
	x0 = 0x00000000004E0000
	Mem0[x0 + 3940:word32] = w23
	branch (w26 & 0x00000000) == 0x00000000 l000000000044B35C
	// succ:  l000000000044AD68 l000000000044B35C
l000000000044AD68:
	call close_pgrp_pipe (retsize: 0;)
	w0 = Mem0[x29 + 228:word32]
	close(x0)
	sp = sp + 0xFFFFFFFFFFFFFFF8
	x0 = 0x00000000004E3000
	x2 = Mem0[x0 + 1600:word64]
	w28 = Mem0[x29 + 224:word32]
	w4 = w2
	w5 = w2
	branch x2 == 0x0000000000000000 l000000000044ADC8
	// succ:  l000000000044AD8C l000000000044ADC8
l000000000044AD8C:
	v39 = Mem0[x2:byte]
	w3 = (word32) v39
	branch w3 == 0x00000000 l000000000044B2BC
	// succ:  l000000000044AD94 l000000000044B2BC
l000000000044AD94:
	w4 = 0x00000000
	w5 = w4
	goto l000000000044ADA8
	// succ:  l000000000044ADA8
l000000000044ADA0:
	v54 = Mem0[x2:byte]
	w3 = (word32) v54
	branch w3 == 0x00000000 l000000000044ADC8
	// succ:  l000000000044ADA8 l000000000044ADC8
l000000000044ADA8:
	w31 = w3 - 0x00000001
	NZCV = cond(w31)
	w0 = (word32) Test(EQ,Z)
	w31 = w3 - 0x0000007F
	NZCV = cond(w31)
	w3 = (word32) Test(EQ,Z)
	x2 = x2 + 0x0000000000000001
	NZCV = cond(x2)
	w5 = w5 | w0
	w4 = w4 | w3
	branch Test(NE,Z) l000000000044ADA0
	// succ:  l000000000044ADC8 l000000000044ADA0
l000000000044ADC8:
	branch (w28 & 0x00000000) == 0x00000000 l000000000044B318
	// succ:  l000000000044ADCC l000000000044B318
l000000000044ADCC:
	w4 = w4 ^ 0x00000001
	w5 = w5 ^ 0x00000001
	x23 = 0x0000000000000000
	w27 = 0x00000000
	w4 = w4 & 0x00000001
	w5 = w5 & 0x00000001
	w24 = w23
	w22 = w27
	x19 = x23
	Mem0[x29 + 260:word32] = w4
	Mem0[x29 + 252:word32] = w5
	// succ:  l000000000044ADF8
l000000000044ADF8:
	x19 = x19 - 0x0000000000000001
	x31 = x19 - x31
	NZCV = cond(x31)
	branch Test(LE,ZCV) l000000000044AE84
	// succ:  l000000000044AE04 l000000000044AE84
l000000000044AE04:
	v44 = Mem0[x20:byte]
	w21 = (word32) v44
	x20 = x20 + 0x0000000000000001
	branch w21 == 0x00000000 l000000000044ADF8
	// succ:  l000000000044AE10 l000000000044ADF8
l000000000044AE10:
	w2 = w22 + 0x00000002
	NZCV = cond(w2 - w24)
	branch Test(LT,NV) l000000000044AE48
	// succ:  l000000000044AE1C l000000000044AE48
l000000000044AE1C:
	w2 = w2 - w24
	w2 = w2 & 0xFFFFFF80
	w24 = w24 + 0x00000080
	w24 = w24 + w2
	x2 = 0x00000000004AD000
	x0 = x23
l000000000044AE48:
	w0 = w25 & 0x00000003
	branch w0 != 0x00000000 l000000000044AF24
	// succ:  l000000000044AE50 l000000000044AF24
l000000000044AE50:
	w31 = w21 - 0x00000001
	NZCV = cond(w31)
	branch Test(NE,Z) l000000000044AEF4
	// succ:  l000000000044AE58 l000000000044AEF4
l000000000044AE58:
	w4 = Mem0[x29 + 252:word32]
	branch w4 == 0x00000000 l000000000044AEF4
	// succ:  l000000000044AE60 l000000000044AEF4
l000000000044AE60:
	w0 = 0x00000001
	w2 = w22 + 0x00000001
	Mem0[x23 + (int64) ((int32) w22):byte] = (byte) w0
	w27 = 0x00200000
	// succ:  l000000000044AE70
l000000000044AE70:
	x19 = x19 - 0x0000000000000001
	Mem0[x23 + (int64) ((int32) w2):byte] = (byte) w21
	x31 = x19 - x31
	NZCV = cond(x31)
	w22 = w2 + 0x00000001
	branch Test(GT,NZV) l000000000044AE04
	// succ:  l000000000044AE84 l000000000044AE04
l000000000044AE84:
	w0 = w28
	x1 = x29 + 0x0000000000000060
	x2 = 0x0000000000000080
	call zread (retsize: 0;)
	x31 = x0 - x31
	NZCV = cond(x31)
	x19 = x0
	branch Test(LE,ZCV) l000000000044AF34
	// succ:  l000000000044AEA0 l000000000044AF34
l000000000044AEA0:
	x20 = x29 + 0x0000000000000060
	goto l000000000044AE04
	// succ:  l000000000044AE04
l000000000044AEA8:
	x0 = 0x00000000004E1000
	w0 = Mem0[x0 + 1716:word32]
	NZCV = cond(w0 - w31)
	w0 = 0x00000010
l000000000044AEC4:
	x0 = 0x00000000004DF000
	w0 = Mem0[x0 + 3700:word32]
	branch w0 == 0x00000000 l000000000044ACD4
	// succ:  l000000000044AED0 l000000000044ACD4
l000000000044AED0:
	w2 = 0x0000007D
	x1 = 0x00000000004E3000
	w0 = 0x00000003
	Mem0[x1 + 1200:word32] = w2
	call jump_to_top_level (retsize: 0;)
	// succ:  l000000000044AEE4
l000000000044AEE4:
	x1 = 0x00000000004D6000
	w1 = Mem0[x1 + 3440:word32]
	Mem0[x0 + 3940:word32] = w1
	goto l000000000044AD28
	// succ:  l000000000044AD28
l000000000044AEF4:
	w31 = w21 - 0x0000007F
	NZCV = cond(w31)
	branch Test(NE,Z) l000000000044AF04
	// succ:  l000000000044AEFC l000000000044AF04
l000000000044AEFC:
	w4 = Mem0[x29 + 260:word32]
	branch w4 != 0x00000000 l000000000044AF24
	// succ:  l000000000044AF04 l000000000044AF24
l000000000044AF04:
	w31 = w21 - 0x00000020
	NZCV = cond(w31)
	w2 = w22
	branch Test(NE,Z) l000000000044AE70
	// succ:  l000000000044AF10 l000000000044AE70
l000000000044AF10:
	x0 = 0x00000000004E3000
	x0 = Mem0[x0 + 1600:word64]
	branch x0 == 0x0000000000000000 l000000000044AE70
	// succ:  l000000000044AF1C l000000000044AE70
l000000000044AF1C:
	v52 = Mem0[x0:byte]
	w0 = (word32) v52
	branch w0 != 0x00000000 l000000000044AE70
	// succ:  l000000000044AF24 l000000000044AE70
l000000000044AF24:
	w0 = 0x00000001
	w2 = w22 + 0x00000001
	Mem0[x23 + (int64) ((int32) w22):byte] = (byte) w0
	goto l000000000044AE70
	// succ:  l000000000044AE70
l000000000044AF34:
	branch x23 == 0x0000000000000000 l000000000044B194
	// succ:  l000000000044AF38 l000000000044B194
l000000000044AF38:
	Mem0[x23 + (int64) ((int32) w22):byte] = 0x00
	branch w22 != 0x00000000 l000000000044B19C
	// succ:  l000000000044AF40 l000000000044B19C
l000000000044AF40:
	x1 = 0x00000000004AD000
	x0 = x23
	x1 = x1 + 0xFFFFFFFFFFFFFA20
	w2 = 0x00001468
	call sh_xfree (retsize: 0;)
	x20 = 0x0000000000000000
	// succ:  l000000000044AF58
l000000000044AF58:
	w0 = Mem0[x29 + 224:word32]
	x19 = 0x00000000004D6000
	close(x0)
	sp = sp + 0xFFFFFFFFFFFFFFF8
	x19 = x19 + 0xFFFFFFFFFFFFFD88
	w0 = w26
	Mem0[x19:word32] = w26
	call wait_for (retsize: 0;)
	x1 = 0x00000000004E3000
	w4 = Mem0[x29 + 256:word32]
	Mem0[x1 + 1200:word32] = w0
	x1 = 0x00000000004D6000
	Mem0[x19 + 4:word32] = w26
	Mem0[x1 + 3448:word32] = w4
	w31 = w0 - 0x00000082
	NZCV = cond(w31)
	branch Test(EQ,Z) l000000000044B254
	// succ:  l000000000044AF94 l000000000044B254
l000000000044AF94:
	x0 = 0x00000000004DE000
	w0 = Mem0[x0 + 1704:word32]
	branch w0 == 0x00000000 l000000000044AFBC
	// succ:  l000000000044AFA0 l000000000044AFBC
l000000000044AFA0:
	x0 = 0x00000000004E0000
	w0 = Mem0[x0 + 3940:word32]
	branch w0 == 0x00000000 l000000000044AFBC
	// succ:  l000000000044AFAC l000000000044AFBC
l000000000044AFAC:
	x1 = 0x00000000004E3000
	w2 = Mem0[x1 + 1184:word32]
	w1 = w2 & 0x00000001
	branch (w2 & 0x00000001) == 0x00000000 l000000000044B310
	// succ:  l000000000044AFBC l000000000044B310
l000000000044AFBC:
	call alloc_word_desc (retsize: 0;)
	Mem0[x0:word64] = x20
	Mem0[x0 + 8:word32] = w27
	// succ:  l000000000044AFC8
l000000000044AFC8:
	v46 = sp + 16
	x19 = Mem0[v46:word64]
	v46 = v46 + 8
	x20 = Mem0[v46:word64]
	v47 = sp + 32
	x21 = Mem0[v47:word64]
	v47 = v47 + 8
	x22 = Mem0[v47:word64]
	v48 = sp + 48
	x23 = Mem0[v48:word64]
	v48 = v48 + 8
	x24 = Mem0[v48:word64]
	v49 = sp + 64
	x25 = Mem0[v49:word64]
	v49 = v49 + 8
	x26 = Mem0[v49:word64]
	v50 = sp + 80
	x27 = Mem0[v50:word64]
	v50 = v50 + 8
	x28 = Mem0[v50:word64]
	x29 = Mem0[sp:word64]
	sp = sp + 8
	x30 = Mem0[sp:word64]
	sp = sp + 272
	return
	// succ:  command_substitute_exit
l000000000044AFE4:
	x1 = Mem0[x29 + 240:word64]
	v58 = Mem0[x1 + 1:byte]
	w0 = (word32) v58
	branch w0 != 0x00000000 l000000000044ACC8
	// succ:  l000000000044AFF0 l000000000044ACC8
l000000000044AFF0:
	x0 = 0x0000000000000000
	v59 = sp + 16
	x19 = Mem0[v59:word64]
	v59 = v59 + 8
	x20 = Mem0[v59:word64]
	v60 = sp + 32
	x21 = Mem0[v60:word64]
	v60 = v60 + 8
	x22 = Mem0[v60:word64]
	v61 = sp + 48
	x23 = Mem0[v61:word64]
	v61 = v61 + 8
	x24 = Mem0[v61:word64]
	v62 = sp + 64
	x25 = Mem0[v62:word64]
	v62 = v62 + 8
	x26 = Mem0[v62:word64]
	v63 = sp + 80
	x27 = Mem0[v63:word64]
	v63 = v63 + 8
	x28 = Mem0[v63:word64]
	x29 = Mem0[sp:word64]
	sp = sp + 8
	x30 = Mem0[sp:word64]
	sp = sp + 272
	return
	// succ:  command_substitute_exit
l000000000044B010:
	call reset_signal_handlers (retsize: 0;)
	w0 = Mem0[x21 + 1184:word32]
	w0 = w0 | 0x00000080
	Mem0[x21 + 1184:word32] = w0
	call set_sigchld_handler (retsize: 0;)
	call stop_making_children (retsize: 0;)
	call set_sigint_handler (retsize: 0;)
	call free_pushed_string_input (retsize: 0;)
	w0 = Mem0[x29 + 228:word32]
	w1 = 0x00000001
	call dup2 (retsize: 0;)
	branch (w0 & 0x00000000) == 0x00000000 l000000000044B20C
	// succ:  l000000000044B040 l000000000044B20C
l000000000044B040:
	x0 = 0x00000000004DE000
	x0 = Mem0[x0 + 1664:word64]
	w19 = Mem0[x29 + 228:word32]
	fileno(x0)
	sp = sp + 0xFFFFFFFFFFFFFFF8
	NZCV = cond(w19 - w0)
	branch Test(EQ,Z) l000000000044B090
	// succ:  l000000000044B058 l000000000044B090
l000000000044B058:
	x0 = 0x00000000004DE000
	x0 = Mem0[x0 + 1648:word64]
	w19 = Mem0[x29 + 228:word32]
	fileno(x0)
	sp = sp + 0xFFFFFFFFFFFFFFF8
	NZCV = cond(w19 - w0)
	branch Test(EQ,Z) l000000000044B090
	// succ:  l000000000044B070 l000000000044B090
l000000000044B070:
	x0 = 0x00000000004DE000
	x0 = Mem0[x0 + 1640:word64]
	w19 = Mem0[x29 + 228:word32]
	fileno(x0)
	sp = sp + 0xFFFFFFFFFFFFFFF8
	NZCV = cond(w19 - w0)
	branch Test(EQ,Z) l000000000044B090
	// succ:  l000000000044B088 l000000000044B090
l000000000044B088:
	w0 = Mem0[x29 + 228:word32]
	close(x0)
	sp = sp + 0xFFFFFFFFFFFFFFF8
	// succ:  l000000000044B090
l000000000044B090:
	x0 = 0x00000000004DE000
	x0 = Mem0[x0 + 1664:word64]
	w19 = Mem0[x29 + 224:word32]
	fileno(x0)
	sp = sp + 0xFFFFFFFFFFFFFFF8
	NZCV = cond(w19 - w0)
	branch Test(EQ,Z) l000000000044B0E0
	// succ:  l000000000044B0A8 l000000000044B0E0
l000000000044B0A8:
	x0 = 0x00000000004DE000
	x0 = Mem0[x0 + 1648:word64]
	w19 = Mem0[x29 + 224:word32]
	fileno(x0)
	sp = sp + 0xFFFFFFFFFFFFFFF8
	NZCV = cond(w19 - w0)
	branch Test(EQ,Z) l000000000044B0E0
	// succ:  l000000000044B0C0 l000000000044B0E0
l000000000044B0C0:
	x0 = 0x00000000004DE000
	x0 = Mem0[x0 + 1640:word64]
	w19 = Mem0[x29 + 224:word32]
	fileno(x0)
	sp = sp + 0xFFFFFFFFFFFFFFF8
	NZCV = cond(w19 - w0)
	branch Test(EQ,Z) l000000000044B0E0
	// succ:  l000000000044B0D8 l000000000044B0E0
l000000000044B0D8:
	w0 = Mem0[x29 + 224:word32]
	close(x0)
	sp = sp + 0xFFFFFFFFFFFFFFF8
	// succ:  l000000000044B0E0
l000000000044B0E0:
	x0 = 0x00000000004E3000
	w1 = Mem0[x0 + 1184:word32]
	x3 = 0x00000000004DE000
	w2 = w1 | 0x00000004
	x1 = 0x00000000004DE000
	w1 = Mem0[x1 + 1716:word32]
	Mem0[x3 + 1704:word32] = 0x00000000
	Mem0[x0 + 1184:word32] = w2
	branch w1 != 0x00000000 l000000000044B10C
	// succ:  l000000000044B104 l000000000044B10C
l000000000044B104:
	x0 = 0x00000000004DF000
	Mem0[x0 + 3708:word32] = w1
	// succ:  l000000000044B10C
l000000000044B10C:
	x0 = Mem0[x29 + 240:word64]
	call remove_quoted_escapes (retsize: 0;)
	x0 = 0x00000000004E3000
	w3 = 0x00000002
	x2 = 0x00000000004DE000
	x0 = x0 + 0xFFFFFFFFFFFFFC28
	w1 = 0x00000001
	Mem0[x2 + 1708:word32] = w3
	call __sigsetjmp (retsize: 0;)
	branch w0 != 0x00000000 l000000000044B2A8
	// succ:  l000000000044B134 l000000000044B2A8
l000000000044B134:
	x0 = 0x00000000004E3000
	w0 = Mem0[x0 + 1188:word32]
	branch w0 != 0x00000000 l000000000044B2F0
	// succ:  l000000000044B140 l000000000044B2F0
l000000000044B140:
	x19 = 0x00000000004DF000
	w0 = Mem0[x19 + 3112:word32]
	w4 = Mem0[x29 + 248:word32]
	w3 = w0 + 0x00000001
	x1 = 0x00000000004AB000
	x0 = Mem0[x29 + 240:word64]
	x1 = x1 + 0xFFFFFFFFFFFFFD90
	w2 = w4 | 0x00000004
	Mem0[x19 + 3112:word32] = w3
	call parse_and_execute (retsize: 0;)
	w1 = Mem0[x19 + 3112:word32]
	w1 = w1 - 0x00000001
	Mem0[x19 + 3112:word32] = w1
	// succ:  l000000000044B174
l000000000044B174:
	x1 = 0x00000000004E3000
	Mem0[x1 + 1200:word32] = w0
	call run_exit_trap (retsize: 0;)
	x1 = 0x00000000004E1000
	x1 = x1 + 0x0000000000000008
	w1 = Mem0[x1 + 12:word32]
	branch w1 != 0x00000000 l000000000044B22C
	// succ:  l000000000044B190 l000000000044B22C
l000000000044B190:
	exit(x0)
l000000000044B194:
	x20 = x23
	branch w22 == 0x00000000 l000000000044AF58
	// succ:  l000000000044B19C l000000000044AF58
l000000000044B19C:
	w25 = w25 & 0x00000003
	branch w25 == 0x00000000 l000000000044B290
	// succ:  l000000000044B1A4 l000000000044B290
l000000000044B1A4:
	x4 = 0x0000000000000002
	x4 = x4 - x23
l000000000044B20C:
	x1 = 0x00000000004AD000
	x1 = x1 + 0xFFFFFFFFFFFFFAE8
	w2 = 0x00000005
	x0 = 0x0000000000000000
	dcgettext(x0, x1, x2)
	sp = sp + 0xFFFFFFFFFFFFFFF8
	call sys_error (retsize: 0;)
	w0 = 0x00000001
	exit(x0)
l000000000044B22C:
	Mem0[x29 + 264:word64] = x0
	call fn000000000044AB2C (retsize: 0;)
	x0 = Mem0[x29 + 264:word64]
	exit(x0)
l000000000044B23C:
	call maybe_make_export_env (retsize: 0;)
	goto l000000000044ACEC
	// succ:  l000000000044ACEC
l000000000044B254:
	x0 = 0x00000000004E3000
	w1 = Mem0[x0 + 860:word32]
	w31 = w1 - 0x00000002
	NZCV = cond(w31)
	branch Test(NE,Z) l000000000044AF94
	// succ:  l000000000044B264 l000000000044AF94
l000000000044B264:
	Mem0[x29 + 264:word64] = x1
	call getpid (retsize: 0;)
	x1 = Mem0[x29 + 264:word64]
	call kill (retsize: 0;)
	goto l000000000044AF94
	// succ:  l000000000044AF94
l000000000044B290:
	x0 = x23
	w1 = w22 - 0x00000001
	w2 = 0x00000001
	call strip_trailing (retsize: 0;)
	x20 = x23
	goto l000000000044AF58
	// succ:  l000000000044AF58
l000000000044B2A8:
	w0 = w0 - 0x00000003
	w31 = w0 - 0x00000001
	NZCV = cond(w31)
	branch Test(ULE,ZC) l000000000044B2C8
	// succ:  l000000000044B2B4 l000000000044B2C8
l000000000044B2B4:
	w0 = 0x00000001
	goto l000000000044B174
	// succ:  l000000000044B174
l000000000044B2BC:
	w4 = w3
	w5 = w3
	goto l000000000044ADC8
	// succ:  l000000000044ADC8
l000000000044B2C8:
	x0 = 0x00000000004E3000
	w0 = Mem0[x0 + 1200:word32]
	x1 = 0x00000000004E3000
	Mem0[x1 + 1200:word32] = w0
	call run_exit_trap (retsize: 0;)
	x1 = 0x00000000004E1000
	x1 = x1 + 0x0000000000000008
	w1 = Mem0[x1 + 12:word32]
	branch w1 == 0x00000000 l000000000044B190
	// succ:  l000000000044B2EC l000000000044B190
l000000000044B2EC:
	goto l000000000044B22C
	// succ:  l000000000044B22C
l000000000044B2F0:
	x0 = 0x00000000004E3000
	x0 = x0 + 0x0000000000000360
	w1 = 0x00000001
	call __sigsetjmp (retsize: 0;)
	branch w0 == 0x00000000 l000000000044B140
	// succ:  l000000000044B304 l000000000044B140
l000000000044B304:
	x0 = 0x00000000004E3000
	w0 = Mem0[x0 + 856:word32]
	goto l000000000044B174
	// succ:  l000000000044B174
l000000000044B310:
	call give_terminal_to (retsize: 0;)
	goto l000000000044AFBC
	// succ:  l000000000044AFBC
l000000000044B318:
	w27 = 0x00000000
	x20 = 0x0000000000000000
	goto l000000000044AF58
	// succ:  l000000000044AF58
l000000000044B324:
	x0 = Mem0[x29 + 240:word64]
	goto l000000000044AFC8
	// succ:  l000000000044AFC8
l000000000044B32C:
	x1 = 0x00000000004AD000
	x1 = x1 + 0xFFFFFFFFFFFFFA88
	w2 = 0x00000005
	x0 = 0x0000000000000000
	dcgettext(x0, x1, x2)
	sp = sp + 0xFFFFFFFFFFFFFFF8
	call sys_error (retsize: 0;)
	// succ:  l000000000044B344
l000000000044B344:
	w0 = Mem0[x29 + 224:word32]
	close(x0)
	sp = sp + 0xFFFFFFFFFFFFFFF8
	w0 = Mem0[x29 + 228:word32]
	close(x0)
	sp = sp + 0xFFFFFFFFFFFFFFF8
	x0 = 0x0000000000000000
	goto l000000000044AFC8
	// succ:  l000000000044AFC8
l000000000044B35C:
	x1 = 0x00000000004AD000
	x1 = x1 + 0xFFFFFFFFFFFFFAB8
	w2 = 0x00000005
	x0 = 0x0000000000000000
	dcgettext(x0, x1, x2)
	sp = sp + 0xFFFFFFFFFFFFFFF8
	call sys_error (retsize: 0;)
	goto l000000000044B344
	// succ:  l000000000044B344
command_substitute_exit:


// pat_subst
// Return size: 0
void pat_subst()
pat_subst_entry:
	// succ:  l000000000044B378
l000000000044B378:
	sp = fp
	sp = sp + -272
	Mem0[sp:word64] = x29
	sp = sp + 8
	Mem0[sp:word64] = x30
	x29 = x31 + 0x0000000000000000
	v8 = sp + 64
	Mem0[v8:word64] = x25
	v8 = v8 + 8
	Mem0[v8:word64] = x26
	v11 = sp + 80
	Mem0[v11:word64] = x27
	v11 = v11 + 8
	Mem0[v11:word64] = x28
	v14 = sp + 16
	Mem0[v14:word64] = x19
	v14 = v14 + 8
	Mem0[v14:word64] = x20
	v17 = sp + 32
	Mem0[v17:word64] = x21
	v17 = v17 + 8
	Mem0[v17:word64] = x22
	v20 = sp + 48
	Mem0[v20:word64] = x23
	v20 = v20 + 8
	Mem0[v20:word64] = x24
	Mem0[x29 + 144:word64] = x1
	Mem0[x29 + 160:word64] = x2
	x27 = x0
	w25 = w3
	branch x0 == 0x0000000000000000 l000000000044BC70
	// succ:  l000000000044B3A8 l000000000044BC70
l000000000044B3A8:
	x0 = Mem0[x29 + 144:word64]
	w23 = w3 & 0x00000003
	branch x0 == 0x0000000000000000 l000000000044B684
	// succ:  l000000000044B3B4 l000000000044B684
l000000000044B3B4:
	v28 = Mem0[x0:byte]
	w0 = (word32) v28
	branch w0 == 0x00000000 l000000000044B684
	// succ:  l000000000044B3BC l000000000044B684
l000000000044B3BC:
	x2 = 0x00000000004AD000
	x1 = x2 + 0xFFFFFFFFFFFFFA20
	x0 = 0x0000000000000040
	w2 = 0x00001943
	call sh_xmalloc (retsize: 0;)
	x3 = Mem0[x29 + 160:word64]
	Mem0[x0:byte] = 0x00
	x22 = x0
	branch x3 == 0x0000000000000000 l000000000044BC68
	// succ:  l000000000044B3E0 l000000000044BC68
l000000000044B3E0:
	v31 = Mem0[x3:byte]
	w0 = (word32) v31
	w21 = 0x00000000
	branch w0 != 0x00000000 l000000000044B7C4
	// succ:  l000000000044B3EC l000000000044B7C4
l000000000044B3EC:
	x0 = 0x00000000004E1000
	w19 = 0x00000040
	w20 = 0x00000000
	x26 = x0 + 0x0000000000000268
	// succ:  l000000000044B3FC
l000000000044B3FC:
	v35 = Mem0[x27:byte]
	w0 = (word32) v35
	branch w0 == 0x00000000 l000000000044B654
	// succ:  l000000000044B404 l000000000044B654
l000000000044B404:
	x0 = Mem0[x29 + 144:word64]
	branch x0 == 0x0000000000000000 l000000000044B654
	// succ:  l000000000044B40C l000000000044B654
l000000000044B40C:
	v36 = Mem0[x0:byte]
	w0 = (word32) v36
	branch w0 == 0x00000000 l000000000044B654
	// succ:  l000000000044B414 l000000000044B654
l000000000044B414:
	__ctype_get_mb_cur_max()
	sp = sp + 0xFFFFFFFFFFFFFFF8
	x31 = x0 - 0x0000000000000001
	NZCV = cond(x31)
	x0 = x27
	branch Test(ULE,ZC) l000000000044B740
	// succ:  l000000000044B424 l000000000044B740
l000000000044B424:
	call mbsmbchar (retsize: 0;)
	branch x0 == 0x0000000000000000 l000000000044B92C
	// succ:  l000000000044B42C l000000000044B92C
l000000000044B42C:
	x2 = Mem0[x29 + 144:word64]
	x0 = x29 + 0x0000000000000068
	x1 = 0x0000000000000000
	call xdupmbstowcs (retsize: 0;)
	x31 = x0 + 0x0000000000000001
	NZCV = cond(x31)
	branch Test(EQ,Z) l000000000044B73C
	// succ:  l000000000044B444 l000000000044B73C
l000000000044B444:
	x0 = x29 + 0x0000000000000070
	x1 = x29 + 0x0000000000000060
	x2 = x27
	call xdupmbstowcs (retsize: 0;)
	Mem0[x29 + 176:word64] = x0
	x31 = x0 + 0x0000000000000001
	NZCV = cond(x31)
	branch Test(EQ,Z) l000000000044B728
	// succ:  l000000000044B460 l000000000044B728
l000000000044B460:
	x24 = Mem0[x29 + 104:word64]
	x3 = Mem0[x29 + 112:word64]
	w0 = Mem0[x24:word32]
	Mem0[x29 + 168:word64] = x3
	x3 = Mem0[x29 + 96:word64]
	w31 = w0 - 0x0000002A
	NZCV = cond(w31)
	Mem0[x29 + 240:word64] = x3
	w1 = (word32) Test(NE,Z)
	Mem0[x29 + 232:word32] = 0x00000000
	branch w1 == 0x00000000 l000000000044B4A0
	// succ:  l000000000044B488 l000000000044B4A0
l000000000044B488:
	w31 = w0 - 0x0000003F
	NZCV = cond(w31)
	branch Test(EQ,Z) l000000000044B4A0
	// succ:  l000000000044B490 l000000000044B4A0
l000000000044B490:
	w2 = w0 - 0x0000005B
	w31 = w2 - 0x00000001
	NZCV = cond(w31)
	w3 = (word32) Test(UGT,ZC)
	Mem0[x29 + 232:word32] = w3
	// succ:  l000000000044B4A0
l000000000044B4A0:
	w28 = Mem0[x26:word32]
	branch w28 != 0x00000000 l000000000044B78C
	// succ:  l000000000044B4A8 l000000000044B78C
l000000000044B4A8:
	x0 = x24
	Mem0[x29 + 256:word64] = x1
	call wcslen (retsize: 0;)
	x1 = Mem0[x29 + 256:word64]
	branch w1 == 0x00000000 l000000000044B8A4
	// succ:  l000000000044B4BC l000000000044B8A4
l000000000044B4BC:
	x2 = 0x00000000004AD000
	x0 = x0 + 0x0000000000000003
	x1 = x2 + 0xFFFFFFFFFFFFFA20
l000000000044B52C:
	NZCV = cond(w2 - w31)
	x1 = Mem0[x29 + 168:word64]
	w2 = 0x00000020
l000000000044B5D4:
	branch w24 == 0x00000000 l000000000044B658
	// succ:  l000000000044B5D8 l000000000044B658
l000000000044B5D8:
	x24 = Mem0[x29 + 128:word64]
	x24 = x24 - x27
	w0 = w21 + w24
	w0 = w0 + w20
	NZCV = cond(w0 - w19)
	branch Test(LT,NV) l000000000044B61C
	// succ:  l000000000044B5F0 l000000000044B61C
l000000000044B5F0:
	w0 = w0 - w19
	w0 = w0 & 0xFFFFFFC0
	w19 = w19 + 0x00000040
	w19 = w19 + w0
	x3 = 0x00000000004AD000
	x0 = x22
	x2 = x3 + 0xFFFFFFFFFFFFFA20
l000000000044B61C:
	branch w24 != 0x00000000 l000000000044B75C
	// succ:  l000000000044B620 l000000000044B75C
l000000000044B620:
	branch w21 != 0x00000000 l000000000044B774
	// succ:  l000000000044B624 l000000000044B774
l000000000044B624:
	x27 = Mem0[x29 + 120:word64]
	branch (w25 & 0x00000010) == 0x00000000 l000000000044B654
	// succ:  l000000000044B62C l000000000044B654
l000000000044B62C:
	branch w23 != 0x00000000 l000000000044B654
	// succ:  l000000000044B630 l000000000044B654
l000000000044B630:
	x0 = Mem0[x29 + 128:word64]
	x31 = x27 - x0
	NZCV = cond(x31)
	branch Test(EQ,Z) l000000000044B8CC
	// succ:  l000000000044B63C l000000000044B8CC
l000000000044B63C:
	branch x27 == 0x0000000000000000 l000000000044B660
	// succ:  l000000000044B640 l000000000044B660
l000000000044B640:
	v56 = Mem0[x27:byte]
	w0 = (word32) v56
	branch w0 == 0x00000000 l000000000044B654
	// succ:  l000000000044B648 l000000000044B654
l000000000044B648:
	x1 = Mem0[x29 + 144:word64]
	v57 = Mem0[x1:byte]
	w0 = (word32) v57
	branch w0 != 0x00000000 l000000000044B414
	// succ:  l000000000044B654 l000000000044B414
l000000000044B654:
	branch x27 == 0x0000000000000000 l000000000044B660
	// succ:  l000000000044B658 l000000000044B660
l000000000044B658:
	v54 = Mem0[x27:byte]
	w0 = (word32) v54
	branch w0 != 0x00000000 l000000000044B7EC
	// succ:  l000000000044B660 l000000000044B7EC
l000000000044B660:
	Mem0[x22 + (int64) ((int32) w20):byte] = 0x00
	x0 = x22
	// succ:  l000000000044B668
l000000000044B668:
	v45 = sp + 16
	x19 = Mem0[v45:word64]
	v45 = v45 + 8
	x20 = Mem0[v45:word64]
	v46 = sp + 32
	x21 = Mem0[v46:word64]
	v46 = v46 + 8
	x22 = Mem0[v46:word64]
	v47 = sp + 48
	x23 = Mem0[v47:word64]
	v47 = v47 + 8
	x24 = Mem0[v47:word64]
	v48 = sp + 64
	x25 = Mem0[v48:word64]
	v48 = v48 + 8
	x26 = Mem0[v48:word64]
	v49 = sp + 80
	x27 = Mem0[v49:word64]
	v49 = v49 + 8
	x28 = Mem0[v49:word64]
	x29 = Mem0[sp:word64]
	sp = sp + 8
	x30 = Mem0[sp:word64]
	sp = sp + 272
	return
	// succ:  pat_subst_exit
l000000000044B684:
	w0 = w23 - 0x00000001
	w31 = w0 - 0x00000001
	NZCV = cond(w31)
	branch Test(UGT,ZC) l000000000044B3BC
	// succ:  l000000000044B690 l000000000044B3BC
l000000000044B690:
	x1 = Mem0[x29 + 160:word64]
	branch x1 == 0x0000000000000000 l000000000044BCDC
	// succ:  l000000000044B698 l000000000044BCDC
l000000000044B698:
	v60 = Mem0[x1:byte]
	w0 = (word32) v60
	w19 = 0x00000000
	branch w0 == 0x00000000 l000000000044B6C8
	// succ:  l000000000044B6A4 l000000000044B6C8
l000000000044B6A4:
	v61 = Mem0[x1 + 1:byte]
	w0 = (word32) v61
	w19 = 0x00000001
	branch w0 == 0x00000000 l000000000044B6C8
	// succ:  l000000000044B6B0 l000000000044B6C8
l000000000044B6B0:
	v62 = Mem0[x1 + 2:byte]
	w0 = (word32) v62
	w19 = 0x00000002
	branch w0 == 0x00000000 l000000000044B6C8
	// succ:  l000000000044B6BC l000000000044B6C8
l000000000044B6BC:
	x0 = x1
	strlen(x0)
	sp = sp + 0xFFFFFFFFFFFFFFF8
	w19 = w0
	// succ:  l000000000044B6C8
l000000000044B6C8:
	v63 = Mem0[x27:byte]
	w0 = (word32) v63
	w20 = 0x00000000
	branch w0 == 0x00000000 l000000000044B6E0
	// succ:  l000000000044B6D4 l000000000044B6E0
l000000000044B6D4:
	v64 = Mem0[x27 + 1:byte]
	w0 = (word32) v64
	w20 = 0x00000001
	branch w0 != 0x00000000 l000000000044BC98
	// succ:  l000000000044B6E0 l000000000044BC98
l000000000044B6E0:
	w0 = w19 + w20
	w0 = w0 + 0x00000002
	x1 = 0x00000000004AD000
l000000000044B728:
	x2 = 0x00000000004AD000
	x0 = Mem0[x29 + 104:word64]
	x1 = x2 + 0xFFFFFFFFFFFFFA20
	w2 = 0x000010F0
	call sh_xfree (retsize: 0;)
	// succ:  l000000000044B73C
l000000000044B73C:
	x0 = x27
	// succ:  l000000000044B740
l000000000044B740:
	x1 = Mem0[x29 + 144:word64]
	w2 = w23
	x3 = x29 + 0x0000000000000080
	x4 = x29 + 0x0000000000000078
	call fn00000000004454B8 (retsize: 0;)
	w24 = w0
	goto l000000000044B5D4
	// succ:  l000000000044B5D4
l000000000044B75C:
	x0 = x22 + (int64) ((int32) w20)
	x1 = x27
l000000000044B774:
	x1 = Mem0[x29 + 160:word64]
	x0 = x22 + (int64) ((int32) w20)
l000000000044B78C:
	w3 = Mem0[x24 + 4:word32]
	w31 = w3 - 0x00000028
	NZCV = cond(w31)
	branch Test(NE,Z) l000000000044B4A8
	// succ:  l000000000044B798 l000000000044B4A8
l000000000044B798:
	branch w1 == 0x00000000 l000000000044BB60
	// succ:  l000000000044B79C l000000000044BB60
l000000000044B79C:
	w3 = w0 - 0x0000003F
	w31 = w3 - 0x00000001
	NZCV = cond(w31)
	branch Test(ULE,ZC) l000000000044BB60
	// succ:  l000000000044B7A8 l000000000044BB60
l000000000044B7A8:
	w31 = w0 - 0x0000002B
	NZCV = cond(w31)
	branch Test(EQ,Z) l000000000044BB60
	// succ:  l000000000044B7B0 l000000000044BB60
l000000000044B7B0:
	w3 = Mem0[x29 + 232:word32]
	w31 = w0 - 0x00000021
	NZCV = cond(w31)
l000000000044B7C4:
	v43 = Mem0[x3 + 1:byte]
	w0 = (word32) v43
	w21 = 0x00000001
	branch w0 == 0x00000000 l000000000044B3EC
	// succ:  l000000000044B7D0 l000000000044B3EC
l000000000044B7D0:
	v44 = Mem0[x3 + 2:byte]
	w0 = (word32) v44
	w21 = 0x00000002
	branch w0 == 0x00000000 l000000000044B3EC
	// succ:  l000000000044B7DC l000000000044B3EC
l000000000044B7DC:
	x0 = x3
	strlen(x0)
	sp = sp + 0xFFFFFFFFFFFFFFF8
	w21 = w0
	goto l000000000044B3EC
	// succ:  l000000000044B3EC
l000000000044B7EC:
	v55 = Mem0[x27 + 1:byte]
	w21 = (word32) v55
l000000000044B8A4:
	w1 = Mem0[x24 + 4:word32]
	w31 = w1 - 0x00000028
	NZCV = cond(w31)
	branch Test(EQ,Z) l000000000044BC60
	// succ:  l000000000044B8B0 l000000000044BC60
l000000000044B8B0:
	x1 = x24 + (x0 << 2)
	w1 = Mem0[x1 + -4:word32]
	w31 = w1 - 0x0000002A
	NZCV = cond(w31)
	branch Test(NE,Z) l000000000044B4BC
	// succ:  l000000000044B8C0 l000000000044B4BC
l000000000044B8C0:
	w2 = w28
	x4 = x24
	goto l000000000044B52C
	// succ:  l000000000044B52C
l000000000044B8CC:
	w24 = w20 + 0x00000001
	NZCV = cond(w24 - w19)
	branch Test(LT,NV) l000000000044B904
	// succ:  l000000000044B8D8 l000000000044B904
l000000000044B8D8:
	w0 = w24 - w19
	w0 = w0 & 0xFFFFFFC0
	w19 = w19 + 0x00000040
	w19 = w19 + w0
	x3 = 0x00000000004AD000
	x0 = x22
	x2 = x3 + 0xFFFFFFFFFFFFFA20
l000000000044B904:
	v58 = Mem0[x27:byte]
	w0 = (word32) v58
	x5 = x27 + 0x0000000000000001
	NZCV = cond(x5)
	Mem0[x22 + (int64) ((int32) w20):byte] = (byte) w0
	x0 = Mem0[x29 + 120:word64]
	w20 = w24
	x0 = x0 + 0x0000000000000001
	Mem0[x29 + 120:word64] = x0
	branch Test(EQ,Z) l000000000044B660
	// succ:  l000000000044B924 l000000000044B660
l000000000044B924:
	x27 = x5
	goto l000000000044B3FC
	// succ:  l000000000044B3FC
l000000000044B92C:
	x0 = Mem0[x29 + 144:word64]
	call mbsmbchar (retsize: 0;)
	branch x0 != 0x0000000000000000 l000000000044B42C
	// succ:  l000000000044B938 l000000000044B42C
l000000000044B938:
	x0 = x27
	goto l000000000044B740
	// succ:  l000000000044B740
l000000000044BB60:
	Mem0[x29 + 232:word32] = 0x00000000
	goto l000000000044B4A8
	// succ:  l000000000044B4A8
l000000000044BC60:
	branch w28 != 0x00000000 l000000000044B4BC
	// succ:  l000000000044BC64 l000000000044B4BC
l000000000044BC64:
	goto l000000000044B8B0
	// succ:  l000000000044B8B0
l000000000044BC68:
	w21 = Mem0[x29 + 160:word32]
	goto l000000000044B3EC
	// succ:  l000000000044B3EC
l000000000044BC70:
	x1 = 0x00000000004AD000
	x1 = x1 + 0xFFFFFFFFFFFFFA20
	w2 = 0x0000191E
	x0 = 0x0000000000000001
	call sh_xmalloc (retsize: 0;)
	x2 = 0x00000000004AC000
	v42 = Mem0[x2 + 1120:byte]
	w2 = (word32) v42
	x1 = x0
	Mem0[x1:byte] = (byte) w2
	goto l000000000044B668
	// succ:  l000000000044B668
l000000000044BC98:
	v65 = Mem0[x27 + 2:byte]
	w0 = (word32) v65
	w20 = 0x00000002
	branch w0 == 0x00000000 l000000000044B6E0
	// succ:  l000000000044BCA4 l000000000044B6E0
l000000000044BCA4:
	x0 = x27
	strlen(x0)
	sp = sp + 0xFFFFFFFFFFFFFFF8
	w20 = w0
	goto l000000000044B6E0
	// succ:  l000000000044B6E0
l000000000044BCDC:
	w19 = Mem0[x29 + 160:word32]
	goto l000000000044B6C8
	// succ:  l000000000044B6C8
pat_subst_exit:


// string_quote_removal
// Return size: 0
void string_quote_removal()
string_quote_removal_entry:
	// succ:  l000000000044BCE4
l000000000044BCE4:
	sp = fp
	sp = sp + -144
	Mem0[sp:word64] = x29
	sp = sp + 8
	Mem0[sp:word64] = x30
	x29 = x31 + 0x0000000000000000
	v8 = sp + 16
	Mem0[v8:word64] = x19
	v8 = v8 + 8
	Mem0[v8:word64] = x20
	v11 = sp + 32
	Mem0[v11:word64] = x21
	v11 = v11 + 8
	Mem0[v11:word64] = x22
	v14 = sp + 64
	Mem0[v14:word64] = x25
	v14 = v14 + 8
	Mem0[v14:word64] = x26
	v17 = sp + 80
	Mem0[v17:word64] = x27
	v17 = v17 + 8
	Mem0[v17:word64] = x28
	w26 = w1
	v22 = sp + 48
	Mem0[v22:word64] = x23
	v22 = v22 + 8
	Mem0[v22:word64] = x24
	x21 = x0
	Mem0[x29 + 104:word64] = 0x0000000000000000
	strlen(x0)
	sp = sp + 0xFFFFFFFFFFFFFFF8
	x3 = x0
	x2 = 0x00000000004AD000
	x1 = x2 + 0xFFFFFFFFFFFFFA20
	x3 = x21 + x3
	x0 = x0 + 0x0000000000000001
	w2 = 0x000021BC
	Mem0[x29 + 120:word64] = x3
	call sh_xmalloc (retsize: 0;)
	x28 = x0
	x22 = x0
	x0 = 0x00000000004D7000
	w24 = 0x00000000
	x25 = 0x00000000004C2000
	x0 = x0 + 0x00000000000005C0
	w20 = w24
	x19 = 0x0000000000000000
	w26 = w26 & 0x00000003
	x25 = x25 + 0xFFFFFFFFFFFFFCC0
	w27 = 0x00000001
	Mem0[x29 + 128:word64] = x0
	v31 = Mem0[x21 + x19:byte]
	w2 = (word32) v31
	x23 = x21 + x19
	branch w2 == 0x00000000 l000000000044BDD8
	// succ:  l000000000044BD6C l000000000044BDD8
l000000000044BD6C:
	w31 = w2 - 0x00000027
	NZCV = cond(w31)
	branch Test(EQ,Z) l000000000044BE2C
	// succ:  l000000000044BD74 l000000000044BE2C
l000000000044BD74:
	w31 = w2 - 0x0000005C
	NZCV = cond(w31)
	branch Test(EQ,Z) l000000000044BE0C
	// succ:  l000000000044BD7C l000000000044BE0C
l000000000044BD7C:
	w31 = w2 - 0x00000022
	NZCV = cond(w31)
	branch Test(EQ,Z) l000000000044BDFC
	// succ:  l000000000044BD84 l000000000044BDFC
l000000000044BD84:
	__ctype_get_mb_cur_max()
	sp = sp + 0xFFFFFFFFFFFFFFF8
	x31 = x0 - 0x0000000000000001
	NZCV = cond(x31)
	v36 = Mem0[x23:byte]
	w0 = (word32) v36
	branch Test(ULE,ZC) l000000000044BE78
	// succ:  l000000000044BD94 l000000000044BE78
l000000000044BD94:
l000000000044BDD8:
	Mem0[x22:byte] = (byte) w2
	x0 = x28
	v38 = sp + 16
	x19 = Mem0[v38:word64]
	v38 = v38 + 8
	x20 = Mem0[v38:word64]
	v39 = sp + 32
	x21 = Mem0[v39:word64]
	v39 = v39 + 8
	x22 = Mem0[v39:word64]
	v40 = sp + 48
	x23 = Mem0[v40:word64]
	v40 = v40 + 8
	x24 = Mem0[v40:word64]
	v41 = sp + 64
	x25 = Mem0[v41:word64]
	v41 = v41 + 8
	x26 = Mem0[v41:word64]
	v42 = sp + 80
	x27 = Mem0[v42:word64]
	v42 = v42 + 8
	x28 = Mem0[v42:word64]
	x29 = Mem0[sp:word64]
	sp = sp + 8
	x30 = Mem0[sp:word64]
	sp = sp + 144
	return
	// succ:  string_quote_removal_exit
l000000000044BDFC:
	w20 = w20 + 0x00000001
	w24 = w27 - w24
l000000000044BE0C:
	w20 = w20 + 0x00000001
l000000000044BE2C:
	w0 = w24 | w26
	branch w0 == 0x00000000 l000000000044BED0
	// succ:  l000000000044BE34 l000000000044BED0
l000000000044BE34:
	w20 = w20 + 0x00000001
	Mem0[x22:byte] = (byte) w2
l000000000044BE78:
	w20 = w20 + 0x00000001
	Mem0[x22:byte] = (byte) w0
l000000000044BED0:
	Mem0[x29 + 96:word64] = 0x0000000000000000
	__ctype_get_mb_cur_max()
	sp = sp + 0xFFFFFFFFFFFFFFF8
	x31 = x0 - 0x0000000000000001
	NZCV = cond(x31)
	w24 = w20 + 0x00000001
	branch Test(ULE,ZC) l000000000044BFE8
	// succ:  l000000000044BEE4 l000000000044BFE8
l000000000044BEE4:
l000000000044BEF8:
	w20 = w24
l000000000044BFE8:
	Mem0[x29 + 112:word64] = 0x0000000000000000
	goto l000000000044BEF8
	// succ:  l000000000044BEF8
string_quote_removal_exit:


// fn000000000044C21C
// Return size: 0
void fn000000000044C21C()
fn000000000044C21C_entry:
	// succ:  l000000000044C21C
l000000000044C21C:
	sp = fp
	sp = sp + -112
	Mem0[sp:word64] = x29
	sp = sp + 8
	Mem0[sp:word64] = x30
	x29 = x31 + 0x0000000000000000
	v8 = sp + 16
	Mem0[v8:word64] = x19
	v8 = v8 + 8
	Mem0[v8:word64] = x20
	v11 = sp + 48
	Mem0[v11:word64] = x23
	v11 = v11 + 8
	Mem0[v11:word64] = x24
	v14 = sp + 32
	Mem0[v14:word64] = x21
	v14 = v14 + 8
	Mem0[v14:word64] = x22
	Mem0[sp + 64:word64] = x25
	x20 = x0
	w23 = w1
	branch x0 == 0x0000000000000000 l000000000044C33C
	// succ:  l000000000044C240 l000000000044C33C
l000000000044C240:
	x19 = Mem0[x0:word64]
	branch x19 == 0x0000000000000000 l000000000044C338
	// succ:  l000000000044C248 l000000000044C338
l000000000044C248:
	w1 = 0x00000000
	x0 = x19
	call assignment (retsize: 0;)
l000000000044C338:
	w0 = 0x00000000
	// succ:  l000000000044C33C
l000000000044C33C:
	v19 = sp + 16
	x19 = Mem0[v19:word64]
	v19 = v19 + 8
	x20 = Mem0[v19:word64]
	v20 = sp + 32
	x21 = Mem0[v20:word64]
	v20 = v20 + 8
	x22 = Mem0[v20:word64]
	v21 = sp + 48
	x23 = Mem0[v21:word64]
	v21 = v21 + 8
	x24 = Mem0[v21:word64]
	x25 = Mem0[sp + 64:word64]
	x29 = Mem0[sp:word64]
	sp = sp + 8
	x30 = Mem0[sp:word64]
	sp = sp + 112
	return
	// succ:  fn000000000044C21C_exit
fn000000000044C21C_exit:


// do_assignment
// Return size: 0
void do_assignment()
do_assignment_entry:
	// succ:  l000000000044C5F8
l000000000044C5F8:
	sp = fp
	sp = sp + -32
	Mem0[sp:word64] = x29
	sp = sp + 8
	Mem0[sp:word64] = x30
	x29 = x31 + 0x0000000000000000
	Mem0[x29 + 16:word64] = x0
	w2 = 0x00000004
	w1 = 0x00000001
	x0 = x29 + 0x0000000000000010
	Mem0[x29 + 24:word32] = w2
	call fn000000000044C21C (retsize: 0;)
	x29 = Mem0[sp:word64]
	sp = sp + 8
	x30 = Mem0[sp:word64]
	sp = sp + 32
	return
	// succ:  do_assignment_exit
do_assignment_exit:


// do_word_assignment
// Return size: 0
void do_word_assignment()
do_word_assignment_entry:
	// succ:  l000000000044C620
l000000000044C620:
	sp = fp
	w1 = 0x00000001
	// succ:  l000000000044C624_thunk_fn000000000044C21C
l000000000044C624_thunk_fn000000000044C21C:
	call fn000000000044C21C (retsize: 0;)
	return
	// succ:  do_word_assignment_exit
do_word_assignment_exit:


// do_assignment_no_expand
// Return size: 0
void do_assignment_no_expand()
do_assignment_no_expand_entry:
	// succ:  l000000000044C628
l000000000044C628:
	sp = fp
	sp = sp + -32
	Mem0[sp:word64] = x29
	sp = sp + 8
	Mem0[sp:word64] = x30
	x29 = x31 + 0x0000000000000000
	Mem0[x29 + 16:word64] = x0
	w2 = 0x00000004
	w1 = 0x00000000
	x0 = x29 + 0x0000000000000010
	Mem0[x29 + 24:word32] = w2
	call fn000000000044C21C (retsize: 0;)
	x29 = Mem0[sp:word64]
	sp = sp + 8
	x30 = Mem0[sp:word64]
	sp = sp + 32
	return
	// succ:  do_assignment_no_expand_exit
do_assignment_no_expand_exit:


// expand_arith_string
// Return size: 0
void expand_arith_string()
expand_arith_string_entry:
	goto l000000000044C650
	// succ:  l000000000044C650
l000000000044C008:
	sp = sp + -112
	Mem0[sp:word64] = x29
	sp = sp + 8
	Mem0[sp:word64] = x30
	x29 = x31 + 0x0000000000000000
	v9 = sp + 16
	Mem0[v9:word64] = x19
	v9 = v9 + 8
	Mem0[v9:word64] = x20
	v12 = sp + 64
	Mem0[v12:word64] = x25
	v12 = v12 + 8
	Mem0[v12:word64] = x26
	Mem0[sp + 80:word64] = x27
	v16 = sp + 32
	Mem0[v16:word64] = x21
	v16 = v16 + 8
	Mem0[v16:word64] = x22
	v19 = sp + 48
	Mem0[v19:word64] = x23
	v19 = v19 + 8
	Mem0[v19:word64] = x24
	x20 = x0
	w26 = w1
	x27 = x2
	Mem0[x29 + 96:word64] = 0x0000000000000000
	__ctype_get_mb_cur_max()
	sp = sp + 0xFFFFFFFFFFFFFFF8
	x31 = x0 - 0x0000000000000001
	NZCV = cond(x31)
	branch Test(ULE,ZC) l000000000044C1D0
	// succ:  l000000000044C040 l000000000044C1D0
l000000000044C040:
	x0 = x20
	strlen(x0)
	sp = sp + 0xFFFFFFFFFFFFFFF8
	x25 = x0
	// succ:  l000000000044C04C
l000000000044C04C:
	w22 = 0x00000000
	x24 = 0x00000000004C2000
	w21 = w22
	x24 = x24 + 0xFFFFFFFFFFFFFCC0
l000000000044C1D0:
	x25 = 0x0000000000000000
	goto l000000000044C04C
	// succ:  l000000000044C04C
l000000000044C650:
	sp = fp
	x2 = 0x000000000044D000
	x2 = x2 + 0x000000000000013C
	goto l000000000044C008
	// succ:  l000000000044C008
expand_arith_string_exit:


// setifs
// Return size: 0
void setifs()
setifs_entry:
	// succ:  l000000000044CF6C
l000000000044CF6C:
	sp = fp
	sp = sp + -48
	Mem0[sp:word64] = x29
	sp = sp + 8
	Mem0[sp:word64] = x30
	x29 = x31 + 0x0000000000000000
	x1 = 0x00000000004E3000
	v9 = sp + 16
	Mem0[v9:word64] = x19
	v9 = v9 + 8
	Mem0[v9:word64] = x20
	Mem0[sp + 32:word64] = x21
	Mem0[x1 + 1584:word64] = x0
	branch x0 == 0x0000000000000000 l000000000044D070
	// succ:  l000000000044CF88 l000000000044D070
l000000000044CF88:
	x20 = Mem0[x0 + 8:word64]
	branch x20 == 0x0000000000000000 l000000000044D070
	// succ:  l000000000044CF90 l000000000044D070
l000000000044CF90:
	x19 = 0x00000000004E3000
	w1 = 0x00000000
	x21 = 0x00000000004E3000
	x0 = x19 + 0x0000000000000530
	x2 = 0x0000000000000100
	Mem0[x21 + 1600:word64] = x20
	memset(x0, x1, x2)
	sp = sp + 0xFFFFFFFFFFFFFFF8
	x1 = x20
	w4 = 0x00000001
	// succ:  l000000000044CFB4
l000000000044CFB4:
	v16 = Mem0[x1:byte]
	w2 = (word32) v16
	x3 = x19 + 0x0000000000000530
	x1 = x1 + 0x0000000000000001
	NZCV = cond(x1)
	branch w2 == 0x00000000 l000000000044CFCC
	// succ:  l000000000044CFC4 l000000000044CFCC
l000000000044CFC4:
	Mem0[x3 + (int64) ((int32) w2):byte] = (byte) w4
	branch Test(NE,Z) l000000000044CFB4
	// succ:  l000000000044CFCC l000000000044CFB4
l000000000044CFCC:
	__ctype_get_mb_cur_max()
	sp = sp + 0xFFFFFFFFFFFFFFF8
	x1 = x0
	x0 = x20
	call strnlen (retsize: 0;)
	x19 = x0
	__ctype_get_mb_cur_max()
	sp = sp + 0xFFFFFFFFFFFFFFF8
	x31 = x0 - 0x0000000000000001
	NZCV = cond(x31)
	branch Test(ULE,ZC) l000000000044D034
	// succ:  l000000000044CFEC l000000000044D034
l000000000044CFEC:
	x0 = Mem0[x21 + 1600:word64]
	x1 = x19
	call mblen (retsize: 0;)
l000000000044D034:
	x1 = 0x00000000004E3000
	x0 = 0x0000000000000001
	Mem0[x1 + 1616:word64] = x0
	x2 = Mem0[x21 + 1600:word64]
	x0 = 0x00000000004E3000
	v21 = Mem0[x2:byte]
	w2 = (word32) v21
	x3 = x0 + 0x0000000000000520
	Mem0[x3 + 1:byte] = 0x00
	Mem0[x0 + 1312:byte] = (byte) w2
	x0 = 0x0000000000000001
	v22 = sp + 16
	x19 = Mem0[v22:word64]
	v22 = v22 + 8
	x20 = Mem0[v22:word64]
	x21 = Mem0[sp + 32:word64]
	Mem0[x1 + 1616:word64] = x0
	x29 = Mem0[sp:word64]
	sp = sp + 8
	x30 = Mem0[sp:word64]
	sp = sp + 48
	return
	// succ:  setifs_exit
l000000000044D070:
	x20 = 0x00000000004AC000
	x20 = x20 + 0xFFFFFFFFFFFFFC60
	goto l000000000044CF90
	// succ:  l000000000044CF90
setifs_exit:


// getifs
// Return size: 0
void getifs()
getifs_entry:
	// succ:  l000000000044D07C
l000000000044D07C:
	sp = fp
	x0 = 0x00000000004E3000
	x0 = Mem0[x0 + 1600:word64]
	return
	// succ:  getifs_exit
getifs_exit:


// word_split
// Return size: 0
void word_split()
word_split_entry:
	// succ:  l000000000044D088
l000000000044D088:
	sp = fp
	x3 = x0
	branch x0 == 0x0000000000000000 l000000000044D0B8
	// succ:  l000000000044D090 l000000000044D0B8
l000000000044D090:
	w0 = Mem0[x0 + 8:word32]
	w2 = w0 & 0x00000002
	branch (w0 & 0x00000002) == 0x00000000 l000000000044D0AC
	// succ:  l000000000044D09C l000000000044D0AC
l000000000044D09C:
	x1 = 0x00000000004AC000
	x0 = Mem0[x3:word64]
	x1 = x1 + 0x0000000000000460
	// succ:  l000000000044D0A8_thunk_list_string
l000000000044D0A8_thunk_list_string:
	call list_string (retsize: 0;)
	return
	// succ:  word_split_exit
l000000000044D0AC:
	branch x1 == 0x0000000000000000 l000000000044D09C
	// succ:  l000000000044D0B0 l000000000044D09C
l000000000044D0B0:
	x0 = Mem0[x3:word64]
	// succ:  l000000000044D0B4_thunk_list_string
l000000000044D0B4_thunk_list_string:
	call list_string (retsize: 0;)
	return
	// succ:  word_split_exit
l000000000044D0B8:
	return
	// succ:  word_split_exit
word_split_exit:


// fn000000000044D0BC
// Return size: 0
void fn000000000044D0BC()
fn000000000044D0BC_entry:
	// succ:  l000000000044D0BC
l000000000044D0BC:
	sp = fp
	sp = sp + -48
	Mem0[sp:word64] = x29
	sp = sp + 8
	Mem0[sp:word64] = x30
	x29 = x31 + 0x0000000000000000
	v8 = sp + 16
	Mem0[v8:word64] = x19
	v8 = v8 + 8
	Mem0[v8:word64] = x20
	v11 = sp + 32
	Mem0[v11:word64] = x21
	v11 = v11 + 8
	Mem0[v11:word64] = x22
	x20 = x0
	x21 = x0
	branch x0 == 0x0000000000000000 l000000000044D11C
	// succ:  l000000000044D0D8 l000000000044D11C
l000000000044D0D8:
	x22 = 0x00000000004E3000
	x0 = Mem0[x0 + 8:word64]
	x1 = Mem0[x22 + 1600:word64]
	call word_split (retsize: 0;)
	x21 = x0
	x19 = x0
	// succ:  l000000000044D0F0
l000000000044D0F0:
	x20 = Mem0[x20:word64]
	branch x20 == 0x0000000000000000 l000000000044D11C
	// succ:  l000000000044D0F8 l000000000044D11C
l000000000044D0F8:
	x0 = Mem0[x20 + 8:word64]
	x1 = Mem0[x22 + 1600:word64]
	call word_split (retsize: 0;)
	branch x21 == 0x0000000000000000 l000000000044D130
	// succ:  l000000000044D108 l000000000044D130
l000000000044D108:
	Mem0[x19:word64] = x0
	// succ:  l000000000044D10C
l000000000044D10C:
	branch x0 == 0x0000000000000000 l000000000044D0F0
	// succ:  l000000000044D110 l000000000044D0F0
l000000000044D110:
	x19 = x0
	x0 = Mem0[x0:word64]
	goto l000000000044D10C
	// succ:  l000000000044D10C
l000000000044D11C:
	x0 = x21
	v14 = sp + 16
	x19 = Mem0[v14:word64]
	v14 = v14 + 8
	x20 = Mem0[v14:word64]
	v15 = sp + 32
	x21 = Mem0[v15:word64]
	v15 = v15 + 8
	x22 = Mem0[v15:word64]
	x29 = Mem0[sp:word64]
	sp = sp + 8
	x30 = Mem0[sp:word64]
	sp = sp + 48
	return
	// succ:  fn000000000044D0BC_exit
l000000000044D130:
	x19 = x0
	x21 = x0
	goto l000000000044D0F0
	// succ:  l000000000044D0F0
fn000000000044D0BC_exit:


// expand_string
// Return size: 0
void expand_string()
expand_string_entry:
	// succ:  l000000000044D13C
l000000000044D13C:
	sp = fp
	sp = sp + -32
	Mem0[sp:word64] = x29
	sp = sp + 8
	Mem0[sp:word64] = x30
	x29 = x31 + 0x0000000000000000
	v8 = sp + 16
	Mem0[v8:word64] = x19
	v8 = v8 + 8
	Mem0[v8:word64] = x20
	branch x0 == 0x0000000000000000 l000000000044D184
	// succ:  l000000000044D14C l000000000044D184
l000000000044D14C:
	v11 = Mem0[x0:byte]
	w2 = (word32) v11
	branch w2 == 0x00000000 l000000000044D184
	// succ:  l000000000044D154 l000000000044D184
l000000000044D154:
	call fn0000000000452278 (retsize: 0;)
	x19 = x0
	branch x0 == 0x0000000000000000 l000000000044D184
	// succ:  l000000000044D160 l000000000044D184
l000000000044D160:
	call fn000000000044D0BC (retsize: 0;)
	x20 = x0
	x0 = x19
	call dispose_words (retsize: 0;)
	branch x20 == 0x0000000000000000 l000000000044D184
	// succ:  l000000000044D174 l000000000044D184
l000000000044D174:
	x0 = x20
	v12 = sp + 16
	x19 = Mem0[v12:word64]
	v12 = v12 + 8
	x20 = Mem0[v12:word64]
	x29 = Mem0[sp:word64]
	sp = sp + 8
	x30 = Mem0[sp:word64]
	sp = sp + 32
	// succ:  l000000000044D180_thunk_dequote_list
l000000000044D180_thunk_dequote_list:
	call dequote_list (retsize: 0;)
	return
	// succ:  expand_string_exit
l000000000044D184:
	x0 = 0x0000000000000000
	v13 = sp + 16
	x19 = Mem0[v13:word64]
	v13 = v13 + 8
	x20 = Mem0[v13:word64]
	x29 = Mem0[sp:word64]
	sp = sp + 8
	x30 = Mem0[sp:word64]
	sp = sp + 32
	return
	// succ:  expand_string_exit
expand_string_exit:


// fn000000000044D194
// Return size: 0
void fn000000000044D194()
fn000000000044D194_entry:
	// succ:  l000000000044D194
l000000000044D194:
	sp = fp
	sp = sp + -272
	Mem0[sp:word64] = x29
	sp = sp + 8
	Mem0[sp:word64] = x30
	x29 = x31 + 0x0000000000000000
	w8 = Mem0[x1:word32]
	v10 = sp + 80
	Mem0[v10:word64] = x27
	v10 = v10 + 8
	Mem0[v10:word64] = x28
	w27 = w8 + 0x00000001
	v14 = sp + 16
	Mem0[v14:word64] = x19
	v14 = v14 + 8
	Mem0[v14:word64] = x20
	v17 = sp + 32
	Mem0[v17:word64] = x21
	v17 = v17 + 8
	Mem0[v17:word64] = x22
	v20 = sp + 48
	Mem0[v20:word64] = x23
	v20 = v20 + 8
	Mem0[v20:word64] = x24
	v23 = sp + 64
	Mem0[v23:word64] = x25
	v23 = v23 + 8
	Mem0[v23:word64] = x26
fn000000000044D194_exit:


// fn000000000044FA70
// Return size: 0
void fn000000000044FA70()
fn000000000044FA70_entry:
	// succ:  l000000000044FA70
l000000000044FA70:
	sp = fp
	sp = sp + -304
	Mem0[sp:word64] = x29
	sp = sp + 8
	Mem0[sp:word64] = x30
	x29 = x31 + 0x0000000000000000
	v8 = sp + 32
	Mem0[v8:word64] = x21
	v8 = v8 + 8
	Mem0[v8:word64] = x22
	x22 = 0x00000000004AD000
	v11 = sp + 48
	Mem0[v11:word64] = x23
	v11 = v11 + 8
	Mem0[v11:word64] = x24
	Mem0[x29 + 188:word32] = w2
	x23 = x0
	w24 = w1
	x0 = 0x0000000000000070
	x1 = x22 + 0xFFFFFFFFFFFFFA20
	w2 = 0x00001F06
	v19 = sp + 16
	Mem0[v19:word64] = x19
	v19 = v19 + 8
	Mem0[v19:word64] = x20
	v22 = sp + 80
	Mem0[v22:word64] = x27
	v22 = v22 + 8
	Mem0[v22:word64] = x28
	v25 = sp + 64
	Mem0[v25:word64] = x25
	v25 = v25 + 8
	Mem0[v25:word64] = x26
	Mem0[x29 + 192:word64] = x3
	Mem0[x29 + 168:word64] = x4
	Mem0[x29 + 120:word64] = 0x0000000000000000
	call sh_xmalloc (retsize: 0;)
	Mem0[x0:byte] = 0x00
	x28 = Mem0[x23:word64]
	Mem0[x29 + 136:word32] = 0x00000000
	Mem0[x29 + 140:word32] = 0x00000000
	x19 = x0
	branch x28 == 0x0000000000000000 l000000000044FFE0
	// succ:  l000000000044FAD0 l000000000044FFE0
l000000000044FAD0:
	__ctype_get_mb_cur_max()
	sp = sp + 0xFFFFFFFFFFFFFFF8
	x31 = x0 - 0x0000000000000001
	NZCV = cond(x31)
	branch Test(ULE,ZC) l0000000000450A78
	// succ:  l000000000044FADC l0000000000450A78
l000000000044FADC:
	x0 = x28
	strlen(x0)
	sp = sp + 0xFFFFFFFFFFFFFFF8
	Mem0[x29 + 224:word64] = x0
	// succ:  l000000000044FAE8
l000000000044FAE8:
	x1 = Mem0[x29 + 192:word64]
	branch x1 == 0x0000000000000000 l000000000044FAF4
	// succ:  l000000000044FAF0 l000000000044FAF4
l000000000044FAF0:
	Mem0[x1:word32] = 0x00000000
	// succ:  l000000000044FAF4
l000000000044FAF4:
	x27 = 0x00000000004E1000
	x27 = x27 + 0x0000000000000008
	x0 = 0x00000000004C2000
	w4 = 0x00000000
	w2 = 0xFFFFFFFF
	x0 = x0 + 0xFFFFFFFFFFFFFCC0
	x3 = x27 + 0x0000000000000008
	Mem0[x29 + 176:word64] = x27
	Mem0[x29 + 144:word32] = w4
	w20 = w4
	w21 = 0x00000070
	Mem0[x29 + 216:word32] = w2
	Mem0[x29 + 184:word32] = w4
	Mem0[x29 + 160:word32] = w4
	w25 = w24 & 0x00000003
	Mem0[x29 + 200:word64] = x0
	Mem0[x29 + 208:word64] = x3
l000000000044FFE0:
	Mem0[x29 + 184:word32] = w28
	Mem0[x29 + 160:word32] = w28
	v32 = Mem0[x19:byte]
	w0 = (word32) v32
	branch w0 != 0x00000000 l0000000000450300
	// succ:  l000000000044FFF0 l0000000000450300
l000000000044FFF0:
	w0 = Mem0[x29 + 140:word32]
	x27 = 0x0000000000000000
	branch w0 != 0x00000000 l0000000000450054
	// succ:  l000000000044FFFC l0000000000450054
l000000000044FFFC:
	w0 = Mem0[x29 + 136:word32]
	branch w0 != 0x00000000 l0000000000450010
	// succ:  l0000000000450004 l0000000000450010
l0000000000450004:
	w5 = Mem0[x29 + 160:word32]
	w31 = w5 - 0x00000001
	NZCV = cond(w31)
	branch Test(NE,Z) l0000000000450054
	// succ:  l0000000000450010 l0000000000450054
l0000000000450010:
	w0 = 0x0000007F
	Mem0[x19:byte] = (byte) w0
	Mem0[x19 + 1:byte] = 0x00
	x0 = x19
	call make_bare_word (retsize: 0;)
	w2 = Mem0[x0 + 8:word32]
	x1 = 0x0000000000000000
	w2 = w2 | 0x00040000
	Mem0[x0 + 8:word32] = w2
	x20 = x0
	w24 = w24 & 0x00000003
	call make_word_list (retsize: 0;)
	x27 = x0
	branch w24 == 0x00000000 l0000000000450054
	// succ:  l0000000000450048 l0000000000450054
l0000000000450048:
	w0 = Mem0[x20 + 8:word32]
	w0 = w0 | 0x00000002
	Mem0[x20 + 8:word32] = w0
	// succ:  l0000000000450054
l0000000000450054:
	x0 = x19
	x1 = x22 + 0xFFFFFFFFFFFFFA20
	w2 = 0x000021A1
	call sh_xfree (retsize: 0;)
	x0 = x27
	v36 = sp + 16
	x19 = Mem0[v36:word64]
	v36 = v36 + 8
	x20 = Mem0[v36:word64]
	v37 = sp + 32
	x21 = Mem0[v37:word64]
	v37 = v37 + 8
	x22 = Mem0[v37:word64]
	v38 = sp + 48
	x23 = Mem0[v38:word64]
	v38 = v38 + 8
	x24 = Mem0[v38:word64]
	v39 = sp + 64
	x25 = Mem0[v39:word64]
	v39 = v39 + 8
	x26 = Mem0[v39:word64]
	v40 = sp + 80
	x27 = Mem0[v40:word64]
	v40 = v40 + 8
	x28 = Mem0[v40:word64]
	x29 = Mem0[sp:word64]
	sp = sp + 8
	x30 = Mem0[sp:word64]
	sp = sp + 304
	return
	// succ:  fn000000000044FA70_exit
l0000000000450300:
	w0 = Mem0[x23 + 8:word32]
	branch (w0 & 0x00000010) == 0x00000000 l0000000000450B44
	// succ:  l0000000000450308 l0000000000450B44
l0000000000450308:
	w0 = Mem0[x29 + 140:word32]
	w1 = Mem0[x29 + 184:word32]
	w0 = w1 | w0
	branch w0 == 0x00000000 l0000000000450828
	// succ:  l0000000000450318 l0000000000450828
l0000000000450318:
	w2 = Mem0[x29 + 184:word32]
	x0 = 0x00000000004E3000
	x1 = Mem0[x0 + 1600:word64]
	branch w2 == 0x00000000 l0000000000450828
	// succ:  l0000000000450328 l0000000000450828
l0000000000450328:
	branch x1 == 0x0000000000000000 l0000000000450828
	// succ:  l000000000045032C l0000000000450828
l000000000045032C:
	v41 = Mem0[x1:byte]
	w0 = (word32) v41
	branch w0 != 0x00000000 l000000000045033C
	// succ:  l0000000000450334 l000000000045033C
l0000000000450334:
	x1 = 0x00000000004BE000
	x1 = x1 + 0x0000000000000330
	// succ:  l000000000045033C
l000000000045033C:
	x0 = x19
	w2 = 0x00000001
	call list_string (retsize: 0;)
	x27 = x0
	goto l0000000000450054
	// succ:  l0000000000450054
l0000000000450828:
	x0 = x19
	w24 = w24 & 0x00000003
	call make_bare_word (retsize: 0;)
	branch w24 != 0x00000000 l0000000000450A60
	// succ:  l0000000000450838 l0000000000450A60
l0000000000450838:
	w3 = Mem0[x29 + 160:word32]
	w31 = w3 - 0x00000002
	NZCV = cond(w31)
	branch Test(EQ,Z) l0000000000450A60
	// succ:  l0000000000450844 l0000000000450A60
l0000000000450844:
	w1 = Mem0[x23 + 8:word32]
	branch (w1 & 0x00000004) == 0x00000000 l000000000045085C
	// succ:  l000000000045084C l000000000045085C
l000000000045084C:
	w1 = Mem0[x0 + 8:word32]
	w1 = w1 | 0x00000004
	Mem0[x0 + 8:word32] = w1
	w1 = Mem0[x23 + 8:word32]
	// succ:  l000000000045085C
l000000000045085C:
	branch (w1 & 0x00008000) == 0x00000000 l0000000000450870
	// succ:  l0000000000450860 l0000000000450870
l0000000000450860:
	w1 = Mem0[x0 + 8:word32]
	w1 = w1 | 0x00008000
	Mem0[x0 + 8:word32] = w1
	w1 = Mem0[x23 + 8:word32]
	// succ:  l0000000000450870
l0000000000450870:
	branch (w1 & 0x00000020) == 0x00000000 l0000000000450884
	// succ:  l0000000000450874 l0000000000450884
l0000000000450874:
	w1 = Mem0[x0 + 8:word32]
	w1 = w1 | 0x00000020
	Mem0[x0 + 8:word32] = w1
	w1 = Mem0[x23 + 8:word32]
	// succ:  l0000000000450884
l0000000000450884:
	branch (w1 & 0x00004000) == 0x00000000 l0000000000450894
	// succ:  l0000000000450888 l0000000000450894
l0000000000450888:
	w1 = Mem0[x0 + 8:word32]
	w1 = w1 | 0x00004000
	Mem0[x0 + 8:word32] = w1
	// succ:  l0000000000450894
l0000000000450894:
	w1 = Mem0[x29 + 136:word32]
	branch w1 == 0x00000000 l00000000004508A8
	// succ:  l000000000045089C l00000000004508A8
l000000000045089C:
	v47 = Mem0[x19:byte]
	w1 = (word32) v47
	w31 = w1 - 0x0000007F
	NZCV = cond(w31)
	branch Test(EQ,Z) l0000000000450FE8
	// succ:  l00000000004508A8 l0000000000450FE8
l00000000004508A8:
	x1 = 0x0000000000000000
	call make_word_list (retsize: 0;)
	x27 = x0
	goto l0000000000450054
	// succ:  l0000000000450054
l0000000000450A60:
	w1 = Mem0[x0 + 8:word32]
	w1 = w1 | 0x00000002
	Mem0[x0 + 8:word32] = w1
	goto l0000000000450844
	// succ:  l0000000000450844
l0000000000450A78:
	x0 = 0x0000000000000001
	Mem0[x29 + 224:word64] = x0
	goto l000000000044FAE8
	// succ:  l000000000044FAE8
l0000000000450B44:
	x0 = x19
	call make_bare_word (retsize: 0;)
	w1 = Mem0[x23 + 8:word32]
	branch (w1 & 0x00000004) == 0x00000000 l0000000000450B64
	// succ:  l0000000000450B54 l0000000000450B64
l0000000000450B54:
	w1 = Mem0[x0 + 8:word32]
	w1 = w1 | 0x00000004
	Mem0[x0 + 8:word32] = w1
	w1 = Mem0[x23 + 8:word32]
	// succ:  l0000000000450B64
l0000000000450B64:
	branch (w1 & 0x00008000) == 0x00000000 l0000000000450B78
	// succ:  l0000000000450B68 l0000000000450B78
l0000000000450B68:
	w1 = Mem0[x0 + 8:word32]
	w1 = w1 | 0x00008000
	Mem0[x0 + 8:word32] = w1
	w1 = Mem0[x23 + 8:word32]
	// succ:  l0000000000450B78
l0000000000450B78:
	branch (w1 & 0x00000020) == 0x00000000 l0000000000450B8C
	// succ:  l0000000000450B7C l0000000000450B8C
l0000000000450B7C:
	w1 = Mem0[x0 + 8:word32]
	w1 = w1 | 0x00000020
	Mem0[x0 + 8:word32] = w1
	w1 = Mem0[x23 + 8:word32]
	// succ:  l0000000000450B8C
l0000000000450B8C:
	branch (w1 & 0x00004000) == 0x00000000 l0000000000450B9C
	// succ:  l0000000000450B90 l0000000000450B9C
l0000000000450B90:
	w1 = Mem0[x0 + 8:word32]
	w1 = w1 | 0x00004000
	Mem0[x0 + 8:word32] = w1
	// succ:  l0000000000450B9C
l0000000000450B9C:
	w24 = w24 & 0x00000003
	branch w24 == 0x00000000 l0000000000450894
	// succ:  l0000000000450BA4 l0000000000450894
l0000000000450BA4:
	w1 = Mem0[x0 + 8:word32]
	w1 = w1 | 0x00000002
	Mem0[x0 + 8:word32] = w1
	goto l0000000000450894
	// succ:  l0000000000450894
l0000000000450FE8:
	v48 = Mem0[x19 + 1:byte]
	w1 = (word32) v48
	branch w1 != 0x00000000 l00000000004508A8
	// succ:  l0000000000450FF0 l00000000004508A8
l0000000000450FF0:
	w1 = Mem0[x0 + 8:word32]
	w1 = w1 | 0x00040000
	Mem0[x0 + 8:word32] = w1
	goto l00000000004508A8
	// succ:  l00000000004508A8
fn000000000044FA70_exit:


// expand_prompt_string
// Return size: 0
void expand_prompt_string()
expand_prompt_string_entry:
	// succ:  l00000000004514C0
l00000000004514C0:
	sp = fp
	sp = sp + -64
	Mem0[sp:word64] = x29
	sp = sp + 8
	Mem0[sp:word64] = x30
	x29 = x31 + 0x0000000000000000
	v8 = sp + 16
	Mem0[v8:word64] = x19
	v8 = v8 + 8
	Mem0[v8:word64] = x20
	v11 = sp + 32
	Mem0[v11:word64] = x21
	v11 = v11 + 8
	Mem0[v11:word64] = x22
	x20 = x0
	w19 = w1
	branch x0 == 0x0000000000000000 l00000000004515AC
	// succ:  l00000000004514DC l00000000004515AC
l00000000004514DC:
	v16 = Mem0[x0:byte]
	w3 = (word32) v16
	branch w3 == 0x00000000 l00000000004515AC
	// succ:  l00000000004514E4 l00000000004515AC
l00000000004514E4:
	x22 = 0x00000000004AD000
	Mem0[x29 + 56:word32] = w2
	x22 = x22 + 0xFFFFFFFFFFFFFA20
	strlen(x0)
	sp = sp + 0xFFFFFFFFFFFFFFF8
	w2 = 0x00000CF5
	x1 = x22
	x0 = x0 + 0x0000000000000001
	call sh_xmalloc (retsize: 0;)
	x1 = x20
	strcpy(x0, x1)
	sp = sp + 0xFFFFFFFFFFFFFFF8
	x3 = 0x0000000000000000
	x21 = 0x00000000004E1000
	x21 = x21 + 0x0000000000000008
	Mem0[x29 + 48:word64] = x0
	w1 = w19
	w5 = 0x00000001
	x0 = x29 + 0x0000000000000030
	w2 = 0x00000000
	x4 = x3
	Mem0[x21 + 4:word32] = w5
	call fn000000000044FA70 (retsize: 0;)
	x19 = x0
	x0 = x21 + 0x0000000000000070
	Mem0[x21 + 4:word32] = 0x00000000
	x31 = x19 - x0
	NZCV = cond(x31)
	branch Test(EQ,Z) l00000000004515C0
	// succ:  l000000000045154C l00000000004515C0
l000000000045154C:
	x21 = x21 + 0x0000000000000060
	x31 = x19 - x21
	NZCV = cond(x31)
	branch Test(EQ,Z) l00000000004515C0
	// succ:  l0000000000451558 l00000000004515C0
l0000000000451558:
	x0 = Mem0[x29 + 48:word64]
	branch x0 == 0x0000000000000000 l000000000045156C
	// succ:  l0000000000451560 l000000000045156C
l0000000000451560:
	x1 = x22
	w2 = 0x00000D00
	call sh_xfree (retsize: 0;)
	// succ:  l000000000045156C
l000000000045156C:
	branch x19 == 0x0000000000000000 l00000000004515AC
	// succ:  l0000000000451570 l00000000004515AC
l0000000000451570:
	x0 = Mem0[x19 + 8:word64]
	branch x0 == 0x0000000000000000 l0000000000451590
	// succ:  l0000000000451578 l0000000000451590
l0000000000451578:
	x0 = Mem0[x0:word64]
	call remove_quoted_nulls (retsize: 0;)
	x0 = Mem0[x19 + 8:word64]
	w1 = Mem0[x0 + 8:word32]
	w1 = w1 & 0xFFFBFFFF
	Mem0[x0 + 8:word32] = w1
	// succ:  l0000000000451590
l0000000000451590:
	x0 = x19
	call dequote_list (retsize: 0;)
	x0 = x19
	v28 = sp + 32
	x21 = Mem0[v28:word64]
	v28 = v28 + 8
	x22 = Mem0[v28:word64]
	v29 = sp + 16
	x19 = Mem0[v29:word64]
	v29 = v29 + 8
	x20 = Mem0[v29:word64]
	x29 = Mem0[sp:word64]
	sp = sp + 8
	x30 = Mem0[sp:word64]
	sp = sp + 64
	return
	// succ:  expand_prompt_string_exit
l00000000004515AC:
	x0 = 0x0000000000000000
	v24 = sp + 16
	x19 = Mem0[v24:word64]
	v24 = v24 + 8
	x20 = Mem0[v24:word64]
	v25 = sp + 32
	x21 = Mem0[v25:word64]
	v25 = v25 + 8
	x22 = Mem0[v25:word64]
	x29 = Mem0[sp:word64]
	sp = sp + 8
	x30 = Mem0[sp:word64]
	sp = sp + 64
	return
	// succ:  expand_prompt_string_exit
l00000000004515C0:
	x0 = x20
	call make_bare_word (retsize: 0;)
	x1 = 0x0000000000000000
	call make_word_list (retsize: 0;)
	v26 = sp + 16
	x19 = Mem0[v26:word64]
	v26 = v26 + 8
	x20 = Mem0[v26:word64]
	v27 = sp + 32
	x21 = Mem0[v27:word64]
	v27 = v27 + 8
	x22 = Mem0[v27:word64]
	x29 = Mem0[sp:word64]
	sp = sp + 8
	x30 = Mem0[sp:word64]
	sp = sp + 64
	return
	// succ:  expand_prompt_string_exit
expand_prompt_string_exit:


// fn00000000004515E0
// Return size: 0
void fn00000000004515E0()
fn00000000004515E0_entry:
	// succ:  l00000000004515E0
l00000000004515E0:
	sp = fp
	sp = sp + -32
	Mem0[sp:word64] = x29
	sp = sp + 8
	Mem0[sp:word64] = x30
	x29 = x31 + 0x0000000000000000
	x4 = 0x0000000000000000
	Mem0[sp + 16:word64] = x19
	x19 = x0
	call fn000000000044FA70 (retsize: 0;)
	x2 = 0x00000000004E1000
	x2 = x2 + 0x0000000000000008
	x3 = x2 + 0x0000000000000070
	x31 = x0 - x3
	NZCV = cond(x31)
	branch Test(EQ,Z) l0000000000451624
	// succ:  l000000000045160C l0000000000451624
l000000000045160C:
	x2 = x2 + 0x0000000000000060
	x31 = x0 - x2
	NZCV = cond(x31)
	branch Test(EQ,Z) l000000000045163C
	// succ:  l0000000000451618 l000000000045163C
l0000000000451618:
	x19 = Mem0[sp + 16:word64]
	x29 = Mem0[sp:word64]
	sp = sp + 8
	x30 = Mem0[sp:word64]
	sp = sp + 32
	return
	// succ:  fn00000000004515E0_exit
l0000000000451624:
	x0 = 0x00000000004E3000
	Mem0[x19:word64] = 0x0000000000000000
	w1 = 0x00000001
	Mem0[x0 + 1200:word32] = w1
	w0 = 0x00000002
	call fn0000000000445090 (retsize: 0;)
	// succ:  l000000000045163C
l000000000045163C:
	w0 = 0x00000001
	Mem0[x19:word64] = 0x0000000000000000
	x1 = 0x00000000004E3000
	Mem0[x1 + 1200:word32] = w0
	call fn0000000000445090 (retsize: 0;)
	sp = sp + -128
	Mem0[sp:word64] = x29
	sp = sp + 8
	Mem0[sp:word64] = x30
	x29 = x31 + 0x0000000000000000
	v18 = sp + 48
	Mem0[v18:word64] = x23
	v18 = v18 + 8
	Mem0[v18:word64] = x24
	v21 = sp + 64
	Mem0[v21:word64] = x25
	v21 = v21 + 8
	Mem0[v21:word64] = x26
	v24 = sp + 80
	Mem0[v24:word64] = x27
	v24 = v24 + 8
	Mem0[v24:word64] = x28
	v26 = sp + 16
	Mem0[v26:word64] = x19
	v26 = v26 + 8
	Mem0[v26:word64] = x20
	v29 = sp + 32
	Mem0[v29:word64] = x21
	v29 = v29 + 8
	Mem0[v29:word64] = x22
	w28 = w3 & 0x00000003
	NZ = cond(w28)
	C = false
	V = false
	w23 = w3
	x21 = x1
	x27 = x0
	w25 = w2
	x26 = x4
	x24 = x5
	x20 = x1
	branch Test(EQ,Z) l0000000000451698
	// succ:  l0000000000451690 l0000000000451698
l0000000000451690:
	v39 = Mem0[x1:byte]
	w0 = (word32) v39
	branch w0 != 0x00000000 l00000000004518A8
	// succ:  l0000000000451698 l00000000004518A8
l0000000000451698:
	call alloc_word_desc (retsize: 0;)
	Mem0[x29 + 112:word32] = 0x00000000
	x22 = x0
	v40 = Mem0[x20:byte]
	w0 = (word32) v40
	x19 = 0x0000000000000000
	branch w0 != 0x00000000 l0000000000451844
	// succ:  l00000000004516B0 l0000000000451844
l00000000004516B0:
	branch x24 == 0x0000000000000000 l00000000004516C4
	// succ:  l00000000004516B4 l00000000004516C4
l00000000004516B4:
	w1 = Mem0[x29 + 112:word32]
	w0 = 0x00000001
	branch w1 == 0x00000000 l0000000000451824
	// succ:  l00000000004516C0 l0000000000451824
l00000000004516C0:
	Mem0[x24:word32] = w0
	// succ:  l00000000004516C4
l00000000004516C4:
	x31 = x20 - x21
	NZCV = cond(x31)
	branch Test(EQ,Z) l00000000004516E0
	// succ:  l00000000004516CC l00000000004516E0
l00000000004516CC:
	x1 = 0x00000000004AD000
	x0 = x20
	x1 = x1 + 0xFFFFFFFFFFFFFA20
	w2 = 0x000016A9
	call sh_xfree (retsize: 0;)
	// succ:  l00000000004516E0
l00000000004516E0:
	branch x19 == 0x0000000000000000 l000000000045186C
	// succ:  l00000000004516E4 l000000000045186C
l00000000004516E4:
	w0 = Mem0[x29 + 112:word32]
	branch w0 != 0x00000000 l00000000004516F4
	// succ:  l00000000004516EC l00000000004516F4
l00000000004516EC:
	x0 = Mem0[x19:word64]
	branch x0 == 0x0000000000000000 l0000000000451930
	// succ:  l00000000004516F4 l0000000000451930
l00000000004516F4:
	x0 = x19
	call string_list_dollar_star (retsize: 0;)
	x20 = x0
	// succ:  l0000000000451700
l0000000000451700:
	branch x26 == 0x0000000000000000 l00000000004518DC
	// succ:  l0000000000451704 l00000000004518DC
l0000000000451704:
	w0 = Mem0[x29 + 112:word32]
	branch w0 == 0x00000000 l00000000004517D0
	// succ:  l000000000045170C l00000000004517D0
l000000000045170C:
	branch w23 == 0x00000000 l00000000004517D0
	// succ:  l0000000000451710 l00000000004517D0
l0000000000451710:
	x0 = Mem0[x19:word64]
	// succ:  l0000000000451714
l0000000000451714:
	w1 = 0x00000001
	Mem0[x26:word32] = w1
	// succ:  l000000000045171C
l000000000045171C:
	branch x0 == 0x0000000000000000 l00000000004517D8
	// succ:  l0000000000451720 l00000000004517D8
l0000000000451720:
	x0 = x19
	call dispose_words (retsize: 0;)
	// succ:  l0000000000451728
l0000000000451728:
	w31 = w25 - 0x0000002B
	NZCV = cond(w31)
	branch Test(EQ,Z) l0000000000451884
	// succ:  l0000000000451730 l0000000000451884
l0000000000451730:
	w31 = w25 - 0x0000002D
	NZCV = cond(w31)
	branch Test(EQ,Z) l0000000000451884
	// succ:  l0000000000451738 l0000000000451884
l0000000000451738:
	branch x20 == 0x0000000000000000 l00000000004518E4
	// succ:  l000000000045173C l00000000004518E4
l000000000045173C:
	x0 = x20
	strlen(x0)
	sp = sp + 0xFFFFFFFFFFFFFFF8
	x19 = 0x00000000004AD000
	w2 = 0x000016D7
	x1 = x19 + 0xFFFFFFFFFFFFFA20
	x0 = x0 + 0x0000000000000001
	call sh_xmalloc (retsize: 0;)
	x1 = x20
	strcpy(x0, x1)
	sp = sp + 0xFFFFFFFFFFFFFFF8
	x23 = x0
	// succ:  l0000000000451764
l0000000000451764:
	x0 = x23
	call dequote_string (retsize: 0;)
	x1 = x19 + 0xFFFFFFFFFFFFFA20
	w2 = 0x000016D9
	x21 = x0
	x0 = x23
	call sh_xfree (retsize: 0;)
	x0 = x27
	call valid_array_reference (retsize: 0;)
	w2 = w0
	x1 = x21
	x0 = x27
	branch w2 != 0x00000000 l0000000000451838
	// succ:  l0000000000451798 l0000000000451838
l0000000000451798:
	call bind_variable (retsize: 0;)
	// succ:  l000000000045179C
l000000000045179C:
	x0 = x20
	x1 = x19 + 0xFFFFFFFFFFFFFA20
	w2 = 0x000016E2
	call sh_xfree (retsize: 0;)
	Mem0[x22:word64] = x21
	x0 = x22
	v43 = sp + 16
	x19 = Mem0[v43:word64]
	v43 = v43 + 8
	x20 = Mem0[v43:word64]
	v44 = sp + 32
	x21 = Mem0[v44:word64]
	v44 = v44 + 8
	x22 = Mem0[v44:word64]
	v45 = sp + 48
	x23 = Mem0[v45:word64]
	v45 = v45 + 8
	x24 = Mem0[v45:word64]
	v46 = sp + 64
	x25 = Mem0[v46:word64]
	v46 = v46 + 8
	x26 = Mem0[v46:word64]
	v47 = sp + 80
	x27 = Mem0[v47:word64]
	v47 = v47 + 8
	x28 = Mem0[v47:word64]
	x29 = Mem0[sp:word64]
	sp = sp + 8
	x30 = Mem0[sp:word64]
	sp = sp + 128
	return
	// succ:  fn00000000004515E0_exit
l00000000004517D0:
	x0 = Mem0[x19:word64]
	branch x0 != 0x0000000000000000 l0000000000451714
	// succ:  l00000000004517D8 l0000000000451714
l00000000004517D8:
	branch w28 == 0x00000000 l0000000000451720
	// succ:  l00000000004517DC l0000000000451720
l00000000004517DC:
	v55 = Mem0[x20:byte]
	w0 = (word32) v55
	w31 = w0 - 0x0000007F
	NZCV = cond(w31)
	branch Test(NE,Z) l0000000000451720
	// succ:  l00000000004517E8 l0000000000451720
l00000000004517E8:
	v56 = Mem0[x20 + 1:byte]
	w0 = (word32) v56
	branch w0 != 0x00000000 l0000000000451720
	// succ:  l00000000004517F0 l0000000000451720
l00000000004517F0:
	x1 = Mem0[x19 + 8:word64]
	x0 = Mem0[x1:word64]
	v57 = Mem0[x0:byte]
	w2 = (word32) v57
	w31 = w2 - 0x0000007F
	NZCV = cond(w31)
	branch Test(NE,Z) l0000000000451720
	// succ:  l0000000000451804 l0000000000451720
l0000000000451804:
	v58 = Mem0[x0 + 1:byte]
	w0 = (word32) v58
	branch w0 != 0x00000000 l0000000000451720
	// succ:  l000000000045180C l0000000000451720
l000000000045180C:
	w0 = Mem0[x1 + 8:word32]
	branch (w0 & 0x00000000) == 0x00000000 l0000000000451720
	// succ:  l0000000000451814 l0000000000451720
l0000000000451814:
	w0 = Mem0[x22 + 8:word32]
	w0 = w0 | 0x00040000
	Mem0[x22 + 8:word32] = w0
	goto l0000000000451720
	// succ:  l0000000000451720
l0000000000451824:
	branch x19 == 0x0000000000000000 l0000000000451830
	// succ:  l0000000000451828 l0000000000451830
l0000000000451828:
	x1 = Mem0[x19:word64]
	branch x1 != 0x0000000000000000 l00000000004516C0
	// succ:  l0000000000451830 l00000000004516C0
l0000000000451830:
	w0 = 0x00000000
	goto l00000000004516C0
	// succ:  l00000000004516C0
l0000000000451838:
	w2 = 0x00000000
	call assign_array_element (retsize: 0;)
	goto l000000000045179C
	// succ:  l000000000045179C
l0000000000451844:
	x3 = x29 + 0x0000000000000060
	w4 = 0x00000040
	Mem0[x3:word64] = x20
	x3 = x3 + 16
	x0 = x29 + 0x0000000000000060
	w1 = w23
	w2 = 0x00000001
	Mem0[x29 + 104:word32] = w4
	call fn00000000004515E0 (retsize: 0;)
	x19 = x0
	goto l00000000004516B0
	// succ:  l00000000004516B0
l000000000045186C:
	branch w28 != 0x00000000 l0000000000451910
	// succ:  l0000000000451870 l0000000000451910
l0000000000451870:
	w31 = w25 - 0x0000002B
	NZCV = cond(w31)
	branch Test(EQ,Z) l0000000000451880
	// succ:  l0000000000451878 l0000000000451880
l0000000000451878:
	w31 = w25 - 0x0000002D
	NZCV = cond(w31)
	branch Test(NE,Z) l00000000004518E4
	// succ:  l0000000000451880 l00000000004518E4
l0000000000451880:
	x20 = 0x0000000000000000
	// succ:  l0000000000451884
l0000000000451884:
	Mem0[x22:word64] = x20
	x0 = x22
	v50 = sp + 16
	x19 = Mem0[v50:word64]
	v50 = v50 + 8
	x20 = Mem0[v50:word64]
	v51 = sp + 32
	x21 = Mem0[v51:word64]
	v51 = v51 + 8
	x22 = Mem0[v51:word64]
	v52 = sp + 48
	x23 = Mem0[v52:word64]
	v52 = v52 + 8
	x24 = Mem0[v52:word64]
	v53 = sp + 64
	x25 = Mem0[v53:word64]
	v53 = v53 + 8
	x26 = Mem0[v53:word64]
	v54 = sp + 80
	x27 = Mem0[v54:word64]
	v54 = v54 + 8
	x28 = Mem0[v54:word64]
	x29 = Mem0[sp:word64]
	sp = sp + 8
	x30 = Mem0[sp:word64]
	sp = sp + 128
	return
	// succ:  fn00000000004515E0_exit
l00000000004518A8:
	x1 = x29 + 0x0000000000000060
	x1 = x1 + 16
	Mem0[x1:word32] = 0x00000000
	w2 = 0x00000001
	x0 = x21
	call fn0000000000447728 (retsize: 0;)
	x20 = x0
	call alloc_word_desc (retsize: 0;)
	Mem0[x29 + 112:word32] = 0x00000000
	x22 = x0
	v48 = Mem0[x20:byte]
	w0 = (word32) v48
	x19 = 0x0000000000000000
	branch w0 == 0x00000000 l00000000004516B0
	// succ:  l00000000004518D8 l00000000004516B0
l00000000004518D8:
	goto l0000000000451844
	// succ:  l0000000000451844
l00000000004518DC:
	x0 = Mem0[x19:word64]
	goto l000000000045171C
	// succ:  l000000000045171C
l00000000004518E4:
	x19 = 0x00000000004AD000
	x1 = x19 + 0xFFFFFFFFFFFFFA20
	x0 = 0x0000000000000001
	w2 = 0x000016D7
	call sh_xmalloc (retsize: 0;)
	x1 = 0x00000000004AC000
	v49 = Mem0[x1 + 1120:byte]
	w1 = (word32) v49
	x23 = x0
	Mem0[x0:byte] = (byte) w1
	x20 = 0x0000000000000000
	goto l0000000000451764
	// succ:  l0000000000451764
l0000000000451910:
	w0 = Mem0[x29 + 112:word32]
	branch w0 == 0x00000000 l0000000000451870
	// succ:  l0000000000451918 l0000000000451870
l0000000000451918:
	call fn0000000000446080 (retsize: 0;)
	x20 = x0
	w0 = Mem0[x22 + 8:word32]
	w0 = w0 | 0x00040000
	Mem0[x22 + 8:word32] = w0
	goto l0000000000451728
	// succ:  l0000000000451728
l0000000000451930:
	x1 = 0x00000000004BE000
	x0 = x19
	x1 = x1 + 0x0000000000000330
	call string_list_internal (retsize: 0;)
	x20 = x0
	goto l0000000000451700
	// succ:  l0000000000451700
fn00000000004515E0_exit:


// expand_word_leave_quoted
// Return size: 0
void expand_word_leave_quoted()
expand_word_leave_quoted_entry:
	// succ:  l0000000000451948
l0000000000451948:
	sp = fp
	sp = sp + -32
	Mem0[sp:word64] = x29
	sp = sp + 8
	Mem0[sp:word64] = x30
	x29 = x31 + 0x0000000000000000
	Mem0[sp + 16:word64] = x19
	x2 = 0x00000000004E3000
	x19 = 0x00000000004E1000
	x3 = x19 + 0x0000000000000008
	w4 = 0x00000001
	v11 = Mem0[x2 + 1312:byte]
	w2 = (word32) v11
	Mem0[x3:word32] = w4
	branch w2 != 0x00000000 l00000000004519A0
	// succ:  l0000000000451970 l00000000004519A0
l0000000000451970:
	w2 = Mem0[x0 + 8:word32]
	w2 = w2 | 0x00000010
	// succ:  l0000000000451978
l0000000000451978:
	w2 = w2 | 0x00000040
	Mem0[x0 + 8:word32] = w2
	x3 = 0x0000000000000000
	w2 = 0x00000000
	call fn00000000004515E0 (retsize: 0;)
	x19 = x19 + 0x0000000000000008
	Mem0[x19:word32] = 0x00000000
	x19 = Mem0[sp + 16:word64]
	x29 = Mem0[sp:word64]
	sp = sp + 8
	x30 = Mem0[sp:word64]
	sp = sp + 32
	return
	// succ:  expand_word_leave_quoted_exit
l00000000004519A0:
	w2 = Mem0[x0 + 8:word32]
	goto l0000000000451978
	// succ:  l0000000000451978
expand_word_leave_quoted_exit:


// expand_word_unsplit
// Return size: 0
void expand_word_unsplit()
expand_word_unsplit_entry:
	// succ:  l00000000004519A8
l00000000004519A8:
	sp = fp
	sp = sp + -32
	Mem0[sp:word64] = x29
	sp = sp + 8
	Mem0[sp:word64] = x30
	x29 = x31 + 0x0000000000000000
	Mem0[sp + 16:word64] = x19
	x2 = 0x00000000004E3000
	x19 = 0x00000000004E1000
	x3 = x19 + 0x0000000000000008
	w4 = 0x00000001
	v11 = Mem0[x2 + 1312:byte]
	w2 = (word32) v11
	Mem0[x3:word32] = w4
	branch w2 == 0x00000000 l0000000000451A00
	// succ:  l00000000004519D0 l0000000000451A00
l00000000004519D0:
	w2 = Mem0[x0 + 8:word32]
	x3 = 0x0000000000000000
	w2 = w2 | 0x00000040
	Mem0[x0 + 8:word32] = w2
	x19 = x19 + 0x0000000000000008
	w2 = 0x00000000
	call fn00000000004515E0 (retsize: 0;)
	Mem0[x19:word32] = 0x00000000
	branch x0 == 0x0000000000000000 l0000000000451A28
	// succ:  l00000000004519F4 l0000000000451A28
l00000000004519F4:
	x19 = Mem0[sp + 16:word64]
	x29 = Mem0[sp:word64]
	sp = sp + 8
	x30 = Mem0[sp:word64]
	sp = sp + 32
	// succ:  l00000000004519FC_thunk_dequote_list
l00000000004519FC_thunk_dequote_list:
	call dequote_list (retsize: 0;)
	return
	// succ:  expand_word_unsplit_exit
l0000000000451A00:
	w2 = Mem0[x0 + 8:word32]
	x3 = 0x0000000000000000
	w2 = w2 | 0x00000010
	w2 = w2 | 0x00000040
	Mem0[x0 + 8:word32] = w2
	x19 = x19 + 0x0000000000000008
	w2 = 0x00000000
	call fn00000000004515E0 (retsize: 0;)
	Mem0[x19:word32] = 0x00000000
	branch x0 != 0x0000000000000000 l00000000004519F4
	// succ:  l0000000000451A28 l00000000004519F4
l0000000000451A28:
	x19 = Mem0[sp + 16:word64]
	x29 = Mem0[sp:word64]
	sp = sp + 8
	x30 = Mem0[sp:word64]
	sp = sp + 32
	return
	// succ:  expand_word_unsplit_exit
expand_word_unsplit_exit:


// expand_string_assignment
// Return size: 0
void expand_string_assignment()
expand_string_assignment_entry:
	// succ:  l0000000000451A34
l0000000000451A34:
	sp = fp
	sp = sp + -64
	Mem0[sp:word64] = x29
	sp = sp + 8
	Mem0[sp:word64] = x30
	x29 = x31 + 0x0000000000000000
	v8 = sp + 16
	Mem0[v8:word64] = x19
	v8 = v8 + 8
	Mem0[v8:word64] = x20
	v11 = sp + 32
	Mem0[v11:word64] = x21
	v11 = v11 + 8
	Mem0[v11:word64] = x22
	x19 = x0
	w22 = w1
	branch x0 == 0x0000000000000000 l0000000000451B0C
	// succ:  l0000000000451A50 l0000000000451B0C
l0000000000451A50:
	v16 = Mem0[x0:byte]
	w2 = (word32) v16
	branch w2 == 0x00000000 l0000000000451B0C
	// succ:  l0000000000451A58 l0000000000451B0C
l0000000000451A58:
	x20 = 0x00000000004E1000
	w2 = 0x00000001
	x1 = x20 + 0x0000000000000008
	Mem0[x1:word32] = w2
	x21 = 0x00000000004AD000
	w1 = 0x00000800
	Mem0[x29 + 56:word32] = w1
	x21 = x21 + 0xFFFFFFFFFFFFFA20
	strlen(x0)
	sp = sp + 0xFFFFFFFFFFFFFFF8
	w2 = 0x00000CD1
	x1 = x21
	x0 = x0 + 0x0000000000000001
	call sh_xmalloc (retsize: 0;)
	x1 = x19
	strcpy(x0, x1)
	sp = sp + 0xFFFFFFFFFFFFFFF8
	Mem0[x29 + 48:word64] = x0
	w1 = w22
	x0 = x29 + 0x0000000000000030
	w2 = 0x00000000
	x3 = 0x0000000000000000
	call fn00000000004515E0 (retsize: 0;)
	x19 = x0
	x0 = Mem0[x29 + 48:word64]
	branch x0 == 0x0000000000000000 l0000000000451AC4
	// succ:  l0000000000451AB8 l0000000000451AC4
l0000000000451AB8:
	x1 = x21
	w2 = 0x00000CD3
	call sh_xfree (retsize: 0;)
	// succ:  l0000000000451AC4
l0000000000451AC4:
	x20 = x20 + 0x0000000000000008
	Mem0[x20:word32] = 0x00000000
	branch x19 == 0x0000000000000000 l0000000000451B0C
	// succ:  l0000000000451AD0 l0000000000451B0C
l0000000000451AD0:
	x0 = Mem0[x19 + 8:word64]
	branch x0 == 0x0000000000000000 l0000000000451AF0
	// succ:  l0000000000451AD8 l0000000000451AF0
l0000000000451AD8:
	x0 = Mem0[x0:word64]
	call remove_quoted_nulls (retsize: 0;)
	x0 = Mem0[x19 + 8:word64]
	w1 = Mem0[x0 + 8:word32]
	w1 = w1 & 0xFFFBFFFF
	Mem0[x0 + 8:word32] = w1
	// succ:  l0000000000451AF0
l0000000000451AF0:
	x0 = x19
	call dequote_list (retsize: 0;)
	x0 = x19
	v21 = sp + 32
	x21 = Mem0[v21:word64]
	v21 = v21 + 8
	x22 = Mem0[v21:word64]
	v22 = sp + 16
	x19 = Mem0[v22:word64]
	v22 = v22 + 8
	x20 = Mem0[v22:word64]
	x29 = Mem0[sp:word64]
	sp = sp + 8
	x30 = Mem0[sp:word64]
	sp = sp + 64
	return
	// succ:  expand_string_assignment_exit
l0000000000451B0C:
	x0 = 0x0000000000000000
	v19 = sp + 16
	x19 = Mem0[v19:word64]
	v19 = v19 + 8
	x20 = Mem0[v19:word64]
	v20 = sp + 32
	x21 = Mem0[v20:word64]
	v20 = v20 + 8
	x22 = Mem0[v20:word64]
	x29 = Mem0[sp:word64]
	sp = sp + 8
	x30 = Mem0[sp:word64]
	sp = sp + 64
	return
	// succ:  expand_string_assignment_exit
expand_string_assignment_exit:


// expand_assignment_string_to_string
// Return size: 0
void expand_assignment_string_to_string()
expand_assignment_string_to_string_entry:
	// succ:  l0000000000451B20
l0000000000451B20:
	sp = fp
	sp = sp + -32
	Mem0[sp:word64] = x29
	sp = sp + 8
	Mem0[sp:word64] = x30
	x29 = x31 + 0x0000000000000000
	v8 = sp + 16
	Mem0[v8:word64] = x19
	v8 = v8 + 8
	Mem0[v8:word64] = x20
	branch x0 == 0x0000000000000000 l0000000000451B6C
	// succ:  l0000000000451B30 l0000000000451B6C
l0000000000451B30:
	v11 = Mem0[x0:byte]
	w2 = (word32) v11
	branch w2 == 0x00000000 l0000000000451B6C
	// succ:  l0000000000451B38 l0000000000451B6C
l0000000000451B38:
	call expand_string_assignment (retsize: 0;)
	x19 = x0
	branch x0 == 0x0000000000000000 l0000000000451B6C
	// succ:  l0000000000451B44 l0000000000451B6C
l0000000000451B44:
	x1 = 0x00000000004BE000
	x1 = x1 + 0x0000000000000330
	call string_list_internal (retsize: 0;)
	x20 = x0
	x0 = x19
	call dispose_words (retsize: 0;)
	x0 = x20
	v13 = sp + 16
	x19 = Mem0[v13:word64]
	v13 = v13 + 8
	x20 = Mem0[v13:word64]
	x29 = Mem0[sp:word64]
	sp = sp + 8
	x30 = Mem0[sp:word64]
	sp = sp + 32
	return
	// succ:  expand_assignment_string_to_string_exit
l0000000000451B6C:
	x0 = 0x0000000000000000
	v14 = sp + 16
	x19 = Mem0[v14:word64]
	v14 = v14 + 8
	x20 = Mem0[v14:word64]
	x29 = Mem0[sp:word64]
	sp = sp + 8
	x30 = Mem0[sp:word64]
	sp = sp + 32
	return
	// succ:  expand_assignment_string_to_string_exit
expand_assignment_string_to_string_exit:


// fn0000000000452278
// Return size: 0
void fn0000000000452278()
fn0000000000452278_entry:
	// succ:  l0000000000452278
l0000000000452278:
	sp = fp
	sp = sp + -64
	Mem0[sp:word64] = x29
	sp = sp + 8
	Mem0[sp:word64] = x30
	x29 = x31 + 0x0000000000000000
	v8 = sp + 16
	Mem0[v8:word64] = x19
	v8 = v8 + 8
	Mem0[v8:word64] = x20
	Mem0[sp + 32:word64] = x21
	x19 = x0
	w21 = w1
	branch x0 == 0x0000000000000000 l0000000000452308
	// succ:  l0000000000452294 l0000000000452308
l0000000000452294:
	v14 = Mem0[x0:byte]
	w2 = (word32) v14
	branch w2 == 0x00000000 l000000000045231C
	// succ:  l000000000045229C l000000000045231C
l000000000045229C:
	x20 = 0x00000000004AD000
	Mem0[x29 + 56:word32] = 0x00000000
	x20 = x20 + 0xFFFFFFFFFFFFFA20
	strlen(x0)
	sp = sp + 0xFFFFFFFFFFFFFFF8
	w2 = 0x00000C9B
	x1 = x20
	x0 = x0 + 0x0000000000000001
	call sh_xmalloc (retsize: 0;)
	x1 = x19
	strcpy(x0, x1)
	sp = sp + 0xFFFFFFFFFFFFFFF8
	Mem0[x29 + 48:word64] = x0
	w1 = w21
	x0 = x29 + 0x0000000000000030
	w2 = 0x00000000
	x3 = 0x0000000000000000
	call fn00000000004515E0 (retsize: 0;)
	x19 = x0
	x0 = Mem0[x29 + 48:word64]
	branch x0 == 0x0000000000000000 l0000000000452308
	// succ:  l00000000004522E8 l0000000000452308
l00000000004522E8:
	x1 = x20
	w2 = 0x00000C9F
	call sh_xfree (retsize: 0;)
	x0 = x19
	x21 = Mem0[sp + 32:word64]
	v17 = sp + 16
	x19 = Mem0[v17:word64]
	v17 = v17 + 8
	x20 = Mem0[v17:word64]
	x29 = Mem0[sp:word64]
	sp = sp + 8
	x30 = Mem0[sp:word64]
	sp = sp + 64
	return
	// succ:  fn0000000000452278_exit
l0000000000452308:
	x0 = x19
	x21 = Mem0[sp + 32:word64]
	v18 = sp + 16
	x19 = Mem0[v18:word64]
	v18 = v18 + 8
	x20 = Mem0[v18:word64]
	x29 = Mem0[sp:word64]
	sp = sp + 8
	x30 = Mem0[sp:word64]
	sp = sp + 64
	return
	// succ:  fn0000000000452278_exit
l000000000045231C:
	x0 = 0x0000000000000000
	v19 = sp + 16
	x19 = Mem0[v19:word64]
	v19 = v19 + 8
	x20 = Mem0[v19:word64]
	x21 = Mem0[sp + 32:word64]
	x29 = Mem0[sp:word64]
	sp = sp + 8
	x30 = Mem0[sp:word64]
	sp = sp + 64
	return
	// succ:  fn0000000000452278_exit
fn0000000000452278_exit:


// expand_string_unsplit
// Return size: 0
void expand_string_unsplit()
expand_string_unsplit_entry:
	// succ:  l0000000000452330
l0000000000452330:
	sp = fp
	sp = sp + -32
	Mem0[sp:word64] = x29
	sp = sp + 8
	Mem0[sp:word64] = x30
	x29 = x31 + 0x0000000000000000
	v8 = sp + 16
	Mem0[v8:word64] = x19
	v8 = v8 + 8
	Mem0[v8:word64] = x20
	branch x0 == 0x0000000000000000 l00000000004523A0
	// succ:  l0000000000452340 l00000000004523A0
l0000000000452340:
	v11 = Mem0[x0:byte]
	w2 = (word32) v11
	branch w2 == 0x00000000 l00000000004523A0
	// succ:  l0000000000452348 l00000000004523A0
l0000000000452348:
	x20 = 0x00000000004E1000
	x20 = x20 + 0x0000000000000008
	w2 = 0x00000001
	Mem0[x20:word32] = w2
	call fn0000000000452278 (retsize: 0;)
	Mem0[x20:word32] = 0x00000000
	x19 = x0
	branch x0 == 0x0000000000000000 l00000000004523A0
	// succ:  l0000000000452368 l00000000004523A0
l0000000000452368:
	x0 = Mem0[x0 + 8:word64]
	branch x0 == 0x0000000000000000 l0000000000452388
	// succ:  l0000000000452370 l0000000000452388
l0000000000452370:
	x0 = Mem0[x0:word64]
	call remove_quoted_nulls (retsize: 0;)
	x0 = Mem0[x19 + 8:word64]
	w1 = Mem0[x0 + 8:word32]
	w1 = w1 & 0xFFFBFFFF
	Mem0[x0 + 8:word32] = w1
	// succ:  l0000000000452388
l0000000000452388:
	x0 = x19
	call dequote_list (retsize: 0;)
	x0 = x19
	v14 = sp + 16
	x19 = Mem0[v14:word64]
	v14 = v14 + 8
	x20 = Mem0[v14:word64]
	x29 = Mem0[sp:word64]
	sp = sp + 8
	x30 = Mem0[sp:word64]
	sp = sp + 32
	return
	// succ:  expand_string_unsplit_exit
l00000000004523A0:
	x0 = 0x0000000000000000
	v13 = sp + 16
	x19 = Mem0[v13:word64]
	v13 = v13 + 8
	x20 = Mem0[v13:word64]
	x29 = Mem0[sp:word64]
	sp = sp + 8
	x30 = Mem0[sp:word64]
	sp = sp + 32
	return
	// succ:  expand_string_unsplit_exit
expand_string_unsplit_exit:


// expand_string_unsplit_to_string
// Return size: 0
void expand_string_unsplit_to_string()
expand_string_unsplit_to_string_entry:
	// succ:  l00000000004523B0
l00000000004523B0:
	sp = fp
	sp = sp + -32
	Mem0[sp:word64] = x29
	sp = sp + 8
	Mem0[sp:word64] = x30
	x29 = x31 + 0x0000000000000000
	v8 = sp + 16
	Mem0[v8:word64] = x19
	v8 = v8 + 8
	Mem0[v8:word64] = x20
	branch x0 == 0x0000000000000000 l00000000004523FC
	// succ:  l00000000004523C0 l00000000004523FC
l00000000004523C0:
	v11 = Mem0[x0:byte]
	w2 = (word32) v11
	branch w2 == 0x00000000 l00000000004523FC
	// succ:  l00000000004523C8 l00000000004523FC
l00000000004523C8:
	call expand_string_unsplit (retsize: 0;)
	x19 = x0
	branch x0 == 0x0000000000000000 l00000000004523FC
	// succ:  l00000000004523D4 l00000000004523FC
l00000000004523D4:
	x1 = 0x00000000004BE000
	x1 = x1 + 0x0000000000000330
	call string_list_internal (retsize: 0;)
	x20 = x0
	x0 = x19
	call dispose_words (retsize: 0;)
	x0 = x20
	v13 = sp + 16
	x19 = Mem0[v13:word64]
	v13 = v13 + 8
	x20 = Mem0[v13:word64]
	x29 = Mem0[sp:word64]
	sp = sp + 8
	x30 = Mem0[sp:word64]
	sp = sp + 32
	return
	// succ:  expand_string_unsplit_to_string_exit
l00000000004523FC:
	x0 = 0x0000000000000000
	v14 = sp + 16
	x19 = Mem0[v14:word64]
	v14 = v14 + 8
	x20 = Mem0[v14:word64]
	x29 = Mem0[sp:word64]
	sp = sp + 8
	x30 = Mem0[sp:word64]
	sp = sp + 32
	return
	// succ:  expand_string_unsplit_to_string_exit
expand_string_unsplit_to_string_exit:


// cond_expand_word
// Return size: 0
void cond_expand_word()
cond_expand_word_entry:
	// succ:  l000000000045240C
l000000000045240C:
	sp = fp
	sp = sp + -48
	Mem0[sp:word64] = x29
	sp = sp + 8
	Mem0[sp:word64] = x30
	x29 = x31 + 0x0000000000000000
	x3 = Mem0[x0:word64]
	v10 = sp + 16
	Mem0[v10:word64] = x19
	v10 = v10 + 8
	Mem0[v10:word64] = x20
	Mem0[sp + 32:word64] = x21
	w20 = w1
	branch x3 == 0x0000000000000000 l00000000004524B0
	// succ:  l0000000000452428 l00000000004524B0
l0000000000452428:
	v14 = Mem0[x3:byte]
	w1 = (word32) v14
	branch w1 == 0x00000000 l00000000004524B0
	// succ:  l0000000000452430 l00000000004524B0
l0000000000452430:
	w3 = Mem0[x0 + 8:word32]
	w1 = 0x00000000
	w3 = w3 | 0x00000040
	Mem0[x0 + 8:word32] = w3
	w2 = w1
	x3 = 0x0000000000000000
	call fn00000000004515E0 (retsize: 0;)
	x19 = x0
	branch x0 == 0x0000000000000000 l00000000004524B0
	// succ:  l0000000000452454 l00000000004524B0
l0000000000452454:
	branch w20 == 0x00000000 l00000000004524C4
	// succ:  l0000000000452458 l00000000004524C4
l0000000000452458:
	x1 = 0x00000000004BE000
	w31 = w20 - 0x00000002
	NZCV = cond(w31)
	x1 = x1 + 0x0000000000000330
	w20 = 0x00000005
l0000000000452494:
	x0 = x19
	call dispose_words (retsize: 0;)
	x0 = x20
	x21 = Mem0[sp + 32:word64]
	v21 = sp + 16
	x19 = Mem0[v21:word64]
	v21 = v21 + 8
	x20 = Mem0[v21:word64]
	x29 = Mem0[sp:word64]
	sp = sp + 8
	x30 = Mem0[sp:word64]
	sp = sp + 48
	return
	// succ:  cond_expand_word_exit
l00000000004524B0:
	x0 = 0x0000000000000000
	v20 = sp + 16
	x19 = Mem0[v20:word64]
	v20 = v20 + 8
	x20 = Mem0[v20:word64]
	x21 = Mem0[sp + 32:word64]
	x29 = Mem0[sp:word64]
	sp = sp + 8
	x30 = Mem0[sp:word64]
	sp = sp + 48
	return
	// succ:  cond_expand_word_exit
l00000000004524C4:
	call dequote_list (retsize: 0;)
	x1 = 0x00000000004BE000
	x0 = x19
	x1 = x1 + 0x0000000000000330
	call string_list_internal (retsize: 0;)
	x20 = x0
	goto l0000000000452494
	// succ:  l0000000000452494
cond_expand_word_exit:


// fn0000000000452594
// Return size: 0
void fn0000000000452594()
fn0000000000452594_entry:
	// succ:  l0000000000452594
l0000000000452594:
	sp = fp
	sp = sp + -96
	Mem0[sp:word64] = x29
	sp = sp + 8
	Mem0[sp:word64] = x30
	x29 = x31 + 0x0000000000000000
	v8 = sp + 16
	Mem0[v8:word64] = x19
	v8 = v8 + 8
	Mem0[v8:word64] = x20
	v11 = sp + 48
	Mem0[v11:word64] = x23
	v11 = v11 + 8
	Mem0[v11:word64] = x24
	v14 = sp + 32
	Mem0[v14:word64] = x21
	v14 = v14 + 8
	Mem0[v14:word64] = x22
	x20 = x4
	x19 = x0
	w22 = w1
	w23 = w2
	w24 = w3
	branch x4 == 0x0000000000000000 l00000000004525C8
	// succ:  l00000000004525C0 l00000000004525C8
l00000000004525C0:
	x0 = 0x8000000000000000
	Mem0[x4:word64] = x0
	// succ:  l00000000004525C8
l00000000004525C8:
	x0 = x19
	x1 = x29 + 0x0000000000000048
	call legal_number (retsize: 0;)
	w21 = w0
	branch w0 != 0x00000000 l00000000004526CC
	// succ:  l00000000004525DC l00000000004526CC
l00000000004525DC:
	x0 = x19
	branch w22 == 0x00000000 l000000000045266C
	// succ:  l00000000004525E4 l000000000045266C
l00000000004525E4:
	x22 = 0x00000000004AD000
	strlen(x0)
	sp = sp + 0xFFFFFFFFFFFFFFF8
	x22 = x22 + 0xFFFFFFFFFFFFFA20
	w2 = 0x0000162A
	x1 = x22
	x0 = x0 + 0x0000000000000002
	call sh_xmalloc (retsize: 0;)
	w1 = 0x00000024
	Mem0[x29 + 64:word32] = w21
	x20 = x0
	Mem0[x0:byte] = (byte) w1
	x0 = x0 + 1
	x1 = x19
	strcpy(x0, x1)
	sp = sp + 0xFFFFFFFFFFFFFFF8
	x3 = 0x0000000000000000
	x1 = x29 + 0x0000000000000040
	w2 = w23
	x0 = x20
	x4 = x3
	x5 = x3
	x6 = x3
	w7 = w24
	call fn000000000044D194 (retsize: 0;)
	x19 = x0
	x1 = x22
	x0 = x20
	w2 = 0x00001630
	call sh_xfree (retsize: 0;)
	branch x19 == 0x0000000000000000 l000000000045282C
	// succ:  l0000000000452654 l000000000045282C
l0000000000452654:
	x0 = x19
	v30 = sp + 32
	x21 = Mem0[v30:word64]
	v30 = v30 + 8
	x22 = Mem0[v30:word64]
	v31 = sp + 16
	x19 = Mem0[v31:word64]
	v31 = v31 + 8
	x20 = Mem0[v31:word64]
	v32 = sp + 48
	x23 = Mem0[v32:word64]
	v32 = v32 + 8
	x24 = Mem0[v32:word64]
	x29 = Mem0[sp:word64]
	sp = sp + 8
	x30 = Mem0[sp:word64]
	sp = sp + 96
	return
	// succ:  fn0000000000452594_exit
l000000000045266C:
	call valid_array_reference (retsize: 0;)
	branch w0 == 0x00000000 l0000000000452740
	// succ:  l0000000000452674 l0000000000452740
l0000000000452674:
	w1 = w23
	x0 = x19
	w2 = w22
	x3 = x29 + 0x0000000000000050
	x4 = x29 + 0x0000000000000040
	call array_value (retsize: 0;)
	w1 = Mem0[x29 + 80:word32]
	x21 = x0
	branch w1 != 0x00000000 l00000000004527A8
	// succ:  l0000000000452698 l00000000004527A8
l0000000000452698:
	branch x0 == 0x0000000000000000 l0000000000452810
	// succ:  l000000000045269C l0000000000452810
l000000000045269C:
	v37 = Mem0[x0:byte]
	w1 = (word32) v37
	branch w1 == 0x00000000 l00000000004526AC
	// succ:  l00000000004526A4 l00000000004526AC
l00000000004526A4:
	w23 = w23 & 0x00000003
	branch w23 != 0x00000000 l0000000000452804
	// succ:  l00000000004526AC l0000000000452804
l00000000004526AC:
	x0 = x21
	call quote_escapes (retsize: 0;)
	x21 = x0
	// succ:  l00000000004526B8
l00000000004526B8:
	w22 = 0x00800000
	branch x20 == 0x0000000000000000 l0000000000452710
	// succ:  l00000000004526C0 l0000000000452710
l00000000004526C0:
	x0 = Mem0[x29 + 64:word64]
	Mem0[x20:word64] = x0
	goto l0000000000452710
	// succ:  l0000000000452710
l00000000004526CC:
	x0 = Mem0[x29 + 72:word64]
	call get_dollar_var_value (retsize: 0;)
	x19 = x0
	branch x0 == 0x0000000000000000 l000000000045279C
	// succ:  l00000000004526DC l000000000045279C
l00000000004526DC:
	v33 = Mem0[x0:byte]
	w1 = (word32) v33
	branch w1 == 0x00000000 l00000000004526EC
	// succ:  l00000000004526E4 l00000000004526EC
l00000000004526E4:
	w23 = w23 & 0x00000003
	branch w23 != 0x00000000 l00000000004527DC
	// succ:  l00000000004526EC l00000000004527DC
l00000000004526EC:
	x0 = x19
	call quote_escapes (retsize: 0;)
	x21 = x0
	// succ:  l00000000004526F8
l00000000004526F8:
	x1 = 0x00000000004AD000
	x0 = x19
	x1 = x1 + 0xFFFFFFFFFFFFFA20
	w2 = 0x00001625
	call sh_xfree (retsize: 0;)
	w22 = 0x00000000
	// succ:  l0000000000452710
l0000000000452710:
	call alloc_word_desc (retsize: 0;)
	x19 = x0
	w0 = Mem0[x0 + 8:word32]
	Mem0[x19:word64] = x21
	w22 = w0 | w22
	Mem0[x19 + 8:word32] = w22
	x0 = x19
	v34 = sp + 32
	x21 = Mem0[v34:word64]
	v34 = v34 + 8
	x22 = Mem0[v34:word64]
	v35 = sp + 16
	x19 = Mem0[v35:word64]
	v35 = v35 + 8
	x20 = Mem0[v35:word64]
	v36 = sp + 48
	x23 = Mem0[v36:word64]
	v36 = v36 + 8
	x24 = Mem0[v36:word64]
	x29 = Mem0[sp:word64]
	sp = sp + 8
	x30 = Mem0[sp:word64]
	sp = sp + 96
	return
	// succ:  fn0000000000452594_exit
l0000000000452740:
	x0 = x19
	call find_variable (retsize: 0;)
	branch x0 == 0x0000000000000000 l000000000045279C
	// succ:  l000000000045274C l000000000045279C
l000000000045274C:
	x1 = Mem0[x0 + 8:word64]
	branch x1 == 0x0000000000000000 l000000000045279C
	// succ:  l0000000000452754 l000000000045279C
l0000000000452754:
	w0 = Mem0[x0 + 40:word32]
	branch (w0 & 0x00001000) == 0x00000000 l000000000045279C
	// succ:  l000000000045275C l000000000045279C
l000000000045275C:
	branch (w0 & 0x00000040) == 0x00000000 l00000000004527E8
	// succ:  l0000000000452760 l00000000004527E8
l0000000000452760:
	branch (w0 & 0x00000004) == 0x00000000 l0000000000452788
	// succ:  l0000000000452764 l0000000000452788
l0000000000452764:
	v44 = Mem0[x1:byte]
	w0 = (word32) v44
	branch w0 == 0x00000000 l0000000000452774
	// succ:  l000000000045276C l0000000000452774
l000000000045276C:
	w23 = w23 & 0x00000003
	branch w23 != 0x00000000 l0000000000452818
	// succ:  l0000000000452774 l0000000000452818
l0000000000452774:
	x0 = x1
	call quote_escapes (retsize: 0;)
	x21 = x0
	w22 = 0x00000000
	goto l0000000000452710
	// succ:  l0000000000452710
l0000000000452788:
	x0 = x1
	x1 = 0x0000000000000000
	call array_reference (retsize: 0;)
	x1 = x0
	branch x1 != 0x0000000000000000 l0000000000452764
	// succ:  l000000000045279C l0000000000452764
l000000000045279C:
	w22 = 0x00000000
	x21 = 0x0000000000000000
	goto l0000000000452710
	// succ:  l0000000000452710
l00000000004527A8:
	w31 = w1 - 0x00000001
	NZCV = cond(w31)
	branch Test(NE,Z) l0000000000452710
	// succ:  l00000000004527B0 l0000000000452710
l00000000004527B0:
	branch x0 == 0x0000000000000000 l000000000045279C
	// succ:  l00000000004527B4 l000000000045279C
l00000000004527B4:
	v42 = Mem0[x0:byte]
	w0 = (word32) v42
	w31 = w0 - 0x0000007F
	NZCV = cond(w31)
	branch Test(NE,Z) l0000000000452710
	// succ:  l00000000004527C0 l0000000000452710
l00000000004527C0:
	v43 = Mem0[x21 + 1:byte]
	w0 = (word32) v43
	branch w0 != 0x00000000 l0000000000452710
	// succ:  l00000000004527C8 l0000000000452710
l00000000004527C8:
	w23 = w23 & 0x00000003
	NZCV = cond(w23 - w31)
	w22 = 0x00040000
l00000000004527DC:
	call quote_string (retsize: 0;)
	x21 = x0
	goto l00000000004526F8
	// succ:  l00000000004526F8
l00000000004527E8:
	x0 = x1
	x1 = 0x00000000004AC000
	x1 = x1 + 0xFFFFFFFFFFFFF988
	call assoc_reference (retsize: 0;)
	x1 = x0
	branch x1 != 0x0000000000000000 l0000000000452764
	// succ:  l0000000000452800 l0000000000452764
l0000000000452800:
	goto l000000000045279C
	// succ:  l000000000045279C
l0000000000452804:
	call quote_string (retsize: 0;)
	x21 = x0
	goto l00000000004526B8
	// succ:  l00000000004526B8
l0000000000452810:
	w22 = w0
	goto l0000000000452710
	// succ:  l0000000000452710
l0000000000452818:
	x0 = x1
	call quote_string (retsize: 0;)
	x21 = x0
	w22 = 0x00000000
	goto l0000000000452710
	// succ:  l0000000000452710
l000000000045282C:
	w22 = w19
	x21 = x19
	goto l0000000000452710
	// succ:  l0000000000452710
fn0000000000452594_exit:


// expand_string_to_string
// Return size: 0
void expand_string_to_string()
expand_string_to_string_entry:
	// succ:  l0000000000452838
l0000000000452838:
	sp = fp
	sp = sp + -32
	Mem0[sp:word64] = x29
	sp = sp + 8
	Mem0[sp:word64] = x30
	x29 = x31 + 0x0000000000000000
	v8 = sp + 16
	Mem0[v8:word64] = x19
	v8 = v8 + 8
	Mem0[v8:word64] = x20
	branch x0 == 0x0000000000000000 l0000000000452884
	// succ:  l0000000000452848 l0000000000452884
l0000000000452848:
	v11 = Mem0[x0:byte]
	w2 = (word32) v11
	branch w2 == 0x00000000 l0000000000452884
	// succ:  l0000000000452850 l0000000000452884
l0000000000452850:
	call expand_string (retsize: 0;)
	x19 = x0
	branch x0 == 0x0000000000000000 l0000000000452884
	// succ:  l000000000045285C l0000000000452884
l000000000045285C:
	x1 = 0x00000000004BE000
	x1 = x1 + 0x0000000000000330
	call string_list_internal (retsize: 0;)
	x20 = x0
	x0 = x19
	call dispose_words (retsize: 0;)
	x0 = x20
	v13 = sp + 16
	x19 = Mem0[v13:word64]
	v13 = v13 + 8
	x20 = Mem0[v13:word64]
	x29 = Mem0[sp:word64]
	sp = sp + 8
	x30 = Mem0[sp:word64]
	sp = sp + 32
	return
	// succ:  expand_string_to_string_exit
l0000000000452884:
	x0 = 0x0000000000000000
	v14 = sp + 16
	x19 = Mem0[v14:word64]
	v14 = v14 + 8
	x20 = Mem0[v14:word64]
	x29 = Mem0[sp:word64]
	sp = sp + 8
	x30 = Mem0[sp:word64]
	sp = sp + 32
	return
	// succ:  expand_string_to_string_exit
expand_string_to_string_exit:


// expand_word
// Return size: 0
void expand_word()
expand_word_entry:
	// succ:  l0000000000452894
l0000000000452894:
	sp = fp
	sp = sp + -32
	Mem0[sp:word64] = x29
	sp = sp + 8
	Mem0[sp:word64] = x30
	x29 = x31 + 0x0000000000000000
	w2 = 0x00000000
	x3 = 0x0000000000000000
	v10 = sp + 16
	Mem0[v10:word64] = x19
	v10 = v10 + 8
	Mem0[v10:word64] = x20
	call fn00000000004515E0 (retsize: 0;)
	x20 = x0
	call fn000000000044D0BC (retsize: 0;)
	x19 = x0
	x0 = x20
	call dispose_words (retsize: 0;)
	x0 = x19
	branch x19 == 0x0000000000000000 l00000000004528D4
	// succ:  l00000000004528C8 l00000000004528D4
l00000000004528C8:
	v12 = sp + 16
	x19 = Mem0[v12:word64]
	v12 = v12 + 8
	x20 = Mem0[v12:word64]
	x29 = Mem0[sp:word64]
	sp = sp + 8
	x30 = Mem0[sp:word64]
	sp = sp + 32
	// succ:  l00000000004528D0_thunk_dequote_list
l00000000004528D0_thunk_dequote_list:
	call dequote_list (retsize: 0;)
	return
	// succ:  expand_word_exit
l00000000004528D4:
	v13 = sp + 16
	x19 = Mem0[v13:word64]
	v13 = v13 + 8
	x20 = Mem0[v13:word64]
	x29 = Mem0[sp:word64]
	sp = sp + 8
	x30 = Mem0[sp:word64]
	sp = sp + 32
	return
	// succ:  expand_word_exit
expand_word_exit:


// fn00000000004528E0
// Return size: 0
void fn00000000004528E0()
fn00000000004528E0_entry:
	// succ:  l00000000004528E0
l00000000004528E0:
	sp = v3
	sp = sp + -176
	Mem0[sp:word64] = x29
	sp = sp + 8
	Mem0[sp:word64] = x30
	x29 = x31 + 0x0000000000000000
	v7 = sp + 16
	Mem0[v7:word64] = x19
	v7 = v7 + 8
	Mem0[v7:word64] = x20
	v10 = sp + 32
	Mem0[v10:word64] = x21
	v10 = v10 + 8
	Mem0[v10:word64] = x22
	v13 = sp + 48
	Mem0[v13:word64] = x23
	v13 = v13 + 8
	Mem0[v13:word64] = x24
	v16 = sp + 64
	Mem0[v16:word64] = x25
	v16 = v16 + 8
	Mem0[v16:word64] = x26
	v19 = sp + 80
	Mem0[v19:word64] = x27
	v19 = v19 + 8
	Mem0[v19:word64] = x28
	Mem0[x29 + 112:word32] = w1
	branch x0 == 0x0000000000000000 l000000000045308C
	// succ:  l0000000000452904 l000000000045308C
l0000000000452904:
	call copy_word_list (retsize: 0;)
	w5 = Mem0[x29 + 112:word32]
	x27 = 0x00000000004E1000
	w5 = w5 & 0x00000001
	x24 = x0
	Mem0[x29 + 144:word32] = w5
	x0 = x27 + 0x0000000000000008
	w5 = Mem0[x29 + 112:word32]
	Mem0[x0 + 40:word64] = x24
	branch (w5 & 0x00000001) == 0x00000000 l0000000000452E18
	// succ:  l000000000045292C l0000000000452E18
l000000000045292C:
	w5 = Mem0[x29 + 112:word32]
	branch (w5 & 0x00000002) == 0x00000000 l0000000000452A9C
	// succ:  l0000000000452934 l0000000000452A9C
l0000000000452934:
	branch x24 == 0x0000000000000000 l0000000000453068
	// succ:  l0000000000452938 l0000000000453068
l0000000000452938:
	x25 = x27 + 0x0000000000000008
	x0 = 0x00000000004AD000
	x20 = x24
	x22 = 0x0000000000000000
	x28 = x0 + 0xFFFFFFFFFFFFFCC8
	x26 = x25 + 0x0000000000000070
	// succ:  l0000000000452950
l0000000000452950:
	x0 = Mem0[x20 + 8:word64]
	w2 = 0xFFFF8000
	w3 = Mem0[x0 + 8:word32]
	w2 = DPB(w2, 0x00000002, 16)
	w2 = w3 & w2
	w31 = w2 - (0x00000028 << 12)
	NZCV = cond(w31)
	x21 = Mem0[x20:word64]
	branch Test(NE,Z) l00000000004529B4
	// succ:  l0000000000452970 l00000000004529B4
l0000000000452970:
	branch (w3 & 0x00000000) == 0x00000000 l0000000000452A4C
	// succ:  l0000000000452974 l0000000000452A4C
l0000000000452974:
	w1 = 0x00000001
	call fn000000000044C21C (retsize: 0;)
	branch w0 == 0x00000000 l0000000000452B9C
	// succ:  l0000000000452980 l0000000000452B9C
l0000000000452980:
	x0 = Mem0[x20 + 8:word64]
	w1 = 0x00000000
	x0 = Mem0[x0:word64]
	call assignment (retsize: 0;)
	x2 = Mem0[x20 + 8:word64]
	w1 = 0x00007FEB
	x2 = Mem0[x2:word64]
	w1 = DPB(w1, 0xFFFFFFBD, 16)
	Mem0[x2 + (int64) ((int32) w0):byte] = 0x00
	x0 = Mem0[x20 + 8:word64]
	w2 = Mem0[x0 + 8:word32]
	w1 = w2 & w1
	Mem0[x0 + 8:word32] = w1
	// succ:  l00000000004529B4
l00000000004529B4:
	x4 = x29 + 0x0000000000000060
	w1 = 0x00000000
	x4 = x4 + 4
	Mem0[x4:word32] = 0x00000000
	w2 = w1
	x3 = x29 + 0x0000000000000060
	call fn000000000044FA70 (retsize: 0;)
	x31 = x0 - x26
	NZCV = cond(x31)
	x19 = x0
	branch Test(EQ,Z) l0000000000452B84
	// succ:  l00000000004529D8 l0000000000452B84
l00000000004529D8:
	x1 = x25 + 0x0000000000000060
	x31 = x0 - x1
	NZCV = cond(x31)
	branch Test(EQ,Z) l0000000000452BB0
	// succ:  l00000000004529E4 l0000000000452BB0
l00000000004529E4:
	w1 = Mem0[x29 + 100:word32]
	branch w1 == 0x00000000 l00000000004529F8
	// succ:  l00000000004529EC l00000000004529F8
l00000000004529EC:
	x1 = Mem0[x20 + 8:word64]
	w1 = Mem0[x1 + 8:word32]
	branch (w1 & 0x00000010) == 0x00000000 l0000000000452A34
	// succ:  l00000000004529F8 l0000000000452A34
l00000000004529F8:
	x0 = x19
	call word_list_remove_quoted_nulls (retsize: 0;)
	// succ:  l0000000000452A00
l0000000000452A00:
	branch x19 == 0x0000000000000000 l0000000000452A18
	// succ:  l0000000000452A04 l0000000000452A18
l0000000000452A04:
	x0 = Mem0[x19:word64]
	branch x0 == 0x0000000000000000 l0000000000452A18
	// succ:  l0000000000452A0C l0000000000452A18
l0000000000452A0C:
	x0 = x19
	call list_reverse (retsize: 0;)
	x19 = x0
	// succ:  l0000000000452A18
l0000000000452A18:
	x1 = x22
	x0 = x19
	call list_append (retsize: 0;)
	x22 = x0
	branch x21 == 0x0000000000000000 l0000000000452BDC
	// succ:  l0000000000452A2C l0000000000452BDC
l0000000000452A2C:
	x20 = x21
	goto l0000000000452950
	// succ:  l0000000000452950
l0000000000452A34:
	call fn000000000044D0BC (retsize: 0;)
	x20 = x0
	x0 = x19
	call dispose_words (retsize: 0;)
	x19 = x20
	goto l0000000000452A00
	// succ:  l0000000000452A00
l0000000000452A4C:
	x0 = Mem0[x0:word64]
	call make_word (retsize: 0;)
	x19 = x0
	x0 = Mem0[x0:word64]
	w1 = 0x00000000
	call assignment (retsize: 0;)
	x2 = Mem0[x19:word64]
	x1 = 0x0000000000000000
	Mem0[x2 + (int64) ((int32) w0):byte] = 0x00
	x0 = x19
	call make_word_list (retsize: 0;)
	x1 = x0
	x0 = x28
	Mem0[x29 + 160:word64] = x1
	call make_word (retsize: 0;)
	x1 = Mem0[x29 + 160:word64]
	call make_word_list (retsize: 0;)
	call declare_builtin (retsize: 0;)
	x0 = Mem0[x20 + 8:word64]
	goto l0000000000452974
	// succ:  l0000000000452974
l0000000000452A9C:
	x0 = 0x00000000004D6000
	w0 = Mem0[x0 + 3300:word32]
	branch w0 == 0x00000000 l0000000000452934
	// succ:  l0000000000452AA8 l0000000000452934
l0000000000452AA8:
	branch x24 == 0x0000000000000000 l0000000000453068
	// succ:  l0000000000452AAC l0000000000453068
l0000000000452AAC:
	Mem0[x29 + 136:word64] = 0x0000000000000000
	x0 = 0x00000000004AD000
	x21 = Mem0[x29 + 136:word64]
	x28 = x0 + 0xFFFFFFFFFFFFFA20
	// succ:  l0000000000452ABC
l0000000000452ABC:
	x0 = Mem0[x24 + 8:word64]
	w1 = 0xFFFF8000
	w2 = Mem0[x0 + 8:word32]
	w1 = DPB(w1, 0x00000002, 16)
	w1 = w2 & w1
	w31 = w1 - (0x00000028 << 12)
	NZCV = cond(w31)
	x23 = Mem0[x24:word64]
	branch Test(EQ,Z) l0000000000452EC4
	// succ:  l0000000000452ADC l0000000000452EC4
l0000000000452ADC:
	x0 = Mem0[x0:word64]
	w1 = 0x0000007B
	call mbschr (retsize: 0;)
	branch x0 == 0x0000000000000000 l0000000000452EC4
	// succ:  l0000000000452AEC l0000000000452EC4
l0000000000452AEC:
	x0 = Mem0[x24 + 8:word64]
	x0 = Mem0[x0:word64]
	call brace_expand (retsize: 0;)
	x19 = Mem0[x0:word64]
	Mem0[x29 + 128:word64] = x0
	branch x19 == 0x0000000000000000 l0000000000452ED8
	// succ:  l0000000000452B04 l0000000000452ED8
l0000000000452B04:
	x5 = Mem0[x29 + 128:word64]
	x3 = 0x00000000004AD000
	x20 = x5 + 0x0000000000000008
	x26 = x5
	Mem0[x29 + 152:word64] = x3
	goto l0000000000452B48
	// succ:  l0000000000452B48
l0000000000452B1C:
	x1 = x21
	x0 = x22
	call make_word_list (retsize: 0;)
	x21 = x0
	x0 = Mem0[x26:word64]
	x1 = x28
	w2 = 0x000023C1
	call sh_xfree (retsize: 0;)
	x26 = x20
	x19 = Mem0[x20:word64]
	x20 = x20 + 8
	branch x19 == 0x0000000000000000 l0000000000452EE0
	// succ:  l0000000000452B48 l0000000000452EE0
l0000000000452B48:
	x0 = x19
	call make_word (retsize: 0;)
	x25 = Mem0[x24 + 8:word64]
	v44 = Mem0[x19:byte]
	w4 = (word32) v44
	x1 = Mem0[x25:word64]
	x22 = x0
	v46 = Mem0[x1:byte]
	w3 = (word32) v46
	NZCV = cond(w4 - w3)
	branch Test(NE,Z) l0000000000452B1C
	// succ:  l0000000000452B6C l0000000000452B1C
l0000000000452B6C:
	x0 = x19
	strcmp(x0, x1)
	sp = sp + 0xFFFFFFFFFFFFFFF8
	branch w0 != 0x00000000 l0000000000452B1C
	// succ:  l0000000000452B78 l0000000000452B1C
l0000000000452B78:
	w0 = Mem0[x25 + 8:word32]
	Mem0[x22 + 8:word32] = w0
	goto l0000000000452B1C
	// succ:  l0000000000452B1C
l0000000000452B84:
	x1 = Mem0[x20 + 8:word64]
	x0 = x24
	Mem0[x1:word64] = 0x0000000000000000
	call dispose_words (retsize: 0;)
	x0 = x22
	call dispose_words (retsize: 0;)
	// succ:  l0000000000452B9C
l0000000000452B9C:
	w2 = 0x00000001
	x1 = 0x00000000004E3000
	w0 = 0x00000002
	Mem0[x1 + 1200:word32] = w2
	call fn0000000000445090 (retsize: 0;)
	// succ:  l0000000000452BB0
l0000000000452BB0:
	x1 = Mem0[x20 + 8:word64]
	x0 = x24
	Mem0[x1:word64] = 0x0000000000000000
	call dispose_words (retsize: 0;)
	x0 = x22
	call dispose_words (retsize: 0;)
	w1 = 0x00000001
	x2 = 0x00000000004E3000
	w0 = w1
	Mem0[x2 + 1200:word32] = w1
	call fn0000000000445090 (retsize: 0;)
	// succ:  l0000000000452BDC
l0000000000452BDC:
	x0 = x24
	call dispose_words (retsize: 0;)
	branch x22 == 0x0000000000000000 l0000000000453068
	// succ:  l0000000000452BE8 l0000000000453068
l0000000000452BE8:
	x0 = Mem0[x22:word64]
	branch x0 == 0x0000000000000000 l0000000000452C00
	// succ:  l0000000000452BF0 l0000000000452C00
l0000000000452BF0:
	x0 = x22
	call list_reverse (retsize: 0;)
	x22 = x0
	branch x0 == 0x0000000000000000 l0000000000452D24
	// succ:  l0000000000452C00 l0000000000452D24
l0000000000452C00:
	w5 = Mem0[x29 + 112:word32]
	branch (w5 & 0x00000010) == 0x00000000 l0000000000452D18
	// succ:  l0000000000452C08 l0000000000452D18
l0000000000452C08:
	x0 = 0x00000000004DF000
	w0 = Mem0[x0 + 3704:word32]
	branch w0 != 0x00000000 l0000000000452D18
	// succ:  l0000000000452C14 l0000000000452D18
l0000000000452C14:
	x0 = 0x00000000004E3000
	x0 = x0 + 0x0000000000000638
	Mem0[x29 + 112:word64] = x0
	x0 = 0x00000000004E3000
	x25 = 0x00000000004AD000
	x0 = x0 + 0x0000000000000648
	x26 = 0x0000000000000000
	x25 = x25 + 0xFFFFFFFFFFFFFA20
	Mem0[x29 + 128:word64] = x0
	goto l0000000000452C84
	// succ:  l0000000000452C84
l0000000000452C3C:
	x2 = Mem0[x22 + 8:word64]
	// succ:  l0000000000452C40
l0000000000452C40:
	x0 = Mem0[x2:word64]
	x24 = 0x0000000000000000
	call dequote_string (retsize: 0;)
	x2 = Mem0[x22 + 8:word64]
	x19 = x0
	x0 = Mem0[x2:word64]
	x1 = x25
	w2 = 0x00002382
	call sh_xfree (retsize: 0;)
	x1 = Mem0[x22 + 8:word64]
	Mem0[x1:word64] = x19
	// succ:  l0000000000452C6C
l0000000000452C6C:
	Mem0[x22:word64] = x21
	x21 = x22
	// succ:  l0000000000452C74
l0000000000452C74:
	x0 = x24
	call strvec_dispose (retsize: 0;)
	branch x23 == 0x0000000000000000 l0000000000452FC0
	// succ:  l0000000000452C80 l0000000000452FC0
l0000000000452C80:
	x22 = x23
	// succ:  l0000000000452C84
l0000000000452C84:
	x2 = Mem0[x22 + 8:word64]
	x23 = Mem0[x22:word64]
	w0 = Mem0[x2 + 8:word32]
	branch (w0 & 0x00000020) == 0x00000000 l0000000000452C40
	// succ:  l0000000000452C94 l0000000000452C40
l0000000000452C94:
	x0 = Mem0[x2:word64]
	call unquoted_glob_pattern_p (retsize: 0;)
	branch w0 == 0x00000000 l0000000000452C3C
	// succ:  l0000000000452CA0 l0000000000452C3C
l0000000000452CA0:
	x0 = Mem0[x22 + 8:word64]
	x0 = Mem0[x0:word64]
	call shell_glob_filename (retsize: 0;)
	x24 = x0
	branch x0 == 0x0000000000000000 l0000000000452FEC
	// succ:  l0000000000452CB4 l0000000000452FEC
l0000000000452CB4:
	x0 = 0x00000000004E3000
	x0 = x0 + 0xFFFFFFFFFFFFFF20
	x31 = x24 - x0
	NZCV = cond(x31)
	branch Test(EQ,Z) l0000000000452FEC
	// succ:  l0000000000452CC4 l0000000000452FEC
l0000000000452CC4:
	x2 = Mem0[x24:word64]
	branch x2 == 0x0000000000000000 l0000000000453160
	// succ:  l0000000000452CCC l0000000000453160
l0000000000452CCC:
	x20 = x24 + 0x0000000000000008
	x19 = 0x0000000000000000
	// succ:  l0000000000452CD4
l0000000000452CD4:
	x0 = x2
	call make_bare_word (retsize: 0;)
	w3 = Mem0[x0 + 8:word32]
	x1 = x19
	w3 = w3 | 0x00000008
	Mem0[x0 + 8:word32] = w3
	call make_word_list (retsize: 0;)
	x2 = Mem0[x20:word64]
	x20 = x20 + 8
	x19 = x0
	branch x2 != 0x0000000000000000 l0000000000452CD4
	// succ:  l0000000000452CFC l0000000000452CD4
l0000000000452CFC:
	branch x0 == 0x0000000000000000 l0000000000453044
	// succ:  l0000000000452D00 l0000000000453044
l0000000000452D00:
	x1 = x21
	call list_append (retsize: 0;)
	x21 = x0
	Mem0[x22:word64] = x26
	x26 = x22
	goto l0000000000452C74
	// succ:  l0000000000452C74
l0000000000452D18:
	x0 = x22
	call dequote_list (retsize: 0;)
	x22 = x0
	// succ:  l0000000000452D24
l0000000000452D24:
	w5 = Mem0[x29 + 144:word32]
	branch w5 == 0x00000000 l0000000000452EA4
	// succ:  l0000000000452D2C l0000000000452EA4
l0000000000452D2C:
	x0 = x27 + 0x0000000000000008
	x19 = Mem0[x0 + 32:word64]
	branch x19 == 0x0000000000000000 l0000000000452EA4
	// succ:  l0000000000452D38 l0000000000452EA4
l0000000000452D38:
	branch x22 == 0x0000000000000000 l00000000004530D0
	// succ:  l0000000000452D3C l00000000004530D0
l0000000000452D3C:
	x26 = 0x00000000004E3000
	x23 = Mem0[x22 + 8:word64]
	Mem0[x26 + 1216:word32] = 0x00000000
	branch x23 == 0x0000000000000000 l0000000000452D5C
	// succ:  l0000000000452D4C l0000000000452D5C
l0000000000452D4C:
	x0 = Mem0[x23:word64]
	w23 = 0x00000001
	call find_shell_builtin (retsize: 0;)
	branch x0 == 0x0000000000000000 l0000000000453124
	// succ:  l0000000000452D5C l0000000000453124
l0000000000452D5C:
	x0 = 0x00000000004DE000
	w1 = Mem0[x0 + 1716:word32]
	branch w1 == 0x00000000 l0000000000453070
	// succ:  l0000000000452D68 l0000000000453070
l0000000000452D68:
	x1 = Mem0[x22 + 8:word64]
	branch x1 == 0x0000000000000000 l0000000000453070
	// succ:  l0000000000452D70 l0000000000453070
l0000000000452D70:
	x0 = Mem0[x1:word64]
	call find_special_builtin (retsize: 0;)
	x31 = x0 - x31
	NZCV = cond(x31)
	x1 = x27 + 0x0000000000000008
	w2 = (word32) Test(NE,Z)
	x0 = Mem0[x1 + 32:word64]
	Mem0[x29 + 112:word32] = w2
	// succ:  l0000000000452D8C
l0000000000452D8C:
	branch x0 == 0x0000000000000000 l0000000000452E04
	// succ:  l0000000000452D90 l0000000000452E04
l0000000000452D90:
	x1 = 0x000000000043A000
	x19 = x0
	x21 = x1 + 0xFFFFFFFFFFFFFD00
	// succ:  l0000000000452D9C
l0000000000452D9C:
	x1 = x1 + 0xFFFFFFFFFFFFFD00
	x31 = x21 - x1
	NZCV = cond(x31)
	x0 = 0x00000000004E3000
	x20 = 0x00000000004E3000
	x28 = 0x000000000044C000
	w25 = (word32) Test(EQ,Z)
	x24 = x0 + 0x00000000000004A8
	x20 = x20 + 0x0000000000000658
	x28 = x28 + 0x0000000000000620
	x26 = x26 + 0x00000000000004C0
	// succ:  l0000000000452DC4
l0000000000452DC4:
	x0 = Mem0[x19 + 8:word64]
	w1 = w23
	Mem0[x24:word64] = 0x0000000000000000
	Mem0[x20:word32] = w25
	call x21 (retsize: 0;)
	Mem0[x20:word32] = 0x00000000
	branch w0 != 0x00000000 l0000000000452DF4
	// succ:  l0000000000452DE0 l0000000000452DF4
l0000000000452DE0:
	x31 = x21 - x28
	NZCV = cond(x31)
	branch Test(EQ,Z) l0000000000453094
	// succ:  l0000000000452DE8 l0000000000453094
l0000000000452DE8:
	w0 = Mem0[x26:word32]
	w0 = w0 + 0x00000001
	Mem0[x26:word32] = w0
	// succ:  l0000000000452DF4
l0000000000452DF4:
	x19 = Mem0[x19:word64]
	branch x19 != 0x0000000000000000 l0000000000452DC4
	// succ:  l0000000000452DFC l0000000000452DC4
l0000000000452DFC:
	x0 = x27 + 0x0000000000000008
	x0 = Mem0[x0 + 32:word64]
	// succ:  l0000000000452E04
l0000000000452E04:
	call dispose_words (retsize: 0;)
	x27 = x27 + 0x0000000000000008
	Mem0[x27 + 32:word64] = 0x0000000000000000
	x0 = x22
	goto l0000000000452EA8
	// succ:  l0000000000452EA8
l0000000000452E18:
	branch x24 == 0x0000000000000000 l0000000000453080
	// succ:  l0000000000452E1C l0000000000453080
l0000000000452E1C:
	x0 = Mem0[x0 + 32:word64]
	branch x0 == 0x0000000000000000 l0000000000452E28
	// succ:  l0000000000452E24 l0000000000452E28
l0000000000452E24:
	call dispose_words (retsize: 0;)
	// succ:  l0000000000452E28
l0000000000452E28:
	x0 = x27 + 0x0000000000000008
	Mem0[x0 + 32:word64] = 0x0000000000000000
	x2 = x24
	x0 = x24
	goto l0000000000452E44
	// succ:  l0000000000452E44
l0000000000452E3C:
	x2 = x0
	x0 = x1
	// succ:  l0000000000452E44
l0000000000452E44:
	x1 = Mem0[x0 + 8:word64]
	w1 = Mem0[x1 + 8:word32]
	branch (w1 & 0x00000004) == 0x00000000 l0000000000452F30
	// succ:  l0000000000452E50 l0000000000452F30
l0000000000452E50:
	x1 = Mem0[x0:word64]
	branch x1 != 0x0000000000000000 l0000000000452E3C
	// succ:  l0000000000452E58 l0000000000452E3C
l0000000000452E58:
	x2 = x27 + 0x0000000000000008
	Mem0[x2 + 32:word64] = x24
	Mem0[x0:word64] = 0x0000000000000000
	Mem0[x2 + 40:word64] = x1
	// succ:  l0000000000452E68
l0000000000452E68:
	x0 = 0x00000000004E3000
	x19 = x0 + 0x00000000000004A8
	// succ:  l0000000000452E70
l0000000000452E70:
	x0 = Mem0[x24 + 8:word64]
	w1 = 0x00000001
	Mem0[x19:word64] = 0x0000000000000000
	call fn000000000044C21C (retsize: 0;)
	branch w0 == 0x00000000 l00000000004530F0
	// succ:  l0000000000452E84 l00000000004530F0
l0000000000452E84:
	x24 = Mem0[x24:word64]
	branch x24 != 0x0000000000000000 l0000000000452E70
	// succ:  l0000000000452E8C l0000000000452E70
l0000000000452E8C:
	x27 = x27 + 0x0000000000000008
	x0 = Mem0[x27 + 32:word64]
	call dispose_words (retsize: 0;)
	x0 = x24
	Mem0[x27 + 32:word64] = x24
	goto l0000000000452EA8
	// succ:  l0000000000452EA8
l0000000000452EA4:
	x0 = x22
	// succ:  l0000000000452EA8
l0000000000452EA8:
	v37 = sp + 16
	x19 = Mem0[v37:word64]
	v37 = v37 + 8
	x20 = Mem0[v37:word64]
	v38 = sp + 32
	x21 = Mem0[v38:word64]
	v38 = v38 + 8
	x22 = Mem0[v38:word64]
	v39 = sp + 48
	x23 = Mem0[v39:word64]
	v39 = v39 + 8
	x24 = Mem0[v39:word64]
	v40 = sp + 64
	x25 = Mem0[v40:word64]
	v40 = v40 + 8
	x26 = Mem0[v40:word64]
	v41 = sp + 80
	x27 = Mem0[v41:word64]
	v41 = v41 + 8
	x28 = Mem0[v41:word64]
	x29 = Mem0[sp:word64]
	sp = sp + 8
	x30 = Mem0[sp:word64]
	sp = sp + 176
	return
	// succ:  fn00000000004528E0_exit
l0000000000452EC4:
	Mem0[x24:word64] = x21
	x21 = x24
	branch x23 == 0x0000000000000000 l0000000000452F04
	// succ:  l0000000000452ED0 l0000000000452F04
l0000000000452ED0:
	x24 = x23
	goto l0000000000452ABC
	// succ:  l0000000000452ABC
l0000000000452ED8:
	x3 = 0x00000000004AD000
	Mem0[x29 + 152:word64] = x3
	// succ:  l0000000000452EE0
l0000000000452EE0:
	x5 = Mem0[x29 + 152:word64]
	x0 = Mem0[x29 + 128:word64]
	x1 = x5 + 0xFFFFFFFFFFFFFA20
	w2 = 0x000023C3
	call sh_xfree (retsize: 0;)
	x3 = Mem0[x29 + 136:word64]
	Mem0[x29 + 136:word64] = x24
	Mem0[x24:word64] = x3
	branch x23 != 0x0000000000000000 l0000000000452ED0
	// succ:  l0000000000452F04 l0000000000452ED0
l0000000000452F04:
	x5 = Mem0[x29 + 136:word64]
	branch x5 == 0x0000000000000000 l0000000000452F14
	// succ:  l0000000000452F0C l0000000000452F14
l0000000000452F0C:
	x0 = x5
	call dispose_words (retsize: 0;)
	// succ:  l0000000000452F14
l0000000000452F14:
	branch x21 == 0x0000000000000000 l0000000000453068
	// succ:  l0000000000452F18 l0000000000453068
l0000000000452F18:
	x0 = Mem0[x21:word64]
	branch x0 == 0x0000000000000000 l00000000004530C8
	// succ:  l0000000000452F20 l00000000004530C8
l0000000000452F20:
	x0 = x21
	call list_reverse (retsize: 0;)
	x24 = x0
	goto l0000000000452934
	// succ:  l0000000000452934
l0000000000452F30:
	x31 = x24 - x0
	NZCV = cond(x31)
	branch Test(EQ,Z) l0000000000452F48
	// succ:  l0000000000452F38 l0000000000452F48
l0000000000452F38:
	x1 = x27 + 0x0000000000000008
	Mem0[x1 + 32:word64] = x24
	Mem0[x2:word64] = 0x0000000000000000
	x24 = x0
	// succ:  l0000000000452F48
l0000000000452F48:
	x0 = 0x00000000004DF000
	w0 = Mem0[x0 + 3720:word32]
	branch w0 == 0x00000000 l0000000000452F9C
	// succ:  l0000000000452F54 l0000000000452F9C
l0000000000452F54:
	x0 = Mem0[x24:word64]
	branch x0 == 0x0000000000000000 l0000000000452F9C
	// succ:  l0000000000452F5C l0000000000452F9C
l0000000000452F5C:
	x1 = x27 + 0x0000000000000008
	x4 = Mem0[x1 + 32:word64]
	x3 = x24
	// succ:  l0000000000452F68
l0000000000452F68:
	x1 = Mem0[x0 + 8:word64]
	w1 = Mem0[x1 + 8:word32]
	branch (w1 & 0x00000004) == 0x00000000 l0000000000452FA8
	// succ:  l0000000000452F74 l0000000000452FA8
l0000000000452F74:
	branch x4 == 0x0000000000000000 l0000000000452FB8
	// succ:  l0000000000452F78 l0000000000452FB8
l0000000000452F78:
	Mem0[x2:word64] = x0
	// succ:  l0000000000452F7C
l0000000000452F7C:
	x1 = Mem0[x0:word64]
	x2 = x0
	Mem0[x3:word64] = x1
	Mem0[x0:word64] = 0x0000000000000000
	x0 = Mem0[x3:word64]
	branch x0 != 0x0000000000000000 l0000000000452F68
	// succ:  l0000000000452F94 l0000000000452F68
l0000000000452F94:
	x0 = x27 + 0x0000000000000008
	Mem0[x0 + 32:word64] = x4
	// succ:  l0000000000452F9C
l0000000000452F9C:
	x0 = x27 + 0x0000000000000008
	Mem0[x0 + 40:word64] = x24
	goto l000000000045292C
	// succ:  l000000000045292C
l0000000000452FA8:
	x3 = x0
	x0 = Mem0[x0:word64]
	branch x0 != 0x0000000000000000 l0000000000452F68
	// succ:  l0000000000452FB4 l0000000000452F68
l0000000000452FB4:
	goto l0000000000452F94
	// succ:  l0000000000452F94
l0000000000452FB8:
	x4 = x0
	goto l0000000000452F7C
	// succ:  l0000000000452F7C
l0000000000452FC0:
	x22 = x21
	branch x26 == 0x0000000000000000 l0000000000452FD0
	// succ:  l0000000000452FC8 l0000000000452FD0
l0000000000452FC8:
	x0 = x26
	call dispose_words (retsize: 0;)
	// succ:  l0000000000452FD0
l0000000000452FD0:
	branch x21 == 0x0000000000000000 l0000000000452D24
	// succ:  l0000000000452FD4 l0000000000452D24
l0000000000452FD4:
	x0 = Mem0[x21:word64]
	branch x0 == 0x0000000000000000 l000000000045311C
	// succ:  l0000000000452FDC l000000000045311C
l0000000000452FDC:
	x0 = x21
	call list_reverse (retsize: 0;)
	x22 = x0
	goto l0000000000452D24
	// succ:  l0000000000452D24
l0000000000452FEC:
	x0 = 0x0000000000000008
	x1 = x25
	w2 = 0x00002354
	call sh_xmalloc (retsize: 0;)
	x3 = 0x00000000004AD000
	x24 = x0
	Mem0[x29 + 152:word64] = x3
	Mem0[x0:word64] = 0x0000000000000000
	// succ:  l000000000045300C
l000000000045300C:
	x0 = Mem0[x22 + 8:word64]
	x0 = Mem0[x0:word64]
	call dequote_string (retsize: 0;)
	x2 = Mem0[x22 + 8:word64]
	x3 = Mem0[x29 + 152:word64]
	x19 = x0
	x0 = Mem0[x2:word64]
	x1 = x3 + 0xFFFFFFFFFFFFFA20
	w2 = 0x0000235C
	call sh_xfree (retsize: 0;)
	x1 = Mem0[x22 + 8:word64]
	Mem0[x1:word64] = x19
	x2 = Mem0[x24:word64]
	branch x2 != 0x0000000000000000 l0000000000452CCC
	// succ:  l0000000000453044 l0000000000452CCC
l0000000000453044:
	x5 = Mem0[x29 + 112:word64]
	w0 = Mem0[x5:word32]
	branch w0 != 0x00000000 l000000000045313C
	// succ:  l0000000000453050 l000000000045313C
l0000000000453050:
	x3 = Mem0[x29 + 128:word64]
	w0 = Mem0[x3:word32]
	branch w0 == 0x00000000 l0000000000452C6C
	// succ:  l000000000045305C l0000000000452C6C
l000000000045305C:
	Mem0[x22:word64] = x26
	x26 = x22
	goto l0000000000452C74
	// succ:  l0000000000452C74
l0000000000453068:
	x22 = 0x0000000000000000
	goto l0000000000452D24
	// succ:  l0000000000452D24
l0000000000453070:
	x0 = x27 + 0x0000000000000008
	x0 = Mem0[x0 + 32:word64]
	Mem0[x29 + 112:word32] = w1
	goto l0000000000452D8C
	// succ:  l0000000000452D8C
l0000000000453080:
	x24 = Mem0[x0 + 32:word64]
	Mem0[x0 + 40:word64] = 0x0000000000000000
	branch x24 != 0x0000000000000000 l0000000000452E68
	// succ:  l000000000045308C l0000000000452E68
l000000000045308C:
	x0 = 0x0000000000000000
	goto l0000000000452EA8
	// succ:  l0000000000452EA8
l0000000000453094:
	x0 = 0x00000000004DE000
	w2 = 0x00000001
	x1 = 0x00000000004E3000
	w0 = Mem0[x0 + 1712:word32]
	Mem0[x1 + 1200:word32] = w2
	branch w0 != 0x00000000 l00000000004530C0
	// succ:  l00000000004530AC l00000000004530C0
l00000000004530AC:
	x0 = 0x00000000004DE000
	w0 = Mem0[x0 + 1716:word32]
	branch w0 == 0x00000000 l00000000004530C0
	// succ:  l00000000004530B8 l00000000004530C0
l00000000004530B8:
	w3 = Mem0[x29 + 112:word32]
	branch w3 != 0x00000000 l0000000000453114
	// succ:  l00000000004530C0 l0000000000453114
l00000000004530C0:
	w0 = 0x00000002
	call fn0000000000445090 (retsize: 0;)
	// succ:  l00000000004530C8
l00000000004530C8:
	x24 = x21
	goto l0000000000452934
	// succ:  l0000000000452934
l00000000004530D0:
	x26 = 0x00000000004E3000
	x21 = 0x000000000044C000
	Mem0[x26 + 1216:word32] = w22
	w23 = w22
	x21 = x21 + 0x0000000000000620
	Mem0[x29 + 112:word32] = w22
	x1 = 0x000000000043A000
	goto l0000000000452D9C
	// succ:  l0000000000452D9C
l00000000004530F0:
	x0 = 0x00000000004DE000
	w2 = 0x00000001
	x1 = 0x00000000004E3000
	w0 = Mem0[x0 + 1712:word32]
	Mem0[x1 + 1200:word32] = w2
	branch w0 != 0x00000000 l00000000004530C0
	// succ:  l0000000000453108 l00000000004530C0
l0000000000453108:
	x0 = 0x00000000004DE000
	w0 = Mem0[x0 + 1716:word32]
	branch w0 == 0x00000000 l00000000004530C0
	// succ:  l0000000000453114 l00000000004530C0
l0000000000453114:
	w0 = 0x00000001
	call fn0000000000445090 (retsize: 0;)
	// succ:  l000000000045311C
l000000000045311C:
	x22 = x21
	goto l0000000000452D24
	// succ:  l0000000000452D24
l0000000000453124:
	x0 = Mem0[x22 + 8:word64]
	x0 = Mem0[x0:word64]
	call find_function (retsize: 0;)
	x31 = x0 - x31
	NZCV = cond(x31)
	w23 = (word32) Test(NE,Z)
	goto l0000000000452D5C
	// succ:  l0000000000452D5C
l000000000045313C:
	x1 = 0x00000000004AD000
	x1 = x1 + 0xFFFFFFFFFFFFFCD0
	w2 = 0x00000005
	x0 = 0x0000000000000000
	dcgettext(x0, x1, x2)
	sp = sp + 0xFFFFFFFFFFFFFFF8
	x1 = Mem0[x22 + 8:word64]
	x1 = Mem0[x1:word64]
	call report_error (retsize: 0;)
	goto l00000000004530C0
	// succ:  l00000000004530C0
l0000000000453160:
	x5 = 0x00000000004AD000
	Mem0[x29 + 152:word64] = x5
	goto l000000000045300C
	// succ:  l000000000045300C
fn00000000004528E0_exit:


// expand_words
// Return size: 0
void expand_words()
expand_words_entry:
	// succ:  l000000000045316C
l000000000045316C:
	sp = fp
	w1 = 0x0000001F
	// succ:  l0000000000453170_thunk_fn00000000004528E0
l0000000000453170_thunk_fn00000000004528E0:
	call fn00000000004528E0 (retsize: 0;)
	return
	// succ:  expand_words_exit
expand_words_exit:


// expand_words_no_vars
// Return size: 0
void expand_words_no_vars()
expand_words_no_vars_entry:
	// succ:  l0000000000453174
l0000000000453174:
	sp = fp
	w1 = 0x0000001E
	// succ:  l0000000000453178_thunk_fn00000000004528E0
l0000000000453178_thunk_fn00000000004528E0:
	call fn00000000004528E0 (retsize: 0;)
	return
	// succ:  expand_words_no_vars_exit
expand_words_no_vars_exit:


// expand_words_shellexp
// Return size: 0
void expand_words_shellexp()
expand_words_shellexp_entry:
	// succ:  l000000000045317C
l000000000045317C:
	sp = fp
	w1 = 0x0000000E
	// succ:  l0000000000453180_thunk_fn00000000004528E0
l0000000000453180_thunk_fn00000000004528E0:
	call fn00000000004528E0 (retsize: 0;)
	return
	// succ:  expand_words_shellexp_exit
expand_words_shellexp_exit:


// fn0000000000453184
// Return size: 0
void fn0000000000453184()
fn0000000000453184_entry:
	// succ:  l0000000000453184
l0000000000453184:
	sp = fp
	sp = sp + -32
	Mem0[sp:word64] = x29
	sp = sp + 8
	Mem0[sp:word64] = x30
	x29 = x31 + 0x0000000000000000
	v8 = sp + 16
	Mem0[v8:word64] = x19
	v8 = v8 + 8
	Mem0[v8:word64] = x20
	x19 = 0x00000000004AD000
	x20 = x0
	x19 = x19 + 0xFFFFFFFFFFFFFCE0
	x0 = Mem0[x0:word64]
	x1 = x19
	w2 = 0x00000036
	call sh_xfree (retsize: 0;)
	x0 = x20
	x1 = x19
	v12 = sp + 16
	x19 = Mem0[v12:word64]
	v12 = v12 + 8
	x20 = Mem0[v12:word64]
	x29 = Mem0[sp:word64]
	sp = sp + 8
	x30 = Mem0[sp:word64]
	sp = sp + 32
	w2 = 0x00000037
	// succ:  l00000000004531C0_thunk_sh_xfree
l00000000004531C0_thunk_sh_xfree:
	call sh_xfree (retsize: 0;)
	return
	// succ:  fn0000000000453184_exit
fn0000000000453184_exit:


// phash_create
// Return size: 0
void phash_create()
phash_create_entry:
	// succ:  l00000000004531C4
l00000000004531C4:
	sp = fp
	sp = sp + -32
	Mem0[sp:word64] = x29
	sp = sp + 8
	Mem0[sp:word64] = x30
	x29 = x31 + 0x0000000000000000
	Mem0[sp + 16:word64] = x19
	x19 = 0x00000000004E1000
	x19 = x19 + 0x0000000000000090
	x0 = Mem0[x19:word64]
	branch x0 == 0x0000000000000000 l00000000004531EC
	// succ:  l00000000004531E0 l00000000004531EC
l00000000004531E0:
	x19 = Mem0[sp + 16:word64]
	x29 = Mem0[sp:word64]
	sp = sp + 8
	x30 = Mem0[sp:word64]
	sp = sp + 32
	return
	// succ:  phash_create_exit
l00000000004531EC:
	w0 = 0x00000040
	call hash_create (retsize: 0;)
	Mem0[x19:word64] = x0
	x19 = Mem0[sp + 16:word64]
	x29 = Mem0[sp:word64]
	sp = sp + 8
	x30 = Mem0[sp:word64]
	sp = sp + 32
	return
	// succ:  phash_create_exit
phash_create_exit:


// phash_flush
// Return size: 0
void phash_flush()
phash_flush_entry:
	// succ:  l0000000000453204
l0000000000453204:
	sp = fp
	x0 = 0x00000000004E1000
	x0 = x0 + 0x0000000000000090
	x0 = Mem0[x0:word64]
	branch x0 == 0x0000000000000000 l0000000000453220
	// succ:  l0000000000453214 l0000000000453220
l0000000000453214:
	x1 = 0x0000000000453000
	x1 = x1 + 0x0000000000000184
	// succ:  l000000000045321C_thunk_hash_flush
l000000000045321C_thunk_hash_flush:
	call hash_flush (retsize: 0;)
	return
	// succ:  phash_flush_exit
l0000000000453220:
	return
	// succ:  phash_flush_exit
phash_flush_exit:


// phash_remove
// Return size: 0
void phash_remove()
phash_remove_entry:
	// succ:  l0000000000453224
l0000000000453224:
	sp = fp
	sp = sp + -32
	Mem0[sp:word64] = x29
	sp = sp + 8
	Mem0[sp:word64] = x30
	x29 = x31 + 0x0000000000000000
	x1 = 0x00000000004D6000
	w1 = Mem0[x1 + 3292:word32]
	v10 = sp + 16
	Mem0[v10:word64] = x19
	v10 = v10 + 8
	Mem0[v10:word64] = x20
	w2 = 0x00000000
	branch w1 == 0x00000000 l0000000000453294
	// succ:  l0000000000453240 l0000000000453294
l0000000000453240:
	x1 = 0x00000000004E1000
	x1 = x1 + 0x0000000000000090
	x1 = Mem0[x1:word64]
	branch x1 == 0x0000000000000000 l0000000000453294
	// succ:  l0000000000453250 l0000000000453294
l0000000000453250:
	call hash_remove (retsize: 0;)
	x19 = x0
	branch x0 == 0x0000000000000000 l00000000004532A4
	// succ:  l000000000045325C l00000000004532A4
l000000000045325C:
	x0 = Mem0[x0 + 16:word64]
	branch x0 == 0x0000000000000000 l0000000000453268
	// succ:  l0000000000453264 l0000000000453268
l0000000000453264:
	call fn0000000000453184 (retsize: 0;)
	// succ:  l0000000000453268
l0000000000453268:
	x20 = 0x00000000004AD000
	x20 = x20 + 0xFFFFFFFFFFFFFCE0
	x0 = Mem0[x19 + 8:word64]
	w2 = 0x00000050
	x1 = x20
	call sh_xfree (retsize: 0;)
	w2 = 0x00000051
	x0 = x19
	x1 = x20
	call sh_xfree (retsize: 0;)
	w2 = 0x00000000
	// succ:  l0000000000453294
l0000000000453294:
	w0 = w2
	v14 = sp + 16
	x19 = Mem0[v14:word64]
	v14 = v14 + 8
	x20 = Mem0[v14:word64]
	x29 = Mem0[sp:word64]
	sp = sp + 8
	x30 = Mem0[sp:word64]
	sp = sp + 32
	return
	// succ:  phash_remove_exit
l00000000004532A4:
	w2 = 0x00000001
	goto l0000000000453294
	// succ:  l0000000000453294
phash_remove_exit:


// phash_insert
// Return size: 0
void phash_insert()
phash_insert_entry:
	// succ:  l00000000004532AC
l00000000004532AC:
	sp = fp
	sp = sp + -80
	Mem0[sp:word64] = x29
	sp = sp + 8
	Mem0[sp:word64] = x30
	x29 = x31 + 0x0000000000000000
	x4 = 0x00000000004D6000
	w4 = Mem0[x4 + 3292:word32]
	v10 = sp + 48
	Mem0[v10:word64] = x23
	v10 = v10 + 8
	Mem0[v10:word64] = x24
	v13 = sp + 16
	Mem0[v13:word64] = x19
	v13 = v13 + 8
	Mem0[v13:word64] = x20
	v16 = sp + 32
	Mem0[v16:word64] = x21
	v16 = v16 + 8
	Mem0[v16:word64] = x22
	Mem0[sp + 64:word64] = x25
	x23 = x0
	x20 = x1
	w21 = w2
	w24 = w3
	branch w4 == 0x00000000 l000000000045336C
	// succ:  l00000000004532E0 l000000000045336C
l00000000004532E0:
	x19 = 0x00000000004E1000
	x19 = x19 + 0x0000000000000090
	x1 = Mem0[x19:word64]
	branch x1 == 0x0000000000000000 l00000000004533D8
	// succ:  l00000000004532F0 l00000000004533D8
l00000000004532F0:
	x0 = x23
	w2 = 0x00000000
	call hash_insert (retsize: 0;)
	x19 = x0
	x0 = Mem0[x0 + 16:word64]
	branch x0 == 0x0000000000000000 l0000000000453390
	// succ:  l0000000000453308 l0000000000453390
l0000000000453308:
	x22 = 0x00000000004AD000
	x0 = Mem0[x0:word64]
	x1 = x22 + 0xFFFFFFFFFFFFFCE0
	w2 = 0x0000006B
	call sh_xfree (retsize: 0;)
	x23 = Mem0[x19 + 16:word64]
	// succ:  l0000000000453320
l0000000000453320:
	x0 = x20
	strlen(x0)
	sp = sp + 0xFFFFFFFFFFFFFFF8
	w2 = 0x00000071
	x1 = x22 + 0xFFFFFFFFFFFFFCE0
	x0 = x0 + 0x0000000000000001
	call sh_xmalloc (retsize: 0;)
	x1 = x20
	strcpy(x0, x1)
	sp = sp + 0xFFFFFFFFFFFFFFF8
	Mem0[x23:word64] = x0
	x0 = Mem0[x19 + 16:word64]
	branch w21 != 0x00000000 l0000000000453384
	// succ:  l000000000045334C l0000000000453384
l000000000045334C:
	Mem0[x0 + 8:word32] = w21
	// succ:  l0000000000453350
l0000000000453350:
	v25 = Mem0[x20:byte]
	w1 = (word32) v25
	w31 = w1 - 0x0000002F
	NZCV = cond(w31)
	branch Test(EQ,Z) l0000000000453368
	// succ:  l000000000045335C l0000000000453368
l000000000045335C:
	w1 = Mem0[x0 + 8:word32]
	w1 = w1 | 0x00000001
	Mem0[x0 + 8:word32] = w1
	// succ:  l0000000000453368
l0000000000453368:
	Mem0[x19 + 28:word32] = w24
	// succ:  l000000000045336C
l000000000045336C:
	v29 = sp + 16
	x19 = Mem0[v29:word64]
	v29 = v29 + 8
	x20 = Mem0[v29:word64]
	v30 = sp + 32
	x21 = Mem0[v30:word64]
	v30 = v30 + 8
	x22 = Mem0[v30:word64]
	v31 = sp + 48
	x23 = Mem0[v31:word64]
	v31 = v31 + 8
	x24 = Mem0[v31:word64]
	x25 = Mem0[sp + 64:word64]
	x29 = Mem0[sp:word64]
	sp = sp + 8
	x30 = Mem0[sp:word64]
	sp = sp + 80
	return
	// succ:  phash_insert_exit
l0000000000453384:
	w1 = 0x00000002
	Mem0[x0 + 8:word32] = w1
	goto l0000000000453350
	// succ:  l0000000000453350
l0000000000453390:
	x0 = x23
	x22 = 0x00000000004AD000
	strlen(x0)
	sp = sp + 0xFFFFFFFFFFFFFFF8
	x25 = x22 + 0xFFFFFFFFFFFFFCE0
	w2 = 0x0000006E
	x1 = x25
	x0 = x0 + 0x0000000000000001
	call sh_xmalloc (retsize: 0;)
	x1 = x23
	strcpy(x0, x1)
	sp = sp + 0xFFFFFFFFFFFFFFF8
	Mem0[x19 + 8:word64] = x0
	x1 = x25
	x0 = 0x0000000000000010
	w2 = 0x0000006F
	call sh_xmalloc (retsize: 0;)
	x23 = x0
	Mem0[x19 + 16:word64] = x0
	goto l0000000000453320
	// succ:  l0000000000453320
l00000000004533D8:
	call phash_create (retsize: 0;)
	x1 = Mem0[x19:word64]
	goto l00000000004532F0
	// succ:  l00000000004532F0
phash_insert_exit:


// phash_search
// Return size: 0
void phash_search()
phash_search_entry:
	// succ:  l00000000004533E4
l00000000004533E4:
	sp = fp
	sp = sp + -48
	Mem0[sp:word64] = x29
	sp = sp + 8
	Mem0[sp:word64] = x30
	x29 = x31 + 0x0000000000000000
	x1 = 0x00000000004D6000
	w1 = Mem0[x1 + 3292:word32]
	v10 = sp + 16
	Mem0[v10:word64] = x19
	v10 = v10 + 8
	Mem0[v10:word64] = x20
	v13 = sp + 32
	Mem0[v13:word64] = x21
	v13 = v13 + 8
	Mem0[v13:word64] = x22
	x19 = x0
	branch w1 == 0x00000000 l0000000000453580
	// succ:  l0000000000453404 l0000000000453580
l0000000000453404:
	x1 = 0x00000000004E1000
	x1 = x1 + 0x0000000000000090
	x1 = Mem0[x1:word64]
	branch x1 == 0x0000000000000000 l0000000000453580
	// succ:  l0000000000453414 l0000000000453580
l0000000000453414:
	w2 = 0x00000000
	call hash_search (retsize: 0;)
	branch x0 == 0x0000000000000000 l0000000000453580
	// succ:  l0000000000453420 l0000000000453580
l0000000000453420:
	x0 = Mem0[x0 + 16:word64]
	x22 = 0x00000000004AD000
	w1 = Mem0[x0 + 8:word32]
	x21 = Mem0[x0:word64]
	w0 = w1 & 0x00000003
	branch w0 == 0x00000000 l0000000000453500
	// succ:  l0000000000453438 l0000000000453500
l0000000000453438:
	w1 = w1 & 0x00000001
	NZCV = cond(w1 - w31)
l0000000000453500:
	x0 = x21
	strlen(x0)
	sp = sp + 0xFFFFFFFFFFFFFFF8
	x0 = x0 + 0x0000000000000001
	x1 = x22 + 0xFFFFFFFFFFFFFCE0
	w2 = 0x000000C3
	call sh_xmalloc (retsize: 0;)
	x1 = x21
	v21 = sp + 16
	x19 = Mem0[v21:word64]
	v21 = v21 + 8
	x20 = Mem0[v21:word64]
	v22 = sp + 32
	x21 = Mem0[v22:word64]
	v22 = v22 + 8
	x22 = Mem0[v22:word64]
	x29 = Mem0[sp:word64]
	sp = sp + 8
	x30 = Mem0[sp:word64]
	sp = sp + 48
	strcpy(x0, x1)
	return
	// succ:  phash_search_exit
l0000000000453580:
	x0 = 0x0000000000000000
	v19 = sp + 16
	x19 = Mem0[v19:word64]
	v19 = v19 + 8
	x20 = Mem0[v19:word64]
	v20 = sp + 32
	x21 = Mem0[v20:word64]
	v20 = v20 + 8
	x22 = Mem0[v20:word64]
	x29 = Mem0[sp:word64]
	sp = sp + 8
	x30 = Mem0[sp:word64]
	sp = sp + 48
	return
	// succ:  phash_search_exit
phash_search_exit:


// hash_create
// Return size: 0
void hash_create()
hash_create_entry:
	// succ:  l0000000000453594
l0000000000453594:
	sp = fp
	sp = sp + -48
	Mem0[sp:word64] = x29
	sp = sp + 8
	Mem0[sp:word64] = x30
	x29 = x31 + 0x0000000000000000
	Mem0[sp + 32:word64] = x21
	x21 = 0x00000000004AD000
	x21 = x21 + 0xFFFFFFFFFFFFFCF8
	v9 = sp + 16
	Mem0[v9:word64] = x19
	v9 = v9 + 8
	Mem0[v9:word64] = x20
	x1 = x21
	w20 = w0
	w2 = 0x00000034
	x0 = 0x0000000000000010
	call sh_xmalloc (retsize: 0;)
	x19 = x0
	branch w20 == 0x00000000 l0000000000453620
	// succ:  l00000000004535C8 l0000000000453620
l00000000004535C8:
	w2 = 0x00000039
l00000000004535F0:
	x1 = 0x0000000000000000
	goto l00000000004535FC
	// succ:  l00000000004535FC
l00000000004535F8:
	x2 = Mem0[x19:word64]
	// succ:  l00000000004535FC
l00000000004535FC:
	Mem0[x2 + x1:word64] = 0x0000000000000000
	x1 = x1 + 0x0000000000000001
	NZCV = cond(w20 - w1)
	branch Test(GT,NZV) l00000000004535F8
	// succ:  l000000000045360C l00000000004535F8
l000000000045360C:
	x0 = x19
	x21 = Mem0[sp + 32:word64]
	v19 = sp + 16
	x19 = Mem0[v19:word64]
	v19 = v19 + 8
	x20 = Mem0[v19:word64]
	x29 = Mem0[sp:word64]
	sp = sp + 8
	x30 = Mem0[sp:word64]
	sp = sp + 48
	return
	// succ:  hash_create_exit
l0000000000453620:
	x1 = x21
	w2 = 0x00000039
	x0 = 0x0000000000000200
	call sh_xmalloc (retsize: 0;)
	w1 = 0x00000040
	Mem0[x19 + 12:word32] = w20
	Mem0[x19:word64] = x0
	Mem0[x19 + 8:word32] = w1
	x2 = x0
	w20 = w1
	goto l00000000004535F0
	// succ:  l00000000004535F0
hash_create_exit:


// hash_size
// Return size: 0
void hash_size()
hash_size_entry:
	// succ:  l000000000045364C
l000000000045364C:
	sp = fp
	branch x0 == 0x0000000000000000 l0000000000453654
	// succ:  l0000000000453650 l0000000000453654
l0000000000453650:
	w0 = Mem0[x0 + 12:word32]
	// succ:  l0000000000453654
l0000000000453654:
	return
	// succ:  hash_size_exit
hash_size_exit:


// hash_copy
// Return size: 0
void hash_copy()
hash_copy_entry:
	// succ:  l0000000000453658
l0000000000453658:
	sp = fp
	sp = sp + -96
	Mem0[sp:word64] = x29
	sp = sp + 8
	Mem0[sp:word64] = x30
	x29 = x31 + 0x0000000000000000
	v8 = sp + 32
	Mem0[v8:word64] = x21
	v8 = v8 + 8
	Mem0[v8:word64] = x22
	v11 = sp + 64
	Mem0[v11:word64] = x25
	v11 = v11 + 8
	Mem0[v11:word64] = x26
	v14 = sp + 16
	Mem0[v14:word64] = x19
	v14 = v14 + 8
	Mem0[v14:word64] = x20
	v17 = sp + 48
	Mem0[v17:word64] = x23
	v17 = v17 + 8
	Mem0[v17:word64] = x24
	v20 = sp + 80
	Mem0[v20:word64] = x27
	v20 = v20 + 8
	Mem0[v20:word64] = x28
	x26 = x0
	x22 = x1
	branch x0 == 0x0000000000000000 l0000000000453798
	// succ:  l0000000000453680 l0000000000453798
l0000000000453680:
	w0 = Mem0[x0 + 8:word32]
	x23 = 0x0000000000000000
	call hash_create (retsize: 0;)
	w1 = Mem0[x26 + 8:word32]
	x21 = 0x00000000004AD000
	NZCV = cond(w1 - w31)
	x28 = x0
	w25 = w23
	x21 = x21 + 0xFFFFFFFFFFFFFCF8
	branch Test(LE,ZCV) l000000000045378C
	// succ:  l00000000004536A8 l000000000045378C
l00000000004536A8:
	x2 = Mem0[x26:word64]
	x27 = Mem0[x28:word64]
	x19 = Mem0[x2 + x23:word64]
	x27 = x27 + x23
	branch x19 == 0x0000000000000000 l00000000004537D8
	// succ:  l00000000004536BC l00000000004537D8
l00000000004536BC:
	x24 = 0x0000000000000000
	x20 = x24
	goto l000000000045372C
	// succ:  l000000000045372C
l00000000004536C8:
	call sh_xmalloc (retsize: 0;)
	Mem0[x20:word64] = x0
	x20 = x0
	// succ:  l00000000004536D4
l00000000004536D4:
	x0 = Mem0[x19 + 8:word64]
	strlen(x0)
	sp = sp + 0xFFFFFFFFFFFFFFF8
	w2 = 0x00000061
	x1 = x21
	x0 = x0 + 0x0000000000000001
	call sh_xmalloc (retsize: 0;)
	x1 = Mem0[x19 + 8:word64]
	strcpy(x0, x1)
	sp = sp + 0xFFFFFFFFFFFFFFF8
	x2 = Mem0[x19 + 16:word64]
	Mem0[x20 + 8:word64] = x0
	x0 = x2
	branch x2 == 0x0000000000000000 l0000000000453750
	// succ:  l0000000000453704 l0000000000453750
l0000000000453704:
	branch x22 == 0x0000000000000000 l00000000004537B4
	// succ:  l0000000000453708 l00000000004537B4
l0000000000453708:
	call x22 (retsize: 0;)
	// succ:  l000000000045370C
l000000000045370C:
	w4 = Mem0[x19 + 24:word32]
	w3 = Mem0[x19 + 28:word32]
	Mem0[x20:word64] = 0x0000000000000000
	x19 = Mem0[x19:word64]
	Mem0[x20 + 16:word64] = x0
	Mem0[x20 + 24:word32] = w4
	Mem0[x20 + 28:word32] = w3
	branch x19 == 0x0000000000000000 l0000000000453774
	// succ:  l000000000045372C l0000000000453774
l000000000045372C:
	x1 = x21
	w2 = 0x0000005D
	x0 = 0x0000000000000020
	branch x20 != 0x0000000000000000 l00000000004536C8
	// succ:  l000000000045373C l00000000004536C8
l000000000045373C:
	w2 = 0x00000058
	call sh_xmalloc (retsize: 0;)
	x20 = x0
	x24 = x0
	goto l00000000004536D4
	// succ:  l00000000004536D4
l0000000000453750:
	w4 = Mem0[x19 + 24:word32]
	w3 = Mem0[x19 + 28:word32]
	Mem0[x20:word64] = 0x0000000000000000
	x19 = Mem0[x19:word64]
	x0 = x2
	Mem0[x20 + 16:word64] = x0
	Mem0[x20 + 24:word32] = w4
	Mem0[x20 + 28:word32] = w3
	branch x19 != 0x0000000000000000 l000000000045372C
	// succ:  l0000000000453774 l000000000045372C
l0000000000453774:
	w1 = Mem0[x26 + 8:word32]
	// succ:  l0000000000453778
l0000000000453778:
	w25 = w25 + 0x00000001
	Mem0[x27:word64] = x24
	NZCV = cond(w1 - w25)
	x23 = x23 + 0x0000000000000008
	branch Test(GT,NZV) l00000000004536A8
	// succ:  l000000000045378C l00000000004536A8
l000000000045378C:
	w1 = Mem0[x26 + 12:word32]
	x0 = x28
	Mem0[x28 + 12:word32] = w1
	// succ:  l0000000000453798
l0000000000453798:
	v31 = sp + 16
	x19 = Mem0[v31:word64]
	v31 = v31 + 8
	x20 = Mem0[v31:word64]
	v32 = sp + 32
	x21 = Mem0[v32:word64]
	v32 = v32 + 8
	x22 = Mem0[v32:word64]
	v33 = sp + 48
	x23 = Mem0[v33:word64]
	v33 = v33 + 8
	x24 = Mem0[v33:word64]
	v34 = sp + 64
	x25 = Mem0[v34:word64]
	v34 = v34 + 8
	x26 = Mem0[v34:word64]
	v35 = sp + 80
	x27 = Mem0[v35:word64]
	v35 = v35 + 8
	x28 = Mem0[v35:word64]
	x29 = Mem0[sp:word64]
	sp = sp + 8
	x30 = Mem0[sp:word64]
	sp = sp + 96
	return
	// succ:  hash_copy_exit
l00000000004537B4:
	x0 = x2
	strlen(x0)
	sp = sp + 0xFFFFFFFFFFFFFFF8
	x1 = x21
	w2 = 0x00000062
	x0 = x0 + 0x0000000000000001
	call sh_xmalloc (retsize: 0;)
	x1 = Mem0[x19 + 16:word64]
	strcpy(x0, x1)
	sp = sp + 0xFFFFFFFFFFFFFFF8
	goto l000000000045370C
	// succ:  l000000000045370C
l00000000004537D8:
	x24 = x19
	goto l0000000000453778
	// succ:  l0000000000453778
hash_copy_exit:


// hash_string
// Return size: 0
void hash_string()
hash_string_entry:
	// succ:  l00000000004537E0
l00000000004537E0:
	sp = fp
	v5 = Mem0[x0:byte]
	w1 = (word32) v5
	x3 = x0
	branch w1 == 0x00000000 l000000000045380C
	// succ:  l00000000004537EC l000000000045380C
l00000000004537EC:
	w0 = 0x00000000
	// succ:  l00000000004537F0
l00000000004537F0:
	w2 = 0x00000193
	w2 = DPB(w2, 0x00000100, 16)
	w0 = w0 * w2
	w0 = w1 ^ w0
	x3 = x3 + 1
	v9 = Mem0[x3:byte]
	w1 = (word32) v9
	branch w1 != 0x00000000 l00000000004537F0
	// succ:  l0000000000453808 l00000000004537F0
l0000000000453808:
	return
	// succ:  hash_string_exit
l000000000045380C:
	w0 = w1
	return
	// succ:  hash_string_exit
hash_string_exit:


// hash_bucket
// Return size: 0
void hash_bucket()
hash_bucket_entry:
	// succ:  l0000000000453814
l0000000000453814:
	sp = fp
	v5 = Mem0[x0:byte]
	w2 = (word32) v5
	branch w2 == 0x00000000 l0000000000453848
	// succ:  l000000000045381C l0000000000453848
l000000000045381C:
	w4 = 0x00000000
	// succ:  l0000000000453820
l0000000000453820:
	w3 = 0x00000193
	w3 = DPB(w3, 0x00000100, 16)
	w4 = w4 * w3
	w4 = w2 ^ w4
	x0 = x0 + 1
	v8 = Mem0[x0:byte]
	w2 = (word32) v8
	branch w2 != 0x00000000 l0000000000453820
	// succ:  l0000000000453838 l0000000000453820
l0000000000453838:
	w0 = Mem0[x1 + 8:word32]
	w0 = w0 - 0x00000001
	w0 = w4 & w0
	return
	// succ:  hash_bucket_exit
l0000000000453848:
	w4 = w2
	goto l0000000000453838
	// succ:  l0000000000453838
hash_bucket_exit:


// hash_search
// Return size: 0
void hash_search()
hash_search_entry:
	// succ:  l0000000000453850
l0000000000453850:
	sp = fp
	sp = sp + -80
	Mem0[sp:word64] = x29
	sp = sp + 8
	Mem0[sp:word64] = x30
	x29 = x31 + 0x0000000000000000
	v8 = sp + 32
	Mem0[v8:word64] = x21
	v8 = v8 + 8
	Mem0[v8:word64] = x22
	v11 = sp + 48
	Mem0[v11:word64] = x23
	v11 = v11 + 8
	Mem0[v11:word64] = x24
	v14 = sp + 16
	Mem0[v14:word64] = x19
	v14 = v14 + 8
	Mem0[v14:word64] = x20
	Mem0[sp + 64:word64] = x25
	x22 = x1
	x23 = x0
	branch x1 == 0x0000000000000000 l00000000004539A0
	// succ:  l0000000000453874 l00000000004539A0
l0000000000453874:
	w25 = w2 & 0x00000002
	branch (w2 & 0x00000002) == 0x00000000 l0000000000453974
	// succ:  l000000000045387C l0000000000453974
l000000000045387C:
	v21 = Mem0[x23:byte]
	w21 = (word32) v21
	branch w21 == 0x00000000 l0000000000453998
	// succ:  l0000000000453884 l0000000000453998
l0000000000453884:
	x4 = x23
	w2 = w21
	w20 = 0x00000000
	// succ:  l0000000000453890
l0000000000453890:
	w3 = 0x00000193
	w3 = DPB(w3, 0x00000100, 16)
	w20 = w20 * w3
	w20 = w2 ^ w20
	x4 = x4 + 1
	v25 = Mem0[x4:byte]
	w2 = (word32) v25
	branch w2 != 0x00000000 l0000000000453890
	// succ:  l00000000004538A8 l0000000000453890
l00000000004538A8:
	w24 = Mem0[x22 + 8:word32]
	x0 = Mem0[x22:word64]
	w24 = w24 - 0x00000001
	w24 = w20 & w24
	branch x0 == 0x0000000000000000 l000000000045390C
	// succ:  l00000000004538BC l000000000045390C
l00000000004538BC:
	x19 = Mem0[x0 + (int64) ((int32) w24):word64]
	branch x19 != 0x0000000000000000 l00000000004538D0
	// succ:  l00000000004538C4 l00000000004538D0
l00000000004538C4:
	goto l000000000045390C
	// succ:  l000000000045390C
l00000000004538C8:
	x19 = Mem0[x19:word64]
	branch x19 == 0x0000000000000000 l000000000045390C
	// succ:  l00000000004538D0 l000000000045390C
l00000000004538D0:
	w2 = Mem0[x19 + 24:word32]
	NZCV = cond(w2 - w20)
	branch Test(NE,Z) l00000000004538C8
	// succ:  l00000000004538DC l00000000004538C8
l00000000004538DC:
	x0 = Mem0[x19 + 8:word64]
	v32 = Mem0[x0:byte]
	w2 = (word32) v32
	NZCV = cond(w2 - w21)
	branch Test(NE,Z) l00000000004538C8
	// succ:  l00000000004538EC l00000000004538C8
l00000000004538EC:
	x1 = x23
	strcmp(x0, x1)
	sp = sp + 0xFFFFFFFFFFFFFFF8
	branch w0 != 0x00000000 l00000000004538C8
	// succ:  l00000000004538F8 l00000000004538C8
l00000000004538F8:
	w1 = Mem0[x19 + 28:word32]
	x0 = x19
	w1 = w1 + 0x00000001
	Mem0[x19 + 28:word32] = w1
	goto l000000000045395C
	// succ:  l000000000045395C
l000000000045390C:
	branch w25 == 0x00000000 l000000000045397C
	// succ:  l0000000000453910 l000000000045397C
l0000000000453910:
	x1 = 0x00000000004AD000
	x1 = x1 + 0xFFFFFFFFFFFFFCF8
	w2 = 0x000000BF
	x0 = 0x0000000000000020
	call sh_xmalloc (retsize: 0;)
	x2 = x0
	x0 = Mem0[x22:word64]
l000000000045395C:
	v27 = sp + 16
	x19 = Mem0[v27:word64]
	v27 = v27 + 8
	x20 = Mem0[v27:word64]
	v28 = sp + 32
	x21 = Mem0[v28:word64]
	v28 = v28 + 8
	x22 = Mem0[v28:word64]
	v29 = sp + 48
	x23 = Mem0[v29:word64]
	v29 = v29 + 8
	x24 = Mem0[v29:word64]
	x25 = Mem0[sp + 64:word64]
	x29 = Mem0[sp:word64]
	sp = sp + 8
	x30 = Mem0[sp:word64]
	sp = sp + 80
	return
	// succ:  hash_search_exit
l0000000000453974:
	w0 = Mem0[x1 + 12:word32]
	branch w0 != 0x00000000 l000000000045387C
	// succ:  l000000000045397C l000000000045387C
l000000000045397C:
	x0 = 0x0000000000000000
	v36 = sp + 16
	x19 = Mem0[v36:word64]
	v36 = v36 + 8
	x20 = Mem0[v36:word64]
	v37 = sp + 32
	x21 = Mem0[v37:word64]
	v37 = v37 + 8
	x22 = Mem0[v37:word64]
	v38 = sp + 48
	x23 = Mem0[v38:word64]
	v38 = v38 + 8
	x24 = Mem0[v38:word64]
	x25 = Mem0[sp + 64:word64]
	x29 = Mem0[sp:word64]
	sp = sp + 8
	x30 = Mem0[sp:word64]
	sp = sp + 80
	return
	// succ:  hash_search_exit
l0000000000453998:
	w20 = w21
	goto l00000000004538A8
	// succ:  l00000000004538A8
l00000000004539A0:
	x0 = x1
	goto l000000000045395C
	// succ:  l000000000045395C
hash_search_exit:


// hash_remove
// Return size: 0
void hash_remove()
hash_remove_entry:
	// succ:  l00000000004539A8
l00000000004539A8:
	sp = fp
	sp = sp + -96
	Mem0[sp:word64] = x29
	sp = sp + 8
	Mem0[sp:word64] = x30
	x29 = x31 + 0x0000000000000000
	v8 = sp + 48
	Mem0[v8:word64] = x23
	v8 = v8 + 8
	Mem0[v8:word64] = x24
	v11 = sp + 16
	Mem0[v11:word64] = x19
	v11 = v11 + 8
	Mem0[v11:word64] = x20
	v14 = sp + 32
	Mem0[v14:word64] = x21
	v14 = v14 + 8
	Mem0[v14:word64] = x22
	v17 = sp + 64
	Mem0[v17:word64] = x25
	v17 = v17 + 8
	Mem0[v17:word64] = x26
	Mem0[sp + 80:word64] = x27
	x23 = x1
	x24 = x0
	branch x1 == 0x0000000000000000 l0000000000453ACC
	// succ:  l00000000004539D0 l0000000000453ACC
l00000000004539D0:
	w25 = Mem0[x1 + 12:word32]
	branch w25 == 0x00000000 l0000000000453A9C
	// succ:  l00000000004539D8 l0000000000453A9C
l00000000004539D8:
	v23 = Mem0[x0:byte]
	w22 = (word32) v23
	branch w22 == 0x00000000 l0000000000453ABC
	// succ:  l00000000004539E0 l0000000000453ABC
l00000000004539E0:
	x5 = x0
	w3 = w22
	w20 = 0x00000000
	// succ:  l00000000004539EC
l00000000004539EC:
	w4 = 0x00000193
	w4 = DPB(w4, 0x00000100, 16)
	w20 = w20 * w4
	w20 = w3 ^ w20
	x5 = x5 + 1
	v28 = Mem0[x5:byte]
	w3 = (word32) v28
	branch w3 != 0x00000000 l00000000004539EC
	// succ:  l0000000000453A04 l00000000004539EC
l0000000000453A04:
	w26 = Mem0[x23 + 8:word32]
	x27 = Mem0[x23:word64]
	w26 = w26 - 0x00000001
	w26 = w20 & w26
l0000000000453A80:
	v30 = sp + 16
	x19 = Mem0[v30:word64]
	v30 = v30 + 8
	x20 = Mem0[v30:word64]
	v31 = sp + 32
	x21 = Mem0[v31:word64]
	v31 = v31 + 8
	x22 = Mem0[v31:word64]
	v32 = sp + 48
	x23 = Mem0[v32:word64]
	v32 = v32 + 8
	x24 = Mem0[v32:word64]
	v33 = sp + 64
	x25 = Mem0[v33:word64]
	v33 = v33 + 8
	x26 = Mem0[v33:word64]
	x27 = Mem0[sp + 80:word64]
	x29 = Mem0[sp:word64]
	sp = sp + 8
	x30 = Mem0[sp:word64]
	sp = sp + 96
	return
	// succ:  hash_remove_exit
l0000000000453A9C:
	x0 = 0x0000000000000000
	v34 = sp + 16
	x19 = Mem0[v34:word64]
	v34 = v34 + 8
	x20 = Mem0[v34:word64]
	v35 = sp + 32
	x21 = Mem0[v35:word64]
	v35 = v35 + 8
	x22 = Mem0[v35:word64]
	v36 = sp + 48
	x23 = Mem0[v36:word64]
	v36 = v36 + 8
	x24 = Mem0[v36:word64]
	v37 = sp + 64
	x25 = Mem0[v37:word64]
	v37 = v37 + 8
	x26 = Mem0[v37:word64]
	x27 = Mem0[sp + 80:word64]
	x29 = Mem0[sp:word64]
	sp = sp + 8
	x30 = Mem0[sp:word64]
	sp = sp + 96
	return
	// succ:  hash_remove_exit
l0000000000453ABC:
	w20 = w22
	goto l0000000000453A04
	// succ:  l0000000000453A04
l0000000000453ACC:
	x0 = x1
	goto l0000000000453A80
	// succ:  l0000000000453A80
hash_remove_exit:


// hash_insert
// Return size: 0
void hash_insert()
hash_insert_entry:
	// succ:  l0000000000453ADC
l0000000000453ADC:
	sp = fp
	sp = sp + -64
	Mem0[sp:word64] = x29
	sp = sp + 8
	Mem0[sp:word64] = x30
	x29 = x31 + 0x0000000000000000
	v8 = sp + 16
	Mem0[v8:word64] = x19
	v8 = v8 + 8
	Mem0[v8:word64] = x20
	v11 = sp + 32
	Mem0[v11:word64] = x21
	v11 = v11 + 8
	Mem0[v11:word64] = x22
	x20 = x1
	x21 = x0
	branch x1 == 0x0000000000000000 l0000000000453BAC
	// succ:  l0000000000453AF8 l0000000000453BAC
l0000000000453AF8:
	w3 = w2 & 0x00000001
	branch (w2 & 0x00000001) == 0x00000000 l0000000000453B88
	// succ:  l0000000000453B00 l0000000000453B88
l0000000000453B00:
	v16 = Mem0[x21:byte]
	w2 = (word32) v16
	x4 = x21
	w19 = 0x00000000
	branch w2 == 0x00000000 l0000000000453B28
	// succ:  l0000000000453B10 l0000000000453B28
l0000000000453B10:
	w3 = 0x00000193
	w3 = DPB(w3, 0x00000100, 16)
	w19 = w19 * w3
	w19 = w2 ^ w19
	x4 = x4 + 1
	v19 = Mem0[x4:byte]
	w2 = (word32) v19
	branch w2 != 0x00000000 l0000000000453B10
	// succ:  l0000000000453B28 l0000000000453B10
l0000000000453B28:
	w1 = Mem0[x20 + 8:word32]
	w2 = 0x00000108
	w22 = w1 - 0x00000001
	x1 = 0x00000000004AD000
	x1 = x1 + 0xFFFFFFFFFFFFFCF8
	x0 = 0x0000000000000020
	call sh_xmalloc (retsize: 0;)
	x2 = Mem0[x20:word64]
	w22 = w19 & w22
l0000000000453B88:
	x0 = x21
	x1 = x20
	w2 = w3
	call hash_search (retsize: 0;)
	branch x0 == 0x0000000000000000 l0000000000453B00
	// succ:  l0000000000453B9C l0000000000453B00
l0000000000453B9C:
	v24 = sp + 16
	x19 = Mem0[v24:word64]
	v24 = v24 + 8
	x20 = Mem0[v24:word64]
	v25 = sp + 32
	x21 = Mem0[v25:word64]
	v25 = v25 + 8
	x22 = Mem0[v25:word64]
	x29 = Mem0[sp:word64]
	sp = sp + 8
	x30 = Mem0[sp:word64]
	sp = sp + 64
	return
	// succ:  hash_insert_exit
l0000000000453BAC:
	w0 = w1
	Mem0[x29 + 48:word64] = x2
	call hash_create (retsize: 0;)
	x20 = x0
	x2 = Mem0[x29 + 48:word64]
	goto l0000000000453AF8
	// succ:  l0000000000453AF8
hash_insert_exit:


// hash_flush
// Return size: 0
void hash_flush()
hash_flush_entry:
	// succ:  l0000000000453BC4
l0000000000453BC4:
	sp = fp
	sp = sp + -80
	Mem0[sp:word64] = x29
	sp = sp + 8
	Mem0[sp:word64] = x30
	x29 = x31 + 0x0000000000000000
	v8 = sp + 32
	Mem0[v8:word64] = x21
	v8 = v8 + 8
	Mem0[v8:word64] = x22
	v11 = sp + 48
	Mem0[v11:word64] = x23
	v11 = v11 + 8
	Mem0[v11:word64] = x24
	v14 = sp + 16
	Mem0[v14:word64] = x19
	v14 = v14 + 8
	Mem0[v14:word64] = x20
	Mem0[sp + 64:word64] = x25
	x24 = x0
	x22 = x1
	branch x0 == 0x0000000000000000 l0000000000453C8C
	// succ:  l0000000000453BE8 l0000000000453C8C
l0000000000453BE8:
	w0 = Mem0[x0 + 12:word32]
	branch w0 == 0x00000000 l0000000000453C8C
	// succ:  l0000000000453BF0 l0000000000453C8C
l0000000000453BF0:
	w1 = Mem0[x24 + 8:word32]
	x23 = 0x0000000000000000
	x21 = 0x00000000004AD000
	NZCV = cond(w1 - w31)
	w25 = w23
	x21 = x21 + 0xFFFFFFFFFFFFFCF8
	branch Test(LE,ZCV) l0000000000453C88
	// succ:  l0000000000453C0C l0000000000453C88
l0000000000453C0C:
	x0 = Mem0[x24:word64]
	x19 = Mem0[x0 + x23:word64]
	x0 = x0 + x23
	branch x19 != 0x0000000000000000 l0000000000453C4C
	// succ:  l0000000000453C1C l0000000000453C4C
l0000000000453C1C:
	goto l0000000000453C74
	// succ:  l0000000000453C74
l0000000000453C20:
	call x22 (retsize: 0;)
	// succ:  l0000000000453C24
l0000000000453C24:
	x0 = Mem0[x19 + 8:word64]
	x1 = x21
	w2 = 0x00000132
	call sh_xfree (retsize: 0;)
	x0 = x19
	x1 = x21
	w2 = 0x00000133
	call sh_xfree (retsize: 0;)
	branch x20 == 0x0000000000000000 l0000000000453C68
	// succ:  l0000000000453C48 l0000000000453C68
l0000000000453C48:
	x19 = x20
	// succ:  l0000000000453C4C
l0000000000453C4C:
	x20 = Mem0[x19:word64]
	x0 = Mem0[x19 + 16:word64]
	branch x22 != 0x0000000000000000 l0000000000453C20
	// succ:  l0000000000453C58 l0000000000453C20
l0000000000453C58:
	x1 = x21
	w2 = 0x00000131
	call sh_xfree (retsize: 0;)
	goto l0000000000453C24
	// succ:  l0000000000453C24
l0000000000453C68:
	x0 = Mem0[x24:word64]
	w1 = Mem0[x24 + 8:word32]
	x0 = x0 + x23
	// succ:  l0000000000453C74
l0000000000453C74:
	w25 = w25 + 0x00000001
	Mem0[x0:word64] = 0x0000000000000000
	NZCV = cond(w1 - w25)
	x23 = x23 + 0x0000000000000008
	branch Test(GT,NZV) l0000000000453C0C
	// succ:  l0000000000453C88 l0000000000453C0C
l0000000000453C88:
	Mem0[x24 + 12:word32] = 0x00000000
	// succ:  l0000000000453C8C
l0000000000453C8C:
	v25 = sp + 16
	x19 = Mem0[v25:word64]
	v25 = v25 + 8
	x20 = Mem0[v25:word64]
	v26 = sp + 32
	x21 = Mem0[v26:word64]
	v26 = v26 + 8
	x22 = Mem0[v26:word64]
	v27 = sp + 48
	x23 = Mem0[v27:word64]
	v27 = v27 + 8
	x24 = Mem0[v27:word64]
	x25 = Mem0[sp + 64:word64]
	x29 = Mem0[sp:word64]
	sp = sp + 8
	x30 = Mem0[sp:word64]
	sp = sp + 80
	return
	// succ:  hash_flush_exit
hash_flush_exit:


// hash_dispose
// Return size: 0
void hash_dispose()
hash_dispose_entry:
	// succ:  l0000000000453CA4
l0000000000453CA4:
	sp = fp
	sp = sp + -32
	Mem0[sp:word64] = x29
	sp = sp + 8
	Mem0[sp:word64] = x30
	x29 = x31 + 0x0000000000000000
	v6 = sp + 16
	Mem0[v6:word64] = x19
	v6 = v6 + 8
	Mem0[v6:word64] = x20
	x19 = 0x00000000004AD000
	x20 = x0
	x19 = x19 + 0xFFFFFFFFFFFFFCF8
	x0 = Mem0[x0:word64]
	x1 = x19
	w2 = 0x00000140
	call sh_xfree (retsize: 0;)
	x0 = x20
	x1 = x19
	v12 = sp + 16
	x19 = Mem0[v12:word64]
	v12 = v12 + 8
	x20 = Mem0[v12:word64]
	x29 = Mem0[sp:word64]
	sp = sp + 8
	x30 = Mem0[sp:word64]
	sp = sp + 32
	w2 = 0x00000141
	// succ:  l0000000000453CE0_thunk_sh_xfree
l0000000000453CE0_thunk_sh_xfree:
	call sh_xfree (retsize: 0;)
	return
	// succ:  hash_dispose_exit
hash_dispose_exit:


// hash_walk
// Return size: 0
void hash_walk()
hash_walk_entry:
	// succ:  l0000000000453CE4
l0000000000453CE4:
	sp = fp
	sp = sp + -64
	Mem0[sp:word64] = x29
	sp = sp + 8
	Mem0[sp:word64] = x30
	x29 = x31 + 0x0000000000000000
	v6 = sp + 16
	Mem0[v6:word64] = x19
	v6 = v6 + 8
	Mem0[v6:word64] = x20
	v9 = sp + 32
	Mem0[v9:word64] = x21
	v9 = v9 + 8
	Mem0[v9:word64] = x22
	Mem0[sp + 48:word64] = x23
	x21 = x0
	x20 = x1
	branch x0 == 0x0000000000000000 l0000000000453D3C
	// succ:  l0000000000453D04 l0000000000453D3C
l0000000000453D04:
	w0 = Mem0[x0 + 12:word32]
	branch w0 == 0x00000000 l0000000000453D3C
	// succ:  l0000000000453D0C l0000000000453D3C
l0000000000453D0C:
	w0 = Mem0[x21 + 8:word32]
	NZCV = cond(w0 - w31)
	branch Test(LE,ZCV) l0000000000453D3C
	// succ:  l0000000000453D18 l0000000000453D3C
l0000000000453D18:
	x22 = 0x0000000000000000
	w23 = w22
	// succ:  l0000000000453D20
l0000000000453D20:
	x1 = Mem0[x21:word64]
	x19 = Mem0[x1 + x22:word64]
	branch x19 != 0x0000000000000000 l0000000000453D58
	// succ:  l0000000000453D2C l0000000000453D58
l0000000000453D2C:
	w23 = w23 + 0x00000001
	NZCV = cond(w0 - w23)
	x22 = x22 + 0x0000000000000008
	branch Test(GT,NZV) l0000000000453D20
	// succ:  l0000000000453D3C l0000000000453D20
l0000000000453D3C:
	v22 = sp + 16
	x19 = Mem0[v22:word64]
	v22 = v22 + 8
	x20 = Mem0[v22:word64]
	v23 = sp + 32
	x21 = Mem0[v23:word64]
	v23 = v23 + 8
	x22 = Mem0[v23:word64]
	x23 = Mem0[sp + 48:word64]
	x29 = Mem0[sp:word64]
	sp = sp + 8
	x30 = Mem0[sp:word64]
	sp = sp + 64
	return
	// succ:  hash_walk_exit
l0000000000453D50:
	x19 = Mem0[x19:word64]
	branch x19 == 0x0000000000000000 l0000000000453D68
	// succ:  l0000000000453D58 l0000000000453D68
l0000000000453D58:
	x0 = x19
	call x20 (retsize: 0;)
	branch (w0 & 0x00000000) == 0x00000000 l0000000000453D50
	// succ:  l0000000000453D64 l0000000000453D50
l0000000000453D64:
	goto l0000000000453D3C
	// succ:  l0000000000453D3C
l0000000000453D68:
	w0 = Mem0[x21 + 8:word32]
	w23 = w23 + 0x00000001
	NZCV = cond(w0 - w23)
	x22 = x22 + 0x0000000000000008
	branch Test(GT,NZV) l0000000000453D20
	// succ:  l0000000000453D7C l0000000000453D20
l0000000000453D7C:
	goto l0000000000453D3C
	// succ:  l0000000000453D3C
hash_walk_exit:


// fn0000000000453D80
// Return size: 0
void fn0000000000453D80()
fn0000000000453D80_entry:
	// succ:  l0000000000453D80
l0000000000453D80:
	sp = fp
	sp = sp + -160
	Mem0[sp:word64] = x29
	sp = sp + 8
	Mem0[sp:word64] = x30
	x29 = x31 + 0x0000000000000000
	v8 = sp + 16
	Mem0[v8:word64] = x19
	v8 = v8 + 8
	Mem0[v8:word64] = x20
	x20 = 0x00000000004E1000
	x20 = x20 + 0x0000000000000098
	x1 = Mem0[x20:word64]
fn0000000000453D80_exit:


// fn0000000000453E0C
// Return size: 0
void fn0000000000453E0C()
fn0000000000453E0C_entry:
	// succ:  l0000000000453E0C
l0000000000453E0C:
	sp = fp
	sp = sp + -208
	Mem0[sp:word64] = x29
	sp = sp + 8
	Mem0[sp:word64] = x30
	x29 = x31 + 0x0000000000000000
	v8 = sp + 64
	Mem0[v8:word64] = x25
	v8 = v8 + 8
	Mem0[v8:word64] = x26
	v11 = sp + 32
	Mem0[v11:word64] = x21
	v11 = v11 + 8
	Mem0[v11:word64] = x22
	v14 = sp + 48
	Mem0[v14:word64] = x23
	v14 = v14 + 8
	Mem0[v14:word64] = x24
	v17 = sp + 16
	Mem0[v17:word64] = x19
	v17 = v17 + 8
	Mem0[v17:word64] = x20
	x25 = 0x00000000004E1000
	x26 = x1
	call full_pathname (retsize: 0;)
	x2 = x25 + 0x0000000000000098
	w21 = Mem0[x2 + 8:word32]
	x24 = x0
	NZCV = cond(w21 - w31)
	branch Test(LE,ZCV) l0000000000453EF8
	// succ:  l0000000000453E44 l0000000000453EF8
l0000000000453E44:
	x19 = 0x0000000000000000
	x22 = Mem0[x2:word64]
	v26 = Mem0[x0:byte]
	w23 = (word32) v26
	w20 = w19
	goto l0000000000453E68
	// succ:  l0000000000453E68
l0000000000453E58:
	w20 = w20 + 0x00000001
	NZCV = cond(w20 - w21)
	x19 = x19 + 0x0000000000000008
	branch Test(EQ,Z) l0000000000453EFC
	// succ:  l0000000000453E68 l0000000000453EFC
l0000000000453E68:
	x2 = Mem0[x22 + x19:word64]
	x0 = Mem0[x2:word64]
	v31 = Mem0[x0:byte]
	w2 = (word32) v31
	NZCV = cond(w2 - w23)
	branch Test(NE,Z) l0000000000453E58
	// succ:  l0000000000453E7C l0000000000453E58
l0000000000453E7C:
	x1 = x24
	strcmp(x0, x1)
	sp = sp + 0xFFFFFFFFFFFFFFF8
	branch w0 != 0x00000000 l0000000000453E58
	// succ:  l0000000000453E88 l0000000000453E58
l0000000000453E88:
	x0 = x24
	x1 = x29 + 0x0000000000000050
	call mailstat (retsize: 0;)
	branch w0 != 0x00000000 l0000000000453EC8
	// succ:  l0000000000453E98 l0000000000453EC8
l0000000000453E98:
	x25 = x25 + 0x0000000000000098
	x0 = Mem0[x25:word64]
	x2 = Mem0[x29 + 168:word64]
	x0 = Mem0[x0 + x19:word64]
	x1 = Mem0[x29 + 128:word64]
	w3 = Mem0[x0 + 40:word32]
	w4 = w3 | 0x00000001
	x3 = Mem0[x29 + 152:word64]
	Mem0[x0 + 24:word64] = x2
	Mem0[x0 + 16:word64] = x3
	Mem0[x0 + 32:word64] = x1
	Mem0[x0 + 40:word32] = w4
	// succ:  l0000000000453EC8
l0000000000453EC8:
	x1 = 0x00000000004AD000
	x0 = x24
	x1 = x1 + 0xFFFFFFFFFFFFFD10
	w2 = 0x000000BA
	call sh_xfree (retsize: 0;)
	w0 = w20
	v36 = sp + 32
	x21 = Mem0[v36:word64]
	v36 = v36 + 8
	x22 = Mem0[v36:word64]
	v37 = sp + 16
	x19 = Mem0[v37:word64]
	v37 = v37 + 8
	x20 = Mem0[v37:word64]
	v38 = sp + 48
	x23 = Mem0[v38:word64]
	v38 = v38 + 8
	x24 = Mem0[v38:word64]
	v39 = sp + 64
	x25 = Mem0[v39:word64]
	v39 = v39 + 8
	x26 = Mem0[v39:word64]
	x29 = Mem0[sp:word64]
	sp = sp + 8
	x30 = Mem0[sp:word64]
	sp = sp + 208
	return
	// succ:  fn0000000000453E0C_exit
l0000000000453EF8:
	x22 = Mem0[x2:word64]
	// succ:  l0000000000453EFC
l0000000000453EFC:
	w4 = w21 + 0x00000001
	x20 = 0x00000000004AD000
fn0000000000453E0C_exit:


// time_to_check_mail
// Return size: 0
void time_to_check_mail()
time_to_check_mail_entry:
	// succ:  l0000000000453FDC
l0000000000453FDC:
	sp = fp
	sp = sp + -32
	Mem0[sp:word64] = x29
	sp = sp + 8
	Mem0[sp:word64] = x30
	x29 = x31 + 0x0000000000000000
	x0 = 0x00000000004AC000
	x0 = x0 + 0xFFFFFFFFFFFFFCA8
	call get_string_value (retsize: 0;)
	branch x0 == 0x0000000000000000 l0000000000454040
	// succ:  l0000000000453FF4 l0000000000454040
l0000000000453FF4:
	x1 = x29 + 0x0000000000000010
	call legal_number (retsize: 0;)
	branch w0 == 0x00000000 l0000000000454040
	// succ:  l0000000000454000 l0000000000454040
l0000000000454000:
	x0 = Mem0[x29 + 16:word64]
	branch (w0 & 0x00000000) != 0x00000000 l0000000000454040
	// succ:  l0000000000454008 l0000000000454040
l0000000000454008:
	x0 = 0x0000000000000000
	time(x0)
	sp = sp + 0xFFFFFFFFFFFFFFF8
	x1 = Mem0[x29 + 16:word64]
	x2 = x0
	w0 = 0x00000001
	branch x1 == 0x0000000000000000 l0000000000454044
	// succ:  l0000000000454020 l0000000000454044
l0000000000454020:
	x0 = 0x00000000004E1000
	x0 = x0 + 0x0000000000000098
	x0 = Mem0[x0 + 16:word64]
	x29 = Mem0[sp:word64]
	sp = sp + 8
	x30 = Mem0[sp:word64]
	sp = sp + 32
	x2 = x2 - x0
	x31 = x1 - x2
	NZCV = cond(x31)
	w0 = (word32) Test(LE,ZCV)
	return
	// succ:  time_to_check_mail_exit
l0000000000454040:
	w0 = 0x00000000
	// succ:  l0000000000454044
l0000000000454044:
	x29 = Mem0[sp:word64]
	sp = sp + 8
	x30 = Mem0[sp:word64]
	sp = sp + 32
	return
	// succ:  time_to_check_mail_exit
time_to_check_mail_exit:


// reset_mail_timer
// Return size: 0
void reset_mail_timer()
reset_mail_timer_entry:
	// succ:  l000000000045404C
l000000000045404C:
	sp = fp
	sp = sp + -16
	Mem0[sp:word64] = x29
	sp = sp + 8
	Mem0[sp:word64] = x30
	x29 = x31 + 0x0000000000000000
	x0 = 0x0000000000000000
	time(x0)
	sp = sp + 0xFFFFFFFFFFFFFFF8
	x1 = 0x00000000004E1000
	x1 = x1 + 0x0000000000000098
	Mem0[x1 + 16:word64] = x0
	x29 = Mem0[sp:word64]
	sp = sp + 8
	x30 = Mem0[sp:word64]
	sp = sp + 16
	return
	// succ:  reset_mail_timer_exit
reset_mail_timer_exit:


// reset_mail_files
// Return size: 0
void reset_mail_files()
reset_mail_files_entry:
	// succ:  l0000000000454070
l0000000000454070:
	sp = fp
	x0 = 0x00000000004E1000
	x0 = x0 + 0x0000000000000098
	w2 = Mem0[x0 + 8:word32]
	NZCV = cond(w2 - w31)
	branch Test(LE,ZCV) l00000000004540BC
	// succ:  l0000000000454084 l00000000004540BC
l0000000000454084:
	x0 = Mem0[x0:word64]
	w2 = w2 - 0x00000001
	x1 = x0 + 0x0000000000000008
	x2 = x1 + (uint64) ((word32) w2)
	goto l000000000045409C
	// succ:  l000000000045409C
l0000000000454098:
	x1 = x1 + 0x0000000000000008
	// succ:  l000000000045409C
l000000000045409C:
	x0 = Mem0[x0:word64]
	x31 = x1 - x2
	NZCV = cond(x31)
	Mem0[x0 + 24:word64] = 0x0000000000000000
	Mem0[x0 + 16:word64] = 0x0000000000000000
	Mem0[x0 + 32:word64] = 0x0000000000000000
	Mem0[x0 + 40:word32] = 0x00000000
	x0 = x1
	branch Test(NE,Z) l0000000000454098
	// succ:  l00000000004540BC l0000000000454098
l00000000004540BC:
	return
	// succ:  reset_mail_files_exit
reset_mail_files_exit:


// free_mail_files
// Return size: 0
void free_mail_files()
free_mail_files_entry:
	// succ:  l00000000004540C0
l00000000004540C0:
	sp = fp
	sp = sp + -64
	Mem0[sp:word64] = x29
	sp = sp + 8
	Mem0[sp:word64] = x30
	x29 = x31 + 0x0000000000000000
	v8 = sp + 48
	Mem0[v8:word64] = x23
	v8 = v8 + 8
	Mem0[v8:word64] = x24
	x24 = 0x00000000004E1000
	x23 = x24 + 0x0000000000000098
	w0 = Mem0[x23 + 8:word32]
	v12 = sp + 16
	Mem0[v12:word64] = x19
	v12 = v12 + 8
	Mem0[v12:word64] = x20
	v15 = sp + 32
	Mem0[v15:word64] = x21
	v15 = v15 + 8
	Mem0[v15:word64] = x22
	NZCV = cond(w0 - w31)
	branch Test(LE,ZCV) l000000000045414C
	// succ:  l00000000004540E8 l000000000045414C
l00000000004540E8:
	x20 = 0x0000000000000000
	x21 = 0x00000000004AD000
	w22 = w20
	x21 = x21 + 0xFFFFFFFFFFFFFD10
	// succ:  l00000000004540F8
l00000000004540F8:
	x0 = Mem0[x23:word64]
	x1 = x21
	x19 = Mem0[x0 + x20:word64]
	w2 = 0x000000E4
	x0 = Mem0[x19:word64]
	w22 = w22 + 0x00000001
	call sh_xfree (retsize: 0;)
	x3 = Mem0[x19 + 8:word64]
	x1 = x21
	x0 = x3
	w2 = 0x000000E5
	branch x3 == 0x0000000000000000 l000000000045412C
	// succ:  l0000000000454128 l000000000045412C
l0000000000454128:
	call sh_xfree (retsize: 0;)
	// succ:  l000000000045412C
l000000000045412C:
	x0 = x19
	x1 = x21
	w2 = 0x000000E6
	call sh_xfree (retsize: 0;)
	w0 = Mem0[x23 + 8:word32]
	x20 = x20 + 0x0000000000000008
	NZCV = cond(w0 - w22)
	branch Test(GT,NZV) l00000000004540F8
	// succ:  l000000000045414C l00000000004540F8
l000000000045414C:
	x0 = x24 + 0x0000000000000098
	x0 = Mem0[x0:word64]
	branch x0 == 0x0000000000000000 l0000000000454168
	// succ:  l0000000000454158 l0000000000454168
l0000000000454158:
	x1 = 0x00000000004AD000
	x1 = x1 + 0xFFFFFFFFFFFFFD10
	w2 = 0x000000F3
	call sh_xfree (retsize: 0;)
	// succ:  l0000000000454168
l0000000000454168:
	x24 = x24 + 0x0000000000000098
	Mem0[x24 + 8:word32] = 0x00000000
	Mem0[x24:word64] = 0x0000000000000000
	v25 = sp + 16
	x19 = Mem0[v25:word64]
	v25 = v25 + 8
	x20 = Mem0[v25:word64]
	v26 = sp + 32
	x21 = Mem0[v26:word64]
	v26 = v26 + 8
	x22 = Mem0[v26:word64]
	v27 = sp + 48
	x23 = Mem0[v27:word64]
	v27 = v27 + 8
	x24 = Mem0[v27:word64]
	x29 = Mem0[sp:word64]
	sp = sp + 8
	x30 = Mem0[sp:word64]
	sp = sp + 64
	return
	// succ:  free_mail_files_exit
free_mail_files_exit:


// make_default_mailpath
// Return size: 0
void make_default_mailpath()
make_default_mailpath_entry:
	// succ:  l0000000000454188
l0000000000454188:
	sp = fp
	x0 = 0x0000000000000000
	return
	// succ:  make_default_mailpath_exit
make_default_mailpath_exit:


// remember_mail_dates
// Return size: 0
void remember_mail_dates()
remember_mail_dates_entry:
	// succ:  l0000000000454190
l0000000000454190:
	sp = fp
	sp = sp + -64
	Mem0[sp:word64] = x29
	sp = sp + 8
	Mem0[sp:word64] = x30
	x29 = x31 + 0x0000000000000000
	x0 = 0x00000000004AC000
	x0 = x0 + 0xFFFFFFFFFFFFFEB8
	v9 = sp + 16
	Mem0[v9:word64] = x19
	v9 = v9 + 8
	Mem0[v9:word64] = x20
	Mem0[sp + 32:word64] = x21
	Mem0[x29 + 48:word32] = 0x00000000
	call get_string_value (retsize: 0;)
	x20 = x0
	branch x0 == 0x0000000000000000 l00000000004542A0
	goto l00000000004541B8
	// succ:  l00000000004541B8 l00000000004542A0
l0000000000454190:
l00000000004541B8:
	x0 = x20
	x1 = x29 + 0x0000000000000030
	x21 = 0x00000000004AD000
	call extract_colon_unit (retsize: 0;)
	x21 = x21 + 0xFFFFFFFFFFFFFD10
	x19 = x0
	branch x0 == 0x0000000000000000 l0000000000454244
	// succ:  l00000000004541D4 l0000000000454244
l00000000004541D4:
	x1 = x0
	w3 = 0x00000000
	goto l00000000004541FC
	// succ:  l00000000004541FC
l00000000004541E0:
	branch Test(EQ,Z) l0000000000454254
	// succ:  l00000000004541E4 l0000000000454254
l00000000004541E4:
	w31 = w2 - 0x00000025
	NZCV = cond(w31)
	branch Test(EQ,Z) l000000000045427C
	// succ:  l00000000004541EC l000000000045427C
l00000000004541EC:
	w31 = w2 - 0x0000003F
	NZCV = cond(w31)
	branch Test(EQ,Z) l000000000045427C
	// succ:  l00000000004541F4 l000000000045427C
l00000000004541F4:
	x1 = x1 + 0x0000000000000001
	NZCV = cond(x1)
	branch Test(EQ,Z) l0000000000454218
	// succ:  l00000000004541FC l0000000000454218
l00000000004541FC:
	v14 = Mem0[x1:byte]
	w2 = (word32) v14
	w31 = w2 - 0x0000005C
	NZCV = cond(w31)
	branch w2 == 0x00000000 l000000000045425C
	// succ:  l0000000000454208 l000000000045425C
l0000000000454208:
	branch w3 == 0x00000000 l00000000004541E0
	// succ:  l000000000045420C l00000000004541E0
l000000000045420C:
	x1 = x1 + 0x0000000000000001
	NZCV = cond(x1)
	w3 = 0x00000000
	branch Test(NE,Z) l00000000004541FC
	// succ:  l0000000000454218 l00000000004541FC
l0000000000454218:
	x0 = x19
	call fn0000000000453E0C (retsize: 0;)
	x0 = x19
	x1 = x21
	w2 = 0x0000018A
	call sh_xfree (retsize: 0;)
	// succ:  l0000000000454230
l0000000000454230:
	x0 = x20
	x1 = x29 + 0x0000000000000030
	call extract_colon_unit (retsize: 0;)
	x19 = x0
	branch x0 != 0x0000000000000000 l00000000004541D4
	// succ:  l0000000000454244 l00000000004541D4
l0000000000454244:
	v18 = sp + 16
	x19 = Mem0[v18:word64]
	v18 = v18 + 8
	x20 = Mem0[v18:word64]
	x21 = Mem0[sp + 32:word64]
	x29 = Mem0[sp:word64]
	sp = sp + 8
	x30 = Mem0[sp:word64]
	sp = sp + 64
	return
	// succ:  remember_mail_dates_exit
l0000000000454254:
	w3 = 0x00000001
	goto l00000000004541F4
	// succ:  l00000000004541F4
l000000000045425C:
	x1 = 0x0000000000000000
	x0 = x19
	call fn0000000000453E0C (retsize: 0;)
	x0 = x19
	x1 = x21
	w2 = 0x0000018A
	call sh_xfree (retsize: 0;)
	goto l0000000000454230
	// succ:  l0000000000454230
l000000000045427C:
	Mem0[x1:byte] = 0x00
	x0 = x19
	x1 = x1 + 0x0000000000000001
	call fn0000000000453E0C (retsize: 0;)
	x0 = x19
	x1 = x21
	w2 = 0x0000018A
	call sh_xfree (retsize: 0;)
	goto l0000000000454230
	// succ:  l0000000000454230
l00000000004542A0:
	x0 = 0x00000000004AC000
	x0 = x0 + 0xFFFFFFFFFFFFFEB0
	call get_string_value (retsize: 0;)
	branch x0 == 0x0000000000000000 l0000000000454244
	// succ:  l00000000004542B0 l0000000000454244
l00000000004542B0:
	x1 = x20
	call fn0000000000453E0C (retsize: 0;)
	goto l0000000000454244
	// succ:  l0000000000454244
remember_mail_dates_exit:


// init_mail_dates
// Return size: 0
void init_mail_dates()
init_mail_dates_entry:
	// succ:  l00000000004542BC
l00000000004542BC:
	sp = fp
	x0 = 0x00000000004E1000
	x0 = x0 + 0x0000000000000098
	x0 = Mem0[x0:word64]
	branch x0 == 0x0000000000000000 l00000000004542D0
	// succ:  l00000000004542CC l00000000004542D0
l00000000004542CC:
	return
	// succ:  init_mail_dates_exit
l00000000004542D0:
	// succ:  l00000000004542D0_thunk_remember_mail_dates
l00000000004542D0_thunk_remember_mail_dates:
	call remember_mail_dates (retsize: 0;)
	return
	// succ:  init_mail_dates_exit
init_mail_dates_exit:


// check_mail
// Return size: 0
void check_mail()
check_mail_entry:
	// succ:  l00000000004542D4
l00000000004542D4:
	sp = fp
	sp = sp + -256
	Mem0[sp:word64] = x29
	sp = sp + 8
	Mem0[sp:word64] = x30
	x29 = x31 + 0x0000000000000000
	v8 = sp + 64
	Mem0[v8:word64] = x25
	v8 = v8 + 8
	Mem0[v8:word64] = x26
	x25 = 0x00000000004AB000
	x0 = x25 + 0xFFFFFFFFFFFFFD88
	v12 = sp + 48
	Mem0[v12:word64] = x23
	v12 = v12 + 8
	Mem0[v12:word64] = x24
	v15 = sp + 16
	Mem0[v15:word64] = x19
	v15 = v15 + 8
	Mem0[v15:word64] = x20
	v18 = sp + 32
	Mem0[v18:word64] = x21
	v18 = v18 + 8
	Mem0[v18:word64] = x22
	v21 = sp + 80
	Mem0[v21:word64] = x27
	v21 = v21 + 8
	Mem0[v21:word64] = x28
	call get_string_value (retsize: 0;)
	x24 = x0
	branch x0 == 0x0000000000000000 l0000000000454328
	// succ:  l0000000000454304 l0000000000454328
l0000000000454304:
	strlen(x0)
	sp = sp + 0xFFFFFFFFFFFFFFF8
	x1 = 0x00000000004AD000
	w2 = 0x000001A3
	x1 = x1 + 0xFFFFFFFFFFFFFD10
	x0 = x0 + 0x0000000000000001
	call sh_xmalloc (retsize: 0;)
	x1 = x24
	strcpy(x0, x1)
	sp = sp + 0xFFFFFFFFFFFFFFF8
	x24 = x0
	// succ:  l0000000000454328
l0000000000454328:
	x21 = 0x00000000004E1000
	x0 = x21 + 0x0000000000000098
	w0 = Mem0[x0 + 8:word32]
	x19 = 0x0000000000000000
	NZCV = cond(w0 - w31)
	w20 = w19
	branch Test(LE,ZCV) l00000000004544D8
	// succ:  l0000000000454344 l00000000004544D8
l0000000000454344:
	x28 = 0x00000000004AD000
	x27 = 0x00000000004AD000
	x26 = 0x00000000004E3000
	x28 = x28 + 0xFFFFFFFFFFFFFD58
	x27 = x27 + 0xFFFFFFFFFFFFFD10
	x26 = x26 + 0x000000000000065C
	Mem0[x29 + 240:word64] = x28
	Mem0[x29 + 232:word64] = x27
	goto l0000000000454380
	// succ:  l0000000000454380
l0000000000454368:
	x2 = x21 + 0x0000000000000098
	w2 = Mem0[x2 + 8:word32]
	w20 = w20 + 0x00000001
	NZCV = cond(w2 - w20)
	x19 = x19 + 0x0000000000000008
	branch Test(LE,ZCV) l00000000004544D8
	// succ:  l0000000000454380 l00000000004544D8
l0000000000454380:
	x23 = x21 + 0x0000000000000098
	x2 = Mem0[x23:word64]
	x2 = Mem0[x2 + x19:word64]
	x22 = Mem0[x2:word64]
	v37 = Mem0[x22:byte]
	w3 = (word32) v37
	branch w3 == 0x00000000 l0000000000454368
	// succ:  l0000000000454398 l0000000000454368
l0000000000454398:
	x0 = x22
	x1 = x29 + 0x0000000000000060
	x27 = Mem0[x2 + 24:word64]
	call mailstat (retsize: 0;)
	x3 = Mem0[x29 + 144:word64]
	branch w0 != 0x00000000 l000000000045451C
	// succ:  l00000000004543B0 l000000000045451C
l00000000004543B0:
	x31 = x3 - x31
	NZCV = cond(x31)
	branch Test(LE,ZCV) l000000000045451C
	// succ:  l00000000004543B8 l000000000045451C
l00000000004543B8:
	x0 = Mem0[x29 + 184:word64]
	x31 = x27 - x0
	NZCV = cond(x31)
	branch Test(GE,NZV) l0000000000454458
	// succ:  l00000000004543C4 l0000000000454458
l00000000004543C4:
	x0 = Mem0[x23:word64]
	x0 = Mem0[x0 + x19:word64]
	x23 = Mem0[x0 + 8:word64]
	x28 = x23
	branch x23 == 0x0000000000000000 l00000000004545F4
	// succ:  l00000000004543D8 l00000000004545F4
l00000000004543D8:
	x1 = x22
	w2 = 0x00000000
	x0 = x25 + 0xFFFFFFFFFFFFFD88
	call bind_variable (retsize: 0;)
	x27 = x21 + 0x0000000000000098
	x2 = Mem0[x27:word64]
	x1 = x29 + 0x0000000000000060
	x2 = Mem0[x2 + x19:word64]
	x0 = Mem0[x2:word64]
	x2 = Mem0[x2 + 32:word64]
	Mem0[x29 + 224:word64] = x2
	call mailstat (retsize: 0;)
	branch w0 == 0x00000000 l0000000000454564
	// succ:  l000000000045440C l0000000000454564
l000000000045440C:
	w0 = w20
	call fn0000000000453D80 (retsize: 0;)
	x0 = x21 + 0x0000000000000098
	x0 = Mem0[x0:word64]
	x0 = Mem0[x0 + x19:word64]
	x1 = Mem0[x0 + 24:word64]
	x0 = Mem0[x0 + 16:word64]
	x31 = x1 - x0
	NZCV = cond(x31)
	branch Test(LE,ZCV) l0000000000454368
	// succ:  l0000000000454430 l0000000000454368
l0000000000454430:
	x0 = x28
	w1 = 0x00000001
	call expand_string_to_string (retsize: 0;)
	x23 = x0
	branch x0 == 0x0000000000000000 l00000000004545D8
	// succ:  l0000000000454444 l00000000004545D8
l0000000000454444:
	puts(x0)
	sp = sp + 0xFFFFFFFFFFFFFFF8
	x1 = Mem0[x29 + 232:word64]
	x0 = x23
	w2 = 0x000001D1
	call sh_xfree (retsize: 0;)
	// succ:  l0000000000454458
l0000000000454458:
	w2 = Mem0[x26:word32]
	branch w2 == 0x00000000 l0000000000454368
	// succ:  l0000000000454460 l0000000000454368
l0000000000454460:
	x0 = x21 + 0x0000000000000098
	x0 = Mem0[x0:word64]
	x1 = x29 + 0x0000000000000060
	x2 = Mem0[x0 + x19:word64]
	x0 = Mem0[x2:word64]
	x23 = Mem0[x2 + 16:word64]
	call mailstat (retsize: 0;)
	branch w0 != 0x00000000 l0000000000454368
	// succ:  l0000000000454480 l0000000000454368
l0000000000454480:
	x0 = Mem0[x29 + 144:word64]
	x31 = x0 - x31
	NZCV = cond(x31)
	branch Test(LE,ZCV) l0000000000454368
	// succ:  l000000000045448C l0000000000454368
l000000000045448C:
	x0 = Mem0[x29 + 168:word64]
	x31 = x23 - x0
	NZCV = cond(x31)
	branch Test(GE,NZV) l0000000000454368
	// succ:  l0000000000454498 l0000000000454368
l0000000000454498:
	w0 = w20
	call fn0000000000453D80 (retsize: 0;)
	x1 = Mem0[x29 + 240:word64]
	w2 = 0x00000005
	x0 = 0x0000000000000000
	dcgettext(x0, x1, x2)
	sp = sp + 0xFFFFFFFFFFFFFFF8
	x1 = x0
	x2 = x22
	w0 = 0x00000001
	__printf_chk(x0, x1, Mem0[sp:<unknown>])
	sp = sp + 0xFFFFFFFFFFFFFFF8
	x2 = x21 + 0x0000000000000098
	w2 = Mem0[x2 + 8:word32]
	w20 = w20 + 0x00000001
	NZCV = cond(w2 - w20)
	x19 = x19 + 0x0000000000000008
	branch Test(GT,NZV) l0000000000454380
	// succ:  l00000000004544D8 l0000000000454380
l00000000004544D8:
	branch x24 == 0x0000000000000000 l00000000004545B4
	// succ:  l00000000004544DC l00000000004545B4
l00000000004544DC:
	x1 = x24
	x0 = x25 + 0xFFFFFFFFFFFFFD88
	w2 = 0x00000000
	call bind_variable (retsize: 0;)
	x1 = 0x00000000004AD000
	x0 = x24
	x1 = x1 + 0xFFFFFFFFFFFFFD10
	w2 = 0x000001E1
	call sh_xfree (retsize: 0;)
	v30 = sp + 16
	x19 = Mem0[v30:word64]
	v30 = v30 + 8
	x20 = Mem0[v30:word64]
	v31 = sp + 32
	x21 = Mem0[v31:word64]
	v31 = v31 + 8
	x22 = Mem0[v31:word64]
	v32 = sp + 48
	x23 = Mem0[v32:word64]
	v32 = v32 + 8
	x24 = Mem0[v32:word64]
	v33 = sp + 64
	x25 = Mem0[v33:word64]
	v33 = v33 + 8
	x26 = Mem0[v33:word64]
	v34 = sp + 80
	x27 = Mem0[v34:word64]
	v34 = v34 + 8
	x28 = Mem0[v34:word64]
	x29 = Mem0[sp:word64]
	sp = sp + 8
	x30 = Mem0[sp:word64]
	sp = sp + 256
	return
	// succ:  check_mail_exit
l000000000045451C:
	branch x3 != 0x0000000000000000 l0000000000454458
	// succ:  l0000000000454520 l0000000000454458
l0000000000454520:
	x0 = x21 + 0x0000000000000098
	x0 = Mem0[x0:word64]
	x2 = Mem0[x0 + x19:word64]
	x0 = Mem0[x2 + 32:word64]
	x31 = x0 - x31
	NZCV = cond(x31)
	branch Test(LE,ZCV) l0000000000454458
	// succ:  l0000000000454538 l0000000000454458
l0000000000454538:
	x1 = Mem0[x29 + 168:word64]
	w0 = Mem0[x2 + 40:word32]
	Mem0[x2 + 16:word64] = x1
	w1 = w0 | 0x00000001
	x0 = Mem0[x29 + 184:word64]
	Mem0[x2 + 32:word64] = x3
	Mem0[x2 + 24:word64] = x0
	Mem0[x2 + 40:word32] = w1
	w2 = Mem0[x26:word32]
	branch w2 == 0x00000000 l0000000000454368
	// succ:  l0000000000454560 l0000000000454368
l0000000000454560:
	goto l0000000000454460
	// succ:  l0000000000454460
l0000000000454564:
	x0 = Mem0[x29 + 144:word64]
	x1 = Mem0[x29 + 224:word64]
	x31 = x1 - x0
	NZCV = cond(x31)
	branch Test(GE,NZV) l000000000045440C
	// succ:  l0000000000454574 l000000000045440C
l0000000000454574:
	w0 = w20
	call fn0000000000453D80 (retsize: 0;)
	x0 = Mem0[x27:word64]
	x1 = Mem0[x0 + x19:word64]
	x0 = Mem0[x1 + 16:word64]
	x1 = Mem0[x1 + 24:word64]
	branch x23 != 0x0000000000000000 l0000000000454430
	// succ:  l0000000000454590 l0000000000454430
l0000000000454590:
	x31 = x0 - x1
	NZCV = cond(x31)
	branch Test(GE,NZV) l0000000000454430
	// succ:  l0000000000454598 l0000000000454430
l0000000000454598:
	x1 = 0x00000000004AD000
	x0 = x23
	x1 = x1 + 0xFFFFFFFFFFFFFD40
	w2 = 0x00000005
	dcgettext(x0, x1, x2)
	sp = sp + 0xFFFFFFFFFFFFFFF8
	x28 = x0
	goto l0000000000454430
	// succ:  l0000000000454430
l00000000004545B4:
	x0 = x25 + 0xFFFFFFFFFFFFFD88
	call unbind_variable (retsize: 0;)
	v41 = sp + 16
	x19 = Mem0[v41:word64]
	v41 = v41 + 8
	x20 = Mem0[v41:word64]
	v42 = sp + 32
	x21 = Mem0[v42:word64]
	v42 = v42 + 8
	x22 = Mem0[v42:word64]
	v43 = sp + 48
	x23 = Mem0[v43:word64]
	v43 = v43 + 8
	x24 = Mem0[v43:word64]
	v44 = sp + 64
	x25 = Mem0[v44:word64]
	v44 = v44 + 8
	x26 = Mem0[v44:word64]
	v45 = sp + 80
	x27 = Mem0[v45:word64]
	v45 = v45 + 8
	x28 = Mem0[v45:word64]
	x29 = Mem0[sp:word64]
	sp = sp + 8
	x30 = Mem0[sp:word64]
	sp = sp + 256
	return
	// succ:  check_mail_exit
l00000000004545D8:
	x0 = 0x00000000004DE000
	x1 = Mem0[x0 + 1648:word64]
	w0 = 0x0000000A
	_IO_putc(x0, x1)
	sp = sp + 0xFFFFFFFFFFFFFFF8
	w2 = Mem0[x26:word32]
	branch w2 == 0x00000000 l0000000000454368
	// succ:  l00000000004545F0 l0000000000454368
l00000000004545F0:
	goto l0000000000454460
	// succ:  l0000000000454460
l00000000004545F4:
	x1 = 0x00000000004AD000
	x0 = x23
	x1 = x1 + 0xFFFFFFFFFFFFFD28
	w2 = 0x00000005
	dcgettext(x0, x1, x2)
	sp = sp + 0xFFFFFFFFFFFFFFF8
	x28 = x0
	goto l00000000004543D8
	// succ:  l00000000004543D8
check_mail_exit:


// initialize_traps
// Return size: 0
void initialize_traps()
initialize_traps_entry:
	// succ:  l0000000000454610
l0000000000454610:
	sp = fp
	sp = sp + -48
	Mem0[sp:word64] = x29
	sp = sp + 8
	Mem0[sp:word64] = x30
	x29 = x31 + 0x0000000000000000
	v8 = sp + 16
	Mem0[v8:word64] = x19
	v8 = v8 + 8
	Mem0[v8:word64] = x20
	x1 = 0x00000000004E3000
	x20 = 0x00000000004E1000
	x5 = 0x0000000000454000
	x0 = x1 + 0xFFFFFFFFFFFFF878
	v14 = sp + 32
	Mem0[v14:word64] = x21
	v14 = v14 + 8
	Mem0[v14:word64] = x22
	x19 = x20 + 0x00000000000000B0
	x5 = x5 + 0x0000000000000610
	x21 = 0x00000000004E3000
	Mem0[x1 + 2168:word64] = 0x0000000000000000
	x2 = 0x00000000004E3000
	x1 = 0x00000000004E3000
	x6 = 0x00000000004E3000
	Mem0[x0 + 536:word64] = 0x0000000000000000
	Mem0[x0 + 528:word64] = 0x0000000000000000
	Mem0[x0 + 520:word64] = 0x0000000000000000
	Mem0[x19 + 268:word32] = 0x00000000
	Mem0[x19 + 264:word32] = 0x00000000
	Mem0[x19 + 260:word32] = 0x00000000
	Mem0[x19:word32] = 0x00000000
	Mem0[x21 + 1640:word64] = x5
	x2 = x2 + 0xFFFFFFFFFFFFF880
	x1 = x1 + 0x0000000000000670
	x0 = 0x0000000000000000
	x6 = x6 + 0xFFFFFFFFFFFFFA98
	// succ:  l000000000045467C
l000000000045467C:
	x4 = x0 + x6
	x3 = x19 + x0
	x0 = x0 + 0x0000000000000004
	Mem0[x4 + 4:word32] = 0x00000000
	Mem0[x2:word64] = 0x0000000000000000
	x2 = x2 + 8
	Mem0[x3 + 4:word32] = 0x00000000
	Mem0[x1:word64] = x5
	x1 = x1 + 8
	x31 = x0 - 0x0000000000000100
	NZCV = cond(x31)
	branch Test(NE,Z) l000000000045467C
	// succ:  l00000000004546A0 l000000000045467C
l00000000004546A0:
	x1 = 0x0000000000000000
	w0 = 0x00000011
	call set_signal_handler (retsize: 0;)
	x2 = x0
	x22 = x21 + 0x0000000000000668
	x1 = x2
	w0 = 0x00000011
	Mem0[x22 + 136:word64] = x2
	call set_signal_handler (retsize: 0;)
	x0 = Mem0[x22 + 136:word64]
	w2 = Mem0[x19 + 68:word32]
	x31 = x0 - 0x0000000000000001
	NZCV = cond(x31)
	branch Test(EQ,Z) l00000000004547D4
	// succ:  l00000000004546D4 l00000000004547D4
l00000000004546D4:
	w2 = w2 | 0x0000000C
	x1 = 0x0000000000000000
	x19 = x20 + 0x00000000000000B0
	w0 = 0x00000002
	Mem0[x19 + 68:word32] = w2
	call set_signal_handler (retsize: 0;)
	x2 = x0
	x22 = x21 + 0x0000000000000668
	x1 = x2
	w0 = 0x00000002
	Mem0[x22 + 16:word64] = x2
	call set_signal_handler (retsize: 0;)
	x0 = Mem0[x22 + 16:word64]
	w2 = Mem0[x19 + 8:word32]
	x31 = x0 - 0x0000000000000001
	NZCV = cond(x31)
	branch Test(EQ,Z) l00000000004547DC
	// succ:  l0000000000454714 l00000000004547DC
l0000000000454714:
	w2 = w2 | 0x00000004
	x1 = 0x0000000000000000
	x19 = x20 + 0x00000000000000B0
	w0 = 0x00000003
	Mem0[x19 + 8:word32] = w2
	call set_signal_handler (retsize: 0;)
	x2 = x0
	x22 = x21 + 0x0000000000000668
	x1 = x2
	w0 = 0x00000003
	Mem0[x22 + 24:word64] = x2
	call set_signal_handler (retsize: 0;)
	x0 = Mem0[x22 + 24:word64]
	w1 = Mem0[x19 + 12:word32]
	x31 = x0 - 0x0000000000000001
	NZCV = cond(x31)
	branch Test(EQ,Z) l00000000004547CC
	// succ:  l0000000000454754 l00000000004547CC
l0000000000454754:
	x0 = 0x00000000004DE000
	x19 = x20 + 0x00000000000000B0
	w1 = w1 | 0x00000004
	w0 = Mem0[x0 + 1704:word32]
	Mem0[x19 + 12:word32] = w1
	branch w0 != 0x00000000 l000000000045477C
	// succ:  l000000000045476C l000000000045477C
l000000000045476C:
	v24 = sp + 16
	x19 = Mem0[v24:word64]
	v24 = v24 + 8
	x20 = Mem0[v24:word64]
	v25 = sp + 32
	x21 = Mem0[v25:word64]
	v25 = v25 + 8
	x22 = Mem0[v25:word64]
	x29 = Mem0[sp:word64]
	sp = sp + 8
	x30 = Mem0[sp:word64]
	sp = sp + 48
	return
	// succ:  initialize_traps_exit
l000000000045477C:
	x1 = 0x0000000000000000
	w0 = 0x0000000F
	call set_signal_handler (retsize: 0;)
	x2 = x0
	x21 = x21 + 0x0000000000000668
	w0 = 0x0000000F
	x1 = x2
	Mem0[x21 + 120:word64] = x2
	call set_signal_handler (retsize: 0;)
	x0 = Mem0[x21 + 120:word64]
	x31 = x0 - 0x0000000000000001
	NZCV = cond(x31)
	w0 = Mem0[x19 + 60:word32]
	branch Test(EQ,Z) l00000000004547E4
	// succ:  l00000000004547B0 l00000000004547E4
l00000000004547B0:
	x20 = x20 + 0x00000000000000B0
	w0 = w0 | 0x00000004
	Mem0[x20 + 60:word32] = w0
	v26 = sp + 32
	x21 = Mem0[v26:word64]
	v26 = v26 + 8
	x22 = Mem0[v26:word64]
	v27 = sp + 16
	x19 = Mem0[v27:word64]
	v27 = v27 + 8
	x20 = Mem0[v27:word64]
	x29 = Mem0[sp:word64]
	sp = sp + 8
	x30 = Mem0[sp:word64]
	sp = sp + 48
	return
	// succ:  initialize_traps_exit
l00000000004547CC:
	w1 = w1 | 0x00000002
	goto l0000000000454754
	// succ:  l0000000000454754
l00000000004547D4:
	w2 = w2 | 0x00000002
	goto l00000000004546D4
	// succ:  l00000000004546D4
l00000000004547DC:
	w2 = w2 | 0x00000002
	goto l0000000000454714
	// succ:  l0000000000454714
l00000000004547E4:
	w0 = w0 | 0x00000002
	goto l00000000004547B0
	// succ:  l00000000004547B0
initialize_traps_exit:


// fn0000000000454830
// Return size: 0
void fn0000000000454830()
fn0000000000454830_entry:
	// succ:  l0000000000454830
l0000000000454830:
	sp = v3
	sp = sp + -64
	Mem0[sp:word64] = x29
	sp = sp + 8
	Mem0[sp:word64] = x30
	x29 = x31 + 0x0000000000000000
	Mem0[sp + 48:word64] = x23
	x23 = 0x00000000004E1000
	x2 = x23 + 0x00000000000000B0
	w1 = Mem0[x2:word32]
	v10 = sp + 32
	Mem0[v10:word64] = x21
	v10 = v10 + 8
	Mem0[v10:word64] = x22
	v13 = sp + 16
	Mem0[v13:word64] = x19
	v13 = v13 + 8
	Mem0[v13:word64] = x20
	x22 = x0
	branch (w1 & 0x00000001) == 0x00000000 l0000000000454878
	// succ:  l0000000000454858 l0000000000454878
l0000000000454858:
	x0 = 0x0000000000454000
	w1 = w1 & 0xFFFFFFFE
	x0 = x0 + 0x00000000000007EC
	Mem0[x2:word32] = w1
	x31 = x22 - x0
	NZCV = cond(x31)
	branch Test(EQ,Z) l0000000000454878
	// succ:  l0000000000454870 l0000000000454878
l0000000000454870:
	x0 = 0x00000000004E3000
	Mem0[x0 + 2168:word64] = 0x0000000000000000
	// succ:  l0000000000454878
l0000000000454878:
	x20 = x23 + 0x00000000000000B0
	x21 = 0x00000000004E3000
	x20 = x20 + 0x0000000000000004
	x21 = x21 + 0xFFFFFFFFFFFFF880
	w19 = 0x00000001
	// succ:  l000000000045488C
l000000000045488C:
	w1 = Mem0[x20:word32]
	w0 = w19
	branch (w1 & 0x00000001) == 0x00000000 l000000000045491C
	// succ:  l0000000000454898 l000000000045491C
l0000000000454898:
	x1 = Mem0[x21:word64]
	x31 = x1 - 0x0000000000000001
	NZCV = cond(x31)
	branch Test(EQ,Z) l0000000000454914
	// succ:  l00000000004548A4 l0000000000454914
l00000000004548A4:
	call x22 (retsize: 0;)
	// succ:  l00000000004548A8
l00000000004548A8:
	w19 = w19 + 0x00000001
	w31 = w19 - 0x00000041
	NZCV = cond(w31)
	x20 = x20 + 0x0000000000000004
	x21 = x21 + 0x0000000000000008
	branch Test(NE,Z) l000000000045488C
	// succ:  l00000000004548BC l000000000045488C
l00000000004548BC:
	x0 = 0x00000000004DF000
	w0 = Mem0[x0 + 3772:word32]
	branch w0 != 0x00000000 l00000000004548E4
	// succ:  l00000000004548C8 l00000000004548E4
l00000000004548C8:
	x0 = x23 + 0x00000000000000B0
	w2 = Mem0[x0 + 260:word32]
	w1 = Mem0[x0 + 268:word32]
	w2 = w2 & 0xFFFFFFFE
	w1 = w1 & 0xFFFFFFFE
	Mem0[x0 + 260:word32] = w2
	Mem0[x0 + 268:word32] = w1
	// succ:  l00000000004548E4
l00000000004548E4:
	x0 = 0x00000000004DF000
	w0 = Mem0[x0 + 3768:word32]
	branch w0 != 0x00000000 l0000000000454900
	// succ:  l00000000004548F0 l0000000000454900
l00000000004548F0:
	x23 = x23 + 0x00000000000000B0
	w0 = Mem0[x23 + 264:word32]
	w0 = w0 & 0xFFFFFFFE
	Mem0[x23 + 264:word32] = w0
	// succ:  l0000000000454900
l0000000000454900:
	v24 = sp + 16
	x19 = Mem0[v24:word64]
	v24 = v24 + 8
	x20 = Mem0[v24:word64]
	v25 = sp + 32
	x21 = Mem0[v25:word64]
	v25 = v25 + 8
	x22 = Mem0[v25:word64]
	x23 = Mem0[sp + 48:word64]
	x29 = Mem0[sp:word64]
	sp = sp + 8
	x30 = Mem0[sp:word64]
	sp = sp + 64
	return
	// succ:  fn0000000000454830_exit
l0000000000454914:
	call set_signal_handler (retsize: 0;)
	goto l00000000004548A8
	// succ:  l00000000004548A8
l000000000045491C:
	branch (w1 & 0x00000004) == 0x00000000 l00000000004548A8
	// succ:  l0000000000454920 l00000000004548A8
l0000000000454920:
	w0 = w19
	goto l00000000004548A4
	// succ:  l00000000004548A4
fn0000000000454830_exit:


// fn0000000000454928
// Return size: 0
void fn0000000000454928()
fn0000000000454928_entry:
	// succ:  l0000000000454928
l0000000000454928:
	sp = fp
	sp = sp + -448
	Mem0[sp:word64] = x29
	sp = sp + 8
	Mem0[sp:word64] = x30
	x29 = x31 + 0x0000000000000000
	x4 = 0x00000000004E1000
	x4 = x4 + 0x00000000000000B0
fn0000000000454928_exit:


// fn0000000000454BC0
// Return size: 0
void fn0000000000454BC0()
fn0000000000454BC0_entry:
	// succ:  l0000000000454BC0
l0000000000454BC0:
	sp = fp
	sp = sp + -80
	Mem0[sp:word64] = x29
	sp = sp + 8
	Mem0[sp:word64] = x30
	x29 = x31 + 0x0000000000000000
	v8 = sp + 16
	Mem0[v8:word64] = x19
	v8 = v8 + 8
	Mem0[v8:word64] = x20
	x20 = 0x00000000004E1000
fn0000000000454BC0_exit:


// signal_name
// Return size: 0
void signal_name()
signal_name_entry:
	// succ:  l0000000000454CC0
l0000000000454CC0:
	sp = fp
	w31 = w0 - 0x00000043
	NZCV = cond(w31)
	branch Test(UGT,ZC) l0000000000454CDC
	// succ:  l0000000000454CC8 l0000000000454CDC
l0000000000454CC8:
	x1 = 0x00000000004D6000
	x1 = x1 + 0xFFFFFFFFFFFFFD90
	x0 = Mem0[x1 + (int64) ((int32) w0):word64]
	branch x0 == 0x0000000000000000 l0000000000454CDC
	// succ:  l0000000000454CD8 l0000000000454CDC
l0000000000454CD8:
	return
	// succ:  signal_name_exit
l0000000000454CDC:
	x1 = 0x00000000004AD000
	x0 = 0x0000000000000000
	x1 = x1 + 0xFFFFFFFFFFFFFD88
	w2 = 0x00000005
	dcgettext(x0, x1, x2)
	return
	// succ:  signal_name_exit
signal_name_exit:


// decode_signal
// Return size: 0
void decode_signal()
decode_signal_entry:
	// succ:  l0000000000454CF0
l0000000000454CF0:
	sp = fp
	sp = sp + -96
	Mem0[sp:word64] = x29
	sp = sp + 8
	Mem0[sp:word64] = x30
	x29 = x31 + 0x0000000000000000
	v8 = sp + 16
	Mem0[v8:word64] = x19
	v8 = v8 + 8
	Mem0[v8:word64] = x20
	w19 = w1
	x1 = x29 + 0x0000000000000050
	v14 = sp + 32
	Mem0[v14:word64] = x21
	v14 = v14 + 8
	Mem0[v14:word64] = x22
	v17 = sp + 48
	Mem0[v17:word64] = x23
	v17 = v17 + 8
	Mem0[v17:word64] = x24
	Mem0[sp + 64:word64] = x25
	x22 = x0
	call legal_number (retsize: 0;)
	branch w0 == 0x00000000 l0000000000454D5C
	// succ:  l0000000000454D1C l0000000000454D5C
l0000000000454D1C:
	x0 = Mem0[x29 + 80:word64]
	x31 = x0 - 0x0000000000000040
	NZCV = cond(x31)
	branch Test(UGT,ZC) l0000000000454D40
	// succ:  l0000000000454D28 l0000000000454D40
l0000000000454D28:
	v23 = sp + 16
	x19 = Mem0[v23:word64]
	v23 = v23 + 8
	x20 = Mem0[v23:word64]
	v24 = sp + 32
	x21 = Mem0[v24:word64]
	v24 = v24 + 8
	x22 = Mem0[v24:word64]
	v25 = sp + 48
	x23 = Mem0[v25:word64]
	v25 = v25 + 8
	x24 = Mem0[v25:word64]
	x25 = Mem0[sp + 64:word64]
	x29 = Mem0[sp:word64]
	sp = sp + 8
	x30 = Mem0[sp:word64]
	sp = sp + 96
	return
	// succ:  decode_signal_exit
l0000000000454D40:
	w0 = 0xFFFFFFFF
	v37 = sp + 16
	x19 = Mem0[v37:word64]
	v37 = v37 + 8
	x20 = Mem0[v37:word64]
	v38 = sp + 32
	x21 = Mem0[v38:word64]
	v38 = v38 + 8
	x22 = Mem0[v38:word64]
	v39 = sp + 48
	x23 = Mem0[v39:word64]
	v39 = v39 + 8
	x24 = Mem0[v39:word64]
	x25 = Mem0[sp + 64:word64]
	x29 = Mem0[sp:word64]
	sp = sp + 8
	x30 = Mem0[sp:word64]
	sp = sp + 96
	return
	// succ:  decode_signal_exit
l0000000000454D5C:
	x21 = 0x00000000004D6000
	x24 = 0x00000000004AD000
	Mem0[x29 + 80:word64] = 0x0000000000000000
	x20 = 0x0000000000000000
	x21 = x21 + 0xFFFFFFFFFFFFFD90
	x24 = x24 + 0xFFFFFFFFFFFFFDA0
	w23 = w19 & 0x00000002
	w25 = w19 & 0x00000001
	// succ:  l0000000000454D7C
l0000000000454D7C:
	x19 = Mem0[x21 + x20:word64]
	branch x19 == 0x0000000000000000 l0000000000454DA8
	// succ:  l0000000000454D84 l0000000000454DA8
l0000000000454D84:
	v29 = Mem0[x19:byte]
	w2 = (word32) v29
	branch w2 == 0x00000000 l0000000000454DA8
	// succ:  l0000000000454D8C l0000000000454DA8
l0000000000454D8C:
	w31 = w2 - 0x00000053
	NZCV = cond(w31)
	branch Test(EQ,Z) l0000000000454DC0
	// succ:  l0000000000454D94 l0000000000454DC0
l0000000000454D94:
	branch w23 == 0x00000000 l0000000000454DF0
	// succ:  l0000000000454D98 l0000000000454DF0
l0000000000454D98:
	x0 = x22
	x1 = x19
	strcasecmp(x0, x1)
	sp = sp + 0xFFFFFFFFFFFFFFF8
	branch w0 == 0x00000000 l0000000000454E00
	// succ:  l0000000000454DA8 l0000000000454E00
l0000000000454DA8:
	x2 = x20 + 0x0000000000000001
	Mem0[x29 + 80:word64] = x2
	x31 = x2 - 0x0000000000000044
	NZCV = cond(x31)
	branch Test(EQ,Z) l0000000000454D40
	// succ:  l0000000000454DB8 l0000000000454D40
l0000000000454DB8:
	x20 = x2
	goto l0000000000454D7C
	// succ:  l0000000000454D7C
l0000000000454DC0:
	x0 = x19
	x1 = x24
	x2 = 0x0000000000000003
	strncmp(x0, x1, x2)
	sp = sp + 0xFFFFFFFFFFFFFFF8
	branch w0 != 0x00000000 l0000000000454D94
	// succ:  l0000000000454DD4 l0000000000454D94
l0000000000454DD4:
	x1 = x19 + 0x0000000000000003
	x0 = x22
	branch w23 == 0x00000000 l0000000000454E1C
	// succ:  l0000000000454DE0 l0000000000454E1C
l0000000000454DE0:
	strcasecmp(x0, x1)
	sp = sp + 0xFFFFFFFFFFFFFFF8
	branch w0 == 0x00000000 l0000000000454E00
	// succ:  l0000000000454DE8 l0000000000454E00
l0000000000454DE8:
	branch w25 == 0x00000000 l0000000000454DA8
	// succ:  l0000000000454DEC l0000000000454DA8
l0000000000454DEC:
	branch w23 != 0x00000000 l0000000000454D98
	// succ:  l0000000000454DF0 l0000000000454D98
l0000000000454DF0:
	x0 = x22
	x1 = x19
	strcmp(x0, x1)
	sp = sp + 0xFFFFFFFFFFFFFFF8
	branch w0 != 0x00000000 l0000000000454DA8
	// succ:  l0000000000454E00 l0000000000454DA8
l0000000000454E00:
	w0 = w20
	v34 = sp + 32
	x21 = Mem0[v34:word64]
	v34 = v34 + 8
	x22 = Mem0[v34:word64]
	v35 = sp + 16
	x19 = Mem0[v35:word64]
	v35 = v35 + 8
	x20 = Mem0[v35:word64]
	v36 = sp + 48
	x23 = Mem0[v36:word64]
	v36 = v36 + 8
	x24 = Mem0[v36:word64]
	x25 = Mem0[sp + 64:word64]
	x29 = Mem0[sp:word64]
	sp = sp + 8
	x30 = Mem0[sp:word64]
	sp = sp + 96
	return
	// succ:  decode_signal_exit
l0000000000454E1C:
	strcmp(x0, x1)
	sp = sp + 0xFFFFFFFFFFFFFFF8
	branch w0 == 0x00000000 l0000000000454E00
	// succ:  l0000000000454E24 l0000000000454E00
l0000000000454E24:
	branch w25 == 0x00000000 l0000000000454DA8
	// succ:  l0000000000454E28 l0000000000454DA8
l0000000000454E28:
	goto l0000000000454DEC
	// succ:  l0000000000454DEC
decode_signal_exit:


// run_pending_traps
// Return size: 0
void run_pending_traps()
run_pending_traps_entry:
	// succ:  l0000000000454E2C
l0000000000454E2C:
	sp = fp
	sp = sp + -368
	Mem0[sp:word64] = x29
	sp = sp + 8
	Mem0[sp:word64] = x30
	x29 = x31 + 0x0000000000000000
	v8 = sp + 80
	Mem0[v8:word64] = x27
	v8 = v8 + 8
	Mem0[v8:word64] = x28
	x28 = 0x00000000004E1000
	x0 = x28 + 0x00000000000000B0
	w1 = Mem0[x0 + 272:word32]
	v13 = sp + 16
	Mem0[v13:word64] = x19
	v13 = v13 + 8
	Mem0[v13:word64] = x20
	v16 = sp + 32
	Mem0[v16:word64] = x21
	v16 = v16 + 8
	Mem0[v16:word64] = x22
	v19 = sp + 48
	Mem0[v19:word64] = x23
	v19 = v19 + 8
	Mem0[v19:word64] = x24
	v22 = sp + 64
	Mem0[v22:word64] = x25
	v22 = v22 + 8
	Mem0[v22:word64] = x26
	branch w1 != 0x00000000 l0000000000454E74
	// succ:  l0000000000454E58 l0000000000454E74
l0000000000454E58:
	v23 = sp + 16
	x19 = Mem0[v23:word64]
	v23 = v23 + 8
	x20 = Mem0[v23:word64]
	v24 = sp + 32
	x21 = Mem0[v24:word64]
	v24 = v24 + 8
	x22 = Mem0[v24:word64]
	v25 = sp + 48
	x23 = Mem0[v25:word64]
	v25 = v25 + 8
	x24 = Mem0[v25:word64]
	v26 = sp + 64
	x25 = Mem0[v26:word64]
	v26 = v26 + 8
	x26 = Mem0[v26:word64]
	v27 = sp + 80
	x27 = Mem0[v27:word64]
	v27 = v27 + 8
	x28 = Mem0[v27:word64]
	x29 = Mem0[sp:word64]
	sp = sp + 8
	x30 = Mem0[sp:word64]
	sp = sp + 368
	return
	// succ:  run_pending_traps_exit
l0000000000454E74:
	Mem0[x0 + 272:word32] = 0x00000000
	x0 = 0x00000000004E3000
	w0 = Mem0[x0 + 1200:word32]
	x20 = 0x00000000004E3000
	Mem0[x29 + 352:word32] = w0
	x21 = 0x00000000004E3000
	call save_pipestatus_array (retsize: 0;)
	x24 = 0x00000000004AD000
	x27 = 0x00000000004AD000
	x26 = 0x00000000004AD000
	Mem0[x29 + 360:word64] = x0
	x20 = x20 + 0xFFFFFFFFFFFFFA9C
	x21 = x21 + 0xFFFFFFFFFFFFF880
	w19 = 0x00000001
	x24 = x24 + 0xFFFFFFFFFFFFFD78
	x27 = x27 + 0x00000000000006E8
	x26 = x26 + 0xFFFFFFFFFFFFFDB8
	goto l0000000000454ED0
	// succ:  l0000000000454ED0
l0000000000454EBC:
	w19 = w19 + 0x00000001
	w31 = w19 - 0x00000041
	NZCV = cond(w31)
	x20 = x20 + 0x0000000000000004
	x21 = x21 + 0x0000000000000008
	branch Test(EQ,Z) l0000000000454FB4
	// succ:  l0000000000454ED0 l0000000000454FB4
l0000000000454ED0:
	w2 = Mem0[x20:word32]
	branch w2 == 0x00000000 l0000000000454EBC
	// succ:  l0000000000454ED8 l0000000000454EBC
l0000000000454ED8:
	x0 = x29 + 0x00000000000000E0
	sigemptyset(x0)
	sp = sp + 0xFFFFFFFFFFFFFFF8
	x0 = x29 + 0x0000000000000060
	sigemptyset(x0)
	sp = sp + 0xFFFFFFFFFFFFFFF8
	w1 = w19
	x0 = x29 + 0x00000000000000E0
	sigaddset(x0, x1)
	sp = sp + 0xFFFFFFFFFFFFFFF8
	w0 = 0x00000000
	x1 = x29 + 0x00000000000000E0
	x2 = x29 + 0x0000000000000060
	sigprocmask(x0, x1, x2)
	sp = sp + 0xFFFFFFFFFFFFFFF8
	w31 = w19 - 0x00000002
	NZCV = cond(w31)
	branch Test(EQ,Z) l0000000000455074
	// succ:  l0000000000454F0C l0000000000455074
l0000000000454F0C:
	w31 = w19 - 0x00000011
	NZCV = cond(w31)
	branch Test(EQ,Z) l0000000000454FE4
	// succ:  l0000000000454F14 l0000000000454FE4
l0000000000454F14:
	x2 = Mem0[x21:word64]
	x31 = x2 - 0x0000000000000001
	NZCV = cond(x31)
	branch Test(ULE,ZC) l0000000000455014
	// succ:  l0000000000454F20 l0000000000455014
l0000000000454F20:
	x3 = 0x0000000000454000
	x3 = x3 + 0x0000000000000610
	x31 = x2 - x3
	NZCV = cond(x31)
	branch Test(EQ,Z) l0000000000455014
	// succ:  l0000000000454F30 l0000000000455014
l0000000000454F30:
	call save_token_state (retsize: 0;)
	x23 = x0
	x0 = Mem0[x21:word64]
	x22 = 0x00000000004E1000
	x25 = Mem0[x22 + 40:word64]
	Mem0[x22 + 40:word64] = 0x0000000000000000
	strlen(x0)
	sp = sp + 0xFFFFFFFFFFFFFFF8
	w2 = 0x0000015F
	x1 = x24
	x0 = x0 + 0x0000000000000001
	call sh_xmalloc (retsize: 0;)
	x1 = Mem0[x21:word64]
	strcpy(x0, x1)
	sp = sp + 0xFFFFFFFFFFFFFFF8
	x1 = x27
	w2 = 0x00000015
	call parse_and_execute (retsize: 0;)
	x0 = x23
	call restore_token_state (retsize: 0;)
	x0 = x23
	x1 = x24
	w2 = 0x00000161
	call sh_xfree (retsize: 0;)
	Mem0[x22 + 40:word64] = x25
	// succ:  l0000000000454F8C
l0000000000454F8C:
	w0 = 0x00000002
	x1 = x29 + 0x0000000000000060
	x2 = 0x0000000000000000
	Mem0[x20:word32] = 0x00000000
	w19 = w19 + 0x00000001
	sigprocmask(x0, x1, x2)
	sp = sp + 0xFFFFFFFFFFFFFFF8
	w31 = w19 - 0x00000041
	NZCV = cond(w31)
	x20 = x20 + 0x0000000000000004
	x21 = x21 + 0x0000000000000008
	branch Test(NE,Z) l0000000000454ED0
	// succ:  l0000000000454FB4 l0000000000454ED0
l0000000000454FB4:
	x0 = Mem0[x29 + 360:word64]
	call restore_pipestatus_array (retsize: 0;)
	w0 = Mem0[x29 + 352:word32]
	x1 = 0x00000000004E3000
	v38 = sp + 16
	x19 = Mem0[v38:word64]
	v38 = v38 + 8
	x20 = Mem0[v38:word64]
	v39 = sp + 32
	x21 = Mem0[v39:word64]
	v39 = v39 + 8
	x22 = Mem0[v39:word64]
	v40 = sp + 48
	x23 = Mem0[v40:word64]
	v40 = v40 + 8
	x24 = Mem0[v40:word64]
	v41 = sp + 64
	x25 = Mem0[v41:word64]
	v41 = v41 + 8
	x26 = Mem0[v41:word64]
	v42 = sp + 80
	x27 = Mem0[v42:word64]
	v42 = v42 + 8
	x28 = Mem0[v42:word64]
	Mem0[x1 + 1200:word32] = w0
	x29 = Mem0[sp:word64]
	sp = sp + 8
	x30 = Mem0[sp:word64]
	sp = sp + 368
	return
	// succ:  run_pending_traps_exit
l0000000000454FE4:
	x0 = 0x00000000004E3000
	x1 = Mem0[x0 + 2304:word64]
	x0 = 0x0000000000454000
	x0 = x0 + 0x0000000000000610
	x31 = x1 - x0
	NZCV = cond(x31)
	branch Test(EQ,Z) l0000000000455014
	// succ:  l0000000000454FFC l0000000000455014
l0000000000454FFC:
	x0 = x28 + 0x00000000000000B0
	w0 = Mem0[x0 + 68:word32]
	branch (w0 & 0x00000010) == 0x00000000 l0000000000455090
	// succ:  l0000000000455008 l0000000000455090
l0000000000455008:
	x0 = Mem0[x21:word64]
	x31 = x0 - 0x0000000000000001
	NZCV = cond(x31)
	branch Test(UGT,ZC) l0000000000454F30
	// succ:  l0000000000455014 l0000000000454F30
l0000000000455014:
	w2 = 0x00000005
	x1 = x26
	x0 = 0x0000000000000000
	dcgettext(x0, x1, x2)
	sp = sp + 0xFFFFFFFFFFFFFFF8
	x2 = Mem0[x21:word64]
	w1 = w19
	call internal_warning (retsize: 0;)
	x0 = Mem0[x21:word64]
	branch x0 != 0x0000000000000000 l0000000000454F8C
	// succ:  l0000000000455038 l0000000000454F8C
l0000000000455038:
	x1 = 0x00000000004AD000
	x1 = x1 + 0xFFFFFFFFFFFFFDF0
	w2 = 0x00000005
	dcgettext(x0, x1, x2)
	sp = sp + 0xFFFFFFFFFFFFFFF8
	x22 = x0
	w0 = w19
	call signal_name (retsize: 0;)
	x2 = x0
	w1 = w19
	x0 = x22
	call internal_warning (retsize: 0;)
	call getpid (retsize: 0;)
	w1 = w19
	call kill (retsize: 0;)
	goto l0000000000454F8C
	// succ:  l0000000000454F8C
l0000000000455074:
	x1 = 0x00000000004AD000
	w0 = w19
	x1 = x1 + 0xFFFFFFFFFFFFFDA8
	call fn0000000000454928 (retsize: 0;)
	x0 = 0x00000000004E1000
	Mem0[x0 + 632:word32] = 0x00000000
	goto l0000000000454F8C
	// succ:  l0000000000454F8C
l0000000000455090:
	x0 = 0x00000000004E3000
	w0 = Mem0[x0 + 2780:word32]
	call run_sigchld_trap (retsize: 0;)
	goto l0000000000454F8C
	// succ:  l0000000000454F8C
run_pending_traps_exit:


// trap_handler
// Return size: 0
void trap_handler()
trap_handler_entry:
	// succ:  l00000000004550A0
l00000000004550A0:
	sp = fp
	sp = sp + -64
	Mem0[sp:word64] = x29
	sp = sp + 8
	Mem0[sp:word64] = x30
	x29 = x31 + 0x0000000000000000
	v8 = sp + 32
	Mem0[v8:word64] = x21
	v8 = v8 + 8
	Mem0[v8:word64] = x22
	x21 = 0x00000000004E1000
	v11 = sp + 16
	Mem0[v11:word64] = x19
	v11 = v11 + 8
	Mem0[v11:word64] = x20
	x21 = x21 + 0x00000000000000B0
trap_handler_exit:


// set_sigint_handler
// Return size: 0
void set_sigint_handler()
set_sigint_handler_entry:
	// succ:  l0000000000455190
l0000000000455190:
	sp = fp
	x0 = 0x00000000004E1000
	x0 = x0 + 0x00000000000000B0
	w0 = Mem0[x0 + 8:word32]
	branch (w0 & 0x00000002) == 0x00000000 l00000000004551C4
	// succ:  l00000000004551A0 l00000000004551C4
l00000000004551A0:
	branch (w0 & 0x00000040) == 0x00000000 l00000000004551CC
	// succ:  l00000000004551A4 l00000000004551CC
l00000000004551A4:
	branch (w0 & 0x00000001) == 0x00000000 l00000000004551E8
	// succ:  l00000000004551A8 l00000000004551E8
l00000000004551A8:
	x0 = 0x00000000004DE000
	w0 = Mem0[x0 + 1704:word32]
	branch w0 != 0x00000000 l00000000004551D8
	// succ:  l00000000004551B4 l00000000004551D8
l00000000004551B4:
	x1 = 0x0000000000457000
	w0 = 0x00000002
	x1 = x1 + 0xFFFFFFFFFFFFFC20
	// succ:  l00000000004551C0_thunk_set_signal_handler
l00000000004551C0_thunk_set_signal_handler:
	call set_signal_handler (retsize: 0;)
	return
	// succ:  set_sigint_handler_exit
l00000000004551C4:
	x0 = 0x0000000000000001
	return
	// succ:  set_sigint_handler_exit
l00000000004551CC:
	w0 = 0x00000002
	x1 = 0x0000000000000001
	// succ:  l00000000004551D4_thunk_set_signal_handler
l00000000004551D4_thunk_set_signal_handler:
	call set_signal_handler (retsize: 0;)
	return
	// succ:  set_sigint_handler_exit
l00000000004551D8:
	x1 = 0x0000000000457000
	w0 = 0x00000002
	x1 = x1 + 0xFFFFFFFFFFFFFA6C
	// succ:  l00000000004551E4_thunk_set_signal_handler
l00000000004551E4_thunk_set_signal_handler:
	call set_signal_handler (retsize: 0;)
	return
	// succ:  set_sigint_handler_exit
l00000000004551E8:
	x1 = 0x0000000000455000
	w0 = 0x00000002
	x1 = x1 + 0x00000000000000A0
	// succ:  l00000000004551F4_thunk_set_signal_handler
l00000000004551F4_thunk_set_signal_handler:
	call set_signal_handler (retsize: 0;)
	return
	// succ:  set_sigint_handler_exit
set_sigint_handler_exit:


// trap_to_sighandler
// Return size: 0
void trap_to_sighandler()
trap_to_sighandler_entry:
	// succ:  l00000000004551F8
l00000000004551F8:
	sp = fp
	x1 = 0x00000000004E1000
	x1 = x1 + 0x00000000000000B0
	w1 = Mem0[x1 + (int64) ((int32) w0):word32]
	w0 = 0x00000042
	NZ = cond(w1 & w0)
	C = false
	V = false
	x0 = 0x0000000000000001
	branch Test(NE,Z) l0000000000455220
	// succ:  l0000000000455214 l0000000000455220
l0000000000455214:
	branch (w1 & 0x00000001) == 0x00000000 l0000000000455224
	// succ:  l0000000000455218 l0000000000455224
l0000000000455218:
	x0 = 0x0000000000455000
	x0 = x0 + 0x00000000000000A0
	// succ:  l0000000000455220
l0000000000455220:
	return
	// succ:  trap_to_sighandler_exit
l0000000000455224:
	x0 = 0x0000000000000000
	return
	// succ:  trap_to_sighandler_exit
trap_to_sighandler_exit:


// set_signal
// Return size: 0
void set_signal()
set_signal_entry:
	// succ:  l000000000045522C
l000000000045522C:
	sp = fp
	sp = sp + -64
	Mem0[sp:word64] = x29
	sp = sp + 8
	Mem0[sp:word64] = x30
	x29 = x31 + 0x0000000000000000
	NZCV = cond(w0 - w31)
	v9 = sp + 16
	Mem0[v9:word64] = x19
	v9 = v9 + 8
	Mem0[v9:word64] = x20
	v12 = sp + 32
	Mem0[v12:word64] = x21
	v12 = v12 + 8
	Mem0[v12:word64] = x22
	Mem0[sp + 48:word64] = x23
	w21 = (word32) Test(EQ,Z)
	w31 = w0 - 0x00000041
	NZCV = cond(w31)
	w19 = w0
	x20 = x1
	branch Test(EQ,Z) l0000000000455308
	// succ:  l0000000000455258 l0000000000455308
l0000000000455258:
	branch w21 != 0x00000000 l0000000000455308
	// succ:  l000000000045525C l0000000000455308
l000000000045525C:
	w1 = w0 - 0x00000042
	w31 = w1 - 0x00000001
	NZCV = cond(w31)
	branch Test(ULE,ZC) l00000000004553B8
	// succ:  l0000000000455268 l00000000004553B8
l0000000000455268:
	x22 = 0x00000000004E1000
	x22 = x22 + 0x00000000000000B0
l00000000004552B4:
	x1 = 0x00000000004AD000
	x1 = x1 + 0xFFFFFFFFFFFFFD78
	x0 = x0 + 0x0000000000000001
	call sh_xmalloc (retsize: 0;)
	x1 = x20
	strcpy(x0, x1)
	sp = sp + 0xFFFFFFFFFFFFFFF8
	x1 = x0
	v24 = sp + 32
	x21 = Mem0[v24:word64]
	v24 = v24 + 8
	x22 = Mem0[v24:word64]
	w0 = w19
	x23 = Mem0[sp + 48:word64]
	v25 = sp + 16
	x19 = Mem0[v25:word64]
	v25 = v25 + 8
	x20 = Mem0[v25:word64]
	x29 = Mem0[sp:word64]
	sp = sp + 8
	x30 = Mem0[sp:word64]
	sp = sp + 64
	// succ:  l00000000004552E4_thunk_fn0000000000454BC0
l00000000004552E4_thunk_fn0000000000454BC0:
	call fn0000000000454BC0 (retsize: 0;)
	return
	// succ:  set_signal_exit
l00000000004552F4:
	v28 = sp + 16
	x19 = Mem0[v28:word64]
	v28 = v28 + 8
	x20 = Mem0[v28:word64]
	v29 = sp + 32
	x21 = Mem0[v29:word64]
	v29 = v29 + 8
	x22 = Mem0[v29:word64]
	x23 = Mem0[sp + 48:word64]
	x29 = Mem0[sp:word64]
	sp = sp + 8
	x30 = Mem0[sp:word64]
	sp = sp + 64
	return
	// succ:  set_signal_exit
l0000000000455308:
	x0 = x20
	strlen(x0)
	sp = sp + 0xFFFFFFFFFFFFFFF8
	x1 = 0x00000000004AD000
	w2 = 0x00000216
	x1 = x1 + 0xFFFFFFFFFFFFFD78
	x0 = x0 + 0x0000000000000001
	call sh_xmalloc (retsize: 0;)
	x1 = x20
	strcpy(x0, x1)
	sp = sp + 0xFFFFFFFFFFFFFFF8
	x1 = x0
	w0 = w19
	call fn0000000000454BC0 (retsize: 0;)
	branch w21 == 0x00000000 l00000000004552F4
	// succ:  l000000000045533C l00000000004552F4
l000000000045533C:
	x0 = 0x00000000004DE000
	w0 = Mem0[x0 + 1704:word32]
	branch w0 != 0x00000000 l00000000004552F4
	// succ:  l0000000000455348 l00000000004552F4
l0000000000455348:
	v26 = sp + 16
	x19 = Mem0[v26:word64]
	v26 = v26 + 8
	x20 = Mem0[v26:word64]
	v27 = sp + 32
	x21 = Mem0[v27:word64]
	v27 = v27 + 8
	x22 = Mem0[v27:word64]
	x23 = Mem0[sp + 48:word64]
	x29 = Mem0[sp:word64]
	sp = sp + 8
	x30 = Mem0[sp:word64]
	sp = sp + 64
	// succ:  l0000000000455358_thunk_initialize_terminating_signals
l0000000000455358_thunk_initialize_terminating_signals:
	call initialize_terminating_signals (retsize: 0;)
	return
	// succ:  set_signal_exit
l00000000004553B8:
	x0 = x20
	strlen(x0)
	sp = sp + 0xFFFFFFFFFFFFFFF8
	w2 = 0x00000216
	goto l00000000004552B4
	// succ:  l00000000004552B4
set_signal_exit:


// maybe_set_sigchld_trap
// Return size: 0
void maybe_set_sigchld_trap()
maybe_set_sigchld_trap_entry:
	// succ:  l00000000004553FC
l00000000004553FC:
	sp = fp
	x1 = 0x00000000004E1000
	x1 = x1 + 0x00000000000000B0
	w2 = Mem0[x1 + 68:word32]
	x1 = x0
	branch (w2 & 0x00000001) == 0x00000000 l0000000000455428
	// succ:  l0000000000455410 l0000000000455428
l0000000000455410:
	x2 = 0x00000000004E3000
	x3 = Mem0[x2 + 2304:word64]
	x2 = 0x0000000000454000
	x2 = x2 + 0x0000000000000610
	x31 = x3 - x2
	NZCV = cond(x31)
	branch Test(EQ,Z) l000000000045542C
	// succ:  l0000000000455428 l000000000045542C
l0000000000455428:
	return
	// succ:  maybe_set_sigchld_trap_exit
l000000000045542C:
	w0 = 0x00000011
	// succ:  l0000000000455430_thunk_set_signal
l0000000000455430_thunk_set_signal:
	call set_signal (retsize: 0;)
	return
	// succ:  maybe_set_sigchld_trap_exit
maybe_set_sigchld_trap_exit:


// set_debug_trap
// Return size: 0
void set_debug_trap()
set_debug_trap_entry:
	// succ:  l0000000000455434
l0000000000455434:
	sp = fp
	x1 = x0
	w0 = 0x00000041
	// succ:  l000000000045543C_thunk_set_signal
l000000000045543C_thunk_set_signal:
	call set_signal (retsize: 0;)
	return
	// succ:  set_debug_trap_exit
set_debug_trap_exit:


// set_error_trap
// Return size: 0
void set_error_trap()
set_error_trap_entry:
	// succ:  l0000000000455440
l0000000000455440:
	sp = fp
	x1 = x0
	w0 = 0x00000042
	// succ:  l0000000000455448_thunk_set_signal
l0000000000455448_thunk_set_signal:
	call set_signal (retsize: 0;)
	return
	// succ:  set_error_trap_exit
set_error_trap_exit:


// set_return_trap
// Return size: 0
void set_return_trap()
set_return_trap_entry:
	// succ:  l000000000045544C
l000000000045544C:
	sp = fp
	x1 = x0
	w0 = 0x00000043
	// succ:  l0000000000455454_thunk_set_signal
l0000000000455454_thunk_set_signal:
	call set_signal (retsize: 0;)
	return
	// succ:  set_return_trap_exit
set_return_trap_exit:


// get_all_original_signals
// Return size: 0
void get_all_original_signals()
get_all_original_signals_entry:
	// succ:  l0000000000455458
l0000000000455458:
	sp = fp
	sp = sp + -48
	Mem0[sp:word64] = x29
	sp = sp + 8
	Mem0[sp:word64] = x30
	x29 = x31 + 0x0000000000000000
	v8 = sp + 32
	Mem0[v8:word64] = x21
	v8 = v8 + 8
	Mem0[v8:word64] = x22
	x21 = 0x00000000004E1000
	v11 = sp + 16
	Mem0[v11:word64] = x19
	v11 = v11 + 8
	Mem0[v11:word64] = x20
	x21 = x21 + 0x00000000000000B0
	x20 = 0x00000000004E3000
	x22 = 0x0000000000454000
	x20 = x20 + 0x0000000000000670
	x21 = x21 + 0x0000000000000004
	w19 = 0x00000001
	x22 = x22 + 0x0000000000000610
	goto l00000000004554A0
	// succ:  l00000000004554A0
l000000000045548C:
	w19 = w19 + 0x00000001
	w31 = w19 - 0x00000041
	NZCV = cond(w31)
	x20 = x20 + 0x0000000000000008
	x21 = x21 + 0x0000000000000004
	branch Test(EQ,Z) l00000000004554F8
	// succ:  l00000000004554A0 l00000000004554F8
l00000000004554A0:
	x0 = Mem0[x20:word64]
	x31 = x0 - x22
	NZCV = cond(x31)
	branch Test(NE,Z) l000000000045548C
	// succ:  l00000000004554AC l000000000045548C
l00000000004554AC:
	x1 = 0x0000000000000000
	w0 = w19
	call set_signal_handler (retsize: 0;)
	x2 = x0
	x1 = x0
	w0 = w19
	Mem0[x20:word64] = x2
	call set_signal_handler (retsize: 0;)
	x0 = Mem0[x20:word64]
	x31 = x0 - 0x0000000000000001
	NZCV = cond(x31)
	branch Test(NE,Z) l000000000045548C
	// succ:  l00000000004554D8 l000000000045548C
l00000000004554D8:
	w0 = Mem0[x21:word32]
	w19 = w19 + 0x00000001
	w0 = w0 | 0x00000002
	Mem0[x21:word32] = w0
	w31 = w19 - 0x00000041
	NZCV = cond(w31)
	x20 = x20 + 0x0000000000000008
	x21 = x21 + 0x0000000000000004
	branch Test(NE,Z) l00000000004554A0
	// succ:  l00000000004554F8 l00000000004554A0
l00000000004554F8:
	v20 = sp + 16
	x19 = Mem0[v20:word64]
	v20 = v20 + 8
	x20 = Mem0[v20:word64]
	v21 = sp + 32
	x21 = Mem0[v21:word64]
	v21 = v21 + 8
	x22 = Mem0[v21:word64]
	x29 = Mem0[sp:word64]
	sp = sp + 8
	x30 = Mem0[sp:word64]
	sp = sp + 48
	return
	// succ:  get_all_original_signals_exit
get_all_original_signals_exit:


// set_original_signal
// Return size: 0
void set_original_signal()
set_original_signal_entry:
	// succ:  l0000000000455508
l0000000000455508:
	sp = fp
	w2 = w0 - 0x00000001
	w31 = w2 - 0x0000003F
	NZCV = cond(w31)
	branch Test(UGT,ZC) l0000000000455534
	// succ:  l0000000000455514 l0000000000455534
l0000000000455514:
	x2 = 0x00000000004E3000
	x2 = x2 + 0x0000000000000668
	x3 = Mem0[x2 + (int64) ((int32) w0):word64]
	x4 = 0x0000000000454000
	x4 = x4 + 0x0000000000000610
	x31 = x3 - x4
	NZCV = cond(x31)
l0000000000455534:
	return
	// succ:  set_original_signal_exit
set_original_signal_exit:


// restore_default_signal
// Return size: 0
void restore_default_signal()
restore_default_signal_entry:
	// succ:  l0000000000455560
l0000000000455560:
	sp = fp
	sp = sp + -48
	Mem0[sp:word64] = x29
	sp = sp + 8
	Mem0[sp:word64] = x30
	x29 = x31 + 0x0000000000000000
	w1 = w0 - 0x00000041
	v10 = sp + 16
	Mem0[v10:word64] = x19
	v10 = v10 + 8
	Mem0[v10:word64] = x20
	Mem0[sp + 32:word64] = x21
	w31 = w1 - 0x00000002
	NZCV = cond(w31)
	w19 = w0
	branch Test(ULE,ZC) l00000000004555D8
	// succ:  l0000000000455580 l00000000004555D8
l0000000000455580:
	branch w0 == 0x00000000 l00000000004555D8
	// succ:  l0000000000455584 l00000000004555D8
l0000000000455584:
	w31 = w0 - 0x00000040
	NZCV = cond(w31)
	branch Test(LE,ZCV) l0000000000455654
	// succ:  l000000000045558C l0000000000455654
l000000000045558C:
l00000000004555D8:
	x21 = 0x00000000004E1000
	x0 = x21 + 0x00000000000000B0
l0000000000455654:
	x21 = 0x00000000004E3000
	x21 = x21 + 0x0000000000000668
	x1 = Mem0[x21 + (int64) ((int32) w0):word64]
	x2 = 0x0000000000454000
	x2 = x2 + 0x0000000000000610
	x31 = x1 - x2
	NZCV = cond(x31)
restore_default_signal_exit:


// set_impossible_sigchld_trap
// Return size: 0
void set_impossible_sigchld_trap()
set_impossible_sigchld_trap_entry:
	// succ:  l00000000004556F0
l00000000004556F0:
	sp = fp
	sp = sp + -16
	Mem0[sp:word64] = x29
	sp = sp + 8
	Mem0[sp:word64] = x30
	x29 = x31 + 0x0000000000000000
	w0 = 0x00000011
	call restore_default_signal (retsize: 0;)
	x1 = 0x0000000000454000
	w0 = 0x00000011
	x1 = x1 + 0x0000000000000610
	call fn0000000000454BC0 (retsize: 0;)
	x0 = 0x00000000004E1000
	x0 = x0 + 0x00000000000000B0
	w1 = Mem0[x0 + 68:word32]
	w1 = w1 & 0xFFFFFFFE
	Mem0[x0 + 68:word32] = w1
	x29 = Mem0[sp:word64]
	sp = sp + 8
	x30 = Mem0[sp:word64]
	sp = sp + 16
	return
	// succ:  set_impossible_sigchld_trap_exit
set_impossible_sigchld_trap_exit:


// ignore_signal
// Return size: 0
void ignore_signal()
ignore_signal_entry:
	// succ:  l000000000045572C
l000000000045572C:
	sp = fp
	sp = sp + -48
	Mem0[sp:word64] = x29
	sp = sp + 8
	Mem0[sp:word64] = x30
	x29 = x31 + 0x0000000000000000
	v8 = sp + 16
	Mem0[v8:word64] = x19
	v8 = v8 + 8
	Mem0[v8:word64] = x20
	w19 = w0
	w0 = w0 - 0x00000041
	v13 = sp + 32
	Mem0[v13:word64] = x21
	v13 = v13 + 8
	Mem0[v13:word64] = x22
	w31 = w0 - 0x00000002
	NZCV = cond(w31)
	x21 = 0x00000000004E1000
	branch Test(ULE,ZC) l0000000000455758
	// succ:  l0000000000455750 l0000000000455758
l0000000000455750:
l0000000000455758:
	x0 = x21 + 0x00000000000000B0
ignore_signal_exit:


// run_exit_trap
// Return size: 0
void run_exit_trap()
run_exit_trap_entry:
	// succ:  l000000000045582C
l000000000045582C:
	sp = fp
	sp = sp + -64
	Mem0[sp:word64] = x29
	sp = sp + 8
	Mem0[sp:word64] = x30
	x29 = x31 + 0x0000000000000000
	x0 = 0x00000000004E3000
	w0 = Mem0[x0 + 1200:word32]
	v10 = sp + 16
	Mem0[v10:word64] = x19
	v10 = v10 + 8
	Mem0[v10:word64] = x20
	v13 = sp + 32
	Mem0[v13:word64] = x21
	v13 = v13 + 8
	Mem0[v13:word64] = x22
	x19 = 0x00000000004E3000
	x21 = 0x00000000004E1000
	Mem0[x19 + 2160:word32] = w0
	x21 = x21 + 0x00000000000000B0
	call save_pipestatus_array (retsize: 0;)
	w1 = Mem0[x21:word32]
	w20 = 0x00000051
	w20 = w1 & w20
	w31 = w20 - 0x00000001
	NZCV = cond(w31)
	branch Test(EQ,Z) l0000000000455884
	// succ:  l000000000045586C l0000000000455884
l000000000045586C:
	call restore_pipestatus_array (retsize: 0;)
	w0 = Mem0[x19 + 2160:word32]
	v19 = sp + 32
	x21 = Mem0[v19:word64]
	v19 = v19 + 8
	x22 = Mem0[v19:word64]
	v20 = sp + 16
	x19 = Mem0[v20:word64]
	v20 = v20 + 8
	x20 = Mem0[v20:word64]
	x29 = Mem0[sp:word64]
	sp = sp + 8
	x30 = Mem0[sp:word64]
	sp = sp + 64
	return
	// succ:  run_exit_trap_exit
l0000000000455884:
	x22 = 0x00000000004E3000
	x0 = Mem0[x22 + 2168:word64]
	strlen(x0)
	sp = sp + 0xFFFFFFFFFFFFFFF8
	x1 = 0x00000000004AD000
	w2 = 0x000002D4
	x1 = x1 + 0xFFFFFFFFFFFFFD78
	x0 = x0 + 0x0000000000000001
	call sh_xmalloc (retsize: 0;)
	x1 = Mem0[x22 + 2168:word64]
	strcpy(x0, x1)
	sp = sp + 0xFFFFFFFFFFFFFFF8
	Mem0[x29 + 56:word64] = x0
	w0 = Mem0[x21:word32]
	w19 = Mem0[x19 + 2160:word32]
	w0 = w0 & 0xFFFFFFFE
	w2 = w0 | 0x00000010
	x0 = 0x00000000004E3000
	Mem0[x21:word32] = w2
	x0 = x0 + 0xFFFFFFFFFFFFFC28
	x2 = 0x00000000004E3000
	w1 = w20
	Mem0[x29 + 48:word32] = w19
	Mem0[x2 + 1632:word32] = w20
	call __sigsetjmp (retsize: 0;)
	Mem0[x29 + 52:word32] = w0
	x0 = 0x00000000004E3000
	w0 = Mem0[x0 + 1188:word32]
	branch w0 == 0x00000000 l0000000000455900
	// succ:  l00000000004558F0 l0000000000455900
l00000000004558F0:
	x0 = 0x00000000004E3000
	x0 = x0 + 0x0000000000000360
	w1 = 0x00000001
	call __sigsetjmp (retsize: 0;)
	// succ:  l0000000000455900
l0000000000455900:
	w2 = Mem0[x29 + 52:word32]
	w1 = w0 | w2
	branch w1 == 0x00000000 l0000000000455958
	// succ:  l000000000045590C l0000000000455958
l000000000045590C:
	w2 = Mem0[x29 + 52:word32]
	w1 = w2 - 0x00000003
	w31 = w1 - 0x00000001
	NZCV = cond(w31)
	branch Test(ULE,ZC) l0000000000455948
	// succ:  l000000000045591C l0000000000455948
l000000000045591C:
	branch w0 == 0x00000000 l0000000000455974
	// succ:  l0000000000455920 l0000000000455974
l0000000000455920:
	x0 = 0x00000000004E3000
	w0 = Mem0[x0 + 856:word32]
	Mem0[x29 + 48:word32] = w0
	// succ:  l000000000045592C
l000000000045592C:
	x0 = 0x00000000004E3000
	Mem0[x0 + 1632:word32] = 0x00000000
	v26 = sp + 16
	x19 = Mem0[v26:word64]
	v26 = v26 + 8
	x20 = Mem0[v26:word64]
	w0 = Mem0[x29 + 48:word32]
	v27 = sp + 32
	x21 = Mem0[v27:word64]
	v27 = v27 + 8
	x22 = Mem0[v27:word64]
	x29 = Mem0[sp:word64]
	sp = sp + 8
	x30 = Mem0[sp:word64]
	sp = sp + 64
	return
	// succ:  run_exit_trap_exit
l0000000000455948:
	x0 = 0x00000000004E3000
	w0 = Mem0[x0 + 1200:word32]
	Mem0[x29 + 48:word32] = w0
	goto l000000000045592C
	// succ:  l000000000045592C
l0000000000455958:
	call reset_parser (retsize: 0;)
	x0 = Mem0[x29 + 56:word64]
	x1 = 0x00000000004AD000
	x1 = x1 + 0xFFFFFFFFFFFFFE60
	w2 = 0x00000015
	call parse_and_execute (retsize: 0;)
	goto l000000000045592C
	// succ:  l000000000045592C
l0000000000455974:
	x0 = 0x00000000004E3000
	w0 = Mem0[x0 + 2160:word32]
	Mem0[x29 + 48:word32] = w0
	goto l000000000045592C
	// succ:  l000000000045592C
run_exit_trap_exit:


// run_trap_cleanup
// Return size: 0
void run_trap_cleanup()
run_trap_cleanup_entry:
	// succ:  l0000000000455984
l0000000000455984:
	sp = fp
	x1 = 0x00000000004E1000
	x1 = x1 + 0x00000000000000B0
run_trap_cleanup_exit:


// run_debug_trap
// Return size: 0
void run_debug_trap()
run_debug_trap_entry:
	// succ:  l00000000004559A0
l00000000004559A0:
	sp = fp
	sp = sp + -64
	Mem0[sp:word64] = x29
	sp = sp + 8
	Mem0[sp:word64] = x30
	x29 = x31 + 0x0000000000000000
	x0 = 0x00000000004E1000
	x0 = x0 + 0x00000000000000B0
	v9 = sp + 16
	Mem0[v9:word64] = x19
	v9 = v9 + 8
	Mem0[v9:word64] = x20
	w19 = Mem0[x0 + 260:word32]
	w0 = 0x00000051
	w19 = w19 & w0
	v14 = sp + 32
	Mem0[v14:word64] = x21
	v14 = v14 + 8
	Mem0[v14:word64] = x22
	w31 = w19 - 0x00000001
	NZCV = cond(w31)
	w20 = 0x00000000
	branch Test(EQ,Z) l00000000004559E4
	// succ:  l00000000004559D0 l00000000004559E4
l00000000004559D0:
	w0 = w20
	v19 = sp + 32
	x21 = Mem0[v19:word64]
	v19 = v19 + 8
	x22 = Mem0[v19:word64]
	v20 = sp + 16
	x19 = Mem0[v20:word64]
	v20 = v20 + 8
	x20 = Mem0[v20:word64]
	x29 = Mem0[sp:word64]
	sp = sp + 8
	x30 = Mem0[sp:word64]
	sp = sp + 64
	return
	// succ:  run_debug_trap_exit
l00000000004559E4:
	x21 = 0x00000000004E0000
	w0 = w19
	w22 = Mem0[x21 + 3940:word32]
	Mem0[x21 + 3940:word32] = w20
	call save_pipeline (retsize: 0;)
	x0 = x29 + 0x0000000000000030
	w1 = w19
	call save_pgrp_pipe (retsize: 0;)
	call stop_making_children (retsize: 0;)
	x1 = 0x00000000004AD000
	x1 = x1 + 0xFFFFFFFFFFFFFE70
	w0 = 0x00000041
	call fn0000000000454928 (retsize: 0;)
	w20 = w0
	w0 = w19
	Mem0[x21 + 3940:word32] = w22
	call restore_pipeline (retsize: 0;)
	call close_pgrp_pipe (retsize: 0;)
	x0 = x29 + 0x0000000000000030
	call restore_pgrp_pipe (retsize: 0;)
	w0 = Mem0[x21 + 3940:word32]
	NZCV = cond(w0 - w31)
	branch Test(LE,ZCV) l0000000000455A48
	// succ:  l0000000000455A40 l0000000000455A48
l0000000000455A40:
	w1 = w19
	call give_terminal_to (retsize: 0;)
	// succ:  l0000000000455A48
l0000000000455A48:
	call notify_and_cleanup (retsize: 0;)
	x0 = 0x00000000004DE000
	w0 = Mem0[x0 + 1844:word32]
	branch w0 == 0x00000000 l00000000004559D0
	// succ:  l0000000000455A58 l00000000004559D0
l0000000000455A58:
	w31 = w20 - 0x00000002
	NZCV = cond(w31)
	branch Test(NE,Z) l00000000004559D0
	// succ:  l0000000000455A60 l00000000004559D0
l0000000000455A60:
	x0 = 0x00000000004E3000
	w0 = Mem0[x0 + 1188:word32]
	branch w0 == 0x00000000 l00000000004559D0
	// succ:  l0000000000455A6C l00000000004559D0
l0000000000455A6C:
	x0 = 0x00000000004E3000
	x2 = 0x00000000004E3000
	x0 = x0 + 0x0000000000000360
	w1 = 0x00000001
	Mem0[x2 + 856:word32] = w20
	call __longjmp_chk (retsize: 0;)
	// succ:  l0000000000455A80_thunk_run_error_trap
l0000000000455A80_thunk_run_error_trap:
	call run_error_trap (retsize: 0;)
	return
	// succ:  run_debug_trap_exit
run_debug_trap_exit:


// run_error_trap
// Return size: 0
void run_error_trap()
run_error_trap_entry:
	// succ:  l0000000000455A84
l0000000000455A84:
	sp = fp
	x0 = 0x00000000004E1000
	x0 = x0 + 0x00000000000000B0
	w1 = Mem0[x0 + 264:word32]
	w0 = 0x00000051
	w0 = w1 & w0
	w31 = w0 - 0x00000001
	NZCV = cond(w31)
	branch Test(EQ,Z) l0000000000455AA4
	// succ:  l0000000000455AA0 l0000000000455AA4
l0000000000455AA0:
	return
	// succ:  run_error_trap_exit
l0000000000455AA4:
	x1 = 0x00000000004AD000
	w0 = 0x00000042
	x1 = x1 + 0xFFFFFFFFFFFFFE80
	// succ:  l0000000000455AB0_thunk_fn0000000000454928
l0000000000455AB0_thunk_fn0000000000454928:
	call fn0000000000454928 (retsize: 0;)
	return
	// succ:  run_error_trap_exit
run_error_trap_exit:


// run_return_trap
// Return size: 0
void run_return_trap()
run_return_trap_entry:
	// succ:  l0000000000455AB4
l0000000000455AB4:
	sp = fp
	sp = sp + -32
	Mem0[sp:word64] = x29
	sp = sp + 8
	Mem0[sp:word64] = x30
	x29 = x31 + 0x0000000000000000
	x0 = 0x00000000004E1000
	x0 = x0 + 0x00000000000000B0
	w1 = Mem0[x0 + 268:word32]
	w0 = 0x00000051
	w0 = w1 & w0
	v11 = sp + 16
	Mem0[v11:word64] = x19
	v11 = v11 + 8
	Mem0[v11:word64] = x20
	w31 = w0 - 0x00000001
	NZCV = cond(w31)
	branch Test(EQ,Z) l0000000000455AE8
	// succ:  l0000000000455ADC l0000000000455AE8
l0000000000455ADC:
	v15 = sp + 16
	x19 = Mem0[v15:word64]
	v15 = v15 + 8
	x20 = Mem0[v15:word64]
	x29 = Mem0[sp:word64]
	sp = sp + 8
	x30 = Mem0[sp:word64]
	sp = sp + 32
	return
	// succ:  run_return_trap_exit
l0000000000455AE8:
	x19 = 0x00000000004E3000
	x1 = 0x00000000004AD000
	w20 = Mem0[x19 + 1200:word32]
	x1 = x1 + 0xFFFFFFFFFFFFFE90
	w0 = 0x00000043
	call fn0000000000454928 (retsize: 0;)
	Mem0[x19 + 1200:word32] = w20
	v18 = sp + 16
	x19 = Mem0[v18:word64]
	v18 = v18 + 8
	x20 = Mem0[v18:word64]
	x29 = Mem0[sp:word64]
	sp = sp + 8
	x30 = Mem0[sp:word64]
	sp = sp + 32
	return
	// succ:  run_return_trap_exit
run_return_trap_exit:


// run_interrupt_trap
// Return size: 0
void run_interrupt_trap()
run_interrupt_trap_entry:
	// succ:  l0000000000455B10
l0000000000455B10:
	sp = fp
	x1 = 0x00000000004AD000
	w0 = 0x00000002
	x1 = x1 + 0xFFFFFFFFFFFFFDA8
	// succ:  l0000000000455B1C_thunk_fn0000000000454928
l0000000000455B1C_thunk_fn0000000000454928:
	call fn0000000000454928 (retsize: 0;)
	return
	// succ:  run_interrupt_trap_exit
run_interrupt_trap_exit:


// free_trap_strings
// Return size: 0
void free_trap_strings()
free_trap_strings_entry:
	// succ:  l0000000000455B20
l0000000000455B20:
	sp = fp
	sp = sp + -32
	Mem0[sp:word64] = x29
	sp = sp + 8
	Mem0[sp:word64] = x30
	x29 = x31 + 0x0000000000000000
	v8 = sp + 16
	Mem0[v8:word64] = x19
	v8 = v8 + 8
	Mem0[v8:word64] = x20
	x20 = 0x00000000004E1000
	x20 = x20 + 0x00000000000000B0
	w19 = 0x00000000
	// succ:  l0000000000455B38
l0000000000455B38:
	w0 = w19
	x1 = 0x0000000000000000
	call fn0000000000454BC0 (retsize: 0;)
	w0 = Mem0[x20:word32]
	w19 = w19 + 0x00000001
	w0 = w0 & 0xFFFFFFFE
	Mem0[x20:word32] = w0
	x20 = x20 + 4
	w31 = w19 - 0x00000044
	NZCV = cond(w31)
	branch Test(NE,Z) l0000000000455B38
	// succ:  l0000000000455B5C l0000000000455B38
l0000000000455B5C:
	x1 = 0x00000000004E3000
	x0 = x1 + 0xFFFFFFFFFFFFF878
	Mem0[x0 + 536:word64] = 0x0000000000000000
	Mem0[x0 + 528:word64] = 0x0000000000000000
	Mem0[x0 + 520:word64] = 0x0000000000000000
	v16 = sp + 16
	x19 = Mem0[v16:word64]
	v16 = v16 + 8
	x20 = Mem0[v16:word64]
	Mem0[x1 + 2168:word64] = 0x0000000000000000
	x29 = Mem0[sp:word64]
	sp = sp + 8
	x30 = Mem0[sp:word64]
	sp = sp + 32
	return
	// succ:  free_trap_strings_exit
free_trap_strings_exit:


// reset_signal_handlers
// Return size: 0
void reset_signal_handlers()
reset_signal_handlers_entry:
	// succ:  l0000000000455B80
l0000000000455B80:
	sp = fp
	x0 = 0x0000000000454000
	x0 = x0 + 0x00000000000007EC
	// succ:  l0000000000455B88_thunk_fn0000000000454830
l0000000000455B88_thunk_fn0000000000454830:
	call fn0000000000454830 (retsize: 0;)
	return
	// succ:  reset_signal_handlers_exit
reset_signal_handlers_exit:


// restore_original_signals
// Return size: 0
void restore_original_signals()
restore_original_signals_entry:
	// succ:  l0000000000455B8C
l0000000000455B8C:
	sp = fp
	x0 = 0x0000000000454000
	x0 = x0 + 0xFFFFFFFFFFFFFC6C
	// succ:  l0000000000455B94_thunk_fn0000000000454830
l0000000000455B94_thunk_fn0000000000454830:
	call fn0000000000454830 (retsize: 0;)
	return
	// succ:  restore_original_signals_exit
restore_original_signals_exit:


// maybe_call_trap_handler
// Return size: 0
void maybe_call_trap_handler()
maybe_call_trap_handler_entry:
	// succ:  l0000000000455B98
l0000000000455B98:
	sp = fp
	sp = sp + -16
	Mem0[sp:word64] = x29
	sp = sp + 8
	Mem0[sp:word64] = x30
	x29 = x31 + 0x0000000000000000
	x1 = 0x00000000004E1000
	x1 = x1 + 0x00000000000000B0
	w1 = Mem0[x1 + (int64) ((int32) w0):word32]
	w3 = w0
	w2 = w1 & 0x00000001
	branch (w1 & 0x00000001) == 0x00000000 l0000000000455BE4
	// succ:  l0000000000455BB8 l0000000000455BE4
l0000000000455BB8:
	w2 = 0x00000000
	branch (w1 & 0x00000040) == 0x00000000 l0000000000455BE4
	// succ:  l0000000000455BC0 l0000000000455BE4
l0000000000455BC0:
	w31 = w0 - 0x00000002
	NZCV = cond(w31)
	branch Test(EQ,Z) l0000000000455C00
	// succ:  l0000000000455BC8 l0000000000455C00
l0000000000455BC8:
	branch Test(LE,ZCV) l0000000000455BF0
	// succ:  l0000000000455BCC l0000000000455BF0
l0000000000455BCC:
	w31 = w0 - 0x00000041
	NZCV = cond(w31)
	branch Test(EQ,Z) l0000000000455C24
	// succ:  l0000000000455BD4 l0000000000455C24
l0000000000455BD4:
	w31 = w0 - 0x00000042
	NZCV = cond(w31)
	branch Test(NE,Z) l0000000000455C14
	// succ:  l0000000000455BDC l0000000000455C14
l0000000000455BDC:
	call run_error_trap (retsize: 0;)
	w2 = 0x00000001
	// succ:  l0000000000455BE4
l0000000000455BE4:
	w0 = w2
	x29 = Mem0[sp:word64]
	sp = sp + 8
	x30 = Mem0[sp:word64]
	sp = sp + 16
	return
	// succ:  maybe_call_trap_handler_exit
l0000000000455BF0:
	branch w0 != 0x00000000 l0000000000455C14
	// succ:  l0000000000455BF4 l0000000000455C14
l0000000000455BF4:
	call run_exit_trap (retsize: 0;)
	w2 = 0x00000001
	goto l0000000000455BE4
	// succ:  l0000000000455BE4
l0000000000455C00:
	x1 = 0x00000000004AD000
	x1 = x1 + 0xFFFFFFFFFFFFFDA8
	call fn0000000000454928 (retsize: 0;)
	w2 = 0x00000001
	goto l0000000000455BE4
	// succ:  l0000000000455BE4
l0000000000455C14:
	w0 = w3
	call trap_handler (retsize: 0;)
	w2 = 0x00000001
	goto l0000000000455BE4
	// succ:  l0000000000455BE4
l0000000000455C24:
	call run_debug_trap (retsize: 0;)
	w2 = 0x00000001
	goto l0000000000455BE4
	// succ:  l0000000000455BE4
maybe_call_trap_handler_exit:


// signal_is_trapped
// Return size: 0
void signal_is_trapped()
signal_is_trapped_entry:
	// succ:  l0000000000455C30
l0000000000455C30:
	sp = fp
	x1 = 0x00000000004E1000
	x1 = x1 + 0x00000000000000B0
	w0 = Mem0[x1 + (int64) ((int32) w0):word32]
	w0 = w0 & 0x00000001
	return
	// succ:  signal_is_trapped_exit
signal_is_trapped_exit:


// signal_is_special
// Return size: 0
void signal_is_special()
signal_is_special_entry:
	// succ:  l0000000000455C44
l0000000000455C44:
	sp = fp
	x1 = 0x00000000004E1000
	x1 = x1 + 0x00000000000000B0
	w0 = Mem0[x1 + (int64) ((int32) w0):word32]
	w0 = w0 & 0x00000004
	return
	// succ:  signal_is_special_exit
signal_is_special_exit:


// signal_is_ignored
// Return size: 0
void signal_is_ignored()
signal_is_ignored_entry:
	// succ:  l0000000000455C58
l0000000000455C58:
	sp = fp
	x1 = 0x00000000004E1000
	x1 = x1 + 0x00000000000000B0
	w0 = Mem0[x1 + (int64) ((int32) w0):word32]
	w0 = w0 & 0x00000040
	return
	// succ:  signal_is_ignored_exit
signal_is_ignored_exit:


// signal_is_hard_ignored
// Return size: 0
void signal_is_hard_ignored()
signal_is_hard_ignored_entry:
	// succ:  l0000000000455C6C
l0000000000455C6C:
	sp = fp
	x1 = 0x00000000004E1000
	x1 = x1 + 0x00000000000000B0
	w0 = Mem0[x1 + (int64) ((int32) w0):word32]
	w0 = w0 & 0x00000002
	return
	// succ:  signal_is_hard_ignored_exit
signal_is_hard_ignored_exit:


// set_signal_ignored
// Return size: 0
void set_signal_ignored()
set_signal_ignored_entry:
	// succ:  l0000000000455C80
l0000000000455C80:
	sp = fp
	x2 = 0x00000000004E1000
set_signal_ignored_exit:


// signal_in_progress
// Return size: 0
void signal_in_progress()
signal_in_progress_entry:
	// succ:  l0000000000455CAC
l0000000000455CAC:
	sp = fp
	x1 = 0x00000000004E1000
	x1 = x1 + 0x00000000000000B0
	w0 = Mem0[x1 + (int64) ((int32) w0):word32]
	w0 = w0 & 0x00000010
	return
	// succ:  signal_in_progress_exit
signal_in_progress_exit:


// buffered_ungetchar
// Return size: 0
void buffered_ungetchar()
buffered_ungetchar_entry:
	// succ:  l0000000000455CC0
l0000000000455CC0:
	sp = fp
	x1 = 0x00000000004E3000
	v5 = Mem0[x1 + 340:int32]
	x2 = (word64) v5
	x1 = 0x00000000004E1000
	x1 = x1 + 0x00000000000001C8
	x1 = Mem0[x1:word64]
	w31 = w0 + 0x00000001
	NZCV = cond(w31)
	x1 = Mem0[x1 + x2:word64]
	branch Test(EQ,Z) l0000000000455CF8
	// succ:  l0000000000455CE0 l0000000000455CF8
l0000000000455CE0:
	x2 = Mem0[x1 + 40:word64]
	branch x2 == 0x0000000000000000 l0000000000455CFC
	// succ:  l0000000000455CE8 l0000000000455CFC
l0000000000455CE8:
	x2 = x2 - 0x0000000000000001
	x3 = Mem0[x1 + 8:word64]
	Mem0[x1 + 40:word64] = x2
	Mem0[x3 + x2:byte] = (byte) w0
	// succ:  l0000000000455CF8
l0000000000455CF8:
	return
	// succ:  buffered_ungetchar_exit
l0000000000455CFC:
	w0 = 0xFFFFFFFF
	return
	// succ:  buffered_ungetchar_exit
buffered_ungetchar_exit:


// fn0000000000455D04
// Return size: 0
void fn0000000000455D04()
fn0000000000455D04_entry:
	// succ:  l0000000000455D04
l0000000000455D04:
	sp = fp
	sp = sp + -32
	Mem0[sp:word64] = x29
	sp = sp + 8
	Mem0[sp:word64] = x30
	x29 = x31 + 0x0000000000000000
	v8 = sp + 16
	Mem0[v8:word64] = x19
	v8 = v8 + 8
	Mem0[v8:word64] = x20
	x19 = 0x00000000004E1000
	x19 = x19 + 0x00000000000001C8
	w4 = w0 + 0x00000014
	x2 = 0x00000000004AE000
	x0 = Mem0[x19:word64]
fn0000000000455D04_exit:


// buffered_getchar
// Return size: 0
void buffered_getchar()
buffered_getchar_entry:
	// succ:  l0000000000455D80
l0000000000455D80:
	sp = fp
	sp = sp + -48
	Mem0[sp:word64] = x29
	sp = sp + 8
	Mem0[sp:word64] = x30
	x29 = x31 + 0x0000000000000000
	v8 = sp + 16
	Mem0[v8:word64] = x19
	v8 = v8 + 8
	Mem0[v8:word64] = x20
	x20 = 0x00000000004E1000
	w0 = Mem0[x20 + 644:word32]
	Mem0[sp + 32:word64] = x21
	branch w0 != 0x00000000 l0000000000455E44
	// succ:  l0000000000455D9C l0000000000455E44
l0000000000455D9C:
	x0 = 0x00000000004E3000
	v13 = Mem0[x0 + 340:int32]
	x1 = (word64) v13
	x0 = 0x00000000004E1000
	x0 = x0 + 0x00000000000001C8
	x0 = Mem0[x0:word64]
	x19 = Mem0[x0 + x1:word64]
	x0 = Mem0[x19 + 40:word64]
	x1 = Mem0[x19 + 24:word64]
	x31 = x0 - x1
	NZCV = cond(x31)
	branch Test(EQ,Z) l0000000000455DE8
	// succ:  l0000000000455DC4 l0000000000455DE8
l0000000000455DC4:
	branch x1 == 0x0000000000000000 l0000000000455DE8
	// succ:  l0000000000455DC8 l0000000000455DE8
l0000000000455DC8:
	x2 = x0 + 0x0000000000000001
	x1 = Mem0[x19 + 8:word64]
	Mem0[x19 + 40:word64] = x2
	v17 = Mem0[x1 + x0:byte]
	w0 = (word32) v17
	// succ:  l0000000000455DD8
l0000000000455DD8:
	v18 = sp + 16
	x19 = Mem0[v18:word64]
	v18 = v18 + 8
	x20 = Mem0[v18:word64]
	x21 = Mem0[sp + 32:word64]
	x29 = Mem0[sp:word64]
	sp = sp + 8
	x30 = Mem0[sp:word64]
	sp = sp + 48
	return
	// succ:  buffered_getchar_exit
l0000000000455DE8:
	w0 = Mem0[x20 + 644:word32]
	branch w0 != 0x00000000 l0000000000455E50
	// succ:  l0000000000455DF0 l0000000000455E50
l0000000000455DF0:
	w0 = Mem0[x19 + 32:word32]
	w1 = 0x00000014
	w0 = w0 & w1
	w31 = w0 - 0x00000010
	NZCV = cond(w31)
	w0 = Mem0[x19:word32]
	branch Test(EQ,Z) l0000000000455E74
	// succ:  l0000000000455E08 l0000000000455E74
l0000000000455E08:
	x1 = Mem0[x19 + 8:word64]
	x2 = Mem0[x19 + 16:word64]
	call zread (retsize: 0;)
	x20 = x0
	// succ:  l0000000000455E18
l0000000000455E18:
	x31 = x20 - x31
	NZCV = cond(x31)
	branch Test(LE,ZCV) l0000000000455EF4
	// succ:  l0000000000455E20 l0000000000455EF4
l0000000000455E20:
	x0 = Mem0[x19 + 8:word64]
	x1 = 0x0000000000000001
	Mem0[x19 + 24:word64] = x20
	Mem0[x19 + 40:word64] = x1
	v22 = Mem0[x0:byte]
	w0 = (word32) v22
	v23 = sp + 16
	x19 = Mem0[v23:word64]
	v23 = v23 + 8
	x20 = Mem0[v23:word64]
	x21 = Mem0[sp + 32:word64]
	x29 = Mem0[sp:word64]
	sp = sp + 8
	x30 = Mem0[sp:word64]
	sp = sp + 48
	return
	// succ:  buffered_getchar_exit
l0000000000455E44:
	w0 = Mem0[x20 + 644:word32]
	call termsig_handler (retsize: 0;)
	goto l0000000000455D9C
	// succ:  l0000000000455D9C
l0000000000455E50:
	x0 = 0x00000000004E1000
	w0 = Mem0[x0 + 644:word32]
	call termsig_handler (retsize: 0;)
	w0 = Mem0[x19 + 32:word32]
	w1 = 0x00000014
	w0 = w0 & w1
	w31 = w0 - 0x00000010
	NZCV = cond(w31)
	w0 = Mem0[x19:word32]
	branch Test(NE,Z) l0000000000455E08
	// succ:  l0000000000455E74 l0000000000455E08
l0000000000455E74:
	x1 = 0x0000000000000000
	w2 = 0x00000001
	lseek(x0, x1, x2)
	sp = sp + 0xFFFFFFFFFFFFFFF8
	x21 = x0
	x1 = Mem0[x19 + 8:word64]
	w0 = Mem0[x19:word32]
	x2 = Mem0[x19 + 16:word64]
	call zread (retsize: 0;)
	x31 = x0 - x31
	NZCV = cond(x31)
	x20 = x0
	branch Test(LE,ZCV) l0000000000455EF4
	// succ:  l0000000000455EA0 l0000000000455EF4
l0000000000455EA0:
	w0 = Mem0[x19:word32]
	x1 = 0x0000000000000000
	w2 = 0x00000001
	lseek(x0, x1, x2)
	sp = sp + 0xFFFFFFFFFFFFFFF8
	x0 = x0 - x21
	x31 = x20 - x0
	NZCV = cond(x31)
	branch Test(GE,NZV) l0000000000455E20
	// succ:  l0000000000455EBC l0000000000455E20
l0000000000455EBC:
	w0 = Mem0[x19:word32]
	x1 = x21
	w2 = 0x00000000
	lseek(x0, x1, x2)
	sp = sp + 0xFFFFFFFFFFFFFFF8
	w0 = Mem0[x19 + 32:word32]
	x2 = 0x0000000000000001
	w3 = w0 | 0x00000004
	x1 = Mem0[x19 + 8:word64]
	w0 = Mem0[x19:word32]
	Mem0[x19 + 32:word32] = w3
	Mem0[x19 + 16:word64] = x2
	call zread (retsize: 0;)
	x20 = x0
	goto l0000000000455E18
	// succ:  l0000000000455E18
l0000000000455EF4:
	x0 = Mem0[x19 + 8:word64]
	Mem0[x19 + 24:word64] = 0x0000000000000000
	Mem0[x0:byte] = 0x00
	branch x20 != 0x0000000000000000 l0000000000455F18
	// succ:  l0000000000455F04 l0000000000455F18
l0000000000455F04:
	w1 = Mem0[x19 + 32:word32]
	w0 = 0xFFFFFFFF
	w1 = w1 | 0x00000001
	Mem0[x19 + 32:word32] = w1
	goto l0000000000455DD8
	// succ:  l0000000000455DD8
l0000000000455F18:
	__errno_location()
	sp = sp + 0xFFFFFFFFFFFFFFF8
	w0 = Mem0[x0:word32]
	strerror(x0)
	sp = sp + 0xFFFFFFFFFFFFFFF8
	x1 = x0
	x0 = 0x00000000004AE000
	x0 = x0 + 0x00000000000001F0
	call fatal_error (retsize: 0;)
	w0 = 0xFFFFFFFF
	goto l0000000000455DD8
	// succ:  l0000000000455DD8
buffered_getchar_exit:


// getc_with_restart
// Return size: 0
void getc_with_restart()
getc_with_restart_entry:
	// succ:  l0000000000455F3C
l0000000000455F3C:
	sp = fp
	sp = sp + -64
	Mem0[sp:word64] = x29
	sp = sp + 8
	Mem0[sp:word64] = x30
	x29 = x31 + 0x0000000000000000
	v8 = sp + 16
	Mem0[v8:word64] = x19
	v8 = v8 + 8
	Mem0[v8:word64] = x20
	x20 = 0x00000000004E1000
	w1 = Mem0[x20 + 644:word32]
	v12 = sp + 32
	Mem0[v12:word64] = x21
	v12 = v12 + 8
	Mem0[v12:word64] = x22
	v15 = sp + 48
	Mem0[v15:word64] = x23
	v15 = v15 + 8
	Mem0[v15:word64] = x24
	x21 = x0
	branch w1 != 0x00000000 l0000000000456074
	// succ:  l0000000000455F60 l0000000000456074
l0000000000455F60:
	x24 = 0x00000000004E1000
	x0 = x24 + 0x00000000000001C8
	w1 = Mem0[x0 + 12:word32]
	w0 = Mem0[x0 + 16:word32]
	NZCV = cond(w1 - w0)
	branch Test(EQ,Z) l0000000000455F80
	// succ:  l0000000000455F78 l0000000000455F80
l0000000000455F78:
	w2 = w1 + 0x00000001
	branch w0 != 0x00000000 l0000000000455FEC
	// succ:  l0000000000455F80 l0000000000455FEC
l0000000000455F80:
	x22 = x24 + 0x00000000000001C8
	x20 = x20 + 0x0000000000000284
	x23 = x22 + 0x0000000000000018
	goto l0000000000455FD0
	// succ:  l0000000000455FD0
l0000000000455F90:
	x0 = x21
	fileno(x0)
	sp = sp + 0xFFFFFFFFFFFFFFF8
	x1 = x23
	x2 = 0x0000000000000080
	read(x0, x1, x2)
	sp = sp + 0xFFFFFFFFFFFFFFF8
	NZCV = cond(w0 - w31)
	Mem0[x22 + 16:word32] = w0
	x19 = x0
	branch Test(GT,NZV) l0000000000455FE4
	// succ:  l0000000000455FB4 l0000000000455FE4
l0000000000455FB4:
	__errno_location()
	sp = sp + 0xFFFFFFFFFFFFFFF8
	w2 = Mem0[x0:word32]
	w31 = w2 - 0x0000000B
	NZCV = cond(w31)
	branch Test(EQ,Z) l0000000000456010
	// succ:  l0000000000455FC4 l0000000000456010
l0000000000455FC4:
	w31 = w2 - 0x00000004
	NZCV = cond(w31)
	branch w19 == 0x00000000 l0000000000456054
	// succ:  l0000000000455FCC l0000000000456054
l0000000000455FCC:
	branch Test(NE,Z) l0000000000456054
	// succ:  l0000000000455FD0 l0000000000456054
l0000000000455FD0:
	w2 = Mem0[x20:word32]
	branch w2 == 0x00000000 l0000000000455F90
	// succ:  l0000000000455FD8 l0000000000455F90
l0000000000455FD8:
	w0 = Mem0[x20:word32]
	call termsig_handler (retsize: 0;)
	goto l0000000000455F90
	// succ:  l0000000000455F90
l0000000000455FE4:
	w2 = 0x00000001
	w1 = 0x00000000
	// succ:  l0000000000455FEC
l0000000000455FEC:
	x24 = x24 + 0x00000000000001C8
	x0 = x24 + 0x0000000000000018
	v21 = Mem0[x0 + (int64) ((int32) w1):byte]
	w0 = (word32) v21
	Mem0[x24 + 12:word32] = w2
	// succ:  l0000000000455FFC
l0000000000455FFC:
	v22 = sp + 16
	x19 = Mem0[v22:word64]
	v22 = v22 + 8
	x20 = Mem0[v22:word64]
	v23 = sp + 32
	x21 = Mem0[v23:word64]
	v23 = v23 + 8
	x22 = Mem0[v23:word64]
	v24 = sp + 48
	x23 = Mem0[v24:word64]
	v24 = v24 + 8
	x24 = Mem0[v24:word64]
	x29 = Mem0[sp:word64]
	sp = sp + 8
	x30 = Mem0[sp:word64]
	sp = sp + 64
	return
	// succ:  getc_with_restart_exit
l0000000000456010:
	x0 = x21
	fileno(x0)
	sp = sp + 0xFFFFFFFFFFFFFFF8
	call sh_unset_nodelay_mode (retsize: 0;)
	branch (w0 & 0x00000000) == 0x00000000 l0000000000455FD0
	// succ:  l0000000000456020 l0000000000455FD0
l0000000000456020:
	x1 = 0x00000000004AE000
	w2 = 0x00000005
	x1 = x1 + 0x0000000000000210
	x0 = 0x0000000000000000
	dcgettext(x0, x1, x2)
	sp = sp + 0xFFFFFFFFFFFFFFF8
	x19 = x0
	x0 = x21
	fileno(x0)
	sp = sp + 0xFFFFFFFFFFFFFFF8
	w1 = w0
	x0 = x19
	call sys_error (retsize: 0;)
	w0 = 0xFFFFFFFF
	goto l0000000000455FFC
	// succ:  l0000000000455FFC
l0000000000456054:
	x24 = x24 + 0x00000000000001C8
	Mem0[x24 + 12:word32] = 0x00000000
	w0 = 0xFFFFFFFF
	v30 = sp + 16
	x19 = Mem0[v30:word64]
	v30 = v30 + 8
	x20 = Mem0[v30:word64]
	v31 = sp + 32
	x21 = Mem0[v31:word64]
	v31 = v31 + 8
	x22 = Mem0[v31:word64]
	v32 = sp + 48
	x23 = Mem0[v32:word64]
	v32 = v32 + 8
	x24 = Mem0[v32:word64]
	x29 = Mem0[sp:word64]
	sp = sp + 8
	x30 = Mem0[sp:word64]
	sp = sp + 64
	return
	// succ:  getc_with_restart_exit
l0000000000456074:
	w0 = Mem0[x20 + 644:word32]
	call termsig_handler (retsize: 0;)
	goto l0000000000455F60
	// succ:  l0000000000455F60
getc_with_restart_exit:


// ungetc_with_restart
// Return size: 0
void ungetc_with_restart()
ungetc_with_restart_entry:
	// succ:  l0000000000456080
l0000000000456080:
	sp = fp
	x1 = 0x00000000004E1000
	x1 = x1 + 0x00000000000001C8
	w2 = Mem0[x1 + 12:word32]
	branch w2 == 0x00000000 l00000000004560AC
	// succ:  l0000000000456090 l00000000004560AC
l0000000000456090:
	w31 = w0 + 0x00000001
	NZCV = cond(w31)
	branch Test(EQ,Z) l00000000004560A8
	// succ:  l0000000000456098 l00000000004560A8
l0000000000456098:
	w2 = w2 - 0x00000001
	x3 = x1 + 0x0000000000000018
	Mem0[x1 + 12:word32] = w2
	Mem0[x3 + (int64) ((int32) w2):byte] = (byte) w0
	// succ:  l00000000004560A8
l00000000004560A8:
	return
	// succ:  ungetc_with_restart_exit
l00000000004560AC:
	w0 = 0xFFFFFFFF
	return
	// succ:  ungetc_with_restart_exit
ungetc_with_restart_exit:


// set_bash_input_fd
// Return size: 0
void set_bash_input_fd()
set_bash_input_fd_entry:
	// succ:  l00000000004560B4
l00000000004560B4:
	sp = fp
	x1 = 0x00000000004E3000
	w2 = Mem0[x1 + 664:word32]
	x1 = x1 + 0x0000000000000298
	w31 = w2 - 0x00000004
	NZCV = cond(w31)
	branch Test(EQ,Z) l00000000004560E4
	// succ:  l00000000004560C8 l00000000004560E4
l00000000004560C8:
	x1 = 0x00000000004DE000
	w1 = Mem0[x1 + 1712:word32]
	branch w1 != 0x00000000 l00000000004560DC
	// succ:  l00000000004560D4 l00000000004560DC
l00000000004560D4:
	x1 = 0x00000000004D6000
	Mem0[x1 + 1672:word32] = w0
	// succ:  l00000000004560DC
l00000000004560DC:
	w0 = 0x00000000
	return
	// succ:  set_bash_input_fd_exit
l00000000004560E4:
	Mem0[x1 + 16:word32] = w0
	w0 = 0x00000000
	return
	// succ:  set_bash_input_fd_exit
set_bash_input_fd_exit:


// fd_is_bash_input
// Return size: 0
void fd_is_bash_input()
fd_is_bash_input_entry:
	// succ:  l00000000004560F0
l00000000004560F0:
	sp = fp
	x1 = 0x00000000004E3000
	w2 = Mem0[x1 + 664:word32]
	x1 = x1 + 0x0000000000000298
	w31 = w2 - 0x00000004
	NZCV = cond(w31)
	branch Test(EQ,Z) l0000000000456128
	// succ:  l0000000000456104 l0000000000456128
l0000000000456104:
	x1 = 0x00000000004DE000
	w1 = Mem0[x1 + 1712:word32]
	branch w1 != 0x00000000 l0000000000456120
	// succ:  l0000000000456110 l0000000000456120
l0000000000456110:
	x1 = 0x00000000004D6000
	w1 = Mem0[x1 + 1672:word32]
	NZCV = cond(w1 - w0)
	branch Test(EQ,Z) l0000000000456134
	// succ:  l0000000000456120 l0000000000456134
l0000000000456120:
	w0 = 0x00000000
	return
	// succ:  fd_is_bash_input_exit
l0000000000456128:
	w1 = Mem0[x1 + 16:word32]
	NZCV = cond(w1 - w0)
	branch Test(NE,Z) l0000000000456104
	// succ:  l0000000000456134 l0000000000456104
l0000000000456134:
	w0 = 0x00000001
	return
	// succ:  fd_is_bash_input_exit
fd_is_bash_input_exit:


// fd_to_buffered_stream
// Return size: 0
void fd_to_buffered_stream()
fd_to_buffered_stream_entry:
	// succ:  l000000000045613C
l000000000045613C:
	sp = fp
	sp = sp + -192
	Mem0[sp:word64] = x29
	sp = sp + 8
	Mem0[sp:word64] = x30
	x29 = x31 + 0x0000000000000000
	v6 = sp + 16
	Mem0[v6:word64] = x19
	v6 = v6 + 8
	Mem0[v6:word64] = x20
	w1 = w0
	w20 = w0
	x2 = x29 + 0x0000000000000040
	w0 = 0x00000000
	v13 = sp + 32
	Mem0[v13:word64] = x21
	v13 = v13 + 8
	Mem0[v13:word64] = x22
	Mem0[sp + 48:word64] = x23
	__fxstat(x0, x1, x2)
	sp = sp + 0xFFFFFFFFFFFFFFF8
	branch (w0 & 0x00000000) == 0x00000000 l000000000045623C
	// succ:  l0000000000456168 l000000000045623C
l0000000000456168:
	x1 = 0x0000000000000000
	w0 = w20
	w2 = 0x00000001
	lseek(x0, x1, x2)
	sp = sp + 0xFFFFFFFFFFFFFFF8
	branch (w0 & 0x00000000) != 0x00000000 l0000000000456234
	// succ:  l000000000045617C l0000000000456234
l000000000045617C:
	x0 = Mem0[x29 + 112:word64]
	x21 = 0x0000000000001FF0
	x31 = x0 - x21
	NZCV = cond(x31)
l0000000000456194:
	x19 = 0x00000000004AE000
	x19 = x19 + 0x00000000000001E0
	x1 = x19
	w2 = 0x00000184
	x0 = x21
	call sh_xmalloc (retsize: 0;)
	x1 = x19
	x23 = x0
	w2 = 0x000000BB
	x0 = 0x0000000000000030
	call sh_xmalloc (retsize: 0;)
	x22 = 0x00000000004E1000
	x19 = x0
	x0 = x22 + 0x00000000000001C8
	w0 = Mem0[x0 + 8:word32]
	NZCV = cond(w20 - w0)
	branch Test(GE,NZV) l0000000000456228
	// succ:  l00000000004561D8 l0000000000456228
l00000000004561D8:
	x22 = x22 + 0x00000000000001C8
	x0 = Mem0[x22:word64]
	x31 = x21 - 0x0000000000000001
	NZCV = cond(x31)
	Mem0[x0 + (int64) ((int32) w20):word64] = x19
	Mem0[x19:word32] = w20
	Mem0[x19 + 8:word64] = x23
	Mem0[x19 + 16:word64] = x21
	Mem0[x19 + 32:word32] = 0x00000000
	Mem0[x19 + 40:word64] = 0x0000000000000000
	Mem0[x19 + 24:word64] = 0x0000000000000000
	branch Test(EQ,Z) l000000000045621C
	// succ:  l0000000000456204 l000000000045621C
l0000000000456204:
	x0 = x19
	// succ:  l0000000000456208
l0000000000456208:
	v23 = sp + 16
	x19 = Mem0[v23:word64]
	v23 = v23 + 8
	x20 = Mem0[v23:word64]
	v24 = sp + 32
	x21 = Mem0[v24:word64]
	v24 = v24 + 8
	x22 = Mem0[v24:word64]
	x23 = Mem0[sp + 48:word64]
	x29 = Mem0[sp:word64]
	sp = sp + 8
	x30 = Mem0[sp:word64]
	sp = sp + 192
	return
	// succ:  fd_to_buffered_stream_exit
l000000000045621C:
	w0 = 0x00000004
	Mem0[x19 + 32:word32] = w0
	goto l0000000000456204
	// succ:  l0000000000456204
l0000000000456228:
	w0 = w20
	call fn0000000000455D04 (retsize: 0;)
	goto l00000000004561D8
	// succ:  l00000000004561D8
l0000000000456234:
	x21 = 0x0000000000000001
	goto l0000000000456194
	// succ:  l0000000000456194
l000000000045623C:
	w0 = w20
	close(x0)
	sp = sp + 0xFFFFFFFFFFFFFFF8
	x0 = 0x0000000000000000
	goto l0000000000456208
	// succ:  l0000000000456208
fd_to_buffered_stream_exit:


// open_buffered_stream
// Return size: 0
void open_buffered_stream()
open_buffered_stream_entry:
	// succ:  l000000000045624C
l000000000045624C:
	sp = fp
	sp = sp + -16
	Mem0[sp:word64] = x29
	sp = sp + 8
	Mem0[sp:word64] = x30
	x29 = x31 + 0x0000000000000000
	w1 = 0x00000000
	open(x0, x1)
	sp = sp + 0xFFFFFFFFFFFFFFF8
	branch (w0 & 0x00000000) == 0x00000000 l0000000000456268
	// succ:  l0000000000456260 l0000000000456268
l0000000000456260:
	x29 = Mem0[sp:word64]
	sp = sp + 8
	x30 = Mem0[sp:word64]
	sp = sp + 16
	// succ:  l0000000000456264_thunk_fd_to_buffered_stream
l0000000000456264_thunk_fd_to_buffered_stream:
	call fd_to_buffered_stream (retsize: 0;)
	return
	// succ:  open_buffered_stream_exit
l0000000000456268:
	x0 = 0x0000000000000000
	x29 = Mem0[sp:word64]
	sp = sp + 8
	x30 = Mem0[sp:word64]
	sp = sp + 16
	return
	// succ:  open_buffered_stream_exit
open_buffered_stream_exit:


// free_buffered_stream
// Return size: 0
void free_buffered_stream()
free_buffered_stream_entry:
	// succ:  l0000000000456274
l0000000000456274:
	sp = fp
	sp = sp + -48
	Mem0[sp:word64] = x29
	sp = sp + 8
	Mem0[sp:word64] = x30
	x29 = x31 + 0x0000000000000000
	v8 = sp + 16
	Mem0[v8:word64] = x19
	v8 = v8 + 8
	Mem0[v8:word64] = x20
	Mem0[sp + 32:word64] = x21
	x19 = x0
	branch x0 == 0x0000000000000000 l00000000004562C8
	// succ:  l000000000045628C l00000000004562C8
l000000000045628C:
	x0 = Mem0[x0 + 8:word64]
	w21 = Mem0[x19:word32]
	x20 = 0x00000000004AE000
	branch x0 == 0x0000000000000000 l00000000004562A8
	// succ:  l000000000045629C l00000000004562A8
l000000000045629C:
	x1 = x20 + 0x00000000000001E0
	w2 = 0x000001A1
	call sh_xfree (retsize: 0;)
	// succ:  l00000000004562A8
l00000000004562A8:
	x0 = x19
	x1 = x20 + 0x00000000000001E0
	w2 = 0x000001A2
	call sh_xfree (retsize: 0;)
	x0 = 0x00000000004E1000
	x0 = x0 + 0x00000000000001C8
	x0 = Mem0[x0:word64]
	Mem0[x0 + (int64) ((int32) w21):word64] = 0x0000000000000000
	// succ:  l00000000004562C8
l00000000004562C8:
	v14 = sp + 16
	x19 = Mem0[v14:word64]
	v14 = v14 + 8
	x20 = Mem0[v14:word64]
	x21 = Mem0[sp + 32:word64]
	x29 = Mem0[sp:word64]
	sp = sp + 8
	x30 = Mem0[sp:word64]
	sp = sp + 48
	return
	// succ:  free_buffered_stream_exit
free_buffered_stream_exit:


// duplicate_buffered_stream
// Return size: 0
void duplicate_buffered_stream()
duplicate_buffered_stream_entry:
	// succ:  l00000000004562D8
l00000000004562D8:
	sp = fp
	sp = sp + -80
	Mem0[sp:word64] = x29
	sp = sp + 8
	Mem0[sp:word64] = x30
	x29 = x31 + 0x0000000000000000
	v8 = sp + 16
	Mem0[v8:word64] = x19
	v8 = v8 + 8
	Mem0[v8:word64] = x20
	v11 = sp + 32
	Mem0[v11:word64] = x21
	v11 = v11 + 8
	Mem0[v11:word64] = x22
	v14 = sp + 48
	Mem0[v14:word64] = x23
	v14 = v14 + 8
	Mem0[v14:word64] = x24
	Mem0[sp + 64:word64] = x25
	NZCV = cond(w0 - w1)
	w20 = w0
	w19 = w1
	branch Test(EQ,Z) l0000000000456450
	// succ:  l0000000000456300 l0000000000456450
l0000000000456300:
	x22 = 0x00000000004E1000
	x0 = x22 + 0x00000000000001C8
	w1 = Mem0[x0 + 8:word32]
l0000000000456450:
	w0 = 0x00000000
	v23 = sp + 16
	x19 = Mem0[v23:word64]
	v23 = v23 + 8
	x20 = Mem0[v23:word64]
	v24 = sp + 32
	x21 = Mem0[v24:word64]
	v24 = v24 + 8
	x22 = Mem0[v24:word64]
	v25 = sp + 48
	x23 = Mem0[v25:word64]
	v25 = v25 + 8
	x24 = Mem0[v25:word64]
	x25 = Mem0[sp + 64:word64]
	x29 = Mem0[sp:word64]
	sp = sp + 8
	x30 = Mem0[sp:word64]
	sp = sp + 80
	return
	// succ:  duplicate_buffered_stream_exit
duplicate_buffered_stream_exit:


// close_buffered_stream
// Return size: 0
void close_buffered_stream()
close_buffered_stream_entry:
	// succ:  l0000000000456490
l0000000000456490:
	sp = fp
	sp = sp + -32
	Mem0[sp:word64] = x29
	sp = sp + 8
	Mem0[sp:word64] = x30
	x29 = x31 + 0x0000000000000000
	Mem0[sp + 16:word64] = x19
	branch x0 == 0x0000000000000000 l00000000004564B8
	// succ:  l00000000004564A0 l00000000004564B8
l00000000004564A0:
	w19 = Mem0[x0:word32]
	call free_buffered_stream (retsize: 0;)
	w0 = w19
	x19 = Mem0[sp + 16:word64]
	x29 = Mem0[sp:word64]
	sp = sp + 8
	x30 = Mem0[sp:word64]
	sp = sp + 32
	close(x0)
	return
	// succ:  close_buffered_stream_exit
l00000000004564B8:
	x19 = Mem0[sp + 16:word64]
	x29 = Mem0[sp:word64]
	sp = sp + 8
	x30 = Mem0[sp:word64]
	sp = sp + 32
	return
	// succ:  close_buffered_stream_exit
close_buffered_stream_exit:


// close_buffered_fd
// Return size: 0
void close_buffered_fd()
close_buffered_fd_entry:
	// succ:  l00000000004564C4
l00000000004564C4:
	sp = fp
	sp = sp + -16
	Mem0[sp:word64] = x29
	sp = sp + 8
	Mem0[sp:word64] = x30
	x29 = x31 + 0x0000000000000000
	branch (w0 & 0x00000000) == 0x00000000 l0000000000456508
	// succ:  l00000000004564D0 l0000000000456508
l00000000004564D0:
	x1 = 0x00000000004E1000
	x1 = x1 + 0x00000000000001C8
	w2 = Mem0[x1 + 8:word32]
	NZCV = cond(w0 - w2)
	branch Test(GE,NZV) l0000000000456500
	// succ:  l00000000004564E4 l0000000000456500
l00000000004564E4:
	x1 = Mem0[x1:word64]
	branch x1 == 0x0000000000000000 l0000000000456500
	// succ:  l00000000004564EC l0000000000456500
l00000000004564EC:
	x1 = Mem0[x1 + (int64) ((int32) w0):word64]
	branch x1 == 0x0000000000000000 l0000000000456500
	// succ:  l00000000004564F4 l0000000000456500
l00000000004564F4:
	x29 = Mem0[sp:word64]
	sp = sp + 8
	x30 = Mem0[sp:word64]
	sp = sp + 16
	x0 = x1
	// succ:  l00000000004564FC_thunk_close_buffered_stream
l00000000004564FC_thunk_close_buffered_stream:
	call close_buffered_stream (retsize: 0;)
	return
	// succ:  close_buffered_fd_exit
l0000000000456500:
	x29 = Mem0[sp:word64]
	sp = sp + 8
	x30 = Mem0[sp:word64]
	sp = sp + 16
	close(x0)
	return
	// succ:  close_buffered_fd_exit
l0000000000456508:
	__errno_location()
	sp = sp + 0xFFFFFFFFFFFFFFF8
	w1 = 0x00000009
	Mem0[x0:word32] = w1
	x29 = Mem0[sp:word64]
	sp = sp + 8
	x30 = Mem0[sp:word64]
	sp = sp + 16
	w0 = 0xFFFFFFFF
	return
	// succ:  close_buffered_fd_exit
close_buffered_fd_exit:


// set_buffered_stream
// Return size: 0
void set_buffered_stream()
set_buffered_stream_entry:
	// succ:  l0000000000456520
l0000000000456520:
	sp = fp
	x2 = 0x00000000004E1000
	x2 = x2 + 0x00000000000001C8
	x2 = Mem0[x2:word64]
set_buffered_stream_exit:


// sync_buffered_stream
// Return size: 0
void sync_buffered_stream()
sync_buffered_stream_entry:
	// succ:  l000000000045653C
l000000000045653C:
	sp = fp
	sp = sp + -32
	Mem0[sp:word64] = x29
	sp = sp + 8
	Mem0[sp:word64] = x30
	x29 = x31 + 0x0000000000000000
	x1 = 0x00000000004E1000
	x1 = x1 + 0x00000000000001C8
	x1 = Mem0[x1:word64]
	Mem0[sp + 16:word64] = x19
	branch x1 == 0x0000000000000000 l000000000045659C
	// succ:  l0000000000456558 l000000000045659C
l0000000000456558:
	x19 = Mem0[x1 + (int64) ((int32) w0):word64]
	branch x19 == 0x0000000000000000 l000000000045659C
	// succ:  l0000000000456560 l000000000045659C
l0000000000456560:
	x1 = Mem0[x19 + 24:word64]
	x0 = Mem0[x19 + 40:word64]
	x1 = x1 - x0
	NZCV = cond(x1)
	branch Test(NE,Z) l0000000000456588
	// succ:  l0000000000456570 l0000000000456588
l0000000000456570:
	Mem0[x19 + 40:word64] = 0x0000000000000000
	Mem0[x19 + 24:word64] = 0x0000000000000000
	w0 = 0x00000000
	// succ:  l000000000045657C
l000000000045657C:
	x19 = Mem0[sp + 16:word64]
	x29 = Mem0[sp:word64]
	sp = sp + 8
	x30 = Mem0[sp:word64]
	sp = sp + 32
	return
	// succ:  sync_buffered_stream_exit
l0000000000456588:
	w0 = Mem0[x19:word32]
	x1 = x31 - x1
	w2 = 0x00000001
	lseek(x0, x1, x2)
	sp = sp + 0xFFFFFFFFFFFFFFF8
	goto l0000000000456570
	// succ:  l0000000000456570
l000000000045659C:
	w0 = 0xFFFFFFFF
	goto l000000000045657C
	// succ:  l000000000045657C
sync_buffered_stream_exit:


// save_bash_input
// Return size: 0
void save_bash_input()
save_bash_input_entry:
	// succ:  l00000000004565A4
l00000000004565A4:
	sp = fp
	sp = sp + -64
	Mem0[sp:word64] = x29
	sp = sp + 8
	Mem0[sp:word64] = x30
	x29 = x31 + 0x0000000000000000
	v8 = sp + 32
	Mem0[v8:word64] = x21
	v8 = v8 + 8
	Mem0[v8:word64] = x22
	x22 = 0x00000000004E1000
	x2 = x22 + 0x00000000000001C8
	x21 = Mem0[x2:word64]
	v12 = sp + 16
	Mem0[v12:word64] = x19
	v12 = v12 + 8
	Mem0[v12:word64] = x20
	x2 = Mem0[x21 + (int64) ((int32) w0):word64]
	Mem0[sp + 48:word64] = x23
	w20 = w0
	w19 = w1
	branch x2 == 0x0000000000000000 l00000000004565D8
	// succ:  l00000000004565D4 l00000000004565D8
l00000000004565D4:
	call sync_buffered_stream (retsize: 0;)
	// succ:  l00000000004565D8
l00000000004565D8:
	w31 = w19 + 0x00000001
	NZCV = cond(w31)
	branch Test(EQ,Z) l000000000045667C
	// succ:  l00000000004565E0 l000000000045667C
l00000000004565E0:
l000000000045665C:
	w0 = w19
	v24 = sp + 32
	x21 = Mem0[v24:word64]
	v24 = v24 + 8
	x22 = Mem0[v24:word64]
	v25 = sp + 16
	x19 = Mem0[v25:word64]
	v25 = v25 + 8
	x20 = Mem0[v25:word64]
	x23 = Mem0[sp + 48:word64]
	x29 = Mem0[sp:word64]
	sp = sp + 8
	x30 = Mem0[sp:word64]
	sp = sp + 64
	return
	// succ:  save_bash_input_exit
l000000000045667C:
	w0 = w20
	w1 = 0x00000000
	w2 = 0x0000000A
	fcntl(x0, x1)
	sp = sp + 0xFFFFFFFFFFFFFFF8
	w31 = w0 + 0x00000001
	NZCV = cond(w31)
	w19 = w0
	branch Test(NE,Z) l00000000004566E4
	// succ:  l0000000000456698 l00000000004566E4
l0000000000456698:
	w0 = w20
	w1 = 0x00000001
	w2 = 0x00000000
	fcntl(x0, x1)
	sp = sp + 0xFFFFFFFFFFFFFFF8
	branch w0 != 0x00000000 l000000000045665C
	// succ:  l00000000004566AC l000000000045665C
l00000000004566AC:
	x1 = 0x00000000004AE000
	x1 = x1 + 0x0000000000000238
	w2 = 0x00000005
	x0 = 0x0000000000000000
	dcgettext(x0, x1, x2)
	sp = sp + 0xFFFFFFFFFFFFFFF8
	w1 = w20
	call sys_error (retsize: 0;)
	goto l000000000045665C
	// succ:  l000000000045665C
l00000000004566E4:
	x0 = x22 + 0x00000000000001C8
	x21 = Mem0[x0:word64]
	goto l00000000004565E0
	// succ:  l00000000004565E0
save_bash_input_exit:


// check_bash_input
// Return size: 0
void check_bash_input()
check_bash_input_entry:
	// succ:  l00000000004566F0
l00000000004566F0:
	sp = fp
	sp = sp + -16
	Mem0[sp:word64] = x29
	sp = sp + 8
	Mem0[sp:word64] = x30
	x29 = x31 + 0x0000000000000000
	x1 = 0x00000000004E3000
	w3 = Mem0[x1 + 664:word32]
	w2 = w0
	w31 = w3 - 0x00000004
	NZCV = cond(w31)
	x1 = x1 + 0x0000000000000298
	branch Test(EQ,Z) l0000000000456738
	// succ:  l0000000000456710 l0000000000456738
l0000000000456710:
	x0 = 0x00000000004DE000
	w1 = Mem0[x0 + 1712:word32]
	w0 = 0x00000000
	branch w1 != 0x00000000 l0000000000456730
	// succ:  l0000000000456720 l0000000000456730
l0000000000456720:
	x1 = 0x00000000004D6000
	w1 = Mem0[x1 + 1672:word32]
	NZCV = cond(w2 - w1)
	branch Test(EQ,Z) l0000000000456744
	// succ:  l0000000000456730 l0000000000456744
l0000000000456730:
	x29 = Mem0[sp:word64]
	sp = sp + 8
	x30 = Mem0[sp:word64]
	sp = sp + 16
	return
	// succ:  check_bash_input_exit
l0000000000456738:
	w0 = Mem0[x1 + 16:word32]
	NZCV = cond(w2 - w0)
	branch Test(NE,Z) l0000000000456710
	// succ:  l0000000000456744 l0000000000456710
l0000000000456744:
	NZCV = cond(w2 - w31)
	branch Test(LE,ZCV) l0000000000456768
	// succ:  l000000000045674C l0000000000456768
l000000000045674C:
	w0 = w2
	w1 = 0xFFFFFFFF
	call save_bash_input (retsize: 0;)
	w31 = w0 + 0x00000001
	NZCV = cond(w31)
l0000000000456768:
	w0 = 0x00000000
	branch Test(NE,Z) l0000000000456730
	// succ:  l0000000000456770 l0000000000456730
l0000000000456770:
	call sync_buffered_stream (retsize: 0;)
	w31 = w0 + 0x00000001
	NZCV = cond(w31)
check_bash_input_exit:


// with_input_from_buffered_stream
// Return size: 0
void with_input_from_buffered_stream()
with_input_from_buffered_stream_entry:
	// succ:  l0000000000456784
l0000000000456784:
	sp = fp
	sp = sp + -32
	Mem0[sp:word64] = x29
	sp = sp + 8
	Mem0[sp:word64] = x30
	x29 = x31 + 0x0000000000000000
	x4 = 0x0000000000000000
with_input_from_buffered_stream_exit:


// fn0000000000456808
// Return size: 0
void fn0000000000456808()
fn0000000000456808_entry:
	// succ:  l0000000000456808
l0000000000456808:
	sp = fp
	sp = sp + -32
	Mem0[sp:word64] = x29
	sp = sp + 8
	Mem0[sp:word64] = x30
	x29 = x31 + 0x0000000000000000
	v8 = sp + 16
	Mem0[v8:word64] = x19
	v8 = v8 + 8
	Mem0[v8:word64] = x20
	x19 = x1
	x1 = 0x00000000004AE000
	x20 = x0
	x1 = x1 + 0x00000000000002B0
	w2 = 0x000000C7
	x0 = 0x0000000000000020
	call sh_xmalloc (retsize: 0;)
	x2 = 0x00000000004E1000
	x2 = x2 + 0x0000000000000260
	x3 = Mem0[x2:word64]
	Mem0[x0 + 8:word64] = x20
	Mem0[x0:word64] = x3
	Mem0[x0 + 16:word64] = x19
	Mem0[x2:word64] = x0
	v14 = sp + 16
	x19 = Mem0[v14:word64]
	v14 = v14 + 8
	x20 = Mem0[v14:word64]
	x29 = Mem0[sp:word64]
	sp = sp + 8
	x30 = Mem0[sp:word64]
	sp = sp + 32
	return
	// succ:  fn0000000000456808_exit
fn0000000000456808_exit:


// fn0000000000456858
// Return size: 0
void fn0000000000456858()
fn0000000000456858_entry:
	// succ:  l0000000000456858
l0000000000456858:
	sp = fp
	sp = sp + -64
	Mem0[sp:word64] = x29
	sp = sp + 8
	Mem0[sp:word64] = x30
	x29 = x31 + 0x0000000000000000
	v8 = sp + 16
	Mem0[v8:word64] = x19
	v8 = v8 + 8
	Mem0[v8:word64] = x20
	x20 = 0x00000000004E1000
	x20 = x20 + 0x0000000000000260
	x19 = Mem0[x20:word64]
	v11 = sp + 48
	Mem0[v11:word64] = x23
	v11 = v11 + 8
	Mem0[v11:word64] = x24
	v14 = sp + 32
	Mem0[v14:word64] = x21
	v14 = v14 + 8
	Mem0[v14:word64] = x22
	x23 = x0
	x24 = 0x00000000004AE000
	branch x19 == 0x0000000000000000 l0000000000456934
	// succ:  l0000000000456884 l0000000000456934
l0000000000456884:
	x21 = 0x0000000000456000
	x21 = x21 + 0x00000000000007F4
	x22 = x24 + 0x00000000000002B0
	goto l00000000004568B8
	// succ:  l00000000004568B8
l0000000000456894:
	x0 = Mem0[x19 + 16:word64]
	branch Test(EQ,Z) l0000000000456910
	// succ:  l000000000045689C l0000000000456910
l000000000045689C:
	call x2 (retsize: 0;)
	// succ:  l00000000004568A0
l00000000004568A0:
	x0 = x19
	x1 = x22
	w2 = 0x00000130
	call sh_xfree (retsize: 0;)
	x19 = Mem0[x20:word64]
	branch x19 == 0x0000000000000000 l0000000000456934
	// succ:  l00000000004568B8 l0000000000456934
l00000000004568B8:
	x3 = Mem0[x19:word64]
	x2 = Mem0[x19 + 8:word64]
	Mem0[x20:word64] = x3
	x31 = x2 - x21
	NZCV = cond(x31)
	branch x2 != 0x0000000000000000 l0000000000456894
	// succ:  l00000000004568CC l0000000000456894
l00000000004568CC:
	branch x23 == 0x0000000000000000 l00000000004568A0
	// succ:  l00000000004568D0 l00000000004568A0
l00000000004568D0:
	x0 = Mem0[x19 + 16:word64]
	v23 = Mem0[x23:byte]
	w2 = (word32) v23
	v25 = Mem0[x0:byte]
	w3 = (word32) v25
	NZCV = cond(w3 - w2)
	branch Test(NE,Z) l00000000004568A0
	// succ:  l00000000004568E4 l00000000004568A0
l00000000004568E4:
	x1 = x23
	strcmp(x0, x1)
	sp = sp + 0xFFFFFFFFFFFFFFF8
	branch w0 != 0x00000000 l00000000004568A0
	// succ:  l00000000004568F0 l00000000004568A0
l00000000004568F0:
	x0 = x19
	x1 = x24 + 0x00000000000002B0
	v29 = sp + 16
	x19 = Mem0[v29:word64]
	v29 = v29 + 8
	x20 = Mem0[v29:word64]
	v30 = sp + 32
	x21 = Mem0[v30:word64]
	v30 = v30 + 8
	x22 = Mem0[v30:word64]
	v31 = sp + 48
	x23 = Mem0[v31:word64]
	v31 = v31 + 8
	x24 = Mem0[v31:word64]
	x29 = Mem0[sp:word64]
	sp = sp + 8
	x30 = Mem0[sp:word64]
	sp = sp + 64
	w2 = 0x00000123
	// succ:  l000000000045690C_thunk_sh_xfree
l000000000045690C_thunk_sh_xfree:
	call sh_xfree (retsize: 0;)
	return
	// succ:  fn0000000000456858_exit
l0000000000456910:
	v56 = Mem0[x19 + 12:int32]
	x2 = (word64) v56
	x1 = x19 + 0x000000000000001C
	memcpy(x0, x1, x2)
	sp = sp + 0xFFFFFFFFFFFFFFF8
	x0 = x19
	x1 = x22
	w2 = 0x00000130
	call sh_xfree (retsize: 0;)
	x19 = Mem0[x20:word64]
	branch x19 != 0x0000000000000000 l00000000004568B8
	// succ:  l0000000000456934 l00000000004568B8
l0000000000456934:
	branch x23 != 0x0000000000000000 l000000000045694C
	// succ:  l0000000000456938 l000000000045694C
l0000000000456938:
	v16 = sp + 16
	x19 = Mem0[v16:word64]
	v16 = v16 + 8
	x20 = Mem0[v16:word64]
	v17 = sp + 32
	x21 = Mem0[v17:word64]
	v17 = v17 + 8
	x22 = Mem0[v17:word64]
	v18 = sp + 48
	x23 = Mem0[v18:word64]
	v18 = v18 + 8
	x24 = Mem0[v18:word64]
	x29 = Mem0[sp:word64]
	sp = sp + 8
	x30 = Mem0[sp:word64]
	sp = sp + 64
	return
	// succ:  fn0000000000456858_exit
l000000000045694C:
	x1 = x23
	v32 = sp + 16
	x19 = Mem0[v32:word64]
	v32 = v32 + 8
	x20 = Mem0[v32:word64]
	v33 = sp + 32
	x21 = Mem0[v33:word64]
	v33 = v33 + 8
	x22 = Mem0[v33:word64]
	v34 = sp + 48
	x23 = Mem0[v34:word64]
	v34 = v34 + 8
	x24 = Mem0[v34:word64]
	x0 = 0x00000000004AE000
	x29 = Mem0[sp:word64]
	sp = sp + 8
	x30 = Mem0[sp:word64]
	sp = sp + 64
	x0 = x0 + 0x00000000000002C8
	// succ:  l0000000000456968_thunk_internal_warning
l0000000000456968_thunk_internal_warning:
	call internal_warning (retsize: 0;)
	return
	// succ:  fn0000000000456858_exit
fn0000000000456858_exit:


// begin_unwind_frame
// Return size: 0
void begin_unwind_frame()
begin_unwind_frame_entry:
	// succ:  l000000000045696C
l000000000045696C:
	sp = fp
	sp = sp + -32
	Mem0[sp:word64] = x29
	sp = sp + 8
	Mem0[sp:word64] = x30
	x29 = x31 + 0x0000000000000000
	v8 = sp + 16
	Mem0[v8:word64] = x19
	v8 = v8 + 8
	Mem0[v8:word64] = x20
	x19 = 0x00000000004E1000
	w20 = Mem0[x19 + 636:word32]
	x1 = x0
	x0 = 0x0000000000000000
	Mem0[x19 + 636:word32] = 0x00000000
	call fn0000000000456808 (retsize: 0;)
	Mem0[x19 + 636:word32] = w20
	v12 = sp + 16
	x19 = Mem0[v12:word64]
	v12 = v12 + 8
	x20 = Mem0[v12:word64]
	x29 = Mem0[sp:word64]
	sp = sp + 8
	x30 = Mem0[sp:word64]
	sp = sp + 32
	return
	// succ:  begin_unwind_frame_exit
begin_unwind_frame_exit:


// discard_unwind_frame
// Return size: 0
void discard_unwind_frame()
discard_unwind_frame_entry:
	// succ:  l00000000004569A0
l00000000004569A0:
	sp = fp
	sp = sp + -80
	Mem0[sp:word64] = x29
	sp = sp + 8
	Mem0[sp:word64] = x30
	x29 = x31 + 0x0000000000000000
	v8 = sp + 16
	Mem0[v8:word64] = x19
	v8 = v8 + 8
	Mem0[v8:word64] = x20
	x20 = 0x00000000004E1000
	x20 = x20 + 0x0000000000000260
	x19 = Mem0[x20:word64]
	v11 = sp + 32
	Mem0[v11:word64] = x21
	v11 = v11 + 8
	Mem0[v11:word64] = x22
	v14 = sp + 48
	Mem0[v14:word64] = x23
	v14 = v14 + 8
	Mem0[v14:word64] = x24
	Mem0[sp + 64:word64] = x25
	x22 = x0
	branch x19 == 0x0000000000000000 l0000000000456A40
	// succ:  l00000000004569CC l0000000000456A40
l00000000004569CC:
	x23 = 0x00000000004E1000
	x24 = 0x00000000004AE000
	w25 = Mem0[x23 + 636:word32]
	x21 = x24 + 0x00000000000002B0
	Mem0[x23 + 636:word32] = 0x00000000
	goto l00000000004569FC
	// succ:  l00000000004569FC
l00000000004569E4:
	x0 = x19
	x1 = x21
	w2 = 0x00000101
	call sh_xfree (retsize: 0;)
	x19 = Mem0[x20:word64]
	branch x19 == 0x0000000000000000 l0000000000456A58
	// succ:  l00000000004569FC l0000000000456A58
l00000000004569FC:
	x3 = Mem0[x19:word64]
	x2 = Mem0[x19 + 8:word64]
	Mem0[x20:word64] = x3
	branch x2 != 0x0000000000000000 l00000000004569E4
	// succ:  l0000000000456A0C l00000000004569E4
l0000000000456A0C:
	x0 = Mem0[x19 + 16:word64]
	v24 = Mem0[x22:byte]
	w2 = (word32) v24
	v26 = Mem0[x0:byte]
	w3 = (word32) v26
	NZCV = cond(w3 - w2)
	branch Test(NE,Z) l00000000004569E4
	// succ:  l0000000000456A20 l00000000004569E4
l0000000000456A20:
	x1 = x22
	strcmp(x0, x1)
	sp = sp + 0xFFFFFFFFFFFFFFF8
	branch w0 != 0x00000000 l00000000004569E4
	// succ:  l0000000000456A2C l00000000004569E4
l0000000000456A2C:
	x0 = x19
	x1 = x24 + 0x00000000000002B0
	w2 = 0x000000FC
	call sh_xfree (retsize: 0;)
	Mem0[x23 + 636:word32] = w25
	// succ:  l0000000000456A40
l0000000000456A40:
	v18 = sp + 16
	x19 = Mem0[v18:word64]
	v18 = v18 + 8
	x20 = Mem0[v18:word64]
	v19 = sp + 32
	x21 = Mem0[v19:word64]
	v19 = v19 + 8
	x22 = Mem0[v19:word64]
	v20 = sp + 48
	x23 = Mem0[v20:word64]
	v20 = v20 + 8
	x24 = Mem0[v20:word64]
	x25 = Mem0[sp + 64:word64]
	x29 = Mem0[sp:word64]
	sp = sp + 8
	x30 = Mem0[sp:word64]
	sp = sp + 80
	return
	// succ:  discard_unwind_frame_exit
l0000000000456A58:
	x0 = 0x00000000004AE000
	x0 = x0 + 0x00000000000002F0
	x1 = x22
	call internal_warning (retsize: 0;)
	Mem0[x23 + 636:word32] = w25
	goto l0000000000456A40
	// succ:  l0000000000456A40
discard_unwind_frame_exit:


// run_unwind_frame
// Return size: 0
void run_unwind_frame()
run_unwind_frame_entry:
	// succ:  l0000000000456A70
l0000000000456A70:
	sp = fp
	sp = sp + -32
	Mem0[sp:word64] = x29
	sp = sp + 8
	Mem0[sp:word64] = x30
	x29 = x31 + 0x0000000000000000
	x1 = 0x00000000004E1000
	x1 = x1 + 0x0000000000000260
	x1 = Mem0[x1:word64]
	v9 = sp + 16
	Mem0[v9:word64] = x19
	v9 = v9 + 8
	Mem0[v9:word64] = x20
	branch x1 == 0x0000000000000000 l0000000000456AA0
	goto l0000000000456A8C
	// succ:  l0000000000456A8C l0000000000456AA0
l0000000000456A70:
l0000000000456A8C:
	x19 = 0x00000000004E1000
	w20 = Mem0[x19 + 636:word32]
	Mem0[x19 + 636:word32] = 0x00000000
	call fn0000000000456858 (retsize: 0;)
	Mem0[x19 + 636:word32] = w20
	// succ:  l0000000000456AA0
l0000000000456AA0:
	v11 = sp + 16
	x19 = Mem0[v11:word64]
	v11 = v11 + 8
	x20 = Mem0[v11:word64]
	x29 = Mem0[sp:word64]
	sp = sp + 8
	x30 = Mem0[sp:word64]
	sp = sp + 32
	return
	// succ:  run_unwind_frame_exit
run_unwind_frame_exit:


// add_unwind_protect
// Return size: 0
void add_unwind_protect()
add_unwind_protect_entry:
	// succ:  l0000000000456AAC
l0000000000456AAC:
	sp = fp
	sp = sp + -32
	Mem0[sp:word64] = x29
	sp = sp + 8
	Mem0[sp:word64] = x30
	x29 = x31 + 0x0000000000000000
	v8 = sp + 16
	Mem0[v8:word64] = x19
	v8 = v8 + 8
	Mem0[v8:word64] = x20
	x19 = 0x00000000004E1000
	w20 = Mem0[x19 + 636:word32]
	Mem0[x19 + 636:word32] = 0x00000000
	call fn0000000000456808 (retsize: 0;)
	Mem0[x19 + 636:word32] = w20
	v10 = sp + 16
	x19 = Mem0[v10:word64]
	v10 = v10 + 8
	x20 = Mem0[v10:word64]
	x29 = Mem0[sp:word64]
	sp = sp + 8
	x30 = Mem0[sp:word64]
	sp = sp + 32
	return
	// succ:  add_unwind_protect_exit
add_unwind_protect_exit:


// remove_unwind_protect
// Return size: 0
void remove_unwind_protect()
remove_unwind_protect_entry:
	// succ:  l0000000000456AD8
l0000000000456AD8:
	sp = fp
	sp = sp + -32
	Mem0[sp:word64] = x29
	sp = sp + 8
	Mem0[sp:word64] = x30
	x29 = x31 + 0x0000000000000000
	x3 = 0x00000000004E1000
	x3 = x3 + 0x0000000000000260
	x0 = Mem0[x3:word64]
	v10 = sp + 16
	Mem0[v10:word64] = x19
	v10 = v10 + 8
	Mem0[v10:word64] = x20
	branch x0 == 0x0000000000000000 l0000000000456B1C
	// succ:  l0000000000456AF4 l0000000000456B1C
l0000000000456AF4:
	x19 = 0x00000000004E1000
	w20 = Mem0[x19 + 636:word32]
	Mem0[x19 + 636:word32] = 0x00000000
	x4 = Mem0[x0:word64]
	x1 = 0x00000000004AE000
	x1 = x1 + 0x00000000000002B0
	w2 = 0x000000D8
	Mem0[x3:word64] = x4
	call sh_xfree (retsize: 0;)
	Mem0[x19 + 636:word32] = w20
	// succ:  l0000000000456B1C
l0000000000456B1C:
	v15 = sp + 16
	x19 = Mem0[v15:word64]
	v15 = v15 + 8
	x20 = Mem0[v15:word64]
	x29 = Mem0[sp:word64]
	sp = sp + 8
	x30 = Mem0[sp:word64]
	sp = sp + 32
	return
	// succ:  remove_unwind_protect_exit
remove_unwind_protect_exit:


// run_unwind_protects
// Return size: 0
void run_unwind_protects()
run_unwind_protects_entry:
	// succ:  l0000000000456B28
l0000000000456B28:
	sp = fp
	sp = sp + -32
	Mem0[sp:word64] = x29
	sp = sp + 8
	Mem0[sp:word64] = x30
	x29 = x31 + 0x0000000000000000
	x0 = 0x00000000004E1000
	x0 = x0 + 0x0000000000000260
	x0 = Mem0[x0:word64]
	v9 = sp + 16
	Mem0[v9:word64] = x19
	v9 = v9 + 8
	Mem0[v9:word64] = x20
	branch x0 == 0x0000000000000000 l0000000000456B5C
	// succ:  l0000000000456B44 l0000000000456B5C
l0000000000456B44:
	x19 = 0x00000000004E1000
	w20 = Mem0[x19 + 636:word32]
	x0 = 0x0000000000000000
	Mem0[x19 + 636:word32] = 0x00000000
	call fn0000000000456858 (retsize: 0;)
	Mem0[x19 + 636:word32] = w20
	// succ:  l0000000000456B5C
l0000000000456B5C:
	v11 = sp + 16
	x19 = Mem0[v11:word64]
	v11 = v11 + 8
	x20 = Mem0[v11:word64]
	x29 = Mem0[sp:word64]
	sp = sp + 8
	x30 = Mem0[sp:word64]
	sp = sp + 32
	return
	// succ:  run_unwind_protects_exit
run_unwind_protects_exit:


// clear_unwind_protect_list
// Return size: 0
void clear_unwind_protect_list()
clear_unwind_protect_list_entry:
	// succ:  l0000000000456B68
l0000000000456B68:
	sp = fp
	sp = sp + -64
	Mem0[sp:word64] = x29
	sp = sp + 8
	Mem0[sp:word64] = x30
	x29 = x31 + 0x0000000000000000
	v8 = sp + 32
	Mem0[v8:word64] = x21
	v8 = v8 + 8
	Mem0[v8:word64] = x22
	x22 = 0x00000000004E1000
	v11 = sp + 16
	Mem0[v11:word64] = x19
	v11 = v11 + 8
	Mem0[v11:word64] = x20
	x19 = x22 + 0x0000000000000260
	x1 = Mem0[x19:word64]
	Mem0[sp + 48:word64] = x23
	branch x1 == 0x0000000000000000 l0000000000456BD0
	// succ:  l0000000000456B8C l0000000000456BD0
l0000000000456B8C:
	branch w0 == 0x00000000 l0000000000456BE4
	// succ:  l0000000000456B90 l0000000000456BE4
l0000000000456B90:
	x21 = 0x00000000004E1000
	x20 = 0x00000000004AE000
	w23 = Mem0[x21 + 636:word32]
	x0 = x1
	Mem0[x21 + 636:word32] = 0x00000000
	x20 = x20 + 0x00000000000002B0
	// succ:  l0000000000456BA8
l0000000000456BA8:
	x3 = Mem0[x0:word64]
	x1 = x20
	w2 = 0x000000D8
	Mem0[x19:word64] = x3
	call sh_xfree (retsize: 0;)
	x0 = Mem0[x19:word64]
	branch x0 != 0x0000000000000000 l0000000000456BA8
	// succ:  l0000000000456BC4 l0000000000456BA8
l0000000000456BC4:
	x22 = x22 + 0x0000000000000260
	Mem0[x22:word64] = 0x0000000000000000
	Mem0[x21 + 636:word32] = w23
	// succ:  l0000000000456BD0
l0000000000456BD0:
	v19 = sp + 16
	x19 = Mem0[v19:word64]
	v19 = v19 + 8
	x20 = Mem0[v19:word64]
	v20 = sp + 32
	x21 = Mem0[v20:word64]
	v20 = v20 + 8
	x22 = Mem0[v20:word64]
	x23 = Mem0[sp + 48:word64]
	x29 = Mem0[sp:word64]
	sp = sp + 8
	x30 = Mem0[sp:word64]
	sp = sp + 64
	return
	// succ:  clear_unwind_protect_list_exit
l0000000000456BE4:
	x21 = 0x00000000004E1000
	w23 = Mem0[x21 + 636:word32]
	x22 = x22 + 0x0000000000000260
	Mem0[x21 + 636:word32] = w23
	Mem0[x22:word64] = 0x0000000000000000
	v21 = sp + 16
	x19 = Mem0[v21:word64]
	v21 = v21 + 8
	x20 = Mem0[v21:word64]
	v22 = sp + 32
	x21 = Mem0[v22:word64]
	v22 = v22 + 8
	x22 = Mem0[v22:word64]
	x23 = Mem0[sp + 48:word64]
	x29 = Mem0[sp:word64]
	sp = sp + 8
	x30 = Mem0[sp:word64]
	sp = sp + 64
	return
	// succ:  clear_unwind_protect_list_exit
clear_unwind_protect_list_exit:


// have_unwind_protects
// Return size: 0
void have_unwind_protects()
have_unwind_protects_entry:
	// succ:  l0000000000456C0C
l0000000000456C0C:
	sp = fp
	x0 = 0x00000000004E1000
	x0 = x0 + 0x0000000000000260
	x0 = Mem0[x0:word64]
	x31 = x0 - x31
	NZCV = cond(x31)
	w0 = (word32) Test(NE,Z)
	return
	// succ:  have_unwind_protects_exit
have_unwind_protects_exit:


// unwind_protect_mem
// Return size: 0
void unwind_protect_mem()
unwind_protect_mem_entry:
	// succ:  l0000000000456C24
l0000000000456C24:
	sp = fp
	sp = sp + -64
	Mem0[sp:word64] = x29
	sp = sp + 8
	Mem0[sp:word64] = x30
	x29 = x31 + 0x0000000000000000
	v8 = sp + 32
	Mem0[v8:word64] = x21
	v8 = v8 + 8
	Mem0[v8:word64] = x22
	w3 = w1 + 0x0000001C
	w21 = w1
	x1 = 0x00000000004AE000
	v15 = sp + 16
	Mem0[v15:word64] = x19
	v15 = v15 + 8
	Mem0[v15:word64] = x20
	v18 = sp + 48
	Mem0[v18:word64] = x23
	v18 = v18 + 8
	Mem0[v18:word64] = x24
	x20 = 0x00000000004E1000
	x23 = x0
	x1 = x1 + 0x00000000000002B0
unwind_protect_mem_exit:


// fn0000000000456CB8
// Return size: 0
void fn0000000000456CB8()
fn0000000000456CB8_entry:
	// succ:  l0000000000456CB8
l0000000000456CB8:
	sp = fp
	sp = sp + -48
	Mem0[sp:word64] = x29
	sp = sp + 8
	Mem0[sp:word64] = x30
	x29 = x31 + 0x0000000000000000
	v8 = sp + 16
	Mem0[v8:word64] = x19
	v8 = v8 + 8
	Mem0[v8:word64] = x20
	Mem0[sp + 32:word64] = x21
	x20 = x0
	v12 = Mem0[x0:byte]
	w0 = (word32) v12
	w31 = w0 - 0x0000002E
	NZCV = cond(w31)
	branch Test(EQ,Z) l0000000000456D4C
	// succ:  l0000000000456CD8 l0000000000456D4C
l0000000000456CD8:
	x0 = 0x00000000004D6000
	x0 = x0 + 0xFFFFFFFFFFFFFFB8
	x19 = Mem0[x0 + 8:word64]
	x0 = 0x00000000004E1000
	x0 = x0 + 0x0000000000000268
	w1 = Mem0[x0:word32]
	x0 = Mem0[x19:word64]
	NZCV = cond(w1 - w31)
	w21 = 0x00000021
l0000000000456D24:
	w0 = 0x00000000
	v20 = sp + 16
	x19 = Mem0[v20:word64]
	v20 = v20 + 8
	x20 = Mem0[v20:word64]
	x21 = Mem0[sp + 32:word64]
	x29 = Mem0[sp:word64]
	sp = sp + 8
	x30 = Mem0[sp:word64]
	sp = sp + 48
	return
	// succ:  fn0000000000456CB8_exit
l0000000000456D4C:
	v18 = Mem0[x20 + 1:byte]
	w0 = (word32) v18
	branch w0 == 0x00000000 l0000000000456D24
	// succ:  l0000000000456D54 l0000000000456D24
l0000000000456D54:
	w31 = w0 - 0x0000002E
	NZCV = cond(w31)
	branch Test(NE,Z) l0000000000456CD8
	// succ:  l0000000000456D5C l0000000000456CD8
l0000000000456D5C:
	v19 = Mem0[x20 + 2:byte]
	w0 = (word32) v19
	branch w0 != 0x00000000 l0000000000456CD8
	// succ:  l0000000000456D64 l0000000000456CD8
l0000000000456D64:
	goto l0000000000456D24
	// succ:  l0000000000456D24
fn0000000000456CB8_exit:


// fn0000000000456D68
// Return size: 0
void fn0000000000456D68()
fn0000000000456D68_entry:
	// succ:  l0000000000456D68
l0000000000456D68:
	sp = fp
	sp = sp + -80
	Mem0[sp:word64] = x29
	sp = sp + 8
	Mem0[sp:word64] = x30
	x29 = x31 + 0x0000000000000000
	v8 = sp + 48
	Mem0[v8:word64] = x23
	v8 = v8 + 8
	Mem0[v8:word64] = x24
	x23 = x0
	x0 = Mem0[x0:word64]
	v12 = sp + 16
	Mem0[v12:word64] = x19
	v12 = v12 + 8
	Mem0[v12:word64] = x20
	v15 = sp + 32
	Mem0[v15:word64] = x21
	v15 = v15 + 8
	Mem0[v15:word64] = x22
	Mem0[sp + 64:word64] = x25
	branch x0 == 0x0000000000000000 l0000000000456E94
	goto l0000000000456D8C
	// succ:  l0000000000456D8C l0000000000456E94
l0000000000456D68:
l0000000000456D8C:
	x2 = x23 + 0x0000000000000008
	w1 = 0x00000000
	// succ:  l0000000000456D94
l0000000000456D94:
	x3 = Mem0[x2:word64]
	x2 = x2 + 8
	w1 = w1 + 0x00000001
	branch x3 != 0x0000000000000000 l0000000000456D94
	// succ:  l0000000000456DA0 l0000000000456D94
l0000000000456DA0:
	w0 = w1 + 0x00000001
	// succ:  l0000000000456DA4
l0000000000456DA4:
	call strvec_create (retsize: 0;)
	x22 = x0
	x0 = Mem0[x23:word64]
	branch x0 == 0x0000000000000000 l0000000000456E64
	// succ:  l0000000000456DB4 l0000000000456E64
l0000000000456DB4:
	x25 = 0x00000000004AE000
	x19 = x23 + 0x0000000000000008
	x21 = x23
	w20 = 0x00000000
	x24 = x25 + 0x00000000000003B8
	goto l0000000000456DE4
	// succ:  l0000000000456DE4
l0000000000456DCC:
	x0 = Mem0[x21:word64]
	x21 = x19
	Mem0[x22 + (int64) ((int32) w20):word64] = x0
	x0 = Mem0[x19:word64]
	x19 = x19 + 8
	w20 = w20 + 0x00000001
	branch x0 == 0x0000000000000000 l0000000000456E08
	// succ:  l0000000000456DE4 l0000000000456E08
l0000000000456DE4:
	call fn0000000000456CB8 (retsize: 0;)
	branch w0 != 0x00000000 l0000000000456DCC
	// succ:  l0000000000456DEC l0000000000456DCC
l0000000000456DEC:
	x0 = Mem0[x21:word64]
	x1 = x24
	w2 = 0x00000192
	call sh_xfree (retsize: 0;)
	x21 = x19
	x0 = Mem0[x19:word64]
	x19 = x19 + 8
	branch x0 != 0x0000000000000000 l0000000000456DE4
	// succ:  l0000000000456E08 l0000000000456DE4
l0000000000456E08:
	Mem0[x22 + (int64) ((int32) w20):word64] = x0
	branch w20 == 0x00000000 l0000000000456E6C
	// succ:  l0000000000456E10 l0000000000456E6C
l0000000000456E10:
	x3 = Mem0[x22:word64]
	x2 = 0x0000000000000008
	x4 = x0
	branch x3 != 0x0000000000000000 l0000000000456E2C
	// succ:  l0000000000456E20 l0000000000456E2C
l0000000000456E20:
	goto l0000000000456E9C
	// succ:  l0000000000456E9C
l0000000000456E24:
	x4 = x2
	x2 = x5
	// succ:  l0000000000456E2C
l0000000000456E2C:
	Mem0[x23 + x4:word64] = x3
	x3 = Mem0[x22 + x2:word64]
	x5 = x2 + 0x0000000000000008
	branch x3 != 0x0000000000000000 l0000000000456E24
	// succ:  l0000000000456E3C l0000000000456E24
l0000000000456E3C:
	Mem0[x23 + x2:word64] = 0x0000000000000000
	x0 = x22
	x1 = x25 + 0x00000000000003B8
	v29 = sp + 16
	x19 = Mem0[v29:word64]
	v29 = v29 + 8
	x20 = Mem0[v29:word64]
	v30 = sp + 32
	x21 = Mem0[v30:word64]
	v30 = v30 + 8
	x22 = Mem0[v30:word64]
	v31 = sp + 48
	x23 = Mem0[v31:word64]
	v31 = v31 + 8
	x24 = Mem0[v31:word64]
	x25 = Mem0[sp + 64:word64]
	x29 = Mem0[sp:word64]
	sp = sp + 8
	x30 = Mem0[sp:word64]
	sp = sp + 80
	w2 = 0x000001A3
	// succ:  l0000000000456E60_thunk_sh_xfree
l0000000000456E60_thunk_sh_xfree:
	call sh_xfree (retsize: 0;)
	return
	// succ:  fn0000000000456D68_exit
l0000000000456E64:
	Mem0[x22:word64] = x0
	x25 = 0x00000000004AE000
	// succ:  l0000000000456E6C
l0000000000456E6C:
	Mem0[x23:word64] = 0x0000000000000000
	x0 = x22
	x1 = x25 + 0x00000000000003B8
	v25 = sp + 16
	x19 = Mem0[v25:word64]
	v25 = v25 + 8
	x20 = Mem0[v25:word64]
	v26 = sp + 32
	x21 = Mem0[v26:word64]
	v26 = v26 + 8
	x22 = Mem0[v26:word64]
	v27 = sp + 48
	x23 = Mem0[v27:word64]
	v27 = v27 + 8
	x24 = Mem0[v27:word64]
	x25 = Mem0[sp + 64:word64]
	x29 = Mem0[sp:word64]
	sp = sp + 8
	x30 = Mem0[sp:word64]
	sp = sp + 80
	w2 = 0x0000019A
	// succ:  l0000000000456E90_thunk_sh_xfree
l0000000000456E90_thunk_sh_xfree:
	call sh_xfree (retsize: 0;)
	return
	// succ:  fn0000000000456D68_exit
l0000000000456E94:
	w0 = 0x00000001
	goto l0000000000456DA4
	// succ:  l0000000000456DA4
l0000000000456E9C:
	x2 = x3
	goto l0000000000456E3C
	// succ:  l0000000000456E3C
fn0000000000456D68_exit:


// unquoted_glob_pattern_p
// Return size: 0
void unquoted_glob_pattern_p()
unquoted_glob_pattern_p_entry:
	// succ:  l0000000000456EA4
l0000000000456EA4:
	sp = fp
	sp = sp + -80
	Mem0[sp:word64] = x29
	sp = sp + 8
	Mem0[sp:word64] = x30
	x29 = x31 + 0x0000000000000000
	v8 = sp + 32
	Mem0[v8:word64] = x21
	v8 = v8 + 8
	Mem0[v8:word64] = x22
	v11 = sp + 16
	Mem0[v11:word64] = x19
	v11 = v11 + 8
	Mem0[v11:word64] = x20
	v14 = sp + 48
	Mem0[v14:word64] = x23
	v14 = v14 + 8
	Mem0[v14:word64] = x24
	x19 = x0
	Mem0[x29 + 64:word64] = 0x0000000000000000
	strlen(x0)
	sp = sp + 0xFFFFFFFFFFFFFFF8
	x1 = 0x00000000004C2000
	v18 = Mem0[x19:byte]
	w2 = (word32) v18
	x23 = x19 + x0
	w21 = 0x00000000
	x22 = x1 + 0xFFFFFFFFFFFFFCC0
	// succ:  l0000000000456ED8
l0000000000456ED8:
	x20 = x19 + 0x0000000000000001
	branch w2 == 0x00000000 l0000000000457004
	// succ:  l0000000000456EE0 l0000000000457004
l0000000000456EE0:
	w31 = w2 - 0x0000003F
	NZCV = cond(w31)
	branch Test(EQ,Z) l0000000000456F2C
	// succ:  l0000000000456EE8 l0000000000456F2C
l0000000000456EE8:
	branch Test(ULE,ZC) l0000000000456F18
	// succ:  l0000000000456EEC l0000000000456F18
l0000000000456EEC:
	w31 = w2 - 0x0000005B
	NZCV = cond(w31)
	branch Test(EQ,Z) l0000000000456F94
	// succ:  l0000000000456EF4 l0000000000456F94
l0000000000456EF4:
	branch Test(ULE,ZC) l0000000000456FEC
	// succ:  l0000000000456EF8 l0000000000456FEC
l0000000000456EF8:
	w31 = w2 - 0x0000005C
	NZCV = cond(w31)
	branch Test(EQ,Z) l0000000000456F4C
	// succ:  l0000000000456F00 l0000000000456F4C
l0000000000456F00:
	w31 = w2 - 0x0000005D
	NZCV = cond(w31)
	branch Test(NE,Z) l0000000000456F58
	// succ:  l0000000000456F08 l0000000000456F58
l0000000000456F08:
	branch w21 != 0x00000000 l0000000000456F2C
	// succ:  l0000000000456F0C l0000000000456F2C
l0000000000456F0C:
	v24 = Mem0[x19 + 1:byte]
	w2 = (word32) v24
	x19 = x20
	goto l0000000000456ED8
	// succ:  l0000000000456ED8
l0000000000456F18:
	w31 = w2 - 0x00000021
	NZCV = cond(w31)
	branch Test(EQ,Z) l0000000000456FAC
	// succ:  l0000000000456F20 l0000000000456FAC
l0000000000456F20:
	branch Test(ULE,ZC) l0000000000456F44
	// succ:  l0000000000456F24 l0000000000456F44
l0000000000456F24:
	w31 = w2 - 0x0000002A
	NZCV = cond(w31)
	branch Test(NE,Z) l0000000000456FA4
	// succ:  l0000000000456F2C l0000000000456FA4
l0000000000456F2C:
	w0 = 0x00000001
	// succ:  l0000000000456F30
l0000000000456F30:
	v26 = sp + 16
	x19 = Mem0[v26:word64]
	v26 = v26 + 8
	x20 = Mem0[v26:word64]
	v27 = sp + 32
	x21 = Mem0[v27:word64]
	v27 = v27 + 8
	x22 = Mem0[v27:word64]
	v28 = sp + 48
	x23 = Mem0[v28:word64]
	v28 = v28 + 8
	x24 = Mem0[v28:word64]
	x29 = Mem0[sp:word64]
	sp = sp + 8
	x30 = Mem0[sp:word64]
	sp = sp + 80
	return
	// succ:  unquoted_glob_pattern_p_exit
l0000000000456F44:
	w31 = w2 - 0x00000001
	NZCV = cond(w31)
	branch Test(NE,Z) l0000000000456F58
	// succ:  l0000000000456F4C l0000000000456F58
l0000000000456F4C:
	v31 = Mem0[x19 + 1:byte]
	w0 = (word32) v31
	x20 = x19 + 0x0000000000000002
	branch w0 == 0x00000000 l0000000000456F30
	// succ:  l0000000000456F58 l0000000000456F30
l0000000000456F58:
	__ctype_get_mb_cur_max()
	sp = sp + 0xFFFFFFFFFFFFFFF8
	x31 = x0 - 0x0000000000000001
	NZCV = cond(x31)
	x19 = x20 - 0x0000000000000001
	branch Test(ULE,ZC) l0000000000456F88
	// succ:  l0000000000456F68 l0000000000456F88
l0000000000456F68:
	v30 = Mem0[x20 + -1:byte]
	w1 = (word32) v30
	x20 = 0x0000000000000000
l0000000000456F88:
	v33 = Mem0[x19 + 1:byte]
	w2 = (word32) v33
	x19 = x19 + 0x0000000000000001
	goto l0000000000456ED8
	// succ:  l0000000000456ED8
l0000000000456F94:
	v34 = Mem0[x19 + 1:byte]
	w2 = (word32) v34
	w21 = w21 + 0x00000001
	x19 = x20
	goto l0000000000456ED8
	// succ:  l0000000000456ED8
l0000000000456FA4:
	w31 = w2 - 0x0000002B
	NZCV = cond(w31)
	branch Test(NE,Z) l0000000000456F58
	// succ:  l0000000000456FAC l0000000000456F58
l0000000000456FAC:
	v35 = Mem0[x19 + 1:byte]
	w2 = (word32) v35
	w31 = w2 - 0x00000028
	NZCV = cond(w31)
	branch Test(EQ,Z) l0000000000456F2C
	// succ:  l0000000000456FB8 l0000000000456F2C
l0000000000456FB8:
	x19 = x20
	goto l0000000000456ED8
	// succ:  l0000000000456ED8
l0000000000456FEC:
	w31 = w2 - 0x00000040
	NZCV = cond(w31)
	branch Test(NE,Z) l0000000000456F58
	// succ:  l0000000000456FF4 l0000000000456F58
l0000000000456FF4:
	v32 = Mem0[x19 + 1:byte]
	w2 = (word32) v32
	w31 = w2 - 0x00000028
	NZCV = cond(w31)
	branch Test(NE,Z) l0000000000456FB8
	// succ:  l0000000000457000 l0000000000456FB8
l0000000000457000:
	goto l0000000000456F2C
	// succ:  l0000000000456F2C
l0000000000457004:
	w0 = w2
	goto l0000000000456F30
	// succ:  l0000000000456F30
unquoted_glob_pattern_p_exit:


// glob_char_p
// Return size: 0
void glob_char_p()
glob_char_p_entry:
	// succ:  l0000000000457018
l0000000000457018:
	sp = fp
	v5 = Mem0[x0:byte]
	w1 = (word32) v5
	w1 = w1 - 0x00000021
	w31 = w1 - 0x0000003C
	NZCV = cond(w31)
	branch Test(ULE,ZC) l0000000000457030
	// succ:  l0000000000457028 l0000000000457030
l0000000000457028:
	w0 = 0x00000000
	return
	// succ:  glob_char_p_exit
l0000000000457030:
	x2 = 0x00000000004AE000
	x2 = x2 + 0x000000000000031C
	v12 = Mem0[x2 + (uint64) ((uint32) w1):byte]
	w3 = (word32) v12
	x4 = 0x0000000000457048
	x3 = x4 + (int64) ((int8) w3)
glob_char_p_exit:


// quote_string_for_globbing
// Return size: 0
void quote_string_for_globbing()
quote_string_for_globbing_entry:
	// succ:  l0000000000457060
l0000000000457060:
	sp = fp
	sp = sp + -32
	Mem0[sp:word64] = x29
	sp = sp + 8
	Mem0[sp:word64] = x30
	x29 = x31 + 0x0000000000000000
	v8 = sp + 16
	Mem0[v8:word64] = x19
	v8 = v8 + 8
	Mem0[v8:word64] = x20
	w20 = w1
	x19 = x0
	strlen(x0)
	sp = sp + 0xFFFFFFFFFFFFFFF8
	x1 = 0x00000000004AE000
	x1 = x1 + 0x00000000000003B8
	x0 = x0 + 0x0000000000000001
	w2 = 0x000000B9
	call sh_xmalloc (retsize: 0;)
	branch (w20 & 0x00000001) == 0x00000000 l000000000045717C
	// succ:  l0000000000457090 l000000000045717C
l0000000000457090:
	v14 = Mem0[x19:byte]
	w1 = (word32) v14
	// succ:  l0000000000457094
l0000000000457094:
	w3 = w1
	x5 = 0x0000000000000000
	branch w1 == 0x00000000 l0000000000457148
	// succ:  l00000000004570A0 l0000000000457148
l00000000004570A0:
	x4 = 0x0000000000000000
	x8 = 0x00000000004AE000
	w5 = w4
	w2 = w4
	w6 = w20 & 0x00000002
	w7 = 0x0000005C
	w1 = w20 & 0x00000004
	x8 = x8 + 0x000000000000035C
	goto l00000000004570EC
	// succ:  l00000000004570EC
l00000000004570C4:
	w31 = w3 - 0x0000005C
	NZCV = cond(w31)
	branch Test(EQ,Z) l0000000000457158
	// succ:  l00000000004570CC l0000000000457158
l00000000004570CC:
	v34 = Mem0[x19 + (int64) ((int32) w2):byte]
	w4 = (word32) v34
	w3 = w5
	// succ:  l00000000004570D4
l00000000004570D4:
	w5 = w3 + 0x00000001
	Mem0[x0 + (int64) ((int32) w3):byte] = (byte) w4
	// succ:  l00000000004570DC
l00000000004570DC:
	w2 = w2 + 0x00000001
l00000000004570EC:
	w31 = w3 - 0x00000001
	NZCV = cond(w31)
	branch Test(NE,Z) l00000000004570C4
	// succ:  l00000000004570F4 l00000000004570C4
l00000000004570F4:
	x4 = x19 + x4
	v28 = Mem0[x4 + 1:byte]
	w3 = (word32) v28
	branch w6 == 0x00000000 l0000000000457108
	// succ:  l0000000000457100 l0000000000457108
l0000000000457100:
	w31 = w3 - 0x0000002F
	NZCV = cond(w31)
	branch Test(EQ,Z) l00000000004570DC
	// succ:  l0000000000457108 l00000000004570DC
l0000000000457108:
	w31 = w3 - 0x00000001
	NZCV = cond(w31)
	branch Test(EQ,Z) l0000000000457130
	// succ:  l0000000000457110 l0000000000457130
l0000000000457110:
	branch w1 == 0x00000000 l0000000000457130
	// succ:  l0000000000457114 l0000000000457130
l0000000000457114:
	w3 = w3 - 0x00000024
	w31 = w3 - 0x00000058
	NZCV = cond(w31)
	branch Test(UGT,ZC) l00000000004570DC
	// succ:  l0000000000457120 l00000000004570DC
l0000000000457120:
	v30 = Mem0[x8 + (uint64) ((uint32) w3):byte]
	w4 = (word32) v30
	x9 = 0x0000000000457130
	x4 = x9 + (int64) ((int8) w4)
	call x4 (retsize: 0;)
	return
	// succ:  quote_string_for_globbing_exit
l0000000000457130:
	Mem0[x0 + (int64) ((int32) w5):byte] = (byte) w7
	w2 = w2 + 0x00000001
	v33 = Mem0[x19 + (int64) ((int32) w2):byte]
	w4 = (word32) v33
	w3 = w5 + 0x00000001
	branch w4 != 0x00000000 l00000000004570D4
	// succ:  l0000000000457144 l00000000004570D4
l0000000000457144:
l0000000000457148:
	Mem0[x0 + x5:byte] = 0x00
	// succ:  l000000000045714C
l000000000045714C:
	v32 = sp + 16
	x19 = Mem0[v32:word64]
	v32 = v32 + 8
	x20 = Mem0[v32:word64]
	x29 = Mem0[sp:word64]
	sp = sp + 8
	x30 = Mem0[sp:word64]
	sp = sp + 32
	return
	// succ:  quote_string_for_globbing_exit
l0000000000457158:
	Mem0[x0 + (int64) ((int32) w5):byte] = (byte) w3
	w2 = w2 + 0x00000001
	v35 = Mem0[x19 + (int64) ((int32) w2):byte]
	w4 = (word32) v35
	w3 = w5 + 0x00000001
	branch w4 != 0x00000000 l00000000004570D4
	// succ:  l000000000045716C l00000000004570D4
l000000000045716C:
l000000000045717C:
	v23 = Mem0[x19:byte]
	w3 = (word32) v23
	w31 = w3 - 0x0000007F
	NZCV = cond(w31)
	w1 = w3
	branch Test(NE,Z) l0000000000457094
	// succ:  l000000000045718C l0000000000457094
l000000000045718C:
	v27 = Mem0[x19 + 1:byte]
	w1 = (word32) v27
	branch w1 != 0x00000000 l00000000004570A0
	// succ:  l0000000000457194 l00000000004570A0
l0000000000457194:
	Mem0[x0:byte] = (byte) w1
	goto l000000000045714C
	// succ:  l000000000045714C
quote_string_for_globbing_exit:


// quote_globbing_chars
// Return size: 0
void quote_globbing_chars()
quote_globbing_chars_entry:
	// succ:  l000000000045719C
l000000000045719C:
	sp = fp
	sp = sp + -96
	Mem0[sp:word64] = x29
	sp = sp + 8
	Mem0[sp:word64] = x30
	x29 = x31 + 0x0000000000000000
	v8 = sp + 16
	Mem0[v8:word64] = x19
	v8 = v8 + 8
	Mem0[v8:word64] = x20
	v11 = sp + 32
	Mem0[v11:word64] = x21
	v11 = v11 + 8
	Mem0[v11:word64] = x22
	v14 = sp + 48
	Mem0[v14:word64] = x23
	v14 = v14 + 8
	Mem0[v14:word64] = x24
	x20 = x0
	Mem0[sp + 64:word64] = x25
	Mem0[x29 + 80:word64] = 0x0000000000000000
	strlen(x0)
	sp = sp + 0xFFFFFFFFFFFFFFF8
	x24 = x0
	x1 = 0x00000000004AE000
quote_globbing_chars_exit:


// shell_glob_filename
// Return size: 0
void shell_glob_filename()
shell_glob_filename_entry:
	// succ:  l00000000004572E0
l00000000004572E0:
	sp = fp
	sp = sp + -48
	Mem0[sp:word64] = x29
	sp = sp + 8
	Mem0[sp:word64] = x30
	x29 = x31 + 0x0000000000000000
	x1 = 0x00000000004E3000
	w2 = Mem0[x1 + 2976:word32]
	w1 = 0x00000002
	NZCV = cond(w2 - w31)
	w3 = (word32) Test(EQ,Z)
	x2 = 0x00000000004D8000
	v16 = sp + 16
	Mem0[v16:word64] = x19
	v16 = v16 + 8
	Mem0[v16:word64] = x20
	Mem0[sp + 32:word64] = x21
	Mem0[x2 + 2152:word32] = w3
	call quote_string_for_globbing (retsize: 0;)
	x1 = 0x00000000004E1000
	x1 = x1 + 0x0000000000000268
	w1 = Mem0[x1 + 4:word32]
	x21 = x0
	NZCV = cond(w1 - w31)
	w1 = 0x00000400
shell_glob_filename_exit:


// should_ignore_glob_matches
// Return size: 0
void should_ignore_glob_matches()
should_ignore_glob_matches_entry:
	// succ:  l00000000004573C0
l00000000004573C0:
	sp = fp
	x0 = 0x00000000004D6000
	x0 = x0 + 0xFFFFFFFFFFFFFFB8
	w0 = Mem0[x0 + 16:word32]
	return
	// succ:  should_ignore_glob_matches_exit
should_ignore_glob_matches_exit:


// ignore_glob_matches
// Return size: 0
void ignore_glob_matches()
ignore_glob_matches_entry:
	// succ:  l00000000004573D0
l00000000004573D0:
	sp = fp
	x1 = 0x00000000004D6000
	x1 = x1 + 0xFFFFFFFFFFFFFFB8
	w1 = Mem0[x1 + 16:word32]
	branch w1 != 0x00000000 l00000000004573E4
	// succ:  l00000000004573E0 l00000000004573E4
l00000000004573E0:
	return
	// succ:  ignore_glob_matches_exit
l00000000004573E4:
	// succ:  l00000000004573E4_thunk_fn0000000000456D68
l00000000004573E4_thunk_fn0000000000456D68:
	call fn0000000000456D68 (retsize: 0;)
	return
	// succ:  ignore_glob_matches_exit
ignore_glob_matches_exit:


// setup_ignore_patterns
// Return size: 0
void setup_ignore_patterns()
setup_ignore_patterns_entry:
	// succ:  l00000000004573E8
l00000000004573E8:
	sp = fp
	sp = sp + -96
	Mem0[sp:word64] = x29
	sp = sp + 8
	Mem0[sp:word64] = x30
	x29 = x31 + 0x0000000000000000
	v8 = sp + 16
	Mem0[v8:word64] = x19
	v8 = v8 + 8
	Mem0[v8:word64] = x20
	x20 = x0
	x0 = Mem0[x0:word64]
	v12 = sp + 32
	Mem0[v12:word64] = x21
	v12 = v12 + 8
	Mem0[v12:word64] = x22
	v15 = sp + 48
	Mem0[v15:word64] = x23
	v15 = v15 + 8
	Mem0[v15:word64] = x24
	v18 = sp + 64
	Mem0[v18:word64] = x25
	v18 = v18 + 8
	Mem0[v18:word64] = x26
	v21 = sp + 80
	Mem0[v21:word64] = x27
	v21 = v21 + 8
	Mem0[v21:word64] = x28
	call get_string_value (retsize: 0;)
	x21 = x0
	x22 = Mem0[x20 + 24:word64]
	branch x0 == 0x0000000000000000 l0000000000457600
	goto l000000000045741C
	// succ:  l000000000045741C l0000000000457600
l00000000004573E8:
l000000000045741C:
	branch x22 == 0x0000000000000000 l0000000000457430
	// succ:  l0000000000457420 l0000000000457430
l0000000000457420:
	v23 = Mem0[x0:byte]
	w2 = (word32) v23
	v25 = Mem0[x22:byte]
	w1 = (word32) v25
	NZCV = cond(w2 - w1)
	branch Test(EQ,Z) l00000000004575D8
	// succ:  l0000000000457430 l00000000004575D8
l0000000000457430:
	x19 = Mem0[x20 + 8:word64]
	Mem0[x20 + 16:word32] = 0x00000000
	branch x19 == 0x0000000000000000 l0000000000457478
	// succ:  l000000000045743C l0000000000457478
l000000000045743C:
	x0 = Mem0[x19:word64]
	branch x0 == 0x0000000000000000 l0000000000457608
	// succ:  l0000000000457444 l0000000000457608
l0000000000457444:
	x23 = 0x00000000004AE000
	x22 = x23 + 0x00000000000003B8
	// succ:  l000000000045744C
l000000000045744C:
	x1 = x22
	w2 = 0x000001DD
	call sh_xfree (retsize: 0;)
	x19 = x19 + 16
	x0 = Mem0[x19:word64]
	branch x0 != 0x0000000000000000 l000000000045744C
	// succ:  l0000000000457460 l000000000045744C
l0000000000457460:
	x0 = Mem0[x20 + 8:word64]
	// succ:  l0000000000457464
l0000000000457464:
	x1 = x23 + 0x00000000000003B8
	w2 = 0x000001DE
	call sh_xfree (retsize: 0;)
	x22 = Mem0[x20 + 24:word64]
	Mem0[x20 + 8:word64] = 0x0000000000000000
	// succ:  l0000000000457478
l0000000000457478:
	branch x22 == 0x0000000000000000 l0000000000457494
	// succ:  l000000000045747C l0000000000457494
l000000000045747C:
	x1 = 0x00000000004AE000
	x0 = x22
	x1 = x1 + 0x00000000000003B8
	w2 = 0x000001E4
	call sh_xfree (retsize: 0;)
	Mem0[x20 + 24:word64] = 0x0000000000000000
	// succ:  l0000000000457494
l0000000000457494:
	branch x21 == 0x0000000000000000 l00000000004574A0
	// succ:  l0000000000457498 l00000000004574A0
l0000000000457498:
	v40 = Mem0[x21:byte]
	w0 = (word32) v40
	branch w0 != 0x00000000 l00000000004574BC
	// succ:  l00000000004574A0 l00000000004574BC
l00000000004574A0:
	v29 = sp + 16
	x19 = Mem0[v29:word64]
	v29 = v29 + 8
	x20 = Mem0[v29:word64]
	v30 = sp + 32
	x21 = Mem0[v30:word64]
	v30 = v30 + 8
	x22 = Mem0[v30:word64]
	v31 = sp + 48
	x23 = Mem0[v31:word64]
	v31 = v31 + 8
	x24 = Mem0[v31:word64]
	v32 = sp + 64
	x25 = Mem0[v32:word64]
	v32 = v32 + 8
	x26 = Mem0[v32:word64]
	v33 = sp + 80
	x27 = Mem0[v33:word64]
	v33 = v33 + 8
	x28 = Mem0[v33:word64]
	x29 = Mem0[sp:word64]
	sp = sp + 8
	x30 = Mem0[sp:word64]
	sp = sp + 96
	return
	// succ:  setup_ignore_patterns_exit
l00000000004574BC:
	x23 = 0x00000000004AE000
	x0 = x21
	strlen(x0)
	sp = sp + 0xFFFFFFFFFFFFFFF8
	x28 = x23 + 0x00000000000003B8
	w2 = 0x000001EB
	x1 = x28
	x0 = x0 + 0x0000000000000001
	call sh_xmalloc (retsize: 0;)
	x1 = x21
	x22 = 0x0000000000000000
	strcpy(x0, x1)
	sp = sp + 0xFFFFFFFFFFFFFFF8
	x27 = 0x00000000004AB000
	Mem0[x20 + 24:word64] = x0
	w23 = w22
	w26 = w22
	w25 = w22
	x27 = x27 + 0xFFFFFFFFFFFFFF58
	// succ:  l0000000000457538
l0000000000457538:
	v46 = Mem0[x21 + (int64) ((int32) w23):byte]
	w4 = (word32) v46
	w3 = 0x00000011
	w1 = w23
	x0 = x21
	x2 = x27
	branch w4 == 0x00000000 l00000000004575AC
	// succ:  l0000000000457550 l00000000004575AC
l0000000000457550:
	call skip_to_delim (retsize: 0;)
	w19 = w0
	w2 = w19
	x0 = x21
	w1 = w23
	call substring (retsize: 0;)
	x24 = x0
	v50 = Mem0[x21 + (int64) ((int32) w19):byte]
	w0 = (word32) v50
	w31 = w0 - 0x0000003A
	NZCV = cond(w31)
l00000000004575AC:
	x0 = Mem0[x20 + 8:word64]
l00000000004575D8:
	x1 = x22
	strcmp(x0, x1)
	sp = sp + 0xFFFFFFFFFFFFFFF8
	branch w0 != 0x00000000 l0000000000457430
	// succ:  l00000000004575E4 l0000000000457430
l00000000004575E4:
	v35 = sp + 16
	x19 = Mem0[v35:word64]
	v35 = v35 + 8
	x20 = Mem0[v35:word64]
	v36 = sp + 32
	x21 = Mem0[v36:word64]
	v36 = v36 + 8
	x22 = Mem0[v36:word64]
	v37 = sp + 48
	x23 = Mem0[v37:word64]
	v37 = v37 + 8
	x24 = Mem0[v37:word64]
	v38 = sp + 64
	x25 = Mem0[v38:word64]
	v38 = v38 + 8
	x26 = Mem0[v38:word64]
	v39 = sp + 80
	x27 = Mem0[v39:word64]
	v39 = v39 + 8
	x28 = Mem0[v39:word64]
	x29 = Mem0[sp:word64]
	sp = sp + 8
	x30 = Mem0[sp:word64]
	sp = sp + 96
	return
	// succ:  setup_ignore_patterns_exit
l0000000000457600:
	branch x22 != 0x0000000000000000 l0000000000457430
	// succ:  l0000000000457604 l0000000000457430
l0000000000457604:
	goto l00000000004574A0
	// succ:  l00000000004574A0
l0000000000457608:
	x0 = x19
	x23 = 0x00000000004AE000
	goto l0000000000457464
	// succ:  l0000000000457464
setup_ignore_patterns_exit:


// setup_glob_ignore
// Return size: 0
void setup_glob_ignore()
setup_glob_ignore_entry:
	// succ:  l0000000000457614
l0000000000457614:
	sp = fp
	sp = sp + -32
	Mem0[sp:word64] = x29
	sp = sp + 8
	Mem0[sp:word64] = x30
	x29 = x31 + 0x0000000000000000
	v8 = sp + 16
	Mem0[v8:word64] = x19
	v8 = v8 + 8
	Mem0[v8:word64] = x20
	x19 = 0x00000000004D6000
	call get_string_value (retsize: 0;)
	x19 = x19 + 0xFFFFFFFFFFFFFFB8
	x20 = x0
	x0 = x19
	call setup_ignore_patterns (retsize: 0;)
	w1 = Mem0[x19 + 16:word32]
	branch w1 != 0x00000000 l0000000000457650
	// succ:  l0000000000457640 l0000000000457650
l0000000000457640:
	branch x20 == 0x0000000000000000 l0000000000457668
	// succ:  l0000000000457644 l0000000000457668
l0000000000457644:
	v11 = sp + 16
	x19 = Mem0[v11:word64]
	v11 = v11 + 8
	x20 = Mem0[v11:word64]
	x29 = Mem0[sp:word64]
	sp = sp + 8
	x30 = Mem0[sp:word64]
	sp = sp + 32
	return
	// succ:  setup_glob_ignore_exit
l0000000000457650:
	w1 = 0x00000001
	x0 = 0x00000000004E3000
	v12 = sp + 16
	x19 = Mem0[v12:word64]
	v12 = v12 + 8
	x20 = Mem0[v12:word64]
	Mem0[x0 + 2976:word32] = w1
	x29 = Mem0[sp:word64]
	sp = sp + 8
	x30 = Mem0[sp:word64]
	sp = sp + 32
	return
	// succ:  setup_glob_ignore_exit
l0000000000457668:
	x0 = 0x00000000004E3000
	Mem0[x0 + 2976:word32] = w20
	v14 = sp + 16
	x19 = Mem0[v14:word64]
	v14 = v14 + 8
	x20 = Mem0[v14:word64]
	x29 = Mem0[sp:word64]
	sp = sp + 8
	x30 = Mem0[sp:word64]
	sp = sp + 32
	return
	// succ:  setup_glob_ignore_exit
setup_glob_ignore_exit:


// sigwinch_sighandler
// Return size: 0
void sigwinch_sighandler()
sigwinch_sighandler_entry:
	// succ:  l000000000045767C
l000000000045767C:
	sp = fp
	x0 = 0x00000000004E1000
	w1 = 0x00000001
	x0 = x0 + 0x0000000000000270
	Mem0[x0:word32] = w1
	return
	// succ:  sigwinch_sighandler_exit
sigwinch_sighandler_exit:


// initialize_terminating_signals
// Return size: 0
void initialize_terminating_signals()
initialize_terminating_signals_entry:
	// succ:  l0000000000457690
l0000000000457690:
	sp = fp
	sp = sp + -368
	Mem0[sp:word64] = x29
	sp = sp + 8
	Mem0[sp:word64] = x30
	x29 = x31 + 0x0000000000000000
	v8 = sp + 32
	Mem0[v8:word64] = x21
	v8 = v8 + 8
	Mem0[v8:word64] = x22
	x22 = 0x00000000004E1000
	x0 = x22 + 0x0000000000000270
	w1 = Mem0[x0 + 4:word32]
	v13 = sp + 16
	Mem0[v13:word64] = x19
	v13 = v13 + 8
	Mem0[v13:word64] = x20
	Mem0[sp + 48:word64] = x23
	branch w1 == 0x00000000 l00000000004576C8
	goto l00000000004576B4
	// succ:  l00000000004576B4 l00000000004576C8
l0000000000457690:
l00000000004576B4:
	v15 = sp + 16
	x19 = Mem0[v15:word64]
	v15 = v15 + 8
	x20 = Mem0[v15:word64]
	v16 = sp + 32
	x21 = Mem0[v16:word64]
	v16 = v16 + 8
	x22 = Mem0[v16:word64]
	x23 = Mem0[sp + 48:word64]
	x29 = Mem0[sp:word64]
	sp = sp + 8
	x30 = Mem0[sp:word64]
	sp = sp + 368
	return
	// succ:  initialize_terminating_signals_exit
l00000000004576C8:
	x2 = 0x0000000000457000
	x2 = x2 + 0xFFFFFFFFFFFFFC20
	x0 = x29 + 0x00000000000000E0
	Mem0[x29 + 216:word64] = x2
	Mem0[x29 + 352:word32] = w1
	x19 = 0x00000000004D6000
	sigemptyset(x0)
	sp = sp + 0xFFFFFFFFFFFFFFF8
	x19 = x19 + 0xFFFFFFFFFFFFFFE0
	x0 = x29 + 0x0000000000000048
	sigemptyset(x0)
	sp = sp + 0xFFFFFFFFFFFFFFF8
	x21 = x19 + 0x0000000000000198
	x20 = x19
	// succ:  l00000000004576F8
l00000000004576F8:
	w1 = Mem0[x20:word32]
	x20 = x20 + 24
	x0 = x29 + 0x00000000000000E0
	sigaddset(x0, x1)
	sp = sp + 0xFFFFFFFFFFFFFFF8
	x31 = x20 - x21
	NZCV = cond(x31)
	branch Test(NE,Z) l00000000004576F8
	// succ:  l000000000045770C l00000000004576F8
l000000000045770C:
	x20 = 0x00000000004DE000
	x20 = x20 + 0x00000000000006B0
	goto l0000000000457724
	// succ:  l0000000000457724
l0000000000457718:
	x19 = x19 + 0x0000000000000018
	x31 = x19 - x21
	NZCV = cond(x31)
	branch Test(EQ,Z) l0000000000457794
	// succ:  l0000000000457724 l0000000000457794
l0000000000457724:
	w0 = Mem0[x19:word32]
	call signal_is_trapped (retsize: 0;)
	branch w0 != 0x00000000 l0000000000457718
	// succ:  l0000000000457730 l0000000000457718
l0000000000457730:
	w0 = Mem0[x19:word32]
	x1 = x29 + 0x00000000000000D8
	x2 = x29 + 0x0000000000000040
	sigaction(x0, x1, x2)
	sp = sp + 0xFFFFFFFFFFFFFFF8
	x0 = Mem0[x29 + 64:word64]
	w1 = Mem0[x29 + 200:word32]
	Mem0[x19 + 8:word64] = x0
	x31 = x0 - 0x0000000000000001
	NZCV = cond(x31)
	w0 = Mem0[x20:word32]
	Mem0[x19 + 16:word32] = w1
	branch w0 != 0x00000000 l0000000000457760
	// succ:  l000000000045775C l0000000000457760
l000000000045775C:
	branch Test(EQ,Z) l00000000004577B4
	// succ:  l0000000000457760 l00000000004577B4
l0000000000457760:
	w0 = Mem0[x19:word32]
	w31 = w0 - 0x0000001B
	NZCV = cond(w31)
	branch Test(NE,Z) l0000000000457718
	// succ:  l000000000045776C l0000000000457718
l000000000045776C:
	x3 = Mem0[x19 + 8:word64]
	x1 = x29 + 0x0000000000000040
	x31 = x3 - 0x0000000000000001
	NZCV = cond(x31)
	x2 = 0x0000000000000000
	branch x3 == 0x0000000000000000 l0000000000457718
	// succ:  l0000000000457780 l0000000000457718
l0000000000457780:
	branch Test(EQ,Z) l0000000000457718
	// succ:  l0000000000457784 l0000000000457718
l0000000000457784:
	sigaction(x0, x1, x2)
	sp = sp + 0xFFFFFFFFFFFFFFF8
	x19 = x19 + 0x0000000000000018
	x31 = x19 - x21
	NZCV = cond(x31)
	branch Test(NE,Z) l0000000000457724
	// succ:  l0000000000457794 l0000000000457724
l0000000000457794:
	x22 = x22 + 0x0000000000000270
	w0 = 0x00000001
	Mem0[x22 + 4:word32] = w0
	v24 = sp + 16
	x19 = Mem0[v24:word64]
	v24 = v24 + 8
	x20 = Mem0[v24:word64]
	v25 = sp + 32
	x21 = Mem0[v25:word64]
	v25 = v25 + 8
	x22 = Mem0[v25:word64]
	x23 = Mem0[sp + 48:word64]
	x29 = Mem0[sp:word64]
	sp = sp + 8
	x30 = Mem0[sp:word64]
	sp = sp + 368
	return
	// succ:  initialize_terminating_signals_exit
l00000000004577B4:
	w23 = Mem0[x19:word32]
	x1 = x29 + 0x0000000000000040
	x2 = x29 + 0x00000000000000D8
	w0 = w23
	sigaction(x0, x1, x2)
	sp = sp + 0xFFFFFFFFFFFFFFF8
	w0 = w23
	call set_signal_ignored (retsize: 0;)
	goto l0000000000457760
	// succ:  l0000000000457760
initialize_terminating_signals_exit:


// reset_terminating_signals
// Return size: 0
void reset_terminating_signals()
reset_terminating_signals_entry:
	// succ:  l00000000004577D4
l00000000004577D4:
	sp = fp
	sp = sp + -192
	Mem0[sp:word64] = x29
	sp = sp + 8
	Mem0[sp:word64] = x30
	x29 = x31 + 0x0000000000000000
	x0 = 0x00000000004E1000
	x0 = x0 + 0x0000000000000270
	w0 = Mem0[x0 + 4:word32]
	v10 = sp + 16
	Mem0[v10:word64] = x19
	v10 = v10 + 8
	Mem0[v10:word64] = x20
	branch w0 != 0x00000000 l00000000004577FC
	// succ:  l00000000004577F0 l00000000004577FC
l00000000004577F0:
	v11 = sp + 16
	x19 = Mem0[v11:word64]
	v11 = v11 + 8
	x20 = Mem0[v11:word64]
	x29 = Mem0[sp:word64]
	sp = sp + 8
	x30 = Mem0[sp:word64]
	sp = sp + 192
	return
	// succ:  reset_terminating_signals_exit
l00000000004577FC:
	x19 = 0x00000000004D6000
	x0 = x29 + 0x0000000000000028
	x19 = x19 + 0xFFFFFFFFFFFFFFE0
	Mem0[x29 + 168:word32] = 0x00000000
	x20 = x19 + 0x0000000000000198
	sigemptyset(x0)
	sp = sp + 0xFFFFFFFFFFFFFFF8
	goto l0000000000457824
	// succ:  l0000000000457824
l0000000000457818:
	x19 = x19 + 0x0000000000000018
	x31 = x19 - x20
	NZCV = cond(x31)
	branch Test(EQ,Z) l00000000004577F0
	// succ:  l0000000000457824 l00000000004577F0
l0000000000457824:
	w0 = Mem0[x19:word32]
	call signal_is_trapped (retsize: 0;)
	branch w0 != 0x00000000 l0000000000457818
	// succ:  l0000000000457830 l0000000000457818
l0000000000457830:
	w0 = Mem0[x19:word32]
	call signal_is_special (retsize: 0;)
	branch w0 != 0x00000000 l0000000000457818
	// succ:  l000000000045783C l0000000000457818
l000000000045783C:
	x4 = Mem0[x19 + 8:word64]
	w3 = Mem0[x19 + 16:word32]
	w0 = Mem0[x19:word32]
	x1 = x29 + 0x0000000000000020
	x2 = 0x0000000000000000
	Mem0[x29 + 32:word64] = x4
	Mem0[x29 + 168:word32] = w3
	sigaction(x0, x1, x2)
	sp = sp + 0xFFFFFFFFFFFFFFF8
	goto l0000000000457818
	// succ:  l0000000000457818
reset_terminating_signals_exit:


// top_level_cleanup
// Return size: 0
void top_level_cleanup()
top_level_cleanup_entry:
	// succ:  l0000000000457860
l0000000000457860:
	sp = fp
	sp = sp + -32
	Mem0[sp:word64] = x29
	sp = sp + 8
	Mem0[sp:word64] = x30
	x29 = x31 + 0x0000000000000000
	Mem0[sp + 16:word64] = x19
	x19 = 0x00000000004E1000
	w0 = Mem0[x19 + 1720:word32]
	x19 = x19 + 0x00000000000006B8
	branch w0 == 0x00000000 l0000000000457888
	// succ:  l000000000045787C l0000000000457888
l000000000045787C:
	call parse_and_execute_cleanup (retsize: 0;)
	w0 = Mem0[x19:word32]
	branch w0 != 0x00000000 l000000000045787C
	// succ:  l0000000000457888 l000000000045787C
l0000000000457888:
	call unlink_fifo_list (retsize: 0;)
	call run_unwind_protects (retsize: 0;)
	x0 = 0x00000000004DF000
	Mem0[x0 + 3080:word32] = 0x00000000
	x0 = 0x00000000004E1000
	Mem0[x0 + 1660:word32] = 0x00000000
	x0 = 0x00000000004E1000
	Mem0[x0 + 1664:word32] = 0x00000000
	x0 = 0x00000000004E1000
	Mem0[x0 + 1656:word32] = 0x00000000
	x0 = 0x00000000004E3000
	Mem0[x0 + 1188:word32] = 0x00000000
	x0 = 0x00000000004DF000
	Mem0[x0 + 3048:word32] = 0x00000000
	x0 = 0x00000000004DF000
	x19 = Mem0[sp + 16:word64]
	Mem0[x0 + 3084:word32] = 0x00000000
	x29 = Mem0[sp:word64]
	sp = sp + 8
	x30 = Mem0[sp:word64]
	sp = sp + 32
	return
	// succ:  top_level_cleanup_exit
top_level_cleanup_exit:


// jump_to_top_level
// Return size: 0
void jump_to_top_level()
jump_to_top_level_entry:
	// succ:  l00000000004578D4
l00000000004578D4:
	sp = fp
	sp = sp + -16
	Mem0[sp:word64] = x29
	sp = sp + 8
	Mem0[sp:word64] = x30
	x29 = x31 + 0x0000000000000000
	w1 = w0
	x0 = 0x00000000004E3000
	x0 = x0 + 0xFFFFFFFFFFFFFC28
	call __longjmp_chk (retsize: 0;)
jump_to_top_level_exit:


// throw_to_top_level
// Return size: 0
void throw_to_top_level()
throw_to_top_level_entry:
	// succ:  l00000000004578EC
l00000000004578EC:
	sp = fp
	sp = sp + -32
	Mem0[sp:word64] = x29
	sp = sp + 8
	Mem0[sp:word64] = x30
	x29 = x31 + 0x0000000000000000
	x0 = 0x00000000004E1000
	x1 = x0 + 0x0000000000000270
	w2 = Mem0[x1 + 8:word32]
	v11 = sp + 16
	Mem0[v11:word64] = x19
	v11 = v11 + 8
	Mem0[v11:word64] = x20
	w20 = 0x00000000
	branch w2 == 0x00000000 l000000000045791C
	// succ:  l000000000045790C l000000000045791C
l000000000045790C:
	w2 = Mem0[x1 + 8:word32]
	w20 = 0x00000001
	w2 = w2 - 0x00000001
	Mem0[x1 + 8:word32] = w2
	// succ:  l000000000045791C
l000000000045791C:
	x0 = x0 + 0x0000000000000270
	w0 = Mem0[x0 + 8:word32]
	branch w0 != 0x00000000 l0000000000457A58
	// succ:  l0000000000457928 l0000000000457A58
l0000000000457928:
	x1 = 0x00000000004E3000
	w0 = Mem0[x1 + 1200:word32]
	x2 = 0x00000000004E3000
	w31 = w0 - 0x00000081
	NZCV = cond(w31)
	w3 = w0 - 0x00000080
l0000000000457A58:
	v18 = sp + 16
	x19 = Mem0[v18:word64]
	v18 = v18 + 8
	x20 = Mem0[v18:word64]
	x29 = Mem0[sp:word64]
	sp = sp + 8
	x30 = Mem0[sp:word64]
	sp = sp + 32
	return
	// succ:  throw_to_top_level_exit
throw_to_top_level_exit:


// sigint_sighandler
// Return size: 0
void sigint_sighandler()
sigint_sighandler_entry:
	// succ:  l0000000000457A6C
l0000000000457A6C:
	sp = fp
	x1 = 0x00000000004E1000
	x2 = x1 + 0x0000000000000270
	w3 = Mem0[x2 + 8:word32]
	branch w3 != 0x00000000 l0000000000457A88
	// succ:  l0000000000457A7C l0000000000457A88
l0000000000457A7C:
	w3 = Mem0[x2 + 8:word32]
	w3 = w3 + 0x00000001
	Mem0[x2 + 8:word32] = w3
	// succ:  l0000000000457A88
l0000000000457A88:
	x1 = x1 + 0x0000000000000270
	w2 = Mem0[x1 + 12:word32]
	branch w2 != 0x00000000 l0000000000457A98
	// succ:  l0000000000457A94 l0000000000457A98
l0000000000457A94:
	return
	// succ:  sigint_sighandler_exit
l0000000000457A98:
	w0 = w0 + 0x00000080
	Mem0[x1 + 12:word32] = 0x00000000
	x1 = 0x00000000004E3000
	Mem0[x1 + 1200:word32] = w0
	// succ:  l0000000000457AA8_thunk_throw_to_top_level
l0000000000457AA8_thunk_throw_to_top_level:
	call throw_to_top_level (retsize: 0;)
	return
	// succ:  sigint_sighandler_exit
sigint_sighandler_exit:


// set_signal_handler
// Return size: 0
void set_signal_handler()
set_signal_handler_entry:
	// succ:  l0000000000457AAC
l0000000000457AAC:
	sp = fp
	sp = sp + -336
	Mem0[sp:word64] = x29
	sp = sp + 8
	Mem0[sp:word64] = x30
	x29 = x31 + 0x0000000000000000
	Mem0[sp + 16:word64] = x19
	Mem0[x29 + 184:word64] = x1
	w31 = w0 - 0x00000011
	NZCV = cond(w31)
	w19 = w0
	branch Test(EQ,Z) l0000000000457AFC
	// succ:  l0000000000457AC8 l0000000000457AFC
l0000000000457AC8:
	Mem0[x29 + 320:word32] = 0x00000000
	// succ:  l0000000000457ACC
l0000000000457ACC:
	x0 = x29 + 0x00000000000000C0
	sigemptyset(x0)
	sp = sp + 0xFFFFFFFFFFFFFFF8
	x0 = x29 + 0x0000000000000028
	sigemptyset(x0)
	sp = sp + 0xFFFFFFFFFFFFFFF8
	x1 = x29 + 0x00000000000000B8
	x2 = x29 + 0x0000000000000020
	w0 = w19
	sigaction(x0, x1, x2)
	sp = sp + 0xFFFFFFFFFFFFFFF8
	x0 = Mem0[x29 + 32:word64]
	x19 = Mem0[sp + 16:word64]
	x29 = Mem0[sp:word64]
	sp = sp + 8
	x30 = Mem0[sp:word64]
	sp = sp + 336
	return
	// succ:  set_signal_handler_exit
l0000000000457AFC:
	w0 = 0x10000000
	Mem0[x29 + 320:word32] = w0
	goto l0000000000457ACC
	// succ:  l0000000000457ACC
set_signal_handler_exit:


// termsig_handler
// Return size: 0
void termsig_handler()
termsig_handler_entry:
	// succ:  l0000000000457B08
l0000000000457B08:
	sp = fp
	sp = sp + -32
	Mem0[sp:word64] = x29
	sp = sp + 8
	Mem0[sp:word64] = x30
	x29 = x31 + 0x0000000000000000
	x1 = 0x00000000004E1000
	x1 = x1 + 0x0000000000000270
	w2 = Mem0[x1 + 16:word32]
	Mem0[sp + 16:word64] = x19
	w19 = w0
	branch w2 != 0x00000000 l0000000000457BF0
	// succ:  l0000000000457B28 l0000000000457BF0
l0000000000457B28:
	w3 = 0x00000001
	Mem0[x1 + 16:word32] = w3
	Mem0[x1 + 20:word32] = w2
	w31 = w0 - 0x00000002
	NZCV = cond(w31)
	branch Test(EQ,Z) l0000000000457BFC
	// succ:  l0000000000457B3C l0000000000457BFC
l0000000000457B3C:
	x0 = 0x00000000004DE000
	w0 = Mem0[x0 + 1712:word32]
	branch w0 != 0x00000000 l0000000000457BB4
	// succ:  l0000000000457B48 l0000000000457BB4
l0000000000457B48:
	w31 = w19 - 0x00000001
	NZCV = cond(w31)
	branch Test(EQ,Z) l0000000000457BC8
	// succ:  l0000000000457B50 l0000000000457BC8
l0000000000457B50:
	call end_job_control (retsize: 0;)
	call unlink_fifo_list (retsize: 0;)
	x0 = 0x00000000004DF000
	Mem0[x0 + 3080:word32] = 0x00000000
	x0 = 0x00000000004E1000
	Mem0[x0 + 1660:word32] = 0x00000000
	x0 = 0x00000000004E1000
	Mem0[x0 + 1664:word32] = 0x00000000
	x0 = 0x00000000004E1000
	Mem0[x0 + 1656:word32] = 0x00000000
	x0 = 0x00000000004E3000
	Mem0[x0 + 1188:word32] = 0x00000000
	x0 = 0x00000000004DF000
	Mem0[x0 + 3048:word32] = 0x00000000
	x0 = 0x00000000004DF000
	Mem0[x0 + 3084:word32] = 0x00000000
	call run_exit_trap (retsize: 0;)
	x1 = 0x0000000000000000
	w0 = w19
	call set_signal_handler (retsize: 0;)
	call getpid (retsize: 0;)
	w1 = w19
	x19 = Mem0[sp + 16:word64]
	x29 = Mem0[sp:word64]
	sp = sp + 8
	x30 = Mem0[sp:word64]
	sp = sp + 32
	call kill (retsize: 0;)
	return
	// succ:  termsig_handler_exit
l0000000000457BB4:
	w31 = w19 - 0x00000006
	NZCV = cond(w31)
	branch Test(EQ,Z) l0000000000457B50
	// succ:  l0000000000457BBC l0000000000457B50
l0000000000457BBC:
	call maybe_save_shell_history (retsize: 0;)
	// succ:  l0000000000457BC0
l0000000000457BC0:
	w31 = w19 - 0x00000001
	NZCV = cond(w31)
	branch Test(NE,Z) l0000000000457B50
	// succ:  l0000000000457BC8 l0000000000457B50
l0000000000457BC8:
	x0 = 0x00000000004DE000
	w0 = Mem0[x0 + 1704:word32]
	branch w0 != 0x00000000 l0000000000457BE8
	// succ:  l0000000000457BD4 l0000000000457BE8
l0000000000457BD4:
	x0 = 0x00000000004E3000
	w1 = Mem0[x0 + 1184:word32]
	w0 = 0x00000024
	NZ = cond(w1 & w0)
	C = false
	V = false
	branch Test(EQ,Z) l0000000000457B50
	// succ:  l0000000000457BE8 l0000000000457B50
l0000000000457BE8:
	call hangup_all_jobs (retsize: 0;)
	goto l0000000000457B50
	// succ:  l0000000000457B50
l0000000000457BF0:
	x19 = Mem0[sp + 16:word64]
	x29 = Mem0[sp:word64]
	sp = sp + 8
	x30 = Mem0[sp:word64]
	sp = sp + 32
	return
	// succ:  termsig_handler_exit
l0000000000457BFC:
	call signal_is_trapped (retsize: 0;)
	branch w0 != 0x00000000 l0000000000457C18
	// succ:  l0000000000457C04 l0000000000457C18
l0000000000457C04:
	x0 = 0x00000000004DE000
	w0 = Mem0[x0 + 1712:word32]
	branch w0 == 0x00000000 l0000000000457B50
	// succ:  l0000000000457C10 l0000000000457B50
l0000000000457C10:
	call maybe_save_shell_history (retsize: 0;)
	goto l0000000000457BC0
	// succ:  l0000000000457BC0
l0000000000457C18:
	call run_interrupt_trap (retsize: 0;)
	goto l0000000000457C04
	// succ:  l0000000000457C04
termsig_handler_exit:


// termsig_sighandler
// Return size: 0
void termsig_sighandler()
termsig_sighandler_entry:
	// succ:  l0000000000457C20
l0000000000457C20:
	sp = fp
	w1 = w0 - 0x00000001
	w31 = w1 - 0x00000001
	NZCV = cond(w31)
	branch Test(ULE,ZC) l0000000000457C40
	// succ:  l0000000000457C2C l0000000000457C40
l0000000000457C2C:
	w1 = w0 - 0x00000018
	w31 = w1 - 0x00000002
	NZCV = cond(w31)
	branch Test(ULE,ZC) l0000000000457C40
	// succ:  l0000000000457C38 l0000000000457C40
l0000000000457C38:
	w31 = w0 - 0x0000000A
	NZCV = cond(w31)
	branch Test(NE,Z) l0000000000457CB0
	// succ:  l0000000000457C40 l0000000000457CB0
l0000000000457C40:
	x2 = 0x00000000004E1000
	// succ:  l0000000000457C44
l0000000000457C44:
	x1 = x2 + 0x0000000000000270
	w3 = Mem0[x1 + 24:word32]
	Mem0[x1 + 20:word32] = w0
	branch w3 == 0x00000000 l0000000000457CAC
	// succ:  l0000000000457C54 l0000000000457CAC
l0000000000457C54:
	x1 = 0x00000000004DE000
	w1 = Mem0[x1 + 1712:word32]
	branch w1 != 0x00000000 l0000000000457C74
	// succ:  l0000000000457C60 l0000000000457C74
l0000000000457C60:
	x1 = 0x00000000004E3000
	Mem0[x1 + 3428:word32] = 0x00000000
	// succ:  l0000000000457C68
l0000000000457C68:
	x2 = x2 + 0x0000000000000270
	Mem0[x2 + 24:word32] = 0x00000000
	// succ:  l0000000000457C70_thunk_termsig_handler
l0000000000457C70_thunk_termsig_handler:
	call termsig_handler (retsize: 0;)
	return
	// succ:  termsig_sighandler_exit
l0000000000457C74:
	x1 = 0x00000000004DE000
	w1 = Mem0[x1 + 1704:word32]
	branch w1 == 0x00000000 l0000000000457C60
	// succ:  l0000000000457C80 l0000000000457C60
l0000000000457C80:
	w31 = w0 - 0x0000000F
	NZCV = cond(w31)
	branch Test(EQ,Z) l0000000000457C90
	// succ:  l0000000000457C88 l0000000000457C90
l0000000000457C88:
	w31 = w0 - 0x00000001
	NZCV = cond(w31)
	branch Test(NE,Z) l0000000000457C60
	// succ:  l0000000000457C90 l0000000000457C60
l0000000000457C90:
	x1 = 0x00000000004DE000
	w1 = Mem0[x1 + 1720:word32]
	branch w1 != 0x00000000 l0000000000457C60
	// succ:  l0000000000457C9C l0000000000457C60
l0000000000457C9C:
	x1 = 0x00000000004E1000
	w1 = Mem0[x1 + 3168:word32]
	branch (w1 & 0x00000008) == 0x00000000 l0000000000457C68
	// succ:  l0000000000457CA8 l0000000000457C68
l0000000000457CA8:
	goto l0000000000457C60
	// succ:  l0000000000457C60
l0000000000457CAC:
	return
	// succ:  termsig_sighandler_exit
l0000000000457CB0:
	w1 = w0 - 0x0000000C
	w31 = w1 - 0x00000003
	NZCV = cond(w31)
	branch Test(ULE,ZC) l0000000000457C40
	// succ:  l0000000000457CBC l0000000000457C40
l0000000000457CBC:
	x2 = 0x00000000004E1000
	x1 = x2 + 0x0000000000000270
	w3 = Mem0[x1 + 20:word32]
	NZCV = cond(w0 - w3)
	branch Test(NE,Z) l0000000000457C44
	// succ:  l0000000000457CD0 l0000000000457C44
l0000000000457CD0:
	Mem0[x1 + 20:word32] = w0
	goto l0000000000457C54
	// succ:  l0000000000457C54
termsig_sighandler_exit:


// set_sigwinch_handler
// Return size: 0
void set_sigwinch_handler()
set_sigwinch_handler_entry:
	// succ:  l0000000000457CD8
l0000000000457CD8:
	sp = fp
	sp = sp + -16
	Mem0[sp:word64] = x29
	sp = sp + 8
	Mem0[sp:word64] = x30
	x29 = x31 + 0x0000000000000000
	x1 = 0x0000000000457000
	x1 = x1 + 0x000000000000067C
	w0 = 0x0000001C
	call set_signal_handler (retsize: 0;)
	x1 = 0x00000000004E1000
	x1 = x1 + 0x0000000000000270
	Mem0[x1 + 32:word64] = x0
	x29 = Mem0[sp:word64]
	sp = sp + 8
	x30 = Mem0[sp:word64]
	sp = sp + 16
	return
	// succ:  set_sigwinch_handler_exit
set_sigwinch_handler_exit:


// initialize_signals
// Return size: 0
void initialize_signals()
initialize_signals_entry:
	// succ:  l0000000000457D04
l0000000000457D04:
	sp = fp
	sp = sp + -32
	Mem0[sp:word64] = x29
	sp = sp + 8
	Mem0[sp:word64] = x30
	x29 = x31 + 0x0000000000000000
	v8 = sp + 16
	Mem0[v8:word64] = x19
	v8 = v8 + 8
	Mem0[v8:word64] = x20
	x20 = 0x00000000004DE000
	w0 = Mem0[x20 + 1704:word32]
	branch w0 != 0x00000000 l0000000000457DA0
	// succ:  l0000000000457D1C l0000000000457DA0
l0000000000457D1C:
	x19 = 0x00000000004E3000
	x19 = x19 + 0xFFFFFFFFFFFFFBA8
	x0 = x19
	sigemptyset(x0)
	sp = sp + 0xFFFFFFFFFFFFFFF8
	x2 = x19
	x1 = 0x0000000000000000
	w0 = 0x00000000
	sigprocmask(x0, x1, x2)
	sp = sp + 0xFFFFFFFFFFFFFFF8
	w1 = 0x00000011
	x0 = x19
	call sigdelset (retsize: 0;)
	w0 = 0x00000003
	x1 = 0x0000000000000001
	call set_signal_handler (retsize: 0;)
	w0 = Mem0[x20 + 1704:word32]
	branch w0 == 0x00000000 l0000000000457D94
	// succ:  l0000000000457D5C l0000000000457D94
l0000000000457D5C:
	x1 = 0x0000000000457000
	x1 = x1 + 0xFFFFFFFFFFFFFA6C
	w0 = 0x00000002
	call set_signal_handler (retsize: 0;)
	x1 = 0x0000000000000001
	w0 = 0x0000000F
	call set_signal_handler (retsize: 0;)
	x1 = 0x0000000000457000
	x1 = x1 + 0x000000000000067C
	w0 = 0x0000001C
	call set_signal_handler (retsize: 0;)
	x1 = 0x00000000004E1000
	x1 = x1 + 0x0000000000000270
	Mem0[x1 + 32:word64] = x0
	// succ:  l0000000000457D94
l0000000000457D94:
	v14 = sp + 16
	x19 = Mem0[v14:word64]
	v14 = v14 + 8
	x20 = Mem0[v14:word64]
	x29 = Mem0[sp:word64]
	sp = sp + 8
	x30 = Mem0[sp:word64]
	sp = sp + 32
	// succ:  l0000000000457D9C_thunk_initialize_job_signals
l0000000000457D9C_thunk_initialize_job_signals:
	call initialize_job_signals (retsize: 0;)
	return
	// succ:  initialize_signals_exit
l0000000000457DA0:
	call initialize_terminating_signals (retsize: 0;)
	goto l0000000000457D1C
	// succ:  l0000000000457D1C
initialize_signals_exit:


// unset_sigwinch_handler
// Return size: 0
void unset_sigwinch_handler()
unset_sigwinch_handler_entry:
	// succ:  l0000000000457DA8
l0000000000457DA8:
	sp = fp
	x0 = 0x00000000004E1000
	x0 = x0 + 0x0000000000000270
	x1 = Mem0[x0 + 32:word64]
	w0 = 0x0000001C
	// succ:  l0000000000457DB8_thunk_set_signal_handler
l0000000000457DB8_thunk_set_signal_handler:
	call set_signal_handler (retsize: 0;)
	return
	// succ:  unset_sigwinch_handler_exit
unset_sigwinch_handler_exit:


// fn0000000000457DBC
// Return size: 0
void fn0000000000457DBC()
fn0000000000457DBC_entry:
	// succ:  l0000000000457DBC
l0000000000457DBC:
	sp = fp
	sp = sp + -16
	Mem0[sp:word64] = x29
	sp = sp + 8
	Mem0[sp:word64] = x30
	x29 = x31 + 0x0000000000000000
	call builtin_error (retsize: 0;)
	x0 = 0x00000000004E1000
	w1 = 0x00000002
	x0 = x0 + 0x0000000000000298
	Mem0[x0:word32] = w1
	x0 = x0 + 8
	w1 = 0x00000001
	call __longjmp_chk (retsize: 0;)
	sp = sp + -80
	Mem0[sp:word64] = x29
	sp = sp + 8
	Mem0[sp:word64] = x30
	x29 = x31 + 0x0000000000000000
	v10 = sp + 16
	Mem0[v10:word64] = x19
	v10 = v10 + 8
	Mem0[v10:word64] = x20
	Mem0[sp + 32:word64] = x21
	x20 = x1
	x21 = x0
	w19 = w2
	branch (w3 & 0x00000002) == 0x00000000 l0000000000457E28
	// succ:  l0000000000457DFC_thunk_fn0000000000457E00 l0000000000457DFC_thunk_fn0000000000457E28
l0000000000457DFC_thunk_fn0000000000457E00:
	call fn0000000000457E00 (retsize: 0;)
	return
	// succ:  fn0000000000457DBC_exit
l0000000000457DFC_thunk_fn0000000000457E28:
	call fn0000000000457E28 (retsize: 0;)
	return
	// succ:  fn0000000000457DBC_exit
fn0000000000457DBC_exit:


// fn0000000000457DE0
// Return size: 0
void fn0000000000457DE0()
fn0000000000457DE0_entry:
	// succ:  l0000000000457DE0
l0000000000457DE0:
	sp = fp
	sp = sp + -80
	Mem0[sp:word64] = x29
	sp = sp + 8
	Mem0[sp:word64] = x30
	x29 = x31 + 0x0000000000000000
	v8 = sp + 16
	Mem0[v8:word64] = x19
	v8 = v8 + 8
	Mem0[v8:word64] = x20
	Mem0[sp + 32:word64] = x21
	x20 = x1
	x21 = x0
	w19 = w2
	branch (w3 & 0x00000002) == 0x00000000 l0000000000457DFC_thunk_fn0000000000457E28
	// succ:  l0000000000457DFC_thunk_fn0000000000457E00 l0000000000457DFC_thunk_fn0000000000457E28
l0000000000457DFC_thunk_fn0000000000457E00:
	call fn0000000000457E00 (retsize: 0;)
	return
	// succ:  fn0000000000457DE0_exit
l0000000000457DFC_thunk_fn0000000000457E28:
	call fn0000000000457E28 (retsize: 0;)
	return
	// succ:  fn0000000000457DE0_exit
fn0000000000457DE0_exit:


// fn0000000000457E00
// Return size: 0
void fn0000000000457E00()
fn0000000000457E00_entry:
	// succ:  l0000000000457E00
l0000000000457E00:
	sp = v3
	x1 = x29 + 0x0000000000000040
	call evalexp (retsize: 0;)
	Mem0[x29 + 56:word64] = x0
	w0 = Mem0[x29 + 64:word32]
	branch w0 != 0x00000000 l0000000000457E68
	// succ:  l0000000000457E14 l0000000000457E68
l0000000000457E14:
	w0 = 0x00000000
	// succ:  l0000000000457E14_thunk_fn0000000000457E28
l0000000000457E14_thunk_fn0000000000457E28:
	call fn0000000000457E28 (retsize: 0;)
	return
	// succ:  fn0000000000457E00_exit
l0000000000457E68:
	x0 = x20
	x1 = x29 + 0x0000000000000040
	call evalexp (retsize: 0;)
	Mem0[x29 + 48:word64] = x0
	w0 = Mem0[x29 + 64:word32]
	branch w0 != 0x00000000 l0000000000457E44
	goto l0000000000457E80
	// succ:  l0000000000457E80 l0000000000457E7C_thunk_fn0000000000457E28
l0000000000457E7C_thunk_fn0000000000457E28:
	call fn0000000000457E28 (retsize: 0;)
	return
	// succ:  fn0000000000457E00_exit
l0000000000457E80:
	goto l0000000000457E14
	// succ:  l0000000000457E14
fn0000000000457E00_exit:


// fn0000000000457E28
// Return size: 0
void fn0000000000457E28()
fn0000000000457E28_entry:
	goto l0000000000457E28
	// succ:  l0000000000457E28
l0000000000457E18:
	v16 = sp + 16
	x19 = Mem0[v16:word64]
	v16 = v16 + 8
	x20 = Mem0[v16:word64]
	x21 = Mem0[sp + 32:word64]
	x29 = Mem0[sp:word64]
	sp = sp + 8
	x30 = Mem0[sp:word64]
	sp = sp + 80
	return
	// succ:  fn0000000000457E28_exit
l0000000000457E28:
	sp = v3
	x1 = x29 + 0x0000000000000038
	call legal_number (retsize: 0;)
	branch w0 == 0x00000000 l0000000000457EFC
	// succ:  l0000000000457E34 l0000000000457EFC
l0000000000457E34:
	x0 = x20
	x1 = x29 + 0x0000000000000030
	call legal_number (retsize: 0;)
	branch w0 == 0x00000000 l0000000000457F04
	// succ:  l0000000000457E44 l0000000000457F04
l0000000000457E44:
	w31 = w19 - 0x00000005
	NZCV = cond(w31)
	w0 = 0x00000000
	branch Test(UGT,ZC) l0000000000457E18
	// succ:  l0000000000457E50 l0000000000457E18
l0000000000457E50:
	x0 = 0x00000000004AE000
	x0 = x0 + 0x00000000000003CC
	v13 = Mem0[x0 + (uint64) ((uint32) w19):byte]
	w2 = (word32) v13
	x1 = 0x0000000000457E68
	x2 = x1 + (int64) ((int8) w2)
l0000000000457EFC:
	x0 = x21
	call fn000000000041D038 (retsize: 0;)
	// succ:  l0000000000457F04
l0000000000457F04:
	x0 = x20
	call fn000000000041D038 (retsize: 0;)
	// succ:  l0000000000457F08_thunk_fn0000000000457F0C
l0000000000457F08_thunk_fn0000000000457F0C:
	call fn0000000000457F0C (retsize: 0;)
	return
	// succ:  fn0000000000457E28_exit
fn0000000000457E28_exit:


// fn0000000000457F0C
// Return size: 0
void fn0000000000457F0C()
fn0000000000457F0C_entry:
	// succ:  l0000000000457F0C
l0000000000457F0C:
	sp = fp
	sp = sp + -16
	Mem0[sp:word64] = x29
	sp = sp + 8
	Mem0[sp:word64] = x30
	x29 = x31 + 0x0000000000000000
	x1 = 0x00000000004AE000
	x1 = x1 + 0x00000000000004B0
	x0 = 0x0000000000000000
	w2 = 0x00000005
	dcgettext(x0, x1, x2)
	sp = sp + 0xFFFFFFFFFFFFFFF8
	x1 = 0x0000000000000000
	call fn0000000000457DBC (retsize: 0;)
	// succ:  l0000000000457F2C_thunk_fn0000000000457F30
l0000000000457F2C_thunk_fn0000000000457F30:
	call fn0000000000457F30 (retsize: 0;)
	return
	// succ:  fn0000000000457F0C_exit
fn0000000000457F0C_exit:


// fn0000000000457F30
// Return size: 0
void fn0000000000457F30()
fn0000000000457F30_entry:
	// succ:  l0000000000457F30
l0000000000457F30:
	sp = v3
	v5 = Mem0[x0 + 1:byte]
	w0 = (word32) v5
	w0 = w0 - 0x00000047
	w31 = w0 - 0x00000033
	NZCV = cond(w31)
	branch Test(ULE,ZC) l0000000000457F48
	// succ:  l0000000000457F40 l0000000000457F48
l0000000000457F40:
	w0 = 0x00000000
	return
	// succ:  fn0000000000457F30_exit
l0000000000457F48:
	x1 = 0x00000000004AE000
	x1 = x1 + 0x00000000000003D4
	v11 = Mem0[x1 + (uint64) ((uint32) w0):byte]
	w2 = (word32) v11
	x3 = 0x0000000000457F60
	x2 = x3 + (int64) ((int8) w2)
fn0000000000457F30_exit:


// binary_test
// Return size: 0
void binary_test()
binary_test_entry:
	// succ:  l0000000000457F68
l0000000000457F68:
	sp = fp
	sp = sp + -304
	Mem0[sp:word64] = x29
	sp = sp + 8
	Mem0[sp:word64] = x30
	x29 = x31 + 0x0000000000000000
	Mem0[sp + 16:word64] = x19
	v9 = Mem0[x0:byte]
	w4 = (word32) v9
	x19 = x1
	w31 = w4 - 0x0000003D
	NZCV = cond(w31)
	w7 = w3 & 0x00000001
	branch Test(EQ,Z) l0000000000458030
	// succ:  l0000000000457F88 l0000000000458030
l0000000000457F88:
	w1 = w4 & 0xFFFFFFFD
	w31 = w1 - 0x0000003C
	NZCV = cond(w31)
	v18 = Mem0[x0 + 1:byte]
	w6 = (word32) v18
	branch Test(NE,Z) l0000000000457FD8
	// succ:  l0000000000457F98 l0000000000457FD8
l0000000000457F98:
	branch w6 != 0x00000000 l0000000000457FD8
	// succ:  l0000000000457F9C l0000000000457FD8
l0000000000457F9C:
	x0 = 0x00000000004D7000
	w0 = Mem0[x0 + 376:word32]
	w31 = w4 - 0x0000003E
	NZCV = cond(w31)
	w1 = (word32) Test(EQ,Z)
	w31 = w0 - 0x00000028
	NZCV = cond(w31)
	branch Test(LE,ZCV) l00000000004580B4
	// succ:  l0000000000457FB4 l00000000004580B4
l0000000000457FB4:
	branch (w3 & 0x00000004) == 0x00000000 l00000000004580B4
	// succ:  l0000000000457FB8 l00000000004580B4
l0000000000457FB8:
	x0 = x19
	branch w1 != 0x00000000 l00000000004581C4
	// succ:  l0000000000457FC0 l00000000004581C4
l0000000000457FC0:
	x1 = x2
	strcoll(x0, x1)
	sp = sp + 0xFFFFFFFFFFFFFFF8
l0000000000457FCC:
	x19 = Mem0[sp + 16:word64]
	x29 = Mem0[sp:word64]
	sp = sp + 8
	x30 = Mem0[sp:word64]
	sp = sp + 304
	return
	// succ:  binary_test_exit
l0000000000457FD8:
	w31 = w4 - 0x00000021
	NZCV = cond(w31)
	v33 = Mem0[x0 + 2:byte]
	w5 = (word32) v33
	w4 = w6
	branch Test(EQ,Z) l0000000000458068
	// succ:  l0000000000457FE8 l0000000000458068
l0000000000457FE8:
	w31 = w5 - 0x00000074
	NZCV = cond(w31)
	branch Test(EQ,Z) l000000000045807C
	// succ:  l0000000000457FF0 l000000000045807C
l0000000000457FF0:
	w31 = w4 - 0x00000065
	NZCV = cond(w31)
	branch Test(EQ,Z) l0000000000458128
	// succ:  l0000000000457FF8 l0000000000458128
l0000000000457FF8:
	w31 = w5 - 0x00000065
	NZCV = cond(w31)
	w0 = 0x00000000
	branch Test(NE,Z) l0000000000457FCC
	// succ:  l0000000000458004 l0000000000457FCC
l0000000000458004:
	w31 = w4 - 0x0000006C
	NZCV = cond(w31)
	branch Test(EQ,Z) l000000000045828C
	// succ:  l000000000045800C l000000000045828C
l000000000045800C:
	w31 = w4 - 0x0000006E
	NZCV = cond(w31)
	branch Test(EQ,Z) l0000000000458278
	// succ:  l0000000000458014 l0000000000458278
l0000000000458014:
	w31 = w4 - 0x00000067
	NZCV = cond(w31)
	branch Test(NE,Z) l0000000000457FCC
	// succ:  l000000000045801C l0000000000457FCC
l000000000045801C:
	x1 = x2
	x0 = x19
	w2 = 0x00000005
	call fn0000000000457DE0 (retsize: 0;)
	goto l0000000000457FCC
	// succ:  l0000000000457FCC
l0000000000458030:
	v22 = Mem0[x0 + 1:byte]
	w4 = (word32) v22
	branch w4 != 0x00000000 l00000000004580A0
	// succ:  l0000000000458038 l00000000004580A0
l0000000000458038:
	branch w7 != 0x00000000 l00000000004581D8
	// succ:  l000000000045803C l00000000004581D8
l000000000045803C:
	v23 = Mem0[x19:byte]
	w3 = (word32) v23
	v24 = Mem0[x2:byte]
	w1 = (word32) v24
	w0 = w7
	NZCV = cond(w3 - w1)
	branch Test(NE,Z) l0000000000457FCC
	// succ:  l0000000000458050 l0000000000457FCC
l0000000000458050:
	x0 = x19
	x1 = x2
	strcmp(x0, x1)
	sp = sp + 0xFFFFFFFFFFFFFFF8
	NZCV = cond(w0 - w31)
	w0 = (word32) Test(EQ,Z)
	goto l0000000000457FCC
	// succ:  l0000000000457FCC
l0000000000458068:
	w31 = w6 - 0x0000003D
	NZCV = cond(w31)
	branch Test(NE,Z) l0000000000457FE8
	// succ:  l0000000000458070 l0000000000457FE8
l0000000000458070:
	branch w5 == 0x00000000 l00000000004582A0
	// succ:  l0000000000458074 l00000000004582A0
l0000000000458074:
	w31 = w5 - 0x00000074
	NZCV = cond(w31)
	branch Test(NE,Z) l0000000000457FF8
	// succ:  l000000000045807C l0000000000457FF8
l000000000045807C:
	w4 = w4 - 0x00000067
	w31 = w4 - 0x00000008
	NZCV = cond(w31)
	branch Test(UGT,ZC) l0000000000458118
	// succ:  l0000000000458088 l0000000000458118
l0000000000458088:
	x0 = 0x00000000004AE000
	x0 = x0 + 0x0000000000000408
	v30 = Mem0[x0 + (uint64) ((uint32) w4):byte]
	w1 = (word32) v30
	x5 = 0x00000000004580A0
	x1 = x5 + (int64) ((int8) w1)
l00000000004580A0:
	w31 = w4 - 0x0000003D
	NZCV = cond(w31)
	v26 = Mem0[x0 + 2:byte]
	w5 = (word32) v26
	branch Test(NE,Z) l0000000000457FE8
	// succ:  l00000000004580AC l0000000000457FE8
l00000000004580AC:
	branch w5 != 0x00000000 l0000000000457FE8
	// succ:  l00000000004580B0 l0000000000457FE8
l00000000004580B0:
	goto l0000000000458038
	// succ:  l0000000000458038
l00000000004580B4:
	x0 = x19
	branch w1 != 0x00000000 l000000000045821C
	// succ:  l00000000004580BC l000000000045821C
l00000000004580BC:
	x1 = x2
	strcmp(x0, x1)
	sp = sp + 0xFFFFFFFFFFFFFFF8
l0000000000458118:
	w0 = 0x00000000
	x19 = Mem0[sp + 16:word64]
	x29 = Mem0[sp:word64]
	sp = sp + 8
	x30 = Mem0[sp:word64]
	sp = sp + 304
	return
	// succ:  binary_test_exit
l0000000000458128:
	w31 = w5 - 0x00000066
	NZCV = cond(w31)
	branch Test(EQ,Z) l0000000000458230
	// succ:  l0000000000458130 l0000000000458230
l0000000000458130:
	w31 = w5 - 0x00000071
	NZCV = cond(w31)
	branch Test(NE,Z) l0000000000458118
	// succ:  l0000000000458138 l0000000000458118
l0000000000458138:
	x1 = x2
	x0 = x19
	w2 = 0x00000000
	call fn0000000000457DE0 (retsize: 0;)
	goto l0000000000457FCC
	// succ:  l0000000000457FCC
l00000000004581C4:
	x1 = x2
	strcoll(x0, x1)
	sp = sp + 0xFFFFFFFFFFFFFFF8
	NZCV = cond(w0 - w31)
	w0 = (word32) Test(GT,NZV)
	goto l0000000000457FCC
	// succ:  l0000000000457FCC
l00000000004581D8:
	x0 = 0x00000000004E1000
	w1 = Mem0[x0 + 616:word32]
	x0 = 0x00000000004DF000
	w0 = Mem0[x0 + 3128:word32]
	NZCV = cond(w1 - w31)
	w3 = 0x00000020
l000000000045821C:
	x1 = x2
	strcmp(x0, x1)
	sp = sp + 0xFFFFFFFFFFFFFFF8
	NZCV = cond(w0 - w31)
	w0 = (word32) Test(GT,NZV)
	goto l0000000000457FCC
	// succ:  l0000000000457FCC
l0000000000458230:
	x0 = x19
	x1 = x29 + 0x00000000000000A0
	Mem0[x29 + 288:word64] = x2
	call sh_stat (retsize: 0;)
	x2 = Mem0[x29 + 288:word64]
	branch (w0 & 0x00000000) == 0x00000000 l0000000000458118
	// succ:  l0000000000458248 l0000000000458118
l0000000000458248:
	x0 = x2
	x1 = x29 + 0x0000000000000020
	Mem0[x29 + 288:word64] = x2
	call sh_stat (retsize: 0;)
	x2 = Mem0[x29 + 288:word64]
	branch (w0 & 0x00000000) == 0x00000000 l0000000000458118
	// succ:  l0000000000458260 l0000000000458118
l0000000000458260:
	x1 = x2
	x0 = x19
	x2 = x29 + 0x00000000000000A0
	x3 = x29 + 0x0000000000000020
	call same_file (retsize: 0;)
	goto l0000000000457FCC
	// succ:  l0000000000457FCC
l0000000000458278:
	x1 = x2
	x0 = x19
	w2 = 0x00000001
	call fn0000000000457DE0 (retsize: 0;)
	goto l0000000000457FCC
	// succ:  l0000000000457FCC
l000000000045828C:
	x1 = x2
	x0 = x19
	w2 = 0x00000004
	call fn0000000000457DE0 (retsize: 0;)
	goto l0000000000457FCC
	// succ:  l0000000000457FCC
l00000000004582A0:
	branch w7 != 0x00000000 l00000000004582D0
	// succ:  l00000000004582A4 l00000000004582D0
l00000000004582A4:
	v34 = Mem0[x19:byte]
	w3 = (word32) v34
	v35 = Mem0[x2:byte]
	w1 = (word32) v35
	w0 = 0x00000001
	NZCV = cond(w3 - w1)
	branch Test(NE,Z) l0000000000457FCC
	// succ:  l00000000004582B8 l0000000000457FCC
l00000000004582B8:
	x0 = x19
	x1 = x2
	strcmp(x0, x1)
	sp = sp + 0xFFFFFFFFFFFFFFF8
	NZCV = cond(w0 - w31)
	w0 = (word32) Test(NE,Z)
	goto l0000000000457FCC
	// succ:  l0000000000457FCC
l00000000004582D0:
	x0 = 0x00000000004E1000
	w1 = Mem0[x0 + 616:word32]
	x0 = 0x00000000004DF000
	w0 = Mem0[x0 + 3128:word32]
	NZCV = cond(w1 - w31)
	w3 = 0x00000020
binary_test_exit:


// unary_test
// Return size: 0
void unary_test()
unary_test_entry:
	// succ:  l0000000000458314
l0000000000458314:
	sp = fp
	sp = sp + -144
	Mem0[sp:word64] = x29
	sp = sp + 8
	Mem0[sp:word64] = x30
	x29 = x31 + 0x0000000000000000
	v8 = Mem0[x0 + 1:byte]
	w2 = (word32) v8
	w2 = w2 - 0x00000047
	w31 = w2 - 0x00000033
	NZCV = cond(w31)
	branch Test(UGT,ZC) l0000000000458368
	// succ:  l000000000045832C l0000000000458368
l000000000045832C:
	x0 = 0x00000000004AE000
	x0 = x0 + 0x0000000000000414
	v13 = Mem0[x0 + (uint64) ((uint32) w2):word16]
	w3 = (word32) v13
	x4 = 0x0000000000458344
	x3 = x4 + (int64) ((int16) w3)
l0000000000458368:
	w0 = 0x00000000
	x29 = Mem0[sp:word64]
	sp = sp + 8
	x30 = Mem0[sp:word64]
	sp = sp + 144
	return
	// succ:  unary_test_exit
unary_test_exit:


// test_binop
// Return size: 0
void test_binop()
test_binop_entry:
	// succ:  l00000000004587D4
l00000000004587D4:
	sp = fp
	v5 = Mem0[x0:byte]
	w1 = (word32) v5
	w31 = w1 - 0x0000003D
	NZCV = cond(w31)
	branch Test(EQ,Z) l00000000004587EC
	// succ:  l00000000004587E0 l00000000004587EC
l00000000004587E0:
	w2 = w1 & 0xFFFFFFFD
	w31 = w2 - 0x0000003C
	NZCV = cond(w31)
	branch Test(NE,Z) l00000000004587F8
	// succ:  l00000000004587EC l00000000004587F8
l00000000004587EC:
	v11 = Mem0[x0 + 1:byte]
	w3 = (word32) v11
	w2 = 0x00000001
	branch w3 == 0x00000000 l000000000045885C
	// succ:  l00000000004587F8 l000000000045885C
l00000000004587F8:
	w31 = w1 - 0x00000021
	NZCV = cond(w31)
	branch Test(NE,Z) l0000000000458864
	// succ:  l0000000000458800 l0000000000458864
l0000000000458800:
	v12 = Mem0[x0 + 1:byte]
	w2 = (word32) v12
	w31 = w2 - 0x0000003D
	NZCV = cond(w31)
	branch Test(EQ,Z) l0000000000458878
	// succ:  l000000000045880C l0000000000458878
l000000000045880C:
	w31 = w1 - 0x0000002D
	NZCV = cond(w31)
	w2 = 0x00000000
	branch Test(NE,Z) l000000000045885C
	// succ:  l0000000000458818 l000000000045885C
l0000000000458818:
	v13 = Mem0[x0 + 2:byte]
	w1 = (word32) v13
	branch w1 == 0x00000000 l000000000045885C
	// succ:  l0000000000458820 l000000000045885C
l0000000000458820:
	v14 = Mem0[x0 + 3:byte]
	w3 = (word32) v14
	branch w3 != 0x00000000 l000000000045885C
	// succ:  l0000000000458828 l000000000045885C
l0000000000458828:
	w31 = w1 - 0x00000074
	NZCV = cond(w31)
	v16 = Mem0[x0 + 1:byte]
	w0 = (word32) v16
	branch Test(EQ,Z) l00000000004588A0
	// succ:  l0000000000458834 l00000000004588A0
l0000000000458834:
	w31 = w0 - 0x00000065
	NZCV = cond(w31)
	branch Test(EQ,Z) l0000000000458888
	// succ:  l000000000045883C l0000000000458888
l000000000045883C:
	w31 = w1 - 0x00000065
	NZCV = cond(w31)
	branch Test(NE,Z) l000000000045885C
	// succ:  l0000000000458844 l000000000045885C
l0000000000458844:
	w31 = w0 - 0x0000006C
	NZCV = cond(w31)
	branch Test(EQ,Z) l0000000000458898
	// succ:  l000000000045884C l0000000000458898
l000000000045884C:
	w31 = w0 - 0x0000006E
	NZCV = cond(w31)
	branch Test(EQ,Z) l0000000000458898
	// succ:  l0000000000458854 l0000000000458898
l0000000000458854:
	w31 = w0 - 0x00000067
	NZCV = cond(w31)
	branch Test(EQ,Z) l0000000000458898
	// succ:  l000000000045885C l0000000000458898
l000000000045885C:
	w0 = w2
	return
	// succ:  test_binop_exit
l0000000000458864:
	w31 = w1 - 0x0000003D
	NZCV = cond(w31)
	branch Test(NE,Z) l000000000045880C
	// succ:  l000000000045886C l000000000045880C
l000000000045886C:
	v23 = Mem0[x0 + 1:byte]
	w2 = (word32) v23
	w31 = w2 - 0x0000003D
	NZCV = cond(w31)
	branch Test(NE,Z) l000000000045880C
	// succ:  l0000000000458878 l000000000045880C
l0000000000458878:
	v22 = Mem0[x0 + 2:byte]
	w3 = (word32) v22
	w2 = 0x00000001
	branch w3 != 0x00000000 l000000000045880C
	// succ:  l0000000000458884 l000000000045880C
l0000000000458884:
	goto l000000000045885C
	// succ:  l000000000045885C
l0000000000458888:
	w31 = w1 - 0x00000066
	NZCV = cond(w31)
	branch Test(EQ,Z) l0000000000458898
	// succ:  l0000000000458890 l0000000000458898
l0000000000458890:
	w31 = w1 - 0x00000071
	NZCV = cond(w31)
	branch Test(NE,Z) l000000000045885C
	// succ:  l0000000000458898 l000000000045885C
l0000000000458898:
	w2 = 0x00000001
	goto l000000000045885C
	// succ:  l000000000045885C
l00000000004588A0:
	w0 = w0 - 0x00000067
	w31 = w0 - 0x00000008
	NZCV = cond(w31)
	branch Test(ULE,ZC) l00000000004588B4
	// succ:  l00000000004588AC l00000000004588B4
l00000000004588AC:
	w2 = 0x00000000
	goto l000000000045885C
	// succ:  l000000000045885C
l00000000004588B4:
	x1 = 0x00000000004AE000
	x1 = x1 + 0x000000000000047C
	v19 = Mem0[x1 + (uint64) ((uint32) w0):byte]
	w2 = (word32) v19
	x3 = 0x00000000004588CC
	x2 = x3 + (int64) ((int8) w2)
test_binop_exit:


// fn00000000004589D8
// Return size: 0
void fn00000000004589D8()
fn00000000004589D8_entry:
	// succ:  l00000000004589D8
l00000000004589D8:
	sp = fp
	sp = sp + -64
	Mem0[sp:word64] = x29
	sp = sp + 8
	Mem0[sp:word64] = x30
	x29 = x31 + 0x0000000000000000
	v8 = sp + 48
	Mem0[v8:word64] = x23
	v8 = v8 + 8
	Mem0[v8:word64] = x24
	x23 = 0x00000000004E1000
	v11 = sp + 16
	Mem0[v11:word64] = x19
	v11 = v11 + 8
	Mem0[v11:word64] = x20
	x20 = x23 + 0x0000000000000298
	w24 = Mem0[x20 + 328:word32]
	v15 = sp + 32
	Mem0[v15:word64] = x21
	v15 = v15 + 8
	Mem0[v15:word64] = x22
fn00000000004589D8_exit:


// fn0000000000458B80
// Return size: 0
void fn0000000000458B80()
fn0000000000458B80_entry:
	goto l0000000000458B80
	// succ:  l0000000000458B80
l00000000004588CC:
	sp = sp + -64
	Mem0[sp:word64] = x29
	sp = sp + 8
	Mem0[sp:word64] = x30
	x29 = x31 + 0x0000000000000000
	v28 = sp + 32
	Mem0[v28:word64] = x21
	v28 = v28 + 8
	Mem0[v28:word64] = x22
	x21 = 0x00000000004E1000
	x0 = x21 + 0x0000000000000298
	v29 = Mem0[x0 + 164:int32]
	x22 = (word64) v29
	v30 = sp + 16
	Mem0[v30:word64] = x19
	v30 = v30 + 8
	Mem0[v30:word64] = x20
	x22 = x22 + 0x0000000000000001
	x20 = Mem0[x0 + 320:word64]
l0000000000458B80:
	sp = fp
	sp = sp + -64
	Mem0[sp:word64] = x29
	sp = sp + 8
	Mem0[sp:word64] = x30
	x29 = x31 + 0x0000000000000000
	v8 = sp + 48
	Mem0[v8:word64] = x23
	v8 = v8 + 8
	Mem0[v8:word64] = x24
	x23 = 0x00000000004E1000
	x0 = x23 + 0x0000000000000298
	v12 = sp + 16
	Mem0[v12:word64] = x19
	v12 = v12 + 8
	Mem0[v12:word64] = x20
	w5 = Mem0[x0 + 332:word32]
	w19 = Mem0[x0 + 328:word32]
	x9 = Mem0[x0 + 320:word64]
	v18 = sp + 32
	Mem0[v18:word64] = x21
	v18 = v18 + 8
	Mem0[v18:word64] = x22
	w6 = w19
	x10 = 0x0000000000000008
	w8 = w5 + 0x00000001
	w7 = 0x00000001
	NZCV = cond(w5 - w19)
	branch Test(LE,ZCV) l0000000000458D5C
	// succ:  l0000000000458BC0 l0000000000458D5C
l0000000000458BC0:
l0000000000458D5C:
	x23 = x23 + 0x0000000000000298
	Mem0[x23 + 328:word32] = w6
	call fn0000000000457F0C (retsize: 0;)
	x23 = x23 + 0x0000000000000298
	Mem0[x23 + 328:word32] = w5
	call fn0000000000457F0C (retsize: 0;)
	v25 = sp + 16
	x19 = Mem0[v25:word64]
	v25 = v25 + 8
	x20 = Mem0[v25:word64]
	v26 = sp + 32
	x21 = Mem0[v26:word64]
	v26 = v26 + 8
	x22 = Mem0[v26:word64]
	v27 = sp + 48
	x23 = Mem0[v27:word64]
	v27 = v27 + 8
	x24 = Mem0[v27:word64]
	x29 = Mem0[sp:word64]
	sp = sp + 8
	x30 = Mem0[sp:word64]
	sp = sp + 64
	goto l00000000004588CC
	// succ:  l00000000004588CC
fn0000000000458B80_exit:


// fn0000000000458DDC
// Return size: 0
void fn0000000000458DDC()
fn0000000000458DDC_entry:
	// succ:  l0000000000458DDC
l0000000000458DDC:
	sp = fp
	sp = sp + -32
	Mem0[sp:word64] = x29
	sp = sp + 8
	Mem0[sp:word64] = x30
	x29 = x31 + 0x0000000000000000
	Mem0[sp + 16:word64] = x19
	call fn0000000000458B80 (retsize: 0;)
	x1 = 0x00000000004E1000
	x1 = x1 + 0x0000000000000298
	w2 = Mem0[x1 + 328:word32]
	w3 = Mem0[x1 + 332:word32]
	w19 = w0
	NZCV = cond(w2 - w3)
	branch Test(GE,NZV) l0000000000458E1C
	// succ:  l0000000000458E08 l0000000000458E1C
l0000000000458E08:
	x0 = Mem0[x1 + 320:word64]
	x0 = Mem0[x0 + (int64) ((int32) w2):word64]
	v15 = Mem0[x0:byte]
	w3 = (word32) v15
	w31 = w3 - 0x0000002D
	NZCV = cond(w31)
	branch Test(EQ,Z) l0000000000458E2C
	// succ:  l0000000000458E1C l0000000000458E2C
l0000000000458E1C:
	w0 = w19
	x19 = Mem0[sp + 16:word64]
	x29 = Mem0[sp:word64]
	sp = sp + 8
	x30 = Mem0[sp:word64]
	sp = sp + 32
	return
	// succ:  fn0000000000458DDC_exit
l0000000000458E2C:
	v18 = Mem0[x0 + 1:byte]
	w3 = (word32) v18
	w31 = w3 - 0x00000061
	NZCV = cond(w31)
	branch Test(NE,Z) l0000000000458E1C
	// succ:  l0000000000458E38 l0000000000458E1C
l0000000000458E38:
	v19 = Mem0[x0 + 2:byte]
	w0 = (word32) v19
	branch w0 != 0x00000000 l0000000000458E1C
	// succ:  l0000000000458E40 l0000000000458E1C
l0000000000458E40:
	w2 = w2 + 0x00000001
	Mem0[x1 + 328:word32] = w2
	call fn0000000000458DDC (retsize: 0;)
	NZCV = cond(w0 - w31)
	w0 = (word32) Test(NE,Z)
	NZCV = cond(w19 - w31)
	w19 = (word32) Test(NE,Z)
	w19 = w0 & w19
	goto l0000000000458E1C
	// succ:  l0000000000458E1C
fn0000000000458DDC_exit:


// fn0000000000458E64
// Return size: 0
void fn0000000000458E64()
fn0000000000458E64_entry:
	// succ:  l0000000000458E64
l0000000000458E64:
	sp = fp
	sp = sp + -32
	Mem0[sp:word64] = x29
	sp = sp + 8
	Mem0[sp:word64] = x30
	x29 = x31 + 0x0000000000000000
	Mem0[sp + 16:word64] = x19
	call fn0000000000458DDC (retsize: 0;)
	x1 = 0x00000000004E1000
	x1 = x1 + 0x0000000000000298
	w2 = Mem0[x1 + 328:word32]
	w3 = Mem0[x1 + 332:word32]
	w19 = w0
	NZCV = cond(w2 - w3)
	branch Test(GE,NZV) l0000000000458EA4
	// succ:  l0000000000458E90 l0000000000458EA4
l0000000000458E90:
	x0 = Mem0[x1 + 320:word64]
	x0 = Mem0[x0 + (int64) ((int32) w2):word64]
	v15 = Mem0[x0:byte]
	w3 = (word32) v15
	w31 = w3 - 0x0000002D
	NZCV = cond(w31)
	branch Test(EQ,Z) l0000000000458EB4
	// succ:  l0000000000458EA4 l0000000000458EB4
l0000000000458EA4:
	w0 = w19
	x19 = Mem0[sp + 16:word64]
	x29 = Mem0[sp:word64]
	sp = sp + 8
	x30 = Mem0[sp:word64]
	sp = sp + 32
	return
	// succ:  fn0000000000458E64_exit
l0000000000458EB4:
	v18 = Mem0[x0 + 1:byte]
	w3 = (word32) v18
	w31 = w3 - 0x0000006F
	NZCV = cond(w31)
	branch Test(NE,Z) l0000000000458EA4
	// succ:  l0000000000458EC0 l0000000000458EA4
l0000000000458EC0:
	v19 = Mem0[x0 + 2:byte]
	w0 = (word32) v19
	branch w0 != 0x00000000 l0000000000458EA4
	// succ:  l0000000000458EC8 l0000000000458EA4
l0000000000458EC8:
	w2 = w2 + 0x00000001
	Mem0[x1 + 328:word32] = w2
	call fn0000000000458E64 (retsize: 0;)
	w0 = w0 | w19
	NZCV = cond(w0 - w31)
	w19 = (word32) Test(NE,Z)
	goto l0000000000458EA4
	// succ:  l0000000000458EA4
fn0000000000458E64_exit:


// test_unop
// Return size: 0
void test_unop()
test_unop_entry:
	// succ:  l0000000000458EE4
l0000000000458EE4:
	sp = fp
	v5 = Mem0[x0:byte]
	w2 = (word32) v5
	w31 = w2 - 0x0000002D
	NZCV = cond(w31)
	branch Test(EQ,Z) l0000000000458EF8
	// succ:  l0000000000458EF0 l0000000000458EF8
l0000000000458EF0:
	w0 = 0x00000000
	return
	// succ:  test_unop_exit
l0000000000458EF8:
	v11 = Mem0[x0 + 2:byte]
	w1 = (word32) v11
	branch w1 != 0x00000000 l0000000000458EF0
	// succ:  l0000000000458F00 l0000000000458EF0
l0000000000458F00:
	// succ:  l0000000000458F00_thunk_fn0000000000457F30
l0000000000458F00_thunk_fn0000000000457F30:
	call fn0000000000457F30 (retsize: 0;)
	return
	// succ:  test_unop_exit
test_unop_exit:


// test_command
// Return size: 0
void test_command()
test_command_entry:
	// succ:  l0000000000458F04
l0000000000458F04:
	sp = fp
	sp = sp + -64
	Mem0[sp:word64] = x29
	sp = sp + 8
	Mem0[sp:word64] = x30
	x29 = x31 + 0x0000000000000000
	Mem0[x29 + 32:word32] = w0
	x0 = 0x00000000004E1000
	x0 = x0 + 0x0000000000000298
	Mem0[x29 + 48:word64] = x1
	x0 = x0 + 0x0000000000000008
	w1 = 0x00000001
	Mem0[sp + 16:word64] = x19
	call __sigsetjmp (retsize: 0;)
	branch w0 == 0x00000000 l0000000000458F48
	// succ:  l0000000000458F30 l0000000000458F48
l0000000000458F30:
	x0 = 0x00000000004E1000
	x0 = x0 + 0x0000000000000298
	w0 = Mem0[x0:word32]
	x19 = Mem0[sp + 16:word64]
	x29 = Mem0[sp:word64]
	sp = sp + 8
	x30 = Mem0[sp:word64]
	sp = sp + 64
	return
	// succ:  test_command_exit
l0000000000458F48:
	x1 = Mem0[x29 + 48:word64]
	x2 = Mem0[x29 + 48:word64]
	x0 = Mem0[x1:word64]
	x1 = 0x00000000004E1000
	x1 = x1 + 0x0000000000000298
	Mem0[x1 + 320:word64] = x2
	branch x0 == 0x0000000000000000 l0000000000458F70
	// succ:  l0000000000458F64 l0000000000458F70
l0000000000458F64:
	v12 = Mem0[x0:byte]
	w1 = (word32) v12
	w31 = w1 - 0x0000005B
	NZCV = cond(w31)
	branch Test(EQ,Z) l00000000004590C0
	// succ:  l0000000000458F70 l00000000004590C0
l0000000000458F70:
	w2 = Mem0[x29 + 32:word32]
	x0 = 0x00000000004E1000
	x0 = x0 + 0x0000000000000298
	w1 = 0x00000001
	Mem0[x0 + 332:word32] = w2
	Mem0[x0 + 328:word32] = w1
	NZCV = cond(w2 - w1)
	branch Test(LE,ZCV) l0000000000459118
	// succ:  l0000000000458F90 l0000000000459118
l0000000000458F90:
	w3 = Mem0[x29 + 32:word32]
	x1 = 0x00000000004E1000
	w0 = w3 - 0x00000002
	x1 = x1 + 0x0000000000000298
	Mem0[x1 + 336:word32] = 0x00000000
	w31 = w0 - 0x00000003
	NZCV = cond(w31)
	branch Test(ULE,ZC) l0000000000458FE4
	// succ:  l0000000000458FAC l0000000000458FE4
l0000000000458FAC:
	call fn0000000000458E64 (retsize: 0;)
	x1 = 0x00000000004E1000
	x1 = x1 + 0x0000000000000298
	w2 = Mem0[x1 + 328:word32]
	w1 = Mem0[x1 + 332:word32]
	// succ:  l0000000000458FC0
l0000000000458FC0:
	NZCV = cond(w2 - w1)
	branch Test(EQ,Z) l0000000000459010
	// succ:  l0000000000458FC8 l0000000000459010
l0000000000458FC8:
	x1 = 0x00000000004AE000
	x1 = x1 + 0x0000000000000540
	// succ:  l0000000000458FD0
l0000000000458FD0:
	x0 = 0x0000000000000000
	w2 = 0x00000005
	dcgettext(x0, x1, x2)
	sp = sp + 0xFFFFFFFFFFFFFFF8
	x1 = 0x0000000000000000
	call fn0000000000457DBC (retsize: 0;)
	// succ:  l0000000000458FE4
l0000000000458FE4:
	x1 = 0x00000000004AE000
	x1 = x1 + 0x0000000000000488
	v23 = Mem0[x1 + (uint64) ((uint32) w0):byte]
	w2 = (word32) v23
	x3 = 0x0000000000458FFC
	x2 = x3 + (int64) ((int8) w2)
	call x2 (retsize: 0;)
	return
	// succ:  test_command_exit
l0000000000459010:
	NZCV = cond(w0 - w31)
	x0 = 0x00000000004E1000
	w1 = (word32) Test(EQ,Z)
	x0 = x0 + 0x0000000000000298
	Mem0[x0:word32] = w1
	x0 = x0 + 8
	w1 = 0x00000001
	call __longjmp_chk (retsize: 0;)
	call fn00000000004589D8 (retsize: 0;)
	x1 = 0x00000000004E1000
	x1 = x1 + 0x0000000000000298
	w2 = Mem0[x1 + 328:word32]
	w1 = Mem0[x1 + 332:word32]
	goto l0000000000458FC0
	// succ:  l0000000000458FC0
l00000000004590C0:
	v20 = Mem0[x0 + 1:byte]
	w0 = (word32) v20
	branch w0 != 0x00000000 l0000000000458F70
	// succ:  l00000000004590C8 l0000000000458F70
l00000000004590C8:
	w3 = Mem0[x29 + 32:word32]
	w3 = w3 - 0x00000001
	x0 = Mem0[x2 + (int64) ((int32) w3):word64]
	Mem0[x29 + 32:word32] = w3
	branch x0 == 0x0000000000000000 l00000000004590F0
	// succ:  l00000000004590DC l00000000004590F0
l00000000004590DC:
	v21 = Mem0[x0:byte]
	w1 = (word32) v21
	w31 = w1 - 0x0000005D
	NZCV = cond(w31)
	branch Test(NE,Z) l0000000000459138
	// succ:  l00000000004590E8 l0000000000459138
l00000000004590E8:
	v22 = Mem0[x0 + 1:byte]
	w0 = (word32) v22
	branch w0 != 0x00000000 l0000000000459138
	// succ:  l00000000004590F0 l0000000000459138
l00000000004590F0:
	w0 = Mem0[x29 + 32:word32]
	w31 = w0 - 0x00000001
	NZCV = cond(w31)
	branch Test(LE,ZCV) l0000000000459124
	// succ:  l00000000004590FC l0000000000459124
l00000000004590FC:
	w1 = Mem0[x29 + 32:word32]
	x0 = 0x00000000004E1000
	x0 = x0 + 0x0000000000000298
	Mem0[x0 + 332:word32] = w1
	w1 = 0x00000001
	Mem0[x0 + 328:word32] = w1
	goto l0000000000458F90
	// succ:  l0000000000458F90
l0000000000459118:
	Mem0[x0:word32] = w1
	x0 = x0 + 8
	call __longjmp_chk (retsize: 0;)
	call fn0000000000457F0C (retsize: 0;)
	// succ:  l0000000000459124
l0000000000459124:
	x0 = 0x00000000004E1000
	w1 = 0x00000001
	x0 = x0 + 0x0000000000000298
	Mem0[x0:word32] = w1
	x0 = x0 + 8
	call __longjmp_chk (retsize: 0;)
	// succ:  l0000000000459138
l0000000000459138:
	x1 = 0x00000000004AE000
	x1 = x1 + 0x0000000000000530
	goto l0000000000458FD0
	// succ:  l0000000000458FD0
test_command_exit:


// shell_version_string
// Return size: 0
void shell_version_string()
shell_version_string_entry:
	// succ:  l0000000000459144
l0000000000459144:
	sp = fp
	x31 = x31 - 0x0000000000000030
	v6 = sp + 16
	Mem0[v6:word64] = x29
	v6 = v6 + 8
	Mem0[v6:word64] = x30
	x29 = x31 + 0x0000000000000010
	Mem0[sp + 32:word64] = x19
	x19 = 0x00000000004E1000
	v9 = Mem0[x19 + 1008:byte]
	w1 = (word32) v9
	x0 = x19 + 0x00000000000003F0
	branch w1 != 0x00000000 l0000000000459198
	// succ:  l0000000000459164 l0000000000459198
l0000000000459164:
	x3 = 0x00000000004AE000
	x3 = x3 + 0x00000000000005A0
	x1 = 0x0000000000000020
	w2 = 0x00000001
	x4 = 0x00000000004AE000
	x5 = 0x00000000004AE000
	Mem0[sp:word64] = x3
	x4 = x4 + 0x0000000000000588
	x3 = x1
	x5 = x5 + 0x0000000000000598
	w6 = 0x0000002D
	w7 = w2
	__snprintf_chk(x0, x1, x2, x3, x4, Mem0[sp:<unknown>])
	sp = sp + 0xFFFFFFFFFFFFFFF8
	// succ:  l0000000000459198
l0000000000459198:
	x31 = x29 - 0x0000000000000010
	x0 = x19 + 0x00000000000003F0
	v19 = sp + 16
	x29 = Mem0[v19:word64]
	v19 = v19 + 8
	x30 = Mem0[v19:word64]
	x19 = Mem0[sp + 32:word64]
	x31 = x31 + 0x0000000000000030
	return
	// succ:  shell_version_string_exit
shell_version_string_exit:


// show_shell_version
// Return size: 0
void show_shell_version()
show_shell_version_entry:
	// succ:  l00000000004591B0
l00000000004591B0:
	sp = fp
	sp = sp + -48
	Mem0[sp:word64] = x29
	sp = sp + 8
	Mem0[sp:word64] = x30
	x29 = x31 + 0x0000000000000000
	x1 = 0x00000000004AE000
	Mem0[sp + 16:word64] = x19
	x1 = x1 + 0x00000000000005A8
	w2 = 0x00000005
	w19 = w0
	x0 = 0x0000000000000000
	dcgettext(x0, x1, x2)
	sp = sp + 0xFFFFFFFFFFFFFFF8
	Mem0[x29 + 32:word64] = x0
	call shell_version_string (retsize: 0;)
	x3 = 0x00000000004A9000
	x1 = Mem0[x29 + 32:word64]
	x2 = x0
	x3 = x3 + 0xFFFFFFFFFFFFFFF0
	w0 = 0x00000001
	__printf_chk(x0, x1, Mem0[sp:<unknown>])
	sp = sp + 0xFFFFFFFFFFFFFFF8
	branch w19 != 0x00000000 l0000000000459204
	// succ:  l00000000004591F8 l0000000000459204
l00000000004591F8:
	x19 = Mem0[sp + 16:word64]
	x29 = Mem0[sp:word64]
	sp = sp + 8
	x30 = Mem0[sp:word64]
	sp = sp + 48
	return
	// succ:  show_shell_version_exit
l0000000000459204:
	x1 = 0x00000000004AE000
	x1 = x1 + 0x00000000000005C8
	w2 = 0x00000005
	x0 = 0x0000000000000000
	dcgettext(x0, x1, x2)
	sp = sp + 0xFFFFFFFFFFFFFFF8
	puts(x0)
	sp = sp + 0xFFFFFFFFFFFFFFF8
	x1 = 0x00000000004AE000
	x1 = x1 + 0x0000000000000600
	w2 = 0x00000005
	x0 = 0x0000000000000000
	dcgettext(x0, x1, x2)
	sp = sp + 0xFFFFFFFFFFFFFFF8
	puts(x0)
	sp = sp + 0xFFFFFFFFFFFFFFF8
	x1 = 0x00000000004AE000
	w2 = 0x00000005
	x1 = x1 + 0x0000000000000650
	x0 = 0x0000000000000000
	dcgettext(x0, x1, x2)
	sp = sp + 0xFFFFFFFFFFFFFFF8
	x1 = x0
	w0 = 0x00000001
	__printf_chk(x0, x1, Mem0[sp:<unknown>])
	sp = sp + 0xFFFFFFFFFFFFFFF8
	x1 = 0x00000000004AE000
	x1 = x1 + 0x0000000000000698
	w2 = 0x00000005
	x0 = 0x0000000000000000
	dcgettext(x0, x1, x2)
	sp = sp + 0xFFFFFFFFFFFFFFF8
	x19 = Mem0[sp + 16:word64]
	x29 = Mem0[sp:word64]
	sp = sp + 8
	x30 = Mem0[sp:word64]
	sp = sp + 48
	x1 = x0
	w0 = 0x00000001
	__printf_chk(x0, x1, Mem0[sp:<unknown>])
	return
	// succ:  show_shell_version_exit
show_shell_version_exit:


// fn00000000004592C0
// Return size: 0
void fn00000000004592C0()
fn00000000004592C0_entry:
	// succ:  l00000000004592C0
l00000000004592C0:
	sp = fp
	sp = sp + -32
	Mem0[sp:word64] = x29
	sp = sp + 8
	Mem0[sp:word64] = x30
	x29 = x31 + 0x0000000000000000
	v8 = sp + 16
	Mem0[v8:word64] = x19
	v8 = v8 + 8
	Mem0[v8:word64] = x20
	x19 = 0x00000000004AE000
	x20 = x0
	x19 = x19 + 0x00000000000006F8
	x0 = Mem0[x0 + 8:word64]
	x1 = x19
	w2 = 0x0000009D
	call sh_xfree (retsize: 0;)
	x0 = Mem0[x20:word64]
	x1 = x19
	w2 = 0x0000009E
	call sh_xfree (retsize: 0;)
	x0 = x20
	x1 = x19
	v12 = sp + 16
	x19 = Mem0[v12:word64]
	v12 = v12 + 8
	x20 = Mem0[v12:word64]
	x29 = Mem0[sp:word64]
	sp = sp + 8
	x30 = Mem0[sp:word64]
	sp = sp + 32
	w2 = 0x0000009F
	// succ:  l000000000045930C_thunk_sh_xfree
l000000000045930C_thunk_sh_xfree:
	call sh_xfree (retsize: 0;)
	return
	// succ:  fn00000000004592C0_exit
fn00000000004592C0_exit:


// initialize_aliases
// Return size: 0
void initialize_aliases()
initialize_aliases_entry:
	// succ:  l000000000045933C
l000000000045933C:
	sp = fp
	sp = sp + -32
	Mem0[sp:word64] = x29
	sp = sp + 8
	Mem0[sp:word64] = x30
	x29 = x31 + 0x0000000000000000
	Mem0[sp + 16:word64] = x19
	x19 = 0x00000000004E1000
	x19 = x19 + 0x0000000000000410
	x0 = Mem0[x19:word64]
	branch x0 == 0x0000000000000000 l0000000000459364
	// succ:  l0000000000459358 l0000000000459364
l0000000000459358:
	x19 = Mem0[sp + 16:word64]
	x29 = Mem0[sp:word64]
	sp = sp + 8
	x30 = Mem0[sp:word64]
	sp = sp + 32
	return
	// succ:  initialize_aliases_exit
l0000000000459364:
	w0 = 0x00000010
	call hash_create (retsize: 0;)
	Mem0[x19:word64] = x0
	x19 = Mem0[sp + 16:word64]
	x29 = Mem0[sp:word64]
	sp = sp + 8
	x30 = Mem0[sp:word64]
	sp = sp + 32
	return
	// succ:  initialize_aliases_exit
initialize_aliases_exit:


// find_alias
// Return size: 0
void find_alias()
find_alias_entry:
	// succ:  l000000000045937C
l000000000045937C:
	sp = fp
	sp = sp + -16
	Mem0[sp:word64] = x29
	sp = sp + 8
	Mem0[sp:word64] = x30
	x29 = x31 + 0x0000000000000000
	x1 = 0x00000000004E1000
	x1 = x1 + 0x0000000000000410
	x1 = Mem0[x1:word64]
	branch x1 == 0x0000000000000000 l00000000004593AC
	// succ:  l0000000000459394 l00000000004593AC
l0000000000459394:
	w2 = 0x00000000
	call hash_search (retsize: 0;)
	branch x0 == 0x0000000000000000 l00000000004593AC
	// succ:  l00000000004593A0 l00000000004593AC
l00000000004593A0:
	x0 = Mem0[x0 + 16:word64]
	x29 = Mem0[sp:word64]
	sp = sp + 8
	x30 = Mem0[sp:word64]
	sp = sp + 16
	return
	// succ:  find_alias_exit
l00000000004593AC:
	x0 = 0x0000000000000000
	x29 = Mem0[sp:word64]
	sp = sp + 8
	x30 = Mem0[sp:word64]
	sp = sp + 16
	return
	// succ:  find_alias_exit
find_alias_exit:


// get_alias_value
// Return size: 0
void get_alias_value()
get_alias_value_entry:
	// succ:  l00000000004593B8
l00000000004593B8:
	sp = fp
	sp = sp + -16
	Mem0[sp:word64] = x29
	sp = sp + 8
	Mem0[sp:word64] = x30
	x29 = x31 + 0x0000000000000000
	x1 = 0x00000000004E1000
	x1 = x1 + 0x0000000000000410
	x1 = Mem0[x1:word64]
	branch x1 == 0x0000000000000000 l00000000004593E4
	// succ:  l00000000004593D0 l00000000004593E4
l00000000004593D0:
	call find_alias (retsize: 0;)
	branch x0 == 0x0000000000000000 l00000000004593E4
	// succ:  l00000000004593D8 l00000000004593E4
l00000000004593D8:
	x0 = Mem0[x0 + 8:word64]
	x29 = Mem0[sp:word64]
	sp = sp + 8
	x30 = Mem0[sp:word64]
	sp = sp + 16
	return
	// succ:  get_alias_value_exit
l00000000004593E4:
	x0 = 0x0000000000000000
	x29 = Mem0[sp:word64]
	sp = sp + 8
	x30 = Mem0[sp:word64]
	sp = sp + 16
	return
	// succ:  get_alias_value_exit
get_alias_value_exit:


// add_alias
// Return size: 0
void add_alias()
add_alias_entry:
	// succ:  l00000000004593F0
l00000000004593F0:
	sp = fp
	sp = sp + -64
	Mem0[sp:word64] = x29
	sp = sp + 8
	Mem0[sp:word64] = x30
	x29 = x31 + 0x0000000000000000
	v8 = sp + 32
	Mem0[v8:word64] = x21
	v8 = v8 + 8
	Mem0[v8:word64] = x22
	x21 = 0x00000000004E1000
	x2 = x21 + 0x0000000000000410
	x2 = Mem0[x2:word64]
	v12 = sp + 16
	Mem0[v12:word64] = x19
	v12 = v12 + 8
	Mem0[v12:word64] = x20
	v15 = sp + 48
	Mem0[v15:word64] = x23
	v15 = v15 + 8
	Mem0[v15:word64] = x24
	x22 = x0
	x20 = x1
	branch x2 == 0x0000000000000000 l00000000004594AC
	// succ:  l000000000045941C l00000000004594AC
l000000000045941C:
	call find_alias (retsize: 0;)
	x19 = x0
	branch x0 == 0x0000000000000000 l00000000004594B0
	// succ:  l0000000000459428 l00000000004594B0
l0000000000459428:
	x21 = 0x00000000004AE000
	x21 = x21 + 0x00000000000006F8
	x0 = Mem0[x0 + 8:word64]
	x1 = x21
	w2 = 0x0000007B
	call sh_xfree (retsize: 0;)
	x0 = x20
	strlen(x0)
	sp = sp + 0xFFFFFFFFFFFFFFF8
	w2 = 0x0000007C
	x1 = x21
	x0 = x0 + 0x0000000000000001
	call sh_xmalloc (retsize: 0;)
	x1 = x20
	strcpy(x0, x1)
	sp = sp + 0xFFFFFFFFFFFFFFF8
	v20 = Mem0[x19 + 16:byte]
	w21 = (word32) v20
	Mem0[x19 + 8:word64] = x0
	w21 = w21 & 0x000000FE
	Mem0[x19 + 16:byte] = (byte) w21
	x0 = x20
	strlen(x0)
	sp = sp + 0xFFFFFFFFFFFFFFF8
	x0 = x20 + x0
	v22 = Mem0[x0 + -1:byte]
	w0 = (word32) v22
	w31 = w0 - 0x00000009
	NZCV = cond(w31)
	branch Test(EQ,Z) l0000000000459490
	// succ:  l0000000000459488 l0000000000459490
l0000000000459488:
	w31 = w0 - 0x00000020
	NZCV = cond(w31)
	branch Test(NE,Z) l0000000000459498
	// succ:  l0000000000459490 l0000000000459498
l0000000000459490:
	w21 = w21 | 0x00000001
	Mem0[x19 + 16:byte] = (byte) w21
	// succ:  l0000000000459498
l0000000000459498:
	v26 = sp + 16
	x19 = Mem0[v26:word64]
	v26 = v26 + 8
	x20 = Mem0[v26:word64]
	v27 = sp + 32
	x21 = Mem0[v27:word64]
	v27 = v27 + 8
	x22 = Mem0[v27:word64]
	v28 = sp + 48
	x23 = Mem0[v28:word64]
	v28 = v28 + 8
	x24 = Mem0[v28:word64]
	x29 = Mem0[sp:word64]
	sp = sp + 8
	x30 = Mem0[sp:word64]
	sp = sp + 64
	return
	// succ:  add_alias_exit
l00000000004594AC:
	call initialize_aliases (retsize: 0;)
	// succ:  l00000000004594B0
l00000000004594B0:
	x24 = 0x00000000004AE000
	x23 = x24 + 0x00000000000006F8
	x1 = x23
	w2 = 0x00000084
	x0 = 0x0000000000000018
	call sh_xmalloc (retsize: 0;)
	x19 = x0
	x0 = x22
	strlen(x0)
	sp = sp + 0xFFFFFFFFFFFFFFF8
	w2 = 0x00000085
	x1 = x23
	x0 = x0 + 0x0000000000000001
	call sh_xmalloc (retsize: 0;)
	x1 = x22
	strcpy(x0, x1)
	sp = sp + 0xFFFFFFFFFFFFFFF8
	Mem0[x19:word64] = x0
	x0 = x20
	strlen(x0)
	sp = sp + 0xFFFFFFFFFFFFFFF8
	w2 = 0x00000086
	x1 = x23
	x0 = x0 + 0x0000000000000001
	call sh_xmalloc (retsize: 0;)
	x1 = x20
	strcpy(x0, x1)
	sp = sp + 0xFFFFFFFFFFFFFFF8
	Mem0[x19 + 8:word64] = x0
	Mem0[x19 + 16:byte] = 0x00
	x0 = x20
	strlen(x0)
	sp = sp + 0xFFFFFFFFFFFFFFF8
	x0 = x20 + x0
	v29 = Mem0[x0 + -1:byte]
	w0 = (word32) v29
	w31 = w0 - 0x00000009
	NZCV = cond(w31)
	branch Test(EQ,Z) l0000000000459588
	// succ:  l0000000000459530 l0000000000459588
l0000000000459530:
	w31 = w0 - 0x00000020
	NZCV = cond(w31)
	branch Test(EQ,Z) l0000000000459588
	// succ:  l0000000000459538 l0000000000459588
l0000000000459538:
	x0 = x22
	strlen(x0)
	sp = sp + 0xFFFFFFFFFFFFFFF8
	w2 = 0x0000008D
	x1 = x24 + 0x00000000000006F8
	x0 = x0 + 0x0000000000000001
	call sh_xmalloc (retsize: 0;)
	x1 = x22
	strcpy(x0, x1)
	sp = sp + 0xFFFFFFFFFFFFFFF8
	x21 = x21 + 0x0000000000000410
	x1 = Mem0[x21:word64]
	w2 = 0x00000001
	call hash_insert (retsize: 0;)
	Mem0[x0 + 16:word64] = x19
	v30 = sp + 32
	x21 = Mem0[v30:word64]
	v30 = v30 + 8
	x22 = Mem0[v30:word64]
	v31 = sp + 16
	x19 = Mem0[v31:word64]
	v31 = v31 + 8
	x20 = Mem0[v31:word64]
	v32 = sp + 48
	x23 = Mem0[v32:word64]
	v32 = v32 + 8
	x24 = Mem0[v32:word64]
	x0 = 0x00000000004D7000
	x29 = Mem0[sp:word64]
	sp = sp + 8
	x30 = Mem0[sp:word64]
	sp = sp + 64
	x0 = x0 + 0x0000000000000220
	// succ:  l0000000000459584_thunk_set_itemlist_dirty
l0000000000459584_thunk_set_itemlist_dirty:
	call set_itemlist_dirty (retsize: 0;)
	return
	// succ:  add_alias_exit
l0000000000459588:
	w0 = 0x00000001
	Mem0[x19 + 16:byte] = (byte) w0
	goto l0000000000459538
	// succ:  l0000000000459538
add_alias_exit:


// remove_alias
// Return size: 0
void remove_alias()
remove_alias_entry:
	// succ:  l0000000000459594
l0000000000459594:
	sp = fp
	sp = sp + -48
	Mem0[sp:word64] = x29
	sp = sp + 8
	Mem0[sp:word64] = x30
	x29 = x31 + 0x0000000000000000
	v8 = sp + 16
	Mem0[v8:word64] = x19
	v8 = v8 + 8
	Mem0[v8:word64] = x20
	x20 = 0x00000000004E1000
	x20 = x20 + 0x0000000000000410
	x1 = Mem0[x20:word64]
	Mem0[sp + 32:word64] = x21
	branch x1 == 0x0000000000000000 l0000000000459618
	// succ:  l00000000004595B4 l0000000000459618
l00000000004595B4:
	w2 = 0x00000000
	call hash_remove (retsize: 0;)
	x19 = x0
	branch x0 == 0x0000000000000000 l0000000000459618
	// succ:  l00000000004595C4 l0000000000459618
l00000000004595C4:
	x0 = Mem0[x0 + 16:word64]
	x21 = 0x00000000004AE000
	call fn00000000004592C0 (retsize: 0;)
	x21 = x21 + 0x00000000000006F8
	x0 = Mem0[x19 + 8:word64]
	w2 = 0x000000B2
	x1 = x21
	call sh_xfree (retsize: 0;)
	x0 = x19
	x1 = x21
	w2 = 0x000000B3
	call sh_xfree (retsize: 0;)
	x0 = 0x00000000004D7000
	x0 = x0 + 0x0000000000000220
	call set_itemlist_dirty (retsize: 0;)
	x0 = Mem0[x20:word64]
	w0 = Mem0[x0 + 12:word32]
	// succ:  l0000000000459608
l0000000000459608:
	v14 = sp + 16
	x19 = Mem0[v14:word64]
	v14 = v14 + 8
	x20 = Mem0[v14:word64]
	x21 = Mem0[sp + 32:word64]
	x29 = Mem0[sp:word64]
	sp = sp + 8
	x30 = Mem0[sp:word64]
	sp = sp + 48
	return
	// succ:  remove_alias_exit
l0000000000459618:
	w0 = 0xFFFFFFFF
	goto l0000000000459608
	// succ:  l0000000000459608
remove_alias_exit:


// delete_all_aliases
// Return size: 0
void delete_all_aliases()
delete_all_aliases_entry:
	// succ:  l0000000000459620
l0000000000459620:
	sp = fp
	sp = sp + -32
	Mem0[sp:word64] = x29
	sp = sp + 8
	Mem0[sp:word64] = x30
	x29 = x31 + 0x0000000000000000
	Mem0[sp + 16:word64] = x19
	x19 = 0x00000000004E1000
	x19 = x19 + 0x0000000000000410
	x0 = Mem0[x19:word64]
	branch x0 == 0x0000000000000000 l0000000000459668
	// succ:  l000000000045963C l0000000000459668
l000000000045963C:
	x1 = 0x0000000000459000
	x1 = x1 + 0x00000000000002C0
	call hash_flush (retsize: 0;)
	x0 = Mem0[x19:word64]
	call hash_dispose (retsize: 0;)
	x0 = 0x00000000004D7000
	Mem0[x19:word64] = 0x0000000000000000
	x19 = Mem0[sp + 16:word64]
	x29 = Mem0[sp:word64]
	sp = sp + 8
	x30 = Mem0[sp:word64]
	sp = sp + 32
	x0 = x0 + 0x0000000000000220
	// succ:  l0000000000459664_thunk_set_itemlist_dirty
l0000000000459664_thunk_set_itemlist_dirty:
	call set_itemlist_dirty (retsize: 0;)
	return
	// succ:  delete_all_aliases_exit
l0000000000459668:
	x19 = Mem0[sp + 16:word64]
	x29 = Mem0[sp:word64]
	sp = sp + 8
	x30 = Mem0[sp:word64]
	sp = sp + 32
	return
	// succ:  delete_all_aliases_exit
delete_all_aliases_exit:


// all_aliases
// Return size: 0
void all_aliases()
all_aliases_entry:
	// succ:  l0000000000459674
l0000000000459674:
	sp = fp
	sp = sp + -32
	Mem0[sp:word64] = x29
	sp = sp + 8
	Mem0[sp:word64] = x30
	x29 = x31 + 0x0000000000000000
	v8 = sp + 16
	Mem0[v8:word64] = x19
	v8 = v8 + 8
	Mem0[v8:word64] = x20
	x20 = 0x00000000004E1000
	x20 = x20 + 0x0000000000000410
	x0 = Mem0[x20:word64]
	branch x0 == 0x0000000000000000 l000000000045973C
	// succ:  l0000000000459690 l000000000045973C
l0000000000459690:
	w0 = Mem0[x0 + 12:word32]
	branch w0 == 0x00000000 l0000000000459748
	// succ:  l0000000000459698 l0000000000459748
l0000000000459698:
	w0 = w0 + 0x00000001
	x1 = 0x00000000004AE000
	x1 = x1 + 0x00000000000006F8
l000000000045973C:
	v12 = sp + 16
	x19 = Mem0[v12:word64]
	v12 = v12 + 8
	x20 = Mem0[v12:word64]
	x29 = Mem0[sp:word64]
	sp = sp + 8
	x30 = Mem0[sp:word64]
	sp = sp + 32
	return
	// succ:  all_aliases_exit
l0000000000459748:
	x0 = 0x0000000000000000
	v13 = sp + 16
	x19 = Mem0[v13:word64]
	v13 = v13 + 8
	x20 = Mem0[v13:word64]
	x29 = Mem0[sp:word64]
	sp = sp + 8
	x30 = Mem0[sp:word64]
	sp = sp + 32
	return
	// succ:  all_aliases_exit
all_aliases_exit:


// alias_expand_word
// Return size: 0
void alias_expand_word()
alias_expand_word_entry:
	// succ:  l0000000000459758
l0000000000459758:
	sp = fp
	sp = sp + -32
	Mem0[sp:word64] = x29
	sp = sp + 8
	Mem0[sp:word64] = x30
	x29 = x31 + 0x0000000000000000
	Mem0[sp + 16:word64] = x19
	call find_alias (retsize: 0;)
	x19 = x0
	branch x0 == 0x0000000000000000 l000000000045979C
	// succ:  l0000000000459770 l000000000045979C
l0000000000459770:
	x0 = Mem0[x0 + 8:word64]
	strlen(x0)
	sp = sp + 0xFFFFFFFFFFFFFFF8
	x1 = 0x00000000004AE000
	x1 = x1 + 0x00000000000006F8
	w2 = 0x00000114
	x0 = x0 + 0x0000000000000001
	call sh_xmalloc (retsize: 0;)
	x1 = Mem0[x19 + 8:word64]
	x19 = Mem0[sp + 16:word64]
	x29 = Mem0[sp:word64]
	sp = sp + 8
	x30 = Mem0[sp:word64]
	sp = sp + 32
	strcpy(x0, x1)
	return
	// succ:  alias_expand_word_exit
l000000000045979C:
	x19 = Mem0[sp + 16:word64]
	x29 = Mem0[sp:word64]
	sp = sp + 8
	x30 = Mem0[sp:word64]
	sp = sp + 32
	return
	// succ:  alias_expand_word_exit
alias_expand_word_exit:


// alias_expand
// Return size: 0
void alias_expand()
alias_expand_entry:
	// succ:  l00000000004597A8
l00000000004597A8:
	sp = fp
	sp = sp + -128
	Mem0[sp:word64] = x29
	sp = sp + 8
	Mem0[sp:word64] = x30
	x29 = x31 + 0x0000000000000000
	v8 = sp + 16
	Mem0[v8:word64] = x19
	v8 = v8 + 8
	Mem0[v8:word64] = x20
	v11 = sp + 32
	Mem0[v11:word64] = x21
	v11 = v11 + 8
	Mem0[v11:word64] = x22
	v14 = sp + 64
	Mem0[v14:word64] = x25
	v14 = v14 + 8
	Mem0[v14:word64] = x26
	v17 = sp + 80
	Mem0[v17:word64] = x27
	v17 = v17 + 8
	Mem0[v17:word64] = x28
	x20 = x0
	v21 = sp + 48
	Mem0[v21:word64] = x23
	v21 = v21 + 8
	Mem0[v21:word64] = x24
	strlen(x0)
	sp = sp + 0xFFFFFFFFFFFFFFF8
	w21 = w0 + 0x00000001
	x0 = 0x00000000004AE000
alias_expand_exit:


// array_walk
// Return size: 0
void array_walk()
array_walk_entry:
	// succ:  l0000000000459CF4
l0000000000459CF4:
	sp = fp
	sp = sp + -48
	Mem0[sp:word64] = x29
	sp = sp + 8
	Mem0[sp:word64] = x30
	x29 = x31 + 0x0000000000000000
	v8 = sp + 32
	Mem0[v8:word64] = x21
	v8 = v8 + 8
	Mem0[v8:word64] = x22
	v11 = sp + 16
	Mem0[v11:word64] = x19
	v11 = v11 + 8
	Mem0[v11:word64] = x20
	x21 = x1
	x20 = x0
	x22 = x2
	branch x0 == 0x0000000000000000 l0000000000459D50
	// succ:  l0000000000459D14 l0000000000459D50
l0000000000459D14:
	w0 = Mem0[x0 + 16:word32]
	branch w0 == 0x00000000 l0000000000459D50
	// succ:  l0000000000459D1C l0000000000459D50
l0000000000459D1C:
	x0 = Mem0[x20 + 24:word64]
	x19 = Mem0[x0 + 16:word64]
	x31 = x0 - x19
	NZCV = cond(x31)
	branch Test(NE,Z) l0000000000459D40
	// succ:  l0000000000459D2C l0000000000459D40
l0000000000459D2C:
	goto l0000000000459D50
	// succ:  l0000000000459D50
l0000000000459D30:
	x19 = Mem0[x19 + 16:word64]
	x3 = Mem0[x20 + 24:word64]
	x31 = x3 - x19
	NZCV = cond(x31)
	branch Test(EQ,Z) l0000000000459D50
	// succ:  l0000000000459D40 l0000000000459D50
l0000000000459D40:
	x1 = x22
	x0 = x19
	call x21 (retsize: 0;)
	branch (w0 & 0x00000000) == 0x00000000 l0000000000459D30
	// succ:  l0000000000459D50 l0000000000459D30
l0000000000459D50:
	v18 = sp + 16
	x19 = Mem0[v18:word64]
	v18 = v18 + 8
	x20 = Mem0[v18:word64]
	v19 = sp + 32
	x21 = Mem0[v19:word64]
	v19 = v19 + 8
	x22 = Mem0[v19:word64]
	x29 = Mem0[sp:word64]
	sp = sp + 8
	x30 = Mem0[sp:word64]
	sp = sp + 48
	return
	// succ:  array_walk_exit
array_walk_exit:


// array_quote
// Return size: 0
void array_quote()
array_quote_entry:
	// succ:  l0000000000459D60
l0000000000459D60:
	sp = fp
	sp = sp + -48
	Mem0[sp:word64] = x29
	sp = sp + 8
	Mem0[sp:word64] = x30
	x29 = x31 + 0x0000000000000000
	v8 = sp + 32
	Mem0[v8:word64] = x21
	v8 = v8 + 8
	Mem0[v8:word64] = x22
	v11 = sp + 16
	Mem0[v11:word64] = x19
	v11 = v11 + 8
	Mem0[v11:word64] = x20
	x21 = x0
	branch x0 == 0x0000000000000000 l0000000000459DD4
	// succ:  l0000000000459D78 l0000000000459DD4
l0000000000459D78:
	x0 = Mem0[x0 + 24:word64]
	branch x0 == 0x0000000000000000 l0000000000459DD8
	// succ:  l0000000000459D80 l0000000000459DD8
l0000000000459D80:
	w1 = Mem0[x21 + 16:word32]
	branch w1 == 0x00000000 l0000000000459DE8
	// succ:  l0000000000459D88 l0000000000459DE8
l0000000000459D88:
	x19 = Mem0[x0 + 16:word64]
	x22 = 0x00000000004AE000
	x31 = x0 - x19
	NZCV = cond(x31)
	x22 = x22 + 0x0000000000000720
	branch Test(EQ,Z) l0000000000459DD4
	// succ:  l0000000000459D9C l0000000000459DD4
l0000000000459D9C:
	x0 = Mem0[x19 + 8:word64]
	call quote_string (retsize: 0;)
	x3 = Mem0[x19 + 8:word64]
	x20 = x0
	x1 = x22
	x0 = x3
	w2 = 0x00000145
	branch x3 == 0x0000000000000000 l0000000000459DC0
	// succ:  l0000000000459DBC l0000000000459DC0
l0000000000459DBC:
	call sh_xfree (retsize: 0;)
	// succ:  l0000000000459DC0
l0000000000459DC0:
	Mem0[x19 + 8:word64] = x20
	x2 = Mem0[x21 + 24:word64]
	x19 = Mem0[x19 + 16:word64]
	x31 = x2 - x19
	NZCV = cond(x31)
	branch Test(NE,Z) l0000000000459D9C
	// succ:  l0000000000459DD4 l0000000000459D9C
l0000000000459DD4:
	x0 = x21
	// succ:  l0000000000459DD8
l0000000000459DD8:
	v20 = sp + 16
	x19 = Mem0[v20:word64]
	v20 = v20 + 8
	x20 = Mem0[v20:word64]
	v21 = sp + 32
	x21 = Mem0[v21:word64]
	v21 = v21 + 8
	x22 = Mem0[v21:word64]
	x29 = Mem0[sp:word64]
	sp = sp + 8
	x30 = Mem0[sp:word64]
	sp = sp + 48
	return
	// succ:  array_quote_exit
l0000000000459DE8:
	x0 = 0x0000000000000000
	goto l0000000000459DD8
	// succ:  l0000000000459DD8
array_quote_exit:


// array_quote_escapes
// Return size: 0
void array_quote_escapes()
array_quote_escapes_entry:
	// succ:  l0000000000459DF0
l0000000000459DF0:
	sp = fp
	sp = sp + -48
	Mem0[sp:word64] = x29
	sp = sp + 8
	Mem0[sp:word64] = x30
	x29 = x31 + 0x0000000000000000
	v8 = sp + 32
	Mem0[v8:word64] = x21
	v8 = v8 + 8
	Mem0[v8:word64] = x22
	v11 = sp + 16
	Mem0[v11:word64] = x19
	v11 = v11 + 8
	Mem0[v11:word64] = x20
	x21 = x0
	branch x0 == 0x0000000000000000 l0000000000459E64
	// succ:  l0000000000459E08 l0000000000459E64
l0000000000459E08:
	x0 = Mem0[x0 + 24:word64]
	branch x0 == 0x0000000000000000 l0000000000459E68
	// succ:  l0000000000459E10 l0000000000459E68
l0000000000459E10:
	w1 = Mem0[x21 + 16:word32]
	branch w1 == 0x00000000 l0000000000459E78
	// succ:  l0000000000459E18 l0000000000459E78
l0000000000459E18:
	x19 = Mem0[x0 + 16:word64]
	x22 = 0x00000000004AE000
	x31 = x0 - x19
	NZCV = cond(x31)
	x22 = x22 + 0x0000000000000720
	branch Test(EQ,Z) l0000000000459E64
	// succ:  l0000000000459E2C l0000000000459E64
l0000000000459E2C:
	x0 = Mem0[x19 + 8:word64]
	call quote_escapes (retsize: 0;)
	x3 = Mem0[x19 + 8:word64]
	x20 = x0
	x1 = x22
	x0 = x3
	w2 = 0x00000156
	branch x3 == 0x0000000000000000 l0000000000459E50
	// succ:  l0000000000459E4C l0000000000459E50
l0000000000459E4C:
	call sh_xfree (retsize: 0;)
	// succ:  l0000000000459E50
l0000000000459E50:
	Mem0[x19 + 8:word64] = x20
	x2 = Mem0[x21 + 24:word64]
	x19 = Mem0[x19 + 16:word64]
	x31 = x2 - x19
	NZCV = cond(x31)
	branch Test(NE,Z) l0000000000459E2C
	// succ:  l0000000000459E64 l0000000000459E2C
l0000000000459E64:
	x0 = x21
	// succ:  l0000000000459E68
l0000000000459E68:
	v20 = sp + 16
	x19 = Mem0[v20:word64]
	v20 = v20 + 8
	x20 = Mem0[v20:word64]
	v21 = sp + 32
	x21 = Mem0[v21:word64]
	v21 = v21 + 8
	x22 = Mem0[v21:word64]
	x29 = Mem0[sp:word64]
	sp = sp + 8
	x30 = Mem0[sp:word64]
	sp = sp + 48
	return
	// succ:  array_quote_escapes_exit
l0000000000459E78:
	x0 = 0x0000000000000000
	goto l0000000000459E68
	// succ:  l0000000000459E68
array_quote_escapes_exit:


// array_dequote
// Return size: 0
void array_dequote()
array_dequote_entry:
	// succ:  l0000000000459E80
l0000000000459E80:
	sp = fp
	sp = sp + -48
	Mem0[sp:word64] = x29
	sp = sp + 8
	Mem0[sp:word64] = x30
	x29 = x31 + 0x0000000000000000
	v8 = sp + 32
	Mem0[v8:word64] = x21
	v8 = v8 + 8
	Mem0[v8:word64] = x22
	v11 = sp + 16
	Mem0[v11:word64] = x19
	v11 = v11 + 8
	Mem0[v11:word64] = x20
	x21 = x0
	branch x0 == 0x0000000000000000 l0000000000459EF4
	// succ:  l0000000000459E98 l0000000000459EF4
l0000000000459E98:
	x0 = Mem0[x0 + 24:word64]
	branch x0 == 0x0000000000000000 l0000000000459EF8
	// succ:  l0000000000459EA0 l0000000000459EF8
l0000000000459EA0:
	w1 = Mem0[x21 + 16:word32]
	branch w1 == 0x00000000 l0000000000459F08
	// succ:  l0000000000459EA8 l0000000000459F08
l0000000000459EA8:
	x19 = Mem0[x0 + 16:word64]
	x22 = 0x00000000004AE000
	x31 = x0 - x19
	NZCV = cond(x31)
	x22 = x22 + 0x0000000000000720
	branch Test(EQ,Z) l0000000000459EF4
	// succ:  l0000000000459EBC l0000000000459EF4
l0000000000459EBC:
	x0 = Mem0[x19 + 8:word64]
	call dequote_string (retsize: 0;)
	x3 = Mem0[x19 + 8:word64]
	x20 = x0
	x1 = x22
	x0 = x3
	w2 = 0x00000167
	branch x3 == 0x0000000000000000 l0000000000459EE0
	// succ:  l0000000000459EDC l0000000000459EE0
l0000000000459EDC:
	call sh_xfree (retsize: 0;)
	// succ:  l0000000000459EE0
l0000000000459EE0:
	Mem0[x19 + 8:word64] = x20
	x2 = Mem0[x21 + 24:word64]
	x19 = Mem0[x19 + 16:word64]
	x31 = x2 - x19
	NZCV = cond(x31)
	branch Test(NE,Z) l0000000000459EBC
	// succ:  l0000000000459EF4 l0000000000459EBC
l0000000000459EF4:
	x0 = x21
	// succ:  l0000000000459EF8
l0000000000459EF8:
	v20 = sp + 16
	x19 = Mem0[v20:word64]
	v20 = v20 + 8
	x20 = Mem0[v20:word64]
	v21 = sp + 32
	x21 = Mem0[v21:word64]
	v21 = v21 + 8
	x22 = Mem0[v21:word64]
	x29 = Mem0[sp:word64]
	sp = sp + 8
	x30 = Mem0[sp:word64]
	sp = sp + 48
	return
	// succ:  array_dequote_exit
l0000000000459F08:
	x0 = 0x0000000000000000
	goto l0000000000459EF8
	// succ:  l0000000000459EF8
array_dequote_exit:


// array_dequote_escapes
// Return size: 0
void array_dequote_escapes()
array_dequote_escapes_entry:
	// succ:  l0000000000459F10
l0000000000459F10:
	sp = fp
	sp = sp + -48
	Mem0[sp:word64] = x29
	sp = sp + 8
	Mem0[sp:word64] = x30
	x29 = x31 + 0x0000000000000000
	v8 = sp + 32
	Mem0[v8:word64] = x21
	v8 = v8 + 8
	Mem0[v8:word64] = x22
	v11 = sp + 16
	Mem0[v11:word64] = x19
	v11 = v11 + 8
	Mem0[v11:word64] = x20
	x21 = x0
	branch x0 == 0x0000000000000000 l0000000000459F84
	// succ:  l0000000000459F28 l0000000000459F84
l0000000000459F28:
	x0 = Mem0[x0 + 24:word64]
	branch x0 == 0x0000000000000000 l0000000000459F88
	// succ:  l0000000000459F30 l0000000000459F88
l0000000000459F30:
	w1 = Mem0[x21 + 16:word32]
	branch w1 == 0x00000000 l0000000000459F98
	// succ:  l0000000000459F38 l0000000000459F98
l0000000000459F38:
	x19 = Mem0[x0 + 16:word64]
	x22 = 0x00000000004AE000
	x31 = x0 - x19
	NZCV = cond(x31)
	x22 = x22 + 0x0000000000000720
	branch Test(EQ,Z) l0000000000459F84
	// succ:  l0000000000459F4C l0000000000459F84
l0000000000459F4C:
	x0 = Mem0[x19 + 8:word64]
	call dequote_escapes (retsize: 0;)
	x3 = Mem0[x19 + 8:word64]
	x20 = x0
	x1 = x22
	x0 = x3
	w2 = 0x00000178
	branch x3 == 0x0000000000000000 l0000000000459F70
	// succ:  l0000000000459F6C l0000000000459F70
l0000000000459F6C:
	call sh_xfree (retsize: 0;)
	// succ:  l0000000000459F70
l0000000000459F70:
	Mem0[x19 + 8:word64] = x20
	x2 = Mem0[x21 + 24:word64]
	x19 = Mem0[x19 + 16:word64]
	x31 = x2 - x19
	NZCV = cond(x31)
	branch Test(NE,Z) l0000000000459F4C
	// succ:  l0000000000459F84 l0000000000459F4C
l0000000000459F84:
	x0 = x21
	// succ:  l0000000000459F88
l0000000000459F88:
	v20 = sp + 16
	x19 = Mem0[v20:word64]
	v20 = v20 + 8
	x20 = Mem0[v20:word64]
	v21 = sp + 32
	x21 = Mem0[v21:word64]
	v21 = v21 + 8
	x22 = Mem0[v21:word64]
	x29 = Mem0[sp:word64]
	sp = sp + 8
	x30 = Mem0[sp:word64]
	sp = sp + 48
	return
	// succ:  array_dequote_escapes_exit
l0000000000459F98:
	x0 = 0x0000000000000000
	goto l0000000000459F88
	// succ:  l0000000000459F88
array_dequote_escapes_exit:


// array_remove_quoted_nulls
// Return size: 0
void array_remove_quoted_nulls()
array_remove_quoted_nulls_entry:
	// succ:  l0000000000459FA0
l0000000000459FA0:
	sp = fp
	sp = sp + -32
	Mem0[sp:word64] = x29
	sp = sp + 8
	Mem0[sp:word64] = x30
	x29 = x31 + 0x0000000000000000
	v8 = sp + 16
	Mem0[v8:word64] = x19
	v8 = v8 + 8
	Mem0[v8:word64] = x20
	x20 = x0
	branch x0 == 0x0000000000000000 l0000000000459FEC
	// succ:  l0000000000459FB4 l0000000000459FEC
l0000000000459FB4:
	x0 = Mem0[x0 + 24:word64]
	branch x0 == 0x0000000000000000 l0000000000459FF0
	// succ:  l0000000000459FBC l0000000000459FF0
l0000000000459FBC:
	w1 = Mem0[x20 + 16:word32]
	branch w1 == 0x00000000 l0000000000459FFC
	// succ:  l0000000000459FC4 l0000000000459FFC
l0000000000459FC4:
	x19 = Mem0[x0 + 16:word64]
	x31 = x0 - x19
	NZCV = cond(x31)
	branch Test(EQ,Z) l0000000000459FEC
	// succ:  l0000000000459FD0 l0000000000459FEC
l0000000000459FD0:
	x0 = Mem0[x19 + 8:word64]
	call remove_quoted_nulls (retsize: 0;)
	Mem0[x19 + 8:word64] = x0
	x1 = Mem0[x20 + 24:word64]
	x19 = Mem0[x19 + 16:word64]
	x31 = x1 - x19
	NZCV = cond(x31)
	branch Test(NE,Z) l0000000000459FD0
	// succ:  l0000000000459FEC l0000000000459FD0
l0000000000459FEC:
	x0 = x20
	// succ:  l0000000000459FF0
l0000000000459FF0:
	v14 = sp + 16
	x19 = Mem0[v14:word64]
	v14 = v14 + 8
	x20 = Mem0[v14:word64]
	x29 = Mem0[sp:word64]
	sp = sp + 8
	x30 = Mem0[sp:word64]
	sp = sp + 32
	return
	// succ:  array_remove_quoted_nulls_exit
l0000000000459FFC:
	x0 = 0x0000000000000000
	goto l0000000000459FF0
	// succ:  l0000000000459FF0
array_remove_quoted_nulls_exit:


// array_create_element
// Return size: 0
void array_create_element()
array_create_element_entry:
	// succ:  l000000000045A004
l000000000045A004:
	sp = fp
	sp = sp + -48
	Mem0[sp:word64] = x29
	sp = sp + 8
	Mem0[sp:word64] = x30
	x29 = x31 + 0x0000000000000000
	v8 = sp + 32
	Mem0[v8:word64] = x21
	v8 = v8 + 8
	Mem0[v8:word64] = x22
	x21 = 0x00000000004AE000
	x21 = x21 + 0x0000000000000720
	v11 = sp + 16
	Mem0[v11:word64] = x19
	v11 = v11 + 8
	Mem0[v11:word64] = x20
	x22 = x0
	x20 = x1
	x0 = 0x0000000000000020
	x1 = x21
	w2 = 0x00000241
	call sh_xmalloc (retsize: 0;)
	Mem0[x0:word64] = x22
	x19 = x0
	x0 = x20
	branch x20 == 0x0000000000000000 l000000000045A060
	// succ:  l000000000045A044 l000000000045A060
l000000000045A044:
	strlen(x0)
	sp = sp + 0xFFFFFFFFFFFFFFF8
	x1 = x21
	w2 = 0x00000243
	x0 = x0 + 0x0000000000000001
	call sh_xmalloc (retsize: 0;)
	x1 = x20
	strcpy(x0, x1)
	sp = sp + 0xFFFFFFFFFFFFFFF8
	// succ:  l000000000045A060
l000000000045A060:
	Mem0[x19 + 8:word64] = x0
	Mem0[x19 + 24:word64] = 0x0000000000000000
	Mem0[x19 + 16:word64] = 0x0000000000000000
	x0 = x19
	v15 = sp + 32
	x21 = Mem0[v15:word64]
	v15 = v15 + 8
	x22 = Mem0[v15:word64]
	v16 = sp + 16
	x19 = Mem0[v16:word64]
	v16 = v16 + 8
	x20 = Mem0[v16:word64]
	x29 = Mem0[sp:word64]
	sp = sp + 8
	x30 = Mem0[sp:word64]
	sp = sp + 48
	return
	// succ:  array_create_element_exit
array_create_element_exit:


// array_create
// Return size: 0
void array_create()
array_create_entry:
	// succ:  l000000000045A080
l000000000045A080:
	sp = fp
	sp = sp + -32
	Mem0[sp:word64] = x29
	sp = sp + 8
	Mem0[sp:word64] = x30
	x29 = x31 + 0x0000000000000000
	x1 = 0x00000000004AE000
	w2 = 0x00000059
	x1 = x1 + 0x0000000000000720
	x0 = 0x0000000000000020
	Mem0[sp + 16:word64] = x19
	call sh_xmalloc (retsize: 0;)
	x19 = x0
	x0 = 0xFFFFFFFFFFFFFFFF
	Mem0[x19:word32] = 0x00000000
	Mem0[x19 + 8:word64] = x0
	Mem0[x19 + 16:word32] = 0x00000000
	x1 = 0x0000000000000000
	call array_create_element (retsize: 0;)
	Mem0[x0 + 16:word64] = x0
	Mem0[x0 + 24:word64] = x0
	Mem0[x19 + 24:word64] = x0
	x0 = x19
	x19 = Mem0[sp + 16:word64]
	x29 = Mem0[sp:word64]
	sp = sp + 8
	x30 = Mem0[sp:word64]
	sp = sp + 32
	return
	// succ:  array_create_exit
array_create_exit:


// array_copy
// Return size: 0
void array_copy()
array_copy_entry:
	goto l000000000045A0D8
	// succ:  l000000000045A0D8
l00000000004578E8_thunk_throw_to_top_level:
	call throw_to_top_level (retsize: 0;)
	return
	// succ:  array_copy_exit
l000000000045A0D8:
	sp = fp
	sp = sp + -48
	Mem0[sp:word64] = x29
	sp = sp + 8
	Mem0[sp:word64] = x30
	x29 = x31 + 0x0000000000000000
	v8 = sp + 16
	Mem0[v8:word64] = x19
	v8 = v8 + 8
	Mem0[v8:word64] = x20
	Mem0[sp + 32:word64] = x21
	x20 = x0
	branch x0 == 0x0000000000000000 l000000000045A158
	goto l000000000045A0F0
	// succ:  l000000000045A0F0 l000000000045A158
l000000000045A0D8:
	goto l00000000004578E8_thunk_throw_to_top_level
	// succ:  l00000000004578E8_thunk_throw_to_top_level
l000000000045A0F0:
	call array_create (retsize: 0;)
	x21 = x0
	x0 = Mem0[x20 + 24:word64]
	w3 = Mem0[x20:word32]
	x19 = Mem0[x0 + 16:word64]
	x2 = Mem0[x20 + 8:word64]
	w1 = Mem0[x20 + 16:word32]
	x31 = x0 - x19
	NZCV = cond(x31)
	Mem0[x21:word32] = w3
	Mem0[x21 + 8:word64] = x2
	Mem0[x21 + 16:word32] = w1
	branch Test(EQ,Z) l000000000045A154
	// succ:  l000000000045A120 l000000000045A154
l000000000045A120:
	x1 = Mem0[x19 + 8:word64]
	x0 = Mem0[x19:word64]
	call array_create_element (retsize: 0;)
	x1 = Mem0[x21 + 24:word64]
	x3 = Mem0[x20 + 24:word64]
	x2 = Mem0[x1 + 24:word64]
	Mem0[x2 + 16:word64] = x0
	Mem0[x0 + 24:word64] = x2
	Mem0[x1 + 24:word64] = x0
	Mem0[x0 + 16:word64] = x1
	x19 = Mem0[x19 + 16:word64]
	x31 = x3 - x19
	NZCV = cond(x31)
	branch Test(NE,Z) l000000000045A120
	// succ:  l000000000045A154 l000000000045A120
l000000000045A154:
	x0 = x21
	// succ:  l000000000045A158
l000000000045A158:
	v18 = sp + 16
	x19 = Mem0[v18:word64]
	v18 = v18 + 8
	x20 = Mem0[v18:word64]
	x21 = Mem0[sp + 32:word64]
	x29 = Mem0[sp:word64]
	sp = sp + 8
	x30 = Mem0[sp:word64]
	sp = sp + 48
	return
	// succ:  array_copy_exit
array_copy_exit:


// array_slice
// Return size: 0
void array_slice()
array_slice_entry:
	// succ:  l000000000045A168
l000000000045A168:
	sp = fp
	sp = sp + -48
	Mem0[sp:word64] = x29
	sp = sp + 8
	Mem0[sp:word64] = x30
	x29 = x31 + 0x0000000000000000
	v8 = sp + 16
	Mem0[v8:word64] = x19
	v8 = v8 + 8
	Mem0[v8:word64] = x20
	v11 = sp + 32
	Mem0[v11:word64] = x21
	v11 = v11 + 8
	Mem0[v11:word64] = x22
	x20 = x0
	x19 = x1
	x22 = x2
	call array_create (retsize: 0;)
	x21 = x0
	w0 = Mem0[x20:word32]
	x31 = x19 - x22
	NZCV = cond(x31)
	Mem0[x21:word32] = w0
	branch Test(EQ,Z) l000000000045A1F4
	// succ:  l000000000045A19C l000000000045A1F4
l000000000045A19C:
	w20 = 0x00000000
	// succ:  l000000000045A1A0
l000000000045A1A0:
	x1 = Mem0[x19 + 8:word64]
	x0 = Mem0[x19:word64]
	w20 = w20 + 0x00000001
	call array_create_element (retsize: 0;)
	x1 = Mem0[x21 + 24:word64]
	x2 = Mem0[x0:word64]
	x3 = Mem0[x1 + 24:word64]
	Mem0[x3 + 16:word64] = x0
	Mem0[x0 + 24:word64] = x3
	Mem0[x1 + 24:word64] = x0
	Mem0[x0 + 16:word64] = x1
	x19 = Mem0[x19 + 16:word64]
	x31 = x22 - x19
	NZCV = cond(x31)
	branch Test(NE,Z) l000000000045A1A0
	// succ:  l000000000045A1D8 l000000000045A1A0
l000000000045A1D8:
	Mem0[x21 + 16:word32] = w20
	Mem0[x21 + 8:word64] = x2
	x0 = x21
	v20 = sp + 16
	x19 = Mem0[v20:word64]
	v20 = v20 + 8
	x20 = Mem0[v20:word64]
	v21 = sp + 32
	x21 = Mem0[v21:word64]
	v21 = v21 + 8
	x22 = Mem0[v21:word64]
	x29 = Mem0[sp:word64]
	sp = sp + 8
	x30 = Mem0[sp:word64]
	sp = sp + 48
	return
	// succ:  array_slice_exit
l000000000045A1F4:
	x2 = 0x0000000000000000
	w20 = w2
	goto l000000000045A1D8
	// succ:  l000000000045A1D8
array_slice_exit:


// array_rshift
// Return size: 0
void array_rshift()
array_rshift_entry:
	// succ:  l000000000045A200
l000000000045A200:
	sp = fp
	sp = sp + -48
	Mem0[sp:word64] = x29
	sp = sp + 8
	Mem0[sp:word64] = x30
	x29 = x31 + 0x0000000000000000
	v8 = sp + 16
	Mem0[v8:word64] = x19
	v8 = v8 + 8
	Mem0[v8:word64] = x20
	Mem0[sp + 32:word64] = x21
	x20 = x0
	w21 = w1
	branch x0 == 0x0000000000000000 l000000000045A2D0
	// succ:  l000000000045A21C l000000000045A2D0
l000000000045A21C:
	w0 = Mem0[x0 + 16:word32]
	branch w0 == 0x00000000 l000000000045A2C8
	// succ:  l000000000045A224 l000000000045A2C8
l000000000045A224:
	NZCV = cond(w21 - w31)
	branch Test(LE,ZCV) l000000000045A2B8
	// succ:  l000000000045A22C l000000000045A2B8
l000000000045A22C:
	x3 = Mem0[x20 + 24:word64]
	x19 = Mem0[x3 + 16:word64]
	branch x2 == 0x0000000000000000 l000000000045A274
	// succ:  l000000000045A238 l000000000045A274
l000000000045A238:
	x1 = x2
	x0 = 0x0000000000000000
	call array_create_element (retsize: 0;)
	x2 = Mem0[x19 + 24:word64]
	x1 = x0
	w0 = Mem0[x20 + 16:word32]
	Mem0[x2 + 16:word64] = x1
	Mem0[x1 + 24:word64] = x2
	Mem0[x19 + 24:word64] = x1
	w0 = w0 + 0x00000001
	Mem0[x1 + 16:word64] = x19
	Mem0[x20 + 16:word32] = w0
	w31 = w0 - 0x00000001
	NZCV = cond(w31)
	branch Test(EQ,Z) l000000000045A2E0
	// succ:  l000000000045A270 l000000000045A2E0
l000000000045A270:
	x3 = Mem0[x20 + 24:word64]
	// succ:  l000000000045A274
l000000000045A274:
	x31 = x19 - x3
	NZCV = cond(x31)
l000000000045A2B8:
	v22 = sp + 16
	x19 = Mem0[v22:word64]
	v22 = v22 + 8
	x20 = Mem0[v22:word64]
	x21 = Mem0[sp + 32:word64]
	x29 = Mem0[sp:word64]
	sp = sp + 8
	x30 = Mem0[sp:word64]
	sp = sp + 48
	return
	// succ:  array_rshift_exit
l000000000045A2C8:
	branch x2 != 0x0000000000000000 l000000000045A224
	// succ:  l000000000045A2CC l000000000045A224
l000000000045A2CC:
	goto l000000000045A2B8
	// succ:  l000000000045A2B8
l000000000045A2D0:
	v21 = sp + 16
	x19 = Mem0[v21:word64]
	v21 = v21 + 8
	x20 = Mem0[v21:word64]
	x21 = Mem0[sp + 32:word64]
	x29 = Mem0[sp:word64]
	sp = sp + 8
	x30 = Mem0[sp:word64]
	sp = sp + 48
	return
	// succ:  array_rshift_exit
l000000000045A2E0:
	Mem0[x20 + 8:word64] = 0x0000000000000000
	goto l000000000045A2B8
	// succ:  l000000000045A2B8
array_rshift_exit:


// array_shift_element
// Return size: 0
void array_shift_element()
array_shift_element_entry:
	// succ:  l000000000045A2F4
l000000000045A2F4:
	sp = fp
	x2 = x1
	w1 = 0x00000001
	// succ:  l000000000045A2FC_thunk_array_rshift
l000000000045A2FC_thunk_array_rshift:
	call array_rshift (retsize: 0;)
	return
	// succ:  array_shift_element_exit
array_shift_element_exit:


// array_dispose_element
// Return size: 0
void array_dispose_element()
array_dispose_element_entry:
	// succ:  l000000000045A300
l000000000045A300:
	sp = fp
	sp = sp + -32
	Mem0[sp:word64] = x29
	sp = sp + 8
	Mem0[sp:word64] = x30
	x29 = x31 + 0x0000000000000000
	v8 = sp + 16
	Mem0[v8:word64] = x19
	v8 = v8 + 8
	Mem0[v8:word64] = x20
	x19 = x0
	branch x0 == 0x0000000000000000 l000000000045A344
	// succ:  l000000000045A314 l000000000045A344
l000000000045A314:
	x0 = Mem0[x0 + 8:word64]
	x20 = 0x00000000004AE000
	branch x0 == 0x0000000000000000 l000000000045A32C
	// succ:  l000000000045A320 l000000000045A32C
l000000000045A320:
	x1 = x20 + 0x0000000000000720
	w2 = 0x00000257
	call sh_xfree (retsize: 0;)
	// succ:  l000000000045A32C
l000000000045A32C:
	x0 = x19
	x1 = x20 + 0x0000000000000720
	v13 = sp + 16
	x19 = Mem0[v13:word64]
	v13 = v13 + 8
	x20 = Mem0[v13:word64]
	x29 = Mem0[sp:word64]
	sp = sp + 8
	x30 = Mem0[sp:word64]
	sp = sp + 32
	w2 = 0x00000258
	// succ:  l000000000045A340_thunk_sh_xfree
l000000000045A340_thunk_sh_xfree:
	call sh_xfree (retsize: 0;)
	return
	// succ:  array_dispose_element_exit
l000000000045A344:
	v12 = sp + 16
	x19 = Mem0[v12:word64]
	v12 = v12 + 8
	x20 = Mem0[v12:word64]
	x29 = Mem0[sp:word64]
	sp = sp + 8
	x30 = Mem0[sp:word64]
	sp = sp + 32
	return
	// succ:  array_dispose_element_exit
array_dispose_element_exit:


// array_flush
// Return size: 0
void array_flush()
array_flush_entry:
	// succ:  l000000000045A350
l000000000045A350:
	sp = fp
	sp = sp + -32
	Mem0[sp:word64] = x29
	sp = sp + 8
	Mem0[sp:word64] = x30
	x29 = x31 + 0x0000000000000000
	v8 = sp + 16
	Mem0[v8:word64] = x19
	v8 = v8 + 8
	Mem0[v8:word64] = x20
	x20 = x0
	branch x0 == 0x0000000000000000 l000000000045A3B8
	// succ:  l000000000045A364 l000000000045A3B8
l000000000045A364:
	x2 = Mem0[x0 + 24:word64]
	x1 = Mem0[x2 + 16:word64]
	x31 = x2 - x1
	NZCV = cond(x31)
	branch Test(EQ,Z) l000000000045A390
	// succ:  l000000000045A374 l000000000045A390
l000000000045A374:
	x0 = x1
	x19 = Mem0[x1 + 16:word64]
	call array_dispose_element (retsize: 0;)
	x2 = Mem0[x20 + 24:word64]
	x1 = x19
	x31 = x2 - x19
	NZCV = cond(x31)
	branch Test(NE,Z) l000000000045A374
	// succ:  l000000000045A390 l000000000045A374
l000000000045A390:
	x0 = 0x00000000004E1000
	x0 = x0 + 0x0000000000000420
	x1 = Mem0[x0:word64]
	Mem0[x2 + 24:word64] = x2
	Mem0[x2 + 16:word64] = x2
	x2 = 0xFFFFFFFFFFFFFFFF
	Mem0[x20 + 8:word64] = x2
	Mem0[x20 + 16:word32] = 0x00000000
	x31 = x20 - x1
	NZCV = cond(x31)
	branch Test(EQ,Z) l000000000045A3C4
	// succ:  l000000000045A3B8 l000000000045A3C4
l000000000045A3B8:
	v14 = sp + 16
	x19 = Mem0[v14:word64]
	v14 = v14 + 8
	x20 = Mem0[v14:word64]
	x29 = Mem0[sp:word64]
	sp = sp + 8
	x30 = Mem0[sp:word64]
	sp = sp + 32
	return
	// succ:  array_flush_exit
l000000000045A3C4:
	Mem0[x0:word64] = 0x0000000000000000
	Mem0[x0 + 8:word64] = 0x0000000000000000
	v15 = sp + 16
	x19 = Mem0[v15:word64]
	v15 = v15 + 8
	x20 = Mem0[v15:word64]
	x29 = Mem0[sp:word64]
	sp = sp + 8
	x30 = Mem0[sp:word64]
	sp = sp + 32
	return
	// succ:  array_flush_exit
array_flush_exit:


// array_dispose
// Return size: 0
void array_dispose()
array_dispose_entry:
	// succ:  l000000000045A3D8
l000000000045A3D8:
	sp = fp
	sp = sp + -32
	Mem0[sp:word64] = x29
	sp = sp + 8
	Mem0[sp:word64] = x30
	x29 = x31 + 0x0000000000000000
	Mem0[sp + 16:word64] = x19
	x19 = x0
	branch x0 == 0x0000000000000000 l000000000045A414
	// succ:  l000000000045A3EC l000000000045A414
l000000000045A3EC:
	call array_flush (retsize: 0;)
	x0 = Mem0[x19 + 24:word64]
	call array_dispose_element (retsize: 0;)
	x0 = x19
	x1 = 0x00000000004AE000
	x19 = Mem0[sp + 16:word64]
	x29 = Mem0[sp:word64]
	sp = sp + 8
	x30 = Mem0[sp:word64]
	sp = sp + 32
	x1 = x1 + 0x0000000000000720
	w2 = 0x0000007E
	// succ:  l000000000045A410_thunk_sh_xfree
l000000000045A410_thunk_sh_xfree:
	call sh_xfree (retsize: 0;)
	return
	// succ:  array_dispose_exit
l000000000045A414:
	x19 = Mem0[sp + 16:word64]
	x29 = Mem0[sp:word64]
	sp = sp + 8
	x30 = Mem0[sp:word64]
	sp = sp + 32
	return
	// succ:  array_dispose_exit
array_dispose_exit:


// array_shift
// Return size: 0
void array_shift()
array_shift_entry:
	// succ:  l000000000045A420
l000000000045A420:
	sp = fp
	sp = sp + -32
	Mem0[sp:word64] = x29
	sp = sp + 8
	Mem0[sp:word64] = x30
	x29 = x31 + 0x0000000000000000
	Mem0[sp + 16:word64] = x19
	x7 = x0
	branch x0 == 0x0000000000000000 l000000000045A4DC
	// succ:  l000000000045A434 l000000000045A4DC
l000000000045A434:
	w8 = Mem0[x0 + 16:word32]
	branch w8 == 0x00000000 l000000000045A4DC
	// succ:  l000000000045A43C l000000000045A4DC
l000000000045A43C:
	NZCV = cond(w1 - w31)
	branch Test(LE,ZCV) l000000000045A4DC
	// succ:  l000000000045A444 l000000000045A4DC
l000000000045A444:
	x0 = 0x00000000004E1000
	x0 = x0 + 0x0000000000000420
	x3 = Mem0[x0:word64]
	x31 = x7 - x3
	NZCV = cond(x31)
	branch Test(EQ,Z) l000000000045A4F0
	// succ:  l000000000045A458 l000000000045A4F0
l000000000045A458:
	x5 = Mem0[x7 + 24:word64]
	x0 = Mem0[x5 + 16:word64]
	x31 = x5 - x0
	NZCV = cond(x31)
	branch Test(EQ,Z) l000000000045A48C
	// succ:  l000000000045A468 l000000000045A48C
l000000000045A468:
	x3 = x0
	w4 = 0x00000000
	goto l000000000045A47C
	// succ:  l000000000045A47C
l000000000045A474:
	NZCV = cond(w4 - w1)
	branch Test(EQ,Z) l000000000045A4FC
	// succ:  l000000000045A47C l000000000045A4FC
l000000000045A47C:
	x3 = Mem0[x3 + 16:word64]
	w4 = w4 + 0x00000001
	x31 = x5 - x3
	NZCV = cond(x31)
	branch Test(NE,Z) l000000000045A474
	// succ:  l000000000045A48C l000000000045A474
l000000000045A48C:
	x3 = x0
	branch (w2 & 0x00000001) == 0x00000000 l000000000045A49C
	// succ:  l000000000045A494 l000000000045A49C
l000000000045A494:
	goto l000000000045A4D4
	// succ:  l000000000045A4D4
l000000000045A498:
	x3 = x1
	// succ:  l000000000045A49C
l000000000045A49C:
	x1 = Mem0[x3 + 16:word64]
	x31 = x5 - x1
	NZCV = cond(x31)
	branch Test(NE,Z) l000000000045A498
	// succ:  l000000000045A4A8 l000000000045A498
l000000000045A4A8:
	Mem0[x3 + 16:word64] = 0x0000000000000000
	Mem0[x5 + 24:word64] = x5
	Mem0[x5 + 16:word64] = x5
	x1 = 0xFFFFFFFFFFFFFFFF
	Mem0[x7 + 8:word64] = x1
	Mem0[x7 + 16:word32] = 0x00000000
	x1 = x0
	x0 = x1
	x19 = Mem0[sp + 16:word64]
	x29 = Mem0[sp:word64]
	sp = sp + 8
	x30 = Mem0[sp:word64]
	sp = sp + 32
	return
	// succ:  array_shift_exit
l000000000045A4D4:
	x0 = x7
	call array_flush (retsize: 0;)
	// succ:  l000000000045A4DC
l000000000045A4DC:
	x1 = 0x0000000000000000
	x0 = x1
	x19 = Mem0[sp + 16:word64]
	x29 = Mem0[sp:word64]
	sp = sp + 8
	x30 = Mem0[sp:word64]
	sp = sp + 32
	return
	// succ:  array_shift_exit
l000000000045A4F0:
	Mem0[x0:word64] = 0x0000000000000000
	Mem0[x0 + 8:word64] = 0x0000000000000000
	goto l000000000045A458
	// succ:  l000000000045A458
l000000000045A4FC:
	x4 = Mem0[x3 + 24:word64]
array_shift_exit:


// array_unshift_element
// Return size: 0
void array_unshift_element()
array_unshift_element_entry:
	// succ:  l000000000045A560
l000000000045A560:
	sp = fp
	w1 = 0x00000001
	w2 = 0x00000000
	// succ:  l000000000045A568_thunk_array_shift
l000000000045A568_thunk_array_shift:
	call array_shift (retsize: 0;)
	return
	// succ:  array_unshift_element_exit
array_unshift_element_exit:


// array_insert
// Return size: 0
void array_insert()
array_insert_entry:
	// succ:  l000000000045A56C
l000000000045A56C:
	sp = fp
	sp = sp + -48
	Mem0[sp:word64] = x29
	sp = sp + 8
	Mem0[sp:word64] = x30
	x29 = x31 + 0x0000000000000000
	v8 = sp + 32
	Mem0[v8:word64] = x21
	v8 = v8 + 8
	Mem0[v8:word64] = x22
	v11 = sp + 16
	Mem0[v11:word64] = x19
	v11 = v11 + 8
	Mem0[v11:word64] = x20
	x21 = x0
	x20 = x1
	x22 = x2
	branch x0 == 0x0000000000000000 l000000000045A600
	// succ:  l000000000045A58C l000000000045A600
l000000000045A58C:
	x0 = x1
	x1 = x2
	call array_create_element (retsize: 0;)
	x1 = Mem0[x21 + 8:word64]
	x31 = x20 - x1
	NZCV = cond(x31)
	branch Test(GT,NZV) l000000000045A614
	// succ:  l000000000045A5A4 l000000000045A614
l000000000045A5A4:
	x4 = Mem0[x21 + 24:word64]
	x19 = Mem0[x4 + 16:word64]
	x31 = x4 - x19
	NZCV = cond(x31)
	branch Test(EQ,Z) l000000000045A5EC
	// succ:  l000000000045A5B4 l000000000045A5EC
l000000000045A5B4:
	x1 = Mem0[x19:word64]
	x31 = x1 - x20
	NZCV = cond(x31)
	branch Test(EQ,Z) l000000000045A660
	// succ:  l000000000045A5C0 l000000000045A660
l000000000045A5C0:
	x31 = x20 - x1
	NZCV = cond(x31)
	branch Test(GE,NZV) l000000000045A5E0
	// succ:  l000000000045A5C8 l000000000045A5E0
l000000000045A5C8:
	goto l000000000045A6C8
	// succ:  l000000000045A6C8
l000000000045A5CC:
	x3 = Mem0[x19:word64]
	x31 = x3 - x20
	NZCV = cond(x31)
	branch Test(EQ,Z) l000000000045A660
	// succ:  l000000000045A5D8 l000000000045A660
l000000000045A5D8:
	x31 = x20 - x3
	NZCV = cond(x31)
	branch Test(LT,NV) l000000000045A6C8
	// succ:  l000000000045A5E0 l000000000045A6C8
l000000000045A5E0:
	x19 = Mem0[x19 + 16:word64]
	x31 = x4 - x19
	NZCV = cond(x31)
	branch Test(NE,Z) l000000000045A5CC
	// succ:  l000000000045A5EC l000000000045A5CC
l000000000045A5EC:
	x0 = 0x00000000004E1000
	x0 = x0 + 0x0000000000000420
	x1 = Mem0[x0:word64]
	x31 = x21 - x1
	NZCV = cond(x31)
	branch Test(EQ,Z) l000000000045A70C
	// succ:  l000000000045A600 l000000000045A70C
l000000000045A600:
	w0 = 0xFFFFFFFF
	v20 = sp + 16
	x19 = Mem0[v20:word64]
	v20 = v20 + 8
	x20 = Mem0[v20:word64]
	v21 = sp + 32
	x21 = Mem0[v21:word64]
	v21 = v21 + 8
	x22 = Mem0[v21:word64]
	x29 = Mem0[sp:word64]
	sp = sp + 8
	x30 = Mem0[sp:word64]
	sp = sp + 48
	return
	// succ:  array_insert_exit
l000000000045A614:
	x1 = Mem0[x21 + 24:word64]
	w3 = Mem0[x21 + 16:word32]
	x2 = Mem0[x1 + 24:word64]
	Mem0[x2 + 16:word64] = x0
	Mem0[x0 + 24:word64] = x2
	Mem0[x1 + 24:word64] = x0
	Mem0[x0 + 16:word64] = x1
	x1 = 0x00000000004E1000
	x1 = x1 + 0x0000000000000420
	w2 = w3 + 0x00000001
	Mem0[x21 + 8:word64] = x20
	Mem0[x21 + 16:word32] = w2
	Mem0[x1:word64] = x21
	Mem0[x1 + 8:word64] = x0
	v30 = sp + 16
	x19 = Mem0[v30:word64]
	v30 = v30 + 8
	x20 = Mem0[v30:word64]
	w0 = 0x00000000
	v31 = sp + 32
	x21 = Mem0[v31:word64]
	v31 = v31 + 8
	x22 = Mem0[v31:word64]
	x29 = Mem0[sp:word64]
	sp = sp + 8
	x30 = Mem0[sp:word64]
	sp = sp + 48
	return
	// succ:  array_insert_exit
l000000000045A660:
	call array_dispose_element (retsize: 0;)
	x20 = 0x00000000004AE000
	x0 = Mem0[x19 + 8:word64]
	x20 = x20 + 0x0000000000000720
	x1 = x20
	w2 = 0x0000027F
	call sh_xfree (retsize: 0;)
	x0 = x22
	branch x22 == 0x0000000000000000 l000000000045A6A0
	// succ:  l000000000045A684 l000000000045A6A0
l000000000045A684:
	strlen(x0)
	sp = sp + 0xFFFFFFFFFFFFFFF8
	x1 = x20
	w2 = 0x00000280
	x0 = x0 + 0x0000000000000001
	call sh_xmalloc (retsize: 0;)
	x1 = x22
	strcpy(x0, x1)
	sp = sp + 0xFFFFFFFFFFFFFFF8
	// succ:  l000000000045A6A0
l000000000045A6A0:
	x1 = 0x00000000004E1000
	x1 = x1 + 0x0000000000000420
	Mem0[x19 + 8:word64] = x0
	Mem0[x1:word64] = x21
	Mem0[x1 + 8:word64] = x19
	w0 = 0x00000000
	v25 = sp + 16
	x19 = Mem0[v25:word64]
	v25 = v25 + 8
	x20 = Mem0[v25:word64]
	v26 = sp + 32
	x21 = Mem0[v26:word64]
	v26 = v26 + 8
	x22 = Mem0[v26:word64]
	x29 = Mem0[sp:word64]
	sp = sp + 8
	x30 = Mem0[sp:word64]
	sp = sp + 48
	return
	// succ:  array_insert_exit
l000000000045A6C8:
	x1 = Mem0[x19 + 24:word64]
	w2 = Mem0[x21 + 16:word32]
	Mem0[x1 + 16:word64] = x0
	Mem0[x0 + 24:word64] = x1
	Mem0[x19 + 24:word64] = x0
	x1 = 0x00000000004E1000
	Mem0[x0 + 16:word64] = x19
	x1 = x1 + 0x0000000000000420
	w2 = w2 + 0x00000001
	Mem0[x21 + 16:word32] = w2
	Mem0[x1:word64] = x21
	Mem0[x1 + 8:word64] = x0
	v23 = sp + 16
	x19 = Mem0[v23:word64]
	v23 = v23 + 8
	x20 = Mem0[v23:word64]
	w0 = 0x00000000
	v24 = sp + 32
	x21 = Mem0[v24:word64]
	v24 = v24 + 8
	x22 = Mem0[v24:word64]
	x29 = Mem0[sp:word64]
	sp = sp + 8
	x30 = Mem0[sp:word64]
	sp = sp + 48
	return
	// succ:  array_insert_exit
l000000000045A70C:
	Mem0[x0:word64] = 0x0000000000000000
	Mem0[x0 + 8:word64] = 0x0000000000000000
	goto l000000000045A600
	// succ:  l000000000045A600
array_insert_exit:


// array_remove
// Return size: 0
void array_remove()
array_remove_entry:
	// succ:  l000000000045A718
l000000000045A718:
	sp = fp
	branch x0 == 0x0000000000000000 l000000000045A7B0
	// succ:  l000000000045A71C l000000000045A7B0
l000000000045A71C:
	w5 = Mem0[x0 + 16:word32]
	branch w5 == 0x00000000 l000000000045A798
	// succ:  l000000000045A724 l000000000045A798
l000000000045A724:
	x4 = Mem0[x0 + 24:word64]
	x2 = Mem0[x4 + 16:word64]
	x31 = x4 - x2
	NZCV = cond(x31)
	branch Test(NE,Z) l000000000045A744
	// succ:  l000000000045A734 l000000000045A744
l000000000045A734:
	goto l000000000045A798
	// succ:  l000000000045A798
l000000000045A738:
	x2 = Mem0[x2 + 16:word64]
	x31 = x4 - x2
	NZCV = cond(x31)
	branch Test(EQ,Z) l000000000045A798
	// succ:  l000000000045A744 l000000000045A798
l000000000045A744:
	x3 = Mem0[x2:word64]
	x31 = x3 - x1
	NZCV = cond(x31)
	branch Test(NE,Z) l000000000045A738
	// succ:  l000000000045A750 l000000000045A738
l000000000045A750:
	x4 = Mem0[x2 + 24:word64]
	x3 = Mem0[x2 + 16:word64]
	x6 = Mem0[x0 + 8:word64]
	Mem0[x3 + 24:word64] = x4
	x4 = Mem0[x2 + 24:word64]
	w5 = w5 - 0x00000001
	Mem0[x4 + 16:word64] = x3
	Mem0[x0 + 16:word32] = w5
	x31 = x6 - x1
	NZCV = cond(x31)
	branch Test(EQ,Z) l000000000045A7A4
	// succ:  l000000000045A778 l000000000045A7A4
l000000000045A778:
	x1 = 0x00000000004E1000
	x1 = x1 + 0x0000000000000420
	x3 = Mem0[x1:word64]
	x31 = x0 - x3
	NZCV = cond(x31)
	branch Test(NE,Z) l000000000045A79C
	// succ:  l000000000045A78C l000000000045A79C
l000000000045A78C:
	Mem0[x1:word64] = 0x0000000000000000
	Mem0[x1 + 8:word64] = 0x0000000000000000
	goto l000000000045A79C
	// succ:  l000000000045A79C
l000000000045A798:
	x2 = 0x0000000000000000
	// succ:  l000000000045A79C
l000000000045A79C:
	x0 = x2
	return
	// succ:  array_remove_exit
l000000000045A7A4:
	x1 = Mem0[x4:word64]
	Mem0[x0 + 8:word64] = x1
	goto l000000000045A778
	// succ:  l000000000045A778
l000000000045A7B0:
	x2 = x0
	goto l000000000045A79C
	// succ:  l000000000045A79C
array_remove_exit:


// array_reference
// Return size: 0
void array_reference()
array_reference_entry:
	// succ:  l000000000045A7B8
l000000000045A7B8:
	sp = fp
	branch x0 == 0x0000000000000000 l000000000045A820
	// succ:  l000000000045A7BC l000000000045A820
l000000000045A7BC:
	w2 = Mem0[x0 + 16:word32]
	branch w2 == 0x00000000 l000000000045A838
	// succ:  l000000000045A7C4 l000000000045A838
l000000000045A7C4:
	x2 = Mem0[x0 + 8:word64]
	x31 = x2 - x1
	NZCV = cond(x31)
	branch Test(LT,NV) l000000000045A838
	// succ:  l000000000045A7D0 l000000000045A838
l000000000045A7D0:
	x5 = 0x00000000004E1000
	x3 = x5 + 0x0000000000000420
	x2 = Mem0[x3 + 8:word64]
	branch x2 == 0x0000000000000000 l000000000045A7EC
	// succ:  l000000000045A7E0 l000000000045A7EC
l000000000045A7E0:
	x3 = Mem0[x3:word64]
	x31 = x0 - x3
	NZCV = cond(x31)
	branch Test(EQ,Z) l000000000045A840
	// succ:  l000000000045A7EC l000000000045A840
l000000000045A7EC:
	x4 = Mem0[x0 + 24:word64]
	x2 = Mem0[x4 + 16:word64]
	goto l000000000045A808
	// succ:  l000000000045A808
l000000000045A7F8:
	x3 = Mem0[x2:word64]
	x31 = x3 - x1
	NZCV = cond(x31)
	branch Test(EQ,Z) l000000000045A824
	// succ:  l000000000045A804 l000000000045A824
l000000000045A804:
	x2 = Mem0[x2 + 16:word64]
	// succ:  l000000000045A808
l000000000045A808:
	x31 = x4 - x2
	NZCV = cond(x31)
	branch Test(NE,Z) l000000000045A7F8
	// succ:  l000000000045A810 l000000000045A7F8
l000000000045A810:
	x5 = x5 + 0x0000000000000420
	Mem0[x5:word64] = 0x0000000000000000
	Mem0[x5 + 8:word64] = 0x0000000000000000
	x0 = 0x0000000000000000
	// succ:  l000000000045A820
l000000000045A820:
	return
	// succ:  array_reference_exit
l000000000045A824:
	x5 = x5 + 0x0000000000000420
	Mem0[x5:word64] = x0
	Mem0[x5 + 8:word64] = x2
	x0 = Mem0[x2 + 8:word64]
	return
	// succ:  array_reference_exit
l000000000045A838:
	x0 = 0x0000000000000000
	return
	// succ:  array_reference_exit
l000000000045A840:
	x3 = Mem0[x2:word64]
	x31 = x1 - x3
	NZCV = cond(x31)
	branch Test(LT,NV) l000000000045A7EC
	// succ:  l000000000045A84C l000000000045A7EC
l000000000045A84C:
	x4 = Mem0[x0 + 24:word64]
	goto l000000000045A808
	// succ:  l000000000045A808
array_reference_exit:


// array_to_word_list
// Return size: 0
void array_to_word_list()
array_to_word_list_entry:
	// succ:  l000000000045A854
l000000000045A854:
	sp = fp
	sp = sp + -48
	Mem0[sp:word64] = x29
	sp = sp + 8
	Mem0[sp:word64] = x30
	x29 = x31 + 0x0000000000000000
	v8 = sp + 16
	Mem0[v8:word64] = x19
	v8 = v8 + 8
	Mem0[v8:word64] = x20
	x20 = x0
	branch x0 == 0x0000000000000000 l000000000045A8C4
	// succ:  l000000000045A868 l000000000045A8C4
l000000000045A868:
	w0 = Mem0[x0 + 16:word32]
	branch w0 == 0x00000000 l000000000045A8C4
	// succ:  l000000000045A870 l000000000045A8C4
l000000000045A870:
	x0 = Mem0[x20 + 24:word64]
	x19 = Mem0[x0 + 16:word64]
	x31 = x0 - x19
	NZCV = cond(x31)
	branch Test(EQ,Z) l000000000045A8C4
	// succ:  l000000000045A880 l000000000045A8C4
l000000000045A880:
	x1 = 0x0000000000000000
	// succ:  l000000000045A884
l000000000045A884:
	x0 = Mem0[x19 + 8:word64]
	Mem0[x29 + 32:word64] = x1
	call make_bare_word (retsize: 0;)
	x1 = Mem0[x29 + 32:word64]
	call make_word_list (retsize: 0;)
	x2 = Mem0[x20 + 24:word64]
	x19 = Mem0[x19 + 16:word64]
	x1 = x0
	x31 = x2 - x19
	NZCV = cond(x31)
	branch Test(NE,Z) l000000000045A884
	// succ:  l000000000045A8AC l000000000045A884
l000000000045A8AC:
	branch x0 == 0x0000000000000000 l000000000045A8C4
	// succ:  l000000000045A8B0 l000000000045A8C4
l000000000045A8B0:
	x2 = Mem0[x0:word64]
	branch x2 == 0x0000000000000000 l000000000045A8C8
	// succ:  l000000000045A8B8 l000000000045A8C8
l000000000045A8B8:
	v15 = sp + 16
	x19 = Mem0[v15:word64]
	v15 = v15 + 8
	x20 = Mem0[v15:word64]
	x29 = Mem0[sp:word64]
	sp = sp + 8
	x30 = Mem0[sp:word64]
	sp = sp + 48
	// succ:  l000000000045A8C0_thunk_list_reverse
l000000000045A8C0_thunk_list_reverse:
	call list_reverse (retsize: 0;)
	return
	// succ:  array_to_word_list_exit
l000000000045A8C4:
	x0 = 0x0000000000000000
	// succ:  l000000000045A8C8
l000000000045A8C8:
	v16 = sp + 16
	x19 = Mem0[v16:word64]
	v16 = v16 + 8
	x20 = Mem0[v16:word64]
	x29 = Mem0[sp:word64]
	sp = sp + 8
	x30 = Mem0[sp:word64]
	sp = sp + 48
	return
	// succ:  array_to_word_list_exit
array_to_word_list_exit:


// array_keys_to_word_list
// Return size: 0
void array_keys_to_word_list()
array_keys_to_word_list_entry:
	// succ:  l000000000045A8D4
l000000000045A8D4:
	sp = fp
	sp = sp + -64
	Mem0[sp:word64] = x29
	sp = sp + 8
	Mem0[sp:word64] = x30
	x29 = x31 + 0x0000000000000000
	v8 = sp + 32
	Mem0[v8:word64] = x21
	v8 = v8 + 8
	Mem0[v8:word64] = x22
	v11 = sp + 16
	Mem0[v11:word64] = x19
	v11 = v11 + 8
	Mem0[v11:word64] = x20
	Mem0[sp + 48:word64] = x23
	x22 = x0
	branch x0 == 0x0000000000000000 l000000000045A974
	// succ:  l000000000045A8F0 l000000000045A974
l000000000045A8F0:
	w0 = Mem0[x0 + 16:word32]
	branch w0 == 0x00000000 l000000000045A974
	// succ:  l000000000045A8F8 l000000000045A974
l000000000045A8F8:
	x0 = Mem0[x22 + 24:word64]
	x19 = Mem0[x0 + 16:word64]
	x31 = x0 - x19
	NZCV = cond(x31)
	branch Test(EQ,Z) l000000000045A974
	// succ:  l000000000045A908 l000000000045A974
l000000000045A908:
	x23 = 0x00000000004AE000
	x20 = 0x0000000000000000
	x23 = x23 + 0x0000000000000720
	// succ:  l000000000045A914
l000000000045A914:
	x0 = Mem0[x19:word64]
	call itos (retsize: 0;)
	x21 = x0
	call make_bare_word (retsize: 0;)
	x1 = x20
	call make_word_list (retsize: 0;)
	w2 = 0x000002F0
	x20 = x0
	x1 = x23
	x0 = x21
	call sh_xfree (retsize: 0;)
	x2 = Mem0[x22 + 24:word64]
	x19 = Mem0[x19 + 16:word64]
	x31 = x2 - x19
	NZCV = cond(x31)
	branch Test(NE,Z) l000000000045A914
	// succ:  l000000000045A950 l000000000045A914
l000000000045A950:
	branch x20 == 0x0000000000000000 l000000000045A974
	// succ:  l000000000045A954 l000000000045A974
l000000000045A954:
	x0 = Mem0[x20:word64]
	branch x0 == 0x0000000000000000 l000000000045A98C
	// succ:  l000000000045A95C l000000000045A98C
l000000000045A95C:
	x0 = x20
	v20 = sp + 32
	x21 = Mem0[v20:word64]
	v20 = v20 + 8
	x22 = Mem0[v20:word64]
	v21 = sp + 16
	x19 = Mem0[v21:word64]
	v21 = v21 + 8
	x20 = Mem0[v21:word64]
	x23 = Mem0[sp + 48:word64]
	x29 = Mem0[sp:word64]
	sp = sp + 8
	x30 = Mem0[sp:word64]
	sp = sp + 64
	// succ:  l000000000045A970_thunk_list_reverse
l000000000045A970_thunk_list_reverse:
	call list_reverse (retsize: 0;)
	return
	// succ:  array_keys_to_word_list_exit
l000000000045A974:
	x0 = 0x0000000000000000
	v22 = sp + 16
	x19 = Mem0[v22:word64]
	v22 = v22 + 8
	x20 = Mem0[v22:word64]
	v23 = sp + 32
	x21 = Mem0[v23:word64]
	v23 = v23 + 8
	x22 = Mem0[v23:word64]
	x23 = Mem0[sp + 48:word64]
	x29 = Mem0[sp:word64]
	sp = sp + 8
	x30 = Mem0[sp:word64]
	sp = sp + 64
	return
	// succ:  array_keys_to_word_list_exit
l000000000045A98C:
	x0 = x20
	v24 = sp + 32
	x21 = Mem0[v24:word64]
	v24 = v24 + 8
	x22 = Mem0[v24:word64]
	v25 = sp + 16
	x19 = Mem0[v25:word64]
	v25 = v25 + 8
	x20 = Mem0[v25:word64]
	x23 = Mem0[sp + 48:word64]
	x29 = Mem0[sp:word64]
	sp = sp + 8
	x30 = Mem0[sp:word64]
	sp = sp + 64
	return
	// succ:  array_keys_to_word_list_exit
array_keys_to_word_list_exit:


// array_assign_list
// Return size: 0
void array_assign_list()
array_assign_list_entry:
	// succ:  l000000000045A9A4
l000000000045A9A4:
	sp = fp
	sp = sp + -48
	Mem0[sp:word64] = x29
	sp = sp + 8
	Mem0[sp:word64] = x30
	x29 = x31 + 0x0000000000000000
	v6 = sp + 16
	Mem0[v6:word64] = x19
	v6 = v6 + 8
	Mem0[v6:word64] = x20
	Mem0[sp + 32:word64] = x21
	x19 = x1
	x21 = x0
	x20 = 0x0000000000000000
	branch x1 == 0x0000000000000000 l000000000045A9E4
	// succ:  l000000000045A9C4 l000000000045A9E4
l000000000045A9C4:
	x2 = Mem0[x19 + 8:word64]
	x1 = x20
	x2 = Mem0[x2:word64]
	x0 = x21
	call array_insert (retsize: 0;)
	x19 = Mem0[x19:word64]
	x20 = x20 + 0x0000000000000001
	branch x19 != 0x0000000000000000 l000000000045A9C4
	// succ:  l000000000045A9E4 l000000000045A9C4
l000000000045A9E4:
	x0 = x21
	v13 = sp + 16
	x19 = Mem0[v13:word64]
	v13 = v13 + 8
	x20 = Mem0[v13:word64]
	x21 = Mem0[sp + 32:word64]
	x29 = Mem0[sp:word64]
	sp = sp + 8
	x30 = Mem0[sp:word64]
	sp = sp + 48
	return
	// succ:  array_assign_list_exit
array_assign_list_exit:


// array_from_word_list
// Return size: 0
void array_from_word_list()
array_from_word_list_entry:
	// succ:  l000000000045A9F8
l000000000045A9F8:
	sp = fp
	sp = sp + -32
	Mem0[sp:word64] = x29
	sp = sp + 8
	Mem0[sp:word64] = x30
	x29 = x31 + 0x0000000000000000
	branch x0 == 0x0000000000000000 l000000000045AA18
	// succ:  l000000000045AA04 l000000000045AA18
l000000000045AA04:
	Mem0[x29 + 16:word64] = x0
	call array_create (retsize: 0;)
	x1 = Mem0[x29 + 16:word64]
	x29 = Mem0[sp:word64]
	sp = sp + 8
	x30 = Mem0[sp:word64]
	sp = sp + 32
	// succ:  l000000000045AA14_thunk_array_assign_list
l000000000045AA14_thunk_array_assign_list:
	call array_assign_list (retsize: 0;)
	return
	// succ:  array_from_word_list_exit
l000000000045AA18:
	x29 = Mem0[sp:word64]
	sp = sp + 8
	x30 = Mem0[sp:word64]
	sp = sp + 32
	return
	// succ:  array_from_word_list_exit
array_from_word_list_exit:


// array_to_argv
// Return size: 0
void array_to_argv()
array_to_argv_entry:
	// succ:  l000000000045AA20
l000000000045AA20:
	sp = fp
	sp = sp + -80
	Mem0[sp:word64] = x29
	sp = sp + 8
	Mem0[sp:word64] = x30
	x29 = x31 + 0x0000000000000000
	v8 = sp + 48
	Mem0[v8:word64] = x23
	v8 = v8 + 8
	Mem0[v8:word64] = x24
	v11 = sp + 16
	Mem0[v11:word64] = x19
	v11 = v11 + 8
	Mem0[v11:word64] = x20
	v14 = sp + 32
	Mem0[v14:word64] = x21
	v14 = v14 + 8
	Mem0[v14:word64] = x22
	Mem0[sp + 64:word64] = x25
	x23 = x0
	branch x0 == 0x0000000000000000 l000000000045AADC
	// succ:  l000000000045AA40 l000000000045AADC
l000000000045AA40:
	w0 = Mem0[x0 + 16:word32]
	branch w0 == 0x00000000 l000000000045AAF4
	// succ:  l000000000045AA48 l000000000045AAF4
l000000000045AA48:
	w0 = w0 + 0x00000001
	call strvec_create (retsize: 0;)
	x25 = x0
	x0 = Mem0[x23 + 24:word64]
	x19 = Mem0[x0 + 16:word64]
	x31 = x0 - x19
	NZCV = cond(x31)
	branch Test(EQ,Z) l000000000045AB10
	// succ:  l000000000045AA64 l000000000045AB10
l000000000045AA64:
	x24 = 0x00000000004AE000
	x22 = x25
	w21 = 0x00000000
	x24 = x24 + 0x0000000000000720
	goto l000000000045AAA8
	// succ:  l000000000045AAA8
l000000000045AA78:
	strlen(x0)
	sp = sp + 0xFFFFFFFFFFFFFFF8
	w2 = 0x00000310
	x1 = x24
	x0 = x0 + 0x0000000000000001
	call sh_xmalloc (retsize: 0;)
	x1 = x20
	strcpy(x0, x1)
	sp = sp + 0xFFFFFFFFFFFFFFF8
	Mem0[x22:word64] = x0
	x22 = x22 + 8
	x19 = Mem0[x19 + 16:word64]
	x2 = Mem0[x23 + 24:word64]
	x31 = x2 - x19
	NZCV = cond(x31)
	branch Test(EQ,Z) l000000000045AAD0
	// succ:  l000000000045AAA8 l000000000045AAD0
l000000000045AAA8:
	x20 = Mem0[x19 + 8:word64]
	w21 = w21 + 0x00000001
	x0 = x20
	branch x20 != 0x0000000000000000 l000000000045AA78
	// succ:  l000000000045AAB8 l000000000045AA78
l000000000045AAB8:
	x0 = x20
	Mem0[x22:word64] = x0
	x22 = x22 + 8
	x19 = Mem0[x19 + 16:word64]
	x2 = Mem0[x23 + 24:word64]
	x31 = x2 - x19
	NZCV = cond(x31)
	branch Test(NE,Z) l000000000045AAA8
	// succ:  l000000000045AAD0 l000000000045AAA8
l000000000045AAD0:
l000000000045AAD4:
	Mem0[x25 + x21:word64] = 0x0000000000000000
	x0 = x25
	// succ:  l000000000045AADC
l000000000045AADC:
	v21 = sp + 16
	x19 = Mem0[v21:word64]
	v21 = v21 + 8
	x20 = Mem0[v21:word64]
	v22 = sp + 32
	x21 = Mem0[v22:word64]
	v22 = v22 + 8
	x22 = Mem0[v22:word64]
	v23 = sp + 48
	x23 = Mem0[v23:word64]
	v23 = v23 + 8
	x24 = Mem0[v23:word64]
	x25 = Mem0[sp + 64:word64]
	x29 = Mem0[sp:word64]
	sp = sp + 8
	x30 = Mem0[sp:word64]
	sp = sp + 80
	return
	// succ:  array_to_argv_exit
l000000000045AAF4:
	x0 = 0x0000000000000000
	v27 = sp + 16
	x19 = Mem0[v27:word64]
	v27 = v27 + 8
	x20 = Mem0[v27:word64]
	v28 = sp + 32
	x21 = Mem0[v28:word64]
	v28 = v28 + 8
	x22 = Mem0[v28:word64]
	v29 = sp + 48
	x23 = Mem0[v29:word64]
	v29 = v29 + 8
	x24 = Mem0[v29:word64]
	x25 = Mem0[sp + 64:word64]
	x29 = Mem0[sp:word64]
	sp = sp + 8
	x30 = Mem0[sp:word64]
	sp = sp + 80
	return
	// succ:  array_to_argv_exit
l000000000045AB10:
	x21 = 0x0000000000000000
	goto l000000000045AAD4
	// succ:  l000000000045AAD4
array_to_argv_exit:


// array_to_assign
// Return size: 0
void array_to_assign()
array_to_assign_entry:
	// succ:  l000000000045AB18
l000000000045AB18:
	sp = fp
	sp = sp + -128
	Mem0[sp:word64] = x29
	sp = sp + 8
	Mem0[sp:word64] = x30
	x29 = x31 + 0x0000000000000000
	v8 = sp + 64
	Mem0[v8:word64] = x25
	v8 = v8 + 8
	Mem0[v8:word64] = x26
	v11 = sp + 80
	Mem0[v11:word64] = x27
	v11 = v11 + 8
	Mem0[v11:word64] = x28
	v14 = sp + 16
	Mem0[v14:word64] = x19
	v14 = v14 + 8
	Mem0[v14:word64] = x20
	v17 = sp + 32
	Mem0[v17:word64] = x21
	v17 = v17 + 8
	Mem0[v17:word64] = x22
	v20 = sp + 48
	Mem0[v20:word64] = x23
	v20 = v20 + 8
	Mem0[v20:word64] = x24
	x26 = x0
	w28 = w1
	branch x0 == 0x0000000000000000 l000000000045AE4C
	// succ:  l000000000045AB40 l000000000045AE4C
l000000000045AB40:
	w0 = Mem0[x0 + 16:word32]
	branch w0 == 0x00000000 l000000000045AE1C
	// succ:  l000000000045AB48 l000000000045AE1C
l000000000045AB48:
	x27 = 0x00000000004AE000
	x0 = 0x0000000000000080
	x1 = x27 + 0x0000000000000720
	w2 = 0x00000350
	call sh_xmalloc (retsize: 0;)
	x22 = x0
	w0 = 0x00000028
	Mem0[x22:byte] = (byte) w0
	x0 = Mem0[x26 + 24:word64]
	x23 = Mem0[x0 + 16:word64]
	x31 = x0 - x23
	NZCV = cond(x31)
	branch Test(EQ,Z) l000000000045AE40
	// succ:  l000000000045AB78 l000000000045AE40
l000000000045AB78:
	w24 = 0x00000001
	w19 = 0x00000080
	// succ:  l000000000045AB80
l000000000045AB80:
	x0 = Mem0[x23:word64]
	x1 = x29 + 0x0000000000000060
	x2 = 0x0000000000000016
	call inttostr (retsize: 0;)
	x21 = x0
	x0 = Mem0[x23 + 8:word64]
	branch x0 == 0x0000000000000000 l000000000045ADBC
	// succ:  l000000000045AB9C l000000000045ADBC
l000000000045AB9C:
	call sh_double_quote (retsize: 0;)
	x20 = x0
	branch x21 == 0x0000000000000000 l000000000045ADC4
	// succ:  l000000000045ABA8 l000000000045ADC4
l000000000045ABA8:
	v32 = Mem0[x21:byte]
	w0 = (word32) v32
	w25 = 0x00000008
	branch w0 == 0x00000000 l000000000045ABD8
	// succ:  l000000000045ABB4 l000000000045ABD8
l000000000045ABB4:
	v34 = Mem0[x21 + 1:byte]
	w0 = (word32) v34
	w25 = 0x00000009
	branch w0 == 0x00000000 l000000000045ABD8
	// succ:  l000000000045ABC0 l000000000045ABD8
l000000000045ABC0:
	v35 = Mem0[x21 + 2:byte]
	w0 = (word32) v35
	w25 = 0x0000000A
	branch w0 == 0x00000000 l000000000045ABD8
	// succ:  l000000000045ABCC l000000000045ABD8
l000000000045ABCC:
	x0 = x21
	strlen(x0)
	sp = sp + 0xFFFFFFFFFFFFFFF8
	w25 = w0 + 0x00000008
	// succ:  l000000000045ABD8
l000000000045ABD8:
	branch x20 == 0x0000000000000000 l000000000045ADCC
	// succ:  l000000000045ABDC l000000000045ADCC
l000000000045ABDC:
	v41 = Mem0[x20:byte]
	w0 = (word32) v41
	w2 = 0x00000000
	branch w0 == 0x00000000 l000000000045AC0C
	// succ:  l000000000045ABE8 l000000000045AC0C
l000000000045ABE8:
	v42 = Mem0[x20 + 1:byte]
	w0 = (word32) v42
	w2 = 0x00000001
	branch w0 == 0x00000000 l000000000045AC0C
	// succ:  l000000000045ABF4 l000000000045AC0C
l000000000045ABF4:
	v43 = Mem0[x20 + 2:byte]
	w0 = (word32) v43
	w2 = 0x00000002
	branch w0 == 0x00000000 l000000000045AC0C
	// succ:  l000000000045AC00 l000000000045AC0C
l000000000045AC00:
	x0 = x20
	strlen(x0)
	sp = sp + 0xFFFFFFFFFFFFFFF8
	w2 = w0
	// succ:  l000000000045AC0C
l000000000045AC0C:
	w2 = w2 + w25
	w2 = w2 + 0x00000001
	w2 = w2 + w24
	NZCV = cond(w2 - w19)
	branch Test(GE,NZV) l000000000045AD74
	// succ:  l000000000045AC20 l000000000045AD74
l000000000045AC20:
	w0 = 0x0000005B
	w25 = w24 + 0x00000001
	Mem0[x22 + (int64) ((int32) w24):byte] = (byte) w0
	x1 = x21
	x0 = x22 + (int64) ((int32) w25)
	strcpy(x0, x1)
	sp = sp + 0xFFFFFFFFFFFFFFF8
	branch x21 == 0x0000000000000000 l000000000045ADB4
	// succ:  l000000000045AC3C l000000000045ADB4
l000000000045AC3C:
	v46 = Mem0[x21:byte]
	w0 = (word32) v46
	w2 = 0x00000000
	branch w0 == 0x00000000 l000000000045AC6C
	// succ:  l000000000045AC48 l000000000045AC6C
l000000000045AC48:
	v47 = Mem0[x21 + 1:byte]
	w0 = (word32) v47
	w2 = 0x00000001
	branch w0 == 0x00000000 l000000000045AC6C
	// succ:  l000000000045AC54 l000000000045AC6C
l000000000045AC54:
	v48 = Mem0[x21 + 2:byte]
	w0 = (word32) v48
	w2 = 0x00000002
	branch w0 == 0x00000000 l000000000045AC6C
	// succ:  l000000000045AC60 l000000000045AC6C
l000000000045AC60:
	x0 = x21
	strlen(x0)
	sp = sp + 0xFFFFFFFFFFFFFFF8
	w2 = w0
	// succ:  l000000000045AC6C
l000000000045AC6C:
	w21 = w2 + w25
	w0 = 0x0000005D
	Mem0[x22 + (int64) ((int32) w21):byte] = (byte) w0
	w1 = 0x0000003D
	w0 = w21 + 0x00000001
	Mem0[x22 + (int64) ((int32) w0):byte] = (byte) w1
	w21 = w21 + 0x00000002
	branch x20 == 0x0000000000000000 l000000000045ACC8
	// succ:  l000000000045AC8C l000000000045ACC8
l000000000045AC8C:
	x1 = x20
	x0 = x22 + (int64) ((int32) w21)
	strcpy(x0, x1)
	sp = sp + 0xFFFFFFFFFFFFFFF8
	v50 = Mem0[x20:byte]
	w1 = (word32) v50
	w0 = 0x00000000
	branch w1 == 0x00000000 l000000000045ACC4
	// succ:  l000000000045ACA4 l000000000045ACC4
l000000000045ACA4:
	v51 = Mem0[x20 + 1:byte]
	w1 = (word32) v51
	w0 = 0x00000001
	branch w1 == 0x00000000 l000000000045ACC4
	// succ:  l000000000045ACB0 l000000000045ACC4
l000000000045ACB0:
	v52 = Mem0[x20 + 2:byte]
	w1 = (word32) v52
	w0 = 0x00000002
	branch w1 == 0x00000000 l000000000045ACC4
	// succ:  l000000000045ACBC l000000000045ACC4
l000000000045ACBC:
	x0 = x20
	strlen(x0)
	sp = sp + 0xFFFFFFFFFFFFFFF8
	// succ:  l000000000045ACC4
l000000000045ACC4:
	w21 = w0 + w21
	// succ:  l000000000045ACC8
l000000000045ACC8:
	x1 = Mem0[x23 + 16:word64]
	x0 = Mem0[x26 + 24:word64]
	x31 = x1 - x0
	NZCV = cond(x31)
	branch Test(EQ,Z) l000000000045ADD4
	// succ:  l000000000045ACD8 l000000000045ADD4
l000000000045ACD8:
	w0 = 0x00000020
	w24 = w21 + 0x00000001
	Mem0[x22 + (int64) ((int32) w21):byte] = (byte) w0
	// succ:  l000000000045ACE4
l000000000045ACE4:
	branch x20 == 0x0000000000000000 l000000000045ACF8
	// succ:  l000000000045ACE8 l000000000045ACF8
l000000000045ACE8:
	x0 = x20
	x1 = x27 + 0x0000000000000720
	w2 = 0x00000368
	call sh_xfree (retsize: 0;)
	// succ:  l000000000045ACF8
l000000000045ACF8:
	x23 = Mem0[x23 + 16:word64]
	x0 = Mem0[x26 + 24:word64]
	x31 = x0 - x23
	NZCV = cond(x31)
	branch Test(NE,Z) l000000000045AB80
	// succ:  l000000000045AD08 l000000000045AB80
l000000000045AD08:
	w20 = w24 + 0x00000001
	NZCV = cond(w20 - w19)
	branch Test(LT,NV) l000000000045AD3C
	// succ:  l000000000045AD14 l000000000045AD3C
l000000000045AD14:
	w0 = w20 - w19
	w0 = w0 & 0xFFFFFFF8
	w1 = w19 + 0x00000008
	w1 = w1 + w0
l000000000045AD3C:
l000000000045AD44:
	w0 = 0x00000029
	Mem0[x22 + x24:byte] = (byte) w0
	Mem0[x22 + x20:byte] = 0x00
	branch w28 != 0x00000000 l000000000045ADDC
	// succ:  l000000000045AD54 l000000000045ADDC
l000000000045AD54:
	x0 = x22
	v36 = sp + 16
	x19 = Mem0[v36:word64]
	v36 = v36 + 8
	x20 = Mem0[v36:word64]
	v37 = sp + 32
	x21 = Mem0[v37:word64]
	v37 = v37 + 8
	x22 = Mem0[v37:word64]
	v38 = sp + 48
	x23 = Mem0[v38:word64]
	v38 = v38 + 8
	x24 = Mem0[v38:word64]
	v39 = sp + 64
	x25 = Mem0[v39:word64]
	v39 = v39 + 8
	x26 = Mem0[v39:word64]
	v40 = sp + 80
	x27 = Mem0[v40:word64]
	v40 = v40 + 8
	x28 = Mem0[v40:word64]
	x29 = Mem0[sp:word64]
	sp = sp + 8
	x30 = Mem0[sp:word64]
	sp = sp + 128
	return
	// succ:  array_to_assign_exit
l000000000045AD74:
l000000000045ADB4:
	w2 = w21
	goto l000000000045AC6C
	// succ:  l000000000045AC6C
l000000000045ADBC:
	x20 = x0
	branch x21 != 0x0000000000000000 l000000000045ABA8
	// succ:  l000000000045ADC4 l000000000045ABA8
l000000000045ADC4:
	w25 = 0x00000008
	branch x20 != 0x0000000000000000 l000000000045ABDC
	// succ:  l000000000045ADCC l000000000045ABDC
l000000000045ADCC:
	w2 = w20
	goto l000000000045AC0C
	// succ:  l000000000045AC0C
l000000000045ADD4:
	w24 = w21
	goto l000000000045ACE4
	// succ:  l000000000045ACE4
l000000000045ADDC:
	x0 = x22
	call sh_single_quote (retsize: 0;)
	x19 = x0
	x1 = x27 + 0x0000000000000720
	x0 = x22
	w2 = 0x00000370
	call sh_xfree (retsize: 0;)
	x22 = x19
	x0 = x22
	v53 = sp + 16
	x19 = Mem0[v53:word64]
	v53 = v53 + 8
	x20 = Mem0[v53:word64]
	v54 = sp + 32
	x21 = Mem0[v54:word64]
	v54 = v54 + 8
	x22 = Mem0[v54:word64]
	v55 = sp + 48
	x23 = Mem0[v55:word64]
	v55 = v55 + 8
	x24 = Mem0[v55:word64]
	v56 = sp + 64
	x25 = Mem0[v56:word64]
	v56 = v56 + 8
	x26 = Mem0[v56:word64]
	v57 = sp + 80
	x27 = Mem0[v57:word64]
	v57 = v57 + 8
	x28 = Mem0[v57:word64]
	x29 = Mem0[sp:word64]
	sp = sp + 8
	x30 = Mem0[sp:word64]
	sp = sp + 128
	return
	// succ:  array_to_assign_exit
l000000000045AE1C:
	x22 = 0x0000000000000000
	x0 = x22
	v58 = sp + 16
	x19 = Mem0[v58:word64]
	v58 = v58 + 8
	x20 = Mem0[v58:word64]
	v59 = sp + 32
	x21 = Mem0[v59:word64]
	v59 = v59 + 8
	x22 = Mem0[v59:word64]
	v60 = sp + 48
	x23 = Mem0[v60:word64]
	v60 = v60 + 8
	x24 = Mem0[v60:word64]
	v61 = sp + 64
	x25 = Mem0[v61:word64]
	v61 = v61 + 8
	x26 = Mem0[v61:word64]
	v62 = sp + 80
	x27 = Mem0[v62:word64]
	v62 = v62 + 8
	x28 = Mem0[v62:word64]
	x29 = Mem0[sp:word64]
	sp = sp + 8
	x30 = Mem0[sp:word64]
	sp = sp + 128
	return
	// succ:  array_to_assign_exit
l000000000045AE40:
	x20 = 0x0000000000000002
	x24 = 0x0000000000000001
	goto l000000000045AD44
	// succ:  l000000000045AD44
l000000000045AE4C:
	x22 = x0
	goto l000000000045AD54
	// succ:  l000000000045AD54
array_to_assign_exit:


// array_to_string
// Return size: 0
void array_to_string()
array_to_string_entry:
	// succ:  l000000000045AE54
l000000000045AE54:
	sp = fp
	sp = sp + -112
	Mem0[sp:word64] = x29
	sp = sp + 8
	Mem0[sp:word64] = x30
	x29 = x31 + 0x0000000000000000
	v8 = sp + 80
	Mem0[v8:word64] = x27
	v8 = v8 + 8
	Mem0[v8:word64] = x28
	v11 = sp + 16
	Mem0[v11:word64] = x19
	v11 = v11 + 8
	Mem0[v11:word64] = x20
	v14 = sp + 32
	Mem0[v14:word64] = x21
	v14 = v14 + 8
	Mem0[v14:word64] = x22
	v17 = sp + 48
	Mem0[v17:word64] = x23
	v17 = v17 + 8
	Mem0[v17:word64] = x24
	v20 = sp + 64
	Mem0[v20:word64] = x25
	v20 = v20 + 8
	Mem0[v20:word64] = x26
	Mem0[x29 + 96:word64] = x1
	w27 = w2
	branch x0 == 0x0000000000000000 l000000000045AF2C
	// succ:  l000000000045AE7C l000000000045AF2C
l000000000045AE7C:
	w1 = Mem0[x0 + 16:word32]
	branch w1 == 0x00000000 l000000000045AFC4
	// succ:  l000000000045AE84 l000000000045AFC4
l000000000045AE84:
	x25 = Mem0[x0 + 24:word64]
	x22 = Mem0[x25 + 16:word64]
	x31 = x25 - x22
	NZCV = cond(x31)
	branch Test(EQ,Z) l000000000045B00C
	// succ:  l000000000045AE94 l000000000045B00C
l000000000045AE94:
	x0 = Mem0[x29 + 96:word64]
	x23 = 0x0000000000000000
	strlen(x0)
	sp = sp + 0xFFFFFFFFFFFFFFF8
	x28 = 0x00000000004AE000
	w26 = w0
	w20 = w23
	w19 = w23
	x28 = x28 + 0x0000000000000720
	// succ:  l000000000045AEB4
l000000000045AEB4:
	branch w19 == 0x00000000 l000000000045AF98
	// succ:  l000000000045AEB8 l000000000045AF98
l000000000045AEB8:
	x21 = Mem0[x22 + 8:word64]
	branch x21 == 0x0000000000000000 l000000000045AF14
	// succ:  l000000000045AEC0 l000000000045AF14
l000000000045AEC0:
	branch w27 != 0x00000000 l000000000045AFB4
	// succ:  l000000000045AEC4 l000000000045AFB4
l000000000045AEC4:
	x0 = x21
	strlen(x0)
	sp = sp + 0xFFFFFFFFFFFFFFF8
	w3 = w26 + w0
	w3 = w3 + 0x00000002
	w3 = w3 + w20
	NZCV = cond(w3 - w19)
	x24 = x0
	branch Test(GE,NZV) l000000000045AF48
	// succ:  l000000000045AEE4 l000000000045AF48
l000000000045AEE4:
	x0 = x23 + (int64) ((int32) w20)
	x1 = x21
	strcpy(x0, x1)
	sp = sp + 0xFFFFFFFFFFFFFFF8
	w20 = w20 + w24
	branch x21 != 0x0000000000000000 l000000000045AF80
	// succ:  l000000000045AEF8 l000000000045AF80
l000000000045AEF8:
	x3 = Mem0[x22 + 16:word64]
	x31 = x25 - x3
	NZCV = cond(x31)
	branch Test(EQ,Z) l000000000045AF20
	// succ:  l000000000045AF04 l000000000045AF20
l000000000045AF04:
	x1 = Mem0[x29 + 96:word64]
	x0 = x23 + (int64) ((int32) w20)
	strcpy(x0, x1)
	sp = sp + 0xFFFFFFFFFFFFFFF8
	w20 = w20 + w26
	// succ:  l000000000045AF14
l000000000045AF14:
	x22 = Mem0[x22 + 16:word64]
	x31 = x25 - x22
	NZCV = cond(x31)
	branch Test(NE,Z) l000000000045AEB4
	// succ:  l000000000045AF20 l000000000045AEB4
l000000000045AF20:
	branch x23 == 0x0000000000000000 l000000000045B004
	// succ:  l000000000045AF24 l000000000045B004
l000000000045AF24:
	Mem0[x23 + (int64) ((int32) w20):byte] = 0x00
	x0 = x23
	// succ:  l000000000045AF2C
l000000000045AF2C:
	v37 = sp + 16
	x19 = Mem0[v37:word64]
	v37 = v37 + 8
	x20 = Mem0[v37:word64]
	v38 = sp + 32
	x21 = Mem0[v38:word64]
	v38 = v38 + 8
	x22 = Mem0[v38:word64]
	v39 = sp + 48
	x23 = Mem0[v39:word64]
	v39 = v39 + 8
	x24 = Mem0[v39:word64]
	v40 = sp + 64
	x25 = Mem0[v40:word64]
	v40 = v40 + 8
	x26 = Mem0[v40:word64]
	v41 = sp + 80
	x27 = Mem0[v41:word64]
	v41 = v41 + 8
	x28 = Mem0[v41:word64]
	x29 = Mem0[sp:word64]
	sp = sp + 8
	x30 = Mem0[sp:word64]
	sp = sp + 112
	return
	// succ:  array_to_string_exit
l000000000045AF48:
l000000000045AF80:
	branch w27 == 0x00000000 l000000000045AEF8
	// succ:  l000000000045AF84 l000000000045AEF8
l000000000045AF84:
	x0 = x21
	x1 = x28
	w2 = 0x00000334
	call sh_xfree (retsize: 0;)
	goto l000000000045AEF8
	// succ:  l000000000045AEF8
l000000000045AF98:
	x0 = 0x0000000000000040
	x1 = x28
	w2 = 0x0000032B
	call sh_xmalloc (retsize: 0;)
	x23 = x0
	w19 = 0x00000040
	goto l000000000045AEB8
	// succ:  l000000000045AEB8
l000000000045AFB4:
	x0 = x21
	call quote_string (retsize: 0;)
	x21 = x0
	goto l000000000045AEC4
	// succ:  l000000000045AEC4
l000000000045AFC4:
	x1 = 0x00000000004AE000
	x1 = x1 + 0x0000000000000720
	w2 = 0x0000037F
	x0 = 0x0000000000000001
	call sh_xmalloc (retsize: 0;)
	x2 = 0x00000000004AC000
	v43 = Mem0[x2 + 1120:byte]
	w2 = (word32) v43
	x1 = x0
	Mem0[x1:byte] = (byte) w2
	v44 = sp + 16
	x19 = Mem0[v44:word64]
	v44 = v44 + 8
	x20 = Mem0[v44:word64]
	v45 = sp + 32
	x21 = Mem0[v45:word64]
	v45 = v45 + 8
	x22 = Mem0[v45:word64]
	v46 = sp + 48
	x23 = Mem0[v46:word64]
	v46 = v46 + 8
	x24 = Mem0[v46:word64]
	v47 = sp + 64
	x25 = Mem0[v47:word64]
	v47 = v47 + 8
	x26 = Mem0[v47:word64]
	v48 = sp + 80
	x27 = Mem0[v48:word64]
	v48 = v48 + 8
	x28 = Mem0[v48:word64]
	x29 = Mem0[sp:word64]
	sp = sp + 8
	x30 = Mem0[sp:word64]
	sp = sp + 112
	return
	// succ:  array_to_string_exit
l000000000045B004:
	x0 = x23
	goto l000000000045AF2C
	// succ:  l000000000045AF2C
l000000000045B00C:
	x0 = 0x0000000000000000
	goto l000000000045AF2C
	// succ:  l000000000045AF2C
array_to_string_exit:


// array_subrange
// Return size: 0
void array_subrange()
array_subrange_entry:
	// succ:  l000000000045B014
l000000000045B014:
	sp = fp
	sp = sp + -80
	Mem0[sp:word64] = x29
	sp = sp + 8
	Mem0[sp:word64] = x30
	x29 = x31 + 0x0000000000000000
	v8 = sp + 16
	Mem0[v8:word64] = x19
	v8 = v8 + 8
	Mem0[v8:word64] = x20
	v11 = sp + 32
	Mem0[v11:word64] = x21
	v11 = v11 + 8
	Mem0[v11:word64] = x22
	x8 = x0
	w20 = w3
	branch x0 == 0x0000000000000000 l000000000045B1D4
	// succ:  l000000000045B030 l000000000045B1D4
l000000000045B030:
	x7 = Mem0[x0 + 24:word64]
	x0 = 0x0000000000000000
	branch x7 == 0x0000000000000000 l000000000045B088
	// succ:  l000000000045B03C l000000000045B088
l000000000045B03C:
	w5 = Mem0[x8 + 16:word32]
	branch w5 == 0x00000000 l000000000045B088
	// succ:  l000000000045B044 l000000000045B088
l000000000045B044:
	x5 = Mem0[x8 + 8:word64]
	x31 = x5 - x1
	NZCV = cond(x31)
	branch Test(LT,NV) l000000000045B088
	// succ:  l000000000045B050 l000000000045B088
l000000000045B050:
	x5 = Mem0[x7 + 16:word64]
	x31 = x7 - x5
	NZCV = cond(x31)
	branch Test(EQ,Z) l000000000045B088
	// succ:  l000000000045B05C l000000000045B088
l000000000045B05C:
	x0 = Mem0[x5:word64]
	x31 = x1 - x0
	NZCV = cond(x31)
	branch Test(GT,NZV) l000000000045B078
	// succ:  l000000000045B068 l000000000045B078
l000000000045B068:
	goto l000000000045B098
	// succ:  l000000000045B098
l000000000045B06C:
	x6 = Mem0[x5:word64]
	x31 = x1 - x6
	NZCV = cond(x31)
	branch Test(LE,ZCV) l000000000045B098
	// succ:  l000000000045B078 l000000000045B098
l000000000045B078:
	x5 = Mem0[x5 + 16:word64]
	x31 = x7 - x5
	NZCV = cond(x31)
	branch Test(NE,Z) l000000000045B06C
	// succ:  l000000000045B084 l000000000045B06C
l000000000045B084:
	x0 = 0x0000000000000000
	// succ:  l000000000045B088
l000000000045B088:
	v40 = sp + 16
	x19 = Mem0[v40:word64]
	v40 = v40 + 8
	x20 = Mem0[v40:word64]
	v41 = sp + 32
	x21 = Mem0[v41:word64]
	v41 = v41 + 8
	x22 = Mem0[v41:word64]
	x29 = Mem0[sp:word64]
	sp = sp + 8
	x30 = Mem0[sp:word64]
	sp = sp + 80
	return
	// succ:  array_subrange_exit
l000000000045B098:
	x31 = x2 - x31
	NZCV = cond(x31)
	branch Test(LE,ZCV) l000000000045B200
	// succ:  l000000000045B0A0 l000000000045B200
l000000000045B0A0:
	x6 = Mem0[x5 + 16:word64]
	x31 = x6 - x7
	NZCV = cond(x31)
	branch Test(EQ,Z) l000000000045B0C8
	// succ:  l000000000045B0AC l000000000045B0C8
l000000000045B0AC:
	x1 = 0x0000000000000001
	// succ:  l000000000045B0B0
l000000000045B0B0:
	x31 = x1 - x2
	NZCV = cond(x31)
	branch Test(EQ,Z) l000000000045B0C8
	// succ:  l000000000045B0B8 l000000000045B0C8
l000000000045B0B8:
	x6 = Mem0[x6 + 16:word64]
	x1 = x1 + 0x0000000000000001
	x31 = x7 - x6
	NZCV = cond(x31)
	branch Test(NE,Z) l000000000045B0B0
	// succ:  l000000000045B0C8 l000000000045B0B0
l000000000045B0C8:
	x2 = x6
	x0 = x8
	x1 = x5
	Mem0[x29 + 64:word64] = x4
	call array_slice (retsize: 0;)
	x4 = Mem0[x29 + 64:word64]
	x19 = x0
	w2 = w4 & 0x00000003
	NZ = cond(w2)
	C = false
	V = false
	branch Test(EQ,Z) l000000000045B170
	// succ:  l000000000045B0EC l000000000045B170
l000000000045B0EC:
	call array_quote (retsize: 0;)
	branch w20 != 0x00000000 l000000000045B194
	// succ:  l000000000045B0F4 l000000000045B194
l000000000045B0F4:
	x0 = x29 + 0x0000000000000030
	call ifs_firstchar (retsize: 0;)
	x21 = x0
	call getifs (retsize: 0;)
	branch x0 == 0x0000000000000000 l000000000045B114
	// succ:  l000000000045B108 l000000000045B114
l000000000045B108:
	v36 = Mem0[x0:byte]
	w0 = (word32) v36
	x22 = 0x00000000004AE000
	branch w0 != 0x00000000 l000000000045B130
	// succ:  l000000000045B114 l000000000045B130
l000000000045B114:
	w0 = Mem0[x29 + 48:word32]
	x22 = 0x00000000004AE000
	w31 = w0 - 0x00000001
	NZCV = cond(w31)
	branch Test(LE,ZCV) l000000000045B1E4
	// succ:  l000000000045B124 l000000000045B1E4
l000000000045B124:
	w0 = 0x00000020
	Mem0[x21:byte] = (byte) w0
	Mem0[x21 + 1:byte] = 0x00
	// succ:  l000000000045B130
l000000000045B130:
	x1 = x21
	w2 = 0x00000000
	x0 = x19
	call array_to_string (retsize: 0;)
	x20 = x0
	x1 = x22 + 0x0000000000000720
	x0 = x21
	w2 = 0x000001CA
	call sh_xfree (retsize: 0;)
	// succ:  l000000000045B154
l000000000045B154:
	x0 = x19
	call array_dispose (retsize: 0;)
	x0 = x20
	v38 = sp + 32
	x21 = Mem0[v38:word64]
	v38 = v38 + 8
	x22 = Mem0[v38:word64]
	v39 = sp + 16
	x19 = Mem0[v39:word64]
	v39 = v39 + 8
	x20 = Mem0[v39:word64]
	x29 = Mem0[sp:word64]
	sp = sp + 8
	x30 = Mem0[sp:word64]
	sp = sp + 80
	return
	// succ:  array_subrange_exit
l000000000045B170:
	Mem0[x29 + 64:word64] = x2
	call array_quote_escapes (retsize: 0;)
	x1 = 0x00000000004BE000
	x2 = Mem0[x29 + 64:word64]
	x0 = x19
	x1 = x1 + 0x0000000000000330
	call array_to_string (retsize: 0;)
	x20 = x0
	goto l000000000045B154
	// succ:  l000000000045B154
l000000000045B194:
	x0 = x19
	call array_remove_quoted_nulls (retsize: 0;)
	x0 = 0x0000000000000000
	call ifs_firstchar (retsize: 0;)
	x21 = x0
	x1 = x21
	x0 = x19
	w2 = 0x00000000
	call array_to_string (retsize: 0;)
	x1 = 0x00000000004AE000
	x20 = x0
	x1 = x1 + 0x0000000000000720
	x0 = x21
	w2 = 0x000001BE
	call sh_xfree (retsize: 0;)
	goto l000000000045B154
	// succ:  l000000000045B154
l000000000045B1D4:
	v24 = sp + 16
	x19 = Mem0[v24:word64]
	v24 = v24 + 8
	x20 = Mem0[v24:word64]
	v25 = sp + 32
	x21 = Mem0[v25:word64]
	v25 = v25 + 8
	x22 = Mem0[v25:word64]
	x29 = Mem0[sp:word64]
	sp = sp + 8
	x30 = Mem0[sp:word64]
	sp = sp + 80
	return
	// succ:  array_subrange_exit
l000000000045B1E4:
	x0 = x21
	x1 = 0x0000000000000002
	x2 = x22 + 0x0000000000000720
	w3 = 0x000001C5
	call sh_xrealloc (retsize: 0;)
	x21 = x0
	goto l000000000045B124
	// succ:  l000000000045B124
l000000000045B200:
	x6 = x5
	goto l000000000045B0C8
	// succ:  l000000000045B0C8
array_subrange_exit:


// array_patsub
// Return size: 0
void array_patsub()
array_patsub_entry:
	// succ:  l000000000045B208
l000000000045B208:
	sp = fp
	sp = sp + -96
	Mem0[sp:word64] = x29
	sp = sp + 8
	Mem0[sp:word64] = x30
	x29 = x31 + 0x0000000000000000
	v8 = sp + 48
	Mem0[v8:word64] = x23
	v8 = v8 + 8
	Mem0[v8:word64] = x24
	v11 = sp + 32
	Mem0[v11:word64] = x21
	v11 = v11 + 8
	Mem0[v11:word64] = x22
	v14 = sp + 16
	Mem0[v14:word64] = x19
	v14 = v14 + 8
	Mem0[v14:word64] = x20
	Mem0[sp + 64:word64] = x25
	x23 = x1
	x24 = x2
	w22 = w3
	branch x0 == 0x0000000000000000 l000000000045B2D8
	// succ:  l000000000045B230 l000000000045B2D8
l000000000045B230:
	x1 = Mem0[x0 + 24:word64]
	branch x1 == 0x0000000000000000 l000000000045B3D8
	// succ:  l000000000045B238 l000000000045B3D8
l000000000045B238:
	w1 = Mem0[x0 + 16:word32]
	branch w1 == 0x00000000 l000000000045B3A0
	// succ:  l000000000045B240 l000000000045B3A0
l000000000045B240:
	call array_copy (retsize: 0;)
	x21 = x0
	x0 = Mem0[x0 + 24:word64]
	x25 = 0x00000000004AE000
	x19 = Mem0[x0 + 16:word64]
	x25 = x25 + 0x0000000000000720
	x31 = x0 - x19
	NZCV = cond(x31)
	branch Test(EQ,Z) l000000000045B2A4
	// succ:  l000000000045B260 l000000000045B2A4
l000000000045B260:
	x0 = Mem0[x19 + 8:word64]
	x1 = x23
	x2 = x24
	w3 = w22
	call pat_subst (retsize: 0;)
	x4 = Mem0[x19 + 8:word64]
	x20 = x0
	x1 = x25
	x0 = x4
	w2 = 0x000001E3
	branch x4 == 0x0000000000000000 l000000000045B290
	// succ:  l000000000045B28C l000000000045B290
l000000000045B28C:
	call sh_xfree (retsize: 0;)
	// succ:  l000000000045B290
l000000000045B290:
	Mem0[x19 + 8:word64] = x20
	x4 = Mem0[x21 + 24:word64]
	x19 = Mem0[x19 + 16:word64]
	x31 = x4 - x19
	NZCV = cond(x31)
	branch Test(NE,Z) l000000000045B260
	// succ:  l000000000045B2A4 l000000000045B260
l000000000045B2A4:
	branch (w22 & 0x00000020) == 0x00000000 l000000000045B2F0
	// succ:  l000000000045B2A8 l000000000045B2F0
l000000000045B2A8:
	x0 = x21
	call array_quote_escapes (retsize: 0;)
	w2 = w22 & 0x00000040
	branch (w22 & 0x00000040) == 0x00000000 l000000000045B360
	// succ:  l000000000045B2B8 l000000000045B360
l000000000045B2B8:
	x1 = 0x00000000004BE000
	x0 = x21
	x1 = x1 + 0x0000000000000330
	call array_to_string (retsize: 0;)
	x19 = x0
	// succ:  l000000000045B2CC
l000000000045B2CC:
	x0 = x21
	call array_dispose (retsize: 0;)
	x0 = x19
	// succ:  l000000000045B2D8
l000000000045B2D8:
	v26 = sp + 16
	x19 = Mem0[v26:word64]
	v26 = v26 + 8
	x20 = Mem0[v26:word64]
	v27 = sp + 32
	x21 = Mem0[v27:word64]
	v27 = v27 + 8
	x22 = Mem0[v27:word64]
	v28 = sp + 48
	x23 = Mem0[v28:word64]
	v28 = v28 + 8
	x24 = Mem0[v28:word64]
	x25 = Mem0[sp + 64:word64]
	x29 = Mem0[sp:word64]
	sp = sp + 8
	x30 = Mem0[sp:word64]
	sp = sp + 96
	return
	// succ:  array_patsub_exit
l000000000045B2F0:
	x0 = x21
	call array_quote (retsize: 0;)
	branch (w22 & 0x00000040) == 0x00000000 l000000000045B360
	// succ:  l000000000045B2FC l000000000045B360
l000000000045B2FC:
	x0 = x29 + 0x0000000000000050
	call ifs_firstchar (retsize: 0;)
	x20 = x0
	call getifs (retsize: 0;)
	branch x0 == 0x0000000000000000 l000000000045B31C
	// succ:  l000000000045B310 l000000000045B31C
l000000000045B310:
	v33 = Mem0[x0:byte]
	w0 = (word32) v33
	x22 = 0x00000000004AE000
	branch w0 != 0x00000000 l000000000045B338
	// succ:  l000000000045B31C l000000000045B338
l000000000045B31C:
	w0 = Mem0[x29 + 80:word32]
	x22 = 0x00000000004AE000
	w31 = w0 - 0x00000001
	NZCV = cond(w31)
	branch Test(LE,ZCV) l000000000045B3BC
	// succ:  l000000000045B32C l000000000045B3BC
l000000000045B32C:
	w0 = 0x00000020
	Mem0[x20:byte] = (byte) w0
	Mem0[x20 + 1:byte] = 0x00
	// succ:  l000000000045B338
l000000000045B338:
	x1 = x20
	x0 = x21
	w2 = 0x00000000
	call array_to_string (retsize: 0;)
	x19 = x0
	x1 = x22 + 0x0000000000000720
	x0 = x20
	w2 = 0x000001FC
	call sh_xfree (retsize: 0;)
	goto l000000000045B2CC
	// succ:  l000000000045B2CC
l000000000045B360:
	x0 = x21
	call array_remove_quoted_nulls (retsize: 0;)
	x0 = 0x0000000000000000
	call ifs_firstchar (retsize: 0;)
	x20 = x0
	x1 = x20
	x0 = x21
	w2 = 0x00000000
	call array_to_string (retsize: 0;)
	x1 = 0x00000000004AE000
	x19 = x0
	x1 = x1 + 0x0000000000000720
	x0 = x20
	w2 = 0x000001F0
	call sh_xfree (retsize: 0;)
	goto l000000000045B2CC
	// succ:  l000000000045B2CC
l000000000045B3A0:
	x0 = 0x0000000000000000
	v29 = sp + 16
	x19 = Mem0[v29:word64]
	v29 = v29 + 8
	x20 = Mem0[v29:word64]
	v30 = sp + 32
	x21 = Mem0[v30:word64]
	v30 = v30 + 8
	x22 = Mem0[v30:word64]
	v31 = sp + 48
	x23 = Mem0[v31:word64]
	v31 = v31 + 8
	x24 = Mem0[v31:word64]
	x25 = Mem0[sp + 64:word64]
	x29 = Mem0[sp:word64]
	sp = sp + 8
	x30 = Mem0[sp:word64]
	sp = sp + 96
	return
	// succ:  array_patsub_exit
l000000000045B3BC:
	x0 = x20
	x1 = 0x0000000000000002
	x2 = x22 + 0x0000000000000720
	w3 = 0x000001F7
	call sh_xrealloc (retsize: 0;)
	x20 = x0
	goto l000000000045B32C
	// succ:  l000000000045B32C
l000000000045B3D8:
	x0 = x1
	goto l000000000045B2D8
	// succ:  l000000000045B2D8
array_patsub_exit:


// array_modcase
// Return size: 0
void array_modcase()
array_modcase_entry:
	// succ:  l000000000045B3E0
l000000000045B3E0:
	sp = fp
	sp = sp + -96
	Mem0[sp:word64] = x29
	sp = sp + 8
	Mem0[sp:word64] = x30
	x29 = x31 + 0x0000000000000000
	v8 = sp + 32
	Mem0[v8:word64] = x21
	v8 = v8 + 8
	Mem0[v8:word64] = x22
	v11 = sp + 48
	Mem0[v11:word64] = x23
	v11 = v11 + 8
	Mem0[v11:word64] = x24
	Mem0[sp + 64:word64] = x25
	v15 = sp + 16
	Mem0[v15:word64] = x19
	v15 = v15 + 8
	Mem0[v15:word64] = x20
	x22 = x1
	w23 = w2
	w25 = w3
	branch x0 == 0x0000000000000000 l000000000045B4AC
	// succ:  l000000000045B408 l000000000045B4AC
l000000000045B408:
	x1 = Mem0[x0 + 24:word64]
	branch x1 == 0x0000000000000000 l000000000045B5AC
	// succ:  l000000000045B410 l000000000045B5AC
l000000000045B410:
	w1 = Mem0[x0 + 16:word32]
	branch w1 == 0x00000000 l000000000045B574
	// succ:  l000000000045B418 l000000000045B574
l000000000045B418:
	call array_copy (retsize: 0;)
	x21 = x0
	x0 = Mem0[x0 + 24:word64]
	x24 = 0x00000000004AE000
	x19 = Mem0[x0 + 16:word64]
	x24 = x24 + 0x0000000000000720
	x31 = x0 - x19
	NZCV = cond(x31)
	branch Test(EQ,Z) l000000000045B478
	// succ:  l000000000045B438 l000000000045B478
l000000000045B438:
	x0 = Mem0[x19 + 8:word64]
	x1 = x22
	w2 = w23
	call sh_modcase (retsize: 0;)
	x4 = Mem0[x19 + 8:word64]
	x20 = x0
	x1 = x24
	x0 = x4
	w2 = 0x00000216
	branch x4 == 0x0000000000000000 l000000000045B464
	// succ:  l000000000045B460 l000000000045B464
l000000000045B460:
	call sh_xfree (retsize: 0;)
	// succ:  l000000000045B464
l000000000045B464:
	Mem0[x19 + 8:word64] = x20
	x4 = Mem0[x21 + 24:word64]
	x19 = Mem0[x19 + 16:word64]
	x31 = x4 - x19
	NZCV = cond(x31)
	branch Test(NE,Z) l000000000045B438
	// succ:  l000000000045B478 l000000000045B438
l000000000045B478:
	branch (w25 & 0x00000020) == 0x00000000 l000000000045B4C4
	// succ:  l000000000045B47C l000000000045B4C4
l000000000045B47C:
	x0 = x21
	call array_quote_escapes (retsize: 0;)
	w2 = w25 & 0x00000040
	branch (w25 & 0x00000040) == 0x00000000 l000000000045B534
	// succ:  l000000000045B48C l000000000045B534
l000000000045B48C:
	x1 = 0x00000000004BE000
	x0 = x21
	x1 = x1 + 0x0000000000000330
	call array_to_string (retsize: 0;)
	x19 = x0
	// succ:  l000000000045B4A0
l000000000045B4A0:
	x0 = x21
	call array_dispose (retsize: 0;)
	x0 = x19
	// succ:  l000000000045B4AC
l000000000045B4AC:
	v26 = sp + 16
	x19 = Mem0[v26:word64]
	v26 = v26 + 8
	x20 = Mem0[v26:word64]
	v27 = sp + 32
	x21 = Mem0[v27:word64]
	v27 = v27 + 8
	x22 = Mem0[v27:word64]
	v28 = sp + 48
	x23 = Mem0[v28:word64]
	v28 = v28 + 8
	x24 = Mem0[v28:word64]
	x25 = Mem0[sp + 64:word64]
	x29 = Mem0[sp:word64]
	sp = sp + 8
	x30 = Mem0[sp:word64]
	sp = sp + 96
	return
	// succ:  array_modcase_exit
l000000000045B4C4:
	x0 = x21
	call array_quote (retsize: 0;)
	branch (w25 & 0x00000040) == 0x00000000 l000000000045B534
	// succ:  l000000000045B4D0 l000000000045B534
l000000000045B4D0:
	x0 = x29 + 0x0000000000000050
	call ifs_firstchar (retsize: 0;)
	x20 = x0
	call getifs (retsize: 0;)
	branch x0 == 0x0000000000000000 l000000000045B4F0
	// succ:  l000000000045B4E4 l000000000045B4F0
l000000000045B4E4:
	v33 = Mem0[x0:byte]
	w0 = (word32) v33
	x22 = 0x00000000004AE000
	branch w0 != 0x00000000 l000000000045B50C
	// succ:  l000000000045B4F0 l000000000045B50C
l000000000045B4F0:
	w0 = Mem0[x29 + 80:word32]
	x22 = 0x00000000004AE000
	w31 = w0 - 0x00000001
	NZCV = cond(w31)
	branch Test(LE,ZCV) l000000000045B590
	// succ:  l000000000045B500 l000000000045B590
l000000000045B500:
	w0 = 0x00000020
	Mem0[x20:byte] = (byte) w0
	Mem0[x20 + 1:byte] = 0x00
	// succ:  l000000000045B50C
l000000000045B50C:
	x1 = x20
	x0 = x21
	w2 = 0x00000000
	call array_to_string (retsize: 0;)
	x19 = x0
	x1 = x22 + 0x0000000000000720
	x0 = x20
	w2 = 0x0000022F
	call sh_xfree (retsize: 0;)
	goto l000000000045B4A0
	// succ:  l000000000045B4A0
l000000000045B534:
	x0 = x21
	call array_remove_quoted_nulls (retsize: 0;)
	x0 = 0x0000000000000000
	call ifs_firstchar (retsize: 0;)
	x20 = x0
	x1 = x20
	x0 = x21
	w2 = 0x00000000
	call array_to_string (retsize: 0;)
	x1 = 0x00000000004AE000
	x19 = x0
	x1 = x1 + 0x0000000000000720
	x0 = x20
	w2 = 0x00000223
	call sh_xfree (retsize: 0;)
	goto l000000000045B4A0
	// succ:  l000000000045B4A0
l000000000045B574:
	x0 = 0x0000000000000000
	v29 = sp + 16
	x19 = Mem0[v29:word64]
	v29 = v29 + 8
	x20 = Mem0[v29:word64]
	v30 = sp + 32
	x21 = Mem0[v30:word64]
	v30 = v30 + 8
	x22 = Mem0[v30:word64]
	v31 = sp + 48
	x23 = Mem0[v31:word64]
	v31 = v31 + 8
	x24 = Mem0[v31:word64]
	x25 = Mem0[sp + 64:word64]
	x29 = Mem0[sp:word64]
	sp = sp + 8
	x30 = Mem0[sp:word64]
	sp = sp + 96
	return
	// succ:  array_modcase_exit
l000000000045B590:
	x0 = x20
	x1 = 0x0000000000000002
	x2 = x22 + 0x0000000000000720
	w3 = 0x0000022A
	call sh_xrealloc (retsize: 0;)
	x20 = x0
	goto l000000000045B500
	// succ:  l000000000045B500
l000000000045B5AC:
	x0 = x1
	goto l000000000045B4AC
	// succ:  l000000000045B4AC
array_modcase_exit:


// fn000000000045B5B4
// Return size: 0
void fn000000000045B5B4()
fn000000000045B5B4_entry:
	// succ:  l000000000045B5B4 l000000000045B5B4
l000000000045B5B4:
	sp = fp
	sp = v3
	sp = sp + -80
	Mem0[sp:word64] = x29
	sp = sp + 8
	Mem0[sp:word64] = x30
	x29 = x31 + 0x0000000000000000
	v7 = sp + 16
	Mem0[v7:word64] = x19
	v7 = v7 + 8
	Mem0[v7:word64] = x20
	v10 = sp + 48
	Mem0[v10:word64] = x23
	v10 = v10 + 8
	Mem0[v10:word64] = x24
	v13 = sp + 32
	Mem0[v13:word64] = x21
	v13 = v13 + 8
	Mem0[v13:word64] = x22
	v16 = sp + 64
	Mem0[v16:word64] = x25
	v16 = v16 + 8
	Mem0[v16:word64] = x26
	w20 = w4
	x19 = x0
	x22 = x1
	x23 = x2
	x24 = x3
	branch (w20 & 0x00000001) == 0x00000000 l000000000045B6E8
	// succ:  l000000000045B5E4 l000000000045B6E8
l000000000045B5E4:
	x26 = 0x00000000004AE000
	x25 = x26 + 0x0000000000000738
	x1 = x25
	w2 = 0x00000087
	x0 = 0x0000000000000030
	call sh_xmalloc (retsize: 0;)
	x21 = x0
	x0 = Mem0[x19:word64]
	strlen(x0)
	sp = sp + 0xFFFFFFFFFFFFFFF8
	x1 = x25
	w2 = 0x00000088
	x0 = x0 + 0x0000000000000001
	call sh_xmalloc (retsize: 0;)
	x1 = Mem0[x19:word64]
	strcpy(x0, x1)
	sp = sp + 0xFFFFFFFFFFFFFFF8
	w1 = Mem0[x19 + 40:word32]
	Mem0[x21:word64] = x0
	branch (w1 & 0x00000040) == 0x00000000 l000000000045B718
	// succ:  l000000000045B62C l000000000045B718
l000000000045B62C:
	x0 = Mem0[x19 + 8:word64]
	x1 = x23
	call assoc_reference (retsize: 0;)
	x25 = x0
	// succ:  l000000000045B63C
l000000000045B63C:
	branch x25 == 0x0000000000000000 l000000000045B740
	// succ:  l000000000045B640 l000000000045B740
l000000000045B640:
	x0 = x25
	strlen(x0)
	sp = sp + 0xFFFFFFFFFFFFFFF8
	w2 = 0x0000008E
	x1 = x26 + 0x0000000000000738
	x0 = x0 + 0x0000000000000001
	call sh_xmalloc (retsize: 0;)
	x1 = x25
	strcpy(x0, x1)
	sp = sp + 0xFFFFFFFFFFFFFFF8
	Mem0[x21 + 8:word64] = x0
	// succ:  l000000000045B664
l000000000045B664:
	w0 = Mem0[x19 + 40:word32]
	w1 = 0xFFFFFFBA
	w0 = w0 & w1
	w2 = w20
	Mem0[x21 + 40:word32] = w0
	x1 = x24
	Mem0[x21 + 16:word64] = 0x0000000000000000
	x0 = x21
	call make_variable_value (retsize: 0;)
	x20 = x0
	x0 = x21
	call dispose_variable (retsize: 0;)
	x4 = Mem0[x19 + 32:word64]
	branch x4 != 0x0000000000000000 l000000000045B700
	// succ:  l000000000045B69C l000000000045B700
l000000000045B69C:
	w0 = Mem0[x19 + 40:word32]
	branch (w0 & 0x00000040) == 0x00000000 l000000000045B72C
	// succ:  l000000000045B6A4 l000000000045B72C
l000000000045B6A4:
	x0 = Mem0[x19 + 8:word64]
	x1 = x23
	x2 = x20
	call assoc_insert (retsize: 0;)
	// succ:  l000000000045B6B4
l000000000045B6B4:
	branch x20 == 0x0000000000000000 l000000000045B6CC
	// succ:  l000000000045B6B8 l000000000045B6CC
l000000000045B6B8:
	x1 = 0x00000000004AE000
	x0 = x20
	x1 = x1 + 0x0000000000000738
	w2 = 0x000000A4
	call sh_xfree (retsize: 0;)
	// succ:  l000000000045B6CC
l000000000045B6CC:
	x0 = x19
	v29 = sp + 32
	x21 = Mem0[v29:word64]
	v29 = v29 + 8
	x22 = Mem0[v29:word64]
	v30 = sp + 16
	x19 = Mem0[v30:word64]
	v30 = v30 + 8
	x20 = Mem0[v30:word64]
	v31 = sp + 48
	x23 = Mem0[v31:word64]
	v31 = v31 + 8
	x24 = Mem0[v31:word64]
	v32 = sp + 64
	x25 = Mem0[v32:word64]
	v32 = v32 + 8
	x26 = Mem0[v32:word64]
	x29 = Mem0[sp:word64]
	sp = sp + 8
	x30 = Mem0[sp:word64]
	sp = sp + 80
	return
	// succ:  fn000000000045B5B4_exit
l000000000045B6E8:
	w2 = w4
	x1 = x3
	call make_variable_value (retsize: 0;)
	x4 = Mem0[x19 + 32:word64]
	x20 = x0
	branch x4 == 0x0000000000000000 l000000000045B69C
	// succ:  l000000000045B700 l000000000045B69C
l000000000045B700:
	x0 = x19
	x1 = x20
	x2 = x22
	x3 = x23
	call x4 (retsize: 0;)
	goto l000000000045B6B4
	// succ:  l000000000045B6B4
l000000000045B718:
	x0 = Mem0[x19 + 8:word64]
	x1 = x22
	call array_reference (retsize: 0;)
	x25 = x0
	goto l000000000045B63C
	// succ:  l000000000045B63C
l000000000045B72C:
	x0 = Mem0[x19 + 8:word64]
	x1 = x22
	x2 = x20
	call array_insert (retsize: 0;)
	goto l000000000045B6B4
	// succ:  l000000000045B6B4
l000000000045B740:
	x0 = 0x0000000000000001
	x1 = x26 + 0x0000000000000738
	w2 = 0x00000091
	call sh_xmalloc (retsize: 0;)
	Mem0[x21 + 8:word64] = x0
	Mem0[x0:byte] = (byte) w25
	goto l000000000045B664
	// succ:  l000000000045B664
fn000000000045B5B4_exit:


// convert_var_to_array
// Return size: 0
void convert_var_to_array()
convert_var_to_array_entry:
	// succ:  l000000000045B75C
l000000000045B75C:
	sp = fp
	sp = sp + -48
	Mem0[sp:word64] = x29
	sp = sp + 8
	Mem0[sp:word64] = x30
	x29 = x31 + 0x0000000000000000
	v8 = sp + 16
	Mem0[v8:word64] = x19
	v8 = v8 + 8
	Mem0[v8:word64] = x20
	x20 = Mem0[x0 + 8:word64]
	Mem0[sp + 32:word64] = x21
	x19 = x0
	call array_create (retsize: 0;)
	x21 = x0
	branch x20 == 0x0000000000000000 l000000000045B78C
	// succ:  l000000000045B780 l000000000045B78C
l000000000045B780:
	x1 = 0x0000000000000000
	x2 = x20
	call array_insert (retsize: 0;)
	// succ:  l000000000045B78C
l000000000045B78C:
	x0 = Mem0[x19 + 8:word64]
	branch x0 == 0x0000000000000000 l000000000045B7A4
	// succ:  l000000000045B794 l000000000045B7A4
l000000000045B794:
	x1 = 0x00000000004AE000
	x1 = x1 + 0x0000000000000738
	w2 = 0x00000048
	call sh_xfree (retsize: 0;)
	// succ:  l000000000045B7A4
l000000000045B7A4:
	x0 = Mem0[x19 + 16:word64]
	Mem0[x19 + 8:word64] = x21
	Mem0[x19 + 24:word64] = 0x0000000000000000
	Mem0[x19 + 32:word64] = 0x0000000000000000
	branch x0 == 0x0000000000000000 l000000000045B7CC
	// succ:  l000000000045B7B8 l000000000045B7CC
l000000000045B7B8:
	x1 = 0x00000000004AE000
	x1 = x1 + 0x0000000000000738
	w2 = 0x0000004F
	call sh_xfree (retsize: 0;)
	Mem0[x19 + 16:word64] = 0x0000000000000000
	// succ:  l000000000045B7CC
l000000000045B7CC:
	w0 = Mem0[x19 + 40:word32]
	branch (w0 & 0x00000001) == 0x00000000 l000000000045B7E4
	// succ:  l000000000045B7D4 l000000000045B7E4
l000000000045B7D4:
	x1 = 0x00000000004D6000
	w2 = Mem0[x1 + 2648:word32]
	w2 = w2 + 0x00000001
	Mem0[x1 + 2648:word32] = w2
	// succ:  l000000000045B7E4
l000000000045B7E4:
	w0 = w0 & 0xFFFFEFFF
	w0 = w0 | 0x00000004
	Mem0[x19 + 40:word32] = w0
	x21 = Mem0[sp + 32:word64]
	x0 = x19
	v15 = sp + 16
	x19 = Mem0[v15:word64]
	v15 = v15 + 8
	x20 = Mem0[v15:word64]
	x29 = Mem0[sp:word64]
	sp = sp + 8
	x30 = Mem0[sp:word64]
	sp = sp + 48
	return
	// succ:  convert_var_to_array_exit
convert_var_to_array_exit:


// convert_var_to_assoc
// Return size: 0
void convert_var_to_assoc()
convert_var_to_assoc_entry:
	// succ:  l000000000045B804
l000000000045B804:
	sp = fp
	sp = sp + -48
	Mem0[sp:word64] = x29
	sp = sp + 8
	Mem0[sp:word64] = x30
	x29 = x31 + 0x0000000000000000
	v8 = sp + 16
	Mem0[v8:word64] = x19
	v8 = v8 + 8
	Mem0[v8:word64] = x20
	Mem0[sp + 32:word64] = x21
	x19 = x0
	x21 = Mem0[x0 + 8:word64]
	w0 = 0x00000000
	call hash_create (retsize: 0;)
	x20 = x0
	branch x21 == 0x0000000000000000 l000000000045B860
	// succ:  l000000000045B82C l000000000045B860
l000000000045B82C:
	x1 = 0x00000000004AE000
	x1 = x1 + 0x0000000000000738
	w2 = 0x00000065
	x0 = 0x0000000000000002
	call sh_xmalloc (retsize: 0;)
	x1 = x0
	x0 = 0x00000000004AC000
	x0 = x0 + 0xFFFFFFFFFFFFF988
	v14 = Mem0[x0:word16]
	w2 = (word32) v14
	x0 = x20
	Mem0[x1:word16] = (word16) w2
	x2 = x21
	call assoc_insert (retsize: 0;)
	// succ:  l000000000045B860
l000000000045B860:
	x0 = Mem0[x19 + 8:word64]
	branch x0 == 0x0000000000000000 l000000000045B878
	// succ:  l000000000045B868 l000000000045B878
l000000000045B868:
	x1 = 0x00000000004AE000
	x1 = x1 + 0x0000000000000738
	w2 = 0x00000067
	call sh_xfree (retsize: 0;)
	// succ:  l000000000045B878
l000000000045B878:
	x0 = Mem0[x19 + 16:word64]
	Mem0[x19 + 8:word64] = x20
	Mem0[x19 + 24:word64] = 0x0000000000000000
	Mem0[x19 + 32:word64] = 0x0000000000000000
	branch x0 == 0x0000000000000000 l000000000045B8A0
	// succ:  l000000000045B88C l000000000045B8A0
l000000000045B88C:
	x1 = 0x00000000004AE000
	x1 = x1 + 0x0000000000000738
	w2 = 0x0000006E
	call sh_xfree (retsize: 0;)
	Mem0[x19 + 16:word64] = 0x0000000000000000
	// succ:  l000000000045B8A0
l000000000045B8A0:
	w0 = Mem0[x19 + 40:word32]
	branch (w0 & 0x00000001) == 0x00000000 l000000000045B8B8
	// succ:  l000000000045B8A8 l000000000045B8B8
l000000000045B8A8:
	x1 = 0x00000000004D6000
	w2 = Mem0[x1 + 2648:word32]
	w2 = w2 + 0x00000001
	Mem0[x1 + 2648:word32] = w2
	// succ:  l000000000045B8B8
l000000000045B8B8:
	w0 = w0 & 0xFFFFEFFF
	w0 = w0 | 0x00000040
	Mem0[x19 + 40:word32] = w0
	x21 = Mem0[sp + 32:word64]
	x0 = x19
	v16 = sp + 16
	x19 = Mem0[v16:word64]
	v16 = v16 + 8
	x20 = Mem0[v16:word64]
	x29 = Mem0[sp:word64]
	sp = sp + 8
	x30 = Mem0[sp:word64]
	sp = sp + 48
	return
	// succ:  convert_var_to_assoc_exit
convert_var_to_assoc_exit:


// bind_array_variable
// Return size: 0
void bind_array_variable()
bind_array_variable_entry:
	// succ:  l000000000045B8D8
l000000000045B8D8:
	sp = fp
	sp = sp + -64
	Mem0[sp:word64] = x29
	sp = sp + 8
	Mem0[sp:word64] = x30
	x29 = x31 + 0x0000000000000000
	x4 = 0x00000000004DF000
	v9 = sp + 32
	Mem0[v9:word64] = x21
	v9 = v9 + 8
	Mem0[v9:word64] = x22
	x21 = x1
	x1 = Mem0[x4 + 3200:word64]
	v13 = sp + 16
	Mem0[v13:word64] = x19
	v13 = v13 + 8
	Mem0[v13:word64] = x20
	Mem0[sp + 48:word64] = x23
	x20 = x2
	x23 = x0
	w22 = w3
	call var_lookup (retsize: 0;)
	x19 = x0
	branch x0 == 0x0000000000000000 l000000000045B97C
	// succ:  l000000000045B910 l000000000045B97C
l000000000045B910:
	w5 = Mem0[x0 + 40:word32]
	w6 = 0x00004002
	NZ = cond(w5 & w6)
	C = false
	V = false
	branch Test(EQ,Z) l000000000045B944
	// succ:  l000000000045B920 l000000000045B944
l000000000045B920:
	branch (w5 & 0x00000002) == 0x00000000 l000000000045B92C
	// succ:  l000000000045B924 l000000000045B92C
l000000000045B924:
	x0 = x23
	call err_readonly (retsize: 0;)
	// succ:  l000000000045B92C
l000000000045B92C:
	x0 = x19
	v29 = sp + 32
	x21 = Mem0[v29:word64]
	v29 = v29 + 8
	x22 = Mem0[v29:word64]
	v30 = sp + 16
	x19 = Mem0[v30:word64]
	v30 = v30 + 8
	x20 = Mem0[v30:word64]
	x23 = Mem0[sp + 48:word64]
	x29 = Mem0[sp:word64]
	sp = sp + 8
	x30 = Mem0[sp:word64]
	sp = sp + 64
	return
	// succ:  bind_array_variable_exit
l000000000045B944:
	branch (w5 & 0x00000004) == 0x00000000 l000000000045B970
	// succ:  l000000000045B948 l000000000045B970
l000000000045B948:
	x0 = x19
	x1 = x21
	x3 = x20
	w4 = w22
	v27 = sp + 16
	x19 = Mem0[v27:word64]
	v27 = v27 + 8
	x20 = Mem0[v27:word64]
	v28 = sp + 32
	x21 = Mem0[v28:word64]
	v28 = v28 + 8
	x22 = Mem0[v28:word64]
	x23 = Mem0[sp + 48:word64]
	x29 = Mem0[sp:word64]
	sp = sp + 8
	x30 = Mem0[sp:word64]
	sp = sp + 64
	x2 = 0x0000000000000000
	// succ:  l000000000045B96C_thunk_fn000000000045B5B4
l000000000045B96C_thunk_fn000000000045B5B4:
	call fn000000000045B5B4 (retsize: 0;)
	return
	// succ:  bind_array_variable_exit
l000000000045B970:
	call convert_var_to_array (retsize: 0;)
	x19 = x0
	goto l000000000045B948
	// succ:  l000000000045B948
l000000000045B97C:
	x0 = x23
	call make_new_array_variable (retsize: 0;)
	x19 = x0
	goto l000000000045B948
	// succ:  l000000000045B948
bind_array_variable_exit:


// bind_array_element
// Return size: 0
void bind_array_element()
bind_array_element_entry:
	// succ:  l000000000045B98C
l000000000045B98C:
	sp = fp
	x5 = x2
	w4 = w3
	x2 = 0x0000000000000000
	x3 = x5
	// succ:  l000000000045B99C_thunk_fn000000000045B5B4
l000000000045B99C_thunk_fn000000000045B5B4:
	call fn000000000045B5B4 (retsize: 0;)
	return
	// succ:  bind_array_element_exit
bind_array_element_exit:


// bind_assoc_variable
// Return size: 0
void bind_assoc_variable()
bind_assoc_variable_entry:
	// succ:  l000000000045B9A0
l000000000045B9A0:
	sp = fp
	sp = sp + -32
	Mem0[sp:word64] = x29
	sp = sp + 8
	Mem0[sp:word64] = x30
	x29 = x31 + 0x0000000000000000
	w5 = Mem0[x0 + 40:word32]
	w6 = 0x00004002
	Mem0[sp + 16:word64] = x19
	NZ = cond(w5 & w6)
	C = false
	V = false
	x19 = x0
	branch Test(EQ,Z) l000000000045B9EC
	// succ:  l000000000045B9C0 l000000000045B9EC
l000000000045B9C0:
	branch (w5 & 0x00000002) == 0x00000000 l000000000045B9D4
	// succ:  l000000000045B9C4 l000000000045B9D4
l000000000045B9C4:
	x0 = x19
	x19 = Mem0[sp + 16:word64]
	x29 = Mem0[sp:word64]
	sp = sp + 8
	x30 = Mem0[sp:word64]
	sp = sp + 32
	return
	// succ:  bind_assoc_variable_exit
l000000000045B9D4:
	x0 = x1
	call err_readonly (retsize: 0;)
	x0 = x19
	x19 = Mem0[sp + 16:word64]
	x29 = Mem0[sp:word64]
	sp = sp + 8
	x30 = Mem0[sp:word64]
	sp = sp + 32
	return
	// succ:  bind_assoc_variable_exit
l000000000045B9EC:
	x19 = Mem0[sp + 16:word64]
	x29 = Mem0[sp:word64]
	sp = sp + 8
	x30 = Mem0[sp:word64]
	sp = sp + 32
	x1 = 0x0000000000000000
	// succ:  l000000000045B9F8_thunk_fn000000000045B5B4
l000000000045B9F8_thunk_fn000000000045B5B4:
	call fn000000000045B5B4 (retsize: 0;)
	return
	// succ:  bind_assoc_variable_exit
bind_assoc_variable_exit:


// find_or_make_array_variable
// Return size: 0
void find_or_make_array_variable()
find_or_make_array_variable_entry:
	// succ:  l000000000045B9FC
l000000000045B9FC:
	sp = fp
	sp = sp + -32
	Mem0[sp:word64] = x29
	sp = sp + 8
	Mem0[sp:word64] = x30
	x29 = x31 + 0x0000000000000000
	v8 = sp + 16
	Mem0[v8:word64] = x19
	v8 = v8 + 8
	Mem0[v8:word64] = x20
	x20 = x0
	w19 = w1
	call find_variable (retsize: 0;)
	branch x0 == 0x0000000000000000 l000000000045BA7C
	// succ:  l000000000045BA18 l000000000045BA7C
l000000000045BA18:
	branch (w19 & 0x00000001) == 0x00000000 l000000000045BA44
	// succ:  l000000000045BA1C l000000000045BA44
l000000000045BA1C:
	w2 = Mem0[x0 + 40:word32]
	w1 = 0x00004002
	NZ = cond(w2 & w1)
	C = false
	V = false
	branch Test(EQ,Z) l000000000045BA44
	// succ:  l000000000045BA2C l000000000045BA44
l000000000045BA2C:
	x19 = 0x0000000000000000
	branch (w2 & 0x00000002) == 0x00000000 l000000000045BA70
	// succ:  l000000000045BA34 l000000000045BA70
l000000000045BA34:
	x0 = x19
	v17 = sp + 16
	x19 = Mem0[v17:word64]
	v17 = v17 + 8
	x20 = Mem0[v17:word64]
	x29 = Mem0[sp:word64]
	sp = sp + 8
	x30 = Mem0[sp:word64]
	sp = sp + 32
	return
	// succ:  find_or_make_array_variable_exit
l000000000045BA44:
	branch (w19 & 0x00000002) == 0x00000000 l000000000045BA50
	// succ:  l000000000045BA48 l000000000045BA50
l000000000045BA48:
	w1 = Mem0[x0 + 40:word32]
	branch (w1 & 0x00000004) == 0x00000000 l000000000045BAA0
	// succ:  l000000000045BA50 l000000000045BAA0
l000000000045BA50:
	w2 = Mem0[x0 + 40:word32]
	w1 = 0x00000044
	NZ = cond(w2 & w1)
	C = false
	V = false
	x19 = x0
	branch Test(NE,Z) l000000000045BA34
	// succ:  l000000000045BA64 l000000000045BA34
l000000000045BA64:
	v20 = sp + 16
	x19 = Mem0[v20:word64]
	v20 = v20 + 8
	x20 = Mem0[v20:word64]
	x29 = Mem0[sp:word64]
	sp = sp + 8
	x30 = Mem0[sp:word64]
	sp = sp + 32
	// succ:  l000000000045BA6C_thunk_convert_var_to_array
l000000000045BA6C_thunk_convert_var_to_array:
	call convert_var_to_array (retsize: 0;)
	return
	// succ:  find_or_make_array_variable_exit
l000000000045BA70:
	x0 = x20
	call err_readonly (retsize: 0;)
	goto l000000000045BA34
	// succ:  l000000000045BA34
l000000000045BA7C:
	branch (w19 & 0x00000002) == 0x00000000 l000000000045BA90
	// succ:  l000000000045BA80 l000000000045BA90
l000000000045BA80:
	x0 = x20
	v18 = sp + 16
	x19 = Mem0[v18:word64]
	v18 = v18 + 8
	x20 = Mem0[v18:word64]
	x29 = Mem0[sp:word64]
	sp = sp + 8
	x30 = Mem0[sp:word64]
	sp = sp + 32
	// succ:  l000000000045BA8C_thunk_make_new_assoc_variable
l000000000045BA8C_thunk_make_new_assoc_variable:
	call make_new_assoc_variable (retsize: 0;)
	return
	// succ:  find_or_make_array_variable_exit
l000000000045BA90:
	x0 = x20
	v19 = sp + 16
	x19 = Mem0[v19:word64]
	v19 = v19 + 8
	x20 = Mem0[v19:word64]
	x29 = Mem0[sp:word64]
	sp = sp + 8
	x30 = Mem0[sp:word64]
	sp = sp + 32
	// succ:  l000000000045BA9C_thunk_make_new_array_variable
l000000000045BA9C_thunk_make_new_array_variable:
	call make_new_array_variable (retsize: 0;)
	return
	// succ:  find_or_make_array_variable_exit
l000000000045BAA0:
	x1 = 0x00000000004AE000
	w2 = 0x00000005
	x1 = x1 + 0x0000000000000750
	x0 = 0x0000000000000000
	dcgettext(x0, x1, x2)
	sp = sp + 0xFFFFFFFFFFFFFFF8
	x1 = x20
	call report_error (retsize: 0;)
	x19 = 0x0000000000000000
	goto l000000000045BA34
	// succ:  l000000000045BA34
find_or_make_array_variable_exit:


// assign_array_var_from_word_list
// Return size: 0
void assign_array_var_from_word_list()
assign_array_var_from_word_list_entry:
	// succ:  l000000000045BAC4
l000000000045BAC4:
	sp = fp
	sp = sp + -48
	Mem0[sp:word64] = x29
	sp = sp + 8
	Mem0[sp:word64] = x30
	x29 = x31 + 0x0000000000000000
	v8 = sp + 16
	Mem0[v8:word64] = x19
	v8 = v8 + 8
	Mem0[v8:word64] = x20
	v11 = sp + 32
	Mem0[v11:word64] = x21
	v11 = v11 + 8
	Mem0[v11:word64] = x22
	x19 = x1
	x21 = x0
	x22 = Mem0[x0 + 8:word64]
	x20 = 0x0000000000000000
	branch (w2 & 0x00000001) == 0x00000000 l000000000045BAF0
	// succ:  l000000000045BAE8 l000000000045BAF0
l000000000045BAE8:
	x20 = Mem0[x22 + 8:word64]
	x20 = x20 + 0x0000000000000001
	// succ:  l000000000045BAF0
l000000000045BAF0:
	branch x19 == 0x0000000000000000 l000000000045BB20
	// succ:  l000000000045BAF4 l000000000045BB20
l000000000045BAF4:
	x4 = Mem0[x21 + 32:word64]
	x0 = x21
	x2 = x20
	x3 = 0x0000000000000000
	branch x4 == 0x0000000000000000 l000000000045BB34
	// succ:  l000000000045BB08 l000000000045BB34
l000000000045BB08:
	x1 = Mem0[x19 + 8:word64]
	x1 = Mem0[x1:word64]
	call x4 (retsize: 0;)
	// succ:  l000000000045BB14
l000000000045BB14:
	x19 = Mem0[x19:word64]
	x20 = x20 + 0x0000000000000001
	branch x19 != 0x0000000000000000 l000000000045BAF4
	// succ:  l000000000045BB20 l000000000045BAF4
l000000000045BB20:
	x0 = x21
	v18 = sp + 16
	x19 = Mem0[v18:word64]
	v18 = v18 + 8
	x20 = Mem0[v18:word64]
	v19 = sp + 32
	x21 = Mem0[v19:word64]
	v19 = v19 + 8
	x22 = Mem0[v19:word64]
	x29 = Mem0[sp:word64]
	sp = sp + 8
	x30 = Mem0[sp:word64]
	sp = sp + 48
	return
	// succ:  assign_array_var_from_word_list_exit
l000000000045BB34:
	x2 = Mem0[x19 + 8:word64]
	x1 = x20
	x2 = Mem0[x2:word64]
	x0 = x22
	call array_insert (retsize: 0;)
	goto l000000000045BB14
	// succ:  l000000000045BB14
assign_array_var_from_word_list_exit:


// expand_compound_array_assignment
// Return size: 0
void expand_compound_array_assignment()
expand_compound_array_assignment_entry:
	// succ:  l000000000045BB4C
l000000000045BB4C:
	sp = fp
	sp = sp + -176
	Mem0[sp:word64] = x29
	sp = sp + 8
	Mem0[sp:word64] = x30
	x29 = x31 + 0x0000000000000000
	v8 = sp + 48
	Mem0[v8:word64] = x23
	v8 = v8 + 8
	Mem0[v8:word64] = x24
	v11 = sp + 16
	Mem0[v11:word64] = x19
	v11 = v11 + 8
	Mem0[v11:word64] = x20
	v14 = sp + 32
	Mem0[v14:word64] = x21
	v14 = v14 + 8
	Mem0[v14:word64] = x22
	v17 = sp + 64
	Mem0[v17:word64] = x25
	v17 = v17 + 8
	Mem0[v17:word64] = x26
	v20 = sp + 80
	Mem0[v20:word64] = x27
	v20 = v20 + 8
	Mem0[v20:word64] = x28
	v23 = Mem0[x1:byte]
	w0 = (word32) v23
	x24 = x1
	w31 = w0 - 0x00000028
	NZCV = cond(w31)
	x23 = x1
	branch Test(EQ,Z) l000000000045BDEC
	// succ:  l000000000045BB7C l000000000045BDEC
l000000000045BB7C:
	x2 = 0x00000000004AE000
	x0 = x23
	w1 = 0x00000001
	x2 = x2 + 0x0000000000000780
	call parse_string_to_word_list (retsize: 0;)
	x22 = x0
	branch x0 == 0x0000000000000000 l000000000045BDB8
	// succ:  l000000000045BB98 l000000000045BDB8
l000000000045BB98:
	x28 = 0x00000000004E3000
	x27 = 0x00000000004AE000
	x26 = 0x00000000004C2000
	x28 = x28 + 0x0000000000000530
	x20 = x0
	x27 = x27 + 0x0000000000000738
	x26 = x26 + 0xFFFFFFFFFFFFFCC0
	Mem0[x29 + 112:word64] = x28
	goto l000000000045BBC4
	// succ:  l000000000045BBC4
l000000000045BBBC:
	x20 = Mem0[x20:word64]
	branch x20 == 0x0000000000000000 l000000000045BCEC
	// succ:  l000000000045BBC4 l000000000045BCEC
l000000000045BBC4:
	x2 = Mem0[x20 + 8:word64]
	branch x2 == 0x0000000000000000 l000000000045BBBC
	// succ:  l000000000045BBCC l000000000045BBBC
l000000000045BBCC:
	x0 = Mem0[x2:word64]
	branch x0 == 0x0000000000000000 l000000000045BBBC
	// succ:  l000000000045BBD4 l000000000045BBBC
l000000000045BBD4:
	v31 = Mem0[x0:byte]
	w3 = (word32) v31
	w31 = w3 - 0x0000005B
	NZCV = cond(w31)
	branch Test(NE,Z) l000000000045BBBC
	// succ:  l000000000045BBE0 l000000000045BBBC
l000000000045BBE0:
	w1 = 0x0000003D
	call mbschr (retsize: 0;)
	branch x0 == 0x0000000000000000 l000000000045BBBC
	// succ:  l000000000045BBEC l000000000045BBBC
l000000000045BBEC:
	x0 = Mem0[x20 + 8:word64]
	w25 = 0x00000000
	x28 = Mem0[x0:word64]
	Mem0[x29 + 96:word64] = 0x0000000000000000
	x0 = x28
	strlen(x0)
	sp = sp + 0xFFFFFFFFFFFFFFF8
	x3 = x0
l000000000045BCEC:
	x0 = x22
	call expand_words_no_vars (retsize: 0;)
	x19 = x0
	x0 = x22
	call dispose_words (retsize: 0;)
	x31 = x23 - x24
	NZCV = cond(x31)
	branch Test(EQ,Z) l000000000045BDCC
	// succ:  l000000000045BD08 l000000000045BDCC
l000000000045BD08:
	x1 = 0x00000000004AE000
	x0 = x23
	x1 = x1 + 0x0000000000000738
	w2 = 0x00000195
	call sh_xfree (retsize: 0;)
	x0 = x19
	// succ:  l000000000045BD20
l000000000045BD20:
	v34 = sp + 16
	x19 = Mem0[v34:word64]
	v34 = v34 + 8
	x20 = Mem0[v34:word64]
	v35 = sp + 32
	x21 = Mem0[v35:word64]
	v35 = v35 + 8
	x22 = Mem0[v35:word64]
	v36 = sp + 48
	x23 = Mem0[v36:word64]
	v36 = v36 + 8
	x24 = Mem0[v36:word64]
	v37 = sp + 64
	x25 = Mem0[v37:word64]
	v37 = v37 + 8
	x26 = Mem0[v37:word64]
	v38 = sp + 80
	x27 = Mem0[v38:word64]
	v38 = v38 + 8
	x28 = Mem0[v38:word64]
	x29 = Mem0[sp:word64]
	sp = sp + 8
	x30 = Mem0[sp:word64]
	sp = sp + 176
	return
	// succ:  expand_compound_array_assignment_exit
l000000000045BDB8:
	x19 = x0
	x0 = x22
	call dispose_words (retsize: 0;)
	x31 = x23 - x24
	NZCV = cond(x31)
	branch Test(NE,Z) l000000000045BD08
	// succ:  l000000000045BDCC l000000000045BD08
l000000000045BDCC:
	x0 = x19
	v40 = sp + 32
	x21 = Mem0[v40:word64]
	v40 = v40 + 8
	x22 = Mem0[v40:word64]
	v41 = sp + 16
	x19 = Mem0[v41:word64]
	v41 = v41 + 8
	x20 = Mem0[v41:word64]
	v42 = sp + 48
	x23 = Mem0[v42:word64]
	v42 = v42 + 8
	x24 = Mem0[v42:word64]
	v43 = sp + 64
	x25 = Mem0[v43:word64]
	v43 = v43 + 8
	x26 = Mem0[v43:word64]
	v44 = sp + 80
	x27 = Mem0[v44:word64]
	v44 = v44 + 8
	x28 = Mem0[v44:word64]
	x29 = Mem0[sp:word64]
	sp = sp + 8
	x30 = Mem0[sp:word64]
	sp = sp + 176
	return
	// succ:  expand_compound_array_assignment_exit
l000000000045BDEC:
	x1 = x29 + 0x0000000000000060
	w0 = 0x00000001
	x1 = x1 + 8
	Mem0[x1:word32] = w0
	x0 = x24
	call extract_array_assignment_list (retsize: 0;)
	x23 = x0
	branch x0 != 0x0000000000000000 l000000000045BB7C
	// succ:  l000000000045BE08 l000000000045BB7C
l000000000045BE08:
	goto l000000000045BD20
	// succ:  l000000000045BD20
expand_compound_array_assignment_exit:


// print_array_assignment
// Return size: 0
void print_array_assignment()
print_array_assignment_entry:
	// succ:  l000000000045BEC0
l000000000045BEC0:
	sp = fp
	sp = sp + -48
	Mem0[sp:word64] = x29
	sp = sp + 8
	Mem0[sp:word64] = x30
	x29 = x31 + 0x0000000000000000
	v6 = sp + 16
	Mem0[v6:word64] = x19
	v6 = v6 + 8
	Mem0[v6:word64] = x20
	x20 = x0
	x0 = Mem0[x0 + 8:word64]
	Mem0[sp + 32:word64] = x21
	w21 = w1
	call array_to_assign (retsize: 0;)
	x19 = x0
	x2 = Mem0[x20:word64]
	branch x0 == 0x0000000000000000 l000000000045BF20
	// succ:  l000000000045BEEC l000000000045BF20
l000000000045BEEC:
	x1 = 0x00000000004AC000
	x3 = x19
	x1 = x1 + 0x0000000000000348
	w0 = 0x00000001
	__printf_chk(x0, x1, Mem0[sp:<unknown>])
	sp = sp + 0xFFFFFFFFFFFFFFF8
	x0 = x19
	x21 = Mem0[sp + 32:word64]
	v17 = sp + 16
	x19 = Mem0[v17:word64]
	v17 = v17 + 8
	x20 = Mem0[v17:word64]
	x1 = 0x00000000004AE000
	x29 = Mem0[sp:word64]
	sp = sp + 8
	x30 = Mem0[sp:word64]
	sp = sp + 48
	x1 = x1 + 0x0000000000000738
	w2 = 0x000002B7
	// succ:  l000000000045BF1C_thunk_sh_xfree
l000000000045BF1C_thunk_sh_xfree:
	call sh_xfree (retsize: 0;)
	return
	// succ:  print_array_assignment_exit
l000000000045BF20:
	branch w21 != 0x00000000 l000000000045BF48
	// succ:  l000000000045BF24 l000000000045BF48
l000000000045BF24:
	v19 = sp + 16
	x19 = Mem0[v19:word64]
	v19 = v19 + 8
	x20 = Mem0[v19:word64]
	x21 = Mem0[sp + 32:word64]
	x3 = 0x00000000004AE000
	x1 = 0x00000000004AC000
	x29 = Mem0[sp:word64]
	sp = sp + 8
	x30 = Mem0[sp:word64]
	sp = sp + 48
	x3 = x3 + 0x0000000000000798
	w0 = 0x00000001
	x1 = x1 + 0x0000000000000348
	__printf_chk(x0, x1, Mem0[sp:<unknown>])
	return
	// succ:  print_array_assignment_exit
l000000000045BF48:
	v20 = sp + 16
	x19 = Mem0[v20:word64]
	v20 = v20 + 8
	x20 = Mem0[v20:word64]
	x21 = Mem0[sp + 32:word64]
	x3 = 0x00000000004AE000
	x1 = 0x00000000004AC000
	x29 = Mem0[sp:word64]
	sp = sp + 8
	x30 = Mem0[sp:word64]
	sp = sp + 48
	x3 = x3 + 0x0000000000000790
	w0 = 0x00000001
	x1 = x1 + 0x0000000000000348
	__printf_chk(x0, x1, Mem0[sp:<unknown>])
	return
	// succ:  print_array_assignment_exit
print_array_assignment_exit:


// print_assoc_assignment
// Return size: 0
void print_assoc_assignment()
print_assoc_assignment_entry:
	// succ:  l000000000045BF6C
l000000000045BF6C:
	sp = fp
	sp = sp + -48
	Mem0[sp:word64] = x29
	sp = sp + 8
	Mem0[sp:word64] = x30
	x29 = x31 + 0x0000000000000000
	v6 = sp + 16
	Mem0[v6:word64] = x19
	v6 = v6 + 8
	Mem0[v6:word64] = x20
	x20 = x0
	x0 = Mem0[x0 + 8:word64]
	Mem0[sp + 32:word64] = x21
	w21 = w1
	call assoc_to_assign (retsize: 0;)
	x19 = x0
	x2 = Mem0[x20:word64]
	branch x0 == 0x0000000000000000 l000000000045BFCC
	// succ:  l000000000045BF98 l000000000045BFCC
l000000000045BF98:
	x1 = 0x00000000004AC000
	x3 = x19
	x1 = x1 + 0x0000000000000348
	w0 = 0x00000001
	__printf_chk(x0, x1, Mem0[sp:<unknown>])
	sp = sp + 0xFFFFFFFFFFFFFFF8
	x0 = x19
	x21 = Mem0[sp + 32:word64]
	v17 = sp + 16
	x19 = Mem0[v17:word64]
	v17 = v17 + 8
	x20 = Mem0[v17:word64]
	x1 = 0x00000000004AE000
	x29 = Mem0[sp:word64]
	sp = sp + 8
	x30 = Mem0[sp:word64]
	sp = sp + 48
	x1 = x1 + 0x0000000000000738
	w2 = 0x000002CB
	// succ:  l000000000045BFC8_thunk_sh_xfree
l000000000045BFC8_thunk_sh_xfree:
	call sh_xfree (retsize: 0;)
	return
	// succ:  print_assoc_assignment_exit
l000000000045BFCC:
	branch w21 != 0x00000000 l000000000045BFF4
	// succ:  l000000000045BFD0 l000000000045BFF4
l000000000045BFD0:
	v19 = sp + 16
	x19 = Mem0[v19:word64]
	v19 = v19 + 8
	x20 = Mem0[v19:word64]
	x21 = Mem0[sp + 32:word64]
	x3 = 0x00000000004AE000
	x1 = 0x00000000004AC000
	x29 = Mem0[sp:word64]
	sp = sp + 8
	x30 = Mem0[sp:word64]
	sp = sp + 48
	x3 = x3 + 0x0000000000000798
	w0 = 0x00000001
	x1 = x1 + 0x0000000000000348
	__printf_chk(x0, x1, Mem0[sp:<unknown>])
	return
	// succ:  print_assoc_assignment_exit
l000000000045BFF4:
	v20 = sp + 16
	x19 = Mem0[v20:word64]
	v20 = v20 + 8
	x20 = Mem0[v20:word64]
	x21 = Mem0[sp + 32:word64]
	x3 = 0x00000000004AE000
	x1 = 0x00000000004AC000
	x29 = Mem0[sp:word64]
	sp = sp + 8
	x30 = Mem0[sp:word64]
	sp = sp + 48
	x3 = x3 + 0x0000000000000790
	w0 = 0x00000001
	x1 = x1 + 0x0000000000000348
	__printf_chk(x0, x1, Mem0[sp:<unknown>])
	return
	// succ:  print_assoc_assignment_exit
print_assoc_assignment_exit:


// valid_array_reference
// Return size: 0
void valid_array_reference()
valid_array_reference_entry:
	// succ:  l000000000045C018
l000000000045C018:
	sp = fp
	sp = sp + -32
	Mem0[sp:word64] = x29
	sp = sp + 8
	Mem0[sp:word64] = x30
	x29 = x31 + 0x0000000000000000
	w1 = 0x0000005B
	v9 = sp + 16
	Mem0[v9:word64] = x19
	v9 = v9 + 8
	Mem0[v9:word64] = x20
	x20 = x0
	call mbschr (retsize: 0;)
	x19 = x0
	branch x0 == 0x0000000000000000 l000000000045C050
	// succ:  l000000000045C038 l000000000045C050
l000000000045C038:
	Mem0[x0:byte] = 0x00
	x0 = x20
	call legal_identifier (retsize: 0;)
	w1 = 0x0000005B
	Mem0[x19:byte] = (byte) w1
	branch w0 != 0x00000000 l000000000045C060
	// succ:  l000000000045C050 l000000000045C060
l000000000045C050:
	w0 = 0x00000000
	// succ:  l000000000045C054
l000000000045C054:
	v12 = sp + 16
	x19 = Mem0[v12:word64]
	v12 = v12 + 8
	x20 = Mem0[v12:word64]
	x29 = Mem0[sp:word64]
	sp = sp + 8
	x30 = Mem0[sp:word64]
	sp = sp + 32
	return
	// succ:  valid_array_reference_exit
l000000000045C060:
	w1 = 0x00000000
	w2 = w1
	x0 = x19
	call skipsubscript (retsize: 0;)
	v14 = Mem0[x19 + (int64) ((int32) w0):byte]
	w1 = (word32) v14
	w31 = w1 - 0x0000005D
	NZCV = cond(w31)
	branch Test(NE,Z) l000000000045C050
	// succ:  l000000000045C07C l000000000045C050
l000000000045C07C:
	w31 = w0 - 0x00000001
	NZCV = cond(w31)
	branch Test(LE,ZCV) l000000000045C050
	// succ:  l000000000045C084 l000000000045C050
l000000000045C084:
	v19 = Mem0[x19 + 1:byte]
	w1 = (word32) v19
	w31 = w1 - 0x00000009
	NZCV = cond(w31)
	branch Test(NE,Z) l000000000045C0C8
	// succ:  l000000000045C090 l000000000045C0C8
l000000000045C090:
	x19 = x19 + 0x0000000000000002
	w0 = w0 - 0x00000002
	x0 = x19 + x0
	goto l000000000045C0AC
	// succ:  l000000000045C0AC
l000000000045C0A0:
	v20 = Mem0[x19:byte]
	w1 = (word32) v20
	x19 = x19 + 1
	w31 = w1 - 0x00000009
	NZCV = cond(w31)
	branch Test(NE,Z) l000000000045C0B8
	// succ:  l000000000045C0AC l000000000045C0B8
l000000000045C0AC:
	x31 = x19 - x0
	NZCV = cond(x31)
	branch Test(NE,Z) l000000000045C0A0
	// succ:  l000000000045C0B4 l000000000045C0A0
l000000000045C0B4:
	goto l000000000045C050
	// succ:  l000000000045C050
l000000000045C0B8:
	w31 = w1 - 0x00000020
	NZCV = cond(w31)
	branch Test(EQ,Z) l000000000045C0AC
	// succ:  l000000000045C0C0 l000000000045C0AC
l000000000045C0C0:
	w0 = 0x00000001
	goto l000000000045C054
	// succ:  l000000000045C054
l000000000045C0C8:
	w31 = w1 - 0x00000020
	NZCV = cond(w31)
	branch Test(EQ,Z) l000000000045C090
	// succ:  l000000000045C0D0 l000000000045C090
l000000000045C0D0:
	w0 = 0x00000001
	goto l000000000045C054
	// succ:  l000000000045C054
valid_array_reference_exit:


// array_expand_index
// Return size: 0
void array_expand_index()
array_expand_index_entry:
	// succ:  l000000000045C0D8
l000000000045C0D8:
	sp = fp
	sp = sp + -80
	Mem0[sp:word64] = x29
	sp = sp + 8
	Mem0[sp:word64] = x30
	x29 = x31 + 0x0000000000000000
	v8 = sp + 16
	Mem0[v8:word64] = x19
	v8 = v8 + 8
	Mem0[v8:word64] = x20
	x19 = 0x00000000004AE000
	v11 = sp + 32
	Mem0[v11:word64] = x21
	v11 = v11 + 8
	Mem0[v11:word64] = x22
	x19 = x19 + 0x0000000000000738
array_expand_index_exit:


// assign_compound_array_list
// Return size: 0
void assign_compound_array_list()
assign_compound_array_list_entry:
	// succ:  l000000000045C1A8
l000000000045C1A8:
	sp = fp
	sp = sp + -128
	Mem0[sp:word64] = x29
	sp = sp + 8
	Mem0[sp:word64] = x30
	x29 = x31 + 0x0000000000000000
	v8 = sp + 16
	Mem0[v8:word64] = x19
	v8 = v8 + 8
	Mem0[v8:word64] = x20
	v11 = sp + 32
	Mem0[v11:word64] = x21
	v11 = v11 + 8
	Mem0[v11:word64] = x22
	v14 = sp + 48
	Mem0[v14:word64] = x23
	v14 = v14 + 8
	Mem0[v14:word64] = x24
	v17 = sp + 64
	Mem0[v17:word64] = x25
	v17 = v17 + 8
	Mem0[v17:word64] = x26
	v20 = sp + 80
	Mem0[v20:word64] = x27
	v20 = v20 + 8
	Mem0[v20:word64] = x28
	x21 = x0
	x19 = x1
	w23 = w2
	branch x0 == 0x0000000000000000 l000000000045C4FC
	// succ:  l000000000045C1D4 l000000000045C4FC
l000000000045C1D4:
	w0 = Mem0[x0 + 40:word32]
	x26 = 0x0000000000000000
	w1 = w0 & 0x00000004
	branch (w0 & 0x00000004) == 0x00000000 l000000000045C1E8
	// succ:  l000000000045C1E4 l000000000045C1E8
l000000000045C1E4:
	x26 = Mem0[x21 + 8:word64]
	// succ:  l000000000045C1E8
l000000000045C1E8:
	w2 = w0 & 0x00000040
	branch (w0 & 0x00000040) == 0x00000000 l000000000045C208
	// succ:  l000000000045C1F0 l000000000045C208
l000000000045C1F0:
	x0 = Mem0[x21 + 8:word64]
	branch (w23 & 0x00000001) == 0x00000000 l000000000045C210
	// succ:  l000000000045C1F8 l000000000045C210
l000000000045C1F8:
	branch x26 == 0x0000000000000000 l000000000045C220
	// succ:  l000000000045C1FC l000000000045C220
l000000000045C1FC:
	x20 = Mem0[x26 + 8:word64]
	x20 = x20 + 0x0000000000000001
	goto l000000000045C224
	// succ:  l000000000045C224
l000000000045C208:
	x0 = 0x0000000000000000
	branch (w23 & 0x00000001) == 0x00000000 l000000000045C1F8
	// succ:  l000000000045C210 l000000000045C1F8
l000000000045C210:
	branch x26 == 0x0000000000000000 l000000000045C218
	// succ:  l000000000045C214 l000000000045C218
l000000000045C214:
	branch w1 != 0x00000000 l000000000045C3FC
	// succ:  l000000000045C218 l000000000045C3FC
l000000000045C218:
	branch x0 == 0x0000000000000000 l000000000045C220
	// succ:  l000000000045C21C l000000000045C220
l000000000045C21C:
	branch w2 != 0x00000000 l000000000045C408
	// succ:  l000000000045C220 l000000000045C408
l000000000045C220:
	x20 = 0x0000000000000000
	// succ:  l000000000045C224
l000000000045C224:
	x24 = 0x0000000000000000
	x25 = x24
	branch x19 == 0x0000000000000000 l000000000045C2A4
	// succ:  l000000000045C230 l000000000045C2A4
l000000000045C230:
	x0 = 0x00000000004AE000
	x27 = 0x00000000004AE000
	x0 = x0 + 0x00000000000007C8
	x28 = 0x00000000004AE000
	x27 = x27 + 0x0000000000000738
	Mem0[x29 + 96:word64] = x0
	x28 = x28 + 0x00000000000007A0
	// succ:  l000000000045C24C
l000000000045C24C:
	x3 = Mem0[x19 + 8:word64]
	w4 = Mem0[x3 + 8:word32]
	x3 = Mem0[x3:word64]
	branch (w4 & 0x00000004) == 0x00000000 l000000000045C268
	// succ:  l000000000045C25C l000000000045C268
l000000000045C25C:
	v29 = Mem0[x3:byte]
	w4 = (word32) v29
	w31 = w4 - 0x0000005B
	NZCV = cond(w31)
	branch Test(EQ,Z) l000000000045C2EC
	// succ:  l000000000045C268 l000000000045C2EC
l000000000045C268:
	w5 = Mem0[x21 + 40:word32]
	branch (w5 & 0x00000040) == 0x00000000 l000000000045C2C0
	// succ:  l000000000045C270 l000000000045C2C0
l000000000045C270:
	x22 = x20
	w4 = w23
	branch (w5 & 0x00000010) == 0x00000000 l000000000045C284
	// succ:  l000000000045C27C l000000000045C284
l000000000045C27C:
	x2 = 0x00000000004E3000
	Mem0[x2 + 1192:word64] = 0x0000000000000000
	// succ:  l000000000045C284
l000000000045C284:
	x1 = x20
	x0 = x21
	x2 = x24
	x25 = x20
	call fn000000000045B5B4 (retsize: 0;)
	x20 = x22 + 0x0000000000000001
	// succ:  l000000000045C29C
l000000000045C29C:
	x19 = Mem0[x19:word64]
	branch x19 != 0x0000000000000000 l000000000045C24C
	// succ:  l000000000045C2A4 l000000000045C24C
l000000000045C2A4:
	v35 = sp + 16
	x19 = Mem0[v35:word64]
	v35 = v35 + 8
	x20 = Mem0[v35:word64]
	v36 = sp + 32
	x21 = Mem0[v36:word64]
	v36 = v36 + 8
	x22 = Mem0[v36:word64]
	v37 = sp + 48
	x23 = Mem0[v37:word64]
	v37 = v37 + 8
	x24 = Mem0[v37:word64]
	v38 = sp + 64
	x25 = Mem0[v38:word64]
	v38 = v38 + 8
	x26 = Mem0[v38:word64]
	v39 = sp + 80
	x27 = Mem0[v39:word64]
	v39 = v39 + 8
	x28 = Mem0[v39:word64]
	x29 = Mem0[sp:word64]
	sp = sp + 8
	x30 = Mem0[sp:word64]
	sp = sp + 128
	return
	// succ:  assign_compound_array_list_exit
l000000000045C2C0:
	x1 = 0x00000000004AE000
	x1 = x1 + 0x00000000000007F0
	w2 = 0x00000005
	x0 = 0x0000000000000000
	Mem0[x29 + 112:word64] = x3
	dcgettext(x0, x1, x2)
	sp = sp + 0xFFFFFFFFFFFFFFF8
	x3 = Mem0[x29 + 112:word64]
	x1 = Mem0[x21:word64]
	x2 = x3
	call report_error (retsize: 0;)
	goto l000000000045C29C
	// succ:  l000000000045C29C
l000000000045C2EC:
	branch x21 == 0x0000000000000000 l000000000045C3F4
	// succ:  l000000000045C2F0 l000000000045C3F4
l000000000045C2F0:
	w2 = Mem0[x21 + 40:word32]
l000000000045C2F8:
	x0 = x3
	w1 = 0x00000000
	Mem0[x29 + 112:word64] = x3
	call skipsubscript (retsize: 0;)
	x3 = Mem0[x29 + 112:word64]
l000000000045C3F4:
	w2 = w21
	goto l000000000045C2F8
	// succ:  l000000000045C2F8
l000000000045C3FC:
	x0 = x26
	call array_flush (retsize: 0;)
	goto l000000000045C220
	// succ:  l000000000045C220
l000000000045C408:
	call assoc_flush (retsize: 0;)
	goto l000000000045C220
	// succ:  l000000000045C220
l000000000045C4FC:
	x26 = x0
	x20 = x0
	goto l000000000045C224
	// succ:  l000000000045C224
assign_compound_array_list_exit:


// assign_array_var_from_string
// Return size: 0
void assign_array_var_from_string()
assign_array_var_from_string_entry:
	// succ:  l000000000045C508
l000000000045C508:
	sp = fp
	sp = sp + -48
	Mem0[sp:word64] = x29
	sp = sp + 8
	Mem0[sp:word64] = x30
	x29 = x31 + 0x0000000000000000
	v8 = sp + 16
	Mem0[v8:word64] = x19
	v8 = v8 + 8
	Mem0[v8:word64] = x20
	Mem0[sp + 32:word64] = x21
	x20 = x0
	w21 = w2
	branch x1 == 0x0000000000000000 l000000000045C548
	// succ:  l000000000045C524 l000000000045C548
l000000000045C524:
	call expand_compound_array_assignment (retsize: 0;)
	x19 = x0
	x1 = x19
	x0 = x20
	w2 = w21
	call assign_compound_array_list (retsize: 0;)
	branch x19 == 0x0000000000000000 l000000000045C548
	// succ:  l000000000045C540 l000000000045C548
l000000000045C540:
	x0 = x19
	call dispose_words (retsize: 0;)
	// succ:  l000000000045C548
l000000000045C548:
	x0 = x20
	x21 = Mem0[sp + 32:word64]
	v14 = sp + 16
	x19 = Mem0[v14:word64]
	v14 = v14 + 8
	x20 = Mem0[v14:word64]
	x29 = Mem0[sp:word64]
	sp = sp + 8
	x30 = Mem0[sp:word64]
	sp = sp + 48
	return
	// succ:  assign_array_var_from_string_exit
assign_array_var_from_string_exit:


// assign_array_from_string
// Return size: 0
void assign_array_from_string()
assign_array_from_string_entry:
	// succ:  l000000000045C55C
l000000000045C55C:
	sp = fp
	sp = sp + -48
	Mem0[sp:word64] = x29
	sp = sp + 8
	Mem0[sp:word64] = x30
	x29 = x31 + 0x0000000000000000
	w3 = w2 & 0x00000004
	Mem0[sp + 16:word64] = x19
	NZCV = cond(w3 - w31)
	x19 = x1
	w1 = 0x00000003
assign_array_from_string_exit:


// unbind_array_element
// Return size: 0
void unbind_array_element()
unbind_array_element_entry:
	// succ:  l000000000045C5A8
l000000000045C5A8:
	sp = fp
	sp = sp + -48
	Mem0[sp:word64] = x29
	sp = sp + 8
	Mem0[sp:word64] = x30
	x29 = x31 + 0x0000000000000000
	v8 = sp + 16
	Mem0[v8:word64] = x19
	v8 = v8 + 8
	Mem0[v8:word64] = x20
	x19 = x1
	w1 = 0x00000000
	w2 = w1
	x20 = x0
	x0 = x19
	Mem0[sp + 32:word64] = x21
	call skipsubscript (retsize: 0;)
unbind_array_element_exit:


// array_variable_name
// Return size: 0
void array_variable_name()
array_variable_name_entry:
	// succ:  l000000000045C714
l000000000045C714:
	sp = fp
	sp = sp + -80
	Mem0[sp:word64] = x29
	sp = sp + 8
	Mem0[sp:word64] = x30
	x29 = x31 + 0x0000000000000000
	v8 = sp + 32
	Mem0[v8:word64] = x21
	v8 = v8 + 8
	Mem0[v8:word64] = x22
	x22 = x1
	w1 = 0x0000005B
	v13 = sp + 16
	Mem0[v13:word64] = x19
	v13 = v13 + 8
	Mem0[v13:word64] = x20
	v16 = sp + 48
	Mem0[v16:word64] = x23
	v16 = v16 + 8
	Mem0[v16:word64] = x24
	Mem0[sp + 64:word64] = x25
	x19 = x0
	x21 = x2
	call mbschr (retsize: 0;)
	x20 = x0
	branch x0 == 0x0000000000000000 l000000000045C780
	// succ:  l000000000045C748 l000000000045C780
l000000000045C748:
	x23 = x0 - x19
	w1 = w23
	x0 = x19
	w2 = 0x00000000
	call skipsubscript (retsize: 0;)
	w24 = w0
	w0 = w23 + 0x00000001
	NZCV = cond(w24 - w0)
	branch Test(LE,ZCV) l000000000045C778
	// succ:  l000000000045C76C l000000000045C778
l000000000045C76C:
	v26 = Mem0[x19 + (int64) ((int32) w24):byte]
	w0 = (word32) v26
	w31 = w0 - 0x0000005D
	NZCV = cond(w31)
	branch Test(EQ,Z) l000000000045C7AC
	// succ:  l000000000045C778 l000000000045C7AC
l000000000045C778:
	x0 = x19
	call err_badarraysub (retsize: 0;)
	// succ:  l000000000045C780
l000000000045C780:
	branch x22 == 0x0000000000000000 l000000000045C788
	// succ:  l000000000045C784 l000000000045C788
l000000000045C784:
	Mem0[x22:word64] = x20
	// succ:  l000000000045C788
l000000000045C788:
	branch x21 == 0x0000000000000000 l000000000045C790
	// succ:  l000000000045C78C l000000000045C790
l000000000045C78C:
	Mem0[x21:word32] = 0x00000000
	// succ:  l000000000045C790
l000000000045C790:
	x0 = 0x0000000000000000
	// succ:  l000000000045C794
l000000000045C794:
	v29 = sp + 16
	x19 = Mem0[v29:word64]
	v29 = v29 + 8
	x20 = Mem0[v29:word64]
	v30 = sp + 32
	x21 = Mem0[v30:word64]
	v30 = v30 + 8
	x22 = Mem0[v30:word64]
	v31 = sp + 48
	x23 = Mem0[v31:word64]
	v31 = v31 + 8
	x24 = Mem0[v31:word64]
	x25 = Mem0[sp + 64:word64]
	x29 = Mem0[sp:word64]
	sp = sp + 8
	x30 = Mem0[sp:word64]
	sp = sp + 80
	return
	// succ:  array_variable_name_exit
l000000000045C7AC:
	x25 = x20
	Mem0[x25:byte] = 0x00
	x25 = x25 + 1
	x0 = x19
	strlen(x0)
	sp = sp + 0xFFFFFFFFFFFFFFF8
	x1 = 0x00000000004AE000
	w2 = 0x0000032F
	x1 = x1 + 0x0000000000000738
	x0 = x0 + 0x0000000000000001
	call sh_xmalloc (retsize: 0;)
	x1 = x19
	strcpy(x0, x1)
	sp = sp + 0xFFFFFFFFFFFFFFF8
	w1 = 0x0000005B
	Mem0[x20:byte] = (byte) w1
	branch x22 == 0x0000000000000000 l000000000045C7E8
	// succ:  l000000000045C7E4 l000000000045C7E8
l000000000045C7E4:
	Mem0[x22:word64] = x25
	// succ:  l000000000045C7E8
l000000000045C7E8:
	branch x21 == 0x0000000000000000 l000000000045C794
	// succ:  l000000000045C7EC l000000000045C794
l000000000045C7EC:
	w23 = w24 - w23
	Mem0[x21:word32] = w23
	goto l000000000045C794
	// succ:  l000000000045C794
array_variable_name_exit:


// assign_array_element
// Return size: 0
void assign_array_element()
assign_array_element_entry:
	// succ:  l000000000045C7F8
l000000000045C7F8:
	sp = fp
	sp = sp + -80
	Mem0[sp:word64] = x29
	sp = sp + 8
	Mem0[sp:word64] = x30
	x29 = x31 + 0x0000000000000000
	v8 = sp + 32
	Mem0[v8:word64] = x21
	v8 = v8 + 8
	Mem0[v8:word64] = x22
	x22 = x1
	w21 = w2
	x1 = x29 + 0x0000000000000040
	x2 = x29 + 0x0000000000000048
	v15 = sp + 16
	Mem0[v15:word64] = x19
	v15 = v15 + 8
	Mem0[v15:word64] = x20
	Mem0[sp + 48:word64] = x23
	x23 = x0
	call array_variable_name (retsize: 0;)
	x19 = x0
	branch x0 == 0x0000000000000000 l000000000045C8B4
	// succ:  l000000000045C82C l000000000045C8B4
l000000000045C82C:
	x5 = Mem0[x29 + 64:word64]
	v20 = Mem0[x5:byte]
	w6 = (word32) v20
	w31 = w6 - 0x0000002A
	NZCV = cond(w31)
	branch Test(EQ,Z) l000000000045C844
	// succ:  l000000000045C83C l000000000045C844
l000000000045C83C:
	w31 = w6 - 0x00000040
	NZCV = cond(w31)
	branch Test(NE,Z) l000000000045C850
	// succ:  l000000000045C844 l000000000045C850
l000000000045C844:
	v25 = Mem0[x5 + 1:byte]
	w0 = (word32) v25
	w31 = w0 - 0x0000005D
	NZCV = cond(w31)
	branch Test(EQ,Z) l000000000045C958
	// succ:  l000000000045C850 l000000000045C958
l000000000045C850:
	w5 = Mem0[x29 + 72:word32]
	w31 = w5 - 0x00000001
	NZCV = cond(w31)
	branch Test(LE,ZCV) l000000000045C958
	// succ:  l000000000045C85C l000000000045C958
l000000000045C85C:
	x0 = x19
	call find_variable (retsize: 0;)
	x20 = x0
	branch x0 == 0x0000000000000000 l000000000045C874
	// succ:  l000000000045C86C l000000000045C874
l000000000045C86C:
	w1 = Mem0[x0 + 40:word32]
	branch (w1 & 0x00000040) == 0x00000000 l000000000045C8C8
	// succ:  l000000000045C874 l000000000045C8C8
l000000000045C874:
	w1 = Mem0[x29 + 72:word32]
	x0 = Mem0[x29 + 64:word64]
	call array_expand_index (retsize: 0;)
	x1 = x0
	branch (w1 & 0x00000000) != 0x00000000 l000000000045C968
	// succ:  l000000000045C888 l000000000045C968
l000000000045C888:
	x0 = x19
	x2 = x22
	w3 = w21
	call bind_array_variable (retsize: 0;)
	x20 = x0
	// succ:  l000000000045C89C
l000000000045C89C:
	x1 = 0x00000000004AE000
	x0 = x19
	x1 = x1 + 0x0000000000000738
	w2 = 0x0000011C
	call sh_xfree (retsize: 0;)
	x0 = x20
	// succ:  l000000000045C8B4
l000000000045C8B4:
	v30 = sp + 16
	x19 = Mem0[v30:word64]
	v30 = v30 + 8
	x20 = Mem0[v30:word64]
	v31 = sp + 32
	x21 = Mem0[v31:word64]
	v31 = v31 + 8
	x22 = Mem0[v31:word64]
	x23 = Mem0[sp + 48:word64]
	x29 = Mem0[sp:word64]
	sp = sp + 8
	x30 = Mem0[sp:word64]
	sp = sp + 80
	return
	// succ:  assign_array_element_exit
l000000000045C8C8:
	v32 = Mem0[x29 + 36:int32]
	x2 = (word64) v32
	x0 = Mem0[x29 + 64:word64]
	w1 = 0x00000000
	x0 = x0 + x2
	Mem0[x0 + -1:byte] = 0x00
	x0 = Mem0[x29 + 64:word64]
	call expand_assignment_string_to_string (retsize: 0;)
	v33 = Mem0[x29 + 36:int32]
	x1 = (word64) v33
	x2 = x0
	x0 = Mem0[x29 + 64:word64]
	x0 = x0 + x1
	w1 = 0x0000005D
	Mem0[x0 + -1:byte] = (byte) w1
	branch x2 == 0x0000000000000000 l000000000045C924
	// succ:  l000000000045C900 l000000000045C924
l000000000045C900:
	v34 = Mem0[x2:byte]
	w0 = (word32) v34
	branch w0 == 0x00000000 l000000000045C924
	// succ:  l000000000045C908 l000000000045C924
l000000000045C908:
	x0 = x20
	x1 = x19
	x3 = x22
	w4 = w21
	call bind_assoc_variable (retsize: 0;)
	x20 = x0
	goto l000000000045C89C
	// succ:  l000000000045C89C
l000000000045C924:
	x1 = 0x00000000004AE000
	x1 = x1 + 0x0000000000000738
	w2 = 0x0000010A
	// succ:  l000000000045C930
l000000000045C930:
	x0 = x19
	call sh_xfree (retsize: 0;)
	x0 = x23
	call err_badarraysub (retsize: 0;)
	x0 = 0x0000000000000000
	v37 = sp + 16
	x19 = Mem0[v37:word64]
	v37 = v37 + 8
	x20 = Mem0[v37:word64]
	v38 = sp + 32
	x21 = Mem0[v38:word64]
	v38 = v38 + 8
	x22 = Mem0[v38:word64]
	x23 = Mem0[sp + 48:word64]
	x29 = Mem0[sp:word64]
	sp = sp + 8
	x30 = Mem0[sp:word64]
	sp = sp + 80
	return
	// succ:  assign_array_element_exit
l000000000045C958:
	x1 = 0x00000000004AE000
	x1 = x1 + 0x0000000000000738
	w2 = 0x000000FC
	goto l000000000045C930
	// succ:  l000000000045C930
l000000000045C968:
	x1 = 0x00000000004AE000
	x1 = x1 + 0x0000000000000738
	w2 = 0x00000115
	goto l000000000045C930
	// succ:  l000000000045C930
assign_array_element_exit:


// array_variable_part
// Return size: 0
void array_variable_part()
array_variable_part_entry:
	// succ:  l000000000045C978
l000000000045C978:
	sp = fp
	sp = sp + -32
	Mem0[sp:word64] = x29
	sp = sp + 8
	Mem0[sp:word64] = x30
	x29 = x31 + 0x0000000000000000
	v8 = sp + 16
	Mem0[v8:word64] = x19
	v8 = v8 + 8
	Mem0[v8:word64] = x20
	call array_variable_name (retsize: 0;)
	x20 = x0
	branch x0 == 0x0000000000000000 l000000000045C9B8
	// succ:  l000000000045C990 l000000000045C9B8
l000000000045C990:
	call find_variable (retsize: 0;)
	x1 = 0x00000000004AE000
	x19 = x0
	x1 = x1 + 0x0000000000000738
	x0 = x20
	w2 = 0x0000034A
	call sh_xfree (retsize: 0;)
	branch x19 == 0x0000000000000000 l000000000045C9B8
	// succ:  l000000000045C9B0 l000000000045C9B8
l000000000045C9B0:
	w0 = Mem0[x19 + 40:word32]
	branch (w0 & 0x00001000) == 0x00000000 l000000000045C9C8
	// succ:  l000000000045C9B8 l000000000045C9C8
l000000000045C9B8:
	x0 = 0x0000000000000000
	v13 = sp + 16
	x19 = Mem0[v13:word64]
	v13 = v13 + 8
	x20 = Mem0[v13:word64]
	x29 = Mem0[sp:word64]
	sp = sp + 8
	x30 = Mem0[sp:word64]
	sp = sp + 32
	return
	// succ:  array_variable_part_exit
l000000000045C9C8:
	x0 = x19
	v14 = sp + 16
	x19 = Mem0[v14:word64]
	v14 = v14 + 8
	x20 = Mem0[v14:word64]
	x29 = Mem0[sp:word64]
	sp = sp + 8
	x30 = Mem0[sp:word64]
	sp = sp + 32
	return
	// succ:  array_variable_part_exit
array_variable_part_exit:


// fn000000000045C9D8
// Return size: 0
void fn000000000045C9D8()
fn000000000045C9D8_entry:
	// succ:  l000000000045C9D8
l000000000045C9D8:
	sp = v3
	sp = sp + -112
	Mem0[sp:word64] = x29
	sp = sp + 8
	Mem0[sp:word64] = x30
	x29 = x31 + 0x0000000000000000
	v7 = sp + 48
	Mem0[v7:word64] = x23
	v7 = v7 + 8
	Mem0[v7:word64] = x24
	v10 = sp + 32
	Mem0[v10:word64] = x21
	v10 = v10 + 8
	Mem0[v10:word64] = x22
	w23 = w1
	w21 = w2
	x1 = x29 + 0x0000000000000050
	x2 = x29 + 0x0000000000000058
	v19 = sp + 16
	Mem0[v19:word64] = x19
	v19 = v19 + 8
	Mem0[v19:word64] = x20
	Mem0[x29 + 96:word64] = x3
	Mem0[sp + 64:word64] = x25
	x24 = x0
	x20 = x4
	call array_variable_part (retsize: 0;)
	w1 = Mem0[x29 + 88:word32]
	x19 = x0
	x3 = Mem0[x29 + 96:word64]
	branch w1 == 0x00000000 l000000000045CB30
	// succ:  l000000000045CA20 l000000000045CB30
l000000000045CA20:
	x5 = Mem0[x29 + 80:word64]
	v27 = Mem0[x5:byte]
	w7 = (word32) v27
	w31 = w7 - 0x0000002A
	NZCV = cond(w31)
	w4 = (word32) Test(EQ,Z)
	branch w4 != 0x00000000 l000000000045CA3C
	// succ:  l000000000045CA34 l000000000045CA3C
l000000000045CA34:
	w31 = w7 - 0x00000040
	NZCV = cond(w31)
	branch Test(NE,Z) l000000000045CA48
	// succ:  l000000000045CA3C l000000000045CA48
l000000000045CA3C:
	v33 = Mem0[x5 + 1:byte]
	w0 = (word32) v33
	w31 = w0 - 0x0000005D
	NZCV = cond(w31)
	branch Test(EQ,Z) l000000000045CB88
	// succ:  l000000000045CA48 l000000000045CB88
l000000000045CA48:
	branch x3 == 0x0000000000000000 l000000000045CA50
	// succ:  l000000000045CA4C l000000000045CA50
l000000000045CA4C:
	Mem0[x3:word32] = 0x00000000
	// succ:  l000000000045CA50
l000000000045CA50:
	branch x19 == 0x0000000000000000 l000000000045CA68
	// succ:  l000000000045CA54 l000000000045CA68
l000000000045CA54:
	w2 = Mem0[x19 + 40:word32]
	w3 = 0x00000044
	w3 = w2 & w3
	w31 = w3 - 0x00000040
	NZCV = cond(w31)
	branch Test(EQ,Z) l000000000045CAEC
	// succ:  l000000000045CA68 l000000000045CAEC
l000000000045CA68:
	branch (w21 & 0x00000004) == 0x00000000 l000000000045CB4C
	// succ:  l000000000045CA6C l000000000045CB4C
l000000000045CA6C:
	branch x20 == 0x0000000000000000 l000000000045CB4C
	// succ:  l000000000045CA70 l000000000045CB4C
l000000000045CA70:
	x22 = Mem0[x20:word64]
	// succ:  l000000000045CA74
l000000000045CA74:
	branch x19 == 0x0000000000000000 l000000000045CB30
	// succ:  l000000000045CA78 l000000000045CB30
l000000000045CA78:
	x0 = Mem0[x19 + 8:word64]
	branch x0 == 0x0000000000000000 l000000000045CB30
	// succ:  l000000000045CA80 l000000000045CB30
l000000000045CA80:
	w2 = Mem0[x19 + 40:word32]
	w3 = 0x00000044
	NZ = cond(w2 & w3)
	C = false
	V = false
	branch Test(NE,Z) l000000000045CAAC
	// succ:  l000000000045CA90 l000000000045CAAC
l000000000045CA90:
	branch x22 != 0x0000000000000000 l000000000045CB30
	// succ:  l000000000045CA94 l000000000045CB30
l000000000045CA94:
	v39 = sp + 16
	x19 = Mem0[v39:word64]
	v39 = v39 + 8
	x20 = Mem0[v39:word64]
	v40 = sp + 32
	x21 = Mem0[v40:word64]
	v40 = v40 + 8
	x22 = Mem0[v40:word64]
	v41 = sp + 48
	x23 = Mem0[v41:word64]
	v41 = v41 + 8
	x24 = Mem0[v41:word64]
	x25 = Mem0[sp + 64:word64]
	x29 = Mem0[sp:word64]
	sp = sp + 8
	x30 = Mem0[sp:word64]
	sp = sp + 112
	return
	// succ:  fn000000000045C9D8_exit
l000000000045CAAC:
	branch (w2 & 0x00000040) == 0x00000000 l000000000045CB68
	// succ:  l000000000045CAB0 l000000000045CB68
l000000000045CAB0:
	x1 = x25
	call assoc_reference (retsize: 0;)
	x1 = 0x00000000004AE000
	x19 = x0
	x1 = x1 + 0x0000000000000738
	x0 = x25
	w2 = 0x000003C8
	call sh_xfree (retsize: 0;)
	x0 = x19
	v45 = sp + 32
	x21 = Mem0[v45:word64]
	v45 = v45 + 8
	x22 = Mem0[v45:word64]
	v46 = sp + 16
	x19 = Mem0[v46:word64]
	v46 = v46 + 8
	x20 = Mem0[v46:word64]
	v47 = sp + 48
	x23 = Mem0[v47:word64]
	v47 = v47 + 8
	x24 = Mem0[v47:word64]
	x25 = Mem0[sp + 64:word64]
	x29 = Mem0[sp:word64]
	sp = sp + 8
	x30 = Mem0[sp:word64]
	sp = sp + 112
	return
	// succ:  fn000000000045C9D8_exit
l000000000045CAEC:
	branch (w2 & 0x00000040) == 0x00000000 l000000000045CA78
	// succ:  l000000000045CAF0 l000000000045CA78
l000000000045CAF0:
	x5 = x5 + (int64) ((int32) w1)
	Mem0[x5 + -1:byte] = 0x00
	x0 = Mem0[x29 + 80:word64]
	w1 = 0x00000000
	call expand_assignment_string_to_string (retsize: 0;)
	v53 = Mem0[x29 + 44:int32]
	x1 = (word64) v53
	x25 = x0
	x0 = Mem0[x29 + 80:word64]
	x0 = x0 + x1
	w1 = 0x0000005D
	Mem0[x0 + -1:byte] = (byte) w1
	branch x25 == 0x0000000000000000 l000000000045CB28
	// succ:  l000000000045CB20 l000000000045CB28
l000000000045CB20:
	v54 = Mem0[x25:byte]
	w0 = (word32) v54
	branch w0 != 0x00000000 l000000000045CA78
	// succ:  l000000000045CB28 l000000000045CA78
l000000000045CB28:
	x0 = Mem0[x19:word64]
	call err_badarraysub (retsize: 0;)
	// succ:  l000000000045CB30
l000000000045CB30:
	x0 = 0x0000000000000000
	// succ:  l000000000045CB34
l000000000045CB34:
	v42 = sp + 16
	x19 = Mem0[v42:word64]
	v42 = v42 + 8
	x20 = Mem0[v42:word64]
	v43 = sp + 32
	x21 = Mem0[v43:word64]
	v43 = v43 + 8
	x22 = Mem0[v43:word64]
	v44 = sp + 48
	x23 = Mem0[v44:word64]
	v44 = v44 + 8
	x24 = Mem0[v44:word64]
	x25 = Mem0[sp + 64:word64]
	x29 = Mem0[sp:word64]
	sp = sp + 8
	x30 = Mem0[sp:word64]
	sp = sp + 112
	return
	// succ:  fn000000000045C9D8_exit
l000000000045CB4C:
	x0 = x5
	call array_expand_index (retsize: 0;)
	x22 = x0
	branch (w0 & 0x00000000) != 0x00000000 l000000000045CC18
	// succ:  l000000000045CB5C l000000000045CC18
l000000000045CB5C:
	branch x20 == 0x0000000000000000 l000000000045CA74
	// succ:  l000000000045CB60 l000000000045CA74
l000000000045CB60:
	Mem0[x20:word64] = x22
	goto l000000000045CA74
	// succ:  l000000000045CA74
l000000000045CB68:
	x1 = x22
	call array_reference (retsize: 0;)
	v48 = sp + 16
	x19 = Mem0[v48:word64]
	v48 = v48 + 8
	x20 = Mem0[v48:word64]
	v49 = sp + 32
	x21 = Mem0[v49:word64]
	v49 = v49 + 8
	x22 = Mem0[v49:word64]
	v50 = sp + 48
	x23 = Mem0[v50:word64]
	v50 = v50 + 8
	x24 = Mem0[v50:word64]
	x25 = Mem0[sp + 64:word64]
	x29 = Mem0[sp:word64]
	sp = sp + 8
	x30 = Mem0[sp:word64]
	sp = sp + 112
	return
	// succ:  fn000000000045C9D8_exit
l000000000045CB88:
	branch x3 == 0x0000000000000000 l000000000045CB9C
	// succ:  l000000000045CB8C l000000000045CB9C
l000000000045CB8C:
	NZCV = cond(w4 - w31)
	w0 = 0x00000002
l000000000045CB9C:
	branch (w21 & 0x00000001) == 0x00000000 l000000000045CC94
	// succ:  l000000000045CBA0 l000000000045CC94
l000000000045CBA0:
	branch x19 == 0x0000000000000000 l000000000045CB30
	// succ:  l000000000045CBA4 l000000000045CB30
l000000000045CBA4:
	x0 = Mem0[x19 + 8:word64]
	branch x0 == 0x0000000000000000 l000000000045CB30
	// succ:  l000000000045CBAC l000000000045CB30
l000000000045CBAC:
	w1 = Mem0[x19 + 40:word32]
	w2 = 0x00000044
	NZ = cond(w1 & w2)
	C = false
	V = false
	branch Test(EQ,Z) l000000000045CC54
	// succ:  l000000000045CBBC l000000000045CC54
l000000000045CBBC:
	branch (w1 & 0x00000040) == 0x00000000 l000000000045CC40
	// succ:  l000000000045CBC0 l000000000045CC40
l000000000045CBC0:
	call array_to_word_list (retsize: 0;)
	x19 = x0
	branch x0 == 0x0000000000000000 l000000000045CB30
	// succ:  l000000000045CBCC l000000000045CB30
l000000000045CBCC:
	x0 = Mem0[x29 + 80:word64]
	v55 = Mem0[x0:byte]
	w0 = (word32) v55
	w31 = w0 - 0x0000002A
	NZCV = cond(w31)
	branch Test(NE,Z) l000000000045CBE4
	// succ:  l000000000045CBDC l000000000045CBE4
l000000000045CBDC:
	w0 = w23 & 0x00000003
	branch w0 != 0x00000000 l000000000045CC68
	// succ:  l000000000045CBE4 l000000000045CC68
l000000000045CBE4:
	x0 = x19
	w1 = w23
	call string_list_dollar_at (retsize: 0;)
	x20 = x0
	// succ:  l000000000045CBF4
l000000000045CBF4:
	x0 = x19
	call dispose_words (retsize: 0;)
	x0 = x20
	v56 = sp + 32
	x21 = Mem0[v56:word64]
	v56 = v56 + 8
	x22 = Mem0[v56:word64]
	v57 = sp + 16
	x19 = Mem0[v57:word64]
	v57 = v57 + 8
	x20 = Mem0[v57:word64]
	v58 = sp + 48
	x23 = Mem0[v58:word64]
	v58 = v58 + 8
	x24 = Mem0[v58:word64]
	x25 = Mem0[sp + 64:word64]
	x29 = Mem0[sp:word64]
	sp = sp + 8
	x30 = Mem0[sp:word64]
	sp = sp + 112
	return
	// succ:  fn000000000045C9D8_exit
l000000000045CC18:
	branch x19 == 0x0000000000000000 l000000000045CCA4
	// succ:  l000000000045CC1C l000000000045CCA4
l000000000045CC1C:
	w0 = Mem0[x19 + 40:word32]
	branch (w0 & 0x00000004) == 0x00000000 l000000000045CB28
	// succ:  l000000000045CC24 l000000000045CB28
l000000000045CC24:
	x0 = Mem0[x19 + 8:word64]
	x0 = Mem0[x0 + 8:word64]
	x0 = x0 + 0x0000000000000001
	x22 = x22 + x0
	NZCV = cond(x22)
	branch Test(LT,N) l000000000045CB28
	// succ:  l000000000045CC38 l000000000045CB28
l000000000045CC38:
	branch x20 != 0x0000000000000000 l000000000045CB60
	// succ:  l000000000045CC3C l000000000045CB60
l000000000045CC3C:
	goto l000000000045CA74
	// succ:  l000000000045CA74
l000000000045CC40:
	call assoc_to_word_list (retsize: 0;)
	x19 = x0
	branch x0 != 0x0000000000000000 l000000000045CBCC
	// succ:  l000000000045CC4C l000000000045CBCC
l000000000045CC4C:
	x0 = 0x0000000000000000
	goto l000000000045CB34
	// succ:  l000000000045CB34
l000000000045CC54:
	call make_word (retsize: 0;)
	x1 = 0x0000000000000000
	call make_word_list (retsize: 0;)
	x19 = x0
	goto l000000000045CBCC
	// succ:  l000000000045CBCC
l000000000045CC68:
	x0 = x19
	call string_list_dollar_star (retsize: 0;)
	x21 = x0
	call quote_string (retsize: 0;)
	x1 = 0x00000000004AE000
	x20 = x0
	x1 = x1 + 0x0000000000000738
	x0 = x21
	w2 = 0x0000039A
	call sh_xfree (retsize: 0;)
	goto l000000000045CBF4
	// succ:  l000000000045CBF4
l000000000045CC94:
	x0 = x24
	call err_badarraysub (retsize: 0;)
	x0 = 0x0000000000000000
	goto l000000000045CA94
	// succ:  l000000000045CA94
l000000000045CCA4:
	x1 = Mem0[x29 + 80:word64]
	x0 = x24
	Mem0[x1 + -1:byte] = (byte) w19
	call err_badarraysub (retsize: 0;)
	x0 = Mem0[x29 + 80:word64]
	w1 = 0x0000005B
	Mem0[x0 + -1:byte] = (byte) w1
	x0 = x19
	goto l000000000045CA94
	// succ:  l000000000045CA94
fn000000000045C9D8_exit:


// array_value
// Return size: 0
void array_value()
array_value_entry:
	// succ:  l000000000045CCC8
l000000000045CCC8:
	sp = fp
	w2 = w2 | 0x00000001
	// succ:  l000000000045CCCC_thunk_fn000000000045C9D8
l000000000045CCCC_thunk_fn000000000045C9D8:
	call fn000000000045C9D8 (retsize: 0;)
	return
	// succ:  array_value_exit
array_value_exit:


// get_array_value
// Return size: 0
void get_array_value()
get_array_value_entry:
	// succ:  l000000000045CCD0
l000000000045CCD0:
	sp = fp
	w6 = w1
	x5 = x2
	x4 = x3
	w1 = 0x00000000
	w2 = w6
	x3 = x5
	// succ:  l000000000045CCE8_thunk_fn000000000045C9D8
l000000000045CCE8_thunk_fn000000000045C9D8:
	call fn000000000045C9D8 (retsize: 0;)
	return
	// succ:  get_array_value_exit
get_array_value_exit:


// array_keys
// Return size: 0
void array_keys()
array_keys_entry:
	// succ:  l000000000045CCEC
l000000000045CCEC:
	sp = fp
	sp = sp + -64
	Mem0[sp:word64] = x29
	sp = sp + 8
	Mem0[sp:word64] = x30
	x29 = x31 + 0x0000000000000000
	v8 = sp + 16
	Mem0[v8:word64] = x19
	v8 = v8 + 8
	Mem0[v8:word64] = x20
	x2 = x29 + 0x0000000000000038
	w20 = w1
	x1 = x29 + 0x0000000000000030
	Mem0[sp + 32:word64] = x21
	call array_variable_part (retsize: 0;)
	branch x0 == 0x0000000000000000 l000000000045CDA8
	// succ:  l000000000045CD10 l000000000045CDA8
l000000000045CD10:
	x2 = Mem0[x29 + 48:word64]
	v16 = Mem0[x2:byte]
	w3 = (word32) v16
	w31 = w3 - 0x0000002A
	NZCV = cond(w31)
	branch Test(NE,Z) l000000000045CDA0
	// succ:  l000000000045CD20 l000000000045CDA0
l000000000045CD20:
	v20 = Mem0[x2 + 1:byte]
	w1 = (word32) v20
	w31 = w1 - 0x0000005D
	NZCV = cond(w31)
	branch Test(NE,Z) l000000000045CDA8
	// succ:  l000000000045CD2C l000000000045CDA8
l000000000045CD2C:
	x3 = Mem0[x0 + 8:word64]
	branch x3 == 0x0000000000000000 l000000000045CDA8
	// succ:  l000000000045CD34 l000000000045CDA8
l000000000045CD34:
	w2 = Mem0[x0 + 40:word32]
	branch (w2 & 0x00001000) == 0x00000000 l000000000045CDA8
	// succ:  l000000000045CD3C l000000000045CDA8
l000000000045CD3C:
	w0 = 0x00000044
	NZ = cond(w2 & w0)
	C = false
	V = false
	branch Test(EQ,Z) l000000000045CDCC
	// succ:  l000000000045CD48 l000000000045CDCC
l000000000045CD48:
	branch (w2 & 0x00000040) == 0x00000000 l000000000045CDBC
	// succ:  l000000000045CD4C l000000000045CDBC
l000000000045CD4C:
	x0 = x3
	call assoc_keys_to_word_list (retsize: 0;)
	x19 = x0
	// succ:  l000000000045CD58
l000000000045CD58:
	branch x19 == 0x0000000000000000 l000000000045CDA8
	// succ:  l000000000045CD5C l000000000045CDA8
l000000000045CD5C:
	x0 = Mem0[x29 + 48:word64]
	v27 = Mem0[x0:byte]
	w0 = (word32) v27
	w31 = w0 - 0x0000002A
	NZCV = cond(w31)
	branch Test(NE,Z) l000000000045CD74
	// succ:  l000000000045CD6C l000000000045CD74
l000000000045CD6C:
	w0 = w20 & 0x00000003
	branch w0 != 0x00000000 l000000000045CDE8
	// succ:  l000000000045CD74 l000000000045CDE8
l000000000045CD74:
	w1 = w20
	x0 = x19
	call string_list_dollar_at (retsize: 0;)
	x20 = x0
	// succ:  l000000000045CD84
l000000000045CD84:
	x0 = x19
	call dispose_words (retsize: 0;)
	x0 = x20
	x21 = Mem0[sp + 32:word64]
	v28 = sp + 16
	x19 = Mem0[v28:word64]
	v28 = v28 + 8
	x20 = Mem0[v28:word64]
	x29 = Mem0[sp:word64]
	sp = sp + 8
	x30 = Mem0[sp:word64]
	sp = sp + 64
	return
	// succ:  array_keys_exit
l000000000045CDA0:
	w31 = w3 - 0x00000040
	NZCV = cond(w31)
	branch Test(EQ,Z) l000000000045CD20
	// succ:  l000000000045CDA8 l000000000045CD20
l000000000045CDA8:
	x0 = 0x0000000000000000
	v29 = sp + 16
	x19 = Mem0[v29:word64]
	v29 = v29 + 8
	x20 = Mem0[v29:word64]
	x21 = Mem0[sp + 32:word64]
	x29 = Mem0[sp:word64]
	sp = sp + 8
	x30 = Mem0[sp:word64]
	sp = sp + 64
	return
	// succ:  array_keys_exit
l000000000045CDBC:
	x0 = x3
	call array_keys_to_word_list (retsize: 0;)
	x19 = x0
	goto l000000000045CD58
	// succ:  l000000000045CD58
l000000000045CDCC:
	x0 = 0x00000000004AC000
	x0 = x0 + 0xFFFFFFFFFFFFF988
	call make_word (retsize: 0;)
	x1 = 0x0000000000000000
	call make_word_list (retsize: 0;)
	x19 = x0
	goto l000000000045CD58
	// succ:  l000000000045CD58
l000000000045CDE8:
	x0 = x19
	call string_list_dollar_star (retsize: 0;)
	x21 = x0
	call quote_string (retsize: 0;)
	x1 = 0x00000000004AE000
	x20 = x0
	x1 = x1 + 0x0000000000000738
	x0 = x21
	w2 = 0x00000409
	call sh_xfree (retsize: 0;)
	goto l000000000045CD84
	// succ:  l000000000045CD84
array_keys_exit:


// fn000000000045CE14
// Return size: 0
void fn000000000045CE14()
fn000000000045CE14_entry:
	// succ:  l000000000045CE14 l000000000045CE14
l000000000045CE14:
	sp = fp
	sp = v3
	sp = sp + -64
	Mem0[sp:word64] = x29
	sp = sp + 8
	Mem0[sp:word64] = x30
	x29 = x31 + 0x0000000000000000
	v7 = sp + 32
	Mem0[v7:word64] = x21
	v7 = v7 + 8
	Mem0[v7:word64] = x22
	v10 = sp + 48
	Mem0[v10:word64] = x23
	v10 = v10 + 8
	Mem0[v10:word64] = x24
	v13 = sp + 16
	Mem0[v13:word64] = x19
	v13 = v13 + 8
	Mem0[v13:word64] = x20
	x24 = x0
	w21 = w1
	branch x0 == 0x0000000000000000 l000000000045CEC0
	// succ:  l000000000045CE34 l000000000045CEC0
l000000000045CE34:
	w0 = Mem0[x0 + 12:word32]
	branch w0 == 0x00000000 l000000000045CEC0
	// succ:  l000000000045CE3C l000000000045CEC0
l000000000045CE3C:
	w1 = Mem0[x24 + 8:word32]
	NZCV = cond(w1 - w31)
	branch Test(LE,ZCV) l000000000045CEC0
	// succ:  l000000000045CE48 l000000000045CEC0
l000000000045CE48:
	x23 = 0x0000000000000000
	w22 = w23
	x20 = x23
	// succ:  l000000000045CE54
l000000000045CE54:
	x0 = Mem0[x24:word64]
	x19 = Mem0[x0 + x23:word64]
	branch x19 == 0x0000000000000000 l000000000045CE8C
	// succ:  l000000000045CE60 l000000000045CE8C
l000000000045CE60:
	x2 = Mem0[x19 + 16:word64]
	x0 = Mem0[x19 + 8:word64]
	NZCV = cond(w21 - w31)
l000000000045CE8C:
	w22 = w22 + 0x00000001
	NZCV = cond(w1 - w22)
	x23 = x23 + 0x0000000000000008
	branch Test(GT,NZV) l000000000045CE54
	// succ:  l000000000045CE9C l000000000045CE54
l000000000045CE9C:
	branch x20 == 0x0000000000000000 l000000000045CEC0
	// succ:  l000000000045CEA0 l000000000045CEC0
l000000000045CEA0:
	x0 = Mem0[x20:word64]
	branch x0 == 0x0000000000000000 l000000000045CED8
	// succ:  l000000000045CEA8 l000000000045CED8
l000000000045CEA8:
	x0 = x20
	v27 = sp + 32
	x21 = Mem0[v27:word64]
	v27 = v27 + 8
	x22 = Mem0[v27:word64]
	v28 = sp + 16
	x19 = Mem0[v28:word64]
	v28 = v28 + 8
	x20 = Mem0[v28:word64]
	v29 = sp + 48
	x23 = Mem0[v29:word64]
	v29 = v29 + 8
	x24 = Mem0[v29:word64]
	x29 = Mem0[sp:word64]
	sp = sp + 8
	x30 = Mem0[sp:word64]
	sp = sp + 64
	// succ:  l000000000045CEBC_thunk_list_reverse
l000000000045CEBC_thunk_list_reverse:
	call list_reverse (retsize: 0;)
	return
	// succ:  fn000000000045CE14_exit
l000000000045CEC0:
	x0 = 0x0000000000000000
	v33 = sp + 16
	x19 = Mem0[v33:word64]
	v33 = v33 + 8
	x20 = Mem0[v33:word64]
	v34 = sp + 32
	x21 = Mem0[v34:word64]
	v34 = v34 + 8
	x22 = Mem0[v34:word64]
	v35 = sp + 48
	x23 = Mem0[v35:word64]
	v35 = v35 + 8
	x24 = Mem0[v35:word64]
	x29 = Mem0[sp:word64]
	sp = sp + 8
	x30 = Mem0[sp:word64]
	sp = sp + 64
	return
	// succ:  fn000000000045CE14_exit
l000000000045CED8:
	x0 = x20
	v30 = sp + 32
	x21 = Mem0[v30:word64]
	v30 = v30 + 8
	x22 = Mem0[v30:word64]
	v31 = sp + 16
	x19 = Mem0[v31:word64]
	v31 = v31 + 8
	x20 = Mem0[v31:word64]
	v32 = sp + 48
	x23 = Mem0[v32:word64]
	v32 = v32 + 8
	x24 = Mem0[v32:word64]
	x29 = Mem0[sp:word64]
	sp = sp + 8
	x30 = Mem0[sp:word64]
	sp = sp + 64
	return
	// succ:  fn000000000045CE14_exit
fn000000000045CE14_exit:


// assoc_dispose
// Return size: 0
void assoc_dispose()
assoc_dispose_entry:
	// succ:  l000000000045CEF0
l000000000045CEF0:
	sp = fp
	sp = sp + -32
	Mem0[sp:word64] = x29
	sp = sp + 8
	Mem0[sp:word64] = x30
	x29 = x31 + 0x0000000000000000
	Mem0[sp + 16:word64] = x19
	x19 = x0
	branch x0 == 0x0000000000000000 l000000000045CF1C
	// succ:  l000000000045CF04 l000000000045CF1C
l000000000045CF04:
	x1 = 0x0000000000000000
	call hash_flush (retsize: 0;)
	x0 = x19
	x19 = Mem0[sp + 16:word64]
	x29 = Mem0[sp:word64]
	sp = sp + 8
	x30 = Mem0[sp:word64]
	sp = sp + 32
	// succ:  l000000000045CF18_thunk_hash_dispose
l000000000045CF18_thunk_hash_dispose:
	call hash_dispose (retsize: 0;)
	return
	// succ:  assoc_dispose_exit
l000000000045CF1C:
	x19 = Mem0[sp + 16:word64]
	x29 = Mem0[sp:word64]
	sp = sp + 8
	x30 = Mem0[sp:word64]
	sp = sp + 32
	return
	// succ:  assoc_dispose_exit
assoc_dispose_exit:


// assoc_flush
// Return size: 0
void assoc_flush()
assoc_flush_entry:
	// succ:  l000000000045CF28
l000000000045CF28:
	sp = fp
	x1 = 0x0000000000000000
	// succ:  l000000000045CF2C_thunk_hash_flush
l000000000045CF2C_thunk_hash_flush:
	call hash_flush (retsize: 0;)
	return
	// succ:  assoc_flush_exit
assoc_flush_exit:


// assoc_insert
// Return size: 0
void assoc_insert()
assoc_insert_entry:
	// succ:  l000000000045CF30
l000000000045CF30:
	sp = fp
	sp = sp + -48
	Mem0[sp:word64] = x29
	sp = sp + 8
	Mem0[sp:word64] = x30
	x29 = x31 + 0x0000000000000000
	x3 = x0
	v10 = sp + 16
	Mem0[v10:word64] = x19
	v10 = v10 + 8
	Mem0[v10:word64] = x20
	Mem0[sp + 32:word64] = x21
	x0 = x1
	x20 = x1
	x21 = x2
	x1 = x3
	w2 = 0x00000002
	call hash_search (retsize: 0;)
	x19 = x0
	branch x0 == 0x0000000000000000 l000000000045CFDC
	// succ:  l000000000045CF64 l000000000045CFDC
l000000000045CF64:
	x0 = Mem0[x0 + 8:word64]
	x31 = x0 - x20
	NZCV = cond(x31)
	branch Test(EQ,Z) l000000000045CF84
	// succ:  l000000000045CF70 l000000000045CF84
l000000000045CF70:
	x1 = 0x00000000004AE000
	x0 = x20
	x1 = x1 + 0xFFFFFFFFFFFFF868
	w2 = 0x00000054
	call sh_xfree (retsize: 0;)
	// succ:  l000000000045CF84
l000000000045CF84:
	x0 = Mem0[x19 + 16:word64]
	branch x0 == 0x0000000000000000 l000000000045CF9C
	// succ:  l000000000045CF8C l000000000045CF9C
l000000000045CF8C:
	x1 = 0x00000000004AE000
	x1 = x1 + 0xFFFFFFFFFFFFF868
	w2 = 0x00000055
	call sh_xfree (retsize: 0;)
	// succ:  l000000000045CF9C
l000000000045CF9C:
	x0 = x21
	branch x21 == 0x0000000000000000 l000000000045CFC4
	// succ:  l000000000045CFA4 l000000000045CFC4
l000000000045CFA4:
	strlen(x0)
	sp = sp + 0xFFFFFFFFFFFFFFF8
	x1 = 0x00000000004AE000
	x1 = x1 + 0xFFFFFFFFFFFFF868
	w2 = 0x00000056
	x0 = x0 + 0x0000000000000001
	call sh_xmalloc (retsize: 0;)
	x1 = x21
	strcpy(x0, x1)
	sp = sp + 0xFFFFFFFFFFFFFFF8
	// succ:  l000000000045CFC4
l000000000045CFC4:
	Mem0[x19 + 16:word64] = x0
	w0 = 0x00000000
	// succ:  l000000000045CFCC
l000000000045CFCC:
	v18 = sp + 16
	x19 = Mem0[v18:word64]
	v18 = v18 + 8
	x20 = Mem0[v18:word64]
	x21 = Mem0[sp + 32:word64]
	x29 = Mem0[sp:word64]
	sp = sp + 8
	x30 = Mem0[sp:word64]
	sp = sp + 48
	return
	// succ:  assoc_insert_exit
l000000000045CFDC:
	w0 = 0xFFFFFFFF
	goto l000000000045CFCC
	// succ:  l000000000045CFCC
assoc_insert_exit:


// assoc_remove
// Return size: 0
void assoc_remove()
assoc_remove_entry:
	// succ:  l000000000045CFE4
l000000000045CFE4:
	sp = fp
	sp = sp + -32
	Mem0[sp:word64] = x29
	sp = sp + 8
	Mem0[sp:word64] = x30
	x3 = x0
	x29 = x31 + 0x0000000000000000
	x0 = x1
	w2 = 0x00000000
	x1 = x3
	v12 = sp + 16
	Mem0[v12:word64] = x19
	v12 = v12 + 8
	Mem0[v12:word64] = x20
	call hash_remove (retsize: 0;)
	x19 = x0
	branch x0 == 0x0000000000000000 l000000000045D04C
	// succ:  l000000000045D00C l000000000045D04C
l000000000045D00C:
	x20 = 0x00000000004AE000
	x20 = x20 + 0xFFFFFFFFFFFFF868
	x0 = Mem0[x0 + 16:word64]
	x1 = x20
	w2 = 0x00000064
	call sh_xfree (retsize: 0;)
	x0 = Mem0[x19 + 8:word64]
	x1 = x20
	w2 = 0x00000065
	call sh_xfree (retsize: 0;)
	x0 = x19
	x1 = x20
	v13 = sp + 16
	x19 = Mem0[v13:word64]
	v13 = v13 + 8
	x20 = Mem0[v13:word64]
	x29 = Mem0[sp:word64]
	sp = sp + 8
	x30 = Mem0[sp:word64]
	sp = sp + 32
	w2 = 0x00000066
	// succ:  l000000000045D048_thunk_sh_xfree
l000000000045D048_thunk_sh_xfree:
	call sh_xfree (retsize: 0;)
	return
	// succ:  assoc_remove_exit
l000000000045D04C:
	v14 = sp + 16
	x19 = Mem0[v14:word64]
	v14 = v14 + 8
	x20 = Mem0[v14:word64]
	x29 = Mem0[sp:word64]
	sp = sp + 8
	x30 = Mem0[sp:word64]
	sp = sp + 32
	return
	// succ:  assoc_remove_exit
assoc_remove_exit:


// assoc_reference
// Return size: 0
void assoc_reference()
assoc_reference_entry:
	// succ:  l000000000045D058
l000000000045D058:
	sp = fp
	sp = sp + -16
	Mem0[sp:word64] = x29
	sp = sp + 8
	Mem0[sp:word64] = x30
	x29 = x31 + 0x0000000000000000
	x2 = x0
	branch x0 == 0x0000000000000000 l000000000045D088
	// succ:  l000000000045D068 l000000000045D088
l000000000045D068:
	x0 = x1
	x1 = x2
	w2 = 0x00000000
	call hash_search (retsize: 0;)
	branch x0 == 0x0000000000000000 l000000000045D088
	// succ:  l000000000045D07C l000000000045D088
l000000000045D07C:
	x0 = Mem0[x0 + 16:word64]
	x29 = Mem0[sp:word64]
	sp = sp + 8
	x30 = Mem0[sp:word64]
	sp = sp + 16
	return
	// succ:  assoc_reference_exit
l000000000045D088:
	x0 = 0x0000000000000000
	x29 = Mem0[sp:word64]
	sp = sp + 8
	x30 = Mem0[sp:word64]
	sp = sp + 16
	return
	// succ:  assoc_reference_exit
assoc_reference_exit:


// assoc_quote
// Return size: 0
void assoc_quote()
assoc_quote_entry:
	// succ:  l000000000045D094
l000000000045D094:
	sp = fp
	sp = sp + -64
	Mem0[sp:word64] = x29
	sp = sp + 8
	Mem0[sp:word64] = x30
	x29 = x31 + 0x0000000000000000
	v8 = sp + 48
	Mem0[v8:word64] = x23
	v8 = v8 + 8
	Mem0[v8:word64] = x24
	v11 = sp + 16
	Mem0[v11:word64] = x19
	v11 = v11 + 8
	Mem0[v11:word64] = x20
	v14 = sp + 32
	Mem0[v14:word64] = x21
	v14 = v14 + 8
	Mem0[v14:word64] = x22
	x24 = x0
	branch x0 == 0x0000000000000000 l000000000045D124
	// succ:  l000000000045D0B0 l000000000045D124
l000000000045D0B0:
	w0 = Mem0[x0 + 12:word32]
	branch w0 == 0x00000000 l000000000045D13C
	// succ:  l000000000045D0B8 l000000000045D13C
l000000000045D0B8:
	w1 = Mem0[x24 + 8:word32]
	x23 = 0x0000000000000000
	x21 = 0x00000000004AE000
	NZCV = cond(w1 - w31)
	w22 = w23
	x21 = x21 + 0xFFFFFFFFFFFFF868
	branch Test(LE,ZCV) l000000000045D124
	// succ:  l000000000045D0D4 l000000000045D124
l000000000045D0D4:
	x0 = Mem0[x24:word64]
	x19 = Mem0[x0 + x23:word64]
	branch x19 == 0x0000000000000000 l000000000045D114
	// succ:  l000000000045D0E0 l000000000045D114
l000000000045D0E0:
	x0 = Mem0[x19 + 16:word64]
	call quote_string (retsize: 0;)
	x3 = Mem0[x19 + 16:word64]
	x20 = x0
	x1 = x21
	x0 = x3
	w2 = 0x00000089
	branch x3 == 0x0000000000000000 l000000000045D104
	// succ:  l000000000045D100 l000000000045D104
l000000000045D100:
	call sh_xfree (retsize: 0;)
	// succ:  l000000000045D104
l000000000045D104:
	Mem0[x19 + 16:word64] = x20
	x19 = Mem0[x19:word64]
	branch x19 != 0x0000000000000000 l000000000045D0E0
	// succ:  l000000000045D110 l000000000045D0E0
l000000000045D110:
	w1 = Mem0[x24 + 8:word32]
	// succ:  l000000000045D114
l000000000045D114:
	w22 = w22 + 0x00000001
	NZCV = cond(w1 - w22)
	x23 = x23 + 0x0000000000000008
	branch Test(GT,NZV) l000000000045D0D4
	// succ:  l000000000045D124 l000000000045D0D4
l000000000045D124:
	x0 = x24
	v26 = sp + 16
	x19 = Mem0[v26:word64]
	v26 = v26 + 8
	x20 = Mem0[v26:word64]
	v27 = sp + 32
	x21 = Mem0[v27:word64]
	v27 = v27 + 8
	x22 = Mem0[v27:word64]
	v28 = sp + 48
	x23 = Mem0[v28:word64]
	v28 = v28 + 8
	x24 = Mem0[v28:word64]
	x29 = Mem0[sp:word64]
	sp = sp + 8
	x30 = Mem0[sp:word64]
	sp = sp + 64
	return
	// succ:  assoc_quote_exit
l000000000045D13C:
	x0 = 0x0000000000000000
	v30 = sp + 16
	x19 = Mem0[v30:word64]
	v30 = v30 + 8
	x20 = Mem0[v30:word64]
	v31 = sp + 32
	x21 = Mem0[v31:word64]
	v31 = v31 + 8
	x22 = Mem0[v31:word64]
	v32 = sp + 48
	x23 = Mem0[v32:word64]
	v32 = v32 + 8
	x24 = Mem0[v32:word64]
	x29 = Mem0[sp:word64]
	sp = sp + 8
	x30 = Mem0[sp:word64]
	sp = sp + 64
	return
	// succ:  assoc_quote_exit
assoc_quote_exit:


// assoc_quote_escapes
// Return size: 0
void assoc_quote_escapes()
assoc_quote_escapes_entry:
	// succ:  l000000000045D154
l000000000045D154:
	sp = fp
	sp = sp + -64
	Mem0[sp:word64] = x29
	sp = sp + 8
	Mem0[sp:word64] = x30
	x29 = x31 + 0x0000000000000000
	v8 = sp + 48
	Mem0[v8:word64] = x23
	v8 = v8 + 8
	Mem0[v8:word64] = x24
	v11 = sp + 16
	Mem0[v11:word64] = x19
	v11 = v11 + 8
	Mem0[v11:word64] = x20
	v14 = sp + 32
	Mem0[v14:word64] = x21
	v14 = v14 + 8
	Mem0[v14:word64] = x22
	x24 = x0
	branch x0 == 0x0000000000000000 l000000000045D1E4
	// succ:  l000000000045D170 l000000000045D1E4
l000000000045D170:
	w0 = Mem0[x0 + 12:word32]
	branch w0 == 0x00000000 l000000000045D1FC
	// succ:  l000000000045D178 l000000000045D1FC
l000000000045D178:
	w1 = Mem0[x24 + 8:word32]
	x23 = 0x0000000000000000
	x21 = 0x00000000004AE000
	NZCV = cond(w1 - w31)
	w22 = w23
	x21 = x21 + 0xFFFFFFFFFFFFF868
	branch Test(LE,ZCV) l000000000045D1E4
	// succ:  l000000000045D194 l000000000045D1E4
l000000000045D194:
	x0 = Mem0[x24:word64]
	x19 = Mem0[x0 + x23:word64]
	branch x19 == 0x0000000000000000 l000000000045D1D4
	// succ:  l000000000045D1A0 l000000000045D1D4
l000000000045D1A0:
	x0 = Mem0[x19 + 16:word64]
	call quote_escapes (retsize: 0;)
	x3 = Mem0[x19 + 16:word64]
	x20 = x0
	x1 = x21
	x0 = x3
	w2 = 0x000000A1
	branch x3 == 0x0000000000000000 l000000000045D1C4
	// succ:  l000000000045D1C0 l000000000045D1C4
l000000000045D1C0:
	call sh_xfree (retsize: 0;)
	// succ:  l000000000045D1C4
l000000000045D1C4:
	Mem0[x19 + 16:word64] = x20
	x19 = Mem0[x19:word64]
	branch x19 != 0x0000000000000000 l000000000045D1A0
	// succ:  l000000000045D1D0 l000000000045D1A0
l000000000045D1D0:
	w1 = Mem0[x24 + 8:word32]
	// succ:  l000000000045D1D4
l000000000045D1D4:
	w22 = w22 + 0x00000001
	NZCV = cond(w1 - w22)
	x23 = x23 + 0x0000000000000008
	branch Test(GT,NZV) l000000000045D194
	// succ:  l000000000045D1E4 l000000000045D194
l000000000045D1E4:
	x0 = x24
	v26 = sp + 16
	x19 = Mem0[v26:word64]
	v26 = v26 + 8
	x20 = Mem0[v26:word64]
	v27 = sp + 32
	x21 = Mem0[v27:word64]
	v27 = v27 + 8
	x22 = Mem0[v27:word64]
	v28 = sp + 48
	x23 = Mem0[v28:word64]
	v28 = v28 + 8
	x24 = Mem0[v28:word64]
	x29 = Mem0[sp:word64]
	sp = sp + 8
	x30 = Mem0[sp:word64]
	sp = sp + 64
	return
	// succ:  assoc_quote_escapes_exit
l000000000045D1FC:
	x0 = 0x0000000000000000
	v30 = sp + 16
	x19 = Mem0[v30:word64]
	v30 = v30 + 8
	x20 = Mem0[v30:word64]
	v31 = sp + 32
	x21 = Mem0[v31:word64]
	v31 = v31 + 8
	x22 = Mem0[v31:word64]
	v32 = sp + 48
	x23 = Mem0[v32:word64]
	v32 = v32 + 8
	x24 = Mem0[v32:word64]
	x29 = Mem0[sp:word64]
	sp = sp + 8
	x30 = Mem0[sp:word64]
	sp = sp + 64
	return
	// succ:  assoc_quote_escapes_exit
assoc_quote_escapes_exit:


// assoc_dequote
// Return size: 0
void assoc_dequote()
assoc_dequote_entry:
	// succ:  l000000000045D214
l000000000045D214:
	sp = fp
	sp = sp + -64
	Mem0[sp:word64] = x29
	sp = sp + 8
	Mem0[sp:word64] = x30
	x29 = x31 + 0x0000000000000000
	v8 = sp + 48
	Mem0[v8:word64] = x23
	v8 = v8 + 8
	Mem0[v8:word64] = x24
	v11 = sp + 16
	Mem0[v11:word64] = x19
	v11 = v11 + 8
	Mem0[v11:word64] = x20
	v14 = sp + 32
	Mem0[v14:word64] = x21
	v14 = v14 + 8
	Mem0[v14:word64] = x22
	x24 = x0
	branch x0 == 0x0000000000000000 l000000000045D2A4
	// succ:  l000000000045D230 l000000000045D2A4
l000000000045D230:
	w0 = Mem0[x0 + 12:word32]
	branch w0 == 0x00000000 l000000000045D2BC
	// succ:  l000000000045D238 l000000000045D2BC
l000000000045D238:
	w1 = Mem0[x24 + 8:word32]
	x23 = 0x0000000000000000
	x21 = 0x00000000004AE000
	NZCV = cond(w1 - w31)
	w22 = w23
	x21 = x21 + 0xFFFFFFFFFFFFF868
	branch Test(LE,ZCV) l000000000045D2A4
	// succ:  l000000000045D254 l000000000045D2A4
l000000000045D254:
	x0 = Mem0[x24:word64]
	x19 = Mem0[x0 + x23:word64]
	branch x19 == 0x0000000000000000 l000000000045D294
	// succ:  l000000000045D260 l000000000045D294
l000000000045D260:
	x0 = Mem0[x19 + 16:word64]
	call dequote_string (retsize: 0;)
	x3 = Mem0[x19 + 16:word64]
	x20 = x0
	x1 = x21
	x0 = x3
	w2 = 0x000000B7
	branch x3 == 0x0000000000000000 l000000000045D284
	// succ:  l000000000045D280 l000000000045D284
l000000000045D280:
	call sh_xfree (retsize: 0;)
	// succ:  l000000000045D284
l000000000045D284:
	Mem0[x19 + 16:word64] = x20
	x19 = Mem0[x19:word64]
	branch x19 != 0x0000000000000000 l000000000045D260
	// succ:  l000000000045D290 l000000000045D260
l000000000045D290:
	w1 = Mem0[x24 + 8:word32]
	// succ:  l000000000045D294
l000000000045D294:
	w22 = w22 + 0x00000001
	NZCV = cond(w1 - w22)
	x23 = x23 + 0x0000000000000008
	branch Test(GT,NZV) l000000000045D254
	// succ:  l000000000045D2A4 l000000000045D254
l000000000045D2A4:
	x0 = x24
	v26 = sp + 16
	x19 = Mem0[v26:word64]
	v26 = v26 + 8
	x20 = Mem0[v26:word64]
	v27 = sp + 32
	x21 = Mem0[v27:word64]
	v27 = v27 + 8
	x22 = Mem0[v27:word64]
	v28 = sp + 48
	x23 = Mem0[v28:word64]
	v28 = v28 + 8
	x24 = Mem0[v28:word64]
	x29 = Mem0[sp:word64]
	sp = sp + 8
	x30 = Mem0[sp:word64]
	sp = sp + 64
	return
	// succ:  assoc_dequote_exit
l000000000045D2BC:
	x0 = 0x0000000000000000
	v30 = sp + 16
	x19 = Mem0[v30:word64]
	v30 = v30 + 8
	x20 = Mem0[v30:word64]
	v31 = sp + 32
	x21 = Mem0[v31:word64]
	v31 = v31 + 8
	x22 = Mem0[v31:word64]
	v32 = sp + 48
	x23 = Mem0[v32:word64]
	v32 = v32 + 8
	x24 = Mem0[v32:word64]
	x29 = Mem0[sp:word64]
	sp = sp + 8
	x30 = Mem0[sp:word64]
	sp = sp + 64
	return
	// succ:  assoc_dequote_exit
assoc_dequote_exit:


// assoc_dequote_escapes
// Return size: 0
void assoc_dequote_escapes()
assoc_dequote_escapes_entry:
	// succ:  l000000000045D2D4
l000000000045D2D4:
	sp = fp
	sp = sp + -64
	Mem0[sp:word64] = x29
	sp = sp + 8
	Mem0[sp:word64] = x30
	x29 = x31 + 0x0000000000000000
	v8 = sp + 48
	Mem0[v8:word64] = x23
	v8 = v8 + 8
	Mem0[v8:word64] = x24
	v11 = sp + 16
	Mem0[v11:word64] = x19
	v11 = v11 + 8
	Mem0[v11:word64] = x20
	v14 = sp + 32
	Mem0[v14:word64] = x21
	v14 = v14 + 8
	Mem0[v14:word64] = x22
	x24 = x0
	branch x0 == 0x0000000000000000 l000000000045D364
	// succ:  l000000000045D2F0 l000000000045D364
l000000000045D2F0:
	w0 = Mem0[x0 + 12:word32]
	branch w0 == 0x00000000 l000000000045D37C
	// succ:  l000000000045D2F8 l000000000045D37C
l000000000045D2F8:
	w1 = Mem0[x24 + 8:word32]
	x23 = 0x0000000000000000
	x21 = 0x00000000004AE000
	NZCV = cond(w1 - w31)
	w22 = w23
	x21 = x21 + 0xFFFFFFFFFFFFF868
	branch Test(LE,ZCV) l000000000045D364
	// succ:  l000000000045D314 l000000000045D364
l000000000045D314:
	x0 = Mem0[x24:word64]
	x19 = Mem0[x0 + x23:word64]
	branch x19 == 0x0000000000000000 l000000000045D354
	// succ:  l000000000045D320 l000000000045D354
l000000000045D320:
	x0 = Mem0[x19 + 16:word64]
	call dequote_escapes (retsize: 0;)
	x3 = Mem0[x19 + 16:word64]
	x20 = x0
	x1 = x21
	x0 = x3
	w2 = 0x000000CD
	branch x3 == 0x0000000000000000 l000000000045D344
	// succ:  l000000000045D340 l000000000045D344
l000000000045D340:
	call sh_xfree (retsize: 0;)
	// succ:  l000000000045D344
l000000000045D344:
	Mem0[x19 + 16:word64] = x20
	x19 = Mem0[x19:word64]
	branch x19 != 0x0000000000000000 l000000000045D320
	// succ:  l000000000045D350 l000000000045D320
l000000000045D350:
	w1 = Mem0[x24 + 8:word32]
	// succ:  l000000000045D354
l000000000045D354:
	w22 = w22 + 0x00000001
	NZCV = cond(w1 - w22)
	x23 = x23 + 0x0000000000000008
	branch Test(GT,NZV) l000000000045D314
	// succ:  l000000000045D364 l000000000045D314
l000000000045D364:
	x0 = x24
	v26 = sp + 16
	x19 = Mem0[v26:word64]
	v26 = v26 + 8
	x20 = Mem0[v26:word64]
	v27 = sp + 32
	x21 = Mem0[v27:word64]
	v27 = v27 + 8
	x22 = Mem0[v27:word64]
	v28 = sp + 48
	x23 = Mem0[v28:word64]
	v28 = v28 + 8
	x24 = Mem0[v28:word64]
	x29 = Mem0[sp:word64]
	sp = sp + 8
	x30 = Mem0[sp:word64]
	sp = sp + 64
	return
	// succ:  assoc_dequote_escapes_exit
l000000000045D37C:
	x0 = 0x0000000000000000
	v30 = sp + 16
	x19 = Mem0[v30:word64]
	v30 = v30 + 8
	x20 = Mem0[v30:word64]
	v31 = sp + 32
	x21 = Mem0[v31:word64]
	v31 = v31 + 8
	x22 = Mem0[v31:word64]
	v32 = sp + 48
	x23 = Mem0[v32:word64]
	v32 = v32 + 8
	x24 = Mem0[v32:word64]
	x29 = Mem0[sp:word64]
	sp = sp + 8
	x30 = Mem0[sp:word64]
	sp = sp + 64
	return
	// succ:  assoc_dequote_escapes_exit
assoc_dequote_escapes_exit:


// assoc_remove_quoted_nulls
// Return size: 0
void assoc_remove_quoted_nulls()
assoc_remove_quoted_nulls_entry:
	// succ:  l000000000045D394
l000000000045D394:
	sp = fp
	sp = sp + -48
	Mem0[sp:word64] = x29
	sp = sp + 8
	Mem0[sp:word64] = x30
	x29 = x31 + 0x0000000000000000
	v8 = sp + 32
	Mem0[v8:word64] = x21
	v8 = v8 + 8
	Mem0[v8:word64] = x22
	v11 = sp + 16
	Mem0[v11:word64] = x19
	v11 = v11 + 8
	Mem0[v11:word64] = x20
	x22 = x0
	branch x0 == 0x0000000000000000 l000000000045D3FC
	// succ:  l000000000045D3AC l000000000045D3FC
l000000000045D3AC:
	w0 = Mem0[x0 + 12:word32]
	branch w0 == 0x00000000 l000000000045D410
	// succ:  l000000000045D3B4 l000000000045D410
l000000000045D3B4:
	w1 = Mem0[x22 + 8:word32]
	x21 = 0x0000000000000000
	NZCV = cond(w1 - w31)
	w20 = w21
	branch Test(LE,ZCV) l000000000045D3FC
	// succ:  l000000000045D3C8 l000000000045D3FC
l000000000045D3C8:
	x0 = Mem0[x22:word64]
	x19 = Mem0[x0 + x21:word64]
	branch x19 == 0x0000000000000000 l000000000045D3EC
	// succ:  l000000000045D3D4 l000000000045D3EC
l000000000045D3D4:
	x0 = Mem0[x19 + 16:word64]
	call remove_quoted_nulls (retsize: 0;)
	Mem0[x19 + 16:word64] = x0
	x19 = Mem0[x19:word64]
	branch x19 != 0x0000000000000000 l000000000045D3D4
	// succ:  l000000000045D3E8 l000000000045D3D4
l000000000045D3E8:
	w1 = Mem0[x22 + 8:word32]
	// succ:  l000000000045D3EC
l000000000045D3EC:
	w20 = w20 + 0x00000001
	NZCV = cond(w1 - w20)
	x21 = x21 + 0x0000000000000008
	branch Test(GT,NZV) l000000000045D3C8
	// succ:  l000000000045D3FC l000000000045D3C8
l000000000045D3FC:
	x0 = x22
	v20 = sp + 16
	x19 = Mem0[v20:word64]
	v20 = v20 + 8
	x20 = Mem0[v20:word64]
	v21 = sp + 32
	x21 = Mem0[v21:word64]
	v21 = v21 + 8
	x22 = Mem0[v21:word64]
	x29 = Mem0[sp:word64]
	sp = sp + 8
	x30 = Mem0[sp:word64]
	sp = sp + 48
	return
	// succ:  assoc_remove_quoted_nulls_exit
l000000000045D410:
	x0 = 0x0000000000000000
	v23 = sp + 16
	x19 = Mem0[v23:word64]
	v23 = v23 + 8
	x20 = Mem0[v23:word64]
	v24 = sp + 32
	x21 = Mem0[v24:word64]
	v24 = v24 + 8
	x22 = Mem0[v24:word64]
	x29 = Mem0[sp:word64]
	sp = sp + 8
	x30 = Mem0[sp:word64]
	sp = sp + 48
	return
	// succ:  assoc_remove_quoted_nulls_exit
assoc_remove_quoted_nulls_exit:


// assoc_subrange
// Return size: 0
void assoc_subrange()
assoc_subrange_entry:
	// succ:  l000000000045D424
l000000000045D424:
	sp = fp
	sp = sp + -80
	Mem0[sp:word64] = x29
	sp = sp + 8
	Mem0[sp:word64] = x30
	x29 = x31 + 0x0000000000000000
	w5 = Mem0[x0 + 12:word32]
	v10 = sp + 16
	Mem0[v10:word64] = x19
	v10 = v10 + 8
	Mem0[v10:word64] = x20
	v13 = sp + 32
	Mem0[v13:word64] = x21
	v13 = v13 + 8
	Mem0[v13:word64] = x22
	x19 = x1
	branch w5 == 0x00000000 l000000000045D484
	// succ:  l000000000045D440 l000000000045D484
l000000000045D440:
	w1 = 0x00000000
	Mem0[x29 + 48:word64] = x2
	Mem0[x29 + 56:word64] = x3
	Mem0[x29 + 64:word64] = x4
	call fn000000000045CE14 (retsize: 0;)
	x22 = x0
	x2 = Mem0[x29 + 48:word64]
	x3 = Mem0[x29 + 56:word64]
	x4 = Mem0[x29 + 64:word64]
	branch x0 == 0x0000000000000000 l000000000045D484
	// succ:  l000000000045D468 l000000000045D484
l000000000045D468:
	x5 = x0
	x6 = 0x0000000000000001
	// succ:  l000000000045D470
l000000000045D470:
	x31 = x19 - x6
	NZCV = cond(x31)
	branch Test(LE,ZCV) l000000000045D498
	// succ:  l000000000045D478 l000000000045D498
l000000000045D478:
	x5 = Mem0[x5:word64]
	x6 = x6 + 0x0000000000000001
	branch x5 != 0x0000000000000000 l000000000045D470
	// succ:  l000000000045D484 l000000000045D470
l000000000045D484:
	x0 = 0x0000000000000000
	v23 = sp + 16
	x19 = Mem0[v23:word64]
	v23 = v23 + 8
	x20 = Mem0[v23:word64]
	v24 = sp + 32
	x21 = Mem0[v24:word64]
	v24 = v24 + 8
	x22 = Mem0[v24:word64]
	x29 = Mem0[sp:word64]
	sp = sp + 8
	x30 = Mem0[sp:word64]
	sp = sp + 80
	return
	// succ:  assoc_subrange_exit
l000000000045D498:
	x1 = x5
	x19 = x5
	x6 = 0x0000000000000000
	goto l000000000045D4B0
	// succ:  l000000000045D4B0
l000000000045D4A8:
	x5 = x19
	x19 = x20
	// succ:  l000000000045D4B0
l000000000045D4B0:
	x31 = x6 - x2
	NZCV = cond(x31)
	branch Test(GE,NZV) l000000000045D50C
	// succ:  l000000000045D4B8 l000000000045D50C
l000000000045D4B8:
	x20 = Mem0[x19:word64]
	x6 = x6 + 0x0000000000000001
	branch x20 != 0x0000000000000000 l000000000045D4A8
	// succ:  l000000000045D4C4 l000000000045D4A8
l000000000045D4C4:
	NZCV = cond(w3 - w31)
	w2 = 0x00000040
	w0 = 0x0000002A
l000000000045D50C:
	x20 = x19
	x19 = x5
	goto l000000000045D4C4
	// succ:  l000000000045D4C4
assoc_subrange_exit:


// assoc_to_assign
// Return size: 0
void assoc_to_assign()
assoc_to_assign_entry:
	// succ:  l000000000045D518
l000000000045D518:
	sp = fp
	sp = sp + -112
	Mem0[sp:word64] = x29
	sp = sp + 8
	Mem0[sp:word64] = x30
	x29 = x31 + 0x0000000000000000
	v8 = sp + 16
	Mem0[v8:word64] = x19
	v8 = v8 + 8
	Mem0[v8:word64] = x20
	v11 = sp + 32
	Mem0[v11:word64] = x21
	v11 = v11 + 8
	Mem0[v11:word64] = x22
	v14 = sp + 48
	Mem0[v14:word64] = x23
	v14 = v14 + 8
	Mem0[v14:word64] = x24
	v17 = sp + 64
	Mem0[v17:word64] = x25
	v17 = v17 + 8
	Mem0[v17:word64] = x26
	v20 = sp + 80
	Mem0[v20:word64] = x27
	v20 = v20 + 8
	Mem0[v20:word64] = x28
	Mem0[x29 + 96:word64] = x0
	Mem0[x29 + 104:word32] = w1
	branch x0 == 0x0000000000000000 l000000000045D884
	// succ:  l000000000045D540 l000000000045D884
l000000000045D540:
	w0 = Mem0[x0 + 12:word32]
	branch w0 == 0x00000000 l000000000045D814
	// succ:  l000000000045D548 l000000000045D814
l000000000045D548:
	x27 = 0x00000000004AE000
	x1 = x27 + 0xFFFFFFFFFFFFF868
	x0 = 0x0000000000000080
	w2 = 0x00000196
	call sh_xmalloc (retsize: 0;)
	x23 = x0
	x1 = Mem0[x29 + 96:word64]
	w0 = 0x00000028
	Mem0[x23:byte] = (byte) w0
	w0 = Mem0[x1 + 8:word32]
	NZCV = cond(w0 - w31)
	branch Test(LE,ZCV) l000000000045D878
	// succ:  l000000000045D578 l000000000045D878
l000000000045D578:
	x25 = 0x0000000000000000
	w24 = 0x00000001
	w19 = 0x00000080
	w28 = w25
	// succ:  l000000000045D588
l000000000045D588:
	x2 = Mem0[x29 + 96:word64]
	x1 = Mem0[x2:word64]
	x22 = Mem0[x1 + x25:word64]
	branch x22 == 0x0000000000000000 l000000000045D724
	// succ:  l000000000045D598 l000000000045D724
l000000000045D598:
	x0 = Mem0[x22 + 8:word64]
	call sh_contains_shell_metas (retsize: 0;)
	branch w0 != 0x00000000 l000000000045D804
	// succ:  l000000000045D5A4 l000000000045D804
l000000000045D5A4:
	x20 = Mem0[x22 + 8:word64]
	// succ:  l000000000045D5A8
l000000000045D5A8:
	x0 = Mem0[x22 + 16:word64]
	branch x0 == 0x0000000000000000 l000000000045D7EC
	// succ:  l000000000045D5B0 l000000000045D7EC
l000000000045D5B0:
	call sh_double_quote (retsize: 0;)
	x21 = x0
	branch x20 == 0x0000000000000000 l000000000045D7F4
	// succ:  l000000000045D5BC l000000000045D7F4
l000000000045D5BC:
	v34 = Mem0[x20:byte]
	w0 = (word32) v34
	w26 = 0x00000008
	branch w0 == 0x00000000 l000000000045D5EC
	// succ:  l000000000045D5C8 l000000000045D5EC
l000000000045D5C8:
	v36 = Mem0[x20 + 1:byte]
	w0 = (word32) v36
	w26 = 0x00000009
	branch w0 == 0x00000000 l000000000045D5EC
	// succ:  l000000000045D5D4 l000000000045D5EC
l000000000045D5D4:
	v37 = Mem0[x20 + 2:byte]
	w0 = (word32) v37
	w26 = 0x0000000A
	branch w0 == 0x00000000 l000000000045D5EC
	// succ:  l000000000045D5E0 l000000000045D5EC
l000000000045D5E0:
	x0 = x20
	strlen(x0)
	sp = sp + 0xFFFFFFFFFFFFFFF8
	w26 = w0 + 0x00000008
	// succ:  l000000000045D5EC
l000000000045D5EC:
	branch x21 == 0x0000000000000000 l000000000045D7FC
	// succ:  l000000000045D5F0 l000000000045D7FC
l000000000045D5F0:
	v43 = Mem0[x21:byte]
	w1 = (word32) v43
	w0 = 0x00000000
	branch w1 == 0x00000000 l000000000045D61C
	// succ:  l000000000045D5FC l000000000045D61C
l000000000045D5FC:
	v44 = Mem0[x21 + 1:byte]
	w1 = (word32) v44
	w0 = 0x00000001
	branch w1 == 0x00000000 l000000000045D61C
	// succ:  l000000000045D608 l000000000045D61C
l000000000045D608:
	v45 = Mem0[x21 + 2:byte]
	w1 = (word32) v45
	w0 = 0x00000002
	branch w1 == 0x00000000 l000000000045D61C
	// succ:  l000000000045D614 l000000000045D61C
l000000000045D614:
	x0 = x21
	strlen(x0)
	sp = sp + 0xFFFFFFFFFFFFFFF8
	// succ:  l000000000045D61C
l000000000045D61C:
	w2 = w0 + w26
	w2 = w2 + 0x00000001
	w2 = w2 + w24
	NZCV = cond(w2 - w19)
	branch Test(GE,NZV) l000000000045D7A4
	// succ:  l000000000045D630 l000000000045D7A4
l000000000045D630:
	w0 = 0x0000005B
	w26 = w24 + 0x00000001
	Mem0[x23 + (int64) ((int32) w24):byte] = (byte) w0
	x1 = x20
	x0 = x23 + (int64) ((int32) w26)
	strcpy(x0, x1)
	sp = sp + 0xFFFFFFFFFFFFFFF8
	branch x20 == 0x0000000000000000 l000000000045D7E4
	// succ:  l000000000045D64C l000000000045D7E4
l000000000045D64C:
	v48 = Mem0[x20:byte]
	w1 = (word32) v48
	w0 = 0x00000000
	branch w1 == 0x00000000 l000000000045D678
	// succ:  l000000000045D658 l000000000045D678
l000000000045D658:
	v49 = Mem0[x20 + 1:byte]
	w1 = (word32) v49
	w0 = 0x00000001
	branch w1 == 0x00000000 l000000000045D678
	// succ:  l000000000045D664 l000000000045D678
l000000000045D664:
	v50 = Mem0[x20 + 2:byte]
	w1 = (word32) v50
	w0 = 0x00000002
	branch w1 == 0x00000000 l000000000045D678
	// succ:  l000000000045D670 l000000000045D678
l000000000045D670:
	x0 = x20
	strlen(x0)
	sp = sp + 0xFFFFFFFFFFFFFFF8
	// succ:  l000000000045D678
l000000000045D678:
	w24 = w0 + w26
	w0 = 0x0000005D
	Mem0[x23 + (int64) ((int32) w24):byte] = (byte) w0
	w1 = 0x0000003D
	w0 = w24 + 0x00000001
	Mem0[x23 + (int64) ((int32) w0):byte] = (byte) w1
	w24 = w24 + 0x00000002
	branch x21 == 0x0000000000000000 l000000000045D6D4
	// succ:  l000000000045D698 l000000000045D6D4
l000000000045D698:
	x1 = x21
	x0 = x23 + (int64) ((int32) w24)
	strcpy(x0, x1)
	sp = sp + 0xFFFFFFFFFFFFFFF8
	v51 = Mem0[x21:byte]
	w1 = (word32) v51
	w0 = 0x00000000
	branch w1 == 0x00000000 l000000000045D6D0
	// succ:  l000000000045D6B0 l000000000045D6D0
l000000000045D6B0:
	v52 = Mem0[x21 + 1:byte]
	w1 = (word32) v52
	w0 = 0x00000001
	branch w1 == 0x00000000 l000000000045D6D0
	// succ:  l000000000045D6BC l000000000045D6D0
l000000000045D6BC:
	v53 = Mem0[x21 + 2:byte]
	w1 = (word32) v53
	w0 = 0x00000002
	branch w1 == 0x00000000 l000000000045D6D0
	// succ:  l000000000045D6C8 l000000000045D6D0
l000000000045D6C8:
	x0 = x21
	strlen(x0)
	sp = sp + 0xFFFFFFFFFFFFFFF8
	// succ:  l000000000045D6D0
l000000000045D6D0:
	w24 = w0 + w24
	// succ:  l000000000045D6D4
l000000000045D6D4:
	w0 = 0x00000020
	Mem0[x23 + (int64) ((int32) w24):byte] = (byte) w0
	x0 = Mem0[x22 + 8:word64]
	w24 = w24 + 0x00000001
	x31 = x0 - x20
	NZCV = cond(x31)
	branch Test(EQ,Z) l000000000045D700
	// succ:  l000000000045D6EC l000000000045D700
l000000000045D6EC:
	branch x20 == 0x0000000000000000 l000000000045D700
	// succ:  l000000000045D6F0 l000000000045D700
l000000000045D6F0:
	x0 = x20
	x1 = x27 + 0xFFFFFFFFFFFFF868
	w2 = 0x000001B8
	call sh_xfree (retsize: 0;)
	// succ:  l000000000045D700
l000000000045D700:
	branch x21 == 0x0000000000000000 l000000000045D714
	// succ:  l000000000045D704 l000000000045D714
l000000000045D704:
	x0 = x21
	x1 = x27 + 0xFFFFFFFFFFFFF868
	w2 = 0x000001BA
	call sh_xfree (retsize: 0;)
	// succ:  l000000000045D714
l000000000045D714:
	x22 = Mem0[x22:word64]
	branch x22 != 0x0000000000000000 l000000000045D598
	// succ:  l000000000045D71C l000000000045D598
l000000000045D71C:
	x1 = Mem0[x29 + 96:word64]
	w0 = Mem0[x1 + 8:word32]
	// succ:  l000000000045D724
l000000000045D724:
	w28 = w28 + 0x00000001
	NZCV = cond(w0 - w28)
	x25 = x25 + 0x0000000000000008
	branch Test(GT,NZV) l000000000045D588
	// succ:  l000000000045D734 l000000000045D588
l000000000045D734:
	w20 = w24 + 0x00000001
	NZCV = cond(w20 - w19)
	branch Test(LT,NV) l000000000045D768
	// succ:  l000000000045D740 l000000000045D768
l000000000045D740:
	w0 = w20 - w19
	w0 = w0 & 0xFFFFFFF8
	w1 = w19 + 0x00000008
	w1 = w1 + w0
l000000000045D768:
l000000000045D770:
	w0 = 0x00000029
	Mem0[x23 + x24:byte] = (byte) w0
	w2 = Mem0[x29 + 104:word32]
	Mem0[x23 + x20:byte] = 0x00
	branch w2 != 0x00000000 l000000000045D838
	// succ:  l000000000045D784 l000000000045D838
l000000000045D784:
	x0 = x23
	v38 = sp + 16
	x19 = Mem0[v38:word64]
	v38 = v38 + 8
	x20 = Mem0[v38:word64]
	v39 = sp + 32
	x21 = Mem0[v39:word64]
	v39 = v39 + 8
	x22 = Mem0[v39:word64]
	v40 = sp + 48
	x23 = Mem0[v40:word64]
	v40 = v40 + 8
	x24 = Mem0[v40:word64]
	v41 = sp + 64
	x25 = Mem0[v41:word64]
	v41 = v41 + 8
	x26 = Mem0[v41:word64]
	v42 = sp + 80
	x27 = Mem0[v42:word64]
	v42 = v42 + 8
	x28 = Mem0[v42:word64]
	x29 = Mem0[sp:word64]
	sp = sp + 8
	x30 = Mem0[sp:word64]
	sp = sp + 112
	return
	// succ:  assoc_to_assign_exit
l000000000045D7A4:
l000000000045D7E4:
	w0 = w20
	goto l000000000045D678
	// succ:  l000000000045D678
l000000000045D7EC:
	x21 = x0
	branch x20 != 0x0000000000000000 l000000000045D5BC
	// succ:  l000000000045D7F4 l000000000045D5BC
l000000000045D7F4:
	w26 = 0x00000008
	branch x21 != 0x0000000000000000 l000000000045D5F0
	// succ:  l000000000045D7FC l000000000045D5F0
l000000000045D7FC:
	w0 = w21
	goto l000000000045D61C
	// succ:  l000000000045D61C
l000000000045D804:
	x0 = Mem0[x22 + 8:word64]
	call sh_double_quote (retsize: 0;)
	x20 = x0
	goto l000000000045D5A8
	// succ:  l000000000045D5A8
l000000000045D814:
	x23 = 0x0000000000000000
	x0 = x23
	v57 = sp + 16
	x19 = Mem0[v57:word64]
	v57 = v57 + 8
	x20 = Mem0[v57:word64]
	v58 = sp + 32
	x21 = Mem0[v58:word64]
	v58 = v58 + 8
	x22 = Mem0[v58:word64]
	v59 = sp + 48
	x23 = Mem0[v59:word64]
	v59 = v59 + 8
	x24 = Mem0[v59:word64]
	v60 = sp + 64
	x25 = Mem0[v60:word64]
	v60 = v60 + 8
	x26 = Mem0[v60:word64]
	v61 = sp + 80
	x27 = Mem0[v61:word64]
	v61 = v61 + 8
	x28 = Mem0[v61:word64]
	x29 = Mem0[sp:word64]
	sp = sp + 8
	x30 = Mem0[sp:word64]
	sp = sp + 112
	return
	// succ:  assoc_to_assign_exit
l000000000045D838:
	x0 = x23
	call sh_single_quote (retsize: 0;)
	x19 = x0
	x1 = x27 + 0xFFFFFFFFFFFFF868
	x0 = x23
	w2 = 0x000001C4
	call sh_xfree (retsize: 0;)
	x23 = x19
	x0 = x23
	v62 = sp + 16
	x19 = Mem0[v62:word64]
	v62 = v62 + 8
	x20 = Mem0[v62:word64]
	v63 = sp + 32
	x21 = Mem0[v63:word64]
	v63 = v63 + 8
	x22 = Mem0[v63:word64]
	v64 = sp + 48
	x23 = Mem0[v64:word64]
	v64 = v64 + 8
	x24 = Mem0[v64:word64]
	v65 = sp + 64
	x25 = Mem0[v65:word64]
	v65 = v65 + 8
	x26 = Mem0[v65:word64]
	v66 = sp + 80
	x27 = Mem0[v66:word64]
	v66 = v66 + 8
	x28 = Mem0[v66:word64]
	x29 = Mem0[sp:word64]
	sp = sp + 8
	x30 = Mem0[sp:word64]
	sp = sp + 112
	return
	// succ:  assoc_to_assign_exit
l000000000045D878:
	x20 = 0x0000000000000002
	x24 = 0x0000000000000001
	goto l000000000045D770
	// succ:  l000000000045D770
l000000000045D884:
	x23 = Mem0[x29 + 96:word64]
	goto l000000000045D784
	// succ:  l000000000045D784
assoc_to_assign_exit:


// assoc_to_word_list
// Return size: 0
void assoc_to_word_list()
assoc_to_word_list_entry:
	// succ:  l000000000045D88C
l000000000045D88C:
	sp = fp
	w1 = 0x00000000
	// succ:  l000000000045D890_thunk_fn000000000045CE14
l000000000045D890_thunk_fn000000000045CE14:
	call fn000000000045CE14 (retsize: 0;)
	return
	// succ:  assoc_to_word_list_exit
assoc_to_word_list_exit:


// assoc_keys_to_word_list
// Return size: 0
void assoc_keys_to_word_list()
assoc_keys_to_word_list_entry:
	// succ:  l000000000045D894
l000000000045D894:
	sp = fp
	w1 = 0x00000001
	// succ:  l000000000045D898_thunk_fn000000000045CE14
l000000000045D898_thunk_fn000000000045CE14:
	call fn000000000045CE14 (retsize: 0;)
	return
	// succ:  assoc_keys_to_word_list_exit
assoc_keys_to_word_list_exit:


// assoc_to_string
// Return size: 0
void assoc_to_string()
assoc_to_string_entry:
	// succ:  l000000000045D89C
l000000000045D89C:
	sp = fp
	sp = sp + -96
	Mem0[sp:word64] = x29
	sp = sp + 8
	Mem0[sp:word64] = x30
	x29 = x31 + 0x0000000000000000
	v8 = sp + 48
	Mem0[v8:word64] = x23
	v8 = v8 + 8
	Mem0[v8:word64] = x24
	v11 = sp + 64
	Mem0[v11:word64] = x25
	v11 = v11 + 8
	Mem0[v11:word64] = x26
	Mem0[sp + 80:word64] = x27
	v15 = sp + 16
	Mem0[v15:word64] = x19
	v15 = v15 + 8
	Mem0[v15:word64] = x20
	v18 = sp + 32
	Mem0[v18:word64] = x21
	v18 = v18 + 8
	Mem0[v18:word64] = x22
	x26 = x0
	x27 = x1
	w23 = w2
	branch x0 == 0x0000000000000000 l000000000045D9E4
	// succ:  l000000000045D8C8 l000000000045D9E4
l000000000045D8C8:
	w0 = Mem0[x0 + 12:word32]
	branch w0 == 0x00000000 l000000000045D9C0
	// succ:  l000000000045D8D0 l000000000045D9C0
l000000000045D8D0:
	w2 = Mem0[x26 + 8:word32]
	NZCV = cond(w2 - w31)
	branch Test(LE,ZCV) l000000000045DA04
	// succ:  l000000000045D8DC l000000000045DA04
l000000000045D8DC:
	x25 = 0x0000000000000000
	x22 = 0x00000000004AE000
	x21 = x25
	w24 = w25
	x22 = x22 + 0xFFFFFFFFFFFFF868
	// succ:  l000000000045D8F0
l000000000045D8F0:
	x0 = Mem0[x26:word64]
	x19 = Mem0[x0 + x25:word64]
	branch x19 != 0x0000000000000000 l000000000045D938
	// succ:  l000000000045D8FC l000000000045D938
l000000000045D8FC:
	goto l000000000045D970
	// succ:  l000000000045D970
l000000000045D900:
	call quote_string (retsize: 0;)
	x20 = x0
	// succ:  l000000000045D908
l000000000045D908:
	x0 = x20
	call make_bare_word (retsize: 0;)
	x1 = x21
	call make_word_list (retsize: 0;)
	x21 = x0
	x1 = x22
	x0 = x20
	w2 = 0x0000020D
	branch x20 == 0x0000000000000000 l000000000045D930
	// succ:  l000000000045D92C l000000000045D930
l000000000045D92C:
	call sh_xfree (retsize: 0;)
	// succ:  l000000000045D930
l000000000045D930:
	x19 = Mem0[x19:word64]
	branch x19 == 0x0000000000000000 l000000000045D96C
	// succ:  l000000000045D938 l000000000045D96C
l000000000045D938:
	x20 = Mem0[x19 + 16:word64]
	x0 = x20
	branch x20 == 0x0000000000000000 l000000000045D930
	// succ:  l000000000045D944 l000000000045D930
l000000000045D944:
	branch w23 != 0x00000000 l000000000045D900
	// succ:  l000000000045D948 l000000000045D900
l000000000045D948:
	strlen(x0)
	sp = sp + 0xFFFFFFFFFFFFFFF8
	w2 = 0x0000020B
	x1 = x22
	x0 = x0 + 0x0000000000000001
	call sh_xmalloc (retsize: 0;)
	x1 = x20
	strcpy(x0, x1)
	sp = sp + 0xFFFFFFFFFFFFFFF8
	x20 = x0
	goto l000000000045D908
	// succ:  l000000000045D908
l000000000045D96C:
	w2 = Mem0[x26 + 8:word32]
	// succ:  l000000000045D970
l000000000045D970:
	w24 = w24 + 0x00000001
	NZCV = cond(w2 - w24)
	x25 = x25 + 0x0000000000000008
	branch Test(GT,NZV) l000000000045D8F0
	// succ:  l000000000045D980 l000000000045D8F0
l000000000045D980:
	branch x21 == 0x0000000000000000 l000000000045DA04
	// succ:  l000000000045D984 l000000000045DA04
l000000000045D984:
	x0 = Mem0[x21:word64]
	branch x0 == 0x0000000000000000 l000000000045D99C
	// succ:  l000000000045D98C l000000000045D99C
l000000000045D98C:
	x0 = x21
	call list_reverse (retsize: 0;)
	x21 = x0
	branch x0 == 0x0000000000000000 l000000000045DA04
	// succ:  l000000000045D99C l000000000045DA04
l000000000045D99C:
	x0 = x21
	x1 = x27
	v34 = sp + 16
	x19 = Mem0[v34:word64]
	v34 = v34 + 8
	x20 = Mem0[v34:word64]
	v35 = sp + 32
	x21 = Mem0[v35:word64]
	v35 = v35 + 8
	x22 = Mem0[v35:word64]
	v36 = sp + 48
	x23 = Mem0[v36:word64]
	v36 = v36 + 8
	x24 = Mem0[v36:word64]
	v37 = sp + 64
	x25 = Mem0[v37:word64]
	v37 = v37 + 8
	x26 = Mem0[v37:word64]
	x27 = Mem0[sp + 80:word64]
	x29 = Mem0[sp:word64]
	sp = sp + 8
	x30 = Mem0[sp:word64]
	sp = sp + 96
	// succ:  l000000000045D9BC_thunk_string_list_internal
l000000000045D9BC_thunk_string_list_internal:
	call string_list_internal (retsize: 0;)
	return
	// succ:  assoc_to_string_exit
l000000000045D9C0:
	x1 = 0x00000000004AE000
	x0 = 0x0000000000000001
	x1 = x1 + 0xFFFFFFFFFFFFF868
	w2 = 0x000001FE
	// succ:  l000000000045D9D0
l000000000045D9D0:
	call sh_xmalloc (retsize: 0;)
	x1 = 0x00000000004AC000
	v39 = Mem0[x1 + 1120:byte]
	w1 = (word32) v39
	x26 = x0
	Mem0[x0:byte] = (byte) w1
	// succ:  l000000000045D9E4
l000000000045D9E4:
	x0 = x26
	v29 = sp + 16
	x19 = Mem0[v29:word64]
	v29 = v29 + 8
	x20 = Mem0[v29:word64]
	v30 = sp + 32
	x21 = Mem0[v30:word64]
	v30 = v30 + 8
	x22 = Mem0[v30:word64]
	v31 = sp + 48
	x23 = Mem0[v31:word64]
	v31 = v31 + 8
	x24 = Mem0[v31:word64]
	v32 = sp + 64
	x25 = Mem0[v32:word64]
	v32 = v32 + 8
	x26 = Mem0[v32:word64]
	x27 = Mem0[sp + 80:word64]
	x29 = Mem0[sp:word64]
	sp = sp + 8
	x30 = Mem0[sp:word64]
	sp = sp + 96
	return
	// succ:  assoc_to_string_exit
l000000000045DA04:
	x1 = 0x00000000004AE000
	x0 = 0x0000000000000001
	x1 = x1 + 0xFFFFFFFFFFFFF868
	w2 = 0x00000212
	goto l000000000045D9D0
	// succ:  l000000000045D9D0
assoc_to_string_exit:


// assoc_patsub
// Return size: 0
void assoc_patsub()
assoc_patsub_entry:
	// succ:  l000000000045DA18
l000000000045DA18:
	sp = fp
	sp = sp + -112
	Mem0[sp:word64] = x29
	sp = sp + 8
	Mem0[sp:word64] = x30
	x29 = x31 + 0x0000000000000000
	v8 = sp + 32
	Mem0[v8:word64] = x21
	v8 = v8 + 8
	Mem0[v8:word64] = x22
	v11 = sp + 48
	Mem0[v11:word64] = x23
	v11 = v11 + 8
	Mem0[v11:word64] = x24
	v14 = sp + 16
	Mem0[v14:word64] = x19
	v14 = v14 + 8
	Mem0[v14:word64] = x20
	v17 = sp + 64
	Mem0[v17:word64] = x25
	v17 = v17 + 8
	Mem0[v17:word64] = x26
	Mem0[sp + 80:word64] = x27
	x22 = x1
	x23 = x2
	w21 = w3
	branch x0 == 0x0000000000000000 l000000000045DB04
	// succ:  l000000000045DA44 l000000000045DB04
l000000000045DA44:
	w1 = Mem0[x0 + 12:word32]
	branch w1 == 0x00000000 l000000000045DBD0
	// succ:  l000000000045DA4C l000000000045DBD0
l000000000045DA4C:
	x1 = 0x0000000000000000
	call hash_copy (retsize: 0;)
	w1 = Mem0[x0 + 8:word32]
	x26 = 0x0000000000000000
	x24 = 0x00000000004AE000
	NZCV = cond(w1 - w31)
	x27 = x0
	w25 = w26
	x24 = x24 + 0xFFFFFFFFFFFFF868
	branch Test(LE,ZCV) l000000000045DAD0
	// succ:  l000000000045DA74 l000000000045DAD0
l000000000045DA74:
	x0 = Mem0[x27:word64]
	x19 = Mem0[x0 + x26:word64]
	branch x19 == 0x0000000000000000 l000000000045DAC0
	// succ:  l000000000045DA80 l000000000045DAC0
l000000000045DA80:
	x0 = Mem0[x19 + 16:word64]
	x1 = x22
	x2 = x23
	w3 = w21
	call pat_subst (retsize: 0;)
	x4 = Mem0[x19 + 16:word64]
	x20 = x0
	x1 = x24
	x0 = x4
	w2 = 0x00000127
	branch x4 == 0x0000000000000000 l000000000045DAB0
	// succ:  l000000000045DAAC l000000000045DAB0
l000000000045DAAC:
	call sh_xfree (retsize: 0;)
	// succ:  l000000000045DAB0
l000000000045DAB0:
	Mem0[x19 + 16:word64] = x20
	x19 = Mem0[x19:word64]
	branch x19 != 0x0000000000000000 l000000000045DA80
	// succ:  l000000000045DABC l000000000045DA80
l000000000045DABC:
	w1 = Mem0[x27 + 8:word32]
	// succ:  l000000000045DAC0
l000000000045DAC0:
	w25 = w25 + 0x00000001
	NZCV = cond(w1 - w25)
	x26 = x26 + 0x0000000000000008
	branch Test(GT,NZV) l000000000045DA74
	// succ:  l000000000045DAD0 l000000000045DA74
l000000000045DAD0:
	branch (w21 & 0x00000020) == 0x00000000 l000000000045DB20
	// succ:  l000000000045DAD4 l000000000045DB20
l000000000045DAD4:
	x0 = x27
	call assoc_quote_escapes (retsize: 0;)
	w2 = w21 & 0x00000040
	branch (w21 & 0x00000040) == 0x00000000 l000000000045DB90
	// succ:  l000000000045DAE4 l000000000045DB90
l000000000045DAE4:
	x1 = 0x00000000004BE000
	x0 = x27
	x1 = x1 + 0x0000000000000330
	call assoc_to_string (retsize: 0;)
	x19 = x0
	// succ:  l000000000045DAF8
l000000000045DAF8:
	x0 = x27
	call assoc_dispose (retsize: 0;)
	x0 = x19
	// succ:  l000000000045DB04
l000000000045DB04:
	v32 = sp + 16
	x19 = Mem0[v32:word64]
	v32 = v32 + 8
	x20 = Mem0[v32:word64]
	v33 = sp + 32
	x21 = Mem0[v33:word64]
	v33 = v33 + 8
	x22 = Mem0[v33:word64]
	v34 = sp + 48
	x23 = Mem0[v34:word64]
	v34 = v34 + 8
	x24 = Mem0[v34:word64]
	v35 = sp + 64
	x25 = Mem0[v35:word64]
	v35 = v35 + 8
	x26 = Mem0[v35:word64]
	x27 = Mem0[sp + 80:word64]
	x29 = Mem0[sp:word64]
	sp = sp + 8
	x30 = Mem0[sp:word64]
	sp = sp + 112
	return
	// succ:  assoc_patsub_exit
l000000000045DB20:
	x0 = x27
	call assoc_quote (retsize: 0;)
	branch (w21 & 0x00000040) == 0x00000000 l000000000045DB90
	// succ:  l000000000045DB2C l000000000045DB90
l000000000045DB2C:
	x0 = x29 + 0x0000000000000060
	call ifs_firstchar (retsize: 0;)
	x20 = x0
	call getifs (retsize: 0;)
	branch x0 == 0x0000000000000000 l000000000045DB4C
	// succ:  l000000000045DB40 l000000000045DB4C
l000000000045DB40:
	v38 = Mem0[x0:byte]
	w0 = (word32) v38
	x21 = 0x00000000004AE000
	branch w0 != 0x00000000 l000000000045DB68
	// succ:  l000000000045DB4C l000000000045DB68
l000000000045DB4C:
	w0 = Mem0[x29 + 96:word32]
	x21 = 0x00000000004AE000
	w31 = w0 - 0x00000001
	NZCV = cond(w31)
	branch Test(LE,ZCV) l000000000045DBF0
	// succ:  l000000000045DB5C l000000000045DBF0
l000000000045DB5C:
	w0 = 0x00000020
	Mem0[x20:byte] = (byte) w0
	Mem0[x20 + 1:byte] = 0x00
	// succ:  l000000000045DB68
l000000000045DB68:
	x1 = x20
	x0 = x27
	w2 = 0x00000000
	call assoc_to_string (retsize: 0;)
	x19 = x0
	x1 = x21 + 0xFFFFFFFFFFFFF868
	x0 = x20
	w2 = 0x00000144
	call sh_xfree (retsize: 0;)
	goto l000000000045DAF8
	// succ:  l000000000045DAF8
l000000000045DB90:
	x0 = x27
	call assoc_remove_quoted_nulls (retsize: 0;)
	x0 = 0x0000000000000000
	call ifs_firstchar (retsize: 0;)
	x20 = x0
	x1 = x20
	x0 = x27
	w2 = 0x00000000
	call assoc_to_string (retsize: 0;)
	x1 = 0x00000000004AE000
	x19 = x0
	x1 = x1 + 0xFFFFFFFFFFFFF868
	x0 = x20
	w2 = 0x00000135
	call sh_xfree (retsize: 0;)
	goto l000000000045DAF8
	// succ:  l000000000045DAF8
l000000000045DBD0:
	x0 = 0x0000000000000000
	v39 = sp + 16
	x19 = Mem0[v39:word64]
	v39 = v39 + 8
	x20 = Mem0[v39:word64]
	v40 = sp + 32
	x21 = Mem0[v40:word64]
	v40 = v40 + 8
	x22 = Mem0[v40:word64]
	v41 = sp + 48
	x23 = Mem0[v41:word64]
	v41 = v41 + 8
	x24 = Mem0[v41:word64]
	v42 = sp + 64
	x25 = Mem0[v42:word64]
	v42 = v42 + 8
	x26 = Mem0[v42:word64]
	x27 = Mem0[sp + 80:word64]
	x29 = Mem0[sp:word64]
	sp = sp + 8
	x30 = Mem0[sp:word64]
	sp = sp + 112
	return
	// succ:  assoc_patsub_exit
l000000000045DBF0:
	x0 = x20
	x1 = 0x0000000000000002
	x2 = x21 + 0xFFFFFFFFFFFFF868
	w3 = 0x0000013F
	call sh_xrealloc (retsize: 0;)
	x20 = x0
	goto l000000000045DB5C
	// succ:  l000000000045DB5C
assoc_patsub_exit:


// assoc_modcase
// Return size: 0
void assoc_modcase()
assoc_modcase_entry:
	// succ:  l000000000045DC0C
l000000000045DC0C:
	sp = fp
	sp = sp + -112
	Mem0[sp:word64] = x29
	sp = sp + 8
	Mem0[sp:word64] = x30
	x29 = x31 + 0x0000000000000000
	v8 = sp + 32
	Mem0[v8:word64] = x21
	v8 = v8 + 8
	Mem0[v8:word64] = x22
	v11 = sp + 64
	Mem0[v11:word64] = x25
	v11 = v11 + 8
	Mem0[v11:word64] = x26
	v14 = sp + 16
	Mem0[v14:word64] = x19
	v14 = v14 + 8
	Mem0[v14:word64] = x20
	v17 = sp + 48
	Mem0[v17:word64] = x23
	v17 = v17 + 8
	Mem0[v17:word64] = x24
	Mem0[sp + 80:word64] = x27
	x21 = x1
	w22 = w2
	w26 = w3
	branch x0 == 0x0000000000000000 l000000000045DCF4
	// succ:  l000000000045DC38 l000000000045DCF4
l000000000045DC38:
	w1 = Mem0[x0 + 12:word32]
	branch w1 == 0x00000000 l000000000045DDC0
	// succ:  l000000000045DC40 l000000000045DDC0
l000000000045DC40:
	x1 = 0x0000000000000000
	call hash_copy (retsize: 0;)
	w1 = Mem0[x0 + 8:word32]
	x25 = 0x0000000000000000
	x23 = 0x00000000004AE000
	NZCV = cond(w1 - w31)
	x27 = x0
	w24 = w25
	x23 = x23 + 0xFFFFFFFFFFFFF868
	branch Test(LE,ZCV) l000000000045DCC0
	// succ:  l000000000045DC68 l000000000045DCC0
l000000000045DC68:
	x0 = Mem0[x27:word64]
	x19 = Mem0[x0 + x25:word64]
	branch x19 == 0x0000000000000000 l000000000045DCB0
	// succ:  l000000000045DC74 l000000000045DCB0
l000000000045DC74:
	x0 = Mem0[x19 + 16:word64]
	x1 = x21
	w2 = w22
	call sh_modcase (retsize: 0;)
	x4 = Mem0[x19 + 16:word64]
	x20 = x0
	x1 = x23
	x0 = x4
	w2 = 0x00000162
	branch x4 == 0x0000000000000000 l000000000045DCA0
	// succ:  l000000000045DC9C l000000000045DCA0
l000000000045DC9C:
	call sh_xfree (retsize: 0;)
	// succ:  l000000000045DCA0
l000000000045DCA0:
	Mem0[x19 + 16:word64] = x20
	x19 = Mem0[x19:word64]
	branch x19 != 0x0000000000000000 l000000000045DC74
	// succ:  l000000000045DCAC l000000000045DC74
l000000000045DCAC:
	w1 = Mem0[x27 + 8:word32]
	// succ:  l000000000045DCB0
l000000000045DCB0:
	w24 = w24 + 0x00000001
	NZCV = cond(w1 - w24)
	x25 = x25 + 0x0000000000000008
	branch Test(GT,NZV) l000000000045DC68
	// succ:  l000000000045DCC0 l000000000045DC68
l000000000045DCC0:
	branch (w26 & 0x00000020) == 0x00000000 l000000000045DD10
	// succ:  l000000000045DCC4 l000000000045DD10
l000000000045DCC4:
	x0 = x27
	call assoc_quote_escapes (retsize: 0;)
	w2 = w26 & 0x00000040
	branch (w26 & 0x00000040) == 0x00000000 l000000000045DD80
	// succ:  l000000000045DCD4 l000000000045DD80
l000000000045DCD4:
	x1 = 0x00000000004BE000
	x0 = x27
	x1 = x1 + 0x0000000000000330
	call assoc_to_string (retsize: 0;)
	x19 = x0
	// succ:  l000000000045DCE8
l000000000045DCE8:
	x0 = x27
	call assoc_dispose (retsize: 0;)
	x0 = x19
	// succ:  l000000000045DCF4
l000000000045DCF4:
	v32 = sp + 16
	x19 = Mem0[v32:word64]
	v32 = v32 + 8
	x20 = Mem0[v32:word64]
	v33 = sp + 32
	x21 = Mem0[v33:word64]
	v33 = v33 + 8
	x22 = Mem0[v33:word64]
	v34 = sp + 48
	x23 = Mem0[v34:word64]
	v34 = v34 + 8
	x24 = Mem0[v34:word64]
	v35 = sp + 64
	x25 = Mem0[v35:word64]
	v35 = v35 + 8
	x26 = Mem0[v35:word64]
	x27 = Mem0[sp + 80:word64]
	x29 = Mem0[sp:word64]
	sp = sp + 8
	x30 = Mem0[sp:word64]
	sp = sp + 112
	return
	// succ:  assoc_modcase_exit
l000000000045DD10:
	x0 = x27
	call assoc_quote (retsize: 0;)
	branch (w26 & 0x00000040) == 0x00000000 l000000000045DD80
	// succ:  l000000000045DD1C l000000000045DD80
l000000000045DD1C:
	x0 = x29 + 0x0000000000000060
	call ifs_firstchar (retsize: 0;)
	x20 = x0
	call getifs (retsize: 0;)
	branch x0 == 0x0000000000000000 l000000000045DD3C
	// succ:  l000000000045DD30 l000000000045DD3C
l000000000045DD30:
	v38 = Mem0[x0:byte]
	w0 = (word32) v38
	x21 = 0x00000000004AE000
	branch w0 != 0x00000000 l000000000045DD58
	// succ:  l000000000045DD3C l000000000045DD58
l000000000045DD3C:
	w0 = Mem0[x29 + 96:word32]
	x21 = 0x00000000004AE000
	w31 = w0 - 0x00000001
	NZCV = cond(w31)
	branch Test(LE,ZCV) l000000000045DDE0
	// succ:  l000000000045DD4C l000000000045DDE0
l000000000045DD4C:
	w0 = 0x00000020
	Mem0[x20:byte] = (byte) w0
	Mem0[x20 + 1:byte] = 0x00
	// succ:  l000000000045DD58
l000000000045DD58:
	x1 = x20
	x0 = x27
	w2 = 0x00000000
	call assoc_to_string (retsize: 0;)
	x19 = x0
	x1 = x21 + 0xFFFFFFFFFFFFF868
	x0 = x20
	w2 = 0x0000017F
	call sh_xfree (retsize: 0;)
	goto l000000000045DCE8
	// succ:  l000000000045DCE8
l000000000045DD80:
	x0 = x27
	call assoc_remove_quoted_nulls (retsize: 0;)
	x0 = 0x0000000000000000
	call ifs_firstchar (retsize: 0;)
	x20 = x0
	x1 = x20
	x0 = x27
	w2 = 0x00000000
	call assoc_to_string (retsize: 0;)
	x1 = 0x00000000004AE000
	x19 = x0
	x1 = x1 + 0xFFFFFFFFFFFFF868
	x0 = x20
	w2 = 0x00000170
	call sh_xfree (retsize: 0;)
	goto l000000000045DCE8
	// succ:  l000000000045DCE8
l000000000045DDC0:
	x0 = 0x0000000000000000
	v39 = sp + 16
	x19 = Mem0[v39:word64]
	v39 = v39 + 8
	x20 = Mem0[v39:word64]
	v40 = sp + 32
	x21 = Mem0[v40:word64]
	v40 = v40 + 8
	x22 = Mem0[v40:word64]
	v41 = sp + 48
	x23 = Mem0[v41:word64]
	v41 = v41 + 8
	x24 = Mem0[v41:word64]
	v42 = sp + 64
	x25 = Mem0[v42:word64]
	v42 = v42 + 8
	x26 = Mem0[v42:word64]
	x27 = Mem0[sp + 80:word64]
	x29 = Mem0[sp:word64]
	sp = sp + 8
	x30 = Mem0[sp:word64]
	sp = sp + 112
	return
	// succ:  assoc_modcase_exit
l000000000045DDE0:
	x0 = x20
	x1 = 0x0000000000000002
	x2 = x21 + 0xFFFFFFFFFFFFF868
	w3 = 0x0000017A
	call sh_xrealloc (retsize: 0;)
	x20 = x0
	goto l000000000045DD4C
	// succ:  l000000000045DD4C
assoc_modcase_exit:


// fn000000000045DF84
// Return size: 0
void fn000000000045DF84()
fn000000000045DF84_entry:
	// succ:  l000000000045DF84
l000000000045DF84:
	sp = fp
	sp = sp + -144
	Mem0[sp:word64] = x29
	sp = sp + 8
	Mem0[sp:word64] = x30
	x29 = x31 + 0x0000000000000000
	w31 = w3 - 0x0000007D
	NZCV = cond(w31)
	v11 = sp + 32
	Mem0[v11:word64] = x21
	v11 = v11 + 8
	Mem0[v11:word64] = x22
	x21 = x0
	w0 = (word32) Test(NE,Z)
	Mem0[x29 + 112:word32] = w0
	x0 = 0x00000000004AE000
	x0 = x0 + 0xFFFFFFFFFFFFF890
	Mem0[x29 + 136:word64] = x0
	x0 = 0x00000000004AE000
	v17 = sp + 64
	Mem0[v17:word64] = x25
	v17 = v17 + 8
	Mem0[v17:word64] = x26
	v20 = sp + 16
	Mem0[v20:word64] = x19
	v20 = v20 + 8
	Mem0[v20:word64] = x20
	v23 = sp + 48
	Mem0[v23:word64] = x23
	v23 = v23 + 8
	Mem0[v23:word64] = x24
	x25 = 0x00000000004C2000
	w23 = 0x00000000
	x0 = x0 + 0xFFFFFFFFFFFFF878
	w20 = Mem0[x2:word32]
	v29 = sp + 80
	Mem0[v29:word64] = x27
	v29 = v29 + 8
	Mem0[v29:word64] = x28
	Mem0[x29 + 120:word64] = x2
	w27 = w3
	x28 = x1
	Mem0[x29 + 96:word64] = 0x0000000000000000
	w26 = w23
	w22 = w23
	x25 = x25 + 0xFFFFFFFFFFFFFCC0
	Mem0[x29 + 128:word64] = x0
fn000000000045DF84_exit:


// brace_expand
// Return size: 0
void brace_expand()
brace_expand_entry:
	// succ:  l000000000045E310
l000000000045E310:
	sp = fp
	sp = sp + -224
	Mem0[sp:word64] = x29
	sp = sp + 8
	Mem0[sp:word64] = x30
	x29 = x31 + 0x0000000000000000
	v8 = sp + 16
	Mem0[v8:word64] = x19
	v8 = v8 + 8
	Mem0[v8:word64] = x20
	v11 = sp + 32
	Mem0[v11:word64] = x21
	v11 = v11 + 8
	Mem0[v11:word64] = x22
	v14 = sp + 48
	Mem0[v14:word64] = x23
	v14 = v14 + 8
	Mem0[v14:word64] = x24
	v17 = sp + 64
	Mem0[v17:word64] = x25
	v17 = v17 + 8
	Mem0[v17:word64] = x26
	v20 = sp + 80
	Mem0[v20:word64] = x27
	v20 = v20 + 8
	Mem0[v20:word64] = x28
	x19 = x0
	Mem0[x29 + 120:word64] = 0x0000000000000000
	x20 = x29 + 0x0000000000000060
	strlen(x0)
	sp = sp + 0xFFFFFFFFFFFFFFF8
	x21 = x0
	x20 = x20 + 36
	Mem0[x20:word32] = 0x00000000
	// succ:  l000000000045E344
l000000000045E344:
	x1 = x21
	x2 = x20
	w3 = 0x0000007B
	x0 = x19
	call fn000000000045DF84 (retsize: 0;)
	w22 = w0
	x1 = x21
	x0 = x19
	x2 = x29 + 0x0000000000000080
	w3 = 0x0000007D
	branch w22 == 0x00000000 l000000000045E394
	// succ:  l000000000045E370 l000000000045E394
l000000000045E370:
	w4 = Mem0[x29 + 132:word32]
	w4 = w4 + 0x00000001
	Mem0[x29 + 128:word32] = w4
	call fn000000000045DF84 (retsize: 0;)
	branch w0 != 0x00000000 l000000000045E394
	// succ:  l000000000045E384 l000000000045E394
l000000000045E384:
	w0 = Mem0[x29 + 132:word32]
	w0 = w0 + 0x00000001
	Mem0[x29 + 132:word32] = w0
	goto l000000000045E344
	// succ:  l000000000045E344
l000000000045E394:
	w0 = Mem0[x29 + 132:word32]
	x26 = 0x00000000004AE000
	x25 = x26 + 0xFFFFFFFFFFFFF878
	w0 = w0 + 0x00000001
	w2 = 0x0000008A
	x1 = x25
brace_expand_exit:


// bash_brace_completion
// Return size: 0
void bash_brace_completion()
bash_brace_completion_entry:
	// succ:  l000000000045F234
l000000000045F234:
	sp = fp
	sp = sp + -96
	Mem0[sp:word64] = x29
	sp = sp + 8
	Mem0[sp:word64] = x30
	x29 = x31 + 0x0000000000000000
	x1 = 0x0000000000491000
	v9 = sp + 32
	Mem0[v9:word64] = x21
	v9 = v9 + 8
	Mem0[v9:word64] = x22
	x1 = x1 + 0x000000000000053C
	x21 = 0x00000000004E1000
	v12 = sp + 16
	Mem0[v12:word64] = x19
	v12 = v12 + 8
	Mem0[v12:word64] = x20
	v15 = sp + 48
	Mem0[v15:word64] = x23
	v15 = v15 + 8
	Mem0[v15:word64] = x24
	v18 = sp + 64
	Mem0[v18:word64] = x25
	v18 = v18 + 8
	Mem0[v18:word64] = x26
	x23 = 0x00000000004E1000
	x26 = Mem0[x21 + 4088:word64]
	x22 = 0x00000000004E1000
	x20 = 0x00000000004DE000
	x19 = 0x00000000004DE000
	Mem0[x21 + 4088:word64] = x1
	x1 = 0x000000000045F000
	v21 = sp + 80
	Mem0[v21:word64] = x27
	v21 = v21 + 8
	Mem0[v21:word64] = x28
	x25 = Mem0[x20 + 1384:word64]
	x28 = Mem0[x23 + 3984:word64]
	x27 = Mem0[x22 + 4064:word64]
	w24 = Mem0[x19 + 1376:word32]
	x1 = x1 + 0x0000000000000178
	w0 = 0x00000009
	Mem0[x23 + 3984:word64] = x1
	Mem0[x22 + 4064:word64] = 0x0000000000000000
	Mem0[x20 + 1384:word64] = 0x0000000000000000
	Mem0[x19 + 1376:word32] = 0x00000000
	call rl_complete_internal (retsize: 0;)
	Mem0[x23 + 3984:word64] = x28
	Mem0[x22 + 4064:word64] = x27
	Mem0[x21 + 4088:word64] = x26
	Mem0[x20 + 1384:word64] = x25
	Mem0[x19 + 1376:word32] = w24
	v24 = sp + 32
	x21 = Mem0[v24:word64]
	v24 = v24 + 8
	x22 = Mem0[v24:word64]
	v25 = sp + 16
	x19 = Mem0[v25:word64]
	v25 = v25 + 8
	x20 = Mem0[v25:word64]
	v26 = sp + 48
	x23 = Mem0[v26:word64]
	v26 = v26 + 8
	x24 = Mem0[v26:word64]
	v27 = sp + 64
	x25 = Mem0[v27:word64]
	v27 = v27 + 8
	x26 = Mem0[v27:word64]
	v28 = sp + 80
	x27 = Mem0[v28:word64]
	v28 = v28 + 8
	x28 = Mem0[v28:word64]
	x29 = Mem0[sp:word64]
	sp = sp + 8
	x30 = Mem0[sp:word64]
	sp = sp + 96
	return
	// succ:  bash_brace_completion_exit
bash_brace_completion_exit:


// bash_initialize_history
// Return size: 0
void bash_initialize_history()
bash_initialize_history_entry:
	// succ:  l000000000045F454
l000000000045F454:
	sp = fp
	w2 = 0x00000001
	x1 = 0x00000000004E2000
	Mem0[x1 + 3912:word32] = w2
	x2 = 0x00000000004AE000
	x2 = x2 + 0xFFFFFFFFFFFFF8C0
	x1 = 0x00000000004E2000
	Mem0[x1 + 3960:word64] = x2
	x0 = 0x00000000004AC000
	x2 = 0x000000000045F000
	x2 = x2 + 0x0000000000000334
	x1 = 0x00000000004E4000
	x0 = x0 + 0xFFFFFFFFFFFFFF00
	Mem0[x1 + 400:word64] = x2
	// succ:  l000000000045F488_thunk_sv_histchars
l000000000045F488_thunk_sv_histchars:
	call sv_histchars (retsize: 0;)
	return
	// succ:  bash_initialize_history_exit
bash_initialize_history_exit:


// bash_history_reinit
// Return size: 0
void bash_history_reinit()
bash_history_reinit_entry:
	// succ:  l000000000045F48C
l000000000045F48C:
	sp = fp
	NZCV = cond(w0 - w31)
	x1 = 0x00000000004D7000
	w0 = (word32) Test(NE,Z)
	x1 = x1 + 0x0000000000000180
	Mem0[x1:word32] = w0
	Mem0[x1 + 4:word32] = w0
	x2 = 0x00000000004D6000
	x1 = 0x000000000045F000
	Mem0[x2 + 3296:word32] = w0
	w3 = 0x00000001
	x2 = 0x00000000004E3000
	x1 = x1 + 0x0000000000000334
	x0 = 0x00000000004E4000
	Mem0[x2 + 3436:word32] = w3
	Mem0[x0 + 400:word64] = x1
	return
	// succ:  bash_history_reinit_exit
bash_history_reinit_exit:


// bash_history_disable
// Return size: 0
void bash_history_disable()
bash_history_disable_entry:
	// succ:  l000000000045F4CC
l000000000045F4CC:
	sp = fp
	x0 = 0x00000000004D7000
	x0 = x0 + 0x0000000000000180
	Mem0[x0 + 4:word32] = 0x00000000
	w1 = 0x00000001
	x0 = 0x00000000004E3000
	Mem0[x0 + 3436:word32] = w1
	return
	// succ:  bash_history_disable_exit
bash_history_disable_exit:


// bash_history_enable
// Return size: 0
void bash_history_enable()
bash_history_enable_entry:
	// succ:  l000000000045F4E8
l000000000045F4E8:
	sp = fp
	sp = sp + -16
	Mem0[sp:word64] = x29
	sp = sp + 8
	Mem0[sp:word64] = x30
	x29 = x31 + 0x0000000000000000
	x1 = 0x00000000004D7000
	w2 = 0x00000001
	x1 = x1 + 0x0000000000000180
	Mem0[x1 + 4:word32] = w2
	x0 = 0x00000000004AC000
	x1 = 0x00000000004E3000
	x2 = 0x000000000045F000
	x2 = x2 + 0x0000000000000334
	x0 = x0 + 0xFFFFFFFFFFFFFD18
	Mem0[x1 + 3436:word32] = 0x00000000
	x1 = 0x00000000004E4000
	Mem0[x1 + 400:word64] = x2
	call sv_history_control (retsize: 0;)
	x0 = 0x00000000004AC000
	x29 = Mem0[sp:word64]
	sp = sp + 8
	x30 = Mem0[sp:word64]
	sp = sp + 16
	x0 = x0 + 0xFFFFFFFFFFFFFD28
	// succ:  l000000000045F530_thunk_sv_histignore
l000000000045F530_thunk_sv_histignore:
	call sv_histignore (retsize: 0;)
	return
	// succ:  bash_history_enable_exit
bash_history_enable_exit:


// load_history
// Return size: 0
void load_history()
load_history_entry:
	// succ:  l000000000045F534
l000000000045F534:
	sp = fp
	sp = sp + -32
	Mem0[sp:word64] = x29
	sp = sp + 8
	Mem0[sp:word64] = x30
	x29 = x31 + 0x0000000000000000
	Mem0[sp + 16:word64] = x19
	x19 = 0x00000000004AC000
	x19 = x19 + 0xFFFFFFFFFFFFFE38
	x1 = 0x00000000004AE000
	x1 = x1 + 0xFFFFFFFFFFFFF8C8
	x0 = x19
	call set_if_not (retsize: 0;)
	x0 = x19
	call sv_histsize (retsize: 0;)
	x0 = x19
	x19 = 0x00000000004AC000
	call get_string_value (retsize: 0;)
	x19 = x19 + 0xFFFFFFFFFFFFFE28
	x1 = x0
	x0 = x19
	call set_if_not (retsize: 0;)
	x0 = x19
	call sv_histsize (retsize: 0;)
	x0 = 0x00000000004AC000
	x0 = x0 + 0xFFFFFFFFFFFFF990
	call get_string_value (retsize: 0;)
	x19 = x0
	branch x0 == 0x0000000000000000 l000000000045F5A0
	// succ:  l000000000045F598 l000000000045F5A0
l000000000045F598:
	v10 = Mem0[x0:byte]
	w1 = (word32) v10
	branch w1 != 0x00000000 l000000000045F5AC
	// succ:  l000000000045F5A0 l000000000045F5AC
l000000000045F5A0:
	x19 = Mem0[sp + 16:word64]
	x29 = Mem0[sp:word64]
	sp = sp + 8
	x30 = Mem0[sp:word64]
	sp = sp + 32
	return
	// succ:  load_history_exit
l000000000045F5AC:
	call file_exists (retsize: 0;)
	branch w0 == 0x00000000 l000000000045F5A0
	// succ:  l000000000045F5B4 l000000000045F5A0
l000000000045F5B4:
	x0 = x19
	call read_history (retsize: 0;)
	call using_history (retsize: 0;)
	call where_history (retsize: 0;)
	x1 = 0x00000000004E3000
	x19 = Mem0[sp + 16:word64]
	Mem0[x1 + 3424:word32] = w0
	x29 = Mem0[sp:word64]
	sp = sp + 8
	x30 = Mem0[sp:word64]
	sp = sp + 32
	return
	// succ:  load_history_exit
load_history_exit:


// bash_clear_history
// Return size: 0
void bash_clear_history()
bash_clear_history_entry:
	// succ:  l000000000045F5D8
l000000000045F5D8:
	sp = fp
	sp = sp + -16
	Mem0[sp:word64] = x29
	sp = sp + 8
	Mem0[sp:word64] = x30
	x29 = x31 + 0x0000000000000000
	call clear_history (retsize: 0;)
	x0 = 0x00000000004E3000
	Mem0[x0 + 3428:word32] = 0x00000000
	x29 = Mem0[sp:word64]
	sp = sp + 8
	x30 = Mem0[sp:word64]
	sp = sp + 16
	return
	// succ:  bash_clear_history_exit
bash_clear_history_exit:


// bash_delete_histent
// Return size: 0
void bash_delete_histent()
bash_delete_histent_entry:
	// succ:  l000000000045F5F4
l000000000045F5F4:
	sp = fp
	sp = sp + -16
	Mem0[sp:word64] = x29
	sp = sp + 8
	Mem0[sp:word64] = x30
	x29 = x31 + 0x0000000000000000
	call remove_history (retsize: 0;)
	branch x0 == 0x0000000000000000 l000000000045F608
	// succ:  l000000000045F604 l000000000045F608
l000000000045F604:
	call free_history_entry (retsize: 0;)
	// succ:  l000000000045F608
l000000000045F608:
	x1 = 0x00000000004E3000
	w2 = Mem0[x1 + 3428:word32]
	w0 = 0x00000001
	w2 = w2 - 0x00000001
	Mem0[x1 + 3428:word32] = w2
	x29 = Mem0[sp:word64]
	sp = sp + 8
	x30 = Mem0[sp:word64]
	sp = sp + 16
	return
	// succ:  bash_delete_histent_exit
bash_delete_histent_exit:


// bash_delete_last_history
// Return size: 0
void bash_delete_last_history()
bash_delete_last_history_entry:
	// succ:  l000000000045F624
l000000000045F624:
	sp = fp
	sp = sp + -32
	Mem0[sp:word64] = x29
	sp = sp + 8
	Mem0[sp:word64] = x30
	x29 = x31 + 0x0000000000000000
	Mem0[sp + 16:word64] = x19
	call history_list (retsize: 0;)
	branch x0 == 0x0000000000000000 l000000000045F69C
	// succ:  l000000000045F638 l000000000045F69C
l000000000045F638:
	x1 = Mem0[x0:word64]
	branch x1 == 0x0000000000000000 l000000000045F6C8
	// succ:  l000000000045F640 l000000000045F6C8
l000000000045F640:
	x1 = x0 + 0x0000000000000008
	w0 = 0x00000000
	// succ:  l000000000045F648
l000000000045F648:
	x2 = Mem0[x1:word64]
	x1 = x1 + 8
	w0 = w0 + 0x00000001
	branch x2 != 0x0000000000000000 l000000000045F648
	// succ:  l000000000045F654 l000000000045F648
l000000000045F654:
	w19 = w0 - 0x00000001
	// succ:  l000000000045F658
l000000000045F658:
	x0 = 0x00000000004DE000
	w0 = Mem0[x0 + 1540:word32]
	w0 = w19 + w0
	call history_get (retsize: 0;)
	branch x0 == 0x0000000000000000 l000000000045F69C
	// succ:  l000000000045F66C l000000000045F69C
l000000000045F66C:
	w0 = w19
	call bash_delete_histent (retsize: 0;)
	w19 = w0
	call where_history (retsize: 0;)
	x1 = 0x00000000004E4000
	w1 = Mem0[x1 + 392:word32]
	NZCV = cond(w0 - w1)
	branch Test(GT,NZV) l000000000045F6B0
	// succ:  l000000000045F68C l000000000045F6B0
l000000000045F68C:
	w0 = w19
	x19 = Mem0[sp + 16:word64]
	x29 = Mem0[sp:word64]
	sp = sp + 8
	x30 = Mem0[sp:word64]
	sp = sp + 32
	return
	// succ:  bash_delete_last_history_exit
l000000000045F69C:
	w19 = 0x00000000
	w0 = w19
	x19 = Mem0[sp + 16:word64]
	x29 = Mem0[sp:word64]
	sp = sp + 8
	x30 = Mem0[sp:word64]
	sp = sp + 32
	return
	// succ:  bash_delete_last_history_exit
l000000000045F6B0:
	w0 = w1
	call history_set_pos (retsize: 0;)
	w0 = w19
	x19 = Mem0[sp + 16:word64]
	x29 = Mem0[sp:word64]
	sp = sp + 8
	x30 = Mem0[sp:word64]
	sp = sp + 32
	return
	// succ:  bash_delete_last_history_exit
l000000000045F6C8:
	w19 = 0xFFFFFFFF
	goto l000000000045F658
	// succ:  l000000000045F658
bash_delete_last_history_exit:


// maybe_append_history
// Return size: 0
void maybe_append_history()
maybe_append_history_entry:
	// succ:  l000000000045F6D0
l000000000045F6D0:
	sp = fp
	sp = sp + -176
	Mem0[sp:word64] = x29
	sp = sp + 8
	Mem0[sp:word64] = x30
	x29 = x31 + 0x0000000000000000
	v8 = sp + 16
	Mem0[v8:word64] = x19
	v8 = v8 + 8
	Mem0[v8:word64] = x20
	x19 = 0x00000000004E3000
	w2 = Mem0[x19 + 3428:word32]
	Mem0[sp + 32:word64] = x21
	x20 = x0
	branch w2 != 0x00000000 l000000000045F704
	// succ:  l000000000045F6F0 l000000000045F704
l000000000045F6F0:
	w0 = 0x00000000
	// succ:  l000000000045F6F4
l000000000045F6F4:
	v13 = sp + 16
	x19 = Mem0[v13:word64]
	v13 = v13 + 8
	x20 = Mem0[v13:word64]
	x21 = Mem0[sp + 32:word64]
	x29 = Mem0[sp:word64]
	sp = sp + 8
	x30 = Mem0[sp:word64]
	sp = sp + 176
	return
	// succ:  maybe_append_history_exit
l000000000045F704:
	call where_history (retsize: 0;)
	w1 = Mem0[x19 + 3428:word32]
	NZCV = cond(w0 - w1)
	branch Test(LT,NV) l000000000045F6F0
	// succ:  l000000000045F714 l000000000045F6F0
l000000000045F714:
	w0 = 0x00000000
	x1 = x20
	x2 = x29 + 0x0000000000000030
	__xstat(x0, x1, x2)
	sp = sp + 0xFFFFFFFFFFFFFFF8
	w31 = w0 + 0x00000001
	NZCV = cond(w31)
	branch Test(EQ,Z) l000000000045F754
	// succ:  l000000000045F72C l000000000045F754
l000000000045F72C:
	w0 = Mem0[x19 + 3428:word32]
	x1 = x20
	call append_history (retsize: 0;)
	x1 = 0x00000000004E3000
	w3 = Mem0[x1 + 3424:word32]
	w2 = Mem0[x19 + 3428:word32]
	Mem0[x19 + 3428:word32] = 0x00000000
	w2 = w3 + w2
	Mem0[x1 + 3424:word32] = w2
	goto l000000000045F6F4
	// succ:  l000000000045F6F4
l000000000045F754:
	__errno_location()
	sp = sp + 0xFFFFFFFFFFFFFFF8
	x21 = x0
	w0 = Mem0[x0:word32]
	w31 = w0 - 0x00000002
	NZCV = cond(w31)
	branch Test(NE,Z) l000000000045F72C
	// succ:  l000000000045F768 l000000000045F72C
l000000000045F768:
	w1 = 0x00000041
	x0 = x20
	w2 = 0x00000180
	open(x0, x1)
	sp = sp + 0xFFFFFFFFFFFFFFF8
	branch (w0 & 0x00000000) == 0x00000000 l000000000045F784
	// succ:  l000000000045F77C l000000000045F784
l000000000045F77C:
	close(x0)
	sp = sp + 0xFFFFFFFFFFFFFFF8
	goto l000000000045F72C
	// succ:  l000000000045F72C
l000000000045F784:
	x1 = 0x00000000004AE000
	x1 = x1 + 0xFFFFFFFFFFFFF8D0
	w2 = 0x00000005
	x0 = 0x0000000000000000
	dcgettext(x0, x1, x2)
	sp = sp + 0xFFFFFFFFFFFFFFF8
	x19 = x0
	w0 = Mem0[x21:word32]
	strerror(x0)
	sp = sp + 0xFFFFFFFFFFFFFFF8
	x2 = x0
	x1 = x20
	x0 = x19
	call builtin_error (retsize: 0;)
	w0 = 0x00000001
	goto l000000000045F6F4
	// succ:  l000000000045F6F4
maybe_append_history_exit:


// maybe_save_shell_history
// Return size: 0
void maybe_save_shell_history()
maybe_save_shell_history_entry:
	// succ:  l000000000045F7BC
l000000000045F7BC:
	sp = fp
	sp = sp + -32
	Mem0[sp:word64] = x29
	sp = sp + 8
	Mem0[sp:word64] = x30
	x29 = x31 + 0x0000000000000000
	v8 = sp + 16
	Mem0[v8:word64] = x19
	v8 = v8 + 8
	Mem0[v8:word64] = x20
	x19 = 0x00000000004E3000
	w0 = Mem0[x19 + 3428:word32]
	branch w0 != 0x00000000 l000000000045F7E8
	// succ:  l000000000045F7D4 l000000000045F7E8
l000000000045F7D4:
	w20 = 0x00000000
	w0 = w20
	v11 = sp + 16
	x19 = Mem0[v11:word64]
	v11 = v11 + 8
	x20 = Mem0[v11:word64]
	x29 = Mem0[sp:word64]
	sp = sp + 8
	x30 = Mem0[sp:word64]
	sp = sp + 32
	return
	// succ:  maybe_save_shell_history_exit
l000000000045F7E8:
	x0 = 0x00000000004AC000
	x0 = x0 + 0xFFFFFFFFFFFFF990
	call get_string_value (retsize: 0;)
	x20 = x0
	branch x0 == 0x0000000000000000 l000000000045F7D4
	// succ:  l000000000045F7FC l000000000045F7D4
l000000000045F7FC:
	v14 = Mem0[x0:byte]
	w1 = (word32) v14
	branch w1 == 0x00000000 l000000000045F7D4
	// succ:  l000000000045F804 l000000000045F7D4
l000000000045F804:
	call file_exists (retsize: 0;)
	branch w0 == 0x00000000 l000000000045F870
	// succ:  l000000000045F80C l000000000045F870
l000000000045F80C:
	call using_history (retsize: 0;)
	call where_history (retsize: 0;)
	w1 = Mem0[x19 + 3428:word32]
	NZCV = cond(w0 - w1)
	branch Test(GE,NZV) l000000000045F82C
	// succ:  l000000000045F820 l000000000045F82C
l000000000045F820:
	x0 = 0x00000000004E3000
	w0 = Mem0[x0 + 3460:word32]
	branch w0 == 0x00000000 l000000000045F890
	// succ:  l000000000045F82C l000000000045F890
l000000000045F82C:
	w0 = w1
	x1 = x20
	call append_history (retsize: 0;)
	w20 = w0
	x0 = 0x00000000004E3000
	w2 = Mem0[x0 + 3424:word32]
	w1 = Mem0[x19 + 3428:word32]
	w1 = w2 + w1
	Mem0[x0 + 3424:word32] = w1
	// succ:  l000000000045F850
l000000000045F850:
	x0 = 0x00000000004AC000
	x0 = x0 + 0xFFFFFFFFFFFFFE28
	Mem0[x19 + 3428:word32] = 0x00000000
	call sv_histsize (retsize: 0;)
	w0 = w20
	v19 = sp + 16
	x19 = Mem0[v19:word64]
	v19 = v19 + 8
	x20 = Mem0[v19:word64]
	x29 = Mem0[sp:word64]
	sp = sp + 8
	x30 = Mem0[sp:word64]
	sp = sp + 32
	return
	// succ:  maybe_save_shell_history_exit
l000000000045F870:
	x0 = x20
	w1 = 0x00000241
	w2 = 0x00000180
	open(x0, x1)
	sp = sp + 0xFFFFFFFFFFFFFFF8
	w31 = w0 + 0x00000001
	NZCV = cond(w31)
	branch Test(EQ,Z) l000000000045F80C
	// succ:  l000000000045F888 l000000000045F80C
l000000000045F888:
	close(x0)
	sp = sp + 0xFFFFFFFFFFFFFFF8
	goto l000000000045F80C
	// succ:  l000000000045F80C
l000000000045F890:
	x0 = x20
	call write_history (retsize: 0;)
	w20 = w0
	x0 = 0x00000000004E3000
	w1 = Mem0[x0 + 3428:word32]
	x0 = 0x00000000004E3000
	Mem0[x0 + 3424:word32] = w1
	goto l000000000045F850
	// succ:  l000000000045F850
maybe_save_shell_history_exit:


// bash_add_history
// Return size: 0
void bash_add_history()
bash_add_history_entry:
	// succ:  l000000000045F8B0
l000000000045F8B0:
	sp = fp
	sp = sp + -64
	Mem0[sp:word64] = x29
	sp = sp + 8
	Mem0[sp:word64] = x30
	x29 = x31 + 0x0000000000000000
	x1 = 0x00000000004D7000
	x1 = x1 + 0x0000000000000180
	w1 = Mem0[x1 + 8:word32]
	v10 = sp + 16
	Mem0[v10:word64] = x19
	v10 = v10 + 8
	Mem0[v10:word64] = x20
	v13 = sp + 32
	Mem0[v13:word64] = x21
	v13 = v13 + 8
	Mem0[v13:word64] = x22
	v16 = sp + 48
	Mem0[v16:word64] = x23
	v16 = v16 + 8
	Mem0[v16:word64] = x24
	x19 = x0
	branch w1 == 0x00000000 l000000000045F9E4
	// succ:  l000000000045F8D8 l000000000045F9E4
l000000000045F8D8:
	x1 = 0x00000000004E3000
	w1 = Mem0[x1 + 612:word32]
	w31 = w1 - 0x00000001
	NZCV = cond(w31)
	branch Test(LE,ZCV) l000000000045F9E4
	// succ:  l000000000045F8E8 l000000000045F9E4
l000000000045F8E8:
	x1 = 0x00000000004E3000
	w1 = Mem0[x1 + 3444:word32]
	branch w1 == 0x00000000 l000000000045FA24
	// succ:  l000000000045F8F4 l000000000045FA24
l000000000045F8F4:
	x21 = 0x00000000004C4000
	x21 = x21 + 0xFFFFFFFFFFFFF8C0
	// succ:  l000000000045F8FC
l000000000045F8FC:
	call using_history (retsize: 0;)
	call previous_history (retsize: 0;)
	x20 = x0
	branch x0 == 0x0000000000000000 l000000000045F9E4
	// succ:  l000000000045F90C l000000000045F9E4
l000000000045F90C:
	x22 = Mem0[x0:word64]
	x0 = x22
	strlen(x0)
	sp = sp + 0xFFFFFFFFFFFFFFF8
	x2 = 0x00000000004DE000
	x2 = x2 + 0xFFFFFFFFFFFFF820
	w1 = Mem0[x2 + 8:word32]
	w24 = w0
	branch w1 != 0x00000000 l000000000045F948
	// succ:  l000000000045F92C l000000000045F948
l000000000045F92C:
l000000000045F948:
	x0 = x19
	strlen(x0)
	sp = sp + 0xFFFFFFFFFFFFFFF8
	x22 = x0
	x0 = x21
	strlen(x0)
	sp = sp + 0xFFFFFFFFFFFFFFF8
	x23 = 0x00000000004AE000
	x23 = x23 + 0xFFFFFFFFFFFFF8E8
	x0 = x0 + x22
	w24 = w24 + 0x00000001
	x1 = x23
	w2 = 0x00000300
	x0 = x0 + (int64) ((int32) w24)
	call sh_xmalloc (retsize: 0;)
	x4 = Mem0[x20:word64]
	x3 = 0x00000000004AE000
	x6 = x19
	x2 = 0xFFFFFFFFFFFFFFFF
	x3 = x3 + 0xFFFFFFFFFFFFF900
	x5 = x21
	w1 = 0x00000001
	x22 = x0
	__sprintf_chk(x0, x1, x2, x3, Mem0[sp:<unknown>])
	sp = sp + 0xFFFFFFFFFFFFFFF8
	call where_history (retsize: 0;)
	x2 = Mem0[x20 + 16:word64]
	x1 = x22
	call replace_history_entry (retsize: 0;)
	x19 = x0
	x1 = x23
	x0 = x22
	w2 = 0x00000304
	call sh_xfree (retsize: 0;)
	branch x19 == 0x0000000000000000 l000000000045FA10
	// succ:  l000000000045F9C8 l000000000045FA10
l000000000045F9C8:
	x0 = x19
	call free_history_entry (retsize: 0;)
	v32 = sp + 16
	x19 = Mem0[v32:word64]
	v32 = v32 + 8
	x20 = Mem0[v32:word64]
	v33 = sp + 32
	x21 = Mem0[v33:word64]
	v33 = v33 + 8
	x22 = Mem0[v33:word64]
	v34 = sp + 48
	x23 = Mem0[v34:word64]
	v34 = v34 + 8
	x24 = Mem0[v34:word64]
	x29 = Mem0[sp:word64]
	sp = sp + 8
	x30 = Mem0[sp:word64]
	sp = sp + 64
	// succ:  l000000000045F9E0_thunk_using_history
l000000000045F9E0_thunk_using_history:
	call using_history (retsize: 0;)
	return
	// succ:  bash_add_history_exit
l000000000045F9E4:
	w2 = 0x00000001
	x1 = 0x00000000004E3000
	x0 = x19
	Mem0[x1 + 3440:word32] = w2
	x1 = 0x00000000004E3000
	Mem0[x1 + 3464:word32] = 0x00000000
	call add_history (retsize: 0;)
	x0 = 0x00000000004E3000
	w1 = Mem0[x0 + 3428:word32]
	w1 = w1 + 0x00000001
	Mem0[x0 + 3428:word32] = w1
	// succ:  l000000000045FA10
l000000000045FA10:
	v25 = sp + 16
	x19 = Mem0[v25:word64]
	v25 = v25 + 8
	x20 = Mem0[v25:word64]
	v26 = sp + 32
	x21 = Mem0[v26:word64]
	v26 = v26 + 8
	x22 = Mem0[v26:word64]
	v27 = sp + 48
	x23 = Mem0[v27:word64]
	v27 = v27 + 8
	x24 = Mem0[v27:word64]
	x29 = Mem0[sp:word64]
	sp = sp + 8
	x30 = Mem0[sp:word64]
	sp = sp + 64
	// succ:  l000000000045FA20_thunk_using_history
l000000000045FA20_thunk_using_history:
	call using_history (retsize: 0;)
	return
	// succ:  bash_add_history_exit
l000000000045FA24:
	call history_delimiting_chars (retsize: 0;)
	x21 = x0
	goto l000000000045F8FC
	// succ:  l000000000045F8FC
bash_add_history_exit:


// check_add_history
// Return size: 0
void check_add_history()
check_add_history_entry:
	// succ:  l000000000045FA84
l000000000045FA84:
	sp = fp
	sp = sp + -112
	Mem0[sp:word64] = x29
	sp = sp + 8
	Mem0[sp:word64] = x30
	x29 = x31 + 0x0000000000000000
	v8 = sp + 80
	Mem0[v8:word64] = x27
	v8 = v8 + 8
	Mem0[v8:word64] = x28
	x27 = 0x00000000004E3000
	w2 = Mem0[x27 + 3448:word32]
	v12 = sp + 48
	Mem0[v12:word64] = x23
	v12 = v12 + 8
	Mem0[v12:word64] = x24
	v15 = sp + 16
	Mem0[v15:word64] = x19
	v15 = v15 + 8
	Mem0[v15:word64] = x20
	v18 = sp + 32
	Mem0[v18:word64] = x21
	v18 = v18 + 8
	Mem0[v18:word64] = x22
	v21 = sp + 64
	Mem0[v21:word64] = x25
	v21 = v21 + 8
	Mem0[v21:word64] = x26
	x23 = x0
	w28 = w1
	branch w2 == 0x00000000 l000000000045FAC8
	// succ:  l000000000045FAB4 l000000000045FAC8
l000000000045FAB4:
	branch (w2 & 0x00000001) == 0x00000000 l000000000045FAC4
	// succ:  l000000000045FAB8 l000000000045FAC4
l000000000045FAB8:
	v26 = Mem0[x23:byte]
	w0 = (word32) v26
	w31 = w0 - 0x00000020
	NZCV = cond(w31)
	branch Test(EQ,Z) l000000000045FC14
	// succ:  l000000000045FAC4 l000000000045FC14
l000000000045FAC4:
	branch (w2 & 0x00000002) == 0x00000000 l000000000045FBC8
	// succ:  l000000000045FAC8 l000000000045FBC8
l000000000045FAC8:
	x21 = 0x00000000004D7000
	x21 = x21 + 0x0000000000000180
	w0 = Mem0[x21 + 32:word32]
	NZCV = cond(w0 - w31)
	branch Test(EQ,Z) l000000000045FB94
	// succ:  l000000000045FADC l000000000045FB94
l000000000045FADC:
	branch Test(LE,ZCV) l000000000045FB94
	// succ:  l000000000045FAE0 l000000000045FB94
l000000000045FAE0:
	x0 = 0x00000000004AE000
	x19 = 0x0000000000000000
	x0 = x0 + 0xFFFFFFFFFFFFF8E8
	x26 = 0x00000000004E1000
	w20 = w19
	Mem0[x29 + 96:word64] = x0
	x26 = x26 + 0x0000000000000268
	w25 = 0x00000020
	goto l000000000045FB50
	// succ:  l000000000045FB50
l000000000045FB04:
	x22 = Mem0[x2 + x19:word64]
	// succ:  l000000000045FB08
l000000000045FB08:
	w0 = Mem0[x26:word32]
	x1 = x23
	NZCV = cond(w0 - w31)
l000000000045FB50:
	x2 = Mem0[x21 + 24:word64]
	x0 = x2 + x19
	w0 = Mem0[x0 + 12:word32]
	branch (w0 & 0x00000001) == 0x00000000 l000000000045FB04
	// succ:  l000000000045FB60 l000000000045FB04
l000000000045FB60:
	x24 = Mem0[x2 + x19:word64]
	call using_history (retsize: 0;)
	call previous_history (retsize: 0;)
	x22 = x0
	call using_history (retsize: 0;)
	x0 = x24
	w1 = 0x00000026
	w3 = 0x00000001
	branch x22 == 0x0000000000000000 l000000000045FCB8
	// succ:  l000000000045FB84 l000000000045FCB8
l000000000045FB84:
	x2 = Mem0[x22:word64]
	call strcreplace (retsize: 0;)
	x22 = x0
	goto l000000000045FB08
	// succ:  l000000000045FB08
l000000000045FB94:
	w0 = Mem0[x27 + 3448:word32]
	branch (w0 & 0x00000004) == 0x00000000 l000000000045FC80
	// succ:  l000000000045FB9C l000000000045FC80
l000000000045FB9C:
	branch w28 != 0x00000000 l000000000045FC48
	// succ:  l000000000045FBA0 l000000000045FC48
l000000000045FBA0:
	x0 = x23
	call bash_add_history (retsize: 0;)
	w0 = 0x00000001
	v36 = sp + 16
	x19 = Mem0[v36:word64]
	v36 = v36 + 8
	x20 = Mem0[v36:word64]
	v37 = sp + 32
	x21 = Mem0[v37:word64]
	v37 = v37 + 8
	x22 = Mem0[v37:word64]
	v38 = sp + 48
	x23 = Mem0[v38:word64]
	v38 = v38 + 8
	x24 = Mem0[v38:word64]
	v39 = sp + 64
	x25 = Mem0[v39:word64]
	v39 = v39 + 8
	x26 = Mem0[v39:word64]
	v40 = sp + 80
	x27 = Mem0[v40:word64]
	v40 = v40 + 8
	x28 = Mem0[v40:word64]
	x29 = Mem0[sp:word64]
	sp = sp + 8
	x30 = Mem0[sp:word64]
	sp = sp + 112
	return
	// succ:  check_add_history_exit
l000000000045FBC8:
	call using_history (retsize: 0;)
	call previous_history (retsize: 0;)
	branch x0 == 0x0000000000000000 l000000000045FBE8
	// succ:  l000000000045FBD4 l000000000045FBE8
l000000000045FBD4:
	x0 = Mem0[x0:word64]
	v41 = Mem0[x23:byte]
	w1 = (word32) v41
	v42 = Mem0[x0:byte]
	w2 = (word32) v42
	NZCV = cond(w2 - w1)
	branch Test(EQ,Z) l000000000045FC04
	// succ:  l000000000045FBE8 l000000000045FC04
l000000000045FBE8:
	x21 = 0x00000000004D7000
	call using_history (retsize: 0;)
	x21 = x21 + 0x0000000000000180
	w0 = Mem0[x21 + 32:word32]
	NZCV = cond(w0 - w31)
	branch Test(NE,Z) l000000000045FADC
	// succ:  l000000000045FC00 l000000000045FADC
l000000000045FC00:
	goto l000000000045FB94
	// succ:  l000000000045FB94
l000000000045FC04:
	x1 = x23
	strcmp(x0, x1)
	sp = sp + 0xFFFFFFFFFFFFFFF8
	branch w0 != 0x00000000 l000000000045FBE8
	// succ:  l000000000045FC10 l000000000045FBE8
l000000000045FC10:
	call using_history (retsize: 0;)
	// succ:  l000000000045FC14
l000000000045FC14:
	w0 = 0x00000000
	// succ:  l000000000045FC18
l000000000045FC18:
	v46 = sp + 16
	x19 = Mem0[v46:word64]
	v46 = v46 + 8
	x20 = Mem0[v46:word64]
	v47 = sp + 32
	x21 = Mem0[v47:word64]
	v47 = v47 + 8
	x22 = Mem0[v47:word64]
	v48 = sp + 48
	x23 = Mem0[v48:word64]
	v48 = v48 + 8
	x24 = Mem0[v48:word64]
	v49 = sp + 64
	x25 = Mem0[v49:word64]
	v49 = v49 + 8
	x26 = Mem0[v49:word64]
	v50 = sp + 80
	x27 = Mem0[v50:word64]
	v50 = v50 + 8
	x28 = Mem0[v50:word64]
	x29 = Mem0[sp:word64]
	sp = sp + 8
	x30 = Mem0[sp:word64]
	sp = sp + 112
	return
	// succ:  check_add_history_exit
l000000000045FC48:
	w19 = 0x00000001
	x1 = 0x00000000004E3000
	x0 = x23
	Mem0[x1 + 3440:word32] = w19
	x1 = 0x00000000004E3000
	Mem0[x1 + 3464:word32] = 0x00000000
	call add_history (retsize: 0;)
	x0 = 0x00000000004E3000
	w1 = Mem0[x0 + 3428:word32]
	w1 = w1 + w19
	Mem0[x0 + 3428:word32] = w1
	call using_history (retsize: 0;)
	w0 = w19
	goto l000000000045FC18
	// succ:  l000000000045FC18
l000000000045FC80:
	call using_history (retsize: 0;)
	// succ:  l000000000045FC84
l000000000045FC84:
	call previous_history (retsize: 0;)
	branch x0 == 0x0000000000000000 l000000000045FCDC
	// succ:  l000000000045FC8C l000000000045FCDC
l000000000045FC8C:
	x0 = Mem0[x0:word64]
	v44 = Mem0[x23:byte]
	w1 = (word32) v44
	v45 = Mem0[x0:byte]
	w2 = (word32) v45
	NZCV = cond(w2 - w1)
	branch Test(NE,Z) l000000000045FC84
	// succ:  l000000000045FCA0 l000000000045FC84
l000000000045FCA0:
	x1 = x23
	strcmp(x0, x1)
	sp = sp + 0xFFFFFFFFFFFFFFF8
	branch w0 != 0x00000000 l000000000045FC84
	// succ:  l000000000045FCAC l000000000045FC84
l000000000045FCAC:
	call where_history (retsize: 0;)
	call remove_history (retsize: 0;)
	goto l000000000045FC84
	// succ:  l000000000045FC84
l000000000045FCB8:
	strlen(x0)
	sp = sp + 0xFFFFFFFFFFFFFFF8
	x1 = Mem0[x29 + 96:word64]
	w2 = 0x00000368
	x0 = x0 + 0x0000000000000001
	call sh_xmalloc (retsize: 0;)
	x1 = x24
	strcpy(x0, x1)
	sp = sp + 0xFFFFFFFFFFFFFFF8
	x22 = x0
	goto l000000000045FB08
	// succ:  l000000000045FB08
l000000000045FCDC:
	call using_history (retsize: 0;)
	branch w28 == 0x00000000 l000000000045FBA0
	// succ:  l000000000045FCE4 l000000000045FBA0
l000000000045FCE4:
	goto l000000000045FC48
	// succ:  l000000000045FC48
check_add_history_exit:


// maybe_add_history
// Return size: 0
void maybe_add_history()
maybe_add_history_entry:
	// succ:  l000000000045FCE8
l000000000045FCE8:
	sp = fp
	sp = sp + -16
	Mem0[sp:word64] = x29
	sp = sp + 8
	Mem0[sp:word64] = x30
	x29 = x31 + 0x0000000000000000
	x1 = 0x00000000004E3000
	w1 = Mem0[x1 + 612:word32]
	x2 = 0x00000000004E3000
	Mem0[x2 + 3440:word32] = 0x00000000
	w31 = w1 - 0x00000001
	NZCV = cond(w31)
	x3 = x0
	branch Test(LE,ZCV) l000000000045FD74
	// succ:  l000000000045FD0C l000000000045FD74
l000000000045FD0C:
	x0 = 0x00000000004E1000
	x0 = x0 + 0x0000000000000430
	w0 = Mem0[x0:word32]
	branch w0 == 0x00000000 l000000000045FD88
	// succ:  l000000000045FD1C l000000000045FD88
l000000000045FD1C:
	x0 = 0x00000000004E3000
	w0 = Mem0[x0 + 3444:word32]
	branch w0 != 0x00000000 l000000000045FD68
	// succ:  l000000000045FD28 l000000000045FD68
l000000000045FD28:
	x0 = 0x00000000004DE000
	w0 = Mem0[x0 + 2088:word32]
	branch w0 != 0x00000000 l000000000045FD68
	// succ:  l000000000045FD34 l000000000045FD68
l000000000045FD34:
	branch x3 == 0x0000000000000000 l000000000045FD68
	// succ:  l000000000045FD38 l000000000045FD68
l000000000045FD38:
	v16 = Mem0[x3:byte]
	w2 = (word32) v16
	branch w2 == 0x00000000 l000000000045FD68
	// succ:  l000000000045FD40 l000000000045FD68
l000000000045FD40:
	w31 = w2 - 0x00000020
	NZCV = cond(w31)
	branch Test(NE,Z) l000000000045FDA4
	// succ:  l000000000045FD48 l000000000045FDA4
l000000000045FD48:
	x1 = x3
	goto l000000000045FD60
	// succ:  l000000000045FD60
l000000000045FD50:
	v18 = Mem0[x1:byte]
	w2 = (word32) v18
	w31 = w2 - 0x00000009
	NZCV = cond(w31)
	branch w2 == 0x00000000 l000000000045FD68
	// succ:  l000000000045FD5C l000000000045FD68
l000000000045FD5C:
	branch Test(NE,Z) l000000000045FD90
	// succ:  l000000000045FD60 l000000000045FD90
l000000000045FD60:
	x1 = x1 + 0x0000000000000001
	NZCV = cond(x1)
	branch Test(NE,Z) l000000000045FD50
	// succ:  l000000000045FD68 l000000000045FD50
l000000000045FD68:
	x29 = Mem0[sp:word64]
	sp = sp + 8
	x30 = Mem0[sp:word64]
	sp = sp + 16
	x0 = x3
	// succ:  l000000000045FD70_thunk_bash_add_history
l000000000045FD70_thunk_bash_add_history:
	call bash_add_history (retsize: 0;)
	return
	// succ:  maybe_add_history_exit
l000000000045FD74:
	w1 = 0x00000000
	call check_add_history (retsize: 0;)
	x1 = 0x00000000004E1000
	x1 = x1 + 0x0000000000000430
	Mem0[x1:word32] = w0
	// succ:  l000000000045FD88
l000000000045FD88:
	x29 = Mem0[sp:word64]
	sp = sp + 8
	x30 = Mem0[sp:word64]
	sp = sp + 16
	return
	// succ:  maybe_add_history_exit
l000000000045FD90:
	w31 = w2 - 0x00000020
	NZCV = cond(w31)
	branch Test(EQ,Z) l000000000045FD60
	// succ:  l000000000045FD98 l000000000045FD60
l000000000045FD98:
	w31 = w2 - 0x00000023
	NZCV = cond(w31)
	branch Test(NE,Z) l000000000045FD68
	// succ:  l000000000045FDA0 l000000000045FD68
l000000000045FDA0:
	goto l000000000045FD88
	// succ:  l000000000045FD88
l000000000045FDA4:
	w31 = w2 - 0x00000009
	NZCV = cond(w31)
	branch Test(EQ,Z) l000000000045FD48
	// succ:  l000000000045FDAC l000000000045FD48
l000000000045FDAC:
	goto l000000000045FD98
	// succ:  l000000000045FD98
maybe_add_history_exit:


// pre_process_line
// Return size: 0
void pre_process_line()
pre_process_line_entry:
	// succ:  l000000000045FDB0
l000000000045FDB0:
	sp = fp
	sp = sp + -64
	Mem0[sp:word64] = x29
	sp = sp + 8
	Mem0[sp:word64] = x30
	x29 = x31 + 0x0000000000000000
	x3 = 0x00000000004E3000
	w3 = Mem0[x3 + 3436:word32]
	v10 = sp + 16
	Mem0[v10:word64] = x19
	v10 = v10 + 8
	Mem0[v10:word64] = x20
	v13 = sp + 32
	Mem0[v13:word64] = x21
	v13 = v13 + 8
	Mem0[v13:word64] = x22
	x19 = x0
	w21 = w1
	w20 = w2
	branch w3 != 0x00000000 l000000000045FE2C
	// succ:  l000000000045FDD8 l000000000045FE2C
l000000000045FDD8:
	x0 = 0x00000000004D6000
	w0 = Mem0[x0 + 3296:word32]
	branch w0 == 0x00000000 l000000000045FE2C
	// succ:  l000000000045FDE4 l000000000045FE2C
l000000000045FDE4:
	v20 = Mem0[x19:byte]
	w0 = (word32) v20
	branch w0 == 0x00000000 l000000000045FE2C
	// succ:  l000000000045FDEC l000000000045FE2C
l000000000045FDEC:
	x1 = 0x00000000004DE000
	v23 = Mem0[x1 + 1552:byte]
	w5 = (word32) v23
	NZCV = cond(w5 - w0)
	branch Test(EQ,Z) l000000000045FE68
	// succ:  l000000000045FDFC l000000000045FE68
l000000000045FDFC:
	x1 = 0x00000000004DE000
	v27 = Mem0[x1 + 1553:byte]
	w6 = (word32) v27
	NZCV = cond(w0 - w6)
	branch Test(EQ,Z) l000000000045FE68
	// succ:  l000000000045FE0C l000000000045FE68
l000000000045FE0C:
	x4 = x19
	goto l000000000045FE20
	// succ:  l000000000045FE20
l000000000045FE14:
	branch Test(EQ,Z) l000000000045FE68
	// succ:  l000000000045FE18 l000000000045FE68
l000000000045FE18:
	NZCV = cond(w3 - w6)
	branch Test(EQ,Z) l000000000045FE68
	// succ:  l000000000045FE20 l000000000045FE68
l000000000045FE20:
	x4 = x4 + 1
	v32 = Mem0[x4:byte]
	w3 = (word32) v32
	NZCV = cond(w3 - w5)
	branch w3 != 0x00000000 l000000000045FE14
	// succ:  l000000000045FE2C l000000000045FE14
l000000000045FE2C:
	branch w20 == 0x00000000 l000000000045FE48
	// succ:  l000000000045FE30 l000000000045FE48
l000000000045FE30:
	x0 = 0x00000000004D7000
	x0 = x0 + 0x0000000000000180
	w0 = Mem0[x0 + 4:word32]
	branch w0 == 0x00000000 l000000000045FE48
	// succ:  l000000000045FE40 l000000000045FE48
l000000000045FE40:
	v29 = Mem0[x19:byte]
	w0 = (word32) v29
	branch w0 != 0x00000000 l000000000045FE5C
	// succ:  l000000000045FE48 l000000000045FE5C
l000000000045FE48:
	x0 = x19
	v30 = sp + 32
	x21 = Mem0[v30:word64]
	v30 = v30 + 8
	x22 = Mem0[v30:word64]
	v31 = sp + 16
	x19 = Mem0[v31:word64]
	v31 = v31 + 8
	x20 = Mem0[v31:word64]
	x29 = Mem0[sp:word64]
	sp = sp + 8
	x30 = Mem0[sp:word64]
	sp = sp + 64
	return
	// succ:  pre_process_line_exit
l000000000045FE5C:
	x0 = x19
	call maybe_add_history (retsize: 0;)
	goto l000000000045FE48
	// succ:  l000000000045FE48
l000000000045FE68:
	x0 = x19
	x1 = x29 + 0x0000000000000030
	call history_expand (retsize: 0;)
	w22 = w0
	branch w0 == 0x00000000 l000000000045FEF8
	// succ:  l000000000045FE7C l000000000045FEF8
l000000000045FE7C:
	branch w21 != 0x00000000 l000000000045FF04
	// succ:  l000000000045FE80 l000000000045FF04
l000000000045FE80:
	w31 = w22 - 0x00000002
	NZCV = cond(w31)
l000000000045FEA4:
	x1 = 0x00000000004AE000
	x1 = x1 + 0xFFFFFFFFFFFFF8E8
	w2 = 0x00000207
	call sh_xfree (retsize: 0;)
	x0 = 0x00000000004E3000
	w0 = Mem0[x0 + 3452:word32]
	branch w0 == 0x00000000 l000000000045FEE0
	// succ:  l000000000045FEC0 l000000000045FEE0
l000000000045FEC0:
	branch w21 == 0x00000000 l000000000045FEE0
	// succ:  l000000000045FEC4 l000000000045FEE0
l000000000045FEC4:
	x0 = 0x00000000004E4000
	w0 = Mem0[x0 + 124:word32]
	branch w0 == 0x00000000 l000000000045FEE0
	// succ:  l000000000045FED0 l000000000045FEE0
l000000000045FED0:
	x0 = 0x00000000004E3000
	w0 = Mem0[x0 + 664:word32]
	w31 = w0 - 0x00000001
	NZCV = cond(w31)
	branch Test(EQ,Z) l000000000045FF44
	// succ:  l000000000045FEE0 l000000000045FF44
l000000000045FEE0:
	x19 = 0x0000000000000000
	goto l000000000045FE48
	// succ:  l000000000045FE48
l000000000045FEF8:
	x19 = Mem0[x29 + 48:word64]
	branch w20 == 0x00000000 l000000000045FE48
	// succ:  l000000000045FF00 l000000000045FE48
l000000000045FF00:
	goto l000000000045FE30
	// succ:  l000000000045FE30
l000000000045FF04:
	branch (w22 & 0x00000000) == 0x00000000 l000000000045FF7C
	// succ:  l000000000045FF08 l000000000045FF7C
l000000000045FF08:
	x0 = 0x00000000004E3000
	w0 = Mem0[x0 + 3432:word32]
	branch w0 == 0x00000000 l000000000045FF5C
	// succ:  l000000000045FF14 l000000000045FF5C
l000000000045FF14:
	w31 = w22 - 0x00000002
	NZCV = cond(w31)
	branch Test(EQ,Z) l000000000045FF5C
	// succ:  l000000000045FF1C l000000000045FF5C
l000000000045FF1C:
	w31 = w22 - 0x00000001
	NZCV = cond(w31)
	branch Test(NE,Z) l000000000045FEF8
	// succ:  l000000000045FF24 l000000000045FEF8
l000000000045FF24:
	x0 = 0x00000000004E3000
	w1 = Mem0[x0 + 664:word32]
	x0 = Mem0[x29 + 48:word64]
	w31 = w1 - 0x00000001
	NZCV = cond(w31)
	branch Test(NE,Z) l000000000045FEE0
	// succ:  l000000000045FF38 l000000000045FEE0
l000000000045FF38:
	call bash_re_edit (retsize: 0;)
	// succ:  l000000000045FF3C
l000000000045FF3C:
	x19 = 0x0000000000000000
	goto l000000000045FE48
	// succ:  l000000000045FE48
l000000000045FF44:
	x0 = x19
	call bash_re_edit (retsize: 0;)
	goto l000000000045FF3C
	// succ:  l000000000045FF3C
l000000000045FF5C:
	x0 = 0x00000000004DE000
	x3 = Mem0[x29 + 48:word64]
	x2 = 0x00000000004BF000
	x0 = Mem0[x0 + 1640:word64]
	w1 = 0x00000001
	x2 = x2 + 0xFFFFFFFFFFFFF8A8
	__fprintf_chk(x0, x1, x2, Mem0[sp:<unknown>])
	sp = sp + 0xFFFFFFFFFFFFFFF8
	goto l000000000045FE80
	// succ:  l000000000045FE80
l000000000045FF7C:
	x1 = Mem0[x29 + 48:word64]
	x0 = 0x00000000004BF000
	x0 = x0 + 0x0000000000000050
	call internal_error (retsize: 0;)
	w21 = 0x00000001
	x0 = Mem0[x29 + 48:word64]
	goto l000000000045FEA4
	// succ:  l000000000045FEA4
pre_process_line_exit:


// history_number
// Return size: 0
void history_number()
history_number_entry:
	// succ:  l000000000045FF98
l000000000045FF98:
	sp = fp
	sp = sp + -16
	Mem0[sp:word64] = x29
	sp = sp + 8
	Mem0[sp:word64] = x30
	x29 = x31 + 0x0000000000000000
	call using_history (retsize: 0;)
	x0 = 0x00000000004D7000
	x0 = x0 + 0x0000000000000180
	w1 = Mem0[x0 + 4:word32]
	w0 = 0x00000001
	branch w1 == 0x00000000 l000000000045FFC8
	// succ:  l000000000045FFB8 l000000000045FFC8
l000000000045FFB8:
	call where_history (retsize: 0;)
	x1 = 0x00000000004DE000
	w1 = Mem0[x1 + 1540:word32]
	w0 = w0 + w1
	// succ:  l000000000045FFC8
l000000000045FFC8:
	x29 = Mem0[sp:word64]
	sp = sp + 8
	x30 = Mem0[sp:word64]
	sp = sp + 16
	return
	// succ:  history_number_exit
history_number_exit:


// setup_history_ignore
// Return size: 0
void setup_history_ignore()
setup_history_ignore_entry:
	// succ:  l000000000045FFD0
l000000000045FFD0:
	sp = fp
	x0 = 0x00000000004D7000
	x0 = x0 + 0x0000000000000180
	x0 = x0 + 0x0000000000000010
	// succ:  l000000000045FFDC_thunk_setup_ignore_patterns
l000000000045FFDC_thunk_setup_ignore_patterns:
	call setup_ignore_patterns (retsize: 0;)
	return
	// succ:  setup_history_ignore_exit
setup_history_ignore_exit:


// last_history_line
// Return size: 0
void last_history_line()
last_history_line_entry:
	// succ:  l000000000045FFE0
l000000000045FFE0:
	sp = fp
	sp = sp + -32
	Mem0[sp:word64] = x29
	sp = sp + 8
	Mem0[sp:word64] = x30
	x29 = x31 + 0x0000000000000000
	call using_history (retsize: 0;)
	call previous_history (retsize: 0;)
	Mem0[x29 + 16:word64] = x0
	call using_history (retsize: 0;)
	x0 = Mem0[x29 + 16:word64]
	branch x0 == 0x0000000000000000 l0000000000460004
	// succ:  l0000000000460000 l0000000000460004
l0000000000460000:
	x0 = Mem0[x0:word64]
	// succ:  l0000000000460004
l0000000000460004:
	x29 = Mem0[sp:word64]
	sp = sp + 8
	x30 = Mem0[sp:word64]
	sp = sp + 32
	return
	// succ:  last_history_line_exit
last_history_line_exit:


// fn0000000000460048
// Return size: 0
void fn0000000000460048()
fn0000000000460048_entry:
	// succ:  l0000000000460048
l0000000000460048:
	sp = fp
	sp = sp + -32
	Mem0[sp:word64] = x29
	sp = sp + 8
	Mem0[sp:word64] = x30
	x29 = x31 + 0x0000000000000000
	v8 = sp + 16
	Mem0[v8:word64] = x19
	v8 = v8 + 8
	Mem0[v8:word64] = x20
	w20 = w1
	x19 = x0
	strlen(x0)
	sp = sp + 0xFFFFFFFFFFFFFFF8
	w0 = w0 + 0x00000001
	x1 = 0x00000000004AE000
fn0000000000460048_exit:


// fn0000000000460148
// Return size: 0
void fn0000000000460148()
fn0000000000460148_entry:
	// succ:  l0000000000460148
l0000000000460148:
	sp = fp
	sp = sp + -96
	Mem0[sp:word64] = x29
	sp = sp + 8
	Mem0[sp:word64] = x30
	x29 = x31 + 0x0000000000000000
	v8 = sp + 48
	Mem0[v8:word64] = x23
	v8 = v8 + 8
	Mem0[v8:word64] = x24
	v11 = sp + 32
	Mem0[v11:word64] = x21
	v11 = v11 + 8
	Mem0[v11:word64] = x22
	v14 = sp + 16
	Mem0[v14:word64] = x19
	v14 = v14 + 8
	Mem0[v14:word64] = x20
	Mem0[sp + 64:word64] = x25
	x21 = x1
	x24 = x0
	strlen(x0)
	sp = sp + 0xFFFFFFFFFFFFFFF8
	x23 = x0
	branch x21 == 0x0000000000000000 l00000000004602C0
	// succ:  l0000000000460174 l00000000004602C0
l0000000000460174:
	x0 = x21
	w1 = 0x00000000
	call fn0000000000460048 (retsize: 0;)
	x19 = x0
	// succ:  l0000000000460184
l0000000000460184:
	x0 = x19
	x20 = 0x00000000004AE000
	strlen(x0)
	sp = sp + 0xFFFFFFFFFFFFFFF8
	x22 = x20 + 0xFFFFFFFFFFFFF910
	w2 = 0x00000A80
	x1 = x22
	x0 = x0 + 0x0000000000000001
	call sh_xmalloc (retsize: 0;)
	x1 = x19
	strcpy(x0, x1)
	sp = sp + 0xFFFFFFFFFFFFFFF8
	x1 = 0x00000000004E1000
	x2 = Mem0[x1 + 3936:word64]
	Mem0[x29 + 80:word64] = x0
	branch x2 == 0x0000000000000000 l000000000046025C
	// succ:  l00000000004601BC l000000000046025C
l00000000004601BC:
	x0 = x29 + 0x0000000000000050
	call x2 (retsize: 0;)
	// succ:  l00000000004601C4
l00000000004601C4:
	x0 = x19
	strlen(x0)
	sp = sp + 0xFFFFFFFFFFFFFFF8
	x22 = x0
	w1 = 0x00000000
	x0 = x21
	call bash_tilde_expand (retsize: 0;)
	x20 = x20 + 0xFFFFFFFFFFFFF910
	x25 = x0
	strlen(x0)
	sp = sp + 0xFFFFFFFFFFFFFFF8
	x21 = x0
	x1 = x20
	x0 = x25
	w2 = 0x00000A64
	call sh_xfree (retsize: 0;)
	w0 = w23 - w21
	w0 = w0 + w22
	w0 = w0 + 0x00000003
	w2 = 0x00000A6F
	x1 = x20
l000000000046025C:
	x0 = 0x00000000004E1000
	x1 = Mem0[x0 + 3944:word64]
	branch x1 == 0x0000000000000000 l0000000000460274
	// succ:  l0000000000460268 l0000000000460274
l0000000000460268:
	x0 = x29 + 0x0000000000000050
	call x1 (retsize: 0;)
	branch w0 != 0x00000000 l00000000004602C8
	// succ:  l0000000000460274 l00000000004602C8
l0000000000460274:
	x0 = 0x00000000004E4000
	w0 = Mem0[x0 + 204:word32]
	branch w0 == 0x00000000 l00000000004601C4
	// succ:  l0000000000460280 l00000000004601C4
l0000000000460280:
	x0 = 0x00000000004E4000
	w1 = Mem0[x0 + 188:word32]
	x0 = Mem0[x29 + 80:word64]
	x22 = x20 + 0xFFFFFFFFFFFFF910
	call fn0000000000460048 (retsize: 0;)
	x25 = x0
	x1 = x22
	x0 = x19
	w2 = 0x00000A8C
	call sh_xfree (retsize: 0;)
	x0 = Mem0[x29 + 80:word64]
	x1 = x22
	w2 = 0x00000A8D
	call sh_xfree (retsize: 0;)
	x19 = x25
	goto l00000000004601C4
	// succ:  l00000000004601C4
l00000000004602C0:
	x19 = x21
	goto l0000000000460184
	// succ:  l0000000000460184
l00000000004602C8:
	x0 = x19
	x1 = x22
	w2 = 0x00000A86
	call sh_xfree (retsize: 0;)
	x19 = Mem0[x29 + 80:word64]
	goto l00000000004601C4
	// succ:  l00000000004601C4
fn0000000000460148_exit:


// fn00000000004608F8
// Return size: 0
void fn00000000004608F8()
fn00000000004608F8_entry:
	// succ:  l00000000004608F8
l00000000004608F8:
	sp = fp
	sp = sp + -112
	Mem0[sp:word64] = x29
	sp = sp + 8
	Mem0[sp:word64] = x30
	x29 = x31 + 0x0000000000000000
	v8 = sp + 16
	Mem0[v8:word64] = x19
	v8 = v8 + 8
	Mem0[v8:word64] = x20
	x19 = Mem0[x0 + 8:word64]
	v12 = sp + 48
	Mem0[v12:word64] = x23
	v12 = v12 + 8
	Mem0[v12:word64] = x24
	v15 = sp + 64
	Mem0[v15:word64] = x25
	v15 = v15 + 8
	Mem0[v15:word64] = x26
	v18 = sp + 32
	Mem0[v18:word64] = x21
	v18 = v18 + 8
	Mem0[v18:word64] = x22
	v21 = sp + 80
	Mem0[v21:word64] = x27
	v21 = v21 + 8
	Mem0[v21:word64] = x28
	x23 = x0
	x25 = x1
	branch x19 == 0x0000000000000000 l0000000000460B38
	// succ:  l0000000000460924 l0000000000460B38
l0000000000460924:
	x19 = x0 + 0x0000000000000010
	x0 = x0 + 0x0000000000000008
	Mem0[x29 + 96:word64] = x0
	x2 = x19
	w20 = 0x00000001
	// succ:  l0000000000460938
l0000000000460938:
	x3 = Mem0[x2:word64]
	x2 = x2 + 8
	w20 = w20 + 0x00000001
	branch x3 != 0x0000000000000000 l0000000000460938
	// succ:  l0000000000460944 l0000000000460938
l0000000000460944:
	w0 = w20 + 0x00000001
	call strvec_create (retsize: 0;)
	x1 = 0x00000000004D7000
	x22 = x0
	x0 = x1 + 0x00000000000001B8
	w0 = Mem0[x0 + 40:word32]
	branch w0 == 0x00000000 l0000000000460AC0
	// succ:  l0000000000460960 l0000000000460AC0
l0000000000460960:
	x0 = Mem0[x23:word64]
	Mem0[x22:word64] = x0
	x0 = Mem0[x23 + 8:word64]
	branch x0 == 0x0000000000000000 l0000000000460AD0
	// succ:  l0000000000460970 l0000000000460AD0
l0000000000460970:
	x1 = 0x00000000004D7000
	x27 = 0x00000000004AE000
	x26 = x1 + 0x00000000000001B8
	x1 = x27 + 0xFFFFFFFFFFFFF910
	x20 = Mem0[x29 + 96:word64]
	w24 = 0x00000000
	w21 = 0x00000001
	Mem0[x29 + 104:word64] = x1
	goto l00000000004609AC
	// succ:  l00000000004609AC
l0000000000460994:
	x2 = Mem0[x20:word64]
	Mem0[x22 + (int64) ((int32) w21):word64] = x2
	w21 = w21 + 0x00000001
	// succ:  l00000000004609A0
l00000000004609A0:
	x20 = x19
	x0 = Mem0[x19:word64]
	x19 = x19 + 8
	branch x0 == 0x0000000000000000 l00000000004609D4
	// succ:  l00000000004609AC l00000000004609D4
l00000000004609AC:
	call x25 (retsize: 0;)
	branch w0 != 0x00000000 l0000000000460994
	// succ:  l00000000004609B4 l0000000000460994
l00000000004609B4:
	w2 = Mem0[x26 + 40:word32]
	branch w2 != 0x00000000 l0000000000460A5C
	// succ:  l00000000004609BC l0000000000460A5C
l00000000004609BC:
	x2 = Mem0[x20:word64]
	x20 = x19
	Mem0[x28 + (int64) ((int32) w24):word64] = x2
	x0 = Mem0[x19:word64]
	x19 = x19 + 8
	w24 = w24 + 0x00000001
	branch x0 != 0x0000000000000000 l00000000004609AC
	// succ:  l00000000004609D4 l00000000004609AC
l00000000004609D4:
	Mem0[x22 + (int64) ((int32) w21):word64] = x0
	w31 = w21 - 0x00000001
	NZCV = cond(w31)
	branch Test(EQ,Z) l0000000000460AD8
	// succ:  l00000000004609E0 l0000000000460AD8
l00000000004609E0:
	x1 = 0x00000000004D7000
	x0 = x1 + 0x00000000000001B8
	w0 = Mem0[x0 + 40:word32]
	branch w0 == 0x00000000 l0000000000460A70
	// succ:  l00000000004609F0 l0000000000460A70
l00000000004609F0:
	w31 = w21 - 0x00000002
	NZCV = cond(w31)
	branch Test(EQ,Z) l0000000000460B8C
	// succ:  l00000000004609F8 l0000000000460B8C
l00000000004609F8:
	x3 = Mem0[x22 + 8:word64]
	x2 = 0x0000000000000010
	x0 = 0x0000000000000008
	branch x3 != 0x0000000000000000 l0000000000460A14
	// succ:  l0000000000460A08 l0000000000460A14
l0000000000460A08:
	goto l0000000000460A2C
	// succ:  l0000000000460A2C
l0000000000460A0C:
	x0 = x2
	x2 = x4
	// succ:  l0000000000460A14
l0000000000460A14:
	Mem0[x23 + x0:word64] = x3
	x3 = Mem0[x22 + x2:word64]
	x4 = x2 + 0x0000000000000008
	branch x3 != 0x0000000000000000 l0000000000460A0C
	// succ:  l0000000000460A24 l0000000000460A0C
l0000000000460A24:
	x23 = x23 + x2
	Mem0[x29 + 96:word64] = x23
	// succ:  l0000000000460A2C
l0000000000460A2C:
	x0 = Mem0[x29 + 96:word64]
	x1 = x27 + 0xFFFFFFFFFFFFF910
	Mem0[x0:word64] = 0x0000000000000000
	w2 = 0x000009FA
	x0 = x22
	// succ:  l0000000000460A40
l0000000000460A40:
	v39 = sp + 16
	x19 = Mem0[v39:word64]
	v39 = v39 + 8
	x20 = Mem0[v39:word64]
	v40 = sp + 32
	x21 = Mem0[v40:word64]
	v40 = v40 + 8
	x22 = Mem0[v40:word64]
	v41 = sp + 48
	x23 = Mem0[v41:word64]
	v41 = v41 + 8
	x24 = Mem0[v41:word64]
	v42 = sp + 64
	x25 = Mem0[v42:word64]
	v42 = v42 + 8
	x26 = Mem0[v42:word64]
	v43 = sp + 80
	x27 = Mem0[v43:word64]
	v43 = v43 + 8
	x28 = Mem0[v43:word64]
	x29 = Mem0[sp:word64]
	sp = sp + 8
	x30 = Mem0[sp:word64]
	sp = sp + 112
	// succ:  l0000000000460A58_thunk_sh_xfree
l0000000000460A58_thunk_sh_xfree:
	call sh_xfree (retsize: 0;)
	return
	// succ:  fn00000000004608F8_exit
l0000000000460A5C:
	x0 = Mem0[x20:word64]
	x1 = Mem0[x29 + 104:word64]
	w2 = 0x000009D0
	call sh_xfree (retsize: 0;)
	goto l00000000004609A0
	// succ:  l00000000004609A0
l0000000000460A70:
	branch w24 == 0x00000000 l0000000000460AAC
	// succ:  l0000000000460A74 l0000000000460AAC
l0000000000460A74:
	x0 = x28 - 0x0000000000000010
	x19 = 0xFFFFFFFFFFFFFFF8
	x19 = x19 + (int64) ((int32) w24)
	w1 = w24 - 0x00000001
	x24 = x0 + (int64) ((int32) w24)
	x19 = x28 + x19
	x24 = x24 - (uint64) ((word32) w1)
	x20 = x27 + 0xFFFFFFFFFFFFF910
	// succ:  l0000000000460A94
l0000000000460A94:
	x0 = Mem0[x19:word64]
	x19 = x19 + -8
	x1 = x20
	w2 = 0x000009E7
	call sh_xfree (retsize: 0;)
	x31 = x19 - x24
	NZCV = cond(x31)
	branch Test(NE,Z) l0000000000460A94
	// succ:  l0000000000460AAC l0000000000460A94
l0000000000460AAC:
	x0 = x28
	x1 = x27 + 0xFFFFFFFFFFFFF910
	w2 = 0x000009E8
	call sh_xfree (retsize: 0;)
	goto l00000000004609F0
	// succ:  l00000000004609F0
l0000000000460AC0:
	w0 = w20 - 0x00000001
	call strvec_create (retsize: 0;)
	x28 = x0
	goto l0000000000460960
	// succ:  l0000000000460960
l0000000000460AD0:
	Mem0[x22 + 8:word64] = x0
	x27 = 0x00000000004AE000
	// succ:  l0000000000460AD8
l0000000000460AD8:
	x1 = 0x00000000004D7000
	x0 = x1 + 0x00000000000001B8
	w0 = Mem0[x0 + 40:word32]
	branch w0 != 0x00000000 l0000000000460B20
	// succ:  l0000000000460AE8 l0000000000460B20
l0000000000460AE8:
	x0 = x28
	x1 = x27 + 0xFFFFFFFFFFFFF910
	w2 = 0x000009DE
	call sh_xfree (retsize: 0;)
	// succ:  l0000000000460AF8
l0000000000460AF8:
	x0 = x22
	x1 = x27 + 0xFFFFFFFFFFFFF910
	v45 = sp + 16
	x19 = Mem0[v45:word64]
	v45 = v45 + 8
	x20 = Mem0[v45:word64]
	v46 = sp + 32
	x21 = Mem0[v46:word64]
	v46 = v46 + 8
	x22 = Mem0[v46:word64]
	v47 = sp + 48
	x23 = Mem0[v47:word64]
	v47 = v47 + 8
	x24 = Mem0[v47:word64]
	v48 = sp + 64
	x25 = Mem0[v48:word64]
	v48 = v48 + 8
	x26 = Mem0[v48:word64]
	v49 = sp + 80
	x27 = Mem0[v49:word64]
	v49 = v49 + 8
	x28 = Mem0[v49:word64]
	x29 = Mem0[sp:word64]
	sp = sp + 8
	x30 = Mem0[sp:word64]
	sp = sp + 112
	w2 = 0x000009E0
	// succ:  l0000000000460B1C_thunk_sh_xfree
l0000000000460B1C_thunk_sh_xfree:
	call sh_xfree (retsize: 0;)
	return
	// succ:  fn00000000004608F8_exit
l0000000000460B20:
	x0 = Mem0[x23:word64]
	x1 = x27 + 0xFFFFFFFFFFFFF910
	w2 = 0x000009DA
	call sh_xfree (retsize: 0;)
	Mem0[x23:word64] = 0x0000000000000000
	goto l0000000000460AF8
	// succ:  l0000000000460AF8
l0000000000460B38:
	x0 = 0x00000000004D7000
	x0 = x0 + 0x00000000000001B8
	w0 = Mem0[x0 + 40:word32]
	branch w0 != 0x00000000 l0000000000460B64
	// succ:  l0000000000460B48 l0000000000460B64
l0000000000460B48:
	v29 = sp + 16
	x19 = Mem0[v29:word64]
	v29 = v29 + 8
	x20 = Mem0[v29:word64]
	v30 = sp + 32
	x21 = Mem0[v30:word64]
	v30 = v30 + 8
	x22 = Mem0[v30:word64]
	v31 = sp + 48
	x23 = Mem0[v31:word64]
	v31 = v31 + 8
	x24 = Mem0[v31:word64]
	v32 = sp + 64
	x25 = Mem0[v32:word64]
	v32 = v32 + 8
	x26 = Mem0[v32:word64]
	v33 = sp + 80
	x27 = Mem0[v33:word64]
	v33 = v33 + 8
	x28 = Mem0[v33:word64]
	x29 = Mem0[sp:word64]
	sp = sp + 8
	x30 = Mem0[sp:word64]
	sp = sp + 112
	return
	// succ:  fn00000000004608F8_exit
l0000000000460B64:
	x0 = Mem0[x23:word64]
	call x1 (retsize: 0;)
	branch w0 != 0x00000000 l0000000000460B48
	// succ:  l0000000000460B70 l0000000000460B48
l0000000000460B70:
	x0 = Mem0[x23:word64]
	x1 = 0x00000000004AE000
	x1 = x1 + 0xFFFFFFFFFFFFF910
	w2 = 0x000009B5
	call sh_xfree (retsize: 0;)
	Mem0[x23:word64] = x19
	goto l0000000000460B48
	// succ:  l0000000000460B48
l0000000000460B8C:
	x27 = x27 + 0xFFFFFFFFFFFFF910
	x0 = Mem0[x23:word64]
	x1 = x27
	w2 = 0x000009EE
	call sh_xfree (retsize: 0;)
	x1 = Mem0[x22 + 8:word64]
	x0 = x22
	Mem0[x23:word64] = x1
	Mem0[x23 + 8:word64] = 0x0000000000000000
	x1 = x27
	w2 = 0x000009F1
	goto l0000000000460A40
	// succ:  l0000000000460A40
fn00000000004608F8_exit:


// fn0000000000460C9C
// Return size: 0
void fn0000000000460C9C()
fn0000000000460C9C_entry:
	// succ:  l0000000000460C9C
l0000000000460C9C:
	sp = fp
	sp = sp + -32
	Mem0[sp:word64] = x29
	sp = sp + 8
	Mem0[sp:word64] = x30
	x29 = x31 + 0x0000000000000000
	w1 = 0x00000000
	v9 = sp + 16
	Mem0[v9:word64] = x19
	v9 = v9 + 8
	Mem0[v9:word64] = x20
	call bash_tilde_expand (retsize: 0;)
	x20 = x0
	call file_isdir (retsize: 0;)
	x1 = 0x00000000004AE000
	w19 = w0
	x1 = x1 + 0xFFFFFFFFFFFFF910
	x0 = x20
	w2 = 0x00000A33
	call sh_xfree (retsize: 0;)
	w0 = w19
	v15 = sp + 16
	x19 = Mem0[v15:word64]
	v15 = v15 + 8
	x20 = Mem0[v15:word64]
	x29 = Mem0[sp:word64]
	sp = sp + 8
	x30 = Mem0[sp:word64]
	sp = sp + 32
	return
	// succ:  fn0000000000460C9C_exit
fn0000000000460C9C_exit:


// fn00000000004613F4
// Return size: 0
void fn00000000004613F4()
fn00000000004613F4_entry:
	// succ:  l00000000004613F4
l00000000004613F4:
	sp = fp
	sp = sp + -64
	Mem0[sp:word64] = x29
	sp = sp + 8
	Mem0[sp:word64] = x30
	x29 = x31 + 0x0000000000000000
	v8 = sp + 16
	Mem0[v8:word64] = x19
	v8 = v8 + 8
	Mem0[v8:word64] = x20
	v11 = sp + 32
	Mem0[v11:word64] = x21
	v11 = v11 + 8
	Mem0[v11:word64] = x22
	x20 = 0x00000000004E1000
	x19 = 0x00000000004E1000
	x21 = 0x00000000004E1000
	v14 = sp + 48
	Mem0[v14:word64] = x23
	v14 = v14 + 8
	Mem0[v14:word64] = x24
	x22 = Mem0[x21 + 3984:word64]
	x24 = Mem0[x20 + 4088:word64]
	x23 = Mem0[x19 + 4064:word64]
	Mem0[x20 + 4088:word64] = x1
	Mem0[x19 + 4064:word64] = 0x0000000000000000
	call rl_complete_internal (retsize: 0;)
	Mem0[x20 + 4088:word64] = x24
	Mem0[x19 + 4064:word64] = x23
	Mem0[x21 + 3984:word64] = x22
	v16 = sp + 16
	x19 = Mem0[v16:word64]
	v16 = v16 + 8
	x20 = Mem0[v16:word64]
	v17 = sp + 32
	x21 = Mem0[v17:word64]
	v17 = v17 + 8
	x22 = Mem0[v17:word64]
	v18 = sp + 48
	x23 = Mem0[v18:word64]
	v18 = v18 + 8
	x24 = Mem0[v18:word64]
	x29 = Mem0[sp:word64]
	sp = sp + 8
	x30 = Mem0[sp:word64]
	sp = sp + 64
	return
	// succ:  fn00000000004613F4_exit
fn00000000004613F4_exit:


// fn0000000000461784
// Return size: 0
void fn0000000000461784()
fn0000000000461784_entry:
	// succ:  l0000000000461784
l0000000000461784:
	sp = fp
	sp = sp + -32
	Mem0[sp:word64] = x29
	sp = sp + 8
	Mem0[sp:word64] = x30
	x29 = x31 + 0x0000000000000000
	x0 = 0x00000000004D9000
	w0 = Mem0[x0 + 1208:word32]
	v10 = sp + 16
	Mem0[v10:word64] = x19
	v10 = v10 + 8
	Mem0[v10:word64] = x20
	w31 = w0 - 0x00000001
	NZCV = cond(w31)
	branch Test(NE,Z) l00000000004617A8
	// succ:  l00000000004617A0 l00000000004617A8
l00000000004617A0:
	x1 = 0x00000000004E1000
	Mem0[x1 + 3332:word32] = w0
	// succ:  l00000000004617A8
l00000000004617A8:
	x0 = 0x0000000000461000
	x1 = 0x0000000000463000
	x19 = 0x00000000004DE000
	x1 = x1 + 0x000000000000061C
	x0 = x0 + 0x0000000000000784
	x20 = Mem0[x19 + 1384:word64]
	Mem0[x19 + 1384:word64] = x1
	call rl_completion_mode (retsize: 0;)
	x1 = 0x0000000000461000
	x1 = x1 + 0x00000000000005AC
	call fn00000000004613F4 (retsize: 0;)
	Mem0[x19 + 1384:word64] = x20
	v15 = sp + 16
	x19 = Mem0[v15:word64]
	v15 = v15 + 8
	x20 = Mem0[v15:word64]
	x29 = Mem0[sp:word64]
	sp = sp + 8
	x30 = Mem0[sp:word64]
	sp = sp + 32
	return
	// succ:  fn0000000000461784_exit
fn0000000000461784_exit:


// fn0000000000461BF8
// Return size: 0
void fn0000000000461BF8()
fn0000000000461BF8_entry:
	// succ:  l0000000000461BF8
l0000000000461BF8:
	sp = fp
	x31 = x31 - 0x0000000000000200
	sp = sp + -96
	Mem0[sp:word64] = x29
	sp = sp + 8
	Mem0[sp:word64] = x30
	x29 = x31 + 0x0000000000000000
	x1 = 0x00000000004BF000
	x1 = x1 + 0xFFFFFFFFFFFFFA18
	v9 = sp + 48
	Mem0[v9:word64] = x23
	v9 = v9 + 8
	Mem0[v9:word64] = x24
	v12 = sp + 16
	Mem0[v12:word64] = x19
	v12 = v12 + 8
	Mem0[v12:word64] = x20
	v15 = sp + 32
	Mem0[v15:word64] = x21
	v15 = v15 + 8
	Mem0[v15:word64] = x22
	v18 = sp + 64
	Mem0[v18:word64] = x25
	v18 = v18 + 8
	Mem0[v18:word64] = x26
	Mem0[sp + 80:word64] = x27
	fopen(x0, x1)
	sp = sp + 0xFFFFFFFFFFFFFFF8
	x23 = x0
	branch x0 == 0x0000000000000000 l0000000000461D14
	// succ:  l0000000000461C2C l0000000000461D14
l0000000000461C2C:
	x25 = 0x00000000004AE000
	x22 = 0x00000000004E1000
	x24 = 0x00000000004AE000
	x20 = x29 + 0x0000000000000160
	x25 = x25 + 0xFFFFFFFFFFFFF9A8
	x22 = x22 + 0x0000000000000438
	x24 = x24 + 0xFFFFFFFFFFFFF910
	// succ:  l0000000000461C48
l0000000000461C48:
	x0 = x20
	w1 = 0x000000FF
	x2 = x23
	fgets(x0, x1, x2)
	sp = sp + 0xFFFFFFFFFFFFFFF8
	branch x0 == 0x0000000000000000 l0000000000461D0C
	// succ:  l0000000000461C5C l0000000000461D0C
l0000000000461C5C:
	v24 = Mem0[x20:byte]
	w21 = (word32) v24
	branch w21 == 0x00000000 l0000000000461C48
	// succ:  l0000000000461C64 l0000000000461C48
l0000000000461C64:
	x3 = 0x0000000000000000
	goto l0000000000461C74
	// succ:  l0000000000461C74
l0000000000461C6C:
	v36 = Mem0[x20 + x3:byte]
	w21 = (word32) v36
	branch w21 == 0x00000000 l0000000000461C48
	// succ:  l0000000000461C74 l0000000000461C48
l0000000000461C74:
	w31 = w21 - 0x0000000D
	NZCV = cond(w31)
	w19 = w3
	x3 = x3 + 0x0000000000000001
	branch Test(EQ,Z) l0000000000461C6C
	// succ:  l0000000000461C84 l0000000000461C6C
l0000000000461C84:
	w31 = w21 - 0x00000020
	NZCV = cond(w31)
	branch Test(EQ,Z) l0000000000461C6C
	// succ:  l0000000000461C8C l0000000000461C6C
l0000000000461C8C:
	w0 = w21 - 0x00000009
l0000000000461D0C:
	x0 = x23
	fclose(x0)
	sp = sp + 0xFFFFFFFFFFFFFFF8
	// succ:  l0000000000461D14
l0000000000461D14:
	v26 = sp + 16
	x19 = Mem0[v26:word64]
	v26 = v26 + 8
	x20 = Mem0[v26:word64]
	v27 = sp + 32
	x21 = Mem0[v27:word64]
	v27 = v27 + 8
	x22 = Mem0[v27:word64]
	v28 = sp + 48
	x23 = Mem0[v28:word64]
	v28 = v28 + 8
	x24 = Mem0[v28:word64]
	v29 = sp + 64
	x25 = Mem0[v29:word64]
	v29 = v29 + 8
	x26 = Mem0[v29:word64]
	x27 = Mem0[sp + 80:word64]
	x29 = Mem0[sp:word64]
	sp = sp + 8
	x30 = Mem0[sp:word64]
	sp = sp + 96
	x31 = x31 + 0x0000000000000200
	return
	// succ:  fn0000000000461BF8_exit
fn0000000000461BF8_exit:


// fn0000000000461F30
// Return size: 0
void fn0000000000461F30()
fn0000000000461F30_entry:
	// succ:  l0000000000461F30
l0000000000461F30:
	sp = fp
	sp = sp + -16
	Mem0[sp:word64] = x29
	sp = sp + 8
	Mem0[sp:word64] = x30
	x29 = x31 + 0x0000000000000000
	x0 = 0x00000000004AC000
	x0 = x0 + 0xFFFFFFFFFFFFFE48
	call get_string_value (retsize: 0;)
	branch x0 == 0x0000000000000000 l0000000000461F70
	// succ:  l0000000000461F48 l0000000000461F70
l0000000000461F48:
	call fn0000000000461BF8 (retsize: 0;)
	x0 = 0x00000000004E1000
	x0 = x0 + 0x0000000000000438
	x1 = Mem0[x0 + 168:word64]
	branch x1 == 0x0000000000000000 l0000000000461F68
	// succ:  l0000000000461F5C l0000000000461F68
l0000000000461F5C:
	w1 = Mem0[x0 + 176:word32]
	w1 = w1 + 0x00000001
	Mem0[x0 + 176:word32] = w1
	// succ:  l0000000000461F68
l0000000000461F68:
	x29 = Mem0[sp:word64]
	sp = sp + 8
	x30 = Mem0[sp:word64]
	sp = sp + 16
	return
	// succ:  fn0000000000461F30_exit
l0000000000461F70:
	x0 = 0x00000000004AE000
	x0 = x0 + 0xFFFFFFFFFFFFF9C8
	call get_string_value (retsize: 0;)
	branch x0 != 0x0000000000000000 l0000000000461F48
	// succ:  l0000000000461F80 l0000000000461F48
l0000000000461F80:
	x0 = 0x00000000004AE000
	x0 = x0 + 0xFFFFFFFFFFFFF9B8
	goto l0000000000461F48
	// succ:  l0000000000461F48
fn0000000000461F30_exit:


// command_word_completion_function
// Return size: 0
void command_word_completion_function()
command_word_completion_function_entry:
	// succ:  l0000000000462420
l0000000000462420:
	sp = fp
	sp = sp + -128
	Mem0[sp:word64] = x29
	sp = sp + 8
	Mem0[sp:word64] = x30
	x29 = x31 + 0x0000000000000000
	v8 = sp + 32
	Mem0[v8:word64] = x21
	v8 = v8 + 8
	Mem0[v8:word64] = x22
	v11 = sp + 48
	Mem0[v11:word64] = x23
	v11 = v11 + 8
	Mem0[v11:word64] = x24
	v14 = sp + 16
	Mem0[v14:word64] = x19
	v14 = v14 + 8
	Mem0[v14:word64] = x20
	v17 = sp + 64
	Mem0[v17:word64] = x25
	v17 = v17 + 8
	Mem0[v17:word64] = x26
	v20 = sp + 80
	Mem0[v20:word64] = x27
	v20 = v20 + 8
	Mem0[v20:word64] = x28
	w21 = w1
	x23 = x0
	x22 = 0x00000000004E1000
	branch w1 != 0x00000000 l00000000004626EC
	// succ:  l000000000046244C l00000000004626EC
l000000000046244C:
	x19 = x22 + 0x0000000000000438
	x0 = Mem0[x19 + 224:word64]
	branch x0 == 0x0000000000000000 l0000000000462AF4
	// succ:  l0000000000462458 l0000000000462AF4
l0000000000462458:
	x1 = Mem0[x19 + 232:word64]
	x20 = 0x00000000004AE000
	x31 = x0 - x1
	NZCV = cond(x31)
	branch Test(EQ,Z) l000000000046247C
	// succ:  l0000000000462468 l000000000046247C
l0000000000462468:
	x1 = x20 + 0xFFFFFFFFFFFFF910
	w2 = 0x00000602
	call sh_xfree (retsize: 0;)
	x0 = Mem0[x19 + 232:word64]
	// succ:  l0000000000462478
l0000000000462478:
	branch x0 == 0x0000000000000000 l0000000000462488
	// succ:  l000000000046247C l0000000000462488
l000000000046247C:
	x1 = x20 + 0xFFFFFFFFFFFFF910
	w2 = 0x00000604
	call sh_xfree (retsize: 0;)
	// succ:  l0000000000462488
l0000000000462488:
	x1 = x22 + 0x0000000000000438
	x0 = x23
	Mem0[x1 + 240:word32] = 0x00000000
	Mem0[x1 + 244:word32] = 0x00000000
	call absolute_pathname (retsize: 0;)
	branch w0 == 0x00000000 l0000000000462ABC
	// succ:  l00000000004624A0 l0000000000462ABC
l00000000004624A0:
	w2 = 0x00000000
	// succ:  l00000000004624A4
l00000000004624A4:
	x0 = 0x00000000004AE000
	x1 = x22 + 0x0000000000000438
	x0 = x0 + 0xFFFFFFFFFFFFF9E8
	Mem0[x1 + 248:word32] = w2
	Mem0[x1 + 256:word64] = 0x0000000000000000
	call rl_variable_value (retsize: 0;)
	v31 = Mem0[x0:byte]
	w2 = (word32) v31
	w1 = 0x00000000
	w31 = w2 - 0x0000006F
	NZCV = cond(w31)
	branch Test(EQ,Z) l0000000000462E18
	// succ:  l00000000004624CC l0000000000462E18
l00000000004624CC:
	x19 = x22 + 0x0000000000000438
	x0 = Mem0[x19 + 272:word64]
	Mem0[x19 + 264:word32] = w1
	branch x0 == 0x0000000000000000 l00000000004624EC
	// succ:  l00000000004624DC l00000000004624EC
l00000000004624DC:
	x1 = x20 + 0xFFFFFFFFFFFFF910
	w2 = 0x0000060F
	call sh_xfree (retsize: 0;)
	Mem0[x19 + 272:word64] = 0x0000000000000000
	// succ:  l00000000004624EC
l00000000004624EC:
	x0 = x23
	call glob_pattern_p (retsize: 0;)
	x19 = x22 + 0x0000000000000438
	Mem0[x19 + 280:word32] = w0
	branch w0 == 0x00000000 l0000000000462628
	// succ:  l0000000000462500 l0000000000462628
l0000000000462500:
	v32 = Mem0[x23:byte]
	w0 = (word32) v32
	w31 = w0 - 0x0000007E
	NZCV = cond(w31)
	branch Test(EQ,Z) l0000000000462E34
	// succ:  l000000000046250C l0000000000462E34
l000000000046250C:
	x0 = x23
	strlen(x0)
	sp = sp + 0xFFFFFFFFFFFFFFF8
	w2 = 0x0000062B
	x1 = x20 + 0xFFFFFFFFFFFFF910
	x0 = x0 + 0x0000000000000001
	call sh_xmalloc (retsize: 0;)
	x1 = x23
	strcpy(x0, x1)
	sp = sp + 0xFFFFFFFFFFFFFFF8
	x19 = x0
	x0 = x22 + 0x0000000000000438
	Mem0[x0 + 232:word64] = x19
	// succ:  l0000000000462538
l0000000000462538:
	x0 = 0x00000000004E4000
	x21 = x22 + 0x0000000000000438
	w0 = Mem0[x0 + 204:word32]
	Mem0[x21 + 224:word64] = x19
	branch w0 == 0x00000000 l0000000000462558
	// succ:  l000000000046254C l0000000000462558
l000000000046254C:
	x0 = 0x00000000004E4000
	w1 = Mem0[x0 + 188:word32]
	branch w1 == 0x00000000 l0000000000462DA4
	// succ:  l0000000000462558 l0000000000462DA4
l0000000000462558:
	x0 = x19
	x21 = x22 + 0x0000000000000438
	strlen(x0)
	sp = sp + 0xFFFFFFFFFFFFFFF8
	x1 = Mem0[x21 + 304:word64]
	Mem0[x21 + 296:word32] = w0
	Mem0[x21 + 300:word32] = w0
	branch x1 == 0x0000000000000000 l0000000000462588
	// succ:  l0000000000462574 l0000000000462588
l0000000000462574:
	x0 = x1
	w2 = 0x0000063C
	x1 = x20 + 0xFFFFFFFFFFFFF910
	call sh_xfree (retsize: 0;)
	x19 = Mem0[x21 + 232:word64]
	// succ:  l0000000000462588
l0000000000462588:
	x0 = x19
	strlen(x0)
	sp = sp + 0xFFFFFFFFFFFFFFF8
	x19 = x22 + 0x0000000000000438
	x1 = x20 + 0xFFFFFFFFFFFFF910
	w2 = 0x0000063E
	x0 = x0 + 0x0000000000000001
	call sh_xmalloc (retsize: 0;)
	x20 = Mem0[x19 + 232:word64]
	x1 = x20
	strcpy(x0, x1)
	sp = sp + 0xFFFFFFFFFFFFFFF8
	w1 = Mem0[x19 + 280:word32]
	Mem0[x19 + 304:word64] = x0
	Mem0[x19 + 312:word32] = 0x00000000
	x2 = x0
	branch w1 == 0x00000000 l000000000046286C
	// succ:  l00000000004625C4 l000000000046286C
l00000000004625C4:
	w0 = 0x00000005
	Mem0[x19 + 244:word32] = w0
	x0 = x20
	// succ:  l00000000004625D0
l00000000004625D0:
	x19 = x22 + 0x0000000000000438
	w1 = Mem0[x19 + 264:word32]
	x21 = 0x00000000004E1000
	Mem0[x21 + 2560:word32] = w1
	call shell_glob_filename (retsize: 0;)
	x1 = 0x00000000004E3000
	x1 = x1 + 0xFFFFFFFFFFFFFF20
	Mem0[x19 + 272:word64] = x0
	Mem0[x21 + 2560:word32] = 0x00000000
	x31 = x0 - x1
	NZCV = cond(x31)
	branch Test(EQ,Z) l0000000000462F10
	// succ:  l00000000004625FC l0000000000462F10
l00000000004625FC:
	branch x0 == 0x0000000000000000 l0000000000462F10
	// succ:  l0000000000462600 l0000000000462F10
l0000000000462600:
	x2 = Mem0[x0 + 8:word64]
	Mem0[x19 + 336:word32] = 0x00000000
	branch x2 == 0x0000000000000000 l0000000000462FD0
	// succ:  l000000000046260C l0000000000462FD0
l000000000046260C:
	x1 = 0x00000000004E1000
	w1 = Mem0[x1 + 4076:word32]
	w31 = w1 - 0x00000009
	NZCV = cond(w31)
	branch Test(EQ,Z) l00000000004629A4
	// succ:  l000000000046261C l00000000004629A4
l000000000046261C:
	x2 = 0x0000000000000000
	w1 = 0x00000001
	goto l000000000046271C
	// succ:  l000000000046271C
l0000000000462628:
	x0 = x23
	call absolute_program (retsize: 0;)
	branch w0 != 0x00000000 l0000000000462500
	// succ:  l0000000000462634 l0000000000462500
l0000000000462634:
	x0 = x23
	strlen(x0)
	sp = sp + 0xFFFFFFFFFFFFFFF8
	w2 = 0x00000654
	x1 = x20 + 0xFFFFFFFFFFFFF910
	x0 = x0 + 0x0000000000000001
	call sh_xmalloc (retsize: 0;)
	x1 = x23
	strcpy(x0, x1)
	sp = sp + 0xFFFFFFFFFFFFFFF8
	x24 = x0
	Mem0[x19 + 232:word64] = x0
	Mem0[x19 + 224:word64] = x0
	strlen(x0)
	sp = sp + 0xFFFFFFFFFFFFFFF8
	x1 = 0x00000000004E4000
	w1 = Mem0[x1 + 204:word32]
	Mem0[x19 + 296:word32] = w0
	Mem0[x19 + 300:word32] = w0
	branch w1 == 0x00000000 l0000000000462684
	// succ:  l0000000000462678 l0000000000462684
l0000000000462678:
	x0 = 0x00000000004E4000
	w1 = Mem0[x0 + 188:word32]
	branch w1 == 0x00000000 l0000000000462FF4
	// succ:  l0000000000462684 l0000000000462FF4
l0000000000462684:
	x0 = 0x00000000004AA000
	x0 = x0 + 0x0000000000000210
	call get_string_value (retsize: 0;)
	x1 = x22 + 0x0000000000000438
	x2 = Mem0[x1 + 344:word64]
	Mem0[x1 + 320:word64] = x0
	Mem0[x1 + 328:word32] = 0x00000000
	Mem0[x1 + 332:word32] = 0x00000000
	Mem0[x1 + 336:word32] = 0x00000000
	branch x2 == 0x0000000000000000 l00000000004626BC
	// succ:  l00000000004626AC l00000000004626BC
l00000000004626AC:
	x0 = x2
	x1 = x20 + 0xFFFFFFFFFFFFF910
	w2 = 0x00000664
	call sh_xfree (retsize: 0;)
	// succ:  l00000000004626BC
l00000000004626BC:
	call all_visible_functions (retsize: 0;)
	x1 = x22 + 0x0000000000000438
	x2 = Mem0[x1 + 352:word64]
	Mem0[x1 + 344:word64] = x0
	branch x2 == 0x0000000000000000 l00000000004626E0
	// succ:  l00000000004626D0 l00000000004626E0
l00000000004626D0:
	x0 = x2
	x1 = x20 + 0xFFFFFFFFFFFFF910
	w2 = 0x0000066A
	call sh_xfree (retsize: 0;)
	// succ:  l00000000004626E0
l00000000004626E0:
	call all_aliases (retsize: 0;)
	x1 = x22 + 0x0000000000000438
	Mem0[x1 + 352:word64] = x0
	// succ:  l00000000004626EC
l00000000004626EC:
	x0 = x22 + 0x0000000000000438
	w0 = Mem0[x0 + 244:word32]
	w31 = w0 - 0x00000003
	NZCV = cond(w31)
	branch Test(ULE,ZC) l00000000004627A0
	// succ:  l00000000004626FC l00000000004627A0
l00000000004626FC:
	x1 = x22 + 0x0000000000000438
	w2 = Mem0[x1 + 280:word32]
	branch w2 == 0x00000000 l00000000004627B8
	// succ:  l0000000000462708 l00000000004627B8
l0000000000462708:
	branch w21 == 0x00000000 l0000000000462B00
	// succ:  l000000000046270C l0000000000462B00
l000000000046270C:
	w2 = Mem0[x1 + 336:word32]
	x0 = Mem0[x1 + 272:word64]
	w1 = w2 + 0x00000001
l000000000046271C:
	x0 = Mem0[x0 + x2:word64]
	x19 = x22 + 0x0000000000000438
	x20 = 0x00000000004AE000
	Mem0[x19 + 336:word32] = w1
	Mem0[x19 + 256:word64] = x0
	x20 = x20 + 0xFFFFFFFFFFFFF910
	branch x0 != 0x0000000000000000 l0000000000462768
	// succ:  l0000000000462738 l0000000000462768
l0000000000462738:
	goto l0000000000462E90
	// succ:  l0000000000462E90
l000000000046273C:
	x0 = Mem0[x19 + 256:word64]
	w2 = 0x000006D9
	x1 = x20
	call sh_xfree (retsize: 0;)
	w0 = Mem0[x19 + 336:word32]
	x2 = Mem0[x19 + 272:word64]
	w3 = w0 + 0x00000001
	x0 = Mem0[x2 + (int64) ((int32) w0):word64]
	Mem0[x19 + 336:word32] = w3
	Mem0[x19 + 256:word64] = x0
	branch x0 == 0x0000000000000000 l0000000000462E90
	// succ:  l0000000000462768 l0000000000462E90
l0000000000462768:
	call executable_or_directory (retsize: 0;)
	branch w0 == 0x00000000 l000000000046273C
	// succ:  l0000000000462770 l000000000046273C
l0000000000462770:
	v41 = Mem0[x23:byte]
	w0 = (word32) v41
	x22 = x22 + 0x0000000000000438
	w31 = w0 - 0x0000007E
	NZCV = cond(w31)
	branch Test(EQ,Z) l0000000000462F20
	// succ:  l0000000000462780 l0000000000462F20
l0000000000462780:
	x0 = Mem0[x22 + 256:word64]
	// succ:  l0000000000462784
l0000000000462784:
	v42 = sp + 16
	x19 = Mem0[v42:word64]
	v42 = v42 + 8
	x20 = Mem0[v42:word64]
	v43 = sp + 32
	x21 = Mem0[v43:word64]
	v43 = v43 + 8
	x22 = Mem0[v43:word64]
	v44 = sp + 48
	x23 = Mem0[v44:word64]
	v44 = v44 + 8
	x24 = Mem0[v44:word64]
	v45 = sp + 64
	x25 = Mem0[v45:word64]
	v45 = v45 + 8
	x26 = Mem0[v45:word64]
	v46 = sp + 80
	x27 = Mem0[v46:word64]
	v46 = v46 + 8
	x28 = Mem0[v46:word64]
	x29 = Mem0[sp:word64]
	sp = sp + 8
	x30 = Mem0[sp:word64]
	sp = sp + 128
	return
	// succ:  command_word_completion_function_exit
l00000000004627A0:
	x1 = 0x00000000004AE000
	x1 = x1 + 0xFFFFFFFFFFFFF908
	v72 = Mem0[x1 + (uint64) ((uint32) w0):word16]
	w2 = (word32) v72
	x3 = 0x00000000004627B8
	x2 = x3 + (int64) ((int16) w2)
l00000000004627B8:
	w0 = Mem0[x1 + 248:word32]
	branch w0 != 0x00000000 l0000000000462EE8
	// succ:  l00000000004627C0 l0000000000462EE8
l00000000004627C0:
	x19 = x22 + 0x0000000000000438
	x0 = Mem0[x19 + 256:word64]
	x31 = x0 - x31
	NZCV = cond(x31)
	w0 = (word32) Test(NE,Z)
	Mem0[x19 + 312:word32] = w0
	branch w0 != 0x00000000 l0000000000462AE8
	// succ:  l00000000004627D8 l0000000000462AE8
l00000000004627D8:
	x0 = Mem0[x19 + 320:word64]
	branch x0 == 0x0000000000000000 l00000000004629A4
	// succ:  l00000000004627E0 l00000000004629A4
l00000000004627E0:
	v51 = Mem0[x19 + 166:int32]
	x1 = (word64) v51
	v52 = Mem0[x0 + x1:byte]
	w1 = (word32) v52
	branch w1 == 0x00000000 l00000000004629A4
	// succ:  l00000000004627EC l00000000004629A4
l00000000004627EC:
	x1 = x19 + 0x000000000000014C
	call extract_colon_unit (retsize: 0;)
	x21 = x0
	branch x0 == 0x0000000000000000 l00000000004629A4
	// succ:  l00000000004627FC l00000000004629A4
l00000000004627FC:
	w2 = 0x00000001
	v53 = Mem0[x0:byte]
	w1 = (word32) v53
	Mem0[x19 + 240:word32] = w2
	x20 = 0x00000000004AE000
	branch w1 == 0x00000000 l0000000000462F50
	// succ:  l0000000000462810 l0000000000462F50
l0000000000462810:
	w31 = w1 - 0x0000007E
	NZCV = cond(w31)
	branch Test(EQ,Z) l0000000000462FA4
	// succ:  l0000000000462818 l0000000000462FA4
l0000000000462818:
	w31 = w1 - 0x0000002E
	NZCV = cond(w31)
	branch Test(EQ,Z) l0000000000462F8C
	// succ:  l0000000000462820 l0000000000462F8C
l0000000000462820:
	x0 = x22 + 0x0000000000000438
	x0 = Mem0[x0 + 304:word64]
	branch x0 == 0x0000000000000000 l0000000000462838
	// succ:  l000000000046282C l0000000000462838
l000000000046282C:
	x1 = x20 + 0xFFFFFFFFFFFFF910
	w2 = 0x0000070F
	call sh_xfree (retsize: 0;)
	// succ:  l0000000000462838
l0000000000462838:
	x19 = x22 + 0x0000000000000438
	x1 = Mem0[x19 + 232:word64]
	w2 = 0x00000000
	x0 = x21
	call sh_makepath (retsize: 0;)
	Mem0[x19 + 304:word64] = x0
	x1 = x20 + 0xFFFFFFFFFFFFF910
	w2 = 0x00000712
	x0 = x21
	call sh_xfree (retsize: 0;)
	w1 = Mem0[x19 + 312:word32]
	x2 = Mem0[x19 + 304:word64]
	goto l0000000000462880
	// succ:  l0000000000462880
l000000000046286C:
	w3 = Mem0[x19 + 92:word32]
	branch w3 != 0x00000000 l0000000000462DCC
	// succ:  l0000000000462874 l0000000000462DCC
l0000000000462874:
	x0 = x22 + 0x0000000000000438
	w3 = 0x00000004
	Mem0[x0 + 244:word32] = w3
	// succ:  l0000000000462880
l0000000000462880:
	x0 = x2
	call rl_filename_completion_function (retsize: 0;)
	x19 = x22 + 0x0000000000000438
	w2 = Mem0[x19 + 244:word32]
	x25 = 0x0000000000463000
	x24 = 0x00000000004AE000
	Mem0[x19 + 256:word64] = x0
	w31 = w2 - 0x00000004
	NZCV = cond(w31)
	x26 = 0x00000000004E1000
	x25 = x25 + 0x000000000000000C
	x24 = x24 + 0xFFFFFFFFFFFFF910
	branch Test(EQ,Z) l0000000000462978
	// succ:  l00000000004628B0 l0000000000462978
l00000000004628B0:
	w2 = 0x00000001
	Mem0[x19 + 312:word32] = w2
	branch x0 == 0x0000000000000000 l0000000000462998
	// succ:  l00000000004628BC l0000000000462998
l00000000004628BC:
	x0 = Mem0[x19 + 232:word64]
	call absolute_program (retsize: 0;)
	branch w0 == 0x00000000 l00000000004629AC
	// succ:  l00000000004628C8 l00000000004629AC
l00000000004628C8:
	w0 = Mem0[x19 + 264:word32]
	x20 = Mem0[x19 + 256:word64]
	x1 = Mem0[x19 + 232:word64]
	v48 = Mem0[x19 + 148:int32]
	x2 = (word64) v48
	branch w0 != 0x00000000 l00000000004629F4
	// succ:  l00000000004628DC l00000000004629F4
l00000000004628DC:
	x0 = x20
	strncmp(x0, x1, x2)
	sp = sp + 0xFFFFFFFFFFFFFFF8
	v49 = Mem0[x23:byte]
	w1 = (word32) v49
	NZCV = cond(w0 - w31)
	w27 = (word32) Test(EQ,Z)
	w31 = w1 - 0x0000007E
	NZCV = cond(w31)
	x0 = x20
	branch Test(EQ,Z) l0000000000462A14
	// succ:  l00000000004628FC l0000000000462A14
l00000000004628FC:
	strlen(x0)
	sp = sp + 0xFFFFFFFFFFFFFFF8
	x1 = x24
	w2 = 0x00000735
	x0 = x0 + 0x0000000000000001
	call sh_xmalloc (retsize: 0;)
	x1 = Mem0[x19 + 256:word64]
	x20 = 0x00000000004AE000
	strcpy(x0, x1)
	sp = sp + 0xFFFFFFFFFFFFFFF8
	x21 = x0
	// succ:  l0000000000462920
l0000000000462920:
	branch w27 == 0x00000000 l0000000000462938
	// succ:  l0000000000462924 l0000000000462938
l0000000000462924:
	w0 = Mem0[x19 + 240:word32]
	branch w0 == 0x00000000 l0000000000462A28
	// succ:  l000000000046292C l0000000000462A28
l000000000046292C:
	x0 = Mem0[x19 + 256:word64]
	call executable_file (retsize: 0;)
	branch w0 != 0x00000000 l0000000000462A34
	// succ:  l0000000000462938 l0000000000462A34
l0000000000462938:
	x0 = x21
	x1 = x20 + 0xFFFFFFFFFFFFF910
	w2 = 0x0000075E
	call sh_xfree (retsize: 0;)
	x0 = Mem0[x19 + 256:word64]
	// succ:  l000000000046294C
l000000000046294C:
	x1 = x20 + 0xFFFFFFFFFFFFF910
	w2 = 0x0000075F
	call sh_xfree (retsize: 0;)
	x2 = Mem0[x19 + 304:word64]
	w1 = Mem0[x19 + 312:word32]
	x0 = x2
	call rl_filename_completion_function (retsize: 0;)
	w2 = Mem0[x19 + 244:word32]
	Mem0[x19 + 256:word64] = x0
	w31 = w2 - 0x00000004
	NZCV = cond(w31)
	branch Test(NE,Z) l00000000004628B0
	// succ:  l0000000000462978 l00000000004628B0
l0000000000462978:
	w1 = Mem0[x19 + 92:word32]
	branch w1 == 0x00000000 l00000000004628B0
	// succ:  l0000000000462980 l00000000004628B0
l0000000000462980:
	x1 = 0x00000000004E1000
	w2 = 0x00000001
	Mem0[x26 + 3944:word64] = x25
	Mem0[x1 + 3936:word64] = 0x0000000000000000
	Mem0[x19 + 312:word32] = w2
	branch x0 != 0x0000000000000000 l00000000004628BC
	// succ:  l0000000000462998 l00000000004628BC
l0000000000462998:
	x0 = Mem0[x19 + 232:word64]
	call absolute_program (retsize: 0;)
	branch w0 == 0x00000000 l00000000004627C0
	// succ:  l00000000004629A4 l00000000004627C0
l00000000004629A4:
	x0 = 0x0000000000000000
	goto l0000000000462784
	// succ:  l0000000000462784
l00000000004629AC:
	x20 = Mem0[x19 + 256:word64]
	w1 = 0x0000002F
	x0 = x20
	strrchr(x0, x1)
	sp = sp + 0xFFFFFFFFFFFFFFF8
	branch x0 == 0x0000000000000000 l00000000004629E8
	// succ:  l00000000004629C0 l00000000004629E8
l00000000004629C0:
	w1 = Mem0[x19 + 264:word32]
	x21 = x0 + 0x0000000000000001
	branch w1 != 0x00000000 l0000000000462A74
	// succ:  l00000000004629CC l0000000000462A74
l00000000004629CC:
	x1 = Mem0[x19 + 232:word64]
	v63 = Mem0[x19 + 148:int32]
	x2 = (word64) v63
	x0 = x21
	strncmp(x0, x1, x2)
	sp = sp + 0xFFFFFFFFFFFFFFF8
	NZCV = cond(w0 - w31)
	w0 = (word32) Test(EQ,Z)
	branch w0 != 0x00000000 l0000000000462A90
	// succ:  l00000000004629E8 l0000000000462A90
l00000000004629E8:
	x0 = x20
	x20 = 0x00000000004AE000
	goto l000000000046294C
	// succ:  l000000000046294C
l00000000004629F4:
	x0 = x20
	strncasecmp(x0, x1, x2)
	sp = sp + 0xFFFFFFFFFFFFFFF8
	v62 = Mem0[x23:byte]
	w1 = (word32) v62
	NZCV = cond(w0 - w31)
	w27 = (word32) Test(EQ,Z)
	w31 = w1 - 0x0000007E
	NZCV = cond(w31)
	x0 = x20
	branch Test(NE,Z) l00000000004628FC
	// succ:  l0000000000462A14 l00000000004628FC
l0000000000462A14:
	x1 = Mem0[x19 + 288:word64]
	x20 = 0x00000000004AE000
	call fn0000000000460148 (retsize: 0;)
	x21 = x0
	goto l0000000000462920
	// succ:  l0000000000462920
l0000000000462A28:
	x0 = Mem0[x19 + 256:word64]
	call executable_or_directory (retsize: 0;)
	branch w0 == 0x00000000 l0000000000462938
	// succ:  l0000000000462A34 l0000000000462938
l0000000000462A34:
	x22 = x22 + 0x0000000000000438
	x0 = Mem0[x22 + 256:word64]
	x1 = x20 + 0xFFFFFFFFFFFFF910
	w2 = 0x00000757
	call sh_xfree (retsize: 0;)
	x0 = 0x00000000004AC000
	x0 = x0 + 0x0000000000000460
	Mem0[x22 + 256:word64] = x0
	v54 = sp + 16
	x19 = Mem0[v54:word64]
	v54 = v54 + 8
	x20 = Mem0[v54:word64]
	x0 = x21
	v55 = sp + 48
	x23 = Mem0[v55:word64]
	v55 = v55 + 8
	x24 = Mem0[v55:word64]
	v56 = sp + 32
	x21 = Mem0[v56:word64]
	v56 = v56 + 8
	x22 = Mem0[v56:word64]
	v57 = sp + 64
	x25 = Mem0[v57:word64]
	v57 = v57 + 8
	x26 = Mem0[v57:word64]
	v58 = sp + 80
	x27 = Mem0[v58:word64]
	v58 = v58 + 8
	x28 = Mem0[v58:word64]
	x29 = Mem0[sp:word64]
	sp = sp + 8
	x30 = Mem0[sp:word64]
	sp = sp + 128
	return
	// succ:  command_word_completion_function_exit
l0000000000462A74:
	x1 = Mem0[x19 + 232:word64]
	v64 = Mem0[x19 + 148:int32]
	x2 = (word64) v64
	x0 = x21
	strncasecmp(x0, x1, x2)
	sp = sp + 0xFFFFFFFFFFFFFFF8
	NZCV = cond(w0 - w31)
	w0 = (word32) Test(EQ,Z)
	branch w0 == 0x00000000 l00000000004629E8
	// succ:  l0000000000462A90 l00000000004629E8
l0000000000462A90:
	x0 = x21
	strlen(x0)
	sp = sp + 0xFFFFFFFFFFFFFFF8
	w2 = 0x00000744
	x1 = x24
	x0 = x0 + 0x0000000000000001
	call sh_xmalloc (retsize: 0;)
	x1 = x21
	strcpy(x0, x1)
	sp = sp + 0xFFFFFFFFFFFFFFF8
	x21 = x0
	x20 = 0x00000000004AE000
	goto l0000000000462924
	// succ:  l0000000000462924
l0000000000462ABC:
	x0 = x23
	call absolute_program (retsize: 0;)
	branch w0 != 0x00000000 l00000000004624A0
	// succ:  l0000000000462AC8 l00000000004624A0
l0000000000462AC8:
	v66 = Mem0[x23:byte]
	w0 = (word32) v66
	w31 = w0 - 0x0000007E
	NZCV = cond(w31)
	branch Test(EQ,Z) l00000000004624A0
	// succ:  l0000000000462AD4 l00000000004624A0
l0000000000462AD4:
	x0 = x23
	call fn0000000000460C9C (retsize: 0;)
	NZCV = cond(w0 - w31)
	w2 = (word32) Test(NE,Z)
	goto l00000000004624A4
	// succ:  l00000000004624A4
l0000000000462AE8:
	x2 = Mem0[x19 + 304:word64]
	w1 = 0x00000001
	goto l0000000000462880
	// succ:  l0000000000462880
l0000000000462AF4:
	x0 = Mem0[x19 + 232:word64]
	x20 = 0x00000000004AE000
	goto l0000000000462478
	// succ:  l0000000000462478
l0000000000462B00:
	x0 = Mem0[x1 + 232:word64]
	goto l00000000004625D0
	// succ:  l00000000004625D0
l0000000000462C1C:
	v67 = sp + 16
	x19 = Mem0[v67:word64]
	v67 = v67 + 8
	x20 = Mem0[v67:word64]
	v68 = sp + 32
	x21 = Mem0[v68:word64]
	v68 = v68 + 8
	x22 = Mem0[v68:word64]
	v69 = sp + 48
	x23 = Mem0[v69:word64]
	v69 = v69 + 8
	x24 = Mem0[v69:word64]
	v70 = sp + 64
	x25 = Mem0[v70:word64]
	v70 = v70 + 8
	x26 = Mem0[v70:word64]
	v71 = sp + 80
	x27 = Mem0[v71:word64]
	v71 = v71 + 8
	x28 = Mem0[v71:word64]
	x29 = Mem0[sp:word64]
	sp = sp + 8
	x30 = Mem0[sp:word64]
	sp = sp + 128
	strcpy(x0, x1)
	return
	// succ:  command_word_completion_function_exit
l0000000000462DA4:
	x0 = x19
	call fn0000000000460048 (retsize: 0;)
	Mem0[x21 + 224:word64] = x0
	x0 = Mem0[x21 + 232:word64]
	x1 = x20 + 0xFFFFFFFFFFFFF910
	w2 = 0x00000636
	call sh_xfree (retsize: 0;)
	x19 = Mem0[x21 + 224:word64]
	Mem0[x21 + 232:word64] = x19
	goto l0000000000462558
	// succ:  l0000000000462558
l0000000000462DCC:
	call dot_or_dotdot (retsize: 0;)
	x2 = Mem0[x19 + 304:word64]
	w1 = Mem0[x19 + 312:word32]
	branch w0 == 0x00000000 l0000000000462874
	// succ:  l0000000000462DDC l0000000000462874
l0000000000462DDC:
	x3 = 0x0000000000463000
	x0 = 0x00000000004E1000
	x3 = x3 + 0x000000000000000C
	Mem0[x0 + 3936:word64] = x3
	x0 = 0x00000000004E1000
	Mem0[x0 + 3944:word64] = 0x0000000000000000
	w0 = 0x00000001
	Mem0[x19 + 92:word32] = w0
	goto l0000000000462874
	// succ:  l0000000000462874
l0000000000462E18:
	v34 = Mem0[x0 + 1:byte]
	w2 = (word32) v34
	w31 = w2 - 0x0000006E
	NZCV = cond(w31)
	branch Test(NE,Z) l00000000004624CC
	// succ:  l0000000000462E24 l00000000004624CC
l0000000000462E24:
	v35 = Mem0[x0 + 2:byte]
	w0 = (word32) v35
	NZCV = cond(w0 - w1)
	w1 = (word32) Test(EQ,Z)
	goto l00000000004624CC
	// succ:  l00000000004624CC
l0000000000462E34:
	w1 = 0x00000000
	x0 = x23
	call bash_tilde_expand (retsize: 0;)
	x19 = x22 + 0x0000000000000438
	Mem0[x19 + 232:word64] = x0
	x0 = x23
	strlen(x0)
	sp = sp + 0xFFFFFFFFFFFFFFF8
	x24 = x20 + 0xFFFFFFFFFFFFF910
	w2 = 0x00000620
	x1 = x24
	x0 = x0 + 0x0000000000000001
	call sh_xmalloc (retsize: 0;)
	x1 = x23
	strcpy(x0, x1)
	sp = sp + 0xFFFFFFFFFFFFFFF8
	w1 = 0x0000002F
	x25 = x0
	Mem0[x19 + 288:word64] = x0
	strchr(x0, x1)
	sp = sp + 0xFFFFFFFFFFFFFFF8
	x21 = x0
	branch x0 == 0x0000000000000000 l0000000000462FD8
	// succ:  l0000000000462E84 l0000000000462FD8
l0000000000462E84:
	Mem0[x0:byte] = 0x00
	x19 = Mem0[x19 + 232:word64]
	goto l0000000000462538
	// succ:  l0000000000462538
l0000000000462E90:
	x0 = 0x00000000004E1000
	Mem0[x0 + 2560:word32] = 0x00000000
	v36 = sp + 16
	x19 = Mem0[v36:word64]
	v36 = v36 + 8
	x20 = Mem0[v36:word64]
	x0 = 0x0000000000000000
	v37 = sp + 32
	x21 = Mem0[v37:word64]
	v37 = v37 + 8
	x22 = Mem0[v37:word64]
	v38 = sp + 48
	x23 = Mem0[v38:word64]
	v38 = v38 + 8
	x24 = Mem0[v38:word64]
	v39 = sp + 64
	x25 = Mem0[v39:word64]
	v39 = v39 + 8
	x26 = Mem0[v39:word64]
	v40 = sp + 80
	x27 = Mem0[v40:word64]
	v40 = v40 + 8
	x28 = Mem0[v40:word64]
	x29 = Mem0[sp:word64]
	sp = sp + 8
	x30 = Mem0[sp:word64]
	sp = sp + 128
	return
	// succ:  command_word_completion_function_exit
l0000000000462EE8:
	x0 = x23
	Mem0[x1 + 248:word32] = w2
	strlen(x0)
	sp = sp + 0xFFFFFFFFFFFFFFF8
	x1 = 0x00000000004AE000
	x1 = x1 + 0xFFFFFFFFFFFFF910
	x0 = x0 + 0x0000000000000001
	w2 = 0x000006E7
	call sh_xmalloc (retsize: 0;)
	x1 = x23
	goto l0000000000462C1C
	// succ:  l0000000000462C1C
l0000000000462F10:
	x22 = x22 + 0x0000000000000438
	Mem0[x22 + 272:word64] = 0x0000000000000000
	x0 = 0x0000000000000000
	goto l0000000000462784
	// succ:  l0000000000462784
l0000000000462F20:
	x1 = Mem0[x22 + 288:word64]
	x0 = Mem0[x22 + 256:word64]
	call fn0000000000460148 (retsize: 0;)
	x21 = x0
	x1 = 0x00000000004AE000
	x0 = Mem0[x22 + 256:word64]
	x1 = x1 + 0xFFFFFFFFFFFFF910
	w2 = 0x000006D4
	call sh_xfree (retsize: 0;)
	x0 = x21
	Mem0[x22 + 256:word64] = x21
	goto l0000000000462784
	// succ:  l0000000000462784
l0000000000462F50:
	x19 = x20 + 0xFFFFFFFFFFFFF910
	x1 = x19
	w2 = 0x000006FE
	call sh_xfree (retsize: 0;)
	x1 = x19
	x0 = 0x0000000000000002
	w2 = 0x000006FF
	call sh_xmalloc (retsize: 0;)
	x1 = 0x00000000004B2000
	x1 = x1 + 0xFFFFFFFFFFFFFD68
	v61 = Mem0[x1:word16]
	w1 = (word32) v61
	x21 = x0
	Mem0[x0:word16] = (word16) w1
l0000000000462F8C:
	v59 = Mem0[x21 + 1:byte]
	w0 = (word32) v59
	branch w0 != 0x00000000 l0000000000462820
	// succ:  l0000000000462F94 l0000000000462820
l0000000000462F94:
	x0 = x22 + 0x0000000000000438
	w1 = 0x00000001
	Mem0[x0 + 328:word32] = w1
	goto l0000000000462820
	// succ:  l0000000000462820
l0000000000462FA4:
	x0 = x21
	w1 = 0x00000000
	call bash_tilde_expand (retsize: 0;)
	x19 = x0
	x1 = x20 + 0xFFFFFFFFFFFFF910
	x0 = x21
	w2 = 0x00000707
	call sh_xfree (retsize: 0;)
	v60 = Mem0[x19:byte]
	w1 = (word32) v60
	x21 = x19
	goto l0000000000462818
	// succ:  l0000000000462818
l0000000000462FD0:
	w1 = 0x00000001
	goto l000000000046271C
	// succ:  l000000000046271C
l0000000000462FD8:
	x0 = x25
	x1 = x24
	w2 = 0x00000626
	call sh_xfree (retsize: 0;)
	Mem0[x19 + 288:word64] = x21
	x19 = Mem0[x19 + 232:word64]
	goto l0000000000462538
	// succ:  l0000000000462538
l0000000000462FF4:
	x0 = x24
	call fn0000000000460048 (retsize: 0;)
	Mem0[x19 + 224:word64] = x0
	strlen(x0)
	sp = sp + 0xFFFFFFFFFFFFFFF8
	Mem0[x19 + 300:word32] = w0
	goto l0000000000462684
	// succ:  l0000000000462684
command_word_completion_function_exit:


// fn0000000000463488
// Return size: 0
void fn0000000000463488()
fn0000000000463488_entry:
	// succ:  l0000000000463488
l0000000000463488:
	sp = fp
	sp = sp + -32
	Mem0[sp:word64] = x29
	sp = sp + 8
	Mem0[sp:word64] = x30
	x29 = x31 + 0x0000000000000000
	v8 = sp + 16
	Mem0[v8:word64] = x19
	v8 = v8 + 8
	Mem0[v8:word64] = x20
fn0000000000463488_exit:


// posix_readline_initialize
// Return size: 0
void posix_readline_initialize()
posix_readline_initialize_entry:
	// succ:  l00000000004646B8
l00000000004646B8:
	sp = fp
	sp = sp + -16
	Mem0[sp:word64] = x29
	sp = sp + 8
	Mem0[sp:word64] = x30
	x29 = x31 + 0x0000000000000000
	branch w0 != 0x00000000 l00000000004646E0
	// succ:  l00000000004646C4 l00000000004646E0
l00000000004646C4:
	x1 = 0x0000000000493000
	x2 = 0x00000000004D9000
	x29 = Mem0[sp:word64]
	sp = sp + 8
	x30 = Mem0[sp:word64]
	sp = sp + 16
	x1 = x1 + 0xFFFFFFFFFFFFFB64
	w0 = 0x00000009
	x2 = x2 + 0x0000000000000500
	// succ:  l00000000004646DC_thunk_rl_bind_key_in_map
l00000000004646DC_thunk_rl_bind_key_in_map:
	call rl_bind_key_in_map (retsize: 0;)
	return
	// succ:  posix_readline_initialize_exit
l00000000004646E0:
	x0 = 0x00000000004AE000
	x1 = 0x00000000004AE000
	x1 = x1 + 0xFFFFFFFFFFFFFB60
	x0 = x0 + 0xFFFFFFFFFFFFFB50
	call rl_variable_bind (retsize: 0;)
	x1 = 0x00000000004A2000
	x2 = 0x00000000004D9000
	x29 = Mem0[sp:word64]
	sp = sp + 8
	x30 = Mem0[sp:word64]
	sp = sp + 16
	x1 = x1 + 0xFFFFFFFFFFFFFD50
	w0 = 0x00000009
	x2 = x2 + 0x0000000000000500
	// succ:  l000000000046470C_thunk_rl_bind_key_in_map
l000000000046470C_thunk_rl_bind_key_in_map:
	call rl_bind_key_in_map (retsize: 0;)
	return
	// succ:  posix_readline_initialize_exit
posix_readline_initialize_exit:


// reset_completer_word_break_chars
// Return size: 0
void reset_completer_word_break_chars()
reset_completer_word_break_chars_entry:
	// succ:  l0000000000464710
l0000000000464710:
	sp = fp
	sp = sp + -16
	Mem0[sp:word64] = x29
	sp = sp + 8
	Mem0[sp:word64] = x30
	x29 = x31 + 0x0000000000000000
	x0 = 0x00000000004D7000
	x0 = x0 + 0x00000000000001B8
	w0 = Mem0[x0 + 48:word32]
	branch w0 != 0x00000000 l000000000046476C
	// succ:  l0000000000464728 l000000000046476C
l0000000000464728:
	x1 = 0x00000000004AE000
	x1 = x1 + 0xFFFFFFFFFFFFF910
	w2 = 0x00000128
	x0 = 0x000000000000000E
	call sh_xmalloc (retsize: 0;)
	x1 = 0x00000000004AE000
	x1 = x1 + 0xFFFFFFFFFFFFFB78
	x3 = Mem0[x1:word64]
	w2 = Mem0[x1 + 8:word32]
	v12 = Mem0[x1 + 12:word16]
	w1 = (word32) v12
	Mem0[x0:word64] = x3
	Mem0[x0 + 12:word16] = (word16) w1
	Mem0[x0 + 8:word32] = w2
	x1 = 0x00000000004E1000
	Mem0[x1 + 4016:word64] = x0
	x29 = Mem0[sp:word64]
	sp = sp + 8
	x30 = Mem0[sp:word64]
	sp = sp + 16
	return
	// succ:  reset_completer_word_break_chars_exit
l000000000046476C:
	x1 = 0x00000000004AE000
	x1 = x1 + 0xFFFFFFFFFFFFF910
	w2 = 0x00000128
	x0 = 0x000000000000000F
	call sh_xmalloc (retsize: 0;)
	x1 = 0x00000000004AE000
	x1 = x1 + 0xFFFFFFFFFFFFFB68
	x4 = Mem0[x1:word64]
	w3 = Mem0[x1 + 8:word32]
	v15 = Mem0[x1 + 12:word16]
	w2 = (word32) v15
	v16 = Mem0[x1 + 14:byte]
	w1 = (word32) v16
	Mem0[x0:word64] = x4
	Mem0[x0 + 14:byte] = (byte) w1
	Mem0[x0 + 8:word32] = w3
	Mem0[x0 + 12:word16] = (word16) w2
	x1 = 0x00000000004E1000
	Mem0[x1 + 4016:word64] = x0
	x29 = Mem0[sp:word64]
	sp = sp + 8
	x30 = Mem0[sp:word64]
	sp = sp + 16
	return
	// succ:  reset_completer_word_break_chars_exit
reset_completer_word_break_chars_exit:


// enable_hostname_completion
// Return size: 0
void enable_hostname_completion()
enable_hostname_completion_entry:
	// succ:  l00000000004647B8
l00000000004647B8:
	sp = fp
	sp = sp + -64
	Mem0[sp:word64] = x29
	sp = sp + 8
	Mem0[sp:word64] = x30
	x29 = x31 + 0x0000000000000000
	x1 = 0x00000000004D7000
	v9 = sp + 16
	Mem0[v9:word64] = x19
	v9 = v9 + 8
	Mem0[v9:word64] = x20
	v12 = sp + 32
	Mem0[v12:word64] = x21
	v12 = v12 + 8
	Mem0[v12:word64] = x22
	x1 = x1 + 0x00000000000001B8
	Mem0[sp + 48:word64] = x23
enable_hostname_completion_exit:


// initialize_readline
// Return size: 0
void initialize_readline()
initialize_readline_entry:
	// succ:  l00000000004649A4
l00000000004649A4:
	sp = fp
	sp = sp + -128
	Mem0[sp:word64] = x29
	sp = sp + 8
	Mem0[sp:word64] = x30
	x29 = x31 + 0x0000000000000000
	v8 = sp + 16
	Mem0[v8:word64] = x19
	v8 = v8 + 8
	Mem0[v8:word64] = x20
	x19 = 0x00000000004E1000
	x0 = x19 + 0x0000000000000438
	w0 = Mem0[x0 + 384:word32]
	v13 = sp + 32
	Mem0[v13:word64] = x21
	v13 = v13 + 8
	Mem0[v13:word64] = x22
	v16 = sp + 48
	Mem0[v16:word64] = x23
	v16 = v16 + 8
	Mem0[v16:word64] = x24
	v19 = sp + 64
	Mem0[v19:word64] = x25
	v19 = v19 + 8
	Mem0[v19:word64] = x26
	v22 = sp + 80
	Mem0[v22:word64] = x27
	v22 = v22 + 8
	Mem0[v22:word64] = x28
	branch w0 == 0x00000000 l00000000004649EC
	// succ:  l00000000004649D0 l00000000004649EC
l00000000004649D0:
	v23 = sp + 16
	x19 = Mem0[v23:word64]
	v23 = v23 + 8
	x20 = Mem0[v23:word64]
	v24 = sp + 32
	x21 = Mem0[v24:word64]
	v24 = v24 + 8
	x22 = Mem0[v24:word64]
	v25 = sp + 48
	x23 = Mem0[v25:word64]
	v25 = v25 + 8
	x24 = Mem0[v25:word64]
	v26 = sp + 64
	x25 = Mem0[v26:word64]
	v26 = v26 + 8
	x26 = Mem0[v26:word64]
	v27 = sp + 80
	x27 = Mem0[v27:word64]
	v27 = v27 + 8
	x28 = Mem0[v27:word64]
	x29 = Mem0[sp:word64]
	sp = sp + 8
	x30 = Mem0[sp:word64]
	sp = sp + 128
	return
	// succ:  initialize_readline_exit
l00000000004649EC:
	x0 = 0x00000000004AA000
	x0 = x0 + 0x0000000000000310
	call get_string_value (retsize: 0;)
	x1 = 0x00000000004DE000
	x6 = Mem0[x1 + 1664:word64]
	x1 = 0x00000000004DE000
	x5 = Mem0[x1 + 1640:word64]
	x4 = 0x00000000004E1000
	Mem0[x4 + 3192:word64] = x6
	x1 = 0x00000000004E1000
	x4 = 0x00000000004E1000
	x3 = 0x0000000000463000
	Mem0[x1 + 3304:word64] = x0
	Mem0[x4 + 3200:word64] = x5
	x0 = 0x00000000004AE000
	x5 = 0x00000000004AE000
	x1 = x3 + 0x00000000000007C4
	x5 = x5 + 0xFFFFFFFFFFFFFB98
	x4 = 0x00000000004DE000
	w2 = 0xFFFFFFFF
	x0 = x0 + 0xFFFFFFFFFFFFFBA0
	Mem0[x29 + 112:word64] = x3
	Mem0[x4 + 1448:word64] = x5
	call rl_add_defun (retsize: 0;)
	x0 = 0x0000000000463000
	x1 = x0 + 0xFFFFFFFFFFFFFD44
	x0 = 0x00000000004AE000
	w2 = 0xFFFFFFFF
	x0 = x0 + 0xFFFFFFFFFFFFFBB8
	call rl_add_defun (retsize: 0;)
	x1 = 0x0000000000463000
	x0 = 0x00000000004AE000
	x1 = x1 + 0xFFFFFFFFFFFFFD7C
	w2 = 0xFFFFFFFF
	x0 = x0 + 0xFFFFFFFFFFFFFBD0
	call rl_add_defun (retsize: 0;)
	x1 = 0x0000000000464000
	x0 = 0x00000000004AE000
	x1 = x1 + 0x0000000000000064
	w2 = 0xFFFFFFFF
	x0 = x0 + 0xFFFFFFFFFFFFFBE0
	call rl_add_defun (retsize: 0;)
	x1 = 0x0000000000463000
	x0 = 0x00000000004AE000
	x1 = x1 + 0xFFFFFFFFFFFFFE08
	w2 = 0xFFFFFFFF
	x0 = x0 + 0xFFFFFFFFFFFFFBF8
	call rl_add_defun (retsize: 0;)
	x1 = 0x0000000000464000
	x0 = 0x00000000004AE000
	x1 = x1 + 0x00000000000005E0
	w2 = 0xFFFFFFFF
	x0 = x0 + 0xFFFFFFFFFFFFFC10
	call rl_add_defun (retsize: 0;)
	x1 = 0x0000000000464000
	x0 = 0x00000000004AE000
	x1 = x1 + 0x000000000000064C
	w2 = 0xFFFFFFFF
	x0 = x0 + 0xFFFFFFFFFFFFFC20
	call rl_add_defun (retsize: 0;)
	x1 = 0x0000000000463000
	x0 = 0x00000000004AE000
	x1 = x1 + 0xFFFFFFFFFFFFFD0C
	w2 = 0xFFFFFFFF
	x0 = x0 + 0xFFFFFFFFFFFFFC40
	call rl_add_defun (retsize: 0;)
	x1 = 0x0000000000463000
	x0 = 0x00000000004AE000
	x1 = x1 + 0xFFFFFFFFFFFFFCA0
	w2 = 0xFFFFFFFF
	x0 = x0 + 0xFFFFFFFFFFFFFC58
	call rl_add_defun (retsize: 0;)
	x1 = 0x000000000049E000
	x0 = 0x00000000004AE000
	x1 = x1 + 0xFFFFFFFFFFFFF8C0
	w2 = 0xFFFFFFFF
	x0 = x0 + 0xFFFFFFFFFFFFFC78
	call rl_add_defun (retsize: 0;)
	x22 = 0x0000000000462000
	x0 = 0x00000000004AE000
	x1 = x22 + 0x000000000000024C
	w2 = 0xFFFFFFFF
	x0 = x0 + 0xFFFFFFFFFFFFFC90
	call rl_add_defun (retsize: 0;)
	x2 = 0x0000000000462000
	x0 = 0x00000000004AE000
	x1 = x2 + 0x0000000000000204
	x0 = x0 + 0xFFFFFFFFFFFFFCA8
	w2 = 0xFFFFFFFF
	call rl_add_defun (retsize: 0;)
	x0 = 0x0000000000460000
	x1 = x0 + 0xFFFFFFFFFFFFF850
	x0 = 0x00000000004AE000
	w2 = 0xFFFFFFFF
	x0 = x0 + 0xFFFFFFFFFFFFFCC0
	call rl_add_defun (retsize: 0;)
	x2 = 0x000000000045F000
	x0 = 0x00000000004AE000
	x1 = x2 + 0x0000000000000234
	x0 = x0 + 0xFFFFFFFFFFFFFCE0
	w2 = 0xFFFFFFFF
	call rl_add_defun (retsize: 0;)
	x0 = 0x0000000000461000
	x1 = x0 + 0xFFFFFFFFFFFFF9FC
	x0 = 0x00000000004AE000
	w2 = 0xFFFFFFFF
	x0 = x0 + 0xFFFFFFFFFFFFFCF8
	call rl_add_defun (retsize: 0;)
	x2 = 0x0000000000461000
	x0 = 0x00000000004AE000
	x1 = x2 + 0x00000000000005A4
	x0 = x0 + 0xFFFFFFFFFFFFFD10
	w2 = 0xFFFFFFFF
	call rl_add_defun (retsize: 0;)
	x0 = 0x0000000000461000
	x1 = x0 + 0xFFFFFFFFFFFFF9D8
	x0 = 0x00000000004AE000
	w2 = 0xFFFFFFFF
	x0 = x0 + 0xFFFFFFFFFFFFFD30
	call rl_add_defun (retsize: 0;)
	x23 = 0x0000000000461000
	x0 = 0x00000000004AE000
	x1 = x23 + 0x000000000000049C
	w2 = 0xFFFFFFFF
	x0 = x0 + 0xFFFFFFFFFFFFFD48
	call rl_add_defun (retsize: 0;)
	x2 = 0x0000000000461000
	x0 = 0x00000000004AE000
	x1 = x2 + 0xFFFFFFFFFFFFF9B4
	x0 = x0 + 0xFFFFFFFFFFFFFD68
	w2 = 0xFFFFFFFF
	call rl_add_defun (retsize: 0;)
	x28 = 0x0000000000461000
	x0 = 0x00000000004AE000
	x1 = x28 + 0x000000000000048C
	w2 = 0xFFFFFFFF
	x0 = x0 + 0xFFFFFFFFFFFFFD80
	call rl_add_defun (retsize: 0;)
	x27 = 0x0000000000461000
	x0 = 0x00000000004AE000
	x1 = x27 + 0xFFFFFFFFFFFFF990
	w2 = 0xFFFFFFFF
	x0 = x0 + 0xFFFFFFFFFFFFFDA0
	call rl_add_defun (retsize: 0;)
	x26 = 0x0000000000461000
	x0 = 0x00000000004AE000
	x1 = x26 + 0x000000000000047C
	w2 = 0xFFFFFFFF
	x0 = x0 + 0xFFFFFFFFFFFFFDB8
	call rl_add_defun (retsize: 0;)
	x25 = 0x0000000000461000
	x0 = 0x00000000004AE000
	x1 = x25 + 0xFFFFFFFFFFFFF96C
	w2 = 0xFFFFFFFF
	x0 = x0 + 0xFFFFFFFFFFFFFDD8
	call rl_add_defun (retsize: 0;)
	x24 = 0x0000000000461000
	x0 = 0x00000000004AE000
	x1 = x24 + 0x000000000000046C
	w2 = 0xFFFFFFFF
	x0 = x0 + 0xFFFFFFFFFFFFFDF0
	call rl_add_defun (retsize: 0;)
	x0 = 0x0000000000461000
	x1 = x0 + 0x0000000000000784
	x0 = 0x00000000004AE000
	w2 = 0xFFFFFFFF
	x0 = x0 + 0xFFFFFFFFFFFFFE10
	call rl_add_defun (retsize: 0;)
	x2 = 0x0000000000461000
	x0 = 0x00000000004AE000
	x1 = x2 + 0x000000000000045C
	x0 = x0 + 0xFFFFFFFFFFFFFE28
	w2 = 0xFFFFFFFF
	call rl_add_defun (retsize: 0;)
	x0 = 0x0000000000461000
	x1 = x0 + 0x000000000000044C
	x0 = 0x00000000004AE000
	w2 = 0xFFFFFFFF
	x0 = x0 + 0xFFFFFFFFFFFFFE40
	call rl_add_defun (retsize: 0;)
	x2 = 0x0000000000461000
	x0 = 0x00000000004AE000
	x1 = x2 + 0x0000000000000344
	x0 = x0 + 0xFFFFFFFFFFFFFE58
	w2 = 0xFFFFFFFF
	call rl_add_defun (retsize: 0;)
	x0 = 0x00000000004AE000
	x1 = 0x0000000000460000
	x0 = x0 + 0xFFFFFFFFFFFFFE78
	x1 = x1 + 0xFFFFFFFFFFFFFFF0
	w2 = 0xFFFFFFFF
	call rl_add_defun (retsize: 0;)
	x0 = 0x00000000004E1000
	w0 = Mem0[x0 + 3168:word32]
	x3 = Mem0[x29 + 112:word64]
	branch (w0 & 0x00000002) == 0x00000000 l0000000000465088
	// succ:  l0000000000464CFC l0000000000465088
l0000000000464CFC:
	x20 = 0x00000000004DC000
	x21 = x20 + 0x0000000000000530
	x1 = x3 + 0x00000000000007C4
	x2 = x21
	w0 = 0x00000005
	call rl_bind_key_if_unbound_in_map (retsize: 0;)
	x2 = 0x0000000000463000
	x1 = x2 + 0xFFFFFFFFFFFFFD44
	w0 = 0x0000005E
	x2 = x21
	call rl_bind_key_if_unbound_in_map (retsize: 0;)
	x2 = 0x00000000004DD000
	x1 = x22 + 0x000000000000024C
	x2 = x2 + 0x0000000000000540
	w0 = 0x0000000F
	call rl_bind_key_if_unbound_in_map (retsize: 0;)
	x3 = 0x0000000000462000
	x22 = 0x00000000004DB000
	x1 = x3 + 0x0000000000000204
	x2 = x22 + 0x0000000000000520
	w0 = 0x00000016
	call rl_bind_key_if_unbound_in_map (retsize: 0;)
	x1 = x21
	x2 = 0x0000000000000000
	w3 = 0x0000000A
	x0 = x29 + 0x0000000000000060
	Mem0[x29 + 96:byte] = (byte) w3
	Mem0[x29 + 97:byte] = 0x00
	call rl_function_of_keyseq (retsize: 0;)
	x2 = 0x00000000004A4000
	x1 = x2 + 0x00000000000003E8
	x31 = x1 - x0
	NZCV = cond(x31)
	branch Test(EQ,Z) l00000000004650C4
	// succ:  l0000000000464D80 l00000000004650C4
l0000000000464D80:
	x21 = x20 + 0x0000000000000530
	w3 = 0x0000000D
	x1 = x21
	x0 = x29 + 0x0000000000000060
	x2 = 0x0000000000000000
	Mem0[x29 + 96:byte] = (byte) w3
	call rl_function_of_keyseq (retsize: 0;)
	x3 = 0x00000000004A4000
	x1 = x3 + 0x00000000000003E8
	x31 = x1 - x0
	NZCV = cond(x31)
	branch Test(EQ,Z) l00000000004650D4
	// succ:  l0000000000464DAC l00000000004650D4
l0000000000464DAC:
	x0 = 0x00000000004DA000
	x1 = x0 + 0x0000000000000510
	w0 = 0x00000005
	call rl_unbind_key_in_map (retsize: 0;)
	x3 = x20 + 0x0000000000000530
	x2 = 0x000000000045F000
	x1 = x2 + 0x0000000000000234
	w0 = 0x0000007B
	x2 = x3
	x21 = x3
	call rl_bind_key_if_unbound_in_map (retsize: 0;)
	x3 = 0x0000000000461000
	x1 = x3 + 0xFFFFFFFFFFFFF9FC
	x2 = x21
	w0 = 0x0000002F
	call rl_bind_key_if_unbound_in_map (retsize: 0;)
	x0 = 0x0000000000461000
	x1 = x0 + 0x00000000000005A4
	x2 = x22 + 0x0000000000000520
	w0 = 0x0000002F
	call rl_bind_key_if_unbound_in_map (retsize: 0;)
	w3 = 0x0000007E
	x0 = x29 + 0x0000000000000060
	x1 = x21
	x2 = 0x0000000000000000
	Mem0[x29 + 96:byte] = (byte) w3
	Mem0[x29 + 97:byte] = 0x00
	call rl_function_of_keyseq (retsize: 0;)
	branch x0 == 0x0000000000000000 l00000000004650AC
	// succ:  l0000000000464E20 l00000000004650AC
l0000000000464E20:
	x1 = 0x000000000049D000
	x1 = x1 + 0xFFFFFFFFFFFFFCE0
	x31 = x0 - x1
	NZCV = cond(x31)
	branch Test(EQ,Z) l00000000004650AC
	// succ:  l0000000000464E30 l00000000004650AC
l0000000000464E30:
	x0 = x22 + 0x0000000000000520
	x1 = x23 + 0x000000000000049C
	x2 = x0
	x23 = x0
	w0 = 0x0000007E
	call rl_bind_key_if_unbound_in_map (retsize: 0;)
	x3 = 0x0000000000461000
	x21 = x20 + 0x0000000000000530
	x1 = x3 + 0xFFFFFFFFFFFFF9B4
	x2 = x21
	w0 = 0x00000040
	call rl_bind_key_if_unbound_in_map (retsize: 0;)
	x1 = x28 + 0x000000000000048C
	x2 = x23
	w0 = 0x00000040
	call rl_bind_key_if_unbound_in_map (retsize: 0;)
	x1 = x27 + 0xFFFFFFFFFFFFF990
	x2 = x21
	w0 = 0x00000024
	call rl_bind_key_if_unbound_in_map (retsize: 0;)
	x1 = x26 + 0x000000000000047C
	x2 = x23
	w0 = 0x00000024
	call rl_bind_key_if_unbound_in_map (retsize: 0;)
	x1 = x25 + 0xFFFFFFFFFFFFF96C
	x2 = x21
	w0 = 0x00000021
	call rl_bind_key_if_unbound_in_map (retsize: 0;)
	x1 = x24 + 0x000000000000046C
	x2 = x23
	w0 = 0x00000021
	call rl_bind_key_if_unbound_in_map (retsize: 0;)
	x0 = 0x0000000000461000
	x1 = x0 + 0x0000000000000784
	x2 = x21
	w0 = 0x00000067
	call rl_bind_key_if_unbound_in_map (retsize: 0;)
	x2 = 0x0000000000461000
	x1 = x2 + 0x000000000000045C
	w0 = 0x0000002A
	x2 = x23
	call rl_bind_key_if_unbound_in_map (retsize: 0;)
	x3 = 0x0000000000461000
	x1 = x3 + 0x000000000000044C
	x2 = x23
	w0 = 0x00000067
	call rl_bind_key_if_unbound_in_map (retsize: 0;)
	w3 = 0x00000009
	x0 = x29 + 0x0000000000000060
	x1 = x21
	x2 = 0x0000000000000000
	Mem0[x29 + 96:byte] = (byte) w3
	Mem0[x29 + 97:byte] = 0x00
	call rl_function_of_keyseq (retsize: 0;)
	branch x0 == 0x0000000000000000 l0000000000465094
	// succ:  l0000000000464F0C l0000000000465094
l0000000000464F0C:
	x1 = 0x00000000004A2000
	x1 = x1 + 0xFFFFFFFFFFFFF924
	x31 = x0 - x1
	NZCV = cond(x31)
	branch Test(EQ,Z) l0000000000465094
	// succ:  l0000000000464F1C l0000000000465094
l0000000000464F1C:
	x0 = x19 + 0x0000000000000438
	x2 = 0x0000000000465000
	x1 = 0x00000000004E1000
	x2 = x2 + 0x0000000000000588
	w0 = Mem0[x0 + 92:word32]
	Mem0[x1 + 4064:word64] = x2
	x1 = 0x0000000000463000
	x1 = x1 + 0x000000000000000C
	branch w0 != 0x00000000 l0000000000465074
	// succ:  l0000000000464F40 l0000000000465074
l0000000000464F40:
	x0 = 0x00000000004E1000
	Mem0[x0 + 3936:word64] = x1
	x0 = 0x00000000004E1000
	Mem0[x0 + 3944:word64] = 0x0000000000000000
	// succ:  l0000000000464F50
l0000000000464F50:
	x3 = 0x0000000000460000
	x1 = x3 + 0xFFFFFFFFFFFFF850
	x4 = 0x0000000000460000
	x3 = 0x00000000004DA000
	x21 = x3 + 0x0000000000000510
	x4 = x4 + 0xFFFFFFFFFFFFFC44
	x3 = 0x00000000004E1000
	Mem0[x3 + 3960:word64] = x4
	x4 = 0x0000000000460000
	x4 = x4 + 0xFFFFFFFFFFFFFBBC
	x3 = 0x00000000004E1000
	x2 = x22 + 0x0000000000000520
	w0 = 0x00000005
	Mem0[x3 + 3984:word64] = x4
	call rl_bind_key_if_unbound_in_map (retsize: 0;)
	x1 = 0x0000000000463000
	x2 = x21
	x1 = x1 + 0x00000000000005F4
	w0 = 0x00000076
	call rl_bind_key_if_unbound_in_map (retsize: 0;)
	x1 = 0x0000000000460000
	x2 = x21
	x1 = x1 + 0x00000000000005F8
	w0 = 0x00000040
	x20 = 0x0000000000461000
	call rl_bind_key_if_unbound_in_map (retsize: 0;)
	x20 = x20 + 0x00000000000007E4
	x1 = x20
	x2 = x21
	w0 = 0x0000005C
	call rl_bind_key_in_map (retsize: 0;)
	x1 = x20
	x2 = x21
	w0 = 0x0000002A
	call rl_bind_key_in_map (retsize: 0;)
	x1 = x20
	x2 = x21
	w0 = 0x0000003D
	call rl_bind_key_in_map (retsize: 0;)
	x0 = 0x00000000004D7000
	x0 = x0 + 0x00000000000001B8
	w0 = Mem0[x0 + 48:word32]
	x2 = 0x00000000004AE000
	x2 = x2 + 0xFFFFFFFFFFFFFE88
	x1 = 0x00000000004E1000
	Mem0[x1 + 3856:word64] = x2
	call enable_hostname_completion (retsize: 0;)
	x1 = 0x00000000004AE000
	x1 = x1 + 0xFFFFFFFFFFFFFA00
	x0 = 0x00000000004E1000
	Mem0[x0 + 3872:word64] = x1
	x1 = 0x0000000000460000
	x1 = x1 + 0x00000000000002E0
	x0 = 0x00000000004DE000
	Mem0[x0 + 1384:word64] = x1
	x1 = 0x0000000000460000
	x1 = x1 + 0x0000000000000048
	x0 = 0x00000000004E1000
	Mem0[x0 + 3928:word64] = x1
	x1 = 0x0000000000448000
	x1 = x1 + 0x00000000000001E4
	x0 = 0x00000000004E1000
	x19 = x19 + 0x0000000000000438
	Mem0[x0 + 4024:word64] = x1
	w0 = 0x00000001
	Mem0[x19 + 384:word32] = w0
	v38 = sp + 32
	x21 = Mem0[v38:word64]
	v38 = v38 + 8
	x22 = Mem0[v38:word64]
	v39 = sp + 16
	x19 = Mem0[v39:word64]
	v39 = v39 + 8
	x20 = Mem0[v39:word64]
	v40 = sp + 48
	x23 = Mem0[v40:word64]
	v40 = v40 + 8
	x24 = Mem0[v40:word64]
	v41 = sp + 64
	x25 = Mem0[v41:word64]
	v41 = v41 + 8
	x26 = Mem0[v41:word64]
	v42 = sp + 80
	x27 = Mem0[v42:word64]
	v42 = v42 + 8
	x28 = Mem0[v42:word64]
	x29 = Mem0[sp:word64]
	sp = sp + 8
	x30 = Mem0[sp:word64]
	sp = sp + 128
	return
	// succ:  initialize_readline_exit
l0000000000465074:
	x0 = 0x00000000004E1000
	Mem0[x0 + 3944:word64] = x1
	x0 = 0x00000000004E1000
	Mem0[x0 + 3936:word64] = 0x0000000000000000
	goto l0000000000464F50
	// succ:  l0000000000464F50
l0000000000465088:
	call rl_initialize (retsize: 0;)
	x3 = Mem0[x29 + 112:word64]
	goto l0000000000464CFC
	// succ:  l0000000000464CFC
l0000000000465094:
	x2 = 0x0000000000461000
	x1 = x2 + 0x0000000000000344
	w0 = 0x00000009
	x2 = x20 + 0x0000000000000530
	call rl_bind_key_in_map (retsize: 0;)
	goto l0000000000464F1C
	// succ:  l0000000000464F1C
l00000000004650AC:
	x2 = 0x0000000000461000
	x1 = x2 + 0xFFFFFFFFFFFFF9D8
	x0 = x29 + 0x0000000000000060
	x2 = x20 + 0x0000000000000530
	call rl_bind_keyseq_in_map (retsize: 0;)
	goto l0000000000464E30
	// succ:  l0000000000464E30
l00000000004650C4:
	x1 = x21
	w0 = 0x0000000A
	call rl_unbind_key_in_map (retsize: 0;)
	goto l0000000000464D80
	// succ:  l0000000000464D80
l00000000004650D4:
	x1 = x21
	w0 = 0x0000000D
	call rl_unbind_key_in_map (retsize: 0;)
	goto l0000000000464DAC
	// succ:  l0000000000464DAC
initialize_readline_exit:


// bashline_reinitialize
// Return size: 0
void bashline_reinitialize()
bashline_reinitialize_entry:
	// succ:  l00000000004650E4
l00000000004650E4:
	sp = fp
	x0 = 0x00000000004E1000
	x0 = x0 + 0x0000000000000438
	Mem0[x0 + 384:word32] = 0x00000000
	return
	// succ:  bashline_reinitialize_exit
bashline_reinitialize_exit:


// bashline_reset
// Return size: 0
void bashline_reset()
bashline_reset_entry:
	// succ:  l00000000004650F4
l00000000004650F4:
	sp = fp
	sp = sp + -16
	Mem0[sp:word64] = x29
	sp = sp + 8
	Mem0[sp:word64] = x30
	x29 = x31 + 0x0000000000000000
	call tilde_initialize (retsize: 0;)
	x2 = 0x0000000000465000
	x2 = x2 + 0x0000000000000588
	x1 = 0x00000000004E1000
	Mem0[x1 + 4064:word64] = x2
	x1 = 0x00000000004E1000
	x2 = 0x0000000000460000
	x2 = x2 + 0xFFFFFFFFFFFFFBBC
	x0 = 0x00000000004E1000
	Mem0[x1 + 4088:word64] = 0x0000000000000000
	x1 = 0x00000000004E1000
	Mem0[x1 + 3984:word64] = x2
	x0 = x0 + 0x0000000000000438
	x2 = 0x00000000004AE000
	x1 = 0x00000000004E1000
	x2 = x2 + 0xFFFFFFFFFFFFFA00
	w0 = Mem0[x0 + 92:word32]
	Mem0[x1 + 3872:word64] = x2
	x1 = 0x0000000000463000
	x1 = x1 + 0x000000000000000C
	branch w0 != 0x00000000 l0000000000465168
	// succ:  l0000000000465150 l0000000000465168
l0000000000465150:
	x0 = 0x00000000004E1000
	Mem0[x0 + 3936:word64] = x1
	x0 = 0x00000000004E1000
	Mem0[x0 + 3944:word64] = 0x0000000000000000
	x29 = Mem0[sp:word64]
	sp = sp + 8
	x30 = Mem0[sp:word64]
	sp = sp + 16
	return
	// succ:  bashline_reset_exit
l0000000000465168:
	x0 = 0x00000000004E1000
	Mem0[x0 + 3944:word64] = x1
	x0 = 0x00000000004E1000
	Mem0[x0 + 3936:word64] = 0x0000000000000000
	x29 = Mem0[sp:word64]
	sp = sp + 8
	x30 = Mem0[sp:word64]
	sp = sp + 16
	return
	// succ:  bashline_reset_exit
bashline_reset_exit:


// bash_re_edit
// Return size: 0
void bash_re_edit()
bash_re_edit_entry:
	// succ:  l0000000000465180
l0000000000465180:
	sp = fp
	sp = sp + -48
	Mem0[sp:word64] = x29
	sp = sp + 8
	Mem0[sp:word64] = x30
	x29 = x31 + 0x0000000000000000
	v8 = sp + 16
	Mem0[v8:word64] = x19
	v8 = v8 + 8
	Mem0[v8:word64] = x20
	x19 = 0x00000000004E1000
	x1 = x19 + 0x0000000000000438
	x2 = Mem0[x1 + 216:word64]
	Mem0[sp + 32:word64] = x21
	x20 = x0
	x21 = 0x00000000004AE000
	branch x2 == 0x0000000000000000 l00000000004651B8
	// succ:  l00000000004651A8 l00000000004651B8
l00000000004651A8:
	x0 = x2
	x1 = x21 + 0xFFFFFFFFFFFFF910
	w2 = 0x0000025F
	call sh_xfree (retsize: 0;)
	// succ:  l00000000004651B8
l00000000004651B8:
	x0 = x20
	strlen(x0)
	sp = sp + 0xFFFFFFFFFFFFFFF8
	w2 = 0x00000261
	x1 = x21 + 0xFFFFFFFFFFFFF910
	x0 = x0 + 0x0000000000000001
	call sh_xmalloc (retsize: 0;)
	x1 = x20
	strcpy(x0, x1)
	sp = sp + 0xFFFFFFFFFFFFFFF8
	x1 = 0x00000000004E1000
	x19 = x19 + 0x0000000000000438
	x2 = Mem0[x1 + 3208:word64]
	Mem0[x19 + 216:word64] = x0
	x0 = 0x0000000000462000
	x0 = x0 + 0x0000000000000340
	Mem0[x19 + 208:word64] = x2
	Mem0[x1 + 3208:word64] = x0
	v14 = sp + 16
	x19 = Mem0[v14:word64]
	v14 = v14 + 8
	x20 = Mem0[v14:word64]
	w0 = 0x00000000
	x21 = Mem0[sp + 32:word64]
	x29 = Mem0[sp:word64]
	sp = sp + 8
	x30 = Mem0[sp:word64]
	sp = sp + 48
	return
	// succ:  bash_re_edit_exit
bash_re_edit_exit:


// get_hostname_list
// Return size: 0
void get_hostname_list()
get_hostname_list_entry:
	// succ:  l000000000046520C
l000000000046520C:
	sp = fp
	sp = sp + -32
	Mem0[sp:word64] = x29
	sp = sp + 8
	Mem0[sp:word64] = x30
	x29 = x31 + 0x0000000000000000
	Mem0[sp + 16:word64] = x19
	x19 = 0x00000000004E1000
	x0 = x19 + 0x0000000000000438
	w0 = Mem0[x0 + 176:word32]
	branch w0 != 0x00000000 l000000000046522C
	// succ:  l0000000000465228 l000000000046522C
l0000000000465228:
	call fn0000000000461F30 (retsize: 0;)
	// succ:  l000000000046522C
l000000000046522C:
	x19 = x19 + 0x0000000000000438
	x0 = Mem0[x19 + 168:word64]
	x19 = Mem0[sp + 16:word64]
	x29 = Mem0[sp:word64]
	sp = sp + 8
	x30 = Mem0[sp:word64]
	sp = sp + 32
	return
	// succ:  get_hostname_list_exit
get_hostname_list_exit:


// clear_hostname_list
// Return size: 0
void clear_hostname_list()
clear_hostname_list_entry:
	// succ:  l0000000000465240
l0000000000465240:
	sp = fp
	sp = sp + -64
	Mem0[sp:word64] = x29
	sp = sp + 8
	Mem0[sp:word64] = x30
	x29 = x31 + 0x0000000000000000
	Mem0[sp + 48:word64] = x23
	x23 = 0x00000000004E1000
	v9 = sp + 32
	Mem0[v9:word64] = x21
	v9 = v9 + 8
	Mem0[v9:word64] = x22
	x21 = x23 + 0x0000000000000438
	w0 = Mem0[x21 + 176:word32]
	v13 = sp + 16
	Mem0[v13:word64] = x19
	v13 = v13 + 8
	Mem0[v13:word64] = x20
	branch w0 == 0x00000000 l00000000004652B4
	// succ:  l0000000000465264 l00000000004652B4
l0000000000465264:
	w0 = Mem0[x21 + 160:word32]
	NZCV = cond(w0 - w31)
	branch Test(LE,ZCV) l00000000004652A8
	// succ:  l0000000000465270 l00000000004652A8
l0000000000465270:
	x19 = 0x0000000000000000
	x22 = 0x00000000004AE000
	w20 = w19
	x22 = x22 + 0xFFFFFFFFFFFFF910
	// succ:  l0000000000465280
l0000000000465280:
	x0 = Mem0[x21 + 168:word64]
	x1 = x22
	x0 = Mem0[x0 + x19:word64]
	w2 = 0x00000302
	call sh_xfree (retsize: 0;)
	w0 = Mem0[x21 + 160:word32]
	w20 = w20 + 0x00000001
	NZCV = cond(w0 - w20)
	x19 = x19 + 0x0000000000000008
	branch Test(GT,NZV) l0000000000465280
	// succ:  l00000000004652A8 l0000000000465280
l00000000004652A8:
	x23 = x23 + 0x0000000000000438
	Mem0[x23 + 176:word32] = 0x00000000
	Mem0[x23 + 160:word32] = 0x00000000
	// succ:  l00000000004652B4
l00000000004652B4:
	v23 = sp + 16
	x19 = Mem0[v23:word64]
	v23 = v23 + 8
	x20 = Mem0[v23:word64]
	v24 = sp + 32
	x21 = Mem0[v24:word64]
	v24 = v24 + 8
	x22 = Mem0[v24:word64]
	x23 = Mem0[sp + 48:word64]
	x29 = Mem0[sp:word64]
	sp = sp + 8
	x30 = Mem0[sp:word64]
	sp = sp + 64
	return
	// succ:  clear_hostname_list_exit
clear_hostname_list_exit:


// bash_default_completion
// Return size: 0
void bash_default_completion()
bash_default_completion_entry:
	// succ:  l00000000004652C8
l00000000004652C8:
	sp = fp
	sp = sp + -64
	Mem0[sp:word64] = x29
	sp = sp + 8
	Mem0[sp:word64] = x30
	x29 = x31 + 0x0000000000000000
	v8 = sp + 16
	Mem0[v8:word64] = x19
	v8 = v8 + 8
	Mem0[v8:word64] = x20
	v11 = sp + 32
	Mem0[v11:word64] = x21
	v11 = v11 + 8
	Mem0[v11:word64] = x22
	v14 = Mem0[x0:byte]
	w5 = (word32) v14
	x20 = x0
	w31 = w5 - 0x00000024
	NZCV = cond(w31)
	w21 = w1
	branch Test(EQ,Z) l00000000004653CC
	// succ:  l00000000004652EC l00000000004653CC
l00000000004652EC:
	w31 = w5 - 0x0000007E
	NZCV = cond(w31)
	branch Test(EQ,Z) l0000000000465484
	// succ:  l00000000004652F4 l0000000000465484
l00000000004652F4:
	x0 = 0x00000000004D7000
	x0 = x0 + 0x00000000000001B8
	w0 = Mem0[x0 + 48:word32]
	branch w0 == 0x00000000 l0000000000465310
	// succ:  l0000000000465304 l0000000000465310
l0000000000465304:
	v21 = Mem0[x20:byte]
	w0 = (word32) v21
	w31 = w0 - 0x00000040
	NZCV = cond(w31)
	branch Test(EQ,Z) l00000000004654C8
	// succ:  l0000000000465310 l00000000004654C8
l0000000000465310:
	branch (w4 & 0x00000001) == 0x00000000 l0000000000465434
	// succ:  l0000000000465314 l0000000000465434
l0000000000465314:
	x0 = 0x00000000004E3000
	w0 = Mem0[x0 + 3468:word32]
	branch w0 == 0x00000000 l0000000000465328
	// succ:  l0000000000465320 l0000000000465328
l0000000000465320:
	NZCV = cond(w2 - w21)
	branch Test(EQ,Z) l000000000046541C
	// succ:  l0000000000465328 l000000000046541C
l0000000000465328:
	x21 = 0x00000000004E1000
	x1 = 0x0000000000462000
	x21 = x21 + 0x0000000000000438
	x0 = x20
	x1 = x1 + 0x0000000000000420
	Mem0[x21 + 328:word32] = 0x00000000
	call rl_completion_matches (retsize: 0;)
	x19 = x0
	branch x0 == 0x0000000000000000 l000000000046556C
	// succ:  l000000000046534C l000000000046556C
l000000000046534C:
	x22 = Mem0[x0 + 8:word64]
	branch x22 == 0x0000000000000000 l00000000004654F4
	// succ:  l0000000000465354 l00000000004654F4
l0000000000465354:
	x20 = Mem0[x19:word64]
	// succ:  l0000000000465358
l0000000000465358:
	branch x20 == 0x0000000000000000 l0000000000465408
	// succ:  l000000000046535C l0000000000465408
l000000000046535C:
	x1 = Mem0[x19 + 8:word64]
	branch x1 == 0x0000000000000000 l0000000000465408
	// succ:  l0000000000465364 l0000000000465408
l0000000000465364:
	v25 = Mem0[x20:byte]
	w2 = (word32) v25
	v26 = Mem0[x1:byte]
	w0 = (word32) v26
	NZCV = cond(w2 - w0)
	branch Test(NE,Z) l0000000000465408
	// succ:  l0000000000465374 l0000000000465408
l0000000000465374:
	x0 = x20
	strcmp(x0, x1)
	sp = sp + 0xFFFFFFFFFFFFFFF8
	branch w0 != 0x00000000 l0000000000465408
	// succ:  l0000000000465380 l0000000000465408
l0000000000465380:
	x0 = x20
	call absolute_pathname (retsize: 0;)
	branch w0 != 0x00000000 l0000000000465408
	// succ:  l000000000046538C l0000000000465408
l000000000046538C:
	x0 = Mem0[x19:word64]
	call absolute_program (retsize: 0;)
	w20 = w0
	branch w0 != 0x00000000 l0000000000465408
	// succ:  l000000000046539C l0000000000465408
l000000000046539C:
	x0 = Mem0[x19:word64]
	v28 = Mem0[x0:byte]
	w1 = (word32) v28
	w31 = w1 - 0x0000007E
	NZCV = cond(w31)
	branch Test(EQ,Z) l0000000000465408
	// succ:  l00000000004653AC l0000000000465408
l00000000004653AC:
	call fn0000000000460C9C (retsize: 0;)
	branch w0 == 0x00000000 l0000000000465408
	// succ:  l00000000004653B4 l0000000000465408
l00000000004653B4:
	x0 = 0x00000000004E1000
	w1 = 0x00000001
	Mem0[x0 + 3888:word32] = w1
	x0 = 0x00000000004E1000
	Mem0[x0 + 3864:word32] = w20
	goto l0000000000465408
	// succ:  l0000000000465408
l00000000004653CC:
	w31 = w3 - 0x00000027
	NZCV = cond(w31)
	branch Test(EQ,Z) l00000000004653E0
	// succ:  l00000000004653D4 l00000000004653E0
l00000000004653D4:
	v30 = Mem0[x0 + 1:byte]
	w1 = (word32) v30
	w31 = w1 - 0x00000028
	NZCV = cond(w31)
	branch Test(EQ,Z) l0000000000465548
	// succ:  l00000000004653E0 l0000000000465548
l00000000004653E0:
	x1 = 0x0000000000461000
	x0 = x20
	x1 = x1 + 0xFFFFFFFFFFFFFA18
	Mem0[x29 + 48:word64] = x2
	Mem0[x29 + 56:word64] = x4
	call rl_completion_matches (retsize: 0;)
	x4 = Mem0[x29 + 56:word64]
	x2 = Mem0[x29 + 48:word64]
	x19 = x0
	// succ:  l0000000000465404
l0000000000465404:
	branch x19 == 0x0000000000000000 l0000000000465580
	// succ:  l0000000000465408 l0000000000465580
l0000000000465408:
	x0 = x19
	v33 = sp + 32
	x21 = Mem0[v33:word64]
	v33 = v33 + 8
	x22 = Mem0[v33:word64]
	v34 = sp + 16
	x19 = Mem0[v34:word64]
	v34 = v34 + 8
	x20 = Mem0[v34:word64]
	x29 = Mem0[sp:word64]
	sp = sp + 8
	x30 = Mem0[sp:word64]
	sp = sp + 64
	return
	// succ:  bash_default_completion_exit
l000000000046541C:
	v38 = Mem0[x20:byte]
	w0 = (word32) v38
	branch w0 != 0x00000000 l0000000000465328
	// succ:  l0000000000465424 l0000000000465328
l0000000000465424:
	x1 = 0x0000000000460000
	x1 = x1 + 0xFFFFFFFFFFFFFC24
	x0 = 0x00000000004E1000
	Mem0[x0 + 3984:word64] = x1
	// succ:  l0000000000465434
l0000000000465434:
	x0 = x20
	call glob_pattern_p (retsize: 0;)
	branch w0 != 0x00000000 l0000000000465448
	// succ:  l0000000000465440 l0000000000465448
l0000000000465440:
	x19 = 0x0000000000000000
	goto l0000000000465408
	// succ:  l0000000000465408
l0000000000465448:
	x1 = 0x0000000000461000
	x0 = x20
	x1 = x1 + 0x00000000000005AC
	call rl_completion_matches (retsize: 0;)
	x19 = x0
	branch x0 == 0x0000000000000000 l0000000000465440
	// succ:  l0000000000465460 l0000000000465440
l0000000000465460:
	x1 = Mem0[x0 + 8:word64]
	branch x1 == 0x0000000000000000 l0000000000465408
	// succ:  l0000000000465468 l0000000000465408
l0000000000465468:
	x1 = 0x00000000004E1000
	w1 = Mem0[x1 + 4076:word32]
	w31 = w1 - 0x00000009
	NZCV = cond(w31)
	branch Test(NE,Z) l0000000000465408
	// succ:  l0000000000465478 l0000000000465408
l0000000000465478:
	call strvec_dispose (retsize: 0;)
	x19 = 0x0000000000000000
	goto l0000000000465408
	// succ:  l0000000000465408
l0000000000465484:
	x0 = x20
	w1 = 0x0000002F
	Mem0[x29 + 48:word64] = x2
	Mem0[x29 + 56:word64] = x4
	call mbschr (retsize: 0;)
	x2 = Mem0[x29 + 48:word64]
	x4 = Mem0[x29 + 56:word64]
	branch x0 != 0x0000000000000000 l00000000004652F4
	// succ:  l00000000004654A4 l00000000004652F4
l00000000004654A4:
	x1 = 0x0000000000494000
	x0 = x20
	x1 = x1 + 0x00000000000003D8
	call rl_completion_matches (retsize: 0;)
	x19 = x0
	x2 = Mem0[x29 + 48:word64]
	x4 = Mem0[x29 + 56:word64]
	branch x0 == 0x0000000000000000 l00000000004652F4
	// succ:  l00000000004654C4 l00000000004652F4
l00000000004654C4:
	goto l0000000000465408
	// succ:  l0000000000465408
l00000000004654C8:
	x1 = 0x0000000000461000
	x0 = x20
	x1 = x1 + 0xFFFFFFFFFFFFFF8C
	Mem0[x29 + 48:word64] = x2
	Mem0[x29 + 56:word64] = x4
	call rl_completion_matches (retsize: 0;)
	x19 = x0
	x2 = Mem0[x29 + 48:word64]
	x4 = Mem0[x29 + 56:word64]
	branch x0 == 0x0000000000000000 l0000000000465310
	// succ:  l00000000004654F0 l0000000000465310
l00000000004654F0:
	goto l0000000000465408
	// succ:  l0000000000465408
l00000000004654F4:
	x0 = Mem0[x0:word64]
	call absolute_pathname (retsize: 0;)
	branch w0 != 0x00000000 l0000000000465354
	// succ:  l0000000000465500 l0000000000465354
l0000000000465500:
	x0 = Mem0[x19:word64]
	call absolute_program (retsize: 0;)
	x20 = Mem0[x19:word64]
	branch w0 != 0x00000000 l0000000000465358
	// succ:  l0000000000465510 l0000000000465358
l0000000000465510:
	v36 = Mem0[x20:byte]
	w0 = (word32) v36
	w31 = w0 - 0x0000007E
	NZCV = cond(w31)
	branch Test(EQ,Z) l0000000000465358
	// succ:  l000000000046551C l0000000000465358
l000000000046551C:
	x0 = x20
	call fn0000000000460C9C (retsize: 0;)
	branch w0 == 0x00000000 l0000000000465354
	// succ:  l0000000000465528 l0000000000465354
l0000000000465528:
	w0 = Mem0[x21 + 328:word32]
	branch w0 != 0x00000000 l0000000000465354
	// succ:  l0000000000465530 l0000000000465354
l0000000000465530:
	x0 = 0x00000000004E1000
	w1 = 0x00000001
	Mem0[x0 + 3888:word32] = w1
	x0 = 0x00000000004E1000
	Mem0[x0 + 3864:word32] = w22
	goto l0000000000465408
	// succ:  l0000000000465408
l0000000000465548:
	x1 = 0x0000000000460000
	x1 = x1 + 0xFFFFFFFFFFFFFCE0
	Mem0[x29 + 48:word64] = x2
	Mem0[x29 + 56:word64] = x4
	call rl_completion_matches (retsize: 0;)
	x19 = x0
	x2 = Mem0[x29 + 48:word64]
	x4 = Mem0[x29 + 56:word64]
	goto l0000000000465404
	// succ:  l0000000000465404
l000000000046556C:
	x1 = 0x0000000000460000
	x1 = x1 + 0xFFFFFFFFFFFFFC04
	x0 = 0x00000000004E1000
	Mem0[x0 + 3984:word64] = x1
	goto l0000000000465434
	// succ:  l0000000000465434
l0000000000465580:
	v35 = Mem0[x20:byte]
	w5 = (word32) v35
	goto l00000000004652EC
	// succ:  l00000000004652EC
bash_default_completion_exit:


// bash_servicename_completion_function
// Return size: 0
void bash_servicename_completion_function()
bash_servicename_completion_function_entry:
	// succ:  l0000000000465A98
l0000000000465A98:
	sp = fp
	sp = sp + -80
	Mem0[sp:word64] = x29
	sp = sp + 8
	Mem0[sp:word64] = x30
	x29 = x31 + 0x0000000000000000
	v8 = sp + 16
	Mem0[v8:word64] = x19
	v8 = v8 + 8
	Mem0[v8:word64] = x20
	Mem0[sp + 64:word64] = x25
	v12 = sp + 32
	Mem0[v12:word64] = x21
	v12 = v12 + 8
	Mem0[v12:word64] = x22
	v15 = sp + 48
	Mem0[v15:word64] = x23
	v15 = v15 + 8
	Mem0[v15:word64] = x24
	x19 = x0
	x25 = 0x00000000004E1000
	branch w1 != 0x00000000 l0000000000465B18
	// succ:  l0000000000465ABC l0000000000465B18
l0000000000465ABC:
	x0 = x25 + 0x0000000000000438
	x0 = Mem0[x0 + 392:word64]
	x21 = 0x00000000004AE000
	branch x0 == 0x0000000000000000 l0000000000465AD8
	// succ:  l0000000000465ACC l0000000000465AD8
l0000000000465ACC:
	x1 = x21 + 0xFFFFFFFFFFFFF910
	w2 = 0x00000833
	call sh_xfree (retsize: 0;)
	// succ:  l0000000000465AD8
l0000000000465AD8:
	v30 = Mem0[x19:byte]
	w1 = (word32) v30
	x20 = x25 + 0x0000000000000438
	x0 = x19
	Mem0[x20 + 400:word32] = w1
	strlen(x0)
	sp = sp + 0xFFFFFFFFFFFFFFF8
	w2 = 0x00000836
	x1 = x21 + 0xFFFFFFFFFFFFF910
	x0 = x0 + 0x0000000000000001
	call sh_xmalloc (retsize: 0;)
	x1 = x19
	strcpy(x0, x1)
	sp = sp + 0xFFFFFFFFFFFFFFF8
	Mem0[x20 + 392:word64] = x0
	strlen(x0)
	sp = sp + 0xFFFFFFFFFFFFFFF8
	Mem0[x20 + 404:word32] = w0
	w0 = 0x00000000
	call setservent (retsize: 0;)
	// succ:  l0000000000465B18
l0000000000465B18:
	x24 = x25 + 0x0000000000000438
	// succ:  l0000000000465B1C
l0000000000465B1C:
	call getservent (retsize: 0;)
	Mem0[x24 + 408:word64] = x0
	x19 = x0
	branch x0 == 0x0000000000000000 l0000000000465C1C
	// succ:  l0000000000465B2C l0000000000465C1C
l0000000000465B2C:
	w23 = Mem0[x24 + 404:word32]
	branch w23 == 0x00000000 l0000000000465C14
	// succ:  l0000000000465B34 l0000000000465C14
l0000000000465B34:
	x22 = Mem0[x24 + 392:word64]
	x20 = Mem0[x19:word64]
	v22 = Mem0[x22:byte]
	w21 = (word32) v22
	v24 = Mem0[x20:byte]
	w0 = (word32) v24
	NZCV = cond(w0 - w21)
	branch Test(EQ,Z) l0000000000465BC0
	// succ:  l0000000000465B4C l0000000000465BC0
l0000000000465B4C:
	x20 = Mem0[x19 + 8:word64]
	x19 = Mem0[x20:word64]
	branch x19 == 0x0000000000000000 l0000000000465B1C
	// succ:  l0000000000465B58 l0000000000465B1C
l0000000000465B58:
l0000000000465BC0:
	x0 = x22
	x1 = x20
l0000000000465BD4:
	x0 = x20
	strlen(x0)
	sp = sp + 0xFFFFFFFFFFFFFFF8
	x1 = 0x00000000004AE000
	x1 = x1 + 0xFFFFFFFFFFFFF910
	w2 = 0x00000855
	x0 = x0 + 0x0000000000000001
	call sh_xmalloc (retsize: 0;)
	x25 = x25 + 0x0000000000000438
	x1 = Mem0[x25 + 408:word64]
	v31 = sp + 16
	x19 = Mem0[v31:word64]
	v31 = v31 + 8
	x20 = Mem0[v31:word64]
	v32 = sp + 32
	x21 = Mem0[v32:word64]
	v32 = v32 + 8
	x22 = Mem0[v32:word64]
	v33 = sp + 48
	x23 = Mem0[v33:word64]
	v33 = v33 + 8
	x24 = Mem0[v33:word64]
	x25 = Mem0[sp + 64:word64]
	x1 = Mem0[x1:word64]
	x29 = Mem0[sp:word64]
	sp = sp + 8
	x30 = Mem0[sp:word64]
	sp = sp + 80
	strcpy(x0, x1)
	return
	// succ:  bash_servicename_completion_function_exit
l0000000000465C14:
	x20 = Mem0[x19:word64]
	goto l0000000000465BD4
	// succ:  l0000000000465BD4
l0000000000465C1C:
	call endservent (retsize: 0;)
	x0 = x19
	v27 = sp + 32
	x21 = Mem0[v27:word64]
	v27 = v27 + 8
	x22 = Mem0[v27:word64]
	v28 = sp + 16
	x19 = Mem0[v28:word64]
	v28 = v28 + 8
	x20 = Mem0[v28:word64]
	v29 = sp + 48
	x23 = Mem0[v29:word64]
	v29 = v29 + 8
	x24 = Mem0[v29:word64]
	x25 = Mem0[sp + 64:word64]
	x29 = Mem0[sp:word64]
	sp = sp + 8
	x30 = Mem0[sp:word64]
	sp = sp + 80
	return
	// succ:  bash_servicename_completion_function_exit
bash_servicename_completion_function_exit:


// bash_groupname_completion_function
// Return size: 0
void bash_groupname_completion_function()
bash_groupname_completion_function_entry:
	// succ:  l0000000000465C3C
l0000000000465C3C:
	sp = fp
	sp = sp + -64
	Mem0[sp:word64] = x29
	sp = sp + 8
	Mem0[sp:word64] = x30
	x29 = x31 + 0x0000000000000000
	v8 = sp + 16
	Mem0[v8:word64] = x19
	v8 = v8 + 8
	Mem0[v8:word64] = x20
	Mem0[sp + 32:word64] = x21
	x19 = x0
	x21 = 0x00000000004E1000
	branch w1 != 0x00000000 l0000000000465CA8
	// succ:  l0000000000465C58 l0000000000465CA8
l0000000000465C58:
	x0 = x21 + 0x0000000000000438
	x0 = Mem0[x0 + 416:word64]
	x20 = 0x00000000004AE000
	branch x0 == 0x0000000000000000 l0000000000465C74
	// succ:  l0000000000465C68 l0000000000465C74
l0000000000465C68:
	x1 = x20 + 0xFFFFFFFFFFFFF910
	w2 = 0x0000086C
	call sh_xfree (retsize: 0;)
	// succ:  l0000000000465C74
l0000000000465C74:
	x0 = x19
	strlen(x0)
	sp = sp + 0xFFFFFFFFFFFFFFF8
	w2 = 0x0000086D
	x1 = x20 + 0xFFFFFFFFFFFFF910
	x0 = x0 + 0x0000000000000001
	call sh_xmalloc (retsize: 0;)
	x1 = x19
	strcpy(x0, x1)
	sp = sp + 0xFFFFFFFFFFFFFFF8
	x19 = x21 + 0x0000000000000438
	Mem0[x19 + 416:word64] = x0
	strlen(x0)
	sp = sp + 0xFFFFFFFFFFFFFFF8
	Mem0[x19 + 424:word32] = w0
	call setgrent (retsize: 0;)
	// succ:  l0000000000465CA8
l0000000000465CA8:
	x19 = x21 + 0x0000000000000438
	// succ:  l0000000000465CAC
l0000000000465CAC:
	call getgrent (retsize: 0;)
	Mem0[x19 + 432:word64] = x0
	branch x0 == 0x0000000000000000 l0000000000465D24
	// succ:  l0000000000465CB8 l0000000000465D24
l0000000000465CB8:
	w2 = Mem0[x19 + 424:word32]
	branch w2 == 0x00000000 l0000000000465D40
	// succ:  l0000000000465CC0 l0000000000465D40
l0000000000465CC0:
	x1 = Mem0[x19 + 416:word64]
	x20 = Mem0[x0:word64]
	v15 = Mem0[x1:byte]
	w3 = (word32) v15
	v17 = Mem0[x20:byte]
	w0 = (word32) v17
	NZCV = cond(w3 - w0)
	branch Test(NE,Z) l0000000000465CAC
	// succ:  l0000000000465CD8 l0000000000465CAC
l0000000000465CD8:
	x0 = x1
l0000000000465CEC:
	x0 = x20
	strlen(x0)
	sp = sp + 0xFFFFFFFFFFFFFFF8
	x1 = 0x00000000004AE000
	x1 = x1 + 0xFFFFFFFFFFFFF910
	w2 = 0x0000087F
	x0 = x0 + 0x0000000000000001
	call sh_xmalloc (retsize: 0;)
	x21 = x21 + 0x0000000000000438
	x1 = Mem0[x21 + 432:word64]
	v21 = sp + 16
	x19 = Mem0[v21:word64]
	v21 = v21 + 8
	x20 = Mem0[v21:word64]
	x21 = Mem0[sp + 32:word64]
	x1 = Mem0[x1:word64]
	x29 = Mem0[sp:word64]
	sp = sp + 8
	x30 = Mem0[sp:word64]
	sp = sp + 64
	strcpy(x0, x1)
	return
	// succ:  bash_groupname_completion_function_exit
l0000000000465D24:
	Mem0[x29 + 48:word64] = x0
	call endgrent (retsize: 0;)
	x0 = Mem0[x29 + 48:word64]
	v20 = sp + 16
	x19 = Mem0[v20:word64]
	v20 = v20 + 8
	x20 = Mem0[v20:word64]
	x21 = Mem0[sp + 32:word64]
	x29 = Mem0[sp:word64]
	sp = sp + 8
	x30 = Mem0[sp:word64]
	sp = sp + 64
	return
	// succ:  bash_groupname_completion_function_exit
l0000000000465D40:
	x20 = Mem0[x0:word64]
	goto l0000000000465CEC
	// succ:  l0000000000465CEC
bash_groupname_completion_function_exit:


// set_directory_hook
// Return size: 0
void set_directory_hook()
set_directory_hook_entry:
	// succ:  l0000000000465D48
l0000000000465D48:
	sp = fp
	x0 = 0x00000000004E1000
	x0 = x0 + 0x0000000000000438
	w0 = Mem0[x0 + 92:word32]
	x1 = 0x0000000000463000
	x1 = x1 + 0x000000000000000C
	branch w0 != 0x00000000 l0000000000465D74
	// succ:  l0000000000465D60 l0000000000465D74
l0000000000465D60:
	x0 = 0x00000000004E1000
	Mem0[x0 + 3936:word64] = x1
	x0 = 0x00000000004E1000
	Mem0[x0 + 3944:word64] = 0x0000000000000000
	return
	// succ:  set_directory_hook_exit
l0000000000465D74:
	x0 = 0x00000000004E1000
	Mem0[x0 + 3944:word64] = x1
	x0 = 0x00000000004E1000
	Mem0[x0 + 3936:word64] = 0x0000000000000000
	return
	// succ:  set_directory_hook_exit
set_directory_hook_exit:


// bind_keyseq_to_unix_command
// Return size: 0
void bind_keyseq_to_unix_command()
bind_keyseq_to_unix_command_entry:
	// succ:  l0000000000465D88
l0000000000465D88:
	sp = fp
	sp = sp + -80
	Mem0[sp:word64] = x29
	sp = sp + 8
	Mem0[sp:word64] = x30
	x29 = x31 + 0x0000000000000000
	v8 = sp + 32
	Mem0[v8:word64] = x21
	v8 = v8 + 8
	Mem0[v8:word64] = x22
	x21 = 0x00000000004E1000
	v11 = sp + 16
	Mem0[v11:word64] = x19
	v11 = v11 + 8
	Mem0[v11:word64] = x20
	x19 = x21 + 0x0000000000000438
	x1 = Mem0[x19 + 376:word64]
	Mem0[sp + 48:word64] = x23
	x20 = x0
	branch x1 == 0x0000000000000000 l0000000000465EC4
	// succ:  l0000000000465DB0 l0000000000465EC4
l0000000000465DB0:
	call rl_get_keymap (retsize: 0;)
	x23 = x0
	w1 = 0x00000000
	x0 = x20
	w2 = 0x00000001
	x3 = x29 + 0x0000000000000040
	call fn0000000000463488 (retsize: 0;)
	w19 = w0
	branch (w19 & 0x00000000) == 0x00000000 l0000000000465EAC
	// succ:  l0000000000465DD4 l0000000000465EAC
l0000000000465DD4:
	w1 = Mem0[x29 + 64:word32]
	x0 = x20
	w2 = w19
	call substring (retsize: 0;)
l0000000000465EAC:
	w0 = 0xFFFFFFFF
	v20 = sp + 16
	x19 = Mem0[v20:word64]
	v20 = v20 + 8
	x20 = Mem0[v20:word64]
	v21 = sp + 32
	x21 = Mem0[v21:word64]
	v21 = v21 + 8
	x22 = Mem0[v21:word64]
	x23 = Mem0[sp + 48:word64]
	x29 = Mem0[sp:word64]
	sp = sp + 8
	x30 = Mem0[sp:word64]
	sp = sp + 80
	return
	// succ:  bind_keyseq_to_unix_command_exit
l0000000000465EC4:
	call rl_make_bare_keymap (retsize: 0;)
	Mem0[x19 + 376:word64] = x0
	goto l0000000000465DB0
	// succ:  l0000000000465DB0
bind_keyseq_to_unix_command_exit:


// bash_directory_completion_matches
// Return size: 0
void bash_directory_completion_matches()
bash_directory_completion_matches_entry:
	// succ:  l0000000000465ED0
l0000000000465ED0:
	sp = fp
	sp = sp + -32
	Mem0[sp:word64] = x29
	sp = sp + 8
	Mem0[sp:word64] = x30
	x29 = x31 + 0x0000000000000000
	x1 = 0x00000000004E4000
	w2 = Mem0[x1 + 152:word32]
	v10 = sp + 16
	Mem0[v10:word64] = x19
	v10 = v10 + 8
	Mem0[v10:word64] = x20
	w1 = 0x00000000
	branch w2 == 0x00000000 l0000000000465EF4
	// succ:  l0000000000465EEC l0000000000465EF4
l0000000000465EEC:
	x1 = 0x00000000004E4000
	w1 = Mem0[x1 + 188:word32]
	// succ:  l0000000000465EF4
l0000000000465EF4:
	call fn0000000000460048 (retsize: 0;)
	x1 = 0x0000000000491000
	x1 = x1 + 0x000000000000053C
	x20 = x0
	call rl_completion_matches (retsize: 0;)
	x1 = 0x00000000004AE000
	x19 = x0
	x1 = x1 + 0xFFFFFFFFFFFFF910
	x0 = x20
	w2 = 0x00000EE2
	call sh_xfree (retsize: 0;)
	branch x19 == 0x0000000000000000 l0000000000465F3C
	// succ:  l0000000000465F24 l0000000000465F3C
l0000000000465F24:
	x0 = Mem0[x19:word64]
	branch x0 == 0x0000000000000000 l0000000000465F3C
	// succ:  l0000000000465F2C l0000000000465F3C
l0000000000465F2C:
	x1 = 0x0000000000460000
	x0 = x19
	x1 = x1 + 0xFFFFFFFFFFFFFC9C
	call fn00000000004608F8 (retsize: 0;)
	// succ:  l0000000000465F3C
l0000000000465F3C:
	x0 = x19
	v13 = sp + 16
	x19 = Mem0[v13:word64]
	v13 = v13 + 8
	x20 = Mem0[v13:word64]
	x29 = Mem0[sp:word64]
	sp = sp + 8
	x30 = Mem0[sp:word64]
	sp = sp + 32
	return
	// succ:  bash_directory_completion_matches_exit
bash_directory_completion_matches_exit:


// bash_dequote_text
// Return size: 0
void bash_dequote_text()
bash_dequote_text_entry:
	// succ:  l0000000000465F4C
l0000000000465F4C:
	sp = fp
	v5 = Mem0[x0:byte]
	w2 = (word32) v5
	w31 = w2 - 0x00000027
	NZCV = cond(w31)
	w1 = (word32) Test(EQ,Z)
	branch w1 == 0x00000000 l0000000000465F64
	// succ:  l0000000000465F5C l0000000000465F64
l0000000000465F5C:
	w1 = w2
	// succ:  l0000000000465F60
l0000000000465F60:
	// succ:  l0000000000465F60_thunk_fn0000000000460048
l0000000000465F60_thunk_fn0000000000460048:
	call fn0000000000460048 (retsize: 0;)
	return
	// succ:  bash_dequote_text_exit
l0000000000465F64:
	w31 = w2 - 0x00000022
	NZCV = cond(w31)
	branch Test(NE,Z) l0000000000465F60
	// succ:  l0000000000465F6C l0000000000465F60
l0000000000465F6C:
	w1 = w2
	goto l0000000000465F60
	// succ:  l0000000000465F60
bash_dequote_text_exit:


// list_reverse
// Return size: 0
void list_reverse()
list_reverse_entry:
	// succ:  l0000000000465F74
l0000000000465F74:
	sp = fp
	branch x0 == 0x0000000000000000 l0000000000465F94
	// succ:  l0000000000465F78 l0000000000465F94
l0000000000465F78:
	x2 = 0x0000000000000000
	goto l0000000000465F88
	// succ:  l0000000000465F88
l0000000000465F80:
	x2 = x0
	x0 = x1
	// succ:  l0000000000465F88
l0000000000465F88:
	x1 = Mem0[x0:word64]
	Mem0[x0:word64] = x2
	branch x1 != 0x0000000000000000 l0000000000465F80
	// succ:  l0000000000465F94 l0000000000465F80
l0000000000465F94:
	return
	// succ:  list_reverse_exit
list_reverse_exit:


// list_length
// Return size: 0
void list_length()
list_length_entry:
	// succ:  l0000000000465F98
l0000000000465F98:
	sp = fp
	branch x0 == 0x0000000000000000 l0000000000465FB4
	// succ:  l0000000000465F9C l0000000000465FB4
l0000000000465F9C:
	w1 = 0x00000000
	// succ:  l0000000000465FA0
l0000000000465FA0:
	x0 = Mem0[x0:word64]
	w1 = w1 + 0x00000001
	branch x0 != 0x0000000000000000 l0000000000465FA0
	// succ:  l0000000000465FAC l0000000000465FA0
l0000000000465FAC:
	w0 = w1
	return
	// succ:  list_length_exit
l0000000000465FB4:
	w1 = w0
	goto l0000000000465FAC
	// succ:  l0000000000465FAC
list_length_exit:


// list_append
// Return size: 0
void list_append()
list_append_entry:
	// succ:  l0000000000465FBC
l0000000000465FBC:
	sp = fp
	branch x0 == 0x0000000000000000 l0000000000465FDC
	// succ:  l0000000000465FC0 l0000000000465FDC
l0000000000465FC0:
	x3 = x0
	goto l0000000000465FCC
	// succ:  l0000000000465FCC
l0000000000465FC8:
	x3 = x2
	// succ:  l0000000000465FCC
l0000000000465FCC:
	x2 = Mem0[x3:word64]
	branch x2 != 0x0000000000000000 l0000000000465FC8
	// succ:  l0000000000465FD4 l0000000000465FC8
l0000000000465FD4:
	Mem0[x3:word64] = x1
	return
	// succ:  list_append_exit
l0000000000465FDC:
	x0 = x1
	return
	// succ:  list_append_exit
list_append_exit:


// find_string_in_alist
// Return size: 0
void find_string_in_alist()
find_string_in_alist_entry:
	// succ:  l0000000000465FE4
l0000000000465FE4:
	sp = fp
	sp = sp + -48
	Mem0[sp:word64] = x29
	sp = sp + 8
	Mem0[sp:word64] = x30
	x29 = x31 + 0x0000000000000000
	v8 = sp + 16
	Mem0[v8:word64] = x19
	v8 = v8 + 8
	Mem0[v8:word64] = x20
	x19 = x1
	x3 = Mem0[x19:word64]
	x19 = x19 + 16
	v13 = sp + 32
	Mem0[v13:word64] = x21
	v13 = v13 + 8
	Mem0[v13:word64] = x22
	x20 = x0
	w22 = w2
	x21 = x1
	branch x3 == 0x0000000000000000 l000000000046602C
	// succ:  l000000000046600C l000000000046602C
l000000000046600C:
	branch w22 != 0x00000000 l0000000000466040
	// succ:  l0000000000466010 l0000000000466040
l0000000000466010:
	v18 = Mem0[x3:byte]
	w4 = (word32) v18
	v20 = Mem0[x20:byte]
	w5 = (word32) v20
	NZCV = cond(w5 - w4)
	branch Test(EQ,Z) l000000000046606C
	// succ:  l0000000000466020 l000000000046606C
l0000000000466020:
	x21 = x19
	x3 = Mem0[x19:word64]
	x19 = x19 + 16
	branch x3 != 0x0000000000000000 l000000000046600C
	// succ:  l000000000046602C l000000000046600C
l000000000046602C:
	w0 = 0xFFFFFFFF
	v24 = sp + 16
	x19 = Mem0[v24:word64]
	v24 = v24 + 8
	x20 = Mem0[v24:word64]
	v25 = sp + 32
	x21 = Mem0[v25:word64]
	v25 = v25 + 8
	x22 = Mem0[v25:word64]
	x29 = Mem0[sp:word64]
	sp = sp + 8
	x30 = Mem0[sp:word64]
	sp = sp + 48
	return
	// succ:  find_string_in_alist_exit
l0000000000466040:
	x0 = x3
	x1 = x20
	w2 = 0x00000020
	call strmatch (retsize: 0;)
	w31 = w0 - 0x00000001
	NZCV = cond(w31)
	branch Test(EQ,Z) l0000000000466020
	// succ:  l0000000000466058 l0000000000466020
l0000000000466058:
	w0 = Mem0[x21 + 8:word32]
	// succ:  l000000000046605C
l000000000046605C:
	v27 = sp + 16
	x19 = Mem0[v27:word64]
	v27 = v27 + 8
	x20 = Mem0[v27:word64]
	v28 = sp + 32
	x21 = Mem0[v28:word64]
	v28 = v28 + 8
	x22 = Mem0[v28:word64]
	x29 = Mem0[sp:word64]
	sp = sp + 8
	x30 = Mem0[sp:word64]
	sp = sp + 48
	return
	// succ:  find_string_in_alist_exit
l000000000046606C:
	x1 = x3
	x0 = x20
	strcmp(x0, x1)
	sp = sp + 0xFFFFFFFFFFFFFFF8
	branch w0 != 0x00000000 l0000000000466020
	// succ:  l000000000046607C l0000000000466020
l000000000046607C:
	w0 = Mem0[x21 + 8:word32]
	goto l000000000046605C
	// succ:  l000000000046605C
find_string_in_alist_exit:


// find_token_in_alist
// Return size: 0
void find_token_in_alist()
find_token_in_alist_entry:
	// succ:  l0000000000466084
l0000000000466084:
	sp = fp
	sp = sp + -32
	Mem0[sp:word64] = x29
	sp = sp + 8
	Mem0[sp:word64] = x30
	x29 = x31 + 0x0000000000000000
	x2 = Mem0[x1:word64]
	Mem0[sp + 16:word64] = x19
	branch x2 == 0x0000000000000000 l00000000004660C8
	// succ:  l0000000000466098 l00000000004660C8
l0000000000466098:
	w3 = Mem0[x1 + 8:word32]
	NZCV = cond(w3 - w0)
	branch Test(EQ,Z) l00000000004660D8
	// succ:  l00000000004660A4 l00000000004660D8
l00000000004660A4:
	x1 = x1 + 0x0000000000000010
	goto l00000000004660B8
	// succ:  l00000000004660B8
l00000000004660AC:
	w3 = Mem0[x1 + -8:word32]
	NZCV = cond(w3 - w0)
	branch Test(EQ,Z) l00000000004660DC
	// succ:  l00000000004660B8 l00000000004660DC
l00000000004660B8:
	x2 = Mem0[x1:word64]
	x19 = x1
	x1 = x1 + 0x0000000000000010
	branch x2 != 0x0000000000000000 l00000000004660AC
	// succ:  l00000000004660C8 l00000000004660AC
l00000000004660C8:
	x0 = 0x0000000000000000
	x19 = Mem0[sp + 16:word64]
	x29 = Mem0[sp:word64]
	sp = sp + 8
	x30 = Mem0[sp:word64]
	sp = sp + 32
	return
	// succ:  find_token_in_alist_exit
l00000000004660D8:
	x19 = x1
	// succ:  l00000000004660DC
l00000000004660DC:
	x0 = x2
	strlen(x0)
	sp = sp + 0xFFFFFFFFFFFFFFF8
	x1 = 0x00000000004AE000
	x1 = x1 + 0xFFFFFFFFFFFFFED8
	w2 = 0x00000058
	x0 = x0 + 0x0000000000000001
	call sh_xmalloc (retsize: 0;)
	x1 = Mem0[x19:word64]
	x19 = Mem0[sp + 16:word64]
	x29 = Mem0[sp:word64]
	sp = sp + 8
	x30 = Mem0[sp:word64]
	sp = sp + 32
	strcpy(x0, x1)
	return
	// succ:  find_token_in_alist_exit
find_token_in_alist_exit:


// find_index_in_alist
// Return size: 0
void find_index_in_alist()
find_index_in_alist_entry:
	// succ:  l0000000000466108
l0000000000466108:
	sp = fp
	sp = sp + -48
	Mem0[sp:word64] = x29
	sp = sp + 8
	Mem0[sp:word64] = x30
	x29 = x31 + 0x0000000000000000
	x3 = Mem0[x1:word64]
	v10 = sp + 16
	Mem0[v10:word64] = x19
	v10 = v10 + 8
	Mem0[v10:word64] = x20
	v13 = sp + 32
	Mem0[v13:word64] = x21
	v13 = v13 + 8
	Mem0[v13:word64] = x22
	x20 = x1
	x21 = x0
	w22 = w2
	w19 = 0x00000000
	branch x3 == 0x0000000000000000 l0000000000466150
	// succ:  l0000000000466130 l0000000000466150
l0000000000466130:
	branch w22 != 0x00000000 l0000000000466164
	// succ:  l0000000000466134 l0000000000466164
l0000000000466134:
	v19 = Mem0[x3:byte]
	w4 = (word32) v19
	v21 = Mem0[x21:byte]
	w5 = (word32) v21
	NZCV = cond(w5 - w4)
	branch Test(EQ,Z) l0000000000466190
	// succ:  l0000000000466144 l0000000000466190
l0000000000466144:
	x20 = x20 + 16
	x3 = Mem0[x20:word64]
	w19 = w19 + 0x00000001
	branch x3 != 0x0000000000000000 l0000000000466130
	// succ:  l0000000000466150 l0000000000466130
l0000000000466150:
	w0 = 0xFFFFFFFF
	v25 = sp + 16
	x19 = Mem0[v25:word64]
	v25 = v25 + 8
	x20 = Mem0[v25:word64]
	v26 = sp + 32
	x21 = Mem0[v26:word64]
	v26 = v26 + 8
	x22 = Mem0[v26:word64]
	x29 = Mem0[sp:word64]
	sp = sp + 8
	x30 = Mem0[sp:word64]
	sp = sp + 48
	return
	// succ:  find_index_in_alist_exit
l0000000000466164:
	x0 = x3
	x1 = x21
	w2 = 0x00000020
	call strmatch (retsize: 0;)
	w31 = w0 - 0x00000001
	NZCV = cond(w31)
	branch Test(EQ,Z) l0000000000466144
	// succ:  l000000000046617C l0000000000466144
l000000000046617C:
	w0 = w19
	// succ:  l0000000000466180
l0000000000466180:
	v28 = sp + 16
	x19 = Mem0[v28:word64]
	v28 = v28 + 8
	x20 = Mem0[v28:word64]
	v29 = sp + 32
	x21 = Mem0[v29:word64]
	v29 = v29 + 8
	x22 = Mem0[v29:word64]
	x29 = Mem0[sp:word64]
	sp = sp + 8
	x30 = Mem0[sp:word64]
	sp = sp + 48
	return
	// succ:  find_index_in_alist_exit
l0000000000466190:
	x0 = x21
	x1 = x3
	strcmp(x0, x1)
	sp = sp + 0xFFFFFFFFFFFFFFF8
	branch w0 != 0x00000000 l0000000000466144
	// succ:  l00000000004661A0 l0000000000466144
l00000000004661A0:
	w0 = w19
	goto l0000000000466180
	// succ:  l0000000000466180
find_index_in_alist_exit:


// substring
// Return size: 0
void substring()
substring_entry:
	// succ:  l00000000004661A8
l00000000004661A8:
	sp = fp
	sp = sp + -48
	Mem0[sp:word64] = x29
	sp = sp + 8
	Mem0[sp:word64] = x30
	x29 = x31 + 0x0000000000000000
	v8 = sp + 16
	Mem0[v8:word64] = x19
	v8 = v8 + 8
	Mem0[v8:word64] = x20
	w19 = w2 - w1
	v14 = sp + 32
	Mem0[v14:word64] = x21
	v14 = v14 + 8
	Mem0[v14:word64] = x22
	w3 = w19 + 0x00000001
	w21 = w1
	x1 = 0x00000000004AE000
	x22 = x0
	x1 = x1 + 0xFFFFFFFFFFFFFED8
substring_exit:


// strsub
// Return size: 0
void strsub()
strsub_entry:
	// succ:  l0000000000466208
l0000000000466208:
	sp = fp
	sp = sp + -144
	Mem0[sp:word64] = x29
	sp = sp + 8
	Mem0[sp:word64] = x30
	x29 = x31 + 0x0000000000000000
	v8 = sp + 80
	Mem0[v8:word64] = x27
	v8 = v8 + 8
	Mem0[v8:word64] = x28
	x28 = x0
	x0 = x1
	v13 = sp + 16
	Mem0[v13:word64] = x19
	v13 = v13 + 8
	Mem0[v13:word64] = x20
	v16 = sp + 48
	Mem0[v16:word64] = x23
	v16 = v16 + 8
	Mem0[v16:word64] = x24
	v19 = sp + 64
	Mem0[v19:word64] = x25
	v19 = v19 + 8
	Mem0[v19:word64] = x26
	x23 = x2
	Mem0[x29 + 112:word64] = x1
	Mem0[x29 + 120:word32] = w3
	v24 = sp + 32
	Mem0[v24:word64] = x21
	v24 = v24 + 8
	Mem0[v24:word64] = x22
	strlen(x0)
	sp = sp + 0xFFFFFFFFFFFFFFF8
	w27 = w0
	x0 = x23
	strlen(x0)
	sp = sp + 0xFFFFFFFFFFFFFFF8
	Mem0[x29 + 100:word32] = w0
strsub_exit:


// strcreplace
// Return size: 0
void strcreplace()
strcreplace_entry:
	// succ:  l0000000000466400
l0000000000466400:
	sp = fp
	sp = sp + -112
	Mem0[sp:word64] = x29
	sp = sp + 8
	Mem0[sp:word64] = x30
	x29 = x31 + 0x0000000000000000
	v8 = sp + 48
	Mem0[v8:word64] = x23
	v8 = v8 + 8
	Mem0[v8:word64] = x24
	v11 = sp + 16
	Mem0[v11:word64] = x19
	v11 = v11 + 8
	Mem0[v11:word64] = x20
	v14 = sp + 80
	Mem0[v14:word64] = x27
	v14 = v14 + 8
	Mem0[v14:word64] = x28
	v17 = sp + 32
	Mem0[v17:word64] = x21
	v17 = v17 + 8
	Mem0[v17:word64] = x22
	v20 = sp + 64
	Mem0[v20:word64] = x25
	v20 = v20 + 8
	Mem0[v20:word64] = x26
	x23 = x2
	x20 = x0
	w24 = w1
	w27 = w3
	branch x2 == 0x0000000000000000 l000000000046664C
	// succ:  l0000000000466430 l000000000046664C
l0000000000466430:
	v28 = Mem0[x2:byte]
	w19 = (word32) v28
	branch w19 != 0x00000000 l000000000046657C
	// succ:  l0000000000466438 l000000000046657C
l0000000000466438:
	w25 = w19
	// succ:  l000000000046643C
l000000000046643C:
	x0 = x20
	strlen(x0)
	sp = sp + 0xFFFFFFFFFFFFFFF8
	w19 = w19 + 0x00000002
	x26 = 0x00000000004AE000
	w19 = w19 + w0
	x26 = x26 + 0xFFFFFFFFFFFFFED8
l000000000046657C:
	v32 = Mem0[x2 + 1:byte]
	w0 = (word32) v32
	branch w0 == 0x00000000 l0000000000466638
	// succ:  l0000000000466584 l0000000000466638
l0000000000466584:
	v33 = Mem0[x2 + 2:byte]
	w0 = (word32) v33
	branch w0 == 0x00000000 l0000000000466644
	// succ:  l000000000046658C l0000000000466644
l000000000046658C:
	x0 = x2
	strlen(x0)
	sp = sp + 0xFFFFFFFFFFFFFFF8
	w25 = w0
	w19 = w0
	goto l000000000046643C
	// succ:  l000000000046643C
l0000000000466638:
	w19 = 0x00000001
	w25 = w19
	goto l000000000046643C
	// succ:  l000000000046643C
l0000000000466644:
	w19 = 0x00000002
	goto l0000000000466438
	// succ:  l0000000000466438
l000000000046664C:
	w19 = w2
	w25 = w2
	goto l000000000046643C
	// succ:  l000000000046643C
strcreplace_exit:


// strip_trailing
// Return size: 0
void strip_trailing()
strip_trailing_entry:
	// succ:  l0000000000466660
l0000000000466660:
	sp = fp
strip_trailing_exit:


// xbcopy
// Return size: 0
void xbcopy()
xbcopy_entry:
	// succ:  l00000000004666B4
l00000000004666B4:
	sp = fp
	x3 = x0
xbcopy_exit:


// fn00000000004666C8
// Return size: 0
void fn00000000004666C8()
fn00000000004666C8_entry:
	// succ:  l00000000004666C8
l00000000004666C8:
	sp = fp
	sp = sp + -80
	Mem0[sp:word64] = x29
	sp = sp + 8
	Mem0[sp:word64] = x30
	x29 = x31 + 0x0000000000000000
	v8 = sp + 32
	Mem0[v8:word64] = x21
	v8 = v8 + 8
	Mem0[v8:word64] = x22
	x22 = 0x00000000004D7000
	w0 = Mem0[x22 + 2496:word32]
	v12 = sp + 16
	Mem0[v12:word64] = x19
	v12 = v12 + 8
	Mem0[v12:word64] = x20
	v15 = sp + 48
	Mem0[v15:word64] = x23
	v15 = v15 + 8
	Mem0[v15:word64] = x24
	v18 = sp + 64
	Mem0[v18:word64] = x25
	v18 = v18 + 8
	Mem0[v18:word64] = x26
	NZCV = cond(w0 - w31)
	branch Test(LE,ZCV) l0000000000466770
	// succ:  l00000000004666F0 l0000000000466770
l00000000004666F0:
	__ctype_b_loc()
	sp = sp + 0xFFFFFFFFFFFFFFF8
	x20 = 0x0000000000000000
	x21 = 0x00000000004D7000
	x26 = 0x00000000004AE000
	x23 = x0
	w19 = w20
	x21 = x21 + 0x00000000000005C0
	w25 = 0xFFFFDFFD
	x26 = x26 + 0xFFFFFFFFFFFFFE90
	w24 = 0x00002002
	x22 = x22 + 0xFFFFFFFFFFFFF9C0
	goto l0000000000466740
	// succ:  l0000000000466740
l0000000000466720:
	w1 = Mem0[x21 + (int64) ((int32) w19):word32]
	w1 = w1 | w24
	Mem0[x21 + (int64) ((int32) w19):word32] = w1
	// succ:  l000000000046672C
l000000000046672C:
	w1 = Mem0[x22:word32]
	w19 = w19 + 0x00000001
	NZCV = cond(w1 - w19)
	x20 = x20 + 0x0000000000000002
	branch Test(LE,ZCV) l0000000000466770
	// succ:  l0000000000466740 l0000000000466770
l0000000000466740:
	x1 = Mem0[x23:word64]
	v33 = Mem0[x1 + x20:word16]
	w1 = (word32) v33
	branch (w1 & 0x00000001) == 0x00000000 l0000000000466720
	// succ:  l000000000046674C l0000000000466720
l000000000046674C:
	branch w19 != 0x00000000 l0000000000466788
	// succ:  l0000000000466750 l0000000000466788
l0000000000466750:
	w1 = Mem0[x21 + (int64) ((int32) w19):word32]
	x20 = x20 + 0x0000000000000002
	w1 = w1 & w25
	Mem0[x21 + (int64) ((int32) w19):word32] = w1
	w1 = Mem0[x22:word32]
	w19 = w19 + 0x00000001
	NZCV = cond(w1 - w19)
	branch Test(GT,NZV) l0000000000466740
	// succ:  l0000000000466770 l0000000000466740
l0000000000466770:
	v27 = sp + 16
	x19 = Mem0[v27:word64]
	v27 = v27 + 8
	x20 = Mem0[v27:word64]
	v28 = sp + 32
	x21 = Mem0[v28:word64]
	v28 = v28 + 8
	x22 = Mem0[v28:word64]
	v29 = sp + 48
	x23 = Mem0[v29:word64]
	v29 = v29 + 8
	x24 = Mem0[v29:word64]
	v30 = sp + 64
	x25 = Mem0[v30:word64]
	v30 = v30 + 8
	x26 = Mem0[v30:word64]
	x29 = Mem0[sp:word64]
	sp = sp + 8
	x30 = Mem0[sp:word64]
	sp = sp + 80
	return
	// succ:  fn00000000004666C8_exit
l0000000000466788:
	w1 = w19
	x0 = x26
	call mbschr (retsize: 0;)
	branch x0 == 0x0000000000000000 l0000000000466750
	// succ:  l0000000000466798 l0000000000466750
l0000000000466798:
	w1 = Mem0[x21 + (int64) ((int32) w19):word32]
	w1 = w1 & 0xFFFFDFFF
	w1 = w1 | 0x00000002
	Mem0[x21 + (int64) ((int32) w19):word32] = w1
	goto l000000000046672C
	// succ:  l000000000046672C
fn00000000004666C8_exit:


// set_default_locale
// Return size: 0
void set_default_locale()
set_default_locale_entry:
	// succ:  l00000000004667AC
l00000000004667AC:
	sp = fp
	sp = sp + -32
	Mem0[sp:word64] = x29
	sp = sp + 8
	Mem0[sp:word64] = x30
	x29 = x31 + 0x0000000000000000
	x1 = 0x00000000004AC000
	Mem0[sp + 16:word64] = x19
	w0 = 0x00000006
	x1 = x1 + 0x0000000000000460
	x19 = 0x00000000004E1000
	setlocale(x0, x1)
	sp = sp + 0xFFFFFFFFFFFFFFF8
	x19 = x19 + 0x00000000000005F0
	Mem0[x19:word64] = x0
	branch x0 == 0x0000000000000000 l00000000004667FC
	// succ:  l00000000004667D8 l00000000004667FC
l00000000004667D8:
	strlen(x0)
	sp = sp + 0xFFFFFFFFFFFFFFF8
	x1 = 0x00000000004AE000
	x1 = x1 + 0xFFFFFFFFFFFFFEF0
	w2 = 0x00000049
	x0 = x0 + 0x0000000000000001
	call sh_xmalloc (retsize: 0;)
	x1 = Mem0[x19:word64]
	strcpy(x0, x1)
	sp = sp + 0xFFFFFFFFFFFFFFF8
	Mem0[x19:word64] = x0
	// succ:  l00000000004667FC
l00000000004667FC:
	x19 = 0x00000000004AA000
	x19 = x19 + 0x0000000000000260
	x1 = 0x00000000004AE000
	x0 = x19
	x1 = x1 + 0xFFFFFFFFFFFFFF08
	bindtextdomain(x0, x1)
	sp = sp + 0xFFFFFFFFFFFFFFF8
	x0 = x19
	x19 = Mem0[sp + 16:word64]
	x29 = Mem0[sp:word64]
	sp = sp + 8
	x30 = Mem0[sp:word64]
	sp = sp + 32
	textdomain(x0)
	return
	// succ:  set_default_locale_exit
set_default_locale_exit:


// set_default_locale_vars
// Return size: 0
void set_default_locale_vars()
set_default_locale_vars_entry:
	// succ:  l0000000000466824
l0000000000466824:
	sp = fp
	sp = sp + -48
	Mem0[sp:word64] = x29
	sp = sp + 8
	Mem0[sp:word64] = x30
	x29 = x31 + 0x0000000000000000
	x0 = 0x00000000004AC000
	x0 = x0 + 0xFFFFFFFFFFFFFE78
	v9 = sp + 16
	Mem0[v9:word64] = x19
	v9 = v9 + 8
	Mem0[v9:word64] = x20
	Mem0[sp + 32:word64] = x21
	call get_string_value (retsize: 0;)
	branch x0 == 0x0000000000000000 l0000000000466984
	// succ:  l0000000000466844 l0000000000466984
l0000000000466844:
	x0 = 0x00000000004AC000
	x0 = x0 + 0xFFFFFFFFFFFFFE68
	call get_string_value (retsize: 0;)
	branch x0 == 0x0000000000000000 l00000000004669A8
	// succ:  l0000000000466854 l00000000004669A8
l0000000000466854:
	x0 = 0x00000000004AC000
	x0 = x0 + 0xFFFFFFFFFFFFFE88
	call get_string_value (retsize: 0;)
	branch x0 == 0x0000000000000000 l00000000004669CC
	// succ:  l0000000000466864 l00000000004669CC
l0000000000466864:
	x0 = 0x00000000004AC000
	x0 = x0 + 0xFFFFFFFFFFFFFE98
	call get_string_value (retsize: 0;)
	branch x0 == 0x0000000000000000 l00000000004669F0
	// succ:  l0000000000466874 l00000000004669F0
l0000000000466874:
	x0 = 0x00000000004AC000
	x0 = x0 + 0xFFFFFFFFFFFFFEA8
	call get_string_value (retsize: 0;)
	branch x0 == 0x0000000000000000 l0000000000466A14
	// succ:  l0000000000466884 l0000000000466A14
l0000000000466884:
	x0 = 0x00000000004AC000
	x0 = x0 + 0xFFFFFFFFFFFFFEE0
	call get_string_value (retsize: 0;)
	x19 = x0
	branch x0 == 0x0000000000000000 l00000000004668E8
	// succ:  l0000000000466898 l00000000004668E8
l0000000000466898:
	v12 = Mem0[x0:byte]
	w0 = (word32) v12
	branch w0 == 0x00000000 l00000000004668E8
	// succ:  l00000000004668A0 l00000000004668E8
l00000000004668A0:
	x20 = 0x00000000004E1000
	x0 = x20 + 0x00000000000005F0
	x0 = Mem0[x0 + 16:word64]
	x21 = 0x00000000004AE000
	branch x0 == 0x0000000000000000 l00000000004668C0
	// succ:  l00000000004668B4 l00000000004668C0
l00000000004668B4:
	x1 = x21 + 0xFFFFFFFFFFFFFEF0
	w2 = 0x0000007F
	call sh_xfree (retsize: 0;)
	// succ:  l00000000004668C0
l00000000004668C0:
	x0 = x19
	strlen(x0)
	sp = sp + 0xFFFFFFFFFFFFFFF8
	w2 = 0x00000080
	x1 = x21 + 0xFFFFFFFFFFFFFEF0
	x0 = x0 + 0x0000000000000001
	call sh_xmalloc (retsize: 0;)
	x1 = x19
	strcpy(x0, x1)
	sp = sp + 0xFFFFFFFFFFFFFFF8
	x20 = x20 + 0x00000000000005F0
	Mem0[x20 + 16:word64] = x0
	// succ:  l00000000004668E8
l00000000004668E8:
	x0 = 0x00000000004AC000
	x0 = x0 + 0xFFFFFFFFFFFFFEF0
	call get_string_value (retsize: 0;)
	x19 = x0
	branch x0 == 0x0000000000000000 l0000000000466960
	// succ:  l00000000004668FC l0000000000466960
l00000000004668FC:
	v16 = Mem0[x0:byte]
	w0 = (word32) v16
	branch w0 == 0x00000000 l0000000000466960
	// succ:  l0000000000466904 l0000000000466960
l0000000000466904:
	x20 = 0x00000000004E1000
	x0 = x20 + 0x00000000000005F0
	x0 = Mem0[x0 + 24:word64]
	x21 = 0x00000000004AE000
	branch x0 == 0x0000000000000000 l0000000000466924
	// succ:  l0000000000466918 l0000000000466924
l0000000000466918:
	x1 = x21 + 0xFFFFFFFFFFFFFEF0
	w2 = 0x0000008A
	call sh_xfree (retsize: 0;)
	// succ:  l0000000000466924
l0000000000466924:
	x0 = x19
	strlen(x0)
	sp = sp + 0xFFFFFFFFFFFFFFF8
	w2 = 0x0000008B
	x1 = x21 + 0xFFFFFFFFFFFFFEF0
	x0 = x0 + 0x0000000000000001
	call sh_xmalloc (retsize: 0;)
	x1 = x19
	strcpy(x0, x1)
	sp = sp + 0xFFFFFFFFFFFFFFF8
	x20 = x20 + 0x00000000000005F0
	x2 = Mem0[x20 + 16:word64]
	Mem0[x20 + 24:word64] = x0
	x1 = x0
	branch x2 == 0x0000000000000000 l0000000000466960
	// succ:  l0000000000466958 l0000000000466960
l0000000000466958:
	v20 = Mem0[x2:byte]
	w0 = (word32) v20
	branch w0 != 0x00000000 l0000000000466970
	// succ:  l0000000000466960 l0000000000466970
l0000000000466960:
	v21 = sp + 16
	x19 = Mem0[v21:word64]
	v21 = v21 + 8
	x20 = Mem0[v21:word64]
	x21 = Mem0[sp + 32:word64]
	x29 = Mem0[sp:word64]
	sp = sp + 8
	x30 = Mem0[sp:word64]
	sp = sp + 48
	return
	// succ:  set_default_locale_vars_exit
l0000000000466970:
	v22 = sp + 16
	x19 = Mem0[v22:word64]
	v22 = v22 + 8
	x20 = Mem0[v22:word64]
	x21 = Mem0[sp + 32:word64]
	x29 = Mem0[sp:word64]
	sp = sp + 8
	x30 = Mem0[sp:word64]
	sp = sp + 48
	x0 = x2
	bindtextdomain(x0, x1)
	return
	// succ:  set_default_locale_vars_exit
l0000000000466984:
	x1 = 0x00000000004E1000
	x1 = x1 + 0x00000000000005F0
	x1 = Mem0[x1 + 8:word64]
	branch x1 == 0x0000000000000000 l0000000000466844
	// succ:  l0000000000466994 l0000000000466844
l0000000000466994:
	v15 = Mem0[x1:byte]
	w2 = (word32) v15
	branch w2 == 0x00000000 l0000000000466844
	// succ:  l000000000046699C l0000000000466844
l000000000046699C:
	setlocale(x0, x1)
	sp = sp + 0xFFFFFFFFFFFFFFF8
	call fn00000000004666C8 (retsize: 0;)
	goto l0000000000466844
	// succ:  l0000000000466844
l00000000004669A8:
	x0 = 0x00000000004E1000
	x0 = x0 + 0x00000000000005F0
	x1 = Mem0[x0 + 8:word64]
	branch x1 == 0x0000000000000000 l0000000000466854
	// succ:  l00000000004669B8 l0000000000466854
l00000000004669B8:
	v24 = Mem0[x1:byte]
	w0 = (word32) v24
	branch w0 == 0x00000000 l0000000000466854
	// succ:  l00000000004669C0 l0000000000466854
l00000000004669C0:
	w0 = 0x00000003
	setlocale(x0, x1)
	sp = sp + 0xFFFFFFFFFFFFFFF8
	goto l0000000000466854
	// succ:  l0000000000466854
l00000000004669CC:
	x0 = 0x00000000004E1000
	x0 = x0 + 0x00000000000005F0
	x1 = Mem0[x0 + 8:word64]
	branch x1 == 0x0000000000000000 l0000000000466864
	// succ:  l00000000004669DC l0000000000466864
l00000000004669DC:
	v23 = Mem0[x1:byte]
	w0 = (word32) v23
	branch w0 == 0x00000000 l0000000000466864
	// succ:  l00000000004669E4 l0000000000466864
l00000000004669E4:
	w0 = 0x00000005
	setlocale(x0, x1)
	sp = sp + 0xFFFFFFFFFFFFFFF8
	goto l0000000000466864
	// succ:  l0000000000466864
l00000000004669F0:
	x0 = 0x00000000004E1000
	x0 = x0 + 0x00000000000005F0
	x1 = Mem0[x0 + 8:word64]
	branch x1 == 0x0000000000000000 l0000000000466874
	// succ:  l0000000000466A00 l0000000000466874
l0000000000466A00:
	v18 = Mem0[x1:byte]
	w0 = (word32) v18
	branch w0 == 0x00000000 l0000000000466874
	// succ:  l0000000000466A08 l0000000000466874
l0000000000466A08:
	w0 = 0x00000001
	setlocale(x0, x1)
	sp = sp + 0xFFFFFFFFFFFFFFF8
	goto l0000000000466874
	// succ:  l0000000000466874
l0000000000466A14:
	x0 = 0x00000000004E1000
	x0 = x0 + 0x00000000000005F0
	x1 = Mem0[x0 + 8:word64]
	branch x1 == 0x0000000000000000 l0000000000466884
	// succ:  l0000000000466A24 l0000000000466884
l0000000000466A24:
	v17 = Mem0[x1:byte]
	w0 = (word32) v17
	branch w0 == 0x00000000 l0000000000466884
	// succ:  l0000000000466A2C l0000000000466884
l0000000000466A2C:
	w0 = 0x00000002
	setlocale(x0, x1)
	sp = sp + 0xFFFFFFFFFFFFFFF8
	goto l0000000000466884
	// succ:  l0000000000466884
set_default_locale_vars_exit:


// get_locale_var
// Return size: 0
void get_locale_var()
get_locale_var_entry:
	// succ:  l0000000000466A38
l0000000000466A38:
	sp = fp
	sp = sp + -32
	Mem0[sp:word64] = x29
	sp = sp + 8
	Mem0[sp:word64] = x30
	x29 = x31 + 0x0000000000000000
	Mem0[sp + 16:word64] = x19
	x19 = 0x00000000004E1000
	x1 = x19 + 0x00000000000005F0
	x1 = Mem0[x1 + 8:word64]
	branch x1 == 0x0000000000000000 l0000000000466A5C
	// succ:  l0000000000466A54 l0000000000466A5C
l0000000000466A54:
	v9 = Mem0[x1:byte]
	w2 = (word32) v9
	branch w2 != 0x00000000 l0000000000466A8C
	// succ:  l0000000000466A5C l0000000000466A8C
l0000000000466A5C:
	call get_string_value (retsize: 0;)
	x1 = x0
	branch x0 == 0x0000000000000000 l0000000000466A70
	// succ:  l0000000000466A68 l0000000000466A70
l0000000000466A68:
	v12 = Mem0[x0:byte]
	w0 = (word32) v12
	branch w0 != 0x00000000 l0000000000466A8C
	// succ:  l0000000000466A70 l0000000000466A8C
l0000000000466A70:
	x19 = x19 + 0x00000000000005F0
	x1 = Mem0[x19 + 32:word64]
	branch x1 == 0x0000000000000000 l0000000000466A84
	// succ:  l0000000000466A7C l0000000000466A84
l0000000000466A7C:
	v13 = Mem0[x1:byte]
	w0 = (word32) v13
	branch w0 != 0x00000000 l0000000000466A8C
	// succ:  l0000000000466A84 l0000000000466A8C
l0000000000466A84:
	x1 = 0x00000000004AC000
	x1 = x1 + 0x0000000000000460
	// succ:  l0000000000466A8C
l0000000000466A8C:
	x0 = x1
	x19 = Mem0[sp + 16:word64]
	x29 = Mem0[sp:word64]
	sp = sp + 8
	x30 = Mem0[sp:word64]
	sp = sp + 32
	return
	// succ:  get_locale_var_exit
get_locale_var_exit:


// fn0000000000466A9C
// Return size: 0
void fn0000000000466A9C()
fn0000000000466A9C_entry:
	// succ:  l0000000000466A9C
l0000000000466A9C:
	sp = fp
	sp = sp + -32
	Mem0[sp:word64] = x29
	sp = sp + 8
	Mem0[sp:word64] = x30
	x29 = x31 + 0x0000000000000000
	Mem0[sp + 16:word64] = x19
	x19 = 0x00000000004E1000
	x0 = x19 + 0x00000000000005F0
	x1 = Mem0[x0 + 32:word64]
	branch x1 == 0x0000000000000000 l0000000000466B58
	// succ:  l0000000000466AB8 l0000000000466B58
l0000000000466AB8:
	v10 = Mem0[x1:byte]
	w0 = (word32) v10
	branch w0 == 0x00000000 l0000000000466B58
	// succ:  l0000000000466AC0 l0000000000466B58
l0000000000466AC0:
	w0 = 0x00000006
	setlocale(x0, x1)
	sp = sp + 0xFFFFFFFFFFFFFFF8
	branch x0 == 0x0000000000000000 l0000000000466B4C
	// succ:  l0000000000466ACC l0000000000466B4C
l0000000000466ACC:
	x0 = 0x00000000004AC000
	x0 = x0 + 0xFFFFFFFFFFFFFE78
	call get_locale_var (retsize: 0;)
	x1 = x0
	w0 = 0x00000000
	setlocale(x0, x1)
	sp = sp + 0xFFFFFFFFFFFFFFF8
	x0 = 0x00000000004AC000
	x0 = x0 + 0xFFFFFFFFFFFFFE68
	call get_locale_var (retsize: 0;)
	x1 = x0
	w0 = 0x00000003
	setlocale(x0, x1)
	sp = sp + 0xFFFFFFFFFFFFFFF8
	x0 = 0x00000000004AC000
	x0 = x0 + 0xFFFFFFFFFFFFFE88
	call get_locale_var (retsize: 0;)
	x1 = x0
	w0 = 0x00000005
	setlocale(x0, x1)
	sp = sp + 0xFFFFFFFFFFFFFFF8
	x0 = 0x00000000004AC000
	x0 = x0 + 0xFFFFFFFFFFFFFE98
	call get_locale_var (retsize: 0;)
	x1 = x0
	w0 = 0x00000001
	setlocale(x0, x1)
	sp = sp + 0xFFFFFFFFFFFFFFF8
	x0 = 0x00000000004AC000
	x0 = x0 + 0xFFFFFFFFFFFFFEA8
	call get_locale_var (retsize: 0;)
	x1 = x0
	w0 = 0x00000002
	setlocale(x0, x1)
	sp = sp + 0xFFFFFFFFFFFFFFF8
	call fn00000000004666C8 (retsize: 0;)
	w0 = 0x00000001
	// succ:  l0000000000466B4C
l0000000000466B4C:
	x19 = Mem0[sp + 16:word64]
	x29 = Mem0[sp:word64]
	sp = sp + 8
	x30 = Mem0[sp:word64]
	sp = sp + 32
	return
	// succ:  fn0000000000466A9C_exit
l0000000000466B58:
	call maybe_make_export_env (retsize: 0;)
	x19 = x19 + 0x00000000000005F0
	x1 = Mem0[x19 + 32:word64]
	branch x1 != 0x0000000000000000 l0000000000466AC0
	// succ:  l0000000000466B68 l0000000000466AC0
l0000000000466B68:
	x1 = 0x00000000004AC000
	x1 = x1 + 0x0000000000000460
	goto l0000000000466AC0
	// succ:  l0000000000466AC0
fn0000000000466A9C_exit:


// set_lang
// Return size: 0
void set_lang()
set_lang_entry:
	// succ:  l0000000000466B74
l0000000000466B74:
	sp = fp
	sp = sp + -48
	Mem0[sp:word64] = x29
	sp = sp + 8
	Mem0[sp:word64] = x30
	x29 = x31 + 0x0000000000000000
	v6 = sp + 16
	Mem0[v6:word64] = x19
	v6 = v6 + 8
	Mem0[v6:word64] = x20
	x19 = 0x00000000004E1000
	x0 = x19 + 0x00000000000005F0
	x0 = Mem0[x0 + 32:word64]
	Mem0[sp + 32:word64] = x21
	x20 = x1
	x21 = 0x00000000004AE000
	branch x0 == 0x0000000000000000 l0000000000466BA8
	// succ:  l0000000000466B9C l0000000000466BA8
l0000000000466B9C:
	x1 = x21 + 0xFFFFFFFFFFFFFEF0
	w2 = 0x00000106
	call sh_xfree (retsize: 0;)
	// succ:  l0000000000466BA8
l0000000000466BA8:
	branch x20 == 0x0000000000000000 l0000000000466C0C
	// succ:  l0000000000466BAC l0000000000466C0C
l0000000000466BAC:
	x0 = x20
	strlen(x0)
	sp = sp + 0xFFFFFFFFFFFFFFF8
	w2 = 0x00000108
	x1 = x21 + 0xFFFFFFFFFFFFFEF0
	x0 = x0 + 0x0000000000000001
	call sh_xmalloc (retsize: 0;)
	x1 = x20
	strcpy(x0, x1)
	sp = sp + 0xFFFFFFFFFFFFFFF8
	x1 = x19 + 0x00000000000005F0
	Mem0[x1 + 32:word64] = x0
	// succ:  l0000000000466BD4
l0000000000466BD4:
	x19 = x19 + 0x00000000000005F0
	x0 = Mem0[x19 + 8:word64]
	branch x0 == 0x0000000000000000 l0000000000466BE8
	// succ:  l0000000000466BE0 l0000000000466BE8
l0000000000466BE0:
	v13 = Mem0[x0:byte]
	w0 = (word32) v13
	branch w0 != 0x00000000 l0000000000466BF8
	// succ:  l0000000000466BE8 l0000000000466BF8
l0000000000466BE8:
	v15 = sp + 16
	x19 = Mem0[v15:word64]
	v15 = v15 + 8
	x20 = Mem0[v15:word64]
	x21 = Mem0[sp + 32:word64]
	x29 = Mem0[sp:word64]
	sp = sp + 8
	x30 = Mem0[sp:word64]
	sp = sp + 48
	// succ:  l0000000000466BF4_thunk_fn0000000000466A9C
l0000000000466BF4_thunk_fn0000000000466A9C:
	call fn0000000000466A9C (retsize: 0;)
	return
	// succ:  set_lang_exit
l0000000000466BF8:
	w0 = 0x00000000
	v16 = sp + 16
	x19 = Mem0[v16:word64]
	v16 = v16 + 8
	x20 = Mem0[v16:word64]
	x21 = Mem0[sp + 32:word64]
	x29 = Mem0[sp:word64]
	sp = sp + 8
	x30 = Mem0[sp:word64]
	sp = sp + 48
	return
	// succ:  set_lang_exit
l0000000000466C0C:
	x1 = x21 + 0xFFFFFFFFFFFFFEF0
	x0 = 0x0000000000000001
	w2 = 0x0000010B
	call sh_xmalloc (retsize: 0;)
	x1 = x19 + 0x00000000000005F0
	Mem0[x1 + 32:word64] = x0
	Mem0[x0:byte] = (byte) w20
	goto l0000000000466BD4
	// succ:  l0000000000466BD4
set_lang_exit:


// set_locale_var
// Return size: 0
void set_locale_var()
set_locale_var_entry:
	// succ:  l0000000000466C2C
l0000000000466C2C:
	sp = fp
	sp = sp + -80
	Mem0[sp:word64] = x29
	sp = sp + 8
	Mem0[sp:word64] = x30
	x29 = x31 + 0x0000000000000000
	v8 = sp + 16
	Mem0[v8:word64] = x19
	v8 = v8 + 8
	Mem0[v8:word64] = x20
	v11 = sp + 32
	Mem0[v11:word64] = x21
	v11 = v11 + 8
	Mem0[v11:word64] = x22
	x19 = x0
	Mem0[sp + 48:word64] = x23
	x20 = x1
	__errno_location()
	sp = sp + 0xFFFFFFFFFFFFFFF8
	Mem0[x0:word32] = 0x00000000
	x22 = x0
	v16 = Mem0[x19:byte]
	w0 = (word32) v16
	w31 = w0 - 0x00000054
	NZCV = cond(w31)
	branch Test(EQ,Z) l0000000000466CAC
	// succ:  l0000000000466C60 l0000000000466CAC
l0000000000466C60:
	v21 = Mem0[x19 + 3:byte]
	w1 = (word32) v21
	w31 = w1 - 0x00000041
	NZCV = cond(w31)
	branch Test(EQ,Z) l0000000000466D90
	// succ:  l0000000000466C6C l0000000000466D90
l0000000000466C6C:
	w31 = w1 - 0x00000043
	NZCV = cond(w31)
	branch Test(EQ,Z) l0000000000466EA8
	// succ:  l0000000000466C74 l0000000000466EA8
l0000000000466C74:
	w31 = w1 - 0x0000004D
	NZCV = cond(w31)
	branch Test(EQ,Z) l0000000000466E1C
	// succ:  l0000000000466C7C l0000000000466E1C
l0000000000466C7C:
	w31 = w1 - 0x0000004E
	NZCV = cond(w31)
	branch Test(NE,Z) l0000000000466EF8
	// succ:  l0000000000466C84 l0000000000466EF8
l0000000000466C84:
	v22 = Mem0[x19 + 4:byte]
	w0 = (word32) v22
	w21 = 0x00000001
	w31 = w0 - 0x00000055
	NZCV = cond(w31)
	branch Test(EQ,Z) l0000000000467030
	// succ:  l0000000000466C94 l0000000000467030
l0000000000466C94:
	w0 = w21
	v24 = sp + 16
	x19 = Mem0[v24:word64]
	v24 = v24 + 8
	x20 = Mem0[v24:word64]
	v25 = sp + 32
	x21 = Mem0[v25:word64]
	v25 = v25 + 8
	x22 = Mem0[v25:word64]
	x23 = Mem0[sp + 48:word64]
	x29 = Mem0[sp:word64]
	sp = sp + 8
	x30 = Mem0[sp:word64]
	sp = sp + 80
	return
	// succ:  set_locale_var_exit
l0000000000466CAC:
	v26 = Mem0[x19 + 10:byte]
	w0 = (word32) v26
	x19 = 0x00000000004E1000
	branch w0 != 0x00000000 l0000000000466D20
	// succ:  l0000000000466CB8 l0000000000466D20
l0000000000466CB8:
	x0 = x19 + 0x00000000000005F0
	x0 = Mem0[x0 + 16:word64]
	branch x0 == 0x0000000000000000 l0000000000466CD4
	// succ:  l0000000000466CC4 l0000000000466CD4
l0000000000466CC4:
	x1 = 0x00000000004AE000
	x1 = x1 + 0xFFFFFFFFFFFFFEF0
	w2 = 0x0000009E
	call sh_xfree (retsize: 0;)
	// succ:  l0000000000466CD4
l0000000000466CD4:
	x0 = x20
	branch x20 == 0x0000000000000000 l0000000000466CFC
	// succ:  l0000000000466CDC l0000000000466CFC
l0000000000466CDC:
	strlen(x0)
	sp = sp + 0xFFFFFFFFFFFFFFF8
	x1 = 0x00000000004AE000
	x1 = x1 + 0xFFFFFFFFFFFFFEF0
	w2 = 0x0000009F
	x0 = x0 + 0x0000000000000001
	call sh_xmalloc (retsize: 0;)
	x1 = x20
	strcpy(x0, x1)
	sp = sp + 0xFFFFFFFFFFFFFFF8
	// succ:  l0000000000466CFC
l0000000000466CFC:
	x19 = x19 + 0x00000000000005F0
	Mem0[x19 + 16:word64] = x0
	w21 = 0x00000001
	w0 = w21
	v29 = sp + 16
	x19 = Mem0[v29:word64]
	v29 = v29 + 8
	x20 = Mem0[v29:word64]
	v30 = sp + 32
	x21 = Mem0[v30:word64]
	v30 = v30 + 8
	x22 = Mem0[v30:word64]
	x23 = Mem0[sp + 48:word64]
	x29 = Mem0[sp:word64]
	sp = sp + 8
	x30 = Mem0[sp:word64]
	sp = sp + 80
	return
	// succ:  set_locale_var_exit
l0000000000466D20:
	x0 = x19 + 0x00000000000005F0
	x0 = Mem0[x0 + 24:word64]
	branch x0 == 0x0000000000000000 l0000000000466D3C
	// succ:  l0000000000466D2C l0000000000466D3C
l0000000000466D2C:
	x1 = 0x00000000004AE000
	x1 = x1 + 0xFFFFFFFFFFFFFEF0
	w2 = 0x000000A8
	call sh_xfree (retsize: 0;)
	// succ:  l0000000000466D3C
l0000000000466D3C:
	branch x20 == 0x0000000000000000 l0000000000466EA0
	// succ:  l0000000000466D40 l0000000000466EA0
l0000000000466D40:
	x0 = x20
	strlen(x0)
	sp = sp + 0xFFFFFFFFFFFFFFF8
	x1 = 0x00000000004AE000
	w2 = 0x000000A9
	x1 = x1 + 0xFFFFFFFFFFFFFEF0
	x0 = x0 + 0x0000000000000001
	call sh_xmalloc (retsize: 0;)
	x1 = x20
	strcpy(x0, x1)
	sp = sp + 0xFFFFFFFFFFFFFFF8
	x1 = x0
	// succ:  l0000000000466D68
l0000000000466D68:
	x19 = x19 + 0x00000000000005F0
	x2 = Mem0[x19 + 16:word64]
	Mem0[x19 + 24:word64] = x1
	branch x2 == 0x0000000000000000 l0000000000466F9C
	// succ:  l0000000000466D78 l0000000000466F9C
l0000000000466D78:
	v32 = Mem0[x2:byte]
	w0 = (word32) v32
	w21 = 0x00000001
	branch w0 == 0x00000000 l0000000000466C94
	// succ:  l0000000000466D84 l0000000000466C94
l0000000000466D84:
	x0 = x2
	bindtextdomain(x0, x1)
	sp = sp + 0xFFFFFFFFFFFFFFF8
	goto l0000000000466C94
	// succ:  l0000000000466C94
l0000000000466D90:
	x19 = 0x00000000004E1000
	x0 = x19 + 0x00000000000005F0
	x0 = Mem0[x0 + 8:word64]
	x21 = 0x00000000004AE000
	branch x0 == 0x0000000000000000 l0000000000466DB0
	// succ:  l0000000000466DA4 l0000000000466DB0
l0000000000466DA4:
	x1 = x21 + 0xFFFFFFFFFFFFFEF0
	w2 = 0x000000B3
	call sh_xfree (retsize: 0;)
	// succ:  l0000000000466DB0
l0000000000466DB0:
	branch x20 == 0x0000000000000000 l0000000000466F48
	// succ:  l0000000000466DB4 l0000000000466F48
l0000000000466DB4:
	x0 = x20
	strlen(x0)
	sp = sp + 0xFFFFFFFFFFFFFFF8
	w2 = 0x000000B5
	x1 = x21 + 0xFFFFFFFFFFFFFEF0
	x0 = x0 + 0x0000000000000001
	call sh_xmalloc (retsize: 0;)
	x1 = x20
	strcpy(x0, x1)
	sp = sp + 0xFFFFFFFFFFFFFFF8
	x20 = x0
	x19 = x19 + 0x00000000000005F0
	v42 = Mem0[x0:byte]
	w0 = (word32) v42
	Mem0[x19 + 8:word64] = x20
	branch w0 == 0x00000000 l0000000000466F64
	// succ:  l0000000000466DE8 l0000000000466F64
l0000000000466DE8:
	w0 = 0x00000006
	x1 = x20
	setlocale(x0, x1)
	sp = sp + 0xFFFFFFFFFFFFFFF8
	x31 = x0 - x31
	NZCV = cond(x31)
	w21 = (word32) Test(NE,Z)
	branch x0 == 0x0000000000000000 l0000000000466F74
	// succ:  l0000000000466E00 l0000000000466F74
l0000000000466E00:
	call fn00000000004666C8 (retsize: 0;)
	// succ:  l0000000000466E04
l0000000000466E04:
	w0 = w21
	v43 = sp + 16
	x19 = Mem0[v43:word64]
	v43 = v43 + 8
	x20 = Mem0[v43:word64]
	v44 = sp + 32
	x21 = Mem0[v44:word64]
	v44 = v44 + 8
	x22 = Mem0[v44:word64]
	x23 = Mem0[sp + 48:word64]
	x29 = Mem0[sp:word64]
	sp = sp + 8
	x30 = Mem0[sp:word64]
	sp = sp + 80
	return
	// succ:  set_locale_var_exit
l0000000000466E1C:
	v37 = Mem0[x19 + 4:byte]
	w0 = (word32) v37
	w21 = 0x00000001
	w31 = w0 - 0x00000045
	NZCV = cond(w31)
	branch Test(NE,Z) l0000000000466C94
	// succ:  l0000000000466E2C l0000000000466C94
l0000000000466E2C:
	x0 = 0x00000000004E1000
	x0 = x0 + 0x00000000000005F0
	x0 = Mem0[x0 + 8:word64]
	branch x0 == 0x0000000000000000 l0000000000466E44
	// succ:  l0000000000466E3C l0000000000466E44
l0000000000466E3C:
	v38 = Mem0[x0:byte]
	w0 = (word32) v38
	branch w0 != 0x00000000 l0000000000466C94
	// succ:  l0000000000466E44 l0000000000466C94
l0000000000466E44:
	x0 = 0x00000000004AC000
	x0 = x0 + 0xFFFFFFFFFFFFFE88
	call get_locale_var (retsize: 0;)
	x1 = x0
	w0 = 0x00000005
	setlocale(x0, x1)
	sp = sp + 0xFFFFFFFFFFFFFFF8
	x20 = x0
	// succ:  l0000000000466E60
l0000000000466E60:
	branch x20 != 0x0000000000000000 l0000000000466F9C
	// succ:  l0000000000466E64 l0000000000466F9C
l0000000000466E64:
	w21 = Mem0[x22:word32]
	branch w21 != 0x00000000 l0000000000466FE4
	// succ:  l0000000000466E6C l0000000000466FE4
l0000000000466E6C:
	x1 = 0x00000000004AE000
	x1 = x1 + 0xFFFFFFFFFFFFFF88
	w2 = 0x00000005
	x0 = x20
	dcgettext(x0, x1, x2)
	sp = sp + 0xFFFFFFFFFFFFFFF8
	x20 = x0
	x0 = x19
	call get_locale_var (retsize: 0;)
	x2 = x0
	x1 = x19
	x0 = x20
	call internal_warning (retsize: 0;)
	goto l0000000000466C94
	// succ:  l0000000000466C94
l0000000000466EA0:
	x1 = x20
	goto l0000000000466D68
	// succ:  l0000000000466D68
l0000000000466EA8:
	v39 = Mem0[x19 + 4:byte]
	w0 = (word32) v39
	w31 = w0 - 0x00000054
	NZCV = cond(w31)
	branch Test(EQ,Z) l0000000000466FA4
	// succ:  l0000000000466EB4 l0000000000466FA4
l0000000000466EB4:
	w31 = w0 - 0x0000004F
	NZCV = cond(w31)
	w21 = 0x00000001
	branch Test(NE,Z) l0000000000466C94
	// succ:  l0000000000466EC0 l0000000000466C94
l0000000000466EC0:
	x0 = 0x00000000004E1000
	x0 = x0 + 0x00000000000005F0
	x0 = Mem0[x0 + 8:word64]
	branch x0 == 0x0000000000000000 l0000000000466ED8
	// succ:  l0000000000466ED0 l0000000000466ED8
l0000000000466ED0:
	v40 = Mem0[x0:byte]
	w0 = (word32) v40
	branch w0 != 0x00000000 l0000000000466C94
	// succ:  l0000000000466ED8 l0000000000466C94
l0000000000466ED8:
	x0 = 0x00000000004AC000
	x0 = x0 + 0xFFFFFFFFFFFFFE68
	call get_locale_var (retsize: 0;)
	x1 = x0
	w0 = 0x00000003
	setlocale(x0, x1)
	sp = sp + 0xFFFFFFFFFFFFFFF8
	x20 = x0
	goto l0000000000466E60
	// succ:  l0000000000466E60
l0000000000466EF8:
	w31 = w1 - 0x00000054
	NZCV = cond(w31)
	branch Test(NE,Z) l0000000000466F9C
	// succ:  l0000000000466F00 l0000000000466F9C
l0000000000466F00:
	v33 = Mem0[x19 + 4:byte]
	w0 = (word32) v33
	w21 = 0x00000001
	w31 = w0 - 0x00000049
	NZCV = cond(w31)
	branch Test(NE,Z) l0000000000466C94
	// succ:  l0000000000466F10 l0000000000466C94
l0000000000466F10:
	x0 = 0x00000000004E1000
	x0 = x0 + 0x00000000000005F0
	x0 = Mem0[x0 + 8:word64]
	branch x0 == 0x0000000000000000 l0000000000466F28
	// succ:  l0000000000466F20 l0000000000466F28
l0000000000466F20:
	v34 = Mem0[x0:byte]
	w0 = (word32) v34
	branch w0 != 0x00000000 l0000000000466C94
	// succ:  l0000000000466F28 l0000000000466C94
l0000000000466F28:
	x0 = 0x00000000004AC000
	x0 = x0 + 0xFFFFFFFFFFFFFEA8
	call get_locale_var (retsize: 0;)
	x1 = x0
	w0 = 0x00000002
	setlocale(x0, x1)
	sp = sp + 0xFFFFFFFFFFFFFFF8
	x20 = x0
	goto l0000000000466E60
	// succ:  l0000000000466E60
l0000000000466F48:
	x0 = 0x0000000000000001
	x1 = x21 + 0xFFFFFFFFFFFFFEF0
	w2 = 0x000000B8
	call sh_xmalloc (retsize: 0;)
	x19 = x19 + 0x00000000000005F0
	Mem0[x19 + 8:word64] = x0
	Mem0[x0:byte] = (byte) w20
	// succ:  l0000000000466F64
l0000000000466F64:
	call fn0000000000466A9C (retsize: 0;)
	w21 = w0
	call fn00000000004666C8 (retsize: 0;)
	goto l0000000000466E04
	// succ:  l0000000000466E04
l0000000000466F74:
	w1 = Mem0[x22:word32]
	branch w1 != 0x00000000 l0000000000467068
	// succ:  l0000000000466F7C l0000000000467068
l0000000000466F7C:
	x1 = 0x00000000004AE000
	w2 = 0x00000005
	x1 = x1 + 0xFFFFFFFFFFFFFF20
	dcgettext(x0, x1, x2)
	sp = sp + 0xFFFFFFFFFFFFFFF8
	x1 = x20
	call internal_warning (retsize: 0;)
	call fn00000000004666C8 (retsize: 0;)
	goto l0000000000466E04
	// succ:  l0000000000466E04
l0000000000466F9C:
	w21 = 0x00000001
	goto l0000000000466C94
	// succ:  l0000000000466C94
l0000000000466FA4:
	x0 = 0x00000000004E1000
	x0 = x0 + 0x00000000000005F0
	x0 = Mem0[x0 + 8:word64]
	branch x0 == 0x0000000000000000 l0000000000466FC0
	// succ:  l0000000000466FB4 l0000000000466FC0
l0000000000466FB4:
	v41 = Mem0[x0:byte]
	w0 = (word32) v41
	w21 = 0x00000001
	branch w0 != 0x00000000 l0000000000466C94
	// succ:  l0000000000466FC0 l0000000000466C94
l0000000000466FC0:
	x0 = 0x00000000004AC000
	x0 = x0 + 0xFFFFFFFFFFFFFE78
	call get_locale_var (retsize: 0;)
	x1 = x0
	w0 = 0x00000000
	setlocale(x0, x1)
	sp = sp + 0xFFFFFFFFFFFFFFF8
	x20 = x0
	call fn00000000004666C8 (retsize: 0;)
	goto l0000000000466E60
	// succ:  l0000000000466E60
l0000000000466FE4:
	x1 = 0x00000000004AE000
	x1 = x1 + 0xFFFFFFFFFFFFFFB8
	w2 = 0x00000005
	x0 = x20
	dcgettext(x0, x1, x2)
	sp = sp + 0xFFFFFFFFFFFFFFF8
	x23 = x0
	x0 = x19
	call get_locale_var (retsize: 0;)
	x2 = x0
	w0 = Mem0[x22:word32]
	Mem0[x29 + 64:word64] = x2
	strerror(x0)
	sp = sp + 0xFFFFFFFFFFFFFFF8
	x2 = Mem0[x29 + 64:word64]
	x3 = x0
	x1 = x19
	x0 = x23
	w21 = w20
	call internal_warning (retsize: 0;)
	goto l0000000000466C94
	// succ:  l0000000000466C94
l0000000000467030:
	x0 = 0x00000000004E1000
	x0 = x0 + 0x00000000000005F0
	x0 = Mem0[x0 + 8:word64]
	branch x0 == 0x0000000000000000 l0000000000467048
	// succ:  l0000000000467040 l0000000000467048
l0000000000467040:
	v28 = Mem0[x0:byte]
	w0 = (word32) v28
	branch w0 != 0x00000000 l0000000000466C94
	// succ:  l0000000000467048 l0000000000466C94
l0000000000467048:
	x0 = 0x00000000004AC000
	x0 = x0 + 0xFFFFFFFFFFFFFE98
	call get_locale_var (retsize: 0;)
	x1 = x0
	w0 = 0x00000001
	setlocale(x0, x1)
	sp = sp + 0xFFFFFFFFFFFFFFF8
	x20 = x0
	goto l0000000000466E60
	// succ:  l0000000000466E60
l0000000000467068:
	x1 = 0x00000000004AE000
	x1 = x1 + 0xFFFFFFFFFFFFFF50
	w2 = 0x00000005
	dcgettext(x0, x1, x2)
	sp = sp + 0xFFFFFFFFFFFFFFF8
	x19 = x0
	w0 = Mem0[x22:word32]
	strerror(x0)
	sp = sp + 0xFFFFFFFFFFFFFFF8
	x2 = x0
	x1 = x20
	x0 = x19
	call internal_warning (retsize: 0;)
	call fn00000000004666C8 (retsize: 0;)
	goto l0000000000466E04
	// succ:  l0000000000466E04
set_locale_var_exit:


// set_default_lang
// Return size: 0
void set_default_lang()
set_default_lang_entry:
	// succ:  l000000000046709C
l000000000046709C:
	sp = fp
	sp = sp + -32
	Mem0[sp:word64] = x29
	sp = sp + 8
	Mem0[sp:word64] = x30
	x29 = x31 + 0x0000000000000000
	Mem0[sp + 16:word64] = x19
	x19 = 0x00000000004AC000
	x19 = x19 + 0xFFFFFFFFFFFFFE60
	x0 = x19
	call get_string_value (retsize: 0;)
	x1 = x0
	x0 = x19
	x19 = 0x00000000004AC000
	call set_locale_var (retsize: 0;)
	x19 = x19 + 0xFFFFFFFFFFFFFE58
	x0 = x19
	call get_string_value (retsize: 0;)
	x1 = x0
	x0 = x19
	x19 = Mem0[sp + 16:word64]
	x29 = Mem0[sp:word64]
	sp = sp + 8
	x30 = Mem0[sp:word64]
	sp = sp + 32
	// succ:  l00000000004670E4_thunk_set_lang
l00000000004670E4_thunk_set_lang:
	call set_lang (retsize: 0;)
	return
	// succ:  set_default_lang_exit
set_default_lang_exit:


// localetrans
// Return size: 0
void localetrans()
localetrans_entry:
	// succ:  l00000000004670E8
l00000000004670E8:
	sp = fp
	sp = sp + -48
	Mem0[sp:word64] = x29
	sp = sp + 8
	Mem0[sp:word64] = x30
	x29 = x31 + 0x0000000000000000
	v8 = sp + 16
	Mem0[v8:word64] = x19
	v8 = v8 + 8
	Mem0[v8:word64] = x20
	v11 = sp + 32
	Mem0[v11:word64] = x21
	v11 = v11 + 8
	Mem0[v11:word64] = x22
	x19 = x0
	w21 = w1
	x20 = x2
	branch x0 == 0x0000000000000000 l0000000000467110
	// succ:  l0000000000467108 l0000000000467110
l0000000000467108:
	v17 = Mem0[x0:byte]
	w0 = (word32) v17
	branch w0 != 0x00000000 l000000000046712C
	// succ:  l0000000000467110 l000000000046712C
l0000000000467110:
	branch x20 == 0x0000000000000000 l0000000000467118
	// succ:  l0000000000467114 l0000000000467118
l0000000000467114:
	Mem0[x20:word32] = 0x00000000
	// succ:  l0000000000467118
l0000000000467118:
	x0 = 0x0000000000000000
	v18 = sp + 16
	x19 = Mem0[v18:word64]
	v18 = v18 + 8
	x20 = Mem0[v18:word64]
	v19 = sp + 32
	x21 = Mem0[v19:word64]
	v19 = v19 + 8
	x22 = Mem0[v19:word64]
	x29 = Mem0[sp:word64]
	sp = sp + 8
	x30 = Mem0[sp:word64]
	sp = sp + 48
	return
	// succ:  localetrans_exit
l000000000046712C:
	x0 = 0x00000000004AC000
	x0 = x0 + 0xFFFFFFFFFFFFFE88
	call get_locale_var (retsize: 0;)
	branch x0 == 0x0000000000000000 l0000000000467194
	// succ:  l000000000046713C l0000000000467194
l000000000046713C:
	v21 = Mem0[x0:byte]
	w2 = (word32) v21
	branch w2 == 0x00000000 l0000000000467194
	// succ:  l0000000000467144 l0000000000467194
l0000000000467144:
	w31 = w2 - 0x00000043
	NZCV = cond(w31)
	branch Test(EQ,Z) l00000000004671D8
	// succ:  l000000000046714C l00000000004671D8
l000000000046714C:
	w31 = w2 - 0x00000050
	NZCV = cond(w31)
	branch Test(EQ,Z) l0000000000467184
	// succ:  l0000000000467154 l0000000000467184
l0000000000467154:
	x0 = 0x00000000004E1000
	x0 = x0 + 0x00000000000005F0
	x0 = Mem0[x0 + 16:word64]
	branch x0 == 0x0000000000000000 l000000000046716C
	// succ:  l0000000000467164 l000000000046716C
l0000000000467164:
	v25 = Mem0[x0:byte]
	w1 = (word32) v25
	branch w1 != 0x00000000 l00000000004671E4
	// succ:  l000000000046716C l00000000004671E4
l000000000046716C:
	w0 = w21 + 0x00000001
	x1 = 0x00000000004AE000
l0000000000467184:
	x1 = 0x00000000004AE000
	x1 = x1 + 0xFFFFFFFFFFFFFFE8
	strcmp(x0, x1)
	sp = sp + 0xFFFFFFFFFFFFFFF8
	branch w0 != 0x00000000 l0000000000467154
	// succ:  l0000000000467194 l0000000000467154
l0000000000467194:
	w0 = w21 + 0x00000001
	x1 = 0x00000000004AE000
l00000000004671D8:
	v27 = Mem0[x0 + 1:byte]
	w0 = (word32) v27
	branch w0 == 0x00000000 l0000000000467194
	// succ:  l00000000004671E0 l0000000000467194
l00000000004671E0:
	goto l0000000000467154
	// succ:  l0000000000467154
l00000000004671E4:
	x1 = x19
	w2 = 0x00000005
	dcgettext(x0, x1, x2)
	sp = sp + 0xFFFFFFFFFFFFFFF8
	x31 = x19 - x0
	NZCV = cond(x31)
	x22 = x0
	branch Test(EQ,Z) l000000000046716C
	// succ:  l00000000004671FC l000000000046716C
l00000000004671FC:
	strlen(x0)
	sp = sp + 0xFFFFFFFFFFFFFFF8
	x19 = x0
	x1 = 0x00000000004AE000
	w0 = w0 + 0x00000001
	w2 = 0x0000018F
	x1 = x1 + 0xFFFFFFFFFFFFFEF0
localetrans_exit:


// mk_msgstr
// Return size: 0
void mk_msgstr()
mk_msgstr_entry:
	// succ:  l0000000000467234
l0000000000467234:
	sp = fp
	sp = sp + -32
	Mem0[sp:word64] = x29
	sp = sp + 8
	Mem0[sp:word64] = x30
	x29 = x31 + 0x0000000000000000
	v8 = sp + 16
	Mem0[v8:word64] = x19
	v8 = v8 + 8
	Mem0[v8:word64] = x20
	x19 = x0
	x20 = x1
	branch x0 == 0x0000000000000000 l000000000046734C
	// succ:  l000000000046724C l000000000046734C
l000000000046724C:
	v12 = Mem0[x0:byte]
	w2 = (word32) v12
	branch w2 == 0x00000000 l0000000000467370
	// succ:  l0000000000467254 l0000000000467370
l0000000000467254:
	x3 = x0
	w0 = 0x00000000
	// succ:  l000000000046725C
l000000000046725C:
	w31 = w2 - 0x0000005C
	NZCV = cond(w31)
	branch Test(EQ,Z) l0000000000467270
	// succ:  l0000000000467264 l0000000000467270
l0000000000467264:
	w31 = w2 - 0x00000022
	NZCV = cond(w31)
	w4 = w0 + 0x00000006
	branch Test(NE,Z) l0000000000467340
	// succ:  l0000000000467270 l0000000000467340
l0000000000467270:
	w0 = w0 + 0x00000002
	x3 = x3 + 0x0000000000000001
	NZCV = cond(x3)
	branch Test(EQ,Z) l0000000000467284
	// succ:  l000000000046727C l0000000000467284
l000000000046727C:
	v19 = Mem0[x3:byte]
	w2 = (word32) v19
	branch w2 != 0x00000000 l000000000046725C
	// succ:  l0000000000467284 l000000000046725C
l0000000000467284:
	w0 = w0 + 0x00000003
l000000000046728C:
	x1 = 0x00000000004AE000
	w2 = 0x000001AA
	x1 = x1 + 0xFFFFFFFFFFFFFEF0
	call sh_xmalloc (retsize: 0;)
	w6 = 0x00000022
	Mem0[x0:byte] = (byte) w6
	v23 = Mem0[x19:byte]
	w2 = (word32) v23
	x3 = x0 + 0x0000000000000001
	w4 = w2
	branch w2 == 0x00000000 l0000000000467328
	// succ:  l00000000004672B4 l0000000000467328
l00000000004672B4:
	w5 = 0x0000005C
	w1 = 0x0000006E
	w7 = 0x00000001
	goto l00000000004672F8
	// succ:  l00000000004672F8
l00000000004672C4:
	w31 = w2 - 0x0000005C
	NZCV = cond(w31)
	branch Test(EQ,Z) l00000000004672D4
	// succ:  l00000000004672CC l00000000004672D4
l00000000004672CC:
	w31 = w2 - 0x00000022
	NZCV = cond(w31)
	branch Test(NE,Z) l00000000004672DC
	// succ:  l00000000004672D4 l00000000004672DC
l00000000004672D4:
	Mem0[x3:byte] = (byte) w5
	x3 = x3 + 0x0000000000000001
	// succ:  l00000000004672DC
l00000000004672DC:
	Mem0[x3:byte] = (byte) w2
	x3 = x3 + 0x0000000000000001
	// succ:  l00000000004672E4
l00000000004672E4:
	x19 = x19 + 0x0000000000000001
	NZCV = cond(x19)
	branch Test(EQ,Z) l0000000000467328
	// succ:  l00000000004672EC l0000000000467328
l00000000004672EC:
	v26 = Mem0[x19:byte]
	w2 = (word32) v26
	w4 = w2
	branch w2 == 0x00000000 l0000000000467328
	// succ:  l00000000004672F8 l0000000000467328
l00000000004672F8:
	w31 = w2 - 0x0000000A
	NZCV = cond(w31)
	branch Test(NE,Z) l00000000004672C4
	// succ:  l0000000000467300 l00000000004672C4
l0000000000467300:
	Mem0[x3 + 3:byte] = (byte) w4
	Mem0[x3:byte] = (byte) w5
	Mem0[x3 + 1:byte] = (byte) w1
	Mem0[x3 + 2:byte] = (byte) w6
	Mem0[x3 + 4:byte] = (byte) w6
	x3 = x3 + 0x0000000000000005
	branch x20 == 0x0000000000000000 l00000000004672E4
	// succ:  l000000000046731C l00000000004672E4
l000000000046731C:
	Mem0[x20:word32] = w7
	x19 = x19 + 0x0000000000000001
	NZCV = cond(x19)
	branch Test(NE,Z) l00000000004672EC
	// succ:  l0000000000467328 l00000000004672EC
l0000000000467328:
	w1 = 0x00000022
	Mem0[x3:byte] = (byte) w1
	Mem0[x3 + 1:byte] = 0x00
	v21 = sp + 16
	x19 = Mem0[v21:word64]
	v21 = v21 + 8
	x20 = Mem0[v21:word64]
	x29 = Mem0[sp:word64]
	sp = sp + 8
	x30 = Mem0[sp:word64]
	sp = sp + 32
	return
	// succ:  mk_msgstr_exit
l0000000000467340:
	w31 = w2 - 0x0000000A
	NZCV = cond(w31)
l000000000046734C:
	x1 = 0x00000000004AE000
	x1 = x1 + 0xFFFFFFFFFFFFFEF0
	x0 = 0x0000000000000003
	w2 = 0x000001AA
	call sh_xmalloc (retsize: 0;)
	w1 = 0x00000022
	x3 = x0 + 0x0000000000000001
	Mem0[x0:byte] = (byte) w1
	goto l0000000000467328
	// succ:  l0000000000467328
l0000000000467370:
	x0 = 0x0000000000000003
	goto l000000000046728C
	// succ:  l000000000046728C
mk_msgstr_exit:


// localeexpand
// Return size: 0
void localeexpand()
localeexpand_entry:
	// succ:  l0000000000467378
l0000000000467378:
	sp = fp
	sp = sp + -112
	Mem0[sp:word64] = x29
	sp = sp + 8
	Mem0[sp:word64] = x30
	x29 = x31 + 0x0000000000000000
	v8 = sp + 16
	Mem0[v8:word64] = x19
	v8 = v8 + 8
	Mem0[v8:word64] = x20
	w20 = w2
	w2 = w2 - w1
	v14 = sp + 48
	Mem0[v14:word64] = x23
	v14 = v14 + 8
	Mem0[v14:word64] = x24
	w2 = w2 + 0x00000001
	x24 = 0x00000000004AE000
	v17 = sp + 32
	Mem0[v17:word64] = x21
	v17 = v17 + 8
	Mem0[v17:word64] = x22
	w19 = w1
	x21 = x0
	x1 = x24 + 0xFFFFFFFFFFFFFEF0
localeexpand_exit:


// fn0000000000467560
// Return size: 0
void fn0000000000467560()
fn0000000000467560_entry:
	// succ:  l0000000000467560
l0000000000467560:
	sp = fp
	sp = sp + -32
	Mem0[sp:word64] = x29
	sp = sp + 8
	Mem0[sp:word64] = x30
	x29 = x31 + 0x0000000000000000
	Mem0[sp + 16:word64] = x19
	call extract_colon_unit (retsize: 0;)
	x1 = x0
	branch x0 == 0x0000000000000000 l0000000000467580
	// succ:  l0000000000467578 l0000000000467580
l0000000000467578:
	v10 = Mem0[x0:byte]
	w2 = (word32) v10
	branch w2 == 0x00000000 l0000000000467590
	// succ:  l0000000000467580 l0000000000467590
l0000000000467580:
	x0 = x1
	x19 = Mem0[sp + 16:word64]
	x29 = Mem0[sp:word64]
	sp = sp + 8
	x30 = Mem0[sp:word64]
	sp = sp + 32
	return
	// succ:  fn0000000000467560_exit
l0000000000467590:
	x19 = 0x00000000004AF000
	x19 = x19 + 0x0000000000000018
	x1 = x19
	w2 = 0x00000122
	call sh_xfree (retsize: 0;)
	x1 = x19
	w2 = 0x00000123
	x0 = 0x0000000000000002
	call sh_xmalloc (retsize: 0;)
	x1 = 0x00000000004B2000
	x1 = x1 + 0xFFFFFFFFFFFFFD68
	v11 = Mem0[x1:word16]
	w2 = (word32) v11
	x1 = x0
	Mem0[x0:word16] = (word16) w2
	x19 = Mem0[sp + 16:word64]
	x0 = x1
	x29 = Mem0[sp:word64]
	sp = sp + 8
	x30 = Mem0[sp:word64]
	sp = sp + 32
	return
	// succ:  fn0000000000467560_exit
fn0000000000467560_exit:


// file_status
// Return size: 0
void file_status()
file_status_entry:
	// succ:  l00000000004675D8
l00000000004675D8:
	sp = fp
	sp = sp + -160
	Mem0[sp:word64] = x29
	sp = sp + 8
	Mem0[sp:word64] = x30
	x29 = x31 + 0x0000000000000000
	Mem0[sp + 16:word64] = x19
	x1 = x0
	x19 = x0
	x2 = x29 + 0x0000000000000020
	w0 = 0x00000000
	__xstat(x0, x1, x2)
	sp = sp + 0xFFFFFFFFFFFFFFF8
	branch (w0 & 0x00000000) == 0x00000000 l000000000046764C
	// succ:  l00000000004675FC l000000000046764C
l00000000004675FC:
	w1 = Mem0[x29 + 48:word32]
	w0 = 0x00000011
	w1 = w1 & 0x0000F000
	w31 = w1 - (0x00000004 << 12)
	NZCV = cond(w31)
	branch Test(EQ,Z) l0000000000467640
	// succ:  l0000000000467610 l0000000000467640
l0000000000467610:
	w1 = 0x00000001
	x0 = x19
	call eaccess (retsize: 0;)
	NZCV = cond(w0 - w31)
	w1 = 0x00000004
	x0 = x19
	w19 = 0x00000003
l0000000000467640:
	x19 = Mem0[sp + 16:word64]
	x29 = Mem0[sp:word64]
	sp = sp + 8
	x30 = Mem0[sp:word64]
	sp = sp + 160
	return
	// succ:  file_status_exit
l000000000046764C:
	w0 = 0x00000000
	x19 = Mem0[sp + 16:word64]
	x29 = Mem0[sp:word64]
	sp = sp + 8
	x30 = Mem0[sp:word64]
	sp = sp + 160
	return
	// succ:  file_status_exit
file_status_exit:


// fn000000000046765C
// Return size: 0
void fn000000000046765C()
fn000000000046765C_entry:
	// succ:  l000000000046765C
l000000000046765C:
	sp = fp
	sp = sp + -48
	Mem0[sp:word64] = x29
	sp = sp + 8
	Mem0[sp:word64] = x30
	x29 = x31 + 0x0000000000000000
	Mem0[sp + 16:word64] = x19
	Mem0[x29 + 32:word64] = x1
	x19 = x0
	call file_status (retsize: 0;)
	x1 = Mem0[x29 + 32:word64]
	branch (w0 & 0x00000001) == 0x00000000 l00000000004676B4
	// succ:  l000000000046767C l00000000004676B4
l000000000046767C:
	branch (w1 & 0x00000001) == 0x00000000 l0000000000467688
	// succ:  l0000000000467680 l0000000000467688
l0000000000467680:
	branch (w1 & 0x00000008) == 0x00000000 l00000000004676B4
	// succ:  l0000000000467684 l00000000004676B4
l0000000000467684:
	branch (w0 & 0x00000002) == 0x00000000 l00000000004676B4
	// succ:  l0000000000467688 l00000000004676B4
l0000000000467688:
	x0 = x19
	strlen(x0)
	sp = sp + 0xFFFFFFFFFFFFFFF8
	x1 = 0x00000000004AF000
	x1 = x1 + 0x0000000000000018
	w2 = 0x000001CD
	x0 = x0 + 0x0000000000000001
	call sh_xmalloc (retsize: 0;)
	x1 = x19
	x19 = Mem0[sp + 16:word64]
	x29 = Mem0[sp:word64]
	sp = sp + 8
	x30 = Mem0[sp:word64]
	sp = sp + 48
	strcpy(x0, x1)
	return
	// succ:  fn000000000046765C_exit
l00000000004676B4:
	x0 = 0x0000000000000000
	x19 = Mem0[sp + 16:word64]
	x29 = Mem0[sp:word64]
	sp = sp + 8
	x30 = Mem0[sp:word64]
	sp = sp + 48
	return
	// succ:  fn000000000046765C_exit
fn000000000046765C_exit:


// fn00000000004676C4
// Return size: 0
void fn00000000004676C4()
fn00000000004676C4_entry:
	// succ:  l00000000004676C4
l00000000004676C4:
	sp = fp
	sp = sp + -80
	Mem0[sp:word64] = x29
	sp = sp + 8
	Mem0[sp:word64] = x30
	x29 = x31 + 0x0000000000000000
	v8 = sp + 16
	Mem0[v8:word64] = x19
	v8 = v8 + 8
	Mem0[v8:word64] = x20
	v11 = sp + 32
	Mem0[v11:word64] = x21
	v11 = v11 + 8
	Mem0[v11:word64] = x22
	v14 = sp + 48
	Mem0[v14:word64] = x23
	v14 = v14 + 8
	Mem0[v14:word64] = x24
	x21 = x1
	v17 = Mem0[x1:byte]
	w1 = (word32) v17
	x23 = x0
	w31 = w1 - 0x0000007E
	NZCV = cond(w31)
	w19 = w2
	x20 = x21
	branch Test(EQ,Z) l0000000000467854
	// succ:  l00000000004676F4 l0000000000467854
l00000000004676F4:
	x24 = 0x00000000004E1000
	x22 = x24 + 0x0000000000000618
	w4 = Mem0[x22:word32]
	branch w4 != 0x00000000 l0000000000467710
	// succ:  l0000000000467704 l0000000000467710
l0000000000467704:
	v26 = Mem0[x20:byte]
	w0 = (word32) v26
	w31 = w0 - 0x0000002E
	NZCV = cond(w31)
	branch Test(EQ,Z) l0000000000467834
	// succ:  l0000000000467710 l0000000000467834
l0000000000467710:
	x1 = x23
	w2 = 0x00000000
	x0 = x20
	call sh_makepath (retsize: 0;)
	x23 = x0
	call file_status (retsize: 0;)
	x31 = x21 - x20
	NZCV = cond(x31)
	w22 = w0
	branch Test(EQ,Z) l0000000000467748
	// succ:  l0000000000467734 l0000000000467748
l0000000000467734:
	x1 = 0x00000000004AF000
	x0 = x20
	x1 = x1 + 0x0000000000000018
	w2 = 0x000001E8
	call sh_xfree (retsize: 0;)
	// succ:  l0000000000467748
l0000000000467748:
	branch (w22 & 0x00000001) == 0x00000000 l0000000000467870
	// succ:  l000000000046774C l0000000000467870
l000000000046774C:
	x0 = x23
	branch (w19 & 0x00000001) == 0x00000000 l000000000046779C
	// succ:  l0000000000467754 l000000000046779C
l0000000000467754:
	w20 = w19 & 0x00000040
	branch (w19 & 0x00000040) == 0x00000000 l00000000004677B0
	// succ:  l000000000046775C l00000000004677B0
l000000000046775C:
	w21 = w19 & 0x0000000C
	branch (w22 & 0x00000002) == 0x00000000 l00000000004677C0
	// succ:  l0000000000467764 l00000000004677C0
l0000000000467764:
	w21 = w19 & 0x0000000C
	NZ = cond(w21)
	C = false
	V = false
	branch Test(EQ,Z) l00000000004677C0
	// succ:  l000000000046776C l00000000004677C0
l000000000046776C:
	branch (w19 & 0x00000020) == 0x00000000 l0000000000467774
	// succ:  l0000000000467770 l0000000000467774
l0000000000467770:
	branch (w22 & 0x00000010) == 0x00000000 l00000000004677C0
	// succ:  l0000000000467774 l00000000004677C0
l0000000000467774:
	x0 = x24 + 0x0000000000000618
	x0 = Mem0[x0 + 8:word64]
	branch x0 == 0x0000000000000000 l0000000000467790
	// succ:  l0000000000467780 l0000000000467790
l0000000000467780:
	x1 = 0x00000000004AF000
	x1 = x1 + 0x0000000000000018
	w2 = 0x000001FE
	call sh_xfree (retsize: 0;)
	// succ:  l0000000000467790
l0000000000467790:
	x24 = x24 + 0x0000000000000618
	Mem0[x24 + 8:word64] = 0x0000000000000000
	x0 = x23
	// succ:  l000000000046779C
l000000000046779C:
	v35 = sp + 16
	x19 = Mem0[v35:word64]
	v35 = v35 + 8
	x20 = Mem0[v35:word64]
	v36 = sp + 32
	x21 = Mem0[v36:word64]
	v36 = v36 + 8
	x22 = Mem0[v36:word64]
	v37 = sp + 48
	x23 = Mem0[v37:word64]
	v37 = v37 + 8
	x24 = Mem0[v37:word64]
	x29 = Mem0[sp:word64]
	sp = sp + 8
	x30 = Mem0[sp:word64]
	sp = sp + 80
	return
	// succ:  fn00000000004676C4_exit
l00000000004677B0:
	x0 = x23
	branch (w22 & 0x00000040) == 0x00000000 l000000000046779C
	// succ:  l00000000004677B8 l000000000046779C
l00000000004677B8:
	w21 = w19 & 0x0000000C
	branch (w22 & 0x00000002) == 0x00000000 l0000000000467764
	// succ:  l00000000004677C0 l0000000000467764
l00000000004677C0:
	branch (w19 & 0x00000004) == 0x00000000 l00000000004677F4
	// succ:  l00000000004677C4 l00000000004677F4
l00000000004677C4:
	branch w21 != 0x00000000 l00000000004677D8
	// succ:  l00000000004677C8 l00000000004677D8
l00000000004677C8:
	branch (w19 & 0x00000020) == 0x00000000 l000000000046782C
	// succ:  l00000000004677CC l000000000046782C
l00000000004677CC:
	x0 = x23
	branch w20 == 0x00000000 l000000000046779C
	// succ:  l00000000004677D4 l000000000046779C
l00000000004677D4:
	branch (w22 & 0x00000040) == 0x00000000 l000000000046779C
	// succ:  l00000000004677D8 l000000000046779C
l00000000004677D8:
	x1 = 0x00000000004AF000
	x0 = x23
	x1 = x1 + 0x0000000000000018
	w2 = 0x00000210
	call sh_xfree (retsize: 0;)
	x0 = 0x0000000000000000
	goto l000000000046779C
	// succ:  l000000000046779C
l00000000004677F4:
	x24 = x24 + 0x0000000000000618
	x0 = Mem0[x24 + 8:word64]
	branch x0 != 0x0000000000000000 l00000000004677C4
	// succ:  l0000000000467800 l00000000004677C4
l0000000000467800:
	x0 = x23
	strlen(x0)
	sp = sp + 0xFFFFFFFFFFFFFFF8
	x1 = 0x00000000004AF000
	w2 = 0x00000207
	x1 = x1 + 0x0000000000000018
	x0 = x0 + 0x0000000000000001
	call sh_xmalloc (retsize: 0;)
	x1 = x23
	strcpy(x0, x1)
	sp = sp + 0xFFFFFFFFFFFFFFF8
	Mem0[x24 + 8:word64] = x0
	goto l00000000004677C4
	// succ:  l00000000004677C4
l000000000046782C:
	branch (w22 & 0x00000010) == 0x00000000 l00000000004677CC
	// succ:  l0000000000467830 l00000000004677CC
l0000000000467830:
	goto l00000000004677D8
	// succ:  l00000000004677D8
l0000000000467834:
	x0 = 0x00000000004B2000
	x2 = x3
	x0 = x0 + 0xFFFFFFFFFFFFFD68
	x1 = x20
	x3 = 0x0000000000000000
	call same_file (retsize: 0;)
	Mem0[x22:word32] = w0
	goto l0000000000467710
	// succ:  l0000000000467710
l0000000000467854:
	x0 = x21
	w1 = 0x00000000
	Mem0[x29 + 64:word64] = x3
	call bash_tilde_expand (retsize: 0;)
	x20 = x0
	x3 = Mem0[x29 + 64:word64]
	goto l00000000004676F4
	// succ:  l00000000004676F4
l0000000000467870:
	x1 = 0x00000000004AF000
	x0 = x23
	x1 = x1 + 0x0000000000000018
	w2 = 0x000001EC
	call sh_xfree (retsize: 0;)
	x0 = 0x0000000000000000
	goto l000000000046779C
	// succ:  l000000000046779C
fn00000000004676C4_exit:


// fn000000000046788C
// Return size: 0
void fn000000000046788C()
fn000000000046788C_entry:
	// succ:  l000000000046788C
l000000000046788C:
	sp = fp
	sp = sp + -240
	Mem0[sp:word64] = x29
	sp = sp + 8
	Mem0[sp:word64] = x30
	x29 = x31 + 0x0000000000000000
	v8 = sp + 64
	Mem0[v8:word64] = x25
	v8 = v8 + 8
	Mem0[v8:word64] = x26
	x26 = 0x00000000004E1000
	v11 = sp + 16
	Mem0[v11:word64] = x19
	v11 = v11 + 8
	Mem0[v11:word64] = x20
	v14 = sp + 32
	Mem0[v14:word64] = x21
	v14 = v14 + 8
	Mem0[v14:word64] = x22
	v17 = sp + 48
	Mem0[v17:word64] = x23
	v17 = v17 + 8
	Mem0[v17:word64] = x24
	Mem0[sp + 80:word64] = x27
	x20 = x26 + 0x0000000000000618
	x22 = x0
	x21 = x1
	w23 = w2
	Mem0[x20:word32] = 0x00000000
	call absolute_program (retsize: 0;)
	w19 = w0
	branch w0 != 0x00000000 l0000000000467A3C
	goto l00000000004678CC
	// succ:  l00000000004678CC l0000000000467A3C
l000000000046788C:
l00000000004678CC:
	branch x21 == 0x0000000000000000 l00000000004678D8
	// succ:  l00000000004678D0 l00000000004678D8
l00000000004678D0:
	v26 = Mem0[x21:byte]
	w1 = (word32) v26
	branch w1 != 0x00000000 l0000000000467920
	// succ:  l00000000004678D8 l0000000000467920
l00000000004678D8:
	x0 = x22
	strlen(x0)
	sp = sp + 0xFFFFFFFFFFFFFFF8
	x1 = 0x00000000004AF000
	w2 = 0x00000238
	x1 = x1 + 0x0000000000000018
	x0 = x0 + 0x0000000000000001
	call sh_xmalloc (retsize: 0;)
	x1 = x22
	strcpy(x0, x1)
	sp = sp + 0xFFFFFFFFFFFFFFF8
	x20 = x0
	// succ:  l0000000000467900
l0000000000467900:
	x0 = x20
	v27 = sp + 32
	x21 = Mem0[v27:word64]
	v27 = v27 + 8
	x22 = Mem0[v27:word64]
	v28 = sp + 16
	x19 = Mem0[v28:word64]
	v28 = v28 + 8
	x20 = Mem0[v28:word64]
	v29 = sp + 48
	x23 = Mem0[v29:word64]
	v29 = v29 + 8
	x24 = Mem0[v29:word64]
	v30 = sp + 64
	x25 = Mem0[v30:word64]
	v30 = v30 + 8
	x26 = Mem0[v30:word64]
	x27 = Mem0[sp + 80:word64]
	x29 = Mem0[sp:word64]
	sp = sp + 8
	x30 = Mem0[sp:word64]
	sp = sp + 240
	return
	// succ:  fn000000000046788C_exit
l0000000000467920:
	x1 = 0x00000000004B2000
	x1 = x1 + 0xFFFFFFFFFFFFFD68
	x2 = x29 + 0x0000000000000060
	Mem0[x20 + 8:word64] = 0x0000000000000000
	__xstat(x0, x1, x2)
	sp = sp + 0xFFFFFFFFFFFFFFF8
	v37 = Mem0[x21 + (int64) ((int32) w19):byte]
	w3 = (word32) v37
	x24 = 0x00000000004E1000
	x27 = 0x00000000004E1000
	x25 = 0x00000000004AF000
	Mem0[x29 + 224:word32] = w19
	x24 = x24 + 0x0000000000000284
	x27 = x27 + 0x0000000000000278
	x25 = x25 + 0x0000000000000018
	branch w3 == 0x00000000 l00000000004679EC
	// succ:  l0000000000467958 l00000000004679EC
l0000000000467958:
	w3 = Mem0[x24:word32]
	branch w3 != 0x00000000 l0000000000467A30
	// succ:  l0000000000467960 l0000000000467A30
l0000000000467960:
	w3 = Mem0[x27:word32]
	branch w3 != 0x00000000 l0000000000467A28
	// succ:  l0000000000467968 l0000000000467A28
l0000000000467968:
	x1 = x29 + 0x00000000000000E0
	x0 = x21
	call fn0000000000467560 (retsize: 0;)
	x19 = x0
	x3 = x29 + 0x0000000000000060
	w2 = w23
	x0 = x22
	x1 = x19
	branch x19 == 0x0000000000000000 l00000000004679EC
	// succ:  l000000000046798C l00000000004679EC
l000000000046798C:
	call fn00000000004676C4 (retsize: 0;)
	x20 = x0
	x1 = x25
	x0 = x19
	w2 = 0x0000024B
	call sh_xfree (retsize: 0;)
	x0 = x20
	branch x20 == 0x0000000000000000 l00000000004679E0
	// succ:  l00000000004679AC l00000000004679E0
l00000000004679AC:
	call file_status (retsize: 0;)
	branch (w0 & 0x00000010) == 0x00000000 l00000000004679D0
	// succ:  l00000000004679B4 l00000000004679D0
l00000000004679B4:
	x26 = x26 + 0x0000000000000618
	x0 = Mem0[x26 + 8:word64]
	branch x0 == 0x0000000000000000 l0000000000467900
	// succ:  l00000000004679C0 l0000000000467900
l00000000004679C0:
	x1 = x25
	w2 = 0x00000257
	call sh_xfree (retsize: 0;)
	goto l0000000000467900
	// succ:  l0000000000467900
l00000000004679D0:
	x0 = x20
	x1 = x25
	w2 = 0x00000251
	call sh_xfree (retsize: 0;)
	// succ:  l00000000004679E0
l00000000004679E0:
	w19 = Mem0[x29 + 224:word32]
	v39 = Mem0[x21 + (int64) ((int32) w19):byte]
	w3 = (word32) v39
	branch w3 != 0x00000000 l0000000000467958
	// succ:  l00000000004679EC l0000000000467958
l00000000004679EC:
	x26 = x26 + 0x0000000000000618
	x20 = Mem0[x26 + 8:word64]
	branch x20 == 0x0000000000000000 l0000000000467900
	// succ:  l00000000004679F8 l0000000000467900
l00000000004679F8:
	branch (w23 & 0x00000020) == 0x00000000 l0000000000467900
	// succ:  l00000000004679FC l0000000000467900
l00000000004679FC:
	x0 = x20
	call file_status (retsize: 0;)
	branch (w0 & 0x00000010) == 0x00000000 l0000000000467900
	// succ:  l0000000000467A08 l0000000000467900
l0000000000467A08:
	x1 = 0x00000000004AF000
	x0 = x20
	x1 = x1 + 0x0000000000000018
	w2 = 0x00000264
	x20 = 0x0000000000000000
	call sh_xfree (retsize: 0;)
	Mem0[x26 + 8:word64] = x20
	goto l0000000000467900
	// succ:  l0000000000467900
l0000000000467A28:
	call throw_to_top_level (retsize: 0;)
	goto l0000000000467968
	// succ:  l0000000000467968
l0000000000467A30:
	w0 = Mem0[x24:word32]
	call termsig_handler (retsize: 0;)
	goto l0000000000467960
	// succ:  l0000000000467960
l0000000000467A3C:
	w1 = w23
	x0 = x22
	call fn000000000046765C (retsize: 0;)
	x20 = x0
	x0 = x20
	v31 = sp + 32
	x21 = Mem0[v31:word64]
	v31 = v31 + 8
	x22 = Mem0[v31:word64]
	v32 = sp + 16
	x19 = Mem0[v32:word64]
	v32 = v32 + 8
	x20 = Mem0[v32:word64]
	v33 = sp + 48
	x23 = Mem0[v33:word64]
	v33 = v33 + 8
	x24 = Mem0[v33:word64]
	v34 = sp + 64
	x25 = Mem0[v34:word64]
	v34 = v34 + 8
	x26 = Mem0[v34:word64]
	x27 = Mem0[sp + 80:word64]
	x29 = Mem0[sp:word64]
	sp = sp + 8
	x30 = Mem0[sp:word64]
	sp = sp + 240
	return
	// succ:  fn000000000046788C_exit
fn000000000046788C_exit:


// fn0000000000467A6C
// Return size: 0
void fn0000000000467A6C()
fn0000000000467A6C_entry:
	// succ:  l0000000000467A6C
l0000000000467A6C:
	sp = fp
	sp = sp + -32
	Mem0[sp:word64] = x29
	sp = sp + 8
	Mem0[sp:word64] = x30
	x29 = x31 + 0x0000000000000000
	v8 = sp + 16
	Mem0[v8:word64] = x19
	v8 = v8 + 8
	Mem0[v8:word64] = x20
	x19 = x0
	x0 = 0x00000000004AA000
	w20 = w1
	x0 = x0 + 0x0000000000000210
	w1 = 0x00000001
	call find_variable_internal (retsize: 0;)
	branch x0 == 0x0000000000000000 l0000000000467AA4
	goto l0000000000467A94
	// succ:  l0000000000467A94 l0000000000467AA4
l0000000000467A6C:
l0000000000467A94:
	x1 = Mem0[x0 + 8:word64]
	branch x1 == 0x0000000000000000 l0000000000467AA4
	// succ:  l0000000000467A9C l0000000000467AA4
l0000000000467A9C:
	v14 = Mem0[x1:byte]
	w0 = (word32) v14
	branch w0 != 0x00000000 l0000000000467AD0
	// succ:  l0000000000467AA4 l0000000000467AD0
l0000000000467AA4:
	x0 = x19
	strlen(x0)
	sp = sp + 0xFFFFFFFFFFFFFFF8
	x1 = 0x00000000004AF000
	x1 = x1 + 0x0000000000000018
	w2 = 0x000000F4
	x0 = x0 + 0x0000000000000001
	call sh_xmalloc (retsize: 0;)
	x1 = x19
	v16 = sp + 16
	x19 = Mem0[v16:word64]
	v16 = v16 + 8
	x20 = Mem0[v16:word64]
	x29 = Mem0[sp:word64]
	sp = sp + 8
	x30 = Mem0[sp:word64]
	sp = sp + 32
	strcpy(x0, x1)
	return
	// succ:  fn0000000000467A6C_exit
l0000000000467AD0:
	x0 = x19
	w2 = w20
	v17 = sp + 16
	x19 = Mem0[v17:word64]
	v17 = v17 + 8
	x20 = Mem0[v17:word64]
	x29 = Mem0[sp:word64]
	sp = sp + 8
	x30 = Mem0[sp:word64]
	sp = sp + 32
	// succ:  l0000000000467AE0_thunk_fn000000000046788C
l0000000000467AE0_thunk_fn000000000046788C:
	call fn000000000046788C (retsize: 0;)
	return
	// succ:  fn0000000000467A6C_exit
fn0000000000467A6C_exit:


// executable_file
// Return size: 0
void executable_file()
executable_file_entry:
	// succ:  l0000000000467AE4
l0000000000467AE4:
	sp = fp
	sp = sp + -32
	Mem0[sp:word64] = x29
	sp = sp + 8
	Mem0[sp:word64] = x30
	x29 = x31 + 0x0000000000000000
	Mem0[sp + 16:word64] = x19
	call file_status (retsize: 0;)
	w19 = w0
	branch (w19 & 0x00000010) == 0x00000000 l0000000000467B08
	// succ:  l0000000000467AFC l0000000000467B08
l0000000000467AFC:
	__errno_location()
	sp = sp + 0xFFFFFFFFFFFFFFF8
	w1 = 0x00000015
	Mem0[x0:word32] = w1
	// succ:  l0000000000467B08
l0000000000467B08:
	w0 = 0x00000012
	w19 = w19 & w0
	w31 = w19 - 0x00000002
	NZCV = cond(w31)
	w0 = (word32) Test(EQ,Z)
	x19 = Mem0[sp + 16:word64]
	x29 = Mem0[sp:word64]
	sp = sp + 8
	x30 = Mem0[sp:word64]
	sp = sp + 32
	return
	// succ:  executable_file_exit
executable_file_exit:


// is_directory
// Return size: 0
void is_directory()
is_directory_entry:
	// succ:  l0000000000467B24
l0000000000467B24:
	sp = fp
	sp = sp + -16
	Mem0[sp:word64] = x29
	sp = sp + 8
	Mem0[sp:word64] = x30
	x29 = x31 + 0x0000000000000000
	call file_status (retsize: 0;)
	w0 = w0 & 0x00000010
	x29 = Mem0[sp:word64]
	sp = sp + 8
	x30 = Mem0[sp:word64]
	sp = sp + 16
	return
	// succ:  is_directory_exit
is_directory_exit:


// executable_or_directory
// Return size: 0
void executable_or_directory()
executable_or_directory_entry:
	// succ:  l0000000000467B3C
l0000000000467B3C:
	sp = fp
	sp = sp + -16
	Mem0[sp:word64] = x29
	sp = sp + 8
	Mem0[sp:word64] = x30
	x29 = x31 + 0x0000000000000000
	call file_status (retsize: 0;)
	w1 = 0x00000012
	NZ = cond(w0 & w1)
	C = false
	V = false
	w0 = (word32) Test(NE,Z)
	x29 = Mem0[sp:word64]
	sp = sp + 8
	x30 = Mem0[sp:word64]
	sp = sp + 16
	return
	// succ:  executable_or_directory_exit
executable_or_directory_exit:


// find_user_command
// Return size: 0
void find_user_command()
find_user_command_entry:
	// succ:  l0000000000467B5C
l0000000000467B5C:
	sp = fp
	w1 = 0x00000024
	// succ:  l0000000000467B60_thunk_fn0000000000467A6C
l0000000000467B60_thunk_fn0000000000467A6C:
	call fn0000000000467A6C (retsize: 0;)
	return
	// succ:  find_user_command_exit
find_user_command_exit:


// find_path_file
// Return size: 0
void find_path_file()
find_path_file_entry:
	// succ:  l0000000000467B64
l0000000000467B64:
	sp = fp
	w1 = 0x00000040
	// succ:  l0000000000467B68_thunk_fn0000000000467A6C
l0000000000467B68_thunk_fn0000000000467A6C:
	call fn0000000000467A6C (retsize: 0;)
	return
	// succ:  find_path_file_exit
find_path_file_exit:


// search_for_command
// Return size: 0
void search_for_command()
search_for_command_entry:
	// succ:  l0000000000467B6C
l0000000000467B6C:
	sp = fp
	sp = sp + -48
	Mem0[sp:word64] = x29
	sp = sp + 8
	Mem0[sp:word64] = x30
	x29 = x31 + 0x0000000000000000
	v8 = sp + 16
	Mem0[v8:word64] = x19
	v8 = v8 + 8
	Mem0[v8:word64] = x20
	x20 = x0
	x0 = 0x00000000004AA000
	w1 = 0x00000001
	x0 = x0 + 0x0000000000000210
	Mem0[sp + 32:word64] = x21
	call find_variable_internal (retsize: 0;)
	x19 = x0
	branch x0 == 0x0000000000000000 l0000000000467C0C
	// succ:  l0000000000467B98 l0000000000467C0C
l0000000000467B98:
	w0 = Mem0[x0 + 40:word32]
	branch (w0 & 0x00000000) == 0x00000000 l0000000000467C0C
	// succ:  l0000000000467BA0 l0000000000467C0C
l0000000000467BA0:
	w21 = 0x00000001
	// succ:  l0000000000467BA4
l0000000000467BA4:
	x0 = x20
	call absolute_program (retsize: 0;)
	branch w0 != 0x00000000 l0000000000467CA0
	// succ:  l0000000000467BB0 l0000000000467CA0
l0000000000467BB0:
	branch w21 == 0x00000000 l0000000000467C8C
	// succ:  l0000000000467BB4 l0000000000467C8C
l0000000000467BB4:
	x1 = Mem0[x19 + 8:word64]
	x0 = x20
	w2 = 0x00000024
	call fn000000000046788C (retsize: 0;)
	x19 = x0
	// succ:  l0000000000467BC8
l0000000000467BC8:
	branch x19 == 0x0000000000000000 l0000000000467BF8
	// succ:  l0000000000467BCC l0000000000467BF8
l0000000000467BCC:
	x0 = 0x00000000004D6000
	w0 = Mem0[x0 + 3292:word32]
	branch w0 == 0x00000000 l0000000000467BF8
	// succ:  l0000000000467BD8 l0000000000467BF8
l0000000000467BD8:
	branch w21 != 0x00000000 l0000000000467BF8
	// succ:  l0000000000467BDC l0000000000467BF8
l0000000000467BDC:
	x0 = 0x00000000004E1000
	x0 = x0 + 0x0000000000000618
	w2 = Mem0[x0:word32]
	x1 = x19
	x0 = x20
	w3 = 0x00000001
	call phash_insert (retsize: 0;)
	// succ:  l0000000000467BF8
l0000000000467BF8:
	x0 = x19
	x21 = Mem0[sp + 32:word64]
	v18 = sp + 16
	x19 = Mem0[v18:word64]
	v18 = v18 + 8
	x20 = Mem0[v18:word64]
	x29 = Mem0[sp:word64]
	sp = sp + 8
	x30 = Mem0[sp:word64]
	sp = sp + 48
	return
	// succ:  search_for_command_exit
l0000000000467C0C:
	x0 = x20
	call absolute_program (retsize: 0;)
	branch w0 == 0x00000000 l0000000000467C24
	// succ:  l0000000000467C18 l0000000000467C24
l0000000000467C18:
	w21 = 0x00000000
	x19 = 0x0000000000000000
	goto l0000000000467BA4
	// succ:  l0000000000467BA4
l0000000000467C24:
	x0 = x20
	call phash_search (retsize: 0;)
	x19 = x0
	branch x0 == 0x0000000000000000 l0000000000467C7C
	// succ:  l0000000000467C34 l0000000000467C7C
l0000000000467C34:
	x0 = 0x00000000004DE000
	w0 = Mem0[x0 + 1716:word32]
	branch w0 != 0x00000000 l0000000000467C4C
	// succ:  l0000000000467C40 l0000000000467C4C
l0000000000467C40:
	x0 = 0x00000000004E3000
	w0 = Mem0[x0 + 3480:word32]
	branch w0 == 0x00000000 l0000000000467BF8
	// succ:  l0000000000467C4C l0000000000467BF8
l0000000000467C4C:
	x0 = x19
	call file_status (retsize: 0;)
	w0 = w0 & 0x00000003
	w31 = w0 - 0x00000003
	NZCV = cond(w31)
	branch Test(EQ,Z) l0000000000467BF8
	// succ:  l0000000000467C60 l0000000000467BF8
l0000000000467C60:
	x0 = x20
	call phash_remove (retsize: 0;)
	x1 = 0x00000000004AF000
	x0 = x19
	x1 = x1 + 0x0000000000000018
	w2 = 0x0000014D
	call sh_xfree (retsize: 0;)
	// succ:  l0000000000467C7C
l0000000000467C7C:
	x0 = x20
	call absolute_program (retsize: 0;)
	branch w0 != 0x00000000 l0000000000467CA0
	// succ:  l0000000000467C88 l0000000000467CA0
l0000000000467C88:
	w21 = w0
	// succ:  l0000000000467C8C
l0000000000467C8C:
	x0 = x20
	w1 = 0x00000024
	call fn0000000000467A6C (retsize: 0;)
	x19 = x0
	goto l0000000000467BC8
	// succ:  l0000000000467BC8
l0000000000467CA0:
	x0 = x20
	strlen(x0)
	sp = sp + 0xFFFFFFFFFFFFFFF8
	x1 = 0x00000000004AF000
	x1 = x1 + 0x0000000000000018
	w2 = 0x00000157
	x0 = x0 + 0x0000000000000001
	call sh_xmalloc (retsize: 0;)
	x1 = x20
	x21 = Mem0[sp + 32:word64]
	v17 = sp + 16
	x19 = Mem0[v17:word64]
	v17 = v17 + 8
	x20 = Mem0[v17:word64]
	x29 = Mem0[sp:word64]
	sp = sp + 8
	x30 = Mem0[sp:word64]
	sp = sp + 48
	strcpy(x0, x1)
	return
	// succ:  search_for_command_exit
search_for_command_exit:


// user_command_matches
// Return size: 0
void user_command_matches()
user_command_matches_entry:
	// succ:  l0000000000467CD0
l0000000000467CD0:
	sp = fp
	sp = sp + -224
	Mem0[sp:word64] = x29
	sp = sp + 8
	Mem0[sp:word64] = x30
	x29 = x31 + 0x0000000000000000
	v8 = sp + 48
	Mem0[v8:word64] = x23
	v8 = v8 + 8
	Mem0[v8:word64] = x24
	v11 = sp + 16
	Mem0[v11:word64] = x19
	v11 = v11 + 8
	Mem0[v11:word64] = x20
	v14 = sp + 32
	Mem0[v14:word64] = x21
	v14 = v14 + 8
	Mem0[v14:word64] = x22
	v17 = sp + 64
	Mem0[v17:word64] = x25
	v17 = v17 + 8
	Mem0[v17:word64] = x26
	x23 = x0
	w24 = w1
	x20 = 0x00000000004E1000
	branch w2 == 0x00000000 l0000000000467D34
	// succ:  l0000000000467CF8 l0000000000467D34
l0000000000467CF8:
	x0 = x20 + 0x0000000000000618
	w1 = Mem0[x0 + 16:word32]
l0000000000467D04:
	x20 = x20 + 0x0000000000000618
	x2 = Mem0[x20 + 24:word64]
	x0 = Mem0[x2 + x0:word64]
	branch x0 == 0x0000000000000000 l0000000000467D1C
	// succ:  l0000000000467D14 l0000000000467D1C
l0000000000467D14:
	w1 = w1 + 0x00000001
	Mem0[x20 + 16:word32] = w1
	// succ:  l0000000000467D1C
l0000000000467D1C:
	v40 = sp + 16
	x19 = Mem0[v40:word64]
	v40 = v40 + 8
	x20 = Mem0[v40:word64]
	v41 = sp + 32
	x21 = Mem0[v41:word64]
	v41 = v41 + 8
	x22 = Mem0[v41:word64]
	v42 = sp + 48
	x23 = Mem0[v42:word64]
	v42 = v42 + 8
	x24 = Mem0[v42:word64]
	v43 = sp + 64
	x25 = Mem0[v43:word64]
	v43 = v43 + 8
	x26 = Mem0[v43:word64]
	x29 = Mem0[sp:word64]
	sp = sp + 8
	x30 = Mem0[sp:word64]
	sp = sp + 224
	return
	// succ:  user_command_matches_exit
l0000000000467D34:
	x19 = x20 + 0x0000000000000618
	x0 = Mem0[x19 + 24:word64]
	branch x0 == 0x0000000000000000 l0000000000467ED0
	// succ:  l0000000000467D40 l0000000000467ED0
l0000000000467D40:
	x1 = x20 + 0x0000000000000618
	w0 = Mem0[x1 + 32:word32]
	NZCV = cond(w0 - w31)
	branch Test(LE,ZCV) l0000000000467D78
	// succ:  l0000000000467D50 l0000000000467D78
l0000000000467D50:
	x4 = Mem0[x1 + 24:word64]
	w0 = w0 - 0x00000001
	x3 = x4 + 0x0000000000000008
	x0 = x3 + (uint64) ((word32) w0)
	goto l0000000000467D68
	// succ:  l0000000000467D68
l0000000000467D64:
	x3 = x3 + 0x0000000000000008
	// succ:  l0000000000467D68
l0000000000467D68:
	Mem0[x4:word64] = 0x0000000000000000
	x31 = x3 - x0
	NZCV = cond(x31)
	x4 = x3
	branch Test(NE,Z) l0000000000467D64
	// succ:  l0000000000467D78 l0000000000467D64
l0000000000467D78:
	x19 = x20 + 0x0000000000000618
	x0 = x23
	Mem0[x19 + 16:word32] = 0x00000000
	call absolute_program (retsize: 0;)
	w21 = w0
	branch w0 != 0x00000000 l0000000000467E78
	// succ:  l0000000000467D90 l0000000000467E78
l0000000000467D90:
	x1 = 0x00000000004B2000
	x1 = x1 + 0xFFFFFFFFFFFFFD68
	x2 = x29 + 0x0000000000000050
	Mem0[x19 + 8:word64] = 0x0000000000000000
	Mem0[x19:word32] = w0
	__xstat(x0, x1, x2)
	sp = sp + 0xFFFFFFFFFFFFFFF8
	x0 = 0x00000000004AA000
	x0 = x0 + 0x0000000000000210
	call get_string_value (retsize: 0;)
	Mem0[x29 + 208:word32] = w21
	x22 = x0
	branch x0 == 0x0000000000000000 l0000000000467E94
	// succ:  l0000000000467DC0 l0000000000467E94
l0000000000467DC0:
	x25 = 0x00000000004AF000
	x25 = x25 + 0x0000000000000018
	x26 = x25
	goto l0000000000467E1C
	// succ:  l0000000000467E1C
l0000000000467DD0:
	x19 = x20 + 0x0000000000000618
	w1 = Mem0[x19 + 16:word32]
	w0 = Mem0[x19 + 32:word32]
	w4 = w1 + 0x00000001
	NZCV = cond(w4 - w0)
	branch Test(EQ,Z) l0000000000467EA8
	// succ:  l0000000000467DE8 l0000000000467EA8
l0000000000467DE8:
	x5 = Mem0[x19 + 24:word64]
	w6 = w1
	// succ:  l0000000000467DF0
l0000000000467DF0:
	x3 = x20 + 0x0000000000000618
	Mem0[x5 + (int64) ((int32) w6):word64] = x21
	x0 = Mem0[x3 + 8:word64]
	Mem0[x3 + 16:word32] = w4
	Mem0[x5 + (int64) ((int32) w4):word64] = 0x0000000000000000
	branch x0 == 0x0000000000000000 l0000000000467E14
	// succ:  l0000000000467E08 l0000000000467E14
l0000000000467E08:
	x1 = x26
	w2 = 0x000001AC
	call sh_xfree (retsize: 0;)
	// succ:  l0000000000467E14
l0000000000467E14:
	x0 = x20 + 0x0000000000000618
	Mem0[x0 + 8:word64] = 0x0000000000000000
	// succ:  l0000000000467E1C
l0000000000467E1C:
	v32 = Mem0[x29 + 104:int32]
	x3 = (word64) v32
	v34 = Mem0[x22 + x3:byte]
	w3 = (word32) v34
	branch w3 == 0x00000000 l0000000000467E94
	// succ:  l0000000000467E28 l0000000000467E94
l0000000000467E28:
	x1 = x29 + 0x00000000000000D0
	x0 = x22
	call fn0000000000467560 (retsize: 0;)
	x19 = x0
	w2 = w24
	x0 = x23
	x1 = x19
	x3 = x29 + 0x0000000000000050
	branch x19 == 0x0000000000000000 l0000000000467E94
	// succ:  l0000000000467E4C l0000000000467E94
l0000000000467E4C:
	call fn00000000004676C4 (retsize: 0;)
	x21 = x0
	x1 = x25
	x0 = x19
	w2 = 0x0000019F
	call sh_xfree (retsize: 0;)
	branch x21 != 0x0000000000000000 l0000000000467DD0
	// succ:  l0000000000467E68 l0000000000467DD0
l0000000000467E68:
	v35 = Mem0[x29 + 104:int32]
	x0 = (word64) v35
	v36 = Mem0[x22 + x0:byte]
	w0 = (word32) v36
	branch w0 != 0x00000000 l0000000000467E28
	// succ:  l0000000000467E74 l0000000000467E28
l0000000000467E74:
	goto l0000000000467E94
	// succ:  l0000000000467E94
l0000000000467E78:
	w1 = w24
	x0 = x23
	x21 = Mem0[x19 + 24:word64]
	call fn000000000046765C (retsize: 0;)
	x1 = Mem0[x19 + 24:word64]
	Mem0[x21:word64] = x0
	Mem0[x1 + 8:word64] = 0x0000000000000000
	// succ:  l0000000000467E94
l0000000000467E94:
	x1 = x20 + 0x0000000000000618
	x0 = 0x0000000000000000
	Mem0[x1 + 16:word32] = 0x00000000
	w1 = w0
	goto l0000000000467D04
	// succ:  l0000000000467D04
l0000000000467EA8:
	x0 = Mem0[x19 + 24:word64]
	w2 = w1 + 0x0000000B
	w1 = w1 + 0x0000000C
	Mem0[x19 + 32:word32] = w2
	call strvec_resize (retsize: 0;)
	w6 = Mem0[x19 + 16:word32]
	Mem0[x19 + 24:word64] = x0
	w4 = w6 + 0x00000001
	x5 = x0
	goto l0000000000467DF0
	// succ:  l0000000000467DF0
l0000000000467ED0:
	w1 = 0x00000005
	w0 = w1
	Mem0[x19 + 32:word32] = w1
	call strvec_create (retsize: 0;)
	Mem0[x19 + 24:word64] = x0
	goto l0000000000467D40
	// succ:  l0000000000467D40
user_command_matches_exit:


// fn0000000000467EE8
// Return size: 0
void fn0000000000467EE8()
fn0000000000467EE8_entry:
	// succ:  l0000000000467EE8
l0000000000467EE8:
	sp = fp
	sp = sp + -16
	Mem0[sp:word64] = x29
	sp = sp + 8
	Mem0[sp:word64] = x30
	x29 = x31 + 0x0000000000000000
	x1 = 0x00000000004E1000
	x1 = x1 + 0x0000000000000640
	Mem0[x1:word32] = 0x00000000
	x2 = Mem0[x1:word64]
	w3 = 0x00000000
	w1 = 0x00000009
	w0 = w0
	call make_redirection (retsize: 0;)
	w3 = Mem0[x0 + 20:word32]
	x1 = 0x00000000004DF000
	x2 = Mem0[x1 + 3104:word64]
	w3 = w3 | 0x00000008
	Mem0[x0:word64] = x2
	Mem0[x0 + 20:word32] = w3
	Mem0[x1 + 3104:word64] = x0
	x29 = Mem0[sp:word64]
	sp = sp + 8
	x30 = Mem0[sp:word64]
	sp = sp + 16
	w0 = 0x00000000
	return
	// succ:  fn0000000000467EE8_exit
fn0000000000467EE8_exit:


// fn0000000000467F38
// Return size: 0
void fn0000000000467F38()
fn0000000000467F38_entry:
	// succ:  l0000000000467F38
l0000000000467F38:
	sp = fp
	sp = sp + -96
	Mem0[sp:word64] = x29
	sp = sp + 8
	Mem0[sp:word64] = x30
	x29 = x31 + 0x0000000000000000
	v8 = sp + 32
	Mem0[v8:word64] = x21
	v8 = v8 + 8
	Mem0[v8:word64] = x22
	w31 = w2 - 0x0000000A
	NZCV = cond(w31)
	w21 = 0x0000000A
	Mem0[sp + 80:word64] = x27
fn0000000000467F38_exit:


// fn00000000004681B8
// Return size: 0
void fn00000000004681B8()
fn00000000004681B8_entry:
	// succ:  l00000000004681B8
l00000000004681B8:
	sp = fp
	sp = sp + -304
	Mem0[sp:word64] = x29
	sp = sp + 8
	Mem0[sp:word64] = x30
	x29 = x31 + 0x0000000000000000
	v8 = sp + 16
	Mem0[v8:word64] = x19
	v8 = v8 + 8
	Mem0[v8:word64] = x20
	x20 = x0
	w19 = w1
	w0 = 0x00000000
	x1 = x20
	x2 = x29 + 0x00000000000000B0
	Mem0[sp + 32:word64] = x21
	__xstat(x0, x1, x2)
	sp = sp + 0xFFFFFFFFFFFFFFF8
	w21 = w0
	branch w0 != 0x00000000 l0000000000468270
	// succ:  l00000000004681E8 l0000000000468270
l00000000004681E8:
	w0 = Mem0[x29 + 192:word32]
	w0 = w0 & 0x0000F000
	w31 = w0 - (0x00000008 << 12)
	NZCV = cond(w31)
	branch Test(EQ,Z) l000000000046829C
	// succ:  l00000000004681F8 l000000000046829C
l00000000004681F8:
	w1 = w19 & 0xFFFFFDFF
	x0 = x20
	w2 = 0x000001B6
	open(x0, x1)
	sp = sp + 0xFFFFFFFFFFFFFFF8
	w19 = w0
	branch (w19 & 0x00000000) == 0x00000000 l000000000046828C
	// succ:  l0000000000468210 l000000000046828C
l0000000000468210:
	w0 = w21
	w1 = w19
	x2 = x29 + 0x0000000000000030
	__fxstat(x0, x1, x2)
	sp = sp + 0xFFFFFFFFFFFFFFF8
	branch w0 != 0x00000000 l00000000004682B4
	// succ:  l0000000000468224 l00000000004682B4
l0000000000468224:
	w0 = Mem0[x29 + 64:word32]
	w0 = w0 & 0x0000F000
	w31 = w0 - (0x00000008 << 12)
	NZCV = cond(w31)
	branch Test(EQ,Z) l00000000004682B4
	// succ:  l0000000000468234 l00000000004682B4
l0000000000468234:
	w0 = Mem0[x29 + 192:word32]
	w0 = w0 & 0x0000F000
	w31 = w0 - (0x00000008 << 12)
	NZCV = cond(w31)
	branch Test(EQ,Z) l00000000004682B4
	// succ:  l0000000000468244 l00000000004682B4
l0000000000468244:
	x0 = x20
	x1 = x20
	x2 = x29 + 0x00000000000000B0
	x3 = x29 + 0x0000000000000030
	call same_file (retsize: 0;)
	branch w0 == 0x00000000 l00000000004682B4
	// succ:  l000000000046825C l00000000004682B4
l000000000046825C:
	w0 = w19
	x21 = Mem0[sp + 32:word64]
	v22 = sp + 16
	x19 = Mem0[v22:word64]
	v22 = v22 + 8
	x20 = Mem0[v22:word64]
	x29 = Mem0[sp:word64]
	sp = sp + 8
	x30 = Mem0[sp:word64]
	sp = sp + 304
	return
	// succ:  fn00000000004681B8_exit
l0000000000468270:
	w1 = w19 & 0xFFFFFDFF
	x0 = x20
	w1 = w1 | 0x00000080
	w2 = 0x000001B6
	open(x0, x1)
	sp = sp + 0xFFFFFFFFFFFFFFF8
	w19 = w0
	branch (w19 & 0x00000000) == 0x00000000 l000000000046825C
	// succ:  l000000000046828C l000000000046825C
l000000000046828C:
	__errno_location()
	sp = sp + 0xFFFFFFFFFFFFFFF8
	w0 = Mem0[x0:word32]
	w31 = w0 - 0x00000011
	NZCV = cond(w31)
	branch Test(NE,Z) l000000000046825C
	// succ:  l000000000046829C l000000000046825C
l000000000046829C:
	w19 = 0xFFFFFFFE
	// succ:  l00000000004682A0
l00000000004682A0:
	w0 = w19
	x21 = Mem0[sp + 32:word64]
	v23 = sp + 16
	x19 = Mem0[v23:word64]
	v23 = v23 + 8
	x20 = Mem0[v23:word64]
	x29 = Mem0[sp:word64]
	sp = sp + 8
	x30 = Mem0[sp:word64]
	sp = sp + 304
	return
	// succ:  fn00000000004681B8_exit
l00000000004682B4:
	w0 = w19
	close(x0)
	sp = sp + 0xFFFFFFFFFFFFFFF8
	__errno_location()
	sp = sp + 0xFFFFFFFFFFFFFFF8
	w1 = 0x00000011
	Mem0[x0:word32] = w1
	w19 = 0xFFFFFFFE
	goto l00000000004682A0
	// succ:  l00000000004682A0
fn00000000004681B8_exit:


// redirection_expand
// Return size: 0
void redirection_expand()
redirection_expand_entry:
	// succ:  l00000000004682D0
l00000000004682D0:
	sp = fp
	sp = sp + -48
	Mem0[sp:word64] = x29
	sp = sp + 8
	Mem0[sp:word64] = x30
	x29 = x31 + 0x0000000000000000
	v8 = sp + 16
	Mem0[v8:word64] = x19
	v8 = v8 + 8
	Mem0[v8:word64] = x20
	Mem0[sp + 32:word64] = x21
	call copy_word (retsize: 0;)
	x1 = 0x00000000004DE000
	w1 = Mem0[x1 + 1716:word32]
	branch w1 == 0x00000000 l00000000004682FC
	// succ:  l00000000004682F0 l00000000004682FC
l00000000004682F0:
	w1 = Mem0[x0 + 8:word32]
	w1 = w1 | 0x00000010
	Mem0[x0 + 8:word32] = w1
	// succ:  l00000000004682FC
l00000000004682FC:
	x1 = 0x0000000000000000
	call make_word_list (retsize: 0;)
	x20 = 0x00000000004E3000
	w1 = 0x00000001
	x21 = x0
	Mem0[x20 + 3484:word32] = w1
	call expand_words_no_vars (retsize: 0;)
	x19 = x0
	x0 = x21
	Mem0[x20 + 3484:word32] = 0x00000000
	call dispose_words (retsize: 0;)
	branch x19 == 0x0000000000000000 l0000000000468350
	// succ:  l000000000046832C l0000000000468350
l000000000046832C:
	x0 = Mem0[x19:word64]
	branch x0 == 0x0000000000000000 l0000000000468364
	// succ:  l0000000000468334 l0000000000468364
l0000000000468334:
	x0 = x19
	call dispose_words (retsize: 0;)
	x0 = 0x0000000000000000
	// succ:  l0000000000468340
l0000000000468340:
	v13 = sp + 16
	x19 = Mem0[v13:word64]
	v13 = v13 + 8
	x20 = Mem0[v13:word64]
	x21 = Mem0[sp + 32:word64]
	x29 = Mem0[sp:word64]
	sp = sp + 8
	x30 = Mem0[sp:word64]
	sp = sp + 48
	return
	// succ:  redirection_expand_exit
l0000000000468350:
	x0 = x19
	x21 = Mem0[sp + 32:word64]
	v14 = sp + 16
	x19 = Mem0[v14:word64]
	v14 = v14 + 8
	x20 = Mem0[v14:word64]
	x29 = Mem0[sp:word64]
	sp = sp + 8
	x30 = Mem0[sp:word64]
	sp = sp + 48
	return
	// succ:  redirection_expand_exit
l0000000000468364:
	x0 = x19
	call string_list (retsize: 0;)
	x20 = x0
	x0 = x19
	call dispose_words (retsize: 0;)
	x0 = x20
	goto l0000000000468340
	// succ:  l0000000000468340
redirection_expand_exit:


// redirection_error
// Return size: 0
void redirection_error()
redirection_error_entry:
	// succ:  l0000000000468380
l0000000000468380:
	sp = fp
	sp = sp + -64
	Mem0[sp:word64] = x29
	sp = sp + 8
	Mem0[sp:word64] = x30
	x29 = x31 + 0x0000000000000000
	v8 = sp + 16
	Mem0[v8:word64] = x19
	v8 = v8 + 8
	Mem0[v8:word64] = x20
	x19 = x0
	w0 = Mem0[x0 + 16:word32]
	v13 = sp + 32
	Mem0[v13:word64] = x21
	v13 = v13 + 8
	Mem0[v13:word64] = x22
	Mem0[sp + 48:word64] = x23
	w21 = w1
	branch (w0 & 0x00000001) == 0x00000000 l000000000046845C
	// succ:  l00000000004683A4 l000000000046845C
l00000000004683A4:
	w0 = Mem0[x19 + 8:word32]
	branch (w0 & 0x00000000) == 0x00000000 l00000000004685C4
	// succ:  l00000000004683AC l00000000004685C4
l00000000004683AC:
	w31 = w21 - 0x00000009
	NZCV = cond(w31)
	branch Test(EQ,Z) l00000000004685A0
	// succ:  l00000000004683B4 l00000000004685A0
l00000000004683B4:
	w0 = Mem0[x19 + 24:word32]
	w31 = w0 - 0x00000013
	NZCV = cond(w31)
	branch Test(ULE,ZC) l00000000004683FC
	// succ:  l00000000004683C0 l00000000004683FC
l00000000004683C0:
	w0 = Mem0[x19 + 32:word32]
	branch (w0 & 0x00000000) == 0x00000000 l0000000000468514
	// succ:  l00000000004683C8 l0000000000468514
l00000000004683C8:
l00000000004683E4:
	x0 = 0x00000000004AF000
	x0 = x0 + 0x000000000000002C
	v29 = Mem0[x0 + (uint64) ((uint32) w2):byte]
	w4 = (word32) v29
	x1 = 0x00000000004683FC
	x4 = x1 + (int64) ((int8) w4)
l00000000004683FC:
	x1 = 0x00000000004AF000
	x1 = x1 + 0x0000000000000034
	v31 = Mem0[x1 + (uint64) ((uint32) w0):byte]
	w2 = (word32) v31
	x3 = 0x0000000000468414
	x2 = x3 + (int64) ((int8) w2)
l000000000046845C:
	x0 = Mem0[x19 + 8:word64]
	x20 = 0x0000000000000000
	x0 = Mem0[x0:word64]
	strlen(x0)
	sp = sp + 0xFFFFFFFFFFFFFFF8
	x1 = 0x00000000004AF000
	x1 = x1 + 0x00000000000000E0
	w2 = 0x00000076
	x0 = x0 + 0x0000000000000001
	call sh_xmalloc (retsize: 0;)
	x1 = Mem0[x19 + 8:word64]
	x1 = Mem0[x1:word64]
	strcpy(x0, x1)
	sp = sp + 0xFFFFFFFFFFFFFFF8
	x22 = x0
	// succ:  l0000000000468490
l0000000000468490:
	w2 = w21 + 0x00000005
	w31 = w2 - 0x00000004
	NZCV = cond(w31)
	branch Test(ULE,ZC) l00000000004683E4
	// succ:  l000000000046849C l00000000004683E4
l000000000046849C:
	w0 = w21
	strerror(x0)
	sp = sp + 0xFFFFFFFFFFFFFFF8
	x2 = x0
	x0 = 0x00000000004BE000
	x0 = x0 + 0x00000000000007D0
	x1 = x22
	call internal_error (retsize: 0;)
	branch x20 == 0x0000000000000000 l00000000004684E0
	// succ:  l00000000004684BC l00000000004684E0
l00000000004684BC:
	x0 = x20
	v24 = sp + 32
	x21 = Mem0[v24:word64]
	v24 = v24 + 8
	x22 = Mem0[v24:word64]
	v25 = sp + 16
	x19 = Mem0[v25:word64]
	v25 = v25 + 8
	x20 = Mem0[v25:word64]
	x23 = Mem0[sp + 48:word64]
	x1 = 0x00000000004AF000
	x29 = Mem0[sp:word64]
	sp = sp + 8
	x30 = Mem0[sp:word64]
	sp = sp + 64
	x1 = x1 + 0x00000000000000E0
	w2 = 0x000000CC
	// succ:  l00000000004684DC_thunk_sh_xfree
l00000000004684DC_thunk_sh_xfree:
	call sh_xfree (retsize: 0;)
	return
	// succ:  redirection_error_exit
l00000000004684E0:
	v26 = sp + 16
	x19 = Mem0[v26:word64]
	v26 = v26 + 8
	x20 = Mem0[v26:word64]
	v27 = sp + 32
	x21 = Mem0[v27:word64]
	v27 = v27 + 8
	x22 = Mem0[v27:word64]
	x23 = Mem0[sp + 48:word64]
	x29 = Mem0[sp:word64]
	sp = sp + 8
	x30 = Mem0[sp:word64]
	sp = sp + 64
	return
	// succ:  redirection_error_exit
l0000000000468514:
	x22 = 0x00000000004AF000
	x20 = 0x0000000000000000
	x22 = x22 + 0x00000000000000C0
	goto l0000000000468490
	// succ:  l0000000000468490
l00000000004685A0:
	w1 = Mem0[x19 + 24:word32]
	w1 = w1 - 0x00000006
	w31 = w1 - 0x0000000A
	NZCV = cond(w31)
	branch Test(ULE,ZC) l00000000004685E4
	// succ:  l00000000004685B0 l00000000004685E4
l00000000004685B0:
l00000000004685C4:
	x1 = 0x00000000004AF000
	x0 = 0x0000000000000000
	x1 = x1 + 0x00000000000000C0
	w2 = 0x00000005
	dcgettext(x0, x1, x2)
	sp = sp + 0xFFFFFFFFFFFFFFF8
	x22 = x0
	x20 = 0x0000000000000000
	goto l0000000000468490
	// succ:  l0000000000468490
l00000000004685E4:
	x2 = 0x00000000004AF000
	x2 = x2 + 0x0000000000000048
	v34 = Mem0[x2 + (uint64) ((uint32) w1):byte]
	w3 = (word32) v34
	x4 = 0x00000000004685FC
	x3 = x4 + (int64) ((int8) w3)
redirection_error_exit:


// fn0000000000468630
// Return size: 0
void fn0000000000468630()
fn0000000000468630_entry:
	// succ:  l0000000000468630
l0000000000468630:
	sp = fp
	sp = sp + -128
	Mem0[sp:word64] = x29
	sp = sp + 8
	Mem0[sp:word64] = x30
	x29 = x31 + 0x0000000000000000
	v8 = sp + 16
	Mem0[v8:word64] = x19
	v8 = v8 + 8
	Mem0[v8:word64] = x20
	w20 = Mem0[x0 + 24:word32]
	v13 = sp + 48
	Mem0[v13:word64] = x23
	v13 = v13 + 8
	Mem0[v13:word64] = x24
	w24 = Mem0[x0 + 20:word32]
	x19 = x0
	w0 = w20 - 0x00000011
	v18 = sp + 32
	Mem0[v18:word64] = x21
	v18 = v18 + 8
	Mem0[v18:word64] = x22
	v21 = sp + 64
	Mem0[v21:word64] = x25
	v21 = v21 + 8
	Mem0[v21:word64] = x26
	v24 = sp + 80
	Mem0[v24:word64] = x27
	v24 = v24 + 8
	Mem0[v24:word64] = x28
	w24 = w24 & 0x00000008
	w31 = w0 - 0x00000001
	NZCV = cond(w31)
	x21 = Mem0[x19 + 32:word64]
	w25 = Mem0[x19 + 32:word32]
	w22 = Mem0[x19 + 8:word32]
	w24 = w1 | w24
	branch Test(ULE,ZC) l00000000004686CC
	// succ:  l0000000000468678 l00000000004686CC
l0000000000468678:
	w0 = w20 - 0x0000000D
	w31 = w0 - 0x00000001
	NZCV = cond(w31)
	branch Test(ULE,ZC) l00000000004686CC
	// succ:  l0000000000468684 l00000000004686CC
l0000000000468684:
	w31 = w20 - 0x00000013
	NZCV = cond(w31)
	branch Test(ULE,ZC) l00000000004686B4
	// succ:  l000000000046868C l00000000004686B4
l000000000046868C:
	w21 = 0x00000000
	// succ:  l0000000000468690
l0000000000468690:
	x31 = x29 + 0x0000000000000000
	w0 = w21
	v32 = sp + 16
	x19 = Mem0[v32:word64]
	v32 = v32 + 8
	x20 = Mem0[v32:word64]
	v33 = sp + 32
	x21 = Mem0[v33:word64]
	v33 = v33 + 8
	x22 = Mem0[v33:word64]
	v34 = sp + 48
	x23 = Mem0[v34:word64]
	v34 = v34 + 8
	x24 = Mem0[v34:word64]
	v35 = sp + 64
	x25 = Mem0[v35:word64]
	v35 = v35 + 8
	x26 = Mem0[v35:word64]
	v36 = sp + 80
	x27 = Mem0[v36:word64]
	v36 = v36 + 8
	x28 = Mem0[v36:word64]
	x29 = Mem0[sp:word64]
	sp = sp + 8
	x30 = Mem0[sp:word64]
	sp = sp + 128
	return
	// succ:  fn0000000000468630_exit
l00000000004686B4:
	x0 = 0x00000000004AF000
	x0 = x0 + 0x0000000000000054
	v47 = Mem0[x0 + (uint64) ((uint32) w20):word16]
	w3 = (word32) v47
	x1 = 0x00000000004686CC
	x3 = x1 + (int64) ((int16) w3)
l00000000004686CC:
	x0 = x21
	call redirection_expand (retsize: 0;)
	x21 = x0
	branch x0 == 0x0000000000000000 l0000000000469340
	// succ:  l00000000004686DC l0000000000469340
l00000000004686DC:
	v37 = Mem0[x0:byte]
	w0 = (word32) v37
	w31 = w0 - 0x0000002D
	NZCV = cond(w31)
	branch Test(NE,Z) l00000000004686F0
	// succ:  l00000000004686E8 l00000000004686F0
l00000000004686E8:
	v40 = Mem0[x21 + 1:byte]
	w3 = (word32) v40
	branch w3 == 0x00000000 l0000000000468BD0
	// succ:  l00000000004686F0 l0000000000468BD0
l00000000004686F0:
	x0 = x21
	call all_digits (retsize: 0;)
	branch w0 != 0x00000000 l0000000000468C48
	// succ:  l00000000004686FC l0000000000468C48
l00000000004686FC:
	w31 = w20 - 0x0000000E
	NZCV = cond(w31)
	branch Test(NE,Z) l0000000000468D54
	// succ:  l0000000000468704 l0000000000468D54
l0000000000468704:
	w0 = Mem0[x19 + 16:word32]
	w3 = w0 & 0x00000001
	branch (w0 & 0x00000001) == 0x00000000 l0000000000468D54
	// succ:  l0000000000468710 l0000000000468D54
l0000000000468710:
	w31 = w22 - 0x00000001
	NZCV = cond(w31)
	branch Test(NE,Z) l0000000000468D54
	// succ:  l0000000000468718 l0000000000468D54
l0000000000468718:
	x0 = x21
	x22 = Mem0[x19 + 8:word64]
	Mem0[x29 + 120:word64] = x3
	call make_bare_word (retsize: 0;)
	x4 = x0
	x3 = Mem0[x29 + 120:word64]
	x5 = 0x00000000004E1000
	x5 = x5 + 0x0000000000000640
	x0 = x22
	w1 = 0x0000000A
	x2 = x4
	Mem0[x5:word64] = x4
	call make_redirection (retsize: 0;)
	x23 = x0
	// succ:  l0000000000468750
l0000000000468750:
	x25 = 0x00000000004AF000
	x0 = x21
	x1 = x25 + 0x00000000000000E0
	w2 = 0x000002E4
	call sh_xfree (retsize: 0;)
	w20 = Mem0[x23 + 24:word32]
	w31 = w20 - 0x0000000A
	NZCV = cond(w31)
	branch Test(EQ,Z) l0000000000468D70
	// succ:  l0000000000468770 l0000000000468D70
l0000000000468770:
	x21 = Mem0[x23 + 32:word64]
	// succ:  l0000000000468774
l0000000000468774:
	w1 = Mem0[x23 + 20:word32]
	w25 = Mem0[x23 + 32:word32]
	w22 = Mem0[x23 + 8:word32]
	x0 = x23
	Mem0[x19 + 20:word32] = w1
	call dispose_redirects (retsize: 0;)
	goto l0000000000468684
	// succ:  l0000000000468684
l0000000000468BD0:
	x0 = 0x00000000004E1000
	x0 = x0 + 0x0000000000000640
	Mem0[x0:word32] = w3
	x22 = Mem0[x19 + 8:word64]
	x2 = Mem0[x0:word64]
	w1 = 0x00000009
	x0 = x22
	call make_redirection (retsize: 0;)
	x23 = x0
	goto l0000000000468750
	// succ:  l0000000000468750
l0000000000468C48:
	x0 = x21
	x1 = x29 + 0x0000000000000068
	x22 = Mem0[x19 + 8:word64]
	call legal_number (retsize: 0;)
	branch w0 == 0x00000000 l0000000000468C68
	// succ:  l0000000000468C5C l0000000000468C68
l0000000000468C5C:
	x1 = Mem0[x29 + 104:word64]
	NZCV = cond(x1 - (int64) ((int32) w1))
	branch Test(EQ,Z) l0000000000468ECC
	// succ:  l0000000000468C68 l0000000000468ECC
l0000000000468C68:
	x0 = 0x00000000004E1000
	x1 = x0 + 0x0000000000000640
	w2 = 0xFFFFFFFF
	Mem0[x1:word32] = w2
	// succ:  l0000000000468C78
l0000000000468C78:
	w20 = w20 - 0x0000000D
	w31 = w20 - 0x00000005
	NZCV = cond(w31)
	branch Test(UGT,ZC) l0000000000468750
	// succ:  l0000000000468C84 l0000000000468750
l0000000000468C84:
	x1 = 0x00000000004AF000
	x1 = x1 + 0x000000000000007C
	v48 = Mem0[x1 + (uint64) ((uint32) w20):word16]
	w2 = (word32) v48
	x3 = 0x0000000000468C9C
	x2 = x3 + (int64) ((int16) w2)
l0000000000468D54:
	x1 = 0x00000000004AF000
	x0 = x21
	x1 = x1 + 0x00000000000000E0
	w2 = 0x000002E0
	call sh_xfree (retsize: 0;)
	w21 = 0xFFFFFFFF
	goto l0000000000468690
	// succ:  l0000000000468690
l0000000000468D70:
	x31 = x31 - 0x0000000000000020
	x0 = Mem0[x23 + 32:word64]
	x1 = x31 + 0x0000000000000000
	w2 = 0x00000010
	call xbcopy (retsize: 0;)
	x20 = Mem0[x23 + 32:word64]
	x21 = x31 + 0x0000000000000000
	x0 = Mem0[x20:word64]
	strlen(x0)
	sp = sp + 0xFFFFFFFFFFFFFFF8
	x0 = x0 + 0x000000000000001F
	x0 = x0 & 0x0000000000000000
	x31 = x21 - x0
	x0 = x31 + 0x0000000000000000
	Mem0[x21:word64] = x0
	x1 = Mem0[x20:word64]
	strcpy(x0, x1)
	sp = sp + 0xFFFFFFFFFFFFFFF8
	w20 = Mem0[x23 + 24:word32]
	goto l0000000000468774
	// succ:  l0000000000468774
l0000000000468ECC:
	x0 = 0x00000000004E1000
	x2 = x0 + 0x0000000000000640
	Mem0[x2:word32] = w1
	goto l0000000000468C78
	// succ:  l0000000000468C78
l0000000000469340:
	w21 = 0xFFFFFFFF
	goto l0000000000468690
	// succ:  l0000000000468690
fn0000000000468630_exit:


// do_redirections
// Return size: 0
void do_redirections()
do_redirections_entry:
	// succ:  l00000000004694AC
l00000000004694AC:
	sp = fp
	sp = sp + -48
	Mem0[sp:word64] = x29
	sp = sp + 8
	Mem0[sp:word64] = x30
	x29 = x31 + 0x0000000000000000
	v8 = sp + 16
	Mem0[v8:word64] = x19
	v8 = v8 + 8
	Mem0[v8:word64] = x20
	Mem0[sp + 32:word64] = x21
	w21 = w1
	x19 = x0
	branch (w21 & 0x00000002) == 0x00000000 l00000000004694EC
	// succ:  l00000000004694C8 l00000000004694EC
l00000000004694C8:
	x20 = 0x00000000004DF000
	x0 = Mem0[x20 + 3104:word64]
	branch x0 == 0x0000000000000000 l00000000004694DC
	// succ:  l00000000004694D4 l00000000004694DC
l00000000004694D4:
	call dispose_redirects (retsize: 0;)
	Mem0[x20 + 3104:word64] = 0x0000000000000000
	// succ:  l00000000004694DC
l00000000004694DC:
	x0 = 0x00000000004DF000
	x0 = Mem0[x0 + 3072:word64]
	branch x0 == 0x0000000000000000 l00000000004694EC
	// succ:  l00000000004694E8 l00000000004694EC
l00000000004694E8:
	call dispose_exec_redirects (retsize: 0;)
	// succ:  l00000000004694EC
l00000000004694EC:
	branch x19 == 0x0000000000000000 l000000000046950C
	// succ:  l00000000004694F0 l000000000046950C
l00000000004694F0:
	x0 = x19
	w1 = w21
	call fn0000000000468630 (retsize: 0;)
	w20 = w0
	branch w0 != 0x00000000 l0000000000469520
	// succ:  l0000000000469504 l0000000000469520
l0000000000469504:
	x19 = Mem0[x19:word64]
	branch x19 != 0x0000000000000000 l00000000004694F0
	// succ:  l000000000046950C l00000000004694F0
l000000000046950C:
	w0 = 0x00000000
	v15 = sp + 16
	x19 = Mem0[v15:word64]
	v15 = v15 + 8
	x20 = Mem0[v15:word64]
	x21 = Mem0[sp + 32:word64]
	x29 = Mem0[sp:word64]
	sp = sp + 8
	x30 = Mem0[sp:word64]
	sp = sp + 48
	return
	// succ:  do_redirections_exit
l0000000000469520:
	x0 = x19
	w1 = w20
	call redirection_error (retsize: 0;)
	w0 = w20
	x21 = Mem0[sp + 32:word64]
	v16 = sp + 16
	x19 = Mem0[v16:word64]
	v16 = v16 + 8
	x20 = Mem0[v16:word64]
	x29 = Mem0[sp:word64]
	sp = sp + 8
	x30 = Mem0[sp:word64]
	sp = sp + 48
	return
	// succ:  do_redirections_exit
do_redirections_exit:


// stdin_redirects
// Return size: 0
void stdin_redirects()
stdin_redirects_entry:
	// succ:  l0000000000469540
l0000000000469540:
	sp = fp
	branch x0 == 0x0000000000000000 l00000000004695A4
	// succ:  l0000000000469544 l00000000004695A4
l0000000000469544:
	x5 = 0x00000000004AF000
	w3 = 0x00000000
	x5 = x5 + 0x0000000000000088
	// succ:  l0000000000469550
l0000000000469550:
	w1 = Mem0[x0 + 16:word32]
	w2 = w1 & 0x00000001
	branch (w1 & 0x00000001) == 0x00000000 l000000000046958C
	// succ:  l000000000046955C l000000000046958C
l000000000046955C:
	w1 = Mem0[x0 + 24:word32]
	w4 = Mem0[x0 + 8:word32]
	w1 = w1 - 0x00000001
	w31 = w1 - 0x0000000C
	NZCV = cond(w31)
	branch Test(UGT,ZC) l0000000000469588
	// succ:  l0000000000469570 l0000000000469588
l0000000000469570:
	v13 = Mem0[x5 + (uint64) ((uint32) w1):byte]
	w6 = (word32) v13
	x7 = 0x0000000000469580
	x6 = x7 + (int64) ((int8) w6)
	call x6 (retsize: 0;)
	return
	// succ:  stdin_redirects_exit
l0000000000469588:
	w3 = w3 + w2
	// succ:  l000000000046958C
l000000000046958C:
	x0 = Mem0[x0:word64]
	branch x0 != 0x0000000000000000 l0000000000469550
	// succ:  l0000000000469594 l0000000000469550
l0000000000469594:
	w0 = w3
	return
	// succ:  stdin_redirects_exit
l00000000004695A4:
	w3 = w0
	goto l0000000000469594
	// succ:  l0000000000469594
stdin_redirects_exit:


// fn0000000000469B68
// Return size: 0
void fn0000000000469B68()
fn0000000000469B68_entry:
	// succ:  l0000000000469B68
l0000000000469B68:
	sp = fp
	sp = sp + -32
	Mem0[sp:word64] = x29
	sp = sp + 8
	Mem0[sp:word64] = x30
	x29 = x31 + 0x0000000000000000
	Mem0[sp + 16:word64] = x19
	w19 = w0
	x0 = 0x00000000004AF000
	x0 = x0 + 0x00000000000001F0
	call unbind_variable (retsize: 0;)
	x0 = 0x00000000004AF000
	x0 = x0 + 0x0000000000000200
	call unbind_variable (retsize: 0;)
	x0 = 0x00000000004AF000
	x0 = x0 + 0x0000000000000210
	call unbind_variable (retsize: 0;)
	x0 = 0x00000000004AF000
	x0 = x0 + 0x0000000000000220
	call unbind_variable (retsize: 0;)
	x0 = 0x00000000004AF000
	x0 = x0 + 0x0000000000000230
	call unbind_variable (retsize: 0;)
	x0 = 0x00000000004AF000
	x0 = x0 + 0x0000000000000240
	call unbind_variable (retsize: 0;)
	branch w19 == 0x00000000 l0000000000469BD0
	// succ:  l0000000000469BC4 l0000000000469BD0
l0000000000469BC4:
	w1 = 0x00000001
	x0 = 0x00000000004D6000
	Mem0[x0 + 2648:word32] = w1
	// succ:  l0000000000469BD0
l0000000000469BD0:
	x19 = Mem0[sp + 16:word64]
	x29 = Mem0[sp:word64]
	sp = sp + 8
	x30 = Mem0[sp:word64]
	sp = sp + 32
	return
	// succ:  fn0000000000469B68_exit
fn0000000000469B68_exit:


// fn0000000000469BDC
// Return size: 0
void fn0000000000469BDC()
fn0000000000469BDC_entry:
	// succ:  l0000000000469BDC
l0000000000469BDC:
	sp = fp
	sp = sp + -80
	Mem0[sp:word64] = x29
	sp = sp + 8
	Mem0[sp:word64] = x30
	x29 = x31 + 0x0000000000000000
	x5 = x0
	x0 = 0x00000000004AF000
	v10 = sp + 32
	Mem0[v10:word64] = x21
	v10 = v10 + 8
	Mem0[v10:word64] = x22
	x0 = x0 + 0x00000000000001F0
	w21 = w1
	x22 = x2
	x1 = x5
	w2 = 0x00000000
	v18 = sp + 16
	Mem0[v18:word64] = x19
	v18 = v18 + 8
	Mem0[v18:word64] = x20
	Mem0[sp + 48:word64] = x23
	w20 = w4
	w23 = w3
	call bind_variable (retsize: 0;)
	NZCV = cond(w20 - w31)
	w19 = (word32) Test(NE,Z)
	branch x0 == 0x0000000000000000 l0000000000469C28
	// succ:  l0000000000469C24 l0000000000469C28
l0000000000469C24:
	branch w19 != 0x00000000 l0000000000469D4C
	// succ:  l0000000000469C28 l0000000000469D4C
l0000000000469C28:
	x1 = x29 + 0x0000000000000040
	x2 = 0x000000000000000C
l0000000000469D4C:
	w1 = Mem0[x0 + 40:word32]
	w1 = w1 | 0x00000001
	Mem0[x0 + 40:word32] = w1
	goto l0000000000469C28
	// succ:  l0000000000469C28
fn0000000000469BDC_exit:


// fn0000000000469D90
// Return size: 0
void fn0000000000469D90()
fn0000000000469D90_entry:
	// succ:  l0000000000469D90
l0000000000469D90:
	sp = fp
	sp = sp + -64
	Mem0[sp:word64] = x29
	sp = sp + 8
	Mem0[sp:word64] = x30
	x29 = x31 + 0x0000000000000000
	v8 = sp + 16
	Mem0[v8:word64] = x19
	v8 = v8 + 8
	Mem0[v8:word64] = x20
	v11 = sp + 32
	Mem0[v11:word64] = x21
	v11 = v11 + 8
	Mem0[v11:word64] = x22
	v14 = sp + 48
	Mem0[v14:word64] = x23
	v14 = v14 + 8
	Mem0[v14:word64] = x24
	x22 = x1
	x19 = x2
	w23 = w3
	call make_word (retsize: 0;)
	x1 = 0x0000000000000000
	call make_word_list (retsize: 0;)
	x20 = x0
	branch x19 == 0x0000000000000000 l0000000000469E9C
	// succ:  l0000000000469DC4 l0000000000469E9C
l0000000000469DC4:
	x21 = Mem0[x19 + 8:word64]
	branch x21 == 0x0000000000000000 l0000000000469E64
	// succ:  l0000000000469DCC l0000000000469E64
l0000000000469DCC:
	x0 = x21
	call copy_word (retsize: 0;)
	x1 = 0x0000000000000000
	call make_word_list (retsize: 0;)
	x24 = x0
	Mem0[x20:word64] = x0
	x0 = x22
	call make_word (retsize: 0;)
	x1 = 0x0000000000000000
	call make_word_list (retsize: 0;)
	x21 = x0
	Mem0[x24:word64] = x0
	// succ:  l0000000000469DFC
l0000000000469DFC:
	w3 = w23 - 0x00000001
	w31 = w3 - 0x00000001
	NZCV = cond(w31)
	branch Test(LE,ZCV) l0000000000469E54
	// succ:  l0000000000469E08 l0000000000469E54
l0000000000469E08:
	w1 = 0x00000001
	goto l0000000000469E14
	// succ:  l0000000000469E14
l0000000000469E10:
	branch Test(EQ,Z) l0000000000469E54
	// succ:  l0000000000469E14 l0000000000469E54
l0000000000469E14:
	x19 = Mem0[x19:word64]
	w1 = w1 + 0x00000001
	NZCV = cond(w1 - w3)
	branch x19 != 0x0000000000000000 l0000000000469E10
	// succ:  l0000000000469E24 l0000000000469E10
l0000000000469E24:
	x24 = 0x00000000004AC000
	// succ:  l0000000000469E28
l0000000000469E28:
	x0 = x24 + 0x0000000000000460
	call make_word (retsize: 0;)
	// succ:  l0000000000469E30
l0000000000469E30:
	x1 = 0x0000000000000000
	call make_word_list (retsize: 0;)
	Mem0[x21:word64] = x0
	v24 = sp + 48
	x23 = Mem0[v24:word64]
	v24 = v24 + 8
	x24 = Mem0[v24:word64]
	x0 = x20
	v25 = sp + 32
	x21 = Mem0[v25:word64]
	v25 = v25 + 8
	x22 = Mem0[v25:word64]
	v26 = sp + 16
	x19 = Mem0[v26:word64]
	v26 = v26 + 8
	x20 = Mem0[v26:word64]
	x29 = Mem0[sp:word64]
	sp = sp + 8
	x30 = Mem0[sp:word64]
	sp = sp + 64
	return
	// succ:  fn0000000000469D90_exit
l0000000000469E54:
	x0 = Mem0[x19 + 8:word64]
	branch x0 == 0x0000000000000000 l0000000000469E24
	// succ:  l0000000000469E5C l0000000000469E24
l0000000000469E5C:
	call copy_word (retsize: 0;)
	goto l0000000000469E30
	// succ:  l0000000000469E30
l0000000000469E64:
	x24 = 0x00000000004AC000
	x0 = x24 + 0x0000000000000460
	call make_word (retsize: 0;)
	x1 = x21
	call make_word_list (retsize: 0;)
	x24 = x0
	Mem0[x20:word64] = x0
	x0 = x22
	call make_word (retsize: 0;)
	x1 = x21
	call make_word_list (retsize: 0;)
	x21 = x0
	Mem0[x24:word64] = x0
	goto l0000000000469DFC
	// succ:  l0000000000469DFC
l0000000000469E9C:
	x24 = 0x00000000004AC000
	x0 = x24 + 0x0000000000000460
	call make_word (retsize: 0;)
	x1 = x19
	call make_word_list (retsize: 0;)
	x23 = x0
	Mem0[x20:word64] = x0
	x0 = x22
	call make_word (retsize: 0;)
	x1 = x19
	call make_word_list (retsize: 0;)
	x21 = x0
	Mem0[x23:word64] = x0
	goto l0000000000469E28
	// succ:  l0000000000469E28
fn0000000000469D90_exit:


// fn0000000000469FB4
// Return size: 0
void fn0000000000469FB4()
fn0000000000469FB4_entry:
	// succ:  l0000000000469FB4
l0000000000469FB4:
	sp = fp
	sp = sp + -96
	Mem0[sp:word64] = x29
	sp = sp + 8
	Mem0[sp:word64] = x30
	x29 = x31 + 0x0000000000000000
	v8 = sp + 16
	Mem0[v8:word64] = x19
	v8 = v8 + 8
	Mem0[v8:word64] = x20
	Mem0[sp + 80:word64] = x27
	v12 = sp + 32
	Mem0[v12:word64] = x21
	v12 = v12 + 8
	Mem0[v12:word64] = x22
	v15 = sp + 48
	Mem0[v15:word64] = x23
	v15 = v15 + 8
	Mem0[v15:word64] = x24
	v18 = sp + 64
	Mem0[v18:word64] = x25
	v18 = v18 + 8
	Mem0[v18:word64] = x26
	x27 = x0
	call x1 (retsize: 0;)
	x20 = x0
	branch x0 == 0x0000000000000000 l000000000046A094
	// succ:  l0000000000469FE0 l000000000046A094
l0000000000469FE0:
	x19 = Mem0[x0:word64]
	x21 = 0x0000000000000008
	w22 = 0x00000000
	branch x19 != 0x0000000000000000 l0000000000469FFC
	// succ:  l0000000000469FF0 l0000000000469FFC
l0000000000469FF0:
	goto l000000000046A0B4
	// succ:  l000000000046A0B4
l0000000000469FF4:
	x21 = x1
	w22 = w23
	// succ:  l0000000000469FFC
l0000000000469FFC:
	x19 = Mem0[x20 + x21:word64]
	w23 = w22 + 0x00000001
	x1 = x21 + 0x0000000000000008
	branch x19 != 0x0000000000000000 l0000000000469FF4
	// succ:  l000000000046A00C l0000000000469FF4
l000000000046A00C:
	w0 = w22 + 0x00000002
	w26 = w22
	call strlist_create (retsize: 0;)
	x26 = x26 + 0x0000000000000001
	x25 = 0x00000000004AF000
	x24 = x0
l000000000046A068:
	x0 = Mem0[x24:word64]
	Mem0[x24 + 12:word32] = w23
	Mem0[x0 + x21:word64] = 0x0000000000000000
	Mem0[x27:word64] = x24
	v30 = sp + 16
	x19 = Mem0[v30:word64]
	v30 = v30 + 8
	x20 = Mem0[v30:word64]
	v31 = sp + 32
	x21 = Mem0[v31:word64]
	v31 = v31 + 8
	x22 = Mem0[v31:word64]
	v32 = sp + 48
	x23 = Mem0[v32:word64]
	v32 = v32 + 8
	x24 = Mem0[v32:word64]
	v33 = sp + 64
	x25 = Mem0[v33:word64]
	v33 = v33 + 8
	x26 = Mem0[v33:word64]
	x27 = Mem0[sp + 80:word64]
	x29 = Mem0[sp:word64]
	sp = sp + 8
	x30 = Mem0[sp:word64]
	sp = sp + 96
	return
	// succ:  fn0000000000469FB4_exit
l000000000046A094:
	Mem0[x27:word64] = x0
	v22 = sp + 16
	x19 = Mem0[v22:word64]
	v22 = v22 + 8
	x20 = Mem0[v22:word64]
	v23 = sp + 32
	x21 = Mem0[v23:word64]
	v23 = v23 + 8
	x22 = Mem0[v23:word64]
	v24 = sp + 48
	x23 = Mem0[v24:word64]
	v24 = v24 + 8
	x24 = Mem0[v24:word64]
	v25 = sp + 64
	x25 = Mem0[v25:word64]
	v25 = v25 + 8
	x26 = Mem0[v25:word64]
	x27 = Mem0[sp + 80:word64]
	x29 = Mem0[sp:word64]
	sp = sp + 8
	x30 = Mem0[sp:word64]
	sp = sp + 96
	return
	// succ:  fn0000000000469FB4_exit
l000000000046A0B4:
	w0 = 0x00000001
	call strlist_create (retsize: 0;)
	x24 = x0
	x21 = x19
	w23 = w19
	goto l000000000046A068
	// succ:  l000000000046A068
fn0000000000469FB4_exit:


// set_itemlist_dirty
// Return size: 0
void set_itemlist_dirty()
set_itemlist_dirty_entry:
	// succ:  l000000000046A2F8
l000000000046A2F8:
	sp = fp
	w1 = Mem0[x0:word32]
	w1 = w1 | 0x00000002
	Mem0[x0:word32] = w1
	return
	// succ:  set_itemlist_dirty_exit
set_itemlist_dirty_exit:


// initialize_itemlist
// Return size: 0
void initialize_itemlist()
initialize_itemlist_entry:
	// succ:  l000000000046A308
l000000000046A308:
	sp = fp
	sp = sp + -32
	Mem0[sp:word64] = x29
	sp = sp + 8
	Mem0[sp:word64] = x30
	x29 = x31 + 0x0000000000000000
	x1 = Mem0[x0 + 8:word64]
	Mem0[sp + 16:word64] = x19
	x19 = x0
	call x1 (retsize: 0;)
	w0 = Mem0[x19:word32]
	w0 = w0 & 0xFFFFFFFD
	w0 = w0 | 0x00000004
	Mem0[x19:word32] = w0
	x19 = Mem0[sp + 16:word64]
	x29 = Mem0[sp:word64]
	sp = sp + 8
	x30 = Mem0[sp:word64]
	sp = sp + 32
	return
	// succ:  initialize_itemlist_exit
initialize_itemlist_exit:


// clean_itemlist
// Return size: 0
void clean_itemlist()
clean_itemlist_entry:
	// succ:  l000000000046A33C
l000000000046A33C:
	sp = fp
	sp = sp + -48
	Mem0[sp:word64] = x29
	sp = sp + 8
	Mem0[sp:word64] = x30
	x29 = x31 + 0x0000000000000000
	v8 = sp + 16
	Mem0[v8:word64] = x19
	v8 = v8 + 8
	Mem0[v8:word64] = x20
	x20 = Mem0[x0 + 16:word64]
	Mem0[sp + 32:word64] = x21
	x19 = x0
	branch x20 == 0x0000000000000000 l000000000046A37C
	// succ:  l000000000046A358 l000000000046A37C
l000000000046A358:
	w0 = Mem0[x0:word32]
	w31 = w0 & 0x00000030
	NZ = cond(w31)
	C = false
	V = false
	branch Test(EQ,Z) l000000000046A3A0
	// succ:  l000000000046A364 l000000000046A3A0
l000000000046A364:
	x21 = 0x00000000004AF000
	branch (w0 & 0x00000010) == 0x00000000 l000000000046A3B4
	// succ:  l000000000046A36C l000000000046A3B4
l000000000046A36C:
	x0 = x20
	x1 = x21 + 0x00000000000001D8
	w2 = 0x000000EB
	call sh_xfree (retsize: 0;)
	// succ:  l000000000046A37C
l000000000046A37C:
	w0 = Mem0[x19:word32]
	w1 = 0xFFFFFFC9
	w0 = w0 & w1
	Mem0[x19 + 16:word64] = 0x0000000000000000
	Mem0[x19:word32] = w0
	x21 = Mem0[sp + 32:word64]
	v20 = sp + 16
	x19 = Mem0[v20:word64]
	v20 = v20 + 8
	x20 = Mem0[v20:word64]
	x29 = Mem0[sp:word64]
	sp = sp + 8
	x30 = Mem0[sp:word64]
	sp = sp + 48
	return
	// succ:  clean_itemlist_exit
l000000000046A3A0:
	x0 = Mem0[x20:word64]
	x21 = 0x00000000004AF000
	call strvec_flush (retsize: 0;)
	w0 = Mem0[x19:word32]
	branch (w0 & 0x00000010) == 0x00000000 l000000000046A36C
	// succ:  l000000000046A3B4 l000000000046A36C
l000000000046A3B4:
	x0 = Mem0[x20:word64]
	x1 = x21 + 0x00000000000001D8
	w2 = 0x000000EA
	call sh_xfree (retsize: 0;)
	goto l000000000046A36C
	// succ:  l000000000046A36C
clean_itemlist_exit:


// fn000000000046A3C8
// Return size: 0
void fn000000000046A3C8()
fn000000000046A3C8_entry:
	// succ:  l000000000046A3C8
l000000000046A3C8:
	sp = fp
	sp = sp + -128
	Mem0[sp:word64] = x29
	sp = sp + 8
	Mem0[sp:word64] = x30
	x29 = x31 + 0x0000000000000000
	w2 = Mem0[x0:word32]
	v10 = sp + 16
	Mem0[v10:word64] = x19
	v10 = v10 + 8
	Mem0[v10:word64] = x20
	w3 = w2 & 0x00000007
	v14 = sp + 32
	Mem0[v14:word64] = x21
	v14 = v14 + 8
	Mem0[v14:word64] = x22
	v17 = sp + 48
	Mem0[v17:word64] = x23
	v17 = v17 + 8
	Mem0[v17:word64] = x24
	v20 = sp + 64
	Mem0[v20:word64] = x25
	v20 = v20 + 8
	Mem0[v20:word64] = x26
	v23 = sp + 80
	Mem0[v23:word64] = x27
	v23 = v23 + 8
	Mem0[v23:word64] = x28
	w31 = w3 - 0x00000004
	NZCV = cond(w31)
	x19 = x0
	x20 = x1
	branch Test(EQ,Z) l000000000046A408
	// succ:  l000000000046A3FC l000000000046A408
l000000000046A3FC:
	w1 = w2 & 0x00000003
	branch w1 != 0x00000000 l000000000046A580
	// succ:  l000000000046A404 l000000000046A580
l000000000046A404:
	branch (w2 & 0x00000004) == 0x00000000 l000000000046A58C
	// succ:  l000000000046A408 l000000000046A58C
l000000000046A408:
	x0 = Mem0[x19 + 16:word64]
	branch x0 == 0x0000000000000000 l000000000046A4FC
	// succ:  l000000000046A410 l000000000046A4FC
l000000000046A410:
	w0 = Mem0[x0 + 12:word32]
	w0 = w0 + 0x00000001
	call strlist_create (retsize: 0;)
	x27 = x0
	x0 = x20
	x23 = Mem0[x19 + 16:word64]
	call bash_dequote_text (retsize: 0;)
	x26 = x0
	branch x0 == 0x0000000000000000 l000000000046A5CC
	// succ:  l000000000046A434 l000000000046A5CC
l000000000046A434:
	v30 = Mem0[x0:byte]
	w1 = (word32) v30
	w25 = 0x00000000
	branch w1 != 0x00000000 l000000000046A55C
	// succ:  l000000000046A440 l000000000046A55C
l000000000046A440:
	w24 = Mem0[x23 + 12:word32]
	NZCV = cond(w24 - w31)
	branch Test(LE,ZCV) l000000000046A5D4
	// succ:  l000000000046A44C l000000000046A5D4
l000000000046A44C:
	x0 = 0x00000000004AF000
	x0 = x0 + 0x00000000000001D8
	x19 = 0x0000000000000000
	Mem0[x29 + 96:word64] = x0
l000000000046A4D4:
	x1 = Mem0[x27:word64]
	Mem0[x27 + 12:word32] = w22
	Mem0[x1 + x0:word64] = 0x0000000000000000
	branch x26 == 0x0000000000000000 l000000000046A5AC
	// succ:  l000000000046A4E4 l000000000046A5AC
l000000000046A4E4:
	x1 = 0x00000000004AF000
	x0 = x26
	x1 = x1 + 0x00000000000001D8
	w2 = 0x000002AB
	call sh_xfree (retsize: 0;)
	x0 = x27
	// succ:  l000000000046A4FC
l000000000046A4FC:
	v42 = sp + 16
	x19 = Mem0[v42:word64]
	v42 = v42 + 8
	x20 = Mem0[v42:word64]
	v43 = sp + 32
	x21 = Mem0[v43:word64]
	v43 = v43 + 8
	x22 = Mem0[v43:word64]
	v44 = sp + 48
	x23 = Mem0[v44:word64]
	v44 = v44 + 8
	x24 = Mem0[v44:word64]
	v45 = sp + 64
	x25 = Mem0[v45:word64]
	v45 = v45 + 8
	x26 = Mem0[v45:word64]
	v46 = sp + 80
	x27 = Mem0[v46:word64]
	v46 = v46 + 8
	x28 = Mem0[v46:word64]
	x29 = Mem0[sp:word64]
	sp = sp + 8
	x30 = Mem0[sp:word64]
	sp = sp + 128
	return
	// succ:  fn000000000046A3C8_exit
l000000000046A55C:
	v35 = Mem0[x0 + 1:byte]
	w1 = (word32) v35
	w25 = 0x00000001
	branch w1 == 0x00000000 l000000000046A440
	// succ:  l000000000046A568 l000000000046A440
l000000000046A568:
	v36 = Mem0[x0 + 2:byte]
	w1 = (word32) v36
	w25 = 0x00000002
	branch w1 == 0x00000000 l000000000046A440
	// succ:  l000000000046A574 l000000000046A440
l000000000046A574:
	strlen(x0)
	sp = sp + 0xFFFFFFFFFFFFFFF8
	w25 = w0
	goto l000000000046A440
	// succ:  l000000000046A440
l000000000046A580:
	call clean_itemlist (retsize: 0;)
	w2 = Mem0[x19:word32]
	branch (w2 & 0x00000004) == 0x00000000 l000000000046A408
	// succ:  l000000000046A58C l000000000046A408
l000000000046A58C:
	x1 = Mem0[x19 + 8:word64]
	x0 = x19
	call x1 (retsize: 0;)
	w0 = Mem0[x19:word32]
	w0 = w0 & 0xFFFFFFFD
	w0 = w0 | 0x00000004
	Mem0[x19:word32] = w0
	goto l000000000046A408
	// succ:  l000000000046A408
l000000000046A5AC:
	x0 = x27
	v37 = sp + 16
	x19 = Mem0[v37:word64]
	v37 = v37 + 8
	x20 = Mem0[v37:word64]
	v38 = sp + 32
	x21 = Mem0[v38:word64]
	v38 = v38 + 8
	x22 = Mem0[v38:word64]
	v39 = sp + 48
	x23 = Mem0[v39:word64]
	v39 = v39 + 8
	x24 = Mem0[v39:word64]
	v40 = sp + 64
	x25 = Mem0[v40:word64]
	v40 = v40 + 8
	x26 = Mem0[v40:word64]
	v41 = sp + 80
	x27 = Mem0[v41:word64]
	v41 = v41 + 8
	x28 = Mem0[v41:word64]
	x29 = Mem0[sp:word64]
	sp = sp + 8
	x30 = Mem0[sp:word64]
	sp = sp + 128
	return
	// succ:  fn000000000046A3C8_exit
l000000000046A5CC:
	w25 = w0
	goto l000000000046A440
	// succ:  l000000000046A440
l000000000046A5D4:
	x0 = 0x0000000000000000
	w22 = w0
	goto l000000000046A4D4
	// succ:  l000000000046A4D4
fn000000000046A3C8_exit:


// filter_stringlist
// Return size: 0
void filter_stringlist()
filter_stringlist_entry:
	// succ:  l000000000046A5E0
l000000000046A5E0:
	sp = fp
	sp = sp + -112
	Mem0[sp:word64] = x29
	sp = sp + 8
	Mem0[sp:word64] = x30
	x29 = x31 + 0x0000000000000000
	v8 = sp + 16
	Mem0[v8:word64] = x19
	v8 = v8 + 8
	Mem0[v8:word64] = x20
	v11 = sp + 64
	Mem0[v11:word64] = x25
	v11 = v11 + 8
	Mem0[v11:word64] = x26
	v14 = sp + 32
	Mem0[v14:word64] = x21
	v14 = v14 + 8
	Mem0[v14:word64] = x22
	v17 = sp + 48
	Mem0[v17:word64] = x23
	v17 = v17 + 8
	Mem0[v17:word64] = x24
	v20 = sp + 80
	Mem0[v20:word64] = x27
	v20 = v20 + 8
	Mem0[v20:word64] = x28
	x20 = x0
	x26 = x1
	branch x0 == 0x0000000000000000 l000000000046A7A4
	// succ:  l000000000046A608 l000000000046A7A4
l000000000046A608:
	x0 = Mem0[x0:word64]
	branch x0 == 0x0000000000000000 l000000000046A7A4
	// succ:  l000000000046A610 l000000000046A7A4
l000000000046A610:
	w1 = Mem0[x20 + 12:word32]
	x0 = x20
	branch w1 == 0x00000000 l000000000046A77C
	// succ:  l000000000046A61C l000000000046A77C
l000000000046A61C:
	v25 = Mem0[x26:byte]
	w0 = (word32) v25
	branch x26 == 0x0000000000000000 l000000000046A664
	// succ:  l000000000046A624 l000000000046A664
l000000000046A624:
	branch w0 == 0x00000000 l000000000046A7DC
	// succ:  l000000000046A628 l000000000046A7DC
l000000000046A628:
	x3 = x26
	w1 = w0
	goto l000000000046A650
	// succ:  l000000000046A650
l000000000046A634:
	w31 = w1 - 0x00000026
	NZCV = cond(w31)
	branch Test(EQ,Z) l000000000046A7C4
	// succ:  l000000000046A63C l000000000046A7C4
l000000000046A63C:
	x5 = x3 + 0x0000000000000001
	NZCV = cond(x5)
	branch Test(EQ,Z) l000000000046A664
	// succ:  l000000000046A644 l000000000046A664
l000000000046A644:
	v46 = Mem0[x3 + 1:byte]
	w1 = (word32) v46
	x3 = x5
	branch w1 == 0x00000000 l000000000046A664
	// succ:  l000000000046A650 l000000000046A664
l000000000046A650:
	w31 = w1 - 0x0000005C
	NZCV = cond(w31)
	branch Test(NE,Z) l000000000046A634
	// succ:  l000000000046A658 l000000000046A634
l000000000046A658:
	x3 = x3 + 0x0000000000000001
	x5 = x3 + 0x0000000000000001
	NZCV = cond(x5)
	branch Test(NE,Z) l000000000046A644
	// succ:  l000000000046A664 l000000000046A644
l000000000046A664:
	Mem0[x29 + 96:word64] = x26
	// succ:  l000000000046A668
l000000000046A668:
	w31 = w0 - 0x00000021
	NZCV = cond(w31)
	w27 = (word32) Test(EQ,Z)
	branch w27 == 0x00000000 l000000000046A798
	// succ:  l000000000046A674 l000000000046A798
l000000000046A674:
	x0 = Mem0[x29 + 96:word64]
	w28 = 0x00000001
	x23 = x0 + 0x0000000000000001
	// succ:  l000000000046A680
l000000000046A680:
	w0 = Mem0[x20 + 8:word32]
	call strlist_create (retsize: 0;)
	w1 = Mem0[x20 + 12:word32]
	x22 = x0
	NZCV = cond(w1 - w31)
	branch Test(LE,ZCV) l000000000046A74C
	// succ:  l000000000046A698 l000000000046A74C
l000000000046A698:
	x19 = 0x0000000000000000
	w28 = w28 ^ 0x00000001
	x24 = 0x00000000004E1000
	x25 = 0x00000000004AF000
	w21 = w19
	x24 = x24 + 0x0000000000000268
	x25 = x25 + 0x00000000000001D8
	w28 = w28 & 0x00000001
	// succ:  l000000000046A6F8
l000000000046A6F8:
	x2 = Mem0[x20:word64]
	x0 = x23
	x1 = Mem0[x2 + x19:word64]
	w2 = Mem0[x24:word32]
	NZCV = cond(w2 - w31)
	w2 = 0x00000020
l000000000046A74C:
	v49 = Mem0[x22 + 6:int32]
	x1 = (word64) v49
	x0 = Mem0[x22:word64]
	x2 = Mem0[x29 + 96:word64]
	Mem0[x0 + x1:word64] = 0x0000000000000000
	x31 = x2 - x26
	NZCV = cond(x31)
	branch Test(EQ,Z) l000000000046A778
	// succ:  l000000000046A764 l000000000046A778
l000000000046A764:
	x1 = 0x00000000004AF000
	x0 = Mem0[x29 + 96:word64]
	x1 = x1 + 0x00000000000001D8
	w2 = 0x00000132
	call sh_xfree (retsize: 0;)
	// succ:  l000000000046A778
l000000000046A778:
	x0 = x22
	// succ:  l000000000046A77C
l000000000046A77C:
	v32 = sp + 16
	x19 = Mem0[v32:word64]
	v32 = v32 + 8
	x20 = Mem0[v32:word64]
	v33 = sp + 32
	x21 = Mem0[v33:word64]
	v33 = v33 + 8
	x22 = Mem0[v33:word64]
	v34 = sp + 48
	x23 = Mem0[v34:word64]
	v34 = v34 + 8
	x24 = Mem0[v34:word64]
	v35 = sp + 64
	x25 = Mem0[v35:word64]
	v35 = v35 + 8
	x26 = Mem0[v35:word64]
	v36 = sp + 80
	x27 = Mem0[v36:word64]
	v36 = v36 + 8
	x28 = Mem0[v36:word64]
	x29 = Mem0[sp:word64]
	sp = sp + 8
	x30 = Mem0[sp:word64]
	sp = sp + 112
	return
	// succ:  filter_stringlist_exit
l000000000046A798:
	x23 = Mem0[x29 + 96:word64]
	w28 = w27
	goto l000000000046A680
	// succ:  l000000000046A680
l000000000046A7A4:
	x0 = x20
	v27 = sp + 32
	x21 = Mem0[v27:word64]
	v27 = v27 + 8
	x22 = Mem0[v27:word64]
	v28 = sp + 16
	x19 = Mem0[v28:word64]
	v28 = v28 + 8
	x20 = Mem0[v28:word64]
	v29 = sp + 48
	x23 = Mem0[v29:word64]
	v29 = v29 + 8
	x24 = Mem0[v29:word64]
	v30 = sp + 64
	x25 = Mem0[v30:word64]
	v30 = v30 + 8
	x26 = Mem0[v30:word64]
	v31 = sp + 80
	x27 = Mem0[v31:word64]
	v31 = v31 + 8
	x28 = Mem0[v31:word64]
	x29 = Mem0[sp:word64]
	sp = sp + 8
	x30 = Mem0[sp:word64]
	sp = sp + 112
	return
	// succ:  filter_stringlist_exit
l000000000046A7C4:
	x0 = x26
	w3 = 0x00000001
	call strcreplace (retsize: 0;)
	Mem0[x29 + 96:word64] = x0
	v51 = Mem0[x0:byte]
	w0 = (word32) v51
	goto l000000000046A668
	// succ:  l000000000046A668
l000000000046A7DC:
	w28 = w0
	Mem0[x29 + 96:word64] = x26
	x23 = x26
	w27 = w0
	goto l000000000046A680
	// succ:  l000000000046A680
filter_stringlist_exit:


// completions_to_stringlist
// Return size: 0
void completions_to_stringlist()
completions_to_stringlist_entry:
	// succ:  l000000000046A7F0
l000000000046A7F0:
	sp = fp
	sp = sp + -80
	Mem0[sp:word64] = x29
	sp = sp + 8
	Mem0[sp:word64] = x30
	x29 = x31 + 0x0000000000000000
	v8 = sp + 16
	Mem0[v8:word64] = x19
	v8 = v8 + 8
	Mem0[v8:word64] = x20
	v11 = sp + 32
	Mem0[v11:word64] = x21
	v11 = v11 + 8
	Mem0[v11:word64] = x22
	v14 = sp + 48
	Mem0[v14:word64] = x23
	v14 = v14 + 8
	Mem0[v14:word64] = x24
	v17 = sp + 64
	Mem0[v17:word64] = x25
	v17 = v17 + 8
	Mem0[v17:word64] = x26
	x20 = x0
	branch x0 == 0x0000000000000000 l000000000046A8E4
	// succ:  l000000000046A810 l000000000046A8E4
l000000000046A810:
	call strvec_len (retsize: 0;)
	w26 = w0
	w0 = w0 + 0x00000001
	call strlist_create (retsize: 0;)
	x22 = x0
	x0 = Mem0[x20:word64]
	branch x0 == 0x0000000000000000 l000000000046A8C8
	// succ:  l000000000046A82C l000000000046A8C8
l000000000046A82C:
	x19 = Mem0[x20 + 8:word64]
	branch x19 == 0x0000000000000000 l000000000046A900
	// succ:  l000000000046A834 l000000000046A900
l000000000046A834:
	w31 = w26 - 0x00000001
	NZCV = cond(w31)
	branch Test(LE,ZCV) l000000000046A954
	// succ:  l000000000046A83C l000000000046A954
l000000000046A83C:
	w24 = w26 - 0x00000002
	x0 = x20 + 0x0000000000000010
	x23 = 0xFFFFFFFFFFFFFFF8
	x25 = 0x00000000004AF000
	x19 = x20 + 0x0000000000000008
	x24 = x0 + (uint64) ((word32) w24)
	x23 = x23 - x20
	x25 = x25 + 0x00000000000001D8
	goto l000000000046A88C
	// succ:  l000000000046A88C
l000000000046A860:
	strlen(x0)
	sp = sp + 0xFFFFFFFFFFFFFFF8
	x1 = x25
	w2 = 0x0000014F
	x0 = x0 + 0x0000000000000001
	call sh_xmalloc (retsize: 0;)
	x1 = Mem0[x19:word64]
	x19 = x19 + 0x0000000000000008
	strcpy(x0, x1)
	sp = sp + 0xFFFFFFFFFFFFFFF8
	Mem0[x21 + x20:word64] = x0
	x31 = x19 - x24
	NZCV = cond(x31)
	branch Test(EQ,Z) l000000000046A8B4
	// succ:  l000000000046A88C l000000000046A8B4
l000000000046A88C:
	x2 = Mem0[x19:word64]
	x20 = x23 + x19
	x0 = x2
	x21 = Mem0[x22:word64]
	branch x2 != 0x0000000000000000 l000000000046A860
	// succ:  l000000000046A8A0 l000000000046A860
l000000000046A8A0:
	x0 = x2
	x19 = x19 + 0x0000000000000008
	Mem0[x21 + x20:word64] = x0
	x31 = x19 - x24
	NZCV = cond(x31)
	branch Test(NE,Z) l000000000046A88C
	// succ:  l000000000046A8B4 l000000000046A88C
l000000000046A8B4:
	w26 = w26 - 0x00000001
l000000000046A8BC:
	x1 = Mem0[x22:word64]
	Mem0[x22 + 12:word32] = w26
	Mem0[x1 + x0:word64] = 0x0000000000000000
	// succ:  l000000000046A8C8
l000000000046A8C8:
	x0 = x22
	v38 = sp + 16
	x19 = Mem0[v38:word64]
	v38 = v38 + 8
	x20 = Mem0[v38:word64]
	v39 = sp + 32
	x21 = Mem0[v39:word64]
	v39 = v39 + 8
	x22 = Mem0[v39:word64]
	v40 = sp + 48
	x23 = Mem0[v40:word64]
	v40 = v40 + 8
	x24 = Mem0[v40:word64]
	v41 = sp + 64
	x25 = Mem0[v41:word64]
	v41 = v41 + 8
	x26 = Mem0[v41:word64]
	x29 = Mem0[sp:word64]
	sp = sp + 8
	x30 = Mem0[sp:word64]
	sp = sp + 80
	return
	// succ:  completions_to_stringlist_exit
l000000000046A8E4:
	v25 = sp + 16
	x19 = Mem0[v25:word64]
	v25 = v25 + 8
	x20 = Mem0[v25:word64]
	v26 = sp + 32
	x21 = Mem0[v26:word64]
	v26 = v26 + 8
	x22 = Mem0[v26:word64]
	v27 = sp + 48
	x23 = Mem0[v27:word64]
	v27 = v27 + 8
	x24 = Mem0[v27:word64]
	v28 = sp + 64
	x25 = Mem0[v28:word64]
	v28 = v28 + 8
	x26 = Mem0[v28:word64]
	x29 = Mem0[sp:word64]
	sp = sp + 8
	x30 = Mem0[sp:word64]
	sp = sp + 80
	w0 = 0x00000001
	// succ:  l000000000046A8FC_thunk_strlist_create
l000000000046A8FC_thunk_strlist_create:
	call strlist_create (retsize: 0;)
	return
	// succ:  completions_to_stringlist_exit
l000000000046A900:
	strlen(x0)
	sp = sp + 0xFFFFFFFFFFFFFFF8
	x1 = 0x00000000004AF000
	w2 = 0x00000149
	x1 = x1 + 0x00000000000001D8
	x0 = x0 + 0x0000000000000001
	x21 = Mem0[x22:word64]
	call sh_xmalloc (retsize: 0;)
	x1 = Mem0[x20:word64]
	strcpy(x0, x1)
	sp = sp + 0xFFFFFFFFFFFFFFF8
	Mem0[x21:word64] = x0
	x0 = Mem0[x22:word64]
	w1 = 0x00000001
	Mem0[x22 + 12:word32] = w1
	Mem0[x0 + 8:word64] = x19
	v34 = sp + 48
	x23 = Mem0[v34:word64]
	v34 = v34 + 8
	x24 = Mem0[v34:word64]
	x0 = x22
	v35 = sp + 16
	x19 = Mem0[v35:word64]
	v35 = v35 + 8
	x20 = Mem0[v35:word64]
	v36 = sp + 32
	x21 = Mem0[v36:word64]
	v36 = v36 + 8
	x22 = Mem0[v36:word64]
	v37 = sp + 64
	x25 = Mem0[v37:word64]
	v37 = v37 + 8
	x26 = Mem0[v37:word64]
	x29 = Mem0[sp:word64]
	sp = sp + 8
	x30 = Mem0[sp:word64]
	sp = sp + 80
	return
	// succ:  completions_to_stringlist_exit
l000000000046A954:
	x0 = 0x0000000000000000
	w26 = w0
	goto l000000000046A8BC
	// succ:  l000000000046A8BC
completions_to_stringlist_exit:


// fn000000000046A960
// Return size: 0
void fn000000000046A960()
fn000000000046A960_entry:
	// succ:  l000000000046A960
l000000000046A960:
	sp = fp
	sp = sp + -64
	Mem0[sp:word64] = x29
	sp = sp + 8
	Mem0[sp:word64] = x30
	x29 = x31 + 0x0000000000000000
	v8 = sp + 16
	Mem0[v8:word64] = x19
	v8 = v8 + 8
	Mem0[v8:word64] = x20
	v11 = sp + 32
	Mem0[v11:word64] = x21
	v11 = v11 + 8
	Mem0[v11:word64] = x22
	Mem0[sp + 48:word64] = x23
	x19 = x0
	x21 = x1
	branch (w19 & 0x00000001) == 0x00000000 l000000000046AF44
	// succ:  l000000000046A980 l000000000046AF44
l000000000046A980:
	x20 = 0x0000000000000000
	branch (w19 & 0x00000002) == 0x00000000 l000000000046AF08
	// succ:  l000000000046A988 l000000000046AF08
l000000000046A988:
	branch (w19 & 0x00000004) == 0x00000000 l000000000046AECC
	// succ:  l000000000046A98C l000000000046AECC
l000000000046A98C:
	branch (w19 & 0x00000008) == 0x00000000 l000000000046AE90
	// succ:  l000000000046A990 l000000000046AE90
l000000000046A990:
	branch (w19 & 0x00000040) == 0x00000000 l000000000046AE54
	// succ:  l000000000046A994 l000000000046AE54
l000000000046A994:
	branch (w19 & 0x00000080) == 0x00000000 l000000000046AE18
	// succ:  l000000000046A998 l000000000046AE18
l000000000046A998:
	branch (w19 & 0x00000100) == 0x00000000 l000000000046ADDC
	// succ:  l000000000046A99C l000000000046ADDC
l000000000046A99C:
	branch (w19 & 0x00000400) == 0x00000000 l000000000046ADA0
	// succ:  l000000000046A9A0 l000000000046ADA0
l000000000046A9A0:
	branch (w19 & 0x00002000) == 0x00000000 l000000000046AD64
	// succ:  l000000000046A9A4 l000000000046AD64
l000000000046A9A4:
	branch (w19 & 0x00004000) == 0x00000000 l000000000046AD28
	// succ:  l000000000046A9A8 l000000000046AD28
l000000000046A9A8:
	branch (w19 & 0x00008000) == 0x00000000 l000000000046ACEC
	// succ:  l000000000046A9AC l000000000046ACEC
l000000000046A9AC:
	branch (w19 & 0x00000000) == 0x00000000 l000000000046ACB0
	// succ:  l000000000046A9B0 l000000000046ACB0
l000000000046A9B0:
	branch (w19 & 0x00000000) == 0x00000000 l000000000046AC74
	// succ:  l000000000046A9B4 l000000000046AC74
l000000000046A9B4:
	branch (w19 & 0x00000000) == 0x00000000 l000000000046AC38
	// succ:  l000000000046A9B8 l000000000046AC38
l000000000046A9B8:
	branch (w19 & 0x00000000) == 0x00000000 l000000000046ABFC
	// succ:  l000000000046A9BC l000000000046ABFC
l000000000046A9BC:
	branch (w19 & 0x00000000) == 0x00000000 l000000000046ABC0
	// succ:  l000000000046A9C0 l000000000046ABC0
l000000000046A9C0:
	branch (w19 & 0x00000000) == 0x00000000 l000000000046AB84
	// succ:  l000000000046A9C4 l000000000046AB84
l000000000046A9C4:
	branch (w19 & 0x00000010) == 0x00000000 l000000000046AB40
	// succ:  l000000000046A9C8 l000000000046AB40
l000000000046A9C8:
	branch (w19 & 0x00000200) == 0x00000000 l000000000046AAFC
	// succ:  l000000000046A9CC l000000000046AAFC
l000000000046A9CC:
	branch (w19 & 0x00000000) == 0x00000000 l000000000046AAB8
	// succ:  l000000000046A9D0 l000000000046AAB8
l000000000046A9D0:
	branch (w19 & 0x00000800) == 0x00000000 l000000000046AA74
	// succ:  l000000000046A9D4 l000000000046AA74
l000000000046A9D4:
	branch (w19 & 0x00000000) == 0x00000000 l000000000046AA34
	// succ:  l000000000046A9D8 l000000000046AA34
l000000000046A9D8:
	branch (w19 & 0x00000020) == 0x00000000 l000000000046AA1C
	// succ:  l000000000046A9DC l000000000046AA1C
l000000000046A9DC:
	w2 = 0x00000001
	x1 = 0x00000000004E4000
	x0 = x21
	Mem0[x1 + 192:word32] = w2
	call bash_directory_completion_matches (retsize: 0;)
	x21 = x0
	call completions_to_stringlist (retsize: 0;)
	x19 = x0
	x1 = x19
	x0 = x20
	call strlist_append (retsize: 0;)
	x20 = x0
	x0 = x21
	call strvec_dispose (retsize: 0;)
	x0 = x19
	call strlist_dispose (retsize: 0;)
	// succ:  l000000000046AA1C
l000000000046AA1C:
	x0 = x20
	v17 = sp + 32
	x21 = Mem0[v17:word64]
	v17 = v17 + 8
	x22 = Mem0[v17:word64]
	v18 = sp + 16
	x19 = Mem0[v18:word64]
	v18 = v18 + 8
	x20 = Mem0[v18:word64]
	x23 = Mem0[sp + 48:word64]
	x29 = Mem0[sp:word64]
	sp = sp + 8
	x30 = Mem0[sp:word64]
	sp = sp + 64
	return
	// succ:  fn000000000046A960_exit
l000000000046AA34:
	x1 = 0x0000000000465000
	x1 = x1 + 0xFFFFFFFFFFFFFA98
	x0 = x21
	call rl_completion_matches (retsize: 0;)
	x23 = x0
	call completions_to_stringlist (retsize: 0;)
	x22 = x0
	x1 = x22
	x0 = x20
	call strlist_append (retsize: 0;)
	x20 = x0
	x0 = x23
	call strvec_dispose (retsize: 0;)
	x0 = x22
	call strlist_dispose (retsize: 0;)
	goto l000000000046A9D8
	// succ:  l000000000046A9D8
l000000000046AA74:
	x1 = 0x0000000000465000
	x1 = x1 + 0xFFFFFFFFFFFFFC3C
	x0 = x21
	call rl_completion_matches (retsize: 0;)
	x23 = x0
	call completions_to_stringlist (retsize: 0;)
	x22 = x0
	x1 = x22
	x0 = x20
	call strlist_append (retsize: 0;)
	x20 = x0
	x0 = x23
	call strvec_dispose (retsize: 0;)
	x0 = x22
	call strlist_dispose (retsize: 0;)
	branch (w19 & 0x00000000) == 0x00000000 l000000000046A9D8
	// succ:  l000000000046AAB4 l000000000046A9D8
l000000000046AAB4:
	goto l000000000046AA34
	// succ:  l000000000046AA34
l000000000046AAB8:
	x1 = 0x0000000000494000
	x1 = x1 + 0x00000000000003D8
	x0 = x21
	call rl_completion_matches (retsize: 0;)
	x23 = x0
	call completions_to_stringlist (retsize: 0;)
	x22 = x0
	x1 = x22
	x0 = x20
	call strlist_append (retsize: 0;)
	x20 = x0
	x0 = x23
	call strvec_dispose (retsize: 0;)
	x0 = x22
	call strlist_dispose (retsize: 0;)
	branch (w19 & 0x00000800) == 0x00000000 l000000000046A9D4
	// succ:  l000000000046AAF8 l000000000046A9D4
l000000000046AAF8:
	goto l000000000046AA74
	// succ:  l000000000046AA74
l000000000046AAFC:
	x1 = 0x0000000000469000
	x1 = x1 + 0xFFFFFFFFFFFFFED4
	x0 = x21
	call rl_completion_matches (retsize: 0;)
	x23 = x0
	call completions_to_stringlist (retsize: 0;)
	x22 = x0
	x1 = x22
	x0 = x20
	call strlist_append (retsize: 0;)
	x20 = x0
	x0 = x23
	call strvec_dispose (retsize: 0;)
	x0 = x22
	call strlist_dispose (retsize: 0;)
	branch (w19 & 0x00000000) == 0x00000000 l000000000046A9D0
	// succ:  l000000000046AB3C l000000000046A9D0
l000000000046AB3C:
	goto l000000000046AAB8
	// succ:  l000000000046AAB8
l000000000046AB40:
	x1 = 0x0000000000462000
	x1 = x1 + 0x0000000000000420
	x0 = x21
	call rl_completion_matches (retsize: 0;)
	x23 = x0
	call completions_to_stringlist (retsize: 0;)
	x22 = x0
	x1 = x22
	x0 = x20
	call strlist_append (retsize: 0;)
	x20 = x0
	x0 = x23
	call strvec_dispose (retsize: 0;)
	x0 = x22
	call strlist_dispose (retsize: 0;)
	branch (w19 & 0x00000200) == 0x00000000 l000000000046A9CC
	// succ:  l000000000046AB80 l000000000046A9CC
l000000000046AB80:
	goto l000000000046AAFC
	// succ:  l000000000046AAFC
l000000000046AB84:
	x0 = 0x00000000004D7000
	x0 = x0 + 0x0000000000000220
	x0 = x0 + 0x0000000000000280
	x1 = x21
	call fn000000000046A3C8 (retsize: 0;)
	x22 = x0
	branch x0 == 0x0000000000000000 l000000000046A9C4
	// succ:  l000000000046ABA0 l000000000046A9C4
l000000000046ABA0:
	x0 = x20
	x1 = x22
	call strlist_append (retsize: 0;)
	x20 = x0
	x0 = x22
	call strlist_dispose (retsize: 0;)
	branch (w19 & 0x00000010) == 0x00000000 l000000000046A9C8
	// succ:  l000000000046ABBC l000000000046A9C8
l000000000046ABBC:
	goto l000000000046AB40
	// succ:  l000000000046AB40
l000000000046ABC0:
	x0 = 0x00000000004D7000
	x0 = x0 + 0x0000000000000220
	x0 = x0 + 0x0000000000000258
	x1 = x21
	call fn000000000046A3C8 (retsize: 0;)
	x22 = x0
	branch x0 == 0x0000000000000000 l000000000046A9C0
	// succ:  l000000000046ABDC l000000000046A9C0
l000000000046ABDC:
	x0 = x20
	x1 = x22
	call strlist_append (retsize: 0;)
	x20 = x0
	x0 = x22
	call strlist_dispose (retsize: 0;)
	branch (w19 & 0x00000000) == 0x00000000 l000000000046A9C4
	// succ:  l000000000046ABF8 l000000000046A9C4
l000000000046ABF8:
	goto l000000000046AB84
	// succ:  l000000000046AB84
l000000000046ABFC:
	x0 = 0x00000000004D7000
	x0 = x0 + 0x0000000000000220
	x0 = x0 + 0x0000000000000230
	x1 = x21
	call fn000000000046A3C8 (retsize: 0;)
	x22 = x0
	branch x0 == 0x0000000000000000 l000000000046A9BC
	// succ:  l000000000046AC18 l000000000046A9BC
l000000000046AC18:
	x0 = x20
	x1 = x22
	call strlist_append (retsize: 0;)
	x20 = x0
	x0 = x22
	call strlist_dispose (retsize: 0;)
	branch (w19 & 0x00000000) == 0x00000000 l000000000046A9C0
	// succ:  l000000000046AC34 l000000000046A9C0
l000000000046AC34:
	goto l000000000046ABC0
	// succ:  l000000000046ABC0
l000000000046AC38:
	x0 = 0x00000000004D7000
	x0 = x0 + 0x0000000000000220
	x0 = x0 + 0x0000000000000208
	x1 = x21
	call fn000000000046A3C8 (retsize: 0;)
	x22 = x0
	branch x0 == 0x0000000000000000 l000000000046A9B8
	// succ:  l000000000046AC54 l000000000046A9B8
l000000000046AC54:
	x0 = x20
	x1 = x22
	call strlist_append (retsize: 0;)
	x20 = x0
	x0 = x22
	call strlist_dispose (retsize: 0;)
	branch (w19 & 0x00000000) == 0x00000000 l000000000046A9BC
	// succ:  l000000000046AC70 l000000000046A9BC
l000000000046AC70:
	goto l000000000046ABFC
	// succ:  l000000000046ABFC
l000000000046AC74:
	x0 = 0x00000000004D7000
	x0 = x0 + 0x0000000000000220
	x0 = x0 + 0x00000000000001E0
	x1 = x21
	call fn000000000046A3C8 (retsize: 0;)
	x22 = x0
	branch x0 == 0x0000000000000000 l000000000046A9B4
	// succ:  l000000000046AC90 l000000000046A9B4
l000000000046AC90:
	x0 = x20
	x1 = x22
	call strlist_append (retsize: 0;)
	x20 = x0
	x0 = x22
	call strlist_dispose (retsize: 0;)
	branch (w19 & 0x00000000) == 0x00000000 l000000000046A9B8
	// succ:  l000000000046ACAC l000000000046A9B8
l000000000046ACAC:
	goto l000000000046AC38
	// succ:  l000000000046AC38
l000000000046ACB0:
	x0 = 0x00000000004D7000
	x0 = x0 + 0x0000000000000220
	x0 = x0 + 0x00000000000001B8
	x1 = x21
	call fn000000000046A3C8 (retsize: 0;)
	x22 = x0
	branch x0 == 0x0000000000000000 l000000000046A9B0
	// succ:  l000000000046ACCC l000000000046A9B0
l000000000046ACCC:
	x0 = x20
	x1 = x22
	call strlist_append (retsize: 0;)
	x20 = x0
	x0 = x22
	call strlist_dispose (retsize: 0;)
	branch (w19 & 0x00000000) == 0x00000000 l000000000046A9B4
	// succ:  l000000000046ACE8 l000000000046A9B4
l000000000046ACE8:
	goto l000000000046AC74
	// succ:  l000000000046AC74
l000000000046ACEC:
	x0 = 0x00000000004D7000
	x0 = x0 + 0x0000000000000220
	x0 = x0 + 0x0000000000000190
	x1 = x21
	call fn000000000046A3C8 (retsize: 0;)
	x22 = x0
	branch x0 == 0x0000000000000000 l000000000046A9AC
	// succ:  l000000000046AD08 l000000000046A9AC
l000000000046AD08:
	x0 = x20
	x1 = x22
	call strlist_append (retsize: 0;)
	x20 = x0
	x0 = x22
	call strlist_dispose (retsize: 0;)
	branch (w19 & 0x00000000) == 0x00000000 l000000000046A9B0
	// succ:  l000000000046AD24 l000000000046A9B0
l000000000046AD24:
	goto l000000000046ACB0
	// succ:  l000000000046ACB0
l000000000046AD28:
	x0 = 0x00000000004D7000
	x0 = x0 + 0x0000000000000220
	x0 = x0 + 0x0000000000000168
	x1 = x21
	call fn000000000046A3C8 (retsize: 0;)
	x22 = x0
	branch x0 == 0x0000000000000000 l000000000046A9A8
	// succ:  l000000000046AD44 l000000000046A9A8
l000000000046AD44:
	x0 = x20
	x1 = x22
	call strlist_append (retsize: 0;)
	x20 = x0
	x0 = x22
	call strlist_dispose (retsize: 0;)
	branch (w19 & 0x00008000) == 0x00000000 l000000000046A9AC
	// succ:  l000000000046AD60 l000000000046A9AC
l000000000046AD60:
	goto l000000000046ACEC
	// succ:  l000000000046ACEC
l000000000046AD64:
	x0 = 0x00000000004D7000
	x0 = x0 + 0x0000000000000220
	x0 = x0 + 0x0000000000000140
	x1 = x21
	call fn000000000046A3C8 (retsize: 0;)
	x22 = x0
	branch x0 == 0x0000000000000000 l000000000046A9A4
	// succ:  l000000000046AD80 l000000000046A9A4
l000000000046AD80:
	x0 = x20
	x1 = x22
	call strlist_append (retsize: 0;)
	x20 = x0
	x0 = x22
	call strlist_dispose (retsize: 0;)
	branch (w19 & 0x00004000) == 0x00000000 l000000000046A9A8
	// succ:  l000000000046AD9C l000000000046A9A8
l000000000046AD9C:
	goto l000000000046AD28
	// succ:  l000000000046AD28
l000000000046ADA0:
	x0 = 0x00000000004D7000
	x0 = x0 + 0x0000000000000220
	x0 = x0 + 0x0000000000000118
	x1 = x21
	call fn000000000046A3C8 (retsize: 0;)
	x22 = x0
	branch x0 == 0x0000000000000000 l000000000046A9A0
	// succ:  l000000000046ADBC l000000000046A9A0
l000000000046ADBC:
	x0 = x20
	x1 = x22
	call strlist_append (retsize: 0;)
	x20 = x0
	x0 = x22
	call strlist_dispose (retsize: 0;)
	branch (w19 & 0x00002000) == 0x00000000 l000000000046A9A4
	// succ:  l000000000046ADD8 l000000000046A9A4
l000000000046ADD8:
	goto l000000000046AD64
	// succ:  l000000000046AD64
l000000000046ADDC:
	x0 = 0x00000000004D7000
	x0 = x0 + 0x0000000000000220
	x0 = x0 + 0x00000000000000F0
	x1 = x21
	call fn000000000046A3C8 (retsize: 0;)
	x22 = x0
	branch x0 == 0x0000000000000000 l000000000046A99C
	// succ:  l000000000046ADF8 l000000000046A99C
l000000000046ADF8:
	x0 = x20
	x1 = x22
	call strlist_append (retsize: 0;)
	x20 = x0
	x0 = x22
	call strlist_dispose (retsize: 0;)
	branch (w19 & 0x00000400) == 0x00000000 l000000000046A9A0
	// succ:  l000000000046AE14 l000000000046A9A0
l000000000046AE14:
	goto l000000000046ADA0
	// succ:  l000000000046ADA0
l000000000046AE18:
	x0 = 0x00000000004D7000
	x0 = x0 + 0x0000000000000220
	x0 = x0 + 0x00000000000000C8
	x1 = x21
	call fn000000000046A3C8 (retsize: 0;)
	x22 = x0
	branch x0 == 0x0000000000000000 l000000000046A998
	// succ:  l000000000046AE34 l000000000046A998
l000000000046AE34:
	x0 = x20
	x1 = x22
	call strlist_append (retsize: 0;)
	x20 = x0
	x0 = x22
	call strlist_dispose (retsize: 0;)
	branch (w19 & 0x00000100) == 0x00000000 l000000000046A99C
	// succ:  l000000000046AE50 l000000000046A99C
l000000000046AE50:
	goto l000000000046ADDC
	// succ:  l000000000046ADDC
l000000000046AE54:
	x0 = 0x00000000004D7000
	x0 = x0 + 0x0000000000000220
	x0 = x0 + 0x00000000000000A0
	x1 = x21
	call fn000000000046A3C8 (retsize: 0;)
	x22 = x0
	branch x0 == 0x0000000000000000 l000000000046A994
	// succ:  l000000000046AE70 l000000000046A994
l000000000046AE70:
	x0 = x20
	x1 = x22
	call strlist_append (retsize: 0;)
	x20 = x0
	x0 = x22
	call strlist_dispose (retsize: 0;)
	branch (w19 & 0x00000080) == 0x00000000 l000000000046A998
	// succ:  l000000000046AE8C l000000000046A998
l000000000046AE8C:
	goto l000000000046AE18
	// succ:  l000000000046AE18
l000000000046AE90:
	x0 = 0x00000000004D7000
	x0 = x0 + 0x0000000000000220
	x0 = x0 + 0x0000000000000078
	x1 = x21
	call fn000000000046A3C8 (retsize: 0;)
	x22 = x0
	branch x0 == 0x0000000000000000 l000000000046A990
	// succ:  l000000000046AEAC l000000000046A990
l000000000046AEAC:
	x0 = x20
	x1 = x22
	call strlist_append (retsize: 0;)
	x20 = x0
	x0 = x22
	call strlist_dispose (retsize: 0;)
	branch (w19 & 0x00000040) == 0x00000000 l000000000046A994
	// succ:  l000000000046AEC8 l000000000046A994
l000000000046AEC8:
	goto l000000000046AE54
	// succ:  l000000000046AE54
l000000000046AECC:
	x0 = 0x00000000004D7000
	x0 = x0 + 0x0000000000000220
	x0 = x0 + 0x0000000000000050
	x1 = x21
	call fn000000000046A3C8 (retsize: 0;)
	x22 = x0
	branch x0 == 0x0000000000000000 l000000000046A98C
	// succ:  l000000000046AEE8 l000000000046A98C
l000000000046AEE8:
	x0 = x20
	x1 = x22
	call strlist_append (retsize: 0;)
	x20 = x0
	x0 = x22
	call strlist_dispose (retsize: 0;)
	branch (w19 & 0x00000008) == 0x00000000 l000000000046A990
	// succ:  l000000000046AF04 l000000000046A990
l000000000046AF04:
	goto l000000000046AE90
	// succ:  l000000000046AE90
l000000000046AF08:
	x0 = 0x00000000004D7000
	x0 = x0 + 0x0000000000000220
	x0 = x0 + 0x0000000000000028
	x1 = x21
	call fn000000000046A3C8 (retsize: 0;)
	x22 = x0
	branch x0 == 0x0000000000000000 l000000000046A988
	// succ:  l000000000046AF24 l000000000046A988
l000000000046AF24:
	x0 = x20
	x1 = x22
	call strlist_append (retsize: 0;)
	x20 = x0
	x0 = x22
	call strlist_dispose (retsize: 0;)
	branch (w19 & 0x00000004) == 0x00000000 l000000000046A98C
	// succ:  l000000000046AF40 l000000000046A98C
l000000000046AF40:
	goto l000000000046AECC
	// succ:  l000000000046AECC
l000000000046AF44:
	x0 = 0x00000000004D7000
	x0 = x0 + 0x0000000000000220
	call fn000000000046A3C8 (retsize: 0;)
	x22 = x0
	branch x0 == 0x0000000000000000 l000000000046A980
	// succ:  l000000000046AF58 l000000000046A980
l000000000046AF58:
	x0 = 0x0000000000000000
	x1 = x22
	call strlist_append (retsize: 0;)
	x20 = x0
	x0 = x22
	call strlist_dispose (retsize: 0;)
	branch (w19 & 0x00000002) == 0x00000000 l000000000046A988
	// succ:  l000000000046AF74 l000000000046A988
l000000000046AF74:
	goto l000000000046AF08
	// succ:  l000000000046AF08
fn000000000046A960_exit:


// gen_compspec_completions
// Return size: 0
void gen_compspec_completions()
gen_compspec_completions_entry:
	// succ:  l000000000046AF78
l000000000046AF78:
	sp = fp
	sp = sp + -288
	Mem0[sp:word64] = x29
	sp = sp + 8
	Mem0[sp:word64] = x30
	x29 = x31 + 0x0000000000000000
	v8 = sp + 32
	Mem0[v8:word64] = x21
	v8 = v8 + 8
	Mem0[v8:word64] = x22
	x21 = x0
	x0 = Mem0[x0 + 8:word64]
	x1 = x2
	v14 = sp + 48
	Mem0[v14:word64] = x23
	v14 = v14 + 8
	Mem0[v14:word64] = x24
	v17 = sp + 64
	Mem0[v17:word64] = x25
	v17 = v17 + 8
	Mem0[v17:word64] = x26
	v20 = sp + 16
	Mem0[v20:word64] = x19
	v20 = v20 + 8
	Mem0[v20:word64] = x20
	v23 = sp + 80
	Mem0[v23:word64] = x27
	v23 = v23 + 8
	Mem0[v23:word64] = x28
	Mem0[x29 + 248:word64] = x2
	w26 = w3
	Mem0[x29 + 208:word32] = w4
	Mem0[x29 + 256:word64] = x5
	call fn000000000046A960 (retsize: 0;)
	x23 = x0
	x0 = Mem0[x21 + 24:word64]
	branch x0 == 0x0000000000000000 l000000000046B020
	// succ:  l000000000046AFC0 l000000000046B020
l000000000046AFC0:
	w0 = 0x00000000
	call strlist_create (retsize: 0;)
	x19 = x0
	x0 = Mem0[x21 + 24:word64]
	w1 = 0x00000000
	call glob_filename (retsize: 0;)
	x2 = 0x00000000004E3000
	x2 = x2 + 0xFFFFFFFFFFFFFF20
	Mem0[x19:word64] = x0
	x31 = x0 - x2
	NZCV = cond(x31)
	branch Test(EQ,Z) l000000000046B980
	// succ:  l000000000046AFEC l000000000046B980
l000000000046AFEC:
	branch x0 == 0x0000000000000000 l000000000046AFFC
	// succ:  l000000000046AFF0 l000000000046AFFC
l000000000046AFF0:
	call strvec_len (retsize: 0;)
	Mem0[x19 + 8:word32] = w0
	Mem0[x19 + 12:word32] = w0
	// succ:  l000000000046AFFC
l000000000046AFFC:
	x1 = x19
	x0 = x23
	call strlist_append (retsize: 0;)
	x23 = x0
	x0 = x19
	call strlist_dispose (retsize: 0;)
	w1 = 0x00000001
	x0 = 0x00000000004E1000
	Mem0[x0 + 3864:word32] = w1
	// succ:  l000000000046B020
l000000000046B020:
	x19 = Mem0[x21 + 32:word64]
	branch x19 == 0x0000000000000000 l000000000046B170
	// succ:  l000000000046B028 l000000000046B170
l000000000046B028:
	v32 = Mem0[x19:byte]
	w0 = (word32) v32
	branch w0 == 0x00000000 l000000000046B170
	// succ:  l000000000046B030 l000000000046B170
l000000000046B030:
	x0 = x19
	strlen(x0)
	sp = sp + 0xFFFFFFFFFFFFFFF8
	x2 = 0x0000000000000000
	x1 = x0
	w3 = 0xFFFFFFFF
	x0 = x19
	w4 = w2
	x5 = x2
	x6 = x2
	call split_at_delims (retsize: 0;)
	x19 = x0
	branch x0 == 0x0000000000000000 l000000000046B170
	// succ:  l000000000046B060 l000000000046B170
l000000000046B060:
	call expand_words_shellexp (retsize: 0;)
	Mem0[x29 + 224:word64] = x0
	x0 = x19
	call dispose_words (retsize: 0;)
	x0 = Mem0[x29 + 224:word64]
	call list_length (retsize: 0;)
	w0 = w0 + 0x00000001
	call strlist_create (retsize: 0;)
	x28 = x0
	x0 = Mem0[x29 + 248:word64]
	call bash_dequote_text (retsize: 0;)
	x27 = x0
	branch x0 == 0x0000000000000000 l000000000046B7F8
	// succ:  l000000000046B094 l000000000046B7F8
l000000000046B094:
	v35 = Mem0[x0:byte]
	w1 = (word32) v35
	w24 = 0x00000000
	branch w1 == 0x00000000 l000000000046B0AC
	// succ:  l000000000046B0A0 l000000000046B0AC
l000000000046B0A0:
	v37 = Mem0[x0 + 1:byte]
	w1 = (word32) v37
	w24 = 0x00000001
	branch w1 != 0x00000000 l000000000046B7E0
	// succ:  l000000000046B0AC l000000000046B7E0
l000000000046B0AC:
	x3 = Mem0[x29 + 224:word64]
	branch x3 == 0x0000000000000000 l000000000046B9B4
	// succ:  l000000000046B0B4 l000000000046B9B4
l000000000046B0B4:
	x0 = 0x00000000004AF000
	x0 = x0 + 0x00000000000001D8
l000000000046B12C:
	x0 = Mem0[x28:word64]
	Mem0[x28 + 12:word32] = w22
	Mem0[x0 + x1:word64] = 0x0000000000000000
	x0 = Mem0[x29 + 224:word64]
	call dispose_words (retsize: 0;)
	branch x27 == 0x0000000000000000 l000000000046B158
	// succ:  l000000000046B144 l000000000046B158
l000000000046B144:
	x4 = 0x00000000004AF000
	x0 = x27
	x1 = x4 + 0x00000000000001D8
	w2 = 0x0000035A
	call sh_xfree (retsize: 0;)
	// succ:  l000000000046B158
l000000000046B158:
	x0 = x23
	x1 = x28
	call strlist_append (retsize: 0;)
	x23 = x0
	x0 = x28
	call strlist_dispose (retsize: 0;)
	// succ:  l000000000046B170
l000000000046B170:
	x0 = Mem0[x21 + 64:word64]
	branch x0 == 0x0000000000000000 l000000000046B714
	// succ:  l000000000046B178 l000000000046B714
l000000000046B178:
	x0 = 0x00000000004E1000
	w2 = Mem0[x29 + 208:word32]
	x0 = Mem0[x0 + 3256:word64]
	w1 = w26
	call substring (retsize: 0;)
	x20 = 0x00000000004E4000
	w4 = Mem0[x29 + 208:word32]
	w3 = Mem0[x20 + 136:word32]
	x1 = 0x00000000004E1000
	x2 = Mem0[x1 + 4016:word64]
	w3 = w3 - w26
	w1 = w4 - w26
	x5 = x29 + 0x00000000000000C4
	w4 = 0x00000004
	x6 = x29 + 0x00000000000000C0
	Mem0[x29 + 240:word64] = x0
	call split_at_delims (retsize: 0;)
	x19 = Mem0[x21 + 56:word64]
	Mem0[x29 + 224:word64] = x0
	branch x19 == 0x0000000000000000 l000000000046B73C
	// succ:  l000000000046B1C8 l000000000046B73C
l000000000046B1C8:
	w1 = Mem0[x20 + 136:word32]
	x0 = x19
	w1 = w1 - w26
	Mem0[x29 + 280:word64] = x1
	w25 = Mem0[x29 + 192:word32]
	call find_function (retsize: 0;)
	x22 = x0
	x1 = Mem0[x29 + 280:word64]
	branch x0 == 0x0000000000000000 l000000000046B614
	// succ:  l000000000046B1EC l000000000046B614
l000000000046B1EC:
	x0 = Mem0[x29 + 240:word64]
	x2 = Mem0[x29 + 224:word64]
	w4 = 0x00000000
	w3 = w25 - 0x00000001
	call fn0000000000469BDC (retsize: 0;)
	x2 = Mem0[x29 + 224:word64]
	x1 = Mem0[x29 + 248:word64]
	w3 = w25
	x0 = x19
	call fn0000000000469D90 (retsize: 0;)
	x19 = x0
	x25 = 0x00000000004AF000
	x0 = x29 + 0x0000000000000060
	call save_parser_state (retsize: 0;)
	x25 = x25 + 0x0000000000000278
	x0 = x25
	call begin_unwind_frame (retsize: 0;)
	x0 = 0x000000000042A000
	x0 = x0 + 0x000000000000014C
	x1 = x29 + 0x0000000000000060
	call add_unwind_protect (retsize: 0;)
	x0 = 0x000000000042F000
	x0 = x0 + 0xFFFFFFFFFFFFFA38
	x1 = x19
	call add_unwind_protect (retsize: 0;)
	x0 = 0x0000000000469000
	x0 = x0 + 0xFFFFFFFFFFFFFB68
	x1 = 0x0000000000000000
	call add_unwind_protect (retsize: 0;)
	x1 = x19
	x0 = x22
	call execute_shell_function (retsize: 0;)
	w24 = w0
	x0 = x25
	call discard_unwind_frame (retsize: 0;)
	x0 = x29 + 0x0000000000000060
	call restore_parser_state (retsize: 0;)
	w31 = w24 - 0x0000007F
	NZCV = cond(w31)
	w2 = (word32) Test(NE,Z)
	w1 = w2 | 0x00000100
	w31 = w24 - 0x0000007C
	NZCV = cond(w31)
l000000000046B2F4:
	branch x19 == 0x0000000000000000 l000000000046B310
	// succ:  l000000000046B2F8 l000000000046B310
l000000000046B2F8:
	x0 = x23
	x1 = x19
	call strlist_append (retsize: 0;)
	x23 = x0
	x0 = x19
	call strlist_dispose (retsize: 0;)
	// succ:  l000000000046B310
l000000000046B310:
	x0 = Mem0[x21 + 64:word64]
	branch x0 == 0x0000000000000000 l000000000046B750
	// succ:  l000000000046B318 l000000000046B750
l000000000046B318:
	w19 = Mem0[x29 + 192:word32]
	w1 = Mem0[x20 + 136:word32]
	x0 = Mem0[x29 + 240:word64]
	x2 = Mem0[x29 + 224:word64]
	w4 = 0x00000001
	w3 = w19
	w1 = w1 - w26
	call fn0000000000469BDC (retsize: 0;)
	x1 = Mem0[x29 + 248:word64]
	x2 = Mem0[x29 + 224:word64]
	x0 = Mem0[x21 + 64:word64]
	w3 = w19
	call fn0000000000469D90 (retsize: 0;)
	Mem0[x29 + 264:word64] = x0
	x0 = Mem0[x21 + 64:word64]
	strlen(x0)
	sp = sp + 0xFFFFFFFFFFFFFFF8
	x4 = Mem0[x29 + 264:word64]
	w20 = w0 + 0x00000001
	x25 = Mem0[x4:word64]
	x19 = x0
	w24 = w20
	branch x25 != 0x0000000000000000 l000000000046B3A8
	// succ:  l000000000046B370 l000000000046B3A8
l000000000046B370:
	goto l000000000046B3C8
	// succ:  l000000000046B3C8
l000000000046B374:
	v66 = Mem0[x0:byte]
	w2 = (word32) v66
	branch w2 == 0x00000000 l000000000046B39C
	// succ:  l000000000046B37C l000000000046B39C
l000000000046B37C:
	v67 = Mem0[x0 + 1:byte]
	w2 = (word32) v67
	w1 = 0x00000004
	branch w2 == 0x00000000 l000000000046B39C
	// succ:  l000000000046B388 l000000000046B39C
l000000000046B388:
	v68 = Mem0[x0 + 2:byte]
	w2 = (word32) v68
	w1 = 0x00000005
	branch w2 == 0x00000000 l000000000046B39C
	// succ:  l000000000046B394 l000000000046B39C
l000000000046B394:
	strlen(x0)
	sp = sp + 0xFFFFFFFFFFFFFFF8
	w1 = w0 + 0x00000003
	// succ:  l000000000046B39C
l000000000046B39C:
	x25 = Mem0[x25:word64]
	w24 = w1 + w24
	branch x25 == 0x0000000000000000 l000000000046B3C8
	// succ:  l000000000046B3A8 l000000000046B3C8
l000000000046B3A8:
	x0 = Mem0[x25 + 8:word64]
	w1 = 0x00000003
	x0 = Mem0[x0:word64]
	branch x0 != 0x0000000000000000 l000000000046B374
	// succ:  l000000000046B3B8 l000000000046B374
l000000000046B3B8:
	x25 = Mem0[x25:word64]
	w1 = 0x00000003
	w24 = w1 + w24
	branch x25 != 0x0000000000000000 l000000000046B3A8
	// succ:  l000000000046B3C8 l000000000046B3A8
l000000000046B3C8:
	x4 = 0x00000000004AF000
	x26 = x4 + 0x00000000000001D8
	w0 = w24 + 0x00000003
	x1 = x26
	w2 = 0x0000046B
l000000000046B534:
	x0 = Mem0[x29 + 224:word64]
	branch x0 == 0x0000000000000000 l000000000046B540
	// succ:  l000000000046B53C l000000000046B540
l000000000046B53C:
	call dispose_words (retsize: 0;)
	// succ:  l000000000046B540
l000000000046B540:
	x1 = Mem0[x29 + 240:word64]
	branch x1 == 0x0000000000000000 l000000000046B55C
	// succ:  l000000000046B548 l000000000046B55C
l000000000046B548:
	x4 = 0x00000000004AF000
	x0 = x1
	w2 = 0x00000545
	x1 = x4 + 0x00000000000001D8
	call sh_xfree (retsize: 0;)
	// succ:  l000000000046B55C
l000000000046B55C:
	x1 = Mem0[x29 + 256:word64]
	branch x1 == 0x0000000000000000 l000000000046B56C
	// succ:  l000000000046B564 l000000000046B56C
l000000000046B564:
	w2 = Mem0[x29 + 208:word32]
	Mem0[x1:word32] = w2
	// succ:  l000000000046B56C
l000000000046B56C:
	w3 = Mem0[x29 + 272:word32]
	branch w3 != 0x00000000 l000000000046B954
	// succ:  l000000000046B574 l000000000046B954
l000000000046B574:
	x1 = Mem0[x21 + 80:word64]
	branch x1 == 0x0000000000000000 l000000000046B734
	// succ:  l000000000046B57C l000000000046B734
l000000000046B57C:
	x2 = Mem0[x29 + 248:word64]
	x0 = x23
	call filter_stringlist (retsize: 0;)
	x31 = x23 - x0
	NZCV = cond(x31)
	x19 = x0
	branch Test(EQ,Z) l000000000046B5C8
	// succ:  l000000000046B594 l000000000046B5C8
l000000000046B594:
	branch x23 == 0x0000000000000000 l000000000046B5C8
	// succ:  l000000000046B598 l000000000046B5C8
l000000000046B598:
	x4 = 0x00000000004AF000
	x0 = Mem0[x23:word64]
	Mem0[x29 + 232:word64] = x4
	branch x0 == 0x0000000000000000 l000000000046B5B4
	// succ:  l000000000046B5A8 l000000000046B5B4
l000000000046B5A8:
	x1 = x4 + 0x00000000000001D8
	w2 = 0x0000055E
	call sh_xfree (retsize: 0;)
	// succ:  l000000000046B5B4
l000000000046B5B4:
	x4 = Mem0[x29 + 232:word64]
	x0 = x23
	x1 = x4 + 0x00000000000001D8
	w2 = 0x0000055F
	call sh_xfree (retsize: 0;)
	// succ:  l000000000046B5C8
l000000000046B5C8:
	x1 = Mem0[x21 + 40:word64]
	x2 = Mem0[x21 + 48:word64]
	branch x1 == 0x0000000000000000 l000000000046B72C
	// succ:  l000000000046B5D4 l000000000046B72C
l000000000046B5D4:
	x0 = x19
	call strlist_prefix_suffix (retsize: 0;)
	x19 = x0
	// succ:  l000000000046B5E0
l000000000046B5E0:
	branch x19 == 0x0000000000000000 l000000000046B6C8
	// succ:  l000000000046B5E4 l000000000046B6C8
l000000000046B5E4:
	w0 = Mem0[x19 + 12:word32]
	branch w0 == 0x00000000 l000000000046B6C8
	// succ:  l000000000046B5EC l000000000046B6C8
l000000000046B5EC:
	x0 = Mem0[x21 + 16:word64]
	// succ:  l000000000046B5F0
l000000000046B5F0:
	branch (w0 & 0x00000040) == 0x00000000 l000000000046B75C
	// succ:  l000000000046B5F4 l000000000046B75C
l000000000046B5F4:
	x0 = x19
	v46 = sp + 32
	x21 = Mem0[v46:word64]
	v46 = v46 + 8
	x22 = Mem0[v46:word64]
	v47 = sp + 16
	x19 = Mem0[v47:word64]
	v47 = v47 + 8
	x20 = Mem0[v47:word64]
	v48 = sp + 48
	x23 = Mem0[v48:word64]
	v48 = v48 + 8
	x24 = Mem0[v48:word64]
	v49 = sp + 64
	x25 = Mem0[v49:word64]
	v49 = v49 + 8
	x26 = Mem0[v49:word64]
	v50 = sp + 80
	x27 = Mem0[v50:word64]
	v50 = v50 + 8
	x28 = Mem0[v50:word64]
	x29 = Mem0[sp:word64]
	sp = sp + 8
	x30 = Mem0[sp:word64]
	sp = sp + 288
	return
	// succ:  gen_compspec_completions_exit
l000000000046B614:
	x1 = 0x00000000004AF000
	w2 = 0x00000005
	x1 = x1 + 0x0000000000000250
	dcgettext(x0, x1, x2)
	sp = sp + 0xFFFFFFFFFFFFFFF8
	x1 = x19
	call internal_error (retsize: 0;)
	call rl_ding (retsize: 0;)
	call rl_on_new_line (retsize: 0;)
	x19 = x22
	w3 = 0x00000001
	Mem0[x29 + 272:word32] = 0x00000000
	Mem0[x29 + 208:word32] = w3
	goto l000000000046B2F4
	// succ:  l000000000046B2F4
l000000000046B6C8:
	x0 = Mem0[x21 + 16:word64]
	branch (w0 & 0x00000008) == 0x00000000 l000000000046B5F0
	// succ:  l000000000046B6D0 l000000000046B5F0
l000000000046B6D0:
	call compspec_create (retsize: 0;)
	x20 = x0
	x1 = Mem0[x29 + 248:word64]
	x0 = 0x0000000000000020
	Mem0[x20 + 8:word64] = x0
	call fn000000000046A960 (retsize: 0;)
	x19 = x0
	x0 = x20
	call compspec_dispose (retsize: 0;)
	x0 = x19
	v61 = sp + 32
	x21 = Mem0[v61:word64]
	v61 = v61 + 8
	x22 = Mem0[v61:word64]
	v62 = sp + 16
	x19 = Mem0[v62:word64]
	v62 = v62 + 8
	x20 = Mem0[v62:word64]
	v63 = sp + 48
	x23 = Mem0[v63:word64]
	v63 = v63 + 8
	x24 = Mem0[v63:word64]
	v64 = sp + 64
	x25 = Mem0[v64:word64]
	v64 = v64 + 8
	x26 = Mem0[v64:word64]
	v65 = sp + 80
	x27 = Mem0[v65:word64]
	v65 = v65 + 8
	x28 = Mem0[v65:word64]
	x29 = Mem0[sp:word64]
	sp = sp + 8
	x30 = Mem0[sp:word64]
	sp = sp + 288
	return
	// succ:  gen_compspec_completions_exit
l000000000046B714:
	x0 = Mem0[x21 + 56:word64]
	branch x0 != 0x0000000000000000 l000000000046B178
	// succ:  l000000000046B71C l000000000046B178
l000000000046B71C:
	Mem0[x29 + 272:word32] = w0
	w0 = 0x00000001
	Mem0[x29 + 208:word32] = w0
	goto l000000000046B55C
	// succ:  l000000000046B55C
l000000000046B72C:
	branch x2 != 0x0000000000000000 l000000000046B5D4
	// succ:  l000000000046B730 l000000000046B5D4
l000000000046B730:
	goto l000000000046B5E0
	// succ:  l000000000046B5E0
l000000000046B734:
	x19 = x23
	goto l000000000046B5C8
	// succ:  l000000000046B5C8
l000000000046B73C:
	w1 = 0x00000001
	x0 = Mem0[x21 + 64:word64]
	Mem0[x29 + 272:word32] = w19
	Mem0[x29 + 208:word32] = w1
	branch x0 != 0x0000000000000000 l000000000046B318
	// succ:  l000000000046B750 l000000000046B318
l000000000046B750:
	x0 = Mem0[x21 + 56:word64]
	branch x0 != 0x0000000000000000 l000000000046B534
	// succ:  l000000000046B758 l000000000046B534
l000000000046B758:
	goto l000000000046B55C
	// succ:  l000000000046B55C
l000000000046B75C:
	call compspec_create (retsize: 0;)
	x20 = x0
	x1 = Mem0[x29 + 248:word64]
	x0 = 0x0000000000000020
	Mem0[x20 + 8:word64] = x0
	call fn000000000046A960 (retsize: 0;)
	x21 = x0
	x1 = x21
	x0 = x19
	call strlist_append (retsize: 0;)
	x19 = x0
	x0 = x21
	call strlist_dispose (retsize: 0;)
	x0 = x20
	call compspec_dispose (retsize: 0;)
	x0 = x19
	v56 = sp + 32
	x21 = Mem0[v56:word64]
	v56 = v56 + 8
	x22 = Mem0[v56:word64]
	v57 = sp + 16
	x19 = Mem0[v57:word64]
	v57 = v57 + 8
	x20 = Mem0[v57:word64]
	v58 = sp + 48
	x23 = Mem0[v58:word64]
	v58 = v58 + 8
	x24 = Mem0[v58:word64]
	v59 = sp + 64
	x25 = Mem0[v59:word64]
	v59 = v59 + 8
	x26 = Mem0[v59:word64]
	v60 = sp + 80
	x27 = Mem0[v60:word64]
	v60 = v60 + 8
	x28 = Mem0[v60:word64]
	x29 = Mem0[sp:word64]
	sp = sp + 8
	x30 = Mem0[sp:word64]
	sp = sp + 288
	return
	// succ:  gen_compspec_completions_exit
l000000000046B7E0:
	v40 = Mem0[x0 + 2:byte]
	w1 = (word32) v40
	w24 = 0x00000002
	branch w1 == 0x00000000 l000000000046B0AC
	// succ:  l000000000046B7EC l000000000046B0AC
l000000000046B7EC:
	strlen(x0)
	sp = sp + 0xFFFFFFFFFFFFFFF8
	w24 = w0
	goto l000000000046B0AC
	// succ:  l000000000046B0AC
l000000000046B7F8:
	w24 = w0
	goto l000000000046B0AC
	// succ:  l000000000046B0AC
l000000000046B954:
	x0 = x23
	call strlist_dispose (retsize: 0;)
	x19 = 0x0000000000000000
	x0 = x19
	v51 = sp + 32
	x21 = Mem0[v51:word64]
	v51 = v51 + 8
	x22 = Mem0[v51:word64]
	v52 = sp + 16
	x19 = Mem0[v52:word64]
	v52 = v52 + 8
	x20 = Mem0[v52:word64]
	v53 = sp + 48
	x23 = Mem0[v53:word64]
	v53 = v53 + 8
	x24 = Mem0[v53:word64]
	v54 = sp + 64
	x25 = Mem0[v54:word64]
	v54 = v54 + 8
	x26 = Mem0[v54:word64]
	v55 = sp + 80
	x27 = Mem0[v55:word64]
	v55 = v55 + 8
	x28 = Mem0[v55:word64]
	x29 = Mem0[sp:word64]
	sp = sp + 8
	x30 = Mem0[sp:word64]
	sp = sp + 288
	return
	// succ:  gen_compspec_completions_exit
l000000000046B980:
	Mem0[x19:word64] = 0x0000000000000000
	goto l000000000046AFFC
	// succ:  l000000000046AFFC
l000000000046B9B4:
	x1 = Mem0[x29 + 224:word64]
	w22 = Mem0[x29 + 224:word32]
	goto l000000000046B12C
	// succ:  l000000000046B12C
gen_compspec_completions_exit:


// fn000000000046B9C8
// Return size: 0
void fn000000000046B9C8()
fn000000000046B9C8_entry:
	// succ:  l000000000046B9C8
l000000000046B9C8:
	sp = fp
	sp = sp + -112
	Mem0[sp:word64] = x29
	sp = sp + 8
	Mem0[sp:word64] = x30
	x29 = x31 + 0x0000000000000000
	v8 = sp + 16
	Mem0[v8:word64] = x19
	v8 = v8 + 8
	Mem0[v8:word64] = x20
	v11 = sp + 48
	Mem0[v11:word64] = x23
	v11 = v11 + 8
	Mem0[v11:word64] = x24
	v14 = sp + 64
	Mem0[v14:word64] = x25
	v14 = v14 + 8
	Mem0[v14:word64] = x26
	v17 = sp + 80
	Mem0[v17:word64] = x27
	v17 = v17 + 8
	Mem0[v17:word64] = x28
	v20 = sp + 32
	Mem0[v20:word64] = x21
	v20 = v20 + 8
	Mem0[v20:word64] = x22
	x24 = x1
	x28 = x2
	w27 = w3
	w26 = w4
	x20 = x5
	x25 = x6
	x23 = x7
	call progcomp_search (retsize: 0;)
	x19 = x0
	branch x0 == 0x0000000000000000 l000000000046BAB8
	// succ:  l000000000046BA0C l000000000046BAB8
l000000000046BA0C:
	x0 = Mem0[x23:word64]
	x31 = x0 - x19
	NZCV = cond(x31)
	branch Test(EQ,Z) l000000000046BAE0
	// succ:  l000000000046BA18 l000000000046BAE0
l000000000046BA18:
	branch x0 == 0x0000000000000000 l000000000046BA20
	// succ:  l000000000046BA1C l000000000046BA20
l000000000046BA1C:
	call compspec_dispose (retsize: 0;)
	// succ:  l000000000046BA20
l000000000046BA20:
	w0 = Mem0[x19:word32]
	x22 = 0x00000000004E3000
	w0 = w0 + 0x00000001
	Mem0[x19:word32] = w0
	Mem0[x23:word64] = x19
	x0 = x19
	call compspec_copy (retsize: 0;)
	x6 = Mem0[x22 + 3496:word64]
	x21 = 0x00000000004E3000
	x1 = x24
	x2 = x28
	w3 = w27
	w4 = w26
	x5 = x20
	x19 = Mem0[x21 + 3488:word64]
	Mem0[x29 + 96:word64] = x6
	Mem0[x21 + 3488:word64] = x24
	x23 = x0
	Mem0[x22 + 3496:word64] = x0
	call gen_compspec_completions (retsize: 0;)
	x6 = Mem0[x29 + 96:word64]
	Mem0[x21 + 3488:word64] = x19
	Mem0[x22 + 3496:word64] = x6
	x24 = x0
	branch x25 == 0x0000000000000000 l000000000046BA94
	// succ:  l000000000046BA84 l000000000046BA94
l000000000046BA84:
	branch x20 == 0x0000000000000000 l000000000046BAD4
	// succ:  l000000000046BA88 l000000000046BAD4
l000000000046BA88:
	w0 = Mem0[x20:word32]
l000000000046BA94:
	branch x20 == 0x0000000000000000 l000000000046BAAC
	// succ:  l000000000046BA98 l000000000046BAAC
l000000000046BA98:
	w1 = Mem0[x20:word32]
	x0 = Mem0[x23 + 16:word64]
	w1 = w1 & 0xFFFFFEFF
	w0 = w1 | w0
	Mem0[x20:word32] = w0
	// succ:  l000000000046BAAC
l000000000046BAAC:
	x0 = x23
	call compspec_dispose (retsize: 0;)
	x0 = x24
	// succ:  l000000000046BAB8
l000000000046BAB8:
	v33 = sp + 16
	x19 = Mem0[v33:word64]
	v33 = v33 + 8
	x20 = Mem0[v33:word64]
	v34 = sp + 32
	x21 = Mem0[v34:word64]
	v34 = v34 + 8
	x22 = Mem0[v34:word64]
	v35 = sp + 48
	x23 = Mem0[v35:word64]
	v35 = v35 + 8
	x24 = Mem0[v35:word64]
	v36 = sp + 64
	x25 = Mem0[v36:word64]
	v36 = v36 + 8
	x26 = Mem0[v36:word64]
	v37 = sp + 80
	x27 = Mem0[v37:word64]
	v37 = v37 + 8
	x28 = Mem0[v37:word64]
	x29 = Mem0[sp:word64]
	sp = sp + 8
	x30 = Mem0[sp:word64]
	sp = sp + 112
	return
	// succ:  fn000000000046B9C8_exit
l000000000046BAD4:
	w0 = w20
	Mem0[x25:word32] = w0
	goto l000000000046BA94
	// succ:  l000000000046BA94
l000000000046BAE0:
	x0 = 0x0000000000000000
	goto l000000000046BAB8
	// succ:  l000000000046BAB8
fn000000000046B9C8_exit:


// pcomp_set_readline_variables
// Return size: 0
void pcomp_set_readline_variables()
pcomp_set_readline_variables_entry:
	// succ:  l000000000046BAE8
l000000000046BAE8:
	sp = fp
	branch (w0 & 0x00000004) == 0x00000000 l000000000046BAF4
	// succ:  l000000000046BAEC l000000000046BAF4
l000000000046BAEC:
	x2 = 0x00000000004E1000
	Mem0[x2 + 3864:word32] = w1
	// succ:  l000000000046BAF4
l000000000046BAF4:
	branch (w0 & 0x00000010) == 0x00000000 l000000000046BB00
	// succ:  l000000000046BAF8 l000000000046BB00
l000000000046BAF8:
	x0 = 0x00000000004E1000
	Mem0[x0 + 3888:word32] = w1
	// succ:  l000000000046BB00
l000000000046BB00:
	return
	// succ:  pcomp_set_readline_variables_exit
pcomp_set_readline_variables_exit:


// pcomp_set_compspec_options
// Return size: 0
void pcomp_set_compspec_options()
pcomp_set_compspec_options_entry:
	// succ:  l000000000046BB04
l000000000046BB04:
	sp = fp
	branch x0 == 0x0000000000000000 l000000000046BB38
	// succ:  l000000000046BB08 l000000000046BB38
l000000000046BB08:
	branch w2 != 0x00000000 l000000000046BB24
	// succ:  l000000000046BB0C l000000000046BB24
l000000000046BB0C:
	x2 = Mem0[x0 + 16:word64]
	w1 = ~w1
l000000000046BB24:
	x2 = Mem0[x0 + 16:word64]
l000000000046BB38:
	x0 = 0x00000000004E3000
	x0 = Mem0[x0 + 3496:word64]
	branch x0 != 0x0000000000000000 l000000000046BB08
	// succ:  l000000000046BB44 l000000000046BB08
l000000000046BB44:
	return
	// succ:  pcomp_set_compspec_options_exit
pcomp_set_compspec_options_exit:


// programmable_completions
// Return size: 0
void programmable_completions()
programmable_completions_entry:
	// succ:  l000000000046BB48
l000000000046BB48:
	sp = fp
	sp = sp + -112
	Mem0[sp:word64] = x29
	sp = sp + 8
	Mem0[sp:word64] = x30
	x29 = x31 + 0x0000000000000000
	v8 = sp + 64
	Mem0[v8:word64] = x25
	v8 = v8 + 8
	Mem0[v8:word64] = x26
	v11 = sp + 32
	Mem0[v11:word64] = x21
	v11 = v11 + 8
	Mem0[v11:word64] = x22
	x26 = 0x00000000004AF000
	x21 = x29 + 0x0000000000000060
	v14 = sp + 16
	Mem0[v14:word64] = x19
	v14 = v14 + 8
	Mem0[v14:word64] = x20
	v17 = sp + 48
	Mem0[v17:word64] = x23
	v17 = v17 + 8
	Mem0[v17:word64] = x24
	Mem0[sp + 80:word64] = x27
	x19 = x0
	x25 = x1
	w24 = w2
	w23 = w3
	x27 = x4
	Mem0[x29 + 96:word64] = 0x0000000000000000
	x21 = x21 + 12
	Mem0[x21:word32] = 0x00000000
	w20 = 0x00000021
	x26 = x26 + 0x00000000000002A8
	goto l000000000046BBCC
	// succ:  l000000000046BBCC
l000000000046BB94:
	x0 = x26
	x1 = x19
	x2 = x25
	w3 = w24
	w4 = w23
	x5 = x21
	x6 = x29 + 0x0000000000000068
	x7 = x29 + 0x0000000000000060
	call fn000000000046B9C8 (retsize: 0;)
	x22 = x0
	// succ:  l000000000046BBBC
l000000000046BBBC:
	w20 = w20 - 0x00000001
	NZCV = cond(w20)
	branch Test(EQ,Z) l000000000046BC50
	// succ:  l000000000046BBC4 l000000000046BC50
l000000000046BBC4:
	w6 = Mem0[x29 + 104:word32]
	branch w6 == 0x00000000 l000000000046BC60
	// succ:  l000000000046BBCC l000000000046BC60
l000000000046BBCC:
	x6 = x29 + 0x0000000000000068
	x1 = x19
	x2 = x25
	w3 = w24
	w4 = w23
	x5 = x21
	x7 = x29 + 0x0000000000000060
	x0 = x19
	Mem0[x29 + 104:word32] = 0x00000000
	call fn000000000046B9C8 (retsize: 0;)
	w6 = Mem0[x29 + 108:word32]
	x22 = x0
	w1 = 0x0000002F
	x0 = x19
	branch w6 != 0x00000000 l000000000046BBBC
	// succ:  l000000000046BC08 l000000000046BBBC
l000000000046BC08:
	strrchr(x0, x1)
	sp = sp + 0xFFFFFFFFFFFFFFF8
	branch x0 == 0x0000000000000000 l000000000046BB94
	// succ:  l000000000046BC10 l000000000046BB94
l000000000046BC10:
	v34 = Mem0[x0 + 1:byte]
	w1 = (word32) v34
	branch w1 == 0x00000000 l000000000046BB94
	// succ:  l000000000046BC18 l000000000046BB94
l000000000046BC18:
	x1 = x19
	x2 = x25
	w3 = w24
	w4 = w23
	x5 = x21
	x6 = x29 + 0x0000000000000068
	x7 = x29 + 0x0000000000000060
	x0 = x0 + 0x0000000000000001
	call fn000000000046B9C8 (retsize: 0;)
	x22 = x0
	w0 = Mem0[x29 + 108:word32]
	branch w0 == 0x00000000 l000000000046BB94
	// succ:  l000000000046BC48 l000000000046BB94
l000000000046BC48:
	w20 = w20 - 0x00000001
	NZCV = cond(w20)
	branch Test(NE,Z) l000000000046BBC4
	// succ:  l000000000046BC50 l000000000046BBC4
l000000000046BC50:
	x0 = 0x00000000004AF000
	x0 = x0 + 0x00000000000002B8
	x1 = x19
	call internal_warning (retsize: 0;)
	// succ:  l000000000046BC60
l000000000046BC60:
	branch x22 == 0x0000000000000000 l000000000046BC7C
	// succ:  l000000000046BC64 l000000000046BC7C
l000000000046BC64:
	x1 = 0x00000000004AF000
	x0 = x22
	x1 = x1 + 0x00000000000001D8
	w2 = 0x000005FC
	x22 = Mem0[x22:word64]
	call sh_xfree (retsize: 0;)
	// succ:  l000000000046BC7C
l000000000046BC7C:
	branch x27 == 0x0000000000000000 l000000000046BC88
	// succ:  l000000000046BC80 l000000000046BC88
l000000000046BC80:
	w0 = Mem0[x29 + 108:word32]
	Mem0[x27:word32] = w0
	// succ:  l000000000046BC88
l000000000046BC88:
	x0 = Mem0[x29 + 96:word64]
	branch x0 == 0x0000000000000000 l000000000046BC94
	// succ:  l000000000046BC90 l000000000046BC94
l000000000046BC90:
	call compspec_dispose (retsize: 0;)
	// succ:  l000000000046BC94
l000000000046BC94:
	x0 = x22
	v38 = sp + 16
	x19 = Mem0[v38:word64]
	v38 = v38 + 8
	x20 = Mem0[v38:word64]
	v39 = sp + 32
	x21 = Mem0[v39:word64]
	v39 = v39 + 8
	x22 = Mem0[v39:word64]
	v40 = sp + 48
	x23 = Mem0[v40:word64]
	v40 = v40 + 8
	x24 = Mem0[v40:word64]
	v41 = sp + 64
	x25 = Mem0[v41:word64]
	v41 = v41 + 8
	x26 = Mem0[v41:word64]
	x27 = Mem0[sp + 80:word64]
	x29 = Mem0[sp:word64]
	sp = sp + 8
	x30 = Mem0[sp:word64]
	sp = sp + 112
	return
	// succ:  programmable_completions_exit
programmable_completions_exit:


// compspec_create
// Return size: 0
void compspec_create()
compspec_create_entry:
	// succ:  l000000000046BCB4
l000000000046BCB4:
	sp = fp
	sp = sp + -16
	Mem0[sp:word64] = x29
	sp = sp + 8
	Mem0[sp:word64] = x30
	x29 = x31 + 0x0000000000000000
	x1 = 0x00000000004AF000
	x1 = x1 + 0x00000000000002F0
	w2 = 0x00000035
	x0 = 0x0000000000000058
	call sh_xmalloc (retsize: 0;)
	Mem0[x0:word32] = 0x00000000
	Mem0[x0 + 8:word64] = 0x0000000000000000
	Mem0[x0 + 16:word64] = 0x0000000000000000
	Mem0[x0 + 24:word64] = 0x0000000000000000
	Mem0[x0 + 32:word64] = 0x0000000000000000
	Mem0[x0 + 40:word64] = 0x0000000000000000
	Mem0[x0 + 48:word64] = 0x0000000000000000
	Mem0[x0 + 56:word64] = 0x0000000000000000
	Mem0[x0 + 64:word64] = 0x0000000000000000
	Mem0[x0 + 72:word64] = 0x0000000000000000
	Mem0[x0 + 80:word64] = 0x0000000000000000
	x29 = Mem0[sp:word64]
	sp = sp + 8
	x30 = Mem0[sp:word64]
	sp = sp + 16
	return
	// succ:  compspec_create_exit
compspec_create_exit:


// compspec_dispose
// Return size: 0
void compspec_dispose()
compspec_dispose_entry:
	// succ:  l000000000046BD04
l000000000046BD04:
	sp = fp
	sp = sp + -32
	Mem0[sp:word64] = x29
	sp = sp + 8
	Mem0[sp:word64] = x30
	x29 = x31 + 0x0000000000000000
	v8 = sp + 16
	Mem0[v8:word64] = x19
	v8 = v8 + 8
	Mem0[v8:word64] = x20
	x19 = x0
	w0 = Mem0[x0:word32]
	w0 = w0 - 0x00000001
	Mem0[x19:word32] = w0
	branch w0 != 0x00000000 l000000000046BDE0
	// succ:  l000000000046BD24 l000000000046BDE0
l000000000046BD24:
	x0 = Mem0[x19 + 24:word64]
	x20 = 0x00000000004AF000
	branch x0 == 0x0000000000000000 l000000000046BD3C
	// succ:  l000000000046BD30 l000000000046BD3C
l000000000046BD30:
	x1 = x20 + 0x00000000000002F0
	w2 = 0x0000004E
	call sh_xfree (retsize: 0;)
	// succ:  l000000000046BD3C
l000000000046BD3C:
	x0 = Mem0[x19 + 32:word64]
	branch x0 == 0x0000000000000000 l000000000046BD50
	// succ:  l000000000046BD44 l000000000046BD50
l000000000046BD44:
	x1 = x20 + 0x00000000000002F0
	w2 = 0x0000004F
	call sh_xfree (retsize: 0;)
	// succ:  l000000000046BD50
l000000000046BD50:
	x0 = Mem0[x19 + 40:word64]
	branch x0 == 0x0000000000000000 l000000000046BD64
	// succ:  l000000000046BD58 l000000000046BD64
l000000000046BD58:
	x1 = x20 + 0x00000000000002F0
	w2 = 0x00000050
	call sh_xfree (retsize: 0;)
	// succ:  l000000000046BD64
l000000000046BD64:
	x0 = Mem0[x19 + 48:word64]
	branch x0 == 0x0000000000000000 l000000000046BD78
	// succ:  l000000000046BD6C l000000000046BD78
l000000000046BD6C:
	x1 = x20 + 0x00000000000002F0
	w2 = 0x00000051
	call sh_xfree (retsize: 0;)
	// succ:  l000000000046BD78
l000000000046BD78:
	x0 = Mem0[x19 + 56:word64]
	branch x0 == 0x0000000000000000 l000000000046BD8C
	// succ:  l000000000046BD80 l000000000046BD8C
l000000000046BD80:
	x1 = x20 + 0x00000000000002F0
	w2 = 0x00000052
	call sh_xfree (retsize: 0;)
	// succ:  l000000000046BD8C
l000000000046BD8C:
	x0 = Mem0[x19 + 64:word64]
	branch x0 == 0x0000000000000000 l000000000046BDA0
	// succ:  l000000000046BD94 l000000000046BDA0
l000000000046BD94:
	x1 = x20 + 0x00000000000002F0
	w2 = 0x00000053
	call sh_xfree (retsize: 0;)
	// succ:  l000000000046BDA0
l000000000046BDA0:
	x0 = Mem0[x19 + 72:word64]
	branch x0 == 0x0000000000000000 l000000000046BDB4
	// succ:  l000000000046BDA8 l000000000046BDB4
l000000000046BDA8:
	x1 = x20 + 0x00000000000002F0
	w2 = 0x00000054
	call sh_xfree (retsize: 0;)
	// succ:  l000000000046BDB4
l000000000046BDB4:
	x0 = Mem0[x19 + 80:word64]
	branch x0 == 0x0000000000000000 l000000000046BDC8
	// succ:  l000000000046BDBC l000000000046BDC8
l000000000046BDBC:
	x1 = x20 + 0x00000000000002F0
	w2 = 0x00000055
	call sh_xfree (retsize: 0;)
	// succ:  l000000000046BDC8
l000000000046BDC8:
	x0 = x19
	x1 = x20 + 0x00000000000002F0
	v14 = sp + 16
	x19 = Mem0[v14:word64]
	v14 = v14 + 8
	x20 = Mem0[v14:word64]
	x29 = Mem0[sp:word64]
	sp = sp + 8
	x30 = Mem0[sp:word64]
	sp = sp + 32
	w2 = 0x00000057
	// succ:  l000000000046BDDC_thunk_sh_xfree
l000000000046BDDC_thunk_sh_xfree:
	call sh_xfree (retsize: 0;)
	return
	// succ:  compspec_dispose_exit
l000000000046BDE0:
	v13 = sp + 16
	x19 = Mem0[v13:word64]
	v13 = v13 + 8
	x20 = Mem0[v13:word64]
	x29 = Mem0[sp:word64]
	sp = sp + 8
	x30 = Mem0[sp:word64]
	sp = sp + 32
	return
	// succ:  compspec_dispose_exit
compspec_dispose_exit:


// compspec_copy
// Return size: 0
void compspec_copy()
compspec_copy_entry:
	// succ:  l000000000046BDF0
l000000000046BDF0:
	sp = fp
	sp = sp + -48
	Mem0[sp:word64] = x29
	sp = sp + 8
	Mem0[sp:word64] = x30
	x29 = x31 + 0x0000000000000000
	v8 = sp + 32
	Mem0[v8:word64] = x21
	v8 = v8 + 8
	Mem0[v8:word64] = x22
	x21 = 0x00000000004AF000
	x22 = x21 + 0x00000000000002F0
	v11 = sp + 16
	Mem0[v11:word64] = x19
	v11 = v11 + 8
	Mem0[v11:word64] = x20
	x1 = x22
	x19 = x0
	w2 = 0x00000061
	x0 = 0x0000000000000058
	call sh_xmalloc (retsize: 0;)
	w3 = Mem0[x19:word32]
	x2 = Mem0[x19 + 8:word64]
	x1 = Mem0[x19 + 16:word64]
	x20 = x0
	x0 = Mem0[x19 + 24:word64]
	Mem0[x20:word32] = w3
	Mem0[x20 + 8:word64] = x2
	Mem0[x20 + 16:word64] = x1
	branch x0 == 0x0000000000000000 l000000000046BFA8
	// succ:  l000000000046BE40 l000000000046BFA8
l000000000046BE40:
	strlen(x0)
	sp = sp + 0xFFFFFFFFFFFFFFF8
	x1 = x22
	w2 = 0x00000067
	x0 = x0 + 0x0000000000000001
	call sh_xmalloc (retsize: 0;)
	x1 = Mem0[x19 + 24:word64]
	strcpy(x0, x1)
	sp = sp + 0xFFFFFFFFFFFFFFF8
	x1 = x0
	x0 = Mem0[x19 + 32:word64]
	Mem0[x20 + 24:word64] = x1
	branch x0 == 0x0000000000000000 l000000000046BFB8
	// succ:  l000000000046BE6C l000000000046BFB8
l000000000046BE6C:
	strlen(x0)
	sp = sp + 0xFFFFFFFFFFFFFFF8
	x1 = x21 + 0x00000000000002F0
	w2 = 0x00000068
	x0 = x0 + 0x0000000000000001
	call sh_xmalloc (retsize: 0;)
	x1 = Mem0[x19 + 32:word64]
	strcpy(x0, x1)
	sp = sp + 0xFFFFFFFFFFFFFFF8
	x1 = x0
	x0 = Mem0[x19 + 40:word64]
	Mem0[x20 + 32:word64] = x1
	branch x0 == 0x0000000000000000 l000000000046BFC8
	// succ:  l000000000046BE98 l000000000046BFC8
l000000000046BE98:
	strlen(x0)
	sp = sp + 0xFFFFFFFFFFFFFFF8
	x1 = x21 + 0x00000000000002F0
	w2 = 0x00000069
	x0 = x0 + 0x0000000000000001
	call sh_xmalloc (retsize: 0;)
	x1 = Mem0[x19 + 40:word64]
	strcpy(x0, x1)
	sp = sp + 0xFFFFFFFFFFFFFFF8
	x1 = x0
	x0 = Mem0[x19 + 48:word64]
	Mem0[x20 + 40:word64] = x1
	branch x0 == 0x0000000000000000 l000000000046BFD8
	// succ:  l000000000046BEC4 l000000000046BFD8
l000000000046BEC4:
	strlen(x0)
	sp = sp + 0xFFFFFFFFFFFFFFF8
	x1 = x21 + 0x00000000000002F0
	w2 = 0x0000006A
	x0 = x0 + 0x0000000000000001
	call sh_xmalloc (retsize: 0;)
	x1 = Mem0[x19 + 48:word64]
	strcpy(x0, x1)
	sp = sp + 0xFFFFFFFFFFFFFFF8
	x1 = x0
	x0 = Mem0[x19 + 56:word64]
	Mem0[x20 + 48:word64] = x1
	branch x0 == 0x0000000000000000 l000000000046BFE8
	// succ:  l000000000046BEF0 l000000000046BFE8
l000000000046BEF0:
	strlen(x0)
	sp = sp + 0xFFFFFFFFFFFFFFF8
	x1 = x21 + 0x00000000000002F0
	w2 = 0x0000006B
	x0 = x0 + 0x0000000000000001
	call sh_xmalloc (retsize: 0;)
	x1 = Mem0[x19 + 56:word64]
	strcpy(x0, x1)
	sp = sp + 0xFFFFFFFFFFFFFFF8
	x1 = x0
	x0 = Mem0[x19 + 64:word64]
	Mem0[x20 + 56:word64] = x1
	branch x0 == 0x0000000000000000 l000000000046BFF8
	// succ:  l000000000046BF1C l000000000046BFF8
l000000000046BF1C:
	strlen(x0)
	sp = sp + 0xFFFFFFFFFFFFFFF8
	x1 = x21 + 0x00000000000002F0
	w2 = 0x0000006C
	x0 = x0 + 0x0000000000000001
	call sh_xmalloc (retsize: 0;)
	x1 = Mem0[x19 + 64:word64]
	strcpy(x0, x1)
	sp = sp + 0xFFFFFFFFFFFFFFF8
	x1 = x0
	x0 = Mem0[x19 + 72:word64]
	Mem0[x20 + 64:word64] = x1
	branch x0 == 0x0000000000000000 l000000000046C008
	// succ:  l000000000046BF48 l000000000046C008
l000000000046BF48:
	strlen(x0)
	sp = sp + 0xFFFFFFFFFFFFFFF8
	x1 = x21 + 0x00000000000002F0
	w2 = 0x0000006D
	x0 = x0 + 0x0000000000000001
	call sh_xmalloc (retsize: 0;)
	x1 = Mem0[x19 + 72:word64]
	strcpy(x0, x1)
	sp = sp + 0xFFFFFFFFFFFFFFF8
	x1 = x0
	// succ:  l000000000046BF68
l000000000046BF68:
	x0 = Mem0[x19 + 80:word64]
	Mem0[x20 + 72:word64] = x1
	branch x0 == 0x0000000000000000 l000000000046BF90
	// succ:  l000000000046BF74 l000000000046BF90
l000000000046BF74:
	strlen(x0)
	sp = sp + 0xFFFFFFFFFFFFFFF8
	x1 = x21 + 0x00000000000002F0
	w2 = 0x0000006E
	x0 = x0 + 0x0000000000000001
	call sh_xmalloc (retsize: 0;)
	x1 = Mem0[x19 + 80:word64]
	strcpy(x0, x1)
	sp = sp + 0xFFFFFFFFFFFFFFF8
	// succ:  l000000000046BF90
l000000000046BF90:
	Mem0[x20 + 80:word64] = x0
	v17 = sp + 32
	x21 = Mem0[v17:word64]
	v17 = v17 + 8
	x22 = Mem0[v17:word64]
	x0 = x20
	v18 = sp + 16
	x19 = Mem0[v18:word64]
	v18 = v18 + 8
	x20 = Mem0[v18:word64]
	x29 = Mem0[sp:word64]
	sp = sp + 8
	x30 = Mem0[sp:word64]
	sp = sp + 48
	return
	// succ:  compspec_copy_exit
l000000000046BFA8:
	x1 = x0
	x0 = Mem0[x19 + 32:word64]
	Mem0[x20 + 24:word64] = x1
	branch x0 != 0x0000000000000000 l000000000046BE6C
	// succ:  l000000000046BFB8 l000000000046BE6C
l000000000046BFB8:
	x1 = x0
	x0 = Mem0[x19 + 40:word64]
	Mem0[x20 + 32:word64] = x1
	branch x0 != 0x0000000000000000 l000000000046BE98
	// succ:  l000000000046BFC8 l000000000046BE98
l000000000046BFC8:
	x1 = x0
	x0 = Mem0[x19 + 48:word64]
	Mem0[x20 + 40:word64] = x1
	branch x0 != 0x0000000000000000 l000000000046BEC4
	// succ:  l000000000046BFD8 l000000000046BEC4
l000000000046BFD8:
	x1 = x0
	x0 = Mem0[x19 + 56:word64]
	Mem0[x20 + 48:word64] = x1
	branch x0 != 0x0000000000000000 l000000000046BEF0
	// succ:  l000000000046BFE8 l000000000046BEF0
l000000000046BFE8:
	x1 = x0
	x0 = Mem0[x19 + 64:word64]
	Mem0[x20 + 56:word64] = x1
	branch x0 != 0x0000000000000000 l000000000046BF1C
	// succ:  l000000000046BFF8 l000000000046BF1C
l000000000046BFF8:
	x1 = x0
	x0 = Mem0[x19 + 72:word64]
	Mem0[x20 + 64:word64] = x1
	branch x0 != 0x0000000000000000 l000000000046BF48
	// succ:  l000000000046C008 l000000000046BF48
l000000000046C008:
	x1 = x0
	goto l000000000046BF68
	// succ:  l000000000046BF68
compspec_copy_exit:


// progcomp_create
// Return size: 0
void progcomp_create()
progcomp_create_entry:
	// succ:  l000000000046C010
l000000000046C010:
	sp = fp
	sp = sp + -32
	Mem0[sp:word64] = x29
	sp = sp + 8
	Mem0[sp:word64] = x30
	x29 = x31 + 0x0000000000000000
	Mem0[sp + 16:word64] = x19
	x19 = 0x00000000004E1000
	x19 = x19 + 0x0000000000000658
	x0 = Mem0[x19:word64]
	branch x0 == 0x0000000000000000 l000000000046C038
	// succ:  l000000000046C02C l000000000046C038
l000000000046C02C:
	x19 = Mem0[sp + 16:word64]
	x29 = Mem0[sp:word64]
	sp = sp + 8
	x30 = Mem0[sp:word64]
	sp = sp + 32
	return
	// succ:  progcomp_create_exit
l000000000046C038:
	w0 = 0x00000020
	call hash_create (retsize: 0;)
	Mem0[x19:word64] = x0
	x19 = Mem0[sp + 16:word64]
	x29 = Mem0[sp:word64]
	sp = sp + 8
	x30 = Mem0[sp:word64]
	sp = sp + 32
	return
	// succ:  progcomp_create_exit
progcomp_create_exit:


// progcomp_size
// Return size: 0
void progcomp_size()
progcomp_size_entry:
	// succ:  l000000000046C050
l000000000046C050:
	sp = fp
	x0 = 0x00000000004E1000
	x0 = x0 + 0x0000000000000658
	x0 = Mem0[x0:word64]
	branch x0 == 0x0000000000000000 l000000000046C064
	// succ:  l000000000046C060 l000000000046C064
l000000000046C060:
	w0 = Mem0[x0 + 12:word32]
	// succ:  l000000000046C064
l000000000046C064:
	return
	// succ:  progcomp_size_exit
progcomp_size_exit:


// progcomp_flush
// Return size: 0
void progcomp_flush()
progcomp_flush_entry:
	// succ:  l000000000046C068
l000000000046C068:
	sp = fp
	x0 = 0x00000000004E1000
	x0 = x0 + 0x0000000000000658
	x0 = Mem0[x0:word64]
	branch x0 == 0x0000000000000000 l000000000046C084
	// succ:  l000000000046C078 l000000000046C084
l000000000046C078:
	x1 = 0x000000000046B000
	x1 = x1 + 0xFFFFFFFFFFFFFDEC
	// succ:  l000000000046C080_thunk_hash_flush
l000000000046C080_thunk_hash_flush:
	call hash_flush (retsize: 0;)
	return
	// succ:  progcomp_flush_exit
l000000000046C084:
	return
	// succ:  progcomp_flush_exit
progcomp_flush_exit:


// progcomp_dispose
// Return size: 0
void progcomp_dispose()
progcomp_dispose_entry:
	// succ:  l000000000046C088
l000000000046C088:
	sp = fp
	sp = sp + -32
	Mem0[sp:word64] = x29
	sp = sp + 8
	Mem0[sp:word64] = x30
	x29 = x31 + 0x0000000000000000
	Mem0[sp + 16:word64] = x19
	x19 = 0x00000000004E1000
	x0 = x19 + 0x0000000000000658
	x0 = Mem0[x0:word64]
	branch x0 == 0x0000000000000000 l000000000046C0A8
	// succ:  l000000000046C0A4 l000000000046C0A8
l000000000046C0A4:
	call hash_dispose (retsize: 0;)
	// succ:  l000000000046C0A8
l000000000046C0A8:
	x19 = x19 + 0x0000000000000658
	Mem0[x19:word64] = 0x0000000000000000
	x19 = Mem0[sp + 16:word64]
	x29 = Mem0[sp:word64]
	sp = sp + 8
	x30 = Mem0[sp:word64]
	sp = sp + 32
	return
	// succ:  progcomp_dispose_exit
progcomp_dispose_exit:


// progcomp_remove
// Return size: 0
void progcomp_remove()
progcomp_remove_entry:
	// succ:  l000000000046C0BC
l000000000046C0BC:
	sp = fp
	sp = sp + -32
	Mem0[sp:word64] = x29
	sp = sp + 8
	Mem0[sp:word64] = x30
	x29 = x31 + 0x0000000000000000
	x1 = 0x00000000004E1000
	x1 = x1 + 0x0000000000000658
	x1 = Mem0[x1:word64]
	v9 = sp + 16
	Mem0[v9:word64] = x19
	v9 = v9 + 8
	Mem0[v9:word64] = x20
	branch x1 == 0x0000000000000000 l000000000046C12C
	// succ:  l000000000046C0D8 l000000000046C12C
l000000000046C0D8:
	w2 = 0x00000000
	call hash_remove (retsize: 0;)
	x19 = x0
	branch x0 == 0x0000000000000000 l000000000046C120
	// succ:  l000000000046C0E8 l000000000046C120
l000000000046C0E8:
	x0 = Mem0[x0 + 16:word64]
	branch x0 == 0x0000000000000000 l000000000046C0F4
	// succ:  l000000000046C0F0 l000000000046C0F4
l000000000046C0F0:
	call compspec_dispose (retsize: 0;)
	// succ:  l000000000046C0F4
l000000000046C0F4:
	x20 = 0x00000000004AF000
	x20 = x20 + 0x00000000000002F0
	x0 = Mem0[x19 + 8:word64]
	w2 = 0x000000A7
	x1 = x20
	call sh_xfree (retsize: 0;)
	x0 = x19
	x1 = x20
	w2 = 0x000000A8
	call sh_xfree (retsize: 0;)
	w0 = 0x00000001
	// succ:  l000000000046C120
l000000000046C120:
	v14 = sp + 16
	x19 = Mem0[v14:word64]
	v14 = v14 + 8
	x20 = Mem0[v14:word64]
	x29 = Mem0[sp:word64]
	sp = sp + 8
	x30 = Mem0[sp:word64]
	sp = sp + 32
	return
	// succ:  progcomp_remove_exit
l000000000046C12C:
	w0 = 0x00000001
	v13 = sp + 16
	x19 = Mem0[v13:word64]
	v13 = v13 + 8
	x20 = Mem0[v13:word64]
	x29 = Mem0[sp:word64]
	sp = sp + 8
	x30 = Mem0[sp:word64]
	sp = sp + 32
	return
	// succ:  progcomp_remove_exit
progcomp_remove_exit:


// progcomp_insert
// Return size: 0
void progcomp_insert()
progcomp_insert_entry:
	// succ:  l000000000046C13C
l000000000046C13C:
	sp = fp
	sp = sp + -48
	Mem0[sp:word64] = x29
	sp = sp + 8
	Mem0[sp:word64] = x30
	x29 = x31 + 0x0000000000000000
	v8 = sp + 16
	Mem0[v8:word64] = x19
	v8 = v8 + 8
	Mem0[v8:word64] = x20
	Mem0[sp + 32:word64] = x21
	x19 = x1
	x21 = x0
	branch x1 == 0x0000000000000000 l000000000046C1F4
	// succ:  l000000000046C158 l000000000046C1F4
l000000000046C158:
	x20 = 0x00000000004E1000
	x20 = x20 + 0x0000000000000658
	x1 = Mem0[x20:word64]
	branch x1 == 0x0000000000000000 l000000000046C1E8
	// succ:  l000000000046C168 l000000000046C1E8
l000000000046C168:
	w2 = Mem0[x19:word32]
	x0 = x21
	w2 = w2 + 0x00000001
	Mem0[x19:word32] = w2
	w2 = 0x00000000
	call hash_insert (retsize: 0;)
	x20 = x0
	x0 = Mem0[x0 + 16:word64]
	branch x0 == 0x0000000000000000 l000000000046C1A8
	// succ:  l000000000046C18C l000000000046C1A8
l000000000046C18C:
	call compspec_dispose (retsize: 0;)
	Mem0[x20 + 16:word64] = x19
	w0 = 0x00000001
	v14 = sp + 16
	x19 = Mem0[v14:word64]
	v14 = v14 + 8
	x20 = Mem0[v14:word64]
	x21 = Mem0[sp + 32:word64]
	x29 = Mem0[sp:word64]
	sp = sp + 8
	x30 = Mem0[sp:word64]
	sp = sp + 48
	return
	// succ:  progcomp_insert_exit
l000000000046C1A8:
	x0 = x21
	strlen(x0)
	sp = sp + 0xFFFFFFFFFFFFFFF8
	x1 = 0x00000000004AF000
	w2 = 0x000000C0
	x1 = x1 + 0x00000000000002F0
	x0 = x0 + 0x0000000000000001
	call sh_xmalloc (retsize: 0;)
	x1 = x21
	strcpy(x0, x1)
	sp = sp + 0xFFFFFFFFFFFFFFF8
	Mem0[x20 + 8:word64] = x0
	Mem0[x20 + 16:word64] = x19
	w0 = 0x00000001
	v16 = sp + 16
	x19 = Mem0[v16:word64]
	v16 = v16 + 8
	x20 = Mem0[v16:word64]
	x21 = Mem0[sp + 32:word64]
	x29 = Mem0[sp:word64]
	sp = sp + 8
	x30 = Mem0[sp:word64]
	sp = sp + 48
	return
	// succ:  progcomp_insert_exit
l000000000046C1E8:
	call progcomp_create (retsize: 0;)
	x1 = Mem0[x20:word64]
	goto l000000000046C168
	// succ:  l000000000046C168
l000000000046C1F4:
	x0 = x1
	x1 = 0x00000000004AF000
	x1 = x1 + 0x0000000000000308
	w2 = 0x00000005
	dcgettext(x0, x1, x2)
	sp = sp + 0xFFFFFFFFFFFFFFF8
	x1 = x21
	call programming_error (retsize: 0;)
	goto l000000000046C158
	// succ:  l000000000046C158
progcomp_insert_exit:


// progcomp_search
// Return size: 0
void progcomp_search()
progcomp_search_entry:
	// succ:  l000000000046C214
l000000000046C214:
	sp = fp
	sp = sp + -16
	Mem0[sp:word64] = x29
	sp = sp + 8
	Mem0[sp:word64] = x30
	x29 = x31 + 0x0000000000000000
	x1 = 0x00000000004E1000
	x1 = x1 + 0x0000000000000658
	x1 = Mem0[x1:word64]
	branch x1 == 0x0000000000000000 l000000000046C244
	// succ:  l000000000046C22C l000000000046C244
l000000000046C22C:
	w2 = 0x00000000
	call hash_search (retsize: 0;)
	branch x0 == 0x0000000000000000 l000000000046C244
	// succ:  l000000000046C238 l000000000046C244
l000000000046C238:
	x0 = Mem0[x0 + 16:word64]
	// succ:  l000000000046C23C
l000000000046C23C:
	x29 = Mem0[sp:word64]
	sp = sp + 8
	x30 = Mem0[sp:word64]
	sp = sp + 16
	return
	// succ:  progcomp_search_exit
l000000000046C244:
	x0 = 0x0000000000000000
	goto l000000000046C23C
	// succ:  l000000000046C23C
progcomp_search_exit:


// progcomp_walk
// Return size: 0
void progcomp_walk()
progcomp_walk_entry:
	// succ:  l000000000046C24C
l000000000046C24C:
	sp = fp
	x1 = 0x00000000004E1000
	x1 = x1 + 0x0000000000000658
	x2 = Mem0[x1:word64]
	x1 = x0
	branch x2 == 0x0000000000000000 l000000000046C26C
	// succ:  l000000000046C260 l000000000046C26C
l000000000046C260:
	branch x0 == 0x0000000000000000 l000000000046C26C
	// succ:  l000000000046C264 l000000000046C26C
l000000000046C264:
	w0 = Mem0[x2 + 12:word32]
	branch w0 != 0x00000000 l000000000046C270
	// succ:  l000000000046C26C l000000000046C270
l000000000046C26C:
	return
	// succ:  progcomp_walk_exit
l000000000046C270:
	x0 = x2
	// succ:  l000000000046C274_thunk_hash_walk
l000000000046C274_thunk_hash_walk:
	call hash_walk (retsize: 0;)
	return
	// succ:  progcomp_walk_exit
progcomp_walk_exit:


// fn000000000046C278
// Return size: 0
void fn000000000046C278()
fn000000000046C278_entry:
	// succ:  l000000000046C278
l000000000046C278:
	sp = fp
	sp = sp + -32
	Mem0[sp:word64] = x29
	sp = sp + 8
	Mem0[sp:word64] = x30
	x29 = x31 + 0x0000000000000000
	Mem0[sp + 16:word64] = x19
	x19 = 0x00000000004E1000
	x19 = x19 + 0x0000000000000660
	w0 = Mem0[x19:word32]
	branch w0 == 0x00000000 l000000000046C2B0
	// succ:  l000000000046C294 l000000000046C2B0
l000000000046C294:
	x19 = Mem0[x19 + 8:word64]
	x0 = 0x0000000000000000
	call sbrk (retsize: 0;)
	x0 = x0 - x19
	x19 = Mem0[sp + 16:word64]
	x29 = Mem0[sp:word64]
	sp = sp + 8
	x30 = Mem0[sp:word64]
	sp = sp + 32
	return
	// succ:  fn000000000046C278_exit
l000000000046C2B0:
	x0 = 0x0000000000000000
	call sbrk (retsize: 0;)
	w1 = 0x00000001
	Mem0[x19 + 8:word64] = x0
	Mem0[x19:word32] = w1
	x19 = x0
	x0 = 0x0000000000000000
	call sbrk (retsize: 0;)
	x0 = x0 - x19
	x19 = Mem0[sp + 16:word64]
	x29 = Mem0[sp:word64]
	sp = sp + 8
	x30 = Mem0[sp:word64]
	sp = sp + 32
	return
	// succ:  fn000000000046C278_exit
fn000000000046C278_exit:


// fn000000000046C2E0
// Return size: 0
void fn000000000046C2E0()
fn000000000046C2E0_entry:
	// succ:  l000000000046C2E0
l000000000046C2E0:
	sp = fp
	sp = sp + -48
	Mem0[sp:word64] = x29
	sp = sp + 8
	Mem0[sp:word64] = x30
	x29 = x31 + 0x0000000000000000
	v8 = sp + 16
	Mem0[v8:word64] = x19
	v8 = v8 + 8
	Mem0[v8:word64] = x20
	x19 = x1
	x20 = x0
	call fn000000000046C278 (retsize: 0;)
	x4 = 0x00000000004E1000
	x3 = x0
	x4 = x4 + 0x0000000000000660
	x1 = 0x00000000004AF000
	Mem0[x4 + 16:word64] = x3
	x1 = x1 + 0x0000000000000330
	w2 = 0x00000005
	x0 = 0x0000000000000000
	Mem0[x29 + 32:word64] = x3
	dcgettext(x0, x1, x2)
	sp = sp + 0xFFFFFFFFFFFFFFF8
	x1 = x20
	x2 = x19
	x3 = Mem0[x29 + 32:word64]
	v15 = sp + 16
	x19 = Mem0[v15:word64]
	v15 = v15 + 8
	x20 = Mem0[v15:word64]
	x29 = Mem0[sp:word64]
	sp = sp + 8
	x30 = Mem0[sp:word64]
	sp = sp + 48
	// succ:  l000000000046C334_thunk_fatal_error
l000000000046C334_thunk_fatal_error:
	call fatal_error (retsize: 0;)
	return
	// succ:  fn000000000046C2E0_exit
fn000000000046C2E0_exit:


// fn000000000046C338
// Return size: 0
void fn000000000046C338()
fn000000000046C338_entry:
	// succ:  l000000000046C338
l000000000046C338:
	sp = fp
	sp = sp + -64
	Mem0[sp:word64] = x29
	sp = sp + 8
	Mem0[sp:word64] = x30
	x29 = x31 + 0x0000000000000000
	v8 = sp + 16
	Mem0[v8:word64] = x19
	v8 = v8 + 8
	Mem0[v8:word64] = x20
	Mem0[x29 + 48:word64] = x3
	x19 = x2
	x20 = x0
	Mem0[x29 + 40:word64] = x1
	call fn000000000046C278 (retsize: 0;)
	x6 = 0x00000000004E1000
	x5 = x0
	x6 = x6 + 0x0000000000000660
	x1 = 0x00000000004AF000
	Mem0[x6 + 16:word64] = x5
	x1 = x1 + 0x0000000000000368
	w2 = 0x00000005
	x0 = 0x0000000000000000
	Mem0[x29 + 32:word64] = x5
	dcgettext(x0, x1, x2)
	sp = sp + 0xFFFFFFFFFFFFFFF8
	x1 = x20
	x2 = x19
	x3 = Mem0[x29 + 48:word64]
	x4 = Mem0[x29 + 40:word64]
	x5 = Mem0[x29 + 32:word64]
	v17 = sp + 16
	x19 = Mem0[v17:word64]
	v17 = v17 + 8
	x20 = Mem0[v17:word64]
	x29 = Mem0[sp:word64]
	sp = sp + 8
	x30 = Mem0[sp:word64]
	sp = sp + 64
	// succ:  l000000000046C39C_thunk_fatal_error
l000000000046C39C_thunk_fatal_error:
	call fatal_error (retsize: 0;)
	return
	// succ:  fn000000000046C338_exit
fn000000000046C338_exit:


// xmalloc
// Return size: 0
void xmalloc()
xmalloc_entry:
	// succ:  l000000000046C3A0
l000000000046C3A0:
	sp = fp
	sp = sp + -32
	Mem0[sp:word64] = x29
	sp = sp + 8
	Mem0[sp:word64] = x30
	x29 = x31 + 0x0000000000000000
	v8 = sp + 16
	Mem0[v8:word64] = x19
	v8 = v8 + 8
	Mem0[v8:word64] = x20
	x19 = 0x00000000004E1000
	x19 = x19 + 0x0000000000000660
	w1 = Mem0[x19:word32]
	x20 = x0
	branch w1 == 0x00000000 l000000000046C3E0
	// succ:  l000000000046C3C0 l000000000046C3E0
l000000000046C3C0:
	x0 = x20
	call malloc (retsize: 0;)
	x19 = x0
	branch x0 == 0x0000000000000000 l000000000046C404
	// succ:  l000000000046C3D0 l000000000046C404
l000000000046C3D0:
	x0 = x19
	v11 = sp + 16
	x19 = Mem0[v11:word64]
	v11 = v11 + 8
	x20 = Mem0[v11:word64]
	x29 = Mem0[sp:word64]
	sp = sp + 8
	x30 = Mem0[sp:word64]
	sp = sp + 32
	return
	// succ:  xmalloc_exit
l000000000046C3E0:
	x0 = 0x0000000000000000
	call sbrk (retsize: 0;)
	Mem0[x19 + 8:word64] = x0
	w0 = 0x00000001
	Mem0[x19:word32] = w0
	x0 = x20
	call malloc (retsize: 0;)
	x19 = x0
	branch x0 != 0x0000000000000000 l000000000046C3D0
	// succ:  l000000000046C404 l000000000046C3D0
l000000000046C404:
	x0 = 0x00000000004AF000
	x1 = x20
	x0 = x0 + 0x00000000000003A8
	call fn000000000046C2E0 (retsize: 0;)
	x0 = x19
	v14 = sp + 16
	x19 = Mem0[v14:word64]
	v14 = v14 + 8
	x20 = Mem0[v14:word64]
	x29 = Mem0[sp:word64]
	sp = sp + 8
	x30 = Mem0[sp:word64]
	sp = sp + 32
	return
	// succ:  xmalloc_exit
xmalloc_exit:


// xrealloc
// Return size: 0
void xrealloc()
xrealloc_entry:
	// succ:  l000000000046C424
l000000000046C424:
	sp = fp
	sp = sp + -48
	Mem0[sp:word64] = x29
	sp = sp + 8
	Mem0[sp:word64] = x30
	x29 = x31 + 0x0000000000000000
	v8 = sp + 16
	Mem0[v8:word64] = x19
	v8 = v8 + 8
	Mem0[v8:word64] = x20
	x20 = 0x00000000004E1000
	x20 = x20 + 0x0000000000000660
	w2 = Mem0[x20:word32]
	Mem0[sp + 32:word64] = x21
	x19 = x0
	x21 = x1
	branch w2 == 0x00000000 l000000000046C478
	// succ:  l000000000046C44C l000000000046C478
l000000000046C44C:
	branch x19 == 0x0000000000000000 l000000000046C490
	// succ:  l000000000046C450 l000000000046C490
l000000000046C450:
	x0 = x19
	x1 = x21
	call realloc (retsize: 0;)
	x19 = x0
	branch x19 == 0x0000000000000000 l000000000046C4A0
	// succ:  l000000000046C464 l000000000046C4A0
l000000000046C464:
	x0 = x19
	x21 = Mem0[sp + 32:word64]
	v13 = sp + 16
	x19 = Mem0[v13:word64]
	v13 = v13 + 8
	x20 = Mem0[v13:word64]
	x29 = Mem0[sp:word64]
	sp = sp + 8
	x30 = Mem0[sp:word64]
	sp = sp + 48
	return
	// succ:  xrealloc_exit
l000000000046C478:
	x0 = 0x0000000000000000
	call sbrk (retsize: 0;)
	Mem0[x20 + 8:word64] = x0
	w0 = 0x00000001
	Mem0[x20:word32] = w0
	branch x19 != 0x0000000000000000 l000000000046C450
	// succ:  l000000000046C490 l000000000046C450
l000000000046C490:
	x0 = x21
	call malloc (retsize: 0;)
	x19 = x0
	branch x19 != 0x0000000000000000 l000000000046C464
	// succ:  l000000000046C4A0 l000000000046C464
l000000000046C4A0:
	x0 = 0x00000000004AF000
	x1 = x21
	x0 = x0 + 0x00000000000003B0
	call fn000000000046C2E0 (retsize: 0;)
	x0 = x19
	x21 = Mem0[sp + 32:word64]
	v15 = sp + 16
	x19 = Mem0[v15:word64]
	v15 = v15 + 8
	x20 = Mem0[v15:word64]
	x29 = Mem0[sp:word64]
	sp = sp + 8
	x30 = Mem0[sp:word64]
	sp = sp + 48
	return
	// succ:  xrealloc_exit
xrealloc_exit:


// xfree
// Return size: 0
void xfree()
xfree_entry:
	// succ:  l000000000046C4C4
l000000000046C4C4:
	sp = fp
	branch x0 == 0x0000000000000000 l000000000046C4CC
	// succ:  l000000000046C4C8 l000000000046C4CC
l000000000046C4C8:
	// succ:  l000000000046C4C8_thunk_free
l000000000046C4C8_thunk_free:
	call free (retsize: 0;)
	return
	// succ:  xfree_exit
l000000000046C4CC:
	return
	// succ:  xfree_exit
xfree_exit:


// sh_xmalloc
// Return size: 0
void sh_xmalloc()
sh_xmalloc_entry:
	// succ:  l000000000046C4D0
l000000000046C4D0:
	sp = fp
	sp = sp + -48
	Mem0[sp:word64] = x29
	sp = sp + 8
	Mem0[sp:word64] = x30
	x29 = x31 + 0x0000000000000000
	v8 = sp + 16
	Mem0[v8:word64] = x19
	v8 = v8 + 8
	Mem0[v8:word64] = x20
	x19 = 0x00000000004E1000
	x19 = x19 + 0x0000000000000660
	w3 = Mem0[x19:word32]
	v12 = sp + 32
	Mem0[v12:word64] = x21
	v12 = v12 + 8
	Mem0[v12:word64] = x22
	w20 = w2
	x22 = x0
	x21 = x1
	branch w3 == 0x00000000 l000000000046C528
	// succ:  l000000000046C4FC l000000000046C528
l000000000046C4FC:
	x0 = x22
	x1 = x21
	w2 = w20
	call sh_malloc (retsize: 0;)
	x19 = x0
	branch x0 == 0x0000000000000000 l000000000046C554
	// succ:  l000000000046C514 l000000000046C554
l000000000046C514:
	x0 = x19
	v17 = sp + 32
	x21 = Mem0[v17:word64]
	v17 = v17 + 8
	x22 = Mem0[v17:word64]
	v18 = sp + 16
	x19 = Mem0[v18:word64]
	v18 = v18 + 8
	x20 = Mem0[v18:word64]
	x29 = Mem0[sp:word64]
	sp = sp + 8
	x30 = Mem0[sp:word64]
	sp = sp + 48
	return
	// succ:  sh_xmalloc_exit
l000000000046C528:
	x0 = 0x0000000000000000
	call sbrk (retsize: 0;)
	Mem0[x19 + 8:word64] = x0
	w0 = 0x00000001
	Mem0[x19:word32] = w0
	x1 = x21
	x0 = x22
	w2 = w20
	call sh_malloc (retsize: 0;)
	x19 = x0
	branch x0 != 0x0000000000000000 l000000000046C514
	// succ:  l000000000046C554 l000000000046C514
l000000000046C554:
	x0 = 0x00000000004AF000
	x1 = x22
	x2 = x21
	w3 = w20
	x0 = x0 + 0x00000000000003A8
	call fn000000000046C338 (retsize: 0;)
	x0 = x19
	v21 = sp + 32
	x21 = Mem0[v21:word64]
	v21 = v21 + 8
	x22 = Mem0[v21:word64]
	v22 = sp + 16
	x19 = Mem0[v22:word64]
	v22 = v22 + 8
	x20 = Mem0[v22:word64]
	x29 = Mem0[sp:word64]
	sp = sp + 8
	x30 = Mem0[sp:word64]
	sp = sp + 48
	return
	// succ:  sh_xmalloc_exit
sh_xmalloc_exit:


// sh_xrealloc
// Return size: 0
void sh_xrealloc()
sh_xrealloc_entry:
	// succ:  l000000000046C580
l000000000046C580:
	sp = fp
	sp = sp + -64
	Mem0[sp:word64] = x29
	sp = sp + 8
	Mem0[sp:word64] = x30
	x29 = x31 + 0x0000000000000000
	v8 = sp + 16
	Mem0[v8:word64] = x19
	v8 = v8 + 8
	Mem0[v8:word64] = x20
	x20 = 0x00000000004E1000
	x20 = x20 + 0x0000000000000660
	w4 = Mem0[x20:word32]
	v12 = sp + 32
	Mem0[v12:word64] = x21
	v12 = v12 + 8
	Mem0[v12:word64] = x22
	Mem0[sp + 48:word64] = x23
	x19 = x0
	x23 = x1
	x22 = x2
	w21 = w3
	branch w4 == 0x00000000 l000000000046C5EC
	// succ:  l000000000046C5B4 l000000000046C5EC
l000000000046C5B4:
	branch x19 == 0x0000000000000000 l000000000046C604
	// succ:  l000000000046C5B8 l000000000046C604
l000000000046C5B8:
	x0 = x19
	x1 = x23
	x2 = x22
	w3 = w21
	call sh_realloc (retsize: 0;)
	x19 = x0
	branch x19 == 0x0000000000000000 l000000000046C61C
	// succ:  l000000000046C5D4 l000000000046C61C
l000000000046C5D4:
	x0 = x19
	v19 = sp + 32
	x21 = Mem0[v19:word64]
	v19 = v19 + 8
	x22 = Mem0[v19:word64]
	v20 = sp + 16
	x19 = Mem0[v20:word64]
	v20 = v20 + 8
	x20 = Mem0[v20:word64]
	x23 = Mem0[sp + 48:word64]
	x29 = Mem0[sp:word64]
	sp = sp + 8
	x30 = Mem0[sp:word64]
	sp = sp + 64
	return
	// succ:  sh_xrealloc_exit
l000000000046C5EC:
	x0 = 0x0000000000000000
	call sbrk (retsize: 0;)
	Mem0[x20 + 8:word64] = x0
	w0 = 0x00000001
	Mem0[x20:word32] = w0
	branch x19 != 0x0000000000000000 l000000000046C5B8
	// succ:  l000000000046C604 l000000000046C5B8
l000000000046C604:
	x0 = x23
	x1 = x22
	w2 = w21
	call sh_malloc (retsize: 0;)
	x19 = x0
	branch x19 != 0x0000000000000000 l000000000046C5D4
	// succ:  l000000000046C61C l000000000046C5D4
l000000000046C61C:
	x0 = 0x00000000004AF000
	x1 = x23
	x2 = x22
	w3 = w21
	x0 = x0 + 0x00000000000003B0
	call fn000000000046C338 (retsize: 0;)
	x0 = x19
	v23 = sp + 32
	x21 = Mem0[v23:word64]
	v23 = v23 + 8
	x22 = Mem0[v23:word64]
	v24 = sp + 16
	x19 = Mem0[v24:word64]
	v24 = v24 + 8
	x20 = Mem0[v24:word64]
	x23 = Mem0[sp + 48:word64]
	x29 = Mem0[sp:word64]
	sp = sp + 8
	x30 = Mem0[sp:word64]
	sp = sp + 64
	return
	// succ:  sh_xrealloc_exit
sh_xrealloc_exit:


// sh_xfree
// Return size: 0
void sh_xfree()
sh_xfree_entry:
	// succ:  l000000000046C64C
l000000000046C64C:
	sp = fp
	branch x0 == 0x0000000000000000 l000000000046C654
	// succ:  l000000000046C650 l000000000046C654
l000000000046C650:
	// succ:  l000000000046C650_thunk_sh_free
l000000000046C650_thunk_sh_free:
	call sh_free (retsize: 0;)
	return
	// succ:  sh_xfree_exit
l000000000046C654:
	return
	// succ:  sh_xfree_exit
sh_xfree_exit:


// fn000000000046C658
// Return size: 0
void fn000000000046C658()
fn000000000046C658_entry:
	// succ:  l000000000046C658
l000000000046C658:
	sp = fp
	sp = sp + -48
	Mem0[sp:word64] = x29
	sp = sp + 8
	Mem0[sp:word64] = x30
	x29 = x31 + 0x0000000000000000
	v8 = sp + 16
	Mem0[v8:word64] = x19
	v8 = v8 + 8
	Mem0[v8:word64] = x20
	x20 = x0
	x0 = x1
	Mem0[x29 + 32:word64] = x2
	call sh_single_quote (retsize: 0;)
	x2 = Mem0[x29 + 32:word64]
	x19 = x0
	branch (w2 & 0x00000001) == 0x00000000 l000000000046C690
	// succ:  l000000000046C680 l000000000046C690
l000000000046C680:
	x1 = 0x00000000004BE000
	w0 = 0x00000001
	x1 = x1 + 0x0000000000000028
	__printf_chk(x0, x1, Mem0[sp:<unknown>])
	sp = sp + 0xFFFFFFFFFFFFFFF8
	// succ:  l000000000046C690
l000000000046C690:
	x2 = Mem0[x20:word64]
	x1 = 0x00000000004AC000
	x3 = x19
	x1 = x1 + 0x0000000000000348
	w0 = 0x00000001
	__printf_chk(x0, x1, Mem0[sp:<unknown>])
	sp = sp + 0xFFFFFFFFFFFFFFF8
	x1 = 0x00000000004BE000
	x0 = x19
	x1 = x1 + 0x0000000000000030
	w2 = 0x000000ED
	call sh_xfree (retsize: 0;)
	x0 = 0x00000000004DE000
	v15 = sp + 16
	x19 = Mem0[v15:word64]
	v15 = v15 + 8
	x20 = Mem0[v15:word64]
	x0 = Mem0[x0 + 1648:word64]
	x29 = Mem0[sp:word64]
	sp = sp + 8
	x30 = Mem0[sp:word64]
	sp = sp + 48
	fflush(x0)
	return
	// succ:  fn000000000046C658_exit
fn000000000046C658_exit:


// alias_builtin
// Return size: 0
void alias_builtin()
alias_builtin_entry:
	// succ:  l000000000046C6D0
l000000000046C6D0:
	sp = fp
	sp = sp + -64
	Mem0[sp:word64] = x29
	sp = sp + 8
	Mem0[sp:word64] = x30
	x29 = x31 + 0x0000000000000000
	x1 = 0x00000000004DE000
	w1 = Mem0[x1 + 1716:word32]
	v10 = sp + 16
	Mem0[v10:word64] = x19
	v10 = v10 + 8
	Mem0[v10:word64] = x20
	NZCV = cond(w1 - w31)
	x20 = 0x00000000004AD000
	v15 = sp + 32
	Mem0[v15:word64] = x21
	v15 = v15 + 8
	Mem0[v15:word64] = x22
	v18 = sp + 48
	Mem0[v18:word64] = x23
	v18 = v18 + 8
	Mem0[v18:word64] = x24
	x22 = x0
	w21 = (word32) Test(EQ,Z)
	w19 = 0x00000000
	call reset_internal_getopt (retsize: 0;)
	x20 = x20 + 0xFFFFFFFFFFFFFDE8
	goto l000000000046C71C
	// succ:  l000000000046C71C
l000000000046C70C:
	w31 = w0 - 0x00000070
	NZCV = cond(w31)
	w19 = 0x00000001
	branch Test(NE,Z) l000000000046C83C
	// succ:  l000000000046C718 l000000000046C83C
l000000000046C718:
	w21 = w19
	// succ:  l000000000046C71C
l000000000046C71C:
	x0 = x22
	x1 = x20
	call internal_getopt (retsize: 0;)
	w31 = w0 + 0x00000001
	NZCV = cond(w31)
	branch Test(NE,Z) l000000000046C70C
	// succ:  l000000000046C730 l000000000046C70C
l000000000046C730:
	x0 = 0x00000000004E3000
	x20 = Mem0[x0 + 3856:word64]
	x31 = x20 - x31
	NZCV = cond(x31)
	w22 = (word32) Test(EQ,Z)
	branch w19 == 0x00000000 l000000000046C824
	// succ:  l000000000046C744 l000000000046C824
l000000000046C744:
	x0 = 0x00000000004E1000
	x0 = Mem0[x0 + 1040:word64]
	branch x0 == 0x0000000000000000 l000000000046C89C
	// succ:  l000000000046C750 l000000000046C89C
l000000000046C750:
	call all_aliases (retsize: 0;)
	x23 = x0
	branch x0 == 0x0000000000000000 l000000000046C89C
	// succ:  l000000000046C75C l000000000046C89C
l000000000046C75C:
	x19 = x0
	x0 = Mem0[x19:word64]
	x19 = x19 + 8
	branch x0 == 0x0000000000000000 l000000000046C77C
	// succ:  l000000000046C768 l000000000046C77C
l000000000046C768:
	x1 = Mem0[x0 + 8:word64]
	w2 = w21
	call fn000000000046C658 (retsize: 0;)
	x0 = Mem0[x19:word64]
	x19 = x19 + 8
	branch x0 != 0x0000000000000000 l000000000046C768
	// succ:  l000000000046C77C l000000000046C768
l000000000046C77C:
	x1 = 0x00000000004BE000
	x0 = x23
	x1 = x1 + 0x0000000000000030
	w2 = 0x0000006F
	call sh_xfree (retsize: 0;)
	branch w22 != 0x00000000 l000000000046C8A4
	// succ:  l000000000046C794 l000000000046C8A4
l000000000046C794:
	x0 = 0x00000000004BE000
	w22 = 0x00000000
	x23 = x0 + 0x0000000000000068
	// succ:  l000000000046C7A0
l000000000046C7A0:
	x0 = Mem0[x20 + 8:word64]
	x19 = Mem0[x0:word64]
	v26 = Mem0[x19:byte]
	w0 = (word32) v26
	branch w0 == 0x00000000 l000000000046C7E8
	// succ:  l000000000046C7B0 l000000000046C7E8
l000000000046C7B0:
	w31 = w0 - 0x0000003D
	NZCV = cond(w31)
	branch Test(EQ,Z) l000000000046C7E8
	// succ:  l000000000046C7B8 l000000000046C7E8
l000000000046C7B8:
	x3 = x19 + 0x0000000000000001
	x5 = 0x0000000000000001
	goto l000000000046C7CC
	// succ:  l000000000046C7CC
l000000000046C7C4:
	branch w4 == 0x00000000 l000000000046C7E0
	// succ:  l000000000046C7C8 l000000000046C7E0
l000000000046C7C8:
	x5 = x24
	// succ:  l000000000046C7CC
l000000000046C7CC:
	x6 = x3
	v31 = Mem0[x3:byte]
	w4 = (word32) v31
	x3 = x3 + 1
	x24 = x5 + 0x0000000000000001
	w31 = w4 - 0x0000003D
	NZCV = cond(w31)
	branch Test(NE,Z) l000000000046C7C4
	// succ:  l000000000046C7E0 l000000000046C7C4
l000000000046C7E0:
	w31 = w4 - 0x0000003D
	NZCV = cond(w31)
	branch Test(EQ,Z) l000000000046C858
	// succ:  l000000000046C7E8 l000000000046C858
l000000000046C7E8:
	x0 = x19
	call find_alias (retsize: 0;)
	branch x0 == 0x0000000000000000 l000000000046C82C
	// succ:  l000000000046C7F4 l000000000046C82C
l000000000046C7F4:
	x1 = Mem0[x0 + 8:word64]
	w2 = w21
	call fn000000000046C658 (retsize: 0;)
	// succ:  l000000000046C800
l000000000046C800:
	x20 = Mem0[x20:word64]
	branch x20 != 0x0000000000000000 l000000000046C7A0
	// succ:  l000000000046C808 l000000000046C7A0
l000000000046C808:
	NZCV = cond(w22 - w31)
	w0 = (word32) Test(NE,Z)
	// succ:  l000000000046C810
l000000000046C810:
	v32 = sp + 16
	x19 = Mem0[v32:word64]
	v32 = v32 + 8
	x20 = Mem0[v32:word64]
	v33 = sp + 32
	x21 = Mem0[v33:word64]
	v33 = v33 + 8
	x22 = Mem0[v33:word64]
	v34 = sp + 48
	x23 = Mem0[v34:word64]
	v34 = v34 + 8
	x24 = Mem0[v34:word64]
	x29 = Mem0[sp:word64]
	sp = sp + 8
	x30 = Mem0[sp:word64]
	sp = sp + 64
	return
	// succ:  alias_builtin_exit
l000000000046C824:
	branch w22 != 0x00000000 l000000000046C744
	// succ:  l000000000046C828 l000000000046C744
l000000000046C828:
	goto l000000000046C794
	// succ:  l000000000046C794
l000000000046C82C:
	x0 = x19
	call sh_notfound (retsize: 0;)
	w22 = w22 + 0x00000001
	goto l000000000046C800
	// succ:  l000000000046C800
l000000000046C83C:
	call builtin_usage (retsize: 0;)
	w0 = 0x00000102
	v35 = sp + 16
	x19 = Mem0[v35:word64]
	v35 = v35 + 8
	x20 = Mem0[v35:word64]
	v36 = sp + 32
	x21 = Mem0[v36:word64]
	v36 = v36 + 8
	x22 = Mem0[v36:word64]
	v37 = sp + 48
	x23 = Mem0[v37:word64]
	v37 = v37 + 8
	x24 = Mem0[v37:word64]
	x29 = Mem0[sp:word64]
	sp = sp + 8
	x30 = Mem0[sp:word64]
	sp = sp + 64
	return
	// succ:  alias_builtin_exit
l000000000046C858:
	Mem0[x6:byte] = 0x00
	x0 = x19
	w1 = 0x00000000
	call legal_alias_name (retsize: 0;)
	branch w0 != 0x00000000 l000000000046C88C
	// succ:  l000000000046C86C l000000000046C88C
l000000000046C86C:
	w2 = 0x00000005
	x1 = x23
	x0 = 0x0000000000000000
	dcgettext(x0, x1, x2)
	sp = sp + 0xFFFFFFFFFFFFFFF8
	x1 = x19
	call builtin_error (retsize: 0;)
	w22 = w22 + 0x00000001
	goto l000000000046C800
	// succ:  l000000000046C800
l000000000046C88C:
	x0 = x19
	x1 = x19 + x24
	call add_alias (retsize: 0;)
	goto l000000000046C800
	// succ:  l000000000046C800
l000000000046C89C:
	w0 = 0x00000000
	goto l000000000046C810
	// succ:  l000000000046C810
l000000000046C8A4:
	v39 = sp + 16
	x19 = Mem0[v39:word64]
	v39 = v39 + 8
	x20 = Mem0[v39:word64]
	v40 = sp + 32
	x21 = Mem0[v40:word64]
	v40 = v40 + 8
	x22 = Mem0[v40:word64]
	v41 = sp + 48
	x23 = Mem0[v41:word64]
	v41 = v41 + 8
	x24 = Mem0[v41:word64]
	x29 = Mem0[sp:word64]
	sp = sp + 8
	x30 = Mem0[sp:word64]
	sp = sp + 64
	w0 = 0x00000000
	// succ:  l000000000046C8B8_thunk_sh_chkwrite
l000000000046C8B8_thunk_sh_chkwrite:
	call sh_chkwrite (retsize: 0;)
	return
	// succ:  alias_builtin_exit
alias_builtin_exit:


// unalias_builtin
// Return size: 0
void unalias_builtin()
unalias_builtin_entry:
	// succ:  l000000000046C8BC
l000000000046C8BC:
	sp = fp
	sp = sp + -48
	Mem0[sp:word64] = x29
	sp = sp + 8
	Mem0[sp:word64] = x30
	x29 = x31 + 0x0000000000000000
	v8 = sp + 16
	Mem0[v8:word64] = x19
	v8 = v8 + 8
	Mem0[v8:word64] = x20
	x19 = 0x00000000004BE000
	Mem0[sp + 32:word64] = x21
	w20 = 0x00000000
	x21 = x0
	x19 = x19 + 0x0000000000000088
	call reset_internal_getopt (retsize: 0;)
	goto l000000000046C8F0
	// succ:  l000000000046C8F0
l000000000046C8E4:
	w31 = w0 - 0x00000061
	NZCV = cond(w31)
	branch Test(NE,Z) l000000000046C968
	// succ:  l000000000046C8EC l000000000046C968
l000000000046C8EC:
	w20 = 0x00000001
	// succ:  l000000000046C8F0
l000000000046C8F0:
	x0 = x21
	x1 = x19
	call internal_getopt (retsize: 0;)
	w31 = w0 + 0x00000001
	NZCV = cond(w31)
	branch Test(NE,Z) l000000000046C8E4
	// succ:  l000000000046C904 l000000000046C8E4
l000000000046C904:
	x0 = 0x00000000004E3000
	x19 = Mem0[x0 + 3856:word64]
	branch w20 != 0x00000000 l000000000046C980
	// succ:  l000000000046C910 l000000000046C980
l000000000046C910:
	branch x19 != 0x0000000000000000 l000000000046C928
	// succ:  l000000000046C914 l000000000046C928
l000000000046C914:
	goto l000000000046C968
	// succ:  l000000000046C968
l000000000046C918:
	x0 = Mem0[x0:word64]
	call remove_alias (retsize: 0;)
	x19 = Mem0[x19:word64]
	branch x19 == 0x0000000000000000 l000000000046C950
	// succ:  l000000000046C928 l000000000046C950
l000000000046C928:
	x0 = Mem0[x19 + 8:word64]
	x0 = Mem0[x0:word64]
	call find_alias (retsize: 0;)
	branch x0 != 0x0000000000000000 l000000000046C918
	// succ:  l000000000046C938 l000000000046C918
l000000000046C938:
	x0 = Mem0[x19 + 8:word64]
	w20 = w20 + 0x00000001
	x0 = Mem0[x0:word64]
	call sh_notfound (retsize: 0;)
	x19 = Mem0[x19:word64]
	branch x19 != 0x0000000000000000 l000000000046C928
	// succ:  l000000000046C950 l000000000046C928
l000000000046C950:
	NZCV = cond(w20 - w31)
	w0 = (word32) Test(NE,Z)
	v18 = sp + 16
	x19 = Mem0[v18:word64]
	v18 = v18 + 8
	x20 = Mem0[v18:word64]
	x21 = Mem0[sp + 32:word64]
	x29 = Mem0[sp:word64]
	sp = sp + 8
	x30 = Mem0[sp:word64]
	sp = sp + 48
	return
	// succ:  unalias_builtin_exit
l000000000046C968:
	call builtin_usage (retsize: 0;)
	w0 = 0x00000102
	v17 = sp + 16
	x19 = Mem0[v17:word64]
	v17 = v17 + 8
	x20 = Mem0[v17:word64]
	x21 = Mem0[sp + 32:word64]
	x29 = Mem0[sp:word64]
	sp = sp + 8
	x30 = Mem0[sp:word64]
	sp = sp + 48
	return
	// succ:  unalias_builtin_exit
l000000000046C980:
	call delete_all_aliases (retsize: 0;)
	w0 = 0x00000000
	v19 = sp + 16
	x19 = Mem0[v19:word64]
	v19 = v19 + 8
	x20 = Mem0[v19:word64]
	x21 = Mem0[sp + 32:word64]
	x29 = Mem0[sp:word64]
	sp = sp + 8
	x30 = Mem0[sp:word64]
	sp = sp + 48
	return
	// succ:  unalias_builtin_exit
unalias_builtin_exit:


// bind_builtin
// Return size: 0
void bind_builtin()
bind_builtin_entry:
	// succ:  l000000000046C998
l000000000046C998:
	sp = fp
	sp = sp + -128
	Mem0[sp:word64] = x29
	sp = sp + 8
	Mem0[sp:word64] = x30
	x29 = x31 + 0x0000000000000000
	x1 = 0x00000000004DE000
	w1 = Mem0[x1 + 1720:word32]
	v10 = sp + 32
	Mem0[v10:word64] = x21
	v10 = v10 + 8
	Mem0[v10:word64] = x22
	v13 = sp + 16
	Mem0[v13:word64] = x19
	v13 = v13 + 8
	Mem0[v13:word64] = x20
	v16 = sp + 48
	Mem0[v16:word64] = x23
	v16 = v16 + 8
	Mem0[v16:word64] = x24
	v19 = sp + 64
	Mem0[v19:word64] = x25
	v19 = v19 + 8
	Mem0[v19:word64] = x26
	v22 = sp + 80
	Mem0[v22:word64] = x27
	v22 = v22 + 8
	Mem0[v22:word64] = x28
	x21 = x0
	branch w1 != 0x00000000 l000000000046CCB8
	// succ:  l000000000046C9C4 l000000000046CCB8
l000000000046C9C4:
	x0 = 0x00000000004E1000
	w0 = Mem0[x0 + 1464:word32]
	branch w0 == 0x00000000 l000000000046CCB0
	// succ:  l000000000046C9D0 l000000000046CCB0
l000000000046C9D0:
	x25 = 0x00000000004BE000
	x0 = x25 + 0x0000000000000108
	call begin_unwind_frame (retsize: 0;)
	x19 = 0x00000000004E1000
	x0 = x19 + 0xFFFFFFFFFFFFFC80
	w1 = 0x00000008
	call unwind_protect_mem (retsize: 0;)
	x0 = 0x00000000004DE000
	x1 = Mem0[x0 + 1648:word64]
	x22 = 0x0000000000000000
	x20 = 0x00000000004BE000
	x23 = 0x00000000004BE000
	Mem0[x19 + 3200:word64] = x1
	x26 = x22
	call reset_internal_getopt (retsize: 0;)
	x28 = x22
	Mem0[x29 + 96:word64] = x22
	x27 = x22
	w19 = w22
	x20 = x20 + 0x0000000000000118
	x23 = x23 + 0x000000000000008C
	x24 = 0x00000000004E3000
	x0 = x21
	x1 = x20
	call internal_getopt (retsize: 0;)
	w31 = w0 + 0x00000001
	NZCV = cond(w31)
	branch Test(EQ,Z) l000000000046CAA8
	// succ:  l000000000046CA3C l000000000046CAA8
l000000000046CA3C:
	w3 = w0 - 0x00000050
	w31 = w3 - 0x00000028
	NZCV = cond(w31)
	branch Test(ULE,ZC) l000000000046CA78
	// succ:  l000000000046CA48 l000000000046CA78
l000000000046CA48:
	call builtin_usage (retsize: 0;)
	w21 = 0x00000102
	// succ:  l000000000046CA50
l000000000046CA50:
	x0 = x25 + 0x0000000000000108
	call run_unwind_frame (retsize: 0;)
	w0 = w21
	v33 = sp + 16
	x19 = Mem0[v33:word64]
	v33 = v33 + 8
	x20 = Mem0[v33:word64]
	v34 = sp + 32
	x21 = Mem0[v34:word64]
	v34 = v34 + 8
	x22 = Mem0[v34:word64]
	v35 = sp + 48
	x23 = Mem0[v35:word64]
	v35 = v35 + 8
	x24 = Mem0[v35:word64]
	v36 = sp + 64
	x25 = Mem0[v36:word64]
	v36 = v36 + 8
	x26 = Mem0[v36:word64]
	v37 = sp + 80
	x27 = Mem0[v37:word64]
	v37 = v37 + 8
	x28 = Mem0[v37:word64]
	x29 = Mem0[sp:word64]
	sp = sp + 8
	x30 = Mem0[sp:word64]
	sp = sp + 128
	// succ:  l000000000046CA74_thunk_sh_chkwrite
l000000000046CA74_thunk_sh_chkwrite:
	call sh_chkwrite (retsize: 0;)
	return
	// succ:  bind_builtin_exit
l000000000046CA78:
	v40 = Mem0[x23 + (uint64) ((uint32) w3):word16]
	w0 = (word32) v40
	x1 = 0x000000000046CA88
	x0 = x1 + (int64) ((int16) w0)
	call x0 (retsize: 0;)
	return
	// succ:  bind_builtin_exit
l000000000046CAA8:
	x0 = 0x00000000004E3000
	x20 = Mem0[x0 + 3856:word64]
	branch (w19 & 0x00000020) == 0x00000000 l000000000046CCD4
	// succ:  l000000000046CAB4 l000000000046CCD4
l000000000046CAB4:
	branch x28 == 0x0000000000000000 l000000000046CAD8
	// succ:  l000000000046CAB8 l000000000046CAD8
l000000000046CAB8:
	x0 = x28
	call rl_get_keymap_by_name (retsize: 0;)
	x21 = x0
	branch x0 == 0x0000000000000000 l000000000046CE20
	// succ:  l000000000046CAC8 l000000000046CE20
l000000000046CAC8:
	call rl_get_keymap (retsize: 0;)
	x28 = x0
	x0 = x21
	call rl_set_keymap (retsize: 0;)
	// succ:  l000000000046CAD8
l000000000046CAD8:
	branch (w19 & 0x00000001) == 0x00000000 l000000000046CD3C
	// succ:  l000000000046CADC l000000000046CD3C
l000000000046CADC:
	branch (w19 & 0x00000002) == 0x00000000 l000000000046CCF0
	// succ:  l000000000046CAE0 l000000000046CCF0
l000000000046CAE0:
	branch (w19 & 0x00000080) == 0x00000000 l000000000046CCE0
	// succ:  l000000000046CAE4 l000000000046CCE0
l000000000046CAE4:
	branch (w19 & 0x00000200) == 0x00000000 l000000000046CD2C
	// succ:  l000000000046CAE8 l000000000046CD2C
l000000000046CAE8:
	branch (w19 & 0x00000400) == 0x00000000 l000000000046CD1C
	// succ:  l000000000046CAEC l000000000046CD1C
l000000000046CAEC:
	branch (w19 & 0x00000008) == 0x00000000 l000000000046CD0C
	// succ:  l000000000046CAF0 l000000000046CD0C
l000000000046CAF0:
	branch (w19 & 0x00000100) == 0x00000000 l000000000046CD00
	// succ:  l000000000046CAF4 l000000000046CD00
l000000000046CAF4:
	branch (w19 & 0x00000004) == 0x00000000 l000000000046CB08
	// succ:  l000000000046CAF8 l000000000046CB08
l000000000046CAF8:
	branch x27 == 0x0000000000000000 l000000000046CB08
	// succ:  l000000000046CAFC l000000000046CB08
l000000000046CAFC:
	x0 = x27
	call rl_read_init_file (retsize: 0;)
	branch w0 != 0x00000000 l000000000046CD7C
	// succ:  l000000000046CB08 l000000000046CD7C
l000000000046CB08:
	w21 = 0x00000000
	branch (w19 & 0x00000010) == 0x00000000 l000000000046CBC4
	// succ:  l000000000046CB10 l000000000046CBC4
l000000000046CB10:
	branch x26 == 0x0000000000000000 l000000000046CBC4
	// succ:  l000000000046CB14 l000000000046CBC4
l000000000046CB14:
	x0 = x26
	call rl_named_function (retsize: 0;)
	branch x0 == 0x0000000000000000 l000000000046CDD8
	// succ:  l000000000046CB20 l000000000046CDD8
l000000000046CB20:
	call rl_invoking_keyseqs (retsize: 0;)
	x23 = x0
	branch x0 == 0x0000000000000000 l000000000046CDF8
	// succ:  l000000000046CB2C l000000000046CDF8
l000000000046CB2C:
	x1 = 0x00000000004BE000
	x1 = x1 + 0x00000000000001A8
	w2 = 0x00000005
	x0 = 0x0000000000000000
	dcgettext(x0, x1, x2)
	sp = sp + 0xFFFFFFFFFFFFFFF8
	x1 = x0
	x2 = x26
	w0 = 0x00000001
	__printf_chk(x0, x1, Mem0[sp:<unknown>])
	sp = sp + 0xFFFFFFFFFFFFFFF8
	x0 = x23 + 0x0000000000000030
	Mem0[x29 + 112:word64] = x0
	x26 = 0x00000000004BE000
	x0 = 0x00000000004AA000
	x24 = 0x00000000004BE000
	x21 = x23 + 0x0000000000000008
	x27 = x0 + 0x0000000000000148
	x26 = x26 + 0x00000000000000E0
	x24 = x24 + 0x00000000000001C0
	x2 = Mem0[x21 + -8:word64]
	branch x2 == 0x0000000000000000 l000000000046CBB8
	// succ:  l000000000046CB7C l000000000046CBB8
l000000000046CB7C:
	x3 = Mem0[x21:word64]
	x1 = x24
	x31 = x3 - x31
	NZCV = cond(x31)
l000000000046CBB8:
	x0 = x23
	call strvec_dispose (retsize: 0;)
	w21 = 0x00000000
	// succ:  l000000000046CBC4
l000000000046CBC4:
	branch (w19 & 0x00000800) == 0x00000000 l000000000046CBF4
	// succ:  l000000000046CBC8 l000000000046CBF4
l000000000046CBC8:
	x1 = Mem0[x29 + 96:word64]
	branch x1 == 0x0000000000000000 l000000000046CBF4
	// succ:  l000000000046CBD0 l000000000046CBF4
l000000000046CBD0:
	x0 = x1
	call rl_named_function (retsize: 0;)
	x21 = x0
	branch x0 == 0x0000000000000000 l000000000046CDB8
	// succ:  l000000000046CBE0 l000000000046CDB8
l000000000046CBE0:
	call rl_get_keymap (retsize: 0;)
	x1 = x0
	x0 = x21
	call rl_unbind_function_in_map (retsize: 0;)
	w21 = 0x00000000
	// succ:  l000000000046CBF4
l000000000046CBF4:
	branch (w19 & 0x00000040) == 0x00000000 l000000000046CC0C
	// succ:  l000000000046CBF8 l000000000046CC0C
l000000000046CBF8:
	branch x22 == 0x0000000000000000 l000000000046CC0C
	// succ:  l000000000046CBFC l000000000046CC0C
l000000000046CBFC:
	x0 = x22
	x1 = 0x0000000000000000
	call rl_bind_keyseq (retsize: 0;)
	branch w0 != 0x00000000 l000000000046CD58
	// succ:  l000000000046CC0C l000000000046CD58
l000000000046CC0C:
	branch (w19 & 0x00001000) == 0x00000000 l000000000046CD48
	// succ:  l000000000046CC10 l000000000046CD48
l000000000046CC10:
	branch x20 == 0x0000000000000000 l000000000046CC28
	// succ:  l000000000046CC14 l000000000046CC28
l000000000046CC14:
	x1 = Mem0[x20 + 8:word64]
	x0 = Mem0[x1:word64]
	call rl_parse_and_bind (retsize: 0;)
	x20 = Mem0[x20:word64]
	branch x20 != 0x0000000000000000 l000000000046CC14
	// succ:  l000000000046CC28 l000000000046CC14
l000000000046CC28:
	branch x28 == 0x0000000000000000 l000000000046CA50
	// succ:  l000000000046CC2C l000000000046CA50
l000000000046CC2C:
	x0 = x28
	call rl_set_keymap (retsize: 0;)
	goto l000000000046CA50
	// succ:  l000000000046CA50
l000000000046CCB0:
	call initialize_readline (retsize: 0;)
	goto l000000000046C9D0
	// succ:  l000000000046C9D0
l000000000046CCB8:
	x1 = 0x00000000004BE000
	x1 = x1 + 0x00000000000000E8
	w2 = 0x00000005
	x0 = 0x0000000000000000
	dcgettext(x0, x1, x2)
	sp = sp + 0xFFFFFFFFFFFFFFF8
	call builtin_warning (retsize: 0;)
	goto l000000000046C9C4
	// succ:  l000000000046C9C4
l000000000046CCD4:
	x28 = 0x0000000000000000
	branch (w19 & 0x00000001) == 0x00000000 l000000000046CADC
	// succ:  l000000000046CCDC l000000000046CADC
l000000000046CCDC:
	goto l000000000046CD3C
	// succ:  l000000000046CD3C
l000000000046CCE0:
	w0 = 0x00000000
	call rl_function_dumper (retsize: 0;)
	branch (w19 & 0x00000200) == 0x00000000 l000000000046CAE8
	// succ:  l000000000046CCEC l000000000046CAE8
l000000000046CCEC:
	goto l000000000046CD2C
	// succ:  l000000000046CD2C
l000000000046CCF0:
	w0 = 0x00000001
	call rl_function_dumper (retsize: 0;)
	branch (w19 & 0x00000080) == 0x00000000 l000000000046CAE4
	// succ:  l000000000046CCFC l000000000046CAE4
l000000000046CCFC:
	goto l000000000046CCE0
	// succ:  l000000000046CCE0
l000000000046CD00:
	w0 = 0x00000000
	call rl_variable_dumper (retsize: 0;)
	goto l000000000046CAF4
	// succ:  l000000000046CAF4
l000000000046CD0C:
	w0 = 0x00000001
	call rl_variable_dumper (retsize: 0;)
	branch (w19 & 0x00000100) == 0x00000000 l000000000046CAF4
	// succ:  l000000000046CD18 l000000000046CAF4
l000000000046CD18:
	goto l000000000046CD00
	// succ:  l000000000046CD00
l000000000046CD1C:
	w0 = 0x00000000
	call rl_macro_dumper (retsize: 0;)
	branch (w19 & 0x00000008) == 0x00000000 l000000000046CAF0
	// succ:  l000000000046CD28 l000000000046CAF0
l000000000046CD28:
	goto l000000000046CD0C
	// succ:  l000000000046CD0C
l000000000046CD2C:
	w0 = 0x00000001
	call rl_macro_dumper (retsize: 0;)
	branch (w19 & 0x00000400) == 0x00000000 l000000000046CAEC
	// succ:  l000000000046CD38 l000000000046CAEC
l000000000046CD38:
	goto l000000000046CD1C
	// succ:  l000000000046CD1C
l000000000046CD3C:
	call rl_list_funmap_names (retsize: 0;)
	branch (w19 & 0x00000002) == 0x00000000 l000000000046CAE0
	// succ:  l000000000046CD44 l000000000046CAE0
l000000000046CD44:
	goto l000000000046CCF0
	// succ:  l000000000046CCF0
l000000000046CD48:
	x0 = Mem0[x29 + 104:word64]
	call bind_keyseq_to_unix_command (retsize: 0;)
	w21 = w0
	goto l000000000046CC10
	// succ:  l000000000046CC10
l000000000046CD58:
	x1 = 0x00000000004BE000
	w2 = 0x00000005
	x1 = x1 + 0x00000000000001C8
	x0 = 0x0000000000000000
	dcgettext(x0, x1, x2)
	sp = sp + 0xFFFFFFFFFFFFFFF8
	x1 = x22
	call builtin_error (retsize: 0;)
	w21 = 0x00000001
	goto l000000000046CC28
	// succ:  l000000000046CC28
l000000000046CD7C:
	x1 = 0x00000000004BE000
	x1 = x1 + 0x0000000000000150
	w2 = 0x00000005
	x0 = 0x0000000000000000
	dcgettext(x0, x1, x2)
	sp = sp + 0xFFFFFFFFFFFFFFF8
	x19 = x0
	__errno_location()
	sp = sp + 0xFFFFFFFFFFFFFFF8
	w0 = Mem0[x0:word32]
	w21 = 0x00000001
	strerror(x0)
	sp = sp + 0xFFFFFFFFFFFFFFF8
	x2 = x0
	x1 = x27
	x0 = x19
	call builtin_error (retsize: 0;)
	goto l000000000046CC28
	// succ:  l000000000046CC28
l000000000046CDB8:
	x1 = 0x00000000004BE000
	w2 = 0x00000005
	x1 = x1 + 0x0000000000000168
	dcgettext(x0, x1, x2)
	sp = sp + 0xFFFFFFFFFFFFFFF8
	x1 = Mem0[x29 + 96:word64]
	w21 = 0x00000001
	call builtin_error (retsize: 0;)
	goto l000000000046CBF4
	// succ:  l000000000046CBF4
l000000000046CDD8:
	x1 = 0x00000000004BE000
	w2 = 0x00000005
	x1 = x1 + 0x0000000000000168
	dcgettext(x0, x1, x2)
	sp = sp + 0xFFFFFFFFFFFFFFF8
	x1 = x26
	call builtin_error (retsize: 0;)
	w21 = 0x00000001
	goto l000000000046CBC4
	// succ:  l000000000046CBC4
l000000000046CDF8:
	x1 = 0x00000000004BE000
	x1 = x1 + 0x0000000000000188
	w2 = 0x00000005
	dcgettext(x0, x1, x2)
	sp = sp + 0xFFFFFFFFFFFFFFF8
	x1 = x0
	x2 = x26
	w0 = 0x00000001
	__printf_chk(x0, x1, Mem0[sp:<unknown>])
	sp = sp + 0xFFFFFFFFFFFFFFF8
	w21 = 0x00000001
	goto l000000000046CBC4
	// succ:  l000000000046CBC4
l000000000046CE20:
	x1 = 0x00000000004BE000
	w2 = 0x00000005
	x1 = x1 + 0x0000000000000130
	dcgettext(x0, x1, x2)
	sp = sp + 0xFFFFFFFFFFFFFFF8
	x1 = x28
	call builtin_error (retsize: 0;)
	w21 = 0x00000001
	goto l000000000046CA50
	// succ:  l000000000046CA50
bind_builtin_exit:


// fn000000000046CE40
// Return size: 0
void fn000000000046CE40()
fn000000000046CE40_entry:
	// succ:  l000000000046CE40
l000000000046CE40:
	sp = fp
	sp = sp + -32
	Mem0[sp:word64] = x29
	sp = sp + 8
	Mem0[sp:word64] = x30
	x29 = x31 + 0x0000000000000000
	Mem0[sp + 16:word64] = x19
	x19 = 0x00000000004E1000
	x19 = x19 + 0x0000000000000678
	w0 = Mem0[x19:word32]
	branch w0 != 0x00000000 l000000000046CE68
	// succ:  l000000000046CE5C l000000000046CE68
l000000000046CE5C:
	x1 = 0x00000000004DE000
	w1 = Mem0[x1 + 1716:word32]
	branch w1 == 0x00000000 l000000000046CE74
	// succ:  l000000000046CE68 l000000000046CE74
l000000000046CE68:
	x19 = Mem0[sp + 16:word64]
	x29 = Mem0[sp:word64]
	sp = sp + 8
	x30 = Mem0[sp:word64]
	sp = sp + 32
	return
	// succ:  fn000000000046CE40_exit
l000000000046CE74:
	x1 = 0x00000000004BE000
	x1 = x1 + 0x00000000000001E0
	w2 = 0x00000005
	x0 = 0x0000000000000000
	dcgettext(x0, x1, x2)
	sp = sp + 0xFFFFFFFFFFFFFFF8
	call builtin_error (retsize: 0;)
	w0 = Mem0[x19:word32]
	x19 = Mem0[sp + 16:word64]
	x29 = Mem0[sp:word64]
	sp = sp + 8
	x30 = Mem0[sp:word64]
	sp = sp + 32
	return
	// succ:  fn000000000046CE40_exit
fn000000000046CE40_exit:


// break_builtin
// Return size: 0
void break_builtin()
break_builtin_entry:
	// succ:  l000000000046CE9C
l000000000046CE9C:
	sp = fp
	sp = sp + -48
	Mem0[sp:word64] = x29
	sp = sp + 8
	Mem0[sp:word64] = x30
	x29 = x31 + 0x0000000000000000
	Mem0[sp + 16:word64] = x19
	x19 = x0
	call fn000000000046CE40 (retsize: 0;)
	branch w0 != 0x00000000 l000000000046CEC0
	// succ:  l000000000046CEB4 l000000000046CEC0
l000000000046CEB4:
	x19 = Mem0[sp + 16:word64]
	x29 = Mem0[sp:word64]
	sp = sp + 8
	x30 = Mem0[sp:word64]
	sp = sp + 48
	return
	// succ:  break_builtin_exit
l000000000046CEC0:
	w1 = 0x00000001
	x0 = x19
	x2 = x29 + 0x0000000000000020
	call get_numeric_arg (retsize: 0;)
	x1 = Mem0[x29 + 32:word64]
	x31 = x1 - x31
	NZCV = cond(x31)
	branch Test(LE,ZCV) l000000000046CF04
	// succ:  l000000000046CEDC l000000000046CF04
l000000000046CEDC:
	x2 = 0x00000000004E1000
	x2 = x2 + 0x0000000000000678
	v15 = Mem0[x2:int32]
	x3 = (word64) v15
	w0 = 0x00000000
	x31 = x1 - x3
	NZCV = cond(x31)
l000000000046CF04:
	x0 = Mem0[x19 + 8:word64]
	x1 = 0x00000000004BE000
	x19 = Mem0[x0:word64]
	w2 = 0x00000005
	x1 = x1 + 0x0000000000000218
	x0 = 0x0000000000000000
	dcgettext(x0, x1, x2)
	sp = sp + 0xFFFFFFFFFFFFFFF8
	x1 = x0
	x0 = x19
	call sh_erange (retsize: 0;)
	x1 = 0x00000000004E1000
	x1 = x1 + 0x0000000000000678
	w2 = Mem0[x1:word32]
	w0 = 0x00000001
	Mem0[x1 + 4:word32] = w2
	goto l000000000046CEB4
	// succ:  l000000000046CEB4
break_builtin_exit:


// continue_builtin
// Return size: 0
void continue_builtin()
continue_builtin_entry:
	// succ:  l000000000046CF44
l000000000046CF44:
	sp = fp
	sp = sp + -48
	Mem0[sp:word64] = x29
	sp = sp + 8
	Mem0[sp:word64] = x30
	x29 = x31 + 0x0000000000000000
	Mem0[sp + 16:word64] = x19
	x19 = x0
	call fn000000000046CE40 (retsize: 0;)
	branch w0 != 0x00000000 l000000000046CF68
	// succ:  l000000000046CF5C l000000000046CF68
l000000000046CF5C:
	x19 = Mem0[sp + 16:word64]
	x29 = Mem0[sp:word64]
	sp = sp + 8
	x30 = Mem0[sp:word64]
	sp = sp + 48
	return
	// succ:  continue_builtin_exit
l000000000046CF68:
	w1 = 0x00000001
	x0 = x19
	x2 = x29 + 0x0000000000000020
	call get_numeric_arg (retsize: 0;)
	x1 = Mem0[x29 + 32:word64]
	x31 = x1 - x31
	NZCV = cond(x31)
	branch Test(LE,ZCV) l000000000046CFAC
	// succ:  l000000000046CF84 l000000000046CFAC
l000000000046CF84:
	x2 = 0x00000000004E1000
	x2 = x2 + 0x0000000000000678
	v15 = Mem0[x2:int32]
	x3 = (word64) v15
	w0 = 0x00000000
	x31 = x1 - x3
	NZCV = cond(x31)
l000000000046CFAC:
	x0 = Mem0[x19 + 8:word64]
	x1 = 0x00000000004BE000
	x19 = Mem0[x0:word64]
	w2 = 0x00000005
	x1 = x1 + 0x0000000000000218
	x0 = 0x0000000000000000
	dcgettext(x0, x1, x2)
	sp = sp + 0xFFFFFFFFFFFFFFF8
	x1 = x0
	x0 = x19
	call sh_erange (retsize: 0;)
	x1 = 0x00000000004E1000
	x1 = x1 + 0x0000000000000678
	w2 = Mem0[x1:word32]
	w0 = 0x00000001
	Mem0[x1 + 4:word32] = w2
	goto l000000000046CF5C
	// succ:  l000000000046CF5C
continue_builtin_exit:


// builtin_builtin
// Return size: 0
void builtin_builtin()
builtin_builtin_entry:
	// succ:  l000000000046CFEC
l000000000046CFEC:
	sp = fp
	sp = sp + -32
	Mem0[sp:word64] = x29
	sp = sp + 8
	Mem0[sp:word64] = x30
	x29 = x31 + 0x0000000000000000
	v8 = sp + 16
	Mem0[v8:word64] = x19
	v8 = v8 + 8
	Mem0[v8:word64] = x20
	call no_options (retsize: 0;)
	branch w0 == 0x00000000 l000000000046D010
	// succ:  l000000000046D000 l000000000046D010
l000000000046D000:
	w0 = 0x00000102
	// succ:  l000000000046D004
l000000000046D004:
	v10 = sp + 16
	x19 = Mem0[v10:word64]
	v10 = v10 + 8
	x20 = Mem0[v10:word64]
	x29 = Mem0[sp:word64]
	sp = sp + 8
	x30 = Mem0[sp:word64]
	sp = sp + 32
	return
	// succ:  builtin_builtin_exit
l000000000046D010:
	x1 = 0x00000000004E3000
	x19 = Mem0[x1 + 3856:word64]
	branch x19 == 0x0000000000000000 l000000000046D004
	// succ:  l000000000046D01C l000000000046D004
l000000000046D01C:
	x0 = Mem0[x19 + 8:word64]
	x20 = Mem0[x0:word64]
	x0 = x20
	call find_shell_builtin (retsize: 0;)
	x1 = x0
	branch x0 == 0x0000000000000000 l000000000046D050
	// succ:  l000000000046D034 l000000000046D050
l000000000046D034:
	x0 = Mem0[x19:word64]
	x2 = 0x00000000004E3000
	Mem0[x2 + 1192:word64] = x20
	call x1 (retsize: 0;)
	v14 = sp + 16
	x19 = Mem0[v14:word64]
	v14 = v14 + 8
	x20 = Mem0[v14:word64]
	x29 = Mem0[sp:word64]
	sp = sp + 8
	x30 = Mem0[sp:word64]
	sp = sp + 32
	return
	// succ:  builtin_builtin_exit
l000000000046D050:
	x0 = x20
	call sh_notbuiltin (retsize: 0;)
	w0 = 0x00000001
	goto l000000000046D004
	// succ:  l000000000046D004
builtin_builtin_exit:


// caller_builtin
// Return size: 0
void caller_builtin()
caller_builtin_entry:
	// succ:  l000000000046D060
l000000000046D060:
	sp = fp
	sp = sp + -80
	Mem0[sp:word64] = x29
	sp = sp + 8
	Mem0[sp:word64] = x30
	x29 = x31 + 0x0000000000000000
	v8 = sp + 16
	Mem0[v8:word64] = x19
	v8 = v8 + 8
	Mem0[v8:word64] = x20
	x19 = x0
	x0 = 0x00000000004AA000
	x0 = x0 + 0x00000000000003C8
	v12 = sp + 32
	Mem0[v12:word64] = x21
	v12 = v12 + 8
	Mem0[v12:word64] = x22
	Mem0[sp + 48:word64] = x23
	call find_variable (retsize: 0;)
	branch x0 == 0x0000000000000000 l000000000046D150
	// succ:  l000000000046D088 l000000000046D150
l000000000046D088:
	w2 = Mem0[x0 + 40:word32]
	x22 = 0x0000000000000000
	branch (w2 & 0x00000004) == 0x00000000 l000000000046D108
	// succ:  l000000000046D094 l000000000046D108
l000000000046D094:
	x0 = 0x00000000004AA000
	x0 = x0 + 0x00000000000003D8
	call find_variable (retsize: 0;)
	branch x0 == 0x0000000000000000 l000000000046D11C
	// succ:  l000000000046D0A4 l000000000046D11C
l000000000046D0A4:
	w2 = Mem0[x0 + 40:word32]
	x20 = 0x0000000000000000
	branch (w2 & 0x00000004) == 0x00000000 l000000000046D100
	// succ:  l000000000046D0B0 l000000000046D100
l000000000046D0B0:
	x0 = 0x00000000004AA000
	x0 = x0 + 0x00000000000003E8
	call find_variable (retsize: 0;)
	branch x0 == 0x0000000000000000 l000000000046D0E4
	// succ:  l000000000046D0C0 l000000000046D0E4
l000000000046D0C0:
	w2 = Mem0[x0 + 40:word32]
	branch (w2 & 0x00000004) == 0x00000000 l000000000046D0E4
	// succ:  l000000000046D0C8 l000000000046D0E4
l000000000046D0C8:
	x21 = Mem0[x0 + 8:word64]
	branch x21 == 0x0000000000000000 l000000000046D0E4
	// succ:  l000000000046D0D0 l000000000046D0E4
l000000000046D0D0:
	w1 = Mem0[x21 + 16:word32]
	branch w1 == 0x00000000 l000000000046D0E4
	// succ:  l000000000046D0D8 l000000000046D0E4
l000000000046D0D8:
	branch x20 == 0x0000000000000000 l000000000046D0E4
	// succ:  l000000000046D0DC l000000000046D0E4
l000000000046D0DC:
	w0 = Mem0[x20 + 16:word32]
	branch w0 != 0x00000000 l000000000046D124
	// succ:  l000000000046D0E4 l000000000046D124
l000000000046D0E4:
	w19 = 0x00000001
	// succ:  l000000000046D0E8
l000000000046D0E8:
	w0 = w19
	v18 = sp + 32
	x21 = Mem0[v18:word64]
	v18 = v18 + 8
	x22 = Mem0[v18:word64]
	v19 = sp + 16
	x19 = Mem0[v19:word64]
	v19 = v19 + 8
	x20 = Mem0[v19:word64]
	x23 = Mem0[sp + 48:word64]
	x29 = Mem0[sp:word64]
	sp = sp + 8
	x30 = Mem0[sp:word64]
	sp = sp + 80
	return
	// succ:  caller_builtin_exit
l000000000046D100:
	x20 = Mem0[x0 + 8:word64]
	goto l000000000046D0B0
	// succ:  l000000000046D0B0
l000000000046D108:
	x22 = Mem0[x0 + 8:word64]
	x0 = 0x00000000004AA000
	x0 = x0 + 0x00000000000003D8
	call find_variable (retsize: 0;)
	branch x0 != 0x0000000000000000 l000000000046D0A4
	// succ:  l000000000046D11C l000000000046D0A4
l000000000046D11C:
	x20 = x0
	goto l000000000046D0B0
	// succ:  l000000000046D0B0
l000000000046D124:
	x0 = x19
	call no_options (retsize: 0;)
	w19 = w0
	branch w0 == 0x00000000 l000000000046D158
	// succ:  l000000000046D134 l000000000046D158
l000000000046D134:
	w19 = 0x00000102
	w0 = w19
	v20 = sp + 32
	x21 = Mem0[v20:word64]
	v20 = v20 + 8
	x22 = Mem0[v20:word64]
	v21 = sp + 16
	x19 = Mem0[v21:word64]
	v21 = v21 + 8
	x20 = Mem0[v21:word64]
	x23 = Mem0[sp + 48:word64]
	x29 = Mem0[sp:word64]
	sp = sp + 8
	x30 = Mem0[sp:word64]
	sp = sp + 80
	return
	// succ:  caller_builtin_exit
l000000000046D150:
	x22 = x0
	goto l000000000046D094
	// succ:  l000000000046D094
l000000000046D158:
	x0 = 0x00000000004E3000
	x23 = Mem0[x0 + 3856:word64]
	branch x23 == 0x0000000000000000 l000000000046D1FC
	// succ:  l000000000046D164 l000000000046D1FC
l000000000046D164:
	branch x22 == 0x0000000000000000 l000000000046D0E4
	// succ:  l000000000046D168 l000000000046D0E4
l000000000046D168:
	w0 = Mem0[x22 + 16:word32]
	branch w0 == 0x00000000 l000000000046D0E4
	// succ:  l000000000046D170 l000000000046D0E4
l000000000046D170:
	x0 = Mem0[x23 + 8:word64]
	x1 = x29 + 0x0000000000000040
	x0 = Mem0[x0:word64]
	call legal_number (retsize: 0;)
	branch w0 == 0x00000000 l000000000046D1E4
	// succ:  l000000000046D184 l000000000046D1E4
l000000000046D184:
	x1 = Mem0[x29 + 64:word64]
	x0 = x21
	call array_reference (retsize: 0;)
	x1 = Mem0[x29 + 64:word64]
	x21 = x0
	x1 = x1 + 0x0000000000000001
	x0 = x20
	call array_reference (retsize: 0;)
	x1 = Mem0[x29 + 64:word64]
	x20 = x0
	x1 = x1 + 0x0000000000000001
	x0 = x22
	call array_reference (retsize: 0;)
	branch x21 == 0x0000000000000000 l000000000046D0E4
	// succ:  l000000000046D1BC l000000000046D0E4
l000000000046D1BC:
	branch x20 == 0x0000000000000000 l000000000046D0E4
	// succ:  l000000000046D1C0 l000000000046D0E4
l000000000046D1C0:
	branch x0 == 0x0000000000000000 l000000000046D0E4
	// succ:  l000000000046D1C4 l000000000046D0E4
l000000000046D1C4:
	x1 = 0x00000000004BE000
	x3 = x0
	x1 = x1 + 0x0000000000000230
	x2 = x21
	x4 = x20
	w0 = 0x00000001
	__printf_chk(x0, x1, Mem0[sp:<unknown>])
	sp = sp + 0xFFFFFFFFFFFFFFF8
	goto l000000000046D0E8
	// succ:  l000000000046D0E8
l000000000046D1E4:
	x0 = Mem0[x23 + 8:word64]
	w19 = 0x00000001
	x0 = Mem0[x0:word64]
	call sh_invalidnum (retsize: 0;)
	call builtin_usage (retsize: 0;)
	goto l000000000046D0E8
	// succ:  l000000000046D0E8
l000000000046D1FC:
	x1 = x23
	x0 = x21
	call array_reference (retsize: 0;)
	x21 = x0
	x1 = 0x0000000000000001
	x0 = x20
	call array_reference (retsize: 0;)
	x2 = x21
	branch x21 == 0x0000000000000000 l000000000046D23C
	// succ:  l000000000046D220 l000000000046D23C
l000000000046D220:
	x3 = x0
	branch x0 == 0x0000000000000000 l000000000046D248
	// succ:  l000000000046D228 l000000000046D248
l000000000046D228:
	x1 = 0x00000000004BF000
	x1 = x1 + 0xFFFFFFFFFFFFFC98
	w0 = 0x00000001
	__printf_chk(x0, x1, Mem0[sp:<unknown>])
	sp = sp + 0xFFFFFFFFFFFFFFF8
	goto l000000000046D0E8
	// succ:  l000000000046D0E8
l000000000046D23C:
	x2 = 0x00000000004BE000
	x2 = x2 + 0x0000000000000228
	goto l000000000046D220
	// succ:  l000000000046D220
l000000000046D248:
	x3 = 0x00000000004BE000
	x3 = x3 + 0x0000000000000228
	goto l000000000046D228
	// succ:  l000000000046D228
caller_builtin_exit:


// fn000000000046D254
// Return size: 0
void fn000000000046D254()
fn000000000046D254_entry:
	// succ:  l000000000046D254
l000000000046D254:
	sp = fp
	sp = sp + -32
	Mem0[sp:word64] = x29
	sp = sp + 8
	Mem0[sp:word64] = x30
	x29 = x31 + 0x0000000000000000
	v8 = sp + 16
	Mem0[v8:word64] = x19
	v8 = v8 + 8
	Mem0[v8:word64] = x20
	x19 = 0x00000000004E1000
	x1 = Mem0[x19 + 1696:word64]
	x20 = x0
	branch x1 == 0x0000000000000000 l000000000046D284
	// succ:  l000000000046D270 l000000000046D284
l000000000046D270:
	x0 = x1
	x1 = 0x00000000004BE000
	x1 = x1 + 0x0000000000000240
	w2 = 0x000000AA
	call sh_xfree (retsize: 0;)
	// succ:  l000000000046D284
l000000000046D284:
	x0 = x20
	Mem0[x19 + 1696:word64] = 0x0000000000000000
	v12 = sp + 16
	x19 = Mem0[v12:word64]
	v12 = v12 + 8
	x20 = Mem0[v12:word64]
	x29 = Mem0[sp:word64]
	sp = sp + 8
	x30 = Mem0[sp:word64]
	sp = sp + 32
	// succ:  l000000000046D294_thunk_get_working_directory
l000000000046D294_thunk_get_working_directory:
	call get_working_directory (retsize: 0;)
	return
	// succ:  fn000000000046D254_exit
fn000000000046D254_exit:


// fn000000000046D298
// Return size: 0
void fn000000000046D298()
fn000000000046D298_entry:
	// succ:  l000000000046D298
l000000000046D298:
	sp = fp
	sp = sp + -64
	Mem0[sp:word64] = x29
	sp = sp + 8
	Mem0[sp:word64] = x30
	x29 = x31 + 0x0000000000000000
	v8 = sp + 16
	Mem0[v8:word64] = x19
	v8 = v8 + 8
	Mem0[v8:word64] = x20
	x19 = 0x00000000004E1000
	x2 = Mem0[x19 + 1696:word64]
	v12 = sp + 32
	Mem0[v12:word64] = x21
	v12 = v12 + 8
	Mem0[v12:word64] = x22
	v15 = sp + 48
	Mem0[v15:word64] = x23
	v15 = v15 + 8
	Mem0[v15:word64] = x24
	x22 = x0
	w21 = w1
	x23 = 0x00000000004BE000
	branch x2 == 0x0000000000000000 l000000000046D494
	// succ:  l000000000046D2C4 l000000000046D494
l000000000046D2C4:
	x0 = x22
	x1 = x2
	call make_absolute (retsize: 0;)
	x20 = x0
	branch w21 == 0x00000000 l000000000046D340
	// succ:  l000000000046D2D8 l000000000046D340
l000000000046D2D8:
	w1 = 0x00000000
	call sh_physpath (retsize: 0;)
	x19 = x0
	x0 = x22
	strlen(x0)
	sp = sp + 0xFFFFFFFFFFFFFFF8
	x24 = x0
	branch x19 == 0x0000000000000000 l000000000046D35C
	// succ:  l000000000046D2F4 l000000000046D35C
l000000000046D2F4:
	v20 = Mem0[x19:byte]
	w1 = (word32) v20
	branch w1 != 0x00000000 l000000000046D3B4
	// succ:  l000000000046D2FC l000000000046D3B4
l000000000046D2FC:
	x0 = x19
	x1 = x23 + 0x0000000000000240
	w2 = 0x000001D3
	call sh_xfree (retsize: 0;)
	w19 = 0x00000001
	// succ:  l000000000046D310
l000000000046D310:
	x1 = 0x00000000004DE000
	w1 = Mem0[x1 + 1716:word32]
	branch w1 == 0x00000000 l000000000046D320
	// succ:  l000000000046D31C l000000000046D320
l000000000046D31C:
	branch w21 == 0x00000000 l000000000046D364
	// succ:  l000000000046D320 l000000000046D364
l000000000046D320:
	branch w21 == 0x00000000 l000000000046D41C
	// succ:  l000000000046D324 l000000000046D41C
l000000000046D324:
	x0 = x22
	call chdir (retsize: 0;)
	branch w0 != 0x00000000 l000000000046D4B8
	// succ:  l000000000046D330 l000000000046D4B8
l000000000046D330:
	branch w19 != 0x00000000 l000000000046D3E4
	// succ:  l000000000046D334 l000000000046D3E4
l000000000046D334:
	x0 = x20
	call set_working_directory (retsize: 0;)
	goto l000000000046D3F4
	// succ:  l000000000046D3F4
l000000000046D340:
	w1 = 0x00000003
	call sh_canonpath (retsize: 0;)
	x19 = x0
	x0 = x22
	strlen(x0)
	sp = sp + 0xFFFFFFFFFFFFFFF8
	x24 = x0
	branch x19 != 0x0000000000000000 l000000000046D2F4
	// succ:  l000000000046D35C l000000000046D2F4
l000000000046D35C:
	w19 = 0x00000001
	goto l000000000046D310
	// succ:  l000000000046D310
l000000000046D364:
	branch w19 == 0x00000000 l000000000046D320
	// succ:  l000000000046D368 l000000000046D320
l000000000046D368:
	__errno_location()
	sp = sp + 0xFFFFFFFFFFFFFFF8
	x19 = x0
	w0 = Mem0[x0:word32]
	w31 = w0 - 0x00000024
	NZCV = cond(w31)
	branch Test(EQ,Z) l000000000046D3D0
	// succ:  l000000000046D37C l000000000046D3D0
l000000000046D37C:
	w31 = w0 - 0x00000002
	NZCV = cond(w31)
	branch Test(EQ,Z) l000000000046D38C
	// succ:  l000000000046D384 l000000000046D38C
l000000000046D384:
	w0 = 0x00000014
	Mem0[x19:word32] = w0
	// succ:  l000000000046D38C
l000000000046D38C:
	x0 = x20
	x1 = x23 + 0x0000000000000240
	w2 = 0x000001E3
	call sh_xfree (retsize: 0;)
	w0 = 0x00000000
	v36 = sp + 16
	x19 = Mem0[v36:word64]
	v36 = v36 + 8
	x20 = Mem0[v36:word64]
	v37 = sp + 32
	x21 = Mem0[v37:word64]
	v37 = v37 + 8
	x22 = Mem0[v37:word64]
	v38 = sp + 48
	x23 = Mem0[v38:word64]
	v38 = v38 + 8
	x24 = Mem0[v38:word64]
	x29 = Mem0[sp:word64]
	sp = sp + 8
	x30 = Mem0[sp:word64]
	sp = sp + 64
	return
	// succ:  fn000000000046D298_exit
l000000000046D3B4:
	x0 = x20
	x1 = x23 + 0x0000000000000240
	w2 = 0x000001D0
	x20 = x19
	call sh_xfree (retsize: 0;)
	w19 = 0x00000000
	goto l000000000046D310
	// succ:  l000000000046D310
l000000000046D3D0:
	w31 = w24 - (0x00000001 << 12)
	NZCV = cond(w31)
	branch Test(GT,NZV) l000000000046D38C
	// succ:  l000000000046D3D8 l000000000046D38C
l000000000046D3D8:
	x0 = x20
	call chdir (retsize: 0;)
	branch w0 != 0x00000000 l000000000046D430
	// succ:  l000000000046D3E4 l000000000046D430
l000000000046D3E4:
	x0 = 0x00000000004AC000
	x0 = x0 + 0x00000000000006A0
	call fn000000000046D254 (retsize: 0;)
	branch x0 == 0x0000000000000000 l000000000046D334
	// succ:  l000000000046D3F4 l000000000046D334
l000000000046D3F4:
	x0 = x20
	x1 = x23 + 0x0000000000000240
	w2 = 0x000001F5
	call sh_xfree (retsize: 0;)
	w0 = 0x00000001
	v24 = sp + 16
	x19 = Mem0[v24:word64]
	v24 = v24 + 8
	x20 = Mem0[v24:word64]
	v25 = sp + 32
	x21 = Mem0[v25:word64]
	v25 = v25 + 8
	x22 = Mem0[v25:word64]
	v26 = sp + 48
	x23 = Mem0[v26:word64]
	v26 = v26 + 8
	x24 = Mem0[v26:word64]
	x29 = Mem0[sp:word64]
	sp = sp + 8
	x30 = Mem0[sp:word64]
	sp = sp + 64
	return
	// succ:  fn000000000046D298_exit
l000000000046D41C:
	x0 = x20
	call chdir (retsize: 0;)
	branch w0 == 0x00000000 l000000000046D330
	// succ:  l000000000046D428 l000000000046D330
l000000000046D428:
	__errno_location()
	sp = sp + 0xFFFFFFFFFFFFFFF8
	x19 = x0
	// succ:  l000000000046D430
l000000000046D430:
	x0 = x22
	w21 = Mem0[x19:word32]
	call chdir (retsize: 0;)
	branch w0 == 0x00000000 l000000000046D470
	// succ:  l000000000046D440 l000000000046D470
l000000000046D440:
	Mem0[x19:word32] = w21
	w19 = 0x00000000
	// succ:  l000000000046D448
l000000000046D448:
	x0 = x20
	x1 = x23 + 0x0000000000000240
	w2 = 0x00000216
	call sh_xfree (retsize: 0;)
	w0 = w19
	v30 = sp + 32
	x21 = Mem0[v30:word64]
	v30 = v30 + 8
	x22 = Mem0[v30:word64]
	v31 = sp + 16
	x19 = Mem0[v31:word64]
	v31 = v31 + 8
	x20 = Mem0[v31:word64]
	v32 = sp + 48
	x23 = Mem0[v32:word64]
	v32 = v32 + 8
	x24 = Mem0[v32:word64]
	x29 = Mem0[sp:word64]
	sp = sp + 8
	x30 = Mem0[sp:word64]
	sp = sp + 64
	return
	// succ:  fn000000000046D298_exit
l000000000046D470:
	x0 = 0x00000000004AC000
	x0 = x0 + 0x00000000000006A0
	call fn000000000046D254 (retsize: 0;)
	branch x0 == 0x0000000000000000 l000000000046D4E0
	// succ:  l000000000046D480 l000000000046D4E0
l000000000046D480:
	x1 = x23 + 0x0000000000000240
	w2 = 0x0000020C
	call sh_xfree (retsize: 0;)
	w19 = 0x00000001
	goto l000000000046D448
	// succ:  l000000000046D448
l000000000046D494:
	x0 = 0x00000000004BE000
	x0 = x0 + 0x0000000000000270
	call get_working_directory (retsize: 0;)
	branch x0 == 0x0000000000000000 l000000000046D4B0
	// succ:  l000000000046D4A4 l000000000046D4B0
l000000000046D4A4:
	x1 = x23 + 0x0000000000000240
	w2 = 0x000001BE
	call sh_xfree (retsize: 0;)
	// succ:  l000000000046D4B0
l000000000046D4B0:
	x2 = Mem0[x19 + 1696:word64]
	goto l000000000046D2C4
	// succ:  l000000000046D2C4
l000000000046D4B8:
	x0 = x20
	x1 = x23 + 0x0000000000000240
	w2 = 0x000001FD
	call sh_xfree (retsize: 0;)
	w0 = 0x00000000
	v27 = sp + 16
	x19 = Mem0[v27:word64]
	v27 = v27 + 8
	x20 = Mem0[v27:word64]
	v28 = sp + 32
	x21 = Mem0[v28:word64]
	v28 = v28 + 8
	x22 = Mem0[v28:word64]
	v29 = sp + 48
	x23 = Mem0[v29:word64]
	v29 = v29 + 8
	x24 = Mem0[v29:word64]
	x29 = Mem0[sp:word64]
	sp = sp + 8
	x30 = Mem0[sp:word64]
	sp = sp + 64
	return
	// succ:  fn000000000046D298_exit
l000000000046D4E0:
	x0 = x20
	call set_working_directory (retsize: 0;)
	w19 = 0x00000001
	goto l000000000046D448
	// succ:  l000000000046D448
fn000000000046D298_exit:


// fn000000000046D4F0
// Return size: 0
void fn000000000046D4F0()
fn000000000046D4F0_entry:
	// succ:  l000000000046D4F0
l000000000046D4F0:
	sp = fp
	sp = sp + -48
	Mem0[sp:word64] = x29
	sp = sp + 8
	Mem0[sp:word64] = x30
	x29 = x31 + 0x0000000000000000
	v8 = sp + 16
	Mem0[v8:word64] = x19
	v8 = v8 + 8
	Mem0[v8:word64] = x20
	v11 = sp + 32
	Mem0[v11:word64] = x21
	v11 = v11 + 8
	Mem0[v11:word64] = x22
	x20 = 0x00000000004D6000
	x19 = x0
	w22 = Mem0[x20 + 2648:word32]
	x1 = x0
	branch x0 == 0x0000000000000000 l000000000046D58C
	// succ:  l000000000046D514 l000000000046D58C
l000000000046D514:
	x0 = 0x00000000004AA000
	x0 = x0 + 0x0000000000000520
	w2 = 0x00000000
	call bind_variable (retsize: 0;)
	branch x0 == 0x0000000000000000 l000000000046D5A8
	// succ:  l000000000046D528 l000000000046D5A8
l000000000046D528:
	w1 = Mem0[x0 + 40:word32]
	w21 = w1 & 0x00000002
	branch (w1 & 0x00000002) == 0x00000000 l000000000046D574
	// succ:  l000000000046D534 l000000000046D574
l000000000046D534:
	branch w22 != 0x00000000 l000000000046D560
	// succ:  l000000000046D538 l000000000046D560
l000000000046D538:
	w0 = Mem0[x20 + 2648:word32]
	branch w0 == 0x00000000 l000000000046D560
	// succ:  l000000000046D540 l000000000046D560
l000000000046D540:
	branch (w1 & 0x00000001) == 0x00000000 l000000000046D560
	// succ:  l000000000046D544 l000000000046D560
l000000000046D544:
	x2 = x19
	branch x19 == 0x0000000000000000 l000000000046D5C0
	// succ:  l000000000046D54C l000000000046D5C0
l000000000046D54C:
	x0 = 0x00000000004BE000
	x0 = x0 + 0x0000000000000278
	w1 = 0x00000004
	call update_export_env_inplace (retsize: 0;)
	Mem0[x20 + 2648:word32] = 0x00000000
	// succ:  l000000000046D560
l000000000046D560:
	w0 = w21
	v22 = sp + 16
	x19 = Mem0[v22:word64]
	v22 = v22 + 8
	x20 = Mem0[v22:word64]
	v23 = sp + 32
	x21 = Mem0[v23:word64]
	v23 = v23 + 8
	x22 = Mem0[v23:word64]
	x29 = Mem0[sp:word64]
	sp = sp + 8
	x30 = Mem0[sp:word64]
	sp = sp + 48
	return
	// succ:  fn000000000046D4F0_exit
l000000000046D574:
	w21 = 0x00000001
	w0 = w21
	v24 = sp + 16
	x19 = Mem0[v24:word64]
	v24 = v24 + 8
	x20 = Mem0[v24:word64]
	v25 = sp + 32
	x21 = Mem0[v25:word64]
	v25 = v25 + 8
	x22 = Mem0[v25:word64]
	x29 = Mem0[sp:word64]
	sp = sp + 8
	x30 = Mem0[sp:word64]
	sp = sp + 48
	return
	// succ:  fn000000000046D4F0_exit
l000000000046D58C:
	x1 = 0x00000000004AC000
	x0 = 0x00000000004AA000
	x1 = x1 + 0x0000000000000460
	x0 = x0 + 0x0000000000000520
	w2 = 0x00000000
	call bind_variable (retsize: 0;)
	branch x0 != 0x0000000000000000 l000000000046D528
	// succ:  l000000000046D5A8 l000000000046D528
l000000000046D5A8:
	w21 = w0
	w0 = w21
	v20 = sp + 16
	x19 = Mem0[v20:word64]
	v20 = v20 + 8
	x20 = Mem0[v20:word64]
	v21 = sp + 32
	x21 = Mem0[v21:word64]
	v21 = v21 + 8
	x22 = Mem0[v21:word64]
	x29 = Mem0[sp:word64]
	sp = sp + 8
	x30 = Mem0[sp:word64]
	sp = sp + 48
	return
	// succ:  fn000000000046D4F0_exit
l000000000046D5C0:
	x2 = 0x00000000004AC000
	x2 = x2 + 0x0000000000000460
	goto l000000000046D54C
	// succ:  l000000000046D54C
fn000000000046D4F0_exit:


// fn000000000046D5CC
// Return size: 0
void fn000000000046D5CC()
fn000000000046D5CC_entry:
	// succ:  l000000000046D5CC
l000000000046D5CC:
	sp = fp
	sp = sp + -64
	Mem0[sp:word64] = x29
	sp = sp + 8
	Mem0[sp:word64] = x30
	x29 = x31 + 0x0000000000000000
	v8 = sp + 32
	Mem0[v8:word64] = x21
	v8 = v8 + 8
	Mem0[v8:word64] = x22
	w22 = w0
	x21 = 0x00000000004E1000
	w0 = 0x00000000
	v13 = sp + 16
	Mem0[v13:word64] = x19
	v13 = v13 + 8
	Mem0[v13:word64] = x20
	v16 = sp + 48
	Mem0[v16:word64] = x23
	v16 = v16 + 8
	Mem0[v16:word64] = x24
	call sh_chkwrite (retsize: 0;)
	x20 = Mem0[x21 + 1696:word64]
	w19 = w0
	branch x20 == 0x0000000000000000 l000000000046D700
	// succ:  l000000000046D5FC l000000000046D700
l000000000046D5FC:
	branch w22 != 0x00000000 l000000000046D6C0
	// succ:  l000000000046D600 l000000000046D6C0
l000000000046D600:
	x0 = 0x00000000004AA000
	x22 = 0x00000000004D6000
	x0 = x0 + 0x0000000000000520
	w23 = Mem0[x22 + 2648:word32]
	call get_string_value (retsize: 0;)
	x24 = x0
	x0 = 0x00000000004AB000
	x0 = x0 + 0xFFFFFFFFFFFFFEE0
	x1 = x24
	w2 = 0x00000000
	call bind_variable (retsize: 0;)
	branch x0 == 0x0000000000000000 l000000000046D640
	// succ:  l000000000046D630 l000000000046D640
l000000000046D630:
	w1 = Mem0[x0 + 40:word32]
	w1 = w1 & 0x00000002
	NZCV = cond(w1 - w31)
l000000000046D640:
	branch w23 != 0x00000000 l000000000046D64C
	// succ:  l000000000046D644 l000000000046D64C
l000000000046D644:
	w1 = Mem0[x22 + 2648:word32]
	branch w1 != 0x00000000 l000000000046D698
	// succ:  l000000000046D64C l000000000046D698
l000000000046D64C:
	x0 = x20
	call fn000000000046D4F0 (retsize: 0;)
	w31 = w0 - 0x00000001
	NZCV = cond(w31)
l000000000046D698:
	w0 = Mem0[x0 + 40:word32]
	branch (w0 & 0x00000001) == 0x00000000 l000000000046D64C
	// succ:  l000000000046D6A0 l000000000046D64C
l000000000046D6A0:
	x0 = 0x00000000004BE000
	x0 = x0 + 0x0000000000000280
	w1 = 0x00000007
	x2 = x24
	call update_export_env_inplace (retsize: 0;)
	x0 = 0x00000000004D6000
	Mem0[x0 + 2648:word32] = w23
	goto l000000000046D64C
	// succ:  l000000000046D64C
l000000000046D6C0:
	x0 = x20
	w1 = 0x00000000
	call sh_physpath (retsize: 0;)
	x20 = x0
	goto l000000000046D600
	// succ:  l000000000046D600
l000000000046D700:
	x0 = 0x00000000004AC000
	x0 = x0 + 0x00000000000006A0
	call get_working_directory (retsize: 0;)
	x20 = x0
	goto l000000000046D600
	// succ:  l000000000046D600
fn000000000046D5CC_exit:


// cd_builtin
// Return size: 0
void cd_builtin()
cd_builtin_entry:
	// succ:  l000000000046D714
l000000000046D714:
	sp = fp
	sp = sp + -96
	Mem0[sp:word64] = x29
	sp = sp + 8
	Mem0[sp:word64] = x30
	x29 = x31 + 0x0000000000000000
	x1 = 0x00000000004DF000
	w1 = Mem0[x1 + 3696:word32]
	v10 = sp + 16
	Mem0[v10:word64] = x19
	v10 = v10 + 8
	Mem0[v10:word64] = x20
	v13 = sp + 32
	Mem0[v13:word64] = x21
	v13 = v13 + 8
	Mem0[v13:word64] = x22
	v16 = sp + 48
	Mem0[v16:word64] = x23
	v16 = v16 + 8
	Mem0[v16:word64] = x24
	v19 = sp + 64
	Mem0[v19:word64] = x25
	v19 = v19 + 8
	Mem0[v19:word64] = x26
	x19 = x0
	branch w1 != 0x00000000 l000000000046D7C4
	// succ:  l000000000046D73C l000000000046D7C4
l000000000046D73C:
	x23 = 0x00000000004E1000
	x0 = 0x00000000004DF000
	x22 = x23 + 0x0000000000000684
	x20 = 0x00000000004BE000
	Mem0[x22:word32] = w1
	w21 = Mem0[x0 + 3760:word32]
	x20 = x20 + 0x0000000000000288
	call reset_internal_getopt (retsize: 0;)
	w24 = 0x00000001
	// succ:  l000000000046D760
l000000000046D760:
	x0 = x19
	x1 = x20
	call internal_getopt (retsize: 0;)
	w31 = w0 + 0x00000001
	NZCV = cond(w31)
	branch Test(EQ,Z) l000000000046D7E8
	// succ:  l000000000046D774 l000000000046D7E8
l000000000046D774:
	w31 = w0 - 0x00000050
	NZCV = cond(w31)
	branch Test(EQ,Z) l000000000046D7AC
	// succ:  l000000000046D77C l000000000046D7AC
l000000000046D77C:
	w31 = w0 - 0x00000065
	NZCV = cond(w31)
	branch Test(EQ,Z) l000000000046D7BC
	// succ:  l000000000046D784 l000000000046D7BC
l000000000046D784:
	w31 = w0 - 0x0000004C
	NZCV = cond(w31)
	branch Test(EQ,Z) l000000000046D7B4
	// succ:  l000000000046D78C l000000000046D7B4
l000000000046D78C:
	call builtin_usage (retsize: 0;)
	w0 = 0x00000001
	// succ:  l000000000046D794
l000000000046D794:
	v27 = sp + 16
	x19 = Mem0[v27:word64]
	v27 = v27 + 8
	x20 = Mem0[v27:word64]
	v28 = sp + 32
	x21 = Mem0[v28:word64]
	v28 = v28 + 8
	x22 = Mem0[v28:word64]
	v29 = sp + 48
	x23 = Mem0[v29:word64]
	v29 = v29 + 8
	x24 = Mem0[v29:word64]
	v30 = sp + 64
	x25 = Mem0[v30:word64]
	v30 = v30 + 8
	x26 = Mem0[v30:word64]
	x29 = Mem0[sp:word64]
	sp = sp + 8
	x30 = Mem0[sp:word64]
	sp = sp + 96
	return
	// succ:  cd_builtin_exit
l000000000046D7AC:
	w21 = 0x00000001
	goto l000000000046D760
	// succ:  l000000000046D760
l000000000046D7B4:
	w21 = 0x00000000
	goto l000000000046D760
	// succ:  l000000000046D760
l000000000046D7BC:
	Mem0[x22:word32] = w24
	goto l000000000046D760
	// succ:  l000000000046D760
l000000000046D7C4:
	x0 = 0x0000000000000000
	call sh_restricted (retsize: 0;)
	w0 = 0x00000001
	v31 = sp + 16
	x19 = Mem0[v31:word64]
	v31 = v31 + 8
	x20 = Mem0[v31:word64]
	v32 = sp + 32
	x21 = Mem0[v32:word64]
	v32 = v32 + 8
	x22 = Mem0[v32:word64]
	v33 = sp + 48
	x23 = Mem0[v33:word64]
	v33 = v33 + 8
	x24 = Mem0[v33:word64]
	v34 = sp + 64
	x25 = Mem0[v34:word64]
	v34 = v34 + 8
	x26 = Mem0[v34:word64]
	x29 = Mem0[sp:word64]
	sp = sp + 8
	x30 = Mem0[sp:word64]
	sp = sp + 96
	return
	// succ:  cd_builtin_exit
l000000000046D7E8:
	x0 = 0x00000000004E3000
	w0 = Mem0[x0 + 3512:word32]
	x1 = 0x00000000004DE000
	w1 = Mem0[x1 + 1704:word32]
	NZCV = cond(w0 - w31)
	x0 = 0x00000000004E3000
	x19 = Mem0[x0 + 3856:word64]
	w24 = (word32) Test(NE,Z)
	w0 = 0x00000000
	branch w1 == 0x00000000 l000000000046D824
	// succ:  l000000000046D810 l000000000046D824
l000000000046D810:
	x0 = x23 + 0x0000000000000684
	w0 = Mem0[x0 + 4:word32]
	NZCV = cond(w0 - w31)
	w0 = 0x00000002
l000000000046D824:
	x23 = x23 + 0x0000000000000684
	w1 = Mem0[x23:word32]
	w24 = w0 | w24
	branch w1 == 0x00000000 l000000000046D83C
	// succ:  l000000000046D834 l000000000046D83C
l000000000046D834:
	branch w21 != 0x00000000 l000000000046D83C
	// succ:  l000000000046D838 l000000000046D83C
l000000000046D838:
	Mem0[x23:word32] = w21
	// succ:  l000000000046D83C
l000000000046D83C:
	branch x19 == 0x0000000000000000 l000000000046DA28
	// succ:  l000000000046D840 l000000000046DA28
l000000000046D840:
	x0 = Mem0[x19 + 8:word64]
	x0 = Mem0[x0:word64]
	v35 = Mem0[x0:byte]
	w1 = (word32) v35
	w31 = w1 - 0x0000002D
	NZCV = cond(w31)
	branch Test(EQ,Z) l000000000046D9BC
	// succ:  l000000000046D854 l000000000046D9BC
l000000000046D854:
	call absolute_pathname (retsize: 0;)
	branch w0 != 0x00000000 l000000000046D92C
	// succ:  l000000000046D85C l000000000046D92C
l000000000046D85C:
	x0 = 0x00000000004DF000
	w22 = Mem0[x0 + 3752:word32]
	branch w22 != 0x00000000 l000000000046D92C
	// succ:  l000000000046D868 l000000000046D92C
l000000000046D868:
	x0 = 0x00000000004BE000
	x0 = x0 + 0x00000000000002B0
	call get_string_value (retsize: 0;)
	x25 = x0
	branch x0 == 0x0000000000000000 l000000000046D92C
	// succ:  l000000000046D87C l000000000046D92C
l000000000046D87C:
	x0 = Mem0[x19 + 8:word64]
	x23 = 0x00000000004BE000
	x20 = Mem0[x0:word64]
	x23 = x23 + 0x0000000000000240
	Mem0[x29 + 80:word32] = w22
	goto l000000000046D89C
	// succ:  l000000000046D89C
l000000000046D894:
	x0 = x22
	call sh_xfree (retsize: 0;)
	// succ:  l000000000046D89C
l000000000046D89C:
	x1 = x29 + 0x0000000000000050
	x0 = x25
	call extract_colon_unit (retsize: 0;)
	x19 = x0
	x1 = x20
	w2 = 0x00000001
	branch x0 == 0x0000000000000000 l000000000046D934
	// succ:  l000000000046D8B8 l000000000046D934
l000000000046D8B8:
	v39 = Mem0[x19:byte]
	w26 = (word32) v39
	call sh_makepath (retsize: 0;)
	w2 = 0x0000010D
	x22 = x0
	x1 = x23
	x0 = x19
	call sh_xfree (retsize: 0;)
	w1 = w21
	x0 = x22
	call fn000000000046D298 (retsize: 0;)
	x1 = x23
	w2 = 0x00000122
	branch w0 == 0x00000000 l000000000046D894
	// succ:  l000000000046D8EC l000000000046D894
l000000000046D8EC:
	x19 = x22
	branch w26 == 0x00000000 l000000000046D90C
	// succ:  l000000000046D8F4 l000000000046D90C
l000000000046D8F4:
	branch w21 != 0x00000000 l000000000046D900
	// succ:  l000000000046D8F8 l000000000046D900
l000000000046D8F8:
	x0 = 0x00000000004E1000
	x22 = Mem0[x0 + 1696:word64]
	// succ:  l000000000046D900
l000000000046D900:
	branch x22 == 0x0000000000000000 l000000000046D90C
	// succ:  l000000000046D904 l000000000046D90C
l000000000046D904:
	x0 = x22
	puts(x0)
	sp = sp + 0xFFFFFFFFFFFFFFF8
	// succ:  l000000000046D90C
l000000000046D90C:
	x1 = 0x00000000004BE000
	x0 = x19
	x1 = x1 + 0x0000000000000240
	w2 = 0x00000118
	call sh_xfree (retsize: 0;)
	w0 = w21
	call fn000000000046D5CC (retsize: 0;)
	goto l000000000046D794
	// succ:  l000000000046D794
l000000000046D92C:
	x0 = Mem0[x19 + 8:word64]
	x20 = Mem0[x0:word64]
	// succ:  l000000000046D934
l000000000046D934:
	x0 = x20
	w1 = w21
	call fn000000000046D298 (retsize: 0;)
	branch w0 == 0x00000000 l000000000046D95C
	// succ:  l000000000046D944 l000000000046D95C
l000000000046D944:
	branch (w24 & 0x00000004) == 0x00000000 l000000000046D950
	// succ:  l000000000046D948 l000000000046D950
l000000000046D948:
	x0 = x20
	puts(x0)
	sp = sp + 0xFFFFFFFFFFFFFFF8
	// succ:  l000000000046D950
l000000000046D950:
	w0 = w21
	call fn000000000046D5CC (retsize: 0;)
	goto l000000000046D794
	// succ:  l000000000046D794
l000000000046D95C:
	branch (w24 & 0x00000001) == 0x00000000 l000000000046D9F8
	// succ:  l000000000046D960 l000000000046D9F8
l000000000046D960:
	branch (w24 & 0x00000002) == 0x00000000 l000000000046D994
	// succ:  l000000000046D964 l000000000046D994
l000000000046D964:
	x0 = x20
	call dirspell (retsize: 0;)
	x19 = x0
	branch x0 == 0x0000000000000000 l000000000046D994
	// succ:  l000000000046D974 l000000000046D994
l000000000046D974:
	w1 = w21
	call fn000000000046D298 (retsize: 0;)
	branch w0 != 0x00000000 l000000000046DA14
	// succ:  l000000000046D980 l000000000046DA14
l000000000046D980:
	x1 = 0x00000000004BE000
	x0 = x19
	x1 = x1 + 0x0000000000000240
	w2 = 0x00000157
	call sh_xfree (retsize: 0;)
	// succ:  l000000000046D994
l000000000046D994:
	__errno_location()
	sp = sp + 0xFFFFFFFFFFFFFFF8
	w0 = Mem0[x0:word32]
	strerror(x0)
	sp = sp + 0xFFFFFFFFFFFFFFF8
	x2 = x0
	x0 = 0x00000000004BE000
	x0 = x0 + 0x00000000000007D0
	x1 = x20
	call builtin_error (retsize: 0;)
	w0 = 0x00000001
	goto l000000000046D794
	// succ:  l000000000046D794
l000000000046D9BC:
	v40 = Mem0[x0 + 1:byte]
	w1 = (word32) v40
	branch w1 != 0x00000000 l000000000046D854
	// succ:  l000000000046D9C4 l000000000046D854
l000000000046D9C4:
	x0 = 0x00000000004AB000
	x0 = x0 + 0xFFFFFFFFFFFFFEE0
	call get_string_value (retsize: 0;)
	x20 = x0
	w24 = 0x00000004
	branch x0 != 0x0000000000000000 l000000000046D934
	// succ:  l000000000046D9DC l000000000046D934
l000000000046D9DC:
	x1 = 0x00000000004BE000
	x1 = x1 + 0x00000000000002A0
	w2 = 0x00000005
	dcgettext(x0, x1, x2)
	sp = sp + 0xFFFFFFFFFFFFFFF8
	call builtin_error (retsize: 0;)
	w0 = 0x00000001
	goto l000000000046D794
	// succ:  l000000000046D794
l000000000046D9F8:
	x0 = x20
	call get_string_value (retsize: 0;)
	x19 = x0
	branch x0 == 0x0000000000000000 l000000000046D960
	// succ:  l000000000046DA08 l000000000046D960
l000000000046DA08:
	w1 = w21
	call fn000000000046D298 (retsize: 0;)
	branch w0 == 0x00000000 l000000000046D960
	// succ:  l000000000046DA14 l000000000046D960
l000000000046DA14:
	x0 = x19
	puts(x0)
	sp = sp + 0xFFFFFFFFFFFFFFF8
	w0 = w21
	call fn000000000046D5CC (retsize: 0;)
	goto l000000000046D794
	// succ:  l000000000046D794
l000000000046DA28:
	x0 = 0x00000000004AB000
	x0 = x0 + 0xFFFFFFFFFFFFFA10
	call get_string_value (retsize: 0;)
	x20 = x0
	w24 = w19
	branch x0 != 0x0000000000000000 l000000000046D934
	// succ:  l000000000046DA40 l000000000046D934
l000000000046DA40:
	x1 = 0x00000000004BE000
	x1 = x1 + 0x0000000000000290
	w2 = 0x00000005
	dcgettext(x0, x1, x2)
	sp = sp + 0xFFFFFFFFFFFFFFF8
	call builtin_error (retsize: 0;)
	w0 = 0x00000001
	goto l000000000046D794
	// succ:  l000000000046D794
cd_builtin_exit:


// pwd_builtin
// Return size: 0
void pwd_builtin()
pwd_builtin_entry:
	// succ:  l000000000046DA5C
l000000000046DA5C:
	sp = fp
	sp = sp + -64
	Mem0[sp:word64] = x29
	sp = sp + 8
	Mem0[sp:word64] = x30
	x29 = x31 + 0x0000000000000000
	x1 = 0x00000000004DF000
	v9 = sp + 32
	Mem0[v9:word64] = x21
	v9 = v9 + 8
	Mem0[v9:word64] = x22
	w1 = Mem0[x1 + 3760:word32]
	x22 = 0x00000000004E1000
	v13 = sp + 16
	Mem0[v13:word64] = x19
	v13 = v13 + 8
	Mem0[v13:word64] = x20
	v16 = sp + 48
	Mem0[v16:word64] = x23
	v16 = v16 + 8
	Mem0[v16:word64] = x24
	x21 = x22 + 0x0000000000000684
	x19 = 0x00000000004BE000
	x20 = x0
	Mem0[x21 + 8:word32] = w1
	w23 = 0x00000000
	call reset_internal_getopt (retsize: 0;)
	x19 = x19 + 0x0000000000000288
	w24 = 0x00000001
	// succ:  l000000000046DA9C
l000000000046DA9C:
	x0 = x20
	x1 = x19
	call internal_getopt (retsize: 0;)
	w31 = w0 + 0x00000001
	NZCV = cond(w31)
	branch Test(EQ,Z) l000000000046DADC
	// succ:  l000000000046DAB0 l000000000046DADC
l000000000046DAB0:
	w31 = w0 - 0x0000004C
	NZCV = cond(w31)
	branch Test(EQ,Z) l000000000046DB58
	// succ:  l000000000046DAB8 l000000000046DB58
l000000000046DAB8:
	w31 = w0 - 0x00000050
	NZCV = cond(w31)
	branch Test(NE,Z) l000000000046DB60
	// succ:  l000000000046DAC0 l000000000046DB60
l000000000046DAC0:
	x0 = x20
	x1 = x19
	Mem0[x21 + 8:word32] = w24
	call internal_getopt (retsize: 0;)
	w31 = w0 + 0x00000001
	NZCV = cond(w31)
	w23 = 0x00000001
	branch Test(NE,Z) l000000000046DAB0
	// succ:  l000000000046DADC l000000000046DAB0
l000000000046DADC:
	x20 = 0x00000000004E1000
	x19 = Mem0[x20 + 1696:word64]
	branch x19 == 0x0000000000000000 l000000000046DBDC
	// succ:  l000000000046DAE8 l000000000046DBDC
l000000000046DAE8:
	x22 = x22 + 0x0000000000000684
	w0 = Mem0[x22 + 8:word32]
	x1 = x19
	branch w0 != 0x00000000 l000000000046DBBC
	// succ:  l000000000046DAF8 l000000000046DBBC
l000000000046DAF8:
	x0 = 0x00000000004DE000
	w0 = Mem0[x0 + 1716:word32]
	branch w0 != 0x00000000 l000000000046DB90
	// succ:  l000000000046DB04 l000000000046DB90
l000000000046DB04:
	branch x19 == 0x0000000000000000 l000000000046DB64
	// succ:  l000000000046DB08 l000000000046DB64
l000000000046DB08:
	x0 = x19
	puts(x0)
	sp = sp + 0xFFFFFFFFFFFFFFF8
	x0 = 0x00000000004DE000
	w0 = Mem0[x0 + 1716:word32]
	w21 = 0x00000000
	branch w0 != 0x00000000 l000000000046DB7C
	// succ:  l000000000046DB20 l000000000046DB7C
l000000000046DB20:
	x0 = Mem0[x20 + 1696:word64]
	x31 = x19 - x0
	NZCV = cond(x31)
	branch Test(EQ,Z) l000000000046DB40
	// succ:  l000000000046DB2C l000000000046DB40
l000000000046DB2C:
	x1 = 0x00000000004BE000
	x0 = x19
	x1 = x1 + 0x0000000000000240
	w2 = 0x000001A4
	call sh_xfree (retsize: 0;)
	// succ:  l000000000046DB40
l000000000046DB40:
	w0 = w21
	v26 = sp + 16
	x19 = Mem0[v26:word64]
	v26 = v26 + 8
	x20 = Mem0[v26:word64]
	v27 = sp + 32
	x21 = Mem0[v27:word64]
	v27 = v27 + 8
	x22 = Mem0[v27:word64]
	v28 = sp + 48
	x23 = Mem0[v28:word64]
	v28 = v28 + 8
	x24 = Mem0[v28:word64]
	x29 = Mem0[sp:word64]
	sp = sp + 8
	x30 = Mem0[sp:word64]
	sp = sp + 64
	// succ:  l000000000046DB54_thunk_sh_chkwrite
l000000000046DB54_thunk_sh_chkwrite:
	call sh_chkwrite (retsize: 0;)
	return
	// succ:  pwd_builtin_exit
l000000000046DB58:
	Mem0[x21 + 8:word32] = 0x00000000
	goto l000000000046DA9C
	// succ:  l000000000046DA9C
l000000000046DB60:
	call builtin_usage (retsize: 0;)
	// succ:  l000000000046DB64
l000000000046DB64:
	w0 = 0x00000001
	v29 = sp + 16
	x19 = Mem0[v29:word64]
	v29 = v29 + 8
	x20 = Mem0[v29:word64]
	v30 = sp + 32
	x21 = Mem0[v30:word64]
	v30 = v30 + 8
	x22 = Mem0[v30:word64]
	v31 = sp + 48
	x23 = Mem0[v31:word64]
	v31 = v31 + 8
	x24 = Mem0[v31:word64]
	x29 = Mem0[sp:word64]
	sp = sp + 8
	x30 = Mem0[sp:word64]
	sp = sp + 64
	return
	// succ:  pwd_builtin_exit
l000000000046DB7C:
	branch w23 == 0x00000000 l000000000046DB20
	// succ:  l000000000046DB80 l000000000046DB20
l000000000046DB80:
	x0 = x19
	call fn000000000046D4F0 (retsize: 0;)
	w21 = w0
	goto l000000000046DB20
	// succ:  l000000000046DB20
l000000000046DB90:
	x2 = 0x0000000000000000
	x0 = 0x00000000004B2000
	x0 = x0 + 0xFFFFFFFFFFFFFD68
	x3 = x2
	call same_file (retsize: 0;)
	branch w0 != 0x00000000 l000000000046DB04
	// succ:  l000000000046DBA8 l000000000046DB04
l000000000046DBA8:
	x0 = 0x00000000004BD000
	x0 = x0 + 0x0000000000000390
	call fn000000000046D254 (retsize: 0;)
	x19 = x0
	goto l000000000046DB04
	// succ:  l000000000046DB04
l000000000046DBBC:
	x0 = x19
	w1 = 0x00000000
	call sh_physpath (retsize: 0;)
	x19 = x0
	// succ:  l000000000046DBCC
l000000000046DBCC:
	x1 = Mem0[x20 + 1696:word64]
	branch x1 == 0x0000000000000000 l000000000046DAF8
	// succ:  l000000000046DBD4 l000000000046DAF8
l000000000046DBD4:
	branch x19 != 0x0000000000000000 l000000000046DAF8
	// succ:  l000000000046DBD8 l000000000046DAF8
l000000000046DBD8:
	goto l000000000046DBA8
	// succ:  l000000000046DBA8
l000000000046DBDC:
	x0 = 0x00000000004BD000
	x0 = x0 + 0x0000000000000390
	call get_working_directory (retsize: 0;)
	x19 = x0
	goto l000000000046DBCC
	// succ:  l000000000046DBCC
pwd_builtin_exit:


// colon_builtin
// Return size: 0
void colon_builtin()
colon_builtin_entry:
	// succ:  l000000000046DBF0
l000000000046DBF0:
	sp = fp
	w0 = 0x00000000
	return
	// succ:  colon_builtin_exit
colon_builtin_exit:


// false_builtin
// Return size: 0
void false_builtin()
false_builtin_entry:
	// succ:  l000000000046DBF8
l000000000046DBF8:
	sp = fp
	w0 = 0x00000001
	return
	// succ:  false_builtin_exit
false_builtin_exit:


// command_builtin
// Return size: 0
void command_builtin()
command_builtin_entry:
	// succ:  l000000000046DC64
l000000000046DC64:
	sp = fp
	sp = sp + -80
	Mem0[sp:word64] = x29
	sp = sp + 8
	Mem0[sp:word64] = x30
	x29 = x31 + 0x0000000000000000
	v8 = sp + 16
	Mem0[v8:word64] = x19
	v8 = v8 + 8
	Mem0[v8:word64] = x20
	v11 = sp + 32
	Mem0[v11:word64] = x21
	v11 = v11 + 8
	Mem0[v11:word64] = x22
	x19 = 0x00000000004BE000
	w22 = 0x00000000
	v15 = sp + 48
	Mem0[v15:word64] = x23
	v15 = v15 + 8
	Mem0[v15:word64] = x24
	Mem0[sp + 64:word64] = x25
	x20 = x0
	w21 = w22
	call reset_internal_getopt (retsize: 0;)
	x19 = x19 + 0x00000000000002F0
	// succ:  l000000000046DC94
l000000000046DC94:
	x0 = x20
	x1 = x19
	call internal_getopt (retsize: 0;)
	w31 = w0 + 0x00000001
	NZCV = cond(w31)
	branch Test(EQ,Z) l000000000046DCF8
	// succ:  l000000000046DCA8 l000000000046DCF8
l000000000046DCA8:
	w31 = w0 - 0x00000070
	NZCV = cond(w31)
	branch Test(EQ,Z) l000000000046DCE0
	// succ:  l000000000046DCB0 l000000000046DCE0
l000000000046DCB0:
	w31 = w0 - 0x00000076
	NZCV = cond(w31)
	branch Test(EQ,Z) l000000000046DE30
	// succ:  l000000000046DCB8 l000000000046DE30
l000000000046DCB8:
	w31 = w0 - 0x00000056
	NZCV = cond(w31)
	branch Test(EQ,Z) l000000000046DE28
	// succ:  l000000000046DCC0 l000000000046DE28
l000000000046DCC0:
	call builtin_usage (retsize: 0;)
	w0 = 0x00000102
	// succ:  l000000000046DCC8
l000000000046DCC8:
	v24 = sp + 16
	x19 = Mem0[v24:word64]
	v24 = v24 + 8
	x20 = Mem0[v24:word64]
	v25 = sp + 32
	x21 = Mem0[v25:word64]
	v25 = v25 + 8
	x22 = Mem0[v25:word64]
	v26 = sp + 48
	x23 = Mem0[v26:word64]
	v26 = v26 + 8
	x24 = Mem0[v26:word64]
	x25 = Mem0[sp + 64:word64]
	x29 = Mem0[sp:word64]
	sp = sp + 8
	x30 = Mem0[sp:word64]
	sp = sp + 80
	return
	// succ:  command_builtin_exit
l000000000046DCE0:
	x0 = x20
	x1 = x19
	call internal_getopt (retsize: 0;)
	w31 = w0 + 0x00000001
	NZCV = cond(w31)
	w22 = 0x00000001
	branch Test(NE,Z) l000000000046DCA8
	// succ:  l000000000046DCF8 l000000000046DCA8
l000000000046DCF8:
	x0 = 0x00000000004E3000
	x19 = Mem0[x0 + 3856:word64]
	branch x19 == 0x0000000000000000 l000000000046DF3C
	// succ:  l000000000046DD04 l000000000046DF3C
l000000000046DD04:
	branch w22 == 0x00000000 l000000000046DE4C
	// succ:  l000000000046DD08 l000000000046DE4C
l000000000046DD08:
	x0 = 0x00000000004DF000
	w0 = Mem0[x0 + 3696:word32]
	branch w0 != 0x00000000 l000000000046DEC4
	// succ:  l000000000046DD14 l000000000046DEC4
l000000000046DD14:
	x23 = 0x00000000004BE000
	x0 = x23 + 0x0000000000000318
	call begin_unwind_frame (retsize: 0;)
	x22 = 0x00000000004AA000
	x0 = x22 + 0x0000000000000210
	call get_string_value (retsize: 0;)
	x20 = x0
	x24 = 0x00000000004BE000
	branch x0 == 0x0000000000000000 l000000000046DD5C
	// succ:  l000000000046DD38 l000000000046DD5C
l000000000046DD38:
	strlen(x0)
	sp = sp + 0xFFFFFFFFFFFFFFF8
	x24 = 0x00000000004BE000
	w2 = 0x00000077
	x1 = x24 + 0x00000000000002B8
	x0 = x0 + 0x0000000000000001
	call sh_xmalloc (retsize: 0;)
	x1 = x20
	strcpy(x0, x1)
	sp = sp + 0xFFFFFFFFFFFFFFF8
	x20 = x0
	// succ:  l000000000046DD5C
l000000000046DD5C:
	x0 = 0x000000000046D000
	x1 = x20
	x0 = x0 + 0xFFFFFFFFFFFFFC00
	call add_unwind_protect (retsize: 0;)
	x1 = 0x0000000000000000
	w0 = 0x00000000
	x2 = x1
	call confstr (retsize: 0;)
	x20 = x0
	branch x0 == 0x0000000000000000 l000000000046DED8
	// succ:  l000000000046DD84 l000000000046DED8
l000000000046DD84:
	x1 = x24 + 0x00000000000002B8
	w2 = 0x000000CD
	x0 = x0 + 0x0000000000000002
	call sh_xmalloc (retsize: 0;)
	x25 = x0
	Mem0[x0:byte] = 0x00
	x2 = x20
	w0 = 0x00000000
	x1 = x25
	call confstr (retsize: 0;)
	x20 = x25
	x22 = x22 + 0x0000000000000210
	x1 = x20
	w2 = 0x00000000
	x0 = x22
	call bind_variable (retsize: 0;)
	x0 = x22
	call stupidly_hack_special_variables (retsize: 0;)
	x0 = x20
	x1 = x24 + 0x00000000000002B8
	w2 = 0x0000007D
	call sh_xfree (retsize: 0;)
	// succ:  l000000000046DDDC
l000000000046DDDC:
	branch w21 == 0x00000000 l000000000046DE5C
	// succ:  l000000000046DDE0 l000000000046DE5C
l000000000046DDE0:
	w31 = w21 - 0x00000004
	NZCV = cond(w31)
	w24 = (word32) Test(NE,Z)
	w22 = 0x00000000
	goto l000000000046DDFC
	// succ:  l000000000046DDFC
l000000000046DDF0:
	x19 = Mem0[x19:word64]
	w22 = w22 + w20
	branch x19 == 0x0000000000000000 l000000000046DE38
	// succ:  l000000000046DDFC l000000000046DE38
l000000000046DDFC:
	x2 = Mem0[x19 + 8:word64]
	w1 = w21
	x0 = Mem0[x2:word64]
	call describe_command (retsize: 0;)
	w20 = w0
	branch w0 != 0x00000000 l000000000046DDF0
	// succ:  l000000000046DE14 l000000000046DDF0
l000000000046DE14:
	branch w24 == 0x00000000 l000000000046DDF0
	// succ:  l000000000046DE18 l000000000046DDF0
l000000000046DE18:
	x1 = Mem0[x19 + 8:word64]
	x0 = Mem0[x1:word64]
	call sh_notfound (retsize: 0;)
	goto l000000000046DDF0
	// succ:  l000000000046DDF0
l000000000046DE28:
	w21 = 0x00000082
	goto l000000000046DC94
	// succ:  l000000000046DC94
l000000000046DE30:
	w21 = 0x00000004
	goto l000000000046DC94
	// succ:  l000000000046DC94
l000000000046DE38:
	x0 = x23 + 0x0000000000000318
	call run_unwind_frame (retsize: 0;)
	NZCV = cond(w22 - w31)
	w0 = (word32) Test(EQ,Z)
	goto l000000000046DCC8
	// succ:  l000000000046DCC8
l000000000046DE4C:
	x23 = 0x00000000004BE000
	x0 = x23 + 0x0000000000000318
	call begin_unwind_frame (retsize: 0;)
	goto l000000000046DDDC
	// succ:  l000000000046DDDC
l000000000046DE5C:
	call make_bare_simple_command (retsize: 0;)
	x20 = x0
	x21 = Mem0[x0 + 24:word64]
	x0 = x19
	call copy_word_list (retsize: 0;)
	Mem0[x21 + 8:word64] = x0
	x0 = Mem0[x20 + 24:word64]
	w3 = Mem0[x20 + 4:word32]
	w2 = Mem0[x0:word32]
	w1 = 0x00000830
	w3 = w3 | w1
	Mem0[x0 + 16:word64] = 0x0000000000000000
	w2 = w2 | w1
	Mem0[x20 + 4:word32] = w3
	Mem0[x0:word32] = w2
	x0 = 0x000000000042F000
	x1 = x20
	x0 = x0 + 0xFFFFFFFFFFFFFBD0
	call add_unwind_protect (retsize: 0;)
	x0 = x20
	call execute_command (retsize: 0;)
	w19 = w0
	x0 = x23 + 0x0000000000000318
	call run_unwind_frame (retsize: 0;)
	w0 = w19
	goto l000000000046DCC8
	// succ:  l000000000046DCC8
l000000000046DEC4:
	x0 = 0x00000000004AB000
	x0 = x0 + 0xFFFFFFFFFFFFFDB0
	call sh_restricted (retsize: 0;)
	w0 = 0x00000001
	goto l000000000046DCC8
	// succ:  l000000000046DCC8
l000000000046DED8:
	x1 = x24 + 0x00000000000002B8
	w2 = 0x000000D3
	x0 = 0x000000000000001E
	call sh_xmalloc (retsize: 0;)
	x2 = x0
	x0 = 0x00000000004BE000
	x0 = x0 + 0x00000000000002F8
l000000000046DF3C:
	w0 = w19
	goto l000000000046DCC8
	// succ:  l000000000046DCC8
command_builtin_exit:


// fn000000000046DF44
// Return size: 0
void fn000000000046DF44()
fn000000000046DF44_entry:
	// succ:  l000000000046DF44
l000000000046DF44:
	sp = fp
	sp = sp + -64
	Mem0[sp:word64] = x29
	sp = sp + 8
	Mem0[sp:word64] = x30
	x29 = x31 + 0x0000000000000000
	v8 = sp + 16
	Mem0[v8:word64] = x19
	v8 = v8 + 8
	Mem0[v8:word64] = x20
	Mem0[sp + 32:word64] = x21
	x19 = 0x00000000004DE000
	call get_name_for_error (retsize: 0;)
	x3 = x0
	x20 = 0x00000000004AC000
	x0 = Mem0[x19 + 1640:word64]
	w1 = 0x00000001
	x2 = x20 + 0xFFFFFFFFFFFFFFA0
	__fprintf_chk(x0, x1, x2, Mem0[sp:<unknown>])
	sp = sp + 0xFFFFFFFFFFFFFFF8
	x0 = 0x00000000004DE000
	w0 = Mem0[x0 + 1712:word32]
	branch w0 == 0x00000000 l000000000046DFC0
	// succ:  l000000000046DF80 l000000000046DFC0
l000000000046DF80:
	x0 = 0x00000000004E3000
	x3 = Mem0[x0 + 1192:word64]
	branch x3 == 0x0000000000000000 l000000000046DF94
	// succ:  l000000000046DF8C l000000000046DF94
l000000000046DF8C:
	v16 = Mem0[x3:byte]
	w0 = (word32) v16
	branch w0 != 0x00000000 l000000000046DFA4
	// succ:  l000000000046DF94 l000000000046DFA4
l000000000046DF94:
	v17 = sp + 16
	x19 = Mem0[v17:word64]
	v17 = v17 + 8
	x20 = Mem0[v17:word64]
	x21 = Mem0[sp + 32:word64]
	x29 = Mem0[sp:word64]
	sp = sp + 8
	x30 = Mem0[sp:word64]
	sp = sp + 64
	return
	// succ:  fn000000000046DF44_exit
l000000000046DFA4:
	x0 = Mem0[x19 + 1640:word64]
	x2 = x20 + 0xFFFFFFFFFFFFFFA0
	x21 = Mem0[sp + 32:word64]
	v20 = sp + 16
	x19 = Mem0[v20:word64]
	v20 = v20 + 8
	x20 = Mem0[v20:word64]
	x29 = Mem0[sp:word64]
	sp = sp + 8
	x30 = Mem0[sp:word64]
	sp = sp + 64
	w1 = 0x00000001
	__fprintf_chk(x0, x1, x2, Mem0[sp:<unknown>])
	return
	// succ:  fn000000000046DF44_exit
l000000000046DFC0:
	x1 = 0x00000000004BE000
	x1 = x1 + 0x0000000000000328
	w2 = 0x00000005
	x0 = 0x0000000000000000
	x21 = Mem0[x19 + 1640:word64]
	dcgettext(x0, x1, x2)
	sp = sp + 0xFFFFFFFFFFFFFFF8
	Mem0[x29 + 48:word64] = x0
	call executing_line_number (retsize: 0;)
	x2 = Mem0[x29 + 48:word64]
	w3 = w0
	w1 = 0x00000001
	x0 = x21
	__fprintf_chk(x0, x1, x2, Mem0[sp:<unknown>])
	sp = sp + 0xFFFFFFFFFFFFFFF8
	goto l000000000046DF80
	// succ:  l000000000046DF80
fn000000000046DF44_exit:


// builtin_error
// Return size: 0
void builtin_error()
builtin_error_entry:
	// succ:  l000000000046E01C
l000000000046E01C:
	sp = fp
	sp = sp + -320
	Mem0[sp:word64] = x29
	sp = sp + 8
	Mem0[sp:word64] = x30
	x29 = x31 + 0x0000000000000000
	v6 = sp + 16
	Mem0[v6:word64] = x19
	v6 = v6 + 8
	Mem0[v6:word64] = x20
	Mem0[x29 + 128:word128] = q0
	Mem0[x29 + 144:word128] = q1
	Mem0[x29 + 160:word128] = q2
	Mem0[x29 + 176:word128] = q3
	Mem0[x29 + 192:word128] = q4
	Mem0[x29 + 208:word128] = q5
	Mem0[x29 + 224:word128] = q6
	Mem0[x29 + 240:word128] = q7
	x20 = x0
	Mem0[x29 + 264:word64] = x1
	Mem0[x29 + 272:word64] = x2
	Mem0[x29 + 280:word64] = x3
	Mem0[x29 + 288:word64] = x4
	Mem0[x29 + 296:word64] = x5
	Mem0[x29 + 304:word64] = x6
	Mem0[x29 + 312:word64] = x7
	call fn000000000046DF44 (retsize: 0;)
	x0 = x29 + 0x0000000000000140
	Mem0[x29 + 64:word64] = x0
	Mem0[x29 + 72:word64] = x0
	x0 = x29 + 0x0000000000000100
	Mem0[x29 + 80:word64] = x0
	w0 = 0xFFFFFFC8
	Mem0[x29 + 88:word32] = w0
	w0 = 0xFFFFFF80
	Mem0[x29 + 92:word32] = w0
	x19 = 0x00000000004DE000
	v26 = x29 + 64
	x4 = Mem0[v26:word64]
	v26 = v26 + 8
	x5 = Mem0[v26:word64]
	v27 = x29 + 80
	x6 = Mem0[v27:word64]
	v27 = v27 + 8
	x7 = Mem0[v27:word64]
	x0 = Mem0[x19 + 1640:word64]
	x2 = x20
	x3 = x29 + 0x0000000000000060
	w1 = 0x00000001
	v29 = x29 + 32
	Mem0[v29:word64] = x4
	v29 = v29 + 8
	Mem0[v29:word64] = x5
	v30 = x29 + 48
	Mem0[v30:word64] = x6
	v30 = v30 + 8
	Mem0[v30:word64] = x7
	v31 = x29 + 96
	Mem0[v31:word64] = x4
	v31 = v31 + 8
	Mem0[v31:word64] = x5
	v32 = x29 + 112
	Mem0[v32:word64] = x6
	v32 = v32 + 8
	Mem0[v32:word64] = x7
	__vfprintf_chk(x0, x1, x2, x3)
	sp = sp + 0xFFFFFFFFFFFFFFF8
	x1 = Mem0[x19 + 1640:word64]
	w0 = 0x0000000A
	fputc(x0, x1)
	sp = sp + 0xFFFFFFFFFFFFFFF8
	v33 = sp + 16
	x19 = Mem0[v33:word64]
	v33 = v33 + 8
	x20 = Mem0[v33:word64]
	x29 = Mem0[sp:word64]
	sp = sp + 8
	x30 = Mem0[sp:word64]
	sp = sp + 320
	return
	// succ:  builtin_error_exit
builtin_error_exit:


// builtin_warning
// Return size: 0
void builtin_warning()
builtin_warning_entry:
	// succ:  l000000000046E0D8
l000000000046E0D8:
	sp = fp
	sp = sp + -336
	Mem0[sp:word64] = x29
	sp = sp + 8
	Mem0[sp:word64] = x30
	x29 = x31 + 0x0000000000000000
	Mem0[x29 + 144:word128] = q0
	Mem0[x29 + 160:word128] = q1
	Mem0[x29 + 176:word128] = q2
	Mem0[x29 + 192:word128] = q3
	Mem0[x29 + 208:word128] = q4
	Mem0[x29 + 224:word128] = q5
	Mem0[x29 + 240:word128] = q6
	v15 = sp + 16
	Mem0[v15:word64] = x19
	v15 = v15 + 8
	Mem0[v15:word64] = x20
	Mem0[x29 + 304:word64] = x4
	Mem0[x29 + 312:word64] = x5
	Mem0[x29 + 320:word64] = x6
	Mem0[x29 + 328:word64] = x7
	Mem0[sp + 32:word64] = x21
	Mem0[x29 + 296:word64] = x3
	x3 = x29 + 0x0000000000000100
	Mem0[x3:word128] = q7
	x20 = x0
	Mem0[x29 + 280:word64] = x1
	Mem0[x29 + 288:word64] = x2
	call fn000000000046DF44 (retsize: 0;)
	x19 = 0x00000000004DE000
	x1 = 0x00000000004AC000
	x21 = Mem0[x19 + 1640:word64]
	x1 = x1 + 0xFFFFFFFFFFFFFFD8
	w2 = 0x00000005
	x0 = 0x0000000000000000
	dcgettext(x0, x1, x2)
	sp = sp + 0xFFFFFFFFFFFFFFF8
	x2 = x0
	w1 = 0x00000001
	x0 = x21
	__fprintf_chk(x0, x1, x2, Mem0[sp:<unknown>])
	sp = sp + 0xFFFFFFFFFFFFFFF8
	x0 = x29 + 0x0000000000000150
	Mem0[x29 + 80:word64] = x0
	Mem0[x29 + 88:word64] = x0
	x0 = x29 + 0x0000000000000110
	Mem0[x29 + 96:word64] = x0
	w0 = 0xFFFFFFC8
	Mem0[x29 + 104:word32] = w0
	w0 = 0xFFFFFF80
	Mem0[x29 + 108:word32] = w0
	v29 = x29 + 80
	x4 = Mem0[v29:word64]
	v29 = v29 + 8
	x5 = Mem0[v29:word64]
	v30 = x29 + 96
	x6 = Mem0[v30:word64]
	v30 = v30 + 8
	x7 = Mem0[v30:word64]
	x0 = Mem0[x19 + 1640:word64]
	x2 = x20
	x3 = x29 + 0x0000000000000070
	w1 = 0x00000001
	v31 = x29 + 48
	Mem0[v31:word64] = x4
	v31 = v31 + 8
	Mem0[v31:word64] = x5
	v32 = x29 + 64
	Mem0[v32:word64] = x6
	v32 = v32 + 8
	Mem0[v32:word64] = x7
	v33 = x29 + 112
	Mem0[v33:word64] = x4
	v33 = v33 + 8
	Mem0[v33:word64] = x5
	v34 = x29 + 128
	Mem0[v34:word64] = x6
	v34 = v34 + 8
	Mem0[v34:word64] = x7
	__vfprintf_chk(x0, x1, x2, x3)
	sp = sp + 0xFFFFFFFFFFFFFFF8
	x1 = Mem0[x19 + 1640:word64]
	w0 = 0x0000000A
	fputc(x0, x1)
	sp = sp + 0xFFFFFFFFFFFFFFF8
	v35 = sp + 16
	x19 = Mem0[v35:word64]
	v35 = v35 + 8
	x20 = Mem0[v35:word64]
	x21 = Mem0[sp + 32:word64]
	x29 = Mem0[sp:word64]
	sp = sp + 8
	x30 = Mem0[sp:word64]
	sp = sp + 336
	return
	// succ:  builtin_warning_exit
builtin_warning_exit:


// builtin_usage
// Return size: 0
void builtin_usage()
builtin_usage_entry:
	// succ:  l000000000046E1C8
l000000000046E1C8:
	sp = fp
	sp = sp + -48
	Mem0[sp:word64] = x29
	sp = sp + 8
	Mem0[sp:word64] = x30
	x29 = x31 + 0x0000000000000000
	v8 = sp + 16
	Mem0[v8:word64] = x19
	v8 = v8 + 8
	Mem0[v8:word64] = x20
	x20 = 0x00000000004E3000
	x0 = Mem0[x20 + 1192:word64]
	Mem0[sp + 32:word64] = x21
	x19 = 0x00000000004DE000
	branch x0 == 0x0000000000000000 l000000000046E220
	// succ:  l000000000046E1E8 l000000000046E220
l000000000046E1E8:
	v12 = Mem0[x0:byte]
	w0 = (word32) v12
	x19 = 0x00000000004DE000
	branch w0 == 0x00000000 l000000000046E220
	// succ:  l000000000046E1F4 l000000000046E220
l000000000046E1F4:
	x1 = 0x00000000004BE000
	x1 = x1 + 0x0000000000000338
	w2 = 0x00000005
	x0 = 0x0000000000000000
	x21 = Mem0[x19 + 1640:word64]
	dcgettext(x0, x1, x2)
	sp = sp + 0xFFFFFFFFFFFFFFF8
	x3 = Mem0[x20 + 1192:word64]
	x2 = x0
	w1 = 0x00000001
	x0 = x21
	__fprintf_chk(x0, x1, x2, Mem0[sp:<unknown>])
	sp = sp + 0xFFFFFFFFFFFFFFF8
	// succ:  l000000000046E220
l000000000046E220:
	x0 = 0x00000000004E3000
	x0 = Mem0[x0 + 3504:word64]
	w2 = 0x00000005
	x1 = Mem0[x0 + 32:word64]
	x0 = 0x0000000000000000
	x20 = Mem0[x19 + 1640:word64]
	dcgettext(x0, x1, x2)
	sp = sp + 0xFFFFFFFFFFFFFFF8
	x2 = 0x00000000004BF000
	x3 = x0
	w1 = 0x00000001
	x0 = x20
	x2 = x2 + 0xFFFFFFFFFFFFF8A8
	__fprintf_chk(x0, x1, x2, Mem0[sp:<unknown>])
	sp = sp + 0xFFFFFFFFFFFFFFF8
	x0 = Mem0[x19 + 1640:word64]
	x21 = Mem0[sp + 32:word64]
	v18 = sp + 16
	x19 = Mem0[v18:word64]
	v18 = v18 + 8
	x20 = Mem0[v18:word64]
	x29 = Mem0[sp:word64]
	sp = sp + 8
	x30 = Mem0[sp:word64]
	sp = sp + 48
	fflush(x0)
	return
	// succ:  builtin_usage_exit
builtin_usage_exit:


// no_args
// Return size: 0
void no_args()
no_args_entry:
	// succ:  l000000000046E268
l000000000046E268:
	sp = fp
	sp = sp + -16
	Mem0[sp:word64] = x29
	sp = sp + 8
	Mem0[sp:word64] = x30
	x29 = x31 + 0x0000000000000000
	branch x0 != 0x0000000000000000 l000000000046E27C
	// succ:  l000000000046E274 l000000000046E27C
l000000000046E274:
	x29 = Mem0[sp:word64]
	sp = sp + 8
	x30 = Mem0[sp:word64]
	sp = sp + 16
	return
	// succ:  no_args_exit
l000000000046E27C:
	call fn000000000041D064 (retsize: 0;)
	// succ:  l000000000046E27C_thunk_no_options
l000000000046E27C_thunk_no_options:
	call no_options (retsize: 0;)
	return
	// succ:  no_args_exit
no_args_exit:


// no_options
// Return size: 0
void no_options()
no_options_entry:
	// succ:  l000000000046E280
l000000000046E280:
	sp = fp
	sp = sp + -32
	Mem0[sp:word64] = x29
	sp = sp + 8
	Mem0[sp:word64] = x30
	x29 = x31 + 0x0000000000000000
	Mem0[x29 + 16:word64] = x0
	call reset_internal_getopt (retsize: 0;)
	x0 = Mem0[x29 + 16:word64]
	x1 = 0x00000000004AC000
	x1 = x1 + 0x0000000000000460
	call internal_getopt (retsize: 0;)
	w31 = w0 + 0x00000001
	NZCV = cond(w31)
	w0 = 0x00000000
	branch Test(EQ,Z) l000000000046E2B4
	// succ:  l000000000046E2AC l000000000046E2B4
l000000000046E2AC:
	call builtin_usage (retsize: 0;)
	w0 = 0x00000001
	// succ:  l000000000046E2B4
l000000000046E2B4:
	x29 = Mem0[sp:word64]
	sp = sp + 8
	x30 = Mem0[sp:word64]
	sp = sp + 32
	return
	// succ:  no_options_exit
no_options_exit:


// sh_needarg
// Return size: 0
void sh_needarg()
sh_needarg_entry:
	// succ:  l000000000046E2BC
l000000000046E2BC:
	sp = fp
	sp = sp + -32
	Mem0[sp:word64] = x29
	sp = sp + 8
	Mem0[sp:word64] = x30
	x29 = x31 + 0x0000000000000000
	x1 = 0x00000000004AA000
	Mem0[sp + 16:word64] = x19
	x1 = x1 + 0x00000000000002B0
	x19 = x0
	w2 = 0x00000005
	x0 = 0x0000000000000000
	dcgettext(x0, x1, x2)
	sp = sp + 0xFFFFFFFFFFFFFFF8
	x1 = x19
	x19 = Mem0[sp + 16:word64]
	x29 = Mem0[sp:word64]
	sp = sp + 8
	x30 = Mem0[sp:word64]
	sp = sp + 32
	// succ:  l000000000046E2EC_thunk_builtin_error
l000000000046E2EC_thunk_builtin_error:
	call builtin_error (retsize: 0;)
	return
	// succ:  sh_needarg_exit
sh_needarg_exit:


// sh_neednumarg
// Return size: 0
void sh_neednumarg()
sh_neednumarg_entry:
	// succ:  l000000000046E2F0
l000000000046E2F0:
	sp = fp
	sp = sp + -32
	Mem0[sp:word64] = x29
	sp = sp + 8
	Mem0[sp:word64] = x30
	x29 = x31 + 0x0000000000000000
	x1 = 0x00000000004BE000
	Mem0[sp + 16:word64] = x19
	x1 = x1 + 0x0000000000000348
	x19 = x0
	w2 = 0x00000005
	x0 = 0x0000000000000000
	dcgettext(x0, x1, x2)
	sp = sp + 0xFFFFFFFFFFFFFFF8
	x1 = x19
	x19 = Mem0[sp + 16:word64]
	x29 = Mem0[sp:word64]
	sp = sp + 8
	x30 = Mem0[sp:word64]
	sp = sp + 32
	// succ:  l000000000046E320_thunk_builtin_error
l000000000046E320_thunk_builtin_error:
	call builtin_error (retsize: 0;)
	return
	// succ:  sh_neednumarg_exit
sh_neednumarg_exit:


// sh_notfound
// Return size: 0
void sh_notfound()
sh_notfound_entry:
	// succ:  l000000000046E324
l000000000046E324:
	sp = fp
	sp = sp + -32
	Mem0[sp:word64] = x29
	sp = sp + 8
	Mem0[sp:word64] = x30
	x29 = x31 + 0x0000000000000000
	x1 = 0x00000000004BE000
	Mem0[sp + 16:word64] = x19
	x1 = x1 + 0x0000000000000368
	x19 = x0
	w2 = 0x00000005
	x0 = 0x0000000000000000
	dcgettext(x0, x1, x2)
	sp = sp + 0xFFFFFFFFFFFFFFF8
	x1 = x19
	x19 = Mem0[sp + 16:word64]
	x29 = Mem0[sp:word64]
	sp = sp + 8
	x30 = Mem0[sp:word64]
	sp = sp + 32
	// succ:  l000000000046E354_thunk_builtin_error
l000000000046E354_thunk_builtin_error:
	call builtin_error (retsize: 0;)
	return
	// succ:  sh_notfound_exit
sh_notfound_exit:


// sh_invalidopt
// Return size: 0
void sh_invalidopt()
sh_invalidopt_entry:
	// succ:  l000000000046E358
l000000000046E358:
	sp = fp
	sp = sp + -32
	Mem0[sp:word64] = x29
	sp = sp + 8
	Mem0[sp:word64] = x30
	x29 = x31 + 0x0000000000000000
	x1 = 0x00000000004AA000
	Mem0[sp + 16:word64] = x19
	x1 = x1 + 0x00000000000002D0
	x19 = x0
	w2 = 0x00000005
	x0 = 0x0000000000000000
	dcgettext(x0, x1, x2)
	sp = sp + 0xFFFFFFFFFFFFFFF8
	x1 = x19
	x19 = Mem0[sp + 16:word64]
	x29 = Mem0[sp:word64]
	sp = sp + 8
	x30 = Mem0[sp:word64]
	sp = sp + 32
	// succ:  l000000000046E388_thunk_builtin_error
l000000000046E388_thunk_builtin_error:
	call builtin_error (retsize: 0;)
	return
	// succ:  sh_invalidopt_exit
sh_invalidopt_exit:


// sh_invalidoptname
// Return size: 0
void sh_invalidoptname()
sh_invalidoptname_entry:
	// succ:  l000000000046E38C
l000000000046E38C:
	sp = fp
	sp = sp + -32
	Mem0[sp:word64] = x29
	sp = sp + 8
	Mem0[sp:word64] = x30
	x29 = x31 + 0x0000000000000000
	x1 = 0x00000000004BE000
	Mem0[sp + 16:word64] = x19
	x1 = x1 + 0x0000000000000378
	x19 = x0
	w2 = 0x00000005
	x0 = 0x0000000000000000
	dcgettext(x0, x1, x2)
	sp = sp + 0xFFFFFFFFFFFFFFF8
	x1 = x19
	x19 = Mem0[sp + 16:word64]
	x29 = Mem0[sp:word64]
	sp = sp + 8
	x30 = Mem0[sp:word64]
	sp = sp + 32
	// succ:  l000000000046E3BC_thunk_builtin_error
l000000000046E3BC_thunk_builtin_error:
	call builtin_error (retsize: 0;)
	return
	// succ:  sh_invalidoptname_exit
sh_invalidoptname_exit:


// sh_invalidid
// Return size: 0
void sh_invalidid()
sh_invalidid_entry:
	// succ:  l000000000046E3C0
l000000000046E3C0:
	sp = fp
	sp = sp + -32
	Mem0[sp:word64] = x29
	sp = sp + 8
	Mem0[sp:word64] = x30
	x29 = x31 + 0x0000000000000000
	x1 = 0x00000000004AB000
	Mem0[sp + 16:word64] = x19
	x1 = x1 + 0xFFFFFFFFFFFFFF08
	x19 = x0
	w2 = 0x00000005
	x0 = 0x0000000000000000
	dcgettext(x0, x1, x2)
	sp = sp + 0xFFFFFFFFFFFFFFF8
	x1 = x19
	x19 = Mem0[sp + 16:word64]
	x29 = Mem0[sp:word64]
	sp = sp + 8
	x30 = Mem0[sp:word64]
	sp = sp + 32
	// succ:  l000000000046E3F0_thunk_builtin_error
l000000000046E3F0_thunk_builtin_error:
	call builtin_error (retsize: 0;)
	return
	// succ:  sh_invalidid_exit
sh_invalidid_exit:


// sh_invalidnum
// Return size: 0
void sh_invalidnum()
sh_invalidnum_entry:
	// succ:  l000000000046E3F4
l000000000046E3F4:
	sp = fp
	sp = sp + -32
	Mem0[sp:word64] = x29
	sp = sp + 8
	Mem0[sp:word64] = x30
	x29 = x31 + 0x0000000000000000
	Mem0[sp + 16:word64] = x19
	x19 = x0
	v9 = Mem0[x0:byte]
	w0 = (word32) v9
	w31 = w0 - 0x00000030
	NZCV = cond(w31)
	branch Test(EQ,Z) l000000000046E440
	// succ:  l000000000046E410 l000000000046E440
l000000000046E410:
	x1 = 0x00000000004AD000
	w2 = 0x00000005
	x0 = 0x0000000000000000
	x1 = x1 + 0x0000000000000100
	dcgettext(x0, x1, x2)
	sp = sp + 0xFFFFFFFFFFFFFFF8
	x2 = x0
	x1 = x19
	x0 = 0x00000000004BE000
	x19 = Mem0[sp + 16:word64]
	x29 = Mem0[sp:word64]
	sp = sp + 8
	x30 = Mem0[sp:word64]
	sp = sp + 32
	x0 = x0 + 0x00000000000007D0
	// succ:  l000000000046E43C_thunk_builtin_error
l000000000046E43C_thunk_builtin_error:
	call builtin_error (retsize: 0;)
	return
	// succ:  sh_invalidnum_exit
l000000000046E440:
	__ctype_b_loc()
	sp = sp + 0xFFFFFFFFFFFFFFF8
	v17 = Mem0[x19 + 1:byte]
	w1 = (word32) v17
	x2 = Mem0[x0:word64]
sh_invalidnum_exit:


// sh_invalidsig
// Return size: 0
void sh_invalidsig()
sh_invalidsig_entry:
	// succ:  l000000000046E498
l000000000046E498:
	sp = fp
	sp = sp + -32
	Mem0[sp:word64] = x29
	sp = sp + 8
	Mem0[sp:word64] = x30
	x29 = x31 + 0x0000000000000000
	x1 = 0x00000000004BE000
	Mem0[sp + 16:word64] = x19
	x1 = x1 + 0x00000000000003C0
	x19 = x0
	w2 = 0x00000005
	x0 = 0x0000000000000000
	dcgettext(x0, x1, x2)
	sp = sp + 0xFFFFFFFFFFFFFFF8
	x1 = x19
	x19 = Mem0[sp + 16:word64]
	x29 = Mem0[sp:word64]
	sp = sp + 8
	x30 = Mem0[sp:word64]
	sp = sp + 32
	// succ:  l000000000046E4C8_thunk_builtin_error
l000000000046E4C8_thunk_builtin_error:
	call builtin_error (retsize: 0;)
	return
	// succ:  sh_invalidsig_exit
sh_invalidsig_exit:


// sh_badpid
// Return size: 0
void sh_badpid()
sh_badpid_entry:
	// succ:  l000000000046E4CC
l000000000046E4CC:
	sp = fp
	sp = sp + -32
	Mem0[sp:word64] = x29
	sp = sp + 8
	Mem0[sp:word64] = x30
	x29 = x31 + 0x0000000000000000
	x1 = 0x00000000004BE000
	Mem0[sp + 16:word64] = x19
	x1 = x1 + 0x00000000000003E8
	x19 = x0
	w2 = 0x00000005
	x0 = 0x0000000000000000
	dcgettext(x0, x1, x2)
	sp = sp + 0xFFFFFFFFFFFFFFF8
	x1 = x19
	x19 = Mem0[sp + 16:word64]
	x29 = Mem0[sp:word64]
	sp = sp + 8
	x30 = Mem0[sp:word64]
	sp = sp + 32
	// succ:  l000000000046E4FC_thunk_builtin_error
l000000000046E4FC_thunk_builtin_error:
	call builtin_error (retsize: 0;)
	return
	// succ:  sh_badpid_exit
sh_badpid_exit:


// sh_readonly
// Return size: 0
void sh_readonly()
sh_readonly_entry:
	// succ:  l000000000046E500
l000000000046E500:
	sp = fp
	sp = sp + -32
	Mem0[sp:word64] = x29
	sp = sp + 8
	Mem0[sp:word64] = x30
	x29 = x31 + 0x0000000000000000
	x1 = 0x00000000004AD000
	Mem0[sp + 16:word64] = x19
	x1 = x1 + 0x0000000000000028
	x19 = x0
	w2 = 0x00000005
	x0 = 0x0000000000000000
	dcgettext(x0, x1, x2)
	sp = sp + 0xFFFFFFFFFFFFFFF8
	x1 = x19
	x19 = Mem0[sp + 16:word64]
	x29 = Mem0[sp:word64]
	sp = sp + 8
	x30 = Mem0[sp:word64]
	sp = sp + 32
	// succ:  l000000000046E530_thunk_builtin_error
l000000000046E530_thunk_builtin_error:
	call builtin_error (retsize: 0;)
	return
	// succ:  sh_readonly_exit
sh_readonly_exit:


// sh_erange
// Return size: 0
void sh_erange()
sh_erange_entry:
	// succ:  l000000000046E534
l000000000046E534:
	sp = fp
	sp = sp + -48
	Mem0[sp:word64] = x29
	sp = sp + 8
	Mem0[sp:word64] = x30
	x29 = x31 + 0x0000000000000000
	v8 = sp + 16
	Mem0[v8:word64] = x19
	v8 = v8 + 8
	Mem0[v8:word64] = x20
	Mem0[sp + 32:word64] = x21
	x19 = x0
	x20 = x1
	branch x0 == 0x0000000000000000 l000000000046E588
	// succ:  l000000000046E550 l000000000046E588
l000000000046E550:
	x1 = 0x00000000004BE000
	w2 = 0x00000005
	x0 = 0x0000000000000000
	x1 = x1 + 0x0000000000000410
	dcgettext(x0, x1, x2)
	sp = sp + 0xFFFFFFFFFFFFFFF8
	x21 = x0
	x2 = x20
	branch x20 == 0x0000000000000000 l000000000046E5B8
	// succ:  l000000000046E570 l000000000046E5B8
l000000000046E570:
	x0 = x21
	x1 = x19
	x21 = Mem0[sp + 32:word64]
	v14 = sp + 16
	x19 = Mem0[v14:word64]
	v14 = v14 + 8
	x20 = Mem0[v14:word64]
	x29 = Mem0[sp:word64]
	sp = sp + 8
	x30 = Mem0[sp:word64]
	sp = sp + 48
	// succ:  l000000000046E584_thunk_builtin_error
l000000000046E584_thunk_builtin_error:
	call builtin_error (retsize: 0;)
	return
	// succ:  sh_erange_exit
l000000000046E588:
	x1 = 0x00000000004BE000
	x1 = x1 + 0x0000000000000438
	w2 = 0x00000005
	dcgettext(x0, x1, x2)
	sp = sp + 0xFFFFFFFFFFFFFFF8
	x19 = x0
	x1 = x20
	branch x20 == 0x0000000000000000 l000000000046E5D4
	// succ:  l000000000046E5A4 l000000000046E5D4
l000000000046E5A4:
	x0 = x19
	x21 = Mem0[sp + 32:word64]
	v15 = sp + 16
	x19 = Mem0[v15:word64]
	v15 = v15 + 8
	x20 = Mem0[v15:word64]
	x29 = Mem0[sp:word64]
	sp = sp + 8
	x30 = Mem0[sp:word64]
	sp = sp + 48
	// succ:  l000000000046E5B4_thunk_builtin_error
l000000000046E5B4_thunk_builtin_error:
	call builtin_error (retsize: 0;)
	return
	// succ:  sh_erange_exit
l000000000046E5B8:
	x1 = 0x00000000004BE000
	w2 = 0x00000005
	x0 = x20
	x1 = x1 + 0x0000000000000428
	dcgettext(x0, x1, x2)
	sp = sp + 0xFFFFFFFFFFFFFFF8
	x2 = x0
	goto l000000000046E570
	// succ:  l000000000046E570
l000000000046E5D4:
	x1 = 0x00000000004BE000
	x1 = x1 + 0x0000000000000428
	x0 = x20
	w2 = 0x00000005
	dcgettext(x0, x1, x2)
	sp = sp + 0xFFFFFFFFFFFFFFF8
	x1 = x0
	goto l000000000046E5A4
	// succ:  l000000000046E5A4
sh_erange_exit:


// sh_badjob
// Return size: 0
void sh_badjob()
sh_badjob_entry:
	// succ:  l000000000046E5F0
l000000000046E5F0:
	sp = fp
	sp = sp + -32
	Mem0[sp:word64] = x29
	sp = sp + 8
	Mem0[sp:word64] = x30
	x29 = x31 + 0x0000000000000000
	x1 = 0x00000000004BE000
	Mem0[sp + 16:word64] = x19
	x1 = x1 + 0x0000000000000448
	x19 = x0
	w2 = 0x00000005
	x0 = 0x0000000000000000
	dcgettext(x0, x1, x2)
	sp = sp + 0xFFFFFFFFFFFFFFF8
	x1 = x19
	x19 = Mem0[sp + 16:word64]
	x29 = Mem0[sp:word64]
	sp = sp + 8
	x30 = Mem0[sp:word64]
	sp = sp + 32
	// succ:  l000000000046E620_thunk_builtin_error
l000000000046E620_thunk_builtin_error:
	call builtin_error (retsize: 0;)
	return
	// succ:  sh_badjob_exit
sh_badjob_exit:


// sh_nojobs
// Return size: 0
void sh_nojobs()
sh_nojobs_entry:
	// succ:  l000000000046E624
l000000000046E624:
	sp = fp
	sp = sp + -32
	Mem0[sp:word64] = x29
	sp = sp + 8
	Mem0[sp:word64] = x30
	x29 = x31 + 0x0000000000000000
	Mem0[sp + 16:word64] = x19
	x19 = x0
	branch x0 == 0x0000000000000000 l000000000046E65C
	// succ:  l000000000046E638 l000000000046E65C
l000000000046E638:
	x1 = 0x00000000004BE000
	x1 = x1 + 0x0000000000000458
	w2 = 0x00000005
	x0 = 0x0000000000000000
	dcgettext(x0, x1, x2)
	sp = sp + 0xFFFFFFFFFFFFFFF8
	x1 = x19
	x19 = Mem0[sp + 16:word64]
	x29 = Mem0[sp:word64]
	sp = sp + 8
	x30 = Mem0[sp:word64]
	sp = sp + 32
	// succ:  l000000000046E658_thunk_builtin_error
l000000000046E658_thunk_builtin_error:
	call builtin_error (retsize: 0;)
	return
	// succ:  sh_nojobs_exit
l000000000046E65C:
	x1 = 0x00000000004BE000
	x1 = x1 + 0x0000000000000470
	w2 = 0x00000005
	dcgettext(x0, x1, x2)
	sp = sp + 0xFFFFFFFFFFFFFFF8
	x19 = Mem0[sp + 16:word64]
	x29 = Mem0[sp:word64]
	sp = sp + 8
	x30 = Mem0[sp:word64]
	sp = sp + 32
	// succ:  l000000000046E674_thunk_builtin_error
l000000000046E674_thunk_builtin_error:
	call builtin_error (retsize: 0;)
	return
	// succ:  sh_nojobs_exit
sh_nojobs_exit:


// sh_restricted
// Return size: 0
void sh_restricted()
sh_restricted_entry:
	// succ:  l000000000046E678
l000000000046E678:
	sp = fp
	sp = sp + -32
	Mem0[sp:word64] = x29
	sp = sp + 8
	Mem0[sp:word64] = x30
	x29 = x31 + 0x0000000000000000
	Mem0[sp + 16:word64] = x19
	x19 = x0
	branch x0 == 0x0000000000000000 l000000000046E6B0
	// succ:  l000000000046E68C l000000000046E6B0
l000000000046E68C:
	x1 = 0x00000000004BE000
	x1 = x1 + 0x0000000000000480
	w2 = 0x00000005
	x0 = 0x0000000000000000
	dcgettext(x0, x1, x2)
	sp = sp + 0xFFFFFFFFFFFFFFF8
	x1 = x19
	x19 = Mem0[sp + 16:word64]
	x29 = Mem0[sp:word64]
	sp = sp + 8
	x30 = Mem0[sp:word64]
	sp = sp + 32
	// succ:  l000000000046E6AC_thunk_builtin_error
l000000000046E6AC_thunk_builtin_error:
	call builtin_error (retsize: 0;)
	return
	// succ:  sh_restricted_exit
l000000000046E6B0:
	x1 = 0x00000000004AA000
	x1 = x1 + 0x00000000000004B8
	w2 = 0x00000005
	dcgettext(x0, x1, x2)
	sp = sp + 0xFFFFFFFFFFFFFFF8
	x19 = Mem0[sp + 16:word64]
	x29 = Mem0[sp:word64]
	sp = sp + 8
	x30 = Mem0[sp:word64]
	sp = sp + 32
	// succ:  l000000000046E6C8_thunk_builtin_error
l000000000046E6C8_thunk_builtin_error:
	call builtin_error (retsize: 0;)
	return
	// succ:  sh_restricted_exit
sh_restricted_exit:


// sh_notbuiltin
// Return size: 0
void sh_notbuiltin()
sh_notbuiltin_entry:
	// succ:  l000000000046E6CC
l000000000046E6CC:
	sp = fp
	sp = sp + -32
	Mem0[sp:word64] = x29
	sp = sp + 8
	Mem0[sp:word64] = x30
	x29 = x31 + 0x0000000000000000
	x1 = 0x00000000004BE000
	Mem0[sp + 16:word64] = x19
	x1 = x1 + 0x0000000000000490
	x19 = x0
	w2 = 0x00000005
	x0 = 0x0000000000000000
	dcgettext(x0, x1, x2)
	sp = sp + 0xFFFFFFFFFFFFFFF8
	x1 = x19
	x19 = Mem0[sp + 16:word64]
	x29 = Mem0[sp:word64]
	sp = sp + 8
	x30 = Mem0[sp:word64]
	sp = sp + 32
	// succ:  l000000000046E6FC_thunk_builtin_error
l000000000046E6FC_thunk_builtin_error:
	call builtin_error (retsize: 0;)
	return
	// succ:  sh_notbuiltin_exit
sh_notbuiltin_exit:


// sh_wrerror
// Return size: 0
void sh_wrerror()
sh_wrerror_entry:
	// succ:  l000000000046E700
l000000000046E700:
	sp = fp
	sp = sp + -32
	Mem0[sp:word64] = x29
	sp = sp + 8
	Mem0[sp:word64] = x30
	x29 = x31 + 0x0000000000000000
	x1 = 0x00000000004BE000
	x1 = x1 + 0x00000000000004A8
	w2 = 0x00000005
	x0 = 0x0000000000000000
	Mem0[sp + 16:word64] = x19
	dcgettext(x0, x1, x2)
	sp = sp + 0xFFFFFFFFFFFFFFF8
	x19 = x0
	__errno_location()
	sp = sp + 0xFFFFFFFFFFFFFFF8
	w0 = Mem0[x0:word32]
	strerror(x0)
	sp = sp + 0xFFFFFFFFFFFFFFF8
	x1 = x0
	x0 = x19
	x19 = Mem0[sp + 16:word64]
	x29 = Mem0[sp:word64]
	sp = sp + 8
	x30 = Mem0[sp:word64]
	sp = sp + 32
	// succ:  l000000000046E740_thunk_builtin_error
l000000000046E740_thunk_builtin_error:
	call builtin_error (retsize: 0;)
	return
	// succ:  sh_wrerror_exit
sh_wrerror_exit:


// sh_ttyerror
// Return size: 0
void sh_ttyerror()
sh_ttyerror_entry:
	// succ:  l000000000046E744
l000000000046E744:
	sp = fp
	sp = sp + -32
	Mem0[sp:word64] = x29
	sp = sp + 8
	Mem0[sp:word64] = x30
	x29 = x31 + 0x0000000000000000
	Mem0[sp + 16:word64] = x19
	branch w0 != 0x00000000 l000000000046E78C
	// succ:  l000000000046E754 l000000000046E78C
l000000000046E754:
	x1 = 0x00000000004BE000
	x1 = x1 + 0x00000000000004E0
	// succ:  l000000000046E75C
l000000000046E75C:
	w2 = 0x00000005
	x0 = 0x0000000000000000
	dcgettext(x0, x1, x2)
	sp = sp + 0xFFFFFFFFFFFFFFF8
	x19 = x0
	__errno_location()
	sp = sp + 0xFFFFFFFFFFFFFFF8
	w0 = Mem0[x0:word32]
	strerror(x0)
	sp = sp + 0xFFFFFFFFFFFFFFF8
	x1 = x0
	x0 = x19
	x19 = Mem0[sp + 16:word64]
	x29 = Mem0[sp:word64]
	sp = sp + 8
	x30 = Mem0[sp:word64]
	sp = sp + 32
	// succ:  l000000000046E788_thunk_builtin_error
l000000000046E788_thunk_builtin_error:
	call builtin_error (retsize: 0;)
	return
	// succ:  sh_ttyerror_exit
l000000000046E78C:
	x1 = 0x00000000004BE000
	x1 = x1 + 0x00000000000004B8
	goto l000000000046E75C
	// succ:  l000000000046E75C
sh_ttyerror_exit:


// sh_chkwrite
// Return size: 0
void sh_chkwrite()
sh_chkwrite_entry:
	// succ:  l000000000046E798
l000000000046E798:
	sp = fp
	sp = sp + -32
	Mem0[sp:word64] = x29
	sp = sp + 8
	Mem0[sp:word64] = x30
	x29 = x31 + 0x0000000000000000
	v6 = sp + 16
	Mem0[v6:word64] = x19
	v6 = v6 + 8
	Mem0[v6:word64] = x20
	x19 = 0x00000000004DE000
	w20 = w0
	x0 = Mem0[x19 + 1648:word64]
	fflush(x0)
	sp = sp + 0xFFFFFFFFFFFFFFF8
	x0 = Mem0[x19 + 1648:word64]
	ferror(x0)
	sp = sp + 0xFFFFFFFFFFFFFFF8
	w1 = w20
	branch w0 == 0x00000000 l000000000046E7DC
	// succ:  l000000000046E7C4 l000000000046E7DC
l000000000046E7C4:
	call sh_wrerror (retsize: 0;)
	x0 = Mem0[x19 + 1648:word64]
	call fpurge (retsize: 0;)
	x0 = Mem0[x19 + 1648:word64]
	call clearerr (retsize: 0;)
	w1 = 0x00000001
	// succ:  l000000000046E7DC
l000000000046E7DC:
	w0 = w1
	v13 = sp + 16
	x19 = Mem0[v13:word64]
	v13 = v13 + 8
	x20 = Mem0[v13:word64]
	x29 = Mem0[sp:word64]
	sp = sp + 8
	x30 = Mem0[sp:word64]
	sp = sp + 32
	return
	// succ:  sh_chkwrite_exit
sh_chkwrite_exit:


// make_builtin_argv
// Return size: 0
void make_builtin_argv()
make_builtin_argv_entry:
	// succ:  l000000000046E7EC
l000000000046E7EC:
	sp = fp
	sp = sp + -16
	Mem0[sp:word64] = x29
	sp = sp + 8
	Mem0[sp:word64] = x30
	x29 = x31 + 0x0000000000000000
	x3 = x1
	w2 = 0x00000001
	w1 = 0x00000000
	call strvec_from_word_list (retsize: 0;)
	x1 = 0x00000000004E3000
	x1 = Mem0[x1 + 1192:word64]
	Mem0[x0:word64] = x1
	x29 = Mem0[sp:word64]
	sp = sp + 8
	x30 = Mem0[sp:word64]
	sp = sp + 16
	return
	// succ:  make_builtin_argv_exit
make_builtin_argv_exit:


// dollar_vars_changed
// Return size: 0
void dollar_vars_changed()
dollar_vars_changed_entry:
	// succ:  l000000000046E818
l000000000046E818:
	sp = fp
	x0 = 0x00000000004E1000
	x0 = x0 + 0x0000000000000690
	w0 = Mem0[x0:word32]
	return
	// succ:  dollar_vars_changed_exit
dollar_vars_changed_exit:


// set_dollar_vars_unchanged
// Return size: 0
void set_dollar_vars_unchanged()
set_dollar_vars_unchanged_entry:
	// succ:  l000000000046E828
l000000000046E828:
	sp = fp
	x0 = 0x00000000004E1000
	x0 = x0 + 0x0000000000000690
	Mem0[x0:word32] = 0x00000000
	return
	// succ:  set_dollar_vars_unchanged_exit
set_dollar_vars_unchanged_exit:


// set_dollar_vars_changed
// Return size: 0
void set_dollar_vars_changed()
set_dollar_vars_changed_entry:
	// succ:  l000000000046E838
l000000000046E838:
	sp = fp
	x0 = 0x00000000004DF000
	w0 = Mem0[x0 + 3168:word32]
	branch w0 != 0x00000000 l000000000046E870
	// succ:  l000000000046E844 l000000000046E870
l000000000046E844:
	x0 = 0x00000000004E1000
	x0 = x0 + 0x0000000000000690
	x1 = Mem0[x0 + 8:word64]
	x2 = 0x0000000000478000
	x2 = x2 + 0x00000000000001AC
	x31 = x1 - x2
	NZCV = cond(x31)
	w1 = Mem0[x0:word32]
	branch Test(EQ,Z) l000000000046E888
	// succ:  l000000000046E864 l000000000046E888
l000000000046E864:
	w1 = w1 | 0x00000001
	Mem0[x0:word32] = w1
	return
	// succ:  set_dollar_vars_changed_exit
l000000000046E870:
	x0 = 0x00000000004E1000
	x0 = x0 + 0x0000000000000690
	w1 = Mem0[x0:word32]
	w1 = w1 | 0x00000002
	Mem0[x0:word32] = w1
	return
	// succ:  set_dollar_vars_changed_exit
l000000000046E888:
	w1 = w1 | 0x00000004
	Mem0[x0:word32] = w1
	return
	// succ:  set_dollar_vars_changed_exit
set_dollar_vars_changed_exit:


// remember_args
// Return size: 0
void remember_args()
remember_args_entry:
	// succ:  l000000000046E894
l000000000046E894:
	sp = fp
	sp = sp + -64
	Mem0[sp:word64] = x29
	sp = sp + 8
	Mem0[sp:word64] = x30
	x29 = x31 + 0x0000000000000000
	v8 = sp + 16
	Mem0[v8:word64] = x19
	v8 = v8 + 8
	Mem0[v8:word64] = x20
	x20 = 0x00000000004E3000
	v11 = sp + 32
	Mem0[v11:word64] = x21
	v11 = v11 + 8
	Mem0[v11:word64] = x22
	NZCV = cond(w1 - w31)
	x20 = x20 + 0x00000000000004C8
	x22 = 0x00000000004BE000
	v17 = sp + 48
	Mem0[v17:word64] = x23
	v17 = v17 + 8
	Mem0[v17:word64] = x24
	x19 = x0
	w24 = (word32) Test(NE,Z)
	x23 = x20 + 0x0000000000000048
	x22 = x22 + 0x0000000000000508
	goto l000000000046E8E4
	// succ:  l000000000046E8E4
l000000000046E8CC:
	branch w24 != 0x00000000 l000000000046E8F8
	// succ:  l000000000046E8D0 l000000000046E8F8
l000000000046E8D0:
	x20 = x20 + 0x0000000000000008
	x31 = x20 - x23
	NZCV = cond(x31)
	w0 = 0x00000000
	x19 = 0x0000000000000000
	branch Test(EQ,Z) l000000000046E954
	// succ:  l000000000046E8E4 l000000000046E954
l000000000046E8E4:
	x31 = x19 - x31
	NZCV = cond(x31)
	w21 = (word32) Test(NE,Z)
	x1 = x22
	w2 = 0x00000180
	branch w21 == 0x00000000 l000000000046E8CC
	// succ:  l000000000046E8F8 l000000000046E8CC
l000000000046E8F8:
	x3 = Mem0[x20 + 8:word64]
	x0 = x3
	branch x3 == 0x0000000000000000 l000000000046E90C
	// succ:  l000000000046E904 l000000000046E90C
l000000000046E904:
	call sh_xfree (retsize: 0;)
	Mem0[x20 + 8:word64] = 0x0000000000000000
	// succ:  l000000000046E90C
l000000000046E90C:
	branch w21 == 0x00000000 l000000000046E8D0
	// succ:  l000000000046E910 l000000000046E8D0
l000000000046E910:
	x0 = Mem0[x19 + 8:word64]
	x20 = x20 + 0x0000000000000008
	x0 = Mem0[x0:word64]
	strlen(x0)
	sp = sp + 0xFFFFFFFFFFFFFFF8
	x1 = x22
	w2 = 0x00000186
	x0 = x0 + 0x0000000000000001
	call sh_xmalloc (retsize: 0;)
	x1 = Mem0[x19 + 8:word64]
	x1 = Mem0[x1:word64]
	strcpy(x0, x1)
	sp = sp + 0xFFFFFFFFFFFFFFF8
	Mem0[x20:word64] = x0
	x19 = Mem0[x19:word64]
	x31 = x19 - x31
	NZCV = cond(x31)
	w0 = (word32) Test(NE,Z)
	x31 = x20 - x23
	NZCV = cond(x31)
	branch Test(NE,Z) l000000000046E8E4
	// succ:  l000000000046E954 l000000000046E8E4
l000000000046E954:
	branch w0 != 0x00000000 l000000000046E970
	// succ:  l000000000046E958 l000000000046E970
l000000000046E958:
	branch w24 != 0x00000000 l000000000046E970
	// succ:  l000000000046E95C l000000000046E970
l000000000046E95C:
	v26 = sp + 16
	x19 = Mem0[v26:word64]
	v26 = v26 + 8
	x20 = Mem0[v26:word64]
	v27 = sp + 32
	x21 = Mem0[v27:word64]
	v27 = v27 + 8
	x22 = Mem0[v27:word64]
	v28 = sp + 48
	x23 = Mem0[v28:word64]
	v28 = v28 + 8
	x24 = Mem0[v28:word64]
	x29 = Mem0[sp:word64]
	sp = sp + 8
	x30 = Mem0[sp:word64]
	sp = sp + 64
	return
	// succ:  remember_args_exit
l000000000046E970:
	x20 = 0x00000000004DF000
	x0 = Mem0[x20 + 3288:word64]
	call dispose_words (retsize: 0;)
	x0 = x19
	call copy_word_list (retsize: 0;)
	Mem0[x20 + 3288:word64] = x0
	branch w24 == 0x00000000 l000000000046E95C
	// succ:  l000000000046E98C l000000000046E95C
l000000000046E98C:
	v29 = sp + 16
	x19 = Mem0[v29:word64]
	v29 = v29 + 8
	x20 = Mem0[v29:word64]
	v30 = sp + 32
	x21 = Mem0[v30:word64]
	v30 = v30 + 8
	x22 = Mem0[v30:word64]
	v31 = sp + 48
	x23 = Mem0[v31:word64]
	v31 = v31 + 8
	x24 = Mem0[v31:word64]
	x29 = Mem0[sp:word64]
	sp = sp + 8
	x30 = Mem0[sp:word64]
	sp = sp + 64
	// succ:  l000000000046E99C_thunk_set_dollar_vars_changed
l000000000046E99C_thunk_set_dollar_vars_changed:
	call set_dollar_vars_changed (retsize: 0;)
	return
	// succ:  remember_args_exit
remember_args_exit:


// get_numeric_arg
// Return size: 0
void get_numeric_arg()
get_numeric_arg_entry:
	// succ:  l000000000046E9A0
l000000000046E9A0:
	sp = fp
	sp = sp + -32
	Mem0[sp:word64] = x29
	sp = sp + 8
	Mem0[sp:word64] = x30
	x29 = x31 + 0x0000000000000000
	v8 = sp + 16
	Mem0[v8:word64] = x19
	v8 = v8 + 8
	Mem0[v8:word64] = x20
	x19 = x0
	w20 = w1
	branch x2 == 0x0000000000000000 l000000000046E9C0
	// succ:  l000000000046E9B8 l000000000046E9C0
l000000000046E9B8:
	x0 = 0x0000000000000001
	Mem0[x2:word64] = x0
	// succ:  l000000000046E9C0
l000000000046E9C0:
	branch x19 == 0x0000000000000000 l000000000046EA10
	// succ:  l000000000046E9C4 l000000000046EA10
l000000000046E9C4:
	x3 = Mem0[x19 + 8:word64]
	x0 = Mem0[x3:word64]
	branch x3 == 0x0000000000000000 l000000000046EA44
	// succ:  l000000000046E9D0 l000000000046EA44
l000000000046E9D0:
	v14 = Mem0[x0:byte]
	w1 = (word32) v14
	w31 = w1 - 0x0000002D
	NZCV = cond(w31)
	branch Test(EQ,Z) l000000000046EA20
	// succ:  l000000000046E9DC l000000000046EA20
l000000000046E9DC:
	x1 = x2
	call legal_number (retsize: 0;)
	branch w0 != 0x00000000 l000000000046EA08
	// succ:  l000000000046E9E8 l000000000046EA08
l000000000046E9E8:
	x0 = Mem0[x19 + 8:word64]
	x0 = Mem0[x0:word64]
	branch x0 == 0x0000000000000000 l000000000046EA48
	// succ:  l000000000046E9F4 l000000000046EA48
l000000000046E9F4:
	call sh_neednumarg (retsize: 0;)
	branch w20 == 0x00000000 l000000000046EA58
	// succ:  l000000000046E9FC l000000000046EA58
l000000000046E9FC:
	w31 = w20 - 0x00000001
	NZCV = cond(w31)
	branch Test(NE,Z) l000000000046EA6C
	// succ:  l000000000046EA04 l000000000046EA6C
l000000000046EA04:
	call throw_to_top_level (retsize: 0;)
	// succ:  l000000000046EA08
l000000000046EA08:
	x0 = Mem0[x19:word64]
	branch x0 != 0x0000000000000000 l000000000046EA68
	// succ:  l000000000046EA10 l000000000046EA68
l000000000046EA10:
	w0 = 0x00000001
	v20 = sp + 16
	x19 = Mem0[v20:word64]
	v20 = v20 + 8
	x20 = Mem0[v20:word64]
	x29 = Mem0[sp:word64]
	sp = sp + 8
	x30 = Mem0[sp:word64]
	sp = sp + 32
	return
	// succ:  get_numeric_arg_exit
l000000000046EA20:
	v22 = Mem0[x0 + 2:byte]
	w1 = (word32) v22
	branch w1 != 0x00000000 l000000000046E9DC
	// succ:  l000000000046EA28 l000000000046E9DC
l000000000046EA28:
	v23 = Mem0[x0 + 1:byte]
	w1 = (word32) v23
	w31 = w1 - 0x0000002D
	NZCV = cond(w31)
	branch Test(NE,Z) l000000000046E9DC
	// succ:  l000000000046EA34 l000000000046E9DC
l000000000046EA34:
	x19 = Mem0[x19:word64]
	branch x19 == 0x0000000000000000 l000000000046EA10
	// succ:  l000000000046EA3C l000000000046EA10
l000000000046EA3C:
	x0 = Mem0[x19 + 8:word64]
	x0 = Mem0[x0:word64]
	// succ:  l000000000046EA44
l000000000046EA44:
	branch x0 != 0x0000000000000000 l000000000046E9DC
	// succ:  l000000000046EA48 l000000000046E9DC
l000000000046EA48:
	x0 = 0x00000000004BE000
	x0 = x0 + 0x0000000000000528
	call sh_neednumarg (retsize: 0;)
	branch w20 != 0x00000000 l000000000046E9FC
	// succ:  l000000000046EA58 l000000000046E9FC
l000000000046EA58:
	w0 = w20
	v21 = sp + 16
	x19 = Mem0[v21:word64]
	v21 = v21 + 8
	x20 = Mem0[v21:word64]
	x29 = Mem0[sp:word64]
	sp = sp + 8
	x30 = Mem0[sp:word64]
	sp = sp + 32
	return
	// succ:  get_numeric_arg_exit
l000000000046EA68:
	call fn000000000041D064 (retsize: 0;)
	// succ:  l000000000046EA6C
l000000000046EA6C:
	call top_level_cleanup (retsize: 0;)
	w0 = 0x00000002
	call jump_to_top_level (retsize: 0;)
	// succ:  l000000000046EA74_thunk_get_exitstat
l000000000046EA74_thunk_get_exitstat:
	call get_exitstat (retsize: 0;)
	return
	// succ:  get_numeric_arg_exit
get_numeric_arg_exit:


// get_exitstat
// Return size: 0
void get_exitstat()
get_exitstat_entry:
	// succ:  l000000000046EA78
l000000000046EA78:
	sp = fp
	sp = sp + -48
	Mem0[sp:word64] = x29
	sp = sp + 8
	Mem0[sp:word64] = x30
	x29 = x31 + 0x0000000000000000
	Mem0[sp + 16:word64] = x19
	x19 = x0
	branch x0 == 0x0000000000000000 l000000000046EB28
	// succ:  l000000000046EA8C l000000000046EB28
l000000000046EA8C:
	x0 = Mem0[x0 + 8:word64]
	branch x0 == 0x0000000000000000 l000000000046EB1C
	// succ:  l000000000046EA94 l000000000046EB1C
l000000000046EA94:
	x0 = Mem0[x0:word64]
	v9 = Mem0[x0:byte]
	w1 = (word32) v9
	w31 = w1 - 0x0000002D
	NZCV = cond(w31)
	branch Test(EQ,Z) l000000000046EAD0
	// succ:  l000000000046EAA4 l000000000046EAD0
l000000000046EAA4:
	x1 = x29 + 0x0000000000000020
	call legal_number (retsize: 0;)
	branch w0 != 0x00000000 l000000000046EB04
	// succ:  l000000000046EAB0 l000000000046EB04
l000000000046EAB0:
	x0 = Mem0[x19 + 8:word64]
	x0 = Mem0[x0:word64]
	branch x0 == 0x0000000000000000 l000000000046EAF8
	// succ:  l000000000046EABC l000000000046EAF8
l000000000046EABC:
	call sh_neednumarg (retsize: 0;)
	w0 = 0x000000FF
	x19 = Mem0[sp + 16:word64]
	x29 = Mem0[sp:word64]
	sp = sp + 8
	x30 = Mem0[sp:word64]
	sp = sp + 48
	return
	// succ:  get_exitstat_exit
l000000000046EAD0:
	v16 = Mem0[x0 + 2:byte]
	w1 = (word32) v16
	branch w1 != 0x00000000 l000000000046EAA4
	// succ:  l000000000046EAD8 l000000000046EAA4
l000000000046EAD8:
	v17 = Mem0[x0 + 1:byte]
	w1 = (word32) v17
	w31 = w1 - 0x0000002D
	NZCV = cond(w31)
	branch Test(NE,Z) l000000000046EAA4
	// succ:  l000000000046EAE4 l000000000046EAA4
l000000000046EAE4:
	x19 = Mem0[x19:word64]
	branch x19 == 0x0000000000000000 l000000000046EB28
	// succ:  l000000000046EAEC l000000000046EB28
l000000000046EAEC:
	x0 = Mem0[x19 + 8:word64]
	x0 = Mem0[x0:word64]
	branch x0 != 0x0000000000000000 l000000000046EAA4
	// succ:  l000000000046EAF8 l000000000046EAA4
l000000000046EAF8:
	x0 = 0x00000000004BE000
	x0 = x0 + 0x0000000000000528
	goto l000000000046EABC
	// succ:  l000000000046EABC
l000000000046EB04:
	x0 = Mem0[x19:word64]
	branch x0 != 0x0000000000000000 l000000000046EB3C
	// succ:  l000000000046EB0C l000000000046EB3C
l000000000046EB0C:
	v15 = Mem0[x29 + 32:byte]
	w0 = (word32) v15
	x19 = Mem0[sp + 16:word64]
	x29 = Mem0[sp:word64]
	sp = sp + 8
	x30 = Mem0[sp:word64]
	sp = sp + 48
	return
	// succ:  get_exitstat_exit
l000000000046EB1C:
	x0 = Mem0[x0:word64]
	branch x0 == 0x0000000000000000 l000000000046EAF8
	// succ:  l000000000046EB24 l000000000046EAF8
l000000000046EB24:
	goto l000000000046EAA4
	// succ:  l000000000046EAA4
l000000000046EB28:
	x0 = 0x00000000004E3000
	w0 = Mem0[x0 + 1200:word32]
	x19 = Mem0[sp + 16:word64]
	x29 = Mem0[sp:word64]
	sp = sp + 8
	x30 = Mem0[sp:word64]
	sp = sp + 48
	return
	// succ:  get_exitstat_exit
l000000000046EB3C:
	call fn000000000041D064 (retsize: 0;)
	// succ:  l000000000046EB3C_thunk_read_octal
l000000000046EB3C_thunk_read_octal:
	call read_octal (retsize: 0;)
	return
	// succ:  get_exitstat_exit
get_exitstat_exit:


// read_octal
// Return size: 0
void read_octal()
read_octal_entry:
	// succ:  l000000000046EB40
l000000000046EB40:
	sp = fp
	x1 = 0x0000000000000000
	w2 = w1
	// succ:  l000000000046EB5C
l000000000046EB5C:
	v8 = Mem0[x0 + x1:byte]
	w4 = (word32) v8
	w3 = w4 - 0x00000030
read_octal_exit:


// get_working_directory
// Return size: 0
void get_working_directory()
get_working_directory_entry:
	// succ:  l000000000046EB90
l000000000046EB90:
	sp = fp
	sp = sp + -64
	Mem0[sp:word64] = x29
	sp = sp + 8
	Mem0[sp:word64] = x30
	x29 = x31 + 0x0000000000000000
	x1 = 0x00000000004DF000
	w1 = Mem0[x1 + 3760:word32]
	v10 = sp + 16
	Mem0[v10:word64] = x19
	v10 = v10 + 8
	Mem0[v10:word64] = x20
	Mem0[sp + 32:word64] = x21
	x19 = 0x00000000004E1000
	x20 = x0
	x0 = x19 + 0x0000000000000690
	branch w1 == 0x00000000 l000000000046EC28
	// succ:  l000000000046EBB8 l000000000046EC28
l000000000046EBB8:
	x0 = Mem0[x0 + 16:word64]
	branch x0 == 0x0000000000000000 l000000000046EBD0
	// succ:  l000000000046EBC0 l000000000046EBD0
l000000000046EBC0:
	x1 = 0x00000000004BE000
	x1 = x1 + 0x0000000000000508
	w2 = 0x00000226
	call sh_xfree (retsize: 0;)
	// succ:  l000000000046EBD0
l000000000046EBD0:
	x0 = x19 + 0x0000000000000690
	Mem0[x0 + 16:word64] = 0x0000000000000000
	// succ:  l000000000046EBD8
l000000000046EBD8:
	x0 = 0x0000000000000000
	x1 = x0
	call getcwd (retsize: 0;)
	x2 = x19 + 0x0000000000000690
	Mem0[x2 + 16:word64] = x0
	x1 = x0
	branch x0 == 0x0000000000000000 l000000000046EC34
	// succ:  l000000000046EBF4 l000000000046EC34
l000000000046EBF4:
	x0 = x1
	strlen(x0)
	sp = sp + 0xFFFFFFFFFFFFFFF8
	x1 = 0x00000000004BE000
	x1 = x1 + 0x0000000000000508
	w2 = 0x0000023A
	x0 = x0 + 0x0000000000000001
	call sh_xmalloc (retsize: 0;)
	x19 = x19 + 0x0000000000000690
	x1 = Mem0[x19 + 16:word64]
	x21 = Mem0[sp + 32:word64]
	v14 = sp + 16
	x19 = Mem0[v14:word64]
	v14 = v14 + 8
	x20 = Mem0[v14:word64]
	x29 = Mem0[sp:word64]
	sp = sp + 8
	x30 = Mem0[sp:word64]
	sp = sp + 64
	strcpy(x0, x1)
	return
	// succ:  get_working_directory_exit
l000000000046EC28:
	x1 = Mem0[x0 + 16:word64]
	branch x1 != 0x0000000000000000 l000000000046EBF4
	// succ:  l000000000046EC30 l000000000046EBF4
l000000000046EC30:
	goto l000000000046EBD8
	// succ:  l000000000046EBD8
l000000000046EC34:
	x1 = 0x00000000004BE000
	x3 = 0x00000000004DE000
	x1 = x1 + 0x0000000000000530
	w2 = 0x00000005
	x21 = Mem0[x3 + 1640:word64]
	dcgettext(x0, x1, x2)
	sp = sp + 0xFFFFFFFFFFFFFFF8
	x19 = x0
	branch x20 == 0x0000000000000000 l000000000046EC5C
	// succ:  l000000000046EC54 l000000000046EC5C
l000000000046EC54:
	v18 = Mem0[x20:byte]
	w0 = (word32) v18
	branch w0 != 0x00000000 l000000000046EC64
	// succ:  l000000000046EC5C l000000000046EC64
l000000000046EC5C:
	call get_name_for_error (retsize: 0;)
	x20 = x0
	// succ:  l000000000046EC64
l000000000046EC64:
	x0 = 0x00000000004AB000
	x1 = Mem0[x0 + 3800:word64]
	w2 = 0x00000005
	x0 = 0x0000000000000000
	dcgettext(x0, x1, x2)
	sp = sp + 0xFFFFFFFFFFFFFFF8
	Mem0[x29 + 48:word64] = x0
	__errno_location()
	sp = sp + 0xFFFFFFFFFFFFFFF8
	w0 = Mem0[x0:word32]
	strerror(x0)
	sp = sp + 0xFFFFFFFFFFFFFFF8
	x4 = Mem0[x29 + 48:word64]
	x5 = x0
	x2 = x19
	x3 = x20
	x0 = x21
	w1 = 0x00000001
	__fprintf_chk(x0, x1, x2, Mem0[sp:<unknown>])
	sp = sp + 0xFFFFFFFFFFFFFFF8
	x0 = 0x0000000000000000
	v21 = sp + 16
	x19 = Mem0[v21:word64]
	v21 = v21 + 8
	x20 = Mem0[v21:word64]
	x21 = Mem0[sp + 32:word64]
	x29 = Mem0[sp:word64]
	sp = sp + 8
	x30 = Mem0[sp:word64]
	sp = sp + 64
	return
	// succ:  get_working_directory_exit
get_working_directory_exit:


// set_working_directory
// Return size: 0
void set_working_directory()
set_working_directory_entry:
	// succ:  l000000000046ECB8
l000000000046ECB8:
	sp = fp
	sp = sp + -48
	Mem0[sp:word64] = x29
	sp = sp + 8
	Mem0[sp:word64] = x30
	x29 = x31 + 0x0000000000000000
	v8 = sp + 16
	Mem0[v8:word64] = x19
	v8 = v8 + 8
	Mem0[v8:word64] = x20
	x19 = 0x00000000004E1000
	x1 = x19 + 0x0000000000000690
	x2 = Mem0[x1 + 16:word64]
	Mem0[sp + 32:word64] = x21
	x20 = x0
	x21 = 0x00000000004BE000
	branch x2 == 0x0000000000000000 l000000000046ECF0
	// succ:  l000000000046ECE0 l000000000046ECF0
l000000000046ECE0:
	x0 = x2
	x1 = x21 + 0x0000000000000508
	w2 = 0x00000242
	call sh_xfree (retsize: 0;)
	// succ:  l000000000046ECF0
l000000000046ECF0:
	x0 = x20
	strlen(x0)
	sp = sp + 0xFFFFFFFFFFFFFFF8
	w2 = 0x00000243
	x1 = x21 + 0x0000000000000508
	x0 = x0 + 0x0000000000000001
	call sh_xmalloc (retsize: 0;)
	x1 = x20
	strcpy(x0, x1)
	sp = sp + 0xFFFFFFFFFFFFFFF8
	x19 = x19 + 0x0000000000000690
	Mem0[x19 + 16:word64] = x0
	x21 = Mem0[sp + 32:word64]
	v14 = sp + 16
	x19 = Mem0[v14:word64]
	v14 = v14 + 8
	x20 = Mem0[v14:word64]
	x29 = Mem0[sp:word64]
	sp = sp + 8
	x30 = Mem0[sp:word64]
	sp = sp + 48
	return
	// succ:  set_working_directory_exit
set_working_directory_exit:


// get_job_by_name
// Return size: 0
void get_job_by_name()
get_job_by_name_entry:
	// succ:  l000000000046ED28
l000000000046ED28:
	sp = fp
	sp = sp + -128
	Mem0[sp:word64] = x29
	sp = sp + 8
	Mem0[sp:word64] = x30
	x29 = x31 + 0x0000000000000000
	v8 = sp + 64
	Mem0[v8:word64] = x25
	v8 = v8 + 8
	Mem0[v8:word64] = x26
	v11 = sp + 48
	Mem0[v11:word64] = x23
	v11 = v11 + 8
	Mem0[v11:word64] = x24
	v14 = sp + 80
	Mem0[v14:word64] = x27
	v14 = v14 + 8
	Mem0[v14:word64] = x28
	v17 = sp + 16
	Mem0[v17:word64] = x19
	v17 = v17 + 8
	Mem0[v17:word64] = x20
	v20 = sp + 32
	Mem0[v20:word64] = x21
	v20 = v20 + 8
	Mem0[v20:word64] = x22
	x25 = x0
	w26 = w1
	strlen(x0)
	sp = sp + 0xFFFFFFFFFFFFFFF8
	w28 = w0
	x0 = 0x00000000004D6000
	w24 = Mem0[x0 + 3364:word32]
	w24 = w24 - 0x00000001
	NZCV = cond(w24)
	branch Test(LT,N) l000000000046EF08
	// succ:  l000000000046ED64 l000000000046EF08
l000000000046ED64:
	x0 = 0x00000000004DF000
	x0 = Mem0[x0 + 3784:word64]
	w22 = w26 & 0x00000004
	x0 = x0 + (int64) ((int32) w24)
	Mem0[x29 + 96:word64] = x0
	w0 = w26 & 0x00000008
	Mem0[x29 + 104:word32] = w0
l000000000046EE58:
	v30 = sp + 16
	x19 = Mem0[v30:word64]
	v30 = v30 + 8
	x20 = Mem0[v30:word64]
	v31 = sp + 32
	x21 = Mem0[v31:word64]
	v31 = v31 + 8
	x22 = Mem0[v31:word64]
	v32 = sp + 48
	x23 = Mem0[v32:word64]
	v32 = v32 + 8
	x24 = Mem0[v32:word64]
	v33 = sp + 64
	x25 = Mem0[v33:word64]
	v33 = v33 + 8
	x26 = Mem0[v33:word64]
	v34 = sp + 80
	x27 = Mem0[v34:word64]
	v34 = v34 + 8
	x28 = Mem0[v34:word64]
	x29 = Mem0[sp:word64]
	sp = sp + 8
	x30 = Mem0[sp:word64]
	sp = sp + 128
	return
	// succ:  get_job_by_name_exit
l000000000046EF08:
	w0 = 0xFFFFFFFF
	goto l000000000046EE58
	// succ:  l000000000046EE58
get_job_by_name_exit:


// get_job_spec
// Return size: 0
void get_job_spec()
get_job_spec_entry:
	// succ:  l000000000046EF10
l000000000046EF10:
	sp = fp
	sp = sp + -32
	Mem0[sp:word64] = x29
	sp = sp + 8
	Mem0[sp:word64] = x30
	x29 = x31 + 0x0000000000000000
	Mem0[sp + 16:word64] = x19
	branch x0 == 0x0000000000000000 l000000000046EF9C
	// succ:  l000000000046EF20 l000000000046EF9C
l000000000046EF20:
	x0 = Mem0[x0 + 8:word64]
	x19 = Mem0[x0:word64]
	v9 = Mem0[x19:byte]
	w1 = (word32) v9
	branch w1 == 0x00000000 l000000000046EFF8
	// succ:  l000000000046EF30 l000000000046EFF8
l000000000046EF30:
	w31 = w1 - 0x00000025
	NZCV = cond(w31)
	branch Test(EQ,Z) l000000000046EFC4
	// succ:  l000000000046EF38 l000000000046EFC4
l000000000046EF38:
	w0 = w1 - 0x00000030
l000000000046EF9C:
	x0 = 0x00000000004D6000
	w0 = Mem0[x0 + 3384:word32]
	// succ:  l000000000046EFA4
l000000000046EFA4:
	x19 = Mem0[sp + 16:word64]
	x29 = Mem0[sp:word64]
	sp = sp + 8
	x30 = Mem0[sp:word64]
	sp = sp + 32
	return
	// succ:  get_job_spec_exit
l000000000046EFC4:
	v14 = Mem0[x19 + 1:byte]
	w1 = (word32) v14
	x19 = x19 + 0x0000000000000001
	goto l000000000046EF38
	// succ:  l000000000046EF38
l000000000046EFF8:
	w0 = 0xFFFFFFFF
	goto l000000000046EFA4
	// succ:  l000000000046EFA4
get_job_spec_exit:


// display_signal_list
// Return size: 0
void display_signal_list()
display_signal_list_entry:
	// succ:  l000000000046F014
l000000000046F014:
	sp = fp
	sp = sp + -112
	Mem0[sp:word64] = x29
	sp = sp + 8
	Mem0[sp:word64] = x30
	x29 = x31 + 0x0000000000000000
	v8 = sp + 16
	Mem0[v8:word64] = x19
	v8 = v8 + 8
	Mem0[v8:word64] = x20
	v11 = sp + 32
	Mem0[v11:word64] = x21
	v11 = v11 + 8
	Mem0[v11:word64] = x22
	v14 = sp + 48
	Mem0[v14:word64] = x23
	v14 = v14 + 8
	Mem0[v14:word64] = x24
	v17 = sp + 64
	Mem0[v17:word64] = x25
	v17 = v17 + 8
	Mem0[v17:word64] = x26
	Mem0[sp + 80:word64] = x27
	x19 = x0
	w24 = w1
	w21 = 0x00000000
	branch x0 == 0x0000000000000000 l000000000046F180
	// succ:  l000000000046F040 l000000000046F180
l000000000046F040:
	x23 = 0x00000000004E1000
	x22 = 0x0000000000474000
	x24 = 0x00000000004BE000
	x23 = x23 + 0x0000000000000690
	x22 = x22 + 0xFFFFFFFFFFFFFBD0
	x24 = x24 + 0x0000000000000580
	// succ:  l000000000046F058
l000000000046F058:
	x2 = Mem0[x19 + 8:word64]
	x1 = x29 + 0x0000000000000060
	x0 = Mem0[x2:word64]
	call legal_number (retsize: 0;)
	branch w0 == 0x00000000 l000000000046F0E0
	// succ:  l000000000046F06C l000000000046F0E0
l000000000046F06C:
	x0 = Mem0[x29 + 96:word64]
	x31 = x0 - 0x0000000000000080
	NZCV = cond(x31)
	branch Test(LE,ZCV) l000000000046F080
	// succ:  l000000000046F078 l000000000046F080
l000000000046F078:
	x0 = x0 - 0x0000000000000080
	Mem0[x29 + 96:word64] = x0
	// succ:  l000000000046F080
l000000000046F080:
	x31 = x0 - 0x0000000000000040
	NZCV = cond(x31)
	branch Test(UGT,ZC) l000000000046F130
	// succ:  l000000000046F088 l000000000046F130
l000000000046F088:
	call signal_name (retsize: 0;)
	v35 = Mem0[x0:byte]
	w2 = (word32) v35
	x20 = x0
	w31 = w2 - 0x00000053
	NZCV = cond(w31)
	branch Test(EQ,Z) l000000000046F14C
	// succ:  l000000000046F09C l000000000046F14C
l000000000046F09C:
	w31 = w2 - 0x00000055
	NZCV = cond(w31)
	branch Test(EQ,Z) l000000000046F168
	// succ:  l000000000046F0A4 l000000000046F168
l000000000046F0A4:
	x1 = Mem0[x23 + 8:word64]
	x0 = x20 + 0x0000000000000003
	x31 = x1 - x22
	NZCV = cond(x31)
l000000000046F0BC:
	branch x19 != 0x0000000000000000 l000000000046F058
	// succ:  l000000000046F0C0 l000000000046F058
l000000000046F0C0:
	w0 = w21
	v36 = sp + 16
	x19 = Mem0[v36:word64]
	v36 = v36 + 8
	x20 = Mem0[v36:word64]
	v37 = sp + 32
	x21 = Mem0[v37:word64]
	v37 = v37 + 8
	x22 = Mem0[v37:word64]
	v38 = sp + 48
	x23 = Mem0[v38:word64]
	v38 = v38 + 8
	x24 = Mem0[v38:word64]
	v39 = sp + 64
	x25 = Mem0[v39:word64]
	v39 = v39 + 8
	x26 = Mem0[v39:word64]
	x27 = Mem0[sp + 80:word64]
	x29 = Mem0[sp:word64]
	sp = sp + 8
	x30 = Mem0[sp:word64]
	sp = sp + 112
	return
	// succ:  display_signal_list_exit
l000000000046F0E0:
	x2 = 0x00000000004DE000
	w2 = Mem0[x2 + 1716:word32]
	w1 = 0x00000003
	branch w2 == 0x00000000 l000000000046F100
	// succ:  l000000000046F0F0 l000000000046F100
l000000000046F0F0:
	x0 = Mem0[x23 + 8:word64]
	x31 = x0 - x22
	NZCV = cond(x31)
	w0 = 0x00000002
l000000000046F100:
	x2 = Mem0[x19 + 8:word64]
	x0 = Mem0[x2:word64]
	call decode_signal (retsize: 0;)
	w31 = w0 + 0x00000001
	NZCV = cond(w31)
	w2 = w0
	branch Test(EQ,Z) l000000000046F130
	// succ:  l000000000046F118 l000000000046F130
l000000000046F118:
	x1 = 0x00000000004BE000
	w0 = 0x00000001
	x1 = x1 + 0x0000000000000590
	__printf_chk(x0, x1, Mem0[sp:<unknown>])
	sp = sp + 0xFFFFFFFFFFFFFFF8
	x19 = Mem0[x19:word64]
	goto l000000000046F0BC
	// succ:  l000000000046F0BC
l000000000046F130:
	x0 = Mem0[x19 + 8:word64]
	w21 = 0x00000001
	x0 = Mem0[x0:word64]
	call sh_invalidsig (retsize: 0;)
	x19 = Mem0[x19:word64]
	branch x19 != 0x0000000000000000 l000000000046F058
	// succ:  l000000000046F148 l000000000046F058
l000000000046F148:
	goto l000000000046F0C0
	// succ:  l000000000046F0C0
l000000000046F14C:
	x1 = 0x00000000004BE000
	x1 = x1 + 0x0000000000000578
	x2 = 0x0000000000000007
	strncmp(x0, x1, x2)
	sp = sp + 0xFFFFFFFFFFFFFFF8
	branch w0 != 0x00000000 l000000000046F0A4
	// succ:  l000000000046F160 l000000000046F0A4
l000000000046F160:
	x19 = Mem0[x19:word64]
	goto l000000000046F0BC
	// succ:  l000000000046F0BC
l000000000046F168:
	x1 = x24
	x2 = 0x0000000000000007
	strncmp(x0, x1, x2)
	sp = sp + 0xFFFFFFFFFFFFFFF8
	branch w0 != 0x00000000 l000000000046F0A4
	// succ:  l000000000046F178 l000000000046F0A4
l000000000046F178:
	x19 = Mem0[x19:word64]
	goto l000000000046F0BC
	// succ:  l000000000046F0BC
l000000000046F180:
	x25 = 0x00000000004BE000
	x27 = 0x00000000004BE000
	x26 = 0x00000000004AB000
	w22 = w0
	w19 = 0x00000001
	x23 = 0x00000000004DE000
	x25 = x25 + 0x0000000000000588
	x27 = x27 + 0x0000000000000330
	x26 = x26 + 0xFFFFFFFFFFFFFF00
	goto l000000000046F1EC
	// succ:  l000000000046F1EC
l000000000046F1A8:
	w31 = w21 - 0x00000055
	NZCV = cond(w31)
	branch Test(EQ,Z) l000000000046F274
	// succ:  l000000000046F1B0 l000000000046F274
l000000000046F1B0:
	w0 = Mem0[x23 + 1716:word32]
	branch w0 == 0x00000000 l000000000046F248
	// succ:  l000000000046F1B8 l000000000046F248
l000000000046F1B8:
	branch w24 != 0x00000000 l000000000046F248
	// succ:  l000000000046F1BC l000000000046F248
l000000000046F1BC:
	w31 = w21 - 0x00000053
	NZCV = cond(w31)
	branch Test(EQ,Z) l000000000046F29C
	// succ:  l000000000046F1C4 l000000000046F29C
l000000000046F1C4:
	w31 = w19 - 0x00000040
	NZCV = cond(w31)
	x3 = x27
	branch Test(EQ,Z) l000000000046F2C0
	// succ:  l000000000046F1D0 l000000000046F2C0
l000000000046F1D0:
	x1 = x26
	x2 = x20
	w0 = 0x00000001
	__printf_chk(x0, x1, Mem0[sp:<unknown>])
	sp = sp + 0xFFFFFFFFFFFFFFF8
	// succ:  l000000000046F1E0
l000000000046F1E0:
	w19 = w19 + 0x00000001
	w31 = w19 - 0x00000041
	NZCV = cond(w31)
	branch Test(EQ,Z) l000000000046F224
	// succ:  l000000000046F1EC l000000000046F224
l000000000046F1EC:
	w0 = w19
	call signal_name (retsize: 0;)
	v30 = Mem0[x0:byte]
	w21 = (word32) v30
	x20 = x0
	w31 = w21 - 0x00000053
	NZCV = cond(w31)
	branch Test(NE,Z) l000000000046F1A8
	// succ:  l000000000046F204 l000000000046F1A8
l000000000046F204:
	x1 = 0x00000000004BE000
	x1 = x1 + 0x0000000000000578
	x2 = 0x0000000000000007
	strncmp(x0, x1, x2)
	sp = sp + 0xFFFFFFFFFFFFFFF8
	branch w0 != 0x00000000 l000000000046F1B0
	// succ:  l000000000046F218 l000000000046F1B0
l000000000046F218:
	w19 = w19 + 0x00000001
	w31 = w19 - 0x00000041
	NZCV = cond(w31)
	branch Test(NE,Z) l000000000046F1EC
	// succ:  l000000000046F224 l000000000046F1EC
l000000000046F224:
	w0 = Mem0[x23 + 1716:word32]
	branch w0 == 0x00000000 l000000000046F230
	// succ:  l000000000046F22C l000000000046F230
l000000000046F22C:
	branch w24 == 0x00000000 l000000000046F238
	// succ:  l000000000046F230 l000000000046F238
l000000000046F230:
	w21 = 0x00000000
	branch w22 == 0x00000000 l000000000046F0C0
	// succ:  l000000000046F238 l000000000046F0C0
l000000000046F238:
	w0 = 0x0000000A
	putchar(x0)
	sp = sp + 0xFFFFFFFFFFFFFFF8
	w21 = 0x00000000
	goto l000000000046F0C0
	// succ:  l000000000046F0C0
l000000000046F248:
	w0 = 0x00000001
	x1 = x25
	w2 = w19
	x3 = x20
	__printf_chk(x0, x1, Mem0[sp:<unknown>])
	sp = sp + 0xFFFFFFFFFFFFFFF8
	w22 = w22 + 0x00000001
	w31 = w22 - 0x00000004
	NZCV = cond(w31)
	branch Test(GT,NZV) l000000000046F28C
	// succ:  l000000000046F268 l000000000046F28C
l000000000046F268:
	w0 = 0x00000009
	putchar(x0)
	sp = sp + 0xFFFFFFFFFFFFFFF8
	goto l000000000046F1E0
	// succ:  l000000000046F1E0
l000000000046F274:
	x1 = 0x00000000004BE000
	x1 = x1 + 0x0000000000000580
	x2 = 0x0000000000000007
	strncmp(x0, x1, x2)
	sp = sp + 0xFFFFFFFFFFFFFFF8
	branch w0 == 0x00000000 l000000000046F1E0
	// succ:  l000000000046F288 l000000000046F1E0
l000000000046F288:
	goto l000000000046F1B0
	// succ:  l000000000046F1B0
l000000000046F28C:
	w0 = 0x0000000A
	putchar(x0)
	sp = sp + 0xFFFFFFFFFFFFFFF8
	w22 = 0x00000000
	goto l000000000046F1E0
	// succ:  l000000000046F1E0
l000000000046F29C:
	x1 = 0x00000000004AD000
	x0 = x20
	x1 = x1 + 0xFFFFFFFFFFFFFDA0
	x2 = 0x0000000000000003
	strncmp(x0, x1, x2)
	sp = sp + 0xFFFFFFFFFFFFFFF8
	NZCV = cond(w0 - w31)
	x0 = x20 + 0x0000000000000003
l000000000046F2C0:
	x3 = 0x00000000004AC000
	x3 = x3 + 0x0000000000000460
	goto l000000000046F1D0
	// succ:  l000000000046F1D0
display_signal_list_exit:


// builtin_address_internal
// Return size: 0
void builtin_address_internal()
builtin_address_internal_entry:
	// succ:  l000000000046F2CC
l000000000046F2CC:
	sp = fp
	sp = sp + -96
	Mem0[sp:word64] = x29
	sp = sp + 8
	Mem0[sp:word64] = x30
	x29 = x31 + 0x0000000000000000
	x2 = 0x00000000004D7000
	v9 = sp + 16
	Mem0[v9:word64] = x19
	v9 = v9 + 8
	Mem0[v9:word64] = x20
	w20 = Mem0[x2 + 2504:word32]
	v13 = sp + 64
	Mem0[v13:word64] = x25
	v13 = v13 + 8
	Mem0[v13:word64] = x26
	Mem0[sp + 80:word64] = x27
	v17 = sp + 32
	Mem0[v17:word64] = x21
	v17 = v17 + 8
	Mem0[v17:word64] = x22
	v20 = sp + 48
	Mem0[v20:word64] = x23
	v20 = v20 + 8
	Mem0[v20:word64] = x24
	w20 = w20 - 0x00000001
	NZCV = cond(w20)
	x25 = x0
	w27 = w1
	branch Test(LT,N) l000000000046F368
	// succ:  l000000000046F300 l000000000046F368
l000000000046F300:
	x0 = 0x00000000004D7000
	x23 = Mem0[x0 + 2512:word64]
	v27 = Mem0[x25:byte]
	w22 = (word32) v27
	w21 = 0x00000000
	w26 = 0x00000030
	// succ:  l000000000046F324
l000000000046F324:
	w19 = w21 + w20
l000000000046F368:
	x24 = 0x0000000000000000
	x0 = x24
	v30 = sp + 16
	x19 = Mem0[v30:word64]
	v30 = v30 + 8
	x20 = Mem0[v30:word64]
	v31 = sp + 32
	x21 = Mem0[v31:word64]
	v31 = v31 + 8
	x22 = Mem0[v31:word64]
	v32 = sp + 48
	x23 = Mem0[v32:word64]
	v32 = v32 + 8
	x24 = Mem0[v32:word64]
	v33 = sp + 64
	x25 = Mem0[v33:word64]
	v33 = v33 + 8
	x26 = Mem0[v33:word64]
	x27 = Mem0[sp + 80:word64]
	x29 = Mem0[sp:word64]
	sp = sp + 8
	x30 = Mem0[sp:word64]
	sp = sp + 96
	return
	// succ:  builtin_address_internal_exit
builtin_address_internal_exit:


// find_shell_builtin
// Return size: 0
void find_shell_builtin()
find_shell_builtin_entry:
	// succ:  l000000000046F3C8
l000000000046F3C8:
	sp = fp
	sp = sp + -16
	Mem0[sp:word64] = x29
	sp = sp + 8
	Mem0[sp:word64] = x30
	x29 = x31 + 0x0000000000000000
	w1 = 0x00000000
	call builtin_address_internal (retsize: 0;)
	x1 = 0x00000000004E3000
	Mem0[x1 + 3504:word64] = x0
	branch x0 == 0x0000000000000000 l000000000046F3E8
	// succ:  l000000000046F3E4 l000000000046F3E8
l000000000046F3E4:
	x0 = Mem0[x0 + 8:word64]
	// succ:  l000000000046F3E8
l000000000046F3E8:
	x29 = Mem0[sp:word64]
	sp = sp + 8
	x30 = Mem0[sp:word64]
	sp = sp + 16
	return
	// succ:  find_shell_builtin_exit
find_shell_builtin_exit:


// builtin_address
// Return size: 0
void builtin_address()
builtin_address_entry:
	// succ:  l000000000046F3F0
l000000000046F3F0:
	sp = fp
	sp = sp + -16
	Mem0[sp:word64] = x29
	sp = sp + 8
	Mem0[sp:word64] = x30
	x29 = x31 + 0x0000000000000000
	w1 = 0x00000001
	call builtin_address_internal (retsize: 0;)
	x1 = 0x00000000004E3000
	Mem0[x1 + 3504:word64] = x0
	branch x0 == 0x0000000000000000 l000000000046F410
	// succ:  l000000000046F40C l000000000046F410
l000000000046F40C:
	x0 = Mem0[x0 + 8:word64]
	// succ:  l000000000046F410
l000000000046F410:
	x29 = Mem0[sp:word64]
	sp = sp + 8
	x30 = Mem0[sp:word64]
	sp = sp + 16
	return
	// succ:  builtin_address_exit
builtin_address_exit:


// find_special_builtin
// Return size: 0
void find_special_builtin()
find_special_builtin_entry:
	// succ:  l000000000046F418
l000000000046F418:
	sp = fp
	sp = sp + -16
	Mem0[sp:word64] = x29
	sp = sp + 8
	Mem0[sp:word64] = x30
	x29 = x31 + 0x0000000000000000
	w1 = 0x00000000
	call builtin_address_internal (retsize: 0;)
	x1 = 0x00000000004E3000
	Mem0[x1 + 3504:word64] = x0
	branch x0 == 0x0000000000000000 l000000000046F440
	// succ:  l000000000046F434 l000000000046F440
l000000000046F434:
	w1 = Mem0[x0 + 16:word32]
	branch (w1 & 0x00000008) == 0x00000000 l000000000046F448
	// succ:  l000000000046F43C l000000000046F448
l000000000046F43C:
	x0 = Mem0[x0 + 8:word64]
	// succ:  l000000000046F440
l000000000046F440:
	x29 = Mem0[sp:word64]
	sp = sp + 8
	x30 = Mem0[sp:word64]
	sp = sp + 16
	return
	// succ:  find_special_builtin_exit
l000000000046F448:
	x0 = 0x0000000000000000
	goto l000000000046F440
	// succ:  l000000000046F440
find_special_builtin_exit:


// initialize_shell_builtins
// Return size: 0
void initialize_shell_builtins()
initialize_shell_builtins_entry:
	// succ:  l000000000046F450
l000000000046F450:
	sp = fp
	x0 = 0x00000000004D7000
	x1 = 0x00000000004D7000
	x0 = Mem0[x0 + 2512:word64]
	v5 = Mem0[x1 + 1252:int32]
	x1 = (word64) v5
	x3 = 0x000000000046D000
	x2 = 0x0000000000000030
	x3 = x3 + 0xFFFFFFFFFFFFFFF8
	call qsort (retsize: 0;)
	return
	// succ:  initialize_shell_builtins_exit
initialize_shell_builtins_exit:


// fn000000000046F470
// Return size: 0
void fn000000000046F470()
fn000000000046F470_entry:
	// succ:  l000000000046F470
l000000000046F470:
	sp = v3
	sp = sp + -192
	Mem0[sp:word64] = x29
	sp = sp + 8
	Mem0[sp:word64] = x30
	x29 = x31 + 0x0000000000000000
	v7 = sp + 48
	Mem0[v7:word64] = x23
	v7 = v7 + 8
	Mem0[v7:word64] = x24
	w23 = 0x00000000
	v11 = sp + 16
	Mem0[v11:word64] = x19
	v11 = v11 + 8
	Mem0[v11:word64] = x20
	v14 = sp + 32
	Mem0[v14:word64] = x21
	v14 = v14 + 8
	Mem0[v14:word64] = x22
	v17 = sp + 64
	Mem0[v17:word64] = x25
	v17 = v17 + 8
	Mem0[v17:word64] = x26
	v20 = sp + 80
	Mem0[v20:word64] = x27
	v20 = v20 + 8
	Mem0[v20:word64] = x28
	x20 = x0
	w26 = w1
	Mem0[x29 + 96:word32] = w23
	Mem0[x29 + 100:word32] = w23
	call reset_internal_getopt (retsize: 0;)
	x21 = 0x00000000004E3000
	x22 = 0x00000000004BE000
	x0 = 0x00000000004D6000
	Mem0[x29 + 112:word32] = w23
	w24 = w23
	x19 = 0x00000000004BE000
	x21 = x21 + 0xFFFFFFFFFFFFFF18
	x22 = x22 + 0x0000000000000594
	x27 = x0 + 0xFFFFFFFFFFFFFA58
	x0 = x20
	x1 = x19 + 0x00000000000005D0
	call internal_getopt (retsize: 0;)
	w31 = w0 + 0x00000001
	NZCV = cond(w31)
	branch Test(EQ,Z) l000000000046F554
	// succ:  l000000000046F4DC l000000000046F554
l000000000046F4DC:
	w3 = Mem0[x21:word32]
	w31 = w3 - 0x0000002B
	NZCV = cond(w31)
	branch Test(EQ,Z) l000000000046F6B0
	// succ:  l000000000046F4E8 l000000000046F6B0
l000000000046F4E8:
	x3 = x29 + 0x0000000000000060
	x3 = x3 + 4
	w5 = Mem0[x3:word32]
	// succ:  l000000000046F4F0
l000000000046F4F0:
	w4 = w0 - 0x00000041
	w31 = w4 - 0x00000037
	NZCV = cond(w31)
	branch Test(ULE,ZC) l000000000046F520
	// succ:  l000000000046F4FC l000000000046F520
l000000000046F4FC:
	call builtin_usage (retsize: 0;)
	w0 = 0x00000102
	// succ:  l000000000046F504
l000000000046F504:
	v37 = sp + 16
	x19 = Mem0[v37:word64]
	v37 = v37 + 8
	x20 = Mem0[v37:word64]
	v38 = sp + 32
	x21 = Mem0[v38:word64]
	v38 = v38 + 8
	x22 = Mem0[v38:word64]
	v39 = sp + 48
	x23 = Mem0[v39:word64]
	v39 = v39 + 8
	x24 = Mem0[v39:word64]
	v40 = sp + 64
	x25 = Mem0[v40:word64]
	v40 = v40 + 8
	x26 = Mem0[v40:word64]
	v41 = sp + 80
	x27 = Mem0[v41:word64]
	v41 = v41 + 8
	x28 = Mem0[v41:word64]
	x29 = Mem0[sp:word64]
	sp = sp + 8
	x30 = Mem0[sp:word64]
	sp = sp + 192
	return
	// succ:  fn000000000046F470_exit
l000000000046F520:
	v42 = Mem0[x22 + (uint64) ((uint32) w4):byte]
	w0 = (word32) v42
	x1 = 0x000000000046F530
	x0 = x1 + (int64) ((int8) w0)
	call x0 (retsize: 0;)
	return
	// succ:  fn000000000046F470_exit
l000000000046F554:
	x0 = 0x00000000004E3000
	x19 = Mem0[x0 + 3856:word64]
	branch x19 == 0x0000000000000000 l000000000046FA20
	// succ:  l000000000046F560 l000000000046FA20
l000000000046F560:
	branch w24 == 0x00000000 l000000000046F6BC
	// succ:  l000000000046F564 l000000000046F6BC
l000000000046F564:
	w20 = 0x00000000
	goto l000000000046F574
	// succ:  l000000000046F574
l000000000046F56C:
	x19 = Mem0[x19:word64]
	branch x19 == 0x0000000000000000 l000000000046F5A0
	// succ:  l000000000046F574 l000000000046F5A0
l000000000046F574:
	x0 = Mem0[x19 + 8:word64]
	w1 = Mem0[x29 + 112:word32]
	x0 = Mem0[x0:word64]
	call show_name_attributes (retsize: 0;)
	branch w0 == 0x00000000 l000000000046F56C
	// succ:  l000000000046F588 l000000000046F56C
l000000000046F588:
	x0 = Mem0[x19 + 8:word64]
	w20 = w20 + 0x00000001
	x0 = Mem0[x0:word64]
	call sh_notfound (retsize: 0;)
	x19 = Mem0[x19:word64]
	branch x19 != 0x0000000000000000 l000000000046F574
	// succ:  l000000000046F5A0 l000000000046F574
l000000000046F5A0:
	NZCV = cond(w20 - w31)
	w0 = (word32) Test(NE,Z)
	// succ:  l000000000046F5A8
l000000000046F5A8:
	v44 = sp + 16
	x19 = Mem0[v44:word64]
	v44 = v44 + 8
	x20 = Mem0[v44:word64]
	v45 = sp + 32
	x21 = Mem0[v45:word64]
	v45 = v45 + 8
	x22 = Mem0[v45:word64]
	v46 = sp + 48
	x23 = Mem0[v46:word64]
	v46 = v46 + 8
	x24 = Mem0[v46:word64]
	v47 = sp + 64
	x25 = Mem0[v47:word64]
	v47 = v47 + 8
	x26 = Mem0[v47:word64]
	v48 = sp + 80
	x27 = Mem0[v48:word64]
	v48 = v48 + 8
	x28 = Mem0[v48:word64]
	x29 = Mem0[sp:word64]
	sp = sp + 8
	x30 = Mem0[sp:word64]
	sp = sp + 192
	// succ:  l000000000046F5C0_thunk_sh_chkwrite
l000000000046F5C0_thunk_sh_chkwrite:
	call sh_chkwrite (retsize: 0;)
	return
	// succ:  fn000000000046F470_exit
l000000000046F6B0:
	w5 = Mem0[x29 + 96:word32]
	x3 = x29 + 0x0000000000000060
	goto l000000000046F4F0
	// succ:  l000000000046F4F0
l000000000046F6BC:
	x0 = 0x00000000004AC000
	x0 = x0 + 0x0000000000000460
	Mem0[x29 + 144:word64] = x0
	x0 = 0x00000000004DE000
	x25 = x0 + 0x00000000000006B4
	x0 = 0x00000000004DF000
	Mem0[x29 + 128:word32] = w24
	x27 = 0x00000000004BE000
	x26 = x0 + 0xFFFFFFFFFFFFFC60
	// succ:  l000000000046F6E0
l000000000046F6E0:
	x0 = Mem0[x19 + 8:word64]
	x22 = x27 + 0x00000000000005E0
	x0 = Mem0[x0:word64]
	strlen(x0)
	sp = sp + 0xFFFFFFFFFFFFFFF8
	w2 = 0x0000011A
	x1 = x22
	x0 = x0 + 0x0000000000000001
	call sh_xmalloc (retsize: 0;)
	x2 = Mem0[x19 + 8:word64]
	x1 = Mem0[x2:word64]
	strcpy(x0, x1)
	sp = sp + 0xFFFFFFFFFFFFFFF8
	w1 = 0x00000000
	x20 = x0
	call assignment (retsize: 0;)
	w21 = w0
	branch w0 != 0x00000000 l000000000046F830
	// succ:  l000000000046F720 l000000000046F830
l000000000046F720:
	x0 = x20
	w1 = 0x0000005B
	strchr(x0, x1)
	sp = sp + 0xFFFFFFFFFFFFFFF8
	Mem0[x29 + 120:word64] = x0
	branch x0 == 0x0000000000000000 l000000000046FFF8
	// succ:  l000000000046F734 l000000000046FFF8
l000000000046F734:
	x0 = x20
	call valid_array_reference (retsize: 0;)
	branch w0 == 0x00000000 l000000000046F990
	// succ:  l000000000046F740 l000000000046F990
l000000000046F740:
	x7 = Mem0[x29 + 144:word64]
	Mem0[x29 + 116:word32] = w21
	Mem0[x29 + 136:word64] = x7
	x7 = Mem0[x29 + 120:word64]
	w28 = 0x00000001
	Mem0[x7:byte] = 0x00
	// succ:  l000000000046F758
l000000000046F758:
	w0 = Mem0[x25:word32]
	branch w0 != 0x00000000 l000000000046F76C
	// succ:  l000000000046F760 l000000000046F76C
l000000000046F760:
	w22 = Mem0[x29 + 100:word32]
	w1 = w22 & 0x00000008
	branch (w22 & 0x00000008) == 0x00000000 l000000000046F780
	// succ:  l000000000046F76C l000000000046F780
l000000000046F76C:
	x0 = x20
	call legal_identifier (retsize: 0;)
	branch w0 == 0x00000000 l000000000046F910
	// succ:  l000000000046F778 l000000000046F910
l000000000046F778:
	w22 = Mem0[x29 + 100:word32]
	w1 = w22 & 0x00000008
	// succ:  l000000000046F780
l000000000046F780:
	w0 = Mem0[x26:word32]
	branch w0 != 0x00000000 l000000000046F874
	// succ:  l000000000046F788 l000000000046F874
l000000000046F788:
	branch w1 != 0x00000000 l000000000046F8BC
	// succ:  l000000000046F78C l000000000046F8BC
l000000000046F78C:
	x0 = x20
	branch w23 == 0x00000000 l000000000046FA00
	// succ:  l000000000046F794 l000000000046FA00
l000000000046F794:
	call find_global_variable (retsize: 0;)
	x5 = x0
	// succ:  l000000000046F79C
l000000000046F79C:
	branch x5 != 0x0000000000000000 l000000000046F7C8
	// succ:  l000000000046F7A0 l000000000046F7C8
l000000000046F7A0:
	branch (w22 & 0x00000040) == 0x00000000 l000000000046FE24
	// succ:  l000000000046F7A4 l000000000046FE24
l000000000046F7A4:
	w0 = w22 & 0x00000004
	w0 = w0 | w28
	branch w0 != 0x00000000 l000000000046FF14
	// succ:  l000000000046F7B0 l000000000046FF14
l000000000046F7B0:
	branch w21 == 0x00000000 l000000000046FA60
	// succ:  l000000000046F7B4 l000000000046FA60
l000000000046F7B4:
	x1 = Mem0[x29 + 144:word64]
	w2 = w5
	x0 = x20
	call bind_variable (retsize: 0;)
	x5 = x0
	// succ:  l000000000046F7C8
l000000000046F7C8:
	w3 = Mem0[x5 + 40:word32]
	// succ:  l000000000046F7CC
l000000000046F7CC:
	w1 = w3 & 0x00000002
	branch (w3 & 0x00000002) == 0x00000000 l000000000046F7DC
	// succ:  l000000000046F7D4 l000000000046F7DC
l000000000046F7D4:
	w0 = Mem0[x29 + 96:word32]
	branch (w0 & 0x00000002) == 0x00000000 l000000000046FD58
	// succ:  l000000000046F7DC l000000000046FD58
l000000000046F7DC:
	w2 = Mem0[x5 + 40:word32]
	w0 = 0x00004002
	NZ = cond(w2 & w0)
	C = false
	V = false
	branch Test(EQ,Z) l000000000046FAC4
	// succ:  l000000000046F7EC l000000000046FAC4
l000000000046F7EC:
	branch w21 == 0x00000000 l000000000046FAC4
	// succ:  l000000000046F7F0 l000000000046FAC4
l000000000046F7F0:
	branch w1 != 0x00000000 l000000000046FDAC
	// succ:  l000000000046F7F4 l000000000046FDAC
l000000000046F7F4:
	x0 = x20
	x1 = x27 + 0x00000000000005E0
	w2 = 0x000001C7
	call sh_xfree (retsize: 0;)
	w7 = Mem0[x29 + 128:word32]
	x19 = Mem0[x19:word64]
	w7 = w7 + 0x00000001
	Mem0[x29 + 128:word32] = w7
	branch x19 != 0x0000000000000000 l000000000046F6E0
	// succ:  l000000000046F818 l000000000046F6E0
l000000000046F818:
	w7 = Mem0[x29 + 128:word32]
	w0 = 0x00000104
	branch w7 != 0x00000000 l000000000046F504
	// succ:  l000000000046F824 l000000000046F504
l000000000046F824:
	NZCV = cond(w24 - w31)
	w0 = (word32) Test(NE,Z)
	goto l000000000046F504
	// succ:  l000000000046F504
l000000000046F830:
l000000000046F874:
	branch w23 != 0x00000000 l000000000046F788
	// succ:  l000000000046F878 l000000000046F788
l000000000046F878:
	branch w1 != 0x00000000 l000000000046F8BC
	// succ:  l000000000046F87C l000000000046F8BC
l000000000046F87C:
	branch (w22 & 0x00000040) == 0x00000000 l000000000046FA0C
	// succ:  l000000000046F880 l000000000046FA0C
l000000000046F880:
	w0 = w22 & 0x00000004
	w0 = w0 | w28
	branch w0 == 0x00000000 l000000000046F9EC
	// succ:  l000000000046F88C l000000000046F9EC
l000000000046F88C:
	x0 = x20
	call make_local_array_variable (retsize: 0;)
	x5 = x0
	branch x5 != 0x0000000000000000 l000000000046F7C8
	// succ:  l000000000046F89C l000000000046F7C8
l000000000046F89C:
	x0 = x20
	x1 = x27 + 0x00000000000005E0
	w2 = 0x0000015E
	call sh_xfree (retsize: 0;)
	x19 = Mem0[x19:word64]
	w24 = w24 + 0x00000001
	branch x19 != 0x0000000000000000 l000000000046F6E0
	// succ:  l000000000046F8B8 l000000000046F6E0
l000000000046F8B8:
	goto l000000000046F818
	// succ:  l000000000046F818
l000000000046F8BC:
	branch w21 != 0x00000000 l000000000046FDB8
	// succ:  l000000000046F8C0 l000000000046FDB8
l000000000046F8C0:
	x0 = x20
	call find_function (retsize: 0;)
	x21 = x0
	branch x0 == 0x0000000000000000 l000000000046F9A8
	// succ:  l000000000046F8D0 l000000000046F9A8
l000000000046F8D0:
	w0 = Mem0[x0 + 40:word32]
	branch (w0 & 0x00000002) == 0x00000000 l000000000046F940
	// succ:  l000000000046F8D8 l000000000046F940
l000000000046F8D8:
	w1 = Mem0[x29 + 96:word32]
	branch (w1 & 0x00000002) == 0x00000000 l000000000046F9B0
	// succ:  l000000000046F8E0 l000000000046F9B0
l000000000046F8E0:
	w31 = w22 - 0x00000008
	NZCV = cond(w31)
	branch Test(EQ,Z) l000000000046F94C
	// succ:  l000000000046F8E8 l000000000046F94C
l000000000046F8E8:
	w22 = w22 | w0
	w1 = w22 & ~w1
	Mem0[x21 + 40:word32] = w1
	// succ:  l000000000046F8F4
l000000000046F8F4:
	x0 = x20
	x1 = x27 + 0x00000000000005E0
	w2 = 0x0000019C
	call sh_xfree (retsize: 0;)
	x19 = Mem0[x19:word64]
	branch x19 != 0x0000000000000000 l000000000046F6E0
	// succ:  l000000000046F90C l000000000046F6E0
l000000000046F90C:
	goto l000000000046F818
	// succ:  l000000000046F818
l000000000046F910:
	x0 = x20
	call sh_invalidid (retsize: 0;)
	x0 = x20
	x1 = x27 + 0x00000000000005E0
	w2 = 0x00000147
	// succ:  l000000000046F924
l000000000046F924:
	call sh_xfree (retsize: 0;)
	w7 = Mem0[x29 + 128:word32]
	x19 = Mem0[x19:word64]
	w7 = w7 + 0x00000001
	Mem0[x29 + 128:word32] = w7
	branch x19 != 0x0000000000000000 l000000000046F6E0
	// succ:  l000000000046F93C l000000000046F6E0
l000000000046F93C:
	goto l000000000046F818
	// succ:  l000000000046F818
l000000000046F940:
	w31 = w22 - 0x00000008
	NZCV = cond(w31)
	w1 = Mem0[x29 + 96:word32]
	branch Test(NE,Z) l000000000046F8E8
	// succ:  l000000000046F94C l000000000046F8E8
l000000000046F94C:
	branch w1 != 0x00000000 l000000000046F8E8
	// succ:  l000000000046F950 l000000000046F8E8
l000000000046F950:
	w7 = Mem0[x29 + 112:word32]
	branch w7 == 0x00000000 l000000000046FA4C
	// succ:  l000000000046F958 l000000000046FA4C
l000000000046F958:
	x0 = 0x00000000004DE000
	w0 = Mem0[x0 + 1844:word32]
	branch w0 != 0x00000000 l000000000046FF7C
	// succ:  l000000000046F964 l000000000046FF7C
l000000000046F964:
	x0 = Mem0[x21:word64]
	// succ:  l000000000046F968
l000000000046F968:
	puts(x0)
	sp = sp + 0xFFFFFFFFFFFFFFF8
	w0 = w24
	call sh_chkwrite (retsize: 0;)
	w24 = w0
	goto l000000000046F8F4
	// succ:  l000000000046F8F4
l000000000046F990:
	x0 = x20
	call sh_invalidid (retsize: 0;)
	x0 = x20
	x1 = x22
	w2 = 0x00000135
	goto l000000000046F924
	// succ:  l000000000046F924
l000000000046F9A8:
	w24 = w24 + 0x00000001
	goto l000000000046F8F4
	// succ:  l000000000046F8F4
l000000000046F9B0:
	x1 = 0x00000000004AC000
	w2 = 0x00000005
	x1 = x1 + 0x00000000000007A0
	x0 = 0x0000000000000000
	dcgettext(x0, x1, x2)
	sp = sp + 0xFFFFFFFFFFFFFFF8
	x1 = x20
	call builtin_error (retsize: 0;)
	x0 = x20
	x1 = x27 + 0x00000000000005E0
	w2 = 0x0000017C
	call sh_xfree (retsize: 0;)
	x19 = Mem0[x19:word64]
	w24 = w24 + 0x00000001
	branch x19 != 0x0000000000000000 l000000000046F6E0
	// succ:  l000000000046F9E8 l000000000046F6E0
l000000000046F9E8:
	goto l000000000046F818
	// succ:  l000000000046F818
l000000000046F9EC:
	x0 = x20
	call make_local_variable (retsize: 0;)
	x5 = x0
	branch x5 != 0x0000000000000000 l000000000046F7C8
	// succ:  l000000000046F9FC l000000000046F7C8
l000000000046F9FC:
	goto l000000000046F89C
	// succ:  l000000000046F89C
l000000000046FA00:
	call find_variable (retsize: 0;)
	x5 = x0
	goto l000000000046F79C
	// succ:  l000000000046F79C
l000000000046FA0C:
	x0 = x20
	call make_local_assoc_variable (retsize: 0;)
	x5 = x0
	branch x5 != 0x0000000000000000 l000000000046F7C8
	// succ:  l000000000046FA1C l000000000046F7C8
l000000000046FA1C:
	goto l000000000046F89C
	// succ:  l000000000046F89C
l000000000046FA20:
	branch w26 != 0x00000000 l000000000046FA84
	// succ:  l000000000046FA24 l000000000046FA84
l000000000046FA24:
	branch w24 == 0x00000000 l000000000046FF54
	// succ:  l000000000046FA28 l000000000046FF54
l000000000046FA28:
	w0 = Mem0[x29 + 100:word32]
	w31 = w0 & 0xFFFFFFF7
	NZ = cond(w31)
	C = false
	V = false
	w1 = w0
	branch Test(EQ,Z) l000000000046FFA8
	// succ:  l000000000046FA38 l000000000046FFA8
l000000000046FA38:
	w2 = Mem0[x29 + 112:word32]
	x0 = 0x0000000000000000
	call set_or_show_attributes (retsize: 0;)
	// succ:  l000000000046FA44
l000000000046FA44:
	w0 = 0x00000000
	goto l000000000046F5A8
	// succ:  l000000000046F5A8
l000000000046FA4C:
	x1 = Mem0[x21 + 8:word64]
	x0 = x20
	w2 = 0x00000003
	call named_function_string (retsize: 0;)
	goto l000000000046F968
	// succ:  l000000000046F968
l000000000046FA60:
	x1 = x5
	w2 = w5
	x0 = x20
	call bind_variable (retsize: 0;)
	w3 = Mem0[x0 + 40:word32]
	x5 = x0
	w3 = w3 | 0x00001000
	Mem0[x0 + 40:word32] = w3
	goto l000000000046F7CC
	// succ:  l000000000046F7CC
l000000000046FA84:
	call all_local_variables (retsize: 0;)
	x20 = x0
	branch x0 == 0x0000000000000000 l000000000046FA44
	// succ:  l000000000046FA90 l000000000046FA44
l000000000046FA90:
	x19 = x0
	x0 = Mem0[x19:word64]
	x19 = x19 + 8
	branch x0 == 0x0000000000000000 l000000000046FAA8
	// succ:  l000000000046FA9C l000000000046FAA8
l000000000046FA9C:
	call print_assignment (retsize: 0;)
	x0 = Mem0[x19:word64]
	x19 = x19 + 8
	branch x0 != 0x0000000000000000 l000000000046FA9C
	// succ:  l000000000046FAA8 l000000000046FA9C
l000000000046FAA8:
	x1 = 0x00000000004BE000
	x0 = x20
	x1 = x1 + 0x00000000000005E0
	w2 = 0x000000F4
	call sh_xfree (retsize: 0;)
	w0 = 0x00000000
	goto l000000000046F5A8
	// succ:  l000000000046F5A8
l000000000046FAC4:
	branch w28 != 0x00000000 l000000000046FB2C
	// succ:  l000000000046FAC8 l000000000046FB2C
l000000000046FAC8:
	w0 = 0x00000044
	NZ = cond(w22 & w0)
	C = false
	V = false
	branch Test(NE,Z) l000000000046FB2C
	// succ:  l000000000046FAD4 l000000000046FB2C
l000000000046FAD4:
	NZ = cond(w2 & w0)
	C = false
	V = false
	branch Test(NE,Z) l000000000046FB2C
	// succ:  l000000000046FADC l000000000046FB2C
l000000000046FADC:
	w4 = w28
	w6 = w28
	// succ:  l000000000046FAE4
l000000000046FAE4:
	w1 = Mem0[x29 + 96:word32]
	branch (w1 & 0x00000004) == 0x00000000 l000000000046FBB0
	// succ:  l000000000046FAEC l000000000046FBB0
l000000000046FAEC:
	branch (w3 & 0x00000004) == 0x00000000 l000000000046FBB0
	// succ:  l000000000046FAF0 l000000000046FBB0
l000000000046FAF0:
	x1 = 0x00000000004BE000
	w2 = 0x00000005
	x1 = x1 + 0x0000000000000650
	x0 = 0x0000000000000000
	dcgettext(x0, x1, x2)
	sp = sp + 0xFFFFFFFFFFFFFFF8
	x1 = x20
	call builtin_error (retsize: 0;)
	x0 = x20
	x1 = x27 + 0x00000000000005E0
	w2 = 0x000001DC
	call sh_xfree (retsize: 0;)
	x19 = Mem0[x19:word64]
	w24 = w24 + 0x00000001
	branch x19 != 0x0000000000000000 l000000000046F6E0
	// succ:  l000000000046FB28 l000000000046F6E0
l000000000046FB28:
	goto l000000000046F818
	// succ:  l000000000046F818
l000000000046FB2C:
	branch w21 == 0x00000000 l000000000046FD18
	// succ:  l000000000046FB30 l000000000046FD18
l000000000046FB30:
	x7 = Mem0[x29 + 136:word64]
	branch x7 == 0x0000000000000000 l000000000046FE38
	// succ:  l000000000046FB38 l000000000046FE38
l000000000046FB38:
	x7 = Mem0[x29 + 136:word64]
	w4 = 0x00000001
	v66 = Mem0[x7:byte]
	w6 = (word32) v66
	branch w6 == 0x00000000 l000000000046FAE4
	// succ:  l000000000046FB48 l000000000046FAE4
l000000000046FB48:
	v67 = Mem0[x7 + 1:byte]
	w1 = (word32) v67
	w0 = 0x00000001
	branch w1 == 0x00000000 l000000000046FB88
	// succ:  l000000000046FB54 l000000000046FB88
l000000000046FB54:
	v68 = Mem0[x7 + 2:byte]
	w1 = (word32) v68
	w0 = 0x00000002
	branch w1 == 0x00000000 l000000000046FB88
	// succ:  l000000000046FB60 l000000000046FB88
l000000000046FB60:
	x0 = x7
	Mem0[x29 + 152:word64] = x2
	Mem0[x29 + 160:word64] = x3
	Mem0[x29 + 176:word64] = x5
	Mem0[x29 + 168:word64] = x6
	strlen(x0)
	sp = sp + 0xFFFFFFFFFFFFFFF8
	x6 = Mem0[x29 + 168:word64]
	x5 = Mem0[x29 + 176:word64]
	x3 = Mem0[x29 + 160:word64]
	x2 = Mem0[x29 + 152:word64]
	// succ:  l000000000046FB88
l000000000046FB88:
	w31 = w6 - 0x00000028
	NZCV = cond(w31)
	branch Test(NE,Z) l000000000046FD80
	// succ:  l000000000046FB90 l000000000046FD80
l000000000046FB90:
	x7 = Mem0[x29 + 136:word64]
	x0 = x7 + (int64) ((int32) w0)
	v69 = Mem0[x0 + -1:byte]
	w0 = (word32) v69
	w31 = w0 - 0x00000029
	NZCV = cond(w31)
	w4 = (word32) Test(NE,Z)
	w31 = w0 - 0x00000029
	NZCV = cond(w31)
	w6 = (word32) Test(EQ,Z)
	goto l000000000046FAE4
	// succ:  l000000000046FAE4
l000000000046FBB0:
	branch (w1 & 0x00000040) == 0x00000000 l000000000046FBB8
	// succ:  l000000000046FBB4 l000000000046FBB8
l000000000046FBB4:
	branch (w3 & 0x00000040) == 0x00000000 l000000000046FAF0
	// succ:  l000000000046FBB8 l000000000046FAF0
l000000000046FBB8:
	w0 = w22 & 0x00000004
	branch (w22 & 0x00000004) == 0x00000000 l000000000046FBC4
	// succ:  l000000000046FBC0 l000000000046FBC4
l000000000046FBC0:
	branch (w3 & 0x00000040) == 0x00000000 l000000000046FCDC
	// succ:  l000000000046FBC4 l000000000046FCDC
l000000000046FBC4:
	branch (w22 & 0x00000040) == 0x00000000 l000000000046FD24
	// succ:  l000000000046FBC8 l000000000046FD24
l000000000046FBC8:
	branch w28 != 0x00000000 l000000000046FBD0
	// succ:  l000000000046FBCC l000000000046FBD0
l000000000046FBCC:
	branch w0 == 0x00000000 l000000000046FBDC
	// succ:  l000000000046FBD0 l000000000046FBDC
l000000000046FBD0:
	w0 = 0x00000044
	NZ = cond(w2 & w0)
	C = false
	V = false
	branch Test(EQ,Z) l000000000046FF28
	// succ:  l000000000046FBDC l000000000046FF28
l000000000046FBDC:
	w3 = w3 | w22
	w1 = w3 & ~w1
	NZCV = cond(w21 - w31)
	Mem0[x5 + 40:word32] = w1
	w0 = (word32) Test(NE,Z)
	branch (w6 & 0x00000001) == 0x00000000 l000000000046FC7C
	// succ:  l000000000046FBF4 l000000000046FC7C
l000000000046FBF4:
	branch (w4 & 0x00000001) == 0x00000000 l000000000046FC9C
	// succ:  l000000000046FBF8 l000000000046FC9C
l000000000046FBF8:
	branch w4 == 0x00000000 l000000000046FD8C
	// succ:  l000000000046FBFC l000000000046FD8C
l000000000046FBFC:
	branch (w1 & 0x00000040) == 0x00000000 l000000000046FEF4
	// succ:  l000000000046FC00 l000000000046FEF4
l000000000046FC00:
	x1 = x27 + 0x00000000000005E0
	w2 = 0x0000020E
	x0 = 0x0000000000000002
	Mem0[x29 + 176:word64] = x5
	call sh_xmalloc (retsize: 0;)
	x2 = x0
	x0 = 0x00000000004AC000
	x0 = x0 + 0xFFFFFFFFFFFFF988
	x5 = Mem0[x29 + 176:word64]
	v61 = Mem0[x0:word16]
	w1 = (word32) v61
	x3 = Mem0[x29 + 136:word64]
	w4 = Mem0[x29 + 116:word32]
	Mem0[x2:word16] = (word16) w1
	x0 = x5
	x1 = x20
	Mem0[x29 + 176:word64] = x5
	call bind_assoc_variable (retsize: 0;)
	x5 = Mem0[x29 + 176:word64]
	// succ:  l000000000046FC48
l000000000046FC48:
	w22 = w22 & 0x00000003
	branch w22 == 0x00000000 l000000000046FC58
	// succ:  l000000000046FC50 l000000000046FC58
l000000000046FC50:
	w0 = Mem0[x5 + 40:word32]
	branch (w0 & 0x00000000) == 0x00000000 l000000000046FE44
	// succ:  l000000000046FC58 l000000000046FE44
l000000000046FC58:
	x0 = x20
	call stupidly_hack_special_variables (retsize: 0;)
	x0 = x20
	x1 = x27 + 0x00000000000005E0
	w2 = 0x00000237
	call sh_xfree (retsize: 0;)
	x19 = Mem0[x19:word64]
	branch x19 != 0x0000000000000000 l000000000046F6E0
	// succ:  l000000000046FC78 l000000000046F6E0
l000000000046FC78:
	goto l000000000046F818
	// succ:  l000000000046F818
l000000000046FC7C:
	branch w0 == 0x00000000 l000000000046FBF4
	// succ:  l000000000046FC80 l000000000046FBF4
l000000000046FC80:
	x1 = Mem0[x29 + 136:word64]
	w2 = Mem0[x29 + 116:word32]
	x0 = x5
	Mem0[x29 + 176:word64] = x5
	call assign_array_var_from_string (retsize: 0;)
	x5 = Mem0[x29 + 176:word64]
	goto l000000000046FC48
	// succ:  l000000000046FC48
l000000000046FC9C:
	x7 = Mem0[x29 + 120:word64]
	branch x7 == 0x0000000000000000 l000000000046FBF8
	// succ:  l000000000046FCA4 l000000000046FBF8
l000000000046FCA4:
	w0 = 0x0000005B
	x1 = Mem0[x29 + 136:word64]
	Mem0[x7:byte] = (byte) w0
	w2 = 0x00000000
	x0 = x20
	call assign_array_element (retsize: 0;)
	x7 = Mem0[x29 + 120:word64]
	x5 = x0
	Mem0[x7:byte] = 0x00
	branch x0 != 0x0000000000000000 l000000000046FC48
	// succ:  l000000000046FCCC l000000000046FC48
l000000000046FCCC:
	x0 = x20
	x1 = x27 + 0x00000000000005E0
	w2 = 0x00000207
	goto l000000000046F924
	// succ:  l000000000046F924
l000000000046FCDC:
	x1 = 0x00000000004BE000
	w2 = 0x00000005
	x1 = x1 + 0x0000000000000680
	x0 = 0x0000000000000000
	dcgettext(x0, x1, x2)
	sp = sp + 0xFFFFFFFFFFFFFFF8
	x1 = x20
	call builtin_error (retsize: 0;)
	x0 = x20
	x1 = x27 + 0x00000000000005E0
	w2 = 0x000001E3
	call sh_xfree (retsize: 0;)
	x19 = Mem0[x19:word64]
	w24 = w24 + 0x00000001
	branch x19 != 0x0000000000000000 l000000000046F6E0
	// succ:  l000000000046FD14 l000000000046F6E0
l000000000046FD14:
	goto l000000000046F818
	// succ:  l000000000046F818
l000000000046FD18:
	w4 = w21
	w6 = w21
	goto l000000000046FAE4
	// succ:  l000000000046FAE4
l000000000046FD24:
	branch (w3 & 0x00000004) == 0x00000000 l000000000046FDE8
	// succ:  l000000000046FD28 l000000000046FDE8
l000000000046FD28:
	branch (w3 & 0x00000040) == 0x00000000 l000000000046FBDC
	// succ:  l000000000046FD2C l000000000046FBDC
l000000000046FD2C:
	x0 = x5
	Mem0[x29 + 160:word64] = x1
	Mem0[x29 + 152:word64] = x4
	Mem0[x29 + 168:word64] = x6
	call convert_var_to_assoc (retsize: 0;)
	x5 = x0
	w3 = Mem0[x0 + 40:word32]
	x1 = Mem0[x29 + 160:word64]
	x4 = Mem0[x29 + 152:word64]
	x6 = Mem0[x29 + 168:word64]
	goto l000000000046FBDC
	// succ:  l000000000046FBDC
l000000000046FD58:
	x0 = x20
	call sh_readonly (retsize: 0;)
	x0 = x20
	x1 = x27 + 0x00000000000005E0
	w2 = 0x000001BD
	call sh_xfree (retsize: 0;)
	x19 = Mem0[x19:word64]
	w24 = w24 + 0x00000001
	branch x19 != 0x0000000000000000 l000000000046F6E0
	// succ:  l000000000046FD7C l000000000046F6E0
l000000000046FD7C:
	goto l000000000046F818
	// succ:  l000000000046F818
l000000000046FD80:
	w4 = 0x00000001
	w6 = 0x00000000
	goto l000000000046FAE4
	// succ:  l000000000046FAE4
l000000000046FD8C:
	branch w0 == 0x00000000 l000000000046FC48
	// succ:  l000000000046FD90 l000000000046FC48
l000000000046FD90:
	x1 = Mem0[x29 + 136:word64]
	w2 = Mem0[x29 + 116:word32]
	x0 = x5
	Mem0[x29 + 176:word64] = x5
	call bind_variable_value (retsize: 0;)
	x5 = Mem0[x29 + 176:word64]
	goto l000000000046FC48
	// succ:  l000000000046FC48
l000000000046FDAC:
	x0 = x20
	call sh_readonly (retsize: 0;)
	goto l000000000046F7F4
	// succ:  l000000000046F7F4
l000000000046FDB8:
	x1 = 0x00000000004BE000
	x1 = x1 + 0x0000000000000618
	w2 = 0x00000005
	x0 = 0x0000000000000000
	dcgettext(x0, x1, x2)
	sp = sp + 0xFFFFFFFFFFFFFFF8
	call builtin_error (retsize: 0;)
	x0 = x20
	x1 = x27 + 0x00000000000005E0
	w2 = 0x0000016F
	call sh_xfree (retsize: 0;)
	w0 = 0x00000001
	goto l000000000046F504
	// succ:  l000000000046F504
l000000000046FDE8:
	x1 = 0x00000000004AE000
	w2 = 0x00000005
	x1 = x1 + 0x0000000000000750
	x0 = 0x0000000000000000
	dcgettext(x0, x1, x2)
	sp = sp + 0xFFFFFFFFFFFFFFF8
	x1 = x20
	call builtin_error (retsize: 0;)
	x0 = x20
	x1 = x27 + 0x00000000000005E0
	w2 = 0x000001E9
	call sh_xfree (retsize: 0;)
	x19 = Mem0[x19:word64]
	w24 = w24 + 0x00000001
	branch x19 != 0x0000000000000000 l000000000046F6E0
	// succ:  l000000000046FE20 l000000000046F6E0
l000000000046FE20:
	goto l000000000046F818
	// succ:  l000000000046F818
l000000000046FE24:
	x0 = x20
	call make_new_assoc_variable (retsize: 0;)
	x5 = x0
	w3 = Mem0[x0 + 40:word32]
	goto l000000000046F7CC
	// succ:  l000000000046F7CC
l000000000046FE38:
	v70 = Mem0[x7:byte]
	w6 = (word32) v70
	w0 = Mem0[x29 + 136:word32]
	goto l000000000046FB88
	// succ:  l000000000046FB88
l000000000046FE44:
	x0 = Mem0[x5:word64]
	Mem0[x29 + 176:word64] = x5
	call find_tempenv_variable (retsize: 0;)
	x5 = Mem0[x29 + 176:word64]
	branch x0 == 0x0000000000000000 l000000000046FEE4
	// succ:  l000000000046FE58 l000000000046FEE4
l000000000046FE58:
	x0 = Mem0[x5 + 8:word64]
	branch x0 == 0x0000000000000000 l000000000046FFC0
	// succ:  l000000000046FE60 l000000000046FFC0
l000000000046FE60:
	strlen(x0)
	sp = sp + 0xFFFFFFFFFFFFFFF8
	x1 = x27 + 0x00000000000005E0
	w2 = 0x0000022A
	x0 = x0 + 0x0000000000000001
	call sh_xmalloc (retsize: 0;)
	x5 = Mem0[x29 + 176:word64]
	x1 = Mem0[x5 + 8:word64]
	strcpy(x0, x1)
	sp = sp + 0xFFFFFFFFFFFFFFF8
	x5 = Mem0[x29 + 176:word64]
	x21 = x0
	// succ:  l000000000046FE88
l000000000046FE88:
	x0 = Mem0[x5:word64]
	x1 = x21
	w2 = 0x00000000
	Mem0[x29 + 176:word64] = x5
	call bind_variable (retsize: 0;)
	x5 = Mem0[x29 + 176:word64]
	x2 = x0
	w0 = Mem0[x5 + 40:word32]
	w3 = Mem0[x2 + 40:word32]
	w0 = w0 & 0xFFEFFFFF
	w1 = Mem0[x2 + 44:word32]
	w0 = w0 | w3
	Mem0[x2 + 40:word32] = w0
	NZCV = cond(w1 - w31)
	branch Test(LE,ZCV) l000000000046FECC
	// succ:  l000000000046FEC4 l000000000046FECC
l000000000046FEC4:
	w0 = w0 | 0x00200000
	Mem0[x2 + 40:word32] = w0
	// succ:  l000000000046FECC
l000000000046FECC:
	x0 = x21
	x1 = x27 + 0x00000000000005E0
	w2 = 0x0000022F
	Mem0[x29 + 176:word64] = x5
	call sh_xfree (retsize: 0;)
	x5 = Mem0[x29 + 176:word64]
	// succ:  l000000000046FEE4
l000000000046FEE4:
	w0 = Mem0[x5 + 40:word32]
	w0 = w0 | 0x00200000
	Mem0[x5 + 40:word32] = w0
	goto l000000000046FC58
	// succ:  l000000000046FC58
l000000000046FEF4:
	x2 = Mem0[x29 + 136:word64]
	w3 = Mem0[x29 + 116:word32]
	x0 = x20
	x1 = 0x0000000000000000
	Mem0[x29 + 176:word64] = x5
	call bind_array_variable (retsize: 0;)
	x5 = Mem0[x29 + 176:word64]
	goto l000000000046FC48
	// succ:  l000000000046FC48
l000000000046FF14:
	x0 = x20
	call make_new_array_variable (retsize: 0;)
	x5 = x0
	w3 = Mem0[x0 + 40:word32]
	goto l000000000046F7CC
	// succ:  l000000000046F7CC
l000000000046FF28:
	x0 = x5
	Mem0[x29 + 160:word64] = x1
	Mem0[x29 + 152:word64] = x4
	Mem0[x29 + 168:word64] = x6
	call convert_var_to_array (retsize: 0;)
	x5 = x0
	w3 = Mem0[x0 + 40:word32]
	x6 = Mem0[x29 + 168:word64]
	x4 = Mem0[x29 + 152:word64]
	x1 = Mem0[x29 + 160:word64]
	goto l000000000046FBDC
	// succ:  l000000000046FBDC
l000000000046FF54:
	w1 = Mem0[x29 + 100:word32]
	branch w1 != 0x00000000 l000000000046FA38
	// succ:  l000000000046FF5C l000000000046FA38
l000000000046FF5C:
	x0 = x19
	v71 = sp + 32
	x21 = Mem0[v71:word64]
	v71 = v71 + 8
	x22 = Mem0[v71:word64]
	v72 = sp + 16
	x19 = Mem0[v72:word64]
	v72 = v72 + 8
	x20 = Mem0[v72:word64]
	v73 = sp + 48
	x23 = Mem0[v73:word64]
	v73 = v73 + 8
	x24 = Mem0[v73:word64]
	v74 = sp + 64
	x25 = Mem0[v74:word64]
	v74 = v74 + 8
	x26 = Mem0[v74:word64]
	v75 = sp + 80
	x27 = Mem0[v75:word64]
	v75 = v75 + 8
	x28 = Mem0[v75:word64]
	x29 = Mem0[sp:word64]
	sp = sp + 8
	x30 = Mem0[sp:word64]
	sp = sp + 192
	// succ:  l000000000046FF78_thunk_set_builtin
l000000000046FF78_thunk_set_builtin:
	call set_builtin (retsize: 0;)
	return
	// succ:  fn000000000046F470_exit
l000000000046FF7C:
	x0 = Mem0[x21:word64]
	call find_function_def (retsize: 0;)
	branch x0 == 0x0000000000000000 l000000000046FFEC
	// succ:  l000000000046FF88 l000000000046FFEC
l000000000046FF88:
	w3 = Mem0[x0 + 4:word32]
	x4 = Mem0[x0 + 24:word64]
	x2 = Mem0[x21:word64]
	x1 = 0x00000000004BE000
	x1 = x1 + 0x0000000000000640
	w0 = 0x00000001
	__printf_chk(x0, x1, Mem0[sp:<unknown>])
	sp = sp + 0xFFFFFFFFFFFFFFF8
	goto l000000000046F8F4
	// succ:  l000000000046F8F4
l000000000046FFA8:
	NZCV = cond(w0 - w31)
	w1 = Mem0[x29 + 112:word32]
	w0 = (word32) Test(EQ,Z)
	call show_all_var_attributes (retsize: 0;)
	w0 = 0x00000000
	goto l000000000046F5A8
	// succ:  l000000000046F5A8
l000000000046FFC0:
	x1 = x27 + 0x00000000000005E0
	x0 = 0x0000000000000001
	w2 = 0x0000022A
	Mem0[x29 + 176:word64] = x5
	call sh_xmalloc (retsize: 0;)
	x7 = Mem0[x29 + 144:word64]
	x21 = x0
	v63 = Mem0[x7:byte]
	w1 = (word32) v63
	Mem0[x0:byte] = (byte) w1
	x5 = Mem0[x29 + 176:word64]
	goto l000000000046FE88
	// succ:  l000000000046FE88
l000000000046FFEC:
	x0 = Mem0[x21:word64]
	puts(x0)
	sp = sp + 0xFFFFFFFFFFFFFFF8
	goto l000000000046F8F4
	// succ:  l000000000046F8F4
l000000000046FFF8:
	w7 = Mem0[x29 + 120:word32]
	w28 = w21
	Mem0[x29 + 116:word32] = w7
	x7 = Mem0[x29 + 144:word64]
	Mem0[x29 + 136:word64] = x7
	goto l000000000046F758
	// succ:  l000000000046F758
fn000000000046F470_exit:


// declare_builtin
// Return size: 0
void declare_builtin()
declare_builtin_entry:
	// succ:  l0000000000470010
l0000000000470010:
	sp = fp
	w1 = 0x00000000
	// succ:  l0000000000470014_thunk_fn000000000046F470
l0000000000470014_thunk_fn000000000046F470:
	call fn000000000046F470 (retsize: 0;)
	return
	// succ:  declare_builtin_exit
declare_builtin_exit:


// local_builtin
// Return size: 0
void local_builtin()
local_builtin_entry:
	// succ:  l0000000000470018
l0000000000470018:
	sp = fp
	sp = sp + -16
	Mem0[sp:word64] = x29
	sp = sp + 8
	Mem0[sp:word64] = x30
	x29 = x31 + 0x0000000000000000
	x1 = 0x00000000004DF000
	w1 = Mem0[x1 + 3168:word32]
	branch w1 != 0x00000000 l0000000000470050
	// succ:  l000000000047002C l0000000000470050
l000000000047002C:
	x1 = 0x00000000004BE000
	x1 = x1 + 0x00000000000006B0
	w2 = 0x00000005
	x0 = 0x0000000000000000
	dcgettext(x0, x1, x2)
	sp = sp + 0xFFFFFFFFFFFFFFF8
	call builtin_error (retsize: 0;)
	w0 = 0x00000001
	x29 = Mem0[sp:word64]
	sp = sp + 8
	x30 = Mem0[sp:word64]
	sp = sp + 16
	return
	// succ:  local_builtin_exit
l0000000000470050:
	x29 = Mem0[sp:word64]
	sp = sp + 8
	x30 = Mem0[sp:word64]
	sp = sp + 16
	w1 = 0x00000001
	// succ:  l0000000000470058_thunk_fn000000000046F470
l0000000000470058_thunk_fn000000000046F470:
	call fn000000000046F470 (retsize: 0;)
	return
	// succ:  local_builtin_exit
local_builtin_exit:


// echo_builtin
// Return size: 0
void echo_builtin()
echo_builtin_entry:
	// succ:  l000000000047005C
l000000000047005C:
	sp = fp
	sp = sp + -112
	Mem0[sp:word64] = x29
	sp = sp + 8
	Mem0[sp:word64] = x30
	x29 = x31 + 0x0000000000000000
	x1 = 0x00000000004DE000
	v9 = sp + 32
	Mem0[v9:word64] = x21
	v9 = v9 + 8
	Mem0[v9:word64] = x22
	w1 = Mem0[x1 + 1716:word32]
	x21 = x0
	x0 = 0x00000000004E1000
	v14 = sp + 48
	Mem0[v14:word64] = x23
	v14 = v14 + 8
	Mem0[v14:word64] = x24
	x0 = x0 + 0x00000000000006B0
	v17 = sp + 16
	Mem0[v17:word64] = x19
	v17 = v17 + 8
	Mem0[v17:word64] = x20
	v20 = sp + 64
	Mem0[v20:word64] = x25
	v20 = v20 + 8
	Mem0[v20:word64] = x26
	Mem0[sp + 80:word64] = x27
	w23 = Mem0[x0:word32]
	branch w1 == 0x00000000 l0000000000470098
	// succ:  l0000000000470094 l0000000000470098
l0000000000470094:
	branch w23 != 0x00000000 l00000000004702FC
	// succ:  l0000000000470098 l00000000004702FC
l0000000000470098:
	branch x21 == 0x0000000000000000 l000000000047024C
	// succ:  l000000000047009C l000000000047024C
l000000000047009C:
	x0 = Mem0[x21 + 8:word64]
	x25 = Mem0[x0:word64]
	branch x25 == 0x0000000000000000 l0000000000470324
	// succ:  l00000000004700A8 l0000000000470324
l00000000004700A8:
	v24 = Mem0[x25:byte]
	w0 = (word32) v24
	x22 = 0x00000000004BE000
	w31 = w0 - 0x0000002D
	NZCV = cond(w31)
	w24 = 0x00000001
	x22 = x22 + 0x00000000000006D0
	branch Test(NE,Z) l00000000004700F8
	// succ:  l00000000004700C0 l00000000004700F8
l00000000004700C0:
	Mem0[x29 + 100:word32] = 0x00000000
	v29 = Mem0[x25 + 1:byte]
	w1 = (word32) v29
	x26 = x25 + 0x0000000000000001
	branch w1 == 0x00000000 l00000000004700F8
	// succ:  l00000000004700D0 l00000000004700F8
l00000000004700D0:
	x20 = x25 + 0x0000000000000002
	w19 = 0x00000001
	goto l00000000004700EC
	// succ:  l00000000004700EC
l00000000004700DC:
	Mem0[x29 + 100:word32] = w19
	v34 = Mem0[x20:byte]
	w1 = (word32) v34
	x20 = x20 + 1
	w19 = w19 + 0x00000001
	branch w1 == 0x00000000 l0000000000470280
	// succ:  l00000000004700EC l0000000000470280
l00000000004700EC:
	x0 = x22
	strchr(x0, x1)
	sp = sp + 0xFFFFFFFFFFFFFFF8
	branch x0 != 0x0000000000000000 l00000000004700DC
	// succ:  l00000000004700F8 l00000000004700DC
l00000000004700F8:
	x20 = 0x00000000004DE000
	x0 = Mem0[x20 + 1648:word64]
	x27 = 0x00000000004E1000
	call clearerr (retsize: 0;)
	w0 = Mem0[x27 + 648:word32]
	w0 = w0 + 0x00000001
	Mem0[x27 + 648:word32] = w0
	// succ:  l0000000000470114
l0000000000470114:
	x26 = 0x00000000004BF000
	x25 = 0x00000000004BE000
	Mem0[x29 + 96:word32] = 0x00000000
	Mem0[x29 + 100:word32] = 0x00000000
	x26 = x26 + 0x0000000000000050
	x25 = x25 + 0x00000000000006D8
	x0 = Mem0[x21 + 8:word64]
	branch w23 == 0x00000000 l00000000004701F4
	// succ:  l0000000000470134 l00000000004701F4
l0000000000470134:
	x19 = Mem0[x0:word64]
	branch x19 == 0x0000000000000000 l0000000000470244
	// succ:  l000000000047013C l0000000000470244
l000000000047013C:
	v31 = Mem0[x19:byte]
	w0 = (word32) v31
	w1 = 0x00000000
	branch w0 == 0x00000000 l000000000047016C
	// succ:  l0000000000470148 l000000000047016C
l0000000000470148:
	v32 = Mem0[x19 + 1:byte]
	w0 = (word32) v32
	w1 = 0x00000001
	branch w0 == 0x00000000 l000000000047016C
	// succ:  l0000000000470154 l000000000047016C
l0000000000470154:
	v33 = Mem0[x19 + 2:byte]
	w0 = (word32) v33
	w1 = 0x00000002
	branch w0 == 0x00000000 l000000000047016C
	// succ:  l0000000000470160 l000000000047016C
l0000000000470160:
	x0 = x19
	strlen(x0)
	sp = sp + 0xFFFFFFFFFFFFFFF8
	w1 = w0
	// succ:  l000000000047016C
l000000000047016C:
	x0 = x19
	w2 = 0x00000001
	x3 = x29 + 0x0000000000000064
	x4 = x29 + 0x0000000000000060
	call ansicstr (retsize: 0;)
	x22 = x0
	branch x0 == 0x0000000000000000 l00000000004701C8
	// succ:  l0000000000470188 l00000000004701C8
l0000000000470188:
	w0 = Mem0[x29 + 96:word32]
	NZCV = cond(w0 - w31)
	branch Test(LE,ZCV) l00000000004701B8
	// succ:  l0000000000470194 l00000000004701B8
l0000000000470194:
	x19 = x22
	// succ:  l0000000000470198
l0000000000470198:
	v39 = Mem0[x19:byte]
	w0 = (word32) v39
	x19 = x19 + 1
	x1 = Mem0[x20 + 1648:word64]
	_IO_putc(x0, x1)
	sp = sp + 0xFFFFFFFFFFFFFFF8
	w2 = Mem0[x29 + 96:word32]
	w2 = w2 - 0x00000001
	Mem0[x29 + 96:word32] = w2
	NZCV = cond(w2 - w31)
	branch Test(GT,NZV) l0000000000470198
	// succ:  l00000000004701B8 l0000000000470198
l00000000004701B8:
	x0 = x22
	x1 = x25
	w2 = 0x000000B6
	call sh_xfree (retsize: 0;)
	// succ:  l00000000004701C8
l00000000004701C8:
	w0 = Mem0[x29 + 100:word32]
	x21 = Mem0[x21:word64]
	branch w0 != 0x00000000 l0000000000470214
	// succ:  l00000000004701D4 l0000000000470214
l00000000004701D4:
	branch x21 == 0x0000000000000000 l000000000047026C
	// succ:  l00000000004701D8 l000000000047026C
l00000000004701D8:
	x1 = Mem0[x20 + 1648:word64]
	w0 = 0x00000020
	_IO_putc(x0, x1)
	sp = sp + 0xFFFFFFFFFFFFFFF8
	Mem0[x29 + 96:word32] = 0x00000000
	Mem0[x29 + 100:word32] = 0x00000000
	x0 = Mem0[x21 + 8:word64]
	branch w23 != 0x00000000 l0000000000470134
	// succ:  l00000000004701F4 l0000000000470134
l00000000004701F4:
	x2 = Mem0[x0:word64]
	branch x2 == 0x0000000000000000 l00000000004701C8
	// succ:  l00000000004701FC l00000000004701C8
l00000000004701FC:
	w0 = 0x00000001
	x1 = x26
	__printf_chk(x0, x1, Mem0[sp:<unknown>])
	sp = sp + 0xFFFFFFFFFFFFFFF8
	w0 = Mem0[x29 + 100:word32]
	x21 = Mem0[x21:word64]
	branch w0 == 0x00000000 l00000000004701D4
	// succ:  l0000000000470214 l00000000004701D4
l0000000000470214:
	w1 = Mem0[x27 + 648:word32]
	w0 = 0x00000000
	w1 = w1 - 0x00000001
	Mem0[x27 + 648:word32] = w1
	call sh_chkwrite (retsize: 0;)
	v47 = sp + 16
	x19 = Mem0[v47:word64]
	v47 = v47 + 8
	x20 = Mem0[v47:word64]
	v48 = sp + 32
	x21 = Mem0[v48:word64]
	v48 = v48 + 8
	x22 = Mem0[v48:word64]
	v49 = sp + 48
	x23 = Mem0[v49:word64]
	v49 = v49 + 8
	x24 = Mem0[v49:word64]
	v50 = sp + 64
	x25 = Mem0[v50:word64]
	v50 = v50 + 8
	x26 = Mem0[v50:word64]
	x27 = Mem0[sp + 80:word64]
	x29 = Mem0[sp:word64]
	sp = sp + 8
	x30 = Mem0[sp:word64]
	sp = sp + 112
	return
	// succ:  echo_builtin_exit
l0000000000470244:
	w1 = w19
	goto l000000000047016C
	// succ:  l000000000047016C
l000000000047024C:
	w24 = 0x00000001
	// succ:  l0000000000470250
l0000000000470250:
	x20 = 0x00000000004DE000
	x0 = Mem0[x20 + 1648:word64]
	x27 = 0x00000000004E1000
	call clearerr (retsize: 0;)
	w0 = Mem0[x27 + 648:word32]
	w0 = w0 + 0x00000001
	Mem0[x27 + 648:word32] = w0
	// succ:  l000000000047026C
l000000000047026C:
	branch w24 == 0x00000000 l0000000000470214
	// succ:  l0000000000470270 l0000000000470214
l0000000000470270:
	x1 = Mem0[x20 + 1648:word64]
	w0 = 0x0000000A
	_IO_putc(x0, x1)
	sp = sp + 0xFFFFFFFFFFFFFFF8
	goto l0000000000470214
	// succ:  l0000000000470214
l0000000000470280:
	v41 = Mem0[x25 + 1:byte]
	w1 = (word32) v41
	branch w1 == 0x00000000 l00000000004700F8
	// succ:  l0000000000470288 l00000000004700F8
l0000000000470288:
	Mem0[x29 + 100:word32] = w1
	x0 = x26
	w31 = w1 - 0x00000065
	NZCV = cond(w31)
	branch w1 == 0x00000000 l00000000004702C0
	// succ:  l0000000000470298 l00000000004702C0
l0000000000470298:
	branch Test(EQ,Z) l00000000004702F0
	// succ:  l000000000047029C l00000000004702F0
l000000000047029C:
	w31 = w1 - 0x0000006E
	NZCV = cond(w31)
	branch Test(EQ,Z) l00000000004702E4
	// succ:  l00000000004702A4 l00000000004702E4
l00000000004702A4:
	w31 = w1 - 0x00000045
	NZCV = cond(w31)
	branch Test(NE,Z) l00000000004700F8
	// succ:  l00000000004702AC l00000000004700F8
l00000000004702AC:
	x0 = x0 + 1
	v42 = Mem0[x0:byte]
	w1 = (word32) v42
	w23 = 0x00000000
	// succ:  l00000000004702B4
l00000000004702B4:
	Mem0[x29 + 100:word32] = w1
	w31 = w1 - 0x00000065
	NZCV = cond(w31)
	branch w1 != 0x00000000 l0000000000470298
	// succ:  l00000000004702C0 l0000000000470298
l00000000004702C0:
	x21 = Mem0[x21:word64]
	branch x21 == 0x0000000000000000 l0000000000470250
	// succ:  l00000000004702C8 l0000000000470250
l00000000004702C8:
	x0 = Mem0[x21 + 8:word64]
	x25 = Mem0[x0:word64]
	branch x25 == 0x0000000000000000 l00000000004700F8
	// succ:  l00000000004702D4 l00000000004700F8
l00000000004702D4:
	v43 = Mem0[x25:byte]
	w0 = (word32) v43
	w31 = w0 - 0x0000002D
	NZCV = cond(w31)
	branch Test(EQ,Z) l00000000004700C0
	// succ:  l00000000004702E0 l00000000004700C0
l00000000004702E0:
	goto l00000000004700F8
	// succ:  l00000000004700F8
l00000000004702E4:
	w24 = 0x00000000
	x0 = x0 + 1
	v45 = Mem0[x0:byte]
	w1 = (word32) v45
	goto l00000000004702B4
	// succ:  l00000000004702B4
l00000000004702F0:
	w23 = 0x00000001
	x0 = x0 + 1
	v44 = Mem0[x0:byte]
	w1 = (word32) v44
	goto l00000000004702B4
	// succ:  l00000000004702B4
l00000000004702FC:
	x20 = 0x00000000004DE000
	x0 = Mem0[x20 + 1648:word64]
	x27 = 0x00000000004E1000
	call clearerr (retsize: 0;)
	w0 = Mem0[x27 + 648:word32]
	w0 = w0 + 0x00000001
	Mem0[x27 + 648:word32] = w0
	branch x21 == 0x0000000000000000 l0000000000470270
	// succ:  l000000000047031C l0000000000470270
l000000000047031C:
	w24 = 0x00000001
	goto l0000000000470114
	// succ:  l0000000000470114
l0000000000470324:
	w24 = 0x00000001
	goto l00000000004700F8
	// succ:  l00000000004700F8
echo_builtin_exit:


// enable_builtin
// Return size: 0
void enable_builtin()
enable_builtin_entry:
	// succ:  l000000000047032C
l000000000047032C:
	sp = fp
	sp = sp + -144
	Mem0[sp:word64] = x29
	sp = sp + 8
	Mem0[sp:word64] = x30
	x29 = x31 + 0x0000000000000000
	v8 = sp + 16
	Mem0[v8:word64] = x19
	v8 = v8 + 8
	Mem0[v8:word64] = x20
	v11 = sp + 32
	Mem0[v11:word64] = x21
	v11 = v11 + 8
	Mem0[v11:word64] = x22
	x20 = 0x00000000004BE000
	x22 = 0x00000000004BE000
	v14 = sp + 48
	Mem0[v14:word64] = x23
	v14 = v14 + 8
	Mem0[v14:word64] = x24
	v17 = sp + 64
	Mem0[v17:word64] = x25
	v17 = v17 + 8
	Mem0[v17:word64] = x26
	v20 = sp + 80
	Mem0[v20:word64] = x27
	v20 = v20 + 8
	Mem0[v20:word64] = x28
	x21 = x0
	w19 = 0x00000000
	call reset_internal_getopt (retsize: 0;)
	x20 = x20 + 0x0000000000000720
	x22 = x22 + 0x000000000000070C
	x23 = 0x00000000004E3000
	x0 = x21
	x1 = x20
	call internal_getopt (retsize: 0;)
	w31 = w0 + 0x00000001
	NZCV = cond(w31)
	branch Test(EQ,Z) l00000000004703D8
	// succ:  l000000000047037C l00000000004703D8
l000000000047037C:
	w3 = w0 - 0x00000061
	w31 = w3 - 0x00000012
	NZCV = cond(w31)
	branch Test(ULE,ZC) l00000000004703B0
	// succ:  l0000000000470388 l00000000004703B0
l0000000000470388:
	call builtin_usage (retsize: 0;)
	w21 = 0x00000102
	// succ:  l0000000000470390
l0000000000470390:
	w0 = w21
	v31 = sp + 16
	x19 = Mem0[v31:word64]
	v31 = v31 + 8
	x20 = Mem0[v31:word64]
	v32 = sp + 32
	x21 = Mem0[v32:word64]
	v32 = v32 + 8
	x22 = Mem0[v32:word64]
	v33 = sp + 48
	x23 = Mem0[v33:word64]
	v33 = v33 + 8
	x24 = Mem0[v33:word64]
	v34 = sp + 64
	x25 = Mem0[v34:word64]
	v34 = v34 + 8
	x26 = Mem0[v34:word64]
	v35 = sp + 80
	x27 = Mem0[v35:word64]
	v35 = v35 + 8
	x28 = Mem0[v35:word64]
	x29 = Mem0[sp:word64]
	sp = sp + 8
	x30 = Mem0[sp:word64]
	sp = sp + 144
	return
	// succ:  enable_builtin_exit
l00000000004703B0:
	v50 = Mem0[x22 + (uint64) ((uint32) w3):byte]
	w0 = (word32) v50
	x1 = 0x00000000004703C0
	x0 = x1 + (int64) ((int8) w0)
	call x0 (retsize: 0;)
	return
	// succ:  enable_builtin_exit
l00000000004703D8:
	x1 = 0x00000000004DF000
	w0 = Mem0[x1 + 3696:word32]
	x2 = 0x00000000004E3000
	x20 = Mem0[x2 + 3856:word64]
	branch w0 == 0x00000000 l00000000004703F4
	// succ:  l00000000004703EC l00000000004703F4
l00000000004703EC:
	w31 = w19 & 0x00000006
	NZ = cond(w31)
	C = false
	V = false
	branch Test(NE,Z) l00000000004707A8
	// succ:  l00000000004703F4 l00000000004707A8
l00000000004703F4:
	branch x20 == 0x0000000000000000 l0000000000470570
	// succ:  l00000000004703F8 l0000000000470570
l00000000004703F8:
	w21 = w19 & 0x00000010
	branch (w19 & 0x00000010) == 0x00000000 l0000000000470570
	// succ:  l0000000000470400 l0000000000470570
l0000000000470400:
	w0 = w19 & 0x00000004
	branch (w19 & 0x00000004) == 0x00000000 l0000000000470658
	// succ:  l0000000000470408 l0000000000470658
l0000000000470408:
	w21 = w19 & 0x00000002
	branch (w19 & 0x00000002) == 0x00000000 l0000000000470878
	// succ:  l0000000000470410 l0000000000470878
l0000000000470410:
	x23 = 0x00000000004D7000
	x26 = x31 | 0xAAAAAAAAAAAAAAAA
	x25 = 0x00000000004BE000
	w21 = w0
	x23 = x23 + 0xFFFFFFFFFFFFF9C8
	x26 = x26 + 0x0000000000000001
	x25 = x25 + 0x0000000000000770
	// succ:  l000000000047042C
l000000000047042C:
	x0 = Mem0[x20 + 8:word64]
	w1 = 0x00000001
	x24 = Mem0[x0:word64]
	x0 = x24
	call builtin_address_internal (retsize: 0;)
	x19 = x0
	branch x0 == 0x0000000000000000 l0000000000470910
	// succ:  l0000000000470448 l0000000000470910
l0000000000470448:
	w2 = Mem0[x0 + 16:word32]
	w3 = w2 & 0x00000004
	branch (w2 & 0x00000004) == 0x00000000 l0000000000470828
	// succ:  l0000000000470454 l0000000000470828
l0000000000470454:
	w8 = Mem0[x23:word32]
	x22 = 0x00000000004D7000
	NZCV = cond(w8 - w31)
	x5 = Mem0[x0 + 40:word64]
	x7 = Mem0[x22 + 2512:word64]
	branch Test(LE,ZCV) l00000000004704A0
	// succ:  l000000000047046C l00000000004704A0
l000000000047046C:
	w6 = w8 - 0x00000001
	x0 = x7 + 0x0000000000000030
	w1 = 0x00000030
	x2 = x7
	x6 = x0 + (uint64) (w6 *u w1)
	x4 = Mem0[x2 + 40:word64]
	x2 = x2 + 0x0000000000000030
	x31 = x5 - x4
	NZCV = cond(x31)
l00000000004704A0:
	w8 = w8 + (w8 << 1)
	x19 = x19 - x7
l000000000047052C:
	x20 = Mem0[x20:word64]
	branch x20 != 0x0000000000000000 l000000000047042C
	// succ:  l0000000000470534 l000000000047042C
l0000000000470534:
	x0 = 0x00000000004D7000
	x0 = x0 + 0x0000000000000298
	call set_itemlist_dirty (retsize: 0;)
	goto l0000000000470390
	// succ:  l0000000000470390
l0000000000470570:
	w21 = 0x00000003
	branch (w19 & 0x00000001) == 0x00000000 l0000000000470588
	// succ:  l0000000000470578 l0000000000470588
l0000000000470578:
	w0 = w19 & 0x00000008
	NZCV = cond(w0 - w31)
	w21 = 0x00000002
l0000000000470588:
	x25 = 0x00000000004D7000
	w19 = w19 & 0x00000020
	w0 = Mem0[x25 + 2504:word32]
	NZCV = cond(w19 - w31)
	w1 = w21 | 0x00000004
l0000000000470658:
	w0 = w19 & 0x00000008
	NZCV = cond(w0 - w31)
	w3 = 0x00000002
l00000000004707A8:
	x0 = 0x0000000000000000
	call sh_restricted (retsize: 0;)
	w21 = 0x00000001
	goto l0000000000470390
	// succ:  l0000000000470390
l0000000000470828:
	x1 = 0x00000000004BE000
	x1 = x1 + 0x00000000000007D8
	w2 = 0x00000005
	x0 = 0x0000000000000000
	dcgettext(x0, x1, x2)
	sp = sp + 0xFFFFFFFFFFFFFFF8
	x1 = x24
	call builtin_error (retsize: 0;)
	w21 = 0x00000001
	goto l000000000047052C
	// succ:  l000000000047052C
l0000000000470878:
	x23 = 0x00000000004D7000
	x22 = 0x00000000004D7000
	w19 = w19 & 0x00000008
	x23 = x23 + 0x00000000000002E8
	x22 = x22 + 0x00000000000002C0
	x24 = x1 + 0xFFFFFFFFFFFFFE70
	goto l00000000004708B8
	// succ:  l00000000004708B8
l0000000000470894:
	w2 = Mem0[x0 + 16:word32]
	w2 = w2 & 0xFFFFFFFE
	Mem0[x0 + 16:word32] = w2
	// succ:  l00000000004708A0
l00000000004708A0:
	x0 = x23
	call set_itemlist_dirty (retsize: 0;)
	x0 = x22
	call set_itemlist_dirty (retsize: 0;)
	// succ:  l00000000004708B0
l00000000004708B0:
	x20 = Mem0[x20:word64]
	branch x20 == 0x0000000000000000 l0000000000470390
	// succ:  l00000000004708B8 l0000000000470390
l00000000004708B8:
	x2 = Mem0[x20 + 8:word64]
	w1 = 0x00000001
	x0 = Mem0[x2:word64]
	call builtin_address_internal (retsize: 0;)
	branch x0 == 0x0000000000000000 l00000000004708FC
	// succ:  l00000000004708CC l00000000004708FC
l00000000004708CC:
	branch w19 != 0x00000000 l0000000000470894
	// succ:  l00000000004708D0 l0000000000470894
l00000000004708D0:
	w2 = Mem0[x24:word32]
	branch w2 == 0x00000000 l00000000004708EC
	// succ:  l00000000004708D8 l00000000004708EC
l00000000004708D8:
	w2 = Mem0[x0 + 16:word32]
	branch (w2 & 0x00000001) == 0x00000000 l00000000004708F4
	// succ:  l00000000004708E0 l00000000004708F4
l00000000004708E0:
	w2 = w2 | 0x00000001
	Mem0[x0 + 16:word32] = w2
	goto l00000000004708A0
	// succ:  l00000000004708A0
l00000000004708EC:
	w2 = Mem0[x0 + 16:word32]
	goto l00000000004708E0
	// succ:  l00000000004708E0
l00000000004708F4:
	x0 = 0x0000000000000000
	call sh_restricted (retsize: 0;)
	// succ:  l00000000004708FC
l00000000004708FC:
	x0 = Mem0[x20 + 8:word64]
	w21 = 0x00000001
	x0 = Mem0[x0:word64]
	call sh_notbuiltin (retsize: 0;)
	goto l00000000004708B0
	// succ:  l00000000004708B0
l0000000000470910:
	x0 = x24
	call sh_notbuiltin (retsize: 0;)
	w21 = 0x00000001
	goto l000000000047052C
	// succ:  l000000000047052C
enable_builtin_exit:


// eval_builtin
// Return size: 0
void eval_builtin()
eval_builtin_entry:
	// succ:  l0000000000470A80
l0000000000470A80:
	sp = fp
	sp = sp + -16
	Mem0[sp:word64] = x29
	sp = sp + 8
	Mem0[sp:word64] = x30
	x29 = x31 + 0x0000000000000000
	call no_options (retsize: 0;)
	branch w0 == 0x00000000 l0000000000470A9C
	// succ:  l0000000000470A90 l0000000000470A9C
l0000000000470A90:
	w0 = 0x00000102
	// succ:  l0000000000470A94
l0000000000470A94:
	x29 = Mem0[sp:word64]
	sp = sp + 8
	x30 = Mem0[sp:word64]
	sp = sp + 16
	return
	// succ:  eval_builtin_exit
l0000000000470A9C:
	x1 = 0x00000000004E3000
	x1 = Mem0[x1 + 3856:word64]
	branch x1 == 0x0000000000000000 l0000000000470A94
	// succ:  l0000000000470AA8 l0000000000470A94
l0000000000470AA8:
	x0 = x1
	call string_list (retsize: 0;)
	x1 = 0x00000000004AB000
	x29 = Mem0[sp:word64]
	sp = sp + 8
	x30 = Mem0[sp:word64]
	sp = sp + 16
	x1 = x1 + 0xFFFFFFFFFFFFFA98
	w2 = 0x00000004
	// succ:  l0000000000470AC0_thunk_parse_and_execute
l0000000000470AC0_thunk_parse_and_execute:
	call parse_and_execute (retsize: 0;)
	return
	// succ:  eval_builtin_exit
eval_builtin_exit:


// maybe_execute_file
// Return size: 0
void maybe_execute_file()
maybe_execute_file_entry:
	// succ:  l000000000047127C
l000000000047127C:
	sp = fp
	sp = sp + -32
	Mem0[sp:word64] = x29
	sp = sp + 8
	Mem0[sp:word64] = x30
	x29 = x31 + 0x0000000000000000
	v8 = sp + 16
	Mem0[v8:word64] = x19
	v8 = v8 + 8
	Mem0[v8:word64] = x20
	w19 = w1
	w1 = 0x00000000
	call bash_tilde_expand (retsize: 0;)
	NZCV = cond(w19 - w31)
	w1 = 0x00000009
maybe_execute_file_exit:


// fc_execute_file
// Return size: 0
void fc_execute_file()
fc_execute_file_entry:
	goto l00000000004712D0
	// succ:  l00000000004712D0
l0000000000470AC4:
	x31 = x31 - 0x0000000000000220
	sp = sp + -80
	Mem0[sp:word64] = x29
	sp = sp + 8
	Mem0[sp:word64] = x30
	x29 = x31 + 0x0000000000000000
	Mem0[x29 + 552:word64] = x0
	x0 = 0x00000000004AA000
	x0 = x0 + 0x00000000000003C8
	v10 = sp + 16
	Mem0[v10:word64] = x19
	v10 = v10 + 8
	Mem0[v10:word64] = x20
	v13 = sp + 32
	Mem0[v13:word64] = x21
	v13 = v13 + 8
	Mem0[v13:word64] = x22
	v16 = sp + 48
	Mem0[v16:word64] = x23
	v16 = v16 + 8
	Mem0[v16:word64] = x24
	Mem0[sp + 64:word64] = x25
	w19 = w1
	call find_variable (retsize: 0;)
	Mem0[x29 + 544:word64] = x0
	branch x0 == 0x0000000000000000 l0000000000470E94
	// succ:  l0000000000470AFC l0000000000470E94
l0000000000470AFC:
	w0 = Mem0[x0 + 40:word32]
	x22 = 0x0000000000000000
	branch (w0 & 0x00000004) == 0x00000000 l0000000000470DD4
	// succ:  l0000000000470B08 l0000000000470DD4
l0000000000470B08:
	x0 = 0x00000000004AA000
	x0 = x0 + 0x00000000000003D8
	call find_variable (retsize: 0;)
	branch x0 == 0x0000000000000000 l0000000000470DEC
	// succ:  l0000000000470B18 l0000000000470DEC
l0000000000470B18:
	w1 = Mem0[x0 + 40:word32]
	Mem0[x29 + 560:word64] = 0x0000000000000000
	branch (w1 & 0x00000004) == 0x00000000 l0000000000470DB4
	// succ:  l0000000000470B24 l0000000000470DB4
l0000000000470B24:
	x0 = 0x00000000004AA000
	x0 = x0 + 0x00000000000003E8
	call find_variable (retsize: 0;)
	branch x0 == 0x0000000000000000 l0000000000470DCC
	// succ:  l0000000000470B34 l0000000000470DCC
l0000000000470B34:
	w1 = Mem0[x0 + 40:word32]
	Mem0[x29 + 568:word64] = 0x0000000000000000
	branch (w1 & 0x00000004) == 0x00000000 l0000000000470D94
	// succ:  l0000000000470B40 l0000000000470D94
l0000000000470B40:
	x0 = 0x00000000004AC000
	x0 = x0 + 0xFFFFFFFFFFFFFB90
	call find_variable (retsize: 0;)
	branch x0 == 0x0000000000000000 l0000000000470DAC
	// succ:  l0000000000470B50 l0000000000470DAC
l0000000000470B50:
	w1 = Mem0[x0 + 40:word32]
	Mem0[x29 + 576:word64] = 0x0000000000000000
	branch (w1 & 0x00000004) == 0x00000000 l0000000000470D74
	// succ:  l0000000000470B5C l0000000000470D74
l0000000000470B5C:
	x0 = 0x00000000004AC000
	x0 = x0 + 0xFFFFFFFFFFFFFBA0
	call find_variable (retsize: 0;)
	branch x0 == 0x0000000000000000 l0000000000470D8C
	// succ:  l0000000000470B6C l0000000000470D8C
l0000000000470B6C:
	w1 = Mem0[x0 + 40:word32]
	Mem0[x29 + 584:word64] = 0x0000000000000000
	branch (w1 & 0x00000004) == 0x00000000 l0000000000470D68
	// succ:  l0000000000470B78 l0000000000470D68
l0000000000470B78:
	x0 = Mem0[x29 + 552:word64]
	w1 = 0x00000000
	open(x0, x1)
	sp = sp + 0xFFFFFFFFFFFFFFF8
	w20 = w0
	branch (w0 & 0x00000000) == 0x00000000 l0000000000470D18
	// succ:  l0000000000470B8C l0000000000470D18
l0000000000470B8C:
	w0 = 0x00000000
	w1 = w20
	x2 = x29 + 0x0000000000000188
	__fxstat(x0, x1, x2)
	sp = sp + 0xFFFFFFFFFFFFFFF8
	w31 = w0 + 0x00000001
	NZCV = cond(w31)
	branch Test(EQ,Z) l0000000000470D18
	// succ:  l0000000000470BA4 l0000000000470D18
l0000000000470BA4:
	w3 = w19 & 0x00000002
	Mem0[x29 + 592:word32] = w3
	branch (w19 & 0x00000002) == 0x00000000 l0000000000470E38
	// succ:  l0000000000470BB0 l0000000000470E38
l0000000000470BB0:
	x23 = 0x000000000043D000
	x23 = x23 + 0x000000000000014C
	// succ:  l0000000000470BB8
l0000000000470BB8:
	w1 = Mem0[x29 + 408:word32]
	w1 = w1 & 0x0000F000
	w31 = w1 - (0x00000004 << 12)
	NZCV = cond(w31)
	branch Test(EQ,Z) l00000000004710B4
	// succ:  l0000000000470BC8 l00000000004710B4
l0000000000470BC8:
	branch (w19 & 0x00000080) == 0x00000000 l0000000000470E44
	// succ:  l0000000000470BCC l0000000000470E44
l0000000000470BCC:
	w31 = w1 - (0x00000008 << 12)
	NZCV = cond(w31)
	branch Test(NE,Z) l0000000000471044
	// succ:  l0000000000470BD4 l0000000000471044
l0000000000470BD4:
	x3 = Mem0[x29 + 440:word64]
	x0 = x3 + 0x0000000000000001
	x31 = x0 - x3
	NZCV = cond(x31)
	x21 = x3
	branch Test(ULT,C) l0000000000471088
	// succ:  l0000000000470BE8 l0000000000471088
l0000000000470BE8:
	branch (w3 & 0x00000000) != 0x00000000 l0000000000470E60
	// succ:  l0000000000470BEC l0000000000470E60
l0000000000470BEC:
	x1 = 0x00000000004BE000
	x1 = x1 + 0xFFFFFFFFFFFFF840
	w2 = 0x0000009A
	call sh_xmalloc (retsize: 0;)
	x3 = x0
	x1 = x0
	x2 = x21
	w0 = w20
	Mem0[x29 + 520:word64] = x3
	read(x0, x1, x2)
	sp = sp + 0xFFFFFFFFFFFFFFF8
	x21 = x0
	branch (w0 & 0x00000000) != 0x00000000 l0000000000470CEC
	// succ:  l0000000000470C1C l0000000000470CEC
l0000000000470C1C:
	x0 = Mem0[x29 + 520:word64]
	Mem0[x0 + x21:byte] = 0x00
	__errno_location()
	sp = sp + 0xFFFFFFFFFFFFFFF8
	w25 = Mem0[x0:word32]
	x24 = x0
	w0 = w20
	close(x0)
	sp = sp + 0xFFFFFFFFFFFFFFF8
	Mem0[x24:word32] = w25
	branch x21 == 0x0000000000000000 l00000000004711C0
	// succ:  l0000000000470C40 l00000000004711C0
l0000000000470C40:
	branch (w19 & 0x00000040) == 0x00000000 l0000000000471164
	// succ:  l0000000000470C44 l0000000000471164
l0000000000470C44:
	x20 = Mem0[x29 + 520:word64]
	x0 = x20
	strlen(x0)
	sp = sp + 0xFFFFFFFFFFFFFFF8
	NZCV = cond(x21 - (int64) ((int32) w0))
	branch Test(LE,ZCV) l0000000000470E9C
	// succ:  l0000000000470C58 l0000000000470E9C
l0000000000470C58:
	x2 = 0x0000000000000000
	x1 = x20
	w24 = w2
	x20 = 0x0000000000000001
	goto l0000000000470C80
	// succ:  l0000000000470C80
l0000000000470C6C:
	x31 = x21 - x20
	NZCV = cond(x31)
	x2 = x20
	x20 = x20 + 0x0000000000000001
	branch Test(LE,ZCV) l0000000000470E9C
	// succ:  l0000000000470C7C l0000000000470E9C
l0000000000470C7C:
	x1 = Mem0[x29 + 520:word64]
	// succ:  l0000000000470C80
l0000000000470C80:
	x3 = x20 - 0x0000000000000001
	v34 = Mem0[x1 + x3:byte]
	w4 = (word32) v34
	x0 = x1 + x3
	branch w4 != 0x00000000 l0000000000470C6C
	// succ:  l0000000000470C90 l0000000000470C6C
l0000000000470C90:
	x2 = x21 - x2
	x1 = x1 + x20
	memmove(x0, x1, x2)
	sp = sp + 0xFFFFFFFFFFFFFFF8
	w1 = Mem0[x29 + 592:word32]
	x21 = x21 - 0x0000000000000001
	branch w1 == 0x00000000 l0000000000470C6C
	// succ:  l0000000000470CA8 l0000000000470C6C
l0000000000470CA8:
	w24 = w24 + 0x00000001
	w31 = w24 - 0x00000100
	NZCV = cond(w31)
	branch Test(LE,ZCV) l0000000000470C6C
	// succ:  l0000000000470CB4 l0000000000470C6C
l0000000000470CB4:
	x0 = Mem0[x29 + 520:word64]
	x1 = 0x00000000004BE000
	x1 = x1 + 0xFFFFFFFFFFFFF840
	w2 = 0x000000C7
	call sh_xfree (retsize: 0;)
	x1 = 0x00000000004AA000
	w2 = 0x00000005
	x1 = x1 + 0x0000000000000418
	x0 = 0x0000000000000000
	dcgettext(x0, x1, x2)
	sp = sp + 0xFFFFFFFFFFFFFFF8
	x1 = Mem0[x29 + 552:word64]
	call x23 (retsize: 0;)
	w0 = 0x0000007E
	goto l0000000000470D4C
	// succ:  l0000000000470D4C
l0000000000470CEC:
	__errno_location()
	sp = sp + 0xFFFFFFFFFFFFFFF8
	w22 = Mem0[x0:word32]
	x21 = x0
	w0 = w20
	close(x0)
	sp = sp + 0xFFFFFFFFFFFFFFF8
	Mem0[x21:word32] = w22
	x1 = 0x00000000004BE000
	x0 = Mem0[x29 + 520:word64]
	x1 = x1 + 0xFFFFFFFFFFFFF840
	w2 = 0x000000A8
	call sh_xfree (retsize: 0;)
	// succ:  l0000000000470D18
l0000000000470D18:
	branch (w19 & 0x00000001) == 0x00000000 l0000000000470D2C
	// succ:  l0000000000470D1C l0000000000470D2C
l0000000000470D1C:
	__errno_location()
	sp = sp + 0xFFFFFFFFFFFFFFF8
	w0 = Mem0[x0:word32]
	w31 = w0 - 0x00000002
	NZCV = cond(w31)
	branch Test(EQ,Z) l0000000000470D34
	// succ:  l0000000000470D2C l0000000000470D34
l0000000000470D2C:
	x0 = Mem0[x29 + 552:word64]
	call file_error (retsize: 0;)
	// succ:  l0000000000470D34
l0000000000470D34:
	branch (w19 & 0x00000010) == 0x00000000 l0000000000471268
	// succ:  l0000000000470D38 l0000000000471268
l0000000000470D38:
	branch (w19 & 0x00000002) == 0x00000000 l0000000000470E18
	// succ:  l0000000000470D3C l0000000000470E18
l0000000000470D3C:
	__errno_location()
	sp = sp + 0xFFFFFFFFFFFFFFF8
	w0 = Mem0[x0:word32]
	w31 = w0 - 0x00000002
	NZCV = cond(w31)
l0000000000470D4C:
	v41 = sp + 16
	x19 = Mem0[v41:word64]
	v41 = v41 + 8
	x20 = Mem0[v41:word64]
	v42 = sp + 32
	x21 = Mem0[v42:word64]
	v42 = v42 + 8
	x22 = Mem0[v42:word64]
	v43 = sp + 48
	x23 = Mem0[v43:word64]
	v43 = v43 + 8
	x24 = Mem0[v43:word64]
	x25 = Mem0[sp + 64:word64]
	x29 = Mem0[sp:word64]
	sp = sp + 8
	x30 = Mem0[sp:word64]
	sp = sp + 80
	x31 = x31 + 0x0000000000000220
	return
	// succ:  fc_execute_file_exit
l0000000000470D68:
	x0 = Mem0[x0 + 8:word64]
	Mem0[x29 + 584:word64] = x0
	goto l0000000000470B78
	// succ:  l0000000000470B78
l0000000000470D74:
	x0 = Mem0[x0 + 8:word64]
	Mem0[x29 + 576:word64] = x0
	x0 = 0x00000000004AC000
	x0 = x0 + 0xFFFFFFFFFFFFFBA0
	call find_variable (retsize: 0;)
	branch x0 != 0x0000000000000000 l0000000000470B6C
	// succ:  l0000000000470D8C l0000000000470B6C
l0000000000470D8C:
	Mem0[x29 + 584:word64] = x0
	goto l0000000000470B78
	// succ:  l0000000000470B78
l0000000000470D94:
	x0 = Mem0[x0 + 8:word64]
	Mem0[x29 + 568:word64] = x0
	x0 = 0x00000000004AC000
	x0 = x0 + 0xFFFFFFFFFFFFFB90
	call find_variable (retsize: 0;)
	branch x0 != 0x0000000000000000 l0000000000470B50
	// succ:  l0000000000470DAC l0000000000470B50
l0000000000470DAC:
	Mem0[x29 + 576:word64] = x0
	goto l0000000000470B5C
	// succ:  l0000000000470B5C
l0000000000470DB4:
	x0 = Mem0[x0 + 8:word64]
	Mem0[x29 + 560:word64] = x0
	x0 = 0x00000000004AA000
	x0 = x0 + 0x00000000000003E8
	call find_variable (retsize: 0;)
	branch x0 != 0x0000000000000000 l0000000000470B34
	// succ:  l0000000000470DCC l0000000000470B34
l0000000000470DCC:
	Mem0[x29 + 568:word64] = x0
	goto l0000000000470B40
	// succ:  l0000000000470B40
l0000000000470DD4:
	x2 = Mem0[x29 + 544:word64]
	x0 = 0x00000000004AA000
	x0 = x0 + 0x00000000000003D8
	x22 = Mem0[x2 + 8:word64]
	call find_variable (retsize: 0;)
	branch x0 != 0x0000000000000000 l0000000000470B18
	// succ:  l0000000000470DEC l0000000000470B18
l0000000000470DEC:
	Mem0[x29 + 560:word64] = x0
	goto l0000000000470B24
	// succ:  l0000000000470B24
l0000000000470E18:
	v44 = sp + 16
	x19 = Mem0[v44:word64]
	v44 = v44 + 8
	x20 = Mem0[v44:word64]
	v45 = sp + 32
	x21 = Mem0[v45:word64]
	v45 = v45 + 8
	x22 = Mem0[v45:word64]
	v46 = sp + 48
	x23 = Mem0[v46:word64]
	v46 = v46 + 8
	x24 = Mem0[v46:word64]
	x25 = Mem0[sp + 64:word64]
	x29 = Mem0[sp:word64]
	sp = sp + 8
	x30 = Mem0[sp:word64]
	sp = sp + 80
	w0 = 0x00000001
	x31 = x31 + 0x0000000000000220
	return
	// succ:  fc_execute_file_exit
l0000000000470E38:
	x23 = 0x000000000046E000
	x23 = x23 + 0x000000000000001C
	goto l0000000000470BB8
	// succ:  l0000000000470BB8
l0000000000470E44:
	x3 = Mem0[x29 + 440:word64]
	x0 = x3 + 0x0000000000000001
	x31 = x3 - x0
	NZCV = cond(x31)
	x21 = x3
	branch Test(UGT,ZC) l0000000000471088
	// succ:  l0000000000470E58 l0000000000471088
l0000000000470E58:
	w31 = w1 - (0x00000008 << 12)
	NZCV = cond(w31)
	branch Test(EQ,Z) l0000000000470BE8
	// succ:  l0000000000470E60 l0000000000470BE8
l0000000000470E60:
	x1 = x29 + 0x0000000000000208
	x2 = 0x0000000000000000
	w0 = w20
	call zmapfd (retsize: 0;)
l0000000000470E94:
	x22 = Mem0[x29 + 544:word64]
	goto l0000000000470B08
	// succ:  l0000000000470B08
l0000000000470E9C:
	w3 = w19 & 0x00000004
	Mem0[x29 + 600:word32] = w3
	branch (w19 & 0x00000004) == 0x00000000 l00000000004710E0
	// succ:  l0000000000470EA8 l00000000004710E0
l0000000000470EA8:
	x0 = 0x00000000004BE000
	x0 = x0 + 0xFFFFFFFFFFFFF860
	call begin_unwind_frame (retsize: 0;)
	x0 = 0x00000000004E3000
	x0 = x0 + 0x00000000000004A4
	w1 = 0x00000004
	call unwind_protect_mem (retsize: 0;)
	x0 = 0x00000000004E3000
	x0 = x0 + 0x0000000000000360
	w1 = 0x00000138
	call unwind_protect_mem (retsize: 0;)
	w2 = w19 & 0x00000008
	Mem0[x29 + 604:word32] = w2
	branch (w19 & 0x00000008) == 0x00000000 l0000000000471140
	// succ:  l0000000000470EE0 l0000000000471140
l0000000000470EE0:
	x0 = 0x00000000004E1000
	x0 = x0 + 0x00000000000006B4
	w1 = 0x00000004
	call unwind_protect_mem (retsize: 0;)
	// succ:  l0000000000470EF0
l0000000000470EF0:
	x3 = 0x00000000004E1000
	x3 = x3 + 0x00000000000006B4
	w0 = Mem0[x3:word32]
	x4 = 0x00000000004E3000
	w5 = Mem0[x4 + 1188:word32]
	w1 = 0x00000001
	w6 = w0 + w1
	x2 = Mem0[x29 + 552:word64]
	x0 = Mem0[x29 + 560:word64]
	w5 = w5 + w1
	Mem0[x4 + 1188:word32] = w5
	Mem0[x3:word32] = w6
	call array_rshift (retsize: 0;)
	call executing_line_number (retsize: 0;)
l0000000000471044:
	x1 = 0x00000000004BE000
	x1 = x1 + 0xFFFFFFFFFFFFF810
	w2 = 0x00000005
	x0 = 0x0000000000000000
	dcgettext(x0, x1, x2)
	sp = sp + 0xFFFFFFFFFFFFFFF8
	x1 = Mem0[x29 + 552:word64]
	call x23 (retsize: 0;)
	w3 = Mem0[x29 + 592:word32]
	branch w3 != 0x00000000 l0000000000470E18
	// succ:  l0000000000471068 l0000000000470E18
l0000000000471068:
	w0 = 0xFFFFFFFF
	// succ:  l000000000047106C
l000000000047106C:
	v38 = sp + 16
	x19 = Mem0[v38:word64]
	v38 = v38 + 8
	x20 = Mem0[v38:word64]
	v39 = sp + 32
	x21 = Mem0[v39:word64]
	v39 = v39 + 8
	x22 = Mem0[v39:word64]
	v40 = sp + 48
	x23 = Mem0[v40:word64]
	v40 = v40 + 8
	x24 = Mem0[v40:word64]
	x25 = Mem0[sp + 64:word64]
	x29 = Mem0[sp:word64]
	sp = sp + 8
	x30 = Mem0[sp:word64]
	sp = sp + 80
	x31 = x31 + 0x0000000000000220
	return
	// succ:  fc_execute_file_exit
l0000000000471088:
	x1 = 0x00000000004BE000
	x1 = x1 + 0xFFFFFFFFFFFFF828
	w2 = 0x00000005
	x0 = 0x0000000000000000
	dcgettext(x0, x1, x2)
	sp = sp + 0xFFFFFFFFFFFFFFF8
	x1 = Mem0[x29 + 552:word64]
	call x23 (retsize: 0;)
	w0 = Mem0[x29 + 592:word32]
	branch w0 != 0x00000000 l0000000000470E18
	// succ:  l00000000004710AC l0000000000470E18
l00000000004710AC:
	w0 = 0xFFFFFFFF
	goto l000000000047106C
	// succ:  l000000000047106C
l00000000004710B4:
	x1 = 0x00000000004AA000
	x1 = x1 + 0x0000000000000400
	w2 = 0x00000005
	x0 = 0x0000000000000000
	dcgettext(x0, x1, x2)
	sp = sp + 0xFFFFFFFFFFFFFFF8
	x1 = Mem0[x29 + 552:word64]
	call x23 (retsize: 0;)
	w1 = Mem0[x29 + 592:word32]
	branch w1 != 0x00000000 l0000000000470E18
	// succ:  l00000000004710D8 l0000000000470E18
l00000000004710D8:
	w0 = 0xFFFFFFFF
	goto l000000000047106C
	// succ:  l000000000047106C
l00000000004710E0:
	x0 = 0x00000000004E3000
	x0 = x0 + 0x0000000000000360
	x1 = x29 + 0x0000000000000050
	w2 = 0x00000138
	call xbcopy (retsize: 0;)
	w0 = w19 & 0x00000008
	Mem0[x29 + 604:word32] = w0
	branch (w19 & 0x00000008) == 0x00000000 l0000000000470EF0
	// succ:  l0000000000471100 l0000000000470EF0
l0000000000471100:
	x0 = 0x00000000004DE000
	w0 = Mem0[x0 + 1704:word32]
	Mem0[x29 + 528:word32] = w0
	// succ:  l000000000047110C
l000000000047110C:
	x0 = 0x00000000004DE000
	Mem0[x0 + 1704:word32] = 0x00000000
	goto l0000000000470EF0
	// succ:  l0000000000470EF0
l0000000000471140:
	x0 = 0x00000000004DE000
	x0 = x0 + 0x00000000000006A8
	w1 = 0x00000004
	call unwind_protect_mem (retsize: 0;)
	x0 = 0x00000000004E1000
	x0 = x0 + 0x00000000000006B4
	w1 = 0x00000004
	call unwind_protect_mem (retsize: 0;)
	goto l000000000047110C
	// succ:  l000000000047110C
l0000000000471164:
	x31 = x21 - 0x0000000000000050
	NZCV = cond(x31)
	x1 = 0x0000000000000050
	x0 = Mem0[x29 + 520:word64]
l00000000004711C0:
	x0 = Mem0[x29 + 520:word64]
	x1 = 0x00000000004BE000
	x1 = x1 + 0xFFFFFFFFFFFFF840
	w2 = 0x000000AE
	call sh_xfree (retsize: 0;)
	w0 = Mem0[x29 + 592:word32]
	NZCV = cond(w0 - w31)
	w0 = (word32) Test(EQ,Z)
	goto l0000000000470D4C
	// succ:  l0000000000470D4C
l0000000000471268:
	w2 = 0x00000001
	x1 = 0x00000000004E3000
	w0 = 0x00000003
	Mem0[x1 + 1200:word32] = w2
	call jump_to_top_level (retsize: 0;)
	// succ:  l0000000000471278_thunk_maybe_execute_file
l0000000000471278_thunk_maybe_execute_file:
	call maybe_execute_file (retsize: 0;)
	return
	// succ:  fc_execute_file_exit
l00000000004712D0:
	sp = fp
	w1 = 0x000000A1
	goto l0000000000470AC4
	// succ:  l0000000000470AC4
fc_execute_file_exit:


// source_file
// Return size: 0
void source_file()
source_file_entry:
	// succ:  l00000000004712D8
l00000000004712D8:
	sp = fp
	sp = sp + -32
	Mem0[sp:word64] = x29
	sp = sp + 8
	Mem0[sp:word64] = x30
	x29 = x31 + 0x0000000000000000
	x2 = 0x00000000004DE000
	w2 = Mem0[x2 + 1716:word32]
	NZCV = cond(w1 - w31)
	w3 = 0x0000010E
	w1 = 0x0000000E
source_file_exit:


// fn0000000000471348
// Return size: 0
void fn0000000000471348()
fn0000000000471348_entry:
	// succ:  l0000000000471348
l0000000000471348:
	sp = fp
	sp = sp + -48
	Mem0[sp:word64] = x29
	sp = sp + 8
	Mem0[sp:word64] = x30
	x29 = x31 + 0x0000000000000000
	v8 = sp + 32
	Mem0[v8:word64] = x21
	v8 = v8 + 8
	Mem0[v8:word64] = x22
	x21 = x0
	x0 = x2
	v13 = sp + 16
	Mem0[v13:word64] = x19
	v13 = v13 + 8
	Mem0[v13:word64] = x20
	w19 = w1
	x20 = 0x00000000004E1000
	call begin_unwind_frame (retsize: 0;)
	x0 = x20 + 0x00000000000006B8
	w1 = 0x00000004
	call unwind_protect_mem (retsize: 0;)
	x0 = 0x00000000004E3000
	x0 = x0 + 0xFFFFFFFFFFFFFC28
	w1 = 0x00000138
	call unwind_protect_mem (retsize: 0;)
	x0 = 0x00000000004DE000
	x0 = x0 + 0x0000000000000740
	w1 = 0x00000004
	call unwind_protect_mem (retsize: 0;)
	x0 = 0x00000000004DE000
	x0 = x0 + 0x0000000000000788
	w1 = 0x00000004
	call unwind_protect_mem (retsize: 0;)
	x0 = 0x00000000004E1000
	x0 = x0 + 0x0000000000000678
	w1 = 0x00000004
	call unwind_protect_mem (retsize: 0;)
	x0 = 0x00000000004DF000
	x0 = x0 + 0xFFFFFFFFFFFFFC0C
	w1 = 0x00000004
	call unwind_protect_mem (retsize: 0;)
	x0 = 0x00000000004DF000
	x0 = x0 + 0xFFFFFFFFFFFFFBE8
	w1 = 0x00000004
	call unwind_protect_mem (retsize: 0;)
	w22 = w19 & 0x00000003
	NZ = cond(w22)
	C = false
	V = false
	branch Test(NE,Z) l00000000004714B8
	// succ:  l00000000004713E0 l00000000004714B8
l00000000004713E0:
	x20 = x20 + 0x00000000000006B8
	w0 = Mem0[x20:word32]
	branch w0 != 0x00000000 l0000000000471448
	// succ:  l00000000004713EC l0000000000471448
l00000000004713EC:
	x0 = 0x0000000000471000
	x0 = x0 + 0x0000000000000334
	x1 = 0x0000000000000000
	call add_unwind_protect (retsize: 0;)
	x20 = 0x00000000004DE000
	w0 = Mem0[x20 + 1712:word32]
	branch w0 != 0x00000000 l0000000000471464
	// succ:  l0000000000471408 l0000000000471464
l0000000000471408:
	x0 = 0x0000000000420000
	x0 = x0 + 0x0000000000000720
	x1 = 0x0000000000000000
	call add_unwind_protect (retsize: 0;)
	branch x21 == 0x0000000000000000 l0000000000471420
	// succ:  l000000000047141C l0000000000471420
l000000000047141C:
	branch (w19 & 0x00000008) == 0x00000000 l0000000000471494
	// succ:  l0000000000471420 l0000000000471494
l0000000000471420:
	branch w22 == 0x00000000 l0000000000471434
	// succ:  l0000000000471424 l0000000000471434
l0000000000471424:
	w1 = w19 & 0x00000001
	w1 = w1 ^ 0x00000001
	x0 = 0x00000000004DE000
	Mem0[x0 + 1704:word32] = w1
	// succ:  l0000000000471434
l0000000000471434:
	branch (w19 & 0x00000004) == 0x00000000 l00000000004714A8
	// succ:  l0000000000471438 l00000000004714A8
l0000000000471438:
	v23 = sp + 16
	x19 = Mem0[v23:word64]
	v23 = v23 + 8
	x20 = Mem0[v23:word64]
	v24 = sp + 32
	x21 = Mem0[v24:word64]
	v24 = v24 + 8
	x22 = Mem0[v24:word64]
	x29 = Mem0[sp:word64]
	sp = sp + 8
	x30 = Mem0[sp:word64]
	sp = sp + 48
	return
	// succ:  fn0000000000471348_exit
l0000000000471448:
	x0 = 0x00000000004D7000
	x0 = x0 + 0x0000000000000184
	w1 = 0x00000004
	call unwind_protect_mem (retsize: 0;)
	x20 = 0x00000000004DE000
	w0 = Mem0[x20 + 1712:word32]
	branch w0 == 0x00000000 l0000000000471408
	// succ:  l0000000000471464 l0000000000471408
l0000000000471464:
	x0 = 0x00000000004E3000
	x0 = x0 + 0xFFFFFFFFFFFFFD6C
	w1 = 0x00000004
	call unwind_protect_mem (retsize: 0;)
	w0 = Mem0[x20 + 1712:word32]
	branch w0 == 0x00000000 l0000000000471408
	// succ:  l000000000047147C l0000000000471408
l000000000047147C:
	call get_current_prompt_level (retsize: 0;)
	w1 = w0
	x0 = 0x0000000000420000
	x0 = x0 + 0xFFFFFFFFFFFFFCAC
	call add_unwind_protect (retsize: 0;)
	goto l0000000000471408
	// succ:  l0000000000471408
l0000000000471494:
	x0 = 0x000000000046C000
	x0 = x0 + 0x00000000000004C4
	x1 = x21
	call add_unwind_protect (retsize: 0;)
	goto l0000000000471420
	// succ:  l0000000000471420
l00000000004714A8:
	v25 = sp + 16
	x19 = Mem0[v25:word64]
	v25 = v25 + 8
	x20 = Mem0[v25:word64]
	v26 = sp + 32
	x21 = Mem0[v26:word64]
	v26 = v26 + 8
	x22 = Mem0[v26:word64]
	x29 = Mem0[sp:word64]
	sp = sp + 8
	x30 = Mem0[sp:word64]
	sp = sp + 48
	// succ:  l00000000004714B4_thunk_bash_history_disable
l00000000004714B4_thunk_bash_history_disable:
	call bash_history_disable (retsize: 0;)
	return
	// succ:  fn0000000000471348_exit
l00000000004714B8:
	x0 = 0x00000000004DE000
	x0 = x0 + 0x00000000000006A8
	w1 = 0x00000004
	call unwind_protect_mem (retsize: 0;)
	goto l00000000004713E0
	// succ:  l00000000004713E0
fn0000000000471348_exit:


// parse_and_execute_cleanup
// Return size: 0
void parse_and_execute_cleanup()
parse_and_execute_cleanup_entry:
	// succ:  l00000000004714CC
l00000000004714CC:
	sp = fp
	sp = sp + -16
	Mem0[sp:word64] = x29
	sp = sp + 8
	Mem0[sp:word64] = x30
	x29 = x31 + 0x0000000000000000
	x0 = 0x00000000004E3000
	w0 = Mem0[x0 + 1632:word32]
	branch w0 != 0x00000000 l00000000004714FC
	// succ:  l00000000004714E0 l00000000004714FC
l00000000004714E0:
	call have_unwind_protects (retsize: 0;)
	branch w0 != 0x00000000 l0000000000471510
	// succ:  l00000000004714E8 l0000000000471510
l00000000004714E8:
	x1 = 0x00000000004E1000
	x1 = x1 + 0x00000000000006B8
	Mem0[x1:word32] = w0
	x29 = Mem0[sp:word64]
	sp = sp + 8
	x30 = Mem0[sp:word64]
	sp = sp + 16
	return
	// succ:  parse_and_execute_cleanup_exit
l00000000004714FC:
	w0 = w0 - 0x00000001
	call run_trap_cleanup (retsize: 0;)
	call unfreeze_jobs_list (retsize: 0;)
	call have_unwind_protects (retsize: 0;)
	branch w0 == 0x00000000 l00000000004714E8
	// succ:  l0000000000471510 l00000000004714E8
l0000000000471510:
	x0 = 0x00000000004BE000
	x29 = Mem0[sp:word64]
	sp = sp + 8
	x30 = Mem0[sp:word64]
	sp = sp + 16
	x0 = x0 + 0xFFFFFFFFFFFFF870
	// succ:  l000000000047151C_thunk_run_unwind_frame
l000000000047151C_thunk_run_unwind_frame:
	call run_unwind_frame (retsize: 0;)
	return
	// succ:  parse_and_execute_cleanup_exit
parse_and_execute_cleanup_exit:


// parse_and_execute
// Return size: 0
void parse_and_execute()
parse_and_execute_entry:
	// succ:  l0000000000471520
l0000000000471520:
	sp = fp
	sp = sp + -128
	Mem0[sp:word64] = x29
	sp = sp + 8
	Mem0[sp:word64] = x30
	x29 = x31 + 0x0000000000000000
	Mem0[x29 + 80:word32] = w2
	v9 = sp + 16
	Mem0[v9:word64] = x19
	v9 = v9 + 8
	Mem0[v9:word64] = x20
	x2 = 0x00000000004BE000
	x20 = x1
	w1 = Mem0[x29 + 80:word32]
	x2 = x2 + 0xFFFFFFFFFFFFF870
	v15 = sp + 32
	Mem0[v15:word64] = x21
	v15 = v15 + 8
	Mem0[v15:word64] = x22
	Mem0[sp + 48:word64] = x23
	x21 = x0
	call fn0000000000471348 (retsize: 0;)
	x2 = 0x00000000004E1000
	x2 = x2 + 0x00000000000006B8
	w0 = Mem0[x29 + 80:word32]
	w3 = Mem0[x2:word32]
	w19 = w0 & 0x00000010
	w3 = w3 + 0x00000001
	w0 = w19
	Mem0[x2:word32] = w3
	call push_stream (retsize: 0;)
	branch w19 != 0x00000000 l0000000000471588
	// succ:  l0000000000471578 l0000000000471588
l0000000000471578:
	x0 = 0x00000000004DE000
	w1 = Mem0[x0 + 1928:word32]
	w1 = w1 - 0x00000001
	Mem0[x0 + 1928:word32] = w1
	// succ:  l0000000000471588
l0000000000471588:
	x2 = 0x00000000004DE000
	w3 = Mem0[x2 + 1856:word32]
	Mem0[x29 + 76:word32] = 0x00000000
	w3 = w3 + 0x00000001
	x0 = x21
	x1 = x20
	Mem0[x2 + 1856:word32] = w3
	Mem0[x29 + 72:word32] = 0x00000000
	call with_input_from_string (retsize: 0;)
	x0 = 0x00000000004E1000
	x0 = x0 + 0x0000000000000278
	Mem0[x29 + 96:word64] = x0
	x0 = 0x00000000004E3000
	x0 = x0 + 0xFFFFFFFFFFFFFC28
	Mem0[x29 + 104:word64] = x0
	x0 = 0x00000000004DE000
	x0 = x0 + 0x00000000000006B0
	w19 = 0x00000000
	Mem0[x29 + 112:word64] = x0
	// succ:  l00000000004715D4
l00000000004715D4:
	x0 = 0x00000000004E3000
	x0 = Mem0[x0 + 680:word64]
	v21 = Mem0[x0:byte]
	w0 = (word32) v21
	branch w0 == 0x00000000 l0000000000471794
	// succ:  l00000000004715E4 l0000000000471794
l00000000004715E4:
	x1 = Mem0[x29 + 96:word64]
	Mem0[x29 + 64:word64] = 0x0000000000000000
	w0 = Mem0[x1:word32]
	branch w0 != 0x00000000 l00000000004719E8
	// succ:  l00000000004715F4 l00000000004719E8
l00000000004715F4:
	x0 = Mem0[x29 + 104:word64]
	w1 = 0x00000001
	call __sigsetjmp (retsize: 0;)
	w19 = w0
	branch w0 == 0x00000000 l0000000000471630
	// succ:  l0000000000471608 l0000000000471630
l0000000000471608:
	w0 = w0 - 0x00000001
	Mem0[x29 + 76:word32] = 0x00000000
	w31 = w0 - 0x00000003
	NZCV = cond(w31)
	branch Test(ULE,ZC) l00000000004717DC
	// succ:  l0000000000471618 l00000000004717DC
l0000000000471618:
	x0 = 0x00000000004BE000
	x0 = x0 + 0xFFFFFFFFFFFFF898
	w1 = 0x00000003
	w2 = w19
	w3 = 0x00000000
	call command_error (retsize: 0;)
	// succ:  l0000000000471630
l0000000000471630:
	call parse_command (retsize: 0;)
	branch w0 != 0x00000000 l0000000000471724
	// succ:  l0000000000471638 l0000000000471724
l0000000000471638:
	w0 = Mem0[x29 + 80:word32]
	branch (w0 & 0x00000020) == 0x00000000 l0000000000471658
	// succ:  l0000000000471640 l0000000000471658
l0000000000471640:
	x1 = Mem0[x29 + 112:word64]
	w0 = Mem0[x1:word32]
	branch w0 != 0x00000000 l0000000000471670
	// succ:  l000000000047164C l0000000000471670
l000000000047164C:
	x0 = 0x00000000004DF000
	w0 = Mem0[x0 + 3700:word32]
	branch w0 == 0x00000000 l0000000000471670
	// succ:  l0000000000471658 l0000000000471670
l0000000000471658:
	x20 = 0x00000000004DE000
	x0 = Mem0[x20 + 1872:word64]
	Mem0[x29 + 72:word32] = 0x00000000
	call dispose_command (retsize: 0;)
	Mem0[x20 + 1872:word64] = 0x0000000000000000
	goto l00000000004715D4
	// succ:  l00000000004715D4
l0000000000471670:
	x21 = 0x00000000004DE000
	x0 = Mem0[x21 + 1872:word64]
	Mem0[x29 + 64:word64] = x0
	branch x0 == 0x0000000000000000 l00000000004715D4
	// succ:  l0000000000471680 l00000000004715D4
l0000000000471680:
	w0 = 0x00000020
	call new_fd_bitmap (retsize: 0;)
	x20 = x0
	x0 = 0x00000000004BE000
	x0 = x0 + 0xFFFFFFFFFFFFF888
	call begin_unwind_frame (retsize: 0;)
	x0 = 0x0000000000430000
	x0 = x0 + 0x000000000000009C
	x1 = x20
	call add_unwind_protect (retsize: 0;)
	x1 = Mem0[x29 + 64:word64]
	x0 = 0x000000000042F000
	x0 = x0 + 0xFFFFFFFFFFFFFBD0
	call add_unwind_protect (retsize: 0;)
	x0 = 0x00000000004E3000
	w0 = Mem0[x0 + 1184:word32]
	Mem0[x21 + 1872:word64] = 0x0000000000000000
	w1 = w0 & 0x00000004
	branch (w0 & 0x00000004) == 0x00000000 l00000000004716D8
	// succ:  l00000000004716CC l00000000004716D8
l00000000004716CC:
	x0 = 0x00000000004DF000
	w0 = Mem0[x0 + 3048:word32]
	branch w0 != 0x00000000 l0000000000471864
	// succ:  l00000000004716D8 l0000000000471864
l00000000004716D8:
	x0 = 0x00000000004DE000
	w0 = Mem0[x0 + 1708:word32]
	w31 = w0 - 0x00000002
	NZCV = cond(w31)
	branch Test(EQ,Z) l0000000000471884
	// succ:  l00000000004716E8 l0000000000471884
l00000000004716E8:
	w2 = 0xFFFFFFFF
	x0 = Mem0[x29 + 64:word64]
	w1 = 0x00000000
	w3 = w2
	x4 = x20
	call execute_command_internal (retsize: 0;)
	Mem0[x29 + 72:word32] = w0
	x0 = Mem0[x29 + 64:word64]
	call dispose_command (retsize: 0;)
	x0 = x20
	call dispose_fd_bitmap (retsize: 0;)
	x0 = 0x00000000004BE000
	x0 = x0 + 0xFFFFFFFFFFFFF888
	call discard_unwind_frame (retsize: 0;)
	goto l00000000004715D4
	// succ:  l00000000004715D4
l0000000000471724:
	x0 = 0x00000000004DE000
	w1 = 0x00000001
	w0 = Mem0[x0 + 1712:word32]
	Mem0[x29 + 72:word32] = w1
	branch w0 != 0x00000000 l0000000000471794
	// succ:  l0000000000471738 l0000000000471794
l0000000000471738:
	x0 = 0x00000000004E1000
	x0 = Mem0[x0 + 1688:word64]
	branch x0 == 0x0000000000000000 l0000000000471794
	// succ:  l0000000000471744 l0000000000471794
l0000000000471744:
	x1 = 0x0000000000479000
	x1 = x1 + 0x000000000000036C
	x31 = x0 - x1
	NZCV = cond(x31)
	branch Test(EQ,Z) l0000000000471764
	// succ:  l0000000000471754 l0000000000471764
l0000000000471754:
	x1 = 0x0000000000470000
	x1 = x1 + 0xFFFFFFFFFFFFFA80
	x31 = x0 - x1
	NZCV = cond(x31)
	branch Test(NE,Z) l0000000000471794
	// succ:  l0000000000471764 l0000000000471794
l0000000000471764:
	x0 = 0x00000000004E3000
	w1 = Mem0[x0 + 1200:word32]
	w31 = w1 - 0x00000101
	NZCV = cond(w31)
	branch Test(NE,Z) l0000000000471794
	// succ:  l0000000000471774 l0000000000471794
l0000000000471774:
	x1 = 0x00000000004DE000
	w1 = Mem0[x1 + 1716:word32]
	branch w1 == 0x00000000 l0000000000471794
	// succ:  l0000000000471780 l0000000000471794
l0000000000471780:
	w1 = 0x00000001
	Mem0[x29 + 76:word32] = w1
	w1 = 0x00000002
	Mem0[x0 + 1200:word32] = w1
	w19 = 0x00000004
	// succ:  l0000000000471794
l0000000000471794:
	x0 = 0x00000000004BE000
	x0 = x0 + 0xFFFFFFFFFFFFF870
	call run_unwind_frame (retsize: 0;)
	x0 = 0x00000000004E1000
	w0 = Mem0[x0 + 632:word32]
	branch w0 == 0x00000000 l00000000004717BC
	// succ:  l00000000004717AC l00000000004717BC
l00000000004717AC:
	x0 = 0x00000000004E1000
	x0 = x0 + 0x00000000000006B8
	w0 = Mem0[x0:word32]
	branch w0 == 0x00000000 l000000000047184C
	// succ:  l00000000004717BC l000000000047184C
l00000000004717BC:
	w0 = Mem0[x29 + 76:word32]
	branch w0 != 0x00000000 l0000000000471A54
	// succ:  l00000000004717C4 l0000000000471A54
l00000000004717C4:
	w0 = Mem0[x29 + 72:word32]
	v25 = sp + 16
	x19 = Mem0[v25:word64]
	v25 = v25 + 8
	x20 = Mem0[v25:word64]
	v26 = sp + 32
	x21 = Mem0[v26:word64]
	v26 = v26 + 8
	x22 = Mem0[v26:word64]
	x23 = Mem0[sp + 48:word64]
	x29 = Mem0[sp:word64]
	sp = sp + 8
	x30 = Mem0[sp:word64]
	sp = sp + 128
	return
	// succ:  parse_and_execute_exit
l00000000004717DC:
	x1 = 0x00000000004BE000
	x1 = x1 + 0xFFFFFFFFFFFFF86C
	v27 = Mem0[x1 + (uint64) ((uint32) w0):byte]
	w2 = (word32) v27
	x3 = 0x00000000004717F4
	x2 = x3 + (int64) ((int8) w2)
l000000000047184C:
	x0 = 0x00000000004DE000
	w1 = Mem0[x0 + 1712:word32]
	x0 = 0x00000000004DE000
	Mem0[x0 + 1704:word32] = w1
	call throw_to_top_level (retsize: 0;)
	goto l00000000004717BC
	// succ:  l00000000004717BC
l0000000000471864:
	x0 = Mem0[x29 + 64:word64]
	w2 = Mem0[x0 + 4:word32]
	w2 = w2 | 0x00000008
	Mem0[x0 + 4:word32] = w2
	x0 = 0x00000000004DE000
	w0 = Mem0[x0 + 1708:word32]
	w31 = w0 - 0x00000002
	NZCV = cond(w31)
	branch Test(NE,Z) l00000000004716E8
	// succ:  l0000000000471884 l00000000004716E8
l0000000000471884:
	x0 = 0x00000000004E1000
	x0 = x0 + 0x00000000000006B8
	w0 = Mem0[x0:word32]
	w31 = w0 - 0x00000001
	NZCV = cond(w31)
	branch Test(EQ,Z) l00000000004719F4
	// succ:  l0000000000471898 l00000000004719F4
l0000000000471898:
	branch w1 == 0x00000000 l00000000004716E8
	// succ:  l000000000047189C l00000000004716E8
l000000000047189C:
	x0 = 0x00000000004E3000
	x0 = Mem0[x0 + 680:word64]
	v31 = Mem0[x0:byte]
	w0 = (word32) v31
	branch w0 != 0x00000000 l00000000004716E8
	// succ:  l00000000004718AC l00000000004716E8
l00000000004718AC:
	x0 = Mem0[x29 + 64:word64]
	w0 = Mem0[x0:word32]
	w31 = w0 - 0x00000004
	NZCV = cond(w31)
	branch Test(NE,Z) l00000000004716E8
	// succ:  l00000000004718BC l00000000004716E8
l00000000004718BC:
	x0 = Mem0[x29 + 64:word64]
	x0 = Mem0[x0 + 16:word64]
	branch x0 != 0x0000000000000000 l00000000004716E8
	// succ:  l00000000004718C8 l00000000004716E8
l00000000004718C8:
	x0 = Mem0[x29 + 64:word64]
	w0 = Mem0[x0 + 4:word32]
	branch (w0 & 0x00000080) == 0x00000000 l00000000004716E8
	// succ:  l00000000004718D4 l00000000004716E8
l00000000004718D4:
	x0 = Mem0[x29 + 64:word64]
	x0 = Mem0[x0 + 24:word64]
	x0 = Mem0[x0 + 8:word64]
	branch x0 != 0x0000000000000000 l00000000004716E8
	// succ:  l00000000004718E4 l00000000004716E8
l00000000004718E4:
	x0 = Mem0[x29 + 64:word64]
	x0 = Mem0[x0 + 24:word64]
	x0 = Mem0[x0 + 16:word64]
	branch x0 == 0x0000000000000000 l00000000004716E8
	// succ:  l00000000004718F4 l00000000004716E8
l00000000004718F4:
	x0 = Mem0[x29 + 64:word64]
	x0 = Mem0[x0 + 24:word64]
	x0 = Mem0[x0 + 16:word64]
	x0 = Mem0[x0:word64]
	branch x0 != 0x0000000000000000 l00000000004716E8
	// succ:  l0000000000471908 l00000000004716E8
l0000000000471908:
	x0 = Mem0[x29 + 64:word64]
	x0 = Mem0[x0 + 24:word64]
	x0 = Mem0[x0 + 16:word64]
	w0 = Mem0[x0 + 24:word32]
	w31 = w0 - 0x00000001
	NZCV = cond(w31)
	branch Test(NE,Z) l00000000004716E8
	// succ:  l0000000000471920 l00000000004716E8
l0000000000471920:
	x0 = Mem0[x29 + 64:word64]
	x0 = Mem0[x0 + 24:word64]
	x22 = Mem0[x0 + 16:word64]
	w0 = Mem0[x22 + 24:word32]
	w31 = w0 - 0x00000001
	NZCV = cond(w31)
	branch Test(NE,Z) l0000000000471A5C
	// succ:  l0000000000471938 l0000000000471A5C
l0000000000471938:
	x0 = 0x00000000004DE000
	w0 = Mem0[x0 + 1716:word32]
	branch w0 == 0x00000000 l0000000000471960
	// succ:  l0000000000471944 l0000000000471960
l0000000000471944:
	x3 = Mem0[x29 + 112:word64]
	w0 = Mem0[x3:word32]
	branch w0 != 0x00000000 l0000000000471960
	// succ:  l0000000000471950 l0000000000471960
l0000000000471950:
	x0 = 0x00000000004DF000
	w1 = Mem0[x0 + 3704:word32]
	w1 = w1 + 0x00000001
	Mem0[x0 + 3704:word32] = w1
	// succ:  l0000000000471960
l0000000000471960:
	x0 = Mem0[x22 + 32:word64]
	call redirection_expand (retsize: 0;)
	x21 = x0
	x0 = 0x00000000004DE000
	w0 = Mem0[x0 + 1716:word32]
	branch w0 == 0x00000000 l0000000000471994
	// succ:  l0000000000471978 l0000000000471994
l0000000000471978:
	x1 = Mem0[x29 + 112:word64]
	w0 = Mem0[x1:word32]
	branch w0 != 0x00000000 l0000000000471994
	// succ:  l0000000000471984 l0000000000471994
l0000000000471984:
	x0 = 0x00000000004DF000
	w1 = Mem0[x0 + 3704:word32]
	w1 = w1 - 0x00000001
	Mem0[x0 + 3704:word32] = w1
	// succ:  l0000000000471994
l0000000000471994:
	branch x21 == 0x0000000000000000 l0000000000471AD8
	// succ:  l0000000000471998 l0000000000471AD8
l0000000000471998:
	x0 = x21
	w1 = 0x00000000
	open(x0, x1)
	sp = sp + 0xFFFFFFFFFFFFFFF8
	w22 = w0
	branch (w0 & 0x00000000) == 0x00000000 l0000000000471AB4
	// succ:  l00000000004719AC l0000000000471AB4
l00000000004719AC:
	w1 = 0x00000001
	x2 = x21
	call zcatfd (retsize: 0;)
	x1 = 0x00000000004BE000
	w23 = w0
	x1 = x1 + 0xFFFFFFFFFFFFF8B0
	w2 = 0x000001F8
	x0 = x21
	call sh_xfree (retsize: 0;)
	w0 = w22
	close(x0)
	sp = sp + 0xFFFFFFFFFFFFFFF8
	w0 = w23
	// succ:  l00000000004719DC
l00000000004719DC:
l00000000004719E8:
	w0 = 0x00000001
	Mem0[x29 + 72:word32] = w0
	goto l0000000000471794
	// succ:  l0000000000471794
l00000000004719F4:
	x0 = 0x00000000004E3000
	w0 = Mem0[x0 + 1632:word32]
	branch w0 != 0x00000000 l0000000000471898
	// succ:  l0000000000471A00 l0000000000471898
l0000000000471A00:
	x0 = 0x00000000004E3000
	x0 = Mem0[x0 + 680:word64]
	v34 = Mem0[x0:byte]
	w0 = (word32) v34
	branch w0 != 0x00000000 l0000000000471898
	// succ:  l0000000000471A10 l0000000000471898
l0000000000471A10:
	x2 = Mem0[x29 + 64:word64]
	w2 = Mem0[x2:word32]
	w31 = w2 - 0x00000004
	NZCV = cond(w31)
	branch Test(NE,Z) l0000000000471898
	// succ:  l0000000000471A20 l0000000000471898
l0000000000471A20:
	call signal_is_trapped (retsize: 0;)
	branch w0 != 0x00000000 l0000000000471A34
	// succ:  l0000000000471A28 l0000000000471A34
l0000000000471A28:
	x0 = Mem0[x29 + 64:word64]
	x0 = Mem0[x0 + 16:word64]
	branch x0 == 0x0000000000000000 l0000000000471A64
	// succ:  l0000000000471A34 l0000000000471A64
l0000000000471A34:
	x0 = 0x00000000004DE000
	w0 = Mem0[x0 + 1708:word32]
	w31 = w0 - 0x00000002
	NZCV = cond(w31)
	branch Test(NE,Z) l00000000004716E8
	// succ:  l0000000000471A44 l00000000004716E8
l0000000000471A44:
	x0 = 0x00000000004E3000
	w1 = Mem0[x0 + 1184:word32]
	w1 = w1 & 0x00000004
	goto l0000000000471898
	// succ:  l0000000000471898
l0000000000471A54:
	w0 = w19
	call jump_to_top_level (retsize: 0;)
	// succ:  l0000000000471A5C
l0000000000471A5C:
	w0 = 0xFFFFFFFF
	goto l00000000004719DC
	// succ:  l00000000004719DC
l0000000000471A64:
	x0 = Mem0[x29 + 64:word64]
	x0 = Mem0[x0 + 24:word64]
	x0 = Mem0[x0 + 16:word64]
	branch x0 != 0x0000000000000000 l0000000000471A34
	// succ:  l0000000000471A74 l0000000000471A34
l0000000000471A74:
	x0 = Mem0[x29 + 64:word64]
	w0 = Mem0[x0 + 4:word32]
	branch (w0 & 0x00000080) == 0x00000000 l0000000000471A34
	// succ:  l0000000000471A80 l0000000000471A34
l0000000000471A80:
	x0 = Mem0[x29 + 64:word64]
	w0 = Mem0[x0 + 4:word32]
	branch (w0 & 0x00000004) == 0x00000000 l0000000000471A34
	// succ:  l0000000000471A8C l0000000000471A34
l0000000000471A8C:
	x1 = Mem0[x29 + 64:word64]
	x0 = Mem0[x29 + 64:word64]
	w2 = Mem0[x1 + 4:word32]
	x0 = Mem0[x0 + 24:word64]
	w2 = w2 | 0x00000040
	w3 = Mem0[x0:word32]
	Mem0[x1 + 4:word32] = w2
	w1 = w3 | 0x00000040
	Mem0[x0:word32] = w1
	goto l0000000000471A34
	// succ:  l0000000000471A34
l0000000000471AB4:
	x0 = x21
	call file_error (retsize: 0;)
	x1 = 0x00000000004BE000
	x0 = x21
	x1 = x1 + 0xFFFFFFFFFFFFF8B0
	w2 = 0x000001F2
	call sh_xfree (retsize: 0;)
	w0 = 0xFFFFFFFF
	goto l00000000004719DC
	// succ:  l00000000004719DC
l0000000000471AD8:
	x0 = x22
	w1 = 0xFFFFFFFF
	call redirection_error (retsize: 0;)
	w0 = 0xFFFFFFFF
	goto l00000000004719DC
	// succ:  l00000000004719DC
parse_and_execute_exit:


// parse_string
// Return size: 0
void parse_string()
parse_string_entry:
	// succ:  l0000000000471AEC
l0000000000471AEC:
	sp = fp
	sp = sp + -112
	Mem0[sp:word64] = x29
	sp = sp + 8
	Mem0[sp:word64] = x30
	x29 = x31 + 0x0000000000000000
	Mem0[x29 + 96:word32] = w2
	v9 = sp + 16
	Mem0[v9:word64] = x19
	v9 = v9 + 8
	Mem0[v9:word64] = x20
	x2 = 0x00000000004BE000
	x19 = x1
	w1 = Mem0[x29 + 96:word32]
	x2 = x2 + 0xFFFFFFFFFFFFF8D8
	Mem0[x29 + 80:word64] = x3
	Mem0[x29 + 72:word64] = x0
	call fn0000000000471348 (retsize: 0;)
	w0 = 0x00000000
	call push_stream (retsize: 0;)
	x2 = 0x00000000004DE000
	x0 = Mem0[x29 + 72:word64]
	x2 = Mem0[x2 + 1872:word64]
	x1 = x19
	Mem0[x29 + 40:word32] = 0x00000000
	Mem0[x29 + 88:word64] = x2
	call with_input_from_string (retsize: 0;)
	x0 = 0x00000000004E3000
	x0 = x0 + 0xFFFFFFFFFFFFFC28
	Mem0[x29 + 48:word64] = x0
	x0 = 0x00000000004BE000
	x0 = x0 + 0xFFFFFFFFFFFFF8F0
	Mem0[x29 + 64:word64] = x0
	x0 = 0x00000000004E3000
	x0 = x0 + 0x0000000000000290
	w19 = 0x00000000
	Mem0[x29 + 56:word64] = x0
	goto l0000000000471BDC
	// succ:  l0000000000471BDC
l0000000000471B68:
	x0 = Mem0[x29 + 48:word64]
	w1 = 0x00000001
	Mem0[x29 + 32:word64] = 0x0000000000000000
	call __sigsetjmp (retsize: 0;)
	w19 = w0
	branch w0 == 0x00000000 l0000000000471BA4
	// succ:  l0000000000471B80 l0000000000471BA4
l0000000000471B80:
	w0 = w0 - 0x00000001
	Mem0[x29 + 40:word32] = 0x00000000
	w31 = w0 - 0x00000003
	NZCV = cond(w31)
	branch Test(ULE,ZC) l0000000000471C60
	// succ:  l0000000000471B90 l0000000000471C60
l0000000000471B90:
	x0 = Mem0[x29 + 64:word64]
	w1 = 0x00000003
	w2 = w19
	w3 = 0x00000000
	call command_error (retsize: 0;)
	// succ:  l0000000000471BA4
l0000000000471BA4:
	call parse_command (retsize: 0;)
	branch w0 != 0x00000000 l0000000000471C30
	// succ:  l0000000000471BAC l0000000000471C30
l0000000000471BAC:
	x20 = 0x00000000004DE000
	x0 = Mem0[x20 + 1872:word64]
	call dispose_command (retsize: 0;)
	x1 = Mem0[x29 + 56:word64]
	Mem0[x20 + 1872:word64] = 0x0000000000000000
	w0 = Mem0[x1:word32]
	w31 = w0 - 0x00000130
	NZCV = cond(w31)
	branch Test(EQ,Z) l0000000000471C3C
	// succ:  l0000000000471BCC l0000000000471C3C
l0000000000471BCC:
	x1 = 0x00000000004E3000
	w1 = Mem0[x1 + 616:word32]
	NZCV = cond(w0 - w1)
	branch Test(EQ,Z) l0000000000471C3C
	// succ:  l0000000000471BDC l0000000000471C3C
l0000000000471BDC:
	x0 = 0x00000000004E3000
	x1 = Mem0[x0 + 680:word64]
	v17 = Mem0[x1:byte]
	w0 = (word32) v17
	branch w0 != 0x00000000 l0000000000471B68
	// succ:  l0000000000471BEC l0000000000471B68
l0000000000471BEC:
	x2 = Mem0[x29 + 88:word64]
	x0 = 0x00000000004DE000
	Mem0[x0 + 1872:word64] = x2
	x0 = Mem0[x29 + 72:word64]
	x2 = Mem0[x29 + 80:word64]
	x20 = x1 - x0
	branch x2 == 0x0000000000000000 l0000000000471C0C
	// succ:  l0000000000471C08 l0000000000471C0C
l0000000000471C08:
	Mem0[x2:word64] = x1
	// succ:  l0000000000471C0C
l0000000000471C0C:
	x0 = 0x00000000004BE000
	x0 = x0 + 0xFFFFFFFFFFFFF8D8
	call run_unwind_frame (retsize: 0;)
	w0 = Mem0[x29 + 40:word32]
	branch w0 != 0x00000000 l0000000000471C84
	// succ:  l0000000000471C20 l0000000000471C84
l0000000000471C20:
	w0 = w20
	v24 = sp + 16
	x19 = Mem0[v24:word64]
	v24 = v24 + 8
	x20 = Mem0[v24:word64]
	x29 = Mem0[sp:word64]
	sp = sp + 8
	x30 = Mem0[sp:word64]
	sp = sp + 112
	return
	// succ:  parse_string_exit
l0000000000471C30:
	w2 = Mem0[x29 + 96:word32]
	branch (w2 & 0x00000040) == 0x00000000 l0000000000471C48
	// succ:  l0000000000471C38 l0000000000471C48
l0000000000471C38:
	call reset_parser (retsize: 0;)
	// succ:  l0000000000471C3C
l0000000000471C3C:
	x0 = 0x00000000004E3000
	x1 = Mem0[x0 + 680:word64]
	goto l0000000000471BEC
	// succ:  l0000000000471BEC
l0000000000471C48:
	w0 = 0x00000001
	Mem0[x29 + 40:word32] = w0
	x0 = 0x00000000004E3000
	x1 = Mem0[x0 + 680:word64]
	w19 = 0x00000002
	goto l0000000000471BEC
	// succ:  l0000000000471BEC
l0000000000471C60:
	x0 = Mem0[x29 + 32:word64]
	branch x0 == 0x0000000000000000 l0000000000471C70
	// succ:  l0000000000471C68 l0000000000471C70
l0000000000471C68:
	x0 = Mem0[x29 + 32:word64]
	call dispose_command (retsize: 0;)
	// succ:  l0000000000471C70
l0000000000471C70:
	w0 = 0x00000001
	Mem0[x29 + 40:word32] = w0
	x0 = 0x00000000004E3000
	x1 = Mem0[x0 + 680:word64]
	goto l0000000000471BEC
	// succ:  l0000000000471BEC
l0000000000471C84:
	w0 = w19
	call jump_to_top_level (retsize: 0;)
	// succ:  l0000000000471C88_thunk_fn0000000000471C8C
l0000000000471C88_thunk_fn0000000000471C8C:
	call fn0000000000471C8C (retsize: 0;)
	return
	// succ:  parse_string_exit
parse_string_exit:


// fn0000000000471C8C
// Return size: 0
void fn0000000000471C8C()
fn0000000000471C8C_entry:
	// succ:  l0000000000471C8C
l0000000000471C8C:
	sp = fp
	sp = sp + -32
	Mem0[sp:word64] = x29
	sp = sp + 8
	Mem0[sp:word64] = x30
	x29 = x31 + 0x0000000000000000
	v8 = sp + 16
	Mem0[v8:word64] = x19
	v8 = v8 + 8
	Mem0[v8:word64] = x20
	x20 = x0
	strlen(x0)
	sp = sp + 0xFFFFFFFFFFFFFFF8
	x1 = 0x00000000004BE000
	x1 = x1 + 0xFFFFFFFFFFFFF900
	w2 = 0x0000005B
	x0 = x0 + 0x0000000000000002
	call sh_xmalloc (retsize: 0;)
	x2 = x0
	x19 = x0
	w0 = 0x0000002D
	Mem0[x2:byte] = (byte) w0
	x2 = x2 + 1
	x1 = x20
	x0 = x2
	strcpy(x0, x1)
	sp = sp + 0xFFFFFFFFFFFFFFF8
	x0 = x19
	v14 = sp + 16
	x19 = Mem0[v14:word64]
	v14 = v14 + 8
	x20 = Mem0[v14:word64]
	x29 = Mem0[sp:word64]
	sp = sp + 8
	x30 = Mem0[sp:word64]
	sp = sp + 32
	return
	// succ:  fn0000000000471C8C_exit
fn0000000000471C8C_exit:


// exec_builtin
// Return size: 0
void exec_builtin()
exec_builtin_entry:
	// succ:  l0000000000471CE0
l0000000000471CE0:
	sp = fp
	sp = sp + -96
	Mem0[sp:word64] = x29
	sp = sp + 8
	Mem0[sp:word64] = x30
	x29 = x31 + 0x0000000000000000
	v8 = sp + 16
	Mem0[v8:word64] = x19
	v8 = v8 + 8
	Mem0[v8:word64] = x20
	v11 = sp + 32
	Mem0[v11:word64] = x21
	v11 = v11 + 8
	Mem0[v11:word64] = x22
	x19 = 0x00000000004BE000
	x21 = 0x0000000000000000
	x22 = 0x00000000004E3000
	v14 = sp + 48
	Mem0[v14:word64] = x23
	v14 = v14 + 8
	Mem0[v14:word64] = x24
	v17 = sp + 64
	Mem0[v17:word64] = x25
	v17 = v17 + 8
	Mem0[v17:word64] = x26
	x20 = x0
	Mem0[x22 + 536:word64] = x21
	w24 = w21
	call reset_internal_getopt (retsize: 0;)
	w23 = w21
	x19 = x19 + 0xFFFFFFFFFFFFF938
	x25 = 0x00000000004E3000
	// succ:  l0000000000471D20
l0000000000471D20:
	x0 = x20
	x1 = x19
	call internal_getopt (retsize: 0;)
	w31 = w0 + 0x00000001
	NZCV = cond(w31)
	branch Test(EQ,Z) l0000000000471D84
	// succ:  l0000000000471D34 l0000000000471D84
l0000000000471D34:
	w31 = w0 - 0x00000063
	NZCV = cond(w31)
	branch Test(EQ,Z) l0000000000471D6C
	// succ:  l0000000000471D3C l0000000000471D6C
l0000000000471D3C:
	w31 = w0 - 0x0000006C
	NZCV = cond(w31)
	branch Test(EQ,Z) l0000000000471F68
	// succ:  l0000000000471D44 l0000000000471F68
l0000000000471D44:
	w31 = w0 - 0x00000061
	NZCV = cond(w31)
	branch Test(EQ,Z) l0000000000471F70
	// succ:  l0000000000471D4C l0000000000471F70
l0000000000471D4C:
	call builtin_usage (retsize: 0;)
	w0 = 0x00000102
	// succ:  l0000000000471D54
l0000000000471D54:
	v27 = sp + 16
	x19 = Mem0[v27:word64]
	v27 = v27 + 8
	x20 = Mem0[v27:word64]
	v28 = sp + 32
	x21 = Mem0[v28:word64]
	v28 = v28 + 8
	x22 = Mem0[v28:word64]
	v29 = sp + 48
	x23 = Mem0[v29:word64]
	v29 = v29 + 8
	x24 = Mem0[v29:word64]
	v30 = sp + 64
	x25 = Mem0[v30:word64]
	v30 = v30 + 8
	x26 = Mem0[v30:word64]
	x29 = Mem0[sp:word64]
	sp = sp + 8
	x30 = Mem0[sp:word64]
	sp = sp + 96
	return
	// succ:  exec_builtin_exit
l0000000000471D6C:
	x0 = x20
	x1 = x19
	call internal_getopt (retsize: 0;)
	w31 = w0 + 0x00000001
	NZCV = cond(w31)
	w23 = 0x00000001
	branch Test(NE,Z) l0000000000471D34
	// succ:  l0000000000471D84 l0000000000471D34
l0000000000471D84:
	x19 = 0x00000000004DF000
	x1 = 0x00000000004E3000
	x0 = Mem0[x19 + 3104:word64]
	x20 = Mem0[x1 + 3856:word64]
	call dispose_redirects (retsize: 0;)
	Mem0[x19 + 3104:word64] = 0x0000000000000000
	branch x20 == 0x0000000000000000 l0000000000472000
	// succ:  l0000000000471DA0 l0000000000472000
l0000000000471DA0:
	x0 = 0x00000000004DF000
	w2 = Mem0[x0 + 3696:word32]
	branch w2 != 0x00000000 l0000000000471F78
	// succ:  l0000000000471DAC l0000000000471F78
l0000000000471DAC:
	x0 = x20
	w1 = 0x00000001
	x3 = 0x0000000000000000
	call strvec_from_word_list (retsize: 0;)
	x19 = x0
	x0 = Mem0[x0:word64]
	call absolute_program (retsize: 0;)
	branch w0 == 0x00000000 l0000000000471F90
	// succ:  l0000000000471DCC l0000000000471F90
l0000000000471DCC:
	x25 = Mem0[x19:word64]
	// succ:  l0000000000471DD0
l0000000000471DD0:
	branch x25 == 0x0000000000000000 l0000000000472008
	// succ:  l0000000000471DD4 l0000000000472008
l0000000000471DD4:
	x0 = x25
	call full_pathname (retsize: 0;)
	x20 = x0
	branch x0 == 0x0000000000000000 l0000000000472058
	// succ:  l0000000000471DE4 l0000000000472058
l0000000000471DE4:
	x0 = Mem0[x19:word64]
	x26 = 0x00000000004BE000
	x31 = x25 - x0
	NZCV = cond(x31)
	branch Test(EQ,Z) l0000000000471E04
	// succ:  l0000000000471DF4 l0000000000471E04
l0000000000471DF4:
	x0 = x25
	x1 = x26 + 0xFFFFFFFFFFFFF900
	w2 = 0x000000AC
	call sh_xfree (retsize: 0;)
	// succ:  l0000000000471E04
l0000000000471E04:
	branch x21 == 0x0000000000000000 l0000000000471FA0
	// succ:  l0000000000471E08 l0000000000471FA0
l0000000000471E08:
	x0 = Mem0[x19:word64]
	x25 = x26 + 0xFFFFFFFFFFFFF900
	x1 = x25
	w2 = 0x000000B2
	call sh_xfree (retsize: 0;)
	x0 = x21
	branch w24 != 0x00000000 l0000000000471F88
	// succ:  l0000000000471E24 l0000000000471F88
l0000000000471E24:
	strlen(x0)
	sp = sp + 0xFFFFFFFFFFFFFFF8
	x1 = x25
	w2 = 0x000000B3
	x0 = x0 + 0x0000000000000001
	call sh_xmalloc (retsize: 0;)
	x1 = x21
	strcpy(x0, x1)
	sp = sp + 0xFFFFFFFFFFFFFFF8
	// succ:  l0000000000471E40
l0000000000471E40:
	Mem0[x19:word64] = x0
	strlen(x0)
	sp = sp + 0xFFFFFFFFFFFFFFF8
	x1 = x26 + 0xFFFFFFFFFFFFF900
	w2 = 0x000000B4
	x0 = x0 + 0x0000000000000001
	call sh_xmalloc (retsize: 0;)
	x1 = Mem0[x19:word64]
	strcpy(x0, x1)
	sp = sp + 0xFFFFFFFFFFFFFFF8
	Mem0[x22 + 536:word64] = x0
	// succ:  l0000000000471E64
l0000000000471E64:
	x21 = 0x0000000000000000
	branch w23 == 0x00000000 l0000000000471FC8
	// succ:  l0000000000471E6C l0000000000471FC8
l0000000000471E6C:
	x0 = 0x00000000004DE000
	w0 = Mem0[x0 + 1712:word32]
	x22 = 0x00000000004E3000
	branch w0 == 0x00000000 l0000000000471E84
	// succ:  l0000000000471E7C l0000000000471E84
l0000000000471E7C:
	w0 = Mem0[x22 + 1184:word32]
	branch w0 == 0x00000000 l0000000000472064
	// succ:  l0000000000471E84 l0000000000472064
l0000000000471E84:
	call restore_original_signals (retsize: 0;)
	w0 = Mem0[x22 + 1184:word32]
	branch w0 == 0x00000000 l0000000000471FEC
	// succ:  l0000000000471E90 l0000000000471FEC
l0000000000471E90:
	x2 = x21
	x0 = x20
	x1 = x19
	call shell_execve (retsize: 0;)
	w21 = w0
	branch w23 == 0x00000000 l0000000000471FE0
	// succ:  l0000000000471EA8 l0000000000471FE0
l0000000000471EA8:
	w31 = w21 - 0x0000007F
	NZCV = cond(w31)
	branch Test(EQ,Z) l0000000000471EF4
	// succ:  l0000000000471EB0 l0000000000471EF4
l0000000000471EB0:
	x0 = x20
	call executable_file (retsize: 0;)
	branch w0 != 0x00000000 l0000000000471FF4
	// succ:  l0000000000471EBC l0000000000471FF4
l0000000000471EBC:
	x1 = 0x00000000004BE000
	x1 = x1 + 0xFFFFFFFFFFFFF940
	w2 = 0x00000005
	x0 = 0x0000000000000000
	dcgettext(x0, x1, x2)
	sp = sp + 0xFFFFFFFFFFFFFFF8
	x19 = x0
	__errno_location()
	sp = sp + 0xFFFFFFFFFFFFFFF8
	w0 = Mem0[x0:word32]
	w21 = 0x0000007E
	strerror(x0)
	sp = sp + 0xFFFFFFFFFFFFFFF8
	x2 = x0
	x1 = x20
	x0 = x19
	call builtin_error (retsize: 0;)
	// succ:  l0000000000471EF4
l0000000000471EF4:
	x0 = x20
	x1 = x26 + 0xFFFFFFFFFFFFF900
	w2 = 0x000000EB
	call sh_xfree (retsize: 0;)
	x19 = 0x0000000000000000
	// succ:  l0000000000471F08
l0000000000471F08:
	w0 = Mem0[x22 + 1184:word32]
	branch w0 != 0x00000000 l0000000000472080
	// succ:  l0000000000471F10 l0000000000472080
l0000000000471F10:
	x0 = 0x00000000004DE000
	w0 = Mem0[x0 + 1704:word32]
	branch w0 != 0x00000000 l0000000000471F28
	// succ:  l0000000000471F1C l0000000000471F28
l0000000000471F1C:
	x0 = 0x00000000004E3000
	w0 = Mem0[x0 + 3516:word32]
	branch w0 == 0x00000000 l0000000000472080
	// succ:  l0000000000471F28 l0000000000472080
l0000000000471F28:
	branch x19 == 0x0000000000000000 l0000000000471F34
	// succ:  l0000000000471F2C l0000000000471F34
l0000000000471F2C:
	x0 = x19
	call strvec_dispose (retsize: 0;)
	// succ:  l0000000000471F34
l0000000000471F34:
	call initialize_traps (retsize: 0;)
	w0 = 0x00000001
	call initialize_signals (retsize: 0;)
	x0 = 0x00000000004DE000
	w0 = Mem0[x0 + 1712:word32]
	branch w0 != 0x00000000 l0000000000471F5C
	// succ:  l0000000000471F4C l0000000000471F5C
l0000000000471F4C:
	x0 = 0x00000000004D6000
	w1 = Mem0[x0 + 3420:word32]
	w0 = w21
	branch w1 == 0x00000000 l0000000000471D54
	// succ:  l0000000000471F5C l0000000000471D54
l0000000000471F5C:
	call restart_job_control (retsize: 0;)
	w0 = w21
	goto l0000000000471D54
	// succ:  l0000000000471D54
l0000000000471F68:
	w24 = 0x00000001
	goto l0000000000471D20
	// succ:  l0000000000471D20
l0000000000471F70:
	x21 = Mem0[x25 + 3840:word64]
	goto l0000000000471D20
	// succ:  l0000000000471D20
l0000000000471F78:
	x0 = 0x0000000000000000
	call sh_restricted (retsize: 0;)
	w0 = 0x00000001
	goto l0000000000471D54
	// succ:  l0000000000471D54
l0000000000471F88:
	call fn0000000000471C8C (retsize: 0;)
	goto l0000000000471E40
	// succ:  l0000000000471E40
l0000000000471F90:
	x0 = Mem0[x19:word64]
	call search_for_command (retsize: 0;)
	x25 = x0
	goto l0000000000471DD0
	// succ:  l0000000000471DD0
l0000000000471FA0:
	branch w24 == 0x00000000 l0000000000471E64
	// succ:  l0000000000471FA4 l0000000000471E64
l0000000000471FA4:
	x0 = Mem0[x19:word64]
	call fn0000000000471C8C (retsize: 0;)
	x21 = x0
	x0 = Mem0[x19:word64]
	x1 = x26 + 0xFFFFFFFFFFFFF900
	w2 = 0x000000B9
	call sh_xfree (retsize: 0;)
	Mem0[x19:word64] = x21
	goto l0000000000471E64
	// succ:  l0000000000471E64
l0000000000471FC8:
	w0 = 0xFFFFFFFF
	call adjust_shell_level (retsize: 0;)
	call maybe_make_export_env (retsize: 0;)
	x0 = 0x00000000004DF000
	x21 = Mem0[x0 + 3240:word64]
	goto l0000000000471E6C
	// succ:  l0000000000471E6C
l0000000000471FE0:
	w0 = 0x00000001
	call adjust_shell_level (retsize: 0;)
	goto l0000000000471EA8
	// succ:  l0000000000471EA8
l0000000000471FEC:
	call end_job_control (retsize: 0;)
	goto l0000000000471E90
	// succ:  l0000000000471E90
l0000000000471FF4:
	x0 = x20
	call file_error (retsize: 0;)
	goto l0000000000471EF4
	// succ:  l0000000000471EF4
l0000000000472000:
	w0 = w20
	goto l0000000000471D54
	// succ:  l0000000000471D54
l0000000000472008:
	x0 = Mem0[x19:word64]
	call file_isdir (retsize: 0;)
	branch w0 == 0x00000000 l000000000047206C
	// succ:  l0000000000472014 l000000000047206C
l0000000000472014:
	x1 = 0x00000000004BE000
	w2 = 0x00000005
	x1 = x1 + 0xFFFFFFFFFFFFF940
	x0 = x25
	dcgettext(x0, x1, x2)
	sp = sp + 0xFFFFFFFFFFFFFFF8
	x1 = Mem0[x19:word64]
	x20 = x0
	w0 = 0x00000015
	Mem0[x29 + 80:word64] = x1
	strerror(x0)
	sp = sp + 0xFFFFFFFFFFFFFFF8
	x1 = Mem0[x29 + 80:word64]
	x2 = x0
	x0 = x20
	call builtin_error (retsize: 0;)
	w21 = 0x0000007E
	x22 = 0x00000000004E3000
	goto l0000000000471F08
	// succ:  l0000000000471F08
l0000000000472058:
	x20 = x25
	x26 = 0x00000000004BE000
	goto l0000000000471E04
	// succ:  l0000000000471E04
l0000000000472064:
	call maybe_save_shell_history (retsize: 0;)
	goto l0000000000471E84
	// succ:  l0000000000471E84
l000000000047206C:
	x0 = Mem0[x19:word64]
	w21 = 0x0000007F
	call sh_notfound (retsize: 0;)
	x22 = 0x00000000004E3000
	goto l0000000000471F08
	// succ:  l0000000000471F08
l0000000000472080:
	w0 = w21
	call exit_shell (retsize: 0;)
	// succ:  l0000000000472084_thunk_bash_logout
l0000000000472084_thunk_bash_logout:
	call bash_logout (retsize: 0;)
	return
	// succ:  exec_builtin_exit
exec_builtin_exit:


// bash_logout
// Return size: 0
void bash_logout()
bash_logout_entry:
	// succ:  l0000000000472088
l0000000000472088:
	sp = fp
	sp = sp + -16
	Mem0[sp:word64] = x29
	sp = sp + 8
	Mem0[sp:word64] = x30
	x29 = x31 + 0x0000000000000000
	x0 = 0x00000000004DE000
	w0 = Mem0[x0 + 1736:word32]
	branch w0 == 0x00000000 l00000000004720C0
	// succ:  l000000000047209C l00000000004720C0
l000000000047209C:
	x1 = 0x00000000004E1000
	x1 = x1 + 0x00000000000006BC
	w0 = Mem0[x1:word32]
	w2 = w0 + 0x00000001
	Mem0[x1:word32] = w2
	branch w0 != 0x00000000 l00000000004720C0
	// succ:  l00000000004720B4 l00000000004720C0
l00000000004720B4:
	x0 = 0x00000000004E3000
	w0 = Mem0[x0 + 1184:word32]
	branch w0 == 0x00000000 l00000000004720C8
	// succ:  l00000000004720C0 l00000000004720C8
l00000000004720C0:
	x29 = Mem0[sp:word64]
	sp = sp + 8
	x30 = Mem0[sp:word64]
	sp = sp + 16
	return
	// succ:  bash_logout_exit
l00000000004720C8:
	x0 = 0x00000000004BE000
	w1 = 0x00000001
	x0 = x0 + 0xFFFFFFFFFFFFF958
	call maybe_execute_file (retsize: 0;)
	x0 = 0x00000000004BE000
	x29 = Mem0[sp:word64]
	sp = sp + 8
	x30 = Mem0[sp:word64]
	sp = sp + 16
	x0 = x0 + 0xFFFFFFFFFFFFF968
	w1 = 0x00000001
	// succ:  l00000000004720E8_thunk_maybe_execute_file
l00000000004720E8_thunk_maybe_execute_file:
	call maybe_execute_file (retsize: 0;)
	return
	// succ:  bash_logout_exit
bash_logout_exit:


// fn00000000004720EC
// Return size: 0
void fn00000000004720EC()
fn00000000004720EC_entry:
	// succ:  l00000000004720EC
l00000000004720EC:
	sp = v3
	sp = sp + -64
	Mem0[sp:word64] = x29
	sp = sp + 8
	Mem0[sp:word64] = x30
	x29 = x31 + 0x0000000000000000
	x1 = 0x00000000004DE000
	w1 = Mem0[x1 + 1704:word32]
	v9 = sp + 16
	Mem0[v9:word64] = x19
	v9 = v9 + 8
	Mem0[v9:word64] = x20
	v12 = sp + 32
	Mem0[v12:word64] = x21
	v12 = v12 + 8
	Mem0[v12:word64] = x22
	Mem0[sp + 48:word64] = x23
	branch w1 != 0x00000000 l0000000000472138
	// succ:  l000000000047210C l0000000000472138
l000000000047210C:
	x1 = 0x00000000004E3000
	w1 = Mem0[x1 + 1632:word32]
	w31 = w1 - 0x00000001
	NZCV = cond(w31)
	branch Test(EQ,Z) l0000000000472298
	// succ:  l000000000047211C l0000000000472298
l000000000047211C:
	call get_exitstat (retsize: 0;)
	w19 = w0
	// succ:  l0000000000472124
l0000000000472124:
	call bash_logout (retsize: 0;)
	x1 = 0x00000000004E3000
	w0 = 0x00000003
	Mem0[x1 + 1200:word32] = w19
	call jump_to_top_level (retsize: 0;)
	// succ:  l0000000000472138
l0000000000472138:
	x21 = 0x00000000004E1000
	x1 = Mem0[x21 + 1704:word64]
	x22 = 0x0000000000472000
	x2 = x22 + 0x00000000000002A8
	x31 = x1 - x2
	NZCV = cond(x31)
	branch Test(EQ,Z) l000000000047210C
	// succ:  l0000000000472150 l000000000047210C
l0000000000472150:
	x2 = 0x0000000000472000
	x2 = x2 + 0x0000000000000328
	x31 = x1 - x2
	NZCV = cond(x31)
	branch Test(EQ,Z) l000000000047210C
	// succ:  l0000000000472160 l000000000047210C
l0000000000472160:
	x2 = 0x0000000000474000
	x2 = x2 + 0x000000000000065C
	x31 = x1 - x2
	NZCV = cond(x31)
	branch Test(EQ,Z) l000000000047210C
	// succ:  l0000000000472170 l000000000047210C
l0000000000472170:
	x1 = 0x00000000004D6000
	w5 = Mem0[x1 + 3364:word32]
	NZCV = cond(w5 - w31)
	branch Test(LE,ZCV) l000000000047210C
	// succ:  l0000000000472180 l000000000047210C
l0000000000472180:
	x1 = 0x00000000004DF000
	x3 = Mem0[x1 + 3784:word64]
	x20 = 0x00000000004DE000
	w5 = w5 - 0x00000001
	x2 = x3 + 0x0000000000000008
	w1 = Mem0[x20 + 1864:word32]
	x5 = x2 + (uint64) ((word32) w5)
	w19 = 0x00000000
	// succ:  l00000000004721A0
l00000000004721A0:
	x3 = Mem0[x3:word64]
	branch x3 == 0x0000000000000000 l00000000004721B4
	// succ:  l00000000004721A8 l00000000004721B4
l00000000004721A8:
	w4 = Mem0[x3 + 20:word32]
	w31 = w4 - 0x00000002
	NZCV = cond(w31)
	branch Test(EQ,Z) l00000000004721E0
	// succ:  l00000000004721B4 l00000000004721E0
l00000000004721B4:
	branch w1 == 0x00000000 l00000000004721CC
	// succ:  l00000000004721B8 l00000000004721CC
l00000000004721B8:
	branch w19 != 0x00000000 l00000000004721CC
	// succ:  l00000000004721BC l00000000004721CC
l00000000004721BC:
	branch x3 == 0x0000000000000000 l00000000004721CC
	// succ:  l00000000004721C0 l00000000004721CC
l00000000004721C0:
	w3 = Mem0[x3 + 20:word32]
	w31 = w3 - 0x00000001
	NZCV = cond(w31)
	w19 = (word32) Test(EQ,Z)
	// succ:  l00000000004721CC
l00000000004721CC:
	x31 = x2 - x5
	NZCV = cond(x31)
	x3 = x2
	branch Test(EQ,Z) l00000000004721F0
	// succ:  l00000000004721D8 l00000000004721F0
l00000000004721D8:
	x2 = x2 + 0x0000000000000008
	goto l00000000004721A0
	// succ:  l00000000004721A0
l00000000004721E0:
	x31 = x2 - x5
	NZCV = cond(x31)
	w19 = w4
	x3 = x2
	branch Test(NE,Z) l00000000004721D8
	// succ:  l00000000004721F0 l00000000004721D8
l00000000004721F0:
	w31 = w19 - 0x00000002
	NZCV = cond(w31)
	branch Test(EQ,Z) l0000000000472268
	// succ:  l00000000004721F8 l0000000000472268
l00000000004721F8:
	w31 = w19 - 0x00000001
	NZCV = cond(w31)
	branch Test(NE,Z) l000000000047210C
	// succ:  l0000000000472200 l000000000047210C
l0000000000472200:
	x0 = 0x00000000004DE000
	x1 = 0x00000000004BE000
	x23 = Mem0[x0 + 1640:word64]
	x1 = x1 + 0xFFFFFFFFFFFFF9A0
	w2 = 0x00000005
	x0 = 0x0000000000000000
	dcgettext(x0, x1, x2)
	sp = sp + 0xFFFFFFFFFFFFFFF8
	x2 = x0
	w1 = w19
	x0 = x23
	__fprintf_chk(x0, x1, x2, Mem0[sp:<unknown>])
	sp = sp + 0xFFFFFFFFFFFFFFF8
	// succ:  l000000000047222C
l000000000047222C:
	w0 = Mem0[x20 + 1864:word32]
	branch w0 != 0x00000000 l000000000047225C
	// succ:  l0000000000472234 l000000000047225C
l0000000000472234:
	x22 = x22 + 0x00000000000002A8
	x0 = 0x00000000004E1000
	Mem0[x0 + 1688:word64] = x22
	Mem0[x21 + 1704:word64] = x22
	w0 = 0x00000001
	v30 = sp + 16
	x19 = Mem0[v30:word64]
	v30 = v30 + 8
	x20 = Mem0[v30:word64]
	v31 = sp + 32
	x21 = Mem0[v31:word64]
	v31 = v31 + 8
	x22 = Mem0[v31:word64]
	x23 = Mem0[sp + 48:word64]
	x29 = Mem0[sp:word64]
	sp = sp + 8
	x30 = Mem0[sp:word64]
	sp = sp + 64
	return
	// succ:  fn00000000004720EC_exit
l000000000047225C:
	w0 = 0x00000000
	call list_all_jobs (retsize: 0;)
	goto l0000000000472234
	// succ:  l0000000000472234
l0000000000472268:
	x0 = 0x00000000004DE000
	x1 = 0x00000000004BE000
	x19 = Mem0[x0 + 1640:word64]
	x1 = x1 + 0xFFFFFFFFFFFFF980
	w2 = 0x00000005
	x0 = 0x0000000000000000
	dcgettext(x0, x1, x2)
	sp = sp + 0xFFFFFFFFFFFFFFF8
	x2 = x0
	w1 = 0x00000001
	x0 = x19
	__fprintf_chk(x0, x1, x2, Mem0[sp:<unknown>])
	sp = sp + 0xFFFFFFFFFFFFFFF8
	goto l000000000047222C
	// succ:  l000000000047222C
l0000000000472298:
	branch x0 != 0x0000000000000000 l000000000047211C
	// succ:  l000000000047229C l000000000047211C
l000000000047229C:
	x0 = 0x00000000004E3000
	w19 = Mem0[x0 + 2160:word32]
	goto l0000000000472124
	// succ:  l0000000000472124
fn00000000004720EC_exit:


// exit_builtin
// Return size: 0
void exit_builtin()
exit_builtin_entry:
	// succ:  l00000000004722A8
l00000000004722A8:
	sp = fp
	sp = sp + -48
	Mem0[sp:word64] = x29
	sp = sp + 8
	Mem0[sp:word64] = x30
	x29 = x31 + 0x0000000000000000
	x1 = 0x00000000004DE000
	w1 = Mem0[x1 + 1704:word32]
	v10 = sp + 16
	Mem0[v10:word64] = x19
	v10 = v10 + 8
	Mem0[v10:word64] = x20
	Mem0[sp + 32:word64] = x21
	x19 = x0
	branch w1 == 0x00000000 l00000000004722F8
	// succ:  l00000000004722C8 l00000000004722F8
l00000000004722C8:
	x0 = 0x00000000004DE000
	w0 = Mem0[x0 + 1736:word32]
	x20 = 0x00000000004DE000
	x21 = Mem0[x20 + 1640:word64]
	branch w0 != 0x00000000 l000000000047230C
	// succ:  l00000000004722DC l000000000047230C
l00000000004722DC:
	x2 = 0x00000000004BE000
	x2 = x2 + 0xFFFFFFFFFFFFF9C0
	// succ:  l00000000004722E4
l00000000004722E4:
	x0 = x21
	w1 = 0x00000001
	__fprintf_chk(x0, x1, x2, Mem0[sp:<unknown>])
	sp = sp + 0xFFFFFFFFFFFFFFF8
	x0 = Mem0[x20 + 1640:word64]
	fflush(x0)
	sp = sp + 0xFFFFFFFFFFFFFFF8
	// succ:  l00000000004722F8
l00000000004722F8:
	x0 = x19
	x21 = Mem0[sp + 32:word64]
	v15 = sp + 16
	x19 = Mem0[v15:word64]
	v15 = v15 + 8
	x20 = Mem0[v15:word64]
	x29 = Mem0[sp:word64]
	sp = sp + 8
	x30 = Mem0[sp:word64]
	sp = sp + 48
	// succ:  l0000000000472308_thunk_fn00000000004720EC
l0000000000472308_thunk_fn00000000004720EC:
	call fn00000000004720EC (retsize: 0;)
	return
	// succ:  exit_builtin_exit
l000000000047230C:
	x1 = 0x00000000004BE000
	w2 = 0x00000005
	x0 = 0x0000000000000000
	x1 = x1 + 0xFFFFFFFFFFFFF9C8
	dcgettext(x0, x1, x2)
	sp = sp + 0xFFFFFFFFFFFFFFF8
	x2 = x0
	goto l00000000004722E4
	// succ:  l00000000004722E4
exit_builtin_exit:


// logout_builtin
// Return size: 0
void logout_builtin()
logout_builtin_entry:
	// succ:  l0000000000472328
l0000000000472328:
	sp = fp
	sp = sp + -16
	Mem0[sp:word64] = x29
	sp = sp + 8
	Mem0[sp:word64] = x30
	x29 = x31 + 0x0000000000000000
	x1 = 0x00000000004DE000
	w1 = Mem0[x1 + 1736:word32]
	branch w1 == 0x00000000 l0000000000472344
	// succ:  l000000000047233C l0000000000472344
l000000000047233C:
	x29 = Mem0[sp:word64]
	sp = sp + 8
	x30 = Mem0[sp:word64]
	sp = sp + 16
	// succ:  l0000000000472340_thunk_fn00000000004720EC
l0000000000472340_thunk_fn00000000004720EC:
	call fn00000000004720EC (retsize: 0;)
	return
	// succ:  logout_builtin_exit
l0000000000472344:
	x1 = 0x00000000004BE000
	x1 = x1 + 0xFFFFFFFFFFFFF9D0
	w2 = 0x00000005
	x0 = 0x0000000000000000
	dcgettext(x0, x1, x2)
	sp = sp + 0xFFFFFFFFFFFFFFF8
	call builtin_error (retsize: 0;)
	w0 = 0x00000001
	x29 = Mem0[sp:word64]
	sp = sp + 8
	x30 = Mem0[sp:word64]
	sp = sp + 16
	return
	// succ:  logout_builtin_exit
logout_builtin_exit:


// fn0000000000472368
// Return size: 0
void fn0000000000472368()
fn0000000000472368_entry:
	// succ:  l0000000000472368
l0000000000472368:
	sp = fp
	sp = sp + -80
	Mem0[sp:word64] = x29
	sp = sp + 8
	Mem0[sp:word64] = x30
	x29 = x31 + 0x0000000000000000
	x2 = Mem0[x1:word64]
	v10 = sp + 32
	Mem0[v10:word64] = x21
	v10 = v10 + 8
	Mem0[v10:word64] = x22
	v13 = sp + 16
	Mem0[v13:word64] = x19
	v13 = v13 + 8
	Mem0[v13:word64] = x20
	Mem0[sp + 48:word64] = x23
	x22 = x0
	branch x2 == 0x0000000000000000 l000000000047239C
	// succ:  l0000000000472388 l000000000047239C
l0000000000472388:
	x3 = x1 + 0x0000000000000008
	w2 = 0x00000000
	// succ:  l0000000000472390
l0000000000472390:
	x4 = Mem0[x3:word64]
	x3 = x3 + 8
	w2 = w2 + 0x00000001
	branch x4 != 0x0000000000000000 l0000000000472390
	// succ:  l000000000047239C l0000000000472390
l000000000047239C:
	x0 = 0x00000000004D7000
	w3 = Mem0[x0 + 388:word32]
	w0 = 0x00000001
	branch w3 != 0x00000000 l00000000004723C4
	// succ:  l00000000004723AC l00000000004723C4
l00000000004723AC:
	x3 = 0x00000000004E3000
	w3 = Mem0[x3 + 1184:word32]
	branch (w3 & 0x00000004) == 0x00000000 l000000000047247C
	// succ:  l00000000004723B8 l000000000047247C
l00000000004723B8:
	x3 = 0x00000000004D7000
	w3 = Mem0[x3 + 384:word32]
	branch w3 == 0x00000000 l000000000047247C
	// succ:  l00000000004723C4 l000000000047247C
l00000000004723C4:
	x3 = 0x00000000004E3000
	w3 = Mem0[x3 + 3440:word32]
	w19 = w2 - w0
	w19 = w19 - w3
	NZCV = cond(w2 - w19)
	branch Test(EQ,Z) l0000000000472498
	// succ:  l00000000004723DC l0000000000472498
l00000000004723DC:
	w0 = 0xFFFFFFFF
	branch (w19 & 0x00000000) == 0x00000000 l0000000000472468
	// succ:  l00000000004723E4 l0000000000472468
l00000000004723E4:
	branch x22 == 0x0000000000000000 l0000000000472464
	// succ:  l00000000004723E8 l0000000000472464
l00000000004723E8:
	v25 = Mem0[x22:byte]
	w21 = (word32) v25
	w31 = w21 - 0x0000002D
	NZCV = cond(w31)
	branch Test(EQ,Z) l00000000004724E0
	// succ:  l00000000004723F4 l00000000004724E0
l00000000004723F4:
	w2 = w21
	x0 = x22
	w20 = 0x00000001
	// succ:  l0000000000472400
l0000000000472400:
	w2 = w2 - 0x00000030
l0000000000472410:
	x0 = x22
	Mem0[x29 + 64:word64] = x1
	strlen(x0)
	sp = sp + 0xFFFFFFFFFFFFFFF8
l0000000000472464:
	w0 = w19
	// succ:  l0000000000472468
l0000000000472468:
	v29 = sp + 16
	x19 = Mem0[v29:word64]
	v29 = v29 + 8
	x20 = Mem0[v29:word64]
	v30 = sp + 32
	x21 = Mem0[v30:word64]
	v30 = v30 + 8
	x22 = Mem0[v30:word64]
	x23 = Mem0[sp + 48:word64]
	x29 = Mem0[sp:word64]
	sp = sp + 8
	x30 = Mem0[sp:word64]
	sp = sp + 80
	return
	// succ:  fn0000000000472368_exit
l000000000047247C:
	x3 = 0x00000000004E3000
	w0 = 0x00000000
	w3 = Mem0[x3 + 3440:word32]
	w19 = w2 - w0
	w19 = w19 - w3
	NZCV = cond(w2 - w19)
	branch Test(NE,Z) l00000000004723DC
	// succ:  l0000000000472498 l00000000004723DC
l0000000000472498:
	x0 = Mem0[x1 + (int64) ((int32) w2):word64]
	branch x0 == 0x0000000000000000 l00000000004724F4
	// succ:  l00000000004724A0 l00000000004724F4
l00000000004724A0:
	w19 = w2
	goto l00000000004723E4
	// succ:  l00000000004723E4
l00000000004724E0:
	x0 = x22 + 0x0000000000000001
	NZCV = cond(x0)
	branch Test(EQ,Z) l0000000000472410
	// succ:  l00000000004724E8 l0000000000472410
l00000000004724E8:
	v28 = Mem0[x22 + 1:byte]
	w2 = (word32) v28
	w20 = 0xFFFFFFFF
	goto l0000000000472400
	// succ:  l0000000000472400
l00000000004724F4:
	x0 = 0xFFFFFFFFFFFFFFF8
	x0 = x0 + (int64) ((int32) w2)
	x0 = x1 + x0
	goto l000000000047250C
	// succ:  l000000000047250C
l0000000000472504:
	x3 = Mem0[x0:word64]
	x0 = x0 + -8
	branch x3 != 0x0000000000000000 l00000000004724A0
	// succ:  l000000000047250C l00000000004724A0
l000000000047250C:
	w2 = w2 - 0x00000001
	w31 = w2 + 0x00000001
	NZCV = cond(w31)
	branch Test(NE,Z) l0000000000472504
	// succ:  l0000000000472518 l0000000000472504
l0000000000472518:
	w0 = w2
	goto l0000000000472468
	// succ:  l0000000000472468
fn0000000000472368_exit:


// fc_builtin
// Return size: 0
void fc_builtin()
fc_builtin_entry:
	// succ:  l0000000000472530
l0000000000472530:
	sp = fp
	sp = sp + -144
	Mem0[sp:word64] = x29
	sp = sp + 8
	Mem0[sp:word64] = x30
	x29 = x31 + 0x0000000000000000
	v8 = sp + 16
	Mem0[v8:word64] = x19
	v8 = v8 + 8
	Mem0[v8:word64] = x20
	v11 = sp + 32
	Mem0[v11:word64] = x21
	v11 = v11 + 8
	Mem0[v11:word64] = x22
	v14 = sp + 48
	Mem0[v14:word64] = x23
	v14 = v14 + 8
	Mem0[v14:word64] = x24
	v17 = sp + 64
	Mem0[v17:word64] = x25
	v17 = v17 + 8
	Mem0[v17:word64] = x26
	v20 = sp + 80
	Mem0[v20:word64] = x27
	v20 = v20 + 8
	Mem0[v20:word64] = x28
	x19 = x0
	x21 = 0x0000000000000000
	call reset_internal_getopt (retsize: 0;)
	x22 = 0x00000000004E1000
	x23 = 0x00000000004BE000
	x24 = 0x00000000004BE000
	Mem0[x22 + 2496:word64] = x19
	x2 = x19
	w28 = w21
	w26 = w21
	w25 = w21
	w27 = 0x00000001
	x20 = 0x00000000004E3000
	x23 = x23 + 0xFFFFFFFFFFFFFA70
	x24 = x24 + 0xFFFFFFFFFFFFF9EC
	Mem0[x20 + 3856:word64] = x2
	branch x2 == 0x0000000000000000 l00000000004725B0
	// succ:  l0000000000472590 l00000000004725B0
l0000000000472590:
	x2 = Mem0[x2 + 8:word64]
	x1 = 0x0000000000000000
	x0 = Mem0[x2:word64]
	v30 = Mem0[x0:byte]
	w3 = (word32) v30
	w31 = w3 - 0x0000002D
	NZCV = cond(w31)
l00000000004725B0:
	x0 = x19
	x1 = x23
	call internal_getopt (retsize: 0;)
	w31 = w0 + 0x00000001
	NZCV = cond(w31)
	branch Test(EQ,Z) l0000000000472644
	// succ:  l00000000004725C4 l0000000000472644
l00000000004725C4:
	w2 = w0 - 0x00000065
	w31 = w2 - 0x0000000E
	NZCV = cond(w31)
	branch Test(ULE,ZC) l00000000004725F4
	// succ:  l00000000004725D0 l00000000004725F4
l00000000004725D0:
	call builtin_usage (retsize: 0;)
	w0 = 0x00000102
	// succ:  l00000000004725D8
l00000000004725D8:
	v37 = sp + 16
	x19 = Mem0[v37:word64]
	v37 = v37 + 8
	x20 = Mem0[v37:word64]
	v38 = sp + 32
	x21 = Mem0[v38:word64]
	v38 = v38 + 8
	x22 = Mem0[v38:word64]
	v39 = sp + 48
	x23 = Mem0[v39:word64]
	v39 = v39 + 8
	x24 = Mem0[v39:word64]
	v40 = sp + 64
	x25 = Mem0[v40:word64]
	v40 = v40 + 8
	x26 = Mem0[v40:word64]
	v41 = sp + 80
	x27 = Mem0[v41:word64]
	v41 = v41 + 8
	x28 = Mem0[v41:word64]
	x29 = Mem0[sp:word64]
	sp = sp + 8
	x30 = Mem0[sp:word64]
	sp = sp + 144
	return
	// succ:  fc_builtin_exit
l00000000004725F4:
	v43 = Mem0[x24 + (uint64) ((uint32) w2):byte]
	w0 = (word32) v43
	x1 = 0x0000000000472604
	x0 = x1 + (int64) ((int8) w0)
	call x0 (retsize: 0;)
	return
	// succ:  fc_builtin_exit
l0000000000472644:
	x20 = Mem0[x20 + 3856:word64]
	branch x21 == 0x0000000000000000 l0000000000472658
	// succ:  l000000000047264C l0000000000472658
l000000000047264C:
	v42 = Mem0[x21:byte]
	w0 = (word32) v42
	w31 = w0 - 0x0000002D
	NZCV = cond(w31)
	branch Test(EQ,Z) l0000000000472A54
	// succ:  l0000000000472658 l0000000000472A54
l0000000000472658:
	branch w28 == 0x00000000 l00000000004728C4
	// succ:  l000000000047265C l00000000004728C4
l000000000047265C:
	branch x20 == 0x0000000000000000 l0000000000472E38
	// succ:  l0000000000472660 l0000000000472E38
l0000000000472660:
	x21 = 0x00000000004BE000
	x23 = 0x0000000000000000
	x21 = x21 + 0xFFFFFFFFFFFFFA78
	goto l00000000004726F4
	// succ:  l00000000004726F4
l0000000000472670:
	Mem0[x3:byte] = 0x00
	x1 = x21
	w2 = 0x000000EA
	x0 = 0x0000000000000018
	x22 = x3 + 0x0000000000000001
	call sh_xmalloc (retsize: 0;)
	x19 = x0
	x0 = Mem0[x20 + 8:word64]
	Mem0[x19:word64] = 0x0000000000000000
	x0 = Mem0[x0:word64]
	strlen(x0)
	sp = sp + 0xFFFFFFFFFFFFFFF8
	w2 = 0x000000EC
	x1 = x21
	x0 = x0 + 0x0000000000000001
	call sh_xmalloc (retsize: 0;)
	x1 = Mem0[x20 + 8:word64]
	x1 = Mem0[x1:word64]
	strcpy(x0, x1)
	sp = sp + 0xFFFFFFFFFFFFFFF8
	Mem0[x19 + 8:word64] = x0
	x0 = x22
	strlen(x0)
	sp = sp + 0xFFFFFFFFFFFFFFF8
	w2 = 0x000000ED
	x1 = x21
	x0 = x0 + 0x0000000000000001
	call sh_xmalloc (retsize: 0;)
	x1 = x22
	strcpy(x0, x1)
	sp = sp + 0xFFFFFFFFFFFFFFF8
	Mem0[x19 + 16:word64] = x0
	branch x23 == 0x0000000000000000 l00000000004726E8
	// succ:  l00000000004726E4 l00000000004726E8
l00000000004726E4:
	Mem0[x19:word64] = x23
	// succ:  l00000000004726E8
l00000000004726E8:
	x20 = Mem0[x20:word64]
	branch x20 == 0x0000000000000000 l0000000000472714
	// succ:  l00000000004726F0 l0000000000472714
l00000000004726F0:
	x23 = x19
	// succ:  l00000000004726F4
l00000000004726F4:
	x0 = Mem0[x20 + 8:word64]
	w1 = 0x0000003D
	x0 = Mem0[x0:word64]
	strchr(x0, x1)
	sp = sp + 0xFFFFFFFFFFFFFFF8
	x3 = x0
	branch x0 != 0x0000000000000000 l0000000000472670
	// succ:  l000000000047270C l0000000000472670
l000000000047270C:
	x19 = x23
	branch x23 == 0x0000000000000000 l0000000000472728
	// succ:  l0000000000472714 l0000000000472728
l0000000000472714:
	x0 = Mem0[x19:word64]
	branch x0 == 0x0000000000000000 l0000000000472728
	// succ:  l000000000047271C l0000000000472728
l000000000047271C:
	x0 = x19
	call list_reverse (retsize: 0;)
	x19 = x0
	// succ:  l0000000000472728
l0000000000472728:
	call history_list (retsize: 0;)
	x22 = x0
	branch x20 == 0x0000000000000000 l0000000000472CA4
	// succ:  l0000000000472734 l0000000000472CA4
l0000000000472734:
	x0 = Mem0[x20 + 8:word64]
	x0 = Mem0[x0:word64]
	// succ:  l000000000047273C
l000000000047273C:
	branch x22 == 0x0000000000000000 l0000000000472DA4
	// succ:  l0000000000472740 l0000000000472DA4
l0000000000472740:
	x1 = x22
	call fn0000000000472368 (retsize: 0;)
	branch (w0 & 0x00000000) == 0x00000000 l0000000000472DA4
	// succ:  l000000000047274C l0000000000472DA4
l000000000047274C:
l00000000004728C4:
	call history_list (retsize: 0;)
	x22 = x0
	branch x0 == 0x0000000000000000 l00000000004725D8
	// succ:  l00000000004728D0 l00000000004725D8
l00000000004728D0:
	x0 = Mem0[x0:word64]
	branch x0 == 0x0000000000000000 l0000000000472E4C
	// succ:  l00000000004728D8 l0000000000472E4C
l00000000004728D8:
	x2 = x22 + 0x0000000000000008
	// succ:  l00000000004728DC
l00000000004728DC:
	x0 = Mem0[x2:word64]
	x2 = x2 + 8
	w28 = w28 + 0x00000001
	branch x0 != 0x0000000000000000 l00000000004728DC
	// succ:  l00000000004728E8 l00000000004728DC
l00000000004728E8:
	x1 = 0x00000000004D7000
	w0 = Mem0[x1 + 388:word32]
	w19 = 0x00000001
	branch w0 == 0x00000000 l0000000000472A64
	// succ:  l00000000004728F8 l0000000000472A64
l00000000004728F8:
	x23 = 0x00000000004E3000
	w0 = Mem0[x23 + 3440:word32]
	w19 = w28 - w19
	w19 = w19 - w0
	NZCV = cond(w28 - w19)
	branch Test(EQ,Z) l0000000000472CAC
	// succ:  l0000000000472910 l0000000000472CAC
l0000000000472910:
	branch (w19 & 0x00000000) == 0x00000000 l0000000000472B2C
	// succ:  l0000000000472914 l0000000000472B2C
l0000000000472914:
	branch x20 == 0x0000000000000000 l0000000000472A84
	// succ:  l0000000000472918 l0000000000472A84
l0000000000472918:
	x0 = Mem0[x20 + 8:word64]
	x1 = x22
	x0 = Mem0[x0:word64]
	call fn0000000000472368 (retsize: 0;)
	Mem0[x29 + 120:word32] = w0
	x0 = Mem0[x20:word64]
	branch x0 == 0x0000000000000000 l0000000000472D8C
	// succ:  l0000000000472934 l0000000000472D8C
l0000000000472934:
	x0 = Mem0[x0 + 8:word64]
	x1 = x22
	x0 = Mem0[x0:word64]
	call fn0000000000472368 (retsize: 0;)
	w28 = w0
	branch w26 != 0x00000000 l0000000000472954
	// succ:  l000000000047294C l0000000000472954
l000000000047294C:
	w0 = Mem0[x23 + 3440:word32]
	branch w0 != 0x00000000 l0000000000472B00
	// succ:  l0000000000472954 l0000000000472B00
l0000000000472954:
	branch (w28 & 0x00000000) == 0x00000000 l0000000000472B2C
	// succ:  l0000000000472958 l0000000000472B2C
l0000000000472958:
	w1 = Mem0[x29 + 120:word32]
	branch (w1 & 0x00000000) == 0x00000000 l0000000000472B2C
	// succ:  l0000000000472960 l0000000000472B2C
l0000000000472960:
	w0 = Mem0[x29 + 120:word32]
	NZCV = cond(w0 - w28)
	branch Test(GT,NZV) l0000000000472C9C
	// succ:  l000000000047296C l0000000000472C9C
l000000000047296C:
	w0 = w28
	w28 = Mem0[x29 + 120:word32]
	Mem0[x29 + 120:word32] = w0
	// succ:  l0000000000472978
l0000000000472978:
	branch w26 == 0x00000000 l0000000000472CF0
	// succ:  l000000000047297C l0000000000472CF0
l000000000047297C:
	x0 = 0x00000000004DE000
	x20 = Mem0[x0 + 1648:word64]
	// succ:  l0000000000472984
l0000000000472984:
	x0 = 0x00000000004E1000
	x0 = x0 + 0x0000000000000278
	Mem0[x29 + 112:word64] = x0
	x0 = 0x00000000004AD000
	w1 = Mem0[x29 + 120:word32]
	x0 = x0 + 0x0000000000000008
	NZCV = cond(w25 - w31)
	x24 = 0x00000000004E1000
	Mem0[x29 + 128:word64] = x0
l0000000000472A54:
	v48 = Mem0[x21 + 1:byte]
	w0 = (word32) v48
	branch w0 == 0x00000000 l000000000047265C
	// succ:  l0000000000472A5C l000000000047265C
l0000000000472A5C:
	branch w28 != 0x00000000 l000000000047265C
	// succ:  l0000000000472A60 l000000000047265C
l0000000000472A60:
	goto l00000000004728C4
	// succ:  l00000000004728C4
l0000000000472A64:
	x0 = 0x00000000004E3000
	w0 = Mem0[x0 + 1184:word32]
	branch (w0 & 0x00000004) == 0x00000000 l0000000000472A7C
	// succ:  l0000000000472A70 l0000000000472A7C
l0000000000472A70:
	x0 = 0x00000000004D7000
	w0 = Mem0[x0 + 384:word32]
	branch w0 != 0x00000000 l00000000004728F8
	// succ:  l0000000000472A7C l00000000004728F8
l0000000000472A7C:
	w19 = 0x00000000
	goto l00000000004728F8
	// succ:  l00000000004728F8
l0000000000472A84:
	branch w26 == 0x00000000 l0000000000472E2C
	// succ:  l0000000000472A88 l0000000000472E2C
l0000000000472A88:
	w0 = w19 - 0x0000000F
	NZCV = cond(w0)
l0000000000472A94:
	w28 = w19
	goto l0000000000472954
	// succ:  l0000000000472954
l0000000000472B00:
	call bash_delete_last_history (retsize: 0;)
	NZCV = cond(w28 - w19)
	branch Test(NE,Z) l0000000000472954
	// succ:  l0000000000472B0C l0000000000472954
l0000000000472B0C:
	w0 = Mem0[x29 + 120:word32]
	NZCV = cond(w0 - w28)
	branch Test(NE,Z) l0000000000472954
	// succ:  l0000000000472B18 l0000000000472954
l0000000000472B18:
	x0 = Mem0[x22 + (int64) ((int32) w19):word64]
	branch x0 != 0x0000000000000000 l0000000000472954
	// succ:  l0000000000472B20 l0000000000472954
l0000000000472B20:
	w28 = w28 - 0x00000001
	Mem0[x29 + 120:word32] = w28
	branch (w28 & 0x00000000) == 0x00000000 l000000000047296C
	// succ:  l0000000000472B2C l000000000047296C
l0000000000472B2C:
	x1 = 0x00000000004BE000
	x1 = x1 + 0xFFFFFFFFFFFFFAC0
	w2 = 0x00000005
	x0 = 0x0000000000000000
	dcgettext(x0, x1, x2)
	sp = sp + 0xFFFFFFFFFFFFFFF8
	x1 = x0
	x0 = 0x0000000000000000
	call sh_erange (retsize: 0;)
	w0 = 0x00000001
	goto l00000000004725D8
	// succ:  l00000000004725D8
l0000000000472C9C:
	w25 = 0x00000001
	goto l0000000000472978
	// succ:  l0000000000472978
l0000000000472CA4:
	x0 = x20
	goto l000000000047273C
	// succ:  l000000000047273C
l0000000000472CAC:
	x1 = Mem0[x22 + (int64) ((int32) w28):word64]
	branch x1 == 0x0000000000000000 l0000000000472CC0
	// succ:  l0000000000472CB4 l0000000000472CC0
l0000000000472CB4:
	w19 = w28
	// succ:  l0000000000472CB8
l0000000000472CB8:
	branch x20 != 0x0000000000000000 l0000000000472918
	// succ:  l0000000000472CBC l0000000000472918
l0000000000472CBC:
	goto l0000000000472A84
	// succ:  l0000000000472A84
l0000000000472CC0:
	x1 = 0xFFFFFFFFFFFFFFF8
	x1 = x1 + (int64) ((int32) w28)
	x1 = x22 + x1
	// succ:  l0000000000472CCC
l0000000000472CCC:
	w28 = w28 - 0x00000001
	w31 = w28 + 0x00000001
	NZCV = cond(w31)
	branch Test(EQ,Z) l0000000000472B2C
	// succ:  l0000000000472CD8 l0000000000472B2C
l0000000000472CD8:
	x2 = Mem0[x1:word64]
	x1 = x1 + -8
	branch x2 == 0x0000000000000000 l0000000000472CCC
	// succ:  l0000000000472CE0 l0000000000472CCC
l0000000000472CE0:
	w19 = w28
	goto l0000000000472CB8
	// succ:  l0000000000472CB8
l0000000000472CF0:
	x0 = 0x00000000004BE000
	x0 = x0 + 0xFFFFFFFFFFFFFAD8
	w1 = 0x00000005
	x2 = x29 + 0x0000000000000060
	call sh_mktmpfp (retsize: 0;)
	x20 = x0
	w27 = w26
	branch x0 != 0x0000000000000000 l0000000000472984
	// succ:  l0000000000472D10 l0000000000472984
l0000000000472D10:
	x1 = 0x00000000004BE000
	x1 = x1 + 0xFFFFFFFFFFFFFAE0
	w2 = 0x00000005
	dcgettext(x0, x1, x2)
	sp = sp + 0xFFFFFFFFFFFFFFF8
	x1 = Mem0[x29 + 96:word64]
	x19 = x0
	branch x1 == 0x0000000000000000 l0000000000472EB8
	// succ:  l0000000000472D2C l0000000000472EB8
l0000000000472D2C:
	Mem0[x29 + 136:word64] = x1
	__errno_location()
	sp = sp + 0xFFFFFFFFFFFFFFF8
	w0 = Mem0[x0:word32]
	strerror(x0)
	sp = sp + 0xFFFFFFFFFFFFFFF8
	x1 = Mem0[x29 + 136:word64]
	x2 = x0
	x0 = x19
	call builtin_error (retsize: 0;)
	x0 = Mem0[x29 + 96:word64]
	branch x0 == 0x0000000000000000 l0000000000472D84
	// succ:  l0000000000472D54 l0000000000472D84
l0000000000472D54:
	x1 = 0x00000000004BE000
	x1 = x1 + 0xFFFFFFFFFFFFFA78
	w2 = 0x0000017D
	call sh_xfree (retsize: 0;)
	w0 = 0x00000001
	goto l00000000004725D8
	// succ:  l00000000004725D8
l0000000000472D84:
	w0 = 0x00000001
	goto l00000000004725D8
	// succ:  l00000000004725D8
l0000000000472D8C:
	branch w26 != 0x00000000 l0000000000472A94
	// succ:  l0000000000472D90 l0000000000472A94
l0000000000472D90:
	w28 = Mem0[x29 + 120:word32]
	w0 = Mem0[x23 + 3440:word32]
	Mem0[x29 + 120:word32] = w28
	// succ:  l0000000000472D9C
l0000000000472D9C:
	branch w0 == 0x00000000 l0000000000472954
	// succ:  l0000000000472DA0 l0000000000472954
l0000000000472DA0:
	goto l0000000000472B00
	// succ:  l0000000000472B00
l0000000000472DA4:
	x1 = 0x00000000004BE000
	x1 = x1 + 0xFFFFFFFFFFFFFAA8
	w2 = 0x00000005
	x0 = 0x0000000000000000
	dcgettext(x0, x1, x2)
	sp = sp + 0xFFFFFFFFFFFFFFF8
	x23 = 0x00000000004BE000
	call builtin_error (retsize: 0;)
	x23 = x23 + 0xFFFFFFFFFFFFFA78
	branch x19 != 0x0000000000000000 l0000000000472DD0
	// succ:  l0000000000472DC8 l0000000000472DD0
l0000000000472DC8:
	goto l0000000000472D84
	// succ:  l0000000000472D84
l0000000000472DCC:
	x19 = x20
	// succ:  l0000000000472DD0
l0000000000472DD0:
	x0 = Mem0[x19 + 8:word64]
	x20 = Mem0[x19:word64]
	branch x0 == 0x0000000000000000 l0000000000472DE8
	// succ:  l0000000000472DDC l0000000000472DE8
l0000000000472DDC:
	x1 = x23
	w2 = 0x00000108
	call sh_xfree (retsize: 0;)
	// succ:  l0000000000472DE8
l0000000000472DE8:
	x0 = Mem0[x19 + 16:word64]
	branch x0 == 0x0000000000000000 l0000000000472DFC
	// succ:  l0000000000472DF0 l0000000000472DFC
l0000000000472DF0:
	x1 = x23
	w2 = 0x00000108
	call sh_xfree (retsize: 0;)
	// succ:  l0000000000472DFC
l0000000000472DFC:
	x0 = x19
	x1 = x23
	w2 = 0x00000108
	call sh_xfree (retsize: 0;)
	branch x20 != 0x0000000000000000 l0000000000472DCC
	// succ:  l0000000000472E10 l0000000000472DCC
l0000000000472E10:
	w0 = 0x00000001
	goto l00000000004725D8
	// succ:  l00000000004725D8
l0000000000472E2C:
	w28 = w19
	Mem0[x29 + 120:word32] = w28
	goto l0000000000472D9C
	// succ:  l0000000000472D9C
l0000000000472E38:
	call history_list (retsize: 0;)
	x22 = x0
	x19 = x20
	x0 = x20
	goto l000000000047273C
	// succ:  l000000000047273C
l0000000000472E4C:
	w28 = w0
	goto l00000000004728E8
	// succ:  l00000000004728E8
l0000000000472EB8:
	x1 = 0x00000000004AC000
	x1 = x1 + 0x0000000000000460
	goto l0000000000472D2C
	// succ:  l0000000000472D2C
fc_builtin_exit:


// fn0000000000472EC4
// Return size: 0
void fn0000000000472EC4()
fn0000000000472EC4_entry:
	// succ:  l0000000000472EC4
l0000000000472EC4:
	sp = fp
	sp = sp + -304
	Mem0[sp:word64] = x29
	sp = sp + 8
	Mem0[sp:word64] = x30
	x29 = x31 + 0x0000000000000000
	v8 = sp + 16
	Mem0[v8:word64] = x19
	v8 = v8 + 8
	Mem0[v8:word64] = x20
	x20 = x0
	x0 = x29 + 0x00000000000000B0
	Mem0[sp + 32:word64] = x21
	w21 = w1
	sigemptyset(x0)
	sp = sp + 0xFFFFFFFFFFFFFFF8
	w1 = 0x00000011
	x0 = x29 + 0x00000000000000B0
	sigaddset(x0, x1)
	sp = sp + 0xFFFFFFFFFFFFFFF8
	x0 = x29 + 0x0000000000000030
	sigemptyset(x0)
	sp = sp + 0xFFFFFFFFFFFFFFF8
	x1 = x29 + 0x00000000000000B0
	x2 = x29 + 0x0000000000000030
	w0 = 0x00000000
	sigprocmask(x0, x1, x2)
	sp = sp + 0xFFFFFFFFFFFFFFF8
	x0 = x20
	call get_job_spec (retsize: 0;)
	w19 = w0
	branch (w0 & 0x00000000) == 0x00000000 l0000000000472F68
	// succ:  l0000000000472F18 l0000000000472F68
l0000000000472F18:
	x2 = 0x00000000004D6000
	w2 = Mem0[x2 + 3364:word32]
	NZCV = cond(w0 - w2)
	branch Test(GE,NZV) l0000000000472F70
	// succ:  l0000000000472F28 l0000000000472F70
l0000000000472F28:
	x1 = 0x00000000004DF000
	x1 = Mem0[x1 + 3784:word64]
	x1 = Mem0[x1 + (int64) ((int32) w0):word64]
	branch x1 == 0x0000000000000000 l0000000000472F70
	// succ:  l0000000000472F38 l0000000000472F70
l0000000000472F38:
	w2 = Mem0[x1 + 24:word32]
	branch (w2 & 0x00000004) == 0x00000000 l0000000000472FA4
	// succ:  l0000000000472F40 l0000000000472FA4
l0000000000472F40:
	branch w21 != 0x00000000 l0000000000472FDC
	// succ:  l0000000000472F44 l0000000000472FDC
l0000000000472F44:
	w2 = Mem0[x1 + 16:word32]
	x19 = 0x00000000004D6000
	w1 = w21
	w20 = Mem0[x19 + 3416:word32]
	Mem0[x19 + 3416:word32] = w2
	call start_job (retsize: 0;)
	branch (w0 & 0x00000000) == 0x00000000 l0000000000472FC4
	// succ:  l0000000000472F60 l0000000000472FC4
l0000000000472F60:
	Mem0[x19 + 3416:word32] = w20
	goto l0000000000472F80
	// succ:  l0000000000472F80
l0000000000472F68:
	w31 = w0 + 0x00000002
	NZCV = cond(w31)
	branch Test(EQ,Z) l0000000000472F80
	// succ:  l0000000000472F70 l0000000000472F80
l0000000000472F70:
	branch x20 == 0x0000000000000000 l0000000000473004
	// succ:  l0000000000472F74 l0000000000473004
l0000000000472F74:
	x0 = Mem0[x20 + 8:word64]
	x0 = Mem0[x0:word64]
	// succ:  l0000000000472F7C
l0000000000472F7C:
	call sh_badjob (retsize: 0;)
	// succ:  l0000000000472F80
l0000000000472F80:
	w0 = 0x00000002
	x1 = x29 + 0x0000000000000030
	x2 = 0x0000000000000000
	sigprocmask(x0, x1, x2)
	sp = sp + 0xFFFFFFFFFFFFFFF8
	w0 = 0x00000001
	// succ:  l0000000000472F94
l0000000000472F94:
	v23 = sp + 16
	x19 = Mem0[v23:word64]
	v23 = v23 + 8
	x20 = Mem0[v23:word64]
	x21 = Mem0[sp + 32:word64]
	x29 = Mem0[sp:word64]
	sp = sp + 8
	x30 = Mem0[sp:word64]
	sp = sp + 304
	return
	// succ:  fn0000000000472EC4_exit
l0000000000472FA4:
	x1 = 0x00000000004BE000
	x1 = x1 + 0xFFFFFFFFFFFFFB28
	w2 = 0x00000005
	x0 = 0x0000000000000000
	dcgettext(x0, x1, x2)
	sp = sp + 0xFFFFFFFFFFFFFFF8
	w1 = w19 + 0x00000001
	call builtin_error (retsize: 0;)
	goto l0000000000472F80
	// succ:  l0000000000472F80
l0000000000472FC4:
	w0 = 0x00000002
	x1 = x29 + 0x0000000000000030
	x2 = 0x0000000000000000
	sigprocmask(x0, x1, x2)
	sp = sp + 0xFFFFFFFFFFFFFFF8
	w0 = w21
	goto l0000000000472F94
	// succ:  l0000000000472F94
l0000000000472FDC:
	w1 = w21
	call start_job (retsize: 0;)
	w19 = w0
	branch (w0 & 0x00000000) == 0x00000000 l0000000000472F80
	// succ:  l0000000000472FEC l0000000000472F80
l0000000000472FEC:
	w0 = 0x00000002
	x1 = x29 + 0x0000000000000030
	x2 = 0x0000000000000000
	sigprocmask(x0, x1, x2)
	sp = sp + 0xFFFFFFFFFFFFFFF8
	w0 = w19
	goto l0000000000472F94
	// succ:  l0000000000472F94
l0000000000473004:
	x1 = 0x00000000004BE000
	x0 = x20
	x1 = x1 + 0xFFFFFFFFFFFFFB20
	w2 = 0x00000005
	dcgettext(x0, x1, x2)
	sp = sp + 0xFFFFFFFFFFFFFFF8
	goto l0000000000472F7C
	// succ:  l0000000000472F7C
fn0000000000472EC4_exit:


// fg_builtin
// Return size: 0
void fg_builtin()
fg_builtin_entry:
	// succ:  l000000000047301C
l000000000047301C:
	sp = fp
	sp = sp + -16
	Mem0[sp:word64] = x29
	sp = sp + 8
	Mem0[sp:word64] = x30
	x29 = x31 + 0x0000000000000000
	x1 = 0x00000000004D6000
	w1 = Mem0[x1 + 3420:word32]
	branch w1 == 0x00000000 l000000000047308C
	// succ:  l0000000000473030 l000000000047308C
l0000000000473030:
	call no_options (retsize: 0;)
	w1 = 0x00000102
	branch w0 == 0x00000000 l0000000000473048
	// succ:  l000000000047303C l0000000000473048
l000000000047303C:
	w0 = w1
	x29 = Mem0[sp:word64]
	sp = sp + 8
	x30 = Mem0[sp:word64]
	sp = sp + 16
	return
	// succ:  fg_builtin_exit
l0000000000473048:
	x0 = 0x00000000004E3000
	x0 = Mem0[x0 + 3856:word64]
	branch x0 == 0x0000000000000000 l0000000000473080
	// succ:  l0000000000473054 l0000000000473080
l0000000000473054:
	x2 = Mem0[x0:word64]
	branch x2 != 0x0000000000000000 l0000000000473064
	// succ:  l000000000047305C l0000000000473064
l000000000047305C:
	goto l00000000004730B4
	// succ:  l00000000004730B4
l0000000000473060:
	x2 = x1
	// succ:  l0000000000473064
l0000000000473064:
	x1 = Mem0[x2:word64]
	branch x1 != 0x0000000000000000 l0000000000473060
	// succ:  l000000000047306C l0000000000473060
l000000000047306C:
	x1 = Mem0[x2 + 8:word64]
	x1 = Mem0[x1:word64]
	v12 = Mem0[x1:byte]
	w2 = (word32) v12
	w31 = w2 - 0x00000026
	NZCV = cond(w31)
	branch Test(EQ,Z) l00000000004730A4
	// succ:  l0000000000473080 l00000000004730A4
l0000000000473080:
	w1 = 0x00000001
	// succ:  l0000000000473084
l0000000000473084:
	x29 = Mem0[sp:word64]
	sp = sp + 8
	x30 = Mem0[sp:word64]
	sp = sp + 16
	// succ:  l0000000000473088_thunk_fn0000000000472EC4
l0000000000473088_thunk_fn0000000000472EC4:
	call fn0000000000472EC4 (retsize: 0;)
	return
	// succ:  fg_builtin_exit
l000000000047308C:
	x0 = 0x0000000000000000
	call sh_nojobs (retsize: 0;)
	w1 = 0x00000001
	w0 = w1
	x29 = Mem0[sp:word64]
	sp = sp + 8
	x30 = Mem0[sp:word64]
	sp = sp + 16
	return
	// succ:  fg_builtin_exit
l00000000004730A4:
	v16 = Mem0[x1 + 1:byte]
	w1 = (word32) v16
	NZCV = cond(w1 - w31)
	w1 = (word32) Test(NE,Z)
	goto l0000000000473084
	// succ:  l0000000000473084
l00000000004730B4:
	x2 = x0
	goto l000000000047306C
	// succ:  l000000000047306C
fg_builtin_exit:


// bg_builtin
// Return size: 0
void bg_builtin()
bg_builtin_entry:
	// succ:  l00000000004730BC
l00000000004730BC:
	sp = fp
	sp = sp + -32
	Mem0[sp:word64] = x29
	sp = sp + 8
	Mem0[sp:word64] = x30
	x29 = x31 + 0x0000000000000000
	x1 = 0x00000000004D6000
	w1 = Mem0[x1 + 3420:word32]
	v10 = sp + 16
	Mem0[v10:word64] = x19
	v10 = v10 + 8
	Mem0[v10:word64] = x20
	branch w1 == 0x00000000 l000000000047312C
	// succ:  l00000000004730D4 l000000000047312C
l00000000004730D4:
	call no_options (retsize: 0;)
	w20 = w0
	w0 = 0x00000102
	branch w20 == 0x00000000 l00000000004730F0
	// succ:  l00000000004730E4 l00000000004730F0
l00000000004730E4:
	v13 = sp + 16
	x19 = Mem0[v13:word64]
	v13 = v13 + 8
	x20 = Mem0[v13:word64]
	x29 = Mem0[sp:word64]
	sp = sp + 8
	x30 = Mem0[sp:word64]
	sp = sp + 32
	return
	// succ:  bg_builtin_exit
l00000000004730F0:
	x0 = 0x00000000004E3000
	x19 = Mem0[x0 + 3856:word64]
	// succ:  l0000000000473104
l0000000000473104:
	x0 = x19
	w1 = 0x00000000
	call fn0000000000472EC4 (retsize: 0;)
	w31 = w0 - 0x00000001
	NZCV = cond(w31)
l000000000047312C:
	x0 = 0x0000000000000000
	call sh_nojobs (retsize: 0;)
	w0 = 0x00000001
	v15 = sp + 16
	x19 = Mem0[v15:word64]
	v15 = v15 + 8
	x20 = Mem0[v15:word64]
	x29 = Mem0[sp:word64]
	sp = sp + 8
	x30 = Mem0[sp:word64]
	sp = sp + 32
	return
	// succ:  bg_builtin_exit
bg_builtin_exit:


// hash_builtin
// Return size: 0
void hash_builtin()
hash_builtin_entry:
	// succ:  l00000000004731A4
l00000000004731A4:
	sp = fp
	sp = sp + -96
	Mem0[sp:word64] = x29
	sp = sp + 8
	Mem0[sp:word64] = x30
	x29 = x31 + 0x0000000000000000
	x1 = 0x00000000004D6000
	w1 = Mem0[x1 + 3292:word32]
	v10 = sp + 16
	Mem0[v10:word64] = x19
	v10 = v10 + 8
	Mem0[v10:word64] = x20
	v13 = sp + 32
	Mem0[v13:word64] = x21
	v13 = v13 + 8
	Mem0[v13:word64] = x22
	v16 = sp + 48
	Mem0[v16:word64] = x23
	v16 = v16 + 8
	Mem0[v16:word64] = x24
	v19 = sp + 64
	Mem0[v19:word64] = x25
	v19 = v19 + 8
	Mem0[v19:word64] = x26
	Mem0[sp + 80:word64] = x27
	x20 = x0
	branch w1 == 0x00000000 l0000000000473338
	// succ:  l00000000004731D0 l0000000000473338
l00000000004731D0:
	x19 = 0x0000000000000000
	x21 = 0x00000000004BE000
	x22 = 0x00000000004BE000
	call reset_internal_getopt (retsize: 0;)
	w26 = w19
	w23 = w19
	w25 = w19
	w24 = w19
	x21 = x21 + 0xFFFFFFFFFFFFFB98
	x22 = x22 + 0xFFFFFFFFFFFFFB4C
	x27 = 0x00000000004E3000
	x0 = x20
	x1 = x21
	call internal_getopt (retsize: 0;)
	w31 = w0 + 0x00000001
	NZCV = cond(w31)
	branch Test(EQ,Z) l0000000000473268
	// succ:  l0000000000473210 l0000000000473268
l0000000000473210:
	w2 = w0 - 0x00000064
	w31 = w2 - 0x00000010
	NZCV = cond(w31)
	branch Test(ULE,ZC) l0000000000473240
	// succ:  l000000000047321C l0000000000473240
l000000000047321C:
	call builtin_usage (retsize: 0;)
	w0 = 0x00000102
	// succ:  l0000000000473224
l0000000000473224:
	v33 = sp + 16
	x19 = Mem0[v33:word64]
	v33 = v33 + 8
	x20 = Mem0[v33:word64]
	v34 = sp + 32
	x21 = Mem0[v34:word64]
	v34 = v34 + 8
	x22 = Mem0[v34:word64]
	v35 = sp + 48
	x23 = Mem0[v35:word64]
	v35 = v35 + 8
	x24 = Mem0[v35:word64]
	v36 = sp + 64
	x25 = Mem0[v36:word64]
	v36 = v36 + 8
	x26 = Mem0[v36:word64]
	x27 = Mem0[sp + 80:word64]
	x29 = Mem0[sp:word64]
	sp = sp + 8
	x30 = Mem0[sp:word64]
	sp = sp + 96
	return
	// succ:  hash_builtin_exit
l0000000000473240:
	v42 = Mem0[x22 + (uint64) ((uint32) w2):byte]
	w0 = (word32) v42
	x1 = 0x0000000000473250
	x0 = x1 + (int64) ((int8) w0)
	call x0 (retsize: 0;)
	return
	// succ:  hash_builtin_exit
l0000000000473268:
	x0 = 0x00000000004E3000
	x20 = Mem0[x0 + 3856:word64]
	x31 = x20 - x31
	NZCV = cond(x31)
	w0 = (word32) Test(EQ,Z)
	branch w25 != 0x00000000 l00000000004733C4
	// succ:  l000000000047327C l00000000004733C4
l000000000047327C:
	branch w24 == 0x00000000 l0000000000473370
	// succ:  l0000000000473280 l0000000000473370
l0000000000473280:
	branch w24 != 0x00000000 l00000000004733DC
	// succ:  l0000000000473284 l00000000004733DC
l0000000000473284:
	branch w25 != 0x00000000 l000000000047346C
	// succ:  l0000000000473288 l000000000047346C
l0000000000473288:
	x0 = 0x00000000004DF000
	w0 = Mem0[x0 + 3696:word32]
	branch w0 != 0x00000000 l00000000004733A0
	// succ:  l0000000000473294 l00000000004733A0
l0000000000473294:
	w22 = 0x00000000
	branch x20 == 0x0000000000000000 l0000000000473404
	// succ:  l000000000047329C l0000000000473404
l000000000047329C:
	x0 = 0x00000000004BE000
	x24 = x0 + 0xFFFFFFFFFFFFFBD8
	x23 = 0x00000000004BE000
	x0 = 0x00000000004E1000
	x25 = x0 + 0x0000000000000618
	x23 = x23 + 0x00000000000007D0
	goto l00000000004732DC
	// succ:  l00000000004732DC
l00000000004732B8:
	w0 = 0x00000015
	strerror(x0)
	sp = sp + 0xFFFFFFFFFFFFFFF8
	x2 = x0
	x1 = x19
	x0 = x23
	call builtin_error (retsize: 0;)
	w22 = 0x00000001
	// succ:  l00000000004732D4
l00000000004732D4:
	x20 = Mem0[x20:word64]
	branch x20 == 0x0000000000000000 l0000000000473404
	// succ:  l00000000004732DC l0000000000473404
l00000000004732DC:
	x2 = Mem0[x20 + 8:word64]
	x21 = Mem0[x2:word64]
	x0 = x21
	call absolute_program (retsize: 0;)
	branch w0 != 0x00000000 l00000000004732D4
	// succ:  l00000000004732F0 l00000000004732D4
l00000000004732F0:
	branch x19 == 0x0000000000000000 l00000000004733E4
	// succ:  l00000000004732F4 l00000000004733E4
l00000000004732F4:
	x0 = x19
	call is_directory (retsize: 0;)
	branch w0 != 0x00000000 l00000000004732B8
	// succ:  l0000000000473300 l00000000004732B8
l0000000000473300:
	w2 = w0
	x1 = x19
	x0 = x21
	w3 = w2
	call phash_insert (retsize: 0;)
	goto l00000000004732D4
	// succ:  l00000000004732D4
l0000000000473338:
	x1 = 0x00000000004BE000
	x1 = x1 + 0xFFFFFFFFFFFFFB80
	w2 = 0x00000005
	x0 = 0x0000000000000000
	dcgettext(x0, x1, x2)
	sp = sp + 0xFFFFFFFFFFFFFFF8
	call builtin_error (retsize: 0;)
	w0 = 0x00000001
	v38 = sp + 16
	x19 = Mem0[v38:word64]
	v38 = v38 + 8
	x20 = Mem0[v38:word64]
	v39 = sp + 32
	x21 = Mem0[v39:word64]
	v39 = v39 + 8
	x22 = Mem0[v39:word64]
	v40 = sp + 48
	x23 = Mem0[v40:word64]
	v40 = v40 + 8
	x24 = Mem0[v40:word64]
	v41 = sp + 64
	x25 = Mem0[v41:word64]
	v41 = v41 + 8
	x26 = Mem0[v41:word64]
	x27 = Mem0[sp + 80:word64]
	x29 = Mem0[sp:word64]
	sp = sp + 8
	x30 = Mem0[sp:word64]
	sp = sp + 96
	return
	// succ:  hash_builtin_exit
l0000000000473370:
	branch w0 == 0x00000000 l0000000000473280
	// succ:  l0000000000473374 l0000000000473280
l0000000000473374:
	x19 = 0x00000000004E1000
	x0 = Mem0[x19 + 144:word64]
	branch x0 == 0x0000000000000000 l00000000004734EC
	// succ:  l0000000000473380 l00000000004734EC
l0000000000473380:
	w1 = Mem0[x0 + 12:word32]
	branch w1 == 0x00000000 l00000000004734EC
	// succ:  l0000000000473388 l00000000004734EC
l0000000000473388:
	branch w23 == 0x00000000 l0000000000473544
	// succ:  l000000000047338C l0000000000473544
l000000000047338C:
	x1 = 0x0000000000473000
	x1 = x1 + 0x0000000000000174
	// succ:  l0000000000473394
l0000000000473394:
	call hash_walk (retsize: 0;)
	w0 = 0x00000000
	goto l0000000000473224
	// succ:  l0000000000473224
l00000000004733A0:
	branch x19 == 0x0000000000000000 l0000000000473294
	// succ:  l00000000004733A4 l0000000000473294
l00000000004733A4:
	x0 = x19
	w1 = 0x0000002F
	strchr(x0, x1)
	sp = sp + 0xFFFFFFFFFFFFFFF8
	branch x0 == 0x0000000000000000 l0000000000473294
	// succ:  l00000000004733B4 l0000000000473294
l00000000004733B4:
	x0 = x19
	call sh_restricted (retsize: 0;)
	w0 = 0x00000001
	goto l0000000000473224
	// succ:  l0000000000473224
l00000000004733C4:
	branch w0 == 0x00000000 l000000000047327C
	// succ:  l00000000004733C8 l000000000047327C
l00000000004733C8:
	x0 = 0x00000000004BE000
	x0 = x0 + 0xFFFFFFFFFFFFFBA0
	call sh_needarg (retsize: 0;)
	w0 = 0x00000001
	goto l0000000000473224
	// succ:  l0000000000473224
l00000000004733DC:
	call phash_flush (retsize: 0;)
	goto l0000000000473284
	// succ:  l0000000000473284
l00000000004733E4:
	x0 = x21
	branch w26 == 0x00000000 l0000000000473418
	// succ:  l00000000004733EC l0000000000473418
l00000000004733EC:
	call phash_remove (retsize: 0;)
	branch w0 == 0x00000000 l00000000004732D4
	// succ:  l00000000004733F4 l00000000004732D4
l00000000004733F4:
	x0 = x21
	call sh_notfound (retsize: 0;)
	w22 = 0x00000001
	goto l00000000004732D4
	// succ:  l00000000004732D4
l0000000000473404:
	x0 = 0x00000000004DE000
	x0 = Mem0[x0 + 1648:word64]
	fflush(x0)
	sp = sp + 0xFFFFFFFFFFFFFFF8
	w0 = w22
	goto l0000000000473224
	// succ:  l0000000000473224
l0000000000473418:
	call find_function (retsize: 0;)
	branch x0 != 0x0000000000000000 l00000000004732D4
	// succ:  l0000000000473420 l00000000004732D4
l0000000000473420:
	x0 = x21
	call find_shell_builtin (retsize: 0;)
	branch x0 != 0x0000000000000000 l00000000004732D4
	// succ:  l000000000047342C l00000000004732D4
l000000000047342C:
	x0 = x21
	call phash_remove (retsize: 0;)
	x0 = x21
	call find_user_command (retsize: 0;)
	x27 = x0
	branch x0 == 0x0000000000000000 l000000000047359C
	// succ:  l0000000000473444 l000000000047359C
l0000000000473444:
	call executable_file (retsize: 0;)
	branch w0 != 0x00000000 l0000000000473574
	// succ:  l000000000047344C l0000000000473574
l000000000047344C:
	x0 = x21
	call sh_notfound (retsize: 0;)
	x0 = x27
	x1 = x24
	w2 = 0x000000D7
	call sh_xfree (retsize: 0;)
	w22 = 0x00000001
	goto l00000000004732D4
	// succ:  l00000000004732D4
l000000000047346C:
	x22 = 0x00000000004BE000
	x24 = 0x00000000004BE000
	x21 = Mem0[x20:word64]
	w25 = 0x00000001
	x22 = x22 + 0xFFFFFFFFFFFFFBD0
	x24 = x24 + 0xFFFFFFFFFFFFFB68
	goto l00000000004734B0
	// succ:  l00000000004734B0
l0000000000473488:
	branch x21 == 0x0000000000000000 l00000000004734A0
	// succ:  l000000000047348C l00000000004734A0
l000000000047348C:
	x2 = Mem0[x20 + 8:word64]
	w0 = 0x00000001
	x2 = Mem0[x2:word64]
	x1 = x22
	__printf_chk(x0, x1, Mem0[sp:<unknown>])
	sp = sp + 0xFFFFFFFFFFFFFFF8
	// succ:  l00000000004734A0
l00000000004734A0:
	x0 = x19
	puts(x0)
	sp = sp + 0xFFFFFFFFFFFFFFF8
	// succ:  l00000000004734A8
l00000000004734A8:
	x20 = Mem0[x20:word64]
	branch x20 == 0x0000000000000000 l00000000004734E4
	// succ:  l00000000004734B0 l00000000004734E4
l00000000004734B0:
	x2 = Mem0[x20 + 8:word64]
	x0 = Mem0[x2:word64]
	call phash_search (retsize: 0;)
	x19 = x0
	branch x0 == 0x0000000000000000 l0000000000473500
	// succ:  l00000000004734C4 l0000000000473500
l00000000004734C4:
	branch w23 == 0x00000000 l0000000000473488
	// succ:  l00000000004734C8 l0000000000473488
l00000000004734C8:
	x2 = Mem0[x20 + 8:word64]
	x1 = x24
	x3 = Mem0[x2:word64]
	x2 = x0
	w0 = 0x00000001
	__printf_chk(x0, x1, Mem0[sp:<unknown>])
	sp = sp + 0xFFFFFFFFFFFFFFF8
	goto l00000000004734A8
	// succ:  l00000000004734A8
l00000000004734E4:
	w0 = w25 ^ 0x00000001
	goto l0000000000473224
	// succ:  l0000000000473224
l00000000004734EC:
	x0 = 0x00000000004DE000
	w19 = Mem0[x0 + 1716:word32]
	branch w19 == 0x00000000 l0000000000473514
	// succ:  l00000000004734F8 l0000000000473514
l00000000004734F8:
	w0 = 0x00000000
	goto l0000000000473224
	// succ:  l0000000000473224
l0000000000473500:
	x0 = Mem0[x20 + 8:word64]
	w25 = w19
	x0 = Mem0[x0:word64]
	call sh_notfound (retsize: 0;)
	goto l00000000004734A8
	// succ:  l00000000004734A8
l0000000000473514:
	x1 = 0x00000000004BE000
	x1 = x1 + 0xFFFFFFFFFFFFFBB8
	w2 = 0x00000005
	x0 = 0x0000000000000000
	dcgettext(x0, x1, x2)
	sp = sp + 0xFFFFFFFFFFFFFFF8
	x1 = x0
	x0 = 0x00000000004E3000
	x2 = Mem0[x0 + 1192:word64]
	w0 = 0x00000001
	__printf_chk(x0, x1, Mem0[sp:<unknown>])
	sp = sp + 0xFFFFFFFFFFFFFFF8
	w0 = w19
	goto l0000000000473224
	// succ:  l0000000000473224
l0000000000473544:
	x1 = 0x00000000004BE000
	x1 = x1 + 0xFFFFFFFFFFFFFBA8
	w2 = 0x00000005
	x0 = 0x0000000000000000
	dcgettext(x0, x1, x2)
	sp = sp + 0xFFFFFFFFFFFFFFF8
	x1 = x0
	w0 = 0x00000001
	__printf_chk(x0, x1, Mem0[sp:<unknown>])
	sp = sp + 0xFFFFFFFFFFFFFFF8
	x1 = 0x0000000000473000
	x0 = Mem0[x19 + 144:word64]
	x1 = x1 + 0x0000000000000144
	goto l0000000000473394
	// succ:  l0000000000473394
l0000000000473574:
	w2 = Mem0[x25:word32]
	x0 = x21
	x1 = x27
	w3 = w19
	call phash_insert (retsize: 0;)
	x0 = x27
	x1 = x24
	w2 = 0x000000D7
	call sh_xfree (retsize: 0;)
	goto l00000000004732D4
	// succ:  l00000000004732D4
l000000000047359C:
	x0 = x21
	call sh_notfound (retsize: 0;)
	w22 = 0x00000001
	goto l00000000004732D4
	// succ:  l00000000004732D4
hash_builtin_exit:


// fn00000000004735AC
// Return size: 0
void fn00000000004735AC()
fn00000000004735AC_entry:
	// succ:  l00000000004735AC
l00000000004735AC:
	sp = fp
	sp = sp + -48
	Mem0[sp:word64] = x29
	sp = sp + 8
	Mem0[sp:word64] = x30
	x29 = x31 + 0x0000000000000000
	w1 = 0x00000000
	v9 = sp + 16
	Mem0[v9:word64] = x19
	v9 = v9 + 8
	Mem0[v9:word64] = x20
	Mem0[sp + 32:word64] = x21
	x20 = x0
	open(x0, x1)
	sp = sp + 0xFFFFFFFFFFFFFFF8
	w31 = w0 + 0x00000001
	NZCV = cond(w31)
	w19 = w0
	branch Test(EQ,Z) l00000000004735E8
	// succ:  l00000000004735D4 l00000000004735E8
l00000000004735D4:
	w0 = w19
	x21 = Mem0[sp + 32:word64]
	v18 = sp + 16
	x19 = Mem0[v18:word64]
	v18 = v18 + 8
	x20 = Mem0[v18:word64]
	x29 = Mem0[sp:word64]
	sp = sp + 8
	x30 = Mem0[sp:word64]
	sp = sp + 48
	return
	// succ:  fn00000000004735AC_exit
l00000000004735E8:
	x1 = 0x00000000004BE000
	x1 = x1 + 0xFFFFFFFFFFFFFC10
	w2 = 0x00000005
	x0 = 0x0000000000000000
	dcgettext(x0, x1, x2)
	sp = sp + 0xFFFFFFFFFFFFFFF8
	x21 = x0
	__errno_location()
	sp = sp + 0xFFFFFFFFFFFFFFF8
	w0 = Mem0[x0:word32]
	strerror(x0)
	sp = sp + 0xFFFFFFFFFFFFFFF8
	x2 = x0
	x1 = x20
	x0 = x21
	call builtin_error (retsize: 0;)
	goto l00000000004735D4
	// succ:  l00000000004735D4
fn00000000004735AC_exit:


// help_builtin
// Return size: 0
void help_builtin()
help_builtin_entry:
	// succ:  l0000000000473620
l0000000000473620:
	sp = fp
	sp = sp + -320
	Mem0[sp:word64] = x29
	sp = sp + 8
	Mem0[sp:word64] = x30
	x29 = x31 + 0x0000000000000000
	v8 = sp + 16
	Mem0[v8:word64] = x19
	v8 = v8 + 8
	Mem0[v8:word64] = x20
	v11 = sp + 32
	Mem0[v11:word64] = x21
	v11 = v11 + 8
	Mem0[v11:word64] = x22
	x20 = x0
	v15 = sp + 48
	Mem0[v15:word64] = x23
	v15 = v15 + 8
	Mem0[v15:word64] = x24
	v18 = sp + 64
	Mem0[v18:word64] = x25
	v18 = v18 + 8
	Mem0[v18:word64] = x26
	v21 = sp + 80
	Mem0[v21:word64] = x27
	v21 = v21 + 8
	Mem0[v21:word64] = x28
	Mem0[x29 + 264:word32] = 0x00000000
	call reset_internal_getopt (retsize: 0;)
	w0 = Mem0[x29 + 264:word32]
	x19 = 0x00000000004BE000
	Mem0[x29 + 256:word32] = w0
	Mem0[x29 + 288:word32] = w0
	x19 = x19 + 0xFFFFFFFFFFFFFC28
	// succ:  l000000000047365C
l000000000047365C:
	x0 = x20
	x1 = x19
	call internal_getopt (retsize: 0;)
	w31 = w0 + 0x00000001
	NZCV = cond(w31)
	branch Test(EQ,Z) l00000000004736C8
	// succ:  l0000000000473670 l00000000004736C8
l0000000000473670:
	w31 = w0 - 0x0000006D
	NZCV = cond(w31)
	branch Test(EQ,Z) l00000000004736AC
	// succ:  l0000000000473678 l00000000004736AC
l0000000000473678:
	w31 = w0 - 0x00000073
	NZCV = cond(w31)
	branch Test(EQ,Z) l0000000000473AA0
	// succ:  l0000000000473680 l0000000000473AA0
l0000000000473680:
	w31 = w0 - 0x00000064
	NZCV = cond(w31)
	branch Test(EQ,Z) l0000000000473A94
	// succ:  l0000000000473688 l0000000000473A94
l0000000000473688:
	call builtin_usage (retsize: 0;)
	w0 = 0x00000102
	// succ:  l0000000000473690
l0000000000473690:
	v27 = sp + 16
	x19 = Mem0[v27:word64]
	v27 = v27 + 8
	x20 = Mem0[v27:word64]
	v28 = sp + 32
	x21 = Mem0[v28:word64]
	v28 = v28 + 8
	x22 = Mem0[v28:word64]
	v29 = sp + 48
	x23 = Mem0[v29:word64]
	v29 = v29 + 8
	x24 = Mem0[v29:word64]
	v30 = sp + 64
	x25 = Mem0[v30:word64]
	v30 = v30 + 8
	x26 = Mem0[v30:word64]
	v31 = sp + 80
	x27 = Mem0[v31:word64]
	v31 = v31 + 8
	x28 = Mem0[v31:word64]
	x29 = Mem0[sp:word64]
	sp = sp + 8
	x30 = Mem0[sp:word64]
	sp = sp + 320
	return
	// succ:  help_builtin_exit
l00000000004736AC:
	w3 = 0x00000001
	x0 = x20
	x1 = x19
	Mem0[x29 + 264:word32] = w3
	call internal_getopt (retsize: 0;)
	w31 = w0 + 0x00000001
	NZCV = cond(w31)
	branch Test(NE,Z) l0000000000473670
	// succ:  l00000000004736C8 l0000000000473670
l00000000004736C8:
	x0 = 0x00000000004E3000
	x0 = Mem0[x0 + 3856:word64]
	Mem0[x29 + 280:word64] = x0
	branch x0 == 0x0000000000000000 l0000000000473DC0
	// succ:  l00000000004736D8 l0000000000473DC0
l00000000004736D8:
	x1 = Mem0[x29 + 280:word64]
	x0 = Mem0[x1 + 8:word64]
	x0 = Mem0[x0:word64]
	call glob_pattern_p (retsize: 0;)
	branch w0 == 0x00000000 l0000000000473744
	// succ:  l00000000004736EC l0000000000473744
l00000000004736EC:
	x2 = Mem0[x29 + 280:word64]
	x3 = 0x0000000000000002
	x0 = Mem0[x2:word64]
	x1 = 0x00000000004BE000
	x31 = x0 - x31
	NZCV = cond(x31)
	x2 = 0x00000000004BE000
	x2 = x2 + 0xFFFFFFFFFFFFFDA8
l0000000000473744:
	x0 = 0x00000000004E1000
	x0 = x0 + 0x0000000000000268
	Mem0[x29 + 272:word64] = x0
	x0 = 0x00000000004BE000
	x0 = x0 + 0x0000000000000558
	x22 = 0x00000000004BE000
	w24 = 0x00000000
	x21 = 0x00000000004D7000
	Mem0[x29 + 296:word64] = x0
	x22 = x22 + 0xFFFFFFFFFFFFFE80
	// succ:  l000000000047376C
l000000000047376C:
	x3 = Mem0[x29 + 280:word64]
	x0 = Mem0[x3 + 8:word64]
	x25 = Mem0[x0:word64]
	x0 = x25
	strlen(x0)
	sp = sp + 0xFFFFFFFFFFFFFFF8
	x1 = Mem0[x21 + 2512:word64]
	x19 = Mem0[x1:word64]
	branch x19 == 0x0000000000000000 l0000000000473C8C
	// succ:  l000000000047378C l0000000000473C8C
l000000000047378C:
l0000000000473A94:
	w2 = 0x00000001
	Mem0[x29 + 256:word32] = w2
	goto l000000000047365C
	// succ:  l000000000047365C
l0000000000473AA0:
	w1 = 0x00000001
	Mem0[x29 + 288:word32] = w1
	goto l000000000047365C
	// succ:  l000000000047365C
l0000000000473C8C:
	x2 = Mem0[x29 + 280:word64]
	x2 = Mem0[x2:word64]
	Mem0[x29 + 280:word64] = x2
	branch x2 != 0x0000000000000000 l000000000047376C
	// succ:  l0000000000473C9C l000000000047376C
l0000000000473C9C:
	branch w24 == 0x00000000 l0000000000473D94
	// succ:  l0000000000473CA0 l0000000000473D94
l0000000000473CA0:
	x0 = 0x00000000004DE000
	x0 = Mem0[x0 + 1648:word64]
	fflush(x0)
	sp = sp + 0xFFFFFFFFFFFFFFF8
	w0 = Mem0[x29 + 280:word32]
	goto l0000000000473690
	// succ:  l0000000000473690
l0000000000473D94:
	x1 = 0x00000000004BE000
	x0 = x2
	x1 = x1 + 0xFFFFFFFFFFFFFE88
	w2 = 0x00000005
	dcgettext(x0, x1, x2)
	sp = sp + 0xFFFFFFFFFFFFFFF8
	x1 = x25
	x2 = x25
	x3 = x25
	call builtin_error (retsize: 0;)
	w0 = 0x00000001
	goto l0000000000473690
	// succ:  l0000000000473690
l0000000000473DC0:
	w0 = Mem0[x29 + 280:word32]
	call show_shell_version (retsize: 0;)
	x1 = 0x00000000004BE000
	x0 = Mem0[x29 + 280:word64]
	w2 = 0x00000005
	x1 = x1 + 0xFFFFFFFFFFFFFC30
	dcgettext(x0, x1, x2)
	sp = sp + 0xFFFFFFFFFFFFFFF8
	x1 = x0
	w0 = 0x00000001
	__printf_chk(x0, x1, Mem0[sp:<unknown>])
	sp = sp + 0xFFFFFFFFFFFFFFF8
	x0 = 0x00000000004AC000
	x0 = x0 + 0x0000000000000770
	call get_string_value (retsize: 0;)
	branch x0 == 0x0000000000000000 l0000000000474024
	// succ:  l0000000000473DF8 l0000000000474024
l0000000000473DF8:
	v36 = Mem0[x0:byte]
	w1 = (word32) v36
	w22 = 0x00000028
	branch w1 != 0x00000000 l0000000000473FFC
	// succ:  l0000000000473E04 l0000000000473FFC
l0000000000473E04:
	x4 = 0x00000000004D7000
	w27 = Mem0[x4 + 2504:word32]
	w27 = w27 + 0x00000001
	w27 = w27 + (w27 >>u 31)
l0000000000473FFC:
	x1 = Mem0[x29 + 280:word64]
	w2 = 0x0000000A
	strtol(x0)
	sp = sp + 0xFFFFFFFFFFFFFFF8
	NZCV = cond(w0 - w31)
	branch Test(LE,ZCV) l0000000000473E04
	// succ:  l0000000000474010 l0000000000473E04
l0000000000474010:
l0000000000474024:
	w22 = 0x00000028
	goto l0000000000473E04
	// succ:  l0000000000473E04
help_builtin_exit:


// history_builtin
// Return size: 0
void history_builtin()
history_builtin_entry:
	// succ:  l000000000047403C
l000000000047403C:
	sp = fp
	sp = sp + -144
	Mem0[sp:word64] = x29
	sp = sp + 8
	Mem0[sp:word64] = x30
	x29 = x31 + 0x0000000000000000
	v8 = sp + 16
	Mem0[v8:word64] = x19
	v8 = v8 + 8
	Mem0[v8:word64] = x20
	v11 = sp + 32
	Mem0[v11:word64] = x21
	v11 = v11 + 8
	Mem0[v11:word64] = x22
	x20 = 0x00000000004BE000
	x22 = 0x00000000004BE000
	v14 = sp + 48
	Mem0[v14:word64] = x23
	v14 = v14 + 8
	Mem0[v14:word64] = x24
	v17 = sp + 64
	Mem0[v17:word64] = x25
	v17 = v17 + 8
	Mem0[v17:word64] = x26
	v20 = sp + 80
	Mem0[v20:word64] = x27
	v20 = v20 + 8
	Mem0[v20:word64] = x28
	x21 = x0
	w19 = 0x00000000
	call reset_internal_getopt (retsize: 0;)
	x20 = x20 + 0xFFFFFFFFFFFFFEF0
	x22 = x22 + 0xFFFFFFFFFFFFFED4
	x23 = 0x00000000004E3000
	x0 = x21
	x1 = x20
	call internal_getopt (retsize: 0;)
	w31 = w0 + 0x00000001
	NZCV = cond(w31)
	branch Test(EQ,Z) l00000000004740E8
	// succ:  l000000000047408C l00000000004740E8
l000000000047408C:
	w2 = w0 - 0x00000061
	w31 = w2 - 0x00000016
	NZCV = cond(w31)
	branch Test(ULE,ZC) l00000000004740C0
	// succ:  l0000000000474098 l00000000004740C0
l0000000000474098:
	call builtin_usage (retsize: 0;)
	w1 = 0x00000102
	// succ:  l00000000004740A0
l00000000004740A0:
	w0 = w1
	v31 = sp + 16
	x19 = Mem0[v31:word64]
	v31 = v31 + 8
	x20 = Mem0[v31:word64]
	v32 = sp + 32
	x21 = Mem0[v32:word64]
	v32 = v32 + 8
	x22 = Mem0[v32:word64]
	v33 = sp + 48
	x23 = Mem0[v33:word64]
	v33 = v33 + 8
	x24 = Mem0[v33:word64]
	v34 = sp + 64
	x25 = Mem0[v34:word64]
	v34 = v34 + 8
	x26 = Mem0[v34:word64]
	v35 = sp + 80
	x27 = Mem0[v35:word64]
	v35 = v35 + 8
	x28 = Mem0[v35:word64]
	x29 = Mem0[sp:word64]
	sp = sp + 8
	x30 = Mem0[sp:word64]
	sp = sp + 144
	return
	// succ:  history_builtin_exit
l00000000004740C0:
	v55 = Mem0[x22 + (uint64) ((uint32) w2):byte]
	w0 = (word32) v55
	x1 = 0x00000000004740D0
	x0 = x1 + (int64) ((int8) w0)
	call x0 (retsize: 0;)
	return
	// succ:  history_builtin_exit
l00000000004740E8:
	w1 = w19 & 0x0000000F
	x0 = 0x00000000004E3000
	w31 = w1 - 0x00000002
	NZCV = cond(w31)
	x20 = Mem0[x0 + 3856:word64]
	branch Test(ULE,ZC) l0000000000474168
	// succ:  l00000000004740FC l0000000000474168
l00000000004740FC:
	w31 = w1 - 0x00000004
	NZCV = cond(w31)
	branch Test(EQ,Z) l0000000000474168
	// succ:  l0000000000474104 l0000000000474168
l0000000000474104:
	w31 = w1 - 0x00000008
	NZCV = cond(w31)
	branch Test(EQ,Z) l0000000000474168
	// succ:  l000000000047410C l0000000000474168
l000000000047410C:
	x1 = 0x00000000004BE000
	x1 = x1 + 0xFFFFFFFFFFFFFF00
	w2 = 0x00000005
	x0 = 0x0000000000000000
	dcgettext(x0, x1, x2)
	sp = sp + 0xFFFFFFFFFFFFFFF8
	call builtin_error (retsize: 0;)
	w1 = 0x00000001
	goto l00000000004740A0
	// succ:  l00000000004740A0
l0000000000474168:
	branch (w19 & 0x00000040) == 0x00000000 l00000000004742B8
	// succ:  l000000000047416C l00000000004742B8
l000000000047416C:
	branch (w19 & 0x00000010) == 0x00000000 l0000000000474210
	// succ:  l0000000000474170 l0000000000474210
l0000000000474170:
	branch x20 == 0x0000000000000000 l00000000004741EC
	// succ:  l0000000000474174 l00000000004741EC
l0000000000474174:
	x19 = 0x00000000004E3000
	w0 = Mem0[x19 + 3464:word32]
	branch w0 != 0x00000000 l00000000004741BC
	// succ:  l0000000000474180 l00000000004741BC
l0000000000474180:
	x0 = 0x00000000004E3000
	w0 = Mem0[x0 + 3440:word32]
	branch w0 != 0x00000000 l00000000004741B4
	// succ:  l000000000047418C l00000000004741B4
l000000000047418C:
	x0 = 0x00000000004E3000
	w0 = Mem0[x0 + 612:word32]
	NZCV = cond(w0 - w31)
	branch Test(LE,ZCV) l00000000004741BC
	// succ:  l000000000047419C l00000000004741BC
l000000000047419C:
	x0 = 0x00000000004E1000
	w0 = Mem0[x0 + 1072:word32]
	branch w0 == 0x00000000 l00000000004741BC
	// succ:  l00000000004741A8 l00000000004741BC
l00000000004741A8:
	x0 = 0x00000000004D7000
	w0 = Mem0[x0 + 392:word32]
	branch w0 == 0x00000000 l00000000004741BC
	// succ:  l00000000004741B4 l00000000004741BC
l00000000004741B4:
	call bash_delete_last_history (retsize: 0;)
	branch w0 == 0x00000000 l00000000004741EC
	// succ:  l00000000004741BC l00000000004741EC
l00000000004741BC:
	x0 = x20
	call string_list (retsize: 0;)
	w1 = 0x00000001
	x20 = x0
	call check_add_history (retsize: 0;)
	x1 = 0x00000000004BE000
	w3 = 0x00000001
	x0 = x20
	x1 = x1 + 0xFFFFFFFFFFFFFF28
	w2 = 0x0000015A
	Mem0[x19 + 3464:word32] = w3
	call sh_xfree (retsize: 0;)
	// succ:  l00000000004741EC
l00000000004741EC:
	w1 = 0x00000000
	w0 = w1
	v50 = sp + 16
	x19 = Mem0[v50:word64]
	v50 = v50 + 8
	x20 = Mem0[v50:word64]
	v51 = sp + 32
	x21 = Mem0[v51:word64]
	v51 = v51 + 8
	x22 = Mem0[v51:word64]
	v52 = sp + 48
	x23 = Mem0[v52:word64]
	v52 = v52 + 8
	x24 = Mem0[v52:word64]
	v53 = sp + 64
	x25 = Mem0[v53:word64]
	v53 = v53 + 8
	x26 = Mem0[v53:word64]
	v54 = sp + 80
	x27 = Mem0[v54:word64]
	v54 = v54 + 8
	x28 = Mem0[v54:word64]
	x29 = Mem0[sp:word64]
	sp = sp + 8
	x30 = Mem0[sp:word64]
	sp = sp + 144
	return
	// succ:  history_builtin_exit
l0000000000474210:
	branch (w19 & 0x00000020) == 0x00000000 l00000000004742C8
	// succ:  l0000000000474214 l00000000004742C8
l0000000000474214:
	branch x20 == 0x0000000000000000 l00000000004743A8
	// succ:  l0000000000474218 l00000000004743A8
l0000000000474218:
	x0 = 0x00000000004E3000
	w0 = Mem0[x0 + 3464:word32]
	branch w0 != 0x00000000 l0000000000474230
	// succ:  l0000000000474224 l0000000000474230
l0000000000474224:
	x0 = 0x00000000004E3000
	w0 = Mem0[x0 + 3440:word32]
	branch w0 != 0x00000000 l0000000000474564
	// succ:  l0000000000474230 l0000000000474564
l0000000000474230:
	x23 = 0x00000000004BE000
	x21 = 0x00000000004BE000
	w22 = 0x00000000
	x19 = 0x00000000004DE000
	x23 = x23 + 0xFFFFFFFFFFFFFF60
	x21 = x21 + 0xFFFFFFFFFFFFFF28
	goto l0000000000474280
	// succ:  l0000000000474280
l000000000047424C:
	x1 = Mem0[x19 + 1648:word64]
	x0 = Mem0[x29 + 96:word64]
	fputs(x0, x1)
	sp = sp + 0xFFFFFFFFFFFFFFF8
	x1 = Mem0[x19 + 1648:word64]
	w0 = 0x0000000A
	_IO_putc(x0, x1)
	sp = sp + 0xFFFFFFFFFFFFFFF8
	// succ:  l0000000000474264
l0000000000474264:
	x0 = Mem0[x29 + 96:word64]
	branch x0 == 0x0000000000000000 l0000000000474278
	// succ:  l000000000047426C l0000000000474278
l000000000047426C:
	x1 = x21
	w2 = 0x00000175
	call sh_xfree (retsize: 0;)
	// succ:  l0000000000474278
l0000000000474278:
	x20 = Mem0[x20:word64]
	branch x20 == 0x0000000000000000 l00000000004743B8
	// succ:  l0000000000474280 l00000000004743B8
l0000000000474280:
	x0 = Mem0[x20 + 8:word64]
	x1 = x29 + 0x0000000000000060
	x0 = Mem0[x0:word64]
	call history_expand (retsize: 0;)
	branch (w0 & 0x00000000) == 0x00000000 l000000000047424C
	// succ:  l0000000000474294 l000000000047424C
l0000000000474294:
	x1 = x23
	w2 = 0x00000005
	x0 = 0x0000000000000000
	dcgettext(x0, x1, x2)
	sp = sp + 0xFFFFFFFFFFFFFFF8
	x2 = Mem0[x20 + 8:word64]
	w22 = 0x00000001
	x1 = Mem0[x2:word64]
	call builtin_error (retsize: 0;)
	goto l0000000000474264
	// succ:  l0000000000474264
l00000000004742B8:
	call bash_clear_history (retsize: 0;)
	branch x20 == 0x0000000000000000 l00000000004741EC
	// succ:  l00000000004742C0 l00000000004741EC
l00000000004742C0:
	branch (w19 & 0x00000010) == 0x00000000 l0000000000474174
	// succ:  l00000000004742C4 l0000000000474174
l00000000004742C4:
	branch (w19 & 0x00000020) == 0x00000000 l0000000000474218
	// succ:  l00000000004742C8 l0000000000474218
l00000000004742C8:
	branch (w19 & 0x00000080) == 0x00000000 l0000000000474348
	// succ:  l00000000004742CC l0000000000474348
l00000000004742CC:
	w0 = 0x0000004F
	w24 = w19 & w0
	NZ = cond(w24)
	C = false
	V = false
	branch Test(EQ,Z) l00000000004743D8
	// succ:  l00000000004742D8 l00000000004743D8
l00000000004742D8:
	branch x20 == 0x0000000000000000 l0000000000474614
	// succ:  l00000000004742DC l0000000000474614
l00000000004742DC:
	x0 = Mem0[x20 + 8:word64]
	x0 = Mem0[x0:word64]
	// succ:  l00000000004742E4
l00000000004742E4:
	branch (w19 & 0x00000001) == 0x00000000 l00000000004743C8
	// succ:  l00000000004742E8 l00000000004743C8
l00000000004742E8:
	branch (w19 & 0x00000004) == 0x00000000 l0000000000474574
	// succ:  l00000000004742EC l0000000000474574
l00000000004742EC:
	branch (w19 & 0x00000002) == 0x00000000 l00000000004745B4
	// succ:  l00000000004742F0 l00000000004745B4
l00000000004742F0:
	w1 = w19 & 0x00000008
	branch (w19 & 0x00000008) == 0x00000000 l00000000004740A0
	// succ:  l00000000004742F8 l00000000004740A0
l00000000004742F8:
	x19 = 0x00000000004E3000
	x20 = 0x00000000004DE000
	Mem0[x29 + 128:word64] = x0
	w23 = Mem0[x19 + 3424:word32]
	w22 = Mem0[x20 + 1540:word32]
	call using_history (retsize: 0;)
	w1 = Mem0[x19 + 3424:word32]
	x0 = Mem0[x29 + 128:word64]
	w2 = 0xFFFFFFFF
	call read_history_range (retsize: 0;)
	w21 = w0
	call using_history (retsize: 0;)
	call where_history (retsize: 0;)
	x1 = 0x00000000004E3000
	w1 = Mem0[x1 + 3460:word32]
	Mem0[x19 + 3424:word32] = w0
	branch w1 == 0x00000000 l0000000000474624
	// succ:  l000000000047433C l0000000000474624
l000000000047433C:
	NZCV = cond(w21 - w31)
	w1 = (word32) Test(NE,Z)
	goto l00000000004740A0
	// succ:  l00000000004740A0
l0000000000474348:
	x0 = x24
	x1 = x29 + 0x0000000000000060
	call legal_number (retsize: 0;)
	branch w0 == 0x00000000 l0000000000474380
	// succ:  l0000000000474358 l0000000000474380
l0000000000474358:
	x0 = 0x00000000004DE000
	w1 = Mem0[x0 + 1540:word32]
	x0 = Mem0[x29 + 96:word64]
	NZCV = cond(x0 - (int64) ((int32) w1))
	branch Test(LT,NV) l0000000000474380
	// succ:  l000000000047436C l0000000000474380
l000000000047436C:
	x19 = 0x00000000004E4000
	w2 = Mem0[x19 + 392:word32]
	w2 = w1 + w2
	NZCV = cond(x0 - (int64) ((int32) w2))
	branch Test(LE,ZCV) l00000000004745D0
	// succ:  l0000000000474380 l00000000004745D0
l0000000000474380:
	x1 = 0x00000000004BE000
	w2 = 0x00000005
	x1 = x1 + 0xFFFFFFFFFFFFFF80
	x0 = 0x0000000000000000
	dcgettext(x0, x1, x2)
	sp = sp + 0xFFFFFFFFFFFFFFF8
	x1 = x0
	x0 = x24
	call sh_erange (retsize: 0;)
	w1 = 0x00000001
	goto l00000000004740A0
	// succ:  l00000000004740A0
l00000000004743A8:
	w0 = w20
	call sh_chkwrite (retsize: 0;)
	w1 = w0
	goto l00000000004740A0
	// succ:  l00000000004740A0
l00000000004743B8:
	x0 = Mem0[x19 + 1648:word64]
	fflush(x0)
	sp = sp + 0xFFFFFFFFFFFFFFF8
	w1 = w22
	goto l00000000004740A0
	// succ:  l00000000004740A0
l00000000004743C8:
	call maybe_append_history (retsize: 0;)
	NZCV = cond(w0 - w31)
	w1 = (word32) Test(NE,Z)
	goto l00000000004740A0
	// succ:  l00000000004740A0
l00000000004743D8:
	branch x20 == 0x0000000000000000 l0000000000474608
	// succ:  l00000000004743DC l0000000000474608
l00000000004743DC:
	x0 = x20
	w1 = w24
	x2 = x29 + 0x0000000000000068
	call get_numeric_arg (retsize: 0;)
	branch w0 == 0x00000000 l0000000000474600
	// succ:  l00000000004743F0 l0000000000474600
l00000000004743F0:
	x0 = Mem0[x29 + 104:word64]
	branch (w0 & 0x00000000) != 0x00000000 l0000000000474650
	// succ:  l00000000004743F8 l0000000000474650
l00000000004743F8:
	call history_list (retsize: 0;)
	x23 = x0
	branch x0 == 0x0000000000000000 l00000000004744FC
	// succ:  l0000000000474404 l00000000004744FC
l0000000000474404:
	x2 = Mem0[x0:word64]
	branch x2 == 0x0000000000000000 l0000000000474420
	// succ:  l000000000047440C l0000000000474420
l000000000047440C:
	x3 = x0 + 0x0000000000000008
	w2 = 0x00000000
	// succ:  l0000000000474414
l0000000000474414:
	x1 = Mem0[x3:word64]
	x3 = x3 + 8
	w2 = w2 + 0x00000001
	branch x1 != 0x0000000000000000 l0000000000474414
	// succ:  l0000000000474420 l0000000000474414
l0000000000474420:
	x19 = Mem0[x29 + 104:word64]
	branch (w19 & 0x00000000) != 0x00000000 l00000000004745C4
	// succ:  l0000000000474428 l00000000004745C4
l0000000000474428:
	NZCV = cond(x19 - (int64) ((int32) w2))
	branch Test(GE,NZV) l00000000004745C4
	// succ:  l0000000000474430 l00000000004745C4
l0000000000474430:
	w19 = w2 - w19
l0000000000474438:
	x0 = 0x00000000004AC000
	x0 = x0 + 0xFFFFFFFFFFFFFD38
	call get_string_value (retsize: 0;)
	x22 = x0
	x0 = Mem0[x23 + x21:word64]
	x21 = x23 + x21
	branch x0 == 0x0000000000000000 l00000000004744FC
	// succ:  l0000000000474454 l00000000004744FC
l0000000000474454:
	x0 = 0x00000000004E1000
	x0 = x0 + 0x00000000000006C0
l00000000004744FC:
	w0 = w24
	call sh_chkwrite (retsize: 0;)
	w1 = w0
	goto l00000000004740A0
	// succ:  l00000000004740A0
l0000000000474564:
	call bash_delete_last_history (retsize: 0;)
	w1 = 0x00000001
	branch w0 != 0x00000000 l0000000000474230
	// succ:  l0000000000474570 l0000000000474230
l0000000000474570:
	goto l00000000004740A0
	// succ:  l00000000004740A0
l0000000000474574:
	call write_history (retsize: 0;)
	NZCV = cond(w0 - w31)
	w1 = (word32) Test(NE,Z)
	goto l00000000004740A0
	// succ:  l00000000004740A0
l00000000004745B4:
	call read_history (retsize: 0;)
	NZCV = cond(w0 - w31)
	w1 = (word32) Test(NE,Z)
	goto l00000000004740A0
	// succ:  l00000000004740A0
l00000000004745C4:
	x21 = 0x0000000000000000
	w19 = w21
	goto l0000000000474438
	// succ:  l0000000000474438
l00000000004745D0:
	w0 = w0 - w1
	call bash_delete_histent (retsize: 0;)
	w20 = w0
	call where_history (retsize: 0;)
	w1 = Mem0[x19 + 392:word32]
	NZCV = cond(w0 - w1)
	branch Test(LE,ZCV) l00000000004745F4
	// succ:  l00000000004745EC l00000000004745F4
l00000000004745EC:
	w0 = w1
	call history_set_pos (retsize: 0;)
	// succ:  l00000000004745F4
l00000000004745F4:
	NZCV = cond(w20 - w31)
	w1 = (word32) Test(EQ,Z)
	goto l00000000004740A0
	// succ:  l00000000004740A0
l0000000000474600:
	w24 = 0x00000001
	goto l00000000004744FC
	// succ:  l00000000004744FC
l0000000000474608:
	x0 = 0xFFFFFFFFFFFFFFFF
	Mem0[x29 + 104:word64] = x0
	goto l00000000004743F8
	// succ:  l00000000004743F8
l0000000000474614:
	x0 = 0x00000000004AC000
	x0 = x0 + 0xFFFFFFFFFFFFF990
	call get_string_value (retsize: 0;)
	goto l00000000004742E4
	// succ:  l00000000004742E4
l0000000000474624:
	w3 = Mem0[x20 + 1540:word32]
	x1 = 0x00000000004E3000
	w0 = w0 - w23
	w2 = Mem0[x1 + 3428:word32]
	w0 = w0 + w3
	w22 = w0 - w22
	w2 = w22 + w2
	NZCV = cond(w21 - w31)
	Mem0[x1 + 3428:word32] = w2
	w1 = (word32) Test(NE,Z)
	goto l00000000004740A0
	// succ:  l00000000004740A0
l0000000000474650:
	x0 = x31 - x0
	Mem0[x29 + 104:word64] = x0
	goto l00000000004743F8
	// succ:  l00000000004743F8
history_builtin_exit:


// jobs_builtin
// Return size: 0
void jobs_builtin()
jobs_builtin_entry:
	// succ:  l000000000047465C
l000000000047465C:
	sp = fp
	sp = sp + -320
	Mem0[sp:word64] = x29
	sp = sp + 8
	Mem0[sp:word64] = x30
	x29 = x31 + 0x0000000000000000
	v8 = sp + 16
	Mem0[v8:word64] = x19
	v8 = v8 + 8
	Mem0[v8:word64] = x20
	v11 = sp + 32
	Mem0[v11:word64] = x21
	v11 = v11 + 8
	Mem0[v11:word64] = x22
	v14 = sp + 48
	Mem0[v14:word64] = x23
	v14 = v14 + 8
	Mem0[v14:word64] = x24
	w22 = 0x00000000
	x19 = 0x00000000004BE000
	x23 = 0x00000000004BE000
	x20 = x0
	w24 = w22
	call reset_internal_getopt (retsize: 0;)
	w21 = w22
	x19 = x19 + 0xFFFFFFFFFFFFFFE0
	x23 = x23 + 0xFFFFFFFFFFFFFFA4
	x0 = x20
	x1 = x19
	call internal_getopt (retsize: 0;)
	w31 = w0 + 0x00000001
	NZCV = cond(w31)
	branch Test(EQ,Z) l00000000004746F8
	// succ:  l00000000004746A8 l00000000004746F8
l00000000004746A8:
	w2 = w0 - 0x0000006C
	w31 = w2 - 0x0000000C
	NZCV = cond(w31)
	branch Test(ULE,ZC) l00000000004746D0
	// succ:  l00000000004746B4 l00000000004746D0
l00000000004746B4:
	call builtin_usage (retsize: 0;)
	w0 = 0x00000102
	// succ:  l00000000004746BC
l00000000004746BC:
	v26 = sp + 16
	x19 = Mem0[v26:word64]
	v26 = v26 + 8
	x20 = Mem0[v26:word64]
	v27 = sp + 32
	x21 = Mem0[v27:word64]
	v27 = v27 + 8
	x22 = Mem0[v27:word64]
	v28 = sp + 48
	x23 = Mem0[v28:word64]
	v28 = v28 + 8
	x24 = Mem0[v28:word64]
	x29 = Mem0[sp:word64]
	sp = sp + 8
	x30 = Mem0[sp:word64]
	sp = sp + 320
	return
	// succ:  jobs_builtin_exit
l00000000004746D0:
	v39 = Mem0[x23 + (uint64) ((uint32) w2):byte]
	w0 = (word32) v39
	x1 = 0x00000000004746E0
	x0 = x1 + (int64) ((int8) w0)
	call x0 (retsize: 0;)
	return
	// succ:  jobs_builtin_exit
l00000000004746F8:
	x0 = 0x00000000004E3000
	x19 = Mem0[x0 + 3856:word64]
	branch w24 != 0x00000000 l0000000000474800
	// succ:  l0000000000474704 l0000000000474800
l0000000000474704:
	x20 = 0x00000000004DF000
	branch x19 != 0x0000000000000000 l0000000000474750
	// succ:  l000000000047470C l0000000000474750
l000000000047470C:
	goto l0000000000474924
	// succ:  l0000000000474924
l0000000000474710:
	x0 = Mem0[x20 + 3784:word64]
	branch x0 == 0x0000000000000000 l0000000000474790
	// succ:  l0000000000474718 l0000000000474790
l0000000000474718:
	x0 = Mem0[x0 + (int64) ((int32) w3):word64]
	branch x0 == 0x0000000000000000 l0000000000474790
	// succ:  l0000000000474720 l0000000000474790
l0000000000474720:
	w31 = w3 + 0x00000002
	NZCV = cond(w31)
	branch Test(EQ,Z) l0000000000474738
	// succ:  l0000000000474728 l0000000000474738
l0000000000474728:
	x0 = 0x0000000000000000
	w1 = w21
	w2 = w0
	call list_one_job (retsize: 0;)
	// succ:  l0000000000474738
l0000000000474738:
	w0 = 0x00000002
	x1 = x29 + 0x0000000000000040
	x2 = 0x0000000000000000
	sigprocmask(x0, x1, x2)
	sp = sp + 0xFFFFFFFFFFFFFFF8
	x19 = Mem0[x19:word64]
	branch x19 == 0x0000000000000000 l00000000004747B8
	// succ:  l0000000000474750 l00000000004747B8
l0000000000474750:
	x0 = x29 + 0x00000000000000C0
	sigemptyset(x0)
	sp = sp + 0xFFFFFFFFFFFFFFF8
	w1 = 0x00000011
	x0 = x29 + 0x00000000000000C0
	sigaddset(x0, x1)
	sp = sp + 0xFFFFFFFFFFFFFFF8
	x0 = x29 + 0x0000000000000040
	sigemptyset(x0)
	sp = sp + 0xFFFFFFFFFFFFFFF8
	x1 = x29 + 0x00000000000000C0
	x2 = x29 + 0x0000000000000040
	w0 = 0x00000000
	sigprocmask(x0, x1, x2)
	sp = sp + 0xFFFFFFFFFFFFFFF8
	x0 = x19
	call get_job_spec (retsize: 0;)
	w31 = w0 + 0x00000001
	NZCV = cond(w31)
	w3 = w0
	branch Test(NE,Z) l0000000000474710
	// succ:  l0000000000474790 l0000000000474710
l0000000000474790:
	x0 = Mem0[x19 + 8:word64]
	w24 = w24 + 0x00000001
	x0 = Mem0[x0:word64]
	call sh_badjob (retsize: 0;)
	w0 = 0x00000002
	x1 = x29 + 0x0000000000000040
	x2 = 0x0000000000000000
	sigprocmask(x0, x1, x2)
	sp = sp + 0xFFFFFFFFFFFFFFF8
	x19 = Mem0[x19:word64]
	branch x19 != 0x0000000000000000 l0000000000474750
	// succ:  l00000000004747B8 l0000000000474750
l00000000004747B8:
	NZCV = cond(w24 - w31)
	w0 = (word32) Test(NE,Z)
	v33 = sp + 16
	x19 = Mem0[v33:word64]
	v33 = v33 + 8
	x20 = Mem0[v33:word64]
	v34 = sp + 32
	x21 = Mem0[v34:word64]
	v34 = v34 + 8
	x22 = Mem0[v34:word64]
	v35 = sp + 48
	x23 = Mem0[v35:word64]
	v35 = v35 + 8
	x24 = Mem0[v35:word64]
	x29 = Mem0[sp:word64]
	sp = sp + 8
	x30 = Mem0[sp:word64]
	sp = sp + 320
	return
	// succ:  jobs_builtin_exit
l0000000000474800:
	x20 = x19
	branch x19 == 0x0000000000000000 l0000000000474888
	// succ:  l0000000000474808 l0000000000474888
l0000000000474808:
	x0 = 0x00000000004BE000
	x21 = 0x00000000004D6000
	x22 = 0x00000000004DF000
	x24 = x0 + 0xFFFFFFFFFFFFFFF8
	goto l0000000000474824
	// succ:  l0000000000474824
l000000000047481C:
	x20 = Mem0[x20:word64]
	branch x20 == 0x0000000000000000 l0000000000474888
	// succ:  l0000000000474824 l0000000000474888
l0000000000474824:
	x0 = Mem0[x20 + 8:word64]
	x0 = Mem0[x0:word64]
	v36 = Mem0[x0:byte]
	w0 = (word32) v36
	w31 = w0 - 0x00000025
	NZCV = cond(w31)
	branch Test(NE,Z) l000000000047481C
	// succ:  l0000000000474838 l000000000047481C
l0000000000474838:
	x0 = x20
	call get_job_spec (retsize: 0;)
	branch (w0 & 0x00000000) == 0x00000000 l000000000047481C
	// succ:  l0000000000474844 l000000000047481C
l0000000000474844:
	x2 = x21 + 0xFFFFFFFFFFFFFD08
	w2 = Mem0[x2 + 28:word32]
	NZCV = cond(w0 - w2)
	branch Test(GE,NZV) l000000000047481C
	// succ:  l0000000000474854 l000000000047481C
l0000000000474854:
	x1 = Mem0[x22 + 3784:word64]
	x23 = Mem0[x1 + (int64) ((int32) w0):word64]
	branch x23 == 0x0000000000000000 l000000000047481C
	// succ:  l0000000000474860 l000000000047481C
l0000000000474860:
	x0 = Mem0[x20 + 8:word64]
	x1 = x24
	x0 = Mem0[x0:word64]
	w2 = 0x000000BD
	call sh_xfree (retsize: 0;)
	v38 = Mem0[x23 + 8:int32]
	x0 = (word64) v38
	x23 = Mem0[x20 + 8:word64]
	call itos (retsize: 0;)
	Mem0[x23:word64] = x0
	goto l000000000047481C
	// succ:  l000000000047481C
l0000000000474888:
	x21 = 0x00000000004BE000
	x21 = x21 + 0xFFFFFFFFFFFFFFE8
	x0 = x21
	call begin_unwind_frame (retsize: 0;)
	call make_bare_simple_command (retsize: 0;)
	x20 = x0
	x22 = Mem0[x0 + 24:word64]
	x0 = x19
	call copy_word_list (retsize: 0;)
	Mem0[x22 + 8:word64] = x0
	x2 = Mem0[x20 + 24:word64]
	w1 = Mem0[x20 + 4:word32]
	w0 = Mem0[x2:word32]
	Mem0[x2 + 16:word64] = 0x0000000000000000
	w1 = w1 | 0x00000020
	Mem0[x20 + 4:word32] = w1
	w0 = w0 | 0x00000020
	Mem0[x2:word32] = w0
	x0 = 0x000000000042F000
	x1 = x20
	x0 = x0 + 0xFFFFFFFFFFFFFBD0
	call add_unwind_protect (retsize: 0;)
	x0 = x20
	call execute_command (retsize: 0;)
	w19 = w0
	x0 = x20
	call dispose_command (retsize: 0;)
	x0 = x21
	call discard_unwind_frame (retsize: 0;)
	w0 = w19
	goto l00000000004746BC
	// succ:  l00000000004746BC
l0000000000474924:
	w31 = w22 - 0x00000001
	NZCV = cond(w31)
	branch Test(EQ,Z) l000000000047494C
	// succ:  l000000000047492C l000000000047494C
l000000000047492C:
	w31 = w22 - 0x00000002
	NZCV = cond(w31)
	branch Test(EQ,Z) l000000000047495C
	// succ:  l0000000000474934 l000000000047495C
l0000000000474934:
	w0 = w19
	branch w22 != 0x00000000 l00000000004746BC
	// succ:  l000000000047493C l00000000004746BC
l000000000047493C:
	w0 = w21
	call list_all_jobs (retsize: 0;)
	w0 = w19
	goto l00000000004746BC
	// succ:  l00000000004746BC
l000000000047494C:
	w0 = w21
	call list_running_jobs (retsize: 0;)
	w0 = w19
	goto l00000000004746BC
	// succ:  l00000000004746BC
l000000000047495C:
	w0 = w21
	call list_stopped_jobs (retsize: 0;)
	w0 = w19
	goto l00000000004746BC
	// succ:  l00000000004746BC
jobs_builtin_exit:


// disown_builtin
// Return size: 0
void disown_builtin()
disown_builtin_entry:
	// succ:  l000000000047496C
l000000000047496C:
	sp = fp
	sp = sp + -336
	Mem0[sp:word64] = x29
	sp = sp + 8
	Mem0[sp:word64] = x30
	x29 = x31 + 0x0000000000000000
	v8 = sp + 16
	Mem0[v8:word64] = x19
	v8 = v8 + 8
	Mem0[v8:word64] = x20
	v11 = sp + 32
	Mem0[v11:word64] = x21
	v11 = v11 + 8
	Mem0[v11:word64] = x22
	x19 = 0x00000000004BF000
	w21 = 0x00000000
	v15 = sp + 48
	Mem0[v15:word64] = x23
	v15 = v15 + 8
	Mem0[v15:word64] = x24
	x20 = x0
	w23 = w21
	call reset_internal_getopt (retsize: 0;)
	w22 = w21
	x19 = x19 + 0x0000000000000030
	// succ:  l000000000047499C
l000000000047499C:
	x0 = x20
	x1 = x19
	call internal_getopt (retsize: 0;)
	w31 = w0 + 0x00000001
	NZCV = cond(w31)
	branch Test(EQ,Z) l00000000004749FC
	// succ:  l00000000004749B0 l00000000004749FC
l00000000004749B0:
	w31 = w0 - 0x00000068
	NZCV = cond(w31)
	branch Test(EQ,Z) l00000000004749E4
	// succ:  l00000000004749B8 l00000000004749E4
l00000000004749B8:
	w31 = w0 - 0x00000072
	NZCV = cond(w31)
	branch Test(EQ,Z) l0000000000474B10
	// succ:  l00000000004749C0 l0000000000474B10
l00000000004749C0:
	w31 = w0 - 0x00000061
	NZCV = cond(w31)
	branch Test(EQ,Z) l0000000000474B08
	// succ:  l00000000004749C8 l0000000000474B08
l00000000004749C8:
	call builtin_usage (retsize: 0;)
	w0 = 0x00000102
	// succ:  l00000000004749D0
l00000000004749D0:
	v24 = sp + 16
	x19 = Mem0[v24:word64]
	v24 = v24 + 8
	x20 = Mem0[v24:word64]
	v25 = sp + 32
	x21 = Mem0[v25:word64]
	v25 = v25 + 8
	x22 = Mem0[v25:word64]
	v26 = sp + 48
	x23 = Mem0[v26:word64]
	v26 = v26 + 8
	x24 = Mem0[v26:word64]
	x29 = Mem0[sp:word64]
	sp = sp + 8
	x30 = Mem0[sp:word64]
	sp = sp + 336
	return
	// succ:  disown_builtin_exit
l00000000004749E4:
	x0 = x20
	x1 = x19
	call internal_getopt (retsize: 0;)
	w31 = w0 + 0x00000001
	NZCV = cond(w31)
	w22 = 0x00000001
	branch Test(NE,Z) l00000000004749B0
	// succ:  l00000000004749FC l00000000004749B0
l00000000004749FC:
	x0 = 0x00000000004E3000
	x19 = Mem0[x0 + 3856:word64]
	branch x19 == 0x0000000000000000 l0000000000474B44
	// succ:  l0000000000474A08 l0000000000474B44
l0000000000474A08:
	x1 = 0x00000000004BE000
	w20 = 0x00000000
	x24 = x1 + 0xFFFFFFFFFFFFFB20
	x21 = 0x00000000004DF000
	x23 = 0x00000000004D6000
	goto l0000000000474A68
	// succ:  l0000000000474A68
l0000000000474A20:
	x2 = Mem0[x21 + 3784:word64]
	branch x2 == 0x0000000000000000 l0000000000474AC8
	// succ:  l0000000000474A28 l0000000000474AC8
l0000000000474A28:
	branch (w0 & 0x00000000) == 0x00000000 l0000000000474AC8
	// succ:  l0000000000474A2C l0000000000474AC8
l0000000000474A2C:
	x3 = x23 + 0xFFFFFFFFFFFFFD08
	w3 = Mem0[x3 + 28:word32]
	NZCV = cond(w0 - w3)
	branch Test(GE,NZV) l0000000000474AC8
	// succ:  l0000000000474A3C l0000000000474AC8
l0000000000474A3C:
	x2 = Mem0[x2 + (int64) ((int32) w0):word64]
	branch x2 == 0x0000000000000000 l0000000000474AC8
	// succ:  l0000000000474A44 l0000000000474AC8
l0000000000474A44:
	branch w22 == 0x00000000 l0000000000474B18
	// succ:  l0000000000474A48 l0000000000474B18
l0000000000474A48:
	call nohup_job (retsize: 0;)
	// succ:  l0000000000474A4C
l0000000000474A4C:
	w0 = 0x00000002
	x1 = x29 + 0x0000000000000040
	x2 = 0x0000000000000000
	sigprocmask(x0, x1, x2)
	sp = sp + 0xFFFFFFFFFFFFFFF8
	branch x19 == 0x0000000000000000 l0000000000474AF0
	// succ:  l0000000000474A60 l0000000000474AF0
l0000000000474A60:
	x19 = Mem0[x19:word64]
	branch x19 == 0x0000000000000000 l0000000000474AF0
	// succ:  l0000000000474A68 l0000000000474AF0
l0000000000474A68:
	x0 = x29 + 0x00000000000000C0
	sigemptyset(x0)
	sp = sp + 0xFFFFFFFFFFFFFFF8
	w1 = 0x00000011
	x0 = x29 + 0x00000000000000C0
	sigaddset(x0, x1)
	sp = sp + 0xFFFFFFFFFFFFFFF8
	x0 = x29 + 0x0000000000000040
	sigemptyset(x0)
	sp = sp + 0xFFFFFFFFFFFFFFF8
	w0 = 0x00000000
	x1 = x29 + 0x00000000000000C0
	x2 = x29 + 0x0000000000000040
	sigprocmask(x0, x1, x2)
	sp = sp + 0xFFFFFFFFFFFFFFF8
	branch x19 == 0x0000000000000000 l0000000000474AB8
	// succ:  l0000000000474A98 l0000000000474AB8
l0000000000474A98:
	x2 = Mem0[x19 + 8:word64]
	x1 = x29 + 0x0000000000000140
	x0 = Mem0[x2:word64]
	call legal_number (retsize: 0;)
	branch w0 == 0x00000000 l0000000000474AB8
	// succ:  l0000000000474AAC l0000000000474AB8
l0000000000474AAC:
	x0 = Mem0[x29 + 320:word64]
	NZCV = cond(x0 - (int64) ((int32) w0))
	branch Test(EQ,Z) l0000000000474B24
	// succ:  l0000000000474AB8 l0000000000474B24
l0000000000474AB8:
	x0 = x19
	call get_job_spec (retsize: 0;)
	// succ:  l0000000000474AC0
l0000000000474AC0:
	w31 = w0 + 0x00000001
	NZCV = cond(w31)
	branch Test(NE,Z) l0000000000474A20
	// succ:  l0000000000474AC8 l0000000000474A20
l0000000000474AC8:
	branch x19 == 0x0000000000000000 l0000000000474B30
	// succ:  l0000000000474ACC l0000000000474B30
l0000000000474ACC:
	x0 = Mem0[x19 + 8:word64]
	x0 = Mem0[x0:word64]
	// succ:  l0000000000474AD4
l0000000000474AD4:
	call sh_badjob (retsize: 0;)
	w0 = 0x00000002
	x1 = x29 + 0x0000000000000040
	x2 = 0x0000000000000000
	w20 = 0x00000001
	sigprocmask(x0, x1, x2)
	sp = sp + 0xFFFFFFFFFFFFFFF8
	branch x19 != 0x0000000000000000 l0000000000474A60
	// succ:  l0000000000474AF0 l0000000000474A60
l0000000000474AF0:
	w0 = w20
	v31 = sp + 32
	x21 = Mem0[v31:word64]
	v31 = v31 + 8
	x22 = Mem0[v31:word64]
	v32 = sp + 16
	x19 = Mem0[v32:word64]
	v32 = v32 + 8
	x20 = Mem0[v32:word64]
	v33 = sp + 48
	x23 = Mem0[v33:word64]
	v33 = v33 + 8
	x24 = Mem0[v33:word64]
	x29 = Mem0[sp:word64]
	sp = sp + 8
	x30 = Mem0[sp:word64]
	sp = sp + 336
	return
	// succ:  disown_builtin_exit
l0000000000474B08:
	w21 = 0x00000001
	goto l000000000047499C
	// succ:  l000000000047499C
l0000000000474B10:
	w23 = 0x00000001
	goto l000000000047499C
	// succ:  l000000000047499C
l0000000000474B18:
	w1 = 0x00000001
	call delete_job (retsize: 0;)
	goto l0000000000474A4C
	// succ:  l0000000000474A4C
l0000000000474B24:
	w1 = 0x00000000
	call get_job_by_pid (retsize: 0;)
	goto l0000000000474AC0
	// succ:  l0000000000474AC0
l0000000000474B30:
	x0 = x19
	x1 = x24
	w2 = 0x00000005
	dcgettext(x0, x1, x2)
	sp = sp + 0xFFFFFFFFFFFFFFF8
	goto l0000000000474AD4
	// succ:  l0000000000474AD4
l0000000000474B44:
	w21 = w23 | w21
	branch w21 == 0x00000000 l0000000000474A08
	// succ:  l0000000000474B4C l0000000000474A08
l0000000000474B4C:
	w0 = w23
	branch w22 == 0x00000000 l0000000000474B60
	// succ:  l0000000000474B54 l0000000000474B60
l0000000000474B54:
	call nohup_all_jobs (retsize: 0;)
	w0 = w19
	goto l00000000004749D0
	// succ:  l00000000004749D0
l0000000000474B60:
	call delete_all_jobs (retsize: 0;)
	w0 = w19
	goto l00000000004749D0
	// succ:  l00000000004749D0
disown_builtin_exit:


// fn0000000000474B6C
// Return size: 0
void fn0000000000474B6C()
fn0000000000474B6C_entry:
	// succ:  l0000000000474B6C
l0000000000474B6C:
	sp = fp
	sp = sp + -32
	Mem0[sp:word64] = x29
	sp = sp + 8
	Mem0[sp:word64] = x30
	x29 = x31 + 0x0000000000000000
	Mem0[sp + 16:word64] = x19
	w19 = w0
	w0 = w1
	strerror(x0)
	sp = sp + 0xFFFFFFFFFFFFFFF8
	x2 = x0
	branch x0 == 0x0000000000000000 l0000000000474BA4
	// succ:  l0000000000474B8C l0000000000474BA4
l0000000000474B8C:
l0000000000474BA4:
	x1 = 0x00000000004BF000
	x1 = x1 + 0x0000000000000038
	w2 = 0x00000005
	dcgettext(x0, x1, x2)
	sp = sp + 0xFFFFFFFFFFFFFFF8
	x2 = x0
fn0000000000474B6C_exit:


// kill_builtin
// Return size: 0
void kill_builtin()
kill_builtin_entry:
	// succ:  l0000000000474BD0
l0000000000474BD0:
	sp = fp
	sp = sp + -368
	Mem0[sp:word64] = x29
	sp = sp + 8
	Mem0[sp:word64] = x30
	x29 = x31 + 0x0000000000000000
	v8 = sp + 16
	Mem0[v8:word64] = x19
	v8 = v8 + 8
	Mem0[v8:word64] = x20
	v11 = sp + 32
	Mem0[v11:word64] = x21
	v11 = v11 + 8
	Mem0[v11:word64] = x22
	v14 = sp + 48
	Mem0[v14:word64] = x23
	v14 = v14 + 8
	Mem0[v14:word64] = x24
	v17 = sp + 64
	Mem0[v17:word64] = x25
	v17 = v17 + 8
	Mem0[v17:word64] = x26
	Mem0[sp + 80:word64] = x27
	x19 = x0
	branch x0 == 0x0000000000000000 l0000000000474F24
	// succ:  l0000000000474BF4 l0000000000474F24
l0000000000474BF4:
	x0 = 0x00000000004DE000
	w0 = Mem0[x0 + 1716:word32]
	w21 = 0x00000000
	NZCV = cond(w0 - w31)
	w23 = 0x00000002
	w0 = 0x00000003
	x20 = 0x00000000004AA000
l0000000000474D24:
	v25 = sp + 16
	x19 = Mem0[v25:word64]
	v25 = v25 + 8
	x20 = Mem0[v25:word64]
	v26 = sp + 32
	x21 = Mem0[v26:word64]
	v26 = v26 + 8
	x22 = Mem0[v26:word64]
	v27 = sp + 48
	x23 = Mem0[v27:word64]
	v27 = v27 + 8
	x24 = Mem0[v27:word64]
	v28 = sp + 64
	x25 = Mem0[v28:word64]
	v28 = v28 + 8
	x26 = Mem0[v28:word64]
	x27 = Mem0[sp + 80:word64]
	x29 = Mem0[sp:word64]
	sp = sp + 8
	x30 = Mem0[sp:word64]
	sp = sp + 368
	return
	// succ:  kill_builtin_exit
l0000000000474F24:
	call builtin_usage (retsize: 0;)
	w0 = 0x00000001
	goto l0000000000474D24
	// succ:  l0000000000474D24
kill_builtin_exit:


// let_builtin
// Return size: 0
void let_builtin()
let_builtin_entry:
	// succ:  l0000000000474F70
l0000000000474F70:
	sp = fp
	sp = sp + -48
	Mem0[sp:word64] = x29
	sp = sp + 8
	Mem0[sp:word64] = x30
	x29 = x31 + 0x0000000000000000
	Mem0[sp + 16:word64] = x19
	x19 = x0
	branch x0 == 0x0000000000000000 l000000000047500C
	// succ:  l0000000000474F84 l000000000047500C
l0000000000474F84:
	x0 = Mem0[x0 + 8:word64]
	branch x0 == 0x0000000000000000 l0000000000474FB8
	// succ:  l0000000000474F8C l0000000000474FB8
l0000000000474F8C:
	x0 = Mem0[x0:word64]
	v9 = Mem0[x0:byte]
	w1 = (word32) v9
	w31 = w1 - 0x0000002D
	NZCV = cond(w31)
	branch Test(EQ,Z) l0000000000474FF0
	// succ:  l0000000000474F9C l0000000000474FF0
l0000000000474F9C:
	x1 = x29 + 0x0000000000000020
	call evalexp (retsize: 0;)
	w1 = Mem0[x29 + 32:word32]
	branch w1 == 0x00000000 l0000000000474FCC
	// succ:  l0000000000474FAC l0000000000474FCC
l0000000000474FAC:
	x19 = Mem0[x19:word64]
	branch x19 == 0x0000000000000000 l0000000000474FDC
	// succ:  l0000000000474FB4 l0000000000474FDC
l0000000000474FB4:
	x0 = Mem0[x19 + 8:word64]
	// succ:  l0000000000474FB8
l0000000000474FB8:
	x0 = Mem0[x0:word64]
	x1 = x29 + 0x0000000000000020
	call evalexp (retsize: 0;)
	w1 = Mem0[x29 + 32:word32]
	branch w1 != 0x00000000 l0000000000474FAC
	// succ:  l0000000000474FCC l0000000000474FAC
l0000000000474FCC:
	w0 = 0x00000001
	x19 = Mem0[sp + 16:word64]
	x29 = Mem0[sp:word64]
	sp = sp + 8
	x30 = Mem0[sp:word64]
	sp = sp + 48
	return
	// succ:  let_builtin_exit
l0000000000474FDC:
	x31 = x0 - x31
	NZCV = cond(x31)
	w0 = (word32) Test(EQ,Z)
	// succ:  l0000000000474FE4
l0000000000474FE4:
	x19 = Mem0[sp + 16:word64]
	x29 = Mem0[sp:word64]
	sp = sp + 8
	x30 = Mem0[sp:word64]
	sp = sp + 48
	return
	// succ:  let_builtin_exit
l0000000000474FF0:
	v17 = Mem0[x0 + 2:byte]
	w1 = (word32) v17
	branch w1 != 0x00000000 l0000000000474F9C
	// succ:  l0000000000474FF8 l0000000000474F9C
l0000000000474FF8:
	v18 = Mem0[x0 + 1:byte]
	w1 = (word32) v18
	w31 = w1 - 0x0000002D
	NZCV = cond(w31)
	branch Test(NE,Z) l0000000000474F9C
	// succ:  l0000000000475004 l0000000000474F9C
l0000000000475004:
	x19 = Mem0[x19:word64]
	branch x19 != 0x0000000000000000 l0000000000474FB4
	// succ:  l000000000047500C l0000000000474FB4
l000000000047500C:
	x1 = 0x00000000004AD000
	x1 = x1 + 0x0000000000000288
	w2 = 0x00000005
	x0 = 0x0000000000000000
	dcgettext(x0, x1, x2)
	sp = sp + 0xFFFFFFFFFFFFFFF8
	call builtin_error (retsize: 0;)
	w0 = 0x00000001
	goto l0000000000474FE4
	// succ:  l0000000000474FE4
let_builtin_exit:


// mapfile_builtin
// Return size: 0
void mapfile_builtin()
mapfile_builtin_entry:
	// succ:  l000000000047502C
l000000000047502C:
	sp = fp
	sp = sp + -160
	Mem0[sp:word64] = x29
	sp = sp + 8
	Mem0[sp:word64] = x30
	x29 = x31 + 0x0000000000000000
	v8 = sp + 16
	Mem0[v8:word64] = x19
	v8 = v8 + 8
	Mem0[v8:word64] = x20
	v11 = sp + 32
	Mem0[v11:word64] = x21
	v11 = v11 + 8
	Mem0[v11:word64] = x22
	v14 = sp + 48
	Mem0[v14:word64] = x23
	v14 = v14 + 8
	Mem0[v14:word64] = x24
	v17 = sp + 64
	Mem0[v17:word64] = x25
	v17 = v17 + 8
	Mem0[v17:word64] = x26
	v20 = sp + 80
	Mem0[v20:word64] = x27
	v20 = v20 + 8
	Mem0[v20:word64] = x28
	x20 = x0
	call reset_internal_getopt (retsize: 0;)
	x21 = 0x0000000000000000
	x19 = 0x00000000004BF000
	x0 = 0x00000000004BF000
	x23 = 0x0000000000001388
	x24 = x21
	Mem0[x29 + 128:word64] = x21
	x22 = x21
	w25 = 0x00000001
	Mem0[x29 + 144:word32] = w21
	x19 = x19 + 0x0000000000000168
	x26 = x0 + 0x0000000000000084
	x27 = 0x00000000004E3000
	x0 = x20
	x1 = x19
	call internal_getopt (retsize: 0;)
	w31 = w0 + 0x00000001
	NZCV = cond(w31)
	branch Test(EQ,Z) l0000000000475164
	// succ:  l0000000000475094 l0000000000475164
l0000000000475094:
	w2 = w0 - 0x00000043
	w31 = w2 - 0x00000032
	NZCV = cond(w31)
	branch Test(ULE,ZC) l00000000004750C8
	// succ:  l00000000004750A0 l00000000004750C8
l00000000004750A0:
	call builtin_usage (retsize: 0;)
	w19 = 0x00000102
	// succ:  l00000000004750A8
l00000000004750A8:
	w0 = w19
	v32 = sp + 32
	x21 = Mem0[v32:word64]
	v32 = v32 + 8
	x22 = Mem0[v32:word64]
	v33 = sp + 16
	x19 = Mem0[v33:word64]
	v33 = v33 + 8
	x20 = Mem0[v33:word64]
	v34 = sp + 48
	x23 = Mem0[v34:word64]
	v34 = v34 + 8
	x24 = Mem0[v34:word64]
	v35 = sp + 64
	x25 = Mem0[v35:word64]
	v35 = v35 + 8
	x26 = Mem0[v35:word64]
	v36 = sp + 80
	x27 = Mem0[v36:word64]
	v36 = v36 + 8
	x28 = Mem0[v36:word64]
	x29 = Mem0[sp:word64]
	sp = sp + 8
	x30 = Mem0[sp:word64]
	sp = sp + 160
	return
	// succ:  mapfile_builtin_exit
l00000000004750C8:
	v54 = Mem0[x26 + (uint64) ((uint32) w2):byte]
	w0 = (word32) v54
	x1 = 0x00000000004750D8
	x0 = x1 + (int64) ((int8) w0)
	call x0 (retsize: 0;)
	return
	// succ:  mapfile_builtin_exit
l0000000000475164:
	x0 = 0x00000000004E3000
	x0 = Mem0[x0 + 3856:word64]
	branch x0 == 0x0000000000000000 l000000000047555C
	// succ:  l0000000000475170 l000000000047555C
l0000000000475170:
	x0 = Mem0[x0 + 8:word64]
	branch x0 == 0x0000000000000000 l0000000000475548
	// succ:  l0000000000475178 l0000000000475548
l0000000000475178:
	x20 = Mem0[x0:word64]
	branch x20 == 0x0000000000000000 l0000000000475548
	// succ:  l0000000000475180 l0000000000475548
l0000000000475180:
	v37 = Mem0[x20:byte]
	w0 = (word32) v37
	branch w0 == 0x00000000 l00000000004753E4
	// succ:  l0000000000475188 l00000000004753E4
l0000000000475188:
	x0 = x20
	call legal_identifier (retsize: 0;)
	branch w0 != 0x00000000 l00000000004752C4
	// succ:  l0000000000475194 l00000000004752C4
l0000000000475194:
	x0 = x20
	call valid_array_reference (retsize: 0;)
	branch w0 != 0x00000000 l00000000004752C4
	// succ:  l00000000004751A0 l00000000004752C4
l00000000004751A0:
	x0 = x20
	call sh_invalidid (retsize: 0;)
	w19 = 0x00000001
	goto l00000000004750A8
	// succ:  l00000000004750A8
l00000000004752C4:
	x0 = x20
	w1 = 0x00000001
	Mem0[x29 + 104:word64] = 0x0000000000000000
	Mem0[x29 + 96:word64] = 0x0000000000000000
	call find_or_make_array_variable (retsize: 0;)
	x27 = x0
	branch x0 == 0x0000000000000000 l0000000000475438
	// succ:  l00000000004752E0 l0000000000475438
l00000000004752E0:
	w0 = Mem0[x0 + 40:word32]
	w1 = 0x00004002
	NZ = cond(w0 & w1)
	C = false
	V = false
	branch Test(NE,Z) l0000000000475534
	// succ:  l00000000004752F0 l0000000000475534
l00000000004752F0:
	branch (w0 & 0x00000004) == 0x00000000 l0000000000475580
	// succ:  l00000000004752F4 l0000000000475580
l00000000004752F4:
	branch (w25 & 0x00000001) == 0x00000000 l0000000000475574
	// succ:  l00000000004752F8 l0000000000475574
l00000000004752F8:
	w0 = Mem0[x29 + 144:word32]
	x1 = 0x0000000000000000
	w2 = 0x00000001
	lseek(x0, x1, x2)
	sp = sp + 0xFFFFFFFFFFFFFFF8
	w20 = 0x00000000
	branch (w0 & 0x00000000) != 0x00000000 l00000000004755A4
	// succ:  l0000000000475310 l00000000004755A4
l0000000000475310:
	call zreset (retsize: 0;)
	w19 = 0x00000000
	branch x24 != 0x0000000000000000 l000000000047532C
	// succ:  l000000000047531C l000000000047532C
l000000000047531C:
	goto l0000000000475344
	// succ:  l0000000000475344
l0000000000475320:
	w19 = w19 + 0x00000001
	NZCV = cond(x24 - (uint64) ((word32) w19))
	branch Test(LE,ZCV) l0000000000475344
	// succ:  l000000000047532C l0000000000475344
l000000000047532C:
	w0 = Mem0[x29 + 144:word32]
	x1 = x29 + 0x0000000000000068
	x2 = x29 + 0x0000000000000060
	w3 = w20
	call zgetline (retsize: 0;)
	branch (w0 & 0x00000000) != 0x00000000 l0000000000475320
	// succ:  l0000000000475344 l0000000000475320
l0000000000475344:
	x2 = 0x00000000004E1000
	w0 = Mem0[x2 + 636:word32]
	w26 = Mem0[x29 + 128:word32]
	w0 = w0 + 0x00000001
	Mem0[x2 + 636:word32] = w0
	x0 = 0x00000000004BF000
	x0 = x0 + 0x00000000000001E0
	Mem0[x29 + 128:word64] = x0
	x0 = 0x00000000004BF000
	x0 = x0 + 0x0000000000000218
	Mem0[x29 + 104:word64] = 0x0000000000000000
	Mem0[x29 + 96:word64] = 0x0000000000000000
	w19 = 0x00000001
	w25 = w25 & 0x00000002
	Mem0[x29 + 136:word64] = x0
	// succ:  l0000000000475380
l0000000000475380:
	w0 = Mem0[x29 + 144:word32]
	x1 = x29 + 0x0000000000000068
	x2 = x29 + 0x0000000000000060
	w3 = w20
	call zgetline (retsize: 0;)
	x31 = x0 + 0x0000000000000001
	NZCV = cond(x31)
	branch Test(EQ,Z) l0000000000475440
	// succ:  l000000000047539C l0000000000475440
l000000000047539C:
	branch w25 != 0x00000000 l0000000000475404
	// succ:  l00000000004753A0 l0000000000475404
l00000000004753A0:
	x2 = Mem0[x29 + 104:word64]
	// succ:  l00000000004753A4
l00000000004753A4:
	branch w19 == 0x00000000 l00000000004753BC
	// succ:  l00000000004753A8 l00000000004753BC
l00000000004753A8:
	branch x21 == 0x0000000000000000 l00000000004753BC
	// succ:  l00000000004753AC l00000000004753BC
l00000000004753AC:
	w0 = w19
	x24 = x0 / x23
	x24 = x0 - x24 * x23
	branch x24 == 0x0000000000000000 l0000000000475488
	// succ:  l00000000004753BC l0000000000475488
l00000000004753BC:
	x0 = x27
	w1 = w26
	w3 = 0x00000000
	call bind_array_element (retsize: 0;)
	w19 = w19 + 0x00000001
	branch x22 == 0x0000000000000000 l00000000004753DC
	// succ:  l00000000004753D4 l00000000004753DC
l00000000004753D4:
	NZCV = cond(x22 - (uint64) ((word32) w19))
	branch Test(LT,NV) l0000000000475440
	// succ:  l00000000004753DC l0000000000475440
l00000000004753DC:
	w26 = w26 + 0x00000001
	goto l0000000000475380
	// succ:  l0000000000475380
l00000000004753E4:
	x1 = 0x00000000004BF000
	x1 = x1 + 0x00000000000001A0
	w2 = 0x00000005
	x0 = 0x0000000000000000
	dcgettext(x0, x1, x2)
	sp = sp + 0xFFFFFFFFFFFFFFF8
	call builtin_error (retsize: 0;)
	w19 = 0x00000102
	goto l00000000004750A8
	// succ:  l00000000004750A8
l0000000000475404:
	x24 = Mem0[x29 + 104:word64]
	x0 = x24
	strlen(x0)
	sp = sp + 0xFFFFFFFFFFFFFFF8
	x2 = x24
	branch w0 == 0x00000000 l00000000004753A4
	// succ:  l0000000000475418 l00000000004753A4
l0000000000475418:
l0000000000475438:
	w19 = 0x00000001
	goto l00000000004750A8
	// succ:  l00000000004750A8
l0000000000475440:
	x2 = 0x00000000004BF000
	x0 = Mem0[x29 + 104:word64]
	x1 = x2 + 0x00000000000001E0
	w2 = 0x000000DF
	call sh_xfree (retsize: 0;)
	branch w20 == 0x00000000 l0000000000475568
	// succ:  l0000000000475458 l0000000000475568
l0000000000475458:
	x1 = 0x00000000004E1000
	w0 = Mem0[x1 + 636:word32]
	w19 = 0x00000000
	w0 = w0 - 0x00000001
	Mem0[x1 + 636:word32] = w0
	goto l00000000004750A8
	// succ:  l00000000004750A8
l0000000000475488:
	x0 = x2
	call sh_single_quote (retsize: 0;)
	x28 = x0
	x0 = x21
	strlen(x0)
	sp = sp + 0xFFFFFFFFFFFFFFF8
	x3 = x0
	x0 = x28
	Mem0[x29 + 152:word64] = x3
	strlen(x0)
	sp = sp + 0xFFFFFFFFFFFFFFF8
	x3 = Mem0[x29 + 152:word64]
	x1 = Mem0[x29 + 128:word64]
	w0 = w0 + w3
	w3 = w0 + 0x0000000D
	w2 = 0x00000077
	x0 = x3
	Mem0[x29 + 152:word64] = x3
	call sh_xmalloc (retsize: 0;)
	x3 = Mem0[x29 + 152:word64]
	x4 = Mem0[x29 + 136:word64]
	x1 = x3
	w2 = 0x00000001
	x3 = 0xFFFFFFFFFFFFFFFF
	x5 = x21
	w6 = w26
	x7 = x28
	Mem0[x29 + 152:word64] = x0
	__snprintf_chk(x0, x1, x2, x3, x4, Mem0[sp:<unknown>])
	sp = sp + 0xFFFFFFFFFFFFFFF8
	x1 = Mem0[x29 + 128:word64]
	x0 = x28
	w2 = 0x0000007F
	call sh_xfree (retsize: 0;)
	x8 = Mem0[x29 + 152:word64]
	x1 = x24
	x0 = x8
	w2 = 0x00000004
	call parse_and_execute (retsize: 0;)
	branch w20 == 0x00000000 l0000000000475524
	// succ:  l000000000047551C l0000000000475524
l000000000047551C:
	x2 = Mem0[x29 + 104:word64]
	goto l00000000004753BC
	// succ:  l00000000004753BC
l0000000000475524:
	w0 = Mem0[x29 + 144:word32]
	call zsyncfd (retsize: 0;)
	x2 = Mem0[x29 + 104:word64]
	goto l00000000004753BC
	// succ:  l00000000004753BC
l0000000000475534:
	w19 = 0x00000001
	branch (w0 & 0x00000002) == 0x00000000 l00000000004750A8
	// succ:  l000000000047553C l00000000004750A8
l000000000047553C:
	x0 = x20
	call err_readonly (retsize: 0;)
	goto l00000000004750A8
	// succ:  l00000000004750A8
l0000000000475548:
	x0 = 0x00000000004BF000
	x0 = x0 + 0x0000000000000178
	call builtin_error (retsize: 0;)
	w19 = 0x00000001
	goto l00000000004750A8
	// succ:  l00000000004750A8
l000000000047555C:
	x20 = 0x00000000004BF000
	x20 = x20 + 0x00000000000000B8
	goto l0000000000475188
	// succ:  l0000000000475188
l0000000000475568:
	w0 = Mem0[x29 + 144:word32]
	call zsyncfd (retsize: 0;)
	goto l0000000000475458
	// succ:  l0000000000475458
l0000000000475574:
	x0 = Mem0[x27 + 8:word64]
	call array_flush (retsize: 0;)
	goto l00000000004752F8
	// succ:  l00000000004752F8
l0000000000475580:
	x1 = 0x00000000004BF000
	w2 = 0x00000005
	x1 = x1 + 0x00000000000001C0
	x0 = 0x0000000000000000
	dcgettext(x0, x1, x2)
	sp = sp + 0xFFFFFFFFFFFFFFF8
	x1 = x20
	call builtin_error (retsize: 0;)
	w19 = 0x00000001
	goto l00000000004750A8
	// succ:  l00000000004750A8
l00000000004755A4:
	__errno_location()
	sp = sp + 0xFFFFFFFFFFFFFFF8
	w0 = Mem0[x0:word32]
	w31 = w0 - 0x0000001D
	NZCV = cond(w31)
	w20 = (word32) Test(EQ,Z)
	goto l0000000000475310
	// succ:  l0000000000475310
mapfile_builtin_exit:


// fn00000000004755B8
// Return size: 0
void fn00000000004755B8()
fn00000000004755B8_entry:
	// succ:  l00000000004755B8
l00000000004755B8:
	sp = fp
	sp = sp + -48
	Mem0[sp:word64] = x29
	sp = sp + 8
	Mem0[sp:word64] = x30
	x29 = x31 + 0x0000000000000000
	v8 = sp + 16
	Mem0[v8:word64] = x19
	v8 = v8 + 8
	Mem0[v8:word64] = x20
	call make_word (retsize: 0;)
	x1 = 0x0000000000000000
	call make_word_list (retsize: 0;)
	x1 = x0
	x0 = 0x00000000004AB000
	x0 = x0 + 0xFFFFFFFFFFFFFDA8
	Mem0[x29 + 32:word64] = x1
	call make_word (retsize: 0;)
	x1 = Mem0[x29 + 32:word64]
	call make_word_list (retsize: 0;)
	x20 = x0
	call cd_builtin (retsize: 0;)
	w19 = w0
	x0 = x20
	call dispose_words (retsize: 0;)
	w0 = w19
	v13 = sp + 16
	x19 = Mem0[v13:word64]
	v13 = v13 + 8
	x20 = Mem0[v13:word64]
	x29 = Mem0[sp:word64]
	sp = sp + 8
	x30 = Mem0[sp:word64]
	sp = sp + 48
	return
	// succ:  fn00000000004755B8_exit
fn00000000004755B8_exit:


// fn0000000000475610
// Return size: 0
void fn0000000000475610()
fn0000000000475610_entry:
	// succ:  l0000000000475610
l0000000000475610:
	sp = fp
	x3 = x0
	branch x2 == 0x0000000000000000 l0000000000475628
	// succ:  l0000000000475618 l0000000000475628
l0000000000475618:
	NZCV = cond(w1 - w31)
	w0 = 0x00000002
l0000000000475628:
	NZCV = cond(w1 - w31)
	w1 = (word32) Test(GT,NZV)
	branch w1 != 0x00000000 l0000000000475668
	// succ:  l0000000000475634 l0000000000475668
l0000000000475634:
	x0 = 0x00000000004E1000
	x0 = x0 + 0x0000000000000740
	w0 = Mem0[x0:word32]
l0000000000475664:
	return
	// succ:  fn0000000000475610_exit
l0000000000475668:
	w0 = 0x00000000
	branch x3 == 0x0000000000000000 l0000000000475664
	// succ:  l0000000000475670 l0000000000475664
l0000000000475670:
	x0 = 0x00000000004E1000
	x0 = x0 + 0x0000000000000740
	w0 = Mem0[x0:word32]
fn0000000000475610_exit:


// fn00000000004756AC
// Return size: 0
void fn00000000004756AC()
fn00000000004756AC_entry:
	// succ:  l00000000004756AC
l00000000004756AC:
	sp = fp
	sp = sp + -32
	Mem0[sp:word64] = x29
	sp = sp + 8
	Mem0[sp:word64] = x30
	x29 = x31 + 0x0000000000000000
	Mem0[sp + 16:word64] = x19
	x19 = x1
	branch w0 == 0x00000000 l00000000004756E8
	// succ:  l00000000004756C0 l00000000004756E8
l00000000004756C0:
	x1 = 0x00000000004BF000
	x1 = x1 + 0x0000000000000240
	w2 = 0x00000005
	x0 = 0x0000000000000000
	dcgettext(x0, x1, x2)
	sp = sp + 0xFFFFFFFFFFFFFFF8
	x1 = x0
	x0 = x19
	x19 = Mem0[sp + 16:word64]
	x29 = Mem0[sp:word64]
	sp = sp + 8
	x30 = Mem0[sp:word64]
	sp = sp + 32
	// succ:  l00000000004756E4_thunk_sh_erange
l00000000004756E4_thunk_sh_erange:
	call sh_erange (retsize: 0;)
	return
	// succ:  fn00000000004756AC_exit
l00000000004756E8:
	x1 = 0x00000000004BF000
	x1 = x1 + 0x0000000000000228
	w2 = 0x00000005
	x0 = 0x0000000000000000
	dcgettext(x0, x1, x2)
	sp = sp + 0xFFFFFFFFFFFFFFF8
	x19 = Mem0[sp + 16:word64]
	x29 = Mem0[sp:word64]
	sp = sp + 8
	x30 = Mem0[sp:word64]
	sp = sp + 32
	// succ:  l0000000000475704_thunk_builtin_error
l0000000000475704_thunk_builtin_error:
	call builtin_error (retsize: 0;)
	return
	// succ:  fn00000000004756AC_exit
fn00000000004756AC_exit:


// dirs_builtin
// Return size: 0
void dirs_builtin()
dirs_builtin_entry:
	// succ:  l0000000000475708
l0000000000475708:
	sp = fp
	sp = sp + -96
	Mem0[sp:word64] = x29
	sp = sp + 8
	Mem0[sp:word64] = x30
	x29 = x31 + 0x0000000000000000
	v8 = sp + 16
	Mem0[v8:word64] = x19
	v8 = v8 + 8
	Mem0[v8:word64] = x20
	v11 = sp + 32
	Mem0[v11:word64] = x21
	v11 = v11 + 8
	Mem0[v11:word64] = x22
	v14 = sp + 48
	Mem0[v14:word64] = x23
	v14 = v14 + 8
	Mem0[v14:word64] = x24
	Mem0[x29 + 72:word32] = 0x00000000
	x19 = x0
	branch x0 == 0x0000000000000000 l0000000000475894
	// succ:  l0000000000475728 l0000000000475894
l0000000000475728:
	w21 = 0x00000000
	w0 = 0xFFFFFFFF
	x20 = 0x00000000004AC000
	x20 = x20 + 0x0000000000000460
	w22 = w21
	w23 = w0
	goto l0000000000475788
	// succ:  l0000000000475788
l0000000000475744:
	w31 = w3 - 0x0000002B
	NZCV = cond(w31)
	branch Test(NE,Z) l0000000000475848
	// succ:  l000000000047574C l0000000000475848
l000000000047574C:
	x20 = x2 + 0x0000000000000001
	x0 = x20
	x1 = x29 + 0x0000000000000040
	call legal_number (retsize: 0;)
	branch w0 == 0x00000000 l000000000047586C
	// succ:  l0000000000475760 l000000000047586C
l0000000000475760:
	x1 = Mem0[x19 + 8:word64]
	x0 = Mem0[x29 + 64:word64]
	x1 = Mem0[x1:word64]
	x2 = x29 + 0x0000000000000048
	v42 = Mem0[x1:byte]
	w1 = (word32) v42
	w31 = w1 - 0x0000002B
	NZCV = cond(w31)
l0000000000475780:
	x19 = Mem0[x19:word64]
	branch x19 == 0x0000000000000000 l00000000004757D0
	// succ:  l0000000000475788 l00000000004757D0
l0000000000475788:
	x2 = Mem0[x19 + 8:word64]
	x2 = Mem0[x2:word64]
	v25 = Mem0[x2:byte]
	w3 = (word32) v25
	w31 = w3 - 0x0000002D
	NZCV = cond(w31)
	branch Test(NE,Z) l0000000000475744
	// succ:  l000000000047579C l0000000000475744
l000000000047579C:
	v30 = Mem0[x2 + 2:byte]
	w1 = (word32) v30
	branch w1 != 0x00000000 l000000000047574C
	// succ:  l00000000004757A4 l000000000047574C
l00000000004757A4:
	v31 = Mem0[x2 + 1:byte]
	w1 = (word32) v31
	w31 = w1 - 0x0000006C
	NZCV = cond(w31)
	branch Test(EQ,Z) l0000000000475828
	// succ:  l00000000004757B0 l0000000000475828
l00000000004757B0:
	w31 = w1 - 0x00000063
	NZCV = cond(w31)
	branch Test(EQ,Z) l0000000000475830
	// succ:  l00000000004757B8 l0000000000475830
l00000000004757B8:
	w31 = w1 - 0x00000076
	NZCV = cond(w31)
	branch Test(EQ,Z) l0000000000475838
	// succ:  l00000000004757C0 l0000000000475838
l00000000004757C0:
	w31 = w1 - 0x00000070
	NZCV = cond(w31)
	branch Test(EQ,Z) l0000000000475840
	// succ:  l00000000004757C8 l0000000000475840
l00000000004757C8:
	w31 = w1 - 0x0000002D
	NZCV = cond(w31)
	branch Test(NE,Z) l000000000047574C
	// succ:  l00000000004757D0 l000000000047574C
l00000000004757D0:
	branch (w22 & 0x00000008) == 0x00000000 l0000000000475998
	// succ:  l00000000004757D4 l0000000000475998
l00000000004757D4:
	w1 = Mem0[x29 + 72:word32]
	branch w1 == 0x00000000 l000000000047589C
	// succ:  l00000000004757DC l000000000047589C
l00000000004757DC:
	branch (w0 & 0x00000000) == 0x00000000 l0000000000475B28
	// succ:  l00000000004757E0 l0000000000475B28
l00000000004757E0:
	x23 = 0x00000000004E1000
	x2 = x23 + 0x0000000000000740
	w2 = Mem0[x2:word32]
	NZCV = cond(w2 - w0)
	branch Test(LT,NV) l0000000000475A40
	// succ:  l00000000004757F4 l0000000000475A40
l00000000004757F4:
	w31 = w1 - 0x00000001
	NZCV = cond(w31)
	branch Test(EQ,Z) l0000000000475990
	// succ:  l00000000004757FC l0000000000475990
l00000000004757FC:
	branch (w21 & 0x00000002) == 0x00000000 l00000000004759F4
	// succ:  l0000000000475800 l00000000004759F4
l0000000000475800:
	w2 = w2 - w0
	x23 = x23 + 0x0000000000000740
	branch (w22 & 0x00000004) == 0x00000000 l0000000000475A78
	// succ:  l000000000047580C l0000000000475A78
l000000000047580C:
	x1 = Mem0[x23 + 8:word64]
	x3 = Mem0[x1 + (int64) ((int32) w0):word64]
	// succ:  l0000000000475814
l0000000000475814:
	x1 = 0x00000000004BF000
	x1 = x1 + 0x00000000000002A8
	w0 = 0x00000001
	__printf_chk(x0, x1, Mem0[sp:<unknown>])
	sp = sp + 0xFFFFFFFFFFFFFFF8
	goto l0000000000475A14
	// succ:  l0000000000475A14
l0000000000475828:
	w22 = w22 | 0x00000004
	goto l0000000000475780
	// succ:  l0000000000475780
l0000000000475830:
	w22 = w22 | 0x00000008
	goto l0000000000475780
	// succ:  l0000000000475780
l0000000000475838:
	w21 = w21 | 0x00000002
	goto l0000000000475780
	// succ:  l0000000000475780
l0000000000475840:
	w21 = w21 | 0x00000001
	goto l0000000000475780
	// succ:  l0000000000475780
l0000000000475848:
	x0 = x2
	call sh_invalidopt (retsize: 0;)
	call builtin_usage (retsize: 0;)
	w0 = 0x00000001
	// succ:  l0000000000475858
l0000000000475858:
	v37 = sp + 16
	x19 = Mem0[v37:word64]
	v37 = v37 + 8
	x20 = Mem0[v37:word64]
	v38 = sp + 32
	x21 = Mem0[v38:word64]
	v38 = v38 + 8
	x22 = Mem0[v38:word64]
	v39 = sp + 48
	x23 = Mem0[v39:word64]
	v39 = v39 + 8
	x24 = Mem0[v39:word64]
	x29 = Mem0[sp:word64]
	sp = sp + 8
	x30 = Mem0[sp:word64]
	sp = sp + 96
	return
	// succ:  dirs_builtin_exit
l000000000047586C:
	x0 = Mem0[x19 + 8:word64]
	x0 = Mem0[x0:word64]
	call sh_invalidnum (retsize: 0;)
	call builtin_usage (retsize: 0;)
	w0 = 0x00000001
	v43 = sp + 16
	x19 = Mem0[v43:word64]
	v43 = v43 + 8
	x20 = Mem0[v43:word64]
	v44 = sp + 32
	x21 = Mem0[v44:word64]
	v44 = v44 + 8
	x22 = Mem0[v44:word64]
	v45 = sp + 48
	x23 = Mem0[v45:word64]
	v45 = v45 + 8
	x24 = Mem0[v45:word64]
	x29 = Mem0[sp:word64]
	sp = sp + 8
	x30 = Mem0[sp:word64]
	sp = sp + 96
	return
	// succ:  dirs_builtin_exit
l0000000000475894:
	w22 = w0
	w21 = w0
	// succ:  l000000000047589C
l000000000047589C:
	x0 = 0x00000000004BD000
	x0 = x0 + 0xFFFFFFFFFFFFFD48
	call get_working_directory (retsize: 0;)
	x20 = x0
	x24 = 0x00000000004BF000
	branch x0 == 0x0000000000000000 l0000000000475AA4
	// succ:  l00000000004758B4 l0000000000475AA4
l00000000004758B4:
	branch (w21 & 0x00000002) == 0x00000000 l0000000000475A54
	// succ:  l00000000004758B8 l0000000000475A54
l00000000004758B8:
	x2 = x20
	w19 = w22 & 0x00000004
	branch (w22 & 0x00000004) == 0x00000000 l0000000000475B38
	// succ:  l00000000004758C4 l0000000000475B38
l00000000004758C4:
	x1 = 0x00000000004BF000
	w0 = 0x00000001
	x1 = x1 + 0x0000000000000050
	__printf_chk(x0, x1, Mem0[sp:<unknown>])
	sp = sp + 0xFFFFFFFFFFFFFFF8
	// succ:  l00000000004758D4
l00000000004758D4:
	x0 = x20
	x1 = x24 + 0x0000000000000258
	w2 = 0x000001D3
	call sh_xfree (retsize: 0;)
	w0 = Mem0[x29 + 72:word32]
	branch w0 != 0x00000000 l0000000000475A14
	// succ:  l00000000004758EC l0000000000475A14
l00000000004758EC:
	x23 = 0x00000000004E1000
	x0 = x23 + 0x0000000000000740
	w0 = Mem0[x0:word32]
	w0 = w0 - 0x00000001
l0000000000475990:
	branch w0 != 0x00000000 l00000000004757FC
	// succ:  l0000000000475994 l00000000004757FC
l0000000000475994:
	goto l000000000047589C
	// succ:  l000000000047589C
l0000000000475998:
	x23 = 0x00000000004E1000
	x21 = x23 + 0x0000000000000740
	w0 = Mem0[x21:word32]
	NZCV = cond(w0 - w31)
	branch Test(LE,ZCV) l00000000004759E4
	// succ:  l00000000004759AC l00000000004759E4
l00000000004759AC:
	x19 = 0x0000000000000000
	x24 = 0x00000000004BF000
	w20 = w19
	x22 = x24 + 0x0000000000000258
	// succ:  l00000000004759BC
l00000000004759BC:
	x0 = Mem0[x21 + 8:word64]
	x1 = x22
	x0 = Mem0[x0 + x19:word64]
	w2 = 0x00000205
	call sh_xfree (retsize: 0;)
	w0 = Mem0[x21:word32]
	w20 = w20 + 0x00000001
	NZCV = cond(w20 - w0)
	x19 = x19 + 0x0000000000000008
	branch Test(LT,NV) l00000000004759BC
	// succ:  l00000000004759E4 l00000000004759BC
l00000000004759E4:
	x23 = x23 + 0x0000000000000740
	Mem0[x23:word32] = 0x00000000
	w0 = 0x00000000
	goto l0000000000475858
	// succ:  l0000000000475858
l00000000004759F4:
	x23 = x23 + 0x0000000000000740
	x1 = Mem0[x23 + 8:word64]
	branch (w22 & 0x00000004) == 0x00000000 l0000000000475A94
	// succ:  l0000000000475A00 l0000000000475A94
l0000000000475A00:
	x2 = Mem0[x1 + (int64) ((int32) w0):word64]
	// succ:  l0000000000475A04
l0000000000475A04:
	x1 = 0x00000000004BF000
	x1 = x1 + 0x0000000000000050
	w0 = 0x00000001
	__printf_chk(x0, x1, Mem0[sp:<unknown>])
	sp = sp + 0xFFFFFFFFFFFFFFF8
	// succ:  l0000000000475A14
l0000000000475A14:
	x0 = 0x00000000004DE000
	x1 = Mem0[x0 + 1648:word64]
	w0 = 0x0000000A
	_IO_putc(x0, x1)
	sp = sp + 0xFFFFFFFFFFFFFFF8
	w0 = 0x00000000
	call sh_chkwrite (retsize: 0;)
	v34 = sp + 16
	x19 = Mem0[v34:word64]
	v34 = v34 + 8
	x20 = Mem0[v34:word64]
	v35 = sp + 32
	x21 = Mem0[v35:word64]
	v35 = v35 + 8
	x22 = Mem0[v35:word64]
	v36 = sp + 48
	x23 = Mem0[v36:word64]
	v36 = v36 + 8
	x24 = Mem0[v36:word64]
	x29 = Mem0[sp:word64]
	sp = sp + 8
	x30 = Mem0[sp:word64]
	sp = sp + 96
	return
	// succ:  dirs_builtin_exit
l0000000000475A40:
	w0 = w2
	// succ:  l0000000000475A44
l0000000000475A44:
	x1 = x20
	call fn00000000004756AC (retsize: 0;)
	w0 = 0x00000001
	goto l0000000000475858
	// succ:  l0000000000475858
l0000000000475A54:
	x3 = x20
	w19 = w22 & 0x00000004
	branch (w22 & 0x00000004) == 0x00000000 l0000000000475B48
	// succ:  l0000000000475A60 l0000000000475B48
l0000000000475A60:
	x1 = 0x00000000004BF000
	x1 = x1 + 0x00000000000002A8
	w2 = 0x00000000
	w0 = 0x00000001
	__printf_chk(x0, x1, Mem0[sp:<unknown>])
	sp = sp + 0xFFFFFFFFFFFFFFF8
	goto l00000000004758D4
	// succ:  l00000000004758D4
l0000000000475A78:
	x1 = Mem0[x23 + 8:word64]
	x0 = Mem0[x1 + (int64) ((int32) w0):word64]
	Mem0[x29 + 80:word64] = x2
	call polite_directory_format (retsize: 0;)
	x3 = x0
	x2 = Mem0[x29 + 80:word64]
	goto l0000000000475814
	// succ:  l0000000000475814
l0000000000475A94:
	x0 = Mem0[x1 + (int64) ((int32) w0):word64]
	call polite_directory_format (retsize: 0;)
	x2 = x0
	goto l0000000000475A04
	// succ:  l0000000000475A04
l0000000000475AA4:
	x19 = 0x00000000004BF000
	x19 = x19 + 0x0000000000000290
	x1 = x19
	w2 = 0x00000005
	dcgettext(x0, x1, x2)
	sp = sp + 0xFFFFFFFFFFFFFFF8
	strlen(x0)
	sp = sp + 0xFFFFFFFFFFFFFFF8
	w2 = 0x000001CE
	x1 = x24 + 0x0000000000000258
	x0 = x0 + 0x0000000000000001
	call sh_xmalloc (retsize: 0;)
	x23 = x0
	x1 = x19
	x0 = x20
	w2 = 0x00000005
	dcgettext(x0, x1, x2)
	sp = sp + 0xFFFFFFFFFFFFFFF8
	x1 = x0
	x0 = x23
	strcpy(x0, x1)
	sp = sp + 0xFFFFFFFFFFFFFFF8
	x20 = x0
	branch (w21 & 0x00000002) == 0x00000000 l00000000004758B8
	// succ:  l0000000000475AF4 l00000000004758B8
l0000000000475AF4:
	goto l0000000000475A54
	// succ:  l0000000000475A54
l0000000000475B28:
	x0 = 0x00000000004E1000
	x0 = x0 + 0x0000000000000740
	w0 = Mem0[x0:word32]
	goto l0000000000475A44
	// succ:  l0000000000475A44
l0000000000475B38:
	x0 = x20
	call polite_directory_format (retsize: 0;)
	x2 = x0
	goto l00000000004758C4
	// succ:  l00000000004758C4
l0000000000475B48:
	x0 = x20
	call polite_directory_format (retsize: 0;)
	x3 = x0
	goto l0000000000475A60
	// succ:  l0000000000475A60
dirs_builtin_exit:


// fn0000000000475B58
// Return size: 0
void fn0000000000475B58()
fn0000000000475B58_entry:
	// succ:  l0000000000475B58
l0000000000475B58:
	sp = fp
	sp = sp + -32
	Mem0[sp:word64] = x29
	sp = sp + 8
	Mem0[sp:word64] = x30
	x29 = x31 + 0x0000000000000000
	Mem0[sp + 16:word64] = x19
	branch x0 == 0x0000000000000000 l0000000000475B8C
	// succ:  l0000000000475B68 l0000000000475B8C
l0000000000475B68:
	call fn00000000004755B8 (retsize: 0;)
	w19 = w0
	branch w0 != 0x00000000 l0000000000475B7C
	// succ:  l0000000000475B74 l0000000000475B7C
l0000000000475B74:
	x0 = 0x0000000000000000
	call dirs_builtin (retsize: 0;)
	// succ:  l0000000000475B7C
l0000000000475B7C:
	w0 = w19
	x19 = Mem0[sp + 16:word64]
	x29 = Mem0[sp:word64]
	sp = sp + 8
	x30 = Mem0[sp:word64]
	sp = sp + 32
	return
	// succ:  fn0000000000475B58_exit
l0000000000475B8C:
	w19 = 0x00000001
	w0 = w19
	x19 = Mem0[sp + 16:word64]
	x29 = Mem0[sp:word64]
	sp = sp + 8
	x30 = Mem0[sp:word64]
	sp = sp + 32
	return
	// succ:  fn0000000000475B58_exit
fn0000000000475B58_exit:


// pushd_builtin
// Return size: 0
void pushd_builtin()
pushd_builtin_entry:
	// succ:  l0000000000475BA0
l0000000000475BA0:
	sp = fp
	sp = sp + -80
	Mem0[sp:word64] = x29
	sp = sp + 8
	Mem0[sp:word64] = x30
	x29 = x31 + 0x0000000000000000
	v8 = sp + 32
	Mem0[v8:word64] = x21
	v8 = v8 + 8
	Mem0[v8:word64] = x22
	v11 = sp + 16
	Mem0[v11:word64] = x19
	v11 = v11 + 8
	Mem0[v11:word64] = x20
	v14 = sp + 48
	Mem0[v14:word64] = x23
	v14 = v14 + 8
	Mem0[v14:word64] = x24
	x21 = x0
	branch x0 == 0x0000000000000000 l0000000000475D20
	// succ:  l0000000000475BBC l0000000000475D20
l0000000000475BBC:
	x0 = Mem0[x0 + 8:word64]
	x2 = Mem0[x0:word64]
	v18 = Mem0[x2:byte]
	w1 = (word32) v18
	branch x0 == 0x0000000000000000 l0000000000475BD4
	// succ:  l0000000000475BCC l0000000000475BD4
l0000000000475BCC:
	w31 = w1 - 0x0000002D
	NZCV = cond(w31)
	branch Test(EQ,Z) l0000000000475D00
	// succ:  l0000000000475BD4 l0000000000475D00
l0000000000475BD4:
	x22 = 0x00000000004E1000
	x19 = x21
	w20 = 0x00000000
	x22 = x22 + 0x0000000000000740
	// succ:  l0000000000475BE4
l0000000000475BE4:
	w31 = w1 - 0x0000002D
	NZCV = cond(w31)
	branch Test(EQ,Z) l0000000000475C5C
	// succ:  l0000000000475BEC l0000000000475C5C
l0000000000475BEC:
	w31 = w1 - 0x0000002B
	NZCV = cond(w31)
	branch Test(EQ,Z) l0000000000475F64
	// succ:  l0000000000475BF4 l0000000000475F64
l0000000000475BF4:
	w0 = w20 & 0x00000002
	branch (w20 & 0x00000002) == 0x00000000 l0000000000475D84
	// succ:  l0000000000475BFC l0000000000475D84
l0000000000475BFC:
	w23 = w0
	branch x19 == 0x0000000000000000 l0000000000475E3C
	// succ:  l0000000000475C04 l0000000000475E3C
l0000000000475C04:
	x0 = 0x00000000004BD000
	x0 = x0 + 0xFFFFFFFFFFFFFD00
	call get_working_directory (retsize: 0;)
	x22 = x0
	branch x0 == 0x0000000000000000 l0000000000475C44
	// succ:  l0000000000475C18 l0000000000475C44
l0000000000475C18:
	w24 = w20 & 0x00000001
	branch (w20 & 0x00000001) == 0x00000000 l0000000000475DC0
	// succ:  l0000000000475C20 l0000000000475DC0
l0000000000475C20:
	NZCV = cond(w23 - w31)
l0000000000475C44:
	w0 = 0x00000001
	v32 = sp + 16
	x19 = Mem0[v32:word64]
	v32 = v32 + 8
	x20 = Mem0[v32:word64]
	v33 = sp + 32
	x21 = Mem0[v33:word64]
	v33 = v33 + 8
	x22 = Mem0[v33:word64]
	v34 = sp + 48
	x23 = Mem0[v34:word64]
	v34 = v34 + 8
	x24 = Mem0[v34:word64]
	x29 = Mem0[sp:word64]
	sp = sp + 8
	x30 = Mem0[sp:word64]
	sp = sp + 80
	return
	// succ:  pushd_builtin_exit
l0000000000475C5C:
	v41 = Mem0[x2 + 2:byte]
	w1 = (word32) v41
	branch w1 != 0x00000000 l0000000000475CCC
	// succ:  l0000000000475C64 l0000000000475CCC
l0000000000475C64:
	v42 = Mem0[x2 + 1:byte]
	w1 = (word32) v42
	w31 = w1 - 0x0000006E
	NZCV = cond(w31)
	branch Test(EQ,Z) l0000000000475CD4
	// succ:  l0000000000475C70 l0000000000475CD4
l0000000000475C70:
	w31 = w1 - 0x0000002D
	NZCV = cond(w31)
	branch Test(EQ,Z) l0000000000475F30
	// succ:  l0000000000475C78 l0000000000475F30
l0000000000475C78:
	branch w1 == 0x00000000 l0000000000475BF4
	// succ:  l0000000000475C7C l0000000000475BF4
l0000000000475C7C:
	x0 = x2 + 0x0000000000000001
	x1 = x29 + 0x0000000000000040
	call legal_number (retsize: 0;)
	branch w0 == 0x00000000 l0000000000475F84
	// succ:  l0000000000475C8C l0000000000475F84
l0000000000475C8C:
	w3 = Mem0[x22:word32]
	x1 = Mem0[x29 + 64:word64]
l0000000000475CB4:
	x19 = Mem0[x19:word64]
	branch x19 == 0x0000000000000000 l0000000000475BF4
	// succ:  l0000000000475CBC l0000000000475BF4
l0000000000475CBC:
	x1 = Mem0[x19 + 8:word64]
	x2 = Mem0[x1:word64]
	v49 = Mem0[x2:byte]
	w1 = (word32) v49
	goto l0000000000475BE4
	// succ:  l0000000000475BE4
l0000000000475CCC:
	v44 = Mem0[x2 + 1:byte]
	w1 = (word32) v44
	goto l0000000000475C78
	// succ:  l0000000000475C78
l0000000000475CD4:
	w20 = w20 | 0x00000001
	goto l0000000000475CB4
	// succ:  l0000000000475CB4
l0000000000475CEC:
	v29 = sp + 16
	x19 = Mem0[v29:word64]
	v29 = v29 + 8
	x20 = Mem0[v29:word64]
	v30 = sp + 32
	x21 = Mem0[v30:word64]
	v30 = v30 + 8
	x22 = Mem0[v30:word64]
	v31 = sp + 48
	x23 = Mem0[v31:word64]
	v31 = v31 + 8
	x24 = Mem0[v31:word64]
	x29 = Mem0[sp:word64]
	sp = sp + 8
	x30 = Mem0[sp:word64]
	sp = sp + 80
	return
	// succ:  pushd_builtin_exit
l0000000000475D00:
	v47 = Mem0[x2 + 2:byte]
	w20 = (word32) v47
	branch w20 != 0x00000000 l0000000000475BD4
	// succ:  l0000000000475D08 l0000000000475BD4
l0000000000475D08:
	v48 = Mem0[x2 + 1:byte]
	w0 = (word32) v48
	w31 = w0 - 0x0000002D
	NZCV = cond(w31)
	branch Test(NE,Z) l0000000000475BD4
	// succ:  l0000000000475D14 l0000000000475BD4
l0000000000475D14:
	x19 = Mem0[x21:word64]
	w23 = 0x00000001
	branch x19 != 0x0000000000000000 l0000000000475C04
	// succ:  l0000000000475D20 l0000000000475C04
l0000000000475D20:
	x19 = 0x00000000004E1000
	x19 = x19 + 0x0000000000000740
	w0 = Mem0[x19:word32]
	branch w0 == 0x00000000 l0000000000475E54
	// succ:  l0000000000475D30 l0000000000475E54
l0000000000475D30:
	x0 = 0x00000000004BD000
	x0 = x0 + 0xFFFFFFFFFFFFFD00
	call get_working_directory (retsize: 0;)
	x1 = x0
	branch x0 == 0x0000000000000000 l0000000000475C44
	// succ:  l0000000000475D44 l0000000000475C44
l0000000000475D44:
	w0 = Mem0[x19:word32]
	x2 = Mem0[x19 + 8:word64]
	w0 = w0 - 0x00000001
l0000000000475D84:
	x0 = 0x00000000004BD000
	x0 = x0 + 0xFFFFFFFFFFFFFD00
	call get_working_directory (retsize: 0;)
	x4 = Mem0[x29 + 64:word64]
	x19 = x0
	branch x4 != 0x0000000000000000 l0000000000475E74
	// succ:  l0000000000475D9C l0000000000475E74
l0000000000475D9C:
	w21 = w4
	branch (w20 & 0x00000001) == 0x00000000 l0000000000475F14
	// succ:  l0000000000475DA4 l0000000000475F14
l0000000000475DA4:
	x1 = 0x00000000004BF000
	x0 = x19
	x1 = x1 + 0x0000000000000258
	w2 = 0x00000107
	call sh_xfree (retsize: 0;)
	w0 = w21
	goto l0000000000475CEC
	// succ:  l0000000000475CEC
l0000000000475DC0:
	x0 = Mem0[x19 + 8:word64]
	x0 = Mem0[x0:word64]
	strlen(x0)
	sp = sp + 0xFFFFFFFFFFFFFFF8
	x1 = 0x00000000004BF000
	x1 = x1 + 0x0000000000000258
	w2 = 0x0000012A
	x0 = x0 + 0x0000000000000001
	call sh_xmalloc (retsize: 0;)
	x1 = Mem0[x19 + 8:word64]
	x1 = Mem0[x1:word64]
	strcpy(x0, x1)
	sp = sp + 0xFFFFFFFFFFFFFFF8
	x21 = x0
	x20 = 0x00000000004E1000
	x19 = x20 + 0x0000000000000740
	w1 = Mem0[x19:word32]
	w2 = Mem0[x19 + 16:word32]
	NZCV = cond(w1 - w2)
	branch Test(EQ,Z) l0000000000475F40
	// succ:  l0000000000475E08 l0000000000475F40
l0000000000475E08:
	x3 = Mem0[x19 + 8:word64]
	// succ:  l0000000000475E0C
l0000000000475E0C:
	x20 = x20 + 0x0000000000000740
	w2 = w1 + 0x00000001
	Mem0[x3 + (int64) ((int32) w1):word64] = x21
	x0 = 0x0000000000000000
	Mem0[x20:word32] = w2
	call dirs_builtin (retsize: 0;)
	branch w24 == 0x00000000 l0000000000475E3C
	// succ:  l0000000000475E28 l0000000000475E3C
l0000000000475E28:
	x1 = 0x00000000004BF000
	x0 = x22
	x1 = x1 + 0x0000000000000258
	w2 = 0x0000012D
	call sh_xfree (retsize: 0;)
	// succ:  l0000000000475E3C
l0000000000475E3C:
	w0 = 0x00000000
	v35 = sp + 16
	x19 = Mem0[v35:word64]
	v35 = v35 + 8
	x20 = Mem0[v35:word64]
	v36 = sp + 32
	x21 = Mem0[v36:word64]
	v36 = v36 + 8
	x22 = Mem0[v36:word64]
	v37 = sp + 48
	x23 = Mem0[v37:word64]
	v37 = v37 + 8
	x24 = Mem0[v37:word64]
	x29 = Mem0[sp:word64]
	sp = sp + 8
	x30 = Mem0[sp:word64]
	sp = sp + 80
	return
	// succ:  pushd_builtin_exit
l0000000000475E54:
	x1 = 0x00000000004BF000
	x1 = x1 + 0x00000000000002C0
	w2 = 0x00000005
	x0 = 0x0000000000000000
	dcgettext(x0, x1, x2)
	sp = sp + 0xFFFFFFFFFFFFFFF8
	call builtin_error (retsize: 0;)
	w0 = 0x00000001
	goto l0000000000475CEC
	// succ:  l0000000000475CEC
l0000000000475E74:
	x0 = 0x00000000004E1000
	x0 = x0 + 0x0000000000000740
	w1 = Mem0[x0:word32]
	x7 = 0xFFFFFFFFFFFFFFF8
	w5 = w1 - 0x00000002
	NZCV = cond(w5 - w31)
l0000000000475F14:
	call fn0000000000475B58 (retsize: 0;)
	w21 = w0
	goto l0000000000475DA4
	// succ:  l0000000000475DA4
l0000000000475F30:
	x19 = Mem0[x19:word64]
	goto l0000000000475BF4
	// succ:  l0000000000475BF4
l0000000000475F40:
	w2 = w1 + 0x0000000A
	x0 = Mem0[x19 + 8:word64]
	w1 = w2
	Mem0[x19 + 16:word32] = w2
	call strvec_resize (retsize: 0;)
	w1 = Mem0[x19:word32]
	Mem0[x19 + 8:word64] = x0
	x3 = x0
	goto l0000000000475E0C
	// succ:  l0000000000475E0C
l0000000000475F64:
	x0 = x2 + 0x0000000000000001
	x1 = x29 + 0x0000000000000040
	call legal_number (retsize: 0;)
	branch w0 == 0x00000000 l0000000000475F84
	// succ:  l0000000000475F74 l0000000000475F84
l0000000000475F74:
	w0 = Mem0[x22:word32]
	x1 = Mem0[x29 + 64:word64]
l0000000000475F84:
	x0 = Mem0[x19 + 8:word64]
	x0 = Mem0[x0:word64]
	call sh_invalidnum (retsize: 0;)
	call builtin_usage (retsize: 0;)
	w0 = 0x00000001
	goto l0000000000475CEC
	// succ:  l0000000000475CEC
pushd_builtin_exit:


// popd_builtin
// Return size: 0
void popd_builtin()
popd_builtin_entry:
	// succ:  l0000000000475F9C
l0000000000475F9C:
	sp = fp
	sp = sp + -64
	Mem0[sp:word64] = x29
	sp = sp + 8
	Mem0[sp:word64] = x30
	x29 = x31 + 0x0000000000000000
	v8 = sp + 16
	Mem0[v8:word64] = x19
	v8 = v8 + 8
	Mem0[v8:word64] = x20
	v11 = sp + 32
	Mem0[v11:word64] = x21
	v11 = v11 + 8
	Mem0[v11:word64] = x22
	Mem0[x29 + 48:word64] = 0x0000000000000000
	x19 = x0
	branch x0 == 0x0000000000000000 l00000000004761C0
	// succ:  l0000000000475FB8 l00000000004761C0
l0000000000475FB8:
	x1 = 0x0000000000000000
	w2 = 0x0000002B
	w21 = w1
	// succ:  l0000000000475FC4
l0000000000475FC4:
	x0 = Mem0[x19 + 8:word64]
	x0 = Mem0[x0:word64]
	v18 = Mem0[x0:byte]
	w20 = (word32) v18
	w31 = w20 - 0x0000002D
	NZCV = cond(w31)
	branch Test(EQ,Z) l0000000000476018
	// succ:  l0000000000475FD8 l0000000000476018
l0000000000475FD8:
	w31 = w20 - 0x0000002B
	NZCV = cond(w31)
	branch Test(EQ,Z) l0000000000476034
	// succ:  l0000000000475FE0 l0000000000476034
l0000000000475FE0:
	x19 = Mem0[x29 + 48:word64]
	// succ:  l0000000000475FE4
l0000000000475FE4:
	x22 = 0x00000000004E1000
	x0 = x22 + 0x0000000000000740
	w0 = Mem0[x0:word32]
l0000000000476018:
	v24 = Mem0[x0 + 2:byte]
	w3 = (word32) v24
	branch w3 != 0x00000000 l0000000000476034
	// succ:  l0000000000476020 l0000000000476034
l0000000000476020:
	v25 = Mem0[x0 + 1:byte]
	w3 = (word32) v25
	w31 = w3 - 0x0000006E
	NZCV = cond(w31)
	branch Test(EQ,Z) l0000000000476118
	// succ:  l000000000047602C l0000000000476118
l000000000047602C:
	w31 = w3 - 0x0000002D
	NZCV = cond(w31)
	branch Test(EQ,Z) l0000000000476058
	// succ:  l0000000000476034 l0000000000476058
l0000000000476034:
	x0 = x0 + 0x0000000000000001
	x1 = x29 + 0x0000000000000030
	call legal_number (retsize: 0;)
	branch w0 == 0x00000000 l0000000000476158
	// succ:  l0000000000476044 l0000000000476158
l0000000000476044:
	x0 = Mem0[x19 + 8:word64]
	w2 = w20
	x1 = Mem0[x0:word64]
	// succ:  l0000000000476050
l0000000000476050:
	x19 = Mem0[x19:word64]
	branch x19 != 0x0000000000000000 l0000000000475FC4
	// succ:  l0000000000476058 l0000000000475FC4
l0000000000476058:
	x22 = 0x00000000004E1000
	x0 = x22 + 0x0000000000000740
	w0 = Mem0[x0:word32]
	x19 = Mem0[x29 + 48:word64]
	w20 = w2
l0000000000476118:
	w21 = 0x00000001
	goto l0000000000476050
	// succ:  l0000000000476050
l0000000000476158:
	x0 = Mem0[x19 + 8:word64]
	x0 = Mem0[x0:word64]
	call sh_invalidnum (retsize: 0;)
	call builtin_usage (retsize: 0;)
	w0 = 0x00000001
	v26 = sp + 16
	x19 = Mem0[v26:word64]
	v26 = v26 + 8
	x20 = Mem0[v26:word64]
	v27 = sp + 32
	x21 = Mem0[v27:word64]
	v27 = v27 + 8
	x22 = Mem0[v27:word64]
	x29 = Mem0[sp:word64]
	sp = sp + 8
	x30 = Mem0[sp:word64]
	sp = sp + 64
	return
	// succ:  popd_builtin_exit
l00000000004761C0:
	x1 = x0
	w21 = w0
	w20 = 0x0000002B
	goto l0000000000475FE4
	// succ:  l0000000000475FE4
popd_builtin_exit:


// get_dirstack_from_string
// Return size: 0
void get_dirstack_from_string()
get_dirstack_from_string_entry:
	// succ:  l00000000004761D0
l00000000004761D0:
	sp = fp
	sp = sp + -48
	Mem0[sp:word64] = x29
	sp = sp + 8
	Mem0[sp:word64] = x30
	x29 = x31 + 0x0000000000000000
	Mem0[sp + 16:word64] = x19
	v9 = Mem0[x0:byte]
	w1 = (word32) v9
	w19 = 0x00000001
	w31 = w1 - 0x0000002D
	NZCV = cond(w31)
	w2 = (word32) Test(EQ,Z)
	w31 = w1 - 0x0000002B
	NZCV = cond(w31)
	branch Test(NE,Z) l000000000047625C
	// succ:  l00000000004761F4 l000000000047625C
l00000000004761F4:
	branch w2 != 0x00000000 l0000000000476260
	// succ:  l00000000004761F8 l0000000000476260
l00000000004761F8:
	x0 = x0 + 0x0000000000000001
	// succ:  l00000000004761FC
l00000000004761FC:
	x1 = x29 + 0x0000000000000020
	call legal_number (retsize: 0;)
	branch w0 == 0x00000000 l0000000000476284
	// succ:  l0000000000476208 l0000000000476284
l0000000000476208:
	x2 = x29 + 0x0000000000000020
	x0 = Mem0[x2:word64]
	x2 = x2 + 8
	w1 = w19
	Mem0[x29 + 40:word32] = 0x00000000
	call fn0000000000475610 (retsize: 0;)
	w1 = Mem0[x29 + 40:word32]
	branch w1 == 0x00000000 l000000000047626C
	// succ:  l0000000000476224 l000000000047626C
l0000000000476224:
	branch (w0 & 0x00000000) == 0x00000000 l0000000000476284
	// succ:  l0000000000476228 l0000000000476284
l0000000000476228:
	x2 = 0x00000000004E1000
	x3 = x2 + 0x0000000000000740
	w3 = Mem0[x3:word32]
	NZCV = cond(w0 - w3)
	branch Test(GT,NZV) l0000000000476284
	// succ:  l000000000047623C l0000000000476284
l000000000047623C:
	w31 = w1 - 0x00000001
	NZCV = cond(w31)
	branch Test(EQ,Z) l0000000000476268
	// succ:  l0000000000476244 l0000000000476268
l0000000000476244:
	x2 = x2 + 0x0000000000000740
	x1 = Mem0[x2 + 8:word64]
	x19 = Mem0[sp + 16:word64]
	x0 = Mem0[x1 + (int64) ((int32) w0):word64]
	x29 = Mem0[sp:word64]
	sp = sp + 8
	x30 = Mem0[sp:word64]
	sp = sp + 48
	return
	// succ:  get_dirstack_from_string_exit
l000000000047625C:
	branch w2 == 0x00000000 l00000000004761FC
	// succ:  l0000000000476260 l00000000004761FC
l0000000000476260:
	w19 = 0xFFFFFFFF
	goto l00000000004761F8
	// succ:  l00000000004761F8
l0000000000476268:
	branch w0 != 0x00000000 l0000000000476244
	// succ:  l000000000047626C l0000000000476244
l000000000047626C:
	x0 = 0x00000000004AA000
	x0 = x0 + 0x0000000000000520
	call get_string_value (retsize: 0;)
	x19 = Mem0[sp + 16:word64]
	x29 = Mem0[sp:word64]
	sp = sp + 8
	x30 = Mem0[sp:word64]
	sp = sp + 48
	return
	// succ:  get_dirstack_from_string_exit
l0000000000476284:
	x0 = 0x0000000000000000
	x19 = Mem0[sp + 16:word64]
	x29 = Mem0[sp:word64]
	sp = sp + 8
	x30 = Mem0[sp:word64]
	sp = sp + 48
	return
	// succ:  get_dirstack_from_string_exit
get_dirstack_from_string_exit:


// set_dirstack_element
// Return size: 0
void set_dirstack_element()
set_dirstack_element_entry:
	// succ:  l0000000000476294
l0000000000476294:
	sp = fp
	sp = sp + -48
	Mem0[sp:word64] = x29
	sp = sp + 8
	Mem0[sp:word64] = x30
	x29 = x31 + 0x0000000000000000
	v8 = sp + 16
	Mem0[v8:word64] = x19
	v8 = v8 + 8
	Mem0[v8:word64] = x20
	x19 = x0
	x20 = x2
	x2 = 0x0000000000000000
	v13 = sp + 32
	Mem0[v13:word64] = x21
	v13 = v13 + 8
	Mem0[v13:word64] = x22
	call fn0000000000475610 (retsize: 0;)
	branch x19 == 0x0000000000000000 l00000000004762D0
	// succ:  l00000000004762B8 l00000000004762D0
l00000000004762B8:
	branch (w0 & 0x00000000) == 0x00000000 l00000000004762D0
	// succ:  l00000000004762BC l00000000004762D0
l00000000004762BC:
	x19 = 0x00000000004E1000
	x19 = x19 + 0x0000000000000740
	w1 = Mem0[x19:word32]
	NZCV = cond(w0 - w1)
	branch Test(LE,ZCV) l00000000004762E0
	// succ:  l00000000004762D0 l00000000004762E0
l00000000004762D0:
	v18 = sp + 16
	x19 = Mem0[v18:word64]
	v18 = v18 + 8
	x20 = Mem0[v18:word64]
	v19 = sp + 32
	x21 = Mem0[v19:word64]
	v19 = v19 + 8
	x22 = Mem0[v19:word64]
	x29 = Mem0[sp:word64]
	sp = sp + 8
	x30 = Mem0[sp:word64]
	sp = sp + 48
	return
	// succ:  set_dirstack_element_exit
l00000000004762E0:
	x1 = Mem0[x19 + 8:word64]
set_dirstack_element_exit:


// get_directory_stack
// Return size: 0
void get_directory_stack()
get_directory_stack_entry:
	// succ:  l0000000000476338
l0000000000476338:
	sp = fp
	sp = sp + -64
	Mem0[sp:word64] = x29
	sp = sp + 8
	Mem0[sp:word64] = x30
	x29 = x31 + 0x0000000000000000
	v8 = sp + 32
	Mem0[v8:word64] = x21
	v8 = v8 + 8
	Mem0[v8:word64] = x22
	x22 = 0x00000000004E1000
	x22 = x22 + 0x0000000000000740
	w1 = Mem0[x22:word32]
	v12 = sp + 16
	Mem0[v12:word64] = x19
	v12 = v12 + 8
	Mem0[v12:word64] = x20
	Mem0[sp + 48:word64] = x23
	NZCV = cond(w1 - w31)
	branch Test(LE,ZCV) l000000000047646C
	// succ:  l0000000000476360 l000000000047646C
l0000000000476360:
	x19 = 0x0000000000000000
	w23 = w0 & 0x00000001
	x21 = x19
	w20 = w19
	// succ:  l0000000000476370
l0000000000476370:
	branch w23 != 0x00000000 l00000000004763F8
	// succ:  l0000000000476374 l00000000004763F8
l0000000000476374:
	x1 = Mem0[x22 + 8:word64]
	x0 = Mem0[x1 + x19:word64]
	// succ:  l000000000047637C
l000000000047637C:
	call make_word (retsize: 0;)
	x1 = x21
	call make_word_list (retsize: 0;)
	w1 = Mem0[x22:word32]
	w20 = w20 + 0x00000001
	NZCV = cond(w1 - w20)
	x21 = x0
	x19 = x19 + 0x0000000000000008
	branch Test(GT,NZV) l0000000000476370
	// succ:  l00000000004763A0 l0000000000476370
l00000000004763A0:
	x0 = 0x00000000004BF000
	x0 = x0 + 0x00000000000002D8
	call get_working_directory (retsize: 0;)
	x19 = x0
	branch x0 == 0x0000000000000000 l0000000000476444
	// succ:  l00000000004763B4 l0000000000476444
l00000000004763B4:
	call polite_directory_format (retsize: 0;)
	x31 = x0 - x19
	NZCV = cond(x31)
	x20 = x0
	branch Test(EQ,Z) l0000000000476408
	// succ:  l00000000004763C4 l0000000000476408
l00000000004763C4:
	x1 = 0x00000000004BF000
	x0 = x19
	x1 = x1 + 0x0000000000000258
	w2 = 0x0000029D
	call sh_xfree (retsize: 0;)
	x0 = x20
	call make_word (retsize: 0;)
	x1 = x21
	v26 = sp + 16
	x19 = Mem0[v26:word64]
	v26 = v26 + 8
	x20 = Mem0[v26:word64]
	v27 = sp + 32
	x21 = Mem0[v27:word64]
	v27 = v27 + 8
	x22 = Mem0[v27:word64]
	x23 = Mem0[sp + 48:word64]
	x29 = Mem0[sp:word64]
	sp = sp + 8
	x30 = Mem0[sp:word64]
	sp = sp + 64
	// succ:  l00000000004763F4_thunk_make_word_list
l00000000004763F4_thunk_make_word_list:
	call make_word_list (retsize: 0;)
	return
	// succ:  get_directory_stack_exit
l00000000004763F8:
	x0 = Mem0[x22 + 8:word64]
	x0 = Mem0[x0 + x19:word64]
	call polite_directory_format (retsize: 0;)
	goto l000000000047637C
	// succ:  l000000000047637C
l0000000000476408:
	call make_word (retsize: 0;)
	x1 = x21
	call make_word_list (retsize: 0;)
	x1 = 0x00000000004BF000
	x19 = x0
	x1 = x1 + 0x0000000000000258
	x0 = x20
	w2 = 0x000002A5
	call sh_xfree (retsize: 0;)
	x0 = x19
	v28 = sp + 32
	x21 = Mem0[v28:word64]
	v28 = v28 + 8
	x22 = Mem0[v28:word64]
	v29 = sp + 16
	x19 = Mem0[v29:word64]
	v29 = v29 + 8
	x20 = Mem0[v29:word64]
	x23 = Mem0[sp + 48:word64]
	x29 = Mem0[sp:word64]
	sp = sp + 8
	x30 = Mem0[sp:word64]
	sp = sp + 64
	return
	// succ:  get_directory_stack_exit
l0000000000476444:
	x20 = 0x00000000004B2000
	x20 = x20 + 0xFFFFFFFFFFFFFD68
	x0 = x20
	call make_word (retsize: 0;)
	x1 = x21
	v30 = sp + 16
	x19 = Mem0[v30:word64]
	v30 = v30 + 8
	x20 = Mem0[v30:word64]
	v31 = sp + 32
	x21 = Mem0[v31:word64]
	v31 = v31 + 8
	x22 = Mem0[v31:word64]
	x23 = Mem0[sp + 48:word64]
	x29 = Mem0[sp:word64]
	sp = sp + 8
	x30 = Mem0[sp:word64]
	sp = sp + 64
	// succ:  l0000000000476468_thunk_make_word_list
l0000000000476468_thunk_make_word_list:
	call make_word_list (retsize: 0;)
	return
	// succ:  get_directory_stack_exit
l000000000047646C:
	x21 = 0x0000000000000000
	goto l00000000004763A0
	// succ:  l00000000004763A0
get_directory_stack_exit:


// fn0000000000476474
// Return size: 0
void fn0000000000476474()
fn0000000000476474_entry:
	// succ:  l0000000000476474
l0000000000476474:
	sp = fp
	sp = sp + -16
	Mem0[sp:word64] = x29
	sp = sp + 8
	Mem0[sp:word64] = x30
	x29 = x31 + 0x0000000000000000
	x0 = 0x00000000004E1000
	x0 = x0 + 0x0000000000000758
	x1 = Mem0[x0:word64]
	w0 = 0x0000000E
	call set_signal_handler (retsize: 0;)
	w0 = 0x00000000
	x29 = Mem0[sp:word64]
	sp = sp + 8
	x30 = Mem0[sp:word64]
	sp = sp + 16
	w1 = w0
	// succ:  l000000000047649C_thunk_falarm
l000000000047649C_thunk_falarm:
	call falarm (retsize: 0;)
	return
	// succ:  fn0000000000476474_exit
fn0000000000476474_exit:


// fn00000000004764BC
// Return size: 0
void fn00000000004764BC()
fn00000000004764BC_entry:
	// succ:  l00000000004764BC
l00000000004764BC:
	sp = fp
	sp = sp + -16
	Mem0[sp:word64] = x29
	sp = sp + 8
	Mem0[sp:word64] = x30
	x29 = x31 + 0x0000000000000000
	call rl_get_keymap (retsize: 0;)
	x1 = 0x00000000004E1000
	x1 = x1 + 0x0000000000000758
	x4 = Mem0[x1 + 328:word64]
	w5 = Mem0[x1 + 320:word32]
	v10 = Mem0[x1 + 336:byte]
	w2 = (word32) v10
	w3 = Mem0[x1 + 340:word32]
	Mem0[x0 + 216:word64] = x4
	Mem0[x0 + 208:byte] = (byte) w5
fn00000000004764BC_exit:


// fn000000000047657C
// Return size: 0
void fn000000000047657C()
fn000000000047657C_entry:
	// succ:  l000000000047657C
l000000000047657C:
	sp = fp
	sp = sp + -48
	Mem0[sp:word64] = x29
	sp = sp + 8
	Mem0[sp:word64] = x30
	x29 = x31 + 0x0000000000000000
	Mem0[sp + 16:word64] = x19
	Mem0[x29 + 32:word64] = x1
	x19 = x0
	call valid_array_reference (retsize: 0;)
	w2 = w0
	x1 = Mem0[x29 + 32:word64]
	x0 = x19
	branch w2 != 0x00000000 l00000000004765D8
	// succ:  l00000000004765A4 l00000000004765D8
l00000000004765A4:
	call bind_variable (retsize: 0;)
	// succ:  l00000000004765A8
l00000000004765A8:
	branch x0 == 0x0000000000000000 l00000000004765C8
	// succ:  l00000000004765AC l00000000004765C8
l00000000004765AC:
	w1 = Mem0[x0 + 40:word32]
	w2 = 0x00004002
	NZ = cond(w1 & w2)
	C = false
	V = false
	branch Test(NE,Z) l00000000004765C8
	// succ:  l00000000004765BC l00000000004765C8
l00000000004765BC:
	x19 = Mem0[sp + 16:word64]
	x29 = Mem0[sp:word64]
	sp = sp + 8
	x30 = Mem0[sp:word64]
	sp = sp + 48
	return
	// succ:  fn000000000047657C_exit
l00000000004765C8:
	x0 = 0x0000000000000000
	x19 = Mem0[sp + 16:word64]
	x29 = Mem0[sp:word64]
	sp = sp + 8
	x30 = Mem0[sp:word64]
	sp = sp + 48
	return
	// succ:  fn000000000047657C_exit
l00000000004765D8:
	w2 = 0x00000000
	call assign_array_element (retsize: 0;)
	goto l00000000004765A8
	// succ:  l00000000004765A8
fn000000000047657C_exit:


// read_builtin
// Return size: 0
void read_builtin()
read_builtin_entry:
	// succ:  l000000000047660C
l000000000047660C:
	sp = fp
	x31 = x31 - 0x00000000000001F0
	sp = sp + -96
	Mem0[sp:word64] = x29
	sp = sp + 8
	Mem0[sp:word64] = x30
	x29 = x31 + 0x0000000000000000
	v8 = sp + 48
	Mem0[v8:word64] = x23
	v8 = v8 + 8
	Mem0[v8:word64] = x24
	x23 = 0x00000000004E1000
	v11 = sp + 16
	Mem0[v11:word64] = x19
	v11 = v11 + 8
	Mem0[v11:word64] = x20
	v14 = sp + 32
	Mem0[v14:word64] = x21
	v14 = v14 + 8
	Mem0[v14:word64] = x22
	v17 = sp + 64
	Mem0[v17:word64] = x25
	v17 = v17 + 8
	Mem0[v17:word64] = x26
	v20 = sp + 80
	Mem0[v20:word64] = x27
	v20 = v20 + 8
	Mem0[v20:word64] = x28
	x23 = x23 + 0x0000000000000758
	x20 = x0
	w0 = 0x0000000A
	Mem0[x23 + 376:byte] = (byte) w0
	Mem0[x29 + 464:word64] = 0x0000000000000000
	call reset_internal_getopt (retsize: 0;)
	w1 = Mem0[x29 + 464:word32]
	x0 = Mem0[x29 + 464:word64]
	x19 = 0x00000000004BF000
	x21 = 0x00000000004BF000
	Mem0[x29 + 528:word64] = x0
	Mem0[x29 + 496:word64] = x0
	Mem0[x29 + 524:word32] = w1
	Mem0[x29 + 508:word32] = w1
	Mem0[x29 + 536:word32] = w1
	Mem0[x29 + 472:word32] = w1
	Mem0[x29 + 480:word32] = w1
	Mem0[x29 + 476:word32] = w1
	x26 = x1
	x25 = x1
	Mem0[x29 + 520:word32] = w1
	x19 = x19 + 0x0000000000000360
	x21 = x21 + 0x00000000000002E4
	w22 = 0x00000001
	x24 = x23
	x0 = x20
	x1 = x19
	call internal_getopt (retsize: 0;)
	w31 = w0 + 0x00000001
	NZCV = cond(w31)
	branch Test(EQ,Z) l000000000047674C
	// succ:  l00000000004766A8 l000000000047674C
l00000000004766A8:
	w2 = w0 - 0x0000004E
	w31 = w2 - 0x00000027
	NZCV = cond(w31)
	branch Test(ULE,ZC) l00000000004766DC
	// succ:  l00000000004766B4 l00000000004766DC
l00000000004766B4:
	call builtin_usage (retsize: 0;)
	w0 = 0x00000102
	// succ:  l00000000004766BC
l00000000004766BC:
	v31 = sp + 16
	x19 = Mem0[v31:word64]
	v31 = v31 + 8
	x20 = Mem0[v31:word64]
	v32 = sp + 32
	x21 = Mem0[v32:word64]
	v32 = v32 + 8
	x22 = Mem0[v32:word64]
	v33 = sp + 48
	x23 = Mem0[v33:word64]
	v33 = v33 + 8
	x24 = Mem0[v33:word64]
	v34 = sp + 64
	x25 = Mem0[v34:word64]
	v34 = v34 + 8
	x26 = Mem0[v34:word64]
	v35 = sp + 80
	x27 = Mem0[v35:word64]
	v35 = v35 + 8
	x28 = Mem0[v35:word64]
	x29 = Mem0[sp:word64]
	sp = sp + 8
	x30 = Mem0[sp:word64]
	sp = sp + 96
	x31 = x31 + 0x00000000000001F0
	return
	// succ:  read_builtin_exit
l00000000004766DC:
	v46 = Mem0[x21 + (uint64) ((uint32) w2):word16]
	w1 = (word32) v46
	x3 = 0x00000000004766EC
	x1 = x3 + (int64) ((int16) w1)
	call x1 (retsize: 0;)
	return
	// succ:  read_builtin_exit
l000000000047674C:
	x0 = 0x00000000004E3000
	x0 = Mem0[x0 + 3856:word64]
	w20 = Mem0[x29 + 536:word32]
	Mem0[x29 + 512:word64] = x0
	x19 = Mem0[x29 + 496:word64]
	branch w25 == 0x00000000 l000000000047676C
	// succ:  l0000000000476764 l000000000047676C
l0000000000476764:
	w1 = Mem0[x29 + 508:word32]
	branch w1 == 0x00000000 l0000000000476DA8
	// succ:  l000000000047676C l0000000000476DA8
l000000000047676C:
	branch w26 == 0x00000000 l000000000047677C
	// succ:  l0000000000476770 l000000000047677C
l0000000000476770:
	w1 = 0xFFFFFFFF
	x0 = 0x00000000004E1000
	Mem0[x0 + -1840:byte] = (byte) w1
	// succ:  l000000000047677C
l000000000047677C:
	call getifs (retsize: 0;)
	Mem0[x29 + 552:word64] = x0
	branch x0 == 0x0000000000000000 l0000000000476DC4
	// succ:  l0000000000476788 l0000000000476DC4
l0000000000476788:
	branch w26 == 0x00000000 l0000000000476798
	// succ:  l000000000047678C l0000000000476798
l000000000047678C:
	x0 = 0x00000000004AC000
	x0 = x0 + 0x0000000000000460
	Mem0[x29 + 552:word64] = x0
	// succ:  l0000000000476798
l0000000000476798:
	x3 = Mem0[x29 + 552:word64]
	Mem0[x29 + 408:word64] = x3
	v40 = Mem0[x3:byte]
	w0 = (word32) v40
	branch w0 == 0x00000000 l00000000004775EC
	// succ:  l00000000004767A8 l00000000004775EC
l00000000004767A8:
	Mem0[x29 + 488:word32] = 0x00000000
	w4 = Mem0[x29 + 488:word32]
	x1 = x3 + 0x0000000000000001
	Mem0[x29 + 484:word32] = w4
	// succ:  l00000000004767B8
l00000000004767B8:
	w31 = w0 - 0x00000001
	NZCV = cond(w31)
	w3 = (word32) Test(EQ,Z)
	w8 = Mem0[x29 + 484:word32]
	w31 = w0 - 0x0000007F
	NZCV = cond(w31)
	w10 = Mem0[x29 + 488:word32]
	Mem0[x29 + 408:word64] = x1
	w2 = (word32) Test(EQ,Z)
	w8 = w8 | w3
	w10 = w10 | w2
	v45 = Mem0[x1:byte]
	w0 = (word32) v45
	x1 = x1 + 1
	Mem0[x29 + 484:word32] = w8
	Mem0[x29 + 488:word32] = w10
	branch w0 != 0x00000000 l00000000004767B8
	// succ:  l00000000004767EC l00000000004767B8
l00000000004767EC:
	x1 = 0x00000000004BF000
	x0 = 0x0000000000000070
	x1 = x1 + 0x0000000000000378
	w2 = 0x00000143
	call sh_xmalloc (retsize: 0;)
	Mem0[x29 + 416:word64] = x0
	Mem0[x0:byte] = 0x00
	branch w25 == 0x00000000 l00000000004771F0
	// succ:  l000000000047680C l00000000004771F0
l000000000047680C:
	x0 = 0x00000000004BF000
	x0 = x0 + 0x00000000000003B0
	call begin_unwind_frame (retsize: 0;)
	x0 = 0x00000000004DE000
	w0 = Mem0[x0 + 1704:word32]
	branch w0 != 0x00000000 l0000000000476844
	// succ:  l0000000000476824 l0000000000476844
l0000000000476824:
	x21 = 0x00000000004D6000
	w0 = Mem0[x21 + 1672:word32]
	branch (w0 & 0x00000000) == 0x00000000 l0000000000476844
	// succ:  l0000000000476830 l0000000000476844
l0000000000476830:
	w0 = Mem0[x29 + 476:word32]
	call fd_is_bash_input (retsize: 0;)
	branch w0 == 0x00000000 l0000000000476844
	// succ:  l000000000047683C l0000000000476844
l000000000047683C:
	w0 = Mem0[x21 + 1672:word32]
	call sync_buffered_stream (retsize: 0;)
	// succ:  l0000000000476844
l0000000000476844:
	w0 = Mem0[x29 + 476:word32]
	isatty(x0)
	sp = sp + 0xFFFFFFFFFFFFFFF8
	Mem0[x29 + 560:word32] = w0
	Mem0[x29 + 492:word32] = 0x00000000
	branch w0 == 0x00000000 l0000000000476D74
	// succ:  l0000000000476858 l0000000000476D74
l0000000000476858:
	branch x19 == 0x0000000000000000 l000000000047759C
	// succ:  l000000000047685C l000000000047759C
l000000000047685C:
	w1 = Mem0[x29 + 560:word32]
	branch w1 == 0x00000000 l0000000000476D08
	// succ:  l0000000000476864 l0000000000476D08
l0000000000476864:
	w2 = Mem0[x29 + 480:word32]
	branch w2 == 0x00000000 l0000000000476884
	// succ:  l000000000047686C l0000000000476884
l000000000047686C:
	x0 = 0x000000000046C000
	x0 = x0 + 0x00000000000004C4
	x1 = 0x0000000000000000
	call add_unwind_protect (retsize: 0;)
	w3 = 0x00000001
	Mem0[x29 + 480:word32] = w3
	// succ:  l0000000000476884
l0000000000476884:
	w4 = Mem0[x29 + 508:word32]
	branch w4 != 0x00000000 l0000000000476894
	// succ:  l000000000047688C l0000000000476894
l000000000047688C:
	w8 = Mem0[x29 + 524:word32]
	branch w8 == 0x00000000 l0000000000476AC8
	// succ:  l0000000000476894 l0000000000476AC8
l0000000000476894:
	w1 = Mem0[x29 + 476:word32]
	w0 = 0x00000000
	x2 = x29 + 0x0000000000000060
	__fxstat(x0, x1, x2)
	sp = sp + 0xFFFFFFFFFFFFFFF8
	branch (w0 & 0x00000000) == 0x00000000 l0000000000476AC8
	// succ:  l00000000004768A8 l0000000000476AC8
l00000000004768A8:
	w0 = Mem0[x29 + 112:word32]
	w0 = w0 & 0x0000F000
	w31 = w0 - (0x00000008 << 12)
	NZCV = cond(w31)
	branch Test(EQ,Z) l0000000000476AC8
	// succ:  l00000000004768B8 l0000000000476AC8
l00000000004768B8:
	w0 = Mem0[x29 + 508:word32]
	branch w0 == 0x00000000 l0000000000476E98
	// succ:  l00000000004768C0 l0000000000476E98
l00000000004768C0:
	x0 = 0x00000000004E1000
	x0 = x0 + 0x0000000000000758
	x0 = x0 + 0x0000000000000008
	w1 = 0x00000001
	call __sigsetjmp (retsize: 0;)
	branch w0 == 0x00000000 l0000000000476D20
	// succ:  l00000000004768D8 l0000000000476D20
l00000000004768D8:
	x0 = Mem0[x29 + 416:word64]
	x1 = 0x00000000004BF000
	x1 = x1 + 0x0000000000000378
	w2 = 0x0000018A
	Mem0[x0:byte] = 0x00
	x0 = 0x0000000000000001
	call sh_xmalloc (retsize: 0;)
	x19 = x0
	Mem0[x0:byte] = 0x00
	x0 = 0x00000000004BF000
	x0 = x0 + 0x00000000000003B0
	call run_unwind_frame (retsize: 0;)
	w22 = 0x0000008E
	Mem0[x29 + 540:word32] = 0x00000000
	Mem0[x29 + 416:word64] = x19
	// succ:  l0000000000476914
l0000000000476914:
	x1 = 0x00000000004E1000
	x0 = 0x00000000004E1000
	w3 = Mem0[x1 + 636:word32]
	w2 = Mem0[x0 + 648:word32]
	w3 = w3 - 0x00000001
	w2 = w2 - 0x00000001
	x10 = Mem0[x29 + 528:word64]
	Mem0[x1 + 636:word32] = w3
	Mem0[x0 + 648:word32] = w2
	branch x10 == 0x0000000000000000 l0000000000477248
	// succ:  l000000000047693C l0000000000477248
l000000000047693C:
	x0 = x10
	call legal_identifier (retsize: 0;)
	branch w0 == 0x00000000 l0000000000477458
	// succ:  l0000000000476948 l0000000000477458
l0000000000476948:
	x0 = Mem0[x29 + 528:word64]
	w1 = 0x00000001
	call find_or_make_array_variable (retsize: 0;)
	x19 = x0
	branch x0 == 0x0000000000000000 l00000000004777B4
	// succ:  l000000000047695C l00000000004777B4
l000000000047695C:
	w0 = Mem0[x0 + 40:word32]
	w2 = w0 & 0x00000040
	branch (w0 & 0x00000040) == 0x00000000 l0000000000476DD4
	// succ:  l0000000000476968 l0000000000476DD4
l0000000000476968:
	x0 = Mem0[x19 + 8:word64]
	Mem0[x29 + 576:word64] = x2
	call array_flush (retsize: 0;)
	x0 = Mem0[x29 + 416:word64]
	x1 = Mem0[x29 + 552:word64]
	x2 = Mem0[x29 + 576:word64]
	call list_string (retsize: 0;)
	x20 = x0
	branch x0 == 0x0000000000000000 l00000000004769B0
	// succ:  l000000000047698C l00000000004769B0
l000000000047698C:
	w4 = Mem0[x29 + 540:word32]
	branch w4 == 0x00000000 l00000000004775E4
	// succ:  l0000000000476994 l00000000004775E4
l0000000000476994:
	call dequote_list (retsize: 0;)
	// succ:  l0000000000476998
l0000000000476998:
	x0 = x19
	x1 = x20
	w2 = 0x00000000
	call assign_array_var_from_word_list (retsize: 0;)
	x0 = x20
	call dispose_words (retsize: 0;)
	// succ:  l00000000004769B0
l00000000004769B0:
	x0 = Mem0[x29 + 416:word64]
	x1 = 0x00000000004BF000
	x1 = x1 + 0x0000000000000378
	w2 = 0x000002A1
	call sh_xfree (retsize: 0;)
	w0 = w22
	goto l00000000004766BC
	// succ:  l00000000004766BC
l0000000000476AC8:
	Mem0[x29 + 508:word32] = 0x00000000
	w3 = Mem0[x29 + 508:word32]
	Mem0[x29 + 524:word32] = w3
	// succ:  l0000000000476AD4
l0000000000476AD4:
	w4 = Mem0[x29 + 472:word32]
	NZCV = cond(w4 - w31)
	branch Test(LE,ZCV) l00000000004774E0
	// succ:  l0000000000476AE0 l00000000004774E0
l0000000000476AE0:
	w8 = Mem0[x29 + 480:word32]
	branch w8 == 0x00000000 l0000000000476D64
	// succ:  l0000000000476AE8 l0000000000476D64
l0000000000476AE8:
	w10 = Mem0[x29 + 472:word32]
	NZCV = cond(w10 - w31)
	branch Test(LE,ZCV) l0000000000476B0C
	// succ:  l0000000000476AF4 l0000000000476B0C
l0000000000476AF4:
	x19 = 0x00000000004E3000
	x0 = x19 + 0xFFFFFFFFFFFFFF38
	w1 = 0x00000004
	call unwind_protect_mem (retsize: 0;)
	w0 = Mem0[x29 + 472:word32]
	Mem0[x19 + 3896:word32] = w0
	// succ:  l0000000000476B0C
l0000000000476B0C:
	x0 = 0x00000000004E1000
	v59 = Mem0[x0 + -1840:byte]
	w19 = (word32) v59
	w31 = w19 - 0x0000000A
	NZCV = cond(w31)
	branch Test(EQ,Z) l0000000000476D6C
	// succ:  l0000000000476B1C l0000000000476D6C
l0000000000476B1C:
	x0 = 0x00000000004E1000
	w0 = Mem0[x0 + 1464:word32]
	branch w0 != 0x00000000 l0000000000476B2C
	// succ:  l0000000000476B28 l0000000000476B2C
l0000000000476B28:
	call initialize_readline (retsize: 0;)
	// succ:  l0000000000476B2C
l0000000000476B2C:
	call rl_get_keymap (retsize: 0;)
	x2 = 0x00000000004A2000
l0000000000476B98:
	x1 = Mem0[x29 + 416:word64]
	x0 = 0x000000000046C000
	x0 = x0 + 0x00000000000004C4
	call add_unwind_protect (retsize: 0;)
	x1 = 0x00000000004E1000
	x0 = 0x00000000004E1000
	w3 = Mem0[x1 + 636:word32]
	w2 = Mem0[x0 + 648:word32]
	w10 = Mem0[x29 + 472:word32]
	w3 = w3 + 0x00000001
	w2 = w2 + 0x00000001
	Mem0[x1 + 636:word32] = w3
	Mem0[x0 + 648:word32] = w2
	NZCV = cond(w10 - w31)
	branch Test(LE,ZCV) l0000000000477528
	// succ:  l0000000000476BD4 l0000000000477528
l0000000000476BD4:
	w1 = 0x00000001
	Mem0[x29 + 492:word32] = w1
	x2 = Mem0[x29 + 496:word64]
	branch x2 == 0x0000000000000000 l0000000000476BEC
	// succ:  l0000000000476BE4 l0000000000476BEC
l0000000000476BE4:
	w3 = Mem0[x29 + 480:word32]
	branch w3 == 0x00000000 l0000000000477550
	// succ:  l0000000000476BEC l0000000000477550
l0000000000476BEC:
	w4 = Mem0[x29 + 520:word32]
	x0 = 0x00000000004AA000
	w25 = 0x00000000
	x23 = 0x0000000000000000
	x0 = x0 + 0x0000000000000348
	w4 = w4 ^ 0x00000001
	Mem0[x29 + 544:word64] = x23
	Mem0[x29 + 504:word32] = w23
	Mem0[x29 + 540:word32] = w25
	w20 = w25
	w22 = 0x00000070
	w21 = w25
	w24 = w25
	Mem0[x29 + 568:word64] = x0
	Mem0[x29 + 564:word32] = w4
	// succ:  l0000000000476C28
l0000000000476C28:
	w10 = Mem0[x29 + 480:word32]
	branch w10 == 0x00000000 l0000000000476EAC
	// succ:  l0000000000476C30 l0000000000476EAC
l0000000000476C30:
	branch x23 == 0x0000000000000000 l00000000004770B4
	// succ:  l0000000000476C34 l00000000004770B4
l0000000000476C34:
	v65 = Mem0[x23 + (int64) ((int32) w25):byte]
	w0 = (word32) v65
	branch w0 == 0x00000000 l00000000004770A0
	// succ:  l0000000000476C3C l00000000004770A0
l0000000000476C3C:
	w25 = w25 + 0x00000001
	Mem0[x29 + 453:byte] = (byte) w0
	w0 = w19 + 0x00000004
	NZCV = cond(w0 - w22)
	branch Test(GE,NZV) l0000000000476F08
	// succ:  l0000000000476C50 l0000000000476F08
l0000000000476C50:
	v67 = Mem0[x29 + 453:byte]
	w0 = (word32) v67
	branch w20 == 0x00000000 l0000000000476F44
	// succ:  l0000000000476C58 l0000000000476F44
l0000000000476C58:
	w31 = w0 - 0x0000000A
	NZCV = cond(w31)
	branch Test(EQ,Z) l00000000004771A4
	// succ:  l0000000000476C60 l00000000004771A4
l0000000000476C60:
	w8 = Mem0[x29 + 472:word32]
	x1 = Mem0[x29 + 416:word64]
	NZCV = cond(w8 - w31)
	Mem0[x1 + (int64) ((int32) w19):byte] = (byte) w0
	w28 = w19 + 0x00000001
	branch Test(LE,ZCV) l0000000000476FB4
	// succ:  l0000000000476C78 l0000000000476FB4
l0000000000476C78:
	__ctype_get_mb_cur_max()
	sp = sp + 0xFFFFFFFFFFFFFFF8
	x31 = x0 - 0x0000000000000001
	NZCV = cond(x31)
	w19 = w28
	branch Test(ULE,ZC) l0000000000476FFC
	// succ:  l0000000000476C88 l0000000000476FFC
l0000000000476C88:
	x0 = Mem0[x29 + 416:word64]
l0000000000476D08:
	Mem0[x29 + 464:word64] = 0x0000000000000000
	// succ:  l0000000000476D0C
l0000000000476D0C:
	Mem0[x29 + 480:word32] = 0x00000000
	w2 = Mem0[x29 + 480:word32]
	Mem0[x29 + 496:word64] = 0x0000000000000000
	Mem0[x29 + 536:word32] = w2
	goto l0000000000476884
	// succ:  l0000000000476884
l0000000000476D20:
	x1 = 0x0000000000476000
	x1 = x1 + 0x00000000000004A0
	w0 = 0x0000000E
	call set_signal_handler (retsize: 0;)
	x1 = 0x00000000004E1000
	x1 = x1 + 0x0000000000000758
	Mem0[x1:word64] = x0
	x0 = 0x0000000000476000
	x1 = 0x0000000000000000
	x0 = x0 + 0x0000000000000474
	call add_unwind_protect (retsize: 0;)
	w2 = Mem0[x29 + 480:word32]
	branch w2 != 0x00000000 l0000000000476E0C
	// succ:  l0000000000476D54 l0000000000476E0C
l0000000000476D54:
	w0 = Mem0[x29 + 508:word32]
	w1 = Mem0[x29 + 524:word32]
	call falarm (retsize: 0;)
	goto l0000000000476AD4
	// succ:  l0000000000476AD4
l0000000000476D64:
	w1 = Mem0[x29 + 560:word32]
	branch w1 != 0x00000000 l0000000000476E20
	// succ:  l0000000000476D6C l0000000000476E20
l0000000000476D6C:
	w19 = 0x00000000
	goto l0000000000476B98
	// succ:  l0000000000476B98
l0000000000476D74:
	w0 = Mem0[x29 + 476:word32]
	x1 = 0x0000000000000000
	w2 = 0x00000001
	lseek(x0, x1, x2)
	sp = sp + 0xFFFFFFFFFFFFFFF8
	w4 = Mem0[x29 + 560:word32]
	Mem0[x29 + 492:word32] = w4
	branch (w0 & 0x00000000) != 0x00000000 l0000000000476858
	// succ:  l0000000000476D90 l0000000000476858
l0000000000476D90:
	__errno_location()
	sp = sp + 0xFFFFFFFFFFFFFFF8
	w0 = Mem0[x0:word32]
	w31 = w0 - 0x0000001D
	NZCV = cond(w31)
	w10 = (word32) Test(EQ,Z)
	Mem0[x29 + 492:word32] = w10
	goto l0000000000476858
	// succ:  l0000000000476858
l0000000000476DA8:
	w2 = Mem0[x29 + 524:word32]
	branch w2 != 0x00000000 l000000000047676C
	// succ:  l0000000000476DB0 l000000000047676C
l0000000000476DB0:
	w0 = Mem0[x29 + 476:word32]
	call input_avail (retsize: 0;)
	NZCV = cond(w0 - w31)
	w0 = (word32) Test(EQ,Z)
	goto l00000000004766BC
	// succ:  l00000000004766BC
l0000000000476DC4:
	x0 = 0x00000000004AC000
	x0 = x0 + 0x0000000000000460
	Mem0[x29 + 552:word64] = x0
	goto l0000000000476788
	// succ:  l0000000000476788
l0000000000476DD4:
	x1 = 0x00000000004BE000
	w2 = 0x00000005
	x1 = x1 + 0x0000000000000680
	x0 = 0x0000000000000000
	dcgettext(x0, x1, x2)
	sp = sp + 0xFFFFFFFFFFFFFFF8
	x1 = Mem0[x29 + 528:word64]
	call builtin_error (retsize: 0;)
	x0 = Mem0[x29 + 416:word64]
	x1 = 0x00000000004BF000
	x1 = x1 + 0x0000000000000378
	w2 = 0x00000292
	call sh_xfree (retsize: 0;)
	w0 = 0x00000001
	goto l00000000004766BC
	// succ:  l00000000004766BC
l0000000000476E0C:
	x0 = 0x0000000000476000
	x0 = x0 + 0x00000000000005E4
	x1 = 0x0000000000000000
	call add_unwind_protect (retsize: 0;)
	goto l0000000000476D54
	// succ:  l0000000000476D54
l0000000000476E20:
	x19 = x29 + 0x0000000000000120
	w0 = Mem0[x29 + 476:word32]
	x1 = x19
	Mem0[x29 + 376:word32] = w0
	call ttgetattr (retsize: 0;)
	x8 = x29 + 0x0000000000000120
l0000000000476E98:
	w1 = Mem0[x29 + 524:word32]
	branch w1 != 0x00000000 l00000000004768C0
	// succ:  l0000000000476EA0 l00000000004768C0
l0000000000476EA0:
	w3 = Mem0[x29 + 524:word32]
	Mem0[x29 + 508:word32] = w3
	goto l0000000000476AD4
	// succ:  l0000000000476AD4
l0000000000476EAC:
	w4 = Mem0[x29 + 504:word32]
	branch w4 == 0x00000000 l0000000000476ED8
	// succ:  l0000000000476EB4 l0000000000476ED8
l0000000000476EB4:
	x8 = Mem0[x29 + 544:word64]
	branch x8 == 0x0000000000000000 l000000000047747C
	// succ:  l0000000000476EBC l000000000047747C
l0000000000476EBC:
	x0 = 0x00000000004DE000
	x1 = Mem0[x0 + 1640:word64]
	x0 = Mem0[x29 + 544:word64]
	// succ:  l0000000000476EC8
l0000000000476EC8:
	fputs(x0, x1)
	sp = sp + 0xFFFFFFFFFFFFFFF8
	x0 = 0x00000000004DE000
	x0 = Mem0[x0 + 1640:word64]
	fflush(x0)
	sp = sp + 0xFFFFFFFFFFFFFFF8
	// succ:  l0000000000476ED8
l0000000000476ED8:
	w10 = Mem0[x29 + 492:word32]
	w0 = Mem0[x29 + 476:word32]
	x1 = x29 + 0x00000000000001C5
	branch w10 == 0x00000000 l0000000000477098
	// succ:  l0000000000476EE8 l0000000000477098
l0000000000476EE8:
	x2 = 0x0000000000000001
	call zread (retsize: 0;)
	// succ:  l0000000000476EF0
l0000000000476EF0:
	NZCV = cond(w0 - w31)
	branch Test(LE,ZCV) l000000000047756C
	// succ:  l0000000000476EF8 l000000000047756C
l0000000000476EF8:
	w0 = w19 + 0x00000004
	Mem0[x29 + 504:word32] = w24
	NZCV = cond(w0 - w22)
	branch Test(LT,NV) l0000000000476C50
	// succ:  l0000000000476F08 l0000000000476C50
l0000000000476F08:
	w22 = w22 + 0x00000080
	x0 = Mem0[x29 + 416:word64]
	x2 = 0x00000000004BF000
l0000000000476F44:
	w31 = w0 - 0x0000005C
	NZCV = cond(w31)
	branch Test(EQ,Z) l0000000000477174
	// succ:  l0000000000476F4C l0000000000477174
l0000000000476F4C:
	x1 = 0x00000000004E1000
	v80 = Mem0[x1 + -1840:byte]
	w1 = (word32) v80
	NZCV = cond(w1 - w0)
	branch Test(EQ,Z) l0000000000477014
	// succ:  l0000000000476F5C l0000000000477014
l0000000000476F5C:
	w8 = Mem0[x29 + 484:word32]
	branch w8 != 0x00000000 l0000000000476F6C
	// succ:  l0000000000476F64 l0000000000476F6C
l0000000000476F64:
	w31 = w0 - 0x00000001
	NZCV = cond(w31)
	branch Test(EQ,Z) l0000000000476F7C
	// succ:  l0000000000476F6C l0000000000476F7C
l0000000000476F6C:
	w10 = Mem0[x29 + 488:word32]
	branch w10 != 0x00000000 l0000000000476C60
	// succ:  l0000000000476F74 l0000000000476C60
l0000000000476F74:
	w31 = w0 - 0x0000007F
	NZCV = cond(w31)
	branch Test(NE,Z) l0000000000476C60
	// succ:  l0000000000476F7C l0000000000476C60
l0000000000476F7C:
	x0 = Mem0[x29 + 416:word64]
	w1 = 0x00000001
	Mem0[x0 + (int64) ((int32) w19):byte] = (byte) w1
	w4 = Mem0[x29 + 540:word32]
	v81 = Mem0[x29 + 453:byte]
	w0 = (word32) v81
	w8 = Mem0[x29 + 472:word32]
	x1 = Mem0[x29 + 416:word64]
	w19 = w19 + 0x00000001
	w4 = w4 + 0x00000001
	Mem0[x29 + 540:word32] = w4
	NZCV = cond(w8 - w31)
	Mem0[x1 + (int64) ((int32) w19):byte] = (byte) w0
	w28 = w19 + 0x00000001
	branch Test(GT,NZV) l0000000000476C78
	// succ:  l0000000000476FB4 l0000000000476C78
l0000000000476FB4:
	w21 = w21 + 0x00000001
	w19 = w28
	w20 = w24
	goto l0000000000476C28
	// succ:  l0000000000476C28
l0000000000476FFC:
	w4 = Mem0[x29 + 472:word32]
	w21 = w21 + 0x00000001
	NZCV = cond(w4 - w21)
	branch Test(LE,ZCV) l0000000000477014
	// succ:  l000000000047700C l0000000000477014
l000000000047700C:
	w20 = w24
	goto l0000000000476C28
	// succ:  l0000000000476C28
l0000000000477014:
	w22 = 0x00000000
	// succ:  l0000000000477018
l0000000000477018:
	x0 = Mem0[x29 + 416:word64]
	Mem0[x0 + (int64) ((int32) w19):byte] = 0x00
	// succ:  l0000000000477020
l0000000000477020:
	w8 = Mem0[x29 + 508:word32]
	branch w8 != 0x00000000 l0000000000477088
	// succ:  l0000000000477028 l0000000000477088
l0000000000477028:
	w10 = Mem0[x29 + 524:word32]
	branch w10 != 0x00000000 l0000000000477088
	// succ:  l0000000000477030 l0000000000477088
l0000000000477030:
	w0 = Mem0[x29 + 472:word32]
	NZCV = cond(w0 - w31)
	branch Test(LE,ZCV) l0000000000477580
	// succ:  l000000000047703C l0000000000477580
l000000000047703C:
	w1 = Mem0[x29 + 480:word32]
	branch w1 == 0x00000000 l0000000000477230
	// succ:  l0000000000477044 l0000000000477230
l0000000000477044:
	w2 = Mem0[x29 + 472:word32]
	NZCV = cond(w2 - w31)
	branch Test(LE,ZCV) l0000000000477058
	// succ:  l0000000000477050 l0000000000477058
l0000000000477050:
	x0 = 0x00000000004E3000
	Mem0[x0 + 3896:word32] = 0x00000000
	// succ:  l0000000000477058
l0000000000477058:
	x0 = 0x00000000004E1000
	v78 = Mem0[x0 + -1840:byte]
	w0 = (word32) v78
	w31 = w0 - 0x0000000A
	NZCV = cond(w31)
	branch Test(EQ,Z) l0000000000477070
	// succ:  l0000000000477068 l0000000000477070
l0000000000477068:
	x0 = 0x0000000000000000
	call fn00000000004764BC (retsize: 0;)
	// succ:  l0000000000477070
l0000000000477070:
	w8 = Mem0[x29 + 492:word32]
	branch w8 == 0x00000000 l0000000000477544
	// succ:  l0000000000477078 l0000000000477544
l0000000000477078:
	x0 = 0x00000000004BF000
	x0 = x0 + 0x00000000000003B0
	call discard_unwind_frame (retsize: 0;)
	goto l0000000000476914
	// succ:  l0000000000476914
l0000000000477088:
	call fn0000000000476474 (retsize: 0;)
	goto l0000000000477030
	// succ:  l0000000000477030
l0000000000477098:
	call zreadc (retsize: 0;)
	goto l0000000000476EF0
	// succ:  l0000000000476EF0
l00000000004770A0:
	x1 = 0x00000000004BF000
	x0 = x23
	x1 = x1 + 0x0000000000000378
	w2 = 0x000001EA
	call sh_xfree (retsize: 0;)
	// succ:  l00000000004770B4
l00000000004770B4:
	x0 = Mem0[x29 + 496:word64]
	branch x0 == 0x0000000000000000 l00000000004771D4
	// succ:  l00000000004770BC l00000000004771D4
l00000000004770BC:
	x1 = 0x00000000004E1000
	w1 = Mem0[x1 + 1464:word32]
	branch w1 == 0x00000000 l00000000004771E0
	// succ:  l00000000004770C8 l00000000004771E0
l00000000004770C8:
	x2 = 0x00000000004E1000
	x3 = Mem0[x2 + 4064:word64]
	x1 = 0x00000000004E1000
	x1 = x1 + 0x0000000000000758
	Mem0[x2 + 4064:word64] = 0x0000000000000000
	x2 = Mem0[x29 + 464:word64]
	Mem0[x1 + 368:word64] = x3
	branch x2 == 0x0000000000000000 l0000000000477108
	// succ:  l00000000004770E8 l0000000000477108
l00000000004770E8:
	x2 = 0x00000000004E1000
	x3 = Mem0[x2 + 3208:word64]
	Mem0[x1 + 352:word64] = x3
	x3 = 0x0000000000476000
	x3 = x3 + 0x0000000000000504
	Mem0[x2 + 3208:word64] = x3
	x3 = Mem0[x29 + 464:word64]
	Mem0[x1 + 360:word64] = x3
	// succ:  l0000000000477108
l0000000000477108:
	x25 = 0x00000000004E1000
	call readline (retsize: 0;)
	x25 = x25 + 0x0000000000000758
	x1 = Mem0[x25 + 368:word64]
	x2 = 0x00000000004E1000
	Mem0[x2 + 4064:word64] = x1
	Mem0[x25 + 368:word64] = 0x0000000000000000
	x23 = x0
	branch x0 == 0x0000000000000000 l00000000004774D8
	// succ:  l000000000047712C l00000000004774D8
l000000000047712C:
	strlen(x0)
	sp = sp + 0xFFFFFFFFFFFFFFF8
	w1 = w0 + 0x00000002
	x2 = 0x00000000004BF000
	x26 = x0
l0000000000477174:
	w8 = Mem0[x29 + 520:word32]
	branch w8 != 0x00000000 l0000000000476F4C
	// succ:  l000000000047717C l0000000000476F4C
l000000000047717C:
	w10 = Mem0[x29 + 484:word32]
	w20 = 0x00000001
	branch w10 != 0x00000000 l0000000000476C28
	// succ:  l0000000000477188 l0000000000476C28
l0000000000477188:
	w4 = Mem0[x29 + 540:word32]
	x0 = Mem0[x29 + 416:word64]
	w4 = w4 + w20
	Mem0[x0 + (int64) ((int32) w19):byte] = (byte) w20
	Mem0[x29 + 540:word32] = w4
	w19 = w19 + w20
	goto l0000000000476C28
	// succ:  l0000000000476C28
l00000000004771A4:
	x0 = 0x00000000004DE000
	w20 = Mem0[x0 + 1704:word32]
	w19 = w19 - 0x00000001
	branch w20 == 0x00000000 l0000000000476C28
	// succ:  l00000000004771B4 l0000000000476C28
l00000000004771B4:
	w0 = Mem0[x29 + 560:word32]
	branch w0 == 0x00000000 l000000000047700C
	// succ:  l00000000004771BC l000000000047700C
l00000000004771BC:
	w4 = Mem0[x29 + 564:word32]
	branch w4 == 0x00000000 l000000000047700C
	// succ:  l00000000004771C4 l000000000047700C
l00000000004771C4:
	w8 = 0x00000001
	Mem0[x29 + 504:word32] = w8
	w20 = w24
	goto l0000000000476C28
	// succ:  l0000000000476C28
l00000000004771D4:
	x0 = 0x00000000004AC000
	x0 = x0 + 0x0000000000000460
	goto l00000000004770BC
	// succ:  l00000000004770BC
l00000000004771E0:
	Mem0[x29 + 576:word64] = x0
	call initialize_readline (retsize: 0;)
	x0 = Mem0[x29 + 576:word64]
	goto l00000000004770C8
	// succ:  l00000000004770C8
l00000000004771F0:
	x0 = 0x00000000004AA000
	x0 = x0 + 0x0000000000000530
	call get_string_value (retsize: 0;)
	Mem0[x29 + 408:word64] = x0
	branch x0 == 0x0000000000000000 l000000000047680C
	// succ:  l0000000000477204 l000000000047680C
l0000000000477204:
	x1 = x29 + 0x00000000000001B8
	x2 = x29 + 0x00000000000001B0
	call uconvert (retsize: 0;)
	branch w0 == 0x00000000 l00000000004775B8
	// succ:  l0000000000477214 l00000000004775B8
l0000000000477214:
	x1 = Mem0[x29 + 440:word64]
	branch (w1 & 0x00000000) != 0x00000000 l00000000004775B8
	// succ:  l000000000047721C l00000000004775B8
l000000000047721C:
	x0 = Mem0[x29 + 432:word64]
	branch (w0 & 0x00000000) != 0x00000000 l00000000004775B8
	// succ:  l0000000000477224 l00000000004775B8
l0000000000477224:
	Mem0[x29 + 508:word32] = w1
	Mem0[x29 + 524:word32] = w0
	goto l000000000047680C
	// succ:  l000000000047680C
l0000000000477230:
	w3 = Mem0[x29 + 560:word32]
	branch w3 == 0x00000000 l0000000000477070
	// succ:  l0000000000477238 l0000000000477070
l0000000000477238:
	w0 = Mem0[x29 + 376:word32]
	x1 = Mem0[x29 + 384:word64]
	call ttsetattr (retsize: 0;)
	goto l0000000000477070
	// succ:  l0000000000477070
l0000000000477248:
	x8 = Mem0[x29 + 512:word64]
	branch x8 == 0x0000000000000000 l0000000000477670
	// succ:  l0000000000477250 l0000000000477670
l0000000000477250:
	x1 = Mem0[x29 + 552:word64]
	x23 = Mem0[x29 + 416:word64]
	v50 = Mem0[x1:byte]
	w0 = (word32) v50
	x2 = x23
	branch w0 == 0x00000000 l0000000000477288
	// succ:  l0000000000477264 l0000000000477288
l0000000000477264:
	x4 = 0x00000000004E3000
	x4 = x4 + 0x0000000000000530
	v52 = Mem0[x2:byte]
	w1 = (word32) v52
	w3 = w1 - 0x00000009
l0000000000477288:
	x3 = Mem0[x29 + 512:word64]
	x0 = Mem0[x3:word64]
	Mem0[x29 + 416:word64] = x2
	branch x0 == 0x0000000000000000 l0000000000477340
	// succ:  l0000000000477298 l0000000000477340
l0000000000477298:
	x25 = 0x00000000004AC000
	x24 = 0x00000000004BF000
	x25 = x25 + 0x0000000000000460
	x24 = x24 + 0x0000000000000378
	// succ:  l00000000004772A8
l00000000004772A8:
	x4 = Mem0[x29 + 512:word64]
	x2 = Mem0[x4 + 8:word64]
	x19 = Mem0[x2:word64]
	x0 = x19
	call legal_identifier (retsize: 0;)
	branch w0 == 0x00000000 l00000000004773FC
	// succ:  l00000000004772C0 l00000000004773FC
l00000000004772C0:
	x2 = Mem0[x29 + 416:word64]
	v53 = Mem0[x2:byte]
	w2 = (word32) v53
	branch w2 == 0x00000000 l00000000004773E8
	// succ:  l00000000004772CC l00000000004773E8
l00000000004772CC:
	x1 = Mem0[x29 + 552:word64]
	x0 = x29 + 0x00000000000001A0
	x2 = x29 + 0x0000000000000198
	call get_word_from_string (retsize: 0;)
	x21 = x0
	branch x0 == 0x0000000000000000 l00000000004773E8
	// succ:  l00000000004772E4 l00000000004773E8
l00000000004772E4:
	x2 = Mem0[x29 + 408:word64]
	w8 = Mem0[x29 + 540:word32]
	Mem0[x2:byte] = 0x00
	branch w8 != 0x00000000 l000000000047742C
	// succ:  l00000000004772F4 l000000000047742C
l00000000004772F4:
	x0 = x19
	x1 = x21
	call fn000000000047657C (retsize: 0;)
	x20 = x0
	// succ:  l0000000000477304
l0000000000477304:
	x0 = x21
	x1 = x24
	w2 = 0x000002F6
	call sh_xfree (retsize: 0;)
	// succ:  l0000000000477314
l0000000000477314:
	branch x20 == 0x0000000000000000 l00000000004775C8
	// succ:  l0000000000477318 l00000000004775C8
l0000000000477318:
	x0 = x19
	call stupidly_hack_special_variables (retsize: 0;)
	x10 = Mem0[x29 + 512:word64]
	w2 = Mem0[x20 + 40:word32]
	x10 = Mem0[x10:word64]
	w2 = w2 & 0xFFFFEFFF
	x3 = Mem0[x10:word64]
	Mem0[x29 + 512:word64] = x10
	Mem0[x20 + 40:word32] = w2
	branch x3 != 0x0000000000000000 l00000000004772A8
	// succ:  l0000000000477340 l00000000004772A8
l0000000000477340:
	x1 = Mem0[x29 + 512:word64]
	x0 = Mem0[x1 + 8:word64]
	x0 = Mem0[x0:word64]
	call legal_identifier (retsize: 0;)
	branch w0 == 0x00000000 l00000000004776D8
	// succ:  l0000000000477354 l00000000004776D8
l0000000000477354:
	x20 = Mem0[x29 + 416:word64]
	v54 = Mem0[x20:byte]
	w0 = (word32) v54
	branch w0 != 0x00000000 l0000000000477718
	// succ:  l0000000000477360 l0000000000477718
l0000000000477360:
	w4 = Mem0[x29 + 540:word32]
	x1 = x20
	x19 = 0x0000000000000000
	branch w4 == 0x00000000 l0000000000477654
	// succ:  l0000000000477370 l0000000000477654
l0000000000477370:
	x10 = Mem0[x29 + 512:word64]
	x0 = Mem0[x10 + 8:word64]
	x0 = Mem0[x0:word64]
	// succ:  l000000000047737C
l000000000047737C:
	call fn000000000047657C (retsize: 0;)
	x20 = x0
	// succ:  l0000000000477384
l0000000000477384:
	branch x20 == 0x0000000000000000 l0000000000477790
	// succ:  l0000000000477388 l0000000000477790
l0000000000477388:
	x1 = Mem0[x29 + 512:word64]
	x0 = Mem0[x1 + 8:word64]
	x0 = Mem0[x0:word64]
	call stupidly_hack_special_variables (retsize: 0;)
	w0 = Mem0[x20 + 40:word32]
	w0 = w0 & 0xFFFFEFFF
	Mem0[x20 + 40:word32] = w0
	// succ:  l00000000004773A4
l00000000004773A4:
	branch x19 == 0x0000000000000000 l00000000004773BC
	// succ:  l00000000004773A8 l00000000004773BC
l00000000004773A8:
	x1 = 0x00000000004BF000
	x0 = x19
	x1 = x1 + 0x0000000000000378
	w2 = 0x00000335
	call sh_xfree (retsize: 0;)
	// succ:  l00000000004773BC
l00000000004773BC:
	x1 = 0x00000000004BF000
	x0 = x23
	x1 = x1 + 0x0000000000000378
	w2 = 0x00000336
	call sh_xfree (retsize: 0;)
	w0 = w22
	goto l00000000004766BC
	// succ:  l00000000004766BC
l00000000004773E8:
	x0 = x19
	x1 = x25
	call fn000000000047657C (retsize: 0;)
	x20 = x0
	goto l0000000000477314
	// succ:  l0000000000477314
l00000000004773FC:
	x0 = x19
	call valid_array_reference (retsize: 0;)
	branch w0 != 0x00000000 l00000000004772C0
	// succ:  l0000000000477408 l00000000004772C0
l0000000000477408:
	x0 = x19
	call sh_invalidid (retsize: 0;)
	x1 = 0x00000000004BF000
	x0 = x23
	x1 = x1 + 0x0000000000000378
	w2 = 0x000002D9
	call sh_xfree (retsize: 0;)
	w0 = 0x00000001
	goto l00000000004766BC
	// succ:  l00000000004766BC
l000000000047742C:
	call dequote_string (retsize: 0;)
	x26 = x0
	x1 = x26
	x0 = x19
	call fn000000000047657C (retsize: 0;)
	x20 = x0
	x1 = x24
	x0 = x26
	w2 = 0x000002EB
	call sh_xfree (retsize: 0;)
	goto l0000000000477304
	// succ:  l0000000000477304
l0000000000477458:
	x0 = Mem0[x29 + 528:word64]
	call sh_invalidid (retsize: 0;)
	x0 = Mem0[x29 + 416:word64]
	x1 = 0x00000000004BF000
	x1 = x1 + 0x0000000000000378
	w2 = 0x00000285
	call sh_xfree (retsize: 0;)
	w0 = 0x00000001
	goto l00000000004766BC
	// succ:  l00000000004766BC
l000000000047747C:
	x0 = Mem0[x29 + 568:word64]
	call get_string_value (retsize: 0;)
	Mem0[x29 + 544:word64] = x0
	x0 = 0x00000000004DE000
	x1 = Mem0[x0 + 1640:word64]
	x0 = Mem0[x29 + 544:word64]
	branch x0 != 0x0000000000000000 l0000000000476EC8
	// succ:  l0000000000477498 l0000000000476EC8
l0000000000477498:
	x0 = 0x00000000004AC000
	x0 = x0 + 0x0000000000000460
	goto l0000000000476EC8
	// succ:  l0000000000476EC8
l00000000004774D8:
	w22 = 0x00000001
	goto l0000000000477018
	// succ:  l0000000000477018
l00000000004774E0:
	x0 = 0x00000000004E1000
	v60 = Mem0[x0 + -1840:byte]
	w0 = (word32) v60
	w31 = w0 - 0x0000000A
	NZCV = cond(w31)
	branch Test(NE,Z) l0000000000476AE0
	// succ:  l00000000004774F0 l0000000000476AE0
l00000000004774F0:
	w19 = Mem0[x29 + 536:word32]
	branch w19 != 0x00000000 l00000000004777D0
	// succ:  l00000000004774F8 l00000000004777D0
l00000000004774F8:
	x1 = Mem0[x29 + 416:word64]
	x0 = 0x000000000046C000
	x0 = x0 + 0x00000000000004C4
	call add_unwind_protect (retsize: 0;)
	x1 = 0x00000000004E1000
	x0 = 0x00000000004E1000
	w3 = Mem0[x1 + 636:word32]
	w2 = Mem0[x0 + 648:word32]
	w3 = w3 + 0x00000001
	w2 = w2 + 0x00000001
	Mem0[x1 + 636:word32] = w3
	Mem0[x0 + 648:word32] = w2
	// succ:  l0000000000477528
l0000000000477528:
	x0 = 0x00000000004E1000
	v61 = Mem0[x0 + -1840:byte]
	w0 = (word32) v61
	w31 = w0 - 0x0000000A
	NZCV = cond(w31)
	w0 = Mem0[x29 + 492:word32]
l0000000000477544:
	w0 = Mem0[x29 + 476:word32]
	call zsyncfd (retsize: 0;)
	goto l0000000000477078
	// succ:  l0000000000477078
l0000000000477550:
	x20 = 0x00000000004DE000
	x1 = Mem0[x20 + 1640:word64]
	x0 = x2
	fputs(x0, x1)
	sp = sp + 0xFFFFFFFFFFFFFFF8
	x0 = Mem0[x20 + 1640:word64]
	fflush(x0)
	sp = sp + 0xFFFFFFFFFFFFFFF8
	goto l0000000000476BEC
	// succ:  l0000000000476BEC
l000000000047756C:
	x0 = Mem0[x29 + 416:word64]
	Mem0[x0 + (int64) ((int32) w19):byte] = 0x00
	branch Test(LT,NV) l00000000004775F8
	// succ:  l0000000000477578 l00000000004775F8
l0000000000477578:
	w22 = 0x00000001
	goto l0000000000477020
	// succ:  l0000000000477020
l0000000000477580:
	x0 = 0x00000000004E1000
	v79 = Mem0[x0 + -1840:byte]
	w0 = (word32) v79
	w31 = w0 - 0x0000000A
	NZCV = cond(w31)
	branch Test(NE,Z) l000000000047703C
	// succ:  l0000000000477590 l000000000047703C
l0000000000477590:
	w4 = Mem0[x29 + 536:word32]
	branch w4 == 0x00000000 l0000000000477070
	// succ:  l0000000000477598 l0000000000477070
l0000000000477598:
	goto l0000000000477238
	// succ:  l0000000000477238
l000000000047759C:
	w0 = Mem0[x29 + 480:word32]
	branch w0 != 0x00000000 l000000000047685C
	// succ:  l00000000004775A4 l000000000047685C
l00000000004775A4:
	branch w20 == 0x00000000 l0000000000476D0C
	// succ:  l00000000004775A8 l0000000000476D0C
l00000000004775A8:
	w8 = Mem0[x29 + 560:word32]
	branch w8 != 0x00000000 l0000000000476884
	// succ:  l00000000004775B0 l0000000000476884
l00000000004775B0:
	Mem0[x29 + 464:word64] = x19
	goto l0000000000476D0C
	// succ:  l0000000000476D0C
l00000000004775B8:
	Mem0[x29 + 524:word32] = w25
	w25 = w25
	Mem0[x29 + 508:word32] = w25
	goto l000000000047680C
	// succ:  l000000000047680C
l00000000004775C8:
	x1 = 0x00000000004BF000
	x0 = x23
	x1 = x1 + 0x0000000000000378
	w2 = 0x000002F9
	call sh_xfree (retsize: 0;)
	w0 = 0x00000001
	goto l00000000004766BC
	// succ:  l00000000004766BC
l00000000004775E4:
	call word_list_remove_quoted_nulls (retsize: 0;)
	goto l0000000000476998
	// succ:  l0000000000476998
l00000000004775EC:
	Mem0[x29 + 488:word32] = w0
	Mem0[x29 + 484:word32] = w0
	goto l00000000004767EC
	// succ:  l00000000004767EC
l00000000004775F8:
	x1 = 0x00000000004BF000
	x1 = x1 + 0x00000000000003C0
	w2 = 0x00000005
	x0 = 0x0000000000000000
	dcgettext(x0, x1, x2)
	sp = sp + 0xFFFFFFFFFFFFFFF8
	x19 = x0
	__errno_location()
	sp = sp + 0xFFFFFFFFFFFFFFF8
	w0 = Mem0[x0:word32]
	strerror(x0)
	sp = sp + 0xFFFFFFFFFFFFFFF8
	w1 = Mem0[x29 + 476:word32]
	x2 = x0
	x0 = x19
	call builtin_error (retsize: 0;)
	x0 = 0x00000000004BF000
	x0 = x0 + 0x00000000000003B0
	call run_unwind_frame (retsize: 0;)
	w0 = 0x00000001
	goto l00000000004766BC
	// succ:  l00000000004766BC
l0000000000477654:
	x10 = Mem0[x29 + 512:word64]
	x0 = Mem0[x10 + 8:word64]
	x0 = Mem0[x0:word64]
	branch x1 != 0x0000000000000000 l000000000047737C
	// succ:  l0000000000477664 l000000000047737C
l0000000000477664:
	x1 = 0x00000000004AC000
	x1 = x1 + 0x0000000000000460
	goto l000000000047737C
	// succ:  l000000000047737C
l0000000000477670:
	w10 = Mem0[x29 + 540:word32]
	branch w10 == 0x00000000 l0000000000477798
	// succ:  l0000000000477678 l0000000000477798
l0000000000477678:
	x0 = Mem0[x29 + 416:word64]
	call dequote_string (retsize: 0;)
	x1 = x0
	x20 = x0
	w2 = Mem0[x29 + 512:word32]
	x0 = 0x00000000004AC000
	x0 = x0 + 0x0000000000000780
	call bind_variable (retsize: 0;)
	x1 = 0x00000000004BF000
	x19 = x0
	x1 = x1 + 0x0000000000000378
	x0 = x20
	w2 = 0x000002BC
	call sh_xfree (retsize: 0;)
	// succ:  l00000000004776B0
l00000000004776B0:
	w0 = Mem0[x19 + 40:word32]
	w2 = 0x000002C2
	w1 = w0 & 0xFFFFEFFF
	Mem0[x19 + 40:word32] = w1
	x0 = Mem0[x29 + 416:word64]
	x1 = 0x00000000004BF000
	x1 = x1 + 0x0000000000000378
	call sh_xfree (retsize: 0;)
	w0 = w22
	goto l00000000004766BC
	// succ:  l00000000004766BC
l00000000004776D8:
	x2 = Mem0[x29 + 512:word64]
	x0 = Mem0[x2 + 8:word64]
	x0 = Mem0[x0:word64]
	call valid_array_reference (retsize: 0;)
	branch w0 != 0x00000000 l0000000000477354
	// succ:  l00000000004776EC l0000000000477354
l00000000004776EC:
	x3 = Mem0[x29 + 512:word64]
	x0 = Mem0[x3 + 8:word64]
	x0 = Mem0[x0:word64]
	call sh_invalidid (retsize: 0;)
	x1 = 0x00000000004BF000
	x0 = x23
	x1 = x1 + 0x0000000000000378
	w2 = 0x00000309
	call sh_xfree (retsize: 0;)
	w0 = 0x00000001
	goto l00000000004766BC
	// succ:  l00000000004766BC
l0000000000477718:
	x1 = Mem0[x29 + 552:word64]
	x0 = x29 + 0x00000000000001A0
	x2 = x29 + 0x0000000000000198
	call get_word_from_string (retsize: 0;)
	x19 = x0
	x0 = Mem0[x29 + 416:word64]
	v55 = Mem0[x0:byte]
	w0 = (word32) v55
	branch w0 != 0x00000000 l000000000047785C
	// succ:  l0000000000477738 l000000000047785C
l0000000000477738:
	Mem0[x29 + 416:word64] = x19
	x1 = x19
	// succ:  l0000000000477740
l0000000000477740:
	w4 = Mem0[x29 + 540:word32]
	branch w4 == 0x00000000 l0000000000477654
	// succ:  l0000000000477748 l0000000000477654
l0000000000477748:
	branch x1 == 0x0000000000000000 l000000000047784C
	// succ:  l000000000047774C l000000000047784C
l000000000047774C:
	v56 = Mem0[x1:byte]
	w0 = (word32) v56
	branch w0 == 0x00000000 l0000000000477370
	// succ:  l0000000000477754 l0000000000477370
l0000000000477754:
	x0 = x1
	call dequote_string (retsize: 0;)
	x8 = Mem0[x29 + 512:word64]
	x21 = x0
	x0 = Mem0[x8 + 8:word64]
	x1 = x21
	x0 = Mem0[x0:word64]
	call fn000000000047657C (retsize: 0;)
	x1 = 0x00000000004BF000
	x20 = x0
	x1 = x1 + 0x0000000000000378
	x0 = x21
	w2 = 0x00000328
	call sh_xfree (retsize: 0;)
	goto l0000000000477384
	// succ:  l0000000000477384
l0000000000477790:
	w22 = 0x00000001
	goto l00000000004773A4
	// succ:  l00000000004773A4
l0000000000477798:
	x1 = Mem0[x29 + 416:word64]
	x0 = 0x00000000004AC000
	w2 = Mem0[x29 + 512:word32]
	x0 = x0 + 0x0000000000000780
	call bind_variable (retsize: 0;)
	x19 = x0
	goto l00000000004776B0
	// succ:  l00000000004776B0
l00000000004777B4:
	x0 = Mem0[x29 + 416:word64]
	x1 = 0x00000000004BF000
	x1 = x1 + 0x0000000000000378
	w2 = 0x0000028C
	call sh_xfree (retsize: 0;)
	w0 = 0x00000001
	goto l00000000004766BC
	// succ:  l00000000004766BC
l00000000004777D0:
	x19 = x29 + 0x0000000000000120
	w0 = Mem0[x29 + 476:word32]
	x1 = x19
	Mem0[x29 + 376:word32] = w0
	call ttgetattr (retsize: 0;)
	v71 = x19 + 16
	x4 = Mem0[v71:word64]
	v71 = v71 + 8
	x5 = Mem0[v71:word64]
	x10 = x29 + 0x0000000000000120
	v72 = x19 + 32
	x2 = Mem0[v72:word64]
	v72 = v72 + 8
	x3 = Mem0[v72:word64]
	x9 = Mem0[x19 + 48:word64]
	w8 = Mem0[x19 + 56:word32]
l000000000047784C:
	x8 = Mem0[x29 + 512:word64]
	x0 = Mem0[x8 + 8:word64]
	x0 = Mem0[x0:word64]
	goto l0000000000477664
	// succ:  l0000000000477664
l000000000047785C:
	x1 = Mem0[x29 + 552:word64]
	w2 = Mem0[x29 + 540:word32]
	x0 = x20
	call strip_trailing_ifs_whitespace (retsize: 0;)
	Mem0[x29 + 416:word64] = x0
	x1 = x0
	goto l0000000000477740
	// succ:  l0000000000477740
read_builtin_exit:


// return_builtin
// Return size: 0
void return_builtin()
return_builtin_entry:
	// succ:  l0000000000477884
l0000000000477884:
	sp = fp
	sp = sp + -16
	Mem0[sp:word64] = x29
	sp = sp + 8
	Mem0[sp:word64] = x30
	x29 = x31 + 0x0000000000000000
	call no_options (retsize: 0;)
	w1 = 0x00000102
	branch w0 == 0x00000000 l00000000004778A4
	// succ:  l0000000000477898 l00000000004778A4
l0000000000477898:
	w0 = w1
	x29 = Mem0[sp:word64]
	sp = sp + 8
	x30 = Mem0[sp:word64]
	sp = sp + 16
	return
	// succ:  return_builtin_exit
l00000000004778A4:
	x0 = 0x00000000004E3000
	x0 = Mem0[x0 + 3856:word64]
	call get_exitstat (retsize: 0;)
	x1 = 0x00000000004E3000
	x2 = 0x00000000004E3000
	w1 = Mem0[x1 + 1188:word32]
	Mem0[x2 + 856:word32] = w0
	branch w1 != 0x00000000 l00000000004778EC
	// succ:  l00000000004778C4 l00000000004778EC
l00000000004778C4:
	x1 = 0x00000000004BF000
	x1 = x1 + 0x00000000000003D8
	w2 = 0x00000005
	x0 = 0x0000000000000000
	dcgettext(x0, x1, x2)
	sp = sp + 0xFFFFFFFFFFFFFFF8
	call builtin_error (retsize: 0;)
	w1 = 0x00000001
	w0 = w1
	x29 = Mem0[sp:word64]
	sp = sp + 8
	x30 = Mem0[sp:word64]
	sp = sp + 16
	return
	// succ:  return_builtin_exit
l00000000004778EC:
	x0 = 0x00000000004E3000
	x0 = x0 + 0x0000000000000360
	w1 = 0x00000001
	call __longjmp_chk (retsize: 0;)
	sp = sp + -32
	Mem0[sp:word64] = x29
	sp = sp + 8
	Mem0[sp:word64] = x30
	x29 = x31 + 0x0000000000000000
	w31 = w0 - 0x0000002D
	NZCV = cond(w31)
	w0 = (word32) Test(EQ,Z)
	x1 = 0x00000000004DE000
	Mem0[sp + 16:word64] = x19
	Mem0[x1 + 1716:word32] = w0
	x19 = 0x00000000004AA000
	branch w0 == 0x00000000 l000000000047794C
	// succ:  l0000000000477920 l000000000047794C
l0000000000477920:
	x1 = 0x00000000004BD000
	x1 = x1 + 0xFFFFFFFFFFFFFFC0
	w2 = 0x00000000
	x0 = x19 + 0x0000000000000268
	call bind_variable (retsize: 0;)
	x0 = x19 + 0x0000000000000268
	call sv_strict_posix (retsize: 0;)
	w0 = 0x00000000
	x19 = Mem0[sp + 16:word64]
	x29 = Mem0[sp:word64]
	sp = sp + 8
	x30 = Mem0[sp:word64]
	sp = sp + 32
	return
	// succ:  return_builtin_exit
l000000000047794C:
	x0 = x19 + 0x0000000000000268
	call unbind_variable (retsize: 0;)
	x0 = x19 + 0x0000000000000268
	call sv_strict_posix (retsize: 0;)
	w0 = 0x00000000
	x19 = Mem0[sp + 16:word64]
	x29 = Mem0[sp:word64]
	sp = sp + 8
	x30 = Mem0[sp:word64]
	sp = sp + 32
	return
	// succ:  return_builtin_exit
return_builtin_exit:


// fn0000000000477B00
// Return size: 0
void fn0000000000477B00()
fn0000000000477B00_entry:
	// succ:  l0000000000477B00
l0000000000477B00:
	sp = fp
	x4 = x0
	branch w2 != 0x00000000 l0000000000477B28
	// succ:  l0000000000477B08 l0000000000477B28
l0000000000477B08:
	branch w1 != 0x00000000 l0000000000477B4C
	// succ:  l0000000000477B0C l0000000000477B4C
l0000000000477B0C:
	x3 = 0x00000000004BF000
	x1 = 0x00000000004BF000
	x3 = x3 + 0xFFFFFFFFFFFFF888
	w0 = 0x00000001
	x1 = x1 + 0xFFFFFFFFFFFFF890
	x2 = x4
	__printf_chk(x0, x1, Mem0[sp:<unknown>])
	return
	// succ:  fn0000000000477B00_exit
l0000000000477B28:
	NZCV = cond(w1 - w31)
	w3 = 0x0000002B
	x1 = 0x00000000004BF000
	w2 = 0x0000002D
l0000000000477B4C:
	x3 = 0x00000000004AD000
	x1 = 0x00000000004BF000
	x3 = x3 + 0x00000000000001E8
	w0 = 0x00000001
	x1 = x1 + 0xFFFFFFFFFFFFF890
	x2 = x4
	__printf_chk(x0, x1, Mem0[sp:<unknown>])
	return
	// succ:  fn0000000000477B00_exit
fn0000000000477B00_exit:


// minus_o_option_value
// Return size: 0
void minus_o_option_value()
minus_o_option_value_entry:
	// succ:  l0000000000477BB0
l0000000000477BB0:
	sp = fp
	sp = sp + -64
	Mem0[sp:word64] = x29
	sp = sp + 8
	Mem0[sp:word64] = x30
	x29 = x31 + 0x0000000000000000
	Mem0[sp + 48:word64] = x23
	x23 = 0x00000000004BF000
	v9 = sp + 16
	Mem0[v9:word64] = x19
	v9 = v9 + 8
	Mem0[v9:word64] = x20
	v12 = sp + 32
	Mem0[v12:word64] = x21
	v12 = v12 + 8
	Mem0[v12:word64] = x22
	x20 = x23 + 0x0000000000000410
	x1 = 0x00000000004BF000
	x22 = x0
	v16 = Mem0[x0:byte]
	w21 = (word32) v16
	x20 = x20 + 0x0000000000000028
	x1 = x1 + 0xFFFFFFFFFFFFF8B0
	w19 = 0x00000000
	goto l0000000000477BF4
	// succ:  l0000000000477BF4
l0000000000477BE8:
	x1 = Mem0[x20:word64]
	x20 = x20 + 40
	w19 = w19 + 0x00000001
	branch x1 == 0x0000000000000000 l0000000000477C50
	// succ:  l0000000000477BF4 l0000000000477C50
l0000000000477BF4:
	v19 = Mem0[x1:byte]
	w2 = (word32) v19
	NZCV = cond(w2 - w21)
	branch Test(NE,Z) l0000000000477BE8
	// succ:  l0000000000477C00 l0000000000477BE8
l0000000000477C00:
	x0 = x22
	strcmp(x0, x1)
	sp = sp + 0xFFFFFFFFFFFFFFF8
	branch w0 != 0x00000000 l0000000000477BE8
	// succ:  l0000000000477C0C l0000000000477BE8
l0000000000477C0C:
l0000000000477C50:
	w0 = 0xFFFFFFFF
	v23 = sp + 16
	x19 = Mem0[v23:word64]
	v23 = v23 + 8
	x20 = Mem0[v23:word64]
	v24 = sp + 32
	x21 = Mem0[v24:word64]
	v24 = v24 + 8
	x22 = Mem0[v24:word64]
	x23 = Mem0[sp + 48:word64]
	x29 = Mem0[sp:word64]
	sp = sp + 8
	x30 = Mem0[sp:word64]
	sp = sp + 64
	return
	// succ:  minus_o_option_value_exit
minus_o_option_value_exit:


// list_minus_o_opts
// Return size: 0
void list_minus_o_opts()
list_minus_o_opts_entry:
	// succ:  l0000000000477C84
l0000000000477C84:
	sp = fp
	sp = sp + -64
	Mem0[sp:word64] = x29
	sp = sp + 8
	Mem0[sp:word64] = x30
	x29 = x31 + 0x0000000000000000
	v8 = sp + 16
	Mem0[v8:word64] = x19
	v8 = v8 + 8
	Mem0[v8:word64] = x20
	x19 = 0x00000000004BF000
	x19 = x19 + 0x0000000000000410
	x20 = 0x00000000004BF000
	v11 = sp + 32
	Mem0[v11:word64] = x21
	v11 = v11 + 8
	Mem0[v11:word64] = x22
	x19 = x19 + 0x0000000000000008
	w21 = w0
	w22 = w1
	x20 = x20 + 0xFFFFFFFFFFFFF8B0
	// succ:  l0000000000477CB0
l0000000000477CB0:
	w0 = Mem0[x19:word32]
	branch w0 != 0x00000000 l0000000000477D0C
	// succ:  l0000000000477CB8 l0000000000477D0C
l0000000000477CB8:
	x3 = Mem0[x19 + 24:word64]
	branch x3 == 0x0000000000000000 l0000000000477D20
	// succ:  l0000000000477CC0 l0000000000477D20
l0000000000477CC0:
	x0 = x20
	call x3 (retsize: 0;)
	w1 = w0
	// succ:  l0000000000477CCC
l0000000000477CCC:
	Mem0[x29 + 48:word32] = w1
	// succ:  l0000000000477CD0
l0000000000477CD0:
	w31 = w21 + 0x00000001
	NZCV = cond(w31)
	branch Test(EQ,Z) l0000000000477CFC
	// succ:  l0000000000477CD8 l0000000000477CFC
l0000000000477CD8:
	NZCV = cond(w1 - w21)
	branch Test(EQ,Z) l0000000000477CFC
	// succ:  l0000000000477CE0 l0000000000477CFC
l0000000000477CE0:
	x19 = x19 + 0x0000000000000028
	x20 = Mem0[x19 + -8:word64]
	branch x20 != 0x0000000000000000 l0000000000477CB0
	// succ:  l0000000000477CEC l0000000000477CB0
l0000000000477CEC:
	v21 = sp + 16
	x19 = Mem0[v21:word64]
	v21 = v21 + 8
	x20 = Mem0[v21:word64]
	v22 = sp + 32
	x21 = Mem0[v22:word64]
	v22 = v22 + 8
	x22 = Mem0[v22:word64]
	x29 = Mem0[sp:word64]
	sp = sp + 8
	x30 = Mem0[sp:word64]
	sp = sp + 64
	return
	// succ:  list_minus_o_opts_exit
l0000000000477CFC:
	x0 = x20
	w2 = w22
	call fn0000000000477B00 (retsize: 0;)
	goto l0000000000477CE0
	// succ:  l0000000000477CE0
l0000000000477D0C:
	Mem0[x29 + 48:word32] = 0x00000000
	call find_flag (retsize: 0;)
	branch x0 == 0x0000000000000000 l0000000000477D2C
	// succ:  l0000000000477D18 l0000000000477D2C
l0000000000477D18:
	w1 = Mem0[x0:word32]
	goto l0000000000477CD0
	// succ:  l0000000000477CD0
l0000000000477D20:
	x0 = Mem0[x19 + 8:word64]
	w1 = Mem0[x0:word32]
	goto l0000000000477CCC
	// succ:  l0000000000477CCC
l0000000000477D2C:
	w1 = w0
	goto l0000000000477CD0
	// succ:  l0000000000477CD0
list_minus_o_opts_exit:


// get_minus_o_opts
// Return size: 0
void get_minus_o_opts()
get_minus_o_opts_entry:
	// succ:  l0000000000477D34
l0000000000477D34:
	sp = fp
	sp = sp + -16
	Mem0[sp:word64] = x29
	sp = sp + 8
	Mem0[sp:word64] = x30
	x29 = x31 + 0x0000000000000000
	w0 = 0x0000001D
	call strvec_create (retsize: 0;)
	x3 = 0x00000000004BF000
	x3 = x3 + 0x0000000000000410
	x1 = 0x00000000004BF000
	x4 = x0
	x3 = x3 + 0x0000000000000028
	x1 = x1 + 0xFFFFFFFFFFFFF8B0
	w2 = 0x00000000
	// succ:  l0000000000477D60
l0000000000477D60:
	Mem0[x4:word64] = x1
	x4 = x4 + 8
	x1 = Mem0[x3:word64]
	x3 = x3 + 40
	w2 = w2 + 0x00000001
	branch x1 != 0x0000000000000000 l0000000000477D60
	// succ:  l0000000000477D70 l0000000000477D60
l0000000000477D70:
	Mem0[x0 + (int64) ((int32) w2):word64] = x1
	x29 = Mem0[sp:word64]
	sp = sp + 8
	x30 = Mem0[sp:word64]
	sp = sp + 16
	return
	// succ:  get_minus_o_opts_exit
get_minus_o_opts_exit:


// set_minus_o_option
// Return size: 0
void set_minus_o_option()
set_minus_o_option_entry:
	// succ:  l0000000000477D7C
l0000000000477D7C:
	sp = fp
	sp = sp + -80
	Mem0[sp:word64] = x29
	sp = sp + 8
	Mem0[sp:word64] = x30
	x29 = x31 + 0x0000000000000000
	v8 = sp + 16
	Mem0[v8:word64] = x19
	v8 = v8 + 8
	Mem0[v8:word64] = x20
	v11 = sp + 48
	Mem0[v11:word64] = x23
	v11 = v11 + 8
	Mem0[v11:word64] = x24
	Mem0[sp + 64:word64] = x25
	v15 = sp + 32
	Mem0[v15:word64] = x21
	v15 = v15 + 8
	Mem0[v15:word64] = x22
	x24 = 0x00000000004BF000
	x23 = x1
	x20 = x24 + 0x0000000000000410
	v18 = Mem0[x1:byte]
	w21 = (word32) v18
	x1 = 0x00000000004BF000
	w25 = w0
	x20 = x20 + 0x0000000000000028
	x1 = x1 + 0xFFFFFFFFFFFFF8B0
	w19 = 0x00000000
	goto l0000000000477DC8
	// succ:  l0000000000477DC8
l0000000000477DBC:
	x1 = Mem0[x20:word64]
	x20 = x20 + 40
	w19 = w19 + 0x00000001
	branch x1 == 0x0000000000000000 l0000000000477E2C
	// succ:  l0000000000477DC8 l0000000000477E2C
l0000000000477DC8:
	v23 = Mem0[x1:byte]
	w2 = (word32) v23
	NZCV = cond(w2 - w21)
	branch Test(NE,Z) l0000000000477DBC
	// succ:  l0000000000477DD4 l0000000000477DBC
l0000000000477DD4:
	x0 = x23
	strcmp(x0, x1)
	sp = sp + 0xFFFFFFFFFFFFFFF8
	w22 = w0
	branch w0 != 0x00000000 l0000000000477DBC
	// succ:  l0000000000477DE4 l0000000000477DBC
l0000000000477DE4:
l0000000000477E2C:
	x0 = x23
	call sh_invalidoptname (retsize: 0;)
	w19 = 0x00000102
	w0 = w19
	v28 = sp + 32
	x21 = Mem0[v28:word64]
	v28 = v28 + 8
	x22 = Mem0[v28:word64]
	v29 = sp + 16
	x19 = Mem0[v29:word64]
	v29 = v29 + 8
	x20 = Mem0[v29:word64]
	v30 = sp + 48
	x23 = Mem0[v30:word64]
	v30 = v30 + 8
	x24 = Mem0[v30:word64]
	x25 = Mem0[sp + 64:word64]
	x29 = Mem0[sp:word64]
	sp = sp + 8
	x30 = Mem0[sp:word64]
	sp = sp + 80
	return
	// succ:  set_minus_o_option_exit
set_minus_o_option_exit:


// set_shellopts
// Return size: 0
void set_shellopts()
set_shellopts_entry:
	// succ:  l0000000000477E90
l0000000000477E90:
	sp = fp
	sp = sp + -112
	Mem0[sp:word64] = x29
	sp = sp + 8
	Mem0[sp:word64] = x30
	x29 = x31 + 0x0000000000000000
	v8 = sp + 64
	Mem0[v8:word64] = x25
	v8 = v8 + 8
	Mem0[v8:word64] = x26
	x25 = 0x00000000004BF000
	v11 = sp + 16
	Mem0[v11:word64] = x19
	v11 = v11 + 8
	Mem0[v11:word64] = x20
	v14 = sp + 48
	Mem0[v14:word64] = x23
	v14 = v14 + 8
	Mem0[v14:word64] = x24
	x19 = x25 + 0x0000000000000410
	x24 = 0x00000000004BF000
	v17 = sp + 32
	Mem0[v17:word64] = x21
	v17 = v17 + 8
	Mem0[v17:word64] = x22
	x19 = x19 + 0x0000000000000008
	x21 = x29 + 0x0000000000000050
	x20 = x24 + 0xFFFFFFFFFFFFF8B0
	w22 = 0x00000000
	w23 = 0x00000001
	goto l0000000000477F08
	// succ:  l0000000000477F08
l0000000000477ECC:
	x1 = Mem0[x19 + 24:word64]
	branch x1 == 0x0000000000000000 l0000000000478058
	// succ:  l0000000000477ED4 l0000000000478058
l0000000000477ED4:
	call x1 (retsize: 0;)
	NZCV = cond(w0 - w31)
	w1 = (word32) Test(NE,Z)
	// succ:  l0000000000477EE0
l0000000000477EE0:
	x0 = x20
	branch w1 == 0x00000000 l0000000000477EF8
	// succ:  l0000000000477EE8 l0000000000477EF8
l0000000000477EE8:
	strlen(x0)
	sp = sp + 0xFFFFFFFFFFFFFFF8
	w22 = w22 + 0x00000001
	Mem0[x21:byte] = (byte) w23
	w22 = w22 + w0
	// succ:  l0000000000477EF8
l0000000000477EF8:
	x20 = Mem0[x19 + 32:word64]
	x21 = x21 + 0x0000000000000001
	x19 = x19 + 0x0000000000000028
	branch x20 == 0x0000000000000000 l0000000000477F54
	// succ:  l0000000000477F08 l0000000000477F54
l0000000000477F08:
	w1 = Mem0[x19:word32]
	Mem0[x21:byte] = 0x00
	x0 = x20
	branch w1 == 0x00000000 l0000000000477ECC
	// succ:  l0000000000477F18 l0000000000477ECC
l0000000000477F18:
	w0 = w1
	call find_flag (retsize: 0;)
	x1 = x0
	x0 = x20
	branch x1 == 0x0000000000000000 l0000000000477EF8
	// succ:  l0000000000477F2C l0000000000477EF8
l0000000000477F2C:
	w1 = Mem0[x1:word32]
	branch w1 == 0x00000000 l0000000000477EF8
	// succ:  l0000000000477F34 l0000000000477EF8
l0000000000477F34:
	strlen(x0)
	sp = sp + 0xFFFFFFFFFFFFFFF8
	x20 = Mem0[x19 + 32:word64]
	w22 = w22 + 0x00000001
	Mem0[x21:byte] = (byte) w23
	w22 = w22 + w0
	x21 = x21 + 0x0000000000000001
	x19 = x19 + 0x0000000000000028
	branch x20 != 0x0000000000000000 l0000000000477F08
	// succ:  l0000000000477F54 l0000000000477F08
l0000000000477F54:
	w0 = w22 + 0x00000001
	x26 = 0x00000000004BF000
l0000000000478058:
	x0 = Mem0[x19 + 8:word64]
	w0 = Mem0[x0:word32]
	NZCV = cond(w0 - w31)
	w1 = (word32) Test(NE,Z)
	goto l0000000000477EE0
	// succ:  l0000000000477EE0
set_shellopts_exit:


// parse_shellopts
// Return size: 0
void parse_shellopts()
parse_shellopts_entry:
	// succ:  l0000000000478094
l0000000000478094:
	sp = fp
	sp = sp + -64
	Mem0[sp:word64] = x29
	sp = sp + 8
	Mem0[sp:word64] = x30
	x29 = x31 + 0x0000000000000000
	Mem0[sp + 32:word64] = x21
	x21 = 0x00000000004BF000
	v9 = sp + 16
	Mem0[v9:word64] = x19
	v9 = v9 + 8
	Mem0[v9:word64] = x20
	Mem0[x29 + 48:word32] = 0x00000000
	x20 = x0
	x21 = x21 + 0xFFFFFFFFFFFFF8D0
	goto l00000000004780CC
	// succ:  l00000000004780CC
l00000000004780B8:
	call set_minus_o_option (retsize: 0;)
	x0 = x19
	x1 = x21
	w2 = 0x00000222
	call sh_xfree (retsize: 0;)
	// succ:  l00000000004780CC
l00000000004780CC:
	x1 = x29 + 0x0000000000000030
	x0 = x20
	call extract_colon_unit (retsize: 0;)
	x19 = x0
	x1 = x0
	w0 = 0x0000002D
	branch x19 != 0x0000000000000000 l00000000004780B8
	// succ:  l00000000004780E8 l00000000004780B8
l00000000004780E8:
	v13 = sp + 16
	x19 = Mem0[v13:word64]
	v13 = v13 + 8
	x20 = Mem0[v13:word64]
	x21 = Mem0[sp + 32:word64]
	x29 = Mem0[sp:word64]
	sp = sp + 8
	x30 = Mem0[sp:word64]
	sp = sp + 64
	return
	// succ:  parse_shellopts_exit
parse_shellopts_exit:


// initialize_shell_options
// Return size: 0
void initialize_shell_options()
initialize_shell_options_entry:
	// succ:  l00000000004780F8
l00000000004780F8:
	sp = fp
	sp = sp + -32
	Mem0[sp:word64] = x29
	sp = sp + 8
	Mem0[sp:word64] = x30
	x29 = x31 + 0x0000000000000000
	v8 = sp + 16
	Mem0[v8:word64] = x19
	v8 = v8 + 8
	Mem0[v8:word64] = x20
	branch w0 == 0x00000000 l0000000000478114
	// succ:  l0000000000478108 l0000000000478114
l0000000000478108:
	v10 = sp + 16
	x19 = Mem0[v10:word64]
	v10 = v10 + 8
	x20 = Mem0[v10:word64]
	x29 = Mem0[sp:word64]
	sp = sp + 8
	x30 = Mem0[sp:word64]
	sp = sp + 32
	// succ:  l0000000000478110_thunk_set_shellopts
l0000000000478110_thunk_set_shellopts:
	call set_shellopts (retsize: 0;)
	return
	// succ:  initialize_shell_options_exit
l0000000000478114:
	x0 = 0x00000000004BF000
	x0 = x0 + 0xFFFFFFFFFFFFF8C0
	call find_variable (retsize: 0;)
	x19 = x0
	branch x0 == 0x0000000000000000 l0000000000478108
	// succ:  l0000000000478128 l0000000000478108
l0000000000478128:
	w0 = Mem0[x0 + 40:word32]
	branch (w0 & 0x00008000) == 0x00000000 l0000000000478108
	// succ:  l0000000000478130 l0000000000478108
l0000000000478130:
	w1 = 0x00000044
	NZ = cond(w0 & w1)
	C = false
	V = false
	branch Test(NE,Z) l0000000000478108
	// succ:  l000000000047813C l0000000000478108
l000000000047813C:
	x0 = Mem0[x19 + 8:word64]
	x20 = 0x00000000004BF000
	strlen(x0)
	sp = sp + 0xFFFFFFFFFFFFFFF8
	x20 = x20 + 0xFFFFFFFFFFFFF8D0
	x1 = x20
	w2 = 0x00000233
	x0 = x0 + 0x0000000000000001
	call sh_xmalloc (retsize: 0;)
	x1 = Mem0[x19 + 8:word64]
	strcpy(x0, x1)
	sp = sp + 0xFFFFFFFFFFFFFFF8
	x19 = x0
	branch x0 == 0x0000000000000000 l0000000000478108
	// succ:  l000000000047816C l0000000000478108
l000000000047816C:
	call parse_shellopts (retsize: 0;)
	x0 = x19
	x1 = x20
	w2 = 0x00000237
	call sh_xfree (retsize: 0;)
	v19 = sp + 16
	x19 = Mem0[v19:word64]
	v19 = v19 + 8
	x20 = Mem0[v19:word64]
	x29 = Mem0[sp:word64]
	sp = sp + 8
	x30 = Mem0[sp:word64]
	sp = sp + 32
	// succ:  l0000000000478188_thunk_set_shellopts
l0000000000478188_thunk_set_shellopts:
	call set_shellopts (retsize: 0;)
	return
	// succ:  initialize_shell_options_exit
initialize_shell_options_exit:


// reset_shell_options
// Return size: 0
void reset_shell_options()
reset_shell_options_entry:
	// succ:  l000000000047818C
l000000000047818C:
	sp = fp
	w0 = 0x00000001
	x1 = 0x00000000004D7000
	Mem0[x1 + 384:word32] = w0
	x1 = 0x00000000004D7000
	Mem0[x1 + 388:word32] = w0
	x0 = 0x00000000004DE000
	Mem0[x0 + 2732:word32] = 0x00000000
	return
	// succ:  reset_shell_options_exit
reset_shell_options_exit:


// set_builtin
// Return size: 0
void set_builtin()
set_builtin_entry:
	// succ:  l00000000004781AC
l00000000004781AC:
	sp = fp
	sp = sp + -112
	Mem0[sp:word64] = x29
	sp = sp + 8
	Mem0[sp:word64] = x30
	x29 = x31 + 0x0000000000000000
	v6 = sp + 32
	Mem0[v6:word64] = x21
	v6 = v6 + 8
	Mem0[v6:word64] = x22
	v9 = sp + 16
	Mem0[v9:word64] = x19
	v9 = v9 + 8
	Mem0[v9:word64] = x20
	v12 = sp + 48
	Mem0[v12:word64] = x23
	v12 = v12 + 8
	Mem0[v12:word64] = x24
	Mem0[sp + 64:word64] = x25
	x21 = x0
	branch x0 == 0x0000000000000000 l00000000004783A4
	// succ:  l00000000004781CC l00000000004783A4
l00000000004781CC:
	x19 = 0x00000000004D6000
	call reset_internal_getopt (retsize: 0;)
	x19 = x19 + 0xFFFFFFFFFFFFFCE8
	goto l00000000004781E4
	// succ:  l00000000004781E4
l00000000004781DC:
	w31 = w0 - 0x0000003F
	NZCV = cond(w31)
	branch Test(EQ,Z) l00000000004782D8
	// succ:  l00000000004781E4 l00000000004782D8
l00000000004781E4:
	x0 = x21
	x1 = x19
	call internal_getopt (retsize: 0;)
	w31 = w0 + 0x00000001
	NZCV = cond(w31)
	branch Test(NE,Z) l00000000004781DC
	// succ:  l00000000004781F8 l00000000004781DC
l00000000004781F8:
	w25 = 0x00000000
	w23 = w25
	// succ:  l0000000000478200
l0000000000478200:
	x0 = Mem0[x21 + 8:word64]
	x20 = Mem0[x0:word64]
	v24 = Mem0[x20:byte]
	w22 = (word32) v24
	w31 = w22 - 0x0000002D
	NZCV = cond(w31)
	branch Test(EQ,Z) l0000000000478348
	// succ:  l0000000000478214 l0000000000478348
l0000000000478214:
	branch w22 == 0x00000000 l0000000000478418
	// succ:  l0000000000478218 l0000000000478418
l0000000000478218:
	w31 = w22 - 0x0000002B
	NZCV = cond(w31)
	w24 = (word32) Test(EQ,Z)
	branch w24 == 0x00000000 l0000000000478460
	// succ:  l0000000000478224 l0000000000478460
l0000000000478224:
	v27 = Mem0[x20 + 1:byte]
	w19 = (word32) v27
	branch w19 == 0x00000000 l0000000000478288
	// succ:  l000000000047822C l0000000000478288
l000000000047822C:
	w31 = w19 - 0x0000003F
	NZCV = cond(w31)
	branch Test(EQ,Z) l0000000000478328
	// succ:  l0000000000478234 l0000000000478328
l0000000000478234:
	w31 = w19 - 0x0000006F
	NZCV = cond(w31)
	branch Test(NE,Z) l00000000004782A4
	// succ:  l000000000047823C l00000000004782A4
l000000000047823C:
	x19 = Mem0[x21:word64]
	branch x19 == 0x0000000000000000 l0000000000478308
	// succ:  l0000000000478244 l0000000000478308
l0000000000478244:
	x2 = Mem0[x19 + 8:word64]
	x1 = Mem0[x2:word64]
	branch x1 == 0x0000000000000000 l00000000004782C4
	// succ:  l0000000000478250 l00000000004782C4
l0000000000478250:
	v30 = Mem0[x1:byte]
	w3 = (word32) v30
	branch w3 == 0x00000000 l00000000004782C4
	// succ:  l0000000000478258 l00000000004782C4
l0000000000478258:
	w31 = w3 - 0x0000002D
	NZCV = cond(w31)
	branch Test(EQ,Z) l00000000004782C4
	// succ:  l0000000000478260 l00000000004782C4
l0000000000478260:
	w31 = w3 - 0x0000002B
	NZCV = cond(w31)
	branch Test(EQ,Z) l00000000004782C4
	// succ:  l0000000000478268 l00000000004782C4
l0000000000478268:
	w0 = w22
	call set_minus_o_option (retsize: 0;)
	branch w0 != 0x00000000 l0000000000478450
	// succ:  l0000000000478274 l0000000000478450
l0000000000478274:
	x21 = x19
	w23 = 0x00000001
	x20 = x20 + 0x0000000000000001
	// succ:  l0000000000478280
l0000000000478280:
	v32 = Mem0[x20 + 1:byte]
	w19 = (word32) v32
	branch w19 != 0x00000000 l000000000047822C
	// succ:  l0000000000478288 l000000000047822C
l0000000000478288:
	x21 = Mem0[x21:word64]
	branch x21 != 0x0000000000000000 l0000000000478200
	// succ:  l0000000000478290 l0000000000478200
l0000000000478290:
	w0 = w25
	branch w23 == 0x00000000 l00000000004782F0
	// succ:  l0000000000478298 l00000000004782F0
l0000000000478298:
	call set_shellopts (retsize: 0;)
	w0 = w25
	goto l00000000004782F0
	// succ:  l00000000004782F0
l00000000004782A4:
	w0 = w19
	w1 = w22
	call change_flag (retsize: 0;)
	w31 = w0 + 0x00000001
	NZCV = cond(w31)
	branch Test(EQ,Z) l000000000047836C
	// succ:  l00000000004782B8 l000000000047836C
l00000000004782B8:
	w23 = 0x00000001
	x20 = x20 + 0x0000000000000001
	goto l0000000000478280
	// succ:  l0000000000478280
l00000000004782C4:
	w0 = 0xFFFFFFFF
	w1 = w24
	call list_minus_o_opts (retsize: 0;)
	x20 = x20 + 0x0000000000000001
	goto l0000000000478280
	// succ:  l0000000000478280
l00000000004782D8:
	call builtin_usage (retsize: 0;)
	x0 = 0x00000000004E3000
	w0 = Mem0[x0 + 3848:word32]
	w31 = w0 - 0x0000003F
	NZCV = cond(w31)
	w0 = 0x00000102
l00000000004782F0:
	v33 = sp + 16
	x19 = Mem0[v33:word64]
	v33 = v33 + 8
	x20 = Mem0[v33:word64]
	v34 = sp + 32
	x21 = Mem0[v34:word64]
	v34 = v34 + 8
	x22 = Mem0[v34:word64]
	v35 = sp + 48
	x23 = Mem0[v35:word64]
	v35 = v35 + 8
	x24 = Mem0[v35:word64]
	x25 = Mem0[sp + 64:word64]
	x29 = Mem0[sp:word64]
	sp = sp + 8
	x30 = Mem0[sp:word64]
	sp = sp + 112
	return
	// succ:  set_builtin_exit
l0000000000478308:
	w1 = w24
	w0 = 0xFFFFFFFF
	call list_minus_o_opts (retsize: 0;)
	w0 = w25
	call sh_chkwrite (retsize: 0;)
	w25 = w0
	x20 = x20 + 0x0000000000000001
	goto l0000000000478280
	// succ:  l0000000000478280
l0000000000478328:
	call builtin_usage (retsize: 0;)
	w0 = 0x00000000
	v40 = sp + 16
	x19 = Mem0[v40:word64]
	v40 = v40 + 8
	x20 = Mem0[v40:word64]
	v41 = sp + 32
	x21 = Mem0[v41:word64]
	v41 = v41 + 8
	x22 = Mem0[v41:word64]
	v42 = sp + 48
	x23 = Mem0[v42:word64]
	v42 = v42 + 8
	x24 = Mem0[v42:word64]
	x25 = Mem0[sp + 64:word64]
	x29 = Mem0[sp:word64]
	sp = sp + 8
	x30 = Mem0[sp:word64]
	sp = sp + 112
	return
	// succ:  set_builtin_exit
l0000000000478348:
	v43 = Mem0[x20 + 1:byte]
	w0 = (word32) v43
	branch w0 == 0x00000000 l00000000004783F4
	// succ:  l0000000000478350 l00000000004783F4
l0000000000478350:
	w31 = w0 - 0x0000002D
	NZCV = cond(w31)
	w24 = 0x00000000
	branch Test(NE,Z) l0000000000478224
	// succ:  l000000000047835C l0000000000478224
l000000000047835C:
	v44 = Mem0[x20 + 2:byte]
	w0 = (word32) v44
	branch w0 != 0x00000000 l0000000000478224
	// succ:  l0000000000478364 l0000000000478224
l0000000000478364:
	x21 = Mem0[x21:word64]
	goto l0000000000478418
	// succ:  l0000000000478418
l000000000047836C:
	x0 = x29 + 0x0000000000000050
	Mem0[x29 + 80:byte] = (byte) w22
	Mem0[x29 + 81:byte] = (byte) w19
	Mem0[x29 + 82:byte] = 0x00
	call sh_invalidopt (retsize: 0;)
	call builtin_usage (retsize: 0;)
	call set_shellopts (retsize: 0;)
	w0 = 0x00000001
	v37 = sp + 16
	x19 = Mem0[v37:word64]
	v37 = v37 + 8
	x20 = Mem0[v37:word64]
	v38 = sp + 32
	x21 = Mem0[v38:word64]
	v38 = v38 + 8
	x22 = Mem0[v38:word64]
	v39 = sp + 48
	x23 = Mem0[v39:word64]
	v39 = v39 + 8
	x24 = Mem0[v39:word64]
	x25 = Mem0[sp + 64:word64]
	x29 = Mem0[sp:word64]
	sp = sp + 8
	x30 = Mem0[sp:word64]
	sp = sp + 112
	return
	// succ:  set_builtin_exit
l00000000004783A4:
	call all_shell_variables (retsize: 0;)
	x19 = x0
	branch x0 == 0x0000000000000000 l00000000004783C8
	// succ:  l00000000004783B0 l00000000004783C8
l00000000004783B0:
	call print_var_list (retsize: 0;)
	x1 = 0x00000000004BF000
	x0 = x19
	x1 = x1 + 0xFFFFFFFFFFFFF8D0
	w2 = 0x000001C4
	call sh_xfree (retsize: 0;)
	// succ:  l00000000004783C8
l00000000004783C8:
	x0 = 0x00000000004DE000
	w0 = Mem0[x0 + 1716:word32]
	branch w0 == 0x00000000 l0000000000478428
	// succ:  l00000000004783D4 l0000000000478428
l00000000004783D4:
	w0 = 0x00000000
	call sh_chkwrite (retsize: 0;)
	v46 = sp + 16
	x19 = Mem0[v46:word64]
	v46 = v46 + 8
	x20 = Mem0[v46:word64]
	v47 = sp + 32
	x21 = Mem0[v47:word64]
	v47 = v47 + 8
	x22 = Mem0[v47:word64]
	v48 = sp + 48
	x23 = Mem0[v48:word64]
	v48 = v48 + 8
	x24 = Mem0[v48:word64]
	x25 = Mem0[sp + 64:word64]
	x29 = Mem0[sp:word64]
	sp = sp + 8
	x30 = Mem0[sp:word64]
	sp = sp + 112
	return
	// succ:  set_builtin_exit
l00000000004783F4:
	w1 = 0x0000002B
	w0 = 0x00000078
	x21 = Mem0[x21:word64]
	call change_flag (retsize: 0;)
	w0 = 0x00000076
	w1 = 0x0000002B
	call change_flag (retsize: 0;)
	branch x21 == 0x0000000000000000 l0000000000478298
	// succ:  l0000000000478414 l0000000000478298
l0000000000478414:
	w23 = 0x00000001
	// succ:  l0000000000478418
l0000000000478418:
	x0 = x21
	w1 = 0x00000001
	call remember_args (retsize: 0;)
	goto l0000000000478290
	// succ:  l0000000000478290
l0000000000478428:
	call all_shell_functions (retsize: 0;)
	x19 = x0
	branch x0 == 0x0000000000000000 l00000000004783D4
	// succ:  l0000000000478434 l00000000004783D4
l0000000000478434:
	call print_func_list (retsize: 0;)
	x1 = 0x00000000004BF000
	x0 = x19
	x1 = x1 + 0xFFFFFFFFFFFFF8D0
	w2 = 0x000001CF
	call sh_xfree (retsize: 0;)
	goto l00000000004783D4
	// succ:  l00000000004783D4
l0000000000478450:
	Mem0[x29 + 96:word64] = x0
	call set_shellopts (retsize: 0;)
	x0 = Mem0[x29 + 96:word64]
	goto l00000000004782F0
	// succ:  l00000000004782F0
l0000000000478460:
	w31 = w22 - 0x0000002D
	NZCV = cond(w31)
	branch Test(EQ,Z) l0000000000478224
	// succ:  l0000000000478468 l0000000000478224
l0000000000478468:
	goto l0000000000478418
	// succ:  l0000000000478418
set_builtin_exit:


// unset_builtin
// Return size: 0
void unset_builtin()
unset_builtin_entry:
	// succ:  l000000000047846C
l000000000047846C:
	sp = fp
	sp = sp + -96
	Mem0[sp:word64] = x29
	sp = sp + 8
	Mem0[sp:word64] = x30
	x29 = x31 + 0x0000000000000000
	v8 = sp + 16
	Mem0[v8:word64] = x19
	v8 = v8 + 8
	Mem0[v8:word64] = x20
	v11 = sp + 32
	Mem0[v11:word64] = x21
	v11 = v11 + 8
	Mem0[v11:word64] = x22
	x20 = 0x00000000004BF000
	w22 = 0x00000000
	v15 = sp + 48
	Mem0[v15:word64] = x23
	v15 = v15 + 8
	Mem0[v15:word64] = x24
	v18 = sp + 64
	Mem0[v18:word64] = x25
	v18 = v18 + 8
	Mem0[v18:word64] = x26
	Mem0[sp + 80:word64] = x27
	x21 = x0
	w19 = w22
	call reset_internal_getopt (retsize: 0;)
	x20 = x20 + 0xFFFFFFFFFFFFF900
	// succ:  l00000000004784A0
l00000000004784A0:
	x0 = x21
	x1 = x20
	call internal_getopt (retsize: 0;)
	w31 = w0 + 0x00000001
	NZCV = cond(w31)
	branch Test(EQ,Z) l0000000000478500
	// succ:  l00000000004784B4 l0000000000478500
l00000000004784B4:
	w31 = w0 - 0x00000066
	NZCV = cond(w31)
	branch Test(EQ,Z) l00000000004784E8
	// succ:  l00000000004784BC l00000000004784E8
l00000000004784BC:
	w31 = w0 - 0x00000076
	NZCV = cond(w31)
	branch Test(EQ,Z) l0000000000478590
	// succ:  l00000000004784C4 l0000000000478590
l00000000004784C4:
	call builtin_usage (retsize: 0;)
	w0 = 0x00000102
	// succ:  l00000000004784CC
l00000000004784CC:
	v27 = sp + 16
	x19 = Mem0[v27:word64]
	v27 = v27 + 8
	x20 = Mem0[v27:word64]
	v28 = sp + 32
	x21 = Mem0[v28:word64]
	v28 = v28 + 8
	x22 = Mem0[v28:word64]
	v29 = sp + 48
	x23 = Mem0[v29:word64]
	v29 = v29 + 8
	x24 = Mem0[v29:word64]
	v30 = sp + 64
	x25 = Mem0[v30:word64]
	v30 = v30 + 8
	x26 = Mem0[v30:word64]
	x27 = Mem0[sp + 80:word64]
	x29 = Mem0[sp:word64]
	sp = sp + 8
	x30 = Mem0[sp:word64]
	sp = sp + 96
	return
	// succ:  unset_builtin_exit
l00000000004784E8:
	x0 = x21
	x1 = x20
	call internal_getopt (retsize: 0;)
	w31 = w0 + 0x00000001
	NZCV = cond(w31)
	w19 = 0x00000001
	branch Test(NE,Z) l00000000004784B4
	// succ:  l0000000000478500 l00000000004784B4
l0000000000478500:
	x0 = 0x00000000004E3000
	w24 = w22 & w19
	NZ = cond(w24)
	C = false
	V = false
	x20 = Mem0[x0 + 3856:word64]
	branch Test(NE,Z) l00000000004786E8
	// succ:  l0000000000478510 l00000000004786E8
l0000000000478510:
	w0 = w20
	branch x20 == 0x0000000000000000 l00000000004784CC
	// succ:  l0000000000478518 l00000000004784CC
l0000000000478518:
	x27 = 0x00000000004BF000
	w26 = w19 ^ 0x00000001
	x27 = x27 + 0xFFFFFFFFFFFFF978
	// succ:  l0000000000478524
l0000000000478524:
	x0 = Mem0[x20 + 8:word64]
	x21 = Mem0[x0:word64]
	branch w19 == 0x00000000 l000000000047863C
	// succ:  l0000000000478530 l000000000047863C
l0000000000478530:
	x0 = 0x00000000004DE000
	w0 = Mem0[x0 + 1716:word32]
	branch w0 != 0x00000000 l00000000004785B4
	// succ:  l000000000047853C l00000000004785B4
l000000000047853C:
	x0 = x21
	call find_function (retsize: 0;)
	w23 = 0x00000000
	// succ:  l0000000000478548
l0000000000478548:
	x31 = x0 - x31
	NZCV = cond(x31)
	w2 = (word32) Test(NE,Z)
	branch w2 != 0x00000000 l00000000004785D8
	// succ:  l0000000000478554 l00000000004785D8
l0000000000478554:
	x0 = x21
	branch w19 == 0x00000000 l00000000004786B4
	// succ:  l000000000047855C l00000000004786B4
l000000000047855C:
	call unbind_func (retsize: 0;)
	w31 = w0 + 0x00000001
	NZCV = cond(w31)
	w23 = (word32) Test(EQ,Z)
	// succ:  l0000000000478568
l0000000000478568:
	branch w23 == 0x00000000 l00000000004785A8
	// succ:  l000000000047856C l00000000004785A8
l000000000047856C:
	branch w26 == 0x00000000 l00000000004785A8
	// succ:  l0000000000478570 l00000000004785A8
l0000000000478570:
	branch w22 == 0x00000000 l00000000004786D4
	// succ:  l0000000000478574 l00000000004786D4
l0000000000478574:
	x0 = x21
	call stupidly_hack_special_variables (retsize: 0;)
	x20 = Mem0[x20:word64]
	// succ:  l0000000000478580
l0000000000478580:
	branch x20 != 0x0000000000000000 l0000000000478524
	// succ:  l0000000000478584 l0000000000478524
l0000000000478584:
	NZCV = cond(w24 - w31)
	w0 = (word32) Test(NE,Z)
	goto l00000000004784CC
	// succ:  l00000000004784CC
l0000000000478590:
	w22 = 0x00000001
	goto l00000000004784A0
	// succ:  l00000000004784A0
l0000000000478598:
	x1 = x25
	call unbind_array_element (retsize: 0;)
	w31 = w0 + 0x00000001
	NZCV = cond(w31)
	branch Test(EQ,Z) l00000000004786E0
	// succ:  l00000000004785A8 l00000000004786E0
l00000000004785A8:
	branch w19 == 0x00000000 l0000000000478574
	// succ:  l00000000004785AC l0000000000478574
l00000000004785AC:
	x20 = Mem0[x20:word64]
	goto l0000000000478580
	// succ:  l0000000000478580
l00000000004785B4:
	x0 = x21
	call legal_identifier (retsize: 0;)
	branch w0 != 0x00000000 l000000000047853C
	// succ:  l00000000004785C0 l000000000047853C
l00000000004785C0:
	x0 = x21
	call sh_invalidid (retsize: 0;)
	x20 = Mem0[x20:word64]
	w24 = w24 + 0x00000001
	branch x20 != 0x0000000000000000 l0000000000478524
	// succ:  l00000000004785D4 l0000000000478524
l00000000004785D4:
	goto l0000000000478584
	// succ:  l0000000000478584
l00000000004785D8:
	w3 = Mem0[x0 + 40:word32]
	branch w26 == 0x00000000 l00000000004785E4
	// succ:  l00000000004785E0 l00000000004785E4
l00000000004785E0:
	branch (w3 & 0x00002000) == 0x00000000 l0000000000478628
	// succ:  l00000000004785E4 l0000000000478628
l00000000004785E4:
	branch (w3 & 0x00000002) == 0x00000000 l000000000047867C
	// succ:  l00000000004785E8 l000000000047867C
l00000000004785E8:
	w23 = w23 & w2
	NZ = cond(w23)
	C = false
	V = false
	branch Test(EQ,Z) l0000000000478554
	// succ:  l00000000004785F0 l0000000000478554
l00000000004785F0:
	w2 = Mem0[x0 + 40:word32]
	w3 = 0x00000044
	NZ = cond(w2 & w3)
	C = false
	V = false
	branch Test(NE,Z) l0000000000478598
	// succ:  l0000000000478600 l0000000000478598
l0000000000478600:
	w2 = 0x00000005
	x0 = 0x0000000000000000
	x1 = x27
	// succ:  l000000000047860C
l000000000047860C:
	dcgettext(x0, x1, x2)
	sp = sp + 0xFFFFFFFFFFFFFFF8
	x1 = x21
	call builtin_error (retsize: 0;)
	x20 = Mem0[x20:word64]
	w24 = w24 + 0x00000001
	branch x20 != 0x0000000000000000 l0000000000478524
	// succ:  l0000000000478624 l0000000000478524
l0000000000478624:
	goto l0000000000478584
	// succ:  l0000000000478584
l0000000000478628:
	x1 = 0x00000000004BF000
	w2 = 0x00000005
	x0 = 0x0000000000000000
	x1 = x1 + 0xFFFFFFFFFFFFF940
	goto l000000000047860C
	// succ:  l000000000047860C
l000000000047863C:
	x0 = x21
	call valid_array_reference (retsize: 0;)
	w23 = w19
	branch w0 == 0x00000000 l0000000000478664
	// succ:  l000000000047864C l0000000000478664
l000000000047864C:
	x0 = x21
	w1 = 0x0000005B
	strchr(x0, x1)
	sp = sp + 0xFFFFFFFFFFFFFFF8
	x25 = x0 + 0x0000000000000001
	Mem0[x0:byte] = (byte) w19
	w23 = 0x00000001
	// succ:  l0000000000478664
l0000000000478664:
	x0 = x21
	call legal_identifier (retsize: 0;)
	branch w0 == 0x00000000 l00000000004785C0
	// succ:  l0000000000478670 l00000000004785C0
l0000000000478670:
	x0 = x21
	call find_variable (retsize: 0;)
	goto l0000000000478548
	// succ:  l0000000000478548
l000000000047867C:
	x1 = 0x00000000004BF000
	x0 = 0x0000000000000000
	x1 = x1 + 0xFFFFFFFFFFFFF958
	w2 = 0x00000005
	dcgettext(x0, x1, x2)
	sp = sp + 0xFFFFFFFFFFFFFFF8
	branch w19 == 0x00000000 l00000000004786C8
	// succ:  l0000000000478694 l00000000004786C8
l0000000000478694:
	x2 = 0x00000000004AB000
	x2 = x2 + 0xFFFFFFFFFFFFFEA8
	// succ:  l000000000047869C
l000000000047869C:
	x1 = x21
	call builtin_error (retsize: 0;)
	x20 = Mem0[x20:word64]
	w24 = w24 + 0x00000001
	branch x20 != 0x0000000000000000 l0000000000478524
	// succ:  l00000000004786B0 l0000000000478524
l00000000004786B0:
	goto l0000000000478584
	// succ:  l0000000000478584
l00000000004786B4:
	call unbind_variable (retsize: 0;)
	w31 = w0 + 0x00000001
	NZCV = cond(w31)
	branch Test(NE,Z) l0000000000478574
	// succ:  l00000000004786C0 l0000000000478574
l00000000004786C0:
	branch w26 != 0x00000000 l0000000000478570
	// succ:  l00000000004786C4 l0000000000478570
l00000000004786C4:
	goto l0000000000478574
	// succ:  l0000000000478574
l00000000004786C8:
	x2 = 0x00000000004AF000
	x2 = x2 + 0x00000000000001A0
	goto l000000000047869C
	// succ:  l000000000047869C
l00000000004786D4:
	x0 = x21
	call unbind_func (retsize: 0;)
	goto l0000000000478574
	// succ:  l0000000000478574
l00000000004786E0:
	w24 = w24 + 0x00000001
	goto l0000000000478568
	// succ:  l0000000000478568
l00000000004786E8:
	x1 = 0x00000000004BF000
	x1 = x1 + 0xFFFFFFFFFFFFF908
	w2 = 0x00000005
	x0 = 0x0000000000000000
	dcgettext(x0, x1, x2)
	sp = sp + 0xFFFFFFFFFFFFFFF8
	call builtin_error (retsize: 0;)
	w0 = 0x00000001
	goto l00000000004784CC
	// succ:  l00000000004784CC
unset_builtin_exit:


// show_var_attributes
// Return size: 0
void show_var_attributes()
show_var_attributes_entry:
	// succ:  l0000000000478708
l0000000000478708:
	sp = fp
	sp = sp + -80
	Mem0[sp:word64] = x29
	sp = sp + 8
	Mem0[sp:word64] = x30
	x29 = x31 + 0x0000000000000000
	v8 = sp + 32
	Mem0[v8:word64] = x21
	v8 = v8 + 8
	Mem0[v8:word64] = x22
	v11 = sp + 16
	Mem0[v11:word64] = x19
	v11 = v11 + 8
	Mem0[v11:word64] = x20
	Mem0[sp + 48:word64] = x23
	w21 = w1
	x20 = x0
	w22 = w2
	branch w1 == 0x00000000 l0000000000478738
	// succ:  l000000000047872C l0000000000478738
l000000000047872C:
	x23 = 0x00000000004DE000
	w0 = Mem0[x23 + 1716:word32]
	branch w0 != 0x00000000 l0000000000478870
	// succ:  l0000000000478738 l0000000000478870
l0000000000478738:
	w3 = Mem0[x20 + 40:word32]
	w19 = 0x00000000
	branch (w3 & 0x00000004) == 0x00000000 l0000000000478750
	// succ:  l0000000000478744 l0000000000478750
l0000000000478744:
	w0 = 0x00000061
	Mem0[x29 + 64:byte] = (byte) w0
	w19 = 0x00000001
	// succ:  l0000000000478750
l0000000000478750:
	branch (w3 & 0x00000040) == 0x00000000 l0000000000478768
	// succ:  l0000000000478754 l0000000000478768
l0000000000478754:
l0000000000478768:
	w0 = w3 & 0x00000008
	branch (w3 & 0x00000008) == 0x00000000 l0000000000478784
	// succ:  l0000000000478770 l0000000000478784
l0000000000478770:
l0000000000478784:
	branch (w3 & 0x00000010) == 0x00000000 l000000000047879C
	// succ:  l0000000000478788 l000000000047879C
l0000000000478788:
l000000000047879C:
	branch (w3 & 0x00000002) == 0x00000000 l00000000004787B4
	// succ:  l00000000004787A0 l00000000004787B4
l00000000004787A0:
l00000000004787B4:
	branch (w3 & 0x00000080) == 0x00000000 l00000000004787CC
	// succ:  l00000000004787B8 l00000000004787CC
l00000000004787B8:
l00000000004787CC:
	branch (w3 & 0x00000001) == 0x00000000 l00000000004787E4
	// succ:  l00000000004787D0 l00000000004787E4
l00000000004787D0:
l00000000004787E4:
	branch (w3 & 0x00000400) == 0x00000000 l00000000004787FC
	// succ:  l00000000004787E8 l00000000004787FC
l00000000004787E8:
l00000000004787FC:
	branch (w3 & 0x00000200) == 0x00000000 l0000000000478814
	// succ:  l0000000000478800 l0000000000478814
l0000000000478800:
l0000000000478814:
	branch (w3 & 0x00000100) == 0x00000000 l000000000047882C
	// succ:  l0000000000478818 l000000000047882C
l0000000000478818:
l000000000047882C:
	x3 = x29 + 0x0000000000000040
l0000000000478870:
	w0 = Mem0[x20 + 40:word32]
	w19 = 0x00000000
	branch (w0 & 0x00000004) == 0x00000000 l0000000000478888
	// succ:  l000000000047887C l0000000000478888
l000000000047887C:
	w1 = 0x00000061
	Mem0[x29 + 64:byte] = (byte) w1
	w19 = 0x00000001
	// succ:  l0000000000478888
l0000000000478888:
	branch (w0 & 0x00000040) == 0x00000000 l00000000004788A0
	// succ:  l000000000047888C l00000000004788A0
l000000000047888C:
l00000000004788A0:
	w1 = w0 & 0x00000008
	branch (w0 & 0x00000008) == 0x00000000 l0000000000478A28
	// succ:  l00000000004788A8 l0000000000478A28
l00000000004788A8:
	w0 = w19 + 0x00000001
	x3 = x29 + 0x0000000000000040
l0000000000478A28:
	x0 = x29 + 0x0000000000000040
show_var_attributes_exit:


// show_all_var_attributes
// Return size: 0
void show_all_var_attributes()
show_all_var_attributes_entry:
	// succ:  l0000000000478A7C
l0000000000478A7C:
	sp = fp
	sp = sp + -64
	Mem0[sp:word64] = x29
	sp = sp + 8
	Mem0[sp:word64] = x30
	x29 = x31 + 0x0000000000000000
	v8 = sp + 16
	Mem0[v8:word64] = x19
	v8 = v8 + 8
	Mem0[v8:word64] = x20
	v11 = sp + 32
	Mem0[v11:word64] = x21
	v11 = v11 + 8
	Mem0[v11:word64] = x22
	v14 = sp + 48
	Mem0[v14:word64] = x23
	v14 = v14 + 8
	Mem0[v14:word64] = x24
	w20 = w1
	branch w0 == 0x00000000 l0000000000478B18
	// succ:  l0000000000478A98 l0000000000478B18
l0000000000478A98:
	call all_shell_variables (retsize: 0;)
	x24 = x0
	branch x24 == 0x0000000000000000 l0000000000478B24
	// succ:  l0000000000478AA4 l0000000000478B24
l0000000000478AA4:
	x0 = Mem0[x24:word64]
	branch x0 == 0x0000000000000000 l0000000000478B40
	// succ:  l0000000000478AAC l0000000000478B40
l0000000000478AAC:
	x21 = 0x0000000000479000
	x23 = 0x0000000000479000
	x19 = x24 + 0x0000000000000008
	x22 = 0x00000000004E1000
	x21 = x21 + 0x00000000000001BC
	x23 = x23 + 0x00000000000001B0
	goto l0000000000478AEC
	// succ:  l0000000000478AEC
l0000000000478AC8:
	x31 = x3 - x23
	NZCV = cond(x31)
	w1 = (word32) Test(EQ,Z)
	w2 = w20
	call show_var_attributes (retsize: 0;)
	w0 = 0x00000000
	call sh_chkwrite (retsize: 0;)
	branch w0 != 0x00000000 l0000000000478B10
	// succ:  l0000000000478AE4 l0000000000478B10
l0000000000478AE4:
	x0 = Mem0[x19:word64]
	x19 = x19 + 8
	branch x0 == 0x0000000000000000 l0000000000478B40
	// succ:  l0000000000478AEC l0000000000478B40
l0000000000478AEC:
	x3 = Mem0[x22 + 1688:word64]
	x31 = x3 - x21
	NZCV = cond(x31)
	branch Test(NE,Z) l0000000000478AC8
	// succ:  l0000000000478AF8 l0000000000478AC8
l0000000000478AF8:
	w1 = 0x00000001
	w2 = w20
	call show_var_attributes (retsize: 0;)
	w0 = 0x00000000
	call sh_chkwrite (retsize: 0;)
	branch w0 == 0x00000000 l0000000000478AE4
	// succ:  l0000000000478B10 l0000000000478AE4
l0000000000478B10:
	w19 = 0x00000001
	goto l0000000000478B44
	// succ:  l0000000000478B44
l0000000000478B18:
	call all_shell_functions (retsize: 0;)
	x24 = x0
	branch x24 != 0x0000000000000000 l0000000000478AA4
	// succ:  l0000000000478B24 l0000000000478AA4
l0000000000478B24:
	w19 = w24
	w0 = w19
	v21 = sp + 32
	x21 = Mem0[v21:word64]
	v21 = v21 + 8
	x22 = Mem0[v21:word64]
	v22 = sp + 16
	x19 = Mem0[v22:word64]
	v22 = v22 + 8
	x20 = Mem0[v22:word64]
	v23 = sp + 48
	x23 = Mem0[v23:word64]
	v23 = v23 + 8
	x24 = Mem0[v23:word64]
	x29 = Mem0[sp:word64]
	sp = sp + 8
	x30 = Mem0[sp:word64]
	sp = sp + 64
	return
	// succ:  show_all_var_attributes_exit
l0000000000478B40:
	w19 = 0x00000000
	// succ:  l0000000000478B44
l0000000000478B44:
	x1 = 0x00000000004BF000
	x0 = x24
	x1 = x1 + 0xFFFFFFFFFFFFFAD8
	w2 = 0x0000014E
	call sh_xfree (retsize: 0;)
	w0 = w19
	v29 = sp + 32
	x21 = Mem0[v29:word64]
	v29 = v29 + 8
	x22 = Mem0[v29:word64]
	v30 = sp + 16
	x19 = Mem0[v30:word64]
	v30 = v30 + 8
	x20 = Mem0[v30:word64]
	v31 = sp + 48
	x23 = Mem0[v31:word64]
	v31 = v31 + 8
	x24 = Mem0[v31:word64]
	x29 = Mem0[sp:word64]
	sp = sp + 8
	x30 = Mem0[sp:word64]
	sp = sp + 64
	return
	// succ:  show_all_var_attributes_exit
show_all_var_attributes_exit:


// show_name_attributes
// Return size: 0
void show_name_attributes()
show_name_attributes_entry:
	// succ:  l0000000000478B70
l0000000000478B70:
	sp = fp
	sp = sp + -32
	Mem0[sp:word64] = x29
	sp = sp + 8
	Mem0[sp:word64] = x30
	x29 = x31 + 0x0000000000000000
	v8 = sp + 16
	Mem0[v8:word64] = x19
	v8 = v8 + 8
	Mem0[v8:word64] = x20
	w20 = w1
	w1 = 0x00000001
	call find_variable_internal (retsize: 0;)
	branch x0 == 0x0000000000000000 l0000000000478BD8
	// succ:  l0000000000478B8C l0000000000478BD8
l0000000000478B8C:
	w3 = Mem0[x0 + 40:word32]
	w19 = w3 & 0x00001000
	branch (w3 & 0x00001000) == 0x00000000 l0000000000478BD8
	// succ:  l0000000000478B98 l0000000000478BD8
l0000000000478B98:
	x1 = 0x00000000004E1000
	x3 = Mem0[x1 + 1688:word64]
	x1 = 0x0000000000479000
	x1 = x1 + 0x00000000000001BC
	x31 = x3 - x1
	NZCV = cond(x31)
	branch Test(EQ,Z) l0000000000478BEC
	// succ:  l0000000000478BB0 l0000000000478BEC
l0000000000478BB0:
	x1 = 0x0000000000479000
	x1 = x1 + 0x00000000000001B0
	x31 = x3 - x1
	NZCV = cond(x31)
	w1 = (word32) Test(EQ,Z)
	// succ:  l0000000000478BC0
l0000000000478BC0:
	w2 = w20
	call show_var_attributes (retsize: 0;)
	w0 = w19
	v20 = sp + 16
	x19 = Mem0[v20:word64]
	v20 = v20 + 8
	x20 = Mem0[v20:word64]
	x29 = Mem0[sp:word64]
	sp = sp + 8
	x30 = Mem0[sp:word64]
	sp = sp + 32
	return
	// succ:  show_name_attributes_exit
l0000000000478BD8:
	w19 = 0x00000001
	w0 = w19
	v21 = sp + 16
	x19 = Mem0[v21:word64]
	v21 = v21 + 8
	x20 = Mem0[v21:word64]
	x29 = Mem0[sp:word64]
	sp = sp + 8
	x30 = Mem0[sp:word64]
	sp = sp + 32
	return
	// succ:  show_name_attributes_exit
l0000000000478BEC:
	w1 = 0x00000001
	goto l0000000000478BC0
	// succ:  l0000000000478BC0
show_name_attributes_exit:


// set_var_attribute
// Return size: 0
void set_var_attribute()
set_var_attribute_entry:
	// succ:  l0000000000478BF4
l0000000000478BF4:
	sp = fp
	sp = sp + -64
	Mem0[sp:word64] = x29
	sp = sp + 8
	Mem0[sp:word64] = x30
	x29 = x31 + 0x0000000000000000
	v8 = sp + 32
	Mem0[v8:word64] = x21
	v8 = v8 + 8
	Mem0[v8:word64] = x22
	v11 = sp + 16
	Mem0[v11:word64] = x19
	v11 = v11 + 8
	Mem0[v11:word64] = x20
	Mem0[sp + 48:word64] = x23
	x22 = x0
	w21 = w1
	branch w2 == 0x00000000 l0000000000478C54
	// succ:  l0000000000478C14 l0000000000478C54
l0000000000478C14:
	call find_variable (retsize: 0;)
	branch x0 == 0x0000000000000000 l0000000000478C40
	// succ:  l0000000000478C1C l0000000000478C40
l0000000000478C1C:
	w1 = Mem0[x0 + 40:word32]
	w1 = w1 & ~w21
	Mem0[x0 + 40:word32] = w1
	// succ:  l0000000000478C28
l0000000000478C28:
	w21 = w1 | w21
	branch (w21 & 0x00000001) == 0x00000000 l0000000000478C40
	// succ:  l0000000000478C30 l0000000000478C40
l0000000000478C30:
	x0 = 0x00000000004D6000
	w1 = Mem0[x0 + 2648:word32]
	w1 = w1 + 0x00000001
	Mem0[x0 + 2648:word32] = w1
	// succ:  l0000000000478C40
l0000000000478C40:
	v20 = sp + 16
	x19 = Mem0[v20:word64]
	v20 = v20 + 8
	x20 = Mem0[v20:word64]
	v21 = sp + 32
	x21 = Mem0[v21:word64]
	v21 = v21 + 8
	x22 = Mem0[v21:word64]
	x23 = Mem0[sp + 48:word64]
	x29 = Mem0[sp:word64]
	sp = sp + 8
	x30 = Mem0[sp:word64]
	sp = sp + 64
	return
	// succ:  set_var_attribute_exit
l0000000000478C54:
	call find_tempenv_variable (retsize: 0;)
	x19 = x0
	branch x0 == 0x0000000000000000 l0000000000478D10
	// succ:  l0000000000478C60 l0000000000478D10
l0000000000478C60:
	w0 = Mem0[x0 + 40:word32]
	branch (w0 & 0x00000000) == 0x00000000 l0000000000478D10
	// succ:  l0000000000478C68 l0000000000478D10
l0000000000478C68:
	x0 = Mem0[x19 + 8:word64]
	branch x0 == 0x0000000000000000 l0000000000478D44
	// succ:  l0000000000478C70 l0000000000478D44
l0000000000478C70:
	strlen(x0)
	sp = sp + 0xFFFFFFFFFFFFFFF8
	x22 = 0x00000000004BF000
	x1 = x22 + 0xFFFFFFFFFFFFFAD8
	w2 = 0x000001E3
	x0 = x0 + 0x0000000000000001
	call sh_xmalloc (retsize: 0;)
	x1 = Mem0[x19 + 8:word64]
	strcpy(x0, x1)
	sp = sp + 0xFFFFFFFFFFFFFFF8
	x23 = x0
	// succ:  l0000000000478C94
l0000000000478C94:
	x0 = Mem0[x19:word64]
	x1 = x23
	w2 = 0x00000000
	call bind_variable (retsize: 0;)
	w1 = Mem0[x19 + 40:word32]
	x20 = x0
	w0 = Mem0[x0 + 40:word32]
	w1 = w1 & 0xFFEFFFFF
	w0 = w0 | w1
	Mem0[x20 + 40:word32] = w0
	w2 = Mem0[x19 + 40:word32]
	w0 = Mem0[x20 + 44:word32]
	w2 = w2 | 0x00200000
	Mem0[x19 + 40:word32] = w2
	branch w0 == 0x00000000 l0000000000478CE0
	// succ:  l0000000000478CD0 l0000000000478CE0
l0000000000478CD0:
	w0 = Mem0[x20 + 40:word32]
	w0 = w0 | 0x00200000
	Mem0[x20 + 40:word32] = w0
	w2 = Mem0[x19 + 40:word32]
	// succ:  l0000000000478CE0
l0000000000478CE0:
	w2 = w2 | w21
	x0 = Mem0[x19:word64]
	Mem0[x19 + 40:word32] = w2
	call stupidly_hack_special_variables (retsize: 0;)
	x1 = x22 + 0xFFFFFFFFFFFFFAD8
	x0 = x23
	w2 = 0x000001EE
	call sh_xfree (retsize: 0;)
	w1 = Mem0[x20 + 40:word32]
	// succ:  l0000000000478D04
l0000000000478D04:
	w1 = w1 | w21
	Mem0[x20 + 40:word32] = w1
	goto l0000000000478C28
	// succ:  l0000000000478C28
l0000000000478D10:
	x0 = x22
	w1 = 0x00000000
	call find_variable_internal (retsize: 0;)
	x20 = x0
	branch x0 == 0x0000000000000000 l0000000000478D6C
	// succ:  l0000000000478D24 l0000000000478D6C
l0000000000478D24:
	w0 = Mem0[x0 + 44:word32]
	w1 = Mem0[x20 + 40:word32]
	branch w0 == 0x00000000 l0000000000478D04
	// succ:  l0000000000478D30 l0000000000478D04
l0000000000478D30:
	w1 = w1 | 0x00200000
	Mem0[x20 + 40:word32] = w1
	w1 = w1 | w21
	Mem0[x20 + 40:word32] = w1
	goto l0000000000478C28
	// succ:  l0000000000478C28
l0000000000478D44:
	x22 = 0x00000000004BF000
	x1 = x22 + 0xFFFFFFFFFFFFFAD8
	x0 = 0x0000000000000001
	w2 = 0x000001E3
	call sh_xmalloc (retsize: 0;)
	x1 = 0x00000000004AC000
	v19 = Mem0[x1 + 1120:byte]
	w1 = (word32) v19
	x23 = x0
	Mem0[x0:byte] = (byte) w1
	goto l0000000000478C94
	// succ:  l0000000000478C94
l0000000000478D6C:
	x1 = x0
	w2 = w20
	x0 = x22
	call bind_variable (retsize: 0;)
	w1 = Mem0[x0 + 40:word32]
	x20 = x0
	w1 = w1 | 0x00001000
	Mem0[x0 + 40:word32] = w1
	goto l0000000000478D04
	// succ:  l0000000000478D04
set_var_attribute_exit:


// set_or_show_attributes
// Return size: 0
void set_or_show_attributes()
set_or_show_attributes_entry:
	// succ:  l0000000000478D90
l0000000000478D90:
	sp = fp
	sp = sp + -160
	Mem0[sp:word64] = x29
	sp = sp + 8
	Mem0[sp:word64] = x30
	x29 = x31 + 0x0000000000000000
	v8 = sp + 16
	Mem0[v8:word64] = x19
	v8 = v8 + 8
	Mem0[v8:word64] = x20
	v11 = sp + 32
	Mem0[v11:word64] = x21
	v11 = v11 + 8
	Mem0[v11:word64] = x22
	v14 = sp + 64
	Mem0[v14:word64] = x25
	v14 = v14 + 8
	Mem0[v14:word64] = x26
	w22 = 0x00000000
	x19 = 0x00000000004BF000
	x25 = 0x00000000004BF000
	v18 = sp + 48
	Mem0[v18:word64] = x23
	v18 = v18 + 8
	Mem0[v18:word64] = x24
	v21 = sp + 80
	Mem0[v21:word64] = x27
	v21 = v21 + 8
	Mem0[v21:word64] = x28
	x20 = x0
	w23 = w1
	w27 = w2
	w26 = w22
	call reset_internal_getopt (retsize: 0;)
	w21 = w22
	w24 = w22
	x19 = x19 + 0xFFFFFFFFFFFFFB10
	x25 = x25 + 0xFFFFFFFFFFFFFA90
	x0 = x20
	x1 = x19
	call internal_getopt (retsize: 0;)
	w31 = w0 + 0x00000001
	NZCV = cond(w31)
	branch Test(EQ,Z) l0000000000478E4C
	// succ:  l0000000000478DF0 l0000000000478E4C
l0000000000478DF0:
	w3 = w0 - 0x00000041
	w31 = w3 - 0x0000002F
	NZCV = cond(w31)
	branch Test(ULE,ZC) l0000000000478E24
	// succ:  l0000000000478DFC l0000000000478E24
l0000000000478DFC:
	call builtin_usage (retsize: 0;)
	w19 = 0x00000102
	// succ:  l0000000000478E04
l0000000000478E04:
	w0 = w19
	v38 = sp + 32
	x21 = Mem0[v38:word64]
	v38 = v38 + 8
	x22 = Mem0[v38:word64]
	v39 = sp + 16
	x19 = Mem0[v39:word64]
	v39 = v39 + 8
	x20 = Mem0[v39:word64]
	v40 = sp + 48
	x23 = Mem0[v40:word64]
	v40 = v40 + 8
	x24 = Mem0[v40:word64]
	v41 = sp + 64
	x25 = Mem0[v41:word64]
	v41 = v41 + 8
	x26 = Mem0[v41:word64]
	v42 = sp + 80
	x27 = Mem0[v42:word64]
	v42 = v42 + 8
	x28 = Mem0[v42:word64]
	x29 = Mem0[sp:word64]
	sp = sp + 8
	x30 = Mem0[sp:word64]
	sp = sp + 160
	return
	// succ:  set_or_show_attributes_exit
l0000000000478E24:
	v49 = Mem0[x25 + (uint64) ((uint32) w3):byte]
	w0 = (word32) v49
	x1 = 0x0000000000478E34
	x0 = x1 + (int64) ((int8) w0)
	call x0 (retsize: 0;)
	return
	// succ:  set_or_show_attributes_exit
l0000000000478E4C:
	x0 = 0x00000000004E3000
	x19 = Mem0[x0 + 3856:word64]
	branch x19 == 0x0000000000000000 l0000000000479084
	// succ:  l0000000000478E58 l0000000000479084
l0000000000478E58:
	branch (w23 & 0x00000001) == 0x00000000 l0000000000478E68
	// succ:  l0000000000478E5C l0000000000478E68
l0000000000478E5C:
	w1 = 0x00000001
	x0 = 0x00000000004D6000
	Mem0[x0 + 2648:word32] = w1
	// succ:  l0000000000478E68
l0000000000478E68:
	branch w24 == 0x00000000 l0000000000478E7C
	// succ:  l0000000000478E6C l0000000000478E7C
l0000000000478E6C:
	w1 = w23 & 0x00000002
	w0 = w23 & 0xFFFFFFFD
	NZCV = cond(w1 - w31)
l0000000000478E7C:
	Mem0[x29 + 96:word32] = 0x00000000
	w0 = Mem0[x29 + 96:word32]
	Mem0[x29 + 100:word32] = w0
	x0 = 0x00000000004BF000
	x0 = x0 + 0xFFFFFFFFFFFFFAD8
	Mem0[x29 + 112:word64] = x0
	x0 = 0x00000000004BF000
	x0 = x0 + 0xFFFFFFFFFFFFFB38
	Mem0[x29 + 120:word64] = x0
	x0 = 0x00000000004BF000
	x0 = x0 + 0xFFFFFFFFFFFFFB30
	Mem0[x29 + 128:word64] = x0
	goto l0000000000478ED4
	// succ:  l0000000000478ED4
l0000000000478EB0:
	call find_function (retsize: 0;)
	x3 = x0
	branch x0 == 0x0000000000000000 l000000000047905C
	// succ:  l0000000000478EBC l000000000047905C
l0000000000478EBC:
	w0 = Mem0[x0 + 40:word32]
	branch w24 != 0x00000000 l0000000000479018
	// succ:  l0000000000478EC4 l0000000000479018
l0000000000478EC4:
	w0 = w0 | w23
	Mem0[x3 + 40:word32] = w0
	// succ:  l0000000000478ECC
l0000000000478ECC:
	x19 = Mem0[x19:word64]
	branch x19 == 0x0000000000000000 l0000000000478F14
	// succ:  l0000000000478ED4 l0000000000478F14
l0000000000478ED4:
	x3 = Mem0[x19 + 8:word64]
	x20 = Mem0[x3:word64]
	x0 = x20
	branch w21 != 0x00000000 l0000000000478EB0
	// succ:  l0000000000478EE4 l0000000000478EB0
l0000000000478EE4:
	w1 = w21
	call assignment (retsize: 0;)
	branch w0 != 0x00000000 l0000000000478F48
	// succ:  l0000000000478EF0 l0000000000478F48
l0000000000478EF0:
	x0 = x20
	call legal_identifier (retsize: 0;)
	branch w0 == 0x00000000 l0000000000479180
	// succ:  l0000000000478EFC l0000000000479180
l0000000000478EFC:
	x0 = x20
	w1 = w23
	w2 = w24
	call set_var_attribute (retsize: 0;)
	x19 = Mem0[x19:word64]
	branch x19 != 0x0000000000000000 l0000000000478ED4
	// succ:  l0000000000478F14 l0000000000478ED4
l0000000000478F14:
	w0 = Mem0[x29 + 96:word32]
	w19 = 0x00000104
	branch w0 != 0x00000000 l0000000000478E04
	// succ:  l0000000000478F20 l0000000000478E04
l0000000000478F20:
	w1 = Mem0[x29 + 100:word32]
	NZCV = cond(w1 - w31)
	w19 = (word32) Test(NE,Z)
	goto l0000000000478E04
	// succ:  l0000000000478E04
l0000000000478F48:
l0000000000479018:
	w0 = w0 & ~w23
	Mem0[x3 + 40:word32] = w0
	goto l0000000000478ECC
	// succ:  l0000000000478ECC
l000000000047905C:
	x1 = 0x00000000004BF000
	w2 = 0x00000005
	x1 = x1 + 0xFFFFFFFFFFFFFB18
	dcgettext(x0, x1, x2)
	sp = sp + 0xFFFFFFFFFFFFFFF8
	x1 = x20
	call builtin_error (retsize: 0;)
	w1 = Mem0[x29 + 100:word32]
	w1 = w1 + 0x00000001
	Mem0[x29 + 100:word32] = w1
	goto l0000000000478ECC
	// succ:  l0000000000478ECC
l0000000000479084:
	w0 = w23 & 0x00000008
	w21 = w21 | w0
	branch w21 == 0x00000000 l0000000000479154
	// succ:  l0000000000479090 l0000000000479154
l0000000000479090:
	call all_shell_functions (retsize: 0;)
	w31 = w23 - 0x00000008
	NZCV = cond(w31)
	x20 = x0
	branch Test(EQ,Z) l00000000004790B8
	// succ:  l00000000004790A0 l00000000004790B8
l00000000004790A0:
	w23 = w23 & 0xFFFFFFF7
	// succ:  l00000000004790A4
l00000000004790A4:
	branch (w23 & 0x00000004) == 0x00000000 l0000000000479160
	// succ:  l00000000004790A8 l0000000000479160
l00000000004790A8:
	w0 = w23 & 0xFFFFFFFB
	w31 = w23 - 0x00000004
	NZCV = cond(w31)
	w26 = w26 + 0x00000001
l00000000004790B8:
	branch x20 == 0x0000000000000000 l0000000000479178
	// succ:  l00000000004790BC l0000000000479178
l00000000004790BC:
	x19 = x20
	x0 = Mem0[x19:word64]
	x19 = x19 + 8
	branch x0 == 0x0000000000000000 l0000000000479144
	// succ:  l00000000004790C8 l0000000000479144
l00000000004790C8:
	x21 = 0x0000000000479000
	x25 = 0x0000000000479000
	x24 = 0x00000000004E1000
	x21 = x21 + 0x00000000000001BC
	x25 = x25 + 0x00000000000001B0
	// succ:  l00000000004790DC
l00000000004790DC:
	w1 = Mem0[x0 + 40:word32]
	branch w26 == 0x00000000 l00000000004790E8
	// succ:  l00000000004790E4 l00000000004790E8
l00000000004790E4:
	branch (w1 & 0x00000004) == 0x00000000 l000000000047913C
	// succ:  l00000000004790E8 l000000000047913C
l00000000004790E8:
	branch w22 == 0x00000000 l00000000004790F0
	// succ:  l00000000004790EC l00000000004790F0
l00000000004790EC:
	branch (w1 & 0x00000040) == 0x00000000 l000000000047913C
	// succ:  l00000000004790F0 l000000000047913C
l00000000004790F0:
	NZ = cond(w1 & w23)
	C = false
	V = false
	branch Test(EQ,Z) l000000000047913C
	// succ:  l00000000004790F8 l000000000047913C
l00000000004790F8:
	x1 = Mem0[x24 + 1688:word64]
	x31 = x1 - x21
	NZCV = cond(x31)
	branch Test(EQ,Z) l000000000047914C
	// succ:  l0000000000479104 l000000000047914C
l0000000000479104:
	x31 = x1 - x25
	NZCV = cond(x31)
	w1 = (word32) Test(EQ,Z)
	// succ:  l000000000047910C
l000000000047910C:
	w2 = w27
	call show_var_attributes (retsize: 0;)
	w0 = 0x00000000
	call sh_chkwrite (retsize: 0;)
	branch w0 == 0x00000000 l000000000047913C
	// succ:  l0000000000479120 l000000000047913C
l0000000000479120:
	w19 = 0x00000001
	// succ:  l0000000000479124
l0000000000479124:
	x1 = 0x00000000004BF000
	x0 = x20
	x1 = x1 + 0xFFFFFFFFFFFFFAD8
	w2 = 0x00000131
	call sh_xfree (retsize: 0;)
	goto l0000000000478E04
	// succ:  l0000000000478E04
l000000000047913C:
	x0 = Mem0[x19:word64]
	x19 = x19 + 8
	branch x0 != 0x0000000000000000 l00000000004790DC
	// succ:  l0000000000479144 l00000000004790DC
l0000000000479144:
	w19 = 0x00000000
	goto l0000000000479124
	// succ:  l0000000000479124
l000000000047914C:
	w1 = 0x00000001
	goto l000000000047910C
	// succ:  l000000000047910C
l0000000000479154:
	call all_shell_variables (retsize: 0;)
	x20 = x0
	goto l00000000004790A4
	// succ:  l00000000004790A4
l0000000000479160:
	branch (w23 & 0x00000040) == 0x00000000 l00000000004790B8
	// succ:  l0000000000479164 l00000000004790B8
l0000000000479164:
	w0 = w23 & 0xFFFFFFBF
	w31 = w23 - 0x00000040
	NZCV = cond(w31)
	w22 = w22 + 0x00000001
l0000000000479178:
	w19 = w20
	goto l0000000000478E04
	// succ:  l0000000000478E04
l0000000000479180:
	x0 = x20
	call sh_invalidid (retsize: 0;)
	w0 = Mem0[x29 + 100:word32]
	w0 = w0 + 0x00000001
	Mem0[x29 + 100:word32] = w0
	goto l0000000000478ECC
	// succ:  l0000000000478ECC
set_or_show_attributes_exit:


// export_builtin
// Return size: 0
void export_builtin()
export_builtin_entry:
	// succ:  l00000000004791B0
l00000000004791B0:
	sp = fp
	w1 = 0x00000001
	w2 = 0x00000000
	// succ:  l00000000004791B8_thunk_set_or_show_attributes
l00000000004791B8_thunk_set_or_show_attributes:
	call set_or_show_attributes (retsize: 0;)
	return
	// succ:  export_builtin_exit
export_builtin_exit:


// readonly_builtin
// Return size: 0
void readonly_builtin()
readonly_builtin_entry:
	// succ:  l00000000004791BC
l00000000004791BC:
	sp = fp
	w1 = 0x00000002
	w2 = 0x00000000
	// succ:  l00000000004791C4_thunk_set_or_show_attributes
l00000000004791C4_thunk_set_or_show_attributes:
	call set_or_show_attributes (retsize: 0;)
	return
	// succ:  readonly_builtin_exit
readonly_builtin_exit:


// shift_builtin
// Return size: 0
void shift_builtin()
shift_builtin_entry:
	// succ:  l00000000004791C8
l00000000004791C8:
	sp = fp
	sp = sp + -80
	Mem0[sp:word64] = x29
	sp = sp + 8
	Mem0[sp:word64] = x30
	x29 = x31 + 0x0000000000000000
	w1 = 0x00000000
	x2 = x29 + 0x0000000000000040
	v10 = sp + 16
	Mem0[v10:word64] = x19
	v10 = v10 + 8
	Mem0[v10:word64] = x20
	v13 = sp + 32
	Mem0[v13:word64] = x21
	v13 = v13 + 8
	Mem0[v13:word64] = x22
	Mem0[sp + 48:word64] = x23
	x19 = x0
	call get_numeric_arg (retsize: 0;)
	branch w0 == 0x00000000 l00000000004792F0
	// succ:  l00000000004791F0 l00000000004792F0
l00000000004791F0:
	x0 = Mem0[x29 + 64:word64]
	x31 = x0 - x31
	NZCV = cond(x31)
	branch Test(EQ,Z) l0000000000479308
	// succ:  l00000000004791FC l0000000000479308
l00000000004791FC:
	branch Test(LT,NV) l00000000004792C4
	// succ:  l0000000000479200 l00000000004792C4
l0000000000479200:
	call number_of_args (retsize: 0;)
	x1 = Mem0[x29 + 64:word64]
	NZCV = cond(x1 - (int64) ((int32) w0))
	branch Test(GT,NZV) l00000000004792B8
	// succ:  l0000000000479210 l00000000004792B8
l0000000000479210:
	x21 = 0x00000000004E3000
	x21 = x21 + 0x00000000000004C8
	x23 = 0x00000000004BF000
	x0 = x1
	x23 = x23 + 0xFFFFFFFFFFFFFB50
	x19 = x21 + 0x0000000000000040
	x22 = 0x00000000004DF000
	// succ:  l000000000047922C
l000000000047922C:
	x2 = x0 - 0x0000000000000001
	Mem0[x29 + 64:word64] = x2
	x31 = x0 - x31
	NZCV = cond(x31)
	branch Test(LE,ZCV) l0000000000479308
	// succ:  l000000000047923C l0000000000479308
l000000000047923C:
	x0 = Mem0[x21 + 8:word64]
	branch x0 == 0x0000000000000000 l0000000000479250
	// succ:  l0000000000479244 l0000000000479250
l0000000000479244:
	x1 = x23
	w2 = 0x00000054
	call sh_xfree (retsize: 0;)
	// succ:  l0000000000479250
l0000000000479250:
	x0 = x21
	// succ:  l0000000000479254
l0000000000479254:
	x2 = Mem0[x0 + 16:word64]
	x0 = x0 + 8
	Mem0[x0:word64] = x2
	x31 = x0 - x19
	NZCV = cond(x31)
	branch Test(NE,Z) l0000000000479254
	// succ:  l0000000000479264 l0000000000479254
l0000000000479264:
	x20 = Mem0[x22 + 3288:word64]
	branch x20 == 0x0000000000000000 l0000000000479320
	// succ:  l000000000047926C l0000000000479320
l000000000047926C:
	x0 = Mem0[x20 + 8:word64]
	x0 = Mem0[x0:word64]
	strlen(x0)
	sp = sp + 0xFFFFFFFFFFFFFFF8
	w2 = 0x0000005C
	x1 = x23
	x0 = x0 + 0x0000000000000001
	call sh_xmalloc (retsize: 0;)
	x1 = Mem0[x20 + 8:word64]
	x1 = Mem0[x1:word64]
	strcpy(x0, x1)
	sp = sp + 0xFFFFFFFFFFFFFFF8
	x1 = Mem0[x22 + 3288:word64]
	Mem0[x21 + 72:word64] = x0
	x1 = Mem0[x1:word64]
	x0 = x20
	Mem0[x22 + 3288:word64] = x1
	Mem0[x20:word64] = 0x0000000000000000
	call dispose_words (retsize: 0;)
	x0 = Mem0[x29 + 64:word64]
	goto l000000000047922C
	// succ:  l000000000047922C
l00000000004792B8:
	x0 = 0x00000000004E3000
	w0 = Mem0[x0 + 3520:word32]
	branch w0 == 0x00000000 l00000000004792F0
	// succ:  l00000000004792C4 l00000000004792F0
l00000000004792C4:
	branch x19 == 0x0000000000000000 l00000000004792D0
	// succ:  l00000000004792C8 l00000000004792D0
l00000000004792C8:
	x0 = Mem0[x19 + 8:word64]
	x19 = Mem0[x0:word64]
	// succ:  l00000000004792D0
l00000000004792D0:
	x1 = 0x00000000004BF000
	x1 = x1 + 0xFFFFFFFFFFFFFB40
	w2 = 0x00000005
	x0 = 0x0000000000000000
	dcgettext(x0, x1, x2)
	sp = sp + 0xFFFFFFFFFFFFFFF8
	x1 = x0
	x0 = x19
	call sh_erange (retsize: 0;)
	// succ:  l00000000004792F0
l00000000004792F0:
	w0 = 0x00000001
	v24 = sp + 16
	x19 = Mem0[v24:word64]
	v24 = v24 + 8
	x20 = Mem0[v24:word64]
	v25 = sp + 32
	x21 = Mem0[v25:word64]
	v25 = v25 + 8
	x22 = Mem0[v25:word64]
	x23 = Mem0[sp + 48:word64]
	x29 = Mem0[sp:word64]
	sp = sp + 8
	x30 = Mem0[sp:word64]
	sp = sp + 80
	return
	// succ:  shift_builtin_exit
l0000000000479308:
	w0 = 0x00000000
	v26 = sp + 16
	x19 = Mem0[v26:word64]
	v26 = v26 + 8
	x20 = Mem0[v26:word64]
	v27 = sp + 32
	x21 = Mem0[v27:word64]
	v27 = v27 + 8
	x22 = Mem0[v27:word64]
	x23 = Mem0[sp + 48:word64]
	x29 = Mem0[sp:word64]
	sp = sp + 8
	x30 = Mem0[sp:word64]
	sp = sp + 80
	return
	// succ:  shift_builtin_exit
l0000000000479320:
	Mem0[x21 + 72:word64] = x20
	x0 = Mem0[x29 + 64:word64]
	goto l000000000047922C
	// succ:  l000000000047922C
shift_builtin_exit:


// source_builtin
// Return size: 0
void source_builtin()
source_builtin_entry:
	// succ:  l000000000047936C
l000000000047936C:
	sp = fp
	sp = sp + -64
	Mem0[sp:word64] = x29
	sp = sp + 8
	Mem0[sp:word64] = x30
	x29 = x31 + 0x0000000000000000
	v8 = sp + 16
	Mem0[v8:word64] = x19
	v8 = v8 + 8
	Mem0[v8:word64] = x20
	v11 = sp + 32
	Mem0[v11:word64] = x21
	v11 = v11 + 8
	Mem0[v11:word64] = x22
	Mem0[sp + 48:word64] = x23
	call no_options (retsize: 0;)
	w19 = 0x00000102
	branch w0 == 0x00000000 l00000000004793A4
	// succ:  l000000000047938C l00000000004793A4
l000000000047938C:
	w0 = w19
	v15 = sp + 32
	x21 = Mem0[v15:word64]
	v15 = v15 + 8
	x22 = Mem0[v15:word64]
	v16 = sp + 16
	x19 = Mem0[v16:word64]
	v16 = v16 + 8
	x20 = Mem0[v16:word64]
	x23 = Mem0[sp + 48:word64]
	x29 = Mem0[sp:word64]
	sp = sp + 8
	x30 = Mem0[sp:word64]
	sp = sp + 64
	return
	// succ:  source_builtin_exit
l00000000004793A4:
	x0 = 0x00000000004E3000
	x20 = Mem0[x0 + 3856:word64]
	branch x20 == 0x0000000000000000 l00000000004795F8
	// succ:  l00000000004793B0 l00000000004795F8
l00000000004793B0:
	x0 = 0x00000000004DF000
	w0 = Mem0[x0 + 3696:word32]
	branch w0 != 0x00000000 l00000000004794AC
	// succ:  l00000000004793BC l00000000004794AC
l00000000004793BC:
	x0 = Mem0[x20 + 8:word64]
	x19 = Mem0[x0:word64]
	// succ:  l00000000004793C4
l00000000004793C4:
	x21 = 0x00000000004DE000
	w0 = Mem0[x21 + 1716:word32]
	branch w0 == 0x00000000 l00000000004794D4
	// succ:  l00000000004793D0 l00000000004794D4
l00000000004793D0:
	x0 = x19
	w1 = 0x0000002F
	strchr(x0, x1)
	sp = sp + 0xFFFFFFFFFFFFFFF8
	branch x0 == 0x0000000000000000 l00000000004794D4
	// succ:  l00000000004793E0 l00000000004794D4
l00000000004793E0:
	x0 = x19
	strlen(x0)
	sp = sp + 0xFFFFFFFFFFFFFFF8
	x1 = 0x00000000004BF000
	x1 = x1 + 0xFFFFFFFFFFFFFBA8
	w2 = 0x00000092
	// succ:  l00000000004793F4
l00000000004793F4:
	x0 = x0 + 0x0000000000000001
	call sh_xmalloc (retsize: 0;)
	x1 = Mem0[x20 + 8:word64]
	x1 = Mem0[x1:word64]
	strcpy(x0, x1)
	sp = sp + 0xFFFFFFFFFFFFFFF8
	x19 = x0
	// succ:  l000000000047940C
l000000000047940C:
	x0 = 0x00000000004D8000
	branch x19 == 0x0000000000000000 l00000000004794F0
	// succ:  l0000000000479414 l00000000004794F0
l0000000000479414:
	x21 = 0x00000000004BD000
	x0 = x21 + 0xFFFFFFFFFFFFF918
	call begin_unwind_frame (retsize: 0;)
	x22 = 0x000000000046C000
	x0 = x22 + 0x00000000000004C4
	x1 = x19
	call add_unwind_protect (retsize: 0;)
	x0 = Mem0[x20:word64]
	branch x0 == 0x0000000000000000 l0000000000479464
	// succ:  l0000000000479438 l0000000000479464
l0000000000479438:
	call push_dollar_vars (retsize: 0;)
	x0 = 0x0000000000479000
	x0 = x0 + 0x000000000000032C
	x1 = 0x0000000000000000
	call add_unwind_protect (retsize: 0;)
	x0 = Mem0[x20:word64]
	w1 = 0x00000001
	call remember_args (retsize: 0;)
	x0 = 0x00000000004DE000
	w0 = Mem0[x0 + 1844:word32]
	branch w0 != 0x00000000 l0000000000479618
	// succ:  l0000000000479464 l0000000000479618
l0000000000479464:
	call set_dollar_vars_unchanged (retsize: 0;)
	w0 = 0x00000041
	call signal_is_trapped (retsize: 0;)
	branch w0 != 0x00000000 l0000000000479584
	// succ:  l0000000000479474 l0000000000479584
l0000000000479474:
	x1 = Mem0[x20:word64]
	x0 = x19
	x31 = x1 - x31
	NZCV = cond(x31)
	w1 = (word32) Test(NE,Z)
	call source_file (retsize: 0;)
	w19 = w0
	x0 = x21 + 0xFFFFFFFFFFFFF918
	call run_unwind_frame (retsize: 0;)
	w0 = w19
	v23 = sp + 32
	x21 = Mem0[v23:word64]
	v23 = v23 + 8
	x22 = Mem0[v23:word64]
	v24 = sp + 16
	x19 = Mem0[v24:word64]
	v24 = v24 + 8
	x20 = Mem0[v24:word64]
	x23 = Mem0[sp + 48:word64]
	x29 = Mem0[sp:word64]
	sp = sp + 8
	x30 = Mem0[sp:word64]
	sp = sp + 64
	return
	// succ:  source_builtin_exit
l00000000004794AC:
	x0 = Mem0[x20 + 8:word64]
	w1 = 0x0000002F
	x19 = Mem0[x0:word64]
	x0 = x19
	strchr(x0, x1)
	sp = sp + 0xFFFFFFFFFFFFFFF8
	branch x0 == 0x0000000000000000 l00000000004793C4
	// succ:  l00000000004794C4 l00000000004793C4
l00000000004794C4:
	x0 = x19
	call sh_restricted (retsize: 0;)
	w19 = 0x00000001
	goto l000000000047938C
	// succ:  l000000000047938C
l00000000004794D4:
	x0 = x19
	call absolute_pathname (retsize: 0;)
	branch w0 != 0x00000000 l0000000000479624
	// succ:  l00000000004794E0 l0000000000479624
l00000000004794E0:
	x0 = 0x00000000004D8000
	x1 = x0 + 0xFFFFFFFFFFFFF848
	w1 = Mem0[x1:word32]
	branch w1 != 0x00000000 l0000000000479640
	// succ:  l00000000004794F0 l0000000000479640
l00000000004794F0:
	x0 = x0 + 0xFFFFFFFFFFFFF848
	w0 = Mem0[x0 + 4:word32]
	branch w0 != 0x00000000 l0000000000479550
	// succ:  l00000000004794FC l0000000000479550
l00000000004794FC:
	x1 = 0x00000000004BF000
	x1 = x1 + 0xFFFFFFFFFFFFFBE0
	w2 = 0x00000005
	x0 = 0x0000000000000000
	dcgettext(x0, x1, x2)
	sp = sp + 0xFFFFFFFFFFFFFFF8
	x1 = Mem0[x20 + 8:word64]
	x1 = Mem0[x1:word64]
	call builtin_error (retsize: 0;)
	w0 = Mem0[x21 + 1716:word32]
	branch w0 == 0x00000000 l0000000000479654
	// succ:  l0000000000479524 l0000000000479654
l0000000000479524:
	x0 = 0x00000000004DE000
	w0 = Mem0[x0 + 1712:word32]
	branch w0 != 0x00000000 l0000000000479654
	// succ:  l0000000000479530 l0000000000479654
l0000000000479530:
	x0 = 0x00000000004DF000
	w0 = Mem0[x0 + 3056:word32]
	w19 = 0x00000001
	branch w0 != 0x00000000 l000000000047938C
	// succ:  l0000000000479540 l000000000047938C
l0000000000479540:
	x1 = 0x00000000004E3000
	w0 = 0x00000003
	Mem0[x1 + 1200:word32] = w19
	call jump_to_top_level (retsize: 0;)
	// succ:  l0000000000479550
l0000000000479550:
	x0 = Mem0[x20 + 8:word64]
	x0 = Mem0[x0:word64]
	strlen(x0)
	sp = sp + 0xFFFFFFFFFFFFFFF8
	x1 = 0x00000000004BF000
	x1 = x1 + 0xFFFFFFFFFFFFFBA8
	w2 = 0x000000A4
	x0 = x0 + 0x0000000000000001
	call sh_xmalloc (retsize: 0;)
	x1 = Mem0[x20 + 8:word64]
	x1 = Mem0[x1:word64]
	strcpy(x0, x1)
	sp = sp + 0xFFFFFFFFFFFFFFF8
	x19 = x0
	goto l0000000000479414
	// succ:  l0000000000479414
l0000000000479584:
	w0 = 0x00000041
	call signal_is_ignored (retsize: 0;)
	branch w0 != 0x00000000 l0000000000479474
	// succ:  l0000000000479590 l0000000000479474
l0000000000479590:
	x0 = 0x00000000004E3000
	x23 = Mem0[x0 + 2688:word64]
	branch x23 == 0x0000000000000000 l0000000000479474
	// succ:  l000000000047959C l0000000000479474
l000000000047959C:
	x2 = 0x00000000004DF000
	w2 = Mem0[x2 + 3772:word32]
	branch w2 != 0x00000000 l0000000000479474
	// succ:  l00000000004795A8 l0000000000479474
l00000000004795A8:
	x0 = x23
	strlen(x0)
	sp = sp + 0xFFFFFFFFFFFFFFF8
	x1 = 0x00000000004BF000
	w2 = 0x000000BA
	x1 = x1 + 0xFFFFFFFFFFFFFBA8
	x0 = x0 + 0x0000000000000001
	call sh_xmalloc (retsize: 0;)
	x1 = x23
	strcpy(x0, x1)
	sp = sp + 0xFFFFFFFFFFFFFFF8
	x23 = x0
	x1 = x0
	x0 = x22 + 0x00000000000004C4
	call add_unwind_protect (retsize: 0;)
	x0 = 0x0000000000455000
	x0 = x0 + 0x0000000000000434
	x1 = x23
	call add_unwind_protect (retsize: 0;)
	w0 = 0x00000041
	call restore_default_signal (retsize: 0;)
	goto l0000000000479474
	// succ:  l0000000000479474
l00000000004795F8:
	x1 = 0x00000000004BF000
	x1 = x1 + 0xFFFFFFFFFFFFFB88
	w2 = 0x00000005
	x0 = x20
	dcgettext(x0, x1, x2)
	sp = sp + 0xFFFFFFFFFFFFFFF8
	call builtin_error (retsize: 0;)
	call builtin_usage (retsize: 0;)
	goto l000000000047938C
	// succ:  l000000000047938C
l0000000000479618:
	x0 = Mem0[x20:word64]
	call push_args (retsize: 0;)
	goto l0000000000479464
	// succ:  l0000000000479464
l0000000000479624:
	x0 = Mem0[x20 + 8:word64]
	x0 = Mem0[x0:word64]
	strlen(x0)
	sp = sp + 0xFFFFFFFFFFFFFFF8
	x1 = 0x00000000004BF000
	x1 = x1 + 0xFFFFFFFFFFFFFBA8
	w2 = 0x00000094
	goto l00000000004793F4
	// succ:  l00000000004793F4
l0000000000479640:
	x0 = Mem0[x20 + 8:word64]
	x0 = Mem0[x0:word64]
	call find_path_file (retsize: 0;)
	x19 = x0
	goto l000000000047940C
	// succ:  l000000000047940C
l0000000000479654:
	w19 = 0x00000001
	goto l000000000047938C
	// succ:  l000000000047938C
source_builtin_exit:


// suspend_builtin
// Return size: 0
void suspend_builtin()
suspend_builtin_entry:
	// succ:  l0000000000479670
l0000000000479670:
	sp = fp
	sp = sp + -48
	Mem0[sp:word64] = x29
	sp = sp + 8
	Mem0[sp:word64] = x30
	x29 = x31 + 0x0000000000000000
	v8 = sp + 16
	Mem0[v8:word64] = x19
	v8 = v8 + 8
	Mem0[v8:word64] = x20
	x20 = 0x00000000004BF000
	Mem0[sp + 32:word64] = x21
	w19 = 0x00000000
	x21 = x0
	x20 = x20 + 0x0000000000000288
	call reset_internal_getopt (retsize: 0;)
	goto l00000000004796A4
	// succ:  l00000000004796A4
l0000000000479698:
	w31 = w0 - 0x00000066
	NZCV = cond(w31)
	branch Test(NE,Z) l0000000000479720
	// succ:  l00000000004796A0 l0000000000479720
l00000000004796A0:
	w19 = w19 + 0x00000001
	// succ:  l00000000004796A4
l00000000004796A4:
	x0 = x21
	x1 = x20
	call internal_getopt (retsize: 0;)
	w31 = w0 + 0x00000001
	NZCV = cond(w31)
	branch Test(NE,Z) l0000000000479698
	// succ:  l00000000004796B8 l0000000000479698
l00000000004796B8:
	x0 = 0x00000000004D6000
	w1 = Mem0[x0 + 3420:word32]
	x0 = 0x00000000004E3000
	x0 = Mem0[x0 + 3856:word64]
	branch w1 == 0x00000000 l0000000000479738
	// succ:  l00000000004796CC l0000000000479738
l00000000004796CC:
	branch w19 != 0x00000000 l00000000004796E0
	// succ:  l00000000004796D0 l00000000004796E0
l00000000004796D0:
	call no_args (retsize: 0;)
	x0 = 0x00000000004DE000
	w0 = Mem0[x0 + 1736:word32]
	branch w0 != 0x00000000 l0000000000479764
	// succ:  l00000000004796E0 l0000000000479764
l00000000004796E0:
	x1 = 0x0000000000479000
	x1 = x1 + 0x000000000000065C
	w0 = 0x00000012
	call set_signal_handler (retsize: 0;)
	x1 = 0x00000000004E1000
	x1 = x1 + 0xFFFFFFFFFFFFF8D8
	Mem0[x1:word64] = x0
	x0 = 0x00000000004D6000
	w0 = Mem0[x0 + 3440:word32]
	w1 = 0x00000013
	call killpg (retsize: 0;)
	w0 = 0x00000000
	// succ:  l0000000000479710
l0000000000479710:
	v18 = sp + 16
	x19 = Mem0[v18:word64]
	v18 = v18 + 8
	x20 = Mem0[v18:word64]
	x21 = Mem0[sp + 32:word64]
	x29 = Mem0[sp:word64]
	sp = sp + 8
	x30 = Mem0[sp:word64]
	sp = sp + 48
	return
	// succ:  suspend_builtin_exit
l0000000000479720:
	call builtin_usage (retsize: 0;)
	w0 = 0x00000102
	v21 = sp + 16
	x19 = Mem0[v21:word64]
	v21 = v21 + 8
	x20 = Mem0[v21:word64]
	x21 = Mem0[sp + 32:word64]
	x29 = Mem0[sp:word64]
	sp = sp + 8
	x30 = Mem0[sp:word64]
	sp = sp + 48
	return
	// succ:  suspend_builtin_exit
l0000000000479738:
	x1 = 0x00000000004BF000
	x1 = x1 + 0xFFFFFFFFFFFFFBF8
	w2 = 0x00000005
	x0 = 0x0000000000000000
	dcgettext(x0, x1, x2)
	sp = sp + 0xFFFFFFFFFFFFFFF8
	call sh_nojobs (retsize: 0;)
	w0 = 0x00000001
	v22 = sp + 16
	x19 = Mem0[v22:word64]
	v22 = v22 + 8
	x20 = Mem0[v22:word64]
	x21 = Mem0[sp + 32:word64]
	x29 = Mem0[sp:word64]
	sp = sp + 8
	x30 = Mem0[sp:word64]
	sp = sp + 48
	return
	// succ:  suspend_builtin_exit
l0000000000479764:
	x1 = 0x00000000004BF000
	x1 = x1 + 0xFFFFFFFFFFFFFC08
	w2 = 0x00000005
	x0 = 0x0000000000000000
	dcgettext(x0, x1, x2)
	sp = sp + 0xFFFFFFFFFFFFFFF8
	call builtin_error (retsize: 0;)
	w0 = 0x00000001
	goto l0000000000479710
	// succ:  l0000000000479710
suspend_builtin_exit:


// test_builtin
// Return size: 0
void test_builtin()
test_builtin_entry:
	// succ:  l0000000000479784
l0000000000479784:
	sp = fp
	sp = sp + -48
	Mem0[sp:word64] = x29
	sp = sp + 8
	Mem0[sp:word64] = x30
	x29 = x31 + 0x0000000000000000
	v8 = sp + 16
	Mem0[v8:word64] = x19
	v8 = v8 + 8
	Mem0[v8:word64] = x20
	branch x0 == 0x0000000000000000 l00000000004797D8
	// succ:  l0000000000479794 l00000000004797D8
l0000000000479794:
	x1 = x29 + 0x0000000000000020
	call make_builtin_argv (retsize: 0;)
	x19 = x0
	w0 = Mem0[x29 + 32:word32]
	x1 = x19
	call test_command (retsize: 0;)
	x1 = 0x00000000004BF000
	w20 = w0
	x1 = x1 + 0xFFFFFFFFFFFFFC28
	x0 = x19
	w2 = 0x000000A1
	call sh_xfree (retsize: 0;)
	w1 = w20
	// succ:  l00000000004797C8
l00000000004797C8:
	w0 = w1
	v15 = sp + 16
	x19 = Mem0[v15:word64]
	v15 = v15 + 8
	x20 = Mem0[v15:word64]
	x29 = Mem0[sp:word64]
	sp = sp + 8
	x30 = Mem0[sp:word64]
	sp = sp + 48
	return
	// succ:  test_builtin_exit
l00000000004797D8:
	x1 = 0x00000000004E3000
	x2 = Mem0[x1 + 1192:word64]
	w1 = 0x00000001
	v18 = Mem0[x2:byte]
	w3 = (word32) v18
	w31 = w3 - 0x0000005B
	NZCV = cond(w31)
	branch Test(NE,Z) l00000000004797C8
	// succ:  l00000000004797F0 l00000000004797C8
l00000000004797F0:
	v22 = Mem0[x2 + 1:byte]
	w2 = (word32) v22
	branch w2 != 0x00000000 l00000000004797C8
	// succ:  l00000000004797F8 l00000000004797C8
l00000000004797F8:
	x1 = 0x00000000004AE000
	x1 = x1 + 0x0000000000000530
	w2 = 0x00000005
	dcgettext(x0, x1, x2)
	sp = sp + 0xFFFFFFFFFFFFFFF8
	call builtin_error (retsize: 0;)
	w1 = 0x00000002
	goto l00000000004797C8
	// succ:  l00000000004797C8
test_builtin_exit:


// times_builtin
// Return size: 0
void times_builtin()
times_builtin_entry:
	// succ:  l0000000000479814
l0000000000479814:
	sp = fp
	sp = sp + -320
	Mem0[sp:word64] = x29
	sp = sp + 8
	Mem0[sp:word64] = x30
	x29 = x31 + 0x0000000000000000
	v8 = sp + 16
	Mem0[v8:word64] = x19
	v8 = v8 + 8
	Mem0[v8:word64] = x20
	call no_options (retsize: 0;)
	w19 = w0
	w1 = 0x00000102
	branch w0 == 0x00000000 l0000000000479840
	// succ:  l0000000000479830 l0000000000479840
l0000000000479830:
	w0 = w1
	v12 = sp + 16
	x19 = Mem0[v12:word64]
	v12 = v12 + 8
	x20 = Mem0[v12:word64]
	x29 = Mem0[sp:word64]
	sp = sp + 8
	x30 = Mem0[sp:word64]
	sp = sp + 320
	return
	// succ:  times_builtin_exit
l0000000000479840:
	x1 = x29 + 0x00000000000000B0
	call getrusage (retsize: 0;)
	x1 = x29 + 0x0000000000000020
	w0 = 0xFFFFFFFF
	x20 = 0x00000000004DE000
	call getrusage (retsize: 0;)
	x0 = Mem0[x20 + 1648:word64]
	x1 = x29 + 0x00000000000000B0
	call print_timeval (retsize: 0;)
	x1 = Mem0[x20 + 1648:word64]
	w0 = 0x00000020
	_IO_putc(x0, x1)
	sp = sp + 0xFFFFFFFFFFFFFFF8
	x0 = Mem0[x20 + 1648:word64]
	x1 = x29 + 0x00000000000000C0
	call print_timeval (retsize: 0;)
	x1 = Mem0[x20 + 1648:word64]
	w0 = 0x0000000A
	_IO_putc(x0, x1)
	sp = sp + 0xFFFFFFFFFFFFFFF8
	x0 = Mem0[x20 + 1648:word64]
	x1 = x29 + 0x0000000000000020
	call print_timeval (retsize: 0;)
	x1 = Mem0[x20 + 1648:word64]
	w0 = 0x00000020
	_IO_putc(x0, x1)
	sp = sp + 0xFFFFFFFFFFFFFFF8
	x0 = Mem0[x20 + 1648:word64]
	x1 = x29 + 0x0000000000000030
	call print_timeval (retsize: 0;)
	x1 = Mem0[x20 + 1648:word64]
	w0 = 0x0000000A
	_IO_putc(x0, x1)
	sp = sp + 0xFFFFFFFFFFFFFFF8
	w0 = w19
	call sh_chkwrite (retsize: 0;)
	w1 = w0
	w0 = w1
	v15 = sp + 16
	x19 = Mem0[v15:word64]
	v15 = v15 + 8
	x20 = Mem0[v15:word64]
	x29 = Mem0[sp:word64]
	sp = sp + 8
	x30 = Mem0[sp:word64]
	sp = sp + 320
	return
	// succ:  times_builtin_exit
times_builtin_exit:


// fn00000000004798D4
// Return size: 0
void fn00000000004798D4()
fn00000000004798D4_entry:
	// succ:  l00000000004798D4
l00000000004798D4:
	sp = fp
	sp = sp + -48
	Mem0[sp:word64] = x29
	sp = sp + 8
	Mem0[sp:word64] = x30
	x29 = x31 + 0x0000000000000000
	x1 = 0x00000000004E3000
	x1 = x1 + 0xFFFFFFFFFFFFF878
	v9 = sp + 16
	Mem0[v9:word64] = x19
	v9 = v9 + 8
	Mem0[v9:word64] = x20
	x19 = Mem0[x1 + (int64) ((int32) w0):word64]
	w20 = w0
	branch x19 == 0x0000000000000000 l0000000000479A40
	// succ:  l00000000004798F4 l0000000000479A40
l00000000004798F4:
	call signal_is_hard_ignored (retsize: 0;)
	branch w0 == 0x00000000 l0000000000479964
	// succ:  l00000000004798FC l0000000000479964
l00000000004798FC:
	w0 = w20
	call signal_name (retsize: 0;)
	v14 = Mem0[x0:byte]
	w1 = (word32) v14
	x19 = 0x0000000000000000
	w31 = w1 - 0x00000053
	NZCV = cond(w31)
	x3 = x0
	branch Test(EQ,Z) l0000000000479990
	// succ:  l0000000000479918 l0000000000479990
l0000000000479918:
	w31 = w1 - 0x00000075
	NZCV = cond(w31)
	branch Test(EQ,Z) l0000000000479A04
	// succ:  l0000000000479920 l0000000000479A04
l0000000000479920:
	x0 = 0x00000000004DE000
	w0 = Mem0[x0 + 1716:word32]
	branch w0 == 0x00000000 l0000000000479A58
	// succ:  l000000000047992C l0000000000479A58
l000000000047992C:
	x2 = x19
	branch x19 == 0x0000000000000000 l0000000000479A80
	// succ:  l0000000000479934 l0000000000479A80
l0000000000479934:
	x1 = 0x00000000004BF000
	x1 = x1 + 0xFFFFFFFFFFFFFC90
	w0 = 0x00000001
	__printf_chk(x0, x1, Mem0[sp:<unknown>])
	sp = sp + 0xFFFFFFFFFFFFFFF8
	// succ:  l0000000000479944
l0000000000479944:
	branch x19 == 0x0000000000000000 l00000000004799F8
	// succ:  l0000000000479948 l00000000004799F8
l0000000000479948:
	x0 = x19
	x1 = 0x00000000004BF000
	v20 = sp + 16
	x19 = Mem0[v20:word64]
	v20 = v20 + 8
	x20 = Mem0[v20:word64]
	x29 = Mem0[sp:word64]
	sp = sp + 8
	x30 = Mem0[sp:word64]
	sp = sp + 48
	x1 = x1 + 0xFFFFFFFFFFFFFCA0
	w2 = 0x00000113
	// succ:  l0000000000479960_thunk_sh_xfree
l0000000000479960_thunk_sh_xfree:
	call sh_xfree (retsize: 0;)
	return
	// succ:  fn00000000004798D4_exit
l0000000000479964:
	x31 = x19 - 0x0000000000000001
	NZCV = cond(x31)
	branch Test(EQ,Z) l00000000004798FC
	// succ:  l000000000047996C l00000000004798FC
l000000000047996C:
	x0 = x19
	call sh_single_quote (retsize: 0;)
	x19 = x0
	w0 = w20
	call signal_name (retsize: 0;)
	v22 = Mem0[x0:byte]
	w1 = (word32) v22
	x3 = x0
	w31 = w1 - 0x00000053
	NZCV = cond(w31)
	branch Test(NE,Z) l0000000000479918
	// succ:  l0000000000479990 l0000000000479918
l0000000000479990:
	x1 = 0x00000000004BE000
	x1 = x1 + 0x0000000000000578
	x2 = 0x0000000000000007
	Mem0[x29 + 32:word64] = x0
	strncmp(x0, x1, x2)
	sp = sp + 0xFFFFFFFFFFFFFFF8
	x3 = Mem0[x29 + 32:word64]
	branch w0 == 0x00000000 l0000000000479A20
	// succ:  l00000000004799AC l0000000000479A20
l00000000004799AC:
	x0 = 0x00000000004DE000
	w0 = Mem0[x0 + 1716:word32]
	branch w0 == 0x00000000 l0000000000479A58
	// succ:  l00000000004799B8 l0000000000479A58
l00000000004799B8:
	x1 = 0x00000000004AD000
	x0 = x3
	x1 = x1 + 0xFFFFFFFFFFFFFDA0
	x2 = 0x0000000000000003
	Mem0[x29 + 32:word64] = x3
	strncmp(x0, x1, x2)
	sp = sp + 0xFFFFFFFFFFFFFFF8
	x3 = Mem0[x29 + 32:word64]
	branch w0 != 0x00000000 l000000000047992C
	// succ:  l00000000004799D8 l000000000047992C
l00000000004799D8:
	x2 = x19
	branch x19 == 0x0000000000000000 l0000000000479A98
	// succ:  l00000000004799E0 l0000000000479A98
l00000000004799E0:
	x1 = 0x00000000004BF000
	x1 = x1 + 0xFFFFFFFFFFFFFC90
	x3 = x3 + 0x0000000000000003
	w0 = 0x00000001
	__printf_chk(x0, x1, Mem0[sp:<unknown>])
	sp = sp + 0xFFFFFFFFFFFFFFF8
	branch x19 != 0x0000000000000000 l0000000000479948
	// succ:  l00000000004799F8 l0000000000479948
l00000000004799F8:
	v23 = sp + 16
	x19 = Mem0[v23:word64]
	v23 = v23 + 8
	x20 = Mem0[v23:word64]
	x29 = Mem0[sp:word64]
	sp = sp + 8
	x30 = Mem0[sp:word64]
	sp = sp + 48
	return
	// succ:  fn00000000004798D4_exit
l0000000000479A04:
	x1 = 0x00000000004BF000
	x1 = x1 + 0xFFFFFFFFFFFFFC78
	x2 = 0x0000000000000007
	Mem0[x29 + 32:word64] = x0
	strncmp(x0, x1, x2)
	sp = sp + 0xFFFFFFFFFFFFFFF8
	x3 = Mem0[x29 + 32:word64]
	branch w0 != 0x00000000 l0000000000479920
	// succ:  l0000000000479A20 l0000000000479920
l0000000000479A20:
	x2 = x19
	branch x19 == 0x0000000000000000 l0000000000479A8C
	// succ:  l0000000000479A28 l0000000000479A8C
l0000000000479A28:
	x1 = 0x00000000004BF000
	x1 = x1 + 0xFFFFFFFFFFFFFC80
	w3 = w20
	w0 = 0x00000001
	__printf_chk(x0, x1, Mem0[sp:<unknown>])
	sp = sp + 0xFFFFFFFFFFFFFFF8
	goto l0000000000479944
	// succ:  l0000000000479944
l0000000000479A40:
	call signal_is_hard_ignored (retsize: 0;)
	branch w0 == 0x00000000 l00000000004799F8
	// succ:  l0000000000479A48 l00000000004799F8
l0000000000479A48:
	w0 = w20
	call signal_is_hard_ignored (retsize: 0;)
	branch w0 != 0x00000000 l00000000004798FC
	// succ:  l0000000000479A54 l00000000004798FC
l0000000000479A54:
	goto l000000000047996C
	// succ:  l000000000047996C
l0000000000479A58:
	x2 = x19
	branch x19 == 0x0000000000000000 l0000000000479A74
	// succ:  l0000000000479A60 l0000000000479A74
l0000000000479A60:
	x1 = 0x00000000004BF000
	x1 = x1 + 0xFFFFFFFFFFFFFC90
	w0 = 0x00000001
	__printf_chk(x0, x1, Mem0[sp:<unknown>])
	sp = sp + 0xFFFFFFFFFFFFFFF8
	goto l0000000000479944
	// succ:  l0000000000479944
l0000000000479A74:
	x2 = 0x00000000004AC000
	x2 = x2 + 0x00000000000003B8
	goto l0000000000479A60
	// succ:  l0000000000479A60
l0000000000479A80:
	x2 = 0x00000000004AC000
	x2 = x2 + 0x00000000000003B8
	goto l0000000000479934
	// succ:  l0000000000479934
l0000000000479A8C:
	x2 = 0x00000000004AC000
	x2 = x2 + 0x00000000000003B8
	goto l0000000000479A28
	// succ:  l0000000000479A28
l0000000000479A98:
	x2 = 0x00000000004AC000
	x2 = x2 + 0x00000000000003B8
	goto l00000000004799E0
	// succ:  l00000000004799E0
fn00000000004798D4_exit:


// trap_builtin
// Return size: 0
void trap_builtin()
trap_builtin_entry:
	// succ:  l0000000000479AA4
l0000000000479AA4:
	sp = fp
	sp = sp + -80
	Mem0[sp:word64] = x29
	sp = sp + 8
	Mem0[sp:word64] = x30
	x29 = x31 + 0x0000000000000000
	v8 = sp + 16
	Mem0[v8:word64] = x19
	v8 = v8 + 8
	Mem0[v8:word64] = x20
	w20 = 0x00000000
	x19 = 0x00000000004BF000
	v12 = sp + 32
	Mem0[v12:word64] = x21
	v12 = v12 + 8
	Mem0[v12:word64] = x22
	v15 = sp + 48
	Mem0[v15:word64] = x23
	v15 = v15 + 8
	Mem0[v15:word64] = x24
	v18 = sp + 64
	Mem0[v18:word64] = x25
	v18 = v18 + 8
	Mem0[v18:word64] = x26
	x21 = x0
	w22 = w20
	call reset_internal_getopt (retsize: 0;)
	x19 = x19 + 0xFFFFFFFFFFFFFCD8
	// succ:  l0000000000479AD4
l0000000000479AD4:
	x0 = x21
	x1 = x19
	call internal_getopt (retsize: 0;)
	w31 = w0 + 0x00000001
	NZCV = cond(w31)
	branch Test(EQ,Z) l0000000000479B10
	// succ:  l0000000000479AE8 l0000000000479B10
l0000000000479AE8:
	w31 = w0 - 0x0000006C
	NZCV = cond(w31)
	branch Test(EQ,Z) l0000000000479BFC
	// succ:  l0000000000479AF0 l0000000000479BFC
l0000000000479AF0:
	w31 = w0 - 0x00000070
	NZCV = cond(w31)
	branch Test(NE,Z) l0000000000479BDC
	// succ:  l0000000000479AF8 l0000000000479BDC
l0000000000479AF8:
	x0 = x21
	x1 = x19
	call internal_getopt (retsize: 0;)
	w31 = w0 + 0x00000001
	NZCV = cond(w31)
	w20 = w20 + 0x00000001
	branch Test(NE,Z) l0000000000479AE8
	// succ:  l0000000000479B10 l0000000000479AE8
l0000000000479B10:
	x0 = 0x00000000004E3000
	x19 = Mem0[x0 + 3856:word64]
	branch w22 != 0x00000000 l0000000000479CE8
	// succ:  l0000000000479B1C l0000000000479CE8
l0000000000479B1C:
	x31 = x19 - x31
	NZCV = cond(x31)
	w21 = (word32) Test(EQ,Z)
	branch w20 != 0x00000000 l0000000000479D20
	// succ:  l0000000000479B28 l0000000000479D20
l0000000000479B28:
	branch w21 != 0x00000000 l0000000000479D20
	// succ:  l0000000000479B2C l0000000000479D20
l0000000000479B2C:
	x0 = Mem0[x19 + 8:word64]
	x22 = Mem0[x0:word64]
	branch x22 == 0x0000000000000000 l0000000000479B4C
	// succ:  l0000000000479B38 l0000000000479B4C
l0000000000479B38:
	v27 = Mem0[x22:byte]
	w0 = (word32) v27
	branch w0 != 0x00000000 l0000000000479C40
	// succ:  l0000000000479B40 l0000000000479C40
l0000000000479B40:
	x0 = 0x00000000004DE000
	w0 = Mem0[x0 + 1716:word32]
	branch w0 == 0x00000000 l0000000000479C04
	// succ:  l0000000000479B4C l0000000000479C04
l0000000000479B4C:
	x19 = Mem0[x19:word64]
	branch x19 == 0x0000000000000000 l0000000000479BDC
	// succ:  l0000000000479B54 l0000000000479BDC
l0000000000479B54:
	v28 = Mem0[x22:byte]
	w0 = (word32) v28
	w21 = 0x00000002
	branch w0 == 0x00000000 l0000000000479B6C
	// succ:  l0000000000479B60 l0000000000479B6C
l0000000000479B60:
	w31 = w0 - 0x0000002D
	NZCV = cond(w31)
	w21 = 0x00000000
	branch Test(EQ,Z) l0000000000479D84
	// succ:  l0000000000479B6C l0000000000479D84
l0000000000479B6C:
	x20 = 0x00000000004E3000
	w0 = Mem0[x20 + 1184:word32]
	branch (w0 & 0x00000080) == 0x00000000 l0000000000479D0C
	// succ:  l0000000000479B78 l0000000000479D0C
l0000000000479B78:
	x25 = 0x00000000004BF000
	x24 = 0x00000000004DE000
	x0 = 0x0000000000457000
	w23 = 0x00000000
	x25 = x25 + 0xFFFFFFFFFFFFFC5C
	x24 = x24 + 0x00000000000006A8
	x26 = x0 + 0xFFFFFFFFFFFFFC20
	goto l0000000000479BA4
	// succ:  l0000000000479BA4
l0000000000479B98:
	call ignore_signal (retsize: 0;)
	// succ:  l0000000000479B9C
l0000000000479B9C:
	x19 = Mem0[x19:word64]
	branch x19 == 0x0000000000000000 l0000000000479CE0
	// succ:  l0000000000479BA4 l0000000000479CE0
l0000000000479BA4:
	x2 = Mem0[x19 + 8:word64]
	w1 = 0x00000003
	x0 = Mem0[x2:word64]
	call decode_signal (retsize: 0;)
	w31 = w0 + 0x00000001
	NZCV = cond(w31)
	w20 = w0
	branch Test(EQ,Z) l0000000000479CCC
	// succ:  l0000000000479BC0 l0000000000479CCC
l0000000000479BC0:
	w31 = w21 - 0x00000001
	NZCV = cond(w31)
	branch Test(EQ,Z) l0000000000479C68
	// succ:  l0000000000479BC8 l0000000000479C68
l0000000000479BC8:
	w31 = w21 - 0x00000002
	NZCV = cond(w31)
	branch Test(EQ,Z) l0000000000479B98
	// succ:  l0000000000479BD0 l0000000000479B98
l0000000000479BD0:
	x1 = x22
	call set_signal (retsize: 0;)
	goto l0000000000479B9C
	// succ:  l0000000000479B9C
l0000000000479BDC:
	call builtin_usage (retsize: 0;)
	w0 = 0x00000102
	// succ:  l0000000000479BE4
l0000000000479BE4:
	v38 = sp + 16
	x19 = Mem0[v38:word64]
	v38 = v38 + 8
	x20 = Mem0[v38:word64]
	v39 = sp + 32
	x21 = Mem0[v39:word64]
	v39 = v39 + 8
	x22 = Mem0[v39:word64]
	v40 = sp + 48
	x23 = Mem0[v40:word64]
	v40 = v40 + 8
	x24 = Mem0[v40:word64]
	v41 = sp + 64
	x25 = Mem0[v41:word64]
	v41 = v41 + 8
	x26 = Mem0[v41:word64]
	x29 = Mem0[sp:word64]
	sp = sp + 8
	x30 = Mem0[sp:word64]
	sp = sp + 80
	return
	// succ:  trap_builtin_exit
l0000000000479BFC:
	w22 = w22 + 0x00000001
	goto l0000000000479AD4
	// succ:  l0000000000479AD4
l0000000000479C04:
	v30 = Mem0[x22:byte]
	w0 = (word32) v30
	branch w0 == 0x00000000 l0000000000479B4C
	// succ:  l0000000000479C0C l0000000000479B4C
l0000000000479C0C:
	w31 = w0 - 0x0000002D
	NZCV = cond(w31)
	branch Test(NE,Z) l0000000000479C1C
	// succ:  l0000000000479C14 l0000000000479C1C
l0000000000479C14:
	v31 = Mem0[x22 + 1:byte]
	w0 = (word32) v31
	branch w0 == 0x00000000 l0000000000479B4C
	// succ:  l0000000000479C1C l0000000000479B4C
l0000000000479C1C:
	x0 = x22
	w1 = 0x00000003
	call decode_signal (retsize: 0;)
	w31 = w0 + 0x00000001
	NZCV = cond(w31)
	branch Test(EQ,Z) l0000000000479B4C
	// succ:  l0000000000479C30 l0000000000479B4C
l0000000000479C30:
	x0 = Mem0[x19:word64]
	branch x0 == 0x0000000000000000 l0000000000479DB4
	// succ:  l0000000000479C38 l0000000000479DB4
l0000000000479C38:
	x19 = x0
	goto l0000000000479B54
	// succ:  l0000000000479B54
l0000000000479C40:
	x0 = x22
	call all_digits (retsize: 0;)
	branch w0 == 0x00000000 l0000000000479B40
	// succ:  l0000000000479C4C l0000000000479B40
l0000000000479C4C:
	x0 = x22
	w1 = 0x00000003
	call decode_signal (retsize: 0;)
	w31 = w0 + 0x00000001
	NZCV = cond(w31)
	w21 = 0x00000001
	branch Test(NE,Z) l0000000000479B6C
	// succ:  l0000000000479C64 l0000000000479B6C
l0000000000479C64:
	goto l0000000000479B40
	// succ:  l0000000000479B40
l0000000000479C68:
	call restore_default_signal (retsize: 0;)
	w2 = w20 - 0x00000002
	w31 = w2 - 0x00000014
	NZCV = cond(w31)
	branch Test(UGT,ZC) l0000000000479B9C
	// succ:  l0000000000479C78 l0000000000479B9C
l0000000000479C78:
	v37 = Mem0[x25 + (uint64) ((uint32) w2):byte]
	w0 = (word32) v37
	x1 = 0x0000000000479C88
	x0 = x1 + (int64) ((int8) w0)
	call x0 (retsize: 0;)
	return
	// succ:  trap_builtin_exit
l0000000000479CCC:
	x0 = Mem0[x19 + 8:word64]
	w23 = 0x00000001
	x0 = Mem0[x0:word64]
	call sh_invalidsig (retsize: 0;)
	goto l0000000000479B9C
	// succ:  l0000000000479B9C
l0000000000479CE0:
	w0 = w23
	goto l0000000000479BE4
	// succ:  l0000000000479BE4
l0000000000479CE8:
	w1 = 0x00000001
	x0 = 0x0000000000000000
	call display_signal_list (retsize: 0;)
	// succ:  l0000000000479CF4
l0000000000479CF4:
	v42 = sp + 16
	x19 = Mem0[v42:word64]
	v42 = v42 + 8
	x20 = Mem0[v42:word64]
	v43 = sp + 32
	x21 = Mem0[v43:word64]
	v43 = v43 + 8
	x22 = Mem0[v43:word64]
	v44 = sp + 48
	x23 = Mem0[v44:word64]
	v44 = v44 + 8
	x24 = Mem0[v44:word64]
	v45 = sp + 64
	x25 = Mem0[v45:word64]
	v45 = v45 + 8
	x26 = Mem0[v45:word64]
	x29 = Mem0[sp:word64]
	sp = sp + 8
	x30 = Mem0[sp:word64]
	sp = sp + 80
	// succ:  l0000000000479D08_thunk_sh_chkwrite
l0000000000479D08_thunk_sh_chkwrite:
	call sh_chkwrite (retsize: 0;)
	return
	// succ:  trap_builtin_exit
l0000000000479D0C:
	call free_trap_strings (retsize: 0;)
	w0 = Mem0[x20 + 1184:word32]
	w0 = w0 & 0xFFFFFF7F
	Mem0[x20 + 1184:word32] = w0
	goto l0000000000479B78
	// succ:  l0000000000479B78
l0000000000479D20:
	call initialize_terminating_signals (retsize: 0;)
	w20 = 0x00000000
	call get_all_original_signals (retsize: 0;)
	branch w21 == 0x00000000 l0000000000479D40
	// succ:  l0000000000479D30 l0000000000479D40
l0000000000479D30:
	goto l0000000000479D94
	// succ:  l0000000000479D94
l0000000000479D34:
	call fn00000000004798D4 (retsize: 0;)
	// succ:  l0000000000479D38
l0000000000479D38:
	x19 = Mem0[x19:word64]
	branch x19 == 0x0000000000000000 l0000000000479D7C
	// succ:  l0000000000479D40 l0000000000479D7C
l0000000000479D40:
	x2 = Mem0[x19 + 8:word64]
	w1 = 0x00000003
	x0 = Mem0[x2:word64]
	call decode_signal (retsize: 0;)
	w31 = w0 + 0x00000001
	NZCV = cond(w31)
	branch Test(NE,Z) l0000000000479D34
	// succ:  l0000000000479D58 l0000000000479D34
l0000000000479D58:
	x1 = Mem0[x19 + 8:word64]
	w20 = 0x00000001
	x0 = Mem0[x1:word64]
	call sh_invalidsig (retsize: 0;)
	goto l0000000000479D38
	// succ:  l0000000000479D38
l0000000000479D7C:
	w0 = w20
	goto l0000000000479CF4
	// succ:  l0000000000479CF4
l0000000000479D84:
	v34 = Mem0[x22 + 1:byte]
	w0 = (word32) v34
	NZCV = cond(w0 - w21)
	w21 = (word32) Test(EQ,Z)
	goto l0000000000479B6C
	// succ:  l0000000000479B6C
l0000000000479D94:
	w19 = w20
	// succ:  l0000000000479D98
l0000000000479D98:
	w0 = w19
	call fn00000000004798D4 (retsize: 0;)
	w19 = w19 + 0x00000001
	w31 = w19 - 0x00000044
	NZCV = cond(w31)
	branch Test(NE,Z) l0000000000479D98
	// succ:  l0000000000479DAC l0000000000479D98
l0000000000479DAC:
	w0 = 0x00000000
	goto l0000000000479CF4
	// succ:  l0000000000479CF4
l0000000000479DB4:
	w21 = 0x00000001
	goto l0000000000479B6C
	// succ:  l0000000000479B6C
trap_builtin_exit:


// describe_command
// Return size: 0
void describe_command()
describe_command_entry:
	// succ:  l0000000000479DBC
l0000000000479DBC:
	sp = fp
	sp = sp + -112
	Mem0[sp:word64] = x29
	sp = sp + 8
	Mem0[sp:word64] = x30
	x29 = x31 + 0x0000000000000000
	v8 = sp + 16
	Mem0[v8:word64] = x19
	v8 = v8 + 8
	Mem0[v8:word64] = x20
	v11 = sp + 32
	Mem0[v11:word64] = x21
	v11 = v11 + 8
	Mem0[v11:word64] = x22
	v14 = sp + 48
	Mem0[v14:word64] = x23
	v14 = v14 + 8
	Mem0[v14:word64] = x24
	v17 = sp + 64
	Mem0[v17:word64] = x25
	v17 = v17 + 8
	Mem0[v17:word64] = x26
	v20 = sp + 80
	Mem0[v20:word64] = x27
	v20 = v20 + 8
	Mem0[v20:word64] = x28
	w20 = w1
	x21 = x0
	w22 = w1 & 0x00000001
	w19 = w1 & 0x00000020
	branch (w20 & 0x00000020) == 0x00000000 l0000000000479E3C
	// succ:  l0000000000479DEC l0000000000479E3C
l0000000000479DEC:
	x1 = 0x00000000004DE000
	w1 = Mem0[x1 + 2200:word32]
	branch w1 != 0x00000000 l000000000047A0BC
	// succ:  l0000000000479DF8 l000000000047A0BC
l0000000000479DF8:
	w26 = 0x00000000
	// succ:  l0000000000479DFC
l0000000000479DFC:
	x0 = x21
	call find_reserved_word (retsize: 0;)
	branch (w0 & 0x00000000) == 0x00000000 l0000000000479E40
	// succ:  l0000000000479E08 l0000000000479E40
l0000000000479E08:
	branch (w20 & 0x00000008) == 0x00000000 l000000000047A144
	// succ:  l0000000000479E0C l000000000047A144
l0000000000479E0C:
	branch (w20 & 0x00000002) == 0x00000000 l000000000047A204
	// succ:  l0000000000479E10 l000000000047A204
l0000000000479E10:
	branch (w20 & 0x00000004) == 0x00000000 l000000000047A23C
	// succ:  l0000000000479E14 l000000000047A23C
l0000000000479E14:
	w26 = 0x00000001
	branch w22 != 0x00000000 l0000000000479E40
	// succ:  l0000000000479E1C l0000000000479E40
l0000000000479E1C:
	w0 = 0x00000001
	// succ:  l0000000000479E20
l0000000000479E20:
	v29 = sp + 16
	x19 = Mem0[v29:word64]
	v29 = v29 + 8
	x20 = Mem0[v29:word64]
	v30 = sp + 32
	x21 = Mem0[v30:word64]
	v30 = v30 + 8
	x22 = Mem0[v30:word64]
	v31 = sp + 48
	x23 = Mem0[v31:word64]
	v31 = v31 + 8
	x24 = Mem0[v31:word64]
	v32 = sp + 64
	x25 = Mem0[v32:word64]
	v32 = v32 + 8
	x26 = Mem0[v32:word64]
	v33 = sp + 80
	x27 = Mem0[v33:word64]
	v33 = v33 + 8
	x28 = Mem0[v33:word64]
	x29 = Mem0[sp:word64]
	sp = sp + 8
	x30 = Mem0[sp:word64]
	sp = sp + 112
	return
	// succ:  describe_command_exit
l0000000000479E3C:
	w26 = 0x00000000
	// succ:  l0000000000479E40
l0000000000479E40:
	w31 = w20 & 0x00000060
	NZ = cond(w31)
	C = false
	V = false
	branch Test(EQ,Z) l0000000000479F5C
	// succ:  l0000000000479E48 l0000000000479F5C
l0000000000479E48:
	branch w19 != 0x00000000 l0000000000479E6C
	// succ:  l0000000000479E4C l0000000000479E6C
l0000000000479E4C:
	x0 = x21
	call find_shell_builtin (retsize: 0;)
	branch x0 == 0x0000000000000000 l0000000000479E6C
	// succ:  l0000000000479E58 l0000000000479E6C
l0000000000479E58:
	branch (w20 & 0x00000008) == 0x00000000 l000000000047A154
	// succ:  l0000000000479E5C l000000000047A154
l0000000000479E5C:
	branch (w20 & 0x00000002) == 0x00000000 l000000000047A0E0
	// succ:  l0000000000479E60 l000000000047A0E0
l0000000000479E60:
	branch (w20 & 0x00000004) == 0x00000000 l000000000047A174
	// succ:  l0000000000479E64 l000000000047A174
l0000000000479E64:
	branch w22 == 0x00000000 l0000000000479E1C
	// succ:  l0000000000479E68 l0000000000479E1C
l0000000000479E68:
	w26 = 0x00000001
	// succ:  l0000000000479E6C
l0000000000479E6C:
	x0 = x21
	call absolute_program (retsize: 0;)
	branch w0 != 0x00000000 l000000000047A08C
	// succ:  l0000000000479E78 l000000000047A08C
l0000000000479E78:
	branch w22 == 0x00000000 l0000000000479F88
	// succ:  l0000000000479E7C l0000000000479F88
l0000000000479E7C:
	branch w19 != 0x00000000 l0000000000479F88
	// succ:  l0000000000479E80 l0000000000479F88
l0000000000479E80:
	x0 = 0x00000000004BF000
	x0 = x0 + 0xFFFFFFFFFFFFFD30
	w28 = 0x00000016
	Mem0[x29 + 96:word64] = x0
	x27 = 0x00000000004DE000
	w23 = 0x00000000
	w28 = w20 & w28
	x27 = x27 + 0x00000000000006B4
	x0 = x21
	branch w22 != 0x00000000 l0000000000479F28
	// succ:  l0000000000479EA8 l0000000000479F28
l0000000000479EA8:
	call find_user_command (retsize: 0;)
	x19 = x0
	branch x19 == 0x0000000000000000 l0000000000479F3C
	// succ:  l0000000000479EB4 l0000000000479F3C
l0000000000479EB4:
	v44 = Mem0[x19:byte]
	w24 = (word32) v44
	v45 = Mem0[x21:byte]
	w2 = (word32) v45
	NZCV = cond(w2 - w24)
	branch Test(EQ,Z) l0000000000479FC8
	// succ:  l0000000000479EC4 l0000000000479FC8
l0000000000479EC4:
	w2 = Mem0[x27:word32]
	branch w2 != 0x00000000 l0000000000479FD8
	// succ:  l0000000000479ECC l0000000000479FD8
l0000000000479ECC:
	x25 = 0x00000000004BF000
	branch (w20 & 0x00000080) == 0x00000000 l0000000000479EF0
	// succ:  l0000000000479ED4 l0000000000479EF0
l0000000000479ED4:
	w31 = w24 - 0x0000002F
	NZCV = cond(w31)
	branch Test(EQ,Z) l0000000000479EF0
	// succ:  l0000000000479EDC l0000000000479EF0
l0000000000479EDC:
	x1 = x19
	x0 = 0x0000000000000000
	w2 = 0x00000006
	call sh_makepath (retsize: 0;)
	x19 = x0
	// succ:  l0000000000479EF0
l0000000000479EF0:
	w23 = w23 + 0x00000001
	branch (w20 & 0x00000008) == 0x00000000 l000000000047A024
	// succ:  l0000000000479EF8 l000000000047A024
l0000000000479EF8:
	branch (w20 & 0x00000002) == 0x00000000 l000000000047A034
	// succ:  l0000000000479EFC l000000000047A034
l0000000000479EFC:
	w0 = 0x00000014
	NZ = cond(w20 & w0)
	C = false
	V = false
	branch Test(NE,Z) l000000000047A080
	// succ:  l0000000000479F08 l000000000047A080
l0000000000479F08:
	x0 = x19
	x1 = x25 + 0xFFFFFFFFFFFFFD30
	w2 = 0x0000018B
	call sh_xfree (retsize: 0;)
	branch w22 == 0x00000000 l0000000000479E1C
	// succ:  l0000000000479F1C l0000000000479E1C
l0000000000479F1C:
	w26 = 0x00000001
	x0 = x21
	branch w22 == 0x00000000 l0000000000479EA8
	// succ:  l0000000000479F28 l0000000000479EA8
l0000000000479F28:
	w1 = 0x00000008
	w2 = w23
	call user_command_matches (retsize: 0;)
	x19 = x0
	branch x19 != 0x0000000000000000 l0000000000479EB4
	// succ:  l0000000000479F3C l0000000000479EB4
l0000000000479F3C:
	w0 = w26
	v48 = sp + 16
	x19 = Mem0[v48:word64]
	v48 = v48 + 8
	x20 = Mem0[v48:word64]
	v49 = sp + 32
	x21 = Mem0[v49:word64]
	v49 = v49 + 8
	x22 = Mem0[v49:word64]
	v50 = sp + 48
	x23 = Mem0[v50:word64]
	v50 = v50 + 8
	x24 = Mem0[v50:word64]
	v51 = sp + 64
	x25 = Mem0[v51:word64]
	v51 = v51 + 8
	x26 = Mem0[v51:word64]
	v52 = sp + 80
	x27 = Mem0[v52:word64]
	v52 = v52 + 8
	x28 = Mem0[v52:word64]
	x29 = Mem0[sp:word64]
	sp = sp + 8
	x30 = Mem0[sp:word64]
	sp = sp + 112
	return
	// succ:  describe_command_exit
l0000000000479F5C:
	x0 = x21
	call find_function (retsize: 0;)
	x23 = x0
	branch x0 == 0x0000000000000000 l0000000000479E48
	// succ:  l0000000000479F6C l0000000000479E48
l0000000000479F6C:
	branch (w20 & 0x00000008) == 0x00000000 l000000000047A134
	// succ:  l0000000000479F70 l000000000047A134
l0000000000479F70:
	branch (w20 & 0x00000002) == 0x00000000 l000000000047A1C8
	// succ:  l0000000000479F74 l000000000047A1C8
l0000000000479F74:
	branch (w20 & 0x00000004) == 0x00000000 l000000000047A180
	// succ:  l0000000000479F78 l000000000047A180
l0000000000479F78:
	branch w22 == 0x00000000 l0000000000479E1C
	// succ:  l0000000000479F7C l0000000000479E1C
l0000000000479F7C:
	w26 = 0x00000001
	branch w19 != 0x00000000 l0000000000479E6C
	// succ:  l0000000000479F84 l0000000000479E6C
l0000000000479F84:
	goto l0000000000479E4C
	// succ:  l0000000000479E4C
l0000000000479F88:
	x0 = x21
	call phash_search (retsize: 0;)
	x19 = x0
	branch x0 == 0x0000000000000000 l0000000000479E80
	// succ:  l0000000000479F98 l0000000000479E80
l0000000000479F98:
	branch (w20 & 0x00000008) == 0x00000000 l000000000047A164
	// succ:  l0000000000479F9C l000000000047A164
l0000000000479F9C:
	branch (w20 & 0x00000002) == 0x00000000 l000000000047A108
	// succ:  l0000000000479FA0 l000000000047A108
l0000000000479FA0:
	w1 = 0x00000014
	NZ = cond(w20 & w1)
	C = false
	V = false
	branch Test(EQ,Z) l0000000000479FB0
	// succ:  l0000000000479FAC l0000000000479FB0
l0000000000479FAC:
	puts(x0)
	sp = sp + 0xFFFFFFFFFFFFFFF8
	// succ:  l0000000000479FB0
l0000000000479FB0:
	x1 = 0x00000000004BF000
	x0 = x19
	x1 = x1 + 0xFFFFFFFFFFFFFD30
	w2 = 0x00000155
	call sh_xfree (retsize: 0;)
	goto l0000000000479E1C
	// succ:  l0000000000479E1C
l0000000000479FC8:
	x0 = x19
	x1 = x21
	strcmp(x0, x1)
	sp = sp + 0xFFFFFFFFFFFFFFF8
	branch w0 != 0x00000000 l0000000000479EC4
	// succ:  l0000000000479FD8 l0000000000479EC4
l0000000000479FD8:
	x0 = x19
	call file_status (retsize: 0;)
	branch (w0 & 0x00000002) == 0x00000000 l000000000047A060
	// succ:  l0000000000479FE4 l000000000047A060
l0000000000479FE4:
	v53 = Mem0[x19:byte]
	w0 = (word32) v53
	x25 = 0x00000000004BF000
	w31 = w0 - 0x0000002F
	NZCV = cond(w31)
	branch Test(EQ,Z) l0000000000479EF0
	// succ:  l0000000000479FF4 l0000000000479EF0
l0000000000479FF4:
	branch w28 == 0x00000000 l0000000000479EF0
	// succ:  l0000000000479FF8 l0000000000479EF0
l0000000000479FF8:
	w0 = w20 & 0x00000080
	NZCV = cond(w0 - w31)
	w3 = 0x00000002
	w2 = 0x00000006
	x1 = x19
	x0 = 0x0000000000000000
l000000000047A024:
	x0 = 0x00000000004AB000
	x0 = x0 + 0xFFFFFFFFFFFFF960
	puts(x0)
	sp = sp + 0xFFFFFFFFFFFFFFF8
	goto l0000000000479F08
	// succ:  l0000000000479F08
l000000000047A034:
	x1 = 0x00000000004BF000
	x1 = x1 + 0xFFFFFFFFFFFFFDB0
	w2 = 0x00000005
	x0 = 0x0000000000000000
	dcgettext(x0, x1, x2)
	sp = sp + 0xFFFFFFFFFFFFFFF8
	x1 = x0
	x2 = x21
	x3 = x19
	w0 = 0x00000001
	__printf_chk(x0, x1, Mem0[sp:<unknown>])
	sp = sp + 0xFFFFFFFFFFFFFFF8
	goto l0000000000479F08
	// succ:  l0000000000479F08
l000000000047A060:
	x1 = Mem0[x29 + 96:word64]
	x0 = x19
	w2 = 0x00000170
	x25 = 0x00000000004BF000
	call sh_xfree (retsize: 0;)
	branch w22 == 0x00000000 l0000000000479F3C
	// succ:  l000000000047A078 l0000000000479F3C
l000000000047A078:
	x19 = 0x0000000000000000
	goto l0000000000479EF0
	// succ:  l0000000000479EF0
l000000000047A080:
	x0 = x19
	puts(x0)
	sp = sp + 0xFFFFFFFFFFFFFFF8
	goto l0000000000479F08
	// succ:  l0000000000479F08
l000000000047A08C:
	x0 = x21
	call file_status (retsize: 0;)
	branch (w0 & 0x00000002) == 0x00000000 l0000000000479E78
	// succ:  l000000000047A098 l0000000000479E78
l000000000047A098:
	branch (w20 & 0x00000008) == 0x00000000 l000000000047A274
	// succ:  l000000000047A09C l000000000047A274
l000000000047A09C:
	branch (w20 & 0x00000002) == 0x00000000 l000000000047A288
	// succ:  l000000000047A0A0 l000000000047A288
l000000000047A0A0:
	w0 = 0x00000014
	NZ = cond(w20 & w0)
	C = false
	V = false
	branch Test(EQ,Z) l0000000000479E1C
	// succ:  l000000000047A0AC l0000000000479E1C
l000000000047A0AC:
	x0 = x21
	puts(x0)
	sp = sp + 0xFFFFFFFFFFFFFFF8
	w0 = 0x00000001
	goto l0000000000479E20
	// succ:  l0000000000479E20
l000000000047A0BC:
	call find_alias (retsize: 0;)
	x23 = x0
	branch x0 == 0x0000000000000000 l0000000000479DF8
	// succ:  l000000000047A0C8 l0000000000479DF8
l000000000047A0C8:
	branch (w20 & 0x00000008) == 0x00000000 l000000000047A22C
	// succ:  l000000000047A0CC l000000000047A22C
l000000000047A0CC:
	branch (w20 & 0x00000002) == 0x00000000 l000000000047A248
	// succ:  l000000000047A0D0 l000000000047A248
l000000000047A0D0:
	branch (w20 & 0x00000004) == 0x00000000 l000000000047A18C
	// succ:  l000000000047A0D4 l000000000047A18C
l000000000047A0D4:
	w26 = 0x00000001
	branch w22 != 0x00000000 l0000000000479DFC
	// succ:  l000000000047A0DC l0000000000479DFC
l000000000047A0DC:
	goto l0000000000479E1C
	// succ:  l0000000000479E1C
l000000000047A0E0:
	x1 = 0x00000000004BF000
	x1 = x1 + 0xFFFFFFFFFFFFFD98
	w2 = 0x00000005
	x0 = 0x0000000000000000
	dcgettext(x0, x1, x2)
	sp = sp + 0xFFFFFFFFFFFFFFF8
	x1 = x0
	x2 = x21
	w0 = 0x00000001
	__printf_chk(x0, x1, Mem0[sp:<unknown>])
	sp = sp + 0xFFFFFFFFFFFFFFF8
	goto l0000000000479E64
	// succ:  l0000000000479E64
l000000000047A108:
	x1 = 0x00000000004BF000
	x1 = x1 + 0xFFFFFFFFFFFFFDC0
	w2 = 0x00000005
	x0 = 0x0000000000000000
	dcgettext(x0, x1, x2)
	sp = sp + 0xFFFFFFFFFFFFFFF8
	x1 = x0
	x2 = x21
	x3 = x19
	w0 = 0x00000001
	__printf_chk(x0, x1, Mem0[sp:<unknown>])
	sp = sp + 0xFFFFFFFFFFFFFFF8
	goto l0000000000479FB0
	// succ:  l0000000000479FB0
l000000000047A134:
	x0 = 0x00000000004AB000
	x0 = x0 + 0xFFFFFFFFFFFFFEA8
	puts(x0)
	sp = sp + 0xFFFFFFFFFFFFFFF8
	goto l0000000000479F78
	// succ:  l0000000000479F78
l000000000047A144:
	x0 = 0x00000000004BF000
	x0 = x0 + 0xFFFFFFFFFFFFFA00
	puts(x0)
	sp = sp + 0xFFFFFFFFFFFFFFF8
	goto l0000000000479E14
	// succ:  l0000000000479E14
l000000000047A154:
	x0 = 0x00000000004BE000
	x0 = x0 + 0x00000000000004A0
	puts(x0)
	sp = sp + 0xFFFFFFFFFFFFFFF8
	goto l0000000000479E64
	// succ:  l0000000000479E64
l000000000047A164:
	x0 = 0x00000000004AB000
	x0 = x0 + 0xFFFFFFFFFFFFF960
	puts(x0)
	sp = sp + 0xFFFFFFFFFFFFFFF8
	goto l0000000000479FB0
	// succ:  l0000000000479FB0
l000000000047A174:
	x0 = x21
	puts(x0)
	sp = sp + 0xFFFFFFFFFFFFFFF8
	goto l0000000000479E64
	// succ:  l0000000000479E64
l000000000047A180:
	x0 = x21
	puts(x0)
	sp = sp + 0xFFFFFFFFFFFFFFF8
	goto l0000000000479F78
	// succ:  l0000000000479F78
l000000000047A18C:
	x0 = Mem0[x23 + 8:word64]
	x25 = 0x00000000004BF000
	call sh_single_quote (retsize: 0;)
	x23 = x0
	x1 = 0x00000000004BF000
	x2 = x21
	x1 = x1 + 0xFFFFFFFFFFFFFD20
	x3 = x23
	w0 = 0x00000001
	__printf_chk(x0, x1, Mem0[sp:<unknown>])
	sp = sp + 0xFFFFFFFFFFFFFFF8
	x0 = x23
	x1 = x25 + 0xFFFFFFFFFFFFFD30
	w2 = 0x000000EF
	call sh_xfree (retsize: 0;)
	goto l000000000047A0D4
	// succ:  l000000000047A0D4
l000000000047A1C8:
	x1 = 0x00000000004BF000
	x1 = x1 + 0xFFFFFFFFFFFFFD80
	w2 = 0x00000005
	x0 = 0x0000000000000000
	dcgettext(x0, x1, x2)
	sp = sp + 0xFFFFFFFFFFFFFFF8
	x1 = x0
	x2 = x21
	w0 = 0x00000001
	__printf_chk(x0, x1, Mem0[sp:<unknown>])
	sp = sp + 0xFFFFFFFFFFFFFFF8
	x1 = Mem0[x23 + 8:word64]
	w2 = 0x00000003
	x0 = x21
	call named_function_string (retsize: 0;)
	puts(x0)
	sp = sp + 0xFFFFFFFFFFFFFFF8
	goto l0000000000479F78
	// succ:  l0000000000479F78
l000000000047A204:
	x1 = 0x00000000004BF000
	x1 = x1 + 0xFFFFFFFFFFFFFD68
	w2 = 0x00000005
	x0 = 0x0000000000000000
	dcgettext(x0, x1, x2)
	sp = sp + 0xFFFFFFFFFFFFFFF8
	x1 = x0
	x2 = x21
	w0 = 0x00000001
	__printf_chk(x0, x1, Mem0[sp:<unknown>])
	sp = sp + 0xFFFFFFFFFFFFFFF8
	goto l0000000000479E14
	// succ:  l0000000000479E14
l000000000047A22C:
	x0 = 0x00000000004BD000
	x0 = x0 + 0x0000000000000210
	puts(x0)
	sp = sp + 0xFFFFFFFFFFFFFFF8
	goto l000000000047A0D4
	// succ:  l000000000047A0D4
l000000000047A23C:
	x0 = x21
	puts(x0)
	sp = sp + 0xFFFFFFFFFFFFFFF8
	goto l0000000000479E14
	// succ:  l0000000000479E14
l000000000047A248:
	x1 = 0x00000000004BF000
	x1 = x1 + 0xFFFFFFFFFFFFFD08
	w2 = 0x00000005
	x0 = 0x0000000000000000
	dcgettext(x0, x1, x2)
	sp = sp + 0xFFFFFFFFFFFFFFF8
	x3 = Mem0[x23 + 8:word64]
	x1 = x0
	x2 = x21
	w0 = 0x00000001
	__printf_chk(x0, x1, Mem0[sp:<unknown>])
	sp = sp + 0xFFFFFFFFFFFFFFF8
	goto l000000000047A0D4
	// succ:  l000000000047A0D4
l000000000047A274:
	x0 = 0x00000000004AB000
	x0 = x0 + 0xFFFFFFFFFFFFF960
	puts(x0)
	sp = sp + 0xFFFFFFFFFFFFFFF8
	w0 = 0x00000001
	goto l0000000000479E20
	// succ:  l0000000000479E20
l000000000047A288:
	x1 = 0x00000000004BF000
	x1 = x1 + 0xFFFFFFFFFFFFFDB0
	w2 = 0x00000005
	x0 = 0x0000000000000000
	dcgettext(x0, x1, x2)
	sp = sp + 0xFFFFFFFFFFFFFFF8
	x1 = x0
	x2 = x21
	w0 = 0x00000001
	x3 = x21
	__printf_chk(x0, x1, Mem0[sp:<unknown>])
	sp = sp + 0xFFFFFFFFFFFFFFF8
	w0 = 0x00000001
	goto l0000000000479E20
	// succ:  l0000000000479E20
describe_command_exit:


// type_builtin
// Return size: 0
void type_builtin()
type_builtin_entry:
	// succ:  l000000000047A2B8
l000000000047A2B8:
	sp = fp
	sp = sp + -112
	Mem0[sp:word64] = x29
	sp = sp + 8
	Mem0[sp:word64] = x30
	x29 = x31 + 0x0000000000000000
	v8 = sp + 32
	Mem0[v8:word64] = x21
	v8 = v8 + 8
	Mem0[v8:word64] = x22
	v11 = sp + 16
	Mem0[v11:word64] = x19
	v11 = v11 + 8
	Mem0[v11:word64] = x20
	v14 = sp + 48
	Mem0[v14:word64] = x23
	v14 = v14 + 8
	Mem0[v14:word64] = x24
	v17 = sp + 64
	Mem0[v17:word64] = x25
	v17 = v17 + 8
	Mem0[v17:word64] = x26
	v20 = sp + 80
	Mem0[v20:word64] = x27
	v20 = v20 + 8
	Mem0[v20:word64] = x28
	x22 = x0
	branch x0 == 0x0000000000000000 l000000000047A55C
	// succ:  l000000000047A2DC l000000000047A55C
l000000000047A2DC:
	x20 = x0
	x0 = 0x00000000004BF000
	x26 = 0x00000000004BF000
	x25 = 0x00000000004BF000
	x28 = 0x00000000004BF000
	x0 = x0 + 0xFFFFFFFFFFFFFDF0
	x23 = 0x00000000004BD000
	w24 = 0x00000074
	w27 = 0x00000070
	x26 = x26 + 0xFFFFFFFFFFFFFDE0
	x25 = x25 + 0xFFFFFFFFFFFFFDD8
	x28 = x28 + 0xFFFFFFFFFFFFFDE8
	Mem0[x29 + 96:word64] = x0
	x23 = x23 + 0xFFFFFFFFFFFFF9C8
	// succ:  l000000000047A314
l000000000047A314:
	x2 = Mem0[x20 + 8:word64]
	x19 = Mem0[x2:word64]
	v26 = Mem0[x19:byte]
	w2 = (word32) v26
	w31 = w2 - 0x0000002D
	NZCV = cond(w31)
	branch Test(NE,Z) l000000000047A378
	// succ:  l000000000047A328 l000000000047A378
l000000000047A328:
	v30 = Mem0[x19 + 1:byte]
	w2 = (word32) v30
	x21 = x19 + 0x0000000000000001
	w31 = w2 - 0x00000074
	NZCV = cond(w31)
	branch Test(EQ,Z) l000000000047A3DC
	// succ:  l000000000047A338 l000000000047A3DC
l000000000047A338:
	w31 = w2 - 0x0000002D
	NZCV = cond(w31)
	branch Test(EQ,Z) l000000000047A408
	// succ:  l000000000047A340 l000000000047A408
l000000000047A340:
	w31 = w2 - 0x00000070
	NZCV = cond(w31)
	branch Test(EQ,Z) l000000000047A530
	// succ:  l000000000047A348 l000000000047A530
l000000000047A348:
	w31 = w2 - 0x00000061
	NZCV = cond(w31)
	branch Test(NE,Z) l000000000047A370
	// succ:  l000000000047A350 l000000000047A370
l000000000047A350:
	v32 = Mem0[x19 + 2:byte]
	w0 = (word32) v32
	w31 = w0 - 0x0000006C
	NZCV = cond(w31)
	branch Test(NE,Z) l000000000047A370
	// succ:  l000000000047A35C l000000000047A370
l000000000047A35C:
	v33 = Mem0[x19 + 3:byte]
	w0 = (word32) v33
	w31 = w0 - 0x0000006C
	NZCV = cond(w31)
	branch Test(NE,Z) l000000000047A370
	// succ:  l000000000047A368 l000000000047A370
l000000000047A368:
	v34 = Mem0[x19 + 4:byte]
	w0 = (word32) v34
	branch w0 == 0x00000000 l000000000047A438
	// succ:  l000000000047A370 l000000000047A438
l000000000047A370:
	x20 = Mem0[x20:word64]
	branch x20 != 0x0000000000000000 l000000000047A314
	// succ:  l000000000047A378 l000000000047A314
l000000000047A378:
	x20 = 0x00000000004BF000
	x21 = 0x00000000004BF000
	call reset_internal_getopt (retsize: 0;)
	w19 = 0x00000002
	x20 = x20 + 0xFFFFFFFFFFFFFDF8
	x21 = x21 + 0xFFFFFFFFFFFFFCDC
	w23 = 0xFFFFFFF5
	w24 = 0xFFFFFFED
	x0 = x22
	x1 = x20
	call internal_getopt (retsize: 0;)
	w31 = w0 + 0x00000001
	NZCV = cond(w31)
	branch Test(EQ,Z) l000000000047A484
	// succ:  l000000000047A3AC l000000000047A484
l000000000047A3AC:
	w2 = w0 - 0x00000050
	w31 = w2 - 0x00000024
	NZCV = cond(w31)
	branch Test(ULE,ZC) l000000000047A458
	// succ:  l000000000047A3B8 l000000000047A458
l000000000047A3B8:
	call builtin_usage (retsize: 0;)
	w0 = 0x00000102
	v39 = sp + 16
	x19 = Mem0[v39:word64]
	v39 = v39 + 8
	x20 = Mem0[v39:word64]
	v40 = sp + 32
	x21 = Mem0[v40:word64]
	v40 = v40 + 8
	x22 = Mem0[v40:word64]
	v41 = sp + 48
	x23 = Mem0[v41:word64]
	v41 = v41 + 8
	x24 = Mem0[v41:word64]
	v42 = sp + 64
	x25 = Mem0[v42:word64]
	v42 = v42 + 8
	x26 = Mem0[v42:word64]
	v43 = sp + 80
	x27 = Mem0[v43:word64]
	v43 = v43 + 8
	x28 = Mem0[v43:word64]
	x29 = Mem0[sp:word64]
	sp = sp + 8
	x30 = Mem0[sp:word64]
	sp = sp + 112
	return
	// succ:  type_builtin_exit
l000000000047A3DC:
	x0 = x21
	x1 = x23
	strcmp(x0, x1)
	sp = sp + 0xFFFFFFFFFFFFFFF8
	branch w0 != 0x00000000 l000000000047A370
	// succ:  l000000000047A3EC l000000000047A370
l000000000047A3EC:
	Mem0[x19 + 1:byte] = (byte) w24
	x0 = Mem0[x20 + 8:word64]
	x0 = Mem0[x0:word64]
	Mem0[x0 + 2:byte] = 0x00
	x20 = Mem0[x20:word64]
	branch x20 != 0x0000000000000000 l000000000047A314
	// succ:  l000000000047A404 l000000000047A314
l000000000047A404:
	goto l000000000047A378
	// succ:  l000000000047A378
l000000000047A408:
	x0 = x21
	x1 = x25
	strcmp(x0, x1)
	sp = sp + 0xFFFFFFFFFFFFFFF8
	branch w0 == 0x00000000 l000000000047A3EC
	// succ:  l000000000047A418 l000000000047A3EC
l000000000047A418:
	x0 = x21
	x1 = x28
	strcmp(x0, x1)
	sp = sp + 0xFFFFFFFFFFFFFFF8
	branch w0 == 0x00000000 l000000000047A540
	// succ:  l000000000047A428 l000000000047A540
l000000000047A428:
	x1 = Mem0[x29 + 96:word64]
	x0 = x21
	strcmp(x0, x1)
	sp = sp + 0xFFFFFFFFFFFFFFF8
	branch w0 != 0x00000000 l000000000047A370
	// succ:  l000000000047A438 l000000000047A370
l000000000047A438:
	w0 = 0x00000061
	Mem0[x19 + 1:byte] = (byte) w0
	x0 = Mem0[x20 + 8:word64]
	x0 = Mem0[x0:word64]
	Mem0[x0 + 2:byte] = 0x00
	x20 = Mem0[x20:word64]
	branch x20 != 0x0000000000000000 l000000000047A314
	// succ:  l000000000047A454 l000000000047A314
l000000000047A454:
	goto l000000000047A378
	// succ:  l000000000047A378
l000000000047A458:
	v50 = Mem0[x21 + (uint64) ((uint32) w2):byte]
	w1 = (word32) v50
	x0 = 0x000000000047A468
	x1 = x0 + (int64) ((int8) w1)
	call x1 (retsize: 0;)
	return
	// succ:  type_builtin_exit
l000000000047A484:
	x0 = 0x00000000004E3000
	x20 = Mem0[x0 + 3856:word64]
	branch x20 == 0x0000000000000000 l000000000047A578
	// succ:  l000000000047A490 l000000000047A578
l000000000047A490:
	w22 = 0x00000000
	w23 = w19 & 0x00000018
	goto l000000000047A4AC
	// succ:  l000000000047A4AC
l000000000047A49C:
	x20 = Mem0[x20:word64]
	NZCV = cond(w21 - w31)
l000000000047A4AC:
	x0 = Mem0[x20 + 8:word64]
	w1 = w19
	x0 = Mem0[x0:word64]
	call describe_command (retsize: 0;)
	w21 = w0
	branch w0 != 0x00000000 l000000000047A49C
	// succ:  l000000000047A4C4 l000000000047A49C
l000000000047A4C4:
	branch w23 != 0x00000000 l000000000047A49C
	// succ:  l000000000047A4C8 l000000000047A49C
l000000000047A4C8:
	x0 = Mem0[x20 + 8:word64]
	x0 = Mem0[x0:word64]
	call sh_notfound (retsize: 0;)
	x20 = Mem0[x20:word64]
	NZCV = cond(w21 - w31)
l000000000047A4EC:
	v54 = sp + 16
	x19 = Mem0[v54:word64]
	v54 = v54 + 8
	x20 = Mem0[v54:word64]
	v55 = sp + 32
	x21 = Mem0[v55:word64]
	v55 = v55 + 8
	x22 = Mem0[v55:word64]
	v56 = sp + 48
	x23 = Mem0[v56:word64]
	v56 = v56 + 8
	x24 = Mem0[v56:word64]
	v57 = sp + 64
	x25 = Mem0[v57:word64]
	v57 = v57 + 8
	x26 = Mem0[v57:word64]
	v58 = sp + 80
	x27 = Mem0[v58:word64]
	v58 = v58 + 8
	x28 = Mem0[v58:word64]
	x29 = Mem0[sp:word64]
	sp = sp + 8
	x30 = Mem0[sp:word64]
	sp = sp + 112
	// succ:  l000000000047A504_thunk_sh_chkwrite
l000000000047A504_thunk_sh_chkwrite:
	call sh_chkwrite (retsize: 0;)
	return
	// succ:  type_builtin_exit
l000000000047A530:
	x0 = x21
	x1 = x26
	strcmp(x0, x1)
	sp = sp + 0xFFFFFFFFFFFFFFF8
	branch w0 != 0x00000000 l000000000047A370
	// succ:  l000000000047A540 l000000000047A370
l000000000047A540:
	Mem0[x19 + 1:byte] = (byte) w27
	x0 = Mem0[x20 + 8:word64]
	x0 = Mem0[x0:word64]
	Mem0[x0 + 2:byte] = 0x00
	x20 = Mem0[x20:word64]
	branch x20 != 0x0000000000000000 l000000000047A314
	// succ:  l000000000047A558 l000000000047A314
l000000000047A558:
	goto l000000000047A378
	// succ:  l000000000047A378
l000000000047A55C:
	v44 = sp + 16
	x19 = Mem0[v44:word64]
	v44 = v44 + 8
	x20 = Mem0[v44:word64]
	v45 = sp + 32
	x21 = Mem0[v45:word64]
	v45 = v45 + 8
	x22 = Mem0[v45:word64]
	v46 = sp + 48
	x23 = Mem0[v46:word64]
	v46 = v46 + 8
	x24 = Mem0[v46:word64]
	v47 = sp + 64
	x25 = Mem0[v47:word64]
	v47 = v47 + 8
	x26 = Mem0[v47:word64]
	v48 = sp + 80
	x27 = Mem0[v48:word64]
	v48 = v48 + 8
	x28 = Mem0[v48:word64]
	x29 = Mem0[sp:word64]
	sp = sp + 8
	x30 = Mem0[sp:word64]
	sp = sp + 112
	return
	// succ:  type_builtin_exit
l000000000047A578:
	w0 = w20
	goto l000000000047A4EC
	// succ:  l000000000047A4EC
type_builtin_exit:


// ulimit_builtin
// Return size: 0
void ulimit_builtin()
ulimit_builtin_entry:
	// succ:  l000000000047A720
l000000000047A720:
	sp = fp
	sp = sp + -176
	Mem0[sp:word64] = x29
	sp = sp + 8
	Mem0[sp:word64] = x30
	x29 = x31 + 0x0000000000000000
	v8 = sp + 32
	Mem0[v8:word64] = x21
	v8 = v8 + 8
	Mem0[v8:word64] = x22
	x21 = 0x00000000004E1000
	v10 = Mem0[x21 + -1824:byte]
	w1 = (word32) v10
	v13 = sp + 16
	Mem0[v13:word64] = x19
	v13 = v13 + 8
	Mem0[v13:word64] = x20
	v16 = sp + 48
	Mem0[v16:word64] = x23
	v16 = v16 + 8
	Mem0[v16:word64] = x24
	v19 = sp + 64
	Mem0[v19:word64] = x25
	v19 = v19 + 8
	Mem0[v19:word64] = x26
	v22 = sp + 80
	Mem0[v22:word64] = x27
	v22 = v22 + 8
	Mem0[v22:word64] = x28
	x22 = x0
	x3 = x21 + 0xFFFFFFFFFFFFF8E0
	branch w1 != 0x00000000 l000000000047A7A4
	// succ:  l000000000047A750 l000000000047A7A4
l000000000047A750:
	w0 = 0x00000061
	x26 = 0x00000000004BF000
	Mem0[x21 + -1824:byte] = (byte) w0
	w0 = 0x00000053
	Mem0[x3 + 1:byte] = (byte) w0
	x4 = x26 + 0xFFFFFFFFFFFFFE28
	w0 = 0x00000048
	Mem0[x3 + 2:byte] = (byte) w0
	x4 = x4 + 0x0000000000000020
	w2 = 0x00000063
	x3 = x3 + 0x0000000000000003
	w5 = 0x0000003B
	goto l000000000047A788
	// succ:  l000000000047A788
l000000000047A784:
	x3 = x1
	// succ:  l000000000047A788
l000000000047A788:
	x1 = x3
	Mem0[x1:byte] = (byte) w2
	x1 = x1 + 2
	w2 = Mem0[x4:word32]
	x4 = x4 + 32
	Mem0[x1 + -1:byte] = (byte) w5
	NZCV = cond(w2 - w31)
	branch Test(GT,NZV) l000000000047A784
	// succ:  l000000000047A7A0 l000000000047A784
l000000000047A7A0:
	Mem0[x3 + 2:byte] = 0x00
	// succ:  l000000000047A7A4
l000000000047A7A4:
	x19 = x21 + 0xFFFFFFFFFFFFF8E0
	w0 = Mem0[x19 + 40:word32]
	branch w0 == 0x00000000 l000000000047A934
	// succ:  l000000000047A7B0 l000000000047A934
l000000000047A7B0:
	x20 = x21 + 0xFFFFFFFFFFFFF8E0
	Mem0[x20 + 56:word32] = 0x00000000
	call reset_internal_getopt (retsize: 0;)
	w24 = 0x00000000
	x2 = 0x00000000004C0000
	x25 = 0x00000000004BF000
	w23 = w24
	x26 = 0x00000000004E3000
	x27 = x2 + 0x0000000000000080
	x25 = x25 + 0xFFFFFFFFFFFFFE00
	x0 = x22
	x1 = x20
	call internal_getopt (retsize: 0;)
	w31 = w0 + 0x00000001
	NZCV = cond(w31)
	w19 = w0
	branch Test(EQ,Z) l000000000047A844
	// succ:  l000000000047A7F0 l000000000047A844
l000000000047A7F0:
	w3 = w19 - 0x0000003F
	w31 = w3 - 0x00000022
	NZCV = cond(w31)
	branch Test(ULE,ZC) l000000000047A8E8
	// succ:  l000000000047A7FC l000000000047A8E8
l000000000047A7FC:
	w1 = Mem0[x20 + 56:word32]
	w3 = Mem0[x20 + 40:word32]
	x0 = Mem0[x20 + 48:word64]
	NZCV = cond(w1 - w3)
	branch Test(GE,NZV) l000000000047A958
	// succ:  l000000000047A810 l000000000047A958
l000000000047A810:
l000000000047A844:
	x0 = 0x00000000004E3000
	x0 = Mem0[x0 + 3856:word64]
	branch w24 == 0x00000000 l000000000047A984
	// succ:  l000000000047A850 l000000000047A984
l000000000047A850:
	w0 = 0x00000002
	NZCV = cond(w23 - w31)
	x20 = 0x00000000004BF000
l000000000047A8E8:
	v40 = Mem0[x25 + (uint64) ((uint32) w3):byte]
	w0 = (word32) v40
	x1 = 0x000000000047A8F8
	x0 = x1 + (int64) ((int8) w0)
	call x0 (retsize: 0;)
	return
	// succ:  ulimit_builtin_exit
l000000000047A918:
	v44 = sp + 16
	x19 = Mem0[v44:word64]
	v44 = v44 + 8
	x20 = Mem0[v44:word64]
	v45 = sp + 32
	x21 = Mem0[v45:word64]
	v45 = v45 + 8
	x22 = Mem0[v45:word64]
	v46 = sp + 48
	x23 = Mem0[v46:word64]
	v46 = v46 + 8
	x24 = Mem0[v46:word64]
	v47 = sp + 64
	x25 = Mem0[v47:word64]
	v47 = v47 + 8
	x26 = Mem0[v47:word64]
	v48 = sp + 80
	x27 = Mem0[v48:word64]
	v48 = v48 + 8
	x28 = Mem0[v48:word64]
	x29 = Mem0[sp:word64]
	sp = sp + 8
	x30 = Mem0[sp:word64]
	sp = sp + 176
	return
	// succ:  ulimit_builtin_exit
l000000000047A934:
	x1 = 0x00000000004C0000
	w3 = 0x00000010
	x0 = 0x0000000000000100
	x1 = x1 + 0x0000000000000080
	w2 = 0x0000014E
	Mem0[x19 + 40:word32] = w3
	call sh_xmalloc (retsize: 0;)
	Mem0[x19 + 48:word64] = x0
	goto l000000000047A7B0
	// succ:  l000000000047A7B0
l000000000047A958:
l000000000047A984:
	w26 = Mem0[x20 + 56:word32]
	branch w26 != 0x00000000 l000000000047AA48
	// succ:  l000000000047A98C l000000000047AA48
l000000000047A98C:
	x1 = Mem0[x20 + 48:word64]
	w2 = 0x00000066
	Mem0[x1:word32] = w2
	w2 = 0x00000001
	Mem0[x20 + 56:word32] = w2
	branch x0 == 0x0000000000000000 l000000000047A9AC
	// succ:  l000000000047A9A4 l000000000047A9AC
l000000000047A9A4:
	x0 = Mem0[x0 + 8:word64]
	x0 = Mem0[x0:word64]
	// succ:  l000000000047A9AC
l000000000047A9AC:
	Mem0[x1 + 8:word64] = x0
	w26 = 0x00000001
	// succ:  l000000000047A9B4
l000000000047A9B4:
	x0 = x21 + 0xFFFFFFFFFFFFF8E0
	x6 = Mem0[x0 + 48:word64]
	w5 = w26 - 0x00000001
	x3 = x6
	w2 = Mem0[x3:word32]
	x3 = x3 + 16
	x4 = 0x00000000004BF000
	x5 = x3 + (uint64) ((word32) w5)
	x19 = x6
	x4 = x4 + 0xFFFFFFFFFFFFFE28
	// succ:  l000000000047A9D8
l000000000047A9D8:
	w31 = w2 - 0x00000063
	NZCV = cond(w31)
	branch Test(EQ,Z) l000000000047AA58
	// succ:  l000000000047A9E0 l000000000047AA58
l000000000047A9E0:
	x0 = x4 + 0x0000000000000020
	goto l000000000047A9F4
	// succ:  l000000000047A9F4
l000000000047A9E8:
	NZCV = cond(w2 - w1)
	x0 = x0 + 0x0000000000000020
	branch Test(EQ,Z) l000000000047AA58
	// succ:  l000000000047A9F4 l000000000047AA58
l000000000047A9F4:
	w1 = Mem0[x0:word32]
	NZCV = cond(w1 - w31)
	branch Test(GT,NZV) l000000000047A9E8
	// succ:  l000000000047AA00 l000000000047A9E8
l000000000047AA00:
	x1 = 0x00000000004C0000
	w2 = 0x00000005
	x1 = x1 + 0x0000000000000110
	x0 = 0x0000000000000000
	dcgettext(x0, x1, x2)
	sp = sp + 0xFFFFFFFFFFFFFFF8
	w1 = Mem0[x19:word32]
	call builtin_error (retsize: 0;)
	w0 = 0x00000102
	v49 = sp + 16
	x19 = Mem0[v49:word64]
	v49 = v49 + 8
	x20 = Mem0[v49:word64]
	v50 = sp + 32
	x21 = Mem0[v50:word64]
	v50 = v50 + 8
	x22 = Mem0[v50:word64]
	v51 = sp + 48
	x23 = Mem0[v51:word64]
	v51 = v51 + 8
	x24 = Mem0[v51:word64]
	v52 = sp + 64
	x25 = Mem0[v52:word64]
	v52 = v52 + 8
	x26 = Mem0[v52:word64]
	v53 = sp + 80
	x27 = Mem0[v53:word64]
	v53 = v53 + 8
	x28 = Mem0[v53:word64]
	x29 = Mem0[sp:word64]
	sp = sp + 8
	x30 = Mem0[sp:word64]
	sp = sp + 176
	return
	// succ:  ulimit_builtin_exit
l000000000047AA48:
	NZCV = cond(w26 - w31)
	branch Test(GT,NZV) l000000000047A9B4
	// succ:  l000000000047AA50 l000000000047A9B4
l000000000047AA50:
	w0 = 0x00000000
	goto l000000000047A918
	// succ:  l000000000047A918
l000000000047AA58:
	x31 = x3 - x5
	NZCV = cond(x31)
	branch Test(EQ,Z) l000000000047AA6C
	// succ:  l000000000047AA60 l000000000047AA6C
l000000000047AA60:
	x19 = x3
	w2 = Mem0[x3:word32]
	x3 = x3 + 16
	goto l000000000047A9D8
	// succ:  l000000000047A9D8
l000000000047AA6C:
	NZCV = cond(w23 - w31)
	w0 = 0x00000003
ulimit_builtin_exit:


// fn000000000047AE10
// Return size: 0
void fn000000000047AE10()
fn000000000047AE10_entry:
	// succ:  l000000000047AE10
l000000000047AE10:
	sp = fp
	sp = sp + -48
	Mem0[sp:word64] = x29
	sp = sp + 8
	Mem0[sp:word64] = x30
	x29 = x31 + 0x0000000000000000
	w1 = 0x00000000
	branch (w0 & 0x00000100) == 0x00000000 l000000000047AE2C
	// succ:  l000000000047AE20 l000000000047AE2C
l000000000047AE20:
	w1 = 0x00000072
	Mem0[x29 + 32:byte] = (byte) w1
	w1 = 0x00000001
	// succ:  l000000000047AE2C
l000000000047AE2C:
	branch (w0 & 0x00000080) == 0x00000000 l000000000047AE44
	// succ:  l000000000047AE30 l000000000047AE44
l000000000047AE30:
	x6 = x29 + 0x0000000000000010
	x2 = x6 + (int64) ((int32) w1)
	w3 = 0x00000077
	Mem0[x2 + 16:byte] = (byte) w3
	w1 = w1 + 0x00000001
	// succ:  l000000000047AE44
l000000000047AE44:
	branch (w0 & 0x00000040) == 0x00000000 l000000000047AE5C
	// succ:  l000000000047AE48 l000000000047AE5C
l000000000047AE48:
	x3 = x29 + 0x0000000000000010
	x2 = x3 + (int64) ((int32) w1)
	w3 = 0x00000078
	Mem0[x2 + 16:byte] = (byte) w3
	w1 = w1 + 0x00000001
	// succ:  l000000000047AE5C
l000000000047AE5C:
	x6 = x29 + 0x0000000000000010
	x1 = x6 + (int64) ((int32) w1)
	Mem0[x1 + 16:byte] = 0x00
	w1 = 0x00000000
	branch (w0 & 0x00000020) == 0x00000000 l000000000047AE7C
	// succ:  l000000000047AE70 l000000000047AE7C
l000000000047AE70:
	w1 = 0x00000072
	Mem0[x29 + 24:byte] = (byte) w1
	w1 = 0x00000001
	// succ:  l000000000047AE7C
l000000000047AE7C:
	branch (w0 & 0x00000010) == 0x00000000 l000000000047AE94
	// succ:  l000000000047AE80 l000000000047AE94
l000000000047AE80:
	x3 = x29 + 0x0000000000000010
	x2 = x3 + (int64) ((int32) w1)
	w3 = 0x00000077
	Mem0[x2 + 8:byte] = (byte) w3
	w1 = w1 + 0x00000001
	// succ:  l000000000047AE94
l000000000047AE94:
	branch (w0 & 0x00000008) == 0x00000000 l000000000047AEAC
	// succ:  l000000000047AE98 l000000000047AEAC
l000000000047AE98:
	x7 = x29 + 0x0000000000000010
	x2 = x7 + (int64) ((int32) w1)
	w3 = 0x00000078
	Mem0[x2 + 8:byte] = (byte) w3
	w1 = w1 + 0x00000001
	// succ:  l000000000047AEAC
l000000000047AEAC:
	x2 = x29 + 0x0000000000000010
	x1 = x2 + (int64) ((int32) w1)
	Mem0[x1 + 8:byte] = 0x00
	w5 = 0x00000000
	branch (w0 & 0x00000004) == 0x00000000 l000000000047AECC
	// succ:  l000000000047AEC0 l000000000047AECC
l000000000047AEC0:
	w1 = 0x00000072
	Mem0[x29 + 16:byte] = (byte) w1
	w5 = 0x00000001
	// succ:  l000000000047AECC
l000000000047AECC:
	branch (w0 & 0x00000002) == 0x00000000 l000000000047AEE4
	// succ:  l000000000047AED0 l000000000047AEE4
l000000000047AED0:
l000000000047AEE4:
	branch (w0 & 0x00000001) == 0x00000000 l000000000047AEFC
	// succ:  l000000000047AEE8 l000000000047AEFC
l000000000047AEE8:
l000000000047AEFC:
	x1 = 0x00000000004C0000
	x4 = x29 + 0x0000000000000010
	x2 = x29 + 0x0000000000000020
	x3 = x29 + 0x0000000000000018
fn000000000047AE10_exit:


// parse_symbolic_mode
// Return size: 0
void parse_symbolic_mode()
parse_symbolic_mode_entry:
	// succ:  l000000000047AF28
l000000000047AF28:
	sp = fp
	sp = sp + -112
	Mem0[sp:word64] = x29
	sp = sp + 8
	Mem0[sp:word64] = x30
	x29 = x31 + 0x0000000000000000
	v8 = sp + 32
	Mem0[v8:word64] = x21
	v8 = v8 + 8
	Mem0[v8:word64] = x22
	v11 = sp + 48
	Mem0[v11:word64] = x23
	v11 = v11 + 8
	Mem0[v11:word64] = x24
	v14 = sp + 64
	Mem0[v14:word64] = x25
	v14 = v14 + 8
	Mem0[v14:word64] = x26
	x22 = 0x00000000004C0000
	x25 = 0x00000000004C0000
	x23 = 0x00000000004C0000
	v17 = sp + 16
	Mem0[v17:word64] = x19
	v17 = v17 + 8
	Mem0[v17:word64] = x20
	v20 = sp + 80
	Mem0[v20:word64] = x27
	v20 = v20 + 8
	Mem0[v20:word64] = x28
	x19 = x0
	Mem0[x29 + 96:word32] = w1
	x22 = x22 + 0x00000000000002A8
	x25 = x25 + 0x000000000000027C
	x23 = x23 + 0x00000000000002D8
	w21 = 0x00000000
	// succ:  l000000000047AF68
l000000000047AF68:
	v24 = Mem0[x19:byte]
	w1 = (word32) v24
	branch w1 == 0x00000000 l000000000047AFA8
	// succ:  l000000000047AF70 l000000000047AFA8
l000000000047AF70:
	x0 = x22
	call mbschr (retsize: 0;)
	branch x0 == 0x0000000000000000 l000000000047B000
	// succ:  l000000000047AF7C l000000000047B000
l000000000047AF7C:
	v26 = Mem0[x19:byte]
	w2 = (word32) v26
	x19 = x19 + 1
	w2 = w2 - 0x00000061
	w31 = w2 - 0x00000014
	NZCV = cond(w31)
	branch Test(UGT,ZC) l000000000047AF68
	// succ:  l000000000047AF8C l000000000047AF68
l000000000047AF8C:
	v31 = Mem0[x25 + (uint64) ((uint32) w2):byte]
	w0 = (word32) v31
	x1 = 0x000000000047AF9C
	x0 = x1 + (int64) ((int8) w0)
	call x0 (retsize: 0;)
	return
	// succ:  parse_symbolic_mode_exit
l000000000047AFA8:
	w26 = w1
	// succ:  l000000000047AFAC
l000000000047AFAC:
	x1 = 0x00000000004C0000
	w2 = 0x00000005
	x1 = x1 + 0x00000000000002B0
	x0 = 0x0000000000000000
	dcgettext(x0, x1, x2)
	sp = sp + 0xFFFFFFFFFFFFFFF8
	w1 = w26
	call builtin_error (retsize: 0;)
	w0 = 0xFFFFFFFF
	v35 = sp + 16
	x19 = Mem0[v35:word64]
	v35 = v35 + 8
	x20 = Mem0[v35:word64]
	v36 = sp + 32
	x21 = Mem0[v36:word64]
	v36 = v36 + 8
	x22 = Mem0[v36:word64]
	v37 = sp + 48
	x23 = Mem0[v37:word64]
	v37 = v37 + 8
	x24 = Mem0[v37:word64]
	v38 = sp + 64
	x25 = Mem0[v38:word64]
	v38 = v38 + 8
	x26 = Mem0[v38:word64]
	v39 = sp + 80
	x27 = Mem0[v39:word64]
	v39 = v39 + 8
	x28 = Mem0[v39:word64]
	x29 = Mem0[sp:word64]
	sp = sp + 8
	x30 = Mem0[sp:word64]
	sp = sp + 112
	return
	// succ:  parse_symbolic_mode_exit
l000000000047B000:
	v40 = Mem0[x19:byte]
	w26 = (word32) v40
	x19 = x19 + 0x0000000000000001
	w31 = w26 - 0x0000002D
	NZCV = cond(w31)
	branch Test(EQ,Z) l000000000047B020
	// succ:  l000000000047B010 l000000000047B020
l000000000047B010:
	w31 = w26 - 0x0000003D
	NZCV = cond(w31)
	branch Test(EQ,Z) l000000000047B020
	// succ:  l000000000047B018 l000000000047B020
l000000000047B018:
	w31 = w26 - 0x0000002B
	NZCV = cond(w31)
	branch Test(NE,Z) l000000000047AFAC
	// succ:  l000000000047B020 l000000000047AFAC
l000000000047B020:
	w20 = 0x00000000
	w28 = 0x00000092
	w27 = 0x00000049
	w24 = 0x00000124
	// succ:  l000000000047B030
l000000000047B030:
	v46 = Mem0[x19:byte]
	w1 = (word32) v46
	branch w1 == 0x00000000 l000000000047B06C
	// succ:  l000000000047B038 l000000000047B06C
l000000000047B038:
	x0 = x23
	call mbschr (retsize: 0;)
	branch x0 == 0x0000000000000000 l000000000047B0BC
	// succ:  l000000000047B044 l000000000047B0BC
l000000000047B044:
	v47 = Mem0[x19:byte]
	w2 = (word32) v47
	x19 = x19 + 1
	w31 = w2 - 0x00000077
	NZCV = cond(w31)
	branch Test(EQ,Z) l000000000047B0B4
	// succ:  l000000000047B050 l000000000047B0B4
l000000000047B050:
	w31 = w2 - 0x00000078
	NZCV = cond(w31)
	branch Test(EQ,Z) l000000000047B0AC
	// succ:  l000000000047B058 l000000000047B0AC
l000000000047B058:
	v48 = Mem0[x19:byte]
	w1 = (word32) v48
	w3 = w20 | w24
	w31 = w2 - 0x00000072
	NZCV = cond(w31)
l000000000047B06C:
	w1 = 0x00000001
	// succ:  l000000000047B070
l000000000047B070:
	NZCV = cond(w21 - w31)
	w0 = w20 & w21
l000000000047B0AC:
	w20 = w20 | w27
	goto l000000000047B030
	// succ:  l000000000047B030
l000000000047B0B4:
	w20 = w20 | w28
	goto l000000000047B030
	// succ:  l000000000047B030
l000000000047B0BC:
	v50 = Mem0[x19:byte]
	w2 = (word32) v50
	NZCV = cond(w2 - w31)
	w1 = (word32) Test(EQ,Z)
	w31 = w2 - 0x0000002C
	NZCV = cond(w31)
	branch Test(EQ,Z) l000000000047B070
	// succ:  l000000000047B0D0 l000000000047B070
l000000000047B0D0:
	branch w1 != 0x00000000 l000000000047B070
	// succ:  l000000000047B0D4 l000000000047B070
l000000000047B0D4:
	x1 = 0x00000000004C0000
	w2 = 0x00000005
	x1 = x1 + 0x00000000000002E0
	dcgettext(x0, x1, x2)
	sp = sp + 0xFFFFFFFFFFFFFFF8
	v51 = Mem0[x19:byte]
	w1 = (word32) v51
	call builtin_error (retsize: 0;)
	w0 = 0xFFFFFFFF
	v52 = sp + 16
	x19 = Mem0[v52:word64]
	v52 = v52 + 8
	x20 = Mem0[v52:word64]
	v53 = sp + 32
	x21 = Mem0[v53:word64]
	v53 = v53 + 8
	x22 = Mem0[v53:word64]
	v54 = sp + 48
	x23 = Mem0[v54:word64]
	v54 = v54 + 8
	x24 = Mem0[v54:word64]
	v55 = sp + 64
	x25 = Mem0[v55:word64]
	v55 = v55 + 8
	x26 = Mem0[v55:word64]
	v56 = sp + 80
	x27 = Mem0[v56:word64]
	v56 = v56 + 8
	x28 = Mem0[v56:word64]
	x29 = Mem0[sp:word64]
	sp = sp + 8
	x30 = Mem0[sp:word64]
	sp = sp + 112
	return
	// succ:  parse_symbolic_mode_exit
parse_symbolic_mode_exit:


// umask_builtin
// Return size: 0
void umask_builtin()
umask_builtin_entry:
	// succ:  l000000000047B15C
l000000000047B15C:
	sp = fp
	sp = sp + -48
	Mem0[sp:word64] = x29
	sp = sp + 8
	Mem0[sp:word64] = x30
	x29 = x31 + 0x0000000000000000
	v8 = sp + 16
	Mem0[v8:word64] = x19
	v8 = v8 + 8
	Mem0[v8:word64] = x20
	w19 = 0x00000000
	x20 = 0x00000000004C0000
	v12 = sp + 32
	Mem0[v12:word64] = x21
	v12 = v12 + 8
	Mem0[v12:word64] = x22
	x20 = x20 + 0x0000000000000310
	x21 = x0
	w22 = w19
	call reset_internal_getopt (retsize: 0;)
	// succ:  l000000000047B184
l000000000047B184:
	x0 = x21
	x1 = x20
	call internal_getopt (retsize: 0;)
	w31 = w0 + 0x00000001
	NZCV = cond(w31)
	branch Test(EQ,Z) l000000000047B1C0
	// succ:  l000000000047B198 l000000000047B1C0
l000000000047B198:
	w31 = w0 - 0x00000053
	NZCV = cond(w31)
	branch Test(EQ,Z) l000000000047B218
	// succ:  l000000000047B1A0 l000000000047B218
l000000000047B1A0:
	w31 = w0 - 0x00000070
	NZCV = cond(w31)
	branch Test(NE,Z) l000000000047B220
	// succ:  l000000000047B1A8 l000000000047B220
l000000000047B1A8:
	x0 = x21
	x1 = x20
	call internal_getopt (retsize: 0;)
	w31 = w0 + 0x00000001
	NZCV = cond(w31)
	w19 = w19 + 0x00000001
	branch Test(NE,Z) l000000000047B198
	// succ:  l000000000047B1C0 l000000000047B198
l000000000047B1C0:
	x0 = 0x00000000004E3000
	x20 = Mem0[x0 + 3856:word64]
	branch x20 == 0x0000000000000000 l000000000047B27C
	// succ:  l000000000047B1CC l000000000047B27C
l000000000047B1CC:
	x0 = Mem0[x20 + 8:word64]
	x0 = Mem0[x0:word64]
	v21 = Mem0[x0:byte]
	w1 = (word32) v21
	w1 = w1 - 0x00000030
l000000000047B204:
	v26 = sp + 16
	x19 = Mem0[v26:word64]
	v26 = v26 + 8
	x20 = Mem0[v26:word64]
	v27 = sp + 32
	x21 = Mem0[v27:word64]
	v27 = v27 + 8
	x22 = Mem0[v27:word64]
	x29 = Mem0[sp:word64]
	sp = sp + 8
	x30 = Mem0[sp:word64]
	sp = sp + 48
	w0 = 0x00000000
	// succ:  l000000000047B214_thunk_sh_chkwrite
l000000000047B214_thunk_sh_chkwrite:
	call sh_chkwrite (retsize: 0;)
	return
	// succ:  umask_builtin_exit
l000000000047B218:
	w22 = w22 + 0x00000001
	goto l000000000047B184
	// succ:  l000000000047B184
l000000000047B220:
	call builtin_usage (retsize: 0;)
	w0 = 0x00000102
	v24 = sp + 16
	x19 = Mem0[v24:word64]
	v24 = v24 + 8
	x20 = Mem0[v24:word64]
	v25 = sp + 32
	x21 = Mem0[v25:word64]
	v25 = v25 + 8
	x22 = Mem0[v25:word64]
	x29 = Mem0[sp:word64]
	sp = sp + 8
	x30 = Mem0[sp:word64]
	sp = sp + 48
	return
	// succ:  umask_builtin_exit
l000000000047B27C:
	w0 = 0x00000012
	call umask (retsize: 0;)
	w20 = w0
	call umask (retsize: 0;)
	branch w19 == 0x00000000 l000000000047B2AC
	// succ:  l000000000047B290 l000000000047B2AC
l000000000047B290:
	branch w22 == 0x00000000 l000000000047B304
	// succ:  l000000000047B294 l000000000047B304
l000000000047B294:
	x2 = 0x00000000004C0000
	x2 = x2 + 0x0000000000000308
	// succ:  l000000000047B29C
l000000000047B29C:
	x1 = 0x00000000004C0000
	w0 = 0x00000001
	x1 = x1 + 0x0000000000000318
	__printf_chk(x0, x1, Mem0[sp:<unknown>])
	sp = sp + 0xFFFFFFFFFFFFFFF8
	// succ:  l000000000047B2AC
l000000000047B2AC:
	branch w22 == 0x00000000 l000000000047B2EC
	// succ:  l000000000047B2B0 l000000000047B2EC
l000000000047B2B0:
	w0 = w20
	call fn000000000047AE10 (retsize: 0;)
	goto l000000000047B204
	// succ:  l000000000047B204
l000000000047B2EC:
	x1 = 0x00000000004C0000
	x1 = x1 + 0x0000000000000328
	w2 = w20
	w0 = 0x00000001
	__printf_chk(x0, x1, Mem0[sp:<unknown>])
	sp = sp + 0xFFFFFFFFFFFFFFF8
	goto l000000000047B204
	// succ:  l000000000047B204
l000000000047B304:
	x2 = 0x00000000004AC000
	x2 = x2 + 0x0000000000000460
	goto l000000000047B29C
	// succ:  l000000000047B29C
umask_builtin_exit:


// wait_builtin
// Return size: 0
void wait_builtin()
wait_builtin_entry:
	// succ:  l000000000047B318
l000000000047B318:
	sp = fp
	sp = sp + -352
	Mem0[sp:word64] = x29
	sp = sp + 8
	Mem0[sp:word64] = x30
	x29 = x31 + 0x0000000000000000
	v8 = sp + 16
	Mem0[v8:word64] = x19
	v8 = v8 + 8
	Mem0[v8:word64] = x20
	v11 = sp + 32
	Mem0[v11:word64] = x21
	v11 = v11 + 8
	Mem0[v11:word64] = x22
	v14 = sp + 48
	Mem0[v14:word64] = x23
	v14 = v14 + 8
	Mem0[v14:word64] = x24
	call no_options (retsize: 0;)
	Mem0[x29 + 344:word32] = w0
	branch w0 == 0x00000000 l000000000047B358
	// succ:  l000000000047B338 l000000000047B358
l000000000047B338:
	w0 = 0x00000102
	Mem0[x29 + 344:word32] = w0
	// succ:  l000000000047B340
l000000000047B340:
	w0 = Mem0[x29 + 344:word32]
	v16 = sp + 16
	x19 = Mem0[v16:word64]
	v16 = v16 + 8
	x20 = Mem0[v16:word64]
	v17 = sp + 32
	x21 = Mem0[v17:word64]
	v17 = v17 + 8
	x22 = Mem0[v17:word64]
	v18 = sp + 48
	x23 = Mem0[v18:word64]
	v18 = v18 + 8
	x24 = Mem0[v18:word64]
	x29 = Mem0[sp:word64]
	sp = sp + 8
	x30 = Mem0[sp:word64]
	sp = sp + 352
	return
	// succ:  wait_builtin_exit
l000000000047B358:
	x3 = 0x00000000004E1000
	w2 = Mem0[x3 + 636:word32]
	x5 = 0x00000000004E3000
	x0 = 0x00000000004E3000
	x5 = Mem0[x5 + 3856:word64]
	w4 = w2 + 0x00000001
	x0 = x0 + 0xFFFFFFFFFFFFFDC8
	w1 = 0x00000001
	Mem0[x29 + 336:word64] = x5
	Mem0[x29 + 320:word32] = w2
	Mem0[x3 + 636:word32] = w4
	call __sigsetjmp (retsize: 0;)
	branch w0 != 0x00000000 l000000000047B4C8
	// succ:  l000000000047B38C l000000000047B4C8
l000000000047B38C:
	x0 = Mem0[x29 + 336:word64]
	branch x0 == 0x0000000000000000 l000000000047B51C
	// succ:  l000000000047B394 l000000000047B51C
l000000000047B394:
	w20 = 0x00000001
	w21 = 0x00000011
	w22 = 0x0000007F
	x23 = 0x00000000004D6000
	x24 = 0x00000000004DF000
	// succ:  l000000000047B3D4
l000000000047B3D4:
	x1 = Mem0[x29 + 336:word64]
	x0 = Mem0[x1 + 8:word64]
	x19 = Mem0[x0:word64]
	v29 = Mem0[x19:byte]
	w0 = (word32) v29
	w2 = w0 - 0x00000030
l000000000047B4C8:
	x0 = 0x00000000004E3000
	w0 = Mem0[x0 + 2164:word32]
	w2 = Mem0[x29 + 320:word32]
	x1 = 0x00000000004E1000
	w0 = w0 + 0x00000080
	Mem0[x1 + 636:word32] = w2
	Mem0[x29 + 344:word32] = w0
	goto l000000000047B340
	// succ:  l000000000047B340
l000000000047B51C:
	call wait_for_background_pids (retsize: 0;)
	w1 = Mem0[x29 + 320:word32]
	x0 = 0x00000000004E1000
	Mem0[x0 + 636:word32] = w1
	goto l000000000047B340
	// succ:  l000000000047B340
wait_builtin_exit:


// fn000000000047B530
// Return size: 0
void fn000000000047B530()
fn000000000047B530_entry:
	// succ:  l000000000047B530
l000000000047B530:
	sp = fp
	sp = sp + -48
	Mem0[sp:word64] = x29
	sp = sp + 8
	Mem0[sp:word64] = x30
	x29 = x31 + 0x0000000000000000
	Mem0[sp + 16:word64] = x19
	Mem0[x29 + 32:word64] = x1
	x19 = x0
	call legal_identifier (retsize: 0;)
	x1 = Mem0[x29 + 32:word64]
	branch w0 == 0x00000000 l000000000047B58C
	// succ:  l000000000047B550 l000000000047B58C
l000000000047B550:
	x0 = x19
	w2 = 0x00000000
	call bind_variable (retsize: 0;)
	x1 = x0
	branch x0 == 0x0000000000000000 l000000000047B578
	// succ:  l000000000047B564 l000000000047B578
l000000000047B564:
	w0 = Mem0[x0 + 40:word32]
	w2 = 0x00004002
	NZ = cond(w0 & w2)
	C = false
	V = false
	w0 = 0x00000002
	branch Test(NE,Z) l000000000047B598
	// succ:  l000000000047B578 l000000000047B598
l000000000047B578:
	x31 = x1 - x31
	NZCV = cond(x31)
	w0 = (word32) Test(EQ,Z)
	x19 = Mem0[sp + 16:word64]
	x29 = Mem0[sp:word64]
	sp = sp + 8
	x30 = Mem0[sp:word64]
	sp = sp + 48
	return
	// succ:  fn000000000047B530_exit
l000000000047B58C:
	x0 = x19
	call sh_invalidid (retsize: 0;)
	w0 = 0x00000001
	// succ:  l000000000047B598
l000000000047B598:
	x19 = Mem0[sp + 16:word64]
	x29 = Mem0[sp:word64]
	sp = sp + 8
	x30 = Mem0[sp:word64]
	sp = sp + 48
	return
	// succ:  fn000000000047B530_exit
fn000000000047B530_exit:


// getopts_reset
// Return size: 0
void getopts_reset()
getopts_reset_entry:
	// succ:  l000000000047B5A4
l000000000047B5A4:
	sp = fp
	x1 = 0x00000000004E1000
	Mem0[x1 + 2448:word32] = w0
	x0 = 0x00000000004E1000
	Mem0[x0 + 2472:word32] = 0x00000000
	return
	// succ:  getopts_reset_exit
getopts_reset_exit:


// getopts_builtin
// Return size: 0
void getopts_builtin()
getopts_builtin_entry:
	// succ:  l000000000047B5B8
l000000000047B5B8:
	sp = fp
	sp = sp + -144
	Mem0[sp:word64] = x29
	sp = sp + 8
	Mem0[sp:word64] = x30
	x29 = x31 + 0x0000000000000000
	v8 = sp + 16
	Mem0[v8:word64] = x19
	v8 = v8 + 8
	Mem0[v8:word64] = x20
	v11 = sp + 32
	Mem0[v11:word64] = x21
	v11 = v11 + 8
	Mem0[v11:word64] = x22
	v14 = sp + 48
	Mem0[v14:word64] = x23
	v14 = v14 + 8
	Mem0[v14:word64] = x24
	v17 = sp + 64
	Mem0[v17:word64] = x25
	v17 = v17 + 8
	Mem0[v17:word64] = x26
	Mem0[sp + 80:word64] = x27
	branch x0 == 0x0000000000000000 l000000000047B5F8
	// succ:  l000000000047B5D8 l000000000047B5F8
l000000000047B5D8:
	Mem0[x29 + 128:word64] = x0
	call reset_internal_getopt (retsize: 0;)
	x0 = Mem0[x29 + 128:word64]
	x1 = 0x00000000004AC000
	x1 = x1 + 0x0000000000000460
	call internal_getopt (retsize: 0;)
	w31 = w0 + 0x00000001
	NZCV = cond(w31)
	branch Test(EQ,Z) l000000000047B620
	// succ:  l000000000047B5F8 l000000000047B620
l000000000047B5F8:
	call builtin_usage (retsize: 0;)
	w19 = 0x00000102
	w0 = w19
	v26 = sp + 32
	x21 = Mem0[v26:word64]
	v26 = v26 + 8
	x22 = Mem0[v26:word64]
	v27 = sp + 16
	x19 = Mem0[v27:word64]
	v27 = v27 + 8
	x20 = Mem0[v27:word64]
	v28 = sp + 48
	x23 = Mem0[v28:word64]
	v28 = v28 + 8
	x24 = Mem0[v28:word64]
	v29 = sp + 64
	x25 = Mem0[v29:word64]
	v29 = v29 + 8
	x26 = Mem0[v29:word64]
	x27 = Mem0[sp + 80:word64]
	x29 = Mem0[sp:word64]
	sp = sp + 8
	x30 = Mem0[sp:word64]
	sp = sp + 144
	return
	// succ:  getopts_builtin_exit
l000000000047B620:
	x0 = 0x00000000004E3000
	x0 = Mem0[x0 + 3856:word64]
	x1 = x29 + 0x0000000000000070
	call make_builtin_argv (retsize: 0;)
	x20 = x0
	w0 = Mem0[x29 + 112:word32]
	w31 = w0 - 0x00000002
	NZCV = cond(w31)
	branch Test(LE,ZCV) l000000000047B748
	// succ:  l000000000047B640 l000000000047B748
l000000000047B640:
	x24 = Mem0[x20 + 8:word64]
	x22 = Mem0[x20 + 16:word64]
	v32 = Mem0[x24:byte]
	w1 = (word32) v32
	w19 = w0 - 0x00000002
	w31 = w1 - 0x0000003A
	NZCV = cond(w31)
	w21 = (word32) Test(EQ,Z)
	branch w21 == 0x00000000 l000000000047B66C
	// succ:  l000000000047B65C l000000000047B66C
l000000000047B65C:
	x0 = 0x00000000004D8000
	w23 = Mem0[x0 + 2136:word32]
	x24 = x24 + 0x0000000000000001
	Mem0[x0 + 2136:word32] = 0x00000000
	// succ:  l000000000047B66C
l000000000047B66C:
	w31 = w19 - 0x00000001
	NZCV = cond(w31)
	branch Test(EQ,Z) l000000000047B784
	// succ:  l000000000047B674 l000000000047B784
l000000000047B674:
	x1 = x20 + 0x0000000000000010
	x0 = x1
	Mem0[x29 + 128:word64] = x1
	call sh_getopt_restore_state (retsize: 0;)
	x0 = 0x00000000004E3000
	x2 = Mem0[x0 + 1224:word64]
	x1 = Mem0[x29 + 128:word64]
	x25 = Mem0[x20 + 16:word64]
	w0 = w19
	Mem0[x20 + 16:word64] = x2
	x2 = x24
	call sh_getopt (retsize: 0;)
	w19 = w0
	Mem0[x20 + 16:word64] = x25
	x24 = 0x00000000004C0000
	// succ:  l000000000047B6B0
l000000000047B6B0:
	branch w21 == 0x00000000 l000000000047B6BC
	// succ:  l000000000047B6B4 l000000000047B6BC
l000000000047B6B4:
	x0 = 0x00000000004D8000
	Mem0[x0 + 2136:word32] = w23
	// succ:  l000000000047B6BC
l000000000047B6BC:
	x0 = 0x00000000004E1000
	w2 = Mem0[x0 + 2448:word32]
	w31 = w2 - 0x00000009
	NZCV = cond(w31)
	branch Test(GT,NZV) l000000000047B8AC
	// succ:  l000000000047B6CC l000000000047B8AC
l000000000047B6CC:
	w2 = w2 + 0x00000030
	Mem0[x29 + 110:byte] = (byte) w2
	Mem0[x29 + 111:byte] = 0x00
	x1 = 0x000000000000000E
	x2 = x29 + 0x0000000000000060
	x0 = 0x00000000004AC000
	x1 = x2 + x1
	x0 = x0 + 0xFFFFFFFFFFFFF9E0
	w2 = 0x00000000
	call bind_variable (retsize: 0;)
	w31 = w19 - 0x0000003F
	NZCV = cond(w31)
	branch Test(EQ,Z) l000000000047B858
	// succ:  l000000000047B6FC l000000000047B858
l000000000047B6FC:
	w31 = w19 + 0x00000001
	NZCV = cond(w31)
	branch Test(EQ,Z) l000000000047B940
	// succ:  l000000000047B704 l000000000047B940
l000000000047B704:
	w31 = w19 + 0x00000002
	NZCV = cond(w31)
	branch Test(EQ,Z) l000000000047B924
	// succ:  l000000000047B70C l000000000047B924
l000000000047B70C:
	w31 = w19 + 0x00000003
	NZCV = cond(w31)
	x0 = 0x00000000004E1000
	branch Test(EQ,Z) l000000000047B86C
	// succ:  l000000000047B718 l000000000047B86C
l000000000047B718:
	x1 = Mem0[x0 + 2440:word64]
	x0 = 0x00000000004C0000
	w2 = 0x00000000
	x0 = x0 + 0x0000000000000368
	call bind_variable (retsize: 0;)
	x0 = x22
	x1 = x29 + 0x0000000000000078
	Mem0[x29 + 120:byte] = (byte) w19
	Mem0[x29 + 121:byte] = 0x00
	call fn000000000047B530 (retsize: 0;)
	w19 = w0
	goto l000000000047B754
	// succ:  l000000000047B754
l000000000047B748:
	call builtin_usage (retsize: 0;)
	w19 = 0x00000102
	x24 = 0x00000000004C0000
	// succ:  l000000000047B754
l000000000047B754:
	x0 = x20
	x1 = x24 + 0x0000000000000330
	w2 = 0x00000148
	call sh_xfree (retsize: 0;)
	w0 = w19
	v36 = sp + 32
	x21 = Mem0[v36:word64]
	v36 = v36 + 8
	x22 = Mem0[v36:word64]
	v37 = sp + 16
	x19 = Mem0[v37:word64]
	v37 = v37 + 8
	x20 = Mem0[v37:word64]
	v38 = sp + 48
	x23 = Mem0[v38:word64]
	v38 = v38 + 8
	x24 = Mem0[v38:word64]
	v39 = sp + 64
	x25 = Mem0[v39:word64]
	v39 = v39 + 8
	x26 = Mem0[v39:word64]
	x27 = Mem0[sp + 80:word64]
	x29 = Mem0[sp:word64]
	sp = sp + 8
	x30 = Mem0[sp:word64]
	sp = sp + 144
	return
	// succ:  getopts_builtin_exit
l000000000047B784:
	x27 = 0x00000000004DF000
	x19 = Mem0[x27 + 3288:word64]
	x26 = 0x00000000004E3000
	branch x19 == 0x0000000000000000 l000000000047B964
	// succ:  l000000000047B794 l000000000047B964
l000000000047B794:
	x1 = 0x0000000000000000
	x2 = x26 + 0x00000000000004C8
	// succ:  l000000000047B79C
l000000000047B79C:
	x3 = Mem0[x2 + x1:word64]
	w0 = w1
	x1 = x1 + 0x0000000000000001
	x31 = x1 - 0x000000000000000A
	NZCV = cond(x31)
	branch x3 == 0x0000000000000000 l000000000047B7B8
	// succ:  l000000000047B7B0 l000000000047B7B8
l000000000047B7B0:
	branch Test(NE,Z) l000000000047B79C
	// succ:  l000000000047B7B4 l000000000047B79C
l000000000047B7B4:
	w0 = w1
	// succ:  l000000000047B7B8
l000000000047B7B8:
	x19 = Mem0[x19:word64]
	w1 = w0 + 0x00000001
	branch x19 != 0x0000000000000000 l000000000047B7B4
	// succ:  l000000000047B7C4 l000000000047B7B4
l000000000047B7C4:
	w0 = w0 + 0x00000002
	call strvec_create (retsize: 0;)
	x25 = x0
	x3 = x19
	x0 = x26 + 0x00000000000004C8
	// succ:  l000000000047B7D8
l000000000047B7D8:
	x4 = Mem0[x3 + x0:word64]
	branch x4 == 0x0000000000000000 l000000000047B91C
	// succ:  l000000000047B7E0 l000000000047B91C
l000000000047B7E0:
	w19 = w19 + 0x00000001
	Mem0[x25 + x3:word64] = x4
	w31 = w19 - 0x0000000A
	NZCV = cond(w31)
	x3 = x3 + 0x0000000000000008
	branch Test(NE,Z) l000000000047B7D8
	// succ:  l000000000047B7F4 l000000000047B7D8
l000000000047B7F4:
	x0 = 0x0000000000000050
	x3 = Mem0[x27 + 3288:word64]
	branch x3 == 0x0000000000000000 l000000000047B820
	// succ:  l000000000047B800 l000000000047B820
l000000000047B800:
	x4 = x25 + (int64) ((int32) w19)
	// succ:  l000000000047B804
l000000000047B804:
	x5 = Mem0[x3 + 8:word64]
	w19 = w19 + 0x00000001
	x5 = Mem0[x5:word64]
	Mem0[x4:word64] = x5
	x4 = x4 + 8
	x3 = Mem0[x3:word64]
	branch x3 != 0x0000000000000000 l000000000047B804
	// succ:  l000000000047B81C l000000000047B804
l000000000047B81C:
l000000000047B820:
	Mem0[x25 + x0:word64] = 0x0000000000000000
	x0 = x25
	call sh_getopt_restore_state (retsize: 0;)
	x1 = x25
	x2 = x24
	w0 = w19
	call sh_getopt (retsize: 0;)
	x24 = 0x00000000004C0000
	w19 = w0
	x1 = x24 + 0x0000000000000330
	x0 = x25
	w2 = 0x000000D7
	call sh_xfree (retsize: 0;)
	goto l000000000047B6B0
	// succ:  l000000000047B6B0
l000000000047B858:
	x0 = 0x00000000004E1000
	x1 = Mem0[x0 + 2440:word64]
	branch x1 == 0x0000000000000000 l000000000047B924
	// succ:  l000000000047B864 l000000000047B924
l000000000047B864:
	v51 = Mem0[x1:byte]
	w1 = (word32) v51
	branch w1 != 0x00000000 l000000000047B718
	// succ:  l000000000047B86C l000000000047B718
l000000000047B86C:
	branch w21 == 0x00000000 l000000000047B8F8
	// succ:  l000000000047B870 l000000000047B8F8
l000000000047B870:
	x1 = 0x00000000004AB000
	x1 = x1 + 0xFFFFFFFFFFFFFF58
	x0 = x22
	call fn000000000047B530 (retsize: 0;)
	w19 = w0
	// succ:  l000000000047B884
l000000000047B884:
	x0 = 0x00000000004D8000
	w3 = Mem0[x0 + 2132:word32]
	x0 = 0x00000000004C0000
	x1 = x29 + 0x0000000000000078
	w2 = 0x00000000
	x0 = x0 + 0x0000000000000368
	Mem0[x29 + 120:byte] = (byte) w3
	Mem0[x29 + 121:byte] = 0x00
	call bind_variable (retsize: 0;)
	goto l000000000047B754
	// succ:  l000000000047B754
l000000000047B8AC:
	Mem0[x29 + 111:byte] = 0x00
	x6 = x29 + 0x000000000000006E
	w5 = 0x0000000F
	w7 = 0x0000000A
	w4 = 0x00006667
	w3 = w2 / w7
	w4 = DPB(w4, 0x00006666, 16)
	x4 = (int64) (w2 *s w4)
	w3 = w3 + (w3 << 2)
	w3 = w2 - (w3 << 1)
l000000000047B8F8:
	x1 = 0x00000000004C0000
	x1 = x1 + 0x0000000000000370
	x0 = x22
	call fn000000000047B530 (retsize: 0;)
	w19 = w0
	// succ:  l000000000047B90C
l000000000047B90C:
	x0 = 0x00000000004C0000
	x0 = x0 + 0x0000000000000368
	call unbind_variable (retsize: 0;)
	goto l000000000047B754
	// succ:  l000000000047B754
l000000000047B91C:
l000000000047B924:
	x1 = 0x00000000004C0000
	x0 = x22
	x1 = x1 + 0x0000000000000370
	call fn000000000047B530 (retsize: 0;)
	w19 = w0
	branch w21 == 0x00000000 l000000000047B90C
	// succ:  l000000000047B93C l000000000047B90C
l000000000047B93C:
	goto l000000000047B884
	// succ:  l000000000047B884
l000000000047B940:
	x0 = 0x00000000004C0000
	x0 = x0 + 0x0000000000000368
	call unbind_variable (retsize: 0;)
	x1 = 0x00000000004C0000
	x0 = x22
	x1 = x1 + 0x0000000000000370
	call fn000000000047B530 (retsize: 0;)
	w19 = 0x00000001
	goto l000000000047B754
	// succ:  l000000000047B754
l000000000047B964:
	x0 = x26 + 0x00000000000004C8
	// succ:  l000000000047B968
l000000000047B968:
	x1 = Mem0[x0 + x19:word64]
	w25 = w19
	x19 = x19 + 0x0000000000000001
	x31 = x19 - 0x000000000000000A
	NZCV = cond(x31)
	branch x1 == 0x0000000000000000 l000000000047B984
	// succ:  l000000000047B97C l000000000047B984
l000000000047B97C:
	branch Test(NE,Z) l000000000047B968
	// succ:  l000000000047B980 l000000000047B968
l000000000047B980:
	w25 = w19
	// succ:  l000000000047B984
l000000000047B984:
	x26 = x26 + 0x00000000000004C8
	x0 = x26
	call sh_getopt_restore_state (retsize: 0;)
	x2 = x24
	w0 = w25
	x1 = x26
	call sh_getopt (retsize: 0;)
	w19 = w0
	x24 = 0x00000000004C0000
	goto l000000000047B6B0
	// succ:  l000000000047B6B0
getopts_builtin_exit:


// set_login_shell
// Return size: 0
void set_login_shell()
set_login_shell_entry:
	// succ:  l000000000047B9AC
l000000000047B9AC:
	sp = fp
	x0 = 0x00000000004DE000
	w0 = Mem0[x0 + 1736:word32]
	NZCV = cond(w0 - w31)
	x0 = 0x00000000004E1000
	w1 = (word32) Test(NE,Z)
	x0 = x0 + 0xFFFFFFFFFFFFF920
	Mem0[x0:word32] = w1
	w0 = 0x00000000
	return
	// succ:  set_login_shell_exit
set_login_shell_exit:


// fn000000000047B9D0
// Return size: 0
void fn000000000047B9D0()
fn000000000047B9D0_entry:
	// succ:  l000000000047B9D0
l000000000047B9D0:
	sp = fp
	sp = sp + -32
	Mem0[sp:word64] = x29
	sp = sp + 8
	Mem0[sp:word64] = x30
	x29 = x31 + 0x0000000000000000
	x1 = 0x00000000004C0000
	Mem0[sp + 16:word64] = x19
	x1 = x1 + 0x00000000000007A0
	x19 = x0
	w2 = 0x00000005
	x0 = 0x0000000000000000
	dcgettext(x0, x1, x2)
	sp = sp + 0xFFFFFFFFFFFFFFF8
	x1 = x19
	x19 = Mem0[sp + 16:word64]
	x29 = Mem0[sp:word64]
	sp = sp + 8
	x30 = Mem0[sp:word64]
	sp = sp + 32
	// succ:  l000000000047BA00_thunk_builtin_error
l000000000047BA00_thunk_builtin_error:
	call builtin_error (retsize: 0;)
	return
	// succ:  fn000000000047B9D0_exit
fn000000000047B9D0_exit:


// fn000000000047BA9C
// Return size: 0
void fn000000000047BA9C()
fn000000000047BA9C_entry:
	// succ:  l000000000047BA9C
l000000000047BA9C:
	sp = fp
	sp = sp + -48
	Mem0[sp:word64] = x29
	sp = sp + 8
	Mem0[sp:word64] = x30
	x29 = x31 + 0x0000000000000000
	v8 = sp + 16
	Mem0[v8:word64] = x19
	v8 = v8 + 8
	Mem0[v8:word64] = x20
	x20 = 0x00000000004C0000
	v11 = sp + 32
	Mem0[v11:word64] = x21
	v11 = v11 + 8
	Mem0[v11:word64] = x22
	x20 = x20 + 0x0000000000000380
	x1 = 0x00000000004C0000
	x22 = x0
	v15 = Mem0[x0:byte]
	w21 = (word32) v15
	x20 = x20 + 0x0000000000000018
	x1 = x1 + 0x00000000000007C0
	w19 = 0x00000000
	goto l000000000047BADC
	// succ:  l000000000047BADC
l000000000047BAD0:
	x1 = Mem0[x20:word64]
	x20 = x20 + 24
	w19 = w19 + 0x00000001
	branch x1 == 0x0000000000000000 l000000000047BB08
	// succ:  l000000000047BADC l000000000047BB08
l000000000047BADC:
	v18 = Mem0[x1:byte]
	w2 = (word32) v18
	NZCV = cond(w2 - w21)
	branch Test(NE,Z) l000000000047BAD0
	// succ:  l000000000047BAE8 l000000000047BAD0
l000000000047BAE8:
	x0 = x22
	strcmp(x0, x1)
	sp = sp + 0xFFFFFFFFFFFFFFF8
	branch w0 != 0x00000000 l000000000047BAD0
	// succ:  l000000000047BAF4 l000000000047BAD0
l000000000047BAF4:
	w0 = w19
	v22 = sp + 32
	x21 = Mem0[v22:word64]
	v22 = v22 + 8
	x22 = Mem0[v22:word64]
	v23 = sp + 16
	x19 = Mem0[v23:word64]
	v23 = v23 + 8
	x20 = Mem0[v23:word64]
	x29 = Mem0[sp:word64]
	sp = sp + 8
	x30 = Mem0[sp:word64]
	sp = sp + 48
	return
	// succ:  fn000000000047BA9C_exit
l000000000047BB08:
	w0 = 0xFFFFFFFF
	v24 = sp + 16
	x19 = Mem0[v24:word64]
	v24 = v24 + 8
	x20 = Mem0[v24:word64]
	v25 = sp + 32
	x21 = Mem0[v25:word64]
	v25 = v25 + 8
	x22 = Mem0[v25:word64]
	x29 = Mem0[sp:word64]
	sp = sp + 8
	x30 = Mem0[sp:word64]
	sp = sp + 48
	return
	// succ:  fn000000000047BA9C_exit
fn000000000047BA9C_exit:


// fn000000000047BB1C
// Return size: 0
void fn000000000047BB1C()
fn000000000047BB1C_entry:
	// succ:  l000000000047BB1C
l000000000047BB1C:
	sp = fp
	x4 = x0
	branch (w2 & 0x00000010) == 0x00000000 l000000000047BB44
	// succ:  l000000000047BB24 l000000000047BB44
l000000000047BB24:
	branch w1 != 0x00000000 l000000000047BB80
	// succ:  l000000000047BB28 l000000000047BB80
l000000000047BB28:
	x2 = 0x00000000004C0000
	x1 = 0x00000000004C0000
	x2 = x2 + 0x00000000000007D0
	w0 = 0x00000001
	x1 = x1 + 0x00000000000007D8
	x3 = x4
	__printf_chk(x0, x1, Mem0[sp:<unknown>])
	return
	// succ:  fn000000000047BB1C_exit
l000000000047BB44:
	branch w1 != 0x00000000 l000000000047BB64
	// succ:  l000000000047BB48 l000000000047BB64
l000000000047BB48:
	x3 = 0x00000000004BF000
	x1 = 0x00000000004BF000
	x3 = x3 + 0xFFFFFFFFFFFFF888
	w0 = 0x00000001
	x1 = x1 + 0xFFFFFFFFFFFFF890
	x2 = x4
	__printf_chk(x0, x1, Mem0[sp:<unknown>])
	return
	// succ:  fn000000000047BB1C_exit
l000000000047BB64:
	x3 = 0x00000000004AD000
	x1 = 0x00000000004BF000
	x3 = x3 + 0x00000000000001E8
	w0 = 0x00000001
	x1 = x1 + 0xFFFFFFFFFFFFF890
	x2 = x4
	__printf_chk(x0, x1, Mem0[sp:<unknown>])
	return
	// succ:  fn000000000047BB1C_exit
l000000000047BB80:
	x2 = 0x00000000004C0000
	x1 = 0x00000000004C0000
	x2 = x2 + 0x00000000000007C8
	w0 = 0x00000001
	x1 = x1 + 0x00000000000007D8
	x3 = x4
	__printf_chk(x0, x1, Mem0[sp:<unknown>])
	return
	// succ:  fn000000000047BB1C_exit
fn000000000047BB1C_exit:


// reset_shopt_options
// Return size: 0
void reset_shopt_options()
reset_shopt_options_entry:
	// succ:  l000000000047BCF4
l000000000047BCF4:
	sp = fp
	x2 = 0x00000000004E3000
	Mem0[x2 + 2976:word32] = 0x00000000
	x2 = 0x00000000004E3000
	Mem0[x2 + 1608:word32] = 0x00000000
	x2 = 0x00000000004E3000
	Mem0[x2 + 1628:word32] = 0x00000000
	x2 = 0x00000000004E3000
	Mem0[x2 + 3512:word32] = 0x00000000
	x2 = 0x00000000004E3000
	Mem0[x2 + 3520:word32] = 0x00000000
	x2 = 0x00000000004E3000
	Mem0[x2 + 3516:word32] = 0x00000000
	x2 = 0x00000000004E3000
	Mem0[x2 + 1308:word32] = 0x00000000
	x2 = 0x00000000004DE000
	Mem0[x2 + 2200:word32] = 0x00000000
	x2 = 0x00000000004E1000
	x0 = 0x00000000004DE000
	Mem0[x2 + 1672:word32] = 0x00000000
	x2 = 0x00000000004E3000
	w1 = Mem0[x0 + 1736:word32]
	Mem0[x2 + 3480:word32] = 0x00000000
	w0 = 0x00000001
	x2 = 0x00000000004D6000
	Mem0[x2 + 2560:word32] = w0
	x2 = 0x00000000004D8000
	Mem0[x2 + 2120:word32] = w0
	x2 = 0x00000000004E1000
	Mem0[x2 + 616:word32] = 0x00000000
	x2 = 0x00000000004E3000
	Mem0[x2 + 3460:word32] = 0x00000000
	x2 = 0x00000000004E3000
	Mem0[x2 + 3444:word32] = 0x00000000
	x2 = 0x00000000004D7000
	Mem0[x2 + 392:word32] = w0
	x2 = 0x00000000004E3000
	Mem0[x2 + 3452:word32] = 0x00000000
	x2 = 0x00000000004E3000
	Mem0[x2 + 3432:word32] = 0x00000000
	x2 = 0x00000000004D7000
	Mem0[x2 + 488:word32] = w0
	x0 = 0x00000000004E1000
	x0 = x0 + 0xFFFFFFFFFFFFF920
	Mem0[x0:word32] = w1
	return
	// succ:  reset_shopt_options_exit
reset_shopt_options_exit:


// get_shopt_options
// Return size: 0
void get_shopt_options()
get_shopt_options_entry:
	// succ:  l000000000047BDA8
l000000000047BDA8:
	sp = fp
	sp = sp + -64
	Mem0[sp:word64] = x29
	sp = sp + 8
	Mem0[sp:word64] = x30
	x29 = x31 + 0x0000000000000000
	v8 = sp + 32
	Mem0[v8:word64] = x21
	v8 = v8 + 8
	Mem0[v8:word64] = x22
	w0 = 0x0000002D
	x21 = 0x00000000004C0000
	v12 = sp + 16
	Mem0[v12:word64] = x19
	v12 = v12 + 8
	Mem0[v12:word64] = x20
	v15 = sp + 48
	Mem0[v15:word64] = x23
	v15 = v15 + 8
	Mem0[v15:word64] = x24
	x21 = x21 + 0x0000000000000380
	call strvec_create (retsize: 0;)
	x19 = 0x00000000004C0000
	x23 = 0x00000000004C0000
	x24 = x0
	x22 = x0
	x21 = x21 + 0x0000000000000018
	x0 = 0x0000000000000006
	x19 = x19 + 0x00000000000007C0
	w20 = 0x00000000
	x23 = x23 + 0x00000000000007E8
	goto l000000000047BDF8
	// succ:  l000000000047BDF8
l000000000047BDF4:
	strlen(x0)
	sp = sp + 0xFFFFFFFFFFFFFFF8
	// succ:  l000000000047BDF8
l000000000047BDF8:
	w2 = 0x00000253
	x1 = x23
	x0 = x0 + 0x0000000000000001
	call sh_xmalloc (retsize: 0;)
	x1 = x19
	strcpy(x0, x1)
	sp = sp + 0xFFFFFFFFFFFFFFF8
	Mem0[x22:word64] = x0
	x22 = x22 + 8
	x19 = Mem0[x21:word64]
	x21 = x21 + 24
	w20 = w20 + 0x00000001
	x0 = x19
	branch x19 != 0x0000000000000000 l000000000047BDF4
	// succ:  l000000000047BE24 l000000000047BDF4
l000000000047BE24:
	Mem0[x24 + (int64) ((int32) w20):word64] = x19
	x0 = x24
	v20 = sp + 16
	x19 = Mem0[v20:word64]
	v20 = v20 + 8
	x20 = Mem0[v20:word64]
	v21 = sp + 32
	x21 = Mem0[v21:word64]
	v21 = v21 + 8
	x22 = Mem0[v21:word64]
	v22 = sp + 48
	x23 = Mem0[v22:word64]
	v22 = v22 + 8
	x24 = Mem0[v22:word64]
	x29 = Mem0[sp:word64]
	sp = sp + 8
	x30 = Mem0[sp:word64]
	sp = sp + 64
	return
	// succ:  get_shopt_options_exit
get_shopt_options_exit:


// shopt_listopt
// Return size: 0
void shopt_listopt()
shopt_listopt_entry:
	// succ:  l000000000047BE40
l000000000047BE40:
	sp = fp
	sp = sp + -48
	Mem0[sp:word64] = x29
	sp = sp + 8
	Mem0[sp:word64] = x30
	x29 = x31 + 0x0000000000000000
	Mem0[sp + 16:word64] = x19
	x19 = x0
	branch x0 == 0x0000000000000000 l000000000047BEA4
	// succ:  l000000000047BE54 l000000000047BEA4
l000000000047BE54:
	Mem0[x29 + 32:word64] = x1
	call fn000000000047BA9C (retsize: 0;)
	x1 = Mem0[x29 + 32:word64]
	branch (w0 & 0x00000000) == 0x00000000 l000000000047BEBC
	// succ:  l000000000047BE64 l000000000047BEBC
l000000000047BE64:
l000000000047BEA4:
	NZCV = cond(w1 - w31)
	x19 = Mem0[sp + 16:word64]
	w0 = 0x00000010
	x29 = Mem0[sp:word64]
	sp = sp + 8
	x30 = Mem0[sp:word64]
	sp = sp + 48
l000000000047BEBC:
	x0 = x19
	call fn000000000047B9D0 (retsize: 0;)
	w0 = 0x00000001
	x19 = Mem0[sp + 16:word64]
	x29 = Mem0[sp:word64]
	sp = sp + 8
	x30 = Mem0[sp:word64]
	sp = sp + 48
	return
	// succ:  shopt_listopt_exit
shopt_listopt_exit:


// set_bashopts
// Return size: 0
void set_bashopts()
set_bashopts_entry:
	// succ:  l000000000047BED4
l000000000047BED4:
	sp = fp
	sp = sp + -128
	Mem0[sp:word64] = x29
	sp = sp + 8
	Mem0[sp:word64] = x30
	x29 = x31 + 0x0000000000000000
	v6 = sp + 64
	Mem0[v6:word64] = x25
	v6 = v6 + 8
	Mem0[v6:word64] = x26
	x25 = 0x00000000004C0000
	v9 = sp + 16
	Mem0[v9:word64] = x19
	v9 = v9 + 8
	Mem0[v9:word64] = x20
	v12 = sp + 48
	Mem0[v12:word64] = x23
	v12 = v12 + 8
	Mem0[v12:word64] = x24
	x19 = x25 + 0x0000000000000380
	x24 = 0x00000000004C0000
	v15 = sp + 32
	Mem0[v15:word64] = x21
	v15 = v15 + 8
	Mem0[v15:word64] = x22
	x19 = x19 + 0x0000000000000008
	x20 = x29 + 0x0000000000000050
	x21 = x24 + 0x00000000000007C0
	w22 = 0x00000000
	w23 = 0x00000001
	// succ:  l000000000047BF0C
l000000000047BF0C:
	x1 = Mem0[x19:word64]
	Mem0[x20:byte] = 0x00
	w1 = Mem0[x1:word32]
	x0 = x21
	branch w1 == 0x00000000 l000000000047BF30
	// succ:  l000000000047BF20 l000000000047BF30
l000000000047BF20:
	strlen(x0)
	sp = sp + 0xFFFFFFFFFFFFFFF8
	w22 = w22 + 0x00000001
	Mem0[x20:byte] = (byte) w23
	w22 = w22 + w0
	// succ:  l000000000047BF30
l000000000047BF30:
	x21 = Mem0[x19 + 16:word64]
	x20 = x20 + 0x0000000000000001
	x19 = x19 + 0x0000000000000018
	branch x21 != 0x0000000000000000 l000000000047BF0C
	// succ:  l000000000047BF40 l000000000047BF0C
l000000000047BF40:
	w0 = w22 + 0x00000001
	x26 = 0x00000000004C0000
set_bashopts_exit:


// fn000000000047C06C
// Return size: 0
void fn000000000047C06C()
fn000000000047C06C_entry:
	// succ:  l000000000047C06C
l000000000047C06C:
	sp = fp
	sp = sp + -64
	Mem0[sp:word64] = x29
	sp = sp + 8
	Mem0[sp:word64] = x30
	x29 = x31 + 0x0000000000000000
	v8 = sp + 16
	Mem0[v8:word64] = x19
	v8 = v8 + 8
	Mem0[v8:word64] = x20
	v11 = sp + 32
	Mem0[v11:word64] = x21
	v11 = v11 + 8
	Mem0[v11:word64] = x22
	Mem0[sp + 48:word64] = x23
	x19 = x1
	w21 = w0
	branch x1 == 0x0000000000000000 l000000000047C114
	// succ:  l000000000047C08C l000000000047C114
l000000000047C08C:
	x22 = 0x00000000004C0000
	w23 = 0x00000000
	x22 = x22 + 0x0000000000000380
	// succ:  l000000000047C0BC
l000000000047C0BC:
	x2 = Mem0[x19 + 8:word64]
	x20 = Mem0[x2:word64]
	x0 = x20
	call fn000000000047BA9C (retsize: 0;)
l000000000047C0F8:
	call set_bashopts (retsize: 0;)
	w0 = w23
	v20 = sp + 16
	x19 = Mem0[v20:word64]
	v20 = v20 + 8
	x20 = Mem0[v20:word64]
	v21 = sp + 32
	x21 = Mem0[v21:word64]
	v21 = v21 + 8
	x22 = Mem0[v21:word64]
	x23 = Mem0[sp + 48:word64]
	x29 = Mem0[sp:word64]
	sp = sp + 8
	x30 = Mem0[sp:word64]
	sp = sp + 64
	return
	// succ:  fn000000000047C06C_exit
l000000000047C114:
	w23 = w1
	goto l000000000047C0F8
	// succ:  l000000000047C0F8
fn000000000047C06C_exit:


// shopt_builtin
// Return size: 0
void shopt_builtin()
shopt_builtin_entry:
	goto l000000000047C11C
	// succ:  l000000000047C11C
l000000000047BC8C:
	sp = sp + -48
	Mem0[sp:word64] = x29
	sp = sp + 8
	Mem0[sp:word64] = x30
	x29 = x31 + 0x0000000000000000
	v39 = sp + 16
	Mem0[v39:word64] = x19
	v39 = v39 + 8
	Mem0[v39:word64] = x20
	x19 = 0x00000000004C0000
	Mem0[sp + 32:word64] = x21
	w20 = w0 & 0x00000004
	w21 = w0
	x19 = x19 + 0x0000000000000380
	x0 = 0x00000000004C0000
	x19 = x19 + 0x0000000000000008
	x0 = x0 + 0x00000000000007C0
	goto l000000000047BCC4
	// succ:  l000000000047BCC4
l000000000047BCBC:
	x0 = Mem0[x19 + -8:word64]
	branch x0 == 0x0000000000000000 l000000000047BCE4
	// succ:  l000000000047BCC4 l000000000047BCE4
l000000000047BCC4:
	x1 = Mem0[x19:word64]
	x19 = x19 + 0x0000000000000018
	w1 = Mem0[x1:word32]
	branch w20 != 0x00000000 l000000000047BCBC
	// succ:  l000000000047BCD4 l000000000047BCBC
l000000000047BCD4:
	w2 = w21
	call fn000000000047BB1C (retsize: 0;)
	x0 = Mem0[x19 + -8:word64]
	branch x0 != 0x0000000000000000 l000000000047BCC4
	// succ:  l000000000047BCE4 l000000000047BCC4
l000000000047BCE4:
	v44 = sp + 16
	x19 = Mem0[v44:word64]
	v44 = v44 + 8
	x20 = Mem0[v44:word64]
	x21 = Mem0[sp + 32:word64]
	x29 = Mem0[sp:word64]
	sp = sp + 8
	x30 = Mem0[sp:word64]
	sp = sp + 48
	// succ:  l000000000047BCF0_thunk_sh_chkwrite
l000000000047BCF0_thunk_sh_chkwrite:
	call sh_chkwrite (retsize: 0;)
	return
	// succ:  shopt_builtin_exit
l000000000047C11C:
	sp = fp
	sp = sp + -64
	Mem0[sp:word64] = x29
	sp = sp + 8
	Mem0[sp:word64] = x30
	x29 = x31 + 0x0000000000000000
	v8 = sp + 16
	Mem0[v8:word64] = x19
	v8 = v8 + 8
	Mem0[v8:word64] = x20
	v11 = sp + 32
	Mem0[v11:word64] = x21
	v11 = v11 + 8
	Mem0[v11:word64] = x22
	x20 = 0x00000000004C0000
	x22 = 0x00000000004C0000
	v14 = sp + 48
	Mem0[v14:word64] = x23
	v14 = v14 + 8
	Mem0[v14:word64] = x24
	x21 = x0
	w19 = 0x00000000
	call reset_internal_getopt (retsize: 0;)
	x20 = x20 + 0xFFFFFFFFFFFFF830
	x22 = x22 + 0x0000000000000378
	x0 = x21
	x1 = x20
	call internal_getopt (retsize: 0;)
	w31 = w0 + 0x00000001
	NZCV = cond(w31)
	w3 = w0
	branch Test(EQ,Z) l000000000047C1B8
	// succ:  l000000000047C164 l000000000047C1B8
l000000000047C164:
	w3 = w3 - 0x0000006F
	w31 = w3 - 0x00000006
	NZCV = cond(w31)
	branch Test(ULE,ZC) l000000000047C18C
	// succ:  l000000000047C170 l000000000047C18C
l000000000047C170:
	call builtin_usage (retsize: 0;)
	w0 = 0x00000102
	// succ:  l000000000047C178
l000000000047C178:
	v24 = sp + 16
	x19 = Mem0[v24:word64]
	v24 = v24 + 8
	x20 = Mem0[v24:word64]
	v25 = sp + 32
	x21 = Mem0[v25:word64]
	v25 = v25 + 8
	x22 = Mem0[v25:word64]
	v26 = sp + 48
	x23 = Mem0[v26:word64]
	v26 = v26 + 8
	x24 = Mem0[v26:word64]
	x29 = Mem0[sp:word64]
	sp = sp + 8
	x30 = Mem0[sp:word64]
	sp = sp + 64
	return
	// succ:  shopt_builtin_exit
l000000000047C18C:
	v45 = Mem0[x22 + (uint64) ((uint32) w3):byte]
	w0 = (word32) v45
	x1 = 0x000000000047C19C
	x0 = x1 + (int64) ((int8) w0)
	call x0 (retsize: 0;)
	return
	// succ:  shopt_builtin_exit
l000000000047C1B8:
	w1 = w19 & 0x00000003
	x2 = 0x00000000004E3000
	w31 = w1 - 0x00000003
	NZCV = cond(w31)
	x20 = Mem0[x2 + 3856:word64]
	branch Test(EQ,Z) l000000000047C39C
	// succ:  l000000000047C1CC l000000000047C39C
l000000000047C1CC:
	w2 = 0x0000000B
	w2 = w19 & w2
	w31 = w2 - 0x00000008
	NZCV = cond(w31)
	branch Test(EQ,Z) l000000000047C2AC
	// succ:  l000000000047C1DC l000000000047C2AC
l000000000047C1DC:
	branch x20 == 0x0000000000000000 l000000000047C3E0
	// succ:  l000000000047C1E0 l000000000047C3E0
l000000000047C1E0:
	w22 = w19 & 0x00000008
	branch (w19 & 0x00000008) == 0x00000000 l000000000047C268
	// succ:  l000000000047C1E8 l000000000047C268
l000000000047C1E8:
	branch w1 != 0x00000000 l000000000047C33C
	// succ:  l000000000047C1EC l000000000047C33C
l000000000047C1EC:
	x24 = 0x00000000004C0000
	x24 = x24 + 0x0000000000000380
	w23 = w19 & 0x00000004
	goto l000000000047C204
	// succ:  l000000000047C204
l000000000047C1FC:
	x20 = Mem0[x20:word64]
	branch x20 == 0x0000000000000000 l000000000047C394
	// succ:  l000000000047C204 l000000000047C394
l000000000047C204:
	x0 = Mem0[x20 + 8:word64]
	x21 = Mem0[x0:word64]
	x0 = x21
	call fn000000000047BA9C (retsize: 0;)
	branch (w0 & 0x00000000) == 0x00000000 l000000000047C36C
	// succ:  l000000000047C218 l000000000047C36C
l000000000047C218:
l000000000047C268:
	w19 = w19 & 0x00000001
	NZCV = cond(w19 - w31)
	w0 = 0x0000002D
	w21 = 0x0000002B
l000000000047C2AC:
	w21 = 0x00000000
	branch x20 == 0x0000000000000000 l000000000047C3BC
	// succ:  l000000000047C2B4 l000000000047C3BC
l000000000047C2B4:
	x24 = 0x00000000004BF000
	x23 = 0x00000000004BF000
	x22 = 0x00000000004AD000
	x24 = x24 + 0xFFFFFFFFFFFFF890
	x23 = x23 + 0xFFFFFFFFFFFFF888
	x22 = x22 + 0x00000000000001E8
	goto l000000000047C2F8
	// succ:  l000000000047C2F8
l000000000047C2F0:
	x20 = Mem0[x20:word64]
	branch x20 == 0x0000000000000000 l000000000047C37C
	// succ:  l000000000047C2F8 l000000000047C37C
l000000000047C2F8:
	x0 = Mem0[x20 + 8:word64]
	x0 = Mem0[x0:word64]
	call minus_o_option_value (retsize: 0;)
	w31 = w0 + 0x00000001
	NZCV = cond(w31)
	branch Test(EQ,Z) l000000000047C358
	// succ:  l000000000047C30C l000000000047C358
l000000000047C30C:
	NZCV = cond(w0 - w31)
l000000000047C33C:
	w0 = w19 & 0x00000001
	x1 = x20
	v33 = sp + 32
	x21 = Mem0[v33:word64]
	v33 = v33 + 8
	x22 = Mem0[v33:word64]
	v34 = sp + 16
	x19 = Mem0[v34:word64]
	v34 = v34 + 8
	x20 = Mem0[v34:word64]
	v35 = sp + 48
	x23 = Mem0[v35:word64]
	v35 = v35 + 8
	x24 = Mem0[v35:word64]
	x29 = Mem0[sp:word64]
	sp = sp + 8
	x30 = Mem0[sp:word64]
	sp = sp + 64
	// succ:  l000000000047C354_thunk_fn000000000047C06C
l000000000047C354_thunk_fn000000000047C06C:
	call fn000000000047C06C (retsize: 0;)
	return
	// succ:  shopt_builtin_exit
l000000000047C358:
	x0 = Mem0[x20 + 8:word64]
	w21 = 0x00000001
	x0 = Mem0[x0:word64]
	call sh_invalidoptname (retsize: 0;)
	goto l000000000047C2F0
	// succ:  l000000000047C2F0
l000000000047C36C:
	x0 = x21
	call fn000000000047B9D0 (retsize: 0;)
	w22 = 0x00000001
	goto l000000000047C1FC
	// succ:  l000000000047C1FC
l000000000047C37C:
	w0 = w21
	// succ:  l000000000047C380
l000000000047C380:
	v41 = sp + 16
	x19 = Mem0[v41:word64]
	v41 = v41 + 8
	x20 = Mem0[v41:word64]
	v42 = sp + 32
	x21 = Mem0[v42:word64]
	v42 = v42 + 8
	x22 = Mem0[v42:word64]
	v43 = sp + 48
	x23 = Mem0[v43:word64]
	v43 = v43 + 8
	x24 = Mem0[v43:word64]
	x29 = Mem0[sp:word64]
	sp = sp + 8
	x30 = Mem0[sp:word64]
	sp = sp + 64
	// succ:  l000000000047C390_thunk_sh_chkwrite
l000000000047C390_thunk_sh_chkwrite:
	call sh_chkwrite (retsize: 0;)
	return
	// succ:  shopt_builtin_exit
l000000000047C394:
	w0 = w22
	goto l000000000047C380
	// succ:  l000000000047C380
l000000000047C39C:
	x1 = 0x00000000004C0000
	x1 = x1 + 0xFFFFFFFFFFFFF838
	w2 = 0x00000005
	x0 = 0x0000000000000000
	dcgettext(x0, x1, x2)
	sp = sp + 0xFFFFFFFFFFFFFFF8
	call builtin_error (retsize: 0;)
	w0 = 0x00000001
	goto l000000000047C178
	// succ:  l000000000047C178
l000000000047C3BC:
	branch (w19 & 0x00000004) == 0x00000000 l000000000047C3D0
	// succ:  l000000000047C3C0 l000000000047C3D0
l000000000047C3C0:
	w0 = 0x00000000
	goto l000000000047C380
	// succ:  l000000000047C380
l000000000047C3C8:
	branch (w19 & 0x00000004) == 0x00000000 l000000000047C3C0
	// succ:  l000000000047C3CC l000000000047C3C0
l000000000047C3CC:
	w0 = w19 & 0x00000001
	// succ:  l000000000047C3D0
l000000000047C3D0:
	w1 = w19 & 0x00000010
	call list_minus_o_opts (retsize: 0;)
	w0 = 0x00000000
	goto l000000000047C380
	// succ:  l000000000047C380
l000000000047C3E0:
	branch (w19 & 0x00000008) == 0x00000000 l000000000047C3C8
	// succ:  l000000000047C3E4 l000000000047C3C8
l000000000047C3E4:
	branch w1 == 0x00000000 l000000000047C438
	// succ:  l000000000047C3E8 l000000000047C438
l000000000047C3E8:
	x20 = 0x00000000004C0000
	x20 = x20 + 0x0000000000000380
	x0 = 0x00000000004C0000
	w22 = w19 & 0x00000001
	w21 = w19 & 0x00000004
	x20 = x20 + 0x0000000000000008
	x0 = x0 + 0x00000000000007C0
	goto l000000000047C414
	// succ:  l000000000047C414
l000000000047C408:
	x20 = x20 + 0x0000000000000018
	x0 = Mem0[x20 + -8:word64]
	branch x0 == 0x0000000000000000 l000000000047C380
	// succ:  l000000000047C414 l000000000047C380
l000000000047C414:
	x2 = Mem0[x20:word64]
	w2 = Mem0[x2:word32]
	branch w21 != 0x00000000 l000000000047C408
	// succ:  l000000000047C420 l000000000047C408
l000000000047C420:
	NZCV = cond(w22 - w2)
	branch Test(NE,Z) l000000000047C408
	// succ:  l000000000047C428 l000000000047C408
l000000000047C428:
	w1 = w22
	w2 = w19
	call fn000000000047BB1C (retsize: 0;)
	goto l000000000047C408
	// succ:  l000000000047C408
l000000000047C438:
	w0 = w19
	v36 = sp + 32
	x21 = Mem0[v36:word64]
	v36 = v36 + 8
	x22 = Mem0[v36:word64]
	v37 = sp + 16
	x19 = Mem0[v37:word64]
	v37 = v37 + 8
	x20 = Mem0[v37:word64]
	v38 = sp + 48
	x23 = Mem0[v38:word64]
	v38 = v38 + 8
	x24 = Mem0[v38:word64]
	x29 = Mem0[sp:word64]
	sp = sp + 8
	x30 = Mem0[sp:word64]
	sp = sp + 64
	goto l000000000047BC8C
	// succ:  l000000000047BC8C
shopt_builtin_exit:


// shopt_setopt
// Return size: 0
void shopt_setopt()
shopt_setopt_entry:
	// succ:  l000000000047C450
l000000000047C450:
	sp = fp
	sp = sp + -32
	Mem0[sp:word64] = x29
	sp = sp + 8
	Mem0[sp:word64] = x30
	x29 = x31 + 0x0000000000000000
	v8 = sp + 16
	Mem0[v8:word64] = x19
	v8 = v8 + 8
	Mem0[v8:word64] = x20
	w20 = w1
	call make_word (retsize: 0;)
	x1 = 0x0000000000000000
	call make_word_list (retsize: 0;)
	x19 = x0
	x1 = x19
	w0 = w20
	call fn000000000047C06C (retsize: 0;)
	w20 = w0
	x0 = x19
	call dispose_words (retsize: 0;)
	w0 = w20
	v14 = sp + 16
	x19 = Mem0[v14:word64]
	v14 = v14 + 8
	x20 = Mem0[v14:word64]
	x29 = Mem0[sp:word64]
	sp = sp + 8
	x30 = Mem0[sp:word64]
	sp = sp + 32
	return
	// succ:  shopt_setopt_exit
shopt_setopt_exit:


// parse_bashopts
// Return size: 0
void parse_bashopts()
parse_bashopts_entry:
	// succ:  l000000000047C498
l000000000047C498:
	sp = fp
	sp = sp + -80
	Mem0[sp:word64] = x29
	sp = sp + 8
	Mem0[sp:word64] = x30
	x29 = x31 + 0x0000000000000000
	v8 = sp + 16
	Mem0[v8:word64] = x19
	v8 = v8 + 8
	Mem0[v8:word64] = x20
	x20 = x0
	x1 = x29 + 0x0000000000000040
	x0 = x20
	v13 = sp + 32
	Mem0[v13:word64] = x21
	v13 = v13 + 8
	Mem0[v13:word64] = x22
	Mem0[sp + 48:word64] = x23
	Mem0[x29 + 64:word32] = 0x00000000
	x22 = 0x00000000004C0000
	x21 = 0x00000000004C0000
	call extract_colon_unit (retsize: 0;)
	x22 = x22 + 0x0000000000000380
	w23 = 0x00000001
	x21 = x21 + 0x00000000000007E8
	x19 = x0
	branch x0 == 0x0000000000000000 l000000000047C520
	// succ:  l000000000047C4DC l000000000047C520
l000000000047C4DC:
	call fn000000000047BA9C (retsize: 0;)
l000000000047C520:
	v16 = sp + 16
	x19 = Mem0[v16:word64]
	v16 = v16 + 8
	x20 = Mem0[v16:word64]
	v17 = sp + 32
	x21 = Mem0[v17:word64]
	v17 = v17 + 8
	x22 = Mem0[v17:word64]
	x23 = Mem0[sp + 48:word64]
	x29 = Mem0[sp:word64]
	sp = sp + 8
	x30 = Mem0[sp:word64]
	sp = sp + 80
	return
	// succ:  parse_bashopts_exit
parse_bashopts_exit:


// initialize_bashopts
// Return size: 0
void initialize_bashopts()
initialize_bashopts_entry:
	// succ:  l000000000047C534
l000000000047C534:
	sp = fp
	sp = sp + -32
	Mem0[sp:word64] = x29
	sp = sp + 8
	Mem0[sp:word64] = x30
	x29 = x31 + 0x0000000000000000
	v8 = sp + 16
	Mem0[v8:word64] = x19
	v8 = v8 + 8
	Mem0[v8:word64] = x20
	branch w0 == 0x00000000 l000000000047C550
	// succ:  l000000000047C544 l000000000047C550
l000000000047C544:
	v10 = sp + 16
	x19 = Mem0[v10:word64]
	v10 = v10 + 8
	x20 = Mem0[v10:word64]
	x29 = Mem0[sp:word64]
	sp = sp + 8
	x30 = Mem0[sp:word64]
	sp = sp + 32
	// succ:  l000000000047C54C_thunk_set_bashopts
l000000000047C54C_thunk_set_bashopts:
	call set_bashopts (retsize: 0;)
	return
	// succ:  initialize_bashopts_exit
l000000000047C550:
	x0 = 0x00000000004C0000
	x0 = x0 + 0xFFFFFFFFFFFFF820
	call find_variable (retsize: 0;)
	x19 = x0
	branch x0 == 0x0000000000000000 l000000000047C544
	// succ:  l000000000047C564 l000000000047C544
l000000000047C564:
	w0 = Mem0[x0 + 40:word32]
	branch (w0 & 0x00008000) == 0x00000000 l000000000047C544
	// succ:  l000000000047C56C l000000000047C544
l000000000047C56C:
	w1 = 0x00000044
	NZ = cond(w0 & w1)
	C = false
	V = false
	branch Test(NE,Z) l000000000047C544
	// succ:  l000000000047C578 l000000000047C544
l000000000047C578:
	x0 = Mem0[x19 + 8:word64]
	x20 = 0x00000000004C0000
	strlen(x0)
	sp = sp + 0xFFFFFFFFFFFFFFF8
	x20 = x20 + 0x00000000000007E8
	x1 = x20
	w2 = 0x000002D8
	x0 = x0 + 0x0000000000000001
	call sh_xmalloc (retsize: 0;)
	x1 = Mem0[x19 + 8:word64]
	strcpy(x0, x1)
	sp = sp + 0xFFFFFFFFFFFFFFF8
	x19 = x0
	branch x0 == 0x0000000000000000 l000000000047C544
	// succ:  l000000000047C5A8 l000000000047C544
l000000000047C5A8:
	call parse_bashopts (retsize: 0;)
	x0 = x19
	x1 = x20
	w2 = 0x000002DC
	call sh_xfree (retsize: 0;)
	v19 = sp + 16
	x19 = Mem0[v19:word64]
	v19 = v19 + 8
	x20 = Mem0[v19:word64]
	x29 = Mem0[sp:word64]
	sp = sp + 8
	x30 = Mem0[sp:word64]
	sp = sp + 32
	// succ:  l000000000047C5C4_thunk_set_bashopts
l000000000047C5C4_thunk_set_bashopts:
	call set_bashopts (retsize: 0;)
	return
	// succ:  initialize_bashopts_exit
initialize_bashopts_exit:


// fn000000000047C5D0
// Return size: 0
void fn000000000047C5D0()
fn000000000047C5D0_entry:
	// succ:  l000000000047C5D0
l000000000047C5D0:
	sp = fp
	sp = sp + -80
	Mem0[sp:word64] = x29
	sp = sp + 8
	Mem0[sp:word64] = x30
	x29 = x31 + 0x0000000000000000
	v8 = sp + 16
	Mem0[v8:word64] = x19
	v8 = v8 + 8
	Mem0[v8:word64] = x20
	Mem0[sp + 48:word64] = x23
	v12 = sp + 32
	Mem0[v12:word64] = x21
	v12 = v12 + 8
	Mem0[v12:word64] = x22
	x20 = x0
	x23 = x1
	branch x2 == 0x0000000000000000 l000000000047C5F8
	// succ:  l000000000047C5F0 l000000000047C5F8
l000000000047C5F0:
	w0 = 0x00000001
	Mem0[x2:word32] = w0
	// succ:  l000000000047C5F8
l000000000047C5F8:
	v18 = Mem0[x20:byte]
	w22 = (word32) v18
	x19 = x20 + 0x0000000000000001
	w0 = w22 - 0x00000022
	w31 = w0 - 0x00000056
	NZCV = cond(w31)
	branch Test(ULE,ZC) l000000000047C62C
	// succ:  l000000000047C60C l000000000047C62C
l000000000047C60C:
	w0 = 0x0000005C
	Mem0[x23:byte] = (byte) w0
	w0 = 0x00000000
	v22 = sp + 16
	x19 = Mem0[v22:word64]
	v22 = v22 + 8
	x20 = Mem0[v22:word64]
	v23 = sp + 32
	x21 = Mem0[v23:word64]
	v23 = v23 + 8
	x22 = Mem0[v23:word64]
	x23 = Mem0[sp + 48:word64]
	x29 = Mem0[sp:word64]
	sp = sp + 8
	x30 = Mem0[sp:word64]
	sp = sp + 80
	return
	// succ:  fn000000000047C5D0_exit
l000000000047C62C:
	x1 = 0x00000000004C0000
	x1 = x1 + 0xFFFFFFFFFFFFFAEC
	v25 = Mem0[x1 + (uint64) ((uint32) w0):word16]
	w4 = (word32) v25
	x5 = 0x000000000047C644
	x4 = x5 + (int64) ((int16) w4)
fn000000000047C5D0_exit:


// fn000000000047C940
// Return size: 0
void fn000000000047C940()
fn000000000047C940_entry:
	// succ:  l000000000047C940
l000000000047C940:
	sp = fp
	sp = sp + -32
	Mem0[sp:word64] = x29
	sp = sp + 8
	Mem0[sp:word64] = x30
	x29 = x31 + 0x0000000000000000
	x1 = 0x00000000004C0000
	v9 = sp + 16
	Mem0[v9:word64] = x19
	v9 = v9 + 8
	Mem0[v9:word64] = x20
	x1 = x1 + 0xFFFFFFFFFFFFFC80
	x19 = x0
	w2 = 0x00000005
	x0 = 0x0000000000000000
	dcgettext(x0, x1, x2)
	sp = sp + 0xFFFFFFFFFFFFFFF8
	x20 = x0
	w0 = 0x00000022
	strerror(x0)
	sp = sp + 0xFFFFFFFFFFFFFFF8
	x2 = x0
	x1 = x19
	x0 = x20
	v14 = sp + 16
	x19 = Mem0[v14:word64]
	v14 = v14 + 8
	x20 = Mem0[v14:word64]
	x29 = Mem0[sp:word64]
	sp = sp + 8
	x30 = Mem0[sp:word64]
	sp = sp + 32
	// succ:  l000000000047C984_thunk_builtin_error
l000000000047C984_thunk_builtin_error:
	call builtin_error (retsize: 0;)
	return
	// succ:  fn000000000047C940_exit
fn000000000047C940_exit:


// fn000000000047C988
// Return size: 0
void fn000000000047C988()
fn000000000047C988_entry:
	// succ:  l000000000047C988
l000000000047C988:
	sp = fp
	sp = sp + -384
	Mem0[sp:word64] = x29
	sp = sp + 8
	Mem0[sp:word64] = x30
	x29 = x31 + 0x0000000000000000
	v8 = sp + 16
	Mem0[v8:word64] = x19
	v8 = v8 + 8
	Mem0[v8:word64] = x20
	v11 = sp + 32
	Mem0[v11:word64] = x21
	v11 = v11 + 8
	Mem0[v11:word64] = x22
	v14 = sp + 48
	Mem0[v14:word64] = x23
	v14 = v14 + 8
	Mem0[v14:word64] = x24
	x8 = x29 + 0x0000000000000180
	x20 = 0x00000000004E1000
	x21 = x29 + 0x0000000000000140
	w24 = 0xFFFFFFC8
	w23 = 0xFFFFFF80
	Mem0[x29 + 128:word64] = x8
	Mem0[x29 + 136:word64] = x8
	x19 = x20 + 0xFFFFFFFFFFFFF938
	Mem0[x29 + 144:word64] = x21
	Mem0[x29 + 152:word32] = w24
	Mem0[x29 + 156:word32] = w23
	Mem0[x29 + 328:word64] = x1
	Mem0[x29 + 336:word64] = x2
	Mem0[x29 + 344:word64] = x3
	Mem0[x29 + 352:word64] = x4
	Mem0[x29 + 360:word64] = x5
	Mem0[x29 + 368:word64] = x6
	Mem0[x29 + 376:word64] = x7
	Mem0[x29 + 192:word128] = q0
	Mem0[x29 + 208:word128] = q1
	Mem0[x29 + 224:word128] = q2
	Mem0[x29 + 240:word128] = q3
	x6 = x29 + 0x0000000000000100
	v30 = Mem0[x19:int32]
	x12 = (word64) v30
	v33 = x29 + 128
	x10 = Mem0[v33:word64]
	v33 = v33 + 8
	x11 = Mem0[v33:word64]
	v35 = x29 + 144
	x8 = Mem0[v35:word64]
	v35 = v35 + 8
	x9 = Mem0[v35:word64]
	x14 = Mem0[x19 + 8:word64]
	x13 = Mem0[x19 + 16:word64]
	Mem0[x6:word128] = q4
	x6 = x29 + 0x0000000000000110
	Mem0[x6:word128] = q5
	x22 = x0
	x6 = x29 + 0x0000000000000120
	Mem0[x6:word128] = q6
	x1 = x13 - x12
	w2 = 0x00000001
	x3 = 0xFFFFFFFFFFFFFFFF
	x6 = x29 + 0x0000000000000130
	x0 = x14 + x12
	x4 = x22
	x5 = x29 + 0x00000000000000A0
	Mem0[x6:word128] = q7
	v44 = x29 + 96
	Mem0[v44:word64] = x10
	v44 = v44 + 8
	Mem0[v44:word64] = x11
	v45 = x29 + 112
	Mem0[v45:word64] = x8
	v45 = v45 + 8
	Mem0[v45:word64] = x9
	v46 = x29 + 160
	Mem0[v46:word64] = x10
	v46 = v46 + 8
	Mem0[v46:word64] = x11
	v47 = x29 + 176
	Mem0[v47:word64] = x8
	v47 = v47 + 8
	Mem0[v47:word64] = x9
	call __vsnprintf_chk (retsize: 0;)
	w2 = Mem0[x19:word32]
	x3 = Mem0[x19 + 16:word64]
	w2 = w0 + w2
	w1 = w2 + 0x00000001
fn000000000047C988_exit:


// fn000000000047CB20
// Return size: 0
void fn000000000047CB20()
fn000000000047CB20_entry:
	// succ:  l000000000047CB20
l000000000047CB20:
	sp = fp
	sp = sp + -64
	Mem0[sp:word64] = x29
	sp = sp + 8
	Mem0[sp:word64] = x30
	x29 = x31 + 0x0000000000000000
	v8 = sp + 16
	Mem0[v8:word64] = x19
	v8 = v8 + 8
	Mem0[v8:word64] = x20
	x20 = 0x00000000004E1000
	x0 = x20 + 0xFFFFFFFFFFFFF938
	x19 = Mem0[x0 + 24:word64]
	Mem0[sp + 32:word64] = x21
	x0 = Mem0[x19 + 8:word64]
	Mem0[x29 + 48:word64] = 0x0000000000000000
	x0 = Mem0[x0:word64]
	x0 = x0 + 0x0000000000000001
	strlen(x0)
	sp = sp + 0xFFFFFFFFFFFFFFF8
	x21 = x0
	__ctype_get_mb_cur_max()
	sp = sp + 0xFFFFFFFFFFFFFFF8
	x31 = x0 - 0x0000000000000001
	NZCV = cond(x31)
	branch Test(ULE,ZC) l000000000047CBB8
	// succ:  l000000000047CB60 l000000000047CBB8
l000000000047CB60:
	x0 = Mem0[x19 + 8:word64]
	x1 = x21
	x0 = Mem0[x0:word64]
	x0 = x0 + 0x0000000000000001
	call mblen (retsize: 0;)
l000000000047CBB8:
	x0 = Mem0[x19 + 8:word64]
	x1 = Mem0[x19:word64]
	x0 = Mem0[x0:word64]
	x20 = x20 + 0xFFFFFFFFFFFFF938
	v15 = Mem0[x0 + 1:byte]
	w0 = (word32) v15
	Mem0[x20 + 24:word64] = x1
	x21 = Mem0[sp + 32:word64]
	v16 = sp + 16
	x19 = Mem0[v16:word64]
	v16 = v16 + 8
	x20 = Mem0[v16:word64]
	x29 = Mem0[sp:word64]
	sp = sp + 8
	x30 = Mem0[sp:word64]
	sp = sp + 64
	return
	// succ:  fn000000000047CB20_exit
fn000000000047CB20_exit:


// fn000000000047CBE0
// Return size: 0
void fn000000000047CBE0()
fn000000000047CBE0_entry:
	// succ:  l000000000047CBE0
l000000000047CBE0:
	sp = fp
	sp = sp + -80
	Mem0[sp:word64] = x29
	sp = sp + 8
	Mem0[sp:word64] = x30
	x29 = x31 + 0x0000000000000000
	v8 = sp + 16
	Mem0[v8:word64] = x19
	v8 = v8 + 8
	Mem0[v8:word64] = x20
	x20 = 0x00000000004E1000
	v11 = sp + 32
	Mem0[v11:word64] = x21
	v11 = v11 + 8
	Mem0[v11:word64] = x22
	x21 = x20 + 0xFFFFFFFFFFFFF938
	x19 = Mem0[x21 + 24:word64]
	v14 = sp + 48
	Mem0[v14:word64] = x23
	v14 = v14 + 8
	Mem0[v14:word64] = x24
	branch x19 == 0x0000000000000000 l000000000047CCC0
	// succ:  l000000000047CC04 l000000000047CCC0
l000000000047CC04:
	x0 = Mem0[x19 + 8:word64]
	x22 = Mem0[x0:word64]
	v17 = Mem0[x22:byte]
	w0 = (word32) v17
	w31 = w0 - 0x00000022
	NZCV = cond(w31)
	branch Test(EQ,Z) l000000000047CC84
	// succ:  l000000000047CC18 l000000000047CC84
l000000000047CC18:
	w31 = w0 - 0x00000027
	NZCV = cond(w31)
	w23 = (word32) Test(EQ,Z)
	branch w23 != 0x00000000 l000000000047CC84
	// succ:  l000000000047CC24 l000000000047CC84
l000000000047CC24:
	__errno_location()
	sp = sp + 0xFFFFFFFFFFFFFFF8
	Mem0[x0:word32] = w23
	x24 = x0
	w2 = w23
	x0 = x22
	x1 = x29 + 0x0000000000000040
	w3 = w23
	call __strtol_internal (retsize: 0;)
	x22 = x0
	x0 = Mem0[x29 + 64:word64]
	v25 = Mem0[x0:byte]
	w0 = (word32) v25
	branch w0 != 0x00000000 l000000000047CCA4
	// succ:  l000000000047CC54 l000000000047CCA4
l000000000047CC54:
	w0 = Mem0[x24:word32]
	w31 = w0 - 0x00000022
	NZCV = cond(w31)
	branch Test(EQ,Z) l000000000047CCDC
	// succ:  l000000000047CC60 l000000000047CCDC
l000000000047CC60:
	x0 = Mem0[x19:word64]
	x20 = x20 + 0xFFFFFFFFFFFFF938
	Mem0[x20 + 24:word64] = x0
	v26 = sp + 48
	x23 = Mem0[v26:word64]
	v26 = v26 + 8
	x24 = Mem0[v26:word64]
	x0 = x22
	v27 = sp + 16
	x19 = Mem0[v27:word64]
	v27 = v27 + 8
	x20 = Mem0[v27:word64]
	v28 = sp + 32
	x21 = Mem0[v28:word64]
	v28 = v28 + 8
	x22 = Mem0[v28:word64]
	x29 = Mem0[sp:word64]
	sp = sp + 8
	x30 = Mem0[sp:word64]
	sp = sp + 80
	return
	// succ:  fn000000000047CBE0_exit
l000000000047CC84:
	call fn000000000047CB20 (retsize: 0;)
	x22 = x0
	x0 = x22
	v32 = sp + 16
	x19 = Mem0[v32:word64]
	v32 = v32 + 8
	x20 = Mem0[v32:word64]
	v33 = sp + 32
	x21 = Mem0[v33:word64]
	v33 = v33 + 8
	x22 = Mem0[v33:word64]
	v34 = sp + 48
	x23 = Mem0[v34:word64]
	v34 = v34 + 8
	x24 = Mem0[v34:word64]
	x29 = Mem0[sp:word64]
	sp = sp + 8
	x30 = Mem0[sp:word64]
	sp = sp + 80
	return
	// succ:  fn000000000047CBE0_exit
l000000000047CCA4:
	x0 = Mem0[x19 + 8:word64]
	x0 = Mem0[x0:word64]
	call sh_invalidnum (retsize: 0;)
	w0 = 0x00000001
	Mem0[x21 + 32:word32] = w0
	x19 = Mem0[x21 + 24:word64]
	goto l000000000047CC60
	// succ:  l000000000047CC60
l000000000047CCC0:
	x22 = x19
	x0 = x22
	v29 = sp + 16
	x19 = Mem0[v29:word64]
	v29 = v29 + 8
	x20 = Mem0[v29:word64]
	v30 = sp + 32
	x21 = Mem0[v30:word64]
	v30 = v30 + 8
	x22 = Mem0[v30:word64]
	v31 = sp + 48
	x23 = Mem0[v31:word64]
	v31 = v31 + 8
	x24 = Mem0[v31:word64]
	x29 = Mem0[sp:word64]
	sp = sp + 8
	x30 = Mem0[sp:word64]
	sp = sp + 80
	return
	// succ:  fn000000000047CBE0_exit
l000000000047CCDC:
	x0 = Mem0[x19 + 8:word64]
	x0 = Mem0[x0:word64]
	call fn000000000047C940 (retsize: 0;)
	x19 = Mem0[x21 + 24:word64]
	goto l000000000047CC60
	// succ:  l000000000047CC60
fn000000000047CBE0_exit:


// fn000000000047CCF0
// Return size: 0
void fn000000000047CCF0()
fn000000000047CCF0_entry:
	// succ:  l000000000047CCF0
l000000000047CCF0:
	sp = fp
	sp = sp + -32
	Mem0[sp:word64] = x29
	sp = sp + 8
	Mem0[sp:word64] = x30
	x29 = x31 + 0x0000000000000000
	Mem0[sp + 16:word64] = x19
	call fn000000000047CBE0 (retsize: 0;)
	x19 = x31 | 0x0000000000000000
	x31 = x0 - x19
	NZCV = cond(x31)
	branch Test(GT,NZV) l000000000047CD24
	// succ:  l000000000047CD0C l000000000047CD24
l000000000047CD0C:
	x19 = x31 | 0x0000000000000000
	x31 = x0 - x19
	NZCV = cond(x31)
	branch Test(LT,NV) l000000000047CD24
	// succ:  l000000000047CD18 l000000000047CD24
l000000000047CD18:
	x19 = Mem0[sp + 16:word64]
	x29 = Mem0[sp:word64]
	sp = sp + 8
	x30 = Mem0[sp:word64]
	sp = sp + 32
	return
	// succ:  fn000000000047CCF0_exit
l000000000047CD24:
	x0 = 0x00000000004E1000
	x0 = x0 + 0xFFFFFFFFFFFFF938
	x0 = Mem0[x0 + 24:word64]
	x0 = Mem0[x0 + 8:word64]
	x0 = Mem0[x0:word64]
	call fn000000000047C940 (retsize: 0;)
	w0 = w19
	x19 = Mem0[sp + 16:word64]
	x29 = Mem0[sp:word64]
	sp = sp + 8
	x30 = Mem0[sp:word64]
	sp = sp + 32
	return
	// succ:  fn000000000047CCF0_exit
fn000000000047CCF0_exit:


// fn000000000047CD4C
// Return size: 0
void fn000000000047CD4C()
fn000000000047CD4C_entry:
	// succ:  l000000000047CD4C
l000000000047CD4C:
	sp = fp
	sp = sp + -64
	Mem0[sp:word64] = x29
	sp = sp + 8
	Mem0[sp:word64] = x30
	x29 = x31 + 0x0000000000000000
	v8 = sp + 16
	Mem0[v8:word64] = x19
	v8 = v8 + 8
	Mem0[v8:word64] = x20
	x20 = 0x00000000004E1000
	v11 = sp + 32
	Mem0[v11:word64] = x21
	v11 = v11 + 8
	Mem0[v11:word64] = x22
	Mem0[sp + 48:word64] = x23
	x21 = x0
	x23 = x1
	x20 = x20 + 0xFFFFFFFFFFFFF938
	strlen(x0)
	sp = sp + 0xFFFFFFFFFFFFFFF8
	x19 = x0
	x0 = Mem0[x20 + 40:word64]
	x1 = x19 + 0x0000000000000002
	x31 = x1 - x0
	NZCV = cond(x31)
	x22 = x19 + 0x0000000000000001
	branch Test(UGT,ZC) l000000000047CDD0
	// succ:  l000000000047CD8C l000000000047CDD0
l000000000047CD8C:
	x3 = Mem0[x20 + 48:word64]
	// succ:  l000000000047CD90
l000000000047CD90:
	x20 = x19 - 0x0000000000000001
	x1 = x21
	x2 = x20
	x0 = x3
	memcpy(x0, x1, x2)
	sp = sp + 0xFFFFFFFFFFFFFFF8
	v20 = Mem0[x23:byte]
	w1 = (word32) v20
	x3 = x0
	Mem0[x3 + x20:byte] = (byte) w1
	v21 = Mem0[x21 + x20:byte]
	w1 = (word32) v21
	Mem0[x3 + x19:byte] = (byte) w1
	Mem0[x3 + x22:byte] = 0x00
	v22 = sp + 16
	x19 = Mem0[v22:word64]
	v22 = v22 + 8
	x20 = Mem0[v22:word64]
	v23 = sp + 32
	x21 = Mem0[v23:word64]
	v23 = v23 + 8
	x22 = Mem0[v23:word64]
	x23 = Mem0[sp + 48:word64]
	x29 = Mem0[sp:word64]
	sp = sp + 8
	x30 = Mem0[sp:word64]
	sp = sp + 64
	return
	// succ:  fn000000000047CD4C_exit
l000000000047CDD0:
	x4 = x19 + 0x0000000000000401
	x4 = x4 & 0x0000000000000000
	x0 = Mem0[x20 + 48:word64]
	x2 = 0x00000000004C0000
	w3 = 0x00000418
	x1 = x4
	x2 = x2 + 0xFFFFFFFFFFFFFC90
	Mem0[x20 + 40:word64] = x4
	call sh_xrealloc (retsize: 0;)
	Mem0[x20 + 48:word64] = x0
	x3 = x0
	goto l000000000047CD90
	// succ:  l000000000047CD90
fn000000000047CD4C_exit:


// fn000000000047CE00
// Return size: 0
void fn000000000047CE00()
fn000000000047CE00_entry:
	// succ:  l000000000047CE00
l000000000047CE00:
	sp = fp
	sp = sp + -48
	Mem0[sp:word64] = x29
	sp = sp + 8
	Mem0[sp:word64] = x30
	x29 = x31 + 0x0000000000000000
	Mem0[sp + 16:word64] = x19
	Mem0[x29 + 32:word64] = x1
	x19 = x0
	call valid_array_reference (retsize: 0;)
	w2 = w0
	x1 = Mem0[x29 + 32:word64]
	x0 = x19
	branch w2 == 0x00000000 l000000000047CE38
	// succ:  l000000000047CE28 l000000000047CE38
l000000000047CE28:
	x19 = Mem0[sp + 16:word64]
	x29 = Mem0[sp:word64]
	sp = sp + 8
	x30 = Mem0[sp:word64]
	sp = sp + 48
	w2 = 0x00000000
	// succ:  l000000000047CE34_thunk_assign_array_element
l000000000047CE34_thunk_assign_array_element:
	call assign_array_element (retsize: 0;)
	return
	// succ:  fn000000000047CE00_exit
l000000000047CE38:
	x19 = Mem0[sp + 16:word64]
	x29 = Mem0[sp:word64]
	sp = sp + 8
	x30 = Mem0[sp:word64]
	sp = sp + 48
	// succ:  l000000000047CE40_thunk_bind_variable
l000000000047CE40_thunk_bind_variable:
	call bind_variable (retsize: 0;)
	return
	// succ:  fn000000000047CE00_exit
fn000000000047CE00_exit:


// fn000000000047CE44
// Return size: 0
void fn000000000047CE44()
fn000000000047CE44_entry:
	// succ:  l000000000047CE44
l000000000047CE44:
	sp = fp
	sp = sp + -48
	Mem0[sp:word64] = x29
	sp = sp + 8
	Mem0[sp:word64] = x30
	x29 = x31 + 0x0000000000000000
	v8 = sp + 16
	Mem0[v8:word64] = x19
	v8 = v8 + 8
	Mem0[v8:word64] = x20
	x20 = 0x00000000004E1000
	x19 = x20 + 0xFFFFFFFFFFFFF938
	w2 = Mem0[x19:word32]
	x3 = Mem0[x19 + 16:word64]
	w1 = w2 + 0x00000002
fn000000000047CE44_exit:


// printf_builtin
// Return size: 0
void printf_builtin()
printf_builtin_entry:
	// succ:  l000000000047D184
l000000000047D184:
	sp = fp
	sp = sp + -352
	Mem0[sp:word64] = x29
	sp = sp + 8
	Mem0[sp:word64] = x30
	x29 = x31 + 0x0000000000000000
	v8 = sp + 48
	Mem0[v8:word64] = x23
	v8 = v8 + 8
	Mem0[v8:word64] = x24
	x24 = 0x00000000004E1000
	v11 = sp + 16
	Mem0[v11:word64] = x19
	v11 = v11 + 8
	Mem0[v11:word64] = x20
	v14 = sp + 32
	Mem0[v14:word64] = x21
	v14 = v14 + 8
	Mem0[v14:word64] = x22
	v17 = sp + 64
	Mem0[v17:word64] = x25
	v17 = v17 + 8
	Mem0[v17:word64] = x26
	v20 = sp + 80
	Mem0[v20:word64] = x27
	v20 = v20 + 8
	Mem0[v20:word64] = x28
	x19 = x24 + 0xFFFFFFFFFFFFF938
	x20 = 0x00000000004C0000
	x25 = 0x00000000004C0000
	x21 = x0
	Mem0[x19 + 32:word32] = 0x00000000
	Mem0[x19 + 68:word32] = 0x00000000
	Mem0[x19 + 64:word32] = 0x00000000
	x20 = x20 + 0xFFFFFFFFFFFFFCD0
	call reset_internal_getopt (retsize: 0;)
	x22 = 0x00000000004E3000
	w23 = 0x00000001
	x25 = x25 + 0xFFFFFFFFFFFFFC90
	goto l000000000047D1F0
	// succ:  l000000000047D1F0
l000000000047D1D8:
	x2 = Mem0[x19 + 16:word64]
	Mem0[x19 + 64:word32] = w23
	branch x2 == 0x0000000000000000 l000000000047D254
	// succ:  l000000000047D1E4 l000000000047D254
l000000000047D1E4:
	x2 = Mem0[x19 + 8:word64]
	Mem0[x19:word32] = 0x00000000
	branch x2 != 0x0000000000000000 l000000000047D27C
	// succ:  l000000000047D1F0 l000000000047D27C
l000000000047D1F0:
	x0 = x21
	x1 = x20
	call internal_getopt (retsize: 0;)
	w31 = w0 + 0x00000001
	NZCV = cond(w31)
	branch Test(EQ,Z) l000000000047D294
	// succ:  l000000000047D204 l000000000047D294
l000000000047D204:
	w31 = w0 - 0x00000076
	NZCV = cond(w31)
	branch Test(NE,Z) l000000000047D36C
	// succ:  l000000000047D20C l000000000047D36C
l000000000047D20C:
	x2 = Mem0[x22 + 3840:word64]
	x0 = x2
	Mem0[x19 + 72:word64] = x2
	call legal_identifier (retsize: 0;)
	branch w0 != 0x00000000 l000000000047D1D8
	// succ:  l000000000047D220 l000000000047D1D8
l000000000047D220:
	x0 = Mem0[x19 + 72:word64]
	call valid_array_reference (retsize: 0;)
	branch w0 != 0x00000000 l000000000047D1D8
	// succ:  l000000000047D22C l000000000047D1D8
l000000000047D22C:
	x0 = Mem0[x19 + 72:word64]
	call sh_invalidid (retsize: 0;)
	w0 = 0x00000102
	v29 = sp + 16
	x19 = Mem0[v29:word64]
	v29 = v29 + 8
	x20 = Mem0[v29:word64]
	v30 = sp + 32
	x21 = Mem0[v30:word64]
	v30 = v30 + 8
	x22 = Mem0[v30:word64]
	v31 = sp + 48
	x23 = Mem0[v31:word64]
	v31 = v31 + 8
	x24 = Mem0[v31:word64]
	v32 = sp + 64
	x25 = Mem0[v32:word64]
	v32 = v32 + 8
	x26 = Mem0[v32:word64]
	v33 = sp + 80
	x27 = Mem0[v33:word64]
	v33 = v33 + 8
	x28 = Mem0[v33:word64]
	x29 = Mem0[sp:word64]
	sp = sp + 8
	x30 = Mem0[sp:word64]
	sp = sp + 352
	return
	// succ:  printf_builtin_exit
l000000000047D254:
	x3 = 0x0000000000000010
	w2 = 0x00000103
	x0 = x3
	x1 = x25
	Mem0[x19 + 16:word64] = x3
	call sh_xmalloc (retsize: 0;)
	Mem0[x19 + 8:word64] = x0
	x2 = x0
	Mem0[x19:word32] = 0x00000000
	branch x2 == 0x0000000000000000 l000000000047D1F0
	// succ:  l000000000047D27C l000000000047D1F0
l000000000047D27C:
	Mem0[x2:byte] = 0x00
	x0 = x21
	x1 = x20
	call internal_getopt (retsize: 0;)
	w31 = w0 + 0x00000001
	NZCV = cond(w31)
	branch Test(NE,Z) l000000000047D204
	// succ:  l000000000047D294 l000000000047D204
l000000000047D294:
	x0 = 0x00000000004E3000
	x0 = Mem0[x0 + 3856:word64]
	Mem0[x29 + 280:word64] = x0
	branch x0 == 0x0000000000000000 l000000000047D36C
	// succ:  l000000000047D2A4 l000000000047D36C
l000000000047D2A4:
	x1 = Mem0[x29 + 280:word64]
	x0 = Mem0[x1 + 8:word64]
	x0 = Mem0[x0:word64]
	Mem0[x29 + 288:word64] = x0
	branch x0 == 0x0000000000000000 l000000000047E060
	// succ:  l000000000047D2B8 l000000000047E060
l000000000047D2B8:
	v35 = Mem0[x0:byte]
	w1 = (word32) v35
	w0 = 0x00000000
	branch w1 == 0x00000000 l000000000047D374
	// succ:  l000000000047D2C4 l000000000047D374
l000000000047D2C4:
	x3 = 0x00000000004E1000
	x4 = Mem0[x29 + 280:word64]
	w2 = Mem0[x3 + 648:word32]
	x0 = Mem0[x4:word64]
	x1 = x24 + 0xFFFFFFFFFFFFF938
	w2 = w2 + 0x00000001
	x23 = 0x00000000004C0000
	x22 = 0x00000000004C0000
	Mem0[x1 + 24:word64] = x0
	Mem0[x3 + 648:word32] = w2
	x21 = 0x00000000004DE000
	x23 = x23 + 0xFFFFFFFFFFFFFCC8
	x22 = x22 + 0xFFFFFFFFFFFFFCD8
	// succ:  l000000000047D2F8
l000000000047D2F8:
	x2 = Mem0[x29 + 288:word64]
	x1 = x24 + 0xFFFFFFFFFFFFF938
	v39 = Mem0[x2:byte]
	w0 = (word32) v39
	Mem0[x1 + 56:word64] = 0x0000000000000000
	x20 = x2
	branch w0 != 0x00000000 l000000000047D32C
	// succ:  l000000000047D310 l000000000047D32C
l000000000047D310:
	goto l000000000047DC60
	// succ:  l000000000047DC60
l000000000047D314:
	x0 = x29 + 0x0000000000000060
	call fn000000000047CE44 (retsize: 0;)
	// succ:  l000000000047D31C
l000000000047D31C:
	x25 = x20
	x20 = x20 + 0x0000000000000001
	// succ:  l000000000047D324
l000000000047D324:
	v47 = Mem0[x25 + 1:byte]
	w0 = (word32) v47
	branch w0 == 0x00000000 l000000000047DC60
	// succ:  l000000000047D32C l000000000047DC60
l000000000047D32C:
	w31 = w0 - 0x0000005C
	NZCV = cond(w31)
	branch Test(EQ,Z) l000000000047D52C
	// succ:  l000000000047D334 l000000000047D52C
l000000000047D334:
	w31 = w0 - 0x00000025
	NZCV = cond(w31)
	branch Test(EQ,Z) l000000000047D390
	// succ:  l000000000047D33C l000000000047D390
l000000000047D33C:
	x1 = x24 + 0xFFFFFFFFFFFFF938
	x2 = Mem0[x1 + 56:word64]
	w3 = Mem0[x1 + 64:word32]
	x2 = x2 + 0x0000000000000001
	Mem0[x1 + 56:word64] = x2
	Mem0[x29 + 96:byte] = (byte) w0
	Mem0[x29 + 97:byte] = 0x00
	branch w3 != 0x00000000 l000000000047D314
	// succ:  l000000000047D35C l000000000047D314
l000000000047D35C:
	v41 = Mem0[x20:byte]
	w0 = (word32) v41
	x1 = Mem0[x21 + 1648:word64]
	_IO_putc(x0, x1)
	sp = sp + 0xFFFFFFFFFFFFFFF8
	goto l000000000047D31C
	// succ:  l000000000047D31C
l000000000047D36C:
	call builtin_usage (retsize: 0;)
	w0 = 0x00000102
	// succ:  l000000000047D374
l000000000047D374:
	v42 = sp + 16
	x19 = Mem0[v42:word64]
	v42 = v42 + 8
	x20 = Mem0[v42:word64]
	v43 = sp + 32
	x21 = Mem0[v43:word64]
	v43 = v43 + 8
	x22 = Mem0[v43:word64]
	v44 = sp + 48
	x23 = Mem0[v44:word64]
	v44 = v44 + 8
	x24 = Mem0[v44:word64]
	v45 = sp + 64
	x25 = Mem0[v45:word64]
	v45 = v45 + 8
	x26 = Mem0[v45:word64]
	v46 = sp + 80
	x27 = Mem0[v46:word64]
	v46 = v46 + 8
	x28 = Mem0[v46:word64]
	x29 = Mem0[sp:word64]
	sp = sp + 8
	x30 = Mem0[sp:word64]
	sp = sp + 352
	return
	// succ:  printf_builtin_exit
l000000000047D390:
	v50 = Mem0[x20 + 1:byte]
	w19 = (word32) v50
	x27 = x20 + 0x0000000000000001
	w31 = w19 - 0x00000025
	NZCV = cond(w31)
	branch Test(EQ,Z) l000000000047D660
	// succ:  l000000000047D3A0 l000000000047D660
l000000000047D3A0:
	branch w19 == 0x00000000 l000000000047D5D0
	// succ:  l000000000047D3A4 l000000000047D5D0
l000000000047D3A4:
	x28 = x27
	goto l000000000047D3B4
	// succ:  l000000000047D3B4
l000000000047D3AC:
	x28 = x28 + 1
	v59 = Mem0[x28:byte]
	w19 = (word32) v59
	branch w19 == 0x00000000 l000000000047D5D0
	// succ:  l000000000047D3B4 l000000000047D5D0
l000000000047D3B4:
	x0 = x23
	w1 = w19
	strchr(x0, x1)
	sp = sp + 0xFFFFFFFFFFFFFFF8
	branch x0 != 0x0000000000000000 l000000000047D3AC
	// succ:  l000000000047D3C4 l000000000047D3AC
l000000000047D3C4:
	w31 = w19 - 0x0000002A
	NZCV = cond(w31)
	x19 = x28
	branch Test(EQ,Z) l000000000047DC44
	// succ:  l000000000047D3D0 l000000000047DC44
l000000000047D3D0:
	v53 = Mem0[x28:byte]
	w19 = (word32) v53
	w1 = w19 - 0x00000030
l000000000047D404:
	w31 = w19 - 0x0000002E
	NZCV = cond(w31)
	branch Test(NE,Z) l000000000047D43C
	// succ:  l000000000047D40C l000000000047D43C
l000000000047D40C:
	v60 = Mem0[x28 + 1:byte]
	w19 = (word32) v60
	w31 = w19 - 0x0000002A
	NZCV = cond(w31)
	branch Test(EQ,Z) l000000000047DE98
	// succ:  l000000000047D418 l000000000047DE98
l000000000047D418:
	w31 = w19 - 0x0000002D
	NZCV = cond(w31)
	branch Test(EQ,Z) l000000000047DD6C
	// succ:  l000000000047D420 l000000000047DD6C
l000000000047D420:
	x28 = x28 + 0x0000000000000001
	// succ:  l000000000047D42C
l000000000047D42C:
	w0 = w19 - 0x00000030
l000000000047D43C:
	Mem0[x29 + 296:word32] = 0x00000000
	w4 = Mem0[x29 + 296:word32]
	Mem0[x29 + 308:word32] = w4
	// succ:  l000000000047D448
l000000000047D448:
	branch w19 == 0x00000000 l000000000047D5D0
	// succ:  l000000000047D44C l000000000047D5D0
l000000000047D44C:
	w26 = w19
	x25 = x28
	goto l000000000047D460
	// succ:  l000000000047D460
l000000000047D458:
	x25 = x25 + 1
	v69 = Mem0[x25:byte]
	w26 = (word32) v69
	branch w26 == 0x00000000 l000000000047D5D0
	// succ:  l000000000047D460 l000000000047D5D0
l000000000047D460:
	w1 = w26
	x0 = x22
	strchr(x0, x1)
	sp = sp + 0xFFFFFFFFFFFFFFF8
	x1 = x0
	branch x0 != 0x0000000000000000 l000000000047D458
	// succ:  l000000000047D474 l000000000047D458
l000000000047D474:
	v68 = Mem0[x28 + 1:byte]
	w2 = (word32) v68
	w0 = w26 - 0x00000028
	Mem0[x29 + 304:word32] = w2
	Mem0[x28:byte] = (byte) w26
	Mem0[x28 + 1:byte] = (byte) w1
	w31 = w0 - 0x00000050
	NZCV = cond(w31)
	branch Test(ULE,ZC) l000000000047D694
	// succ:  l000000000047D490 l000000000047D694
l000000000047D490:
	x1 = 0x00000000004C0000
	w2 = 0x00000005
	x1 = x1 + 0xFFFFFFFFFFFFFD10
	x0 = 0x0000000000000000
	dcgettext(x0, x1, x2)
	sp = sp + 0xFFFFFFFFFFFFFFF8
	w1 = w26
	x19 = x24 + 0xFFFFFFFFFFFFF938
	call builtin_error (retsize: 0;)
	w0 = Mem0[x19 + 64:word32]
	branch w0 != 0x00000000 l000000000047DEFC
	// succ:  l000000000047D4B8 l000000000047DEFC
l000000000047D4B8:
	x19 = x24 + 0xFFFFFFFFFFFFF938
	x0 = Mem0[x19 + 40:word64]
	x31 = x0 - (0x0000000000000001 << 12)
	NZCV = cond(x31)
	branch Test(UGT,ZC) l000000000047E090
	// succ:  l000000000047D4C8 l000000000047E090
l000000000047D4C8:
	x24 = x24 + 0xFFFFFFFFFFFFF938
	x0 = Mem0[x24 + 16:word64]
	x31 = x0 - (0x0000000000000001 << 12)
	NZCV = cond(x31)
	x0 = Mem0[x24 + 8:word64]
	branch Test(UGT,ZC) l000000000047DEE0
	// succ:  l000000000047D4DC l000000000047DEE0
l000000000047D4DC:
	branch x0 == 0x0000000000000000 l000000000047D4E4
	// succ:  l000000000047D4E0 l000000000047D4E4
l000000000047D4E0:
	Mem0[x0:byte] = 0x00
	// succ:  l000000000047D4E4
l000000000047D4E4:
	x0 = 0x00000000004E1000
	w1 = Mem0[x0 + 648:word32]
	x0 = Mem0[x21 + 1648:word64]
	w1 = w1 - 0x00000001
	x2 = 0x00000000004E1000
	Mem0[x2 + 648:word32] = w1
	fflush(x0)
	sp = sp + 0xFFFFFFFFFFFFFFF8
	x0 = Mem0[x21 + 1648:word64]
	ferror(x0)
	sp = sp + 0xFFFFFFFFFFFFFFF8
	branch w0 != 0x00000000 l000000000047D648
	// succ:  l000000000047D50C l000000000047D648
l000000000047D50C:
	w0 = 0x00000001
	// succ:  l000000000047D510
l000000000047D510:
	v61 = sp + 16
	x19 = Mem0[v61:word64]
	v61 = v61 + 8
	x20 = Mem0[v61:word64]
	v62 = sp + 32
	x21 = Mem0[v62:word64]
	v62 = v62 + 8
	x22 = Mem0[v62:word64]
	v63 = sp + 48
	x23 = Mem0[v63:word64]
	v63 = v63 + 8
	x24 = Mem0[v63:word64]
	v64 = sp + 64
	x25 = Mem0[v64:word64]
	v64 = v64 + 8
	x26 = Mem0[v64:word64]
	v65 = sp + 80
	x27 = Mem0[v65:word64]
	v65 = v65 + 8
	x28 = Mem0[v65:word64]
	x29 = Mem0[sp:word64]
	sp = sp + 8
	x30 = Mem0[sp:word64]
	sp = sp + 352
	return
	// succ:  printf_builtin_exit
l000000000047D52C:
	x19 = x29 + 0x00000000000000E0
	v51 = x29 + 224
	Mem0[v51:word64] = x31
	v51 = v51 + 8
	Mem0[v51:word64] = x31
	x20 = x20 + 0x0000000000000001
	x3 = 0x0000000000000000
	x0 = x20
	x1 = x19
	x2 = x29 + 0x000000000000010C
	Mem0[x19 + 16:word64] = x3
	Mem0[x19 + 24:byte] = 0x00
	call fn000000000047C5D0 (retsize: 0;)
	x20 = x20 + (int64) ((int32) w0)
	w0 = Mem0[x29 + 268:word32]
	x26 = 0x0000000000000000
	NZCV = cond(w0 - w31)
	x27 = x24 + 0xFFFFFFFFFFFFF938
	branch Test(GT,NZV) l000000000047D58C
	// succ:  l000000000047D56C l000000000047D58C
l000000000047D56C:
	goto l000000000047D5C8
	// succ:  l000000000047D5C8
l000000000047D570:
	x0 = x29 + 0x0000000000000060
	call fn000000000047CE44 (retsize: 0;)
	w0 = Mem0[x29 + 268:word32]
	w1 = w26 + 0x00000001
	NZCV = cond(w0 - w1)
	x26 = x26 + 0x0000000000000001
	branch Test(LE,ZCV) l000000000047D5C8
	// succ:  l000000000047D58C l000000000047D5C8
l000000000047D58C:
	x1 = Mem0[x27 + 56:word64]
	v54 = Mem0[x19 + x26:byte]
	w0 = (word32) v54
	x2 = x1 + 0x0000000000000001
	w1 = Mem0[x27 + 64:word32]
	Mem0[x27 + 56:word64] = x2
	Mem0[x29 + 96:byte] = (byte) w0
	Mem0[x29 + 97:byte] = 0x00
	branch w1 != 0x00000000 l000000000047D570
	// succ:  l000000000047D5AC l000000000047D570
l000000000047D5AC:
	x1 = Mem0[x21 + 1648:word64]
	_IO_putc(x0, x1)
	sp = sp + 0xFFFFFFFFFFFFFFF8
	w0 = Mem0[x29 + 268:word32]
	w1 = w26 + 0x00000001
	NZCV = cond(w0 - w1)
	x26 = x26 + 0x0000000000000001
	branch Test(GT,NZV) l000000000047D58C
	// succ:  l000000000047D5C8 l000000000047D58C
l000000000047D5C8:
	x25 = x20 - 0x0000000000000001
	goto l000000000047D324
	// succ:  l000000000047D324
l000000000047D5D0:
	x1 = 0x00000000004C0000
	w2 = 0x00000005
	x1 = x1 + 0xFFFFFFFFFFFFFD30
	x0 = 0x0000000000000000
	dcgettext(x0, x1, x2)
	sp = sp + 0xFFFFFFFFFFFFFFF8
	x1 = x20
	x19 = x24 + 0xFFFFFFFFFFFFF938
	call builtin_error (retsize: 0;)
	w0 = Mem0[x19 + 64:word32]
	branch w0 != 0x00000000 l000000000047E4F4
	// succ:  l000000000047D5F8 l000000000047E4F4
l000000000047D5F8:
	x19 = x24 + 0xFFFFFFFFFFFFF938
	x0 = Mem0[x19 + 40:word64]
	x31 = x0 - (0x0000000000000001 << 12)
	NZCV = cond(x31)
	branch Test(UGT,ZC) l000000000047DFCC
	// succ:  l000000000047D608 l000000000047DFCC
l000000000047D608:
	x24 = x24 + 0xFFFFFFFFFFFFF938
	x0 = Mem0[x24 + 16:word64]
	x31 = x0 - (0x0000000000000001 << 12)
	NZCV = cond(x31)
	x0 = Mem0[x24 + 8:word64]
	branch Test(UGT,ZC) l000000000047E50C
	// succ:  l000000000047D61C l000000000047E50C
l000000000047D61C:
	branch x0 == 0x0000000000000000 l000000000047D624
	// succ:  l000000000047D620 l000000000047D624
l000000000047D620:
	Mem0[x0:byte] = 0x00
	// succ:  l000000000047D624
l000000000047D624:
	x3 = 0x00000000004E1000
	w1 = Mem0[x3 + 648:word32]
	x0 = Mem0[x21 + 1648:word64]
	w1 = w1 - 0x00000001
	Mem0[x3 + 648:word32] = w1
	fflush(x0)
	sp = sp + 0xFFFFFFFFFFFFFFF8
	x0 = Mem0[x21 + 1648:word64]
	ferror(x0)
	sp = sp + 0xFFFFFFFFFFFFFFF8
	branch w0 == 0x00000000 l000000000047D50C
	// succ:  l000000000047D648 l000000000047D50C
l000000000047D648:
	call sh_wrerror (retsize: 0;)
	x0 = 0x00000000004DE000
	x0 = Mem0[x0 + 1648:word64]
	call clearerr (retsize: 0;)
	w0 = 0x00000001
	goto l000000000047D510
	// succ:  l000000000047D510
l000000000047D660:
	x1 = x24 + 0xFFFFFFFFFFFFF938
	x2 = Mem0[x1 + 56:word64]
	w3 = Mem0[x1 + 64:word32]
	x2 = x2 + 0x0000000000000001
	Mem0[x1 + 56:word64] = x2
	Mem0[x29 + 96:byte] = (byte) w0
	Mem0[x29 + 97:byte] = 0x00
	branch w3 != 0x00000000 l000000000047D6AC
	// succ:  l000000000047D680 l000000000047D6AC
l000000000047D680:
	x1 = Mem0[x21 + 1648:word64]
	_IO_putc(x0, x1)
	sp = sp + 0xFFFFFFFFFFFFFFF8
	// succ:  l000000000047D688
l000000000047D688:
	x20 = x20 + 0x0000000000000002
	x25 = x27
	goto l000000000047D324
	// succ:  l000000000047D324
l000000000047D694:
	x2 = 0x00000000004C0000
	x2 = x2 + 0xFFFFFFFFFFFFFB9C
	v70 = Mem0[x2 + (uint64) ((uint32) w0):word16]
	w4 = (word32) v70
	x3 = 0x000000000047D6AC
	x4 = x3 + (int64) ((int16) w4)
l000000000047D6AC:
	x0 = x29 + 0x0000000000000060
	call fn000000000047CE44 (retsize: 0;)
	goto l000000000047D688
	// succ:  l000000000047D688
l000000000047DC44:
	call fn000000000047CCF0 (retsize: 0;)
	w4 = 0x00000001
	Mem0[x29 + 300:word32] = w0
	x28 = x28 + 0x0000000000000001
	v57 = Mem0[x19 + 1:byte]
	w19 = (word32) v57
	Mem0[x29 + 272:word32] = w4
	goto l000000000047D404
	// succ:  l000000000047D404
l000000000047DC60:
	x0 = Mem0[x21 + 1648:word64]
	x19 = x21 + 0x0000000000000670
	ferror(x0)
	sp = sp + 0xFFFFFFFFFFFFFFF8
	branch w0 != 0x00000000 l000000000047E568
	// succ:  l000000000047DC70 l000000000047E568
l000000000047DC70:
	x0 = x24 + 0xFFFFFFFFFFFFF938
	x0 = Mem0[x0 + 24:word64]
	branch x0 == 0x0000000000000000 l000000000047DC8C
	// succ:  l000000000047DC7C l000000000047DC8C
l000000000047DC7C:
	x2 = Mem0[x29 + 280:word64]
	x1 = Mem0[x2:word64]
	x31 = x0 - x1
	NZCV = cond(x31)
	branch Test(NE,Z) l000000000047D2F8
	// succ:  l000000000047DC8C l000000000047D2F8
l000000000047DC8C:
	x0 = x24 + 0xFFFFFFFFFFFFF938
	w1 = Mem0[x0 + 32:word32]
	branch w1 == 0x00000000 l000000000047DCA0
	// succ:  l000000000047DC98 l000000000047DCA0
l000000000047DC98:
	w1 = 0x00000001
	Mem0[x0 + 68:word32] = w1
	// succ:  l000000000047DCA0
l000000000047DCA0:
	x19 = x24 + 0xFFFFFFFFFFFFF938
	w0 = Mem0[x19 + 64:word32]
	branch w0 == 0x00000000 l000000000047DCC0
	// succ:  l000000000047DCAC l000000000047DCC0
l000000000047DCAC:
	x0 = Mem0[x19 + 72:word64]
	x1 = Mem0[x19 + 8:word64]
	call fn000000000047CE00 (retsize: 0;)
	x0 = Mem0[x19 + 72:word64]
	call stupidly_hack_special_variables (retsize: 0;)
	// succ:  l000000000047DCC0
l000000000047DCC0:
	x19 = x24 + 0xFFFFFFFFFFFFF938
	x0 = Mem0[x19 + 40:word64]
	x31 = x0 - (0x0000000000000001 << 12)
	NZCV = cond(x31)
	branch Test(ULE,ZC) l000000000047DCEC
	// succ:  l000000000047DCD0 l000000000047DCEC
l000000000047DCD0:
	x0 = Mem0[x19 + 48:word64]
	x1 = 0x00000000004C0000
	x1 = x1 + 0xFFFFFFFFFFFFFC90
	w2 = 0x00000294
	call sh_xfree (retsize: 0;)
	Mem0[x19 + 40:word64] = 0x0000000000000000
	Mem0[x19 + 48:word64] = 0x0000000000000000
	// succ:  l000000000047DCEC
l000000000047DCEC:
	x19 = x24 + 0xFFFFFFFFFFFFF938
	x0 = Mem0[x19 + 16:word64]
	x31 = x0 - (0x0000000000000001 << 12)
	NZCV = cond(x31)
	x0 = Mem0[x19 + 8:word64]
	branch Test(UGT,ZC) l000000000047E54C
	// succ:  l000000000047DD00 l000000000047E54C
l000000000047DD00:
	branch x0 == 0x0000000000000000 l000000000047DD08
	// succ:  l000000000047DD04 l000000000047DD08
l000000000047DD04:
	Mem0[x0:byte] = 0x00
	// succ:  l000000000047DD08
l000000000047DD08:
	x3 = 0x00000000004E1000
	w1 = Mem0[x3 + 648:word32]
	x0 = Mem0[x21 + 1648:word64]
	w1 = w1 - 0x00000001
	Mem0[x3 + 648:word32] = w1
	fflush(x0)
	sp = sp + 0xFFFFFFFFFFFFFFF8
	x0 = Mem0[x21 + 1648:word64]
	ferror(x0)
	sp = sp + 0xFFFFFFFFFFFFFFF8
	branch w0 != 0x00000000 l000000000047D648
	// succ:  l000000000047DD2C l000000000047D648
l000000000047DD2C:
	x24 = x24 + 0xFFFFFFFFFFFFF938
	w0 = Mem0[x24 + 68:word32]
	goto l000000000047D374
	// succ:  l000000000047D374
l000000000047DD6C:
	v66 = Mem0[x28 + 2:byte]
	w19 = (word32) v66
	x28 = x28 + 0x0000000000000002
	goto l000000000047D42C
	// succ:  l000000000047D42C
l000000000047DE98:
	call fn000000000047CCF0 (retsize: 0;)
	x26 = x28 + 0x0000000000000002
	w4 = 0x00000001
	v67 = Mem0[x28 + 2:byte]
	w19 = (word32) v67
	Mem0[x29 + 308:word32] = w0
	Mem0[x29 + 296:word32] = w4
	x28 = x26
	goto l000000000047D448
	// succ:  l000000000047D448
l000000000047DEE0:
	x1 = 0x00000000004C0000
	x1 = x1 + 0xFFFFFFFFFFFFFC90
	w2 = 0x00000281
	call sh_xfree (retsize: 0;)
	Mem0[x24 + 16:word64] = 0x0000000000000000
	Mem0[x24 + 8:word64] = 0x0000000000000000
	goto l000000000047D4E4
	// succ:  l000000000047D4E4
l000000000047DEFC:
	x0 = Mem0[x19 + 72:word64]
	x1 = Mem0[x19 + 8:word64]
	call fn000000000047CE00 (retsize: 0;)
	x0 = Mem0[x19 + 72:word64]
	call stupidly_hack_special_variables (retsize: 0;)
	goto l000000000047D4B8
	// succ:  l000000000047D4B8
l000000000047DF98:
	branch x0 == 0x0000000000000000 l000000000047DFA0
	// succ:  l000000000047DF9C l000000000047DFA0
l000000000047DF9C:
	Mem0[x0:byte] = 0x00
	// succ:  l000000000047DFA0
l000000000047DFA0:
	x4 = 0x00000000004E1000
	w1 = Mem0[x4 + 648:word32]
	x0 = Mem0[x21 + 1648:word64]
	w1 = w1 - 0x00000001
	Mem0[x4 + 648:word32] = w1
	fflush(x0)
	sp = sp + 0xFFFFFFFFFFFFFFF8
	x0 = Mem0[x21 + 1648:word64]
	ferror(x0)
	sp = sp + 0xFFFFFFFFFFFFFFF8
	branch w0 != 0x00000000 l000000000047D648
	// succ:  l000000000047DFC4 l000000000047D648
l000000000047DFC4:
	w0 = 0x00000001
	goto l000000000047D510
	// succ:  l000000000047D510
l000000000047DFCC:
	x0 = Mem0[x19 + 48:word64]
	x1 = 0x00000000004C0000
	x1 = x1 + 0xFFFFFFFFFFFFFC90
	w2 = 0x0000018D
	call sh_xfree (retsize: 0;)
	Mem0[x19 + 40:word64] = 0x0000000000000000
	Mem0[x19 + 48:word64] = 0x0000000000000000
	goto l000000000047D608
	// succ:  l000000000047D608
l000000000047E060:
	w0 = Mem0[x29 + 288:word32]
	goto l000000000047D374
	// succ:  l000000000047D374
l000000000047E090:
	x0 = Mem0[x19 + 48:word64]
	x1 = 0x00000000004C0000
	x1 = x1 + 0xFFFFFFFFFFFFFC90
	w2 = 0x00000281
	call sh_xfree (retsize: 0;)
	Mem0[x19 + 40:word64] = 0x0000000000000000
	Mem0[x19 + 48:word64] = 0x0000000000000000
	goto l000000000047D4C8
	// succ:  l000000000047D4C8
l000000000047E4F4:
	x0 = Mem0[x19 + 72:word64]
	x1 = Mem0[x19 + 8:word64]
	call fn000000000047CE00 (retsize: 0;)
	x0 = Mem0[x19 + 72:word64]
	call stupidly_hack_special_variables (retsize: 0;)
	goto l000000000047D5F8
	// succ:  l000000000047D5F8
l000000000047E50C:
	x1 = 0x00000000004C0000
	x1 = x1 + 0xFFFFFFFFFFFFFC90
	w2 = 0x0000018D
	call sh_xfree (retsize: 0;)
	Mem0[x24 + 16:word64] = 0x0000000000000000
	Mem0[x24 + 8:word64] = 0x0000000000000000
	goto l000000000047D624
	// succ:  l000000000047D624
l000000000047E54C:
	x1 = 0x00000000004C0000
	x1 = x1 + 0xFFFFFFFFFFFFFC90
	w2 = 0x00000294
	call sh_xfree (retsize: 0;)
	Mem0[x19 + 16:word64] = 0x0000000000000000
	Mem0[x19 + 8:word64] = 0x0000000000000000
	goto l000000000047DD08
	// succ:  l000000000047DD08
l000000000047E568:
	call sh_wrerror (retsize: 0;)
	x0 = Mem0[x19:word64]
	x19 = x24 + 0xFFFFFFFFFFFFF938
	call clearerr (retsize: 0;)
	w0 = Mem0[x19 + 64:word32]
	branch w0 != 0x00000000 l000000000047E72C
	// succ:  l000000000047E580 l000000000047E72C
l000000000047E580:
	x19 = x24 + 0xFFFFFFFFFFFFF938
	x0 = Mem0[x19 + 40:word64]
	x31 = x0 - (0x0000000000000001 << 12)
	NZCV = cond(x31)
	branch Test(UGT,ZC) l000000000047E70C
	// succ:  l000000000047E590 l000000000047E70C
l000000000047E590:
	x24 = x24 + 0xFFFFFFFFFFFFF938
	x0 = Mem0[x24 + 16:word64]
	x31 = x0 - (0x0000000000000001 << 12)
	NZCV = cond(x31)
	x0 = Mem0[x24 + 8:word64]
	branch Test(ULE,ZC) l000000000047DF98
	// succ:  l000000000047E5A4 l000000000047DF98
l000000000047E5A4:
	x1 = 0x00000000004C0000
	x1 = x1 + 0xFFFFFFFFFFFFFC90
	w2 = 0x0000028C
	call sh_xfree (retsize: 0;)
	Mem0[x24 + 16:word64] = 0x0000000000000000
	Mem0[x24 + 8:word64] = 0x0000000000000000
	goto l000000000047DFA0
	// succ:  l000000000047DFA0
l000000000047E70C:
	x0 = Mem0[x19 + 48:word64]
	x1 = 0x00000000004C0000
	x1 = x1 + 0xFFFFFFFFFFFFFC90
	w2 = 0x0000028C
	call sh_xfree (retsize: 0;)
	Mem0[x19 + 40:word64] = 0x0000000000000000
	Mem0[x19 + 48:word64] = 0x0000000000000000
	goto l000000000047E590
	// succ:  l000000000047E590
l000000000047E72C:
	x0 = Mem0[x19 + 72:word64]
	x1 = Mem0[x19 + 8:word64]
	call fn000000000047CE00 (retsize: 0;)
	x0 = Mem0[x19 + 72:word64]
	call stupidly_hack_special_variables (retsize: 0;)
	goto l000000000047E580
	// succ:  l000000000047E580
printf_builtin_exit:


// sh_getopt
// Return size: 0
void sh_getopt()
sh_getopt_entry:
	// succ:  l000000000047E760
l000000000047E760:
	sp = fp
	sp = sp + -80
	Mem0[sp:word64] = x29
	sp = sp + 8
	Mem0[sp:word64] = x30
	x29 = x31 + 0x0000000000000000
	v8 = sp + 16
	Mem0[v8:word64] = x19
	v8 = v8 + 8
	Mem0[v8:word64] = x20
	x20 = 0x00000000004E1000
	x3 = x20 + 0xFFFFFFFFFFFFF988
	w4 = Mem0[x3 + 8:word32]
	v13 = sp + 64
	Mem0[v13:word64] = x25
	v13 = v13 + 8
	Mem0[v13:word64] = x26
	v16 = sp + 32
	Mem0[v16:word64] = x21
	v16 = v16 + 8
	Mem0[v16:word64] = x22
	v19 = sp + 48
	Mem0[v19:word64] = x23
	v19 = v19 + 8
	Mem0[v19:word64] = x24
	Mem0[x3:word64] = 0x0000000000000000
	NZCV = cond(w4 - w0)
	w21 = w0
	x26 = x1
	x25 = x2
	branch Test(GE,NZV) l000000000047E974
	// succ:  l000000000047E79C l000000000047E974
l000000000047E79C:
	NZCV = cond(w4 - w31)
	branch Test(LT,NV) l000000000047E974
	// succ:  l000000000047E7A4 l000000000047E974
l000000000047E7A4:
	branch Test(EQ,Z) l000000000047E854
	// succ:  l000000000047E7A8 l000000000047E854
l000000000047E7A8:
	x23 = Mem0[x3 + 16:word64]
	branch x23 == 0x0000000000000000 l000000000047E868
	// succ:  l000000000047E7B0 l000000000047E868
l000000000047E7B0:
	v30 = Mem0[x23:byte]
	w19 = (word32) v30
	branch w19 == 0x00000000 l000000000047E868
	// succ:  l000000000047E7B8 l000000000047E868
l000000000047E7B8:
	w2 = Mem0[x3 + 24:word32]
	w2 = w2 + 0x00000001
	// succ:  l000000000047E7C0
l000000000047E7C0:
	x3 = x20 + 0xFFFFFFFFFFFFF988
	w1 = w19
	x22 = x23 + 0x0000000000000001
	x0 = x25
	x24 = 0x00000000004D8000
	Mem0[x3 + 16:word64] = x22
	Mem0[x3 + 24:word32] = w2
	strchr(x0, x1)
	sp = sp + 0xFFFFFFFFFFFFFFF8
	x1 = x24 + 0xFFFFFFFFFFFFF854
	Mem0[x1:word32] = w19
	branch x22 == 0x0000000000000000 l000000000047E7F4
	// succ:  l000000000047E7EC l000000000047E7F4
l000000000047E7EC:
	v34 = Mem0[x23 + 1:byte]
	w1 = (word32) v34
	branch w1 != 0x00000000 l000000000047E808
	// succ:  l000000000047E7F4 l000000000047E808
l000000000047E7F4:
	x3 = x20 + 0xFFFFFFFFFFFFF988
	w1 = Mem0[x3 + 8:word32]
	Mem0[x3 + 16:word64] = 0x0000000000000000
	w1 = w1 + 0x00000001
	Mem0[x3 + 8:word32] = w1
	// succ:  l000000000047E808
l000000000047E808:
	w31 = w19 - 0x0000003A
	NZCV = cond(w31)
	w3 = (word32) Test(EQ,Z)
	x31 = x0 - x31
	NZCV = cond(x31)
	w1 = (word32) Test(EQ,Z)
	w3 = w3 | w1
	x4 = x20 + 0xFFFFFFFFFFFFF988
	Mem0[x4 + 32:word32] = w3
	branch w3 == 0x00000000 l000000000047E8A0
	// succ:  l000000000047E828 l000000000047E8A0
l000000000047E828:
	x24 = x24 + 0xFFFFFFFFFFFFF854
	w0 = Mem0[x24 + 4:word32]
	w22 = 0x0000003F
	branch w0 != 0x00000000 l000000000047E8F4
	// succ:  l000000000047E838 l000000000047E8F4
l000000000047E838:
	w0 = w22
	v41 = sp + 16
	x19 = Mem0[v41:word64]
	v41 = v41 + 8
	x20 = Mem0[v41:word64]
	v42 = sp + 32
	x21 = Mem0[v42:word64]
	v42 = v42 + 8
	x22 = Mem0[v42:word64]
	v43 = sp + 48
	x23 = Mem0[v43:word64]
	v43 = v43 + 8
	x24 = Mem0[v43:word64]
	v44 = sp + 64
	x25 = Mem0[v44:word64]
	v44 = v44 + 8
	x26 = Mem0[v44:word64]
	x29 = Mem0[sp:word64]
	sp = sp + 8
	x30 = Mem0[sp:word64]
	sp = sp + 80
	return
	// succ:  sh_getopt_exit
l000000000047E854:
	w4 = 0x00000001
	Mem0[x3 + 8:word32] = w4
	Mem0[x3 + 16:word64] = 0x0000000000000000
	NZCV = cond(w0 - w4)
	branch Test(LE,ZCV) l000000000047E944
	// succ:  l000000000047E868 l000000000047E944
l000000000047E868:
	x23 = Mem0[x26 + (int64) ((int32) w4):word64]
	w22 = 0xFFFFFFFF
	v37 = Mem0[x23:byte]
	w0 = (word32) v37
	w31 = w0 - 0x0000002D
	NZCV = cond(w31)
	branch Test(NE,Z) l000000000047E838
	// succ:  l000000000047E87C l000000000047E838
l000000000047E87C:
	v38 = Mem0[x23 + 1:byte]
	w19 = (word32) v38
	w31 = w19 - 0x0000002D
	NZCV = cond(w31)
	branch Test(EQ,Z) l000000000047E9C0
	// succ:  l000000000047E888 l000000000047E9C0
l000000000047E888:
	branch w19 == 0x00000000 l000000000047E838
	// succ:  l000000000047E88C l000000000047E838
l000000000047E88C:
	x0 = x20 + 0xFFFFFFFFFFFFF988
	Mem0[x0 + 28:word32] = w4
	x23 = x23 + 0x0000000000000001
	w2 = 0x00000002
	goto l000000000047E7C0
	// succ:  l000000000047E7C0
l000000000047E8A0:
	v49 = Mem0[x0 + 1:byte]
	w0 = (word32) v49
	w22 = w19
	w31 = w0 - 0x0000003A
	NZCV = cond(w31)
	branch Test(NE,Z) l000000000047E838
	// succ:  l000000000047E8B0 l000000000047E838
l000000000047E8B0:
	x0 = Mem0[x4 + 16:word64]
	branch x0 == 0x0000000000000000 l000000000047E94C
	// succ:  l000000000047E8B8 l000000000047E94C
l000000000047E8B8:
	v50 = Mem0[x0:byte]
	w1 = (word32) v50
	branch w1 == 0x00000000 l000000000047E94C
	// succ:  l000000000047E8C0 l000000000047E94C
l000000000047E8C0:
	w1 = Mem0[x4 + 8:word32]
	Mem0[x4:word64] = x0
	w1 = w1 + 0x00000001
	Mem0[x4 + 8:word32] = w1
	// succ:  l000000000047E8D0
l000000000047E8D0:
	x20 = x20 + 0xFFFFFFFFFFFFF988
	Mem0[x20 + 16:word64] = 0x0000000000000000
	w0 = w22
	v51 = sp + 16
	x19 = Mem0[v51:word64]
	v51 = v51 + 8
	x20 = Mem0[v51:word64]
	v52 = sp + 32
	x21 = Mem0[v52:word64]
	v52 = v52 + 8
	x22 = Mem0[v52:word64]
	v53 = sp + 48
	x23 = Mem0[v53:word64]
	v53 = v53 + 8
	x24 = Mem0[v53:word64]
	v54 = sp + 64
	x25 = Mem0[v54:word64]
	v54 = v54 + 8
	x26 = Mem0[v54:word64]
	x29 = Mem0[sp:word64]
	sp = sp + 8
	x30 = Mem0[sp:word64]
	sp = sp + 80
	return
	// succ:  sh_getopt_exit
l000000000047E8F4:
	x0 = 0x00000000004DE000
	x1 = 0x00000000004C0000
	x20 = Mem0[x0 + 1640:word64]
	x1 = x1 + 0xFFFFFFFFFFFFFD50
	w2 = 0x00000005
	x0 = 0x0000000000000000
	dcgettext(x0, x1, x2)
	sp = sp + 0xFFFFFFFFFFFFFFF8
	x3 = Mem0[x26:word64]
	x2 = x0
	w4 = w19
	x0 = x20
	w1 = 0x00000001
	__fprintf_chk(x0, x1, x2, Mem0[sp:<unknown>])
	sp = sp + 0xFFFFFFFFFFFFFFF8
	w0 = w22
	v45 = sp + 16
	x19 = Mem0[v45:word64]
	v45 = v45 + 8
	x20 = Mem0[v45:word64]
	v46 = sp + 32
	x21 = Mem0[v46:word64]
	v46 = v46 + 8
	x22 = Mem0[v46:word64]
	v47 = sp + 48
	x23 = Mem0[v47:word64]
	v47 = v47 + 8
	x24 = Mem0[v47:word64]
	v48 = sp + 64
	x25 = Mem0[v48:word64]
	v48 = v48 + 8
	x26 = Mem0[v48:word64]
	x29 = Mem0[sp:word64]
	sp = sp + 8
	x30 = Mem0[sp:word64]
	sp = sp + 80
	return
	// succ:  sh_getopt_exit
l000000000047E944:
	w22 = 0xFFFFFFFF
	goto l000000000047E838
	// succ:  l000000000047E838
l000000000047E94C:
	x1 = x20 + 0xFFFFFFFFFFFFF988
	w0 = Mem0[x1 + 8:word32]
	NZCV = cond(w0 - w21)
	branch Test(EQ,Z) l000000000047E984
	// succ:  l000000000047E95C l000000000047E984
l000000000047E95C:
	x2 = Mem0[x26 + (int64) ((int32) w0):word64]
	w0 = w0 + 0x00000001
	Mem0[x1 + 8:word32] = w0
	Mem0[x1:word64] = x2
	w22 = w19
	goto l000000000047E8D0
	// succ:  l000000000047E8D0
l000000000047E974:
	x20 = x20 + 0xFFFFFFFFFFFFF988
	Mem0[x20 + 8:word32] = w21
	w22 = 0xFFFFFFFF
	goto l000000000047E838
	// succ:  l000000000047E838
l000000000047E984:
	x0 = x24 + 0xFFFFFFFFFFFFF854
	w0 = Mem0[x0 + 4:word32]
	branch w0 != 0x00000000 l000000000047E9D8
	// succ:  l000000000047E990 l000000000047E9D8
l000000000047E990:
	x1 = 0x00000000004AC000
	x0 = x20 + 0xFFFFFFFFFFFFF988
	x24 = x24 + 0xFFFFFFFFFFFFF854
	x1 = x1 + 0x0000000000000460
	Mem0[x24:word32] = w19
	Mem0[x0:word64] = x1
	v56 = Mem0[x25:byte]
	w0 = (word32) v56
	w22 = 0x0000003F
	w31 = w0 - 0x0000003A
	NZCV = cond(w31)
	w0 = 0x0000003A
l000000000047E9C0:
	v55 = Mem0[x23 + 2:byte]
	w0 = (word32) v55
	branch w0 != 0x00000000 l000000000047E88C
	// succ:  l000000000047E9C8 l000000000047E88C
l000000000047E9C8:
	x20 = x20 + 0xFFFFFFFFFFFFF988
	w4 = w4 + 0x00000001
	Mem0[x20 + 8:word32] = w4
	goto l000000000047E838
	// succ:  l000000000047E838
l000000000047E9D8:
	x0 = 0x00000000004DE000
	x1 = 0x00000000004C0000
	x21 = Mem0[x0 + 1640:word64]
	x1 = x1 + 0xFFFFFFFFFFFFFD70
	w2 = 0x00000005
	x0 = 0x0000000000000000
	dcgettext(x0, x1, x2)
	sp = sp + 0xFFFFFFFFFFFFFFF8
	x3 = Mem0[x26:word64]
	x2 = x0
	w1 = 0x00000001
	x0 = x21
	w4 = w19
	__fprintf_chk(x0, x1, x2, Mem0[sp:<unknown>])
	sp = sp + 0xFFFFFFFFFFFFFFF8
	goto l000000000047E990
	// succ:  l000000000047E990
sh_getopt_exit:


// sh_getopt_restore_state
// Return size: 0
void sh_getopt_restore_state()
sh_getopt_restore_state_entry:
	// succ:  l000000000047EA10
l000000000047EA10:
	sp = fp
	x1 = 0x00000000004E1000
	x1 = x1 + 0xFFFFFFFFFFFFF988
	x2 = Mem0[x1 + 16:word64]
	branch x2 == 0x0000000000000000 l000000000047EA34
	// succ:  l000000000047EA20 l000000000047EA34
l000000000047EA20:
	v6 = Mem0[x1 + 14:int32]
	x3 = (word64) v6
	v7 = Mem0[x1 + 12:int32]
	x2 = (word64) v7
	x0 = Mem0[x0 + x3:word64]
	x0 = x0 + x2
	Mem0[x1 + 16:word64] = x0
	// succ:  l000000000047EA34
l000000000047EA34:
	return
	// succ:  sh_getopt_restore_state_exit
sh_getopt_restore_state_exit:


// internal_getopt
// Return size: 0
void internal_getopt()
internal_getopt_entry:
	// succ:  l000000000047EA38
l000000000047EA38:
	sp = fp
	sp = sp + -80
	Mem0[sp:word64] = x29
	sp = sp + 8
	Mem0[sp:word64] = x30
	x29 = x31 + 0x0000000000000000
	Mem0[sp + 64:word64] = x25
	v9 = sp + 16
	Mem0[v9:word64] = x19
	v9 = v9 + 8
	Mem0[v9:word64] = x20
	v12 = sp + 32
	Mem0[v12:word64] = x21
	v12 = v12 + 8
	Mem0[v12:word64] = x22
	v15 = sp + 48
	Mem0[v15:word64] = x23
	v15 = v15 + 8
	Mem0[v15:word64] = x24
	v18 = Mem0[x1:byte]
	w2 = (word32) v18
	w31 = w2 - 0x0000002B
	NZCV = cond(w31)
	w25 = (word32) Test(EQ,Z)
	x2 = x25 & 0x0000000000000000
	x1 = x1 + x2
	branch x0 == 0x0000000000000000 l000000000047EDF8
	// succ:  l000000000047EA68 l000000000047EDF8
l000000000047EA68:
	x20 = 0x00000000004E1000
	x2 = x20 + 0xFFFFFFFFFFFFF9B0
	x3 = Mem0[x2:word64]
	x31 = x0 - x3
	NZCV = cond(x31)
	branch Test(EQ,Z) l000000000047EC8C
	// succ:  l000000000047EA7C l000000000047EC8C
l000000000047EA7C:
	w3 = 0x00000001
	Mem0[x2 + 8:word32] = w3
	Mem0[x2:word64] = x0
	Mem0[x2 + 16:word64] = x0
	x2 = 0x00000000004E3000
	Mem0[x2 + 3856:word64] = 0x0000000000000000
	x22 = x0
	w23 = w3
	// succ:  l000000000047EA9C
l000000000047EA9C:
	x0 = Mem0[x22 + 8:word64]
	x21 = Mem0[x0:word64]
	v29 = Mem0[x21:byte]
	w0 = (word32) v29
	w31 = w0 - 0x0000002D
	NZCV = cond(w31)
	branch Test(EQ,Z) l000000000047ED3C
	// succ:  l000000000047EAB0 l000000000047ED3C
l000000000047EAB0:
	branch w25 == 0x00000000 l000000000047ED74
	// succ:  l000000000047EAB4 l000000000047ED74
l000000000047EAB4:
	w31 = w0 - 0x0000002B
	NZCV = cond(w31)
	branch Test(NE,Z) l000000000047ED74
	// succ:  l000000000047EABC l000000000047ED74
l000000000047EABC:
	v30 = Mem0[x21 + 1:byte]
	w2 = (word32) v30
	branch w2 == 0x00000000 l000000000047ED74
	// succ:  l000000000047EAC4 l000000000047ED74
l000000000047EAC4:
	x2 = 0x00000000004E3000
	Mem0[x2 + 3864:word32] = w0
	x2 = 0x00000000004D8000
	Mem0[x2 + -1952:byte] = (byte) w0
l000000000047EAD4:
l000000000047EB48:
	v31 = sp + 16
	x19 = Mem0[v31:word64]
	v31 = v31 + 8
	x20 = Mem0[v31:word64]
	v32 = sp + 32
	x21 = Mem0[v32:word64]
	v32 = v32 + 8
	x22 = Mem0[v32:word64]
	v33 = sp + 48
	x23 = Mem0[v33:word64]
	v33 = v33 + 8
	x24 = Mem0[v33:word64]
	x25 = Mem0[sp + 64:word64]
	x29 = Mem0[sp:word64]
	sp = sp + 8
	x30 = Mem0[sp:word64]
	sp = sp + 80
	return
	// succ:  internal_getopt_exit
l000000000047EC8C:
	w23 = Mem0[x2 + 8:word32]
	x22 = Mem0[x2 + 16:word64]
	w31 = w23 - 0x00000001
	NZCV = cond(w31)
	branch Test(EQ,Z) l000000000047ED70
	// succ:  l000000000047EC9C l000000000047ED70
l000000000047EC9C:
	x0 = Mem0[x22 + 8:word64]
	x21 = Mem0[x0:word64]
	goto l000000000047EAD4
	// succ:  l000000000047EAD4
l000000000047ED3C:
	v34 = Mem0[x21 + 1:byte]
	w2 = (word32) v34
	branch w2 == 0x00000000 l000000000047ED74
	// succ:  l000000000047ED44 l000000000047ED74
l000000000047ED44:
	w31 = w2 - 0x0000002D
	NZCV = cond(w31)
	branch Test(NE,Z) l000000000047EAC4
	// succ:  l000000000047ED4C l000000000047EAC4
l000000000047ED4C:
	v35 = Mem0[x21 + 2:byte]
	w2 = (word32) v35
	branch w2 != 0x00000000 l000000000047EAC4
	// succ:  l000000000047ED54 l000000000047EAC4
l000000000047ED54:
	x1 = Mem0[x22:word64]
	x0 = 0x00000000004E3000
	x20 = x20 + 0xFFFFFFFFFFFFF9B0
	Mem0[x0 + 3856:word64] = x1
	Mem0[x20:word64] = 0x0000000000000000
	w0 = 0xFFFFFFFF
	goto l000000000047EB48
	// succ:  l000000000047EB48
l000000000047ED70:
	branch x22 != 0x0000000000000000 l000000000047EA9C
	// succ:  l000000000047ED74 l000000000047EA9C
l000000000047ED74:
	x0 = 0x00000000004E3000
	x20 = x20 + 0xFFFFFFFFFFFFF9B0
	Mem0[x0 + 3856:word64] = x22
	Mem0[x20:word64] = 0x0000000000000000
	w0 = 0xFFFFFFFF
	goto l000000000047EB48
	// succ:  l000000000047EB48
l000000000047EDF8:
	x1 = 0x00000000004E3000
	Mem0[x1 + 3840:word64] = x0
	x1 = 0x00000000004E3000
	Mem0[x1 + 3856:word64] = x0
	w0 = 0xFFFFFFFF
	goto l000000000047EB48
	// succ:  l000000000047EB48
internal_getopt_exit:


// reset_internal_getopt
// Return size: 0
void reset_internal_getopt()
reset_internal_getopt_entry:
	// succ:  l000000000047EE10
l000000000047EE10:
	sp = fp
	x1 = 0x00000000004E3000
	x0 = 0x00000000004E1000
	x0 = x0 + 0xFFFFFFFFFFFFF9B0
	Mem0[x1 + 3856:word64] = 0x0000000000000000
	w1 = 0x00000001
	Mem0[x0 + 16:word64] = 0x0000000000000000
	Mem0[x0:word64] = 0x0000000000000000
	Mem0[x0 + 8:word32] = w1
	return
	// succ:  reset_internal_getopt_exit
reset_internal_getopt_exit:


// fn000000000047EE34
// Return size: 0
void fn000000000047EE34()
fn000000000047EE34_entry:
	// succ:  l000000000047EE34
l000000000047EE34:
	sp = fp
	sp = sp + -48
	Mem0[sp:word64] = x29
	sp = sp + 8
	Mem0[sp:word64] = x30
	x29 = x31 + 0x0000000000000000
	v8 = sp + 16
	Mem0[v8:word64] = x19
	v8 = v8 + 8
	Mem0[v8:word64] = x20
	v11 = sp + 32
	Mem0[v11:word64] = x21
	v11 = v11 + 8
	Mem0[v11:word64] = x22
	x20 = 0x00000000004C0000
	x1 = 0x00000000004C1000
	x22 = x0
	v15 = Mem0[x0:byte]
	w21 = (word32) v15
	x20 = x20 + 0xFFFFFFFFFFFFFE08
	x1 = x1 + 0x0000000000000008
	w19 = 0x00000000
	goto l000000000047EE70
	// succ:  l000000000047EE70
l000000000047EE64:
	x20 = x20 + 16
	x1 = Mem0[x20:word64]
	w19 = w19 + 0x00000001
	branch x1 == 0x0000000000000000 l000000000047EE9C
	// succ:  l000000000047EE70 l000000000047EE9C
l000000000047EE70:
	v18 = Mem0[x1:byte]
	w2 = (word32) v18
	NZCV = cond(w2 - w21)
	branch Test(NE,Z) l000000000047EE64
	// succ:  l000000000047EE7C l000000000047EE64
l000000000047EE7C:
	x0 = x22
	strcmp(x0, x1)
	sp = sp + 0xFFFFFFFFFFFFFFF8
	branch w0 != 0x00000000 l000000000047EE64
	// succ:  l000000000047EE88 l000000000047EE64
l000000000047EE88:
	w0 = w19
	v22 = sp + 32
	x21 = Mem0[v22:word64]
	v22 = v22 + 8
	x22 = Mem0[v22:word64]
	v23 = sp + 16
	x19 = Mem0[v23:word64]
	v23 = v23 + 8
	x20 = Mem0[v23:word64]
	x29 = Mem0[sp:word64]
	sp = sp + 8
	x30 = Mem0[sp:word64]
	sp = sp + 48
	return
	// succ:  fn000000000047EE34_exit
l000000000047EE9C:
	w0 = 0xFFFFFFFF
	v24 = sp + 16
	x19 = Mem0[v24:word64]
	v24 = v24 + 8
	x20 = Mem0[v24:word64]
	v25 = sp + 32
	x21 = Mem0[v25:word64]
	v25 = v25 + 8
	x22 = Mem0[v25:word64]
	x29 = Mem0[sp:word64]
	sp = sp + 8
	x30 = Mem0[sp:word64]
	sp = sp + 48
	return
	// succ:  fn000000000047EE34_exit
fn000000000047EE34_exit:


// fn000000000047EEB0
// Return size: 0
void fn000000000047EEB0()
fn000000000047EEB0_entry:
	// succ:  l000000000047EEB0
l000000000047EEB0:
	sp = fp
	sp = sp + -48
	Mem0[sp:word64] = x29
	sp = sp + 8
	Mem0[sp:word64] = x30
	x29 = x31 + 0x0000000000000000
	v8 = sp + 16
	Mem0[v8:word64] = x19
	v8 = v8 + 8
	Mem0[v8:word64] = x20
	x20 = x1
	x1 = 0x00000000004C1000
	Mem0[sp + 32:word64] = x21
	x1 = x1 + 0x0000000000000018
	x21 = x0
	w0 = 0x00000001
	__printf_chk(x0, x1, Mem0[sp:<unknown>])
	sp = sp + 0xFFFFFFFFFFFFFFF8
	x19 = Mem0[x20 + 16:word64]
	branch (w19 & 0x00000020) == 0x00000000 l000000000047F4B0
	// succ:  l000000000047EEE0 l000000000047F4B0
l000000000047EEE0:
	branch (w19 & 0x00000002) == 0x00000000 l000000000047F490
	// succ:  l000000000047EEE4 l000000000047F490
l000000000047EEE4:
	branch (w19 & 0x00000008) == 0x00000000 l000000000047F470
	// succ:  l000000000047EEE8 l000000000047F470
l000000000047EEE8:
	branch (w19 & 0x00000004) == 0x00000000 l000000000047F450
	// succ:  l000000000047EEEC l000000000047F450
l000000000047EEEC:
	branch (w19 & 0x00000010) == 0x00000000 l000000000047F418
	// succ:  l000000000047EEF0 l000000000047F418
l000000000047EEF0:
	branch (w19 & 0x00000040) == 0x00000000 l000000000047F434
	// succ:  l000000000047EEF4 l000000000047F434
l000000000047EEF4:
	x19 = Mem0[x20 + 8:word64]
	branch (w19 & 0x00000001) == 0x00000000 l000000000047F3F8
	// succ:  l000000000047EEFC l000000000047F3F8
l000000000047EEFC:
	branch (w19 & 0x00000008) == 0x00000000 l000000000047F3D8
	// succ:  l000000000047EF00 l000000000047F3D8
l000000000047EF00:
	branch (w19 & 0x00000010) == 0x00000000 l000000000047F3B8
	// succ:  l000000000047EF04 l000000000047F3B8
l000000000047EF04:
	branch (w19 & 0x00000020) == 0x00000000 l000000000047F398
	// succ:  l000000000047EF08 l000000000047F398
l000000000047EF08:
	branch (w19 & 0x00000100) == 0x00000000 l000000000047F378
	// succ:  l000000000047EF0C l000000000047F378
l000000000047EF0C:
	branch (w19 & 0x00000200) == 0x00000000 l000000000047F358
	// succ:  l000000000047EF10 l000000000047F358
l000000000047EF10:
	branch (w19 & 0x00000800) == 0x00000000 l000000000047F338
	// succ:  l000000000047EF14 l000000000047F338
l000000000047EF14:
	branch (w19 & 0x00004000) == 0x00000000 l000000000047F318
	// succ:  l000000000047EF18 l000000000047F318
l000000000047EF18:
	branch (w19 & 0x00008000) == 0x00000000 l000000000047F2F8
	// succ:  l000000000047EF1C l000000000047F2F8
l000000000047EF1C:
	branch (w19 & 0x00000000) == 0x00000000 l000000000047F2D8
	// succ:  l000000000047EF20 l000000000047F2D8
l000000000047EF20:
	branch (w19 & 0x00000000) == 0x00000000 l000000000047F2B8
	// succ:  l000000000047EF24 l000000000047F2B8
l000000000047EF24:
	branch (w19 & 0x00000000) == 0x00000000 l000000000047F298
	// succ:  l000000000047EF28 l000000000047F298
l000000000047EF28:
	branch (w19 & 0x00000002) == 0x00000000 l000000000047F278
	// succ:  l000000000047EF2C l000000000047F278
l000000000047EF2C:
	branch (w19 & 0x00000004) == 0x00000000 l000000000047F258
	// succ:  l000000000047EF30 l000000000047F258
l000000000047EF30:
	branch (w19 & 0x00000040) == 0x00000000 l000000000047F238
	// succ:  l000000000047EF34 l000000000047F238
l000000000047EF34:
	branch (w19 & 0x00000080) == 0x00000000 l000000000047F218
	// succ:  l000000000047EF38 l000000000047F218
l000000000047EF38:
	branch (w19 & 0x00000400) == 0x00000000 l000000000047F1F8
	// succ:  l000000000047EF3C l000000000047F1F8
l000000000047EF3C:
	branch (w19 & 0x00001000) == 0x00000000 l000000000047F1D8
	// succ:  l000000000047EF40 l000000000047F1D8
l000000000047EF40:
	branch (w19 & 0x00002000) == 0x00000000 l000000000047F1B8
	// succ:  l000000000047EF44 l000000000047F1B8
l000000000047EF44:
	branch (w19 & 0x00000000) == 0x00000000 l000000000047F198
	// succ:  l000000000047EF48 l000000000047F198
l000000000047EF48:
	branch (w19 & 0x00000000) == 0x00000000 l000000000047F178
	// succ:  l000000000047EF4C l000000000047F178
l000000000047EF4C:
	branch (w19 & 0x00000000) == 0x00000000 l000000000047F158
	// succ:  l000000000047EF50 l000000000047F158
l000000000047EF50:
	branch (w19 & 0x00000000) == 0x00000000 l000000000047F120
	// succ:  l000000000047EF54 l000000000047F120
l000000000047EF54:
	branch (w19 & 0x00000000) == 0x00000000 l000000000047F13C
	// succ:  l000000000047EF58 l000000000047F13C
l000000000047EF58:
	x0 = Mem0[x20 + 24:word64]
	branch x0 == 0x0000000000000000 l000000000047EF98
	// succ:  l000000000047EF60 l000000000047EF98
l000000000047EF60:
	call sh_single_quote (retsize: 0;)
	x19 = x0
	x1 = 0x00000000004C1000
	x2 = 0x00000000004C1000
	x1 = x1 + 0x0000000000000118
	x2 = x2 + 0x0000000000000120
	w0 = 0x00000001
	x3 = x19
	__printf_chk(x0, x1, Mem0[sp:<unknown>])
	sp = sp + 0xFFFFFFFFFFFFFFF8
	x1 = 0x00000000004C1000
	x0 = x19
	x1 = x1 + 0x0000000000000128
	w2 = 0x00000227
	call sh_xfree (retsize: 0;)
	// succ:  l000000000047EF98
l000000000047EF98:
	x0 = Mem0[x20 + 32:word64]
	branch x0 == 0x0000000000000000 l000000000047EFD8
	// succ:  l000000000047EFA0 l000000000047EFD8
l000000000047EFA0:
	call sh_single_quote (retsize: 0;)
	x19 = x0
	x1 = 0x00000000004C1000
	x2 = 0x00000000004C1000
	x1 = x1 + 0x0000000000000118
	x2 = x2 + 0x0000000000000160
	w0 = 0x00000001
	x3 = x19
	__printf_chk(x0, x1, Mem0[sp:<unknown>])
	sp = sp + 0xFFFFFFFFFFFFFFF8
	x1 = 0x00000000004C1000
	x0 = x19
	x1 = x1 + 0x0000000000000128
	w2 = 0x00000228
	call sh_xfree (retsize: 0;)
	// succ:  l000000000047EFD8
l000000000047EFD8:
	x0 = Mem0[x20 + 40:word64]
	branch x0 == 0x0000000000000000 l000000000047F018
	// succ:  l000000000047EFE0 l000000000047F018
l000000000047EFE0:
	call sh_single_quote (retsize: 0;)
	x19 = x0
	x1 = 0x00000000004C1000
	x2 = 0x00000000004C1000
	x1 = x1 + 0x0000000000000118
	x2 = x2 + 0x0000000000000168
	w0 = 0x00000001
	x3 = x19
	__printf_chk(x0, x1, Mem0[sp:<unknown>])
	sp = sp + 0xFFFFFFFFFFFFFFF8
	x1 = 0x00000000004C1000
	x0 = x19
	x1 = x1 + 0x0000000000000128
	w2 = 0x00000229
	call sh_xfree (retsize: 0;)
	// succ:  l000000000047F018
l000000000047F018:
	x0 = Mem0[x20 + 48:word64]
	branch x0 == 0x0000000000000000 l000000000047F058
	// succ:  l000000000047F020 l000000000047F058
l000000000047F020:
	call sh_single_quote (retsize: 0;)
	x19 = x0
	x1 = 0x00000000004C1000
	x2 = 0x00000000004C1000
	x1 = x1 + 0x0000000000000118
	x2 = x2 + 0x0000000000000170
	w0 = 0x00000001
	x3 = x19
	__printf_chk(x0, x1, Mem0[sp:<unknown>])
	sp = sp + 0xFFFFFFFFFFFFFFF8
	x1 = 0x00000000004C1000
	x0 = x19
	x1 = x1 + 0x0000000000000128
	w2 = 0x0000022A
	call sh_xfree (retsize: 0;)
	// succ:  l000000000047F058
l000000000047F058:
	x0 = Mem0[x20 + 80:word64]
	branch x0 == 0x0000000000000000 l000000000047F098
	// succ:  l000000000047F060 l000000000047F098
l000000000047F060:
	call sh_single_quote (retsize: 0;)
	x19 = x0
	x1 = 0x00000000004C1000
	x2 = 0x00000000004C1000
	x1 = x1 + 0x0000000000000118
	x2 = x2 + 0x0000000000000178
	w0 = 0x00000001
	x3 = x19
	__printf_chk(x0, x1, Mem0[sp:<unknown>])
	sp = sp + 0xFFFFFFFFFFFFFFF8
	x1 = 0x00000000004C1000
	x0 = x19
	x1 = x1 + 0x0000000000000128
	w2 = 0x0000022B
	call sh_xfree (retsize: 0;)
	// succ:  l000000000047F098
l000000000047F098:
	x0 = Mem0[x20 + 64:word64]
	branch x0 == 0x0000000000000000 l000000000047F0D8
	// succ:  l000000000047F0A0 l000000000047F0D8
l000000000047F0A0:
	call sh_single_quote (retsize: 0;)
	x19 = x0
	x1 = 0x00000000004C1000
	x2 = 0x00000000004C1000
	x1 = x1 + 0x0000000000000118
	x2 = x2 + 0x0000000000000180
	w0 = 0x00000001
	x3 = x19
	__printf_chk(x0, x1, Mem0[sp:<unknown>])
	sp = sp + 0xFFFFFFFFFFFFFFF8
	x1 = 0x00000000004C1000
	x0 = x19
	x1 = x1 + 0x0000000000000128
	w2 = 0x0000022D
	call sh_xfree (retsize: 0;)
	// succ:  l000000000047F0D8
l000000000047F0D8:
	x3 = Mem0[x20 + 56:word64]
	branch x3 == 0x0000000000000000 l000000000047F0F8
	// succ:  l000000000047F0E0 l000000000047F0F8
l000000000047F0E0:
	x1 = 0x00000000004C1000
	x2 = 0x00000000004C1000
	w0 = 0x00000001
	x1 = x1 + 0x0000000000000118
	x2 = x2 + 0x0000000000000188
	__printf_chk(x0, x1, Mem0[sp:<unknown>])
	sp = sp + 0xFFFFFFFFFFFFFFF8
	// succ:  l000000000047F0F8
l000000000047F0F8:
	v17 = Mem0[x21:byte]
	w0 = (word32) v17
	w31 = w0 - 0x0000005F
	NZCV = cond(w31)
	branch Test(EQ,Z) l000000000047F4D0
	// succ:  l000000000047F104 l000000000047F4D0
l000000000047F104:
	x0 = x21
	puts(x0)
	sp = sp + 0xFFFFFFFFFFFFFFF8
	// succ:  l000000000047F10C
l000000000047F10C:
	w0 = 0x00000000
	v21 = sp + 16
	x19 = Mem0[v21:word64]
	v21 = v21 + 8
	x20 = Mem0[v21:word64]
	x21 = Mem0[sp + 32:word64]
	x29 = Mem0[sp:word64]
	sp = sp + 8
	x30 = Mem0[sp:word64]
	sp = sp + 48
	return
	// succ:  fn000000000047EEB0_exit
l000000000047F120:
	x1 = 0x00000000004C1000
	x2 = 0x00000000004C1000
	w0 = 0x00000001
	x1 = x1 + 0x00000000000000B8
	x2 = x2 + 0x0000000000000110
	__printf_chk(x0, x1, Mem0[sp:<unknown>])
	sp = sp + 0xFFFFFFFFFFFFFFF8
	branch (w19 & 0x00000000) == 0x00000000 l000000000047EF58
	// succ:  l000000000047F13C l000000000047EF58
l000000000047F13C:
	x1 = 0x00000000004C1000
	x2 = 0x00000000004AD000
	x1 = x1 + 0x00000000000000B8
	x2 = x2 + 0x00000000000007F8
	w0 = 0x00000001
	__printf_chk(x0, x1, Mem0[sp:<unknown>])
	sp = sp + 0xFFFFFFFFFFFFFFF8
	goto l000000000047EF58
	// succ:  l000000000047EF58
l000000000047F158:
	x1 = 0x00000000004C1000
	x2 = 0x00000000004BD000
	w0 = 0x00000001
	x1 = x1 + 0x00000000000000B8
	x2 = x2 + 0xFFFFFFFFFFFFFD68
	__printf_chk(x0, x1, Mem0[sp:<unknown>])
	sp = sp + 0xFFFFFFFFFFFFFFF8
	branch (w19 & 0x00000000) == 0x00000000 l000000000047EF54
	// succ:  l000000000047F174 l000000000047EF54
l000000000047F174:
	goto l000000000047F120
	// succ:  l000000000047F120
l000000000047F178:
	x1 = 0x00000000004C1000
	x2 = 0x00000000004C1000
	w0 = 0x00000001
	x1 = x1 + 0x00000000000000B8
	x2 = x2 + 0x0000000000000108
	__printf_chk(x0, x1, Mem0[sp:<unknown>])
	sp = sp + 0xFFFFFFFFFFFFFFF8
	branch (w19 & 0x00000000) == 0x00000000 l000000000047EF50
	// succ:  l000000000047F194 l000000000047EF50
l000000000047F194:
	goto l000000000047F158
	// succ:  l000000000047F158
l000000000047F198:
	x1 = 0x00000000004C1000
	x2 = 0x00000000004C1000
	w0 = 0x00000001
	x1 = x1 + 0x00000000000000B8
	x2 = x2 + 0x0000000000000100
	__printf_chk(x0, x1, Mem0[sp:<unknown>])
	sp = sp + 0xFFFFFFFFFFFFFFF8
	branch (w19 & 0x00000000) == 0x00000000 l000000000047EF4C
	// succ:  l000000000047F1B4 l000000000047EF4C
l000000000047F1B4:
	goto l000000000047F178
	// succ:  l000000000047F178
l000000000047F1B8:
	x1 = 0x00000000004C1000
	x2 = 0x00000000004C1000
	w0 = 0x00000001
	x1 = x1 + 0x00000000000000B8
	x2 = x2 + 0x00000000000000F0
	__printf_chk(x0, x1, Mem0[sp:<unknown>])
	sp = sp + 0xFFFFFFFFFFFFFFF8
	branch (w19 & 0x00000000) == 0x00000000 l000000000047EF48
	// succ:  l000000000047F1D4 l000000000047EF48
l000000000047F1D4:
	goto l000000000047F198
	// succ:  l000000000047F198
l000000000047F1D8:
	x1 = 0x00000000004C1000
	x2 = 0x00000000004C1000
	w0 = 0x00000001
	x1 = x1 + 0x00000000000000B8
	x2 = x2 + 0x00000000000000E0
	__printf_chk(x0, x1, Mem0[sp:<unknown>])
	sp = sp + 0xFFFFFFFFFFFFFFF8
	branch (w19 & 0x00002000) == 0x00000000 l000000000047EF44
	// succ:  l000000000047F1F4 l000000000047EF44
l000000000047F1F4:
	goto l000000000047F1B8
	// succ:  l000000000047F1B8
l000000000047F1F8:
	x1 = 0x00000000004C1000
	x2 = 0x00000000004AB000
	w0 = 0x00000001
	x1 = x1 + 0x00000000000000B8
	x2 = x2 + 0xFFFFFFFFFFFFFEA8
	__printf_chk(x0, x1, Mem0[sp:<unknown>])
	sp = sp + 0xFFFFFFFFFFFFFFF8
	branch (w19 & 0x00001000) == 0x00000000 l000000000047EF40
	// succ:  l000000000047F214 l000000000047EF40
l000000000047F214:
	goto l000000000047F1D8
	// succ:  l000000000047F1D8
l000000000047F218:
	x1 = 0x00000000004C1000
	x2 = 0x00000000004C1000
	w0 = 0x00000001
	x1 = x1 + 0x00000000000000B8
	x2 = x2 + 0x00000000000000D8
	__printf_chk(x0, x1, Mem0[sp:<unknown>])
	sp = sp + 0xFFFFFFFFFFFFFFF8
	branch (w19 & 0x00000400) == 0x00000000 l000000000047EF3C
	// succ:  l000000000047F234 l000000000047EF3C
l000000000047F234:
	goto l000000000047F1F8
	// succ:  l000000000047F1F8
l000000000047F238:
	x1 = 0x00000000004C1000
	x2 = 0x00000000004BE000
	w0 = 0x00000001
	x1 = x1 + 0x00000000000000B8
	x2 = x2 + 0xFFFFFFFFFFFFFB88
	__printf_chk(x0, x1, Mem0[sp:<unknown>])
	sp = sp + 0xFFFFFFFFFFFFFFF8
	branch (w19 & 0x00000080) == 0x00000000 l000000000047EF38
	// succ:  l000000000047F254 l000000000047EF38
l000000000047F254:
	goto l000000000047F218
	// succ:  l000000000047F218
l000000000047F258:
	x1 = 0x00000000004C1000
	x2 = 0x00000000004C1000
	w0 = 0x00000001
	x1 = x1 + 0x00000000000000B8
	x2 = x2 + 0x00000000000000D0
	__printf_chk(x0, x1, Mem0[sp:<unknown>])
	sp = sp + 0xFFFFFFFFFFFFFFF8
	branch (w19 & 0x00000040) == 0x00000000 l000000000047EF34
	// succ:  l000000000047F274 l000000000047EF34
l000000000047F274:
	goto l000000000047F238
	// succ:  l000000000047F238
l000000000047F278:
	x1 = 0x00000000004C1000
	x2 = 0x00000000004C1000
	w0 = 0x00000001
	x1 = x1 + 0x00000000000000B8
	x2 = x2 + 0x00000000000000C0
	__printf_chk(x0, x1, Mem0[sp:<unknown>])
	sp = sp + 0xFFFFFFFFFFFFFFF8
	branch (w19 & 0x00000004) == 0x00000000 l000000000047EF30
	// succ:  l000000000047F294 l000000000047EF30
l000000000047F294:
	goto l000000000047F258
	// succ:  l000000000047F258
l000000000047F298:
	x1 = 0x00000000004AC000
	x2 = 0x00000000004C1000
	w0 = 0x00000001
	x1 = x1 + 0x00000000000003C0
	x2 = x2 + 0x00000000000000B0
	__printf_chk(x0, x1, Mem0[sp:<unknown>])
	sp = sp + 0xFFFFFFFFFFFFFFF8
	branch (w19 & 0x00000002) == 0x00000000 l000000000047EF2C
	// succ:  l000000000047F2B4 l000000000047EF2C
l000000000047F2B4:
	goto l000000000047F278
	// succ:  l000000000047F278
l000000000047F2B8:
	x1 = 0x00000000004AC000
	x2 = 0x00000000004C0000
	w0 = 0x00000001
	x1 = x1 + 0x00000000000003C0
	x2 = x2 + 0x00000000000007D0
	__printf_chk(x0, x1, Mem0[sp:<unknown>])
	sp = sp + 0xFFFFFFFFFFFFFFF8
	branch (w19 & 0x00000000) == 0x00000000 l000000000047EF28
	// succ:  l000000000047F2D4 l000000000047EF28
l000000000047F2D4:
	goto l000000000047F298
	// succ:  l000000000047F298
l000000000047F2D8:
	x1 = 0x00000000004AC000
	x2 = 0x00000000004C0000
	w0 = 0x00000001
	x1 = x1 + 0x00000000000003C0
	x2 = x2 + 0x00000000000007C8
	__printf_chk(x0, x1, Mem0[sp:<unknown>])
	sp = sp + 0xFFFFFFFFFFFFFFF8
	branch (w19 & 0x00000000) == 0x00000000 l000000000047EF24
	// succ:  l000000000047F2F4 l000000000047EF24
l000000000047F2F4:
	goto l000000000047F2B8
	// succ:  l000000000047F2B8
l000000000047F2F8:
	x1 = 0x00000000004AC000
	x2 = 0x00000000004C1000
	w0 = 0x00000001
	x1 = x1 + 0x00000000000003C0
	x2 = x2 + 0x00000000000000A8
	__printf_chk(x0, x1, Mem0[sp:<unknown>])
	sp = sp + 0xFFFFFFFFFFFFFFF8
	branch (w19 & 0x00000000) == 0x00000000 l000000000047EF20
	// succ:  l000000000047F314 l000000000047EF20
l000000000047F314:
	goto l000000000047F2D8
	// succ:  l000000000047F2D8
l000000000047F318:
	x1 = 0x00000000004AC000
	x2 = 0x00000000004C1000
	w0 = 0x00000001
	x1 = x1 + 0x00000000000003C0
	x2 = x2 + 0x00000000000000A0
	__printf_chk(x0, x1, Mem0[sp:<unknown>])
	sp = sp + 0xFFFFFFFFFFFFFFF8
	branch (w19 & 0x00008000) == 0x00000000 l000000000047EF1C
	// succ:  l000000000047F334 l000000000047EF1C
l000000000047F334:
	goto l000000000047F2F8
	// succ:  l000000000047F2F8
l000000000047F338:
	x1 = 0x00000000004AC000
	x2 = 0x00000000004C1000
	w0 = 0x00000001
	x1 = x1 + 0x00000000000003C0
	x2 = x2 + 0x0000000000000098
	__printf_chk(x0, x1, Mem0[sp:<unknown>])
	sp = sp + 0xFFFFFFFFFFFFFFF8
	branch (w19 & 0x00004000) == 0x00000000 l000000000047EF18
	// succ:  l000000000047F354 l000000000047EF18
l000000000047F354:
	goto l000000000047F318
	// succ:  l000000000047F318
l000000000047F358:
	x1 = 0x00000000004AC000
	x2 = 0x00000000004C1000
	w0 = 0x00000001
	x1 = x1 + 0x00000000000003C0
	x2 = x2 + 0x0000000000000090
	__printf_chk(x0, x1, Mem0[sp:<unknown>])
	sp = sp + 0xFFFFFFFFFFFFFFF8
	branch (w19 & 0x00000800) == 0x00000000 l000000000047EF14
	// succ:  l000000000047F374 l000000000047EF14
l000000000047F374:
	goto l000000000047F338
	// succ:  l000000000047F338
l000000000047F378:
	x1 = 0x00000000004AC000
	x2 = 0x00000000004C1000
	w0 = 0x00000001
	x1 = x1 + 0x00000000000003C0
	x2 = x2 + 0x0000000000000088
	__printf_chk(x0, x1, Mem0[sp:<unknown>])
	sp = sp + 0xFFFFFFFFFFFFFFF8
	branch (w19 & 0x00000200) == 0x00000000 l000000000047EF10
	// succ:  l000000000047F394 l000000000047EF10
l000000000047F394:
	goto l000000000047F358
	// succ:  l000000000047F358
l000000000047F398:
	x1 = 0x00000000004AC000
	x2 = 0x00000000004C1000
	w0 = 0x00000001
	x1 = x1 + 0x00000000000003C0
	x2 = x2 + 0x0000000000000080
	__printf_chk(x0, x1, Mem0[sp:<unknown>])
	sp = sp + 0xFFFFFFFFFFFFFFF8
	branch (w19 & 0x00000100) == 0x00000000 l000000000047EF0C
	// succ:  l000000000047F3B4 l000000000047EF0C
l000000000047F3B4:
	goto l000000000047F378
	// succ:  l000000000047F378
l000000000047F3B8:
	x1 = 0x00000000004AC000
	x2 = 0x00000000004AA000
	w0 = 0x00000001
	x1 = x1 + 0x00000000000003C0
	x2 = x2 + 0x0000000000000200
	__printf_chk(x0, x1, Mem0[sp:<unknown>])
	sp = sp + 0xFFFFFFFFFFFFFFF8
	branch (w19 & 0x00000020) == 0x00000000 l000000000047EF08
	// succ:  l000000000047F3D4 l000000000047EF08
l000000000047F3D4:
	goto l000000000047F398
	// succ:  l000000000047F398
l000000000047F3D8:
	x1 = 0x00000000004AC000
	x2 = 0x00000000004C1000
	w0 = 0x00000001
	x1 = x1 + 0x00000000000003C0
	x2 = x2 + 0x0000000000000078
	__printf_chk(x0, x1, Mem0[sp:<unknown>])
	sp = sp + 0xFFFFFFFFFFFFFFF8
	branch (w19 & 0x00000010) == 0x00000000 l000000000047EF04
	// succ:  l000000000047F3F4 l000000000047EF04
l000000000047F3F4:
	goto l000000000047F3B8
	// succ:  l000000000047F3B8
l000000000047F3F8:
	x1 = 0x00000000004AC000
	x2 = 0x00000000004C1000
	w0 = 0x00000001
	x1 = x1 + 0x00000000000003C0
	x2 = x2 + 0x0000000000000070
	__printf_chk(x0, x1, Mem0[sp:<unknown>])
	sp = sp + 0xFFFFFFFFFFFFFFF8
	branch (w19 & 0x00000008) == 0x00000000 l000000000047EF00
	// succ:  l000000000047F414 l000000000047EF00
l000000000047F414:
	goto l000000000047F3D8
	// succ:  l000000000047F3D8
l000000000047F418:
	x1 = 0x00000000004C1000
	x2 = 0x00000000004C1000
	w0 = 0x00000001
	x1 = x1 + 0x0000000000000028
	x2 = x2 + 0x0000000000000058
	__printf_chk(x0, x1, Mem0[sp:<unknown>])
	sp = sp + 0xFFFFFFFFFFFFFFF8
	branch (w19 & 0x00000040) == 0x00000000 l000000000047EEF4
	// succ:  l000000000047F434 l000000000047EEF4
l000000000047F434:
	x1 = 0x00000000004C1000
	x2 = 0x00000000004C1000
	x1 = x1 + 0x0000000000000028
	x2 = x2 + 0x0000000000000060
	w0 = 0x00000001
	__printf_chk(x0, x1, Mem0[sp:<unknown>])
	sp = sp + 0xFFFFFFFFFFFFFFF8
	goto l000000000047EEF4
	// succ:  l000000000047EEF4
l000000000047F450:
	x1 = 0x00000000004C1000
	x2 = 0x00000000004C1000
	w0 = 0x00000001
	x1 = x1 + 0x0000000000000028
	x2 = x2 + 0x0000000000000048
	__printf_chk(x0, x1, Mem0[sp:<unknown>])
	sp = sp + 0xFFFFFFFFFFFFFFF8
	branch (w19 & 0x00000010) == 0x00000000 l000000000047EEF0
	// succ:  l000000000047F46C l000000000047EEF0
l000000000047F46C:
	goto l000000000047F418
	// succ:  l000000000047F418
l000000000047F470:
	x1 = 0x00000000004C1000
	x2 = 0x00000000004C1000
	w0 = 0x00000001
	x1 = x1 + 0x0000000000000028
	x2 = x2 + 0x0000000000000038
	__printf_chk(x0, x1, Mem0[sp:<unknown>])
	sp = sp + 0xFFFFFFFFFFFFFFF8
	branch (w19 & 0x00000004) == 0x00000000 l000000000047EEEC
	// succ:  l000000000047F48C l000000000047EEEC
l000000000047F48C:
	goto l000000000047F450
	// succ:  l000000000047F450
l000000000047F490:
	x1 = 0x00000000004C1000
	x2 = 0x00000000004C1000
	w0 = 0x00000001
	x1 = x1 + 0x0000000000000028
	x2 = x2 + 0x0000000000000030
	__printf_chk(x0, x1, Mem0[sp:<unknown>])
	sp = sp + 0xFFFFFFFFFFFFFFF8
	branch (w19 & 0x00000008) == 0x00000000 l000000000047EEE8
	// succ:  l000000000047F4AC l000000000047EEE8
l000000000047F4AC:
	goto l000000000047F470
	// succ:  l000000000047F470
l000000000047F4B0:
	x1 = 0x00000000004C1000
	x2 = 0x00000000004C1000
	w0 = 0x00000001
	x1 = x1 + 0x0000000000000028
	x2 = x2 + 0x0000000000000008
	__printf_chk(x0, x1, Mem0[sp:<unknown>])
	sp = sp + 0xFFFFFFFFFFFFFFF8
	branch (w19 & 0x00000002) == 0x00000000 l000000000047EEE4
	// succ:  l000000000047F4CC l000000000047EEE4
l000000000047F4CC:
	goto l000000000047F490
	// succ:  l000000000047F490
l000000000047F4D0:
	x1 = 0x00000000004AE000
	x0 = x21
	x1 = x1 + 0xFFFFFFFFFFFFFEA0
	strcmp(x0, x1)
	sp = sp + 0xFFFFFFFFFFFFFFF8
	branch w0 == 0x00000000 l000000000047F508
	// succ:  l000000000047F4E4 l000000000047F508
l000000000047F4E4:
	x1 = 0x00000000004AF000
	x0 = x21
	x1 = x1 + 0x00000000000002A8
	strcmp(x0, x1)
	sp = sp + 0xFFFFFFFFFFFFFFF8
	branch w0 != 0x00000000 l000000000047F104
	// succ:  l000000000047F4F8 l000000000047F104
l000000000047F4F8:
	x0 = 0x00000000004C1000
	x0 = x0 + 0x0000000000000198
	puts(x0)
	sp = sp + 0xFFFFFFFFFFFFFFF8
	goto l000000000047F10C
	// succ:  l000000000047F10C
l000000000047F508:
	x0 = 0x00000000004C1000
	x0 = x0 + 0x0000000000000190
	puts(x0)
	sp = sp + 0xFFFFFFFFFFFFFFF8
	goto l000000000047F10C
	// succ:  l000000000047F10C
fn000000000047EEB0_exit:


// fn000000000047F528
// Return size: 0
void fn000000000047F528()
fn000000000047F528_entry:
	// succ:  l000000000047F528
l000000000047F528:
	sp = fp
	sp = sp + -48
	Mem0[sp:word64] = x29
	sp = sp + 8
	Mem0[sp:word64] = x30
	x29 = x31 + 0x0000000000000000
	v8 = sp + 16
	Mem0[v8:word64] = x19
	v8 = v8 + 8
	Mem0[v8:word64] = x20
	Mem0[sp + 32:word64] = x21
	x19 = x0
	branch x0 == 0x0000000000000000 l000000000047F5B0
	// succ:  l000000000047F540 l000000000047F5B0
l000000000047F540:
	x21 = 0x00000000004C1000
	w20 = 0x00000000
	x21 = x21 + 0x00000000000001A0
	goto l000000000047F564
	// succ:  l000000000047F564
l000000000047F550:
	x2 = Mem0[x19 + 8:word64]
	x0 = Mem0[x2:word64]
	call fn000000000047EEB0 (retsize: 0;)
	x19 = Mem0[x19:word64]
	branch x19 == 0x0000000000000000 l000000000047F59C
	// succ:  l000000000047F564 l000000000047F59C
l000000000047F564:
	x2 = Mem0[x19 + 8:word64]
	x0 = Mem0[x2:word64]
	call progcomp_search (retsize: 0;)
	x1 = x0
	branch x0 != 0x0000000000000000 l000000000047F550
	// succ:  l000000000047F578 l000000000047F550
l000000000047F578:
	x1 = x21
	w2 = 0x00000005
	dcgettext(x0, x1, x2)
	sp = sp + 0xFFFFFFFFFFFFFFF8
	x2 = Mem0[x19 + 8:word64]
	w20 = 0x00000001
	x1 = Mem0[x2:word64]
	call builtin_error (retsize: 0;)
	x19 = Mem0[x19:word64]
	branch x19 != 0x0000000000000000 l000000000047F564
	// succ:  l000000000047F59C l000000000047F564
l000000000047F59C:
	w0 = w20
	x21 = Mem0[sp + 32:word64]
	v16 = sp + 16
	x19 = Mem0[v16:word64]
	v16 = v16 + 8
	x20 = Mem0[v16:word64]
	x29 = Mem0[sp:word64]
	sp = sp + 8
	x30 = Mem0[sp:word64]
	sp = sp + 48
	// succ:  l000000000047F5AC_thunk_sh_chkwrite
l000000000047F5AC_thunk_sh_chkwrite:
	call sh_chkwrite (retsize: 0;)
	return
	// succ:  fn000000000047F528_exit
l000000000047F5B0:
	w20 = w0
	goto l000000000047F59C
	// succ:  l000000000047F59C
fn000000000047F528_exit:


// fn000000000047F5B8
// Return size: 0
void fn000000000047F5B8()
fn000000000047F5B8_entry:
	// succ:  l000000000047F5B8
l000000000047F5B8:
	sp = fp
	sp = sp + -48
	Mem0[sp:word64] = x29
	sp = sp + 8
	Mem0[sp:word64] = x30
	x29 = x31 + 0x0000000000000000
	v8 = sp + 16
	Mem0[v8:word64] = x19
	v8 = v8 + 8
	Mem0[v8:word64] = x20
	Mem0[sp + 32:word64] = x21
	x19 = x0
	branch x0 == 0x0000000000000000 l000000000047F634
	// succ:  l000000000047F5D0 l000000000047F634
l000000000047F5D0:
	x21 = 0x00000000004C1000
	w20 = 0x00000000
	x21 = x21 + 0x00000000000001A0
	goto l000000000047F5E8
	// succ:  l000000000047F5E8
l000000000047F5E0:
	x19 = Mem0[x19:word64]
	branch x19 == 0x0000000000000000 l000000000047F620
	// succ:  l000000000047F5E8 l000000000047F620
l000000000047F5E8:
	x2 = Mem0[x19 + 8:word64]
	x0 = Mem0[x2:word64]
	call progcomp_remove (retsize: 0;)
	branch w0 != 0x00000000 l000000000047F5E0
	// succ:  l000000000047F5F8 l000000000047F5E0
l000000000047F5F8:
	x1 = x21
	w2 = 0x00000005
	x0 = 0x0000000000000000
	dcgettext(x0, x1, x2)
	sp = sp + 0xFFFFFFFFFFFFFFF8
	x2 = Mem0[x19 + 8:word64]
	w20 = 0x00000001
	x1 = Mem0[x2:word64]
	call builtin_error (retsize: 0;)
	x19 = Mem0[x19:word64]
	branch x19 != 0x0000000000000000 l000000000047F5E8
	// succ:  l000000000047F620 l000000000047F5E8
l000000000047F620:
	w0 = w20
	x21 = Mem0[sp + 32:word64]
	v16 = sp + 16
	x19 = Mem0[v16:word64]
	v16 = v16 + 8
	x20 = Mem0[v16:word64]
	x29 = Mem0[sp:word64]
	sp = sp + 8
	x30 = Mem0[sp:word64]
	sp = sp + 48
	return
	// succ:  fn000000000047F5B8_exit
l000000000047F634:
	w20 = w0
	goto l000000000047F620
	// succ:  l000000000047F620
fn000000000047F5B8_exit:


// fn000000000047F63C
// Return size: 0
void fn000000000047F63C()
fn000000000047F63C_entry:
	// succ:  l000000000047F63C
l000000000047F63C:
	sp = fp
	sp = sp + -128
	Mem0[sp:word64] = x29
	sp = sp + 8
	Mem0[sp:word64] = x30
	x29 = x31 + 0x0000000000000000
	v8 = sp + 32
	Mem0[v8:word64] = x21
	v8 = v8 + 8
	Mem0[v8:word64] = x22
	v11 = sp + 80
	Mem0[v11:word64] = x27
	v11 = v11 + 8
	Mem0[v11:word64] = x28
	x21 = 0x00000000004C1000
	x28 = 0x00000000004C0000
	v14 = sp + 48
	Mem0[v14:word64] = x23
	v14 = v14 + 8
	Mem0[v14:word64] = x24
	v17 = sp + 16
	Mem0[v17:word64] = x19
	v17 = v17 + 8
	Mem0[v17:word64] = x20
	v20 = sp + 64
	Mem0[v20:word64] = x25
	v20 = v20 + 8
	Mem0[v20:word64] = x26
	x22 = x0
	x27 = x1
	Mem0[x29 + 104:word64] = x2
	Mem0[x29 + 112:word64] = x3
	x28 = x28 + 0xFFFFFFFFFFFFFE08
	call reset_internal_getopt (retsize: 0;)
	x21 = x21 + 0x00000000000001C8
	x2 = x28 + 0x0000000000000070
	x0 = x22
	x1 = x21
	Mem0[x29 + 96:word64] = x28
	Mem0[x29 + 120:word64] = x2
	call internal_getopt (retsize: 0;)
	x23 = 0x0000000000000000
	x26 = 0x00000000004C0000
	w31 = w0 + 0x00000001
	NZCV = cond(w31)
	x24 = x23
	w19 = w23
	x26 = x26 + 0xFFFFFFFFFFFFFD98
	branch Test(EQ,Z) l000000000047F70C
	// succ:  l000000000047F6B0 l000000000047F70C
l000000000047F6B0:
	w4 = w0 - 0x00000041
	w31 = w4 - 0x00000035
	NZCV = cond(w31)
	branch Test(ULE,ZC) l000000000047F6E0
	// succ:  l000000000047F6BC l000000000047F6E0
l000000000047F6BC:
	call builtin_usage (retsize: 0;)
	w0 = 0x00000102
	v33 = sp + 16
	x19 = Mem0[v33:word64]
	v33 = v33 + 8
	x20 = Mem0[v33:word64]
	v34 = sp + 32
	x21 = Mem0[v34:word64]
	v34 = v34 + 8
	x22 = Mem0[v34:word64]
	v35 = sp + 48
	x23 = Mem0[v35:word64]
	v35 = v35 + 8
	x24 = Mem0[v35:word64]
	v36 = sp + 64
	x25 = Mem0[v36:word64]
	v36 = v36 + 8
	x26 = Mem0[v36:word64]
	v37 = sp + 80
	x27 = Mem0[v37:word64]
	v37 = v37 + 8
	x28 = Mem0[v37:word64]
	x29 = Mem0[sp:word64]
	sp = sp + 8
	x30 = Mem0[sp:word64]
	sp = sp + 128
	return
	// succ:  fn000000000047F63C_exit
l000000000047F6E0:
	v43 = Mem0[x26 + (uint64) ((uint32) w4):word16]
	w0 = (word32) v43
	x1 = 0x000000000047F6F0
	x0 = x1 + (int64) ((int16) w0)
	call x0 (retsize: 0;)
	return
	// succ:  fn000000000047F63C_exit
l000000000047F70C:
	x2 = Mem0[x29 + 104:word64]
	w0 = w19 ^ 0x00000001
	Mem0[x2:word64] = x24
	x2 = Mem0[x29 + 112:word64]
	v38 = sp + 16
	x19 = Mem0[v38:word64]
	v38 = v38 + 8
	x20 = Mem0[v38:word64]
	Mem0[x2:word64] = x23
	v39 = sp + 32
	x21 = Mem0[v39:word64]
	v39 = v39 + 8
	x22 = Mem0[v39:word64]
	v40 = sp + 48
	x23 = Mem0[v40:word64]
	v40 = v40 + 8
	x24 = Mem0[v40:word64]
	v41 = sp + 64
	x25 = Mem0[v41:word64]
	v41 = v41 + 8
	x26 = Mem0[v41:word64]
	v42 = sp + 80
	x27 = Mem0[v42:word64]
	v42 = v42 + 8
	x28 = Mem0[v42:word64]
	x29 = Mem0[sp:word64]
	sp = sp + 8
	x30 = Mem0[sp:word64]
	sp = sp + 128
	return
	// succ:  fn000000000047F63C_exit
fn000000000047F63C_exit:


// fn000000000047FA14
// Return size: 0
void fn000000000047FA14()
fn000000000047FA14_entry:
	// succ:  l000000000047FA14
l000000000047FA14:
	sp = fp
	sp = sp + -32
	Mem0[sp:word64] = x29
	sp = sp + 8
	Mem0[sp:word64] = x30
	x29 = x31 + 0x0000000000000000
	v8 = sp + 16
	Mem0[v8:word64] = x19
	v8 = v8 + 8
	Mem0[v8:word64] = x20
	x19 = x1
	x1 = 0x00000000004C1000
	x20 = x0
	x1 = x1 + 0x0000000000000208
	w0 = 0x00000001
	__printf_chk(x0, x1, Mem0[sp:<unknown>])
	sp = sp + 0xFFFFFFFFFFFFFFF8
	x19 = Mem0[x19:word64]
	branch (w19 & 0x00000020) == 0x00000000 l000000000047FBD0
	// succ:  l000000000047FA40 l000000000047FBD0
l000000000047FA40:
	x1 = 0x00000000004C1000
	x2 = 0x00000000004C1000
	x1 = x1 + 0x0000000000000028
	x2 = x2 + 0x0000000000000008
	w0 = 0x00000001
	__printf_chk(x0, x1, Mem0[sp:<unknown>])
	sp = sp + 0xFFFFFFFFFFFFFFF8
	branch (w19 & 0x00000002) == 0x00000000 l000000000047FB00
	// succ:  l000000000047FA5C l000000000047FB00
l000000000047FA5C:
	x1 = 0x00000000004C1000
	x2 = 0x00000000004C1000
	x1 = x1 + 0x0000000000000028
	x2 = x2 + 0x0000000000000030
	w0 = 0x00000001
	__printf_chk(x0, x1, Mem0[sp:<unknown>])
	sp = sp + 0xFFFFFFFFFFFFFFF8
	branch (w19 & 0x00000008) == 0x00000000 l000000000047FB1C
	// succ:  l000000000047FA78 l000000000047FB1C
l000000000047FA78:
	x1 = 0x00000000004C1000
	x2 = 0x00000000004C1000
	x1 = x1 + 0x0000000000000028
	x2 = x2 + 0x0000000000000038
	w0 = 0x00000001
	__printf_chk(x0, x1, Mem0[sp:<unknown>])
	sp = sp + 0xFFFFFFFFFFFFFFF8
	branch (w19 & 0x00000004) == 0x00000000 l000000000047FB38
	// succ:  l000000000047FA94 l000000000047FB38
l000000000047FA94:
	x1 = 0x00000000004C1000
	x2 = 0x00000000004C1000
	x1 = x1 + 0x0000000000000028
	x2 = x2 + 0x0000000000000048
	w0 = 0x00000001
	__printf_chk(x0, x1, Mem0[sp:<unknown>])
	sp = sp + 0xFFFFFFFFFFFFFFF8
	branch (w19 & 0x00000010) == 0x00000000 l000000000047FB54
	// succ:  l000000000047FAB0 l000000000047FB54
l000000000047FAB0:
	x1 = 0x00000000004C1000
	x2 = 0x00000000004C1000
	x1 = x1 + 0x0000000000000028
	x2 = x2 + 0x0000000000000058
	w0 = 0x00000001
	__printf_chk(x0, x1, Mem0[sp:<unknown>])
	sp = sp + 0xFFFFFFFFFFFFFFF8
	branch (w19 & 0x00000040) == 0x00000000 l000000000047FB70
	// succ:  l000000000047FACC l000000000047FB70
l000000000047FACC:
	x1 = 0x00000000004C1000
	x2 = 0x00000000004C1000
	x1 = x1 + 0x0000000000000028
	x2 = x2 + 0x0000000000000060
	w0 = 0x00000001
	__printf_chk(x0, x1, Mem0[sp:<unknown>])
	sp = sp + 0xFFFFFFFFFFFFFFF8
	v14 = Mem0[x20:byte]
	w0 = (word32) v14
	w31 = w0 - 0x0000005F
	NZCV = cond(w31)
	branch Test(EQ,Z) l000000000047FB94
	// succ:  l000000000047FAF0 l000000000047FB94
l000000000047FAF0:
	x0 = x20
	v18 = sp + 16
	x19 = Mem0[v18:word64]
	v18 = v18 + 8
	x20 = Mem0[v18:word64]
	x29 = Mem0[sp:word64]
	sp = sp + 8
	x30 = Mem0[sp:word64]
	sp = sp + 32
	puts(x0)
	return
	// succ:  fn000000000047FA14_exit
l000000000047FB00:
	x1 = 0x00000000004C1000
	x2 = 0x00000000004C1000
	w0 = 0x00000001
	x1 = x1 + 0x0000000000000218
	x2 = x2 + 0x0000000000000030
	__printf_chk(x0, x1, Mem0[sp:<unknown>])
	sp = sp + 0xFFFFFFFFFFFFFFF8
	branch (w19 & 0x00000008) == 0x00000000 l000000000047FA78
	// succ:  l000000000047FB1C l000000000047FA78
l000000000047FB1C:
	x1 = 0x00000000004C1000
	x2 = 0x00000000004C1000
	w0 = 0x00000001
	x1 = x1 + 0x0000000000000218
	x2 = x2 + 0x0000000000000038
	__printf_chk(x0, x1, Mem0[sp:<unknown>])
	sp = sp + 0xFFFFFFFFFFFFFFF8
	branch (w19 & 0x00000004) == 0x00000000 l000000000047FA94
	// succ:  l000000000047FB38 l000000000047FA94
l000000000047FB38:
	x1 = 0x00000000004C1000
	x2 = 0x00000000004C1000
	w0 = 0x00000001
	x1 = x1 + 0x0000000000000218
	x2 = x2 + 0x0000000000000048
	__printf_chk(x0, x1, Mem0[sp:<unknown>])
	sp = sp + 0xFFFFFFFFFFFFFFF8
	branch (w19 & 0x00000010) == 0x00000000 l000000000047FAB0
	// succ:  l000000000047FB54 l000000000047FAB0
l000000000047FB54:
	x1 = 0x00000000004C1000
	x2 = 0x00000000004C1000
	w0 = 0x00000001
	x1 = x1 + 0x0000000000000218
	x2 = x2 + 0x0000000000000058
	__printf_chk(x0, x1, Mem0[sp:<unknown>])
	sp = sp + 0xFFFFFFFFFFFFFFF8
	branch (w19 & 0x00000040) == 0x00000000 l000000000047FACC
	// succ:  l000000000047FB70 l000000000047FACC
l000000000047FB70:
	x1 = 0x00000000004C1000
	x2 = 0x00000000004C1000
	w0 = 0x00000001
	x1 = x1 + 0x0000000000000218
	x2 = x2 + 0x0000000000000060
	__printf_chk(x0, x1, Mem0[sp:<unknown>])
	sp = sp + 0xFFFFFFFFFFFFFFF8
	v20 = Mem0[x20:byte]
	w0 = (word32) v20
	w31 = w0 - 0x0000005F
	NZCV = cond(w31)
	branch Test(NE,Z) l000000000047FAF0
	// succ:  l000000000047FB94 l000000000047FAF0
l000000000047FB94:
	x1 = 0x00000000004AE000
	x0 = x20
	x1 = x1 + 0xFFFFFFFFFFFFFEA0
	strcmp(x0, x1)
	sp = sp + 0xFFFFFFFFFFFFFFF8
	branch w0 == 0x00000000 l000000000047FBF0
	// succ:  l000000000047FBA8 l000000000047FBF0
l000000000047FBA8:
	x1 = 0x00000000004AF000
	x0 = x20
	x1 = x1 + 0x00000000000002A8
	strcmp(x0, x1)
	sp = sp + 0xFFFFFFFFFFFFFFF8
	branch w0 != 0x00000000 l000000000047FAF0
	// succ:  l000000000047FBBC l000000000047FAF0
l000000000047FBBC:
	v19 = sp + 16
	x19 = Mem0[v19:word64]
	v19 = v19 + 8
	x20 = Mem0[v19:word64]
	x0 = 0x00000000004C1000
	x29 = Mem0[sp:word64]
	sp = sp + 8
	x30 = Mem0[sp:word64]
	sp = sp + 32
	x0 = x0 + 0x0000000000000198
	puts(x0)
	return
	// succ:  fn000000000047FA14_exit
l000000000047FBD0:
	x1 = 0x00000000004C1000
	x2 = 0x00000000004C1000
	w0 = 0x00000001
	x1 = x1 + 0x0000000000000218
	x2 = x2 + 0x0000000000000008
	__printf_chk(x0, x1, Mem0[sp:<unknown>])
	sp = sp + 0xFFFFFFFFFFFFFFF8
	branch (w19 & 0x00000002) == 0x00000000 l000000000047FB00
	// succ:  l000000000047FBEC l000000000047FB00
l000000000047FBEC:
	goto l000000000047FA5C
	// succ:  l000000000047FA5C
l000000000047FBF0:
	v21 = sp + 16
	x19 = Mem0[v21:word64]
	v21 = v21 + 8
	x20 = Mem0[v21:word64]
	x0 = 0x00000000004C1000
	x29 = Mem0[sp:word64]
	sp = sp + 8
	x30 = Mem0[sp:word64]
	sp = sp + 32
	x0 = x0 + 0x0000000000000190
	puts(x0)
	return
	// succ:  fn000000000047FA14_exit
fn000000000047FA14_exit:


// complete_builtin
// Return size: 0
void complete_builtin()
complete_builtin_entry:
	// succ:  l000000000047FC04
l000000000047FC04:
	sp = fp
	sp = sp + -112
	Mem0[sp:word64] = x29
	sp = sp + 8
	Mem0[sp:word64] = x30
	x29 = x31 + 0x0000000000000000
	v8 = sp + 16
	Mem0[v8:word64] = x19
	v8 = v8 + 8
	Mem0[v8:word64] = x20
	v11 = sp + 32
	Mem0[v11:word64] = x21
	v11 = v11 + 8
	Mem0[v11:word64] = x22
	Mem0[sp + 48:word64] = x23
	branch x0 == 0x0000000000000000 l000000000047FD70
	// succ:  l000000000047FC1C l000000000047FD70
l000000000047FC1C:
	x2 = x29 + 0x0000000000000040
	x23 = 0x00000000004E1000
	x4 = x23 + 0xFFFFFFFFFFFFF9C8
	x2 = x2 + 24
	Mem0[x2:word64] = 0x0000000000000000
	x1 = x29 + 0x0000000000000040
	x3 = x29 + 0x0000000000000050
	Mem0[x29 + 76:word32] = 0x00000000
	Mem0[x29 + 72:word32] = 0x00000000
	Mem0[x29 + 68:word32] = 0x00000000
	Mem0[x29 + 64:word32] = 0x00000000
	Mem0[x29 + 80:word64] = 0x0000000000000000
	Mem0[x4:word64] = 0x0000000000000000
	Mem0[x4 + 8:word64] = 0x0000000000000000
	Mem0[x4 + 48:word64] = 0x0000000000000000
	Mem0[x4 + 32:word64] = 0x0000000000000000
	Mem0[x4 + 24:word64] = 0x0000000000000000
	Mem0[x4 + 40:word64] = 0x0000000000000000
	Mem0[x4 + 16:word64] = 0x0000000000000000
	call fn000000000047F63C (retsize: 0;)
	w31 = w0 - 0x00000102
	NZCV = cond(w31)
	w22 = w0
	branch Test(EQ,Z) l000000000047FD94
	// succ:  l000000000047FC74 l000000000047FD94
l000000000047FC74:
	x0 = 0x00000000004E3000
	x19 = Mem0[x0 + 3856:word64]
	w0 = Mem0[x29 + 72:word32]
	branch w0 != 0x00000000 l000000000047FD28
	// succ:  l000000000047FC84 l000000000047FD28
l000000000047FC84:
	w0 = Mem0[x29 + 76:word32]
	x21 = 0x0000000000000000
	branch w0 != 0x00000000 l000000000047FD4C
	// succ:  l000000000047FC90 l000000000047FD4C
l000000000047FC90:
	w0 = Mem0[x29 + 64:word32]
	branch w0 == 0x00000000 l000000000047FCC8
	// succ:  l000000000047FC98 l000000000047FCC8
l000000000047FC98:
	branch x21 == 0x0000000000000000 l000000000047FD08
	// succ:  l000000000047FC9C l000000000047FD08
l000000000047FC9C:
	x0 = x21
	call fn000000000047F528 (retsize: 0;)
	w20 = w0
	x0 = x21
	call dispose_words (retsize: 0;)
	w0 = w20
	// succ:  l000000000047FCB4
l000000000047FCB4:
	v24 = sp + 16
	x19 = Mem0[v24:word64]
	v24 = v24 + 8
	x20 = Mem0[v24:word64]
	v25 = sp + 32
	x21 = Mem0[v25:word64]
	v25 = v25 + 8
	x22 = Mem0[v25:word64]
	x23 = Mem0[sp + 48:word64]
	x29 = Mem0[sp:word64]
	sp = sp + 8
	x30 = Mem0[sp:word64]
	sp = sp + 112
	return
	// succ:  complete_builtin_exit
l000000000047FCC8:
	w31 = w22 - 0x00000001
	NZCV = cond(w31)
	w2 = (word32) Test(NE,Z)
	x31 = x19 - x31
	NZCV = cond(x31)
	w1 = (word32) Test(EQ,Z)
	branch w2 != 0x00000000 l000000000047FCE0
	// succ:  l000000000047FCDC l000000000047FCE0
l000000000047FCDC:
	branch w1 != 0x00000000 l000000000047FC98
	// succ:  l000000000047FCE0 l000000000047FC98
l000000000047FCE0:
	w3 = Mem0[x29 + 68:word32]
	branch w3 == 0x00000000 l000000000047FDA8
	// succ:  l000000000047FCE8 l000000000047FDA8
l000000000047FCE8:
	branch x21 == 0x0000000000000000 l000000000047FF84
	// succ:  l000000000047FCEC l000000000047FF84
l000000000047FCEC:
	x0 = x21
	call fn000000000047F5B8 (retsize: 0;)
	w20 = w0
	x0 = x21
	call dispose_words (retsize: 0;)
	w0 = w20
	goto l000000000047FCB4
	// succ:  l000000000047FCB4
l000000000047FD08:
	branch x19 == 0x0000000000000000 l000000000047FD70
	// succ:  l000000000047FD0C l000000000047FD70
l000000000047FD0C:
	x0 = x19
	call fn000000000047F528 (retsize: 0;)
	v28 = sp + 16
	x19 = Mem0[v28:word64]
	v28 = v28 + 8
	x20 = Mem0[v28:word64]
	v29 = sp + 32
	x21 = Mem0[v29:word64]
	v29 = v29 + 8
	x22 = Mem0[v29:word64]
	x23 = Mem0[sp + 48:word64]
	x29 = Mem0[sp:word64]
	sp = sp + 8
	x30 = Mem0[sp:word64]
	sp = sp + 112
	return
	// succ:  complete_builtin_exit
l000000000047FD28:
	x0 = 0x00000000004AF000
	x0 = x0 + 0x00000000000002A8
	call make_bare_word (retsize: 0;)
	x1 = 0x0000000000000000
	call make_word_list (retsize: 0;)
	x21 = x0
	w0 = Mem0[x29 + 64:word32]
	branch w0 != 0x00000000 l000000000047FC98
	// succ:  l000000000047FD48 l000000000047FC98
l000000000047FD48:
	goto l000000000047FCC8
	// succ:  l000000000047FCC8
l000000000047FD4C:
	x0 = 0x00000000004AE000
	x0 = x0 + 0xFFFFFFFFFFFFFEA0
	call make_bare_word (retsize: 0;)
	x1 = x21
	call make_word_list (retsize: 0;)
	x21 = x0
	w0 = Mem0[x29 + 64:word32]
	branch w0 != 0x00000000 l000000000047FC98
	// succ:  l000000000047FD6C l000000000047FC98
l000000000047FD6C:
	goto l000000000047FCC8
	// succ:  l000000000047FCC8
l000000000047FD70:
	x0 = 0x000000000047F000
	x0 = x0 + 0x0000000000000518
	call progcomp_walk (retsize: 0;)
	w0 = 0x00000000
	v26 = sp + 16
	x19 = Mem0[v26:word64]
	v26 = v26 + 8
	x20 = Mem0[v26:word64]
	v27 = sp + 32
	x21 = Mem0[v27:word64]
	v27 = v27 + 8
	x22 = Mem0[v27:word64]
	x23 = Mem0[sp + 48:word64]
	x29 = Mem0[sp:word64]
	sp = sp + 8
	x30 = Mem0[sp:word64]
	sp = sp + 112
	return
	// succ:  complete_builtin_exit
l000000000047FD94:
	v34 = sp + 16
	x19 = Mem0[v34:word64]
	v34 = v34 + 8
	x20 = Mem0[v34:word64]
	v35 = sp + 32
	x21 = Mem0[v35:word64]
	v35 = v35 + 8
	x22 = Mem0[v35:word64]
	x23 = Mem0[sp + 48:word64]
	x29 = Mem0[sp:word64]
	sp = sp + 8
	x30 = Mem0[sp:word64]
	sp = sp + 112
	return
	// succ:  complete_builtin_exit
l000000000047FDA8:
	branch w1 == 0x00000000 l000000000047FDB4
	// succ:  l000000000047FDAC l000000000047FDB4
l000000000047FDAC:
	branch x21 != 0x0000000000000000 l000000000047FDB4
	// succ:  l000000000047FDB0 l000000000047FDB4
l000000000047FDB0:
	branch w2 != 0x00000000 l000000000047FF70
	// succ:  l000000000047FDB4 l000000000047FF70
l000000000047FDB4:
	call compspec_create (retsize: 0;)
	x1 = Mem0[x29 + 88:word64]
	x22 = x0
	x20 = x23 + 0xFFFFFFFFFFFFF9C8
	Mem0[x22 + 8:word64] = x1
	x1 = Mem0[x29 + 80:word64]
	x0 = Mem0[x20 + 16:word64]
	Mem0[x22 + 16:word64] = x1
	branch x0 == 0x0000000000000000 l000000000047FF7C
	// succ:  l000000000047FDD8 l000000000047FF7C
l000000000047FDD8:
	strlen(x0)
	sp = sp + 0xFFFFFFFFFFFFFFF8
	x1 = 0x00000000004C1000
	x1 = x1 + 0x0000000000000128
	w2 = 0x000001A3
	x0 = x0 + 0x0000000000000001
	call sh_xmalloc (retsize: 0;)
	x1 = Mem0[x20 + 16:word64]
	strcpy(x0, x1)
	sp = sp + 0xFFFFFFFFFFFFFFF8
	x1 = x0
	// succ:  l000000000047FDFC
l000000000047FDFC:
	x20 = x23 + 0xFFFFFFFFFFFFF9C8
	x0 = Mem0[x20 + 40:word64]
	Mem0[x22 + 24:word64] = x1
	branch x0 == 0x0000000000000000 l000000000047FF94
	// succ:  l000000000047FE0C l000000000047FF94
l000000000047FE0C:
	strlen(x0)
	sp = sp + 0xFFFFFFFFFFFFFFF8
	x1 = 0x00000000004C1000
	x1 = x1 + 0x0000000000000128
	w2 = 0x000001A4
	x0 = x0 + 0x0000000000000001
	call sh_xmalloc (retsize: 0;)
	x1 = Mem0[x20 + 40:word64]
	strcpy(x0, x1)
	sp = sp + 0xFFFFFFFFFFFFFFF8
	x1 = x0
	// succ:  l000000000047FE30
l000000000047FE30:
	x20 = x23 + 0xFFFFFFFFFFFFF9C8
	x0 = Mem0[x20 + 24:word64]
	Mem0[x22 + 32:word64] = x1
	branch x0 == 0x0000000000000000 l000000000047FFB4
	// succ:  l000000000047FE40 l000000000047FFB4
l000000000047FE40:
	strlen(x0)
	sp = sp + 0xFFFFFFFFFFFFFFF8
	x1 = 0x00000000004C1000
	x1 = x1 + 0x0000000000000128
	w2 = 0x000001A5
	x0 = x0 + 0x0000000000000001
	call sh_xmalloc (retsize: 0;)
	x1 = Mem0[x20 + 24:word64]
	strcpy(x0, x1)
	sp = sp + 0xFFFFFFFFFFFFFFF8
	x1 = x0
	// succ:  l000000000047FE64
l000000000047FE64:
	x20 = x23 + 0xFFFFFFFFFFFFF9C8
	x0 = Mem0[x20 + 32:word64]
	Mem0[x22 + 40:word64] = x1
	branch x0 == 0x0000000000000000 l000000000047FFAC
	// succ:  l000000000047FE74 l000000000047FFAC
l000000000047FE74:
	strlen(x0)
	sp = sp + 0xFFFFFFFFFFFFFFF8
	x1 = 0x00000000004C1000
	x1 = x1 + 0x0000000000000128
	w2 = 0x000001A6
	x0 = x0 + 0x0000000000000001
	call sh_xmalloc (retsize: 0;)
	x1 = Mem0[x20 + 32:word64]
	strcpy(x0, x1)
	sp = sp + 0xFFFFFFFFFFFFFFF8
	x1 = x0
	// succ:  l000000000047FE98
l000000000047FE98:
	x20 = x23 + 0xFFFFFFFFFFFFF9C8
	x0 = Mem0[x20 + 8:word64]
	Mem0[x22 + 48:word64] = x1
	branch x0 == 0x0000000000000000 l000000000047FFA4
	// succ:  l000000000047FEA8 l000000000047FFA4
l000000000047FEA8:
	strlen(x0)
	sp = sp + 0xFFFFFFFFFFFFFFF8
	x1 = 0x00000000004C1000
	x1 = x1 + 0x0000000000000128
	w2 = 0x000001A7
	x0 = x0 + 0x0000000000000001
	call sh_xmalloc (retsize: 0;)
	x1 = Mem0[x20 + 8:word64]
	strcpy(x0, x1)
	sp = sp + 0xFFFFFFFFFFFFFFF8
	x1 = x0
	// succ:  l000000000047FECC
l000000000047FECC:
	x20 = x23 + 0xFFFFFFFFFFFFF9C8
	x0 = Mem0[x20:word64]
	Mem0[x22 + 56:word64] = x1
	branch x0 == 0x0000000000000000 l000000000047FF9C
	// succ:  l000000000047FEDC l000000000047FF9C
l000000000047FEDC:
	strlen(x0)
	sp = sp + 0xFFFFFFFFFFFFFFF8
	x1 = 0x00000000004C1000
	x1 = x1 + 0x0000000000000128
	w2 = 0x000001A8
	x0 = x0 + 0x0000000000000001
	call sh_xmalloc (retsize: 0;)
	x1 = Mem0[x20:word64]
	strcpy(x0, x1)
	sp = sp + 0xFFFFFFFFFFFFFFF8
	x1 = x0
	// succ:  l000000000047FF00
l000000000047FF00:
	x23 = x23 + 0xFFFFFFFFFFFFF9C8
	x0 = Mem0[x23 + 48:word64]
	Mem0[x22 + 64:word64] = x1
	branch x0 == 0x0000000000000000 l000000000047FF30
	// succ:  l000000000047FF10 l000000000047FF30
l000000000047FF10:
	strlen(x0)
	sp = sp + 0xFFFFFFFFFFFFFFF8
	x1 = 0x00000000004C1000
	x1 = x1 + 0x0000000000000128
	w2 = 0x000001A9
	x0 = x0 + 0x0000000000000001
	call sh_xmalloc (retsize: 0;)
	x1 = Mem0[x23 + 48:word64]
	strcpy(x0, x1)
	sp = sp + 0xFFFFFFFFFFFFFFF8
	// succ:  l000000000047FF30
l000000000047FF30:
	Mem0[x22 + 80:word64] = x0
	branch x21 == 0x0000000000000000 l000000000047FFBC
	// succ:  l000000000047FF38 l000000000047FFBC
l000000000047FF38:
	x19 = x21
	// succ:  l000000000047FF3C
l000000000047FF3C:
	w20 = 0x00000000
	x2 = Mem0[x19 + 8:word64]
	x1 = x22
	x0 = Mem0[x2:word64]
	call progcomp_insert (retsize: 0;)
	x19 = Mem0[x19:word64]
	NZCV = cond(w0 - w31)
l000000000047FF60:
	x0 = x21
	call dispose_words (retsize: 0;)
	w0 = w20
	goto l000000000047FCB4
	// succ:  l000000000047FCB4
l000000000047FF70:
	call builtin_usage (retsize: 0;)
	w0 = 0x00000102
	goto l000000000047FCB4
	// succ:  l000000000047FCB4
l000000000047FF7C:
	x1 = x0
	goto l000000000047FDFC
	// succ:  l000000000047FDFC
l000000000047FF84:
	branch w1 != 0x00000000 l000000000047FFC8
	// succ:  l000000000047FF88 l000000000047FFC8
l000000000047FF88:
	x0 = x19
	call fn000000000047F5B8 (retsize: 0;)
	goto l000000000047FCB4
	// succ:  l000000000047FCB4
l000000000047FF94:
	x1 = x0
	goto l000000000047FE30
	// succ:  l000000000047FE30
l000000000047FF9C:
	x1 = x0
	goto l000000000047FF00
	// succ:  l000000000047FF00
l000000000047FFA4:
	x1 = x0
	goto l000000000047FECC
	// succ:  l000000000047FECC
l000000000047FFAC:
	x1 = x0
	goto l000000000047FE98
	// succ:  l000000000047FE98
l000000000047FFB4:
	x1 = x0
	goto l000000000047FE64
	// succ:  l000000000047FE64
l000000000047FFBC:
	w20 = w21
	branch x19 == 0x0000000000000000 l000000000047FF60
	// succ:  l000000000047FFC4 l000000000047FF60
l000000000047FFC4:
	goto l000000000047FF3C
	// succ:  l000000000047FF3C
l000000000047FFC8:
	Mem0[x29 + 96:word64] = x0
	call progcomp_flush (retsize: 0;)
	x0 = Mem0[x29 + 96:word64]
	goto l000000000047FCB4
	// succ:  l000000000047FCB4
complete_builtin_exit:


// compgen_builtin
// Return size: 0
void compgen_builtin()
compgen_builtin_entry:
	// succ:  l000000000047FFD8
l000000000047FFD8:
	sp = fp
	sp = sp + -64
	Mem0[sp:word64] = x29
	sp = sp + 8
	Mem0[sp:word64] = x30
	x29 = x31 + 0x0000000000000000
	v8 = sp + 16
	Mem0[v8:word64] = x19
	v8 = v8 + 8
	Mem0[v8:word64] = x20
	v11 = sp + 32
	Mem0[v11:word64] = x21
	v11 = v11 + 8
	Mem0[v11:word64] = x22
	branch x0 == 0x0000000000000000 l00000000004802A8
	// succ:  l000000000047FFEC l00000000004802A8
l000000000047FFEC:
	x2 = x29 + 0x0000000000000030
	x20 = 0x00000000004E1000
	x1 = 0x0000000000000000
	x4 = x20 + 0xFFFFFFFFFFFFF9C8
	x2 = x2 + 8
	Mem0[x2:word64] = 0x0000000000000000
	x3 = x29 + 0x0000000000000030
	Mem0[x29 + 48:word64] = x1
	Mem0[x4:word64] = x1
	Mem0[x4 + 8:word64] = x1
	Mem0[x4 + 48:word64] = x1
	Mem0[x4 + 32:word64] = x1
	Mem0[x4 + 24:word64] = x1
	Mem0[x4 + 40:word64] = x1
	Mem0[x4 + 16:word64] = x1
	call fn000000000047F63C (retsize: 0;)
	w31 = w0 - 0x00000102
	NZCV = cond(w31)
	branch Test(EQ,Z) l0000000000480298
	// succ:  l0000000000480030 l0000000000480298
l0000000000480030:
	w31 = w0 - 0x00000001
	NZCV = cond(w31)
	branch Test(EQ,Z) l00000000004802A8
	// succ:  l0000000000480038 l00000000004802A8
l0000000000480038:
	x0 = 0x00000000004E3000
	x0 = Mem0[x0 + 3856:word64]
	branch x0 == 0x0000000000000000 l0000000000480314
	// succ:  l0000000000480044 l0000000000480314
l0000000000480044:
	x0 = Mem0[x0 + 8:word64]
	branch x0 == 0x0000000000000000 l0000000000480314
	// succ:  l000000000048004C l0000000000480314
l000000000048004C:
	x22 = Mem0[x0:word64]
	// succ:  l0000000000480050
l0000000000480050:
	x0 = x20 + 0xFFFFFFFFFFFFF9C8
	x0 = Mem0[x0 + 8:word64]
	branch x0 == 0x0000000000000000 l0000000000480074
	// succ:  l000000000048005C l0000000000480074
l000000000048005C:
	x1 = 0x00000000004C1000
	x1 = x1 + 0x0000000000000220
	w2 = 0x00000005
	x0 = 0x0000000000000000
	dcgettext(x0, x1, x2)
	sp = sp + 0xFFFFFFFFFFFFFFF8
	call builtin_error (retsize: 0;)
	// succ:  l0000000000480074
l0000000000480074:
	x0 = x20 + 0xFFFFFFFFFFFFF9C8
	x0 = Mem0[x0:word64]
	branch x0 == 0x0000000000000000 l0000000000480098
	// succ:  l0000000000480080 l0000000000480098
l0000000000480080:
	x1 = 0x00000000004C1000
	x1 = x1 + 0x0000000000000250
	w2 = 0x00000005
	x0 = 0x0000000000000000
	dcgettext(x0, x1, x2)
	sp = sp + 0xFFFFFFFFFFFFFFF8
	call builtin_error (retsize: 0;)
	// succ:  l0000000000480098
l0000000000480098:
	call compspec_create (retsize: 0;)
	x1 = Mem0[x29 + 56:word64]
	x19 = x0
	Mem0[x19 + 8:word64] = x1
	x1 = Mem0[x29 + 48:word64]
	x21 = x20 + 0xFFFFFFFFFFFFF9C8
	Mem0[x19 + 16:word64] = x1
	x0 = Mem0[x21 + 16:word64]
	w1 = 0x00000001
	Mem0[x19:word32] = w1
	branch x0 == 0x0000000000000000 l00000000004800E4
	// succ:  l00000000004800C4 l00000000004800E4
l00000000004800C4:
	strlen(x0)
	sp = sp + 0xFFFFFFFFFFFFFFF8
	x1 = 0x00000000004C1000
	x1 = x1 + 0x0000000000000128
	w2 = 0x000002C2
	x0 = x0 + 0x0000000000000001
	call sh_xmalloc (retsize: 0;)
	x1 = Mem0[x21 + 16:word64]
	strcpy(x0, x1)
	sp = sp + 0xFFFFFFFFFFFFFFF8
	// succ:  l00000000004800E4
l00000000004800E4:
	x21 = x20 + 0xFFFFFFFFFFFFF9C8
	x1 = Mem0[x21 + 40:word64]
	Mem0[x19 + 24:word64] = x0
	x0 = x1
	branch x1 == 0x0000000000000000 l0000000000480118
	// succ:  l00000000004800F8 l0000000000480118
l00000000004800F8:
	strlen(x0)
	sp = sp + 0xFFFFFFFFFFFFFFF8
	x1 = 0x00000000004C1000
	x1 = x1 + 0x0000000000000128
	w2 = 0x000002C3
	x0 = x0 + 0x0000000000000001
	call sh_xmalloc (retsize: 0;)
	x1 = Mem0[x21 + 40:word64]
	strcpy(x0, x1)
	sp = sp + 0xFFFFFFFFFFFFFFF8
	// succ:  l0000000000480118
l0000000000480118:
	x21 = x20 + 0xFFFFFFFFFFFFF9C8
	x1 = Mem0[x21 + 24:word64]
	Mem0[x19 + 32:word64] = x0
	x0 = x1
	branch x1 == 0x0000000000000000 l000000000048014C
	// succ:  l000000000048012C l000000000048014C
l000000000048012C:
	strlen(x0)
	sp = sp + 0xFFFFFFFFFFFFFFF8
	x1 = 0x00000000004C1000
	x1 = x1 + 0x0000000000000128
	w2 = 0x000002C4
	x0 = x0 + 0x0000000000000001
	call sh_xmalloc (retsize: 0;)
	x1 = Mem0[x21 + 24:word64]
	strcpy(x0, x1)
	sp = sp + 0xFFFFFFFFFFFFFFF8
	// succ:  l000000000048014C
l000000000048014C:
	x21 = x20 + 0xFFFFFFFFFFFFF9C8
	x1 = Mem0[x21 + 32:word64]
	Mem0[x19 + 40:word64] = x0
	x0 = x1
	branch x1 == 0x0000000000000000 l0000000000480180
	// succ:  l0000000000480160 l0000000000480180
l0000000000480160:
	strlen(x0)
	sp = sp + 0xFFFFFFFFFFFFFFF8
	x1 = 0x00000000004C1000
	x1 = x1 + 0x0000000000000128
	w2 = 0x000002C5
	x0 = x0 + 0x0000000000000001
	call sh_xmalloc (retsize: 0;)
	x1 = Mem0[x21 + 32:word64]
	strcpy(x0, x1)
	sp = sp + 0xFFFFFFFFFFFFFFF8
	// succ:  l0000000000480180
l0000000000480180:
	x21 = x20 + 0xFFFFFFFFFFFFF9C8
	x1 = Mem0[x21 + 8:word64]
	Mem0[x19 + 48:word64] = x0
	x0 = x1
	branch x1 == 0x0000000000000000 l00000000004801B4
	// succ:  l0000000000480194 l00000000004801B4
l0000000000480194:
	strlen(x0)
	sp = sp + 0xFFFFFFFFFFFFFFF8
	x1 = 0x00000000004C1000
	x1 = x1 + 0x0000000000000128
	w2 = 0x000002C6
	x0 = x0 + 0x0000000000000001
	call sh_xmalloc (retsize: 0;)
	x1 = Mem0[x21 + 8:word64]
	strcpy(x0, x1)
	sp = sp + 0xFFFFFFFFFFFFFFF8
	// succ:  l00000000004801B4
l00000000004801B4:
	x21 = x20 + 0xFFFFFFFFFFFFF9C8
	x1 = Mem0[x21:word64]
	Mem0[x19 + 56:word64] = x0
	x0 = x1
	branch x1 == 0x0000000000000000 l00000000004801E8
	// succ:  l00000000004801C8 l00000000004801E8
l00000000004801C8:
	strlen(x0)
	sp = sp + 0xFFFFFFFFFFFFFFF8
	x1 = 0x00000000004C1000
	x1 = x1 + 0x0000000000000128
	w2 = 0x000002C7
	x0 = x0 + 0x0000000000000001
	call sh_xmalloc (retsize: 0;)
	x1 = Mem0[x21:word64]
	strcpy(x0, x1)
	sp = sp + 0xFFFFFFFFFFFFFFF8
	// succ:  l00000000004801E8
l00000000004801E8:
	x20 = x20 + 0xFFFFFFFFFFFFF9C8
	x1 = Mem0[x20 + 48:word64]
	Mem0[x19 + 64:word64] = x0
	x0 = x1
	branch x1 == 0x0000000000000000 l000000000048021C
	// succ:  l00000000004801FC l000000000048021C
l00000000004801FC:
	strlen(x0)
	sp = sp + 0xFFFFFFFFFFFFFFF8
	x1 = 0x00000000004C1000
	x1 = x1 + 0x0000000000000128
	w2 = 0x000002C8
	x0 = x0 + 0x0000000000000001
	call sh_xmalloc (retsize: 0;)
	x1 = Mem0[x20 + 48:word64]
	strcpy(x0, x1)
	sp = sp + 0xFFFFFFFFFFFFFFF8
	// succ:  l000000000048021C
l000000000048021C:
	w3 = 0x00000000
	x1 = 0x00000000004BD000
	Mem0[x19 + 80:word64] = x0
	x1 = x1 + 0xFFFFFFFFFFFFFE80
	x0 = x19
	x2 = x22
	w4 = w3
	x5 = 0x0000000000000000
	call gen_compspec_completions (retsize: 0;)
	x20 = x0
	branch x0 == 0x0000000000000000 l0000000000480250
	// succ:  l0000000000480248 l0000000000480250
l0000000000480248:
	w0 = Mem0[x0 + 12:word32]
	branch w0 != 0x00000000 l0000000000480270
	// succ:  l0000000000480250 l0000000000480270
l0000000000480250:
	x0 = Mem0[x29 + 48:word64]
	branch (w0 & 0x00000020) == 0x00000000 l00000000004802E4
	// succ:  l0000000000480258 l00000000004802E4
l0000000000480258:
	branch x20 == 0x0000000000000000 l0000000000480264
	// succ:  l000000000048025C l0000000000480264
l000000000048025C:
	w0 = Mem0[x20 + 12:word32]
	branch w0 != 0x00000000 l0000000000480270
	// succ:  l0000000000480264 l0000000000480270
l0000000000480264:
	x0 = Mem0[x29 + 48:word64]
	branch (w0 & 0x00000002) == 0x00000000 l00000000004802BC
	// succ:  l000000000048026C l00000000004802BC
l000000000048026C:
	branch x20 == 0x0000000000000000 l0000000000480334
	// succ:  l0000000000480270 l0000000000480334
l0000000000480270:
	x0 = Mem0[x20:word64]
	branch x0 == 0x0000000000000000 l000000000048033C
	// succ:  l0000000000480278 l000000000048033C
l0000000000480278:
	w0 = Mem0[x20 + 12:word32]
	w21 = 0x00000001
	branch w0 != 0x00000000 l0000000000480320
	// succ:  l0000000000480284 l0000000000480320
l0000000000480284:
	x0 = x20
	call strlist_dispose (retsize: 0;)
	// succ:  l000000000048028C
l000000000048028C:
	x0 = x19
	call compspec_dispose (retsize: 0;)
	w0 = w21
	// succ:  l0000000000480298
l0000000000480298:
	v25 = sp + 16
	x19 = Mem0[v25:word64]
	v25 = v25 + 8
	x20 = Mem0[v25:word64]
	v26 = sp + 32
	x21 = Mem0[v26:word64]
	v26 = v26 + 8
	x22 = Mem0[v26:word64]
	x29 = Mem0[sp:word64]
	sp = sp + 8
	x30 = Mem0[sp:word64]
	sp = sp + 64
	return
	// succ:  compgen_builtin_exit
l00000000004802A8:
	w0 = 0x00000000
	v22 = sp + 16
	x19 = Mem0[v22:word64]
	v22 = v22 + 8
	x20 = Mem0[v22:word64]
	v23 = sp + 32
	x21 = Mem0[v23:word64]
	v23 = v23 + 8
	x22 = Mem0[v23:word64]
	x29 = Mem0[sp:word64]
	sp = sp + 8
	x30 = Mem0[sp:word64]
	sp = sp + 64
	return
	// succ:  compgen_builtin_exit
l00000000004802BC:
	x1 = 0x0000000000491000
	x1 = x1 + 0x000000000000053C
	x0 = x22
	call rl_completion_matches (retsize: 0;)
	x21 = x0
	call completions_to_stringlist (retsize: 0;)
	x20 = x0
	x0 = x21
	call strvec_dispose (retsize: 0;)
	goto l000000000048026C
	// succ:  l000000000048026C
l00000000004802E4:
	w1 = 0x00000000
	w2 = w1
	w3 = w1
	w4 = w1
	x0 = x22
	call bash_default_completion (retsize: 0;)
	x21 = x0
	call completions_to_stringlist (retsize: 0;)
	x20 = x0
	x0 = x21
	call strvec_dispose (retsize: 0;)
	goto l0000000000480258
	// succ:  l0000000000480258
l0000000000480314:
	x22 = 0x00000000004AC000
	x22 = x22 + 0x0000000000000460
	goto l0000000000480050
	// succ:  l0000000000480050
l0000000000480320:
	x0 = x20
	x1 = 0x0000000000000000
	call strlist_print (retsize: 0;)
	w21 = 0x00000000
	goto l0000000000480284
	// succ:  l0000000000480284
l0000000000480334:
	w21 = 0x00000001
	goto l000000000048028C
	// succ:  l000000000048028C
l000000000048033C:
	w21 = 0x00000001
	goto l0000000000480284
	// succ:  l0000000000480284
compgen_builtin_exit:


// compopt_builtin
// Return size: 0
void compopt_builtin()
compopt_builtin_entry:
	// succ:  l0000000000480344
l0000000000480344:
	sp = fp
	sp = sp + -112
	Mem0[sp:word64] = x29
	sp = sp + 8
	Mem0[sp:word64] = x30
	x29 = x31 + 0x0000000000000000
	v8 = sp + 32
	Mem0[v8:word64] = x21
	v8 = v8 + 8
	Mem0[v8:word64] = x22
	v11 = sp + 64
	Mem0[v11:word64] = x25
	v11 = v11 + 8
	Mem0[v11:word64] = x26
	v14 = sp + 16
	Mem0[v14:word64] = x19
	v14 = v14 + 8
	Mem0[v14:word64] = x20
	v17 = sp + 48
	Mem0[v17:word64] = x23
	v17 = v17 + 8
	Mem0[v17:word64] = x24
	x21 = x0
	Mem0[sp + 80:word64] = x27
	Mem0[x29 + 96:word32] = 0x00000000
	Mem0[x29 + 100:word32] = 0x00000000
	call reset_internal_getopt (retsize: 0;)
	w24 = 0x00000000
	x20 = 0x00000000004C1000
	x22 = 0x00000000004E3000
	x0 = 0x00000000004C0000
	w25 = w24
	x20 = x20 + 0x0000000000000280
	x22 = x22 + 0xFFFFFFFFFFFFFF18
	x26 = x0 + 0xFFFFFFFFFFFFFE08
	// succ:  l0000000000480390
l0000000000480390:
	x0 = x21
	x1 = x20
	call internal_getopt (retsize: 0;)
	w31 = w0 + 0x00000001
	NZCV = cond(w31)
	branch Test(EQ,Z) l000000000048041C
	// succ:  l00000000004803A4 l000000000048041C
l00000000004803A4:
	w2 = Mem0[x22:word32]
	w31 = w2 - 0x0000002D
	NZCV = cond(w31)
	branch Test(EQ,Z) l00000000004803F4
	// succ:  l00000000004803B0 l00000000004803F4
l00000000004803B0:
	w31 = w0 - 0x00000045
	NZCV = cond(w31)
	w23 = Mem0[x29 + 96:word32]
	x19 = x29 + 0x0000000000000060
	branch Test(EQ,Z) l0000000000480404
	// succ:  l00000000004803C0 l0000000000480404
l00000000004803C0:
	w31 = w0 - 0x0000006F
	NZCV = cond(w31)
	branch Test(EQ,Z) l00000000004804A4
	// succ:  l00000000004803C8 l00000000004804A4
l00000000004803C8:
	w31 = w0 - 0x00000044
	NZCV = cond(w31)
	branch Test(EQ,Z) l000000000048049C
	// succ:  l00000000004803D0 l000000000048049C
l00000000004803D0:
	call builtin_usage (retsize: 0;)
	w0 = 0x00000102
	// succ:  l00000000004803D8
l00000000004803D8:
	v29 = sp + 16
	x19 = Mem0[v29:word64]
	v29 = v29 + 8
	x20 = Mem0[v29:word64]
	v30 = sp + 32
	x21 = Mem0[v30:word64]
	v30 = v30 + 8
	x22 = Mem0[v30:word64]
	v31 = sp + 48
	x23 = Mem0[v31:word64]
	v31 = v31 + 8
	x24 = Mem0[v31:word64]
	v32 = sp + 64
	x25 = Mem0[v32:word64]
	v32 = v32 + 8
	x26 = Mem0[v32:word64]
	x27 = Mem0[sp + 80:word64]
	x29 = Mem0[sp:word64]
	sp = sp + 8
	x30 = Mem0[sp:word64]
	sp = sp + 112
	return
	// succ:  compopt_builtin_exit
l00000000004803F4:
	x19 = x29 + 0x0000000000000060
	w31 = w0 - 0x00000045
	NZCV = cond(w31)
	x19 = x19 + 4
	w23 = Mem0[x19:word32]
	branch Test(NE,Z) l00000000004803C0
	// succ:  l0000000000480404 l00000000004803C0
l0000000000480404:
	x0 = x21
	x1 = x20
	call internal_getopt (retsize: 0;)
	w31 = w0 + 0x00000001
	NZCV = cond(w31)
	w24 = 0x00000001
	branch Test(NE,Z) l00000000004803A4
	// succ:  l000000000048041C l00000000004803A4
l000000000048041C:
	x0 = 0x00000000004E3000
	x20 = Mem0[x0 + 3856:word64]
	branch w25 != 0x00000000 l00000000004804EC
	// succ:  l0000000000480428 l00000000004804EC
l0000000000480428:
	branch w24 != 0x00000000 l00000000004805B4
	// succ:  l000000000048042C l00000000004805B4
l000000000048042C:
	branch x20 != 0x0000000000000000 l0000000000480604
	// succ:  l0000000000480430 l0000000000480604
l0000000000480430:
	x0 = 0x00000000004E1000
	w0 = Mem0[x0 + 3168:word32]
	branch (w0 & 0x00004000) == 0x00000000 l00000000004804CC
	// succ:  l000000000048043C l00000000004804CC
l000000000048043C:
	x0 = 0x00000000004E3000
	x19 = Mem0[x0 + 3496:word64]
	branch x19 == 0x0000000000000000 l00000000004804CC
	// succ:  l0000000000480448 l00000000004804CC
l0000000000480448:
	w20 = Mem0[x29 + 100:word32]
	branch w20 != 0x00000000 l000000000048060C
	// succ:  l0000000000480450 l000000000048060C
l0000000000480450:
	w22 = Mem0[x29 + 96:word32]
	w21 = w22
	branch w22 == 0x00000000 l00000000004805D0
	// succ:  l000000000048045C l00000000004805D0
l000000000048045C:
	w2 = 0x00000001
	x0 = x19
	w1 = w20
	call pcomp_set_compspec_options (retsize: 0;)
	x0 = x19
	w1 = w21
	w2 = 0x00000000
	call pcomp_set_compspec_options (retsize: 0;)
	w0 = w20
	w1 = 0x00000001
	call pcomp_set_readline_variables (retsize: 0;)
	w0 = w21
	w1 = 0x00000000
	call pcomp_set_readline_variables (retsize: 0;)
	// succ:  l0000000000480494
l0000000000480494:
	w0 = 0x00000000
	goto l00000000004803D8
	// succ:  l00000000004803D8
l000000000048049C:
	w25 = 0x00000001
	goto l0000000000480390
	// succ:  l0000000000480390
l00000000004804A4:
	x0 = 0x00000000004E3000
	x27 = Mem0[x0 + 3840:word64]
	x0 = x27
	call fn000000000047EE34 (retsize: 0;)
	branch (w0 & 0x00000000) == 0x00000000 l00000000004805A4
	// succ:  l00000000004804B8 l00000000004805A4
l00000000004804B8:
	x0 = x26 + (int64) ((int32) w0)
	w0 = Mem0[x0 + 8:word32]
	w23 = w23 | w0
	Mem0[x19:word32] = w23
	goto l0000000000480390
	// succ:  l0000000000480390
l00000000004804CC:
	x1 = 0x00000000004C1000
	x1 = x1 + 0x0000000000000288
	w2 = 0x00000005
	x0 = 0x0000000000000000
	dcgettext(x0, x1, x2)
	sp = sp + 0xFFFFFFFFFFFFFFF8
	call builtin_error (retsize: 0;)
	w0 = 0x00000001
	goto l00000000004803D8
	// succ:  l00000000004803D8
l00000000004804EC:
	x0 = 0x00000000004AF000
	x0 = x0 + 0x00000000000002A8
	call make_bare_word (retsize: 0;)
	x1 = 0x0000000000000000
	call make_word_list (retsize: 0;)
	x19 = x0
	// succ:  l0000000000480504
l0000000000480504:
	branch x19 != 0x0000000000000000 l000000000048050C
	// succ:  l0000000000480508 l000000000048050C
l0000000000480508:
	branch x20 == 0x0000000000000000 l0000000000480430
	// succ:  l000000000048050C l0000000000480430
l000000000048050C:
	branch x19 == 0x0000000000000000 l0000000000480600
	// succ:  l0000000000480510 l0000000000480600
l0000000000480510:
	x0 = 0x00000000004C1000
	w22 = 0x00000000
	x23 = x0 + 0x00000000000001A0
	goto l000000000048053C
	// succ:  l000000000048053C
l0000000000480520:
	call pcomp_set_compspec_options (retsize: 0;)
	x0 = x20
	w1 = w21
	w2 = 0x00000000
	call pcomp_set_compspec_options (retsize: 0;)
	// succ:  l0000000000480534
l0000000000480534:
	x19 = Mem0[x19:word64]
	branch x19 == 0x0000000000000000 l000000000048057C
	// succ:  l000000000048053C l000000000048057C
l000000000048053C:
	x2 = Mem0[x19 + 8:word64]
	x0 = Mem0[x2:word64]
	call progcomp_search (retsize: 0;)
	x20 = x0
	w2 = 0x00000001
	branch x0 == 0x0000000000000000 l0000000000480584
	// succ:  l0000000000480554 l0000000000480584
l0000000000480554:
	w3 = Mem0[x29 + 100:word32]
	w21 = Mem0[x29 + 96:word32]
	w1 = w3
	branch w3 != 0x00000000 l0000000000480520
	// succ:  l0000000000480564 l0000000000480520
l0000000000480564:
	branch w21 != 0x00000000 l0000000000480520
	// succ:  l0000000000480568 l0000000000480520
l0000000000480568:
	x2 = Mem0[x19 + 8:word64]
	x1 = x20 + 0x0000000000000010
	x0 = Mem0[x2:word64]
	call fn000000000047FA14 (retsize: 0;)
	goto l0000000000480534
	// succ:  l0000000000480534
l000000000048057C:
	w0 = w22
	goto l00000000004803D8
	// succ:  l00000000004803D8
l0000000000480584:
	x1 = x23
	w2 = 0x00000005
	dcgettext(x0, x1, x2)
	sp = sp + 0xFFFFFFFFFFFFFFF8
	x1 = Mem0[x19 + 8:word64]
	w22 = 0x00000001
	x1 = Mem0[x1:word64]
	call builtin_error (retsize: 0;)
	goto l0000000000480534
	// succ:  l0000000000480534
l00000000004805A4:
	x0 = x27
	call sh_invalidoptname (retsize: 0;)
	w0 = 0x00000102
	goto l00000000004803D8
	// succ:  l00000000004803D8
l00000000004805B4:
	x0 = 0x00000000004AE000
	x0 = x0 + 0xFFFFFFFFFFFFFEA0
	call make_bare_word (retsize: 0;)
	x1 = 0x0000000000000000
	call make_word_list (retsize: 0;)
	x19 = x0
	goto l0000000000480504
	// succ:  l0000000000480504
l00000000004805D0:
	x0 = 0x00000000004E3000
	x0 = Mem0[x0 + 3488:word64]
	x1 = x19 + 0x0000000000000010
	call fn000000000047FA14 (retsize: 0;)
	w0 = w22
	v38 = sp + 16
	x19 = Mem0[v38:word64]
	v38 = v38 + 8
	x20 = Mem0[v38:word64]
	v39 = sp + 32
	x21 = Mem0[v39:word64]
	v39 = v39 + 8
	x22 = Mem0[v39:word64]
	v40 = sp + 48
	x23 = Mem0[v40:word64]
	v40 = v40 + 8
	x24 = Mem0[v40:word64]
	v41 = sp + 64
	x25 = Mem0[v41:word64]
	v41 = v41 + 8
	x26 = Mem0[v41:word64]
	x27 = Mem0[sp + 80:word64]
	x29 = Mem0[sp:word64]
	sp = sp + 8
	x30 = Mem0[sp:word64]
	sp = sp + 112
	// succ:  l00000000004805FC_thunk_sh_chkwrite
l00000000004805FC_thunk_sh_chkwrite:
	call sh_chkwrite (retsize: 0;)
	return
	// succ:  compopt_builtin_exit
l0000000000480600:
	branch x20 == 0x0000000000000000 l0000000000480494
	// succ:  l0000000000480604 l0000000000480494
l0000000000480604:
	x19 = x20
	goto l0000000000480510
	// succ:  l0000000000480510
l000000000048060C:
	w21 = Mem0[x29 + 96:word32]
	goto l000000000048045C
	// succ:  l000000000048045C
compopt_builtin_exit:


// fn0000000000480614
// Return size: 0
void fn0000000000480614()
fn0000000000480614_entry:
	// succ:  l0000000000480614
l0000000000480614:
	sp = fp
	x3 = 0x00000000004C1000
	v6 = Mem0[x0:byte]
	w1 = (word32) v6
	w4 = 0x00000000
	x3 = x3 + 0x00000000000002E8
	x2 = x0 + 0x0000000000000001
	branch w1 == 0x00000000 l0000000000480648
	// succ:  l000000000048062C l0000000000480648
l000000000048062C:
	w1 = w1 - 0x00000021
	w31 = w1 - 0x0000003C
	NZCV = cond(w31)
	branch Test(ULE,ZC) l0000000000480650
	// succ:  l0000000000480638 l0000000000480650
l0000000000480638:
	v12 = Mem0[x0 + 1:byte]
	w1 = (word32) v12
	x0 = x2
	x2 = x0 + 0x0000000000000001
	branch w1 != 0x00000000 l000000000048062C
	// succ:  l0000000000480648 l000000000048062C
l0000000000480648:
	w0 = w1
	return
	// succ:  fn0000000000480614_exit
l0000000000480650:
	v15 = Mem0[x3 + (uint64) ((uint32) w1):byte]
	w5 = (word32) v15
	x6 = 0x0000000000480660
	x5 = x6 + (int64) ((int8) w5)
	call x5 (retsize: 0;)
	return
	// succ:  fn0000000000480614_exit
fn0000000000480614_exit:


// fn00000000004806A8
// Return size: 0
void fn00000000004806A8()
fn00000000004806A8_entry:
	// succ:  l00000000004806A8
l00000000004806A8:
	sp = fp
	branch x0 == 0x0000000000000000 l0000000000480700
	// succ:  l00000000004806AC l0000000000480700
l00000000004806AC:
	v5 = Mem0[x0:byte]
	w3 = (word32) v5
	branch w3 == 0x00000000 l0000000000480704
	// succ:  l00000000004806B4 l0000000000480704
l00000000004806B4:
	x2 = 0x0000000000000000
	w1 = w2
	// succ:  l00000000004806D0
l00000000004806D0:
	w31 = w3 - 0x0000005C
	NZCV = cond(w31)
l0000000000480700:
	return
	// succ:  fn00000000004806A8_exit
l0000000000480704:
	x5 = 0x0000000000000000
	Mem0[x0 + x5:byte] = 0x00
	goto l0000000000480700
	// succ:  l0000000000480700
fn00000000004806A8_exit:


// fn0000000000480710
// Return size: 0
void fn0000000000480710()
fn0000000000480710_entry:
	// succ:  l0000000000480710
l0000000000480710:
	sp = fp
	sp = sp + -144
	Mem0[sp:word64] = x29
	sp = sp + 8
	Mem0[sp:word64] = x30
	x29 = x31 + 0x0000000000000000
	x1 = x0
	w0 = 0x00000000
	x2 = x29 + 0x0000000000000010
	__xstat(x0, x1, x2)
	sp = sp + 0xFFFFFFFFFFFFFFF8
	branch (w0 & 0x00000000) == 0x00000000 l0000000000480744
	// succ:  l000000000048072C l0000000000480744
l000000000048072C:
	w0 = Mem0[x29 + 32:word32]
	w0 = w0 & 0x0000F000
	w31 = w0 - (0x00000004 << 12)
	NZCV = cond(w31)
l000000000048073C:
	x29 = Mem0[sp:word64]
	sp = sp + 8
	x30 = Mem0[sp:word64]
	sp = sp + 144
	return
	// succ:  fn0000000000480710_exit
l0000000000480744:
	w0 = 0xFFFFFFFF
	goto l000000000048073C
	// succ:  l000000000048073C
fn0000000000480710_exit:


// fn000000000048074C
// Return size: 0
void fn000000000048074C()
fn000000000048074C_entry:
	// succ:  l000000000048074C
l000000000048074C:
	sp = fp
	sp = sp + -256
	Mem0[sp:word64] = x29
	sp = sp + 8
	Mem0[sp:word64] = x30
	x29 = x31 + 0x0000000000000000
	v8 = sp + 16
	Mem0[v8:word64] = x19
	v8 = v8 + 8
	Mem0[v8:word64] = x20
	v11 = sp + 48
	Mem0[v11:word64] = x23
	v11 = v11 + 8
	Mem0[v11:word64] = x24
	v14 = sp + 64
	Mem0[v14:word64] = x25
	v14 = v14 + 8
	Mem0[v14:word64] = x26
	v17 = sp + 80
	Mem0[v17:word64] = x27
	v17 = v17 + 8
	Mem0[v17:word64] = x28
	v20 = sp + 32
	Mem0[v20:word64] = x21
	v20 = v20 + 8
	Mem0[v20:word64] = x22
	x27 = x0
	x19 = x1
	w26 = w2
	strlen(x0)
	sp = sp + 0xFFFFFFFFFFFFFFF8
	x24 = x0
	branch w0 != 0x00000000 l0000000000480834
	// succ:  l0000000000480780 l0000000000480834
l0000000000480780:
	branch (w26 & 0x00000001) == 0x00000000 l0000000000480814
	// succ:  l0000000000480784 l0000000000480814
l0000000000480784:
	x1 = Mem0[x19:word64]
	branch x1 == 0x0000000000000000 l0000000000480814
	// succ:  l000000000048078C l0000000000480814
l000000000048078C:
	x22 = x19
	w20 = w24
	w25 = 0x0000002F
	goto l00000000004807AC
	// succ:  l00000000004807AC
l000000000048079C:
l00000000004807AC:
	x2 = x29 + 0x0000000000000060
	w0 = 0x00000000
	__xstat(x0, x1, x2)
	sp = sp + 0xFFFFFFFFFFFFFFF8
	w20 = w20 + 0x00000001
	w21 = w0
	branch w0 != 0x00000000 l000000000048079C
	// succ:  l00000000004807C4 l000000000048079C
l00000000004807C4:
	w0 = Mem0[x29 + 112:word32]
	w0 = w0 & 0x0000F000
	w31 = w0 - (0x00000004 << 12)
	NZCV = cond(w31)
	branch Test(NE,Z) l000000000048079C
	// succ:  l00000000004807D4 l000000000048079C
l00000000004807D4:
	x24 = Mem0[x22:word64]
	x0 = x24
	strlen(x0)
	sp = sp + 0xFFFFFFFFFFFFFFF8
	x23 = x0
	w1 = w23 + 0x00000002
	x0 = x24
	call realloc (retsize: 0;)
	w1 = w23 + 0x00000001
	branch x0 == 0x0000000000000000 l00000000004809BC
	// succ:  l00000000004807F8 l00000000004809BC
l00000000004807F8:
	Mem0[x0 + (uint64) ((uint32) w23):byte] = (byte) w25
	Mem0[x0 + x1:byte] = (byte) w21
	Mem0[x22:word64] = x0
l0000000000480814:
	x0 = x19
	v43 = sp + 32
	x21 = Mem0[v43:word64]
	v43 = v43 + 8
	x22 = Mem0[v43:word64]
	v44 = sp + 16
	x19 = Mem0[v44:word64]
	v44 = v44 + 8
	x20 = Mem0[v44:word64]
	v45 = sp + 48
	x23 = Mem0[v45:word64]
	v45 = v45 + 8
	x24 = Mem0[v45:word64]
	v46 = sp + 64
	x25 = Mem0[v46:word64]
	v46 = v46 + 8
	x26 = Mem0[v46:word64]
	v47 = sp + 80
	x27 = Mem0[v47:word64]
	v47 = v47 + 8
	x28 = Mem0[v47:word64]
	x29 = Mem0[sp:word64]
	sp = sp + 8
	x30 = Mem0[sp:word64]
	sp = sp + 256
	return
	// succ:  fn000000000048074C_exit
l0000000000480834:
	w0 = w0 - 0x00000001
	v29 = Mem0[x27 + x0:byte]
	w0 = (word32) v29
	x21 = Mem0[x19:word64]
	w31 = w0 - 0x0000002F
	NZCV = cond(w31)
	w25 = (word32) Test(NE,Z)
	branch x21 == 0x0000000000000000 l00000000004809DC
	// succ:  l000000000048084C l00000000004809DC
l000000000048084C:
	w3 = 0x00000000
	// succ:  l0000000000480850
l0000000000480850:
	w3 = w3 + 0x00000001
	x20 = Mem0[x19 + (uint64) ((uint32) w3):word64]
	branch x20 != 0x0000000000000000 l0000000000480850
	// succ:  l000000000048085C l0000000000480850
l000000000048085C:
	w0 = w3 + 0x00000001
l000000000048095C:
	Mem0[x23 + x20:word64] = 0x0000000000000000
	x0 = Mem0[x19:word64]
	x22 = 0x00000000004C1000
	w20 = 0x00000000
	x21 = x22 + 0x0000000000000368
	branch x0 == 0x0000000000000000 l000000000048098C
	// succ:  l0000000000480974 l000000000048098C
l0000000000480974:
	x1 = x21
	w2 = 0x00000347
	w20 = w20 + 0x00000001
	call sh_xfree (retsize: 0;)
	x0 = Mem0[x19 + (uint64) ((uint32) w20):word64]
	branch x0 != 0x0000000000000000 l0000000000480974
	// succ:  l000000000048098C l0000000000480974
l000000000048098C:
	x0 = x19
	x1 = x22 + 0x0000000000000368
	w2 = 0x00000348
	call sh_xfree (retsize: 0;)
	x0 = x23
	v48 = sp + 16
	x19 = Mem0[v48:word64]
	v48 = v48 + 8
	x20 = Mem0[v48:word64]
	v49 = sp + 32
	x21 = Mem0[v49:word64]
	v49 = v49 + 8
	x22 = Mem0[v49:word64]
	v50 = sp + 48
	x23 = Mem0[v50:word64]
	v50 = v50 + 8
	x24 = Mem0[v50:word64]
	v51 = sp + 64
	x25 = Mem0[v51:word64]
	v51 = v51 + 8
	x26 = Mem0[v51:word64]
	v52 = sp + 80
	x27 = Mem0[v52:word64]
	v52 = v52 + 8
	x28 = Mem0[v52:word64]
	x29 = Mem0[sp:word64]
	sp = sp + 8
	x30 = Mem0[sp:word64]
	sp = sp + 256
	return
	// succ:  fn000000000048074C_exit
l00000000004809BC:
	x0 = 0x0000000000000000
	v38 = sp + 16
	x19 = Mem0[v38:word64]
	v38 = v38 + 8
	x20 = Mem0[v38:word64]
	v39 = sp + 32
	x21 = Mem0[v39:word64]
	v39 = v39 + 8
	x22 = Mem0[v39:word64]
	v40 = sp + 48
	x23 = Mem0[v40:word64]
	v40 = v40 + 8
	x24 = Mem0[v40:word64]
	v41 = sp + 64
	x25 = Mem0[v41:word64]
	v41 = v41 + 8
	x26 = Mem0[v41:word64]
	v42 = sp + 80
	x27 = Mem0[v42:word64]
	v42 = v42 + 8
	x28 = Mem0[v42:word64]
	x29 = Mem0[sp:word64]
	sp = sp + 8
	x30 = Mem0[sp:word64]
	sp = sp + 256
	return
	// succ:  fn000000000048074C_exit
l00000000004809DC:
	x0 = 0x0000000000000008
	call malloc (retsize: 0;)
	x23 = x0
	branch x0 == 0x0000000000000000 l00000000004809BC
	// succ:  l00000000004809EC l00000000004809BC
l00000000004809EC:
	x20 = x21
	goto l000000000048095C
	// succ:  l000000000048095C
fn000000000048074C_exit:


// fn0000000000480AA0
// Return size: 0
void fn0000000000480AA0()
fn0000000000480AA0_entry:
	// succ:  l0000000000480AA0
l0000000000480AA0:
	sp = fp
	sp = sp + -64
	Mem0[sp:word64] = x29
	sp = sp + 8
	Mem0[sp:word64] = x30
	x29 = x31 + 0x0000000000000000
	v8 = sp + 16
	Mem0[v8:word64] = x19
	v8 = v8 + 8
	Mem0[v8:word64] = x20
	Mem0[sp + 32:word64] = x21
	x20 = x0
	__ctype_get_mb_cur_max()
	sp = sp + 0xFFFFFFFFFFFFFFF8
	x31 = x0 - 0x0000000000000001
	NZCV = cond(x31)
	x0 = x20
	branch Test(ULE,ZC) l0000000000480B84
	// succ:  l0000000000480AC4 l0000000000480B84
l0000000000480AC4:
	strlen(x0)
	sp = sp + 0xFFFFFFFFFFFFFFF8
	x21 = x0
	x1 = 0x0000000000000000
	x0 = x29 + 0x0000000000000030
	x2 = x20
	call xdupmbstowcs (retsize: 0;)
	x31 = x0 + 0x0000000000000001
	NZCV = cond(x31)
	branch Test(EQ,Z) l0000000000480B98
	// succ:  l0000000000480AE4 l0000000000480B98
l0000000000480AE4:
	x19 = Mem0[x29 + 48:word64]
	branch x19 == 0x0000000000000000 l0000000000480B44
	// succ:  l0000000000480AEC l0000000000480B44
l0000000000480AEC:
	w3 = Mem0[x19:word32]
	branch w3 == 0x00000000 l0000000000480BA4
	// succ:  l0000000000480AF4 l0000000000480BA4
l0000000000480AF4:
	w5 = 0x00000000
	x4 = x19
	w1 = w5
	x8 = 0x0000000000000004
	// succ:  l0000000000480B14
l0000000000480B14:
	w31 = w3 - 0x0000005C
	NZCV = cond(w31)
l0000000000480B44:
	x1 = x29 + 0x0000000000000030
	x2 = x21
	x0 = x20
	x3 = x29 + 0x0000000000000038
	Mem0[x29 + 56:word64] = 0x0000000000000000
	call wcsrtombs (retsize: 0;)
	x1 = 0x00000000004C1000
	Mem0[x20 + x21:byte] = 0x00
	x0 = x19
	x1 = x1 + 0x0000000000000368
	w2 = 0x0000012C
	call sh_xfree (retsize: 0;)
	// succ:  l0000000000480B74
l0000000000480B74:
	v26 = sp + 16
	x19 = Mem0[v26:word64]
	v26 = v26 + 8
	x20 = Mem0[v26:word64]
	x21 = Mem0[sp + 32:word64]
	x29 = Mem0[sp:word64]
	sp = sp + 8
	x30 = Mem0[sp:word64]
	sp = sp + 64
	return
	// succ:  fn0000000000480AA0_exit
l0000000000480B84:
	call fn00000000004806A8 (retsize: 0;)
	v21 = sp + 16
	x19 = Mem0[v21:word64]
	v21 = v21 + 8
	x20 = Mem0[v21:word64]
	x21 = Mem0[sp + 32:word64]
	x29 = Mem0[sp:word64]
	sp = sp + 8
	x30 = Mem0[sp:word64]
	sp = sp + 64
	return
	// succ:  fn0000000000480AA0_exit
l0000000000480B98:
	x0 = x20
	call fn00000000004806A8 (retsize: 0;)
	goto l0000000000480B74
	// succ:  l0000000000480B74
l0000000000480BA4:
	x5 = 0x0000000000000000
	Mem0[x19 + x5:word32] = 0x00000000
	goto l0000000000480B44
	// succ:  l0000000000480B44
fn0000000000480AA0_exit:


// glob_pattern_p
// Return size: 0
void glob_pattern_p()
glob_pattern_p_entry:
	// succ:  l0000000000480BB0
l0000000000480BB0:
	sp = fp
	sp = sp + -48
	Mem0[sp:word64] = x29
	sp = sp + 8
	Mem0[sp:word64] = x30
	x29 = x31 + 0x0000000000000000
	Mem0[sp + 16:word64] = x19
	x19 = x0
	__ctype_get_mb_cur_max()
	sp = sp + 0xFFFFFFFFFFFFFFF8
	x31 = x0 - 0x0000000000000001
	NZCV = cond(x31)
	branch Test(EQ,Z) l0000000000480CA0
	// succ:  l0000000000480BCC l0000000000480CA0
l0000000000480BCC:
	x0 = x29 + 0x0000000000000020
	x1 = 0x0000000000000000
	x2 = x19
	call xdupmbstowcs (retsize: 0;)
	x31 = x0 + 0x0000000000000001
	NZCV = cond(x31)
	branch Test(EQ,Z) l0000000000480CA0
	// succ:  l0000000000480BE4 l0000000000480CA0
l0000000000480BE4:
	x4 = Mem0[x29 + 32:word64]
	x0 = 0x00000000004C1000
	w2 = Mem0[x4:word32]
	x1 = x4
	w5 = 0x00000000
	x0 = x0 + 0x0000000000000328
	x3 = x1 + 0x0000000000000004
	branch w2 == 0x00000000 l0000000000480C20
	// succ:  l0000000000480C04 l0000000000480C20
l0000000000480C04:
	w2 = w2 - 0x00000021
	w31 = w2 - 0x0000003C
	NZCV = cond(w31)
	branch Test(ULE,ZC) l0000000000480C28
	// succ:  l0000000000480C10 l0000000000480C28
l0000000000480C10:
	w2 = Mem0[x1 + 4:word32]
	x1 = x3
	x3 = x1 + 0x0000000000000004
	branch w2 != 0x00000000 l0000000000480C04
	// succ:  l0000000000480C20 l0000000000480C04
l0000000000480C20:
	w19 = w2
	goto l0000000000480C40
	// succ:  l0000000000480C40
l0000000000480C28:
	v21 = Mem0[x0 + (uint64) ((uint32) w2):byte]
	w6 = (word32) v21
	x7 = 0x0000000000480C38
	x6 = x7 + (int64) ((int8) w6)
	call x6 (retsize: 0;)
	return
	// succ:  glob_pattern_p_exit
l0000000000480C40:
	x1 = 0x00000000004C1000
	x0 = x4
	x1 = x1 + 0x0000000000000368
	w2 = 0x0000009D
	call sh_xfree (retsize: 0;)
	w0 = w19
	x19 = Mem0[sp + 16:word64]
	x29 = Mem0[sp:word64]
	sp = sp + 8
	x30 = Mem0[sp:word64]
	sp = sp + 48
	return
	// succ:  glob_pattern_p_exit
l0000000000480CA0:
	x0 = x19
	call fn0000000000480614 (retsize: 0;)
	w19 = w0
	w0 = w19
	x19 = Mem0[sp + 16:word64]
	x29 = Mem0[sp:word64]
	sp = sp + 8
	x30 = Mem0[sp:word64]
	sp = sp + 48
	return
	// succ:  glob_pattern_p_exit
glob_pattern_p_exit:


// glob_vector
// Return size: 0
void glob_vector()
glob_vector_entry:
	// succ:  l0000000000480CBC
l0000000000480CBC:
	sp = fp
	sp = sp + -352
	Mem0[sp:word64] = x29
	sp = sp + 8
	Mem0[sp:word64] = x30
	x29 = x31 + 0x0000000000000000
	v8 = sp + 16
	Mem0[v8:word64] = x19
	v8 = v8 + 8
	Mem0[v8:word64] = x20
	v11 = sp + 64
	Mem0[v11:word64] = x25
	v11 = v11 + 8
	Mem0[v11:word64] = x26
	v14 = sp + 32
	Mem0[v14:word64] = x21
	v14 = v14 + 8
	Mem0[v14:word64] = x22
	v17 = sp + 48
	Mem0[v17:word64] = x23
	v17 = v17 + 8
	Mem0[v17:word64] = x24
	v20 = sp + 80
	Mem0[v20:word64] = x27
	v20 = v20 + 8
	Mem0[v20:word64] = x28
	Mem0[x29 + 256:word32] = w2
	x20 = x0
	x25 = x1
	branch x0 == 0x0000000000000000 l0000000000480F54
	// succ:  l0000000000480CE8 l0000000000480F54
l0000000000480CE8:
	v25 = Mem0[x0:byte]
	w1 = (word32) v25
	branch w1 == 0x00000000 l0000000000480F54
	// succ:  l0000000000480CF0 l0000000000480F54
l0000000000480CF0:
	strlen(x0)
	sp = sp + 0xFFFFFFFFFFFFFFF8
	x19 = x0
	x0 = x20
	call glob_pattern_p (retsize: 0;)
	branch w0 == 0x00000000 l000000000048101C
	// succ:  l0000000000480D04 l000000000048101C
l0000000000480D04:
	x0 = x25
	opendir(x0)
	sp = sp + 0xFFFFFFFFFFFFFFF8
	x21 = x0
	branch x0 == 0x0000000000000000 l0000000000481028
	// succ:  l0000000000480D14 l0000000000481028
l0000000000480D14:
	x1 = 0x00000000004D8000
	x0 = x1 + 0xFFFFFFFFFFFFF868
	w0 = Mem0[x0:word32]
	x1 = 0x00000000004E1000
	x1 = x1 + 0xFFFFFFFFFFFFFA00
	NZCV = cond(w0 - w31)
	w0 = Mem0[x1:word32]
	x1 = x1 + 8
	w28 = 0x00000005
l0000000000480F54:
	x0 = x25
	call fn0000000000480710 (retsize: 0;)
	branch (w0 & 0x00000000) == 0x00000000 l0000000000481028
	// succ:  l0000000000480F60 l0000000000481028
l0000000000480F60:
	x31 = x31 - 0x0000000000000020
	x0 = 0x0000000000000001
	x28 = x31 + 0x0000000000000000
	Mem0[sp:word64] = 0x0000000000000000
	call malloc (retsize: 0;)
	branch x0 == 0x0000000000000000 l00000000004813D4
	// succ:  l0000000000480F78 l00000000004813D4
l0000000000480F78:
	Mem0[sp + 8:word64] = x0
	Mem0[x0:byte] = 0x00
	w20 = 0x00000000
	w22 = 0x00000001
	// succ:  l0000000000480F88
l0000000000480F88:
	x19 = 0x0000000000000000
	x27 = 0x00000000004E1000
	branch w20 == 0x00000000 l0000000000481064
	// succ:  l0000000000480F94 l0000000000481064
l0000000000480F94:
	x26 = 0x00000000004C1000
	x26 = x26 + 0x0000000000000368
	// succ:  l0000000000480F9C
l0000000000480F9C:
	branch x28 == 0x0000000000000000 l0000000000480FD8
	// succ:  l0000000000480FA0 l0000000000480FD8
l0000000000480FA0:
	x31 = x28 - x19
	NZCV = cond(x31)
	x1 = x26
	w2 = 0x000002DB
	x0 = Mem0[x28 + 8:word64]
	branch x19 == 0x0000000000000000 l0000000000481050
	// succ:  l0000000000480FB4 l0000000000481050
l0000000000480FB4:
l0000000000480FD8:
	x0 = 0x00000000004E1000
	w1 = Mem0[x0 + 644:word32]
	branch w1 != 0x00000000 l00000000004811E0
	// succ:  l0000000000480FE4 l00000000004811E0
l0000000000480FE4:
	w1 = Mem0[x27 + 632:word32]
	x0 = 0x0000000000000000
	branch w1 == 0x00000000 l0000000000481030
	// succ:  l0000000000480FF0 l0000000000481030
l0000000000480FF0:
	Mem0[x29 + 328:word64] = x0
	call throw_to_top_level (retsize: 0;)
	x31 = x29 + 0x0000000000000000
	x0 = Mem0[x29 + 328:word64]
	v38 = sp + 16
	x19 = Mem0[v38:word64]
	v38 = v38 + 8
	x20 = Mem0[v38:word64]
	v39 = sp + 32
	x21 = Mem0[v39:word64]
	v39 = v39 + 8
	x22 = Mem0[v39:word64]
	v40 = sp + 48
	x23 = Mem0[v40:word64]
	v40 = v40 + 8
	x24 = Mem0[v40:word64]
	v41 = sp + 64
	x25 = Mem0[v41:word64]
	v41 = v41 + 8
	x26 = Mem0[v41:word64]
	v42 = sp + 80
	x27 = Mem0[v42:word64]
	v42 = v42 + 8
	x28 = Mem0[v42:word64]
	x29 = Mem0[sp:word64]
	sp = sp + 8
	x30 = Mem0[sp:word64]
	sp = sp + 352
	return
	// succ:  glob_vector_exit
l000000000048101C:
	x0 = x25
	call fn0000000000480710 (retsize: 0;)
	branch (w0 & 0x00000000) == 0x00000000 l00000000004813E4
	// succ:  l0000000000481028 l00000000004813E4
l0000000000481028:
	x0 = 0x00000000004E3000
	x0 = x0 + 0xFFFFFFFFFFFFFF20
	// succ:  l0000000000481030
l0000000000481030:
	x31 = x29 + 0x0000000000000000
	v32 = sp + 16
	x19 = Mem0[v32:word64]
	v32 = v32 + 8
	x20 = Mem0[v32:word64]
	v33 = sp + 32
	x21 = Mem0[v33:word64]
	v33 = v33 + 8
	x22 = Mem0[v33:word64]
	v34 = sp + 48
	x23 = Mem0[v34:word64]
	v34 = v34 + 8
	x24 = Mem0[v34:word64]
	v35 = sp + 64
	x25 = Mem0[v35:word64]
	v35 = v35 + 8
	x26 = Mem0[v35:word64]
	v36 = sp + 80
	x27 = Mem0[v36:word64]
	v36 = v36 + 8
	x28 = Mem0[v36:word64]
	x29 = Mem0[sp:word64]
	sp = sp + 8
	x30 = Mem0[sp:word64]
	sp = sp + 352
	return
	// succ:  glob_vector_exit
l0000000000481050:
	x1 = x26
	w2 = 0x000002DB
	call sh_xfree (retsize: 0;)
	x28 = Mem0[x28:word64]
	goto l0000000000480F9C
	// succ:  l0000000000480F9C
l0000000000481064:
	w0 = w22 + 0x00000001
l00000000004811E0:
	w0 = Mem0[x0 + 644:word32]
	call termsig_handler (retsize: 0;)
	goto l0000000000480FE4
	// succ:  l0000000000480FE4
l00000000004813D4:
	w20 = 0x00000001
	w22 = w0
	x28 = x0
	goto l0000000000480F88
	// succ:  l0000000000480F88
l00000000004813E4:
	x0 = x25
	strlen(x0)
	sp = sp + 0xFFFFFFFFFFFFFFF8
	x22 = x0
	w0 = w19 + w0
	w0 = w0 + 0x00000002
glob_vector_exit:


// glob_filename
// Return size: 0
void glob_filename()
glob_filename_entry:
	// succ:  l00000000004815F4
l00000000004815F4:
	sp = fp
	sp = sp + -144
	Mem0[sp:word64] = x29
	sp = sp + 8
	Mem0[sp:word64] = x30
	x29 = x31 + 0x0000000000000000
	v8 = sp + 32
	Mem0[v8:word64] = x21
	v8 = v8 + 8
	Mem0[v8:word64] = x22
	x21 = x0
	x0 = 0x0000000000000008
	v12 = sp + 48
	Mem0[v12:word64] = x23
	v12 = v12 + 8
	Mem0[v12:word64] = x24
	v15 = sp + 16
	Mem0[v15:word64] = x19
	v15 = v15 + 8
	Mem0[v15:word64] = x20
	v18 = sp + 64
	Mem0[v18:word64] = x25
	v18 = v18 + 8
	Mem0[v18:word64] = x26
	v21 = sp + 80
	Mem0[v21:word64] = x27
	v21 = v21 + 8
	Mem0[v21:word64] = x28
	w23 = w1
	call malloc (retsize: 0;)
	x24 = x0
	branch x0 == 0x0000000000000000 l00000000004819D8
	// succ:  l0000000000481628 l00000000004819D8
l0000000000481628:
	Mem0[x0:word64] = 0x0000000000000000
	w1 = 0x0000002F
	x0 = x21
	strrchr(x0, x1)
	sp = sp + 0xFFFFFFFFFFFFFFF8
	x19 = x0
	branch x0 == 0x0000000000000000 l0000000000481A4C
	// succ:  l0000000000481640 l0000000000481A4C
l0000000000481640:
	x20 = x0 - x21
	w0 = w20 + 0x00000002
	call malloc (retsize: 0;)
	Mem0[x29 + 96:word64] = x0
	w20 = w20 + 0x00000001
	branch x0 == 0x0000000000000000 l00000000004819D8
	// succ:  l0000000000481658 l00000000004819D8
l0000000000481658:
	w22 = w20
	x1 = x21
	x2 = x22
	memmove(x0, x1, x2)
	sp = sp + 0xFFFFFFFFFFFFFFF8
	x0 = Mem0[x29 + 96:word64]
	w1 = 0x00000001
	x21 = x19 + 0x0000000000000001
	Mem0[x0 + x22:byte] = 0x00
	Mem0[x29 + 128:word32] = w1
	// succ:  l000000000048167C
l000000000048167C:
	x0 = Mem0[x29 + 96:word64]
	call glob_pattern_p (retsize: 0;)
	branch w0 != 0x00000000 l0000000000481730
	// succ:  l0000000000481688 l0000000000481730
l0000000000481688:
	v29 = Mem0[x21:byte]
	w0 = (word32) v29
	branch w0 == 0x00000000 l0000000000481A64
	// succ:  l0000000000481690 l0000000000481A64
l0000000000481690:
	branch w20 != 0x00000000 l0000000000481B00
	// succ:  l0000000000481694 l0000000000481B00
l0000000000481694:
	x22 = 0x00000000004C1000
	x0 = x24
	x1 = x22 + 0x0000000000000368
	w2 = 0x00000404
	w19 = w23 & 0xFFFFFFFE
	call sh_xfree (retsize: 0;)
	w19 = w19 | 0x00000100
	branch (w23 & 0x00000400) == 0x00000000 l00000000004816CC
	// succ:  l00000000004816B4 l00000000004816CC
l00000000004816B4:
	v32 = Mem0[x21:byte]
	w0 = (word32) v32
	w31 = w0 - 0x0000002A
	NZCV = cond(w31)
	branch Test(NE,Z) l00000000004816CC
	// succ:  l00000000004816C0 l00000000004816CC
l00000000004816C0:
	v36 = Mem0[x21 + 1:byte]
	w0 = (word32) v36
	w31 = w0 - 0x0000002A
	NZCV = cond(w31)
	branch Test(EQ,Z) l0000000000481B48
	// succ:  l00000000004816CC l0000000000481B48
l00000000004816CC:
	branch w20 == 0x00000000 l0000000000481A04
	// succ:  l00000000004816D0 l0000000000481A04
l00000000004816D0:
	x1 = Mem0[x29 + 96:word64]
	// succ:  l00000000004816D4
l00000000004816D4:
	x0 = x21
	w2 = w19
	call glob_vector (retsize: 0;)
	x1 = x0
	branch x0 == 0x0000000000000000 l0000000000481B28
	// succ:  l00000000004816E8 l0000000000481B28
l00000000004816E8:
	x0 = 0x00000000004E3000
	x0 = x0 + 0xFFFFFFFFFFFFFF20
	x31 = x1 - x0
	NZCV = cond(x31)
	branch Test(EQ,Z) l0000000000481B28
	// succ:  l00000000004816F8 l0000000000481B28
l00000000004816F8:
	x0 = Mem0[x29 + 96:word64]
	branch (w19 & 0x00000010) == 0x00000000 l0000000000481708
	// succ:  l0000000000481700 l0000000000481708
l0000000000481700:
	x0 = 0x00000000004AC000
	x0 = x0 + 0x0000000000000460
	// succ:  l0000000000481708
l0000000000481708:
	w2 = w23
	call fn000000000048074C (retsize: 0;)
	x25 = x0
	w0 = Mem0[x29 + 128:word32]
	branch w0 == 0x00000000 l00000000004819DC
	// succ:  l000000000048171C l00000000004819DC
l000000000048171C:
	x0 = Mem0[x29 + 96:word64]
	x1 = x22 + 0x0000000000000368
	w2 = 0x00000427
	call sh_xfree (retsize: 0;)
	goto l00000000004819DC
	// succ:  l00000000004819DC
l0000000000481730:
	w2 = w23 & 0x00000400
	Mem0[x29 + 104:word32] = w2
	w1 = w23 & 0xFFFFFFFE
	branch (w23 & 0x00000400) == 0x00000000 l0000000000481750
	// succ:  l0000000000481740 l0000000000481750
l0000000000481740:
	x2 = Mem0[x29 + 96:word64]
	v43 = Mem0[x2:byte]
	w0 = (word32) v43
	w31 = w0 - 0x0000002A
	NZCV = cond(w31)
	branch Test(EQ,Z) l0000000000481A2C
	// succ:  l0000000000481750 l0000000000481A2C
l0000000000481750:
	x2 = Mem0[x29 + 96:word64]
	w20 = w20 - 0x00000001
	v44 = Mem0[x2 + x20:byte]
	w0 = (word32) v44
	w31 = w0 - 0x0000002F
	NZCV = cond(w31)
	branch Test(EQ,Z) l0000000000481AC4
	// succ:  l0000000000481764 l0000000000481AC4
l0000000000481764:
	x0 = Mem0[x29 + 96:word64]
	call glob_filename (retsize: 0;)
	x25 = x0
	w0 = Mem0[x29 + 128:word32]
	branch w0 != 0x00000000 l0000000000481A10
	// succ:  l0000000000481778 l0000000000481A10
l0000000000481778:
	branch x25 == 0x0000000000000000 l0000000000481978
	// succ:  l000000000048177C l0000000000481978
l000000000048177C:
	x1 = 0x00000000004E3000
	x19 = x1 + 0xFFFFFFFFFFFFFF20
	x31 = x25 - x19
	NZCV = cond(x31)
	branch Test(EQ,Z) l0000000000481B78
	// succ:  l000000000048178C l0000000000481B78
l000000000048178C:
	x1 = Mem0[x25:word64]
	branch x1 == 0x0000000000000000 l0000000000481B90
	// succ:  l0000000000481794 l0000000000481B90
l0000000000481794:
	w26 = 0xFFFFFDEE
	w26 = w23 & w26
	w0 = 0x00000210
	w0 = w26 | w0
	Mem0[x29 + 108:word32] = w0
	x0 = 0x00000000004B2000
	x0 = x0 + 0xFFFFFFFFFFFFFD68
	Mem0[x29 + 120:word64] = x0
	x0 = 0x00000000004C1000
	x0 = x0 + 0x0000000000000368
	x19 = x25
	w22 = 0x00000000
	w28 = 0x00000001
	Mem0[x29 + 112:word64] = x0
	w2 = Mem0[x29 + 104:word32]
	w20 = w26
	branch w2 == 0x00000000 l00000000004817E4
	// succ:  l00000000004817D8 l00000000004817E4
l00000000004817D8:
	v47 = Mem0[x21:byte]
	w0 = (word32) v47
	w31 = w0 - 0x0000002A
	NZCV = cond(w31)
	branch Test(EQ,Z) l0000000000481958
	// succ:  l00000000004817E4 l0000000000481958
l00000000004817E4:
	v48 = Mem0[x1:byte]
	w0 = (word32) v48
	branch w0 != 0x00000000 l00000000004817FC
	// succ:  l00000000004817EC l00000000004817FC
l00000000004817EC:
	v49 = Mem0[x21:byte]
	w0 = (word32) v49
	branch w0 == 0x00000000 l00000000004817FC
	// succ:  l00000000004817F4 l00000000004817FC
l00000000004817F4:
	x1 = Mem0[x29 + 120:word64]
	w20 = w20 | 0x00000100
	// succ:  l00000000004817FC
l00000000004817FC:
	x0 = x21
	w2 = w20
	call glob_vector (retsize: 0;)
	x27 = x0
	branch x0 == 0x0000000000000000 l0000000000481978
	// succ:  l0000000000481810 l0000000000481978
l0000000000481810:
	x1 = 0x00000000004E3000
	x0 = x1 + 0xFFFFFFFFFFFFFF20
	x31 = x27 - x0
	NZCV = cond(x31)
	branch Test(EQ,Z) l00000000004818C0
	// succ:  l0000000000481820 l00000000004818C0
l0000000000481820:
	branch (w20 & 0x00000010) == 0x00000000 l0000000000481830
	// succ:  l0000000000481824 l0000000000481830
l0000000000481824:
	v50 = Mem0[x21:byte]
	w0 = (word32) v50
	w31 = w0 - 0x0000002A
	NZCV = cond(w31)
	branch Test(EQ,Z) l000000000048193C
	// succ:  l0000000000481830 l000000000048193C
l0000000000481830:
	x0 = Mem0[x19:word64]
	x1 = x27
	w2 = w23
	call fn000000000048074C (retsize: 0;)
	x20 = x0
	// succ:  l0000000000481844
l0000000000481844:
	x3 = Mem0[x20:word64]
	branch x3 == 0x0000000000000000 l000000000048185C
	// succ:  l000000000048184C l000000000048185C
l000000000048184C:
	w3 = 0x00000000
	// succ:  l0000000000481850
l0000000000481850:
	w3 = w3 + 0x00000001
	x4 = Mem0[x20 + (uint64) ((uint32) w3):word64]
	branch x4 != 0x0000000000000000 l0000000000481850
	// succ:  l000000000048185C l0000000000481850
l000000000048185C:
	w1 = w3 + w28
	x0 = x24
l00000000004818C0:
	w22 = w22 + 0x00000001
l000000000048193C:
	v56 = Mem0[x21 + 1:byte]
	w0 = (word32) v56
	w31 = w0 - 0x0000002A
	NZCV = cond(w31)
	branch Test(NE,Z) l0000000000481830
	// succ:  l0000000000481948 l0000000000481830
l0000000000481948:
	v57 = Mem0[x21 + 2:byte]
	w0 = (word32) v57
	x20 = x27
	branch w0 == 0x00000000 l0000000000481844
	// succ:  l0000000000481954 l0000000000481844
l0000000000481954:
	goto l0000000000481830
	// succ:  l0000000000481830
l0000000000481958:
	v54 = Mem0[x21 + 1:byte]
	w0 = (word32) v54
	w31 = w0 - 0x0000002A
	NZCV = cond(w31)
	branch Test(NE,Z) l00000000004817E4
	// succ:  l0000000000481964 l00000000004817E4
l0000000000481964:
	v55 = Mem0[x21 + 2:byte]
	w0 = (word32) v55
	NZCV = cond(w0 - w31)
	w0 = Mem0[x29 + 108:word32]
l0000000000481978:
	x0 = Mem0[x24:word64]
	x22 = 0x00000000004C1000
	branch x0 == 0x0000000000000000 l00000000004819A4
	// succ:  l0000000000481984 l00000000004819A4
l0000000000481984:
	w19 = 0x00000000
	x20 = x22 + 0x0000000000000368
	// succ:  l000000000048198C
l000000000048198C:
	x1 = x20
	w2 = 0x00000432
	w19 = w19 + 0x00000001
	call sh_xfree (retsize: 0;)
	x0 = Mem0[x24 + (uint64) ((uint32) w19):word64]
	branch x0 != 0x0000000000000000 l000000000048198C
	// succ:  l00000000004819A4 l000000000048198C
l00000000004819A4:
	x0 = x24
	x1 = x22 + 0x0000000000000368
	w2 = 0x00000433
	call sh_xfree (retsize: 0;)
	x1 = Mem0[x29 + 96:word64]
	branch x1 != 0x0000000000000000 l0000000000481ACC
	// succ:  l00000000004819BC l0000000000481ACC
l00000000004819BC:
	x0 = 0x00000000004E1000
	w1 = Mem0[x0 + 644:word32]
	branch w1 != 0x00000000 l0000000000481AF4
	// succ:  l00000000004819C8 l0000000000481AF4
l00000000004819C8:
	x0 = 0x00000000004E1000
	w0 = Mem0[x0 + 632:word32]
	branch w0 == 0x00000000 l00000000004819D8
	// succ:  l00000000004819D4 l00000000004819D8
l00000000004819D4:
	call throw_to_top_level (retsize: 0;)
	// succ:  l00000000004819D8
l00000000004819D8:
	x25 = 0x0000000000000000
	// succ:  l00000000004819DC
l00000000004819DC:
	x0 = x25
	v37 = sp + 16
	x19 = Mem0[v37:word64]
	v37 = v37 + 8
	x20 = Mem0[v37:word64]
	v38 = sp + 32
	x21 = Mem0[v38:word64]
	v38 = v38 + 8
	x22 = Mem0[v38:word64]
	v39 = sp + 48
	x23 = Mem0[v39:word64]
	v39 = v39 + 8
	x24 = Mem0[v39:word64]
	v40 = sp + 64
	x25 = Mem0[v40:word64]
	v40 = v40 + 8
	x26 = Mem0[v40:word64]
	v41 = sp + 80
	x27 = Mem0[v41:word64]
	v41 = v41 + 8
	x28 = Mem0[v41:word64]
	x29 = Mem0[sp:word64]
	sp = sp + 8
	x30 = Mem0[sp:word64]
	sp = sp + 144
	return
	// succ:  glob_filename_exit
l0000000000481A04:
	x1 = 0x00000000004B2000
	x1 = x1 + 0xFFFFFFFFFFFFFD68
	goto l00000000004816D4
	// succ:  l00000000004816D4
l0000000000481A10:
	x22 = 0x00000000004C1000
	x0 = Mem0[x29 + 96:word64]
	x1 = x22 + 0x0000000000000368
	w2 = 0x00000390
	call sh_xfree (retsize: 0;)
	Mem0[x29 + 96:word64] = 0x0000000000000000
	goto l0000000000481778
	// succ:  l0000000000481778
l0000000000481A2C:
	v58 = Mem0[x2 + 1:byte]
	w0 = (word32) v58
	w31 = w0 - 0x0000002A
	NZCV = cond(w31)
	branch Test(NE,Z) l0000000000481750
	// succ:  l0000000000481A38 l0000000000481750
l0000000000481A38:
	v59 = Mem0[x2 + 2:byte]
	w0 = (word32) v59
	branch w0 != 0x00000000 l0000000000481BC0
	// succ:  l0000000000481A40 l0000000000481BC0
l0000000000481A40:
	w0 = 0x00000210
	w1 = w1 | w0
	goto l0000000000481750
	// succ:  l0000000000481750
l0000000000481A4C:
	x27 = 0x00000000004AC000
	x27 = x27 + 0x0000000000000460
	Mem0[x29 + 128:word32] = w0
	w20 = w0
	Mem0[x29 + 96:word64] = x27
	goto l000000000048167C
	// succ:  l000000000048167C
l0000000000481A64:
	x0 = x24
	x1 = 0x0000000000000010
	call realloc (retsize: 0;)
	x24 = x0
	branch x0 == 0x0000000000000000 l00000000004819D8
	// succ:  l0000000000481A78 l00000000004819D8
l0000000000481A78:
	w20 = w20 + 0x00000001
	x0 = x20
	call malloc (retsize: 0;)
	Mem0[x24:word64] = x0
	x22 = 0x00000000004C1000
	branch x0 == 0x0000000000000000 l00000000004819A4
	// succ:  l0000000000481A90 l00000000004819A4
l0000000000481A90:
	x1 = Mem0[x29 + 96:word64]
	x2 = x20
	memcpy(x0, x1, x2)
	sp = sp + 0xFFFFFFFFFFFFFFF8
	w0 = Mem0[x29 + 128:word32]
	branch w0 == 0x00000000 l0000000000481AB8
	// succ:  l0000000000481AA4 l0000000000481AB8
l0000000000481AA4:
	x1 = 0x00000000004C1000
	x0 = Mem0[x29 + 96:word64]
	x1 = x1 + 0x0000000000000368
	w2 = 0x000003F4
	call sh_xfree (retsize: 0;)
	// succ:  l0000000000481AB8
l0000000000481AB8:
	Mem0[x24 + 8:word64] = 0x0000000000000000
	x25 = x24
	goto l00000000004819DC
	// succ:  l00000000004819DC
l0000000000481AC4:
	Mem0[x2 + x20:byte] = 0x00
	goto l0000000000481764
	// succ:  l0000000000481764
l0000000000481ACC:
	w2 = Mem0[x29 + 128:word32]
	branch (w2 & 0x00000001) == 0x00000000 l00000000004819BC
	// succ:  l0000000000481AD4 l00000000004819BC
l0000000000481AD4:
	x0 = x1
	x1 = 0x00000000004C1000
	x1 = x1 + 0x0000000000000368
	w2 = 0x00000437
	call sh_xfree (retsize: 0;)
	x0 = 0x00000000004E1000
	w1 = Mem0[x0 + 644:word32]
	branch w1 == 0x00000000 l00000000004819C8
	// succ:  l0000000000481AF4 l00000000004819C8
l0000000000481AF4:
	w0 = Mem0[x0 + 644:word32]
	call termsig_handler (retsize: 0;)
	goto l00000000004819C8
	// succ:  l00000000004819C8
l0000000000481B00:
	x0 = Mem0[x29 + 96:word64]
	x22 = 0x00000000004C1000
	call fn0000000000480AA0 (retsize: 0;)
	x0 = x24
	x1 = x22 + 0x0000000000000368
	w2 = 0x00000404
	call sh_xfree (retsize: 0;)
	w19 = w23 & 0xFFFFFFFE
	branch (w23 & 0x00000400) == 0x00000000 l00000000004816CC
	// succ:  l0000000000481B24 l00000000004816CC
l0000000000481B24:
	goto l00000000004816B4
	// succ:  l00000000004816B4
l0000000000481B28:
	w0 = Mem0[x29 + 128:word32]
	x25 = x1
	branch w0 == 0x00000000 l00000000004819DC
	// succ:  l0000000000481B34 l00000000004819DC
l0000000000481B34:
	x0 = Mem0[x29 + 96:word64]
	x1 = x22 + 0x0000000000000368
	w2 = 0x00000421
	call sh_xfree (retsize: 0;)
	goto l00000000004819DC
	// succ:  l00000000004819DC
l0000000000481B48:
	v42 = Mem0[x21 + 2:byte]
	w0 = (word32) v42
	branch w0 != 0x00000000 l00000000004816CC
	// succ:  l0000000000481B50 l00000000004816CC
l0000000000481B50:
	w0 = 0x00000210
	w0 = w19 | w0
	branch w20 != 0x00000000 l0000000000481BCC
	// succ:  l0000000000481B5C l0000000000481BCC
l0000000000481B5C:
	branch (w23 & 0x00000010) == 0x00000000 l0000000000481B68
	// succ:  l0000000000481B60 l0000000000481B68
l0000000000481B60:
	w0 = w19 & 0xFFFFFDFF
	w0 = w0 | 0x00000010
	// succ:  l0000000000481B68
l0000000000481B68:
	x1 = 0x00000000004B2000
	w19 = w0
	x1 = x1 + 0xFFFFFFFFFFFFFD68
	goto l00000000004816D4
	// succ:  l00000000004816D4
l0000000000481B78:
	x1 = 0x00000000004C1000
	x0 = x24
	x1 = x1 + 0x0000000000000368
	w2 = 0x00000398
	call sh_xfree (retsize: 0;)
	goto l00000000004819DC
	// succ:  l00000000004819DC
l0000000000481B90:
	x20 = 0x00000000004C1000
	x20 = x20 + 0x0000000000000368
	x0 = x25
	w2 = 0x0000039D
	x1 = x20
	call sh_xfree (retsize: 0;)
	x0 = x24
	x1 = x20
	w2 = 0x0000039E
	call sh_xfree (retsize: 0;)
	x25 = x19
	goto l00000000004819DC
	// succ:  l00000000004819DC
l0000000000481BC0:
	w31 = w0 - 0x0000002F
	NZCV = cond(w31)
	branch Test(NE,Z) l0000000000481750
	// succ:  l0000000000481BC8 l0000000000481750
l0000000000481BC8:
	goto l0000000000481A40
	// succ:  l0000000000481A40
l0000000000481BCC:
	w19 = w0
	goto l00000000004816D0
	// succ:  l00000000004816D0
glob_filename_exit:


// strmatch
// Return size: 0
void strmatch()
strmatch_entry:
	// succ:  l0000000000481BD4
l0000000000481BD4:
	sp = fp
	branch x1 != 0x0000000000000000 l0000000000481BE0
	// succ:  l0000000000481BD8 l0000000000481BE0
l0000000000481BD8:
	w0 = 0x00000001
	return
	// succ:  strmatch_exit
l0000000000481BE0:
	branch x0 == 0x0000000000000000 l0000000000481BD8
	// succ:  l0000000000481BE4 l0000000000481BD8
l0000000000481BE4:
	// succ:  l0000000000481BE4_thunk_xstrmatch
l0000000000481BE4_thunk_xstrmatch:
	call xstrmatch (retsize: 0;)
	return
	// succ:  strmatch_exit
strmatch_exit:


// wcsmatch
// Return size: 0
void wcsmatch()
wcsmatch_entry:
	// succ:  l0000000000481BE8
l0000000000481BE8:
	sp = fp
	branch x1 != 0x0000000000000000 l0000000000481BF4
	// succ:  l0000000000481BEC l0000000000481BF4
l0000000000481BEC:
	w0 = 0x00000001
	return
	// succ:  wcsmatch_exit
l0000000000481BF4:
	branch x0 == 0x0000000000000000 l0000000000481BEC
	// succ:  l0000000000481BF8 l0000000000481BEC
l0000000000481BF8:
	// succ:  l0000000000481BF8_thunk_internal_wstrmatch
l0000000000481BF8_thunk_internal_wstrmatch:
	call internal_wstrmatch (retsize: 0;)
	return
	// succ:  wcsmatch_exit
wcsmatch_exit:


// fn0000000000481BFC
// Return size: 0
void fn0000000000481BFC()
fn0000000000481BFC_entry:
	// succ:  l0000000000481BFC
l0000000000481BFC:
	sp = fp
	v5 = Mem0[x0:byte]
	w3 = (word32) v5
	branch w3 == 0x00000000 l0000000000481C8C
	// succ:  l0000000000481C04 l0000000000481C8C
l0000000000481C04:
	x31 = x0 - x1
	NZCV = cond(x31)
	branch Test(UGE,C) l0000000000481C6C
	// succ:  l0000000000481C0C l0000000000481C6C
l0000000000481C0C:
	x6 = 0x0000000000000000
	w8 = w6
	w4 = w6
	w5 = w6
	w7 = w6
	// succ:  l0000000000481C20
l0000000000481C20:
	branch w4 != 0x00000000 l0000000000481CA0
	// succ:  l0000000000481C24 l0000000000481CA0
l0000000000481C24:
	w31 = w3 - 0x0000005B
	NZCV = cond(w31)
	branch Test(EQ,Z) l0000000000481CAC
	// succ:  l0000000000481C2C l0000000000481CAC
l0000000000481C2C:
	branch Test(ULE,ZC) l0000000000481C70
	// succ:  l0000000000481C30 l0000000000481C70
l0000000000481C30:
	w31 = w3 - 0x0000005D
	NZCV = cond(w31)
	branch Test(EQ,Z) l0000000000481CF4
	// succ:  l0000000000481C38 l0000000000481CF4
l0000000000481C38:
	branch Test(ULT,C) l0000000000481CE8
	// succ:  l0000000000481C3C l0000000000481CE8
l0000000000481C3C:
	w31 = w3 - 0x0000007C
	NZCV = cond(w31)
	branch Test(NE,Z) l0000000000481C84
	// succ:  l0000000000481C44 l0000000000481C84
l0000000000481C44:
	w3 = w7 | w5
	branch w3 != 0x00000000 l0000000000481C84
	// succ:  l0000000000481C4C l0000000000481C84
l0000000000481C4C:
	w31 = w2 - 0x0000007C
	NZCV = cond(w31)
	branch Test(EQ,Z) l0000000000481D68
	// succ:  l0000000000481C54 l0000000000481D68
l0000000000481C54:
	x0 = x0 + 1
	v20 = Mem0[x0:byte]
	w3 = (word32) v20
	w5 = w4
	w7 = w4
	// succ:  l0000000000481C60
l0000000000481C60:
	branch w3 == 0x00000000 l0000000000481C8C
	// succ:  l0000000000481C64 l0000000000481C8C
l0000000000481C64:
	x31 = x1 - x0
	NZCV = cond(x31)
	branch Test(UGT,ZC) l0000000000481C20
	// succ:  l0000000000481C6C l0000000000481C20
l0000000000481C6C:
	return
	// succ:  fn0000000000481BFC_exit
l0000000000481C70:
	w31 = w3 - 0x00000028
	NZCV = cond(w31)
	branch Test(EQ,Z) l0000000000481CD4
	// succ:  l0000000000481C78 l0000000000481CD4
l0000000000481C78:
	w31 = w3 - 0x00000029
	NZCV = cond(w31)
	branch Test(NE,Z) l0000000000481C84
	// succ:  l0000000000481C80 l0000000000481C84
l0000000000481C80:
	branch w5 == 0x00000000 l0000000000481C94
	// succ:  l0000000000481C84 l0000000000481C94
l0000000000481C84:
	x0 = x0 + 1
	v21 = Mem0[x0:byte]
	w3 = (word32) v21
	branch w3 != 0x00000000 l0000000000481C64
	// succ:  l0000000000481C8C l0000000000481C64
l0000000000481C8C:
	x0 = 0x0000000000000000
	return
	// succ:  fn0000000000481BFC_exit
l0000000000481C94:
	NZCV = cond(w7 - w31)
	w7 = w7 - 0x00000001
	branch Test(LE,ZCV) l0000000000481D68
	// succ:  l0000000000481CA0 l0000000000481D68
l0000000000481CA0:
	x0 = x0 + 1
	v27 = Mem0[x0:byte]
	w3 = (word32) v27
	w4 = 0x00000000
	goto l0000000000481C60
	// succ:  l0000000000481C60
l0000000000481CAC:
	v31 = Mem0[x0 + 1:byte]
	w3 = (word32) v31
	branch w5 != 0x00000000 l0000000000481D14
	// succ:  l0000000000481CB4 l0000000000481D14
l0000000000481CB4:
	w31 = w3 - 0x0000005E
	NZCV = cond(w31)
	x4 = x0 + 0x0000000000000001
	branch Test(NE,Z) l0000000000481D58
	// succ:  l0000000000481CC0 l0000000000481D58
l0000000000481CC0:
	x6 = x0 + 0x0000000000000002
	// succ:  l0000000000481CC4
l0000000000481CC4:
	x0 = x4
	w5 = 0x00000001
	w4 = 0x00000000
	goto l0000000000481C60
	// succ:  l0000000000481C60
l0000000000481CD4:
	branch w5 != 0x00000000 l0000000000481C84
	// succ:  l0000000000481CD8 l0000000000481C84
l0000000000481CD8:
	w7 = w7 + 0x00000001
	x0 = x0 + 1
	v28 = Mem0[x0:byte]
	w3 = (word32) v28
	w4 = w5
	goto l0000000000481C60
	// succ:  l0000000000481C60
l0000000000481CE8:
	x0 = x0 + 1
	v22 = Mem0[x0:byte]
	w3 = (word32) v22
	w4 = 0x00000001
	goto l0000000000481C60
	// succ:  l0000000000481C60
l0000000000481CF4:
	branch w5 == 0x00000000 l0000000000481CA0
	// succ:  l0000000000481CF8 l0000000000481CA0
l0000000000481CF8:
	branch w8 != 0x00000000 l0000000000481D40
	// succ:  l0000000000481CFC l0000000000481D40
l0000000000481CFC:
	x31 = x0 - x6
	NZCV = cond(x31)
	branch Test(EQ,Z) l0000000000481D70
	// succ:  l0000000000481D04 l0000000000481D70
l0000000000481D04:
	w5 = w5 - 0x00000001
	x0 = x0 + 1
	v23 = Mem0[x0:byte]
	w3 = (word32) v23
	x6 = 0x0000000000000000
	goto l0000000000481C60
	// succ:  l0000000000481C60
l0000000000481D14:
	w31 = w3 - 0x0000003A
	NZCV = cond(w31)
	branch Test(EQ,Z) l0000000000481D34
	// succ:  l0000000000481D1C l0000000000481D34
l0000000000481D1C:
	w31 = w3 - 0x0000002E
	NZCV = cond(w31)
	branch Test(EQ,Z) l0000000000481D34
	// succ:  l0000000000481D24 l0000000000481D34
l0000000000481D24:
	w31 = w3 - 0x0000003D
	NZCV = cond(w31)
	branch Test(EQ,Z) l0000000000481D34
	// succ:  l0000000000481D2C l0000000000481D34
l0000000000481D2C:
	x0 = x0 + 0x0000000000000001
	goto l0000000000481C60
	// succ:  l0000000000481C60
l0000000000481D34:
	w8 = w3
	x0 = x0 + 0x0000000000000001
	goto l0000000000481C60
	// succ:  l0000000000481C60
l0000000000481D40:
	v29 = Mem0[x0 + -1:byte]
	w3 = (word32) v29
	NZCV = cond(w3 - w8)
	branch Test(NE,Z) l0000000000481CFC
	// succ:  l0000000000481D4C l0000000000481CFC
l0000000000481D4C:
	x0 = x0 + 1
	v30 = Mem0[x0:byte]
	w3 = (word32) v30
	w8 = w4
	goto l0000000000481C60
	// succ:  l0000000000481C60
l0000000000481D58:
	w31 = w3 - 0x00000021
	NZCV = cond(w31)
	x6 = x4
	branch Test(NE,Z) l0000000000481CC4
	// succ:  l0000000000481D64 l0000000000481CC4
l0000000000481D64:
	goto l0000000000481CC0
	// succ:  l0000000000481CC0
l0000000000481D68:
	x0 = x0 + 0x0000000000000001
	return
	// succ:  fn0000000000481BFC_exit
l0000000000481D70:
	x9 = x0
	x9 = x9 + 1
	v25 = Mem0[x9:byte]
	w3 = (word32) v25
	x6 = x0
	x0 = x9
	goto l0000000000481C60
	// succ:  l0000000000481C60
fn0000000000481BFC_exit:


// fn0000000000481D84
// Return size: 0
void fn0000000000481D84()
fn0000000000481D84_entry:
	// succ:  l0000000000481D84
l0000000000481D84:
	sp = fp
	w3 = Mem0[x0:word32]
	branch w3 == 0x00000000 l0000000000481E14
	// succ:  l0000000000481D8C l0000000000481E14
l0000000000481D8C:
	x31 = x0 - x1
	NZCV = cond(x31)
	branch Test(UGE,C) l0000000000481DF4
	// succ:  l0000000000481D94 l0000000000481DF4
l0000000000481D94:
	x6 = 0x0000000000000000
	w8 = w6
	w4 = w6
	w5 = w6
	w7 = w6
	// succ:  l0000000000481DA8
l0000000000481DA8:
	branch w4 != 0x00000000 l0000000000481E28
	// succ:  l0000000000481DAC l0000000000481E28
l0000000000481DAC:
	w31 = w3 - 0x0000005B
	NZCV = cond(w31)
	branch Test(EQ,Z) l0000000000481E34
	// succ:  l0000000000481DB4 l0000000000481E34
l0000000000481DB4:
	branch Test(ULE,ZC) l0000000000481DF8
	// succ:  l0000000000481DB8 l0000000000481DF8
l0000000000481DB8:
	w31 = w3 - 0x0000005D
	NZCV = cond(w31)
	branch Test(EQ,Z) l0000000000481E7C
	// succ:  l0000000000481DC0 l0000000000481E7C
l0000000000481DC0:
	branch Test(ULT,C) l0000000000481E70
	// succ:  l0000000000481DC4 l0000000000481E70
l0000000000481DC4:
	w31 = w3 - 0x0000007C
	NZCV = cond(w31)
	branch Test(NE,Z) l0000000000481E0C
	// succ:  l0000000000481DCC l0000000000481E0C
l0000000000481DCC:
	w3 = w7 | w5
	branch w3 != 0x00000000 l0000000000481E0C
	// succ:  l0000000000481DD4 l0000000000481E0C
l0000000000481DD4:
	w31 = w2 - 0x0000007C
	NZCV = cond(w31)
	branch Test(EQ,Z) l0000000000481EF0
	// succ:  l0000000000481DDC l0000000000481EF0
l0000000000481DDC:
	x0 = x0 + 4
	w3 = Mem0[x0:word32]
	w5 = w4
	w7 = w4
	// succ:  l0000000000481DE8
l0000000000481DE8:
	branch w3 == 0x00000000 l0000000000481E14
	// succ:  l0000000000481DEC l0000000000481E14
l0000000000481DEC:
	x31 = x1 - x0
	NZCV = cond(x31)
	branch Test(UGT,ZC) l0000000000481DA8
	// succ:  l0000000000481DF4 l0000000000481DA8
l0000000000481DF4:
	return
	// succ:  fn0000000000481D84_exit
l0000000000481DF8:
	w31 = w3 - 0x00000028
	NZCV = cond(w31)
	branch Test(EQ,Z) l0000000000481E5C
	// succ:  l0000000000481E00 l0000000000481E5C
l0000000000481E00:
	w31 = w3 - 0x00000029
	NZCV = cond(w31)
	branch Test(NE,Z) l0000000000481E0C
	// succ:  l0000000000481E08 l0000000000481E0C
l0000000000481E08:
	branch w5 == 0x00000000 l0000000000481E1C
	// succ:  l0000000000481E0C l0000000000481E1C
l0000000000481E0C:
	x0 = x0 + 4
	w3 = Mem0[x0:word32]
	branch w3 != 0x00000000 l0000000000481DEC
	// succ:  l0000000000481E14 l0000000000481DEC
l0000000000481E14:
	x0 = 0x0000000000000000
	return
	// succ:  fn0000000000481D84_exit
l0000000000481E1C:
	NZCV = cond(w7 - w31)
	w7 = w7 - 0x00000001
	branch Test(LE,ZCV) l0000000000481EF0
	// succ:  l0000000000481E28 l0000000000481EF0
l0000000000481E28:
	x0 = x0 + 4
	w3 = Mem0[x0:word32]
	w4 = 0x00000000
	goto l0000000000481DE8
	// succ:  l0000000000481DE8
l0000000000481E34:
	w3 = Mem0[x0 + 4:word32]
	branch w5 != 0x00000000 l0000000000481E9C
	// succ:  l0000000000481E3C l0000000000481E9C
l0000000000481E3C:
	w31 = w3 - 0x0000005E
	NZCV = cond(w31)
	x4 = x0 + 0x0000000000000004
	branch Test(NE,Z) l0000000000481EB8
	// succ:  l0000000000481E48 l0000000000481EB8
l0000000000481E48:
	x6 = x0 + 0x0000000000000008
	// succ:  l0000000000481E4C
l0000000000481E4C:
	x0 = x4
	w5 = 0x00000001
	w4 = 0x00000000
	goto l0000000000481DE8
	// succ:  l0000000000481DE8
l0000000000481E5C:
	branch w5 != 0x00000000 l0000000000481E0C
	// succ:  l0000000000481E60 l0000000000481E0C
l0000000000481E60:
	w7 = w7 + 0x00000001
	x0 = x0 + 4
	w3 = Mem0[x0:word32]
	w4 = w5
	goto l0000000000481DE8
	// succ:  l0000000000481DE8
l0000000000481E70:
	x0 = x0 + 4
	w3 = Mem0[x0:word32]
	w4 = 0x00000001
	goto l0000000000481DE8
	// succ:  l0000000000481DE8
l0000000000481E7C:
	branch w5 == 0x00000000 l0000000000481E28
	// succ:  l0000000000481E80 l0000000000481E28
l0000000000481E80:
	branch w8 != 0x00000000 l0000000000481EC8
	// succ:  l0000000000481E84 l0000000000481EC8
l0000000000481E84:
	x31 = x0 - x6
	NZCV = cond(x31)
	branch Test(EQ,Z) l0000000000481F04
	// succ:  l0000000000481E8C l0000000000481F04
l0000000000481E8C:
	w5 = w5 - 0x00000001
	x0 = x0 + 4
	w3 = Mem0[x0:word32]
	x6 = 0x0000000000000000
	goto l0000000000481DE8
	// succ:  l0000000000481DE8
l0000000000481E9C:
	w31 = w3 - 0x0000002E
	NZCV = cond(w31)
	branch Test(EQ,Z) l0000000000481EAC
	// succ:  l0000000000481EA4 l0000000000481EAC
l0000000000481EA4:
	w31 = w3 - 0x0000003A
	NZCV = cond(w31)
	branch Test(NE,Z) l0000000000481EE0
	// succ:  l0000000000481EAC l0000000000481EE0
l0000000000481EAC:
	x0 = x0 + 0x0000000000000004
	w8 = w3
	goto l0000000000481DE8
	// succ:  l0000000000481DE8
l0000000000481EB8:
	w31 = w3 - 0x00000021
	NZCV = cond(w31)
	x6 = x4
	branch Test(NE,Z) l0000000000481E4C
	// succ:  l0000000000481EC4 l0000000000481E4C
l0000000000481EC4:
	goto l0000000000481E48
	// succ:  l0000000000481E48
l0000000000481EC8:
	w3 = Mem0[x0 + -4:word32]
	NZCV = cond(w3 - w8)
	branch Test(NE,Z) l0000000000481E84
	// succ:  l0000000000481ED4 l0000000000481E84
l0000000000481ED4:
	x0 = x0 + 4
	w3 = Mem0[x0:word32]
	w8 = w4
	goto l0000000000481DE8
	// succ:  l0000000000481DE8
l0000000000481EE0:
	w31 = w3 - 0x0000003D
	NZCV = cond(w31)
	branch Test(EQ,Z) l0000000000481EF8
	// succ:  l0000000000481EE8 l0000000000481EF8
l0000000000481EE8:
	x0 = x0 + 0x0000000000000004
	goto l0000000000481DE8
	// succ:  l0000000000481DE8
l0000000000481EF0:
	x0 = x0 + 0x0000000000000004
	return
	// succ:  fn0000000000481D84_exit
l0000000000481EF8:
	w8 = w3
	x0 = x0 + 0x0000000000000004
	goto l0000000000481DEC
	// succ:  l0000000000481DEC
l0000000000481F04:
	x0 = x6
	x0 = x0 + 4
	w3 = Mem0[x0:word32]
	goto l0000000000481DE8
	// succ:  l0000000000481DE8
fn0000000000481D84_exit:


// fn0000000000482070
// Return size: 0
void fn0000000000482070()
fn0000000000482070_entry:
	// succ:  l0000000000482070
l0000000000482070:
	sp = fp
	sp = sp + -96
	Mem0[sp:word64] = x29
	sp = sp + 8
	Mem0[sp:word64] = x30
	x29 = x31 + 0x0000000000000000
	v8 = sp + 48
	Mem0[v8:word64] = x23
	v8 = v8 + 8
	Mem0[v8:word64] = x24
	w23 = Mem0[x0 + 4:word32]
	v13 = sp + 64
	Mem0[v13:word64] = x25
	v13 = v13 + 8
	Mem0[v13:word64] = x26
	v16 = sp + 16
	Mem0[v16:word64] = x19
	v16 = v16 + 8
	Mem0[v16:word64] = x20
	v19 = sp + 32
	Mem0[v19:word64] = x21
	v19 = v19 + 8
	Mem0[v19:word64] = x22
	Mem0[sp + 80:word64] = x27
	x26 = x1
	x25 = x0 + 0x0000000000000004
	x24 = 0x0000000000000000
	branch w23 == 0x00000000 l0000000000482194
	// succ:  l00000000004820A0 l0000000000482194
l00000000004820A0:
	w4 = w23
	x3 = 0x0000000000000004
	x5 = 0x0000000000000001
	x22 = x24
	w21 = w24
	goto l00000000004820DC
	// succ:  l00000000004820DC
l00000000004820B8:
	w4 = Mem0[x6 + 4:word32]
	x7 = x5 + 0x0000000000000001
	x6 = x3 + 0x0000000000000004
	w21 = w21 + 0x00000001
	branch w4 == 0x00000000 l0000000000482104
	// succ:  l00000000004820CC l0000000000482104
l00000000004820CC:
	x22 = x5
	x24 = x3
	x5 = x7
	x3 = x6
	// succ:  l00000000004820DC
l00000000004820DC:
	w31 = w4 - 0x0000002E
	NZCV = cond(w31)
	x6 = x0 + x3
	branch Test(NE,Z) l00000000004820B8
	// succ:  l00000000004820E8 l00000000004820B8
l00000000004820E8:
	x2 = x22 + 0x0000000000000001
	w2 = Mem0[x25 + x2 * 4:word32]
	w31 = w2 - 0x0000005D
	NZCV = cond(w31)
	branch Test(NE,Z) l00000000004820B8
	// succ:  l00000000004820F8 l00000000004820B8
l00000000004820F8:
	x27 = x22 + 0x0000000000000002
l0000000000482104:
	x27 = x5 + 0x0000000000000002
l0000000000482114:
	x20 = 0x00000000004D8000
	x20 = x20 + 0xFFFFFFFFFFFFF870
	x19 = Mem0[x20 + 1552:word64]
	x20 = x20 + 0x0000000000000610
	branch x19 != 0x0000000000000000 l0000000000482134
	// succ:  l0000000000482128 l0000000000482134
l0000000000482128:
	goto l0000000000482188
	// succ:  l0000000000482188
l000000000048212C:
	x20 = x20 + 16
	x19 = Mem0[x20:word64]
	branch x19 == 0x0000000000000000 l0000000000482188
	// succ:  l0000000000482134 l0000000000482188
l0000000000482134:
	w3 = Mem0[x19:word32]
	NZCV = cond(w3 - w23)
	branch Test(NE,Z) l000000000048212C
	// succ:  l0000000000482140 l000000000048212C
l0000000000482140:
	x0 = x19
	x1 = x25
	x2 = x22
	call wcsncmp (retsize: 0;)
	branch w0 != 0x00000000 l000000000048212C
	// succ:  l0000000000482154 l000000000048212C
l0000000000482154:
	w1 = Mem0[x19 + x24:word32]
	branch w1 != 0x00000000 l000000000048212C
	// succ:  l000000000048215C l000000000048212C
l000000000048215C:
	w23 = Mem0[x20 + 8:word32]
	branch x26 == 0x0000000000000000 l0000000000482168
	// succ:  l0000000000482164 l0000000000482168
l0000000000482164:
	Mem0[x26:word32] = w23
	// succ:  l0000000000482168
l0000000000482168:
	x0 = x25 + x27
	v37 = sp + 16
	x19 = Mem0[v37:word64]
	v37 = v37 + 8
	x20 = Mem0[v37:word64]
	v38 = sp + 32
	x21 = Mem0[v38:word64]
	v38 = v38 + 8
	x22 = Mem0[v38:word64]
	v39 = sp + 48
	x23 = Mem0[v39:word64]
	v39 = v39 + 8
	x24 = Mem0[v39:word64]
	v40 = sp + 64
	x25 = Mem0[v40:word64]
	v40 = v40 + 8
	x26 = Mem0[v40:word64]
	x27 = Mem0[sp + 80:word64]
	x29 = Mem0[sp:word64]
	sp = sp + 8
	x30 = Mem0[sp:word64]
	sp = sp + 96
	return
	// succ:  fn0000000000482070_exit
l0000000000482188:
	w31 = w21 - 0x00000001
	NZCV = cond(w31)
l0000000000482194:
	x27 = 0x0000000000000008
	x22 = x24
	w21 = w24
	goto l0000000000482114
	// succ:  l0000000000482114
fn0000000000482070_exit:


// fn00000000004821A4
// Return size: 0
void fn00000000004821A4()
fn00000000004821A4_entry:
	// succ:  l00000000004821A4
l00000000004821A4:
	sp = fp
	sp = sp + -224
	Mem0[sp:word64] = x29
	sp = sp + 8
	Mem0[sp:word64] = x30
	x29 = x31 + 0x0000000000000000
	v6 = sp + 32
	Mem0[v6:word64] = x21
	v6 = v6 + 8
	Mem0[v6:word64] = x22
	v9 = sp + 16
	Mem0[v9:word64] = x19
	v9 = v9 + 8
	Mem0[v9:word64] = x20
	v12 = sp + 48
	Mem0[v12:word64] = x23
	v12 = v12 + 8
	Mem0[v12:word64] = x24
	v15 = sp + 64
	Mem0[v15:word64] = x25
	v15 = v15 + 8
	Mem0[v15:word64] = x26
	v18 = sp + 80
	Mem0[v18:word64] = x27
	v18 = v18 + 8
	Mem0[v18:word64] = x28
	x31 = x3 - x2
	NZCV = cond(x31)
	Mem0[x29 + 144:word64] = x0
	x21 = x2
	x23 = x3
	x22 = x1
	w20 = w4
	branch Test(ULE,ZC) l0000000000482BC4
	// succ:  l00000000004821DC l0000000000482BC4
l00000000004821DC:
	x19 = x0
	x0 = 0x00000000004C2000
	x0 = x0 + 0x00000000000000B0
	Mem0[x29 + 160:word64] = x0
	x0 = 0x00000000004C1000
	x0 = x0 + 0x00000000000003D8
	w24 = w4 & 0x00000010
	w26 = w4 & 0x00000020
	Mem0[x29 + 168:word64] = x0
	// succ:  l0000000000482200
l0000000000482200:
	x27 = x21 + 0x0000000000000001
	v31 = Mem0[x21:byte]
	w25 = (word32) v31
	branch w24 == 0x00000000 l000000000048222C
	// succ:  l000000000048220C l000000000048222C
l000000000048220C:
	__ctype_b_loc()
	sp = sp + 0xFFFFFFFFFFFFFFF8
	x0 = Mem0[x0:word64]
	w28 = w25
	v34 = Mem0[x0 + x28 * 2:word16]
	w0 = (word32) v34
	branch (w0 & 0x00000100) == 0x00000000 l000000000048222C
	// succ:  l0000000000482220 l000000000048222C
l0000000000482220:
	__ctype_tolower_loc()
	sp = sp + 0xFFFFFFFFFFFFFFF8
	x0 = Mem0[x0:word64]
	w25 = Mem0[x0 + x28:word32]
	// succ:  l000000000048222C
l000000000048222C:
	x31 = x22 - x19
	NZCV = cond(x31)
	branch Test(ULE,ZC) l0000000000482A90
	// succ:  l0000000000482234 l0000000000482A90
l0000000000482234:
	v36 = Mem0[x19:byte]
	w6 = (word32) v36
	// succ:  l0000000000482238
l0000000000482238:
	branch w26 == 0x00000000 l0000000000482248
	// succ:  l000000000048223C l0000000000482248
l000000000048223C:
	v38 = Mem0[x21 + 1:byte]
	w0 = (word32) v38
	w31 = w0 - 0x00000028
	NZCV = cond(w31)
	branch Test(EQ,Z) l00000000004827BC
	// succ:  l0000000000482248 l00000000004827BC
l0000000000482248:
	w31 = w25 - 0x0000003F
	NZCV = cond(w31)
	branch Test(EQ,Z) l00000000004824F8
	// succ:  l0000000000482250 l00000000004824F8
l0000000000482250:
	branch Test(LE,ZCV) l00000000004822DC
	// succ:  l0000000000482254 l00000000004822DC
l0000000000482254:
	w31 = w25 - 0x0000005B
	NZCV = cond(w31)
	branch Test(EQ,Z) l0000000000482570
	// succ:  l000000000048225C l0000000000482570
l000000000048225C:
	w31 = w25 - 0x0000005C
	NZCV = cond(w31)
	branch Test(NE,Z) l0000000000482538
	// succ:  l0000000000482264 l0000000000482538
l0000000000482264:
	x31 = x27 - x23
	NZCV = cond(x31)
	branch Test(EQ,Z) l00000000004823F0
	// succ:  l000000000048226C l00000000004823F0
l000000000048226C:
	branch (w20 & 0x00000002) == 0x00000000 l0000000000482808
	// succ:  l0000000000482270 l0000000000482808
l0000000000482270:
	x27 = x21 + 0x0000000000000002
	x31 = x23 - x27
	NZCV = cond(x31)
	v42 = Mem0[x21 + 1:byte]
	w25 = (word32) v42
	branch Test(ULT,C) l00000000004823F0
	// succ:  l0000000000482280 l00000000004823F0
l0000000000482280:
	branch w24 == 0x00000000 l00000000004822C0
	// succ:  l0000000000482284 l00000000004822C0
l0000000000482284:
	Mem0[x29 + 216:word64] = x6
	__ctype_b_loc()
	sp = sp + 0xFFFFFFFFFFFFFFF8
	x21 = Mem0[x0:word64]
	w28 = w25
	v45 = Mem0[x21 + x28 * 2:word16]
	w0 = (word32) v45
	x6 = Mem0[x29 + 216:word64]
	branch (w0 & 0x00000100) == 0x00000000 l00000000004822B0
	// succ:  l00000000004822A0 l00000000004822B0
l00000000004822A0:
	__ctype_tolower_loc()
	sp = sp + 0xFFFFFFFFFFFFFFF8
	x0 = Mem0[x0:word64]
	x6 = Mem0[x29 + 216:word64]
	w25 = Mem0[x0 + x28:word32]
	// succ:  l00000000004822B0
l00000000004822B0:
l00000000004822C0:
	NZCV = cond(w6 - w25)
	branch Test(NE,Z) l00000000004823F0
	// succ:  l00000000004822C8 l00000000004823F0
l00000000004822C8:
	x31 = x23 - x27
	NZCV = cond(x31)
	x19 = x19 + 0x0000000000000001
	branch Test(ULE,ZC) l0000000000482BC8
	// succ:  l00000000004822D4 l0000000000482BC8
l00000000004822D4:
	x21 = x27
	goto l0000000000482200
	// succ:  l0000000000482200
l00000000004822DC:
	w31 = w25 - 0x0000002A
	NZCV = cond(w31)
	branch Test(NE,Z) l0000000000482538
	// succ:  l00000000004822E4 l0000000000482538
l00000000004822E4:
	x31 = x27 - x23
	NZCV = cond(x31)
	branch Test(EQ,Z) l0000000000482438
	// succ:  l00000000004822EC l0000000000482438
l00000000004822EC:
	branch (w20 & 0x00000004) == 0x00000000 l00000000004822F8
	// succ:  l00000000004822F0 l00000000004822F8
l00000000004822F0:
	w31 = w6 - 0x0000002E
	NZCV = cond(w31)
	branch Test(EQ,Z) l0000000000482AB8
	// succ:  l00000000004822F8 l0000000000482AB8
l00000000004822F8:
	v48 = Mem0[x21 + 1:byte]
	w25 = (word32) v48
	x21 = x21 + 0x0000000000000002
	w31 = w25 - 0x0000003F
	NZCV = cond(w31)
	branch Test(NE,Z) l0000000000482CAC
	// succ:  l0000000000482308 l0000000000482CAC
l0000000000482308:
	w27 = w20 & 0x00000001
	// succ:  l000000000048230C
l000000000048230C:
	branch w27 == 0x00000000 l0000000000482318
	// succ:  l0000000000482310 l0000000000482318
l0000000000482310:
	w31 = w6 - 0x0000002F
	NZCV = cond(w31)
	branch Test(EQ,Z) l00000000004823F0
	// succ:  l0000000000482318 l00000000004823F0
l0000000000482318:
	w31 = w25 - 0x0000003F
	NZCV = cond(w31)
	branch w26 == 0x00000000 l0000000000482410
	// succ:  l0000000000482320 l0000000000482410
l0000000000482320:
	branch Test(EQ,Z) l0000000000482458
	// succ:  l0000000000482324 l0000000000482458
l0000000000482324:
	w31 = w25 - 0x0000002A
	NZCV = cond(w31)
	branch Test(EQ,Z) l00000000004824A4
	// succ:  l000000000048232C l00000000004824A4
l000000000048232C:
	x31 = x23 - x21
	NZCV = cond(x31)
	branch Test(EQ,Z) l0000000000482438
	// succ:  l0000000000482334 l0000000000482438
l0000000000482334:
	v50 = Mem0[x21:byte]
	w25 = (word32) v50
	x21 = x21 + 0x0000000000000001
	w31 = w25 - 0x0000002A
	NZCV = cond(w31)
	branch Test(EQ,Z) l000000000048230C
	// succ:  l0000000000482344 l000000000048230C
l0000000000482344:
	w31 = w25 - 0x0000003F
	NZCV = cond(w31)
	branch Test(EQ,Z) l000000000048230C
	// succ:  l000000000048234C l000000000048230C
l000000000048234C:
	branch (w20 & 0x00000002) == 0x00000000 l0000000000482358
	// succ:  l0000000000482350 l0000000000482358
l0000000000482350:
	w31 = w25 - 0x0000005C
	NZCV = cond(w31)
	branch Test(EQ,Z) l0000000000482C98
	// succ:  l0000000000482358 l0000000000482C98
l0000000000482358:
l000000000048235C:
	branch w24 == 0x00000000 l0000000000482384
	// succ:  l0000000000482360 l0000000000482384
l0000000000482360:
	__ctype_b_loc()
	sp = sp + 0xFFFFFFFFFFFFFFF8
	x0 = Mem0[x0:word64]
	w27 = w28
	v52 = Mem0[x0 + x27 * 2:word16]
	w0 = (word32) v52
	branch (w0 & 0x00000100) == 0x00000000 l0000000000482384
	// succ:  l0000000000482374 l0000000000482384
l0000000000482374:
	__ctype_tolower_loc()
	sp = sp + 0xFFFFFFFFFFFFFFF8
	x0 = Mem0[x0:word64]
	w28 = Mem0[x0 + x27:word32]
l0000000000482384:
	x31 = x22 - x19
	NZCV = cond(x31)
	x27 = x21 - 0x0000000000000001
	branch Test(ULE,ZC) l00000000004823F0
	// succ:  l0000000000482390 l00000000004823F0
l0000000000482390:
	x0 = 0x00000000004C2000
	x0 = x0 + 0x00000000000000A8
	w20 = w20 & 0xFFFFFFFB
	Mem0[x29 + 112:word64] = x0
	// succ:  l00000000004823A0
l00000000004823A0:
	branch w26 != 0x00000000 l0000000000482B10
	// succ:  l00000000004823A4 l0000000000482B10
l00000000004823A4:
	w31 = w25 - 0x0000005B
	NZCV = cond(w31)
	branch Test(EQ,Z) l0000000000482AE4
	// succ:  l00000000004823AC l0000000000482AE4
l00000000004823AC:
	branch w24 == 0x00000000 l0000000000482B6C
	// succ:  l00000000004823B0 l0000000000482B6C
l00000000004823B0:
	__ctype_b_loc()
	sp = sp + 0xFFFFFFFFFFFFFFF8
	v53 = Mem0[x19:byte]
	w1 = (word32) v53
	x0 = Mem0[x0:word64]
	w2 = w1
	v55 = Mem0[x0 + x2 * 2:word16]
	w0 = (word32) v55
	branch (w0 & 0x00000100) == 0x00000000 l00000000004823DC
	// succ:  l00000000004823C8 l00000000004823DC
l00000000004823C8:
	Mem0[x29 + 200:word64] = x2
	__ctype_tolower_loc()
	sp = sp + 0xFFFFFFFFFFFFFFF8
	x0 = Mem0[x0:word64]
	x2 = Mem0[x29 + 200:word64]
	w1 = Mem0[x0 + x2:word32]
	// succ:  l00000000004823DC
l00000000004823DC:
	NZCV = cond(w28 - w1)
	branch Test(EQ,Z) l0000000000482AE4
	// succ:  l00000000004823E4 l0000000000482AE4
l00000000004823E4:
	x19 = x19 + 0x0000000000000001
	x31 = x19 - x22
	NZCV = cond(x31)
	branch Test(NE,Z) l00000000004823A0
	// succ:  l00000000004823F0 l00000000004823A0
l00000000004823F0:
	w0 = 0x00000001
	// succ:  l00000000004823F4
l00000000004823F4:
	v76 = sp + 16
	x19 = Mem0[v76:word64]
	v76 = v76 + 8
	x20 = Mem0[v76:word64]
	v77 = sp + 32
	x21 = Mem0[v77:word64]
	v77 = v77 + 8
	x22 = Mem0[v77:word64]
	v78 = sp + 48
	x23 = Mem0[v78:word64]
	v78 = v78 + 8
	x24 = Mem0[v78:word64]
	v79 = sp + 64
	x25 = Mem0[v79:word64]
	v79 = v79 + 8
	x26 = Mem0[v79:word64]
	v80 = sp + 80
	x27 = Mem0[v80:word64]
	v80 = v80 + 8
	x28 = Mem0[v80:word64]
	x29 = Mem0[sp:word64]
	sp = sp + 8
	x30 = Mem0[sp:word64]
	sp = sp + 224
	return
	// succ:  fn00000000004821A4_exit
l0000000000482410:
	branch Test(NE,Z) l000000000048232C
	// succ:  l0000000000482414 l000000000048232C
l0000000000482414:
	branch w6 == 0x00000000 l00000000004823F0
	// succ:  l0000000000482418 l00000000004823F0
l0000000000482418:
	x0 = x19 + 0x0000000000000001
	x31 = x22 - x0
	NZCV = cond(x31)
	w6 = 0x00000000
	branch Test(ULE,ZC) l000000000048242C
	// succ:  l0000000000482428 l000000000048242C
l0000000000482428:
	v66 = Mem0[x19 + 1:byte]
	w6 = (word32) v66
	// succ:  l000000000048242C
l000000000048242C:
	x31 = x23 - x21
	NZCV = cond(x31)
	x19 = x0
	branch Test(NE,Z) l0000000000482334
	// succ:  l0000000000482438 l0000000000482334
l0000000000482438:
	w0 = 0x00000000
	// succ:  l000000000048243C
l000000000048243C:
	v58 = sp + 16
	x19 = Mem0[v58:word64]
	v58 = v58 + 8
	x20 = Mem0[v58:word64]
	v59 = sp + 32
	x21 = Mem0[v59:word64]
	v59 = v59 + 8
	x22 = Mem0[v59:word64]
	v60 = sp + 48
	x23 = Mem0[v60:word64]
	v60 = v60 + 8
	x24 = Mem0[v60:word64]
	v61 = sp + 64
	x25 = Mem0[v61:word64]
	v61 = v61 + 8
	x26 = Mem0[v61:word64]
	v62 = sp + 80
	x27 = Mem0[v62:word64]
	v62 = v62 + 8
	x28 = Mem0[v62:word64]
	x29 = Mem0[sp:word64]
	sp = sp + 8
	x30 = Mem0[sp:word64]
	sp = sp + 224
	return
	// succ:  fn00000000004821A4_exit
l0000000000482458:
	v65 = Mem0[x21:byte]
	w0 = (word32) v65
	w31 = w0 - 0x00000028
	NZCV = cond(w31)
	branch Test(NE,Z) l0000000000482414
	// succ:  l0000000000482464 l0000000000482414
l0000000000482464:
	x31 = x22 - x19
	NZCV = cond(x31)
	branch Test(UGT,ZC) l000000000048247C
	// succ:  l000000000048246C l000000000048247C
l000000000048246C:
	goto l00000000004823F0
	// succ:  l00000000004823F0
l0000000000482470:
	x19 = x19 + 0x0000000000000001
	x31 = x19 - x22
	NZCV = cond(x31)
	branch Test(EQ,Z) l00000000004823F0
	// succ:  l000000000048247C l00000000004823F0
l000000000048247C:
	w0 = 0x0000003F
	x1 = x19
	x2 = x22
	x3 = x21
	x4 = x23
	w5 = w20
	call fn0000000000482E58 (retsize: 0;)
	branch w0 != 0x00000000 l0000000000482470
	// succ:  l000000000048249C l0000000000482470
l000000000048249C:
	w0 = 0x00000000
	goto l000000000048243C
	// succ:  l000000000048243C
l00000000004824A4:
	v57 = Mem0[x21:byte]
	w0 = (word32) v57
	w31 = w0 - 0x00000028
	NZCV = cond(w31)
	branch Test(NE,Z) l000000000048232C
	// succ:  l00000000004824B0 l000000000048232C
l00000000004824B0:
	x31 = x22 - x19
	NZCV = cond(x31)
	x25 = x19
	branch Test(UGT,ZC) l00000000004824CC
	// succ:  l00000000004824BC l00000000004824CC
l00000000004824BC:
	goto l0000000000482B9C
	// succ:  l0000000000482B9C
l00000000004824C0:
	x25 = x25 + 0x0000000000000001
	x31 = x25 - x22
	NZCV = cond(x31)
	branch Test(EQ,Z) l0000000000482B9C
	// succ:  l00000000004824CC l0000000000482B9C
l00000000004824CC:
	w0 = 0x0000002A
	x1 = x25
	x2 = x22
	x3 = x21
	x4 = x23
	w5 = w20
	Mem0[x29 + 216:word64] = x6
	call fn0000000000482E58 (retsize: 0;)
	x6 = Mem0[x29 + 216:word64]
	branch w0 != 0x00000000 l00000000004824C0
	// succ:  l00000000004824F4 l00000000004824C0
l00000000004824F4:
	goto l0000000000482438
	// succ:  l0000000000482438
l00000000004824F8:
	branch w6 == 0x00000000 l00000000004823F0
	// succ:  l00000000004824FC l00000000004823F0
l00000000004824FC:
	w0 = w20 & 0x00000001
	branch (w20 & 0x00000001) == 0x00000000 l000000000048250C
	// succ:  l0000000000482504 l000000000048250C
l0000000000482504:
	w31 = w6 - 0x0000002F
	NZCV = cond(w31)
	branch Test(EQ,Z) l00000000004823F0
	// succ:  l000000000048250C l00000000004823F0
l000000000048250C:
	branch (w20 & 0x00000004) == 0x00000000 l00000000004822C8
	// succ:  l0000000000482510 l00000000004822C8
l0000000000482510:
	w31 = w6 - 0x0000002E
	NZCV = cond(w31)
	branch Test(NE,Z) l00000000004822C8
	// succ:  l0000000000482518 l00000000004822C8
l0000000000482518:
	x3 = Mem0[x29 + 144:word64]
	x31 = x19 - x3
	NZCV = cond(x31)
	branch Test(EQ,Z) l00000000004823F0
	// succ:  l0000000000482524 l00000000004823F0
l0000000000482524:
	branch w0 == 0x00000000 l00000000004822C8
	// succ:  l0000000000482528 l00000000004822C8
l0000000000482528:
	v75 = Mem0[x19 + -1:byte]
	w0 = (word32) v75
	w31 = w0 - 0x0000002F
	NZCV = cond(w31)
	branch Test(NE,Z) l00000000004822C8
	// succ:  l0000000000482534 l00000000004822C8
l0000000000482534:
	goto l00000000004823F0
	// succ:  l00000000004823F0
l0000000000482538:
	w25 = w25 & 0x000000FF
	w28 = w6
	branch w24 == 0x00000000 l0000000000482564
	// succ:  l0000000000482544 l0000000000482564
l0000000000482544:
	__ctype_b_loc()
	sp = sp + 0xFFFFFFFFFFFFFFF8
	x0 = Mem0[x0:word64]
l0000000000482564:
	NZCV = cond(w25 - w28)
	branch Test(EQ,Z) l00000000004822C8
	// succ:  l000000000048256C l00000000004822C8
l000000000048256C:
	goto l00000000004823F0
	// succ:  l00000000004823F0
l0000000000482570:
	branch w6 == 0x00000000 l00000000004823F0
	// succ:  l0000000000482574 l00000000004823F0
l0000000000482574:
	x31 = x19 - x22
	NZCV = cond(x31)
	branch Test(EQ,Z) l00000000004823F0
	// succ:  l000000000048257C l00000000004823F0
l000000000048257C:
	branch (w20 & 0x00000004) == 0x00000000 l0000000000482588
	// succ:  l0000000000482580 l0000000000482588
l0000000000482580:
	w31 = w6 - 0x0000002E
	NZCV = cond(w31)
	branch Test(EQ,Z) l0000000000482A98
	// succ:  l0000000000482588 l0000000000482A98
l0000000000482588:
l00000000004827BC:
	w0 = w25 - 0x0000002A
	w31 = w0 - 0x00000001
	NZCV = cond(w31)
	branch Test(ULE,ZC) l00000000004827DC
	// succ:  l00000000004827C8 l00000000004827DC
l00000000004827C8:
	w0 = w25 - 0x0000003F
	w31 = w0 - 0x00000001
	NZCV = cond(w31)
	branch Test(ULE,ZC) l00000000004827DC
	// succ:  l00000000004827D4 l00000000004827DC
l00000000004827D4:
	w31 = w25 - 0x00000021
	NZCV = cond(w31)
	branch Test(NE,Z) l0000000000482248
	// succ:  l00000000004827DC l0000000000482248
l00000000004827DC:
	x3 = Mem0[x29 + 144:word64]
	w5 = w20 & 0xFFFFFFFB
	x31 = x3 - x19
	NZCV = cond(x31)
	w0 = w25
	x1 = x19
	x2 = x22
	x3 = x27
	x4 = x23
l0000000000482808:
	branch w24 == 0x00000000 l00000000004822C0
	// succ:  l000000000048280C l00000000004822C0
l000000000048280C:
	Mem0[x29 + 216:word64] = x6
	__ctype_b_loc()
	sp = sp + 0xFFFFFFFFFFFFFFF8
	x6 = Mem0[x29 + 216:word64]
	x21 = Mem0[x0:word64]
l0000000000482A90:
	w6 = 0x00000000
	goto l0000000000482238
	// succ:  l0000000000482238
l0000000000482A98:
	x3 = Mem0[x29 + 144:word64]
	x31 = x19 - x3
	NZCV = cond(x31)
	branch Test(EQ,Z) l00000000004823F0
	// succ:  l0000000000482AA4 l00000000004823F0
l0000000000482AA4:
	branch (w20 & 0x00000001) == 0x00000000 l0000000000482588
	// succ:  l0000000000482AA8 l0000000000482588
l0000000000482AA8:
	v74 = Mem0[x19 + -1:byte]
	w0 = (word32) v74
	w31 = w0 - 0x0000002F
	NZCV = cond(w31)
	branch Test(NE,Z) l0000000000482588
	// succ:  l0000000000482AB4 l0000000000482588
l0000000000482AB4:
	goto l00000000004823F0
	// succ:  l00000000004823F0
l0000000000482AB8:
	x3 = Mem0[x29 + 144:word64]
	x31 = x3 - x19
	NZCV = cond(x31)
	branch Test(EQ,Z) l00000000004823F0
	// succ:  l0000000000482AC4 l00000000004823F0
l0000000000482AC4:
	branch (w20 & 0x00000001) == 0x00000000 l00000000004822F8
	// succ:  l0000000000482AC8 l00000000004822F8
l0000000000482AC8:
	v73 = Mem0[x19 + -1:byte]
	w0 = (word32) v73
	w31 = w0 - 0x0000002F
	NZCV = cond(w31)
	branch Test(NE,Z) l00000000004822F8
	// succ:  l0000000000482AD4 l00000000004822F8
l0000000000482AD4:
	goto l00000000004823F0
	// succ:  l00000000004823F0
l0000000000482AD8:
	v72 = Mem0[x19:byte]
	w0 = (word32) v72
	// succ:  l0000000000482ADC
l0000000000482ADC:
	NZCV = cond(w28 - w0)
	branch Test(NE,Z) l00000000004823E4
	// succ:  l0000000000482AE4 l00000000004823E4
l0000000000482AE4:
	branch x19 == 0x0000000000000000 l00000000004823E4
	// succ:  l0000000000482AE8 l00000000004823E4
l0000000000482AE8:
	branch x27 == 0x0000000000000000 l00000000004823E4
	// succ:  l0000000000482AEC l00000000004823E4
l0000000000482AEC:
	x0 = x19
	x1 = x22
	x2 = x27
	x3 = x23
	w4 = w20
	call fn00000000004821A4 (retsize: 0;)
	branch w0 != 0x00000000 l00000000004823E4
	// succ:  l0000000000482B08 l00000000004823E4
l0000000000482B08:
	w0 = 0x00000000
	goto l000000000048243C
	// succ:  l000000000048243C
l0000000000482B10:
	v67 = Mem0[x21:byte]
	w1 = (word32) v67
	w31 = w1 - 0x00000028
	NZCV = cond(w31)
	branch Test(EQ,Z) l0000000000482AE4
	// succ:  l0000000000482B1C l0000000000482AE4
l0000000000482B1C:
	v68 = Mem0[x21 + -1:byte]
	w1 = (word32) v68
	x0 = Mem0[x29 + 112:word64]
	strchr(x0, x1)
	sp = sp + 0xFFFFFFFFFFFFFFF8
	branch x0 != 0x0000000000000000 l0000000000482AE4
	// succ:  l0000000000482B2C l0000000000482AE4
l0000000000482B2C:
	w31 = w25 - 0x0000005B
	NZCV = cond(w31)
	branch Test(EQ,Z) l0000000000482AE4
	// succ:  l0000000000482B34 l0000000000482AE4
l0000000000482B34:
	branch w24 == 0x00000000 l0000000000482AD8
	// succ:  l0000000000482B38 l0000000000482AD8
l0000000000482B38:
	__ctype_b_loc()
	sp = sp + 0xFFFFFFFFFFFFFFF8
	v69 = Mem0[x19:byte]
	w1 = (word32) v69
	x0 = Mem0[x0:word64]
	w2 = w1
	v71 = Mem0[x0 + x2 * 2:word16]
	w3 = (word32) v71
	w0 = w1
	branch (w3 & 0x00000100) == 0x00000000 l0000000000482ADC
	// succ:  l0000000000482B54 l0000000000482ADC
l0000000000482B54:
	Mem0[x29 + 200:word64] = x2
	__ctype_tolower_loc()
	sp = sp + 0xFFFFFFFFFFFFFFF8
	x0 = Mem0[x0:word64]
	x2 = Mem0[x29 + 200:word64]
	w0 = Mem0[x0 + x2:word32]
	goto l0000000000482ADC
	// succ:  l0000000000482ADC
l0000000000482B6C:
	v56 = Mem0[x19:byte]
	w1 = (word32) v56
	goto l00000000004823DC
	// succ:  l00000000004823DC
l0000000000482B9C:
	x0 = x21 + 0x0000000000000001
	x1 = x23
	w2 = 0x00000000
	Mem0[x29 + 216:word64] = x6
	call fn0000000000481BFC (retsize: 0;)
	x21 = x0
	x6 = Mem0[x29 + 216:word64]
	branch x0 != 0x0000000000000000 l000000000048232C
	// succ:  l0000000000482BBC l000000000048232C
l0000000000482BBC:
	w0 = 0x00000000
	goto l000000000048243C
	// succ:  l000000000048243C
l0000000000482BC4:
	x19 = Mem0[x29 + 144:word64]
	// succ:  l0000000000482BC8
l0000000000482BC8:
	x31 = x19 - x22
	NZCV = cond(x31)
	branch Test(EQ,Z) l0000000000482438
	// succ:  l0000000000482BD0 l0000000000482438
l0000000000482BD0:
	w0 = 0x00000001
	branch (w20 & 0x00000008) == 0x00000000 l00000000004823F4
	// succ:  l0000000000482BD8 l00000000004823F4
l0000000000482BD8:
	v46 = Mem0[x19:byte]
	w1 = (word32) v46
	w31 = w1 - 0x0000002F
	NZCV = cond(w31)
	branch Test(NE,Z) l00000000004823F4
	// succ:  l0000000000482BE4 l00000000004823F4
l0000000000482BE4:
	goto l0000000000482438
	// succ:  l0000000000482438
l0000000000482C98:
	v51 = Mem0[x21:byte]
	w28 = (word32) v51
	goto l000000000048235C
	// succ:  l000000000048235C
l0000000000482CAC:
	w31 = w25 - 0x0000002A
	NZCV = cond(w31)
	branch Test(NE,Z) l000000000048234C
	// succ:  l0000000000482CB4 l000000000048234C
l0000000000482CB4:
	w27 = w20 & 0x00000001
	goto l000000000048230C
	// succ:  l000000000048230C
fn00000000004821A4_exit:


// fn0000000000482E58
// Return size: 0
void fn0000000000482E58()
fn0000000000482E58_entry:
	// succ:  l0000000000482E58
l0000000000482E58:
	sp = fp
	sp = sp + -144
	Mem0[sp:word64] = x29
	sp = sp + 8
	Mem0[sp:word64] = x30
	x29 = x31 + 0x0000000000000000
	v8 = sp + 32
	Mem0[v8:word64] = x21
	v8 = v8 + 8
	Mem0[v8:word64] = x22
	v11 = sp + 48
	Mem0[v11:word64] = x23
	v11 = v11 + 8
	Mem0[v11:word64] = x24
	v14 = sp + 16
	Mem0[v14:word64] = x19
	v14 = v14 + 8
	Mem0[v14:word64] = x20
	v17 = sp + 64
	Mem0[v17:word64] = x25
	v17 = v17 + 8
	Mem0[v17:word64] = x26
	v20 = sp + 80
	Mem0[v20:word64] = x27
	v20 = v20 + 8
	Mem0[v20:word64] = x28
	x28 = x3
	v23 = Mem0[x3:byte]
	w3 = (word32) v23
	w19 = w0
	w31 = w3 - 0x00000028
	NZCV = cond(w31)
	x23 = x1
	x26 = x2
fn0000000000482E58_exit:


// fn0000000000483288
// Return size: 0
void fn0000000000483288()
fn0000000000483288_entry:
	// succ:  l0000000000483288
l0000000000483288:
	sp = fp
	sp = sp + -224
	Mem0[sp:word64] = x29
	sp = sp + 8
	Mem0[sp:word64] = x30
	x29 = x31 + 0x0000000000000000
	v6 = sp + 48
	Mem0[v6:word64] = x23
	v6 = v6 + 8
	Mem0[v6:word64] = x24
	v9 = sp + 16
	Mem0[v9:word64] = x19
	v9 = v9 + 8
	Mem0[v9:word64] = x20
	v12 = sp + 64
	Mem0[v12:word64] = x25
	v12 = v12 + 8
	Mem0[v12:word64] = x26
	v15 = sp + 32
	Mem0[v15:word64] = x21
	v15 = v15 + 8
	Mem0[v15:word64] = x22
	v18 = sp + 80
	Mem0[v18:word64] = x27
	v18 = v18 + 8
	Mem0[v18:word64] = x28
	x31 = x3 - x2
	NZCV = cond(x31)
	Mem0[x29 + 176:word64] = x0
	x19 = x2
	x26 = x3
	x24 = x1
	w23 = w4
	branch Test(ULE,ZC) l0000000000483D40
	// succ:  l00000000004832C0 l0000000000483D40
l00000000004832C0:
	x28 = 0x00000000004D8000
	x28 = x28 + 0xFFFFFFFFFFFFF870
	x20 = x0
	x0 = x28 + 0xFFFFFFFFFFFFFC10
	Mem0[x29 + 168:word64] = x0
	x0 = 0x00000000004C2000
	x0 = x0 + 0x00000000000000B0
	Mem0[x29 + 128:word64] = x28
	w25 = w4 & 0x00000010
	w27 = w4 & 0x00000020
	Mem0[x29 + 184:word64] = x0
	// succ:  l00000000004832EC
l00000000004832EC:
	x1 = x19 + 0x0000000000000004
	Mem0[x29 + 136:word64] = x1
	w21 = Mem0[x19:word32]
	branch w25 == 0x00000000 l0000000000483314
	// succ:  l00000000004832FC l0000000000483314
l00000000004832FC:
	w0 = w21
	call iswupper (retsize: 0;)
	branch w0 == 0x00000000 l0000000000483314
	// succ:  l0000000000483308 l0000000000483314
l0000000000483308:
	w0 = w21
	call towlower (retsize: 0;)
	w21 = w0
	// succ:  l0000000000483314
l0000000000483314:
	x31 = x24 - x20
	NZCV = cond(x31)
	branch Test(ULE,ZC) l0000000000483BF4
	// succ:  l000000000048331C l0000000000483BF4
l000000000048331C:
	w22 = Mem0[x20:word32]
	// succ:  l0000000000483320
l0000000000483320:
	branch w27 == 0x00000000 l0000000000483330
	// succ:  l0000000000483324 l0000000000483330
l0000000000483324:
	w0 = Mem0[x19 + 4:word32]
	w31 = w0 - 0x00000028
	NZCV = cond(w31)
	branch Test(EQ,Z) l0000000000483798
	// succ:  l0000000000483330 l0000000000483798
l0000000000483330:
	w31 = w21 - 0x0000003F
	NZCV = cond(w31)
	branch Test(EQ,Z) l00000000004835D8
	// succ:  l0000000000483338 l00000000004835D8
l0000000000483338:
	branch Test(ULE,ZC) l00000000004833CC
	// succ:  l000000000048333C l00000000004833CC
l000000000048333C:
	w31 = w21 - 0x0000005B
	NZCV = cond(w31)
	branch Test(EQ,Z) l0000000000483640
	// succ:  l0000000000483344 l0000000000483640
l0000000000483344:
	w31 = w21 - 0x0000005C
	NZCV = cond(w31)
	branch Test(NE,Z) l0000000000483618
	// succ:  l000000000048334C l0000000000483618
l000000000048334C:
	x3 = Mem0[x29 + 136:word64]
	x31 = x3 - x26
	NZCV = cond(x31)
	branch Test(EQ,Z) l00000000004834C8
	// succ:  l0000000000483358 l00000000004834C8
l0000000000483358:
	branch (w23 & 0x00000002) == 0x00000000 l00000000004837E4
	// succ:  l000000000048335C l00000000004837E4
l000000000048335C:
	x1 = x19 + 0x0000000000000008
	Mem0[x29 + 136:word64] = x1
	x31 = x26 - x1
	NZCV = cond(x31)
	w21 = Mem0[x19 + 4:word32]
	branch Test(ULT,C) l00000000004834C8
	// succ:  l0000000000483370 l00000000004834C8
l0000000000483370:
	w1 = w22
	branch w25 == 0x00000000 l00000000004833AC
	// succ:  l0000000000483378 l00000000004833AC
l0000000000483378:
	w0 = w21
	call iswupper (retsize: 0;)
	branch w0 == 0x00000000 l0000000000483390
	// succ:  l0000000000483384 l0000000000483390
l0000000000483384:
	w0 = w21
	call towlower (retsize: 0;)
	w21 = w0
	// succ:  l0000000000483390
l0000000000483390:
	w0 = w22
	call iswupper (retsize: 0;)
	w1 = w22
	branch w0 == 0x00000000 l00000000004833AC
	// succ:  l00000000004833A0 l00000000004833AC
l00000000004833A0:
	w0 = w22
	call towlower (retsize: 0;)
	w1 = w0
	// succ:  l00000000004833AC
l00000000004833AC:
	NZCV = cond(w1 - w21)
	branch Test(NE,Z) l00000000004834C8
	// succ:  l00000000004833B4 l00000000004834C8
l00000000004833B4:
	x3 = Mem0[x29 + 136:word64]
	x20 = x20 + 0x0000000000000004
	x31 = x26 - x3
	NZCV = cond(x31)
	branch Test(ULE,ZC) l0000000000483D44
	// succ:  l00000000004833C4 l0000000000483D44
l00000000004833C4:
	x19 = x3
	goto l00000000004832EC
	// succ:  l00000000004832EC
l00000000004833CC:
	w31 = w21 - 0x0000002A
	NZCV = cond(w31)
	branch Test(NE,Z) l0000000000483618
	// succ:  l00000000004833D4 l0000000000483618
l00000000004833D4:
	x3 = Mem0[x29 + 136:word64]
	x31 = x3 - x26
	NZCV = cond(x31)
	branch Test(EQ,Z) l0000000000483510
	// succ:  l00000000004833E0 l0000000000483510
l00000000004833E0:
	branch (w23 & 0x00000004) == 0x00000000 l00000000004833EC
	// succ:  l00000000004833E4 l00000000004833EC
l00000000004833E4:
	w31 = w22 - 0x0000002E
	NZCV = cond(w31)
	branch Test(EQ,Z) l0000000000483C5C
	// succ:  l00000000004833EC l0000000000483C5C
l00000000004833EC:
	w21 = Mem0[x19 + 4:word32]
	x19 = x19 + 0x0000000000000008
	w31 = w21 - 0x0000003F
	NZCV = cond(w31)
	branch Test(NE,Z) l0000000000483DB4
	// succ:  l00000000004833FC l0000000000483DB4
l00000000004833FC:
	w28 = w23 & 0x00000001
	// succ:  l0000000000483400
l0000000000483400:
	branch w28 == 0x00000000 l000000000048340C
	// succ:  l0000000000483404 l000000000048340C
l0000000000483404:
	w31 = w22 - 0x0000002F
	NZCV = cond(w31)
	branch Test(EQ,Z) l00000000004834C8
	// succ:  l000000000048340C l00000000004834C8
l000000000048340C:
	w31 = w21 - 0x0000003F
	NZCV = cond(w31)
	branch w27 == 0x00000000 l00000000004834E8
	// succ:  l0000000000483414 l00000000004834E8
l0000000000483414:
	branch Test(EQ,Z) l0000000000483530
	// succ:  l0000000000483418 l0000000000483530
l0000000000483418:
	w31 = w21 - 0x0000002A
	NZCV = cond(w31)
	branch Test(EQ,Z) l0000000000483574
	// succ:  l0000000000483420 l0000000000483574
l0000000000483420:
	x31 = x26 - x19
	NZCV = cond(x31)
	branch Test(EQ,Z) l0000000000483510
	// succ:  l0000000000483428 l0000000000483510
l0000000000483428:
	w21 = Mem0[x19:word32]
	x19 = x19 + 0x0000000000000004
	w31 = w21 - 0x0000002A
	NZCV = cond(w31)
	branch Test(EQ,Z) l0000000000483400
	// succ:  l0000000000483438 l0000000000483400
l0000000000483438:
	w31 = w21 - 0x0000003F
	NZCV = cond(w31)
	branch Test(EQ,Z) l0000000000483400
	// succ:  l0000000000483440 l0000000000483400
l0000000000483440:
	w28 = w21
	branch (w23 & 0x00000002) == 0x00000000 l0000000000483450
	// succ:  l0000000000483448 l0000000000483450
l0000000000483448:
	w31 = w21 - 0x0000005C
	NZCV = cond(w31)
	branch Test(EQ,Z) l0000000000483DAC
	// succ:  l0000000000483450 l0000000000483DAC
l0000000000483450:
	branch w25 == 0x00000000 l000000000048346C
	// succ:  l0000000000483454 l000000000048346C
l0000000000483454:
	w0 = w28
	call iswupper (retsize: 0;)
	branch w0 == 0x00000000 l000000000048346C
	// succ:  l0000000000483460 l000000000048346C
l0000000000483460:
	w0 = w28
	call towlower (retsize: 0;)
	w28 = w0
	// succ:  l000000000048346C
l000000000048346C:
	x31 = x24 - x20
	NZCV = cond(x31)
	x22 = x19 - 0x0000000000000004
	branch Test(ULE,ZC) l00000000004834C8
	// succ:  l0000000000483478 l00000000004834C8
l0000000000483478:
	x0 = 0x00000000004C1000
	w23 = w23 & 0xFFFFFFFB
	x0 = x0 + 0x0000000000000468
	Mem0[x29 + 128:word32] = w23
	Mem0[x29 + 136:word64] = x0
	// succ:  l000000000048348C
l000000000048348C:
	branch w27 != 0x00000000 l0000000000483CA8
	// succ:  l0000000000483490 l0000000000483CA8
l0000000000483490:
	w31 = w21 - 0x0000005B
	NZCV = cond(w31)
	branch Test(EQ,Z) l0000000000483C7C
	// succ:  l0000000000483498 l0000000000483C7C
l0000000000483498:
	branch w25 == 0x00000000 l0000000000483CE8
	// succ:  l000000000048349C l0000000000483CE8
l000000000048349C:
	w23 = Mem0[x20:word32]
	w0 = w23
	call iswupper (retsize: 0;)
	branch w0 == 0x00000000 l0000000000483CF4
	// succ:  l00000000004834AC l0000000000483CF4
l00000000004834AC:
	w0 = w23
	call towlower (retsize: 0;)
	// succ:  l00000000004834B4
l00000000004834B4:
	NZCV = cond(w28 - w0)
	branch Test(EQ,Z) l0000000000483C7C
	// succ:  l00000000004834BC l0000000000483C7C
l00000000004834BC:
	x20 = x20 + 0x0000000000000004
	x31 = x24 - x20
	NZCV = cond(x31)
	branch Test(UGT,ZC) l000000000048348C
	// succ:  l00000000004834C8 l000000000048348C
l00000000004834C8:
	w0 = 0x00000001
	// succ:  l00000000004834CC
l00000000004834CC:
	v52 = sp + 16
	x19 = Mem0[v52:word64]
	v52 = v52 + 8
	x20 = Mem0[v52:word64]
	v53 = sp + 32
	x21 = Mem0[v53:word64]
	v53 = v53 + 8
	x22 = Mem0[v53:word64]
	v54 = sp + 48
	x23 = Mem0[v54:word64]
	v54 = v54 + 8
	x24 = Mem0[v54:word64]
	v55 = sp + 64
	x25 = Mem0[v55:word64]
	v55 = v55 + 8
	x26 = Mem0[v55:word64]
	v56 = sp + 80
	x27 = Mem0[v56:word64]
	v56 = v56 + 8
	x28 = Mem0[v56:word64]
	x29 = Mem0[sp:word64]
	sp = sp + 8
	x30 = Mem0[sp:word64]
	sp = sp + 224
	return
	// succ:  fn0000000000483288_exit
l00000000004834E8:
	branch Test(NE,Z) l0000000000483420
	// succ:  l00000000004834EC l0000000000483420
l00000000004834EC:
	branch w22 == 0x00000000 l00000000004834C8
	// succ:  l00000000004834F0 l00000000004834C8
l00000000004834F0:
	x0 = x20 + 0x0000000000000004
	x31 = x24 - x0
	NZCV = cond(x31)
	w22 = 0x00000000
	branch Test(ULE,ZC) l0000000000483504
	// succ:  l0000000000483500 l0000000000483504
l0000000000483500:
	w22 = Mem0[x20 + 4:word32]
	// succ:  l0000000000483504
l0000000000483504:
	x31 = x26 - x19
	NZCV = cond(x31)
	x20 = x0
	branch Test(NE,Z) l0000000000483428
	// succ:  l0000000000483510 l0000000000483428
l0000000000483510:
	w0 = 0x00000000
	// succ:  l0000000000483514
l0000000000483514:
	v39 = sp + 16
	x19 = Mem0[v39:word64]
	v39 = v39 + 8
	x20 = Mem0[v39:word64]
	v40 = sp + 32
	x21 = Mem0[v40:word64]
	v40 = v40 + 8
	x22 = Mem0[v40:word64]
	v41 = sp + 48
	x23 = Mem0[v41:word64]
	v41 = v41 + 8
	x24 = Mem0[v41:word64]
	v42 = sp + 64
	x25 = Mem0[v42:word64]
	v42 = v42 + 8
	x26 = Mem0[v42:word64]
	v43 = sp + 80
	x27 = Mem0[v43:word64]
	v43 = v43 + 8
	x28 = Mem0[v43:word64]
	x29 = Mem0[sp:word64]
	sp = sp + 8
	x30 = Mem0[sp:word64]
	sp = sp + 224
	return
	// succ:  fn0000000000483288_exit
l0000000000483530:
	w0 = Mem0[x19:word32]
	w31 = w0 - 0x00000028
	NZCV = cond(w31)
	branch Test(NE,Z) l00000000004834EC
	// succ:  l000000000048353C l00000000004834EC
l000000000048353C:
	x31 = x24 - x20
	NZCV = cond(x31)
	// succ:  l0000000000483540
l0000000000483540:
	branch Test(ULE,ZC) l00000000004834C8
	// succ:  l0000000000483544 l00000000004834C8
l0000000000483544:
	x1 = x20
	w0 = 0x0000003F
	x2 = x24
	x3 = x19
	x4 = x26
	w5 = w23
	x20 = x20 + 0x0000000000000004
	call fn0000000000483E24 (retsize: 0;)
	x31 = x24 - x20
	NZCV = cond(x31)
	branch w0 != 0x00000000 l0000000000483540
	// succ:  l000000000048356C l0000000000483540
l000000000048356C:
	w0 = 0x00000000
	goto l0000000000483514
	// succ:  l0000000000483514
l0000000000483574:
	w0 = Mem0[x19:word32]
	w31 = w0 - 0x00000028
	NZCV = cond(w31)
	branch Test(NE,Z) l0000000000483420
	// succ:  l0000000000483580 l0000000000483420
l0000000000483580:
	x31 = x24 - x20
	NZCV = cond(x31)
	x21 = x20
	branch Test(ULE,ZC) l00000000004835B8
	// succ:  l000000000048358C l00000000004835B8
l000000000048358C:
	x1 = x21
	w0 = 0x0000002A
	x2 = x24
	x3 = x19
	x4 = x26
	w5 = w23
	x21 = x21 + 0x0000000000000004
	call fn0000000000483E24 (retsize: 0;)
	x31 = x24 - x21
	NZCV = cond(x31)
	branch w0 == 0x00000000 l0000000000483510
	// succ:  l00000000004835B4 l0000000000483510
l00000000004835B4:
	branch Test(UGT,ZC) l000000000048358C
	// succ:  l00000000004835B8 l000000000048358C
l00000000004835B8:
	x0 = x19 + 0x0000000000000004
	x1 = x26
	w2 = 0x00000000
	call fn0000000000481D84 (retsize: 0;)
	x19 = x0
	branch x0 != 0x0000000000000000 l0000000000483420
	// succ:  l00000000004835D0 l0000000000483420
l00000000004835D0:
	w0 = 0x00000000
	goto l0000000000483514
	// succ:  l0000000000483514
l00000000004835D8:
	branch w22 == 0x00000000 l00000000004834C8
	// succ:  l00000000004835DC l00000000004834C8
l00000000004835DC:
	w0 = w23 & 0x00000001
	branch (w23 & 0x00000001) == 0x00000000 l00000000004835EC
	// succ:  l00000000004835E4 l00000000004835EC
l00000000004835E4:
	w31 = w22 - 0x0000002F
	NZCV = cond(w31)
	branch Test(EQ,Z) l00000000004834C8
	// succ:  l00000000004835EC l00000000004834C8
l00000000004835EC:
	branch (w23 & 0x00000004) == 0x00000000 l00000000004833B4
	// succ:  l00000000004835F0 l00000000004833B4
l00000000004835F0:
	w31 = w22 - 0x0000002E
	NZCV = cond(w31)
	branch Test(NE,Z) l00000000004833B4
	// succ:  l00000000004835F8 l00000000004833B4
l00000000004835F8:
	x1 = Mem0[x29 + 176:word64]
	x31 = x20 - x1
	NZCV = cond(x31)
	branch Test(EQ,Z) l00000000004834C8
	// succ:  l0000000000483604 l00000000004834C8
l0000000000483604:
	branch w0 == 0x00000000 l00000000004833B4
	// succ:  l0000000000483608 l00000000004833B4
l0000000000483608:
	w0 = Mem0[x20 + -4:word32]
	w31 = w0 - 0x0000002F
	NZCV = cond(w31)
	branch Test(NE,Z) l00000000004833B4
	// succ:  l0000000000483614 l00000000004833B4
l0000000000483614:
	goto l00000000004834C8
	// succ:  l00000000004834C8
l0000000000483618:
	branch w25 == 0x00000000 l0000000000483634
	// succ:  l000000000048361C l0000000000483634
l000000000048361C:
	w0 = w22
	call iswupper (retsize: 0;)
	branch w0 == 0x00000000 l0000000000483634
	// succ:  l0000000000483628 l0000000000483634
l0000000000483628:
	w0 = w22
	call towlower (retsize: 0;)
	w22 = w0
	// succ:  l0000000000483634
l0000000000483634:
	NZCV = cond(w21 - w22)
	branch Test(EQ,Z) l00000000004833B4
	// succ:  l000000000048363C l00000000004833B4
l000000000048363C:
	goto l00000000004834C8
	// succ:  l00000000004834C8
l0000000000483640:
	branch w22 == 0x00000000 l00000000004834C8
	// succ:  l0000000000483644 l00000000004834C8
l0000000000483644:
	x31 = x20 - x24
	NZCV = cond(x31)
	branch Test(EQ,Z) l00000000004834C8
	// succ:  l000000000048364C l00000000004834C8
l000000000048364C:
	branch (w23 & 0x00000004) == 0x00000000 l0000000000483658
	// succ:  l0000000000483650 l0000000000483658
l0000000000483650:
	w31 = w22 - 0x0000002E
	NZCV = cond(w31)
	branch Test(EQ,Z) l0000000000483C38
	// succ:  l0000000000483658 l0000000000483C38
l0000000000483658:
	branch w25 == 0x00000000 l0000000000483674
	// succ:  l000000000048365C l0000000000483674
l000000000048365C:
	w0 = w22
	call iswupper (retsize: 0;)
	branch w0 == 0x00000000 l0000000000483674
	// succ:  l0000000000483668 l0000000000483674
l0000000000483668:
	w0 = w22
	call towlower (retsize: 0;)
	w22 = w0
	// succ:  l0000000000483674
l0000000000483674:
	w0 = Mem0[x19 + 4:word32]
	w31 = w0 - 0x0000005E
	NZCV = cond(w31)
	w2 = (word32) Test(EQ,Z)
	w31 = w0 - 0x00000021
	NZCV = cond(w31)
	w1 = (word32) Test(EQ,Z)
	w1 = w2 | w1
	Mem0[x29 + 164:word32] = w1
	branch w1 != 0x00000000 l0000000000483810
	// succ:  l0000000000483694 l0000000000483810
l0000000000483694:
	x4 = Mem0[x29 + 136:word64]
	w19 = w0
	// succ:  l000000000048369C
l000000000048369C:
	w1 = w23 & 0x00000001
	Mem0[x29 + 160:word32] = w1
	w31 = w19 - 0x0000005B
	NZCV = cond(w31)
	x28 = x4 + 0x0000000000000004
	branch Test(EQ,Z) l000000000048376C
	// succ:  l00000000004836B0 l000000000048376C
l00000000004836B0:
	w3 = w23 & 0x00000002
	Mem0[x29 + 152:word32] = w3
	branch (w23 & 0x00000002) == 0x00000000 l0000000000483994
	// succ:  l00000000004836BC l0000000000483994
l00000000004836BC:
	w31 = w19 - 0x0000005C
	NZCV = cond(w31)
	w21 = w19
	branch Test(EQ,Z) l0000000000483800
	// succ:  l00000000004836C8 l0000000000483800
l00000000004836C8:
	branch w25 == 0x00000000 l00000000004836E4
	// succ:  l00000000004836CC l00000000004836E4
l00000000004836CC:
	w0 = w21
	call iswupper (retsize: 0;)
	branch w0 == 0x00000000 l00000000004836E4
	// succ:  l00000000004836D8 l00000000004836E4
l00000000004836D8:
	w0 = w21
	call towlower (retsize: 0;)
	w21 = w0
	// succ:  l00000000004836E4
l00000000004836E4:
	branch w19 == 0x00000000 l000000000048392C
	// succ:  l00000000004836E8 l000000000048392C
l00000000004836E8:
	x3 = x28 + 0x0000000000000004
	Mem0[x29 + 144:word64] = x3
	w19 = Mem0[x28:word32]
	branch w25 == 0x00000000 l0000000000483710
	// succ:  l00000000004836F8 l0000000000483710
l00000000004836F8:
	w0 = w19
	call iswupper (retsize: 0;)
	branch w0 == 0x00000000 l0000000000483710
	// succ:  l0000000000483704 l0000000000483710
l0000000000483704:
	w0 = w19
	call towlower (retsize: 0;)
	w19 = w0
	// succ:  l0000000000483710
l0000000000483710:
	w0 = Mem0[x29 + 160:word32]
	branch w0 == 0x00000000 l0000000000483720
	// succ:  l0000000000483718 l0000000000483720
l0000000000483718:
	w31 = w19 - 0x0000002F
	NZCV = cond(w31)
	branch Test(EQ,Z) l00000000004834C8
	// succ:  l0000000000483720 l00000000004834C8
l0000000000483720:
	w31 = w19 - 0x0000002D
	NZCV = cond(w31)
	w2 = w21
	branch Test(EQ,Z) l000000000048381C
	// succ:  l000000000048372C l000000000048381C
l000000000048372C:
	NZCV = cond(w22 - w21)
	branch Test(EQ,Z) l000000000048390C
	// succ:  l0000000000483734 l000000000048390C
l0000000000483734:
	x3 = Mem0[x29 + 128:word64]
	x0 = Mem0[x29 + 168:word64]
	Mem0[x3 + 3088:word32] = w22
	Mem0[x3 + 3096:word32] = w21
	x1 = x3 + 0xFFFFFFFFFFFFFC18
	Mem0[x29 + 208:word64] = x2
	call wcscoll (retsize: 0;)
	x2 = Mem0[x29 + 208:word64]
	branch (w0 & 0x00000000) == 0x00000000 l000000000048390C
	// succ:  l0000000000483758 l000000000048390C
l0000000000483758:
	w31 = w19 - 0x0000005D
	NZCV = cond(w31)
	branch Test(EQ,Z) l00000000004838F0
	// succ:  l0000000000483760 l00000000004838F0
l0000000000483760:
	x28 = Mem0[x29 + 144:word64]
	// succ:  l0000000000483764
l0000000000483764:
	w31 = w19 - 0x0000005B
	NZCV = cond(w31)
	branch Test(NE,Z) l00000000004836B0
	// succ:  l000000000048376C l00000000004836B0
l000000000048376C:
	w0 = Mem0[x28:word32]
	w31 = w0 - 0x0000003D
	NZCV = cond(w31)
	branch Test(EQ,Z) l00000000004839C0
	// succ:  l0000000000483778 l00000000004839C0
l0000000000483778:
	w31 = w0 - 0x0000003A
	NZCV = cond(w31)
	branch Test(EQ,Z) l0000000000483A38
	// succ:  l0000000000483780 l0000000000483A38
l0000000000483780:
	w31 = w0 - 0x0000002E
	NZCV = cond(w31)
	w21 = w19
	branch Test(EQ,Z) l0000000000483C04
	// succ:  l000000000048378C l0000000000483C04
l000000000048378C:
	w3 = w23 & 0x00000002
	Mem0[x29 + 152:word32] = w3
	goto l00000000004836C8
	// succ:  l00000000004836C8
l0000000000483798:
	w0 = w21 - 0x0000002A
	w31 = w0 - 0x00000001
	NZCV = cond(w31)
	branch Test(ULE,ZC) l00000000004837B8
	// succ:  l00000000004837A4 l00000000004837B8
l00000000004837A4:
	w0 = w21 - 0x0000003F
	w31 = w0 - 0x00000001
	NZCV = cond(w31)
	branch Test(ULE,ZC) l00000000004837B8
	// succ:  l00000000004837B0 l00000000004837B8
l00000000004837B0:
	w31 = w21 - 0x00000021
	NZCV = cond(w31)
	branch Test(NE,Z) l0000000000483330
	// succ:  l00000000004837B8 l0000000000483330
l00000000004837B8:
	x3 = Mem0[x29 + 176:word64]
	w5 = w23 & 0xFFFFFFFB
	x31 = x3 - x20
	NZCV = cond(x31)
	x3 = Mem0[x29 + 136:word64]
	w0 = w21
	x1 = x20
	x2 = x24
	x4 = x26
l00000000004837E4:
	w1 = w22
	branch w25 == 0x00000000 l00000000004833AC
	// succ:  l00000000004837EC l00000000004833AC
l00000000004837EC:
	w0 = w22
	call iswupper (retsize: 0;)
	w1 = w22
	branch w0 == 0x00000000 l00000000004833AC
	// succ:  l00000000004837FC l00000000004833AC
l00000000004837FC:
	goto l00000000004833A0
	// succ:  l00000000004833A0
l0000000000483800:
	w21 = Mem0[x28:word32]
	branch w21 == 0x00000000 l00000000004834C8
	// succ:  l0000000000483808 l00000000004834C8
l0000000000483808:
	x28 = x28 + 0x0000000000000004
	goto l00000000004836C8
	// succ:  l00000000004836C8
l0000000000483810:
	x4 = x19 + 0x0000000000000008
	w19 = Mem0[x19 + 8:word32]
	goto l000000000048369C
	// succ:  l000000000048369C
l000000000048381C:
	w2 = Mem0[x28 + 4:word32]
	w31 = w2 - 0x0000005D
	NZCV = cond(w31)
	branch Test(EQ,Z) l0000000000483BDC
	// succ:  l0000000000483828 l0000000000483BDC
l0000000000483828:
	w3 = Mem0[x29 + 152:word32]
	x1 = x28 + 0x0000000000000008
	branch w3 != 0x00000000 l0000000000483844
	// succ:  l0000000000483834 l0000000000483844
l0000000000483834:
	w31 = w2 - 0x0000005C
	NZCV = cond(w31)
	branch Test(NE,Z) l0000000000483844
	// succ:  l000000000048383C l0000000000483844
l000000000048383C:
	w2 = Mem0[x28 + 8:word32]
	x1 = x28 + 0x000000000000000C
	// succ:  l0000000000483844
l0000000000483844:
	branch w2 == 0x00000000 l00000000004834C8
	// succ:  l0000000000483848 l00000000004834C8
l0000000000483848:
	w31 = w2 - 0x0000005B
	NZCV = cond(w31)
	w19 = Mem0[x1:word32]
	branch Test(NE,Z) l0000000000483880
	// succ:  l0000000000483854 l0000000000483880
l0000000000483854:
	w31 = w19 - 0x0000002E
	NZCV = cond(w31)
	branch Test(NE,Z) l0000000000483880
	// succ:  l000000000048385C l0000000000483880
l000000000048385C:
	x0 = x1
	x1 = x29 + 0x0000000000000070
	call fn0000000000482070 (retsize: 0;)
	w2 = Mem0[x29 + 112:word32]
	x1 = x0
	w31 = w2 + 0x00000001
	NZCV = cond(w31)
	w19 = Mem0[x0:word32]
	branch Test(NE,Z) l0000000000483880
	// succ:  l000000000048387C l0000000000483880
l000000000048387C:
	w2 = w22 - 0x00000001
	// succ:  l0000000000483880
l0000000000483880:
	branch w25 == 0x00000000 l00000000004838B0
	// succ:  l0000000000483884 l00000000004838B0
l0000000000483884:
	w0 = w2
	Mem0[x29 + 192:word64] = x1
	Mem0[x29 + 208:word64] = x2
	call iswupper (retsize: 0;)
	x1 = Mem0[x29 + 192:word64]
	x2 = Mem0[x29 + 208:word64]
	branch w0 == 0x00000000 l00000000004838B0
	// succ:  l00000000004838A0 l00000000004838B0
l00000000004838A0:
	w0 = w2
	call towlower (retsize: 0;)
	x1 = Mem0[x29 + 192:word64]
	w2 = w0
	// succ:  l00000000004838B0
l00000000004838B0:
	x1 = x1 + 0x0000000000000004
	NZCV = cond(w21 - w2)
	Mem0[x29 + 144:word64] = x1
	branch Test(EQ,Z) l000000000048372C
	// succ:  l00000000004838C0 l000000000048372C
l00000000004838C0:
	x3 = Mem0[x29 + 128:word64]
	x0 = Mem0[x29 + 168:word64]
	Mem0[x3 + 3096:word32] = w2
	Mem0[x3 + 3088:word32] = w21
	x1 = x3 + 0xFFFFFFFFFFFFFC18
	Mem0[x29 + 208:word64] = x2
	call wcscoll (retsize: 0;)
	NZCV = cond(w0 - w31)
	x2 = Mem0[x29 + 208:word64]
	branch Test(LE,ZCV) l000000000048372C
	// succ:  l00000000004838E8 l000000000048372C
l00000000004838E8:
	w31 = w19 - 0x0000005D
	NZCV = cond(w31)
	branch Test(NE,Z) l0000000000483A14
	// succ:  l00000000004838F0 l0000000000483A14
l00000000004838F0:
	x3 = Mem0[x29 + 144:word64]
	w0 = Mem0[x29 + 164:word32]
	Mem0[x29 + 136:word64] = x3
	branch w0 == 0x00000000 l00000000004834C8
	// succ:  l0000000000483900 l00000000004834C8
l0000000000483900:
	x1 = Mem0[x29 + 136:word64]
	branch x1 != 0x0000000000000000 l00000000004833B4
	// succ:  l0000000000483908 l00000000004833B4
l0000000000483908:
	goto l00000000004834C8
	// succ:  l00000000004834C8
l000000000048390C:
	NZCV = cond(w22 - w2)
	branch Test(NE,Z) l000000000048399C
	// succ:  l0000000000483914 l000000000048399C
l0000000000483914:
	x3 = Mem0[x29 + 144:word64]
	w4 = w23 & 0x00000002
	w0 = Mem0[x3 + -4:word32]
	x2 = x3 - 0x0000000000000004
	w3 = 0x00000001
	branch w0 != 0x00000000 l0000000000483960
	// succ:  l000000000048392C l0000000000483960
l000000000048392C:
	w31 = w22 - 0x0000005B
	NZCV = cond(w31)
	branch Test(NE,Z) l00000000004834C8
	// succ:  l0000000000483934 l00000000004834C8
l0000000000483934:
	goto l0000000000483900
	// succ:  l0000000000483900
l0000000000483938:
	w31 = w0 - 0x0000005D
	NZCV = cond(w31)
	branch Test(EQ,Z) l0000000000483BFC
	// succ:  l0000000000483940 l0000000000483BFC
l0000000000483940:
	branch w4 != 0x00000000 l000000000048394C
	// succ:  l0000000000483944 l000000000048394C
l0000000000483944:
	w31 = w0 - 0x0000005C
	NZCV = cond(w31)
	branch Test(EQ,Z) l0000000000483D28
	// succ:  l000000000048394C l0000000000483D28
l000000000048394C:
	NZCV = cond(w3 - w31)
	branch Test(LE,ZCV) l0000000000483984
	// succ:  l0000000000483954 l0000000000483984
l0000000000483954:
	branch w0 == 0x00000000 l000000000048392C
	// succ:  l0000000000483958 l000000000048392C
l0000000000483958:
	w0 = Mem0[x1:word32]
	x2 = x1
	// succ:  l0000000000483960
l0000000000483960:
	w31 = w0 - 0x0000005B
	NZCV = cond(w31)
	x1 = x2 + 0x0000000000000004
	branch Test(NE,Z) l0000000000483938
	// succ:  l000000000048396C l0000000000483938
l000000000048396C:
	w0 = Mem0[x2 + 4:word32]
	w31 = w0 - 0x0000003D
	NZCV = cond(w31)
	branch Test(NE,Z) l0000000000483C24
	// succ:  l0000000000483978 l0000000000483C24
l0000000000483978:
	w3 = w3 + 0x00000001
	// succ:  l000000000048397C
l000000000048397C:
	NZCV = cond(w3 - w31)
	branch Test(GT,NZV) l0000000000483958
	// succ:  l0000000000483984 l0000000000483958
l0000000000483984:
	w0 = Mem0[x29 + 164:word32]
	branch w0 != 0x00000000 l00000000004834C8
	// succ:  l000000000048398C l00000000004834C8
l000000000048398C:
	Mem0[x29 + 136:word64] = x1
	goto l0000000000483900
	// succ:  l0000000000483900
l0000000000483994:
	w21 = w19
	goto l00000000004836C8
	// succ:  l00000000004836C8
l000000000048399C:
	x3 = Mem0[x29 + 128:word64]
	x0 = Mem0[x29 + 168:word64]
	x1 = x3 + 0xFFFFFFFFFFFFFC18
	Mem0[x3 + 3088:word32] = w22
	Mem0[x3 + 3096:word32] = w2
	call wcscoll (retsize: 0;)
	NZCV = cond(w0 - w31)
	branch Test(GT,NZV) l0000000000483758
	// succ:  l00000000004839BC l0000000000483758
l00000000004839BC:
	goto l0000000000483914
	// succ:  l0000000000483914
l00000000004839C0:
	w0 = Mem0[x28 + 8:word32]
	w21 = w19
	w31 = w0 - 0x0000003D
	NZCV = cond(w31)
	branch Test(NE,Z) l000000000048378C
	// succ:  l00000000004839D0 l000000000048378C
l00000000004839D0:
	w0 = Mem0[x28 + 12:word32]
	w31 = w0 - 0x0000005D
	NZCV = cond(w31)
	branch Test(NE,Z) l000000000048378C
	// succ:  l00000000004839DC l000000000048378C
l00000000004839DC:
	branch w25 == 0x00000000 l0000000000483DE4
	// succ:  l00000000004839E0 l0000000000483DE4
l00000000004839E0:
	w19 = Mem0[x28 + 4:word32]
	w0 = w19
	call iswupper (retsize: 0;)
	branch w0 == 0x00000000 l0000000000483DEC
	// succ:  l00000000004839F0 l0000000000483DEC
l00000000004839F0:
	w0 = w19
	call towlower (retsize: 0;)
	// succ:  l00000000004839F8
l00000000004839F8:
	Mem0[x29 + 112:word32] = w0
	NZCV = cond(w0 - w22)
	branch Test(EQ,Z) l0000000000483DFC
	// succ:  l0000000000483A04 l0000000000483DFC
l0000000000483A04:
	w19 = Mem0[x28 + 16:word32]
	x28 = x28 + 0x0000000000000014
	Mem0[x29 + 144:word64] = x28
	branch w19 == 0x00000000 l000000000048392C
	// succ:  l0000000000483A14 l000000000048392C
l0000000000483A14:
	branch w25 == 0x00000000 l0000000000483760
	// succ:  l0000000000483A18 l0000000000483760
l0000000000483A18:
	w0 = w19
	call iswupper (retsize: 0;)
	branch w0 == 0x00000000 l0000000000483760
	// succ:  l0000000000483A24 l0000000000483760
l0000000000483A24:
	w0 = w19
	call towlower (retsize: 0;)
	w19 = w0
	x28 = Mem0[x29 + 144:word64]
	goto l0000000000483764
	// succ:  l0000000000483764
l0000000000483A38:
	w0 = Mem0[x28 + 4:word32]
	Mem0[x29 + 112:word32] = 0x00000000
	x6 = x28 + 0x0000000000000004
	branch w0 == 0x00000000 l0000000000483BE4
	// succ:  l0000000000483A48 l0000000000483BE4
l0000000000483A48:
	x19 = x6
	goto l0000000000483A58
	// succ:  l0000000000483A58
l0000000000483A50:
	x19 = x19 + 0x0000000000000004
	branch w0 == 0x00000000 l0000000000483BE4
	// succ:  l0000000000483A58 l0000000000483BE4
l0000000000483A58:
	w31 = w0 - 0x0000003A
	NZCV = cond(w31)
	w0 = Mem0[x19 + 4:word32]
	branch Test(NE,Z) l0000000000483A50
	// succ:  l0000000000483A64 l0000000000483A50
l0000000000483A64:
	w31 = w0 - 0x0000005D
	NZCV = cond(w31)
	branch Test(NE,Z) l0000000000483A50
	// succ:  l0000000000483A6C l0000000000483A50
l0000000000483A6C:
	x21 = x19 - x28
	x21 = x21 & 0x0000000000000000
	x0 = x21
	Mem0[x29 + 200:word64] = x6
	call malloc (retsize: 0;)
	Mem0[x29 + 152:word64] = x0
	x6 = Mem0[x29 + 200:word64]
	branch x0 == 0x0000000000000000 l0000000000483D00
	// succ:  l0000000000483A8C l0000000000483D00
l0000000000483A8C:
	x1 = x6
	x2 = x21 - 0x0000000000000004
	Mem0[x29 + 200:word64] = x6
	memmove(x0, x1, x2)
	sp = sp + 0xFFFFFFFFFFFFFFF8
	x3 = Mem0[x29 + 152:word64]
	x0 = 0x00000000004C2000
	x21 = x3 + x21
	Mem0[x21 + -4:word32] = 0x00000000
	x0 = x0 + 0x00000000000000D8
	Mem0[x29 + 104:word64] = x3
	call wctype (retsize: 0;)
	x21 = x0
	x6 = Mem0[x29 + 200:word64]
	branch x0 == 0x0000000000000000 l0000000000483D64
	// succ:  l0000000000483AC4 l0000000000483D64
l0000000000483AC4:
	x21 = Mem0[x29 + 104:word64]
	// succ:  l0000000000483AC8
l0000000000483AC8:
	x1 = 0x00000000004C1000
	x0 = x21
	x1 = x1 + 0x0000000000000498
	Mem0[x29 + 200:word64] = x6
	call wcscmp (retsize: 0;)
	NZCV = cond(w0 - w31)
	w0 = (word32) Test(EQ,Z)
	Mem0[x29 + 144:word32] = w0
	x6 = Mem0[x29 + 200:word64]
	branch w0 == 0x00000000 l0000000000483AFC
	// succ:  l0000000000483AF0 l0000000000483AFC
l0000000000483AF0:
	x21 = 0x00000000004C1000
	x21 = x21 + 0x0000000000000450
	Mem0[x29 + 104:word64] = x21
	// succ:  l0000000000483AFC
l0000000000483AFC:
	x0 = x21
	Mem0[x29 + 200:word64] = x6
	Mem0[x29 + 96:word64] = 0x0000000000000000
	call wcslen (retsize: 0;)
	x21 = x0
	__ctype_get_mb_cur_max()
	sp = sp + 0xFFFFFFFFFFFFFFF8
	x0 = x0 * x21
	x0 = x0 + 0x0000000000000001
	call malloc (retsize: 0;)
	x1 = x29 + 0x0000000000000060
	x21 = x0
	x1 = x1 + 8
	x0 = Mem0[x1:word64]
	Mem0[x29 + 192:word64] = x1
	call wcslen (retsize: 0;)
	Mem0[x29 + 208:word64] = x0
	__ctype_get_mb_cur_max()
	sp = sp + 0xFFFFFFFFFFFFFFF8
	x2 = Mem0[x29 + 208:word64]
	x1 = Mem0[x29 + 192:word64]
	x2 = x0 * x2
	x2 = x2 + 0x0000000000000001
	x0 = x21
	x3 = x29 + 0x0000000000000060
	call wcsrtombs (retsize: 0;)
	x0 = x0 + 0x0000000000000002
	x31 = x0 - 0x0000000000000001
	NZCV = cond(x31)
	x6 = Mem0[x29 + 200:word64]
	x0 = x21
	branch Test(ULE,ZC) l0000000000483E08
	// succ:  l0000000000483B6C l0000000000483E08
l0000000000483B6C:
	Mem0[x29 + 200:word64] = x6
	call wctype (retsize: 0;)
	x1 = 0x00000000004C2000
	x3 = x0
	x1 = x1 + 0x00000000000000E0
	x0 = x21
	w2 = 0x00000147
	Mem0[x29 + 192:word64] = x3
	call sh_xfree (retsize: 0;)
	x3 = Mem0[x29 + 192:word64]
	x6 = Mem0[x29 + 200:word64]
	branch x3 == 0x0000000000000000 l0000000000483DF4
	// succ:  l0000000000483B9C l0000000000483DF4
l0000000000483B9C:
	w1 = Mem0[x29 + 144:word32]
	w0 = w22
	branch w1 == 0x00000000 l0000000000483DC4
	// succ:  l0000000000483BA8 l0000000000483DC4
l0000000000483BA8:
	x1 = x3
	call iswctype (retsize: 0;)
	w1 = 0x00000001
	x6 = Mem0[x29 + 200:word64]
	branch w0 != 0x00000000 l0000000000483BC4
	// succ:  l0000000000483BBC l0000000000483BC4
l0000000000483BBC:
	w31 = w22 - 0x0000005F
	NZCV = cond(w31)
	w1 = (word32) Test(EQ,Z)
	// succ:  l0000000000483BC4
l0000000000483BC4:
	Mem0[x29 + 112:word32] = w1
	w31 = w1 + 0x00000001
	NZCV = cond(w31)
	branch Test(NE,Z) l0000000000483D00
	// succ:  l0000000000483BD0 l0000000000483D00
l0000000000483BD0:
	Mem0[x29 + 112:word32] = 0x00000000
	Mem0[x29 + 144:word64] = x6
	goto l0000000000483D0C
	// succ:  l0000000000483D0C
l0000000000483BDC:
	w2 = w21
	goto l000000000048372C
	// succ:  l000000000048372C
l0000000000483BE4:
	Mem0[x29 + 144:word64] = x6
	// succ:  l0000000000483BE8
l0000000000483BE8:
	w19 = Mem0[x28:word32]
	branch w19 != 0x00000000 l00000000004838E8
	// succ:  l0000000000483BF0 l00000000004838E8
l0000000000483BF0:
	goto l000000000048392C
	// succ:  l000000000048392C
l0000000000483BF4:
	w22 = 0x00000000
	goto l0000000000483320
	// succ:  l0000000000483320
l0000000000483BFC:
	w3 = w3 - 0x00000001
	goto l000000000048397C
	// succ:  l000000000048397C
l0000000000483C04:
	x0 = x28
	x1 = x29 + 0x0000000000000070
	call fn0000000000482070 (retsize: 0;)
	w21 = Mem0[x29 + 112:word32]
	x28 = x0
	w31 = w21 + 0x00000001
	NZCV = cond(w31)
l0000000000483C24:
	w31 = w0 - 0x0000003A
	NZCV = cond(w31)
	branch Test(EQ,Z) l0000000000483978
	// succ:  l0000000000483C2C l0000000000483978
l0000000000483C2C:
	w31 = w0 - 0x0000002E
	NZCV = cond(w31)
	branch Test(NE,Z) l000000000048397C
	// succ:  l0000000000483C34 l000000000048397C
l0000000000483C34:
	goto l0000000000483978
	// succ:  l0000000000483978
l0000000000483C38:
	x3 = Mem0[x29 + 176:word64]
	x31 = x20 - x3
	NZCV = cond(x31)
	branch Test(EQ,Z) l00000000004834C8
	// succ:  l0000000000483C44 l00000000004834C8
l0000000000483C44:
	branch (w23 & 0x00000001) == 0x00000000 l0000000000483658
	// succ:  l0000000000483C48 l0000000000483658
l0000000000483C48:
	w0 = Mem0[x20 + -4:word32]
	w31 = w0 - 0x0000002F
	NZCV = cond(w31)
	branch Test(EQ,Z) l00000000004834C8
	// succ:  l0000000000483C54 l00000000004834C8
l0000000000483C54:
	branch w25 == 0x00000000 l0000000000483674
	// succ:  l0000000000483C58 l0000000000483674
l0000000000483C58:
	goto l000000000048365C
	// succ:  l000000000048365C
l0000000000483C5C:
	x1 = Mem0[x29 + 176:word64]
	x31 = x1 - x20
	NZCV = cond(x31)
	branch Test(EQ,Z) l00000000004834C8
	// succ:  l0000000000483C68 l00000000004834C8
l0000000000483C68:
	branch (w23 & 0x00000001) == 0x00000000 l00000000004833EC
	// succ:  l0000000000483C6C l00000000004833EC
l0000000000483C6C:
	w0 = Mem0[x20 + -4:word32]
	w31 = w0 - 0x0000002F
	NZCV = cond(w31)
	branch Test(NE,Z) l00000000004833EC
	// succ:  l0000000000483C78 l00000000004833EC
l0000000000483C78:
	goto l00000000004834C8
	// succ:  l00000000004834C8
l0000000000483C7C:
	branch x20 == 0x0000000000000000 l00000000004834BC
	// succ:  l0000000000483C80 l00000000004834BC
l0000000000483C80:
	branch x22 == 0x0000000000000000 l00000000004834BC
	// succ:  l0000000000483C84 l00000000004834BC
l0000000000483C84:
	w4 = Mem0[x29 + 128:word32]
	x0 = x20
	x1 = x24
	x2 = x22
	x3 = x26
	call fn0000000000483288 (retsize: 0;)
	branch w0 != 0x00000000 l00000000004834BC
	// succ:  l0000000000483CA0 l00000000004834BC
l0000000000483CA0:
	w0 = 0x00000000
	goto l0000000000483514
	// succ:  l0000000000483514
l0000000000483CA8:
	w1 = Mem0[x19:word32]
	w31 = w1 - 0x00000028
	NZCV = cond(w31)
	branch Test(EQ,Z) l0000000000483C7C
	// succ:  l0000000000483CB4 l0000000000483C7C
l0000000000483CB4:
	w1 = Mem0[x19 + -4:word32]
	x0 = Mem0[x29 + 136:word64]
	call wcschr (retsize: 0;)
	branch x0 != 0x0000000000000000 l0000000000483C7C
	// succ:  l0000000000483CC4 l0000000000483C7C
l0000000000483CC4:
	w31 = w21 - 0x0000005B
	NZCV = cond(w31)
	branch Test(EQ,Z) l0000000000483C7C
	// succ:  l0000000000483CCC l0000000000483C7C
l0000000000483CCC:
	branch w25 == 0x00000000 l0000000000483D38
	// succ:  l0000000000483CD0 l0000000000483D38
l0000000000483CD0:
	w23 = Mem0[x20:word32]
	w0 = w23
	call iswupper (retsize: 0;)
	branch w0 != 0x00000000 l00000000004834AC
	// succ:  l0000000000483CE0 l00000000004834AC
l0000000000483CE0:
	w0 = w23
	goto l00000000004834B4
	// succ:  l00000000004834B4
l0000000000483CE8:
	w1 = Mem0[x20:word32]
	w0 = w1
	goto l00000000004834B4
	// succ:  l00000000004834B4
l0000000000483CF4:
	w1 = w23
	w0 = w1
	goto l00000000004834B4
	// succ:  l00000000004834B4
l0000000000483D00:
	x28 = x19 + 0x0000000000000008
	x19 = x19 + 0x000000000000000C
	Mem0[x29 + 144:word64] = x19
	// succ:  l0000000000483D0C
l0000000000483D0C:
	x0 = Mem0[x29 + 152:word64]
	x1 = Mem0[x29 + 184:word64]
	w2 = 0x00000170
	call sh_xfree (retsize: 0;)
	w0 = Mem0[x29 + 112:word32]
	branch w0 == 0x00000000 l0000000000483BE8
	// succ:  l0000000000483D24 l0000000000483BE8
l0000000000483D24:
	goto l0000000000483914
	// succ:  l0000000000483914
l0000000000483D28:
	w0 = Mem0[x2 + 4:word32]
	branch w0 == 0x00000000 l00000000004834C8
	// succ:  l0000000000483D30 l00000000004834C8
l0000000000483D30:
	x1 = x2 + 0x0000000000000008
	goto l000000000048397C
	// succ:  l000000000048397C
l0000000000483D38:
	w0 = Mem0[x20:word32]
	goto l00000000004834B4
	// succ:  l00000000004834B4
l0000000000483D40:
	x20 = Mem0[x29 + 176:word64]
	// succ:  l0000000000483D44
l0000000000483D44:
	x31 = x20 - x24
	NZCV = cond(x31)
	branch Test(EQ,Z) l0000000000483510
	// succ:  l0000000000483D4C l0000000000483510
l0000000000483D4C:
	w0 = 0x00000001
	branch (w23 & 0x00000008) == 0x00000000 l00000000004834CC
	// succ:  l0000000000483D54 l00000000004834CC
l0000000000483D54:
	w1 = Mem0[x20:word32]
	w31 = w1 - 0x0000002F
	NZCV = cond(w31)
	branch Test(NE,Z) l00000000004834CC
	// succ:  l0000000000483D60 l00000000004834CC
l0000000000483D60:
	goto l0000000000483510
	// succ:  l0000000000483510
l0000000000483D64:
	x2 = Mem0[x29 + 104:word64]
	x1 = 0x00000000004C1000
	x0 = x2
	x1 = x1 + 0x0000000000000480
	Mem0[x29 + 208:word64] = x2
	call wcscmp (retsize: 0;)
	x2 = Mem0[x29 + 208:word64]
	x6 = Mem0[x29 + 200:word64]
	branch w0 != 0x00000000 l0000000000483DDC
	// succ:  l0000000000483D88 l0000000000483DDC
l0000000000483D88:
	w0 = w22
	call wctob (retsize: 0;)
	w31 = w0 + 0x00000001
	NZCV = cond(w31)
	w1 = w21
	x6 = Mem0[x29 + 200:word64]
	branch Test(EQ,Z) l0000000000483BC4
	// succ:  l0000000000483DA0 l0000000000483BC4
l0000000000483DA0:
	w31 = w0 - 0x0000007F
	NZCV = cond(w31)
	w1 = (word32) Test(LE,ZCV)
	goto l0000000000483BC4
	// succ:  l0000000000483BC4
l0000000000483DAC:
	w28 = Mem0[x19:word32]
	goto l0000000000483450
	// succ:  l0000000000483450
l0000000000483DB4:
	w31 = w21 - 0x0000002A
	NZCV = cond(w31)
	branch Test(NE,Z) l0000000000483440
	// succ:  l0000000000483DBC l0000000000483440
l0000000000483DBC:
	w28 = w23 & 0x00000001
	goto l0000000000483400
	// succ:  l0000000000483400
l0000000000483DC4:
	x1 = x3
	Mem0[x29 + 200:word64] = x6
	call iswctype (retsize: 0;)
	w1 = w0
	x6 = Mem0[x29 + 200:word64]
	goto l0000000000483BC4
	// succ:  l0000000000483BC4
l0000000000483DDC:
	x21 = x2
	goto l0000000000483AC8
	// succ:  l0000000000483AC8
l0000000000483DE4:
	w0 = Mem0[x28 + 4:word32]
	goto l00000000004839F8
	// succ:  l00000000004839F8
l0000000000483DEC:
	w0 = w19
	goto l00000000004839F8
	// succ:  l00000000004839F8
l0000000000483DF4:
	w1 = 0xFFFFFFFF
	goto l0000000000483BC4
	// succ:  l0000000000483BC4
l0000000000483DFC:
	x28 = x28 + 0x0000000000000014
	Mem0[x29 + 144:word64] = x28
	goto l0000000000483914
	// succ:  l0000000000483914
l0000000000483E08:
	x1 = 0x00000000004C2000
	x1 = x1 + 0x00000000000000E0
	w2 = 0x00000143
	call sh_xfree (retsize: 0;)
	w1 = 0xFFFFFFFF
	x6 = Mem0[x29 + 200:word64]
	goto l0000000000483BC4
	// succ:  l0000000000483BC4
fn0000000000483288_exit:


// fn0000000000483E24
// Return size: 0
void fn0000000000483E24()
fn0000000000483E24_entry:
	// succ:  l0000000000483E24
l0000000000483E24:
	sp = fp
	sp = sp + -144
	Mem0[sp:word64] = x29
	sp = sp + 8
	Mem0[sp:word64] = x30
	x29 = x31 + 0x0000000000000000
	v8 = sp + 80
	Mem0[v8:word64] = x27
	v8 = v8 + 8
	Mem0[v8:word64] = x28
	x28 = x3
	w3 = Mem0[x3:word32]
	v13 = sp + 48
	Mem0[v13:word64] = x23
	v13 = v13 + 8
	Mem0[v13:word64] = x24
	w31 = w3 - 0x00000028
	NZCV = cond(w31)
	x3 = 0x0000000000000004
fn0000000000483E24_exit:


// internal_strmatch
// Return size: 0
void internal_strmatch()
internal_strmatch_entry:
	// succ:  l0000000000484240
l0000000000484240:
	sp = fp
	sp = sp + -48
	Mem0[sp:word64] = x29
	sp = sp + 8
	Mem0[sp:word64] = x30
	x29 = x31 + 0x0000000000000000
	v8 = sp + 16
	Mem0[v8:word64] = x19
	v8 = v8 + 8
	Mem0[v8:word64] = x20
	w4 = w2
	x19 = x0
	branch x1 == 0x0000000000000000 l000000000048429C
	// succ:  l0000000000484258 l000000000048429C
l0000000000484258:
	branch x0 == 0x0000000000000000 l000000000048429C
	// succ:  l000000000048425C l000000000048429C
l000000000048425C:
	x0 = x1
	Mem0[x29 + 32:word64] = x1
	Mem0[x29 + 40:word64] = x4
	strlen(x0)
	sp = sp + 0xFFFFFFFFFFFFFFF8
	x20 = x0
	x0 = x19
	strlen(x0)
	sp = sp + 0xFFFFFFFFFFFFFFF8
	x1 = Mem0[x29 + 32:word64]
	x3 = x19 + x0
	x2 = x19
	x0 = x1
	x4 = Mem0[x29 + 40:word64]
	x1 = x1 + x20
	v16 = sp + 16
	x19 = Mem0[v16:word64]
	v16 = v16 + 8
	x20 = Mem0[v16:word64]
	x29 = Mem0[sp:word64]
	sp = sp + 8
	x30 = Mem0[sp:word64]
	sp = sp + 48
	// succ:  l0000000000484298_thunk_fn00000000004821A4
l0000000000484298_thunk_fn00000000004821A4:
	call fn00000000004821A4 (retsize: 0;)
	return
	// succ:  internal_strmatch_exit
l000000000048429C:
	w0 = 0x00000001
	v18 = sp + 16
	x19 = Mem0[v18:word64]
	v18 = v18 + 8
	x20 = Mem0[v18:word64]
	x29 = Mem0[sp:word64]
	sp = sp + 8
	x30 = Mem0[sp:word64]
	sp = sp + 48
	return
	// succ:  internal_strmatch_exit
internal_strmatch_exit:


// internal_wstrmatch
// Return size: 0
void internal_wstrmatch()
internal_wstrmatch_entry:
	// succ:  l00000000004842AC
l00000000004842AC:
	sp = fp
	sp = sp + -48
	Mem0[sp:word64] = x29
	sp = sp + 8
	Mem0[sp:word64] = x30
	x29 = x31 + 0x0000000000000000
	v8 = sp + 16
	Mem0[v8:word64] = x19
	v8 = v8 + 8
	Mem0[v8:word64] = x20
	w4 = w2
	x19 = x1
	x20 = x0
	branch x1 == 0x0000000000000000 l0000000000484308
	// succ:  l00000000004842C8 l0000000000484308
l00000000004842C8:
	branch x0 == 0x0000000000000000 l0000000000484308
	// succ:  l00000000004842CC l0000000000484308
l00000000004842CC:
	x0 = x1
	Mem0[x29 + 40:word64] = x4
	call wcslen (retsize: 0;)
	x1 = x19 + (x0 << 2)
	x0 = x20
	Mem0[x29 + 32:word64] = x1
	call wcslen (retsize: 0;)
	x3 = x20 + (x0 << 2)
	x1 = Mem0[x29 + 32:word64]
	x0 = x19
	x2 = x20
	x4 = Mem0[x29 + 40:word64]
	v16 = sp + 16
	x19 = Mem0[v16:word64]
	v16 = v16 + 8
	x20 = Mem0[v16:word64]
	x29 = Mem0[sp:word64]
	sp = sp + 8
	x30 = Mem0[sp:word64]
	sp = sp + 48
	// succ:  l0000000000484304_thunk_fn0000000000483288
l0000000000484304_thunk_fn0000000000483288:
	call fn0000000000483288 (retsize: 0;)
	return
	// succ:  internal_wstrmatch_exit
l0000000000484308:
	w0 = 0x00000001
	v18 = sp + 16
	x19 = Mem0[v18:word64]
	v18 = v18 + 8
	x20 = Mem0[v18:word64]
	x29 = Mem0[sp:word64]
	sp = sp + 8
	x30 = Mem0[sp:word64]
	sp = sp + 48
	return
	// succ:  internal_wstrmatch_exit
internal_wstrmatch_exit:


// xstrmatch
// Return size: 0
void xstrmatch()
xstrmatch_entry:
	// succ:  l0000000000484318
l0000000000484318:
	sp = fp
	sp = sp + -64
	Mem0[sp:word64] = x29
	sp = sp + 8
	Mem0[sp:word64] = x30
	x29 = x31 + 0x0000000000000000
	v8 = sp + 16
	Mem0[v8:word64] = x19
	v8 = v8 + 8
	Mem0[v8:word64] = x20
	x20 = x0
	x0 = x1
	Mem0[sp + 32:word64] = x21
	x19 = x1
	w21 = w2
	call mbsmbchar (retsize: 0;)
	branch x0 == 0x0000000000000000 l0000000000484408
	// succ:  l0000000000484340 l0000000000484408
l0000000000484340:
	__ctype_get_mb_cur_max()
	sp = sp + 0xFFFFFFFFFFFFFFF8
	x31 = x0 - 0x0000000000000001
	NZCV = cond(x31)
	branch Test(EQ,Z) l00000000004843E8
	// succ:  l000000000048434C l00000000004843E8
l000000000048434C:
	x0 = x29 + 0x0000000000000038
	x1 = 0x0000000000000000
	x2 = x20
	call xdupmbstowcs (retsize: 0;)
	x0 = x0 + 0x0000000000000002
	x31 = x0 - 0x0000000000000001
	NZCV = cond(x31)
	branch Test(ULE,ZC) l00000000004843E8
	// succ:  l0000000000484368 l00000000004843E8
l0000000000484368:
	x0 = x29 + 0x0000000000000030
	x1 = 0x0000000000000000
	x2 = x19
	call xdupmbstowcs (retsize: 0;)
	x0 = x0 + 0x0000000000000002
	x31 = x0 - 0x0000000000000001
	NZCV = cond(x31)
	branch Test(ULE,ZC) l00000000004843D4
	// succ:  l0000000000484384 l00000000004843D4
l0000000000484384:
	x1 = Mem0[x29 + 48:word64]
	x0 = Mem0[x29 + 56:word64]
	w2 = w21
	call internal_wstrmatch (retsize: 0;)
	x19 = 0x00000000004C2000
	w20 = w0
	x19 = x19 + 0x00000000000000E0
	x0 = Mem0[x29 + 56:word64]
	x1 = x19
	w2 = 0x0000018D
	call sh_xfree (retsize: 0;)
	x0 = Mem0[x29 + 48:word64]
	x1 = x19
	w2 = 0x0000018E
	call sh_xfree (retsize: 0;)
	w0 = w20
	x21 = Mem0[sp + 32:word64]
	v20 = sp + 16
	x19 = Mem0[v20:word64]
	v20 = v20 + 8
	x20 = Mem0[v20:word64]
	x29 = Mem0[sp:word64]
	sp = sp + 8
	x30 = Mem0[sp:word64]
	sp = sp + 64
	return
	// succ:  xstrmatch_exit
l00000000004843D4:
	x1 = 0x00000000004C2000
	x0 = Mem0[x29 + 56:word64]
	x1 = x1 + 0x00000000000000E0
	w2 = 0x00000187
	call sh_xfree (retsize: 0;)
	// succ:  l00000000004843E8
l00000000004843E8:
	x1 = x19
	w2 = w21
	x0 = x20
	call internal_strmatch (retsize: 0;)
	v21 = sp + 16
	x19 = Mem0[v21:word64]
	v21 = v21 + 8
	x20 = Mem0[v21:word64]
	x21 = Mem0[sp + 32:word64]
	x29 = Mem0[sp:word64]
	sp = sp + 8
	x30 = Mem0[sp:word64]
	sp = sp + 64
	return
	// succ:  xstrmatch_exit
l0000000000484408:
	x0 = x20
	call mbsmbchar (retsize: 0;)
	branch x0 != 0x0000000000000000 l0000000000484340
	// succ:  l0000000000484414 l0000000000484340
l0000000000484414:
	goto l00000000004843E8
	// succ:  l00000000004843E8
xstrmatch_exit:


// xmbsrtowcs
// Return size: 0
void xmbsrtowcs()
xmbsrtowcs_entry:
	// succ:  l0000000000484418
l0000000000484418:
	sp = fp
	sp = sp + -96
	Mem0[sp:word64] = x29
	sp = sp + 8
	Mem0[sp:word64] = x30
	x29 = x31 + 0x0000000000000000
	v8 = sp + 48
	Mem0[v8:word64] = x23
	v8 = v8 + 8
	Mem0[v8:word64] = x24
	v11 = sp + 16
	Mem0[v11:word64] = x19
	v11 = v11 + 8
	Mem0[v11:word64] = x20
	Mem0[sp + 64:word64] = x25
	v15 = sp + 32
	Mem0[v15:word64] = x21
	v15 = v15 + 8
	Mem0[v15:word64] = x22
	x23 = x3
	x20 = x0
	x24 = x1
	x25 = x2
	branch x3 == 0x0000000000000000 l000000000048455C
	// succ:  l0000000000484444 l000000000048455C
l0000000000484444:
	x19 = Mem0[x24:word64]
	x0 = x19
	strlen(x0)
	sp = sp + 0xFFFFFFFFFFFFFFF8
	x21 = x0
	branch x20 == 0x0000000000000000 l000000000048457C
	// succ:  l0000000000484458 l000000000048457C
l0000000000484458:
	x22 = 0x0000000000000000
	branch x25 != 0x0000000000000000 l0000000000484484
	// succ:  l0000000000484460 l0000000000484484
l0000000000484460:
	goto l00000000004845BC
	// succ:  l00000000004845BC
l0000000000484464:
	Mem0[x20:word32] = w4
	x19 = x19 + 0x0000000000000001
	Mem0[x24:word64] = x19
	x21 = x21 - 0x0000000000000001
	// succ:  l0000000000484474
l0000000000484474:
	x22 = x22 + 0x0000000000000001
	x31 = x22 - x25
	NZCV = cond(x31)
	x20 = x20 + 0x0000000000000004
	branch Test(EQ,Z) l00000000004844DC
	// succ:  l0000000000484484 l00000000004844DC
l0000000000484484:
	x0 = x23
	mbsinit(x0)
	sp = sp + 0xFFFFFFFFFFFFFFF8
	branch w0 == 0x00000000 l00000000004844F8
	// succ:  l0000000000484490 l00000000004844F8
l0000000000484490:
	v22 = Mem0[x19:byte]
	w4 = (word32) v22
	x0 = x20
	w31 = w4 - 0x0000005C
	NZCV = cond(w31)
	x1 = x19
	x2 = x21
	x3 = x23
	branch w4 == 0x00000000 l0000000000484538
	// succ:  l00000000004844AC l0000000000484538
l00000000004844AC:
	branch Test(EQ,Z) l0000000000484464
	// succ:  l00000000004844B0 l0000000000484464
l00000000004844B0:
	mbrtowc(x0, x1, x2, x3)
	sp = sp + 0xFFFFFFFFFFFFFFF8
	x1 = x0 + 0x0000000000000002
	x31 = x1 - 0x0000000000000001
	NZCV = cond(x31)
	branch Test(ULE,ZC) l0000000000484518
	// succ:  l00000000004844C0 l0000000000484518
l00000000004844C0:
	x19 = Mem0[x24:word64]
	w1 = Mem0[x20:word32]
	x19 = x19 + x0
	Mem0[x24:word64] = x19
	x21 = x21 - x0
	branch w1 != 0x00000000 l0000000000484474
	// succ:  l00000000004844D8 l0000000000484474
l00000000004844D8:
	Mem0[x24:word64] = 0x0000000000000000
	// succ:  l00000000004844DC
l00000000004844DC:
	x0 = x22
	v28 = sp + 16
	x19 = Mem0[v28:word64]
	v28 = v28 + 8
	x20 = Mem0[v28:word64]
	v29 = sp + 32
	x21 = Mem0[v29:word64]
	v29 = v29 + 8
	x22 = Mem0[v29:word64]
	v30 = sp + 48
	x23 = Mem0[v30:word64]
	v30 = v30 + 8
	x24 = Mem0[v30:word64]
	x25 = Mem0[sp + 64:word64]
	x29 = Mem0[sp:word64]
	sp = sp + 8
	x30 = Mem0[sp:word64]
	sp = sp + 96
	return
	// succ:  xmbsrtowcs_exit
l00000000004844F8:
	x1 = x19
	x0 = x20
	x2 = x21
	x3 = x23
	mbrtowc(x0, x1, x2, x3)
	sp = sp + 0xFFFFFFFFFFFFFFF8
	x1 = x0 + 0x0000000000000002
	x31 = x1 - 0x0000000000000001
	NZCV = cond(x31)
	branch Test(UGT,ZC) l00000000004844C0
	// succ:  l0000000000484518 l00000000004844C0
l0000000000484518:
	x22 = 0xFFFFFFFFFFFFFFFF
	x0 = x22
	v31 = sp + 16
	x19 = Mem0[v31:word64]
	v31 = v31 + 8
	x20 = Mem0[v31:word64]
	v32 = sp + 32
	x21 = Mem0[v32:word64]
	v32 = v32 + 8
	x22 = Mem0[v32:word64]
	v33 = sp + 48
	x23 = Mem0[v33:word64]
	v33 = v33 + 8
	x24 = Mem0[v33:word64]
	x25 = Mem0[sp + 64:word64]
	x29 = Mem0[sp:word64]
	sp = sp + 8
	x30 = Mem0[sp:word64]
	sp = sp + 96
	return
	// succ:  xmbsrtowcs_exit
l0000000000484538:
	Mem0[x20:word32] = w4
	Mem0[x24:word64] = 0x0000000000000000
	x0 = x22
	v34 = sp + 16
	x19 = Mem0[v34:word64]
	v34 = v34 + 8
	x20 = Mem0[v34:word64]
	v35 = sp + 32
	x21 = Mem0[v35:word64]
	v35 = v35 + 8
	x22 = Mem0[v35:word64]
	v36 = sp + 48
	x23 = Mem0[v36:word64]
	v36 = v36 + 8
	x24 = Mem0[v36:word64]
	x25 = Mem0[sp + 64:word64]
	x29 = Mem0[sp:word64]
	sp = sp + 8
	x30 = Mem0[sp:word64]
	sp = sp + 96
	return
	// succ:  xmbsrtowcs_exit
l000000000048455C:
	x23 = 0x00000000004E1000
	x23 = x23 + 0xFFFFFFFFFFFFFA18
	w0 = Mem0[x23 + 8:word32]
	branch w0 != 0x00000000 l0000000000484444
	// succ:  l000000000048456C l0000000000484444
l000000000048456C:
	w0 = 0x00000001
	Mem0[x23:word64] = x3
	Mem0[x23 + 8:word32] = w0
	goto l0000000000484444
	// succ:  l0000000000484444
l000000000048457C:
	x0 = x0 + 0x0000000000000001
l00000000004845BC:
	x22 = x25
	goto l00000000004844DC
	// succ:  l00000000004844DC
xmbsrtowcs_exit:


// xdupmbstowcs
// Return size: 0
void xdupmbstowcs()
xdupmbstowcs_entry:
	// succ:  l00000000004845C4
l00000000004845C4:
	sp = fp
	sp = sp + -128
	Mem0[sp:word64] = x29
	sp = sp + 8
	Mem0[sp:word64] = x30
	x29 = x31 + 0x0000000000000000
	v8 = sp + 80
	Mem0[v8:word64] = x27
	v8 = v8 + 8
	Mem0[v8:word64] = x28
	v11 = sp + 16
	Mem0[v11:word64] = x19
	v11 = v11 + 8
	Mem0[v11:word64] = x20
	v14 = sp + 32
	Mem0[v14:word64] = x21
	v14 = v14 + 8
	Mem0[v14:word64] = x22
	v17 = sp + 48
	Mem0[v17:word64] = x23
	v17 = v17 + 8
	Mem0[v17:word64] = x24
	v20 = sp + 64
	Mem0[v20:word64] = x25
	v20 = v20 + 8
	Mem0[v20:word64] = x26
	x19 = x2
	x27 = x0
	x28 = x1
	branch x2 == 0x0000000000000000 l0000000000484718
	// succ:  l00000000004845F0 l0000000000484718
l00000000004845F0:
	branch x0 == 0x0000000000000000 l0000000000484718
	// succ:  l00000000004845F4 l0000000000484718
l00000000004845F4:
	branch x1 == 0x0000000000000000 l0000000000484740
	// succ:  l00000000004845F8 l0000000000484740
l00000000004845F8:
	x0 = 0x0000000000000080
	Mem0[x29 + 96:word64] = 0x0000000000000000
	call malloc (retsize: 0;)
	x24 = x0
	branch x0 == 0x0000000000000000 l00000000004848E0
	// succ:  l000000000048460C l00000000004848E0
l000000000048460C:
	x0 = 0x0000000000000100
	call malloc (retsize: 0;)
	x25 = x0
	branch x0 == 0x0000000000000000 l0000000000484900
	// succ:  l000000000048461C l0000000000484900
l000000000048461C:
	x20 = 0x0000000000000000
	x23 = 0x0000000000000020
	goto l000000000048467C
	// succ:  l000000000048467C
l0000000000484628:
	w31 = w2 - 0x0000005C
	NZCV = cond(w31)
	branch Test(EQ,Z) l0000000000484690
	// succ:  l0000000000484630 l0000000000484690
l0000000000484630:
	x2 = 0x0000000000000010
	x0 = x29 + 0x0000000000000068
	x1 = x19
	x3 = x29 + 0x0000000000000060
	mbrtowc(x0, x1, x2, x3)
	sp = sp + 0xFFFFFFFFFFFFFFF8
	x2 = x0 + 0x0000000000000002
	x31 = x2 - 0x0000000000000001
	NZCV = cond(x31)
	x22 = x0
	branch Test(ULE,ZC) l00000000004848E8
	// succ:  l0000000000484654 l00000000004848E8
l0000000000484654:
	x21 = x20 + 0x0000000000000001
	x31 = x23 - x21
	NZCV = cond(x31)
	branch Test(ULT,C) l00000000004846A4
	// succ:  l0000000000484660 l00000000004846A4
l0000000000484660:
	w2 = Mem0[x29 + 104:word32]
	Mem0[x24 + x20 * 4:word32] = w2
	w2 = Mem0[x29 + 104:word32]
	Mem0[x25 + x20:word64] = x19
	x19 = x19 + x22
	branch w2 == 0x00000000 l00000000004846F0
	// succ:  l0000000000484678 l00000000004846F0
l0000000000484678:
	x20 = x21
	// succ:  l000000000048467C
l000000000048467C:
	x0 = x29 + 0x0000000000000060
	mbsinit(x0)
	sp = sp + 0xFFFFFFFFFFFFFFF8
	branch w0 == 0x00000000 l0000000000484630
	// succ:  l0000000000484688 l0000000000484630
l0000000000484688:
	v30 = Mem0[x19:byte]
	w2 = (word32) v30
	branch w2 != 0x00000000 l0000000000484628
	// succ:  l0000000000484690 l0000000000484628
l0000000000484690:
	x21 = x20 + 0x0000000000000001
	Mem0[x29 + 104:word32] = w2
	x31 = x23 - x21
	NZCV = cond(x31)
	x22 = 0x0000000000000001
	branch Test(UGE,C) l0000000000484660
	// succ:  l00000000004846A4 l0000000000484660
l00000000004846A4:
	x23 = x23 + 0x0000000000000020
	x0 = x24
l00000000004846F0:
	Mem0[x27:word64] = x24
	Mem0[x28:word64] = x25
	x0 = x20
	v40 = sp + 32
	x21 = Mem0[v40:word64]
	v40 = v40 + 8
	x22 = Mem0[v40:word64]
	v41 = sp + 16
	x19 = Mem0[v41:word64]
	v41 = v41 + 8
	x20 = Mem0[v41:word64]
	v42 = sp + 48
	x23 = Mem0[v42:word64]
	v42 = v42 + 8
	x24 = Mem0[v42:word64]
	v43 = sp + 64
	x25 = Mem0[v43:word64]
	v43 = v43 + 8
	x26 = Mem0[v43:word64]
	v44 = sp + 80
	x27 = Mem0[v44:word64]
	v44 = v44 + 8
	x28 = Mem0[v44:word64]
	x29 = Mem0[sp:word64]
	sp = sp + 8
	x30 = Mem0[sp:word64]
	sp = sp + 128
	return
	// succ:  xdupmbstowcs_exit
l0000000000484718:
	branch x27 == 0x0000000000000000 l0000000000484720
	// succ:  l000000000048471C l0000000000484720
l000000000048471C:
	Mem0[x27:word64] = 0x0000000000000000
	// succ:  l0000000000484720
l0000000000484720:
	x0 = 0xFFFFFFFFFFFFFFFF
	// succ:  l0000000000484724
l0000000000484724:
	v32 = sp + 16
	x19 = Mem0[v32:word64]
	v32 = v32 + 8
	x20 = Mem0[v32:word64]
	v33 = sp + 32
	x21 = Mem0[v33:word64]
	v33 = v33 + 8
	x22 = Mem0[v33:word64]
	v34 = sp + 48
	x23 = Mem0[v34:word64]
	v34 = v34 + 8
	x24 = Mem0[v34:word64]
	v35 = sp + 64
	x25 = Mem0[v35:word64]
	v35 = v35 + 8
	x26 = Mem0[v35:word64]
	v36 = sp + 80
	x27 = Mem0[v36:word64]
	v36 = v36 + 8
	x28 = Mem0[v36:word64]
	x29 = Mem0[sp:word64]
	sp = sp + 8
	x30 = Mem0[sp:word64]
	sp = sp + 128
	return
	// succ:  xdupmbstowcs_exit
l0000000000484740:
	x20 = x1
	Mem0[x29 + 112:word64] = x1
	Mem0[x29 + 120:word64] = x2
	x21 = x1
	x24 = x1
	w1 = 0x0000005C
	x0 = x19
	call strchrnul (retsize: 0;)
	v25 = Mem0[x0:byte]
	w1 = (word32) v25
	x22 = x0 - x19
	x0 = Mem0[x29 + 112:word64]
	NZCV = cond(w1 - w31)
l00000000004848E0:
	Mem0[x27:word64] = x24
	goto l0000000000484720
	// succ:  l0000000000484720
l00000000004848E8:
	x0 = x24
	call free (retsize: 0;)
	x0 = x25
	call free (retsize: 0;)
	Mem0[x27:word64] = 0x0000000000000000
	goto l0000000000484720
	// succ:  l0000000000484720
l0000000000484900:
	x0 = x24
	call free (retsize: 0;)
	x0 = 0xFFFFFFFFFFFFFFFF
	Mem0[x27:word64] = x25
	goto l0000000000484724
	// succ:  l0000000000484724
xdupmbstowcs_exit:


// match_pattern_wchar
// Return size: 0
void match_pattern_wchar()
match_pattern_wchar_entry:
	// succ:  l0000000000484938
l0000000000484938:
	sp = fp
	w1 = Mem0[x1:word32]
	x2 = x0
	w0 = 0x00000000
	branch w1 == 0x00000000 l0000000000484960
	// succ:  l0000000000484948 l0000000000484960
l0000000000484948:
	w3 = Mem0[x2:word32]
	w0 = w3 - 0x00000021
	w31 = w0 - 0x0000003B
	NZCV = cond(w31)
	branch Test(ULE,ZC) l0000000000484964
	// succ:  l0000000000484958 l0000000000484964
l0000000000484958:
	NZCV = cond(w1 - w3)
	w0 = (word32) Test(EQ,Z)
	// succ:  l0000000000484960
l0000000000484960:
	return
	// succ:  match_pattern_wchar_exit
l0000000000484964:
	x4 = 0x00000000004C2000
	x4 = x4 + 0x000000000000059C
	v15 = Mem0[x4 + (uint64) ((uint32) w0):byte]
	w5 = (word32) v15
	x6 = 0x000000000048497C
	x5 = x6 + (int64) ((int8) w5)
match_pattern_wchar_exit:


// wmatchlen
// Return size: 0
void wmatchlen()
wmatchlen_entry:
	// succ:  l00000000004849A0
l00000000004849A0:
	sp = fp
	w1 = Mem0[x0:word32]
	x2 = x0
	w0 = 0x00000000
	branch w1 == 0x00000000 l0000000000484A08
	// succ:  l00000000004849B0 l0000000000484A08
l00000000004849B0:
	x6 = 0x00000000004C2000
	x3 = x2 + 0x0000000000000004
	w8 = w0
	w7 = w0
	w5 = w0
	x6 = x6 + 0x00000000000005D8
	// succ:  l00000000004849C8
l00000000004849C8:
	w1 = w1 - 0x00000021
	w31 = w1 - 0x0000003B
	NZCV = cond(w31)
	branch Test(UGT,ZC) l00000000004849F0
	// succ:  l00000000004849D4 l00000000004849F0
l00000000004849D4:
	v16 = Mem0[x6 + (uint64) ((uint32) w1):byte]
	w4 = (word32) v16
	x9 = 0x00000000004849E4
	x4 = x9 + (int64) ((int8) w4)
	call x4 (retsize: 0;)
	return
	// succ:  wmatchlen_exit
l00000000004849F0:
	w1 = Mem0[x3:word32]
	w5 = w5 + 0x00000001
	x2 = x3
	x3 = x2 + 0x0000000000000004
	branch w1 != 0x00000000 l00000000004849C8
	// succ:  l0000000000484A04 l00000000004849C8
l0000000000484A04:
	w0 = w5
	// succ:  l0000000000484A08
l0000000000484A08:
	return
	// succ:  wmatchlen_exit
wmatchlen_exit:


// match_pattern_char
// Return size: 0
void match_pattern_char()
match_pattern_char_entry:
	// succ:  l0000000000484BE0
l0000000000484BE0:
	sp = fp
	v5 = Mem0[x1:byte]
	w1 = (word32) v5
	x2 = x0
	w0 = 0x00000000
	branch w1 == 0x00000000 l0000000000484C08
	// succ:  l0000000000484BF0 l0000000000484C08
l0000000000484BF0:
	v10 = Mem0[x2:byte]
	w3 = (word32) v10
	w0 = w3 - 0x00000021
	w31 = w0 - 0x0000003B
	NZCV = cond(w31)
	branch Test(ULE,ZC) l0000000000484C0C
	// succ:  l0000000000484C00 l0000000000484C0C
l0000000000484C00:
	NZCV = cond(w1 - w3)
	w0 = (word32) Test(EQ,Z)
	// succ:  l0000000000484C08
l0000000000484C08:
	return
	// succ:  match_pattern_char_exit
l0000000000484C0C:
	x4 = 0x00000000004C2000
	x4 = x4 + 0x0000000000000614
	v17 = Mem0[x4 + (uint64) ((uint32) w0):byte]
	w5 = (word32) v17
	x6 = 0x0000000000484C24
	x5 = x6 + (int64) ((int8) w5)
match_pattern_char_exit:


// umatchlen
// Return size: 0
void umatchlen()
umatchlen_entry:
	// succ:  l0000000000484C48
l0000000000484C48:
	sp = fp
	v5 = Mem0[x0:byte]
	w1 = (word32) v5
	x3 = x0
	w0 = 0x00000000
	branch w1 == 0x00000000 l0000000000484CB0
	// succ:  l0000000000484C58 l0000000000484CB0
l0000000000484C58:
	x6 = 0x00000000004C2000
	x2 = x3 + 0x0000000000000001
	w8 = w0
	w7 = w0
	w5 = w0
	x6 = x6 + 0x0000000000000650
	// succ:  l0000000000484C70
l0000000000484C70:
	w1 = w1 - 0x00000021
	w31 = w1 - 0x0000003B
	NZCV = cond(w31)
	branch Test(UGT,ZC) l0000000000484C98
	// succ:  l0000000000484C7C l0000000000484C98
l0000000000484C7C:
	v17 = Mem0[x6 + (uint64) ((uint32) w1):byte]
	w4 = (word32) v17
	x9 = 0x0000000000484C8C
	x4 = x9 + (int64) ((int8) w4)
	call x4 (retsize: 0;)
	return
	// succ:  umatchlen_exit
l0000000000484C98:
	v20 = Mem0[x2:byte]
	w1 = (word32) v20
	w5 = w5 + 0x00000001
	x3 = x2
	x2 = x3 + 0x0000000000000001
	branch w1 != 0x00000000 l0000000000484C70
	// succ:  l0000000000484CAC l0000000000484C70
l0000000000484CAC:
	w0 = w5
	// succ:  l0000000000484CB0
l0000000000484CB0:
	return
	// succ:  umatchlen_exit
umatchlen_exit:


// getenv
// Return size: 0
void getenv()
getenv_entry:
	// succ:  l0000000000484E88
l0000000000484E88:
	sp = fp
	sp = sp + -64
	Mem0[sp:word64] = x29
	sp = sp + 8
	Mem0[sp:word64] = x30
	x29 = x31 + 0x0000000000000000
	v8 = sp + 16
	Mem0[v8:word64] = x19
	v8 = v8 + 8
	Mem0[v8:word64] = x20
	v11 = sp + 32
	Mem0[v11:word64] = x21
	v11 = v11 + 8
	Mem0[v11:word64] = x22
	Mem0[sp + 48:word64] = x23
	v15 = Mem0[x0:byte]
	w1 = (word32) v15
	x20 = x0
	branch w1 == 0x00000000 l0000000000484F58
	// succ:  l0000000000484EA8 l0000000000484F58
l0000000000484EA8:
	call find_tempenv_variable (retsize: 0;)
	x19 = x0
	branch x0 == 0x0000000000000000 l0000000000484F70
	// succ:  l0000000000484EB4 l0000000000484F70
l0000000000484EB4:
	x20 = 0x00000000004E1000
	x0 = x20 + 0xFFFFFFFFFFFFFA28
	x0 = Mem0[x0:word64]
	branch x0 == 0x0000000000000000 l0000000000484ED4
	// succ:  l0000000000484EC4 l0000000000484ED4
l0000000000484EC4:
	x1 = 0x00000000004C2000
	x1 = x1 + 0x0000000000000690
	w2 = 0x0000003D
	call sh_xfree (retsize: 0;)
	// succ:  l0000000000484ED4
l0000000000484ED4:
	x0 = Mem0[x19 + 8:word64]
	branch x0 == 0x0000000000000000 l0000000000484EFC
	// succ:  l0000000000484EDC l0000000000484EFC
l0000000000484EDC:
	strlen(x0)
	sp = sp + 0xFFFFFFFFFFFFFFF8
	x1 = 0x00000000004C2000
	x1 = x1 + 0x0000000000000690
	w2 = 0x0000003F
	x0 = x0 + 0x0000000000000001
	call sh_xmalloc (retsize: 0;)
	x1 = Mem0[x19 + 8:word64]
	strcpy(x0, x1)
	sp = sp + 0xFFFFFFFFFFFFFFF8
	// succ:  l0000000000484EFC
l0000000000484EFC:
	x20 = x20 + 0xFFFFFFFFFFFFFA28
	Mem0[x20:word64] = x0
	// succ:  l0000000000484F04
l0000000000484F04:
	v20 = sp + 16
	x19 = Mem0[v20:word64]
	v20 = v20 + 8
	x20 = Mem0[v20:word64]
	v21 = sp + 32
	x21 = Mem0[v21:word64]
	v21 = v21 + 8
	x22 = Mem0[v21:word64]
	x23 = Mem0[sp + 48:word64]
	x29 = Mem0[sp:word64]
	sp = sp + 8
	x30 = Mem0[sp:word64]
	sp = sp + 64
	return
	// succ:  getenv_exit
l0000000000484F18:
	x0 = x20
	strlen(x0)
	sp = sp + 0xFFFFFFFFFFFFFFF8
	x1 = 0x00000000004DE000
	x21 = Mem0[x1 + 1672:word64]
	w22 = w0
	x19 = Mem0[x21:word64]
	branch x19 == 0x0000000000000000 l0000000000484F58
	// succ:  l0000000000484F34 l0000000000484F58
l0000000000484F34:
l0000000000484F58:
	x0 = 0x0000000000000000
	v18 = sp + 16
	x19 = Mem0[v18:word64]
	v18 = v18 + 8
	x20 = Mem0[v18:word64]
	v19 = sp + 32
	x21 = Mem0[v19:word64]
	v19 = v19 + 8
	x22 = Mem0[v19:word64]
	x23 = Mem0[sp + 48:word64]
	x29 = Mem0[sp:word64]
	sp = sp + 8
	x30 = Mem0[sp:word64]
	sp = sp + 64
	return
	// succ:  getenv_exit
l0000000000484F70:
	x0 = 0x00000000004DF000
	x0 = Mem0[x0 + 3200:word64]
	branch x0 == 0x0000000000000000 l0000000000484F18
	// succ:  l0000000000484F7C l0000000000484F18
l0000000000484F7C:
	x0 = x20
	call find_variable (retsize: 0;)
	branch x0 == 0x0000000000000000 l0000000000484F58
	// succ:  l0000000000484F88 l0000000000484F58
l0000000000484F88:
	w1 = Mem0[x0 + 40:word32]
	branch (w1 & 0x00000001) == 0x00000000 l0000000000484F58
	// succ:  l0000000000484F90 l0000000000484F58
l0000000000484F90:
	x0 = Mem0[x0 + 8:word64]
	goto l0000000000484F04
	// succ:  l0000000000484F04
getenv_exit:


// _getenv
// Return size: 0
void _getenv()
_getenv_entry:
	// succ:  l0000000000484FC4
l0000000000484FC4:
	sp = fp
	// succ:  l0000000000484FC4_thunk_getenv
l0000000000484FC4_thunk_getenv:
	call getenv (retsize: 0;)
	return
	// succ:  _getenv_exit
_getenv_exit:


// putenv
// Return size: 0
void putenv()
putenv_entry:
	// succ:  l0000000000484FC8
l0000000000484FC8:
	sp = fp
	sp = sp + -32
	Mem0[sp:word64] = x29
	sp = sp + 8
	Mem0[sp:word64] = x30
	x29 = x31 + 0x0000000000000000
	v8 = sp + 16
	Mem0[v8:word64] = x19
	v8 = v8 + 8
	Mem0[v8:word64] = x20
	v11 = Mem0[x0:byte]
	w1 = (word32) v11
	x19 = x0
	branch w1 == 0x00000000 l0000000000485058
	// succ:  l0000000000484FE0 l0000000000485058
l0000000000484FE0:
	w1 = 0x00000000
	call assignment (retsize: 0;)
l0000000000485058:
	__errno_location()
	sp = sp + 0xFFFFFFFFFFFFFFF8
	w1 = 0x00000016
	Mem0[x0:word32] = w1
	v12 = sp + 16
	x19 = Mem0[v12:word64]
	v12 = v12 + 8
	x20 = Mem0[v12:word64]
	w0 = 0xFFFFFFFF
	x29 = Mem0[sp:word64]
	sp = sp + 8
	x30 = Mem0[sp:word64]
	sp = sp + 32
	return
	// succ:  putenv_exit
putenv_exit:


// setenv
// Return size: 0
void setenv()
setenv_entry:
	// succ:  l0000000000485074
l0000000000485074:
	sp = fp
	sp = sp + -48
	Mem0[sp:word64] = x29
	sp = sp + 8
	Mem0[sp:word64] = x30
	x29 = x31 + 0x0000000000000000
	v8 = sp + 16
	Mem0[v8:word64] = x19
	v8 = v8 + 8
	Mem0[v8:word64] = x20
	x19 = x0
	x20 = x1
	branch x0 == 0x0000000000000000 l00000000004850E4
	// succ:  l000000000048508C l00000000004850E4
l000000000048508C:
	v12 = Mem0[x0:byte]
	w3 = (word32) v12
	branch w3 == 0x00000000 l00000000004850E4
	// succ:  l0000000000485094 l00000000004850E4
l0000000000485094:
	w1 = 0x0000003D
	Mem0[x29 + 32:word64] = x2
	strchr(x0, x1)
	sp = sp + 0xFFFFFFFFFFFFFFF8
	x2 = Mem0[x29 + 32:word64]
	branch x0 != 0x0000000000000000 l00000000004850E4
	// succ:  l00000000004850A8 l00000000004850E4
l00000000004850A8:
	branch w2 == 0x00000000 l0000000000485100
	// succ:  l00000000004850AC l0000000000485100
l00000000004850AC:
	w2 = 0x00000000
	x0 = x19
	x1 = x20
	call bind_variable (retsize: 0;)
	x2 = x0
	branch x0 == 0x0000000000000000 l0000000000485114
	// succ:  l00000000004850C4 l0000000000485114
l00000000004850C4:
	w1 = Mem0[x2 + 40:word32]
	w0 = 0x00000000
	w1 = w1 & 0xFFFFEFFF
	w1 = w1 | 0x00000001
	Mem0[x2 + 40:word32] = w1
	// succ:  l00000000004850D8
l00000000004850D8:
	v17 = sp + 16
	x19 = Mem0[v17:word64]
	v17 = v17 + 8
	x20 = Mem0[v17:word64]
	x29 = Mem0[sp:word64]
	sp = sp + 8
	x30 = Mem0[sp:word64]
	sp = sp + 48
	return
	// succ:  setenv_exit
l00000000004850E4:
	__errno_location()
	sp = sp + 0xFFFFFFFFFFFFFFF8
	w1 = 0x00000016
	Mem0[x0:word32] = w1
	v18 = sp + 16
	x19 = Mem0[v18:word64]
	v18 = v18 + 8
	x20 = Mem0[v18:word64]
	w0 = 0xFFFFFFFF
	x29 = Mem0[sp:word64]
	sp = sp + 8
	x30 = Mem0[sp:word64]
	sp = sp + 48
	return
	// succ:  setenv_exit
l0000000000485100:
	x0 = x19
	call find_variable (retsize: 0;)
	x2 = x0
	branch x0 != 0x0000000000000000 l00000000004850C4
	// succ:  l0000000000485110 l00000000004850C4
l0000000000485110:
	goto l00000000004850AC
	// succ:  l00000000004850AC
l0000000000485114:
	w0 = 0xFFFFFFFF
	goto l00000000004850D8
	// succ:  l00000000004850D8
setenv_exit:


// unsetenv
// Return size: 0
void unsetenv()
unsetenv_entry:
	// succ:  l000000000048511C
l000000000048511C:
	sp = fp
	sp = sp + -32
	Mem0[sp:word64] = x29
	sp = sp + 8
	Mem0[sp:word64] = x30
	x29 = x31 + 0x0000000000000000
	v8 = sp + 16
	Mem0[v8:word64] = x19
	v8 = v8 + 8
	Mem0[v8:word64] = x20
	v11 = Mem0[x0:byte]
	w1 = (word32) v11
	x19 = x0
	branch w1 == 0x00000000 l000000000048515C
	// succ:  l0000000000485134 l000000000048515C
l0000000000485134:
	w1 = 0x0000003D
	strchr(x0, x1)
	sp = sp + 0xFFFFFFFFFFFFFFF8
	x20 = x0
	branch x0 != 0x0000000000000000 l000000000048515C
	// succ:  l0000000000485144 l000000000048515C
l0000000000485144:
	x0 = x19
	call unbind_variable (retsize: 0;)
	w0 = w20
	v15 = sp + 16
	x19 = Mem0[v15:word64]
	v15 = v15 + 8
	x20 = Mem0[v15:word64]
	x29 = Mem0[sp:word64]
	sp = sp + 8
	x30 = Mem0[sp:word64]
	sp = sp + 32
	return
	// succ:  unsetenv_exit
l000000000048515C:
	__errno_location()
	sp = sp + 0xFFFFFFFFFFFFFFF8
	w1 = 0x00000016
	Mem0[x0:word32] = w1
	v16 = sp + 16
	x19 = Mem0[v16:word64]
	v16 = v16 + 8
	x20 = Mem0[v16:word64]
	w0 = 0xFFFFFFFF
	x29 = Mem0[sp:word64]
	sp = sp + 8
	x30 = Mem0[sp:word64]
	sp = sp + 32
	return
	// succ:  unsetenv_exit
unsetenv_exit:


// getmaxgroups
// Return size: 0
void getmaxgroups()
getmaxgroups_entry:
	// succ:  l0000000000485178
l0000000000485178:
	sp = fp
	sp = sp + -32
	Mem0[sp:word64] = x29
	sp = sp + 8
	Mem0[sp:word64] = x30
	x29 = x31 + 0x0000000000000000
	Mem0[sp + 16:word64] = x19
	x19 = 0x00000000004D9000
	x19 = x19 + 0x0000000000000490
	w0 = Mem0[x19:word32]
	NZCV = cond(w0 - w31)
	branch Test(LE,ZCV) l00000000004851A4
	// succ:  l0000000000485198 l00000000004851A4
l0000000000485198:
	x19 = Mem0[sp + 16:word64]
	x29 = Mem0[sp:word64]
	sp = sp + 8
	x30 = Mem0[sp:word64]
	sp = sp + 32
	return
	// succ:  getmaxgroups_exit
l00000000004851A4:
	w0 = 0x00000003
	sysconf(x0)
	sp = sp + 0xFFFFFFFFFFFFFFF8
	NZCV = cond(w0 - w31)
	branch Test(LE,ZCV) l00000000004851C4
	// succ:  l00000000004851B4 l00000000004851C4
l00000000004851B4:
	Mem0[x19:word32] = w0
	// succ:  l00000000004851B8
l00000000004851B8:
	x19 = Mem0[sp + 16:word64]
	x29 = Mem0[sp:word64]
	sp = sp + 8
	x30 = Mem0[sp:word64]
	sp = sp + 32
	return
	// succ:  getmaxgroups_exit
l00000000004851C4:
	w0 = 0x00000040
	Mem0[x19:word32] = w0
	goto l00000000004851B8
	// succ:  l00000000004851B8
getmaxgroups_exit:


// getmaxchild
// Return size: 0
void getmaxchild()
getmaxchild_entry:
	// succ:  l00000000004851D0
l00000000004851D0:
	sp = fp
	sp = sp + -32
	Mem0[sp:word64] = x29
	sp = sp + 8
	Mem0[sp:word64] = x30
	x29 = x31 + 0x0000000000000000
	Mem0[sp + 16:word64] = x19
	x19 = 0x00000000004D9000
	x19 = x19 + 0x0000000000000490
	x0 = Mem0[x19 + 8:word64]
	x31 = x0 - x31
	NZCV = cond(x31)
	branch Test(LE,ZCV) l00000000004851FC
	// succ:  l00000000004851F0 l00000000004851FC
l00000000004851F0:
	x19 = Mem0[sp + 16:word64]
	x29 = Mem0[sp:word64]
	sp = sp + 8
	x30 = Mem0[sp:word64]
	sp = sp + 32
	return
	// succ:  getmaxchild_exit
l00000000004851FC:
	w0 = 0x00000001
	sysconf(x0)
	sp = sp + 0xFFFFFFFFFFFFFFF8
	Mem0[x19 + 8:word64] = x0
	x19 = Mem0[sp + 16:word64]
	x29 = Mem0[sp:word64]
	sp = sp + 8
	x30 = Mem0[sp:word64]
	sp = sp + 32
	return
	// succ:  getmaxchild_exit
getmaxchild_exit:


// sh_setlinebuf
// Return size: 0
void sh_setlinebuf()
sh_setlinebuf_entry:
	// succ:  l0000000000485214
l0000000000485214:
	sp = fp
	sp = sp + -32
	Mem0[sp:word64] = x29
	sp = sp + 8
	Mem0[sp:word64] = x30
	x29 = x31 + 0x0000000000000000
	x1 = 0x00000000004C2000
	Mem0[sp + 16:word64] = x19
	w2 = 0x0000002D
	x19 = x0
	x1 = x1 + 0x00000000000006B0
	x0 = 0x00000000000003F0
	call sh_xmalloc (retsize: 0;)
	x1 = x0
	x0 = x19
	x19 = Mem0[sp + 16:word64]
	x29 = Mem0[sp:word64]
	sp = sp + 8
	x30 = Mem0[sp:word64]
	sp = sp + 32
	w2 = 0x00000001
	x3 = 0x00000000000003F0
	setvbuf(x0, x1, x2, x3)
	return
	// succ:  sh_setlinebuf_exit
sh_setlinebuf_exit:


// inttostr
// Return size: 0
void inttostr()
inttostr_entry:
	// succ:  l0000000000485254
l0000000000485254:
	sp = fp
	x4 = x1
	x3 = x2
	w1 = 0x0000000A
	x2 = x4
	w4 = 0x00000000
	// succ:  l0000000000485268_thunk_fmtumax
l0000000000485268_thunk_fmtumax:
	call fmtumax (retsize: 0;)
	return
	// succ:  inttostr_exit
inttostr_exit:


// itos
// Return size: 0
void itos()
itos_entry:
	// succ:  l000000000048526C
l000000000048526C:
	sp = fp
	sp = sp + -64
	Mem0[sp:word64] = x29
	sp = sp + 8
	Mem0[sp:word64] = x30
	x29 = x31 + 0x0000000000000000
	x3 = 0x0000000000000016
	w4 = 0x00000000
	x2 = x29 + 0x0000000000000020
	w1 = 0x0000000A
	Mem0[sp + 16:word64] = x19
	call fmtumax (retsize: 0;)
	x19 = x0
	strlen(x0)
	sp = sp + 0xFFFFFFFFFFFFFFF8
	x1 = 0x00000000004C2000
	w2 = 0x00000032
	x1 = x1 + 0x00000000000006D8
	x0 = x0 + 0x0000000000000001
	call sh_xmalloc (retsize: 0;)
	x1 = x19
	strcpy(x0, x1)
	sp = sp + 0xFFFFFFFFFFFFFFF8
	x19 = Mem0[sp + 16:word64]
	x29 = Mem0[sp:word64]
	sp = sp + 8
	x30 = Mem0[sp:word64]
	sp = sp + 64
	return
	// succ:  itos_exit
itos_exit:


// uinttostr
// Return size: 0
void uinttostr()
uinttostr_entry:
	// succ:  l00000000004852BC
l00000000004852BC:
	sp = fp
	x4 = x1
	x3 = x2
	w1 = 0x0000000A
	x2 = x4
	w4 = 0x00000008
	// succ:  l00000000004852D0_thunk_fmtumax
l00000000004852D0_thunk_fmtumax:
	call fmtumax (retsize: 0;)
	return
	// succ:  uinttostr_exit
uinttostr_exit:


// uitos
// Return size: 0
void uitos()
uitos_entry:
	// succ:  l00000000004852D4
l00000000004852D4:
	sp = fp
	sp = sp + -64
	Mem0[sp:word64] = x29
	sp = sp + 8
	Mem0[sp:word64] = x30
	x29 = x31 + 0x0000000000000000
	x3 = 0x0000000000000015
	w4 = 0x00000008
	x2 = x29 + 0x0000000000000020
	w1 = 0x0000000A
	Mem0[sp + 16:word64] = x19
	call fmtumax (retsize: 0;)
	x19 = x0
	strlen(x0)
	sp = sp + 0xFFFFFFFFFFFFFFF8
	x1 = 0x00000000004C2000
	w2 = 0x00000047
	x1 = x1 + 0x00000000000006D8
	x0 = x0 + 0x0000000000000001
	call sh_xmalloc (retsize: 0;)
	x1 = x19
	strcpy(x0, x1)
	sp = sp + 0xFFFFFFFFFFFFFFF8
	x19 = Mem0[sp + 16:word64]
	x29 = Mem0[sp:word64]
	sp = sp + 8
	x30 = Mem0[sp:word64]
	sp = sp + 64
	return
	// succ:  uitos_exit
uitos_exit:


// zread
// Return size: 0
void zread()
zread_entry:
	// succ:  l0000000000485324
l0000000000485324:
	sp = fp
	sp = sp + -48
	Mem0[sp:word64] = x29
	sp = sp + 8
	Mem0[sp:word64] = x30
	x29 = x31 + 0x0000000000000000
	v8 = sp + 32
	Mem0[v8:word64] = x21
	v8 = v8 + 8
	Mem0[v8:word64] = x22
	v11 = sp + 16
	Mem0[v11:word64] = x19
	v11 = v11 + 8
	Mem0[v11:word64] = x20
	w22 = w0
	x21 = x1
	x20 = x2
	goto l0000000000485354
	// succ:  l0000000000485354
l0000000000485344:
	__errno_location()
	sp = sp + 0xFFFFFFFFFFFFFFF8
	w3 = Mem0[x0:word32]
	w31 = w3 - 0x00000004
	NZCV = cond(w31)
	branch Test(NE,Z) l000000000048536C
	// succ:  l0000000000485354 l000000000048536C
l0000000000485354:
	x1 = x21
	x2 = x20
	w0 = w22
	read(x0, x1, x2)
	sp = sp + 0xFFFFFFFFFFFFFFF8
	x19 = x0
	branch (w19 & 0x00000000) != 0x00000000 l0000000000485344
	// succ:  l000000000048536C l0000000000485344
l000000000048536C:
	x0 = x19
	v18 = sp + 32
	x21 = Mem0[v18:word64]
	v18 = v18 + 8
	x22 = Mem0[v18:word64]
	v19 = sp + 16
	x19 = Mem0[v19:word64]
	v19 = v19 + 8
	x20 = Mem0[v19:word64]
	x29 = Mem0[sp:word64]
	sp = sp + 8
	x30 = Mem0[sp:word64]
	sp = sp + 48
	return
	// succ:  zread_exit
zread_exit:


// zreadretry
// Return size: 0
void zreadretry()
zreadretry_entry:
	// succ:  l0000000000485380
l0000000000485380:
	sp = fp
	sp = sp + -64
	Mem0[sp:word64] = x29
	sp = sp + 8
	Mem0[sp:word64] = x30
	x29 = x31 + 0x0000000000000000
	v8 = sp + 32
	Mem0[v8:word64] = x21
	v8 = v8 + 8
	Mem0[v8:word64] = x22
	v11 = sp + 16
	Mem0[v11:word64] = x19
	v11 = v11 + 8
	Mem0[v11:word64] = x20
	Mem0[sp + 48:word64] = x23
	x22 = x1
	w23 = w0
	x21 = x2
	w19 = 0x00000003
	// succ:  l00000000004853A4
l00000000004853A4:
	x1 = x22
	x2 = x21
	w0 = w23
	read(x0, x1, x2)
	sp = sp + 0xFFFFFFFFFFFFFFF8
	x31 = x0 + 0x0000000000000001
	NZCV = cond(x31)
	x20 = x0
	branch Test(NE,Z) l00000000004853D8
	// succ:  l00000000004853C0 l00000000004853D8
l00000000004853C0:
	__errno_location()
	sp = sp + 0xFFFFFFFFFFFFFFF8
	w3 = Mem0[x0:word32]
	w31 = w3 - 0x00000004
	NZCV = cond(w31)
	branch Test(NE,Z) l00000000004853D8
	// succ:  l00000000004853D0 l00000000004853D8
l00000000004853D0:
	w19 = w19 - 0x00000001
	NZCV = cond(w19)
	branch Test(NE,Z) l00000000004853A4
	// succ:  l00000000004853D8 l00000000004853A4
l00000000004853D8:
	x0 = x20
	v23 = sp + 32
	x21 = Mem0[v23:word64]
	v23 = v23 + 8
	x22 = Mem0[v23:word64]
	v24 = sp + 16
	x19 = Mem0[v24:word64]
	v24 = v24 + 8
	x20 = Mem0[v24:word64]
	x23 = Mem0[sp + 48:word64]
	x29 = Mem0[sp:word64]
	sp = sp + 8
	x30 = Mem0[sp:word64]
	sp = sp + 64
	return
	// succ:  zreadretry_exit
zreadretry_exit:


// zreadintr
// Return size: 0
void zreadintr()
zreadintr_entry:
	// succ:  l00000000004853F0
l00000000004853F0:
	sp = fp
	read(x0, x1, x2)
	return
	// succ:  zreadintr_exit
zreadintr_exit:


// zreadc
// Return size: 0
void zreadc()
zreadc_entry:
	// succ:  l00000000004853F4
l00000000004853F4:
	sp = fp
	sp = sp + -48
	Mem0[sp:word64] = x29
	sp = sp + 8
	Mem0[sp:word64] = x30
	x29 = x31 + 0x0000000000000000
	v8 = sp + 16
	Mem0[v8:word64] = x19
	v8 = v8 + 8
	Mem0[v8:word64] = x20
	x19 = 0x00000000004E1000
	x2 = x19 + 0xFFFFFFFFFFFFFA30
	x3 = Mem0[x2:word64]
	x2 = Mem0[x2 + 8:word64]
	Mem0[sp + 32:word64] = x21
	x31 = x2 - x3
	NZCV = cond(x31)
	x20 = x1
	branch Test(EQ,Z) l0000000000485458
	// succ:  l0000000000485420 l0000000000485458
l0000000000485420:
	branch x3 == 0x0000000000000000 l0000000000485458
	// succ:  l0000000000485424 l0000000000485458
l0000000000485424:
	branch x20 == 0x0000000000000000 l0000000000485490
	// succ:  l0000000000485428 l0000000000485490
l0000000000485428:
	x19 = x19 + 0xFFFFFFFFFFFFFA30
	x0 = Mem0[x19 + 8:word64]
	x1 = x19 + 0x0000000000000010
	v17 = Mem0[x1 + x0:byte]
	w1 = (word32) v17
	x0 = x0 + 0x0000000000000001
	Mem0[x19 + 8:word64] = x0
	Mem0[x20:byte] = (byte) w1
	x0 = 0x0000000000000001
	// succ:  l0000000000485448
l0000000000485448:
	v18 = sp + 16
	x19 = Mem0[v18:word64]
	v18 = v18 + 8
	x20 = Mem0[v18:word64]
	x21 = Mem0[sp + 32:word64]
	x29 = Mem0[sp:word64]
	sp = sp + 8
	x30 = Mem0[sp:word64]
	sp = sp + 48
	return
	// succ:  zreadc_exit
l0000000000485458:
	x21 = x19 + 0xFFFFFFFFFFFFFA30
	x1 = x21 + 0x0000000000000010
	x2 = 0x0000000000000080
	call zread (retsize: 0;)
	x31 = x0 - x31
	NZCV = cond(x31)
	Mem0[x21 + 8:word64] = 0x0000000000000000
	branch Test(LE,ZCV) l000000000048547C
	// succ:  l0000000000485474 l000000000048547C
l0000000000485474:
	Mem0[x21:word64] = x0
	goto l0000000000485424
	// succ:  l0000000000485424
l000000000048547C:
	Mem0[x21:word64] = 0x0000000000000000
	v20 = sp + 16
	x19 = Mem0[v20:word64]
	v20 = v20 + 8
	x20 = Mem0[v20:word64]
	x21 = Mem0[sp + 32:word64]
	x29 = Mem0[sp:word64]
	sp = sp + 8
	x30 = Mem0[sp:word64]
	sp = sp + 48
	return
	// succ:  zreadc_exit
l0000000000485490:
	x0 = 0x0000000000000001
	goto l0000000000485448
	// succ:  l0000000000485448
zreadc_exit:


// zreadcintr
// Return size: 0
void zreadcintr()
zreadcintr_entry:
	// succ:  l0000000000485498
l0000000000485498:
	sp = fp
	sp = sp + -48
	Mem0[sp:word64] = x29
	sp = sp + 8
	Mem0[sp:word64] = x30
	x29 = x31 + 0x0000000000000000
	v8 = sp + 16
	Mem0[v8:word64] = x19
	v8 = v8 + 8
	Mem0[v8:word64] = x20
	x19 = 0x00000000004E1000
	x2 = x19 + 0xFFFFFFFFFFFFFA30
	x3 = Mem0[x2:word64]
	x2 = Mem0[x2 + 8:word64]
	Mem0[sp + 32:word64] = x21
	x31 = x2 - x3
	NZCV = cond(x31)
	x20 = x1
	branch Test(EQ,Z) l00000000004854FC
	// succ:  l00000000004854C4 l00000000004854FC
l00000000004854C4:
	branch x3 == 0x0000000000000000 l00000000004854FC
	// succ:  l00000000004854C8 l00000000004854FC
l00000000004854C8:
	branch x20 == 0x0000000000000000 l0000000000485534
	// succ:  l00000000004854CC l0000000000485534
l00000000004854CC:
	x19 = x19 + 0xFFFFFFFFFFFFFA30
	x0 = Mem0[x19 + 8:word64]
	x1 = x19 + 0x0000000000000010
	v17 = Mem0[x1 + x0:byte]
	w1 = (word32) v17
	x0 = x0 + 0x0000000000000001
	Mem0[x19 + 8:word64] = x0
	Mem0[x20:byte] = (byte) w1
	x0 = 0x0000000000000001
	// succ:  l00000000004854EC
l00000000004854EC:
	v18 = sp + 16
	x19 = Mem0[v18:word64]
	v18 = v18 + 8
	x20 = Mem0[v18:word64]
	x21 = Mem0[sp + 32:word64]
	x29 = Mem0[sp:word64]
	sp = sp + 8
	x30 = Mem0[sp:word64]
	sp = sp + 48
	return
	// succ:  zreadcintr_exit
l00000000004854FC:
	x21 = x19 + 0xFFFFFFFFFFFFFA30
	x1 = x21 + 0x0000000000000010
	x2 = 0x0000000000000080
	call zreadintr (retsize: 0;)
	x31 = x0 - x31
	NZCV = cond(x31)
	Mem0[x21 + 8:word64] = 0x0000000000000000
	branch Test(LE,ZCV) l0000000000485520
	// succ:  l0000000000485518 l0000000000485520
l0000000000485518:
	Mem0[x21:word64] = x0
	goto l00000000004854C8
	// succ:  l00000000004854C8
l0000000000485520:
	Mem0[x21:word64] = 0x0000000000000000
	v20 = sp + 16
	x19 = Mem0[v20:word64]
	v20 = v20 + 8
	x20 = Mem0[v20:word64]
	x21 = Mem0[sp + 32:word64]
	x29 = Mem0[sp:word64]
	sp = sp + 8
	x30 = Mem0[sp:word64]
	sp = sp + 48
	return
	// succ:  zreadcintr_exit
l0000000000485534:
	x0 = 0x0000000000000001
	goto l00000000004854EC
	// succ:  l00000000004854EC
zreadcintr_exit:


// zreset
// Return size: 0
void zreset()
zreset_entry:
	// succ:  l000000000048553C
l000000000048553C:
	sp = fp
	x0 = 0x00000000004E1000
	x0 = x0 + 0xFFFFFFFFFFFFFA30
	Mem0[x0:word64] = 0x0000000000000000
	Mem0[x0 + 8:word64] = 0x0000000000000000
	return
	// succ:  zreset_exit
zreset_exit:


// zsyncfd
// Return size: 0
void zsyncfd()
zsyncfd_entry:
	// succ:  l0000000000485550
l0000000000485550:
	sp = fp
	sp = sp + -32
	Mem0[sp:word64] = x29
	sp = sp + 8
	Mem0[sp:word64] = x30
	x29 = x31 + 0x0000000000000000
	Mem0[sp + 16:word64] = x19
	x19 = 0x00000000004E1000
	x2 = x19 + 0xFFFFFFFFFFFFFA30
	x3 = Mem0[x2:word64]
	x1 = Mem0[x2 + 8:word64]
	x1 = x3 - x1
	x31 = x1 - x31
	NZCV = cond(x31)
	branch Test(LE,ZCV) l000000000048558C
	// succ:  l0000000000485578 l000000000048558C
l0000000000485578:
	x1 = x31 - x1
	w2 = 0x00000001
	lseek(x0, x1, x2)
	sp = sp + 0xFFFFFFFFFFFFFFF8
	x31 = x0 + 0x0000000000000001
	NZCV = cond(x31)
	branch Test(EQ,Z) l0000000000485598
	// succ:  l000000000048558C l0000000000485598
l000000000048558C:
	x19 = x19 + 0xFFFFFFFFFFFFFA30
	Mem0[x19 + 8:word64] = 0x0000000000000000
	Mem0[x19:word64] = 0x0000000000000000
	// succ:  l0000000000485598
l0000000000485598:
	x19 = Mem0[sp + 16:word64]
	x29 = Mem0[sp:word64]
	sp = sp + 8
	x30 = Mem0[sp:word64]
	sp = sp + 32
	return
	// succ:  zsyncfd_exit
zsyncfd_exit:


// ttgetattr
// Return size: 0
void ttgetattr()
ttgetattr_entry:
	// succ:  l00000000004855A4
l00000000004855A4:
	sp = fp
	call tcgetattr (retsize: 0;)
	return
	// succ:  ttgetattr_exit
ttgetattr_exit:


// ttsetattr
// Return size: 0
void ttsetattr()
ttsetattr_entry:
	// succ:  l00000000004855A8
l00000000004855A8:
	sp = fp
	x2 = x1
	w1 = 0x00000001
	tcsetattr(x0, x1, x2)
	return
	// succ:  ttsetattr_exit
ttsetattr_exit:


// ttsave
// Return size: 0
void ttsave()
ttsave_entry:
	// succ:  l00000000004855B4
l00000000004855B4:
	sp = fp
	sp = sp + -32
	Mem0[sp:word64] = x29
	sp = sp + 8
	Mem0[sp:word64] = x30
	x29 = x31 + 0x0000000000000000
	Mem0[sp + 16:word64] = x19
	x19 = 0x00000000004E1000
	x19 = x19 + 0xFFFFFFFFFFFFFAC0
	w0 = Mem0[x19:word32]
	branch w0 != 0x00000000 l00000000004855EC
	// succ:  l00000000004855D0 l00000000004855EC
l00000000004855D0:
	x1 = x19 + 0x0000000000000008
	call tcgetattr (retsize: 0;)
	w0 = 0x00000001
	x1 = x19 + 0x0000000000000048
	call tcgetattr (retsize: 0;)
	w0 = 0x00000001
	Mem0[x19:word32] = w0
	// succ:  l00000000004855EC
l00000000004855EC:
	x19 = Mem0[sp + 16:word64]
	x29 = Mem0[sp:word64]
	sp = sp + 8
	x30 = Mem0[sp:word64]
	sp = sp + 32
	return
	// succ:  ttsave_exit
ttsave_exit:


// ttrestore
// Return size: 0
void ttrestore()
ttrestore_entry:
	// succ:  l00000000004855F8
l00000000004855F8:
	sp = fp
	sp = sp + -32
	Mem0[sp:word64] = x29
	sp = sp + 8
	Mem0[sp:word64] = x30
	x29 = x31 + 0x0000000000000000
	Mem0[sp + 16:word64] = x19
	x19 = 0x00000000004E1000
	x19 = x19 + 0xFFFFFFFFFFFFFAC0
	w0 = Mem0[x19:word32]
	branch w0 == 0x00000000 l0000000000485638
	// succ:  l0000000000485614 l0000000000485638
l0000000000485614:
	w1 = 0x00000001
	x2 = x19 + 0x0000000000000008
	w0 = 0x00000000
	tcsetattr(x0, x1, x2)
	sp = sp + 0xFFFFFFFFFFFFFFF8
	w0 = 0x00000001
	w1 = w0
	x2 = x19 + 0x0000000000000048
	tcsetattr(x0, x1, x2)
	sp = sp + 0xFFFFFFFFFFFFFFF8
	Mem0[x19:word32] = 0x00000000
	// succ:  l0000000000485638
l0000000000485638:
	x19 = Mem0[sp + 16:word64]
	x29 = Mem0[sp:word64]
	sp = sp + 8
	x30 = Mem0[sp:word64]
	sp = sp + 32
	return
	// succ:  ttrestore_exit
ttrestore_exit:


// ttattr
// Return size: 0
void ttattr()
ttattr_entry:
	// succ:  l0000000000485644
l0000000000485644:
	sp = fp
	x1 = 0x00000000004E1000
	x1 = x1 + 0xFFFFFFFFFFFFFAC0
	w3 = Mem0[x1:word32]
	w2 = w0
	branch w3 == 0x00000000 l0000000000485670
	// succ:  l0000000000485658 l0000000000485670
l0000000000485658:
	x0 = x1 + 0x0000000000000008
	branch w2 == 0x00000000 l000000000048566C
	// succ:  l0000000000485660 l000000000048566C
l0000000000485660:
	x1 = x1 + 0x0000000000000048
	w31 = w2 - 0x00000001
	NZCV = cond(w31)
l000000000048566C:
	return
	// succ:  ttattr_exit
l0000000000485670:
	x0 = 0x0000000000000000
	return
	// succ:  ttattr_exit
ttattr_exit:


// tt_setonechar
// Return size: 0
void tt_setonechar()
tt_setonechar_entry:
	// succ:  l0000000000485678
l0000000000485678:
	sp = fp
	w3 = Mem0[x0 + 12:word32]
	w1 = Mem0[x0 + 4:word32]
	w2 = Mem0[x0:word32]
	w4 = 0xFFFF8001
	w3 = w3 & 0xFFFFFFFD
	w3 = w3 | w4
	w1 = w1 & 0xFFFFFFC7
	w4 = 0x00000005
	w1 = w1 | w4
	w2 = w2 & 0xFFFFFFBF
	Mem0[x0 + 4:word32] = w1
	w2 = w2 | 0x00000100
	w1 = 0x00000001
	Mem0[x0 + 12:word32] = w3
	Mem0[x0:word32] = w2
	Mem0[x0 + 23:byte] = (byte) w1
	Mem0[x0 + 22:byte] = 0x00
	w0 = 0x00000000
	return
	// succ:  tt_setonechar_exit
tt_setonechar_exit:


// ttfd_onechar
// Return size: 0
void ttfd_onechar()
ttfd_onechar_entry:
	// succ:  l00000000004856C4
l00000000004856C4:
	sp = fp
	sp = sp + -32
	Mem0[sp:word64] = x29
	sp = sp + 8
	Mem0[sp:word64] = x30
	x29 = x31 + 0x0000000000000000
	v8 = sp + 16
	Mem0[v8:word64] = x19
	v8 = v8 + 8
	Mem0[v8:word64] = x20
	w20 = w0
	x0 = x1
	x19 = x1
	call tt_setonechar (retsize: 0;)
	branch (w0 & 0x00000000) == 0x00000000 l00000000004856FC
	// succ:  l00000000004856E4 l00000000004856FC
l00000000004856E4:
	w0 = w20
	x2 = x19
	v14 = sp + 16
	x19 = Mem0[v14:word64]
	v14 = v14 + 8
	x20 = Mem0[v14:word64]
	x29 = Mem0[sp:word64]
	sp = sp + 8
	x30 = Mem0[sp:word64]
	sp = sp + 32
	w1 = 0x00000001
	tcsetattr(x0, x1, x2)
	return
	// succ:  ttfd_onechar_exit
l00000000004856FC:
	w0 = 0xFFFFFFFF
	v16 = sp + 16
	x19 = Mem0[v16:word64]
	v16 = v16 + 8
	x20 = Mem0[v16:word64]
	x29 = Mem0[sp:word64]
	sp = sp + 8
	x30 = Mem0[sp:word64]
	sp = sp + 32
	return
	// succ:  ttfd_onechar_exit
ttfd_onechar_exit:


// ttonechar
// Return size: 0
void ttonechar()
ttonechar_entry:
	// succ:  l000000000048570C
l000000000048570C:
	sp = fp
	sp = sp + -80
	Mem0[sp:word64] = x29
	sp = sp + 8
	Mem0[sp:word64] = x30
	x29 = x31 + 0x0000000000000000
	x0 = 0x00000000004E1000
	x0 = x0 + 0xFFFFFFFFFFFFFAC0
	w1 = Mem0[x0:word32]
	branch w1 == 0x00000000 l0000000000485764
	// succ:  l0000000000485724 l0000000000485764
l0000000000485724:
	x0 = x0 + 0x0000000000000008
l000000000048575C:
	x29 = Mem0[sp:word64]
	sp = sp + 8
	x30 = Mem0[sp:word64]
	sp = sp + 80
	return
	// succ:  ttonechar_exit
l0000000000485764:
	w0 = 0xFFFFFFFF
	goto l000000000048575C
	// succ:  l000000000048575C
ttonechar_exit:


// tt_setnoecho
// Return size: 0
void tt_setnoecho()
tt_setnoecho_entry:
	// succ:  l000000000048576C
l000000000048576C:
	sp = fp
	w1 = Mem0[x0 + 12:word32]
	w2 = 0xFFFFFF97
	w1 = w1 & w2
	Mem0[x0 + 12:word32] = w1
	w0 = 0x00000000
	return
	// succ:  tt_setnoecho_exit
tt_setnoecho_exit:


// ttfd_noecho
// Return size: 0
void ttfd_noecho()
ttfd_noecho_entry:
	// succ:  l0000000000485784
l0000000000485784:
	sp = fp
	x2 = x1
	w1 = Mem0[x1 + 12:word32]
	w3 = 0xFFFFFF97
	w1 = w1 & w3
	Mem0[x2 + 12:word32] = w1
	w1 = 0x00000001
	tcsetattr(x0, x1, x2)
	return
	// succ:  ttfd_noecho_exit
ttfd_noecho_exit:


// ttnoecho
// Return size: 0
void ttnoecho()
ttnoecho_entry:
	// succ:  l00000000004857A0
l00000000004857A0:
	sp = fp
	sp = sp + -80
	Mem0[sp:word64] = x29
	sp = sp + 8
	Mem0[sp:word64] = x30
	x29 = x31 + 0x0000000000000000
	x2 = 0x00000000004E1000
	x2 = x2 + 0xFFFFFFFFFFFFFAC0
	w0 = Mem0[x2:word32]
	branch w0 == 0x00000000 l000000000048580C
	// succ:  l00000000004857B8 l000000000048580C
l00000000004857B8:
	x2 = x2 + 0x0000000000000008
l0000000000485804:
	x29 = Mem0[sp:word64]
	sp = sp + 8
	x30 = Mem0[sp:word64]
	sp = sp + 80
	return
	// succ:  ttnoecho_exit
l000000000048580C:
	w0 = 0xFFFFFFFF
	goto l0000000000485804
	// succ:  l0000000000485804
ttnoecho_exit:


// tt_seteightbit
// Return size: 0
void tt_seteightbit()
tt_seteightbit_entry:
	// succ:  l0000000000485814
l0000000000485814:
	sp = fp
	w2 = Mem0[x0 + 8:word32]
	w1 = Mem0[x0:word32]
	w2 = w2 & 0xFFFFFEFF
	w1 = w1 & 0xFFFFFFDF
	w2 = w2 | 0x00000030
	Mem0[x0:word32] = w1
	Mem0[x0 + 8:word32] = w2
	w0 = 0x00000000
	return
	// succ:  tt_seteightbit_exit
tt_seteightbit_exit:


// ttfd_eightbit
// Return size: 0
void ttfd_eightbit()
ttfd_eightbit_entry:
	// succ:  l0000000000485838
l0000000000485838:
	sp = fp
	w3 = Mem0[x1 + 8:word32]
	x2 = x1
	w1 = Mem0[x1:word32]
	w3 = w3 & 0xFFFFFEFF
	w1 = w1 & 0xFFFFFFDF
	w3 = w3 | 0x00000030
	Mem0[x2:word32] = w1
	Mem0[x2 + 8:word32] = w3
	w1 = 0x00000001
	tcsetattr(x0, x1, x2)
	return
	// succ:  ttfd_eightbit_exit
ttfd_eightbit_exit:


// tteightbit
// Return size: 0
void tteightbit()
tteightbit_entry:
	// succ:  l0000000000485860
l0000000000485860:
	sp = fp
	sp = sp + -80
	Mem0[sp:word64] = x29
	sp = sp + 8
	Mem0[sp:word64] = x30
	x29 = x31 + 0x0000000000000000
	x0 = 0x00000000004E1000
	x0 = x0 + 0xFFFFFFFFFFFFFAC0
	w1 = Mem0[x0:word32]
	branch w1 == 0x00000000 l00000000004858B8
	// succ:  l0000000000485878 l00000000004858B8
l0000000000485878:
	x0 = x0 + 0x0000000000000008
l00000000004858B0:
	x29 = Mem0[sp:word64]
	sp = sp + 8
	x30 = Mem0[sp:word64]
	sp = sp + 80
	return
	// succ:  tteightbit_exit
l00000000004858B8:
	w0 = 0xFFFFFFFF
	goto l00000000004858B0
	// succ:  l00000000004858B0
tteightbit_exit:


// tt_setnocanon
// Return size: 0
void tt_setnocanon()
tt_setnocanon_entry:
	// succ:  l00000000004858C0
l00000000004858C0:
	sp = fp
	w2 = Mem0[x0 + 12:word32]
	x1 = x0
	w2 = w2 & 0xFFFFFFFD
	w0 = 0x00000000
	Mem0[x1 + 12:word32] = w2
	return
	// succ:  tt_setnocanon_exit
tt_setnocanon_exit:


// ttfd_nocanon
// Return size: 0
void ttfd_nocanon()
ttfd_nocanon_entry:
	// succ:  l00000000004858D8
l00000000004858D8:
	sp = fp
	w3 = Mem0[x1 + 12:word32]
	x2 = x1
	w3 = w3 & 0xFFFFFFFD
	w1 = 0x00000001
	Mem0[x2 + 12:word32] = w3
	tcsetattr(x0, x1, x2)
	return
	// succ:  ttfd_nocanon_exit
ttfd_nocanon_exit:


// ttnocanon
// Return size: 0
void ttnocanon()
ttnocanon_entry:
	// succ:  l00000000004858F0
l00000000004858F0:
	sp = fp
	sp = sp + -80
	Mem0[sp:word64] = x29
	sp = sp + 8
	Mem0[sp:word64] = x30
	x29 = x31 + 0x0000000000000000
	x2 = 0x00000000004E1000
	x2 = x2 + 0xFFFFFFFFFFFFFAC0
	w0 = Mem0[x2:word32]
	branch w0 == 0x00000000 l0000000000485958
	// succ:  l0000000000485908 l0000000000485958
l0000000000485908:
	x2 = x2 + 0x0000000000000008
l0000000000485950:
	x29 = Mem0[sp:word64]
	sp = sp + 8
	x30 = Mem0[sp:word64]
	sp = sp + 80
	return
	// succ:  ttnocanon_exit
l0000000000485958:
	w0 = 0xFFFFFFFF
	goto l0000000000485950
	// succ:  l0000000000485950
ttnocanon_exit:


// tt_setcbreak
// Return size: 0
void tt_setcbreak()
tt_setcbreak_entry:
	// succ:  l0000000000485960
l0000000000485960:
	sp = fp
	sp = sp + -32
	Mem0[sp:word64] = x29
	sp = sp + 8
	Mem0[sp:word64] = x30
	x29 = x31 + 0x0000000000000000
	Mem0[sp + 16:word64] = x19
	x19 = x0
	call tt_setonechar (retsize: 0;)
	branch (w0 & 0x00000000) == 0x00000000 l0000000000485998
	// succ:  l0000000000485978 l0000000000485998
l0000000000485978:
	w0 = Mem0[x19 + 12:word32]
	w1 = 0xFFFFFF97
	w0 = w0 & w1
	Mem0[x19 + 12:word32] = w0
	w0 = 0x00000000
	// succ:  l000000000048598C
l000000000048598C:
	x19 = Mem0[sp + 16:word64]
	x29 = Mem0[sp:word64]
	sp = sp + 8
	x30 = Mem0[sp:word64]
	sp = sp + 32
	return
	// succ:  tt_setcbreak_exit
l0000000000485998:
	w0 = 0xFFFFFFFF
	goto l000000000048598C
	// succ:  l000000000048598C
tt_setcbreak_exit:


// ttfd_cbreak
// Return size: 0
void ttfd_cbreak()
ttfd_cbreak_entry:
	// succ:  l00000000004859A0
l00000000004859A0:
	sp = fp
	sp = sp + -32
	Mem0[sp:word64] = x29
	sp = sp + 8
	Mem0[sp:word64] = x30
	x29 = x31 + 0x0000000000000000
	v8 = sp + 16
	Mem0[v8:word64] = x19
	v8 = v8 + 8
	Mem0[v8:word64] = x20
	w20 = w0
	x0 = x1
	x19 = x1
	call tt_setonechar (retsize: 0;)
	branch (w0 & 0x00000000) == 0x00000000 l00000000004859E8
	// succ:  l00000000004859C0 l00000000004859E8
l00000000004859C0:
	w0 = Mem0[x19 + 12:word32]
	w1 = 0xFFFFFF97
	w0 = w0 & w1
	Mem0[x19 + 12:word32] = w0
	x2 = x19
	w0 = w20
	v15 = sp + 16
	x19 = Mem0[v15:word64]
	v15 = v15 + 8
	x20 = Mem0[v15:word64]
	x29 = Mem0[sp:word64]
	sp = sp + 8
	x30 = Mem0[sp:word64]
	sp = sp + 32
	w1 = 0x00000001
	tcsetattr(x0, x1, x2)
	return
	// succ:  ttfd_cbreak_exit
l00000000004859E8:
	w0 = 0xFFFFFFFF
	v16 = sp + 16
	x19 = Mem0[v16:word64]
	v16 = v16 + 8
	x20 = Mem0[v16:word64]
	x29 = Mem0[sp:word64]
	sp = sp + 8
	x30 = Mem0[sp:word64]
	sp = sp + 32
	return
	// succ:  ttfd_cbreak_exit
ttfd_cbreak_exit:


// ttcbreak
// Return size: 0
void ttcbreak()
ttcbreak_entry:
	// succ:  l00000000004859F8
l00000000004859F8:
	sp = fp
	sp = sp + -80
	Mem0[sp:word64] = x29
	sp = sp + 8
	Mem0[sp:word64] = x30
	x29 = x31 + 0x0000000000000000
	x0 = 0x00000000004E1000
	x0 = x0 + 0xFFFFFFFFFFFFFAC0
	w1 = Mem0[x0:word32]
	branch w1 == 0x00000000 l0000000000485A50
	// succ:  l0000000000485A10 l0000000000485A50
l0000000000485A10:
	x0 = x0 + 0x0000000000000008
l0000000000485A48:
	x29 = Mem0[sp:word64]
	sp = sp + 8
	x30 = Mem0[sp:word64]
	sp = sp + 80
	return
	// succ:  ttcbreak_exit
l0000000000485A50:
	w0 = 0xFFFFFFFF
	goto l0000000000485A48
	// succ:  l0000000000485A48
ttcbreak_exit:


// sh_regmatch
// Return size: 0
void sh_regmatch()
sh_regmatch_entry:
	// succ:  l0000000000485A58
l0000000000485A58:
	sp = fp
	sp = sp + -176
	Mem0[sp:word64] = x29
	sp = sp + 8
	Mem0[sp:word64] = x30
	x29 = x31 + 0x0000000000000000
	x3 = 0x00000000004E1000
	w3 = Mem0[x3 + 2560:word32]
	v10 = sp + 16
	Mem0[v10:word64] = x19
	v10 = v10 + 8
	Mem0[v10:word64] = x20
	v13 = sp + 32
	Mem0[v13:word64] = x21
	v13 = v13 + 8
	Mem0[v13:word64] = x22
	v16 = sp + 48
	Mem0[v16:word64] = x23
	v16 = v16 + 8
	Mem0[v16:word64] = x24
	v19 = sp + 64
	Mem0[v19:word64] = x25
	v19 = v19 + 8
	Mem0[v19:word64] = x26
	Mem0[sp + 80:word64] = x27
	v21 = x29 + 96
	Mem0[v21:word64] = x31
	v21 = v21 + 8
	Mem0[v21:word64] = x31
	v22 = x29 + 112
	Mem0[v22:word64] = x31
	v22 = v22 + 8
	Mem0[v22:word64] = x31
	v23 = x29 + 128
	Mem0[v23:word64] = x31
	v23 = v23 + 8
	Mem0[v23:word64] = x31
	v24 = x29 + 144
	Mem0[v24:word64] = x31
	v24 = v24 + 8
	Mem0[v24:word64] = x31
	w21 = w2
	x20 = x0
	w2 = 0x00000003
	branch w3 != 0x00000000 l0000000000485AAC
	// succ:  l0000000000485A9C l0000000000485AAC
l0000000000485A9C:
	x0 = 0x00000000004DF000
	w0 = Mem0[x0 + 3128:word32]
	NZCV = cond(w0 - w31)
l0000000000485AAC:
	x0 = x29 + 0x0000000000000060
	call regcomp (retsize: 0;)
	w4 = w0
	w19 = 0x00000002
	branch w0 == 0x00000000 l0000000000485AE0
	// succ:  l0000000000485AC0 l0000000000485AE0
l0000000000485AC0:
	w0 = w19
	v33 = sp + 32
	x21 = Mem0[v33:word64]
	v33 = v33 + 8
	x22 = Mem0[v33:word64]
	v34 = sp + 16
	x19 = Mem0[v34:word64]
	v34 = v34 + 8
	x20 = Mem0[v34:word64]
	v35 = sp + 48
	x23 = Mem0[v35:word64]
	v35 = v35 + 8
	x24 = Mem0[v35:word64]
	v36 = sp + 64
	x25 = Mem0[v36:word64]
	v36 = v36 + 8
	x26 = Mem0[v36:word64]
	x27 = Mem0[sp + 80:word64]
	x29 = Mem0[sp:word64]
	sp = sp + 8
	x30 = Mem0[sp:word64]
	sp = sp + 176
	return
	// succ:  sh_regmatch_exit
l0000000000485AE0:
	x2 = Mem0[x29 + 144:word64]
	Mem0[x29 + 160:word64] = x4
	x2 = x2 + 0x0000000000000001
sh_regmatch_exit:


// sh_stat
// Return size: 0
void sh_stat()
sh_stat_entry:
	// succ:  l0000000000485C30
l0000000000485C30:
	sp = fp
	sp = sp + -64
	Mem0[sp:word64] = x29
	sp = sp + 8
	Mem0[sp:word64] = x30
	x29 = x31 + 0x0000000000000000
	v8 = sp + 16
	Mem0[v8:word64] = x19
	v8 = v8 + 8
	Mem0[v8:word64] = x20
	v11 = sp + 32
	Mem0[v11:word64] = x21
	v11 = v11 + 8
	Mem0[v11:word64] = x22
	v14 = sp + 48
	Mem0[v14:word64] = x23
	v14 = v14 + 8
	Mem0[v14:word64] = x24
	v17 = Mem0[x0:byte]
	w3 = (word32) v17
	x19 = x0
	x20 = x1
	branch w3 == 0x00000000 l0000000000485CF4
	// succ:  l0000000000485C54 l0000000000485CF4
l0000000000485C54:
	w31 = w3 - 0x0000002F
	NZCV = cond(w31)
	branch Test(EQ,Z) l0000000000485C7C
	// succ:  l0000000000485C5C l0000000000485C7C
l0000000000485C5C:
	w0 = 0x00000000
	x1 = x19
	// succ:  l0000000000485C64
l0000000000485C64:
	x2 = x20
	v24 = sp + 32
	x21 = Mem0[v24:word64]
	v24 = v24 + 8
	x22 = Mem0[v24:word64]
	v25 = sp + 16
	x19 = Mem0[v25:word64]
	v25 = v25 + 8
	x20 = Mem0[v25:word64]
	v26 = sp + 48
	x23 = Mem0[v26:word64]
	v26 = v26 + 8
	x24 = Mem0[v26:word64]
	x29 = Mem0[sp:word64]
	sp = sp + 8
	x30 = Mem0[sp:word64]
	sp = sp + 64
	__xstat(x0, x1, x2)
	return
	// succ:  sh_stat_exit
l0000000000485C7C:
	v31 = Mem0[x0 + 1:byte]
	w1 = (word32) v31
	w31 = w1 - 0x00000064
	NZCV = cond(w31)
	branch Test(NE,Z) l0000000000485C5C
	// succ:  l0000000000485C88 l0000000000485C5C
l0000000000485C88:
	x22 = 0x00000000004AD000
	x22 = x22 + 0xFFFFFFFFFFFFFC20
	x1 = x22
	x2 = 0x0000000000000008
	strncmp(x0, x1, x2)
	sp = sp + 0xFFFFFFFFFFFFFFF8
	w21 = w0
	branch w0 != 0x00000000 l0000000000485C5C
	// succ:  l0000000000485CA4 l0000000000485C5C
l0000000000485CA4:
	x19 = x19 + 0x0000000000000008
	x0 = x19
	x24 = 0x00000000004E1000
	strlen(x0)
	sp = sp + 0xFFFFFFFFFFFFFFF8
	x24 = x24 + 0xFFFFFFFFFFFFFB48
	x1 = x0 + 0x0000000000000009
	x2 = 0x00000000004C2000
	x0 = Mem0[x24:word64]
	x2 = x2 + 0x0000000000000728
	w3 = 0x0000006F
	call sh_xrealloc (retsize: 0;)
	x1 = Mem0[x22:word64]
	x23 = x0
	Mem0[x0:word64] = x1
	x0 = x0 + 8
	x1 = x19
	Mem0[x24:word64] = x23
	strcpy(x0, x1)
	sp = sp + 0xFFFFFFFFFFFFFFF8
	w0 = w21
	x1 = x23
	goto l0000000000485C64
	// succ:  l0000000000485C64
l0000000000485CF4:
	__errno_location()
	sp = sp + 0xFFFFFFFFFFFFFFF8
	w1 = 0x00000002
	Mem0[x0:word32] = w1
	v28 = sp + 16
	x19 = Mem0[v28:word64]
	v28 = v28 + 8
	x20 = Mem0[v28:word64]
	w0 = 0xFFFFFFFF
	v29 = sp + 32
	x21 = Mem0[v29:word64]
	v29 = v29 + 8
	x22 = Mem0[v29:word64]
	v30 = sp + 48
	x23 = Mem0[v30:word64]
	v30 = v30 + 8
	x24 = Mem0[v30:word64]
	x29 = Mem0[sp:word64]
	sp = sp + 8
	x30 = Mem0[sp:word64]
	sp = sp + 64
	return
	// succ:  sh_stat_exit
sh_stat_exit:


// sh_eaccess
// Return size: 0
void sh_eaccess()
sh_eaccess_entry:
	// succ:  l0000000000485D18
l0000000000485D18:
	sp = fp
	sp = sp + -160
	Mem0[sp:word64] = x29
	sp = sp + 8
	Mem0[sp:word64] = x30
	x29 = x31 + 0x0000000000000000
	v8 = sp + 16
	Mem0[v8:word64] = x19
	v8 = v8 + 8
	Mem0[v8:word64] = x20
	v11 = Mem0[x0:byte]
	w2 = (word32) v11
	x19 = x0
	w31 = w2 - 0x0000002F
	NZCV = cond(w31)
	w20 = w1
	branch Test(EQ,Z) l0000000000485D58
	// succ:  l0000000000485D38 l0000000000485D58
l0000000000485D38:
	w0 = 0xFFFFFF9C
	x1 = x19
	w2 = w20
	w3 = 0x00000200
	call faccessat (retsize: 0;)
	// succ:  l0000000000485D4C
l0000000000485D4C:
	v20 = sp + 16
	x19 = Mem0[v20:word64]
	v20 = v20 + 8
	x20 = Mem0[v20:word64]
	x29 = Mem0[sp:word64]
	sp = sp + 8
	x30 = Mem0[sp:word64]
	sp = sp + 160
	return
	// succ:  sh_eaccess_exit
l0000000000485D58:
	v21 = Mem0[x0 + 1:byte]
	w1 = (word32) v21
	w31 = w1 - 0x00000064
	NZCV = cond(w31)
	branch Test(EQ,Z) l0000000000485E2C
	// succ:  l0000000000485D64 l0000000000485E2C
l0000000000485D64:
	x1 = 0x00000000004C2000
	x0 = x19
	x1 = x1 + 0x0000000000000748
	x2 = 0x0000000000000008
	strncmp(x0, x1, x2)
	sp = sp + 0xFFFFFFFFFFFFFFF8
	branch w0 != 0x00000000 l0000000000485D38
	// succ:  l0000000000485D7C l0000000000485D38
l0000000000485D7C:
	v23 = Mem0[x19 + 8:byte]
	w0 = (word32) v23
	w31 = w0 - 0x00000069
	NZCV = cond(w31)
	branch Test(EQ,Z) l0000000000485E14
	// succ:  l0000000000485D88 l0000000000485E14
l0000000000485D88:
	w31 = w0 - 0x0000006F
	NZCV = cond(w31)
	branch Test(EQ,Z) l0000000000485E5C
	// succ:  l0000000000485D90 l0000000000485E5C
l0000000000485D90:
	w31 = w0 - 0x00000065
	NZCV = cond(w31)
	branch Test(NE,Z) l0000000000485D38
	// succ:  l0000000000485D98 l0000000000485D38
l0000000000485D98:
	v24 = Mem0[x19 + 9:byte]
	w0 = (word32) v24
	w31 = w0 - 0x00000072
	NZCV = cond(w31)
	branch Test(NE,Z) l0000000000485D38
	// succ:  l0000000000485DA4 l0000000000485D38
l0000000000485DA4:
	v25 = Mem0[x19 + 10:byte]
	w0 = (word32) v25
	w31 = w0 - 0x00000072
	NZCV = cond(w31)
	branch Test(NE,Z) l0000000000485D38
	// succ:  l0000000000485DB0 l0000000000485D38
l0000000000485DB0:
	v26 = Mem0[x19 + 11:byte]
	w0 = (word32) v26
	branch w0 != 0x00000000 l0000000000485D38
	// succ:  l0000000000485DB8 l0000000000485D38
l0000000000485DB8:
	x1 = x29 + 0x0000000000000020
	x0 = x19
	call sh_stat (retsize: 0;)
	branch (w0 & 0x00000000) == 0x00000000 l0000000000485E8C
	// succ:  l0000000000485DC8 l0000000000485E8C
l0000000000485DC8:
	x0 = 0x00000000004D6000
	w0 = Mem0[x0 + 1636:word32]
	branch w0 != 0x00000000 l0000000000485DE8
	// succ:  l0000000000485DD4 l0000000000485DE8
l0000000000485DD4:
	branch (w20 & 0x00000001) == 0x00000000 l0000000000485E04
	// succ:  l0000000000485DD8 l0000000000485E04
l0000000000485DD8:
	w1 = Mem0[x29 + 48:word32]
	w2 = 0x00000049
	NZ = cond(w1 & w2)
	C = false
	V = false
	branch Test(NE,Z) l0000000000485E04
	// succ:  l0000000000485DE8 l0000000000485E04
l0000000000485DE8:
	w1 = Mem0[x29 + 56:word32]
	NZCV = cond(w0 - w1)
	branch Test(NE,Z) l0000000000485E44
	// succ:  l0000000000485DF4 l0000000000485E44
l0000000000485DF4:
l0000000000485E04:
	w0 = 0x00000000
	v30 = sp + 16
	x19 = Mem0[v30:word64]
	v30 = v30 + 8
	x20 = Mem0[v30:word64]
	x29 = Mem0[sp:word64]
	sp = sp + 8
	x30 = Mem0[sp:word64]
	sp = sp + 160
	return
	// succ:  sh_eaccess_exit
l0000000000485E14:
	v33 = Mem0[x19 + 9:byte]
	w0 = (word32) v33
	w31 = w0 - 0x0000006E
	NZCV = cond(w31)
	branch Test(NE,Z) l0000000000485D38
	// succ:  l0000000000485E20 l0000000000485D38
l0000000000485E20:
	v34 = Mem0[x19 + 10:byte]
	w0 = (word32) v34
	branch w0 == 0x00000000 l0000000000485DB8
	// succ:  l0000000000485E28 l0000000000485DB8
l0000000000485E28:
	goto l0000000000485D38
	// succ:  l0000000000485D38
l0000000000485E2C:
	x1 = 0x00000000004AD000
	x1 = x1 + 0xFFFFFFFFFFFFFC20
	x2 = 0x0000000000000008
	strncmp(x0, x1, x2)
	sp = sp + 0xFFFFFFFFFFFFFFF8
	branch w0 != 0x00000000 l0000000000485D64
	// succ:  l0000000000485E40 l0000000000485D64
l0000000000485E40:
	goto l0000000000485DB8
	// succ:  l0000000000485DB8
l0000000000485E44:
	w0 = Mem0[x29 + 60:word32]
	call group_member (retsize: 0;)
	NZCV = cond(w0 - w31)
l0000000000485E5C:
	v31 = Mem0[x19 + 9:byte]
	w0 = (word32) v31
	w31 = w0 - 0x00000075
	NZCV = cond(w31)
	branch Test(NE,Z) l0000000000485D38
	// succ:  l0000000000485E68 l0000000000485D38
l0000000000485E68:
	v32 = Mem0[x19 + 10:byte]
	w0 = (word32) v32
	w31 = w0 - 0x00000074
	NZCV = cond(w31)
	branch Test(NE,Z) l0000000000485D38
	// succ:  l0000000000485E74 l0000000000485D38
l0000000000485E74:
	goto l0000000000485DB0
	// succ:  l0000000000485DB0
l0000000000485E8C:
	w0 = 0xFFFFFFFF
	goto l0000000000485D4C
	// succ:  l0000000000485D4C
sh_eaccess_exit:


// isnetconn
// Return size: 0
void isnetconn()
isnetconn_entry:
	// succ:  l0000000000485E94
l0000000000485E94:
	sp = fp
	sp = sp + -64
	Mem0[sp:word64] = x29
	sp = sp + 8
	Mem0[sp:word64] = x30
	x29 = x31 + 0x0000000000000000
	Mem0[sp + 16:word64] = x19
	x2 = x29 + 0x0000000000000020
	w1 = 0x00000010
	x2 = x2 + 16
	Mem0[x2:word32] = w1
	x1 = x29 + 0x0000000000000020
	call getpeername (retsize: 0;)
	w19 = 0x00000001
	branch (w0 & 0x00000000) == 0x00000000 l0000000000485ECC
	// succ:  l0000000000485EBC l0000000000485ECC
l0000000000485EBC:
	w0 = w19
	x19 = Mem0[sp + 16:word64]
	x29 = Mem0[sp:word64]
	sp = sp + 8
	x30 = Mem0[sp:word64]
	sp = sp + 64
	return
	// succ:  isnetconn_exit
l0000000000485ECC:
	__errno_location()
	sp = sp + 0xFFFFFFFFFFFFFFF8
	w0 = Mem0[x0:word32]
	w31 = w0 - 0x00000058
	NZCV = cond(w31)
	branch Test(EQ,Z) l0000000000485EEC
	// succ:  l0000000000485EDC l0000000000485EEC
l0000000000485EDC:
	w31 = w0 - 0x0000006B
	NZCV = cond(w31)
	branch Test(EQ,Z) l0000000000485EEC
	// succ:  l0000000000485EE4 l0000000000485EEC
l0000000000485EE4:
	w31 = w0 - 0x00000016
	NZCV = cond(w31)
	branch Test(NE,Z) l0000000000485EBC
	// succ:  l0000000000485EEC l0000000000485EBC
l0000000000485EEC:
	w19 = 0x00000000
	w0 = w19
	x19 = Mem0[sp + 16:word64]
	x29 = Mem0[sp:word64]
	sp = sp + 8
	x30 = Mem0[sp:word64]
	sp = sp + 64
	return
	// succ:  isnetconn_exit
isnetconn_exit:


// netopen
// Return size: 0
void netopen()
netopen_entry:
	// succ:  l0000000000485F00
l0000000000485F00:
	sp = fp
	sp = sp + -128
	Mem0[sp:word64] = x29
	sp = sp + 8
	Mem0[sp:word64] = x30
	x29 = x31 + 0x0000000000000000
	v8 = sp + 16
	Mem0[v8:word64] = x19
	v8 = v8 + 8
	Mem0[v8:word64] = x20
	v11 = sp + 32
	Mem0[v11:word64] = x21
	v11 = v11 + 8
	Mem0[v11:word64] = x22
	x20 = x0
	Mem0[sp + 48:word64] = x23
	x21 = 0x00000000004C2000
	strlen(x0)
	sp = sp + 0xFFFFFFFFFFFFFFF8
	w2 = 0x0000012B
	x1 = x21 + 0x0000000000000758
	x0 = x0 + 0x0000000000000001
	call sh_xmalloc (retsize: 0;)
	x22 = x0
	x1 = x20
	strcpy(x0, x1)
	sp = sp + 0xFFFFFFFFFFFFFFF8
	x19 = x22 + 0x0000000000000009
	x0 = x19
	w1 = 0x0000002F
	strchr(x0, x1)
	sp = sp + 0xFFFFFFFFFFFFFFF8
	x2 = x0
	branch x0 == 0x0000000000000000 l00000000004860C0
	// succ:  l0000000000485F54 l00000000004860C0
l0000000000485F54:
	Mem0[x0:byte] = 0x00
	v19 = Mem0[x20 + 5:byte]
	w0 = (word32) v19
	w4 = 0x00000002
	x20 = x2 + 0x0000000000000001
	w31 = w0 - 0x00000074
	NZCV = cond(w31)
	v23 = x29 + 64
	Mem0[v23:word64] = x31
	v23 = v23 + 8
	Mem0[v23:word64] = x31
l0000000000485FEC:
	w0 = w20
	v25 = sp + 32
	x21 = Mem0[v25:word64]
	v25 = v25 + 8
	x22 = Mem0[v25:word64]
	v26 = sp + 16
	x19 = Mem0[v26:word64]
	v26 = v26 + 8
	x20 = Mem0[v26:word64]
	x23 = Mem0[sp + 48:word64]
	x29 = Mem0[sp:word64]
	sp = sp + 8
	x30 = Mem0[sp:word64]
	sp = sp + 128
	return
	// succ:  netopen_exit
l00000000004860C0:
	x1 = 0x00000000004C2000
	w2 = 0x00000005
	x1 = x1 + 0x0000000000000778
	dcgettext(x0, x1, x2)
	sp = sp + 0xFFFFFFFFFFFFFFF8
	x1 = x20
	call internal_error (retsize: 0;)
	w20 = 0xFFFFFFFF
	goto l0000000000485FEC
	// succ:  l0000000000485FEC
netopen_exit:


// difftimeval
// Return size: 0
void difftimeval()
difftimeval_entry:
	// succ:  l00000000004860E0
l00000000004860E0:
	sp = fp
	x4 = Mem0[x1:word64]
	x3 = Mem0[x2 + 8:word64]
	x5 = Mem0[x2:word64]
	x1 = Mem0[x1 + 8:word64]
	x2 = x5 - x4
	x1 = x3 - x1
	Mem0[x0:word64] = x2
	Mem0[x0 + 8:word64] = x1
	branch (w1 & 0x00000000) != 0x00000000 l0000000000486108
	// succ:  l0000000000486104 l0000000000486108
l0000000000486104:
	return
	// succ:  difftimeval_exit
l0000000000486108:
	x1 = x1 + (0x00000000000000F4 << 12)
	x1 = x1 + 0x0000000000000240
	x2 = x2 - 0x0000000000000001
	Mem0[x0 + 8:word64] = x1
	Mem0[x0:word64] = x2
	branch (w2 & 0x00000000) != 0x00000000 l0000000000486104
	// succ:  l0000000000486120 l0000000000486104
l0000000000486120:
	Mem0[x0:word64] = 0x0000000000000000
	Mem0[x0 + 8:word64] = 0x0000000000000000
	return
	// succ:  difftimeval_exit
difftimeval_exit:


// addtimeval
// Return size: 0
void addtimeval()
addtimeval_entry:
	// succ:  l000000000048612C
l000000000048612C:
	sp = fp
	x5 = Mem0[x1:word64]
	x3 = Mem0[x2:word64]
	x4 = Mem0[x1 + 8:word64]
	x2 = Mem0[x2 + 8:word64]
	x1 = 0x000000000000423F
	x3 = x5 + x3
	x2 = x4 + x2
	x1 = DPB(x1, 0x000F, 16)
	Mem0[x0:word64] = x3
	x31 = x2 - x1
	NZCV = cond(x31)
	branch Test(LE,ZCV) l0000000000486170
	// succ:  l0000000000486158 l0000000000486170
l0000000000486158:
	x2 = x2 - (0x00000000000000F4 << 12)
	x2 = x2 - 0x0000000000000240
	x3 = x3 + 0x0000000000000001
	Mem0[x0 + 8:word64] = x2
	Mem0[x0:word64] = x3
	return
	// succ:  addtimeval_exit
l0000000000486170:
	Mem0[x0 + 8:word64] = x2
	return
	// succ:  addtimeval_exit
addtimeval_exit:


// timeval_to_cpu
// Return size: 0
void timeval_to_cpu()
timeval_to_cpu_entry:
	// succ:  l0000000000486178
l0000000000486178:
	sp = fp
	x5 = Mem0[x1 + 8:word64]
	x4 = Mem0[x2 + 8:word64]
	x3 = 0x000000000000423F
	x1 = Mem0[x1:word64]
	x2 = Mem0[x2:word64]
	x4 = x5 + x4
	x3 = DPB(x3, 0x000F, 16)
	x31 = x4 - x3
	NZCV = cond(x31)
	x1 = x1 + x2
	branch Test(LE,ZCV) l00000000004861AC
	// succ:  l00000000004861A0 l00000000004861AC
l00000000004861A0:
	x4 = x4 - (0x00000000000000F4 << 12)
	x4 = x4 - 0x0000000000000240
	x1 = x1 + 0x0000000000000001
	// succ:  l00000000004861AC
l00000000004861AC:
	x2 = 0xFFFFFFFFFFFFE0FF
	x2 = DPB(x2, 0x05F5, 16)
	x31 = x1 - x2
	NZCV = cond(x31)
	x5 = Mem0[x0 + 8:word64]
	x2 = Mem0[x0:word64]
	branch Test(GT,NZV) l00000000004862D0
	// succ:  l00000000004861C4 l00000000004862D0
l00000000004861C4:
	x0 = 0xFFFFFFFFFFFFE0FF
	x0 = DPB(x0, 0x05F5, 16)
	x31 = x2 - x0
	NZCV = cond(x31)
	branch Test(GT,NZV) l00000000004862D0
	// succ:  l00000000004861D4 l00000000004862D0
l00000000004861D4:
	x3 = 0x0000000000004240
	x0 = x3
	x11 = 0xFFFFFFFFFFFF86A0
	x8 = x0
	x9 = x4 + (x4 << 2)
	x10 = x11
	x7 = x5 + (x5 << 2)
l00000000004862D0:
	w0 = 0x00000004
	x4 = 0x000000000000000A
	// succ:  l00000000004862D8
l00000000004862D8:
	x3 = 0xFFFFFFFFFFFFE0FF
	x3 = DPB(x3, 0x05F5, 16)
	x31 = x1 - x3
	NZCV = cond(x31)
	x3 = x1 + (x1 << 2)
	branch Test(GT,NZV) l0000000000486304
	// succ:  l00000000004862EC l0000000000486304
l00000000004862EC:
l00000000004862F0:
	w0 = w0 - 0x00000001
	NZCV = cond(w0)
	branch Test(NE,Z) l00000000004862D8
	// succ:  l00000000004862F8 l00000000004862D8
l00000000004862F8:
	branch x2 == 0x0000000000000000 l0000000000486300
	// succ:  l00000000004862FC l0000000000486300
l00000000004862FC:
	x0 = x1 / x2
	// succ:  l0000000000486300
l0000000000486300:
	return
	// succ:  timeval_to_cpu_exit
l0000000000486304:
	x2 = x2 / x4
	goto l00000000004862F0
	// succ:  l00000000004862F0
timeval_to_cpu_exit:


// timeval_to_secs
// Return size: 0
void timeval_to_secs()
timeval_to_secs_entry:
	// succ:  l000000000048630C
l000000000048630C:
	sp = fp
	x6 = Mem0[x0:word64]
	x4 = 0x0000000000004240
	Mem0[x1:word64] = x6
	x5 = Mem0[x0 + 8:word64]
	x0 = 0x0000000000004240
	x0 = DPB(x0, 0x000F, 16)
	x4 = DPB(x4, 0x000F, 16)
	x0 = x5 / x0
	w3 = 0x00004DD3
	x0 = x5 - x0 * x4
	w3 = DPB(w3, 0x00001062, 16)
	x3 = (int64) (w0 *s w3)
timeval_to_secs_exit:


// print_timeval
// Return size: 0
void print_timeval()
print_timeval_entry:
	// succ:  l0000000000486380
l0000000000486380:
	sp = fp
	x3 = Mem0[x1 + 8:word64]
	x2 = 0x0000000000004240
	x2 = DPB(x2, 0x000F, 16)
	x4 = 0x0000000000004240
	x2 = x3 / x2
	x4 = DPB(x4, 0x000F, 16)
	w5 = 0x00004DD3
	x2 = x3 - x2 * x4
	w5 = DPB(w5, 0x00001062, 16)
	x5 = (int64) (w2 *s w5)
print_timeval_exit:


// sh_makepath
// Return size: 0
void sh_makepath()
sh_makepath_entry:
	// succ:  l0000000000486400
l0000000000486400:
	sp = fp
	sp = sp + -64
	Mem0[sp:word64] = x29
	sp = sp + 8
	Mem0[sp:word64] = x30
	x29 = x31 + 0x0000000000000000
	v8 = sp + 32
	Mem0[v8:word64] = x21
	v8 = v8 + 8
	Mem0[v8:word64] = x22
	v11 = sp + 16
	Mem0[v11:word64] = x19
	v11 = v11 + 8
	Mem0[v11:word64] = x20
	v14 = sp + 48
	Mem0[v14:word64] = x23
	v14 = v14 + 8
	Mem0[v14:word64] = x24
	x21 = x0
	x19 = x1
	w22 = w2
	branch x0 == 0x0000000000000000 l000000000048645C
	// succ:  l0000000000486424 l000000000048645C
l0000000000486424:
	v20 = Mem0[x0:byte]
	w0 = (word32) v20
	branch w0 == 0x00000000 l000000000048645C
	// succ:  l000000000048642C l000000000048645C
l000000000048642C:
	branch (w22 & 0x00000008) == 0x00000000 l0000000000486438
	// succ:  l0000000000486430 l0000000000486438
l0000000000486430:
	w31 = w0 - 0x0000002E
	NZCV = cond(w31)
	branch Test(EQ,Z) l0000000000486580
	// succ:  l0000000000486438 l0000000000486580
l0000000000486438:
	x20 = x21
	branch (w22 & 0x00000001) == 0x00000000 l0000000000486448
	// succ:  l0000000000486440 l0000000000486448
l0000000000486440:
	w31 = w0 - 0x0000007E
	NZCV = cond(w31)
	branch Test(EQ,Z) l00000000004865CC
	// succ:  l0000000000486448 l00000000004865CC
l0000000000486448:
	x0 = x20
	strlen(x0)
	sp = sp + 0xFFFFFFFFFFFFFFF8
	w24 = w0
	x23 = 0x00000000004C2000
	goto l000000000048648C
	// succ:  l000000000048648C
l000000000048645C:
	w24 = w22 & 0x00000002
	branch (w22 & 0x00000002) == 0x00000000 l0000000000486558
	// succ:  l0000000000486464 l0000000000486558
l0000000000486464:
	x23 = 0x00000000004C2000
	x0 = 0x0000000000000002
	x1 = x23 + 0x00000000000007D0
	w2 = 0x0000005E
	call sh_xmalloc (retsize: 0;)
	x20 = x0
	w0 = 0x0000002E
	Mem0[x20 + 1:byte] = (byte) w24
	Mem0[x20:byte] = (byte) w0
	w24 = 0x00000001
	// succ:  l000000000048648C
l000000000048648C:
	x0 = x19
	strlen(x0)
	sp = sp + 0xFFFFFFFFFFFFFFF8
	w1 = w0
	branch (w22 & 0x00000004) == 0x00000000 l00000000004864A8
	// succ:  l000000000048649C l00000000004864A8
l000000000048649C:
	v26 = Mem0[x19:byte]
	w2 = (word32) v26
	w31 = w2 - 0x0000002E
	NZCV = cond(w31)
	branch Test(EQ,Z) l00000000004865AC
	// succ:  l00000000004864A8 l00000000004865AC
l00000000004864A8:
	w1 = w1 + 0x00000002
	w0 = w1 + w24
	w2 = 0x00000074
l0000000000486558:
	x0 = 0x00000000004C2000
	x0 = x0 + 0x00000000000007C0
	call get_working_directory (retsize: 0;)
	x20 = x0
	x23 = 0x00000000004C2000
	branch x0 == 0x0000000000000000 l00000000004865E0
	// succ:  l0000000000486570 l00000000004865E0
l0000000000486570:
	x0 = x20
	strlen(x0)
	sp = sp + 0xFFFFFFFFFFFFFFF8
	w24 = w0
	goto l000000000048648C
	// succ:  l000000000048648C
l0000000000486580:
	v28 = Mem0[x21 + 1:byte]
	w24 = (word32) v28
	branch w24 == 0x00000000 l000000000048659C
	// succ:  l0000000000486588 l000000000048659C
l0000000000486588:
	w31 = w24 - 0x0000002F
	NZCV = cond(w31)
	x20 = x21
	branch Test(NE,Z) l0000000000486448
	// succ:  l0000000000486594 l0000000000486448
l0000000000486594:
	v29 = Mem0[x21 + 2:byte]
	w24 = (word32) v29
	branch w24 != 0x00000000 l0000000000486448
	// succ:  l000000000048659C l0000000000486448
l000000000048659C:
	x20 = 0x00000000004AC000
	x20 = x20 + 0x0000000000000460
	x23 = 0x00000000004C2000
	goto l000000000048648C
	// succ:  l000000000048648C
l00000000004865AC:
	v27 = Mem0[x19 + 1:byte]
	w2 = (word32) v27
	w31 = w2 - 0x0000002F
	NZCV = cond(w31)
	branch Test(NE,Z) l00000000004864A8
	// succ:  l00000000004865B8 l00000000004864A8
l00000000004865B8:
	x19 = x19 + 0x0000000000000002
	w1 = w0 - 0x00000002
	goto l00000000004864A8
	// succ:  l00000000004864A8
l00000000004865CC:
	x0 = x21
	w1 = 0x00000000
	call bash_tilde_expand (retsize: 0;)
	x20 = x0
	goto l0000000000486448
	// succ:  l0000000000486448
l00000000004865E0:
	x0 = 0x00000000004AA000
	x0 = x0 + 0x0000000000000520
	call get_string_value (retsize: 0;)
	x20 = x0
	branch x0 == 0x0000000000000000 l0000000000486618
	// succ:  l00000000004865F4 l0000000000486618
l00000000004865F4:
	strlen(x0)
	sp = sp + 0xFFFFFFFFFFFFFFF8
	w2 = 0x00000056
	x1 = x23 + 0x00000000000007D0
	x0 = x0 + 0x0000000000000001
	call sh_xmalloc (retsize: 0;)
	x1 = x20
	strcpy(x0, x1)
	sp = sp + 0xFFFFFFFFFFFFFFF8
	x20 = x0
	branch x0 != 0x0000000000000000 l0000000000486570
	// succ:  l0000000000486618 l0000000000486570
l0000000000486618:
	x0 = 0x0000000000000002
	x1 = x23 + 0x00000000000007D0
	w2 = 0x00000059
	call sh_xmalloc (retsize: 0;)
	x20 = x0
	w0 = 0x0000002E
	Mem0[x20:byte] = (byte) w0
	Mem0[x20 + 1:byte] = 0x00
	w24 = 0x00000001
	goto l000000000048648C
	// succ:  l000000000048648C
sh_makepath_exit:


// fn0000000000486640
// Return size: 0
void fn0000000000486640()
fn0000000000486640_entry:
	// succ:  l0000000000486640
l0000000000486640:
	sp = fp
	sp = sp + -160
	Mem0[sp:word64] = x29
	sp = sp + 8
	Mem0[sp:word64] = x30
	x29 = x31 + 0x0000000000000000
	Mem0[x29 + 144:word64] = x0
	__errno_location()
	sp = sp + 0xFFFFFFFFFFFFFFF8
	x1 = Mem0[x29 + 144:word64]
	Mem0[x0:word32] = 0x00000000
	x2 = x29 + 0x0000000000000010
	w0 = 0x00000000
	__xstat(x0, x1, x2)
	sp = sp + 0xFFFFFFFFFFFFFFF8
	w1 = 0x00000000
	branch w0 != 0x00000000 l000000000048667C
	// succ:  l000000000048666C l000000000048667C
l000000000048666C:
	w0 = Mem0[x29 + 32:word32]
	w0 = w0 & 0x0000F000
	w31 = w0 - (0x00000004 << 12)
	NZCV = cond(w31)
	w1 = (word32) Test(EQ,Z)
	// succ:  l000000000048667C
l000000000048667C:
	w0 = w1
	x29 = Mem0[sp:word64]
	sp = sp + 8
	x30 = Mem0[sp:word64]
	sp = sp + 160
	return
	// succ:  fn0000000000486640_exit
fn0000000000486640_exit:


// sh_canonpath
// Return size: 0
void sh_canonpath()
sh_canonpath_entry:
	// succ:  l0000000000486688
l0000000000486688:
	sp = fp
	sp = sp + -128
	Mem0[sp:word64] = x29
	sp = sp + 8
	Mem0[sp:word64] = x30
	x29 = x31 + 0x0000000000000000
	v8 = sp + 64
	Mem0[v8:word64] = x25
	v8 = v8 + 8
	Mem0[v8:word64] = x26
	v11 = sp + 16
	Mem0[v11:word64] = x19
	v11 = v11 + 8
	Mem0[v11:word64] = x20
	v14 = sp + 80
	Mem0[v14:word64] = x27
	v14 = v14 + 8
	Mem0[v14:word64] = x28
	v17 = sp + 32
	Mem0[v17:word64] = x21
	v17 = v17 + 8
	Mem0[v17:word64] = x22
	v20 = sp + 48
	Mem0[v20:word64] = x23
	v20 = v20 + 8
	Mem0[v20:word64] = x24
	w26 = w1
	x19 = x0
	x27 = x0
	w25 = w1 & 0x00000008
	branch (w26 & 0x00000008) == 0x00000000 l00000000004868A4
	// succ:  l00000000004866B8 l00000000004868A4
l00000000004866B8:
	v26 = Mem0[x19:byte]
	w0 = (word32) v26
	w31 = w0 - 0x0000002F
	NZCV = cond(w31)
	w24 = (word32) Test(EQ,Z)
	branch w24 == 0x00000000 l0000000000486798
	// succ:  l00000000004866C8 l0000000000486798
l00000000004866C8:
	v31 = Mem0[x19 + 1:byte]
	w0 = (word32) v31
	x21 = x27 + 0x0000000000000001
	w31 = w0 - 0x0000002F
	NZCV = cond(w31)
	branch Test(EQ,Z) l00000000004868F8
	// succ:  l00000000004866D8 l00000000004868F8
l00000000004866D8:
	x0 = 0x0000000000000000
	Mem0[x29 + 96:word32] = w0
	// succ:  l00000000004866E0
l00000000004866E0:
	x21 = x21 + x0
	w1 = 0x0000002F
	w22 = w26 & 0x00000002
	v34 = Mem0[x21:byte]
	w2 = (word32) v34
	w26 = w26 & 0x00000001
	Mem0[x29 + 104:word32] = w1
	x28 = x21
	x19 = x21
	x20 = x21
	w23 = 0x0000002F
	Mem0[x29 + 100:word32] = w26
	// succ:  l000000000048670C
l000000000048670C:
	branch w2 == 0x00000000 l000000000048675C
	// succ:  l0000000000486710 l000000000048675C
l0000000000486710:
	w31 = w2 - 0x0000002F
	NZCV = cond(w31)
	branch Test(EQ,Z) l00000000004867EC
	// succ:  l0000000000486718 l00000000004867EC
l0000000000486718:
	w31 = w2 - 0x0000002E
	NZCV = cond(w31)
	branch Test(EQ,Z) l00000000004867F8
	// succ:  l0000000000486720 l00000000004867F8
l0000000000486720:
	x31 = x19 - x21
	NZCV = cond(x31)
	branch Test(EQ,Z) l0000000000486868
	// succ:  l0000000000486728 l0000000000486868
l0000000000486728:
	Mem0[x19:byte] = (byte) w23
	v36 = Mem0[x20:byte]
	w2 = (word32) v36
	x19 = x19 + 0x0000000000000001
	w31 = w2 - 0x0000002F
	NZCV = cond(w31)
	branch Test(EQ,Z) l0000000000486750
	// succ:  l000000000048673C l0000000000486750
l000000000048673C:
	branch w2 == 0x00000000 l0000000000486750
	// succ:  l0000000000486740 l0000000000486750
l0000000000486740:
	Mem0[x19:byte] = (byte) w2
	x19 = x19 + 1
	x20 = x20 + 1
	v37 = Mem0[x20:byte]
	w2 = (word32) v37
	w31 = w2 - 0x0000002F
	NZCV = cond(w31)
	branch Test(NE,Z) l000000000048673C
	// succ:  l0000000000486750 l000000000048673C
l0000000000486750:
	branch w22 != 0x00000000 l00000000004867CC
	// succ:  l0000000000486754 l00000000004867CC
l0000000000486754:
	v38 = Mem0[x20:byte]
	w2 = (word32) v38
	// succ:  l0000000000486758
l0000000000486758:
	branch w2 != 0x00000000 l0000000000486710
	// succ:  l000000000048675C l0000000000486710
l000000000048675C:
	x31 = x19 - x27
	NZCV = cond(x31)
	x0 = x19
	branch Test(EQ,Z) l0000000000486954
	// succ:  l0000000000486768 l0000000000486954
l0000000000486768:
	Mem0[x19:byte] = 0x00
	v39 = Mem0[x27:byte]
	w0 = (word32) v39
	w31 = w0 - 0x0000002F
	NZCV = cond(w31)
	branch Test(EQ,Z) l00000000004868CC
	// succ:  l0000000000486778 l00000000004868CC
l0000000000486778:
	x0 = x27
	v40 = sp + 16
	x19 = Mem0[v40:word64]
	v40 = v40 + 8
	x20 = Mem0[v40:word64]
	v41 = sp + 32
	x21 = Mem0[v41:word64]
	v41 = v41 + 8
	x22 = Mem0[v41:word64]
	v42 = sp + 48
	x23 = Mem0[v42:word64]
	v42 = v42 + 8
	x24 = Mem0[v42:word64]
	v43 = sp + 64
	x25 = Mem0[v43:word64]
	v43 = v43 + 8
	x26 = Mem0[v43:word64]
	v44 = sp + 80
	x27 = Mem0[v44:word64]
	v44 = v44 + 8
	x28 = Mem0[v44:word64]
	x29 = Mem0[sp:word64]
	sp = sp + 8
	x30 = Mem0[sp:word64]
	sp = sp + 128
	return
	// succ:  sh_canonpath_exit
l0000000000486798:
	x21 = x27
	w1 = 0x0000002E
	w22 = w26 & 0x00000002
	w26 = w26 & 0x00000001
	Mem0[x29 + 96:word32] = w24
	Mem0[x29 + 104:word32] = w1
	v65 = Mem0[x21:byte]
	w2 = (word32) v65
	x28 = x21
	x19 = x21
	x20 = x21
	w23 = 0x0000002F
	Mem0[x29 + 100:word32] = w26
	goto l000000000048670C
	// succ:  l000000000048670C
l00000000004867CC:
	v49 = Mem0[x19:byte]
	w26 = (word32) v49
	x0 = x27
	Mem0[x19:byte] = 0x00
	call fn0000000000486640 (retsize: 0;)
	branch w0 == 0x00000000 l0000000000486910
	// succ:  l00000000004867E0 l0000000000486910
l00000000004867E0:
	Mem0[x19:byte] = (byte) w26
	v50 = Mem0[x20:byte]
	w2 = (word32) v50
	goto l0000000000486758
	// succ:  l0000000000486758
l00000000004867EC:
	v57 = Mem0[x20 + 1:byte]
	w2 = (word32) v57
	x20 = x20 + 0x0000000000000001
	goto l000000000048670C
	// succ:  l000000000048670C
l00000000004867F8:
	v56 = Mem0[x20 + 1:byte]
	w1 = (word32) v56
	branch w1 == 0x00000000 l0000000000486808
	// succ:  l0000000000486800 l0000000000486808
l0000000000486800:
	w31 = w1 - 0x0000002F
	NZCV = cond(w31)
	branch Test(NE,Z) l0000000000486814
	// succ:  l0000000000486808 l0000000000486814
l0000000000486808:
	x20 = x20 + 0x0000000000000001
	w2 = w1
	goto l000000000048670C
	// succ:  l000000000048670C
l0000000000486814:
	w31 = w1 - 0x0000002E
	NZCV = cond(w31)
	branch Test(NE,Z) l0000000000486720
	// succ:  l000000000048681C l0000000000486720
l000000000048681C:
	v58 = Mem0[x20 + 2:byte]
	w1 = (word32) v58
	branch w1 == 0x00000000 l000000000048682C
	// succ:  l0000000000486824 l000000000048682C
l0000000000486824:
	w31 = w1 - 0x0000002F
	NZCV = cond(w31)
	branch Test(NE,Z) l0000000000486720
	// succ:  l000000000048682C l0000000000486720
l000000000048682C:
	x31 = x19 - x28
	NZCV = cond(x31)
	x26 = x20 + 0x0000000000000002
	branch Test(ULE,ZC) l0000000000486870
	// succ:  l0000000000486838 l0000000000486870
l0000000000486838:
	w0 = Mem0[x29 + 100:word32]
	branch w0 == 0x00000000 l0000000000486850
	// succ:  l0000000000486840 l0000000000486850
l0000000000486840:
	goto l0000000000486964
	// succ:  l0000000000486964
l0000000000486844:
	v64 = Mem0[x19:byte]
	w0 = (word32) v64
	w31 = w0 - 0x0000002F
	NZCV = cond(w31)
	branch Test(EQ,Z) l000000000048685C
	// succ:  l0000000000486850 l000000000048685C
l0000000000486850:
	x19 = x19 - 0x0000000000000001
	x31 = x19 - x28
	NZCV = cond(x31)
	branch Test(NE,Z) l0000000000486844
	// succ:  l000000000048685C l0000000000486844
l000000000048685C:
	w2 = w1
	x20 = x26
	goto l000000000048670C
	// succ:  l000000000048670C
l0000000000486868:
	x19 = x21
	goto l0000000000486740
	// succ:  l0000000000486740
l0000000000486870:
	branch w24 != 0x00000000 l000000000048685C
	// succ:  l0000000000486874 l000000000048685C
l0000000000486874:
	x31 = x19 - x21
	NZCV = cond(x31)
	branch Test(EQ,Z) l000000000048698C
	// succ:  l000000000048687C l000000000048698C
l000000000048687C:
	x0 = x19 + 0x0000000000000001
	Mem0[x19:byte] = (byte) w23
	// succ:  l0000000000486884
l0000000000486884:
	x28 = x0
	w1 = 0x0000002E
	Mem0[x28:byte] = (byte) w1
	x28 = x28 + 2
	Mem0[x0 + 1:byte] = (byte) w1
	v61 = Mem0[x20 + 2:byte]
	w2 = (word32) v61
	x19 = x28
	x20 = x26
	goto l000000000048670C
	// succ:  l000000000048670C
l00000000004868A4:
	strlen(x0)
	sp = sp + 0xFFFFFFFFFFFFFFF8
	x1 = 0x00000000004C2000
	w2 = 0x00000071
	x1 = x1 + 0x00000000000007F0
	x0 = x0 + 0x0000000000000001
	call sh_xmalloc (retsize: 0;)
	x1 = x19
	strcpy(x0, x1)
	sp = sp + 0xFFFFFFFFFFFFFFF8
	x27 = x0
	goto l00000000004866B8
	// succ:  l00000000004866B8
l00000000004868CC:
	v46 = Mem0[x27 + 1:byte]
	w0 = (word32) v46
	w31 = w0 - 0x0000002F
	NZCV = cond(w31)
	branch Test(NE,Z) l0000000000486778
	// succ:  l00000000004868D8 l0000000000486778
l00000000004868D8:
	v47 = Mem0[x27 + 2:byte]
	w0 = (word32) v47
	w31 = w0 - 0x0000002F
	NZCV = cond(w31)
	branch Test(EQ,Z) l0000000000486778
	// succ:  l00000000004868E4 l0000000000486778
l00000000004868E4:
	w1 = Mem0[x29 + 96:word32]
	branch w1 != 0x00000000 l0000000000486778
	// succ:  l00000000004868EC l0000000000486778
l00000000004868EC:
	branch w0 != 0x00000000 l00000000004869B4
	// succ:  l00000000004868F0 l00000000004869B4
l00000000004868F0:
	Mem0[x27 + 1:byte] = (byte) w1
	goto l0000000000486778
	// succ:  l0000000000486778
l00000000004868F8:
	v60 = Mem0[x19 + 2:byte]
	w0 = (word32) v60
	w31 = w0 - 0x0000002F
	NZCV = cond(w31)
	branch Test(EQ,Z) l00000000004866D8
	// succ:  l0000000000486904 l00000000004866D8
l0000000000486904:
	x0 = 0x0000000000000001
	Mem0[x29 + 96:word32] = w0
	goto l00000000004866E0
	// succ:  l00000000004866E0
l0000000000486910:
	branch w25 == 0x00000000 l0000000000486938
	// succ:  l0000000000486914 l0000000000486938
l0000000000486914:
	x27 = 0x0000000000000000
	// succ:  l0000000000486918
l0000000000486918:
	x0 = x27
	v51 = sp + 16
	x19 = Mem0[v51:word64]
	v51 = v51 + 8
	x20 = Mem0[v51:word64]
	v52 = sp + 32
	x21 = Mem0[v52:word64]
	v52 = v52 + 8
	x22 = Mem0[v52:word64]
	v53 = sp + 48
	x23 = Mem0[v53:word64]
	v53 = v53 + 8
	x24 = Mem0[v53:word64]
	v54 = sp + 64
	x25 = Mem0[v54:word64]
	v54 = v54 + 8
	x26 = Mem0[v54:word64]
	v55 = sp + 80
	x27 = Mem0[v55:word64]
	v55 = v55 + 8
	x28 = Mem0[v55:word64]
	x29 = Mem0[sp:word64]
	sp = sp + 8
	x30 = Mem0[sp:word64]
	sp = sp + 128
	return
	// succ:  sh_canonpath_exit
l0000000000486938:
	x1 = 0x00000000004C2000
	x0 = x27
	x1 = x1 + 0x00000000000007F0
	w2 = 0x000000D1
	call sh_xfree (retsize: 0;)
	x27 = 0x0000000000000000
	goto l0000000000486778
	// succ:  l0000000000486778
l0000000000486954:
	v48 = Mem0[x29 + 104:byte]
	w1 = (word32) v48
	x19 = x19 + 0x0000000000000001
	Mem0[x0:byte] = (byte) w1
	goto l0000000000486768
	// succ:  l0000000000486768
l0000000000486964:
	v62 = Mem0[x19:byte]
	w1 = (word32) v62
	x0 = x27
	Mem0[x19:byte] = 0x00
	Mem0[x29 + 112:word64] = x1
	call fn0000000000486640 (retsize: 0;)
	x1 = Mem0[x29 + 112:word64]
	branch w0 == 0x00000000 l0000000000486994
	// succ:  l0000000000486980 l0000000000486994
l0000000000486980:
	Mem0[x19:byte] = (byte) w1
	v63 = Mem0[x20 + 2:byte]
	w1 = (word32) v63
	goto l0000000000486850
	// succ:  l0000000000486850
l000000000048698C:
	x0 = x21
	goto l0000000000486884
	// succ:  l0000000000486884
l0000000000486994:
	branch w25 != 0x00000000 l0000000000486914
	// succ:  l0000000000486998 l0000000000486914
l0000000000486998:
	x1 = 0x00000000004C2000
	x0 = x27
	x1 = x1 + 0x00000000000007F0
	w2 = 0x000000AB
	call sh_xfree (retsize: 0;)
	x27 = 0x0000000000000000
	goto l0000000000486918
	// succ:  l0000000000486918
l00000000004869B4:
	x0 = x27
	x1 = x27 + 0x0000000000000001
	strcpy(x0, x1)
	sp = sp + 0xFFFFFFFFFFFFFFF8
	goto l0000000000486778
	// succ:  l0000000000486778
sh_canonpath_exit:


// sh_physpath
// Return size: 0
void sh_physpath()
sh_physpath_entry:
	// succ:  l00000000004869C4
l00000000004869C4:
	sp = fp
	x31 = x31 - (0x0000000000000002 << 12)
	x31 = x31 - 0x0000000000000030
	sp = sp + -96
	Mem0[sp:word64] = x29
	sp = sp + 8
	Mem0[sp:word64] = x30
	x29 = x31 + 0x0000000000000000
	v8 = sp + 80
	Mem0[v8:word64] = x27
	v8 = v8 + 8
	Mem0[v8:word64] = x28
	x28 = 0x00000000004C2000
	v11 = sp + 16
	Mem0[v11:word64] = x19
	v11 = v11 + 8
	Mem0[v11:word64] = x20
	v14 = sp + 32
	Mem0[v14:word64] = x21
	v14 = v14 + 8
	Mem0[v14:word64] = x22
	v17 = sp + 48
	Mem0[v17:word64] = x23
	v17 = v17 + 8
	Mem0[v17:word64] = x24
	v20 = sp + 64
	Mem0[v20:word64] = x25
	v20 = v20 + 8
	Mem0[v20:word64] = x26
	x20 = x0
	x19 = x28 + 0xFFFFFFFFFFFFF818
	strlen(x0)
	sp = sp + 0xFFFFFFFFFFFFFFF8
	x22 = x0
	x1 = x19
	x0 = 0x0000000000001001
	w2 = 0x0000005C
	call sh_xmalloc (retsize: 0;)
	w31 = w22 - 0xFFFFFFFF
	NZCV = cond(w31)
	x21 = x0
	branch Test(LE,ZCV) l0000000000486C3C
	// succ:  l0000000000486A18 l0000000000486C3C
l0000000000486A18:
	x0 = x20
	strlen(x0)
	sp = sp + 0xFFFFFFFFFFFFFFF8
	w2 = 0x00000061
	x1 = x19
	x0 = x0 + 0x0000000000000001
	call sh_xmalloc (retsize: 0;)
	x1 = x20
	strcpy(x0, x1)
	sp = sp + 0xFFFFFFFFFFFFFFF8
	x22 = x0
	v28 = Mem0[x22:byte]
	w2 = (word32) v28
	x25 = x22 + 0x0000000000000001
	w31 = w2 - 0x0000002F
	NZCV = cond(w31)
	branch Test(EQ,Z) l0000000000486C68
	// succ:  l0000000000486A4C l0000000000486C68
l0000000000486A4C:
	x5 = 0x0000000000000000
	Mem0[x29 + -8076:word32] = w5
	// succ:  l0000000000486A54
l0000000000486A54:
	x5 = x25 + x5
	x31 = x22 - x5
	NZCV = cond(x31)
	branch Test(UGE,C) l0000000000486D68
	// succ:  l0000000000486A60 l0000000000486D68
l0000000000486A60:
	x0 = x5 - x22
	x4 = x22
	x0 = x21 + x0
	x3 = x21
	goto l0000000000486A78
	// succ:  l0000000000486A78
l0000000000486A74:
	x4 = x4 + 1
	v59 = Mem0[x4:byte]
	w2 = (word32) v59
	// succ:  l0000000000486A78
l0000000000486A78:
	Mem0[x3:byte] = (byte) w2
	x3 = x3 + 1
	x31 = x3 - x0
	NZCV = cond(x31)
	branch Test(NE,Z) l0000000000486A74
	// succ:  l0000000000486A84 l0000000000486A74
l0000000000486A84:
	x20 = x5 - x25
	x5 = x20
	x5 = x22 + x5
	x20 = x20 + 0x0000000000000001
	v39 = Mem0[x5 + 1:byte]
	w2 = (word32) v39
	x24 = x21 + x20
	x20 = x22 + x20
	// succ:  l0000000000486AA0
l0000000000486AA0:
	x0 = 0x0000000000001068
	x26 = x0 + x29
	x0 = 0x0000000000000001
	x0 = x0 - x25
	x27 = x24
	Mem0[x29 + -8080:word32] = 0x00000000
	w23 = 0x0000002F
	Mem0[x29 + 8312:word64] = x0
	// succ:  l0000000000486AC0
l0000000000486AC0:
	branch w2 == 0x00000000 l0000000000486D74
	// succ:  l0000000000486AC4 l0000000000486D74
l0000000000486AC4:
	w31 = w2 - 0x0000002F
	NZCV = cond(w31)
	branch Test(EQ,Z) l0000000000486C1C
	// succ:  l0000000000486ACC l0000000000486C1C
l0000000000486ACC:
	w31 = w2 - 0x0000002E
	NZCV = cond(w31)
	branch Test(EQ,Z) l0000000000486C28
	// succ:  l0000000000486AD4 l0000000000486C28
l0000000000486AD4:
	x31 = x24 - x27
	NZCV = cond(x31)
	branch Test(EQ,Z) l0000000000486CC0
	// succ:  l0000000000486ADC l0000000000486CC0
l0000000000486ADC:
	Mem0[x24:byte] = (byte) w23
	v41 = Mem0[x20:byte]
	w2 = (word32) v41
	x19 = x24 + 0x0000000000000001
	branch w2 == 0x00000000 l0000000000486B1C
	// succ:  l0000000000486AEC l0000000000486B1C
l0000000000486AEC:
	w31 = w2 - 0x0000002F
	NZCV = cond(w31)
	branch Test(EQ,Z) l0000000000486B1C
	// succ:  l0000000000486AF4 l0000000000486B1C
l0000000000486AF4:
	x0 = x19 - x21
	x31 = x0 - 0xFFFFFFFFFFFFFFFF
	NZCV = cond(x31)
	// succ:  l0000000000486AFC
l0000000000486AFC:
	branch Test(GT,NZV) l0000000000486BC0
	// succ:  l0000000000486B00 l0000000000486BC0
l0000000000486B00:
	Mem0[x19:byte] = (byte) w2
	x19 = x19 + 1
	x20 = x20 + 1
	v43 = Mem0[x20:byte]
	w2 = (word32) v43
	x3 = x19 - x21
	w31 = w2 - 0x0000002F
	NZCV = cond(w31)
	branch Test(EQ,Z) l0000000000486B1C
	// succ:  l0000000000486B14 l0000000000486B1C
l0000000000486B14:
	x31 = x3 - 0xFFFFFFFFFFFFFFFF
	NZCV = cond(x31)
	branch w2 != 0x00000000 l0000000000486AFC
	// succ:  l0000000000486B1C l0000000000486AFC
l0000000000486B1C:
	x1 = x29 + 0x0000000000000060
	Mem0[x19:byte] = 0x00
	x0 = x21
	x2 = 0x0000000000001000
	readlink(x0, x1, x2)
	sp = sp + 0xFFFFFFFFFFFFFFF8
	branch (w0 & 0x00000000) == 0x00000000 l0000000000486CC8
	// succ:  l0000000000486B34 l0000000000486CC8
l0000000000486B34:
	w1 = Mem0[x29 + -8080:word32]
	w1 = w1 + 0x00000001
	Mem0[x29 + -8080:word32] = w1
	w31 = w1 - 0x00000014
	NZCV = cond(w31)
	branch Test(GT,NZV) l0000000000486DF4
	// succ:  l0000000000486B48 l0000000000486DF4
l0000000000486B48:
l0000000000486BC0:
	__errno_location()
	sp = sp + 0xFFFFFFFFFFFFFFF8
	w1 = 0x00000024
	Mem0[x0:word32] = w1
	// succ:  l0000000000486BCC
l0000000000486BCC:
	x28 = x28 + 0xFFFFFFFFFFFFF818
	x0 = x21
	w2 = 0x000000B9
	x1 = x28
	call sh_xfree (retsize: 0;)
	x0 = x22
	x1 = x28
	w2 = 0x000000BA
	call sh_xfree (retsize: 0;)
	x21 = 0x0000000000000000
	// succ:  l0000000000486BF4
l0000000000486BF4:
	x0 = x21
	v47 = sp + 16
	x19 = Mem0[v47:word64]
	v47 = v47 + 8
	x20 = Mem0[v47:word64]
	v48 = sp + 32
	x21 = Mem0[v48:word64]
	v48 = v48 + 8
	x22 = Mem0[v48:word64]
	v49 = sp + 48
	x23 = Mem0[v49:word64]
	v49 = v49 + 8
	x24 = Mem0[v49:word64]
	v50 = sp + 64
	x25 = Mem0[v50:word64]
	v50 = v50 + 8
	x26 = Mem0[v50:word64]
	v51 = sp + 80
	x27 = Mem0[v51:word64]
	v51 = v51 + 8
	x28 = Mem0[v51:word64]
	x29 = Mem0[sp:word64]
	sp = sp + 8
	x30 = Mem0[sp:word64]
	sp = sp + 96
	x31 = x31 + 0x0000000000000030
	x31 = x31 + (0x0000000000000002 << 12)
	return
	// succ:  sh_physpath_exit
l0000000000486C1C:
	v53 = Mem0[x20 + 1:byte]
	w2 = (word32) v53
	x20 = x20 + 0x0000000000000001
	goto l0000000000486AC0
	// succ:  l0000000000486AC0
l0000000000486C28:
	v52 = Mem0[x20 + 1:byte]
	w0 = (word32) v52
	branch w0 != 0x00000000 l0000000000486C8C
	// succ:  l0000000000486C30 l0000000000486C8C
l0000000000486C30:
	x20 = x20 + 0x0000000000000001
	w2 = w0
	goto l0000000000486AC0
	// succ:  l0000000000486AC0
l0000000000486C3C:
	w2 = 0x00000064
	x1 = x19
	x0 = 0x0000000000001001
	call sh_xmalloc (retsize: 0;)
	x1 = x20
	x22 = x0
	strcpy(x0, x1)
	sp = sp + 0xFFFFFFFFFFFFFFF8
	v35 = Mem0[x22:byte]
	w2 = (word32) v35
	x25 = x22 + 0x0000000000000001
	w31 = w2 - 0x0000002F
	NZCV = cond(w31)
	branch Test(NE,Z) l0000000000486A4C
	// succ:  l0000000000486C68 l0000000000486A4C
l0000000000486C68:
	v37 = Mem0[x22 + 1:byte]
	w0 = (word32) v37
	w31 = w0 - 0x0000002F
	NZCV = cond(w31)
	branch Test(NE,Z) l0000000000486A4C
	// succ:  l0000000000486C74 l0000000000486A4C
l0000000000486C74:
	v38 = Mem0[x22 + 2:byte]
	w0 = (word32) v38
	w31 = w0 - 0x0000002F
	NZCV = cond(w31)
	branch Test(EQ,Z) l0000000000486A4C
	// succ:  l0000000000486C80 l0000000000486A4C
l0000000000486C80:
	x5 = 0x0000000000000001
	Mem0[x29 + -8076:word32] = w5
	goto l0000000000486A54
	// succ:  l0000000000486A54
l0000000000486C8C:
	w31 = w0 - 0x0000002F
	NZCV = cond(w31)
	branch Test(EQ,Z) l0000000000486C30
	// succ:  l0000000000486C94 l0000000000486C30
l0000000000486C94:
	w31 = w0 - 0x0000002E
	NZCV = cond(w31)
	branch Test(NE,Z) l0000000000486AD4
	// succ:  l0000000000486C9C l0000000000486AD4
l0000000000486C9C:
	v57 = Mem0[x20 + 2:byte]
	w1 = (word32) v57
	branch w1 == 0x00000000 l0000000000486CAC
	// succ:  l0000000000486CA4 l0000000000486CAC
l0000000000486CA4:
	w31 = w1 - 0x0000002F
	NZCV = cond(w31)
	branch Test(NE,Z) l0000000000486AD4
	// succ:  l0000000000486CAC l0000000000486AD4
l0000000000486CAC:
	x31 = x24 - x27
	NZCV = cond(x31)
	x20 = x20 + 0x0000000000000002
	w2 = w1
	branch Test(ULE,ZC) l0000000000486AC0
	// succ:  l0000000000486CBC l0000000000486AC0
l0000000000486CBC:
	goto l0000000000486D54
	// succ:  l0000000000486D54
l0000000000486CC0:
	x19 = x24
	goto l0000000000486AF4
	// succ:  l0000000000486AF4
l0000000000486CC8:
	__errno_location()
	sp = sp + 0xFFFFFFFFFFFFFFF8
	w0 = Mem0[x0:word32]
	w31 = w0 - 0x00000016
	NZCV = cond(w31)
	branch Test(NE,Z) l0000000000486BCC
	// succ:  l0000000000486CD8 l0000000000486BCC
l0000000000486CD8:
	v46 = Mem0[x20:byte]
	w2 = (word32) v46
	x24 = x19
	goto l0000000000486AC0
	// succ:  l0000000000486AC0
l0000000000486D48:
	v60 = Mem0[x24:byte]
	w0 = (word32) v60
	w31 = w0 - 0x0000002F
	NZCV = cond(w31)
	branch Test(EQ,Z) l0000000000486D60
	// succ:  l0000000000486D54 l0000000000486D60
l0000000000486D54:
	x24 = x24 - 0x0000000000000001
	x31 = x24 - x27
	NZCV = cond(x31)
	branch Test(NE,Z) l0000000000486D48
	// succ:  l0000000000486D60 l0000000000486D48
l0000000000486D60:
	w2 = w1
	goto l0000000000486AC0
	// succ:  l0000000000486AC0
l0000000000486D68:
	x24 = x21
	x20 = x22
	goto l0000000000486AA0
	// succ:  l0000000000486AA0
l0000000000486D74:
	Mem0[x24:byte] = (byte) w2
	x0 = x22
	x1 = x28 + 0xFFFFFFFFFFFFF818
	w2 = 0x000000EE
	call sh_xfree (retsize: 0;)
	v54 = Mem0[x21:byte]
	w0 = (word32) v54
	w31 = w0 - 0x0000002F
	NZCV = cond(w31)
	branch Test(NE,Z) l0000000000486BF4
	// succ:  l0000000000486D94 l0000000000486BF4
l0000000000486D94:
	v55 = Mem0[x21 + 1:byte]
	w0 = (word32) v55
	w31 = w0 - 0x0000002F
	NZCV = cond(w31)
	branch Test(NE,Z) l0000000000486BF4
	// succ:  l0000000000486DA0 l0000000000486BF4
l0000000000486DA0:
	v56 = Mem0[x21 + 2:byte]
	w0 = (word32) v56
	w31 = w0 - 0x0000002F
	NZCV = cond(w31)
	branch Test(EQ,Z) l0000000000486BF4
	// succ:  l0000000000486DAC l0000000000486BF4
l0000000000486DAC:
	w1 = Mem0[x29 + -8076:word32]
	branch w1 != 0x00000000 l0000000000486BF4
	// succ:  l0000000000486DB4 l0000000000486BF4
l0000000000486DB4:
	branch w0 != 0x00000000 l0000000000486E04
	// succ:  l0000000000486DB8 l0000000000486E04
l0000000000486DB8:
	Mem0[x21 + 1:byte] = (byte) w1
	goto l0000000000486BF4
	// succ:  l0000000000486BF4
l0000000000486DF4:
	__errno_location()
	sp = sp + 0xFFFFFFFFFFFFFFF8
	w1 = 0x00000028
	Mem0[x0:word32] = w1
	goto l0000000000486BCC
	// succ:  l0000000000486BCC
l0000000000486E04:
	x0 = x21
	x1 = x21 + 0x0000000000000001
	strcpy(x0, x1)
	sp = sp + 0xFFFFFFFFFFFFFFF8
	goto l0000000000486BF4
	// succ:  l0000000000486BF4
sh_physpath_exit:


// sh_realpath
// Return size: 0
void sh_realpath()
sh_realpath_entry:
	// succ:  l0000000000486E14
l0000000000486E14:
	sp = fp
	sp = sp + -64
	Mem0[sp:word64] = x29
	sp = sp + 8
	Mem0[sp:word64] = x30
	x29 = x31 + 0x0000000000000000
	v8 = sp + 16
	Mem0[v8:word64] = x19
	v8 = v8 + 8
	Mem0[v8:word64] = x20
	v11 = sp + 32
	Mem0[v11:word64] = x21
	v11 = v11 + 8
	Mem0[v11:word64] = x22
	Mem0[sp + 48:word64] = x23
	x19 = x0
	x20 = x1
	branch x0 == 0x0000000000000000 l0000000000486F58
	// succ:  l0000000000486E34 l0000000000486F58
l0000000000486E34:
	v16 = Mem0[x0:byte]
	w1 = (word32) v16
	branch w1 == 0x00000000 l0000000000486F2C
	// succ:  l0000000000486E3C l0000000000486F2C
l0000000000486E3C:
	w31 = w1 - 0x0000002F
	NZCV = cond(w31)
	branch Test(EQ,Z) l0000000000486F04
	// succ:  l0000000000486E44 l0000000000486F04
l0000000000486E44:
	x0 = 0x00000000004C2000
	x0 = x0 + 0xFFFFFFFFFFFFF838
	call get_working_directory (retsize: 0;)
	x23 = x0
	branch x0 == 0x0000000000000000 l0000000000486F38
	// succ:  l0000000000486E58 l0000000000486F38
l0000000000486E58:
	x1 = x0
	w2 = 0x00000000
	x0 = x19
	call sh_makepath (retsize: 0;)
	x22 = 0x00000000004C2000
	x21 = x0
	x1 = x22 + 0xFFFFFFFFFFFFF818
	x0 = x23
	w2 = 0x00000111
	call sh_xfree (retsize: 0;)
	// succ:  l0000000000486E80
l0000000000486E80:
	w1 = 0x00000000
	x0 = x21
	call sh_physpath (retsize: 0;)
	x22 = x22 + 0xFFFFFFFFFFFFF818
	x19 = x0
	x1 = x22
	x0 = x21
	w2 = 0x00000117
	call sh_xfree (retsize: 0;)
	branch x20 == 0x0000000000000000 l0000000000486F50
	// succ:  l0000000000486EA8 l0000000000486F50
l0000000000486EA8:
	branch x19 == 0x0000000000000000 l0000000000486EE8
	// succ:  l0000000000486EAC l0000000000486EE8
l0000000000486EAC:
	x1 = x19
	x2 = 0x0000000000000FFF
	x0 = x20
	strncpy(x0, x1, x2)
	sp = sp + 0xFFFFFFFFFFFFFFF8
	x0 = x19
	Mem0[x20 + -1:byte] = 0x00
	x1 = x22
	w2 = 0x00000120
	call sh_xfree (retsize: 0;)
	x0 = x20
	// succ:  l0000000000486ED4
l0000000000486ED4:
	v22 = sp + 16
	x19 = Mem0[v22:word64]
	v22 = v22 + 8
	x20 = Mem0[v22:word64]
	v23 = sp + 32
	x21 = Mem0[v23:word64]
	v23 = v23 + 8
	x22 = Mem0[v23:word64]
	x23 = Mem0[sp + 48:word64]
	x29 = Mem0[sp:word64]
	sp = sp + 8
	x30 = Mem0[sp:word64]
	sp = sp + 64
	return
	// succ:  sh_realpath_exit
l0000000000486EE8:
	Mem0[x20:byte] = (byte) w19
	x0 = x19
	v25 = sp + 32
	x21 = Mem0[v25:word64]
	v25 = v25 + 8
	x22 = Mem0[v25:word64]
	v26 = sp + 16
	x19 = Mem0[v26:word64]
	v26 = v26 + 8
	x20 = Mem0[v26:word64]
	x23 = Mem0[sp + 48:word64]
	x29 = Mem0[sp:word64]
	sp = sp + 8
	x30 = Mem0[sp:word64]
	sp = sp + 64
	return
	// succ:  sh_realpath_exit
l0000000000486F04:
	strlen(x0)
	sp = sp + 0xFFFFFFFFFFFFFFF8
	x22 = 0x00000000004C2000
	w2 = 0x00000114
	x1 = x22 + 0xFFFFFFFFFFFFF818
	x0 = x0 + 0x0000000000000001
	call sh_xmalloc (retsize: 0;)
	x1 = x19
	strcpy(x0, x1)
	sp = sp + 0xFFFFFFFFFFFFFFF8
	x21 = x0
	goto l0000000000486E80
	// succ:  l0000000000486E80
l0000000000486F2C:
	__errno_location()
	sp = sp + 0xFFFFFFFFFFFFFFF8
	w1 = 0x00000002
	Mem0[x0:word32] = w1
	// succ:  l0000000000486F38
l0000000000486F38:
	x0 = 0x0000000000000000
	v27 = sp + 16
	x19 = Mem0[v27:word64]
	v27 = v27 + 8
	x20 = Mem0[v27:word64]
	v28 = sp + 32
	x21 = Mem0[v28:word64]
	v28 = v28 + 8
	x22 = Mem0[v28:word64]
	x23 = Mem0[sp + 48:word64]
	x29 = Mem0[sp:word64]
	sp = sp + 8
	x30 = Mem0[sp:word64]
	sp = sp + 64
	return
	// succ:  sh_realpath_exit
l0000000000486F50:
	x0 = x19
	goto l0000000000486ED4
	// succ:  l0000000000486ED4
l0000000000486F58:
	__errno_location()
	sp = sp + 0xFFFFFFFFFFFFFFF8
	w1 = 0x00000016
	Mem0[x0:word32] = w1
	goto l0000000000486F38
	// succ:  l0000000000486F38
sh_realpath_exit:


// fn0000000000486F68
// Return size: 0
void fn0000000000486F68()
fn0000000000486F68_entry:
	// succ:  l0000000000486F68
l0000000000486F68:
	sp = fp
	sp = sp + -32
	Mem0[sp:word64] = x29
	sp = sp + 8
	Mem0[sp:word64] = x30
	x29 = x31 + 0x0000000000000000
	v8 = sp + 16
	Mem0[v8:word64] = x19
	v8 = v8 + 8
	Mem0[v8:word64] = x20
	branch (w0 & 0x00000001) == 0x00000000 l0000000000486FAC
	// succ:  l0000000000486F78 l0000000000486FAC
l0000000000486F78:
	x20 = 0x00000000004E1000
	x20 = x20 + 0xFFFFFFFFFFFFFB50
	x19 = Mem0[x20:word64]
	branch x19 == 0x0000000000000000 l0000000000486FE8
	// succ:  l0000000000486F88 l0000000000486FE8
l0000000000486F88:
	x20 = 0x00000000004D9000
	x20 = x20 + 0x00000000000004A0
	w0 = Mem0[x20:word32]
	w31 = w0 + 0x00000001
	NZCV = cond(w31)
	branch Test(EQ,Z) l0000000000487008
	// succ:  l0000000000486F9C l0000000000487008
l0000000000486F9C:
	x0 = x19
	v14 = sp + 16
	x19 = Mem0[v14:word64]
	v14 = v14 + 8
	x20 = Mem0[v14:word64]
	x29 = Mem0[sp:word64]
	sp = sp + 8
	x30 = Mem0[sp:word64]
	sp = sp + 32
	return
	// succ:  fn0000000000486F68_exit
l0000000000486FAC:
	x0 = 0x00000000004C2000
	x0 = x0 + 0xFFFFFFFFFFFFF848
	call get_string_value (retsize: 0;)
	x19 = x0
	branch x0 == 0x0000000000000000 l0000000000486F78
	// succ:  l0000000000486FC0 l0000000000486F78
l0000000000486FC0:
	call file_iswdir (retsize: 0;)
	branch w0 == 0x00000000 l0000000000486F78
	// succ:  l0000000000486FC8 l0000000000486F78
l0000000000486FC8:
	x0 = x19
	strlen(x0)
	sp = sp + 0xFFFFFFFFFFFFFFF8
	x31 = x0 - (0x0000000000000001 << 12)
	NZCV = cond(x31)
	branch Test(ULE,ZC) l0000000000486F88
	// succ:  l0000000000486FD8 l0000000000486F88
l0000000000486FD8:
	x20 = 0x00000000004E1000
	x20 = x20 + 0xFFFFFFFFFFFFFB50
	x19 = Mem0[x20:word64]
	branch x19 != 0x0000000000000000 l0000000000486F88
	// succ:  l0000000000486FE8 l0000000000486F88
l0000000000486FE8:
	x19 = 0x00000000004C2000
	x19 = x19 + 0xFFFFFFFFFFFFF850
	x0 = x19
	Mem0[x20:word64] = x19
	call file_iswdir (retsize: 0;)
	branch w0 == 0x00000000 l0000000000487028
	// succ:  l0000000000487000 l0000000000487028
l0000000000487000:
	x19 = Mem0[x20:word64]
	goto l0000000000486F88
	// succ:  l0000000000486F88
l0000000000487008:
	x0 = x19
	w1 = 0x00000003
	call pathconf (retsize: 0;)
	Mem0[x20:word32] = w0
	x0 = x19
	v18 = sp + 16
	x19 = Mem0[v18:word64]
	v18 = v18 + 8
	x20 = Mem0[v18:word64]
	x29 = Mem0[sp:word64]
	sp = sp + 8
	x30 = Mem0[sp:word64]
	sp = sp + 32
	return
	// succ:  fn0000000000486F68_exit
l0000000000487028:
	x0 = x19
	Mem0[x20:word64] = x19
	call file_iswdir (retsize: 0;)
	branch w0 != 0x00000000 l0000000000487000
	// succ:  l0000000000487038 l0000000000487000
l0000000000487038:
	x1 = 0x00000000004C2000
	x1 = x1 + 0xFFFFFFFFFFFFF858
	x0 = x1
	Mem0[x20:word64] = x1
	call file_iswdir (retsize: 0;)
	branch w0 != 0x00000000 l0000000000487000
	// succ:  l0000000000487050 l0000000000487000
l0000000000487050:
	x1 = 0x00000000004C2000
	x1 = x1 + 0xFFFFFFFFFFFFF868
	x0 = x1
	Mem0[x20:word64] = x1
	call file_iswdir (retsize: 0;)
	branch w0 != 0x00000000 l0000000000487000
	// succ:  l0000000000487068 l0000000000487000
l0000000000487068:
	x19 = 0x00000000004B2000
	x19 = x19 + 0xFFFFFFFFFFFFFD68
	Mem0[x20:word64] = x19
	goto l0000000000486F88
	// succ:  l0000000000486F88
fn0000000000486F68_exit:


// sh_mktmpname
// Return size: 0
void sh_mktmpname()
sh_mktmpname_entry:
	// succ:  l0000000000487078
l0000000000487078:
	sp = fp
	sp = sp + -240
	Mem0[sp:word64] = x29
	sp = sp + 8
	Mem0[sp:word64] = x30
	x29 = x31 + 0x0000000000000000
	v8 = sp + 80
	Mem0[v8:word64] = x27
	v8 = v8 + 8
	Mem0[v8:word64] = x28
	w27 = w1
	x1 = 0x00000000004C2000
	v14 = sp + 48
	Mem0[v14:word64] = x23
	v14 = v14 + 8
	Mem0[v14:word64] = x24
	w2 = 0x00000077
	x1 = x1 + 0xFFFFFFFFFFFFF880
	x23 = x0
	x0 = 0x0000000000001001
	v19 = sp + 16
	Mem0[v19:word64] = x19
	v19 = v19 + 8
	Mem0[v19:word64] = x20
	v22 = sp + 32
	Mem0[v22:word64] = x21
	v22 = v22 + 8
	Mem0[v22:word64] = x22
	v25 = sp + 64
	Mem0[v25:word64] = x25
	v25 = v25 + 8
	Mem0[v25:word64] = x26
	call sh_xmalloc (retsize: 0;)
	x20 = x0
	w0 = w27
	call fn0000000000486F68 (retsize: 0;)
	x28 = x0
	strlen(x0)
	sp = sp + 0xFFFFFFFFFFFFFFF8
	w24 = w0
	branch x23 == 0x0000000000000000 l00000000004871B8
	// succ:  l00000000004870CC l00000000004871B8
l00000000004870CC:
	__errno_location()
	sp = sp + 0xFFFFFFFFFFFFFFF8
	x19 = 0x00000000004D9000
	x26 = 0x00000000004E3000
	x22 = 0x00000000004E1000
	x25 = 0x00000000004C2000
	Mem0[x29 + 224:word64] = x0
	w27 = w27 & 0x00000004
	x19 = x19 + 0x00000000000004A0
	x26 = x26 + 0x00000000000004C4
	x22 = x22 + 0xFFFFFFFFFFFFFB50
	x25 = x25 + 0xFFFFFFFFFFFFF8A0
	w24 = w24 + 0x00000001
	x7 = Mem0[x19 + 8:word64]
	x0 = 0x0000000000000000
l00000000004871B8:
	x23 = 0x00000000004C2000
	x23 = x23 + 0xFFFFFFFFFFFFF878
	goto l00000000004870CC
	// succ:  l00000000004870CC
sh_mktmpname_exit:


// sh_mktmpfd
// Return size: 0
void sh_mktmpfd()
sh_mktmpfd_entry:
	// succ:  l00000000004871C4
l00000000004871C4:
	sp = fp
	sp = sp + -112
	Mem0[sp:word64] = x29
	sp = sp + 8
	Mem0[sp:word64] = x30
	x29 = x31 + 0x0000000000000000
	v8 = sp + 48
	Mem0[v8:word64] = x23
	v8 = v8 + 8
	Mem0[v8:word64] = x24
	x23 = x0
	x0 = 0x00000000004C2000
	v12 = sp + 80
	Mem0[v12:word64] = x27
	v12 = v12 + 8
	Mem0[v12:word64] = x28
	Mem0[x29 + 104:word64] = x2
	w27 = w1
	w2 = 0x000000A4
	x1 = x0 + 0xFFFFFFFFFFFFF880
	x0 = 0x0000000000001001
	v20 = sp + 16
	Mem0[v20:word64] = x19
	v20 = v20 + 8
	Mem0[v20:word64] = x20
	v23 = sp + 32
	Mem0[v23:word64] = x21
	v23 = v23 + 8
	Mem0[v23:word64] = x22
	v26 = sp + 64
	Mem0[v26:word64] = x25
	v26 = v26 + 8
	Mem0[v26:word64] = x26
	call sh_xmalloc (retsize: 0;)
	x20 = x0
	w0 = w27
	call fn0000000000486F68 (retsize: 0;)
	Mem0[x29 + 96:word64] = x0
	strlen(x0)
	sp = sp + 0xFFFFFFFFFFFFFFF8
	branch x23 == 0x0000000000000000 l0000000000487324
	// succ:  l0000000000487218 l0000000000487324
l0000000000487218:
	x19 = 0x00000000004D9000
	x26 = 0x00000000004E3000
	x22 = 0x00000000004E1000
	x25 = 0x00000000004C2000
	w28 = w27 & 0x00000004
	x19 = x19 + 0x00000000000004A0
	w27 = w27 & 0x00000002
	x26 = x26 + 0x00000000000004C4
	x22 = x22 + 0xFFFFFFFFFFFFFB50
	x25 = x25 + 0xFFFFFFFFFFFFF8A0
	w24 = w0 + 0x00000001
	// succ:  l00000000004872C8
l00000000004872C8:
	x7 = Mem0[x19 + 8:word64]
	x0 = 0x0000000000000000
l0000000000487324:
	x23 = 0x00000000004C2000
	x23 = x23 + 0xFFFFFFFFFFFFF878
	goto l0000000000487218
	// succ:  l0000000000487218
sh_mktmpfd_exit:


// sh_mktmpfp
// Return size: 0
void sh_mktmpfp()
sh_mktmpfp_entry:
	// succ:  l0000000000487364
l0000000000487364:
	sp = fp
	sp = sp + -32
	Mem0[sp:word64] = x29
	sp = sp + 8
	Mem0[sp:word64] = x30
	x29 = x31 + 0x0000000000000000
	v8 = sp + 16
	Mem0[v8:word64] = x19
	v8 = v8 + 8
	Mem0[v8:word64] = x20
	w20 = w1
	call sh_mktmpfd (retsize: 0;)
	w19 = w0
	branch (w19 & 0x00000000) == 0x00000000 l00000000004873C4
	// succ:  l0000000000487380 l00000000004873C4
l0000000000487380:
	branch (w20 & 0x00000002) == 0x00000000 l00000000004873AC
	// succ:  l0000000000487384 l00000000004873AC
l0000000000487384:
	x1 = 0x00000000004AD000
	x1 = x1 + 0x0000000000000208
	// succ:  l000000000048738C
l000000000048738C:
	w0 = w19
	fdopen(x0, x1)
	sp = sp + 0xFFFFFFFFFFFFFFF8
	x20 = x0
	branch x0 == 0x0000000000000000 l00000000004873B8
	// succ:  l000000000048739C l00000000004873B8
l000000000048739C:
	x0 = x20
	v15 = sp + 16
	x19 = Mem0[v15:word64]
	v15 = v15 + 8
	x20 = Mem0[v15:word64]
	x29 = Mem0[sp:word64]
	sp = sp + 8
	x30 = Mem0[sp:word64]
	sp = sp + 32
	return
	// succ:  sh_mktmpfp_exit
l00000000004873AC:
	x1 = 0x00000000004C2000
	x1 = x1 + 0xFFFFFFFFFFFFF8B0
	goto l000000000048738C
	// succ:  l000000000048738C
l00000000004873B8:
	w0 = w19
	close(x0)
	sp = sp + 0xFFFFFFFFFFFFFFF8
	goto l000000000048739C
	// succ:  l000000000048739C
l00000000004873C4:
	x20 = 0x0000000000000000
	goto l000000000048739C
	// succ:  l000000000048739C
sh_mktmpfp_exit:


// strlist_create
// Return size: 0
void strlist_create()
strlist_create_entry:
	// succ:  l00000000004873CC
l00000000004873CC:
	sp = fp
	sp = sp + -32
	Mem0[sp:word64] = x29
	sp = sp + 8
	Mem0[sp:word64] = x30
	x29 = x31 + 0x0000000000000000
	x1 = 0x00000000004C2000
	v7 = sp + 16
	Mem0[v7:word64] = x19
	v7 = v7 + 8
	Mem0[v7:word64] = x20
	x1 = x1 + 0xFFFFFFFFFFFFF8B8
	w20 = w0
	w2 = 0x0000002E
	x0 = 0x0000000000000010
	call sh_xmalloc (retsize: 0;)
	x19 = x0
	branch w20 != 0x00000000 l0000000000487414
	// succ:  l00000000004873F8 l0000000000487414
l00000000004873F8:
	Mem0[x0:word64] = 0x0000000000000000
	Mem0[x0 + 8:word32] = w20
	// succ:  l0000000000487400
l0000000000487400:
	Mem0[x19 + 12:word32] = 0x00000000
	x0 = x19
	v14 = sp + 16
	x19 = Mem0[v14:word64]
	v14 = v14 + 8
	x20 = Mem0[v14:word64]
	x29 = Mem0[sp:word64]
	sp = sp + 8
	x30 = Mem0[sp:word64]
	sp = sp + 32
	return
	// succ:  strlist_create_exit
l0000000000487414:
	w0 = w20 + 0x00000001
	call strvec_create (retsize: 0;)
	Mem0[x19:word64] = x0
	Mem0[x19 + 8:word32] = w20
	NZCV = cond(w20 - w31)
	branch Test(LE,ZCV) l0000000000487400
	// succ:  l000000000048742C l0000000000487400
l000000000048742C:
	w20 = w20 - 0x00000001
	x20 = x20 + 0x0000000000000001
strlist_create_exit:


// strlist_resize
// Return size: 0
void strlist_resize()
strlist_resize_entry:
	// succ:  l0000000000487468
l0000000000487468:
	sp = fp
	sp = sp + -32
	Mem0[sp:word64] = x29
	sp = sp + 8
	Mem0[sp:word64] = x30
	x29 = x31 + 0x0000000000000000
	v8 = sp + 16
	Mem0[v8:word64] = x19
	v8 = v8 + 8
	Mem0[v8:word64] = x20
	x19 = x0
	w20 = w1
	branch x0 == 0x0000000000000000 l00000000004874FC
	// succ:  l0000000000487480 l00000000004874FC
l0000000000487480:
	w0 = Mem0[x0 + 8:word32]
	NZCV = cond(w1 - w0)
	branch Test(GT,NZV) l000000000048749C
	// succ:  l000000000048748C l000000000048749C
l000000000048748C:
	x0 = x19
	v15 = sp + 16
	x19 = Mem0[v15:word64]
	v15 = v15 + 8
	x20 = Mem0[v15:word64]
	x29 = Mem0[sp:word64]
	sp = sp + 8
	x30 = Mem0[sp:word64]
	sp = sp + 32
	return
	// succ:  strlist_resize_exit
l000000000048749C:
	x0 = Mem0[x19:word64]
	w1 = w1 + 0x00000001
	call strvec_resize (retsize: 0;)
	w3 = Mem0[x19 + 8:word32]
	Mem0[x19:word64] = x0
	NZCV = cond(w20 - w3)
	branch Test(LT,NV) l00000000004874E8
	// succ:  l00000000004874B8 l00000000004874E8
l00000000004874B8:
l00000000004874E8:
	Mem0[x19 + 8:word32] = w20
	x0 = x19
	v25 = sp + 16
	x19 = Mem0[v25:word64]
	v25 = v25 + 8
	x20 = Mem0[v25:word64]
	x29 = Mem0[sp:word64]
	sp = sp + 8
	x30 = Mem0[sp:word64]
	sp = sp + 32
	return
	// succ:  strlist_resize_exit
l00000000004874FC:
	v16 = sp + 16
	x19 = Mem0[v16:word64]
	v16 = v16 + 8
	x20 = Mem0[v16:word64]
	x29 = Mem0[sp:word64]
	sp = sp + 8
	x30 = Mem0[sp:word64]
	sp = sp + 32
	w0 = w1
	// succ:  l0000000000487508_thunk_strlist_create
l0000000000487508_thunk_strlist_create:
	call strlist_create (retsize: 0;)
	return
	// succ:  strlist_resize_exit
strlist_resize_exit:


// strlist_flush
// Return size: 0
void strlist_flush()
strlist_flush_entry:
	// succ:  l000000000048750C
l000000000048750C:
	sp = fp
	sp = sp + -32
	Mem0[sp:word64] = x29
	sp = sp + 8
	Mem0[sp:word64] = x30
	x29 = x31 + 0x0000000000000000
	Mem0[sp + 16:word64] = x19
	x19 = x0
	branch x0 == 0x0000000000000000 l0000000000487530
	// succ:  l0000000000487520 l0000000000487530
l0000000000487520:
	x0 = Mem0[x0:word64]
	branch x0 == 0x0000000000000000 l0000000000487530
	// succ:  l0000000000487528 l0000000000487530
l0000000000487528:
	call strvec_flush (retsize: 0;)
	Mem0[x19 + 12:word32] = 0x00000000
	// succ:  l0000000000487530
l0000000000487530:
	x19 = Mem0[sp + 16:word64]
	x29 = Mem0[sp:word64]
	sp = sp + 8
	x30 = Mem0[sp:word64]
	sp = sp + 32
	return
	// succ:  strlist_flush_exit
strlist_flush_exit:


// strlist_dispose
// Return size: 0
void strlist_dispose()
strlist_dispose_entry:
	// succ:  l000000000048753C
l000000000048753C:
	sp = fp
	sp = sp + -32
	Mem0[sp:word64] = x29
	sp = sp + 8
	Mem0[sp:word64] = x30
	x29 = x31 + 0x0000000000000000
	Mem0[sp + 16:word64] = x19
	x19 = x0
	branch x0 == 0x0000000000000000 l0000000000487578
	// succ:  l0000000000487550 l0000000000487578
l0000000000487550:
	x0 = Mem0[x0:word64]
	branch x0 == 0x0000000000000000 l000000000048755C
	// succ:  l0000000000487558 l000000000048755C
l0000000000487558:
	call strvec_dispose (retsize: 0;)
	// succ:  l000000000048755C
l000000000048755C:
	x0 = x19
	x1 = 0x00000000004C2000
	x19 = Mem0[sp + 16:word64]
	x29 = Mem0[sp:word64]
	sp = sp + 8
	x30 = Mem0[sp:word64]
	sp = sp + 32
	x1 = x1 + 0xFFFFFFFFFFFFF8B8
	w2 = 0x00000065
	// succ:  l0000000000487574_thunk_sh_xfree
l0000000000487574_thunk_sh_xfree:
	call sh_xfree (retsize: 0;)
	return
	// succ:  strlist_dispose_exit
l0000000000487578:
	x19 = Mem0[sp + 16:word64]
	x29 = Mem0[sp:word64]
	sp = sp + 8
	x30 = Mem0[sp:word64]
	sp = sp + 32
	return
	// succ:  strlist_dispose_exit
strlist_dispose_exit:


// strlist_remove
// Return size: 0
void strlist_remove()
strlist_remove_entry:
	// succ:  l0000000000487584
l0000000000487584:
	sp = fp
	sp = sp + -32
	Mem0[sp:word64] = x29
	sp = sp + 8
	Mem0[sp:word64] = x30
	x29 = x31 + 0x0000000000000000
	Mem0[sp + 16:word64] = x19
	x19 = x0
	branch x0 == 0x0000000000000000 l00000000004875E4
	// succ:  l0000000000487598 l00000000004875E4
l0000000000487598:
	x2 = Mem0[x0:word64]
	branch x2 == 0x0000000000000000 l00000000004875F0
	// succ:  l00000000004875A0 l00000000004875F0
l00000000004875A0:
	w0 = Mem0[x0 + 12:word32]
	branch w0 != 0x00000000 l00000000004875B4
	// succ:  l00000000004875A8 l00000000004875B4
l00000000004875A8:
	x19 = Mem0[sp + 16:word64]
	x29 = Mem0[sp:word64]
	sp = sp + 8
	x30 = Mem0[sp:word64]
	sp = sp + 32
	return
	// succ:  strlist_remove_exit
l00000000004875B4:
	x0 = x2
	call strvec_remove (retsize: 0;)
	w1 = w0
	w0 = 0x00000000
	branch w1 == 0x00000000 l00000000004875A8
	// succ:  l00000000004875C8 l00000000004875A8
l00000000004875C8:
	w2 = Mem0[x19 + 12:word32]
	w0 = w1
	w2 = w2 - 0x00000001
	Mem0[x19 + 12:word32] = w2
	x19 = Mem0[sp + 16:word64]
	x29 = Mem0[sp:word64]
	sp = sp + 8
	x30 = Mem0[sp:word64]
	sp = sp + 32
	return
	// succ:  strlist_remove_exit
l00000000004875E4:
	x19 = Mem0[sp + 16:word64]
	x29 = Mem0[sp:word64]
	sp = sp + 8
	x30 = Mem0[sp:word64]
	sp = sp + 32
	return
	// succ:  strlist_remove_exit
l00000000004875F0:
	w0 = w2
	goto l00000000004875A8
	// succ:  l00000000004875A8
strlist_remove_exit:


// strlist_copy
// Return size: 0
void strlist_copy()
strlist_copy_entry:
	// succ:  l00000000004875F8
l00000000004875F8:
	sp = fp
	sp = sp + -64
	Mem0[sp:word64] = x29
	sp = sp + 8
	Mem0[sp:word64] = x30
	x29 = x31 + 0x0000000000000000
	v6 = sp + 32
	Mem0[v6:word64] = x21
	v6 = v6 + 8
	Mem0[v6:word64] = x22
	v9 = sp + 16
	Mem0[v9:word64] = x19
	v9 = v9 + 8
	Mem0[v9:word64] = x20
	v12 = sp + 48
	Mem0[v12:word64] = x23
	v12 = v12 + 8
	Mem0[v12:word64] = x24
	x21 = x0
	branch x0 == 0x0000000000000000 l00000000004876D8
	// succ:  l0000000000487614 l00000000004876D8
l0000000000487614:
	w0 = Mem0[x0 + 8:word32]
	call strlist_create (retsize: 0;)
	x2 = Mem0[x21:word64]
	x23 = x0
	branch x2 == 0x0000000000000000 l00000000004876EC
	// succ:  l0000000000487628 l00000000004876EC
l0000000000487628:
	w3 = Mem0[x21 + 8:word32]
	NZCV = cond(w3 - w31)
	w0 = w3
	branch Test(LE,ZCV) l00000000004876BC
	// succ:  l0000000000487638 l00000000004876BC
l0000000000487638:
	x19 = 0x0000000000000000
	x24 = 0x00000000004C2000
	w20 = w19
	x24 = x24 + 0xFFFFFFFFFFFFF8B8
	goto l000000000048768C
	// succ:  l000000000048768C
l000000000048764C:
	strlen(x0)
	sp = sp + 0xFFFFFFFFFFFFFFF8
	x1 = x24
	w2 = 0x00000086
	x0 = x0 + 0x0000000000000001
	call sh_xmalloc (retsize: 0;)
	x2 = Mem0[x21:word64]
	w20 = w20 + 0x00000001
	x1 = Mem0[x2 + x19:word64]
	x19 = x19 + 0x0000000000000008
	strcpy(x0, x1)
	sp = sp + 0xFFFFFFFFFFFFFFF8
	w3 = Mem0[x21 + 8:word32]
	Mem0[x22:word64] = x0
	NZCV = cond(w3 - w20)
	w0 = w3
	branch Test(LE,ZCV) l00000000004876BC
	// succ:  l0000000000487688 l00000000004876BC
l0000000000487688:
	x2 = Mem0[x21:word64]
	// succ:  l000000000048768C
l000000000048768C:
	x2 = Mem0[x2 + x19:word64]
	x4 = Mem0[x23:word64]
	x0 = x2
	x22 = x4 + x19
	branch x2 != 0x0000000000000000 l000000000048764C
	// succ:  l00000000004876A0 l000000000048764C
l00000000004876A0:
	x0 = x2
	w20 = w20 + 0x00000001
	Mem0[x22:word64] = x0
	NZCV = cond(w3 - w20)
	w0 = w3
	x19 = x19 + 0x0000000000000008
	branch Test(GT,NZV) l0000000000487688
	// succ:  l00000000004876BC l0000000000487688
l00000000004876BC:
	w1 = Mem0[x21 + 12:word32]
	x2 = Mem0[x23:word64]
	Mem0[x23 + 8:word32] = w0
	Mem0[x23 + 12:word32] = w1
	branch x2 == 0x0000000000000000 l0000000000487704
	// succ:  l00000000004876D0 l0000000000487704
l00000000004876D0:
	Mem0[x2 + (int64) ((int32) w1):word64] = 0x0000000000000000
	x0 = x23
	// succ:  l00000000004876D8
l00000000004876D8:
	v27 = sp + 16
	x19 = Mem0[v27:word64]
	v27 = v27 + 8
	x20 = Mem0[v27:word64]
	v28 = sp + 32
	x21 = Mem0[v28:word64]
	v28 = v28 + 8
	x22 = Mem0[v28:word64]
	v29 = sp + 48
	x23 = Mem0[v29:word64]
	v29 = v29 + 8
	x24 = Mem0[v29:word64]
	x29 = Mem0[sp:word64]
	sp = sp + 8
	x30 = Mem0[sp:word64]
	sp = sp + 64
	return
	// succ:  strlist_copy_exit
l00000000004876EC:
	w0 = Mem0[x21 + 8:word32]
	w1 = Mem0[x21 + 12:word32]
	x2 = Mem0[x23:word64]
	Mem0[x23 + 8:word32] = w0
	Mem0[x23 + 12:word32] = w1
	branch x2 != 0x0000000000000000 l00000000004876D0
	// succ:  l0000000000487704 l00000000004876D0
l0000000000487704:
	x0 = x23
	v30 = sp + 16
	x19 = Mem0[v30:word64]
	v30 = v30 + 8
	x20 = Mem0[v30:word64]
	v31 = sp + 32
	x21 = Mem0[v31:word64]
	v31 = v31 + 8
	x22 = Mem0[v31:word64]
	v32 = sp + 48
	x23 = Mem0[v32:word64]
	v32 = v32 + 8
	x24 = Mem0[v32:word64]
	x29 = Mem0[sp:word64]
	sp = sp + 8
	x30 = Mem0[sp:word64]
	sp = sp + 64
	return
	// succ:  strlist_copy_exit
strlist_copy_exit:


// strlist_merge
// Return size: 0
void strlist_merge()
strlist_merge_entry:
	// succ:  l000000000048771C
l000000000048771C:
	sp = fp
	sp = sp + -96
	Mem0[sp:word64] = x29
	sp = sp + 8
	Mem0[sp:word64] = x30
	x29 = x31 + 0x0000000000000000
	v8 = sp + 32
	Mem0[v8:word64] = x21
	v8 = v8 + 8
	Mem0[v8:word64] = x22
	v11 = sp + 48
	Mem0[v11:word64] = x23
	v11 = v11 + 8
	Mem0[v11:word64] = x24
	v14 = sp + 16
	Mem0[v14:word64] = x19
	v14 = v14 + 8
	Mem0[v14:word64] = x20
	v17 = sp + 64
	Mem0[v17:word64] = x25
	v17 = v17 + 8
	Mem0[v17:word64] = x26
	Mem0[sp + 80:word64] = x27
	x23 = x0
	x22 = x1
	branch x0 == 0x0000000000000000 l0000000000487898
	// succ:  l0000000000487744 l0000000000487898
l0000000000487744:
	w24 = Mem0[x0 + 12:word32]
	branch x22 == 0x0000000000000000 l00000000004878A0
	// succ:  l000000000048774C l00000000004878A0
l000000000048774C:
	w25 = Mem0[x22 + 12:word32]
	// succ:  l0000000000487750
l0000000000487750:
	w0 = w24 + w25
	w0 = w0 + 0x00000001
	call strlist_create (retsize: 0;)
	NZCV = cond(w24 - w31)
	x20 = x0
	branch Test(LE,ZCV) l00000000004878A8
	// succ:  l0000000000487768 l00000000004878A8
l0000000000487768:
	w26 = w24 - 0x00000001
	x26 = x26 + 0x0000000000000001
	x27 = 0x00000000004C2000
l00000000004877E4:
	NZCV = cond(w25 - w31)
	branch Test(LE,ZCV) l000000000048786C
	// succ:  l00000000004877EC l000000000048786C
l00000000004877EC:
	w26 = w25 - 0x00000001
	x26 = x26 + 0x0000000000000001
	x27 = 0x00000000004C2000
l000000000048786C:
	x1 = Mem0[x20:word64]
	Mem0[x20 + 12:word32] = w24
	Mem0[x1 + x0:word64] = 0x0000000000000000
	v29 = sp + 32
	x21 = Mem0[v29:word64]
	v29 = v29 + 8
	x22 = Mem0[v29:word64]
	x0 = x20
	v30 = sp + 48
	x23 = Mem0[v30:word64]
	v30 = v30 + 8
	x24 = Mem0[v30:word64]
	v31 = sp + 16
	x19 = Mem0[v31:word64]
	v31 = v31 + 8
	x20 = Mem0[v31:word64]
	v32 = sp + 64
	x25 = Mem0[v32:word64]
	v32 = v32 + 8
	x26 = Mem0[v32:word64]
	x27 = Mem0[sp + 80:word64]
	x29 = Mem0[sp:word64]
	sp = sp + 8
	x30 = Mem0[sp:word64]
	sp = sp + 96
	return
	// succ:  strlist_merge_exit
l0000000000487898:
	w24 = w0
	branch x22 != 0x0000000000000000 l000000000048774C
	// succ:  l00000000004878A0 l000000000048774C
l00000000004878A0:
	w25 = w22
	goto l0000000000487750
	// succ:  l0000000000487750
l00000000004878A8:
	x0 = 0x0000000000000000
	w24 = w0
	goto l00000000004877E4
	// succ:  l00000000004877E4
strlist_merge_exit:


// strlist_append
// Return size: 0
void strlist_append()
strlist_append_entry:
	// succ:  l00000000004878B4
l00000000004878B4:
	sp = fp
	sp = sp + -96
	Mem0[sp:word64] = x29
	sp = sp + 8
	Mem0[sp:word64] = x30
	x29 = x31 + 0x0000000000000000
	v8 = sp + 16
	Mem0[v8:word64] = x19
	v8 = v8 + 8
	Mem0[v8:word64] = x20
	v11 = sp + 32
	Mem0[v11:word64] = x21
	v11 = v11 + 8
	Mem0[v11:word64] = x22
	v14 = sp + 48
	Mem0[v14:word64] = x23
	v14 = v14 + 8
	Mem0[v14:word64] = x24
	v17 = sp + 64
	Mem0[v17:word64] = x25
	v17 = v17 + 8
	Mem0[v17:word64] = x26
	Mem0[sp + 80:word64] = x27
	x2 = x0
	x20 = x1
	branch x0 == 0x0000000000000000 l00000000004879D0
	// succ:  l00000000004878DC l00000000004879D0
l00000000004878DC:
	w23 = Mem0[x0 + 12:word32]
	branch x1 == 0x0000000000000000 l00000000004878EC
	// succ:  l00000000004878E4 l00000000004878EC
l00000000004878E4:
	w25 = Mem0[x1 + 12:word32]
	branch w25 != 0x00000000 l000000000048790C
	// succ:  l00000000004878EC l000000000048790C
l00000000004878EC:
	x0 = x2
	v24 = sp + 16
	x19 = Mem0[v24:word64]
	v24 = v24 + 8
	x20 = Mem0[v24:word64]
	v25 = sp + 32
	x21 = Mem0[v25:word64]
	v25 = v25 + 8
	x22 = Mem0[v25:word64]
	v26 = sp + 48
	x23 = Mem0[v26:word64]
	v26 = v26 + 8
	x24 = Mem0[v26:word64]
	v27 = sp + 64
	x25 = Mem0[v27:word64]
	v27 = v27 + 8
	x26 = Mem0[v27:word64]
	x27 = Mem0[sp + 80:word64]
	x29 = Mem0[sp:word64]
	sp = sp + 8
	x30 = Mem0[sp:word64]
	sp = sp + 96
	return
	// succ:  strlist_append_exit
l000000000048790C:
	w27 = w23 + w25
	w1 = w27 + 0x00000001
	call strlist_resize (retsize: 0;)
	NZCV = cond(w25 - w31)
	x24 = x0
	branch Test(LE,ZCV) l00000000004879A0
	// succ:  l0000000000487924 l00000000004879A0
l0000000000487924:
	w25 = w25 - 0x00000001
	x25 = x25 + 0x0000000000000001
	x26 = 0x00000000004C2000
l00000000004879A0:
	x0 = Mem0[x24:word64]
	x2 = x24
	Mem0[x0 + (int64) ((int32) w23):word64] = 0x0000000000000000
	Mem0[x24 + 12:word32] = w23
	x0 = x2
	v53 = sp + 16
	x19 = Mem0[v53:word64]
	v53 = v53 + 8
	x20 = Mem0[v53:word64]
	v54 = sp + 32
	x21 = Mem0[v54:word64]
	v54 = v54 + 8
	x22 = Mem0[v54:word64]
	v55 = sp + 48
	x23 = Mem0[v55:word64]
	v55 = v55 + 8
	x24 = Mem0[v55:word64]
	v56 = sp + 64
	x25 = Mem0[v56:word64]
	v56 = v56 + 8
	x26 = Mem0[v56:word64]
	x27 = Mem0[sp + 80:word64]
	x29 = Mem0[sp:word64]
	sp = sp + 8
	x30 = Mem0[sp:word64]
	sp = sp + 96
	return
	// succ:  strlist_append_exit
l00000000004879D0:
	branch x1 == 0x0000000000000000 l00000000004879F4
	// succ:  l00000000004879D4 l00000000004879F4
l00000000004879D4:
	v28 = sp + 16
	x19 = Mem0[v28:word64]
	v28 = v28 + 8
	x20 = Mem0[v28:word64]
	v29 = sp + 32
	x21 = Mem0[v29:word64]
	v29 = v29 + 8
	x22 = Mem0[v29:word64]
	v30 = sp + 48
	x23 = Mem0[v30:word64]
	v30 = v30 + 8
	x24 = Mem0[v30:word64]
	v31 = sp + 64
	x25 = Mem0[v31:word64]
	v31 = v31 + 8
	x26 = Mem0[v31:word64]
	x27 = Mem0[sp + 80:word64]
	x29 = Mem0[sp:word64]
	sp = sp + 8
	x30 = Mem0[sp:word64]
	sp = sp + 96
	x0 = x1
	// succ:  l00000000004879F0_thunk_strlist_copy
l00000000004879F0_thunk_strlist_copy:
	call strlist_copy (retsize: 0;)
	return
	// succ:  strlist_append_exit
l00000000004879F4:
	x2 = x1
	goto l00000000004878EC
	// succ:  l00000000004878EC
strlist_append_exit:


// strlist_prefix_suffix
// Return size: 0
void strlist_prefix_suffix()
strlist_prefix_suffix_entry:
	// succ:  l00000000004879FC
l00000000004879FC:
	sp = fp
	sp = sp + -112
	Mem0[sp:word64] = x29
	sp = sp + 8
	Mem0[sp:word64] = x30
	x29 = x31 + 0x0000000000000000
	v8 = sp + 16
	Mem0[v8:word64] = x19
	v8 = v8 + 8
	Mem0[v8:word64] = x20
	v11 = sp + 64
	Mem0[v11:word64] = x25
	v11 = v11 + 8
	Mem0[v11:word64] = x26
	v14 = sp + 32
	Mem0[v14:word64] = x21
	v14 = v14 + 8
	Mem0[v14:word64] = x22
	v17 = sp + 48
	Mem0[v17:word64] = x23
	v17 = v17 + 8
	Mem0[v17:word64] = x24
	v20 = sp + 80
	Mem0[v20:word64] = x27
	v20 = v20 + 8
	Mem0[v20:word64] = x28
	Mem0[x29 + 96:word64] = x1
	x19 = x0
	x26 = x2
	branch x0 == 0x0000000000000000 l0000000000487B6C
	// succ:  l0000000000487A28 l0000000000487B6C
l0000000000487A28:
	x21 = Mem0[x0:word64]
	branch x21 == 0x0000000000000000 l0000000000487B6C
	// succ:  l0000000000487A30 l0000000000487B6C
l0000000000487A30:
	w20 = Mem0[x0 + 12:word32]
	branch w20 == 0x00000000 l0000000000487B6C
	// succ:  l0000000000487A38 l0000000000487B6C
l0000000000487A38:
	branch x1 == 0x0000000000000000 l0000000000487BD4
	// succ:  l0000000000487A3C l0000000000487BD4
l0000000000487A3C:
	v26 = Mem0[x1:byte]
	w0 = (word32) v26
	w24 = 0x00000000
	branch w0 == 0x00000000 l0000000000487A54
	// succ:  l0000000000487A48 l0000000000487A54
l0000000000487A48:
	v28 = Mem0[x1 + 1:byte]
	w0 = (word32) v28
	w24 = 0x00000001
	branch w0 != 0x00000000 l0000000000487BB0
	// succ:  l0000000000487A54 l0000000000487BB0
l0000000000487A54:
	branch x26 == 0x0000000000000000 l0000000000487BCC
	// succ:  l0000000000487A58 l0000000000487BCC
l0000000000487A58:
	v29 = Mem0[x26:byte]
	w0 = (word32) v29
	w27 = 0x00000000
	branch w0 == 0x00000000 l0000000000487A70
	// succ:  l0000000000487A64 l0000000000487A70
l0000000000487A64:
	v31 = Mem0[x26 + 1:byte]
	w0 = (word32) v31
	w27 = 0x00000001
	branch w0 != 0x00000000 l0000000000487B94
	// succ:  l0000000000487A70 l0000000000487B94
l0000000000487A70:
	w0 = w27 | w24
	branch w0 == 0x00000000 l0000000000487B6C
	// succ:  l0000000000487A78 l0000000000487B6C
l0000000000487A78:
	NZCV = cond(w20 - w31)
	branch Test(LE,ZCV) l0000000000487B6C
	// succ:  l0000000000487A80 l0000000000487B6C
l0000000000487A80:
	x20 = 0x0000000000000000
	x28 = 0x00000000004C2000
l0000000000487B6C:
	x0 = x19
	v35 = sp + 32
	x21 = Mem0[v35:word64]
	v35 = v35 + 8
	x22 = Mem0[v35:word64]
	v36 = sp + 16
	x19 = Mem0[v36:word64]
	v36 = v36 + 8
	x20 = Mem0[v36:word64]
	v37 = sp + 48
	x23 = Mem0[v37:word64]
	v37 = v37 + 8
	x24 = Mem0[v37:word64]
	v38 = sp + 64
	x25 = Mem0[v38:word64]
	v38 = v38 + 8
	x26 = Mem0[v38:word64]
	v39 = sp + 80
	x27 = Mem0[v39:word64]
	v39 = v39 + 8
	x28 = Mem0[v39:word64]
	x29 = Mem0[sp:word64]
	sp = sp + 8
	x30 = Mem0[sp:word64]
	sp = sp + 112
	return
	// succ:  strlist_prefix_suffix_exit
l0000000000487B94:
	v40 = Mem0[x26 + 2:byte]
	w0 = (word32) v40
	w27 = 0x00000002
	branch w0 == 0x00000000 l0000000000487A70
	// succ:  l0000000000487BA0 l0000000000487A70
l0000000000487BA0:
	x0 = x26
	strlen(x0)
	sp = sp + 0xFFFFFFFFFFFFFFF8
	w27 = w0
	goto l0000000000487A70
	// succ:  l0000000000487A70
l0000000000487BB0:
	v42 = Mem0[x1 + 2:byte]
	w0 = (word32) v42
	w24 = 0x00000002
	branch w0 == 0x00000000 l0000000000487A54
	// succ:  l0000000000487BBC l0000000000487A54
l0000000000487BBC:
	x0 = x1
	strlen(x0)
	sp = sp + 0xFFFFFFFFFFFFFFF8
	w24 = w0
	goto l0000000000487A54
	// succ:  l0000000000487A54
l0000000000487BCC:
	w27 = w26
	goto l0000000000487A70
	// succ:  l0000000000487A70
l0000000000487BD4:
	w24 = Mem0[x29 + 96:word32]
	goto l0000000000487A54
	// succ:  l0000000000487A54
strlist_prefix_suffix_exit:


// strlist_print
// Return size: 0
void strlist_print()
strlist_print_entry:
	// succ:  l0000000000487BDC
l0000000000487BDC:
	sp = fp
	sp = sp + -64
	Mem0[sp:word64] = x29
	sp = sp + 8
	Mem0[sp:word64] = x30
	x29 = x31 + 0x0000000000000000
	v8 = sp + 32
	Mem0[v8:word64] = x21
	v8 = v8 + 8
	Mem0[v8:word64] = x22
	v11 = sp + 16
	Mem0[v11:word64] = x19
	v11 = v11 + 8
	Mem0[v11:word64] = x20
	v14 = sp + 48
	Mem0[v14:word64] = x23
	v14 = v14 + 8
	Mem0[v14:word64] = x24
	x21 = x0
	x22 = x1
	branch x0 == 0x0000000000000000 l0000000000487C50
	// succ:  l0000000000487BFC l0000000000487C50
l0000000000487BFC:
	w0 = Mem0[x0 + 12:word32]
	NZCV = cond(w0 - w31)
	branch Test(LE,ZCV) l0000000000487C50
	// succ:  l0000000000487C08 l0000000000487C50
l0000000000487C08:
	x19 = 0x0000000000000000
	x24 = 0x00000000004AC000
	x23 = 0x00000000004C2000
	w20 = w19
	x24 = x24 + 0x0000000000000460
	x23 = x23 + 0xFFFFFFFFFFFFF8E0
	x0 = Mem0[x21:word64]
	x31 = x22 - x31
	NZCV = cond(x31)
	x3 = Mem0[x0 + x19:word64]
l0000000000487C50:
	v24 = sp + 16
	x19 = Mem0[v24:word64]
	v24 = v24 + 8
	x20 = Mem0[v24:word64]
	v25 = sp + 32
	x21 = Mem0[v25:word64]
	v25 = v25 + 8
	x22 = Mem0[v25:word64]
	v26 = sp + 48
	x23 = Mem0[v26:word64]
	v26 = v26 + 8
	x24 = Mem0[v26:word64]
	x29 = Mem0[sp:word64]
	sp = sp + 8
	x30 = Mem0[sp:word64]
	sp = sp + 64
	return
	// succ:  strlist_print_exit
strlist_print_exit:


// strlist_walk
// Return size: 0
void strlist_walk()
strlist_walk_entry:
	// succ:  l0000000000487C64
l0000000000487C64:
	sp = fp
	sp = sp + -48
	Mem0[sp:word64] = x29
	sp = sp + 8
	Mem0[sp:word64] = x30
	x29 = x31 + 0x0000000000000000
	v8 = sp + 32
	Mem0[v8:word64] = x21
	v8 = v8 + 8
	Mem0[v8:word64] = x22
	v11 = sp + 16
	Mem0[v11:word64] = x19
	v11 = v11 + 8
	Mem0[v11:word64] = x20
	x21 = x0
	x22 = x1
	branch x0 == 0x0000000000000000 l0000000000487CBC
	// succ:  l0000000000487C80 l0000000000487CBC
l0000000000487C80:
	w0 = Mem0[x0 + 12:word32]
	NZCV = cond(w0 - w31)
	branch Test(LE,ZCV) l0000000000487CBC
	// succ:  l0000000000487C8C l0000000000487CBC
l0000000000487C8C:
	x19 = 0x0000000000000000
	w20 = w19
	goto l0000000000487CA4
	// succ:  l0000000000487CA4
l0000000000487C98:
	w0 = Mem0[x21 + 12:word32]
	NZCV = cond(w0 - w20)
	branch Test(LE,ZCV) l0000000000487CBC
	// succ:  l0000000000487CA4 l0000000000487CBC
l0000000000487CA4:
	x0 = Mem0[x21:word64]
	w20 = w20 + 0x00000001
	x0 = Mem0[x0 + x19:word64]
	x19 = x19 + 0x0000000000000008
	call x22 (retsize: 0;)
	branch (w0 & 0x00000000) == 0x00000000 l0000000000487C98
	// succ:  l0000000000487CBC l0000000000487C98
l0000000000487CBC:
	v20 = sp + 16
	x19 = Mem0[v20:word64]
	v20 = v20 + 8
	x20 = Mem0[v20:word64]
	v21 = sp + 32
	x21 = Mem0[v21:word64]
	v21 = v21 + 8
	x22 = Mem0[v21:word64]
	x29 = Mem0[sp:word64]
	sp = sp + 8
	x30 = Mem0[sp:word64]
	sp = sp + 48
	return
	// succ:  strlist_walk_exit
strlist_walk_exit:


// strlist_sort
// Return size: 0
void strlist_sort()
strlist_sort_entry:
	// succ:  l0000000000487CCC
l0000000000487CCC:
	sp = fp
	branch x0 == 0x0000000000000000 l0000000000487CE4
	// succ:  l0000000000487CD0 l0000000000487CE4
l0000000000487CD0:
	w1 = Mem0[x0 + 12:word32]
	branch w1 == 0x00000000 l0000000000487CE4
	// succ:  l0000000000487CD8 l0000000000487CE4
l0000000000487CD8:
	x0 = Mem0[x0:word64]
	branch x0 == 0x0000000000000000 l0000000000487CE4
	// succ:  l0000000000487CE0 l0000000000487CE4
l0000000000487CE0:
	// succ:  l0000000000487CE0_thunk_strvec_sort
l0000000000487CE0_thunk_strvec_sort:
	call strvec_sort (retsize: 0;)
	return
	// succ:  strlist_sort_exit
l0000000000487CE4:
	return
	// succ:  strlist_sort_exit
strlist_sort_exit:


// strlist_from_word_list
// Return size: 0
void strlist_from_word_list()
strlist_from_word_list_entry:
	// succ:  l0000000000487CE8
l0000000000487CE8:
	sp = fp
	sp = sp + -80
	Mem0[sp:word64] = x29
	sp = sp + 8
	Mem0[sp:word64] = x30
	x29 = x31 + 0x0000000000000000
	v8 = sp + 32
	Mem0[v8:word64] = x21
	v8 = v8 + 8
	Mem0[v8:word64] = x22
	v11 = sp + 16
	Mem0[v11:word64] = x19
	v11 = v11 + 8
	Mem0[v11:word64] = x20
	v14 = sp + 48
	Mem0[v14:word64] = x23
	v14 = v14 + 8
	Mem0[v14:word64] = x24
	x20 = x0
	w23 = w1
	w22 = w2
	x21 = x3
	branch x0 == 0x0000000000000000 l0000000000487D78
	// succ:  l0000000000487D10 l0000000000487D78
l0000000000487D10:
	call list_length (retsize: 0;)
	x1 = 0x00000000004C2000
	w24 = w0
	x1 = x1 + 0xFFFFFFFFFFFFF8B8
	w2 = 0x00000114
	x0 = 0x0000000000000010
	call sh_xmalloc (retsize: 0;)
	x19 = x0
	w1 = w23
	w2 = w22
	x0 = x20
	x3 = x29 + 0x0000000000000040
	call strvec_from_word_list (retsize: 0;)
	w1 = Mem0[x29 + 64:word32]
	w22 = w24 + w22
	Mem0[x19:word64] = x0
	Mem0[x19 + 8:word32] = w22
	Mem0[x19 + 12:word32] = w1
	branch x21 == 0x0000000000000000 l0000000000487D94
	// succ:  l0000000000487D5C l0000000000487D94
l0000000000487D5C:
	Mem0[x21:word32] = w1
	x0 = x19
	// succ:  l0000000000487D64
l0000000000487D64:
	v24 = sp + 16
	x19 = Mem0[v24:word64]
	v24 = v24 + 8
	x20 = Mem0[v24:word64]
	v25 = sp + 32
	x21 = Mem0[v25:word64]
	v25 = v25 + 8
	x22 = Mem0[v25:word64]
	v26 = sp + 48
	x23 = Mem0[v26:word64]
	v26 = v26 + 8
	x24 = Mem0[v26:word64]
	x29 = Mem0[sp:word64]
	sp = sp + 8
	x30 = Mem0[sp:word64]
	sp = sp + 80
	return
	// succ:  strlist_from_word_list_exit
l0000000000487D78:
	branch x3 == 0x0000000000000000 l0000000000487DAC
	// succ:  l0000000000487D7C l0000000000487DAC
l0000000000487D7C:
	Mem0[x21:word32] = w0
	v27 = sp + 16
	x19 = Mem0[v27:word64]
	v27 = v27 + 8
	x20 = Mem0[v27:word64]
	v28 = sp + 32
	x21 = Mem0[v28:word64]
	v28 = v28 + 8
	x22 = Mem0[v28:word64]
	v29 = sp + 48
	x23 = Mem0[v29:word64]
	v29 = v29 + 8
	x24 = Mem0[v29:word64]
	x29 = Mem0[sp:word64]
	sp = sp + 8
	x30 = Mem0[sp:word64]
	sp = sp + 80
	return
	// succ:  strlist_from_word_list_exit
l0000000000487D94:
	x0 = x19
	v30 = sp + 32
	x21 = Mem0[v30:word64]
	v30 = v30 + 8
	x22 = Mem0[v30:word64]
	v31 = sp + 16
	x19 = Mem0[v31:word64]
	v31 = v31 + 8
	x20 = Mem0[v31:word64]
	v32 = sp + 48
	x23 = Mem0[v32:word64]
	v32 = v32 + 8
	x24 = Mem0[v32:word64]
	x29 = Mem0[sp:word64]
	sp = sp + 8
	x30 = Mem0[sp:word64]
	sp = sp + 80
	return
	// succ:  strlist_from_word_list_exit
l0000000000487DAC:
	x0 = x3
	goto l0000000000487D64
	// succ:  l0000000000487D64
strlist_from_word_list_exit:


// strlist_to_word_list
// Return size: 0
void strlist_to_word_list()
strlist_to_word_list_entry:
	// succ:  l0000000000487DB4
l0000000000487DB4:
	sp = fp
	branch x0 == 0x0000000000000000 l0000000000487DC4
	// succ:  l0000000000487DB8 l0000000000487DC4
l0000000000487DB8:
	x0 = Mem0[x0:word64]
	branch x0 == 0x0000000000000000 l0000000000487DC4
	// succ:  l0000000000487DC0 l0000000000487DC4
l0000000000487DC0:
	// succ:  l0000000000487DC0_thunk_strvec_to_word_list
l0000000000487DC0_thunk_strvec_to_word_list:
	call strvec_to_word_list (retsize: 0;)
	return
	// succ:  strlist_to_word_list_exit
l0000000000487DC4:
	x0 = 0x0000000000000000
	return
	// succ:  strlist_to_word_list_exit
strlist_to_word_list_exit:


// strvec_strcmp
// Return size: 0
void strvec_strcmp()
strvec_strcmp_entry:
	// succ:  l0000000000487DCC
l0000000000487DCC:
	sp = fp
	x0 = Mem0[x0:word64]
	x1 = Mem0[x1:word64]
	strcoll(x0, x1)
	return
	// succ:  strvec_strcmp_exit
strvec_strcmp_exit:


// strvec_create
// Return size: 0
void strvec_create()
strvec_create_entry:
	// succ:  l0000000000487DD8
l0000000000487DD8:
	sp = fp
	x1 = 0x00000000004C2000
strvec_create_exit:


// strvec_resize
// Return size: 0
void strvec_resize()
strvec_resize_entry:
	// succ:  l0000000000487DEC
l0000000000487DEC:
	sp = fp
	x2 = 0x00000000004C2000
strvec_resize_exit:


// strvec_len
// Return size: 0
void strvec_len()
strvec_len_entry:
	// succ:  l0000000000487E00
l0000000000487E00:
	sp = fp
	x1 = Mem0[x0:word64]
	branch x1 == 0x0000000000000000 l0000000000487E20
	// succ:  l0000000000487E08 l0000000000487E20
l0000000000487E08:
	x1 = x0 + 0x0000000000000008
	w0 = 0x00000000
	// succ:  l0000000000487E10
l0000000000487E10:
	x2 = Mem0[x1:word64]
	x1 = x1 + 8
	w0 = w0 + 0x00000001
	branch x2 != 0x0000000000000000 l0000000000487E10
	// succ:  l0000000000487E1C l0000000000487E10
l0000000000487E1C:
	return
	// succ:  strvec_len_exit
l0000000000487E20:
	w0 = w1
	return
	// succ:  strvec_len_exit
strvec_len_exit:


// strvec_flush
// Return size: 0
void strvec_flush()
strvec_flush_entry:
	// succ:  l0000000000487E28
l0000000000487E28:
	sp = fp
	sp = sp + -32
	Mem0[sp:word64] = x29
	sp = sp + 8
	Mem0[sp:word64] = x30
	x29 = x31 + 0x0000000000000000
	v8 = sp + 16
	Mem0[v8:word64] = x19
	v8 = v8 + 8
	Mem0[v8:word64] = x20
	x19 = x0
	branch x0 == 0x0000000000000000 l0000000000487E64
	// succ:  l0000000000487E3C l0000000000487E64
l0000000000487E3C:
	x0 = Mem0[x0:word64]
	branch x0 == 0x0000000000000000 l0000000000487E64
	// succ:  l0000000000487E44 l0000000000487E64
l0000000000487E44:
	x20 = 0x00000000004C2000
	x19 = x19 + 0x0000000000000008
	x20 = x20 + 0xFFFFFFFFFFFFF8E8
	// succ:  l0000000000487E50
l0000000000487E50:
	x1 = x20
	w2 = 0x00000049
	call sh_xfree (retsize: 0;)
	x0 = Mem0[x19:word64]
	x19 = x19 + 8
	branch x0 != 0x0000000000000000 l0000000000487E50
	// succ:  l0000000000487E64 l0000000000487E50
l0000000000487E64:
	v12 = sp + 16
	x19 = Mem0[v12:word64]
	v12 = v12 + 8
	x20 = Mem0[v12:word64]
	x29 = Mem0[sp:word64]
	sp = sp + 8
	x30 = Mem0[sp:word64]
	sp = sp + 32
	return
	// succ:  strvec_flush_exit
strvec_flush_exit:


// strvec_dispose
// Return size: 0
void strvec_dispose()
strvec_dispose_entry:
	// succ:  l0000000000487E70
l0000000000487E70:
	sp = fp
	sp = sp + -32
	Mem0[sp:word64] = x29
	sp = sp + 8
	Mem0[sp:word64] = x30
	x29 = x31 + 0x0000000000000000
	Mem0[sp + 16:word64] = x19
	x19 = x0
	branch x0 == 0x0000000000000000 l0000000000487EA4
	// succ:  l0000000000487E84 l0000000000487EA4
l0000000000487E84:
	call strvec_flush (retsize: 0;)
	x0 = x19
	x1 = 0x00000000004C2000
	x19 = Mem0[sp + 16:word64]
	x29 = Mem0[sp:word64]
	sp = sp + 8
	x30 = Mem0[sp:word64]
	sp = sp + 32
	x1 = x1 + 0xFFFFFFFFFFFFF8E8
	w2 = 0x00000054
	// succ:  l0000000000487EA0_thunk_sh_xfree
l0000000000487EA0_thunk_sh_xfree:
	call sh_xfree (retsize: 0;)
	return
	// succ:  strvec_dispose_exit
l0000000000487EA4:
	x19 = Mem0[sp + 16:word64]
	x29 = Mem0[sp:word64]
	sp = sp + 8
	x30 = Mem0[sp:word64]
	sp = sp + 32
	return
	// succ:  strvec_dispose_exit
strvec_dispose_exit:


// strvec_remove
// Return size: 0
void strvec_remove()
strvec_remove_entry:
	// succ:  l0000000000487EB0
l0000000000487EB0:
	sp = fp
	sp = sp + -64
	Mem0[sp:word64] = x29
	sp = sp + 8
	Mem0[sp:word64] = x30
	x29 = x31 + 0x0000000000000000
	v8 = sp + 48
	Mem0[v8:word64] = x23
	v8 = v8 + 8
	Mem0[v8:word64] = x24
	v11 = sp + 16
	Mem0[v11:word64] = x19
	v11 = v11 + 8
	Mem0[v11:word64] = x20
	v14 = sp + 32
	Mem0[v14:word64] = x21
	v14 = v14 + 8
	Mem0[v14:word64] = x22
	x23 = x0
	x24 = x1
	branch x0 == 0x0000000000000000 l0000000000487FA0
	// succ:  l0000000000487ED0 l0000000000487FA0
l0000000000487ED0:
	x19 = Mem0[x0:word64]
	branch x19 == 0x0000000000000000 l0000000000487F88
	// succ:  l0000000000487ED8 l0000000000487F88
l0000000000487ED8:
	v18 = Mem0[x1:byte]
	w22 = (word32) v18
	x21 = x0 + 0x0000000000000008
	w20 = 0x00000000
	goto l0000000000487EF4
	// succ:  l0000000000487EF4
l0000000000487EE8:
	x19 = Mem0[x21:word64]
	x21 = x21 + 8
	w20 = w20 + 0x00000001
	branch x19 == 0x0000000000000000 l0000000000487F88
	// succ:  l0000000000487EF4 l0000000000487F88
l0000000000487EF4:
	v24 = Mem0[x19:byte]
	w2 = (word32) v24
	NZCV = cond(w2 - w22)
	branch Test(NE,Z) l0000000000487EE8
	// succ:  l0000000000487F00 l0000000000487EE8
l0000000000487F00:
	x1 = x19
	x0 = x24
	strcmp(x0, x1)
	sp = sp + 0xFFFFFFFFFFFFFFF8
	branch w0 != 0x00000000 l0000000000487EE8
	// succ:  l0000000000487F10 l0000000000487EE8
l0000000000487F10:
l0000000000487F88:
	w0 = w19
	v29 = sp + 32
	x21 = Mem0[v29:word64]
	v29 = v29 + 8
	x22 = Mem0[v29:word64]
	v30 = sp + 16
	x19 = Mem0[v30:word64]
	v30 = v30 + 8
	x20 = Mem0[v30:word64]
	v31 = sp + 48
	x23 = Mem0[v31:word64]
	v31 = v31 + 8
	x24 = Mem0[v31:word64]
	x29 = Mem0[sp:word64]
	sp = sp + 8
	x30 = Mem0[sp:word64]
	sp = sp + 64
	return
	// succ:  strvec_remove_exit
l0000000000487FA0:
	v20 = sp + 16
	x19 = Mem0[v20:word64]
	v20 = v20 + 8
	x20 = Mem0[v20:word64]
	v21 = sp + 32
	x21 = Mem0[v21:word64]
	v21 = v21 + 8
	x22 = Mem0[v21:word64]
	v22 = sp + 48
	x23 = Mem0[v22:word64]
	v22 = v22 + 8
	x24 = Mem0[v22:word64]
	x29 = Mem0[sp:word64]
	sp = sp + 8
	x30 = Mem0[sp:word64]
	sp = sp + 64
	return
	// succ:  strvec_remove_exit
strvec_remove_exit:


// strvec_copy
// Return size: 0
void strvec_copy()
strvec_copy_entry:
	// succ:  l0000000000487FB4
l0000000000487FB4:
	sp = fp
	sp = sp + -64
	Mem0[sp:word64] = x29
	sp = sp + 8
	Mem0[sp:word64] = x30
	x29 = x31 + 0x0000000000000000
	v8 = sp + 32
	Mem0[v8:word64] = x21
	v8 = v8 + 8
	Mem0[v8:word64] = x22
	x22 = x0
	x0 = Mem0[x0:word64]
	v12 = sp + 16
	Mem0[v12:word64] = x19
	v12 = v12 + 8
	Mem0[v12:word64] = x20
	v15 = sp + 48
	Mem0[v15:word64] = x23
	v15 = v15 + 8
	Mem0[v15:word64] = x24
	branch x0 == 0x0000000000000000 l0000000000488068
	// succ:  l0000000000487FD4 l0000000000488068
l0000000000487FD4:
	x2 = x22 + 0x0000000000000008
	w1 = 0x00000000
	// succ:  l0000000000487FDC
l0000000000487FDC:
	x3 = Mem0[x2:word64]
	x2 = x2 + 8
	w1 = w1 + 0x00000001
	branch x3 != 0x0000000000000000 l0000000000487FDC
	// succ:  l0000000000487FE8 l0000000000487FDC
l0000000000487FE8:
	w1 = w1 + 0x00000001
l0000000000487FF0:
	x24 = 0x00000000004C2000
	x24 = x24 + 0xFFFFFFFFFFFFF8E8
	x1 = x24
	w2 = 0x00000089
	call sh_xmalloc (retsize: 0;)
	x23 = x0
	x0 = Mem0[x22:word64]
	branch x0 == 0x0000000000000000 l0000000000488070
	// succ:  l0000000000488010 l0000000000488070
l0000000000488010:
	x19 = x22 + 0x0000000000000008
	x21 = x22
	x20 = 0x0000000000000000
	// succ:  l000000000048801C
l000000000048801C:
	strlen(x0)
	sp = sp + 0xFFFFFFFFFFFFFFF8
	x1 = x24
	w2 = 0x0000008B
	x0 = x0 + 0x0000000000000001
	call sh_xmalloc (retsize: 0;)
	x1 = Mem0[x21:word64]
	x21 = x19
	strcpy(x0, x1)
	sp = sp + 0xFFFFFFFFFFFFFFF8
	Mem0[x23 + x20:word64] = x0
	x20 = x19 - x22
	x0 = Mem0[x19:word64]
	x19 = x19 + 8
	branch x0 != 0x0000000000000000 l000000000048801C
	// succ:  l000000000048804C l000000000048801C
l000000000048804C:
	Mem0[x23 + x20:word64] = 0x0000000000000000
	x0 = x23
	v21 = sp + 16
	x19 = Mem0[v21:word64]
	v21 = v21 + 8
	x20 = Mem0[v21:word64]
	v22 = sp + 32
	x21 = Mem0[v22:word64]
	v22 = v22 + 8
	x22 = Mem0[v22:word64]
	v23 = sp + 48
	x23 = Mem0[v23:word64]
	v23 = v23 + 8
	x24 = Mem0[v23:word64]
	x29 = Mem0[sp:word64]
	sp = sp + 8
	x30 = Mem0[sp:word64]
	sp = sp + 64
	return
	// succ:  strvec_copy_exit
l0000000000488068:
	x0 = 0x0000000000000008
	goto l0000000000487FF0
	// succ:  l0000000000487FF0
l0000000000488070:
	x20 = x0
	goto l000000000048804C
	// succ:  l000000000048804C
strvec_copy_exit:


// strvec_sort
// Return size: 0
void strvec_sort()
strvec_sort_entry:
	// succ:  l0000000000488078
l0000000000488078:
	sp = fp
	x1 = Mem0[x0:word64]
	branch x1 == 0x0000000000000000 l0000000000488098
	// succ:  l0000000000488080 l0000000000488098
l0000000000488080:
	x1 = 0x0000000000000001
	goto l000000000048808C
	// succ:  l000000000048808C
l0000000000488088:
	x1 = x3
	// succ:  l000000000048808C
l000000000048808C:
	x2 = Mem0[x0 + x1:word64]
	x3 = x1 + 0x0000000000000001
	branch x2 != 0x0000000000000000 l0000000000488088
	// succ:  l0000000000488098 l0000000000488088
l0000000000488098:
	x3 = 0x0000000000487000
	x2 = 0x0000000000000008
	x3 = x3 + 0xFFFFFFFFFFFFFDCC
	call qsort (retsize: 0;)
	return
	// succ:  strvec_sort_exit
strvec_sort_exit:


// strvec_from_word_list
// Return size: 0
void strvec_from_word_list()
strvec_from_word_list_entry:
	// succ:  l00000000004880A8
l00000000004880A8:
	sp = fp
	sp = sp + -80
	Mem0[sp:word64] = x29
	sp = sp + 8
	Mem0[sp:word64] = x30
	x29 = x31 + 0x0000000000000000
	v8 = sp + 16
	Mem0[v8:word64] = x19
	v8 = v8 + 8
	Mem0[v8:word64] = x20
	v11 = sp + 48
	Mem0[v11:word64] = x23
	v11 = v11 + 8
	Mem0[v11:word64] = x24
	w20 = w2
	v16 = sp + 32
	Mem0[v16:word64] = x21
	v16 = v16 + 8
	Mem0[v16:word64] = x22
	Mem0[sp + 64:word64] = x25
	w22 = w1
	x25 = x3
	x19 = x0
	call list_length (retsize: 0;)
	w0 = w0 + 0x00000001
	w0 = w0 + w20
	x24 = 0x00000000004C2000
strvec_from_word_list_exit:


// strvec_to_word_list
// Return size: 0
void strvec_to_word_list()
strvec_to_word_list_entry:
	// succ:  l00000000004881A0
l00000000004881A0:
	sp = fp
	sp = sp + -80
	Mem0[sp:word64] = x29
	sp = sp + 8
	Mem0[sp:word64] = x30
	x29 = x31 + 0x0000000000000000
	v8 = sp + 32
	Mem0[v8:word64] = x21
	v8 = v8 + 8
	Mem0[v8:word64] = x22
	v11 = sp + 16
	Mem0[v11:word64] = x19
	v11 = v11 + 8
	Mem0[v11:word64] = x20
	v14 = sp + 48
	Mem0[v14:word64] = x23
	v14 = v14 + 8
	Mem0[v14:word64] = x24
	Mem0[sp + 64:word64] = x25
	w22 = w1
	branch x0 == 0x0000000000000000 l00000000004882A4
	// succ:  l00000000004881C0 l00000000004882A4
l00000000004881C0:
	x1 = Mem0[x0:word64]
	branch x1 == 0x0000000000000000 l00000000004882A4
	// succ:  l00000000004881C8 l00000000004882A4
l00000000004881C8:
	x1 = x0 + 0x0000000000000008
	x4 = x1
	w3 = 0x00000000
	// succ:  l00000000004881D4
l00000000004881D4:
	x21 = Mem0[x4:word64]
	x4 = x4 + 8
	w3 = w3 + 0x00000001
	branch x21 != 0x0000000000000000 l00000000004881D4
	// succ:  l00000000004881E0 l00000000004881D4
l00000000004881E0:
	NZCV = cond(w2 - w3)
	branch Test(GE,NZV) l00000000004882A4
	// succ:  l00000000004881E8 l00000000004882A4
l00000000004881E8:
	w24 = ~w2
l00000000004882A4:
	x0 = 0x0000000000000000
	v26 = sp + 16
	x19 = Mem0[v26:word64]
	v26 = v26 + 8
	x20 = Mem0[v26:word64]
	v27 = sp + 32
	x21 = Mem0[v27:word64]
	v27 = v27 + 8
	x22 = Mem0[v27:word64]
	v28 = sp + 48
	x23 = Mem0[v28:word64]
	v28 = v28 + 8
	x24 = Mem0[v28:word64]
	x25 = Mem0[sp + 64:word64]
	x29 = Mem0[sp:word64]
	sp = sp + 8
	x30 = Mem0[sp:word64]
	sp = sp + 80
	return
	// succ:  strvec_to_word_list_exit
strvec_to_word_list_exit:


// spname
// Return size: 0
void spname()
spname_entry:
	// succ:  l00000000004882C0
l00000000004882C0:
	sp = fp
	x31 = x31 - (0x0000000000000002 << 12)
	x31 = x31 - 0x0000000000000040
	sp = sp + -96
	Mem0[sp:word64] = x29
	sp = sp + 8
	Mem0[sp:word64] = x30
	x29 = x31 + 0x0000000000000000
	Mem0[x29 + 8328:word64] = x0
	v9 = sp + 80
	Mem0[v9:word64] = x27
	v9 = v9 + 8
	Mem0[v9:word64] = x28
	x0 = 0x0000000000001068
	x28 = 0x00000000004B2000
	v12 = sp + 48
	Mem0[v12:word64] = x23
	v12 = v12 + 8
	Mem0[v12:word64] = x24
	x0 = x0 + x29
	x28 = x28 + 0xFFFFFFFFFFFFFD68
	x23 = Mem0[x29 + 8328:word64]
	v15 = sp + 64
	Mem0[v15:word64] = x25
	v15 = v15 + 8
	Mem0[v15:word64] = x26
	v18 = sp + 16
	Mem0[v18:word64] = x19
	v18 = v18 + 8
	Mem0[v18:word64] = x20
	v21 = sp + 32
	Mem0[v21:word64] = x21
	v21 = v21 + 8
	Mem0[v21:word64] = x22
	Mem0[x29 + 8304:word64] = x1
	Mem0[x29 + 8312:word64] = x0
	x24 = x1
	x25 = x0 + (0x0000000000000001 << 12)
	Mem0[x29 + 8320:word64] = x28
	// succ:  l0000000000488310
l0000000000488310:
	v24 = Mem0[x23:byte]
	w0 = (word32) v24
	w31 = w0 - 0x0000002F
	NZCV = cond(w31)
	branch Test(EQ,Z) l0000000000488488
	// succ:  l000000000048831C l0000000000488488
l000000000048831C:
	Mem0[x24:byte] = 0x00
	v29 = Mem0[x23:byte]
	w2 = (word32) v29
	branch w2 == 0x00000000 l0000000000488524
	// succ:  l0000000000488328 l0000000000488524
l0000000000488328:
	w31 = w2 - 0x0000002F
	NZCV = cond(w31)
	x3 = Mem0[x29 + 8312:word64]
	branch Test(NE,Z) l000000000048833C
	// succ:  l0000000000488334 l000000000048833C
l0000000000488334:
	goto l0000000000488358
	// succ:  l0000000000488358
l0000000000488338:
	branch Test(EQ,Z) l0000000000488358
	// succ:  l000000000048833C l0000000000488358
l000000000048833C:
	x31 = x3 - x25
	NZCV = cond(x31)
	branch Test(UGE,C) l000000000048834C
	// succ:  l0000000000488344 l000000000048834C
l0000000000488344:
	Mem0[x3:byte] = (byte) w2
	x3 = x3 + 0x0000000000000001
	// succ:  l000000000048834C
l000000000048834C:
	x23 = x23 + 1
	v38 = Mem0[x23:byte]
	w2 = (word32) v38
	w31 = w2 - 0x0000002F
	NZCV = cond(w31)
	branch w2 != 0x00000000 l0000000000488338
	// succ:  l0000000000488358 l0000000000488338
l0000000000488358:
	x1 = Mem0[x29 + 8304:word64]
	x2 = Mem0[x29 + 8320:word64]
	v32 = Mem0[x1:byte]
	w0 = (word32) v32
	Mem0[x3:byte] = 0x00
	NZCV = cond(w0 - w31)
l0000000000488488:
	Mem0[x24:byte] = (byte) w0
	x23 = x23 + 0x0000000000000001
	x24 = x24 + 0x0000000000000001
	goto l0000000000488310
	// succ:  l0000000000488310
l00000000004884DC:
	w0 = 0xFFFFFFFF
	// succ:  l00000000004884E0
l00000000004884E0:
	v39 = sp + 16
	x19 = Mem0[v39:word64]
	v39 = v39 + 8
	x20 = Mem0[v39:word64]
	v40 = sp + 32
	x21 = Mem0[v40:word64]
	v40 = v40 + 8
	x22 = Mem0[v40:word64]
	v41 = sp + 48
	x23 = Mem0[v41:word64]
	v41 = v41 + 8
	x24 = Mem0[v41:word64]
	v42 = sp + 64
	x25 = Mem0[v42:word64]
	v42 = v42 + 8
	x26 = Mem0[v42:word64]
	v43 = sp + 80
	x27 = Mem0[v43:word64]
	v43 = v43 + 8
	x28 = Mem0[v43:word64]
	x29 = Mem0[sp:word64]
	sp = sp + 8
	x30 = Mem0[sp:word64]
	sp = sp + 96
	x31 = x31 + 0x0000000000000040
	x31 = x31 + (0x0000000000000002 << 12)
	return
	// succ:  spname_exit
l0000000000488524:
	x1 = Mem0[x29 + 8328:word64]
	v34 = Mem0[x1 + 1:byte]
	w0 = (word32) v34
	branch w0 != 0x00000000 l0000000000488554
	// succ:  l0000000000488530 l0000000000488554
l0000000000488530:
	x2 = Mem0[x29 + 8304:word64]
	v35 = Mem0[x2 + 1:byte]
	w0 = (word32) v35
	branch w0 != 0x00000000 l0000000000488554
	// succ:  l000000000048853C l0000000000488554
l000000000048853C:
	v36 = Mem0[x1:byte]
	w0 = (word32) v36
	w31 = w0 - 0x0000002E
	NZCV = cond(w31)
	branch Test(EQ,Z) l0000000000488554
	// succ:  l0000000000488548 l0000000000488554
l0000000000488548:
	v37 = Mem0[x2:byte]
	w0 = (word32) v37
	w31 = w0 - 0x0000002E
	NZCV = cond(w31)
	branch Test(EQ,Z) l00000000004884DC
	// succ:  l0000000000488554 l00000000004884DC
l0000000000488554:
	x0 = Mem0[x29 + 8328:word64]
	x1 = Mem0[x29 + 8304:word64]
	strcmp(x0, x1)
	sp = sp + 0xFFFFFFFFFFFFFFF8
	NZCV = cond(w0 - w31)
	w0 = (word32) Test(NE,Z)
	goto l00000000004884E0
	// succ:  l00000000004884E0
spname_exit:


// dirspell
// Return size: 0
void dirspell()
dirspell_entry:
	// succ:  l000000000048856C
l000000000048856C:
	sp = fp
	sp = sp + -32
	Mem0[sp:word64] = x29
	sp = sp + 8
	Mem0[sp:word64] = x30
	x29 = x31 + 0x0000000000000000
	v8 = sp + 16
	Mem0[v8:word64] = x19
	v8 = v8 + 8
	Mem0[v8:word64] = x20
	x20 = x0
	strlen(x0)
	sp = sp + 0xFFFFFFFFFFFFFFF8
	x0 = x0 + (x0 << 1)
	x1 = x0 + 0x0000000000000001
dirspell_exit:


// sh_single_quote
// Return size: 0
void sh_single_quote()
sh_single_quote_entry:
	// succ:  l00000000004885D0
l00000000004885D0:
	sp = fp
	sp = sp + -32
	Mem0[sp:word64] = x29
	sp = sp + 8
	Mem0[sp:word64] = x30
	x29 = x31 + 0x0000000000000000
	Mem0[sp + 16:word64] = x19
	x19 = x0
	strlen(x0)
	sp = sp + 0xFFFFFFFFFFFFFFF8
sh_single_quote_exit:


// sh_double_quote
// Return size: 0
void sh_double_quote()
sh_double_quote_entry:
	// succ:  l000000000048866C
l000000000048866C:
	sp = fp
	sp = sp + -32
	Mem0[sp:word64] = x29
	sp = sp + 8
	Mem0[sp:word64] = x30
	x29 = x31 + 0x0000000000000000
	Mem0[sp + 16:word64] = x19
	x19 = x0
	strlen(x0)
	sp = sp + 0xFFFFFFFFFFFFFFF8
sh_double_quote_exit:


// sh_mkdoublequoted
// Return size: 0
void sh_mkdoublequoted()
sh_mkdoublequoted_entry:
	// succ:  l000000000048873C
l000000000048873C:
	sp = fp
	sp = sp + -32
	Mem0[sp:word64] = x29
	sp = sp + 8
	Mem0[sp:word64] = x30
	x29 = x31 + 0x0000000000000000
	v8 = sp + 16
	Mem0[v8:word64] = x19
	v8 = v8 + 8
	Mem0[v8:word64] = x20
	x19 = x0
	w20 = w2
	w0 = w1 + 0x00000003
	branch w2 == 0x00000000 l0000000000488760
	// succ:  l0000000000488758 l0000000000488760
l0000000000488758:
l0000000000488760:
	x1 = 0x00000000004C2000
	x1 = x1 + 0xFFFFFFFFFFFFFA00
sh_mkdoublequoted_exit:


// sh_un_double_quote
// Return size: 0
void sh_un_double_quote()
sh_un_double_quote_entry:
	// succ:  l00000000004887F4
l00000000004887F4:
	sp = fp
	sp = sp + -32
	Mem0[sp:word64] = x29
	sp = sp + 8
	Mem0[sp:word64] = x30
	x29 = x31 + 0x0000000000000000
	Mem0[sp + 16:word64] = x19
	x19 = x0
	strlen(x0)
	sp = sp + 0xFFFFFFFFFFFFFFF8
	x1 = 0x00000000004C2000
	x0 = x0 + 0x0000000000000001
	x1 = x1 + 0xFFFFFFFFFFFFFA00
	w2 = 0x0000008B
	call sh_xmalloc (retsize: 0;)
	branch x19 == 0x0000000000000000 l0000000000488898
	// succ:  l0000000000488820 l0000000000488898
l0000000000488820:
	v11 = Mem0[x19:byte]
	w1 = (word32) v11
	x2 = x0
	branch w1 == 0x00000000 l0000000000488874
	// succ:  l000000000048882C l0000000000488874
l000000000048882C:
	x5 = 0x00000000004D7000
	w3 = 0x00000000
	x5 = x5 + 0x00000000000005C0
	goto l0000000000488858
	// succ:  l0000000000488858
l000000000048883C:
	Mem0[x2:byte] = (byte) w1
	w3 = 0x00000000
	x2 = x2 + 0x0000000000000001
	// succ:  l0000000000488848
l0000000000488848:
	x19 = x19 + 0x0000000000000001
	NZCV = cond(x19)
	branch Test(EQ,Z) l0000000000488874
	// succ:  l0000000000488850 l0000000000488874
l0000000000488850:
	v18 = Mem0[x19:byte]
	w1 = (word32) v18
	branch w1 == 0x00000000 l0000000000488874
	// succ:  l0000000000488858 l0000000000488874
l0000000000488858:
	w31 = w1 - 0x0000005C
	NZCV = cond(w31)
	branch w3 != 0x00000000 l000000000048883C
	// succ:  l0000000000488860 l000000000048883C
l0000000000488860:
	branch Test(EQ,Z) l0000000000488884
	// succ:  l0000000000488864 l0000000000488884
l0000000000488864:
	Mem0[x2:byte] = (byte) w1
	x19 = x19 + 0x0000000000000001
	NZCV = cond(x19)
	x2 = x2 + 0x0000000000000001
	branch Test(NE,Z) l0000000000488850
	// succ:  l0000000000488874 l0000000000488850
l0000000000488874:
	Mem0[x2:byte] = 0x00
	x19 = Mem0[sp + 16:word64]
	x29 = Mem0[sp:word64]
	sp = sp + 8
	x30 = Mem0[sp:word64]
	sp = sp + 32
	return
	// succ:  sh_un_double_quote_exit
l0000000000488884:
	v20 = Mem0[x19 + 1:byte]
	w4 = (word32) v20
	w4 = Mem0[x5 + (int64) ((int32) w4):word32]
	branch (w4 & 0x00000040) == 0x00000000 l0000000000488864
	// succ:  l0000000000488890 l0000000000488864
l0000000000488890:
	w3 = 0x00000001
	goto l0000000000488848
	// succ:  l0000000000488848
l0000000000488898:
	x2 = x0
	goto l0000000000488874
	// succ:  l0000000000488874
sh_un_double_quote_exit:


// sh_backslash_quote
// Return size: 0
void sh_backslash_quote()
sh_backslash_quote_entry:
	// succ:  l00000000004888A0
l00000000004888A0:
	sp = fp
	sp = sp + -32
	Mem0[sp:word64] = x29
	sp = sp + 8
	Mem0[sp:word64] = x30
	x29 = x31 + 0x0000000000000000
	Mem0[sp + 16:word64] = x19
	x19 = x0
	strlen(x0)
	sp = sp + 0xFFFFFFFFFFFFFFF8
sh_backslash_quote_exit:


// sh_backslash_quote_for_double_quotes
// Return size: 0
void sh_backslash_quote_for_double_quotes()
sh_backslash_quote_for_double_quotes_entry:
	// succ:  l0000000000488960
l0000000000488960:
	sp = fp
	sp = sp + -32
	Mem0[sp:word64] = x29
	sp = sp + 8
	Mem0[sp:word64] = x30
	x29 = x31 + 0x0000000000000000
	Mem0[sp + 16:word64] = x19
	x19 = x0
	strlen(x0)
	sp = sp + 0xFFFFFFFFFFFFFFF8
sh_backslash_quote_for_double_quotes_exit:


// sh_contains_shell_metas
// Return size: 0
void sh_contains_shell_metas()
sh_contains_shell_metas_entry:
	// succ:  l0000000000488A1C
l0000000000488A1C:
	sp = fp
	branch x0 == 0x0000000000000000 l0000000000488A5C
	// succ:  l0000000000488A20 l0000000000488A5C
l0000000000488A20:
	v5 = Mem0[x0:byte]
	w2 = (word32) v5
	branch w2 == 0x00000000 l0000000000488A8C
	// succ:  l0000000000488A28 l0000000000488A8C
l0000000000488A28:
	x3 = 0x00000000004C2000
	x1 = x0
	x3 = x3 + 0xFFFFFFFFFFFFF984
	// succ:  l0000000000488A34
l0000000000488A34:
	w2 = w2 - 0x00000009
	w31 = w2 - 0x00000075
	NZCV = cond(w31)
	branch Test(UGT,ZC) l0000000000488A7C
	// succ:  l0000000000488A40 l0000000000488A7C
l0000000000488A40:
	v12 = Mem0[x3 + (uint64) ((uint32) w2):byte]
	w4 = (word32) v12
	x5 = 0x0000000000488A50
	x4 = x5 + (int64) ((int8) w4)
	call x4 (retsize: 0;)
	return
	// succ:  sh_contains_shell_metas_exit
l0000000000488A5C:
	return
	// succ:  sh_contains_shell_metas_exit
l0000000000488A7C:
	x1 = x1 + 0x0000000000000001
	NZCV = cond(x1)
	branch Test(EQ,Z) l0000000000488A94
	// succ:  l0000000000488A84 l0000000000488A94
l0000000000488A84:
	v16 = Mem0[x1:byte]
	w2 = (word32) v16
	branch w2 != 0x00000000 l0000000000488A34
	// succ:  l0000000000488A8C l0000000000488A34
l0000000000488A8C:
	w0 = w2
	return
	// succ:  sh_contains_shell_metas_exit
l0000000000488A94:
	w0 = w1
	return
	// succ:  sh_contains_shell_metas_exit
sh_contains_shell_metas_exit:


// ansicstr
// Return size: 0
void ansicstr()
ansicstr_entry:
	// succ:  l0000000000488A9C
l0000000000488A9C:
	sp = fp
	sp = sp + -144
	Mem0[sp:word64] = x29
	sp = sp + 8
	Mem0[sp:word64] = x30
	x29 = x31 + 0x0000000000000000
	v8 = sp + 16
	Mem0[v8:word64] = x19
	v8 = v8 + 8
	Mem0[v8:word64] = x20
	v11 = sp + 48
	Mem0[v11:word64] = x23
	v11 = v11 + 8
	Mem0[v11:word64] = x24
	v14 = sp + 64
	Mem0[v14:word64] = x25
	v14 = v14 + 8
	Mem0[v14:word64] = x26
	v17 = sp + 80
	Mem0[v17:word64] = x27
	v17 = v17 + 8
	Mem0[v17:word64] = x28
	v20 = sp + 32
	Mem0[v20:word64] = x21
	v20 = v20 + 8
	Mem0[v20:word64] = x22
	x19 = x0
	w24 = w2
	x26 = x3
	x28 = x4
	branch x0 == 0x0000000000000000 l0000000000488B48
	// succ:  l0000000000488ACC l0000000000488B48
l0000000000488ACC:
	v27 = Mem0[x0:byte]
	w0 = (word32) v27
	branch w0 == 0x00000000 l0000000000488BE4
	// succ:  l0000000000488AD4 l0000000000488BE4
l0000000000488AD4:
l0000000000488B48:
	v28 = sp + 16
	x19 = Mem0[v28:word64]
	v28 = v28 + 8
	x20 = Mem0[v28:word64]
	v29 = sp + 32
	x21 = Mem0[v29:word64]
	v29 = v29 + 8
	x22 = Mem0[v29:word64]
	v30 = sp + 48
	x23 = Mem0[v30:word64]
	v30 = v30 + 8
	x24 = Mem0[v30:word64]
	v31 = sp + 64
	x25 = Mem0[v31:word64]
	v31 = v31 + 8
	x26 = Mem0[v31:word64]
	v32 = sp + 80
	x27 = Mem0[v32:word64]
	v32 = v32 + 8
	x28 = Mem0[v32:word64]
	x29 = Mem0[sp:word64]
	sp = sp + 8
	x30 = Mem0[sp:word64]
	sp = sp + 144
	return
	// succ:  ansicstr_exit
l0000000000488BE4:
	x0 = 0x0000000000000000
	v33 = sp + 16
	x19 = Mem0[v33:word64]
	v33 = v33 + 8
	x20 = Mem0[v33:word64]
	v34 = sp + 32
	x21 = Mem0[v34:word64]
	v34 = v34 + 8
	x22 = Mem0[v34:word64]
	v35 = sp + 48
	x23 = Mem0[v35:word64]
	v35 = v35 + 8
	x24 = Mem0[v35:word64]
	v36 = sp + 64
	x25 = Mem0[v36:word64]
	v36 = v36 + 8
	x26 = Mem0[v36:word64]
	v37 = sp + 80
	x27 = Mem0[v37:word64]
	v37 = v37 + 8
	x28 = Mem0[v37:word64]
	x29 = Mem0[sp:word64]
	sp = sp + 8
	x30 = Mem0[sp:word64]
	sp = sp + 144
	return
	// succ:  ansicstr_exit
ansicstr_exit:


// ansic_quote
// Return size: 0
void ansic_quote()
ansic_quote_entry:
	// succ:  l00000000004890E0
l00000000004890E0:
	sp = fp
	sp = sp + -80
	Mem0[sp:word64] = x29
	sp = sp + 8
	Mem0[sp:word64] = x30
	x29 = x31 + 0x0000000000000000
	v8 = sp + 32
	Mem0[v8:word64] = x21
	v8 = v8 + 8
	Mem0[v8:word64] = x22
	Mem0[sp + 64:word64] = x25
	v12 = sp + 16
	Mem0[v12:word64] = x19
	v12 = v12 + 8
	Mem0[v12:word64] = x20
	v15 = sp + 48
	Mem0[v15:word64] = x23
	v15 = v15 + 8
	Mem0[v15:word64] = x24
	x21 = x0
	x25 = x2
	branch x0 == 0x0000000000000000 l00000000004891CC
	// succ:  l0000000000489104 l00000000004891CC
l0000000000489104:
	v19 = Mem0[x0:byte]
	w1 = (word32) v19
	branch w1 == 0x00000000 l0000000000489280
	// succ:  l000000000048910C l0000000000489280
l000000000048910C:
	strlen(x0)
	sp = sp + 0xFFFFFFFFFFFFFFF8
	w0 = w0 + 0x00000001
l00000000004891CC:
	v21 = sp + 16
	x19 = Mem0[v21:word64]
	v21 = v21 + 8
	x20 = Mem0[v21:word64]
	v22 = sp + 32
	x21 = Mem0[v22:word64]
	v22 = v22 + 8
	x22 = Mem0[v22:word64]
	v23 = sp + 48
	x23 = Mem0[v23:word64]
	v23 = v23 + 8
	x24 = Mem0[v23:word64]
	x25 = Mem0[sp + 64:word64]
	x29 = Mem0[sp:word64]
	sp = sp + 8
	x30 = Mem0[sp:word64]
	sp = sp + 80
	return
	// succ:  ansic_quote_exit
l0000000000489280:
	x0 = 0x0000000000000000
	v24 = sp + 16
	x19 = Mem0[v24:word64]
	v24 = v24 + 8
	x20 = Mem0[v24:word64]
	v25 = sp + 32
	x21 = Mem0[v25:word64]
	v25 = v25 + 8
	x22 = Mem0[v25:word64]
	v26 = sp + 48
	x23 = Mem0[v26:word64]
	v26 = v26 + 8
	x24 = Mem0[v26:word64]
	x25 = Mem0[sp + 64:word64]
	x29 = Mem0[sp:word64]
	sp = sp + 8
	x30 = Mem0[sp:word64]
	sp = sp + 80
	return
	// succ:  ansic_quote_exit
ansic_quote_exit:


// ansic_shouldquote
// Return size: 0
void ansic_shouldquote()
ansic_shouldquote_entry:
	// succ:  l000000000048929C
l000000000048929C:
	sp = fp
	sp = sp + -32
	Mem0[sp:word64] = x29
	sp = sp + 8
	Mem0[sp:word64] = x30
	x29 = x31 + 0x0000000000000000
	v8 = sp + 16
	Mem0[v8:word64] = x19
	v8 = v8 + 8
	Mem0[v8:word64] = x20
	x20 = x0
	branch x0 == 0x0000000000000000 l00000000004892F8
	// succ:  l00000000004892B0 l00000000004892F8
l00000000004892B0:
	v11 = Mem0[x0:byte]
	w19 = (word32) v11
	branch w19 == 0x00000000 l00000000004892E8
	// succ:  l00000000004892B8 l00000000004892E8
l00000000004892B8:
	__ctype_b_loc()
	sp = sp + 0xFFFFFFFFFFFFFFF8
	x1 = Mem0[x0:word64]
	// succ:  l00000000004892CC
l00000000004892CC:
l00000000004892E8:
	w0 = w19
	v15 = sp + 16
	x19 = Mem0[v15:word64]
	v15 = v15 + 8
	x20 = Mem0[v15:word64]
	x29 = Mem0[sp:word64]
	sp = sp + 8
	x30 = Mem0[sp:word64]
	sp = sp + 32
	return
	// succ:  ansic_shouldquote_exit
l00000000004892F8:
	v13 = sp + 16
	x19 = Mem0[v13:word64]
	v13 = v13 + 8
	x20 = Mem0[v13:word64]
	x29 = Mem0[sp:word64]
	sp = sp + 8
	x30 = Mem0[sp:word64]
	sp = sp + 32
	return
	// succ:  ansic_shouldquote_exit
ansic_shouldquote_exit:


// ansiexpand
// Return size: 0
void ansiexpand()
ansiexpand_entry:
	// succ:  l0000000000489304
l0000000000489304:
	sp = fp
	sp = sp + -80
	Mem0[sp:word64] = x29
	sp = sp + 8
	Mem0[sp:word64] = x30
	x29 = x31 + 0x0000000000000000
	v8 = sp + 32
	Mem0[v8:word64] = x21
	v8 = v8 + 8
	Mem0[v8:word64] = x22
	w22 = w2 - w1
	v14 = sp + 48
	Mem0[v14:word64] = x23
	v14 = v14 + 8
	Mem0[v14:word64] = x24
	Mem0[sp + 64:word64] = x25
	w23 = w2
	x25 = 0x00000000004C2000
	w2 = w22 + 0x00000001
	v19 = sp + 16
	Mem0[v19:word64] = x19
	v19 = v19 + 8
	Mem0[v19:word64] = x20
	w21 = w1
	x20 = x0
	x1 = x25 + 0xFFFFFFFFFFFFFB28
ansiexpand_exit:


// mailstat
// Return size: 0
void mailstat()
mailstat_entry:
	// succ:  l0000000000489420
l0000000000489420:
	sp = fp
	x31 = x31 - (0x0000000000000004 << 12)
	x31 = x31 - 0x0000000000000150
	sp = sp + -96
	Mem0[sp:word64] = x29
	sp = sp + 8
	Mem0[sp:word64] = x30
	x29 = x31 + 0x0000000000000000
	v8 = sp + 16
	Mem0[v8:word64] = x19
	v8 = v8 + 8
	Mem0[v8:word64] = x20
	v11 = sp + 32
	Mem0[v11:word64] = x21
	v11 = v11 + 8
	Mem0[v11:word64] = x22
	x20 = x1
	x21 = x0
	x1 = x21
	w0 = 0x00000000
	x2 = x20
	v18 = sp + 48
	Mem0[v18:word64] = x23
	v18 = v18 + 8
	Mem0[v18:word64] = x24
	v21 = sp + 64
	Mem0[v21:word64] = x25
	v21 = v21 + 8
	Mem0[v21:word64] = x26
	v24 = sp + 80
	Mem0[v24:word64] = x27
	v24 = v24 + 8
	Mem0[v24:word64] = x28
	__xstat(x0, x1, x2)
	sp = sp + 0xFFFFFFFFFFFFFFF8
	w19 = w0
	branch w0 != 0x00000000 l0000000000489474
	// succ:  l0000000000489464 l0000000000489474
l0000000000489464:
	w22 = Mem0[x20 + 16:word32]
	w0 = w22 & 0x0000F000
	w31 = w0 - (0x00000004 << 12)
	NZCV = cond(w31)
	branch Test(EQ,Z) l000000000048949C
	// succ:  l0000000000489474 l000000000048949C
l0000000000489474:
	w0 = w19
	v30 = sp + 32
	x21 = Mem0[v30:word64]
	v30 = v30 + 8
	x22 = Mem0[v30:word64]
	v31 = sp + 16
	x19 = Mem0[v31:word64]
	v31 = v31 + 8
	x20 = Mem0[v31:word64]
	v32 = sp + 48
	x23 = Mem0[v32:word64]
	v32 = v32 + 8
	x24 = Mem0[v32:word64]
	v33 = sp + 64
	x25 = Mem0[v33:word64]
	v33 = v33 + 8
	x26 = Mem0[v33:word64]
	v34 = sp + 80
	x27 = Mem0[v34:word64]
	v34 = v34 + 8
	x28 = Mem0[v34:word64]
	x29 = Mem0[sp:word64]
	sp = sp + 8
	x30 = Mem0[sp:word64]
	sp = sp + 96
	x31 = x31 + 0x0000000000000150
	x31 = x31 + (0x0000000000000004 << 12)
	return
	// succ:  mailstat_exit
l000000000048949C:
	x0 = x21
	strlen(x0)
	sp = sp + 0xFFFFFFFFFFFFFFF8
	x1 = 0x0000000000001FFB
	x31 = x0 - x1
	NZCV = cond(x31)
	branch Test(UGT,ZC) l0000000000489738
	// succ:  l00000000004894B0 l0000000000489738
l00000000004894B0:
	x3 = 0x0000000000004060
	x2 = 0x0000000000000080
	x3 = x3 + x29
	x0 = x3 + x2
	x1 = x20
	memcpy(x0, x1, x2)
	sp = sp + 0xFFFFFFFFFFFFFFF8
	x0 = 0x0000000000002060
	x3 = 0x00000000004C2000
	w1 = 0x00000001
	x2 = 0x0000000000002000
	x0 = x0 + x29
	x3 = x3 + 0xFFFFFFFFFFFFFB50
	x4 = x21
	__sprintf_chk(x0, x1, x2, x3, Mem0[sp:<unknown>])
	sp = sp + 0xFFFFFFFFFFFFFFF8
	x1 = 0x0000000000002060
	x2 = 0x0000000000004060
	w0 = w19
	x1 = x1 + x29
	x2 = x2 + x29
	__xstat(x0, x1, x2)
	sp = sp + 0xFFFFFFFFFFFFFFF8
	branch w0 != 0x00000000 l0000000000489474
	// succ:  l0000000000489504 l0000000000489474
l0000000000489504:
	x5 = x29 + (0x0000000000000004 << 12)
	w0 = Mem0[x5 + 112:word32]
	w0 = w0 & 0x0000F000
	w31 = w0 - (0x00000004 << 12)
	NZCV = cond(w31)
	branch Test(NE,Z) l0000000000489474
	// succ:  l0000000000489518 l0000000000489474
l0000000000489518:
	x0 = 0x0000000000002060
	x3 = 0x00000000004C2000
	w1 = 0x00000001
	x2 = 0x0000000000002000
	x0 = x0 + x29
	x3 = x3 + 0xFFFFFFFFFFFFFB58
	x4 = x21
	__sprintf_chk(x0, x1, x2, x3, Mem0[sp:<unknown>])
	sp = sp + 0xFFFFFFFFFFFFFFF8
	x1 = 0x0000000000002060
	x2 = 0x0000000000004060
	w0 = w19
	x1 = x1 + x29
	x2 = x2 + x29
	__xstat(x0, x1, x2)
	sp = sp + 0xFFFFFFFFFFFFFFF8
	branch w0 != 0x00000000 l0000000000489474
	// succ:  l0000000000489554 l0000000000489474
l0000000000489554:
	x6 = x29 + (0x0000000000000004 << 12)
	w0 = Mem0[x6 + 112:word32]
	w0 = w0 & 0x0000F000
	w31 = w0 - (0x00000004 << 12)
	NZCV = cond(w31)
	branch Test(NE,Z) l0000000000489474
	// succ:  l0000000000489568 l0000000000489474
l0000000000489568:
	x0 = 0x0000000000002060
	x3 = 0x00000000004C2000
	w1 = 0x00000001
	x2 = 0x0000000000002000
	x0 = x0 + x29
	x3 = x3 + 0xFFFFFFFFFFFFFB60
	x4 = x21
	__sprintf_chk(x0, x1, x2, x3, Mem0[sp:<unknown>])
	sp = sp + 0xFFFFFFFFFFFFFFF8
	x1 = 0x0000000000002060
	x2 = 0x0000000000004060
	w0 = w19
	x1 = x1 + x29
	x2 = x2 + x29
	__xstat(x0, x1, x2)
	sp = sp + 0xFFFFFFFFFFFFFFF8
	branch w0 != 0x00000000 l0000000000489474
	// succ:  l00000000004895A4 l0000000000489474
l00000000004895A4:
	x1 = x29 + (0x0000000000000004 << 12)
	w0 = Mem0[x1 + 112:word32]
	w0 = w0 & 0x0000F000
	w31 = w0 - (0x00000004 << 12)
	NZCV = cond(w31)
	branch Test(NE,Z) l0000000000489474
	// succ:  l00000000004895B8 l0000000000489474
l00000000004895B8:
	x2 = 0x00000000004E1000
	x1 = x2 + 0xFFFFFFFFFFFFFB60
	x0 = Mem0[x29 + -16288:word64]
	x1 = Mem0[x1:word64]
	x6 = Mem0[x29 + -16200:word64]
	x31 = x0 - x1
	NZCV = cond(x31)
	Mem0[x29 + -16008:word64] = x6
	branch Test(EQ,Z) l00000000004897F8
	// succ:  l00000000004895D8 l00000000004897F8
l00000000004895D8:
	x1 = 0x00000000004E1000
	x0 = x1 + 0xFFFFFFFFFFFFFB60
	x1 = 0x0000000000004060
	x2 = 0x0000000000000080
	x1 = x1 + x29
	memcpy(x0, x1, x2)
	sp = sp + 0xFFFFFFFFFFFFFFF8
	x0 = 0x00000000004C2000
	x0 = x0 + 0xFFFFFFFFFFFFFB70
	Mem0[x29 + -15992:word64] = x0
	x0 = 0x00000000004C2000
	x0 = x0 + 0xFFFFFFFFFFFFFB78
	Mem0[x29 + -15984:word64] = x0
	x0 = 0x00000000004C2000
	x26 = 0x0000000000000000
	x2 = x29 + (0x0000000000000004 << 12)
	x5 = 0x00000000004C2000
	x0 = x0 + 0xFFFFFFFFFFFFFB68
	Mem0[x29 + -16024:word64] = x26
	x27 = x26
	Mem0[x2 + 368:word32] = w26
	Mem0[x29 + -16032:word64] = x26
	x5 = x5 + 0xFFFFFFFFFFFFFB48
	x25 = 0x0000000000001FFF
	Mem0[x29 + -15976:word64] = x0
	x3 = Mem0[x29 + -15992:word64]
	x0 = 0x0000000000002060
	w1 = 0x00000001
	x2 = 0x0000000000002000
	x4 = x21
	x0 = x0 + x29
	__sprintf_chk(x0, x1, x2, x3, Mem0[sp:<unknown>])
	sp = sp + 0xFFFFFFFFFFFFFFF8
	x3 = Mem0[x29 + -15984:word64]
	x4 = 0x0000000000002060
	w1 = 0x00000001
	x2 = 0x0000000000002000
	x4 = x4 + x29
	x0 = x29 + 0x0000000000000060
	__sprintf_chk(x0, x1, x2, x3, Mem0[sp:<unknown>])
	sp = sp + 0xFFFFFFFFFFFFFFF8
	x0 = x29 + 0x0000000000000060
	strlen(x0)
	sp = sp + 0xFFFFFFFFFFFFFFF8
l0000000000489738:
	__errno_location()
	sp = sp + 0xFFFFFFFFFFFFFFF8
	w1 = 0x00000024
	Mem0[x0:word32] = w1
	w19 = 0xFFFFFFFF
	goto l0000000000489474
	// succ:  l0000000000489474
l00000000004897F8:
	x1 = x2 + 0xFFFFFFFFFFFFFB60
	x0 = Mem0[x1 + 8:word64]
	x2 = Mem0[x29 + -16280:word64]
	x31 = x2 - x0
	NZCV = cond(x31)
	branch Test(NE,Z) l00000000004895D8
	// succ:  l000000000048980C l00000000004895D8
l000000000048980C:
	x0 = Mem0[x1 + 72:word64]
	x2 = Mem0[x29 + -16216:word64]
	x31 = x2 - x0
	NZCV = cond(x31)
	branch Test(NE,Z) l00000000004895D8
	// succ:  l000000000048981C l00000000004895D8
l000000000048981C:
	x0 = Mem0[x1 + 88:word64]
	x31 = x6 - x0
	NZCV = cond(x31)
	branch Test(NE,Z) l00000000004895D8
	// succ:  l0000000000489828 l00000000004895D8
l0000000000489828:
	x0 = x20
	x1 = x1 + 0x0000000000000080
	x2 = 0x0000000000000080
	memcpy(x0, x1, x2)
	sp = sp + 0xFFFFFFFFFFFFFFF8
	w19 = 0x00000000
	goto l0000000000489474
	// succ:  l0000000000489474
mailstat_exit:


// fmtulong
// Return size: 0
void fmtulong()
fmtulong_entry:
	// succ:  l0000000000489840
l0000000000489840:
	sp = fp
	sp = sp + -48
	Mem0[sp:word64] = x29
	sp = sp + 8
	Mem0[sp:word64] = x30
	x29 = x31 + 0x0000000000000000
	Mem0[sp + 16:word64] = x19
	x19 = x2
	branch w1 == 0x00000000 l0000000000489920
	// succ:  l0000000000489854 l0000000000489920
l0000000000489854:
	w6 = w1 - 0x00000002
	w31 = w6 - 0x0000003E
	NZCV = cond(w31)
	branch Test(UGT,ZC) l00000000004899A4
	// succ:  l0000000000489860 l00000000004899A4
l0000000000489860:
	w7 = 0x00000000
	branch (w4 & 0x00000008) == 0x00000000 l000000000048986C
	// succ:  l0000000000489868 l000000000048986C
l0000000000489868:
	branch (w0 & 0x00000000) != 0x00000000 l0000000000489A78
	// succ:  l000000000048986C l0000000000489A78
l000000000048986C:
	x3 = x3 - 0x0000000000000002
	x5 = x19 + x3
	Mem0[x5 + 1:byte] = 0x00
	w31 = w6 - 0x0000000E
	NZCV = cond(w31)
	branch Test(ULE,ZC) l0000000000489934
	// succ:  l0000000000489880 l0000000000489934
l0000000000489880:
l0000000000489920:
	w1 = 0x0000000A
	w6 = 0x00000008
	w7 = 0x00000000
	branch (w4 & 0x00000008) == 0x00000000 l000000000048986C
	// succ:  l0000000000489930 l000000000048986C
l0000000000489930:
	goto l0000000000489868
	// succ:  l0000000000489868
l0000000000489934:
	x2 = 0x00000000004C2000
	x2 = x2 + 0xFFFFFFFFFFFFFB7C
	v19 = Mem0[x2 + (uint64) ((uint32) w6):byte]
	w9 = (word32) v19
	x8 = 0x000000000048994C
	x9 = x8 + (int64) ((int8) w9)
l00000000004899A4:
	x1 = 0x00000000004C2000
	w2 = 0x00000005
	x1 = x1 + 0xFFFFFFFFFFFFFB90
	x0 = 0x0000000000000000
	Mem0[x29 + 32:word64] = x3
	dcgettext(x0, x1, x2)
	sp = sp + 0xFFFFFFFFFFFFFFF8
	x3 = Mem0[x29 + 32:word64]
	x1 = x0
	x2 = x3 - 0x0000000000000001
	x0 = x19
	strncpy(x0, x1, x2)
	sp = sp + 0xFFFFFFFFFFFFFFF8
	x3 = Mem0[x29 + 32:word64]
	Mem0[x19 + x3:byte] = 0x00
	__errno_location()
	sp = sp + 0xFFFFFFFFFFFFFFF8
	w1 = 0x00000016
	Mem0[x0:word32] = w1
	x0 = x19
	x19 = Mem0[sp + 16:word64]
	x29 = Mem0[sp:word64]
	sp = sp + 8
	x30 = Mem0[sp:word64]
	sp = sp + 48
	return
	// succ:  fmtulong_exit
l0000000000489A78:
	x3 = x3 - 0x0000000000000002
	x5 = x19 + x3
	Mem0[x5 + 1:byte] = 0x00
	w31 = w6 - 0x0000000E
	NZCV = cond(w31)
	x0 = x31 - x0
	w7 = 0x0000002D
	branch Test(UGT,ZC) l0000000000489880
	// succ:  l0000000000489A94 l0000000000489880
l0000000000489A94:
	goto l0000000000489934
	// succ:  l0000000000489934
fmtulong_exit:


// fmtumax
// Return size: 0
void fmtumax()
fmtumax_entry:
	// succ:  l0000000000489B70
l0000000000489B70:
	sp = fp
	sp = sp + -48
	Mem0[sp:word64] = x29
	sp = sp + 8
	Mem0[sp:word64] = x30
	x29 = x31 + 0x0000000000000000
	Mem0[sp + 16:word64] = x19
	x19 = x2
	branch w1 == 0x00000000 l0000000000489C50
	// succ:  l0000000000489B84 l0000000000489C50
l0000000000489B84:
	w6 = w1 - 0x00000002
	w31 = w6 - 0x0000003E
	NZCV = cond(w31)
	branch Test(UGT,ZC) l0000000000489CD4
	// succ:  l0000000000489B90 l0000000000489CD4
l0000000000489B90:
	w7 = 0x00000000
	branch (w4 & 0x00000008) == 0x00000000 l0000000000489B9C
	// succ:  l0000000000489B98 l0000000000489B9C
l0000000000489B98:
	branch (w0 & 0x00000000) != 0x00000000 l0000000000489DA8
	// succ:  l0000000000489B9C l0000000000489DA8
l0000000000489B9C:
	x3 = x3 - 0x0000000000000002
	x5 = x19 + x3
	Mem0[x5 + 1:byte] = 0x00
	w31 = w6 - 0x0000000E
	NZCV = cond(w31)
	branch Test(ULE,ZC) l0000000000489C64
	// succ:  l0000000000489BB0 l0000000000489C64
l0000000000489BB0:
l0000000000489C50:
	w1 = 0x0000000A
	w6 = 0x00000008
	w7 = 0x00000000
	branch (w4 & 0x00000008) == 0x00000000 l0000000000489B9C
	// succ:  l0000000000489C60 l0000000000489B9C
l0000000000489C60:
	goto l0000000000489B98
	// succ:  l0000000000489B98
l0000000000489C64:
	x2 = 0x00000000004C2000
	x2 = x2 + 0xFFFFFFFFFFFFFBCC
	v19 = Mem0[x2 + (uint64) ((uint32) w6):byte]
	w9 = (word32) v19
	x8 = 0x0000000000489C7C
	x9 = x8 + (int64) ((int8) w9)
l0000000000489CD4:
	x1 = 0x00000000004C2000
	w2 = 0x00000005
	x1 = x1 + 0xFFFFFFFFFFFFFB90
	x0 = 0x0000000000000000
	Mem0[x29 + 32:word64] = x3
	dcgettext(x0, x1, x2)
	sp = sp + 0xFFFFFFFFFFFFFFF8
	x3 = Mem0[x29 + 32:word64]
	x1 = x0
	x2 = x3 - 0x0000000000000001
	x0 = x19
	strncpy(x0, x1, x2)
	sp = sp + 0xFFFFFFFFFFFFFFF8
	x3 = Mem0[x29 + 32:word64]
	Mem0[x19 + x3:byte] = 0x00
	__errno_location()
	sp = sp + 0xFFFFFFFFFFFFFFF8
	w1 = 0x00000016
	Mem0[x0:word32] = w1
	x0 = x19
	x19 = Mem0[sp + 16:word64]
	x29 = Mem0[sp:word64]
	sp = sp + 8
	x30 = Mem0[sp:word64]
	sp = sp + 48
	return
	// succ:  fmtumax_exit
l0000000000489DA8:
	x3 = x3 - 0x0000000000000002
	x5 = x19 + x3
	Mem0[x5 + 1:byte] = 0x00
	w31 = w6 - 0x0000000E
	NZCV = cond(w31)
	x0 = x31 - x0
	w7 = 0x0000002D
	branch Test(UGT,ZC) l0000000000489BB0
	// succ:  l0000000000489DC4 l0000000000489BB0
l0000000000489DC4:
	goto l0000000000489C64
	// succ:  l0000000000489C64
fmtumax_exit:


// zcatfd
// Return size: 0
void zcatfd()
zcatfd_entry:
	// succ:  l0000000000489EA0
l0000000000489EA0:
	sp = fp
	sp = sp + -160
	Mem0[sp:word64] = x29
	sp = sp + 8
	Mem0[sp:word64] = x30
	x29 = x31 + 0x0000000000000000
	v8 = sp + 16
	Mem0[v8:word64] = x19
	v8 = v8 + 8
	Mem0[v8:word64] = x20
	w20 = w0
	w19 = w1
	goto l0000000000489EC4
	// succ:  l0000000000489EC4
l0000000000489EB8:
	branch Test(LT,NV) l0000000000489EFC
	// succ:  l0000000000489EBC l0000000000489EFC
l0000000000489EBC:
	call zwrite (retsize: 0;)
	branch (w0 & 0x00000000) == 0x00000000 l0000000000489EFC
	// succ:  l0000000000489EC4 l0000000000489EFC
l0000000000489EC4:
	x1 = x29 + 0x0000000000000020
	x2 = 0x0000000000000080
	w0 = w20
	call zread (retsize: 0;)
	x3 = x0
	x31 = x3 - x31
	NZCV = cond(x31)
	x1 = x29 + 0x0000000000000020
	w0 = w19
	x2 = x3
	branch Test(NE,Z) l0000000000489EB8
	// succ:  l0000000000489EEC l0000000000489EB8
l0000000000489EEC:
	w0 = w3
	v20 = sp + 16
	x19 = Mem0[v20:word64]
	v20 = v20 + 8
	x20 = Mem0[v20:word64]
	x29 = Mem0[sp:word64]
	sp = sp + 8
	x30 = Mem0[sp:word64]
	sp = sp + 160
	return
	// succ:  zcatfd_exit
l0000000000489EFC:
	w0 = 0xFFFFFFFF
	v22 = sp + 16
	x19 = Mem0[v22:word64]
	v22 = v22 + 8
	x20 = Mem0[v22:word64]
	x29 = Mem0[sp:word64]
	sp = sp + 8
	x30 = Mem0[sp:word64]
	sp = sp + 160
	return
	// succ:  zcatfd_exit
zcatfd_exit:


// zmapfd
// Return size: 0
void zmapfd()
zmapfd_entry:
	// succ:  l0000000000489F0C
l0000000000489F0C:
	sp = fp
	sp = sp + -224
	Mem0[sp:word64] = x29
	sp = sp + 8
	Mem0[sp:word64] = x30
	x29 = x31 + 0x0000000000000000
	Mem0[sp + 80:word64] = x27
	x27 = 0x00000000004C2000
	v9 = sp + 48
	Mem0[v9:word64] = x23
	v9 = v9 + 8
	Mem0[v9:word64] = x24
	x24 = x27 + 0xFFFFFFFFFFFFFBE0
	v12 = sp + 64
	Mem0[v12:word64] = x25
	v12 = v12 + 8
	Mem0[v12:word64] = x26
	w2 = 0x00000038
	w25 = w0
	x26 = x1
	x0 = 0x0000000000000040
	x1 = x24
	v20 = sp + 16
	Mem0[v20:word64] = x19
	v20 = v20 + 8
	Mem0[v20:word64] = x20
	v23 = sp + 32
	Mem0[v23:word64] = x21
	v23 = v23 + 8
	Mem0[v23:word64] = x22
	call sh_xmalloc (retsize: 0;)
	x23 = x0
	w21 = 0x00000000
	w20 = 0x00000040
	// succ:  l0000000000489F88
l0000000000489F88:
	x2 = 0x0000000000000080
	x1 = x29 + 0x0000000000000060
	w0 = w25
	call zread (retsize: 0;)
zmapfd_exit:


// get_new_window_size
// Return size: 0
void get_new_window_size()
get_new_window_size_entry:
	// succ:  l000000000048A080
l000000000048A080:
	sp = fp
	sp = sp + -48
	Mem0[sp:word64] = x29
	sp = sp + 8
	Mem0[sp:word64] = x30
	x29 = x31 + 0x0000000000000000
	x0 = 0x00000000004D6000
	w0 = Mem0[x0 + 3444:word32]
	v10 = sp + 16
	Mem0[v10:word64] = x19
	v10 = v10 + 8
	Mem0[v10:word64] = x20
	w31 = w0 + 0x00000001
	NZCV = cond(w31)
	x20 = x1
	x19 = x2
	branch Test(EQ,Z) l000000000048A0D4
	// succ:  l000000000048A0A4 l000000000048A0D4
l000000000048A0A4:
	branch (w0 & 0x00000000) == 0x00000000 l000000000048A0C8
	// succ:  l000000000048A0A8 l000000000048A0C8
l000000000048A0A8:
	x1 = 0x0000000000005413
	x2 = x29 + 0x0000000000000020
	ioctl(x0, x1, Mem0[sp:<unknown>])
	sp = sp + 0xFFFFFFFFFFFFFFF8
	branch w0 != 0x00000000 l000000000048A0C8
	// succ:  l000000000048A0B8 l000000000048A0C8
l000000000048A0B8:
	v16 = Mem0[x29 + 32:word16]
	w0 = (word32) v16
	branch w0 == 0x00000000 l000000000048A0C8
	// succ:  l000000000048A0C0 l000000000048A0C8
l000000000048A0C0:
	v18 = Mem0[x29 + 34:word16]
	w1 = (word32) v18
	branch w1 != 0x00000000 l000000000048A0E4
	// succ:  l000000000048A0C8 l000000000048A0E4
l000000000048A0C8:
	v19 = sp + 16
	x19 = Mem0[v19:word64]
	v19 = v19 + 8
	x20 = Mem0[v19:word64]
	x29 = Mem0[sp:word64]
	sp = sp + 8
	x30 = Mem0[sp:word64]
	sp = sp + 48
	return
	// succ:  get_new_window_size_exit
l000000000048A0D4:
	x0 = 0x00000000004DE000
	x0 = Mem0[x0 + 1640:word64]
	fileno(x0)
	sp = sp + 0xFFFFFFFFFFFFFFF8
	goto l000000000048A0A4
	// succ:  l000000000048A0A4
l000000000048A0E4:
	call sh_set_lines_and_columns (retsize: 0;)
	v20 = Mem0[x29 + 32:word16]
	w0 = (word32) v20
	v21 = Mem0[x29 + 34:word16]
	w1 = (word32) v21
	call rl_set_screen_size (retsize: 0;)
	branch x20 == 0x0000000000000000 l000000000048A100
	// succ:  l000000000048A0F8 l000000000048A100
l000000000048A0F8:
	v22 = Mem0[x29 + 32:word16]
	w0 = (word32) v22
	Mem0[x20:word32] = w0
	// succ:  l000000000048A100
l000000000048A100:
	branch x19 == 0x0000000000000000 l000000000048A0C8
	// succ:  l000000000048A104 l000000000048A0C8
l000000000048A104:
	v23 = Mem0[x29 + 34:word16]
	w0 = (word32) v23
	Mem0[x19:word32] = w0
	goto l000000000048A0C8
	// succ:  l000000000048A0C8
get_new_window_size_exit:


// fpurge
// Return size: 0
void fpurge()
fpurge_entry:
	// succ:  l000000000048A110
l000000000048A110:
	sp = fp
	sp = sp + -16
	Mem0[sp:word64] = x29
	sp = sp + 8
	Mem0[sp:word64] = x30
	x29 = x31 + 0x0000000000000000
	call __fpurge (retsize: 0;)
	w0 = 0x00000000
	x29 = Mem0[sp:word64]
	sp = sp + 8
	x30 = Mem0[sp:word64]
	sp = sp + 16
	return
	// succ:  fpurge_exit
fpurge_exit:


// zgetline
// Return size: 0
void zgetline()
zgetline_entry:
	// succ:  l000000000048A128
l000000000048A128:
	sp = fp
	sp = sp + -112
	Mem0[sp:word64] = x29
	sp = sp + 8
	Mem0[sp:word64] = x30
	x29 = x31 + 0x0000000000000000
	v8 = sp + 48
	Mem0[v8:word64] = x23
	v8 = v8 + 8
	Mem0[v8:word64] = x24
	v11 = sp + 64
	Mem0[v11:word64] = x25
	v11 = v11 + 8
	Mem0[v11:word64] = x26
	v14 = sp + 16
	Mem0[v14:word64] = x19
	v14 = v14 + 8
	Mem0[v14:word64] = x20
	v17 = sp + 32
	Mem0[v17:word64] = x21
	v17 = v17 + 8
	Mem0[v17:word64] = x22
	Mem0[sp + 80:word64] = x27
	x24 = x1
	w25 = w0
	x23 = x2
	w26 = w3
	branch x1 == 0x0000000000000000 l000000000048A244
	// succ:  l000000000048A158 l000000000048A244
l000000000048A158:
	branch x2 == 0x0000000000000000 l000000000048A244
	// succ:  l000000000048A15C l000000000048A244
l000000000048A15C:
	x20 = Mem0[x1:word64]
	branch x20 == 0x0000000000000000 l000000000048A23C
	// succ:  l000000000048A164 l000000000048A23C
l000000000048A164:
	x27 = 0x00000000004C2000
	x19 = 0x0000000000000000
	x27 = x27 + 0xFFFFFFFFFFFFFC00
	goto l000000000048A1E4
	// succ:  l000000000048A1E4
l000000000048A174:
	x2 = 0x0000000000000001
	call zread (retsize: 0;)
	NZCV = cond(w0 - w31)
	branch Test(LE,ZCV) l000000000048A200
	// succ:  l000000000048A184 l000000000048A200
l000000000048A184:
	x4 = Mem0[x23:word64]
	x5 = x19 + 0x0000000000000002
	x31 = x4 - x5
	NZCV = cond(x31)
	branch Test(UGT,ZC) l000000000048A1C8
	// succ:  l000000000048A194 l000000000048A1C8
l000000000048A194:
	branch x4 == 0x0000000000000000 l000000000048A234
	// succ:  l000000000048A198 l000000000048A234
l000000000048A198:
l000000000048A1A4:
	x0 = Mem0[x24:word64]
	x1 = x22
	x2 = x27
	w3 = 0x0000005C
	call sh_xrealloc (retsize: 0;)
	x20 = x0
	branch x0 == 0x0000000000000000 l000000000048A24C
	// succ:  l000000000048A1C0 l000000000048A24C
l000000000048A1C0:
	Mem0[x24:word64] = x0
	Mem0[x23:word64] = x22
	// succ:  l000000000048A1C8
l000000000048A1C8:
	v40 = Mem0[x29 + 96:byte]
	w4 = (word32) v40
	w21 = w19 + 0x00000001
	Mem0[x20 + x19:byte] = (byte) w4
	v41 = Mem0[x29 + 96:byte]
	w4 = (word32) v41
	x19 = x19 + 0x0000000000000001
	w31 = w4 - 0x0000000A
	NZCV = cond(w31)
	branch Test(EQ,Z) l000000000048A20C
	// succ:  l000000000048A1E4 l000000000048A20C
l000000000048A1E4:
	w21 = w19
	w0 = w25
	x1 = x29 + 0x0000000000000060
	branch w26 != 0x00000000 l000000000048A174
	// succ:  l000000000048A1F4 l000000000048A174
l000000000048A1F4:
	call zreadc (retsize: 0;)
	NZCV = cond(w0 - w31)
	branch Test(GT,NZV) l000000000048A184
	// succ:  l000000000048A200 l000000000048A184
l000000000048A200:
	NZCV = cond(w21 - w31)
	branch Test(LE,ZCV) l000000000048A210
	// succ:  l000000000048A208 l000000000048A210
l000000000048A208:
	branch x20 == 0x0000000000000000 l000000000048A210
	// succ:  l000000000048A20C l000000000048A210
l000000000048A20C:
	Mem0[x20 + (int64) ((int32) w21):byte] = 0x00
	// succ:  l000000000048A210
l000000000048A210:
	w21 = w21 - 0x00000001
l000000000048A218:
	v32 = sp + 16
	x19 = Mem0[v32:word64]
	v32 = v32 + 8
	x20 = Mem0[v32:word64]
	v33 = sp + 32
	x21 = Mem0[v33:word64]
	v33 = v33 + 8
	x22 = Mem0[v33:word64]
	v34 = sp + 48
	x23 = Mem0[v34:word64]
	v34 = v34 + 8
	x24 = Mem0[v34:word64]
	v35 = sp + 64
	x25 = Mem0[v35:word64]
	v35 = v35 + 8
	x26 = Mem0[v35:word64]
	x27 = Mem0[sp + 80:word64]
	x29 = Mem0[sp:word64]
	sp = sp + 8
	x30 = Mem0[sp:word64]
	sp = sp + 112
	return
	// succ:  zgetline_exit
l000000000048A234:
	x22 = 0x0000000000000010
	goto l000000000048A1A4
	// succ:  l000000000048A1A4
l000000000048A23C:
	x0 = Mem0[x2:word64]
	branch x0 == 0x0000000000000000 l000000000048A164
	// succ:  l000000000048A244 l000000000048A164
l000000000048A244:
	x0 = 0xFFFFFFFFFFFFFFFF
	goto l000000000048A218
	// succ:  l000000000048A218
l000000000048A24C:
	x4 = Mem0[x23:word64]
	branch x4 == 0x0000000000000000 l000000000048A210
	// succ:  l000000000048A254 l000000000048A210
l000000000048A254:
	x0 = Mem0[x24:word64]
	x4 = x0 + x4
	Mem0[x4 + -1:byte] = 0x00
	x21 = Mem0[x23:word64]
	w21 = w21 - 0x00000002
	goto l000000000048A210
	// succ:  l000000000048A210
zgetline_exit:


// uconvert
// Return size: 0
void uconvert()
uconvert_entry:
	// succ:  l000000000048A26C
l000000000048A26C:
	sp = fp
	branch x0 == 0x0000000000000000 l000000000048A3B8
	// succ:  l000000000048A270 l000000000048A3B8
l000000000048A270:
	v5 = Mem0[x0:byte]
	w3 = (word32) v5
	w31 = w3 - 0x0000002D
	NZCV = cond(w31)
	w4 = (word32) Test(EQ,Z)
	w31 = w3 - 0x0000002B
	NZCV = cond(w31)
	branch Test(NE,Z) l000000000048A310
	// succ:  l000000000048A284 l000000000048A310
l000000000048A284:
	x10 = 0x0000000000000001
	branch w4 != 0x00000000 l000000000048A3B0
	// succ:  l000000000048A28C l000000000048A3B0
l000000000048A28C:
	x4 = x0 + 0x0000000000000001
	NZCV = cond(x4)
	branch Test(EQ,Z) l000000000048A2F4
	// succ:  l000000000048A294 l000000000048A2F4
l000000000048A294:
	v12 = Mem0[x0 + 1:byte]
	w3 = (word32) v12
	x0 = x4
	// succ:  l000000000048A29C
l000000000048A29C:
	branch w3 == 0x00000000 l000000000048A3F4
	// succ:  l000000000048A2A0 l000000000048A3F4
l000000000048A2A0:
	w31 = w3 - 0x0000002E
	NZCV = cond(w31)
	branch Test(EQ,Z) l000000000048A31C
	// succ:  l000000000048A2A8 l000000000048A31C
l000000000048A2A8:
	w5 = w3 - 0x00000030
l000000000048A2F4:
	branch x1 == 0x0000000000000000 l000000000048A300
	// succ:  l000000000048A2F8 l000000000048A300
l000000000048A2F8:
	x4 = x10 * x4
	Mem0[x1:word64] = x4
	// succ:  l000000000048A300
l000000000048A300:
	branch x2 == 0x0000000000000000 l000000000048A308
	// succ:  l000000000048A304 l000000000048A308
l000000000048A304:
	Mem0[x2:word64] = 0x0000000000000000
	// succ:  l000000000048A308
l000000000048A308:
	w0 = 0x00000001
	return
	// succ:  uconvert_exit
l000000000048A310:
	branch w4 != 0x00000000 l000000000048A3B0
	// succ:  l000000000048A314 l000000000048A3B0
l000000000048A314:
	x10 = 0x0000000000000001
	goto l000000000048A29C
	// succ:  l000000000048A29C
l000000000048A31C:
	x4 = 0x0000000000000000
	x3 = 0x0000000000000000
	x5 = x3
	x6 = x0 + x3
	v18 = Mem0[x6 + 1:byte]
	w7 = (word32) v18
	x9 = x5 + (x5 << 2)
	w6 = w7 - 0x00000030
l000000000048A3B0:
	x10 = 0xFFFFFFFFFFFFFFFF
	goto l000000000048A28C
	// succ:  l000000000048A28C
l000000000048A3B8:
	x10 = 0x0000000000000001
	x4 = x0
	goto l000000000048A2F4
	// succ:  l000000000048A2F4
l000000000048A3F4:
	x4 = 0x0000000000000000
	goto l000000000048A2F4
	// succ:  l000000000048A2F4
uconvert_exit:


// falarm
// Return size: 0
void falarm()
falarm_entry:
	// succ:  l000000000048A3FC
l000000000048A3FC:
	sp = fp
	sp = sp + -80
	Mem0[sp:word64] = x29
	sp = sp + 8
	Mem0[sp:word64] = x30
	x29 = x31 + 0x0000000000000000
	w4 = w0
	w3 = w1
	w0 = 0x00000000
	x1 = x29 + 0x0000000000000030
	x2 = x29 + 0x0000000000000010
	Mem0[x29 + 48:word64] = 0x0000000000000000
	Mem0[x29 + 56:word64] = 0x0000000000000000
	Mem0[x29 + 64:word64] = x4
	Mem0[x29 + 72:word64] = x3
	call setitimer (retsize: 0;)
	w1 = 0xFFFFFFFF
	branch (w0 & 0x00000000) == 0x00000000 l000000000048A444
	// succ:  l000000000048A434 l000000000048A444
l000000000048A434:
	x0 = Mem0[x29 + 40:word64]
	x1 = Mem0[x29 + 32:word64]
	branch x0 == 0x0000000000000000 l000000000048A444
	// succ:  l000000000048A440 l000000000048A444
l000000000048A440:
	x1 = x1 + 0x0000000000000001
	// succ:  l000000000048A444
l000000000048A444:
	w0 = w1
	x29 = Mem0[sp:word64]
	sp = sp + 8
	x30 = Mem0[sp:word64]
	sp = sp + 80
	return
	// succ:  falarm_exit
falarm_exit:


// fsleep
// Return size: 0
void fsleep()
fsleep_entry:
	// succ:  l000000000048A450
l000000000048A450:
	sp = fp
	sp = sp + -32
	Mem0[sp:word64] = x29
	sp = sp + 8
	Mem0[sp:word64] = x30
	x29 = x31 + 0x0000000000000000
	w5 = w1
	x1 = 0x0000000000000000
	w6 = w0
	x4 = x29 + 0x0000000000000010
	x2 = x1
	x3 = x1
	w0 = 0x00000000
	Mem0[x29 + 16:word64] = x6
	Mem0[x29 + 24:word64] = x5
	call select (retsize: 0;)
	x29 = Mem0[sp:word64]
	sp = sp + 8
	x30 = Mem0[sp:word64]
	sp = sp + 32
	return
	// succ:  fsleep_exit
fsleep_exit:


// sh_modcase
// Return size: 0
void sh_modcase()
sh_modcase_entry:
	// succ:  l000000000048A488
l000000000048A488:
	sp = fp
	sp = sp + -176
	Mem0[sp:word64] = x29
	sp = sp + 8
	Mem0[sp:word64] = x30
	x29 = x31 + 0x0000000000000000
	v8 = sp + 48
	Mem0[v8:word64] = x23
	v8 = v8 + 8
	Mem0[v8:word64] = x24
	v11 = sp + 64
	Mem0[v11:word64] = x25
	v11 = v11 + 8
	Mem0[v11:word64] = x26
	v14 = sp + 80
	Mem0[v14:word64] = x27
	v14 = v14 + 8
	Mem0[v14:word64] = x28
	v17 = sp + 16
	Mem0[v17:word64] = x19
	v17 = v17 + 8
	Mem0[v17:word64] = x20
	v20 = sp + 32
	Mem0[v20:word64] = x21
	v20 = v20 + 8
	Mem0[v20:word64] = x22
	x28 = x0
	x25 = x1
	w23 = w2
	branch x0 == 0x0000000000000000 l000000000048A4BC
	// succ:  l000000000048A4B4 l000000000048A4BC
l000000000048A4B4:
	v26 = Mem0[x0:byte]
	w1 = (word32) v26
	branch w1 != 0x00000000 l000000000048A4F0
	// succ:  l000000000048A4BC l000000000048A4F0
l000000000048A4BC:
	x1 = 0x00000000004C2000
	x1 = x1 + 0xFFFFFFFFFFFFFCA0
	w2 = 0x00000074
	x0 = 0x0000000000000001
	call sh_xmalloc (retsize: 0;)
	Mem0[x0:byte] = 0x00
	v27 = sp + 16
	x19 = Mem0[v27:word64]
	v27 = v27 + 8
	x20 = Mem0[v27:word64]
	v28 = sp + 32
	x21 = Mem0[v28:word64]
	v28 = v28 + 8
	x22 = Mem0[v28:word64]
	v29 = sp + 48
	x23 = Mem0[v29:word64]
	v29 = v29 + 8
	x24 = Mem0[v29:word64]
	v30 = sp + 64
	x25 = Mem0[v30:word64]
	v30 = v30 + 8
	x26 = Mem0[v30:word64]
	v31 = sp + 80
	x27 = Mem0[v31:word64]
	v31 = v31 + 8
	x28 = Mem0[v31:word64]
	x29 = Mem0[sp:word64]
	sp = sp + 8
	x30 = Mem0[sp:word64]
	sp = sp + 176
	return
	// succ:  sh_modcase_exit
l000000000048A4F0:
	Mem0[x29 + 128:word64] = 0x0000000000000000
	strlen(x0)
	sp = sp + 0xFFFFFFFFFFFFFFF8
	x3 = 0x00000000004C2000
	x24 = x0
	w0 = w0 + 0x00000001
	x1 = x3 + 0xFFFFFFFFFFFFFCA0
	w2 = 0x00000080
sh_modcase_exit:


// input_avail
// Return size: 0
void input_avail()
input_avail_entry:
	// succ:  l000000000048AAFC
l000000000048AAFC:
	sp = fp
	sp = sp + -320
	Mem0[sp:word64] = x29
	sp = sp + 8
	Mem0[sp:word64] = x30
	x29 = x31 + 0x0000000000000000
	v8 = sp + 16
	Mem0[v8:word64] = x19
	v8 = v8 + 8
	Mem0[v8:word64] = x20
	v11 = sp + 32
	Mem0[v11:word64] = x21
	v11 = v11 + 8
	Mem0[v11:word64] = x22
	w20 = w0
	branch (w20 & 0x00000000) == 0x00000000 l000000000048ABBC
	// succ:  l000000000048AB14 l000000000048ABBC
l000000000048AB14:
	x19 = x29 + 0x00000000000000B0
	x2 = x19
	x3 = x19 + 0x0000000000000080
	// succ:  l000000000048AB20
l000000000048AB20:
	Mem0[x2:word64] = 0x0000000000000000
	x2 = x2 + 8
	x31 = x2 - x3
	NZCV = cond(x31)
	branch Test(NE,Z) l000000000048AB20
	// succ:  l000000000048AB2C l000000000048AB20
l000000000048AB2C:
	x2 = x29 + 0x0000000000000030
	x3 = x29 + 0x00000000000000B0
	// succ:  l000000000048AB34
l000000000048AB34:
	Mem0[x2:word64] = 0x0000000000000000
	x2 = x2 + 8
	x31 = x2 - x3
	NZCV = cond(x31)
	branch Test(NE,Z) l000000000048AB34
	// succ:  l000000000048AB40 l000000000048AB34
l000000000048AB40:
l000000000048ABAC:
	v18 = sp + 16
	x19 = Mem0[v18:word64]
	v18 = v18 + 8
	x20 = Mem0[v18:word64]
	v19 = sp + 32
	x21 = Mem0[v19:word64]
	v19 = v19 + 8
	x22 = Mem0[v19:word64]
	x29 = Mem0[sp:word64]
	sp = sp + 8
	x30 = Mem0[sp:word64]
	sp = sp + 320
	return
	// succ:  input_avail_exit
l000000000048ABBC:
	w0 = 0xFFFFFFFF
	goto l000000000048ABAC
	// succ:  l000000000048ABAC
input_avail_exit:


// fnx_tofs
// Return size: 0
void fnx_tofs()
fnx_tofs_entry:
	// succ:  l000000000048ABC4
l000000000048ABC4:
	sp = fp
	return
	// succ:  fnx_tofs_exit
fnx_tofs_exit:


// fnx_fromfs
// Return size: 0
void fnx_fromfs()
fnx_fromfs_entry:
	// succ:  l000000000048ABC8
l000000000048ABC8:
	sp = fp
	return
	// succ:  fnx_fromfs_exit
fnx_fromfs_exit:


// u32tochar
// Return size: 0
void u32tochar()
u32tochar_entry:
	// succ:  l000000000048ABCC
l000000000048ABCC:
	sp = fp
	w2 = w0
	x31 = x2 - 0x00000000000000FF
	NZCV = cond(x31)
	branch Test(ULE,ZC) l000000000048AC00
	// succ:  l000000000048ABD8 l000000000048AC00
l000000000048ABD8:
	x3 = 0xFFFFFFFFFFFFFFFF
	x31 = x2 - x3
	NZCV = cond(x31)
	branch Test(UGT,ZC) l000000000048AC14
	// succ:  l000000000048ABE4 l000000000048AC14
l000000000048ABE4:
l000000000048AC00:
	x3 = 0x0000000000000001
	Mem0[x1:byte] = (byte) w0
	Mem0[x1 + x3:byte] = 0x00
	w0 = w3
	return
	// succ:  u32tochar_exit
l000000000048AC14:
u32tochar_exit:


// u32toutf8
// Return size: 0
void u32toutf8()
u32toutf8_entry:
	// succ:  l000000000048AC40
l000000000048AC40:
	sp = fp
	w31 = w0 - 0x0000007F
	NZCV = cond(w31)
	branch Test(ULE,ZC) l000000000048AC78
	// succ:  l000000000048AC48 l000000000048AC78
l000000000048AC48:
	w31 = w0 - 0x000007FF
	NZCV = cond(w31)
	branch Test(UGT,ZC) l000000000048AC8C
	// succ:  l000000000048AC50 l000000000048AC8C
l000000000048AC50:
l000000000048AC78:
	x2 = 0x0000000000000001
	Mem0[x1:byte] = (byte) w0
	Mem0[x1 + x2:byte] = 0x00
	w0 = w2
	return
	// succ:  u32toutf8_exit
l000000000048AC8C:
u32toutf8_exit:


// u32cconv
// Return size: 0
void u32cconv()
u32cconv_entry:
	// succ:  l000000000048ACC0
l000000000048ACC0:
	sp = fp
	x2 = x0
	x0 = x1
	w1 = w2
	call wctomb (retsize: 0;)
	return
	// succ:  u32cconv_exit
u32cconv_exit:


// mbstrlen
// Return size: 0
void mbstrlen()
mbstrlen_entry:
	// succ:  l000000000048ACD0
l000000000048ACD0:
	sp = fp
	sp = sp + -64
	Mem0[sp:word64] = x29
	sp = sp + 8
	Mem0[sp:word64] = x30
	x29 = x31 + 0x0000000000000000
	v8 = sp + 16
	Mem0[v8:word64] = x19
	v8 = v8 + 8
	Mem0[v8:word64] = x20
	v11 = sp + 32
	Mem0[v11:word64] = x21
	v11 = v11 + 8
	Mem0[v11:word64] = x22
	v14 = Mem0[x0:byte]
	w2 = (word32) v14
	x22 = 0x0000000000000000
	Mem0[x29 + 48:word64] = 0x0000000000000000
	x19 = x0
	x20 = x22
	branch w2 == 0x00000000 l000000000048AD70
	// succ:  l000000000048ACF8 l000000000048AD70
l000000000048ACF8:
	x21 = 0x00000000004C2000
	x21 = x21 + 0xFFFFFFFFFFFFFCC0
	// succ:  l000000000048AD14
l000000000048AD14:
l000000000048AD70:
	x0 = x20
	v15 = sp + 32
	x21 = Mem0[v15:word64]
	v15 = v15 + 8
	x22 = Mem0[v15:word64]
	v16 = sp + 16
	x19 = Mem0[v16:word64]
	v16 = v16 + 8
	x20 = Mem0[v16:word64]
	x29 = Mem0[sp:word64]
	sp = sp + 8
	x30 = Mem0[sp:word64]
	sp = sp + 64
	return
	// succ:  mbstrlen_exit
mbstrlen_exit:


// mbsmbchar
// Return size: 0
void mbsmbchar()
mbsmbchar_entry:
	// succ:  l000000000048AD84
l000000000048AD84:
	sp = fp
	sp = sp + -48
	Mem0[sp:word64] = x29
	sp = sp + 8
	Mem0[sp:word64] = x30
	x29 = x31 + 0x0000000000000000
	v8 = sp + 16
	Mem0[v8:word64] = x19
	v8 = v8 + 8
	Mem0[v8:word64] = x20
	v11 = Mem0[x0:byte]
	w2 = (word32) v11
	x20 = 0x00000000004C2000
	Mem0[x29 + 32:word64] = 0x0000000000000000
	x19 = x0
	x20 = x20 + 0xFFFFFFFFFFFFFCC0
	branch w2 != 0x00000000 l000000000048ADB4
	// succ:  l000000000048ADA8 l000000000048ADB4
l000000000048ADA8:
	goto l000000000048AE08
	// succ:  l000000000048AE08
l000000000048ADB4:
l000000000048AE08:
	x0 = 0x0000000000000000
	v12 = sp + 16
	x19 = Mem0[v12:word64]
	v12 = v12 + 8
	x20 = Mem0[v12:word64]
	x29 = Mem0[sp:word64]
	sp = sp + 8
	x30 = Mem0[sp:word64]
	sp = sp + 48
	return
	// succ:  mbsmbchar_exit
mbsmbchar_exit:


// mbschr
// Return size: 0
void mbschr()
mbschr_entry:
	// succ:  l000000000048AE18
l000000000048AE18:
	sp = fp
	sp = sp + -64
	Mem0[sp:word64] = x29
	sp = sp + 8
	Mem0[sp:word64] = x30
	x29 = x31 + 0x0000000000000000
	Mem0[sp + 32:word64] = x21
	w21 = w1
mbschr_exit:


// zwrite
// Return size: 0
void zwrite()
zwrite_entry:
	// succ:  l000000000048AEE8
l000000000048AEE8:
	sp = fp
	sp = sp + -64
	Mem0[sp:word64] = x29
	sp = sp + 8
	Mem0[sp:word64] = x30
	x29 = x31 + 0x0000000000000000
	v8 = sp + 16
	Mem0[v8:word64] = x19
	v8 = v8 + 8
	Mem0[v8:word64] = x20
	v11 = sp + 32
	Mem0[v11:word64] = x21
	v11 = v11 + 8
	Mem0[v11:word64] = x22
	v14 = sp + 48
	Mem0[v14:word64] = x23
	v14 = v14 + 8
	Mem0[v14:word64] = x24
	w19 = w2
	x24 = x2
	w22 = w0
	x20 = x1
	w23 = 0x00000000
zwrite_exit:


// fn000000000048AFC0
// Return size: 0
void fn000000000048AFC0()
fn000000000048AFC0_entry:
	// succ:  l000000000048AFC0
l000000000048AFC0:
	sp = fp
	sp = sp + -32
	Mem0[sp:word64] = x29
	sp = sp + 8
	Mem0[sp:word64] = x30
	x29 = x31 + 0x0000000000000000
	Mem0[sp + 16:word64] = x19
	x19 = 0x00000000004E1000
	x19 = x19 + 0xFFFFFFFFFFFFFC60
	w31 = w0 - 0x0000001B
	NZCV = cond(w31)
	w0 = Mem0[x19:word32]
	branch Test(EQ,Z) l000000000048B004
	// succ:  l000000000048AFE0 l000000000048B004
l000000000048AFE0:
	w0 = w0 | 0x00000040
	Mem0[x19:word32] = w0
	call rl_read_key (retsize: 0;)
	w1 = Mem0[x19:word32]
	w1 = w1 & 0xFFFFFFBF
	Mem0[x19:word32] = w1
	x19 = Mem0[sp + 16:word64]
	x29 = Mem0[sp:word64]
	sp = sp + 8
	x30 = Mem0[sp:word64]
	sp = sp + 32
	return
	// succ:  fn000000000048AFC0_exit
l000000000048B004:
	w1 = 0x00000050
	w0 = w0 | w1
	Mem0[x19:word32] = w0
	call rl_read_key (retsize: 0;)
	w1 = Mem0[x19:word32]
	w2 = 0xFFFFFFAF
	w1 = w1 & w2
	Mem0[x19:word32] = w1
	x19 = Mem0[sp + 16:word64]
	x29 = Mem0[sp:word64]
	sp = sp + 8
	x30 = Mem0[sp:word64]
	sp = sp + 32
	return
	// succ:  fn000000000048AFC0_exit
fn000000000048AFC0_exit:


// fn000000000048B030
// Return size: 0
void fn000000000048B030()
fn000000000048B030_entry:
	// succ:  l000000000048B030
l000000000048B030:
	sp = fp
	sp = sp + -80
	Mem0[sp:word64] = x29
	sp = sp + 8
	Mem0[sp:word64] = x30
	x29 = x31 + 0x0000000000000000
	v8 = sp + 16
	Mem0[v8:word64] = x19
	v8 = v8 + 8
	Mem0[v8:word64] = x20
	x19 = 0x00000000004D9000
	v11 = sp + 64
	Mem0[v11:word64] = x25
	v11 = v11 + 8
	Mem0[v11:word64] = x26
	x19 = x19 + 0x00000000000004B0
	x25 = 0x00000000004A4000
	x26 = Mem0[x19:word64]
	x25 = x25 + 0x000000000000024C
	Mem0[x19:word64] = x0
	x0 = 0x00000000004C2000
	x1 = x25
	x0 = x0 + 0xFFFFFFFFFFFFFCE0
	v16 = sp + 32
	Mem0[v16:word64] = x21
	v16 = v16 + 8
	Mem0[v16:word64] = x22
	v19 = sp + 48
	Mem0[v19:word64] = x23
	v19 = v19 + 8
	Mem0[v19:word64] = x24
	call rl_bind_keyseq_if_unbound (retsize: 0;)
	x24 = 0x00000000004A4000
	x24 = x24 + 0x0000000000000330
	x0 = 0x00000000004C2000
	x1 = x24
	x0 = x0 + 0xFFFFFFFFFFFFFCE8
	call rl_bind_keyseq_if_unbound (retsize: 0;)
	x23 = 0x00000000004A1000
	x23 = x23 + 0xFFFFFFFFFFFFFF00
	x0 = 0x00000000004C2000
	x1 = x23
	x0 = x0 + 0xFFFFFFFFFFFFFCF0
	call rl_bind_keyseq_if_unbound (retsize: 0;)
	x22 = 0x00000000004A1000
	x22 = x22 + 0xFFFFFFFFFFFFFE24
	x0 = 0x00000000004C2000
	x1 = x22
	x0 = x0 + 0xFFFFFFFFFFFFFCF8
	call rl_bind_keyseq_if_unbound (retsize: 0;)
	x21 = 0x00000000004A1000
	x21 = x21 + 0xFFFFFFFFFFFFFFCC
	x0 = 0x00000000004C2000
	x1 = x21
	x0 = x0 + 0xFFFFFFFFFFFFFD00
	call rl_bind_keyseq_if_unbound (retsize: 0;)
	x20 = 0x00000000004A1000
	x20 = x20 + 0xFFFFFFFFFFFFFFDC
	x0 = 0x00000000004C2000
	x1 = x20
	x0 = x0 + 0xFFFFFFFFFFFFFD08
	call rl_bind_keyseq_if_unbound (retsize: 0;)
	x0 = 0x00000000004C2000
	x1 = x25
	x0 = x0 + 0xFFFFFFFFFFFFFD10
	call rl_bind_keyseq_if_unbound (retsize: 0;)
	x0 = 0x00000000004C2000
	x1 = x24
	x0 = x0 + 0xFFFFFFFFFFFFFD18
	call rl_bind_keyseq_if_unbound (retsize: 0;)
	x0 = 0x00000000004C2000
	x1 = x23
	x0 = x0 + 0xFFFFFFFFFFFFFD20
	call rl_bind_keyseq_if_unbound (retsize: 0;)
	x0 = 0x00000000004C2000
	x1 = x22
	x0 = x0 + 0xFFFFFFFFFFFFFD28
	call rl_bind_keyseq_if_unbound (retsize: 0;)
	x0 = 0x00000000004C2000
	x1 = x21
	x0 = x0 + 0xFFFFFFFFFFFFFD30
	call rl_bind_keyseq_if_unbound (retsize: 0;)
	x0 = 0x00000000004C2000
	x1 = x20
	x0 = x0 + 0xFFFFFFFFFFFFFD38
	call rl_bind_keyseq_if_unbound (retsize: 0;)
	Mem0[x19:word64] = x26
	v20 = sp + 32
	x21 = Mem0[v20:word64]
	v20 = v20 + 8
	x22 = Mem0[v20:word64]
	v21 = sp + 16
	x19 = Mem0[v21:word64]
	v21 = v21 + 8
	x20 = Mem0[v21:word64]
	v22 = sp + 48
	x23 = Mem0[v22:word64]
	v22 = v22 + 8
	x24 = Mem0[v22:word64]
	v23 = sp + 64
	x25 = Mem0[v23:word64]
	v23 = v23 + 8
	x26 = Mem0[v23:word64]
	x29 = Mem0[sp:word64]
	sp = sp + 8
	x30 = Mem0[sp:word64]
	sp = sp + 80
	return
	// succ:  fn000000000048B030_exit
fn000000000048B030_exit:


// rl_set_prompt
// Return size: 0
void rl_set_prompt()
rl_set_prompt_entry:
	// succ:  l000000000048B164
l000000000048B164:
	sp = fp
	sp = sp + -32
	Mem0[sp:word64] = x29
	sp = sp + 8
	Mem0[sp:word64] = x30
	x29 = x31 + 0x0000000000000000
	v8 = sp + 16
	Mem0[v8:word64] = x19
	v8 = v8 + 8
	Mem0[v8:word64] = x20
	x19 = 0x00000000004E1000
	x1 = x19 + 0xFFFFFFFFFFFFFC60
	x1 = Mem0[x1 + 8:word64]
	x20 = x0
	branch x1 == 0x0000000000000000 l000000000048B18C
	// succ:  l000000000048B184 l000000000048B18C
l000000000048B184:
	x0 = x1
	call free (retsize: 0;)
	// succ:  l000000000048B18C
l000000000048B18C:
	branch x20 == 0x0000000000000000 l000000000048B1E0
	// succ:  l000000000048B190 l000000000048B1E0
l000000000048B190:
	x0 = x20
	strlen(x0)
	sp = sp + 0xFFFFFFFFFFFFFFF8
	x0 = x0 + 0x0000000000000001
	call xmalloc (retsize: 0;)
	x1 = x20
	strcpy(x0, x1)
	sp = sp + 0xFFFFFFFFFFFFFFF8
	x2 = x19 + 0xFFFFFFFFFFFFFC60
	x1 = x0
	Mem0[x2 + 8:word64] = x1
	x2 = x0
	branch x0 == 0x0000000000000000 l000000000048B1E8
	// succ:  l000000000048B1BC l000000000048B1E8
l000000000048B1BC:
	x1 = 0x00000000004E2000
	Mem0[x1 + 344:word64] = x2
	x19 = x19 + 0xFFFFFFFFFFFFFC60
	call rl_expand_prompt (retsize: 0;)
	Mem0[x19 + 16:word32] = w0
	w0 = 0x00000000
	v13 = sp + 16
	x19 = Mem0[v13:word64]
	v13 = v13 + 8
	x20 = Mem0[v13:word64]
	x29 = Mem0[sp:word64]
	sp = sp + 8
	x30 = Mem0[sp:word64]
	sp = sp + 32
	return
	// succ:  rl_set_prompt_exit
l000000000048B1E0:
	x0 = x19 + 0xFFFFFFFFFFFFFC60
	Mem0[x0 + 8:word64] = x20
	// succ:  l000000000048B1E8
l000000000048B1E8:
	x2 = 0x00000000004AC000
	x0 = 0x0000000000000000
	x2 = x2 + 0x0000000000000460
	goto l000000000048B1BC
	// succ:  l000000000048B1BC
rl_set_prompt_exit:


// readline_internal_setup
// Return size: 0
void readline_internal_setup()
readline_internal_setup_entry:
	// succ:  l000000000048B1F8
l000000000048B1F8:
	sp = fp
	sp = sp + -48
	Mem0[sp:word64] = x29
	sp = sp + 8
	Mem0[sp:word64] = x30
	x29 = x31 + 0x0000000000000000
	v8 = sp + 16
	Mem0[v8:word64] = x19
	v8 = v8 + 8
	Mem0[v8:word64] = x20
	x19 = 0x00000000004E1000
	x0 = x19 + 0xFFFFFFFFFFFFFC60
	x3 = Mem0[x0 + 24:word64]
	x1 = Mem0[x0 + 32:word64]
	Mem0[sp + 32:word64] = x21
	x2 = 0x00000000004E4000
	x21 = 0x00000000004E4000
	x0 = Mem0[x0 + 40:word64]
	Mem0[x2 + 128:word64] = x3
	Mem0[x21 + 160:word64] = x1
	branch x0 == 0x0000000000000000 l000000000048B234
	// succ:  l000000000048B230 l000000000048B234
l000000000048B230:
	call x0 (retsize: 0;)
	// succ:  l000000000048B234
l000000000048B234:
	x1 = x19 + 0xFFFFFFFFFFFFFC60
	w0 = Mem0[x1 + 48:word32]
	x20 = 0x00000000004DE000
	branch w0 != 0x00000000 l000000000048B258
	// succ:  l000000000048B244 l000000000048B258
l000000000048B244:
	x0 = Mem0[x20 + 1488:word64]
	x2 = 0x000000000049B000
	x2 = x2 + 0x0000000000000544
	x31 = x0 - x2
	NZCV = cond(x31)
	branch Test(EQ,Z) l000000000048B2E0
	// succ:  l000000000048B258 l000000000048B2E0
l000000000048B258:
	x0 = x19 + 0xFFFFFFFFFFFFFC60
	x1 = Mem0[x0 + 8:word64]
	branch x1 == 0x0000000000000000 l000000000048B26C
	// succ:  l000000000048B264 l000000000048B26C
l000000000048B264:
	w0 = Mem0[x0 + 52:word32]
	branch w0 != 0x00000000 l000000000048B2B4
	// succ:  l000000000048B26C l000000000048B2B4
l000000000048B26C:
	call rl_on_new_line (retsize: 0;)
	// succ:  l000000000048B270
l000000000048B270:
	x0 = Mem0[x20 + 1488:word64]
	call x0 (retsize: 0;)
	// succ:  l000000000048B278
l000000000048B278:
	x0 = 0x00000000004D9000
	x0 = x0 + 0x00000000000004B0
	w0 = Mem0[x0 + 8:word32]
	branch w0 == 0x00000000 l000000000048B2D0
	// succ:  l000000000048B288 l000000000048B2D0
l000000000048B288:
	x19 = x19 + 0xFFFFFFFFFFFFFC60
	x0 = Mem0[x19 + 56:word64]
	branch x0 == 0x0000000000000000 l000000000048B298
	// succ:  l000000000048B294 l000000000048B298
l000000000048B294:
	call x0 (retsize: 0;)
	// succ:  l000000000048B298
l000000000048B298:
	x0 = 0x00000000004E2000
	w1 = Mem0[x0 + 2672:word32]
	branch w1 != 0x00000000 l000000000048B2BC
	// succ:  l000000000048B2A4 l000000000048B2BC
l000000000048B2A4:
	v18 = sp + 16
	x19 = Mem0[v18:word64]
	v18 = v18 + 8
	x20 = Mem0[v18:word64]
	x21 = Mem0[sp + 32:word64]
	x29 = Mem0[sp:word64]
	sp = sp + 8
	x30 = Mem0[sp:word64]
	sp = sp + 48
	return
	// succ:  readline_internal_setup_exit
l000000000048B2B4:
	call rl_on_new_line_with_prompt (retsize: 0;)
	goto l000000000048B270
	// succ:  l000000000048B270
l000000000048B2BC:
	v19 = sp + 16
	x19 = Mem0[v19:word64]
	v19 = v19 + 8
	x20 = Mem0[v19:word64]
	x21 = Mem0[sp + 32:word64]
	w0 = Mem0[x0 + 2672:word32]
	x29 = Mem0[sp:word64]
	sp = sp + 8
	x30 = Mem0[sp:word64]
	sp = sp + 48
	// succ:  l000000000048B2CC_thunk__rl_signal_handler
l000000000048B2CC_thunk__rl_signal_handler:
	call _rl_signal_handler (retsize: 0;)
	return
	// succ:  readline_internal_setup_exit
l000000000048B2D0:
	w1 = 0x00000069
	w0 = 0x00000001
	call rl_vi_insert_mode (retsize: 0;)
	goto l000000000048B288
	// succ:  l000000000048B288
l000000000048B2E0:
	x0 = Mem0[x1 + 8:word64]
	branch x0 == 0x0000000000000000 l000000000048B278
	// succ:  l000000000048B2E8 l000000000048B278
l000000000048B2E8:
	w1 = Mem0[x1 + 52:word32]
	branch w1 != 0x00000000 l000000000048B278
	// succ:  l000000000048B2F0 l000000000048B278
l000000000048B2F0:
	call _rl_strip_prompt (retsize: 0;)
	x1 = Mem0[x21 + 160:word64]
	x20 = x0
	fputs(x0, x1)
	sp = sp + 0xFFFFFFFFFFFFFFF8
	x0 = Mem0[x21 + 160:word64]
	fflush(x0)
	sp = sp + 0xFFFFFFFFFFFFFFF8
	x0 = x20
	call xfree (retsize: 0;)
	goto l000000000048B278
	// succ:  l000000000048B278
readline_internal_setup_exit:


// readline_internal_teardown
// Return size: 0
void readline_internal_teardown()
readline_internal_teardown_entry:
	// succ:  l000000000048B314
l000000000048B314:
	sp = fp
	sp = sp + -64
	Mem0[sp:word64] = x29
	sp = sp + 8
	Mem0[sp:word64] = x30
	x29 = x31 + 0x0000000000000000
	x1 = 0x00000000004E2000
	w2 = Mem0[x1 + 2672:word32]
	v10 = sp + 32
	Mem0[v10:word64] = x21
	v10 = v10 + 8
	Mem0[v10:word64] = x22
	v13 = sp + 16
	Mem0[v13:word64] = x19
	v13 = v13 + 8
	Mem0[v13:word64] = x20
	Mem0[sp + 48:word64] = x23
	w22 = w0
	branch w2 != 0x00000000 l000000000048B3FC
	// succ:  l000000000048B338 l000000000048B3FC
l000000000048B338:
	call current_history (retsize: 0;)
	x21 = 0x00000000004E2000
	x19 = 0x00000000004E1000
	branch x0 == 0x0000000000000000 l000000000048B3A8
	// succ:  l000000000048B348 l000000000048B3A8
l000000000048B348:
	x0 = Mem0[x21 + 2728:word64]
	x19 = 0x00000000004E1000
	branch x0 == 0x0000000000000000 l000000000048B3A8
	// succ:  l000000000048B354 l000000000048B3A8
l000000000048B354:
	x20 = x19 + 0xFFFFFFFFFFFFFC60
	x0 = Mem0[x20 + 64:word64]
	strlen(x0)
	sp = sp + 0xFFFFFFFFFFFFFFF8
	x0 = x0 + 0x0000000000000001
	call xmalloc (retsize: 0;)
	x1 = Mem0[x20 + 64:word64]
	strcpy(x0, x1)
	sp = sp + 0xFFFFFFFFFFFFFFF8
	x23 = x0
	w1 = 0x00000000
	w0 = 0x00000001
	call rl_revert_line (retsize: 0;)
	call where_history (retsize: 0;)
	x1 = Mem0[x20 + 64:word64]
	x2 = 0x0000000000000000
	call replace_history_entry (retsize: 0;)
	call _rl_free_history_entry (retsize: 0;)
	x0 = Mem0[x20 + 64:word64]
	x1 = x23
	strcpy(x0, x1)
	sp = sp + 0xFFFFFFFFFFFFFFF8
	x0 = x23
	call xfree (retsize: 0;)
	// succ:  l000000000048B3A8
l000000000048B3A8:
	x0 = x19 + 0xFFFFFFFFFFFFFC60
	w0 = Mem0[x0 + 72:word32]
	branch w0 != 0x00000000 l000000000048B408
	// succ:  l000000000048B3B4 l000000000048B408
l000000000048B3B4:
	x0 = Mem0[x21 + 2728:word64]
	branch x0 == 0x0000000000000000 l000000000048B3C0
	// succ:  l000000000048B3BC l000000000048B3C0
l000000000048B3BC:
	call rl_free_undo_list (retsize: 0;)
	// succ:  l000000000048B3C0
l000000000048B3C0:
	w0 = 0x00000001
	w1 = 0x00000000
	call _rl_set_insert_mode (retsize: 0;)
	branch w22 != 0x00000000 l000000000048B410
	// succ:  l000000000048B3D0 l000000000048B410
l000000000048B3D0:
	x19 = x19 + 0xFFFFFFFFFFFFFC60
	x0 = Mem0[x19 + 64:word64]
	strlen(x0)
	sp = sp + 0xFFFFFFFFFFFFFFF8
	x0 = x0 + 0x0000000000000001
	call xmalloc (retsize: 0;)
	x1 = Mem0[x19 + 64:word64]
	v20 = sp + 32
	x21 = Mem0[v20:word64]
	v20 = v20 + 8
	x22 = Mem0[v20:word64]
	v21 = sp + 16
	x19 = Mem0[v21:word64]
	v21 = v21 + 8
	x20 = Mem0[v21:word64]
	x23 = Mem0[sp + 48:word64]
	x29 = Mem0[sp:word64]
	sp = sp + 8
	x30 = Mem0[sp:word64]
	sp = sp + 64
	strcpy(x0, x1)
	return
	// succ:  readline_internal_teardown_exit
l000000000048B3FC:
	w0 = Mem0[x1 + 2672:word32]
	call _rl_signal_handler (retsize: 0;)
	goto l000000000048B338
	// succ:  l000000000048B338
l000000000048B408:
	call _rl_revert_all_lines (retsize: 0;)
	goto l000000000048B3B4
	// succ:  l000000000048B3B4
l000000000048B410:
	x0 = 0x0000000000000000
	v22 = sp + 16
	x19 = Mem0[v22:word64]
	v22 = v22 + 8
	x20 = Mem0[v22:word64]
	v23 = sp + 32
	x21 = Mem0[v23:word64]
	v23 = v23 + 8
	x22 = Mem0[v23:word64]
	x23 = Mem0[sp + 48:word64]
	x29 = Mem0[sp:word64]
	sp = sp + 8
	x30 = Mem0[sp:word64]
	sp = sp + 64
	return
	// succ:  readline_internal_teardown_exit
readline_internal_teardown_exit:


// _rl_internal_char_cleanup
// Return size: 0
void _rl_internal_char_cleanup()
_rl_internal_char_cleanup_entry:
	// succ:  l000000000048B428
l000000000048B428:
	sp = fp
	sp = sp + -32
	Mem0[sp:word64] = x29
	sp = sp + 8
	Mem0[sp:word64] = x30
	x29 = x31 + 0x0000000000000000
	x0 = 0x00000000004D9000
	x0 = x0 + 0x00000000000004B0
	w1 = Mem0[x0 + 8:word32]
	v10 = sp + 16
	Mem0[v10:word64] = x19
	v10 = v10 + 8
	Mem0[v10:word64] = x20
	branch w1 != 0x00000000 l000000000048B458
	// succ:  l000000000048B444 l000000000048B458
l000000000048B444:
	x1 = Mem0[x0:word64]
	x0 = 0x00000000004DA000
	x0 = x0 + 0x0000000000000510
	x31 = x1 - x0
	NZCV = cond(x31)
	branch Test(EQ,Z) l000000000048B518
	// succ:  l000000000048B458 l000000000048B518
l000000000048B458:
	x0 = 0x00000000004E3000
	w0 = Mem0[x0 + 3896:word32]
	branch w0 == 0x00000000 l000000000048B474
	// succ:  l000000000048B464 l000000000048B474
l000000000048B464:
	x1 = 0x00000000004E3000
	w1 = Mem0[x1 + 3900:word32]
	NZCV = cond(w0 - w1)
	branch Test(LE,ZCV) l000000000048B4D0
	// succ:  l000000000048B474 l000000000048B4D0
l000000000048B474:
	x19 = 0x00000000004E4000
	w20 = Mem0[x19 + 124:word32]
	branch w20 == 0x00000000 l000000000048B4B8
	// succ:  l000000000048B480 l000000000048B4B8
l000000000048B480:
	x0 = 0x00000000004E1000
	x0 = x0 + 0xFFFFFFFFFFFFFC60
	w1 = Mem0[x0 + 76:word32]
	branch w1 == 0x00000000 l000000000048B4AC
	// succ:  l000000000048B490 l000000000048B4AC
l000000000048B490:
	w1 = Mem0[x19 + 124:word32]
	branch w1 == 0x00000000 l000000000048B4AC
	// succ:  l000000000048B498 l000000000048B4AC
l000000000048B498:
	x1 = Mem0[x0 + 80:word64]
	x0 = 0x00000000004A2000
	x0 = x0 + 0xFFFFFFFFFFFFF93C
	x31 = x1 - x0
	NZCV = cond(x31)
	branch Test(EQ,Z) l000000000048B4F4
	// succ:  l000000000048B4AC l000000000048B4F4
l000000000048B4AC:
	v17 = sp + 16
	x19 = Mem0[v17:word64]
	v17 = v17 + 8
	x20 = Mem0[v17:word64]
	x29 = Mem0[sp:word64]
	sp = sp + 8
	x30 = Mem0[sp:word64]
	sp = sp + 32
	return
	// succ:  _rl_internal_char_cleanup_exit
l000000000048B4B8:
	x0 = 0x00000000004DE000
	x0 = Mem0[x0 + 1488:word64]
	call x0 (retsize: 0;)
	x0 = 0x00000000004E2000
	Mem0[x0 + 560:word32] = w20
	goto l000000000048B480
	// succ:  l000000000048B480
l000000000048B4D0:
	x0 = 0x00000000004DE000
	x0 = Mem0[x0 + 1488:word64]
	call x0 (retsize: 0;)
	x2 = 0x00000000004E2000
	w1 = 0x0000000A
	w0 = 0x00000001
	Mem0[x2 + 560:word32] = 0x00000000
	call rl_newline (retsize: 0;)
	goto l000000000048B474
	// succ:  l000000000048B474
l000000000048B4F4:
	x0 = 0x00000000004E4000
	w0 = Mem0[x0 + 136:word32]
	branch w0 != 0x00000000 l000000000048B4AC
	// succ:  l000000000048B500 l000000000048B4AC
l000000000048B500:
	x0 = 0x00000000004E3000
	w0 = Mem0[x0 + 3900:word32]
	branch w0 != 0x00000000 l000000000048B4AC
	// succ:  l000000000048B50C l000000000048B4AC
l000000000048B50C:
	v18 = sp + 16
	x19 = Mem0[v18:word64]
	v18 = v18 + 8
	x20 = Mem0[v18:word64]
	x29 = Mem0[sp:word64]
	sp = sp + 8
	x30 = Mem0[sp:word64]
	sp = sp + 32
	// succ:  l000000000048B514_thunk__rl_erase_entire_line
l000000000048B514_thunk__rl_erase_entire_line:
	call _rl_erase_entire_line (retsize: 0;)
	return
	// succ:  _rl_internal_char_cleanup_exit
l000000000048B518:
	call rl_vi_check (retsize: 0;)
	goto l000000000048B458
	// succ:  l000000000048B458
_rl_internal_char_cleanup_exit:


// _rl_init_line_state
// Return size: 0
void _rl_init_line_state()
_rl_init_line_state_entry:
	// succ:  l000000000048B520
l000000000048B520:
	sp = fp
	x2 = 0x00000000004E4000
	x1 = 0x00000000004E1000
	x1 = x1 + 0xFFFFFFFFFFFFFC60
	Mem0[x2 + 120:word32] = 0x00000000
	x2 = 0x00000000004E3000
	x0 = Mem0[x1 + 88:word64]
	Mem0[x2 + 3900:word32] = 0x00000000
	x2 = 0x00000000004E4000
	Mem0[x2 + 136:word32] = 0x00000000
	Mem0[x1 + 64:word64] = x0
	Mem0[x0:byte] = 0x00
	return
	// succ:  _rl_init_line_state_exit
_rl_init_line_state_exit:


// _rl_set_the_line
// Return size: 0
void _rl_set_the_line()
_rl_set_the_line_entry:
	// succ:  l000000000048B550
l000000000048B550:
	sp = fp
	x0 = 0x00000000004E1000
	x0 = x0 + 0xFFFFFFFFFFFFFC60
	x1 = Mem0[x0 + 88:word64]
	Mem0[x0 + 64:word64] = x1
	return
	// succ:  _rl_set_the_line_exit
_rl_set_the_line_exit:


// _rl_keyseq_cxt_alloc
// Return size: 0
void _rl_keyseq_cxt_alloc()
_rl_keyseq_cxt_alloc_entry:
	// succ:  l000000000048B564
l000000000048B564:
	sp = fp
	sp = sp + -16
	Mem0[sp:word64] = x29
	sp = sp + 8
	Mem0[sp:word64] = x30
	x29 = x31 + 0x0000000000000000
	x0 = 0x0000000000000038
	call xmalloc (retsize: 0;)
	x2 = 0x00000000004E1000
	x2 = x2 + 0xFFFFFFFFFFFFFC60
	x2 = Mem0[x2 + 96:word64]
	Mem0[x0 + 8:word32] = 0x00000000
	Mem0[x0 + 40:word64] = x2
	w2 = 0x0000002A
	Mem0[x0 + 4:word32] = 0x00000000
	Mem0[x0:word32] = 0x00000000
	Mem0[x0 + 32:word32] = 0x00000000
	Mem0[x0 + 48:word32] = w2
	x29 = Mem0[sp:word64]
	sp = sp + 8
	x30 = Mem0[sp:word64]
	sp = sp + 16
	return
	// succ:  _rl_keyseq_cxt_alloc_exit
_rl_keyseq_cxt_alloc_exit:


// _rl_keyseq_cxt_dispose
// Return size: 0
void _rl_keyseq_cxt_dispose()
_rl_keyseq_cxt_dispose_entry:
	// succ:  l000000000048B5A4
l000000000048B5A4:
	sp = fp
	// succ:  l000000000048B5A4_thunk_xfree
l000000000048B5A4_thunk_xfree:
	call xfree (retsize: 0;)
	return
	// succ:  _rl_keyseq_cxt_dispose_exit
_rl_keyseq_cxt_dispose_exit:


// _rl_keyseq_chain_dispose
// Return size: 0
void _rl_keyseq_chain_dispose()
_rl_keyseq_chain_dispose_entry:
	// succ:  l000000000048B5A8
l000000000048B5A8:
	sp = fp
	sp = sp + -32
	Mem0[sp:word64] = x29
	sp = sp + 8
	Mem0[sp:word64] = x30
	x29 = x31 + 0x0000000000000000
	Mem0[sp + 16:word64] = x19
	x19 = 0x00000000004E1000
	x19 = x19 + 0xFFFFFFFFFFFFFC60
	x0 = Mem0[x19 + 96:word64]
	branch x0 == 0x0000000000000000 l000000000048B5D8
	// succ:  l000000000048B5C4 l000000000048B5D8
l000000000048B5C4:
	x1 = Mem0[x0 + 40:word64]
	Mem0[x19 + 96:word64] = x1
	call xfree (retsize: 0;)
	x0 = Mem0[x19 + 96:word64]
	branch x0 != 0x0000000000000000 l000000000048B5C4
	// succ:  l000000000048B5D8 l000000000048B5C4
l000000000048B5D8:
	x19 = Mem0[sp + 16:word64]
	x29 = Mem0[sp:word64]
	sp = sp + 8
	x30 = Mem0[sp:word64]
	sp = sp + 32
	return
	// succ:  _rl_keyseq_chain_dispose_exit
_rl_keyseq_chain_dispose_exit:


// _rl_dispatch_subseq
// Return size: 0
void _rl_dispatch_subseq()
_rl_dispatch_subseq_entry:
	// succ:  l000000000048B5E4
l000000000048B5E4:
	sp = fp
	sp = sp + -80
	Mem0[sp:word64] = x29
	sp = sp + 8
	Mem0[sp:word64] = x30
	x29 = x31 + 0x0000000000000000
	v6 = sp + 16
	Mem0[v6:word64] = x19
	v6 = v6 + 8
	Mem0[v6:word64] = x20
	w19 = w0
	w0 = w0 - 0x00000080
	Mem0[sp + 64:word64] = x25
	v12 = sp + 32
	Mem0[v12:word64] = x21
	v12 = v12 + 8
	Mem0[v12:word64] = x22
	v15 = sp + 48
	Mem0[v15:word64] = x23
	v15 = v15 + 8
	Mem0[v15:word64] = x24
	w31 = w0 - 0x0000007F
	NZCV = cond(w31)
	x20 = x1
	w25 = w2
	branch Test(UGT,ZC) l000000000048B624
	// succ:  l000000000048B614 l000000000048B624
l000000000048B614:
	x23 = 0x00000000004D9000
	x23 = x23 + 0x00000000000004B0
	w0 = Mem0[x23 + 12:word32]
	branch w0 != 0x00000000 l000000000048B698
	// succ:  l000000000048B624 l000000000048B698
l000000000048B624:
	x22 = 0x00000000004E1000
	x0 = x22 + 0xFFFFFFFFFFFFFC60
	w0 = Mem0[x0:word32]
	branch (w0 & 0x00001000) == 0x00000000 l000000000048B6EC
	// succ:  l000000000048B634 l000000000048B6EC
l000000000048B634:
l000000000048B698:
	v25 = Mem0[x1 + 432:byte]
	w0 = (word32) v25
	w31 = w0 - 0x00000001
	NZCV = cond(w31)
	branch Test(NE,Z) l000000000048B894
	// succ:  l000000000048B6A4 l000000000048B894
l000000000048B6A4:
	x22 = 0x00000000004E1000
	x0 = x22 + 0xFFFFFFFFFFFFFC60
	w0 = Mem0[x0:word32]
	branch (w0 & 0x00001000) == 0x00000000 l000000000048B6BC
	// succ:  l000000000048B6B4 l000000000048B6BC
l000000000048B6B4:
	w0 = 0x0000001B
	call _rl_add_macro_char (retsize: 0;)
	// succ:  l000000000048B6BC
l000000000048B6BC:
	x22 = x22 + 0xFFFFFFFFFFFFFC60
	w0 = Mem0[x22 + 104:word32]
	x1 = Mem0[x20 + 440:word64]
	w2 = w0 + 0x00000002
	Mem0[x22 + 104:word32] = w2
	w0 = w19 & 0xFFFFFF7F
	v27 = sp + 16
	x19 = Mem0[v27:word64]
	v27 = v27 + 8
	x20 = Mem0[v27:word64]
	v28 = sp + 32
	x21 = Mem0[v28:word64]
	v28 = v28 + 8
	x22 = Mem0[v28:word64]
	v29 = sp + 48
	x23 = Mem0[v29:word64]
	v29 = v29 + 8
	x24 = Mem0[v29:word64]
	x25 = Mem0[sp + 64:word64]
	x29 = Mem0[sp:word64]
	sp = sp + 8
	x30 = Mem0[sp:word64]
	sp = sp + 80
	// succ:  l000000000048B6E8_thunk__rl_dispatch
l000000000048B6E8_thunk__rl_dispatch:
	call _rl_dispatch (retsize: 0;)
	return
	// succ:  _rl_dispatch_subseq_exit
l000000000048B6EC:
	w0 = w19
	call _rl_add_macro_char (retsize: 0;)
l000000000048B894:
	call rl_ding (retsize: 0;)
	w0 = 0x00000000
	v31 = sp + 16
	x19 = Mem0[v31:word64]
	v31 = v31 + 8
	x20 = Mem0[v31:word64]
	v32 = sp + 32
	x21 = Mem0[v32:word64]
	v32 = v32 + 8
	x22 = Mem0[v32:word64]
	v33 = sp + 48
	x23 = Mem0[v33:word64]
	v33 = v33 + 8
	x24 = Mem0[v33:word64]
	x25 = Mem0[sp + 64:word64]
	x29 = Mem0[sp:word64]
	sp = sp + 8
	x30 = Mem0[sp:word64]
	sp = sp + 80
	return
	// succ:  _rl_dispatch_subseq_exit
_rl_dispatch_subseq_exit:


// _rl_dispatch
// Return size: 0
void _rl_dispatch()
_rl_dispatch_entry:
	// succ:  l000000000048B9FC
l000000000048B9FC:
	sp = fp
	x3 = 0x00000000004E3000
	w2 = 0x00000000
	Mem0[x3 + 3880:word64] = x1
	// succ:  l000000000048BA08_thunk__rl_dispatch_subseq
l000000000048BA08_thunk__rl_dispatch_subseq:
	call _rl_dispatch_subseq (retsize: 0;)
	return
	// succ:  _rl_dispatch_exit
_rl_dispatch_exit:


// readline_internal_char
// Return size: 0
void readline_internal_char()
readline_internal_char_entry:
	// succ:  l000000000048BA0C
l000000000048BA0C:
	sp = fp
	sp = sp + -48
	Mem0[sp:word64] = x29
	sp = sp + 8
	Mem0[sp:word64] = x30
	x29 = x31 + 0x0000000000000000
	x2 = 0x00000000004E1000
	v9 = sp + 16
	Mem0[v9:word64] = x19
	v9 = v9 + 8
	Mem0[v9:word64] = x20
	x2 = x2 + 0xFFFFFFFFFFFFFC60
	w3 = 0xFFFFFFFF
	x0 = 0x00000000004E3000
	Mem0[x2 + 112:word32] = w3
	Mem0[x2 + 116:word32] = 0x00000000
	w2 = Mem0[x2 + 120:word32]
	x0 = x0 + 0xFFFFFFFFFFFFFF40
	w1 = 0x00000001
	Mem0[x29 + 32:word32] = w2
	call __sigsetjmp (retsize: 0;)
	branch w0 != 0x00000000 l000000000048BB6C
	// succ:  l000000000048BA48 l000000000048BB6C
l000000000048BA48:
	x19 = 0x00000000004E1000
	x19 = x19 + 0xFFFFFFFFFFFFFC60
	w20 = Mem0[x19 + 108:word32]
	branch w20 == 0x00000000 l000000000048BBA4
	// succ:  l000000000048BA58 l000000000048BBA4
l000000000048BA58:
	x19 = 0x00000000004E1000
	x19 = x19 + 0xFFFFFFFFFFFFFC60
	w0 = Mem0[x19:word32]
	w0 = w0 | 0x00000008
	Mem0[x19:word32] = w0
	call rl_read_key (retsize: 0;)
	w1 = Mem0[x19:word32]
	w31 = w0 + 0x00000002
	NZCV = cond(w31)
	w1 = w1 & 0xFFFFFFF7
	Mem0[x19:word32] = w1
	w3 = w0
	branch Test(EQ,Z) l000000000048BBE4
	// succ:  l000000000048BA88 l000000000048BBE4
l000000000048BA88:
	w31 = w0 + 0x00000001
	NZCV = cond(w31)
	branch Test(EQ,Z) l000000000048BBCC
	// succ:  l000000000048BA90 l000000000048BBCC
l000000000048BA90:
	x0 = 0x00000000004D9000
	x0 = x0 + 0x00000000000004B0
	w0 = Mem0[x0 + 24:word32]
	NZCV = cond(w3 - w0)
	branch Test(EQ,Z) l000000000048BB24
	// succ:  l000000000048BAA4 l000000000048BB24
l000000000048BAA4:
	w31 = w3 + 0x00000001
	NZCV = cond(w31)
	branch Test(EQ,Z) l000000000048BB38
	// succ:  l000000000048BAAC l000000000048BB38
l000000000048BAAC:
	x0 = 0x00000000004D9000
	x0 = x0 + 0x00000000000004B0
	x4 = Mem0[x0:word64]
	x5 = 0x00000000004E1000
	x5 = x5 + 0xFFFFFFFFFFFFFC60
l000000000048BB00:
	v21 = sp + 16
	x19 = Mem0[v21:word64]
	v21 = v21 + 8
	x20 = Mem0[v21:word64]
	x29 = Mem0[sp:word64]
	sp = sp + 8
	x30 = Mem0[sp:word64]
	sp = sp + 48
	return
	// succ:  readline_internal_char_exit
l000000000048BB24:
	x0 = 0x00000000004E1000
	x0 = x0 + 0xFFFFFFFFFFFFFC60
	w0 = Mem0[x0 + 112:word32]
	NZCV = cond(w0 - w3)
	branch Test(EQ,Z) l000000000048BAA4
	// succ:  l000000000048BB38 l000000000048BAA4
l000000000048BB38:
	x0 = 0x00000000004E3000
	w0 = Mem0[x0 + 3900:word32]
	branch w0 != 0x00000000 l000000000048BAAC
	// succ:  l000000000048BB44 l000000000048BAAC
l000000000048BB44:
	x2 = 0x00000000004E1000
	w1 = w1 | 0x01000000
	x2 = x2 + 0xFFFFFFFFFFFFFC60
	w0 = 0x00000001
	Mem0[x2:word32] = w1
	x1 = 0x00000000004E4000
	v23 = sp + 16
	x19 = Mem0[v23:word64]
	v23 = v23 + 8
	x20 = Mem0[v23:word64]
	Mem0[x1 + 124:word32] = w0
	x29 = Mem0[sp:word64]
	sp = sp + 8
	x30 = Mem0[sp:word64]
	sp = sp + 48
	return
	// succ:  readline_internal_char_exit
l000000000048BB6C:
	x0 = 0x00000000004DE000
	x0 = Mem0[x0 + 1488:word64]
	call x0 (retsize: 0;)
	x0 = 0x00000000004E1000
	x0 = x0 + 0xFFFFFFFFFFFFFC60
	w1 = Mem0[x0:word32]
	x0 = 0x00000000004E2000
	Mem0[x0 + 560:word32] = 0x00000000
	w0 = 0x00000000
	branch (w1 & 0x00000000) == 0x00000000 l000000000048BB00
	// succ:  l000000000048BB94 l000000000048BB00
l000000000048BB94:
	x19 = 0x00000000004E1000
	x19 = x19 + 0xFFFFFFFFFFFFFC60
	w20 = Mem0[x19 + 108:word32]
	branch w20 != 0x00000000 l000000000048BA58
	// succ:  l000000000048BBA4 l000000000048BA58
l000000000048BBA4:
	call _rl_reset_argument (retsize: 0;)
	Mem0[x19 + 104:word32] = w20
	goto l000000000048BA58
	// succ:  l000000000048BA58
l000000000048BBCC:
	x0 = 0x00000000004E3000
	w0 = Mem0[x0 + 3900:word32]
	NZCV = cond(w0 - w31)
	w0 = 0x0000000A
l000000000048BBE4:
	w1 = w1 | 0x01000000
	w0 = 0x00000001
	Mem0[x19:word32] = w1
	x1 = 0x00000000004E4000
	v24 = sp + 16
	x19 = Mem0[v24:word64]
	v24 = v24 + 8
	x20 = Mem0[v24:word64]
	Mem0[x1 + 124:word32] = w0
	x29 = Mem0[sp:word64]
	sp = sp + 8
	x30 = Mem0[sp:word64]
	sp = sp + 48
	return
	// succ:  readline_internal_char_exit
readline_internal_char_exit:


// fn000000000048BC04
// Return size: 0
void fn000000000048BC04()
fn000000000048BC04_entry:
	// succ:  l000000000048BC04
l000000000048BC04:
	sp = fp
	sp = sp + -64
	Mem0[sp:word64] = x29
	sp = sp + 8
	Mem0[sp:word64] = x30
	x29 = x31 + 0x0000000000000000
	v8 = sp + 16
	Mem0[v8:word64] = x19
	v8 = v8 + 8
	Mem0[v8:word64] = x20
	v11 = sp + 32
	Mem0[v11:word64] = x21
	v11 = v11 + 8
	Mem0[v11:word64] = x22
	Mem0[sp + 48:word64] = x23
	w31 = w0 + 0x00000002
	NZCV = cond(w31)
	x19 = x1
	branch Test(EQ,Z) l000000000048BC54
	// succ:  l000000000048BC24 l000000000048BC54
l000000000048BC24:
	w4 = 0x00000000
	branch w0 == 0x00000000 l000000000048BC3C
	// succ:  l000000000048BC2C l000000000048BC3C
l000000000048BC2C:
	x1 = Mem0[x1 + 4104:word64]
	branch x1 != 0x0000000000000000 l000000000048BCFC
	// succ:  l000000000048BC34 l000000000048BCFC
l000000000048BC34:
	w4 = w0
	branch w3 != 0x00000000 l000000000048BCE4
	// succ:  l000000000048BC3C l000000000048BCE4
l000000000048BC3C:
	w0 = w4
	v20 = sp + 16
	x19 = Mem0[v20:word64]
	v20 = v20 + 8
	x20 = Mem0[v20:word64]
	v21 = sp + 32
	x21 = Mem0[v21:word64]
	v21 = v21 + 8
	x22 = Mem0[v21:word64]
	x23 = Mem0[sp + 48:word64]
	x29 = Mem0[sp:word64]
	sp = sp + 8
	x30 = Mem0[sp:word64]
	sp = sp + 64
	return
	// succ:  fn000000000048BC04_exit
l000000000048BC54:
	x21 = 0x00000000004E3000
	x20 = Mem0[x21 + 3880:word64]
	x0 = x20 + (0x0000000000000001 << 12)
	v23 = Mem0[x0:byte]
	w3 = (word32) v23
	x0 = Mem0[x20 + 4104:word64]
	branch w3 != 0x00000000 l000000000048BC8C
	// succ:  l000000000048BC6C l000000000048BC8C
l000000000048BC6C:
	x1 = 0x00000000004A2000
	x1 = x1 + 0xFFFFFFFFFFFFF9F8
	x31 = x0 - x1
	NZCV = cond(x31)
	branch Test(EQ,Z) l000000000048BD14
	// succ:  l000000000048BC7C l000000000048BD14
l000000000048BC7C:
	x1 = 0x00000000004A2000
	x1 = x1 + 0xFFFFFFFFFFFFFD50
	x31 = x0 - x1
	NZCV = cond(x31)
	branch Test(EQ,Z) l000000000048BCAC
	// succ:  l000000000048BC8C l000000000048BCAC
l000000000048BC8C:
	w0 = 0x00000100
	x1 = x20
	w2 = 0x00000000
	// succ:  l000000000048BC98
l000000000048BC98:
	v25 = sp + 16
	x19 = Mem0[v25:word64]
	v25 = v25 + 8
	x20 = Mem0[v25:word64]
	v26 = sp + 32
	x21 = Mem0[v26:word64]
	v26 = v26 + 8
	x22 = Mem0[v26:word64]
	x23 = Mem0[sp + 48:word64]
	x29 = Mem0[sp:word64]
	sp = sp + 8
	x30 = Mem0[sp:word64]
	sp = sp + 64
	// succ:  l000000000048BCA8_thunk__rl_dispatch_subseq
l000000000048BCA8_thunk__rl_dispatch_subseq:
	call _rl_dispatch_subseq (retsize: 0;)
	return
	// succ:  fn000000000048BC04_exit
l000000000048BCAC:
l000000000048BCE4:
	w0 = w2
	call _rl_unget_char (retsize: 0;)
	x0 = 0x00000000004E3000
	Mem0[x0 + 3880:word64] = x19
	w4 = 0xFFFFFFFF
	goto l000000000048BC3C
	// succ:  l000000000048BC3C
l000000000048BCFC:
	w0 = w2
	call _rl_unget_char (retsize: 0;)
	x0 = 0x00000000004E3000
	Mem0[x0 + 3880:word64] = x19
	w4 = 0xFFFFFFFE
	goto l000000000048BC3C
	// succ:  l000000000048BC3C
l000000000048BD14:
	NZCV = cond(w2 - (uint32) ((byte) w2))
	w22 = w2
	branch Test(EQ,Z) l000000000048BD34
	// succ:  l000000000048BD20 l000000000048BD34
l000000000048BD20:
	w0 = w22
	x1 = x19
	w2 = 0x00000000
	Mem0[x21 + 3880:word64] = x19
	goto l000000000048BC98
	// succ:  l000000000048BC98
l000000000048BD34:
	__ctype_b_loc()
	sp = sp + 0xFFFFFFFFFFFFFFF8
	x0 = Mem0[x0:word64]
fn000000000048BC04_exit:


// _rl_dispatch_callback
// Return size: 0
void _rl_dispatch_callback()
_rl_dispatch_callback_entry:
	// succ:  l000000000048BD58
l000000000048BD58:
	sp = fp
	sp = sp + -32
	Mem0[sp:word64] = x29
	sp = sp + 8
	Mem0[sp:word64] = x30
	x29 = x31 + 0x0000000000000000
	w3 = Mem0[x0:word32]
	v10 = sp + 16
	Mem0[v10:word64] = x19
	v10 = v10 + 8
	Mem0[v10:word64] = x20
	x20 = x0
	branch (w3 & 0x00000001) == 0x00000000 l000000000048BE1C
	// succ:  l000000000048BD70 l000000000048BE1C
l000000000048BD70:
	w19 = Mem0[x20 + 48:word32]
	// succ:  l000000000048BD74
l000000000048BD74:
	w31 = w19 + 0x00000003
	NZCV = cond(w31)
	branch Test(EQ,Z) l000000000048BD94
	// succ:  l000000000048BD7C l000000000048BD94
l000000000048BD7C:
	x1 = Mem0[x20 + 24:word64]
	w2 = Mem0[x20 + 32:word32]
	w0 = w19
	w3 = w3 & 0x00000002
	call fn000000000048BC04 (retsize: 0;)
	w19 = w0
	// succ:  l000000000048BD94
l000000000048BD94:
	x0 = 0x00000000004E2000
	w1 = Mem0[x0 + 2672:word32]
	branch w1 != 0x00000000 l000000000048BDE8
	// succ:  l000000000048BDA0 l000000000048BDE8
l000000000048BDA0:
	branch w19 == 0x00000000 l000000000048BDF4
	// succ:  l000000000048BDA4 l000000000048BDF4
l000000000048BDA4:
	w31 = w19 + 0x00000003
	NZCV = cond(w31)
	branch Test(EQ,Z) l000000000048BE48
	// succ:  l000000000048BDAC l000000000048BE48
l000000000048BDAC:
	x0 = Mem0[x20 + 40:word64]
	x1 = 0x00000000004E1000
	x1 = x1 + 0xFFFFFFFFFFFFFC60
	Mem0[x1 + 96:word64] = x0
	// succ:  l000000000048BDBC
l000000000048BDBC:
	branch x0 == 0x0000000000000000 l000000000048BDC4
	// succ:  l000000000048BDC0 l000000000048BDC4
l000000000048BDC0:
	Mem0[x0 + 48:word32] = w19
	// succ:  l000000000048BDC4
l000000000048BDC4:
	w31 = w19 + 0x00000003
	NZCV = cond(w31)
	w0 = 0xFFFFFFFD
	branch Test(EQ,Z) l000000000048BDDC
	// succ:  l000000000048BDD0 l000000000048BDDC
l000000000048BDD0:
	x0 = x20
	call xfree (retsize: 0;)
	w0 = w19
	// succ:  l000000000048BDDC
l000000000048BDDC:
	v18 = sp + 16
	x19 = Mem0[v18:word64]
	v18 = v18 + 8
	x20 = Mem0[v18:word64]
	x29 = Mem0[sp:word64]
	sp = sp + 8
	x30 = Mem0[sp:word64]
	sp = sp + 32
	return
	// succ:  _rl_dispatch_callback_exit
l000000000048BDE8:
	w0 = Mem0[x0 + 2672:word32]
	call _rl_signal_handler (retsize: 0;)
	branch w19 != 0x00000000 l000000000048BDA4
	// succ:  l000000000048BDF4 l000000000048BDA4
l000000000048BDF4:
	call _rl_keyseq_chain_dispose (retsize: 0;)
	x1 = 0x00000000004E1000
	x1 = x1 + 0xFFFFFFFFFFFFFC60
	w2 = Mem0[x1:word32]
	w0 = w19
	w2 = w2 & 0xFFDFFFFF
	Mem0[x1:word32] = w2
	v20 = sp + 16
	x19 = Mem0[v20:word64]
	v20 = v20 + 8
	x20 = Mem0[v20:word64]
	x29 = Mem0[sp:word64]
	sp = sp + 8
	x30 = Mem0[sp:word64]
	sp = sp + 32
	return
	// succ:  _rl_dispatch_callback_exit
l000000000048BE1C:
	w0 = Mem0[x20 + 32:word32]
	call fn000000000048AFC0 (retsize: 0;)
	branch (w0 & 0x00000000) == 0x00000000 l000000000048BE58
	// succ:  l000000000048BE28 l000000000048BE58
l000000000048BE28:
	x1 = Mem0[x20 + 16:word64]
	w2 = Mem0[x20 + 4:word32]
	call _rl_dispatch_subseq (retsize: 0;)
	w3 = Mem0[x20:word32]
	w19 = w0
	w3 = w3 | 0x00000001
	Mem0[x20:word32] = w3
	goto l000000000048BD74
	// succ:  l000000000048BD74
l000000000048BE48:
	x0 = 0x00000000004E1000
	x0 = x0 + 0xFFFFFFFFFFFFFC60
	x0 = Mem0[x0 + 96:word64]
	goto l000000000048BDBC
	// succ:  l000000000048BDBC
l000000000048BE58:
	call _rl_abort_internal (retsize: 0;)
	w0 = 0xFFFFFFFF
	goto l000000000048BDDC
	// succ:  l000000000048BDDC
_rl_dispatch_callback_exit:


// rl_initialize
// Return size: 0
void rl_initialize()
rl_initialize_entry:
	// succ:  l000000000048BE64
l000000000048BE64:
	sp = fp
	sp = sp + -48
	Mem0[sp:word64] = x29
	sp = sp + 8
	Mem0[sp:word64] = x30
	x29 = x31 + 0x0000000000000000
	v8 = sp + 16
	Mem0[v8:word64] = x19
	v8 = v8 + 8
	Mem0[v8:word64] = x20
	x19 = 0x00000000004E1000
	x0 = x19 + 0xFFFFFFFFFFFFFC60
	w1 = Mem0[x0 + 124:word32]
	Mem0[sp + 32:word64] = x21
	x20 = 0x00000000004D9000
	branch w1 == 0x00000000 l000000000048BF04
	// succ:  l000000000048BE88 l000000000048BF04
l000000000048BE88:
	x1 = 0x00000000004E4000
	x19 = x19 + 0xFFFFFFFFFFFFFC60
	Mem0[x1 + 120:word32] = 0x00000000
	x1 = 0x00000000004E3000
	x0 = Mem0[x19 + 88:word64]
	Mem0[x1 + 3900:word32] = 0x00000000
	x1 = 0x00000000004E4000
	Mem0[x1 + 136:word32] = 0x00000000
	Mem0[x0:byte] = 0x00
	w1 = Mem0[x19:word32]
	Mem0[x19 + 64:word64] = x0
	w1 = w1 & 0xFEFFFFFF
	x0 = 0x00000000004E4000
	Mem0[x0 + 124:word32] = 0x00000000
	Mem0[x19:word32] = w1
	call _rl_start_using_history (retsize: 0;)
	call rl_reset_line_state (retsize: 0;)
	x20 = x20 + 0x00000000000004B0
	w0 = Mem0[x20 + 8:word32]
	Mem0[x19 + 80:word64] = 0x0000000000000000
	Mem0[x19 + 148:byte] = 0x00
	branch w0 != 0x00000000 l000000000048BEE4
	// succ:  l000000000048BEE0 l000000000048BEE4
l000000000048BEE0:
	call _rl_vi_initialize_line (retsize: 0;)
	// succ:  l000000000048BEE4
l000000000048BEE4:
	w0 = 0x00000001
	w1 = w0
	call _rl_set_insert_mode (retsize: 0;)
	w0 = 0x00000000
	v24 = sp + 16
	x19 = Mem0[v24:word64]
	v24 = v24 + 8
	x20 = Mem0[v24:word64]
	x21 = Mem0[sp + 32:word64]
	x29 = Mem0[sp:word64]
	sp = sp + 8
	x30 = Mem0[sp:word64]
	sp = sp + 48
	return
	// succ:  rl_initialize_exit
l000000000048BF04:
	w2 = Mem0[x0:word32]
	x1 = Mem0[x0 + 24:word64]
	w2 = w2 | 0x00000001
	Mem0[x0:word32] = w2
	branch x1 == 0x0000000000000000 l000000000048C064
	// succ:  l000000000048BF18 l000000000048C064
l000000000048BF18:
	x2 = x19 + 0xFFFFFFFFFFFFFC60
	x0 = Mem0[x2 + 32:word64]
	branch x0 == 0x0000000000000000 l000000000048C074
	// succ:  l000000000048BF24 l000000000048C074
l000000000048BF24:
	x20 = x19 + 0xFFFFFFFFFFFFFC60
	x3 = 0x00000000004E4000
	Mem0[x3 + 128:word64] = x1
	x2 = Mem0[x20 + 88:word64]
	x1 = 0x00000000004E4000
	Mem0[x1 + 160:word64] = x0
	branch x2 == 0x0000000000000000 l000000000048C084
	// succ:  l000000000048BF40 l000000000048C084
l000000000048BF40:
	x20 = x19 + 0xFFFFFFFFFFFFFC60
	x0 = Mem0[x20 + 136:word64]
	branch x0 == 0x0000000000000000 l000000000048C09C
	// succ:  l000000000048BF4C l000000000048C09C
l000000000048BF4C:
	call _rl_init_terminal_io (retsize: 0;)
	x20 = 0x00000000004D9000
	x0 = x20 + 0x00000000000004B0
	w1 = Mem0[x0 + 28:word32]
	branch w1 != 0x00000000 l000000000048C028
	// succ:  l000000000048BF60 l000000000048C028
l000000000048BF60:
	call rl_initialize_funmap (retsize: 0;)
	call _rl_init_eightbit (retsize: 0;)
	x0 = 0x0000000000000000
	call rl_read_init_file (retsize: 0;)
	x0 = x19 + 0xFFFFFFFFFFFFFC60
	w0 = Mem0[x0 + 144:word32]
	branch w0 != 0x00000000 l000000000048BFF0
	// succ:  l000000000048BF7C l000000000048BFF0
l000000000048BF7C:
	call rl_set_keymap_from_edit_mode (retsize: 0;)
	x0 = 0x00000000004DD000
	x0 = x0 + 0x0000000000000540
	x21 = 0x00000000004DA000
	call fn000000000048B030 (retsize: 0;)
	x21 = x21 + 0x0000000000000510
	x0 = x21
	call fn000000000048B030 (retsize: 0;)
	v17 = Mem0[x21 + 432:byte]
	w0 = (word32) v17
	w31 = w0 - 0x00000001
	NZCV = cond(w31)
	branch Test(EQ,Z) l000000000048C04C
	// succ:  l000000000048BFA8 l000000000048C04C
l000000000048BFA8:
	x0 = 0x00000000004D9000
	x0 = x0 + 0x0000000000000500
	call fn000000000048B030 (retsize: 0;)
	x0 = 0x00000000004DE000
	w0 = Mem0[x0 + 1532:word32]
	branch w0 != 0x00000000 l000000000048C034
	// succ:  l000000000048BFC0 l000000000048C034
l000000000048BFC0:
	x0 = 0x00000000004E1000
	x1 = Mem0[x0 + 4016:word64]
	branch x1 == 0x0000000000000000 l000000000048C03C
	// succ:  l000000000048BFCC l000000000048C03C
l000000000048BFCC:
	x0 = x19 + 0xFFFFFFFFFFFFFC60
	w2 = Mem0[x0:word32]
	w1 = Mem0[x0 + 124:word32]
	w2 = w2 & 0xFFFFFFFE
	w1 = w1 + 0x00000001
	w2 = w2 | 0x00000002
	Mem0[x0 + 124:word32] = w1
	Mem0[x0:word32] = w2
	goto l000000000048BE88
	// succ:  l000000000048BE88
l000000000048BFF0:
	x0 = 0x00000000004DE000
	w0 = Mem0[x0 + 1528:word32]
	branch w0 == 0x00000000 l000000000048BF7C
	// succ:  l000000000048BFFC l000000000048BF7C
l000000000048BFFC:
	x1 = 0x00000000004E4000
	x0 = 0x00000000004E4000
	x4 = 0x00000000004E4000
	w3 = Mem0[x1 + 328:word32]
	w2 = Mem0[x0 + 280:word32]
	w4 = Mem0[x4 + 312:word32]
	w3 = w3 - 0x00000001
	w2 = w2 - w4
	Mem0[x1 + 328:word32] = w3
	Mem0[x0 + 280:word32] = w2
	goto l000000000048BF7C
	// succ:  l000000000048BF7C
l000000000048C028:
	x0 = Mem0[x0:word64]
	call rl_tty_set_default_bindings (retsize: 0;)
	goto l000000000048BF60
	// succ:  l000000000048BF60
l000000000048C034:
	call _rl_enable_meta_key (retsize: 0;)
	goto l000000000048BFC0
	// succ:  l000000000048BFC0
l000000000048C03C:
	x1 = 0x00000000004DE000
	x1 = Mem0[x1 + 1440:word64]
	Mem0[x0 + 4016:word64] = x1
	goto l000000000048BFCC
	// succ:  l000000000048BFCC
l000000000048C04C:
	x0 = 0x00000000004C2000
	x1 = 0x0000000000000000
	x2 = x21
	x0 = x0 + 0xFFFFFFFFFFFFFD40
	call rl_bind_keyseq_in_map (retsize: 0;)
	goto l000000000048BFA8
	// succ:  l000000000048BFA8
l000000000048C064:
	x1 = 0x00000000004DE000
	x1 = Mem0[x1 + 1664:word64]
	Mem0[x0 + 24:word64] = x1
	goto l000000000048BF18
	// succ:  l000000000048BF18
l000000000048C074:
	x0 = 0x00000000004DE000
	x0 = Mem0[x0 + 1648:word64]
	Mem0[x2 + 32:word64] = x0
	goto l000000000048BF24
	// succ:  l000000000048BF24
l000000000048C084:
	w1 = 0x00000100
	x0 = 0x0000000000000100
	Mem0[x20 + 128:word32] = w1
	call xmalloc (retsize: 0;)
	Mem0[x20 + 88:word64] = x0
	goto l000000000048BF40
	// succ:  l000000000048BF40
l000000000048C09C:
	x0 = 0x00000000004AA000
	x0 = x0 + 0x0000000000000310
	call sh_get_env_value (retsize: 0;)
	Mem0[x20 + 136:word64] = x0
	goto l000000000048BF4C
	// succ:  l000000000048BF4C
rl_initialize_exit:


// readline
// Return size: 0
void readline()
readline_entry:
	// succ:  l000000000048C0B0
l000000000048C0B0:
	sp = fp
	sp = sp + -32
	Mem0[sp:word64] = x29
	sp = sp + 8
	Mem0[sp:word64] = x30
	x29 = x31 + 0x0000000000000000
	Mem0[sp + 16:word64] = x19
	x19 = 0x00000000004E1000
	x19 = x19 + 0xFFFFFFFFFFFFFC60
	w1 = Mem0[x19 + 108:word32]
	w31 = w1 + 0x00000001
	NZCV = cond(w31)
	branch Test(EQ,Z) l000000000048C144
	// succ:  l000000000048C0D0 l000000000048C144
l000000000048C0D0:
	call rl_set_prompt (retsize: 0;)
	call rl_initialize (retsize: 0;)
	x0 = 0x00000000004DE000
	x1 = Mem0[x0 + 1368:word64]
	branch x1 == 0x0000000000000000 l000000000048C0EC
	// succ:  l000000000048C0E4 l000000000048C0EC
l000000000048C0E4:
	w0 = Mem0[x19 + 152:word32]
	call x1 (retsize: 0;)
	// succ:  l000000000048C0EC
l000000000048C0EC:
	call rl_set_signals (retsize: 0;)
	call readline_internal_setup (retsize: 0;)
	x19 = 0x00000000004E4000
	w0 = Mem0[x19 + 124:word32]
	branch w0 != 0x00000000 l000000000048C13C
	// succ:  l000000000048C100 l000000000048C13C
l000000000048C100:
	x19 = x19 + 0x000000000000007C
	// succ:  l000000000048C104
l000000000048C104:
	call readline_internal_char (retsize: 0;)
	w1 = Mem0[x19:word32]
	branch w1 == 0x00000000 l000000000048C104
	// succ:  l000000000048C110 l000000000048C104
l000000000048C110:
	call readline_internal_teardown (retsize: 0;)
	x19 = x0
	x0 = 0x00000000004DE000
	x1 = Mem0[x0 + 1360:word64]
	branch x1 == 0x0000000000000000 l000000000048C128
	// succ:  l000000000048C124 l000000000048C128
l000000000048C124:
	call x1 (retsize: 0;)
	// succ:  l000000000048C128
l000000000048C128:
	call rl_clear_signals (retsize: 0;)
	// succ:  l000000000048C12C
l000000000048C12C:
	x0 = x19
	x19 = Mem0[sp + 16:word64]
	x29 = Mem0[sp:word64]
	sp = sp + 8
	x30 = Mem0[sp:word64]
	sp = sp + 32
	return
	// succ:  readline_exit
l000000000048C13C:
	w0 = 0x00000001
	goto l000000000048C110
	// succ:  l000000000048C110
l000000000048C144:
	call rl_clear_pending_input (retsize: 0;)
	x19 = 0x0000000000000000
	goto l000000000048C12C
	// succ:  l000000000048C12C
readline_exit:


// rl_save_state
// Return size: 0
void rl_save_state()
rl_save_state_entry:
	// succ:  l000000000048C150
l000000000048C150:
	sp = fp
	branch x0 == 0x0000000000000000 l000000000048C22C
	// succ:  l000000000048C154 l000000000048C22C
l000000000048C154:
	x3 = 0x00000000004E4000
	w17 = Mem0[x3 + 136:word32]
	x3 = 0x00000000004E3000
	w16 = Mem0[x3 + 3900:word32]
	x3 = 0x00000000004E4000
	w15 = Mem0[x3 + 120:word32]
	x1 = 0x00000000004E1000
	x3 = 0x00000000004E2000
	x2 = 0x00000000004D9000
	x1 = x1 + 0xFFFFFFFFFFFFFC60
	x12 = Mem0[x3 + 2728:word64]
	x2 = x2 + 0x00000000000004B0
	x3 = 0x00000000004E4000
	x14 = Mem0[x1 + 88:word64]
	x11 = Mem0[x1 + 8:word64]
	x8 = Mem0[x2:word64]
	x7 = Mem0[x1 + 80:word64]
	w13 = Mem0[x1 + 128:word32]
	w10 = Mem0[x1:word32]
	w9 = Mem0[x3 + 124:word32]
	w6 = Mem0[x2 + 32:word32]
	x3 = Mem0[x1 + 24:word64]
	w5 = Mem0[x2 + 8:word32]
	w4 = Mem0[x1 + 104:word32]
	x2 = Mem0[x1 + 32:word64]
	w1 = Mem0[x1 + 108:word32]
	Mem0[x0 + 4:word32] = w16
	Mem0[x0:word32] = w17
	Mem0[x0 + 8:word32] = w15
	Mem0[x0 + 16:word64] = x14
	Mem0[x0 + 24:word32] = w13
	Mem0[x0 + 32:word64] = x12
	Mem0[x0 + 40:word64] = x11
	Mem0[x0 + 48:word32] = w10
	Mem0[x0 + 52:word32] = w9
	Mem0[x0 + 56:word64] = x8
	Mem0[x0 + 64:word64] = x7
	Mem0[x0 + 72:word32] = w6
	Mem0[x0 + 76:word32] = w5
	Mem0[x0 + 80:word32] = w4
	Mem0[x0 + 88:word64] = x3
	Mem0[x0 + 96:word64] = x2
	Mem0[x0 + 104:word32] = w1
	x1 = 0x00000000004E2000
	x3 = Mem0[x1 + 2760:word64]
	x1 = 0x00000000004DE000
	w2 = Mem0[x1 + 1496:word32]
	x1 = 0x00000000004DE000
	w1 = Mem0[x1 + 1500:word32]
	Mem0[x0 + 112:word64] = x3
	Mem0[x0 + 120:word32] = w2
	Mem0[x0 + 124:word32] = w1
	w0 = 0x00000000
	return
	// succ:  rl_save_state_exit
l000000000048C22C:
	w0 = 0xFFFFFFFF
	return
	// succ:  rl_save_state_exit
rl_save_state_exit:


// rl_restore_state
// Return size: 0
void rl_restore_state()
rl_restore_state_entry:
	// succ:  l000000000048C234
l000000000048C234:
	sp = fp
	x31 = x31 - 0x0000000000000010
rl_restore_state_exit:


// fn000000000048C32C
// Return size: 0
void fn000000000048C32C()
fn000000000048C32C_entry:
	// succ:  l000000000048C32C
l000000000048C32C:
	sp = fp
	sp = sp + -32
	Mem0[sp:word64] = x29
	sp = sp + 8
	Mem0[sp:word64] = x30
	x29 = x31 + 0x0000000000000000
	v8 = sp + 16
	Mem0[v8:word64] = x19
	v8 = v8 + 8
	Mem0[v8:word64] = x20
	w19 = w0
	x20 = 0x00000000004E1000
	call rl_begin_undo_group (retsize: 0;)
	x20 = x20 + 0xFFFFFFFFFFFFFD08
	branch w19 == 0x00000000 l000000000048C35C
	// succ:  l000000000048C34C l000000000048C35C
l000000000048C34C:
	x0 = Mem0[x20:word64]
	call rl_insert_text (retsize: 0;)
	w19 = w19 - 0x00000001
	NZCV = cond(w19)
	branch Test(NE,Z) l000000000048C34C
	// succ:  l000000000048C35C l000000000048C34C
l000000000048C35C:
	v14 = sp + 16
	x19 = Mem0[v14:word64]
	v14 = v14 + 8
	x20 = Mem0[v14:word64]
	x29 = Mem0[sp:word64]
	sp = sp + 8
	x30 = Mem0[sp:word64]
	sp = sp + 32
	// succ:  l000000000048C364_thunk_rl_end_undo_group
l000000000048C364_thunk_rl_end_undo_group:
	call rl_end_undo_group (retsize: 0;)
	return
	// succ:  fn000000000048C32C_exit
fn000000000048C32C_exit:


// fn000000000048C4A0
// Return size: 0
void fn000000000048C4A0()
fn000000000048C4A0_entry:
	// succ:  l000000000048C4A0
l000000000048C4A0:
	sp = fp
	sp = sp + -48
	Mem0[sp:word64] = x29
	sp = sp + 8
	Mem0[sp:word64] = x30
	x29 = x31 + 0x0000000000000000
	Mem0[sp + 16:word64] = x19
	w19 = w0
	x0 = 0x0000000000000024
	Mem0[x29 + 32:word64] = x1
	call xmalloc (retsize: 0;)
	x3 = 0x00000000004E4000
	w5 = Mem0[x3 + 136:word32]
	x3 = 0x00000000004E3000
	w4 = Mem0[x3 + 3900:word32]
	x1 = Mem0[x29 + 32:word64]
	w3 = 0xFFFFFFFF
	Mem0[x0:word32] = w19
	Mem0[x0 + 8:word32] = 0x00000000
	Mem0[x0 + 4:word32] = 0x00000000
	Mem0[x0 + 12:word32] = 0x00000000
	Mem0[x0 + 16:word32] = w3
	Mem0[x0 + 20:word32] = w5
	Mem0[x0 + 24:word32] = w4
	Mem0[x0 + 28:word32] = w1
	Mem0[x0 + 32:word32] = w3
	x19 = Mem0[sp + 16:word64]
	x29 = Mem0[sp:word64]
	sp = sp + 8
	x30 = Mem0[sp:word64]
	sp = sp + 48
	return
	// succ:  fn000000000048C4A0_exit
fn000000000048C4A0_exit:


// fn000000000048C584
// Return size: 0
void fn000000000048C584()
fn000000000048C584_entry:
	// succ:  l000000000048C584
l000000000048C584:
	sp = fp
	sp = sp + -48
	Mem0[sp:word64] = x29
	sp = sp + 8
	Mem0[sp:word64] = x30
	x29 = x31 + 0x0000000000000000
	v8 = sp + 16
	Mem0[v8:word64] = x19
	v8 = v8 + 8
	Mem0[v8:word64] = x20
	x19 = 0x00000000004E4000
	x20 = 0x00000000004E3000
	w1 = Mem0[x19 + 136:word32]
	w0 = Mem0[x20 + 3900:word32]
	Mem0[sp + 32:word64] = x21
	NZCV = cond(w1 - w0)
	branch Test(LT,NV) l000000000048C5BC
	// succ:  l000000000048C5AC l000000000048C5BC
l000000000048C5AC:
	v14 = sp + 16
	x19 = Mem0[v14:word64]
	v14 = v14 + 8
	x20 = Mem0[v14:word64]
	x21 = Mem0[sp + 32:word64]
	x29 = Mem0[sp:word64]
	sp = sp + 8
	x30 = Mem0[sp:word64]
	sp = sp + 48
	return
	// succ:  fn000000000048C584_exit
l000000000048C5BC:
	__ctype_get_mb_cur_max()
	sp = sp + 0xFFFFFFFFFFFFFFF8
	x31 = x0 - 0x0000000000000001
	NZCV = cond(x31)
	branch Test(EQ,Z) l000000000048C5D4
	// succ:  l000000000048C5C8 l000000000048C5D4
l000000000048C5C8:
	x0 = 0x00000000004E2000
	w0 = Mem0[x0 + 3968:word32]
	branch w0 == 0x00000000 l000000000048C5F0
	// succ:  l000000000048C5D4 l000000000048C5F0
l000000000048C5D4:
	w0 = Mem0[x19 + 136:word32]
	x21 = Mem0[sp + 32:word64]
	w0 = w0 + 0x00000001
	Mem0[x19 + 136:word32] = w0
	v17 = sp + 16
	x19 = Mem0[v17:word64]
	v17 = v17 + 8
	x20 = Mem0[v17:word64]
	x29 = Mem0[sp:word64]
	sp = sp + 8
	x30 = Mem0[sp:word64]
	sp = sp + 48
	return
	// succ:  fn000000000048C584_exit
l000000000048C5F0:
	w21 = Mem0[x19 + 136:word32]
	w0 = 0x00000001
	call _rl_forward_char_internal (retsize: 0;)
	Mem0[x19 + 136:word32] = w0
	NZCV = cond(w21 - w0)
	branch Test(NE,Z) l000000000048C5AC
	// succ:  l000000000048C608 l000000000048C5AC
l000000000048C608:
	w0 = Mem0[x20 + 3900:word32]
	Mem0[x19 + 136:word32] = w0
	goto l000000000048C5AC
	// succ:  l000000000048C5AC
fn000000000048C584_exit:


// fn000000000048C614
// Return size: 0
void fn000000000048C614()
fn000000000048C614_entry:
	// succ:  l000000000048C614
l000000000048C614:
	sp = fp
	sp = sp + -32
	Mem0[sp:word64] = x29
	sp = sp + 8
	Mem0[sp:word64] = x30
	x29 = x31 + 0x0000000000000000
	Mem0[sp + 16:word64] = x19
	__ctype_get_mb_cur_max()
	sp = sp + 0xFFFFFFFFFFFFFFF8
	x31 = x0 - 0x0000000000000001
	NZCV = cond(x31)
	branch Test(ULE,ZC) l000000000048C638
	// succ:  l000000000048C62C l000000000048C638
l000000000048C62C:
	x0 = 0x00000000004E2000
	w0 = Mem0[x0 + 3968:word32]
	branch w0 == 0x00000000 l000000000048C654
	// succ:  l000000000048C638 l000000000048C654
l000000000048C638:
	x0 = 0x00000000004E4000
	w1 = Mem0[x0 + 136:word32]
	x19 = Mem0[sp + 16:word64]
	w1 = w1 - 0x00000001
	Mem0[x0 + 136:word32] = w1
	x29 = Mem0[sp:word64]
	sp = sp + 8
	x30 = Mem0[sp:word64]
	sp = sp + 32
	return
	// succ:  fn000000000048C614_exit
l000000000048C654:
	x19 = 0x00000000004E4000
	x0 = 0x00000000004E1000
	w1 = Mem0[x19 + 136:word32]
	x0 = Mem0[x0 + 3256:word64]
	w2 = 0x00000001
	call _rl_find_prev_mbchar (retsize: 0;)
	Mem0[x19 + 136:word32] = w0
	x19 = Mem0[sp + 16:word64]
	x29 = Mem0[sp:word64]
	sp = sp + 8
	x30 = Mem0[sp:word64]
	sp = sp + 32
	return
	// succ:  fn000000000048C614_exit
fn000000000048C614_exit:


// fn000000000048C67C
// Return size: 0
void fn000000000048C67C()
fn000000000048C67C_entry:
	// succ:  l000000000048C67C
l000000000048C67C:
	sp = fp
	sp = sp + -48
	Mem0[sp:word64] = x29
	sp = sp + 8
	Mem0[sp:word64] = x30
	x29 = x31 + 0x0000000000000000
	v8 = sp + 16
	Mem0[v8:word64] = x19
	v8 = v8 + 8
	Mem0[v8:word64] = x20
	v11 = sp + 32
	Mem0[v11:word64] = x21
	v11 = v11 + 8
	Mem0[v11:word64] = x22
	branch x0 == 0x0000000000000000 l000000000048C69C
	// succ:  l000000000048C690 l000000000048C69C
l000000000048C690:
	w1 = Mem0[x0 + 24:word32]
	w31 = w1 - 0x00000001
	NZCV = cond(w31)
	branch Test(EQ,Z) l000000000048C6C8
	// succ:  l000000000048C69C l000000000048C6C8
l000000000048C69C:
	x0 = 0x00000000004E1000
	x0 = x0 + 0xFFFFFFFFFFFFFD08
	w1 = Mem0[x0 + 136:word32]
	NZCV = cond(w1 - w31)
	branch Test(LE,ZCV) l000000000048C6B8
	// succ:  l000000000048C6B0 l000000000048C6B8
l000000000048C6B0:
	x0 = Mem0[x0:word64]
	Mem0[x0:byte] = 0x00
	// succ:  l000000000048C6B8
l000000000048C6B8:
	v18 = sp + 16
	x19 = Mem0[v18:word64]
	v18 = v18 + 8
	x20 = Mem0[v18:word64]
	v19 = sp + 32
	x21 = Mem0[v19:word64]
	v19 = v19 + 8
	x22 = Mem0[v19:word64]
	x29 = Mem0[sp:word64]
	sp = sp + 8
	x30 = Mem0[sp:word64]
	sp = sp + 48
	return
	// succ:  fn000000000048C67C_exit
l000000000048C6C8:
	w22 = Mem0[x0 + 8:word32]
	w21 = Mem0[x0 + 12:word32]
	x20 = 0x00000000004E1000
	x20 = x20 + 0xFFFFFFFFFFFFFD08
	w21 = w21 - w22
	w0 = Mem0[x20 + 136:word32]
	w19 = w21 + 0x00000001
	NZCV = cond(w19 - w0)
	branch Test(GE,NZV) l000000000048C720
	// succ:  l000000000048C6EC l000000000048C720
l000000000048C6EC:
	x20 = Mem0[x20:word64]
	x0 = 0x00000000004E1000
	x1 = Mem0[x0 + 3256:word64]
l000000000048C720:
fn000000000048C67C_exit:


// fn000000000048C75C
// Return size: 0
void fn000000000048C75C()
fn000000000048C75C_entry:
	// succ:  l000000000048C75C
l000000000048C75C:
	sp = fp
	sp = sp + -32
	Mem0[sp:word64] = x29
	sp = sp + 8
	Mem0[sp:word64] = x30
	x29 = x31 + 0x0000000000000000
	Mem0[sp + 16:word64] = x19
	x19 = 0x00000000004E1000
	w0 = Mem0[x19 + 3168:word32]
	w0 = w0 | 0x00000040
	Mem0[x19 + 3168:word32] = w0
	call rl_read_key (retsize: 0;)
	w1 = Mem0[x19 + 3168:word32]
	w1 = w1 & 0xFFFFFFBF
	Mem0[x19 + 3168:word32] = w1
	x19 = Mem0[sp + 16:word64]
	x29 = Mem0[sp:word64]
	sp = sp + 8
	x30 = Mem0[sp:word64]
	sp = sp + 32
	return
	// succ:  fn000000000048C75C_exit
fn000000000048C75C_exit:


// rl_vi_overstrike_delete
// Return size: 0
void rl_vi_overstrike_delete()
rl_vi_overstrike_delete_entry:
	// succ:  l000000000048C794
l000000000048C794:
	sp = fp
	sp = sp + -80
	Mem0[sp:word64] = x29
	sp = sp + 8
	Mem0[sp:word64] = x30
	x29 = x31 + 0x0000000000000000
	v8 = sp + 48
	Mem0[v8:word64] = x23
	v8 = v8 + 8
	Mem0[v8:word64] = x24
	Mem0[sp + 64:word64] = x25
	v12 = sp + 16
	Mem0[v12:word64] = x19
	v12 = v12 + 8
	Mem0[v12:word64] = x20
	v15 = sp + 32
	Mem0[v15:word64] = x21
	v15 = v15 + 8
	Mem0[v15:word64] = x22
	NZCV = cond(w0 - w31)
	w23 = w0
	x24 = 0x00000000004E1000
	w25 = w1
	branch Test(LE,ZCV) l000000000048C828
	// succ:  l000000000048C7C0 l000000000048C828
l000000000048C7C0:
	x21 = x24 + 0xFFFFFFFFFFFFFD08
	w0 = Mem0[x21 + 140:word32]
	x20 = 0x00000000004E4000
	w19 = 0x00000000
	x20 = x20 + 0x0000000000000088
	branch w0 != 0x00000000 l000000000048C7EC
	// succ:  l000000000048C7D8 l000000000048C7EC
l000000000048C7D8:
	goto l000000000048C880
	// succ:  l000000000048C880
l000000000048C7DC:
	NZCV = cond(w19 - w23)
	branch Test(EQ,Z) l000000000048C828
	// succ:  l000000000048C7E4 l000000000048C828
l000000000048C7E4:
	w2 = Mem0[x21 + 140:word32]
	branch w2 == 0x00000000 l000000000048C880
	// succ:  l000000000048C7EC l000000000048C880
l000000000048C7EC:
	w22 = Mem0[x20:word32]
	call rl_do_undo (retsize: 0;)
	w19 = w19 + 0x00000001
	w2 = Mem0[x20:word32]
	branch w0 == 0x00000000 l000000000048C80C
	// succ:  l000000000048C800 l000000000048C80C
l000000000048C800:
	w0 = Mem0[x21 + 140:word32]
	w0 = w0 - 0x00000001
	Mem0[x21 + 140:word32] = w0
	// succ:  l000000000048C80C
l000000000048C80C:
	NZCV = cond(w2 - w22)
	branch Test(NE,Z) l000000000048C7DC
	// succ:  l000000000048C814 l000000000048C7DC
l000000000048C814:
	w0 = 0x00000001
	w1 = w25
	call rl_backward_char (retsize: 0;)
	NZCV = cond(w19 - w23)
	branch Test(NE,Z) l000000000048C7E4
	// succ:  l000000000048C828 l000000000048C7E4
l000000000048C828:
	x24 = x24 + 0xFFFFFFFFFFFFFD08
	w19 = Mem0[x24 + 140:word32]
	branch w19 != 0x00000000 l000000000048C83C
	// succ:  l000000000048C834 l000000000048C83C
l000000000048C834:
	w0 = Mem0[x24 + 144:word32]
	branch w0 != 0x00000000 l000000000048C858
	// succ:  l000000000048C83C l000000000048C858
l000000000048C83C:
	w0 = 0x00000000
	v24 = sp + 16
	x19 = Mem0[v24:word64]
	v24 = v24 + 8
	x20 = Mem0[v24:word64]
	v25 = sp + 32
	x21 = Mem0[v25:word64]
	v25 = v25 + 8
	x22 = Mem0[v25:word64]
	v26 = sp + 48
	x23 = Mem0[v26:word64]
	v26 = v26 + 8
	x24 = Mem0[v26:word64]
	x25 = Mem0[sp + 64:word64]
	x29 = Mem0[sp:word64]
	sp = sp + 8
	x30 = Mem0[sp:word64]
	sp = sp + 80
	return
	// succ:  rl_vi_overstrike_delete_exit
l000000000048C858:
	call rl_end_undo_group (retsize: 0;)
	call rl_do_undo (retsize: 0;)
	w0 = 0x00000000
	Mem0[x24 + 144:word32] = w19
	v27 = sp + 32
	x21 = Mem0[v27:word64]
	v27 = v27 + 8
	x22 = Mem0[v27:word64]
	v28 = sp + 16
	x19 = Mem0[v28:word64]
	v28 = v28 + 8
	x20 = Mem0[v28:word64]
	v29 = sp + 48
	x23 = Mem0[v29:word64]
	v29 = v29 + 8
	x24 = Mem0[v29:word64]
	x25 = Mem0[sp + 64:word64]
	x29 = Mem0[sp:word64]
	sp = sp + 8
	x30 = Mem0[sp:word64]
	sp = sp + 80
	return
	// succ:  rl_vi_overstrike_delete_exit
l000000000048C880:
	call rl_ding (retsize: 0;)
	goto l000000000048C828
	// succ:  l000000000048C828
rl_vi_overstrike_delete_exit:


// fn000000000048C888
// Return size: 0
void fn000000000048C888()
fn000000000048C888_entry:
	// succ:  l000000000048C888
l000000000048C888:
	sp = fp
	sp = sp + -32
	Mem0[sp:word64] = x29
	sp = sp + 8
	Mem0[sp:word64] = x30
	x29 = x31 + 0x0000000000000000
	Mem0[sp + 16:word64] = x19
	w19 = w0
	branch (w19 & 0x00000000) == 0x00000000 l000000000048C8B4
	// succ:  l000000000048C89C l000000000048C8B4
l000000000048C89C:
	x0 = 0x00000000004D9000
	x1 = Mem0[x0 + 1200:word64]
l000000000048C8B4:
	w0 = w19 & 0xFFFFFF7F
	w0 = w0 - 0x00000030
	w31 = w0 - 0x00000009
	NZCV = cond(w31)
	branch Test(UGT,ZC) l000000000048C930
	// succ:  l000000000048C8C4 l000000000048C930
l000000000048C8C4:
	x1 = 0x00000000004E1000
	w2 = Mem0[x1 + 3332:word32]
	branch w2 != 0x00000000 l000000000048C918
	// succ:  l000000000048C8D0 l000000000048C918
l000000000048C8D0:
	x2 = 0x00000000004D9000
	Mem0[x2 + 1216:word32] = w0
	// succ:  l000000000048C8D8
l000000000048C8D8:
	w0 = 0x00000001
	Mem0[x1 + 3332:word32] = w0
	x19 = Mem0[sp + 16:word64]
	x29 = Mem0[sp:word64]
	sp = sp + 8
	x30 = Mem0[sp:word64]
	sp = sp + 32
	return
	// succ:  fn000000000048C888_exit
l000000000048C918:
	x3 = 0x00000000004D9000
	w2 = Mem0[x3 + 1216:word32]
	w2 = w2 + (w2 << 2)
	w0 = w0 + (w2 << 1)
	Mem0[x3 + 1216:word32] = w0
	goto l000000000048C8D8
	// succ:  l000000000048C8D8
l000000000048C930:
	call rl_clear_message (retsize: 0;)
	w0 = w19
	call rl_stuff_char (retsize: 0;)
	w0 = 0x00000000
	x19 = Mem0[sp + 16:word64]
	x29 = Mem0[sp:word64]
	sp = sp + 8
	x30 = Mem0[sp:word64]
	sp = sp + 32
	return
	// succ:  fn000000000048C888_exit
fn000000000048C888_exit:


// rl_vi_overstrike
// Return size: 0
void rl_vi_overstrike()
rl_vi_overstrike_entry:
	// succ:  l000000000048C94C
l000000000048C94C:
	sp = fp
	sp = sp + -48
	Mem0[sp:word64] = x29
	sp = sp + 8
	Mem0[sp:word64] = x30
	x29 = x31 + 0x0000000000000000
	v8 = sp + 16
	Mem0[v8:word64] = x19
	v8 = v8 + 8
	Mem0[v8:word64] = x20
	x20 = 0x00000000004E1000
	x2 = x20 + 0xFFFFFFFFFFFFFD08
	w3 = Mem0[x2 + 144:word32]
	w19 = w0
	branch w3 == 0x00000000 l000000000048C99C
	// succ:  l000000000048C96C l000000000048C99C
l000000000048C96C:
	NZCV = cond(w19 - w31)
	branch Test(LE,ZCV) l000000000048C98C
	// succ:  l000000000048C974 l000000000048C98C
l000000000048C974:
	w0 = w19
	call _rl_overwrite_char (retsize: 0;)
	x20 = x20 + 0xFFFFFFFFFFFFFD08
	w0 = Mem0[x20 + 140:word32]
	w19 = w19 + w0
	Mem0[x20 + 140:word32] = w19
	// succ:  l000000000048C98C
l000000000048C98C:
	w0 = 0x00000000
	v17 = sp + 16
	x19 = Mem0[v17:word64]
	v17 = v17 + 8
	x20 = Mem0[v17:word64]
	x29 = Mem0[sp:word64]
	sp = sp + 8
	x30 = Mem0[sp:word64]
	sp = sp + 48
	return
	// succ:  rl_vi_overstrike_exit
l000000000048C99C:
	w0 = 0x00000001
	Mem0[x2 + 144:word32] = w0
	Mem0[x29 + 32:word64] = x1
	call rl_begin_undo_group (retsize: 0;)
	x1 = Mem0[x29 + 32:word64]
	goto l000000000048C96C
	// succ:  l000000000048C96C
rl_vi_overstrike_exit:


// fn000000000048C9B4
// Return size: 0
void fn000000000048C9B4()
fn000000000048C9B4_entry:
	// succ:  l000000000048C9B4
l000000000048C9B4:
	sp = fp
	sp = sp + -64
	Mem0[sp:word64] = x29
	sp = sp + 8
	Mem0[sp:word64] = x30
	x29 = x31 + 0x0000000000000000
	w1 = Mem0[x0:word32]
	v10 = sp + 16
	Mem0[v10:word64] = x19
	v10 = v10 + 8
	Mem0[v10:word64] = x20
	v13 = sp + 32
	Mem0[v13:word64] = x21
	v13 = v13 + 8
	Mem0[v13:word64] = x22
	v16 = sp + 48
	Mem0[v16:word64] = x23
	v16 = v16 + 8
	Mem0[v16:word64] = x24
	w31 = w1 - 0x00000002
	NZCV = cond(w31)
	x19 = x0
	branch Test(EQ,Z) l000000000048CA98
	goto l000000000048C9D8
	// succ:  l000000000048C9D8 l000000000048CA98
l000000000048C9B4:
l000000000048C9D8:
	w31 = w1 - 0x00000004
	NZCV = cond(w31)
	branch Test(EQ,Z) l000000000048CA54
	// succ:  l000000000048C9E0 l000000000048CA54
l000000000048C9E0:
	w31 = w1 - 0x00000001
	NZCV = cond(w31)
	branch Test(EQ,Z) l000000000048CA20
	// succ:  l000000000048C9E8 l000000000048CA20
l000000000048C9E8:
	x0 = 0x00000000004C2000
	x0 = x0 + 0xFFFFFFFFFFFFFD80
	call _rl_errmsg (retsize: 0;)
	w20 = 0x00000001
	// succ:  l000000000048C9F8
l000000000048C9F8:
	x1 = 0x00000000004E1000
	w0 = Mem0[x1 + 3168:word32]
	v23 = sp + 32
	x21 = Mem0[v23:word64]
	v23 = v23 + 8
	x22 = Mem0[v23:word64]
	w0 = w0 & 0xFFEFFFFF
	Mem0[x1 + 3168:word32] = w0
	v24 = sp + 48
	x23 = Mem0[v24:word64]
	v24 = v24 + 8
	x24 = Mem0[v24:word64]
	w0 = w20
	v25 = sp + 16
	x19 = Mem0[v25:word64]
	v25 = v25 + 8
	x20 = Mem0[v25:word64]
	x29 = Mem0[sp:word64]
	sp = sp + 8
	x30 = Mem0[sp:word64]
	sp = sp + 64
	return
	// succ:  fn000000000048C9B4_exit
l000000000048CA20:
	w1 = Mem0[x0 + 32:word32]
	x0 = 0x00000000004C2000
	x0 = x0 + 0xFFFFFFFFFFFFFD50
	strchr(x0, x1)
	sp = sp + 0xFFFFFFFFFFFFFFF8
	w19 = Mem0[x19 + 20:word32]
	x21 = 0x00000000004E4000
	branch x0 == 0x0000000000000000 l000000000048CC00
	// succ:  l000000000048CA3C l000000000048CC00
l000000000048CA3C:
	x1 = 0x00000000004E4000
	w0 = Mem0[x21 + 136:word32]
	w1 = Mem0[x1 + 120:word32]
	// succ:  l000000000048CA48
l000000000048CA48:
	call rl_kill_text (retsize: 0;)
	// succ:  l000000000048CA4C
l000000000048CA4C:
	w20 = 0x00000000
	goto l000000000048C9F8
	// succ:  l000000000048C9F8
l000000000048CA54:
	w1 = Mem0[x0 + 32:word32]
	x0 = 0x00000000004C2000
	x0 = x0 + 0xFFFFFFFFFFFFFD70
	strchr(x0, x1)
	sp = sp + 0xFFFFFFFFFFFFFFF8
	x21 = 0x00000000004E4000
	branch x0 == 0x0000000000000000 l000000000048CBCC
	// succ:  l000000000048CA6C l000000000048CBCC
l000000000048CA6C:
	x22 = 0x00000000004E4000
	// succ:  l000000000048CA70
l000000000048CA70:
	call rl_begin_undo_group (retsize: 0;)
	w1 = Mem0[x22 + 120:word32]
	w0 = Mem0[x21 + 136:word32]
	w20 = 0x00000000
	call rl_kill_text (retsize: 0;)
	call rl_end_undo_group (retsize: 0;)
	call rl_do_undo (retsize: 0;)
	w0 = Mem0[x19 + 20:word32]
	Mem0[x21 + 136:word32] = w0
	goto l000000000048C9F8
	// succ:  l000000000048C9F8
l000000000048CA98:
	w20 = Mem0[x0 + 32:word32]
	x0 = 0x00000000004C2000
	x0 = x0 + 0xFFFFFFFFFFFFFD60
	w1 = w20
	strchr(x0, x1)
	sp = sp + 0xFFFFFFFFFFFFFFF8
	w23 = Mem0[x19 + 20:word32]
	x21 = 0x00000000004E4000
	branch x0 == 0x0000000000000000 l000000000048CC3C
	// succ:  l000000000048CAB8 l000000000048CC3C
l000000000048CAB8:
	x22 = 0x00000000004E4000
	// succ:  l000000000048CABC
l000000000048CABC:
	NZCV = cond(w20 - (uint32) ((byte) w20))
	branch Test(EQ,Z) l000000000048CB9C
	// succ:  l000000000048CAC4 l000000000048CB9C
l000000000048CAC4:
	w31 = w20 - 0x00000057
	NZCV = cond(w31)
	w0 = (word32) Test(EQ,Z)
	branch w0 == 0x00000000 l000000000048CAE0
	// succ:  l000000000048CAD0 l000000000048CAE0
l000000000048CAD0:
	w0 = Mem0[x21 + 136:word32]
	NZCV = cond(w23 - w0)
	branch Test(LE,ZCV) l000000000048CAE0
	// succ:  l000000000048CADC l000000000048CAE0
l000000000048CADC:
	Mem0[x21 + 136:word32] = w23
	// succ:  l000000000048CAE0
l000000000048CAE0:
	x20 = 0x00000000004E1000
	x0 = x20 + 0xFFFFFFFFFFFFFD08
	w1 = Mem0[x0 + 148:word32]
	branch w1 == 0x00000000 l000000000048CB30
	// succ:  l000000000048CAF0 l000000000048CB30
l000000000048CAF0:
	x0 = Mem0[x0:word64]
	branch x0 == 0x0000000000000000 l000000000048CB00
	// succ:  l000000000048CAF8 l000000000048CB00
l000000000048CAF8:
	v28 = Mem0[x0:byte]
	w0 = (word32) v28
	branch w0 != 0x00000000 l000000000048CC34
	// succ:  l000000000048CB00 l000000000048CC34
l000000000048CB00:
	w0 = Mem0[x21 + 136:word32]
	w1 = Mem0[x22 + 120:word32]
	x20 = x20 + 0xFFFFFFFFFFFFFD08
	call rl_delete_text (retsize: 0;)
	x0 = Mem0[x20:word64]
	branch x0 == 0x0000000000000000 l000000000048CA4C
	// succ:  l000000000048CB18 l000000000048CA4C
l000000000048CB18:
	v29 = Mem0[x0:byte]
	w1 = (word32) v29
	w20 = 0x00000000
	branch w1 == 0x00000000 l000000000048C9F8
	// succ:  l000000000048CB24 l000000000048C9F8
l000000000048CB24:
	call rl_insert_text (retsize: 0;)
	call rl_end_undo_group (retsize: 0;)
	goto l000000000048C9F8
	// succ:  l000000000048C9F8
l000000000048CB30:
	call rl_begin_undo_group (retsize: 0;)
	w0 = Mem0[x21 + 136:word32]
	w1 = Mem0[x22 + 120:word32]
	call rl_kill_text (retsize: 0;)
	w19 = Mem0[x19 + 28:word32]
	NZCV = cond(w19 - (uint32) ((byte) w19))
	branch Test(EQ,Z) l000000000048CC6C
	// succ:  l000000000048CB4C l000000000048CC6C
l000000000048CB4C:
	x0 = x20 + 0xFFFFFFFFFFFFFD08
	w1 = 0x00000001
	Mem0[x0 + 144:word32] = w1
	// succ:  l000000000048CB58
l000000000048CB58:
	x0 = 0x00000000004D9000
	w2 = Mem0[x0 + 1216:word32]
	x0 = 0x00000000004D9000
	w1 = Mem0[x0 + 1220:word32]
	x0 = 0x00000000004D9000
	x0 = x0 + 0x00000000000004F0
	Mem0[x0 + 8:word32] = w1
	x1 = 0x00000000004D9000
	x20 = x20 + 0xFFFFFFFFFFFFFD08
	Mem0[x0:word32] = w19
	Mem0[x0 + 4:word32] = w2
	x1 = x1 + 0x0000000000000500
	x0 = 0x00000000004D9000
	Mem0[x20 + 152:word32] = w19
	Mem0[x0 + 1200:word64] = x1
	w20 = 0x00000000
	goto l000000000048C9F8
	// succ:  l000000000048C9F8
l000000000048CB9C:
	__ctype_b_loc()
	sp = sp + 0xFFFFFFFFFFFFFFF8
	x0 = Mem0[x0:word64]
l000000000048CBCC:
	w1 = Mem0[x19 + 20:word32]
	w0 = Mem0[x21 + 136:word32]
	x22 = 0x00000000004E4000
	NZCV = cond(w1 - w0)
	branch Test(GT,NZV) l000000000048CA70
	// succ:  l000000000048CBE0 l000000000048CA70
l000000000048CBE0:
	x1 = 0x00000000004E3000
	w0 = Mem0[x22 + 120:word32]
	w1 = Mem0[x1 + 3900:word32]
	NZCV = cond(w0 - w1)
	branch Test(GE,NZV) l000000000048CA70
	// succ:  l000000000048CBF4 l000000000048CA70
l000000000048CBF4:
	w0 = w0 + 0x00000001
	Mem0[x22 + 120:word32] = w0
	goto l000000000048CA70
	// succ:  l000000000048CA70
l000000000048CC00:
	w0 = Mem0[x21 + 136:word32]
	NZCV = cond(w19 - w0)
	branch Test(GT,NZV) l000000000048CA3C
	// succ:  l000000000048CC0C l000000000048CA3C
l000000000048CC0C:
	x2 = 0x00000000004E4000
	x3 = 0x00000000004E3000
	w1 = Mem0[x2 + 120:word32]
	w3 = Mem0[x3 + 3900:word32]
	NZCV = cond(w1 - w3)
	branch Test(GE,NZV) l000000000048CA48
	// succ:  l000000000048CC24 l000000000048CA48
l000000000048CC24:
	w1 = w1 + 0x00000001
	Mem0[x2 + 120:word32] = w1
	call rl_kill_text (retsize: 0;)
	goto l000000000048CA4C
	// succ:  l000000000048CA4C
l000000000048CC34:
	call rl_begin_undo_group (retsize: 0;)
	goto l000000000048CB00
	// succ:  l000000000048CB00
l000000000048CC3C:
	w0 = Mem0[x21 + 136:word32]
	x22 = 0x00000000004E4000
	NZCV = cond(w23 - w0)
	branch Test(GT,NZV) l000000000048CABC
	// succ:  l000000000048CC4C l000000000048CABC
l000000000048CC4C:
	x1 = 0x00000000004E3000
	w0 = Mem0[x22 + 120:word32]
	w1 = Mem0[x1 + 3900:word32]
	NZCV = cond(w0 - w1)
	branch Test(GE,NZV) l000000000048CABC
	// succ:  l000000000048CC60 l000000000048CABC
l000000000048CC60:
	w0 = w0 + 0x00000001
	Mem0[x22 + 120:word32] = w0
	goto l000000000048CABC
	// succ:  l000000000048CABC
l000000000048CC6C:
	__ctype_b_loc()
	sp = sp + 0xFFFFFFFFFFFFFFF8
	x0 = Mem0[x0:word64]
	v36 = Mem0[x0 + (int64) ((int32) w19):word16]
	w0 = (word32) v36
	branch (w0 & 0x00000100) == 0x00000000 l000000000048CB4C
	// succ:  l000000000048CC7C l000000000048CB4C
l000000000048CC7C:
	goto l000000000048CB58
	// succ:  l000000000048CB58
fn000000000048C9B4_exit:


// fn000000000048CC80
// Return size: 0
void fn000000000048CC80()
fn000000000048CC80_entry:
	// succ:  l000000000048CC80
l000000000048CC80:
	sp = fp
	sp = sp + -96
	Mem0[sp:word64] = x29
	sp = sp + 8
	Mem0[sp:word64] = x30
	x29 = x31 + 0x0000000000000000
	v6 = sp + 16
	Mem0[v6:word64] = x19
	v6 = v6 + 8
	Mem0[v6:word64] = x20
	x19 = 0x00000000004E3000
	v9 = sp + 32
	Mem0[v9:word64] = x21
	v9 = v9 + 8
	Mem0[v9:word64] = x22
	w21 = Mem0[x19 + 3900:word32]
	x22 = 0x00000000004E1000
	x1 = Mem0[x22 + 3256:word64]
	w2 = w21 + 0x00000001
	v15 = sp + 48
	Mem0[v15:word64] = x23
	v15 = v15 + 8
	Mem0[v15:word64] = x24
	Mem0[x19 + 3900:word32] = w2
	w20 = Mem0[x0 + 32:word32]
	v20 = sp + 64
	Mem0[v20:word64] = x25
	v20 = v20 + 8
	Mem0[v20:word64] = x26
	v23 = sp + 80
	Mem0[v23:word64] = x27
	v23 = v23 + 8
	Mem0[v23:word64] = x28
fn000000000048CC80_exit:


// fn000000000048CF50
// Return size: 0
void fn000000000048CF50()
fn000000000048CF50_entry:
	// succ:  l000000000048CF50
l000000000048CF50:
	sp = fp
	sp = sp + -48
	Mem0[sp:word64] = x29
	sp = sp + 8
	Mem0[sp:word64] = x30
	x29 = x31 + 0x0000000000000000
	v8 = sp + 16
	Mem0[v8:word64] = x19
	v8 = v8 + 8
	Mem0[v8:word64] = x20
	w19 = Mem0[x0 + 32:word32]
	v13 = sp + 32
	Mem0[v13:word64] = x21
	v13 = v13 + 8
	Mem0[v13:word64] = x22
	x20 = x0
	branch w19 == 0x00000000 l000000000048CFB8
	// succ:  l000000000048CF6C l000000000048CFB8
l000000000048CF6C:
	x0 = 0x00000000004C2000
	x0 = x0 + 0xFFFFFFFFFFFFFDA8
	w1 = w19
	strchr(x0, x1)
	sp = sp + 0xFFFFFFFFFFFFFFF8
	branch x0 == 0x0000000000000000 l000000000048CFB8
	// succ:  l000000000048CF80 l000000000048CFB8
l000000000048CF80:
	x2 = 0x00000000004E1000
	w3 = Mem0[x2 + 3168:word32]
	w1 = 0x00000400
	w1 = DPB(w1, 0x00000018, 16)
	w0 = 0x00000400
	w1 = w3 & w1
	w0 = DPB(w0, 0x00000018, 16)
	NZCV = cond(w1 - w0)
	branch Test(EQ,Z) l000000000048D090
	// succ:  l000000000048CFA4 l000000000048D090
l000000000048CFA4:
	x0 = x20
	v21 = sp + 32
	x21 = Mem0[v21:word64]
	v21 = v21 + 8
	x22 = Mem0[v21:word64]
	v22 = sp + 16
	x19 = Mem0[v22:word64]
	v22 = v22 + 8
	x20 = Mem0[v22:word64]
	x29 = Mem0[sp:word64]
	sp = sp + 8
	x30 = Mem0[sp:word64]
	sp = sp + 48
	// succ:  l000000000048CFB4_thunk_fn000000000048CC80
l000000000048CFB4_thunk_fn000000000048CC80:
	call fn000000000048CC80 (retsize: 0;)
	return
	// succ:  fn000000000048CF50_exit
l000000000048CFB8:
	w21 = Mem0[x20 + 28:word32]
	NZCV = cond(w21 - w19)
	branch Test(EQ,Z) l000000000048D0AC
	// succ:  l000000000048CFC4 l000000000048D0AC
l000000000048CFC4:
	w0 = w19 - 0x00000030
	w31 = w0 - 0x00000009
	NZCV = cond(w31)
	branch Test(UGT,ZC) l000000000048D064
	// succ:  l000000000048CFD0 l000000000048D064
l000000000048CFD0:
	x21 = 0x00000000004E1000
	w3 = Mem0[x21 + 3168:word32]
	w2 = 0x00000400
	w2 = DPB(w2, 0x00000018, 16)
	w1 = 0x00000400
	w2 = w3 & w2
	w1 = DPB(w1, 0x00000018, 16)
	NZCV = cond(w2 - w1)
	branch Test(EQ,Z) l000000000048D138
	// succ:  l000000000048CFF4 l000000000048D138
l000000000048CFF4:
	w31 = w2 - (0x00000180 << 12)
	NZCV = cond(w31)
	branch Test(EQ,Z) l000000000048D11C
	// succ:  l000000000048CFFC l000000000048D11C
l000000000048CFFC:
	x19 = 0x00000000004D9000
	w3 = w3 | 0x00000400
	w2 = 0x00000001
	x1 = 0x00000000004E1000
	w22 = Mem0[x19 + 1216:word32]
	Mem0[x1 + 3332:word32] = w2
	Mem0[x19 + 1216:word32] = w0
	Mem0[x21 + 3168:word32] = w3
	goto l000000000048D030
	// succ:  l000000000048D030
l000000000048D020:
	call _rl_arg_getchar (retsize: 0;)
	call fn000000000048C888 (retsize: 0;)
	NZCV = cond(w0 - w31)
	branch Test(LE,ZCV) l000000000048D10C
	// succ:  l000000000048D030 l000000000048D10C
l000000000048D030:
	call _rl_arg_overflow (retsize: 0;)
	branch w0 == 0x00000000 l000000000048D020
	// succ:  l000000000048D038 l000000000048D020
l000000000048D038:
	w0 = Mem0[x19 + 1216:word32]
	w22 = w0 * w22
	Mem0[x19 + 1216:word32] = w22
	call fn000000000048C75C (retsize: 0;)
	branch (w0 & 0x00000000) == 0x00000000 l000000000048D14C
	// succ:  l000000000048D04C l000000000048D14C
l000000000048D04C:
	Mem0[x20 + 32:word32] = w0
	v44 = sp + 32
	x21 = Mem0[v44:word64]
	v44 = v44 + 8
	x22 = Mem0[v44:word64]
	x0 = x20
	v45 = sp + 16
	x19 = Mem0[v45:word64]
	v45 = v45 + 8
	x20 = Mem0[v45:word64]
	x29 = Mem0[sp:word64]
	sp = sp + 8
	x30 = Mem0[sp:word64]
	sp = sp + 48
	// succ:  l000000000048D060_thunk_fn000000000048CC80
l000000000048D060_thunk_fn000000000048CC80:
	call fn000000000048CC80 (retsize: 0;)
	return
	// succ:  fn000000000048CF50_exit
l000000000048D064:
	x0 = 0x00000000004E1000
	w2 = Mem0[x0 + 3168:word32]
	w1 = 0xFFFFFBFF
	w1 = DPB(w1, 0xFFFFFFEF, 16)
	w1 = w2 & w1
	Mem0[x0 + 3168:word32] = w1
	w0 = 0x00000001
	// succ:  l000000000048D080
l000000000048D080:
	v42 = sp + 16
	x19 = Mem0[v42:word64]
	v42 = v42 + 8
	x20 = Mem0[v42:word64]
	v43 = sp + 32
	x21 = Mem0[v43:word64]
	v43 = v43 + 8
	x22 = Mem0[v43:word64]
	x29 = Mem0[sp:word64]
	sp = sp + 8
	x30 = Mem0[sp:word64]
	sp = sp + 48
	return
	// succ:  fn000000000048CF50_exit
l000000000048D090:
	x0 = x20
	v28 = sp + 32
	x21 = Mem0[v28:word64]
	v28 = v28 + 8
	x22 = Mem0[v28:word64]
	v29 = sp + 16
	x19 = Mem0[v29:word64]
	v29 = v29 + 8
	x20 = Mem0[v29:word64]
	x29 = Mem0[sp:word64]
	sp = sp + 8
	x30 = Mem0[sp:word64]
	sp = sp + 48
	w3 = w3 & 0xFFFFFBFF
	Mem0[x2 + 3168:word32] = w3
	// succ:  l000000000048D0A8_thunk_fn000000000048CC80
l000000000048D0A8_thunk_fn000000000048CC80:
	call fn000000000048CC80 (retsize: 0;)
	return
	// succ:  fn000000000048CF50_exit
l000000000048D0AC:
	w31 = w19 - 0x00000079
	NZCV = cond(w31)
	branch Test(EQ,Z) l000000000048D0C0
	// succ:  l000000000048D0B4 l000000000048D0C0
l000000000048D0B4:
	w0 = w19 - 0x00000063
	w31 = w0 - 0x00000001
	NZCV = cond(w31)
	branch Test(UGT,ZC) l000000000048CFC4
	// succ:  l000000000048D0C0 l000000000048CFC4
l000000000048D0C0:
	x0 = 0x00000000004E3000
	w3 = Mem0[x0 + 3900:word32]
	w1 = w21
	x2 = 0x00000000004E4000
	w0 = 0x00000001
	Mem0[x2 + 120:word32] = w3
	call rl_beg_of_line (retsize: 0;)
	x1 = 0x00000000004E1000
	x3 = 0x00000000004E1000
	w0 = Mem0[x1 + 3168:word32]
	x3 = x3 + 0xFFFFFFFFFFFFFD08
	Mem0[x3 + 156:word32] = w21
	w2 = w0 & 0xFFEFFFFF
	v52 = sp + 32
	x21 = Mem0[v52:word64]
	v52 = v52 + 8
	x22 = Mem0[v52:word64]
	x0 = x20
	v53 = sp + 16
	x19 = Mem0[v53:word64]
	v53 = v53 + 8
	x20 = Mem0[v53:word64]
	x29 = Mem0[sp:word64]
	sp = sp + 8
	x30 = Mem0[sp:word64]
	sp = sp + 48
	Mem0[x1 + 3168:word32] = w2
	// succ:  l000000000048D108_thunk_fn000000000048C9B4
l000000000048D108_thunk_fn000000000048C9B4:
	call fn000000000048C9B4 (retsize: 0;)
	return
	// succ:  fn000000000048CF50_exit
l000000000048D10C:
	w0 = Mem0[x21 + 3168:word32]
	w0 = w0 & 0xFFFFFBFF
	Mem0[x21 + 3168:word32] = w0
	goto l000000000048D038
	// succ:  l000000000048D038
l000000000048D11C:
	w3 = w3 | 0x00000400
	w0 = w19
	Mem0[x21 + 3168:word32] = w3
	v46 = sp + 16
	x19 = Mem0[v46:word64]
	v46 = v46 + 8
	x20 = Mem0[v46:word64]
	v47 = sp + 32
	x21 = Mem0[v47:word64]
	v47 = v47 + 8
	x22 = Mem0[v47:word64]
	x29 = Mem0[sp:word64]
	sp = sp + 8
	x30 = Mem0[sp:word64]
	sp = sp + 48
	// succ:  l000000000048D134_thunk_fn000000000048C888
l000000000048D134_thunk_fn000000000048C888:
	call fn000000000048C888 (retsize: 0;)
	return
	// succ:  fn000000000048CF50_exit
l000000000048D138:
	w0 = w19
	v48 = sp + 32
	x21 = Mem0[v48:word64]
	v48 = v48 + 8
	x22 = Mem0[v48:word64]
	v49 = sp + 16
	x19 = Mem0[v49:word64]
	v49 = v49 + 8
	x20 = Mem0[v49:word64]
	x29 = Mem0[sp:word64]
	sp = sp + 8
	x30 = Mem0[sp:word64]
	sp = sp + 48
	// succ:  l000000000048D148_thunk_fn000000000048C888
l000000000048D148_thunk_fn000000000048C888:
	call fn000000000048C888 (retsize: 0;)
	return
	// succ:  fn000000000048CF50_exit
l000000000048D14C:
	Mem0[x20 + 32:word32] = 0x00000000
	w0 = 0xFFFFFFFF
	goto l000000000048D080
	// succ:  l000000000048D080
fn000000000048CF50_exit:


// fn000000000048D158
// Return size: 0
void fn000000000048D158()
fn000000000048D158_entry:
	// succ:  l000000000048D158
l000000000048D158:
	sp = fp
	sp = sp + -48
	Mem0[sp:word64] = x29
	sp = sp + 8
	Mem0[sp:word64] = x30
	x29 = x31 + 0x0000000000000000
	v8 = sp + 16
	Mem0[v8:word64] = x19
	v8 = v8 + 8
	Mem0[v8:word64] = x20
	x19 = 0x00000000004E1000
	w2 = Mem0[x19 + 3168:word32]
	Mem0[sp + 32:word64] = x21
	w2 = w2 | 0x00000040
	Mem0[x19 + 3168:word32] = w2
	x21 = x0
	call rl_read_key (retsize: 0;)
	w2 = Mem0[x19 + 3168:word32]
	w20 = w0
	w2 = w2 & 0xFFFFFFBF
	Mem0[x19 + 3168:word32] = w2
	branch (w20 & 0x00000000) == 0x00000000 l000000000048D1EC
	// succ:  l000000000048D194 l000000000048D1EC
l000000000048D194:
	__ctype_get_mb_cur_max()
	sp = sp + 0xFFFFFFFFFFFFFFF8
	x31 = x0 - 0x0000000000000001
	NZCV = cond(x31)
	branch Test(ULE,ZC) l000000000048D1D8
	// succ:  l000000000048D1A0 l000000000048D1D8
l000000000048D1A0:
	x2 = 0x00000000004E2000
	w3 = Mem0[x2 + 3968:word32]
	w0 = w20
	branch w3 == 0x00000000 l000000000048D1C0
	// succ:  l000000000048D1B0 l000000000048D1C0
l000000000048D1B0:
	v18 = sp + 16
	x19 = Mem0[v18:word64]
	v18 = v18 + 8
	x20 = Mem0[v18:word64]
	x21 = Mem0[sp + 32:word64]
	x29 = Mem0[sp:word64]
	sp = sp + 8
	x30 = Mem0[sp:word64]
	sp = sp + 48
	return
	// succ:  fn000000000048D158_exit
l000000000048D1C0:
	x1 = x21
	v20 = sp + 16
	x19 = Mem0[v20:word64]
	v20 = v20 + 8
	x20 = Mem0[v20:word64]
	x21 = Mem0[sp + 32:word64]
	x29 = Mem0[sp:word64]
	sp = sp + 8
	x30 = Mem0[sp:word64]
	sp = sp + 48
	w2 = 0x00000010
	// succ:  l000000000048D1D4_thunk__rl_read_mbstring
l000000000048D1D4_thunk__rl_read_mbstring:
	call _rl_read_mbstring (retsize: 0;)
	return
	// succ:  fn000000000048D158_exit
l000000000048D1D8:
	w0 = w20
	x21 = Mem0[sp + 32:word64]
	v21 = sp + 16
	x19 = Mem0[v21:word64]
	v21 = v21 + 8
	x20 = Mem0[v21:word64]
	x29 = Mem0[sp:word64]
	sp = sp + 8
	x30 = Mem0[sp:word64]
	sp = sp + 48
	return
	// succ:  fn000000000048D158_exit
l000000000048D1EC:
	w0 = 0xFFFFFFFF
	goto l000000000048D1B0
	// succ:  l000000000048D1B0
fn000000000048D158_exit:


// _rl_vi_initialize_line
// Return size: 0
void _rl_vi_initialize_line()
_rl_vi_initialize_line_entry:
	// succ:  l000000000048D1F4
l000000000048D1F4:
	sp = fp
	x2 = 0x00000000004E1000
	x2 = x2 + 0xFFFFFFFFFFFFFD08
	x0 = x2 + 0x0000000000000008
	w1 = 0xFFFFFFFF
	x2 = x2 + 0x0000000000000070
	// succ:  l000000000048D208
l000000000048D208:
	Mem0[x0:word32] = w1
	x0 = x0 + 4
	x31 = x0 - x2
	NZCV = cond(x31)
	branch Test(NE,Z) l000000000048D208
	// succ:  l000000000048D214 l000000000048D208
l000000000048D214:
	x0 = 0x00000000004E1000
	w1 = Mem0[x0 + 3168:word32]
	w1 = w1 & 0xFFBFFFFF
	Mem0[x0 + 3168:word32] = w1
	return
	// succ:  _rl_vi_initialize_line_exit
_rl_vi_initialize_line_exit:


// _rl_vi_reset_last
// Return size: 0
void _rl_vi_reset_last()
_rl_vi_reset_last_entry:
	// succ:  l000000000048D228
l000000000048D228:
	sp = fp
	x0 = 0x00000000004D9000
	x0 = x0 + 0x00000000000004F0
	w1 = 0x00000001
	w2 = 0x00000069
	Mem0[x0:word32] = w2
	Mem0[x0 + 4:word32] = w1
	Mem0[x0 + 8:word32] = w1
	x0 = 0x00000000004E1000
	x0 = x0 + 0xFFFFFFFFFFFFFD08
	Mem0[x0 + 156:word32] = 0x00000000
	return
	// succ:  _rl_vi_reset_last_exit
_rl_vi_reset_last_exit:


// _rl_vi_set_last
// Return size: 0
void _rl_vi_set_last()
_rl_vi_set_last_entry:
	// succ:  l000000000048D254
l000000000048D254:
	sp = fp
	x3 = 0x00000000004D9000
	x3 = x3 + 0x00000000000004F0
	Mem0[x3:word32] = w0
	Mem0[x3 + 4:word32] = w1
	Mem0[x3 + 8:word32] = w2
	return
	// succ:  _rl_vi_set_last_exit
_rl_vi_set_last_exit:


// rl_vi_start_inserting
// Return size: 0
void rl_vi_start_inserting()
rl_vi_start_inserting_entry:
	// succ:  l000000000048D26C
l000000000048D26C:
	sp = fp
	x3 = 0x00000000004D9000
	x3 = x3 + 0x00000000000004F0
	Mem0[x3 + 8:word32] = w2
	x2 = 0x00000000004D9000
	Mem0[x3 + 4:word32] = w1
	x2 = x2 + 0x0000000000000500
	x1 = 0x00000000004D9000
	Mem0[x1 + 1200:word64] = x2
	x1 = 0x00000000004E1000
	x1 = x1 + 0xFFFFFFFFFFFFFD08
	Mem0[x3:word32] = w0
	Mem0[x1 + 152:word32] = w0
	return
	// succ:  rl_vi_start_inserting_exit
rl_vi_start_inserting_exit:


// _rl_vi_textmod_command
// Return size: 0
void _rl_vi_textmod_command()
_rl_vi_textmod_command_entry:
	// succ:  l000000000048D2A0
l000000000048D2A0:
	sp = fp
	sp = sp + -16
	Mem0[sp:word64] = x29
	sp = sp + 8
	Mem0[sp:word64] = x30
	x29 = x31 + 0x0000000000000000
	w1 = w0
	w0 = 0x00000000
	branch w1 == 0x00000000 l000000000048D2C8
	// succ:  l000000000048D2B4 l000000000048D2C8
l000000000048D2B4:
	x0 = 0x00000000004C2000
	x0 = x0 + 0xFFFFFFFFFFFFFDC0
	strchr(x0, x1)
	sp = sp + 0xFFFFFFFFFFFFFFF8
	x31 = x0 - x31
	NZCV = cond(x31)
	w0 = (word32) Test(NE,Z)
	// succ:  l000000000048D2C8
l000000000048D2C8:
	x29 = Mem0[sp:word64]
	sp = sp + 8
	x30 = Mem0[sp:word64]
	sp = sp + 16
	return
	// succ:  _rl_vi_textmod_command_exit
_rl_vi_textmod_command_exit:


// rl_vi_redo
// Return size: 0
void rl_vi_redo()
rl_vi_redo_entry:
	// succ:  l000000000048D2D0
l000000000048D2D0:
	sp = fp
	sp = sp + -32
	Mem0[sp:word64] = x29
	sp = sp + 8
	Mem0[sp:word64] = x30
	x29 = x31 + 0x0000000000000000
	x1 = 0x00000000004E1000
	w2 = Mem0[x1 + 3332:word32]
	v10 = sp + 16
	Mem0[v10:word64] = x19
	v10 = v10 + 8
	Mem0[v10:word64] = x20
	x1 = 0x00000000004D9000
	w20 = w0
	branch w2 != 0x00000000 l000000000048D30C
	// succ:  l000000000048D2F0 l000000000048D30C
l000000000048D2F0:
	x2 = x1 + 0x00000000000004F0
	w3 = Mem0[x2 + 4:word32]
	x0 = 0x00000000004D9000
	w2 = Mem0[x2 + 8:word32]
	Mem0[x0 + 1216:word32] = w3
	x0 = 0x00000000004D9000
	Mem0[x0 + 1220:word32] = w2
	// succ:  l000000000048D30C
l000000000048D30C:
	x1 = x1 + 0x00000000000004F0
	w2 = Mem0[x1:word32]
	x19 = 0x00000000004E1000
	x1 = x19 + 0xFFFFFFFFFFFFFD08
	w3 = 0x00000001
	Mem0[x1 + 148:word32] = w3
	w31 = w2 - 0x00000069
	NZCV = cond(w31)
	branch Test(EQ,Z) l000000000048D3C0
	// succ:  l000000000048D32C l000000000048D3C0
l000000000048D32C:
	w31 = w2 - 0x00000049
	NZCV = cond(w31)
	branch Test(EQ,Z) l000000000048D370
	// succ:  l000000000048D334 l000000000048D370
l000000000048D334:
	w31 = w2 - 0x00000061
	NZCV = cond(w31)
	branch Test(NE,Z) l000000000048D3D4
	// succ:  l000000000048D33C l000000000048D3D4
l000000000048D33C:
	x0 = Mem0[x1:word64]
	branch x0 == 0x0000000000000000 l000000000048D34C
	// succ:  l000000000048D344 l000000000048D34C
l000000000048D344:
	v19 = Mem0[x0:byte]
	w0 = (word32) v19
	branch w0 != 0x00000000 l000000000048D3FC
	// succ:  l000000000048D34C l000000000048D3FC
l000000000048D34C:
	x0 = 0x00000000004D9000
	x1 = Mem0[x0 + 1200:word64]
	w0 = w2
	call _rl_dispatch (retsize: 0;)
	x19 = x19 + 0xFFFFFFFFFFFFFD08
	Mem0[x19 + 148:word32] = 0x00000000
	v20 = sp + 16
	x19 = Mem0[v20:word64]
	v20 = v20 + 8
	x20 = Mem0[v20:word64]
	x29 = Mem0[sp:word64]
	sp = sp + 8
	x30 = Mem0[sp:word64]
	sp = sp + 32
	return
	// succ:  rl_vi_redo_exit
l000000000048D370:
	x0 = Mem0[x1:word64]
	branch x0 == 0x0000000000000000 l000000000048D34C
	// succ:  l000000000048D378 l000000000048D34C
l000000000048D378:
	v22 = Mem0[x0:byte]
	w0 = (word32) v22
	branch w0 == 0x00000000 l000000000048D34C
	// succ:  l000000000048D380 l000000000048D34C
l000000000048D380:
	w1 = w2
	w0 = w3
	call rl_beg_of_line (retsize: 0;)
	// succ:  l000000000048D38C
l000000000048D38C:
	w0 = w20
	call fn000000000048C32C (retsize: 0;)
	x0 = 0x00000000004E4000
	w0 = Mem0[x0 + 136:word32]
	NZCV = cond(w0 - w31)
	branch Test(LE,ZCV) l000000000048D3A8
	// succ:  l000000000048D3A4 l000000000048D3A8
l000000000048D3A4:
	call fn000000000048C614 (retsize: 0;)
	// succ:  l000000000048D3A8
l000000000048D3A8:
	x19 = x19 + 0xFFFFFFFFFFFFFD08
	w0 = 0x00000000
	Mem0[x19 + 148:word32] = 0x00000000
	v25 = sp + 16
	x19 = Mem0[v25:word64]
	v25 = v25 + 8
	x20 = Mem0[v25:word64]
	x29 = Mem0[sp:word64]
	sp = sp + 8
	x30 = Mem0[sp:word64]
	sp = sp + 32
	return
	// succ:  rl_vi_redo_exit
l000000000048D3C0:
	x0 = Mem0[x1:word64]
	branch x0 == 0x0000000000000000 l000000000048D34C
	// succ:  l000000000048D3C8 l000000000048D34C
l000000000048D3C8:
	v21 = Mem0[x0:byte]
	w0 = (word32) v21
	branch w0 == 0x00000000 l000000000048D34C
	// succ:  l000000000048D3D0 l000000000048D34C
l000000000048D3D0:
	goto l000000000048D38C
	// succ:  l000000000048D38C
l000000000048D3D4:
	w31 = w2 - 0x00000041
	NZCV = cond(w31)
	branch Test(NE,Z) l000000000048D34C
	// succ:  l000000000048D3DC l000000000048D34C
l000000000048D3DC:
	x0 = Mem0[x1:word64]
	branch x0 == 0x0000000000000000 l000000000048D34C
	// succ:  l000000000048D3E4 l000000000048D34C
l000000000048D3E4:
	v26 = Mem0[x0:byte]
	w0 = (word32) v26
	branch w0 == 0x00000000 l000000000048D34C
	// succ:  l000000000048D3EC l000000000048D34C
l000000000048D3EC:
	w1 = w2
	w0 = w3
	call rl_end_of_line (retsize: 0;)
	goto l000000000048D38C
	// succ:  l000000000048D38C
l000000000048D3FC:
	call fn000000000048C584 (retsize: 0;)
	goto l000000000048D38C
	// succ:  l000000000048D38C
rl_vi_redo_exit:


// rl_vi_undo
// Return size: 0
void rl_vi_undo()
rl_vi_undo_entry:
	// succ:  l000000000048D404
l000000000048D404:
	sp = fp
	// succ:  l000000000048D404_thunk_rl_undo_command
l000000000048D404_thunk_rl_undo_command:
	call rl_undo_command (retsize: 0;)
	return
	// succ:  rl_vi_undo_exit
rl_vi_undo_exit:


// rl_vi_yank_arg
// Return size: 0
void rl_vi_yank_arg()
rl_vi_yank_arg_entry:
	// succ:  l000000000048D408
l000000000048D408:
	sp = fp
	sp = sp + -16
	Mem0[sp:word64] = x29
	sp = sp + 8
	Mem0[sp:word64] = x30
	x29 = x31 + 0x0000000000000000
	x1 = 0x00000000004E1000
	w1 = Mem0[x1 + 3332:word32]
	branch w1 != 0x00000000 l000000000048D430
	// succ:  l000000000048D41C l000000000048D430
l000000000048D41C:
	w0 = 0x00000024
	call rl_yank_nth_arg (retsize: 0;)
	w0 = 0x00000000
	x29 = Mem0[sp:word64]
	sp = sp + 8
	x30 = Mem0[sp:word64]
	sp = sp + 16
	return
	// succ:  rl_vi_yank_arg_exit
l000000000048D430:
	w1 = 0x00000000
	w0 = w0 - 0x00000001
	call rl_yank_nth_arg (retsize: 0;)
	w0 = 0x00000000
	x29 = Mem0[sp:word64]
	sp = sp + 8
	x30 = Mem0[sp:word64]
	sp = sp + 16
	return
	// succ:  rl_vi_yank_arg_exit
rl_vi_yank_arg_exit:


// rl_vi_fetch_history
// Return size: 0
void rl_vi_fetch_history()
rl_vi_fetch_history_entry:
	// succ:  l000000000048D448
l000000000048D448:
	sp = fp
	sp = sp + -48
	Mem0[sp:word64] = x29
	sp = sp + 8
	Mem0[sp:word64] = x30
	x29 = x31 + 0x0000000000000000
	x2 = 0x00000000004E1000
	w2 = Mem0[x2 + 3332:word32]
	Mem0[sp + 16:word64] = x19
	w19 = w0
	branch w2 == 0x00000000 l000000000048D49C
	// succ:  l000000000048D464 l000000000048D49C
l000000000048D464:
	Mem0[x29 + 32:word64] = x1
	call where_history (retsize: 0;)
	x2 = 0x00000000004DE000
	w2 = Mem0[x2 + 1540:word32]
	x1 = Mem0[x29 + 32:word64]
	w0 = w0 + w2
	w0 = w0 - w19
	NZCV = cond(w0 - w31)
	branch Test(LE,ZCV) l000000000048D4B4
	// succ:  l000000000048D488 l000000000048D4B4
l000000000048D488:
	call rl_get_previous_history (retsize: 0;)
	w0 = 0x00000000
	x19 = Mem0[sp + 16:word64]
	x29 = Mem0[sp:word64]
	sp = sp + 8
	x30 = Mem0[sp:word64]
	sp = sp + 48
	return
	// succ:  rl_vi_fetch_history_exit
l000000000048D49C:
	w1 = w2
	call rl_beginning_of_history (retsize: 0;)
	w0 = 0x00000000
	x19 = Mem0[sp + 16:word64]
	x29 = Mem0[sp:word64]
	sp = sp + 8
	x30 = Mem0[sp:word64]
	sp = sp + 48
	return
	// succ:  rl_vi_fetch_history_exit
l000000000048D4B4:
	w0 = 0x00000000
	w1 = w0
	call rl_beginning_of_history (retsize: 0;)
	w0 = 0x00000000
	x19 = Mem0[sp + 16:word64]
	x29 = Mem0[sp:word64]
	sp = sp + 8
	x30 = Mem0[sp:word64]
	sp = sp + 48
	return
	// succ:  rl_vi_fetch_history_exit
rl_vi_fetch_history_exit:


// rl_vi_search_again
// Return size: 0
void rl_vi_search_again()
rl_vi_search_again_entry:
	// succ:  l000000000048D4D0
l000000000048D4D0:
	sp = fp
	sp = sp + -16
	Mem0[sp:word64] = x29
	sp = sp + 8
	Mem0[sp:word64] = x30
	x29 = x31 + 0x0000000000000000
	w31 = w1 - 0x0000004E
	NZCV = cond(w31)
	branch Test(EQ,Z) l000000000048D4F8
	// succ:  l000000000048D4E0 l000000000048D4F8
l000000000048D4E0:
	w31 = w1 - 0x0000006E
	NZCV = cond(w31)
	branch Test(NE,Z) l000000000048D4EC
	// succ:  l000000000048D4E8 l000000000048D4EC
l000000000048D4E8:
	call rl_noninc_reverse_search_again (retsize: 0;)
	// succ:  l000000000048D4EC
l000000000048D4EC:
	w0 = 0x00000000
	x29 = Mem0[sp:word64]
	sp = sp + 8
	x30 = Mem0[sp:word64]
	sp = sp + 16
	return
	// succ:  rl_vi_search_again_exit
l000000000048D4F8:
	call rl_noninc_forward_search_again (retsize: 0;)
	w0 = 0x00000000
	x29 = Mem0[sp:word64]
	sp = sp + 8
	x30 = Mem0[sp:word64]
	sp = sp + 16
	return
	// succ:  rl_vi_search_again_exit
rl_vi_search_again_exit:


// rl_vi_search
// Return size: 0
void rl_vi_search()
rl_vi_search_entry:
	// succ:  l000000000048D508
l000000000048D508:
	sp = fp
	sp = sp + -48
	Mem0[sp:word64] = x29
	sp = sp + 8
	Mem0[sp:word64] = x30
	x29 = x31 + 0x0000000000000000
	Mem0[sp + 16:word64] = x19
	w31 = w1 - 0x0000002F
	NZCV = cond(w31)
	w19 = w0
	branch Test(EQ,Z) l000000000048D560
	// succ:  l000000000048D520 l000000000048D560
l000000000048D520:
	w31 = w1 - 0x0000003F
	NZCV = cond(w31)
	branch Test(EQ,Z) l000000000048D53C
	// succ:  l000000000048D528 l000000000048D53C
l000000000048D528:
	call rl_ding (retsize: 0;)
	w0 = 0x00000000
	x19 = Mem0[sp + 16:word64]
	x29 = Mem0[sp:word64]
	sp = sp + 8
	x30 = Mem0[sp:word64]
	sp = sp + 48
	return
	// succ:  rl_vi_search_exit
l000000000048D53C:
	Mem0[x29 + 32:word64] = x1
	call _rl_free_saved_history_line (retsize: 0;)
	x1 = Mem0[x29 + 32:word64]
	w0 = w19
	call rl_noninc_forward_search (retsize: 0;)
	w0 = 0x00000000
	x19 = Mem0[sp + 16:word64]
	x29 = Mem0[sp:word64]
	sp = sp + 8
	x30 = Mem0[sp:word64]
	sp = sp + 48
	return
	// succ:  rl_vi_search_exit
l000000000048D560:
	Mem0[x29 + 32:word64] = x1
	call _rl_free_saved_history_line (retsize: 0;)
	x1 = Mem0[x29 + 32:word64]
	w0 = w19
	call rl_noninc_reverse_search (retsize: 0;)
	w0 = 0x00000000
	x19 = Mem0[sp + 16:word64]
	x29 = Mem0[sp:word64]
	sp = sp + 8
	x30 = Mem0[sp:word64]
	sp = sp + 48
	return
	// succ:  rl_vi_search_exit
rl_vi_search_exit:


// rl_vi_tilde_expand
// Return size: 0
void rl_vi_tilde_expand()
rl_vi_tilde_expand_entry:
	// succ:  l000000000048D584
l000000000048D584:
	sp = fp
	sp = sp + -32
	Mem0[sp:word64] = x29
	sp = sp + 8
	Mem0[sp:word64] = x30
	x29 = x31 + 0x0000000000000000
	w0 = 0x00000000
	Mem0[sp + 16:word64] = x19
	w19 = w1
	call rl_tilde_expand (retsize: 0;)
	x0 = 0x00000000004D9000
	w1 = Mem0[x0 + 1220:word32]
	x0 = 0x00000000004D9000
	x0 = x0 + 0x00000000000004F0
	Mem0[x0 + 8:word32] = w1
	w2 = 0x00000001
	x1 = 0x00000000004D9000
	Mem0[x0:word32] = w19
	Mem0[x0 + 4:word32] = w2
	x1 = x1 + 0x0000000000000500
	x0 = 0x00000000004D9000
	Mem0[x0 + 1200:word64] = x1
	x0 = 0x00000000004E1000
	x0 = x0 + 0xFFFFFFFFFFFFFD08
	Mem0[x0 + 152:word32] = w19
	w0 = 0x00000000
	x19 = Mem0[sp + 16:word64]
	x29 = Mem0[sp:word64]
	sp = sp + 8
	x30 = Mem0[sp:word64]
	sp = sp + 32
	return
	// succ:  rl_vi_tilde_expand_exit
rl_vi_tilde_expand_exit:


// rl_vi_fWord
// Return size: 0
void rl_vi_fWord()
rl_vi_fWord_entry:
	// succ:  l000000000048D5E8
l000000000048D5E8:
	sp = fp
	x1 = 0x00000000004E3000
	w7 = Mem0[x1 + 3900:word32]
	x4 = 0x00000000004E4000
	x1 = 0x00000000004E1000
	w8 = w7 - 0x00000001
	x6 = Mem0[x1 + 3256:word64]
	x4 = x4 + 0x0000000000000088
	w5 = w7 + 0x00000001
	branch w0 == 0x00000000 l000000000048D6C4
	// succ:  l000000000048D60C l000000000048D6C4
l000000000048D60C:
	w1 = Mem0[x4:word32]
	NZCV = cond(w8 - w1)
	branch Test(LE,ZCV) l000000000048D6C4
	// succ:  l000000000048D618 l000000000048D6C4
l000000000048D618:
l000000000048D6C4:
	w0 = 0x00000000
	return
	// succ:  rl_vi_fWord_exit
rl_vi_fWord_exit:


// rl_vi_bWord
// Return size: 0
void rl_vi_bWord()
rl_vi_bWord_entry:
	// succ:  l000000000048D6DC
l000000000048D6DC:
	sp = fp
	x1 = 0x00000000004E1000
	x3 = 0x00000000004E4000
	x6 = Mem0[x1 + 3256:word64]
	x3 = x3 + 0x0000000000000088
	branch w0 == 0x00000000 l000000000048D77C
	// succ:  l000000000048D6F0 l000000000048D77C
l000000000048D6F0:
	w1 = Mem0[x3:word32]
	NZCV = cond(w1 - w31)
	branch Test(LE,ZCV) l000000000048D77C
	// succ:  l000000000048D6FC l000000000048D77C
l000000000048D6FC:
l000000000048D77C:
	w0 = 0x00000000
	return
	// succ:  rl_vi_bWord_exit
rl_vi_bWord_exit:


// rl_vi_eWord
// Return size: 0
void rl_vi_eWord()
rl_vi_eWord_entry:
	// succ:  l000000000048D7E0
l000000000048D7E0:
	sp = fp
	x1 = 0x00000000004E3000
	w5 = Mem0[x1 + 3900:word32]
	x4 = 0x00000000004E4000
	x1 = 0x00000000004E1000
	w8 = w5 - 0x00000001
	x7 = Mem0[x1 + 3256:word64]
	x4 = x4 + 0x0000000000000088
	branch w0 == 0x00000000 l000000000048D878
	// succ:  l000000000048D800 l000000000048D878
l000000000048D800:
	w1 = Mem0[x4:word32]
	NZCV = cond(w8 - w1)
	branch Test(LE,ZCV) l000000000048D878
	// succ:  l000000000048D80C l000000000048D878
l000000000048D80C:
	v13 = Mem0[x7 + (int64) ((int32) w1):byte]
	w2 = (word32) v13
	w31 = w2 - 0x00000009
	NZCV = cond(w31)
	branch Test(EQ,Z) l000000000048D828
	// succ:  l000000000048D818 l000000000048D828
l000000000048D818:
	w31 = w2 - 0x00000020
	NZCV = cond(w31)
	branch Test(EQ,Z) l000000000048D828
	// succ:  l000000000048D820 l000000000048D828
l000000000048D820:
	w1 = w1 + 0x00000001
	Mem0[x4:word32] = w1
	// succ:  l000000000048D828
l000000000048D828:
	NZCV = cond(w5 - w1)
	branch Test(LE,ZCV) l000000000048D870
	// succ:  l000000000048D830 l000000000048D870
l000000000048D830:
l000000000048D870:
	w0 = w0 - 0x00000001
	branch w0 != 0x00000000 l000000000048D800
	// succ:  l000000000048D878 l000000000048D800
l000000000048D878:
	w0 = 0x00000000
	return
	// succ:  rl_vi_eWord_exit
rl_vi_eWord_exit:


// rl_vi_fword
// Return size: 0
void rl_vi_fword()
rl_vi_fword_entry:
	// succ:  l000000000048D964
l000000000048D964:
	sp = fp
	sp = sp + -80
	Mem0[sp:word64] = x29
	sp = sp + 8
	Mem0[sp:word64] = x30
	x29 = x31 + 0x0000000000000000
	x1 = 0x00000000004E3000
	v9 = sp + 32
	Mem0[v9:word64] = x21
	v9 = v9 + 8
	Mem0[v9:word64] = x22
	w21 = Mem0[x1 + 3900:word32]
	v13 = sp + 16
	Mem0[v13:word64] = x19
	v13 = v13 + 8
	Mem0[v13:word64] = x20
	v16 = sp + 48
	Mem0[v16:word64] = x23
	v16 = v16 + 8
	Mem0[v16:word64] = x24
	Mem0[sp + 64:word64] = x25
	x1 = 0x00000000004E1000
	x19 = 0x00000000004E4000
	w24 = w0
	w22 = w21 - 0x00000001
	x25 = Mem0[x1 + 3256:word64]
	x19 = x19 + 0x0000000000000088
	w20 = w21 + 0x00000001
	branch w24 == 0x00000000 l000000000048DA90
	// succ:  l000000000048D9A4 l000000000048DA90
l000000000048D9A4:
	w23 = Mem0[x19:word32]
	NZCV = cond(w22 - w23)
	branch Test(LE,ZCV) l000000000048DA90
	// succ:  l000000000048D9B0 l000000000048DA90
l000000000048D9B0:
	__ctype_b_loc()
	sp = sp + 0xFFFFFFFFFFFFFFF8
l000000000048DA90:
	w0 = 0x00000000
	v25 = sp + 16
	x19 = Mem0[v25:word64]
	v25 = v25 + 8
	x20 = Mem0[v25:word64]
	v26 = sp + 32
	x21 = Mem0[v26:word64]
	v26 = v26 + 8
	x22 = Mem0[v26:word64]
	v27 = sp + 48
	x23 = Mem0[v27:word64]
	v27 = v27 + 8
	x24 = Mem0[v27:word64]
	x25 = Mem0[sp + 64:word64]
	x29 = Mem0[sp:word64]
	sp = sp + 8
	x30 = Mem0[sp:word64]
	sp = sp + 80
	return
	// succ:  rl_vi_fword_exit
rl_vi_fword_exit:


// rl_vi_bword
// Return size: 0
void rl_vi_bword()
rl_vi_bword_entry:
	// succ:  l000000000048DB10
l000000000048DB10:
	sp = fp
	sp = sp + -64
	Mem0[sp:word64] = x29
	sp = sp + 8
	Mem0[sp:word64] = x30
	x29 = x31 + 0x0000000000000000
	v8 = sp + 16
	Mem0[v8:word64] = x19
	v8 = v8 + 8
	Mem0[v8:word64] = x20
	v11 = sp + 32
	Mem0[v11:word64] = x21
	v11 = v11 + 8
	Mem0[v11:word64] = x22
	v14 = sp + 48
	Mem0[v14:word64] = x23
	v14 = v14 + 8
	Mem0[v14:word64] = x24
	x1 = 0x00000000004E1000
	x19 = 0x00000000004E4000
	w24 = w0
	x21 = Mem0[x1 + 3256:word64]
	x19 = x19 + 0x0000000000000088
	branch w24 == 0x00000000 l000000000048DC0C
	// succ:  l000000000048DB3C l000000000048DC0C
l000000000048DB3C:
	w1 = Mem0[x19:word32]
	NZCV = cond(w1 - w31)
	branch Test(LE,ZCV) l000000000048DC0C
	// succ:  l000000000048DB48 l000000000048DC0C
l000000000048DB48:
l000000000048DC0C:
	w0 = 0x00000000
	v22 = sp + 16
	x19 = Mem0[v22:word64]
	v22 = v22 + 8
	x20 = Mem0[v22:word64]
	v23 = sp + 32
	x21 = Mem0[v23:word64]
	v23 = v23 + 8
	x22 = Mem0[v23:word64]
	v24 = sp + 48
	x23 = Mem0[v24:word64]
	v24 = v24 + 8
	x24 = Mem0[v24:word64]
	x29 = Mem0[sp:word64]
	sp = sp + 8
	x30 = Mem0[sp:word64]
	sp = sp + 64
	return
	// succ:  rl_vi_bword_exit
rl_vi_bword_exit:


// rl_vi_prev_word
// Return size: 0
void rl_vi_prev_word()
rl_vi_prev_word_entry:
	// succ:  l000000000048DD60
l000000000048DD60:
	sp = fp
	sp = sp + -48
	Mem0[sp:word64] = x29
	sp = sp + 8
	Mem0[sp:word64] = x30
	x29 = x31 + 0x0000000000000000
	v6 = sp + 16
	Mem0[v6:word64] = x19
	v6 = v6 + 8
	Mem0[v6:word64] = x20
	Mem0[sp + 32:word64] = x21
	w20 = w0
	w19 = w1
	branch (w20 & 0x00000000) == 0x00000000 l000000000048DDEC
	// succ:  l000000000048DD7C l000000000048DDEC
l000000000048DD7C:
	x0 = 0x00000000004E4000
	w0 = Mem0[x0 + 136:word32]
	branch w0 == 0x00000000 l000000000048DDD4
	// succ:  l000000000048DD88 l000000000048DDD4
l000000000048DD88:
	w21 = w1 & 0x000000FF
	NZCV = cond(w21 - w1)
	branch Test(EQ,Z) l000000000048DDB4
	// succ:  l000000000048DD94 l000000000048DDB4
l000000000048DD94:
	w0 = w20
	w1 = w19
	call rl_vi_bword (retsize: 0;)
	// succ:  l000000000048DDA0
l000000000048DDA0:
	w0 = 0x00000000
	v18 = sp + 16
	x19 = Mem0[v18:word64]
	v18 = v18 + 8
	x20 = Mem0[v18:word64]
	x21 = Mem0[sp + 32:word64]
	x29 = Mem0[sp:word64]
	sp = sp + 8
	x30 = Mem0[sp:word64]
	sp = sp + 48
	return
	// succ:  rl_vi_prev_word_exit
l000000000048DDB4:
	__ctype_b_loc()
	sp = sp + 0xFFFFFFFFFFFFFFF8
	x0 = Mem0[x0:word64]
	v19 = Mem0[x0 + (int64) ((int32) w21):word16]
	w0 = (word32) v19
	branch (w0 & 0x00000100) == 0x00000000 l000000000048DD94
	// succ:  l000000000048DDC4 l000000000048DD94
l000000000048DDC4:
	w0 = w20
	w1 = w21
	call rl_vi_bWord (retsize: 0;)
	goto l000000000048DDA0
	// succ:  l000000000048DDA0
l000000000048DDD4:
	call rl_ding (retsize: 0;)
	w0 = 0x00000000
	v20 = sp + 16
	x19 = Mem0[v20:word64]
	v20 = v20 + 8
	x20 = Mem0[v20:word64]
	x21 = Mem0[sp + 32:word64]
	x29 = Mem0[sp:word64]
	sp = sp + 8
	x30 = Mem0[sp:word64]
	sp = sp + 48
	return
	// succ:  rl_vi_prev_word_exit
l000000000048DDEC:
	w0 = w31 - w20
	x21 = Mem0[sp + 32:word64]
	v22 = sp + 16
	x19 = Mem0[v22:word64]
	v22 = v22 + 8
	x20 = Mem0[v22:word64]
	x29 = Mem0[sp:word64]
	sp = sp + 8
	x30 = Mem0[sp:word64]
	sp = sp + 48
	// succ:  l000000000048DDFC_thunk_rl_vi_next_word
l000000000048DDFC_thunk_rl_vi_next_word:
	call rl_vi_next_word (retsize: 0;)
	return
	// succ:  rl_vi_prev_word_exit
rl_vi_prev_word_exit:


// rl_vi_next_word
// Return size: 0
void rl_vi_next_word()
rl_vi_next_word_entry:
	// succ:  l000000000048DE00
l000000000048DE00:
	sp = fp
	sp = sp + -48
	Mem0[sp:word64] = x29
	sp = sp + 8
	Mem0[sp:word64] = x30
	x29 = x31 + 0x0000000000000000
	v8 = sp + 16
	Mem0[v8:word64] = x19
	v8 = v8 + 8
	Mem0[v8:word64] = x20
	Mem0[sp + 32:word64] = x21
	w20 = w0
	w19 = w1
	branch (w20 & 0x00000000) == 0x00000000 l000000000048DE9C
	// succ:  l000000000048DE1C l000000000048DE9C
l000000000048DE1C:
	x0 = 0x00000000004E3000
	w1 = Mem0[x0 + 3900:word32]
	x0 = 0x00000000004E4000
	w0 = Mem0[x0 + 136:word32]
	w1 = w1 - 0x00000001
	NZCV = cond(w1 - w0)
	branch Test(LE,ZCV) l000000000048DE84
	// succ:  l000000000048DE38 l000000000048DE84
l000000000048DE38:
	w21 = w19 & 0x000000FF
	NZCV = cond(w21 - w19)
	branch Test(EQ,Z) l000000000048DE64
	// succ:  l000000000048DE44 l000000000048DE64
l000000000048DE44:
	w0 = w20
	w1 = w19
	call rl_vi_fword (retsize: 0;)
	// succ:  l000000000048DE50
l000000000048DE50:
	w0 = 0x00000000
	v19 = sp + 16
	x19 = Mem0[v19:word64]
	v19 = v19 + 8
	x20 = Mem0[v19:word64]
	x21 = Mem0[sp + 32:word64]
	x29 = Mem0[sp:word64]
	sp = sp + 8
	x30 = Mem0[sp:word64]
	sp = sp + 48
	return
	// succ:  rl_vi_next_word_exit
l000000000048DE64:
	__ctype_b_loc()
	sp = sp + 0xFFFFFFFFFFFFFFF8
	x0 = Mem0[x0:word64]
	v24 = Mem0[x0 + (int64) ((int32) w21):word16]
	w0 = (word32) v24
	branch (w0 & 0x00000100) == 0x00000000 l000000000048DE44
	// succ:  l000000000048DE74 l000000000048DE44
l000000000048DE74:
	w0 = w20
	w1 = w21
	call rl_vi_fWord (retsize: 0;)
	goto l000000000048DE50
	// succ:  l000000000048DE50
l000000000048DE84:
	call rl_ding (retsize: 0;)
	w0 = 0x00000000
	v25 = sp + 16
	x19 = Mem0[v25:word64]
	v25 = v25 + 8
	x20 = Mem0[v25:word64]
	x21 = Mem0[sp + 32:word64]
	x29 = Mem0[sp:word64]
	sp = sp + 8
	x30 = Mem0[sp:word64]
	sp = sp + 48
	return
	// succ:  rl_vi_next_word_exit
l000000000048DE9C:
	w0 = w31 - w20
	x21 = Mem0[sp + 32:word64]
	v21 = sp + 16
	x19 = Mem0[v21:word64]
	v21 = v21 + 8
	x20 = Mem0[v21:word64]
	x29 = Mem0[sp:word64]
	sp = sp + 8
	x30 = Mem0[sp:word64]
	sp = sp + 48
	// succ:  l000000000048DEAC_thunk_rl_vi_prev_word
l000000000048DEAC_thunk_rl_vi_prev_word:
	call rl_vi_prev_word (retsize: 0;)
	return
	// succ:  rl_vi_next_word_exit
rl_vi_next_word_exit:


// rl_vi_eword
// Return size: 0
void rl_vi_eword()
rl_vi_eword_entry:
	// succ:  l000000000048DEB0
l000000000048DEB0:
	sp = fp
	sp = sp + -96
	Mem0[sp:word64] = x29
	sp = sp + 8
	Mem0[sp:word64] = x30
	x29 = x31 + 0x0000000000000000
	v8 = sp + 16
	Mem0[v8:word64] = x19
	v8 = v8 + 8
	Mem0[v8:word64] = x20
	v11 = sp + 32
	Mem0[v11:word64] = x21
	v11 = v11 + 8
	Mem0[v11:word64] = x22
	v14 = sp + 48
	Mem0[v14:word64] = x23
	v14 = v14 + 8
	Mem0[v14:word64] = x24
	v17 = sp + 64
	Mem0[v17:word64] = x25
	v17 = v17 + 8
	Mem0[v17:word64] = x26
	Mem0[sp + 80:word64] = x27
	branch w0 == 0x00000000 l000000000048DF80
	// succ:  l000000000048DED0 l000000000048DF80
l000000000048DED0:
	x1 = 0x00000000004E3000
	w21 = Mem0[x1 + 3900:word32]
	x20 = 0x00000000004E4000
	w22 = Mem0[x20 + 136:word32]
	w26 = w21 - 0x00000001
	NZCV = cond(w26 - w22)
	branch Test(LE,ZCV) l000000000048DF80
	// succ:  l000000000048DEEC l000000000048DF80
l000000000048DEEC:
	x1 = 0x00000000004E1000
	x24 = Mem0[x1 + 3256:word64]
	w27 = w0 - 0x00000001
	w25 = 0x00000000
	x20 = x20 + 0x0000000000000088
	// succ:  l000000000048DF00
l000000000048DF00:
	v28 = Mem0[x24 + (int64) ((int32) w22):byte]
	w0 = (word32) v28
	w31 = w0 - 0x00000009
	NZCV = cond(w31)
	branch Test(EQ,Z) l000000000048DF14
	// succ:  l000000000048DF0C l000000000048DF14
l000000000048DF0C:
	w31 = w0 - 0x00000020
	NZCV = cond(w31)
	branch Test(NE,Z) l000000000048DFA0
	// succ:  l000000000048DF14 l000000000048DFA0
l000000000048DF14:
	w22 = Mem0[x20:word32]
	// succ:  l000000000048DF18
l000000000048DF18:
	NZCV = cond(w21 - w22)
	branch Test(LE,ZCV) l000000000048DF64
	// succ:  l000000000048DF20 l000000000048DF64
l000000000048DF20:
l000000000048DF64:
	w22 = w22 - 0x00000001
	Mem0[x20:word32] = w22
	NZCV = cond(w25 - w27)
	branch Test(EQ,Z) l000000000048DF80
	// succ:  l000000000048DF74 l000000000048DF80
l000000000048DF74:
	NZCV = cond(w22 - w26)
	w25 = w25 + 0x00000001
	branch Test(LT,NV) l000000000048DF00
	// succ:  l000000000048DF80 l000000000048DF00
l000000000048DF80:
	w0 = 0x00000000
	v31 = sp + 16
	x19 = Mem0[v31:word64]
	v31 = v31 + 8
	x20 = Mem0[v31:word64]
	v32 = sp + 32
	x21 = Mem0[v32:word64]
	v32 = v32 + 8
	x22 = Mem0[v32:word64]
	v33 = sp + 48
	x23 = Mem0[v33:word64]
	v33 = v33 + 8
	x24 = Mem0[v33:word64]
	v34 = sp + 64
	x25 = Mem0[v34:word64]
	v34 = v34 + 8
	x26 = Mem0[v34:word64]
	x27 = Mem0[sp + 80:word64]
	x29 = Mem0[sp:word64]
	sp = sp + 8
	x30 = Mem0[sp:word64]
	sp = sp + 96
	return
	// succ:  rl_vi_eword_exit
l000000000048DFA0:
	w22 = w22 + 0x00000001
	Mem0[x20:word32] = w22
	goto l000000000048DF18
	// succ:  l000000000048DF18
rl_vi_eword_exit:


// rl_vi_end_word
// Return size: 0
void rl_vi_end_word()
rl_vi_end_word_entry:
	// succ:  l000000000048E088
l000000000048E088:
	sp = fp
	sp = sp + -48
	Mem0[sp:word64] = x29
	sp = sp + 8
	Mem0[sp:word64] = x30
	x29 = x31 + 0x0000000000000000
	v8 = sp + 16
	Mem0[v8:word64] = x19
	v8 = v8 + 8
	Mem0[v8:word64] = x20
	w19 = w0
	branch (w19 & 0x00000000) == 0x00000000 l000000000048E0F4
	// succ:  l000000000048E09C l000000000048E0F4
l000000000048E09C:
	w20 = w1 & 0x000000FF
	NZCV = cond(w20 - w1)
	branch Test(EQ,Z) l000000000048E0C0
	// succ:  l000000000048E0A8 l000000000048E0C0
l000000000048E0A8:
	w0 = w19
	call rl_vi_eword (retsize: 0;)
	w0 = 0x00000000
	// succ:  l000000000048E0B4
l000000000048E0B4:
	v15 = sp + 16
	x19 = Mem0[v15:word64]
	v15 = v15 + 8
	x20 = Mem0[v15:word64]
	x29 = Mem0[sp:word64]
	sp = sp + 8
	x30 = Mem0[sp:word64]
	sp = sp + 48
	return
	// succ:  rl_vi_end_word_exit
l000000000048E0C0:
	Mem0[x29 + 32:word64] = x1
	__ctype_b_loc()
	sp = sp + 0xFFFFFFFFFFFFFFF8
	x0 = Mem0[x0:word64]
	x1 = Mem0[x29 + 32:word64]
	v18 = Mem0[x0 + (int64) ((int32) w20):word16]
	w0 = (word32) v18
	branch (w0 & 0x00000100) == 0x00000000 l000000000048E0A8
	// succ:  l000000000048E0D8 l000000000048E0A8
l000000000048E0D8:
	w1 = w20
	w0 = w19
	call rl_vi_eWord (retsize: 0;)
	w0 = 0x00000000
	v19 = sp + 16
	x19 = Mem0[v19:word64]
	v19 = v19 + 8
	x20 = Mem0[v19:word64]
	x29 = Mem0[sp:word64]
	sp = sp + 8
	x30 = Mem0[sp:word64]
	sp = sp + 48
	return
	// succ:  rl_vi_end_word_exit
l000000000048E0F4:
	call rl_ding (retsize: 0;)
	w0 = 0xFFFFFFFF
	goto l000000000048E0B4
	// succ:  l000000000048E0B4
rl_vi_end_word_exit:


// rl_vi_complete
// Return size: 0
void rl_vi_complete()
rl_vi_complete_entry:
	// succ:  l000000000048E100
l000000000048E100:
	sp = fp
	sp = sp + -32
	Mem0[sp:word64] = x29
	sp = sp + 8
	Mem0[sp:word64] = x30
	x29 = x31 + 0x0000000000000000
	v8 = sp + 16
	Mem0[v8:word64] = x19
	v8 = v8 + 8
	Mem0[v8:word64] = x20
	x2 = 0x00000000004E3000
	x20 = 0x00000000004E4000
	w0 = Mem0[x20 + 136:word32]
	w2 = Mem0[x2 + 3900:word32]
	w19 = w1
	NZCV = cond(w0 - w2)
	branch Test(GE,NZV) l000000000048E140
	// succ:  l000000000048E128 l000000000048E140
l000000000048E128:
	x1 = 0x00000000004E1000
	x2 = Mem0[x1 + 3256:word64]
l000000000048E140:
	w31 = w19 - 0x0000002A
	NZCV = cond(w31)
	branch Test(EQ,Z) l000000000048E19C
	// succ:  l000000000048E148 l000000000048E19C
l000000000048E148:
	w31 = w19 - 0x0000003D
	NZCV = cond(w31)
	branch Test(EQ,Z) l000000000048E218
	// succ:  l000000000048E150 l000000000048E218
l000000000048E150:
	w31 = w19 - 0x0000005C
	NZCV = cond(w31)
	branch Test(EQ,Z) l000000000048E1A8
	// succ:  l000000000048E158 l000000000048E1A8
l000000000048E158:
	w1 = w19
	w0 = 0x00000000
	call rl_complete (retsize: 0;)
	w0 = 0x00000000
	v19 = sp + 16
	x19 = Mem0[v19:word64]
	v19 = v19 + 8
	x20 = Mem0[v19:word64]
	x29 = Mem0[sp:word64]
	sp = sp + 8
	x30 = Mem0[sp:word64]
	sp = sp + 32
	return
	// succ:  rl_vi_complete_exit
l000000000048E19C:
	w0 = w19
	call rl_complete_internal (retsize: 0;)
	goto l000000000048E1B0
	// succ:  l000000000048E1B0
l000000000048E1A8:
	w0 = 0x00000009
	call rl_complete_internal (retsize: 0;)
	// succ:  l000000000048E1B0
l000000000048E1B0:
	x0 = 0x00000000004D9000
	w1 = Mem0[x0 + 1220:word32]
	x0 = 0x00000000004D9000
	x0 = x0 + 0x00000000000004F0
	Mem0[x0 + 8:word32] = w1
	w2 = 0x00000001
	x1 = 0x00000000004D9000
	Mem0[x0:word32] = w19
	Mem0[x0 + 4:word32] = w2
	x1 = x1 + 0x0000000000000500
	x0 = 0x00000000004D9000
	Mem0[x0 + 1200:word64] = x1
	x0 = 0x00000000004E1000
	x0 = x0 + 0xFFFFFFFFFFFFFD08
	Mem0[x0 + 152:word32] = w19
	w0 = 0x00000000
	v22 = sp + 16
	x19 = Mem0[v22:word64]
	v22 = v22 + 8
	x20 = Mem0[v22:word64]
	x29 = Mem0[sp:word64]
	sp = sp + 8
	x30 = Mem0[sp:word64]
	sp = sp + 32
	return
	// succ:  rl_vi_complete_exit
l000000000048E218:
	w0 = 0x0000003F
	call rl_complete_internal (retsize: 0;)
	w0 = 0x00000000
	v20 = sp + 16
	x19 = Mem0[v20:word64]
	v20 = v20 + 8
	x20 = Mem0[v20:word64]
	x29 = Mem0[sp:word64]
	sp = sp + 8
	x30 = Mem0[sp:word64]
	sp = sp + 32
	return
	// succ:  rl_vi_complete_exit
rl_vi_complete_exit:


// rl_vi_insert_beg
// Return size: 0
void rl_vi_insert_beg()
rl_vi_insert_beg_entry:
	// succ:  l000000000048E230
l000000000048E230:
	sp = fp
	sp = sp + -32
	Mem0[sp:word64] = x29
	sp = sp + 8
	Mem0[sp:word64] = x30
	x29 = x31 + 0x0000000000000000
	w0 = 0x00000001
	Mem0[sp + 16:word64] = x19
	w19 = w1
	call rl_beg_of_line (retsize: 0;)
	x0 = 0x00000000004D9000
	w1 = Mem0[x0 + 1220:word32]
	x0 = 0x00000000004D9000
	x0 = x0 + 0x00000000000004F0
	Mem0[x0 + 8:word32] = w1
	w2 = 0x00000001
	x1 = 0x00000000004D9000
	Mem0[x0:word32] = w19
	Mem0[x0 + 4:word32] = w2
	x1 = x1 + 0x0000000000000500
	x0 = 0x00000000004D9000
	Mem0[x0 + 1200:word64] = x1
	x0 = 0x00000000004E1000
	x0 = x0 + 0xFFFFFFFFFFFFFD08
	Mem0[x0 + 152:word32] = w19
	w0 = 0x00000000
	x19 = Mem0[sp + 16:word64]
	x29 = Mem0[sp:word64]
	sp = sp + 8
	x30 = Mem0[sp:word64]
	sp = sp + 32
	return
	// succ:  rl_vi_insert_beg_exit
rl_vi_insert_beg_exit:


// rl_vi_append_mode
// Return size: 0
void rl_vi_append_mode()
rl_vi_append_mode_entry:
	// succ:  l000000000048E294
l000000000048E294:
	sp = fp
	sp = sp + -32
	Mem0[sp:word64] = x29
	sp = sp + 8
	Mem0[sp:word64] = x30
	x29 = x31 + 0x0000000000000000
	Mem0[x29 + 16:word64] = x1
	call fn000000000048C584 (retsize: 0;)
	x0 = 0x00000000004D9000
	w2 = Mem0[x0 + 1220:word32]
	x0 = 0x00000000004D9000
	x1 = Mem0[x29 + 16:word64]
	x0 = x0 + 0x00000000000004F0
	Mem0[x0 + 8:word32] = w2
	w3 = 0x00000001
	x2 = 0x00000000004D9000
	Mem0[x0:word32] = w1
	Mem0[x0 + 4:word32] = w3
	x2 = x2 + 0x0000000000000500
	x0 = 0x00000000004D9000
	Mem0[x0 + 1200:word64] = x2
	x0 = 0x00000000004E1000
	x0 = x0 + 0xFFFFFFFFFFFFFD08
	Mem0[x0 + 152:word32] = w1
	x29 = Mem0[sp:word64]
	sp = sp + 8
	x30 = Mem0[sp:word64]
	sp = sp + 32
	w0 = 0x00000000
	return
	// succ:  rl_vi_append_mode_exit
rl_vi_append_mode_exit:


// rl_vi_append_eol
// Return size: 0
void rl_vi_append_eol()
rl_vi_append_eol_entry:
	// succ:  l000000000048E2F0
l000000000048E2F0:
	sp = fp
	sp = sp + -32
	Mem0[sp:word64] = x29
	sp = sp + 8
	Mem0[sp:word64] = x30
	x29 = x31 + 0x0000000000000000
	w0 = 0x00000001
	Mem0[sp + 16:word64] = x19
	w19 = w1
	call rl_end_of_line (retsize: 0;)
	call fn000000000048C584 (retsize: 0;)
	x0 = 0x00000000004D9000
	w1 = Mem0[x0 + 1220:word32]
	x0 = 0x00000000004D9000
	x0 = x0 + 0x00000000000004F0
	Mem0[x0 + 8:word32] = w1
	w2 = 0x00000001
	x1 = 0x00000000004D9000
	Mem0[x0:word32] = w19
	Mem0[x0 + 4:word32] = w2
	x1 = x1 + 0x0000000000000500
	x0 = 0x00000000004D9000
	Mem0[x0 + 1200:word64] = x1
	x0 = 0x00000000004E1000
	x0 = x0 + 0xFFFFFFFFFFFFFD08
	Mem0[x0 + 152:word32] = w19
	w0 = 0x00000000
	x19 = Mem0[sp + 16:word64]
	x29 = Mem0[sp:word64]
	sp = sp + 8
	x30 = Mem0[sp:word64]
	sp = sp + 32
	return
	// succ:  rl_vi_append_eol_exit
rl_vi_append_eol_exit:


// rl_vi_eof_maybe
// Return size: 0
void rl_vi_eof_maybe()
rl_vi_eof_maybe_entry:
	// succ:  l000000000048E358
l000000000048E358:
	sp = fp
	w0 = 0x00000001
	w1 = 0x0000000A
	// succ:  l000000000048E360_thunk_rl_newline
l000000000048E360_thunk_rl_newline:
	call rl_newline (retsize: 0;)
	return
	// succ:  rl_vi_eof_maybe_exit
rl_vi_eof_maybe_exit:


// rl_vi_insertion_mode
// Return size: 0
void rl_vi_insertion_mode()
rl_vi_insertion_mode_entry:
	// succ:  l000000000048E364
l000000000048E364:
	sp = fp
	x2 = 0x00000000004D9000
	x2 = x2 + 0x0000000000000500
	x0 = 0x00000000004D9000
	Mem0[x0 + 1200:word64] = x2
	x0 = 0x00000000004E1000
	x0 = x0 + 0xFFFFFFFFFFFFFD08
	Mem0[x0 + 152:word32] = w1
	w0 = 0x00000000
	return
	// succ:  rl_vi_insertion_mode_exit
rl_vi_insertion_mode_exit:


// rl_vi_insert_mode
// Return size: 0
void rl_vi_insert_mode()
rl_vi_insert_mode_entry:
	// succ:  l000000000048E388
l000000000048E388:
	sp = fp
	x0 = 0x00000000004D9000
	w2 = Mem0[x0 + 1220:word32]
	x0 = 0x00000000004D9000
	x0 = x0 + 0x00000000000004F0
	Mem0[x0 + 8:word32] = w2
	w3 = 0x00000001
	x2 = 0x00000000004D9000
	Mem0[x0:word32] = w1
	Mem0[x0 + 4:word32] = w3
	x2 = x2 + 0x0000000000000500
	x0 = 0x00000000004D9000
	Mem0[x0 + 1200:word64] = x2
	x0 = 0x00000000004E1000
	x0 = x0 + 0xFFFFFFFFFFFFFD08
	Mem0[x0 + 152:word32] = w1
	w0 = 0x00000000
	return
	// succ:  rl_vi_insert_mode_exit
rl_vi_insert_mode_exit:


// _rl_vi_done_inserting
// Return size: 0
void _rl_vi_done_inserting()
_rl_vi_done_inserting_entry:
	// succ:  l000000000048E3CC
l000000000048E3CC:
	sp = fp
	sp = sp + -32
	Mem0[sp:word64] = x29
	sp = sp + 8
	Mem0[sp:word64] = x30
	x29 = x31 + 0x0000000000000000
	v8 = sp + 16
	Mem0[v8:word64] = x19
	v8 = v8 + 8
	Mem0[v8:word64] = x20
	x20 = 0x00000000004E1000
	x19 = x20 + 0xFFFFFFFFFFFFFD08
	w0 = Mem0[x19 + 144:word32]
	branch w0 != 0x00000000 l000000000048E450
	// succ:  l000000000048E3E8 l000000000048E450
l000000000048E3E8:
	x0 = 0x00000000004E2000
	x0 = Mem0[x0 + 2728:word64]
	w1 = Mem0[x19 + 152:word32]
	branch x0 == 0x0000000000000000 l000000000048E408
	// succ:  l000000000048E3F8 l000000000048E408
l000000000048E3F8:
	w2 = 0xFFFFFFD7
	w2 = w1 & w2
	w31 = w2 - 0x00000041
	NZCV = cond(w31)
	branch Test(EQ,Z) l000000000048E448
	// succ:  l000000000048E408 l000000000048E448
l000000000048E408:
	w31 = w1 - 0x00000043
	NZCV = cond(w31)
	branch Test(EQ,Z) l000000000048E47C
	// succ:  l000000000048E410 l000000000048E47C
l000000000048E410:
	x19 = 0x00000000004E2000
	w0 = Mem0[x19 + 2740:word32]
	x19 = x19 + 0xFFFFFFFFFFFFFAB4
	NZCV = cond(w0 - w31)
	branch Test(LE,ZCV) l000000000048E434
	// succ:  l000000000048E424 l000000000048E434
l000000000048E424:
	call rl_end_undo_group (retsize: 0;)
	w0 = Mem0[x19:word32]
	NZCV = cond(w0 - w31)
	branch Test(GT,NZV) l000000000048E424
	// succ:  l000000000048E434 l000000000048E424
l000000000048E434:
	x20 = x20 + 0xFFFFFFFFFFFFFD08
	Mem0[x20 + 160:word32] = 0x00000000
	v18 = sp + 16
	x19 = Mem0[v18:word64]
	v18 = v18 + 8
	x20 = Mem0[v18:word64]
	x29 = Mem0[sp:word64]
	sp = sp + 8
	x30 = Mem0[sp:word64]
	sp = sp + 32
	return
	// succ:  _rl_vi_done_inserting_exit
l000000000048E448:
	call fn000000000048C67C (retsize: 0;)
	goto l000000000048E410
	// succ:  l000000000048E410
l000000000048E450:
	call rl_end_undo_group (retsize: 0;)
	x0 = 0x00000000004E2000
	x0 = Mem0[x0 + 2728:word64]
	Mem0[x19 + 144:word32] = 0x00000000
	x0 = Mem0[x0:word64]
	call fn000000000048C67C (retsize: 0;)
	w0 = 0x00000001
	Mem0[x19 + 160:word32] = w0
	v19 = sp + 16
	x19 = Mem0[v19:word64]
	v19 = v19 + 8
	x20 = Mem0[v19:word64]
	x29 = Mem0[sp:word64]
	sp = sp + 8
	x30 = Mem0[sp:word64]
	sp = sp + 32
	return
	// succ:  _rl_vi_done_inserting_exit
l000000000048E47C:
	call rl_end_undo_group (retsize: 0;)
	goto l000000000048E410
	// succ:  l000000000048E410
_rl_vi_done_inserting_exit:


// rl_vi_movement_mode
// Return size: 0
void rl_vi_movement_mode()
rl_vi_movement_mode_entry:
	// succ:  l000000000048E484
l000000000048E484:
	sp = fp
	sp = sp + -32
	Mem0[sp:word64] = x29
	sp = sp + 8
	Mem0[sp:word64] = x30
	x29 = x31 + 0x0000000000000000
	x0 = 0x00000000004E4000
	w0 = Mem0[x0 + 136:word32]
	Mem0[sp + 16:word64] = x19
	NZCV = cond(w0 - w31)
	branch Test(LE,ZCV) l000000000048E4A8
	// succ:  l000000000048E4A0 l000000000048E4A8
l000000000048E4A0:
	w0 = 0x00000001
	call rl_backward_char (retsize: 0;)
	// succ:  l000000000048E4A8
l000000000048E4A8:
	x1 = 0x00000000004DA000
	x0 = 0x00000000004D9000
	x1 = x1 + 0x0000000000000510
	Mem0[x0 + 1200:word64] = x1
	x19 = 0x00000000004E1000
	call _rl_vi_done_inserting (retsize: 0;)
	w0 = Mem0[x19 + 3168:word32]
	branch (w0 & 0x00000000) == 0x00000000 l000000000048E4D0
	// succ:  l000000000048E4C8 l000000000048E4D0
l000000000048E4C8:
	call rl_free_undo_list (retsize: 0;)
	w0 = Mem0[x19 + 3168:word32]
	// succ:  l000000000048E4D0
l000000000048E4D0:
	w0 = w0 | 0x00400000
	Mem0[x19 + 3168:word32] = w0
	w0 = 0x00000000
	x19 = Mem0[sp + 16:word64]
	x29 = Mem0[sp:word64]
	sp = sp + 8
	x30 = Mem0[sp:word64]
	sp = sp + 32
	return
	// succ:  rl_vi_movement_mode_exit
rl_vi_movement_mode_exit:


// rl_vi_arg_digit
// Return size: 0
void rl_vi_arg_digit()
rl_vi_arg_digit_entry:
	// succ:  l000000000048E4E8
l000000000048E4E8:
	sp = fp
	w31 = w1 - 0x00000030
	NZCV = cond(w31)
	w2 = w1
	branch Test(EQ,Z) l000000000048E4FC
	// succ:  l000000000048E4F4 l000000000048E4FC
l000000000048E4F4:
	w1 = w2
	// succ:  l000000000048E4F8_thunk_rl_digit_argument
l000000000048E4F8_thunk_rl_digit_argument:
	call rl_digit_argument (retsize: 0;)
	return
	// succ:  rl_vi_arg_digit_exit
l000000000048E4FC:
	x3 = 0x00000000004D9000
	w3 = Mem0[x3 + 1216:word32]
	w31 = w3 - 0x00000001
	NZCV = cond(w31)
	branch Test(NE,Z) l000000000048E4F4
	// succ:  l000000000048E50C l000000000048E4F4
l000000000048E50C:
	x4 = 0x00000000004E1000
	w4 = Mem0[x4 + 3332:word32]
	branch w4 != 0x00000000 l000000000048E4F4
	// succ:  l000000000048E518 l000000000048E4F4
l000000000048E518:
	w0 = w3
	// succ:  l000000000048E51C_thunk_rl_beg_of_line
l000000000048E51C_thunk_rl_beg_of_line:
	call rl_beg_of_line (retsize: 0;)
	return
	// succ:  rl_vi_arg_digit_exit
rl_vi_arg_digit_exit:


// rl_vi_put
// Return size: 0
void rl_vi_put()
rl_vi_put_entry:
	// succ:  l000000000048E520
l000000000048E520:
	sp = fp
	sp = sp + -48
	Mem0[sp:word64] = x29
	sp = sp + 8
	Mem0[sp:word64] = x30
	x29 = x31 + 0x0000000000000000
	v8 = sp + 16
	Mem0[v8:word64] = x19
	v8 = v8 + 8
	Mem0[v8:word64] = x20
	Mem0[sp + 32:word64] = x21
	NZCV = cond(w1 - (uint32) ((byte) w1))
	w20 = w1
	w19 = w0
	branch Test(EQ,Z) l000000000048E5AC
	// succ:  l000000000048E540 l000000000048E5AC
l000000000048E540:
	x21 = 0x00000000004E4000
	x0 = 0x00000000004E3000
	w1 = Mem0[x21 + 136:word32]
	w0 = Mem0[x0 + 3900:word32]
	NZCV = cond(w1 - w0)
	branch Test(LT,NV) l000000000048E590
	// succ:  l000000000048E558 l000000000048E590
l000000000048E558:
	branch w19 == 0x00000000 l000000000048E570
	// succ:  l000000000048E55C l000000000048E570
l000000000048E55C:
	w0 = 0x00000001
	w1 = w20
	call rl_yank (retsize: 0;)
	w19 = w19 - 0x00000001
	NZCV = cond(w19)
	branch Test(NE,Z) l000000000048E55C
	// succ:  l000000000048E570 l000000000048E55C
l000000000048E570:
	w1 = w20
	w0 = 0x00000001
	call rl_backward_char (retsize: 0;)
	w0 = 0x00000000
	v18 = sp + 16
	x19 = Mem0[v18:word64]
	v18 = v18 + 8
	x20 = Mem0[v18:word64]
	x21 = Mem0[sp + 32:word64]
	x29 = Mem0[sp:word64]
	sp = sp + 8
	x30 = Mem0[sp:word64]
	sp = sp + 48
	return
	// succ:  rl_vi_put_exit
l000000000048E590:
	x0 = 0x00000000004E1000
	w2 = 0x00000001
	x0 = Mem0[x0 + 3256:word64]
	w3 = w2
	call _rl_find_next_mbchar (retsize: 0;)
	Mem0[x21 + 136:word32] = w0
	goto l000000000048E558
	// succ:  l000000000048E558
l000000000048E5AC:
	__ctype_b_loc()
	sp = sp + 0xFFFFFFFFFFFFFFF8
	x0 = Mem0[x0:word64]
	v19 = Mem0[x0 + (int64) ((int32) w20):word16]
	w0 = (word32) v19
	branch (w0 & 0x00000100) == 0x00000000 l000000000048E558
	// succ:  l000000000048E5BC l000000000048E558
l000000000048E5BC:
	goto l000000000048E540
	// succ:  l000000000048E540
rl_vi_put_exit:


// rl_vi_check
// Return size: 0
void rl_vi_check()
rl_vi_check_entry:
	// succ:  l000000000048E5C0
l000000000048E5C0:
	sp = fp
	sp = sp + -32
	Mem0[sp:word64] = x29
	sp = sp + 8
	Mem0[sp:word64] = x30
	x29 = x31 + 0x0000000000000000
	Mem0[sp + 16:word64] = x19
	x19 = 0x00000000004E4000
	w0 = Mem0[x19 + 136:word32]
	branch w0 == 0x00000000 l000000000048E5E8
	// succ:  l000000000048E5D8 l000000000048E5E8
l000000000048E5D8:
	x1 = 0x00000000004E3000
	w1 = Mem0[x1 + 3900:word32]
	NZCV = cond(w0 - w1)
	branch Test(EQ,Z) l000000000048E5F8
	// succ:  l000000000048E5E8 l000000000048E5F8
l000000000048E5E8:
	w0 = 0x00000000
	x19 = Mem0[sp + 16:word64]
	x29 = Mem0[sp:word64]
	sp = sp + 8
	x30 = Mem0[sp:word64]
	sp = sp + 32
	return
	// succ:  rl_vi_check_exit
l000000000048E5F8:
	__ctype_get_mb_cur_max()
	sp = sp + 0xFFFFFFFFFFFFFFF8
	x31 = x0 - 0x0000000000000001
	NZCV = cond(x31)
	branch Test(ULE,ZC) l000000000048E610
	// succ:  l000000000048E604 l000000000048E610
l000000000048E604:
	x0 = 0x00000000004E2000
	w0 = Mem0[x0 + 3968:word32]
	branch w0 == 0x00000000 l000000000048E62C
	// succ:  l000000000048E610 l000000000048E62C
l000000000048E610:
	w0 = Mem0[x19 + 136:word32]
	w0 = w0 - 0x00000001
	Mem0[x19 + 136:word32] = w0
	w0 = 0x00000000
	x19 = Mem0[sp + 16:word64]
	x29 = Mem0[sp:word64]
	sp = sp + 8
	x30 = Mem0[sp:word64]
	sp = sp + 32
	return
	// succ:  rl_vi_check_exit
l000000000048E62C:
	x0 = 0x00000000004E1000
	x0 = Mem0[x0 + 3256:word64]
	w1 = Mem0[x19 + 136:word32]
	w2 = 0x00000001
	call _rl_find_prev_mbchar (retsize: 0;)
	Mem0[x19 + 136:word32] = w0
	goto l000000000048E5E8
	// succ:  l000000000048E5E8
rl_vi_check_exit:


// rl_vi_column
// Return size: 0
void rl_vi_column()
rl_vi_column_entry:
	// succ:  l000000000048E648
l000000000048E648:
	sp = fp
	sp = sp + -16
	Mem0[sp:word64] = x29
	sp = sp + 8
	Mem0[sp:word64] = x30
	x29 = x31 + 0x0000000000000000
	x2 = 0x00000000004E3000
	w2 = Mem0[x2 + 3900:word32]
	NZCV = cond(w2 - w0)
	branch Test(LT,NV) l000000000048E678
	// succ:  l000000000048E660 l000000000048E678
l000000000048E660:
	w0 = w0 - 0x00000001
	x1 = 0x00000000004E4000
	Mem0[x1 + 136:word32] = w0
	x29 = Mem0[sp:word64]
	sp = sp + 8
	x30 = Mem0[sp:word64]
	sp = sp + 16
	w0 = 0x00000000
	return
	// succ:  rl_vi_column_exit
l000000000048E678:
	w0 = 0x00000001
	call rl_end_of_line (retsize: 0;)
	w0 = 0x00000000
	x29 = Mem0[sp:word64]
	sp = sp + 8
	x30 = Mem0[sp:word64]
	sp = sp + 16
	return
	// succ:  rl_vi_column_exit
rl_vi_column_exit:


// _rl_vi_domove_callback
// Return size: 0
void _rl_vi_domove_callback()
_rl_vi_domove_callback_entry:
	// succ:  l000000000048E68C
l000000000048E68C:
	sp = fp
	sp = sp + -32
	Mem0[sp:word64] = x29
	sp = sp + 8
	Mem0[sp:word64] = x30
	x29 = x31 + 0x0000000000000000
	Mem0[sp + 16:word64] = x19
	x19 = x0
	call fn000000000048C75C (retsize: 0;)
	Mem0[x19 + 32:word32] = w0
	x0 = x19
	call fn000000000048CF50 (retsize: 0;)
	NZCV = cond(w0 - w31)
	w0 = (word32) Test(NE,Z)
	x19 = Mem0[sp + 16:word64]
	x29 = Mem0[sp:word64]
	sp = sp + 8
	x30 = Mem0[sp:word64]
	sp = sp + 32
	return
	// succ:  _rl_vi_domove_callback_exit
_rl_vi_domove_callback_exit:


// rl_vi_domove
// Return size: 0
void rl_vi_domove()
rl_vi_domove_entry:
	// succ:  l000000000048E6C0
l000000000048E6C0:
	sp = fp
	sp = sp + -48
	Mem0[sp:word64] = x29
	sp = sp + 8
	Mem0[sp:word64] = x30
	x29 = x31 + 0x0000000000000000
	x0 = 0x00000000004E1000
	x0 = x0 + 0xFFFFFFFFFFFFFD08
	Mem0[sp + 16:word64] = x19
	x19 = Mem0[x0 + 168:word64]
	Mem0[x29 + 32:word64] = x1
	call fn000000000048C75C (retsize: 0;)
	x1 = Mem0[x29 + 32:word64]
	Mem0[x19 + 32:word32] = w0
	Mem0[x1:word32] = w0
	w0 = Mem0[x19 + 32:word32]
	branch (w0 & 0x00000000) == 0x00000000 l000000000048E704
	// succ:  l000000000048E6F4 l000000000048E704
l000000000048E6F4:
	x0 = x19
	x19 = Mem0[sp + 16:word64]
	x29 = Mem0[sp:word64]
	sp = sp + 8
	x30 = Mem0[sp:word64]
	sp = sp + 48
	// succ:  l000000000048E700_thunk_fn000000000048CF50
l000000000048E700_thunk_fn000000000048CF50:
	call fn000000000048CF50 (retsize: 0;)
	return
	// succ:  rl_vi_domove_exit
l000000000048E704:
	Mem0[x19 + 32:word32] = 0x00000000
	w0 = 0xFFFFFFFF
	x19 = Mem0[sp + 16:word64]
	x29 = Mem0[sp:word64]
	sp = sp + 8
	x30 = Mem0[sp:word64]
	sp = sp + 48
	return
	// succ:  rl_vi_domove_exit
rl_vi_domove_exit:


// rl_vi_delete_to
// Return size: 0
void rl_vi_delete_to()
rl_vi_delete_to_entry:
	// succ:  l000000000048E718
l000000000048E718:
	sp = fp
	sp = sp + -80
	Mem0[sp:word64] = x29
	sp = sp + 8
	Mem0[sp:word64] = x30
	x29 = x31 + 0x0000000000000000
	w0 = 0x00000001
	v9 = sp + 16
	Mem0[v9:word64] = x19
	v9 = v9 + 8
	Mem0[v9:word64] = x20
	v12 = sp + 32
	Mem0[v12:word64] = x21
	v12 = v12 + 8
	Mem0[v12:word64] = x22
	Mem0[sp + 48:word64] = x23
	w21 = w1
	call fn000000000048C4A0 (retsize: 0;)
	x19 = x0
	x0 = 0x00000000004E4000
	w0 = Mem0[x0 + 136:word32]
	x20 = 0x00000000004E1000
	x1 = x20 + 0xFFFFFFFFFFFFFD08
	x23 = 0x00000000004E4000
	w22 = w21 & 0x000000FF
	Mem0[x1 + 168:word64] = x19
	Mem0[x19 + 20:word32] = w0
	Mem0[x23 + 120:word32] = w0
	NZCV = cond(w22 - w21)
	branch Test(EQ,Z) l000000000048E80C
	// succ:  l000000000048E768 l000000000048E80C
l000000000048E768:
	x22 = x20 + 0xFFFFFFFFFFFFFD08
	w0 = Mem0[x22 + 148:word32]
	branch w0 != 0x00000000 l000000000048E79C
	// succ:  l000000000048E774 l000000000048E79C
l000000000048E774:
	x2 = 0x00000000004E1000
	w1 = Mem0[x2 + 3168:word32]
	branch (w1 & 0x00000000) == 0x00000000 l000000000048E848
	// succ:  l000000000048E780 l000000000048E848
l000000000048E780:
	w1 = w1 | 0x00100000
	v22 = sp + 16
	x19 = Mem0[v22:word64]
	v22 = v22 + 8
	x20 = Mem0[v22:word64]
	v23 = sp + 32
	x21 = Mem0[v23:word64]
	v23 = v23 + 8
	x22 = Mem0[v23:word64]
	x23 = Mem0[sp + 48:word64]
	Mem0[x2 + 3168:word32] = w1
	x29 = Mem0[sp:word64]
	sp = sp + 8
	x30 = Mem0[sp:word64]
	sp = sp + 80
	return
	// succ:  rl_vi_delete_to_exit
l000000000048E79C:
	w0 = Mem0[x22 + 156:word32]
	w31 = w0 - 0x00000064
	NZCV = cond(w31)
	branch Test(NE,Z) l000000000048E834
	// succ:  l000000000048E7A8 l000000000048E834
l000000000048E7A8:
	x1 = 0x00000000004E3000
	w2 = Mem0[x1 + 3900:word32]
	Mem0[x19 + 32:word32] = w0
	w1 = w21
	w0 = 0x00000001
	Mem0[x23 + 120:word32] = w2
	call rl_beg_of_line (retsize: 0;)
	x1 = 0x00000000004E1000
	w2 = Mem0[x1 + 3168:word32]
	x0 = Mem0[x22 + 168:word64]
	w2 = w2 & 0xFFEFFFFF
	Mem0[x1 + 3168:word32] = w2
	call fn000000000048C9B4 (retsize: 0;)
	w19 = w0
	// succ:  l000000000048E7E0
l000000000048E7E0:
	branch (w19 & 0x00000000) == 0x00000000 l000000000048E85C
	// succ:  l000000000048E7E4 l000000000048E85C
l000000000048E7E4:
	x20 = x20 + 0xFFFFFFFFFFFFFD08
	x0 = Mem0[x20 + 168:word64]
	call xfree (retsize: 0;)
	w0 = w19
	Mem0[x20 + 168:word64] = 0x0000000000000000
	v26 = sp + 32
	x21 = Mem0[v26:word64]
	v26 = v26 + 8
	x22 = Mem0[v26:word64]
	v27 = sp + 16
	x19 = Mem0[v27:word64]
	v27 = v27 + 8
	x20 = Mem0[v27:word64]
	x23 = Mem0[sp + 48:word64]
	x29 = Mem0[sp:word64]
	sp = sp + 8
	x30 = Mem0[sp:word64]
	sp = sp + 80
	return
	// succ:  rl_vi_delete_to_exit
l000000000048E80C:
	__ctype_b_loc()
	sp = sp + 0xFFFFFFFFFFFFFFF8
	x0 = Mem0[x0:word64]
	v24 = Mem0[x0 + (int64) ((int32) w22):word16]
	w0 = (word32) v24
	branch (w0 & 0x00000100) == 0x00000000 l000000000048E768
	// succ:  l000000000048E81C l000000000048E768
l000000000048E81C:
	w0 = 0x00000024
	Mem0[x19 + 32:word32] = w0
	x0 = x19
	call fn000000000048CC80 (retsize: 0;)
	w19 = w0
	goto l000000000048E7E0
	// succ:  l000000000048E7E0
l000000000048E834:
	Mem0[x19 + 32:word32] = w0
	x0 = x19
	call fn000000000048CC80 (retsize: 0;)
	w19 = w0
	goto l000000000048E7E0
	// succ:  l000000000048E7E0
l000000000048E848:
	w0 = w21
	x1 = x29 + 0x0000000000000040
	call rl_vi_domove (retsize: 0;)
	w19 = w0
	goto l000000000048E7E0
	// succ:  l000000000048E7E0
l000000000048E85C:
	call rl_ding (retsize: 0;)
	w19 = 0xFFFFFFFF
	goto l000000000048E7E4
	// succ:  l000000000048E7E4
rl_vi_delete_to_exit:


// rl_vi_change_to
// Return size: 0
void rl_vi_change_to()
rl_vi_change_to_entry:
	// succ:  l000000000048E868
l000000000048E868:
	sp = fp
	sp = sp + -80
	Mem0[sp:word64] = x29
	sp = sp + 8
	Mem0[sp:word64] = x30
	x29 = x31 + 0x0000000000000000
	w0 = 0x00000002
	v7 = sp + 16
	Mem0[v7:word64] = x19
	v7 = v7 + 8
	Mem0[v7:word64] = x20
	v10 = sp + 32
	Mem0[v10:word64] = x21
	v10 = v10 + 8
	Mem0[v10:word64] = x22
	Mem0[sp + 48:word64] = x23
	w21 = w1
	call fn000000000048C4A0 (retsize: 0;)
	x19 = x0
	x0 = 0x00000000004E4000
	w0 = Mem0[x0 + 136:word32]
	x20 = 0x00000000004E1000
	x1 = x20 + 0xFFFFFFFFFFFFFD08
	x23 = 0x00000000004E4000
	w22 = w21 & 0x000000FF
	Mem0[x1 + 168:word64] = x19
	Mem0[x19 + 20:word32] = w0
	Mem0[x23 + 120:word32] = w0
	NZCV = cond(w22 - w21)
	branch Test(EQ,Z) l000000000048E95C
	// succ:  l000000000048E8B8 l000000000048E95C
l000000000048E8B8:
	x22 = x20 + 0xFFFFFFFFFFFFFD08
	w0 = Mem0[x22 + 148:word32]
	branch w0 != 0x00000000 l000000000048E8EC
	// succ:  l000000000048E8C4 l000000000048E8EC
l000000000048E8C4:
	x2 = 0x00000000004E1000
	w1 = Mem0[x2 + 3168:word32]
	branch (w1 & 0x00000000) == 0x00000000 l000000000048E998
	// succ:  l000000000048E8D0 l000000000048E998
l000000000048E8D0:
	w1 = w1 | 0x00100000
	v22 = sp + 16
	x19 = Mem0[v22:word64]
	v22 = v22 + 8
	x20 = Mem0[v22:word64]
	v23 = sp + 32
	x21 = Mem0[v23:word64]
	v23 = v23 + 8
	x22 = Mem0[v23:word64]
	x23 = Mem0[sp + 48:word64]
	Mem0[x2 + 3168:word32] = w1
	x29 = Mem0[sp:word64]
	sp = sp + 8
	x30 = Mem0[sp:word64]
	sp = sp + 80
	return
	// succ:  rl_vi_change_to_exit
l000000000048E8EC:
	w0 = Mem0[x22 + 156:word32]
	w31 = w0 - 0x00000063
	NZCV = cond(w31)
	branch Test(NE,Z) l000000000048E984
	// succ:  l000000000048E8F8 l000000000048E984
l000000000048E8F8:
	x1 = 0x00000000004E3000
	w2 = Mem0[x1 + 3900:word32]
	Mem0[x19 + 32:word32] = w0
	w1 = w21
	w0 = 0x00000001
	Mem0[x23 + 120:word32] = w2
	call rl_beg_of_line (retsize: 0;)
	x1 = 0x00000000004E1000
	w2 = Mem0[x1 + 3168:word32]
	x0 = Mem0[x22 + 168:word64]
	w2 = w2 & 0xFFEFFFFF
	Mem0[x1 + 3168:word32] = w2
	call fn000000000048C9B4 (retsize: 0;)
	w19 = w0
	// succ:  l000000000048E930
l000000000048E930:
	branch (w19 & 0x00000000) == 0x00000000 l000000000048E9AC
	// succ:  l000000000048E934 l000000000048E9AC
l000000000048E934:
	x20 = x20 + 0xFFFFFFFFFFFFFD08
	x0 = Mem0[x20 + 168:word64]
	call xfree (retsize: 0;)
	w0 = w19
	Mem0[x20 + 168:word64] = 0x0000000000000000
	v25 = sp + 32
	x21 = Mem0[v25:word64]
	v25 = v25 + 8
	x22 = Mem0[v25:word64]
	v26 = sp + 16
	x19 = Mem0[v26:word64]
	v26 = v26 + 8
	x20 = Mem0[v26:word64]
	x23 = Mem0[sp + 48:word64]
	x29 = Mem0[sp:word64]
	sp = sp + 8
	x30 = Mem0[sp:word64]
	sp = sp + 80
	return
	// succ:  rl_vi_change_to_exit
l000000000048E95C:
	__ctype_b_loc()
	sp = sp + 0xFFFFFFFFFFFFFFF8
	x0 = Mem0[x0:word64]
	v29 = Mem0[x0 + (int64) ((int32) w22):word16]
	w0 = (word32) v29
	branch (w0 & 0x00000100) == 0x00000000 l000000000048E8B8
	// succ:  l000000000048E96C l000000000048E8B8
l000000000048E96C:
	w0 = 0x00000024
	Mem0[x19 + 32:word32] = w0
	x0 = x19
	call fn000000000048CC80 (retsize: 0;)
	w19 = w0
	goto l000000000048E930
	// succ:  l000000000048E930
l000000000048E984:
	Mem0[x19 + 32:word32] = w0
	x0 = x19
	call fn000000000048CC80 (retsize: 0;)
	w19 = w0
	goto l000000000048E930
	// succ:  l000000000048E930
l000000000048E998:
	w0 = w21
	x1 = x29 + 0x0000000000000040
	call rl_vi_domove (retsize: 0;)
	w19 = w0
	goto l000000000048E930
	// succ:  l000000000048E930
l000000000048E9AC:
	call rl_ding (retsize: 0;)
	w19 = 0xFFFFFFFF
	goto l000000000048E934
	// succ:  l000000000048E934
rl_vi_change_to_exit:


// rl_vi_yank_to
// Return size: 0
void rl_vi_yank_to()
rl_vi_yank_to_entry:
	// succ:  l000000000048E9B8
l000000000048E9B8:
	sp = fp
	sp = sp + -80
	Mem0[sp:word64] = x29
	sp = sp + 8
	Mem0[sp:word64] = x30
	x29 = x31 + 0x0000000000000000
	w0 = 0x00000004
	v9 = sp + 16
	Mem0[v9:word64] = x19
	v9 = v9 + 8
	Mem0[v9:word64] = x20
	v12 = sp + 32
	Mem0[v12:word64] = x21
	v12 = v12 + 8
	Mem0[v12:word64] = x22
	Mem0[sp + 48:word64] = x23
	w21 = w1
	call fn000000000048C4A0 (retsize: 0;)
	x19 = x0
	x0 = 0x00000000004E4000
	w0 = Mem0[x0 + 136:word32]
	x20 = 0x00000000004E1000
	x1 = x20 + 0xFFFFFFFFFFFFFD08
	x23 = 0x00000000004E4000
	w22 = w21 & 0x000000FF
	Mem0[x1 + 168:word64] = x19
	Mem0[x19 + 20:word32] = w0
	Mem0[x23 + 120:word32] = w0
	NZCV = cond(w22 - w21)
	branch Test(EQ,Z) l000000000048EAAC
	// succ:  l000000000048EA08 l000000000048EAAC
l000000000048EA08:
	x22 = x20 + 0xFFFFFFFFFFFFFD08
	w0 = Mem0[x22 + 148:word32]
	branch w0 != 0x00000000 l000000000048EA3C
	// succ:  l000000000048EA14 l000000000048EA3C
l000000000048EA14:
	x2 = 0x00000000004E1000
	w1 = Mem0[x2 + 3168:word32]
	branch (w1 & 0x00000000) == 0x00000000 l000000000048EAE8
	// succ:  l000000000048EA20 l000000000048EAE8
l000000000048EA20:
	w1 = w1 | 0x00100000
	v22 = sp + 16
	x19 = Mem0[v22:word64]
	v22 = v22 + 8
	x20 = Mem0[v22:word64]
	v23 = sp + 32
	x21 = Mem0[v23:word64]
	v23 = v23 + 8
	x22 = Mem0[v23:word64]
	x23 = Mem0[sp + 48:word64]
	Mem0[x2 + 3168:word32] = w1
	x29 = Mem0[sp:word64]
	sp = sp + 8
	x30 = Mem0[sp:word64]
	sp = sp + 80
	return
	// succ:  rl_vi_yank_to_exit
l000000000048EA3C:
	w0 = Mem0[x22 + 156:word32]
	w31 = w0 - 0x00000079
	NZCV = cond(w31)
	branch Test(NE,Z) l000000000048EAD4
	// succ:  l000000000048EA48 l000000000048EAD4
l000000000048EA48:
	x1 = 0x00000000004E3000
	w2 = Mem0[x1 + 3900:word32]
	Mem0[x19 + 32:word32] = w0
	w1 = w21
	w0 = 0x00000001
	Mem0[x23 + 120:word32] = w2
	call rl_beg_of_line (retsize: 0;)
	x1 = 0x00000000004E1000
	w2 = Mem0[x1 + 3168:word32]
	x0 = Mem0[x22 + 168:word64]
	w2 = w2 & 0xFFEFFFFF
	Mem0[x1 + 3168:word32] = w2
	call fn000000000048C9B4 (retsize: 0;)
	w19 = w0
	// succ:  l000000000048EA80
l000000000048EA80:
	branch (w19 & 0x00000000) == 0x00000000 l000000000048EAFC
	// succ:  l000000000048EA84 l000000000048EAFC
l000000000048EA84:
	x20 = x20 + 0xFFFFFFFFFFFFFD08
	x0 = Mem0[x20 + 168:word64]
	call xfree (retsize: 0;)
	w0 = w19
	Mem0[x20 + 168:word64] = 0x0000000000000000
	v26 = sp + 32
	x21 = Mem0[v26:word64]
	v26 = v26 + 8
	x22 = Mem0[v26:word64]
	v27 = sp + 16
	x19 = Mem0[v27:word64]
	v27 = v27 + 8
	x20 = Mem0[v27:word64]
	x23 = Mem0[sp + 48:word64]
	x29 = Mem0[sp:word64]
	sp = sp + 8
	x30 = Mem0[sp:word64]
	sp = sp + 80
	return
	// succ:  rl_vi_yank_to_exit
l000000000048EAAC:
	__ctype_b_loc()
	sp = sp + 0xFFFFFFFFFFFFFFF8
	x0 = Mem0[x0:word64]
	v24 = Mem0[x0 + (int64) ((int32) w22):word16]
	w0 = (word32) v24
	branch (w0 & 0x00000100) == 0x00000000 l000000000048EA08
	// succ:  l000000000048EABC l000000000048EA08
l000000000048EABC:
	w0 = 0x00000024
	Mem0[x19 + 32:word32] = w0
	x0 = x19
	call fn000000000048CC80 (retsize: 0;)
	w19 = w0
	goto l000000000048EA80
	// succ:  l000000000048EA80
l000000000048EAD4:
	Mem0[x19 + 32:word32] = w0
	x0 = x19
	call fn000000000048CC80 (retsize: 0;)
	w19 = w0
	goto l000000000048EA80
	// succ:  l000000000048EA80
l000000000048EAE8:
	w0 = w21
	x1 = x29 + 0x0000000000000040
	call rl_vi_domove (retsize: 0;)
	w19 = w0
	goto l000000000048EA80
	// succ:  l000000000048EA80
l000000000048EAFC:
	call rl_ding (retsize: 0;)
	w19 = 0xFFFFFFFF
	goto l000000000048EA84
	// succ:  l000000000048EA84
rl_vi_yank_to_exit:


// rl_vi_delete
// Return size: 0
void rl_vi_delete()
rl_vi_delete_entry:
	// succ:  l000000000048EB08
l000000000048EB08:
	sp = fp
	sp = sp + -48
	Mem0[sp:word64] = x29
	sp = sp + 8
	Mem0[sp:word64] = x30
	x29 = x31 + 0x0000000000000000
	v8 = sp + 16
	Mem0[v8:word64] = x19
	v8 = v8 + 8
	Mem0[v8:word64] = x20
	v11 = sp + 32
	Mem0[v11:word64] = x21
	v11 = v11 + 8
	Mem0[v11:word64] = x22
	w19 = w0
	w22 = w1
	branch (w19 & 0x00000000) == 0x00000000 l000000000048EC0C
	// succ:  l000000000048EB24 l000000000048EC0C
l000000000048EB24:
	x21 = 0x00000000004E3000
	w0 = Mem0[x21 + 3900:word32]
	branch w0 == 0x00000000 l000000000048EC20
	// succ:  l000000000048EB30 l000000000048EC20
l000000000048EB30:
	__ctype_get_mb_cur_max()
	sp = sp + 0xFFFFFFFFFFFFFFF8
	x31 = x0 - 0x0000000000000001
	NZCV = cond(x31)
	x20 = 0x00000000004E4000
	branch Test(ULE,ZC) l000000000048EB4C
	// succ:  l000000000048EB40 l000000000048EB4C
l000000000048EB40:
	x0 = 0x00000000004E2000
	w0 = Mem0[x0 + 3968:word32]
	branch w0 == 0x00000000 l000000000048EB98
	// succ:  l000000000048EB4C l000000000048EB98
l000000000048EB4C:
	w0 = Mem0[x20 + 136:word32]
	w1 = Mem0[x21 + 3900:word32]
	w19 = w0 + w19
	NZCV = cond(w19 - w1)
l000000000048EB84:
	w0 = w19
	v32 = sp + 32
	x21 = Mem0[v32:word64]
	v32 = v32 + 8
	x22 = Mem0[v32:word64]
	v33 = sp + 16
	x19 = Mem0[v33:word64]
	v33 = v33 + 8
	x20 = Mem0[v33:word64]
	x29 = Mem0[sp:word64]
	sp = sp + 8
	x30 = Mem0[sp:word64]
	sp = sp + 48
	return
	// succ:  rl_vi_delete_exit
l000000000048EB98:
	x0 = 0x00000000004E1000
	w1 = Mem0[x20 + 136:word32]
	x0 = Mem0[x0 + 3256:word64]
	w2 = w19
	w3 = 0x00000001
	call _rl_find_next_mbchar (retsize: 0;)
	w1 = Mem0[x21 + 3900:word32]
	w19 = w0
	NZCV = cond(w19 - w1)
	w0 = Mem0[x20 + 136:word32]
l000000000048EC0C:
	w0 = w31 - w19
	v20 = sp + 32
	x21 = Mem0[v20:word64]
	v20 = v20 + 8
	x22 = Mem0[v20:word64]
	v21 = sp + 16
	x19 = Mem0[v21:word64]
	v21 = v21 + 8
	x20 = Mem0[v21:word64]
	x29 = Mem0[sp:word64]
	sp = sp + 8
	x30 = Mem0[sp:word64]
	sp = sp + 48
	// succ:  l000000000048EC1C_thunk_rl_vi_rubout
l000000000048EC1C_thunk_rl_vi_rubout:
	call rl_vi_rubout (retsize: 0;)
	return
	// succ:  rl_vi_delete_exit
l000000000048EC20:
	call rl_ding (retsize: 0;)
	w19 = 0xFFFFFFFF
	goto l000000000048EB84
	// succ:  l000000000048EB84
rl_vi_delete_exit:


// rl_vi_change_case
// Return size: 0
void rl_vi_change_case()
rl_vi_change_case_entry:
	// succ:  l000000000048EC2C
l000000000048EC2C:
	sp = fp
	sp = sp + -128
	Mem0[sp:word64] = x29
	sp = sp + 8
	Mem0[sp:word64] = x30
	x29 = x31 + 0x0000000000000000
	v8 = sp + 48
	Mem0[v8:word64] = x23
	v8 = v8 + 8
	Mem0[v8:word64] = x24
	x23 = 0x00000000004E4000
	x24 = 0x00000000004E3000
	w2 = Mem0[x23 + 136:word32]
	w1 = Mem0[x24 + 3900:word32]
	v13 = sp + 16
	Mem0[v13:word64] = x19
	v13 = v13 + 8
	Mem0[v13:word64] = x20
	v16 = sp + 32
	Mem0[v16:word64] = x21
	v16 = v16 + 8
	Mem0[v16:word64] = x22
	Mem0[sp + 64:word64] = x25
	NZCV = cond(w2 - w1)
	w20 = w0
	branch Test(LT,NV) l000000000048EC7C
	// succ:  l000000000048EC60 l000000000048EC7C
l000000000048EC60:
	w0 = 0x00000000
	v22 = sp + 16
	x19 = Mem0[v22:word64]
	v22 = v22 + 8
	x20 = Mem0[v22:word64]
	v23 = sp + 32
	x21 = Mem0[v23:word64]
	v23 = v23 + 8
	x22 = Mem0[v23:word64]
	v24 = sp + 48
	x23 = Mem0[v24:word64]
	v24 = v24 + 8
	x24 = Mem0[v24:word64]
	x25 = Mem0[sp + 64:word64]
	x29 = Mem0[sp:word64]
	sp = sp + 8
	x30 = Mem0[sp:word64]
	sp = sp + 128
	return
	// succ:  rl_vi_change_case_exit
l000000000048EC7C:
	__ctype_get_mb_cur_max()
	sp = sp + 0xFFFFFFFFFFFFFFF8
	x31 = x0 - 0x0000000000000001
	NZCV = cond(x31)
	branch Test(ULE,ZC) l000000000048EC94
	// succ:  l000000000048EC88 l000000000048EC94
l000000000048EC88:
	x0 = 0x00000000004E2000
	w0 = Mem0[x0 + 3968:word32]
	branch w0 == 0x00000000 l000000000048ED5C
	// succ:  l000000000048EC94 l000000000048ED5C
l000000000048EC94:
	w21 = 0x00000000
	x23 = x23 + 0x0000000000000088
	x24 = x24 + 0xFFFFFFFFFFFFFF3C
	x25 = 0x00000000004E1000
	// succ:  l000000000048ECA4
l000000000048ECA4:
	branch w20 == 0x00000000 l000000000048EC60
	// succ:  l000000000048ECA8 l000000000048EC60
l000000000048ECA8:
	w19 = Mem0[x23:word32]
	w0 = Mem0[x24:word32]
	NZCV = cond(w19 - w0)
	branch Test(GE,NZV) l000000000048EC60
	// succ:  l000000000048ECB8 l000000000048EC60
l000000000048ECB8:
	__ctype_b_loc()
	sp = sp + 0xFFFFFFFFFFFFFFF8
	x1 = Mem0[x0:word64]
	x0 = Mem0[x25 + 3256:word64]
	v32 = Mem0[x0 + (int64) ((int32) w19):byte]
	w22 = (word32) v32
	v33 = Mem0[x1 + x22 * 2:word16]
	w0 = (word32) v33
	branch (w0 & 0x00000100) == 0x00000000 l000000000048ED20
	// succ:  l000000000048ECD0 l000000000048ED20
l000000000048ECD0:
	__ctype_tolower_loc()
	sp = sp + 0xFFFFFFFFFFFFFFF8
	x0 = Mem0[x0:word64]
	w21 = Mem0[x0 + x22 * 4:word32]
	branch w21 == 0x00000000 l000000000048ED34
	// succ:  l000000000048ECE0 l000000000048ED34
l000000000048ECE0:
	call rl_begin_undo_group (retsize: 0;)
	w0 = 0x00000001
	w1 = w21
	call rl_vi_delete (retsize: 0;)
	w0 = Mem0[x23:word32]
	NZCV = cond(w19 - w0)
	branch Test(LE,ZCV) l000000000048ED04
	// succ:  l000000000048ECFC l000000000048ED04
l000000000048ECFC:
	w0 = w0 + 0x00000001
	Mem0[x23:word32] = w0
	// succ:  l000000000048ED04
l000000000048ED04:
	w1 = w21
	w0 = 0x00000001
	call _rl_insert_char (retsize: 0;)
	call rl_end_undo_group (retsize: 0;)
	call rl_vi_check (retsize: 0;)
	w20 = w20 - 0x00000001
	goto l000000000048ECA4
	// succ:  l000000000048ECA4
l000000000048ED20:
	branch (w0 & 0x00000200) == 0x00000000 l000000000048ED48
	// succ:  l000000000048ED24 l000000000048ED48
l000000000048ED24:
	__ctype_toupper_loc()
	sp = sp + 0xFFFFFFFFFFFFFFF8
	x0 = Mem0[x0:word64]
	w21 = Mem0[x0 + x22 * 4:word32]
	branch w21 != 0x00000000 l000000000048ECE0
	// succ:  l000000000048ED34 l000000000048ECE0
l000000000048ED34:
	w0 = 0x00000001
	w1 = w21
	call rl_forward_char (retsize: 0;)
	w20 = w20 - 0x00000001
	goto l000000000048ECA4
	// succ:  l000000000048ECA4
l000000000048ED48:
	w1 = w21
	w0 = 0x00000001
	call rl_forward_char (retsize: 0;)
	w20 = w20 - 0x00000001
	goto l000000000048ECA4
	// succ:  l000000000048ECA4
l000000000048ED5C:
	x21 = 0x00000000004E1000
	w1 = Mem0[x23 + 136:word32]
	x0 = Mem0[x21 + 3256:word64]
	x2 = x29 + 0x0000000000000068
	Mem0[x29 + 104:word64] = 0x0000000000000000
	call _rl_adjust_point (retsize: 0;)
	NZCV = cond(w0 - w31)
	w0 = (word32) Test(GT,NZV)
	w20 = w20 - w0
	x23 = x23 + 0x0000000000000088
	x24 = x24 + 0xFFFFFFFFFFFFFF3C
	branch w20 == 0x00000000 l000000000048EC60
	// succ:  l000000000048ED8C l000000000048EC60
l000000000048ED8C:
	w1 = Mem0[x23:word32]
	w2 = Mem0[x24:word32]
	NZCV = cond(w1 - w2)
	branch Test(GE,NZV) l000000000048EC60
	// succ:  l000000000048ED9C l000000000048EC60
l000000000048ED9C:
	x3 = Mem0[x21 + 3256:word64]
	w2 = w2 - w1
	x0 = x29 + 0x0000000000000070
	x1 = x3 + (int64) ((int32) w1)
rl_vi_change_case_exit:


// rl_vi_rubout
// Return size: 0
void rl_vi_rubout()
rl_vi_rubout_entry:
	// succ:  l000000000048EE9C
l000000000048EE9C:
	sp = fp
	sp = sp + -48
	Mem0[sp:word64] = x29
	sp = sp + 8
	Mem0[sp:word64] = x30
	x29 = x31 + 0x0000000000000000
	v6 = sp + 16
	Mem0[v6:word64] = x19
	v6 = v6 + 8
	Mem0[v6:word64] = x20
	v9 = sp + 32
	Mem0[v9:word64] = x21
	v9 = v9 + 8
	Mem0[v9:word64] = x22
	w19 = w0
	w22 = w1
	branch (w19 & 0x00000000) == 0x00000000 l000000000048EF64
	// succ:  l000000000048EEB8 l000000000048EF64
l000000000048EEB8:
	x20 = 0x00000000004E4000
	w21 = Mem0[x20 + 136:word32]
	branch w21 == 0x00000000 l000000000048EF78
	// succ:  l000000000048EEC4 l000000000048EF78
l000000000048EEC4:
	w31 = w19 - 0x00000001
	NZCV = cond(w31)
	branch Test(LE,ZCV) l000000000048EEE4
	// succ:  l000000000048EECC l000000000048EEE4
l000000000048EECC:
	__ctype_get_mb_cur_max()
	sp = sp + 0xFFFFFFFFFFFFFFF8
	x31 = x0 - 0x0000000000000001
	NZCV = cond(x31)
	branch Test(ULE,ZC) l000000000048EEE4
	// succ:  l000000000048EED8 l000000000048EEE4
l000000000048EED8:
	x0 = 0x00000000004E2000
	w0 = Mem0[x0 + 3968:word32]
	branch w0 == 0x00000000 l000000000048EF50
	// succ:  l000000000048EEE4 l000000000048EF50
l000000000048EEE4:
	__ctype_get_mb_cur_max()
	sp = sp + 0xFFFFFFFFFFFFFFF8
	x31 = x0 - 0x0000000000000001
	NZCV = cond(x31)
	branch Test(ULE,ZC) l000000000048EEFC
	// succ:  l000000000048EEF0 l000000000048EEFC
l000000000048EEF0:
	x0 = 0x00000000004E2000
	w0 = Mem0[x0 + 3968:word32]
	branch w0 == 0x00000000 l000000000048EF34
	// succ:  l000000000048EEFC l000000000048EF34
l000000000048EEFC:
	w0 = Mem0[x20 + 136:word32]
	w0 = w0 - w19
	Mem0[x20 + 136:word32] = w0
	// succ:  l000000000048EF08
l000000000048EF08:
	branch (w0 & 0x00000000) == 0x00000000 l000000000048EF28
	// succ:  l000000000048EF0C l000000000048EF28
l000000000048EF0C:
	w1 = w21
	call rl_kill_text (retsize: 0;)
	w0 = 0x00000000
	// succ:  l000000000048EF18
l000000000048EF18:
	v22 = sp + 16
	x19 = Mem0[v22:word64]
	v22 = v22 + 8
	x20 = Mem0[v22:word64]
	v23 = sp + 32
	x21 = Mem0[v23:word64]
	v23 = v23 + 8
	x22 = Mem0[v23:word64]
	x29 = Mem0[sp:word64]
	sp = sp + 8
	x30 = Mem0[sp:word64]
	sp = sp + 48
	return
	// succ:  rl_vi_rubout_exit
l000000000048EF28:
	Mem0[x20 + 136:word32] = 0x00000000
	w0 = 0x00000000
	goto l000000000048EF0C
	// succ:  l000000000048EF0C
l000000000048EF34:
	x0 = 0x00000000004E1000
	x0 = Mem0[x0 + 3256:word64]
	w1 = Mem0[x20 + 136:word32]
	w2 = 0x00000001
	call _rl_find_prev_mbchar (retsize: 0;)
	Mem0[x20 + 136:word32] = w0
	goto l000000000048EF08
	// succ:  l000000000048EF08
l000000000048EF50:
	w0 = w19
	w1 = w22
	call rl_backward_char (retsize: 0;)
	w0 = Mem0[x20 + 136:word32]
	goto l000000000048EF08
	// succ:  l000000000048EF08
l000000000048EF64:
	w0 = w31 - w19
	v25 = sp + 32
	x21 = Mem0[v25:word64]
	v25 = v25 + 8
	x22 = Mem0[v25:word64]
	v26 = sp + 16
	x19 = Mem0[v26:word64]
	v26 = v26 + 8
	x20 = Mem0[v26:word64]
	x29 = Mem0[sp:word64]
	sp = sp + 8
	x30 = Mem0[sp:word64]
	sp = sp + 48
	// succ:  l000000000048EF74_thunk_rl_vi_delete
l000000000048EF74_thunk_rl_vi_delete:
	call rl_vi_delete (retsize: 0;)
	return
	// succ:  rl_vi_rubout_exit
l000000000048EF78:
	call rl_ding (retsize: 0;)
	w0 = 0xFFFFFFFF
	goto l000000000048EF18
	// succ:  l000000000048EF18
rl_vi_rubout_exit:


// fn000000000048EF84
// Return size: 0
void fn000000000048EF84()
fn000000000048EF84_entry:
	// succ:  l000000000048EF84
l000000000048EF84:
	sp = fp
	sp = sp + -80
	Mem0[sp:word64] = x29
	sp = sp + 8
	Mem0[sp:word64] = x30
	x29 = x31 + 0x0000000000000000
	v8 = sp + 16
	Mem0[v8:word64] = x19
	v8 = v8 + 8
	Mem0[v8:word64] = x20
	v11 = sp + 32
	Mem0[v11:word64] = x21
	v11 = v11 + 8
	Mem0[v11:word64] = x22
	Mem0[sp + 64:word64] = x25
	v15 = sp + 48
	Mem0[v15:word64] = x23
	v15 = v15 + 8
	Mem0[v15:word64] = x24
	w31 = w1 - 0x00000003
	NZCV = cond(w31)
	w22 = w1
	w19 = w0
	x25 = x2
	branch Test(EQ,Z) l000000000048F074
	// succ:  l000000000048EFB0 l000000000048F074
l000000000048EFB0:
	w31 = w1 - 0x0000001B
	NZCV = cond(w31)
	branch Test(EQ,Z) l000000000048F074
	// succ:  l000000000048EFB8 l000000000048F074
l000000000048EFB8:
	call rl_begin_undo_group (retsize: 0;)
	x21 = 0x00000000004E4000
	x23 = 0x00000000004E3000
	x24 = 0x00000000004E2000
	x21 = x21 + 0x0000000000000088
	x23 = x23 + 0xFFFFFFFFFFFFFF3C
	x24 = x24 + 0xFFFFFFFFFFFFFF80
	w1 = w22
	w0 = 0x00000001
	branch w19 == 0x00000000 l000000000048F038
	// succ:  l000000000048EFE0 l000000000048F038
l000000000048EFE0:
	w20 = Mem0[x21:word32]
	w3 = Mem0[x23:word32]
	NZCV = cond(w20 - w3)
	branch Test(GE,NZV) l000000000048F038
	// succ:  l000000000048EFF0 l000000000048F038
l000000000048EFF0:
	call rl_vi_delete (retsize: 0;)
	w3 = Mem0[x21:word32]
	NZCV = cond(w20 - w3)
	w3 = w3 + 0x00000001
	branch Test(LE,ZCV) l000000000048F008
	// succ:  l000000000048F004 l000000000048F008
l000000000048F004:
	Mem0[x21:word32] = w3
	// succ:  l000000000048F008
l000000000048F008:
	__ctype_get_mb_cur_max()
	sp = sp + 0xFFFFFFFFFFFFFFF8
	x31 = x0 - 0x0000000000000001
	NZCV = cond(x31)
	w1 = w22
	w0 = 0x00000001
	branch Test(ULE,ZC) l000000000048F024
	// succ:  l000000000048F01C l000000000048F024
l000000000048F01C:
	w3 = Mem0[x24:word32]
	branch w3 == 0x00000000 l000000000048F064
	// succ:  l000000000048F024 l000000000048F064
l000000000048F024:
	call _rl_insert_char (retsize: 0;)
	w19 = w19 - 0x00000001
	// succ:  l000000000048F02C
l000000000048F02C:
	w1 = w22
	w0 = 0x00000001
	branch w19 != 0x00000000 l000000000048EFE0
	// succ:  l000000000048F038 l000000000048EFE0
l000000000048F038:
	w1 = w22
	w0 = 0x00000001
	call rl_backward_char (retsize: 0;)
	call rl_end_undo_group (retsize: 0;)
	w0 = 0x00000000
	// succ:  l000000000048F04C
l000000000048F04C:
	v28 = sp + 16
	x19 = Mem0[v28:word64]
	v28 = v28 + 8
	x20 = Mem0[v28:word64]
	v29 = sp + 32
	x21 = Mem0[v29:word64]
	v29 = v29 + 8
	x22 = Mem0[v29:word64]
	v30 = sp + 48
	x23 = Mem0[v30:word64]
	v30 = v30 + 8
	x24 = Mem0[v30:word64]
	x25 = Mem0[sp + 64:word64]
	x29 = Mem0[sp:word64]
	sp = sp + 8
	x30 = Mem0[sp:word64]
	sp = sp + 80
	return
	// succ:  fn000000000048EF84_exit
l000000000048F064:
	x0 = x25
	call rl_insert_text (retsize: 0;)
	w19 = w19 - 0x00000001
	goto l000000000048F02C
	// succ:  l000000000048F02C
l000000000048F074:
	w0 = 0xFFFFFFFF
	goto l000000000048F04C
	// succ:  l000000000048F04C
fn000000000048EF84_exit:


// rl_vi_back_to_indent
// Return size: 0
void rl_vi_back_to_indent()
rl_vi_back_to_indent_entry:
	// succ:  l000000000048F0DC
l000000000048F0DC:
	sp = fp
	sp = sp + -16
	Mem0[sp:word64] = x29
	sp = sp + 8
	Mem0[sp:word64] = x30
	x29 = x31 + 0x0000000000000000
	w0 = 0x00000001
	call rl_beg_of_line (retsize: 0;)
	x4 = 0x00000000004E4000
	x1 = 0x00000000004E3000
	w0 = Mem0[x4 + 136:word32]
	w3 = Mem0[x1 + 3900:word32]
	NZCV = cond(w0 - w3)
	branch Test(GE,NZV) l000000000048F14C
	// succ:  l000000000048F104 l000000000048F14C
l000000000048F104:
	x1 = 0x00000000004E1000
	x2 = Mem0[x1 + 3256:word64]
l000000000048F14C:
	w0 = 0x00000000
	x29 = Mem0[sp:word64]
	sp = sp + 8
	x30 = Mem0[sp:word64]
	sp = sp + 16
	return
	// succ:  rl_vi_back_to_indent_exit
rl_vi_back_to_indent_exit:


// rl_vi_first_print
// Return size: 0
void rl_vi_first_print()
rl_vi_first_print_entry:
	// succ:  l000000000048F170
l000000000048F170:
	sp = fp
	w0 = 0x00000001
	// succ:  l000000000048F174_thunk_rl_vi_back_to_indent
l000000000048F174_thunk_rl_vi_back_to_indent:
	call rl_vi_back_to_indent (retsize: 0;)
	return
	// succ:  rl_vi_first_print_exit
rl_vi_first_print_exit:


// rl_vi_char_search
// Return size: 0
void rl_vi_char_search()
rl_vi_char_search_entry:
	// succ:  l000000000048F178
l000000000048F178:
	sp = fp
	sp = sp + -48
	Mem0[sp:word64] = x29
	sp = sp + 8
	Mem0[sp:word64] = x30
	x29 = x31 + 0x0000000000000000
	v8 = sp + 16
	Mem0[v8:word64] = x19
	v8 = v8 + 8
	Mem0[v8:word64] = x20
	v11 = sp + 32
	Mem0[v11:word64] = x21
	v11 = v11 + 8
	Mem0[v11:word64] = x22
	w31 = w1 - 0x0000002C
	NZCV = cond(w31)
	x19 = 0x00000000004E1000
	w21 = w0
	branch Test(EQ,Z) l000000000048F1E4
	// succ:  l000000000048F198 l000000000048F1E4
l000000000048F198:
	w31 = w1 - 0x0000003B
	NZCV = cond(w31)
	branch Test(EQ,Z) l000000000048F1E4
	// succ:  l000000000048F1A0 l000000000048F1E4
l000000000048F1A0:
	w31 = w1 - 0x00000054
	NZCV = cond(w31)
	branch Test(EQ,Z) l000000000048F27C
	// succ:  l000000000048F1A8 l000000000048F27C
l000000000048F1A8:
	branch Test(LE,ZCV) l000000000048F290
	// succ:  l000000000048F1AC l000000000048F290
l000000000048F1AC:
	w31 = w1 - 0x00000066
	NZCV = cond(w31)
	branch Test(EQ,Z) l000000000048F230
	// succ:  l000000000048F1B4 l000000000048F230
l000000000048F1B4:
	w31 = w1 - 0x00000074
	NZCV = cond(w31)
	branch Test(NE,Z) l000000000048F1CC
	// succ:  l000000000048F1BC l000000000048F1CC
l000000000048F1BC:
	x0 = x19 + 0xFFFFFFFFFFFFFD08
	w1 = 0x00000001
	Mem0[x0 + 132:word32] = w1
	Mem0[x0 + 180:word32] = w1
	// succ:  l000000000048F1CC
l000000000048F1CC:
	x20 = x19 + 0xFFFFFFFFFFFFFD08
	w22 = Mem0[x20 + 148:word32]
	branch w22 == 0x00000000 l000000000048F24C
	// succ:  l000000000048F1D8 l000000000048F24C
l000000000048F1D8:
	w6 = Mem0[x20 + 128:word32]
	w1 = Mem0[x20 + 132:word32]
	goto l000000000048F204
	// succ:  l000000000048F204
l000000000048F1E4:
	x0 = x19 + 0xFFFFFFFFFFFFFD08
	w2 = Mem0[x0 + 180:word32]
	branch w2 == 0x00000000 l000000000048F2E8
	// succ:  l000000000048F1F0 l000000000048F2E8
l000000000048F1F0:
	w6 = Mem0[x0 + 128:word32]
	branch w6 == 0x00000000 l000000000048F2E8
	// succ:  l000000000048F1F8 l000000000048F2E8
l000000000048F1F8:
	w31 = w1 - 0x0000003B
	NZCV = cond(w31)
l000000000048F204:
	x4 = x19 + 0xFFFFFFFFFFFFFD08
	x5 = x4 + 0x0000000000000070
	Mem0[x4 + 184:word64] = x5
	Mem0[x4 + 192:word32] = w6
	w0 = w21
	v25 = sp + 16
	x19 = Mem0[v25:word64]
	v25 = v25 + 8
	x20 = Mem0[v25:word64]
	v26 = sp + 32
	x21 = Mem0[v26:word64]
	v26 = v26 + 8
	x22 = Mem0[v26:word64]
	x29 = Mem0[sp:word64]
	sp = sp + 8
	x30 = Mem0[sp:word64]
	sp = sp + 48
	x2 = x5
	w3 = w6
	// succ:  l000000000048F22C_thunk__rl_char_search_internal
l000000000048F22C_thunk__rl_char_search_internal:
	call _rl_char_search_internal (retsize: 0;)
	return
	// succ:  rl_vi_char_search_exit
l000000000048F230:
	x20 = x19 + 0xFFFFFFFFFFFFFD08
	x0 = x19 + 0xFFFFFFFFFFFFFD08
	w1 = 0x00000002
	w22 = Mem0[x20 + 148:word32]
	Mem0[x0 + 132:word32] = w1
	Mem0[x0 + 180:word32] = w1
	branch w22 != 0x00000000 l000000000048F1D8
	// succ:  l000000000048F24C l000000000048F1D8
l000000000048F24C:
	x0 = 0x00000000004E1000
	w0 = Mem0[x0 + 3168:word32]
	branch (w0 & 0x00000000) == 0x00000000 l000000000048F2AC
	// succ:  l000000000048F258 l000000000048F2AC
l000000000048F258:
	x0 = x20 + 0x0000000000000070
	w1 = 0x00000010
	call _rl_read_mbchar (retsize: 0;)
	NZCV = cond(w0 - w31)
	branch Test(LE,ZCV) l000000000048F2E8
	// succ:  l000000000048F26C l000000000048F2E8
l000000000048F26C:
	w1 = Mem0[x20 + 132:word32]
	Mem0[x20 + 128:word32] = w0
	w6 = w0
	goto l000000000048F204
	// succ:  l000000000048F204
l000000000048F27C:
	x0 = x19 + 0xFFFFFFFFFFFFFD08
	w1 = 0xFFFFFFFF
	Mem0[x0 + 132:word32] = w1
	Mem0[x0 + 180:word32] = w1
	goto l000000000048F1CC
	// succ:  l000000000048F1CC
l000000000048F290:
	w31 = w1 - 0x00000046
	NZCV = cond(w31)
	branch Test(NE,Z) l000000000048F1CC
	// succ:  l000000000048F298 l000000000048F1CC
l000000000048F298:
	x0 = x19 + 0xFFFFFFFFFFFFFD08
	w1 = 0xFFFFFFFE
	Mem0[x0 + 132:word32] = w1
	Mem0[x0 + 180:word32] = w1
	goto l000000000048F1CC
	// succ:  l000000000048F1CC
l000000000048F2AC:
	w0 = w21
	call _rl_callback_data_alloc (retsize: 0;)
	w1 = Mem0[x20 + 132:word32]
	x2 = 0x00000000004E2000
	Mem0[x2 + 3640:word64] = x0
	Mem0[x0 + 4:word32] = w1
	x1 = 0x000000000048C000
	x0 = 0x00000000004E2000
	x1 = x1 + 0x0000000000000504
	Mem0[x0 + 3632:word64] = x1
	w0 = w22
	// succ:  l000000000048F2D8
l000000000048F2D8:
	v30 = sp + 16
	x19 = Mem0[v30:word64]
	v30 = v30 + 8
	x20 = Mem0[v30:word64]
	v31 = sp + 32
	x21 = Mem0[v31:word64]
	v31 = v31 + 8
	x22 = Mem0[v31:word64]
	x29 = Mem0[sp:word64]
	sp = sp + 8
	x30 = Mem0[sp:word64]
	sp = sp + 48
	return
	// succ:  rl_vi_char_search_exit
l000000000048F2E8:
	w0 = 0xFFFFFFFF
	goto l000000000048F2D8
	// succ:  l000000000048F2D8
rl_vi_char_search_exit:


// rl_vi_match
// Return size: 0
void rl_vi_match()
rl_vi_match_entry:
	// succ:  l000000000048F2F0
l000000000048F2F0:
	sp = fp
	sp = sp + -80
	Mem0[sp:word64] = x29
	sp = sp + 8
	Mem0[sp:word64] = x30
	x29 = x31 + 0x0000000000000000
	v8 = sp + 32
	Mem0[v8:word64] = x21
	v8 = v8 + 8
	Mem0[v8:word64] = x22
	v11 = sp + 64
	Mem0[v11:word64] = x25
	v11 = v11 + 8
	Mem0[v11:word64] = x26
	x21 = 0x00000000004E1000
	x25 = 0x00000000004E4000
	v14 = sp + 16
	Mem0[v14:word64] = x19
	v14 = v14 + 8
	Mem0[v14:word64] = x20
	x0 = Mem0[x21 + 3256:word64]
	w19 = Mem0[x25 + 136:word32]
	v19 = sp + 48
	Mem0[v19:word64] = x23
	v19 = v19 + 8
	Mem0[v19:word64] = x24
	v21 = Mem0[x0 + (int64) ((int32) w19):byte]
	w0 = (word32) v21
	w22 = w1
	w31 = w0 - 0x0000005B
	NZCV = cond(w31)
	branch Test(EQ,Z) l000000000048F680
	// succ:  l000000000048F328 l000000000048F680
l000000000048F328:
	branch Test(ULE,ZC) l000000000048F3C8
	// succ:  l000000000048F32C l000000000048F3C8
l000000000048F32C:
	w31 = w0 - 0x0000007B
	NZCV = cond(w31)
	branch Test(EQ,Z) l000000000048F4E8
	// succ:  l000000000048F334 l000000000048F4E8
l000000000048F334:
	w31 = w0 - 0x0000007D
	NZCV = cond(w31)
	branch Test(EQ,Z) l000000000048F688
	// succ:  l000000000048F33C l000000000048F688
l000000000048F33C:
	w31 = w0 - 0x0000005D
	NZCV = cond(w31)
	branch Test(EQ,Z) l000000000048F58C
	// succ:  l000000000048F344 l000000000048F58C
l000000000048F344:
	__ctype_get_mb_cur_max()
	sp = sp + 0xFFFFFFFFFFFFFFF8
	x31 = x0 - 0x0000000000000001
	NZCV = cond(x31)
	branch Test(ULE,ZC) l000000000048F610
	// succ:  l000000000048F350 l000000000048F610
l000000000048F350:
	x0 = 0x00000000004E2000
	w0 = Mem0[x0 + 3968:word32]
	branch w0 != 0x00000000 l000000000048F610
	// succ:  l000000000048F35C l000000000048F610
l000000000048F35C:
	w20 = Mem0[x25 + 136:word32]
	x0 = Mem0[x21 + 3256:word64]
	x23 = x25 + 0x0000000000000088
	v29 = Mem0[x0 + (int64) ((int32) w20):byte]
	w0 = (word32) v29
	w31 = w0 - 0x0000005B
	NZCV = cond(w31)
	branch Test(EQ,Z) l000000000048F3BC
	// succ:  l000000000048F374 l000000000048F3BC
l000000000048F374:
	branch Test(ULE,ZC) l000000000048F5E8
	// succ:  l000000000048F378 l000000000048F5E8
l000000000048F378:
	w31 = w0 - 0x0000007B
	NZCV = cond(w31)
	branch Test(EQ,Z) l000000000048F5DC
	// succ:  l000000000048F380 l000000000048F5DC
l000000000048F380:
	w31 = w0 - 0x0000007D
	NZCV = cond(w31)
	branch Test(EQ,Z) l000000000048F5F8
	// succ:  l000000000048F388 l000000000048F5F8
l000000000048F388:
	w31 = w0 - 0x0000005D
	NZCV = cond(w31)
	branch Test(EQ,Z) l000000000048F5F8
	// succ:  l000000000048F390 l000000000048F5F8
l000000000048F390:
	w1 = w22
	w0 = 0x00000001
	call rl_forward_char (retsize: 0;)
	w0 = Mem0[x23:word32]
	NZCV = cond(w0 - w20)
	branch Test(EQ,Z) l000000000048F5F8
	// succ:  l000000000048F3A8 l000000000048F5F8
l000000000048F3A8:
	w20 = w0
	x0 = Mem0[x21 + 3256:word64]
	v30 = Mem0[x0 + (int64) ((int32) w20):byte]
	w0 = (word32) v30
	w31 = w0 - 0x0000005B
	NZCV = cond(w31)
	branch Test(NE,Z) l000000000048F374
	// succ:  l000000000048F3BC l000000000048F374
l000000000048F3BC:
	w24 = 0x00000002
	// succ:  l000000000048F3C0
l000000000048F3C0:
	w19 = Mem0[x25 + 136:word32]
	goto l000000000048F4EC
	// succ:  l000000000048F4EC
l000000000048F3C8:
	w31 = w0 - 0x00000028
	NZCV = cond(w31)
	branch Test(EQ,Z) l000000000048F690
	// succ:  l000000000048F3D0 l000000000048F690
l000000000048F3D0:
	w31 = w0 - 0x00000029
	NZCV = cond(w31)
	w23 = 0xFFFFFFFF
	branch Test(NE,Z) l000000000048F344
	// succ:  l000000000048F3DC l000000000048F344
l000000000048F3DC:
	x22 = 0x00000000004E2000
	w20 = 0x00000001
	x22 = x22 + 0xFFFFFFFFFFFFFF80
	w24 = w31 - w23
	// succ:  l000000000048F3EC
l000000000048F3EC:
	__ctype_get_mb_cur_max()
	sp = sp + 0xFFFFFFFFFFFFFFF8
	x31 = x0 - 0x0000000000000001
	NZCV = cond(x31)
	branch Test(EQ,Z) l000000000048F400
	// succ:  l000000000048F3F8 l000000000048F400
l000000000048F3F8:
	w2 = Mem0[x22:word32]
	branch w2 == 0x00000000 l000000000048F46C
	// succ:  l000000000048F400 l000000000048F46C
l000000000048F400:
	w19 = w19 - 0x00000001
	branch (w19 & 0x00000000) == 0x00000000 l000000000048F488
	// succ:  l000000000048F408 l000000000048F488
l000000000048F408:
	x0 = Mem0[x21 + 3256:word64]
	v47 = Mem0[x0 + (int64) ((int32) w19):byte]
	w0 = (word32) v47
	w31 = w0 - 0x0000005B
	NZCV = cond(w31)
	branch Test(EQ,Z) l000000000048F4D8
	// succ:  l000000000048F418 l000000000048F4D8
l000000000048F418:
	branch Test(ULE,ZC) l000000000048F4A8
	// succ:  l000000000048F41C l000000000048F4A8
l000000000048F41C:
	w31 = w0 - 0x0000007B
	NZCV = cond(w31)
	branch Test(EQ,Z) l000000000048F4C0
	// succ:  l000000000048F424 l000000000048F4C0
l000000000048F424:
	w31 = w0 - 0x0000007D
	NZCV = cond(w31)
	w1 = 0xFFFFFFFD
	branch Test(EQ,Z) l000000000048F440
	// succ:  l000000000048F430 l000000000048F440
l000000000048F430:
	w31 = w0 - 0x0000005D
	NZCV = cond(w31)
	w1 = 0xFFFFFFFE
	branch Test(EQ,Z) l000000000048F440
	// succ:  l000000000048F43C l000000000048F440
l000000000048F43C:
	w1 = 0x00000000
	// succ:  l000000000048F440
l000000000048F440:
	NZCV = cond(w23 - w1)
l000000000048F44C:
	Mem0[x25 + 136:word32] = w19
	w0 = 0x00000000
	// succ:  l000000000048F454
l000000000048F454:
	v36 = sp + 16
	x19 = Mem0[v36:word64]
	v36 = v36 + 8
	x20 = Mem0[v36:word64]
	v37 = sp + 32
	x21 = Mem0[v37:word64]
	v37 = v37 + 8
	x22 = Mem0[v37:word64]
	v38 = sp + 48
	x23 = Mem0[v38:word64]
	v38 = v38 + 8
	x24 = Mem0[v38:word64]
	v39 = sp + 64
	x25 = Mem0[v39:word64]
	v39 = v39 + 8
	x26 = Mem0[v39:word64]
	x29 = Mem0[sp:word64]
	sp = sp + 8
	x30 = Mem0[sp:word64]
	sp = sp + 80
	return
	// succ:  rl_vi_match_exit
l000000000048F46C:
	x0 = Mem0[x21 + 3256:word64]
	w1 = w19
	call _rl_find_prev_mbchar (retsize: 0;)
	NZCV = cond(w19 - w0)
	branch Test(EQ,Z) l000000000048F400
	// succ:  l000000000048F480 l000000000048F400
l000000000048F480:
	w19 = w0
	branch (w19 & 0x00000000) == 0x00000000 l000000000048F408
	// succ:  l000000000048F488 l000000000048F408
l000000000048F488:
	call rl_ding (retsize: 0;)
	w0 = 0xFFFFFFFF
	v40 = sp + 16
	x19 = Mem0[v40:word64]
	v40 = v40 + 8
	x20 = Mem0[v40:word64]
	v41 = sp + 32
	x21 = Mem0[v41:word64]
	v41 = v41 + 8
	x22 = Mem0[v41:word64]
	v42 = sp + 48
	x23 = Mem0[v42:word64]
	v42 = v42 + 8
	x24 = Mem0[v42:word64]
	v43 = sp + 64
	x25 = Mem0[v43:word64]
	v43 = v43 + 8
	x26 = Mem0[v43:word64]
	x29 = Mem0[sp:word64]
	sp = sp + 8
	x30 = Mem0[sp:word64]
	sp = sp + 80
	return
	// succ:  rl_vi_match_exit
l000000000048F4A8:
	w31 = w0 - 0x00000028
	NZCV = cond(w31)
	branch Test(EQ,Z) l000000000048F4E0
	// succ:  l000000000048F4B0 l000000000048F4E0
l000000000048F4B0:
	w31 = w0 - 0x00000029
	NZCV = cond(w31)
	w1 = 0xFFFFFFFF
	branch Test(EQ,Z) l000000000048F440
	// succ:  l000000000048F4BC l000000000048F440
l000000000048F4BC:
	goto l000000000048F43C
	// succ:  l000000000048F43C
l000000000048F4C0:
	w0 = 0x00000003
	// succ:  l000000000048F4C4
l000000000048F4C4:
	NZCV = cond(w24 - w0)
	w0 = (word32) Test(EQ,Z)
	w20 = w20 - w0
	branch w20 != 0x00000000 l000000000048F3EC
	// succ:  l000000000048F4D4 l000000000048F3EC
l000000000048F4D4:
	goto l000000000048F44C
	// succ:  l000000000048F44C
l000000000048F4D8:
	w0 = 0x00000002
	goto l000000000048F4C4
	// succ:  l000000000048F4C4
l000000000048F4E0:
	w0 = 0x00000001
	goto l000000000048F4C4
	// succ:  l000000000048F4C4
l000000000048F4E8:
	w24 = 0x00000003
	// succ:  l000000000048F4EC
l000000000048F4EC:
	x23 = 0x00000000004E2000
	x22 = 0x00000000004E3000
	w20 = 0x00000001
	x23 = x23 + 0xFFFFFFFFFFFFFF80
	x22 = x22 + 0xFFFFFFFFFFFFFF3C
	w26 = w31 - w24
	// succ:  l000000000048F504
l000000000048F504:
	__ctype_get_mb_cur_max()
	sp = sp + 0xFFFFFFFFFFFFFFF8
	x31 = x0 - 0x0000000000000001
	NZCV = cond(x31)
	branch Test(EQ,Z) l000000000048F518
	// succ:  l000000000048F510 l000000000048F518
l000000000048F510:
	w3 = Mem0[x23:word32]
	branch w3 == 0x00000000 l000000000048F55C
	// succ:  l000000000048F518 l000000000048F55C
l000000000048F518:
	w19 = w19 + 0x00000001
	// succ:  l000000000048F51C
l000000000048F51C:
	w0 = Mem0[x22:word32]
	NZCV = cond(w19 - w0)
	branch Test(GE,NZV) l000000000048F488
	// succ:  l000000000048F528 l000000000048F488
l000000000048F528:
	x0 = Mem0[x21 + 3256:word64]
	v35 = Mem0[x0 + (int64) ((int32) w19):byte]
	w0 = (word32) v35
	w31 = w0 - 0x0000005B
	NZCV = cond(w31)
	branch Test(EQ,Z) l000000000048F5B0
	// succ:  l000000000048F538 l000000000048F5B0
l000000000048F538:
	branch Test(ULE,ZC) l000000000048F594
	// succ:  l000000000048F53C l000000000048F594
l000000000048F53C:
	w31 = w0 - 0x0000007B
	NZCV = cond(w31)
	branch Test(EQ,Z) l000000000048F5CC
	// succ:  l000000000048F544 l000000000048F5CC
l000000000048F544:
	w31 = w0 - 0x0000007D
	NZCV = cond(w31)
	branch Test(EQ,Z) l000000000048F5C4
	// succ:  l000000000048F54C l000000000048F5C4
l000000000048F54C:
	w31 = w0 - 0x0000005D
	NZCV = cond(w31)
	branch Test(EQ,Z) l000000000048F574
	// succ:  l000000000048F554 l000000000048F574
l000000000048F554:
	branch w20 != 0x00000000 l000000000048F504
	// succ:  l000000000048F558 l000000000048F504
l000000000048F558:
	goto l000000000048F44C
	// succ:  l000000000048F44C
l000000000048F55C:
	x0 = Mem0[x21 + 3256:word64]
	w1 = w19
	w2 = 0x00000001
	call _rl_find_next_mbchar (retsize: 0;)
	w19 = w0
	goto l000000000048F51C
	// succ:  l000000000048F51C
l000000000048F574:
	w0 = 0xFFFFFFFE
	// succ:  l000000000048F578
l000000000048F578:
	NZCV = cond(w26 - w0)
	w0 = (word32) Test(EQ,Z)
	w20 = w20 - w0
	branch w20 != 0x00000000 l000000000048F504
	// succ:  l000000000048F588 l000000000048F504
l000000000048F588:
	goto l000000000048F44C
	// succ:  l000000000048F44C
l000000000048F58C:
	w23 = 0xFFFFFFFE
	goto l000000000048F3DC
	// succ:  l000000000048F3DC
l000000000048F594:
	w31 = w0 - 0x00000028
	NZCV = cond(w31)
	branch Test(EQ,Z) l000000000048F5D4
	// succ:  l000000000048F59C l000000000048F5D4
l000000000048F59C:
	w31 = w0 - 0x00000029
	NZCV = cond(w31)
	w0 = 0xFFFFFFFF
	branch Test(EQ,Z) l000000000048F578
	// succ:  l000000000048F5A8 l000000000048F578
l000000000048F5A8:
	branch w20 != 0x00000000 l000000000048F504
	// succ:  l000000000048F5AC l000000000048F504
l000000000048F5AC:
	goto l000000000048F44C
	// succ:  l000000000048F44C
l000000000048F5B0:
	w0 = 0x00000002
	// succ:  l000000000048F5B4
l000000000048F5B4:
	NZCV = cond(w0 - w24)
l000000000048F5C4:
	w0 = 0xFFFFFFFD
	goto l000000000048F578
	// succ:  l000000000048F578
l000000000048F5CC:
	w0 = 0x00000003
	goto l000000000048F5B4
	// succ:  l000000000048F5B4
l000000000048F5D4:
	w0 = 0x00000001
	goto l000000000048F5B4
	// succ:  l000000000048F5B4
l000000000048F5DC:
	w24 = 0x00000003
	w19 = Mem0[x25 + 136:word32]
	goto l000000000048F4EC
	// succ:  l000000000048F4EC
l000000000048F5E8:
	w31 = w0 - 0x00000028
	NZCV = cond(w31)
	branch Test(EQ,Z) l000000000048F608
	// succ:  l000000000048F5F0 l000000000048F608
l000000000048F5F0:
	w31 = w0 - 0x00000029
	NZCV = cond(w31)
	branch Test(NE,Z) l000000000048F390
	// succ:  l000000000048F5F8 l000000000048F390
l000000000048F5F8:
	Mem0[x25 + 136:word32] = w19
	call rl_ding (retsize: 0;)
	w0 = 0xFFFFFFFF
	goto l000000000048F454
	// succ:  l000000000048F454
l000000000048F608:
	w24 = 0x00000001
	goto l000000000048F3C0
	// succ:  l000000000048F3C0
l000000000048F610:
	x23 = 0x00000000004E3000
	x20 = x25 + 0x0000000000000088
	x23 = x23 + 0xFFFFFFFFFFFFFF3C
	goto l000000000048F654
	// succ:  l000000000048F654
l000000000048F620:
	w31 = w0 - 0x0000007B
	NZCV = cond(w31)
	branch Test(EQ,Z) l000000000048F5DC
	// succ:  l000000000048F628 l000000000048F5DC
l000000000048F628:
	w31 = w0 - 0x0000007D
	NZCV = cond(w31)
	branch Test(EQ,Z) l000000000048F5F8
	// succ:  l000000000048F630 l000000000048F5F8
l000000000048F630:
	w31 = w0 - 0x0000005D
	NZCV = cond(w31)
	branch Test(EQ,Z) l000000000048F5F8
	// succ:  l000000000048F638 l000000000048F5F8
l000000000048F638:
	w1 = Mem0[x23:word32]
	w0 = 0x00000001
	w1 = w1 - 0x00000001
	NZCV = cond(w2 - w1)
	w1 = w22
	branch Test(GE,NZV) l000000000048F5F8
	// succ:  l000000000048F650 l000000000048F5F8
l000000000048F650:
	call rl_forward_char (retsize: 0;)
	// succ:  l000000000048F654
l000000000048F654:
	w2 = Mem0[x20:word32]
	x0 = Mem0[x21 + 3256:word64]
	v46 = Mem0[x0 + (int64) ((int32) w2):byte]
	w0 = (word32) v46
	w31 = w0 - 0x0000005B
	NZCV = cond(w31)
	branch Test(EQ,Z) l000000000048F3BC
	// succ:  l000000000048F668 l000000000048F3BC
l000000000048F668:
	branch Test(UGT,ZC) l000000000048F620
	// succ:  l000000000048F66C l000000000048F620
l000000000048F66C:
	w31 = w0 - 0x00000028
	NZCV = cond(w31)
	branch Test(EQ,Z) l000000000048F608
	// succ:  l000000000048F674 l000000000048F608
l000000000048F674:
	w31 = w0 - 0x00000029
	NZCV = cond(w31)
	branch Test(EQ,Z) l000000000048F5F8
	// succ:  l000000000048F67C l000000000048F5F8
l000000000048F67C:
	goto l000000000048F638
	// succ:  l000000000048F638
l000000000048F680:
	w24 = 0x00000002
	goto l000000000048F4EC
	// succ:  l000000000048F4EC
l000000000048F688:
	w23 = 0xFFFFFFFD
	goto l000000000048F3DC
	// succ:  l000000000048F3DC
l000000000048F690:
	w24 = 0x00000001
	goto l000000000048F4EC
	// succ:  l000000000048F4EC
rl_vi_match_exit:


// rl_vi_bracktype
// Return size: 0
void rl_vi_bracktype()
rl_vi_bracktype_entry:
	// succ:  l000000000048F698
l000000000048F698:
	sp = fp
	w31 = w0 - 0x0000005B
	NZCV = cond(w31)
	w1 = w0
	branch Test(EQ,Z) l000000000048F6F4
	// succ:  l000000000048F6A4 l000000000048F6F4
l000000000048F6A4:
	branch Test(LE,ZCV) l000000000048F6D0
	// succ:  l000000000048F6A8 l000000000048F6D0
l000000000048F6A8:
	w31 = w0 - 0x0000007B
	NZCV = cond(w31)
	branch Test(EQ,Z) l000000000048F6EC
	// succ:  l000000000048F6B0 l000000000048F6EC
l000000000048F6B0:
	w31 = w0 - 0x0000007D
	NZCV = cond(w31)
	w0 = 0xFFFFFFFD
	branch Test(EQ,Z) l000000000048F6CC
	// succ:  l000000000048F6BC l000000000048F6CC
l000000000048F6BC:
	w31 = w1 - 0x0000005D
	NZCV = cond(w31)
	w0 = 0xFFFFFFFE
	branch Test(EQ,Z) l000000000048F6CC
	// succ:  l000000000048F6C8 l000000000048F6CC
l000000000048F6C8:
	w0 = 0x00000000
	// succ:  l000000000048F6CC
l000000000048F6CC:
	return
	// succ:  rl_vi_bracktype_exit
l000000000048F6D0:
	w31 = w0 - 0x00000028
	NZCV = cond(w31)
	w0 = 0x00000001
	branch Test(EQ,Z) l000000000048F6CC
	// succ:  l000000000048F6DC l000000000048F6CC
l000000000048F6DC:
	w31 = w1 - 0x00000029
	NZCV = cond(w31)
	w0 = 0xFFFFFFFF
	branch Test(NE,Z) l000000000048F6C8
	// succ:  l000000000048F6E8 l000000000048F6C8
l000000000048F6E8:
	return
	// succ:  rl_vi_bracktype_exit
l000000000048F6EC:
	w0 = 0x00000003
	return
	// succ:  rl_vi_bracktype_exit
l000000000048F6F4:
	w0 = 0x00000002
	return
	// succ:  rl_vi_bracktype_exit
rl_vi_bracktype_exit:


// rl_vi_change_char
// Return size: 0
void rl_vi_change_char()
rl_vi_change_char_entry:
	// succ:  l000000000048F6FC
l000000000048F6FC:
	sp = fp
	sp = sp + -64
	Mem0[sp:word64] = x29
	sp = sp + 8
	Mem0[sp:word64] = x30
	x29 = x31 + 0x0000000000000000
	v8 = sp + 16
	Mem0[v8:word64] = x19
	v8 = v8 + 8
	Mem0[v8:word64] = x20
	x19 = 0x00000000004E1000
	x19 = x19 + 0xFFFFFFFFFFFFFD08
	w20 = Mem0[x19 + 148:word32]
	Mem0[sp + 32:word64] = x21
	w21 = w0
	branch w20 == 0x00000000 l000000000048F74C
	// succ:  l000000000048F720 l000000000048F74C
l000000000048F720:
	w1 = Mem0[x19 + 176:word32]
	Mem0[x29 + 49:byte] = 0x00
	Mem0[x29 + 48:byte] = (byte) w1
	// succ:  l000000000048F72C
l000000000048F72C:
	branch (w1 & 0x00000000) == 0x00000000 l000000000048F79C
	// succ:  l000000000048F730 l000000000048F79C
l000000000048F730:
	w0 = w21
	x2 = x29 + 0x0000000000000030
	call fn000000000048EF84 (retsize: 0;)
	// succ:  l000000000048F73C
l000000000048F73C:
	v15 = sp + 16
	x19 = Mem0[v15:word64]
	v15 = v15 + 8
	x20 = Mem0[v15:word64]
	x21 = Mem0[sp + 32:word64]
	x29 = Mem0[sp:word64]
	sp = sp + 8
	x30 = Mem0[sp:word64]
	sp = sp + 64
	return
	// succ:  rl_vi_change_char_exit
l000000000048F74C:
	x1 = 0x00000000004E1000
	w1 = Mem0[x1 + 3168:word32]
	branch (w1 & 0x00000000) == 0x00000000 l000000000048F76C
	// succ:  l000000000048F758 l000000000048F76C
l000000000048F758:
	x0 = x29 + 0x0000000000000030
	call fn000000000048D158 (retsize: 0;)
	w1 = w0
	Mem0[x19 + 176:word32] = w0
	goto l000000000048F72C
	// succ:  l000000000048F72C
l000000000048F76C:
	call _rl_callback_data_alloc (retsize: 0;)
	x1 = 0x00000000004E2000
	Mem0[x1 + 3640:word64] = x0
	x1 = 0x000000000048F000
	x1 = x1 + 0x000000000000007C
	x0 = 0x00000000004E2000
	Mem0[x0 + 3632:word64] = x1
	x21 = Mem0[sp + 32:word64]
	w0 = w20
	v18 = sp + 16
	x19 = Mem0[v18:word64]
	v18 = v18 + 8
	x20 = Mem0[v18:word64]
	x29 = Mem0[sp:word64]
	sp = sp + 8
	x30 = Mem0[sp:word64]
	sp = sp + 64
	return
	// succ:  rl_vi_change_char_exit
l000000000048F79C:
	w0 = 0xFFFFFFFF
	goto l000000000048F73C
	// succ:  l000000000048F73C
rl_vi_change_char_exit:


// rl_vi_subst
// Return size: 0
void rl_vi_subst()
rl_vi_subst_entry:
	// succ:  l000000000048F7A4
l000000000048F7A4:
	sp = fp
	sp = sp + -32
	Mem0[sp:word64] = x29
	sp = sp + 8
	Mem0[sp:word64] = x30
	x29 = x31 + 0x0000000000000000
	x2 = 0x00000000004E1000
	x2 = x2 + 0xFFFFFFFFFFFFFD08
	w2 = Mem0[x2 + 148:word32]
	Mem0[sp + 16:word64] = x19
	w19 = w0
	branch w2 != 0x00000000 l000000000048F7D8
	// succ:  l000000000048F7C4 l000000000048F7D8
l000000000048F7C4:
	w31 = w1 - 0x00000053
	NZCV = cond(w31)
	w0 = 0x00000063
	w1 = 0x0000006C
l000000000048F7D8:
	w0 = w19
	x19 = Mem0[sp + 16:word64]
	x29 = Mem0[sp:word64]
	sp = sp + 8
	x30 = Mem0[sp:word64]
	sp = sp + 32
	w1 = 0x00000063
	// succ:  l000000000048F7E8_thunk_rl_vi_change_to
l000000000048F7E8_thunk_rl_vi_change_to:
	call rl_vi_change_to (retsize: 0;)
	return
	// succ:  rl_vi_subst_exit
rl_vi_subst_exit:


// rl_vi_replace
// Return size: 0
void rl_vi_replace()
rl_vi_replace_entry:
	// succ:  l000000000048F7EC
l000000000048F7EC:
	sp = fp
	sp = sp + -32
	Mem0[sp:word64] = x29
	sp = sp + 8
	Mem0[sp:word64] = x30
	x29 = x31 + 0x0000000000000000
	v8 = sp + 16
	Mem0[v8:word64] = x19
	v8 = v8 + 8
	Mem0[v8:word64] = x20
	x20 = 0x00000000004E1000
	x20 = x20 + 0xFFFFFFFFFFFFFD08
	x19 = Mem0[x20 + 200:word64]
	Mem0[x20 + 140:word32] = 0x00000000
	x0 = x19
	branch x19 == 0x0000000000000000 l000000000048F828
	// succ:  l000000000048F810 l000000000048F828
l000000000048F810:
	x1 = 0x00000000004D9000
	Mem0[x1 + 1200:word64] = x0
	v11 = sp + 16
	x19 = Mem0[v11:word64]
	v11 = v11 + 8
	x20 = Mem0[v11:word64]
	w0 = 0x00000000
	x29 = Mem0[sp:word64]
	sp = sp + 8
	x30 = Mem0[sp:word64]
	sp = sp + 32
	return
	// succ:  rl_vi_replace_exit
l000000000048F828:
	call rl_make_bare_keymap (retsize: 0;)
	x3 = 0x000000000048C000
	Mem0[x20 + 200:word64] = x0
	x1 = x19
	x3 = x3 + 0xFFFFFFFFFFFFF94C
	// succ:  l000000000048F83C
l000000000048F83C:
	x2 = x0 + x1
	x1 = x1 + 0x0000000000000010
	Mem0[x2 + 520:word64] = x3
	x31 = x1 - 0xFFFFFFFFFFFFFE10
	NZCV = cond(x31)
	branch Test(NE,Z) l000000000048F83C
	// succ:  l000000000048F850 l000000000048F83C
l000000000048F850:
	x2 = 0x00000000004D9000
	x2 = x2 + 0x0000000000000500
	x1 = 0x00000000004A2000
	x3 = 0x000000000048C000
	x5 = 0x000000000048E000
	x1 = x1 + 0xFFFFFFFFFFFFF93C
	x3 = x3 + 0x0000000000000794
	x5 = x5 + 0x0000000000000484
	v19 = Mem0[x2 + 128:byte]
	w4 = (word32) v19
	Mem0[x0 + 2040:word64] = x3
	Mem0[x0 + 440:word64] = x5
	Mem0[x0 + 216:word64] = x1
	Mem0[x0 + 168:word64] = x1
	branch w4 != 0x00000000 l000000000048F810
	// succ:  l000000000048F888 l000000000048F810
l000000000048F888:
	x2 = Mem0[x2 + 136:word64]
	x1 = 0x00000000004A2000
	x1 = x1 + 0xFFFFFFFFFFFFFEAC
	x31 = x2 - x1
	NZCV = cond(x31)
	branch Test(NE,Z) l000000000048F810
	// succ:  l000000000048F89C l000000000048F810
l000000000048F89C:
	Mem0[x0 + 136:word64] = x3
	goto l000000000048F810
	// succ:  l000000000048F810
rl_vi_replace_exit:


// rl_vi_set_mark
// Return size: 0
void rl_vi_set_mark()
rl_vi_set_mark_entry:
	goto l000000000048F8A4
	// succ:  l000000000048F8A4
l000000000048C368:
	sp = sp + -32
	Mem0[sp:word64] = x29
	sp = sp + 8
	Mem0[sp:word64] = x30
	x29 = x31 + 0x0000000000000000
	Mem0[sp + 16:word64] = x19
	x19 = 0x00000000004E1000
	w0 = Mem0[x19 + 3168:word32]
	w0 = w0 | 0x00000040
	Mem0[x19 + 3168:word32] = w0
	call rl_read_key (retsize: 0;)
	w1 = Mem0[x19 + 3168:word32]
	w0 = w0 - 0x00000061
	w1 = w1 & 0xFFFFFFBF
	Mem0[x19 + 3168:word32] = w1
	w31 = w0 - 0x00000019
	NZCV = cond(w31)
	branch Test(UGT,ZC) l000000000048C3C8
	// succ:  l000000000048C3A0 l000000000048C3C8
l000000000048C3A0:
	x1 = 0x00000000004E4000
	w2 = Mem0[x1 + 136:word32]
	x1 = 0x00000000004E1000
	x1 = x1 + 0xFFFFFFFFFFFFFD08
	x1 = x1 + 0x0000000000000008
	Mem0[x1 + (int64) ((int32) w0):word32] = w2
	w0 = 0x00000000
	// succ:  l000000000048C3BC
l000000000048C3BC:
	x19 = Mem0[sp + 16:word64]
	x29 = Mem0[sp:word64]
	sp = sp + 8
	x30 = Mem0[sp:word64]
	sp = sp + 32
	return
	// succ:  rl_vi_set_mark_exit
l000000000048C3C8:
	call rl_ding (retsize: 0;)
	w0 = 0xFFFFFFFF
	goto l000000000048C3BC
	// succ:  l000000000048C3BC
l000000000048F8A4:
	sp = fp
	x0 = 0x00000000004E1000
	w0 = Mem0[x0 + 3168:word32]
	branch (w0 & 0x00000000) == 0x00000000 l000000000048F8D0
	// succ:  l000000000048F8B0 l000000000048F8D0
l000000000048F8B0:
	x0 = 0x00000000004E2000
	x1 = 0x000000000048C000
	Mem0[x0 + 3640:word64] = 0x0000000000000000
	x1 = x1 + 0x00000000000003D4
	x0 = 0x00000000004E2000
	Mem0[x0 + 3632:word64] = x1
	w0 = 0x00000000
	return
	// succ:  rl_vi_set_mark_exit
l000000000048F8D0:
	goto l000000000048C368
	// succ:  l000000000048C368
rl_vi_set_mark_exit:


// rl_vi_goto_mark
// Return size: 0
void rl_vi_goto_mark()
rl_vi_goto_mark_entry:
	goto l000000000048F8D4
	// succ:  l000000000048F8D4
l000000000048C3EC:
	sp = sp + -32
	Mem0[sp:word64] = x29
	sp = sp + 8
	Mem0[sp:word64] = x30
	x29 = x31 + 0x0000000000000000
	Mem0[sp + 16:word64] = x19
	x19 = 0x00000000004E1000
	w0 = Mem0[x19 + 3168:word32]
	w0 = w0 | 0x00000040
	Mem0[x19 + 3168:word32] = w0
	call rl_read_key (retsize: 0;)
	w1 = Mem0[x19 + 3168:word32]
	w31 = w0 - 0x00000060
	NZCV = cond(w31)
	w1 = w1 & 0xFFFFFFBF
	Mem0[x19 + 3168:word32] = w1
	branch Test(EQ,Z) l000000000048C45C
	// succ:  l000000000048C420 l000000000048C45C
l000000000048C420:
	w0 = w0 - 0x00000061
	w31 = w0 - 0x00000019
	NZCV = cond(w31)
	branch Test(UGT,ZC) l000000000048C47C
	// succ:  l000000000048C42C l000000000048C47C
l000000000048C42C:
	x1 = 0x00000000004E1000
	x1 = x1 + 0xFFFFFFFFFFFFFD08
	x1 = x1 + 0x0000000000000008
	w0 = Mem0[x1 + (int64) ((int32) w0):word32]
	w31 = w0 + 0x00000001
	NZCV = cond(w31)
	branch Test(EQ,Z) l000000000048C47C
	// succ:  l000000000048C444 l000000000048C47C
l000000000048C444:
	x1 = 0x00000000004E4000
	Mem0[x1 + 136:word32] = w0
	w0 = 0x00000000
	// succ:  l000000000048C450
l000000000048C450:
	x19 = Mem0[sp + 16:word64]
	x29 = Mem0[sp:word64]
	sp = sp + 8
	x30 = Mem0[sp:word64]
	sp = sp + 32
	return
	// succ:  rl_vi_goto_mark_exit
l000000000048C45C:
	x0 = 0x00000000004E4000
	w1 = Mem0[x0 + 120:word32]
	x0 = 0x00000000004E4000
	Mem0[x0 + 136:word32] = w1
	x19 = Mem0[sp + 16:word64]
	w0 = 0x00000000
	x29 = Mem0[sp:word64]
	sp = sp + 8
	x30 = Mem0[sp:word64]
	sp = sp + 32
	return
	// succ:  rl_vi_goto_mark_exit
l000000000048C47C:
	call rl_ding (retsize: 0;)
	w0 = 0xFFFFFFFF
	goto l000000000048C450
	// succ:  l000000000048C450
l000000000048F8D4:
	sp = fp
	x0 = 0x00000000004E1000
	w0 = Mem0[x0 + 3168:word32]
	branch (w0 & 0x00000000) == 0x00000000 l000000000048F900
	// succ:  l000000000048F8E0 l000000000048F900
l000000000048F8E0:
	x0 = 0x00000000004E2000
	x1 = 0x000000000048C000
	Mem0[x0 + 3640:word64] = 0x0000000000000000
	x1 = x1 + 0x0000000000000488
	x0 = 0x00000000004E2000
	Mem0[x0 + 3632:word64] = x1
	w0 = 0x00000000
	return
	// succ:  rl_vi_goto_mark_exit
l000000000048F900:
	goto l000000000048C3EC
	// succ:  l000000000048C3EC
rl_vi_goto_mark_exit:


// rl_add_funmap_entry
// Return size: 0
void rl_add_funmap_entry()
rl_add_funmap_entry_entry:
	// succ:  l000000000048F904
l000000000048F904:
	sp = fp
	sp = sp + -64
	Mem0[sp:word64] = x29
	sp = sp + 8
	Mem0[sp:word64] = x30
	x29 = x31 + 0x0000000000000000
	v8 = sp + 32
	Mem0[v8:word64] = x21
	v8 = v8 + 8
	Mem0[v8:word64] = x22
	x21 = 0x00000000004E1000
	v11 = sp + 16
	Mem0[v11:word64] = x19
	v11 = v11 + 8
	Mem0[v11:word64] = x20
	x19 = x21 + 0xFFFFFFFFFFFFFDD8
	w2 = Mem0[x19:word32]
	w3 = Mem0[x19 + 4:word32]
	w4 = w2 + 0x00000002
	v17 = sp + 48
	Mem0[v17:word64] = x23
	v17 = v17 + 8
	Mem0[v17:word64] = x24
	NZCV = cond(w4 - w3)
	x20 = 0x00000000004E4000
	x23 = x0
	x22 = x1
	branch Test(GE,NZV) l000000000048F998
	// succ:  l000000000048F940 l000000000048F998
l000000000048F940:
	x24 = Mem0[x20 + 176:word64]
	x0 = 0x0000000000000010
l000000000048F998:
	w3 = w3 + 0x00000040
	x0 = Mem0[x20 + 176:word64]
rl_add_funmap_entry_exit:


// rl_initialize_funmap
// Return size: 0
void rl_initialize_funmap()
rl_initialize_funmap_entry:
	// succ:  l000000000048F9BC
l000000000048F9BC:
	sp = fp
	sp = sp + -48
	Mem0[sp:word64] = x29
	sp = sp + 8
	Mem0[sp:word64] = x30
	x29 = x31 + 0x0000000000000000
	Mem0[sp + 32:word64] = x21
	x21 = 0x00000000004E1000
	x0 = x21 + 0xFFFFFFFFFFFFFDD8
	v10 = sp + 16
	Mem0[v10:word64] = x19
	v10 = v10 + 8
	Mem0[v10:word64] = x20
	w20 = Mem0[x0 + 8:word32]
	branch w20 != 0x00000000 l000000000048FA18
	// succ:  l000000000048F9DC l000000000048FA18
l000000000048F9DC:
	x19 = 0x00000000004C2000
	x19 = x19 + 0xFFFFFFFFFFFFFDD8
	x0 = 0x00000000004C3000
	x19 = x19 + 0x0000000000000008
	x0 = x0 + 0x0000000000000608
	// succ:  l000000000048F9F0
l000000000048F9F0:
	x1 = Mem0[x19:word64]
	x19 = x19 + 16
	w20 = w20 + 0x00000001
	call rl_add_funmap_entry (retsize: 0;)
	x0 = Mem0[x19 + -8:word64]
	branch x0 != 0x0000000000000000 l000000000048F9F0
	// succ:  l000000000048FA04 l000000000048F9F0
l000000000048FA04:
	w0 = 0x00000001
	x21 = x21 + 0xFFFFFFFFFFFFFDD8
	Mem0[x21 + 8:word32] = w0
	x0 = 0x00000000004E4000
	Mem0[x0 + 168:word32] = w20
	// succ:  l000000000048FA18
l000000000048FA18:
	v14 = sp + 16
	x19 = Mem0[v14:word64]
	v14 = v14 + 8
	x20 = Mem0[v14:word64]
	x21 = Mem0[sp + 32:word64]
	x29 = Mem0[sp:word64]
	sp = sp + 8
	x30 = Mem0[sp:word64]
	sp = sp + 48
	return
	// succ:  rl_initialize_funmap_exit
rl_initialize_funmap_exit:


// rl_funmap_names
// Return size: 0
void rl_funmap_names()
rl_funmap_names_entry:
	// succ:  l000000000048FA28
l000000000048FA28:
	sp = fp
	sp = sp + -64
	Mem0[sp:word64] = x29
	sp = sp + 8
	Mem0[sp:word64] = x30
	x29 = x31 + 0x0000000000000000
	v8 = sp + 16
	Mem0[v8:word64] = x19
	v8 = v8 + 8
	Mem0[v8:word64] = x20
	v11 = sp + 32
	Mem0[v11:word64] = x21
	v11 = v11 + 8
	Mem0[v11:word64] = x22
	v14 = sp + 48
	Mem0[v14:word64] = x23
	v14 = v14 + 8
	Mem0[v14:word64] = x24
	x22 = 0x00000000004E4000
	call rl_initialize_funmap (retsize: 0;)
	x0 = Mem0[x22 + 176:word64]
	x19 = Mem0[x0:word64]
	branch x19 == 0x0000000000000000 l000000000048FAEC
	// succ:  l000000000048FA50 l000000000048FAEC
l000000000048FA50:
	x20 = 0x0000000000000000
	x19 = 0x0000000000000001
	x23 = x20
	w24 = w20
	x21 = x20
	goto l000000000048FA9C
	// succ:  l000000000048FA9C
l000000000048FA68:
	x0 = Mem0[x22 + 176:word64]
	x1 = x23 + 0x0000000000000001
	x0 = Mem0[x0 + x20:word64]
	x2 = x19 + 0x0000000000000001
	x0 = Mem0[x0:word64]
	x23 = x19
	Mem0[x21 + x20:word64] = x0
	Mem0[x21 + x1:word64] = 0x0000000000000000
	x0 = Mem0[x22 + 176:word64]
l000000000048FA9C:
	NZCV = cond(w24 - w19)
	branch Test(GT,NZV) l000000000048FA68
	// succ:  l000000000048FAA4 l000000000048FA68
l000000000048FAA4:
	w24 = w24 + 0x00000014
	x0 = x21
l000000000048FAC0:
	x3 = 0x000000000049E000
	x0 = x21
	x2 = 0x0000000000000008
	x3 = x3 + 0x00000000000000CC
	call qsort (retsize: 0;)
	x0 = x21
	v24 = sp + 16
	x19 = Mem0[v24:word64]
	v24 = v24 + 8
	x20 = Mem0[v24:word64]
	v25 = sp + 32
	x21 = Mem0[v25:word64]
	v25 = v25 + 8
	x22 = Mem0[v25:word64]
	v26 = sp + 48
	x23 = Mem0[v26:word64]
	v26 = v26 + 8
	x24 = Mem0[v26:word64]
	x29 = Mem0[sp:word64]
	sp = sp + 8
	x30 = Mem0[sp:word64]
	sp = sp + 64
	return
	// succ:  rl_funmap_names_exit
l000000000048FAEC:
	x1 = x19
	x21 = x19
	goto l000000000048FAC0
	// succ:  l000000000048FAC0
rl_funmap_names_exit:


// rl_make_bare_keymap
// Return size: 0
void rl_make_bare_keymap()
rl_make_bare_keymap_entry:
	// succ:  l000000000048FAF8
l000000000048FAF8:
	sp = fp
	sp = sp + -16
	Mem0[sp:word64] = x29
	sp = sp + 8
	Mem0[sp:word64] = x30
	x29 = x31 + 0x0000000000000000
	x0 = 0x0000000000001010
	call xmalloc (retsize: 0;)
	x1 = 0x0000000000000000
	x3 = 0x0000000000001010
	// succ:  l000000000048FB10
l000000000048FB10:
	Mem0[x0 + x1:byte] = 0x00
	x2 = x0 + x1
	x1 = x1 + 0x0000000000000010
	Mem0[x2 + 8:word64] = 0x0000000000000000
	x31 = x1 - x3
	NZCV = cond(x31)
	branch Test(NE,Z) l000000000048FB10
	// succ:  l000000000048FB28 l000000000048FB10
l000000000048FB28:
	x29 = Mem0[sp:word64]
	sp = sp + 8
	x30 = Mem0[sp:word64]
	sp = sp + 16
	return
	// succ:  rl_make_bare_keymap_exit
rl_make_bare_keymap_exit:


// rl_copy_keymap
// Return size: 0
void rl_copy_keymap()
rl_copy_keymap_entry:
	// succ:  l000000000048FB30
l000000000048FB30:
	sp = fp
	sp = sp + -32
	Mem0[sp:word64] = x29
	sp = sp + 8
	Mem0[sp:word64] = x30
	x29 = x31 + 0x0000000000000000
	Mem0[sp + 16:word64] = x19
	x19 = x0
	call rl_make_bare_keymap (retsize: 0;)
	x1 = 0x0000000000000000
	x4 = 0x0000000000001010
	// succ:  l000000000048FB4C
l000000000048FB4C:
	v11 = Mem0[x19 + x1:byte]
	w2 = (word32) v11
	x3 = x19 + x1
	Mem0[x0 + x1:byte] = (byte) w2
	x3 = Mem0[x3 + 8:word64]
	x2 = x0 + x1
	x1 = x1 + 0x0000000000000010
	Mem0[x2 + 8:word64] = x3
	x31 = x1 - x4
	NZCV = cond(x31)
	branch Test(NE,Z) l000000000048FB4C
	// succ:  l000000000048FB70 l000000000048FB4C
l000000000048FB70:
	x19 = Mem0[sp + 16:word64]
	x29 = Mem0[sp:word64]
	sp = sp + 8
	x30 = Mem0[sp:word64]
	sp = sp + 32
	return
	// succ:  rl_copy_keymap_exit
rl_copy_keymap_exit:


// rl_make_keymap
// Return size: 0
void rl_make_keymap()
rl_make_keymap_entry:
	// succ:  l000000000048FB7C
l000000000048FB7C:
	sp = fp
	sp = sp + -16
	Mem0[sp:word64] = x29
	sp = sp + 8
	Mem0[sp:word64] = x30
	x29 = x31 + 0x0000000000000000
	call rl_make_bare_keymap (retsize: 0;)
	x3 = 0x00000000004A2000
	x1 = 0x0000000000000000
	x3 = x3 + 0xFFFFFFFFFFFFFD50
	// succ:  l000000000048FB94
l000000000048FB94:
	x2 = x0 + x1
	x1 = x1 + 0x0000000000000010
	Mem0[x2 + 520:word64] = x3
	x31 = x1 - 0x00000000000005F0
	NZCV = cond(x31)
	branch Test(NE,Z) l000000000048FB94
	// succ:  l000000000048FBA8 l000000000048FB94
l000000000048FBA8:
	x1 = 0x00000000004A2000
	x1 = x1 + 0xFFFFFFFFFFFFFEAC
	Mem0[x0 + 2040:word64] = x1
	Mem0[x0 + 136:word64] = x1
	Mem0[x0 + 152:word64] = x3
	x1 = 0x0000000000000000
	// succ:  l000000000048FBC0
l000000000048FBC0:
	x2 = x0 + x1
	x1 = x1 + 0x0000000000000010
	Mem0[x2 + 2056:word64] = x3
	x31 = x1 - 0xFFFFFFFFFFFFF800
	NZCV = cond(x31)
	branch Test(NE,Z) l000000000048FBC0
	// succ:  l000000000048FBD4 l000000000048FBC0
l000000000048FBD4:
	x29 = Mem0[sp:word64]
	sp = sp + 8
	x30 = Mem0[sp:word64]
	sp = sp + 16
	return
	// succ:  rl_make_keymap_exit
rl_make_keymap_exit:


// rl_discard_keymap
// Return size: 0
void rl_discard_keymap()
rl_discard_keymap_entry:
	// succ:  l000000000048FBDC
l000000000048FBDC:
	sp = fp
	sp = sp + -48
	Mem0[sp:word64] = x29
	sp = sp + 8
	Mem0[sp:word64] = x30
	x29 = x31 + 0x0000000000000000
	v8 = sp + 16
	Mem0[v8:word64] = x19
	v8 = v8 + 8
	Mem0[v8:word64] = x20
	v11 = sp + 32
	Mem0[v11:word64] = x21
	v11 = v11 + 8
	Mem0[v11:word64] = x22
	x20 = x0
	x19 = 0x0000000000000000
	x21 = 0x0000000000001010
	branch x0 != 0x0000000000000000 l000000000048FC20
	// succ:  l000000000048FBFC l000000000048FC20
l000000000048FBFC:
	goto l000000000048FC4C
	// succ:  l000000000048FC4C
l000000000048FC00:
	w31 = w1 - 0x00000002
	NZCV = cond(w31)
	x0 = x20 + x19
	branch Test(NE,Z) l000000000048FC14
	// succ:  l000000000048FC0C l000000000048FC14
l000000000048FC0C:
	x0 = Mem0[x0 + 8:word64]
	call xfree (retsize: 0;)
	// succ:  l000000000048FC14
l000000000048FC14:
	x19 = x19 + 0x0000000000000010
	x31 = x19 - x21
	NZCV = cond(x31)
	branch Test(EQ,Z) l000000000048FC4C
	// succ:  l000000000048FC20 l000000000048FC4C
l000000000048FC20:
	v14 = Mem0[x20 + x19:byte]
	w1 = (word32) v14
	w31 = w1 - 0x00000001
	NZCV = cond(w31)
	branch Test(NE,Z) l000000000048FC00
	// succ:  l000000000048FC2C l000000000048FC00
l000000000048FC2C:
	x22 = x20 + x19
	x0 = Mem0[x22 + 8:word64]
	x19 = x19 + 0x0000000000000010
	call rl_discard_keymap (retsize: 0;)
	x0 = Mem0[x22 + 8:word64]
	call xfree (retsize: 0;)
	x31 = x19 - x21
	NZCV = cond(x31)
	branch Test(NE,Z) l000000000048FC20
	// succ:  l000000000048FC4C l000000000048FC20
l000000000048FC4C:
	v18 = sp + 16
	x19 = Mem0[v18:word64]
	v18 = v18 + 8
	x20 = Mem0[v18:word64]
	v19 = sp + 32
	x21 = Mem0[v19:word64]
	v19 = v19 + 8
	x22 = Mem0[v19:word64]
	x29 = Mem0[sp:word64]
	sp = sp + 8
	x30 = Mem0[sp:word64]
	sp = sp + 48
	return
	// succ:  rl_discard_keymap_exit
rl_discard_keymap_exit:


// rl_free_keymap
// Return size: 0
void rl_free_keymap()
rl_free_keymap_entry:
	// succ:  l000000000048FC5C
l000000000048FC5C:
	sp = fp
	sp = sp + -32
	Mem0[sp:word64] = x29
	sp = sp + 8
	Mem0[sp:word64] = x30
	x29 = x31 + 0x0000000000000000
	Mem0[sp + 16:word64] = x19
	x19 = x0
	call rl_discard_keymap (retsize: 0;)
	x0 = x19
	x19 = Mem0[sp + 16:word64]
	x29 = Mem0[sp:word64]
	sp = sp + 8
	x30 = Mem0[sp:word64]
	sp = sp + 32
	// succ:  l000000000048FC7C_thunk_xfree
l000000000048FC7C_thunk_xfree:
	call xfree (retsize: 0;)
	return
	// succ:  rl_free_keymap_exit
rl_free_keymap_exit:


// fn000000000048FC80
// Return size: 0
void fn000000000048FC80()
fn000000000048FC80_entry:
	// succ:  l000000000048FC80
l000000000048FC80:
	sp = fp
	sp = sp + -64
	Mem0[sp:word64] = x29
	sp = sp + 8
	Mem0[sp:word64] = x30
	x29 = x31 + 0x0000000000000000
	v8 = sp + 16
	Mem0[v8:word64] = x19
	v8 = v8 + 8
	Mem0[v8:word64] = x20
	Mem0[sp + 32:word64] = x21
	x20 = x0
	branch (w1 & 0x00000000) == 0x00000000 l000000000048FD34
	// succ:  l000000000048FC98 l000000000048FD34
l000000000048FC98:
	Mem0[x29 + 56:word64] = x2
	Mem0[x29 + 48:word64] = x1
	call where_history (retsize: 0;)
	x1 = Mem0[x29 + 48:word64]
	w21 = w0
	w0 = w1
	call history_set_pos (retsize: 0;)
	x2 = Mem0[x29 + 56:word64]
	branch w0 == 0x00000000 l000000000048FD34
	// succ:  l000000000048FCBC l000000000048FD34
l000000000048FCBC:
	x19 = 0x00000000004E1000
	w0 = Mem0[x19 + 3168:word32]
	w0 = w0 | 0x00000200
	Mem0[x19 + 3168:word32] = w0
	v16 = Mem0[x20:byte]
	w0 = (word32) v16
	w31 = w0 - 0x0000005E
	NZCV = cond(w31)
	branch Test(EQ,Z) l000000000048FD20
	// succ:  l000000000048FCD8 l000000000048FD20
l000000000048FCD8:
	x0 = x20
	w1 = w2
	call history_search (retsize: 0;)
	w20 = w0
	// succ:  l000000000048FCE8
l000000000048FCE8:
	w0 = Mem0[x19 + 3168:word32]
	w31 = w20 + 0x00000001
	NZCV = cond(w31)
	w0 = w0 & 0xFFFFFDFF
	Mem0[x19 + 3168:word32] = w0
	branch Test(EQ,Z) l000000000048FD04
	// succ:  l000000000048FCFC l000000000048FD04
l000000000048FCFC:
	call where_history (retsize: 0;)
	w20 = w0
	// succ:  l000000000048FD04
l000000000048FD04:
	w0 = w21
	call history_set_pos (retsize: 0;)
	w0 = w20
	// succ:  l000000000048FD10
l000000000048FD10:
	v22 = sp + 16
	x19 = Mem0[v22:word64]
	v22 = v22 + 8
	x20 = Mem0[v22:word64]
	x21 = Mem0[sp + 32:word64]
	x29 = Mem0[sp:word64]
	sp = sp + 8
	x30 = Mem0[sp:word64]
	sp = sp + 64
	return
	// succ:  fn000000000048FC80_exit
l000000000048FD20:
	x0 = x20 + 0x0000000000000001
	w1 = w2
	call history_search_prefix (retsize: 0;)
	w20 = w0
	goto l000000000048FCE8
	// succ:  l000000000048FCE8
l000000000048FD34:
	w0 = 0xFFFFFFFF
	goto l000000000048FD10
	// succ:  l000000000048FD10
fn000000000048FC80_exit:


// fn000000000048FD3C
// Return size: 0
void fn000000000048FD3C()
fn000000000048FD3C_entry:
	// succ:  l000000000048FD3C
l000000000048FD3C:
	sp = fp
	sp = sp + -32
	Mem0[sp:word64] = x29
	sp = sp + 8
	Mem0[sp:word64] = x30
	x29 = x31 + 0x0000000000000000
	v8 = sp + 16
	Mem0[v8:word64] = x19
	v8 = v8 + 8
	Mem0[v8:word64] = x20
	call where_history (retsize: 0;)
	x20 = 0x00000000004E4000
	w1 = Mem0[x20 + 136:word32]
	x19 = 0x00000000004E1000
	x19 = x19 + 0xFFFFFFFFFFFFFDE8
	Mem0[x19:word32] = w0
	Mem0[x19 + 4:word32] = w1
	Mem0[x19 + 8:word64] = 0x0000000000000000
	branch w1 == 0x00000000 l000000000048FDA8
	// succ:  l000000000048FD6C l000000000048FDA8
l000000000048FD6C:
	w0 = Mem0[x19 + 16:word32]
	w0 = w0 - 0x00000002
	NZCV = cond(w1 - w0)
	branch Test(GE,NZV) l000000000048FDB4
	// succ:  l000000000048FD7C l000000000048FDB4
l000000000048FD7C:
	x19 = Mem0[x19 + 24:word64]
	x0 = x19
	w1 = 0x0000005E
	Mem0[x0:byte] = (byte) w1
	x0 = x0 + 1
	x1 = 0x00000000004E1000
	x1 = Mem0[x1 + 3256:word64]
	v16 = Mem0[x20 + 68:int32]
	x2 = (word64) v16
	strncpy(x0, x1, x2)
	sp = sp + 0xFFFFFFFFFFFFFFF8
	v17 = Mem0[x20 + 68:int32]
	x0 = (word64) v17
	x19 = x19 + x0
	Mem0[x19 + 1:byte] = 0x00
	// succ:  l000000000048FDA8
l000000000048FDA8:
	v18 = sp + 16
	x19 = Mem0[v18:word64]
	v18 = v18 + 8
	x20 = Mem0[v18:word64]
	x29 = Mem0[sp:word64]
	sp = sp + 8
	x30 = Mem0[sp:word64]
	sp = sp + 32
	// succ:  l000000000048FDB0_thunk__rl_free_saved_history_line
l000000000048FDB0_thunk__rl_free_saved_history_line:
	call _rl_free_saved_history_line (retsize: 0;)
	return
	// succ:  fn000000000048FD3C_exit
l000000000048FDB4:
	w2 = w1 + 0x00000002
	x0 = Mem0[x19 + 24:word64]
fn000000000048FD3C_exit:


// fn000000000048FDD4
// Return size: 0
void fn000000000048FDD4()
fn000000000048FDD4_entry:
	// succ:  l000000000048FDD4
l000000000048FDD4:
	sp = fp
	sp = sp + -32
	Mem0[sp:word64] = x29
	sp = sp + 8
	Mem0[sp:word64] = x30
	x29 = x31 + 0x0000000000000000
	x1 = 0x00000000004E3000
	w2 = Mem0[x1 + 3900:word32]
	w1 = 0x00000000
	Mem0[sp + 16:word64] = x19
	call _rl_replace_text (retsize: 0;)
	w0 = 0x00000001
	call _rl_fix_point (retsize: 0;)
	x0 = 0x00000000004D9000
	w0 = Mem0[x0 + 1208:word32]
	branch w0 == 0x00000000 l000000000048FE24
	// succ:  l000000000048FE04 l000000000048FE24
l000000000048FE04:
	x19 = 0x00000000004E2000
	x0 = Mem0[x19 + 3864:word64]
	branch x0 == 0x0000000000000000 l000000000048FE14
	// succ:  l000000000048FE10 l000000000048FE14
l000000000048FE10:
	call _rl_free_history_entry (retsize: 0;)
	// succ:  l000000000048FE14
l000000000048FE14:
	Mem0[x19 + 3864:word64] = 0x0000000000000000
	x19 = Mem0[sp + 16:word64]
	x29 = Mem0[sp:word64]
	sp = sp + 8
	x30 = Mem0[sp:word64]
	sp = sp + 32
	return
	// succ:  fn000000000048FDD4_exit
l000000000048FE24:
	call rl_free_undo_list (retsize: 0;)
	goto l000000000048FE04
	// succ:  l000000000048FE04
fn000000000048FDD4_exit:


// fn000000000048FE2C
// Return size: 0
void fn000000000048FE2C()
fn000000000048FE2C_entry:
	// succ:  l000000000048FE2C
l000000000048FE2C:
	sp = fp
	sp = sp + -32
	Mem0[sp:word64] = x29
	sp = sp + 8
	Mem0[sp:word64] = x30
	x29 = x31 + 0x0000000000000000
	v6 = sp + 16
	Mem0[v6:word64] = x19
	v6 = v6 + 8
	Mem0[v6:word64] = x20
	w2 = w1
	branch x0 == 0x0000000000000000 l000000000048FED4
	// succ:  l000000000048FE40 l000000000048FED4
l000000000048FE40:
	v12 = Mem0[x0:byte]
	w3 = (word32) v12
	branch w3 == 0x00000000 l000000000048FED4
	// succ:  l000000000048FE48 l000000000048FED4
l000000000048FE48:
	x19 = 0x00000000004E1000
	x19 = x19 + 0xFFFFFFFFFFFFFDE8
	w1 = Mem0[x19 + 32:word32]
	branch (w1 & 0x00000000) == 0x00000000 l000000000048FED4
	// succ:  l000000000048FE58 l000000000048FED4
l000000000048FE58:
	w1 = w1 + w2
	call fn000000000048FC80 (retsize: 0;)
	w31 = w0 + 0x00000001
	NZCV = cond(w31)
	branch Test(EQ,Z) l000000000048FEC4
	// succ:  l000000000048FE68 l000000000048FEC4
l000000000048FE68:
	Mem0[x19 + 32:word32] = w0
	call where_history (retsize: 0;)
	w20 = w0
	w0 = Mem0[x19 + 32:word32]
	call history_set_pos (retsize: 0;)
	call current_history (retsize: 0;)
	x1 = 0x00000000004D9000
	w1 = Mem0[x1 + 1208:word32]
	x19 = x0
	branch w1 != 0x00000000 l000000000048FEE8
	// succ:  l000000000048FE90 l000000000048FEE8
l000000000048FE90:
	x0 = Mem0[x19:word64]
	call fn000000000048FDD4 (retsize: 0;)
	x0 = 0x00000000004E3000
	w1 = Mem0[x0 + 3900:word32]
	x0 = 0x00000000004E4000
	Mem0[x0 + 136:word32] = 0x00000000
	x0 = 0x00000000004E4000
	Mem0[x0 + 120:word32] = w1
	call rl_clear_message (retsize: 0;)
	w0 = 0x00000001
	v20 = sp + 16
	x19 = Mem0[v20:word64]
	v20 = v20 + 8
	x20 = Mem0[v20:word64]
	x29 = Mem0[sp:word64]
	sp = sp + 8
	x30 = Mem0[sp:word64]
	sp = sp + 32
	return
	// succ:  fn000000000048FE2C_exit
l000000000048FEC4:
	call rl_maybe_unsave_line (retsize: 0;)
	call rl_clear_message (retsize: 0;)
	x0 = 0x00000000004E4000
	Mem0[x0 + 136:word32] = 0x00000000
	// succ:  l000000000048FED4
l000000000048FED4:
	call rl_ding (retsize: 0;)
	w0 = 0x00000000
	v21 = sp + 16
	x19 = Mem0[v21:word64]
	v21 = v21 + 8
	x20 = Mem0[v21:word64]
	x29 = Mem0[sp:word64]
	sp = sp + 8
	x30 = Mem0[sp:word64]
	sp = sp + 32
	return
	// succ:  fn000000000048FE2C_exit
l000000000048FEE8:
	w0 = w20
	call history_set_pos (retsize: 0;)
	goto l000000000048FE90
	// succ:  l000000000048FE90
fn000000000048FE2C_exit:


// fn000000000048FEF4
// Return size: 0
void fn000000000048FEF4()
fn000000000048FEF4_entry:
	// succ:  l000000000048FEF4
l000000000048FEF4:
	sp = fp
	sp = sp + -48
	Mem0[sp:word64] = x29
	sp = sp + 8
	Mem0[sp:word64] = x30
	x29 = x31 + 0x0000000000000000
	v8 = sp + 16
	Mem0[v8:word64] = x19
	v8 = v8 + 8
	Mem0[v8:word64] = x20
	x1 = 0x00000000004E4000
	x20 = x0
	w0 = Mem0[x0 + 52:word32]
	x2 = 0x00000000004E4000
	w1 = Mem0[x1 + 136:word32]
	Mem0[sp + 32:word64] = x21
	Mem0[x2 + 120:word32] = w0
	x19 = 0x00000000004E1000
	branch w1 != 0x00000000 l000000000048FF50
	// succ:  l000000000048FF24 l000000000048FF50
l000000000048FF24:
	x0 = x19 + 0xFFFFFFFFFFFFFDE8
	x0 = Mem0[x0 + 40:word64]
	branch x0 == 0x0000000000000000 l000000000048FFB0
	// succ:  l000000000048FF30 l000000000048FFB0
l000000000048FF30:
	call rl_restore_prompt (retsize: 0;)
	x19 = x19 + 0xFFFFFFFFFFFFFDE8
	x0 = Mem0[x19 + 40:word64]
	w1 = Mem0[x20 + 100:word32]
	x21 = Mem0[sp + 32:word64]
	v15 = sp + 16
	x19 = Mem0[v15:word64]
	v15 = v15 + 8
	x20 = Mem0[v15:word64]
	x29 = Mem0[sp:word64]
	sp = sp + 8
	x30 = Mem0[sp:word64]
	sp = sp + 48
	// succ:  l000000000048FF4C_thunk_fn000000000048FE2C
l000000000048FF4C_thunk_fn000000000048FE2C:
	call fn000000000048FE2C (retsize: 0;)
	return
	// succ:  fn000000000048FEF4_exit
l000000000048FF50:
	x1 = x19 + 0xFFFFFFFFFFFFFDE8
	w2 = Mem0[x20 + 56:word32]
	x0 = Mem0[x1 + 40:word64]
	Mem0[x1 + 32:word32] = w2
	branch x0 == 0x0000000000000000 l000000000048FF68
	// succ:  l000000000048FF64 l000000000048FF68
l000000000048FF64:
	call free (retsize: 0;)
	// succ:  l000000000048FF68
l000000000048FF68:
	x21 = 0x00000000004E1000
	x0 = Mem0[x21 + 3256:word64]
	strlen(x0)
	sp = sp + 0xFFFFFFFFFFFFFFF8
	x0 = x0 + 0x0000000000000001
	call xmalloc (retsize: 0;)
	x1 = Mem0[x21 + 3256:word64]
	strcpy(x0, x1)
	sp = sp + 0xFFFFFFFFFFFFFFF8
	x1 = x19 + 0xFFFFFFFFFFFFFDE8
	Mem0[x1 + 40:word64] = x0
	x19 = x19 + 0xFFFFFFFFFFFFFDE8
	call rl_free_undo_list (retsize: 0;)
	call rl_restore_prompt (retsize: 0;)
	x0 = Mem0[x19 + 40:word64]
	w1 = Mem0[x20 + 100:word32]
	x21 = Mem0[sp + 32:word64]
	v25 = sp + 16
	x19 = Mem0[v25:word64]
	v25 = v25 + 8
	x20 = Mem0[v25:word64]
	x29 = Mem0[sp:word64]
	sp = sp + 8
	x30 = Mem0[sp:word64]
	sp = sp + 48
	// succ:  l000000000048FFAC_thunk_fn000000000048FE2C
l000000000048FFAC_thunk_fn000000000048FE2C:
	call fn000000000048FE2C (retsize: 0;)
	return
	// succ:  fn000000000048FEF4_exit
l000000000048FFB0:
	call rl_ding (retsize: 0;)
	call rl_restore_prompt (retsize: 0;)
	x0 = 0x00000000004E1000
	w1 = Mem0[x0 + 3168:word32]
	v27 = sp + 16
	x19 = Mem0[v27:word64]
	v27 = v27 + 8
	x20 = Mem0[v27:word64]
	w1 = w1 & 0xFFFFFEFF
	Mem0[x0 + 3168:word32] = w1
	x21 = Mem0[sp + 32:word64]
	w0 = 0xFFFFFFFF
	x29 = Mem0[sp:word64]
	sp = sp + 8
	x30 = Mem0[sp:word64]
	sp = sp + 48
	return
	// succ:  fn000000000048FEF4_exit
fn000000000048FEF4_exit:


// rl_history_search_forward
// Return size: 0
void rl_history_search_forward()
rl_history_search_forward_entry:
	// succ:  l000000000049011C
l000000000049011C:
	sp = fp
	sp = sp + -48
	Mem0[sp:word64] = x29
	sp = sp + 8
	Mem0[sp:word64] = x30
	x29 = x31 + 0x0000000000000000
	Mem0[sp + 16:word64] = x19
	w19 = w0
	branch w0 == 0x00000000 l0000000000490198
	// succ:  l0000000000490130 l0000000000490198
l0000000000490130:
	x0 = 0x00000000004E1000
	x0 = Mem0[x0 + 3248:word64]
	x2 = 0x0000000000490000
	x2 = x2 + 0x000000000000011C
	x31 = x0 - x2
	NZCV = cond(x31)
	branch Test(EQ,Z) l0000000000490164
	// succ:  l0000000000490148 l0000000000490164
l0000000000490148:
	x2 = 0x0000000000490000
	x2 = x2 + 0x00000000000001B4
	x31 = x0 - x2
	NZCV = cond(x31)
	branch Test(EQ,Z) l0000000000490164
	// succ:  l0000000000490158 l0000000000490164
l0000000000490158:
	Mem0[x29 + 32:word64] = x1
	call fn000000000048FD3C (retsize: 0;)
	x1 = Mem0[x29 + 32:word64]
	// succ:  l0000000000490164
l0000000000490164:
	x0 = 0x00000000004E1000
	x0 = x0 + 0xFFFFFFFFFFFFFDE8
	w0 = Mem0[x0 + 4:word32]
	branch w0 == 0x00000000 l00000000004901A4
	// succ:  l0000000000490174 l00000000004901A4
l0000000000490174:
l0000000000490198:
	x19 = Mem0[sp + 16:word64]
	x29 = Mem0[sp:word64]
	sp = sp + 8
	x30 = Mem0[sp:word64]
	sp = sp + 48
	return
	// succ:  rl_history_search_forward_exit
l00000000004901A4:
	w0 = w19
	x19 = Mem0[sp + 16:word64]
	x29 = Mem0[sp:word64]
	sp = sp + 8
	x30 = Mem0[sp:word64]
	sp = sp + 48
	// succ:  l00000000004901B0_thunk_rl_get_next_history
l00000000004901B0_thunk_rl_get_next_history:
	call rl_get_next_history (retsize: 0;)
	return
	// succ:  rl_history_search_forward_exit
rl_history_search_forward_exit:


// rl_history_search_backward
// Return size: 0
void rl_history_search_backward()
rl_history_search_backward_entry:
	// succ:  l00000000004901B4
l00000000004901B4:
	sp = fp
	sp = sp + -48
	Mem0[sp:word64] = x29
	sp = sp + 8
	Mem0[sp:word64] = x30
	x29 = x31 + 0x0000000000000000
	Mem0[sp + 16:word64] = x19
	w19 = w0
	branch w0 == 0x00000000 l0000000000490230
	// succ:  l00000000004901C8 l0000000000490230
l00000000004901C8:
	x0 = 0x00000000004E1000
	x0 = Mem0[x0 + 3248:word64]
	x2 = 0x0000000000490000
	x2 = x2 + 0x000000000000011C
	x31 = x0 - x2
	NZCV = cond(x31)
	branch Test(EQ,Z) l00000000004901FC
	// succ:  l00000000004901E0 l00000000004901FC
l00000000004901E0:
	x2 = 0x0000000000490000
	x2 = x2 + 0x00000000000001B4
	x31 = x0 - x2
	NZCV = cond(x31)
	branch Test(EQ,Z) l00000000004901FC
	// succ:  l00000000004901F0 l00000000004901FC
l00000000004901F0:
	Mem0[x29 + 32:word64] = x1
	call fn000000000048FD3C (retsize: 0;)
	x1 = Mem0[x29 + 32:word64]
	// succ:  l00000000004901FC
l00000000004901FC:
	x0 = 0x00000000004E1000
	x0 = x0 + 0xFFFFFFFFFFFFFDE8
	w0 = Mem0[x0 + 4:word32]
	branch w0 == 0x00000000 l000000000049023C
	// succ:  l000000000049020C l000000000049023C
l000000000049020C:
l0000000000490230:
	x19 = Mem0[sp + 16:word64]
	x29 = Mem0[sp:word64]
	sp = sp + 8
	x30 = Mem0[sp:word64]
	sp = sp + 48
	return
	// succ:  rl_history_search_backward_exit
l000000000049023C:
	w0 = w19
	x19 = Mem0[sp + 16:word64]
	x29 = Mem0[sp:word64]
	sp = sp + 8
	x30 = Mem0[sp:word64]
	sp = sp + 48
	// succ:  l0000000000490248_thunk_rl_get_previous_history
l0000000000490248_thunk_rl_get_previous_history:
	call rl_get_previous_history (retsize: 0;)
	return
	// succ:  rl_history_search_backward_exit
rl_history_search_backward_exit:


// fn000000000049024C
// Return size: 0
void fn000000000049024C()
fn000000000049024C_entry:
	// succ:  l000000000049024C
l000000000049024C:
	sp = fp
	sp = sp + -48
	Mem0[sp:word64] = x29
	sp = sp + 8
	Mem0[sp:word64] = x30
	x29 = x31 + 0x0000000000000000
	v8 = sp + 16
	Mem0[v8:word64] = x19
	v8 = v8 + 8
	Mem0[v8:word64] = x20
	Mem0[sp + 32:word64] = x21
	w31 = w1 - 0x0000000A
	NZCV = cond(w31)
	w19 = w1
	x20 = x0
	branch Test(EQ,Z) l0000000000490370
	// succ:  l000000000049026C l0000000000490370
l000000000049026C:
	branch Test(LE,ZCV) l00000000004902AC
	// succ:  l0000000000490270 l00000000004902AC
l0000000000490270:
	w31 = w1 - 0x00000015
	NZCV = cond(w31)
	branch Test(EQ,Z) l00000000004902EC
	// succ:  l0000000000490278 l00000000004902EC
l0000000000490278:
	branch Test(LE,ZCV) l0000000000490368
	// succ:  l000000000049027C l0000000000490368
l000000000049027C:
	w31 = w1 - 0x00000017
	NZCV = cond(w31)
	branch Test(NE,Z) l00000000004902F8
	// succ:  l0000000000490284 l00000000004902F8
l0000000000490284:
	w0 = 0x00000001
	call rl_unix_word_rubout (retsize: 0;)
	// succ:  l000000000049028C
l000000000049028C:
	x0 = 0x00000000004DE000
	x0 = Mem0[x0 + 1488:word64]
	call x0 (retsize: 0;)
	w0 = 0x00000001
	v18 = sp + 16
	x19 = Mem0[v18:word64]
	v18 = v18 + 8
	x20 = Mem0[v18:word64]
	x21 = Mem0[sp + 32:word64]
	x29 = Mem0[sp:word64]
	sp = sp + 8
	x30 = Mem0[sp:word64]
	sp = sp + 48
	return
	// succ:  fn000000000049024C_exit
l00000000004902AC:
	w31 = w1 - 0x00000007
	NZCV = cond(w31)
	branch Test(EQ,Z) l000000000049031C
	// succ:  l00000000004902B4 l000000000049031C
l00000000004902B4:
	w31 = w1 - 0x00000008
	NZCV = cond(w31)
	branch Test(EQ,Z) l0000000000490300
	// succ:  l00000000004902BC l0000000000490300
l00000000004902BC:
	w31 = w1 - 0x00000003
	NZCV = cond(w31)
	branch Test(EQ,Z) l000000000049031C
	// succ:  l00000000004902C4 l000000000049031C
l00000000004902C4:
	__ctype_get_mb_cur_max()
	sp = sp + 0xFFFFFFFFFFFFFFF8
	x31 = x0 - 0x0000000000000001
	NZCV = cond(x31)
	branch Test(ULE,ZC) l00000000004902DC
	// succ:  l00000000004902D0 l00000000004902DC
l00000000004902D0:
	x0 = 0x00000000004E2000
	w0 = Mem0[x0 + 3968:word32]
	branch w0 == 0x00000000 l0000000000490384
	// succ:  l00000000004902DC l0000000000490384
l00000000004902DC:
	w1 = w19
	w0 = 0x00000001
	call _rl_insert_char (retsize: 0;)
	goto l000000000049028C
	// succ:  l000000000049028C
l00000000004902EC:
	w0 = 0x00000001
	call rl_unix_line_discard (retsize: 0;)
	goto l000000000049028C
	// succ:  l000000000049028C
l00000000004902F8:
	w31 = w1 - 0x0000007F
	NZCV = cond(w31)
	branch Test(NE,Z) l00000000004902C4
	// succ:  l0000000000490300 l00000000004902C4
l0000000000490300:
	x21 = 0x00000000004E4000
	w0 = Mem0[x21 + 136:word32]
	branch w0 == 0x00000000 l0000000000490390
	// succ:  l000000000049030C l0000000000490390
l000000000049030C:
	w1 = w19
	w0 = 0x00000001
	call _rl_rubout_char (retsize: 0;)
	goto l000000000049028C
	// succ:  l000000000049028C
l000000000049031C:
	call rl_ding (retsize: 0;)
	call rl_maybe_unsave_line (retsize: 0;)
	call rl_clear_message (retsize: 0;)
	w2 = Mem0[x20 + 48:word32]
	x0 = 0x00000000004E4000
	w1 = Mem0[x20 + 52:word32]
	Mem0[x0 + 136:word32] = w2
	// succ:  l0000000000490338
l0000000000490338:
	x0 = 0x00000000004E4000
	Mem0[x0 + 120:word32] = w1
	call rl_restore_prompt (retsize: 0;)
	x1 = 0x00000000004E1000
	w2 = Mem0[x1 + 3168:word32]
	w0 = 0xFFFFFFFF
	w2 = w2 & 0xFFFFFEFF
	v23 = sp + 16
	x19 = Mem0[v23:word64]
	v23 = v23 + 8
	x20 = Mem0[v23:word64]
	x21 = Mem0[sp + 32:word64]
	Mem0[x1 + 3168:word32] = w2
	x29 = Mem0[sp:word64]
	sp = sp + 8
	x30 = Mem0[sp:word64]
	sp = sp + 48
	return
	// succ:  fn000000000049024C_exit
l0000000000490368:
	w31 = w1 - 0x0000000D
	NZCV = cond(w31)
	branch Test(NE,Z) l00000000004902C4
	// succ:  l0000000000490370 l00000000004902C4
l0000000000490370:
	w0 = 0x00000000
	v19 = sp + 16
	x19 = Mem0[v19:word64]
	v19 = v19 + 8
	x20 = Mem0[v19:word64]
	x21 = Mem0[sp + 32:word64]
	x29 = Mem0[sp:word64]
	sp = sp + 8
	x30 = Mem0[sp:word64]
	sp = sp + 48
	return
	// succ:  fn000000000049024C_exit
l0000000000490384:
	x0 = x20 + 0x000000000000006C
	call rl_insert_text (retsize: 0;)
	goto l000000000049028C
	// succ:  l000000000049028C
l0000000000490390:
	call rl_maybe_unsave_line (retsize: 0;)
	call rl_clear_message (retsize: 0;)
	w0 = Mem0[x20 + 48:word32]
	w1 = Mem0[x20 + 52:word32]
	Mem0[x21 + 136:word32] = w0
	goto l0000000000490338
	// succ:  l0000000000490338
fn000000000049024C_exit:


// rl_noninc_forward_search
// Return size: 0
void rl_noninc_forward_search()
rl_noninc_forward_search_entry:
	// succ:  l00000000004904F4
l00000000004904F4:
	sp = fp
	w31 = w1 - 0x0000003F
	NZCV = cond(w31)
	w1 = 0x0000003F
	w0 = 0x00000001
rl_noninc_forward_search_exit:


// rl_noninc_reverse_search
// Return size: 0
void rl_noninc_reverse_search()
rl_noninc_reverse_search_entry:
	// succ:  l0000000000490508
l0000000000490508:
	sp = fp
	w31 = w1 - 0x0000002F
	NZCV = cond(w31)
	w1 = 0x0000002F
	w0 = 0xFFFFFFFF
rl_noninc_reverse_search_exit:


// rl_noninc_forward_search_again
// Return size: 0
void rl_noninc_forward_search_again()
rl_noninc_forward_search_again_entry:
	// succ:  l000000000049051C
l000000000049051C:
	sp = fp
	sp = sp + -16
	Mem0[sp:word64] = x29
	sp = sp + 8
	Mem0[sp:word64] = x30
	x29 = x31 + 0x0000000000000000
	x0 = 0x00000000004E1000
	x0 = x0 + 0xFFFFFFFFFFFFFDE8
	x0 = Mem0[x0 + 40:word64]
	branch x0 == 0x0000000000000000 l000000000049054C
	// succ:  l0000000000490534 l000000000049054C
l0000000000490534:
	w1 = 0x00000001
	call fn000000000048FE2C (retsize: 0;)
	w31 = w0 - 0x00000001
	NZCV = cond(w31)
	w0 = (word32) Test(NE,Z)
	// succ:  l0000000000490544
l0000000000490544:
	x29 = Mem0[sp:word64]
	sp = sp + 8
	x30 = Mem0[sp:word64]
	sp = sp + 16
	return
	// succ:  rl_noninc_forward_search_again_exit
l000000000049054C:
	call rl_ding (retsize: 0;)
	w0 = 0xFFFFFFFF
	goto l0000000000490544
	// succ:  l0000000000490544
rl_noninc_forward_search_again_exit:


// rl_noninc_reverse_search_again
// Return size: 0
void rl_noninc_reverse_search_again()
rl_noninc_reverse_search_again_entry:
	// succ:  l0000000000490558
l0000000000490558:
	sp = fp
	sp = sp + -16
	Mem0[sp:word64] = x29
	sp = sp + 8
	Mem0[sp:word64] = x30
	x29 = x31 + 0x0000000000000000
	x0 = 0x00000000004E1000
	x0 = x0 + 0xFFFFFFFFFFFFFDE8
	x0 = Mem0[x0 + 40:word64]
	branch x0 == 0x0000000000000000 l0000000000490588
	// succ:  l0000000000490570 l0000000000490588
l0000000000490570:
	w1 = 0xFFFFFFFF
	call fn000000000048FE2C (retsize: 0;)
	w31 = w0 - 0x00000001
	NZCV = cond(w31)
	w0 = (word32) Test(NE,Z)
	// succ:  l0000000000490580
l0000000000490580:
	x29 = Mem0[sp:word64]
	sp = sp + 8
	x30 = Mem0[sp:word64]
	sp = sp + 16
	return
	// succ:  rl_noninc_reverse_search_again_exit
l0000000000490588:
	call rl_ding (retsize: 0;)
	w0 = 0xFFFFFFFF
	goto l0000000000490580
	// succ:  l0000000000490580
rl_noninc_reverse_search_again_exit:


// _rl_nsearch_callback
// Return size: 0
void _rl_nsearch_callback()
_rl_nsearch_callback_entry:
	// succ:  l0000000000490594
l0000000000490594:
	sp = fp
	sp = sp + -48
	Mem0[sp:word64] = x29
	sp = sp + 8
	Mem0[sp:word64] = x30
	x29 = x31 + 0x0000000000000000
	v8 = sp + 16
	Mem0[v8:word64] = x19
	v8 = v8 + 8
	Mem0[v8:word64] = x20
	Mem0[sp + 32:word64] = x21
	x19 = x0
	call _rl_search_getchar (retsize: 0;)
	w1 = w0
	x0 = x19
	call fn000000000049024C (retsize: 0;)
	w20 = w0
	branch w0 == 0x00000000 l00000000004905D4
	// succ:  l00000000004905C0 l00000000004905D4
l00000000004905C0:
	w0 = 0x00000001
	v14 = sp + 16
	x19 = Mem0[v14:word64]
	v14 = v14 + 8
	x20 = Mem0[v14:word64]
	x21 = Mem0[sp + 32:word64]
	x29 = Mem0[sp:word64]
	sp = sp + 8
	x30 = Mem0[sp:word64]
	sp = sp + 48
	return
	// succ:  _rl_nsearch_callback_exit
l00000000004905D4:
	x0 = x19
	call fn000000000048FEF4 (retsize: 0;)
	w21 = w0
	branch (w21 & 0x00000000) == 0x00000000 l00000000004905C0
	// succ:  l00000000004905E4 l00000000004905C0
l00000000004905E4:
	x0 = x19
	w1 = w20
	call _rl_scxt_dispose (retsize: 0;)
	x0 = 0x00000000004E1000
	w1 = Mem0[x0 + 3168:word32]
	x2 = 0x00000000004E1000
	x2 = x2 + 0xFFFFFFFFFFFFFDE8
	w31 = w21 - 0x00000001
	NZCV = cond(w31)
	w1 = w1 & 0xFFFFFEFF
	Mem0[x2 + 48:word64] = 0x0000000000000000
	Mem0[x0 + 3168:word32] = w1
	v19 = sp + 16
	x19 = Mem0[v19:word64]
	v19 = v19 + 8
	x20 = Mem0[v19:word64]
	w0 = (word32) Test(NE,Z)
	x21 = Mem0[sp + 32:word64]
	x29 = Mem0[sp:word64]
	sp = sp + 8
	x30 = Mem0[sp:word64]
	sp = sp + 48
	return
	// succ:  _rl_nsearch_callback_exit
_rl_nsearch_callback_exit:


// fn0000000000490624
// Return size: 0
void fn0000000000490624()
fn0000000000490624_entry:
	// succ:  l0000000000490624
l0000000000490624:
	sp = fp
	sp = sp + -48
	Mem0[sp:word64] = x29
	sp = sp + 8
	Mem0[sp:word64] = x30
	x29 = x31 + 0x0000000000000000
	x1 = 0x0000000000005413
	x2 = x29 + 0x0000000000000020
	Mem0[sp + 16:word64] = x19
	w19 = w0
	ioctl(x0, x1, Mem0[sp:<unknown>])
	sp = sp + 0xFFFFFFFFFFFFFFF8
	branch w0 != 0x00000000 l0000000000490654
	// succ:  l0000000000490644 l0000000000490654
l0000000000490644:
	w0 = w19
	x1 = 0x0000000000005414
	x2 = x29 + 0x0000000000000020
	ioctl(x0, x1, Mem0[sp:<unknown>])
	sp = sp + 0xFFFFFFFFFFFFFFF8
	// succ:  l0000000000490654
l0000000000490654:
	x19 = Mem0[sp + 16:word64]
	x29 = Mem0[sp:word64]
	sp = sp + 8
	x30 = Mem0[sp:word64]
	sp = sp + 48
	return
	// succ:  fn0000000000490624_exit
fn0000000000490624_exit:


// fn0000000000490660
// Return size: 0
void fn0000000000490660()
fn0000000000490660_entry:
	// succ:  l0000000000490660
l0000000000490660:
	sp = fp
	sp = sp + -32
	Mem0[sp:word64] = x29
	sp = sp + 8
	Mem0[sp:word64] = x30
	x29 = x31 + 0x0000000000000000
	v8 = sp + 16
	Mem0[v8:word64] = x19
	v8 = v8 + 8
	Mem0[v8:word64] = x20
	w20 = w0
	x19 = x1
	goto l000000000049068C
	// succ:  l000000000049068C
l0000000000490678:
	__errno_location()
	sp = sp + 0xFFFFFFFFFFFFFFF8
	w3 = Mem0[x0:word32]
	w31 = w3 - 0x00000004
	NZCV = cond(w31)
	branch Test(NE,Z) l00000000004906B0
	// succ:  l0000000000490688 l00000000004906B0
l0000000000490688:
	Mem0[x0:word32] = 0x00000000
	// succ:  l000000000049068C
l000000000049068C:
	w1 = 0x00000001
	x2 = x19
	w0 = w20
	tcsetattr(x0, x1, x2)
	sp = sp + 0xFFFFFFFFFFFFFFF8
	branch (w0 & 0x00000000) == 0x00000000 l0000000000490678
	// succ:  l00000000004906A0 l0000000000490678
l00000000004906A0:
	w0 = 0x00000000
	v15 = sp + 16
	x19 = Mem0[v15:word64]
	v15 = v15 + 8
	x20 = Mem0[v15:word64]
	x29 = Mem0[sp:word64]
	sp = sp + 8
	x30 = Mem0[sp:word64]
	sp = sp + 32
	return
	// succ:  fn0000000000490660_exit
l00000000004906B0:
	w0 = 0xFFFFFFFF
	v20 = sp + 16
	x19 = Mem0[v20:word64]
	v20 = v20 + 8
	x20 = Mem0[v20:word64]
	x29 = Mem0[sp:word64]
	sp = sp + 8
	x30 = Mem0[sp:word64]
	sp = sp + 32
	return
	// succ:  fn0000000000490660_exit
fn0000000000490660_exit:


// fn00000000004906C0
// Return size: 0
void fn00000000004906C0()
fn00000000004906C0_entry:
	// succ:  l00000000004906C0
l00000000004906C0:
	sp = fp
fn00000000004906C0_exit:


// fn0000000000490760
// Return size: 0
void fn0000000000490760()
fn0000000000490760_entry:
	// succ:  l0000000000490760
l0000000000490760:
	sp = fp
	sp = sp + -32
	Mem0[sp:word64] = x29
	sp = sp + 8
	Mem0[sp:word64] = x30
	x29 = x31 + 0x0000000000000000
	v8 = sp + 16
	Mem0[v8:word64] = x19
	v8 = v8 + 8
	Mem0[v8:word64] = x20
	w20 = w0
	x19 = x1
	// succ:  l0000000000490774
l0000000000490774:
	x1 = x19
	w0 = w20
	call tcgetattr (retsize: 0;)
	branch (w0 & 0x00000000) == 0x00000000 l00000000004907A8
	// succ:  l0000000000490784 l00000000004907A8
l0000000000490784:
	__errno_location()
	sp = sp + 0xFFFFFFFFFFFFFFF8
	w2 = Mem0[x0:word32]
	w31 = w2 - 0x00000004
	NZCV = cond(w31)
	branch Test(EQ,Z) l0000000000490774
	// succ:  l0000000000490794 l0000000000490774
l0000000000490794:
	w20 = 0xFFFFFFFF
	// succ:  l0000000000490798
l0000000000490798:
	w0 = w20
	v17 = sp + 16
	x19 = Mem0[v17:word64]
	v17 = v17 + 8
	x20 = Mem0[v17:word64]
	x29 = Mem0[sp:word64]
	sp = sp + 8
	x30 = Mem0[sp:word64]
	sp = sp + 32
	return
	// succ:  fn0000000000490760_exit
l00000000004907A8:
	w0 = Mem0[x19 + 12:word32]
	w20 = 0x00000000
	branch (w0 & 0x00001000) == 0x00000000 l0000000000490798
	// succ:  l00000000004907B4 l0000000000490798
l00000000004907B4:
	x0 = 0x00000000004C3000
	x0 = x0 + 0xFFFFFFFFFFFFFF78
	call _rl_errmsg (retsize: 0;)
	w0 = Mem0[x19 + 12:word32]
	w0 = w0 & 0xFFFFEFFF
	Mem0[x19 + 12:word32] = w0
	w0 = w20
	v18 = sp + 16
	x19 = Mem0[v18:word64]
	v18 = v18 + 8
	x20 = Mem0[v18:word64]
	x29 = Mem0[sp:word64]
	sp = sp + 8
	x30 = Mem0[sp:word64]
	sp = sp + 32
	return
	// succ:  fn0000000000490760_exit
fn0000000000490760_exit:


// rl_deprep_terminal
// Return size: 0
void rl_deprep_terminal()
rl_deprep_terminal_entry:
	// succ:  l00000000004907DC
l00000000004907DC:
	sp = fp
	sp = sp + -32
	Mem0[sp:word64] = x29
	sp = sp + 8
	Mem0[sp:word64] = x30
	x29 = x31 + 0x0000000000000000
	v8 = sp + 16
	Mem0[v8:word64] = x19
	v8 = v8 + 8
	Mem0[v8:word64] = x20
	x19 = 0x00000000004E1000
	x0 = x19 + 0xFFFFFFFFFFFFFE20
	w0 = Mem0[x0:word32]
	branch w0 != 0x00000000 l0000000000490804
	// succ:  l00000000004907F8 l0000000000490804
l00000000004907F8:
	v11 = sp + 16
	x19 = Mem0[v11:word64]
	v11 = v11 + 8
	x20 = Mem0[v11:word64]
	x29 = Mem0[sp:word64]
	sp = sp + 8
	x30 = Mem0[sp:word64]
	sp = sp + 32
	return
	// succ:  rl_deprep_terminal_exit
l0000000000490804:
	call _rl_block_sigint (retsize: 0;)
	x0 = 0x00000000004E1000
	x0 = Mem0[x0 + 3192:word64]
	branch x0 == 0x0000000000000000 l0000000000490874
	// succ:  l0000000000490814 l0000000000490874
l0000000000490814:
	fileno(x0)
	sp = sp + 0xFFFFFFFFFFFFFFF8
	w20 = w0
	x0 = 0x00000000004E4000
	w0 = Mem0[x0 + 256:word32]
	branch w0 != 0x00000000 l0000000000490868
	// succ:  l0000000000490828 l0000000000490868
l0000000000490828:
	x0 = 0x00000000004E1000
	x0 = Mem0[x0 + 3200:word64]
	x19 = x19 + 0xFFFFFFFFFFFFFE20
	fflush(x0)
	sp = sp + 0xFFFFFFFFFFFFFFF8
	x1 = x19 + 0x0000000000000008
	w0 = w20
	call fn0000000000490660 (retsize: 0;)
	branch (w0 & 0x00000000) == 0x00000000 l000000000049085C
	// succ:  l0000000000490848 l000000000049085C
l0000000000490848:
	x0 = 0x00000000004E1000
	w1 = Mem0[x0 + 3168:word32]
	Mem0[x19:word32] = 0x00000000
	w1 = w1 & 0xFFFFFFFB
	Mem0[x0 + 3168:word32] = w1
	// succ:  l000000000049085C
l000000000049085C:
	v15 = sp + 16
	x19 = Mem0[v15:word64]
	v15 = v15 + 8
	x20 = Mem0[v15:word64]
	x29 = Mem0[sp:word64]
	sp = sp + 8
	x30 = Mem0[sp:word64]
	sp = sp + 32
	// succ:  l0000000000490864_thunk__rl_release_sigint
l0000000000490864_thunk__rl_release_sigint:
	call _rl_release_sigint (retsize: 0;)
	return
	// succ:  rl_deprep_terminal_exit
l0000000000490868:
	w0 = 0x00000000
	call _rl_control_keypad (retsize: 0;)
	goto l0000000000490828
	// succ:  l0000000000490828
l0000000000490874:
	x0 = 0x00000000004DE000
	x0 = Mem0[x0 + 1648:word64]
	goto l0000000000490814
	// succ:  l0000000000490814
rl_deprep_terminal_exit:


// rl_prep_terminal
// Return size: 0
void rl_prep_terminal()
rl_prep_terminal_entry:
	// succ:  l0000000000490934
l0000000000490934:
	sp = fp
	sp = sp + -144
	Mem0[sp:word64] = x29
	sp = sp + 8
	Mem0[sp:word64] = x30
	x29 = x31 + 0x0000000000000000
	v8 = sp + 16
	Mem0[v8:word64] = x19
	v8 = v8 + 8
	Mem0[v8:word64] = x20
	x20 = 0x00000000004E1000
	x1 = x20 + 0xFFFFFFFFFFFFFE20
	w1 = Mem0[x1:word32]
	v13 = sp + 32
	Mem0[v13:word64] = x21
	v13 = v13 + 8
	Mem0[v13:word64] = x22
	v16 = sp + 48
	Mem0[v16:word64] = x23
	v16 = v16 + 8
	Mem0[v16:word64] = x24
	Mem0[sp + 64:word64] = x25
	w21 = w0
	branch w1 == 0x00000000 l0000000000490978
	// succ:  l0000000000490960 l0000000000490978
l0000000000490960:
	v20 = sp + 16
	x19 = Mem0[v20:word64]
	v20 = v20 + 8
	x20 = Mem0[v20:word64]
	v21 = sp + 32
	x21 = Mem0[v21:word64]
	v21 = v21 + 8
	x22 = Mem0[v21:word64]
	v22 = sp + 48
	x23 = Mem0[v22:word64]
	v22 = v22 + 8
	x24 = Mem0[v22:word64]
	x25 = Mem0[sp + 64:word64]
	x29 = Mem0[sp:word64]
	sp = sp + 8
	x30 = Mem0[sp:word64]
	sp = sp + 144
	return
	// succ:  rl_prep_terminal_exit
l0000000000490978:
	call _rl_block_sigint (retsize: 0;)
	x0 = 0x00000000004E1000
	x0 = Mem0[x0 + 3192:word64]
	branch x0 == 0x0000000000000000 l0000000000490C30
	// succ:  l0000000000490988 l0000000000490C30
l0000000000490988:
	fileno(x0)
	sp = sp + 0xFFFFFFFFFFFFFFF8
	w23 = w0
	call fn0000000000490624 (retsize: 0;)
	__errno_location()
	sp = sp + 0xFFFFFFFFFFFFFFF8
	x19 = x0
	Mem0[x0:word32] = 0x00000000
	x1 = x29 + 0x0000000000000050
	w0 = w23
	call fn0000000000490760 (retsize: 0;)
	branch (w0 & 0x00000000) == 0x00000000 l0000000000490C3C
	// succ:  l00000000004909B0 l0000000000490C3C
l00000000004909B0:
	x1 = x20 + 0xFFFFFFFFFFFFFE20
	v27 = x29 + 80
	x2 = Mem0[v27:word64]
	v27 = v27 + 8
	x3 = Mem0[v27:word64]
	x1 = x1 + 0x0000000000000008
	x0 = Mem0[x29 + 128:word64]
l0000000000490B9C:
	call _rl_release_sigint (retsize: 0;)
	// succ:  l0000000000490BA0
l0000000000490BA0:
	v32 = sp + 16
	x19 = Mem0[v32:word64]
	v32 = v32 + 8
	x20 = Mem0[v32:word64]
	v33 = sp + 32
	x21 = Mem0[v33:word64]
	v33 = v33 + 8
	x22 = Mem0[v33:word64]
	v34 = sp + 48
	x23 = Mem0[v34:word64]
	v34 = v34 + 8
	x24 = Mem0[v34:word64]
	x25 = Mem0[sp + 64:word64]
	x29 = Mem0[sp:word64]
	sp = sp + 8
	x30 = Mem0[sp:word64]
	sp = sp + 144
	return
	// succ:  rl_prep_terminal_exit
l0000000000490C30:
	x0 = 0x00000000004DE000
	x0 = Mem0[x0 + 1664:word64]
	goto l0000000000490988
	// succ:  l0000000000490988
l0000000000490C3C:
	w0 = Mem0[x19:word32]
	w31 = w0 - 0x00000019
	NZCV = cond(w31)
	branch Test(EQ,Z) l0000000000490C58
	// succ:  l0000000000490C48 l0000000000490C58
l0000000000490C48:
	w31 = w0 - 0x00000016
	NZCV = cond(w31)
	branch Test(EQ,Z) l0000000000490C58
	// succ:  l0000000000490C50 l0000000000490C58
l0000000000490C50:
	w31 = w0 - 0x0000005F
	NZCV = cond(w31)
	branch Test(NE,Z) l0000000000490B9C
	// succ:  l0000000000490C58 l0000000000490B9C
l0000000000490C58:
	w1 = 0x00000001
	x0 = 0x00000000004E1000
	Mem0[x0 + 3216:word32] = w1
	call _rl_release_sigint (retsize: 0;)
	goto l0000000000490BA0
	// succ:  l0000000000490BA0
rl_prep_terminal_exit:


// rl_restart_output
// Return size: 0
void rl_restart_output()
rl_restart_output_entry:
	// succ:  l0000000000490C6C
l0000000000490C6C:
	sp = fp
	sp = sp + -16
	Mem0[sp:word64] = x29
	sp = sp + 8
	Mem0[sp:word64] = x30
	x29 = x31 + 0x0000000000000000
	x0 = 0x00000000004E1000
	x0 = Mem0[x0 + 3200:word64]
	fileno(x0)
	sp = sp + 0xFFFFFFFFFFFFFFF8
	w1 = 0x00000001
	call tcflow (retsize: 0;)
	w0 = 0x00000000
	x29 = Mem0[sp:word64]
	sp = sp + 8
	x30 = Mem0[sp:word64]
	sp = sp + 16
	return
	// succ:  rl_restart_output_exit
rl_restart_output_exit:


// rl_stop_output
// Return size: 0
void rl_stop_output()
rl_stop_output_entry:
	// succ:  l0000000000490C94
l0000000000490C94:
	sp = fp
	sp = sp + -16
	Mem0[sp:word64] = x29
	sp = sp + 8
	Mem0[sp:word64] = x30
	x29 = x31 + 0x0000000000000000
	x0 = 0x00000000004E1000
	x0 = Mem0[x0 + 3192:word64]
	fileno(x0)
	sp = sp + 0xFFFFFFFFFFFFFFF8
	w1 = 0x00000000
	call tcflow (retsize: 0;)
	w0 = 0x00000000
	x29 = Mem0[sp:word64]
	sp = sp + 8
	x30 = Mem0[sp:word64]
	sp = sp + 16
	return
	// succ:  rl_stop_output_exit
rl_stop_output_exit:


// rltty_set_default_bindings
// Return size: 0
void rltty_set_default_bindings()
rltty_set_default_bindings_entry:
	// succ:  l0000000000490CBC
l0000000000490CBC:
	sp = fp
	sp = sp + -96
	Mem0[sp:word64] = x29
	sp = sp + 8
	Mem0[sp:word64] = x30
	x29 = x31 + 0x0000000000000000
	x1 = 0x00000000004E1000
	v7 = sp + 16
	Mem0[v7:word64] = x19
	v7 = v7 + 8
	Mem0[v7:word64] = x20
	x20 = x0
	x0 = Mem0[x1 + 3192:word64]
	fileno(x0)
	sp = sp + 0xFFFFFFFFFFFFFFF8
	w19 = w0
	call fn0000000000490624 (retsize: 0;)
	__errno_location()
	sp = sp + 0xFFFFFFFFFFFFFFF8
	Mem0[x0:word32] = 0x00000000
	x1 = x29 + 0x0000000000000020
	w0 = w19
	call fn0000000000490760 (retsize: 0;)
	branch (w0 & 0x00000000) == 0x00000000 l0000000000490D10
	// succ:  l0000000000490CF8 l0000000000490D10
l0000000000490CF8:
	v13 = Mem0[x29 + 51:byte]
	w1 = (word32) v13
	v15 = Mem0[x29 + 52:byte]
	w2 = (word32) v15
	v17 = Mem0[x29 + 63:byte]
	w3 = (word32) v17
	v19 = Mem0[x29 + 64:byte]
	w4 = (word32) v19
	x0 = x20
	call fn00000000004906C0 (retsize: 0;)
	// succ:  l0000000000490D10
l0000000000490D10:
	v21 = sp + 16
	x19 = Mem0[v21:word64]
	v21 = v21 + 8
	x20 = Mem0[v21:word64]
	x29 = Mem0[sp:word64]
	sp = sp + 8
	x30 = Mem0[sp:word64]
	sp = sp + 96
	return
	// succ:  rltty_set_default_bindings_exit
rltty_set_default_bindings_exit:


// rl_tty_set_default_bindings
// Return size: 0
void rl_tty_set_default_bindings()
rl_tty_set_default_bindings_entry:
	// succ:  l0000000000490D1C
l0000000000490D1C:
	sp = fp
	// succ:  l0000000000490D1C_thunk_rltty_set_default_bindings
l0000000000490D1C_thunk_rltty_set_default_bindings:
	call rltty_set_default_bindings (retsize: 0;)
	return
	// succ:  rl_tty_set_default_bindings_exit
rl_tty_set_default_bindings_exit:


// rl_tty_unset_default_bindings
// Return size: 0
void rl_tty_unset_default_bindings()
rl_tty_unset_default_bindings_entry:
	goto l0000000000490D20
	// succ:  l0000000000490D20
l0000000000490880:
	x1 = 0x00000000004E1000
	x2 = x1 + 0xFFFFFFFFFFFFFE20
	v7 = Mem0[x2 + 75:byte]
	w2 = (word32) v7
	branch w2 == 0x00000000 l00000000004908A0
	// succ:  l0000000000490890 l00000000004908A0
l0000000000490890:
l00000000004908A0:
	x2 = x1 + 0xFFFFFFFFFFFFFE20
	v8 = Mem0[x2 + 77:byte]
	w2 = (word32) v8
	branch w2 == 0x00000000 l00000000004908BC
	// succ:  l00000000004908AC l00000000004908BC
l00000000004908AC:
l00000000004908BC:
	x2 = x1 + 0xFFFFFFFFFFFFFE20
	v9 = Mem0[x2 + 85:byte]
	w2 = (word32) v9
	branch w2 == 0x00000000 l00000000004908D8
	// succ:  l00000000004908C8 l00000000004908D8
l00000000004908C8:
l00000000004908D8:
	x1 = x1 + 0xFFFFFFFFFFFFFE20
	v10 = Mem0[x1 + 76:byte]
	w1 = (word32) v10
	branch w1 == 0x00000000 l0000000000490900
	// succ:  l00000000004908E4 l0000000000490900
l00000000004908E4:
l0000000000490900:
	return
	// succ:  rl_tty_unset_default_bindings_exit
l0000000000490D20:
	sp = fp
	x1 = 0x00000000004E1000
	w1 = Mem0[x1 + 3168:word32]
	branch (w1 & 0x00000000) == 0x00000000 l0000000000490D30
	// succ:  l0000000000490D2C l0000000000490D30
l0000000000490D2C:
	goto l0000000000490880
	// succ:  l0000000000490880
l0000000000490D30:
	return
	// succ:  rl_tty_unset_default_bindings_exit
rl_tty_unset_default_bindings_exit:


// _rl_disable_tty_signals
// Return size: 0
void _rl_disable_tty_signals()
_rl_disable_tty_signals_entry:
	// succ:  l0000000000490D34
l0000000000490D34:
	sp = fp
	sp = sp + -64
	Mem0[sp:word64] = x29
	sp = sp + 8
	Mem0[sp:word64] = x30
	x29 = x31 + 0x0000000000000000
	v8 = sp + 16
	Mem0[v8:word64] = x19
	v8 = v8 + 8
	Mem0[v8:word64] = x20
	x19 = 0x00000000004E1000
	x19 = x19 + 0xFFFFFFFFFFFFFE20
	w1 = Mem0[x19 + 104:word32]
	v12 = sp + 32
	Mem0[v12:word64] = x21
	v12 = v12 + 8
	Mem0[v12:word64] = x22
	Mem0[sp + 48:word64] = x23
	w22 = 0x00000000
	branch w1 == 0x00000000 l0000000000490D74
	// succ:  l0000000000490D5C l0000000000490D74
l0000000000490D5C:
	w0 = w22
	v16 = sp + 16
	x19 = Mem0[v16:word64]
	v16 = v16 + 8
	x20 = Mem0[v16:word64]
	v17 = sp + 32
	x21 = Mem0[v17:word64]
	v17 = v17 + 8
	x22 = Mem0[v17:word64]
	x23 = Mem0[sp + 48:word64]
	x29 = Mem0[sp:word64]
	sp = sp + 8
	x30 = Mem0[sp:word64]
	sp = sp + 64
	return
	// succ:  _rl_disable_tty_signals_exit
l0000000000490D74:
	x23 = 0x00000000004E1000
	x0 = Mem0[x23 + 3192:word64]
	x21 = x19 + 0x0000000000000070
	fileno(x0)
	sp = sp + 0xFFFFFFFFFFFFFFF8
	x1 = x21
	call fn0000000000490760 (retsize: 0;)
	branch (w0 & 0x00000000) == 0x00000000 l0000000000490E28
	// succ:  l0000000000490D90 l0000000000490E28
l0000000000490D90:
	v22 = x19 + 112
	x2 = Mem0[v22:word64]
	v22 = v22 + 8
	x3 = Mem0[v22:word64]
	w1 = Mem0[x19 + 168:word32]
	v23 = x19 + 176
	Mem0[v23:word64] = x2
	v23 = v23 + 8
	Mem0[v23:word64] = x3
	w8 = Mem0[x19 + 188:word32]
	w7 = Mem0[x19 + 176:word32]
	v28 = x19 + 128
	x4 = Mem0[v28:word64]
	v28 = v28 + 8
	x5 = Mem0[v28:word64]
	v29 = x19 + 144
	x2 = Mem0[v29:word64]
	v29 = v29 + 8
	x3 = Mem0[v29:word64]
	x6 = Mem0[x19 + 160:word64]
	x0 = Mem0[x23 + 3192:word64]
	w8 = w8 & 0xFFFFFFFE
	w7 = w7 & 0xFFFFFBFF
	Mem0[x19 + 232:word32] = w1
	x20 = x19 + 0x00000000000000B0
	v31 = x19 + 192
	Mem0[v31:word64] = x4
	v31 = v31 + 8
	Mem0[v31:word64] = x5
	v32 = x19 + 208
	Mem0[v32:word64] = x2
	v32 = v32 + 8
	Mem0[v32:word64] = x3
	Mem0[x19 + 224:word64] = x6
	Mem0[x19 + 188:word32] = w8
	Mem0[x19 + 176:word32] = w7
	fileno(x0)
	sp = sp + 0xFFFFFFFFFFFFFFF8
	x1 = x20
	call fn0000000000490660 (retsize: 0;)
	branch (w0 & 0x00000000) == 0x00000000 l0000000000490E08
	// succ:  l0000000000490DE8 l0000000000490E08
l0000000000490DE8:
	w0 = 0x00000001
	Mem0[x19 + 104:word32] = w0
	x23 = Mem0[sp + 48:word64]
	w0 = w22
	v33 = sp + 16
	x19 = Mem0[v33:word64]
	v33 = v33 + 8
	x20 = Mem0[v33:word64]
	v34 = sp + 32
	x21 = Mem0[v34:word64]
	v34 = v34 + 8
	x22 = Mem0[v34:word64]
	x29 = Mem0[sp:word64]
	sp = sp + 8
	x30 = Mem0[sp:word64]
	sp = sp + 64
	return
	// succ:  _rl_disable_tty_signals_exit
l0000000000490E08:
	x0 = Mem0[x23 + 3192:word64]
	fileno(x0)
	sp = sp + 0xFFFFFFFFFFFFFFF8
	x1 = x21
	v35 = sp + 16
	x19 = Mem0[v35:word64]
	v35 = v35 + 8
	x20 = Mem0[v35:word64]
	v36 = sp + 32
	x21 = Mem0[v36:word64]
	v36 = v36 + 8
	x22 = Mem0[v36:word64]
	x23 = Mem0[sp + 48:word64]
	x29 = Mem0[sp:word64]
	sp = sp + 8
	x30 = Mem0[sp:word64]
	sp = sp + 64
	// succ:  l0000000000490E24_thunk_fn0000000000490660
l0000000000490E24_thunk_fn0000000000490660:
	call fn0000000000490660 (retsize: 0;)
	return
	// succ:  _rl_disable_tty_signals_exit
l0000000000490E28:
	w22 = 0xFFFFFFFF
	goto l0000000000490D5C
	// succ:  l0000000000490D5C
_rl_disable_tty_signals_exit:


// _rl_restore_tty_signals
// Return size: 0
void _rl_restore_tty_signals()
_rl_restore_tty_signals_entry:
	// succ:  l0000000000490E30
l0000000000490E30:
	sp = fp
	sp = sp + -32
	Mem0[sp:word64] = x29
	sp = sp + 8
	Mem0[sp:word64] = x30
	x29 = x31 + 0x0000000000000000
	Mem0[sp + 16:word64] = x19
	x19 = 0x00000000004E1000
	x19 = x19 + 0xFFFFFFFFFFFFFE20
	w1 = Mem0[x19 + 104:word32]
	w0 = 0x00000000
	branch w1 != 0x00000000 l0000000000490E5C
	// succ:  l0000000000490E50 l0000000000490E5C
l0000000000490E50:
	x19 = Mem0[sp + 16:word64]
	x29 = Mem0[sp:word64]
	sp = sp + 8
	x30 = Mem0[sp:word64]
	sp = sp + 32
	return
	// succ:  _rl_restore_tty_signals_exit
l0000000000490E5C:
	x0 = 0x00000000004E1000
	x0 = Mem0[x0 + 3192:word64]
	fileno(x0)
	sp = sp + 0xFFFFFFFFFFFFFFF8
	x1 = x19 + 0x0000000000000070
	call fn0000000000490660 (retsize: 0;)
	branch w0 != 0x00000000 l0000000000490E50
	// succ:  l0000000000490E74 l0000000000490E50
l0000000000490E74:
	Mem0[x19 + 104:word32] = w0
	x19 = Mem0[sp + 16:word64]
	x29 = Mem0[sp:word64]
	sp = sp + 8
	x30 = Mem0[sp:word64]
	sp = sp + 32
	return
	// succ:  _rl_restore_tty_signals_exit
_rl_restore_tty_signals_exit:


// fn0000000000490FFC
// Return size: 0
void fn0000000000490FFC()
fn0000000000490FFC_entry:
	// succ:  l0000000000490FFC
l0000000000490FFC:
	sp = fp
	sp = sp + -64
	Mem0[sp:word64] = x29
	sp = sp + 8
	Mem0[sp:word64] = x30
	x29 = x31 + 0x0000000000000000
	v8 = sp + 16
	Mem0[v8:word64] = x19
	v8 = v8 + 8
	Mem0[v8:word64] = x20
	v11 = sp + 32
	Mem0[v11:word64] = x21
	v11 = v11 + 8
	Mem0[v11:word64] = x22
	x19 = x0
	w21 = w1
	branch x0 == 0x0000000000000000 l000000000049109C
	// succ:  l0000000000491018 l000000000049109C
l0000000000491018:
	x20 = 0x00000000004E1000
	x3 = x20 + 0xFFFFFFFFFFFFFF10
	x0 = Mem0[x3:word64]
	branch x0 == 0x0000000000000000 l000000000049109C
	// succ:  l0000000000491028 l000000000049109C
l0000000000491028:
	w1 = Mem0[x3 + 8:word32]
	branch w1 == 0x00000000 l000000000049109C
	// succ:  l0000000000491030 l000000000049109C
l0000000000491030:
	x22 = 0x00000000004DE000
	x1 = x22 + 0x0000000000000560
	w1 = Mem0[x1:word32]
	branch w1 == 0x00000000 l000000000049109C
	// succ:  l0000000000491040 l000000000049109C
l0000000000491040:
	branch x2 == 0x0000000000000000 l000000000049105C
	// succ:  l0000000000491044 l000000000049105C
l0000000000491044:
	v18 = Mem0[x2:byte]
	w1 = (word32) v18
	branch w1 == 0x00000000 l000000000049105C
	// succ:  l000000000049104C l000000000049105C
l000000000049104C:
	Mem0[x29 + 48:word64] = x2
	strchr(x0, x1)
	sp = sp + 0xFFFFFFFFFFFFFFF8
	x2 = Mem0[x29 + 48:word64]
	branch x0 == 0x0000000000000000 l000000000049109C
	// succ:  l000000000049105C l000000000049109C
l000000000049105C:
	x20 = x20 + 0xFFFFFFFFFFFFFF10
	x1 = Mem0[x20 + 16:word64]
	branch x1 == 0x0000000000000000 l000000000049109C
	// succ:  l0000000000491068 l000000000049109C
l0000000000491068:
	x0 = x19
	Mem0[x29 + 48:word64] = x2
	strpbrk(x0, x1)
	sp = sp + 0xFFFFFFFFFFFFFFF8
	x2 = Mem0[x29 + 48:word64]
	branch x0 == 0x0000000000000000 l000000000049109C
	// succ:  l000000000049107C l000000000049109C
l000000000049107C:
	branch w21 == 0x00000000 l000000000049109C
	// succ:  l0000000000491080 l000000000049109C
l0000000000491080:
	x22 = x22 + 0x0000000000000560
	x3 = Mem0[x22 + 8:word64]
	branch x3 == 0x0000000000000000 l000000000049109C
	// succ:  l000000000049108C l000000000049109C
l000000000049108C:
	x0 = x19
	w1 = w21
	call x3 (retsize: 0;)
	x19 = x0
	// succ:  l000000000049109C
l000000000049109C:
	x0 = x19
	v19 = sp + 32
	x21 = Mem0[v19:word64]
	v19 = v19 + 8
	x22 = Mem0[v19:word64]
	v20 = sp + 16
	x19 = Mem0[v20:word64]
	v20 = v20 + 8
	x20 = Mem0[v20:word64]
	x29 = Mem0[sp:word64]
	sp = sp + 8
	x30 = Mem0[sp:word64]
	sp = sp + 64
	return
	// succ:  fn0000000000490FFC_exit
fn0000000000490FFC_exit:


// fn00000000004910B0
// Return size: 0
void fn00000000004910B0()
fn00000000004910B0_entry:
	// succ:  l00000000004910B0
l00000000004910B0:
	sp = fp
	sp = sp + -64
	Mem0[sp:word64] = x29
	sp = sp + 8
	Mem0[sp:word64] = x30
	x29 = x31 + 0x0000000000000000
	v8 = sp + 16
	Mem0[v8:word64] = x19
	v8 = v8 + 8
	Mem0[v8:word64] = x20
	v11 = sp + 32
	Mem0[v11:word64] = x21
	v11 = v11 + 8
	Mem0[v11:word64] = x22
	Mem0[sp + 48:word64] = x23
	w19 = w1
	x20 = x3
	x22 = x0
	w1 = w2
	branch x3 == 0x0000000000000000 l0000000000491290
	// succ:  l00000000004910D8 l0000000000491290
l00000000004910D8:
	v19 = Mem0[x3:byte]
	w23 = (word32) v19
	// succ:  l00000000004910DC
l00000000004910DC:
	x0 = x22
	x2 = x20
	call fn0000000000490FFC (retsize: 0;)
	x21 = x0
	branch x0 == 0x0000000000000000 l0000000000491258
	// succ:  l00000000004910F0 l0000000000491258
l00000000004910F0:
	strlen(x0)
	sp = sp + 0xFFFFFFFFFFFFFFF8
	branch x20 == 0x0000000000000000 l0000000000491298
	// succ:  l00000000004910F8 l0000000000491298
l00000000004910F8:
	v21 = Mem0[x20:byte]
	w1 = (word32) v21
	branch w1 != 0x00000000 l00000000004911F8
	// succ:  l0000000000491100 l00000000004911F8
l0000000000491100:
	NZCV = cond(w23 - w1)
	branch Test(EQ,Z) l0000000000491128
	// succ:  l0000000000491108 l0000000000491128
l0000000000491108:
	branch w19 == 0x00000000 l0000000000491128
	// succ:  l000000000049110C l0000000000491128
l000000000049110C:
l0000000000491128:
	x23 = 0x00000000004E4000
	w3 = Mem0[x23 + 136:word32]
	w2 = w3 - 0x00000001
	branch w1 != 0x00000000 l000000000049122C
	// succ:  l0000000000491138 l000000000049122C
l0000000000491138:
	x0 = 0x00000000004E1000
	x0 = x0 + 0xFFFFFFFFFFFFFF10
	w0 = Mem0[x0 + 24:word32]
	branch w0 == 0x00000000 l000000000049126C
	// succ:  l0000000000491148 l000000000049126C
l0000000000491148:
	x0 = 0x00000000004E3000
	w5 = Mem0[x0 + 3900:word32]
	NZCV = cond(w5 - w19)
	branch Test(LE,ZCV) l00000000004912A8
	// succ:  l0000000000491158 l00000000004912A8
l0000000000491158:
	v28 = Mem0[x21:byte]
	w0 = (word32) v28
	branch w0 == 0x00000000 l00000000004912A8
	// succ:  l0000000000491160 l00000000004912A8
l0000000000491160:
	x1 = 0x00000000004E1000
	x1 = Mem0[x1 + 3256:word64]
l00000000004911AC:
	NZCV = cond(w2 - w19)
	branch Test(GE,NZV) l00000000004911BC
	// succ:  l00000000004911B4 l00000000004911BC
l00000000004911B4:
	v35 = Mem0[x20:byte]
	w0 = (word32) v35
	branch w0 == 0x00000000 l00000000004911C8
	// succ:  l00000000004911BC l00000000004911C8
l00000000004911BC:
	x0 = x20
	w1 = w19
	call _rl_replace_text (retsize: 0;)
	// succ:  l00000000004911C8
l00000000004911C8:
	x0 = x20
	strlen(x0)
	sp = sp + 0xFFFFFFFFFFFFFFF8
	w0 = w19 + w0
	Mem0[x23 + 136:word32] = w0
	// succ:  l00000000004911D8
l00000000004911D8:
	x31 = x21 - x22
	NZCV = cond(x31)
	branch Test(EQ,Z) l0000000000491258
	// succ:  l00000000004911E0 l0000000000491258
l00000000004911E0:
	x0 = x21
	v36 = sp + 16
	x19 = Mem0[v36:word64]
	v36 = v36 + 8
	x20 = Mem0[v36:word64]
	v37 = sp + 32
	x21 = Mem0[v37:word64]
	v37 = v37 + 8
	x22 = Mem0[v37:word64]
	x23 = Mem0[sp + 48:word64]
	x29 = Mem0[sp:word64]
	sp = sp + 8
	x30 = Mem0[sp:word64]
	sp = sp + 64
	// succ:  l00000000004911F4_thunk_xfree
l00000000004911F4_thunk_xfree:
	call xfree (retsize: 0;)
	return
	// succ:  fn00000000004910B0_exit
l00000000004911F8:
	branch w19 == 0x00000000 l0000000000491100
	// succ:  l00000000004911FC l0000000000491100
l00000000004911FC:
	x2 = 0x00000000004E1000
	x4 = Mem0[x2 + 3256:word64]
l000000000049122C:
	branch w2 == 0x00000000 l0000000000491138
	// succ:  l0000000000491230 l0000000000491138
l0000000000491230:
	x4 = 0x00000000004E1000
	x4 = Mem0[x4 + 3256:word64]
	v32 = Mem0[x4 + (int64) ((int32) w3):byte]
	w4 = (word32) v32
	NZCV = cond(w4 - w1)
	branch Test(NE,Z) l0000000000491138
	// succ:  l0000000000491244 l0000000000491138
l0000000000491244:
	x0 = x21 + (int64) ((int32) w0)
	v33 = Mem0[x0 + -1:byte]
	w0 = (word32) v33
	NZCV = cond(w0 - w1)
l0000000000491258:
	v38 = sp + 16
	x19 = Mem0[v38:word64]
	v38 = v38 + 8
	x20 = Mem0[v38:word64]
	v39 = sp + 32
	x21 = Mem0[v39:word64]
	v39 = v39 + 8
	x22 = Mem0[v39:word64]
	x23 = Mem0[sp + 48:word64]
	x29 = Mem0[sp:word64]
	sp = sp + 8
	x30 = Mem0[sp:word64]
	sp = sp + 64
	return
	// succ:  fn00000000004910B0_exit
l000000000049126C:
	x0 = x21
	w1 = w19
	call _rl_replace_text (retsize: 0;)
	goto l00000000004911D8
	// succ:  l00000000004911D8
l0000000000491290:
	w23 = w3
	goto l00000000004910DC
	// succ:  l00000000004910DC
l0000000000491298:
	x23 = 0x00000000004E4000
	w2 = Mem0[x23 + 136:word32]
	w2 = w2 - 0x00000001
	goto l0000000000491138
	// succ:  l0000000000491138
l00000000004912A8:
	x20 = x21
	goto l00000000004911AC
	// succ:  l00000000004911AC
fn00000000004910B0_exit:


// fn00000000004912D4
// Return size: 0
void fn00000000004912D4()
fn00000000004912D4_entry:
	// succ:  l00000000004912D4
l00000000004912D4:
	sp = fp
	sp = sp + -192
	Mem0[sp:word64] = x29
	sp = sp + 8
	Mem0[sp:word64] = x30
	x29 = x31 + 0x0000000000000000
	v8 = sp + 16
	Mem0[v8:word64] = x19
	v8 = v8 + 8
	Mem0[v8:word64] = x20
	branch w2 == 0x00000000 l000000000049137C
	// succ:  l00000000004912E4 l000000000049137C
l00000000004912E4:
	x4 = 0x00000000004E4000
	w6 = Mem0[x4 + 136:word32]
	branch w6 == 0x00000000 l0000000000491450
	// succ:  l00000000004912F0 l0000000000491450
l00000000004912F0:
	x4 = 0x00000000004E1000
	x5 = x4 + 0xFFFFFFFFFFFFFF10
	w7 = Mem0[x5 + 28:word32]
	branch w7 != 0x00000000 l0000000000491478
	// succ:  l0000000000491300 l0000000000491478
l0000000000491300:
	x5 = 0x00000000004E1000
	x5 = Mem0[x5 + 3256:word64]
	x6 = x5 + (int64) ((int32) w6)
	v16 = Mem0[x6 + -1:byte]
	w5 = (word32) v16
	NZCV = cond(w5 - w2)
	branch Test(EQ,Z) l0000000000491518
	// succ:  l0000000000491318 l0000000000491518
l0000000000491318:
	Mem0[x29 + 160:byte] = (byte) w2
	w5 = 0x00000002
	w2 = 0x00000001
	// succ:  l0000000000491324
l0000000000491324:
	branch w1 == 0x00000000 l0000000000491388
	// succ:  l0000000000491328 l0000000000491388
l0000000000491328:
	x6 = x29 + 0x0000000000000020
	x2 = x6 + (int64) ((int32) w2)
	Mem0[x2 + 128:byte] = (byte) w1
	w19 = w5 + 0x00000001
	w2 = w5
	// succ:  l000000000049133C
l000000000049133C:
	x1 = x29 + 0x0000000000000020
	x4 = x4 + 0xFFFFFFFFFFFFFF10
	x2 = x1 + (int64) ((int32) w2)
	w1 = Mem0[x4 + 8:word32]
	Mem0[x2 + 128:byte] = 0x00
	branch w1 != 0x00000000 l00000000004913D4
	// succ:  l0000000000491354 l00000000004913D4
l0000000000491354:
	x0 = 0x00000000004E4000
	w1 = Mem0[x0 + 136:word32]
	x0 = 0x00000000004E3000
	w0 = Mem0[x0 + 3900:word32]
	NZCV = cond(w1 - w0)
	branch Test(EQ,Z) l0000000000491460
	// succ:  l000000000049136C l0000000000491460
l000000000049136C:
	w0 = w19
	v25 = sp + 16
	x19 = Mem0[v25:word64]
	v25 = v25 + 8
	x20 = Mem0[v25:word64]
	x29 = Mem0[sp:word64]
	sp = sp + 8
	x30 = Mem0[sp:word64]
	sp = sp + 192
	return
	// succ:  fn00000000004912D4_exit
l000000000049137C:
	w5 = 0x00000001
	x4 = 0x00000000004E1000
	branch w1 != 0x00000000 l0000000000491328
	// succ:  l0000000000491388 l0000000000491328
l0000000000491388:
	x1 = x4 + 0xFFFFFFFFFFFFFF10
	w1 = Mem0[x1 + 32:word32]
	w19 = w5
	branch w1 != 0x00000000 l000000000049133C
	// succ:  l0000000000491398 l000000000049133C
l0000000000491398:
	x1 = 0x00000000004DE000
	x1 = x1 + 0x0000000000000560
	w1 = Mem0[x1 + 16:word32]
	branch w1 == 0x00000000 l000000000049133C
	// succ:  l00000000004913A8 l000000000049133C
l00000000004913A8:
	x6 = x29 + 0x0000000000000020
	x2 = x6 + (int64) ((int32) w2)
	Mem0[x2 + 128:byte] = (byte) w1
	x4 = x4 + 0xFFFFFFFFFFFFFF10
	x1 = x29 + 0x0000000000000020
	w2 = w5
	x2 = x1 + (int64) ((int32) w2)
	w1 = Mem0[x4 + 8:word32]
	Mem0[x2 + 128:byte] = 0x00
	w19 = w5 + 0x00000001
	branch w1 == 0x00000000 l0000000000491354
	// succ:  l00000000004913D4 l0000000000491354
l00000000004913D4:
	Mem0[x29 + 176:word64] = x3
	call tilde_expand (retsize: 0;)
	x3 = Mem0[x29 + 176:word64]
	x20 = x0
	branch w3 == 0x00000000 l00000000004913F4
	// succ:  l00000000004913E8 l00000000004913F4
l00000000004913E8:
	x0 = 0x00000000004E4000
	w0 = Mem0[x0 + 192:word32]
	branch w0 == 0x00000000 l0000000000491484
	// succ:  l00000000004913F4 l0000000000491484
l00000000004913F4:
	w0 = 0x00000000
	x1 = x20
	x2 = x29 + 0x0000000000000020
	__xstat(x0, x1, x2)
	sp = sp + 0xFFFFFFFFFFFFFFF8
	branch w0 != 0x00000000 l0000000000491420
	// succ:  l0000000000491408 l0000000000491420
l0000000000491408:
	w1 = Mem0[x29 + 48:word32]
	w1 = w1 & 0x0000F000
	w31 = w1 - (0x00000004 << 12)
	NZCV = cond(w31)
	branch Test(EQ,Z) l00000000004914C8
	// succ:  l0000000000491418 l00000000004914C8
l0000000000491418:
	w31 = w1 - (0x0000000A << 12)
	NZCV = cond(w31)
	branch Test(EQ,Z) l00000000004914A4
	// succ:  l0000000000491420 l00000000004914A4
l0000000000491420:
	x0 = 0x00000000004E4000
	w1 = Mem0[x0 + 136:word32]
	x0 = 0x00000000004E3000
	w0 = Mem0[x0 + 3900:word32]
	NZCV = cond(w1 - w0)
	branch Test(EQ,Z) l0000000000491498
	// succ:  l0000000000491438 l0000000000491498
l0000000000491438:
	x0 = x20
	call xfree (retsize: 0;)
	w0 = w19
	v29 = sp + 16
	x19 = Mem0[v29:word64]
	v29 = v29 + 8
	x20 = Mem0[v29:word64]
	x29 = Mem0[sp:word64]
	sp = sp + 8
	x30 = Mem0[sp:word64]
	sp = sp + 192
	return
	// succ:  fn00000000004912D4_exit
l0000000000491450:
	w5 = 0x00000001
	w2 = w6
	x4 = 0x00000000004E1000
	goto l0000000000491324
	// succ:  l0000000000491324
l0000000000491460:
	x0 = x29 + 0x00000000000000A0
	call rl_insert_text (retsize: 0;)
	w0 = w19
	v31 = sp + 16
	x19 = Mem0[v31:word64]
	v31 = v31 + 8
	x20 = Mem0[v31:word64]
	x29 = Mem0[sp:word64]
	sp = sp + 8
	x30 = Mem0[sp:word64]
	sp = sp + 192
	return
	// succ:  fn00000000004912D4_exit
l0000000000491478:
	w5 = 0x00000001
	w2 = 0x00000000
	goto l0000000000491324
	// succ:  l0000000000491324
l0000000000491484:
	x1 = x20
	x2 = x29 + 0x0000000000000020
	__lxstat(x0, x1, x2)
	sp = sp + 0xFFFFFFFFFFFFFFF8
	branch w0 != 0x00000000 l0000000000491420
	// succ:  l0000000000491494 l0000000000491420
l0000000000491494:
	goto l0000000000491408
	// succ:  l0000000000491408
l0000000000491498:
	x0 = x29 + 0x00000000000000A0
	call rl_insert_text (retsize: 0;)
	goto l0000000000491438
	// succ:  l0000000000491438
l00000000004914A4:
	x1 = x20
	x2 = x29 + 0x0000000000000020
	__xstat(x0, x1, x2)
	sp = sp + 0xFFFFFFFFFFFFFFF8
	branch w0 != 0x00000000 l0000000000491420
	// succ:  l00000000004914B4 l0000000000491420
l00000000004914B4:
	w0 = Mem0[x29 + 48:word32]
	w0 = w0 & 0x0000F000
	w31 = w0 - (0x00000004 << 12)
	NZCV = cond(w31)
	branch Test(NE,Z) l0000000000491420
	// succ:  l00000000004914C4 l0000000000491420
l00000000004914C4:
	goto l0000000000491438
	// succ:  l0000000000491438
l00000000004914C8:
	x0 = 0x00000000004DE000
	x0 = x0 + 0x0000000000000560
	w0 = Mem0[x0 + 20:word32]
	branch w0 == 0x00000000 l0000000000491438
	// succ:  l00000000004914D8 l0000000000491438
l00000000004914D8:
	x0 = 0x00000000004E4000
	w0 = Mem0[x0 + 136:word32]
	branch w0 == 0x00000000 l0000000000491524
	// succ:  l00000000004914E4 l0000000000491524
l00000000004914E4:
	x1 = 0x00000000004E1000
	x2 = Mem0[x1 + 3256:word64]
l0000000000491508:
	x0 = 0x00000000004AA000
	x0 = x0 + 0x0000000000000248
	call rl_insert_text (retsize: 0;)
	goto l0000000000491438
	// succ:  l0000000000491438
l0000000000491518:
	w5 = 0x00000001
	w2 = w7
	goto l0000000000491324
	// succ:  l0000000000491324
l0000000000491524:
	x0 = 0x00000000004E1000
	x0 = Mem0[x0 + 3256:word64]
	v30 = Mem0[x0:byte]
	w1 = (word32) v30
	w31 = w1 - 0x0000002F
	NZCV = cond(w31)
	branch Test(NE,Z) l0000000000491508
	// succ:  l0000000000491538 l0000000000491508
l0000000000491538:
	goto l0000000000491438
	// succ:  l0000000000491438
fn00000000004912D4_exit:


// rl_filename_completion_function
// Return size: 0
void rl_filename_completion_function()
rl_filename_completion_function_entry:
	// succ:  l000000000049153C
l000000000049153C:
	sp = fp
	sp = sp + -128
	Mem0[sp:word64] = x29
	sp = sp + 8
	Mem0[sp:word64] = x30
	x29 = x31 + 0x0000000000000000
	x3 = 0x00000000004E1000
	v9 = sp + 16
	Mem0[v9:word64] = x19
	v9 = v9 + 8
	Mem0[v9:word64] = x20
	v12 = sp + 32
	Mem0[v12:word64] = x21
	v12 = v12 + 8
	Mem0[v12:word64] = x22
	v15 = sp + 48
	Mem0[v15:word64] = x23
	v15 = v15 + 8
	Mem0[v15:word64] = x24
	v18 = sp + 64
	Mem0[v18:word64] = x25
	v18 = v18 + 8
	Mem0[v18:word64] = x26
	v21 = sp + 80
	Mem0[v21:word64] = x27
	v21 = v21 + 8
	Mem0[v21:word64] = x28
	Mem0[x29 + 96:word64] = x3
	x19 = x0
	branch w1 == 0x00000000 l0000000000491868
	// succ:  l0000000000491568 l0000000000491868
l0000000000491568:
	x0 = x3 + 0xFFFFFFFFFFFFFF10
	x23 = Mem0[x0 + 40:word64]
	// succ:  l0000000000491570
l0000000000491570:
	x0 = 0x00000000004DE000
	x3 = Mem0[x29 + 96:word64]
	x0 = x0 + 0x0000000000000560
	Mem0[x29 + 104:word64] = x0
	x22 = 0x0000000000000000
	x19 = x3 + 0xFFFFFFFFFFFFFF10
	branch x23 == 0x0000000000000000 l00000000004916EC
	// succ:  l000000000049158C l00000000004916EC
l000000000049158C:
	x0 = x23
	readdir(x0)
	sp = sp + 0xFFFFFFFFFFFFFFF8
	x22 = x0
	branch x0 == 0x0000000000000000 l0000000000491B18
	// succ:  l000000000049159C l0000000000491B18
l000000000049159C:
	x21 = x22 + 0x0000000000000013
	x0 = x21
	strlen(x0)
	sp = sp + 0xFFFFFFFFFFFFFFF8
	x2 = Mem0[x19 + 104:word64]
	x1 = x0
	w24 = w0
	branch x2 == 0x0000000000000000 l0000000000491734
	// succ:  l00000000004915B8 l0000000000491734
l00000000004915B8:
	x0 = x21
	call x2 (retsize: 0;)
	x31 = x0 - x21
	NZCV = cond(x31)
	x20 = x0
	branch Test(EQ,Z) l00000000004915D4
	// succ:  l00000000004915CC l00000000004915D4
l00000000004915CC:
	strlen(x0)
	sp = sp + 0xFFFFFFFFFFFFFFF8
	w24 = w0
	// succ:  l00000000004915D4
l00000000004915D4:
	w23 = Mem0[x19 + 96:word32]
	branch w23 != 0x00000000 l00000000004916F4
	// succ:  l00000000004915DC l00000000004916F4
l00000000004915DC:
	x3 = Mem0[x29 + 104:word64]
	w0 = Mem0[x3 + 24:word32]
	branch w0 != 0x00000000 l00000000004916C0
	// succ:  l00000000004915E8 l00000000004916C0
l00000000004915E8:
	v31 = Mem0[x20:byte]
	w0 = (word32) v31
	w31 = w0 - 0x0000002E
	NZCV = cond(w31)
	branch Test(EQ,Z) l00000000004916E4
	// succ:  l00000000004915F4 l00000000004916E4
l00000000004915F4:
	x3 = Mem0[x29 + 96:word64]
	x0 = x3 + 0xFFFFFFFFFFFFFF10
	x1 = Mem0[x0 + 48:word64]
	branch x1 == 0x0000000000000000 l0000000000491A70
	// succ:  l0000000000491604 l0000000000491A70
l0000000000491604:
	v33 = Mem0[x1:byte]
	w0 = (word32) v33
	w31 = w0 - 0x0000002E
	NZCV = cond(w31)
	branch Test(EQ,Z) l0000000000491A68
	// succ:  l0000000000491610 l0000000000491A68
l0000000000491610:
	x3 = Mem0[x29 + 96:word64]
	x23 = x3 + 0xFFFFFFFFFFFFFF10
	w0 = Mem0[x23 + 120:word32]
	branch w0 == 0x00000000 l0000000000491A90
	// succ:  l0000000000491620 l0000000000491A90
l0000000000491620:
	x0 = Mem0[x23 + 64:word64]
	v35 = Mem0[x0:byte]
	w2 = (word32) v35
	w31 = w2 - 0x0000007E
	NZCV = cond(w31)
	branch Test(EQ,Z) l0000000000491BB0
	// succ:  l0000000000491630 l0000000000491BB0
l0000000000491630:
	strlen(x0)
	sp = sp + 0xFFFFFFFFFFFFFFF8
	x23 = x0
	x0 = x22 + 0x0000000000000013
	strlen(x0)
	sp = sp + 0xFFFFFFFFFFFFFFF8
	w1 = w23 + 0x00000002
	x0 = x0 + (int64) ((int32) w1)
	call xmalloc (retsize: 0;)
	x3 = Mem0[x29 + 96:word64]
	x19 = x0
	x1 = x3 + 0xFFFFFFFFFFFFFF10
	x22 = Mem0[x1 + 64:word64]
	x1 = x22
	strcpy(x0, x1)
	sp = sp + 0xFFFFFFFFFFFFFFF8
l0000000000491690:
	x31 = x20 - x21
	NZCV = cond(x31)
	branch Test(EQ,Z) l0000000000491A20
	// succ:  l0000000000491698 l0000000000491A20
l0000000000491698:
	x0 = x20
	call xfree (retsize: 0;)
	x0 = x19
	// succ:  l00000000004916A4
l00000000004916A4:
	v37 = sp + 16
	x19 = Mem0[v37:word64]
	v37 = v37 + 8
	x20 = Mem0[v37:word64]
	v38 = sp + 32
	x21 = Mem0[v38:word64]
	v38 = v38 + 8
	x22 = Mem0[v38:word64]
	v39 = sp + 48
	x23 = Mem0[v39:word64]
	v39 = v39 + 8
	x24 = Mem0[v39:word64]
	v40 = sp + 64
	x25 = Mem0[v40:word64]
	v40 = v40 + 8
	x26 = Mem0[v40:word64]
	v41 = sp + 80
	x27 = Mem0[v41:word64]
	v41 = v41 + 8
	x28 = Mem0[v41:word64]
	x29 = Mem0[sp:word64]
	sp = sp + 8
	x30 = Mem0[sp:word64]
	sp = sp + 128
	return
	// succ:  rl_filename_completion_function_exit
l00000000004916C0:
	v42 = Mem0[x20:byte]
	w0 = (word32) v42
	w31 = w0 - 0x0000002E
	NZCV = cond(w31)
	branch Test(NE,Z) l00000000004915F4
	// succ:  l00000000004916CC l00000000004915F4
l00000000004916CC:
	v43 = Mem0[x20 + 1:byte]
	w0 = (word32) v43
	branch w0 == 0x00000000 l00000000004916E4
	// succ:  l00000000004916D4 l00000000004916E4
l00000000004916D4:
	w31 = w0 - 0x0000002E
	NZCV = cond(w31)
	branch Test(NE,Z) l00000000004915F4
	// succ:  l00000000004916DC l00000000004915F4
l00000000004916DC:
	v44 = Mem0[x20 + 2:byte]
	w0 = (word32) v44
	branch w0 != 0x00000000 l00000000004915F4
	// succ:  l00000000004916E4 l00000000004915F4
l00000000004916E4:
	x23 = Mem0[x19 + 40:word64]
	// succ:  l00000000004916E8
l00000000004916E8:
	branch x23 != 0x0000000000000000 l000000000049158C
	// succ:  l00000000004916EC l000000000049158C
l00000000004916EC:
	branch x22 == 0x0000000000000000 l0000000000491B30
	// succ:  l00000000004916F0 l0000000000491B30
l00000000004916F0:
	goto l00000000004915F4
	// succ:  l00000000004915F4
l00000000004916F4:
	w0 = Mem0[x19 + 112:word32]
	x26 = Mem0[x19 + 56:word64]
	branch w0 != 0x00000000 l000000000049173C
	// succ:  l0000000000491700 l000000000049173C
l0000000000491700:
	v50 = Mem0[x20:byte]
	w1 = (word32) v50
	v51 = Mem0[x26:byte]
	w0 = (word32) v51
	NZCV = cond(w1 - w0)
	branch Test(NE,Z) l00000000004916E4
	// succ:  l0000000000491710 l00000000004916E4
l0000000000491710:
	NZCV = cond(w24 - w23)
	branch Test(LT,NV) l00000000004916E4
	// succ:  l0000000000491718 l00000000004916E4
l0000000000491718:
	x0 = x26
	x1 = x20
l0000000000491734:
	x20 = x21
	goto l00000000004915D4
	// succ:  l00000000004915D4
l000000000049173C:
	w0 = Mem0[x19 + 116:word32]
	branch w0 == 0x00000000 l00000000004917F8
	// succ:  l0000000000491744 l00000000004917F8
l0000000000491744:
	NZCV = cond(w24 - w23)
	branch Test(LT,NV) l00000000004916E4
	// succ:  l000000000049174C l00000000004916E4
l000000000049174C:
	w23 = w23 - 0x00000001
	__ctype_b_loc()
	sp = sp + 0xFFFFFFFFFFFFFFF8
	x23 = x23 + 0x0000000000000001
	Mem0[x29 + 112:word64] = x23
	x1 = Mem0[x0:word64]
	x23 = 0x0000000000000000
	goto l0000000000491774
	// succ:  l0000000000491774
l0000000000491768:
	x2 = Mem0[x29 + 112:word64]
	x31 = x23 - x2
	NZCV = cond(x31)
	branch Test(EQ,Z) l00000000004915F4
	// succ:  l0000000000491774 l00000000004915F4
l0000000000491774:
	v61 = Mem0[x20 + x23:byte]
	w24 = (word32) v61
	w25 = w24
	v63 = Mem0[x1 + x25 * 2:word16]
	w0 = (word32) v63
	w28 = w24
	branch (w0 & 0x00000100) == 0x00000000 l000000000049179C
	// succ:  l0000000000491788 l000000000049179C
l0000000000491788:
	Mem0[x29 + 120:word64] = x1
	__ctype_tolower_loc()
	sp = sp + 0xFFFFFFFFFFFFFFF8
	x0 = Mem0[x0:word64]
	x1 = Mem0[x29 + 120:word64]
	w28 = Mem0[x0 + x25 * 4:word32]
	// succ:  l000000000049179C
l000000000049179C:
	v65 = Mem0[x26 + x23:byte]
	w25 = (word32) v65
	x23 = x23 + 0x0000000000000001
	w27 = w25
	v67 = Mem0[x1 + x27 * 2:word16]
	w2 = (word32) v67
	w0 = w25
	branch (w2 & 0x00000100) == 0x00000000 l00000000004917C8
	// succ:  l00000000004917B4 l00000000004917C8
l00000000004917B4:
	Mem0[x29 + 120:word64] = x1
	__ctype_tolower_loc()
	sp = sp + 0xFFFFFFFFFFFFFFF8
	x0 = Mem0[x0:word64]
	x1 = Mem0[x29 + 120:word64]
	w0 = Mem0[x0 + x27 * 4:word32]
	// succ:  l00000000004917C8
l00000000004917C8:
	w31 = w24 - 0x0000005F
	NZCV = cond(w31)
	branch Test(EQ,Z) l00000000004917D8
	// succ:  l00000000004917D0 l00000000004917D8
l00000000004917D0:
	w31 = w24 - 0x0000002D
	NZCV = cond(w31)
	branch Test(NE,Z) l00000000004917E8
	// succ:  l00000000004917D8 l00000000004917E8
l00000000004917D8:
	w31 = w25 - 0x0000005F
	NZCV = cond(w31)
	branch Test(EQ,Z) l0000000000491768
	// succ:  l00000000004917E0 l0000000000491768
l00000000004917E0:
	w31 = w25 - 0x0000002D
	NZCV = cond(w31)
	branch Test(EQ,Z) l0000000000491768
	// succ:  l00000000004917E8 l0000000000491768
l00000000004917E8:
	NZCV = cond(w28 - w0)
	branch Test(EQ,Z) l0000000000491768
	// succ:  l00000000004917F0 l0000000000491768
l00000000004917F0:
	x23 = Mem0[x19 + 40:word64]
	goto l00000000004916E8
	// succ:  l00000000004916E8
l00000000004917F8:
	__ctype_b_loc()
	sp = sp + 0xFFFFFFFFFFFFFFF8
	v69 = Mem0[x20:byte]
	w1 = (word32) v69
	x25 = Mem0[x0:word64]
	w27 = w1
	v70 = Mem0[x25 + x27 * 2:word16]
	w0 = (word32) v70
	w28 = w1
	branch (w0 & 0x00000100) == 0x00000000 l0000000000491820
	// succ:  l0000000000491814 l0000000000491820
l0000000000491814:
	__ctype_tolower_loc()
	sp = sp + 0xFFFFFFFFFFFFFFF8
	x0 = Mem0[x0:word64]
	w28 = Mem0[x0 + x27 * 4:word32]
	// succ:  l0000000000491820
l0000000000491820:
	v71 = Mem0[x26:byte]
	w0 = (word32) v71
	w27 = w0
	v72 = Mem0[x25 + x27 * 2:word16]
	w2 = (word32) v72
	branch (w2 & 0x00000100) == 0x00000000 l000000000049183C
	// succ:  l0000000000491830 l000000000049183C
l0000000000491830:
	__ctype_tolower_loc()
	sp = sp + 0xFFFFFFFFFFFFFFF8
	x0 = Mem0[x0:word64]
	w0 = Mem0[x0 + x27 * 4:word32]
	// succ:  l000000000049183C
l000000000049183C:
	NZCV = cond(w28 - w0)
	branch Test(NE,Z) l00000000004916E4
	// succ:  l0000000000491844 l00000000004916E4
l0000000000491844:
	NZCV = cond(w24 - w23)
	branch Test(LT,NV) l00000000004916E4
	// succ:  l000000000049184C l00000000004916E4
l000000000049184C:
	x0 = x26
	x1 = x20
l0000000000491868:
	x22 = x3 + 0xFFFFFFFFFFFFFF10
	x0 = Mem0[x22 + 40:word64]
	branch x0 == 0x0000000000000000 l000000000049187C
	// succ:  l0000000000491874 l000000000049187C
l0000000000491874:
	closedir(x0)
	sp = sp + 0xFFFFFFFFFFFFFFF8
	Mem0[x22 + 40:word64] = 0x0000000000000000
	// succ:  l000000000049187C
l000000000049187C:
	x3 = Mem0[x29 + 96:word64]
	x0 = x3 + 0xFFFFFFFFFFFFFF10
	x0 = Mem0[x0 + 48:word64]
	branch x0 == 0x0000000000000000 l0000000000491890
	// succ:  l000000000049188C l0000000000491890
l000000000049188C:
	call free (retsize: 0;)
	// succ:  l0000000000491890
l0000000000491890:
	x3 = Mem0[x29 + 96:word64]
	x0 = x3 + 0xFFFFFFFFFFFFFF10
	x0 = Mem0[x0 + 56:word64]
	branch x0 == 0x0000000000000000 l00000000004918A4
	// succ:  l00000000004918A0 l00000000004918A4
l00000000004918A0:
	call free (retsize: 0;)
	// succ:  l00000000004918A4
l00000000004918A4:
	x3 = Mem0[x29 + 96:word64]
	x0 = x3 + 0xFFFFFFFFFFFFFF10
	x0 = Mem0[x0 + 64:word64]
	branch x0 == 0x0000000000000000 l00000000004918B8
	// succ:  l00000000004918B4 l00000000004918B8
l00000000004918B4:
	call free (retsize: 0;)
	// succ:  l00000000004918B8
l00000000004918B8:
	x0 = x19
	strlen(x0)
	sp = sp + 0xFFFFFFFFFFFFFFF8
	x0 = x0 + 0x0000000000000001
	call xmalloc (retsize: 0;)
	x1 = x19
	strcpy(x0, x1)
	sp = sp + 0xFFFFFFFFFFFFFFF8
	x3 = Mem0[x29 + 96:word64]
	v58 = Mem0[x19:byte]
	w2 = (word32) v58
	x1 = x3 + 0xFFFFFFFFFFFFFF10
	Mem0[x1 + 56:word64] = x0
	branch w2 != 0x00000000 l00000000004919EC
	// succ:  l00000000004918E4 l00000000004919EC
l00000000004918E4:
	x19 = 0x00000000004B2000
	x0 = 0x0000000000000002
	x19 = x19 + 0xFFFFFFFFFFFFFD68
	// succ:  l00000000004918F0
l00000000004918F0:
	call xmalloc (retsize: 0;)
	x1 = x19
	strcpy(x0, x1)
	sp = sp + 0xFFFFFFFFFFFFFFF8
	x3 = Mem0[x29 + 96:word64]
	w1 = 0x0000002F
	x22 = x3 + 0xFFFFFFFFFFFFFF10
	x23 = x0
	Mem0[x22 + 48:word64] = x0
	strrchr(x0, x1)
	sp = sp + 0xFFFFFFFFFFFFFFF8
	x19 = x0
	branch x0 == 0x0000000000000000 l0000000000491AA0
	// succ:  l000000000049191C l0000000000491AA0
l000000000049191C:
	x0 = Mem0[x22 + 56:word64]
	x1 = x19 + 0x0000000000000001
	strcpy(x0, x1)
	sp = sp + 0xFFFFFFFFFFFFFFF8
	Mem0[x19 + 1:byte] = 0x00
	// succ:  l000000000049192C
l000000000049192C:
	x22 = 0x00000000004E4000
	w0 = Mem0[x22 + 204:word32]
	branch w0 == 0x00000000 l0000000000491A40
	// succ:  l0000000000491938 l0000000000491A40
l0000000000491938:
	x3 = Mem0[x29 + 96:word64]
	x19 = x3 + 0xFFFFFFFFFFFFFF10
	x2 = Mem0[x19 + 72:word64]
	branch x2 == 0x0000000000000000 l0000000000491A40
	// succ:  l0000000000491948 l0000000000491A40
l0000000000491948:
	x1 = 0x00000000004E4000
	x0 = Mem0[x19 + 48:word64]
	w1 = Mem0[x1 + 188:word32]
	call x2 (retsize: 0;)
	Mem0[x19 + 64:word64] = x0
	// succ:  l000000000049195C
l000000000049195C:
	x3 = Mem0[x29 + 96:word64]
	x19 = x3 + 0xFFFFFFFFFFFFFF10
	x0 = Mem0[x19 + 48:word64]
	v59 = Mem0[x0:byte]
	w1 = (word32) v59
	w31 = w1 - 0x0000007E
	NZCV = cond(w31)
	branch Test(EQ,Z) l0000000000491B98
	// succ:  l0000000000491974 l0000000000491B98
l0000000000491974:
	x3 = Mem0[x29 + 96:word64]
	x19 = x3 + 0xFFFFFFFFFFFFFF10
	x1 = Mem0[x19 + 80:word64]
	branch x1 == 0x0000000000000000 l0000000000491AB4
	// succ:  l0000000000491984 l0000000000491AB4
l0000000000491984:
	x0 = x19 + 0x0000000000000030
	call x1 (retsize: 0;)
	x0 = Mem0[x19 + 48:word64]
	// succ:  l0000000000491990
l0000000000491990:
	x3 = Mem0[x29 + 96:word64]
	x19 = x3 + 0xFFFFFFFFFFFFFF10
	opendir(x0)
	sp = sp + 0xFFFFFFFFFFFFFFF8
	x2 = Mem0[x19 + 56:word64]
	Mem0[x19 + 40:word64] = x0
	branch x2 == 0x0000000000000000 l00000000004919FC
	// succ:  l00000000004919A8 l00000000004919FC
l00000000004919A8:
	v60 = Mem0[x2:byte]
	w1 = (word32) v60
	branch w1 == 0x00000000 l00000000004919FC
	// succ:  l00000000004919B0 l00000000004919FC
l00000000004919B0:
	w1 = Mem0[x22 + 204:word32]
	branch w1 == 0x00000000 l00000000004919FC
	// succ:  l00000000004919B8 l00000000004919FC
l00000000004919B8:
	x3 = Mem0[x19 + 72:word64]
	branch x3 == 0x0000000000000000 l00000000004919FC
	// succ:  l00000000004919C0 l00000000004919FC
l00000000004919C0:
	x0 = 0x00000000004E4000
	w1 = Mem0[x0 + 188:word32]
	x0 = x2
	call x3 (retsize: 0;)
	x22 = x0
	x0 = Mem0[x19 + 56:word64]
	call xfree (retsize: 0;)
	x0 = x22
	Mem0[x19 + 56:word64] = x22
	x23 = Mem0[x19 + 40:word64]
	goto l0000000000491A04
	// succ:  l0000000000491A04
l00000000004919EC:
	x0 = x19
	strlen(x0)
	sp = sp + 0xFFFFFFFFFFFFFFF8
	x0 = x0 + 0x0000000000000001
	goto l00000000004918F0
	// succ:  l00000000004918F0
l00000000004919FC:
	x23 = x0
	x0 = x2
	// succ:  l0000000000491A04
l0000000000491A04:
	strlen(x0)
	sp = sp + 0xFFFFFFFFFFFFFFF8
	x3 = Mem0[x29 + 96:word64]
	x1 = x3 + 0xFFFFFFFFFFFFFF10
	Mem0[x1 + 96:word32] = w0
	w0 = 0x00000001
	Mem0[x1 + 8:word32] = w0
	goto l0000000000491570
	// succ:  l0000000000491570
l0000000000491A20:
	x0 = x19
	v45 = sp + 32
	x21 = Mem0[v45:word64]
	v45 = v45 + 8
	x22 = Mem0[v45:word64]
	v46 = sp + 16
	x19 = Mem0[v46:word64]
	v46 = v46 + 8
	x20 = Mem0[v46:word64]
	v47 = sp + 48
	x23 = Mem0[v47:word64]
	v47 = v47 + 8
	x24 = Mem0[v47:word64]
	v48 = sp + 64
	x25 = Mem0[v48:word64]
	v48 = v48 + 8
	x26 = Mem0[v48:word64]
	v49 = sp + 80
	x27 = Mem0[v49:word64]
	v49 = v49 + 8
	x28 = Mem0[v49:word64]
	x29 = Mem0[sp:word64]
	sp = sp + 8
	x30 = Mem0[sp:word64]
	sp = sp + 128
	return
	// succ:  rl_filename_completion_function_exit
l0000000000491A40:
	x3 = Mem0[x29 + 96:word64]
	x19 = x3 + 0xFFFFFFFFFFFFFF10
	x0 = Mem0[x19 + 48:word64]
	strlen(x0)
	sp = sp + 0xFFFFFFFFFFFFFFF8
	x0 = x0 + 0x0000000000000001
	call xmalloc (retsize: 0;)
	x1 = Mem0[x19 + 48:word64]
	strcpy(x0, x1)
	sp = sp + 0xFFFFFFFFFFFFFFF8
	Mem0[x19 + 64:word64] = x0
	goto l000000000049195C
	// succ:  l000000000049195C
l0000000000491A68:
	v36 = Mem0[x1 + 1:byte]
	w0 = (word32) v36
	branch w0 != 0x00000000 l0000000000491610
	// succ:  l0000000000491A70 l0000000000491610
l0000000000491A70:
	x0 = x20
	strlen(x0)
	sp = sp + 0xFFFFFFFFFFFFFFF8
	x0 = x0 + 0x0000000000000001
	call xmalloc (retsize: 0;)
	x1 = x20
	strcpy(x0, x1)
	sp = sp + 0xFFFFFFFFFFFFFFF8
	x19 = x0
	goto l0000000000491690
	// succ:  l0000000000491690
l0000000000491A90:
	x0 = Mem0[x23 + 64:word64]
	goto l0000000000491630
	// succ:  l0000000000491630
l0000000000491AA0:
	w0 = 0x0000002E
	Mem0[x23:byte] = (byte) w0
	x0 = Mem0[x22 + 48:word64]
	Mem0[x0 + 1:byte] = (byte) w19
	goto l000000000049192C
	// succ:  l000000000049192C
l0000000000491AB4:
	x1 = Mem0[x19 + 88:word64]
	branch x1 == 0x0000000000000000 l0000000000491AC8
	// succ:  l0000000000491ABC l0000000000491AC8
l0000000000491ABC:
	x0 = x19 + 0x0000000000000030
	call x1 (retsize: 0;)
	branch w0 != 0x00000000 l0000000000491C18
	// succ:  l0000000000491AC8 l0000000000491C18
l0000000000491AC8:
	w0 = Mem0[x22 + 204:word32]
	branch w0 == 0x00000000 l0000000000491B08
	// succ:  l0000000000491AD0 l0000000000491B08
l0000000000491AD0:
	x3 = Mem0[x29 + 96:word64]
	x19 = x3 + 0xFFFFFFFFFFFFFF10
	x0 = Mem0[x19 + 72:word64]
	branch x0 == 0x0000000000000000 l0000000000491B08
	// succ:  l0000000000491AE0 l0000000000491B08
l0000000000491AE0:
	x0 = Mem0[x19 + 48:word64]
	call xfree (retsize: 0;)
	x0 = Mem0[x19 + 64:word64]
	strlen(x0)
	sp = sp + 0xFFFFFFFFFFFFFFF8
	x0 = x0 + 0x0000000000000001
	call xmalloc (retsize: 0;)
	x1 = Mem0[x19 + 64:word64]
	strcpy(x0, x1)
	sp = sp + 0xFFFFFFFFFFFFFFF8
	Mem0[x19 + 48:word64] = x0
	goto l0000000000491990
	// succ:  l0000000000491990
l0000000000491B08:
	x3 = Mem0[x29 + 96:word64]
	x0 = x3 + 0xFFFFFFFFFFFFFF10
	x0 = Mem0[x0 + 48:word64]
	goto l0000000000491990
	// succ:  l0000000000491990
l0000000000491B18:
	x3 = Mem0[x29 + 96:word64]
	x19 = x3 + 0xFFFFFFFFFFFFFF10
	x0 = Mem0[x19 + 40:word64]
	branch x0 == 0x0000000000000000 l0000000000491B30
	// succ:  l0000000000491B28 l0000000000491B30
l0000000000491B28:
	closedir(x0)
	sp = sp + 0xFFFFFFFFFFFFFFF8
	Mem0[x19 + 40:word64] = x22
	// succ:  l0000000000491B30
l0000000000491B30:
	x3 = Mem0[x29 + 96:word64]
	x19 = x3 + 0xFFFFFFFFFFFFFF10
	x0 = Mem0[x19 + 48:word64]
	branch x0 == 0x0000000000000000 l0000000000491B48
	// succ:  l0000000000491B40 l0000000000491B48
l0000000000491B40:
	call xfree (retsize: 0;)
	Mem0[x19 + 48:word64] = 0x0000000000000000
	// succ:  l0000000000491B48
l0000000000491B48:
	x3 = Mem0[x29 + 96:word64]
	x19 = x3 + 0xFFFFFFFFFFFFFF10
	x0 = Mem0[x19 + 56:word64]
	branch x0 == 0x0000000000000000 l0000000000491B60
	// succ:  l0000000000491B58 l0000000000491B60
l0000000000491B58:
	call xfree (retsize: 0;)
	Mem0[x19 + 56:word64] = 0x0000000000000000
	// succ:  l0000000000491B60
l0000000000491B60:
	x3 = Mem0[x29 + 96:word64]
	x19 = x3 + 0xFFFFFFFFFFFFFF10
	x0 = Mem0[x19 + 64:word64]
	branch x0 == 0x0000000000000000 l00000000004916A4
	// succ:  l0000000000491B70 l00000000004916A4
l0000000000491B70:
	call xfree (retsize: 0;)
	Mem0[x19 + 64:word64] = 0x0000000000000000
	x0 = 0x0000000000000000
	v53 = sp + 16
	x19 = Mem0[v53:word64]
	v53 = v53 + 8
	x20 = Mem0[v53:word64]
	v54 = sp + 32
	x21 = Mem0[v54:word64]
	v54 = v54 + 8
	x22 = Mem0[v54:word64]
	v55 = sp + 48
	x23 = Mem0[v55:word64]
	v55 = v55 + 8
	x24 = Mem0[v55:word64]
	v56 = sp + 64
	x25 = Mem0[v56:word64]
	v56 = v56 + 8
	x26 = Mem0[v56:word64]
	v57 = sp + 80
	x27 = Mem0[v57:word64]
	v57 = v57 + 8
	x28 = Mem0[v57:word64]
	x29 = Mem0[sp:word64]
	sp = sp + 8
	x30 = Mem0[sp:word64]
	sp = sp + 128
	return
	// succ:  rl_filename_completion_function_exit
l0000000000491B98:
	call tilde_expand (retsize: 0;)
	x23 = x0
	x0 = Mem0[x19 + 48:word64]
	call xfree (retsize: 0;)
	Mem0[x19 + 48:word64] = x23
	goto l0000000000491974
	// succ:  l0000000000491974
l0000000000491BB0:
	x0 = x1
	strlen(x0)
	sp = sp + 0xFFFFFFFFFFFFFFF8
	x24 = x0
	x0 = x22 + 0x0000000000000013
	strlen(x0)
	sp = sp + 0xFFFFFFFFFFFFFFF8
	w1 = w24 + 0x00000002
	x0 = x0 + (int64) ((int32) w1)
	call xmalloc (retsize: 0;)
	x1 = Mem0[x23 + 48:word64]
	x19 = x0
	strcpy(x0, x1)
	sp = sp + 0xFFFFFFFFFFFFFFF8
	x1 = Mem0[x23 + 48:word64]
l0000000000491C18:
	x0 = Mem0[x19 + 64:word64]
	call xfree (retsize: 0;)
	x0 = Mem0[x19 + 48:word64]
	strlen(x0)
	sp = sp + 0xFFFFFFFFFFFFFFF8
	x0 = x0 + 0x0000000000000001
	call xmalloc (retsize: 0;)
	x1 = Mem0[x19 + 48:word64]
	strcpy(x0, x1)
	sp = sp + 0xFFFFFFFFFFFFFFF8
	Mem0[x19 + 64:word64] = x0
	x0 = Mem0[x19 + 48:word64]
	goto l0000000000491990
	// succ:  l0000000000491990
rl_filename_completion_function_exit:


// fn0000000000491C44
// Return size: 0
void fn0000000000491C44()
fn0000000000491C44_entry:
	// succ:  l0000000000491C44
l0000000000491C44:
	sp = fp
	sp = sp + -32
	Mem0[sp:word64] = x29
	sp = sp + 8
	Mem0[sp:word64] = x30
	x29 = x31 + 0x0000000000000000
	w1 = 0x0000002F
	Mem0[sp + 16:word64] = x19
	x19 = x0
	strrchr(x0, x1)
	sp = sp + 0xFFFFFFFFFFFFFFF8
	branch x0 == 0x0000000000000000 l0000000000491CE0
	// succ:  l0000000000491C60 l0000000000491CE0
l0000000000491C60:
	v10 = Mem0[x0:byte]
	w1 = (word32) v10
	x2 = x19
	branch w1 == 0x00000000 l0000000000491CBC
	// succ:  l0000000000491C6C l0000000000491CBC
l0000000000491C6C:
	x2 = x0
	x2 = x2 + 1
	v12 = Mem0[x2:byte]
	w1 = (word32) v12
	branch w1 != 0x00000000 l0000000000491CBC
	// succ:  l0000000000491C78 l0000000000491CBC
l0000000000491C78:
	x1 = x0 - 0x0000000000000001
	x31 = x19 - x1
	NZCV = cond(x31)
	branch Test(UGE,C) l0000000000491CAC
	// succ:  l0000000000491C84 l0000000000491CAC
l0000000000491C84:
	v16 = Mem0[x0 + -1:byte]
	w0 = (word32) v16
	w31 = w0 - 0x0000002F
	NZCV = cond(w31)
	branch Test(NE,Z) l0000000000491CA0
	// succ:  l0000000000491C90 l0000000000491CA0
l0000000000491C90:
	goto l0000000000491CCC
	// succ:  l0000000000491CCC
l0000000000491C94:
	v21 = Mem0[x1:byte]
	w2 = (word32) v21
	w31 = w2 - 0x0000002F
	NZCV = cond(w31)
	branch Test(EQ,Z) l0000000000491CCC
	// succ:  l0000000000491CA0 l0000000000491CCC
l0000000000491CA0:
	x1 = x1 - 0x0000000000000001
	x31 = x1 - x19
	NZCV = cond(x31)
	branch Test(NE,Z) l0000000000491C94
	// succ:  l0000000000491CAC l0000000000491C94
l0000000000491CAC:
	v19 = Mem0[x1:byte]
	w0 = (word32) v19
	x2 = x19
	w31 = w0 - 0x0000002F
	NZCV = cond(w31)
	branch Test(EQ,Z) l0000000000491CCC
	// succ:  l0000000000491CBC l0000000000491CCC
l0000000000491CBC:
	x0 = x2
	x19 = Mem0[sp + 16:word64]
	x29 = Mem0[sp:word64]
	sp = sp + 8
	x30 = Mem0[sp:word64]
	sp = sp + 32
	return
	// succ:  fn0000000000491C44_exit
l0000000000491CCC:
	x2 = x1 + 0x0000000000000001
	x0 = x2
	x19 = Mem0[sp + 16:word64]
	x29 = Mem0[sp:word64]
	sp = sp + 8
	x30 = Mem0[sp:word64]
	sp = sp + 32
	return
	// succ:  fn0000000000491C44_exit
l0000000000491CE0:
	x2 = x19
	x0 = x2
	x19 = Mem0[sp + 16:word64]
	x29 = Mem0[sp:word64]
	sp = sp + 8
	x30 = Mem0[sp:word64]
	sp = sp + 32
	return
	// succ:  fn0000000000491C44_exit
fn0000000000491C44_exit:


// fn0000000000491CF4
// Return size: 0
void fn0000000000491CF4()
fn0000000000491CF4_entry:
	// succ:  l0000000000491CF4
l0000000000491CF4:
	sp = fp
	sp = sp + -80
	Mem0[sp:word64] = x29
	sp = sp + 8
	Mem0[sp:word64] = x30
	x29 = x31 + 0x0000000000000000
	v8 = sp + 16
	Mem0[v8:word64] = x19
	v8 = v8 + 8
	Mem0[v8:word64] = x20
	v11 = sp + 32
	Mem0[v11:word64] = x21
	v11 = v11 + 8
	Mem0[v11:word64] = x22
	Mem0[sp + 48:word64] = x23
	x20 = x0
	x22 = x29 + 0x0000000000000040
	strlen(x0)
	sp = sp + 0xFFFFFFFFFFFFFFF8
	w19 = 0x00000000
	w23 = w0 + 0x00000001
	Mem0[x22:word64] = 0x0000000000000000
	x22 = x22 + 8
	w21 = w19
fn0000000000491CF4_exit:


// fn0000000000491DC8
// Return size: 0
void fn0000000000491DC8()
fn0000000000491DC8_entry:
	// succ:  l0000000000491DC8
l0000000000491DC8:
	sp = fp
	sp = sp + -112
	Mem0[sp:word64] = x29
	sp = sp + 8
	Mem0[sp:word64] = x30
	x29 = x31 + 0x0000000000000000
	v8 = sp + 32
	Mem0[v8:word64] = x21
	v8 = v8 + 8
	Mem0[v8:word64] = x22
	v11 = sp + 64
	Mem0[v11:word64] = x25
	v11 = v11 + 8
	Mem0[v11:word64] = x26
fn0000000000491DC8_exit:


// fn000000000049217C
// Return size: 0
void fn000000000049217C()
fn000000000049217C_entry:
	// succ:  l000000000049217C
l000000000049217C:
	sp = fp
	sp = sp + -192
	Mem0[sp:word64] = x29
	sp = sp + 8
	Mem0[sp:word64] = x30
	x29 = x31 + 0x0000000000000000
	v8 = sp + 16
	Mem0[v8:word64] = x19
	v8 = v8 + 8
	Mem0[v8:word64] = x20
	v11 = sp + 32
	Mem0[v11:word64] = x21
	v11 = v11 + 8
	Mem0[v11:word64] = x22
	v14 = sp + 48
	Mem0[v14:word64] = x23
	v14 = v14 + 8
	Mem0[v14:word64] = x24
	v17 = sp + 64
	Mem0[v17:word64] = x25
	v17 = v17 + 8
	Mem0[v17:word64] = x26
	v20 = sp + 80
	Mem0[v20:word64] = x27
	v20 = v20 + 8
	Mem0[v20:word64] = x28
	Mem0[x29 + 144:word32] = w1
	w31 = w1 - 0x00000001
	NZCV = cond(w31)
	Mem0[x29 + 160:word64] = x0
	Mem0[x29 + 152:word64] = x2
	branch Test(EQ,Z) l0000000000492528
	// succ:  l00000000004921AC l0000000000492528
l00000000004921AC:
	branch Test(LE,ZCV) l0000000000492604
	// succ:  l00000000004921B0 l0000000000492604
l00000000004921B0:
	w3 = Mem0[x29 + 144:word32]
	x1 = Mem0[x29 + 160:word64]
	w28 = w3 - 0x00000002
	x2 = 0x00000000004E1000
	x0 = x1 + 0x0000000000000010
	w26 = 0xFFFF86A0
	x0 = x0 + (uint64) ((word32) w28)
	x25 = 0x00000000004E2000
	x3 = x2 + 0xFFFFFFFFFFFFFF10
	Mem0[x29 + 168:word64] = x2
	x20 = x1 + 0x0000000000000008
	Mem0[x29 + 128:word64] = x0
	w26 = DPB(w26, 0x00000001, 16)
	x25 = x25 + 0xFFFFFFFFFFFFFF80
	Mem0[x29 + 136:word64] = x3
	__ctype_get_mb_cur_max()
	sp = sp + 0xFFFFFFFFFFFFFFF8
	x31 = x0 - 0x0000000000000001
	NZCV = cond(x31)
	branch Test(ULE,ZC) l0000000000492200
	// succ:  l00000000004921F8 l0000000000492200
l00000000004921F8:
	w0 = Mem0[x25:word32]
	branch w0 == 0x00000000 l000000000049251C
	// succ:  l0000000000492200 l000000000049251C
l0000000000492200:
	x1 = Mem0[x29 + 136:word64]
	w0 = Mem0[x1 + 112:word32]
	branch w0 == 0x00000000 l0000000000492470
	// succ:  l000000000049220C l0000000000492470
l000000000049220C:
	__ctype_b_loc()
	sp = sp + 0xFFFFFFFFFFFFFFF8
	x28 = x0
	w19 = 0x00000000
	x0 = Mem0[x20:word64]
l000000000049228C:
	w19 = w22
	// succ:  l0000000000492290
l0000000000492290:
	x0 = Mem0[x29 + 128:word64]
	NZCV = cond(w26 - w19)
	x20 = x20 + 0x0000000000000008
l00000000004922CC:
	call xmalloc (retsize: 0;)
	x2 = Mem0[x29 + 168:word64]
	x3 = Mem0[x29 + 160:word64]
	x1 = x2 + 0xFFFFFFFFFFFFFF10
	w2 = Mem0[x1 + 112:word32]
	Mem0[x3:word64] = x0
	branch w2 == 0x00000000 l00000000004925C0
	// succ:  l00000000004922E8 l00000000004925C0
l00000000004922E8:
	w0 = Mem0[x1 + 8:word32]
	x24 = 0x0000000000000000
	branch w0 == 0x00000000 l0000000000492318
	// succ:  l00000000004922F4 l0000000000492318
l00000000004922F4:
	x2 = Mem0[x1 + 72:word64]
	branch x2 == 0x0000000000000000 l0000000000492318
	// succ:  l00000000004922FC l0000000000492318
l00000000004922FC:
	x0 = 0x00000000004E4000
	w0 = Mem0[x0 + 204:word32]
	branch w0 == 0x00000000 l0000000000492318
	// succ:  l0000000000492308 l0000000000492318
l0000000000492308:
	x0 = 0x00000000004DE000
	x0 = x0 + 0x0000000000000560
	w0 = Mem0[x0:word32]
	branch w0 != 0x00000000 l0000000000492628
	// succ:  l0000000000492318 l0000000000492628
l0000000000492318:
	x0 = Mem0[x29 + 160:word64]
	v50 = Mem0[x29 + 72:int32]
	x1 = (word64) v50
	x20 = x0 + 0x0000000000000008
	x3 = 0x000000000049E000
	x2 = 0x0000000000000008
	x3 = x3 + 0x00000000000000CC
	x0 = x20
	call qsort (retsize: 0;)
	x0 = Mem0[x29 + 152:word64]
	strlen(x0)
	sp = sp + 0xFFFFFFFFFFFFFFF8
	NZCV = cond(w0 - w26)
	branch Test(GT,NZV) l00000000004925EC
	// succ:  l0000000000492348 l00000000004925EC
l0000000000492348:
	w1 = Mem0[x29 + 144:word32]
	NZCV = cond(w1 - w31)
	branch Test(LE,ZCV) l00000000004925D4
	// succ:  l0000000000492354 l00000000004925D4
l0000000000492354:
l00000000004923AC:
	branch x24 == 0x0000000000000000 l00000000004923B8
	// succ:  l00000000004923B0 l00000000004923B8
l00000000004923B0:
	x0 = x24
	call free (retsize: 0;)
	// succ:  l00000000004923B8
l00000000004923B8:
	x1 = Mem0[x29 + 160:word64]
	x0 = Mem0[x1:word64]
	Mem0[x0 + x23:byte] = 0x00
	v52 = sp + 16
	x19 = Mem0[v52:word64]
	v52 = v52 + 8
	x20 = Mem0[v52:word64]
	w0 = Mem0[x29 + 144:word32]
	v53 = sp + 32
	x21 = Mem0[v53:word64]
	v53 = v53 + 8
	x22 = Mem0[v53:word64]
	v54 = sp + 48
	x23 = Mem0[v54:word64]
	v54 = v54 + 8
	x24 = Mem0[v54:word64]
	v55 = sp + 64
	x25 = Mem0[v55:word64]
	v55 = v55 + 8
	x26 = Mem0[v55:word64]
	v56 = sp + 80
	x27 = Mem0[v56:word64]
	v56 = v56 + 8
	x28 = Mem0[v56:word64]
	x29 = Mem0[sp:word64]
	sp = sp + 8
	x30 = Mem0[sp:word64]
	sp = sp + 192
	return
	// succ:  fn000000000049217C_exit
l0000000000492470:
	x0 = Mem0[x20:word64]
	v42 = Mem0[x0:byte]
	w22 = (word32) v42
	branch w22 == 0x00000000 l000000000049228C
	// succ:  l000000000049247C l000000000049228C
l000000000049247C:
	x0 = Mem0[x20 + 8:word64]
	x21 = 0x0000000000000000
	v44 = Mem0[x0:byte]
	w23 = (word32) v44
	w19 = w21
	branch w23 != 0x00000000 l00000000004924BC
	// succ:  l0000000000492490 l00000000004924BC
l0000000000492490:
	goto l0000000000492290
	// succ:  l0000000000492290
l0000000000492494:
	NZCV = cond(w22 - w23)
	branch Test(NE,Z) l0000000000492290
	// succ:  l000000000049249C l0000000000492290
l000000000049249C:
	w19 = w19 + 0x00000001
	x0 = Mem0[x20:word64]
l00000000004924BC:
	__ctype_get_mb_cur_max()
	sp = sp + 0xFFFFFFFFFFFFFFF8
	x31 = x0 - 0x0000000000000001
	NZCV = cond(x31)
	branch Test(ULE,ZC) l0000000000492494
	// succ:  l00000000004924C8 l0000000000492494
l00000000004924C8:
	w0 = Mem0[x25:word32]
	branch w0 != 0x00000000 l0000000000492494
	// succ:  l00000000004924D0 l0000000000492494
l00000000004924D0:
	x6 = Mem0[x29 + 112:word64]
	x3 = Mem0[x20 + 8:word64]
	x0 = Mem0[x20:word64]
	w1 = w19
	w4 = w19
	x2 = x29 + 0x0000000000000070
	x5 = x29 + 0x0000000000000068
	Mem0[x29 + 96:word64] = x6
	call _rl_compare_chars (retsize: 0;)
	x1 = x29 + 0x0000000000000060
	branch w0 == 0x00000000 l0000000000492290
	// succ:  l00000000004924FC l0000000000492290
l00000000004924FC:
	x0 = Mem0[x20:word64]
	x0 = x0 + x21
	call _rl_get_char_len (retsize: 0;)
	w31 = w0 - 0x00000001
	NZCV = cond(w31)
	w0 = w0 - 0x00000001
	branch Test(LE,ZCV) l000000000049249C
	// succ:  l0000000000492514 l000000000049249C
l0000000000492514:
	w19 = w19 + w0
	goto l000000000049249C
	// succ:  l000000000049249C
l000000000049251C:
	Mem0[x29 + 112:word64] = 0x0000000000000000
	Mem0[x29 + 104:word64] = 0x0000000000000000
	goto l0000000000492200
	// succ:  l0000000000492200
l0000000000492528:
	x2 = Mem0[x29 + 160:word64]
	v36 = sp + 16
	x19 = Mem0[v36:word64]
	v36 = v36 + 8
	x20 = Mem0[v36:word64]
	x0 = Mem0[x2 + 8:word64]
	Mem0[x2 + 8:word64] = 0x0000000000000000
	Mem0[x2:word64] = x0
	v37 = sp + 32
	x21 = Mem0[v37:word64]
	v37 = v37 + 8
	x22 = Mem0[v37:word64]
	w0 = Mem0[x29 + 144:word32]
	v38 = sp + 48
	x23 = Mem0[v38:word64]
	v38 = v38 + 8
	x24 = Mem0[v38:word64]
	v39 = sp + 64
	x25 = Mem0[v39:word64]
	v39 = v39 + 8
	x26 = Mem0[v39:word64]
	v40 = sp + 80
	x27 = Mem0[v40:word64]
	v40 = v40 + 8
	x28 = Mem0[v40:word64]
	x29 = Mem0[sp:word64]
	sp = sp + 8
	x30 = Mem0[sp:word64]
	sp = sp + 192
	return
	// succ:  fn000000000049217C_exit
l00000000004925C0:
	x3 = Mem0[x29 + 160:word64]
	x2 = x23
	x1 = Mem0[x3 + 8:word64]
	strncpy(x0, x1, x2)
	sp = sp + 0xFFFFFFFFFFFFFFF8
	goto l00000000004923B8
	// succ:  l00000000004923B8
l00000000004925D4:
	x1 = Mem0[x29 + 160:word64]
	x2 = x23
	x0 = Mem0[x1:word64]
	x1 = Mem0[x1 + 8:word64]
	strncpy(x0, x1, x2)
	sp = sp + 0xFFFFFFFFFFFFFFF8
	goto l00000000004923AC
	// succ:  l00000000004923AC
l00000000004925EC:
	x2 = Mem0[x29 + 160:word64]
	x1 = Mem0[x29 + 152:word64]
	x0 = Mem0[x2:word64]
	x2 = x23
	strncpy(x0, x1, x2)
	sp = sp + 0xFFFFFFFFFFFFFFF8
	goto l00000000004923AC
	// succ:  l00000000004923AC
l0000000000492604:
	x23 = 0xFFFFFFFFFFFF86A0
	x0 = 0xFFFFFFFFFFFF86A1
	w26 = 0xFFFF86A0
	x1 = 0x00000000004E1000
	x23 = DPB(x23, 0x0001, 16)
	x0 = DPB(x0, 0x0001, 16)
	w26 = DPB(w26, 0x00000001, 16)
	Mem0[x29 + 168:word64] = x1
	goto l00000000004922CC
	// succ:  l00000000004922CC
l0000000000492628:
	x0 = 0x00000000004E4000
	w1 = Mem0[x0 + 188:word32]
	x0 = Mem0[x29 + 152:word64]
	call x2 (retsize: 0;)
	Mem0[x29 + 152:word64] = x0
	x24 = x0
	goto l0000000000492318
	// succ:  l0000000000492318
fn000000000049217C_exit:


// fn0000000000492644
// Return size: 0
void fn0000000000492644()
fn0000000000492644_entry:
	// succ:  l0000000000492644
l0000000000492644:
	sp = fp
	sp = sp + -112
	Mem0[sp:word64] = x29
	sp = sp + 8
	Mem0[sp:word64] = x30
	x29 = x31 + 0x0000000000000000
	v8 = sp + 16
	Mem0[v8:word64] = x19
	v8 = v8 + 8
	Mem0[v8:word64] = x20
	x19 = Mem0[x0:word64]
	v12 = sp + 48
	Mem0[v12:word64] = x23
	v12 = v12 + 8
	Mem0[v12:word64] = x24
	v15 = sp + 64
	Mem0[v15:word64] = x25
	v15 = v15 + 8
	Mem0[v15:word64] = x26
	v18 = sp + 32
	Mem0[v18:word64] = x21
	v18 = v18 + 8
	Mem0[v18:word64] = x22
	Mem0[sp + 80:word64] = x27
	x24 = x0
	w26 = w1
	branch x19 == 0x0000000000000000 l0000000000492870
	// succ:  l0000000000492670 l0000000000492870
l0000000000492670:
	x1 = 0x00000000004DE000
	x0 = x1 + 0x0000000000000560
	w0 = Mem0[x0 + 28:word32]
	branch w0 != 0x00000000 l0000000000492710
	// succ:  l0000000000492680 l0000000000492710
l0000000000492680:
	x0 = 0x00000000004E1000
	x0 = x0 + 0xFFFFFFFFFFFFFF10
	x3 = Mem0[x0 + 128:word64]
	branch x3 == 0x0000000000000000 l00000000004926EC
	// succ:  l0000000000492690 l00000000004926EC
l0000000000492690:
	branch w26 == 0x00000000 l00000000004926EC
	// succ:  l0000000000492694 l00000000004926EC
l0000000000492694:
	x0 = Mem0[x19 + 8:word64]
	branch x0 == 0x0000000000000000 l00000000004928C4
	// succ:  l000000000049269C l00000000004928C4
l000000000049269C:
	x1 = x19 + 0x0000000000000010
	w20 = 0x00000001
	// succ:  l00000000004926A4
l00000000004926A4:
	x2 = Mem0[x1:word64]
	x1 = x1 + 8
	w20 = w20 + 0x00000001
	branch x2 != 0x0000000000000000 l00000000004926A4
	// succ:  l00000000004926B0 l00000000004926A4
l00000000004926B0:
	x0 = x19
	call x3 (retsize: 0;)
	x21 = Mem0[x19:word64]
	branch x21 == 0x0000000000000000 l0000000000492890
	// succ:  l00000000004926C0 l0000000000492890
l00000000004926C0:
	x0 = Mem0[x19 + 8:word64]
	x3 = x19 + 0x0000000000000010
	w1 = 0x00000001
	branch x0 != 0x0000000000000000 l00000000004926D8
	// succ:  l00000000004926D0 l00000000004926D8
l00000000004926D0:
	goto l00000000004926EC
	// succ:  l00000000004926EC
l00000000004926D4:
	w1 = w4
	// succ:  l00000000004926D8
l00000000004926D8:
	x5 = Mem0[x3:word64]
	x3 = x3 + 8
	w4 = w1 + 0x00000001
	branch x5 != 0x0000000000000000 l00000000004926D4
	// succ:  l00000000004926E4 l00000000004926D4
l00000000004926E4:
	NZCV = cond(w20 - w4)
	branch Test(GT,NZV) l0000000000492858
	// succ:  l00000000004926EC l0000000000492858
l00000000004926EC:
	Mem0[x24:word64] = x19
	w0 = 0x00000001
	// succ:  l00000000004926F4
l00000000004926F4:
	v36 = sp + 16
	x19 = Mem0[v36:word64]
	v36 = v36 + 8
	x20 = Mem0[v36:word64]
	v37 = sp + 32
	x21 = Mem0[v37:word64]
	v37 = v37 + 8
	x22 = Mem0[v37:word64]
	v38 = sp + 48
	x23 = Mem0[v38:word64]
	v38 = v38 + 8
	x24 = Mem0[v38:word64]
	v39 = sp + 64
	x25 = Mem0[v39:word64]
	v39 = v39 + 8
	x26 = Mem0[v39:word64]
	x27 = Mem0[sp + 80:word64]
	x29 = Mem0[sp:word64]
	sp = sp + 8
	x30 = Mem0[sp:word64]
	sp = sp + 112
	return
	// succ:  fn0000000000492644_exit
l0000000000492710:
	x0 = Mem0[x19:word64]
	branch x0 == 0x0000000000000000 l0000000000492744
	// succ:  l0000000000492718 l0000000000492744
l0000000000492718:
	x6 = x19 + 0x0000000000000008
	x2 = x6
	w3 = 0x00000000
	goto l000000000049272C
	// succ:  l000000000049272C
l0000000000492728:
	w3 = w5
	// succ:  l000000000049272C
l000000000049272C:
	x4 = Mem0[x2:word64]
	x2 = x2 + 8
	w5 = w3 + 0x00000001
	branch x4 != 0x0000000000000000 l0000000000492728
	// succ:  l0000000000492738 l0000000000492728
l0000000000492738:
	x1 = x1 + 0x0000000000000560
	w1 = Mem0[x1 + 32:word32]
	branch w1 != 0x00000000 l00000000004928A4
	// succ:  l0000000000492744 l00000000004928A4
l0000000000492744:
	strlen(x0)
	sp = sp + 0xFFFFFFFFFFFFFFF8
	x0 = x0 + 0x0000000000000001
	call xmalloc (retsize: 0;)
	x1 = Mem0[x19:word64]
	strcpy(x0, x1)
	sp = sp + 0xFFFFFFFFFFFFFFF8
	x1 = Mem0[x19 + 8:word64]
	x27 = x0
	branch x1 == 0x0000000000000000 l00000000004928CC
	// succ:  l0000000000492764 l00000000004928CC
l0000000000492764:
	x23 = x19 + 0x0000000000000010
	x20 = 0x0000000000000001
	w25 = 0x00000000
	x21 = 0x0000000000000000
	// succ:  l0000000000492790
l0000000000492790:
l00000000004927C8:
	call xmalloc (retsize: 0;)
	x2 = Mem0[x19 + 8:word64]
	x21 = x0
	branch x2 == 0x0000000000000000 l00000000004928D4
	// succ:  l00000000004927D8 l00000000004928D4
l00000000004927D8:
	x3 = x19 + 0x0000000000000010
	w20 = 0x00000001
	// succ:  l00000000004927E0
l00000000004927E0:
	x1 = x29 + 0x0000000000000060
	x31 = x1 - x2
	NZCV = cond(x31)
	branch Test(EQ,Z) l00000000004927F4
	// succ:  l00000000004927EC l00000000004927F4
l00000000004927EC:
	Mem0[x21 + (int64) ((int32) w20):word64] = x2
	w20 = w20 + 0x00000001
	// succ:  l00000000004927F4
l00000000004927F4:
	x2 = Mem0[x3:word64]
	x3 = x3 + 8
	branch x2 != 0x0000000000000000 l00000000004927E0
	// succ:  l00000000004927FC l00000000004927E0
l00000000004927FC:
l0000000000492800:
	Mem0[x21 + x0:word64] = 0x0000000000000000
	x0 = Mem0[x19:word64]
	x1 = x29 + 0x0000000000000060
	x31 = x1 - x0
	NZCV = cond(x31)
	branch Test(EQ,Z) l0000000000492818
	// succ:  l0000000000492814 l0000000000492818
l0000000000492814:
	call xfree (retsize: 0;)
	// succ:  l0000000000492818
l0000000000492818:
	Mem0[x21:word64] = x27
	w31 = w20 - 0x00000002
	NZCV = cond(w31)
	branch Test(EQ,Z) l0000000000492834
	// succ:  l0000000000492824 l0000000000492834
l0000000000492824:
	x0 = x19
	call xfree (retsize: 0;)
	x19 = x21
	goto l0000000000492680
	// succ:  l0000000000492680
l0000000000492834:
	x20 = Mem0[x21 + 8:word64]
	x0 = x27
	x1 = x20
	strcmp(x0, x1)
	sp = sp + 0xFFFFFFFFFFFFFFF8
	branch w0 != 0x00000000 l0000000000492824
	// succ:  l0000000000492848 l0000000000492824
l0000000000492848:
	x0 = x20
	call xfree (retsize: 0;)
	Mem0[x21 + 8:word64] = 0x0000000000000000
	goto l0000000000492824
	// succ:  l0000000000492824
l0000000000492858:
	x0 = x19
	x2 = x21
	call fn000000000049217C (retsize: 0;)
	x0 = x21
	call free (retsize: 0;)
	goto l00000000004926EC
	// succ:  l00000000004926EC
l0000000000492870:
	w0 = w19
	v28 = sp + 32
	x21 = Mem0[v28:word64]
	v28 = v28 + 8
	x22 = Mem0[v28:word64]
	v29 = sp + 16
	x19 = Mem0[v29:word64]
	v29 = v29 + 8
	x20 = Mem0[v29:word64]
	v30 = sp + 48
	x23 = Mem0[v30:word64]
	v30 = v30 + 8
	x24 = Mem0[v30:word64]
	v31 = sp + 64
	x25 = Mem0[v31:word64]
	v31 = v31 + 8
	x26 = Mem0[v31:word64]
	x27 = Mem0[sp + 80:word64]
	x29 = Mem0[sp:word64]
	sp = sp + 8
	x30 = Mem0[sp:word64]
	sp = sp + 112
	return
	// succ:  fn0000000000492644_exit
l0000000000492890:
	x0 = x19
	call free (retsize: 0;)
	w0 = w21
	Mem0[x24:word64] = x21
	goto l00000000004926F4
	// succ:  l00000000004926F4
l00000000004928A4:
l00000000004928C4:
	w20 = 0x00000001
	goto l00000000004926B0
	// succ:  l00000000004926B0
l00000000004928CC:
	x0 = 0x0000000000000018
	goto l00000000004927C8
	// succ:  l00000000004927C8
l00000000004928D4:
	x0 = 0x0000000000000008
	w20 = 0x00000001
	goto l0000000000492800
	// succ:  l0000000000492800
fn0000000000492644_exit:


// fn00000000004928E0
// Return size: 0
void fn00000000004928E0()
fn00000000004928E0_entry:
	// succ:  l00000000004928E0
l00000000004928E0:
	sp = fp
	sp = sp + -48
	Mem0[sp:word64] = x29
	sp = sp + 8
	Mem0[sp:word64] = x30
	x29 = x31 + 0x0000000000000000
	v8 = sp + 16
	Mem0[v8:word64] = x19
	v8 = v8 + 8
	Mem0[v8:word64] = x20
	x20 = 0x00000000004E1000
	v11 = sp + 32
	Mem0[v11:word64] = x21
	v11 = v11 + 8
	Mem0[v11:word64] = x22
	x20 = x20 + 0xFFFFFFFFFFFFFC60
	w22 = w0
	// succ:  l00000000004928FC
l00000000004928FC:
	w1 = Mem0[x20:word32]
	w1 = w1 | 0x00000040
	Mem0[x20:word32] = w1
	call rl_read_key (retsize: 0;)
	w1 = Mem0[x20:word32]
	w21 = w0 & 0xFFFFFFDF
	w1 = w1 & 0xFFFFFFBF
	Mem0[x20:word32] = w1
	w31 = w21 - 0x00000059
	NZCV = cond(w31)
	w19 = w0
	branch Test(EQ,Z) l000000000049298C
	// succ:  l0000000000492928 l000000000049298C
l0000000000492928:
	w31 = w0 - 0x00000020
	NZCV = cond(w31)
	branch Test(EQ,Z) l000000000049298C
	// succ:  l0000000000492930 l000000000049298C
l0000000000492930:
	w31 = w21 - 0x0000004E
	NZCV = cond(w31)
	branch Test(EQ,Z) l0000000000492978
	// succ:  l0000000000492938 l0000000000492978
l0000000000492938:
	w31 = w0 - 0x0000007F
	NZCV = cond(w31)
	branch Test(EQ,Z) l0000000000492978
	// succ:  l0000000000492940 l0000000000492978
l0000000000492940:
	branch (w19 & 0x00000000) == 0x00000000 l0000000000492970
	// succ:  l0000000000492944 l0000000000492970
l0000000000492944:
	w31 = w19 - 0x00000007
	NZCV = cond(w31)
	branch Test(EQ,Z) l0000000000492970
	// succ:  l000000000049294C l0000000000492970
l000000000049294C:
	branch w22 == 0x00000000 l0000000000492968
	// succ:  l0000000000492950 l0000000000492968
l0000000000492950:
	w31 = w19 - 0x0000000D
	NZCV = cond(w31)
	branch Test(EQ,Z) l00000000004929A0
	// succ:  l0000000000492958 l00000000004929A0
l0000000000492958:
	w31 = w19 - 0x0000000A
	NZCV = cond(w31)
	branch Test(EQ,Z) l00000000004929A0
	// succ:  l0000000000492960 l00000000004929A0
l0000000000492960:
	w31 = w21 - 0x00000051
	NZCV = cond(w31)
	branch Test(EQ,Z) l0000000000492978
	// succ:  l0000000000492968 l0000000000492978
l0000000000492968:
	call rl_ding (retsize: 0;)
	goto l00000000004928FC
	// succ:  l00000000004928FC
l0000000000492970:
	call _rl_abort_internal (retsize: 0;)
	goto l000000000049294C
	// succ:  l000000000049294C
l0000000000492978:
	w0 = 0x00000000
	// succ:  l000000000049297C
l000000000049297C:
	v22 = sp + 16
	x19 = Mem0[v22:word64]
	v22 = v22 + 8
	x20 = Mem0[v22:word64]
	v23 = sp + 32
	x21 = Mem0[v23:word64]
	v23 = v23 + 8
	x22 = Mem0[v23:word64]
	x29 = Mem0[sp:word64]
	sp = sp + 8
	x30 = Mem0[sp:word64]
	sp = sp + 48
	return
	// succ:  fn00000000004928E0_exit
l000000000049298C:
	w0 = 0x00000001
	v20 = sp + 16
	x19 = Mem0[v20:word64]
	v20 = v20 + 8
	x20 = Mem0[v20:word64]
	v21 = sp + 32
	x21 = Mem0[v21:word64]
	v21 = v21 + 8
	x22 = Mem0[v21:word64]
	x29 = Mem0[sp:word64]
	sp = sp + 8
	x30 = Mem0[sp:word64]
	sp = sp + 48
	return
	// succ:  fn00000000004928E0_exit
l00000000004929A0:
	w0 = 0x00000002
	goto l000000000049297C
	// succ:  l000000000049297C
fn00000000004928E0_exit:


// fn00000000004929A8
// Return size: 0
void fn00000000004929A8()
fn00000000004929A8_entry:
	// succ:  l00000000004929A8
l00000000004929A8:
	sp = fp
	sp = sp + -32
	Mem0[sp:word64] = x29
	sp = sp + 8
	Mem0[sp:word64] = x30
	x29 = x31 + 0x0000000000000000
	v8 = sp + 16
	Mem0[v8:word64] = x19
	v8 = v8 + 8
	Mem0[v8:word64] = x20
	x19 = 0x00000000004E1000
	x3 = Mem0[x19 + 3200:word64]
	w20 = w0
	x0 = 0x00000000004C3000
	x1 = 0x0000000000000001
	x2 = 0x0000000000000008
	x0 = x0 + 0xFFFFFFFFFFFFFFA8
	fwrite(x0, x1, x2, x3)
	sp = sp + 0xFFFFFFFFFFFFFFF8
	x0 = Mem0[x19 + 3200:word64]
	fflush(x0)
	sp = sp + 0xFFFFFFFFFFFFFFF8
	x1 = 0x00000000004E1000
	w1 = Mem0[x1 + 3168:word32]
	branch (w1 & 0x00000000) == 0x00000000 l00000000004929FC
	// succ:  l00000000004929E8 l00000000004929FC
l00000000004929E8:
	call _rl_erase_entire_line (retsize: 0;)
	w0 = 0x00000000
	// succ:  l00000000004929F0
l00000000004929F0:
	v16 = sp + 16
	x19 = Mem0[v16:word64]
	v16 = v16 + 8
	x20 = Mem0[v16:word64]
	x29 = Mem0[sp:word64]
	sp = sp + 8
	x30 = Mem0[sp:word64]
	sp = sp + 32
	return
	// succ:  fn00000000004929A8_exit
l00000000004929FC:
	w0 = 0x00000001
	call fn00000000004928E0 (retsize: 0;)
	w19 = w0
	call _rl_erase_entire_line (retsize: 0;)
	branch w19 == 0x00000000 l0000000000492A28
	// succ:  l0000000000492A10 l0000000000492A28
l0000000000492A10:
	w31 = w19 - 0x00000002
	NZCV = cond(w31)
	w0 = w20 - 0x00000001
l0000000000492A28:
	w0 = 0xFFFFFFFF
	goto l00000000004929F0
	// succ:  l00000000004929F0
fn00000000004929A8_exit:


// rl_completion_mode
// Return size: 0
void rl_completion_mode()
rl_completion_mode_entry:
	// succ:  l0000000000492A30
l0000000000492A30:
	sp = fp
	x1 = 0x00000000004E1000
	x2 = Mem0[x1 + 3248:word64]
	x1 = 0x00000000004E1000
	x31 = x2 - x0
	NZCV = cond(x31)
	branch Test(EQ,Z) l0000000000492A6C
	// succ:  l0000000000492A44 l0000000000492A6C
l0000000000492A44:
	x1 = x1 + 0xFFFFFFFFFFFFFF10
	w2 = Mem0[x1 + 140:word32]
	w0 = 0x00000021
	branch w2 != 0x00000000 l0000000000492A68
	// succ:  l0000000000492A54 l0000000000492A68
l0000000000492A54:
	w0 = Mem0[x1 + 144:word32]
	w1 = 0x00000009
	NZCV = cond(w0 - w31)
	w0 = 0x00000040
l0000000000492A68:
	return
	// succ:  rl_completion_mode_exit
l0000000000492A6C:
	x0 = x1 + 0xFFFFFFFFFFFFFF10
	w2 = Mem0[x0 + 136:word32]
	w0 = 0x0000003F
	branch w2 != 0x00000000 l0000000000492A44
	// succ:  l0000000000492A7C l0000000000492A44
l0000000000492A7C:
	return
	// succ:  rl_completion_mode_exit
rl_completion_mode_exit:


// _rl_reset_completion_state
// Return size: 0
void _rl_reset_completion_state()
_rl_reset_completion_state_entry:
	// succ:  l0000000000492A80
l0000000000492A80:
	sp = fp
	x0 = 0x00000000004E4000
	Mem0[x0 + 204:word32] = 0x00000000
	x0 = 0x00000000004E4000
	Mem0[x0 + 188:word32] = 0x00000000
	return
	// succ:  _rl_reset_completion_state_exit
_rl_reset_completion_state_exit:


// _rl_find_completion_word
// Return size: 0
void _rl_find_completion_word()
_rl_find_completion_word_entry:
	// succ:  l0000000000492A94
l0000000000492A94:
	sp = fp
	sp = sp + -144
	Mem0[sp:word64] = x29
	sp = sp + 8
	Mem0[sp:word64] = x30
	x29 = x31 + 0x0000000000000000
	v8 = sp + 80
	Mem0[v8:word64] = x27
	v8 = v8 + 8
	Mem0[v8:word64] = x28
	x28 = 0x00000000004E1000
	x2 = x28 + 0xFFFFFFFFFFFFFF10
	x2 = Mem0[x2 + 152:word64]
	v12 = sp + 32
	Mem0[v12:word64] = x21
	v12 = v12 + 8
	Mem0[v12:word64] = x22
	x27 = 0x00000000004E4000
	v15 = sp + 16
	Mem0[v15:word64] = x19
	v15 = v15 + 8
	Mem0[v15:word64] = x20
	v18 = sp + 48
	Mem0[v18:word64] = x23
	v18 = v18 + 8
	Mem0[v18:word64] = x24
	v21 = sp + 64
	Mem0[v21:word64] = x25
	v21 = v21 + 8
	Mem0[v21:word64] = x26
	Mem0[x29 + 112:word64] = x0
	Mem0[x29 + 104:word64] = x1
	w22 = Mem0[x27 + 136:word32]
	branch x2 == 0x0000000000000000 l0000000000492C8C
	// succ:  l0000000000492AD0 l0000000000492C8C
l0000000000492AD0:
	call x2 (retsize: 0;)
	Mem0[x29 + 128:word64] = x0
	branch x0 == 0x0000000000000000 l0000000000492C8C
	// succ:  l0000000000492ADC l0000000000492C8C
l0000000000492ADC:
	x0 = x28 + 0xFFFFFFFFFFFFFF10
	x1 = Mem0[x0:word64]
	branch x1 == 0x0000000000000000 l0000000000492DFC
	// succ:  l0000000000492AE8 l0000000000492DFC
l0000000000492AE8:
	NZCV = cond(w22 - w31)
	branch Test(LE,ZCV) l0000000000492DFC
	// succ:  l0000000000492AF0 l0000000000492DFC
l0000000000492AF0:
	w20 = 0x00000000
	x1 = x27 + 0x0000000000000088
	x25 = 0x00000000004E2000
	w21 = w20
	w26 = w20
	w19 = w20
	x24 = 0x00000000004E1000
	Mem0[x29 + 120:word64] = x1
	Mem0[x29 + 96:word64] = x0
	x25 = x25 + 0xFFFFFFFFFFFFFF80
	// succ:  l0000000000492B18
l0000000000492B18:
	branch w21 != 0x00000000 l0000000000492C58
	// succ:  l0000000000492B1C l0000000000492C58
l0000000000492B1C:
	w31 = w20 - 0x00000027
	NZCV = cond(w31)
	branch Test(EQ,Z) l0000000000492C60
	// succ:  l0000000000492B24 l0000000000492C60
l0000000000492B24:
	x2 = Mem0[x24 + 3256:word64]
	v34 = Mem0[x2 + (int64) ((int32) w19):byte]
	w23 = (word32) v34
	w31 = w23 - 0x0000005C
	NZCV = cond(w31)
	branch Test(EQ,Z) l0000000000492C80
	// succ:  l0000000000492B34 l0000000000492C80
l0000000000492B34:
	branch w20 != 0x00000000 l0000000000492C68
	// succ:  l0000000000492B38 l0000000000492C68
l0000000000492B38:
	x1 = Mem0[x29 + 96:word64]
	x0 = Mem0[x1:word64]
	w1 = w23
	strchr(x0, x1)
	sp = sp + 0xFFFFFFFFFFFFFFF8
	branch x0 == 0x0000000000000000 l0000000000492B70
	// succ:  l0000000000492B4C l0000000000492B70
l0000000000492B4C:
	x1 = Mem0[x29 + 120:word64]
	w0 = w19 + 0x00000001
	Mem0[x1:word32] = w0
	w31 = w23 - 0x00000027
	NZCV = cond(w31)
	branch Test(EQ,Z) l0000000000492D38
	// succ:  l0000000000492B60 l0000000000492D38
l0000000000492B60:
	w31 = w23 - 0x00000022
	NZCV = cond(w31)
	branch Test(EQ,Z) l0000000000492D44
	// succ:  l0000000000492B68 l0000000000492D44
l0000000000492B68:
	w26 = w26 | 0x00000008
	w20 = w23
	// succ:  l0000000000492B70
l0000000000492B70:
	__ctype_get_mb_cur_max()
	sp = sp + 0xFFFFFFFFFFFFFFF8
	x31 = x0 - 0x0000000000000001
	NZCV = cond(x31)
	branch Test(ULE,ZC) l0000000000492B84
	// succ:  l0000000000492B7C l0000000000492B84
l0000000000492B7C:
	w3 = Mem0[x25:word32]
	branch w3 == 0x00000000 l0000000000492C40
	// succ:  l0000000000492B84 l0000000000492C40
l0000000000492B84:
	w19 = w19 + 0x00000001
	// succ:  l0000000000492B88
l0000000000492B88:
	NZCV = cond(w19 - w22)
	branch Test(LT,NV) l0000000000492B18
	// succ:  l0000000000492B90 l0000000000492B18
l0000000000492B90:
	w2 = Mem0[x27 + 136:word32]
	NZCV = cond(w2 - w22)
	branch Test(EQ,Z) l0000000000492C9C
	// succ:  l0000000000492B9C l0000000000492C9C
l0000000000492B9C:
	x3 = Mem0[x24 + 3256:word64]
	w1 = w2
	v43 = Mem0[x3 + (int64) ((int32) w2):byte]
	w19 = (word32) v43
	// succ:  l0000000000492BA8
l0000000000492BA8:
	branch w19 == 0x00000000 l0000000000492C08
	// succ:  l0000000000492BAC l0000000000492C08
l0000000000492BAC:
	x0 = x28 + 0xFFFFFFFFFFFFFF10
	x2 = Mem0[x0 + 168:word64]
	branch x2 == 0x0000000000000000 l0000000000492D78
	// succ:  l0000000000492BB8 l0000000000492D78
l0000000000492BB8:
	branch w26 != 0x00000000 l0000000000492DA4
	// succ:  l0000000000492BBC l0000000000492DA4
l0000000000492BBC:
	x0 = Mem0[x29 + 128:word64]
	w1 = w19
	strchr(x0, x1)
	sp = sp + 0xFFFFFFFFFFFFFFF8
	branch x0 == 0x0000000000000000 l0000000000492DB0
	// succ:  l0000000000492BCC l0000000000492DB0
l0000000000492BCC:
	x0 = 0x00000000004DE000
	x0 = x0 + 0x0000000000000560
	x0 = Mem0[x0 + 40:word64]
	branch x0 == 0x0000000000000000 l0000000000492BE8
	// succ:  l0000000000492BDC l0000000000492BE8
l0000000000492BDC:
	w1 = w19
	strchr(x0, x1)
	sp = sp + 0xFFFFFFFFFFFFFFF8
	branch x0 != 0x0000000000000000 l0000000000492D60
	// succ:  l0000000000492BE8 l0000000000492D60
l0000000000492BE8:
	w21 = 0x00000000
	// succ:  l0000000000492BEC
l0000000000492BEC:
	x28 = x28 + 0xFFFFFFFFFFFFFF10
	x0 = Mem0[x28 + 176:word64]
	branch x0 == 0x0000000000000000 l0000000000492D90
	// succ:  l0000000000492BF8 l0000000000492D90
l0000000000492BF8:
	w1 = w19
	strchr(x0, x1)
	sp = sp + 0xFFFFFFFFFFFFFFF8
	w19 = w21
	branch x0 == 0x0000000000000000 l0000000000492D90
	// succ:  l0000000000492C08 l0000000000492D90
l0000000000492C08:
	x0 = Mem0[x29 + 112:word64]
	branch x0 == 0x0000000000000000 l0000000000492C14
	// succ:  l0000000000492C10 l0000000000492C14
l0000000000492C10:
	Mem0[x0:word32] = w26
	// succ:  l0000000000492C14
l0000000000492C14:
	x1 = Mem0[x29 + 104:word64]
	branch x1 == 0x0000000000000000 l0000000000492C20
	// succ:  l0000000000492C1C l0000000000492C20
l0000000000492C1C:
	Mem0[x1:word32] = w19
	// succ:  l0000000000492C20
l0000000000492C20:
	w0 = w20
	v48 = sp + 32
	x21 = Mem0[v48:word64]
	v48 = v48 + 8
	x22 = Mem0[v48:word64]
	v49 = sp + 16
	x19 = Mem0[v49:word64]
	v49 = v49 + 8
	x20 = Mem0[v49:word64]
	v50 = sp + 48
	x23 = Mem0[v50:word64]
	v50 = v50 + 8
	x24 = Mem0[v50:word64]
	v51 = sp + 64
	x25 = Mem0[v51:word64]
	v51 = v51 + 8
	x26 = Mem0[v51:word64]
	v52 = sp + 80
	x27 = Mem0[v52:word64]
	v52 = v52 + 8
	x28 = Mem0[v52:word64]
	x29 = Mem0[sp:word64]
	sp = sp + 8
	x30 = Mem0[sp:word64]
	sp = sp + 144
	return
	// succ:  _rl_find_completion_word_exit
l0000000000492C40:
	x0 = Mem0[x24 + 3256:word64]
	w1 = w19
	w2 = 0x00000001
	call _rl_find_next_mbchar (retsize: 0;)
	w19 = w0
	goto l0000000000492B88
	// succ:  l0000000000492B88
l0000000000492C58:
	w21 = 0x00000000
	goto l0000000000492B70
	// succ:  l0000000000492B70
l0000000000492C60:
	x0 = Mem0[x24 + 3256:word64]
	v53 = Mem0[x0 + (int64) ((int32) w19):byte]
	w23 = (word32) v53
	// succ:  l0000000000492C68
l0000000000492C68:
	NZCV = cond(w20 - w23)
	branch Test(NE,Z) l0000000000492B70
	// succ:  l0000000000492C70 l0000000000492B70
l0000000000492C70:
	x0 = Mem0[x29 + 120:word64]
	w20 = 0x00000000
	Mem0[x0:word32] = w22
	goto l0000000000492B70
	// succ:  l0000000000492B70
l0000000000492C80:
	w26 = w26 | 0x00000004
	w21 = 0x00000001
	goto l0000000000492B70
	// succ:  l0000000000492B70
l0000000000492C8C:
	x0 = x28 + 0xFFFFFFFFFFFFFF10
	x0 = Mem0[x0 + 160:word64]
	Mem0[x29 + 128:word64] = x0
	goto l0000000000492ADC
	// succ:  l0000000000492ADC
l0000000000492C9C:
	branch w20 != 0x00000000 l0000000000492D50
	// succ:  l0000000000492CA0 l0000000000492D50
l0000000000492CA0:
	x0 = 0x00000000004E2000
	x0 = x0 + 0xFFFFFFFFFFFFFF80
	Mem0[x29 + 120:word64] = x0
	x0 = x28 + 0xFFFFFFFFFFFFFF10
	x23 = x27 + 0x0000000000000088
	Mem0[x29 + 136:word64] = x0
	// succ:  l0000000000492CB8
l0000000000492CB8:
	__ctype_get_mb_cur_max()
	sp = sp + 0xFFFFFFFFFFFFFFF8
	x31 = x0 - 0x0000000000000001
	NZCV = cond(x31)
	branch Test(ULE,ZC) l0000000000492CD0
	// succ:  l0000000000492CC4 l0000000000492CD0
l0000000000492CC4:
	x1 = Mem0[x29 + 120:word64]
	w2 = Mem0[x1:word32]
	branch w2 == 0x00000000 l0000000000492DB8
	// succ:  l0000000000492CD0 l0000000000492DB8
l0000000000492CD0:
	w21 = Mem0[x23:word32]
	w21 = w21 - 0x00000001
	// succ:  l0000000000492CD8
l0000000000492CD8:
	x1 = x24 + 0xFFFFFFFFFFFFFCB8
	Mem0[x23:word32] = w21
	Mem0[x29 + 96:word64] = x1
	x0 = Mem0[x29 + 128:word64]
	branch w21 == 0x00000000 l0000000000492DCC
	// succ:  l0000000000492CEC l0000000000492DCC
l0000000000492CEC:
	x25 = Mem0[x24 + 3256:word64]
	v44 = Mem0[x25 + (int64) ((int32) w21):byte]
	w19 = (word32) v44
	w1 = w19
	strchr(x0, x1)
	sp = sp + 0xFFFFFFFFFFFFFFF8
	w1 = w21
	branch x0 == 0x0000000000000000 l0000000000492CB8
	// succ:  l0000000000492D04 l0000000000492CB8
l0000000000492D04:
	x0 = Mem0[x29 + 136:word64]
	x20 = Mem0[x0 + 168:word64]
	x0 = x25
	branch x20 == 0x0000000000000000 l0000000000492DF0
	// succ:  l0000000000492D14 l0000000000492DF0
l0000000000492D14:
	branch w26 == 0x00000000 l0000000000492DE0
	// succ:  l0000000000492D18 l0000000000492DE0
l0000000000492D18:
	call x20 (retsize: 0;)
	branch w0 != 0x00000000 l0000000000492CB8
	// succ:  l0000000000492D20 l0000000000492CB8
l0000000000492D20:
	x1 = Mem0[x29 + 96:word64]
	w20 = w0
	x3 = Mem0[x1:word64]
	w1 = Mem0[x23:word32]
	v45 = Mem0[x3 + (int64) ((int32) w1):byte]
	w19 = (word32) v45
	goto l0000000000492BA8
	// succ:  l0000000000492BA8
l0000000000492D38:
	w26 = w26 | 0x00000001
	w20 = w23
	goto l0000000000492B70
	// succ:  l0000000000492B70
l0000000000492D44:
	w26 = w26 | 0x00000002
	w20 = w23
	goto l0000000000492B70
	// succ:  l0000000000492B70
l0000000000492D50:
	x3 = Mem0[x24 + 3256:word64]
	w1 = w22
	v46 = Mem0[x3 + (int64) ((int32) w22):byte]
	w19 = (word32) v46
	goto l0000000000492BA8
	// succ:  l0000000000492BA8
l0000000000492D60:
	w0 = Mem0[x27 + 136:word32]
	w0 = w22 - w0
	w31 = w0 - 0x00000001
	NZCV = cond(w31)
	branch Test(LE,ZCV) l0000000000492BE8
	// succ:  l0000000000492D70 l0000000000492BE8
l0000000000492D70:
	w21 = w19
	goto l0000000000492BEC
	// succ:  l0000000000492BEC
l0000000000492D78:
	x0 = Mem0[x29 + 128:word64]
	w1 = w19
	strchr(x0, x1)
	sp = sp + 0xFFFFFFFFFFFFFFF8
	branch x0 != 0x0000000000000000 l0000000000492BCC
	// succ:  l0000000000492D88 l0000000000492BCC
l0000000000492D88:
	w19 = w0
	goto l0000000000492C08
	// succ:  l0000000000492C08
l0000000000492D90:
	w0 = Mem0[x27 + 136:word32]
	w19 = w21
	w0 = w0 + 0x00000001
	Mem0[x27 + 136:word32] = w0
	goto l0000000000492C08
	// succ:  l0000000000492C08
l0000000000492DA4:
	x0 = x3
	call x2 (retsize: 0;)
	branch w0 == 0x00000000 l0000000000492BBC
	// succ:  l0000000000492DB0 l0000000000492BBC
l0000000000492DB0:
	w19 = 0x00000000
	goto l0000000000492C08
	// succ:  l0000000000492C08
l0000000000492DB8:
	x0 = Mem0[x24 + 3256:word64]
	w1 = Mem0[x23:word32]
	call _rl_find_prev_mbchar (retsize: 0;)
	w21 = w0
	goto l0000000000492CD8
	// succ:  l0000000000492CD8
l0000000000492DCC:
	x3 = Mem0[x24 + 3256:word64]
	w1 = w21
	v47 = Mem0[x3:byte]
	w19 = (word32) v47
	w20 = w21
	goto l0000000000492BA8
	// succ:  l0000000000492BA8
l0000000000492DE0:
	w1 = w21
	x3 = x25
	w20 = w26
	goto l0000000000492BA8
	// succ:  l0000000000492BA8
l0000000000492DF0:
	w1 = w21
	x3 = x25
	goto l0000000000492BA8
	// succ:  l0000000000492BA8
l0000000000492DFC:
	w1 = Mem0[x27 + 136:word32]
	NZCV = cond(w1 - w22)
	branch Test(EQ,Z) l0000000000492E20
	// succ:  l0000000000492E08 l0000000000492E20
l0000000000492E08:
	x0 = 0x00000000004E1000
	x3 = Mem0[x0 + 3256:word64]
	w20 = 0x00000000
	v38 = Mem0[x3 + (int64) ((int32) w1):byte]
	w19 = (word32) v38
	w26 = w20
	goto l0000000000492BA8
	// succ:  l0000000000492BA8
l0000000000492E20:
	w26 = 0x00000000
	x24 = 0x00000000004E1000
	goto l0000000000492CA0
	// succ:  l0000000000492CA0
_rl_find_completion_word_exit:


// rl_display_match_list
// Return size: 0
void rl_display_match_list()
rl_display_match_list_entry:
	// succ:  l0000000000492E2C
l0000000000492E2C:
	sp = fp
	sp = sp + -144
	Mem0[sp:word64] = x29
	sp = sp + 8
	Mem0[sp:word64] = x30
	x29 = x31 + 0x0000000000000000
	v8 = sp + 32
	Mem0[v8:word64] = x21
	v8 = v8 + 8
	Mem0[v8:word64] = x22
	x21 = 0x00000000004E1000
	x3 = x21 + 0xFFFFFFFFFFFFFF10
	w4 = Mem0[x3 + 184:word32]
	v13 = sp + 48
	Mem0[v13:word64] = x23
	v13 = v13 + 8
	Mem0[v13:word64] = x24
	v16 = sp + 16
	Mem0[v16:word64] = x19
	v16 = v16 + 8
	Mem0[v16:word64] = x20
	v19 = sp + 64
	Mem0[v19:word64] = x25
	v19 = v19 + 8
	Mem0[v19:word64] = x26
	v22 = sp + 80
	Mem0[v22:word64] = x27
	v22 = v22 + 8
	Mem0[v22:word64] = x28
	NZCV = cond(w4 - w31)
	Mem0[x29 + 96:word32] = w1
	x24 = x0
	w22 = w2
	branch Test(LE,ZCV) l0000000000492EAC
	// succ:  l0000000000492E68 l0000000000492EAC
l0000000000492E68:
	w0 = Mem0[x3 + 8:word32]
	x19 = Mem0[x24:word64]
	branch w0 != 0x00000000 l000000000049321C
	// succ:  l0000000000492E74 l000000000049321C
l0000000000492E74:
	x0 = x19
	w1 = 0x0000002F
	strrchr(x0, x1)
	sp = sp + 0xFFFFFFFFFFFFFFF8
	x23 = x0
	branch x0 == 0x0000000000000000 l000000000049323C
	// succ:  l0000000000492E88 l000000000049323C
l0000000000492E88:
	call fn0000000000491CF4 (retsize: 0;)
	w20 = w0
	x0 = x23
	strlen(x0)
	sp = sp + 0xFFFFFFFFFFFFFFF8
	w27 = w0
	// succ:  l0000000000492E9C
l0000000000492E9C:
	x0 = x21 + 0xFFFFFFFFFFFFFF10
	w0 = Mem0[x0 + 184:word32]
	NZCV = cond(w0 - w20)
	branch Test(LT,NV) l0000000000493208
	// succ:  l0000000000492EAC l0000000000493208
l0000000000492EAC:
	w27 = 0x00000000
	// succ:  l0000000000492EB0
l0000000000492EB0:
	x1 = 0x00000000004DE000
	x0 = x1 + 0x0000000000000560
	w19 = Mem0[x0 + 48:word32]
	x20 = 0x00000000004E4000
	branch (w19 & 0x00000000) == 0x00000000 l0000000000492ED4
	// succ:  l0000000000492EC4 l0000000000492ED4
l0000000000492EC4:
	w1 = Mem0[x20 + 328:word32]
	w0 = w19
	NZCV = cond(w19 - w1)
	branch Test(LE,ZCV) l0000000000492EFC
	// succ:  l0000000000492ED4 l0000000000492EFC
l0000000000492ED4:
	x0 = 0x00000000004AC000
	x0 = x0 + 0x0000000000000770
	call getenv (retsize: 0;)
	branch x0 == 0x0000000000000000 l0000000000492EEC
	// succ:  l0000000000492EE4 l0000000000492EEC
l0000000000492EE4:
	v36 = Mem0[x0:byte]
	w1 = (word32) v36
	branch w1 != 0x00000000 l0000000000493258
	// succ:  l0000000000492EEC l0000000000493258
l0000000000492EEC:
	branch (w19 & 0x00000000) == 0x00000000 l000000000049326C
	// succ:  l0000000000492EF0 l000000000049326C
l0000000000492EF0:
	w0 = Mem0[x20 + 328:word32]
	NZCV = cond(w19 - w0)
l0000000000492EFC:
	w22 = w22 + 0x00000002
	w26 = w0 / w22
	Mem0[x29 + 104:word32] = w22
	w31 = w26 - 0x00000001
	NZCV = cond(w31)
	branch Test(EQ,Z) l0000000000493284
	// succ:  l0000000000492F10 l0000000000493284
l0000000000492F10:
	w1 = w26 * w22
	w2 = Mem0[x20 + 328:word32]
	NZCV = cond(w1 - w0)
	w1 = (word32) Test(EQ,Z)
	NZCV = cond(w2 - w0)
	w26 = w26 - w1
	branch Test(GT,NZV) l0000000000493014
	// succ:  l0000000000492F2C l0000000000493014
l0000000000492F2C:
	branch w26 != 0x00000000 l000000000049328C
	// succ:  l0000000000492F30 l000000000049328C
l0000000000492F30:
	w25 = w26
	w26 = 0x00000001
	// succ:  l0000000000492F38
l0000000000492F38:
	x2 = 0x00000000004DE000
	x0 = x2 + 0x0000000000000560
	w1 = Mem0[x0 + 28:word32]
	branch w1 != 0x00000000 l0000000000492F50
	// succ:  l0000000000492F48 l0000000000492F50
l0000000000492F48:
	w0 = Mem0[x0 + 32:word32]
	branch w0 != 0x00000000 l0000000000493294
	// succ:  l0000000000492F50 l0000000000493294
l0000000000492F50:
	call rl_crlf (retsize: 0;)
	x0 = 0x00000000004E4000
	w0 = Mem0[x0 + 184:word32]
	branch w0 == 0x00000000 l000000000049307C
	// succ:  l0000000000492F60 l000000000049307C
l0000000000492F60:
	x1 = Mem0[x24 + 8:word64]
	branch x1 == 0x0000000000000000 l00000000004931EC
	// succ:  l0000000000492F68 l00000000004931EC
l0000000000492F68:
	x0 = 0x00000000004E4000
	x19 = 0x0000000000000001
	x0 = x0 + 0x0000000000000138
	x25 = x21 + 0xFFFFFFFFFFFFFF10
	x22 = 0x0000000000000002
	w23 = w19
	w28 = 0x00000000
	x21 = 0x00000000004E1000
	Mem0[x29 + 96:word64] = x0
	// succ:  l0000000000492F8C
l0000000000492F8C:
	w2 = Mem0[x25 + 8:word32]
	x0 = x1
	branch w2 == 0x00000000 l0000000000492FA4
	// succ:  l0000000000492F98 l0000000000492FA4
l0000000000492F98:
	Mem0[x29 + 136:word64] = x1
	call fn0000000000491C44 (retsize: 0;)
	x1 = Mem0[x29 + 136:word64]
	// succ:  l0000000000492FA4
l0000000000492FA4:
	w2 = w27
	call fn0000000000491DC8 (retsize: 0;)
	x19 = x19 + 0x0000000000000001
	x1 = Mem0[x24 + x19:word64]
	branch x1 == 0x0000000000000000 l0000000000492FF8
	// succ:  l0000000000492FB8 l0000000000492FF8
l0000000000492FB8:
	w31 = w26 - 0x00000001
	NZCV = cond(w31)
	branch Test(LE,ZCV) l0000000000492FCC
	// succ:  l0000000000492FC0 l0000000000492FCC
l0000000000492FC0:
	w1 = w23 / w26
	w1 = w23 - w1 * w26
	branch w1 == 0x00000000 l0000000000493024
	// succ:  l0000000000492FCC l0000000000493024
l0000000000492FCC:
	w1 = Mem0[x29 + 104:word32]
	w19 = 0x00000000
	w20 = w1 - w0
	NZCV = cond(w20 - w31)
	branch Test(LE,ZCV) l0000000000492FF8
	// succ:  l0000000000492FE0 l0000000000492FF8
l0000000000492FE0:
	x1 = Mem0[x21 + 3200:word64]
	w0 = 0x00000020
	_IO_putc(x0, x1)
	sp = sp + 0xFFFFFFFFFFFFFFF8
	w19 = w19 + 0x00000001
	NZCV = cond(w19 - w20)
	branch Test(NE,Z) l0000000000492FE0
	// succ:  l0000000000492FF8 l0000000000492FE0
l0000000000492FF8:
	x1 = Mem0[x24 + x22:word64]
	w23 = w23 + 0x00000001
	x2 = x22 + 0x0000000000000001
	branch x1 == 0x0000000000000000 l00000000004931EC
	// succ:  l0000000000493008 l00000000004931EC
l0000000000493008:
	x19 = x22
	x22 = x2
	goto l0000000000492F8C
	// succ:  l0000000000492F8C
l0000000000493014:
	branch (w26 & 0x00000000) == 0x00000000 l0000000000492F2C
	// succ:  l0000000000493018 l0000000000492F2C
l0000000000493018:
	w25 = 0x00000000
	w26 = 0x00000001
	goto l0000000000492F38
	// succ:  l0000000000492F38
l0000000000493024:
	call rl_crlf (retsize: 0;)
	x2 = 0x00000000004DE000
	x0 = x2 + 0x0000000000000560
	w0 = Mem0[x0 + 52:word32]
	w28 = w28 + 0x00000001
	branch w0 == 0x00000000 l0000000000492FF8
	// succ:  l000000000049303C l0000000000492FF8
l000000000049303C:
	x1 = Mem0[x29 + 96:word64]
	w0 = Mem0[x1:word32]
	w0 = w0 - 0x00000001
	NZCV = cond(w28 - w0)
	branch Test(LT,NV) l0000000000492FF8
	// succ:  l0000000000493050 l0000000000492FF8
l0000000000493050:
	w0 = w28
	call fn00000000004929A8 (retsize: 0;)
	w28 = w0
	branch (w0 & 0x00000000) == 0x00000000 l0000000000492FF8
	// succ:  l0000000000493060 l0000000000492FF8
l0000000000493060:
	v55 = sp + 16
	x19 = Mem0[v55:word64]
	v55 = v55 + 8
	x20 = Mem0[v55:word64]
	v56 = sp + 32
	x21 = Mem0[v56:word64]
	v56 = v56 + 8
	x22 = Mem0[v56:word64]
	v57 = sp + 48
	x23 = Mem0[v57:word64]
	v57 = v57 + 8
	x24 = Mem0[v57:word64]
	v58 = sp + 64
	x25 = Mem0[v58:word64]
	v58 = v58 + 8
	x26 = Mem0[v58:word64]
	v59 = sp + 80
	x27 = Mem0[v59:word64]
	v59 = v59 + 8
	x28 = Mem0[v59:word64]
	x29 = Mem0[sp:word64]
	sp = sp + 8
	x30 = Mem0[sp:word64]
	sp = sp + 144
	return
	// succ:  rl_display_match_list_exit
l000000000049307C:
	w1 = Mem0[x29 + 96:word32]
	w25 = w1 + w25
	w25 = w25 / w26
	NZCV = cond(w25 - w31)
	branch Test(LE,ZCV) l0000000000493060
	// succ:  l0000000000493090 l0000000000493060
l0000000000493090:
	Mem0[x29 + 120:word32] = w0
	x0 = 0x00000000004E4000
	x24 = x24 + 0x0000000000000008
	w2 = 0x00000001
	x0 = x0 + 0x0000000000000138
	x28 = x21 + 0xFFFFFFFFFFFFFF10
	Mem0[x29 + 112:word64] = x24
	Mem0[x29 + 108:word32] = w2
	x21 = 0x00000000004E1000
	Mem0[x29 + 128:word64] = x0
	// succ:  l00000000004930B8
l00000000004930B8:
	NZCV = cond(w26 - w31)
	branch Test(LE,ZCV) l000000000049315C
	// succ:  l00000000004930C0 l000000000049315C
l00000000004930C0:
	w1 = Mem0[x29 + 96:word32]
	w2 = Mem0[x29 + 108:word32]
	NZCV = cond(w1 - w2)
	branch Test(LT,NV) l000000000049315C
	// succ:  l00000000004930D0 l000000000049315C
l00000000004930D0:
	x0 = Mem0[x29 + 112:word64]
	x1 = Mem0[x0:word64]
	branch x1 == 0x0000000000000000 l000000000049315C
	// succ:  l00000000004930DC l000000000049315C
l00000000004930DC:
	x24 = x0 + (int64) ((int32) w25)
	w23 = w2 + w25
	w22 = 0x00000000
	// succ:  l00000000004930E8
l00000000004930E8:
	w2 = Mem0[x28 + 8:word32]
	x0 = x1
	branch w2 == 0x00000000 l0000000000493100
	// succ:  l00000000004930F4 l0000000000493100
l00000000004930F4:
	Mem0[x29 + 136:word64] = x1
	call fn0000000000491C44 (retsize: 0;)
	x1 = Mem0[x29 + 136:word64]
	// succ:  l0000000000493100
l0000000000493100:
	w2 = w27
	call fn0000000000491DC8 (retsize: 0;)
	w22 = w22 + 0x00000001
	NZCV = cond(w22 - w26)
	branch Test(EQ,Z) l000000000049315C
	// succ:  l0000000000493114 l000000000049315C
l0000000000493114:
	w1 = Mem0[x29 + 104:word32]
	w20 = w1 - w0
	NZCV = cond(w20 - w31)
	branch Test(LE,ZCV) l0000000000493140
	// succ:  l0000000000493124 l0000000000493140
l0000000000493124:
	w19 = 0x00000000
	// succ:  l0000000000493128
l0000000000493128:
	x1 = Mem0[x21 + 3200:word64]
	w0 = 0x00000020
	_IO_putc(x0, x1)
	sp = sp + 0xFFFFFFFFFFFFFFF8
	w19 = w19 + 0x00000001
	NZCV = cond(w19 - w20)
	branch Test(NE,Z) l0000000000493128
	// succ:  l0000000000493140 l0000000000493128
l0000000000493140:
	w0 = Mem0[x29 + 96:word32]
	NZCV = cond(w0 - w23)
	branch Test(LT,NV) l000000000049315C
	// succ:  l000000000049314C l000000000049315C
l000000000049314C:
	x1 = Mem0[x24:word64]
	w23 = w23 + w25
	x24 = x24 + (int64) ((int32) w25)
	branch x1 != 0x0000000000000000 l00000000004930E8
	// succ:  l000000000049315C l00000000004930E8
l000000000049315C:
	call rl_crlf (retsize: 0;)
	w1 = Mem0[x29 + 120:word32]
	x2 = 0x00000000004DE000
	x0 = x2 + 0x0000000000000560
	w1 = w1 + 0x00000001
	w0 = Mem0[x0 + 52:word32]
	Mem0[x29 + 120:word32] = w1
	branch w0 == 0x00000000 l00000000004931B0
	// succ:  l000000000049317C l00000000004931B0
l000000000049317C:
	x2 = Mem0[x29 + 128:word64]
	w0 = Mem0[x2:word32]
	w0 = w0 - 0x00000001
	NZCV = cond(w1 - w0)
	branch Test(LT,NV) l00000000004931B0
	// succ:  l0000000000493190 l00000000004931B0
l0000000000493190:
	w0 = Mem0[x29 + 108:word32]
	NZCV = cond(w25 - w0)
	branch Test(LE,ZCV) l00000000004931B0
	// succ:  l000000000049319C l00000000004931B0
l000000000049319C:
	w0 = w1
	call fn00000000004929A8 (retsize: 0;)
	Mem0[x29 + 120:word32] = w0
	w1 = w0
	branch (w1 & 0x00000000) == 0x00000000 l0000000000493060
	// succ:  l00000000004931B0 l0000000000493060
l00000000004931B0:
	w2 = Mem0[x29 + 108:word32]
	x0 = Mem0[x29 + 112:word64]
	w2 = w2 + 0x00000001
	x0 = x0 + 0x0000000000000008
	Mem0[x29 + 108:word32] = w2
	NZCV = cond(w25 - w2)
	Mem0[x29 + 112:word64] = x0
	branch Test(GE,NZV) l00000000004930B8
	// succ:  l00000000004931D0 l00000000004930B8
l00000000004931D0:
	v50 = sp + 16
	x19 = Mem0[v50:word64]
	v50 = v50 + 8
	x20 = Mem0[v50:word64]
	v51 = sp + 32
	x21 = Mem0[v51:word64]
	v51 = v51 + 8
	x22 = Mem0[v51:word64]
	v52 = sp + 48
	x23 = Mem0[v52:word64]
	v52 = v52 + 8
	x24 = Mem0[v52:word64]
	v53 = sp + 64
	x25 = Mem0[v53:word64]
	v53 = v53 + 8
	x26 = Mem0[v53:word64]
	v54 = sp + 80
	x27 = Mem0[v54:word64]
	v54 = v54 + 8
	x28 = Mem0[v54:word64]
	x29 = Mem0[sp:word64]
	sp = sp + 8
	x30 = Mem0[sp:word64]
	sp = sp + 144
	return
	// succ:  rl_display_match_list_exit
l00000000004931EC:
	v44 = sp + 16
	x19 = Mem0[v44:word64]
	v44 = v44 + 8
	x20 = Mem0[v44:word64]
	v45 = sp + 32
	x21 = Mem0[v45:word64]
	v45 = v45 + 8
	x22 = Mem0[v45:word64]
	v46 = sp + 48
	x23 = Mem0[v46:word64]
	v46 = v46 + 8
	x24 = Mem0[v46:word64]
	v47 = sp + 64
	x25 = Mem0[v47:word64]
	v47 = v47 + 8
	x26 = Mem0[v47:word64]
	v48 = sp + 80
	x27 = Mem0[v48:word64]
	v48 = v48 + 8
	x28 = Mem0[v48:word64]
	x29 = Mem0[sp:word64]
	sp = sp + 8
	x30 = Mem0[sp:word64]
	sp = sp + 144
	// succ:  l0000000000493204_thunk_rl_crlf
l0000000000493204_thunk_rl_crlf:
	call rl_crlf (retsize: 0;)
	return
	// succ:  rl_display_match_list_exit
l0000000000493208:
	w31 = w20 - 0x00000003
	NZCV = cond(w31)
	branch Test(LE,ZCV) l0000000000492EAC
	// succ:  l0000000000493210 l0000000000492EAC
l0000000000493210:
	w22 = w22 - w20
	w22 = w22 + 0x00000003
	goto l0000000000492EB0
	// succ:  l0000000000492EB0
l000000000049321C:
	x0 = x19
	call fn0000000000491C44 (retsize: 0;)
	x19 = x0
	x0 = x19
	w1 = 0x0000002F
	strrchr(x0, x1)
	sp = sp + 0xFFFFFFFFFFFFFFF8
	x23 = x0
	branch x0 != 0x0000000000000000 l0000000000492E88
	// succ:  l000000000049323C l0000000000492E88
l000000000049323C:
	x0 = x19
	call fn0000000000491CF4 (retsize: 0;)
	w20 = w0
	x0 = x19
	strlen(x0)
	sp = sp + 0xFFFFFFFFFFFFFFF8
	w27 = w0
	goto l0000000000492E9C
	// succ:  l0000000000492E9C
l0000000000493258:
	x1 = 0x0000000000000000
	w2 = 0x0000000A
	strtol(x0)
	sp = sp + 0xFFFFFFFFFFFFFFF8
	w19 = w0
	branch (w19 & 0x00000000) == 0x00000000 l0000000000492EF0
	// succ:  l000000000049326C l0000000000492EF0
l000000000049326C:
	w0 = Mem0[x20 + 328:word32]
	w22 = w22 + 0x00000002
	w26 = w0 / w22
	Mem0[x29 + 104:word32] = w22
	w31 = w26 - 0x00000001
	NZCV = cond(w31)
	branch Test(NE,Z) l0000000000492F10
	// succ:  l0000000000493284 l0000000000492F10
l0000000000493284:
	w25 = 0x00000000
	goto l0000000000492F38
	// succ:  l0000000000492F38
l000000000049328C:
	w25 = w26 - 0x00000001
	goto l0000000000492F38
	// succ:  l0000000000492F38
l0000000000493294:
	v49 = Mem0[x29 + 48:int32]
	x1 = (word64) v49
	x3 = 0x000000000049E000
	x0 = x24 + 0x0000000000000008
	x2 = 0x0000000000000008
	x3 = x3 + 0x00000000000000CC
	call qsort (retsize: 0;)
	goto l0000000000492F50
	// succ:  l0000000000492F50
rl_display_match_list_exit:


// fn00000000004932B0
// Return size: 0
void fn00000000004932B0()
fn00000000004932B0_entry:
	// succ:  l00000000004932B0
l00000000004932B0:
	sp = fp
	sp = sp + -80
	Mem0[sp:word64] = x29
	sp = sp + 8
	Mem0[sp:word64] = x30
	x29 = x31 + 0x0000000000000000
	v8 = sp + 48
	Mem0[v8:word64] = x23
	v8 = v8 + 8
	Mem0[v8:word64] = x24
	x24 = x0
	x0 = 0x00000000004E2000
	w0 = Mem0[x0 + 336:word32]
	v13 = sp + 16
	Mem0[v13:word64] = x19
	v13 = v13 + 8
	Mem0[v13:word64] = x20
	v16 = sp + 32
	Mem0[v16:word64] = x21
	v16 = v16 + 8
	Mem0[v16:word64] = x22
	Mem0[sp + 64:word64] = x25
	call _rl_move_vert (retsize: 0;)
	x19 = Mem0[x24 + 8:word64]
	branch x19 == 0x0000000000000000 l00000000004933B0
	// succ:  l00000000004932E0 l00000000004933B0
l00000000004932E0:
	x25 = 0x00000000004E1000
	x22 = x24 + 0x0000000000000010
	w21 = 0x00000001
	w20 = 0x00000000
	x23 = x25 + 0xFFFFFFFFFFFFFF10
	w1 = Mem0[x23 + 8:word32]
	x0 = x19
	branch w1 == 0x00000000 l0000000000493308
	// succ:  l0000000000493300 l0000000000493308
l0000000000493300:
	call fn0000000000491C44 (retsize: 0;)
	x19 = x0
	// succ:  l0000000000493308
l0000000000493308:
	x0 = x19
	call fn0000000000491CF4 (retsize: 0;)
	x19 = Mem0[x22:word64]
	x22 = x22 + 8
	NZCV = cond(w20 - w0)
l00000000004933B0:
	x0 = 0x00000000004E1000
	x0 = x0 + 0xFFFFFFFFFFFFFF10
	w0 = Mem0[x0 + 8:word32]
	x19 = Mem0[x24:word64]
	branch w0 == 0x00000000 l00000000004933D0
	// succ:  l00000000004933C4 l00000000004933D0
l00000000004933C4:
	x0 = x19
	call fn0000000000491C44 (retsize: 0;)
	x19 = x0
	// succ:  l00000000004933D0
l00000000004933D0:
	call rl_crlf (retsize: 0;)
	x1 = Mem0[x24:word64]
	x0 = x19
	w2 = 0x00000000
	call fn0000000000491DC8 (retsize: 0;)
	call rl_crlf (retsize: 0;)
	call rl_forced_update_display (retsize: 0;)
	w1 = 0x00000001
	x0 = 0x00000000004E2000
	v23 = sp + 16
	x19 = Mem0[v23:word64]
	v23 = v23 + 8
	x20 = Mem0[v23:word64]
	v24 = sp + 32
	x21 = Mem0[v24:word64]
	v24 = v24 + 8
	x22 = Mem0[v24:word64]
	v25 = sp + 48
	x23 = Mem0[v25:word64]
	v25 = v25 + 8
	x24 = Mem0[v25:word64]
	x25 = Mem0[sp + 64:word64]
	Mem0[x0 + 540:word32] = w1
	x29 = Mem0[sp:word64]
	sp = sp + 8
	x30 = Mem0[sp:word64]
	sp = sp + 80
	return
	// succ:  fn00000000004932B0_exit
fn00000000004932B0_exit:


// _rl_free_match_list
// Return size: 0
void _rl_free_match_list()
_rl_free_match_list_entry:
	// succ:  l0000000000493464
l0000000000493464:
	sp = fp
	sp = sp + -32
	Mem0[sp:word64] = x29
	sp = sp + 8
	Mem0[sp:word64] = x30
	x29 = x31 + 0x0000000000000000
	v8 = sp + 16
	Mem0[v8:word64] = x19
	v8 = v8 + 8
	Mem0[v8:word64] = x20
	x20 = x0
	branch x0 == 0x0000000000000000 l00000000004934A0
	// succ:  l0000000000493478 l00000000004934A0
l0000000000493478:
	x19 = x0
	x0 = Mem0[x19:word64]
	x19 = x19 + 8
	branch x0 == 0x0000000000000000 l0000000000493490
	// succ:  l0000000000493484 l0000000000493490
l0000000000493484:
	call xfree (retsize: 0;)
	x0 = Mem0[x19:word64]
	x19 = x19 + 8
	branch x0 != 0x0000000000000000 l0000000000493484
	// succ:  l0000000000493490 l0000000000493484
l0000000000493490:
	x0 = x20
	v10 = sp + 16
	x19 = Mem0[v10:word64]
	v10 = v10 + 8
	x20 = Mem0[v10:word64]
	x29 = Mem0[sp:word64]
	sp = sp + 8
	x30 = Mem0[sp:word64]
	sp = sp + 32
	// succ:  l000000000049349C_thunk_xfree
l000000000049349C_thunk_xfree:
	call xfree (retsize: 0;)
	return
	// succ:  _rl_free_match_list_exit
l00000000004934A0:
	v11 = sp + 16
	x19 = Mem0[v11:word64]
	v11 = v11 + 8
	x20 = Mem0[v11:word64]
	x29 = Mem0[sp:word64]
	sp = sp + 8
	x30 = Mem0[sp:word64]
	sp = sp + 32
	return
	// succ:  _rl_free_match_list_exit
_rl_free_match_list_exit:


// rl_completion_matches
// Return size: 0
void rl_completion_matches()
rl_completion_matches_entry:
	// succ:  l00000000004934AC
l00000000004934AC:
	sp = fp
	sp = sp + -80
	Mem0[sp:word64] = x29
	sp = sp + 8
	Mem0[sp:word64] = x30
	x29 = x31 + 0x0000000000000000
	v6 = sp + 48
	Mem0[v6:word64] = x23
	v6 = v6 + 8
	Mem0[v6:word64] = x24
	x23 = x0
	x0 = 0x0000000000000058
	v10 = sp + 16
	Mem0[v10:word64] = x19
	v10 = v10 + 8
	Mem0[v10:word64] = x20
	v13 = sp + 64
	Mem0[v13:word64] = x25
	v13 = v13 + 8
	Mem0[v13:word64] = x26
	v16 = sp + 32
	Mem0[v16:word64] = x21
	v16 = v16 + 8
	Mem0[v16:word64] = x22
	x26 = 0x00000000004E2000
	x25 = x1
	call xmalloc (retsize: 0;)
	x22 = x0
	w0 = Mem0[x26 + 2676:word32]
	Mem0[x22 + 8:word64] = 0x0000000000000000
	w0 = w0 + 0x00000001
	Mem0[x26 + 2676:word32] = w0
	x20 = 0x0000000000000008
	w19 = 0x00000000
	w24 = 0x0000000A
	goto l0000000000493508
	// succ:  l0000000000493508
l00000000004934FC:
	Mem0[x22 + x20:word64] = x21
	x20 = x20 + 0x0000000000000008
	Mem0[x22 + x20:word64] = 0x0000000000000000
	// succ:  l0000000000493508
l0000000000493508:
	w1 = w19
	x0 = x23
	call x25 (retsize: 0;)
	x21 = x0
	branch x0 == 0x0000000000000000 l0000000000493540
	// succ:  l000000000049351C l0000000000493540
l000000000049351C:
	w19 = w19 + 0x00000001
	NZCV = cond(w19 - w24)
	branch Test(NE,Z) l00000000004934FC
	// succ:  l0000000000493528 l00000000004934FC
l0000000000493528:
	x0 = x22
	x1 = x20 + 0x0000000000000058
	call xrealloc (retsize: 0;)
	x22 = x0
	w24 = w19 + 0x0000000A
	goto l00000000004934FC
	// succ:  l00000000004934FC
l0000000000493540:
	w0 = Mem0[x26 + 2676:word32]
	NZCV = cond(w0 - w31)
	branch Test(LE,ZCV) l0000000000493558
	// succ:  l000000000049354C l0000000000493558
l000000000049354C:
	w0 = w0 - 0x00000001
	x1 = 0x00000000004E2000
	Mem0[x1 + 2676:word32] = w0
	// succ:  l0000000000493558
l0000000000493558:
	x0 = x22
	branch w19 == 0x00000000 l0000000000493588
	// succ:  l0000000000493560 l0000000000493588
l0000000000493560:
	w1 = w19
	x2 = x23
	call fn000000000049217C (retsize: 0;)
	x0 = x22
	v29 = sp + 16
	x19 = Mem0[v29:word64]
	v29 = v29 + 8
	x20 = Mem0[v29:word64]
	v30 = sp + 32
	x21 = Mem0[v30:word64]
	v30 = v30 + 8
	x22 = Mem0[v30:word64]
	v31 = sp + 48
	x23 = Mem0[v31:word64]
	v31 = v31 + 8
	x24 = Mem0[v31:word64]
	v32 = sp + 64
	x25 = Mem0[v32:word64]
	v32 = v32 + 8
	x26 = Mem0[v32:word64]
	x29 = Mem0[sp:word64]
	sp = sp + 8
	x30 = Mem0[sp:word64]
	sp = sp + 80
	return
	// succ:  rl_completion_matches_exit
l0000000000493588:
	call xfree (retsize: 0;)
	x22 = 0x0000000000000000
	x0 = x22
	v33 = sp + 16
	x19 = Mem0[v33:word64]
	v33 = v33 + 8
	x20 = Mem0[v33:word64]
	v34 = sp + 32
	x21 = Mem0[v34:word64]
	v34 = v34 + 8
	x22 = Mem0[v34:word64]
	v35 = sp + 48
	x23 = Mem0[v35:word64]
	v35 = v35 + 8
	x24 = Mem0[v35:word64]
	v36 = sp + 64
	x25 = Mem0[v36:word64]
	v36 = v36 + 8
	x26 = Mem0[v36:word64]
	x29 = Mem0[sp:word64]
	sp = sp + 8
	x30 = Mem0[sp:word64]
	sp = sp + 80
	return
	// succ:  rl_completion_matches_exit
rl_completion_matches_exit:


// fn00000000004935AC
// Return size: 0
void fn00000000004935AC()
fn00000000004935AC_entry:
	// succ:  l00000000004935AC
l00000000004935AC:
	sp = fp
	sp = sp + -64
	Mem0[sp:word64] = x29
	sp = sp + 8
	Mem0[sp:word64] = x30
	x29 = x31 + 0x0000000000000000
	v8 = sp + 16
	Mem0[v8:word64] = x19
	v8 = v8 + 8
	Mem0[v8:word64] = x20
	x20 = 0x00000000004E1000
	x6 = x20 + 0xFFFFFFFFFFFFFF10
	x7 = 0x00000000004E4000
	Mem0[x7 + 204:word32] = w4
	x6 = Mem0[x6 + 208:word64]
	x4 = 0x00000000004E4000
	Mem0[sp + 32:word64] = x21
	Mem0[x4 + 188:word32] = w5
	x21 = x0
	branch x6 == 0x0000000000000000 l0000000000493638
	// succ:  l00000000004935E0 l0000000000493638
l00000000004935E0:
	x19 = 0x00000000004E2000
	w4 = Mem0[x19 + 2676:word32]
	Mem0[x29 + 48:word64] = x3
	w4 = w4 + 0x00000001
	Mem0[x19 + 2676:word32] = w4
	call x6 (retsize: 0;)
	w2 = Mem0[x19 + 2676:word32]
	x3 = Mem0[x29 + 48:word64]
	NZCV = cond(w2 - w31)
	branch Test(LE,ZCV) l0000000000493610
	// succ:  l0000000000493608 l0000000000493610
l0000000000493608:
	w2 = w2 - 0x00000001
	Mem0[x19 + 2676:word32] = w2
	// succ:  l0000000000493610
l0000000000493610:
	branch x0 == 0x0000000000000000 l000000000049362C
	// succ:  l0000000000493614 l000000000049362C
l0000000000493614:
	x20 = x20 + 0xFFFFFFFFFFFFFF10
	Mem0[x20 + 216:word32] = 0x00000000
	x21 = Mem0[sp + 32:word64]
	v35 = sp + 16
	x19 = Mem0[v35:word64]
	v35 = v35 + 8
	x20 = Mem0[v35:word64]
	x29 = Mem0[sp:word64]
	sp = sp + 8
	x30 = Mem0[sp:word64]
	sp = sp + 64
	return
	// succ:  fn00000000004935AC_exit
l000000000049362C:
	x1 = x20 + 0xFFFFFFFFFFFFFF10
	w1 = Mem0[x1 + 216:word32]
	branch w1 != 0x00000000 l0000000000493614
	// succ:  l0000000000493638 l0000000000493614
l0000000000493638:
	x0 = x21
	v21 = sp + 16
	x19 = Mem0[v21:word64]
	v21 = v21 + 8
	x20 = Mem0[v21:word64]
	x21 = Mem0[sp + 32:word64]
	x29 = Mem0[sp:word64]
	sp = sp + 8
	x30 = Mem0[sp:word64]
	sp = sp + 64
	x1 = x3
	// succ:  l000000000049364C_thunk_rl_completion_matches
l000000000049364C_thunk_rl_completion_matches:
	call rl_completion_matches (retsize: 0;)
	return
	// succ:  fn00000000004935AC_exit
fn00000000004935AC_exit:


// rl_complete_internal
// Return size: 0
void rl_complete_internal()
rl_complete_internal_entry:
	// succ:  l0000000000493650
l0000000000493650:
	sp = fp
	sp = sp + -144
	Mem0[sp:word64] = x29
	sp = sp + 8
	Mem0[sp:word64] = x30
	x29 = x31 + 0x0000000000000000
	v6 = sp + 32
	Mem0[v6:word64] = x21
	v6 = v6 + 8
	Mem0[v6:word64] = x22
	x21 = 0x00000000004E1000
	w3 = Mem0[x21 + 3168:word32]
	x22 = 0x00000000004E1000
	v10 = sp + 16
	Mem0[v10:word64] = x19
	v10 = v10 + 8
	Mem0[v10:word64] = x20
	v13 = sp + 80
	Mem0[v13:word64] = x27
	v13 = v13 + 8
	Mem0[v13:word64] = x28
	v16 = sp + 48
	Mem0[v16:word64] = x23
	v16 = v16 + 8
	Mem0[v16:word64] = x24
	v19 = sp + 64
	Mem0[v19:word64] = x25
	v19 = v19 + 8
	Mem0[v19:word64] = x26
	x2 = x22 + 0xFFFFFFFFFFFFFF10
	w19 = w0
	w3 = w3 | 0x00004000
	x1 = 0x00000000004DE000
	x1 = x1 + 0x0000000000000560
	w4 = Mem0[x2 + 224:word32]
	x28 = 0x00000000004E1000
	Mem0[x21 + 3168:word32] = w3
	Mem0[x2 + 8:word32] = 0x00000000
	w3 = 0x00000001
	Mem0[x2 + 220:word32] = w19
	Mem0[x2 + 28:word32] = 0x00000000
	Mem0[x2 + 32:word32] = 0x00000000
	w2 = 0x00000020
	Mem0[x1:word32] = w3
	Mem0[x1 + 16:word32] = w2
	x0 = Mem0[x28 + 3256:word64]
	x1 = 0x00000000004E4000
	Mem0[x1 + 192:word32] = w4
	branch x0 == 0x0000000000000000 l0000000000493868
	// succ:  l00000000004936C8 l0000000000493868
l00000000004936C8:
	strlen(x0)
	sp = sp + 0xFFFFFFFFFFFFFFF8
	x0 = x0 + 0x0000000000000001
	call xmalloc (retsize: 0;)
	x1 = Mem0[x28 + 3256:word64]
	strcpy(x0, x1)
	sp = sp + 0xFFFFFFFFFFFFFFF8
	x27 = x0
	x0 = x22 + 0xFFFFFFFFFFFFFF10
	x26 = Mem0[x0 + 232:word64]
	branch x26 == 0x0000000000000000 l0000000000493878
	// succ:  l00000000004936EC l0000000000493878
l00000000004936EC:
	x24 = 0x00000000004E4000
	w20 = Mem0[x24 + 136:word32]
	Mem0[x29 + 108:word32] = 0x00000000
	Mem0[x29 + 104:word32] = 0x00000000
	Mem0[x29 + 112:byte] = 0x00
	w23 = 0x00000000
	branch w20 != 0x00000000 l000000000049389C
	// succ:  l0000000000493708 l000000000049389C
l0000000000493708:
	w1 = w20
	w0 = w23
	Mem0[x24 + 136:word32] = w20
	call rl_copy_text (retsize: 0;)
	w4 = Mem0[x29 + 104:word32]
	v32 = Mem0[x29 + 112:byte]
	w5 = (word32) v32
	w1 = w23
	w2 = w20
	x3 = x26
	x25 = x0
	call fn00000000004935AC (retsize: 0;)
	Mem0[x29 + 96:word64] = x0
	branch x0 == 0x0000000000000000 l0000000000493A7C
	// succ:  l000000000049373C l0000000000493A7C
l000000000049373C:
	x1 = Mem0[x0:word64]
	x0 = x25
	strcmp(x0, x1)
	sp = sp + 0xFFFFFFFFFFFFFFF8
	NZCV = cond(w0 - w31)
	w0 = (word32) Test(NE,Z)
	Mem0[x29 + 132:word32] = w0
	// succ:  l0000000000493754
l0000000000493754:
	w31 = w19 - 0x00000021
	NZCV = cond(w31)
	w1 = (word32) Test(EQ,Z)
	w31 = w19 - 0x00000040
	NZCV = cond(w31)
	Mem0[x29 + 128:word32] = w1
	w26 = (word32) Test(EQ,Z)
	branch w26 != 0x00000000 l0000000000493828
	// succ:  l000000000049376C l0000000000493828
l000000000049376C:
	branch w1 != 0x00000000 l0000000000493828
	// succ:  l0000000000493770 l0000000000493828
l0000000000493770:
	x0 = x25
	call xfree (retsize: 0;)
	x0 = Mem0[x29 + 96:word64]
	branch x0 == 0x0000000000000000 l0000000000493844
	// succ:  l0000000000493780 l0000000000493844
l0000000000493780:
	x0 = x22 + 0xFFFFFFFFFFFFFF10
	w1 = Mem0[x0 + 8:word32]
	x0 = x29 + 0x0000000000000060
	call fn0000000000492644 (retsize: 0;)
	w20 = w0
	branch w0 == 0x00000000 l00000000004938B4
	// succ:  l0000000000493798 l00000000004938B4
l0000000000493798:
	w31 = w19 - 0x0000002A
	NZCV = cond(w31)
	branch Test(EQ,Z) l0000000000493908
	// succ:  l00000000004937A0 l0000000000493908
l00000000004937A0:
	branch Test(LE,ZCV) l00000000004939F4
	// succ:  l00000000004937A4 l00000000004939F4
l00000000004937A4:
	w31 = w19 - 0x0000003F
	NZCV = cond(w31)
	branch Test(NE,Z) l000000000049398C
	// succ:  l00000000004937AC l000000000049398C
l00000000004937AC:
	x0 = Mem0[x29 + 96:word64]
	call fn00000000004932B0 (retsize: 0;)
	x19 = Mem0[x29 + 96:word64]
	// succ:  l00000000004937B8
l00000000004937B8:
	x0 = x19
	call _rl_free_match_list (retsize: 0;)
	branch x27 == 0x0000000000000000 l00000000004937E8
	// succ:  l00000000004937C4 l00000000004937E8
l00000000004937C4:
	x0 = Mem0[x28 + 3256:word64]
	x1 = x27
	strcmp(x0, x1)
	sp = sp + 0xFFFFFFFFFFFFFFF8
	NZCV = cond(w0 - w31)
	x22 = x22 + 0xFFFFFFFFFFFFFF10
	w1 = (word32) Test(NE,Z)
	x0 = x27
	Mem0[x22 + 136:word32] = w1
	call xfree (retsize: 0;)
	// succ:  l00000000004937E8
l00000000004937E8:
	w0 = Mem0[x21 + 3168:word32]
	w0 = w0 & 0xFFFFBFFF
	// succ:  l00000000004937F0
l00000000004937F0:
	Mem0[x21 + 3168:word32] = w0
	x0 = 0x00000000004E4000
	Mem0[x0 + 204:word32] = 0x00000000
	w20 = 0x00000000
	x0 = 0x00000000004E4000
	Mem0[x0 + 188:word32] = 0x00000000
	v40 = sp + 32
	x21 = Mem0[v40:word64]
	v40 = v40 + 8
	x22 = Mem0[v40:word64]
	w0 = w20
	v41 = sp + 48
	x23 = Mem0[v41:word64]
	v41 = v41 + 8
	x24 = Mem0[v41:word64]
	v42 = sp + 16
	x19 = Mem0[v42:word64]
	v42 = v42 + 8
	x20 = Mem0[v42:word64]
	v43 = sp + 64
	x25 = Mem0[v43:word64]
	v43 = v43 + 8
	x26 = Mem0[v43:word64]
	v44 = sp + 80
	x27 = Mem0[v44:word64]
	v44 = v44 + 8
	x28 = Mem0[v44:word64]
	x29 = Mem0[sp:word64]
	sp = sp + 8
	x30 = Mem0[sp:word64]
	sp = sp + 144
	return
	// succ:  rl_complete_internal_exit
l0000000000493828:
	x0 = x25
	strlen(x0)
	sp = sp + 0xFFFFFFFFFFFFFFF8
	Mem0[x29 + 136:word32] = w0
	x0 = x25
	call xfree (retsize: 0;)
	x0 = Mem0[x29 + 96:word64]
	branch x0 != 0x0000000000000000 l0000000000493780
	// succ:  l0000000000493844 l0000000000493780
l0000000000493844:
	call rl_ding (retsize: 0;)
	branch x27 == 0x0000000000000000 l0000000000493854
	// succ:  l000000000049384C l0000000000493854
l000000000049384C:
	x0 = x27
	call free (retsize: 0;)
	// succ:  l0000000000493854
l0000000000493854:
	w0 = Mem0[x21 + 3168:word32]
	x22 = x22 + 0xFFFFFFFFFFFFFF10
	w0 = w0 & 0xFFFFBFFF
	Mem0[x22 + 136:word32] = 0x00000000
	goto l00000000004937F0
	// succ:  l00000000004937F0
l0000000000493868:
	x27 = x0
	x0 = x22 + 0xFFFFFFFFFFFFFF10
	x26 = Mem0[x0 + 232:word64]
	branch x26 != 0x0000000000000000 l00000000004936EC
	// succ:  l0000000000493878 l00000000004936EC
l0000000000493878:
	x24 = 0x00000000004E4000
	w20 = Mem0[x24 + 136:word32]
	x26 = 0x0000000000491000
	Mem0[x29 + 108:word32] = 0x00000000
	Mem0[x29 + 104:word32] = 0x00000000
	Mem0[x29 + 112:byte] = 0x00
	x26 = x26 + 0x000000000000053C
	w23 = 0x00000000
	branch w20 == 0x00000000 l0000000000493708
	// succ:  l000000000049389C l0000000000493708
l000000000049389C:
	x0 = x29 + 0x0000000000000068
	x1 = x29 + 0x000000000000006C
	call _rl_find_completion_word (retsize: 0;)
	Mem0[x29 + 112:byte] = (byte) w0
	w23 = Mem0[x24 + 136:word32]
	goto l0000000000493708
	// succ:  l0000000000493708
l00000000004938B4:
	call rl_ding (retsize: 0;)
	branch x27 == 0x0000000000000000 l00000000004938C4
	// succ:  l00000000004938BC l00000000004938C4
l00000000004938BC:
	x0 = x27
	call free (retsize: 0;)
	// succ:  l00000000004938C4
l00000000004938C4:
	w0 = Mem0[x21 + 3168:word32]
	x22 = x22 + 0xFFFFFFFFFFFFFF10
	w0 = w0 & 0xFFFFBFFF
	Mem0[x21 + 3168:word32] = w0
	x0 = 0x00000000004E4000
	Mem0[x0 + 204:word32] = 0x00000000
	x0 = 0x00000000004E4000
	Mem0[x22 + 136:word32] = 0x00000000
	Mem0[x0 + 188:word32] = 0x00000000
	v56 = sp + 32
	x21 = Mem0[v56:word64]
	v56 = v56 + 8
	x22 = Mem0[v56:word64]
	w0 = w20
	v57 = sp + 48
	x23 = Mem0[v57:word64]
	v57 = v57 + 8
	x24 = Mem0[v57:word64]
	v58 = sp + 16
	x19 = Mem0[v58:word64]
	v58 = v58 + 8
	x20 = Mem0[v58:word64]
	v59 = sp + 64
	x25 = Mem0[v59:word64]
	v59 = v59 + 8
	x26 = Mem0[v59:word64]
	v60 = sp + 80
	x27 = Mem0[v60:word64]
	v60 = v60 + 8
	x28 = Mem0[v60:word64]
	x29 = Mem0[sp:word64]
	sp = sp + 8
	x30 = Mem0[sp:word64]
	sp = sp + 144
	return
	// succ:  rl_complete_internal_exit
l0000000000493908:
	x19 = Mem0[x29 + 96:word64]
	call rl_begin_undo_group (retsize: 0;)
	v54 = Mem0[x29 + 112:byte]
	w0 = (word32) v54
	branch w0 == 0x00000000 l000000000049391C
	// succ:  l0000000000493918 l000000000049391C
l0000000000493918:
	branch w23 != 0x00000000 l0000000000493A84
	// succ:  l000000000049391C l0000000000493A84
l000000000049391C:
	w1 = Mem0[x24 + 136:word32]
	w0 = w23
	call rl_delete_text (retsize: 0;)
	x0 = Mem0[x19 + 8:word64]
	Mem0[x24 + 136:word32] = w23
	branch x0 == 0x0000000000000000 l0000000000493B28
	// succ:  l0000000000493934 l0000000000493B28
l0000000000493934:
	x24 = 0x00000000004BE000
	x23 = x19 + 0x0000000000000008
	x24 = x24 + 0x0000000000000330
	x19 = x19 + 0x0000000000000010
	// succ:  l0000000000493944
l0000000000493944:
	w1 = 0x00000001
	x2 = x29 + 0x0000000000000070
	call fn0000000000490FFC (retsize: 0;)
	x20 = x0
	call rl_insert_text (retsize: 0;)
	x0 = x24
	call rl_insert_text (retsize: 0;)
	x1 = Mem0[x23:word64]
	x0 = x20
	x31 = x20 - x1
	NZCV = cond(x31)
	x23 = x19
	branch Test(EQ,Z) l0000000000493978
	// succ:  l0000000000493974 l0000000000493978
l0000000000493974:
	call xfree (retsize: 0;)
	// succ:  l0000000000493978
l0000000000493978:
	x0 = Mem0[x19:word64]
	x19 = x19 + 8
	branch x0 != 0x0000000000000000 l0000000000493944
	// succ:  l0000000000493980 l0000000000493944
l0000000000493980:
	call rl_end_undo_group (retsize: 0;)
	x19 = Mem0[x29 + 96:word64]
	goto l00000000004937B8
	// succ:  l00000000004937B8
l000000000049398C:
	w31 = w19 - 0x00000040
	NZCV = cond(w31)
	branch Test(EQ,Z) l0000000000493A04
	// succ:  l0000000000493994 l0000000000493A04
l0000000000493994:
	x0 = 0x00000000004C3000
	x0 = x0 + 0xFFFFFFFFFFFFFFE0
	w1 = w19
	call _rl_ttymsg (retsize: 0;)
	call rl_ding (retsize: 0;)
	branch x27 == 0x0000000000000000 l00000000004939B4
	// succ:  l00000000004939AC l00000000004939B4
l00000000004939AC:
	x0 = x27
	call free (retsize: 0;)
	// succ:  l00000000004939B4
l00000000004939B4:
	w0 = Mem0[x21 + 3168:word32]
	w20 = 0x00000001
	w0 = w0 & 0xFFFFBFFF
	Mem0[x21 + 3168:word32] = w0
	x0 = 0x00000000004E4000
	Mem0[x0 + 204:word32] = 0x00000000
	x0 = 0x00000000004E4000
	Mem0[x0 + 188:word32] = 0x00000000
	v45 = sp + 32
	x21 = Mem0[v45:word64]
	v45 = v45 + 8
	x22 = Mem0[v45:word64]
	w0 = w20
	v46 = sp + 48
	x23 = Mem0[v46:word64]
	v46 = v46 + 8
	x24 = Mem0[v46:word64]
	v47 = sp + 16
	x19 = Mem0[v47:word64]
	v47 = v47 + 8
	x20 = Mem0[v47:word64]
	v48 = sp + 64
	x25 = Mem0[v48:word64]
	v48 = v48 + 8
	x26 = Mem0[v48:word64]
	v49 = sp + 80
	x27 = Mem0[v49:word64]
	v49 = v49 + 8
	x28 = Mem0[v49:word64]
	x29 = Mem0[sp:word64]
	sp = sp + 8
	x30 = Mem0[sp:word64]
	sp = sp + 144
	return
	// succ:  rl_complete_internal_exit
l00000000004939F4:
	w31 = w19 - 0x00000009
	NZCV = cond(w31)
	branch Test(EQ,Z) l0000000000493ABC
	// succ:  l00000000004939FC l0000000000493ABC
l00000000004939FC:
	w31 = w19 - 0x00000021
	NZCV = cond(w31)
	branch Test(NE,Z) l0000000000493994
	// succ:  l0000000000493A04 l0000000000493994
l0000000000493A04:
	x19 = Mem0[x29 + 96:word64]
	x20 = Mem0[x19:word64]
	x24 = x19
	v50 = Mem0[x20:byte]
	w0 = (word32) v50
	branch w0 == 0x00000000 l0000000000493A4C
	// succ:  l0000000000493A18 l0000000000493A4C
l0000000000493A18:
	x0 = Mem0[x19 + 8:word64]
	branch x0 == 0x0000000000000000 l0000000000493AA0
	// succ:  l0000000000493A20 l0000000000493AA0
l0000000000493A20:
	x0 = x20
	strlen(x0)
	sp = sp + 0xFFFFFFFFFFFFFFF8
	w1 = Mem0[x29 + 136:word32]
	NZCV = cond(w1 - w0)
	branch Test(GT,NZV) l0000000000493A58
	// succ:  l0000000000493A34 l0000000000493A58
l0000000000493A34:
	x0 = x20
	w1 = w23
	w2 = 0x00000002
	x3 = x29 + 0x0000000000000070
	call fn00000000004910B0 (retsize: 0;)
	x19 = Mem0[x29 + 96:word64]
	// succ:  l0000000000493A4C
l0000000000493A4C:
	x0 = Mem0[x19 + 8:word64]
	branch x0 == 0x0000000000000000 l0000000000493AF4
	// succ:  l0000000000493A54 l0000000000493AF4
l0000000000493A54:
	x24 = x19
	// succ:  l0000000000493A58
l0000000000493A58:
	w0 = Mem0[x29 + 128:word32]
	branch w0 != 0x00000000 l0000000000493B18
	// succ:  l0000000000493A60 l0000000000493B18
l0000000000493A60:
	branch w26 != 0x00000000 l0000000000493B10
	// succ:  l0000000000493A64 l0000000000493B10
l0000000000493A64:
	x0 = 0x00000000004D9000
	w0 = Mem0[x0 + 1208:word32]
	branch w0 == 0x00000000 l00000000004937B8
	// succ:  l0000000000493A70 l00000000004937B8
l0000000000493A70:
	call rl_ding (retsize: 0;)
	x19 = Mem0[x29 + 96:word64]
	goto l00000000004937B8
	// succ:  l00000000004937B8
l0000000000493A7C:
	Mem0[x29 + 132:word32] = w0
	goto l0000000000493754
	// succ:  l0000000000493754
l0000000000493A84:
	x1 = Mem0[x28 + 3256:word64]
	x1 = x1 + (int64) ((int32) w23)
	v55 = Mem0[x1 + -1:byte]
	w1 = (word32) v55
	NZCV = cond(w1 - w0)
	w0 = (word32) Test(EQ,Z)
	w23 = w23 - w0
	goto l000000000049391C
	// succ:  l000000000049391C
l0000000000493AA0:
	x0 = x20
	w1 = w23
	w2 = 0x00000001
	x3 = x29 + 0x0000000000000070
	call fn00000000004910B0 (retsize: 0;)
	x19 = Mem0[x29 + 96:word64]
	goto l0000000000493A4C
	// succ:  l0000000000493A4C
l0000000000493ABC:
	x19 = Mem0[x29 + 96:word64]
	x0 = Mem0[x19:word64]
	v53 = Mem0[x0:byte]
	w1 = (word32) v53
	branch w1 == 0x00000000 l0000000000493AEC
	// succ:  l0000000000493ACC l0000000000493AEC
l0000000000493ACC:
	x1 = Mem0[x19 + 8:word64]
	w2 = 0x00000002
	x31 = x1 - x31
	NZCV = cond(x31)
l0000000000493AEC:
	x0 = Mem0[x19 + 8:word64]
	branch x0 != 0x0000000000000000 l0000000000493A64
	// succ:  l0000000000493AF4 l0000000000493A64
l0000000000493AF4:
	x0 = Mem0[x19:word64]
	w1 = Mem0[x29 + 108:word32]
	v52 = Mem0[x29 + 112:byte]
	w2 = (word32) v52
	w3 = Mem0[x29 + 132:word32]
	call fn00000000004912D4 (retsize: 0;)
	x19 = Mem0[x29 + 96:word64]
	goto l00000000004937B8
	// succ:  l00000000004937B8
l0000000000493B10:
	w1 = Mem0[x29 + 132:word32]
	branch w1 != 0x00000000 l00000000004937B8
	// succ:  l0000000000493B18 l00000000004937B8
l0000000000493B18:
	x0 = x24
	call fn00000000004932B0 (retsize: 0;)
	x19 = Mem0[x29 + 96:word64]
	goto l00000000004937B8
	// succ:  l00000000004937B8
l0000000000493B28:
	x0 = Mem0[x19:word64]
	w1 = 0x00000001
	x2 = x29 + 0x0000000000000070
	call fn0000000000490FFC (retsize: 0;)
	x20 = x0
	call rl_insert_text (retsize: 0;)
	x0 = 0x00000000004BE000
	x0 = x0 + 0x0000000000000330
	call rl_insert_text (retsize: 0;)
	x0 = Mem0[x19:word64]
	x31 = x20 - x0
	NZCV = cond(x31)
	branch Test(EQ,Z) l0000000000493980
	// succ:  l0000000000493B58 l0000000000493980
l0000000000493B58:
	x0 = x20
	call xfree (retsize: 0;)
	goto l0000000000493980
	// succ:  l0000000000493980
rl_complete_internal_exit:


// rl_complete
// Return size: 0
void rl_complete()
rl_complete_entry:
	// succ:  l0000000000493B64
l0000000000493B64:
	sp = fp
	x2 = 0x00000000004E4000
	x3 = 0x00000000004E4000
	w2 = Mem0[x2 + 196:word32]
	Mem0[x3 + 200:word32] = w1
	branch w2 != 0x00000000 l0000000000493BB8
	// succ:  l0000000000493B78 l0000000000493BB8
l0000000000493B78:
	x0 = 0x00000000004E1000
	x1 = Mem0[x0 + 3248:word64]
	x0 = 0x0000000000493000
	x0 = x0 + 0xFFFFFFFFFFFFFB64
	x31 = x1 - x0
	NZCV = cond(x31)
	x0 = 0x00000000004E1000
	branch Test(EQ,Z) l0000000000493BC4
	// succ:  l0000000000493B94 l0000000000493BC4
l0000000000493B94:
	x0 = x0 + 0xFFFFFFFFFFFFFF10
	w1 = Mem0[x0 + 140:word32]
	branch w1 != 0x00000000 l0000000000493BBC
	// succ:  l0000000000493BA0 l0000000000493BBC
l0000000000493BA0:
	w0 = Mem0[x0 + 144:word32]
	branch w0 != 0x00000000 l0000000000493BB0
	// succ:  l0000000000493BA8 l0000000000493BB0
l0000000000493BA8:
	w0 = 0x00000009
	// succ:  l0000000000493BAC_thunk_rl_complete_internal
l0000000000493BAC_thunk_rl_complete_internal:
	call rl_complete_internal (retsize: 0;)
	return
	// succ:  rl_complete_exit
l0000000000493BB0:
	w0 = 0x00000040
	// succ:  l0000000000493BB4_thunk_rl_complete_internal
l0000000000493BB4_thunk_rl_complete_internal:
	call rl_complete_internal (retsize: 0;)
	return
	// succ:  rl_complete_exit
l0000000000493BB8:
	// succ:  l0000000000493BB8_thunk__rl_insert_char
l0000000000493BB8_thunk__rl_insert_char:
	call _rl_insert_char (retsize: 0;)
	return
	// succ:  rl_complete_exit
l0000000000493BBC:
	w0 = 0x00000021
	// succ:  l0000000000493BC0_thunk_rl_complete_internal
l0000000000493BC0_thunk_rl_complete_internal:
	call rl_complete_internal (retsize: 0;)
	return
	// succ:  rl_complete_exit
l0000000000493BC4:
	x1 = x0 + 0xFFFFFFFFFFFFFF10
	w1 = Mem0[x1 + 136:word32]
	branch w1 != 0x00000000 l0000000000493B94
	// succ:  l0000000000493BD0 l0000000000493B94
l0000000000493BD0:
	w0 = 0x0000003F
	// succ:  l0000000000493BD4_thunk_rl_complete_internal
l0000000000493BD4_thunk_rl_complete_internal:
	call rl_complete_internal (retsize: 0;)
	return
	// succ:  rl_complete_exit
rl_complete_exit:


// rl_possible_completions
// Return size: 0
void rl_possible_completions()
rl_possible_completions_entry:
	// succ:  l0000000000493BD8
l0000000000493BD8:
	sp = fp
	x2 = 0x00000000004E4000
	w0 = 0x0000003F
	Mem0[x2 + 200:word32] = w1
	// succ:  l0000000000493BE4_thunk_rl_complete_internal
l0000000000493BE4_thunk_rl_complete_internal:
	call rl_complete_internal (retsize: 0;)
	return
	// succ:  rl_possible_completions_exit
rl_possible_completions_exit:


// rl_insert_completions
// Return size: 0
void rl_insert_completions()
rl_insert_completions_entry:
	// succ:  l0000000000493BE8
l0000000000493BE8:
	sp = fp
	x2 = 0x00000000004E4000
	w0 = 0x0000002A
	Mem0[x2 + 200:word32] = w1
	// succ:  l0000000000493BF4_thunk_rl_complete_internal
l0000000000493BF4_thunk_rl_complete_internal:
	call rl_complete_internal (retsize: 0;)
	return
	// succ:  rl_insert_completions_exit
rl_insert_completions_exit:


// rl_old_menu_complete
// Return size: 0
void rl_old_menu_complete()
rl_old_menu_complete_entry:
	// succ:  l0000000000493BF8
l0000000000493BF8:
	sp = fp
	sp = sp + -80
	Mem0[sp:word64] = x29
	sp = sp + 8
	Mem0[sp:word64] = x30
	x29 = x31 + 0x0000000000000000
	x2 = 0x00000000004E1000
	x3 = Mem0[x2 + 3248:word64]
	x2 = 0x0000000000493000
	x2 = x2 + 0xFFFFFFFFFFFFFBF8
	v10 = sp + 16
	Mem0[v10:word64] = x19
	v10 = v10 + 8
	Mem0[v10:word64] = x20
	v13 = sp + 48
	Mem0[v13:word64] = x23
	v13 = v13 + 8
	Mem0[v13:word64] = x24
	x19 = 0x00000000004E1000
	v16 = sp + 32
	Mem0[v16:word64] = x21
	v16 = v16 + 8
	Mem0[v16:word64] = x22
	x31 = x3 - x2
	NZCV = cond(x31)
	w24 = w0
	w20 = w1
	x0 = x19 + 0xFFFFFFFFFFFFFF10
	branch Test(EQ,Z) l0000000000493EB0
	// succ:  l0000000000493C34 l0000000000493EB0
l0000000000493C34:
	x0 = Mem0[x0 + 248:word64]
	branch x0 == 0x0000000000000000 l0000000000493C40
	// succ:  l0000000000493C3C l0000000000493C40
l0000000000493C3C:
	call free (retsize: 0;)
	// succ:  l0000000000493C40
l0000000000493C40:
	x0 = x19 + 0xFFFFFFFFFFFFFF10
	x0 = Mem0[x0 + 240:word64]
	branch x0 == 0x0000000000000000 l0000000000493C50
	// succ:  l0000000000493C4C l0000000000493C50
l0000000000493C4C:
	call _rl_free_match_list (retsize: 0;)
	// succ:  l0000000000493C50
l0000000000493C50:
	x21 = 0x00000000004E1000
	w1 = Mem0[x21 + 3168:word32]
	x3 = 0x00000000004DE000
	w1 = w1 | 0x00004000
	x3 = x3 + 0x0000000000000560
	Mem0[x21 + 3168:word32] = w1
	w1 = 0x00000001
	x2 = x19 + 0xFFFFFFFFFFFFFF10
	Mem0[x3:word32] = w1
	w1 = 0x00000025
	w0 = Mem0[x2 + 224:word32]
	Mem0[x2 + 220:word32] = w1
	w1 = 0x00000020
	x4 = 0x00000000004E4000
	Mem0[x3 + 16:word32] = w1
	x22 = Mem0[x2 + 264:word64]
	x1 = 0x00000000004E4000
	Mem0[x2 + 256:word32] = 0x00000000
	Mem0[x2 + 260:word32] = 0x00000000
	Mem0[x2 + 240:word64] = 0x0000000000000000
	Mem0[x4 + 200:word32] = w20
	Mem0[x2 + 8:word32] = 0x00000000
	Mem0[x2 + 28:word32] = 0x00000000
	Mem0[x2 + 32:word32] = 0x00000000
	Mem0[x1 + 192:word32] = w0
	branch x22 == 0x0000000000000000 l0000000000493F04
	// succ:  l0000000000493CB8 l0000000000493F04
l0000000000493CB8:
	x23 = 0x00000000004E4000
	w2 = Mem0[x23 + 136:word32]
	x20 = x19 + 0xFFFFFFFFFFFFFF10
	Mem0[x20 + 272:word32] = w2
	Mem0[x20 + 276:word32] = 0x00000000
	Mem0[x29 + 64:word32] = 0x00000000
	Mem0[x20 + 280:byte] = 0x00
	w3 = w2
	branch w2 != 0x00000000 l0000000000493E94
	// succ:  l0000000000493CDC l0000000000493E94
l0000000000493CDC:
	x20 = x19 + 0xFFFFFFFFFFFFFF10
	w1 = w2
	w0 = w3
	Mem0[x20 + 284:word32] = w3
	Mem0[x23 + 136:word32] = w2
	call rl_copy_text (retsize: 0;)
	w1 = Mem0[x20 + 284:word32]
	w2 = Mem0[x20 + 272:word32]
	w4 = Mem0[x29 + 64:word32]
	v41 = Mem0[x20 + 280:byte]
	w5 = (word32) v41
	x3 = x22
	Mem0[x20 + 248:word64] = x0
	call fn00000000004935AC (retsize: 0;)
	Mem0[x20 + 240:word64] = x0
	w1 = Mem0[x20 + 8:word32]
	branch x0 == 0x0000000000000000 l0000000000493D28
	// succ:  l0000000000493D1C l0000000000493D28
l0000000000493D1C:
	x0 = x20 + 0x00000000000000F0
	call fn0000000000492644 (retsize: 0;)
	branch w0 != 0x00000000 l0000000000493D80
	// succ:  l0000000000493D28 l0000000000493D80
l0000000000493D28:
	call rl_ding (retsize: 0;)
	x0 = x19 + 0xFFFFFFFFFFFFFF10
	x0 = Mem0[x0 + 240:word64]
	branch x0 == 0x0000000000000000 l0000000000493D3C
	// succ:  l0000000000493D38 l0000000000493D3C
l0000000000493D38:
	call free (retsize: 0;)
	// succ:  l0000000000493D3C
l0000000000493D3C:
	x1 = x19 + 0xFFFFFFFFFFFFFF10
	x0 = Mem0[x1 + 248:word64]
	Mem0[x1 + 240:word64] = 0x0000000000000000
	branch x0 == 0x0000000000000000 l0000000000493D50
	// succ:  l0000000000493D4C l0000000000493D50
l0000000000493D4C:
	call free (retsize: 0;)
	// succ:  l0000000000493D50
l0000000000493D50:
	w0 = Mem0[x21 + 3168:word32]
	x19 = x19 + 0xFFFFFFFFFFFFFF10
	w0 = w0 & 0xFFFFBFFF
	Mem0[x21 + 3168:word32] = w0
	Mem0[x19 + 248:word64] = 0x0000000000000000
	Mem0[x19 + 136:word32] = 0x00000000
	w0 = 0x00000000
	v42 = sp + 16
	x19 = Mem0[v42:word64]
	v42 = v42 + 8
	x20 = Mem0[v42:word64]
	v43 = sp + 32
	x21 = Mem0[v43:word64]
	v43 = v43 + 8
	x22 = Mem0[v43:word64]
	v44 = sp + 48
	x23 = Mem0[v44:word64]
	v44 = v44 + 8
	x24 = Mem0[v44:word64]
	x29 = Mem0[sp:word64]
	sp = sp + 8
	x30 = Mem0[sp:word64]
	sp = sp + 80
	return
	// succ:  rl_old_menu_complete_exit
l0000000000493D80:
	w1 = Mem0[x21 + 3168:word32]
	x0 = Mem0[x20 + 240:word64]
	w1 = w1 & 0xFFFFBFFF
	x2 = Mem0[x0:word64]
	Mem0[x20 + 256:word32] = 0x00000000
	Mem0[x21 + 3168:word32] = w1
	branch x2 == 0x0000000000000000 l0000000000493DCC
	// succ:  l0000000000493D9C l0000000000493DCC
l0000000000493D9C:
	x2 = x0 + 0x0000000000000008
	w1 = 0x00000001
	// succ:  l0000000000493DA4
l0000000000493DA4:
	x3 = Mem0[x2:word64]
	x2 = x2 + 8
	w4 = w1
	w1 = w1 + 0x00000001
	branch x3 != 0x0000000000000000 l0000000000493DA4
	// succ:  l0000000000493DB4 l0000000000493DA4
l0000000000493DB4:
	x20 = x19 + 0xFFFFFFFFFFFFFF10
	Mem0[x20 + 256:word32] = w4
	w31 = w4 - 0x00000001
	NZCV = cond(w31)
	branch Test(EQ,Z) l0000000000493DCC
	// succ:  l0000000000493DC4 l0000000000493DCC
l0000000000493DC4:
	w1 = Mem0[x20 + 140:word32]
	branch w1 != 0x00000000 l0000000000493E50
	// succ:  l0000000000493DCC l0000000000493E50
l0000000000493DCC:
	x2 = x19 + 0xFFFFFFFFFFFFFF10
	w1 = Mem0[x2 + 256:word32]
	branch w1 == 0x00000000 l0000000000493E5C
	// succ:  l0000000000493DD8 l0000000000493E5C
l0000000000493DD8:
	w3 = Mem0[x2 + 260:word32]
	w24 = w24 + w3
	NZCV = cond(w24)
	branch Test(LT,N) l0000000000493E3C
	// succ:  l0000000000493DE4 l0000000000493E3C
l0000000000493DE4:
	w3 = w24 / w1
	w24 = w24 - w3 * w1
	Mem0[x2 + 260:word32] = w24
	// succ:  l0000000000493DF0
l0000000000493DF0:
	branch w24 != 0x00000000 l0000000000493EBC
	// succ:  l0000000000493DF4 l0000000000493EBC
l0000000000493DF4:
	w31 = w1 - 0x00000001
	NZCV = cond(w31)
	branch Test(LE,ZCV) l0000000000493EBC
	// succ:  l0000000000493DFC l0000000000493EBC
l0000000000493DFC:
	call rl_ding (retsize: 0;)
	x3 = x19 + 0xFFFFFFFFFFFFFF10
	x0 = Mem0[x3 + 248:word64]
	w1 = Mem0[x3 + 284:word32]
	w2 = 0x00000002
	x3 = x3 + 0x0000000000000118
	call fn00000000004910B0 (retsize: 0;)
	// succ:  l0000000000493E18
l0000000000493E18:
	x19 = x19 + 0xFFFFFFFFFFFFFF10
	w0 = 0x00000001
	Mem0[x19 + 136:word32] = w0
	v29 = sp + 32
	x21 = Mem0[v29:word64]
	v29 = v29 + 8
	x22 = Mem0[v29:word64]
	w0 = 0x00000000
	v30 = sp + 16
	x19 = Mem0[v30:word64]
	v30 = v30 + 8
	x20 = Mem0[v30:word64]
	v31 = sp + 48
	x23 = Mem0[v31:word64]
	v31 = v31 + 8
	x24 = Mem0[v31:word64]
	x29 = Mem0[sp:word64]
	sp = sp + 8
	x30 = Mem0[sp:word64]
	sp = sp + 80
	return
	// succ:  rl_old_menu_complete_exit
l0000000000493E3C:
	w24 = w1 + w24
	NZCV = cond(w24)
	branch Test(LT,N) l0000000000493E3C
	// succ:  l0000000000493E44 l0000000000493E3C
l0000000000493E44:
	x2 = x19 + 0xFFFFFFFFFFFFFF10
	Mem0[x2 + 260:word32] = w24
	goto l0000000000493DF0
	// succ:  l0000000000493DF0
l0000000000493E50:
	call fn00000000004932B0 (retsize: 0;)
	x0 = Mem0[x20 + 240:word64]
	branch x0 != 0x0000000000000000 l0000000000493DCC
	// succ:  l0000000000493E5C l0000000000493DCC
l0000000000493E5C:
	call rl_ding (retsize: 0;)
	x0 = x19 + 0xFFFFFFFFFFFFFF10
	x0 = Mem0[x0 + 240:word64]
	branch x0 == 0x0000000000000000 l0000000000493E70
	// succ:  l0000000000493E6C l0000000000493E70
l0000000000493E6C:
	call free (retsize: 0;)
	// succ:  l0000000000493E70
l0000000000493E70:
	x19 = x19 + 0xFFFFFFFFFFFFFF10
	Mem0[x19 + 240:word64] = 0x0000000000000000
	Mem0[x19 + 136:word32] = 0x00000000
	w0 = 0x00000000
	v32 = sp + 16
	x19 = Mem0[v32:word64]
	v32 = v32 + 8
	x20 = Mem0[v32:word64]
	v33 = sp + 32
	x21 = Mem0[v33:word64]
	v33 = v33 + 8
	x22 = Mem0[v33:word64]
	v34 = sp + 48
	x23 = Mem0[v34:word64]
	v34 = v34 + 8
	x24 = Mem0[v34:word64]
	x29 = Mem0[sp:word64]
	sp = sp + 8
	x30 = Mem0[sp:word64]
	sp = sp + 80
	return
	// succ:  rl_old_menu_complete_exit
l0000000000493E94:
	x0 = x29 + 0x0000000000000040
	x1 = x20 + 0x0000000000000114
	call _rl_find_completion_word (retsize: 0;)
	Mem0[x20 + 280:byte] = (byte) w0
	w3 = Mem0[x23 + 136:word32]
	w2 = Mem0[x20 + 272:word32]
	goto l0000000000493CDC
	// succ:  l0000000000493CDC
l0000000000493EB0:
	x0 = Mem0[x0 + 240:word64]
	branch x0 != 0x0000000000000000 l0000000000493DCC
	// succ:  l0000000000493EB8 l0000000000493DCC
l0000000000493EB8:
	goto l0000000000493E5C
	// succ:  l0000000000493E5C
l0000000000493EBC:
	x20 = x19 + 0xFFFFFFFFFFFFFF10
	x0 = Mem0[x0 + (int64) ((int32) w24):word64]
	w1 = Mem0[x20 + 284:word32]
	x3 = x20 + 0x0000000000000118
	w2 = 0x00000001
	call fn00000000004910B0 (retsize: 0;)
	v35 = Mem0[x20 + 130:int32]
	x2 = (word64) v35
	x1 = Mem0[x20 + 240:word64]
	x0 = Mem0[x20 + 248:word64]
	x21 = Mem0[x1 + x2:word64]
	x1 = x21
	strcmp(x0, x1)
	sp = sp + 0xFFFFFFFFFFFFFFF8
	w1 = Mem0[x20 + 276:word32]
	v37 = Mem0[x20 + 280:byte]
	w2 = (word32) v37
	w3 = w0
	x0 = x21
	call fn00000000004912D4 (retsize: 0;)
	goto l0000000000493E18
	// succ:  l0000000000493E18
l0000000000493F04:
	x22 = Mem0[x2 + 232:word64]
	branch x22 != 0x0000000000000000 l0000000000493CB8
	// succ:  l0000000000493F0C l0000000000493CB8
l0000000000493F0C:
	x22 = 0x0000000000491000
	x22 = x22 + 0x000000000000053C
	goto l0000000000493CB8
	// succ:  l0000000000493CB8
rl_old_menu_complete_exit:


// rl_menu_complete
// Return size: 0
void rl_menu_complete()
rl_menu_complete_entry:
	// succ:  l0000000000493F18
l0000000000493F18:
	sp = fp
	sp = sp + -96
	Mem0[sp:word64] = x29
	sp = sp + 8
	Mem0[sp:word64] = x30
	x29 = x31 + 0x0000000000000000
	x1 = 0x00000000004E1000
	x1 = Mem0[x1 + 3248:word64]
	x2 = 0x0000000000493000
	x2 = x2 + 0xFFFFFFFFFFFFFF18
	v8 = sp + 48
	Mem0[v8:word64] = x23
	v8 = v8 + 8
	Mem0[v8:word64] = x24
	v11 = sp + 16
	Mem0[v11:word64] = x19
	v11 = v11 + 8
	Mem0[v11:word64] = x20
	v14 = sp + 32
	Mem0[v14:word64] = x21
	v14 = v14 + 8
	Mem0[v14:word64] = x22
	Mem0[sp + 64:word64] = x25
	x31 = x1 - x2
	NZCV = cond(x31)
	w24 = w0
	branch Test(EQ,Z) l00000000004941AC
	// succ:  l0000000000493F4C l00000000004941AC
l0000000000493F4C:
	x0 = 0x0000000000494000
	x0 = x0 + 0x00000000000003D0
	x31 = x1 - x0
	NZCV = cond(x31)
	x19 = 0x00000000004E1000
	branch Test(EQ,Z) l00000000004941AC
	// succ:  l0000000000493F60 l00000000004941AC
l0000000000493F60:
	x0 = x19 + 0xFFFFFFFFFFFFFF10
	x0 = Mem0[x0 + 296:word64]
	branch x0 == 0x0000000000000000 l0000000000493F70
	// succ:  l0000000000493F6C l0000000000493F70
l0000000000493F6C:
	call free (retsize: 0;)
	// succ:  l0000000000493F70
l0000000000493F70:
	x0 = x19 + 0xFFFFFFFFFFFFFF10
	x0 = Mem0[x0 + 304:word64]
	branch x0 == 0x0000000000000000 l0000000000493F80
	// succ:  l0000000000493F7C l0000000000493F80
l0000000000493F7C:
	call _rl_free_match_list (retsize: 0;)
	// succ:  l0000000000493F80
l0000000000493F80:
	x21 = 0x00000000004E1000
	w3 = Mem0[x21 + 3168:word32]
	x25 = 0x00000000004DE000
	w3 = w3 | 0x00004000
	x2 = x25 + 0x0000000000000560
	Mem0[x21 + 3168:word32] = w3
	w3 = 0x00000001
	x1 = x19 + 0xFFFFFFFFFFFFFF10
	Mem0[x2:word32] = w3
	w3 = 0x00000025
	w0 = Mem0[x1 + 224:word32]
	Mem0[x1 + 220:word32] = w3
	w3 = 0x00000020
	Mem0[x2 + 16:word32] = w3
	x22 = Mem0[x1 + 264:word64]
	x2 = 0x00000000004E4000
	Mem0[x1 + 312:word32] = 0x00000000
	Mem0[x1 + 316:word32] = 0x00000000
	Mem0[x1 + 304:word64] = 0x0000000000000000
	Mem0[x1 + 288:word32] = 0x00000000
	Mem0[x1 + 8:word32] = 0x00000000
	Mem0[x1 + 28:word32] = 0x00000000
	Mem0[x1 + 32:word32] = 0x00000000
	Mem0[x2 + 192:word32] = w0
	branch x22 == 0x0000000000000000 l00000000004942A8
	// succ:  l0000000000493FE4 l00000000004942A8
l0000000000493FE4:
	x23 = 0x00000000004E4000
	w2 = Mem0[x23 + 136:word32]
	x20 = x19 + 0xFFFFFFFFFFFFFF10
	Mem0[x20 + 320:word32] = w2
	Mem0[x20 + 324:word32] = 0x00000000
	Mem0[x29 + 80:word32] = 0x00000000
	Mem0[x20 + 328:byte] = 0x00
	w3 = w2
	branch w2 != 0x00000000 l000000000049420C
	// succ:  l0000000000494008 l000000000049420C
l0000000000494008:
	x20 = x19 + 0xFFFFFFFFFFFFFF10
	w1 = w2
	w0 = w3
	Mem0[x20 + 332:word32] = w3
	Mem0[x23 + 136:word32] = w2
	call rl_copy_text (retsize: 0;)
	w1 = Mem0[x20 + 332:word32]
	w2 = Mem0[x20 + 320:word32]
	w4 = Mem0[x29 + 80:word32]
	v27 = Mem0[x20 + 328:byte]
	w5 = (word32) v27
	x3 = x22
	Mem0[x20 + 296:word64] = x0
	call fn00000000004935AC (retsize: 0;)
	Mem0[x20 + 304:word64] = x0
	x1 = x0
	branch x0 == 0x0000000000000000 l00000000004942BC
	// succ:  l0000000000494048 l00000000004942BC
l0000000000494048:
	x0 = Mem0[x20 + 296:word64]
	x1 = Mem0[x1:word64]
	strcmp(x0, x1)
	sp = sp + 0xFFFFFFFFFFFFFFF8
	branch w0 != 0x00000000 l0000000000494134
	// succ:  l0000000000494058 l0000000000494134
l0000000000494058:
	Mem0[x20 + 336:word32] = w0
	w1 = Mem0[x20 + 8:word32]
	x20 = x19 + 0xFFFFFFFFFFFFFF10
	x0 = x20 + 0x0000000000000130
	call fn0000000000492644 (retsize: 0;)
	branch w0 == 0x00000000 l0000000000494150
	// succ:  l0000000000494070 l0000000000494150
l0000000000494070:
	x5 = Mem0[x20 + 304:word64]
	w0 = Mem0[x21 + 3168:word32]
	x2 = x5
	w1 = w0 & 0xFFFFBFFF
	x0 = Mem0[x2:word64]
	x2 = x2 + 8
	Mem0[x20 + 312:word32] = 0x00000000
	Mem0[x21 + 3168:word32] = w1
	w1 = 0x00000001
	branch x0 == 0x0000000000000000 l00000000004942C4
	// succ:  l0000000000494094 l00000000004942C4
l0000000000494094:
	x3 = Mem0[x2:word64]
	x2 = x2 + 8
	w4 = w1
	w1 = w1 + 0x00000001
	branch x3 != 0x0000000000000000 l0000000000494094
	// succ:  l00000000004940A4 l0000000000494094
l00000000004940A4:
	x20 = x19 + 0xFFFFFFFFFFFFFF10
	v31 = Mem0[x0:byte]
	w1 = (word32) v31
	Mem0[x20 + 312:word32] = w4
	branch w1 == 0x00000000 l0000000000494110
	// succ:  l00000000004940B4 l0000000000494110
l00000000004940B4:
	x2 = Mem0[x5 + 8:word64]
	w1 = Mem0[x20 + 332:word32]
	x31 = x2 - x31
	NZCV = cond(x31)
	w2 = 0x00000002
l0000000000494110:
	w31 = w4 - 0x00000001
	NZCV = cond(w31)
	branch Test(LE,ZCV) l0000000000494390
	// succ:  l0000000000494118 l0000000000494390
l0000000000494118:
	x20 = x19 + 0xFFFFFFFFFFFFFF10
	w0 = Mem0[x20 + 140:word32]
	branch w0 != 0x00000000 l0000000000494348
	// succ:  l0000000000494124 l0000000000494348
l0000000000494124:
	w0 = Mem0[x20 + 340:word32]
	branch w0 == 0x00000000 l00000000004941BC
	// succ:  l000000000049412C l00000000004941BC
l000000000049412C:
	call rl_ding (retsize: 0;)
	goto l0000000000494190
	// succ:  l0000000000494190
l0000000000494134:
	w0 = 0x00000001
	Mem0[x20 + 336:word32] = w0
	w1 = Mem0[x20 + 8:word32]
	x20 = x19 + 0xFFFFFFFFFFFFFF10
	x0 = x20 + 0x0000000000000130
	call fn0000000000492644 (retsize: 0;)
	branch w0 != 0x00000000 l0000000000494070
	// succ:  l0000000000494150 l0000000000494070
l0000000000494150:
	call rl_ding (retsize: 0;)
	x0 = x19 + 0xFFFFFFFFFFFFFF10
	x0 = Mem0[x0 + 304:word64]
	branch x0 == 0x0000000000000000 l0000000000494164
	// succ:  l0000000000494160 l0000000000494164
l0000000000494160:
	call free (retsize: 0;)
	// succ:  l0000000000494164
l0000000000494164:
	x1 = x19 + 0xFFFFFFFFFFFFFF10
	x0 = Mem0[x1 + 296:word64]
	Mem0[x1 + 304:word64] = 0x0000000000000000
	branch x0 == 0x0000000000000000 l0000000000494178
	// succ:  l0000000000494174 l0000000000494178
l0000000000494174:
	call free (retsize: 0;)
	// succ:  l0000000000494178
l0000000000494178:
	w0 = Mem0[x21 + 3168:word32]
	x19 = x19 + 0xFFFFFFFFFFFFFF10
	w0 = w0 & 0xFFFFBFFF
	Mem0[x19 + 296:word64] = 0x0000000000000000
	Mem0[x19 + 136:word32] = 0x00000000
	Mem0[x21 + 3168:word32] = w0
	// succ:  l0000000000494190
l0000000000494190:
	w0 = 0x00000000
	v34 = sp + 16
	x19 = Mem0[v34:word64]
	v34 = v34 + 8
	x20 = Mem0[v34:word64]
	v35 = sp + 32
	x21 = Mem0[v35:word64]
	v35 = v35 + 8
	x22 = Mem0[v35:word64]
	v36 = sp + 48
	x23 = Mem0[v36:word64]
	v36 = v36 + 8
	x24 = Mem0[v36:word64]
	x25 = Mem0[sp + 64:word64]
	x29 = Mem0[sp:word64]
	sp = sp + 8
	x30 = Mem0[sp:word64]
	sp = sp + 96
	return
	// succ:  rl_menu_complete_exit
l00000000004941AC:
	x19 = 0x00000000004E1000
	x0 = x19 + 0xFFFFFFFFFFFFFF10
	w0 = Mem0[x0 + 288:word32]
	branch w0 != 0x00000000 l0000000000493F60
	// succ:  l00000000004941BC l0000000000493F60
l00000000004941BC:
	x1 = x19 + 0xFFFFFFFFFFFFFF10
	x2 = Mem0[x1 + 304:word64]
	branch x2 == 0x0000000000000000 l00000000004941D0
	// succ:  l00000000004941C8 l00000000004941D0
l00000000004941C8:
	w0 = Mem0[x1 + 312:word32]
	branch w0 != 0x00000000 l0000000000494228
	// succ:  l00000000004941D0 l0000000000494228
l00000000004941D0:
	call rl_ding (retsize: 0;)
	x0 = x19 + 0xFFFFFFFFFFFFFF10
	x0 = Mem0[x0 + 304:word64]
	branch x0 == 0x0000000000000000 l00000000004941E4
	// succ:  l00000000004941E0 l00000000004941E4
l00000000004941E0:
	call free (retsize: 0;)
	// succ:  l00000000004941E4
l00000000004941E4:
	x19 = x19 + 0xFFFFFFFFFFFFFF10
	Mem0[x19 + 304:word64] = 0x0000000000000000
	Mem0[x19 + 136:word32] = 0x00000000
	w0 = 0x00000000
	v37 = sp + 16
	x19 = Mem0[v37:word64]
	v37 = v37 + 8
	x20 = Mem0[v37:word64]
	v38 = sp + 32
	x21 = Mem0[v38:word64]
	v38 = v38 + 8
	x22 = Mem0[v38:word64]
	v39 = sp + 48
	x23 = Mem0[v39:word64]
	v39 = v39 + 8
	x24 = Mem0[v39:word64]
	x25 = Mem0[sp + 64:word64]
	x29 = Mem0[sp:word64]
	sp = sp + 8
	x30 = Mem0[sp:word64]
	sp = sp + 96
	return
	// succ:  rl_menu_complete_exit
l000000000049420C:
	x0 = x29 + 0x0000000000000050
	x1 = x20 + 0x0000000000000144
	call _rl_find_completion_word (retsize: 0;)
	Mem0[x20 + 328:byte] = (byte) w0
	w3 = Mem0[x23 + 136:word32]
	w2 = Mem0[x20 + 320:word32]
	goto l0000000000494008
	// succ:  l0000000000494008
l0000000000494228:
	w3 = Mem0[x1 + 316:word32]
	w24 = w24 + w3
	NZCV = cond(w24)
	branch Test(LT,N) l0000000000494294
	// succ:  l0000000000494234 l0000000000494294
l0000000000494234:
	w3 = w24 / w0
	w24 = w24 - w3 * w0
	Mem0[x1 + 316:word32] = w24
	// succ:  l0000000000494240
l0000000000494240:
	branch w24 != 0x00000000 l0000000000494300
	// succ:  l0000000000494244 l0000000000494300
l0000000000494244:
	w31 = w0 - 0x00000001
	NZCV = cond(w31)
	branch Test(LE,ZCV) l0000000000494300
	// succ:  l000000000049424C l0000000000494300
l000000000049424C:
	call rl_ding (retsize: 0;)
	x3 = x19 + 0xFFFFFFFFFFFFFF10
	x0 = Mem0[x3 + 304:word64]
	w1 = Mem0[x3 + 332:word32]
	x0 = Mem0[x0:word64]
	w2 = 0x00000002
	x3 = x3 + 0x0000000000000148
	call fn00000000004910B0 (retsize: 0;)
	// succ:  l000000000049426C
l000000000049426C:
	x19 = x19 + 0xFFFFFFFFFFFFFF10
	w0 = 0x00000001
	Mem0[x19 + 136:word32] = w0
	v41 = sp + 32
	x21 = Mem0[v41:word64]
	v41 = v41 + 8
	x22 = Mem0[v41:word64]
	w0 = 0x00000000
	v42 = sp + 16
	x19 = Mem0[v42:word64]
	v42 = v42 + 8
	x20 = Mem0[v42:word64]
	v43 = sp + 48
	x23 = Mem0[v43:word64]
	v43 = v43 + 8
	x24 = Mem0[v43:word64]
	x25 = Mem0[sp + 64:word64]
	x29 = Mem0[sp:word64]
	sp = sp + 8
	x30 = Mem0[sp:word64]
	sp = sp + 96
	return
	// succ:  rl_menu_complete_exit
l0000000000494294:
	w24 = w0 + w24
	NZCV = cond(w24)
	branch Test(LT,N) l0000000000494294
	// succ:  l000000000049429C l0000000000494294
l000000000049429C:
	x1 = x19 + 0xFFFFFFFFFFFFFF10
	Mem0[x1 + 316:word32] = w24
	goto l0000000000494240
	// succ:  l0000000000494240
l00000000004942A8:
	x22 = Mem0[x1 + 232:word64]
	branch x22 != 0x0000000000000000 l0000000000493FE4
	// succ:  l00000000004942B0 l0000000000493FE4
l00000000004942B0:
	x22 = 0x0000000000491000
	x22 = x22 + 0x000000000000053C
	goto l0000000000493FE4
	// succ:  l0000000000493FE4
l00000000004942BC:
	Mem0[x20 + 336:word32] = w0
	goto l0000000000494150
	// succ:  l0000000000494150
l00000000004942C4:
	call rl_ding (retsize: 0;)
	x0 = Mem0[x20 + 304:word64]
	branch x0 == 0x0000000000000000 l00000000004942D4
	// succ:  l00000000004942D0 l00000000004942D4
l00000000004942D0:
	call free (retsize: 0;)
	// succ:  l00000000004942D4
l00000000004942D4:
	x19 = x19 + 0xFFFFFFFFFFFFFF10
	Mem0[x19 + 304:word64] = 0x0000000000000000
	Mem0[x19 + 316:word32] = 0x00000000
	Mem0[x19 + 136:word32] = 0x00000000
	w0 = 0x00000000
	v48 = sp + 16
	x19 = Mem0[v48:word64]
	v48 = v48 + 8
	x20 = Mem0[v48:word64]
	v49 = sp + 32
	x21 = Mem0[v49:word64]
	v49 = v49 + 8
	x22 = Mem0[v49:word64]
	v50 = sp + 48
	x23 = Mem0[v50:word64]
	v50 = v50 + 8
	x24 = Mem0[v50:word64]
	x25 = Mem0[sp + 64:word64]
	x29 = Mem0[sp:word64]
	sp = sp + 8
	x30 = Mem0[sp:word64]
	sp = sp + 96
	return
	// succ:  rl_menu_complete_exit
l0000000000494300:
	x20 = x19 + 0xFFFFFFFFFFFFFF10
	x0 = Mem0[x2 + (int64) ((int32) w24):word64]
	w1 = Mem0[x20 + 332:word32]
	x3 = x20 + 0x0000000000000148
	w2 = 0x00000001
	call fn00000000004910B0 (retsize: 0;)
	v44 = Mem0[x20 + 158:int32]
	x2 = (word64) v44
	x1 = Mem0[x20 + 304:word64]
	x0 = Mem0[x20 + 296:word64]
	x21 = Mem0[x1 + x2:word64]
	x1 = x21
	strcmp(x0, x1)
	sp = sp + 0xFFFFFFFFFFFFFFF8
	w1 = Mem0[x20 + 324:word32]
	v45 = Mem0[x20 + 328:byte]
	w2 = (word32) v45
	w3 = w0
	x0 = x21
	call fn00000000004912D4 (retsize: 0;)
	goto l000000000049426C
	// succ:  l000000000049426C
l0000000000494348:
	x0 = Mem0[x20 + 304:word64]
	x25 = x25 + 0x0000000000000560
	call fn00000000004932B0 (retsize: 0;)
	w0 = Mem0[x25 + 56:word32]
	NZCV = cond(w0 - w31)
	branch Test(LE,ZCV) l00000000004941BC
	// succ:  l0000000000494360 l00000000004941BC
l0000000000494360:
	w1 = Mem0[x20 + 312:word32]
	NZCV = cond(w0 - w1)
	branch Test(GT,NZV) l00000000004941BC
	// succ:  l000000000049436C l00000000004941BC
l000000000049436C:
	call rl_ding (retsize: 0;)
	x0 = Mem0[x20 + 304:word64]
	branch x0 == 0x0000000000000000 l000000000049437C
	// succ:  l0000000000494378 l000000000049437C
l0000000000494378:
	call free (retsize: 0;)
	// succ:  l000000000049437C
l000000000049437C:
	x19 = x19 + 0xFFFFFFFFFFFFFF10
	w0 = 0x00000001
	Mem0[x19 + 304:word64] = 0x0000000000000000
	Mem0[x19 + 288:word32] = w0
	goto l0000000000494190
	// succ:  l0000000000494190
l0000000000494390:
	x19 = x19 + 0xFFFFFFFFFFFFFF10
	x0 = Mem0[x19 + 304:word64]
	w1 = Mem0[x19 + 324:word32]
	x0 = Mem0[x0:word64]
	v47 = Mem0[x19 + 328:byte]
	w2 = (word32) v47
	w3 = Mem0[x19 + 336:word32]
	call fn00000000004912D4 (retsize: 0;)
	w0 = 0x00000001
	Mem0[x19 + 288:word32] = w0
	goto l0000000000494190
	// succ:  l0000000000494190
rl_menu_complete_exit:


// rl_backward_menu_complete
// Return size: 0
void rl_backward_menu_complete()
rl_backward_menu_complete_entry:
	// succ:  l00000000004943D0
l00000000004943D0:
	sp = fp
	w0 = w31 - w0
	// succ:  l00000000004943D4_thunk_rl_menu_complete
l00000000004943D4_thunk_rl_menu_complete:
	call rl_menu_complete (retsize: 0;)
	return
	// succ:  rl_backward_menu_complete_exit
rl_backward_menu_complete_exit:


// rl_username_completion_function
// Return size: 0
void rl_username_completion_function()
rl_username_completion_function_entry:
	// succ:  l00000000004943D8
l00000000004943D8:
	sp = fp
	sp = sp + -64
	Mem0[sp:word64] = x29
	sp = sp + 8
	Mem0[sp:word64] = x30
	x29 = x31 + 0x0000000000000000
	v8 = sp + 32
	Mem0[v8:word64] = x21
	v8 = v8 + 8
	Mem0[v8:word64] = x22
	v11 = sp + 16
	Mem0[v11:word64] = x19
	v11 = v11 + 8
	Mem0[v11:word64] = x20
	x22 = x0
	x21 = 0x00000000004E1000
	branch w1 != 0x00000000 l000000000049444C
	// succ:  l00000000004943F4 l000000000049444C
l00000000004943F4:
	x0 = x21 + 0xFFFFFFFFFFFFFF10
	x0 = Mem0[x0 + 344:word64]
	branch x0 == 0x0000000000000000 l0000000000494404
	// succ:  l0000000000494400 l0000000000494404
l0000000000494400:
	call free (retsize: 0;)
	// succ:  l0000000000494404
l0000000000494404:
	v24 = Mem0[x22:byte]
	w2 = (word32) v24
	x19 = x21 + 0xFFFFFFFFFFFFFF10
	w31 = w2 - 0x0000007E
	NZCV = cond(w31)
	w1 = (word32) Test(EQ,Z)
l000000000049444C:
	x19 = x21 + 0xFFFFFFFFFFFFFF10
	// succ:  l0000000000494450
l0000000000494450:
	call getpwent (retsize: 0;)
	Mem0[x19 + 368:word64] = x0
	branch x0 == 0x0000000000000000 l0000000000494500
	// succ:  l000000000049445C l0000000000494500
l000000000049445C:
	w2 = Mem0[x19 + 360:word32]
	branch w2 == 0x00000000 l000000000049451C
	// succ:  l0000000000494464 l000000000049451C
l0000000000494464:
	x1 = Mem0[x19 + 344:word64]
	x20 = Mem0[x0:word64]
	v17 = Mem0[x1:byte]
	w4 = (word32) v17
	v19 = Mem0[x20:byte]
	w3 = (word32) v19
	NZCV = cond(w4 - w3)
	branch Test(NE,Z) l0000000000494450
	// succ:  l000000000049447C l0000000000494450
l000000000049447C:
	x0 = x1
l0000000000494490:
	x0 = x20
	strlen(x0)
	sp = sp + 0xFFFFFFFFFFFFFFF8
	x0 = x0 + 0x0000000000000002
	call xmalloc (retsize: 0;)
	x19 = x0
	x21 = x21 + 0xFFFFFFFFFFFFFF10
	v27 = Mem0[x22:byte]
	w0 = (word32) v27
	x1 = Mem0[x21 + 368:word64]
	Mem0[x19:byte] = (byte) w0
	v28 = Mem0[x21 + 178:int32]
	x0 = (word64) v28
	x1 = Mem0[x1:word64]
	x0 = x19 + x0
	strcpy(x0, x1)
	sp = sp + 0xFFFFFFFFFFFFFFF8
	w0 = Mem0[x21 + 352:word32]
	w31 = w0 - 0x0000007E
	NZCV = cond(w31)
	branch Test(EQ,Z) l00000000004944E4
	// succ:  l00000000004944D0 l00000000004944E4
l00000000004944D0:
	x0 = x19
	v29 = sp + 32
	x21 = Mem0[v29:word64]
	v29 = v29 + 8
	x22 = Mem0[v29:word64]
	v30 = sp + 16
	x19 = Mem0[v30:word64]
	v30 = v30 + 8
	x20 = Mem0[v30:word64]
	x29 = Mem0[sp:word64]
	sp = sp + 8
	x30 = Mem0[sp:word64]
	sp = sp + 64
	return
	// succ:  rl_username_completion_function_exit
l00000000004944E4:
	w0 = 0x00000001
	Mem0[x21 + 8:word32] = w0
	x0 = x19
	v31 = sp + 32
	x21 = Mem0[v31:word64]
	v31 = v31 + 8
	x22 = Mem0[v31:word64]
	v32 = sp + 16
	x19 = Mem0[v32:word64]
	v32 = v32 + 8
	x20 = Mem0[v32:word64]
	x29 = Mem0[sp:word64]
	sp = sp + 8
	x30 = Mem0[sp:word64]
	sp = sp + 64
	return
	// succ:  rl_username_completion_function_exit
l0000000000494500:
	Mem0[x29 + 48:word64] = x0
	call endpwent (retsize: 0;)
	x0 = Mem0[x29 + 48:word64]
	v22 = sp + 16
	x19 = Mem0[v22:word64]
	v22 = v22 + 8
	x20 = Mem0[v22:word64]
	v23 = sp + 32
	x21 = Mem0[v23:word64]
	v23 = v23 + 8
	x22 = Mem0[v23:word64]
	x29 = Mem0[sp:word64]
	sp = sp + 8
	x30 = Mem0[sp:word64]
	sp = sp + 64
	return
	// succ:  rl_username_completion_function_exit
l000000000049451C:
	x20 = Mem0[x0:word64]
	goto l0000000000494490
	// succ:  l0000000000494490
rl_username_completion_function_exit:


// fn0000000000494524
// Return size: 0
void fn0000000000494524()
fn0000000000494524_entry:
	// succ:  l0000000000494524
l0000000000494524:
	sp = fp
	sp = sp + -112
	Mem0[sp:word64] = x29
	sp = sp + 8
	Mem0[sp:word64] = x30
	x29 = x31 + 0x0000000000000000
	v8 = sp + 16
	Mem0[v8:word64] = x19
	v8 = v8 + 8
	Mem0[v8:word64] = x20
	v11 = sp + 32
	Mem0[v11:word64] = x21
	v11 = v11 + 8
	Mem0[v11:word64] = x22
	v14 = sp + 64
	Mem0[v14:word64] = x25
	v14 = v14 + 8
	Mem0[v14:word64] = x26
	x21 = x0
	v18 = sp + 48
	Mem0[v18:word64] = x23
	v18 = v18 + 8
	Mem0[v18:word64] = x24
	v21 = sp + 80
	Mem0[v21:word64] = x27
	v21 = v21 + 8
	Mem0[v21:word64] = x28
	strlen(x0)
	sp = sp + 0xFFFFFFFFFFFFFFF8
fn0000000000494524_exit:


// fn000000000049477C
// Return size: 0
void fn000000000049477C()
fn000000000049477C_entry:
	// succ:  l000000000049477C
l000000000049477C:
	sp = fp
	sp = sp + -80
	Mem0[sp:word64] = x29
	sp = sp + 8
	Mem0[sp:word64] = x30
	x29 = x31 + 0x0000000000000000
	v8 = sp + 16
	Mem0[v8:word64] = x19
	v8 = v8 + 8
	Mem0[v8:word64] = x20
	w20 = w0
	x0 = 0x0000000000000008
	v14 = sp + 32
	Mem0[v14:word64] = x21
	v14 = v14 + 8
	Mem0[v14:word64] = x22
	v17 = sp + 48
	Mem0[v17:word64] = x23
	v17 = v17 + 8
	Mem0[v17:word64] = x24
	Mem0[sp + 64:word64] = x25
	call xmalloc (retsize: 0;)
	w31 = w20 - 0x0000001B
	NZCV = cond(w31)
	x19 = x0
	branch Test(EQ,Z) l000000000049489C
	// succ:  l00000000004947AC l000000000049489C
l00000000004947AC:
	w31 = w20 - 0x0000007F
	NZCV = cond(w31)
	branch Test(EQ,Z) l00000000004948CC
	// succ:  l00000000004947B4 l00000000004948CC
l00000000004947B4:
	w31 = w20 - 0x0000001F
	NZCV = cond(w31)
	branch Test(LE,ZCV) l0000000000494844
	// succ:  l00000000004947BC l0000000000494844
l00000000004947BC:
	x0 = 0x0000000000000001
	x1 = 0x0000000000000000
	w3 = w0
	w4 = w1
	w2 = w20 - 0x00000080
	w31 = w2 - 0x0000001F
	NZCV = cond(w31)
	branch Test(UGT,ZC) l0000000000494810
	// succ:  l00000000004947D8 l0000000000494810
l00000000004947D8:
	w3 = 0x0000005C
	Mem0[x19 + x1:byte] = (byte) w3
l0000000000494810:
	w31 = w20 - 0x00000022
	NZCV = cond(w31)
	branch Test(EQ,Z) l0000000000494884
	// succ:  l0000000000494818 l0000000000494884
l0000000000494818:
	w31 = w20 - 0x0000005C
	NZCV = cond(w31)
	branch Test(EQ,Z) l0000000000494884
	// succ:  l0000000000494820 l0000000000494884
l0000000000494820:
	Mem0[x19 + x1:byte] = (byte) w20
	Mem0[x19 + x0:byte] = 0x00
	v32 = sp + 32
	x21 = Mem0[v32:word64]
	v32 = v32 + 8
	x22 = Mem0[v32:word64]
	x0 = x19
	v33 = sp + 48
	x23 = Mem0[v33:word64]
	v33 = v33 + 8
	x24 = Mem0[v33:word64]
	v34 = sp + 16
	x19 = Mem0[v34:word64]
	v34 = v34 + 8
	x20 = Mem0[v34:word64]
	x25 = Mem0[sp + 64:word64]
	x29 = Mem0[sp:word64]
	sp = sp + 8
	x30 = Mem0[sp:word64]
	sp = sp + 80
	return
	// succ:  fn000000000049477C_exit
l0000000000494844:
	branch (w20 & 0x00000080) == 0x00000000 l00000000004947BC
	// succ:  l0000000000494848 l00000000004947BC
l0000000000494848:
	w0 = 0x0000005C
	w20 = w20 | 0x00000040
	Mem0[x19:byte] = (byte) w0
	w0 = 0x00000043
l0000000000494884:
	w3 = w3 + 0x00000001
	w2 = 0x0000005C
	Mem0[x19 + x1:byte] = (byte) w2
	x1 = x0
l000000000049489C:
	w0 = 0x0000005C
	Mem0[x19:byte] = (byte) w0
	w0 = 0x00000065
	Mem0[x19 + 1:byte] = (byte) w0
	Mem0[x19 + 2:byte] = 0x00
	x0 = x19
	v29 = sp + 32
	x21 = Mem0[v29:word64]
	v29 = v29 + 8
	x22 = Mem0[v29:word64]
	v30 = sp + 16
	x19 = Mem0[v30:word64]
	v30 = v30 + 8
	x20 = Mem0[v30:word64]
	v31 = sp + 48
	x23 = Mem0[v31:word64]
	v31 = v31 + 8
	x24 = Mem0[v31:word64]
	x25 = Mem0[sp + 64:word64]
	x29 = Mem0[sp:word64]
	sp = sp + 8
	x30 = Mem0[sp:word64]
	sp = sp + 80
	return
	// succ:  fn000000000049477C_exit
l00000000004948CC:
	w0 = 0x0000005C
	Mem0[x19:byte] = (byte) w0
	w0 = 0x00000043
	Mem0[x19 + 1:byte] = (byte) w0
	w0 = 0x0000002D
	Mem0[x19 + 2:byte] = (byte) w0
	w0 = 0x0000003F
	Mem0[x19 + 3:byte] = (byte) w0
	Mem0[x19 + 4:byte] = 0x00
	x0 = x19
	v35 = sp + 32
	x21 = Mem0[v35:word64]
	v35 = v35 + 8
	x22 = Mem0[v35:word64]
	v36 = sp + 16
	x19 = Mem0[v36:word64]
	v36 = v36 + 8
	x20 = Mem0[v36:word64]
	v37 = sp + 48
	x23 = Mem0[v37:word64]
	v37 = v37 + 8
	x24 = Mem0[v37:word64]
	x25 = Mem0[sp + 64:word64]
	x29 = Mem0[sp:word64]
	sp = sp + 8
	x30 = Mem0[sp:word64]
	sp = sp + 80
	return
	// succ:  fn000000000049477C_exit
fn000000000049477C_exit:


// fn00000000004949F8
// Return size: 0
void fn00000000004949F8()
fn00000000004949F8_entry:
	// succ:  l00000000004949F8
l00000000004949F8:
	sp = fp
	sp = sp + -48
	Mem0[sp:word64] = x29
	sp = sp + 8
	Mem0[sp:word64] = x30
	x29 = x31 + 0x0000000000000000
	v8 = sp + 16
	Mem0[v8:word64] = x19
	v8 = v8 + 8
	Mem0[v8:word64] = x20
	x20 = 0x00000000004C4000
	x20 = x20 + 0x00000000000000C8
	x1 = 0x00000000004C4000
	Mem0[sp + 32:word64] = x21
	x20 = x20 + 0x0000000000000018
	x21 = x0
	x1 = x1 + 0x0000000000000660
	w19 = 0x00000000
	goto l0000000000494A34
	// succ:  l0000000000494A34
l0000000000494A28:
	x1 = Mem0[x20:word64]
	x20 = x20 + 24
	w19 = w19 + 0x00000001
	branch x1 == 0x0000000000000000 l0000000000494A54
	// succ:  l0000000000494A34 l0000000000494A54
l0000000000494A34:
	x0 = x21
	strcasecmp(x0, x1)
	sp = sp + 0xFFFFFFFFFFFFFFF8
	branch w0 != 0x00000000 l0000000000494A28
	// succ:  l0000000000494A40 l0000000000494A28
l0000000000494A40:
	w0 = w19
	x21 = Mem0[sp + 32:word64]
	v14 = sp + 16
	x19 = Mem0[v14:word64]
	v14 = v14 + 8
	x20 = Mem0[v14:word64]
	x29 = Mem0[sp:word64]
	sp = sp + 8
	x30 = Mem0[sp:word64]
	sp = sp + 48
	return
	// succ:  fn00000000004949F8_exit
l0000000000494A54:
	w0 = 0xFFFFFFFF
	v15 = sp + 16
	x19 = Mem0[v15:word64]
	v15 = v15 + 8
	x20 = Mem0[v15:word64]
	x21 = Mem0[sp + 32:word64]
	x29 = Mem0[sp:word64]
	sp = sp + 8
	x30 = Mem0[sp:word64]
	sp = sp + 48
	return
	// succ:  fn00000000004949F8_exit
fn00000000004949F8_exit:


// fn0000000000494A68
// Return size: 0
void fn0000000000494A68()
fn0000000000494A68_entry:
	// succ:  l0000000000494A68
l0000000000494A68:
	sp = fp
	sp = sp + -48
	Mem0[sp:word64] = x29
	sp = sp + 8
	Mem0[sp:word64] = x30
	x29 = x31 + 0x0000000000000000
	v8 = sp + 16
	Mem0[v8:word64] = x19
	v8 = v8 + 8
	Mem0[v8:word64] = x20
	x20 = 0x00000000004C4000
	x20 = x20 + 0x00000000000000C8
	x1 = 0x00000000004C4000
	Mem0[sp + 32:word64] = x21
	x20 = x20 + 0x00000000000002D0
	x21 = x0
	x1 = x1 + 0x0000000000000678
	w19 = 0x00000000
	goto l0000000000494AA4
	// succ:  l0000000000494AA4
l0000000000494A98:
	x20 = x20 + 24
	x1 = Mem0[x20:word64]
	w19 = w19 + 0x00000001
	branch x1 == 0x0000000000000000 l0000000000494AC4
	// succ:  l0000000000494AA4 l0000000000494AC4
l0000000000494AA4:
	x0 = x21
	strcasecmp(x0, x1)
	sp = sp + 0xFFFFFFFFFFFFFFF8
	branch w0 != 0x00000000 l0000000000494A98
	// succ:  l0000000000494AB0 l0000000000494A98
l0000000000494AB0:
	w0 = w19
	x21 = Mem0[sp + 32:word64]
	v14 = sp + 16
	x19 = Mem0[v14:word64]
	v14 = v14 + 8
	x20 = Mem0[v14:word64]
	x29 = Mem0[sp:word64]
	sp = sp + 8
	x30 = Mem0[sp:word64]
	sp = sp + 48
	return
	// succ:  fn0000000000494A68_exit
l0000000000494AC4:
	w0 = 0xFFFFFFFF
	v15 = sp + 16
	x19 = Mem0[v15:word64]
	v15 = v15 + 8
	x20 = Mem0[v15:word64]
	x21 = Mem0[sp + 32:word64]
	x29 = Mem0[sp:word64]
	sp = sp + 8
	x30 = Mem0[sp:word64]
	sp = sp + 48
	return
	// succ:  fn0000000000494A68_exit
fn0000000000494A68_exit:


// fn0000000000494C18
// Return size: 0
void fn0000000000494C18()
fn0000000000494C18_entry:
	// succ:  l0000000000494C18
l0000000000494C18:
	sp = fp
	sp = sp + -96
	Mem0[sp:word64] = x29
	sp = sp + 8
	Mem0[sp:word64] = x30
	x29 = x31 + 0x0000000000000000
	v8 = sp + 64
	Mem0[v8:word64] = x25
	v8 = v8 + 8
	Mem0[v8:word64] = x26
	v11 = sp + 80
	Mem0[v11:word64] = x27
	v11 = v11 + 8
	Mem0[v11:word64] = x28
	x25 = 0x00000000004AC000
	x28 = 0x00000000004C4000
	x27 = 0x00000000004C4000
	v14 = sp + 16
	Mem0[v14:word64] = x19
	v14 = v14 + 8
	Mem0[v14:word64] = x20
	v17 = sp + 32
	Mem0[v17:word64] = x21
	v17 = v17 + 8
	Mem0[v17:word64] = x22
	v20 = sp + 48
	Mem0[v20:word64] = x23
	v20 = v20 + 8
	Mem0[v20:word64] = x24
	w26 = w0
	x21 = x2
	x20 = x1
	w19 = 0x00000000
	x28 = x28 + 0x0000000000000698
	x25 = x25 + 0x0000000000000460
	x27 = x27 + 0x0000000000000688
	goto l0000000000494CCC
	// succ:  l0000000000494CCC
l0000000000494C60:
	w31 = w3 - 0x00000002
	NZCV = cond(w31)
	branch Test(NE,Z) l0000000000494CBC
	// succ:  l0000000000494C68 l0000000000494CBC
l0000000000494C68:
	w0 = w19
	call fn000000000049477C (retsize: 0;)
	x23 = x0
	x0 = Mem0[x20 + 8:word64]
	call fn0000000000494524 (retsize: 0;)
	x22 = x0
	x31 = x21 - x31
	NZCV = cond(x31)
l0000000000494CBC:
	w19 = w19 + 0x00000001
	w31 = w19 - 0x00000101
	NZCV = cond(w31)
	x20 = x20 + 0x0000000000000010
	branch Test(EQ,Z) l0000000000494D58
	// succ:  l0000000000494CCC l0000000000494D58
l0000000000494CCC:
	v27 = Mem0[x20:byte]
	w3 = (word32) v27
	w31 = w3 - 0x00000001
	NZCV = cond(w31)
	branch Test(NE,Z) l0000000000494C60
	// succ:  l0000000000494CD8 l0000000000494C60
l0000000000494CD8:
	branch x21 == 0x0000000000000000 l0000000000494D8C
	// succ:  l0000000000494CDC l0000000000494D8C
l0000000000494CDC:
	x0 = x21
	strlen(x0)
	sp = sp + 0xFFFFFFFFFFFFFFF8
l0000000000494D58:
	v32 = sp + 16
	x19 = Mem0[v32:word64]
	v32 = v32 + 8
	x20 = Mem0[v32:word64]
	v33 = sp + 32
	x21 = Mem0[v33:word64]
	v33 = v33 + 8
	x22 = Mem0[v33:word64]
	v34 = sp + 48
	x23 = Mem0[v34:word64]
	v34 = v34 + 8
	x24 = Mem0[v34:word64]
	v35 = sp + 64
	x25 = Mem0[v35:word64]
	v35 = v35 + 8
	x26 = Mem0[v35:word64]
	v36 = sp + 80
	x27 = Mem0[v36:word64]
	v36 = v36 + 8
	x28 = Mem0[v36:word64]
	x29 = Mem0[sp:word64]
	sp = sp + 8
	x30 = Mem0[sp:word64]
	sp = sp + 96
	return
	// succ:  fn0000000000494C18_exit
l0000000000494D8C:
fn0000000000494C18_exit:


// fn00000000004951CC
// Return size: 0
void fn00000000004951CC()
fn00000000004951CC_entry:
	// succ:  l00000000004951CC
l00000000004951CC:
	sp = fp
	x2 = 0x00000000004E2000
	x2 = x2 + 0x0000000000000088
	w4 = Mem0[x2 + 16:word32]
	x3 = x0
	branch w4 != 0x00000000 l00000000004951F0
	// succ:  l00000000004951E0 l00000000004951F0
l00000000004951E0:
	x0 = 0x00000000004BF000
	x0 = x0 + 0x0000000000000050
	x1 = x3
	// succ:  l00000000004951EC_thunk__rl_errmsg
l00000000004951EC_thunk__rl_errmsg:
	call _rl_errmsg (retsize: 0;)
	return
	// succ:  fn00000000004951CC_exit
l00000000004951F0:
	x1 = Mem0[x2 + 24:word64]
	x0 = 0x00000000004C4000
	w2 = Mem0[x2 + 32:word32]
	x0 = x0 + 0x00000000000006D8
	// succ:  l0000000000495200_thunk__rl_errmsg
l0000000000495200_thunk__rl_errmsg:
	call _rl_errmsg (retsize: 0;)
	return
	// succ:  fn00000000004951CC_exit
fn00000000004951CC_exit:


// rl_bind_key
// Return size: 0
void rl_bind_key()
rl_bind_key_entry:
	// succ:  l000000000049557C
l000000000049557C:
	sp = fp
	branch (w0 & 0x00000000) == 0x00000000 l00000000004955B0
	// succ:  l0000000000495580 l00000000004955B0
l0000000000495580:
	w2 = w0 - 0x00000080
	w31 = w2 - 0x0000007F
	NZCV = cond(w31)
	branch Test(UGT,ZC) l00000000004955B4
	// succ:  l000000000049558C l00000000004955B4
l000000000049558C:
	x2 = 0x00000000004D9000
	w2 = Mem0[x2 + 1212:word32]
	branch w2 == 0x00000000 l00000000004955B4
	// succ:  l0000000000495598 l00000000004955B4
l0000000000495598:
	x2 = 0x00000000004D9000
	x2 = Mem0[x2 + 1200:word64]
	v10 = Mem0[x2 + 432:byte]
	w3 = (word32) v10
	x2 = x2 + 0x00000000000001B0
	w31 = w3 - 0x00000001
	NZCV = cond(w31)
	branch Test(EQ,Z) l00000000004955DC
	// succ:  l00000000004955B0 l00000000004955DC
l00000000004955B0:
	return
	// succ:  rl_bind_key_exit
l00000000004955B4:
	x2 = 0x00000000004D9000
	x2 = Mem0[x2 + 1200:word64]
l00000000004955DC:
	x2 = Mem0[x2 + 8:word64]
	w0 = w0 & 0xFFFFFF7F
rl_bind_key_exit:


// rl_add_defun
// Return size: 0
void rl_add_defun()
rl_add_defun_entry:
	// succ:  l00000000004955FC
l00000000004955FC:
	sp = fp
	sp = sp + -32
	Mem0[sp:word64] = x29
	sp = sp + 8
	Mem0[sp:word64] = x30
	x29 = x31 + 0x0000000000000000
	v8 = sp + 16
	Mem0[v8:word64] = x19
	v8 = v8 + 8
	Mem0[v8:word64] = x20
	w31 = w2 + 0x00000001
	NZCV = cond(w31)
	x20 = x0
	x19 = x1
	branch Test(EQ,Z) l0000000000495620
	// succ:  l0000000000495618 l0000000000495620
l0000000000495618:
	w0 = w2
	call rl_bind_key (retsize: 0;)
	// succ:  l0000000000495620
l0000000000495620:
	x1 = x19
	x0 = x20
	call rl_add_funmap_entry (retsize: 0;)
	w0 = 0x00000000
	v16 = sp + 16
	x19 = Mem0[v16:word64]
	v16 = v16 + 8
	x20 = Mem0[v16:word64]
	x29 = Mem0[sp:word64]
	sp = sp + 8
	x30 = Mem0[sp:word64]
	sp = sp + 32
	return
	// succ:  rl_add_defun_exit
rl_add_defun_exit:


// rl_bind_key_in_map
// Return size: 0
void rl_bind_key_in_map()
rl_bind_key_in_map_entry:
	// succ:  l000000000049563C
l000000000049563C:
	sp = fp
	sp = sp + -32
	Mem0[sp:word64] = x29
	sp = sp + 8
	Mem0[sp:word64] = x30
	x29 = x31 + 0x0000000000000000
	v8 = sp + 16
	Mem0[v8:word64] = x19
	v8 = v8 + 8
	Mem0[v8:word64] = x20
	x19 = 0x00000000004D9000
	x20 = Mem0[x19 + 1200:word64]
	Mem0[x19 + 1200:word64] = x2
	call rl_bind_key (retsize: 0;)
	Mem0[x19 + 1200:word64] = x20
	v10 = sp + 16
	x19 = Mem0[v10:word64]
	v10 = v10 + 8
	x20 = Mem0[v10:word64]
	x29 = Mem0[sp:word64]
	sp = sp + 8
	x30 = Mem0[sp:word64]
	sp = sp + 32
	return
	// succ:  rl_bind_key_in_map_exit
rl_bind_key_in_map_exit:


// rl_unbind_key
// Return size: 0
void rl_unbind_key()
rl_unbind_key_entry:
	// succ:  l0000000000495668
l0000000000495668:
	sp = fp
	x1 = 0x0000000000000000
	// succ:  l000000000049566C_thunk_rl_bind_key
l000000000049566C_thunk_rl_bind_key:
	call rl_bind_key (retsize: 0;)
	return
	// succ:  rl_unbind_key_exit
rl_unbind_key_exit:


// rl_unbind_key_in_map
// Return size: 0
void rl_unbind_key_in_map()
rl_unbind_key_in_map_entry:
	// succ:  l0000000000495670
l0000000000495670:
	sp = fp
	sp = sp + -32
	Mem0[sp:word64] = x29
	sp = sp + 8
	Mem0[sp:word64] = x30
	x29 = x31 + 0x0000000000000000
	v8 = sp + 16
	Mem0[v8:word64] = x19
	v8 = v8 + 8
	Mem0[v8:word64] = x20
	x19 = 0x00000000004D9000
	x20 = Mem0[x19 + 1200:word64]
	Mem0[x19 + 1200:word64] = x1
	x1 = 0x0000000000000000
	call rl_bind_key (retsize: 0;)
	Mem0[x19 + 1200:word64] = x20
	v10 = sp + 16
	x19 = Mem0[v10:word64]
	v10 = v10 + 8
	x20 = Mem0[v10:word64]
	x29 = Mem0[sp:word64]
	sp = sp + 8
	x30 = Mem0[sp:word64]
	sp = sp + 32
	return
	// succ:  rl_unbind_key_in_map_exit
rl_unbind_key_in_map_exit:


// rl_unbind_function_in_map
// Return size: 0
void rl_unbind_function_in_map()
rl_unbind_function_in_map_entry:
	// succ:  l00000000004956A0
l00000000004956A0:
	sp = fp
	x2 = 0x0000000000000000
	w6 = w2
	x5 = 0x0000000000001010
	goto l00000000004956B8
	// succ:  l00000000004956B8
l00000000004956B0:
	x31 = x2 - x5
	NZCV = cond(x31)
	branch Test(EQ,Z) l00000000004956E4
	// succ:  l00000000004956B8 l00000000004956E4
l00000000004956B8:
	v9 = Mem0[x1 + x2:byte]
	w3 = (word32) v9
	x4 = x1 + x2
	x2 = x2 + 0x0000000000000010
	branch w3 != 0x00000000 l00000000004956B0
	// succ:  l00000000004956C8 l00000000004956B0
l00000000004956C8:
	x3 = Mem0[x4 + 8:word64]
	x31 = x3 - x0
	NZCV = cond(x31)
	branch Test(NE,Z) l00000000004956B0
	// succ:  l00000000004956D4 l00000000004956B0
l00000000004956D4:
	Mem0[x4 + 8:word64] = 0x0000000000000000
	x31 = x2 - x5
	NZCV = cond(x31)
	w6 = 0x00000001
	branch Test(NE,Z) l00000000004956B8
	// succ:  l00000000004956E4 l00000000004956B8
l00000000004956E4:
	w0 = w6
	return
	// succ:  rl_unbind_function_in_map_exit
rl_unbind_function_in_map_exit:


// rl_translate_keyseq
// Return size: 0
void rl_translate_keyseq()
rl_translate_keyseq_entry:
	// succ:  l00000000004956EC
l00000000004956EC:
	sp = fp
	sp = sp + -144
	Mem0[sp:word64] = x29
	sp = sp + 8
	Mem0[sp:word64] = x30
	x29 = x31 + 0x0000000000000000
	v8 = sp + 32
	Mem0[v8:word64] = x21
	v8 = v8 + 8
	Mem0[v8:word64] = x22
	v11 = sp + 64
	Mem0[v11:word64] = x25
	v11 = v11 + 8
	Mem0[v11:word64] = x26
	v14 = sp + 16
	Mem0[v14:word64] = x19
	v14 = v14 + 8
	Mem0[v14:word64] = x20
	v17 = sp + 48
	Mem0[v17:word64] = x23
	v17 = v17 + 8
	Mem0[v17:word64] = x24
	v20 = sp + 80
	Mem0[v20:word64] = x27
	v20 = v20 + 8
	Mem0[v20:word64] = x28
	v23 = Mem0[x0:byte]
	w3 = (word32) v23
	x21 = x0
	x25 = x1
	x22 = x2
	branch w3 == 0x00000000 l0000000000495B44
	// succ:  l000000000049571C l0000000000495B44
l000000000049571C:
	x0 = 0x00000000004D9000
	w20 = 0x00000000
	x7 = 0x00000000004C4000
	x23 = 0x00000000004C4000
	x0 = x0 + 0x00000000000004BC
	w19 = w20
	x26 = x7 + 0x0000000000000030
	w28 = 0x0000000C
	w24 = 0x0000001B
	w27 = 0x0000007F
	x23 = x23 + 0x00000000000007C8
	Mem0[x29 + 96:word64] = x0
	goto l0000000000495764
	// succ:  l0000000000495764
l0000000000495750:
	Mem0[x25 + (int64) ((int32) w20):byte] = (byte) w3
	w20 = w20 + 0x00000001
	w19 = w19 + 0x00000001
	v41 = Mem0[x21 + (int64) ((int32) w19):byte]
	w3 = (word32) v41
	branch w3 == 0x00000000 l00000000004957C8
	// succ:  l0000000000495764 l00000000004957C8
l0000000000495764:
	w31 = w3 - 0x0000005C
	NZCV = cond(w31)
	branch Test(NE,Z) l0000000000495750
	// succ:  l000000000049576C l0000000000495750
l000000000049576C:
	w3 = w19 + 0x00000001
l00000000004957C8:
l00000000004957CC:
	Mem0[x22:word32] = w20
	Mem0[x25 + x0:byte] = 0x00
	v36 = sp + 16
	x19 = Mem0[v36:word64]
	v36 = v36 + 8
	x20 = Mem0[v36:word64]
	w0 = 0x00000000
	v37 = sp + 32
	x21 = Mem0[v37:word64]
	v37 = v37 + 8
	x22 = Mem0[v37:word64]
	v38 = sp + 48
	x23 = Mem0[v38:word64]
	v38 = v38 + 8
	x24 = Mem0[v38:word64]
	v39 = sp + 64
	x25 = Mem0[v39:word64]
	v39 = v39 + 8
	x26 = Mem0[v39:word64]
	v40 = sp + 80
	x27 = Mem0[v40:word64]
	v40 = v40 + 8
	x28 = Mem0[v40:word64]
	x29 = Mem0[sp:word64]
	sp = sp + 8
	x30 = Mem0[sp:word64]
	sp = sp + 144
	return
	// succ:  rl_translate_keyseq_exit
l0000000000495B44:
	x0 = 0x0000000000000000
	w20 = w0
	goto l00000000004957CC
	// succ:  l00000000004957CC
rl_translate_keyseq_exit:


// rl_generic_bind
// Return size: 0
void rl_generic_bind()
rl_generic_bind_entry:
	// succ:  l0000000000495BC8
l0000000000495BC8:
	sp = fp
	sp = sp + -160
	Mem0[sp:word64] = x29
	sp = sp + 8
	Mem0[sp:word64] = x30
	x29 = x31 + 0x0000000000000000
	v6 = sp + 64
	Mem0[v6:word64] = x25
	v6 = v6 + 8
	Mem0[v6:word64] = x26
	v9 = sp + 16
	Mem0[v9:word64] = x19
	v9 = v9 + 8
	Mem0[v9:word64] = x20
	v12 = sp + 32
	Mem0[v12:word64] = x21
	v12 = v12 + 8
	Mem0[v12:word64] = x22
	v15 = sp + 48
	Mem0[v15:word64] = x23
	v15 = v15 + 8
	Mem0[v15:word64] = x24
	v18 = sp + 80
	Mem0[v18:word64] = x27
	v18 = v18 + 8
	Mem0[v18:word64] = x28
	w25 = w0
	x7 = x2
	branch x1 == 0x0000000000000000 l0000000000495BF8
	// succ:  l0000000000495BF0 l0000000000495BF8
l0000000000495BF0:
	v26 = Mem0[x1:byte]
	w0 = (word32) v26
	branch w0 != 0x00000000 l0000000000495C24
	// succ:  l0000000000495BF8 l0000000000495C24
l0000000000495BF8:
	w31 = w25 - 0x00000002
	NZCV = cond(w31)
	w27 = 0xFFFFFFFF
	branch Test(EQ,Z) l0000000000495E0C
	// succ:  l0000000000495C04 l0000000000495E0C
l0000000000495C04:
	w0 = w27
	v31 = sp + 16
	x19 = Mem0[v31:word64]
	v31 = v31 + 8
	x20 = Mem0[v31:word64]
	v32 = sp + 32
	x21 = Mem0[v32:word64]
	v32 = v32 + 8
	x22 = Mem0[v32:word64]
	v33 = sp + 48
	x23 = Mem0[v33:word64]
	v33 = v33 + 8
	x24 = Mem0[v33:word64]
	v34 = sp + 64
	x25 = Mem0[v34:word64]
	v34 = v34 + 8
	x26 = Mem0[v34:word64]
	v35 = sp + 80
	x27 = Mem0[v35:word64]
	v35 = v35 + 8
	x28 = Mem0[v35:word64]
	x29 = Mem0[sp:word64]
	sp = sp + 8
	x30 = Mem0[sp:word64]
	sp = sp + 160
	return
	// succ:  rl_generic_bind_exit
l0000000000495C24:
	x0 = x1
	Mem0[x29 + 136:word64] = x3
	Mem0[x29 + 128:word64] = x1
	Mem0[x29 + 144:word64] = x2
	strlen(x0)
	sp = sp + 0xFFFFFFFFFFFFFFF8
l0000000000495E0C:
	x0 = x7
	call xfree (retsize: 0;)
	w0 = w27
	v37 = sp + 16
	x19 = Mem0[v37:word64]
	v37 = v37 + 8
	x20 = Mem0[v37:word64]
	v38 = sp + 32
	x21 = Mem0[v38:word64]
	v38 = v38 + 8
	x22 = Mem0[v38:word64]
	v39 = sp + 48
	x23 = Mem0[v39:word64]
	v39 = v39 + 8
	x24 = Mem0[v39:word64]
	v40 = sp + 64
	x25 = Mem0[v40:word64]
	v40 = v40 + 8
	x26 = Mem0[v40:word64]
	v41 = sp + 80
	x27 = Mem0[v41:word64]
	v41 = v41 + 8
	x28 = Mem0[v41:word64]
	x29 = Mem0[sp:word64]
	sp = sp + 8
	x30 = Mem0[sp:word64]
	sp = sp + 160
	return
	// succ:  rl_generic_bind_exit
rl_generic_bind_exit:


// rl_bind_keyseq
// Return size: 0
void rl_bind_keyseq()
rl_bind_keyseq_entry:
	// succ:  l0000000000495E44
l0000000000495E44:
	sp = fp
	x4 = x0
	x0 = 0x00000000004D9000
	x3 = Mem0[x0 + 1200:word64]
	x2 = x1
	w0 = 0x00000000
	x1 = x4
	// succ:  l0000000000495E5C_thunk_rl_generic_bind
l0000000000495E5C_thunk_rl_generic_bind:
	call rl_generic_bind (retsize: 0;)
	return
	// succ:  rl_bind_keyseq_exit
rl_bind_keyseq_exit:


// rl_bind_keyseq_in_map
// Return size: 0
void rl_bind_keyseq_in_map()
rl_bind_keyseq_in_map_entry:
	// succ:  l0000000000495E60
l0000000000495E60:
	sp = fp
	x5 = x0
	x4 = x1
	x3 = x2
	w0 = 0x00000000
	x1 = x5
	x2 = x4
	// succ:  l0000000000495E78_thunk_rl_generic_bind
l0000000000495E78_thunk_rl_generic_bind:
	call rl_generic_bind (retsize: 0;)
	return
	// succ:  rl_bind_keyseq_in_map_exit
rl_bind_keyseq_in_map_exit:


// rl_set_key
// Return size: 0
void rl_set_key()
rl_set_key_entry:
	// succ:  l0000000000495E7C
l0000000000495E7C:
	sp = fp
	x5 = x0
	x4 = x1
	x3 = x2
	w0 = 0x00000000
	x1 = x5
	x2 = x4
	// succ:  l0000000000495E94_thunk_rl_generic_bind
l0000000000495E94_thunk_rl_generic_bind:
	call rl_generic_bind (retsize: 0;)
	return
	// succ:  rl_set_key_exit
rl_set_key_exit:


// rl_macro_bind
// Return size: 0
void rl_macro_bind()
rl_macro_bind_entry:
	// succ:  l0000000000495E98
l0000000000495E98:
	sp = fp
	sp = sp + -64
	Mem0[sp:word64] = x29
	sp = sp + 8
	Mem0[sp:word64] = x30
	x29 = x31 + 0x0000000000000000
	v8 = sp + 32
	Mem0[v8:word64] = x21
	v8 = v8 + 8
	Mem0[v8:word64] = x22
	x21 = x0
	x0 = x1
	v13 = sp + 16
	Mem0[v13:word64] = x19
	v13 = v13 + 8
	Mem0[v13:word64] = x20
	x22 = x2
	x19 = x1
	strlen(x0)
	sp = sp + 0xFFFFFFFFFFFFFFF8
rl_macro_bind_exit:


// rl_untranslate_keyseq
// Return size: 0
void rl_untranslate_keyseq()
rl_untranslate_keyseq_entry:
	// succ:  l000000000049608C
l000000000049608C:
	sp = fp
	sp = sp + -80
	Mem0[sp:word64] = x29
	sp = sp + 8
	Mem0[sp:word64] = x30
	x29 = x31 + 0x0000000000000000
	w1 = w0 - 0x00000080
	v10 = sp + 16
	Mem0[v10:word64] = x19
	v10 = v10 + 8
	Mem0[v10:word64] = x20
	v13 = sp + 32
	Mem0[v13:word64] = x21
	v13 = v13 + 8
	Mem0[v13:word64] = x22
	v16 = sp + 48
	Mem0[v16:word64] = x23
	v16 = v16 + 8
	Mem0[v16:word64] = x24
	Mem0[sp + 64:word64] = x25
	w31 = w1 - 0x0000007F
	NZCV = cond(w31)
	branch Test(UGT,ZC) l0000000000496148
	// succ:  l00000000004960B0 l0000000000496148
l00000000004960B0:
	x19 = 0x00000000004E2000
	x2 = x19 + 0x0000000000000088
	w3 = 0x0000005C
	x1 = x2 + 0x0000000000000048
	Mem0[x2 + 72:byte] = (byte) w3
	w2 = 0x0000004D
	Mem0[x1 + 1:byte] = (byte) w2
	w2 = 0x0000002D
	Mem0[x1 + 2:byte] = (byte) w2
	w0 = w0 & 0xFFFFFF7F
	w31 = w0 - 0x0000001B
	NZCV = cond(w31)
	branch Test(EQ,Z) l0000000000496214
	// succ:  l00000000004960E0 l0000000000496214
l00000000004960E0:
	w31 = w0 - 0x00000022
	NZCV = cond(w31)
	w5 = (word32) Test(EQ,Z)
	w31 = w0 - 0x0000005C
	NZCV = cond(w31)
	w1 = (word32) Test(EQ,Z)
	w5 = w5 | w1
l0000000000496100:
	w1 = w3
	branch w5 == 0x00000000 l0000000000496120
	// succ:  l0000000000496108 l0000000000496120
l0000000000496108:
	x0 = x19 + 0x0000000000000088
	x0 = x0 + 0x0000000000000048
	w5 = 0x0000005C
	Mem0[x0 + (int64) ((int32) w2):byte] = (byte) w5
	w1 = w3 + 0x00000001
	w2 = w3
	// succ:  l0000000000496120
l0000000000496120:
	x19 = x19 + 0x0000000000000088
	x0 = x19 + 0x0000000000000048
	Mem0[x0 + (int64) ((int32) w2):byte] = (byte) w4
	Mem0[x0 + (int64) ((int32) w1):byte] = 0x00
	v30 = sp + 16
	x19 = Mem0[v30:word64]
	v30 = v30 + 8
	x20 = Mem0[v30:word64]
	v31 = sp + 32
	x21 = Mem0[v31:word64]
	v31 = v31 + 8
	x22 = Mem0[v31:word64]
	v32 = sp + 48
	x23 = Mem0[v32:word64]
	v32 = v32 + 8
	x24 = Mem0[v32:word64]
	x25 = Mem0[sp + 64:word64]
	x29 = Mem0[sp:word64]
	sp = sp + 8
	x30 = Mem0[sp:word64]
	sp = sp + 80
	return
	// succ:  rl_untranslate_keyseq_exit
l0000000000496148:
	w31 = w0 - 0x0000001B
	NZCV = cond(w31)
	branch Test(EQ,Z) l0000000000496260
	// succ:  l0000000000496150 l0000000000496260
l0000000000496150:
	w31 = w0 - 0x0000001F
	NZCV = cond(w31)
	branch Test(GT,NZV) l0000000000496230
	// succ:  l0000000000496158 l0000000000496230
l0000000000496158:
	branch (w0 & 0x00000080) == 0x00000000 l0000000000496238
	// succ:  l000000000049615C l0000000000496238
l000000000049615C:
	x19 = 0x00000000004E2000
	x2 = x19 + 0x0000000000000088
	w3 = 0x0000005C
	x1 = x2 + 0x0000000000000048
	w0 = w0 | 0x00000040
	Mem0[x2 + 72:byte] = (byte) w3
	w2 = 0x00000043
l0000000000496214:
	w1 = 0x0000005C
	x0 = x19 + 0x0000000000000088
	Mem0[x0 + 75:byte] = (byte) w1
	w4 = 0x00000065
	w1 = 0x00000005
	w2 = 0x00000004
	goto l0000000000496120
	// succ:  l0000000000496120
l0000000000496230:
	w31 = w0 - 0x0000007F
	NZCV = cond(w31)
	branch Test(EQ,Z) l0000000000496284
	// succ:  l0000000000496238 l0000000000496284
l0000000000496238:
	w31 = w0 - 0x0000005C
	NZCV = cond(w31)
	w5 = (word32) Test(EQ,Z)
	w31 = w0 - 0x00000022
	NZCV = cond(w31)
	w1 = (word32) Test(EQ,Z)
	w5 = w5 | w1
l0000000000496260:
	x19 = 0x00000000004E2000
	x0 = x19 + 0x0000000000000088
	w1 = 0x0000005C
	Mem0[x0 + 72:byte] = (byte) w1
	w4 = 0x00000065
	w3 = 0x00000002
	w5 = 0x00000000
	w2 = 0x00000001
	goto l0000000000496100
	// succ:  l0000000000496100
l0000000000496284:
	x19 = 0x00000000004E2000
	x1 = x19 + 0x0000000000000088
	w2 = 0x0000005C
	x0 = x1 + 0x0000000000000048
	Mem0[x1 + 72:byte] = (byte) w2
	w1 = 0x00000043
	Mem0[x0 + 1:byte] = (byte) w1
	w1 = 0x0000002D
	Mem0[x0 + 2:byte] = (byte) w1
	w4 = 0x0000003F
	w3 = 0x00000004
	w5 = 0x00000000
	w2 = 0x00000003
	goto l0000000000496100
	// succ:  l0000000000496100
rl_untranslate_keyseq_exit:


// rl_named_function
// Return size: 0
void rl_named_function()
rl_named_function_entry:
	// succ:  l00000000004962F0
l00000000004962F0:
	sp = fp
	sp = sp + -48
	Mem0[sp:word64] = x29
	sp = sp + 8
	Mem0[sp:word64] = x30
	x29 = x31 + 0x0000000000000000
	v8 = sp + 16
	Mem0[v8:word64] = x19
	v8 = v8 + 8
	Mem0[v8:word64] = x20
	Mem0[sp + 32:word64] = x21
	x21 = x0
	call rl_initialize_funmap (retsize: 0;)
	x0 = 0x00000000004E4000
	x20 = Mem0[x0 + 176:word64]
	x19 = Mem0[x20:word64]
	branch x19 == 0x0000000000000000 l000000000049634C
	// succ:  l0000000000496318 l000000000049634C
l0000000000496318:
	x20 = x20 + 0x0000000000000008
	goto l0000000000496328
	// succ:  l0000000000496328
l0000000000496320:
	x19 = Mem0[x20:word64]
	x20 = x20 + 8
	branch x19 == 0x0000000000000000 l000000000049634C
	// succ:  l0000000000496328 l000000000049634C
l0000000000496328:
	x0 = Mem0[x19:word64]
	x1 = x21
	strcasecmp(x0, x1)
	sp = sp + 0xFFFFFFFFFFFFFFF8
	branch w0 != 0x00000000 l0000000000496320
	// succ:  l0000000000496338 l0000000000496320
l0000000000496338:
	x0 = Mem0[x19 + 8:word64]
	x21 = Mem0[sp + 32:word64]
	v14 = sp + 16
	x19 = Mem0[v14:word64]
	v14 = v14 + 8
	x20 = Mem0[v14:word64]
	x29 = Mem0[sp:word64]
	sp = sp + 8
	x30 = Mem0[sp:word64]
	sp = sp + 48
	return
	// succ:  rl_named_function_exit
l000000000049634C:
	x0 = x19
	x21 = Mem0[sp + 32:word64]
	v11 = sp + 16
	x19 = Mem0[v11:word64]
	v11 = v11 + 8
	x20 = Mem0[v11:word64]
	x29 = Mem0[sp:word64]
	sp = sp + 8
	x30 = Mem0[sp:word64]
	sp = sp + 48
	return
	// succ:  rl_named_function_exit
rl_named_function_exit:


// rl_unbind_command_in_map
// Return size: 0
void rl_unbind_command_in_map()
rl_unbind_command_in_map_entry:
	// succ:  l0000000000496360
l0000000000496360:
	sp = fp
	sp = sp + -32
	Mem0[sp:word64] = x29
	sp = sp + 8
	Mem0[sp:word64] = x30
	x29 = x31 + 0x0000000000000000
	Mem0[x29 + 16:word64] = x1
	call rl_named_function (retsize: 0;)
	x1 = Mem0[x29 + 16:word64]
	branch x0 == 0x0000000000000000 l00000000004963C0
	// succ:  l0000000000496378 l00000000004963C0
l0000000000496378:
	x2 = 0x0000000000000000
	w6 = w2
	x5 = 0x0000000000001010
	goto l0000000000496390
	// succ:  l0000000000496390
l0000000000496388:
	x31 = x2 - x5
	NZCV = cond(x31)
	branch Test(EQ,Z) l00000000004963BC
	// succ:  l0000000000496390 l00000000004963BC
l0000000000496390:
	v13 = Mem0[x1 + x2:byte]
	w3 = (word32) v13
	x4 = x1 + x2
	x2 = x2 + 0x0000000000000010
	branch w3 != 0x00000000 l0000000000496388
	// succ:  l00000000004963A0 l0000000000496388
l00000000004963A0:
	x3 = Mem0[x4 + 8:word64]
	x31 = x0 - x3
	NZCV = cond(x31)
	branch Test(NE,Z) l0000000000496388
	// succ:  l00000000004963AC l0000000000496388
l00000000004963AC:
	Mem0[x4 + 8:word64] = 0x0000000000000000
	x31 = x2 - x5
	NZCV = cond(x31)
	w6 = 0x00000001
	branch Test(NE,Z) l0000000000496390
	// succ:  l00000000004963BC l0000000000496390
l00000000004963BC:
	w0 = w6
	// succ:  l00000000004963C0
l00000000004963C0:
	x29 = Mem0[sp:word64]
	sp = sp + 8
	x30 = Mem0[sp:word64]
	sp = sp + 32
	return
	// succ:  rl_unbind_command_in_map_exit
rl_unbind_command_in_map_exit:


// rl_function_of_keyseq
// Return size: 0
void rl_function_of_keyseq()
rl_function_of_keyseq_entry:
	// succ:  l00000000004963C8
l00000000004963C8:
	sp = fp
	branch x1 == 0x0000000000000000 l0000000000496480
	// succ:  l00000000004963CC l0000000000496480
l00000000004963CC:
	branch x0 == 0x0000000000000000 l0000000000496474
	// succ:  l00000000004963D0 l0000000000496474
l00000000004963D0:
	v6 = Mem0[x0:byte]
	w3 = (word32) v6
	branch w3 == 0x00000000 l0000000000496478
	// succ:  l00000000004963D8 l0000000000496478
l00000000004963D8:
	x4 = 0x00000000004D9000
	w8 = Mem0[x4 + 1212:word32]
	x5 = 0x0000000000000000
	x4 = 0x0000000000000001
	branch (w3 & 0x00000080) == 0x00000000 l0000000000496428
	// succ:  l00000000004963EC l0000000000496428
l00000000004963EC:
l0000000000496428:
	branch w8 == 0x00000000 l00000000004963EC
	// succ:  l000000000049642C l00000000004963EC
l000000000049642C:
	v11 = Mem0[x1 + 432:byte]
	w6 = (word32) v11
	x1 = x1 + 0x00000000000001B0
	w31 = w6 - 0x00000001
	NZCV = cond(w31)
	branch Test(NE,Z) l0000000000496468
	// succ:  l000000000049643C l0000000000496468
l000000000049643C:
	x1 = Mem0[x1 + 8:word64]
	w3 = w3 & 0x0000007F
l0000000000496468:
	branch x2 == 0x0000000000000000 l0000000000496470
	// succ:  l000000000049646C l0000000000496470
l000000000049646C:
	Mem0[x2:word32] = w6
	// succ:  l0000000000496470
l0000000000496470:
	x0 = Mem0[x1 + 8:word64]
	// succ:  l0000000000496474
l0000000000496474:
	return
	// succ:  rl_function_of_keyseq_exit
l0000000000496478:
	x0 = 0x0000000000000000
	return
	// succ:  rl_function_of_keyseq_exit
l0000000000496480:
	x1 = 0x00000000004D9000
	x1 = Mem0[x1 + 1200:word64]
	goto l00000000004963CC
	// succ:  l00000000004963CC
rl_function_of_keyseq_exit:


// rl_bind_keyseq_if_unbound_in_map
// Return size: 0
void rl_bind_keyseq_if_unbound_in_map()
rl_bind_keyseq_if_unbound_in_map_entry:
	// succ:  l000000000049648C
l000000000049648C:
	sp = fp
	sp = sp + -48
	Mem0[sp:word64] = x29
	sp = sp + 8
	Mem0[sp:word64] = x30
	x29 = x31 + 0x0000000000000000
	v6 = sp + 16
	Mem0[v6:word64] = x19
	v6 = v6 + 8
	Mem0[v6:word64] = x20
	Mem0[sp + 32:word64] = x21
	x19 = x0
	x21 = x1
	x20 = x2
	branch x0 == 0x0000000000000000 l0000000000496510
	// succ:  l00000000004964AC l0000000000496510
l00000000004964AC:
	x1 = x2
	x2 = 0x0000000000000000
	call rl_function_of_keyseq (retsize: 0;)
	branch x0 == 0x0000000000000000 l00000000004964F0
	// succ:  l00000000004964BC l00000000004964F0
l00000000004964BC:
	x3 = 0x00000000004A2000
	x3 = x3 + 0xFFFFFFFFFFFFF9F8
	x31 = x0 - x3
	NZCV = cond(x31)
	branch Test(EQ,Z) l00000000004964F0
	// succ:  l00000000004964CC l00000000004964F0
l00000000004964CC:
	x1 = 0x000000000048E000
	x1 = x1 + 0x0000000000000484
	x31 = x0 - x1
	NZCV = cond(x31)
	w0 = 0x00000001
	branch Test(EQ,Z) l00000000004964F0
	// succ:  l00000000004964E0 l00000000004964F0
l00000000004964E0:
	v17 = sp + 16
	x19 = Mem0[v17:word64]
	v17 = v17 + 8
	x20 = Mem0[v17:word64]
	x21 = Mem0[sp + 32:word64]
	x29 = Mem0[sp:word64]
	sp = sp + 8
	x30 = Mem0[sp:word64]
	sp = sp + 48
	return
	// succ:  rl_bind_keyseq_if_unbound_in_map_exit
l00000000004964F0:
	x1 = x19
	x2 = x21
	x3 = x20
	x21 = Mem0[sp + 32:word64]
	v18 = sp + 16
	x19 = Mem0[v18:word64]
	v18 = v18 + 8
	x20 = Mem0[v18:word64]
	x29 = Mem0[sp:word64]
	sp = sp + 8
	x30 = Mem0[sp:word64]
	sp = sp + 48
	w0 = 0x00000000
	// succ:  l000000000049650C_thunk_rl_generic_bind
l000000000049650C_thunk_rl_generic_bind:
	call rl_generic_bind (retsize: 0;)
	return
	// succ:  rl_bind_keyseq_if_unbound_in_map_exit
l0000000000496510:
	v46 = sp + 16
	x19 = Mem0[v46:word64]
	v46 = v46 + 8
	x20 = Mem0[v46:word64]
	x21 = Mem0[sp + 32:word64]
	x29 = Mem0[sp:word64]
	sp = sp + 8
	x30 = Mem0[sp:word64]
	sp = sp + 48
	return
	// succ:  rl_bind_keyseq_if_unbound_in_map_exit
rl_bind_keyseq_if_unbound_in_map_exit:


// rl_bind_key_if_unbound_in_map
// Return size: 0
void rl_bind_key_if_unbound_in_map()
rl_bind_key_if_unbound_in_map_entry:
	// succ:  l0000000000496520
l0000000000496520:
	sp = fp
	sp = sp + -32
	Mem0[sp:word64] = x29
	sp = sp + 8
	Mem0[sp:word64] = x30
	x29 = x31 + 0x0000000000000000
	Mem0[x29 + 16:byte] = (byte) w0
	x0 = x29 + 0x0000000000000010
	Mem0[x29 + 17:byte] = 0x00
	call rl_bind_keyseq_if_unbound_in_map (retsize: 0;)
	x29 = Mem0[sp:word64]
	sp = sp + 8
	x30 = Mem0[sp:word64]
	sp = sp + 32
	return
	// succ:  rl_bind_key_if_unbound_in_map_exit
rl_bind_key_if_unbound_in_map_exit:


// rl_bind_key_if_unbound
// Return size: 0
void rl_bind_key_if_unbound()
rl_bind_key_if_unbound_entry:
	// succ:  l0000000000496540
l0000000000496540:
	sp = fp
	sp = sp + -32
	Mem0[sp:word64] = x29
	sp = sp + 8
	Mem0[sp:word64] = x30
	x29 = x31 + 0x0000000000000000
	x2 = 0x00000000004D9000
	x2 = Mem0[x2 + 1200:word64]
	Mem0[x29 + 16:byte] = (byte) w0
	x0 = x29 + 0x0000000000000010
	Mem0[x29 + 17:byte] = 0x00
	call rl_bind_keyseq_if_unbound_in_map (retsize: 0;)
	x29 = Mem0[sp:word64]
	sp = sp + 8
	x30 = Mem0[sp:word64]
	sp = sp + 32
	return
	// succ:  rl_bind_key_if_unbound_exit
rl_bind_key_if_unbound_exit:


// rl_bind_keyseq_if_unbound
// Return size: 0
void rl_bind_keyseq_if_unbound()
rl_bind_keyseq_if_unbound_entry:
	// succ:  l0000000000496568
l0000000000496568:
	sp = fp
	x2 = 0x00000000004D9000
	x2 = Mem0[x2 + 1200:word64]
	// succ:  l0000000000496570_thunk_rl_bind_keyseq_if_unbound_in_map
l0000000000496570_thunk_rl_bind_keyseq_if_unbound_in_map:
	call rl_bind_keyseq_if_unbound_in_map (retsize: 0;)
	return
	// succ:  rl_bind_keyseq_if_unbound_exit
rl_bind_keyseq_if_unbound_exit:


// rl_variable_value
// Return size: 0
void rl_variable_value()
rl_variable_value_entry:
	// succ:  l0000000000496574
l0000000000496574:
	sp = fp
	sp = sp + -32
	Mem0[sp:word64] = x29
	sp = sp + 8
	Mem0[sp:word64] = x30
	x29 = x31 + 0x0000000000000000
	Mem0[sp + 16:word64] = x19
	x19 = x0
	call fn00000000004949F8 (retsize: 0;)
	branch (w0 & 0x00000000) == 0x00000000 l00000000004965D4
	// succ:  l000000000049658C l00000000004965D4
l000000000049658C:
l00000000004965B4:
	x19 = Mem0[sp + 16:word64]
	x29 = Mem0[sp:word64]
	sp = sp + 8
	x30 = Mem0[sp:word64]
	sp = sp + 32
	return
	// succ:  rl_variable_value_exit
l00000000004965D4:
	x0 = x19
	call fn0000000000494A68 (retsize: 0;)
	branch (w0 & 0x00000000) == 0x00000000 l0000000000496604
	// succ:  l00000000004965E0 l0000000000496604
l00000000004965E0:
	x1 = 0x00000000004C4000
l0000000000496604:
	x0 = 0x0000000000000000
	goto l00000000004965B4
	// succ:  l00000000004965B4
rl_variable_value_exit:


// rl_variable_bind
// Return size: 0
void rl_variable_bind()
rl_variable_bind_entry:
	// succ:  l000000000049660C
l000000000049660C:
	sp = fp
	sp = sp + -64
	Mem0[sp:word64] = x29
	sp = sp + 8
	Mem0[sp:word64] = x30
	x29 = x31 + 0x0000000000000000
	v8 = sp + 16
	Mem0[v8:word64] = x19
	v8 = v8 + 8
	Mem0[v8:word64] = x20
	v11 = sp + 32
	Mem0[v11:word64] = x21
	v11 = v11 + 8
	Mem0[v11:word64] = x22
	v14 = sp + 48
	Mem0[v14:word64] = x23
	v14 = v14 + 8
	Mem0[v14:word64] = x24
	x20 = x1
	x19 = x0
	call fn00000000004949F8 (retsize: 0;)
	branch (w0 & 0x00000000) == 0x00000000 l0000000000496704
	// succ:  l0000000000496630 l0000000000496704
l0000000000496630:
l0000000000496694:
	w19 = 0x00000000
	w0 = w19
	v19 = sp + 32
	x21 = Mem0[v19:word64]
	v19 = v19 + 8
	x22 = Mem0[v19:word64]
	v20 = sp + 16
	x19 = Mem0[v20:word64]
	v20 = v20 + 8
	x20 = Mem0[v20:word64]
	v21 = sp + 48
	x23 = Mem0[v21:word64]
	v21 = v21 + 8
	x24 = Mem0[v21:word64]
	x29 = Mem0[sp:word64]
	sp = sp + 8
	x30 = Mem0[sp:word64]
	sp = sp + 64
	return
	// succ:  rl_variable_bind_exit
l0000000000496704:
	x0 = x19
	call fn0000000000494A68 (retsize: 0;)
	branch (w0 & 0x00000000) == 0x00000000 l0000000000496694
	// succ:  l0000000000496710 l0000000000496694
l0000000000496710:
rl_variable_bind_exit:


// rl_parse_and_bind
// Return size: 0
void rl_parse_and_bind()
rl_parse_and_bind_entry:
	// succ:  l0000000000496788
l0000000000496788:
	sp = fp
	sp = sp + -112
	Mem0[sp:word64] = x29
	sp = sp + 8
	Mem0[sp:word64] = x30
	x29 = x31 + 0x0000000000000000
	v8 = sp + 16
	Mem0[v8:word64] = x19
	v8 = v8 + 8
	Mem0[v8:word64] = x20
	v11 = sp + 32
	Mem0[v11:word64] = x21
	v11 = v11 + 8
	Mem0[v11:word64] = x22
	v14 = sp + 48
	Mem0[v14:word64] = x23
	v14 = v14 + 8
	Mem0[v14:word64] = x24
	Mem0[sp + 64:word64] = x25
	x19 = x0
	branch x0 != 0x0000000000000000 l00000000004967B4
	// succ:  l00000000004967A8 l00000000004967B4
l00000000004967A8:
	goto l00000000004969F4
	// succ:  l00000000004969F4
l00000000004967AC:
	x19 = x19 + 0x0000000000000001
	NZCV = cond(x19)
	branch Test(EQ,Z) l00000000004969F4
	// succ:  l00000000004967B4 l00000000004969F4
l00000000004967B4:
	v18 = Mem0[x19:byte]
	w0 = (word32) v18
	w31 = w0 - 0x00000009
	NZCV = cond(w31)
	branch Test(EQ,Z) l00000000004967AC
	// succ:  l00000000004967C0 l00000000004967AC
l00000000004967C0:
	w31 = w0 - 0x00000020
	NZCV = cond(w31)
	branch Test(EQ,Z) l00000000004967AC
	// succ:  l00000000004967C8 l00000000004967AC
l00000000004967C8:
	branch w0 == 0x00000000 l00000000004969F4
	// succ:  l00000000004967CC l00000000004969F4
l00000000004967CC:
	w31 = w0 - 0x00000023
	NZCV = cond(w31)
	branch Test(EQ,Z) l00000000004969F4
	// succ:  l00000000004967D4 l00000000004969F4
l00000000004967D4:
	w31 = w0 - 0x00000024
	NZCV = cond(w31)
	branch Test(EQ,Z) l0000000000496C88
	// succ:  l00000000004967DC l0000000000496C88
l00000000004967DC:
	x1 = 0x00000000004E1000
	v24 = Mem0[x1 + -780:byte]
	w2 = (word32) v24
	branch w2 != 0x00000000 l00000000004969F4
	// succ:  l00000000004967E8 l00000000004969F4
l00000000004967E8:
	w31 = w0 - 0x00000022
	NZCV = cond(w31)
	branch Test(EQ,Z) l0000000000496A14
	// succ:  l00000000004967F0 l0000000000496A14
l00000000004967F0:
	x2 = 0x0000000000000000
	w20 = w2
	v27 = Mem0[x19 + x2:byte]
	w0 = (word32) v27
	x3 = x19 + x2
	branch w0 == 0x00000000 l000000000049685C
	// succ:  l0000000000496804 l000000000049685C
l0000000000496804:
	w31 = w0 - 0x00000020
	NZCV = cond(w31)
	branch Test(EQ,Z) l0000000000496B0C
	// succ:  l000000000049680C l0000000000496B0C
l000000000049680C:
	w31 = w0 - 0x0000003A
	NZCV = cond(w31)
	branch Test(EQ,Z) l0000000000496B0C
	// succ:  l0000000000496814 l0000000000496B0C
l0000000000496814:
	w31 = w0 - 0x00000009
	NZCV = cond(w31)
	branch Test(EQ,Z) l000000000049685C
	// succ:  l000000000049681C l000000000049685C
l000000000049681C:
l000000000049685C:
	w23 = 0x00000000
	branch w0 == 0x00000000 l0000000000496878
	// succ:  l0000000000496864 l0000000000496878
l0000000000496864:
	Mem0[x3:byte] = 0x00
	w20 = w20 + 0x00000001
	branch w23 == 0x00000000 l0000000000496878
	// succ:  l0000000000496870 l0000000000496878
l0000000000496870:
	Mem0[x19 + (int64) ((int32) w20):byte] = 0x00
	w20 = w20 + 0x00000001
	// succ:  l0000000000496878
l0000000000496878:
	x1 = 0x00000000004BD000
	x0 = x19
	x1 = x1 + 0xFFFFFFFFFFFFF810
	strcasecmp(x0, x1)
	sp = sp + 0xFFFFFFFFFFFFFFF8
	w21 = w0
	branch w0 == 0x00000000 l0000000000496A58
	// succ:  l0000000000496890 l0000000000496A58
l0000000000496890:
l00000000004969F4:
	w21 = 0x00000000
	// succ:  l00000000004969F8
l00000000004969F8:
	w0 = w21
	v30 = sp + 16
	x19 = Mem0[v30:word64]
	v30 = v30 + 8
	x20 = Mem0[v30:word64]
	v31 = sp + 32
	x21 = Mem0[v31:word64]
	v31 = v31 + 8
	x22 = Mem0[v31:word64]
	v32 = sp + 48
	x23 = Mem0[v32:word64]
	v32 = v32 + 8
	x24 = Mem0[v32:word64]
	x25 = Mem0[sp + 64:word64]
	x29 = Mem0[sp:word64]
	sp = sp + 8
	x30 = Mem0[sp:word64]
	sp = sp + 112
	return
	// succ:  rl_parse_and_bind_exit
l0000000000496A14:
	v41 = Mem0[x19 + 1:byte]
	w0 = (word32) v41
	x1 = x19 + 0x0000000000000002
	w20 = 0x00000001
	branch w0 != 0x00000000 l0000000000496A40
	// succ:  l0000000000496A24 l0000000000496A40
l0000000000496A24:
	goto l0000000000496E18
	// succ:  l0000000000496E18
l0000000000496A28:
	branch Test(EQ,Z) l0000000000496A50
	// succ:  l0000000000496A2C l0000000000496A50
l0000000000496A2C:
	w31 = w0 - 0x00000022
	NZCV = cond(w31)
	branch Test(EQ,Z) l0000000000496DA4
	// succ:  l0000000000496A34 l0000000000496DA4
l0000000000496A34:
	v42 = Mem0[x1:byte]
	w0 = (word32) v42
	x1 = x1 + 1
	w20 = w20 + 0x00000001
	branch w0 == 0x00000000 l0000000000496E18
	// succ:  l0000000000496A40 l0000000000496E18
l0000000000496A40:
	w31 = w0 - 0x0000005C
	NZCV = cond(w31)
	branch w2 == 0x00000000 l0000000000496A28
	// succ:  l0000000000496A48 l0000000000496A28
l0000000000496A48:
	w2 = 0x00000000
	goto l0000000000496A34
	// succ:  l0000000000496A34
l0000000000496A50:
	w2 = 0x00000001
	goto l0000000000496A34
	// succ:  l0000000000496A34
l0000000000496A58:
l0000000000496B0C:
	w31 = w0 - 0x0000003A
	NZCV = cond(w31)
	branch Test(NE,Z) l000000000049685C
	// succ:  l0000000000496B14 l000000000049685C
l0000000000496B14:
	x2 = x19 + x2
	v38 = Mem0[x2 + 1:byte]
	w1 = (word32) v38
	w31 = w1 - 0x0000003D
	NZCV = cond(w31)
	branch Test(NE,Z) l000000000049685C
	// succ:  l0000000000496B24 l000000000049685C
l0000000000496B24:
	w23 = 0x00000001
	goto l0000000000496864
	// succ:  l0000000000496864
l0000000000496C88:
	v34 = Mem0[x19 + 1:byte]
	w3 = (word32) v34
	x4 = x19 + 0x0000000000000001
	w31 = w3 - 0x00000020
	NZCV = cond(w31)
	branch Test(NE,Z) l0000000000496F38
	// succ:  l0000000000496C98 l0000000000496F38
l0000000000496C98:
	x2 = x19 + 0x0000000000000002
	w1 = 0x00000000
	// succ:  l0000000000496CA0
l0000000000496CA0:
	x22 = x2
	v37 = Mem0[x2:byte]
	w3 = (word32) v37
	x2 = x2 + 1
	w1 = w1 + 0x00000001
	w31 = w3 - 0x00000009
	NZCV = cond(w31)
	branch Test(EQ,Z) l0000000000496CA0
	// succ:  l0000000000496CB4 l0000000000496CA0
l0000000000496CB4:
	w31 = w3 - 0x00000020
	NZCV = cond(w31)
	branch Test(EQ,Z) l0000000000496CA0
	// succ:  l0000000000496CBC l0000000000496CA0
l0000000000496CBC:
	branch w3 == 0x00000000 l0000000000496F4C
	// succ:  l0000000000496CC0 l0000000000496F4C
l0000000000496CC0:
	w31 = w3 - 0x00000009
	NZCV = cond(w31)
	branch Test(EQ,Z) l0000000000496DAC
	// succ:  l0000000000496CC8 l0000000000496DAC
l0000000000496CC8:
	w31 = w3 - 0x00000020
	NZCV = cond(w31)
	branch Test(EQ,Z) l0000000000496DAC
	// succ:  l0000000000496CD0 l0000000000496DAC
l0000000000496CD0:
l0000000000496D04:
	x25 = 0x00000000004C4000
	x1 = 0x00000000004AB000
	x23 = x25 + 0x0000000000000518
	w19 = 0x00000000
	x1 = x1 + 0xFFFFFFFFFFFFFE58
	goto l0000000000496D28
	// succ:  l0000000000496D28
l0000000000496D1C:
	x23 = x23 + 16
	x1 = Mem0[x23:word64]
	w19 = w19 + 0x00000001
	branch x1 == 0x0000000000000000 l0000000000496D88
	// succ:  l0000000000496D28 l0000000000496D88
l0000000000496D28:
	x0 = x22
	strcasecmp(x0, x1)
	sp = sp + 0xFFFFFFFFFFFFFFF8
	w21 = w0
	branch w0 != 0x00000000 l0000000000496D1C
	// succ:  l0000000000496D38 l0000000000496D1C
l0000000000496D38:
	x25 = x25 + 0x0000000000000518
	x19 = x25 + (int64) ((int32) w19)
	x1 = Mem0[x19 + 8:word64]
	x0 = x20
	call x1 (retsize: 0;)
	goto l00000000004969F8
	// succ:  l00000000004969F8
l0000000000496D88:
	x0 = 0x00000000004C4000
	x0 = x0 + 0xFFFFFFFFFFFFF818
	Mem0[x29 + 96:word64] = x1
	call fn00000000004951CC (retsize: 0;)
	x1 = Mem0[x29 + 96:word64]
	w21 = w1
	goto l00000000004969F8
	// succ:  l00000000004969F8
l0000000000496DA4:
l0000000000496DAC:
	x20 = x22
	w1 = w1 + 0x00000001
	Mem0[x20:byte] = 0x00
l0000000000496E18:
	x0 = 0x00000000004C4000
	x0 = x0 + 0xFFFFFFFFFFFFF838
	call fn00000000004951CC (retsize: 0;)
	w21 = 0x00000001
	goto l00000000004969F8
	// succ:  l00000000004969F8
l0000000000496F38:
	w31 = w3 - 0x00000009
	NZCV = cond(w31)
	w1 = (word32) Test(EQ,Z)
	x22 = x4
	branch w1 != 0x00000000 l0000000000496C98
	// succ:  l0000000000496F48 l0000000000496C98
l0000000000496F48:
	goto l0000000000496CBC
	// succ:  l0000000000496CBC
l0000000000496F4C:
	x20 = x22
	goto l0000000000496D04
	// succ:  l0000000000496D04
rl_parse_and_bind_exit:


// fn0000000000496F8C
// Return size: 0
void fn0000000000496F8C()
fn0000000000496F8C_entry:
	// succ:  l0000000000496F8C
l0000000000496F8C:
	sp = fp
	sp = sp + -224
	Mem0[sp:word64] = x29
	sp = sp + 8
	Mem0[sp:word64] = x30
	x29 = x31 + 0x0000000000000000
	v8 = sp + 64
	Mem0[v8:word64] = x25
	v8 = v8 + 8
	Mem0[v8:word64] = x26
	x25 = 0x00000000004E2000
	v11 = sp + 16
	Mem0[v11:word64] = x19
	v11 = v11 + 8
	Mem0[v11:word64] = x20
	v14 = sp + 48
	Mem0[v14:word64] = x23
	v14 = v14 + 8
	Mem0[v14:word64] = x24
	v17 = sp + 32
	Mem0[v17:word64] = x21
	v17 = v17 + 8
	Mem0[v17:word64] = x22
	x2 = x25 + 0x0000000000000088
	Mem0[x2 + 88:word32] = w1
	w23 = w1
	Mem0[x2 + 24:word64] = x0
	x20 = x0
	call tilde_expand (retsize: 0;)
	x1 = x0
	x19 = x0
	x2 = x29 + 0x0000000000000050
	w0 = 0x00000000
	__xstat(x0, x1, x2)
	sp = sp + 0xFFFFFFFFFFFFFFF8
	branch (w0 & 0x00000000) == 0x00000000 l0000000000497228
	// succ:  l0000000000496FD8 l0000000000497228
l0000000000496FD8:
	x0 = x19
	w1 = 0x00000000
	w2 = 0x000001B6
	open(x0, x1)
	sp = sp + 0xFFFFFFFFFFFFFFF8
	w22 = w0
	branch (w0 & 0x00000000) == 0x00000000 l0000000000497228
	// succ:  l0000000000496FF0 l0000000000497228
l0000000000496FF0:
	x2 = Mem0[x29 + 128:word64]
	x1 = x2 + 0x0000000000000001
	x31 = x2 - x1
	NZCV = cond(x31)
	branch Test(UGT,ZC) l0000000000497218
	// succ:  l0000000000497000 l0000000000497218
l0000000000497000:
	x0 = x1
	Mem0[x29 + 208:word64] = x2
	call xmalloc (retsize: 0;)
	x24 = x0
	x2 = Mem0[x29 + 208:word64]
	w0 = w22
	x1 = x24
	read(x0, x1, x2)
	sp = sp + 0xFFFFFFFFFFFFFFF8
	x26 = x0
	w0 = w22
	close(x0)
	sp = sp + 0xFFFFFFFFFFFFFFF8
	branch (w26 & 0x00000000) == 0x00000000 l0000000000497234
	// succ:  l0000000000497030 l0000000000497234
l0000000000497030:
	x22 = 0x00000000004E2000
	w0 = Mem0[x22 + 2672:word32]
	branch w0 != 0x00000000 l00000000004971E8
	// succ:  l000000000049703C l00000000004971E8
l000000000049703C:
l0000000000497044:
	x0 = x19
	call xfree (retsize: 0;)
	w0 = Mem0[x22 + 2672:word32]
	branch w0 != 0x00000000 l00000000004971BC
	// succ:  l0000000000497054 l00000000004971BC
l0000000000497054:
	branch x24 == 0x0000000000000000 l00000000004971C8
	// succ:  l0000000000497058 l00000000004971C8
l0000000000497058:
	branch w23 == 0x00000000 l0000000000497180
	// succ:  l000000000049705C l0000000000497180
l000000000049705C:
	x22 = x25 + 0x0000000000000088
	w0 = 0x00000001
	x21 = x24 + x21
	Mem0[x22 + 16:word32] = w0
	Mem0[x22 + 32:word32] = w0
	x31 = x21 - x24
	NZCV = cond(x31)
	branch Test(ULE,ZC) l0000000000497114
	// succ:  l0000000000497078 l0000000000497114
l0000000000497078:
	x20 = x24
	x23 = x21 - 0x0000000000000001
	x31 = x21 - x20
	NZCV = cond(x31)
	branch Test(EQ,Z) l00000000004971F4
	// succ:  l0000000000497088 l00000000004971F4
l0000000000497088:
	v30 = Mem0[x20:byte]
	w2 = (word32) v30
	w31 = w2 - 0x0000000A
	NZCV = cond(w31)
	branch Test(EQ,Z) l0000000000497200
	// succ:  l0000000000497094 l0000000000497200
l0000000000497094:
	x3 = x20 + 0x0000000000000001
	x6 = x23 - x20
	x2 = 0x0000000000000000
	goto l00000000004970B8
	// succ:  l00000000004970B8
l00000000004970A4:
	v39 = Mem0[x3:byte]
	w5 = (word32) v39
	x2 = x2 + 0x0000000000000001
	w31 = w5 - 0x0000000A
	NZCV = cond(w31)
	x3 = x3 + 0x0000000000000001
	branch Test(EQ,Z) l00000000004970C8
	// succ:  l00000000004970B8 l00000000004970C8
l00000000004970B8:
	x31 = x2 - x6
	NZCV = cond(x31)
	x4 = x3
	w19 = w2 + 0x00000001
	branch Test(NE,Z) l00000000004970A4
	// succ:  l00000000004970C8 l00000000004970A4
l00000000004970C8:
	Mem0[x4:byte] = 0x00
	v36 = Mem0[x20:byte]
	w2 = (word32) v36
	branch w2 == 0x00000000 l00000000004970F4
	// succ:  l00000000004970D4 l00000000004970F4
l00000000004970D4:
	w31 = w2 - 0x00000020
	NZCV = cond(w31)
	branch Test(EQ,Z) l00000000004970E4
	// succ:  l00000000004970DC l00000000004970E4
l00000000004970DC:
	goto l000000000049720C
	// succ:  l000000000049720C
l00000000004970E0:
	branch Test(NE,Z) l0000000000497140
	// succ:  l00000000004970E4 l0000000000497140
l00000000004970E4:
	x20 = x20 + 1
	v37 = Mem0[x20:byte]
	w2 = (word32) v37
	w19 = w19 - 0x00000001
	w31 = w2 - 0x00000009
	NZCV = cond(w31)
	branch w2 != 0x00000000 l00000000004970E0
	// succ:  l00000000004970F4 l00000000004970E0
l00000000004970F4:
	w2 = Mem0[x22 + 32:word32]
l0000000000497114:
	x0 = x24
	call xfree (retsize: 0;)
	x25 = x25 + 0x0000000000000088
	Mem0[x25 + 16:word32] = 0x00000000
	w0 = 0x00000000
	v40 = sp + 16
	x19 = Mem0[v40:word64]
	v40 = v40 + 8
	x20 = Mem0[v40:word64]
	v41 = sp + 32
	x21 = Mem0[v41:word64]
	v41 = v41 + 8
	x22 = Mem0[v41:word64]
	v42 = sp + 48
	x23 = Mem0[v42:word64]
	v42 = v42 + 8
	x24 = Mem0[v42:word64]
	v43 = sp + 64
	x25 = Mem0[v43:word64]
	v43 = v43 + 8
	x26 = Mem0[v43:word64]
	x29 = Mem0[sp:word64]
	sp = sp + 8
	x30 = Mem0[sp:word64]
	sp = sp + 224
	return
	// succ:  fn0000000000496F8C_exit
l0000000000497140:
	w31 = w2 - 0x00000020
	NZCV = cond(w31)
	branch Test(EQ,Z) l00000000004970E4
	// succ:  l0000000000497148 l00000000004970E4
l0000000000497148:
	w31 = w2 - 0x00000023
	NZCV = cond(w31)
	branch Test(EQ,Z) l00000000004970F4
	// succ:  l0000000000497150 l00000000004970F4
l0000000000497150:
	branch w2 == 0x00000000 l00000000004970F4
	// succ:  l0000000000497154 l00000000004970F4
l0000000000497154:
	x0 = x20
	call rl_parse_and_bind (retsize: 0;)
	w2 = Mem0[x22 + 32:word32]
l0000000000497180:
	x0 = x25 + 0x0000000000000088
	x0 = Mem0[x0 + 96:word64]
	x31 = x20 - x0
	NZCV = cond(x31)
	branch Test(EQ,Z) l000000000049705C
	// succ:  l0000000000497190 l000000000049705C
l0000000000497190:
	branch x0 == 0x0000000000000000 l0000000000497198
	// succ:  l0000000000497194 l0000000000497198
l0000000000497194:
	call free (retsize: 0;)
	// succ:  l0000000000497198
l0000000000497198:
	x0 = x20
	strlen(x0)
	sp = sp + 0xFFFFFFFFFFFFFFF8
	x0 = x0 + 0x0000000000000001
	call xmalloc (retsize: 0;)
	x1 = x20
	strcpy(x0, x1)
	sp = sp + 0xFFFFFFFFFFFFFFF8
	x1 = x25 + 0x0000000000000088
	Mem0[x1 + 96:word64] = x0
	goto l000000000049705C
	// succ:  l000000000049705C
l00000000004971BC:
	w0 = Mem0[x22 + 2672:word32]
	call _rl_signal_handler (retsize: 0;)
	branch x24 != 0x0000000000000000 l0000000000497058
	// succ:  l00000000004971C8 l0000000000497058
l00000000004971C8:
	__errno_location()
	sp = sp + 0xFFFFFFFFFFFFFFF8
	w0 = Mem0[x0:word32]
	v44 = sp + 16
	x19 = Mem0[v44:word64]
	v44 = v44 + 8
	x20 = Mem0[v44:word64]
	v45 = sp + 32
	x21 = Mem0[v45:word64]
	v45 = v45 + 8
	x22 = Mem0[v45:word64]
	v46 = sp + 48
	x23 = Mem0[v46:word64]
	v46 = v46 + 8
	x24 = Mem0[v46:word64]
	v47 = sp + 64
	x25 = Mem0[v47:word64]
	v47 = v47 + 8
	x26 = Mem0[v47:word64]
	x29 = Mem0[sp:word64]
	sp = sp + 8
	x30 = Mem0[sp:word64]
	sp = sp + 224
	return
	// succ:  fn0000000000496F8C_exit
l00000000004971E8:
	w0 = Mem0[x22 + 2672:word32]
	call _rl_signal_handler (retsize: 0;)
	goto l000000000049703C
	// succ:  l000000000049703C
l00000000004971F4:
	x4 = x21
	w19 = 0x00000000
	goto l00000000004970C8
	// succ:  l00000000004970C8
l0000000000497200:
	x4 = x20
	w19 = 0x00000000
	goto l00000000004970C8
	// succ:  l00000000004970C8
l000000000049720C:
	w31 = w2 - 0x00000009
	NZCV = cond(w31)
	branch Test(EQ,Z) l00000000004970E4
	// succ:  l0000000000497214 l00000000004970E4
l0000000000497214:
	goto l0000000000497148
	// succ:  l0000000000497148
l0000000000497218:
	close(x0)
	sp = sp + 0xFFFFFFFFFFFFFFF8
	__errno_location()
	sp = sp + 0xFFFFFFFFFFFFFFF8
	w1 = 0x0000001B
	Mem0[x0:word32] = w1
	// succ:  l0000000000497228
l0000000000497228:
	x24 = 0x0000000000000000
	x22 = 0x00000000004E2000
	goto l0000000000497044
	// succ:  l0000000000497044
l0000000000497234:
	x0 = x24
	call xfree (retsize: 0;)
	x24 = 0x0000000000000000
	x22 = 0x00000000004E2000
	goto l0000000000497044
	// succ:  l0000000000497044
fn0000000000496F8C_exit:


// rl_read_init_file
// Return size: 0
void rl_read_init_file()
rl_read_init_file_entry:
	// succ:  l0000000000497248
l0000000000497248:
	sp = fp
	sp = sp + -16
	Mem0[sp:word64] = x29
	sp = sp + 8
	Mem0[sp:word64] = x30
	x29 = x31 + 0x0000000000000000
	branch x0 == 0x0000000000000000 l000000000049728C
	// succ:  l0000000000497254 l000000000049728C
l0000000000497254:
	v8 = Mem0[x0:byte]
	w1 = (word32) v8
	branch w1 != 0x00000000 l0000000000497278
	// succ:  l000000000049725C l0000000000497278
l000000000049725C:
	x0 = 0x00000000004C4000
	x0 = x0 + 0xFFFFFFFFFFFFF880
	w1 = 0x00000000
	call fn0000000000496F8C (retsize: 0;)
	branch w0 == 0x00000000 l0000000000497284
	// succ:  l0000000000497270 l0000000000497284
l0000000000497270:
	x0 = 0x00000000004C4000
	x0 = x0 + 0xFFFFFFFFFFFFF868
	// succ:  l0000000000497278
l0000000000497278:
	x29 = Mem0[sp:word64]
	sp = sp + 8
	x30 = Mem0[sp:word64]
	sp = sp + 16
	w1 = 0x00000000
	// succ:  l0000000000497280_thunk_fn0000000000496F8C
l0000000000497280_thunk_fn0000000000496F8C:
	call fn0000000000496F8C (retsize: 0;)
	return
	// succ:  rl_read_init_file_exit
l0000000000497284:
	x29 = Mem0[sp:word64]
	sp = sp + 8
	x30 = Mem0[sp:word64]
	sp = sp + 16
	return
	// succ:  rl_read_init_file_exit
l000000000049728C:
	x0 = 0x00000000004E2000
	x0 = x0 + 0x0000000000000088
	x0 = Mem0[x0 + 96:word64]
	branch x0 != 0x0000000000000000 l0000000000497254
	// succ:  l000000000049729C l0000000000497254
l000000000049729C:
	x0 = 0x00000000004C4000
	x0 = x0 + 0xFFFFFFFFFFFFF878
	call sh_get_env_value (retsize: 0;)
	branch x0 == 0x0000000000000000 l000000000049725C
	// succ:  l00000000004972AC l000000000049725C
l00000000004972AC:
	goto l0000000000497254
	// succ:  l0000000000497254
rl_read_init_file_exit:


// rl_re_read_init_file
// Return size: 0
void rl_re_read_init_file()
rl_re_read_init_file_entry:
	// succ:  l00000000004972B0
l00000000004972B0:
	sp = fp
	sp = sp + -16
	Mem0[sp:word64] = x29
	sp = sp + 8
	Mem0[sp:word64] = x30
	x29 = x31 + 0x0000000000000000
	x0 = 0x0000000000000000
	call rl_read_init_file (retsize: 0;)
	x1 = 0x00000000004D9000
	w1 = Mem0[x1 + 1208:word32]
	w31 = w1 - 0x00000001
	NZCV = cond(w31)
	branch Test(EQ,Z) l00000000004972EC
	// succ:  l00000000004972D0 l00000000004972EC
l00000000004972D0:
	branch w1 != 0x00000000 l00000000004972E4
	// succ:  l00000000004972D4 l00000000004972E4
l00000000004972D4:
	x2 = 0x00000000004D9000
	x2 = x2 + 0x0000000000000500
	x1 = 0x00000000004D9000
	Mem0[x1 + 1200:word64] = x2
	// succ:  l00000000004972E4
l00000000004972E4:
	x29 = Mem0[sp:word64]
	sp = sp + 8
	x30 = Mem0[sp:word64]
	sp = sp + 16
	return
	// succ:  rl_re_read_init_file_exit
l00000000004972EC:
	x2 = 0x00000000004DD000
	x2 = x2 + 0x0000000000000540
	x1 = 0x00000000004D9000
	Mem0[x1 + 1200:word64] = x2
	x29 = Mem0[sp:word64]
	sp = sp + 8
	x30 = Mem0[sp:word64]
	sp = sp + 16
	return
	// succ:  rl_re_read_init_file_exit
rl_re_read_init_file_exit:


// rl_get_keymap_by_name
// Return size: 0
void rl_get_keymap_by_name()
rl_get_keymap_by_name_entry:
	// succ:  l0000000000497388
l0000000000497388:
	sp = fp
	sp = sp + -48
	Mem0[sp:word64] = x29
	sp = sp + 8
	Mem0[sp:word64] = x30
	x29 = x31 + 0x0000000000000000
	v8 = sp + 32
	Mem0[v8:word64] = x21
	v8 = v8 + 8
	Mem0[v8:word64] = x22
	x22 = 0x00000000004C4000
	v11 = sp + 16
	Mem0[v11:word64] = x19
	v11 = v11 + 8
	Mem0[v11:word64] = x20
	x1 = 0x00000000004AA000
	x20 = x22 + 0x00000000000000C8
	x21 = x0
	x20 = x20 + 0x00000000000003C0
	x1 = x1 + 0x0000000000000320
	w19 = 0x00000000
	goto l00000000004973C4
	// succ:  l00000000004973C4
l00000000004973B8:
	x20 = x20 + 16
	x1 = Mem0[x20:word64]
	w19 = w19 + 0x00000001
	branch x1 == 0x0000000000000000 l00000000004973EC
	// succ:  l00000000004973C4 l00000000004973EC
l00000000004973C4:
	x0 = x21
	strcasecmp(x0, x1)
	sp = sp + 0xFFFFFFFFFFFFFFF8
	branch w0 != 0x00000000 l00000000004973B8
	// succ:  l00000000004973D0 l00000000004973B8
l00000000004973D0:
	x22 = x22 + 0x00000000000000C8
	x19 = x22 + (int64) ((int32) w19)
	x0 = Mem0[x19 + 968:word64]
	v16 = sp + 32
	x21 = Mem0[v16:word64]
	v16 = v16 + 8
	x22 = Mem0[v16:word64]
	v17 = sp + 16
	x19 = Mem0[v17:word64]
	v17 = v17 + 8
	x20 = Mem0[v17:word64]
	x29 = Mem0[sp:word64]
	sp = sp + 8
	x30 = Mem0[sp:word64]
	sp = sp + 48
	return
	// succ:  rl_get_keymap_by_name_exit
l00000000004973EC:
	x0 = x1
	v18 = sp + 16
	x19 = Mem0[v18:word64]
	v18 = v18 + 8
	x20 = Mem0[v18:word64]
	v19 = sp + 32
	x21 = Mem0[v19:word64]
	v19 = v19 + 8
	x22 = Mem0[v19:word64]
	x29 = Mem0[sp:word64]
	sp = sp + 8
	x30 = Mem0[sp:word64]
	sp = sp + 48
	return
	// succ:  rl_get_keymap_by_name_exit
rl_get_keymap_by_name_exit:


// rl_get_keymap_name
// Return size: 0
void rl_get_keymap_name()
rl_get_keymap_name_entry:
	// succ:  l0000000000497430
l0000000000497430:
	sp = fp
	x1 = 0x00000000004DD000
	x1 = x1 + 0x0000000000000540
	x31 = x0 - x1
	NZCV = cond(x31)
	branch Test(EQ,Z) l0000000000497470
	// succ:  l0000000000497440 l0000000000497470
l0000000000497440:
	x1 = 0x00000000004C4000
	x1 = x1 + 0x00000000000000C8
	x1 = x1 + 0x00000000000003C0
	goto l000000000049745C
	// succ:  l000000000049745C
l0000000000497450:
	x3 = Mem0[x1 + 8:word64]
	x31 = x3 - x0
	NZCV = cond(x31)
	branch Test(EQ,Z) l0000000000497468
	// succ:  l000000000049745C l0000000000497468
l000000000049745C:
	x1 = x1 + 0x0000000000000010
	x2 = Mem0[x1:word64]
	branch x2 != 0x0000000000000000 l0000000000497450
	// succ:  l0000000000497468 l0000000000497450
l0000000000497468:
	x0 = x2
	return
	// succ:  rl_get_keymap_name_exit
l0000000000497470:
	x0 = 0x00000000004AA000
	x0 = x0 + 0x0000000000000320
	return
	// succ:  rl_get_keymap_name_exit
rl_get_keymap_name_exit:


// rl_set_keymap
// Return size: 0
void rl_set_keymap()
rl_set_keymap_entry:
	// succ:  l000000000049747C
l000000000049747C:
	sp = fp
	branch x0 == 0x0000000000000000 l0000000000497488
	// succ:  l0000000000497480 l0000000000497488
l0000000000497480:
	x1 = 0x00000000004D9000
	Mem0[x1 + 1200:word64] = x0
	// succ:  l0000000000497488
l0000000000497488:
	return
	// succ:  rl_set_keymap_exit
rl_set_keymap_exit:


// rl_get_keymap
// Return size: 0
void rl_get_keymap()
rl_get_keymap_entry:
	// succ:  l000000000049748C
l000000000049748C:
	sp = fp
	x0 = 0x00000000004D9000
	x0 = Mem0[x0 + 1200:word64]
	return
	// succ:  rl_get_keymap_exit
rl_get_keymap_exit:


// rl_set_keymap_from_edit_mode
// Return size: 0
void rl_set_keymap_from_edit_mode()
rl_set_keymap_from_edit_mode_entry:
	// succ:  l0000000000497498
l0000000000497498:
	sp = fp
	x0 = 0x00000000004D9000
	w0 = Mem0[x0 + 1208:word32]
	w31 = w0 - 0x00000001
	NZCV = cond(w31)
	branch Test(EQ,Z) l00000000004974C0
	// succ:  l00000000004974A8 l00000000004974C0
l00000000004974A8:
	branch w0 != 0x00000000 l00000000004974BC
	// succ:  l00000000004974AC l00000000004974BC
l00000000004974AC:
	x1 = 0x00000000004D9000
	x1 = x1 + 0x0000000000000500
	x0 = 0x00000000004D9000
	Mem0[x0 + 1200:word64] = x1
	// succ:  l00000000004974BC
l00000000004974BC:
	return
	// succ:  rl_set_keymap_from_edit_mode_exit
l00000000004974C0:
	x1 = 0x00000000004DD000
	x1 = x1 + 0x0000000000000540
	x0 = 0x00000000004D9000
	Mem0[x0 + 1200:word64] = x1
	return
	// succ:  rl_set_keymap_from_edit_mode_exit
rl_set_keymap_from_edit_mode_exit:


// rl_get_keymap_name_from_edit_mode
// Return size: 0
void rl_get_keymap_name_from_edit_mode()
rl_get_keymap_name_from_edit_mode_entry:
	// succ:  l00000000004974D4
l00000000004974D4:
	sp = fp
	x0 = 0x00000000004D9000
	w0 = Mem0[x0 + 1208:word32]
	w31 = w0 - 0x00000001
	NZCV = cond(w31)
	branch Test(EQ,Z) l0000000000497500
	// succ:  l00000000004974E4 l0000000000497500
l00000000004974E4:
	branch w0 == 0x00000000 l00000000004974F4
	// succ:  l00000000004974E8 l00000000004974F4
l00000000004974E8:
	x0 = 0x00000000004C4000
	x0 = x0 + 0x00000000000006B0
	return
	// succ:  rl_get_keymap_name_from_edit_mode_exit
l00000000004974F4:
	x0 = 0x00000000004BF000
	x0 = x0 + 0xFFFFFFFFFFFFFA80
	return
	// succ:  rl_get_keymap_name_from_edit_mode_exit
l0000000000497500:
	x0 = 0x00000000004AA000
	x0 = x0 + 0x0000000000000320
	return
	// succ:  rl_get_keymap_name_from_edit_mode_exit
rl_get_keymap_name_from_edit_mode_exit:


// rl_list_funmap_names
// Return size: 0
void rl_list_funmap_names()
rl_list_funmap_names_entry:
	// succ:  l000000000049750C
l000000000049750C:
	sp = fp
	sp = sp + -48
	Mem0[sp:word64] = x29
	sp = sp + 8
	Mem0[sp:word64] = x30
	x29 = x31 + 0x0000000000000000
	v8 = sp + 32
	Mem0[v8:word64] = x21
	v8 = v8 + 8
	Mem0[v8:word64] = x22
	v11 = sp + 16
	Mem0[v11:word64] = x19
	v11 = v11 + 8
	Mem0[v11:word64] = x20
	call rl_funmap_names (retsize: 0;)
	x22 = x0
	branch x0 == 0x0000000000000000 l000000000049756C
	// succ:  l0000000000497528 l000000000049756C
l0000000000497528:
	x3 = Mem0[x0:word64]
	branch x3 == 0x0000000000000000 l0000000000497558
	// succ:  l0000000000497530 l0000000000497558
l0000000000497530:
	x20 = 0x00000000004BF000
	x19 = x0 + 0x0000000000000008
	x21 = 0x00000000004E1000
	x20 = x20 + 0xFFFFFFFFFFFFF8A8
	// succ:  l0000000000497540
l0000000000497540:
	x0 = Mem0[x21 + 3200:word64]
	w1 = 0x00000001
	x2 = x20
	__fprintf_chk(x0, x1, x2, Mem0[sp:<unknown>])
	sp = sp + 0xFFFFFFFFFFFFFFF8
	x3 = Mem0[x19:word64]
	x19 = x19 + 8
	branch x3 != 0x0000000000000000 l0000000000497540
	// succ:  l0000000000497558 l0000000000497540
l0000000000497558:
	x0 = x22
	v17 = sp + 16
	x19 = Mem0[v17:word64]
	v17 = v17 + 8
	x20 = Mem0[v17:word64]
	v18 = sp + 32
	x21 = Mem0[v18:word64]
	v18 = v18 + 8
	x22 = Mem0[v18:word64]
	x29 = Mem0[sp:word64]
	sp = sp + 8
	x30 = Mem0[sp:word64]
	sp = sp + 48
	// succ:  l0000000000497568_thunk_xfree
l0000000000497568_thunk_xfree:
	call xfree (retsize: 0;)
	return
	// succ:  rl_list_funmap_names_exit
l000000000049756C:
	v19 = sp + 16
	x19 = Mem0[v19:word64]
	v19 = v19 + 8
	x20 = Mem0[v19:word64]
	v20 = sp + 32
	x21 = Mem0[v20:word64]
	v20 = v20 + 8
	x22 = Mem0[v20:word64]
	x29 = Mem0[sp:word64]
	sp = sp + 8
	x30 = Mem0[sp:word64]
	sp = sp + 48
	return
	// succ:  rl_list_funmap_names_exit
rl_list_funmap_names_exit:


// rl_invoking_keyseqs_in_map
// Return size: 0
void rl_invoking_keyseqs_in_map()
rl_invoking_keyseqs_in_map_entry:
	// succ:  l000000000049757C
l000000000049757C:
	sp = fp
	sp = sp + -208
	Mem0[sp:word64] = x29
	sp = sp + 8
	Mem0[sp:word64] = x30
	x29 = x31 + 0x0000000000000000
	Mem0[x29 + 104:word64] = x0
	x0 = 0x00000000004C4000
	x0 = x0 + 0xFFFFFFFFFFFFF8A8
	Mem0[x29 + 160:word64] = x0
	x0 = 0x00000000004C4000
	x0 = x0 + 0xFFFFFFFFFFFFF8A0
	Mem0[x29 + 136:word64] = x0
	x0 = 0x00000000004D9000
	v9 = sp + 48
	Mem0[v9:word64] = x23
	v9 = v9 + 8
	Mem0[v9:word64] = x24
	x0 = x0 + 0x00000000000004BC
	w24 = 0x00000000
	x23 = 0x0000000000000000
	v13 = sp + 16
	Mem0[v13:word64] = x19
	v13 = v13 + 8
	Mem0[v13:word64] = x20
	v16 = sp + 64
	Mem0[v16:word64] = x25
	v16 = v16 + 8
	Mem0[v16:word64] = x26
	v19 = sp + 80
	Mem0[v19:word64] = x27
	v19 = v19 + 8
	Mem0[v19:word64] = x28
	v22 = sp + 32
	Mem0[v22:word64] = x21
	v22 = v22 + 8
	Mem0[v22:word64] = x22
	Mem0[x29 + 152:word64] = x1
	x25 = x1
	w20 = w24
	w28 = w23
	Mem0[x29 + 168:word64] = x0
	goto l00000000004975F8
	// succ:  l00000000004975F8
l00000000004975DC:
	branch w0 == 0x00000000 l0000000000497768
	// succ:  l00000000004975E0 l0000000000497768
l00000000004975E0:
	w31 = w0 - 0x00000002
	NZCV = cond(w31)
	branch Test(EQ,Z) l0000000000497768
	// succ:  l00000000004975E8 l0000000000497768
l00000000004975E8:
	w28 = w28 + 0x00000001
	w31 = w28 - 0x00000101
	NZCV = cond(w31)
	x25 = x25 + 0x0000000000000010
	branch Test(EQ,Z) l000000000049773C
	// succ:  l00000000004975F8 l000000000049773C
l00000000004975F8:
	v28 = Mem0[x25:byte]
	w0 = (word32) v28
	w31 = w0 - 0x00000001
	NZCV = cond(w31)
	branch Test(NE,Z) l00000000004975DC
	// succ:  l0000000000497604 l00000000004975DC
l0000000000497604:
	x1 = Mem0[x25 + 8:word64]
	branch x1 == 0x0000000000000000 l00000000004975E8
	// succ:  l000000000049760C l00000000004975E8
l000000000049760C:
	x0 = Mem0[x29 + 104:word64]
	call rl_invoking_keyseqs_in_map (retsize: 0;)
	x26 = x0
	branch x0 == 0x0000000000000000 l00000000004975E8
	// succ:  l000000000049761C l00000000004975E8
l000000000049761C:
	x0 = Mem0[x0:word64]
	branch x0 == 0x0000000000000000 l0000000000497724
	// succ:  l0000000000497624 l0000000000497724
l0000000000497624:
	w2 = w28 | 0x00000040
	Mem0[x29 + 96:word32] = w2
	v34 = Mem0[x29 + 96:int8]
	w4 = (word32) v34
l0000000000497724:
	x0 = x26
	call xfree (retsize: 0;)
	w28 = w28 + 0x00000001
	w31 = w28 - 0x00000101
	NZCV = cond(w31)
	x25 = x25 + 0x0000000000000010
	branch Test(NE,Z) l00000000004975F8
	// succ:  l000000000049773C l00000000004975F8
l000000000049773C:
	x0 = x23
	v35 = sp + 16
	x19 = Mem0[v35:word64]
	v35 = v35 + 8
	x20 = Mem0[v35:word64]
	v36 = sp + 32
	x21 = Mem0[v36:word64]
	v36 = v36 + 8
	x22 = Mem0[v36:word64]
	v37 = sp + 48
	x23 = Mem0[v37:word64]
	v37 = v37 + 8
	x24 = Mem0[v37:word64]
	v38 = sp + 64
	x25 = Mem0[v38:word64]
	v38 = v38 + 8
	x26 = Mem0[v38:word64]
	v39 = sp + 80
	x27 = Mem0[v39:word64]
	v39 = v39 + 8
	x28 = Mem0[v39:word64]
	x29 = Mem0[sp:word64]
	sp = sp + 8
	x30 = Mem0[sp:word64]
	sp = sp + 208
	return
	// succ:  rl_invoking_keyseqs_in_map_exit
l0000000000497768:
	x0 = Mem0[x25 + 8:word64]
	x1 = Mem0[x29 + 104:word64]
	x31 = x0 - x1
	NZCV = cond(x31)
	branch Test(NE,Z) l00000000004975E8
	// succ:  l0000000000497778 l00000000004975E8
l0000000000497778:
	w0 = w28
	call fn000000000049477C (retsize: 0;)
	w19 = w20 + 0x00000001
	NZCV = cond(w19 - w24)
	x21 = x0
	branch Test(GE,NZV) l00000000004978C0
	// succ:  l0000000000497790 l00000000004978C0
l0000000000497790:
	Mem0[x23 + (int64) ((int32) w20):word64] = x21
	x20 = x23 + (int64) ((int32) w20)
	Mem0[x20 + 8:word64] = 0x0000000000000000
	w20 = w19
	goto l00000000004975E8
	// succ:  l00000000004975E8
l00000000004978C0:
	w24 = w24 + 0x0000000A
	x0 = x23
rl_invoking_keyseqs_in_map_exit:


// rl_invoking_keyseqs
// Return size: 0
void rl_invoking_keyseqs()
rl_invoking_keyseqs_entry:
	// succ:  l000000000049795C
l000000000049795C:
	sp = fp
	x1 = 0x00000000004D9000
	x1 = Mem0[x1 + 1200:word64]
	// succ:  l0000000000497964_thunk_rl_invoking_keyseqs_in_map
l0000000000497964_thunk_rl_invoking_keyseqs_in_map:
	call rl_invoking_keyseqs_in_map (retsize: 0;)
	return
	// succ:  rl_invoking_keyseqs_exit
rl_invoking_keyseqs_exit:


// rl_function_dumper
// Return size: 0
void rl_function_dumper()
rl_function_dumper_entry:
	// succ:  l0000000000497968
l0000000000497968:
	sp = fp
	sp = sp + -112
	Mem0[sp:word64] = x29
	sp = sp + 8
	Mem0[sp:word64] = x30
	x29 = x31 + 0x0000000000000000
	v8 = sp + 64
	Mem0[v8:word64] = x25
	v8 = v8 + 8
	Mem0[v8:word64] = x26
	v11 = sp + 32
	Mem0[v11:word64] = x21
	v11 = v11 + 8
	Mem0[v11:word64] = x22
	v14 = sp + 48
	Mem0[v14:word64] = x23
	v14 = v14 + 8
	Mem0[v14:word64] = x24
	v17 = sp + 80
	Mem0[v17:word64] = x27
	v17 = v17 + 8
	Mem0[v17:word64] = x28
	v20 = sp + 16
	Mem0[v20:word64] = x19
	v20 = v20 + 8
	Mem0[v20:word64] = x20
	w26 = w0
	x23 = 0x00000000004E1000
	call rl_funmap_names (retsize: 0;)
	x1 = Mem0[x23 + 3200:word64]
	x25 = x0
	w0 = 0x0000000A
	fputc(x0, x1)
	sp = sp + 0xFFFFFFFFFFFFFFF8
	x22 = Mem0[x25:word64]
	x25 = x25 + 8
	x27 = 0x00000000004D9000
	branch x22 == 0x0000000000000000 l0000000000497A30
	// succ:  l00000000004979AC l0000000000497A30
l00000000004979AC:
	x0 = 0x00000000004C4000
	x28 = 0x00000000004C4000
	x0 = x0 + 0xFFFFFFFFFFFFF8B0
	x24 = 0x00000000004C4000
	x28 = x28 + 0xFFFFFFFFFFFFF8F8
	Mem0[x29 + 104:word64] = x0
	x24 = x24 + 0xFFFFFFFFFFFFF8C8
	Mem0[x29 + 96:word64] = x28
	// succ:  l00000000004979CC
l00000000004979CC:
	x0 = x22
	call rl_named_function (retsize: 0;)
	x1 = Mem0[x27 + 1200:word64]
	call rl_invoking_keyseqs_in_map (retsize: 0;)
	x21 = x0
	branch w26 == 0x00000000 l0000000000497A4C
	// succ:  l00000000004979E4 l0000000000497A4C
l00000000004979E4:
	branch x0 == 0x0000000000000000 l0000000000497B14
	// succ:  l00000000004979E8 l0000000000497B14
l00000000004979E8:
	x3 = Mem0[x0:word64]
	x19 = x0 + 0x0000000000000008
	x20 = x0
	branch x3 == 0x0000000000000000 l0000000000497A20
	// succ:  l00000000004979F8 l0000000000497A20
l00000000004979F8:
	x0 = Mem0[x23 + 3200:word64]
	w1 = 0x00000001
	x2 = x24
	x4 = x22
	__fprintf_chk(x0, x1, x2, Mem0[sp:<unknown>])
	sp = sp + 0xFFFFFFFFFFFFFFF8
	x0 = Mem0[x20:word64]
	x20 = x19
	call xfree (retsize: 0;)
	x3 = Mem0[x19:word64]
	x19 = x19 + 8
	branch x3 != 0x0000000000000000 l00000000004979F8
	// succ:  l0000000000497A20 l00000000004979F8
l0000000000497A20:
	x0 = x21
	call xfree (retsize: 0;)
	// succ:  l0000000000497A28
l0000000000497A28:
	x22 = Mem0[x25:word64]
	x25 = x25 + 8
	branch x22 != 0x0000000000000000 l00000000004979CC
	// succ:  l0000000000497A30 l00000000004979CC
l0000000000497A30:
	v29 = sp + 16
	x19 = Mem0[v29:word64]
	v29 = v29 + 8
	x20 = Mem0[v29:word64]
	v30 = sp + 32
	x21 = Mem0[v30:word64]
	v30 = v30 + 8
	x22 = Mem0[v30:word64]
	v31 = sp + 48
	x23 = Mem0[v31:word64]
	v31 = v31 + 8
	x24 = Mem0[v31:word64]
	v32 = sp + 64
	x25 = Mem0[v32:word64]
	v32 = v32 + 8
	x26 = Mem0[v32:word64]
	v33 = sp + 80
	x27 = Mem0[v33:word64]
	v33 = v33 + 8
	x28 = Mem0[v33:word64]
	x29 = Mem0[sp:word64]
	sp = sp + 8
	x30 = Mem0[sp:word64]
	sp = sp + 112
	return
	// succ:  rl_function_dumper_exit
l0000000000497A4C:
	x0 = Mem0[x23 + 3200:word64]
	w1 = 0x00000001
	branch x21 == 0x0000000000000000 l0000000000497B00
	// succ:  l0000000000497A58 l0000000000497B00
l0000000000497A58:
	x2 = Mem0[x29 + 96:word64]
	x3 = x22
	__fprintf_chk(x0, x1, x2, Mem0[sp:<unknown>])
	sp = sp + 0xFFFFFFFFFFFFFFF8
	x3 = Mem0[x21:word64]
	branch x3 == 0x0000000000000000 l0000000000497A20
	// succ:  l0000000000497A6C l0000000000497A20
l0000000000497A6C:
	x0 = 0x00000000004AA000
	x22 = 0x00000000004BE000
	x20 = 0x00000000004BE000
	x19 = 0x0000000000000001
	x4 = 0x0000000000000000
	x28 = x0 + 0x0000000000000148
	x22 = x22 + 0x00000000000000E0
	x20 = x20 + 0x00000000000001C0
	x4 = x4 + 0x0000000000000001
	x1 = Mem0[x21 + x4:word64]
	x0 = Mem0[x23 + 3200:word64]
	x31 = x1 - x31
	NZCV = cond(x31)
l0000000000497B00:
	x2 = 0x00000000004C4000
	x2 = x2 + 0xFFFFFFFFFFFFF8D8
	x3 = x22
	__fprintf_chk(x0, x1, x2, Mem0[sp:<unknown>])
	sp = sp + 0xFFFFFFFFFFFFFFF8
	goto l0000000000497A28
	// succ:  l0000000000497A28
l0000000000497B14:
	x0 = Mem0[x23 + 3200:word64]
	x2 = Mem0[x29 + 104:word64]
	w1 = 0x00000001
	x3 = x22
	__fprintf_chk(x0, x1, x2, Mem0[sp:<unknown>])
	sp = sp + 0xFFFFFFFFFFFFFFF8
	goto l0000000000497A28
	// succ:  l0000000000497A28
rl_function_dumper_exit:


// rl_dump_functions
// Return size: 0
void rl_dump_functions()
rl_dump_functions_entry:
	// succ:  l0000000000497B2C
l0000000000497B2C:
	sp = fp
	sp = sp + -16
	Mem0[sp:word64] = x29
	sp = sp + 8
	Mem0[sp:word64] = x30
	x29 = x31 + 0x0000000000000000
	x0 = 0x00000000004E4000
	w0 = Mem0[x0 + 152:word32]
	branch w0 == 0x00000000 l0000000000497B5C
	// succ:  l0000000000497B40 l0000000000497B5C
l0000000000497B40:
	x0 = 0x00000000004E1000
	x3 = Mem0[x0 + 3200:word64]
	x0 = 0x00000000004AD000
	x0 = x0 + 0x00000000000005F0
	x1 = 0x0000000000000001
	x2 = 0x0000000000000002
	fwrite(x0, x1, x2, x3)
	sp = sp + 0xFFFFFFFFFFFFFFF8
	// succ:  l0000000000497B5C
l0000000000497B5C:
	x0 = 0x00000000004E1000
	w0 = Mem0[x0 + 3332:word32]
	call rl_function_dumper (retsize: 0;)
	call rl_on_new_line (retsize: 0;)
	w0 = 0x00000000
	x29 = Mem0[sp:word64]
	sp = sp + 8
	x30 = Mem0[sp:word64]
	sp = sp + 16
	return
	// succ:  rl_dump_functions_exit
rl_dump_functions_exit:


// rl_macro_dumper
// Return size: 0
void rl_macro_dumper()
rl_macro_dumper_entry:
	// succ:  l0000000000497B78
l0000000000497B78:
	sp = fp
	x1 = 0x00000000004D9000
	x1 = Mem0[x1 + 1200:word64]
	x2 = 0x0000000000000000
	// succ:  l0000000000497B84_thunk_fn0000000000494C18
l0000000000497B84_thunk_fn0000000000494C18:
	call fn0000000000494C18 (retsize: 0;)
	return
	// succ:  rl_macro_dumper_exit
rl_macro_dumper_exit:


// rl_dump_macros
// Return size: 0
void rl_dump_macros()
rl_dump_macros_entry:
	// succ:  l0000000000497B88
l0000000000497B88:
	sp = fp
	sp = sp + -16
	Mem0[sp:word64] = x29
	sp = sp + 8
	Mem0[sp:word64] = x30
	x29 = x31 + 0x0000000000000000
	x0 = 0x00000000004E4000
	w0 = Mem0[x0 + 152:word32]
	branch w0 == 0x00000000 l0000000000497BB8
	// succ:  l0000000000497B9C l0000000000497BB8
l0000000000497B9C:
	x0 = 0x00000000004E1000
	x3 = Mem0[x0 + 3200:word64]
	x0 = 0x00000000004AD000
	x0 = x0 + 0x00000000000005F0
	x1 = 0x0000000000000001
	x2 = 0x0000000000000002
	fwrite(x0, x1, x2, x3)
	sp = sp + 0xFFFFFFFFFFFFFFF8
	// succ:  l0000000000497BB8
l0000000000497BB8:
	x0 = 0x00000000004E1000
	x1 = 0x00000000004D9000
	x1 = Mem0[x1 + 1200:word64]
	w0 = Mem0[x0 + 3332:word32]
	x2 = 0x0000000000000000
	call fn0000000000494C18 (retsize: 0;)
	call rl_on_new_line (retsize: 0;)
	w0 = 0x00000000
	x29 = Mem0[sp:word64]
	sp = sp + 8
	x30 = Mem0[sp:word64]
	sp = sp + 16
	return
	// succ:  rl_dump_macros_exit
rl_dump_macros_exit:


// rl_variable_dumper
// Return size: 0
void rl_variable_dumper()
rl_variable_dumper_entry:
	// succ:  l0000000000497BE0
l0000000000497BE0:
	sp = fp
	sp = sp + -80
	Mem0[sp:word64] = x29
	sp = sp + 8
	Mem0[sp:word64] = x30
	x29 = x31 + 0x0000000000000000
	v8 = sp + 32
	Mem0[v8:word64] = x21
	v8 = v8 + 8
	Mem0[v8:word64] = x22
	v11 = sp + 48
	Mem0[v11:word64] = x23
	v11 = v11 + 8
	Mem0[v11:word64] = x24
	Mem0[sp + 64:word64] = x25
	x4 = 0x00000000004C4000
	x25 = 0x00000000004C4000
	x24 = 0x00000000004C4000
	x23 = 0x00000000004BF000
	x22 = 0x00000000004AD000
	v16 = sp + 16
	Mem0[v16:word64] = x19
	v16 = v16 + 8
	Mem0[v16:word64] = x20
	x4 = x4 + 0x0000000000000660
	w20 = w0
	x19 = x25 + 0x00000000000000C8
	x21 = 0x00000000004E1000
	x24 = x24 + 0xFFFFFFFFFFFFF928
	x23 = x23 + 0xFFFFFFFFFFFFF888
	x22 = x22 + 0x00000000000001E8
	goto l0000000000497C4C
	// succ:  l0000000000497C4C
l0000000000497C2C:
	x4 = Mem0[x19 + 8:word64]
	x0 = Mem0[x21 + 3200:word64]
	w4 = Mem0[x4:word32]
	NZCV = cond(w4 - w31)
l0000000000497C4C:
	x2 = 0x00000000004C4000
	w1 = 0x00000001
	x2 = x2 + 0xFFFFFFFFFFFFF918
	x3 = x4
	branch w20 != 0x00000000 l0000000000497C2C
	// succ:  l0000000000497C60 l0000000000497C2C
l0000000000497C60:
	x1 = Mem0[x19 + 8:word64]
	x0 = Mem0[x21 + 3200:word64]
	w1 = Mem0[x1:word32]
	x3 = x4
	NZCV = cond(w1 - w31)
rl_variable_dumper_exit:


// rl_dump_variables
// Return size: 0
void rl_dump_variables()
rl_dump_variables_entry:
	// succ:  l0000000000497D08
l0000000000497D08:
	sp = fp
	sp = sp + -16
	Mem0[sp:word64] = x29
	sp = sp + 8
	Mem0[sp:word64] = x30
	x29 = x31 + 0x0000000000000000
	x0 = 0x00000000004E4000
	w0 = Mem0[x0 + 152:word32]
	branch w0 == 0x00000000 l0000000000497D38
	// succ:  l0000000000497D1C l0000000000497D38
l0000000000497D1C:
	x0 = 0x00000000004E1000
	x3 = Mem0[x0 + 3200:word64]
	x0 = 0x00000000004AD000
	x0 = x0 + 0x00000000000005F0
	x1 = 0x0000000000000001
	x2 = 0x0000000000000002
	fwrite(x0, x1, x2, x3)
	sp = sp + 0xFFFFFFFFFFFFFFF8
	// succ:  l0000000000497D38
l0000000000497D38:
	x0 = 0x00000000004E1000
	w0 = Mem0[x0 + 3332:word32]
	call rl_variable_dumper (retsize: 0;)
	call rl_on_new_line (retsize: 0;)
	w0 = 0x00000000
	x29 = Mem0[sp:word64]
	sp = sp + 8
	x30 = Mem0[sp:word64]
	sp = sp + 16
	return
	// succ:  rl_dump_variables_exit
rl_dump_variables_exit:


// fn0000000000497D54
// Return size: 0
void fn0000000000497D54()
fn0000000000497D54_entry:
	// succ:  l0000000000497D54
l0000000000497D54:
	sp = fp
	sp = sp + -48
	Mem0[sp:word64] = x29
	sp = sp + 8
	Mem0[sp:word64] = x30
	x29 = x31 + 0x0000000000000000
	v8 = sp + 16
	Mem0[v8:word64] = x19
	v8 = v8 + 8
	Mem0[v8:word64] = x20
	v11 = sp + 32
	Mem0[v11:word64] = x21
	v11 = v11 + 8
	Mem0[v11:word64] = x22
	x20 = x0
	w21 = w1
	branch x0 == 0x0000000000000000 l0000000000497E6C
	// succ:  l0000000000497D70 l0000000000497E6C
l0000000000497D70:
	v16 = Mem0[x0:byte]
	w2 = (word32) v16
	branch w2 != 0x00000000 l0000000000497E20
	// succ:  l0000000000497D78 l0000000000497E20
l0000000000497D78:
	x0 = 0x0000000000000021
	w22 = w2
	// succ:  l0000000000497D80
l0000000000497D80:
	call xmalloc (retsize: 0;)
	w1 = 0x00000028
	Mem0[x0:byte] = (byte) w1
	x19 = x0
	branch w21 != 0x00000000 l0000000000497E44
	// succ:  l0000000000497D94 l0000000000497E44
l0000000000497D94:
	x0 = 0x000000000000000B
	w21 = w0
	x2 = 0x0000000000000001
	// succ:  l0000000000497DA0
l0000000000497DA0:
	x1 = 0x00000000004C4000
	x1 = x1 + 0xFFFFFFFFFFFFFC48
	x3 = Mem0[x1:word64]
	v23 = Mem0[x1 + 8:word16]
	w5 = (word32) v23
	v25 = Mem0[x1 + 10:byte]
	w4 = (word32) v25
	Mem0[x19 + x2:word64] = x3
	x1 = x19 + x2
	Mem0[x1 + 8:word16] = (word16) w5
	Mem0[x1 + 10:byte] = (byte) w4
	branch x20 == 0x0000000000000000 l0000000000497DDC
	// succ:  l0000000000497DC8 l0000000000497DDC
l0000000000497DC8:
	x0 = x19 + x0
	x1 = x20
	strcpy(x0, x1)
	sp = sp + 0xFFFFFFFFFFFFFFF8
	w0 = w22 + w21
l0000000000497DDC:
	x1 = 0x00000000004C4000
	x1 = x1 + 0xFFFFFFFFFFFFFC58
	w2 = Mem0[x1:word32]
	x1 = x19
	Mem0[x19 + x0:word32] = w2
	x0 = 0x00000000004BF000
	x0 = x0 + 0x0000000000000050
	call rl_message (retsize: 0;)
	x0 = x19
	call xfree (retsize: 0;)
	x0 = 0x00000000004DE000
	x0 = Mem0[x0 + 1488:word64]
	call x0 (retsize: 0;)
	v27 = sp + 16
	x19 = Mem0[v27:word64]
	v27 = v27 + 8
	x20 = Mem0[v27:word64]
	v28 = sp + 32
	x21 = Mem0[v28:word64]
	v28 = v28 + 8
	x22 = Mem0[v28:word64]
	x29 = Mem0[sp:word64]
	sp = sp + 8
	x30 = Mem0[sp:word64]
	sp = sp + 48
	return
	// succ:  fn0000000000497D54_exit
l0000000000497E20:
	strlen(x0)
	sp = sp + 0xFFFFFFFFFFFFFFF8
	w1 = w0 + 0x00000021
	w22 = w0
l0000000000497E44:
	x0 = 0x00000000004C4000
	x0 = x0 + 0xFFFFFFFFFFFFFC38
	x2 = Mem0[x0:word64]
	v29 = Mem0[x0 + 8:byte]
	w1 = (word32) v29
	x0 = 0x0000000000000013
	Mem0[x19 + 1:word64] = x2
	Mem0[x19 + 9:byte] = (byte) w1
	w21 = w0
	x2 = 0x0000000000000009
	goto l0000000000497DA0
	// succ:  l0000000000497DA0
l0000000000497E6C:
	x0 = 0x0000000000000021
	w22 = w20
	goto l0000000000497D80
	// succ:  l0000000000497D80
fn0000000000497D54_exit:


// _rl_scxt_alloc
// Return size: 0
void _rl_scxt_alloc()
_rl_scxt_alloc_entry:
	// succ:  l0000000000497E78
l0000000000497E78:
	sp = fp
	sp = sp + -48
	Mem0[sp:word64] = x29
	sp = sp + 8
	Mem0[sp:word64] = x30
	x29 = x31 + 0x0000000000000000
	v8 = sp + 16
	Mem0[v8:word64] = x19
	v8 = v8 + 8
	Mem0[v8:word64] = x20
	w20 = w0
	x0 = 0x0000000000000098
	Mem0[x29 + 32:word64] = x1
	call xmalloc (retsize: 0;)
	x19 = x0
	x0 = 0x00000000004E4000
	w3 = Mem0[x0 + 136:word32]
	x0 = 0x00000000004E4000
	x1 = Mem0[x29 + 32:word64]
	w2 = Mem0[x0 + 120:word32]
	Mem0[x19 + 4:word32] = w1
	Mem0[x19 + 48:word32] = w3
	Mem0[x19 + 52:word32] = w2
	Mem0[x19:word32] = w20
	Mem0[x19 + 8:word64] = 0x0000000000000000
	Mem0[x19 + 16:word32] = 0x00000000
	Mem0[x19 + 20:word32] = 0x00000000
	Mem0[x19 + 24:word64] = 0x0000000000000000
	Mem0[x19 + 32:word64] = 0x0000000000000000
	Mem0[x19 + 44:word32] = 0x00000000
	Mem0[x19 + 40:word32] = 0x00000000
	call where_history (retsize: 0;)
	x1 = 0x00000000004D9000
	x1 = Mem0[x1 + 1200:word64]
	Mem0[x19 + 56:word32] = w0
	Mem0[x19 + 60:word32] = w0
	Mem0[x19 + 64:word64] = 0x0000000000000000
	Mem0[x19 + 72:word64] = 0x0000000000000000
	Mem0[x19 + 80:word64] = x1
	Mem0[x19 + 88:word64] = x1
	Mem0[x19 + 96:word32] = 0x00000000
	Mem0[x19 + 100:word32] = 0x00000000
	Mem0[x19 + 104:word32] = 0x00000000
	Mem0[x19 + 128:word64] = 0x0000000000000000
	Mem0[x19 + 140:word32] = 0x00000000
	Mem0[x19 + 136:word32] = 0x00000000
	Mem0[x19 + 144:word64] = 0x0000000000000000
	x0 = x19
	v16 = sp + 16
	x19 = Mem0[v16:word64]
	v16 = v16 + 8
	x20 = Mem0[v16:word64]
	x29 = Mem0[sp:word64]
	sp = sp + 8
	x30 = Mem0[sp:word64]
	sp = sp + 48
	return
	// succ:  _rl_scxt_alloc_exit
_rl_scxt_alloc_exit:


// _rl_scxt_dispose
// Return size: 0
void _rl_scxt_dispose()
_rl_scxt_dispose_entry:
	// succ:  l0000000000497F28
l0000000000497F28:
	sp = fp
	sp = sp + -32
	Mem0[sp:word64] = x29
	sp = sp + 8
	Mem0[sp:word64] = x30
	x29 = x31 + 0x0000000000000000
	Mem0[sp + 16:word64] = x19
	x19 = x0
	x0 = Mem0[x0 + 8:word64]
	branch x0 == 0x0000000000000000 l0000000000497F44
	// succ:  l0000000000497F40 l0000000000497F44
l0000000000497F40:
	call free (retsize: 0;)
	// succ:  l0000000000497F44
l0000000000497F44:
	x0 = Mem0[x19 + 32:word64]
	branch x0 == 0x0000000000000000 l0000000000497F50
	// succ:  l0000000000497F4C l0000000000497F50
l0000000000497F4C:
	call free (retsize: 0;)
	// succ:  l0000000000497F50
l0000000000497F50:
	x0 = Mem0[x19 + 24:word64]
	branch x0 == 0x0000000000000000 l0000000000497F5C
	// succ:  l0000000000497F58 l0000000000497F5C
l0000000000497F58:
	call free (retsize: 0;)
	// succ:  l0000000000497F5C
l0000000000497F5C:
	x0 = x19
	x19 = Mem0[sp + 16:word64]
	x29 = Mem0[sp:word64]
	sp = sp + 8
	x30 = Mem0[sp:word64]
	sp = sp + 32
	// succ:  l0000000000497F68_thunk_xfree
l0000000000497F68_thunk_xfree:
	call xfree (retsize: 0;)
	return
	// succ:  _rl_scxt_dispose_exit
_rl_scxt_dispose_exit:


// _rl_search_getchar
// Return size: 0
void _rl_search_getchar()
_rl_search_getchar_entry:
	// succ:  l0000000000498090
l0000000000498090:
	sp = fp
	sp = sp + -48
	Mem0[sp:word64] = x29
	sp = sp + 8
	Mem0[sp:word64] = x30
	x29 = x31 + 0x0000000000000000
	v8 = sp + 16
	Mem0[v8:word64] = x19
	v8 = v8 + 8
	Mem0[v8:word64] = x20
	x19 = 0x00000000004E1000
	w1 = Mem0[x19 + 3168:word32]
	Mem0[sp + 32:word64] = x21
	w1 = w1 | 0x00000040
	x21 = x0
	Mem0[x19 + 3168:word32] = w1
	call rl_read_key (retsize: 0;)
	w20 = w0
	w0 = Mem0[x19 + 3168:word32]
	Mem0[x21 + 104:word32] = w20
	w0 = w0 & 0xFFFFFFBF
	Mem0[x19 + 3168:word32] = w0
	__ctype_get_mb_cur_max()
	sp = sp + 0xFFFFFFFFFFFFFFF8
	x31 = x0 - 0x0000000000000001
	NZCV = cond(x31)
	branch Test(ULE,ZC) l00000000004980E4
	// succ:  l00000000004980D8 l00000000004980E4
l00000000004980D8:
	x0 = 0x00000000004E2000
	w0 = Mem0[x0 + 3968:word32]
	branch w0 == 0x00000000 l00000000004980F8
	// succ:  l00000000004980E4 l00000000004980F8
l00000000004980E4:
	w0 = w20
	x21 = Mem0[sp + 32:word64]
	v16 = sp + 16
	x19 = Mem0[v16:word64]
	v16 = v16 + 8
	x20 = Mem0[v16:word64]
	x29 = Mem0[sp:word64]
	sp = sp + 8
	x30 = Mem0[sp:word64]
	sp = sp + 48
	return
	// succ:  _rl_search_getchar_exit
l00000000004980F8:
	w0 = Mem0[x21 + 104:word32]
	x1 = x21 + 0x000000000000006C
	w2 = 0x00000010
	call _rl_read_mbstring (retsize: 0;)
	Mem0[x21 + 104:word32] = w0
	w20 = w0
	w0 = w20
	x21 = Mem0[sp + 32:word64]
	v19 = sp + 16
	x19 = Mem0[v19:word64]
	v19 = v19 + 8
	x20 = Mem0[v19:word64]
	x29 = Mem0[sp:word64]
	sp = sp + 8
	x30 = Mem0[sp:word64]
	sp = sp + 48
	return
	// succ:  _rl_search_getchar_exit
_rl_search_getchar_exit:


// _rl_isearch_dispatch
// Return size: 0
void _rl_isearch_dispatch()
_rl_isearch_dispatch_entry:
	// succ:  l0000000000498124
l0000000000498124:
	sp = fp
	sp = sp + -96
	Mem0[sp:word64] = x29
	sp = sp + 8
	Mem0[sp:word64] = x30
	x29 = x31 + 0x0000000000000000
	v8 = sp + 16
	Mem0[v8:word64] = x19
	v8 = v8 + 8
	Mem0[v8:word64] = x20
	v11 = sp + 32
	Mem0[v11:word64] = x21
	v11 = v11 + 8
	Mem0[v11:word64] = x22
	v14 = sp + 48
	Mem0[v14:word64] = x23
	v14 = v14 + 8
	Mem0[v14:word64] = x24
	v17 = sp + 64
	Mem0[v17:word64] = x25
	v17 = v17 + 8
	Mem0[v17:word64] = x26
	v20 = sp + 80
	Mem0[v20:word64] = x27
	v20 = v20 + 8
	Mem0[v20:word64] = x28
	w20 = w1
	x19 = x0
	branch (w1 & 0x00000000) == 0x00000000 l0000000000498984
	// succ:  l000000000049814C l0000000000498984
l000000000049814C:
	x0 = Mem0[x19 + 80:word64]
l0000000000498224:
	v25 = sp + 16
	x19 = Mem0[v25:word64]
	v25 = v25 + 8
	x20 = Mem0[v25:word64]
	v26 = sp + 32
	x21 = Mem0[v26:word64]
	v26 = v26 + 8
	x22 = Mem0[v26:word64]
	v27 = sp + 48
	x23 = Mem0[v27:word64]
	v27 = v27 + 8
	x24 = Mem0[v27:word64]
	v28 = sp + 64
	x25 = Mem0[v28:word64]
	v28 = v28 + 8
	x26 = Mem0[v28:word64]
	v29 = sp + 80
	x27 = Mem0[v29:word64]
	v29 = v29 + 8
	x28 = Mem0[v29:word64]
	x29 = Mem0[sp:word64]
	sp = sp + 8
	x30 = Mem0[sp:word64]
	sp = sp + 96
	return
	// succ:  _rl_isearch_dispatch_exit
l0000000000498984:
	w1 = Mem0[x19 + 4:word32]
	w0 = Mem0[x19 + 60:word32]
	w1 = w1 | 0x00000004
	Mem0[x19 + 96:word32] = w0
	Mem0[x19 + 4:word32] = w1
	w0 = 0xFFFFFFFF
	goto l0000000000498224
	// succ:  l0000000000498224
_rl_isearch_dispatch_exit:


// fn00000000004989D0
// Return size: 0
void fn00000000004989D0()
fn00000000004989D0_entry:
	// succ:  l00000000004989D0
l00000000004989D0:
	sp = v3
	sp = sp + -64
	Mem0[sp:word64] = x29
	sp = sp + 8
	Mem0[sp:word64] = x30
	x29 = x31 + 0x0000000000000000
	v7 = sp + 32
	Mem0[v7:word64] = x21
	v7 = v7 + 8
	Mem0[v7:word64] = x22
	x21 = 0x00000000004E1000
	w1 = Mem0[x21 + 3168:word32]
	v11 = sp + 48
	Mem0[v11:word64] = x23
	v11 = v11 + 8
	Mem0[v11:word64] = x24
	w2 = w1 | 0x00000080
	w23 = w0
	w1 = 0x00000000
	w0 = 0x00000001
	v17 = sp + 16
	Mem0[v17:word64] = x19
	v17 = v17 + 8
	Mem0[v17:word64] = x20
	Mem0[x21 + 3168:word32] = w2
	call _rl_scxt_alloc (retsize: 0;)
	x19 = x0
	branch (w23 & 0x00000000) == 0x00000000 l0000000000498B8C
	// succ:  l0000000000498A0C l0000000000498B8C
l0000000000498A0C:
	x22 = 0x00000000004E2000
	x0 = x22 + 0x00000000000000F0
	x1 = Mem0[x0 + 24:word64]
	branch x1 == 0x0000000000000000 l0000000000498BA8
	// succ:  l0000000000498A1C l0000000000498BA8
l0000000000498A1C:
	Mem0[x19 + 144:word64] = x1
	call history_list (retsize: 0;)
	x20 = x0
	call rl_maybe_replace_line (retsize: 0;)
	branch x20 == 0x0000000000000000 l0000000000498BC4
	// succ:  l0000000000498A30 l0000000000498BC4
l0000000000498A30:
	x1 = Mem0[x20:word64]
	branch x1 == 0x0000000000000000 l0000000000498BD8
	// succ:  l0000000000498A38 l0000000000498BD8
l0000000000498A38:
	x2 = x20 + 0x0000000000000008
	w1 = 0x00000000
	// succ:  l0000000000498A40
l0000000000498A40:
	x3 = Mem0[x2:word64]
	x2 = x2 + 8
	w1 = w1 + 0x00000001
	branch x3 != 0x0000000000000000 l0000000000498A40
	// succ:  l0000000000498A4C l0000000000498A40
l0000000000498A4C:
	w0 = w1 + 0x00000001
l0000000000498A54:
	Mem0[x19 + 40:word32] = w1
	call xmalloc (retsize: 0;)
	w5 = Mem0[x19 + 40:word32]
	Mem0[x19 + 24:word64] = x0
	NZCV = cond(w5 - w31)
	branch Test(LE,ZCV) l0000000000498BD0
	// succ:  l0000000000498A6C l0000000000498BD0
l0000000000498A6C:
	w4 = w5 - 0x00000001
	x4 = x4 + 0x0000000000000001
l0000000000498AA4:
	x0 = 0x00000000004E2000
	x0 = Mem0[x0 + 3864:word64]
	branch x0 == 0x0000000000000000 l0000000000498BE0
	// succ:  l0000000000498AB0 l0000000000498BE0
l0000000000498AB0:
	x1 = Mem0[x0:word64]
	x0 = Mem0[x19 + 24:word64]
	x20 = 0x00000000004E1000
	Mem0[x0 + x24:word64] = x1
	// succ:  l0000000000498AC0
l0000000000498AC0:
	w0 = Mem0[x19 + 56:word32]
	w5 = w5 + 0x00000001
	Mem0[x19 + 40:word32] = w5
	Mem0[x19 + 96:word32] = w0
	call rl_save_prompt (retsize: 0;)
	w0 = 0x00000080
	Mem0[x19 + 20:word32] = w0
	x0 = 0x0000000000000080
	call xmalloc (retsize: 0;)
	Mem0[x19 + 8:word64] = x0
	Mem0[x19 + 16:word32] = 0x00000000
	Mem0[x0:byte] = 0x00
	NZCV = cond(w23 - w31)
	x0 = Mem0[x20 + 3256:word64]
	w1 = 0xFFFFFFFF
l0000000000498B8C:
	w0 = Mem0[x19 + 4:word32]
	x22 = 0x00000000004E2000
	w0 = w0 | 0x00000001
	Mem0[x19 + 4:word32] = w0
	x0 = x22 + 0x00000000000000F0
	x1 = Mem0[x0 + 24:word64]
	branch x1 != 0x0000000000000000 l0000000000498A1C
	// succ:  l0000000000498BA8 l0000000000498A1C
l0000000000498BA8:
	x1 = 0x00000000004C4000
	x1 = x1 + 0xFFFFFFFFFFFFFC60
	Mem0[x19 + 144:word64] = x1
	call history_list (retsize: 0;)
	x20 = x0
	call rl_maybe_replace_line (retsize: 0;)
	branch x20 != 0x0000000000000000 l0000000000498A30
	// succ:  l0000000000498BC4 l0000000000498A30
l0000000000498BC4:
	x0 = 0x0000000000000008
	w1 = w20
	goto l0000000000498A54
	// succ:  l0000000000498A54
l0000000000498BD0:
	x24 = 0x0000000000000000
	goto l0000000000498AA4
	// succ:  l0000000000498AA4
l0000000000498BD8:
	x0 = 0x0000000000000008
	goto l0000000000498A54
	// succ:  l0000000000498A54
l0000000000498BE0:
	x20 = 0x00000000004E1000
	x0 = Mem0[x20 + 3256:word64]
	strlen(x0)
	sp = sp + 0xFFFFFFFFFFFFFFF8
	x0 = x0 + 0x0000000000000001
	call xmalloc (retsize: 0;)
	x1 = Mem0[x20 + 3256:word64]
	Mem0[x19 + 32:word64] = x0
	strcpy(x0, x1)
	sp = sp + 0xFFFFFFFFFFFFFFF8
	x1 = Mem0[x19 + 32:word64]
	x0 = Mem0[x19 + 24:word64]
	w5 = Mem0[x19 + 40:word32]
	Mem0[x0 + x24:word64] = x1
	goto l0000000000498AC0
	// succ:  l0000000000498AC0
fn00000000004989D0_exit:


// rl_reverse_search_history
// Return size: 0
void rl_reverse_search_history()
rl_reverse_search_history_entry:
	// succ:  l0000000000498C14
l0000000000498C14:
	sp = fp
	w0 = w31 - w0
	// succ:  l0000000000498C18_thunk_fn00000000004989D0
l0000000000498C18_thunk_fn00000000004989D0:
	call fn00000000004989D0 (retsize: 0;)
	return
	// succ:  rl_reverse_search_history_exit
rl_reverse_search_history_exit:


// rl_forward_search_history
// Return size: 0
void rl_forward_search_history()
rl_forward_search_history_entry:
	// succ:  l0000000000498C1C
l0000000000498C1C:
	sp = fp
	// succ:  l0000000000498C1C_thunk_fn00000000004989D0
l0000000000498C1C_thunk_fn00000000004989D0:
	call fn00000000004989D0 (retsize: 0;)
	return
	// succ:  rl_forward_search_history_exit
rl_forward_search_history_exit:


// _rl_isearch_callback
// Return size: 0
void _rl_isearch_callback()
_rl_isearch_callback_entry:
	goto l0000000000498C20
	// succ:  l0000000000498C20
l0000000000497F6C:
	sp = sp + -48
	Mem0[sp:word64] = x29
	sp = sp + 8
	Mem0[sp:word64] = x30
	x29 = x31 + 0x0000000000000000
	v14 = sp + 16
	Mem0[v14:word64] = x19
	v14 = v14 + 8
	Mem0[v14:word64] = x20
	v17 = sp + 32
	Mem0[v17:word64] = x21
	v17 = v17 + 8
	Mem0[v17:word64] = x22
	x19 = x0
	w21 = w1
	x20 = 0x00000000004E2000
	branch (w1 & 0x00000000) == 0x00000000 l0000000000498004
	// succ:  l0000000000497F8C l0000000000498004
l0000000000497F8C:
	x0 = Mem0[x19 + 24:word64]
	v20 = Mem0[x19 + 28:int32]
	x1 = (word64) v20
	x22 = 0x00000000004E1000
	x1 = Mem0[x0 + x1:word64]
	x0 = Mem0[x22 + 3256:word64]
	x20 = 0x00000000004E2000
	strcpy(x0, x1)
	sp = sp + 0xFFFFFFFFFFFFFFF8
	call rl_restore_prompt (retsize: 0;)
	x0 = x20 + 0x00000000000000F0
	x0 = Mem0[x0:word64]
	branch x0 == 0x0000000000000000 l0000000000497FBC
	// succ:  l0000000000497FB8 l0000000000497FBC
l0000000000497FB8:
	call free (retsize: 0;)
	// succ:  l0000000000497FBC
l0000000000497FBC:
	x4 = Mem0[x19 + 8:word64]
	w3 = Mem0[x19 + 16:word32]
	w2 = Mem0[x19 + 60:word32]
	w0 = Mem0[x19 + 56:word32]
	x1 = x20 + 0x00000000000000F0
	Mem0[x1:word64] = x4
	Mem0[x1 + 8:word32] = w3
	Mem0[x19 + 8:word64] = 0x0000000000000000
	NZCV = cond(w2 - w0)
	branch Test(LT,NV) l0000000000498040
	// succ:  l0000000000497FE4 l0000000000498040
l0000000000497FE4:
	w1 = 0x00000000
	w0 = w2 - w0
	call rl_get_next_history (retsize: 0;)
	w1 = Mem0[x19 + 140:word32]
	branch (w1 & 0x00000000) == 0x00000000 l0000000000498054
	// succ:  l0000000000497FF8 l0000000000498054
l0000000000497FF8:
	x0 = 0x00000000004E4000
	Mem0[x0 + 136:word32] = w1
	call rl_clear_message (retsize: 0;)
	// succ:  l0000000000498004
l0000000000498004:
	x0 = x19
	w1 = 0x00000000
	call _rl_scxt_dispose (retsize: 0;)
	x0 = 0x00000000004E1000
	w1 = Mem0[x0 + 3168:word32]
	NZCV = cond(w21 - w31)
	x20 = x20 + 0x00000000000000F0
	w1 = w1 & 0xFFFFFF7F
	Mem0[x20 + 16:word64] = 0x0000000000000000
	Mem0[x0 + 3168:word32] = w1
	v21 = sp + 16
	x19 = Mem0[v21:word64]
	v21 = v21 + 8
	x20 = Mem0[v21:word64]
	w0 = (word32) Test(NE,Z)
	v23 = sp + 32
	x21 = Mem0[v23:word64]
	v23 = v23 + 8
	x22 = Mem0[v23:word64]
	x29 = Mem0[sp:word64]
	sp = sp + 8
	x30 = Mem0[sp:word64]
	sp = sp + 48
	return
	// succ:  _rl_isearch_callback_exit
l0000000000498040:
	w1 = 0x00000000
	w0 = w0 - w2
	call rl_get_previous_history (retsize: 0;)
	w1 = Mem0[x19 + 140:word32]
	branch (w1 & 0x00000000) == 0x00000000 l0000000000497FF8
	// succ:  l0000000000498054 l0000000000497FF8
l0000000000498054:
	w1 = Mem0[x19 + 60:word32]
	w0 = Mem0[x19 + 56:word32]
	NZCV = cond(w1 - w0)
	branch Test(EQ,Z) l0000000000498084
	// succ:  l0000000000498064 l0000000000498084
l0000000000498064:
	x0 = Mem0[x22 + 3256:word64]
	strlen(x0)
	sp = sp + 0xFFFFFFFFFFFFFFF8
	w1 = w0
	Mem0[x19 + 140:word32] = w0
	// succ:  l0000000000498074
l0000000000498074:
	w0 = Mem0[x19 + 52:word32]
	x2 = 0x00000000004E4000
	Mem0[x2 + 120:word32] = w0
	goto l0000000000497FF8
	// succ:  l0000000000497FF8
l0000000000498084:
	w1 = Mem0[x19 + 48:word32]
	Mem0[x19 + 140:word32] = w1
	goto l0000000000498074
	// succ:  l0000000000498074
l0000000000498C20:
	sp = fp
	sp = sp + -32
	Mem0[sp:word64] = x29
	sp = sp + 8
	Mem0[sp:word64] = x30
	x29 = x31 + 0x0000000000000000
	Mem0[sp + 16:word64] = x19
	x19 = x0
	call _rl_search_getchar (retsize: 0;)
	w1 = Mem0[x19 + 104:word32]
	x0 = x19
	call _rl_isearch_dispatch (retsize: 0;)
	NZCV = cond(w0 - w31)
	w1 = w0
	branch Test(LE,ZCV) l0000000000498C5C
	// succ:  l0000000000498C4C l0000000000498C5C
l0000000000498C4C:
	w0 = 0x00000000
	x19 = Mem0[sp + 16:word64]
	x29 = Mem0[sp:word64]
	sp = sp + 8
	x30 = Mem0[sp:word64]
	sp = sp + 32
	return
	// succ:  _rl_isearch_callback_exit
l0000000000498C5C:
	x0 = x19
	x19 = Mem0[sp + 16:word64]
	x29 = Mem0[sp:word64]
	sp = sp + 8
	x30 = Mem0[sp:word64]
	sp = sp + 32
	goto l0000000000497F6C
	// succ:  l0000000000497F6C
_rl_isearch_callback_exit:


// fn0000000000498C6C
// Return size: 0
void fn0000000000498C6C()
fn0000000000498C6C_entry:
	// succ:  l0000000000498C6C
l0000000000498C6C:
	sp = fp
	sp = sp + -64
	Mem0[sp:word64] = x29
	sp = sp + 8
	Mem0[sp:word64] = x30
	x29 = x31 + 0x0000000000000000
	v8 = sp + 16
	Mem0[v8:word64] = x19
	v8 = v8 + 8
	Mem0[v8:word64] = x20
	x20 = 0x00000000004DE000
	x2 = x20 + 0x00000000000005B8
	x1 = Mem0[x2:word64]
	w19 = w0
	x0 = Mem0[x1:word64]
	v16 = sp + 32
	Mem0[v16:word64] = x21
	v16 = v16 + 8
	Mem0[v16:word64] = x22
	Mem0[sp + 48:word64] = x23
	branch x0 == 0x0000000000000000 l0000000000498D74
	// succ:  l0000000000498C98 l0000000000498D74
l0000000000498C98:
	w0 = Mem0[x2 + 8:word32]
	NZCV = cond(w19 - w0)
	w3 = w0
	branch Test(GT,NZV) l0000000000498D24
	// succ:  l0000000000498CA8 l0000000000498D24
l0000000000498CA8:
	NZCV = cond(w19 - w3)
	x0 = x20 + 0x00000000000005B8
	branch Test(GE,NZV) l0000000000498E38
	// succ:  l0000000000498CB4 l0000000000498E38
l0000000000498CB4:
l0000000000498CF8:
	x21 = Mem0[x19 + 8:word64]
	branch x21 == 0x0000000000000000 l0000000000498DB4
	// succ:  l0000000000498D00 l0000000000498DB4
l0000000000498D00:
	x0 = 0x00000000004E2000
	w1 = 0x00000001
	x0 = x0 + 0x0000000000000110
	Mem0[x0:word32] = w1
	v22 = sp + 16
	x19 = Mem0[v22:word64]
	v22 = v22 + 8
	x20 = Mem0[v22:word64]
	v23 = sp + 32
	x21 = Mem0[v23:word64]
	v23 = v23 + 8
	x22 = Mem0[v23:word64]
	x23 = Mem0[sp + 48:word64]
	x29 = Mem0[sp:word64]
	sp = sp + 8
	x30 = Mem0[sp:word64]
	sp = sp + 64
	return
	// succ:  fn0000000000498C6C_exit
l0000000000498D24:
l0000000000498D74:
	w0 = Mem0[x2 + 8:word32]
	NZCV = cond(w0 - w19)
	branch Test(GE,NZV) l0000000000498D88
	// succ:  l0000000000498D80 l0000000000498D88
l0000000000498D80:
	Mem0[x2 + 8:word32] = w19
	w0 = w19
	// succ:  l0000000000498D88
l0000000000498D88:
	x21 = x20 + 0x00000000000005B8
	x22 = Mem0[x21 + 16:word64]
l0000000000498DB4:
	x20 = x20 + 0x00000000000005B8
	x1 = Mem0[x20:word64]
	w0 = 0x00000100
	Mem0[x19 + 16:word32] = w0
	Mem0[x1 + 16:word32] = w0
	w0 = Mem0[x19 + 16:word32]
	Mem0[x19 + 32:word32] = w0
l0000000000498E38:
	x19 = Mem0[x0 + 16:word64]
	goto l0000000000498CF8
	// succ:  l0000000000498CF8
fn0000000000498C6C_exit:


// fn0000000000498E40
// Return size: 0
void fn0000000000498E40()
fn0000000000498E40_entry:
	// succ:  l0000000000498E40
l0000000000498E40:
	sp = fp
	sp = sp + -16
	Mem0[sp:word64] = x29
	sp = sp + 8
	Mem0[sp:word64] = x30
	x29 = x31 + 0x0000000000000000
	x0 = 0x00000000004E4000
	x0 = Mem0[x0 + 288:word64]
	branch x0 == 0x0000000000000000 l0000000000498E70
	// succ:  l0000000000498E54 l0000000000498E70
l0000000000498E54:
	x2 = 0x00000000004A0000
	w1 = 0x00000001
	x2 = x2 + 0xFFFFFFFFFFFFFAAC
	call tputs (retsize: 0;)
	x0 = 0x00000000004E2000
	x0 = x0 + 0x0000000000000110
	Mem0[x0 + 4:word32] = 0x00000000
	// succ:  l0000000000498E70
l0000000000498E70:
	x29 = Mem0[sp:word64]
	sp = sp + 8
	x30 = Mem0[sp:word64]
	sp = sp + 16
	return
	// succ:  fn0000000000498E40_exit
fn0000000000498E40_exit:


// fn0000000000498E78
// Return size: 0
void fn0000000000498E78()
fn0000000000498E78_entry:
	// succ:  l0000000000498E78
l0000000000498E78:
	sp = fp
	sp = sp + -48
	Mem0[sp:word64] = x29
	sp = sp + 8
	Mem0[sp:word64] = x30
	x29 = x31 + 0x0000000000000000
	v6 = sp + 16
	Mem0[v6:word64] = x19
	v6 = v6 + 8
	Mem0[v6:word64] = x20
	Mem0[sp + 32:word64] = x21
	NZCV = cond(w0 - w31)
	w20 = w0
	w19 = 0x00000000
	x21 = 0x00000000004E1000
	branch Test(LE,ZCV) l0000000000498EB4
	// succ:  l0000000000498E9C l0000000000498EB4
l0000000000498E9C:
	x1 = Mem0[x21 + 3200:word64]
	w0 = 0x00000020
	_IO_putc(x0, x1)
	sp = sp + 0xFFFFFFFFFFFFFFF8
	w19 = w19 + 0x00000001
	NZCV = cond(w19 - w20)
	branch Test(NE,Z) l0000000000498E9C
	// succ:  l0000000000498EB4 l0000000000498E9C
l0000000000498EB4:
	x0 = 0x00000000004E2000
	x0 = x0 + 0x0000000000000110
	w1 = Mem0[x0 + 4:word32]
	x21 = Mem0[sp + 32:word64]
	w20 = w1 + w20
	Mem0[x0 + 4:word32] = w20
	v20 = sp + 16
	x19 = Mem0[v20:word64]
	v20 = v20 + 8
	x20 = Mem0[v20:word64]
	x29 = Mem0[sp:word64]
	sp = sp + 8
	x30 = Mem0[sp:word64]
	sp = sp + 48
	return
	// succ:  fn0000000000498E78_exit
fn0000000000498E78_exit:


// fn0000000000498ED8
// Return size: 0
void fn0000000000498ED8()
fn0000000000498ED8_entry:
	// succ:  l0000000000498ED8
l0000000000498ED8:
	sp = fp
	sp = sp + -112
	Mem0[sp:word64] = x29
	sp = sp + 8
	Mem0[sp:word64] = x30
	x29 = x31 + 0x0000000000000000
	v8 = sp + 32
	Mem0[v8:word64] = x21
	v8 = v8 + 8
	Mem0[v8:word64] = x22
	v11 = sp + 48
	Mem0[v11:word64] = x23
	v11 = v11 + 8
	Mem0[v11:word64] = x24
	v14 = sp + 16
	Mem0[v14:word64] = x19
	v14 = v14 + 8
	Mem0[v14:word64] = x20
	Mem0[sp + 64:word64] = x25
	NZCV = cond(w2 - w1)
	x23 = x0
	w22 = w1
	w21 = w2
	w0 = 0x00000000
	branch Test(GT,NZV) l0000000000498F20
	// succ:  l0000000000498F08 l0000000000498F20
l0000000000498F08:
	v24 = sp + 16
	x19 = Mem0[v24:word64]
	v24 = v24 + 8
	x20 = Mem0[v24:word64]
	v25 = sp + 32
	x21 = Mem0[v25:word64]
	v25 = v25 + 8
	x22 = Mem0[v25:word64]
	v26 = sp + 48
	x23 = Mem0[v26:word64]
	v26 = v26 + 8
	x24 = Mem0[v26:word64]
	x25 = Mem0[sp + 64:word64]
	x29 = Mem0[sp:word64]
	sp = sp + 8
	x30 = Mem0[sp:word64]
	sp = sp + 112
	return
	// succ:  fn0000000000498ED8_exit
l0000000000498F20:
	Mem0[x29 + 96:word64] = x3
	__ctype_get_mb_cur_max()
	sp = sp + 0xFFFFFFFFFFFFFFF8
	x31 = x0 - 0x0000000000000001
	NZCV = cond(x31)
	x3 = Mem0[x29 + 96:word64]
	branch Test(EQ,Z) l0000000000498F40
	// succ:  l0000000000498F34 l0000000000498F40
l0000000000498F34:
	x0 = 0x00000000004E2000
	w19 = Mem0[x0 + 3968:word32]
	branch w19 == 0x00000000 l0000000000498F68
	// succ:  l0000000000498F40 l0000000000498F68
l0000000000498F40:
	x0 = 0x00000000004C4000
	x0 = x0 + 0xFFFFFFFFFFFFFC68
	call _rl_ttymsg (retsize: 0;)
	w0 = w21 - w22
	v30 = sp + 16
	x19 = Mem0[v30:word64]
	v30 = v30 + 8
	x20 = Mem0[v30:word64]
	v31 = sp + 32
	x21 = Mem0[v31:word64]
	v31 = v31 + 8
	x22 = Mem0[v31:word64]
	v32 = sp + 48
	x23 = Mem0[v32:word64]
	v32 = v32 + 8
	x24 = Mem0[v32:word64]
	x25 = Mem0[sp + 64:word64]
	x29 = Mem0[sp:word64]
	sp = sp + 8
	x30 = Mem0[sp:word64]
	sp = sp + 112
	return
	// succ:  fn0000000000498ED8_exit
l0000000000498F68:
	Mem0[x29 + 80:word64] = 0x0000000000000000
	branch w22 == 0x00000000 l0000000000498FC8
	// succ:  l0000000000498F70 l0000000000498FC8
l0000000000498F70:
	NZCV = cond(w22 - w31)
	w20 = w21
	w19 = 0x00000000
	branch Test(GT,NZV) l0000000000498F98
	// succ:  l0000000000498F80 l0000000000498F98
l0000000000498F80:
	goto l0000000000499018
	// succ:  l0000000000499018
l0000000000498F98:
	x1 = x23 + (int64) ((int32) w19)
l0000000000498FC8:
	branch w3 == 0x00000000 l0000000000498F70
	// succ:  l0000000000498FCC l0000000000498F70
l0000000000498FCC:
	x25 = 0x00000000004E2000
	x24 = x25 + 0x0000000000000110
	w20 = Mem0[x24 + 8:word32]
	NZCV = cond(w21 - w20)
	branch Test(EQ,Z) l00000000004990B0
	// succ:  l0000000000498FE0 l00000000004990B0
l0000000000498FE0:
	NZCV = cond(w20 - w31)
	branch Test(LE,ZCV) l00000000004990A8
	// succ:  l0000000000498FE8 l00000000004990A8
l0000000000498FE8:
	NZCV = cond(w21 - w20)
	branch Test(LE,ZCV) l00000000004990A8
	// succ:  l0000000000498FF0 l00000000004990A8
l0000000000498FF0:
	x1 = Mem0[x24 + 16:word64]
	branch x1 == 0x0000000000000000 l00000000004990FC
	// succ:  l0000000000498FF8 l00000000004990FC
l0000000000498FF8:
	x0 = x23
l0000000000499018:
	NZCV = cond(w21 - w19)
	w22 = w19 - w22
	branch Test(GT,NZV) l0000000000499050
	// succ:  l0000000000499024 l0000000000499050
l0000000000499024:
	goto l0000000000499088
	// succ:  l0000000000499088
l0000000000499050:
	x3 = x29 + 0x0000000000000050
	x1 = x23 + (int64) ((int32) w19)
l0000000000499088:
	w19 = w19 - w21
	w0 = w22 + w19
	v38 = sp + 48
	x23 = Mem0[v38:word64]
	v38 = v38 + 8
	x24 = Mem0[v38:word64]
	v39 = sp + 16
	x19 = Mem0[v39:word64]
	v39 = v39 + 8
	x20 = Mem0[v39:word64]
	v40 = sp + 32
	x21 = Mem0[v40:word64]
	v40 = v40 + 8
	x22 = Mem0[v40:word64]
	x25 = Mem0[sp + 64:word64]
	x29 = Mem0[sp:word64]
	sp = sp + 8
	x30 = Mem0[sp:word64]
	sp = sp + 112
	return
	// succ:  fn0000000000498ED8_exit
l00000000004990A8:
	w20 = w21
	goto l0000000000499018
	// succ:  l0000000000499018
l00000000004990B0:
	x1 = Mem0[x24 + 16:word64]
	x0 = x23
l00000000004990FC:
	w20 = w21
	w19 = w1
	goto l0000000000499018
	// succ:  l0000000000499018
fn0000000000498ED8_exit:


// fn0000000000499108
// Return size: 0
void fn0000000000499108()
fn0000000000499108_entry:
	// succ:  l0000000000499108
l0000000000499108:
	sp = fp
	sp = sp + -176
	Mem0[sp:word64] = x29
	sp = sp + 8
	Mem0[sp:word64] = x30
	x29 = x31 + 0x0000000000000000
	v8 = sp + 48
	Mem0[v8:word64] = x23
	v8 = v8 + 8
	Mem0[v8:word64] = x24
	v11 = sp + 16
	Mem0[v11:word64] = x19
	v11 = v11 + 8
	Mem0[v11:word64] = x20
	v14 = sp + 32
	Mem0[v14:word64] = x21
	v14 = v14 + 8
	Mem0[v14:word64] = x22
	v17 = sp + 64
	Mem0[v17:word64] = x25
	v17 = v17 + 8
	Mem0[v17:word64] = x26
	v20 = sp + 80
	Mem0[v20:word64] = x27
	v20 = v20 + 8
	Mem0[v20:word64] = x28
	x24 = x0
	Mem0[x29 + 128:word64] = x1
	Mem0[x29 + 136:word64] = x2
	Mem0[x29 + 144:word64] = x3
	Mem0[x29 + 152:word64] = x4
	__ctype_get_mb_cur_max()
	sp = sp + 0xFFFFFFFFFFFFFFF8
	x31 = x0 - 0x0000000000000001
	NZCV = cond(x31)
	branch Test(ULE,ZC) l000000000049928C
	// succ:  l0000000000499144 l000000000049928C
l0000000000499144:
	x0 = 0x00000000004E2000
	w0 = Mem0[x0 + 3968:word32]
	branch w0 != 0x00000000 l000000000049928C
	// succ:  l0000000000499150 l000000000049928C
l0000000000499150:
	x0 = x24
	strlen(x0)
	sp = sp + 0xFFFFFFFFFFFFFFF8
	w0 = w0 + 0x00000001
l000000000049926C:
	x0 = x19
	v30 = sp + 32
	x21 = Mem0[v30:word64]
	v30 = v30 + 8
	x22 = Mem0[v30:word64]
	v31 = sp + 16
	x19 = Mem0[v31:word64]
	v31 = v31 + 8
	x20 = Mem0[v31:word64]
	v32 = sp + 48
	x23 = Mem0[v32:word64]
	v32 = v32 + 8
	x24 = Mem0[v32:word64]
	v33 = sp + 64
	x25 = Mem0[v33:word64]
	v33 = v33 + 8
	x26 = Mem0[v33:word64]
	v34 = sp + 80
	x27 = Mem0[v34:word64]
	v34 = v34 + 8
	x28 = Mem0[v34:word64]
	x29 = Mem0[sp:word64]
	sp = sp + 8
	x30 = Mem0[sp:word64]
	sp = sp + 176
	return
	// succ:  fn0000000000499108_exit
l000000000049928C:
	x0 = x24
	w1 = 0x00000001
	strchr(x0, x1)
	sp = sp + 0xFFFFFFFFFFFFFFF8
	branch x0 != 0x0000000000000000 l0000000000499150
	// succ:  l000000000049929C l0000000000499150
l000000000049929C:
	x0 = x24
	strlen(x0)
	sp = sp + 0xFFFFFFFFFFFFFFF8
	x0 = x0 + 0x0000000000000001
	call xmalloc (retsize: 0;)
	x1 = x24
	strcpy(x0, x1)
	sp = sp + 0xFFFFFFFFFFFFFFF8
	x1 = Mem0[x29 + 128:word64]
	x19 = x0
	branch x1 == 0x0000000000000000 l00000000004992CC
	// succ:  l00000000004992C0 l00000000004992CC
l00000000004992C0:
	strlen(x0)
	sp = sp + 0xFFFFFFFFFFFFFFF8
	x2 = Mem0[x29 + 128:word64]
	Mem0[x2:word32] = w0
	// succ:  l00000000004992CC
l00000000004992CC:
	x0 = Mem0[x29 + 136:word64]
	branch x0 == 0x0000000000000000 l00000000004992D8
	// succ:  l00000000004992D4 l00000000004992D8
l00000000004992D4:
	Mem0[x0:word32] = 0x00000000
	// succ:  l00000000004992D8
l00000000004992D8:
	x1 = Mem0[x29 + 144:word64]
	branch x1 == 0x0000000000000000 l00000000004992E4
	// succ:  l00000000004992E0 l00000000004992E4
l00000000004992E0:
	Mem0[x1:word32] = 0x00000000
	// succ:  l00000000004992E4
l00000000004992E4:
	x2 = Mem0[x29 + 152:word64]
	branch x2 == 0x0000000000000000 l000000000049926C
	// succ:  l00000000004992EC l000000000049926C
l00000000004992EC:
	x0 = Mem0[x29 + 128:word64]
	branch x0 == 0x0000000000000000 l0000000000499458
	// succ:  l00000000004992F4 l0000000000499458
l00000000004992F4:
	w0 = Mem0[x0:word32]
	// succ:  l00000000004992F8
l00000000004992F8:
	x1 = Mem0[x29 + 152:word64]
	Mem0[x1:word32] = w0
	goto l000000000049926C
	// succ:  l000000000049926C
l0000000000499458:
	x0 = x19
	strlen(x0)
	sp = sp + 0xFFFFFFFFFFFFFFF8
	goto l00000000004992F8
	// succ:  l00000000004992F8
fn0000000000499108_exit:


// _rl_strip_prompt
// Return size: 0
void _rl_strip_prompt()
_rl_strip_prompt_entry:
	// succ:  l0000000000499464
l0000000000499464:
	sp = fp
	x1 = 0x0000000000000000
	x2 = x1
	x3 = x1
	x4 = x1
	// succ:  l0000000000499474_thunk_fn0000000000499108
l0000000000499474_thunk_fn0000000000499108:
	call fn0000000000499108 (retsize: 0;)
	return
	// succ:  _rl_strip_prompt_exit
_rl_strip_prompt_exit:


// rl_expand_prompt
// Return size: 0
void rl_expand_prompt()
rl_expand_prompt_entry:
	// succ:  l0000000000499478
l0000000000499478:
	sp = fp
	sp = sp + -64
	Mem0[sp:word64] = x29
	sp = sp + 8
	Mem0[sp:word64] = x30
	x29 = x31 + 0x0000000000000000
	v8 = sp + 16
	Mem0[v8:word64] = x19
	v8 = v8 + 8
	Mem0[v8:word64] = x20
	x20 = 0x00000000004E2000
	x1 = x20 + 0x0000000000000110
	x1 = Mem0[x1 + 16:word64]
	v12 = sp + 32
	Mem0[v12:word64] = x21
	v12 = v12 + 8
	Mem0[v12:word64] = x22
	v15 = sp + 48
	Mem0[v15:word64] = x23
	v15 = v15 + 8
	Mem0[v15:word64] = x24
	x21 = x0
	branch x1 == 0x0000000000000000 l00000000004994A8
	// succ:  l00000000004994A0 l00000000004994A8
l00000000004994A0:
	x0 = x1
	call free (retsize: 0;)
	// succ:  l00000000004994A8
l00000000004994A8:
	x0 = x20 + 0x0000000000000110
	x0 = Mem0[x0 + 32:word64]
	branch x0 == 0x0000000000000000 l00000000004994B8
	// succ:  l00000000004994B4 l00000000004994B8
l00000000004994B4:
	call free (retsize: 0;)
	// succ:  l00000000004994B8
l00000000004994B8:
	x19 = x20 + 0x0000000000000110
	Mem0[x19 + 32:word64] = 0x0000000000000000
	Mem0[x19 + 16:word64] = 0x0000000000000000
	Mem0[x19 + 8:word32] = 0x00000000
	Mem0[x19 + 40:word32] = 0x00000000
	Mem0[x19 + 44:word32] = 0x00000000
	Mem0[x19 + 24:word32] = 0x00000000
	Mem0[x19 + 48:word32] = 0x00000000
	branch x21 == 0x0000000000000000 l00000000004995AC
	// succ:  l00000000004994DC l00000000004995AC
l00000000004994DC:
	v18 = Mem0[x21:byte]
	w0 = (word32) v18
	w23 = 0x00000000
	branch w0 == 0x00000000 l000000000049955C
	// succ:  l00000000004994E8 l000000000049955C
l00000000004994E8:
	x0 = x21
	w1 = 0x0000000A
	strrchr(x0, x1)
	sp = sp + 0xFFFFFFFFFFFFFFF8
	x22 = x0
	branch x0 == 0x0000000000000000 l0000000000499574
	// succ:  l00000000004994FC l0000000000499574
l00000000004994FC:
	x1 = x19 + 0x0000000000000030
	x2 = x19 + 0x000000000000002C
	x3 = x19 + 0x0000000000000028
	x4 = x19 + 0x0000000000000018
	x0 = x0 + 0x0000000000000001
	call fn0000000000499108 (retsize: 0;)
	x2 = 0x0000000000000000
	v25 = Mem0[x22 + 1:byte]
	w24 = (word32) v25
	Mem0[x19 + 16:word64] = x0
	x1 = x19 + 0x0000000000000034
	Mem0[x22 + 1:byte] = (byte) w23
	x0 = x21
	x3 = x2
	x4 = x2
	call fn0000000000499108 (retsize: 0;)
	x1 = Mem0[x19 + 16:word64]
	Mem0[x19 + 32:word64] = x0
	Mem0[x22 + 1:byte] = (byte) w24
	branch x1 == 0x0000000000000000 l00000000004995C8
	// succ:  l0000000000499548 l00000000004995C8
l0000000000499548:
	x0 = x1
	strlen(x0)
	sp = sp + 0xFFFFFFFFFFFFFFF8
	// succ:  l0000000000499550
l0000000000499550:
	x20 = x20 + 0x0000000000000110
	w23 = Mem0[x20 + 52:word32]
	Mem0[x20 + 8:word32] = w0
	// succ:  l000000000049955C
l000000000049955C:
	w0 = w23
	v30 = sp + 16
	x19 = Mem0[v30:word64]
	v30 = v30 + 8
	x20 = Mem0[v30:word64]
	v31 = sp + 32
	x21 = Mem0[v31:word64]
	v31 = v31 + 8
	x22 = Mem0[v31:word64]
	v32 = sp + 48
	x23 = Mem0[v32:word64]
	v32 = v32 + 8
	x24 = Mem0[v32:word64]
	x29 = Mem0[sp:word64]
	sp = sp + 8
	x30 = Mem0[sp:word64]
	sp = sp + 64
	return
	// succ:  rl_expand_prompt_exit
l0000000000499574:
	x0 = x21
	x1 = x19 + 0x0000000000000030
	x2 = x19 + 0x000000000000002C
	x3 = x19 + 0x0000000000000028
	x4 = x19 + 0x0000000000000018
	call fn0000000000499108 (retsize: 0;)
	Mem0[x19 + 16:word64] = x0
	Mem0[x19 + 32:word64] = x22
	branch x0 == 0x0000000000000000 l000000000049959C
	// succ:  l0000000000499598 l000000000049959C
l0000000000499598:
	strlen(x0)
	sp = sp + 0xFFFFFFFFFFFFFFF8
	// succ:  l000000000049959C
l000000000049959C:
	x20 = x20 + 0x0000000000000110
	Mem0[x20 + 8:word32] = w0
	w23 = Mem0[x20 + 48:word32]
	goto l000000000049955C
	// succ:  l000000000049955C
l00000000004995AC:
	w23 = w21
	w0 = w23
	v27 = sp + 16
	x19 = Mem0[v27:word64]
	v27 = v27 + 8
	x20 = Mem0[v27:word64]
	v28 = sp + 32
	x21 = Mem0[v28:word64]
	v28 = v28 + 8
	x22 = Mem0[v28:word64]
	v29 = sp + 48
	x23 = Mem0[v29:word64]
	v29 = v29 + 8
	x24 = Mem0[v29:word64]
	x29 = Mem0[sp:word64]
	sp = sp + 8
	x30 = Mem0[sp:word64]
	sp = sp + 64
	return
	// succ:  rl_expand_prompt_exit
l00000000004995C8:
	w0 = w1
	goto l0000000000499550
	// succ:  l0000000000499550
rl_expand_prompt_exit:


// rl_on_new_line
// Return size: 0
void rl_on_new_line()
rl_on_new_line_entry:
	// succ:  l00000000004995D0
l00000000004995D0:
	sp = fp
	x0 = 0x00000000004DE000
	x0 = x0 + 0x00000000000005B8
	x1 = Mem0[x0 + 16:word64]
	x0 = Mem0[x1:word64]
	branch x0 == 0x0000000000000000 l00000000004995E8
	// succ:  l00000000004995E4 l00000000004995E8
l00000000004995E4:
	Mem0[x0:byte] = 0x00
	// succ:  l00000000004995E8
l00000000004995E8:
	x2 = 0x00000000004E2000
	x0 = x2 + 0x0000000000000110
	x1 = Mem0[x1 + 8:word64]
	Mem0[x0 + 56:word32] = 0x00000000
	Mem0[x0 + 4:word32] = 0x00000000
	Mem0[x0 + 60:word32] = 0x00000000
	Mem0[x0 + 64:word32] = 0x00000000
	branch x1 == 0x0000000000000000 l0000000000499610
	// succ:  l0000000000499608 l0000000000499610
l0000000000499608:
	Mem0[x1 + 4:word32] = 0x00000000
	Mem0[x1:word32] = 0x00000000
	// succ:  l0000000000499610
l0000000000499610:
	x2 = x2 + 0x0000000000000110
	Mem0[x2 + 68:word32] = 0x00000000
	w0 = 0x00000000
	return
	// succ:  rl_on_new_line_exit
rl_on_new_line_exit:


// rl_on_new_line_with_prompt
// Return size: 0
void rl_on_new_line_with_prompt()
rl_on_new_line_with_prompt_entry:
	// succ:  l0000000000499620
l0000000000499620:
	sp = fp
	sp = sp + -80
	Mem0[sp:word64] = x29
	sp = sp + 8
	Mem0[sp:word64] = x30
	x29 = x31 + 0x0000000000000000
	v8 = sp + 48
	Mem0[v8:word64] = x23
	v8 = v8 + 8
	Mem0[v8:word64] = x24
	x23 = 0x00000000004E1000
	x0 = Mem0[x23 + 3176:word64]
	v12 = sp + 16
	Mem0[v12:word64] = x19
	v12 = v12 + 8
	Mem0[v12:word64] = x20
	v15 = sp + 32
	Mem0[v15:word64] = x21
	v15 = v15 + 8
	Mem0[v15:word64] = x22
	Mem0[sp + 64:word64] = x25
	x22 = 0x00000000004E2000
	strlen(x0)
	sp = sp + 0xFFFFFFFFFFFFFFF8
	w0 = w0 + 0x00000001
	x25 = x22 + 0x0000000000000110
	x24 = 0x00000000004DE000
	call fn0000000000498C6C (retsize: 0;)
	x20 = x24 + 0x00000000000005B8
	x19 = Mem0[x25 + 16:word64]
	x1 = Mem0[x23 + 3176:word64]
	x0 = Mem0[x20 + 16:word64]
	x31 = x19 - x31
	NZCV = cond(x31)
rl_on_new_line_with_prompt_exit:


// rl_forced_update_display
// Return size: 0
void rl_forced_update_display()
rl_forced_update_display_entry:
	// succ:  l00000000004997C0
l00000000004997C0:
	sp = fp
	sp = sp + -32
	Mem0[sp:word64] = x29
	sp = sp + 8
	Mem0[sp:word64] = x30
	x29 = x31 + 0x0000000000000000
	Mem0[sp + 16:word64] = x19
	x19 = 0x00000000004DE000
	x0 = x19 + 0x00000000000005B8
	x0 = Mem0[x0 + 16:word64]
	x0 = Mem0[x0:word64]
	branch x0 != 0x0000000000000000 l00000000004997E8
	// succ:  l00000000004997E0 l00000000004997E8
l00000000004997E0:
	goto l00000000004997F0
	// succ:  l00000000004997F0
l00000000004997E4:
	Mem0[x0:byte] = 0x00
	x0 = x0 + 1
	// succ:  l00000000004997E8
l00000000004997E8:
	v9 = Mem0[x0:byte]
	w1 = (word32) v9
	branch w1 != 0x00000000 l00000000004997E4
	// succ:  l00000000004997F0 l00000000004997E4
l00000000004997F0:
	call rl_on_new_line (retsize: 0;)
	x0 = 0x00000000004E2000
	x0 = x0 + 0x0000000000000110
	w1 = Mem0[x0 + 80:word32]
	x19 = x19 + 0x00000000000005B8
	x2 = Mem0[x19 + 24:word64]
	w1 = w1 + 0x00000001
	Mem0[x0 + 80:word32] = w1
	call x2 (retsize: 0;)
	w0 = 0x00000000
	x19 = Mem0[sp + 16:word64]
	x29 = Mem0[sp:word64]
	sp = sp + 8
	x30 = Mem0[sp:word64]
	sp = sp + 32
	return
	// succ:  rl_forced_update_display_exit
rl_forced_update_display_exit:


// _rl_move_cursor_relative
// Return size: 0
void _rl_move_cursor_relative()
_rl_move_cursor_relative_entry:
	// succ:  l0000000000499824
l0000000000499824:
	sp = fp
	sp = sp + -80
	Mem0[sp:word64] = x29
	sp = sp + 8
	Mem0[sp:word64] = x30
	x29 = x31 + 0x0000000000000000
	v8 = sp + 16
	Mem0[v8:word64] = x19
	v8 = v8 + 8
	Mem0[v8:word64] = x20
	x20 = 0x00000000004E2000
	x3 = x20 + 0x0000000000000110
	w2 = Mem0[x3 + 56:word32]
	v13 = sp + 32
	Mem0[v13:word64] = x21
	v13 = v13 + 8
	Mem0[v13:word64] = x22
	v16 = sp + 48
	Mem0[v16:word64] = x23
	v16 = v16 + 8
	Mem0[v16:word64] = x24
	Mem0[sp + 64:word64] = x25
	w21 = w0
	x24 = x1
	branch w2 != 0x00000000 l0000000000499888
	// succ:  l0000000000499854 l0000000000499888
l0000000000499854:
	w23 = Mem0[x3 + 28:word32]
	branch w23 != 0x00000000 l00000000004999F8
	// succ:  l000000000049985C l00000000004999F8
l000000000049985C:
	x2 = x20 + 0x0000000000000110
	w19 = Mem0[x2 + 4:word32]
	NZCV = cond(w19 - w21)
	branch Test(NE,Z) l00000000004998B4
	// succ:  l000000000049986C l00000000004998B4
l000000000049986C:
	branch w19 != 0x00000000 l00000000004998B4
	// succ:  l0000000000499870 l00000000004998B4
l0000000000499870:
	v26 = sp + 16
	x19 = Mem0[v26:word64]
	v26 = v26 + 8
	x20 = Mem0[v26:word64]
	v27 = sp + 32
	x21 = Mem0[v27:word64]
	v27 = v27 + 8
	x22 = Mem0[v27:word64]
	v28 = sp + 48
	x23 = Mem0[v28:word64]
	v28 = v28 + 8
	x24 = Mem0[v28:word64]
	x25 = Mem0[sp + 64:word64]
	x29 = Mem0[sp:word64]
	sp = sp + 8
	x30 = Mem0[sp:word64]
	sp = sp + 80
	return
	// succ:  _rl_move_cursor_relative_exit
l0000000000499888:
	w0 = Mem0[x3 + 84:word32]
	w23 = 0x00000000
	NZCV = cond(w2 - w0)
	branch Test(NE,Z) l000000000049985C
	// succ:  l0000000000499898 l000000000049985C
l0000000000499898:
	x2 = x20 + 0x0000000000000110
	w19 = Mem0[x2 + 4:word32]
	w23 = Mem0[x3 + 28:word32]
	w0 = Mem0[x3 + 40:word32]
	NZCV = cond(w19 - w21)
	w23 = w23 - w0
	branch Test(EQ,Z) l000000000049986C
	// succ:  l00000000004998B4 l000000000049986C
l00000000004998B4:
	__ctype_get_mb_cur_max()
	sp = sp + 0xFFFFFFFFFFFFFFF8
	x31 = x0 - 0x0000000000000001
	NZCV = cond(x31)
	branch Test(ULE,ZC) l0000000000499A5C
	// succ:  l00000000004998C0 l0000000000499A5C
l00000000004998C0:
	x0 = 0x00000000004E2000
	w0 = Mem0[x0 + 3968:word32]
	w22 = w21
	branch w0 != 0x00000000 l000000000049997C
	// succ:  l00000000004998D0 l000000000049997C
l00000000004998D0:
	x25 = x20 + 0x0000000000000110
	w22 = Mem0[x25 + 8:word32]
	NZCV = cond(w21 - w22)
	branch Test(EQ,Z) l0000000000499B00
	// succ:  l00000000004998E0 l0000000000499B00
l00000000004998E0:
	branch Test(LE,ZCV) l00000000004998FC
	// succ:  l00000000004998E4 l00000000004998FC
l00000000004998E4:
	x1 = Mem0[x25 + 16:word64]
	branch x1 == 0x0000000000000000 l00000000004998FC
	// succ:  l00000000004998EC l00000000004998FC
l00000000004998EC:
	x0 = x24
l00000000004998FC:
	w1 = 0x00000000
	x0 = x24
	w2 = w21
	w3 = 0x00000001
	call fn0000000000498ED8 (retsize: 0;)
	w22 = w0
	x0 = x20 + 0x0000000000000110
	w1 = Mem0[x0 + 44:word32]
	NZCV = cond(w21 - w1)
	branch Test(GT,NZV) l000000000049996C
	// succ:  l0000000000499924 l000000000049996C
l0000000000499924:
	x2 = 0x00000000004E4000
	w2 = Mem0[x2 + 328:word32]
	w3 = Mem0[x0 + 24:word32]
	NZCV = cond(w3 - w2)
	branch Test(LT,NV) l000000000049997C
	// succ:  l0000000000499938 l000000000049997C
l0000000000499938:
	w3 = Mem0[x0 + 56:word32]
	w4 = Mem0[x0 + 84:word32]
	NZCV = cond(w3 - w4)
	branch Test(NE,Z) l000000000049997C
	// succ:  l0000000000499948 l000000000049997C
l0000000000499948:
	w0 = Mem0[x0 + 28:word32]
	NZCV = cond(w23 - w0)
	branch Test(GT,NZV) l000000000049997C
	// succ:  l0000000000499954 l000000000049997C
l0000000000499954:
	NZCV = cond(w23 - w22)
	branch Test(GT,NZV) l000000000049997C
	// succ:  l000000000049995C l000000000049997C
l000000000049995C:
	w1 = w1 - w2 * w3
	w0 = w1 - w0
	NZCV = cond(w21 - w0)
	branch Test(LE,ZCV) l000000000049997C
	// succ:  l000000000049996C l000000000049997C
l000000000049996C:
	x0 = x20 + 0x0000000000000110
	w1 = 0x00000001
	w22 = w22 - w23
	Mem0[x0 + 88:word32] = w1
	// succ:  l000000000049997C
l000000000049997C:
	NZCV = cond(w19 - w22)
	branch Test(EQ,Z) l0000000000499870
	// succ:  l0000000000499984 l0000000000499870
l0000000000499984:
	__ctype_get_mb_cur_max()
	sp = sp + 0xFFFFFFFFFFFFFFF8
	x31 = x0 - 0x0000000000000001
	NZCV = cond(x31)
	branch Test(ULE,ZC) l0000000000499A14
	// succ:  l0000000000499990 l0000000000499A14
l0000000000499990:
	x0 = 0x00000000004E2000
	w0 = Mem0[x0 + 3968:word32]
	branch w0 != 0x00000000 l0000000000499A14
	// succ:  l000000000049999C l0000000000499A14
l000000000049999C:
	x0 = x20 + 0x0000000000000110
	w23 = Mem0[x0 + 4:word32]
	// succ:  l00000000004999A4
l00000000004999A4:
	branch w22 == 0x00000000 l0000000000499A34
	// succ:  l00000000004999A8 l0000000000499A34
l00000000004999A8:
	x0 = x20 + 0x0000000000000110
	w1 = Mem0[x0 + 4:word32]
	w0 = w22 + 0x00000001
	w1 = w1 - w22
	NZCV = cond(w0 - w1)
	branch Test(LT,NV) l0000000000499A34
	// succ:  l00000000004999C0 l0000000000499A34
l00000000004999C0:
	x0 = 0x00000000004DE000
	w0 = Mem0[x0 + 1528:word32]
	branch w0 != 0x00000000 l0000000000499A24
	// succ:  l00000000004999CC l0000000000499A24
l00000000004999CC:
	NZCV = cond(w19 - w22)
	branch Test(LT,NV) l0000000000499A64
	// succ:  l00000000004999D4 l0000000000499A64
l00000000004999D4:
	branch Test(GT,NZV) l0000000000499AF4
	// succ:  l00000000004999D8 l0000000000499AF4
l00000000004999D8:
	x20 = x20 + 0x0000000000000110
	Mem0[x20 + 4:word32] = w22
	v38 = sp + 48
	x23 = Mem0[v38:word64]
	v38 = v38 + 8
	x24 = Mem0[v38:word64]
	v39 = sp + 16
	x19 = Mem0[v39:word64]
	v39 = v39 + 8
	x20 = Mem0[v39:word64]
	v40 = sp + 32
	x21 = Mem0[v40:word64]
	v40 = v40 + 8
	x22 = Mem0[v40:word64]
	x25 = Mem0[sp + 64:word64]
	x29 = Mem0[sp:word64]
	sp = sp + 8
	x30 = Mem0[sp:word64]
	sp = sp + 80
	return
	// succ:  _rl_move_cursor_relative_exit
l00000000004999F8:
	x1 = 0x00000000004E4000
	w0 = Mem0[x3 + 24:word32]
	w1 = Mem0[x1 + 328:word32]
	NZCV = cond(w0 - w1)
	branch Test(LE,ZCV) l000000000049985C
	// succ:  l0000000000499A0C l000000000049985C
l0000000000499A0C:
	w23 = Mem0[x3 + 40:word32]
	goto l000000000049985C
	// succ:  l000000000049985C
l0000000000499A14:
	x0 = x20 + 0x0000000000000110
	w0 = Mem0[x0 + 4:word32]
	w23 = w0 - w23
	goto l00000000004999A4
	// succ:  l00000000004999A4
l0000000000499A24:
	x0 = 0x00000000004E4000
	w0 = Mem0[x0 + 328:word32]
	NZCV = cond(w23 - w0)
	branch Test(NE,Z) l00000000004999CC
	// succ:  l0000000000499A34 l00000000004999CC
l0000000000499A34:
	x0 = 0x00000000004E4000
	x2 = 0x00000000004A0000
	x0 = Mem0[x0 + 288:word64]
	w1 = 0x00000001
	x2 = x2 + 0xFFFFFFFFFFFFFAAC
	call tputs (retsize: 0;)
	x0 = x20 + 0x0000000000000110
	Mem0[x0 + 4:word32] = 0x00000000
	w19 = 0x00000000
	goto l00000000004999CC
	// succ:  l00000000004999CC
l0000000000499A5C:
	w22 = w21
	goto l000000000049997C
	// succ:  l000000000049997C
l0000000000499A64:
	__ctype_get_mb_cur_max()
	sp = sp + 0xFFFFFFFFFFFFFFF8
	x31 = x0 - 0x0000000000000001
	NZCV = cond(x31)
	branch Test(ULE,ZC) l0000000000499AB4
	// succ:  l0000000000499A70 l0000000000499AB4
l0000000000499A70:
	x0 = 0x00000000004E2000
	w0 = Mem0[x0 + 3968:word32]
	branch w0 != 0x00000000 l0000000000499AB4
	// succ:  l0000000000499A7C l0000000000499AB4
l0000000000499A7C:
	x23 = 0x00000000004E4000
	x0 = Mem0[x23 + 224:word64]
	branch x0 == 0x0000000000000000 l0000000000499B4C
	// succ:  l0000000000499A88 l0000000000499B4C
l0000000000499A88:
	x2 = 0x00000000004A0000
	x21 = x2 + 0xFFFFFFFFFFFFFAAC
	goto l0000000000499A98
	// succ:  l0000000000499A98
l0000000000499A94:
	x0 = Mem0[x23 + 224:word64]
	// succ:  l0000000000499A98
l0000000000499A98:
	w1 = 0x00000001
	x2 = x21
	call tputs (retsize: 0;)
	w19 = w19 + 0x00000001
	NZCV = cond(w19 - w22)
	branch Test(NE,Z) l0000000000499A94
	// succ:  l0000000000499AB0 l0000000000499A94
l0000000000499AB0:
	goto l00000000004999D8
	// succ:  l00000000004999D8
l0000000000499AB4:
	NZCV = cond(w19 - w21)
	branch Test(GE,NZV) l00000000004999D8
	// succ:  l0000000000499ABC l00000000004999D8
l0000000000499ABC:
l0000000000499AF4:
	w0 = w19 - w22
	call _rl_backspace (retsize: 0;)
	goto l00000000004999D8
	// succ:  l00000000004999D8
l0000000000499B00:
	x1 = Mem0[x25 + 16:word64]
	x0 = x24
l0000000000499B4C:
	x0 = 0x00000000004E4000
	x0 = Mem0[x0 + 288:word64]
	x2 = 0x00000000004A0000
	w1 = 0x00000001
	x2 = x2 + 0xFFFFFFFFFFFFFAAC
	call tputs (retsize: 0;)
	NZCV = cond(w21 - w31)
	branch Test(LE,ZCV) l00000000004999D8
	// succ:  l0000000000499B6C l00000000004999D8
l0000000000499B6C:
	w21 = w21 - 0x00000001
	x19 = x24 + 0x0000000000000001
	x19 = x19 + x21
	x21 = 0x00000000004E1000
	// succ:  l0000000000499B7C
l0000000000499B7C:
	v42 = Mem0[x24:byte]
	w0 = (word32) v42
	x24 = x24 + 1
	x1 = Mem0[x21 + 3200:word64]
	_IO_putc(x0, x1)
	sp = sp + 0xFFFFFFFFFFFFFFF8
	x31 = x24 - x19
	NZCV = cond(x31)
	branch Test(NE,Z) l0000000000499B7C
	// succ:  l0000000000499B90 l0000000000499B7C
l0000000000499B90:
	goto l00000000004999D8
	// succ:  l00000000004999D8
_rl_move_cursor_relative_exit:


// _rl_move_vert
// Return size: 0
void _rl_move_vert()
_rl_move_vert_entry:
	// succ:  l0000000000499B94
l0000000000499B94:
	sp = fp
	sp = sp + -64
	Mem0[sp:word64] = x29
	sp = sp + 8
	Mem0[sp:word64] = x30
	x29 = x31 + 0x0000000000000000
	v8 = sp + 48
	Mem0[v8:word64] = x23
	v8 = v8 + 8
	Mem0[v8:word64] = x24
	x23 = 0x00000000004E2000
	x1 = x23 + 0x0000000000000110
	v12 = sp + 16
	Mem0[v12:word64] = x19
	v12 = v12 + 8
	Mem0[v12:word64] = x20
	w20 = Mem0[x1 + 56:word32]
	v16 = sp + 32
	Mem0[v16:word64] = x21
	v16 = v16 + 8
	Mem0[v16:word64] = x22
	NZCV = cond(w20 - w0)
	w22 = w0
	branch Test(EQ,Z) l0000000000499C24
	// succ:  l0000000000499BC0 l0000000000499C24
l0000000000499BC0:
	x0 = 0x00000000004E4000
	w0 = Mem0[x0 + 312:word32]
	NZCV = cond(w22 - w0)
	branch Test(GT,NZV) l0000000000499C24
	// succ:  l0000000000499BD0 l0000000000499C24
l0000000000499BD0:
	w20 = w22 - w20
	NZCV = cond(w20 - w31)
	branch Test(LE,ZCV) l0000000000499C38
	// succ:  l0000000000499BDC l0000000000499C38
l0000000000499BDC:
	w19 = 0x00000000
	x21 = 0x00000000004E1000
	// succ:  l0000000000499BE4
l0000000000499BE4:
	x1 = Mem0[x21 + 3200:word64]
	w0 = 0x0000000A
	_IO_putc(x0, x1)
	sp = sp + 0xFFFFFFFFFFFFFFF8
	w19 = w19 + 0x00000001
	NZCV = cond(w19 - w20)
	branch Test(NE,Z) l0000000000499BE4
	// succ:  l0000000000499BFC l0000000000499BE4
l0000000000499BFC:
	x0 = 0x00000000004E4000
	x0 = Mem0[x0 + 288:word64]
	x2 = 0x00000000004A0000
	w1 = 0x00000001
	x2 = x2 + 0xFFFFFFFFFFFFFAAC
	call tputs (retsize: 0;)
	x0 = x23 + 0x0000000000000110
	Mem0[x0 + 4:word32] = 0x00000000
	// succ:  l0000000000499C1C
l0000000000499C1C:
	x23 = x23 + 0x0000000000000110
	Mem0[x23 + 56:word32] = w22
	// succ:  l0000000000499C24
l0000000000499C24:
	v28 = sp + 16
	x19 = Mem0[v28:word64]
	v28 = v28 + 8
	x20 = Mem0[v28:word64]
	v29 = sp + 32
	x21 = Mem0[v29:word64]
	v29 = v29 + 8
	x22 = Mem0[v29:word64]
	v30 = sp + 48
	x23 = Mem0[v30:word64]
	v30 = v30 + 8
	x24 = Mem0[v30:word64]
	x29 = Mem0[sp:word64]
	sp = sp + 8
	x30 = Mem0[sp:word64]
	sp = sp + 64
	return
	// succ:  _rl_move_vert_exit
l0000000000499C38:
	x21 = 0x00000000004E4000
	x0 = Mem0[x21 + 352:word64]
	branch x0 == 0x0000000000000000 l0000000000499C1C
	// succ:  l0000000000499C44 l0000000000499C1C
l0000000000499C44:
	v31 = Mem0[x0:byte]
	w1 = (word32) v31
	branch w1 == 0x00000000 l0000000000499C1C
	// succ:  l0000000000499C4C l0000000000499C1C
l0000000000499C4C:
	w24 = w31 - w20
	branch w20 == 0x00000000 l0000000000499C1C
	// succ:  l0000000000499C54 l0000000000499C1C
l0000000000499C54:
	x20 = 0x00000000004A0000
	w19 = 0x00000000
	x20 = x20 + 0xFFFFFFFFFFFFFAAC
	goto l0000000000499C68
	// succ:  l0000000000499C68
l0000000000499C64:
	x0 = Mem0[x21 + 352:word64]
	// succ:  l0000000000499C68
l0000000000499C68:
	w1 = 0x00000001
	x2 = x20
	call tputs (retsize: 0;)
	w19 = w19 + 0x00000001
	NZCV = cond(w19 - w24)
	branch Test(NE,Z) l0000000000499C64
	// succ:  l0000000000499C80 l0000000000499C64
l0000000000499C80:
	goto l0000000000499C1C
	// succ:  l0000000000499C1C
_rl_move_vert_exit:


// rl_show_char
// Return size: 0
void rl_show_char()
rl_show_char_entry:
	// succ:  l0000000000499C84
l0000000000499C84:
	sp = fp
	sp = sp + -48
	Mem0[sp:word64] = x29
	sp = sp + 8
	Mem0[sp:word64] = x30
	x29 = x31 + 0x0000000000000000
	v8 = sp + 16
	Mem0[v8:word64] = x19
	v8 = v8 + 8
	Mem0[v8:word64] = x20
	w19 = w0
	w0 = w0 - 0x00000080
	v13 = sp + 32
	Mem0[v13:word64] = x21
	v13 = v13 + 8
	Mem0[v13:word64] = x22
	w31 = w0 - 0x0000007F
	NZCV = cond(w31)
	branch Test(UGT,ZC) l0000000000499CE0
	// succ:  l0000000000499CA4 l0000000000499CE0
l0000000000499CA4:
	x0 = 0x00000000004E1000
	w0 = Mem0[x0 + 3324:word32]
	branch w0 == 0x00000000 l0000000000499D48
	// succ:  l0000000000499CB0 l0000000000499D48
l0000000000499CB0:
	w20 = 0x00000001
	x21 = 0x00000000004E1000
	// succ:  l0000000000499CB8
l0000000000499CB8:
	x1 = Mem0[x21 + 3200:word64]
	w0 = w19
	_IO_putc(x0, x1)
	sp = sp + 0xFFFFFFFFFFFFFFF8
	x0 = Mem0[x21 + 3200:word64]
	fflush(x0)
	sp = sp + 0xFFFFFFFFFFFFFFF8
	w0 = w20
	v20 = sp + 32
	x21 = Mem0[v20:word64]
	v20 = v20 + 8
	x22 = Mem0[v20:word64]
	v21 = sp + 16
	x19 = Mem0[v21:word64]
	v21 = v21 + 8
	x20 = Mem0[v21:word64]
	x29 = Mem0[sp:word64]
	sp = sp + 8
	x30 = Mem0[sp:word64]
	sp = sp + 48
	return
	// succ:  rl_show_char_exit
l0000000000499CE0:
	w31 = w19 - 0x0000001F
	NZCV = cond(w31)
	w20 = 0x00000001
	x21 = 0x00000000004E1000
	branch Test(GT,NZV) l0000000000499D74
	// succ:  l0000000000499CF0 l0000000000499D74
l0000000000499CF0:
	branch (w19 & 0x00000080) == 0x00000000 l0000000000499CB8
	// succ:  l0000000000499CF4 l0000000000499CB8
l0000000000499CF4:
	w31 = w19 - 0x00000009
	NZCV = cond(w31)
	branch Test(EQ,Z) l0000000000499CB8
	// succ:  l0000000000499CFC l0000000000499CB8
l0000000000499CFC:
	x3 = Mem0[x21 + 3200:word64]
	x0 = 0x00000000004C4000
	x0 = x0 + 0xFFFFFFFFFFFFFC18
	x1 = 0x0000000000000001
	x2 = 0x0000000000000002
	fwrite(x0, x1, x2, x3)
	sp = sp + 0xFFFFFFFFFFFFFFF8
	w19 = w19 | 0x00000040
	NZCV = cond(w19 - (uint32) ((byte) w19))
	w20 = w20 + 0x00000002
	branch Test(NE,Z) l0000000000499CB8
	// succ:  l0000000000499D24 l0000000000499CB8
l0000000000499D24:
	__ctype_b_loc()
	sp = sp + 0xFFFFFFFFFFFFFFF8
	x0 = Mem0[x0:word64]
	w22 = w19
	v27 = Mem0[x0 + x22 * 2:word16]
	w0 = (word32) v27
	branch (w0 & 0x00000200) == 0x00000000 l0000000000499CB8
	// succ:  l0000000000499D38 l0000000000499CB8
l0000000000499D38:
	__ctype_toupper_loc()
	sp = sp + 0xFFFFFFFFFFFFFFF8
	x0 = Mem0[x0:word64]
	w19 = Mem0[x0 + x22 * 4:word32]
	goto l0000000000499CB8
	// succ:  l0000000000499CB8
l0000000000499D48:
	x21 = 0x00000000004E1000
	x3 = Mem0[x21 + 3200:word64]
	x0 = 0x00000000004C4000
	x0 = x0 + 0xFFFFFFFFFFFFFC10
	x1 = 0x0000000000000001
	x2 = 0x0000000000000002
	fwrite(x0, x1, x2, x3)
	sp = sp + 0xFFFFFFFFFFFFFFF8
	w19 = w19 & 0xFFFFFF7F
	w31 = w19 - 0x0000001F
	NZCV = cond(w31)
	w20 = 0x00000003
	branch Test(LE,ZCV) l0000000000499CF0
	// succ:  l0000000000499D74 l0000000000499CF0
l0000000000499D74:
	w31 = w19 - 0x0000007F
	NZCV = cond(w31)
	branch Test(NE,Z) l0000000000499CB8
	// succ:  l0000000000499D7C l0000000000499CB8
l0000000000499D7C:
	x3 = Mem0[x21 + 3200:word64]
	x0 = 0x00000000004C4000
	x0 = x0 + 0xFFFFFFFFFFFFFC18
	x1 = 0x0000000000000001
	x2 = 0x0000000000000002
	fwrite(x0, x1, x2, x3)
	sp = sp + 0xFFFFFFFFFFFFFFF8
	w20 = w20 + 0x00000002
	w19 = 0x0000003F
	goto l0000000000499CB8
	// succ:  l0000000000499CB8
rl_show_char_exit:


// rl_character_len
// Return size: 0
void rl_character_len()
rl_character_len_entry:
	// succ:  l0000000000499DA0
l0000000000499DA0:
	sp = fp
	sp = sp + -32
	Mem0[sp:word64] = x29
	sp = sp + 8
	Mem0[sp:word64] = x30
	x29 = x31 + 0x0000000000000000
	Mem0[sp + 16:word64] = x19
	w2 = w0
	branch (w2 & 0x00000080) == 0x00000000 l0000000000499E14
	// succ:  l0000000000499DB4 l0000000000499E14
l0000000000499DB4:
l0000000000499E14:
	x0 = 0x00000000004E1000
	w0 = Mem0[x0 + 3324:word32]
	x19 = Mem0[sp + 16:word64]
	NZCV = cond(w0 - w31)
	w0 = 0x00000004
rl_character_len_exit:


// rl_reset_line_state
// Return size: 0
void rl_reset_line_state()
rl_reset_line_state_entry:
	// succ:  l0000000000499E4C
l0000000000499E4C:
	sp = fp
	sp = sp + -16
	Mem0[sp:word64] = x29
	sp = sp + 8
	Mem0[sp:word64] = x30
	x29 = x31 + 0x0000000000000000
	call rl_on_new_line (retsize: 0;)
	x0 = 0x00000000004E1000
	x0 = Mem0[x0 + 3176:word64]
	branch x0 == 0x0000000000000000 l0000000000499E84
	// succ:  l0000000000499E64 l0000000000499E84
l0000000000499E64:
	x1 = 0x00000000004E2000
	x1 = x1 + 0x0000000000000110
	Mem0[x1 + 72:word64] = x0
	w0 = 0x00000001
	Mem0[x1 + 80:word32] = w0
	x29 = Mem0[sp:word64]
	sp = sp + 8
	x30 = Mem0[sp:word64]
	sp = sp + 16
	w0 = 0x00000000
	return
	// succ:  rl_reset_line_state_exit
l0000000000499E84:
	x0 = 0x00000000004AC000
	x1 = 0x00000000004E2000
	x1 = x1 + 0x0000000000000110
	x0 = x0 + 0x0000000000000460
	Mem0[x1 + 72:word64] = x0
	w0 = 0x00000001
	Mem0[x1 + 80:word32] = w0
	x29 = Mem0[sp:word64]
	sp = sp + 8
	x30 = Mem0[sp:word64]
	sp = sp + 16
	w0 = 0x00000000
	return
	// succ:  rl_reset_line_state_exit
rl_reset_line_state_exit:


// rl_save_prompt
// Return size: 0
void rl_save_prompt()
rl_save_prompt_entry:
	// succ:  l0000000000499EAC
l0000000000499EAC:
	sp = fp
	x0 = 0x00000000004E2000
	x0 = x0 + 0x0000000000000110
	x8 = Mem0[x0 + 16:word64]
	x7 = Mem0[x0 + 32:word64]
	w6 = Mem0[x0 + 52:word32]
	w5 = Mem0[x0 + 8:word32]
	w4 = Mem0[x0 + 44:word32]
	w3 = Mem0[x0 + 48:word32]
	w2 = Mem0[x0 + 40:word32]
	w1 = Mem0[x0 + 24:word32]
	Mem0[x0 + 96:word64] = x8
	Mem0[x0 + 104:word64] = x7
	Mem0[x0 + 112:word32] = w6
	Mem0[x0 + 116:word32] = w5
	Mem0[x0 + 120:word32] = w4
	Mem0[x0 + 124:word32] = w3
	Mem0[x0 + 128:word32] = w2
	Mem0[x0 + 132:word32] = w1
	Mem0[x0 + 32:word64] = 0x0000000000000000
	Mem0[x0 + 16:word64] = 0x0000000000000000
	Mem0[x0 + 8:word32] = 0x00000000
	Mem0[x0 + 52:word32] = 0x00000000
	Mem0[x0 + 48:word32] = 0x00000000
	Mem0[x0 + 44:word32] = 0x00000000
	Mem0[x0 + 24:word32] = 0x00000000
	Mem0[x0 + 40:word32] = 0x00000000
	return
	// succ:  rl_save_prompt_exit
rl_save_prompt_exit:


// rl_message
// Return size: 0
void rl_message()
rl_message_entry:
	// succ:  l0000000000499F18
l0000000000499F18:
	sp = fp
	sp = sp + -320
	Mem0[sp:word64] = x29
	sp = sp + 8
	Mem0[sp:word64] = x30
	x29 = x31 + 0x0000000000000000
	x8 = x29 + 0x0000000000000140
	Mem0[x29 + 64:word64] = x8
	Mem0[x29 + 72:word64] = x8
	x8 = x29 + 0x0000000000000100
	Mem0[x29 + 80:word64] = x8
	w8 = 0xFFFFFFC8
	Mem0[x29 + 88:word32] = w8
	w8 = 0xFFFFFF80
	v10 = sp + 16
	Mem0[v10:word64] = x19
	v10 = v10 + 8
	Mem0[v10:word64] = x20
	Mem0[x29 + 92:word32] = w8
	x20 = 0x00000000004E2000
	v12 = x29 + 64
	x8 = Mem0[v12:word64]
	v12 = v12 + 8
	x9 = Mem0[v12:word64]
	v15 = x29 + 80
	x10 = Mem0[v15:word64]
	v15 = v15 + 8
	x11 = Mem0[v15:word64]
	x12 = x0
	x19 = x20 + 0x0000000000000110
	Mem0[x29 + 264:word64] = x1
	Mem0[x29 + 272:word64] = x2
	Mem0[x29 + 280:word64] = x3
	Mem0[x29 + 288:word64] = x4
	Mem0[x29 + 296:word64] = x5
	x0 = x19 + 0x0000000000000088
	x1 = 0x000000000000007F
	w2 = 0x00000001
	x3 = 0x0000000000000080
	x4 = x12
	x5 = x29 + 0x0000000000000060
	Mem0[x29 + 304:word64] = x6
	Mem0[x29 + 312:word64] = x7
	Mem0[x29 + 128:word128] = q0
	Mem0[x29 + 144:word128] = q1
	Mem0[x29 + 160:word128] = q2
	Mem0[x29 + 176:word128] = q3
	Mem0[x29 + 192:word128] = q4
	Mem0[x29 + 208:word128] = q5
	Mem0[x29 + 224:word128] = q6
	Mem0[x29 + 240:word128] = q7
	v34 = x29 + 32
	Mem0[v34:word64] = x8
	v34 = v34 + 8
	Mem0[v34:word64] = x9
	v35 = x29 + 48
	Mem0[v35:word64] = x10
	v35 = v35 + 8
	Mem0[v35:word64] = x11
	v36 = x29 + 96
	Mem0[v36:word64] = x8
	v36 = v36 + 8
	Mem0[v36:word64] = x9
	v37 = x29 + 112
	Mem0[v37:word64] = x10
	v37 = v37 + 8
	Mem0[v37:word64] = x11
	call __vsnprintf_chk (retsize: 0;)
	x0 = Mem0[x19 + 96:word64]
	branch x0 == 0x0000000000000000 l000000000049A028
	// succ:  l0000000000499FCC l000000000049A028
l0000000000499FCC:
	x19 = x20 + 0x0000000000000110
	x5 = x19 + 0x0000000000000088
	x0 = x5
	x1 = x19 + 0x0000000000000030
	x2 = x19 + 0x000000000000002C
	x3 = x19 + 0x0000000000000028
	x4 = x19 + 0x0000000000000018
	Mem0[x19 + 72:word64] = x5
	call fn0000000000499108 (retsize: 0;)
	Mem0[x19 + 16:word64] = x0
	Mem0[x19 + 32:word64] = 0x0000000000000000
	branch x0 == 0x0000000000000000 l000000000049A000
	// succ:  l0000000000499FFC l000000000049A000
l0000000000499FFC:
	strlen(x0)
	sp = sp + 0xFFFFFFFFFFFFFFF8
	// succ:  l000000000049A000
l000000000049A000:
	x2 = 0x00000000004DE000
	x2 = x2 + 0x00000000000005B8
	x2 = Mem0[x2 + 24:word64]
	x20 = x20 + 0x0000000000000110
	Mem0[x20 + 8:word32] = w0
	call x2 (retsize: 0;)
	w0 = 0x00000000
	v39 = sp + 16
	x19 = Mem0[v39:word64]
	v39 = v39 + 8
	x20 = Mem0[v39:word64]
	x29 = Mem0[sp:word64]
	sp = sp + 8
	x30 = Mem0[sp:word64]
	sp = sp + 320
	return
	// succ:  rl_message_exit
l000000000049A028:
	call rl_save_prompt (retsize: 0;)
	w0 = 0x00000001
	Mem0[x19 + 264:word32] = w0
	goto l0000000000499FCC
	// succ:  l0000000000499FCC
rl_message_exit:


// rl_restore_prompt
// Return size: 0
void rl_restore_prompt()
rl_restore_prompt_entry:
	// succ:  l000000000049A038
l000000000049A038:
	sp = fp
	sp = sp + -32
	Mem0[sp:word64] = x29
	sp = sp + 8
	Mem0[sp:word64] = x30
	x29 = x31 + 0x0000000000000000
	Mem0[sp + 16:word64] = x19
	x19 = 0x00000000004E2000
	x0 = x19 + 0x0000000000000110
	x0 = Mem0[x0 + 16:word64]
	branch x0 == 0x0000000000000000 l000000000049A058
	// succ:  l000000000049A054 l000000000049A058
l000000000049A054:
	call free (retsize: 0;)
	// succ:  l000000000049A058
l000000000049A058:
	x0 = x19 + 0x0000000000000110
	x0 = Mem0[x0 + 32:word64]
	branch x0 == 0x0000000000000000 l000000000049A068
	// succ:  l000000000049A064 l000000000049A068
l000000000049A064:
	call free (retsize: 0;)
	// succ:  l000000000049A068
l000000000049A068:
	x0 = x19 + 0x0000000000000110
	x8 = Mem0[x0 + 96:word64]
	x7 = Mem0[x0 + 104:word64]
	w6 = Mem0[x0 + 116:word32]
	w5 = Mem0[x0 + 112:word32]
	w4 = Mem0[x0 + 120:word32]
	w3 = Mem0[x0 + 124:word32]
	w2 = Mem0[x0 + 128:word32]
	w1 = Mem0[x0 + 132:word32]
	Mem0[x0 + 16:word64] = x8
	Mem0[x0 + 32:word64] = x7
	Mem0[x0 + 8:word32] = w6
	Mem0[x0 + 52:word32] = w5
	Mem0[x0 + 44:word32] = w4
	Mem0[x0 + 48:word32] = w3
	Mem0[x0 + 40:word32] = w2
	Mem0[x0 + 24:word32] = w1
	Mem0[x0 + 104:word64] = 0x0000000000000000
	Mem0[x0 + 96:word64] = 0x0000000000000000
	Mem0[x0 + 116:word32] = 0x00000000
	Mem0[x0 + 112:word32] = 0x00000000
	Mem0[x0 + 124:word32] = 0x00000000
	Mem0[x0 + 120:word32] = 0x00000000
	Mem0[x0 + 132:word32] = 0x00000000
	Mem0[x0 + 128:word32] = 0x00000000
	x19 = Mem0[sp + 16:word64]
	x29 = Mem0[sp:word64]
	sp = sp + 8
	x30 = Mem0[sp:word64]
	sp = sp + 32
	return
	// succ:  rl_restore_prompt_exit
rl_restore_prompt_exit:


// rl_clear_message
// Return size: 0
void rl_clear_message()
rl_clear_message_entry:
	// succ:  l000000000049A0D8
l000000000049A0D8:
	sp = fp
	sp = sp + -32
	Mem0[sp:word64] = x29
	sp = sp + 8
	Mem0[sp:word64] = x30
	x29 = x31 + 0x0000000000000000
	x0 = 0x00000000004E1000
	Mem0[sp + 16:word64] = x19
	x19 = 0x00000000004E2000
	x19 = x19 + 0x0000000000000110
	x1 = Mem0[x0 + 3176:word64]
	w0 = Mem0[x19 + 264:word32]
	Mem0[x19 + 72:word64] = x1
	branch w0 == 0x00000000 l000000000049A108
	// succ:  l000000000049A100 l000000000049A108
l000000000049A100:
	call rl_restore_prompt (retsize: 0;)
	Mem0[x19 + 264:word32] = 0x00000000
	// succ:  l000000000049A108
l000000000049A108:
	x0 = 0x00000000004DE000
	x0 = x0 + 0x00000000000005B8
	x0 = Mem0[x0 + 24:word64]
	call x0 (retsize: 0;)
	w0 = 0x00000000
	x19 = Mem0[sp + 16:word64]
	x29 = Mem0[sp:word64]
	sp = sp + 8
	x30 = Mem0[sp:word64]
	sp = sp + 32
	return
	// succ:  rl_clear_message_exit
rl_clear_message_exit:


// _rl_make_prompt_for_search
// Return size: 0
void _rl_make_prompt_for_search()
_rl_make_prompt_for_search_entry:
	// succ:  l000000000049A128
l000000000049A128:
	sp = fp
	sp = sp + -64
	Mem0[sp:word64] = x29
	sp = sp + 8
	Mem0[sp:word64] = x30
	x29 = x31 + 0x0000000000000000
	v8 = sp + 32
	Mem0[v8:word64] = x21
	v8 = v8 + 8
	Mem0[v8:word64] = x22
	x21 = 0x00000000004E1000
	v11 = sp + 16
	Mem0[v11:word64] = x19
	v11 = v11 + 8
	Mem0[v11:word64] = x20
	Mem0[sp + 48:word64] = x23
	w22 = w0
	call rl_save_prompt (retsize: 0;)
	x19 = Mem0[x21 + 3176:word64]
	branch x19 == 0x0000000000000000 l000000000049A20C
	// succ:  l000000000049A150 l000000000049A20C
l000000000049A150:
	x0 = x19
	w1 = 0x0000000A
	strrchr(x0, x1)
	sp = sp + 0xFFFFFFFFFFFFFFF8
	x20 = x0
	branch x0 == 0x0000000000000000 l000000000049A1D0
	// succ:  l000000000049A164 l000000000049A1D0
l000000000049A164:
	x21 = x0 + 0x0000000000000001
	x0 = x21
	strlen(x0)
	sp = sp + 0xFFFFFFFFFFFFFFF8
	x20 = x0
	w0 = w0 + 0x00000002
l000000000049A198:
	x0 = 0x00000000004E2000
	x0 = x0 + 0x0000000000000110
	w1 = Mem0[x0 + 132:word32]
	v18 = sp + 32
	x21 = Mem0[v18:word64]
	v18 = v18 + 8
	x22 = Mem0[v18:word64]
	w1 = w1 + 0x00000001
	Mem0[x0 + 24:word32] = w1
	x23 = Mem0[sp + 48:word64]
	x0 = x19
	v19 = sp + 16
	x19 = Mem0[v19:word64]
	v19 = v19 + 8
	x20 = Mem0[v19:word64]
	x29 = Mem0[sp:word64]
	sp = sp + 8
	x30 = Mem0[sp:word64]
	sp = sp + 64
	return
	// succ:  _rl_make_prompt_for_search_exit
l000000000049A1D0:
	v20 = Mem0[x19:byte]
	w0 = (word32) v20
	branch w0 == 0x00000000 l000000000049A20C
	// succ:  l000000000049A1D8 l000000000049A20C
l000000000049A1D8:
	x0 = x19
	strlen(x0)
	sp = sp + 0xFFFFFFFFFFFFFFF8
	x23 = x0
	w0 = w0 + 0x00000002
l000000000049A20C:
	x0 = 0x0000000000000002
	call xmalloc (retsize: 0;)
	x19 = x0
	x20 = 0x0000000000000000
	x0 = 0x0000000000000001
	Mem0[x19 + x20:byte] = (byte) w22
	Mem0[x19 + x0:byte] = 0x00
	goto l000000000049A198
	// succ:  l000000000049A198
_rl_make_prompt_for_search_exit:


// _rl_erase_at_end_of_line
// Return size: 0
void _rl_erase_at_end_of_line()
_rl_erase_at_end_of_line_entry:
	// succ:  l000000000049A234
l000000000049A234:
	sp = fp
	sp = sp + -48
	Mem0[sp:word64] = x29
	sp = sp + 8
	Mem0[sp:word64] = x30
	x29 = x31 + 0x0000000000000000
	v8 = sp + 16
	Mem0[v8:word64] = x19
	v8 = v8 + 8
	Mem0[v8:word64] = x20
	Mem0[sp + 32:word64] = x21
	w20 = w0
	call _rl_backspace (retsize: 0;)
	NZCV = cond(w20 - w31)
	branch Test(LE,ZCV) l000000000049A2D4
	// succ:  l000000000049A254 l000000000049A2D4
l000000000049A254:
	w19 = 0x00000000
	x21 = 0x00000000004E1000
	// succ:  l000000000049A25C
l000000000049A25C:
	x1 = Mem0[x21 + 3200:word64]
	w0 = 0x00000020
	_IO_putc(x0, x1)
	sp = sp + 0xFFFFFFFFFFFFFFF8
	w19 = w19 + 0x00000001
	NZCV = cond(w19 - w20)
	branch Test(NE,Z) l000000000049A25C
	// succ:  l000000000049A274 l000000000049A25C
l000000000049A274:
	w0 = w20
	call _rl_backspace (retsize: 0;)
	x0 = 0x00000000004DE000
	x0 = x0 + 0x00000000000005B8
	x5 = 0x00000000004E2000
	x4 = Mem0[x0 + 16:word64]
	w1 = 0x00000000
	x0 = x5 + 0x0000000000000110
	// succ:  l000000000049A294
l000000000049A294:
	w2 = Mem0[x0 + 4:word32]
	x3 = Mem0[x4:word64]
	w2 = w2 - 0x00000001
	Mem0[x0 + 4:word32] = w2
	w1 = w1 + 0x00000001
	Mem0[x3 + (int64) ((int32) w2):byte] = 0x00
	NZCV = cond(w1 - w20)
	branch Test(NE,Z) l000000000049A294
	// succ:  l000000000049A2B4 l000000000049A294
l000000000049A2B4:
	x0 = x5 + 0x0000000000000110
	w1 = Mem0[x0 + 268:word32]
	v24 = sp + 16
	x19 = Mem0[v24:word64]
	v24 = v24 + 8
	x20 = Mem0[v24:word64]
	w1 = w1 + 0x00000001
	Mem0[x0 + 268:word32] = w1
	x21 = Mem0[sp + 32:word64]
	x29 = Mem0[sp:word64]
	sp = sp + 8
	x30 = Mem0[sp:word64]
	sp = sp + 48
	return
	// succ:  _rl_erase_at_end_of_line_exit
l000000000049A2D4:
	w0 = w20
	call _rl_backspace (retsize: 0;)
	x5 = 0x00000000004E2000
	goto l000000000049A2B4
	// succ:  l000000000049A2B4
_rl_erase_at_end_of_line_exit:


// _rl_clear_to_eol
// Return size: 0
void _rl_clear_to_eol()
_rl_clear_to_eol_entry:
	// succ:  l000000000049A2E4
l000000000049A2E4:
	sp = fp
	x1 = 0x00000000004E4000
	x1 = Mem0[x1 + 344:word64]
	branch x1 == 0x0000000000000000 l000000000049A304
	// succ:  l000000000049A2F0 l000000000049A304
l000000000049A2F0:
	x2 = 0x00000000004A0000
	x0 = x1
	x2 = x2 + 0xFFFFFFFFFFFFFAAC
	w1 = 0x00000001
	call tputs (retsize: 0;)
	return
	// succ:  _rl_clear_to_eol_exit
l000000000049A304:
	branch w0 != 0x00000000 l000000000049A30C
	// succ:  l000000000049A308 l000000000049A30C
l000000000049A308:
	return
	// succ:  _rl_clear_to_eol_exit
l000000000049A30C:
	// succ:  l000000000049A30C_thunk_fn0000000000498E78
l000000000049A30C_thunk_fn0000000000498E78:
	call fn0000000000498E78 (retsize: 0;)
	return
	// succ:  _rl_clear_to_eol_exit
_rl_clear_to_eol_exit:


// fn000000000049A310
// Return size: 0
void fn000000000049A310()
fn000000000049A310_entry:
	// succ:  l000000000049A310
l000000000049A310:
	sp = fp
	sp = sp + -224
	Mem0[sp:word64] = x29
	sp = sp + 8
	Mem0[sp:word64] = x30
	x29 = x31 + 0x0000000000000000
	v8 = sp + 16
	Mem0[v8:word64] = x19
	v8 = v8 + 8
	Mem0[v8:word64] = x20
	v11 = sp + 48
	Mem0[v11:word64] = x23
	v11 = v11 + 8
	Mem0[v11:word64] = x24
	v14 = sp + 32
	Mem0[v14:word64] = x21
	v14 = v14 + 8
	Mem0[v14:word64] = x22
	v17 = sp + 64
	Mem0[v17:word64] = x25
	v17 = v17 + 8
	Mem0[v17:word64] = x26
	v20 = sp + 80
	Mem0[v20:word64] = x27
	v20 = v20 + 8
	Mem0[v20:word64] = x28
	x22 = x0
	x23 = x1
	Mem0[x29 + 128:word32] = w2
	w20 = w3
	w19 = w4
	Mem0[x29 + 124:word32] = w5
	__ctype_get_mb_cur_max()
	sp = sp + 0xFFFFFFFFFFFFFFF8
	x31 = x0 - 0x0000000000000001
	NZCV = cond(x31)
	x24 = 0x00000000004E2000
	branch Test(ULE,ZC) l000000000049A488
	// succ:  l000000000049A354 l000000000049A488
l000000000049A354:
	x0 = 0x00000000004E2000
	w0 = Mem0[x0 + 3968:word32]
	branch w0 != 0x00000000 l000000000049A488
	// succ:  l000000000049A360 l000000000049A488
l000000000049A360:
	x6 = 0x00000000004E4000
	x0 = x24 + 0x0000000000000110
	w0 = Mem0[x0 + 4:word32]
	w1 = Mem0[x6 + 328:word32]
	Mem0[x29 + 152:word64] = x6
	NZCV = cond(w0 - w1)
	branch Test(EQ,Z) l000000000049A4C0
	// succ:  l000000000049A37C l000000000049A4C0
l000000000049A37C:
	__ctype_get_mb_cur_max()
	sp = sp + 0xFFFFFFFFFFFFFFF8
	x31 = x0 - 0x0000000000000001
	NZCV = cond(x31)
	branch Test(ULE,ZC) l000000000049A958
	// succ:  l000000000049A388 l000000000049A958
l000000000049A388:
	x0 = 0x00000000004E2000
	w0 = Mem0[x0 + 3968:word32]
	branch w0 != 0x00000000 l000000000049A958
	// succ:  l000000000049A394 l000000000049A958
l000000000049A394:
	NZCV = cond(w20 - w19)
l000000000049A488:
	x0 = x24 + 0x0000000000000110
	w1 = Mem0[x0 + 56:word32]
	w2 = Mem0[x0 + 4:word32]
	branch w1 == 0x00000000 l000000000049A5B0
	// succ:  l000000000049A498 l000000000049A5B0
l000000000049A498:
	w3 = Mem0[x0 + 84:word32]
	NZCV = cond(w1 - w3)
	branch Test(EQ,Z) l000000000049ADB8
	// succ:  l000000000049A4A4 l000000000049ADB8
l000000000049A4A4:
	x6 = 0x00000000004E4000
	w0 = 0x00000000
	w1 = Mem0[x6 + 328:word32]
	Mem0[x29 + 152:word64] = x6
	w0 = w2 - w0
	// succ:  l000000000049A4B8
l000000000049A4B8:
	NZCV = cond(w0 - w1)
	branch Test(NE,Z) l000000000049A37C
	// succ:  l000000000049A4C0 l000000000049A37C
l000000000049A4C0:
	x0 = 0x00000000004DE000
	w0 = Mem0[x0 + 1528:word32]
	branch w0 == 0x00000000 l000000000049A37C
	// succ:  l000000000049A4CC l000000000049A37C
l000000000049A4CC:
	x0 = 0x00000000004E1000
	w0 = Mem0[x0 + 3312:word32]
	branch w0 != 0x00000000 l000000000049A37C
	// succ:  l000000000049A4D8 l000000000049A37C
l000000000049A4D8:
	x0 = x24 + 0x0000000000000110
	w6 = Mem0[x29 + 128:word32]
	w0 = Mem0[x0 + 56:word32]
	w1 = w6 - 0x00000001
	NZCV = cond(w1 - w0)
	branch Test(NE,Z) l000000000049A37C
	// succ:  l000000000049A4F0 l000000000049A37C
l000000000049A4F0:
	__ctype_get_mb_cur_max()
	sp = sp + 0xFFFFFFFFFFFFFFF8
	x31 = x0 - 0x0000000000000001
	NZCV = cond(x31)
	branch Test(ULE,ZC) l000000000049B1F8
	// succ:  l000000000049A4FC l000000000049B1F8
l000000000049A4FC:
	x0 = 0x00000000004E2000
	w0 = Mem0[x0 + 3968:word32]
	branch w0 != 0x00000000 l000000000049B1F8
	// succ:  l000000000049A508 l000000000049B1F8
l000000000049A508:
	x25 = 0x00000000004DE000
	x0 = x25 + 0x00000000000005B8
	x0 = Mem0[x0 + 16:word64]
	w6 = Mem0[x29 + 128:word32]
	w1 = Mem0[x0 + 32:word32]
	NZCV = cond(w6 - w1)
	branch Test(GE,NZV) l000000000049A538
	// succ:  l000000000049A524 l000000000049A538
l000000000049A524:
	x0 = Mem0[x0 + 24:word64]
	w0 = Mem0[x0 + (int64) ((int32) w6):word32]
	NZCV = cond(w0 - w31)
	branch Test(LE,ZCV) l000000000049A538
	// succ:  l000000000049A534 l000000000049A538
l000000000049A534:
	call _rl_clear_to_eol (retsize: 0;)
	// succ:  l000000000049A538
l000000000049A538:
	x6 = x29 + 0x0000000000000060
	Mem0[x6:word64] = 0x0000000000000000
	x6 = x6 + 8
	Mem0[x29 + 112:word64] = x6
	__ctype_get_mb_cur_max()
	sp = sp + 0xFFFFFFFFFFFFFFF8
	x2 = x0
	x0 = Mem0[x29 + 112:word64]
	x1 = x23
	x3 = x29 + 0x0000000000000060
	mbrtowc(x0, x1, x2, x3)
	sp = sp + 0xFFFFFFFFFFFFFFF8
	x21 = x0
	x0 = x0 + 0x0000000000000002
	x31 = x0 - 0x0000000000000001
	NZCV = cond(x31)
	branch Test(ULE,ZC) l000000000049B440
	// succ:  l000000000049A56C l000000000049B440
l000000000049A56C:
	branch x21 != 0x0000000000000000 l000000000049B320
	// succ:  l000000000049A570 l000000000049B320
l000000000049A570:
	x0 = 0x00000000004E1000
	x1 = Mem0[x0 + 3200:word64]
	w0 = 0x00000020
	_IO_putc(x0, x1)
	sp = sp + 0xFFFFFFFFFFFFFFF8
	// succ:  l000000000049A580
l000000000049A580:
	x0 = x24 + 0x0000000000000110
	w1 = Mem0[x0 + 56:word32]
	w2 = 0x00000001
	w1 = w1 + 0x00000001
	Mem0[x0 + 4:word32] = w2
	Mem0[x0 + 56:word32] = w1
	v41 = Mem0[x22:byte]
	w0 = (word32) v41
	branch w0 == 0x00000000 l000000000049A37C
	// succ:  l000000000049A5A0 l000000000049A37C
l000000000049A5A0:
	v42 = Mem0[x23:byte]
	w0 = (word32) v42
	branch w0 == 0x00000000 l000000000049A37C
	// succ:  l000000000049A5A8 l000000000049A37C
l000000000049A5A8:
	Mem0[x22:byte] = (byte) w0
	goto l000000000049A37C
	// succ:  l000000000049A37C
l000000000049A5B0:
	w1 = Mem0[x0 + 68:word32]
	branch w1 == 0x00000000 l000000000049A4A4
	// succ:  l000000000049A5B8 l000000000049A4A4
l000000000049A5B8:
	x6 = 0x00000000004E4000
	w1 = Mem0[x6 + 328:word32]
	w3 = Mem0[x0 + 24:word32]
	Mem0[x29 + 152:word64] = x6
	NZCV = cond(w3 - w1)
	branch Test(LE,ZCV) l000000000049ADE0
	// succ:  l000000000049A5D0 l000000000049ADE0
l000000000049A5D0:
	w0 = Mem0[x0 + 40:word32]
	w0 = w2 - w0
	goto l000000000049A4B8
	// succ:  l000000000049A4B8
l000000000049A958:
l000000000049ADB8:
	w3 = Mem0[x0 + 28:word32]
	w0 = Mem0[x0 + 40:word32]
	x6 = 0x00000000004E4000
	w0 = w3 - w0
	Mem0[x29 + 152:word64] = x6
	w1 = Mem0[x6 + 328:word32]
	w0 = w2 - w0
	goto l000000000049A4B8
	// succ:  l000000000049A4B8
l000000000049ADE0:
	w0 = Mem0[x0 + 28:word32]
	w0 = w2 - w0
	goto l000000000049A4B8
	// succ:  l000000000049A4B8
l000000000049B1F8:
	v45 = Mem0[x23:byte]
	w0 = (word32) v45
	branch w0 == 0x00000000 l000000000049A570
	// succ:  l000000000049B200 l000000000049A570
l000000000049B200:
	x1 = 0x00000000004E1000
	x1 = Mem0[x1 + 3200:word64]
	_IO_putc(x0, x1)
	sp = sp + 0xFFFFFFFFFFFFFFF8
	goto l000000000049A580
	// succ:  l000000000049A580
l000000000049B320:
	w0 = Mem0[x29 + 104:word32]
	wcwidth(x0)
	sp = sp + 0xFFFFFFFFFFFFFFF8
	NZCV = cond(w0 - w31)
	w28 = w0
	branch Test(LE,ZCV) l000000000049A570
	// succ:  l000000000049B334 l000000000049A570
l000000000049B334:
	NZCV = cond(w21 - w31)
l000000000049B440:
	x21 = 0x0000000000000001
	w28 = w21
fn000000000049A310_exit:


// rl_redisplay
// Return size: 0
void rl_redisplay()
rl_redisplay_entry:
	// succ:  l000000000049B544
l000000000049B544:
	sp = fp
	sp = sp + -224
	Mem0[sp:word64] = x29
	sp = sp + 8
	Mem0[sp:word64] = x30
	x29 = x31 + 0x0000000000000000
	x0 = 0x00000000004E1000
	w0 = Mem0[x0 + 3216:word32]
	v10 = sp + 16
	Mem0[v10:word64] = x19
	v10 = v10 + 8
	Mem0[v10:word64] = x20
	v13 = sp + 32
	Mem0[v13:word64] = x21
	v13 = v13 + 8
	Mem0[v13:word64] = x22
	v16 = sp + 48
	Mem0[v16:word64] = x23
	v16 = v16 + 8
	Mem0[v16:word64] = x24
	v19 = sp + 64
	Mem0[v19:word64] = x25
	v19 = v19 + 8
	Mem0[v19:word64] = x26
	v22 = sp + 80
	Mem0[v22:word64] = x27
	v22 = v22 + 8
	Mem0[v22:word64] = x28
	branch w0 != 0x00000000 l000000000049B588
	// succ:  l000000000049B56C l000000000049B588
l000000000049B56C:
	v23 = sp + 16
	x19 = Mem0[v23:word64]
	v23 = v23 + 8
	x20 = Mem0[v23:word64]
	v24 = sp + 32
	x21 = Mem0[v24:word64]
	v24 = v24 + 8
	x22 = Mem0[v24:word64]
	v25 = sp + 48
	x23 = Mem0[v25:word64]
	v25 = v25 + 8
	x24 = Mem0[v25:word64]
	v26 = sp + 64
	x25 = Mem0[v26:word64]
	v26 = v26 + 8
	x26 = Mem0[v26:word64]
	v27 = sp + 80
	x27 = Mem0[v27:word64]
	v27 = v27 + 8
	x28 = Mem0[v27:word64]
	x29 = Mem0[sp:word64]
	sp = sp + 8
	x30 = Mem0[sp:word64]
	sp = sp + 224
	return
	// succ:  rl_redisplay_exit
l000000000049B588:
	call _rl_block_sigint (retsize: 0;)
	x0 = 0x00000000004E1000
	w1 = Mem0[x0 + 3168:word32]
	x2 = 0x00000000004E2000
	x0 = x2 + 0x0000000000000110
	x3 = 0x00000000004E1000
	w2 = w1 | 0x00800000
	x1 = Mem0[x0 + 72:word64]
	Mem0[x3 + 3168:word32] = w2
	branch x1 == 0x0000000000000000 l000000000049CB88
	// succ:  l000000000049B5B0 l000000000049CB88
l000000000049B5B0:
	x4 = 0x00000000004E2000
	x0 = x4 + 0x0000000000000110
	w0 = Mem0[x0:word32]
	branch w0 == 0x00000000 l000000000049C798
	// succ:  l000000000049B5C0 l000000000049C798
l000000000049B5C0:
	x0 = 0x00000000004E2000
	x19 = x0 + 0x0000000000000110
	w0 = Mem0[x19 + 24:word32]
	x2 = 0x00000000004DE000
	w1 = Mem0[x19 + 48:word32]
	x20 = x2 + 0x00000000000005B8
	w1 = w1 - w0
	x0 = Mem0[x20:word64]
	x2 = 0x00000000004E1000
	x0 = Mem0[x0:word64]
	w3 = 0xFFFFFFFF
	w2 = Mem0[x2 + 3328:word32]
	Mem0[x19 + 276:word32] = w3
	Mem0[x19 + 280:word32] = w1
	Mem0[x19 + 272:word32] = 0x00000000
	Mem0[x29 + 128:word64] = x0
	branch w2 != 0x00000000 l000000000049C758
	// succ:  l000000000049B604 l000000000049C758
l000000000049B604:
	x20 = 0x0000000000000000
	x2 = Mem0[x29 + 128:word64]
	w21 = w20
	// succ:  l000000000049B610
l000000000049B610:
	x1 = 0x00000000004DE000
	x0 = x1 + 0x00000000000005B8
	x1 = Mem0[x0 + 16:word64]
	v37 = Mem0[x2:byte]
	w0 = (word32) v37
	x1 = Mem0[x1:word64]
	v38 = Mem0[x1:byte]
	w1 = (word32) v38
	NZCV = cond(w1 - w0)
	branch Test(EQ,Z) l000000000049B63C
	// succ:  l000000000049B630 l000000000049B63C
l000000000049B630:
	x2 = 0x00000000004E2000
	x0 = x2 + 0x0000000000000110
	Mem0[x0 + 268:word32] = 0x00000000
	// succ:  l000000000049B63C
l000000000049B63C:
	x3 = 0x00000000004E2000
	x19 = x3 + 0x0000000000000110
	x0 = 0x00000000004E1000
	x22 = Mem0[x19 + 72:word64]
	x0 = Mem0[x0 + 3176:word64]
	x31 = x22 - x0
	NZCV = cond(x31)
	branch Test(EQ,Z) l000000000049B660
	// succ:  l000000000049B658 l000000000049B660
l000000000049B658:
	x0 = Mem0[x19 + 16:word64]
	branch x0 == 0x0000000000000000 l000000000049CBB8
	// succ:  l000000000049B660 l000000000049CBB8
l000000000049B660:
	x4 = 0x00000000004E2000
	x1 = x4 + 0x0000000000000110
	x19 = Mem0[x1 + 32:word64]
	branch x19 == 0x0000000000000000 l000000000049B678
	// succ:  l000000000049B670 l000000000049B678
l000000000049B670:
	w0 = Mem0[x1 + 80:word32]
	branch w0 != 0x00000000 l000000000049BBA8
	// succ:  l000000000049B678 l000000000049BBA8
l000000000049B678:
	x0 = 0x00000000004E2000
	x22 = x0 + 0x0000000000000110
	w0 = Mem0[x22 + 8:word32]
	NZCV = cond(w0 - w31)
	branch Test(LE,ZCV) l000000000049BB9C
	// succ:  l000000000049B68C l000000000049BB9C
l000000000049B68C:
	x1 = 0x00000000004DE000
	x19 = x1 + 0x00000000000005B8
	w3 = Mem0[x19 + 8:word32]
	w1 = w21 + w0
	w2 = w1 + 0x00000002
	NZCV = cond(w2 - w3)
	branch Test(GE,NZV) l000000000049C7F4
	// succ:  l000000000049B6A8 l000000000049C7F4
l000000000049B6A8:
	w21 = w1
	w19 = w0
	x2 = 0x00000000004E2000
	x0 = x2 + 0x0000000000000110
	x3 = Mem0[x29 + 128:word64]
	x1 = Mem0[x0 + 16:word64]
l000000000049BB9C:
	w19 = w0
l000000000049BBA8:
	x0 = x19
	strlen(x0)
	sp = sp + 0xFFFFFFFFFFFFFFF8
	x1 = x0
	x0 = x19
	call _rl_output_some_chars (retsize: 0;)
	goto l000000000049B678
	// succ:  l000000000049B678
l000000000049C758:
	call current_history (retsize: 0;)
	branch x0 == 0x0000000000000000 l000000000049CC80
	// succ:  l000000000049C760 l000000000049CC80
l000000000049C760:
	x0 = 0x00000000004E2000
	x0 = Mem0[x0 + 2728:word64]
	branch x0 == 0x0000000000000000 l000000000049CC80
	// succ:  l000000000049C76C l000000000049CC80
l000000000049C76C:
	x4 = Mem0[x29 + 128:word64]
	x0 = Mem0[x20:word64]
	w1 = 0x0000002A
	Mem0[x4:byte] = (byte) w1
	Mem0[x4 + 1:byte] = 0x00
	x20 = 0x0000000000000001
	w1 = 0x00000001
	Mem0[x19 + 272:word32] = w1
	x2 = Mem0[x0:word64]
	w21 = w20
	goto l000000000049B610
	// succ:  l000000000049B610
l000000000049C798:
	call fn0000000000498C6C (retsize: 0;)
	call rl_on_new_line (retsize: 0;)
	goto l000000000049B5C0
	// succ:  l000000000049B5C0
l000000000049C7F4:
l000000000049CB88:
	x1 = 0x00000000004AC000
	x1 = x1 + 0x0000000000000460
	Mem0[x0 + 72:word64] = x1
	goto l000000000049B5B0
	// succ:  l000000000049B5B0
l000000000049CBB8:
	x0 = x22
	w1 = 0x0000000A
	strrchr(x0, x1)
	sp = sp + 0xFFFFFFFFFFFFFFF8
	x25 = x0
	branch x0 == 0x0000000000000000 l000000000049CDCC
	// succ:  l000000000049CBCC l000000000049CDCC
l000000000049CBCC:
	w0 = Mem0[x19 + 80:word32]
	x23 = x25 + 0x0000000000000001
	branch w0 != 0x00000000 l000000000049CD68
	// succ:  l000000000049CBD8 l000000000049CD68
l000000000049CBD8:
	x0 = x23
	strlen(x0)
	sp = sp + 0xFFFFFFFFFFFFFFF8
	x1 = 0x00000000004DE000
	x22 = x1 + 0x00000000000005B8
	w21 = w21 + w0
	w1 = Mem0[x22 + 8:word32]
	x3 = 0x00000000004E2000
	x19 = x0
	x2 = x3 + 0x0000000000000110
	w0 = w21 + 0x00000002
	Mem0[x2 + 24:word32] = w19
	NZCV = cond(w0 - w1)
	branch Test(GE,NZV) l000000000049CD0C
	// succ:  l000000000049CC0C l000000000049CD0C
l000000000049CC0C:
	x4 = Mem0[x29 + 128:word64]
	x1 = x23
l000000000049CC80:
	x3 = 0x00000000004DE000
	x0 = x3 + 0x00000000000005B8
	x0 = Mem0[x0:word64]
	x20 = 0x0000000000000000
	x2 = Mem0[x0:word64]
	w21 = w20
	goto l000000000049B610
	// succ:  l000000000049B610
l000000000049CD0C:
l000000000049CD68:
	x19 = x23 - x22
	x0 = x22
	w1 = w19
	call _rl_output_some_chars (retsize: 0;)
	w31 = w19 - 0x00000001
	NZCV = cond(w31)
	branch Test(LE,ZCV) l000000000049CD8C
	// succ:  l000000000049CD80 l000000000049CD8C
l000000000049CD80:
	v45 = Mem0[x25 + -1:byte]
	w0 = (word32) v45
	w31 = w0 - 0x0000000D
	NZCV = cond(w31)
	branch Test(EQ,Z) l000000000049CBD8
	// succ:  l000000000049CD8C l000000000049CBD8
l000000000049CD8C:
	call fn0000000000498E40 (retsize: 0;)
	goto l000000000049CBD8
	// succ:  l000000000049CBD8
l000000000049CDCC:
	x23 = x22
	goto l000000000049CBD8
	// succ:  l000000000049CBD8
rl_redisplay_exit:


// _rl_clear_screen
// Return size: 0
void _rl_clear_screen()
_rl_clear_screen_entry:
	// succ:  l000000000049CF58
l000000000049CF58:
	sp = fp
	x0 = 0x00000000004E4000
	x0 = Mem0[x0 + 336:word64]
	branch x0 == 0x0000000000000000 l000000000049CF74
	// succ:  l000000000049CF64 l000000000049CF74
l000000000049CF64:
	x2 = 0x00000000004A0000
	w1 = 0x00000001
	x2 = x2 + 0xFFFFFFFFFFFFFAAC
	call tputs (retsize: 0;)
	return
	// succ:  _rl_clear_screen_exit
l000000000049CF74:
	// succ:  l000000000049CF74_thunk_rl_crlf
l000000000049CF74_thunk_rl_crlf:
	call rl_crlf (retsize: 0;)
	return
	// succ:  _rl_clear_screen_exit
_rl_clear_screen_exit:


// _rl_update_final
// Return size: 0
void _rl_update_final()
_rl_update_final_entry:
	// succ:  l000000000049CF78
l000000000049CF78:
	sp = fp
	sp = sp + -64
	Mem0[sp:word64] = x29
	sp = sp + 8
	Mem0[sp:word64] = x30
	x29 = x31 + 0x0000000000000000
	v8 = sp + 16
	Mem0[v8:word64] = x19
	v8 = v8 + 8
	Mem0[v8:word64] = x20
	x19 = 0x00000000004E2000
	x20 = x19 + 0x0000000000000110
	w0 = Mem0[x20 + 64:word32]
	v12 = sp + 32
	Mem0[v12:word64] = x21
	v12 = v12 + 8
	Mem0[v12:word64] = x22
	v15 = sp + 48
	Mem0[v15:word64] = x23
	v15 = v15 + 8
	Mem0[v15:word64] = x24
	branch w0 == 0x00000000 l000000000049CFA4
	// succ:  l000000000049CF9C l000000000049CFA4
l000000000049CF9C:
	w1 = Mem0[x20 + 4:word32]
	branch w1 == 0x00000000 l000000000049CFE0
	// succ:  l000000000049CFA4 l000000000049CFE0
l000000000049CFA4:
	call _rl_move_vert (retsize: 0;)
	x21 = 0x00000000004E1000
	// succ:  l000000000049CFAC
l000000000049CFAC:
	x19 = x19 + 0x0000000000000110
	Mem0[x19 + 64:word32] = 0x00000000
	call rl_crlf (retsize: 0;)
	x0 = Mem0[x21 + 3200:word64]
	fflush(x0)
	sp = sp + 0xFFFFFFFFFFFFFFF8
	w0 = Mem0[x19 + 268:word32]
	v18 = sp + 32
	x21 = Mem0[v18:word64]
	v18 = v18 + 8
	x22 = Mem0[v18:word64]
	w0 = w0 + 0x00000001
	Mem0[x19 + 268:word32] = w0
	v19 = sp + 48
	x23 = Mem0[v19:word64]
	v19 = v19 + 8
	x24 = Mem0[v19:word64]
	v20 = sp + 16
	x19 = Mem0[v20:word64]
	v20 = v20 + 8
	x20 = Mem0[v20:word64]
	x29 = Mem0[sp:word64]
	sp = sp + 8
	x30 = Mem0[sp:word64]
	sp = sp + 64
	return
	// succ:  _rl_update_final_exit
l000000000049CFE0:
	x22 = 0x00000000004DE000
	x22 = x22 + 0x00000000000005B8
	x1 = Mem0[x22 + 16:word64]
	x3 = Mem0[x1 + 8:word64]
	x2 = Mem0[x1:word64]
	v24 = Mem0[x3 + (int64) ((int32) w0):int32]
	x1 = (word64) v24
	v26 = Mem0[x2 + x1:byte]
	w23 = (word32) v26
	branch w23 != 0x00000000 l000000000049CFA4
	// succ:  l000000000049D000 l000000000049CFA4
l000000000049D000:
	w1 = w0 - 0x00000001
	w0 = w1
	Mem0[x20 + 64:word32] = w1
	call _rl_move_vert (retsize: 0;)
	x0 = 0x00000000004DE000
	w0 = Mem0[x0 + 1528:word32]
	x21 = 0x00000000004E1000
	branch w0 == 0x00000000 l000000000049CFAC
	// succ:  l000000000049D020 l000000000049CFAC
l000000000049D020:
	x4 = Mem0[x22 + 16:word64]
	v28 = Mem0[x20 + 32:int32]
	x3 = (word64) v28
	x2 = Mem0[x4 + 8:word64]
	x3 = x3 + 0x0000000000000001
_rl_update_final_exit:


// _rl_redisplay_after_sigwinch
// Return size: 0
void _rl_redisplay_after_sigwinch()
_rl_redisplay_after_sigwinch_entry:
	// succ:  l000000000049D090
l000000000049D090:
	sp = fp
	sp = sp + -48
	Mem0[sp:word64] = x29
	sp = sp + 8
	Mem0[sp:word64] = x30
	x29 = x31 + 0x0000000000000000
	v8 = sp + 16
	Mem0[v8:word64] = x19
	v8 = v8 + 8
	Mem0[v8:word64] = x20
	x19 = 0x00000000004E4000
	x0 = Mem0[x19 + 288:word64]
	v12 = sp + 32
	Mem0[v12:word64] = x21
	v12 = v12 + 8
	Mem0[v12:word64] = x22
	branch x0 == 0x0000000000000000 l000000000049D184
	goto l000000000049D0AC
	// succ:  l000000000049D0AC l000000000049D184
l000000000049D090:
l000000000049D0AC:
	x20 = 0x00000000004E2000
	x21 = x20 + 0x0000000000000110
	w0 = Mem0[x21 + 64:word32]
	x22 = 0x00000000004A0000
	call _rl_move_vert (retsize: 0;)
	x22 = x22 + 0xFFFFFFFFFFFFFAAC
	x0 = Mem0[x19 + 288:word64]
	w1 = 0x00000001
	x2 = x22
	call tputs (retsize: 0;)
	x0 = 0x00000000004E4000
	x0 = Mem0[x0 + 344:word64]
	Mem0[x21 + 4:word32] = 0x00000000
	branch x0 == 0x0000000000000000 l000000000049D190
	// succ:  l000000000049D0E4 l000000000049D190
l000000000049D0E4:
	w1 = 0x00000001
	x2 = x22
	call tputs (retsize: 0;)
	x0 = x20 + 0x0000000000000110
	w0 = Mem0[x0 + 56:word32]
	NZCV = cond(w0 - w31)
	branch Test(LE,ZCV) l000000000049D108
	// succ:  l000000000049D100 l000000000049D108
l000000000049D100:
	w0 = 0x00000000
	call _rl_move_vert (retsize: 0;)
	// succ:  l000000000049D108
l000000000049D108:
	x19 = x20 + 0x0000000000000110
	x21 = Mem0[x19 + 72:word64]
	w1 = 0x0000000A
	x0 = x21
	strrchr(x0, x1)
	sp = sp + 0xFFFFFFFFFFFFFFF8
	branch x0 == 0x0000000000000000 l000000000049D174
	// succ:  l000000000049D120 l000000000049D174
l000000000049D120:
	x22 = x0 + 0x0000000000000001
	call rl_save_prompt (retsize: 0;)
	x0 = x22
	x1 = x19 + 0x0000000000000030
	x2 = x19 + 0x000000000000002C
	x3 = x19 + 0x0000000000000028
	x4 = x19 + 0x0000000000000018
	Mem0[x19 + 72:word64] = x22
	call fn0000000000499108 (retsize: 0;)
	Mem0[x19 + 16:word64] = x0
	Mem0[x19 + 32:word64] = 0x0000000000000000
	branch x0 == 0x0000000000000000 l000000000049D154
	// succ:  l000000000049D150 l000000000049D154
l000000000049D150:
	strlen(x0)
	sp = sp + 0xFFFFFFFFFFFFFFF8
	// succ:  l000000000049D154
l000000000049D154:
	x20 = x20 + 0x0000000000000110
	Mem0[x20 + 8:word32] = w0
	call rl_forced_update_display (retsize: 0;)
	Mem0[x20 + 72:word64] = x21
	v24 = sp + 16
	x19 = Mem0[v24:word64]
	v24 = v24 + 8
	x20 = Mem0[v24:word64]
	v25 = sp + 32
	x21 = Mem0[v25:word64]
	v25 = v25 + 8
	x22 = Mem0[v25:word64]
	x29 = Mem0[sp:word64]
	sp = sp + 8
	x30 = Mem0[sp:word64]
	sp = sp + 48
	// succ:  l000000000049D170_thunk_rl_restore_prompt
l000000000049D170_thunk_rl_restore_prompt:
	call rl_restore_prompt (retsize: 0;)
	return
	// succ:  _rl_redisplay_after_sigwinch_exit
l000000000049D174:
	v22 = sp + 16
	x19 = Mem0[v22:word64]
	v22 = v22 + 8
	x20 = Mem0[v22:word64]
	v23 = sp + 32
	x21 = Mem0[v23:word64]
	v23 = v23 + 8
	x22 = Mem0[v23:word64]
	x29 = Mem0[sp:word64]
	sp = sp + 8
	x30 = Mem0[sp:word64]
	sp = sp + 48
	// succ:  l000000000049D180_thunk_rl_forced_update_display
l000000000049D180_thunk_rl_forced_update_display:
	call rl_forced_update_display (retsize: 0;)
	return
	// succ:  _rl_redisplay_after_sigwinch_exit
l000000000049D184:
	call rl_crlf (retsize: 0;)
	x20 = 0x00000000004E2000
	goto l000000000049D108
	// succ:  l000000000049D108
l000000000049D190:
	x0 = 0x00000000004E4000
	w0 = Mem0[x0 + 328:word32]
	call fn0000000000498E78 (retsize: 0;)
	x0 = Mem0[x19 + 288:word64]
	goto l000000000049D0E4
	// succ:  l000000000049D0E4
_rl_redisplay_after_sigwinch_exit:


// _rl_clean_up_for_exit
// Return size: 0
void _rl_clean_up_for_exit()
_rl_clean_up_for_exit_entry:
	// succ:  l000000000049D1A4
l000000000049D1A4:
	sp = fp
	sp = sp + -32
	Mem0[sp:word64] = x29
	sp = sp + 8
	Mem0[sp:word64] = x30
	x29 = x31 + 0x0000000000000000
	x0 = 0x00000000004E1000
	w0 = Mem0[x0 + 3216:word32]
	Mem0[sp + 16:word64] = x19
	branch w0 != 0x00000000 l000000000049D1C8
	// succ:  l000000000049D1BC l000000000049D1C8
l000000000049D1BC:
	x19 = Mem0[sp + 16:word64]
	x29 = Mem0[sp:word64]
	sp = sp + 8
	x30 = Mem0[sp:word64]
	sp = sp + 32
	return
	// succ:  _rl_clean_up_for_exit_exit
l000000000049D1C8:
	x19 = 0x00000000004E2000
	x19 = x19 + 0x0000000000000110
	w0 = Mem0[x19 + 64:word32]
	call _rl_move_vert (retsize: 0;)
	x0 = 0x00000000004E1000
	x0 = Mem0[x0 + 3200:word64]
	Mem0[x19 + 64:word32] = 0x00000000
	fflush(x0)
	sp = sp + 0xFFFFFFFFFFFFFFF8
	x19 = Mem0[sp + 16:word64]
	x29 = Mem0[sp:word64]
	sp = sp + 8
	x30 = Mem0[sp:word64]
	sp = sp + 32
	w0 = 0x00000001
	w1 = 0x00000000
	// succ:  l000000000049D1F8_thunk_rl_restart_output
l000000000049D1F8_thunk_rl_restart_output:
	call rl_restart_output (retsize: 0;)
	return
	// succ:  _rl_clean_up_for_exit_exit
_rl_clean_up_for_exit_exit:


// _rl_erase_entire_line
// Return size: 0
void _rl_erase_entire_line()
_rl_erase_entire_line_entry:
	// succ:  l000000000049D1FC
l000000000049D1FC:
	sp = fp
	sp = sp + -16
	Mem0[sp:word64] = x29
	sp = sp + 8
	Mem0[sp:word64] = x30
	x29 = x31 + 0x0000000000000000
	call fn0000000000498E40 (retsize: 0;)
	w0 = 0x00000000
	call _rl_clear_to_eol (retsize: 0;)
	call fn0000000000498E40 (retsize: 0;)
	x0 = 0x00000000004E1000
	x0 = Mem0[x0 + 3200:word64]
	x29 = Mem0[sp:word64]
	sp = sp + 8
	x30 = Mem0[sp:word64]
	sp = sp + 16
	fflush(x0)
	return
	// succ:  _rl_erase_entire_line_exit
_rl_erase_entire_line_exit:


// _rl_current_display_line
// Return size: 0
void _rl_current_display_line()
_rl_current_display_line_entry:
	// succ:  l000000000049D224
l000000000049D224:
	sp = fp
	x0 = 0x00000000004E2000
	x0 = x0 + 0x0000000000000110
	x2 = 0x00000000004E1000
	x1 = Mem0[x0 + 72:word64]
	x2 = Mem0[x2 + 3176:word64]
	x31 = x1 - x2
	NZCV = cond(x31)
	x1 = 0x00000000004E4000
	branch Test(EQ,Z) l000000000049D270
	// succ:  l000000000049D244 l000000000049D270
l000000000049D244:
	w2 = Mem0[x0 + 4:word32]
	w0 = Mem0[x1 + 328:word32]
	w0 = w2 - w0
	// succ:  l000000000049D250
l000000000049D250:
	NZCV = cond(w0 - w31)
	branch Test(LE,ZCV) l000000000049D268
	// succ:  l000000000049D258 l000000000049D268
l000000000049D258:
	w1 = Mem0[x1 + 328:word32]
	w0 = w0 / w1
	w0 = w0 + 0x00000001
	return
	// succ:  _rl_current_display_line_exit
l000000000049D268:
	w0 = 0x00000000
	return
	// succ:  _rl_current_display_line_exit
l000000000049D270:
	w0 = Mem0[x0 + 4:word32]
	w2 = Mem0[x1 + 328:word32]
	x3 = 0x00000000004E1000
	w3 = Mem0[x3 + 3184:word32]
	w0 = w0 - w2
	w0 = w0 - w3
	goto l000000000049D250
	// succ:  l000000000049D250
_rl_current_display_line_exit:


// fn000000000049D2E4
// Return size: 0
void fn000000000049D2E4()
fn000000000049D2E4_entry:
	// succ:  l000000000049D2E4
l000000000049D2E4:
	sp = fp
	sp = sp + -352
	Mem0[sp:word64] = x29
	sp = sp + 8
	Mem0[sp:word64] = x30
	x29 = x31 + 0x0000000000000000
	w31 = w0 - 0x0000001C
	NZCV = cond(w31)
	v11 = sp + 16
	Mem0[v11:word64] = x19
	v11 = v11 + 8
	Mem0[v11:word64] = x20
	x20 = x1
	w1 = 0x10000000
fn000000000049D2E4_exit:


// fn000000000049D378
// Return size: 0
void fn000000000049D378()
fn000000000049D378_entry:
	// succ:  l000000000049D378
l000000000049D378:
	sp = fp
	sp = sp + -208
	Mem0[sp:word64] = x29
	sp = sp + 8
	Mem0[sp:word64] = x30
	x29 = x31 + 0x0000000000000000
	v8 = sp + 16
	Mem0[v8:word64] = x19
	v8 = v8 + 8
	Mem0[v8:word64] = x20
	w20 = w0
	x0 = x29 + 0x0000000000000028
	x19 = x2
	Mem0[x29 + 192:word64] = x1
	sigemptyset(x0)
	sp = sp + 0xFFFFFFFFFFFFFFF8
	x1 = Mem0[x29 + 192:word64]
	w0 = w20
	x2 = x19
	call fn000000000049D2E4 (retsize: 0;)
	x31 = x0 - 0x0000000000000001
	NZCV = cond(x31)
	branch Test(EQ,Z) l000000000049D3BC
	// succ:  l000000000049D3B0 l000000000049D3BC
l000000000049D3B0:
	v16 = sp + 16
	x19 = Mem0[v16:word64]
	v16 = v16 + 8
	x20 = Mem0[v16:word64]
	x29 = Mem0[sp:word64]
	sp = sp + 8
	x30 = Mem0[sp:word64]
	sp = sp + 208
	return
	// succ:  fn000000000049D378_exit
l000000000049D3BC:
	x1 = x19
	x2 = x29 + 0x0000000000000020
	w0 = w20
	sigaction(x0, x1, x2)
	sp = sp + 0xFFFFFFFFFFFFFFF8
	v17 = sp + 16
	x19 = Mem0[v17:word64]
	v17 = v17 + 8
	x20 = Mem0[v17:word64]
	x29 = Mem0[sp:word64]
	sp = sp + 8
	x30 = Mem0[sp:word64]
	sp = sp + 208
	return
	// succ:  fn000000000049D378_exit
fn000000000049D378_exit:


// rl_set_signals
// Return size: 0
void rl_set_signals()
rl_set_signals_entry:
	// succ:  l000000000049D3D8
l000000000049D3D8:
	sp = fp
	sp = sp + -240
	Mem0[sp:word64] = x29
	sp = sp + 8
	Mem0[sp:word64] = x30
	x29 = x31 + 0x0000000000000000
	v8 = sp + 16
	Mem0[v8:word64] = x19
	v8 = v8 + 8
	Mem0[v8:word64] = x20
	x19 = 0x00000000004DE000
	x20 = x19 + 0x00000000000005D8
	w0 = Mem0[x20:word32]
	v12 = sp + 32
	Mem0[v12:word64] = x21
	v12 = v12 + 8
	Mem0[v12:word64] = x22
	Mem0[sp + 48:word64] = x23
	branch w0 == 0x00000000 l000000000049D418
	// succ:  l000000000049D3FC l000000000049D418
l000000000049D3FC:
	x21 = 0x00000000004E2000
	x23 = x21 + 0x0000000000000288
	w0 = Mem0[x23 + 152:word32]
	branch w0 == 0x00000000 l000000000049D55C
	// succ:  l000000000049D40C l000000000049D55C
l000000000049D40C:
	x20 = x21 + 0x0000000000000288
	w22 = Mem0[x20 + 156:word32]
	branch w22 == 0x00000000 l000000000049D480
	// succ:  l000000000049D418 l000000000049D480
l000000000049D418:
	x19 = x19 + 0x00000000000005D8
	w0 = Mem0[x19 + 4:word32]
	branch w0 == 0x00000000 l000000000049D434
	// succ:  l000000000049D424 l000000000049D434
l000000000049D424:
	x19 = 0x00000000004E2000
	x19 = x19 + 0x0000000000000288
	w0 = Mem0[x19 + 1480:word32]
	branch w0 == 0x00000000 l000000000049D44C
	// succ:  l000000000049D434 l000000000049D44C
l000000000049D434:
	w0 = 0x00000000
	v15 = sp + 16
	x19 = Mem0[v15:word64]
	v15 = v15 + 8
	x20 = Mem0[v15:word64]
	v16 = sp + 32
	x21 = Mem0[v16:word64]
	v16 = v16 + 8
	x22 = Mem0[v16:word64]
	x23 = Mem0[sp + 48:word64]
	x29 = Mem0[sp:word64]
	sp = sp + 8
	x30 = Mem0[sp:word64]
	sp = sp + 240
	return
	// succ:  rl_set_signals_exit
l000000000049D44C:
	x1 = 0x000000000049D000
	x2 = x19
	w0 = 0x0000001C
	x1 = x1 + 0x000000000000028C
	call fn000000000049D378 (retsize: 0;)
	w0 = 0x00000001
	Mem0[x19 + 1480:word32] = w0
	v19 = sp + 32
	x21 = Mem0[v19:word64]
	v19 = v19 + 8
	x22 = Mem0[v19:word64]
	w0 = 0x00000000
	v20 = sp + 16
	x19 = Mem0[v20:word64]
	v20 = v20 + 8
	x20 = Mem0[v20:word64]
	x23 = Mem0[sp + 48:word64]
	x29 = Mem0[sp:word64]
	sp = sp + 8
	x30 = Mem0[sp:word64]
	sp = sp + 240
	return
	// succ:  rl_set_signals_exit
l000000000049D480:
	x2 = x20 + 0x0000000000000120
	x0 = x2
	Mem0[x29 + 224:word64] = x2
	sigemptyset(x0)
	sp = sp + 0xFFFFFFFFFFFFFFF8
	x2 = Mem0[x29 + 224:word64]
	x1 = x20 + 0x00000000000000A0
	w0 = w22
	x23 = 0x000000000049D000
	sigprocmask(x0, x1, x2)
	sp = sp + 0xFFFFFFFFFFFFFFF8
	x22 = x23 + 0xFFFFFFFFFFFFFA9C
	x2 = x20 + 0x00000000000001A0
	w0 = 0x00000002
	x1 = x22
	call fn000000000049D378 (retsize: 0;)
	x2 = x20 + 0x0000000000000238
	w0 = 0x0000000F
	x1 = x22
	call fn000000000049D378 (retsize: 0;)
	x2 = x20 + 0x00000000000002D0
	w0 = 0x00000003
	x1 = x22
	call fn000000000049D378 (retsize: 0;)
	x20 = x20 + 0x0000000000000368
	w0 = 0x0000000E
	x1 = x22
	x2 = x20
	call fn000000000049D2E4 (retsize: 0;)
	x31 = x0 - 0x0000000000000001
	NZCV = cond(x31)
	branch Test(EQ,Z) l000000000049D5EC
	// succ:  l000000000049D4F4 l000000000049D5EC
l000000000049D4F4:
	branch x0 == 0x0000000000000000 l000000000049D508
	// succ:  l000000000049D4F8 l000000000049D508
l000000000049D4F8:
	x1 = x21 + 0x0000000000000288
	x1 = x1 + 0x0000000000000368
	w0 = Mem0[x1 + 136:word32]
	branch (w0 & 0x00000000) == 0x00000000 l000000000049D5DC
	// succ:  l000000000049D508 l000000000049D5DC
l000000000049D508:
	x21 = x21 + 0x0000000000000288
	x20 = x23 + 0xFFFFFFFFFFFFFA9C
	x1 = x20
	x2 = x21 + 0x0000000000000400
	w0 = 0x00000014
	call fn000000000049D378 (retsize: 0;)
	x1 = x20
	x2 = x21 + 0x0000000000000498
	w0 = 0x00000016
	call fn000000000049D378 (retsize: 0;)
	x1 = x20
	x2 = x21 + 0x0000000000000530
	w0 = 0x00000015
	call fn000000000049D378 (retsize: 0;)
	w3 = 0x00000001
	x1 = x21 + 0x0000000000000120
	x2 = 0x0000000000000000
	w0 = 0x00000002
	Mem0[x21 + 156:word32] = w3
	sigprocmask(x0, x1, x2)
	sp = sp + 0xFFFFFFFFFFFFFFF8
	goto l000000000049D418
	// succ:  l000000000049D418
l000000000049D55C:
	x22 = x23 + 0x00000000000000A0
	x0 = x22
	sigemptyset(x0)
	sp = sp + 0xFFFFFFFFFFFFFFF8
	w1 = 0x00000002
	x0 = x22
	sigaddset(x0, x1)
	sp = sp + 0xFFFFFFFFFFFFFFF8
	w1 = 0x0000000F
	x0 = x22
	sigaddset(x0, x1)
	sp = sp + 0xFFFFFFFFFFFFFFF8
	w1 = 0x00000003
	x0 = x22
	sigaddset(x0, x1)
	sp = sp + 0xFFFFFFFFFFFFFFF8
	w1 = 0x0000000E
	x0 = x22
	sigaddset(x0, x1)
	sp = sp + 0xFFFFFFFFFFFFFFF8
	w1 = 0x00000014
	x0 = x22
	sigaddset(x0, x1)
	sp = sp + 0xFFFFFFFFFFFFFFF8
	w1 = 0x00000015
	x0 = x22
	sigaddset(x0, x1)
	sp = sp + 0xFFFFFFFFFFFFFFF8
	w1 = 0x00000016
	x0 = x22
	sigaddset(x0, x1)
	sp = sp + 0xFFFFFFFFFFFFFFF8
	w1 = 0x00000001
	w0 = Mem0[x20:word32]
	Mem0[x23 + 152:word32] = w1
	branch w0 == 0x00000000 l000000000049D418
	// succ:  l000000000049D5CC l000000000049D418
l000000000049D5CC:
	x20 = x21 + 0x0000000000000288
	w22 = Mem0[x20 + 156:word32]
	branch w22 != 0x00000000 l000000000049D418
	// succ:  l000000000049D5D8 l000000000049D418
l000000000049D5D8:
	goto l000000000049D480
	// succ:  l000000000049D480
l000000000049D5DC:
	x2 = x29 + 0x0000000000000040
	w0 = 0x0000000E
	sigaction(x0, x1, x2)
	sp = sp + 0xFFFFFFFFFFFFFFF8
	goto l000000000049D508
	// succ:  l000000000049D508
l000000000049D5EC:
	x1 = x20
	x2 = x29 + 0x0000000000000040
	w0 = 0x0000000E
	sigaction(x0, x1, x2)
	sp = sp + 0xFFFFFFFFFFFFFFF8
	goto l000000000049D4F8
	// succ:  l000000000049D4F8
rl_set_signals_exit:


// rl_clear_signals
// Return size: 0
void rl_clear_signals()
rl_clear_signals_entry:
	// succ:  l000000000049D600
l000000000049D600:
	sp = fp
	sp = sp + -192
	Mem0[sp:word64] = x29
	sp = sp + 8
	Mem0[sp:word64] = x30
	x29 = x31 + 0x0000000000000000
	v6 = sp + 16
	Mem0[v6:word64] = x19
	v6 = v6 + 8
	Mem0[v6:word64] = x20
	x19 = 0x00000000004DE000
	x0 = x19 + 0x00000000000005D8
	w0 = Mem0[x0:word32]
	branch w0 == 0x00000000 l000000000049D630
	// succ:  l000000000049D61C l000000000049D630
l000000000049D61C:
	x20 = 0x00000000004E2000
	x20 = x20 + 0x0000000000000288
	w0 = Mem0[x20 + 156:word32]
	w31 = w0 - 0x00000001
	NZCV = cond(w31)
	branch Test(EQ,Z) l000000000049D68C
	// succ:  l000000000049D630 l000000000049D68C
l000000000049D630:
	x19 = x19 + 0x00000000000005D8
	w0 = Mem0[x19 + 4:word32]
	branch w0 == 0x00000000 l000000000049D650
	// succ:  l000000000049D63C l000000000049D650
l000000000049D63C:
	x19 = 0x00000000004E2000
	x19 = x19 + 0x0000000000000288
	w0 = Mem0[x19 + 1480:word32]
	w31 = w0 - 0x00000001
	NZCV = cond(w31)
	branch Test(EQ,Z) l000000000049D660
	// succ:  l000000000049D650 l000000000049D660
l000000000049D650:
	w0 = 0x00000000
	v14 = sp + 16
	x19 = Mem0[v14:word64]
	v14 = v14 + 8
	x20 = Mem0[v14:word64]
	x29 = Mem0[sp:word64]
	sp = sp + 8
	x30 = Mem0[sp:word64]
	sp = sp + 192
	return
	// succ:  rl_clear_signals_exit
l000000000049D660:
	x0 = x29 + 0x0000000000000028
	sigemptyset(x0)
	sp = sp + 0xFFFFFFFFFFFFFFF8
	x1 = x19
	x2 = x29 + 0x0000000000000020
	w0 = 0x0000001C
	sigaction(x0, x1, x2)
	sp = sp + 0xFFFFFFFFFFFFFFF8
	Mem0[x19 + 1480:word32] = 0x00000000
	w0 = 0x00000000
	v17 = sp + 16
	x19 = Mem0[v17:word64]
	v17 = v17 + 8
	x20 = Mem0[v17:word64]
	x29 = Mem0[sp:word64]
	sp = sp + 8
	x30 = Mem0[sp:word64]
	sp = sp + 192
	return
	// succ:  rl_clear_signals_exit
l000000000049D68C:
	x0 = x29 + 0x0000000000000028
	sigemptyset(x0)
	sp = sp + 0xFFFFFFFFFFFFFFF8
	x1 = x20 + 0x00000000000001A0
	x2 = x29 + 0x0000000000000020
	w0 = 0x00000002
	sigaction(x0, x1, x2)
	sp = sp + 0xFFFFFFFFFFFFFFF8
	x1 = x20 + 0x0000000000000238
	x2 = x29 + 0x0000000000000020
	w0 = 0x0000000F
	sigaction(x0, x1, x2)
	sp = sp + 0xFFFFFFFFFFFFFFF8
	x1 = x20 + 0x00000000000002D0
	x2 = x29 + 0x0000000000000020
	w0 = 0x00000003
	sigaction(x0, x1, x2)
	sp = sp + 0xFFFFFFFFFFFFFFF8
	x1 = x20 + 0x0000000000000368
	x2 = x29 + 0x0000000000000020
	w0 = 0x0000000E
	sigaction(x0, x1, x2)
	sp = sp + 0xFFFFFFFFFFFFFFF8
	x1 = x20 + 0x0000000000000400
	x2 = x29 + 0x0000000000000020
	w0 = 0x00000014
	sigaction(x0, x1, x2)
	sp = sp + 0xFFFFFFFFFFFFFFF8
	x1 = x20 + 0x0000000000000498
	x2 = x29 + 0x0000000000000020
	w0 = 0x00000016
	sigaction(x0, x1, x2)
	sp = sp + 0xFFFFFFFFFFFFFFF8
	w0 = 0x00000015
	x1 = x20 + 0x0000000000000530
	x2 = x29 + 0x0000000000000020
	sigaction(x0, x1, x2)
	sp = sp + 0xFFFFFFFFFFFFFFF8
	Mem0[x20 + 156:word32] = 0x00000000
	goto l000000000049D630
	// succ:  l000000000049D630
rl_clear_signals_exit:


// rl_cleanup_after_signal
// Return size: 0
void rl_cleanup_after_signal()
rl_cleanup_after_signal_entry:
	// succ:  l000000000049D70C
l000000000049D70C:
	sp = fp
	sp = sp + -16
	Mem0[sp:word64] = x29
	sp = sp + 8
	Mem0[sp:word64] = x30
	x29 = x31 + 0x0000000000000000
	call _rl_clean_up_for_exit (retsize: 0;)
	x0 = 0x00000000004DE000
	x0 = Mem0[x0 + 1360:word64]
	branch x0 == 0x0000000000000000 l000000000049D728
	// succ:  l000000000049D724 l000000000049D728
l000000000049D724:
	call x0 (retsize: 0;)
	// succ:  l000000000049D728
l000000000049D728:
	call rl_clear_pending_input (retsize: 0;)
	x29 = Mem0[sp:word64]
	sp = sp + 8
	x30 = Mem0[sp:word64]
	sp = sp + 16
	// succ:  l000000000049D730_thunk_rl_clear_signals
l000000000049D730_thunk_rl_clear_signals:
	call rl_clear_signals (retsize: 0;)
	return
	// succ:  rl_cleanup_after_signal_exit
rl_cleanup_after_signal_exit:


// rl_reset_after_signal
// Return size: 0
void rl_reset_after_signal()
rl_reset_after_signal_entry:
	// succ:  l000000000049D734
l000000000049D734:
	sp = fp
	sp = sp + -16
	Mem0[sp:word64] = x29
	sp = sp + 8
	Mem0[sp:word64] = x30
	x29 = x31 + 0x0000000000000000
	x0 = 0x00000000004DE000
	x1 = Mem0[x0 + 1368:word64]
	branch x1 == 0x0000000000000000 l000000000049D754
	// succ:  l000000000049D748 l000000000049D754
l000000000049D748:
	x0 = 0x00000000004E1000
	w0 = Mem0[x0 + 3320:word32]
	call x1 (retsize: 0;)
	// succ:  l000000000049D754
l000000000049D754:
	x29 = Mem0[sp:word64]
	sp = sp + 8
	x30 = Mem0[sp:word64]
	sp = sp + 16
	// succ:  l000000000049D758_thunk_rl_set_signals
l000000000049D758_thunk_rl_set_signals:
	call rl_set_signals (retsize: 0;)
	return
	// succ:  rl_reset_after_signal_exit
rl_reset_after_signal_exit:


// rl_free_line_state
// Return size: 0
void rl_free_line_state()
rl_free_line_state_entry:
	// succ:  l000000000049D75C
l000000000049D75C:
	sp = fp
	sp = sp + -16
	Mem0[sp:word64] = x29
	sp = sp + 8
	Mem0[sp:word64] = x30
	x29 = x31 + 0x0000000000000000
	call rl_free_undo_list (retsize: 0;)
	call current_history (retsize: 0;)
	branch x0 == 0x0000000000000000 l000000000049D774
	// succ:  l000000000049D770 l000000000049D774
l000000000049D770:
	Mem0[x0 + 16:word64] = 0x0000000000000000
	// succ:  l000000000049D774
l000000000049D774:
	call _rl_kill_kbd_macro (retsize: 0;)
	call rl_clear_message (retsize: 0;)
	x29 = Mem0[sp:word64]
	sp = sp + 8
	x30 = Mem0[sp:word64]
	sp = sp + 16
	// succ:  l000000000049D780_thunk__rl_reset_argument
l000000000049D780_thunk__rl_reset_argument:
	call _rl_reset_argument (retsize: 0;)
	return
	// succ:  rl_free_line_state_exit
rl_free_line_state_exit:


// _rl_block_sigint
// Return size: 0
void _rl_block_sigint()
_rl_block_sigint_entry:
	// succ:  l000000000049D784
l000000000049D784:
	sp = fp
	sp = sp + -64
	Mem0[sp:word64] = x29
	sp = sp + 8
	Mem0[sp:word64] = x30
	x29 = x31 + 0x0000000000000000
	v8 = sp + 16
	Mem0[v8:word64] = x19
	v8 = v8 + 8
	Mem0[v8:word64] = x20
	x19 = 0x00000000004E2000
	x19 = x19 + 0x0000000000000288
	w20 = Mem0[x19 + 1484:word32]
	Mem0[sp + 32:word64] = x21
	branch w20 != 0x00000000 l000000000049D7E4
	// succ:  l000000000049D7A4 l000000000049D7E4
l000000000049D7A4:
	x21 = x19 + 0x00000000000005D0
	x0 = x21
	sigemptyset(x0)
	sp = sp + 0xFFFFFFFFFFFFFFF8
	x2 = x19 + 0x0000000000000650
	x0 = x2
	Mem0[x29 + 48:word64] = x2
	sigemptyset(x0)
	sp = sp + 0xFFFFFFFFFFFFFFF8
	w1 = 0x00000002
	x0 = x21
	sigaddset(x0, x1)
	sp = sp + 0xFFFFFFFFFFFFFFF8
	x2 = Mem0[x29 + 48:word64]
	w0 = w20
	x1 = x21
	sigprocmask(x0, x1, x2)
	sp = sp + 0xFFFFFFFFFFFFFFF8
	w0 = 0x00000001
	Mem0[x19 + 1484:word32] = w0
	// succ:  l000000000049D7E4
l000000000049D7E4:
	v16 = sp + 16
	x19 = Mem0[v16:word64]
	v16 = v16 + 8
	x20 = Mem0[v16:word64]
	x21 = Mem0[sp + 32:word64]
	x29 = Mem0[sp:word64]
	sp = sp + 8
	x30 = Mem0[sp:word64]
	sp = sp + 64
	return
	// succ:  _rl_block_sigint_exit
_rl_block_sigint_exit:


// _rl_release_sigint
// Return size: 0
void _rl_release_sigint()
_rl_release_sigint_entry:
	// succ:  l000000000049D7F4
l000000000049D7F4:
	sp = fp
	sp = sp + -32
	Mem0[sp:word64] = x29
	sp = sp + 8
	Mem0[sp:word64] = x30
	x29 = x31 + 0x0000000000000000
	Mem0[sp + 16:word64] = x19
	x19 = 0x00000000004E2000
	x19 = x19 + 0x0000000000000288
	w0 = Mem0[x19 + 1484:word32]
	branch w0 == 0x00000000 l000000000049D824
	// succ:  l000000000049D810 l000000000049D824
l000000000049D810:
	w0 = 0x00000002
	x1 = x19 + 0x0000000000000650
	x2 = 0x0000000000000000
	sigprocmask(x0, x1, x2)
	sp = sp + 0xFFFFFFFFFFFFFFF8
	Mem0[x19 + 1484:word32] = 0x00000000
	// succ:  l000000000049D824
l000000000049D824:
	x19 = Mem0[sp + 16:word64]
	x29 = Mem0[sp:word64]
	sp = sp + 8
	x30 = Mem0[sp:word64]
	sp = sp + 32
	return
	// succ:  _rl_release_sigint_exit
_rl_release_sigint_exit:


// _rl_block_sigwinch
// Return size: 0
void _rl_block_sigwinch()
_rl_block_sigwinch_entry:
	// succ:  l000000000049D830
l000000000049D830:
	sp = fp
	sp = sp + -64
	Mem0[sp:word64] = x29
	sp = sp + 8
	Mem0[sp:word64] = x30
	x29 = x31 + 0x0000000000000000
	v8 = sp + 16
	Mem0[v8:word64] = x19
	v8 = v8 + 8
	Mem0[v8:word64] = x20
	x19 = 0x00000000004E2000
	x19 = x19 + 0x0000000000000288
	w20 = Mem0[x19 + 1744:word32]
	Mem0[sp + 32:word64] = x21
	branch w20 != 0x00000000 l000000000049D890
	// succ:  l000000000049D850 l000000000049D890
l000000000049D850:
	x21 = x19 + 0x00000000000006D8
	x0 = x21
	sigemptyset(x0)
	sp = sp + 0xFFFFFFFFFFFFFFF8
	x2 = x19 + 0x0000000000000758
	x0 = x2
	Mem0[x29 + 48:word64] = x2
	sigemptyset(x0)
	sp = sp + 0xFFFFFFFFFFFFFFF8
	w1 = 0x0000001C
	x0 = x21
	sigaddset(x0, x1)
	sp = sp + 0xFFFFFFFFFFFFFFF8
	x2 = Mem0[x29 + 48:word64]
	w0 = w20
	x1 = x21
	sigprocmask(x0, x1, x2)
	sp = sp + 0xFFFFFFFFFFFFFFF8
	w0 = 0x00000001
	Mem0[x19 + 1744:word32] = w0
	// succ:  l000000000049D890
l000000000049D890:
	v16 = sp + 16
	x19 = Mem0[v16:word64]
	v16 = v16 + 8
	x20 = Mem0[v16:word64]
	x21 = Mem0[sp + 32:word64]
	x29 = Mem0[sp:word64]
	sp = sp + 8
	x30 = Mem0[sp:word64]
	sp = sp + 64
	return
	// succ:  _rl_block_sigwinch_exit
_rl_block_sigwinch_exit:


// _rl_release_sigwinch
// Return size: 0
void _rl_release_sigwinch()
_rl_release_sigwinch_entry:
	// succ:  l000000000049D8A0
l000000000049D8A0:
	sp = fp
	sp = sp + -32
	Mem0[sp:word64] = x29
	sp = sp + 8
	Mem0[sp:word64] = x30
	x29 = x31 + 0x0000000000000000
	Mem0[sp + 16:word64] = x19
	x19 = 0x00000000004E2000
	x19 = x19 + 0x0000000000000288
	w0 = Mem0[x19 + 1744:word32]
	branch w0 == 0x00000000 l000000000049D8D0
	// succ:  l000000000049D8BC l000000000049D8D0
l000000000049D8BC:
	w0 = 0x00000002
	x1 = x19 + 0x0000000000000758
	x2 = 0x0000000000000000
	sigprocmask(x0, x1, x2)
	sp = sp + 0xFFFFFFFFFFFFFFF8
	Mem0[x19 + 1744:word32] = 0x00000000
	// succ:  l000000000049D8D0
l000000000049D8D0:
	x19 = Mem0[sp + 16:word64]
	x29 = Mem0[sp:word64]
	sp = sp + 8
	x30 = Mem0[sp:word64]
	sp = sp + 32
	return
	// succ:  _rl_release_sigwinch_exit
_rl_release_sigwinch_exit:


// rl_echo_signal_char
// Return size: 0
void rl_echo_signal_char()
rl_echo_signal_char_entry:
	// succ:  l000000000049D8DC
l000000000049D8DC:
	sp = fp
	sp = sp + -48
	Mem0[sp:word64] = x29
	sp = sp + 8
	Mem0[sp:word64] = x30
	x29 = x31 + 0x0000000000000000
	x1 = 0x00000000004E2000
	x1 = x1 + 0x0000000000000288
	w2 = Mem0[x1 + 2008:word32]
	v10 = sp + 16
	Mem0[v10:word64] = x19
	v10 = v10 + 8
	Mem0[v10:word64] = x20
	branch w2 == 0x00000000 l000000000049D904
	// succ:  l000000000049D8F8 l000000000049D904
l000000000049D8F8:
	x2 = 0x00000000004D9000
	w2 = Mem0[x2 + 1236:word32]
	branch w2 != 0x00000000 l000000000049D910
	// succ:  l000000000049D904 l000000000049D910
l000000000049D904:
	v12 = sp + 16
	x19 = Mem0[v12:word64]
	v12 = v12 + 8
	x20 = Mem0[v12:word64]
	x29 = Mem0[sp:word64]
	sp = sp + 8
	x30 = Mem0[sp:word64]
	sp = sp + 48
	return
	// succ:  rl_echo_signal_char_exit
l000000000049D910:
	w31 = w0 - 0x00000003
	NZCV = cond(w31)
	branch Test(EQ,Z) l000000000049D930
	// succ:  l000000000049D918 l000000000049D930
l000000000049D918:
	w31 = w0 - 0x00000014
	NZCV = cond(w31)
	branch Test(EQ,Z) l000000000049D994
	// succ:  l000000000049D920 l000000000049D994
l000000000049D920:
	w31 = w0 - 0x00000002
	NZCV = cond(w31)
	branch Test(NE,Z) l000000000049D904
	// succ:  l000000000049D928 l000000000049D904
l000000000049D928:
	w0 = Mem0[x1 + 2012:word32]
	goto l000000000049D934
	// succ:  l000000000049D934
l000000000049D930:
	w0 = Mem0[x1 + 2016:word32]
	// succ:  l000000000049D934
l000000000049D934:
	w31 = w0 - 0x0000001F
	NZCV = cond(w31)
	branch Test(GT,NZV) l000000000049D96C
	// succ:  l000000000049D93C l000000000049D96C
l000000000049D93C:
	branch (w0 & 0x00000080) == 0x00000000 l000000000049D974
	// succ:  l000000000049D940 l000000000049D974
l000000000049D940:
	w1 = w0 | 0x00000040
l000000000049D95C:
	Mem0[x29 + 33:byte] = (byte) w0
	Mem0[x29 + 34:byte] = 0x00
	w1 = 0x00000002
	goto l000000000049D980
	// succ:  l000000000049D980
l000000000049D96C:
	w31 = w0 - 0x0000007F
	NZCV = cond(w31)
	branch Test(EQ,Z) l000000000049D99C
	// succ:  l000000000049D974 l000000000049D99C
l000000000049D974:
	Mem0[x29 + 32:byte] = (byte) w0
	Mem0[x29 + 33:byte] = 0x00
	w1 = 0x00000001
	// succ:  l000000000049D980
l000000000049D980:
	x0 = x29 + 0x0000000000000020
	call _rl_output_some_chars (retsize: 0;)
	v20 = sp + 16
	x19 = Mem0[v20:word64]
	v20 = v20 + 8
	x20 = Mem0[v20:word64]
	x29 = Mem0[sp:word64]
	sp = sp + 8
	x30 = Mem0[sp:word64]
	sp = sp + 48
	return
	// succ:  rl_echo_signal_char_exit
l000000000049D994:
	w0 = Mem0[x1 + 2020:word32]
	goto l000000000049D934
	// succ:  l000000000049D934
l000000000049D99C:
	w0 = 0x0000005E
	Mem0[x29 + 32:byte] = (byte) w0
	w0 = 0x0000003F
	goto l000000000049D95C
	// succ:  l000000000049D95C
rl_echo_signal_char_exit:


// _rl_signal_handler
// Return size: 0
void _rl_signal_handler()
_rl_signal_handler_entry:
	goto l000000000049DA8C
	// succ:  l000000000049DA8C
l000000000049D9D8:
	sp = sp + -160
	Mem0[sp:word64] = x29
	sp = sp + 8
	Mem0[sp:word64] = x30
	x29 = x31 + 0x0000000000000000
	v9 = sp + 16
	Mem0[v9:word64] = x19
	v9 = v9 + 8
	Mem0[v9:word64] = x20
	x19 = 0x00000000004E1000
	w1 = Mem0[x19 + 3168:word32]
	w20 = w0
	w1 = w1 | 0x00008000
	w0 = w0 - 0x00000002
	Mem0[x19 + 3168:word32] = w1
	w31 = w0 - 0x00000014
	NZCV = cond(w31)
	branch Test(UGT,ZC) l000000000049DA78
	// succ:  l000000000049DA04 l000000000049DA78
l000000000049DA04:
	x2 = 0x00000000004C4000
	x2 = x2 + 0xFFFFFFFFFFFFFCDC
	v18 = Mem0[x2 + (uint64) ((uint32) w0):byte]
	w3 = (word32) v18
	x4 = 0x000000000049DA1C
	x3 = x4 + (int64) ((int8) w3)
l000000000049DA78:
	w1 = w1 & 0xFFFF7FFF
	Mem0[x19 + 3168:word32] = w1
	v21 = sp + 16
	x19 = Mem0[v21:word64]
	v21 = v21 + 8
	x20 = Mem0[v21:word64]
	x29 = Mem0[sp:word64]
	sp = sp + 8
	x30 = Mem0[sp:word64]
	sp = sp + 160
	return
	// succ:  _rl_signal_handler_exit
l000000000049DA8C:
	sp = fp
	x1 = 0x00000000004E2000
	x1 = x1 + 0x0000000000000288
	Mem0[x1 + 2024:word32] = 0x00000000
	goto l000000000049D9D8
	// succ:  l000000000049D9D8
_rl_signal_handler_exit:


// rl_alphabetic
// Return size: 0
void rl_alphabetic()
rl_alphabetic_entry:
	// succ:  l000000000049DACC
l000000000049DACC:
	sp = fp
	sp = sp + -32
	Mem0[sp:word64] = x29
	sp = sp + 8
	Mem0[sp:word64] = x30
	x29 = x31 + 0x0000000000000000
	NZCV = cond(w0 - (uint32) ((byte) w0))
	w1 = w0
	branch Test(EQ,Z) l000000000049DB10
	// succ:  l000000000049DAE0 l000000000049DB10
l000000000049DAE0:
	x0 = 0x00000000004E2000
	x0 = x0 + 0xFFFFFFFFFFFFFA78
	w2 = Mem0[x0:word32]
	w0 = 0x00000000
	branch w2 == 0x00000000 l000000000049DB08
	// succ:  l000000000049DAF4 l000000000049DB08
l000000000049DAF4:
	x0 = 0x00000000004C4000
	x0 = x0 + 0xFFFFFFFFFFFFFCF8
	strchr(x0, x1)
	sp = sp + 0xFFFFFFFFFFFFFFF8
	x31 = x0 - x31
	NZCV = cond(x31)
	w0 = (word32) Test(NE,Z)
	// succ:  l000000000049DB08
l000000000049DB08:
	x29 = Mem0[sp:word64]
	sp = sp + 8
	x30 = Mem0[sp:word64]
	sp = sp + 32
	return
	// succ:  rl_alphabetic_exit
l000000000049DB10:
	Mem0[x29 + 16:word64] = x1
	__ctype_b_loc()
	sp = sp + 0xFFFFFFFFFFFFFFF8
	x2 = Mem0[x0:word64]
	x1 = Mem0[x29 + 16:word64]
	w0 = 0x00000001
	v14 = Mem0[x2 + (int64) ((int32) w1):word16]
	w2 = (word32) v14
	branch (w2 & 0x00000008) == 0x00000000 l000000000049DAE0
	// succ:  l000000000049DB2C l000000000049DAE0
l000000000049DB2C:
	x29 = Mem0[sp:word64]
	sp = sp + 8
	x30 = Mem0[sp:word64]
	sp = sp + 32
	return
	// succ:  rl_alphabetic_exit
rl_alphabetic_exit:


// _rl_walphabetic
// Return size: 0
void _rl_walphabetic()
_rl_walphabetic_entry:
	// succ:  l000000000049DB34
l000000000049DB34:
	sp = fp
	sp = sp + -32
	Mem0[sp:word64] = x29
	sp = sp + 8
	Mem0[sp:word64] = x30
	x29 = x31 + 0x0000000000000000
	Mem0[sp + 16:word64] = x19
	w19 = w0
	call iswalnum (retsize: 0;)
	branch w0 != 0x00000000 l000000000049DB80
	// succ:  l000000000049DB4C l000000000049DB80
l000000000049DB4C:
	x1 = 0x00000000004E2000
	x1 = x1 + 0xFFFFFFFFFFFFFA78
	w1 = Mem0[x1:word32]
	branch w1 == 0x00000000 l000000000049DB74
	// succ:  l000000000049DB5C l000000000049DB74
l000000000049DB5C:
	x0 = 0x00000000004C4000
	x0 = x0 + 0xFFFFFFFFFFFFFCF8
	w1 = w19 & 0x0000007F
	strchr(x0, x1)
	sp = sp + 0xFFFFFFFFFFFFFFF8
	x31 = x0 - x31
	NZCV = cond(x31)
	w0 = (word32) Test(NE,Z)
	// succ:  l000000000049DB74
l000000000049DB74:
	x19 = Mem0[sp + 16:word64]
	x29 = Mem0[sp:word64]
	sp = sp + 8
	x30 = Mem0[sp:word64]
	sp = sp + 32
	return
	// succ:  _rl_walphabetic_exit
l000000000049DB80:
	w0 = 0x00000001
	x19 = Mem0[sp + 16:word64]
	x29 = Mem0[sp:word64]
	sp = sp + 8
	x30 = Mem0[sp:word64]
	sp = sp + 32
	return
	// succ:  _rl_walphabetic_exit
_rl_walphabetic_exit:


// _rl_abort_internal
// Return size: 0
void _rl_abort_internal()
_rl_abort_internal_entry:
	// succ:  l000000000049DB90
l000000000049DB90:
	sp = fp
	sp = sp + -32
	Mem0[sp:word64] = x29
	sp = sp + 8
	Mem0[sp:word64] = x30
	x29 = x31 + 0x0000000000000000
	Mem0[sp + 16:word64] = x19
	call rl_ding (retsize: 0;)
	call rl_clear_message (retsize: 0;)
	call _rl_reset_argument (retsize: 0;)
	call rl_clear_pending_input (retsize: 0;)
	x0 = 0x00000000004E1000
	w1 = Mem0[x0 + 3168:word32]
	x19 = 0x00000000004E2000
	w2 = w1 & 0xFFFFEFFF
	x1 = Mem0[x19 + 2760:word64]
	Mem0[x0 + 3168:word32] = w2
	branch x1 == 0x0000000000000000 l000000000049DBD4
	// succ:  l000000000049DBC8 l000000000049DBD4
l000000000049DBC8:
	call _rl_pop_executing_macro (retsize: 0;)
	x0 = Mem0[x19 + 2760:word64]
	branch x0 != 0x0000000000000000 l000000000049DBC8
	// succ:  l000000000049DBD4 l000000000049DBC8
l000000000049DBD4:
	x0 = 0x00000000004E3000
	x2 = 0x00000000004E1000
	x0 = x0 + 0xFFFFFFFFFFFFFF40
	w1 = 0x00000001
	Mem0[x2 + 3248:word64] = 0x0000000000000000
	call __longjmp_chk (retsize: 0;)
	// succ:  l000000000049DBE8_thunk_rl_abort
l000000000049DBE8_thunk_rl_abort:
	call rl_abort (retsize: 0;)
	return
	// succ:  _rl_abort_internal_exit
_rl_abort_internal_exit:


// rl_abort
// Return size: 0
void rl_abort()
rl_abort_entry:
	// succ:  l000000000049DBEC
l000000000049DBEC:
	sp = fp
	sp = sp + -16
	Mem0[sp:word64] = x29
	sp = sp + 8
	Mem0[sp:word64] = x30
	x29 = x31 + 0x0000000000000000
	call _rl_abort_internal (retsize: 0;)
	// succ:  l000000000049DBF4_thunk__rl_null_function
l000000000049DBF4_thunk__rl_null_function:
	call _rl_null_function (retsize: 0;)
	return
	// succ:  rl_abort_exit
rl_abort_exit:


// _rl_null_function
// Return size: 0
void _rl_null_function()
_rl_null_function_entry:
	// succ:  l000000000049DBF8
l000000000049DBF8:
	sp = fp
	w0 = 0x00000000
	return
	// succ:  _rl_null_function_exit
_rl_null_function_exit:


// rl_tty_status
// Return size: 0
void rl_tty_status()
rl_tty_status_entry:
	// succ:  l000000000049DC00
l000000000049DC00:
	sp = fp
	sp = sp + -16
	Mem0[sp:word64] = x29
	sp = sp + 8
	Mem0[sp:word64] = x30
	x29 = x31 + 0x0000000000000000
	call rl_ding (retsize: 0;)
	w0 = 0x00000000
	x29 = Mem0[sp:word64]
	sp = sp + 8
	x30 = Mem0[sp:word64]
	sp = sp + 16
	return
	// succ:  rl_tty_status_exit
rl_tty_status_exit:


// rl_copy_text
// Return size: 0
void rl_copy_text()
rl_copy_text_entry:
	// succ:  l000000000049DC18
l000000000049DC18:
	sp = fp
	sp = sp + -48
	Mem0[sp:word64] = x29
	sp = sp + 8
	Mem0[sp:word64] = x30
	x29 = x31 + 0x0000000000000000
	v8 = sp + 16
	Mem0[v8:word64] = x19
	v8 = v8 + 8
	Mem0[v8:word64] = x20
	Mem0[sp + 32:word64] = x21
	NZCV = cond(w0 - w1)
	w19 = w0
	branch Test(LE,ZCV) l000000000049DC3C
	// succ:  l000000000049DC34 l000000000049DC3C
l000000000049DC34:
	w19 = w1
	w1 = w0
	// succ:  l000000000049DC3C
l000000000049DC3C:
	w20 = w1 - w19
	w0 = w20 + 0x00000001
rl_copy_text_exit:


// rl_extend_line_buffer
// Return size: 0
void rl_extend_line_buffer()
rl_extend_line_buffer_entry:
	// succ:  l000000000049DC80
l000000000049DC80:
	sp = fp
	sp = sp + -48
	Mem0[sp:word64] = x29
	sp = sp + 8
	Mem0[sp:word64] = x30
	x29 = x31 + 0x0000000000000000
	v8 = sp + 16
	Mem0[v8:word64] = x19
	v8 = v8 + 8
	Mem0[v8:word64] = x20
	x19 = 0x00000000004E1000
	w1 = Mem0[x19 + 3296:word32]
	Mem0[sp + 32:word64] = x21
	NZCV = cond(w0 - w1)
	w20 = w0
	branch Test(LT,NV) l000000000049DCD0
	// succ:  l000000000049DCA4 l000000000049DCD0
l000000000049DCA4:
	x21 = 0x00000000004E1000
	x0 = Mem0[x21 + 3256:word64]
	x19 = x19 + 0xFFFFFFFFFFFFFCE0
	w2 = w1 + 0x00000100
l000000000049DCD0:
	v17 = sp + 16
	x19 = Mem0[v17:word64]
	v17 = v17 + 8
	x20 = Mem0[v17:word64]
	x21 = Mem0[sp + 32:word64]
	x29 = Mem0[sp:word64]
	sp = sp + 8
	x30 = Mem0[sp:word64]
	sp = sp + 48
	// succ:  l000000000049DCDC_thunk__rl_set_the_line
l000000000049DCDC_thunk__rl_set_the_line:
	call _rl_set_the_line (retsize: 0;)
	return
	// succ:  rl_extend_line_buffer_exit
rl_extend_line_buffer_exit:


// rl_tilde_expand
// Return size: 0
void rl_tilde_expand()
rl_tilde_expand_entry:
	// succ:  l000000000049DCE0
l000000000049DCE0:
	sp = fp
	sp = sp + -80
	Mem0[sp:word64] = x29
	sp = sp + 8
	Mem0[sp:word64] = x30
	x29 = x31 + 0x0000000000000000
	x0 = 0x00000000004E4000
	w2 = Mem0[x0 + 136:word32]
	x0 = 0x00000000004E3000
	w5 = Mem0[x0 + 3900:word32]
	v11 = sp + 16
	Mem0[v11:word64] = x19
	v11 = v11 + 8
	Mem0[v11:word64] = x20
	v14 = sp + 32
	Mem0[v14:word64] = x21
	v14 = v14 + 8
	Mem0[v14:word64] = x22
	v17 = sp + 48
	Mem0[v17:word64] = x23
	v17 = v17 + 8
	Mem0[v17:word64] = x24
	x22 = 0x00000000004E1000
	NZCV = cond(w2 - w5)
	w19 = w2 - 0x00000001
	x0 = Mem0[x22 + 3256:word64]
	branch Test(EQ,Z) l000000000049DDD0
	// succ:  l000000000049DD18 l000000000049DDD0
l000000000049DD18:
l000000000049DDB8:
	w0 = 0x00000000
	v26 = sp + 16
	x19 = Mem0[v26:word64]
	v26 = v26 + 8
	x20 = Mem0[v26:word64]
	v27 = sp + 32
	x21 = Mem0[v27:word64]
	v27 = v27 + 8
	x22 = Mem0[v27:word64]
	v28 = sp + 48
	x23 = Mem0[v28:word64]
	v28 = v28 + 8
	x24 = Mem0[v28:word64]
	x29 = Mem0[sp:word64]
	sp = sp + 8
	x30 = Mem0[sp:word64]
	sp = sp + 80
	return
	// succ:  rl_tilde_expand_exit
l000000000049DDD0:
	v22 = Mem0[x0 + (int64) ((int32) w2):byte]
	w1 = (word32) v22
	w31 = w1 - 0x0000007E
	NZCV = cond(w31)
	branch Test(NE,Z) l000000000049DD18
	// succ:  l000000000049DDDC l000000000049DD18
l000000000049DDDC:
	x0 = 0x00000000004AE000
	x0 = x0 + 0xFFFFFFFFFFFFFA18
	Mem0[x29 + 64:word64] = x2
	call tilde_expand (retsize: 0;)
	x2 = Mem0[x29 + 64:word64]
	w1 = w19
	x20 = x0
	call _rl_replace_text (retsize: 0;)
	x0 = x20
	call xfree (retsize: 0;)
	goto l000000000049DDB8
	// succ:  l000000000049DDB8
rl_tilde_expand_exit:


// _rl_ttymsg
// Return size: 0
void _rl_ttymsg()
_rl_ttymsg_entry:
	// succ:  l000000000049DE7C
l000000000049DE7C:
	sp = fp
	sp = sp + -320
	Mem0[sp:word64] = x29
	sp = sp + 8
	Mem0[sp:word64] = x30
	x29 = x31 + 0x0000000000000000
	Mem0[x29 + 288:word64] = x4
	x4 = x29 + 0x0000000000000140
	v9 = sp + 16
	Mem0[v9:word64] = x19
	v9 = v9 + 8
	Mem0[v9:word64] = x20
	Mem0[x29 + 64:word64] = x4
	x19 = 0x00000000004DE000
	Mem0[x29 + 72:word64] = x4
	x4 = x29 + 0x0000000000000100
	Mem0[x29 + 280:word64] = x3
	x20 = x0
	x3 = Mem0[x19 + 1640:word64]
	Mem0[x29 + 80:word64] = x4
	x0 = 0x00000000004C4000
	w4 = 0xFFFFFFC8
	Mem0[x29 + 264:word64] = x1
	Mem0[x29 + 272:word64] = x2
	Mem0[x29 + 88:word32] = w4
	x1 = 0x0000000000000001
	w4 = 0xFFFFFF80
	x2 = 0x000000000000000A
	x0 = x0 + 0xFFFFFFFFFFFFFD08
	Mem0[x29 + 128:word128] = q0
	Mem0[x29 + 144:word128] = q1
	Mem0[x29 + 160:word128] = q2
	Mem0[x29 + 176:word128] = q3
	Mem0[x29 + 192:word128] = q4
	Mem0[x29 + 208:word128] = q5
	Mem0[x29 + 224:word128] = q6
	Mem0[x29 + 240:word128] = q7
	Mem0[x29 + 296:word64] = x5
	Mem0[x29 + 304:word64] = x6
	Mem0[x29 + 312:word64] = x7
	Mem0[x29 + 92:word32] = w4
	fwrite(x0, x1, x2, x3)
	sp = sp + 0xFFFFFFFFFFFFFFF8
	v26 = x29 + 64
	x4 = Mem0[v26:word64]
	v26 = v26 + 8
	x5 = Mem0[v26:word64]
	v27 = x29 + 80
	x6 = Mem0[v27:word64]
	v27 = v27 + 8
	x7 = Mem0[v27:word64]
	x0 = Mem0[x19 + 1640:word64]
	x2 = x20
	x3 = x29 + 0x0000000000000060
	w1 = 0x00000001
	v29 = x29 + 32
	Mem0[v29:word64] = x4
	v29 = v29 + 8
	Mem0[v29:word64] = x5
	v30 = x29 + 48
	Mem0[v30:word64] = x6
	v30 = v30 + 8
	Mem0[v30:word64] = x7
	v31 = x29 + 96
	Mem0[v31:word64] = x4
	v31 = v31 + 8
	Mem0[v31:word64] = x5
	v32 = x29 + 112
	Mem0[v32:word64] = x6
	v32 = v32 + 8
	Mem0[v32:word64] = x7
	__vfprintf_chk(x0, x1, x2, x3)
	sp = sp + 0xFFFFFFFFFFFFFFF8
	x1 = Mem0[x19 + 1640:word64]
	w0 = 0x0000000A
	fputc(x0, x1)
	sp = sp + 0xFFFFFFFFFFFFFFF8
	x0 = Mem0[x19 + 1640:word64]
	fflush(x0)
	sp = sp + 0xFFFFFFFFFFFFFFF8
	call rl_forced_update_display (retsize: 0;)
	v34 = sp + 16
	x19 = Mem0[v34:word64]
	v34 = v34 + 8
	x20 = Mem0[v34:word64]
	x29 = Mem0[sp:word64]
	sp = sp + 8
	x30 = Mem0[sp:word64]
	sp = sp + 320
	return
	// succ:  _rl_ttymsg_exit
_rl_ttymsg_exit:


// _rl_errmsg
// Return size: 0
void _rl_errmsg()
_rl_errmsg_entry:
	// succ:  l000000000049DF58
l000000000049DF58:
	sp = fp
	sp = sp + -320
	Mem0[sp:word64] = x29
	sp = sp + 8
	Mem0[sp:word64] = x30
	x29 = x31 + 0x0000000000000000
	Mem0[x29 + 288:word64] = x4
	x4 = x29 + 0x0000000000000140
	v9 = sp + 16
	Mem0[v9:word64] = x19
	v9 = v9 + 8
	Mem0[v9:word64] = x20
	Mem0[x29 + 64:word64] = x4
	x19 = 0x00000000004DE000
	Mem0[x29 + 72:word64] = x4
	x4 = x29 + 0x0000000000000100
	Mem0[x29 + 280:word64] = x3
	x20 = x0
	x3 = Mem0[x19 + 1640:word64]
	Mem0[x29 + 80:word64] = x4
	x0 = 0x00000000004C4000
	w4 = 0xFFFFFFC8
	Mem0[x29 + 264:word64] = x1
	Mem0[x29 + 272:word64] = x2
	Mem0[x29 + 88:word32] = w4
	x1 = 0x0000000000000001
	w4 = 0xFFFFFF80
	x2 = 0x000000000000000A
	x0 = x0 + 0xFFFFFFFFFFFFFD08
	Mem0[x29 + 128:word128] = q0
	Mem0[x29 + 144:word128] = q1
	Mem0[x29 + 160:word128] = q2
	Mem0[x29 + 176:word128] = q3
	Mem0[x29 + 192:word128] = q4
	Mem0[x29 + 208:word128] = q5
	Mem0[x29 + 224:word128] = q6
	Mem0[x29 + 240:word128] = q7
	Mem0[x29 + 296:word64] = x5
	Mem0[x29 + 304:word64] = x6
	Mem0[x29 + 312:word64] = x7
	Mem0[x29 + 92:word32] = w4
	fwrite(x0, x1, x2, x3)
	sp = sp + 0xFFFFFFFFFFFFFFF8
	v26 = x29 + 64
	x4 = Mem0[v26:word64]
	v26 = v26 + 8
	x5 = Mem0[v26:word64]
	v27 = x29 + 80
	x6 = Mem0[v27:word64]
	v27 = v27 + 8
	x7 = Mem0[v27:word64]
	x0 = Mem0[x19 + 1640:word64]
	x2 = x20
	x3 = x29 + 0x0000000000000060
	w1 = 0x00000001
	v29 = x29 + 32
	Mem0[v29:word64] = x4
	v29 = v29 + 8
	Mem0[v29:word64] = x5
	v30 = x29 + 48
	Mem0[v30:word64] = x6
	v30 = v30 + 8
	Mem0[v30:word64] = x7
	v31 = x29 + 96
	Mem0[v31:word64] = x4
	v31 = v31 + 8
	Mem0[v31:word64] = x5
	v32 = x29 + 112
	Mem0[v32:word64] = x6
	v32 = v32 + 8
	Mem0[v32:word64] = x7
	__vfprintf_chk(x0, x1, x2, x3)
	sp = sp + 0xFFFFFFFFFFFFFFF8
	x1 = Mem0[x19 + 1640:word64]
	w0 = 0x0000000A
	fputc(x0, x1)
	sp = sp + 0xFFFFFFFFFFFFFFF8
	x0 = Mem0[x19 + 1640:word64]
	fflush(x0)
	sp = sp + 0xFFFFFFFFFFFFFFF8
	v34 = sp + 16
	x19 = Mem0[v34:word64]
	v34 = v34 + 8
	x20 = Mem0[v34:word64]
	x29 = Mem0[sp:word64]
	sp = sp + 8
	x30 = Mem0[sp:word64]
	sp = sp + 320
	return
	// succ:  _rl_errmsg_exit
_rl_errmsg_exit:


// _rl_strindex
// Return size: 0
void _rl_strindex()
_rl_strindex_entry:
	// succ:  l000000000049E030
l000000000049E030:
	sp = fp
	sp = sp + -64
	Mem0[sp:word64] = x29
	sp = sp + 8
	Mem0[sp:word64] = x30
	x29 = x31 + 0x0000000000000000
	v8 = sp + 16
	Mem0[v8:word64] = x19
	v8 = v8 + 8
	Mem0[v8:word64] = x20
	x19 = x0
	x0 = x1
	v13 = sp + 32
	Mem0[v13:word64] = x21
	v13 = v13 + 8
	Mem0[v13:word64] = x22
	x20 = x1
	Mem0[sp + 48:word64] = x23
	strlen(x0)
	sp = sp + 0xFFFFFFFFFFFFFFF8
	x21 = x0
	x0 = x19
	strlen(x0)
	sp = sp + 0xFFFFFFFFFFFFFFF8
	NZCV = cond(w21 - w0)
	w22 = w21
	branch Test(GT,NZV) l000000000049E0B4
	// succ:  l000000000049E06C l000000000049E0B4
l000000000049E06C:
l000000000049E0B4:
	x0 = 0x0000000000000000
	v20 = sp + 16
	x19 = Mem0[v20:word64]
	v20 = v20 + 8
	x20 = Mem0[v20:word64]
	v21 = sp + 32
	x21 = Mem0[v21:word64]
	v21 = v21 + 8
	x22 = Mem0[v21:word64]
	x23 = Mem0[sp + 48:word64]
	x29 = Mem0[sp:word64]
	sp = sp + 8
	x30 = Mem0[sp:word64]
	sp = sp + 64
	return
	// succ:  _rl_strindex_exit
_rl_strindex_exit:


// _rl_qsort_string_compare
// Return size: 0
void _rl_qsort_string_compare()
_rl_qsort_string_compare_entry:
	// succ:  l000000000049E0CC
l000000000049E0CC:
	sp = fp
	x0 = Mem0[x0:word64]
	x1 = Mem0[x1:word64]
	strcoll(x0, x1)
	return
	// succ:  _rl_qsort_string_compare_exit
_rl_qsort_string_compare_exit:


// _rl_digit_p
// Return size: 0
void _rl_digit_p()
_rl_digit_p_entry:
	// succ:  l000000000049E0D8
l000000000049E0D8:
	sp = fp
	w0 = w0 - 0x00000030
	w31 = w0 - 0x00000009
	NZCV = cond(w31)
	w0 = (word32) Test(ULE,ZC)
	return
	// succ:  _rl_digit_p_exit
_rl_digit_p_exit:


// _rl_digit_value
// Return size: 0
void _rl_digit_value()
_rl_digit_value_entry:
	// succ:  l000000000049E0E8
l000000000049E0E8:
	sp = fp
	w0 = w0 - 0x00000030
	return
	// succ:  _rl_digit_value_exit
_rl_digit_value_exit:


// _rl_lowercase_p
// Return size: 0
void _rl_lowercase_p()
_rl_lowercase_p_entry:
	// succ:  l000000000049E0F0
l000000000049E0F0:
	sp = fp
	sp = sp + -32
	Mem0[sp:word64] = x29
	sp = sp + 8
	Mem0[sp:word64] = x30
	x29 = x31 + 0x0000000000000000
	Mem0[sp + 16:word64] = x19
	NZCV = cond(w0 - (uint32) ((byte) w0))
_rl_lowercase_p_exit:


// _rl_pure_alphabetic
// Return size: 0
void _rl_pure_alphabetic()
_rl_pure_alphabetic_entry:
	// succ:  l000000000049E134
l000000000049E134:
	sp = fp
	sp = sp + -32
	Mem0[sp:word64] = x29
	sp = sp + 8
	Mem0[sp:word64] = x30
	x29 = x31 + 0x0000000000000000
	Mem0[sp + 16:word64] = x19
	NZCV = cond(w0 - (uint32) ((byte) w0))
_rl_pure_alphabetic_exit:


// _rl_to_lower
// Return size: 0
void _rl_to_lower()
_rl_to_lower_entry:
	// succ:  l000000000049E178
l000000000049E178:
	sp = fp
	sp = sp + -32
	Mem0[sp:word64] = x29
	sp = sp + 8
	Mem0[sp:word64] = x30
	x29 = x31 + 0x0000000000000000
	v8 = sp + 16
	Mem0[v8:word64] = x19
	v8 = v8 + 8
	Mem0[v8:word64] = x20
	NZCV = cond(w0 - (uint32) ((byte) w0))
	w19 = w0
	branch Test(EQ,Z) l000000000049E1A0
	// succ:  l000000000049E190 l000000000049E1A0
l000000000049E190:
	w0 = w19
	v13 = sp + 16
	x19 = Mem0[v13:word64]
	v13 = v13 + 8
	x20 = Mem0[v13:word64]
	x29 = Mem0[sp:word64]
	sp = sp + 8
	x30 = Mem0[sp:word64]
	sp = sp + 32
	return
	// succ:  _rl_to_lower_exit
l000000000049E1A0:
	__ctype_b_loc()
	sp = sp + 0xFFFFFFFFFFFFFFF8
	x0 = Mem0[x0:word64]
_rl_to_lower_exit:


// _rl_to_upper
// Return size: 0
void _rl_to_upper()
_rl_to_upper_entry:
	// succ:  l000000000049E1D0
l000000000049E1D0:
	sp = fp
	sp = sp + -32
	Mem0[sp:word64] = x29
	sp = sp + 8
	Mem0[sp:word64] = x30
	x29 = x31 + 0x0000000000000000
	v8 = sp + 16
	Mem0[v8:word64] = x19
	v8 = v8 + 8
	Mem0[v8:word64] = x20
	NZCV = cond(w0 - (uint32) ((byte) w0))
	w19 = w0
	branch Test(EQ,Z) l000000000049E1F8
	// succ:  l000000000049E1E8 l000000000049E1F8
l000000000049E1E8:
	w0 = w19
	v13 = sp + 16
	x19 = Mem0[v13:word64]
	v13 = v13 + 8
	x20 = Mem0[v13:word64]
	x29 = Mem0[sp:word64]
	sp = sp + 8
	x30 = Mem0[sp:word64]
	sp = sp + 32
	return
	// succ:  _rl_to_upper_exit
l000000000049E1F8:
	__ctype_b_loc()
	sp = sp + 0xFFFFFFFFFFFFFFF8
	x0 = Mem0[x0:word64]
_rl_to_upper_exit:


// _rl_uppercase_p
// Return size: 0
void _rl_uppercase_p()
_rl_uppercase_p_entry:
	// succ:  l000000000049E228
l000000000049E228:
	sp = fp
	sp = sp + -32
	Mem0[sp:word64] = x29
	sp = sp + 8
	Mem0[sp:word64] = x30
	x29 = x31 + 0x0000000000000000
	Mem0[sp + 16:word64] = x19
	NZCV = cond(w0 - (uint32) ((byte) w0))
_rl_uppercase_p_exit:


// rl_free
// Return size: 0
void rl_free()
rl_free_entry:
	// succ:  l000000000049E26C
l000000000049E26C:
	sp = fp
	branch x0 == 0x0000000000000000 l000000000049E274
	// succ:  l000000000049E270 l000000000049E274
l000000000049E270:
	// succ:  l000000000049E270_thunk_free
l000000000049E270_thunk_free:
	call free (retsize: 0;)
	return
	// succ:  rl_free_exit
l000000000049E274:
	return
	// succ:  rl_free_exit
rl_free_exit:


// _rl_savestring
// Return size: 0
void _rl_savestring()
_rl_savestring_entry:
	// succ:  l000000000049E278
l000000000049E278:
	sp = fp
	sp = sp + -32
	Mem0[sp:word64] = x29
	sp = sp + 8
	Mem0[sp:word64] = x30
	x29 = x31 + 0x0000000000000000
	Mem0[x29 + 16:word64] = x0
	strlen(x0)
	sp = sp + 0xFFFFFFFFFFFFFFF8
	w0 = w0 + 0x00000001
_rl_savestring_exit:


// _rl_tropen
// Return size: 0
void _rl_tropen()
_rl_tropen_entry:
	// succ:  l000000000049E2A0
l000000000049E2A0:
	sp = fp
	sp = sp + -160
	Mem0[sp:word64] = x29
	sp = sp + 8
	Mem0[sp:word64] = x30
	x29 = x31 + 0x0000000000000000
	Mem0[sp + 16:word64] = x19
	x19 = 0x00000000004E2000
	x0 = x19 + 0xFFFFFFFFFFFFFA78
	x0 = Mem0[x0 + 8:word64]
	branch x0 == 0x0000000000000000 l000000000049E2C0
	// succ:  l000000000049E2BC l000000000049E2C0
l000000000049E2BC:
	fclose(x0)
	sp = sp + 0xFFFFFFFFFFFFFFF8
	// succ:  l000000000049E2C0
l000000000049E2C0:
	call getpid (retsize: 0;)
	x3 = 0x00000000004C4000
	w4 = w0
	x2 = 0x0000000000000080
	x3 = x3 + 0xFFFFFFFFFFFFFD18
	w1 = 0x00000001
	x0 = x29 + 0x0000000000000020
	__sprintf_chk(x0, x1, x2, x3, Mem0[sp:<unknown>])
	sp = sp + 0xFFFFFFFFFFFFFFF8
	x0 = x29 + 0x0000000000000020
	unlink(x0)
	sp = sp + 0xFFFFFFFFFFFFFFF8
	x1 = 0x00000000004C2000
	x0 = x29 + 0x0000000000000020
	x1 = x1 + 0xFFFFFFFFFFFFF8B0
	fopen(x0, x1)
	sp = sp + 0xFFFFFFFFFFFFFFF8
	x19 = x19 + 0xFFFFFFFFFFFFFA78
	x31 = x0 - x31
	NZCV = cond(x31)
	Mem0[x19 + 8:word64] = x0
	w0 = (word32) Test(NE,Z)
	x19 = Mem0[sp + 16:word64]
	x29 = Mem0[sp:word64]
	sp = sp + 8
	x30 = Mem0[sp:word64]
	sp = sp + 160
	return
	// succ:  _rl_tropen_exit
_rl_tropen_exit:


// _rl_trace
// Return size: 0
void _rl_trace()
_rl_trace_entry:
	// succ:  l000000000049E314
l000000000049E314:
	sp = fp
	sp = sp + -336
	Mem0[sp:word64] = x29
	sp = sp + 8
	Mem0[sp:word64] = x30
	x29 = x31 + 0x0000000000000000
	v8 = sp + 16
	Mem0[v8:word64] = x19
	v8 = v8 + 8
	Mem0[v8:word64] = x20
	x19 = 0x00000000004E2000
	Mem0[x29 + 280:word64] = x1
	Mem0[x29 + 288:word64] = x2
	x1 = x29 + 0x0000000000000100
	x20 = x19 + 0xFFFFFFFFFFFFFA78
	Mem0[x29 + 296:word64] = x3
	Mem0[x29 + 304:word64] = x4
	Mem0[x29 + 312:word64] = x5
	Mem0[x29 + 320:word64] = x6
	Mem0[x29 + 328:word64] = x7
	Mem0[x29 + 144:word128] = q0
	Mem0[x29 + 160:word128] = q1
	Mem0[x29 + 176:word128] = q2
	Mem0[x29 + 192:word128] = q3
	Mem0[x29 + 208:word128] = q4
	Mem0[x29 + 224:word128] = q5
	Mem0[x29 + 240:word128] = q6
	x8 = Mem0[x20 + 8:word64]
	Mem0[x1:word128] = q7
	x1 = x29 + 0x0000000000000150
	Mem0[x29 + 64:word64] = x1
	Mem0[x29 + 72:word64] = x1
	x1 = x29 + 0x0000000000000110
	Mem0[x29 + 80:word64] = x1
	w1 = 0xFFFFFFC8
	Mem0[x29 + 88:word32] = w1
	w1 = 0xFFFFFF80
	Mem0[x29 + 92:word32] = w1
	x2 = x0
	branch x8 == 0x0000000000000000 l000000000049E3E4
	// succ:  l000000000049E398 l000000000049E3E4
l000000000049E398:
	v27 = x29 + 64
	x4 = Mem0[v27:word64]
	v27 = v27 + 8
	x5 = Mem0[v27:word64]
	v28 = x29 + 80
	x6 = Mem0[v28:word64]
	v28 = v28 + 8
	x7 = Mem0[v28:word64]
	x3 = x29 + 0x0000000000000060
	x0 = x8
	w1 = 0x00000001
	v29 = x29 + 32
	Mem0[v29:word64] = x4
	v29 = v29 + 8
	Mem0[v29:word64] = x5
	v30 = x29 + 48
	Mem0[v30:word64] = x6
	v30 = v30 + 8
	Mem0[v30:word64] = x7
	v31 = x29 + 96
	Mem0[v31:word64] = x4
	v31 = v31 + 8
	Mem0[v31:word64] = x5
	v32 = x29 + 112
	Mem0[v32:word64] = x6
	v32 = v32 + 8
	Mem0[v32:word64] = x7
	x19 = x19 + 0xFFFFFFFFFFFFFA78
	__vfprintf_chk(x0, x1, x2, x3)
	sp = sp + 0xFFFFFFFFFFFFFFF8
	x1 = Mem0[x19 + 8:word64]
	w0 = 0x0000000A
	fputc(x0, x1)
	sp = sp + 0xFFFFFFFFFFFFFFF8
	x0 = Mem0[x19 + 8:word64]
	fflush(x0)
	sp = sp + 0xFFFFFFFFFFFFFFF8
	v34 = sp + 16
	x19 = Mem0[v34:word64]
	v34 = v34 + 8
	x20 = Mem0[v34:word64]
	x29 = Mem0[sp:word64]
	sp = sp + 8
	x30 = Mem0[sp:word64]
	sp = sp + 336
	return
	// succ:  _rl_trace_exit
l000000000049E3E4:
	Mem0[x29 + 128:word64] = x0
	call _rl_tropen (retsize: 0;)
	x8 = Mem0[x20 + 8:word64]
	x2 = Mem0[x29 + 128:word64]
	goto l000000000049E398
	// succ:  l000000000049E398
_rl_trace_exit:


// _rl_trclose
// Return size: 0
void _rl_trclose()
_rl_trclose_entry:
	// succ:  l000000000049E3F8
l000000000049E3F8:
	sp = fp
	sp = sp + -32
	Mem0[sp:word64] = x29
	sp = sp + 8
	Mem0[sp:word64] = x30
	x29 = x31 + 0x0000000000000000
	Mem0[sp + 16:word64] = x19
	x19 = 0x00000000004E2000
	x19 = x19 + 0xFFFFFFFFFFFFFA78
	x0 = Mem0[x19 + 8:word64]
	fclose(x0)
	sp = sp + 0xFFFFFFFFFFFFFFF8
	Mem0[x19 + 8:word64] = 0x0000000000000000
	x19 = Mem0[sp + 16:word64]
	x29 = Mem0[sp:word64]
	sp = sp + 8
	x30 = Mem0[sp:word64]
	sp = sp + 32
	return
	// succ:  _rl_trclose_exit
_rl_trclose_exit:


// fn000000000049E424
// Return size: 0
void fn000000000049E424()
fn000000000049E424_entry:
	// succ:  l000000000049E424
l000000000049E424:
	sp = fp
	sp = sp + -80
	Mem0[sp:word64] = x29
	sp = sp + 8
	Mem0[sp:word64] = x30
	x29 = x31 + 0x0000000000000000
	v8 = sp + 32
	Mem0[v8:word64] = x21
	v8 = v8 + 8
	Mem0[v8:word64] = x22
	x21 = 0x00000000004E1000
	w2 = Mem0[x21 + 3288:word32]
	v12 = sp + 16
	Mem0[v12:word64] = x19
	v12 = v12 + 8
	Mem0[v12:word64] = x20
	v15 = sp + 48
	Mem0[v15:word64] = x23
	v15 = v15 + 8
	Mem0[v15:word64] = x24
	v18 = sp + 64
	Mem0[v18:word64] = x25
	v18 = v18 + 8
	Mem0[v18:word64] = x26
	x23 = x0
	w25 = w1
	x19 = 0x00000000004E2000
	branch w2 != 0x00000000 l000000000049E4C4
	// succ:  l000000000049E454 l000000000049E4C4
l000000000049E454:
	x22 = x19 + 0xFFFFFFFFFFFFFA88
	x24 = Mem0[x22:word64]
	branch x24 == 0x0000000000000000 l000000000049E59C
	// succ:  l000000000049E460 l000000000049E59C
l000000000049E460:
	w20 = Mem0[x22 + 8:word32]
	w31 = w20 - 0x0000000A
	NZCV = cond(w31)
	branch Test(EQ,Z) l000000000049E554
	// succ:  l000000000049E46C l000000000049E554
l000000000049E46C:
	w2 = w20 + 0x00000001
l000000000049E48C:
	x2 = x0 + x3
	Mem0[x0 + x3:word64] = 0x0000000000000000
	// succ:  l000000000049E494
l000000000049E494:
	w0 = Mem0[x21 + 3288:word32]
	branch w0 != 0x00000000 l000000000049E4D0
	// succ:  l000000000049E49C l000000000049E4D0
l000000000049E49C:
	Mem0[x2:word64] = x23
	x19 = x19 + 0xFFFFFFFFFFFFFA88
	Mem0[x19 + 12:word32] = w20
	w0 = 0x00000000
	v28 = sp + 16
	x19 = Mem0[v28:word64]
	v28 = v28 + 8
	x20 = Mem0[v28:word64]
	v29 = sp + 32
	x21 = Mem0[v29:word64]
	v29 = v29 + 8
	x22 = Mem0[v29:word64]
	v30 = sp + 48
	x23 = Mem0[v30:word64]
	v30 = v30 + 8
	x24 = Mem0[v30:word64]
	v31 = sp + 64
	x25 = Mem0[v31:word64]
	v31 = v31 + 8
	x26 = Mem0[v31:word64]
	x29 = Mem0[sp:word64]
	sp = sp + 8
	x30 = Mem0[sp:word64]
	sp = sp + 80
	return
	// succ:  fn000000000049E424_exit
l000000000049E4C4:
	x0 = x19 + 0xFFFFFFFFFFFFFA88
	w20 = Mem0[x0 + 8:word32]
	w20 = w20 - 0x00000001
	// succ:  l000000000049E4D0
l000000000049E4D0:
	x0 = 0x00000000004D9000
	w0 = Mem0[x0 + 1208:word32]
	branch w0 != 0x00000000 l000000000049E4EC
	// succ:  l000000000049E4DC l000000000049E4EC
l000000000049E4DC:
	x0 = x19 + 0xFFFFFFFFFFFFFA88
	x2 = Mem0[x0:word64]
	x2 = x2 + (int64) ((int32) w20)
	goto l000000000049E49C
	// succ:  l000000000049E49C
l000000000049E4EC:
	x0 = x19 + 0xFFFFFFFFFFFFFA88
	x0 = Mem0[x0:word64]
l000000000049E554:
	x0 = Mem0[x24:word64]
	call xfree (retsize: 0;)
	x0 = Mem0[x22:word64]
	x2 = x0 + 0x0000000000000008
	x4 = x0 + 0x0000000000000058
	// succ:  l000000000049E568
l000000000049E568:
	x3 = Mem0[x2:word64]
	x2 = x2 + 0x0000000000000008
	Mem0[x2 + -16:word64] = x3
	x31 = x2 - x4
	NZCV = cond(x31)
	branch Test(NE,Z) l000000000049E568
	// succ:  l000000000049E57C l000000000049E568
l000000000049E57C:
	x3 = 0x0000000000000048
	w20 = 0x00000009
	goto l000000000049E48C
	// succ:  l000000000049E48C
l000000000049E59C:
	w1 = 0x00000001
	x0 = 0x0000000000000010
	Mem0[x22 + 8:word32] = w1
	call xmalloc (retsize: 0;)
	Mem0[x22:word64] = x0
	Mem0[x0:word64] = x24
	x2 = x0
	w20 = w24
	goto l000000000049E494
	// succ:  l000000000049E494
fn000000000049E424_exit:


// fn000000000049E5C0
// Return size: 0
void fn000000000049E5C0()
fn000000000049E5C0_entry:
	// succ:  l000000000049E5C0
l000000000049E5C0:
	sp = fp
	sp = sp + -48
	Mem0[sp:word64] = x29
	sp = sp + 8
	Mem0[sp:word64] = x30
	x29 = x31 + 0x0000000000000000
	v8 = sp + 16
	Mem0[v8:word64] = x19
	v8 = v8 + 8
	Mem0[v8:word64] = x20
	x19 = 0x00000000004E4000
	x20 = 0x00000000004E4000
	w1 = Mem0[x19 + 120:word32]
	w2 = Mem0[x20 + 136:word32]
	v13 = sp + 32
	Mem0[v13:word64] = x21
	v13 = v13 + 8
	Mem0[v13:word64] = x22
	NZCV = cond(w1 - w2)
	w21 = w0
	branch Test(EQ,Z) l000000000049E614
	// succ:  l000000000049E5EC l000000000049E614
l000000000049E5EC:
	w0 = w2
	call rl_copy_text (retsize: 0;)
	x22 = x0
	branch w21 != 0x00000000 l000000000049E638
	// succ:  l000000000049E5FC l000000000049E638
l000000000049E5FC:
	w1 = Mem0[x19 + 120:word32]
	w2 = Mem0[x20 + 136:word32]
	x0 = x22
	NZCV = cond(w2 - w1)
	w1 = (word32) Test(LT,NV)
	call fn000000000049E424 (retsize: 0;)
	// succ:  l000000000049E614
l000000000049E614:
	x1 = 0x00000000004E1000
	w2 = Mem0[x1 + 3288:word32]
	w0 = 0x00000000
	w2 = w2 + 0x00000001
	v21 = sp + 16
	x19 = Mem0[v21:word64]
	v21 = v21 + 8
	x20 = Mem0[v21:word64]
	v22 = sp + 32
	x21 = Mem0[v22:word64]
	v22 = v22 + 8
	x22 = Mem0[v22:word64]
	Mem0[x1 + 3288:word32] = w2
	x29 = Mem0[sp:word64]
	sp = sp + 8
	x30 = Mem0[sp:word64]
	sp = sp + 48
	return
	// succ:  fn000000000049E5C0_exit
l000000000049E638:
	w0 = Mem0[x20 + 136:word32]
	w1 = Mem0[x19 + 120:word32]
	call rl_delete_text (retsize: 0;)
	goto l000000000049E5FC
	// succ:  l000000000049E5FC
fn000000000049E5C0_exit:


// rl_yank
// Return size: 0
void rl_yank()
rl_yank_entry:
	// succ:  l000000000049E648
l000000000049E648:
	sp = fp
	sp = sp + -32
	Mem0[sp:word64] = x29
	sp = sp + 8
	Mem0[sp:word64] = x30
	x29 = x31 + 0x0000000000000000
	Mem0[sp + 16:word64] = x19
	x19 = 0x00000000004E2000
	x19 = x19 + 0xFFFFFFFFFFFFFA88
	x0 = Mem0[x19:word64]
	branch x0 == 0x0000000000000000 l000000000049E690
	// succ:  l000000000049E664 l000000000049E690
l000000000049E664:
	x0 = 0x00000000004E4000
	w0 = Mem0[x0 + 136:word32]
	call _rl_set_mark_at_pos (retsize: 0;)
	v10 = Mem0[x19 + 6:int32]
	x1 = (word64) v10
	x0 = Mem0[x19:word64]
	x0 = Mem0[x0 + x1:word64]
	call rl_insert_text (retsize: 0;)
	w0 = 0x00000000
	// succ:  l000000000049E684
l000000000049E684:
	x19 = Mem0[sp + 16:word64]
	x29 = Mem0[sp:word64]
	sp = sp + 8
	x30 = Mem0[sp:word64]
	sp = sp + 32
	return
	// succ:  rl_yank_exit
l000000000049E690:
	call _rl_abort_internal (retsize: 0;)
	w0 = 0xFFFFFFFF
	goto l000000000049E684
	// succ:  l000000000049E684
rl_yank_exit:


// rl_yank_pop
// Return size: 0
void rl_yank_pop()
rl_yank_pop_entry:
	// succ:  l000000000049E69C
l000000000049E69C:
	sp = fp
	sp = sp + -64
	Mem0[sp:word64] = x29
	sp = sp + 8
	Mem0[sp:word64] = x30
	x29 = x31 + 0x0000000000000000
	x0 = 0x00000000004E1000
	x0 = Mem0[x0 + 3248:word64]
	x1 = 0x000000000049E000
	x1 = x1 + 0x000000000000069C
	v10 = sp + 16
	Mem0[v10:word64] = x19
	v10 = v10 + 8
	Mem0[v10:word64] = x20
	v13 = sp + 32
	Mem0[v13:word64] = x21
	v13 = v13 + 8
	Mem0[v13:word64] = x22
	Mem0[sp + 48:word64] = x23
	x31 = x0 - x1
	NZCV = cond(x31)
	branch Test(EQ,Z) l000000000049E6D8
	// succ:  l000000000049E6C8 l000000000049E6D8
l000000000049E6C8:
	x1 = 0x000000000049E000
	x1 = x1 + 0x0000000000000648
	x31 = x0 - x1
	NZCV = cond(x31)
	branch Test(NE,Z) l000000000049E798
	// succ:  l000000000049E6D8 l000000000049E798
l000000000049E6D8:
	x22 = 0x00000000004E2000
	x2 = x22 + 0xFFFFFFFFFFFFFA88
	x1 = Mem0[x2:word64]
	branch x1 == 0x0000000000000000 l000000000049E798
	// succ:  l000000000049E6E8 l000000000049E798
l000000000049E6E8:
	v18 = Mem0[x2 + 6:int32]
	x0 = (word64) v18
	x23 = 0x00000000004E4000
	x21 = Mem0[x1 + x0:word64]
	x0 = x21
	strlen(x0)
	sp = sp + 0xFFFFFFFFFFFFFFF8
	w19 = Mem0[x23 + 136:word32]
	x2 = x0
	w20 = w19 - w0
	NZCV = cond(w20)
	branch Test(LT,N) l000000000049E798
	// succ:  l000000000049E70C l000000000049E798
l000000000049E70C:
	branch w0 == 0x00000000 l000000000049E740
	// succ:  l000000000049E710 l000000000049E740
l000000000049E710:
	x0 = 0x00000000004E1000
	x1 = Mem0[x0 + 3256:word64]
l000000000049E740:
	w1 = w19
	w0 = w20
	call rl_delete_text (retsize: 0;)
	x0 = x22 + 0xFFFFFFFFFFFFFA88
	w1 = Mem0[x0 + 12:word32]
	Mem0[x23 + 136:word32] = w20
	w1 = w1 - 0x00000001
	Mem0[x0 + 12:word32] = w1
	branch (w1 & 0x00000000) == 0x00000000 l000000000049E788
	// succ:  l000000000049E764 l000000000049E788
l000000000049E764:
	w1 = 0x00000000
	w0 = 0x00000001
	call rl_yank (retsize: 0;)
	w0 = 0x00000000
	v24 = sp + 16
	x19 = Mem0[v24:word64]
	v24 = v24 + 8
	x20 = Mem0[v24:word64]
	v25 = sp + 32
	x21 = Mem0[v25:word64]
	v25 = v25 + 8
	x22 = Mem0[v25:word64]
	x23 = Mem0[sp + 48:word64]
	x29 = Mem0[sp:word64]
	sp = sp + 8
	x30 = Mem0[sp:word64]
	sp = sp + 64
	return
	// succ:  rl_yank_pop_exit
l000000000049E788:
	w1 = Mem0[x0 + 8:word32]
	w1 = w1 - 0x00000001
	Mem0[x0 + 12:word32] = w1
	goto l000000000049E764
	// succ:  l000000000049E764
l000000000049E798:
	call _rl_abort_internal (retsize: 0;)
	w0 = 0xFFFFFFFF
	v26 = sp + 16
	x19 = Mem0[v26:word64]
	v26 = v26 + 8
	x20 = Mem0[v26:word64]
	v27 = sp + 32
	x21 = Mem0[v27:word64]
	v27 = v27 + 8
	x22 = Mem0[v27:word64]
	x23 = Mem0[sp + 48:word64]
	x29 = Mem0[sp:word64]
	sp = sp + 8
	x30 = Mem0[sp:word64]
	sp = sp + 64
	return
	// succ:  rl_yank_pop_exit
rl_yank_pop_exit:


// fn000000000049E7B4
// Return size: 0
void fn000000000049E7B4()
fn000000000049E7B4_entry:
	// succ:  l000000000049E7B4
l000000000049E7B4:
	sp = fp
	sp = sp + -64
	Mem0[sp:word64] = x29
	sp = sp + 8
	Mem0[sp:word64] = x30
	x29 = x31 + 0x0000000000000000
	v6 = sp + 16
	Mem0[v6:word64] = x19
	v6 = v6 + 8
	Mem0[v6:word64] = x20
	v9 = sp + 32
	Mem0[v9:word64] = x21
	v9 = v9 + 8
	Mem0[v9:word64] = x22
	Mem0[sp + 48:word64] = x23
	w20 = w2
	w21 = w0
	w23 = w1
	call where_history (retsize: 0;)
	NZCV = cond(w20 - w31)
	w22 = w0
	w19 = 0x00000000
	branch Test(LE,ZCV) l000000000049E7F8
	// succ:  l000000000049E7E8 l000000000049E7F8
l000000000049E7E8:
	call previous_history (retsize: 0;)
	w19 = w19 + 0x00000001
	NZCV = cond(w19 - w20)
	branch Test(NE,Z) l000000000049E7E8
	// succ:  l000000000049E7F8 l000000000049E7E8
l000000000049E7F8:
	call previous_history (retsize: 0;)
	x19 = x0
	w0 = w22
	call history_set_pos (retsize: 0;)
	branch x19 == 0x0000000000000000 l000000000049E8B4
	// succ:  l000000000049E80C l000000000049E8B4
l000000000049E80C:
	x2 = Mem0[x19:word64]
	w0 = w21
	w1 = w21
	call history_arg_extract (retsize: 0;)
	x19 = x0
	branch x0 == 0x0000000000000000 l000000000049E8B4
	// succ:  l000000000049E824 l000000000049E8B4
l000000000049E824:
	v27 = Mem0[x0:byte]
	w0 = (word32) v27
	branch w0 != 0x00000000 l000000000049E850
	// succ:  l000000000049E82C l000000000049E850
l000000000049E82C:
	call rl_ding (retsize: 0;)
	x0 = x19
	call free (retsize: 0;)
	w0 = 0xFFFFFFFF
	// succ:  l000000000049E83C
l000000000049E83C:
	v28 = sp + 16
	x19 = Mem0[v28:word64]
	v28 = v28 + 8
	x20 = Mem0[v28:word64]
	v29 = sp + 32
	x21 = Mem0[v29:word64]
	v29 = v29 + 8
	x22 = Mem0[v29:word64]
	x23 = Mem0[sp + 48:word64]
	x29 = Mem0[sp:word64]
	sp = sp + 8
	x30 = Mem0[sp:word64]
	sp = sp + 64
	return
	// succ:  fn000000000049E7B4_exit
l000000000049E850:
	call rl_begin_undo_group (retsize: 0;)
	x0 = 0x00000000004E4000
	w0 = Mem0[x0 + 136:word32]
	call _rl_set_mark_at_pos (retsize: 0;)
	x0 = 0x00000000004D9000
	w0 = Mem0[x0 + 1208:word32]
	branch w0 == 0x00000000 l000000000049E898
	// succ:  l000000000049E86C l000000000049E898
l000000000049E86C:
	x0 = x19
	call rl_insert_text (retsize: 0;)
	x0 = x19
	call xfree (retsize: 0;)
	call rl_end_undo_group (retsize: 0;)
	w0 = 0x00000000
	v30 = sp + 16
	x19 = Mem0[v30:word64]
	v30 = v30 + 8
	x20 = Mem0[v30:word64]
	v31 = sp + 32
	x21 = Mem0[v31:word64]
	v31 = v31 + 8
	x22 = Mem0[v31:word64]
	x23 = Mem0[sp + 48:word64]
	x29 = Mem0[sp:word64]
	sp = sp + 8
	x30 = Mem0[sp:word64]
	sp = sp + 64
	return
	// succ:  fn000000000049E7B4_exit
l000000000049E898:
	w1 = w23
	w0 = 0x00000001
	call rl_vi_append_mode (retsize: 0;)
	x0 = 0x00000000004BE000
	x0 = x0 + 0x0000000000000330
	call rl_insert_text (retsize: 0;)
	goto l000000000049E86C
	// succ:  l000000000049E86C
l000000000049E8B4:
	call rl_ding (retsize: 0;)
	w0 = 0xFFFFFFFF
	goto l000000000049E83C
	// succ:  l000000000049E83C
fn000000000049E7B4_exit:


// rl_yank_last_arg
// Return size: 0
void rl_yank_last_arg()
rl_yank_last_arg_entry:
	// succ:  l000000000049E8C0
l000000000049E8C0:
	sp = fp
	sp = sp + -48
	Mem0[sp:word64] = x29
	sp = sp + 8
	Mem0[sp:word64] = x30
	x29 = x31 + 0x0000000000000000
	x2 = 0x00000000004E1000
	x3 = Mem0[x2 + 3248:word64]
	x2 = 0x000000000049E000
	x2 = x2 + 0xFFFFFFFFFFFFF8C0
	v10 = sp + 16
	Mem0[v10:word64] = x19
	v10 = v10 + 8
	Mem0[v10:word64] = x20
	x31 = x3 - x2
	NZCV = cond(x31)
	w20 = w0
	branch Test(EQ,Z) l000000000049E96C
	// succ:  l000000000049E8E8 l000000000049E96C
l000000000049E8E8:
	x0 = 0x00000000004E1000
	w2 = Mem0[x0 + 3332:word32]
	x19 = 0x00000000004E2000
	x5 = 0x00000000004DE000
	x4 = x19 + 0xFFFFFFFFFFFFFA88
	x3 = x5 + 0x00000000000005E0
	w0 = 0x00000001
	Mem0[x4 + 20:word32] = w2
	Mem0[x3 + 4:word32] = w0
	Mem0[x4 + 16:word32] = 0x00000000
	w0 = w2
	Mem0[x3:word32] = w20
	w2 = 0x00000000
	// succ:  l000000000049E91C
l000000000049E91C:
	branch w0 != 0x00000000 l000000000049E944
	// succ:  l000000000049E920 l000000000049E944
l000000000049E920:
	w0 = 0x00000024
	call fn000000000049E7B4 (retsize: 0;)
	NZCV = cond(w0 - w31)
	x19 = x19 + 0xFFFFFFFFFFFFFA88
	w1 = (word32) Test(EQ,Z)
	Mem0[x19 + 24:word32] = w1
	v21 = sp + 16
	x19 = Mem0[v21:word64]
	v21 = v21 + 8
	x20 = Mem0[v21:word64]
	x29 = Mem0[sp:word64]
	sp = sp + 8
	x30 = Mem0[sp:word64]
	sp = sp + 48
	return
	// succ:  rl_yank_last_arg_exit
l000000000049E944:
	x5 = x5 + 0x00000000000005E0
	w0 = Mem0[x5:word32]
	x19 = x19 + 0xFFFFFFFFFFFFFA88
	call fn000000000049E7B4 (retsize: 0;)
	NZCV = cond(w0 - w31)
	w1 = (word32) Test(EQ,Z)
	Mem0[x19 + 24:word32] = w1
	v23 = sp + 16
	x19 = Mem0[v23:word64]
	v23 = v23 + 8
	x20 = Mem0[v23:word64]
	x29 = Mem0[sp:word64]
	sp = sp + 8
	x30 = Mem0[sp:word64]
	sp = sp + 48
	return
	// succ:  rl_yank_last_arg_exit
l000000000049E96C:
	x19 = 0x00000000004E2000
	x0 = x19 + 0xFFFFFFFFFFFFFA88
	w0 = Mem0[x0 + 24:word32]
	branch w0 != 0x00000000 l000000000049E9A8
	// succ:  l000000000049E97C l000000000049E9A8
l000000000049E97C:
	x5 = 0x00000000004DE000
	branch (w20 & 0x00000000) == 0x00000000 l000000000049E9C8
	// succ:  l000000000049E984 l000000000049E9C8
l000000000049E984:
	x0 = x5 + 0x00000000000005E0
	w2 = Mem0[x0 + 4:word32]
	// succ:  l000000000049E98C
l000000000049E98C:
	x3 = x19 + 0xFFFFFFFFFFFFFA88
	w0 = Mem0[x3 + 16:word32]
	w2 = w2 + w0
	Mem0[x3 + 16:word32] = w2
	branch (w2 & 0x00000000) == 0x00000000 l000000000049E9B8
	// succ:  l000000000049E9A0 l000000000049E9B8
l000000000049E9A0:
	w0 = Mem0[x3 + 20:word32]
	goto l000000000049E91C
	// succ:  l000000000049E91C
l000000000049E9A8:
	Mem0[x29 + 32:word64] = x1
	call rl_do_undo (retsize: 0;)
	x1 = Mem0[x29 + 32:word64]
	goto l000000000049E97C
	// succ:  l000000000049E97C
l000000000049E9B8:
	w0 = Mem0[x3 + 20:word32]
	Mem0[x3 + 16:word32] = 0x00000000
	w2 = 0x00000000
	goto l000000000049E91C
	// succ:  l000000000049E91C
l000000000049E9C8:
	x0 = x5 + 0x00000000000005E0
	w2 = Mem0[x0 + 4:word32]
	w2 = w31 - w2
	Mem0[x0 + 4:word32] = w2
	goto l000000000049E98C
	// succ:  l000000000049E98C
rl_yank_last_arg_exit:


// rl_set_retained_kills
// Return size: 0
void rl_set_retained_kills()
rl_set_retained_kills_entry:
	// succ:  l000000000049E9DC
l000000000049E9DC:
	sp = fp
	w0 = 0x00000000
	return
	// succ:  rl_set_retained_kills_exit
rl_set_retained_kills_exit:


// rl_kill_text
// Return size: 0
void rl_kill_text()
rl_kill_text_entry:
	// succ:  l000000000049E9E4
l000000000049E9E4:
	sp = fp
	sp = sp + -48
	Mem0[sp:word64] = x29
	sp = sp + 8
	Mem0[sp:word64] = x30
	x29 = x31 + 0x0000000000000000
	v8 = sp + 16
	Mem0[v8:word64] = x19
	v8 = v8 + 8
	Mem0[v8:word64] = x20
	Mem0[sp + 32:word64] = x21
	NZCV = cond(w0 - w1)
	w20 = w0
	w19 = w1
	branch Test(EQ,Z) l000000000049EA28
	// succ:  l000000000049EA04 l000000000049EA28
l000000000049EA04:
	call rl_copy_text (retsize: 0;)
	x21 = x0
	w1 = w19
	w0 = w20
	call rl_delete_text (retsize: 0;)
	NZCV = cond(w20 - w19)
	x0 = x21
	w1 = (word32) Test(LT,NV)
	call fn000000000049E424 (retsize: 0;)
	// succ:  l000000000049EA28
l000000000049EA28:
	x0 = 0x00000000004E1000
	w1 = Mem0[x0 + 3288:word32]
	v18 = sp + 16
	x19 = Mem0[v18:word64]
	v18 = v18 + 8
	x20 = Mem0[v18:word64]
	w1 = w1 + 0x00000001
	Mem0[x0 + 3288:word32] = w1
	x21 = Mem0[sp + 32:word64]
	w0 = 0x00000000
	x29 = Mem0[sp:word64]
	sp = sp + 8
	x30 = Mem0[sp:word64]
	sp = sp + 48
	return
	// succ:  rl_kill_text_exit
rl_kill_text_exit:


// rl_backward_kill_word
// Return size: 0
void rl_backward_kill_word()
rl_backward_kill_word_entry:
	// succ:  l000000000049EA4C
l000000000049EA4C:
	sp = fp
	sp = sp + -32
	Mem0[sp:word64] = x29
	sp = sp + 8
	Mem0[sp:word64] = x30
	x29 = x31 + 0x0000000000000000
	v6 = sp + 16
	Mem0[v6:word64] = x19
	v6 = v6 + 8
	Mem0[v6:word64] = x20
	branch (w0 & 0x00000000) == 0x00000000 l000000000049EAA8
	// succ:  l000000000049EA5C l000000000049EAA8
l000000000049EA5C:
	x19 = 0x00000000004E4000
	w20 = Mem0[x19 + 136:word32]
	call rl_backward_word (retsize: 0;)
	w1 = Mem0[x19 + 136:word32]
	NZCV = cond(w1 - w20)
	branch Test(EQ,Z) l000000000049EA7C
	// succ:  l000000000049EA74 l000000000049EA7C
l000000000049EA74:
	w0 = w20
	call rl_kill_text (retsize: 0;)
	// succ:  l000000000049EA7C
l000000000049EA7C:
	x0 = 0x00000000004D9000
	w0 = Mem0[x0 + 1208:word32]
	w31 = w0 - 0x00000001
	NZCV = cond(w31)
	branch Test(NE,Z) l000000000049EA98
	// succ:  l000000000049EA8C l000000000049EA98
l000000000049EA8C:
	w1 = Mem0[x19 + 136:word32]
	x0 = 0x00000000004E4000
	Mem0[x0 + 120:word32] = w1
	// succ:  l000000000049EA98
l000000000049EA98:
	w0 = 0x00000000
	v16 = sp + 16
	x19 = Mem0[v16:word64]
	v16 = v16 + 8
	x20 = Mem0[v16:word64]
	x29 = Mem0[sp:word64]
	sp = sp + 8
	x30 = Mem0[sp:word64]
	sp = sp + 32
	return
	// succ:  rl_backward_kill_word_exit
l000000000049EAA8:
	v17 = sp + 16
	x19 = Mem0[v17:word64]
	v17 = v17 + 8
	x20 = Mem0[v17:word64]
	x29 = Mem0[sp:word64]
	sp = sp + 8
	x30 = Mem0[sp:word64]
	sp = sp + 32
	w0 = w31 - w0
	// succ:  l000000000049EAB4_thunk_rl_kill_word
l000000000049EAB4_thunk_rl_kill_word:
	call rl_kill_word (retsize: 0;)
	return
	// succ:  rl_backward_kill_word_exit
rl_backward_kill_word_exit:


// rl_kill_word
// Return size: 0
void rl_kill_word()
rl_kill_word_entry:
	// succ:  l000000000049EAB8
l000000000049EAB8:
	sp = fp
	sp = sp + -32
	Mem0[sp:word64] = x29
	sp = sp + 8
	Mem0[sp:word64] = x30
	x29 = x31 + 0x0000000000000000
	v8 = sp + 16
	Mem0[v8:word64] = x19
	v8 = v8 + 8
	Mem0[v8:word64] = x20
	branch (w0 & 0x00000000) == 0x00000000 l000000000049EB14
	// succ:  l000000000049EAC8 l000000000049EB14
l000000000049EAC8:
	x19 = 0x00000000004E4000
	w20 = Mem0[x19 + 136:word32]
	call rl_forward_word (retsize: 0;)
	w1 = Mem0[x19 + 136:word32]
	NZCV = cond(w1 - w20)
	branch Test(EQ,Z) l000000000049EAE8
	// succ:  l000000000049EAE0 l000000000049EAE8
l000000000049EAE0:
	w0 = w20
	call rl_kill_text (retsize: 0;)
	// succ:  l000000000049EAE8
l000000000049EAE8:
	x0 = 0x00000000004D9000
	w0 = Mem0[x0 + 1208:word32]
	Mem0[x19 + 136:word32] = w20
	w31 = w0 - 0x00000001
	NZCV = cond(w31)
	branch Test(NE,Z) l000000000049EB04
	// succ:  l000000000049EAFC l000000000049EB04
l000000000049EAFC:
	x0 = 0x00000000004E4000
	Mem0[x0 + 120:word32] = w20
	// succ:  l000000000049EB04
l000000000049EB04:
	w0 = 0x00000000
	v19 = sp + 16
	x19 = Mem0[v19:word64]
	v19 = v19 + 8
	x20 = Mem0[v19:word64]
	x29 = Mem0[sp:word64]
	sp = sp + 8
	x30 = Mem0[sp:word64]
	sp = sp + 32
	return
	// succ:  rl_kill_word_exit
l000000000049EB14:
	v14 = sp + 16
	x19 = Mem0[v14:word64]
	v14 = v14 + 8
	x20 = Mem0[v14:word64]
	x29 = Mem0[sp:word64]
	sp = sp + 8
	x30 = Mem0[sp:word64]
	sp = sp + 32
	w0 = w31 - w0
	// succ:  l000000000049EB20_thunk_rl_backward_kill_word
l000000000049EB20_thunk_rl_backward_kill_word:
	call rl_backward_kill_word (retsize: 0;)
	return
	// succ:  rl_kill_word_exit
rl_kill_word_exit:


// rl_backward_kill_line
// Return size: 0
void rl_backward_kill_line()
rl_backward_kill_line_entry:
	// succ:  l000000000049EB24
l000000000049EB24:
	sp = fp
	sp = sp + -32
	Mem0[sp:word64] = x29
	sp = sp + 8
	Mem0[sp:word64] = x30
	x29 = x31 + 0x0000000000000000
	v6 = sp + 16
	Mem0[v6:word64] = x19
	v6 = v6 + 8
	Mem0[v6:word64] = x20
	branch (w0 & 0x00000000) == 0x00000000 l000000000049EBAC
	// succ:  l000000000049EB34 l000000000049EBAC
l000000000049EB34:
	x20 = 0x00000000004E4000
	w19 = Mem0[x20 + 136:word32]
	branch w19 == 0x00000000 l000000000049EB98
	// succ:  l000000000049EB40 l000000000049EB98
l000000000049EB40:
	w0 = 0x00000001
	call rl_beg_of_line (retsize: 0;)
	w1 = Mem0[x20 + 136:word32]
	NZCV = cond(w19 - w1)
	branch Test(EQ,Z) l000000000049EB5C
	// succ:  l000000000049EB54 l000000000049EB5C
l000000000049EB54:
	w0 = w19
	call rl_kill_text (retsize: 0;)
	// succ:  l000000000049EB5C
l000000000049EB5C:
	x0 = 0x00000000004D9000
	w0 = Mem0[x0 + 1208:word32]
	w31 = w0 - 0x00000001
	NZCV = cond(w31)
	branch Test(EQ,Z) l000000000049EB7C
	// succ:  l000000000049EB6C l000000000049EB7C
l000000000049EB6C:
	w0 = 0x00000000
	v16 = sp + 16
	x19 = Mem0[v16:word64]
	v16 = v16 + 8
	x20 = Mem0[v16:word64]
	x29 = Mem0[sp:word64]
	sp = sp + 8
	x30 = Mem0[sp:word64]
	sp = sp + 32
	return
	// succ:  rl_backward_kill_line_exit
l000000000049EB7C:
	w1 = Mem0[x20 + 136:word32]
	x0 = 0x00000000004E4000
	Mem0[x0 + 120:word32] = w1
	v17 = sp + 16
	x19 = Mem0[v17:word64]
	v17 = v17 + 8
	x20 = Mem0[v17:word64]
	w0 = 0x00000000
	x29 = Mem0[sp:word64]
	sp = sp + 8
	x30 = Mem0[sp:word64]
	sp = sp + 32
	return
	// succ:  rl_backward_kill_line_exit
l000000000049EB98:
	call rl_ding (retsize: 0;)
	w0 = 0x00000000
	v18 = sp + 16
	x19 = Mem0[v18:word64]
	v18 = v18 + 8
	x20 = Mem0[v18:word64]
	x29 = Mem0[sp:word64]
	sp = sp + 8
	x30 = Mem0[sp:word64]
	sp = sp + 32
	return
	// succ:  rl_backward_kill_line_exit
l000000000049EBAC:
	v19 = sp + 16
	x19 = Mem0[v19:word64]
	v19 = v19 + 8
	x20 = Mem0[v19:word64]
	x29 = Mem0[sp:word64]
	sp = sp + 8
	x30 = Mem0[sp:word64]
	sp = sp + 32
	w0 = 0x00000001
	// succ:  l000000000049EBB8_thunk_rl_kill_line
l000000000049EBB8_thunk_rl_kill_line:
	call rl_kill_line (retsize: 0;)
	return
	// succ:  rl_backward_kill_line_exit
rl_backward_kill_line_exit:


// rl_kill_line
// Return size: 0
void rl_kill_line()
rl_kill_line_entry:
	// succ:  l000000000049EBBC
l000000000049EBBC:
	sp = fp
	sp = sp + -32
	Mem0[sp:word64] = x29
	sp = sp + 8
	Mem0[sp:word64] = x30
	x29 = x31 + 0x0000000000000000
	v8 = sp + 16
	Mem0[v8:word64] = x19
	v8 = v8 + 8
	Mem0[v8:word64] = x20
	branch (w0 & 0x00000000) == 0x00000000 l000000000049EC1C
	// succ:  l000000000049EBCC l000000000049EC1C
l000000000049EBCC:
	x19 = 0x00000000004E4000
	w0 = 0x00000001
	w20 = Mem0[x19 + 136:word32]
	call rl_end_of_line (retsize: 0;)
	w1 = Mem0[x19 + 136:word32]
	NZCV = cond(w20 - w1)
	branch Test(EQ,Z) l000000000049EBF0
	// succ:  l000000000049EBE8 l000000000049EBF0
l000000000049EBE8:
	w0 = w20
	call rl_kill_text (retsize: 0;)
	// succ:  l000000000049EBF0
l000000000049EBF0:
	x0 = 0x00000000004D9000
	w0 = Mem0[x0 + 1208:word32]
	Mem0[x19 + 136:word32] = w20
	w31 = w0 - 0x00000001
	NZCV = cond(w31)
	branch Test(NE,Z) l000000000049EC0C
	// succ:  l000000000049EC04 l000000000049EC0C
l000000000049EC04:
	x0 = 0x00000000004E4000
	Mem0[x0 + 120:word32] = w20
	// succ:  l000000000049EC0C
l000000000049EC0C:
	w0 = 0x00000000
	v21 = sp + 16
	x19 = Mem0[v21:word64]
	v21 = v21 + 8
	x20 = Mem0[v21:word64]
	x29 = Mem0[sp:word64]
	sp = sp + 8
	x30 = Mem0[sp:word64]
	sp = sp + 32
	return
	// succ:  rl_kill_line_exit
l000000000049EC1C:
	v14 = sp + 16
	x19 = Mem0[v14:word64]
	v14 = v14 + 8
	x20 = Mem0[v14:word64]
	x29 = Mem0[sp:word64]
	sp = sp + 8
	x30 = Mem0[sp:word64]
	sp = sp + 32
	w0 = 0x00000001
	// succ:  l000000000049EC28_thunk_rl_backward_kill_line
l000000000049EC28_thunk_rl_backward_kill_line:
	call rl_backward_kill_line (retsize: 0;)
	return
	// succ:  rl_kill_line_exit
rl_kill_line_exit:


// rl_kill_full_line
// Return size: 0
void rl_kill_full_line()
rl_kill_full_line_entry:
	// succ:  l000000000049EC2C
l000000000049EC2C:
	sp = fp
	sp = sp + -16
	Mem0[sp:word64] = x29
	sp = sp + 8
	Mem0[sp:word64] = x30
	x29 = x31 + 0x0000000000000000
	call rl_begin_undo_group (retsize: 0;)
	x0 = 0x00000000004E3000
	w1 = Mem0[x0 + 3900:word32]
	x2 = 0x00000000004E4000
	w0 = 0x00000000
	Mem0[x2 + 136:word32] = w0
	call rl_kill_text (retsize: 0;)
	x0 = 0x00000000004E4000
	Mem0[x0 + 120:word32] = 0x00000000
	call rl_end_undo_group (retsize: 0;)
	w0 = 0x00000000
	x29 = Mem0[sp:word64]
	sp = sp + 8
	x30 = Mem0[sp:word64]
	sp = sp + 16
	return
	// succ:  rl_kill_full_line_exit
rl_kill_full_line_exit:


// rl_unix_word_rubout
// Return size: 0
void rl_unix_word_rubout()
rl_unix_word_rubout_entry:
	// succ:  l000000000049EC68
l000000000049EC68:
	sp = fp
	sp = sp + -32
	Mem0[sp:word64] = x29
	sp = sp + 8
	Mem0[sp:word64] = x30
	x29 = x31 + 0x0000000000000000
	Mem0[sp + 16:word64] = x19
	x19 = 0x00000000004E4000
	w7 = Mem0[x19 + 136:word32]
	branch w7 == 0x00000000 l000000000049ED88
	// succ:  l000000000049EC80 l000000000049ED88
l000000000049EC80:
	x1 = 0x00000000004E1000
	NZCV = cond(w0 - w31)
	x6 = Mem0[x1 + 3256:word64]
l000000000049ED88:
	call rl_ding (retsize: 0;)
	w0 = 0x00000000
	x19 = Mem0[sp + 16:word64]
	x29 = Mem0[sp:word64]
	sp = sp + 8
	x30 = Mem0[sp:word64]
	sp = sp + 32
	return
	// succ:  rl_unix_word_rubout_exit
rl_unix_word_rubout_exit:


// rl_unix_filename_rubout
// Return size: 0
void rl_unix_filename_rubout()
rl_unix_filename_rubout_entry:
	// succ:  l000000000049ED9C
l000000000049ED9C:
	sp = fp
	sp = sp + -32
	Mem0[sp:word64] = x29
	sp = sp + 8
	Mem0[sp:word64] = x30
	x29 = x31 + 0x0000000000000000
	Mem0[sp + 16:word64] = x19
	x19 = 0x00000000004E4000
	w7 = Mem0[x19 + 136:word32]
	branch w7 == 0x00000000 l000000000049EEB4
	// succ:  l000000000049EDB4 l000000000049EEB4
l000000000049EDB4:
	x1 = 0x00000000004E1000
	NZCV = cond(w0 - w31)
	x6 = Mem0[x1 + 3256:word64]
l000000000049EEB4:
	call rl_ding (retsize: 0;)
	w0 = 0x00000000
	x19 = Mem0[sp + 16:word64]
	x29 = Mem0[sp:word64]
	sp = sp + 8
	x30 = Mem0[sp:word64]
	sp = sp + 32
	return
	// succ:  rl_unix_filename_rubout_exit
rl_unix_filename_rubout_exit:


// rl_unix_line_discard
// Return size: 0
void rl_unix_line_discard()
rl_unix_line_discard_entry:
	// succ:  l000000000049EEC8
l000000000049EEC8:
	sp = fp
	sp = sp + -32
	Mem0[sp:word64] = x29
	sp = sp + 8
	Mem0[sp:word64] = x30
	x29 = x31 + 0x0000000000000000
	Mem0[sp + 16:word64] = x19
	x19 = 0x00000000004E4000
	w0 = Mem0[x19 + 136:word32]
	branch w0 == 0x00000000 l000000000049EF24
	// succ:  l000000000049EEE0 l000000000049EF24
l000000000049EEE0:
	w1 = 0x00000000
	call rl_kill_text (retsize: 0;)
	x0 = 0x00000000004D9000
	w0 = Mem0[x0 + 1208:word32]
	Mem0[x19 + 136:word32] = 0x00000000
	w31 = w0 - 0x00000001
	NZCV = cond(w31)
	branch Test(EQ,Z) l000000000049EF0C
	// succ:  l000000000049EEFC l000000000049EF0C
l000000000049EEFC:
	w0 = 0x00000000
	x19 = Mem0[sp + 16:word64]
	x29 = Mem0[sp:word64]
	sp = sp + 8
	x30 = Mem0[sp:word64]
	sp = sp + 32
	return
	// succ:  rl_unix_line_discard_exit
l000000000049EF0C:
	x0 = 0x00000000004E4000
	Mem0[x0 + 120:word32] = 0x00000000
	x19 = Mem0[sp + 16:word64]
	w0 = 0x00000000
	x29 = Mem0[sp:word64]
	sp = sp + 8
	x30 = Mem0[sp:word64]
	sp = sp + 32
	return
	// succ:  rl_unix_line_discard_exit
l000000000049EF24:
	call rl_ding (retsize: 0;)
	w0 = 0x00000000
	x19 = Mem0[sp + 16:word64]
	x29 = Mem0[sp:word64]
	sp = sp + 8
	x30 = Mem0[sp:word64]
	sp = sp + 32
	return
	// succ:  rl_unix_line_discard_exit
rl_unix_line_discard_exit:


// rl_copy_region_to_kill
// Return size: 0
void rl_copy_region_to_kill()
rl_copy_region_to_kill_entry:
	// succ:  l000000000049EF38
l000000000049EF38:
	sp = fp
	w0 = 0x00000000
	// succ:  l000000000049EF3C_thunk_fn000000000049E5C0
l000000000049EF3C_thunk_fn000000000049E5C0:
	call fn000000000049E5C0 (retsize: 0;)
	return
	// succ:  rl_copy_region_to_kill_exit
rl_copy_region_to_kill_exit:


// rl_kill_region
// Return size: 0
void rl_kill_region()
rl_kill_region_entry:
	// succ:  l000000000049EF40
l000000000049EF40:
	sp = fp
	sp = sp + -48
	Mem0[sp:word64] = x29
	sp = sp + 8
	Mem0[sp:word64] = x30
	x29 = x31 + 0x0000000000000000
	v8 = sp + 16
	Mem0[v8:word64] = x19
	v8 = v8 + 8
	Mem0[v8:word64] = x20
	x0 = 0x00000000004E4000
	x19 = 0x00000000004E4000
	w2 = Mem0[x0 + 120:word32]
	w1 = Mem0[x19 + 136:word32]
	w0 = 0x00000001
	NZCV = cond(w1 - w2)
rl_kill_region_exit:


// rl_copy_backward_word
// Return size: 0
void rl_copy_backward_word()
rl_copy_backward_word_entry:
	// succ:  l000000000049EF94
l000000000049EF94:
	sp = fp
	sp = sp + -64
	Mem0[sp:word64] = x29
	sp = sp + 8
	Mem0[sp:word64] = x30
	x29 = x31 + 0x0000000000000000
	v6 = sp + 32
	Mem0[v6:word64] = x21
	v6 = v6 + 8
	Mem0[v6:word64] = x22
	v9 = sp + 16
	Mem0[v9:word64] = x19
	v9 = v9 + 8
	Mem0[v9:word64] = x20
	Mem0[sp + 48:word64] = x23
	w21 = w0
	branch (w0 & 0x00000000) == 0x00000000 l000000000049F000
	// succ:  l000000000049EFB0 l000000000049F000
l000000000049EFB0:
	x20 = 0x00000000004E4000
	x19 = 0x00000000004E4000
	w1 = 0x00000000
	w23 = Mem0[x20 + 120:word32]
	w22 = Mem0[x19 + 136:word32]
	call rl_backward_word (retsize: 0;)
	w2 = Mem0[x19 + 136:word32]
	w1 = 0x00000000
	w0 = w21
	Mem0[x20 + 120:word32] = w2
	call rl_forward_word (retsize: 0;)
	w0 = 0x00000000
	call fn000000000049E5C0 (retsize: 0;)
	Mem0[x20 + 120:word32] = w23
	Mem0[x19 + 136:word32] = w22
	x23 = Mem0[sp + 48:word64]
	v19 = sp + 16
	x19 = Mem0[v19:word64]
	v19 = v19 + 8
	x20 = Mem0[v19:word64]
	v20 = sp + 32
	x21 = Mem0[v20:word64]
	v20 = v20 + 8
	x22 = Mem0[v20:word64]
	x29 = Mem0[sp:word64]
	sp = sp + 8
	x30 = Mem0[sp:word64]
	sp = sp + 64
	return
	// succ:  rl_copy_backward_word_exit
l000000000049F000:
	v21 = sp + 16
	x19 = Mem0[v21:word64]
	v21 = v21 + 8
	x20 = Mem0[v21:word64]
	v22 = sp + 32
	x21 = Mem0[v22:word64]
	v22 = v22 + 8
	x22 = Mem0[v22:word64]
	x23 = Mem0[sp + 48:word64]
	x29 = Mem0[sp:word64]
	sp = sp + 8
	x30 = Mem0[sp:word64]
	sp = sp + 64
	w0 = w31 - w0
	// succ:  l000000000049F014_thunk_rl_copy_forward_word
l000000000049F014_thunk_rl_copy_forward_word:
	call rl_copy_forward_word (retsize: 0;)
	return
	// succ:  rl_copy_backward_word_exit
rl_copy_backward_word_exit:


// rl_copy_forward_word
// Return size: 0
void rl_copy_forward_word()
rl_copy_forward_word_entry:
	// succ:  l000000000049F018
l000000000049F018:
	sp = fp
	sp = sp + -64
	Mem0[sp:word64] = x29
	sp = sp + 8
	Mem0[sp:word64] = x30
	x29 = x31 + 0x0000000000000000
	v8 = sp + 32
	Mem0[v8:word64] = x21
	v8 = v8 + 8
	Mem0[v8:word64] = x22
	v11 = sp + 16
	Mem0[v11:word64] = x19
	v11 = v11 + 8
	Mem0[v11:word64] = x20
	Mem0[sp + 48:word64] = x23
	w21 = w0
	branch (w0 & 0x00000000) == 0x00000000 l000000000049F084
	// succ:  l000000000049F034 l000000000049F084
l000000000049F034:
	x20 = 0x00000000004E4000
	x19 = 0x00000000004E4000
	w1 = 0x00000000
	w23 = Mem0[x20 + 120:word32]
	w22 = Mem0[x19 + 136:word32]
	call rl_forward_word (retsize: 0;)
	w2 = Mem0[x19 + 136:word32]
	w1 = 0x00000000
	w0 = w21
	Mem0[x20 + 120:word32] = w2
	call rl_backward_word (retsize: 0;)
	w0 = 0x00000000
	call fn000000000049E5C0 (retsize: 0;)
	Mem0[x20 + 120:word32] = w23
	Mem0[x19 + 136:word32] = w22
	x23 = Mem0[sp + 48:word64]
	v19 = sp + 16
	x19 = Mem0[v19:word64]
	v19 = v19 + 8
	x20 = Mem0[v19:word64]
	v20 = sp + 32
	x21 = Mem0[v20:word64]
	v20 = v20 + 8
	x22 = Mem0[v20:word64]
	x29 = Mem0[sp:word64]
	sp = sp + 8
	x30 = Mem0[sp:word64]
	sp = sp + 64
	return
	// succ:  rl_copy_forward_word_exit
l000000000049F084:
	v21 = sp + 16
	x19 = Mem0[v21:word64]
	v21 = v21 + 8
	x20 = Mem0[v21:word64]
	v22 = sp + 32
	x21 = Mem0[v22:word64]
	v22 = v22 + 8
	x22 = Mem0[v22:word64]
	x23 = Mem0[sp + 48:word64]
	x29 = Mem0[sp:word64]
	sp = sp + 8
	x30 = Mem0[sp:word64]
	sp = sp + 64
	w0 = w31 - w0
	// succ:  l000000000049F098_thunk_rl_copy_backward_word
l000000000049F098_thunk_rl_copy_backward_word:
	call rl_copy_backward_word (retsize: 0;)
	return
	// succ:  rl_copy_forward_word_exit
rl_copy_forward_word_exit:


// rl_yank_nth_arg
// Return size: 0
void rl_yank_nth_arg()
rl_yank_nth_arg_entry:
	// succ:  l000000000049F09C
l000000000049F09C:
	sp = fp
	w2 = 0x00000000
	// succ:  l000000000049F0A0_thunk_fn000000000049E7B4
l000000000049F0A0_thunk_fn000000000049E7B4:
	call fn000000000049E7B4 (retsize: 0;)
	return
	// succ:  rl_yank_nth_arg_exit
rl_yank_nth_arg_exit:


// rl_add_undo
// Return size: 0
void rl_add_undo()
rl_add_undo_entry:
	// succ:  l000000000049F0A4
l000000000049F0A4:
	sp = fp
	sp = sp + -64
	Mem0[sp:word64] = x29
	sp = sp + 8
	Mem0[sp:word64] = x30
	x29 = x31 + 0x0000000000000000
	Mem0[sp + 16:word64] = x19
	w19 = w0
	x0 = 0x0000000000000020
	Mem0[x29 + 32:word64] = x1
	Mem0[x29 + 40:word64] = x2
	Mem0[x29 + 48:word64] = x3
	call xmalloc (retsize: 0;)
	x4 = 0x00000000004E2000
	x4 = x4 + 0xFFFFFFFFFFFFFAA8
	x5 = Mem0[x4:word64]
	x1 = Mem0[x29 + 32:word64]
	x2 = Mem0[x29 + 40:word64]
	x3 = Mem0[x29 + 48:word64]
	Mem0[x0:word64] = x5
	Mem0[x0 + 24:word32] = w19
	Mem0[x0 + 8:word32] = w1
	Mem0[x0 + 12:word32] = w2
	Mem0[x0 + 16:word64] = x3
	Mem0[x4:word64] = x0
	x19 = Mem0[sp + 16:word64]
	x29 = Mem0[sp:word64]
	sp = sp + 8
	x30 = Mem0[sp:word64]
	sp = sp + 64
	return
	// succ:  rl_add_undo_exit
rl_add_undo_exit:


// rl_free_undo_list
// Return size: 0
void rl_free_undo_list()
rl_free_undo_list_entry:
	// succ:  l000000000049F104
l000000000049F104:
	sp = fp
	sp = sp + -48
	Mem0[sp:word64] = x29
	sp = sp + 8
	Mem0[sp:word64] = x30
	x29 = x31 + 0x0000000000000000
	v8 = sp + 32
	Mem0[v8:word64] = x21
	v8 = v8 + 8
	Mem0[v8:word64] = x22
	x22 = 0x00000000004E2000
	v11 = sp + 16
	Mem0[v11:word64] = x19
	v11 = v11 + 8
	Mem0[v11:word64] = x20
	x20 = x22 + 0xFFFFFFFFFFFFFAA8
	x21 = Mem0[x20:word64]
	x19 = x21
	branch x21 != 0x0000000000000000 l000000000049F13C
	// succ:  l000000000049F128 l000000000049F13C
l000000000049F128:
	goto l000000000049F164
	// succ:  l000000000049F164
l000000000049F12C:
	x0 = x19
	call xfree (retsize: 0;)
	x19 = Mem0[x20:word64]
	branch x19 == 0x0000000000000000 l000000000049F164
	// succ:  l000000000049F13C l000000000049F164
l000000000049F13C:
	x2 = Mem0[x19:word64]
	w0 = Mem0[x19 + 24:word32]
	Mem0[x20:word64] = x2
	branch w0 != 0x00000000 l000000000049F12C
	// succ:  l000000000049F14C l000000000049F12C
l000000000049F14C:
	x0 = Mem0[x19 + 16:word64]
	call xfree (retsize: 0;)
	x0 = x19
	call xfree (retsize: 0;)
	x19 = Mem0[x20:word64]
	branch x19 != 0x0000000000000000 l000000000049F13C
	// succ:  l000000000049F164 l000000000049F13C
l000000000049F164:
	x22 = x22 + 0xFFFFFFFFFFFFFAA8
	x2 = 0x0000000000000000
	x1 = x21
	Mem0[x22:word64] = x2
	v16 = sp + 16
	x19 = Mem0[v16:word64]
	v16 = v16 + 8
	x20 = Mem0[v16:word64]
	v17 = sp + 32
	x21 = Mem0[v17:word64]
	v17 = v17 + 8
	x22 = Mem0[v17:word64]
	x29 = Mem0[sp:word64]
	sp = sp + 8
	x30 = Mem0[sp:word64]
	sp = sp + 48
	w0 = 0xFFFFFFFF
	// succ:  l000000000049F184_thunk_replace_history_data
l000000000049F184_thunk_replace_history_data:
	call replace_history_data (retsize: 0;)
	return
	// succ:  rl_free_undo_list_exit
rl_free_undo_list_exit:


// _rl_copy_undo_entry
// Return size: 0
void _rl_copy_undo_entry()
_rl_copy_undo_entry_entry:
	// succ:  l000000000049F188
l000000000049F188:
	sp = fp
	sp = sp + -64
	Mem0[sp:word64] = x29
	sp = sp + 8
	Mem0[sp:word64] = x30
	x29 = x31 + 0x0000000000000000
	v8 = sp + 16
	Mem0[v8:word64] = x19
	v8 = v8 + 8
	Mem0[v8:word64] = x20
	x20 = x0
	x0 = 0x0000000000000020
	v12 = sp + 32
	Mem0[v12:word64] = x21
	v12 = v12 + 8
	Mem0[v12:word64] = x22
	Mem0[sp + 48:word64] = x23
	w22 = Mem0[x20 + 8:word32]
	w23 = Mem0[x20 + 24:word32]
	w21 = Mem0[x20 + 12:word32]
	call xmalloc (retsize: 0;)
	Mem0[x0 + 16:word64] = 0x0000000000000000
	x19 = x0
	x0 = Mem0[x20 + 16:word64]
	Mem0[x19 + 24:word32] = w23
	Mem0[x19 + 8:word32] = w22
	Mem0[x19 + 12:word32] = w21
	Mem0[x19:word64] = 0x0000000000000000
	branch x0 == 0x0000000000000000 l000000000049F1E8
	// succ:  l000000000049F1D4 l000000000049F1E8
l000000000049F1D4:
	strlen(x0)
	sp = sp + 0xFFFFFFFFFFFFFFF8
	x0 = x0 + 0x0000000000000001
	call xmalloc (retsize: 0;)
	x1 = Mem0[x20 + 16:word64]
	strcpy(x0, x1)
	sp = sp + 0xFFFFFFFFFFFFFFF8
	// succ:  l000000000049F1E8
l000000000049F1E8:
	Mem0[x19 + 16:word64] = x0
	v18 = sp + 32
	x21 = Mem0[v18:word64]
	v18 = v18 + 8
	x22 = Mem0[v18:word64]
	x0 = x19
	x23 = Mem0[sp + 48:word64]
	v19 = sp + 16
	x19 = Mem0[v19:word64]
	v19 = v19 + 8
	x20 = Mem0[v19:word64]
	x29 = Mem0[sp:word64]
	sp = sp + 8
	x30 = Mem0[sp:word64]
	sp = sp + 64
	return
	// succ:  _rl_copy_undo_entry_exit
_rl_copy_undo_entry_exit:


// _rl_copy_undo_list
// Return size: 0
void _rl_copy_undo_list()
_rl_copy_undo_list_entry:
	// succ:  l000000000049F204
l000000000049F204:
	sp = fp
	sp = sp + -48
	Mem0[sp:word64] = x29
	sp = sp + 8
	Mem0[sp:word64] = x30
	x29 = x31 + 0x0000000000000000
	v8 = sp + 16
	Mem0[v8:word64] = x19
	v8 = v8 + 8
	Mem0[v8:word64] = x20
	Mem0[sp + 32:word64] = x21
	x19 = x0
	branch x0 == 0x0000000000000000 l000000000049F274
	// succ:  l000000000049F21C l000000000049F274
l000000000049F21C:
	call _rl_copy_undo_entry (retsize: 0;)
	x19 = Mem0[x19:word64]
	x21 = x0
	x20 = x0
	x0 = x19
	branch x19 == 0x0000000000000000 l000000000049F250
	// succ:  l000000000049F234 l000000000049F250
l000000000049F234:
	call _rl_copy_undo_entry (retsize: 0;)
	branch x21 == 0x0000000000000000 l000000000049F268
	// succ:  l000000000049F23C l000000000049F268
l000000000049F23C:
	Mem0[x20:word64] = x0
	x20 = x0
	// succ:  l000000000049F244
l000000000049F244:
	x19 = Mem0[x19:word64]
	x0 = x19
	branch x19 != 0x0000000000000000 l000000000049F234
	// succ:  l000000000049F250 l000000000049F234
l000000000049F250:
	Mem0[x20:word64] = x19
	x0 = x21
	v11 = sp + 16
	x19 = Mem0[v11:word64]
	v11 = v11 + 8
	x20 = Mem0[v11:word64]
	x21 = Mem0[sp + 32:word64]
	x29 = Mem0[sp:word64]
	sp = sp + 8
	x30 = Mem0[sp:word64]
	sp = sp + 48
	return
	// succ:  _rl_copy_undo_list_exit
l000000000049F268:
	x21 = x0
	x20 = x0
	goto l000000000049F244
	// succ:  l000000000049F244
l000000000049F274:
	v12 = sp + 16
	x19 = Mem0[v12:word64]
	v12 = v12 + 8
	x20 = Mem0[v12:word64]
	x21 = Mem0[sp + 32:word64]
	x29 = Mem0[sp:word64]
	sp = sp + 8
	x30 = Mem0[sp:word64]
	sp = sp + 48
	return
	// succ:  _rl_copy_undo_list_exit
_rl_copy_undo_list_exit:


// rl_do_undo
// Return size: 0
void rl_do_undo()
rl_do_undo_entry:
	// succ:  l000000000049F284
l000000000049F284:
	sp = fp
	sp = sp + -96
	Mem0[sp:word64] = x29
	sp = sp + 8
	Mem0[sp:word64] = x30
	x29 = x31 + 0x0000000000000000
	v8 = sp + 48
	Mem0[v8:word64] = x23
	v8 = v8 + 8
	Mem0[v8:word64] = x24
	v11 = sp + 64
	Mem0[v11:word64] = x25
	v11 = v11 + 8
	Mem0[v11:word64] = x26
	w24 = 0x00000000
	v15 = sp + 16
	Mem0[v15:word64] = x19
	v15 = v15 + 8
	Mem0[v15:word64] = x20
	x25 = 0x00000000004E4000
	x20 = 0x00000000004E1000
	x26 = 0x00000000004E3000
	v18 = sp + 32
	Mem0[v18:word64] = x21
	v18 = v18 + 8
	Mem0[v18:word64] = x22
	Mem0[sp + 80:word64] = x27
	w23 = w24
	w22 = w24
	x21 = 0x00000000004E2000
	x20 = x20 + 0xFFFFFFFFFFFFFC60
	x25 = x25 + 0x0000000000000088
	x26 = x26 + 0xFFFFFFFFFFFFFF3C
	// succ:  l000000000049F2C8
l000000000049F2C8:
	x3 = x21 + 0xFFFFFFFFFFFFFAA8
	x19 = Mem0[x3:word64]
	branch x19 == 0x0000000000000000 l000000000049F39C
	// succ:  l000000000049F2D4 l000000000049F39C
l000000000049F2D4:
	w4 = Mem0[x20:word32]
	w2 = Mem0[x19 + 24:word32]
	w6 = 0x00000001
	w5 = w4 | 0x00010000
	Mem0[x3 + 8:word32] = w6
	Mem0[x20:word32] = w5
	NZCV = cond(w2 - w6)
	x27 = 0x00000000004E1000
	branch Test(ULE,ZC) l000000000049F404
	// succ:  l000000000049F2F8 l000000000049F404
l000000000049F2F8:
	w31 = w2 - 0x00000003
	NZCV = cond(w31)
	branch Test(UGT,ZC) l000000000049F320
	// succ:  l000000000049F300 l000000000049F320
l000000000049F300:
	x0 = 0x00000000004C4000
	x0 = x0 + 0xFFFFFFFFFFFFFD30
	v32 = Mem0[x0 + (uint64) ((uint32) w2):byte]
	w1 = (word32) v32
	x3 = 0x000000000049F318
	x1 = x3 + (int64) ((int8) w1)
l000000000049F320:
	x4 = Mem0[x19:word64]
	x3 = x21 + 0xFFFFFFFFFFFFFAA8
	w5 = w5 & 0xFFFEFFFF
	w0 = 0xFFFFFFFF
	x1 = x19
	x2 = x4
	Mem0[x3 + 8:word32] = 0x00000000
	Mem0[x20:word32] = w5
	Mem0[x3:word64] = x4
	call replace_history_data (retsize: 0;)
	x0 = x19
	call xfree (retsize: 0;)
	branch w22 != 0x00000000 l000000000049F2C8
	// succ:  l000000000049F354 l000000000049F2C8
l000000000049F354:
	w0 = 0x00000001
	goto l000000000049F484
	// succ:  l000000000049F484
l000000000049F39C:
	w0 = w19
	v36 = sp + 32
	x21 = Mem0[v36:word64]
	v36 = v36 + 8
	x22 = Mem0[v36:word64]
	v37 = sp + 16
	x19 = Mem0[v37:word64]
	v37 = v37 + 8
	x20 = Mem0[v37:word64]
	v38 = sp + 48
	x23 = Mem0[v38:word64]
	v38 = v38 + 8
	x24 = Mem0[v38:word64]
	v39 = sp + 64
	x25 = Mem0[v39:word64]
	v39 = v39 + 8
	x26 = Mem0[v39:word64]
	x27 = Mem0[sp + 80:word64]
	x29 = Mem0[sp:word64]
	sp = sp + 8
	x30 = Mem0[sp:word64]
	sp = sp + 96
	return
	// succ:  rl_do_undo_exit
l000000000049F404:
	w23 = Mem0[x19 + 8:word32]
	w31 = w23 + 0x00000001
	NZCV = cond(w31)
	branch Test(EQ,Z) l000000000049F43C
	// succ:  l000000000049F410 l000000000049F43C
l000000000049F410:
	w31 = w23 + 0x00000002
	NZCV = cond(w31)
	branch Test(EQ,Z) l000000000049F4A0
	// succ:  l000000000049F418 l000000000049F4A0
l000000000049F418:
	w24 = Mem0[x19 + 12:word32]
	w31 = w24 + 0x00000001
	NZCV = cond(w31)
	branch Test(EQ,Z) l000000000049F434
	// succ:  l000000000049F424 l000000000049F434
l000000000049F424:
	w31 = w24 + 0x00000002
	NZCV = cond(w31)
	branch Test(NE,Z) l000000000049F2F8
	// succ:  l000000000049F42C l000000000049F2F8
l000000000049F42C:
	w24 = Mem0[x26:word32]
	goto l000000000049F2F8
	// succ:  l000000000049F2F8
l000000000049F434:
	w24 = Mem0[x25:word32]
	goto l000000000049F2F8
	// succ:  l000000000049F2F8
l000000000049F43C:
	w23 = Mem0[x25:word32]
	goto l000000000049F418
	// succ:  l000000000049F418
l000000000049F484:
	v43 = sp + 16
	x19 = Mem0[v43:word64]
	v43 = v43 + 8
	x20 = Mem0[v43:word64]
	v44 = sp + 32
	x21 = Mem0[v44:word64]
	v44 = v44 + 8
	x22 = Mem0[v44:word64]
	v45 = sp + 48
	x23 = Mem0[v45:word64]
	v45 = v45 + 8
	x24 = Mem0[v45:word64]
	v46 = sp + 64
	x25 = Mem0[v46:word64]
	v46 = v46 + 8
	x26 = Mem0[v46:word64]
	x27 = Mem0[sp + 80:word64]
	x29 = Mem0[sp:word64]
	sp = sp + 8
	x30 = Mem0[sp:word64]
	sp = sp + 96
	return
	// succ:  rl_do_undo_exit
l000000000049F4A0:
	w23 = Mem0[x26:word32]
	goto l000000000049F418
	// succ:  l000000000049F418
rl_do_undo_exit:


// _rl_fix_last_undo_of_type
// Return size: 0
void _rl_fix_last_undo_of_type()
_rl_fix_last_undo_of_type_entry:
	// succ:  l000000000049F4A8
l000000000049F4A8:
	sp = fp
	x3 = 0x00000000004E2000
	x3 = x3 + 0xFFFFFFFFFFFFFAA8
	goto l000000000049F4C0
	// succ:  l000000000049F4C0
l000000000049F4B4:
	w4 = Mem0[x3 + 24:word32]
	NZCV = cond(w4 - w0)
	branch Test(EQ,Z) l000000000049F4D0
	// succ:  l000000000049F4C0 l000000000049F4D0
l000000000049F4C0:
	x3 = Mem0[x3:word64]
	branch x3 != 0x0000000000000000 l000000000049F4B4
	// succ:  l000000000049F4C8 l000000000049F4B4
l000000000049F4C8:
	w0 = 0x00000001
	return
	// succ:  _rl_fix_last_undo_of_type_exit
l000000000049F4D0:
	Mem0[x3 + 8:word32] = w1
	Mem0[x3 + 12:word32] = w2
	w0 = 0x00000000
	return
	// succ:  _rl_fix_last_undo_of_type_exit
_rl_fix_last_undo_of_type_exit:


// rl_begin_undo_group
// Return size: 0
void rl_begin_undo_group()
rl_begin_undo_group_entry:
	// succ:  l000000000049F4E0
l000000000049F4E0:
	sp = fp
	sp = sp + -16
	Mem0[sp:word64] = x29
	sp = sp + 8
	Mem0[sp:word64] = x30
	x29 = x31 + 0x0000000000000000
	w1 = 0x00000000
	w2 = w1
	w0 = 0x00000002
	x3 = 0x0000000000000000
	call rl_add_undo (retsize: 0;)
	x1 = 0x00000000004E2000
	x1 = x1 + 0xFFFFFFFFFFFFFAA8
	w2 = Mem0[x1 + 12:word32]
	w0 = 0x00000000
	w2 = w2 + 0x00000001
	Mem0[x1 + 12:word32] = w2
	x29 = Mem0[sp:word64]
	sp = sp + 8
	x30 = Mem0[sp:word64]
	sp = sp + 16
	return
	// succ:  rl_begin_undo_group_exit
rl_begin_undo_group_exit:


// rl_end_undo_group
// Return size: 0
void rl_end_undo_group()
rl_end_undo_group_entry:
	// succ:  l000000000049F51C
l000000000049F51C:
	sp = fp
	sp = sp + -16
	Mem0[sp:word64] = x29
	sp = sp + 8
	Mem0[sp:word64] = x30
	x29 = x31 + 0x0000000000000000
	w1 = 0x00000000
	w2 = w1
	w0 = 0x00000003
	x3 = 0x0000000000000000
	call rl_add_undo (retsize: 0;)
	x1 = 0x00000000004E2000
	x1 = x1 + 0xFFFFFFFFFFFFFAA8
	w2 = Mem0[x1 + 12:word32]
	w0 = 0x00000000
	w2 = w2 - 0x00000001
	Mem0[x1 + 12:word32] = w2
	x29 = Mem0[sp:word64]
	sp = sp + 8
	x30 = Mem0[sp:word64]
	sp = sp + 16
	return
	// succ:  rl_end_undo_group_exit
rl_end_undo_group_exit:


// rl_modifying
// Return size: 0
void rl_modifying()
rl_modifying_entry:
	// succ:  l000000000049F558
l000000000049F558:
	sp = fp
	sp = sp + -48
	Mem0[sp:word64] = x29
	sp = sp + 8
	Mem0[sp:word64] = x30
	x29 = x31 + 0x0000000000000000
	v8 = sp + 16
	Mem0[v8:word64] = x19
	v8 = v8 + 8
	Mem0[v8:word64] = x20
	NZCV = cond(w0 - w1)
	w20 = w0
	w19 = w1
	branch Test(GT,NZV) l000000000049F588
	// succ:  l000000000049F574 l000000000049F588
l000000000049F574:
	branch Test(NE,Z) l000000000049F590
	// succ:  l000000000049F578 l000000000049F590
l000000000049F578:
	w0 = 0x00000000
	v16 = sp + 16
	x19 = Mem0[v16:word64]
	v16 = v16 + 8
	x20 = Mem0[v16:word64]
	x29 = Mem0[sp:word64]
	sp = sp + 8
	x30 = Mem0[sp:word64]
	sp = sp + 48
	return
	// succ:  rl_modifying_exit
l000000000049F588:
	w20 = w1
	w19 = w0
	// succ:  l000000000049F590
l000000000049F590:
	w1 = w19
	w0 = w20
	call rl_copy_text (retsize: 0;)
	Mem0[x29 + 32:word64] = x0
	call rl_begin_undo_group (retsize: 0;)
	x3 = Mem0[x29 + 32:word64]
	w1 = w20
	w2 = w19
	w0 = 0x00000000
	call rl_add_undo (retsize: 0;)
	w1 = w20
	w2 = w19
	x3 = 0x0000000000000000
	w0 = 0x00000001
	call rl_add_undo (retsize: 0;)
	call rl_end_undo_group (retsize: 0;)
	w0 = 0x00000000
	v20 = sp + 16
	x19 = Mem0[v20:word64]
	v20 = v20 + 8
	x20 = Mem0[v20:word64]
	x29 = Mem0[sp:word64]
	sp = sp + 8
	x30 = Mem0[sp:word64]
	sp = sp + 48
	return
	// succ:  rl_modifying_exit
rl_modifying_exit:


// rl_revert_line
// Return size: 0
void rl_revert_line()
rl_revert_line_entry:
	// succ:  l000000000049F5E0
l000000000049F5E0:
	sp = fp
	sp = sp + -32
	Mem0[sp:word64] = x29
	sp = sp + 8
	Mem0[sp:word64] = x30
	x29 = x31 + 0x0000000000000000
	Mem0[sp + 16:word64] = x19
	x19 = 0x00000000004E2000
	x19 = x19 + 0xFFFFFFFFFFFFFAA8
	x0 = Mem0[x19:word64]
	branch x0 == 0x0000000000000000 l000000000049F634
	// succ:  l000000000049F5FC l000000000049F634
l000000000049F5FC:
	call rl_do_undo (retsize: 0;)
	x0 = Mem0[x19:word64]
	branch x0 != 0x0000000000000000 l000000000049F5FC
	// succ:  l000000000049F608 l000000000049F5FC
l000000000049F608:
	x1 = 0x00000000004D9000
	w1 = Mem0[x1 + 1208:word32]
	branch w1 != 0x00000000 l000000000049F624
	// succ:  l000000000049F614 l000000000049F624
l000000000049F614:
	x2 = 0x00000000004E4000
	Mem0[x2 + 120:word32] = w0
	x0 = 0x00000000004E4000
	Mem0[x0 + 136:word32] = w1
	// succ:  l000000000049F624
l000000000049F624:
	w0 = 0x00000000
	x19 = Mem0[sp + 16:word64]
	x29 = Mem0[sp:word64]
	sp = sp + 8
	x30 = Mem0[sp:word64]
	sp = sp + 32
	return
	// succ:  rl_revert_line_exit
l000000000049F634:
	call rl_ding (retsize: 0;)
	goto l000000000049F624
	// succ:  l000000000049F624
rl_revert_line_exit:


// rl_undo_command
// Return size: 0
void rl_undo_command()
rl_undo_command_entry:
	// succ:  l000000000049F63C
l000000000049F63C:
	sp = fp
	sp = sp + -32
	Mem0[sp:word64] = x29
	sp = sp + 8
	Mem0[sp:word64] = x30
	x29 = x31 + 0x0000000000000000
	Mem0[sp + 16:word64] = x19
	NZCV = cond(w0 - w31)
	w19 = w0
	branch Test(GT,NZV) l000000000049F65C
	// succ:  l000000000049F654 l000000000049F65C
l000000000049F654:
	goto l000000000049F66C
	// succ:  l000000000049F66C
l000000000049F658:
	branch Test(EQ,Z) l000000000049F66C
	// succ:  l000000000049F65C l000000000049F66C
l000000000049F65C:
	call rl_do_undo (retsize: 0;)
	w19 = w19 - 0x00000001
	NZCV = cond(w19)
	branch w0 != 0x00000000 l000000000049F658
	// succ:  l000000000049F668 l000000000049F658
l000000000049F668:
	call rl_ding (retsize: 0;)
	// succ:  l000000000049F66C
l000000000049F66C:
	w0 = 0x00000000
	x19 = Mem0[sp + 16:word64]
	x29 = Mem0[sp:word64]
	sp = sp + 8
	x30 = Mem0[sp:word64]
	sp = sp + 32
	return
	// succ:  rl_undo_command_exit
rl_undo_command_exit:


// _rl_push_executing_macro
// Return size: 0
void _rl_push_executing_macro()
_rl_push_executing_macro_entry:
	// succ:  l000000000049F67C
l000000000049F67C:
	sp = fp
	sp = sp + -16
	Mem0[sp:word64] = x29
	sp = sp + 8
	Mem0[sp:word64] = x30
	x29 = x31 + 0x0000000000000000
	x0 = 0x0000000000000018
	call xmalloc (retsize: 0;)
	x1 = 0x00000000004E2000
	x1 = x1 + 0xFFFFFFFFFFFFFAB8
	x4 = Mem0[x1:word64]
	x2 = Mem0[x1 + 16:word64]
	w3 = Mem0[x1 + 8:word32]
	Mem0[x0:word64] = x4
	Mem0[x0 + 16:word32] = w3
	Mem0[x0 + 8:word64] = x2
	Mem0[x1:word64] = x0
	x29 = Mem0[sp:word64]
	sp = sp + 8
	x30 = Mem0[sp:word64]
	sp = sp + 16
	return
	// succ:  _rl_push_executing_macro_exit
_rl_push_executing_macro_exit:


// _rl_with_macro_input
// Return size: 0
void _rl_with_macro_input()
_rl_with_macro_input_entry:
	// succ:  l000000000049F6B8
l000000000049F6B8:
	sp = fp
	sp = sp + -32
	Mem0[sp:word64] = x29
	sp = sp + 8
	Mem0[sp:word64] = x30
	x29 = x31 + 0x0000000000000000
	Mem0[x29 + 16:word64] = x0
	call _rl_push_executing_macro (retsize: 0;)
	x1 = 0x00000000004E1000
	x0 = Mem0[x29 + 16:word64]
	w3 = Mem0[x1 + 3168:word32]
	x2 = 0x00000000004E2000
	x2 = x2 + 0xFFFFFFFFFFFFFAB8
	w3 = w3 | 0x00000800
	Mem0[x2 + 16:word64] = x0
	Mem0[x2 + 8:word32] = 0x00000000
	Mem0[x1 + 3168:word32] = w3
	x29 = Mem0[sp:word64]
	sp = sp + 8
	x30 = Mem0[sp:word64]
	sp = sp + 32
	return
	// succ:  _rl_with_macro_input_exit
_rl_with_macro_input_exit:


// _rl_pop_executing_macro
// Return size: 0
void _rl_pop_executing_macro()
_rl_pop_executing_macro_entry:
	// succ:  l000000000049F6F4
l000000000049F6F4:
	sp = fp
	sp = sp + -32
	Mem0[sp:word64] = x29
	sp = sp + 8
	Mem0[sp:word64] = x30
	x29 = x31 + 0x0000000000000000
	Mem0[sp + 16:word64] = x19
	x19 = 0x00000000004E2000
	x0 = x19 + 0xFFFFFFFFFFFFFAB8
	x0 = Mem0[x0 + 16:word64]
	branch x0 == 0x0000000000000000 l000000000049F714
	// succ:  l000000000049F710 l000000000049F714
l000000000049F710:
	call free (retsize: 0;)
	// succ:  l000000000049F714
l000000000049F714:
	x19 = x19 + 0xFFFFFFFFFFFFFAB8
	x0 = Mem0[x19:word64]
	Mem0[x19 + 16:word64] = 0x0000000000000000
	Mem0[x19 + 8:word32] = 0x00000000
	branch x0 == 0x0000000000000000 l000000000049F758
	// succ:  l000000000049F728 l000000000049F758
l000000000049F728:
	x1 = Mem0[x0:word64]
	x3 = Mem0[x0 + 8:word64]
	w2 = Mem0[x0 + 16:word32]
	Mem0[x19 + 16:word64] = x3
	Mem0[x19 + 8:word32] = w2
	Mem0[x19:word64] = x1
	call xfree (retsize: 0;)
	x0 = Mem0[x19 + 16:word64]
	branch x0 == 0x0000000000000000 l000000000049F758
	// succ:  l000000000049F74C l000000000049F758
l000000000049F74C:
	x19 = Mem0[sp + 16:word64]
	x29 = Mem0[sp:word64]
	sp = sp + 8
	x30 = Mem0[sp:word64]
	sp = sp + 32
	return
	// succ:  _rl_pop_executing_macro_exit
l000000000049F758:
	x0 = 0x00000000004E1000
	w1 = Mem0[x0 + 3168:word32]
	x19 = Mem0[sp + 16:word64]
	w1 = w1 & 0xFFFFF7FF
	Mem0[x0 + 3168:word32] = w1
	x29 = Mem0[sp:word64]
	sp = sp + 8
	x30 = Mem0[sp:word64]
	sp = sp + 32
	return
	// succ:  _rl_pop_executing_macro_exit
_rl_pop_executing_macro_exit:


// _rl_next_macro_key
// Return size: 0
void _rl_next_macro_key()
_rl_next_macro_key_entry:
	// succ:  l000000000049F774
l000000000049F774:
	sp = fp
	sp = sp + -48
	Mem0[sp:word64] = x29
	sp = sp + 8
	Mem0[sp:word64] = x30
	x29 = x31 + 0x0000000000000000
	v8 = sp + 16
	Mem0[v8:word64] = x19
	v8 = v8 + 8
	Mem0[v8:word64] = x20
	x20 = 0x00000000004E2000
	x19 = x20 + 0xFFFFFFFFFFFFFAB8
	x1 = Mem0[x19 + 16:word64]
	branch x1 != 0x0000000000000000 l000000000049F7A0
	// succ:  l000000000049F790 l000000000049F7A0
l000000000049F790:
	goto l000000000049F7E8
	// succ:  l000000000049F7E8
l000000000049F794:
	call _rl_pop_executing_macro (retsize: 0;)
	x1 = Mem0[x19 + 16:word64]
	branch x1 == 0x0000000000000000 l000000000049F7E8
	// succ:  l000000000049F7A0 l000000000049F7E8
l000000000049F7A0:
	w2 = Mem0[x19 + 8:word32]
	v12 = Mem0[x1 + (int64) ((int32) w2):byte]
	w0 = (word32) v12
	branch w0 == 0x00000000 l000000000049F794
	// succ:  l000000000049F7AC l000000000049F794
l000000000049F7AC:
	x3 = 0x00000000004E1000
	w2 = w2 + 0x00000001
	x20 = x20 + 0xFFFFFFFFFFFFFAB8
	w3 = Mem0[x3 + 3168:word32]
	Mem0[x20 + 8:word32] = w2
	branch (w3 & 0x00000000) == 0x00000000 l000000000049F7EC
	// succ:  l000000000049F7C4 l000000000049F7EC
l000000000049F7C4:
	w4 = 0x00000048
	NZ = cond(w3 & w4)
	C = false
	V = false
	branch Test(EQ,Z) l000000000049F7EC
	// succ:  l000000000049F7D0 l000000000049F7EC
l000000000049F7D0:
	v21 = Mem0[x1 + (int64) ((int32) w2):byte]
	w1 = (word32) v21
	branch w1 != 0x00000000 l000000000049F7EC
	// succ:  l000000000049F7D8 l000000000049F7EC
l000000000049F7D8:
	Mem0[x29 + 32:word64] = x0
	call _rl_pop_executing_macro (retsize: 0;)
	x0 = Mem0[x29 + 32:word64]
	goto l000000000049F7EC
	// succ:  l000000000049F7EC
l000000000049F7E8:
	w0 = 0x00000000
	// succ:  l000000000049F7EC
l000000000049F7EC:
	v23 = sp + 16
	x19 = Mem0[v23:word64]
	v23 = v23 + 8
	x20 = Mem0[v23:word64]
	x29 = Mem0[sp:word64]
	sp = sp + 8
	x30 = Mem0[sp:word64]
	sp = sp + 48
	return
	// succ:  _rl_next_macro_key_exit
_rl_next_macro_key_exit:


// _rl_add_macro_char
// Return size: 0
void _rl_add_macro_char()
_rl_add_macro_char_entry:
	// succ:  l000000000049F7F8
l000000000049F7F8:
	sp = fp
	sp = sp + -48
	Mem0[sp:word64] = x29
	sp = sp + 8
	Mem0[sp:word64] = x30
	x29 = x31 + 0x0000000000000000
	v8 = sp + 16
	Mem0[v8:word64] = x19
	v8 = v8 + 8
	Mem0[v8:word64] = x20
	x20 = 0x00000000004E2000
	x19 = x20 + 0xFFFFFFFFFFFFFAB8
	w3 = Mem0[x19 + 24:word32]
	w2 = Mem0[x19 + 28:word32]
	w1 = w3 + 0x00000001
	Mem0[sp + 32:word64] = x21
	NZCV = cond(w1 - w2)
	w21 = w0
	branch Test(LT,NV) l000000000049F870
	// succ:  l000000000049F828 l000000000049F870
l000000000049F828:
	x0 = Mem0[x19 + 32:word64]
	branch x0 == 0x0000000000000000 l000000000049F894
	// succ:  l000000000049F830 l000000000049F894
l000000000049F830:
	w2 = w2 + 0x00000019
l000000000049F850:
	Mem0[x2 + (int64) ((int32) w3):byte] = (byte) w21
	Mem0[x2 + (int64) ((int32) w1):byte] = 0x00
	x20 = x20 + 0xFFFFFFFFFFFFFAB8
	Mem0[x20 + 24:word32] = w1
	x21 = Mem0[sp + 32:word64]
	v20 = sp + 16
	x19 = Mem0[v20:word64]
	v20 = v20 + 8
	x20 = Mem0[v20:word64]
	x29 = Mem0[sp:word64]
	sp = sp + 8
	x30 = Mem0[sp:word64]
	sp = sp + 48
	return
	// succ:  _rl_add_macro_char_exit
l000000000049F870:
	x2 = Mem0[x19 + 32:word64]
	x20 = x20 + 0xFFFFFFFFFFFFFAB8
	Mem0[x2 + (int64) ((int32) w3):byte] = (byte) w21
	Mem0[x2 + (int64) ((int32) w1):byte] = 0x00
	Mem0[x20 + 24:word32] = w1
	x21 = Mem0[sp + 32:word64]
	v19 = sp + 16
	x19 = Mem0[v19:word64]
	v19 = v19 + 8
	x20 = Mem0[v19:word64]
	x29 = Mem0[sp:word64]
	sp = sp + 8
	x30 = Mem0[sp:word64]
	sp = sp + 48
	return
	// succ:  _rl_add_macro_char_exit
l000000000049F894:
	w1 = 0x00000019
	x0 = 0x0000000000000019
	Mem0[x19 + 28:word32] = w1
	call xmalloc (retsize: 0;)
	w3 = Mem0[x19 + 24:word32]
	Mem0[x19 + 32:word64] = x0
	w1 = w3 + 0x00000001
	x2 = x0
	goto l000000000049F850
	// succ:  l000000000049F850
_rl_add_macro_char_exit:


// _rl_kill_kbd_macro
// Return size: 0
void _rl_kill_kbd_macro()
_rl_kill_kbd_macro_entry:
	// succ:  l000000000049F8B8
l000000000049F8B8:
	sp = fp
	sp = sp + -32
	Mem0[sp:word64] = x29
	sp = sp + 8
	Mem0[sp:word64] = x30
	x29 = x31 + 0x0000000000000000
	v8 = sp + 16
	Mem0[v8:word64] = x19
	v8 = v8 + 8
	Mem0[v8:word64] = x20
	x19 = 0x00000000004E2000
	x20 = x19 + 0xFFFFFFFFFFFFFAB8
	x0 = Mem0[x20 + 32:word64]
	branch x0 == 0x0000000000000000 l000000000049F8DC
	// succ:  l000000000049F8D4 l000000000049F8DC
l000000000049F8D4:
	call xfree (retsize: 0;)
	Mem0[x20 + 32:word64] = 0x0000000000000000
	// succ:  l000000000049F8DC
l000000000049F8DC:
	x1 = x19 + 0xFFFFFFFFFFFFFAB8
	x0 = Mem0[x1 + 16:word64]
	Mem0[x1 + 24:word32] = 0x00000000
	Mem0[x1 + 28:word32] = 0x00000000
	branch x0 == 0x0000000000000000 l000000000049F8F4
	// succ:  l000000000049F8F0 l000000000049F8F4
l000000000049F8F0:
	call free (retsize: 0;)
	// succ:  l000000000049F8F4
l000000000049F8F4:
	x0 = 0x00000000004E1000
	w1 = Mem0[x0 + 3168:word32]
	x19 = x19 + 0xFFFFFFFFFFFFFAB8
	w1 = w1 & 0xFFFFEFFF
	Mem0[x19 + 16:word64] = 0x0000000000000000
	Mem0[x19 + 8:word32] = 0x00000000
	Mem0[x0 + 3168:word32] = w1
	v12 = sp + 16
	x19 = Mem0[v12:word64]
	v12 = v12 + 8
	x20 = Mem0[v12:word64]
	x29 = Mem0[sp:word64]
	sp = sp + 8
	x30 = Mem0[sp:word64]
	sp = sp + 32
	return
	// succ:  _rl_kill_kbd_macro_exit
_rl_kill_kbd_macro_exit:


// rl_start_kbd_macro
// Return size: 0
void rl_start_kbd_macro()
rl_start_kbd_macro_entry:
	// succ:  l000000000049F91C
l000000000049F91C:
	sp = fp
	sp = sp + -64
	Mem0[sp:word64] = x29
	sp = sp + 8
	Mem0[sp:word64] = x30
	x29 = x31 + 0x0000000000000000
	v8 = sp + 16
	Mem0[v8:word64] = x19
	v8 = v8 + 8
	Mem0[v8:word64] = x20
	x19 = 0x00000000004E1000
	w1 = Mem0[x19 + 3168:word32]
	Mem0[sp + 32:word64] = x21
	w20 = w1 & 0x00001000
	branch (w1 & 0x00001000) == 0x00000000 l000000000049F9B4
	// succ:  l000000000049F93C l000000000049F9B4
l000000000049F93C:
	x0 = 0x00000000004E1000
	w0 = Mem0[x0 + 3332:word32]
	branch w0 != 0x00000000 l000000000049F970
	// succ:  l000000000049F948 l000000000049F970
l000000000049F948:
	x0 = 0x00000000004E2000
	x0 = x0 + 0xFFFFFFFFFFFFFAB8
	Mem0[x0 + 24:word32] = w20
	// succ:  l000000000049F954
l000000000049F954:
	w1 = w1 | 0x00001000
	Mem0[x19 + 3168:word32] = w1
	// succ:  l000000000049F95C
l000000000049F95C:
	w0 = w20
	x21 = Mem0[sp + 32:word64]
	v14 = sp + 16
	x19 = Mem0[v14:word64]
	v14 = v14 + 8
	x20 = Mem0[v14:word64]
	x29 = Mem0[sp:word64]
	sp = sp + 8
	x30 = Mem0[sp:word64]
	sp = sp + 64
	return
	// succ:  rl_start_kbd_macro_exit
l000000000049F970:
	x21 = 0x00000000004E2000
	x21 = x21 + 0xFFFFFFFFFFFFFAB8
	x0 = Mem0[x21 + 32:word64]
	branch x0 == 0x0000000000000000 l000000000049F954
	// succ:  l000000000049F980 l000000000049F954
l000000000049F980:
	strlen(x0)
	sp = sp + 0xFFFFFFFFFFFFFFF8
	x0 = x0 + 0x0000000000000001
	call xmalloc (retsize: 0;)
	x1 = Mem0[x21 + 32:word64]
	strcpy(x0, x1)
	sp = sp + 0xFFFFFFFFFFFFFFF8
	Mem0[x29 + 48:word64] = x0
	call _rl_push_executing_macro (retsize: 0;)
	w1 = Mem0[x19 + 3168:word32]
	x0 = Mem0[x29 + 48:word64]
	Mem0[x21 + 8:word32] = w20
	Mem0[x21 + 16:word64] = x0
	w1 = w1 | 0x00000800
	goto l000000000049F954
	// succ:  l000000000049F954
l000000000049F9B4:
	call _rl_abort_internal (retsize: 0;)
	w20 = 0xFFFFFFFF
	goto l000000000049F95C
	// succ:  l000000000049F95C
rl_start_kbd_macro_exit:


// rl_call_last_kbd_macro
// Return size: 0
void rl_call_last_kbd_macro()
rl_call_last_kbd_macro_entry:
	// succ:  l000000000049F9C0
l000000000049F9C0:
	sp = fp
	sp = sp + -64
	Mem0[sp:word64] = x29
	sp = sp + 8
	Mem0[sp:word64] = x30
	x29 = x31 + 0x0000000000000000
	v6 = sp + 16
	Mem0[v6:word64] = x19
	v6 = v6 + 8
	Mem0[v6:word64] = x20
	x19 = 0x00000000004E2000
	x1 = x19 + 0xFFFFFFFFFFFFFAB8
	x1 = Mem0[x1 + 32:word64]
	Mem0[sp + 32:word64] = x21
	w20 = w0
	branch x1 == 0x0000000000000000 l000000000049FA80
	// succ:  l000000000049F9E4 l000000000049FA80
l000000000049F9E4:
	x21 = 0x00000000004E1000
	w1 = Mem0[x21 + 3168:word32]
	branch (w1 & 0x00001000) == 0x00000000 l000000000049FA50
	// succ:  l000000000049F9F0 l000000000049FA50
l000000000049F9F0:
	x19 = x19 + 0xFFFFFFFFFFFFFAB8
	x21 = x21 + 0xFFFFFFFFFFFFFC60
	branch w20 == 0x00000000 l000000000049FA3C
	// succ:  l000000000049F9FC l000000000049FA3C
l000000000049F9FC:
	x0 = Mem0[x19 + 32:word64]
	strlen(x0)
	sp = sp + 0xFFFFFFFFFFFFFFF8
	x0 = x0 + 0x0000000000000001
	call xmalloc (retsize: 0;)
	x1 = Mem0[x19 + 32:word64]
	strcpy(x0, x1)
	sp = sp + 0xFFFFFFFFFFFFFFF8
	Mem0[x29 + 48:word64] = x0
	call _rl_push_executing_macro (retsize: 0;)
	w1 = Mem0[x21:word32]
	x0 = Mem0[x29 + 48:word64]
	w1 = w1 | 0x00000800
	Mem0[x19 + 16:word64] = x0
	Mem0[x19 + 8:word32] = 0x00000000
	Mem0[x21:word32] = w1
	w20 = w20 - 0x00000001
	NZCV = cond(w20)
	branch Test(NE,Z) l000000000049F9FC
	// succ:  l000000000049FA3C l000000000049F9FC
l000000000049FA3C:
	w0 = 0x00000000
	v17 = sp + 16
	x19 = Mem0[v17:word64]
	v17 = v17 + 8
	x20 = Mem0[v17:word64]
	x21 = Mem0[sp + 32:word64]
	x29 = Mem0[sp:word64]
	sp = sp + 8
	x30 = Mem0[sp:word64]
	sp = sp + 64
	return
	// succ:  rl_call_last_kbd_macro_exit
l000000000049FA50:
	call rl_ding (retsize: 0;)
	x19 = x19 + 0xFFFFFFFFFFFFFAB8
	w0 = Mem0[x19 + 24:word32]
	x1 = Mem0[x19 + 32:word64]
	w0 = w0 - 0x00000001
	Mem0[x1 + (int64) ((int32) w0):byte] = 0x00
	Mem0[x19 + 24:word32] = w0
	x21 = Mem0[sp + 32:word64]
	w0 = 0x00000000
	v18 = sp + 16
	x19 = Mem0[v18:word64]
	v18 = v18 + 8
	x20 = Mem0[v18:word64]
	x29 = Mem0[sp:word64]
	sp = sp + 8
	x30 = Mem0[sp:word64]
	sp = sp + 64
	return
	// succ:  rl_call_last_kbd_macro_exit
l000000000049FA80:
	call _rl_abort_internal (retsize: 0;)
	goto l000000000049F9E4
	// succ:  l000000000049F9E4
rl_call_last_kbd_macro_exit:


// rl_end_kbd_macro
// Return size: 0
void rl_end_kbd_macro()
rl_end_kbd_macro_entry:
	// succ:  l000000000049FA88
l000000000049FA88:
	sp = fp
	sp = sp + -16
	Mem0[sp:word64] = x29
	sp = sp + 8
	Mem0[sp:word64] = x30
	x29 = x31 + 0x0000000000000000
	x2 = 0x00000000004E1000
	w1 = Mem0[x2 + 3168:word32]
	branch (w1 & 0x00001000) == 0x00000000 l000000000049FAE4
	// succ:  l000000000049FA9C l000000000049FAE4
l000000000049FA9C:
	x3 = 0x00000000004E2000
	x1 = 0x00000000004E1000
	x3 = x3 + 0xFFFFFFFFFFFFFAB8
	w1 = Mem0[x1 + 3272:word32]
	w5 = Mem0[x3 + 24:word32]
	w4 = 0x00000001
	w4 = w4 - w1
	x1 = Mem0[x3 + 32:word64]
	w4 = w4 + w5
	Mem0[x1 + (int64) ((int32) w4):byte] = 0x00
	w1 = Mem0[x2 + 3168:word32]
	x29 = Mem0[sp:word64]
	sp = sp + 8
	x30 = Mem0[sp:word64]
	sp = sp + 16
	w5 = w1 & 0xFFFFEFFF
	w0 = w0 - 0x00000001
	w1 = 0x00000000
	Mem0[x3 + 24:word32] = w4
	Mem0[x2 + 3168:word32] = w5
	// succ:  l000000000049FAE0_thunk_rl_call_last_kbd_macro
l000000000049FAE0_thunk_rl_call_last_kbd_macro:
	call rl_call_last_kbd_macro (retsize: 0;)
	return
	// succ:  rl_end_kbd_macro_exit
l000000000049FAE4:
	call _rl_abort_internal (retsize: 0;)
	w0 = 0xFFFFFFFF
	x29 = Mem0[sp:word64]
	sp = sp + 8
	x30 = Mem0[sp:word64]
	sp = sp + 16
	return
	// succ:  rl_end_kbd_macro_exit
rl_end_kbd_macro_exit:


// rl_push_macro_input
// Return size: 0
void rl_push_macro_input()
rl_push_macro_input_entry:
	// succ:  l000000000049FAF4
l000000000049FAF4:
	sp = fp
	sp = sp + -32
	Mem0[sp:word64] = x29
	sp = sp + 8
	Mem0[sp:word64] = x30
	x29 = x31 + 0x0000000000000000
	Mem0[x29 + 16:word64] = x0
	call _rl_push_executing_macro (retsize: 0;)
	x1 = 0x00000000004E1000
	x0 = Mem0[x29 + 16:word64]
	w3 = Mem0[x1 + 3168:word32]
	x2 = 0x00000000004E2000
	x2 = x2 + 0xFFFFFFFFFFFFFAB8
	w3 = w3 | 0x00000800
	Mem0[x2 + 16:word64] = x0
	Mem0[x2 + 8:word32] = 0x00000000
	Mem0[x1 + 3168:word32] = w3
	x29 = Mem0[sp:word64]
	sp = sp + 8
	x30 = Mem0[sp:word64]
	sp = sp + 32
	return
	// succ:  rl_push_macro_input_exit
rl_push_macro_input_exit:


// rl_getc
// Return size: 0
void rl_getc()
rl_getc_entry:
	// succ:  l000000000049FB30
l000000000049FB30:
	sp = fp
	sp = sp + -48
	Mem0[sp:word64] = x29
	sp = sp + 8
	Mem0[sp:word64] = x30
	x29 = x31 + 0x0000000000000000
	v8 = sp + 16
	Mem0[v8:word64] = x19
	v8 = v8 + 8
	Mem0[v8:word64] = x20
	x19 = 0x00000000004E2000
	x20 = x0
	x19 = x19 + 0xFFFFFFFFFFFFFA70
	goto l000000000049FB84
	// succ:  l000000000049FB84
l000000000049FB4C:
	x0 = x20
	fileno(x0)
	sp = sp + 0xFFFFFFFFFFFFFFF8
	x1 = x29 + 0x0000000000000020
	x2 = 0x0000000000000001
	read(x0, x1, x2)
	sp = sp + 0xFFFFFFFFFFFFFFF8
	w31 = w0 - 0x00000001
	NZCV = cond(w31)
	branch Test(EQ,Z) l000000000049FBB0
	// succ:  l000000000049FB68 l000000000049FBB0
l000000000049FB68:
	branch w0 == 0x00000000 l000000000049FBD0
	// succ:  l000000000049FB6C l000000000049FBD0
l000000000049FB6C:
	__errno_location()
	sp = sp + 0xFFFFFFFFFFFFFFF8
	w1 = Mem0[x0:word32]
	w31 = w1 - 0x0000000B
	NZCV = cond(w31)
	branch Test(EQ,Z) l000000000049FBC0
	// succ:  l000000000049FB7C l000000000049FBC0
l000000000049FB7C:
	w31 = w1 - 0x00000004
	NZCV = cond(w31)
	branch Test(NE,Z) l000000000049FBE0
	// succ:  l000000000049FB84 l000000000049FBE0
l000000000049FB84:
	w1 = Mem0[x19:word32]
	branch w1 == 0x00000000 l000000000049FB4C
	// succ:  l000000000049FB8C l000000000049FB4C
l000000000049FB8C:
	w0 = Mem0[x19:word32]
	call _rl_signal_handler (retsize: 0;)
	x0 = x20
	fileno(x0)
	sp = sp + 0xFFFFFFFFFFFFFFF8
	x1 = x29 + 0x0000000000000020
	x2 = 0x0000000000000001
	read(x0, x1, x2)
	sp = sp + 0xFFFFFFFFFFFFFFF8
	w31 = w0 - 0x00000001
	NZCV = cond(w31)
	branch Test(NE,Z) l000000000049FB68
	// succ:  l000000000049FBB0 l000000000049FB68
l000000000049FBB0:
	v17 = Mem0[x29 + 32:byte]
	w0 = (word32) v17
	v18 = sp + 16
	x19 = Mem0[v18:word64]
	v18 = v18 + 8
	x20 = Mem0[v18:word64]
	x29 = Mem0[sp:word64]
	sp = sp + 8
	x30 = Mem0[sp:word64]
	sp = sp + 48
	return
	// succ:  rl_getc_exit
l000000000049FBC0:
	x0 = x20
	fileno(x0)
	sp = sp + 0xFFFFFFFFFFFFFFF8
	call sh_unset_nodelay_mode (retsize: 0;)
	branch (w0 & 0x00000000) == 0x00000000 l000000000049FB84
	// succ:  l000000000049FBD0 l000000000049FB84
l000000000049FBD0:
	w0 = 0xFFFFFFFF
	v19 = sp + 16
	x19 = Mem0[v19:word64]
	v19 = v19 + 8
	x20 = Mem0[v19:word64]
	x29 = Mem0[sp:word64]
	sp = sp + 8
	x30 = Mem0[sp:word64]
	sp = sp + 48
	return
	// succ:  rl_getc_exit
l000000000049FBE0:
	x0 = 0x00000000004E1000
	w0 = Mem0[x0 + 3168:word32]
	v20 = sp + 16
	x19 = Mem0[v20:word64]
	v20 = v20 + 8
	x20 = Mem0[v20:word64]
	w0 = w0 & 0x00000008
	NZCV = cond(w0 - w31)
	w0 = 0xFFFFFFFE
rl_getc_exit:


// _rl_any_typein
// Return size: 0
void _rl_any_typein()
_rl_any_typein_entry:
	// succ:  l000000000049FC04
l000000000049FC04:
	sp = fp
	x0 = 0x00000000004E2000
	x0 = x0 + 0xFFFFFFFFFFFFFAE0
	w1 = Mem0[x0:word32]
	w0 = Mem0[x0 + 4:word32]
	NZCV = cond(w1 - w0)
	w0 = (word32) Test(NE,Z)
	return
	// succ:  _rl_any_typein_exit
_rl_any_typein_exit:


// _rl_unget_char
// Return size: 0
void _rl_unget_char()
_rl_unget_char_entry:
	// succ:  l000000000049FC20
l000000000049FC20:
	sp = fp
	x2 = 0x00000000004E2000
	x3 = x2 + 0xFFFFFFFFFFFFFAE0
	w1 = Mem0[x3 + 4:word32]
	w3 = Mem0[x3:word32]
	w4 = w0
	NZCV = cond(w1 - w3)
	w0 = w1 - w3
	branch Test(LE,ZCV) l000000000049FC6C
	// succ:  l000000000049FC40 l000000000049FC6C
l000000000049FC40:
	w0 = w0 - 0x00000001
	// succ:  l000000000049FC44
l000000000049FC44:
	branch w0 == 0x00000000 l000000000049FC68
	// succ:  l000000000049FC48 l000000000049FC68
l000000000049FC48:
	w1 = w1 - 0x00000001
	NZCV = cond(w1)
	branch Test(LT,N) l000000000049FC74
	// succ:  l000000000049FC50 l000000000049FC74
l000000000049FC50:
	x0 = x2 + 0xFFFFFFFFFFFFFAE0
	x2 = x2 + 0xFFFFFFFFFFFFFAE0
	x2 = x2 + 0x0000000000000008
	Mem0[x0 + 4:word32] = w1
	Mem0[x2 + (int64) ((int32) w1):byte] = (byte) w4
	w0 = 0x00000001
	// succ:  l000000000049FC68
l000000000049FC68:
	return
	// succ:  _rl_unget_char_exit
l000000000049FC6C:
	w0 = w0 + 0x000001FF
	goto l000000000049FC44
	// succ:  l000000000049FC44
l000000000049FC74:
	x0 = x2 + 0xFFFFFFFFFFFFFAE0
	x2 = x2 + 0xFFFFFFFFFFFFFAE0
	w1 = 0x000001FF
	x2 = x2 + 0x0000000000000008
	Mem0[x0 + 4:word32] = w1
	Mem0[x2 + (int64) ((int32) w1):byte] = (byte) w4
	w0 = 0x00000001
	goto l000000000049FC68
	// succ:  l000000000049FC68
_rl_unget_char_exit:


// _rl_pushed_input_available
// Return size: 0
void _rl_pushed_input_available()
_rl_pushed_input_available_entry:
	// succ:  l000000000049FC94
l000000000049FC94:
	sp = fp
	x0 = 0x00000000004E2000
	x0 = x0 + 0xFFFFFFFFFFFFFAE0
	w1 = Mem0[x0:word32]
	w0 = Mem0[x0 + 4:word32]
	NZCV = cond(w1 - w0)
	w0 = (word32) Test(NE,Z)
	return
	// succ:  _rl_pushed_input_available_exit
_rl_pushed_input_available_exit:


// rl_set_keyboard_input_timeout
// Return size: 0
void rl_set_keyboard_input_timeout()
rl_set_keyboard_input_timeout_entry:
	// succ:  l000000000049FCB0
l000000000049FCB0:
	sp = fp
	x1 = 0x00000000004DE000
	x1 = x1 + 0x00000000000005E8
	w2 = Mem0[x1:word32]
	branch (w0 & 0x00000000) == 0x00000000 l000000000049FCC4
	// succ:  l000000000049FCC0 l000000000049FCC4
l000000000049FCC0:
	Mem0[x1:word32] = w0
	// succ:  l000000000049FCC4
l000000000049FCC4:
	w0 = w2
	return
	// succ:  rl_set_keyboard_input_timeout_exit
rl_set_keyboard_input_timeout_exit:


// _rl_input_available
// Return size: 0
void _rl_input_available()
_rl_input_available_entry:
	// succ:  l000000000049FCCC
l000000000049FCCC:
	sp = fp
	sp = sp + -320
	Mem0[sp:word64] = x29
	sp = sp + 8
	Mem0[sp:word64] = x30
	x29 = x31 + 0x0000000000000000
	x0 = 0x00000000004E1000
	x0 = Mem0[x0 + 3192:word64]
	v9 = sp + 16
	Mem0[v9:word64] = x19
	v9 = v9 + 8
	Mem0[v9:word64] = x20
	v12 = sp + 32
	Mem0[v12:word64] = x21
	v12 = v12 + 8
	Mem0[v12:word64] = x22
	x19 = x29 + 0x00000000000000B0
	fileno(x0)
	sp = sp + 0xFFFFFFFFFFFFFFF8
	w20 = w0
	x2 = x19
	x3 = x19 + 0x0000000000000080
	// succ:  l000000000049FCF8
l000000000049FCF8:
	Mem0[x2:word64] = 0x0000000000000000
	x2 = x2 + 8
	x31 = x2 - x3
	NZCV = cond(x31)
	branch Test(NE,Z) l000000000049FCF8
	// succ:  l000000000049FD04 l000000000049FCF8
l000000000049FD04:
	x2 = x29 + 0x0000000000000030
	x3 = x29 + 0x00000000000000B0
	// succ:  l000000000049FD0C
l000000000049FD0C:
	Mem0[x2:word64] = 0x0000000000000000
	x2 = x2 + 8
	x31 = x2 - x3
	NZCV = cond(x31)
	branch Test(NE,Z) l000000000049FD0C
	// succ:  l000000000049FD18 l000000000049FD0C
l000000000049FD18:
_rl_input_available_exit:


// _rl_input_queued
// Return size: 0
void _rl_input_queued()
_rl_input_queued_entry:
	// succ:  l000000000049FDB0
l000000000049FDB0:
	sp = fp
	sp = sp + -32
	Mem0[sp:word64] = x29
	sp = sp + 8
	Mem0[sp:word64] = x30
	x29 = x31 + 0x0000000000000000
	v8 = sp + 16
	Mem0[v8:word64] = x19
	v8 = v8 + 8
	Mem0[v8:word64] = x20
	x20 = 0x00000000004DE000
	x1 = x20 + 0x00000000000005E8
	w19 = Mem0[x1:word32]
	branch (w0 & 0x00000000) == 0x00000000 l000000000049FDD0
	// succ:  l000000000049FDCC l000000000049FDD0
l000000000049FDCC:
	Mem0[x1:word32] = w0
	// succ:  l000000000049FDD0
l000000000049FDD0:
	call _rl_input_available (retsize: 0;)
	branch (w19 & 0x00000000) == 0x00000000 l000000000049FDE0
	// succ:  l000000000049FDD8 l000000000049FDE0
l000000000049FDD8:
	x20 = x20 + 0x00000000000005E8
	Mem0[x20:word32] = w19
	// succ:  l000000000049FDE0
l000000000049FDE0:
	v12 = sp + 16
	x19 = Mem0[v12:word64]
	v12 = v12 + 8
	x20 = Mem0[v12:word64]
	x29 = Mem0[sp:word64]
	sp = sp + 8
	x30 = Mem0[sp:word64]
	sp = sp + 32
	return
	// succ:  _rl_input_queued_exit
_rl_input_queued_exit:


// _rl_insert_typein
// Return size: 0
void _rl_insert_typein()
_rl_insert_typein_entry:
	// succ:  l000000000049FDEC
l000000000049FDEC:
	sp = fp
	sp = sp + -32
	Mem0[sp:word64] = x29
	sp = sp + 8
	Mem0[sp:word64] = x30
	x29 = x31 + 0x0000000000000000
	v8 = sp + 16
	Mem0[v8:word64] = x19
	v8 = v8 + 8
	Mem0[v8:word64] = x20
	w19 = w0
	x0 = 0x0000000000000200
	call xmalloc (retsize: 0;)
	x12 = 0x00000000004E2000
	x10 = x12 + 0xFFFFFFFFFFFFFAE0
	w8 = Mem0[x10:word32]
	w1 = Mem0[x10 + 4:word32]
	Mem0[x0:byte] = (byte) w19
	NZCV = cond(w8 - w1)
	x20 = x0
	branch Test(EQ,Z) l000000000049FED4
	// succ:  l000000000049FE24 l000000000049FED4
l000000000049FE24:
	x9 = 0x00000000004A2000
	x6 = x0 + 0x0000000000000001
	w19 = 0x00000001
	x11 = 0x00000000004D9000
	x9 = x9 + 0xFFFFFFFFFFFFFD50
	x2 = x10 + 0x0000000000000008
	v22 = Mem0[x2 + (int64) ((int32) w1):byte]
	w0 = (word32) v22
	x4 = Mem0[x11 + 1200:word64]
l000000000049FE8C:
	Mem0[x20 + x19:byte] = 0x00
	x0 = x20
	call rl_insert_text (retsize: 0;)
	x0 = x20
	v24 = sp + 16
	x19 = Mem0[v24:word64]
	v24 = v24 + 8
	x20 = Mem0[v24:word64]
	x29 = Mem0[sp:word64]
	sp = sp + 8
	x30 = Mem0[sp:word64]
	sp = sp + 32
	// succ:  l000000000049FEA4_thunk_xfree
l000000000049FEA4_thunk_xfree:
	call xfree (retsize: 0;)
	return
	// succ:  _rl_insert_typein_exit
l000000000049FED4:
	x19 = 0x0000000000000001
	goto l000000000049FE8C
	// succ:  l000000000049FE8C
_rl_insert_typein_exit:


// rl_stuff_char
// Return size: 0
void rl_stuff_char()
rl_stuff_char_entry:
	// succ:  l000000000049FEDC
l000000000049FEDC:
	sp = fp
	x3 = 0x00000000004E2000
	x1 = x3 + 0xFFFFFFFFFFFFFAE0
	w2 = Mem0[x1 + 4:word32]
	w1 = Mem0[x1:word32]
	w4 = w0
	NZCV = cond(w2 - w1)
	w0 = w2 - w1
	branch Test(LE,ZCV) l000000000049FF38
	// succ:  l000000000049FEFC l000000000049FF38
l000000000049FEFC:
	w0 = w0 - 0x00000001
	// succ:  l000000000049FF00
l000000000049FF00:
	branch w0 == 0x00000000 l000000000049FF34
	// succ:  l000000000049FF04 l000000000049FF34
l000000000049FF04:
	w31 = w4 + 0x00000001
	NZCV = cond(w31)
	branch Test(EQ,Z) l000000000049FF40
	// succ:  l000000000049FF0C l000000000049FF40
l000000000049FF0C:
l000000000049FF10:
	x3 = x3 + 0xFFFFFFFFFFFFFAE0
	w0 = w1 + 0x00000001
	x2 = x3
	Mem0[x2:word32] = w0
	x2 = x2 + 8
	w31 = w0 - 0x000001FF
	NZCV = cond(w31)
	Mem0[x2 + (int64) ((int32) w1):byte] = (byte) w4
	w0 = 0x00000001
	branch Test(LE,ZCV) l000000000049FF34
	// succ:  l000000000049FF30 l000000000049FF34
l000000000049FF30:
	Mem0[x3:word32] = 0x00000000
	// succ:  l000000000049FF34
l000000000049FF34:
	return
	// succ:  rl_stuff_char_exit
l000000000049FF38:
	w0 = w0 + 0x000001FF
	goto l000000000049FF00
	// succ:  l000000000049FF00
l000000000049FF40:
	x0 = 0x00000000004E1000
	w2 = Mem0[x0 + 3168:word32]
	x5 = 0x00000000004E1000
	w2 = w2 | 0x00020000
	Mem0[x5 + 3276:word32] = w4
	Mem0[x0 + 3168:word32] = w2
	w4 = 0x0000000A
	goto l000000000049FF10
	// succ:  l000000000049FF10
rl_stuff_char_exit:


// fn000000000049FF60
// Return size: 0
void fn000000000049FF60()
fn000000000049FF60_entry:
	// succ:  l000000000049FF60
l000000000049FF60:
	sp = fp
	sp = sp + -352
	Mem0[sp:word64] = x29
	sp = sp + 8
	Mem0[sp:word64] = x30
	x29 = x31 + 0x0000000000000000
	v8 = sp + 16
	Mem0[v8:word64] = x19
	v8 = v8 + 8
	Mem0[v8:word64] = x20
	x20 = 0x00000000004E1000
	x0 = Mem0[x20 + 3192:word64]
	v12 = sp + 32
	Mem0[v12:word64] = x21
	v12 = v12 + 8
	Mem0[v12:word64] = x22
	x19 = x29 + 0x00000000000000C0
	v15 = sp + 48
	Mem0[v15:word64] = x23
	v15 = v15 + 8
	Mem0[v15:word64] = x24
	Mem0[x29 + 336:word32] = 0x00000000
	fileno(x0)
	sp = sp + 0xFFFFFFFFFFFFFFF8
	w21 = w0
	x2 = x19
	x3 = x19 + 0x0000000000000080
	// succ:  l000000000049FF94
l000000000049FF94:
	Mem0[x2:word64] = 0x0000000000000000
	x2 = x2 + 8
	x31 = x2 - x3
	NZCV = cond(x31)
	branch Test(NE,Z) l000000000049FF94
	// succ:  l000000000049FFA0 l000000000049FF94
l000000000049FFA0:
	x2 = x29 + 0x0000000000000040
	x3 = x29 + 0x00000000000000C0
	// succ:  l000000000049FFA8
l000000000049FFA8:
	Mem0[x2:word64] = 0x0000000000000000
	x2 = x2 + 8
	x31 = x2 - x3
	NZCV = cond(x31)
	branch Test(NE,Z) l000000000049FFA8
	// succ:  l000000000049FFB4 l000000000049FFA8
l000000000049FFB4:
fn000000000049FF60_exit:


// rl_execute_next
// Return size: 0
void rl_execute_next()
rl_execute_next_entry:
	// succ:  l00000000004A0224
l00000000004A0224:
	sp = fp
	x1 = 0x00000000004E1000
	w2 = Mem0[x1 + 3168:word32]
	x3 = 0x00000000004E1000
	w2 = w2 | 0x00020000
	Mem0[x3 + 3276:word32] = w0
	Mem0[x1 + 3168:word32] = w2
	w0 = 0x00000000
	return
	// succ:  rl_execute_next_exit
rl_execute_next_exit:


// rl_clear_pending_input
// Return size: 0
void rl_clear_pending_input()
rl_clear_pending_input_entry:
	// succ:  l00000000004A0244
l00000000004A0244:
	sp = fp
	x0 = 0x00000000004E1000
	w1 = Mem0[x0 + 3168:word32]
	x2 = 0x00000000004E1000
	w1 = w1 & 0xFFFDFFFF
	Mem0[x0 + 3168:word32] = w1
	Mem0[x2 + 3276:word32] = 0x00000000
	w0 = 0x00000000
	return
	// succ:  rl_clear_pending_input_exit
rl_clear_pending_input_exit:


// rl_read_key
// Return size: 0
void rl_read_key()
rl_read_key_entry:
	// succ:  l00000000004A0264
l00000000004A0264:
	sp = fp
	sp = sp + -48
	Mem0[sp:word64] = x29
	sp = sp + 8
	Mem0[sp:word64] = x30
	x29 = x31 + 0x0000000000000000
	x0 = 0x00000000004E1000
	w2 = Mem0[x0 + 3272:word32]
	x1 = 0x00000000004E1000
	v11 = sp + 16
	Mem0[v11:word64] = x19
	v11 = v11 + 8
	Mem0[v11:word64] = x20
	w2 = w2 + 0x00000001
	w19 = Mem0[x1 + 3276:word32]
	Mem0[sp + 32:word64] = x21
	Mem0[x0 + 3272:word32] = w2
	branch w19 == 0x00000000 l00000000004A02B8
	// succ:  l00000000004A0290 l00000000004A02B8
l00000000004A0290:
	x0 = 0x00000000004E1000
	w2 = Mem0[x0 + 3168:word32]
	Mem0[x1 + 3276:word32] = 0x00000000
	w2 = w2 & 0xFFFDFFFF
	Mem0[x0 + 3168:word32] = w2
	// succ:  l00000000004A02A4
l00000000004A02A4:
	w0 = w19
	x21 = Mem0[sp + 32:word64]
	v15 = sp + 16
	x19 = Mem0[v15:word64]
	v15 = v15 + 8
	x20 = Mem0[v15:word64]
	x29 = Mem0[sp:word64]
	sp = sp + 8
	x30 = Mem0[sp:word64]
	sp = sp + 48
	return
	// succ:  rl_read_key_exit
l00000000004A02B8:
	call _rl_next_macro_key (retsize: 0;)
	w19 = w0
	branch w0 != 0x00000000 l00000000004A02A4
	// succ:  l00000000004A02C4 l00000000004A02A4
l00000000004A02C4:
	x19 = 0x00000000004E2000
	x19 = x19 + 0xFFFFFFFFFFFFFAE0
	x1 = Mem0[x19 + 520:word64]
	branch x1 == 0x0000000000000000 l00000000004A0384
	// succ:  l00000000004A02D4 l00000000004A0384
l00000000004A02D4:
	x20 = 0x00000000004E2000
	x21 = 0x00000000004E4000
	x20 = x20 + 0xFFFFFFFFFFFFFA70
	x21 = x21 + 0x000000000000007C
	goto l00000000004A0300
	// succ:  l00000000004A0300
l00000000004A02E8:
	w0 = Mem0[x21:word32]
	branch w0 != 0x00000000 l00000000004A037C
	// succ:  l00000000004A02F0 l00000000004A037C
l00000000004A02F0:
	x0 = Mem0[x19 + 520:word64]
	call x0 (retsize: 0;)
	// succ:  l00000000004A02F8
l00000000004A02F8:
	x0 = Mem0[x19 + 520:word64]
	branch x0 == 0x0000000000000000 l00000000004A0350
	// succ:  l00000000004A0300 l00000000004A0350
l00000000004A0300:
	w0 = Mem0[x19 + 4:word32]
	w1 = Mem0[x19:word32]
	NZCV = cond(w1 - w0)
	branch Test(NE,Z) l00000000004A0334
	// succ:  l00000000004A0310 l00000000004A0334
l00000000004A0310:
	call fn000000000049FF60 (retsize: 0;)
	w31 = w0 - 0x00000001
	NZCV = cond(w31)
	branch (w0 & 0x00000000) == 0x00000000 l00000000004A0368
	// succ:  l00000000004A031C l00000000004A0368
l00000000004A031C:
	branch Test(EQ,Z) l00000000004A02F8
	// succ:  l00000000004A0320 l00000000004A02F8
l00000000004A0320:
	w0 = Mem0[x20:word32]
	branch w0 == 0x00000000 l00000000004A02E8
	// succ:  l00000000004A0328 l00000000004A02E8
l00000000004A0328:
	w0 = Mem0[x20:word32]
	call _rl_signal_handler (retsize: 0;)
	goto l00000000004A02E8
	// succ:  l00000000004A02E8
l00000000004A0334:
	w1 = w0 + 0x00000001
	x2 = x19 + 0x0000000000000008
	Mem0[x19 + 4:word32] = w1
	w31 = w1 - 0x000001FF
	NZCV = cond(w31)
	v25 = Mem0[x2 + (int64) ((int32) w0):byte]
	w0 = (word32) v25
	branch Test(LE,ZCV) l00000000004A0350
	// succ:  l00000000004A034C l00000000004A0350
l00000000004A034C:
	Mem0[x19 + 4:word32] = 0x00000000
	// succ:  l00000000004A0350
l00000000004A0350:
	w19 = w0
	w0 = w19
	x21 = Mem0[sp + 32:word64]
	v23 = sp + 16
	x19 = Mem0[v23:word64]
	v23 = v23 + 8
	x20 = Mem0[v23:word64]
	x29 = Mem0[sp:word64]
	sp = sp + 8
	x30 = Mem0[sp:word64]
	sp = sp + 48
	return
	// succ:  rl_read_key_exit
l00000000004A0368:
	w1 = 0x00000001
	x0 = 0x00000000004E4000
	Mem0[x0 + 124:word32] = w1
	w19 = 0x0000000A
	goto l00000000004A02A4
	// succ:  l00000000004A02A4
l00000000004A037C:
	w19 = 0x0000000A
	goto l00000000004A02A4
	// succ:  l00000000004A02A4
l00000000004A0384:
	w0 = Mem0[x19 + 4:word32]
	w2 = Mem0[x19:word32]
	NZCV = cond(w2 - w0)
	branch Test(EQ,Z) l00000000004A03CC
	// succ:  l00000000004A0394 l00000000004A03CC
l00000000004A0394:
	w2 = w0 + 0x00000001
	x3 = x19 + 0x0000000000000008
	Mem0[x19 + 4:word32] = w2
	w31 = w2 - 0x000001FF
	NZCV = cond(w31)
	v20 = Mem0[x3 + (int64) ((int32) w0):byte]
	w0 = (word32) v20
	branch Test(LE,ZCV) l00000000004A03B0
	// succ:  l00000000004A03AC l00000000004A03B0
l00000000004A03AC:
	Mem0[x19 + 4:word32] = w1
	// succ:  l00000000004A03B0
l00000000004A03B0:
	x1 = 0x00000000004E2000
	w2 = Mem0[x1 + 2672:word32]
	w19 = w0
	branch w2 == 0x00000000 l00000000004A02A4
	// succ:  l00000000004A03C0 l00000000004A02A4
l00000000004A03C0:
	w0 = Mem0[x1 + 2672:word32]
	call _rl_signal_handler (retsize: 0;)
	goto l00000000004A02A4
	// succ:  l00000000004A02A4
l00000000004A03CC:
	x0 = 0x00000000004DE000
	x0 = x0 + 0x00000000000005E8
	x1 = Mem0[x0 + 8:word64]
	x0 = 0x00000000004E1000
	x0 = Mem0[x0 + 3192:word64]
	call x1 (retsize: 0;)
	goto l00000000004A03B0
	// succ:  l00000000004A03B0
rl_read_key_exit:


// _rl_read_mbchar
// Return size: 0
void _rl_read_mbchar()
_rl_read_mbchar_entry:
	// succ:  l00000000004A03E8
l00000000004A03E8:
	sp = fp
	sp = sp + -96
	Mem0[sp:word64] = x29
	sp = sp + 8
	Mem0[sp:word64] = x30
	x29 = x31 + 0x0000000000000000
	v8 = sp + 32
	Mem0[v8:word64] = x21
	v8 = v8 + 8
	Mem0[v8:word64] = x22
	Mem0[sp + 48:word64] = x23
	v12 = sp + 16
	Mem0[v12:word64] = x19
	v12 = v12 + 8
	Mem0[v12:word64] = x20
	Mem0[x29 + 72:word64] = 0x0000000000000000
	Mem0[x29 + 64:word64] = 0x0000000000000000
	NZCV = cond(w1 - w31)
	w23 = w1
	x22 = x0
	branch Test(LE,ZCV) l00000000004A04CC
	// succ:  l00000000004A0414 l00000000004A04CC
l00000000004A0414:
	x19 = 0x00000000004E1000
	x20 = 0x0000000000000001
	w21 = 0x00000000
	x19 = x19 + 0xFFFFFFFFFFFFFC60
	// succ:  l00000000004A0424
l00000000004A0424:
	w0 = Mem0[x19:word32]
	w0 = w0 | 0x00000040
	Mem0[x19:word32] = w0
	call rl_read_key (retsize: 0;)
	w5 = Mem0[x19:word32]
	w4 = w0
	w5 = w5 & 0xFFFFFFBF
	Mem0[x19:word32] = w5
	x6 = x22 + x20
	x2 = x20
	x0 = x29 + 0x0000000000000050
	x1 = x22
	x3 = x29 + 0x0000000000000048
	branch (w4 & 0x00000000) == 0x00000000 l00000000004A047C
	// succ:  l00000000004A045C l00000000004A047C
l00000000004A045C:
	Mem0[x6 + -1:byte] = (byte) w4
	mbrtowc(x0, x1, x2, x3)
	sp = sp + 0xFFFFFFFFFFFFFFF8
	x31 = x0 + 0x0000000000000001
	NZCV = cond(x31)
	w21 = w21 + 0x00000001
	branch Test(EQ,Z) l00000000004A047C
	// succ:  l00000000004A0470 l00000000004A047C
l00000000004A0470:
	x31 = x0 + 0x0000000000000002
	NZCV = cond(x31)
	branch Test(EQ,Z) l00000000004A0494
	// succ:  l00000000004A0478 l00000000004A0494
l00000000004A0478:
	branch x0 == 0x0000000000000000 l00000000004A04AC
	// succ:  l00000000004A047C l00000000004A04AC
l00000000004A047C:
	w0 = w21
	v28 = sp + 16
	x19 = Mem0[v28:word64]
	v28 = v28 + 8
	x20 = Mem0[v28:word64]
	v29 = sp + 32
	x21 = Mem0[v29:word64]
	v29 = v29 + 8
	x22 = Mem0[v29:word64]
	x23 = Mem0[sp + 48:word64]
	x29 = Mem0[sp:word64]
	sp = sp + 8
	x30 = Mem0[sp:word64]
	sp = sp + 96
	return
	// succ:  _rl_read_mbchar_exit
l00000000004A0494:
	x0 = Mem0[x29 + 64:word64]
	NZCV = cond(w21 - w23)
	Mem0[x29 + 72:word64] = x0
	x20 = x20 + 0x0000000000000001
	branch Test(NE,Z) l00000000004A0424
	// succ:  l00000000004A04A8 l00000000004A0424
l00000000004A04A8:
	goto l00000000004A047C
	// succ:  l00000000004A047C
l00000000004A04AC:
	Mem0[x22:byte] = (byte) w0
	w21 = 0x00000001
	w0 = w21
	v30 = sp + 16
	x19 = Mem0[v30:word64]
	v30 = v30 + 8
	x20 = Mem0[v30:word64]
	v31 = sp + 32
	x21 = Mem0[v31:word64]
	v31 = v31 + 8
	x22 = Mem0[v31:word64]
	x23 = Mem0[sp + 48:word64]
	x29 = Mem0[sp:word64]
	sp = sp + 8
	x30 = Mem0[sp:word64]
	sp = sp + 96
	return
	// succ:  _rl_read_mbchar_exit
l00000000004A04CC:
	w21 = 0x00000000
	goto l00000000004A047C
	// succ:  l00000000004A047C
_rl_read_mbchar_exit:


// _rl_read_mbstring
// Return size: 0
void _rl_read_mbstring()
_rl_read_mbstring_entry:
	// succ:  l00000000004A04D4
l00000000004A04D4:
	sp = fp
	sp = sp + -80
	Mem0[sp:word64] = x29
	sp = sp + 8
	Mem0[sp:word64] = x30
	x29 = x31 + 0x0000000000000000
	v8 = sp + 32
	Mem0[v8:word64] = x21
	v8 = v8 + 8
	Mem0[v8:word64] = x22
	x22 = x1
	Mem0[sp + 48:word64] = x23
	w21 = w0
	w23 = w2
	w1 = 0x00000000
	x0 = x22
_rl_read_mbstring_exit:


// fn00000000004A0590
// Return size: 0
void fn00000000004A0590()
fn00000000004A0590_entry:
	// succ:  l00000000004A0590
l00000000004A0590:
	sp = fp
	sp = sp + -16
	Mem0[sp:word64] = x29
	sp = sp + 8
	Mem0[sp:word64] = x30
	x29 = x31 + 0x0000000000000000
	call rl_initialize (retsize: 0;)
	x0 = 0x00000000004E2000
	x0 = x0 + 0xFFFFFFFFFFFFFCF0
	w1 = Mem0[x0:word32]
	branch w1 != 0x00000000 l00000000004A05D0
	// succ:  l00000000004A05AC l00000000004A05D0
l00000000004A05AC:
	x1 = 0x00000000004DE000
	w2 = 0x00000001
	x1 = Mem0[x1 + 1368:word64]
	Mem0[x0:word32] = w2
	branch x1 == 0x0000000000000000 l00000000004A05CC
	// succ:  l00000000004A05C0 l00000000004A05CC
l00000000004A05C0:
	x0 = 0x00000000004E1000
	w0 = Mem0[x0 + 3320:word32]
	call x1 (retsize: 0;)
	// succ:  l00000000004A05CC
l00000000004A05CC:
	call rl_set_signals (retsize: 0;)
	// succ:  l00000000004A05D0
l00000000004A05D0:
	call readline_internal_setup (retsize: 0;)
	x0 = 0x00000000004E2000
	w1 = Mem0[x0 + 2672:word32]
	branch w1 != 0x00000000 l00000000004A05E8
	// succ:  l00000000004A05E0 l00000000004A05E8
l00000000004A05E0:
	x29 = Mem0[sp:word64]
	sp = sp + 8
	x30 = Mem0[sp:word64]
	sp = sp + 16
	return
	// succ:  fn00000000004A0590_exit
l00000000004A05E8:
	w0 = Mem0[x0 + 2672:word32]
	x29 = Mem0[sp:word64]
	sp = sp + 8
	x30 = Mem0[sp:word64]
	sp = sp + 16
	// succ:  l00000000004A05F0_thunk__rl_signal_handler
l00000000004A05F0_thunk__rl_signal_handler:
	call _rl_signal_handler (retsize: 0;)
	return
	// succ:  fn00000000004A0590_exit
fn00000000004A0590_exit:


// rl_callback_handler_install
// Return size: 0
void rl_callback_handler_install()
rl_callback_handler_install_entry:
	// succ:  l00000000004A05F4
l00000000004A05F4:
	sp = fp
	sp = sp + -32
	Mem0[sp:word64] = x29
	sp = sp + 8
	Mem0[sp:word64] = x30
	x29 = x31 + 0x0000000000000000
	Mem0[x29 + 16:word64] = x1
	call rl_set_prompt (retsize: 0;)
	x0 = 0x00000000004E1000
	w2 = Mem0[x0 + 3168:word32]
	x1 = Mem0[x29 + 16:word64]
	w2 = w2 | 0x00080000
	x29 = Mem0[sp:word64]
	sp = sp + 8
	x30 = Mem0[sp:word64]
	sp = sp + 32
	Mem0[x0 + 3168:word32] = w2
	x0 = 0x00000000004E4000
	Mem0[x0 + 216:word64] = x1
	// succ:  l00000000004A0624_thunk_fn00000000004A0590
l00000000004A0624_thunk_fn00000000004A0590:
	call fn00000000004A0590 (retsize: 0;)
	return
	// succ:  rl_callback_handler_install_exit
rl_callback_handler_install_exit:


// rl_callback_read_char
// Return size: 0
void rl_callback_read_char()
rl_callback_read_char_entry:
	// succ:  l00000000004A0628
l00000000004A0628:
	sp = fp
	sp = sp + -112
	Mem0[sp:word64] = x29
	sp = sp + 8
	Mem0[sp:word64] = x30
	x29 = x31 + 0x0000000000000000
	x0 = 0x00000000004E2000
	x0 = x0 + 0xFFFFFFFFFFFFFCF0
	Mem0[x29 + 80:word64] = x0
	x0 = x0 + 0x0000000000000008
	Mem0[x29 + 96:word64] = x0
	x0 = 0x00000000004E3000
	x0 = x0 + 0xFFFFFFFFFFFFFF40
	v9 = sp + 16
	Mem0[v9:word64] = x19
	v9 = v9 + 8
	Mem0[v9:word64] = x20
	v12 = sp + 32
	Mem0[v12:word64] = x21
	v12 = v12 + 8
	Mem0[v12:word64] = x22
	v15 = sp + 48
	Mem0[v15:word64] = x23
	v15 = v15 + 8
	Mem0[v15:word64] = x24
	Mem0[sp + 64:word64] = x25
	Mem0[x29 + 88:word64] = x0
	// succ:  l00000000004A0660
l00000000004A0660:
	x1 = 0x00000000004E4000
	x0 = Mem0[x1 + 216:word64]
	branch x0 == 0x0000000000000000 l00000000004A0954
	// succ:  l00000000004A066C l00000000004A0954
l00000000004A066C:
	x1 = Mem0[x29 + 88:word64]
	x0 = Mem0[x29 + 96:word64]
	x2 = 0x0000000000000138
	memcpy(x0, x1, x2)
	sp = sp + 0xFFFFFFFFFFFFFFF8
	x0 = Mem0[x29 + 88:word64]
	w1 = 0x00000001
	call __sigsetjmp (retsize: 0;)
	branch w0 != 0x00000000 l00000000004A0914
	// succ:  l00000000004A068C l00000000004A0914
l00000000004A068C:
	x25 = 0x00000000004E1000
	x22 = 0x00000000004E2000
	x22 = x22 + 0xFFFFFFFFFFFFFA70
	x20 = x25 + 0xFFFFFFFFFFFFFC60
	// succ:  l00000000004A069C
l00000000004A069C:
	x24 = 0x00000000004E2000
	x24 = x24 + 0x0000000000000230
	goto l00000000004A0718
	// succ:  l00000000004A0718
l00000000004A06A8:
	w0 = w19
	call readline_internal_teardown (retsize: 0;)
	x1 = 0x00000000004DE000
	x1 = Mem0[x1 + 1360:word64]
	x19 = x0
	branch x1 == 0x0000000000000000 l00000000004A06C4
	// succ:  l00000000004A06C0 l00000000004A06C4
l00000000004A06C0:
	call x1 (retsize: 0;)
	// succ:  l00000000004A06C4
l00000000004A06C4:
	call rl_clear_signals (retsize: 0;)
	x2 = 0x00000000004E4000
	x1 = Mem0[x2 + 216:word64]
	x2 = Mem0[x29 + 80:word64]
	x0 = x19
	Mem0[x2:word32] = 0x00000000
	call x1 (retsize: 0;)
	x0 = 0x00000000004E1000
	x0 = Mem0[x0 + 3256:word64]
	v33 = Mem0[x0:byte]
	w0 = (word32) v33
	branch w0 != 0x00000000 l00000000004A0888
	// succ:  l00000000004A06F0 l00000000004A0888
l00000000004A06F0:
	x1 = Mem0[x29 + 80:word64]
	w0 = Mem0[x1:word32]
	branch w0 != 0x00000000 l00000000004A070C
	// succ:  l00000000004A06FC l00000000004A070C
l00000000004A06FC:
	x2 = 0x00000000004E4000
	x0 = Mem0[x2 + 216:word64]
	branch x0 == 0x0000000000000000 l00000000004A070C
	// succ:  l00000000004A0708 l00000000004A070C
l00000000004A0708:
	call fn00000000004A0590 (retsize: 0;)
	// succ:  l00000000004A070C
l00000000004A070C:
	x0 = 0x00000000004E1000
	w0 = Mem0[x0 + 3276:word32]
	branch w0 == 0x00000000 l00000000004A079C
	// succ:  l00000000004A0718 l00000000004A079C
l00000000004A0718:
	w0 = Mem0[x22:word32]
	branch w0 != 0x00000000 l00000000004A07C4
	// succ:  l00000000004A0720 l00000000004A07C4
l00000000004A0720:
	w0 = Mem0[x20:word32]
	branch (w0 & 0x00000080) == 0x00000000 l00000000004A07D4
	// succ:  l00000000004A0728 l00000000004A07D4
l00000000004A0728:
	branch (w0 & 0x00000100) == 0x00000000 l00000000004A0890
	// succ:  l00000000004A072C l00000000004A0890
l00000000004A072C:
	branch (w0 & 0x00000000) == 0x00000000 l00000000004A08B4
	// succ:  l00000000004A0730 l00000000004A08B4
l00000000004A0730:
	branch (w0 & 0x00000400) == 0x00000000 l00000000004A08E4
	// succ:  l00000000004A0734 l00000000004A08E4
l00000000004A0734:
	branch (w0 & 0x00000000) == 0x00000000 l00000000004A0800
	// succ:  l00000000004A0738 l00000000004A0800
l00000000004A0738:
	x2 = Mem0[x29 + 80:word64]
	x1 = Mem0[x2 + 320:word64]
	branch x1 == 0x0000000000000000 l00000000004A0860
	// succ:  l00000000004A0744 l00000000004A0860
l00000000004A0744:
	x0 = Mem0[x2 + 328:word64]
	call x1 (retsize: 0;)
	w19 = w0
	x0 = Mem0[x29 + 80:word64]
	x21 = Mem0[x0 + 320:word64]
	branch x21 == 0x0000000000000000 l00000000004A086C
	// succ:  l00000000004A075C l00000000004A086C
l00000000004A075C:
	w0 = Mem0[x22:word32]
	branch w0 != 0x00000000 l00000000004A0854
	// succ:  l00000000004A0764 l00000000004A0854
l00000000004A0764:
	x23 = 0x00000000004E4000
	w21 = Mem0[x23 + 124:word32]
	branch w21 != 0x00000000 l00000000004A06A8
	// succ:  l00000000004A0770 l00000000004A06A8
l00000000004A0770:
	w0 = Mem0[x24:word32]
	branch w0 == 0x00000000 l00000000004A070C
	// succ:  l00000000004A0778 l00000000004A070C
l00000000004A0778:
	x0 = 0x00000000004DE000
	x0 = Mem0[x0 + 1488:word64]
	call x0 (retsize: 0;)
	w0 = Mem0[x23 + 124:word32]
	Mem0[x24:word32] = w21
	branch w0 != 0x00000000 l00000000004A06A8
	// succ:  l00000000004A0790 l00000000004A06A8
l00000000004A0790:
	x0 = 0x00000000004E1000
	w0 = Mem0[x0 + 3276:word32]
	branch w0 != 0x00000000 l00000000004A0718
	// succ:  l00000000004A079C l00000000004A0718
l00000000004A079C:
	call _rl_pushed_input_available (retsize: 0;)
	branch w0 != 0x00000000 l00000000004A069C
	// succ:  l00000000004A07A4 l00000000004A069C
l00000000004A07A4:
	w0 = Mem0[x20:word32]
	branch (w0 & 0x00000800) == 0x00000000 l00000000004A069C
	// succ:  l00000000004A07AC l00000000004A069C
l00000000004A07AC:
	v23 = sp + 16
	x19 = Mem0[v23:word64]
	v23 = v23 + 8
	x20 = Mem0[v23:word64]
	v24 = sp + 32
	x21 = Mem0[v24:word64]
	v24 = v24 + 8
	x22 = Mem0[v24:word64]
	v25 = sp + 48
	x23 = Mem0[v25:word64]
	v25 = v25 + 8
	x24 = Mem0[v25:word64]
	x25 = Mem0[sp + 64:word64]
	x29 = Mem0[sp:word64]
	sp = sp + 8
	x30 = Mem0[sp:word64]
	sp = sp + 112
	return
	// succ:  rl_callback_read_char_exit
l00000000004A07C4:
	w0 = Mem0[x22:word32]
	call _rl_signal_handler (retsize: 0;)
	w0 = Mem0[x20:word32]
	branch (w0 & 0x00000080) == 0x00000000 l00000000004A0728
	// succ:  l00000000004A07D4 l00000000004A0728
l00000000004A07D4:
	x0 = 0x00000000004E2000
	x0 = Mem0[x0 + 256:word64]
	call _rl_isearch_callback (retsize: 0;)
	branch w0 != 0x00000000 l00000000004A07AC
	// succ:  l00000000004A07E4 l00000000004A07AC
l00000000004A07E4:
	w1 = Mem0[x25 + 3168:word32]
	w0 = 0x00000080
	w0 = DPB(w0, 0x00000002, 16)
	w0 = w1 & w0
	w31 = w0 - (0x00000020 << 12)
	NZCV = cond(w31)
	branch Test(EQ,Z) l00000000004A0660
	// succ:  l00000000004A07FC l00000000004A0660
l00000000004A07FC:
	goto l00000000004A07AC
	// succ:  l00000000004A07AC
l00000000004A0800:
	x21 = 0x00000000004E1000
	x0 = Mem0[x21 + 3264:word64]
	goto l00000000004A0824
	// succ:  l00000000004A0824
l00000000004A080C:
	branch (w0 & 0x00000000) == 0x00000000 l00000000004A0840
	// succ:  l00000000004A0810 l00000000004A0840
l00000000004A0810:
	x1 = Mem0[x21 + 3264:word64]
	branch x1 == 0x0000000000000000 l00000000004A075C
	// succ:  l00000000004A0818 l00000000004A075C
l00000000004A0818:
	w0 = Mem0[x1:word32]
	branch (w0 & 0x00000001) == 0x00000000 l00000000004A075C
	// succ:  l00000000004A0820 l00000000004A075C
l00000000004A0820:
	x0 = x1
	// succ:  l00000000004A0824
l00000000004A0824:
	call _rl_dispatch_callback (retsize: 0;)
	w19 = w0
	w0 = w0 + 0x00000002
	w31 = w0 - 0x00000001
	NZCV = cond(w31)
	w0 = Mem0[x20:word32]
	branch Test(ULE,ZC) l00000000004A080C
	// succ:  l00000000004A083C l00000000004A080C
l00000000004A083C:
	branch (w0 & 0x00000000) == 0x00000000 l00000000004A075C
	// succ:  l00000000004A0840 l00000000004A075C
l00000000004A0840:
	call _rl_internal_char_cleanup (retsize: 0;)
	w0 = 0x00000001
	Mem0[x24:word32] = w0
	w0 = Mem0[x22:word32]
	branch w0 == 0x00000000 l00000000004A0764
	// succ:  l00000000004A0854 l00000000004A0764
l00000000004A0854:
	w0 = Mem0[x22:word32]
	call _rl_signal_handler (retsize: 0;)
	goto l00000000004A0764
	// succ:  l00000000004A0764
l00000000004A0860:
	call readline_internal_char (retsize: 0;)
	w19 = w0
	goto l00000000004A075C
	// succ:  l00000000004A075C
l00000000004A086C:
	x0 = Mem0[x0 + 328:word64]
	branch x0 == 0x0000000000000000 l00000000004A0880
	// succ:  l00000000004A0874 l00000000004A0880
l00000000004A0874:
	call xfree (retsize: 0;)
	x1 = Mem0[x29 + 80:word64]
	Mem0[x1 + 328:word64] = x21
	// succ:  l00000000004A0880
l00000000004A0880:
	call _rl_internal_char_cleanup (retsize: 0;)
	goto l00000000004A075C
	// succ:  l00000000004A075C
l00000000004A0888:
	call _rl_init_line_state (retsize: 0;)
	goto l00000000004A06F0
	// succ:  l00000000004A06F0
l00000000004A0890:
	x0 = 0x00000000004E1000
	x0 = Mem0[x0 + 3608:word64]
	call _rl_nsearch_callback (retsize: 0;)
	v35 = sp + 16
	x19 = Mem0[v35:word64]
	v35 = v35 + 8
	x20 = Mem0[v35:word64]
	v36 = sp + 32
	x21 = Mem0[v36:word64]
	v36 = v36 + 8
	x22 = Mem0[v36:word64]
	v37 = sp + 48
	x23 = Mem0[v37:word64]
	v37 = v37 + 8
	x24 = Mem0[v37:word64]
	x25 = Mem0[sp + 64:word64]
	x29 = Mem0[sp:word64]
	sp = sp + 8
	x30 = Mem0[sp:word64]
	sp = sp + 112
	return
	// succ:  rl_callback_read_char_exit
l00000000004A08B4:
	x0 = 0x00000000004E1000
	x0 = Mem0[x0 + 3504:word64]
	call _rl_vi_domove_callback (retsize: 0;)
	w0 = Mem0[x20:word32]
	branch (w0 & 0x00000400) == 0x00000000 l00000000004A07AC
	// succ:  l00000000004A08C8 l00000000004A07AC
l00000000004A08C8:
	call _rl_internal_char_cleanup (retsize: 0;)
	v30 = sp + 16
	x19 = Mem0[v30:word64]
	v30 = v30 + 8
	x20 = Mem0[v30:word64]
	v31 = sp + 32
	x21 = Mem0[v31:word64]
	v31 = v31 + 8
	x22 = Mem0[v31:word64]
	v32 = sp + 48
	x23 = Mem0[v32:word64]
	v32 = v32 + 8
	x24 = Mem0[v32:word64]
	x25 = Mem0[sp + 64:word64]
	x29 = Mem0[sp:word64]
	sp = sp + 8
	x30 = Mem0[sp:word64]
	sp = sp + 112
	return
	// succ:  rl_callback_read_char_exit
l00000000004A08E4:
	x0 = 0x00000000004E4000
	w0 = Mem0[x0 + 376:word32]
	call _rl_arg_callback (retsize: 0;)
	branch w0 != 0x00000000 l00000000004A0948
	// succ:  l00000000004A08F4 l00000000004A0948
l00000000004A08F4:
	w1 = Mem0[x25 + 3168:word32]
	w0 = 0x00000400
	w0 = DPB(w0, 0x00000002, 16)
	w0 = w1 & w0
	w31 = w0 - (0x00000020 << 12)
	NZCV = cond(w31)
	branch Test(EQ,Z) l00000000004A0660
	// succ:  l00000000004A090C l00000000004A0660
l00000000004A090C:
	branch (w1 & 0x00000400) == 0x00000000 l00000000004A07AC
	// succ:  l00000000004A0910 l00000000004A07AC
l00000000004A0910:
	goto l00000000004A08C8
	// succ:  l00000000004A08C8
l00000000004A0914:
	x0 = 0x00000000004DE000
	x0 = Mem0[x0 + 1488:word64]
	call x0 (retsize: 0;)
	x1 = 0x00000000004E2000
	x0 = 0x00000000004E3000
	x1 = x1 + 0xFFFFFFFFFFFFFCF0
	x3 = 0x00000000004E2000
	x1 = x1 + 0x0000000000000008
	x2 = 0x0000000000000138
	x0 = x0 + 0xFFFFFFFFFFFFFF40
	Mem0[x3 + 560:word32] = 0x00000000
	memcpy(x0, x1, x2)
	sp = sp + 0xFFFFFFFFFFFFFFF8
	goto l00000000004A07AC
	// succ:  l00000000004A07AC
l00000000004A0948:
	w1 = Mem0[x20:word32]
	branch (w1 & 0x00000400) == 0x00000000 l00000000004A07AC
	// succ:  l00000000004A0950 l00000000004A07AC
l00000000004A0950:
	goto l00000000004A08C8
	// succ:  l00000000004A08C8
l00000000004A0954:
	x0 = 0x00000000004C4000
	x0 = x0 + 0xFFFFFFFFFFFFFD38
	call _rl_errmsg (retsize: 0;)
	abort()
rl_callback_read_char_exit:


// rl_callback_handler_remove
// Return size: 0
void rl_callback_handler_remove()
rl_callback_handler_remove_entry:
	// succ:  l00000000004A0964
l00000000004A0964:
	sp = fp
	sp = sp + -16
	Mem0[sp:word64] = x29
	sp = sp + 8
	Mem0[sp:word64] = x30
	x29 = x31 + 0x0000000000000000
	x0 = 0x00000000004E1000
	w2 = Mem0[x0 + 3168:word32]
	x1 = 0x00000000004E2000
	w2 = w2 & 0xFFF7FFFF
	x4 = 0x00000000004E4000
	w3 = Mem0[x1 + 2672:word32]
	Mem0[x4 + 216:word64] = 0x0000000000000000
	Mem0[x0 + 3168:word32] = w2
	branch w3 != 0x00000000 l00000000004A09C4
	// succ:  l00000000004A0990 l00000000004A09C4
l00000000004A0990:
	x0 = 0x00000000004E2000
	x0 = x0 + 0xFFFFFFFFFFFFFCF0
	w1 = Mem0[x0:word32]
	branch w1 == 0x00000000 l00000000004A09BC
	// succ:  l00000000004A09A0 l00000000004A09BC
l00000000004A09A0:
	x1 = 0x00000000004DE000
	x1 = Mem0[x1 + 1360:word64]
	Mem0[x0:word32] = 0x00000000
	branch x1 == 0x0000000000000000 l00000000004A09B4
	// succ:  l00000000004A09B0 l00000000004A09B4
l00000000004A09B0:
	call x1 (retsize: 0;)
	// succ:  l00000000004A09B4
l00000000004A09B4:
	x29 = Mem0[sp:word64]
	sp = sp + 8
	x30 = Mem0[sp:word64]
	sp = sp + 16
	// succ:  l00000000004A09B8_thunk_rl_clear_signals
l00000000004A09B8_thunk_rl_clear_signals:
	call rl_clear_signals (retsize: 0;)
	return
	// succ:  rl_callback_handler_remove_exit
l00000000004A09BC:
	x29 = Mem0[sp:word64]
	sp = sp + 8
	x30 = Mem0[sp:word64]
	sp = sp + 16
	return
	// succ:  rl_callback_handler_remove_exit
l00000000004A09C4:
	w0 = Mem0[x1 + 2672:word32]
	call _rl_signal_handler (retsize: 0;)
	goto l00000000004A0990
	// succ:  l00000000004A0990
rl_callback_handler_remove_exit:


// _rl_callback_data_alloc
// Return size: 0
void _rl_callback_data_alloc()
_rl_callback_data_alloc_entry:
	// succ:  l00000000004A09D0
l00000000004A09D0:
	sp = fp
	sp = sp + -32
	Mem0[sp:word64] = x29
	sp = sp + 8
	Mem0[sp:word64] = x30
	x29 = x31 + 0x0000000000000000
	Mem0[sp + 16:word64] = x19
	w19 = w0
	x0 = 0x000000000000000C
	call xmalloc (retsize: 0;)
	Mem0[x0:word32] = w19
	Mem0[x0 + 8:word32] = 0x00000000
	Mem0[x0 + 4:word32] = 0x00000000
	x19 = Mem0[sp + 16:word64]
	x29 = Mem0[sp:word64]
	sp = sp + 8
	x30 = Mem0[sp:word64]
	sp = sp + 32
	return
	// succ:  _rl_callback_data_alloc_exit
_rl_callback_data_alloc_exit:


// _rl_callback_data_dispose
// Return size: 0
void _rl_callback_data_dispose()
_rl_callback_data_dispose_entry:
	// succ:  l00000000004A0A00
l00000000004A0A00:
	sp = fp
	// succ:  l00000000004A0A00_thunk_xfree
l00000000004A0A00_thunk_xfree:
	call xfree (retsize: 0;)
	return
	// succ:  _rl_callback_data_dispose_exit
_rl_callback_data_dispose_exit:


// fn00000000004A0A04
// Return size: 0
void fn00000000004A0A04()
fn00000000004A0A04_entry:
	// succ:  l00000000004A0A04
l00000000004A0A04:
	sp = fp
	sp = sp + -48
	Mem0[sp:word64] = x29
	sp = sp + 8
	Mem0[sp:word64] = x30
	x29 = x31 + 0x0000000000000000
	v8 = sp + 16
	Mem0[v8:word64] = x19
	v8 = v8 + 8
	Mem0[v8:word64] = x20
	x19 = 0x00000000004E2000
	x19 = x19 + 0xFFFFFFFFFFFFFE40
	x20 = 0x00000000004D9000
	Mem0[sp + 32:word64] = x21
	x1 = 0x00000000004A4000
	x21 = Mem0[x20 + 1200:word64]
	Mem0[x20 + 1200:word64] = x0
	x0 = Mem0[x19:word64]
	x1 = x1 + 0x000000000000024C
	call rl_bind_keyseq_if_unbound (retsize: 0;)
	x0 = Mem0[x19 + 8:word64]
	x1 = 0x00000000004A4000
	x1 = x1 + 0x0000000000000330
	call rl_bind_keyseq_if_unbound (retsize: 0;)
	x0 = Mem0[x19 + 16:word64]
	x1 = 0x00000000004A1000
	x1 = x1 + 0xFFFFFFFFFFFFFF00
	call rl_bind_keyseq_if_unbound (retsize: 0;)
	x0 = Mem0[x19 + 24:word64]
	x1 = 0x00000000004A1000
	x1 = x1 + 0xFFFFFFFFFFFFFE24
	call rl_bind_keyseq_if_unbound (retsize: 0;)
	x0 = Mem0[x19 + 32:word64]
	x1 = 0x00000000004A1000
	x1 = x1 + 0xFFFFFFFFFFFFFFCC
	call rl_bind_keyseq_if_unbound (retsize: 0;)
	x0 = Mem0[x19 + 40:word64]
	x1 = 0x00000000004A1000
	x1 = x1 + 0xFFFFFFFFFFFFFFDC
	call rl_bind_keyseq_if_unbound (retsize: 0;)
	x0 = Mem0[x19 + 48:word64]
	x1 = 0x00000000004A2000
	x1 = x1 + 0xFFFFFFFFFFFFFB1C
	call rl_bind_keyseq_if_unbound (retsize: 0;)
	Mem0[x20 + 1200:word64] = x21
	v12 = sp + 16
	x19 = Mem0[v12:word64]
	v12 = v12 + 8
	x20 = Mem0[v12:word64]
	x21 = Mem0[sp + 32:word64]
	x29 = Mem0[sp:word64]
	sp = sp + 8
	x30 = Mem0[sp:word64]
	sp = sp + 48
	return
	// succ:  fn00000000004A0A04_exit
fn00000000004A0A04_exit:


// _rl_output_character_function
// Return size: 0
void _rl_output_character_function()
_rl_output_character_function_entry:
	// succ:  l00000000004A0AAC
l00000000004A0AAC:
	sp = fp
	x1 = 0x00000000004E4000
	x1 = Mem0[x1 + 160:word64]
	_IO_putc(x0, x1)
	return
	// succ:  _rl_output_character_function_exit
_rl_output_character_function_exit:


// _rl_get_screen_size
// Return size: 0
void _rl_get_screen_size()
_rl_get_screen_size_entry:
	// succ:  l00000000004A0AB8
l00000000004A0AB8:
	sp = fp
	sp = sp + -80
	Mem0[sp:word64] = x29
	sp = sp + 8
	Mem0[sp:word64] = x30
	x29 = x31 + 0x0000000000000000
	v8 = sp + 32
	Mem0[v8:word64] = x21
	v8 = v8 + 8
	Mem0[v8:word64] = x22
	x2 = x29 + 0x0000000000000040
	w21 = w1
	x1 = 0x0000000000005413
	v15 = sp + 16
	Mem0[v15:word64] = x19
	v15 = v15 + 8
	Mem0[v15:word64] = x20
	v18 = sp + 48
	Mem0[v18:word64] = x23
	v18 = v18 + 8
	Mem0[v18:word64] = x24
	ioctl(x0, x1, Mem0[sp:<unknown>])
	sp = sp + 0xFFFFFFFFFFFFFFF8
	branch w0 != 0x00000000 l00000000004A0B30
	// succ:  l00000000004A0AE0 l00000000004A0B30
l00000000004A0AE0:
	v22 = Mem0[x29 + 66:word16]
	w22 = (word32) v22
	v24 = Mem0[x29 + 64:word16]
	w23 = (word32) v24
	branch w21 == 0x00000000 l00000000004A0B3C
	// succ:  l00000000004A0AEC l00000000004A0B3C
l00000000004A0AEC:
	x19 = 0x00000000004E4000
	x20 = 0x00000000004E4000
	Mem0[x19 + 328:word32] = w22
	Mem0[x20 + 312:word32] = w23
	NZCV = cond(w22 - w31)
	branch Test(GT,NZV) l00000000004A0B64
	// succ:  l00000000004A0B04 l00000000004A0B64
l00000000004A0B04:
	Mem0[x19 + 328:word32] = w22
	x24 = 0x00000000004E2000
	// succ:  l00000000004A0B0C
l00000000004A0B0C:
	x24 = x24 + 0xFFFFFFFFFFFFFE40
	x0 = Mem0[x24 + 64:word64]
	branch x0 == 0x0000000000000000 l00000000004A0BAC
	// succ:  l00000000004A0B18 l00000000004A0BAC
l00000000004A0B18:
	x0 = 0x00000000004C4000
	x0 = x0 + 0xFFFFFFFFFFFFFF40
	call tgetnum (retsize: 0;)
	w2 = Mem0[x20 + 312:word32]
	Mem0[x19 + 328:word32] = w0
	goto l00000000004A0BB0
	// succ:  l00000000004A0BB0
l00000000004A0B30:
	w22 = 0xFFFFFFFF
	w23 = w22
	branch w21 != 0x00000000 l00000000004A0AEC
	// succ:  l00000000004A0B3C l00000000004A0AEC
l00000000004A0B3C:
	x24 = 0x00000000004E2000
	x0 = x24 + 0xFFFFFFFFFFFFFE40
	w0 = Mem0[x0 + 56:word32]
	branch w0 != 0x00000000 l00000000004A0B6C
	// succ:  l00000000004A0B4C l00000000004A0B6C
l00000000004A0B4C:
	x19 = 0x00000000004E4000
	x20 = 0x00000000004E4000
	Mem0[x19 + 328:word32] = w22
	Mem0[x20 + 312:word32] = w23
	NZCV = cond(w22 - w31)
	branch Test(LE,ZCV) l00000000004A0B80
	// succ:  l00000000004A0B64 l00000000004A0B80
l00000000004A0B64:
	w2 = w23
	goto l00000000004A0BB0
	// succ:  l00000000004A0BB0
l00000000004A0B6C:
	w0 = 0xFFFFFFFF
	x20 = 0x00000000004E4000
	x19 = 0x00000000004E4000
	Mem0[x20 + 312:word32] = w0
	Mem0[x19 + 328:word32] = w0
	// succ:  l00000000004A0B80
l00000000004A0B80:
	x0 = 0x00000000004AC000
	x0 = x0 + 0x0000000000000770
	call sh_get_env_value (retsize: 0;)
	branch x0 == 0x0000000000000000 l00000000004A0CA8
	// succ:  l00000000004A0B90 l00000000004A0CA8
l00000000004A0B90:
	x1 = 0x0000000000000000
	w2 = 0x0000000A
	strtol(x0)
	sp = sp + 0xFFFFFFFFFFFFFFF8
	w1 = w0
	Mem0[x19 + 328:word32] = w0
	// succ:  l00000000004A0BA4
l00000000004A0BA4:
	NZCV = cond(w1 - w31)
	branch Test(LE,ZCV) l00000000004A0CB8
	// succ:  l00000000004A0BAC l00000000004A0CB8
l00000000004A0BAC:
	w2 = Mem0[x20 + 312:word32]
	// succ:  l00000000004A0BB0
l00000000004A0BB0:
	NZCV = cond(w2 - w31)
	branch Test(LE,ZCV) l00000000004A0C14
	// succ:  l00000000004A0BB8 l00000000004A0C14
l00000000004A0BB8:
	w1 = Mem0[x19 + 328:word32]
	w31 = w1 - 0x00000001
	NZCV = cond(w31)
	branch Test(LE,ZCV) l00000000004A0C34
	// succ:  l00000000004A0BC4 l00000000004A0C34
l00000000004A0BC4:
	NZCV = cond(w2 - w31)
	branch Test(LE,ZCV) l00000000004A0C44
	// succ:  l00000000004A0BCC l00000000004A0C44
l00000000004A0BCC:
	w0 = w2
	call sh_set_lines_and_columns (retsize: 0;)
	x0 = 0x00000000004DE000
	x0 = x0 + 0x00000000000005F8
	w0 = Mem0[x0:word32]
	w1 = Mem0[x19 + 328:word32]
	branch w0 != 0x00000000 l00000000004A0BF0
	// succ:  l00000000004A0BE8 l00000000004A0BF0
l00000000004A0BE8:
	w1 = w1 - 0x00000001
	Mem0[x19 + 328:word32] = w1
	// succ:  l00000000004A0BF0
l00000000004A0BF0:
	w0 = Mem0[x20 + 312:word32]
	v30 = sp + 32
	x21 = Mem0[v30:word64]
	v30 = v30 + 8
	x22 = Mem0[v30:word64]
	w1 = w1 * w0
	x0 = 0x00000000004E4000
	v31 = sp + 16
	x19 = Mem0[v31:word64]
	v31 = v31 + 8
	x20 = Mem0[v31:word64]
	v32 = sp + 48
	x23 = Mem0[v32:word64]
	v32 = v32 + 8
	x24 = Mem0[v32:word64]
	Mem0[x0 + 280:word32] = w1
	x29 = Mem0[sp:word64]
	sp = sp + 8
	x30 = Mem0[sp:word64]
	sp = sp + 80
	return
	// succ:  _rl_get_screen_size_exit
l00000000004A0C14:
	branch w21 == 0x00000000 l00000000004A0C78
	// succ:  l00000000004A0C18 l00000000004A0C78
l00000000004A0C18:
	Mem0[x20 + 312:word32] = w23
	NZCV = cond(w23 - w31)
	branch Test(LE,ZCV) l00000000004A0C50
	// succ:  l00000000004A0C24 l00000000004A0C50
l00000000004A0C24:
	w1 = Mem0[x19 + 328:word32]
	w2 = w23
	w31 = w1 - 0x00000001
	NZCV = cond(w31)
	branch Test(GT,NZV) l00000000004A0BC4
	// succ:  l00000000004A0C34 l00000000004A0BC4
l00000000004A0C34:
	w1 = 0x00000050
	Mem0[x19 + 328:word32] = w1
	NZCV = cond(w2 - w31)
	branch Test(GT,NZV) l00000000004A0BCC
	// succ:  l00000000004A0C44 l00000000004A0BCC
l00000000004A0C44:
	w2 = 0x00000018
	Mem0[x20 + 312:word32] = w2
	goto l00000000004A0BCC
	// succ:  l00000000004A0BCC
l00000000004A0C50:
	x0 = 0x00000000004E2000
	x0 = x0 + 0xFFFFFFFFFFFFFE40
	x0 = Mem0[x0 + 64:word64]
	branch x0 == 0x0000000000000000 l00000000004A0C24
	// succ:  l00000000004A0C60 l00000000004A0C24
l00000000004A0C60:
	x0 = 0x00000000004C4000
	x0 = x0 + 0xFFFFFFFFFFFFFF48
	call tgetnum (retsize: 0;)
	Mem0[x20 + 312:word32] = w0
	w2 = w0
	goto l00000000004A0BB8
	// succ:  l00000000004A0BB8
l00000000004A0C78:
	x0 = 0x00000000004AC000
	x0 = x0 + 0xFFFFFFFFFFFFFAD0
	call sh_get_env_value (retsize: 0;)
	branch x0 == 0x0000000000000000 l00000000004A0CB0
	// succ:  l00000000004A0C88 l00000000004A0CB0
l00000000004A0C88:
	w2 = 0x0000000A
	x1 = 0x0000000000000000
	strtol(x0)
	sp = sp + 0xFFFFFFFFFFFFFFF8
	w2 = w0
	Mem0[x20 + 312:word32] = w0
	// succ:  l00000000004A0C9C
l00000000004A0C9C:
	NZCV = cond(w2 - w31)
	branch Test(GT,NZV) l00000000004A0BB8
	// succ:  l00000000004A0CA4 l00000000004A0BB8
l00000000004A0CA4:
	goto l00000000004A0C18
	// succ:  l00000000004A0C18
l00000000004A0CA8:
	w1 = Mem0[x19 + 328:word32]
	goto l00000000004A0BA4
	// succ:  l00000000004A0BA4
l00000000004A0CB0:
	w2 = Mem0[x20 + 312:word32]
	goto l00000000004A0C9C
	// succ:  l00000000004A0C9C
l00000000004A0CB8:
	Mem0[x19 + 328:word32] = w22
	NZCV = cond(w22 - w31)
	branch Test(GT,NZV) l00000000004A0BAC
	// succ:  l00000000004A0CC4 l00000000004A0BAC
l00000000004A0CC4:
	goto l00000000004A0B0C
	// succ:  l00000000004A0B0C
_rl_get_screen_size_exit:


// rl_get_screen_size
// Return size: 0
void rl_get_screen_size()
rl_get_screen_size_entry:
	// succ:  l00000000004A0CC8
l00000000004A0CC8:
	sp = fp
	branch x0 == 0x0000000000000000 l00000000004A0CD8
	// succ:  l00000000004A0CCC l00000000004A0CD8
l00000000004A0CCC:
	x2 = 0x00000000004E4000
	w2 = Mem0[x2 + 312:word32]
	Mem0[x0:word32] = w2
	// succ:  l00000000004A0CD8
l00000000004A0CD8:
	branch x1 == 0x0000000000000000 l00000000004A0CE8
	// succ:  l00000000004A0CDC l00000000004A0CE8
l00000000004A0CDC:
	x0 = 0x00000000004E4000
	w0 = Mem0[x0 + 328:word32]
	Mem0[x1:word32] = w0
	// succ:  l00000000004A0CE8
l00000000004A0CE8:
	return
	// succ:  rl_get_screen_size_exit
rl_get_screen_size_exit:


// rl_reset_screen_size
// Return size: 0
void rl_reset_screen_size()
rl_reset_screen_size_entry:
	// succ:  l00000000004A0CEC
l00000000004A0CEC:
	sp = fp
	sp = sp + -16
	Mem0[sp:word64] = x29
	sp = sp + 8
	Mem0[sp:word64] = x30
	x29 = x31 + 0x0000000000000000
	x0 = 0x00000000004E1000
	x0 = Mem0[x0 + 3192:word64]
	fileno(x0)
	sp = sp + 0xFFFFFFFFFFFFFFF8
	x29 = Mem0[sp:word64]
	sp = sp + 8
	x30 = Mem0[sp:word64]
	sp = sp + 16
	w1 = 0x00000000
	// succ:  l00000000004A0D08_thunk__rl_get_screen_size
l00000000004A0D08_thunk__rl_get_screen_size:
	call _rl_get_screen_size (retsize: 0;)
	return
	// succ:  rl_reset_screen_size_exit
rl_reset_screen_size_exit:


// rl_resize_terminal
// Return size: 0
void rl_resize_terminal()
rl_resize_terminal_entry:
	// succ:  l00000000004A0D0C
l00000000004A0D0C:
	sp = fp
	sp = sp + -16
	Mem0[sp:word64] = x29
	sp = sp + 8
	Mem0[sp:word64] = x30
	x29 = x31 + 0x0000000000000000
	x0 = 0x00000000004E1000
	x0 = Mem0[x0 + 3192:word64]
	fileno(x0)
	sp = sp + 0xFFFFFFFFFFFFFFF8
	w1 = 0x00000001
	call _rl_get_screen_size (retsize: 0;)
	x0 = 0x00000000004E1000
	w0 = Mem0[x0 + 3216:word32]
	branch w0 == 0x00000000 l00000000004A0D60
	// succ:  l00000000004A0D34 l00000000004A0D60
l00000000004A0D34:
	x0 = 0x00000000004DE000
	x1 = Mem0[x0 + 1488:word64]
	x0 = 0x000000000049B000
	x0 = x0 + 0x0000000000000544
	x31 = x1 - x0
	NZCV = cond(x31)
	branch Test(EQ,Z) l00000000004A0D54
	// succ:  l00000000004A0D4C l00000000004A0D54
l00000000004A0D4C:
	x29 = Mem0[sp:word64]
	sp = sp + 8
	x30 = Mem0[sp:word64]
	sp = sp + 16
	// succ:  l00000000004A0D50_thunk_rl_forced_update_display
l00000000004A0D50_thunk_rl_forced_update_display:
	call rl_forced_update_display (retsize: 0;)
	return
	// succ:  rl_resize_terminal_exit
l00000000004A0D54:
	x0 = 0x00000000004E1000
	w0 = Mem0[x0 + 3168:word32]
	branch (w0 & 0x00000000) == 0x00000000 l00000000004A0D68
	// succ:  l00000000004A0D60 l00000000004A0D68
l00000000004A0D60:
	x29 = Mem0[sp:word64]
	sp = sp + 8
	x30 = Mem0[sp:word64]
	sp = sp + 16
	return
	// succ:  rl_resize_terminal_exit
l00000000004A0D68:
	x29 = Mem0[sp:word64]
	sp = sp + 8
	x30 = Mem0[sp:word64]
	sp = sp + 16
	// succ:  l00000000004A0D6C_thunk__rl_redisplay_after_sigwinch
l00000000004A0D6C_thunk__rl_redisplay_after_sigwinch:
	call _rl_redisplay_after_sigwinch (retsize: 0;)
	return
	// succ:  rl_resize_terminal_exit
rl_resize_terminal_exit:


// _rl_init_terminal_io
// Return size: 0
void _rl_init_terminal_io()
_rl_init_terminal_io_entry:
	// succ:  l00000000004A0D70
l00000000004A0D70:
	sp = fp
	sp = sp + -80
	Mem0[sp:word64] = x29
	sp = sp + 8
	Mem0[sp:word64] = x30
	x29 = x31 + 0x0000000000000000
	v8 = sp + 16
	Mem0[v8:word64] = x19
	v8 = v8 + 8
	Mem0[v8:word64] = x20
	v11 = sp + 32
	Mem0[v11:word64] = x21
	v11 = v11 + 8
	Mem0[v11:word64] = x22
	v14 = sp + 48
	Mem0[v14:word64] = x23
	v14 = v14 + 8
	Mem0[v14:word64] = x24
	x19 = x0
	branch x0 == 0x0000000000000000 l00000000004A113C
	// succ:  l00000000004A0D8C l00000000004A113C
l00000000004A0D8C:
	x1 = 0x00000000004E4000
	x0 = 0x00000000004E1000
	x23 = 0x00000000004E4000
	Mem0[x1 + 344:word64] = 0x0000000000000000
	x0 = Mem0[x0 + 3192:word64]
	x1 = 0x00000000004E4000
	Mem0[x23 + 288:word64] = 0x0000000000000000
	Mem0[x1 + 336:word64] = 0x0000000000000000
	branch x0 == 0x0000000000000000 l00000000004A0F1C
	// succ:  l00000000004A0DB0 l00000000004A0F1C
l00000000004A0DB0:
	fileno(x0)
	sp = sp + 0xFFFFFFFFFFFFFFF8
	w24 = w0
	branch x19 == 0x0000000000000000 l00000000004A0F24
	// succ:  l00000000004A0DBC l00000000004A0F24
l00000000004A0DBC:
	x1 = 0x00000000004DE000
	x2 = Mem0[x1 + 1488:word64]
	x1 = 0x000000000049B000
	x1 = x1 + 0x0000000000000544
	x31 = x2 - x1
	NZCV = cond(x31)
	x22 = 0x00000000004E2000
	branch Test(EQ,Z) l00000000004A0F48
	// succ:  l00000000004A0DD8 l00000000004A0F48
l00000000004A0DD8:
	x1 = x22 + 0xFFFFFFFFFFFFFE40
	x0 = Mem0[x1 + 64:word64]
	branch x0 == 0x0000000000000000 l00000000004A0DE8
	// succ:  l00000000004A0DE4 l00000000004A0DE8
l00000000004A0DE4:
	call free (retsize: 0;)
	// succ:  l00000000004A0DE8
l00000000004A0DE8:
	x0 = x22 + 0xFFFFFFFFFFFFFE40
	x0 = Mem0[x0 + 72:word64]
	branch x0 == 0x0000000000000000 l00000000004A0DF8
	// succ:  l00000000004A0DF4 l00000000004A0DF8
l00000000004A0DF4:
	call free (retsize: 0;)
	// succ:  l00000000004A0DF8
l00000000004A0DF8:
	x1 = x22 + 0xFFFFFFFFFFFFFE40
	x19 = 0x00000000004E4000
	w0 = Mem0[x19 + 328:word32]
	Mem0[x1 + 64:word64] = 0x0000000000000000
	Mem0[x1 + 72:word64] = 0x0000000000000000
	x1 = 0x00000000004DE000
	x1 = x1 + 0x00000000000005F8
	Mem0[x29 + 64:word64] = 0x0000000000000000
	Mem0[x1:word32] = 0x00000000
	NZCV = cond(w0 - w31)
	x20 = 0x00000000004E4000
	branch Test(LE,ZCV) l00000000004A10B0
	// succ:  l00000000004A0E28 l00000000004A10B0
l00000000004A0E28:
	w0 = Mem0[x20 + 312:word32]
	NZCV = cond(w0 - w31)
	branch Test(LE,ZCV) l00000000004A10B0
	// succ:  l00000000004A0E34 l00000000004A10B0
l00000000004A0E34:
	w3 = Mem0[x19 + 328:word32]
	w3 = w0 * w3
	// succ:  l00000000004A0E3C
l00000000004A0E3C:
	x2 = 0x00000000004E4000
	Mem0[x2 + 280:word32] = w3
	x2 = 0x00000000004C4000
	x2 = x2 + 0xFFFFFFFFFFFFFF50
	Mem0[x23 + 288:word64] = x2
	x2 = 0x00000000004E4000
	Mem0[x2 + 296:word64] = 0x0000000000000000
	x2 = 0x00000000004E4000
	Mem0[x2 + 360:word64] = 0x0000000000000000
	x2 = 0x00000000004E4000
	x0 = x22 + 0xFFFFFFFFFFFFFE40
	Mem0[x2 + 232:word64] = 0x0000000000000000
	x2 = 0x00000000004E4000
	Mem0[x0 + 80:word64] = 0x0000000000000000
	Mem0[x0 + 16:word64] = 0x0000000000000000
	Mem0[x0 + 24:word64] = 0x0000000000000000
	Mem0[x0 + 8:word64] = 0x0000000000000000
	Mem0[x0:word64] = 0x0000000000000000
	Mem0[x0 + 48:word64] = 0x0000000000000000
	Mem0[x0 + 88:word64] = 0x0000000000000000
	Mem0[x0 + 96:word64] = 0x0000000000000000
	Mem0[x0 + 32:word64] = 0x0000000000000000
	Mem0[x0 + 40:word64] = 0x0000000000000000
	Mem0[x0 + 104:word64] = 0x0000000000000000
	Mem0[x0 + 112:word64] = 0x0000000000000000
	Mem0[x0 + 120:word64] = 0x0000000000000000
	Mem0[x0 + 128:word64] = 0x0000000000000000
	Mem0[x0 + 136:word64] = 0x0000000000000000
	Mem0[x0 + 144:word64] = 0x0000000000000000
	Mem0[x0 + 152:word32] = 0x00000000
	Mem0[x0 + 156:word32] = 0x00000000
	Mem0[x2 + 368:word64] = 0x0000000000000000
	x0 = 0x00000000004DE000
	x2 = 0x00000000004E4000
	x1 = 0x00000000004C4000
	x1 = x1 + 0xFFFFFFFFFFFFFF58
	Mem0[x2 + 264:word64] = 0x0000000000000000
	Mem0[x0 + 1680:byte] = 0x00
	x2 = 0x00000000004E4000
	x0 = 0x00000000004E4000
	Mem0[x2 + 320:word64] = 0x0000000000000000
	Mem0[x0 + 272:word64] = x1
	x2 = 0x00000000004E4000
	x0 = 0x00000000004DE000
	Mem0[x2 + 352:word64] = 0x0000000000000000
	Mem0[x0 + 1688:word64] = x1
	x2 = 0x00000000004E4000
	x0 = 0x00000000004DE000
	Mem0[x0 + 1656:word64] = 0x0000000000000000
	v33 = sp + 16
	x19 = Mem0[v33:word64]
	v33 = v33 + 8
	x20 = Mem0[v33:word64]
	w0 = 0x00000000
	v34 = sp + 32
	x21 = Mem0[v34:word64]
	v34 = v34 + 8
	x22 = Mem0[v34:word64]
	v35 = sp + 48
	x23 = Mem0[v35:word64]
	v35 = v35 + 8
	x24 = Mem0[v35:word64]
	Mem0[x2 + 224:word64] = 0x0000000000000000
	x29 = Mem0[sp:word64]
	sp = sp + 8
	x30 = Mem0[sp:word64]
	sp = sp + 80
	return
	// succ:  _rl_init_terminal_io_exit
l00000000004A0F1C:
	w24 = w0
	branch x19 != 0x0000000000000000 l00000000004A0DBC
	// succ:  l00000000004A0F24 l00000000004A0DBC
l00000000004A0F24:
	x1 = 0x00000000004DE000
	x2 = Mem0[x1 + 1488:word64]
	x1 = 0x000000000049B000
	x1 = x1 + 0x0000000000000544
	x19 = 0x00000000004AA000
	x31 = x2 - x1
	NZCV = cond(x31)
	x19 = x19 + 0x0000000000000328
	x22 = 0x00000000004E2000
	branch Test(NE,Z) l00000000004A0DD8
	// succ:  l00000000004A0F48 l00000000004A0DD8
l00000000004A0F48:
	x20 = x22 + 0xFFFFFFFFFFFFFE40
	x0 = Mem0[x20 + 64:word64]
	branch x0 == 0x0000000000000000 l00000000004A1170
	// succ:  l00000000004A0F54 l00000000004A1170
l00000000004A0F54:
	x20 = x22 + 0xFFFFFFFFFFFFFE40
	x0 = Mem0[x20 + 72:word64]
	branch x0 == 0x0000000000000000 l00000000004A1160
	// succ:  l00000000004A0F60 l00000000004A1160
l00000000004A0F60:
	x1 = x22 + 0xFFFFFFFFFFFFFE40
	x2 = Mem0[x1 + 64:word64]
	x1 = x19
	Mem0[x29 + 64:word64] = x2
	call tgetent (retsize: 0;)
	NZCV = cond(w0 - w31)
	branch Test(LE,ZCV) l00000000004A0DD8
	// succ:  l00000000004A0F7C l00000000004A0DD8
l00000000004A0F7C:
	x21 = 0x00000000004C4000
	x21 = x21 + 0xFFFFFFFFFFFFFD70
	x19 = x21 + 0x0000000000000008
	x21 = x21 + 0x00000000000001D8
	// succ:  l00000000004A0F8C
l00000000004A0F8C:
	x0 = Mem0[x19 + -8:word64]
	x20 = Mem0[x19:word64]
	x1 = x29 + 0x0000000000000040
	call tgetstr (retsize: 0;)
	x19 = x19 + 0x0000000000000010
	Mem0[x20:word64] = x0
	x31 = x19 - x21
	NZCV = cond(x31)
	branch Test(NE,Z) l00000000004A0F8C
	// succ:  l00000000004A0FAC l00000000004A0F8C
l00000000004A0FAC:
	x1 = 0x00000000004E4000
	x0 = x22 + 0xFFFFFFFFFFFFFE40
	w2 = 0x00000001
	x1 = Mem0[x1 + 240:word64]
	Mem0[x0 + 160:word32] = w2
	branch x1 == 0x0000000000000000 l00000000004A0FC8
	// succ:  l00000000004A0FC4 l00000000004A0FC8
l00000000004A0FC4:
	v26 = Mem0[x1:byte]
	w1 = (word32) v26
	// succ:  l00000000004A0FC8
l00000000004A0FC8:
	x0 = 0x00000000004E4000
	x3 = Mem0[x0 + 272:word64]
	x4 = 0x00000000004DE000
	x0 = 0x00000000004E4000
	x2 = Mem0[x0 + 352:word64]
	Mem0[x4 + 1680:byte] = (byte) w1
	x1 = 0x00000000004DE000
	Mem0[x1 + 1688:word64] = x3
	x0 = Mem0[x23 + 288:word64]
	x1 = 0x00000000004DE000
	Mem0[x1 + 1656:word64] = x2
	branch x0 == 0x0000000000000000 l00000000004A1128
	// succ:  l00000000004A0FF8 l00000000004A1128
l00000000004A0FF8:
	x0 = 0x00000000004C4000
	x0 = x0 + 0xFFFFFFFFFFFFFF60
	call tgetflag (retsize: 0;)
	w1 = 0x00000000
	branch w0 != 0x00000000 l00000000004A10F0
	// succ:  l00000000004A100C l00000000004A10F0
l00000000004A100C:
	x0 = 0x00000000004E4000
	w0 = Mem0[x0 + 328:word32]
	x2 = 0x00000000004DE000
	x2 = x2 + 0x00000000000005F8
	Mem0[x2:word32] = w1
	NZCV = cond(w0 - w31)
	branch Test(LE,ZCV) l00000000004A10E0
	// succ:  l00000000004A1028 l00000000004A10E0
l00000000004A1028:
	x0 = 0x00000000004E4000
	w0 = Mem0[x0 + 312:word32]
	NZCV = cond(w0 - w31)
	branch Test(LE,ZCV) l00000000004A10E0
	// succ:  l00000000004A1038 l00000000004A10E0
l00000000004A1038:
	x0 = 0x00000000004E4000
	x0 = Mem0[x0 + 296:word64]
	w1 = 0x00000001
	branch x0 == 0x0000000000000000 l00000000004A1108
	// succ:  l00000000004A1048 l00000000004A1108
l00000000004A1048:
	x0 = 0x00000000004C4000
	x22 = x22 + 0xFFFFFFFFFFFFFE40
	x0 = x0 + 0xFFFFFFFFFFFFFF70
	Mem0[x22 + 156:word32] = w1
	call tgetflag (retsize: 0;)
	NZCV = cond(w0 - w31)
	w0 = (word32) Test(NE,Z)
	Mem0[x22 + 152:word32] = w0
	branch w0 != 0x00000000 l00000000004A1074
	// succ:  l00000000004A106C l00000000004A1074
l00000000004A106C:
	Mem0[x22 + 120:word64] = 0x0000000000000000
	Mem0[x22 + 128:word64] = 0x0000000000000000
	// succ:  l00000000004A1074
l00000000004A1074:
	x0 = 0x00000000004DD000
	x0 = x0 + 0x0000000000000540
	call fn00000000004A0A04 (retsize: 0;)
	x0 = 0x00000000004DA000
	x0 = x0 + 0x0000000000000510
	call fn00000000004A0A04 (retsize: 0;)
	x0 = 0x00000000004D9000
	x0 = x0 + 0x0000000000000500
	call fn00000000004A0A04 (retsize: 0;)
	w0 = 0x00000000
	v29 = sp + 16
	x19 = Mem0[v29:word64]
	v29 = v29 + 8
	x20 = Mem0[v29:word64]
	v30 = sp + 32
	x21 = Mem0[v30:word64]
	v30 = v30 + 8
	x22 = Mem0[v30:word64]
	v31 = sp + 48
	x23 = Mem0[v31:word64]
	v31 = v31 + 8
	x24 = Mem0[v31:word64]
	x29 = Mem0[sp:word64]
	sp = sp + 8
	x30 = Mem0[sp:word64]
	sp = sp + 80
	return
	// succ:  _rl_init_terminal_io_exit
l00000000004A10B0:
	w0 = w24
	w1 = 0x00000000
	call _rl_get_screen_size (retsize: 0;)
	w0 = Mem0[x19 + 328:word32]
	NZCV = cond(w0 - w31)
	branch Test(GT,NZV) l00000000004A1150
	// succ:  l00000000004A10C8 l00000000004A1150
l00000000004A10C8:
	w0 = 0x0000004F
	Mem0[x19 + 328:word32] = w0
	w0 = 0x00000018
	Mem0[x20 + 312:word32] = w0
	w3 = 0x00000768
	goto l00000000004A0E3C
	// succ:  l00000000004A0E3C
l00000000004A10E0:
	w0 = w24
	w1 = 0x00000000
	call _rl_get_screen_size (retsize: 0;)
	goto l00000000004A1038
	// succ:  l00000000004A1038
l00000000004A10F0:
	x0 = 0x00000000004C4000
	x0 = x0 + 0xFFFFFFFFFFFFFF68
	call tgetflag (retsize: 0;)
	NZCV = cond(w0 - w31)
	w1 = (word32) Test(NE,Z)
	goto l00000000004A100C
	// succ:  l00000000004A100C
l00000000004A1108:
	x0 = 0x00000000004E4000
	x0 = Mem0[x0 + 368:word64]
	branch x0 != 0x0000000000000000 l00000000004A1048
	// succ:  l00000000004A1114 l00000000004A1048
l00000000004A1114:
	x0 = 0x00000000004E4000
	x0 = Mem0[x0 + 360:word64]
	x31 = x0 - x31
	NZCV = cond(x31)
	w1 = (word32) Test(NE,Z)
	goto l00000000004A1048
	// succ:  l00000000004A1048
l00000000004A1128:
	x1 = 0x00000000004C4000
	x1 = x1 + 0xFFFFFFFFFFFFFF50
	x0 = 0x00000000004E4000
	Mem0[x0 + 288:word64] = x1
	goto l00000000004A0FF8
	// succ:  l00000000004A0FF8
l00000000004A113C:
	x0 = 0x00000000004AA000
	x0 = x0 + 0x0000000000000310
	call sh_get_env_value (retsize: 0;)
	x19 = x0
	goto l00000000004A0D8C
	// succ:  l00000000004A0D8C
l00000000004A1150:
	w0 = Mem0[x20 + 312:word32]
	NZCV = cond(w0 - w31)
	branch Test(LE,ZCV) l00000000004A10C8
	// succ:  l00000000004A115C l00000000004A10C8
l00000000004A115C:
	goto l00000000004A0E34
	// succ:  l00000000004A0E34
l00000000004A1160:
	x0 = 0x0000000000000FF0
	call xmalloc (retsize: 0;)
	Mem0[x20 + 72:word64] = x0
	goto l00000000004A0F60
	// succ:  l00000000004A0F60
l00000000004A1170:
	x0 = 0x00000000000007F0
	call xmalloc (retsize: 0;)
	Mem0[x20 + 64:word64] = x0
	goto l00000000004A0F54
	// succ:  l00000000004A0F54
_rl_init_terminal_io_exit:


// _rl_set_screen_size
// Return size: 0
void _rl_set_screen_size()
_rl_set_screen_size_entry:
	// succ:  l00000000004A1180
l00000000004A1180:
	sp = fp
	sp = sp + -48
	Mem0[sp:word64] = x29
	sp = sp + 8
	Mem0[sp:word64] = x30
	x29 = x31 + 0x0000000000000000
	v6 = sp + 16
	Mem0[v6:word64] = x19
	v6 = v6 + 8
	Mem0[v6:word64] = x20
	x20 = 0x00000000004DE000
	x2 = x20 + 0x00000000000005F8
	w2 = Mem0[x2:word32]
	w19 = w0
	w31 = w2 + 0x00000001
	NZCV = cond(w31)
	branch Test(EQ,Z) l00000000004A1210
	// succ:  l00000000004A11A4 l00000000004A1210
l00000000004A11A4:
	NZCV = cond(w19 - w31)
	branch Test(LE,ZCV) l00000000004A11B4
	// succ:  l00000000004A11AC l00000000004A11B4
l00000000004A11AC:
	x0 = 0x00000000004E4000
	Mem0[x0 + 312:word32] = w19
	// succ:  l00000000004A11B4
l00000000004A11B4:
	NZCV = cond(w1 - w31)
	branch Test(LE,ZCV) l00000000004A11FC
	// succ:  l00000000004A11BC l00000000004A11FC
l00000000004A11BC:
	x20 = x20 + 0x00000000000005F8
	x0 = 0x00000000004E4000
	w2 = Mem0[x20:word32]
	Mem0[x0 + 328:word32] = w1
	branch w2 == 0x00000000 l00000000004A11F0
	// succ:  l00000000004A11D0 l00000000004A11F0
l00000000004A11D0:
	x0 = 0x00000000004E4000
	w0 = Mem0[x0 + 312:word32]
	w1 = w0 * w1
	x0 = 0x00000000004E4000
	Mem0[x0 + 280:word32] = w1
	// succ:  l00000000004A11E4
l00000000004A11E4:
	v19 = sp + 16
	x19 = Mem0[v19:word64]
	v19 = v19 + 8
	x20 = Mem0[v19:word64]
	x29 = Mem0[sp:word64]
	sp = sp + 8
	x30 = Mem0[sp:word64]
	sp = sp + 48
	return
	// succ:  _rl_set_screen_size_exit
l00000000004A11F0:
	w1 = w1 - 0x00000001
	Mem0[x0 + 328:word32] = w1
	goto l00000000004A11D0
	// succ:  l00000000004A11D0
l00000000004A11FC:
	NZCV = cond(w19 - w31)
	branch Test(LE,ZCV) l00000000004A11E4
	// succ:  l00000000004A1204 l00000000004A11E4
l00000000004A1204:
	x0 = 0x00000000004E4000
	w1 = Mem0[x0 + 328:word32]
	goto l00000000004A11D0
	// succ:  l00000000004A11D0
l00000000004A1210:
	x0 = 0x00000000004E1000
	x0 = Mem0[x0 + 3304:word64]
	Mem0[x29 + 32:word64] = x1
	call _rl_init_terminal_io (retsize: 0;)
	x1 = Mem0[x29 + 32:word64]
	goto l00000000004A11A4
	// succ:  l00000000004A11A4
_rl_set_screen_size_exit:


// rl_set_screen_size
// Return size: 0
void rl_set_screen_size()
rl_set_screen_size_entry:
	// succ:  l00000000004A1228
l00000000004A1228:
	sp = fp
	// succ:  l00000000004A1228_thunk__rl_set_screen_size
l00000000004A1228_thunk__rl_set_screen_size:
	call _rl_set_screen_size (retsize: 0;)
	return
	// succ:  rl_set_screen_size_exit
rl_set_screen_size_exit:


// rl_get_termcap
// Return size: 0
void rl_get_termcap()
rl_get_termcap_entry:
	// succ:  l00000000004A122C
l00000000004A122C:
	sp = fp
	sp = sp + -64
	Mem0[sp:word64] = x29
	sp = sp + 8
	Mem0[sp:word64] = x30
	x29 = x31 + 0x0000000000000000
	x1 = 0x00000000004E2000
	x1 = x1 + 0xFFFFFFFFFFFFFE40
	w1 = Mem0[x1 + 160:word32]
	v10 = sp + 32
	Mem0[v10:word64] = x21
	v10 = v10 + 8
	Mem0[v10:word64] = x22
	v13 = sp + 16
	Mem0[v13:word64] = x19
	v13 = v13 + 8
	Mem0[v13:word64] = x20
	Mem0[sp + 48:word64] = x23
	x22 = x0
	branch w1 == 0x00000000 l00000000004A12B8
	// succ:  l00000000004A1254 l00000000004A12B8
l00000000004A1254:
	x23 = 0x00000000004C4000
	v17 = Mem0[x0:byte]
	w21 = (word32) v17
	x19 = x23 + 0xFFFFFFFFFFFFFD70
	w20 = 0x00000000
	goto l00000000004A1274
	// succ:  l00000000004A1274
l00000000004A1268:
	w20 = w20 + 0x00000001
	w31 = w20 - 0x0000001D
	NZCV = cond(w31)
	branch Test(EQ,Z) l00000000004A12B8
	// succ:  l00000000004A1274 l00000000004A12B8
l00000000004A1274:
	x0 = Mem0[x19:word64]
	x19 = x19 + 0x0000000000000010
	v22 = Mem0[x0:byte]
	w2 = (word32) v22
	NZCV = cond(w2 - w21)
	branch Test(NE,Z) l00000000004A1268
	// succ:  l00000000004A1288 l00000000004A1268
l00000000004A1288:
	x1 = x22
	strcmp(x0, x1)
	sp = sp + 0xFFFFFFFFFFFFFFF8
	branch w0 != 0x00000000 l00000000004A1268
	// succ:  l00000000004A1294 l00000000004A1268
l00000000004A1294:
	x23 = x23 + 0xFFFFFFFFFFFFFD70
	x20 = x23 + (int64) ((int32) w20)
	x0 = Mem0[x20 + 8:word64]
	v26 = sp + 32
	x21 = Mem0[v26:word64]
	v26 = v26 + 8
	x22 = Mem0[v26:word64]
	x0 = Mem0[x0:word64]
	v27 = sp + 16
	x19 = Mem0[v27:word64]
	v27 = v27 + 8
	x20 = Mem0[v27:word64]
	x23 = Mem0[sp + 48:word64]
	x29 = Mem0[sp:word64]
	sp = sp + 8
	x30 = Mem0[sp:word64]
	sp = sp + 64
	return
	// succ:  rl_get_termcap_exit
l00000000004A12B8:
	x0 = 0x0000000000000000
	v19 = sp + 16
	x19 = Mem0[v19:word64]
	v19 = v19 + 8
	x20 = Mem0[v19:word64]
	v20 = sp + 32
	x21 = Mem0[v20:word64]
	v20 = v20 + 8
	x22 = Mem0[v20:word64]
	x23 = Mem0[sp + 48:word64]
	x29 = Mem0[sp:word64]
	sp = sp + 8
	x30 = Mem0[sp:word64]
	sp = sp + 64
	return
	// succ:  rl_get_termcap_exit
rl_get_termcap_exit:


// rl_reset_terminal
// Return size: 0
void rl_reset_terminal()
rl_reset_terminal_entry:
	// succ:  l00000000004A12D0
l00000000004A12D0:
	sp = fp
	sp = sp + -16
	Mem0[sp:word64] = x29
	sp = sp + 8
	Mem0[sp:word64] = x30
	x29 = x31 + 0x0000000000000000
	x1 = 0x00000000004E4000
	Mem0[x1 + 312:word32] = 0x00000000
	x1 = 0x00000000004E4000
	Mem0[x1 + 328:word32] = 0x00000000
	call _rl_init_terminal_io (retsize: 0;)
	w0 = 0x00000000
	x29 = Mem0[sp:word64]
	sp = sp + 8
	x30 = Mem0[sp:word64]
	sp = sp + 16
	return
	// succ:  rl_reset_terminal_exit
rl_reset_terminal_exit:


// _rl_output_some_chars
// Return size: 0
void _rl_output_some_chars()
_rl_output_some_chars_entry:
	// succ:  l00000000004A12F8
l00000000004A12F8:
	sp = fp
_rl_output_some_chars_exit:


// _rl_backspace
// Return size: 0
void _rl_backspace()
_rl_backspace_entry:
	// succ:  l00000000004A130C
l00000000004A130C:
	sp = fp
	sp = sp + -48
	Mem0[sp:word64] = x29
	sp = sp + 8
	Mem0[sp:word64] = x30
	x29 = x31 + 0x0000000000000000
	v8 = sp + 32
	Mem0[v8:word64] = x21
	v8 = v8 + 8
	Mem0[v8:word64] = x22
	x21 = 0x00000000004E4000
	v11 = sp + 16
	Mem0[v11:word64] = x19
	v11 = v11 + 8
	Mem0[v11:word64] = x20
	x19 = Mem0[x21 + 272:word64]
	w20 = w0
	NZCV = cond(w0 - w31)
	branch x19 == 0x0000000000000000 l00000000004A1378
	// succ:  l00000000004A1330 l00000000004A1378
l00000000004A1330:
	branch Test(LE,ZCV) l00000000004A1364
	// succ:  l00000000004A1334 l00000000004A1364
l00000000004A1334:
	x22 = 0x00000000004A0000
	x0 = x19
	x22 = x22 + 0xFFFFFFFFFFFFFAAC
	w19 = 0x00000000
	goto l00000000004A134C
	// succ:  l00000000004A134C
l00000000004A1348:
	x0 = Mem0[x21 + 272:word64]
	// succ:  l00000000004A134C
l00000000004A134C:
	w1 = 0x00000001
	x2 = x22
	call tputs (retsize: 0;)
	w19 = w19 + 0x00000001
	NZCV = cond(w19 - w20)
	branch Test(NE,Z) l00000000004A1348
	// succ:  l00000000004A1364 l00000000004A1348
l00000000004A1364:
	w0 = 0x00000000
	v25 = sp + 16
	x19 = Mem0[v25:word64]
	v25 = v25 + 8
	x20 = Mem0[v25:word64]
	v26 = sp + 32
	x21 = Mem0[v26:word64]
	v26 = v26 + 8
	x22 = Mem0[v26:word64]
	x29 = Mem0[sp:word64]
	sp = sp + 8
	x30 = Mem0[sp:word64]
	sp = sp + 48
	return
	// succ:  _rl_backspace_exit
l00000000004A1378:
	x21 = 0x00000000004E4000
	branch Test(LE,ZCV) l00000000004A1364
	// succ:  l00000000004A1380 l00000000004A1364
l00000000004A1380:
	x1 = Mem0[x21 + 160:word64]
	w0 = 0x00000008
	_IO_putc(x0, x1)
	sp = sp + 0xFFFFFFFFFFFFFFF8
	w19 = w19 + 0x00000001
	NZCV = cond(w19 - w20)
	branch Test(NE,Z) l00000000004A1380
	// succ:  l00000000004A1398 l00000000004A1380
l00000000004A1398:
	w0 = 0x00000000
	v21 = sp + 16
	x19 = Mem0[v21:word64]
	v21 = v21 + 8
	x20 = Mem0[v21:word64]
	v22 = sp + 32
	x21 = Mem0[v22:word64]
	v22 = v22 + 8
	x22 = Mem0[v22:word64]
	x29 = Mem0[sp:word64]
	sp = sp + 8
	x30 = Mem0[sp:word64]
	sp = sp + 48
	return
	// succ:  _rl_backspace_exit
_rl_backspace_exit:


// rl_crlf
// Return size: 0
void rl_crlf()
rl_crlf_entry:
	// succ:  l00000000004A13AC
l00000000004A13AC:
	sp = fp
	sp = sp + -16
	Mem0[sp:word64] = x29
	sp = sp + 8
	Mem0[sp:word64] = x30
	x29 = x31 + 0x0000000000000000
	x0 = 0x00000000004E4000
	x1 = Mem0[x0 + 160:word64]
	w0 = 0x0000000A
	_IO_putc(x0, x1)
	sp = sp + 0xFFFFFFFFFFFFFFF8
	w0 = 0x00000000
	x29 = Mem0[sp:word64]
	sp = sp + 8
	x30 = Mem0[sp:word64]
	sp = sp + 16
	return
	// succ:  rl_crlf_exit
rl_crlf_exit:


// rl_ding
// Return size: 0
void rl_ding()
rl_ding_entry:
	// succ:  l00000000004A13D0
l00000000004A13D0:
	sp = fp
	sp = sp + -32
	Mem0[sp:word64] = x29
	sp = sp + 8
	Mem0[sp:word64] = x30
	x29 = x31 + 0x0000000000000000
	x0 = 0x00000000004E1000
	w0 = Mem0[x0 + 3216:word32]
	Mem0[sp + 16:word64] = x19
	branch w0 == 0x00000000 l00000000004A1468
	// succ:  l00000000004A13E8 l00000000004A1468
l00000000004A13E8:
	x0 = 0x00000000004D9000
	w0 = Mem0[x0 + 1240:word32]
	w31 = w0 - 0x00000001
	NZCV = cond(w31)
	branch Test(EQ,Z) l00000000004A1440
	// succ:  l00000000004A13F8 l00000000004A1440
l00000000004A13F8:
	w31 = w0 - 0x00000002
	NZCV = cond(w31)
	branch Test(EQ,Z) l00000000004A1410
	// succ:  l00000000004A1400 l00000000004A1410
l00000000004A1400:
	w0 = 0x00000000
	// succ:  l00000000004A1404
l00000000004A1404:
	x19 = Mem0[sp + 16:word64]
	x29 = Mem0[sp:word64]
	sp = sp + 8
	x30 = Mem0[sp:word64]
	sp = sp + 32
	return
	// succ:  rl_ding_exit
l00000000004A1410:
	x0 = 0x00000000004E2000
	x0 = x0 + 0xFFFFFFFFFFFFFE40
	x0 = Mem0[x0 + 80:word64]
	branch x0 == 0x0000000000000000 l00000000004A1440
	// succ:  l00000000004A1420 l00000000004A1440
l00000000004A1420:
	x2 = 0x00000000004A0000
	w1 = 0x00000001
	x2 = x2 + 0xFFFFFFFFFFFFFAAC
	call tputs (retsize: 0;)
	w0 = 0x00000000
	x19 = Mem0[sp + 16:word64]
	x29 = Mem0[sp:word64]
	sp = sp + 8
	x30 = Mem0[sp:word64]
	sp = sp + 32
	return
	// succ:  rl_ding_exit
l00000000004A1440:
	x19 = 0x00000000004DE000
	x1 = Mem0[x19 + 1640:word64]
	w0 = 0x00000007
	fputc(x0, x1)
	sp = sp + 0xFFFFFFFFFFFFFFF8
	x0 = Mem0[x19 + 1640:word64]
	fflush(x0)
	sp = sp + 0xFFFFFFFFFFFFFFF8
	w0 = 0x00000000
	x19 = Mem0[sp + 16:word64]
	x29 = Mem0[sp:word64]
	sp = sp + 8
	x30 = Mem0[sp:word64]
	sp = sp + 32
	return
	// succ:  rl_ding_exit
l00000000004A1468:
	w0 = 0xFFFFFFFF
	goto l00000000004A1404
	// succ:  l00000000004A1404
rl_ding_exit:


// _rl_enable_meta_key
// Return size: 0
void _rl_enable_meta_key()
_rl_enable_meta_key_entry:
	// succ:  l00000000004A1470
l00000000004A1470:
	sp = fp
	x0 = 0x00000000004E2000
	x0 = x0 + 0xFFFFFFFFFFFFFE40
	w1 = Mem0[x0 + 152:word32]
	branch w1 == 0x00000000 l00000000004A1498
	// succ:  l00000000004A1480 l00000000004A1498
l00000000004A1480:
	x0 = Mem0[x0 + 128:word64]
	branch x0 == 0x0000000000000000 l00000000004A1498
	// succ:  l00000000004A1488 l00000000004A1498
l00000000004A1488:
	x2 = 0x00000000004A0000
	w1 = 0x00000001
	x2 = x2 + 0xFFFFFFFFFFFFFAAC
	call tputs (retsize: 0;)
	return
	// succ:  _rl_enable_meta_key_exit
l00000000004A1498:
	return
	// succ:  _rl_enable_meta_key_exit
_rl_enable_meta_key_exit:


// _rl_control_keypad
// Return size: 0
void _rl_control_keypad()
_rl_control_keypad_entry:
	// succ:  l00000000004A149C
l00000000004A149C:
	sp = fp
	branch w0 != 0x00000000 l00000000004A14C0
	// succ:  l00000000004A14A0 l00000000004A14C0
l00000000004A14A0:
	x0 = 0x00000000004E2000
	x0 = x0 + 0xFFFFFFFFFFFFFE40
	x0 = Mem0[x0 + 104:word64]
	branch x0 == 0x0000000000000000 l00000000004A14D0
	// succ:  l00000000004A14B0 l00000000004A14D0
l00000000004A14B0:
	x2 = 0x00000000004A0000
	w1 = 0x00000001
	x2 = x2 + 0xFFFFFFFFFFFFFAAC
	call tputs (retsize: 0;)
	return
	// succ:  _rl_control_keypad_exit
l00000000004A14C0:
	x0 = 0x00000000004E2000
	x0 = x0 + 0xFFFFFFFFFFFFFE40
	x0 = Mem0[x0 + 112:word64]
	branch x0 != 0x0000000000000000 l00000000004A14B0
	// succ:  l00000000004A14D0 l00000000004A14B0
l00000000004A14D0:
	return
	// succ:  _rl_control_keypad_exit
_rl_control_keypad_exit:


// _rl_set_cursor
// Return size: 0
void _rl_set_cursor()
_rl_set_cursor_entry:
	// succ:  l00000000004A14D4
l00000000004A14D4:
	sp = fp
	x2 = 0x00000000004E2000
	x2 = x2 + 0xFFFFFFFFFFFFFE40
	x3 = Mem0[x2 + 144:word64]
	branch x3 == 0x0000000000000000 l00000000004A1518
	// succ:  l00000000004A14E4 l00000000004A1518
l00000000004A14E4:
	x2 = Mem0[x2 + 136:word64]
	branch x2 == 0x0000000000000000 l00000000004A1518
	// succ:  l00000000004A14EC l00000000004A1518
l00000000004A14EC:
	branch w1 == 0x00000000 l00000000004A1508
	// succ:  l00000000004A14F0 l00000000004A1508
l00000000004A14F0:
	branch w0 == 0x00000000 l00000000004A151C
	// succ:  l00000000004A14F4 l00000000004A151C
l00000000004A14F4:
	x2 = 0x00000000004A0000
	x0 = x3
	w1 = 0x00000001
	x2 = x2 + 0xFFFFFFFFFFFFFAAC
	call tputs (retsize: 0;)
	return
	// succ:  _rl_set_cursor_exit
l00000000004A1508:
	x1 = 0x00000000004D9000
	w1 = Mem0[x1 + 1232:word32]
	NZCV = cond(w0 - w1)
	branch Test(NE,Z) l00000000004A14F0
	// succ:  l00000000004A1518 l00000000004A14F0
l00000000004A1518:
	return
	// succ:  _rl_set_cursor_exit
l00000000004A151C:
	x0 = x2
	x2 = 0x00000000004A0000
	w1 = 0x00000001
	x2 = x2 + 0xFFFFFFFFFFFFFAAC
	call tputs (retsize: 0;)
	return
	// succ:  _rl_set_cursor_exit
_rl_set_cursor_exit:


// rl_insert_text
// Return size: 0
void rl_insert_text()
rl_insert_text_entry:
	// succ:  l00000000004A1530
l00000000004A1530:
	sp = fp
	sp = sp + -64
	Mem0[sp:word64] = x29
	sp = sp + 8
	Mem0[sp:word64] = x30
	x29 = x31 + 0x0000000000000000
	v8 = sp + 16
	Mem0[v8:word64] = x19
	v8 = v8 + 8
	Mem0[v8:word64] = x20
	v11 = sp + 32
	Mem0[v11:word64] = x21
	v11 = v11 + 8
	Mem0[v11:word64] = x22
	branch x0 == 0x0000000000000000 l00000000004A1678
	// succ:  l00000000004A1544 l00000000004A1678
l00000000004A1544:
	v14 = Mem0[x0:byte]
	w3 = (word32) v14
	w2 = 0x00000000
	branch w3 == 0x00000000 l00000000004A1624
	// succ:  l00000000004A1550 l00000000004A1624
l00000000004A1550:
	Mem0[x29 + 48:word64] = x0
	strlen(x0)
	sp = sp + 0xFFFFFFFFFFFFFFF8
	x20 = x0
	w2 = w0
	x1 = Mem0[x29 + 48:word64]
	branch w0 == 0x00000000 l00000000004A1624
	// succ:  l00000000004A1568 l00000000004A1624
l00000000004A1568:
	x22 = 0x00000000004E3000
	x0 = 0x00000000004E1000
	w4 = Mem0[x22 + 3900:word32]
	w2 = Mem0[x0 + 3296:word32]
	w0 = w4 + w20
	NZCV = cond(w0 - w2)
	branch Test(GE,NZV) l00000000004A1668
	// succ:  l00000000004A1584 l00000000004A1668
l00000000004A1584:
	x21 = 0x00000000004E4000
	w5 = Mem0[x21 + 136:word32]
l00000000004A1624:
	w0 = w2
	v25 = sp + 16
	x19 = Mem0[v25:word64]
	v25 = v25 + 8
	x20 = Mem0[v25:word64]
	v26 = sp + 32
	x21 = Mem0[v26:word64]
	v26 = v26 + 8
	x22 = Mem0[v26:word64]
	x29 = Mem0[sp:word64]
	sp = sp + 8
	x30 = Mem0[sp:word64]
	sp = sp + 64
	return
	// succ:  rl_insert_text_exit
l00000000004A1668:
	call rl_extend_line_buffer (retsize: 0;)
	w4 = Mem0[x22 + 3900:word32]
	x1 = Mem0[x29 + 48:word64]
	goto l00000000004A1584
	// succ:  l00000000004A1584
l00000000004A1678:
	w2 = w0
	w0 = w2
	v23 = sp + 16
	x19 = Mem0[v23:word64]
	v23 = v23 + 8
	x20 = Mem0[v23:word64]
	v24 = sp + 32
	x21 = Mem0[v24:word64]
	v24 = v24 + 8
	x22 = Mem0[v24:word64]
	x29 = Mem0[sp:word64]
	sp = sp + 8
	x30 = Mem0[sp:word64]
	sp = sp + 64
	return
	// succ:  rl_insert_text_exit
rl_insert_text_exit:


// fn00000000004A16AC
// Return size: 0
void fn00000000004A16AC()
fn00000000004A16AC_entry:
	// succ:  l00000000004A16AC
l00000000004A16AC:
	sp = fp
	sp = sp + -128
	Mem0[sp:word64] = x29
	sp = sp + 8
	Mem0[sp:word64] = x30
	x29 = x31 + 0x0000000000000000
	v6 = sp + 16
	Mem0[v6:word64] = x19
	v6 = v6 + 8
	Mem0[v6:word64] = x20
	v9 = sp + 32
	Mem0[v9:word64] = x21
	v9 = v9 + 8
	Mem0[v9:word64] = x22
	v12 = sp + 48
	Mem0[v12:word64] = x23
	v12 = v12 + 8
	Mem0[v12:word64] = x24
	v15 = sp + 64
	Mem0[v15:word64] = x25
	v15 = v15 + 8
	Mem0[v15:word64] = x26
	Mem0[sp + 80:word64] = x27
	w19 = w0
	w20 = w1
	__ctype_get_mb_cur_max()
	sp = sp + 0xFFFFFFFFFFFFFFF8
	x31 = x0 - 0x0000000000000001
	NZCV = cond(x31)
	branch Test(EQ,Z) l00000000004A17F8
	// succ:  l00000000004A16DC l00000000004A17F8
l00000000004A16DC:
	x0 = 0x00000000004E2000
	w0 = Mem0[x0 + 3968:word32]
	branch w0 != 0x00000000 l00000000004A17F8
	// succ:  l00000000004A16E8 l00000000004A17F8
l00000000004A16E8:
	x0 = 0x00000000004E2000
	x1 = x0 + 0xFFFFFFFFFFFFFEE8
	w24 = Mem0[x1:word32]
	NZCV = cond(w24 - w31)
	branch Test(LE,ZCV) l00000000004A195C
	// succ:  l00000000004A16FC l00000000004A195C
l00000000004A16FC:
	x19 = x0 + 0xFFFFFFFFFFFFFEE8
	w23 = Mem0[x19 + 16:word32]
	x22 = x19 + 0x0000000000000018
	w21 = w23 + 0x00000001
l00000000004A1768:
	w19 = w19 * w21
	w0 = w19 + 0x00000001
l00000000004A17F8:
	w0 = w19 - 0x00000002
	Mem0[x29 + 96:byte] = (byte) w20
	Mem0[x29 + 97:byte] = 0x00
	w31 = w0 - 0x000003FE
	NZCV = cond(w31)
	w21 = 0x00000001
	branch Test(ULE,ZC) l00000000004A1768
	// succ:  l00000000004A1810 l00000000004A1768
l00000000004A1810:
	w31 = w19 - 0x00000400
	NZCV = cond(w31)
	branch Test(LE,ZCV) l00000000004A18B8
	// succ:  l00000000004A1818 l00000000004A18B8
l00000000004A1818:
l00000000004A1898:
	w0 = w19
	v37 = sp + 32
	x21 = Mem0[v37:word64]
	v37 = v37 + 8
	x22 = Mem0[v37:word64]
	v38 = sp + 16
	x19 = Mem0[v38:word64]
	v38 = v38 + 8
	x20 = Mem0[v38:word64]
	v39 = sp + 48
	x23 = Mem0[v39:word64]
	v39 = v39 + 8
	x24 = Mem0[v39:word64]
	v40 = sp + 64
	x25 = Mem0[v40:word64]
	v40 = v40 + 8
	x26 = Mem0[v40:word64]
	x27 = Mem0[sp + 80:word64]
	x29 = Mem0[sp:word64]
	sp = sp + 8
	x30 = Mem0[sp:word64]
	sp = sp + 128
	return
	// succ:  fn00000000004A16AC_exit
l00000000004A18B8:
	__ctype_get_mb_cur_max()
	sp = sp + 0xFFFFFFFFFFFFFFF8
	x31 = x0 - 0x0000000000000001
	NZCV = cond(x31)
	branch Test(EQ,Z) l00000000004A18D0
	// succ:  l00000000004A18C4 l00000000004A18D0
l00000000004A18C4:
	x0 = 0x00000000004E2000
	w19 = Mem0[x0 + 3968:word32]
	branch w19 == 0x00000000 l00000000004A1944
	// succ:  l00000000004A18D0 l00000000004A1944
l00000000004A18D0:
	x0 = 0x00000000004E1000
	w0 = Mem0[x0 + 3168:word32]
	w19 = w0 & 0x00000800
	branch (w0 & 0x00000800) == 0x00000000 l00000000004A18E8
	// succ:  l00000000004A18E0 l00000000004A18E8
l00000000004A18E0:
	call _rl_any_typein (retsize: 0;)
	branch w0 != 0x00000000 l00000000004A1974
	// succ:  l00000000004A18E8 l00000000004A1974
l00000000004A18E8:
	x0 = x29 + 0x0000000000000060
	x0 = x0 + 24
	Mem0[x0:byte] = (byte) w20
	Mem0[x29 + 121:byte] = 0x00
	w19 = 0x00000000
	call rl_insert_text (retsize: 0;)
	w0 = w19
	v33 = sp + 32
	x21 = Mem0[v33:word64]
	v33 = v33 + 8
	x22 = Mem0[v33:word64]
	v34 = sp + 16
	x19 = Mem0[v34:word64]
	v34 = v34 + 8
	x20 = Mem0[v34:word64]
	v35 = sp + 48
	x23 = Mem0[v35:word64]
	v35 = v35 + 8
	x24 = Mem0[v35:word64]
	v36 = sp + 64
	x25 = Mem0[v36:word64]
	v36 = v36 + 8
	x26 = Mem0[v36:word64]
	x27 = Mem0[sp + 80:word64]
	x29 = Mem0[sp:word64]
	sp = sp + 8
	x30 = Mem0[sp:word64]
	sp = sp + 128
	return
	// succ:  fn00000000004A16AC_exit
l00000000004A1944:
	x0 = x29 + 0x0000000000000060
	call rl_insert_text (retsize: 0;)
	x0 = 0x00000000004E2000
	x0 = x0 + 0xFFFFFFFFFFFFFEE8
	Mem0[x0:word32] = w19
	goto l00000000004A1898
	// succ:  l00000000004A1898
l00000000004A195C:
	Mem0[x1:word32] = w19
	w24 = w19
	goto l00000000004A16FC
	// succ:  l00000000004A16FC
l00000000004A1974:
	w0 = w20
	call _rl_insert_typein (retsize: 0;)
	goto l00000000004A1898
	// succ:  l00000000004A1898
fn00000000004A16AC_exit:


// rl_delete_text
// Return size: 0
void rl_delete_text()
rl_delete_text_entry:
	// succ:  l00000000004A1A54
l00000000004A1A54:
	sp = fp
	sp = sp + -64
	Mem0[sp:word64] = x29
	sp = sp + 8
	Mem0[sp:word64] = x30
	x29 = x31 + 0x0000000000000000
	v8 = sp + 32
	Mem0[v8:word64] = x21
	v8 = v8 + 8
	Mem0[v8:word64] = x22
	v11 = sp + 16
	Mem0[v11:word64] = x19
	v11 = v11 + 8
	Mem0[v11:word64] = x20
	Mem0[sp + 48:word64] = x23
	NZCV = cond(w0 - w1)
	w21 = w1
	branch Test(LE,ZCV) l00000000004A1A80
	// succ:  l00000000004A1A74 l00000000004A1A80
l00000000004A1A74:
	w1 = w0
	w0 = w21
	w21 = w1
	// succ:  l00000000004A1A80
l00000000004A1A80:
	x23 = 0x00000000004E3000
	w1 = Mem0[x23 + 3900:word32]
	NZCV = cond(w21 - w1)
	branch Test(LE,ZCV) l00000000004A1A9C
	// succ:  l00000000004A1A90 l00000000004A1A9C
l00000000004A1A90:
	NZCV = cond(w0 - w1)
l00000000004A1A9C:
	NZCV = cond(w0 - w31)
rl_delete_text_exit:


// _rl_fix_point
// Return size: 0
void _rl_fix_point()
_rl_fix_point_entry:
	// succ:  l00000000004A1B5C
l00000000004A1B5C:
	sp = fp
	x2 = 0x00000000004E4000
	x1 = 0x00000000004E3000
	w3 = Mem0[x2 + 136:word32]
	w1 = Mem0[x1 + 3900:word32]
	NZCV = cond(w3 - w1)
	branch Test(LE,ZCV) l00000000004A1B94
	// succ:  l00000000004A1B74 l00000000004A1B94
l00000000004A1B74:
	Mem0[x2 + 136:word32] = w1
	// succ:  l00000000004A1B78
l00000000004A1B78:
	branch w0 == 0x00000000 l00000000004A1B90
	// succ:  l00000000004A1B7C l00000000004A1B90
l00000000004A1B7C:
	x0 = 0x00000000004E4000
	w2 = Mem0[x0 + 120:word32]
	NZCV = cond(w1 - w2)
	branch Test(LT,NV) l00000000004A1BA0
	// succ:  l00000000004A1B8C l00000000004A1BA0
l00000000004A1B8C:
	branch (w2 & 0x00000000) == 0x00000000 l00000000004A1BA8
	// succ:  l00000000004A1B90 l00000000004A1BA8
l00000000004A1B90:
	return
	// succ:  _rl_fix_point_exit
l00000000004A1B94:
	branch (w3 & 0x00000000) == 0x00000000 l00000000004A1B78
	// succ:  l00000000004A1B98 l00000000004A1B78
l00000000004A1B98:
	Mem0[x2 + 136:word32] = 0x00000000
	goto l00000000004A1B78
	// succ:  l00000000004A1B78
l00000000004A1BA0:
	Mem0[x0 + 120:word32] = w1
	return
	// succ:  _rl_fix_point_exit
l00000000004A1BA8:
	Mem0[x0 + 120:word32] = 0x00000000
	return
	// succ:  _rl_fix_point_exit
_rl_fix_point_exit:


// _rl_replace_text
// Return size: 0
void _rl_replace_text()
_rl_replace_text_entry:
	// succ:  l00000000004A1BB0
l00000000004A1BB0:
	sp = fp
	sp = sp + -48
	Mem0[sp:word64] = x29
	sp = sp + 8
	Mem0[sp:word64] = x30
	x29 = x31 + 0x0000000000000000
	v8 = sp + 16
	Mem0[v8:word64] = x19
	v8 = v8 + 8
	Mem0[v8:word64] = x20
	Mem0[x29 + 32:word64] = x2
	w19 = w1
	x20 = x0
	call rl_begin_undo_group (retsize: 0;)
	x2 = Mem0[x29 + 32:word64]
	NZCV = cond(w19 - w2)
	branch Test(LE,ZCV) l00000000004A1C0C
	// succ:  l00000000004A1BD8 l00000000004A1C0C
l00000000004A1BD8:
	x0 = 0x00000000004E4000
	Mem0[x0 + 136:word32] = w19
	v17 = Mem0[x20:byte]
	w0 = (word32) v17
	w19 = 0x00000000
	branch w0 == 0x00000000 l00000000004A1BF8
	// succ:  l00000000004A1BEC l00000000004A1BF8
l00000000004A1BEC:
	x0 = x20
	call rl_insert_text (retsize: 0;)
	w19 = w0
	// succ:  l00000000004A1BF8
l00000000004A1BF8:
	call rl_end_undo_group (retsize: 0;)
	w0 = w19
	v18 = sp + 16
	x19 = Mem0[v18:word64]
	v18 = v18 + 8
	x20 = Mem0[v18:word64]
	x29 = Mem0[sp:word64]
	sp = sp + 8
	x30 = Mem0[sp:word64]
	sp = sp + 48
	return
	// succ:  _rl_replace_text_exit
l00000000004A1C0C:
	w0 = w19
	w1 = w2 + 0x00000001
	call rl_delete_text (retsize: 0;)
	goto l00000000004A1BD8
	// succ:  l00000000004A1BD8
_rl_replace_text_exit:


// rl_replace_line
// Return size: 0
void rl_replace_line()
rl_replace_line_entry:
	// succ:  l00000000004A1C1C
l00000000004A1C1C:
	sp = fp
	sp = sp + -48
	Mem0[sp:word64] = x29
	sp = sp + 8
	Mem0[sp:word64] = x30
	x29 = x31 + 0x0000000000000000
	v8 = sp + 16
	Mem0[v8:word64] = x19
	v8 = v8 + 8
	Mem0[v8:word64] = x20
	Mem0[sp + 32:word64] = x21
	w20 = w1
	x21 = x0
	strlen(x0)
	sp = sp + 0xFFFFFFFFFFFFFFF8
	x19 = x0
	x0 = 0x00000000004E1000
	w0 = Mem0[x0 + 3296:word32]
	NZCV = cond(w19 - w0)
	branch Test(GE,NZV) l00000000004A1C80
	// succ:  l00000000004A1C4C l00000000004A1C80
l00000000004A1C4C:
	x0 = 0x00000000004E1000
	x0 = Mem0[x0 + 3256:word64]
	x1 = x21
	strcpy(x0, x1)
	sp = sp + 0xFFFFFFFFFFFFFFF8
	x0 = 0x00000000004E3000
	Mem0[x0 + 3900:word32] = w19
	branch w20 == 0x00000000 l00000000004A1C6C
	// succ:  l00000000004A1C68 l00000000004A1C6C
l00000000004A1C68:
	call rl_free_undo_list (retsize: 0;)
	// succ:  l00000000004A1C6C
l00000000004A1C6C:
	v18 = sp + 16
	x19 = Mem0[v18:word64]
	v18 = v18 + 8
	x20 = Mem0[v18:word64]
	x21 = Mem0[sp + 32:word64]
	x29 = Mem0[sp:word64]
	sp = sp + 8
	x30 = Mem0[sp:word64]
	sp = sp + 48
	w0 = 0x00000001
	// succ:  l00000000004A1C7C_thunk__rl_fix_point
l00000000004A1C7C_thunk__rl_fix_point:
	call _rl_fix_point (retsize: 0;)
	return
	// succ:  rl_replace_line_exit
l00000000004A1C80:
	w0 = w19
	call rl_extend_line_buffer (retsize: 0;)
	goto l00000000004A1C4C
	// succ:  l00000000004A1C4C
rl_replace_line_exit:


// _rl_forward_char_internal
// Return size: 0
void _rl_forward_char_internal()
_rl_forward_char_internal_entry:
	// succ:  l00000000004A1C8C
l00000000004A1C8C:
	sp = fp
	sp = sp + -32
	Mem0[sp:word64] = x29
	sp = sp + 8
	Mem0[sp:word64] = x30
	x29 = x31 + 0x0000000000000000
	v8 = sp + 16
	Mem0[v8:word64] = x19
	v8 = v8 + 8
	Mem0[v8:word64] = x20
	w2 = w0
	x20 = 0x00000000004E1000
	x0 = 0x00000000004E4000
	w1 = Mem0[x0 + 136:word32]
	x0 = Mem0[x20 + 3256:word64]
	w3 = 0x00000001
	call _rl_find_next_mbchar (retsize: 0;)
	x19 = 0x00000000004E3000
	w1 = Mem0[x19 + 3900:word32]
	NZCV = cond(w0 - w1)
	branch Test(LT,NV) l00000000004A1CD0
	// succ:  l00000000004A1CC4 l00000000004A1CD0
l00000000004A1CC4:
	x2 = 0x00000000004D9000
	w2 = Mem0[x2 + 1208:word32]
	branch w2 == 0x00000000 l00000000004A1CE4
	// succ:  l00000000004A1CD0 l00000000004A1CE4
l00000000004A1CD0:
	branch (w1 & 0x00000000) == 0x00000000 l00000000004A1CD8
	// succ:  l00000000004A1CD4 l00000000004A1CD8
l00000000004A1CD4:
	Mem0[x19 + 3900:word32] = 0x00000000
	// succ:  l00000000004A1CD8
l00000000004A1CD8:
	v17 = sp + 16
	x19 = Mem0[v17:word64]
	v17 = v17 + 8
	x20 = Mem0[v17:word64]
	x29 = Mem0[sp:word64]
	sp = sp + 8
	x30 = Mem0[sp:word64]
	sp = sp + 32
	return
	// succ:  _rl_forward_char_internal_exit
l00000000004A1CE4:
	x2 = 0x00000000004D9000
	x3 = Mem0[x2 + 1200:word64]
	x2 = 0x00000000004DA000
	x2 = x2 + 0x0000000000000510
	x31 = x3 - x2
	NZCV = cond(x31)
	branch Test(NE,Z) l00000000004A1CD0
	// succ:  l00000000004A1CFC l00000000004A1CD0
l00000000004A1CFC:
	x0 = Mem0[x20 + 3256:word64]
	w2 = 0x00000001
	call _rl_find_prev_mbchar (retsize: 0;)
	w1 = Mem0[x19 + 3900:word32]
	goto l00000000004A1CD0
	// succ:  l00000000004A1CD0
_rl_forward_char_internal_exit:


// rl_backward_byte
// Return size: 0
void rl_backward_byte()
rl_backward_byte_entry:
	// succ:  l00000000004A1D10
l00000000004A1D10:
	sp = fp
	sp = sp + -32
	Mem0[sp:word64] = x29
	sp = sp + 8
	Mem0[sp:word64] = x30
	x29 = x31 + 0x0000000000000000
	Mem0[sp + 16:word64] = x19
	NZCV = cond(w0 - w31)
	branch Test(LT,NV) l00000000004A1D68
	// succ:  l00000000004A1D24 l00000000004A1D68
l00000000004A1D24:
	x19 = 0x00000000004E4000
	branch Test(EQ,Z) l00000000004A1D60
	// succ:  l00000000004A1D2C l00000000004A1D60
l00000000004A1D2C:
	w1 = Mem0[x19 + 136:word32]
	NZCV = cond(w0 - w1)
	branch Test(GT,NZV) l00000000004A1D58
	// succ:  l00000000004A1D38 l00000000004A1D58
l00000000004A1D38:
	w0 = w1 - w0
	Mem0[x19 + 136:word32] = w0
	// succ:  l00000000004A1D40
l00000000004A1D40:
	branch (w0 & 0x00000000) == 0x00000000 l00000000004A1D48
	// succ:  l00000000004A1D44 l00000000004A1D48
l00000000004A1D44:
	Mem0[x19 + 136:word32] = 0x00000000
	// succ:  l00000000004A1D48
l00000000004A1D48:
	w0 = 0x00000000
	x19 = Mem0[sp + 16:word64]
	x29 = Mem0[sp:word64]
	sp = sp + 8
	x30 = Mem0[sp:word64]
	sp = sp + 32
	return
	// succ:  rl_backward_byte_exit
l00000000004A1D58:
	Mem0[x19 + 136:word32] = 0x00000000
	call rl_ding (retsize: 0;)
	// succ:  l00000000004A1D60
l00000000004A1D60:
	w0 = Mem0[x19 + 136:word32]
	goto l00000000004A1D40
	// succ:  l00000000004A1D40
l00000000004A1D68:
	x19 = Mem0[sp + 16:word64]
	x29 = Mem0[sp:word64]
	sp = sp + 8
	x30 = Mem0[sp:word64]
	sp = sp + 32
	w0 = w31 - w0
	// succ:  l00000000004A1D74_thunk_rl_forward_byte
l00000000004A1D74_thunk_rl_forward_byte:
	call rl_forward_byte (retsize: 0;)
	return
	// succ:  rl_backward_byte_exit
rl_backward_byte_exit:


// rl_forward_byte
// Return size: 0
void rl_forward_byte()
rl_forward_byte_entry:
	// succ:  l00000000004A1D78
l00000000004A1D78:
	sp = fp
	sp = sp + -32
	Mem0[sp:word64] = x29
	sp = sp + 8
	Mem0[sp:word64] = x30
	x29 = x31 + 0x0000000000000000
	Mem0[sp + 16:word64] = x19
	NZCV = cond(w0 - w31)
	branch Test(LT,NV) l00000000004A1E14
	// succ:  l00000000004A1D8C l00000000004A1E14
l00000000004A1D8C:
	x19 = 0x00000000004E3000
	branch Test(EQ,Z) l00000000004A1E04
	// succ:  l00000000004A1D94 l00000000004A1E04
l00000000004A1D94:
	x2 = 0x00000000004E4000
	w1 = Mem0[x19 + 3900:word32]
	w3 = Mem0[x2 + 136:word32]
	NZCV = cond(w1 - w31)
	w0 = w0 + w3
	branch Test(LE,ZCV) l00000000004A1E0C
	// succ:  l00000000004A1DAC l00000000004A1E0C
l00000000004A1DAC:
	x3 = 0x00000000004D9000
	w4 = Mem0[x3 + 1208:word32]
	w3 = 0x00000000
	branch w4 != 0x00000000 l00000000004A1DD4
	// succ:  l00000000004A1DBC l00000000004A1DD4
l00000000004A1DBC:
	x3 = 0x00000000004D9000
	x4 = Mem0[x3 + 1200:word64]
	x3 = 0x00000000004DA000
	x3 = x3 + 0x0000000000000510
	x31 = x4 - x3
	NZCV = cond(x31)
	w3 = (word32) Test(EQ,Z)
	// succ:  l00000000004A1DD4
l00000000004A1DD4:
	w3 = w1 - w3
	// succ:  l00000000004A1DD8
l00000000004A1DD8:
	NZCV = cond(w3 - w0)
	branch Test(LT,NV) l00000000004A1DFC
	// succ:  l00000000004A1DE0 l00000000004A1DFC
l00000000004A1DE0:
	Mem0[x2 + 136:word32] = w0
	// succ:  l00000000004A1DE4
l00000000004A1DE4:
	branch (w1 & 0x00000000) == 0x00000000 l00000000004A1DEC
	// succ:  l00000000004A1DE8 l00000000004A1DEC
l00000000004A1DE8:
	Mem0[x19 + 3900:word32] = 0x00000000
	// succ:  l00000000004A1DEC
l00000000004A1DEC:
	w0 = 0x00000000
	x19 = Mem0[sp + 16:word64]
	x29 = Mem0[sp:word64]
	sp = sp + 8
	x30 = Mem0[sp:word64]
	sp = sp + 32
	return
	// succ:  rl_forward_byte_exit
l00000000004A1DFC:
	Mem0[x2 + 136:word32] = w3
	call rl_ding (retsize: 0;)
	// succ:  l00000000004A1E04
l00000000004A1E04:
	w1 = Mem0[x19 + 3900:word32]
	goto l00000000004A1DE4
	// succ:  l00000000004A1DE4
l00000000004A1E0C:
	w3 = w1
	goto l00000000004A1DD8
	// succ:  l00000000004A1DD8
l00000000004A1E14:
	x19 = Mem0[sp + 16:word64]
	x29 = Mem0[sp:word64]
	sp = sp + 8
	x30 = Mem0[sp:word64]
	sp = sp + 32
	w0 = w31 - w0
	// succ:  l00000000004A1E20_thunk_rl_backward_byte
l00000000004A1E20_thunk_rl_backward_byte:
	call rl_backward_byte (retsize: 0;)
	return
	// succ:  rl_forward_byte_exit
rl_forward_byte_exit:


// rl_backward_char
// Return size: 0
void rl_backward_char()
rl_backward_char_entry:
	// succ:  l00000000004A1E24
l00000000004A1E24:
	sp = fp
	sp = sp + -64
	Mem0[sp:word64] = x29
	sp = sp + 8
	Mem0[sp:word64] = x30
	x29 = x31 + 0x0000000000000000
	v6 = sp + 16
	Mem0[v6:word64] = x19
	v6 = v6 + 8
	Mem0[v6:word64] = x20
	Mem0[x29 + 48:word64] = x1
	Mem0[sp + 32:word64] = x21
	w19 = w0
	__ctype_get_mb_cur_max()
	sp = sp + 0xFFFFFFFFFFFFFFF8
	x31 = x0 - 0x0000000000000001
	NZCV = cond(x31)
	x1 = Mem0[x29 + 48:word64]
	branch Test(EQ,Z) l00000000004A1EBC
	// succ:  l00000000004A1E4C l00000000004A1EBC
l00000000004A1E4C:
	x0 = 0x00000000004E2000
	w0 = Mem0[x0 + 3968:word32]
	branch w0 != 0x00000000 l00000000004A1EBC
	// succ:  l00000000004A1E58 l00000000004A1EBC
l00000000004A1E58:
	NZCV = cond(w19 - w31)
	branch Test(LT,NV) l00000000004A1EEC
	// succ:  l00000000004A1E60 l00000000004A1EEC
l00000000004A1E60:
	branch Test(EQ,Z) l00000000004A1EA8
	// succ:  l00000000004A1E64 l00000000004A1EA8
l00000000004A1E64:
	x21 = 0x00000000004E4000
	w1 = Mem0[x21 + 136:word32]
	x20 = 0x00000000004E1000
	NZCV = cond(w1 - w31)
	branch Test(GT,NZV) l00000000004A1E84
	// succ:  l00000000004A1E78 l00000000004A1E84
l00000000004A1E78:
	goto l00000000004A1ED0
	// succ:  l00000000004A1ED0
l00000000004A1E7C:
	NZCV = cond(w19 - w31)
	branch Test(LE,ZCV) l00000000004A1EA0
	// succ:  l00000000004A1E84 l00000000004A1EA0
l00000000004A1E84:
	x0 = Mem0[x20 + 3256:word64]
	w2 = 0x00000001
	call _rl_find_prev_mbchar (retsize: 0;)
	NZCV = cond(w0 - w31)
	w1 = w0
	w19 = w19 - 0x00000001
	branch Test(GT,NZV) l00000000004A1E7C
	// succ:  l00000000004A1EA0 l00000000004A1E7C
l00000000004A1EA0:
	branch w19 != 0x00000000 l00000000004A1ED0
	// succ:  l00000000004A1EA4 l00000000004A1ED0
l00000000004A1EA4:
	Mem0[x21 + 136:word32] = w1
	// succ:  l00000000004A1EA8
l00000000004A1EA8:
	w0 = 0x00000000
	v22 = sp + 16
	x19 = Mem0[v22:word64]
	v22 = v22 + 8
	x20 = Mem0[v22:word64]
	x21 = Mem0[sp + 32:word64]
	x29 = Mem0[sp:word64]
	sp = sp + 8
	x30 = Mem0[sp:word64]
	sp = sp + 64
	return
	// succ:  rl_backward_char_exit
l00000000004A1EBC:
	w0 = w19
	x21 = Mem0[sp + 32:word64]
	v25 = sp + 16
	x19 = Mem0[v25:word64]
	v25 = v25 + 8
	x20 = Mem0[v25:word64]
	x29 = Mem0[sp:word64]
	sp = sp + 8
	x30 = Mem0[sp:word64]
	sp = sp + 64
	// succ:  l00000000004A1ECC_thunk_rl_backward_byte
l00000000004A1ECC_thunk_rl_backward_byte:
	call rl_backward_byte (retsize: 0;)
	return
	// succ:  rl_backward_char_exit
l00000000004A1ED0:
	Mem0[x21 + 136:word32] = 0x00000000
	call rl_ding (retsize: 0;)
	w0 = 0x00000000
	v20 = sp + 16
	x19 = Mem0[v20:word64]
	v20 = v20 + 8
	x20 = Mem0[v20:word64]
	x21 = Mem0[sp + 32:word64]
	x29 = Mem0[sp:word64]
	sp = sp + 8
	x30 = Mem0[sp:word64]
	sp = sp + 64
	return
	// succ:  rl_backward_char_exit
l00000000004A1EEC:
	w0 = w31 - w19
	x21 = Mem0[sp + 32:word64]
	v24 = sp + 16
	x19 = Mem0[v24:word64]
	v24 = v24 + 8
	x20 = Mem0[v24:word64]
	x29 = Mem0[sp:word64]
	sp = sp + 8
	x30 = Mem0[sp:word64]
	sp = sp + 64
	// succ:  l00000000004A1EFC_thunk_rl_forward_char
l00000000004A1EFC_thunk_rl_forward_char:
	call rl_forward_char (retsize: 0;)
	return
	// succ:  rl_backward_char_exit
rl_backward_char_exit:


// rl_forward_char
// Return size: 0
void rl_forward_char()
rl_forward_char_entry:
	// succ:  l00000000004A1F00
l00000000004A1F00:
	sp = fp
	sp = sp + -48
	Mem0[sp:word64] = x29
	sp = sp + 8
	Mem0[sp:word64] = x30
	x29 = x31 + 0x0000000000000000
	v8 = sp + 16
	Mem0[v8:word64] = x19
	v8 = v8 + 8
	Mem0[v8:word64] = x20
	Mem0[x29 + 32:word64] = x1
	w19 = w0
	__ctype_get_mb_cur_max()
	sp = sp + 0xFFFFFFFFFFFFFFF8
	x31 = x0 - 0x0000000000000001
	NZCV = cond(x31)
	x1 = Mem0[x29 + 32:word64]
	branch Test(EQ,Z) l00000000004A1F80
	// succ:  l00000000004A1F24 l00000000004A1F80
l00000000004A1F24:
	x0 = 0x00000000004E2000
	w0 = Mem0[x0 + 3968:word32]
	branch w0 != 0x00000000 l00000000004A1F80
	// succ:  l00000000004A1F30 l00000000004A1F80
l00000000004A1F30:
	NZCV = cond(w19 - w31)
	branch Test(LT,NV) l00000000004A1FB4
	// succ:  l00000000004A1F38 l00000000004A1FB4
l00000000004A1F38:
	branch Test(EQ,Z) l00000000004A1F70
	// succ:  l00000000004A1F3C l00000000004A1F70
l00000000004A1F3C:
	x20 = 0x00000000004E4000
	x1 = 0x00000000004E3000
	w0 = Mem0[x20 + 136:word32]
	w1 = Mem0[x1 + 3900:word32]
	NZCV = cond(w0 - w1)
	branch Test(EQ,Z) l00000000004A1F9C
	// succ:  l00000000004A1F54 l00000000004A1F9C
l00000000004A1F54:
	w0 = w19
	call _rl_forward_char_internal (retsize: 0;)
	w19 = w0
	w0 = Mem0[x20 + 136:word32]
	NZCV = cond(w0 - w19)
	branch Test(EQ,Z) l00000000004A1F90
	// succ:  l00000000004A1F6C l00000000004A1F90
l00000000004A1F6C:
	Mem0[x20 + 136:word32] = w19
	// succ:  l00000000004A1F70
l00000000004A1F70:
	w0 = 0x00000000
	v23 = sp + 16
	x19 = Mem0[v23:word64]
	v23 = v23 + 8
	x20 = Mem0[v23:word64]
	x29 = Mem0[sp:word64]
	sp = sp + 8
	x30 = Mem0[sp:word64]
	sp = sp + 48
	return
	// succ:  rl_forward_char_exit
l00000000004A1F80:
	w0 = w19
	v18 = sp + 16
	x19 = Mem0[v18:word64]
	v18 = v18 + 8
	x20 = Mem0[v18:word64]
	x29 = Mem0[sp:word64]
	sp = sp + 8
	x30 = Mem0[sp:word64]
	sp = sp + 48
	// succ:  l00000000004A1F8C_thunk_rl_forward_byte
l00000000004A1F8C_thunk_rl_forward_byte:
	call rl_forward_byte (retsize: 0;)
	return
	// succ:  rl_forward_char_exit
l00000000004A1F90:
	call rl_ding (retsize: 0;)
	Mem0[x20 + 136:word32] = w19
	goto l00000000004A1F70
	// succ:  l00000000004A1F70
l00000000004A1F9C:
	x0 = 0x00000000004D9000
	w0 = Mem0[x0 + 1208:word32]
	w31 = w0 - 0x00000001
	NZCV = cond(w31)
	branch Test(NE,Z) l00000000004A1F54
	// succ:  l00000000004A1FAC l00000000004A1F54
l00000000004A1FAC:
	call rl_ding (retsize: 0;)
	goto l00000000004A1F70
	// succ:  l00000000004A1F70
l00000000004A1FB4:
	w0 = w31 - w19
	v19 = sp + 16
	x19 = Mem0[v19:word64]
	v19 = v19 + 8
	x20 = Mem0[v19:word64]
	x29 = Mem0[sp:word64]
	sp = sp + 8
	x30 = Mem0[sp:word64]
	sp = sp + 48
	// succ:  l00000000004A1FC0_thunk_rl_backward_char
l00000000004A1FC0_thunk_rl_backward_char:
	call rl_backward_char (retsize: 0;)
	return
	// succ:  rl_forward_char_exit
rl_forward_char_exit:


// rl_forward
// Return size: 0
void rl_forward()
rl_forward_entry:
	// succ:  l00000000004A1FC4
l00000000004A1FC4:
	sp = fp
	// succ:  l00000000004A1FC4_thunk_rl_forward_char
l00000000004A1FC4_thunk_rl_forward_char:
	call rl_forward_char (retsize: 0;)
	return
	// succ:  rl_forward_exit
rl_forward_exit:


// rl_backward
// Return size: 0
void rl_backward()
rl_backward_entry:
	// succ:  l00000000004A1FC8
l00000000004A1FC8:
	sp = fp
	// succ:  l00000000004A1FC8_thunk_rl_backward_char
l00000000004A1FC8_thunk_rl_backward_char:
	call rl_backward_char (retsize: 0;)
	return
	// succ:  rl_backward_exit
rl_backward_exit:


// rl_beg_of_line
// Return size: 0
void rl_beg_of_line()
rl_beg_of_line_entry:
	// succ:  l00000000004A1FCC
l00000000004A1FCC:
	sp = fp
	x0 = 0x00000000004E4000
	Mem0[x0 + 136:word32] = 0x00000000
	w0 = 0x00000000
	return
	// succ:  rl_beg_of_line_exit
rl_beg_of_line_exit:


// rl_end_of_line
// Return size: 0
void rl_end_of_line()
rl_end_of_line_entry:
	// succ:  l00000000004A1FDC
l00000000004A1FDC:
	sp = fp
	x0 = 0x00000000004E3000
	w1 = Mem0[x0 + 3900:word32]
	x0 = 0x00000000004E4000
	Mem0[x0 + 136:word32] = w1
	w0 = 0x00000000
	return
	// succ:  rl_end_of_line_exit
rl_end_of_line_exit:


// rl_backward_word
// Return size: 0
void rl_backward_word()
rl_backward_word_entry:
	// succ:  l00000000004A1FF4
l00000000004A1FF4:
	sp = fp
	sp = sp + -64
	Mem0[sp:word64] = x29
	sp = sp + 8
	Mem0[sp:word64] = x30
	x29 = x31 + 0x0000000000000000
	Mem0[sp + 48:word64] = x23
	v7 = sp + 16
	Mem0[v7:word64] = x19
	v7 = v7 + 8
	Mem0[v7:word64] = x20
	v10 = sp + 32
	Mem0[v10:word64] = x21
	v10 = v10 + 8
	Mem0[v10:word64] = x22
	NZCV = cond(w0 - w31)
	w23 = w0
	branch Test(LT,NV) l00000000004A2174
	// succ:  l00000000004A2014 l00000000004A2174
l00000000004A2014:
	branch Test(EQ,Z) l00000000004A212C
	// succ:  l00000000004A2018 l00000000004A212C
l00000000004A2018:
	x20 = 0x00000000004E4000
	w0 = Mem0[x20 + 136:word32]
	branch w0 == 0x00000000 l00000000004A212C
	// succ:  l00000000004A2024 l00000000004A212C
l00000000004A2024:
	x22 = 0x00000000004E2000
	x21 = 0x00000000004E1000
	x20 = x20 + 0x0000000000000088
	x22 = x22 + 0xFFFFFFFFFFFFFF80
	// succ:  l00000000004A2034
l00000000004A2034:
	__ctype_get_mb_cur_max()
	sp = sp + 0xFFFFFFFFFFFFFFF8
	x31 = x0 - 0x0000000000000001
	NZCV = cond(x31)
	branch Test(ULE,ZC) l00000000004A2048
	// succ:  l00000000004A2040 l00000000004A2048
l00000000004A2040:
	w0 = Mem0[x22:word32]
	branch w0 == 0x00000000 l00000000004A215C
	// succ:  l00000000004A2048 l00000000004A215C
l00000000004A2048:
	w19 = Mem0[x20:word32]
	w19 = w19 - 0x00000001
	// succ:  l00000000004A2050
l00000000004A2050:
	x0 = Mem0[x21 + 3256:word64]
	w1 = w19
	call _rl_char_value (retsize: 0;)
	call _rl_walphabetic (retsize: 0;)
	branch w0 != 0x00000000 l00000000004A20DC
	// succ:  l00000000004A2064 l00000000004A20DC
l00000000004A2064:
	Mem0[x20:word32] = w19
	NZCV = cond(w19 - w31)
	branch Test(GT,NZV) l00000000004A209C
	// succ:  l00000000004A2070 l00000000004A209C
l00000000004A2070:
	goto l00000000004A20E0
	// succ:  l00000000004A20E0
l00000000004A2074:
	w19 = Mem0[x20:word32]
	x0 = Mem0[x21 + 3256:word64]
	w19 = w19 - 0x00000001
	w1 = w19
	call _rl_char_value (retsize: 0;)
	call _rl_walphabetic (retsize: 0;)
	NZCV = cond(w19 - w31)
	branch w0 != 0x00000000 l00000000004A20DC
	// succ:  l00000000004A2094 l00000000004A20DC
l00000000004A2094:
	Mem0[x20:word32] = w19
	branch Test(LE,ZCV) l00000000004A20E0
	// succ:  l00000000004A209C l00000000004A20E0
l00000000004A209C:
	__ctype_get_mb_cur_max()
	sp = sp + 0xFFFFFFFFFFFFFFF8
	x31 = x0 - 0x0000000000000001
	NZCV = cond(x31)
	branch Test(ULE,ZC) l00000000004A2074
	// succ:  l00000000004A20A8 l00000000004A2074
l00000000004A20A8:
	w1 = Mem0[x22:word32]
	branch w1 != 0x00000000 l00000000004A2074
	// succ:  l00000000004A20B0 l00000000004A2074
l00000000004A20B0:
	w1 = Mem0[x20:word32]
	x0 = Mem0[x21 + 3256:word64]
	w2 = 0x00000001
	call _rl_find_prev_mbchar (retsize: 0;)
	w19 = w0
	x0 = Mem0[x21 + 3256:word64]
	w1 = w19
	call _rl_char_value (retsize: 0;)
	call _rl_walphabetic (retsize: 0;)
	NZCV = cond(w19 - w31)
	branch w0 == 0x00000000 l00000000004A2094
	// succ:  l00000000004A20DC l00000000004A2094
l00000000004A20DC:
	w19 = Mem0[x20:word32]
	// succ:  l00000000004A20E0
l00000000004A20E0:
	branch w19 == 0x00000000 l00000000004A211C
	// succ:  l00000000004A20E4 l00000000004A211C
l00000000004A20E4:
	__ctype_get_mb_cur_max()
	sp = sp + 0xFFFFFFFFFFFFFFF8
	x31 = x0 - 0x0000000000000001
	NZCV = cond(x31)
	branch Test(ULE,ZC) l00000000004A20F8
	// succ:  l00000000004A20F0 l00000000004A20F8
l00000000004A20F0:
	w1 = Mem0[x22:word32]
	branch w1 == 0x00000000 l00000000004A2144
	// succ:  l00000000004A20F8 l00000000004A2144
l00000000004A20F8:
	w19 = Mem0[x20:word32]
	w19 = w19 - 0x00000001
	// succ:  l00000000004A2100
l00000000004A2100:
	x0 = Mem0[x21 + 3256:word64]
	w1 = w19
	call _rl_char_value (retsize: 0;)
	call _rl_walphabetic (retsize: 0;)
	branch w0 == 0x00000000 l00000000004A211C
	// succ:  l00000000004A2114 l00000000004A211C
l00000000004A2114:
	Mem0[x20:word32] = w19
	branch w19 != 0x00000000 l00000000004A20E4
	// succ:  l00000000004A211C l00000000004A20E4
l00000000004A211C:
	w23 = w23 - 0x00000001
	NZCV = cond(w23)
	branch Test(EQ,Z) l00000000004A212C
	// succ:  l00000000004A2124 l00000000004A212C
l00000000004A2124:
	w0 = Mem0[x20:word32]
	branch w0 != 0x00000000 l00000000004A2034
	// succ:  l00000000004A212C l00000000004A2034
l00000000004A212C:
	w0 = 0x00000000
	v24 = sp + 16
	x19 = Mem0[v24:word64]
	v24 = v24 + 8
	x20 = Mem0[v24:word64]
	v25 = sp + 32
	x21 = Mem0[v25:word64]
	v25 = v25 + 8
	x22 = Mem0[v25:word64]
	x23 = Mem0[sp + 48:word64]
	x29 = Mem0[sp:word64]
	sp = sp + 8
	x30 = Mem0[sp:word64]
	sp = sp + 64
	return
	// succ:  rl_backward_word_exit
l00000000004A2144:
	x0 = Mem0[x21 + 3256:word64]
	w1 = Mem0[x20:word32]
	w2 = 0x00000001
	call _rl_find_prev_mbchar (retsize: 0;)
	w19 = w0
	goto l00000000004A2100
	// succ:  l00000000004A2100
l00000000004A215C:
	x0 = Mem0[x21 + 3256:word64]
	w1 = Mem0[x20:word32]
	w2 = 0x00000001
	call _rl_find_prev_mbchar (retsize: 0;)
	w19 = w0
	goto l00000000004A2050
	// succ:  l00000000004A2050
l00000000004A2174:
	v28 = sp + 16
	x19 = Mem0[v28:word64]
	v28 = v28 + 8
	x20 = Mem0[v28:word64]
	v29 = sp + 32
	x21 = Mem0[v29:word64]
	v29 = v29 + 8
	x22 = Mem0[v29:word64]
	x23 = Mem0[sp + 48:word64]
	x29 = Mem0[sp:word64]
	sp = sp + 8
	x30 = Mem0[sp:word64]
	sp = sp + 64
	w0 = w31 - w0
	// succ:  l00000000004A2188_thunk_rl_forward_word
l00000000004A2188_thunk_rl_forward_word:
	call rl_forward_word (retsize: 0;)
	return
	// succ:  rl_backward_word_exit
rl_backward_word_exit:


// rl_forward_word
// Return size: 0
void rl_forward_word()
rl_forward_word_entry:
	// succ:  l00000000004A218C
l00000000004A218C:
	sp = fp
	sp = sp + -64
	Mem0[sp:word64] = x29
	sp = sp + 8
	Mem0[sp:word64] = x30
	x29 = x31 + 0x0000000000000000
	Mem0[sp + 48:word64] = x23
	v9 = sp + 16
	Mem0[v9:word64] = x19
	v9 = v9 + 8
	Mem0[v9:word64] = x20
	v12 = sp + 32
	Mem0[v12:word64] = x21
	v12 = v12 + 8
	Mem0[v12:word64] = x22
	NZCV = cond(w0 - w31)
	w23 = w0
	branch Test(LT,NV) l00000000004A2390
	// succ:  l00000000004A21AC l00000000004A2390
l00000000004A21AC:
	branch Test(EQ,Z) l00000000004A22AC
	// succ:  l00000000004A21B0 l00000000004A22AC
l00000000004A21B0:
	x19 = 0x00000000004E4000
	x21 = 0x00000000004E3000
	w1 = Mem0[x19 + 136:word32]
	w0 = Mem0[x21 + 3900:word32]
	NZCV = cond(w1 - w0)
	branch Test(EQ,Z) l00000000004A22AC
	// succ:  l00000000004A21C8 l00000000004A22AC
l00000000004A21C8:
	x22 = 0x00000000004E2000
	x20 = 0x00000000004E1000
	x19 = x19 + 0x0000000000000088
	x21 = x21 + 0xFFFFFFFFFFFFFF3C
	x22 = x22 + 0xFFFFFFFFFFFFFF80
	// succ:  l00000000004A21DC
l00000000004A21DC:
	x0 = Mem0[x20 + 3256:word64]
	call _rl_char_value (retsize: 0;)
	call _rl_walphabetic (retsize: 0;)
	branch w0 == 0x00000000 l00000000004A22C4
	// succ:  l00000000004A21EC l00000000004A22C4
l00000000004A21EC:
	w0 = Mem0[x19:word32]
	w2 = Mem0[x21:word32]
	// succ:  l00000000004A21F4
l00000000004A21F4:
	NZCV = cond(w0 - w2)
	branch Test(EQ,Z) l00000000004A22AC
	// succ:  l00000000004A21FC l00000000004A22AC
l00000000004A21FC:
	__ctype_get_mb_cur_max()
	sp = sp + 0xFFFFFFFFFFFFFFF8
	x31 = x0 - 0x0000000000000001
	NZCV = cond(x31)
	branch Test(ULE,ZC) l00000000004A2210
	// succ:  l00000000004A2208 l00000000004A2210
l00000000004A2208:
	w0 = Mem0[x22:word32]
	branch w0 == 0x00000000 l00000000004A2360
	// succ:  l00000000004A2210 l00000000004A2360
l00000000004A2210:
	w0 = Mem0[x19:word32]
	w0 = w0 + 0x00000001
	// succ:  l00000000004A2218
l00000000004A2218:
	w2 = Mem0[x21:word32]
	Mem0[x19:word32] = w0
	NZCV = cond(w0 - w2)
	w1 = w0
	branch Test(LT,NV) l00000000004A224C
	// succ:  l00000000004A222C l00000000004A224C
l00000000004A222C:
	goto l00000000004A2294
	// succ:  l00000000004A2294
l00000000004A2230:
	w0 = Mem0[x19:word32]
	w1 = Mem0[x21:word32]
	w0 = w0 + 0x00000001
	Mem0[x19:word32] = w0
	NZCV = cond(w0 - w1)
	branch Test(GE,NZV) l00000000004A2294
	// succ:  l00000000004A2248 l00000000004A2294
l00000000004A2248:
	w1 = w0
	// succ:  l00000000004A224C
l00000000004A224C:
	x0 = Mem0[x20 + 3256:word64]
	call _rl_char_value (retsize: 0;)
	call _rl_walphabetic (retsize: 0;)
	branch w0 == 0x00000000 l00000000004A2294
	// succ:  l00000000004A225C l00000000004A2294
l00000000004A225C:
	__ctype_get_mb_cur_max()
	sp = sp + 0xFFFFFFFFFFFFFFF8
	x31 = x0 - 0x0000000000000001
	NZCV = cond(x31)
	branch Test(ULE,ZC) l00000000004A2230
	// succ:  l00000000004A2268 l00000000004A2230
l00000000004A2268:
	w1 = Mem0[x22:word32]
	branch w1 != 0x00000000 l00000000004A2230
	// succ:  l00000000004A2270 l00000000004A2230
l00000000004A2270:
	w2 = 0x00000001
	w1 = Mem0[x19:word32]
	x0 = Mem0[x20 + 3256:word64]
	w3 = w2
	call _rl_find_next_mbchar (retsize: 0;)
	w1 = Mem0[x21:word32]
	Mem0[x19:word32] = w0
	NZCV = cond(w0 - w1)
	branch Test(LT,NV) l00000000004A2248
	// succ:  l00000000004A2294 l00000000004A2248
l00000000004A2294:
	w23 = w23 - 0x00000001
	NZCV = cond(w23)
	branch Test(EQ,Z) l00000000004A22AC
	// succ:  l00000000004A229C l00000000004A22AC
l00000000004A229C:
	w1 = Mem0[x19:word32]
	w0 = Mem0[x21:word32]
	NZCV = cond(w1 - w0)
	branch Test(NE,Z) l00000000004A21DC
	// succ:  l00000000004A22AC l00000000004A21DC
l00000000004A22AC:
	w0 = 0x00000000
	v25 = sp + 16
	x19 = Mem0[v25:word64]
	v25 = v25 + 8
	x20 = Mem0[v25:word64]
	v26 = sp + 32
	x21 = Mem0[v26:word64]
	v26 = v26 + 8
	x22 = Mem0[v26:word64]
	x23 = Mem0[sp + 48:word64]
	x29 = Mem0[sp:word64]
	sp = sp + 8
	x30 = Mem0[sp:word64]
	sp = sp + 64
	return
	// succ:  rl_forward_word_exit
l00000000004A22C4:
	__ctype_get_mb_cur_max()
	sp = sp + 0xFFFFFFFFFFFFFFF8
	x31 = x0 - 0x0000000000000001
	NZCV = cond(x31)
	branch Test(ULE,ZC) l00000000004A22D8
	// succ:  l00000000004A22D0 l00000000004A22D8
l00000000004A22D0:
	w0 = Mem0[x22:word32]
	branch w0 == 0x00000000 l00000000004A2378
	// succ:  l00000000004A22D8 l00000000004A2378
l00000000004A22D8:
	w1 = Mem0[x19:word32]
	w0 = w1 + 0x00000001
	// succ:  l00000000004A22E0
l00000000004A22E0:
	w2 = Mem0[x21:word32]
	Mem0[x19:word32] = w0
	NZCV = cond(w0 - w2)
	branch Test(LT,NV) l00000000004A230C
	// succ:  l00000000004A22F0 l00000000004A230C
l00000000004A22F0:
	goto l00000000004A21F4
	// succ:  l00000000004A21F4
l00000000004A22F4:
	w0 = Mem0[x19:word32]
	w1 = Mem0[x21:word32]
	w0 = w0 + 0x00000001
	Mem0[x19:word32] = w0
	NZCV = cond(w0 - w1)
	branch Test(GE,NZV) l00000000004A2358
	// succ:  l00000000004A230C l00000000004A2358
l00000000004A230C:
	w1 = w0
	x0 = Mem0[x20 + 3256:word64]
	call _rl_char_value (retsize: 0;)
	call _rl_walphabetic (retsize: 0;)
	branch w0 != 0x00000000 l00000000004A21EC
	// succ:  l00000000004A2320 l00000000004A21EC
l00000000004A2320:
	__ctype_get_mb_cur_max()
	sp = sp + 0xFFFFFFFFFFFFFFF8
	x31 = x0 - 0x0000000000000001
	NZCV = cond(x31)
	branch Test(ULE,ZC) l00000000004A22F4
	// succ:  l00000000004A232C l00000000004A22F4
l00000000004A232C:
	w1 = Mem0[x22:word32]
	branch w1 != 0x00000000 l00000000004A22F4
	// succ:  l00000000004A2334 l00000000004A22F4
l00000000004A2334:
	w2 = 0x00000001
	w1 = Mem0[x19:word32]
	x0 = Mem0[x20 + 3256:word64]
	w3 = w2
	call _rl_find_next_mbchar (retsize: 0;)
	w1 = Mem0[x21:word32]
	Mem0[x19:word32] = w0
	NZCV = cond(w0 - w1)
	branch Test(LT,NV) l00000000004A230C
	// succ:  l00000000004A2358 l00000000004A230C
l00000000004A2358:
	w2 = w1
	goto l00000000004A21F4
	// succ:  l00000000004A21F4
l00000000004A2360:
	w2 = 0x00000001
	x0 = Mem0[x20 + 3256:word64]
	w1 = Mem0[x19:word32]
	w3 = w2
	call _rl_find_next_mbchar (retsize: 0;)
	goto l00000000004A2218
	// succ:  l00000000004A2218
l00000000004A2378:
	w2 = 0x00000001
	x0 = Mem0[x20 + 3256:word64]
	w1 = Mem0[x19:word32]
	w3 = w2
	call _rl_find_next_mbchar (retsize: 0;)
	goto l00000000004A22E0
	// succ:  l00000000004A22E0
l00000000004A2390:
	v23 = sp + 16
	x19 = Mem0[v23:word64]
	v23 = v23 + 8
	x20 = Mem0[v23:word64]
	v24 = sp + 32
	x21 = Mem0[v24:word64]
	v24 = v24 + 8
	x22 = Mem0[v24:word64]
	x23 = Mem0[sp + 48:word64]
	x29 = Mem0[sp:word64]
	sp = sp + 8
	x30 = Mem0[sp:word64]
	sp = sp + 64
	w0 = w31 - w0
	// succ:  l00000000004A23A4_thunk_rl_backward_word
l00000000004A23A4_thunk_rl_backward_word:
	call rl_backward_word (retsize: 0;)
	return
	// succ:  rl_forward_word_exit
rl_forward_word_exit:


// fn00000000004A23A8
// Return size: 0
void fn00000000004A23A8()
fn00000000004A23A8_entry:
	// succ:  l00000000004A23A8
l00000000004A23A8:
	sp = v3
	sp = sp + -160
	Mem0[sp:word64] = x29
	sp = sp + 8
	Mem0[sp:word64] = x30
	x29 = x31 + 0x0000000000000000
	v7 = sp + 48
	Mem0[v7:word64] = x23
	v7 = v7 + 8
	Mem0[v7:word64] = x24
	x2 = 0x00000000004E4000
	w24 = w1
	w1 = 0x00000000
	v13 = sp + 16
	Mem0[v13:word64] = x19
	v13 = v13 + 8
	Mem0[v13:word64] = x20
	v16 = sp + 32
	Mem0[v16:word64] = x21
	v16 = v16 + 8
	Mem0[v16:word64] = x22
	v19 = sp + 64
	Mem0[v19:word64] = x25
	v19 = v19 + 8
	Mem0[v19:word64] = x26
	v22 = sp + 80
	Mem0[v22:word64] = x27
	v22 = v22 + 8
	Mem0[v22:word64] = x28
	w19 = w0
	w20 = Mem0[x2 + 136:word32]
	call rl_forward_word (retsize: 0;)
	w1 = w24 - 0x00000001
	x0 = 0x00000000004E4000
	w31 = w1 - 0x00000002
	NZCV = cond(w31)
	w23 = Mem0[x0 + 136:word32]
	branch Test(UGT,ZC) l00000000004A2654
	// succ:  l00000000004A23F0 l00000000004A2654
l00000000004A23F0:
	branch (w19 & 0x00000000) == 0x00000000 l00000000004A2608
	// succ:  l00000000004A23F4 l00000000004A2608
l00000000004A23F4:
	w0 = w20
	w1 = w23
	Mem0[x29 + 120:word64] = 0x0000000000000000
	call rl_modifying (retsize: 0;)
	x26 = 0x00000000004E2000
	NZCV = cond(w20 - w23)
	x26 = x26 + 0xFFFFFFFFFFFFFF80
	w28 = 0x00000000
	x22 = 0x00000000004E1000
	branch Test(GE,NZV) l00000000004A24D4
	// succ:  l00000000004A241C l00000000004A24D4
l00000000004A241C:
	x0 = Mem0[x22 + 3256:word64]
	w1 = w20
	call _rl_char_value (retsize: 0;)
	w19 = w0
	__ctype_get_mb_cur_max()
	sp = sp + 0xFFFFFFFFFFFFFFF8
	x31 = x0 - 0x0000000000000001
	NZCV = cond(x31)
	branch Test(ULE,ZC) l00000000004A2440
	// succ:  l00000000004A2438 l00000000004A2440
l00000000004A2438:
	w0 = Mem0[x26:word32]
	branch w0 == 0x00000000 l00000000004A24A4
	// succ:  l00000000004A2440 l00000000004A24A4
l00000000004A2440:
	w0 = w19
	w21 = w20 + 0x00000001
	call _rl_walphabetic (retsize: 0;)
	branch w0 == 0x00000000 l00000000004A24C8
	// succ:  l00000000004A2450 l00000000004A24C8
l00000000004A2450:
	w31 = w24 - 0x00000003
	NZCV = cond(w31)
	w27 = w24
	branch Test(EQ,Z) l00000000004A24FC
	// succ:  l00000000004A245C l00000000004A24FC
l00000000004A245C:
	__ctype_get_mb_cur_max()
	sp = sp + 0xFFFFFFFFFFFFFFF8
	x31 = x0 - 0x0000000000000001
	NZCV = cond(x31)
	w25 = w19
	branch Test(EQ,Z) l00000000004A247C
	// succ:  l00000000004A246C l00000000004A247C
l00000000004A246C:
	w4 = Mem0[x26:word32]
	branch w4 != 0x00000000 l00000000004A247C
	// succ:  l00000000004A2474 l00000000004A247C
l00000000004A2474:
	w31 = w19 & 0xFFFFFF80
	NZ = cond(w31)
	C = false
	V = false
	branch Test(NE,Z) l00000000004A2570
	// succ:  l00000000004A247C l00000000004A2570
l00000000004A247C:
	w31 = w27 - 0x00000001
	NZCV = cond(w31)
	branch Test(EQ,Z) l00000000004A250C
	// succ:  l00000000004A2484 l00000000004A250C
l00000000004A2484:
	NZCV = cond(w19 - (uint32) ((byte) w19))
	branch Test(EQ,Z) l00000000004A253C
	// succ:  l00000000004A248C l00000000004A253C
l00000000004A248C:
	x0 = Mem0[x22 + 3256:word64]
	Mem0[x0 + (int64) ((int32) w20):byte] = (byte) w25
	NZCV = cond(w23 - w21)
	branch Test(LE,ZCV) l00000000004A24D4
	// succ:  l00000000004A249C l00000000004A24D4
l00000000004A249C:
	w20 = w21
	goto l00000000004A241C
	// succ:  l00000000004A241C
l00000000004A24A4:
	w2 = 0x00000001
	x0 = Mem0[x22 + 3256:word64]
	w1 = w20
	w3 = w2
	call _rl_find_next_mbchar (retsize: 0;)
	w21 = w0
	w0 = w19
	call _rl_walphabetic (retsize: 0;)
	branch w0 != 0x00000000 l00000000004A2450
	// succ:  l00000000004A24C8 l00000000004A2450
l00000000004A24C8:
	NZCV = cond(w23 - w21)
	w28 = w0
	branch Test(GT,NZV) l00000000004A249C
	// succ:  l00000000004A24D4 l00000000004A249C
l00000000004A24D4:
	x2 = 0x00000000004E4000
	Mem0[x2 + 136:word32] = w23
	w0 = 0x00000000
	// succ:  l00000000004A24E0
l00000000004A24E0:
	v44 = sp + 16
	x19 = Mem0[v44:word64]
	v44 = v44 + 8
	x20 = Mem0[v44:word64]
	v45 = sp + 32
	x21 = Mem0[v45:word64]
	v45 = v45 + 8
	x22 = Mem0[v45:word64]
	v46 = sp + 48
	x23 = Mem0[v46:word64]
	v46 = v46 + 8
	x24 = Mem0[v46:word64]
	v47 = sp + 64
	x25 = Mem0[v47:word64]
	v47 = v47 + 8
	x26 = Mem0[v47:word64]
	v48 = sp + 80
	x27 = Mem0[v48:word64]
	v48 = v48 + 8
	x28 = Mem0[v48:word64]
	x29 = Mem0[sp:word64]
	sp = sp + 8
	x30 = Mem0[sp:word64]
	sp = sp + 160
	return
	// succ:  fn00000000004A23A8_exit
l00000000004A24FC:
	branch w28 == 0x00000000 l00000000004A2564
	// succ:  l00000000004A2500 l00000000004A2564
l00000000004A2500:
	w27 = 0x00000002
	w28 = 0x00000001
	goto l00000000004A245C
	// succ:  l00000000004A245C
l00000000004A250C:
	NZCV = cond(w19 - (uint32) ((byte) w19))
	branch Test(NE,Z) l00000000004A248C
	// succ:  l00000000004A2514 l00000000004A248C
l00000000004A2514:
	__ctype_b_loc()
	sp = sp + 0xFFFFFFFFFFFFFFF8
	x0 = Mem0[x0:word64]
	w25 = w19
	v50 = Mem0[x0 + (int64) ((int32) w19):word16]
	w0 = (word32) v50
	branch (w0 & 0x00000200) == 0x00000000 l00000000004A248C
	// succ:  l00000000004A2528 l00000000004A248C
l00000000004A2528:
	__ctype_toupper_loc()
	sp = sp + 0xFFFFFFFFFFFFFFF8
	x0 = Mem0[x0:word64]
l00000000004A253C:
	__ctype_b_loc()
	sp = sp + 0xFFFFFFFFFFFFFFF8
	x0 = Mem0[x0:word64]
	w25 = w19
	v49 = Mem0[x0 + (int64) ((int32) w19):word16]
	w0 = (word32) v49
	branch (w0 & 0x00000100) == 0x00000000 l00000000004A248C
	// succ:  l00000000004A2550 l00000000004A248C
l00000000004A2550:
	__ctype_tolower_loc()
	sp = sp + 0xFFFFFFFFFFFFFFF8
	x0 = Mem0[x0:word64]
l00000000004A2564:
	w28 = 0x00000001
	w27 = w28
	goto l00000000004A245C
	// succ:  l00000000004A245C
l00000000004A2570:
	x1 = Mem0[x22 + 3256:word64]
l00000000004A2608:
	w0 = w20
	w20 = w23
	w23 = w0
	goto l00000000004A23F4
	// succ:  l00000000004A23F4
l00000000004A2654:
	call rl_ding (retsize: 0;)
	w0 = 0xFFFFFFFF
	goto l00000000004A24E0
	// succ:  l00000000004A24E0
fn00000000004A23A8_exit:


// rl_refresh_line
// Return size: 0
void rl_refresh_line()
rl_refresh_line_entry:
	// succ:  l00000000004A2660
l00000000004A2660:
	sp = fp
	sp = sp + -16
	Mem0[sp:word64] = x29
	sp = sp + 8
	Mem0[sp:word64] = x30
	x29 = x31 + 0x0000000000000000
	call _rl_current_display_line (retsize: 0;)
	call _rl_move_vert (retsize: 0;)
	x0 = 0x00000000004E1000
	x1 = Mem0[x0 + 3256:word64]
	w0 = 0x00000000
	call _rl_move_cursor_relative (retsize: 0;)
	w0 = 0x00000000
	call _rl_clear_to_eol (retsize: 0;)
	call rl_forced_update_display (retsize: 0;)
	w1 = 0x00000001
	x0 = 0x00000000004E2000
	Mem0[x0 + 540:word32] = w1
	x29 = Mem0[sp:word64]
	sp = sp + 8
	x30 = Mem0[sp:word64]
	sp = sp + 16
	w0 = 0x00000000
	return
	// succ:  rl_refresh_line_exit
rl_refresh_line_exit:


// rl_clear_screen
// Return size: 0
void rl_clear_screen()
rl_clear_screen_entry:
	// succ:  l00000000004A26A4
l00000000004A26A4:
	sp = fp
	sp = sp + -16
	Mem0[sp:word64] = x29
	sp = sp + 8
	Mem0[sp:word64] = x30
	x29 = x31 + 0x0000000000000000
	x2 = 0x00000000004E1000
	w2 = Mem0[x2 + 3332:word32]
	branch w2 != 0x00000000 l00000000004A26D8
	// succ:  l00000000004A26B8 l00000000004A26D8
l00000000004A26B8:
	call _rl_clear_screen (retsize: 0;)
	call rl_forced_update_display (retsize: 0;)
	w1 = 0x00000001
	x0 = 0x00000000004E2000
	Mem0[x0 + 540:word32] = w1
	x29 = Mem0[sp:word64]
	sp = sp + 8
	x30 = Mem0[sp:word64]
	sp = sp + 16
	w0 = 0x00000000
	return
	// succ:  rl_clear_screen_exit
l00000000004A26D8:
	call rl_refresh_line (retsize: 0;)
	w0 = 0x00000000
	x29 = Mem0[sp:word64]
	sp = sp + 8
	x30 = Mem0[sp:word64]
	sp = sp + 16
	return
	// succ:  rl_clear_screen_exit
rl_clear_screen_exit:


// rl_skip_csi_sequence
// Return size: 0
void rl_skip_csi_sequence()
rl_skip_csi_sequence_entry:
	// succ:  l00000000004A26E8
l00000000004A26E8:
	sp = fp
	sp = sp + -32
	Mem0[sp:word64] = x29
	sp = sp + 8
	Mem0[sp:word64] = x30
	x29 = x31 + 0x0000000000000000
	Mem0[sp + 16:word64] = x19
	x19 = 0x00000000004E1000
	w0 = Mem0[x19 + 3168:word32]
	w0 = w0 | 0x00000040
	Mem0[x19 + 3168:word32] = w0
	// succ:  l00000000004A2704
l00000000004A2704:
	call rl_read_key (retsize: 0;)
	w0 = w0 - 0x00000020
	w31 = w0 - 0x0000001F
	NZCV = cond(w31)
	branch Test(ULE,ZC) l00000000004A2704
	// succ:  l00000000004A2714 l00000000004A2704
l00000000004A2714:
	w1 = Mem0[x19 + 3168:word32]
	w0 = 0x00000000
	w1 = w1 & 0xFFFFFFBF
	Mem0[x19 + 3168:word32] = w1
	x19 = Mem0[sp + 16:word64]
	x29 = Mem0[sp:word64]
	sp = sp + 8
	x30 = Mem0[sp:word64]
	sp = sp + 32
	return
	// succ:  rl_skip_csi_sequence_exit
rl_skip_csi_sequence_exit:


// rl_arrow_keys
// Return size: 0
void rl_arrow_keys()
rl_arrow_keys_entry:
	// succ:  l00000000004A2730
l00000000004A2730:
	sp = fp
	sp = sp + -48
	Mem0[sp:word64] = x29
	sp = sp + 8
	Mem0[sp:word64] = x30
	x29 = x31 + 0x0000000000000000
	v8 = sp + 16
	Mem0[v8:word64] = x19
	v8 = v8 + 8
	Mem0[v8:word64] = x20
	x20 = 0x00000000004E1000
	w1 = Mem0[x20 + 3168:word32]
	Mem0[sp + 32:word64] = x21
	w1 = w1 | 0x00000040
	Mem0[x20 + 3168:word32] = w1
	w21 = w0
	call rl_read_key (retsize: 0;)
	w1 = Mem0[x20 + 3168:word32]
	NZCV = cond(w0 - (uint32) ((byte) w0))
	w1 = w1 & 0xFFFFFFBF
	Mem0[x20 + 3168:word32] = w1
	w19 = w0
	w1 = w0
	branch Test(EQ,Z) l00000000004A2860
	// succ:  l00000000004A2774 l00000000004A2860
l00000000004A2774:
	w1 = w1 - 0x00000041
	w31 = w1 - 0x00000003
	NZCV = cond(w31)
	branch Test(ULE,ZC) l00000000004A2798
	// succ:  l00000000004A2780 l00000000004A2798
l00000000004A2780:
	call rl_ding (retsize: 0;)
	w0 = 0x00000000
	v18 = sp + 16
	x19 = Mem0[v18:word64]
	v18 = v18 + 8
	x20 = Mem0[v18:word64]
	x21 = Mem0[sp + 32:word64]
	x29 = Mem0[sp:word64]
	sp = sp + 8
	x30 = Mem0[sp:word64]
	sp = sp + 48
	return
	// succ:  rl_arrow_keys_exit
l00000000004A2798:
	x0 = 0x00000000004C5000
	x0 = x0 + 0x0000000000000034
	v21 = Mem0[x0 + (uint64) ((uint32) w1):byte]
	w3 = (word32) v21
	x2 = 0x00000000004A27B0
	x3 = x2 + (int64) ((int8) w3)
l00000000004A2860:
	__ctype_b_loc()
	sp = sp + 0xFFFFFFFFFFFFFFF8
	x0 = Mem0[x0:word64]
rl_arrow_keys_exit:


// _rl_insert_char
// Return size: 0
void _rl_insert_char()
_rl_insert_char_entry:
	// succ:  l00000000004A28A8
l00000000004A28A8:
	sp = fp
	NZCV = cond(w0 - w31)
	branch Test(LE,ZCV) l00000000004A28B4
	// succ:  l00000000004A28B0 l00000000004A28B4
l00000000004A28B0:
	// succ:  l00000000004A28B0_thunk_fn00000000004A16AC
l00000000004A28B0_thunk_fn00000000004A16AC:
	call fn00000000004A16AC (retsize: 0;)
	return
	// succ:  _rl_insert_char_exit
l00000000004A28B4:
	w0 = 0x00000000
	return
	// succ:  _rl_insert_char_exit
_rl_insert_char_exit:


// rl_quoted_insert
// Return size: 0
void rl_quoted_insert()
rl_quoted_insert_entry:
	goto l00000000004A28BC
	// succ:  l00000000004A28BC
l00000000004A19BC:
	sp = sp + -48
	Mem0[sp:word64] = x29
	sp = sp + 8
	Mem0[sp:word64] = x30
	x29 = x31 + 0x0000000000000000
	v16 = sp + 16
	Mem0[v16:word64] = x19
	v16 = v16 + 8
	Mem0[v16:word64] = x20
	x19 = 0x00000000004E1000
	w1 = Mem0[x19 + 3168:word32]
	w20 = w0
	w1 = w1 | 0x00000040
	Mem0[x19 + 3168:word32] = w1
	call rl_read_key (retsize: 0;)
	w2 = Mem0[x19 + 3168:word32]
	w1 = w0
	w0 = w2 & 0xFFFFFFBF
	Mem0[x19 + 3168:word32] = w0
	branch (w1 & 0x00000000) == 0x00000000 l00000000004A1A30
	// succ:  l00000000004A19F4 l00000000004A1A30
l00000000004A19F4:
	branch (w2 & 0x00000000) == 0x00000000 l00000000004A1A20
	// succ:  l00000000004A19F8 l00000000004A1A20
l00000000004A19F8:
	NZCV = cond(w20 - w31)
	branch Test(LE,ZCV) l00000000004A1A10
	// succ:  l00000000004A1A00 l00000000004A1A10
l00000000004A1A00:
	w0 = w20
	v22 = sp + 16
	x19 = Mem0[v22:word64]
	v22 = v22 + 8
	x20 = Mem0[v22:word64]
	x29 = Mem0[sp:word64]
	sp = sp + 8
	x30 = Mem0[sp:word64]
	sp = sp + 48
	// succ:  l00000000004A1A0C_thunk_fn00000000004A16AC
l00000000004A1A0C_thunk_fn00000000004A16AC:
	call fn00000000004A16AC (retsize: 0;)
	return
	// succ:  rl_quoted_insert_exit
l00000000004A1A10:
	w0 = 0x00000000
	// succ:  l00000000004A1A14
l00000000004A1A14:
	v23 = sp + 16
	x19 = Mem0[v23:word64]
	v23 = v23 + 8
	x20 = Mem0[v23:word64]
	x29 = Mem0[sp:word64]
	sp = sp + 8
	x30 = Mem0[sp:word64]
	sp = sp + 48
	return
	// succ:  rl_quoted_insert_exit
l00000000004A1A20:
	Mem0[x29 + 32:word64] = x1
	call _rl_restore_tty_signals (retsize: 0;)
	x1 = Mem0[x29 + 32:word64]
	goto l00000000004A19F8
	// succ:  l00000000004A19F8
l00000000004A1A30:
	w0 = 0xFFFFFFFF
	goto l00000000004A1A14
	// succ:  l00000000004A1A14
l00000000004A28BC:
	sp = fp
	sp = sp + -32
	Mem0[sp:word64] = x29
	sp = sp + 8
	Mem0[sp:word64] = x30
	x29 = x31 + 0x0000000000000000
	v8 = sp + 16
	Mem0[v8:word64] = x19
	v8 = v8 + 8
	Mem0[v8:word64] = x20
	x20 = 0x00000000004E1000
	w1 = Mem0[x20 + 3168:word32]
	w19 = w0
	branch (w1 & 0x00000000) == 0x00000000 l00000000004A2908
	// succ:  l00000000004A28D8 l00000000004A2908
l00000000004A28D8:
	w0 = w19
	call _rl_callback_data_alloc (retsize: 0;)
	x1 = 0x00000000004E2000
	Mem0[x1 + 3640:word64] = x0
	x1 = 0x00000000004A1000
	x1 = x1 + 0xFFFFFFFFFFFFFA38
	x0 = 0x00000000004E2000
	Mem0[x0 + 3632:word64] = x1
	v14 = sp + 16
	x19 = Mem0[v14:word64]
	v14 = v14 + 8
	x20 = Mem0[v14:word64]
	w0 = 0x00000000
	x29 = Mem0[sp:word64]
	sp = sp + 8
	x30 = Mem0[sp:word64]
	sp = sp + 32
	return
	// succ:  rl_quoted_insert_exit
l00000000004A2908:
	call _rl_disable_tty_signals (retsize: 0;)
	w0 = Mem0[x20 + 3168:word32]
	branch (w0 & 0x00000000) == 0x00000000 l00000000004A28D8
	// succ:  l00000000004A2914 l00000000004A28D8
l00000000004A2914:
	w0 = w19
	v15 = sp + 16
	x19 = Mem0[v15:word64]
	v15 = v15 + 8
	x20 = Mem0[v15:word64]
	x29 = Mem0[sp:word64]
	sp = sp + 8
	x30 = Mem0[sp:word64]
	sp = sp + 32
	goto l00000000004A19BC
	// succ:  l00000000004A19BC
rl_quoted_insert_exit:


// rl_tab_insert
// Return size: 0
void rl_tab_insert()
rl_tab_insert_entry:
	// succ:  l00000000004A2924
l00000000004A2924:
	sp = fp
	NZCV = cond(w0 - w31)
	branch Test(LE,ZCV) l00000000004A2934
	// succ:  l00000000004A292C l00000000004A2934
l00000000004A292C:
	w1 = 0x00000009
	// succ:  l00000000004A2930_thunk_fn00000000004A16AC
l00000000004A2930_thunk_fn00000000004A16AC:
	call fn00000000004A16AC (retsize: 0;)
	return
	// succ:  rl_tab_insert_exit
l00000000004A2934:
	w0 = 0x00000000
	return
	// succ:  rl_tab_insert_exit
rl_tab_insert_exit:


// rl_newline
// Return size: 0
void rl_newline()
rl_newline_entry:
	// succ:  l00000000004A293C
l00000000004A293C:
	sp = fp
	sp = sp + -16
	Mem0[sp:word64] = x29
	sp = sp + 8
	Mem0[sp:word64] = x30
	x29 = x31 + 0x0000000000000000
	x0 = 0x00000000004E2000
	w2 = 0x00000001
	x1 = 0x00000000004E4000
	w0 = Mem0[x0 + 3856:word32]
	Mem0[x1 + 124:word32] = w2
	branch w0 == 0x00000000 l00000000004A297C
	// succ:  l00000000004A295C l00000000004A297C
l00000000004A295C:
	x0 = 0x00000000004E4000
	x1 = 0x00000000004E3000
	w0 = Mem0[x0 + 136:word32]
	w1 = Mem0[x1 + 3900:word32]
	NZCV = cond(w0 - w1)
l00000000004A297C:
	x0 = 0x00000000004E1000
	w1 = Mem0[x0 + 3168:word32]
	x2 = 0x00000000004D9000
	w1 = w1 | 0x01000000
	w2 = Mem0[x2 + 1208:word32]
	Mem0[x0 + 3168:word32] = w1
	branch w2 == 0x00000000 l00000000004A29DC
	// succ:  l00000000004A2998 l00000000004A29DC
l00000000004A2998:
	x0 = 0x00000000004E1000
	w0 = Mem0[x0 + 3244:word32]
	branch w0 == 0x00000000 l00000000004A29B0
	// succ:  l00000000004A29A4 l00000000004A29B0
l00000000004A29A4:
	x0 = 0x00000000004E4000
	w0 = Mem0[x0 + 136:word32]
	branch w0 == 0x00000000 l00000000004A29CC
	// succ:  l00000000004A29B0 l00000000004A29CC
l00000000004A29B0:
	x0 = 0x00000000004E1000
	w0 = Mem0[x0 + 3216:word32]
	branch w0 == 0x00000000 l00000000004A29C0
	// succ:  l00000000004A29BC l00000000004A29C0
l00000000004A29BC:
	call _rl_update_final (retsize: 0;)
	// succ:  l00000000004A29C0
l00000000004A29C0:
	w0 = 0x00000000
	x29 = Mem0[sp:word64]
	sp = sp + 8
	x30 = Mem0[sp:word64]
	sp = sp + 16
	return
	// succ:  rl_newline_exit
l00000000004A29CC:
	x0 = 0x00000000004E3000
	w0 = Mem0[x0 + 3900:word32]
	branch w0 != 0x00000000 l00000000004A29B0
	// succ:  l00000000004A29D8 l00000000004A29B0
l00000000004A29D8:
	goto l00000000004A29C0
	// succ:  l00000000004A29C0
l00000000004A29DC:
	call _rl_vi_done_inserting (retsize: 0;)
	x0 = 0x00000000004D9000
	w0 = Mem0[x0 + 1264:word32]
	call _rl_vi_textmod_command (retsize: 0;)
	branch w0 != 0x00000000 l00000000004A2998
	// succ:  l00000000004A29F0 l00000000004A2998
l00000000004A29F0:
	call _rl_vi_reset_last (retsize: 0;)
	goto l00000000004A2998
	// succ:  l00000000004A2998
rl_newline_exit:


// rl_do_lowercase_version
// Return size: 0
void rl_do_lowercase_version()
rl_do_lowercase_version_entry:
	// succ:  l00000000004A29F8
l00000000004A29F8:
	sp = fp
	w0 = 0x00000000
	return
	// succ:  rl_do_lowercase_version_exit
rl_do_lowercase_version_exit:


// _rl_overwrite_rubout
// Return size: 0
void _rl_overwrite_rubout()
_rl_overwrite_rubout_entry:
	// succ:  l00000000004A2A00
l00000000004A2A00:
	sp = fp
	sp = sp + -80
	Mem0[sp:word64] = x29
	sp = sp + 8
	Mem0[sp:word64] = x30
	x29 = x31 + 0x0000000000000000
	v6 = sp + 64
	Mem0[v6:word64] = x25
	v6 = v6 + 8
	Mem0[v6:word64] = x26
	x25 = 0x00000000004E4000
	w26 = Mem0[x25 + 136:word32]
	v10 = sp + 32
	Mem0[v10:word64] = x21
	v10 = v10 + 8
	Mem0[v10:word64] = x22
	v13 = sp + 16
	Mem0[v13:word64] = x19
	v13 = v13 + 8
	Mem0[v13:word64] = x20
	v16 = sp + 48
	Mem0[v16:word64] = x23
	v16 = v16 + 8
	Mem0[v16:word64] = x24
	w21 = w0
	w22 = w1
	branch w26 == 0x00000000 l00000000004A2AFC
	// succ:  l00000000004A2A2C l00000000004A2AFC
l00000000004A2A2C:
	NZCV = cond(w0 - w31)
	branch Test(LE,ZCV) l00000000004A2AD8
	// succ:  l00000000004A2A34 l00000000004A2AD8
l00000000004A2A34:
	w20 = 0x00000000
	w19 = w20
	x24 = 0x00000000004E1000
	x23 = x25 + 0x0000000000000088
	// succ:  l00000000004A2A44
l00000000004A2A44:
	w1 = w22
	w0 = 0x00000001
	call rl_backward_char (retsize: 0;)
	w2 = Mem0[x23:word32]
	x3 = Mem0[x24 + 3256:word64]
	w1 = w2
	v30 = Mem0[x3 + (int64) ((int32) w2):byte]
	w0 = (word32) v30
	w19 = w19 + 0x00000001
	call rl_character_len (retsize: 0;)
	NZCV = cond(w19 - w21)
	w20 = w20 + w0
	branch Test(NE,Z) l00000000004A2A44
	// succ:  l00000000004A2A74 l00000000004A2A44
l00000000004A2A74:
	call rl_begin_undo_group (retsize: 0;)
	w31 = w19 - 0x00000001
	NZCV = cond(w31)
	branch Test(LE,ZCV) l00000000004A2AE0
	// succ:  l00000000004A2A80 l00000000004A2AE0
l00000000004A2A80:
	w1 = Mem0[x25 + 136:word32]
	w0 = w26
	call rl_kill_text (retsize: 0;)
	// succ:  l00000000004A2A8C
l00000000004A2A8C:
	x0 = 0x00000000004E3000
	w19 = Mem0[x25 + 136:word32]
	w0 = Mem0[x0 + 3900:word32]
	NZCV = cond(w19 - w0)
	branch Test(GE,NZV) l00000000004A2AB8
	// succ:  l00000000004A2AA0 l00000000004A2AB8
l00000000004A2AA0:
	NZCV = cond(w20 - w31)
	branch Test(LE,ZCV) l00000000004A2AB4
	// succ:  l00000000004A2AA8 l00000000004A2AB4
l00000000004A2AA8:
	w0 = w20
	w1 = 0x00000020
	call fn00000000004A16AC (retsize: 0;)
	// succ:  l00000000004A2AB4
l00000000004A2AB4:
	Mem0[x25 + 136:word32] = w19
	// succ:  l00000000004A2AB8
l00000000004A2AB8:
	call rl_end_undo_group (retsize: 0;)
	w0 = 0x00000000
	v34 = sp + 16
	x19 = Mem0[v34:word64]
	v34 = v34 + 8
	x20 = Mem0[v34:word64]
	v35 = sp + 32
	x21 = Mem0[v35:word64]
	v35 = v35 + 8
	x22 = Mem0[v35:word64]
	v36 = sp + 48
	x23 = Mem0[v36:word64]
	v36 = v36 + 8
	x24 = Mem0[v36:word64]
	v37 = sp + 64
	x25 = Mem0[v37:word64]
	v37 = v37 + 8
	x26 = Mem0[v37:word64]
	x29 = Mem0[sp:word64]
	sp = sp + 8
	x30 = Mem0[sp:word64]
	sp = sp + 80
	return
	// succ:  _rl_overwrite_rubout_exit
l00000000004A2AD8:
	call rl_begin_undo_group (retsize: 0;)
	w20 = 0x00000000
	// succ:  l00000000004A2AE0
l00000000004A2AE0:
	x0 = 0x00000000004E1000
	w0 = Mem0[x0 + 3332:word32]
	branch w0 != 0x00000000 l00000000004A2A80
	// succ:  l00000000004A2AEC l00000000004A2A80
l00000000004A2AEC:
	w1 = Mem0[x25 + 136:word32]
	w0 = w26
	call rl_delete_text (retsize: 0;)
	goto l00000000004A2A8C
	// succ:  l00000000004A2A8C
l00000000004A2AFC:
	call rl_ding (retsize: 0;)
	w0 = 0x00000001
	v38 = sp + 16
	x19 = Mem0[v38:word64]
	v38 = v38 + 8
	x20 = Mem0[v38:word64]
	v39 = sp + 32
	x21 = Mem0[v39:word64]
	v39 = v39 + 8
	x22 = Mem0[v39:word64]
	v40 = sp + 48
	x23 = Mem0[v40:word64]
	v40 = v40 + 8
	x24 = Mem0[v40:word64]
	v41 = sp + 64
	x25 = Mem0[v41:word64]
	v41 = v41 + 8
	x26 = Mem0[v41:word64]
	x29 = Mem0[sp:word64]
	sp = sp + 8
	x30 = Mem0[sp:word64]
	sp = sp + 80
	return
	// succ:  _rl_overwrite_rubout_exit
_rl_overwrite_rubout_exit:


// rl_delete
// Return size: 0
void rl_delete()
rl_delete_entry:
	// succ:  l00000000004A2B1C
l00000000004A2B1C:
	sp = fp
	sp = sp + -48
	Mem0[sp:word64] = x29
	sp = sp + 8
	Mem0[sp:word64] = x30
	x29 = x31 + 0x0000000000000000
	v6 = sp + 16
	Mem0[v6:word64] = x19
	v6 = v6 + 8
	Mem0[v6:word64] = x20
	v9 = sp + 32
	Mem0[v9:word64] = x21
	v9 = v9 + 8
	Mem0[v9:word64] = x22
	w19 = w0
	w22 = w1
	branch (w19 & 0x00000000) == 0x00000000 l00000000004A2BF8
	// succ:  l00000000004A2B38 l00000000004A2BF8
l00000000004A2B38:
	x20 = 0x00000000004E4000
	x0 = 0x00000000004E3000
	w21 = Mem0[x20 + 136:word32]
	w0 = Mem0[x0 + 3900:word32]
	NZCV = cond(w21 - w0)
	branch Test(EQ,Z) l00000000004A2C30
	// succ:  l00000000004A2B50 l00000000004A2C30
l00000000004A2B50:
	w31 = w19 - 0x00000001
	NZCV = cond(w31)
	branch Test(LE,ZCV) l00000000004A2BA0
	// succ:  l00000000004A2B58 l00000000004A2BA0
l00000000004A2B58:
	__ctype_get_mb_cur_max()
	sp = sp + 0xFFFFFFFFFFFFFFF8
	x31 = x0 - 0x0000000000000001
	NZCV = cond(x31)
	branch Test(ULE,ZC) l00000000004A2B70
	// succ:  l00000000004A2B64 l00000000004A2B70
l00000000004A2B64:
	x0 = 0x00000000004E2000
	w0 = Mem0[x0 + 3968:word32]
	branch w0 == 0x00000000 l00000000004A2BE8
	// succ:  l00000000004A2B70 l00000000004A2BE8
l00000000004A2B70:
	w0 = w19
	w1 = w22
	call rl_forward_byte (retsize: 0;)
	// succ:  l00000000004A2B7C
l00000000004A2B7C:
	w1 = Mem0[x20 + 136:word32]
	w0 = w21
	call rl_kill_text (retsize: 0;)
	w0 = 0x00000000
	Mem0[x20 + 136:word32] = w21
	// succ:  l00000000004A2B90
l00000000004A2B90:
	v23 = sp + 16
	x19 = Mem0[v23:word64]
	v23 = v23 + 8
	x20 = Mem0[v23:word64]
	v24 = sp + 32
	x21 = Mem0[v24:word64]
	v24 = v24 + 8
	x22 = Mem0[v24:word64]
	x29 = Mem0[sp:word64]
	sp = sp + 8
	x30 = Mem0[sp:word64]
	sp = sp + 48
	return
	// succ:  rl_delete_exit
l00000000004A2BA0:
	x0 = 0x00000000004E1000
	w0 = Mem0[x0 + 3332:word32]
	branch w0 != 0x00000000 l00000000004A2B58
	// succ:  l00000000004A2BAC l00000000004A2B58
l00000000004A2BAC:
	__ctype_get_mb_cur_max()
	sp = sp + 0xFFFFFFFFFFFFFFF8
	x31 = x0 - 0x0000000000000001
	NZCV = cond(x31)
	branch Test(ULE,ZC) l00000000004A2BC4
	// succ:  l00000000004A2BB8 l00000000004A2BC4
l00000000004A2BB8:
	x0 = 0x00000000004E2000
	w0 = Mem0[x0 + 3968:word32]
	branch w0 == 0x00000000 l00000000004A2C0C
	// succ:  l00000000004A2BC4 l00000000004A2C0C
l00000000004A2BC4:
	w2 = Mem0[x20 + 136:word32]
	w1 = w2 + 0x00000001
	w0 = w2
	// succ:  l00000000004A2BD0
l00000000004A2BD0:
	call rl_delete_text (retsize: 0;)
	w0 = 0x00000000
	v26 = sp + 16
	x19 = Mem0[v26:word64]
	v26 = v26 + 8
	x20 = Mem0[v26:word64]
	v27 = sp + 32
	x21 = Mem0[v27:word64]
	v27 = v27 + 8
	x22 = Mem0[v27:word64]
	x29 = Mem0[sp:word64]
	sp = sp + 8
	x30 = Mem0[sp:word64]
	sp = sp + 48
	return
	// succ:  rl_delete_exit
l00000000004A2BE8:
	w0 = w19
	w1 = w22
	call rl_forward_char (retsize: 0;)
	goto l00000000004A2B7C
	// succ:  l00000000004A2B7C
l00000000004A2BF8:
	w0 = w31 - w19
	v29 = sp + 32
	x21 = Mem0[v29:word64]
	v29 = v29 + 8
	x22 = Mem0[v29:word64]
	v30 = sp + 16
	x19 = Mem0[v30:word64]
	v30 = v30 + 8
	x20 = Mem0[v30:word64]
	x29 = Mem0[sp:word64]
	sp = sp + 8
	x30 = Mem0[sp:word64]
	sp = sp + 48
	// succ:  l00000000004A2C08_thunk__rl_rubout_char
l00000000004A2C08_thunk__rl_rubout_char:
	call _rl_rubout_char (retsize: 0;)
	return
	// succ:  rl_delete_exit
l00000000004A2C0C:
	x0 = 0x00000000004E1000
	w2 = 0x00000001
	w1 = Mem0[x20 + 136:word32]
	x0 = Mem0[x0 + 3256:word64]
	w3 = w2
	call _rl_find_next_mbchar (retsize: 0;)
	w1 = w0
	w0 = Mem0[x20 + 136:word32]
	goto l00000000004A2BD0
	// succ:  l00000000004A2BD0
l00000000004A2C30:
	call rl_ding (retsize: 0;)
	w0 = 0xFFFFFFFF
	goto l00000000004A2B90
	// succ:  l00000000004A2B90
rl_delete_exit:


// _rl_overwrite_char
// Return size: 0
void _rl_overwrite_char()
_rl_overwrite_char_entry:
	// succ:  l00000000004A2C3C
l00000000004A2C3C:
	sp = fp
	sp = sp + -80
	Mem0[sp:word64] = x29
	sp = sp + 8
	Mem0[sp:word64] = x30
	x29 = x31 + 0x0000000000000000
	v6 = sp + 16
	Mem0[v6:word64] = x19
	v6 = v6 + 8
	Mem0[v6:word64] = x20
	v9 = sp + 32
	Mem0[v9:word64] = x21
	v9 = v9 + 8
	Mem0[v9:word64] = x22
	v12 = sp + 48
	Mem0[v12:word64] = x23
	v12 = v12 + 8
	Mem0[v12:word64] = x24
	NZCV = cond(w0 - w31)
	w21 = w0
	w20 = w1
	branch Test(LE,ZCV) l00000000004A2D1C
	// succ:  l00000000004A2C60 l00000000004A2D1C
l00000000004A2C60:
	__ctype_get_mb_cur_max()
	sp = sp + 0xFFFFFFFFFFFFFFF8
	x31 = x0 - 0x0000000000000001
	NZCV = cond(x31)
	branch Test(ULE,ZC) l00000000004A2C78
	// succ:  l00000000004A2C6C l00000000004A2C78
l00000000004A2C6C:
	x0 = 0x00000000004E2000
	w0 = Mem0[x0 + 3968:word32]
	branch w0 == 0x00000000 l00000000004A2D3C
	// succ:  l00000000004A2C78 l00000000004A2D3C
l00000000004A2C78:
	x24 = 0x00000000004E2000
	x23 = 0x00000000004E4000
	x22 = 0x00000000004E3000
	call rl_begin_undo_group (retsize: 0;)
	w19 = 0x00000000
	x24 = x24 + 0xFFFFFFFFFFFFFF80
	x23 = x23 + 0x0000000000000088
	x22 = x22 + 0xFFFFFFFFFFFFFF3C
	// succ:  l00000000004A2C98
l00000000004A2C98:
	__ctype_get_mb_cur_max()
	sp = sp + 0xFFFFFFFFFFFFFFF8
	x31 = x0 - 0x0000000000000001
	NZCV = cond(x31)
	w1 = w20
	w0 = 0x00000001
	branch Test(ULE,ZC) l00000000004A2CB4
	// succ:  l00000000004A2CAC l00000000004A2CB4
l00000000004A2CAC:
	w2 = Mem0[x24:word32]
	branch w2 == 0x00000000 l00000000004A2CF0
	// succ:  l00000000004A2CB4 l00000000004A2CF0
l00000000004A2CB4:
	call fn00000000004A16AC (retsize: 0;)
	w3 = Mem0[x23:word32]
	w2 = Mem0[x22:word32]
	w19 = w19 + 0x00000001
	NZCV = cond(w3 - w2)
	branch Test(LT,NV) l00000000004A2D0C
	// succ:  l00000000004A2CCC l00000000004A2D0C
l00000000004A2CCC:
	NZCV = cond(w19 - w21)
	branch Test(NE,Z) l00000000004A2C98
	// succ:  l00000000004A2CD4 l00000000004A2C98
l00000000004A2CD4:
	call rl_end_undo_group (retsize: 0;)
	w0 = 0x00000000
	v29 = sp + 16
	x19 = Mem0[v29:word64]
	v29 = v29 + 8
	x20 = Mem0[v29:word64]
	v30 = sp + 32
	x21 = Mem0[v30:word64]
	v30 = v30 + 8
	x22 = Mem0[v30:word64]
	v31 = sp + 48
	x23 = Mem0[v31:word64]
	v31 = v31 + 8
	x24 = Mem0[v31:word64]
	x29 = Mem0[sp:word64]
	sp = sp + 8
	x30 = Mem0[sp:word64]
	sp = sp + 80
	return
	// succ:  _rl_overwrite_char_exit
l00000000004A2CF0:
	x0 = x29 + 0x0000000000000040
	call rl_insert_text (retsize: 0;)
	w3 = Mem0[x23:word32]
	w2 = Mem0[x22:word32]
	w19 = w19 + 0x00000001
	NZCV = cond(w3 - w2)
	branch Test(GE,NZV) l00000000004A2CCC
	// succ:  l00000000004A2D0C l00000000004A2CCC
l00000000004A2D0C:
	w1 = w20
	w0 = 0x00000001
	call rl_delete (retsize: 0;)
	goto l00000000004A2CCC
	// succ:  l00000000004A2CCC
l00000000004A2D1C:
	call rl_begin_undo_group (retsize: 0;)
	call rl_end_undo_group (retsize: 0;)
	w0 = 0x00000000
	v34 = sp + 16
	x19 = Mem0[v34:word64]
	v34 = v34 + 8
	x20 = Mem0[v34:word64]
	v35 = sp + 32
	x21 = Mem0[v35:word64]
	v35 = v35 + 8
	x22 = Mem0[v35:word64]
	v36 = sp + 48
	x23 = Mem0[v36:word64]
	v36 = v36 + 8
	x24 = Mem0[v36:word64]
	x29 = Mem0[sp:word64]
	sp = sp + 8
	x30 = Mem0[sp:word64]
	sp = sp + 80
	return
	// succ:  _rl_overwrite_char_exit
l00000000004A2D3C:
	w0 = w20
	x1 = x29 + 0x0000000000000040
	w2 = 0x00000010
	call _rl_read_mbstring (retsize: 0;)
	goto l00000000004A2C78
	// succ:  l00000000004A2C78
_rl_overwrite_char_exit:


// rl_insert
// Return size: 0
void rl_insert()
rl_insert_entry:
	// succ:  l00000000004A2D50
l00000000004A2D50:
	sp = fp
	x2 = 0x00000000004D9000
	w2 = Mem0[x2 + 1232:word32]
	w31 = w2 - 0x00000001
	NZCV = cond(w31)
	branch Test(EQ,Z) l00000000004A2D64
	// succ:  l00000000004A2D60 l00000000004A2D64
l00000000004A2D60:
	// succ:  l00000000004A2D60_thunk__rl_overwrite_char
l00000000004A2D60_thunk__rl_overwrite_char:
	call _rl_overwrite_char (retsize: 0;)
	return
	// succ:  rl_insert_exit
l00000000004A2D64:
	NZCV = cond(w0 - w31)
	branch Test(LE,ZCV) l00000000004A2D70
	// succ:  l00000000004A2D6C l00000000004A2D70
l00000000004A2D6C:
	// succ:  l00000000004A2D6C_thunk_fn00000000004A16AC
l00000000004A2D6C_thunk_fn00000000004A16AC:
	call fn00000000004A16AC (retsize: 0;)
	return
	// succ:  rl_insert_exit
l00000000004A2D70:
	w0 = 0x00000000
	return
	// succ:  rl_insert_exit
rl_insert_exit:


// _rl_rubout_char
// Return size: 0
void _rl_rubout_char()
_rl_rubout_char_entry:
	// succ:  l00000000004A2D78
l00000000004A2D78:
	sp = fp
	sp = sp + -48
	Mem0[sp:word64] = x29
	sp = sp + 8
	Mem0[sp:word64] = x30
	x29 = x31 + 0x0000000000000000
	v6 = sp + 16
	Mem0[v6:word64] = x19
	v6 = v6 + 8
	Mem0[v6:word64] = x20
	Mem0[sp + 32:word64] = x21
	w2 = w1
	branch (w0 & 0x00000000) == 0x00000000 l00000000004A2E64
	// succ:  l00000000004A2D90 l00000000004A2E64
l00000000004A2D90:
	x19 = 0x00000000004E4000
	w20 = Mem0[x19 + 136:word32]
	branch w20 == 0x00000000 l00000000004A2EA0
	// succ:  l00000000004A2D9C l00000000004A2EA0
l00000000004A2D9C:
	w31 = w0 - 0x00000001
	NZCV = cond(w31)
	branch Test(GT,NZV) l00000000004A2DB0
	// succ:  l00000000004A2DA4 l00000000004A2DB0
l00000000004A2DA4:
	x1 = 0x00000000004E1000
	w1 = Mem0[x1 + 3332:word32]
	branch w1 == 0x00000000 l00000000004A2DDC
	// succ:  l00000000004A2DB0 l00000000004A2DDC
l00000000004A2DB0:
	w1 = w2
	call rl_backward_char (retsize: 0;)
	w1 = Mem0[x19 + 136:word32]
	w0 = w20
	w19 = 0x00000000
	call rl_kill_text (retsize: 0;)
	// succ:  l00000000004A2DC8
l00000000004A2DC8:
	w0 = w19
	x21 = Mem0[sp + 32:word64]
	v19 = sp + 16
	x19 = Mem0[v19:word64]
	v19 = v19 + 8
	x20 = Mem0[v19:word64]
	x29 = Mem0[sp:word64]
	sp = sp + 8
	x30 = Mem0[sp:word64]
	sp = sp + 48
	return
	// succ:  _rl_rubout_char_exit
l00000000004A2DDC:
	__ctype_get_mb_cur_max()
	sp = sp + 0xFFFFFFFFFFFFFFF8
	x31 = x0 - 0x0000000000000001
	NZCV = cond(x31)
	branch Test(EQ,Z) l00000000004A2DF4
	// succ:  l00000000004A2DE8 l00000000004A2DF4
l00000000004A2DE8:
	x0 = 0x00000000004E2000
	w21 = Mem0[x0 + 3968:word32]
	branch w21 == 0x00000000 l00000000004A2E78
	// succ:  l00000000004A2DF4 l00000000004A2E78
l00000000004A2DF4:
	w2 = Mem0[x19 + 136:word32]
	x0 = 0x00000000004E1000
	w2 = w2 - 0x00000001
	x3 = Mem0[x0 + 3256:word64]
	Mem0[x19 + 136:word32] = w2
	w1 = w20
	w0 = w2
	v24 = Mem0[x3 + (int64) ((int32) w2):byte]
	w21 = (word32) v24
	call rl_delete_text (retsize: 0;)
	x1 = 0x00000000004E3000
	w20 = Mem0[x19 + 136:word32]
	w1 = Mem0[x1 + 3900:word32]
	w19 = 0x00000000
	NZCV = cond(w20 - w1)
	branch Test(NE,Z) l00000000004A2DC8
	// succ:  l00000000004A2E30 l00000000004A2DC8
l00000000004A2E30:
	__ctype_b_loc()
	sp = sp + 0xFFFFFFFFFFFFFFF8
	x1 = Mem0[x0:word64]
l00000000004A2E64:
	v25 = sp + 16
	x19 = Mem0[v25:word64]
	v25 = v25 + 8
	x20 = Mem0[v25:word64]
	x21 = Mem0[sp + 32:word64]
	x29 = Mem0[sp:word64]
	sp = sp + 8
	x30 = Mem0[sp:word64]
	sp = sp + 48
	w0 = w31 - w0
	// succ:  l00000000004A2E74_thunk_rl_delete
l00000000004A2E74_thunk_rl_delete:
	call rl_delete (retsize: 0;)
	return
	// succ:  _rl_rubout_char_exit
l00000000004A2E78:
	x0 = 0x00000000004E1000
	w1 = Mem0[x19 + 136:word32]
	x0 = Mem0[x0 + 3256:word64]
	w2 = 0x00000001
	call _rl_find_prev_mbchar (retsize: 0;)
	w1 = w20
	Mem0[x19 + 136:word32] = w0
	w19 = w21
	call rl_delete_text (retsize: 0;)
	goto l00000000004A2DC8
	// succ:  l00000000004A2DC8
l00000000004A2EA0:
	call rl_ding (retsize: 0;)
	w19 = 0xFFFFFFFF
	goto l00000000004A2DC8
	// succ:  l00000000004A2DC8
_rl_rubout_char_exit:


// rl_rubout
// Return size: 0
void rl_rubout()
rl_rubout_entry:
	// succ:  l00000000004A2EAC
l00000000004A2EAC:
	sp = fp
	sp = sp + -16
	Mem0[sp:word64] = x29
	sp = sp + 8
	Mem0[sp:word64] = x30
	x29 = x31 + 0x0000000000000000
	branch (w0 & 0x00000000) == 0x00000000 l00000000004A2EE0
	// succ:  l00000000004A2EB8 l00000000004A2EE0
l00000000004A2EB8:
	x2 = 0x00000000004E4000
	w2 = Mem0[x2 + 136:word32]
	branch w2 == 0x00000000 l00000000004A2EEC
	// succ:  l00000000004A2EC4 l00000000004A2EEC
l00000000004A2EC4:
	x2 = 0x00000000004D9000
	w2 = Mem0[x2 + 1232:word32]
	branch w2 == 0x00000000 l00000000004A2ED8
	// succ:  l00000000004A2ED0 l00000000004A2ED8
l00000000004A2ED0:
	x29 = Mem0[sp:word64]
	sp = sp + 8
	x30 = Mem0[sp:word64]
	sp = sp + 16
	// succ:  l00000000004A2ED4_thunk__rl_rubout_char
l00000000004A2ED4_thunk__rl_rubout_char:
	call _rl_rubout_char (retsize: 0;)
	return
	// succ:  rl_rubout_exit
l00000000004A2ED8:
	x29 = Mem0[sp:word64]
	sp = sp + 8
	x30 = Mem0[sp:word64]
	sp = sp + 16
	// succ:  l00000000004A2EDC_thunk__rl_overwrite_rubout
l00000000004A2EDC_thunk__rl_overwrite_rubout:
	call _rl_overwrite_rubout (retsize: 0;)
	return
	// succ:  rl_rubout_exit
l00000000004A2EE0:
	x29 = Mem0[sp:word64]
	sp = sp + 8
	x30 = Mem0[sp:word64]
	sp = sp + 16
	w0 = w31 - w0
	// succ:  l00000000004A2EE8_thunk_rl_delete
l00000000004A2EE8_thunk_rl_delete:
	call rl_delete (retsize: 0;)
	return
	// succ:  rl_rubout_exit
l00000000004A2EEC:
	call rl_ding (retsize: 0;)
	w0 = 0xFFFFFFFF
	x29 = Mem0[sp:word64]
	sp = sp + 8
	x30 = Mem0[sp:word64]
	sp = sp + 16
	return
	// succ:  rl_rubout_exit
rl_rubout_exit:


// rl_rubout_or_delete
// Return size: 0
void rl_rubout_or_delete()
rl_rubout_or_delete_entry:
	// succ:  l00000000004A2EFC
l00000000004A2EFC:
	sp = fp
	x2 = 0x00000000004E3000
	w2 = Mem0[x2 + 3900:word32]
	w4 = w0
	w3 = w1
	branch w2 == 0x00000000 l00000000004A2F20
	// succ:  l00000000004A2F10 l00000000004A2F20
l00000000004A2F10:
	x5 = 0x00000000004E4000
	w5 = Mem0[x5 + 136:word32]
	NZCV = cond(w2 - w5)
	branch Test(EQ,Z) l00000000004A2F2C
	// succ:  l00000000004A2F20 l00000000004A2F2C
l00000000004A2F20:
	w0 = w4
	w1 = w3
	// succ:  l00000000004A2F28_thunk_rl_delete
l00000000004A2F28_thunk_rl_delete:
	call rl_delete (retsize: 0;)
	return
	// succ:  rl_rubout_or_delete_exit
l00000000004A2F2C:
	// succ:  l00000000004A2F2C_thunk__rl_rubout_char
l00000000004A2F2C_thunk__rl_rubout_char:
	call _rl_rubout_char (retsize: 0;)
	return
	// succ:  rl_rubout_or_delete_exit
rl_rubout_or_delete_exit:


// rl_delete_horizontal_space
// Return size: 0
void rl_delete_horizontal_space()
rl_delete_horizontal_space_entry:
	// succ:  l00000000004A2F30
l00000000004A2F30:
	sp = fp
	sp = sp + -32
	Mem0[sp:word64] = x29
	sp = sp + 8
	Mem0[sp:word64] = x30
	x29 = x31 + 0x0000000000000000
	v8 = sp + 16
	Mem0[v8:word64] = x19
	v8 = v8 + 8
	Mem0[v8:word64] = x20
	x20 = 0x00000000004E4000
	w19 = Mem0[x20 + 136:word32]
	branch w19 == 0x00000000 l00000000004A3050
	// succ:  l00000000004A2F48 l00000000004A3050
l00000000004A2F48:
	x0 = 0x00000000004E1000
	x2 = Mem0[x0 + 3256:word64]
l00000000004A2F98:
	x0 = 0x00000000004E3000
	w4 = Mem0[x0 + 3900:word32]
	NZCV = cond(w1 - w4)
	branch Test(GE,NZV) l00000000004A2FF4
	// succ:  l00000000004A2FA8 l00000000004A2FF4
l00000000004A2FA8:
	x0 = 0x00000000004E1000
	x0 = Mem0[x0 + 3256:word64]
l00000000004A2FF4:
	NZCV = cond(w19 - w1)
	branch Test(EQ,Z) l00000000004A3020
	// succ:  l00000000004A2FFC l00000000004A3020
l00000000004A2FFC:
	w0 = w19
	call rl_delete_text (retsize: 0;)
	Mem0[x20 + 136:word32] = w19
	// succ:  l00000000004A3008
l00000000004A3008:
	branch (w19 & 0x00000000) == 0x00000000 l00000000004A3010
	// succ:  l00000000004A300C l00000000004A3010
l00000000004A300C:
	Mem0[x20 + 136:word32] = 0x00000000
	// succ:  l00000000004A3010
l00000000004A3010:
	w0 = 0x00000000
	v18 = sp + 16
	x19 = Mem0[v18:word64]
	v18 = v18 + 8
	x20 = Mem0[v18:word64]
	x29 = Mem0[sp:word64]
	sp = sp + 8
	x30 = Mem0[sp:word64]
	sp = sp + 32
	return
	// succ:  rl_delete_horizontal_space_exit
l00000000004A3020:
	w19 = Mem0[x20 + 136:word32]
	goto l00000000004A3008
	// succ:  l00000000004A3008
l00000000004A3050:
	w1 = w19
	goto l00000000004A2F98
	// succ:  l00000000004A2F98
rl_delete_horizontal_space_exit:


// rl_delete_or_show_completions
// Return size: 0
void rl_delete_or_show_completions()
rl_delete_or_show_completions_entry:
	// succ:  l00000000004A3064
l00000000004A3064:
	sp = fp
	x2 = 0x00000000004E3000
	w2 = Mem0[x2 + 3900:word32]
	w4 = w0
	w3 = w1
	branch w2 == 0x00000000 l00000000004A3088
	// succ:  l00000000004A3078 l00000000004A3088
l00000000004A3078:
	x5 = 0x00000000004E4000
	w5 = Mem0[x5 + 136:word32]
	NZCV = cond(w2 - w5)
	branch Test(EQ,Z) l00000000004A3094
	// succ:  l00000000004A3088 l00000000004A3094
l00000000004A3088:
	w0 = w4
	w1 = w3
	// succ:  l00000000004A3090_thunk__rl_rubout_char
l00000000004A3090_thunk__rl_rubout_char:
	call _rl_rubout_char (retsize: 0;)
	return
	// succ:  rl_delete_or_show_completions_exit
l00000000004A3094:
	// succ:  l00000000004A3094_thunk_rl_possible_completions
l00000000004A3094_thunk_rl_possible_completions:
	call rl_possible_completions (retsize: 0;)
	return
	// succ:  rl_delete_or_show_completions_exit
rl_delete_or_show_completions_exit:


// rl_insert_comment
// Return size: 0
void rl_insert_comment()
rl_insert_comment_entry:
	// succ:  l00000000004A3098
l00000000004A3098:
	sp = fp
	sp = sp + -32
	Mem0[sp:word64] = x29
	sp = sp + 8
	Mem0[sp:word64] = x30
	x29 = x31 + 0x0000000000000000
	x0 = 0x00000000004E3000
	v9 = sp + 16
	Mem0[v9:word64] = x19
	v9 = v9 + 8
	Mem0[v9:word64] = x20
	x19 = Mem0[x0 + 3888:word64]
	x0 = 0x00000000004E4000
	Mem0[x0 + 136:word32] = 0x00000000
	branch x19 == 0x0000000000000000 l00000000004A313C
	// succ:  l00000000004A30B8 l00000000004A313C
l00000000004A30B8:
	x0 = 0x00000000004E1000
	w0 = Mem0[x0 + 3332:word32]
	branch w0 == 0x00000000 l00000000004A30EC
	// succ:  l00000000004A30C4 l00000000004A30EC
l00000000004A30C4:
	x0 = x19
	strlen(x0)
	sp = sp + 0xFFFFFFFFFFFFFFF8
	x20 = x0
	branch w0 == 0x00000000 l00000000004A312C
	// succ:  l00000000004A30D4 l00000000004A312C
l00000000004A30D4:
	x0 = 0x00000000004E1000
	x1 = Mem0[x0 + 3256:word64]
	v13 = Mem0[x19:byte]
	w2 = (word32) v13
	v14 = Mem0[x1:byte]
	w0 = (word32) v14
	NZCV = cond(w2 - w0)
	branch Test(EQ,Z) l00000000004A311C
	// succ:  l00000000004A30EC l00000000004A311C
l00000000004A30EC:
	x0 = x19
	call rl_insert_text (retsize: 0;)
	// succ:  l00000000004A30F4
l00000000004A30F4:
	x0 = 0x00000000004DE000
	x0 = Mem0[x0 + 1488:word64]
	call x0 (retsize: 0;)
	w1 = 0x0000000A
	w0 = 0x00000001
	call rl_newline (retsize: 0;)
	w0 = 0x00000000
	v18 = sp + 16
	x19 = Mem0[v18:word64]
	v18 = v18 + 8
	x20 = Mem0[v18:word64]
	x29 = Mem0[sp:word64]
	sp = sp + 8
	x30 = Mem0[sp:word64]
	sp = sp + 32
	return
	// succ:  rl_insert_comment_exit
l00000000004A311C:
	x0 = x19
l00000000004A312C:
	w1 = w20
	w0 = 0x00000000
	call rl_delete_text (retsize: 0;)
	goto l00000000004A30F4
	// succ:  l00000000004A30F4
l00000000004A313C:
	x19 = 0x00000000004AE000
	x19 = x19 + 0xFFFFFFFFFFFFFB60
	goto l00000000004A30B8
	// succ:  l00000000004A30B8
rl_insert_comment_exit:


// rl_upcase_word
// Return size: 0
void rl_upcase_word()
rl_upcase_word_entry:
	// succ:  l00000000004A3148
l00000000004A3148:
	sp = fp
	w1 = 0x00000001
	// succ:  l00000000004A314C_thunk_fn00000000004A23A8
l00000000004A314C_thunk_fn00000000004A23A8:
	call fn00000000004A23A8 (retsize: 0;)
	return
	// succ:  rl_upcase_word_exit
rl_upcase_word_exit:


// rl_downcase_word
// Return size: 0
void rl_downcase_word()
rl_downcase_word_entry:
	// succ:  l00000000004A3150
l00000000004A3150:
	sp = fp
	w1 = 0x00000002
	// succ:  l00000000004A3154_thunk_fn00000000004A23A8
l00000000004A3154_thunk_fn00000000004A23A8:
	call fn00000000004A23A8 (retsize: 0;)
	return
	// succ:  rl_downcase_word_exit
rl_downcase_word_exit:


// rl_capitalize_word
// Return size: 0
void rl_capitalize_word()
rl_capitalize_word_entry:
	// succ:  l00000000004A3158
l00000000004A3158:
	sp = fp
	w1 = 0x00000003
	// succ:  l00000000004A315C_thunk_fn00000000004A23A8
l00000000004A315C_thunk_fn00000000004A23A8:
	call fn00000000004A23A8 (retsize: 0;)
	return
	// succ:  rl_capitalize_word_exit
rl_capitalize_word_exit:


// rl_transpose_words
// Return size: 0
void rl_transpose_words()
rl_transpose_words_entry:
	// succ:  l00000000004A3160
l00000000004A3160:
	sp = fp
	sp = sp + -80
	Mem0[sp:word64] = x29
	sp = sp + 8
	Mem0[sp:word64] = x30
	x29 = x31 + 0x0000000000000000
	v8 = sp + 16
	Mem0[v8:word64] = x19
	v8 = v8 + 8
	Mem0[v8:word64] = x20
	v11 = sp + 32
	Mem0[v11:word64] = x21
	v11 = v11 + 8
	Mem0[v11:word64] = x22
	v14 = sp + 64
	Mem0[v14:word64] = x25
	v14 = v14 + 8
	Mem0[v14:word64] = x26
	x19 = 0x00000000004E4000
	v17 = sp + 48
	Mem0[v17:word64] = x23
	v17 = v17 + 8
	Mem0[v17:word64] = x24
	w20 = w0
	w21 = w1
	w25 = Mem0[x19 + 136:word32]
	w22 = 0x00000000
	branch w0 != 0x00000000 l00000000004A31AC
	// succ:  l00000000004A3190 l00000000004A31AC
l00000000004A3190:
	w0 = w22
	v24 = sp + 16
	x19 = Mem0[v24:word64]
	v24 = v24 + 8
	x20 = Mem0[v24:word64]
	v25 = sp + 32
	x21 = Mem0[v25:word64]
	v25 = v25 + 8
	x22 = Mem0[v25:word64]
	v26 = sp + 48
	x23 = Mem0[v26:word64]
	v26 = v26 + 8
	x24 = Mem0[v26:word64]
	v27 = sp + 64
	x25 = Mem0[v27:word64]
	v27 = v27 + 8
	x26 = Mem0[v27:word64]
	x29 = Mem0[sp:word64]
	sp = sp + 8
	x30 = Mem0[sp:word64]
	sp = sp + 80
	return
	// succ:  rl_transpose_words_exit
l00000000004A31AC:
	call rl_forward_word (retsize: 0;)
	w1 = w21
	w0 = 0x00000001
	w24 = Mem0[x19 + 136:word32]
	call rl_backward_word (retsize: 0;)
	w1 = w21
	w0 = w20
	w20 = Mem0[x19 + 136:word32]
	call rl_backward_word (retsize: 0;)
	w1 = w21
	w0 = 0x00000001
	w21 = Mem0[x19 + 136:word32]
	call rl_forward_word (retsize: 0;)
	w23 = Mem0[x19 + 136:word32]
	NZCV = cond(w20 - w23)
	branch Test(LT,NV) l00000000004A327C
	// succ:  l00000000004A31EC l00000000004A327C
l00000000004A31EC:
	NZCV = cond(w21 - w20)
	branch Test(EQ,Z) l00000000004A327C
	// succ:  l00000000004A31F4 l00000000004A327C
l00000000004A31F4:
	w1 = w23
	w0 = w21
	call rl_copy_text (retsize: 0;)
	x26 = x0
	w1 = w24
	w0 = w20
	call rl_copy_text (retsize: 0;)
	x25 = x0
	call rl_begin_undo_group (retsize: 0;)
	w1 = w24
	w0 = w20
	Mem0[x19 + 136:word32] = w20
	call rl_delete_text (retsize: 0;)
	x0 = x26
	call rl_insert_text (retsize: 0;)
	w1 = w23
	w0 = w21
	Mem0[x19 + 136:word32] = w21
	call rl_delete_text (retsize: 0;)
	x0 = x25
	call rl_insert_text (retsize: 0;)
	Mem0[x19 + 136:word32] = w24
	call rl_end_undo_group (retsize: 0;)
	x0 = x26
	call xfree (retsize: 0;)
	x0 = x25
	call xfree (retsize: 0;)
	w0 = w22
	v34 = sp + 16
	x19 = Mem0[v34:word64]
	v34 = v34 + 8
	x20 = Mem0[v34:word64]
	v35 = sp + 32
	x21 = Mem0[v35:word64]
	v35 = v35 + 8
	x22 = Mem0[v35:word64]
	v36 = sp + 48
	x23 = Mem0[v36:word64]
	v36 = v36 + 8
	x24 = Mem0[v36:word64]
	v37 = sp + 64
	x25 = Mem0[v37:word64]
	v37 = v37 + 8
	x26 = Mem0[v37:word64]
	x29 = Mem0[sp:word64]
	sp = sp + 8
	x30 = Mem0[sp:word64]
	sp = sp + 80
	return
	// succ:  rl_transpose_words_exit
l00000000004A327C:
	call rl_ding (retsize: 0;)
	w22 = 0xFFFFFFFF
	Mem0[x19 + 136:word32] = w25
	goto l00000000004A3190
	// succ:  l00000000004A3190
rl_transpose_words_exit:


// rl_transpose_chars
// Return size: 0
void rl_transpose_chars()
rl_transpose_chars_entry:
	// succ:  l00000000004A328C
l00000000004A328C:
	sp = fp
	sp = sp + -64
	Mem0[sp:word64] = x29
	sp = sp + 8
	Mem0[sp:word64] = x30
	x29 = x31 + 0x0000000000000000
	Mem0[sp + 48:word64] = x23
	v9 = sp + 16
	Mem0[v9:word64] = x19
	v9 = v9 + 8
	Mem0[v9:word64] = x20
	w23 = w0
	v14 = sp + 32
	Mem0[v14:word64] = x21
	v14 = v14 + 8
	Mem0[v14:word64] = x22
	w0 = 0x00000000
	branch w23 == 0x00000000 l00000000004A3394
	// succ:  l00000000004A32AC l00000000004A3394
l00000000004A32AC:
	x22 = 0x00000000004E4000
	w0 = Mem0[x22 + 136:word32]
	branch w0 == 0x00000000 l00000000004A3414
	// succ:  l00000000004A32B8 l00000000004A3414
l00000000004A32B8:
	x20 = 0x00000000004E3000
	w0 = Mem0[x20 + 3900:word32]
	w31 = w0 - 0x00000001
	NZCV = cond(w31)
	branch Test(LE,ZCV) l00000000004A3414
	// succ:  l00000000004A32C8 l00000000004A3414
l00000000004A32C8:
	call rl_begin_undo_group (retsize: 0;)
	w0 = Mem0[x20 + 3900:word32]
	w19 = Mem0[x22 + 136:word32]
	x21 = 0x00000000004E1000
	NZCV = cond(w19 - w0)
	branch Test(EQ,Z) l00000000004A33A8
	// succ:  l00000000004A32E0 l00000000004A33A8
l00000000004A32E0:
	__ctype_get_mb_cur_max()
	sp = sp + 0xFFFFFFFFFFFFFFF8
	x31 = x0 - 0x0000000000000001
	NZCV = cond(x31)
	branch Test(ULE,ZC) l00000000004A32F8
	// succ:  l00000000004A32EC l00000000004A32F8
l00000000004A32EC:
	x0 = 0x00000000004E2000
	w0 = Mem0[x0 + 3968:word32]
	branch w0 == 0x00000000 l00000000004A33DC
	// succ:  l00000000004A32F8 l00000000004A33DC
l00000000004A32F8:
	w1 = Mem0[x22 + 136:word32]
	w1 = w1 - 0x00000001
	// succ:  l00000000004A3300
l00000000004A3300:
	w19 = w19 - w1
	w0 = w19 + 0x00000001
l00000000004A3394:
	v23 = sp + 16
	x19 = Mem0[v23:word64]
	v23 = v23 + 8
	x20 = Mem0[v23:word64]
	v24 = sp + 32
	x21 = Mem0[v24:word64]
	v24 = v24 + 8
	x22 = Mem0[v24:word64]
	x23 = Mem0[sp + 48:word64]
	x29 = Mem0[sp:word64]
	sp = sp + 8
	x30 = Mem0[sp:word64]
	sp = sp + 64
	return
	// succ:  rl_transpose_chars_exit
l00000000004A33A8:
	__ctype_get_mb_cur_max()
	sp = sp + 0xFFFFFFFFFFFFFFF8
	x31 = x0 - 0x0000000000000001
	NZCV = cond(x31)
	branch Test(ULE,ZC) l00000000004A33C0
	// succ:  l00000000004A33B4 l00000000004A33C0
l00000000004A33B4:
	x0 = 0x00000000004E2000
	w0 = Mem0[x0 + 3968:word32]
	branch w0 == 0x00000000 l00000000004A33FC
	// succ:  l00000000004A33C0 l00000000004A33FC
l00000000004A33C0:
	w19 = Mem0[x22 + 136:word32]
	x21 = 0x00000000004E1000
	w0 = w19 - 0x00000001
	// succ:  l00000000004A33CC
l00000000004A33CC:
	Mem0[x22 + 136:word32] = w0
	w19 = w0
	w23 = 0x00000001
	goto l00000000004A32E0
	// succ:  l00000000004A32E0
l00000000004A33DC:
	w1 = Mem0[x22 + 136:word32]
	x0 = Mem0[x21 + 3256:word64]
	w2 = 0x00000001
	call _rl_find_prev_mbchar (retsize: 0;)
	w1 = w0
	goto l00000000004A3300
	// succ:  l00000000004A3300
l00000000004A33FC:
	x21 = 0x00000000004E1000
	x0 = Mem0[x21 + 3256:word64]
	w1 = Mem0[x22 + 136:word32]
	w2 = 0x00000001
	call _rl_find_prev_mbchar (retsize: 0;)
	goto l00000000004A33CC
	// succ:  l00000000004A33CC
l00000000004A3414:
	call rl_ding (retsize: 0;)
	w0 = 0xFFFFFFFF
	goto l00000000004A3394
	// succ:  l00000000004A3394
rl_transpose_chars_exit:


// _rl_char_search_internal
// Return size: 0
void _rl_char_search_internal()
_rl_char_search_internal_entry:
	// succ:  l00000000004A3420
l00000000004A3420:
	sp = fp
	sp = sp + -112
	Mem0[sp:word64] = x29
	sp = sp + 8
	Mem0[sp:word64] = x30
	x29 = x31 + 0x0000000000000000
	v8 = sp + 48
	Mem0[v8:word64] = x23
	v8 = v8 + 8
	Mem0[v8:word64] = x24
	v11 = sp + 64
	Mem0[v11:word64] = x25
	v11 = v11 + 8
	Mem0[v11:word64] = x26
	v14 = sp + 80
	Mem0[v14:word64] = x27
	v14 = v14 + 8
	Mem0[v14:word64] = x28
	v17 = sp + 16
	Mem0[v17:word64] = x19
	v17 = v17 + 8
	Mem0[v17:word64] = x20
	v20 = sp + 32
	Mem0[v20:word64] = x21
	v20 = v20 + 8
	Mem0[v20:word64] = x22
	NZCV = cond(w1 - w31)
	w27 = w1
	w25 = w0
	x23 = x2
	w24 = w3
	branch Test(EQ,Z) l00000000004A35E0
	// succ:  l00000000004A3454 l00000000004A35E0
l00000000004A3454:
	x0 = 0x00000000004E4000
	w26 = 0x00000001
	w19 = Mem0[x0 + 136:word32]
l00000000004A3520:
	v34 = sp + 16
	x19 = Mem0[v34:word64]
	v34 = v34 + 8
	x20 = Mem0[v34:word64]
	v35 = sp + 32
	x21 = Mem0[v35:word64]
	v35 = v35 + 8
	x22 = Mem0[v35:word64]
	v36 = sp + 48
	x23 = Mem0[v36:word64]
	v36 = v36 + 8
	x24 = Mem0[v36:word64]
	v37 = sp + 64
	x25 = Mem0[v37:word64]
	v37 = v37 + 8
	x26 = Mem0[v37:word64]
	v38 = sp + 80
	x27 = Mem0[v38:word64]
	v38 = v38 + 8
	x28 = Mem0[v38:word64]
	x29 = Mem0[sp:word64]
	sp = sp + 8
	x30 = Mem0[sp:word64]
	sp = sp + 112
	return
	// succ:  _rl_char_search_internal_exit
l00000000004A35E0:
	w0 = 0xFFFFFFFF
	goto l00000000004A3520
	// succ:  l00000000004A3520
_rl_char_search_internal_exit:


// fn00000000004A35F4
// Return size: 0
void fn00000000004A35F4()
fn00000000004A35F4_entry:
	// succ:  l00000000004A35F4
l00000000004A35F4:
	sp = v3
	sp = sp + -64
	Mem0[sp:word64] = x29
	sp = sp + 8
	Mem0[sp:word64] = x30
	x29 = x31 + 0x0000000000000000
	v7 = sp + 16
	Mem0[v7:word64] = x19
	v7 = v7 + 8
	Mem0[v7:word64] = x20
	w19 = w0
	w20 = w1
	x0 = x29 + 0x0000000000000020
	w1 = 0x00000010
	Mem0[x29 + 48:word64] = x2
	call _rl_read_mbchar (retsize: 0;)
	NZCV = cond(w0 - w31)
	w3 = w0
	x2 = Mem0[x29 + 48:word64]
	branch Test(LE,ZCV) l00000000004A3664
	// succ:  l00000000004A3628 l00000000004A3664
l00000000004A3628:
	branch (w19 & 0x00000000) == 0x00000000 l00000000004A3648
	// succ:  l00000000004A362C l00000000004A3648
l00000000004A362C:
	w0 = w19
	w1 = w20
	x2 = x29 + 0x0000000000000020
	call _rl_char_search_internal (retsize: 0;)
	// succ:  l00000000004A363C
l00000000004A363C:
	v20 = sp + 16
	x19 = Mem0[v20:word64]
	v20 = v20 + 8
	x20 = Mem0[v20:word64]
	x29 = Mem0[sp:word64]
	sp = sp + 8
	x30 = Mem0[sp:word64]
	sp = sp + 64
	return
	// succ:  fn00000000004A35F4_exit
l00000000004A3648:
	w1 = w2
	w0 = w31 - w19
	x2 = x29 + 0x0000000000000020
	call _rl_char_search_internal (retsize: 0;)
	v22 = sp + 16
	x19 = Mem0[v22:word64]
	v22 = v22 + 8
	x20 = Mem0[v22:word64]
	x29 = Mem0[sp:word64]
	sp = sp + 8
	x30 = Mem0[sp:word64]
	sp = sp + 64
	return
	// succ:  fn00000000004A35F4_exit
l00000000004A3664:
	w0 = 0xFFFFFFFF
	goto l00000000004A363C
	// succ:  l00000000004A363C
fn00000000004A35F4_exit:


// rl_char_search
// Return size: 0
void rl_char_search()
rl_char_search_entry:
	// succ:  l00000000004A3694
l00000000004A3694:
	sp = fp
	sp = sp + -16
	Mem0[sp:word64] = x29
	sp = sp + 8
	Mem0[sp:word64] = x30
	x29 = x31 + 0x0000000000000000
	x1 = 0x00000000004E1000
	w1 = Mem0[x1 + 3168:word32]
	branch (w1 & 0x00000000) == 0x00000000 l00000000004A36B8
	// succ:  l00000000004A36A8 l00000000004A36B8
l00000000004A36A8:
	x29 = Mem0[sp:word64]
	sp = sp + 8
	x30 = Mem0[sp:word64]
	sp = sp + 16
	w1 = 0x00000002
	w2 = 0xFFFFFFFE
	// succ:  l00000000004A36B4_thunk_fn00000000004A35F4
l00000000004A36B4_thunk_fn00000000004A35F4:
	call fn00000000004A35F4 (retsize: 0;)
	return
	// succ:  rl_char_search_exit
l00000000004A36B8:
	call _rl_callback_data_alloc (retsize: 0;)
	x1 = 0x00000000004E2000
	Mem0[x1 + 3640:word64] = x0
	w1 = 0x00000002
	Mem0[x0 + 4:word32] = w1
	w1 = 0xFFFFFFFE
	Mem0[x0 + 8:word32] = w1
	x1 = 0x00000000004A3000
	x1 = x1 + 0x000000000000066C
	x0 = 0x00000000004E2000
	Mem0[x0 + 3632:word64] = x1
	x29 = Mem0[sp:word64]
	sp = sp + 8
	x30 = Mem0[sp:word64]
	sp = sp + 16
	w0 = 0x00000000
	return
	// succ:  rl_char_search_exit
rl_char_search_exit:


// rl_backward_char_search
// Return size: 0
void rl_backward_char_search()
rl_backward_char_search_entry:
	// succ:  l00000000004A36F0
l00000000004A36F0:
	sp = fp
	sp = sp + -16
	Mem0[sp:word64] = x29
	sp = sp + 8
	Mem0[sp:word64] = x30
	x29 = x31 + 0x0000000000000000
	x1 = 0x00000000004E1000
	w1 = Mem0[x1 + 3168:word32]
	branch (w1 & 0x00000000) == 0x00000000 l00000000004A3714
	// succ:  l00000000004A3704 l00000000004A3714
l00000000004A3704:
	x29 = Mem0[sp:word64]
	sp = sp + 8
	x30 = Mem0[sp:word64]
	sp = sp + 16
	w1 = 0xFFFFFFFE
	w2 = 0x00000002
	// succ:  l00000000004A3710_thunk_fn00000000004A35F4
l00000000004A3710_thunk_fn00000000004A35F4:
	call fn00000000004A35F4 (retsize: 0;)
	return
	// succ:  rl_backward_char_search_exit
l00000000004A3714:
	call _rl_callback_data_alloc (retsize: 0;)
	x1 = 0x00000000004E2000
	Mem0[x1 + 3640:word64] = x0
	w1 = 0xFFFFFFFE
	Mem0[x0 + 4:word32] = w1
	w1 = 0x00000002
	Mem0[x0 + 8:word32] = w1
	x1 = 0x00000000004A3000
	x1 = x1 + 0x000000000000066C
	x0 = 0x00000000004E2000
	Mem0[x0 + 3632:word64] = x1
	x29 = Mem0[sp:word64]
	sp = sp + 8
	x30 = Mem0[sp:word64]
	sp = sp + 16
	w0 = 0x00000000
	return
	// succ:  rl_backward_char_search_exit
rl_backward_char_search_exit:


// _rl_set_mark_at_pos
// Return size: 0
void _rl_set_mark_at_pos()
_rl_set_mark_at_pos_entry:
	// succ:  l00000000004A374C
l00000000004A374C:
	sp = fp
	x1 = 0x00000000004E3000
	w1 = Mem0[x1 + 3900:word32]
	NZCV = cond(w1 - w0)
	branch Test(LT,NV) l00000000004A376C
	// succ:  l00000000004A375C l00000000004A376C
l00000000004A375C:
	x1 = 0x00000000004E4000
	Mem0[x1 + 120:word32] = w0
	w0 = 0x00000000
	return
	// succ:  _rl_set_mark_at_pos_exit
l00000000004A376C:
	w0 = 0xFFFFFFFF
	return
	// succ:  _rl_set_mark_at_pos_exit
_rl_set_mark_at_pos_exit:


// rl_set_mark
// Return size: 0
void rl_set_mark()
rl_set_mark_entry:
	// succ:  l00000000004A3774
l00000000004A3774:
	sp = fp
	x1 = 0x00000000004E1000
	w1 = Mem0[x1 + 3332:word32]
	branch w1 != 0x00000000 l00000000004A3788
	// succ:  l00000000004A3780 l00000000004A3788
l00000000004A3780:
	x0 = 0x00000000004E4000
	w0 = Mem0[x0 + 136:word32]
	// succ:  l00000000004A3788
l00000000004A3788:
	x1 = 0x00000000004E3000
	w1 = Mem0[x1 + 3900:word32]
	NZCV = cond(w0 - w1)
	branch Test(GT,NZV) l00000000004A37A8
	// succ:  l00000000004A3798 l00000000004A37A8
l00000000004A3798:
	x1 = 0x00000000004E4000
	Mem0[x1 + 120:word32] = w0
	w0 = 0x00000000
	return
	// succ:  rl_set_mark_exit
l00000000004A37A8:
	w0 = 0xFFFFFFFF
	return
	// succ:  rl_set_mark_exit
rl_set_mark_exit:


// rl_exchange_point_and_mark
// Return size: 0
void rl_exchange_point_and_mark()
rl_exchange_point_and_mark_entry:
	// succ:  l00000000004A37B0
l00000000004A37B0:
	sp = fp
	sp = sp + -16
	Mem0[sp:word64] = x29
	sp = sp + 8
	Mem0[sp:word64] = x30
	x29 = x31 + 0x0000000000000000
	x1 = 0x00000000004E4000
	x0 = 0x00000000004E3000
	w2 = Mem0[x1 + 120:word32]
	w0 = Mem0[x0 + 3900:word32]
	NZCV = cond(w2 - w0)
	branch Test(LE,ZCV) l00000000004A37E8
	// succ:  l00000000004A37D0 l00000000004A37E8
l00000000004A37D0:
	w0 = 0xFFFFFFFF
	Mem0[x1 + 120:word32] = w0
	// succ:  l00000000004A37D8
l00000000004A37D8:
	call rl_ding (retsize: 0;)
	w0 = 0xFFFFFFFF
	x29 = Mem0[sp:word64]
	sp = sp + 8
	x30 = Mem0[sp:word64]
	sp = sp + 16
	return
	// succ:  rl_exchange_point_and_mark_exit
l00000000004A37E8:
	w31 = w2 + 0x00000001
	NZCV = cond(w31)
	branch Test(EQ,Z) l00000000004A37D8
	// succ:  l00000000004A37F0 l00000000004A37D8
l00000000004A37F0:
	x3 = 0x00000000004E4000
	w4 = Mem0[x3 + 136:word32]
	w0 = 0x00000000
	Mem0[x3 + 136:word32] = w2
	Mem0[x1 + 120:word32] = w4
	x29 = Mem0[sp:word64]
	sp = sp + 8
	x30 = Mem0[sp:word64]
	sp = sp + 16
	return
	// succ:  rl_exchange_point_and_mark_exit
rl_exchange_point_and_mark_exit:


// _rl_init_eightbit
// Return size: 0
void _rl_init_eightbit()
_rl_init_eightbit_entry:
	// succ:  l00000000004A380C
l00000000004A380C:
	sp = fp
	sp = sp + -32
	Mem0[sp:word64] = x29
	sp = sp + 8
	Mem0[sp:word64] = x30
	x29 = x31 + 0x0000000000000000
	x0 = 0x00000000004AC000
	x0 = x0 + 0xFFFFFFFFFFFFFE60
	Mem0[sp + 16:word64] = x19
	call sh_get_env_value (retsize: 0;)
	x1 = x0
	branch x0 == 0x0000000000000000 l00000000004A3888
	// succ:  l00000000004A382C l00000000004A3888
l00000000004A382C:
	v10 = Mem0[x0:byte]
	w0 = (word32) v10
	branch w0 == 0x00000000 l00000000004A3888
	// succ:  l00000000004A3834 l00000000004A3888
l00000000004A3834:
	w0 = 0x00000000
	setlocale(x0, x1)
	sp = sp + 0xFFFFFFFFFFFFFFF8
	branch x0 == 0x0000000000000000 l00000000004A38E8
	// succ:  l00000000004A3840 l00000000004A38E8
l00000000004A3840:
	v12 = Mem0[x0:byte]
	w2 = (word32) v12
	w19 = 0x00000000
	branch w2 == 0x00000000 l00000000004A3878
	// succ:  l00000000004A384C l00000000004A3878
l00000000004A384C:
	w31 = w2 - 0x00000043
	NZCV = cond(w31)
	branch Test(EQ,Z) l00000000004A38FC
	// succ:  l00000000004A3854 l00000000004A38FC
l00000000004A3854:
	w31 = w2 - 0x00000050
	NZCV = cond(w31)
	branch Test(EQ,Z) l00000000004A3908
	// succ:  l00000000004A385C l00000000004A3908
l00000000004A385C:
	w19 = 0x00000001
	x0 = 0x00000000004E1000
	Mem0[x0 + 3320:word32] = w19
	x0 = 0x00000000004D9000
	Mem0[x0 + 1212:word32] = 0x00000000
	x0 = 0x00000000004E1000
	Mem0[x0 + 3324:word32] = w19
	// succ:  l00000000004A3878
l00000000004A3878:
	w0 = w19
	x19 = Mem0[sp + 16:word64]
	x29 = Mem0[sp:word64]
	sp = sp + 8
	x30 = Mem0[sp:word64]
	sp = sp + 32
	return
	// succ:  _rl_init_eightbit_exit
l00000000004A3888:
	x0 = 0x00000000004AC000
	x0 = x0 + 0xFFFFFFFFFFFFFE78
	call sh_get_env_value (retsize: 0;)
	x1 = x0
	branch x0 == 0x0000000000000000 l00000000004A38A4
	// succ:  l00000000004A389C l00000000004A38A4
l00000000004A389C:
	v17 = Mem0[x0:byte]
	w0 = (word32) v17
	branch w0 != 0x00000000 l00000000004A3834
	// succ:  l00000000004A38A4 l00000000004A3834
l00000000004A38A4:
	x0 = 0x00000000004AC000
	x0 = x0 + 0xFFFFFFFFFFFFFE58
	call sh_get_env_value (retsize: 0;)
	x1 = x0
	branch x0 == 0x0000000000000000 l00000000004A38C0
	// succ:  l00000000004A38B8 l00000000004A38C0
l00000000004A38B8:
	v18 = Mem0[x0:byte]
	w0 = (word32) v18
	branch w0 != 0x00000000 l00000000004A3834
	// succ:  l00000000004A38C0 l00000000004A3834
l00000000004A38C0:
	x1 = 0x0000000000000000
	w0 = 0x00000000
	setlocale(x0, x1)
	sp = sp + 0xFFFFFFFFFFFFFFF8
	x1 = x0
	branch x0 != 0x0000000000000000 l00000000004A3834
	// succ:  l00000000004A38D4 l00000000004A3834
l00000000004A38D4:
	x1 = 0x00000000004AC000
	x1 = x1 + 0x0000000000000460
	w0 = 0x00000000
	setlocale(x0, x1)
	sp = sp + 0xFFFFFFFFFFFFFFF8
	branch x0 != 0x0000000000000000 l00000000004A3840
	// succ:  l00000000004A38E8 l00000000004A3840
l00000000004A38E8:
	w19 = w0
	w0 = w19
	x19 = Mem0[sp + 16:word64]
	x29 = Mem0[sp:word64]
	sp = sp + 8
	x30 = Mem0[sp:word64]
	sp = sp + 32
	return
	// succ:  _rl_init_eightbit_exit
l00000000004A38FC:
	v19 = Mem0[x0 + 1:byte]
	w0 = (word32) v19
	branch w0 != 0x00000000 l00000000004A385C
	// succ:  l00000000004A3904 l00000000004A385C
l00000000004A3904:
	goto l00000000004A3878
	// succ:  l00000000004A3878
l00000000004A3908:
	x1 = 0x00000000004AE000
	x1 = x1 + 0xFFFFFFFFFFFFFFE8
	strcmp(x0, x1)
	sp = sp + 0xFFFFFFFFFFFFFFF8
	branch w0 != 0x00000000 l00000000004A385C
	// succ:  l00000000004A3918 l00000000004A385C
l00000000004A3918:
	goto l00000000004A3878
	// succ:  l00000000004A3878
_rl_init_eightbit_exit:


// fn00000000004A391C
// Return size: 0
void fn00000000004A391C()
fn00000000004A391C_entry:
	// succ:  l00000000004A391C
l00000000004A391C:
	sp = fp
	x0 = 0x00000000004E2000
	x0 = x0 + 0xFFFFFFFFFFFFFF10
	w0 = Mem0[x0:word32]
	branch w0 == 0x00000000 l00000000004A3984
	// succ:  l00000000004A392C l00000000004A3984
l00000000004A392C:
	x0 = 0x00000000004DE000
	x0 = x0 + 0x0000000000000600
	w0 = Mem0[x0:word32]
	w31 = w0 + 0x00000001
	NZCV = cond(w31)
	branch Test(EQ,Z) l00000000004A3984
	// succ:  l00000000004A3940 l00000000004A3984
l00000000004A3940:
	x1 = 0x00000000004E3000
	w2 = Mem0[x1 + 3900:word32]
	NZCV = cond(w2 - w0)
	branch Test(GE,NZV) l00000000004A3990
	// succ:  l00000000004A3950 l00000000004A3990
l00000000004A3950:
	x0 = 0x00000000004D9000
	x1 = 0x00000000004E4000
	w0 = Mem0[x0 + 1208:word32]
	Mem0[x1 + 136:word32] = w2
	branch w0 == 0x00000000 l00000000004A39A4
	// succ:  l00000000004A3964 l00000000004A39A4
l00000000004A3964:
	w31 = w0 - 0x00000001
	NZCV = cond(w31)
	branch Test(NE,Z) l00000000004A3980
	// succ:  l00000000004A396C l00000000004A3980
l00000000004A396C:
	w0 = Mem0[x1 + 136:word32]
	NZCV = cond(w0 - w2)
l00000000004A3980:
	return
	// succ:  fn00000000004A391C_exit
l00000000004A3984:
	x0 = 0x00000000004E3000
	w0 = Mem0[x0 + 3900:word32]
	w2 = w0
	// succ:  l00000000004A3990
l00000000004A3990:
	x1 = 0x00000000004E4000
	Mem0[x1 + 136:word32] = w0
	x0 = 0x00000000004D9000
	w0 = Mem0[x0 + 1208:word32]
	branch w0 != 0x00000000 l00000000004A3964
	// succ:  l00000000004A39A4 l00000000004A3964
l00000000004A39A4:
	x2 = 0x00000000004D9000
	x3 = Mem0[x2 + 1200:word64]
	x2 = 0x00000000004D9000
	x2 = x2 + 0x0000000000000500
	x31 = x3 - x2
	NZCV = cond(x31)
	branch Test(EQ,Z) l00000000004A3980
	// succ:  l00000000004A39BC l00000000004A3980
l00000000004A39BC:
	Mem0[x1 + 136:word32] = w0
	return
	// succ:  fn00000000004A391C_exit
fn00000000004A391C_exit:


// _rl_arg_overflow
// Return size: 0
void _rl_arg_overflow()
_rl_arg_overflow_entry:
	// succ:  l00000000004A39C4
l00000000004A39C4:
	sp = fp
	sp = sp + -16
	Mem0[sp:word64] = x29
	sp = sp + 8
	Mem0[sp:word64] = x30
	x29 = x31 + 0x0000000000000000
	x1 = 0x00000000004D9000
	w2 = Mem0[x1 + 1216:word32]
	w0 = 0x00004240
	w0 = DPB(w0, 0x0000000F, 16)
	NZCV = cond(w2 - w0)
	w0 = 0x00000000
	branch Test(LE,ZCV) l00000000004A3A1C
	// succ:  l00000000004A39E8 l00000000004A3A1C
l00000000004A39E8:
	x2 = 0x00000000004E4000
	Mem0[x1 + 1216:word32] = w0
	x1 = 0x00000000004E1000
	Mem0[x2 + 376:word32] = w0
	Mem0[x1 + 3332:word32] = w0
	call rl_ding (retsize: 0;)
	call rl_restore_prompt (retsize: 0;)
	call rl_clear_message (retsize: 0;)
	x1 = 0x00000000004E1000
	w2 = Mem0[x1 + 3168:word32]
	w0 = 0x00000001
	w2 = w2 & 0xFFFFFBFF
	Mem0[x1 + 3168:word32] = w2
	// succ:  l00000000004A3A1C
l00000000004A3A1C:
	x29 = Mem0[sp:word64]
	sp = sp + 8
	x30 = Mem0[sp:word64]
	sp = sp + 16
	return
	// succ:  _rl_arg_overflow_exit
_rl_arg_overflow_exit:


// _rl_arg_init
// Return size: 0
void _rl_arg_init()
_rl_arg_init_entry:
	// succ:  l00000000004A3A24
l00000000004A3A24:
	sp = fp
	sp = sp + -16
	Mem0[sp:word64] = x29
	sp = sp + 8
	Mem0[sp:word64] = x30
	x29 = x31 + 0x0000000000000000
	call rl_save_prompt (retsize: 0;)
	x0 = 0x00000000004E1000
	w1 = Mem0[x0 + 3168:word32]
	x2 = 0x00000000004E4000
	w1 = w1 | 0x00000400
	Mem0[x2 + 376:word32] = 0x00000000
	Mem0[x0 + 3168:word32] = w1
	x29 = Mem0[sp:word64]
	sp = sp + 8
	x30 = Mem0[sp:word64]
	sp = sp + 16
	return
	// succ:  _rl_arg_init_exit
_rl_arg_init_exit:


// _rl_arg_getchar
// Return size: 0
void _rl_arg_getchar()
_rl_arg_getchar_entry:
	// succ:  l00000000004A3A50
l00000000004A3A50:
	sp = fp
	sp = sp + -32
	Mem0[sp:word64] = x29
	sp = sp + 8
	Mem0[sp:word64] = x30
	x29 = x31 + 0x0000000000000000
	x0 = 0x00000000004D9000
	w1 = Mem0[x0 + 1220:word32]
	x0 = 0x00000000004D9000
	w0 = Mem0[x0 + 1216:word32]
	Mem0[sp + 16:word64] = x19
	w1 = w1 * w0
	x0 = 0x00000000004C5000
	x0 = x0 + 0x0000000000000038
	call rl_message (retsize: 0;)
	x19 = 0x00000000004E1000
	w0 = Mem0[x19 + 3168:word32]
	w0 = w0 | 0x00000040
	Mem0[x19 + 3168:word32] = w0
	call rl_read_key (retsize: 0;)
	w1 = Mem0[x19 + 3168:word32]
	w1 = w1 & 0xFFFFFFBF
	Mem0[x19 + 3168:word32] = w1
	x19 = Mem0[sp + 16:word64]
	x29 = Mem0[sp:word64]
	sp = sp + 8
	x30 = Mem0[sp:word64]
	sp = sp + 32
	return
	// succ:  _rl_arg_getchar_exit
_rl_arg_getchar_exit:


// _rl_arg_dispatch
// Return size: 0
void _rl_arg_dispatch()
_rl_arg_dispatch_entry:
	// succ:  l00000000004A3AA8
l00000000004A3AA8:
	sp = fp
	sp = sp + -64
	Mem0[sp:word64] = x29
	sp = sp + 8
	Mem0[sp:word64] = x30
	x29 = x31 + 0x0000000000000000
	v8 = sp + 16
	Mem0[v8:word64] = x19
	v8 = v8 + 8
	Mem0[v8:word64] = x20
	x20 = 0x00000000004D9000
	x2 = Mem0[x20 + 1200:word64]
	Mem0[sp + 32:word64] = x21
	w19 = w1
_rl_arg_dispatch_exit:


// fn00000000004A3C98
// Return size: 0
void fn00000000004A3C98()
fn00000000004A3C98_entry:
	// succ:  l00000000004A3C98
l00000000004A3C98:
	sp = fp
	sp = sp + -32
	Mem0[sp:word64] = x29
	sp = sp + 8
	Mem0[sp:word64] = x30
	x29 = x31 + 0x0000000000000000
	v8 = sp + 16
	Mem0[v8:word64] = x19
	v8 = v8 + 8
	Mem0[v8:word64] = x20
	x19 = 0x00000000004E4000
	x20 = 0x00000000004E1000
	x19 = x19 + 0x0000000000000178
	x20 = x20 + 0xFFFFFFFFFFFFFC60
	goto l00000000004A3CDC
	// succ:  l00000000004A3CDC
l00000000004A3C98:
l00000000004A3CB8:
	call _rl_arg_getchar (retsize: 0;)
	w1 = w0
	branch (w0 & 0x00000000) == 0x00000000 l00000000004A3CF4
	// succ:  l00000000004A3CC4 l00000000004A3CF4
l00000000004A3CC4:
	w0 = Mem0[x19:word32]
	call _rl_arg_dispatch (retsize: 0;)
	NZCV = cond(w0 - w31)
	branch Test(LE,ZCV) l00000000004A3CE8
	// succ:  l00000000004A3CD4 l00000000004A3CE8
l00000000004A3CD4:
	w1 = Mem0[x20:word32]
	branch (w1 & 0x00000400) == 0x00000000 l00000000004A3CE8
	// succ:  l00000000004A3CDC l00000000004A3CE8
l00000000004A3CDC:
	call _rl_arg_overflow (retsize: 0;)
	branch w0 == 0x00000000 l00000000004A3CB8
	// succ:  l00000000004A3CE4 l00000000004A3CB8
l00000000004A3CE4:
	w0 = 0x00000001
	// succ:  l00000000004A3CE8
l00000000004A3CE8:
	v10 = sp + 16
	x19 = Mem0[v10:word64]
	v10 = v10 + 8
	x20 = Mem0[v10:word64]
	x29 = Mem0[sp:word64]
	sp = sp + 8
	x30 = Mem0[sp:word64]
	sp = sp + 32
	return
	// succ:  fn00000000004A3C98_exit
l00000000004A3CF4:
	call _rl_abort_internal (retsize: 0;)
	w0 = 0xFFFFFFFF
	v15 = sp + 16
	x19 = Mem0[v15:word64]
	v15 = v15 + 8
	x20 = Mem0[v15:word64]
	x29 = Mem0[sp:word64]
	sp = sp + 8
	x30 = Mem0[sp:word64]
	sp = sp + 32
	return
	// succ:  fn00000000004A3C98_exit
fn00000000004A3C98_exit:


// rl_universal_argument
// Return size: 0
void rl_universal_argument()
rl_universal_argument_entry:
	// succ:  l00000000004A3D08
l00000000004A3D08:
	sp = fp
	sp = sp + -16
	Mem0[sp:word64] = x29
	sp = sp + 8
	Mem0[sp:word64] = x30
	x29 = x31 + 0x0000000000000000
	call rl_save_prompt (retsize: 0;)
	x2 = 0x00000000004E1000
	x1 = 0x00000000004D9000
	w0 = Mem0[x2 + 3168:word32]
	w3 = Mem0[x1 + 1216:word32]
	w4 = w0 | 0x00000400
rl_universal_argument_exit:


// _rl_reset_argument
// Return size: 0
void _rl_reset_argument()
_rl_reset_argument_entry:
	// succ:  l00000000004A3D54
l00000000004A3D54:
	sp = fp
	w0 = 0x00000001
	x1 = 0x00000000004D9000
	Mem0[x1 + 1220:word32] = w0
	x1 = 0x00000000004D9000
	Mem0[x1 + 1216:word32] = w0
	x0 = 0x00000000004E1000
	Mem0[x0 + 3332:word32] = 0x00000000
	x0 = 0x00000000004E4000
	Mem0[x0 + 376:word32] = 0x00000000
	return
	// succ:  _rl_reset_argument_exit
_rl_reset_argument_exit:


// rl_digit_argument
// Return size: 0
void rl_digit_argument()
rl_digit_argument_entry:
	// succ:  l00000000004A3D7C
l00000000004A3D7C:
	sp = fp
	sp = sp + -32
	Mem0[sp:word64] = x29
	sp = sp + 8
	Mem0[sp:word64] = x30
	x29 = x31 + 0x0000000000000000
	Mem0[x29 + 16:word64] = x1
	call rl_save_prompt (retsize: 0;)
	x3 = 0x00000000004E1000
	w2 = Mem0[x3 + 3168:word32]
	x4 = 0x00000000004E4000
	w0 = w2 | 0x00000400
	Mem0[x4 + 376:word32] = 0x00000000
	Mem0[x3 + 3168:word32] = w0
	x1 = Mem0[x29 + 16:word64]
	branch (w2 & 0x00000000) == 0x00000000 l00000000004A3DBC
	// succ:  l00000000004A3DAC l00000000004A3DBC
l00000000004A3DAC:
	w0 = w1
	call rl_execute_next (retsize: 0;)
	x29 = Mem0[sp:word64]
	sp = sp + 8
	x30 = Mem0[sp:word64]
	sp = sp + 32
	// succ:  l00000000004A3DB8_thunk_fn00000000004A3C98
l00000000004A3DB8_thunk_fn00000000004A3C98:
	call fn00000000004A3C98 (retsize: 0;)
	return
	// succ:  rl_digit_argument_exit
l00000000004A3DBC:
	w0 = 0x00000000
	call _rl_arg_dispatch (retsize: 0;)
	x0 = 0x00000000004D9000
	w2 = Mem0[x0 + 1220:word32]
	x0 = 0x00000000004D9000
	w1 = Mem0[x0 + 1216:word32]
	x0 = 0x00000000004C5000
	w1 = w2 * w1
	x0 = x0 + 0x0000000000000038
	call rl_message (retsize: 0;)
	w0 = 0x00000000
	x29 = Mem0[sp:word64]
	sp = sp + 8
	x30 = Mem0[sp:word64]
	sp = sp + 32
	return
	// succ:  rl_digit_argument_exit
rl_digit_argument_exit:


// _rl_arg_callback
// Return size: 0
void _rl_arg_callback()
_rl_arg_callback_entry:
	// succ:  l00000000004A3DF0
l00000000004A3DF0:
	sp = fp
	sp = sp + -48
	Mem0[sp:word64] = x29
	sp = sp + 8
	Mem0[sp:word64] = x30
	x29 = x31 + 0x0000000000000000
	Mem0[sp + 16:word64] = x19
	w19 = w0
	call _rl_arg_getchar (retsize: 0;)
	x3 = 0x00000000004E4000
	w2 = Mem0[x3 + 376:word32]
	w1 = w0
	branch (w2 & 0x00000004) == 0x00000000 l00000000004A3E30
	// succ:  l00000000004A3E14 l00000000004A3E30
l00000000004A3E14:
	w0 = w19
	call _rl_arg_dispatch (retsize: 0;)
	w31 = w0 - 0x00000001
	NZCV = cond(w31)
	w0 = (word32) Test(NE,Z)
	x19 = Mem0[sp + 16:word64]
	x29 = Mem0[sp:word64]
	sp = sp + 8
	x30 = Mem0[sp:word64]
	sp = sp + 48
	return
	// succ:  _rl_arg_callback_exit
l00000000004A3E30:
	w2 = w2 & 0xFFFFFFFB
	Mem0[x3 + 376:word32] = w2
	Mem0[x29 + 32:word64] = x1
	call rl_restore_prompt (retsize: 0;)
	call rl_clear_message (retsize: 0;)
	x2 = 0x00000000004E1000
	w3 = Mem0[x2 + 3168:word32]
	x1 = Mem0[x29 + 32:word64]
	w3 = w3 & 0xFFFFFBFF
	w0 = w1
	Mem0[x2 + 3168:word32] = w3
	call rl_execute_next (retsize: 0;)
	w0 = 0x00000000
	x19 = Mem0[sp + 16:word64]
	x29 = Mem0[sp:word64]
	sp = sp + 8
	x30 = Mem0[sp:word64]
	sp = sp + 48
	return
	// succ:  _rl_arg_callback_exit
_rl_arg_callback_exit:


// rl_discard_argument
// Return size: 0
void rl_discard_argument()
rl_discard_argument_entry:
	// succ:  l00000000004A3E70
l00000000004A3E70:
	sp = fp
	sp = sp + -16
	Mem0[sp:word64] = x29
	sp = sp + 8
	Mem0[sp:word64] = x30
	x29 = x31 + 0x0000000000000000
	call rl_ding (retsize: 0;)
	call rl_clear_message (retsize: 0;)
	w0 = 0x00000001
	x1 = 0x00000000004D9000
	Mem0[x1 + 1220:word32] = w0
	x1 = 0x00000000004D9000
	Mem0[x1 + 1216:word32] = w0
	x0 = 0x00000000004E1000
	Mem0[x0 + 3332:word32] = 0x00000000
	x0 = 0x00000000004E4000
	Mem0[x0 + 376:word32] = 0x00000000
	x29 = Mem0[sp:word64]
	sp = sp + 8
	x30 = Mem0[sp:word64]
	sp = sp + 16
	w0 = 0x00000000
	return
	// succ:  rl_discard_argument_exit
rl_discard_argument_exit:


// _rl_free_history_entry
// Return size: 0
void _rl_free_history_entry()
_rl_free_history_entry_entry:
	// succ:  l00000000004A3EB0
l00000000004A3EB0:
	sp = fp
	sp = sp + -32
	Mem0[sp:word64] = x29
	sp = sp + 8
	Mem0[sp:word64] = x30
	x29 = x31 + 0x0000000000000000
	Mem0[sp + 16:word64] = x19
	x19 = x0
	branch x0 == 0x0000000000000000 l00000000004A3EEC
	// succ:  l00000000004A3EC4 l00000000004A3EEC
l00000000004A3EC4:
	x0 = Mem0[x0:word64]
	branch x0 == 0x0000000000000000 l00000000004A3ED0
	// succ:  l00000000004A3ECC l00000000004A3ED0
l00000000004A3ECC:
	call free (retsize: 0;)
	// succ:  l00000000004A3ED0
l00000000004A3ED0:
	x0 = Mem0[x19 + 8:word64]
	branch x0 == 0x0000000000000000 l00000000004A3EDC
	// succ:  l00000000004A3ED8 l00000000004A3EDC
l00000000004A3ED8:
	call free (retsize: 0;)
	// succ:  l00000000004A3EDC
l00000000004A3EDC:
	x0 = x19
	x19 = Mem0[sp + 16:word64]
	x29 = Mem0[sp:word64]
	sp = sp + 8
	x30 = Mem0[sp:word64]
	sp = sp + 32
	// succ:  l00000000004A3EE8_thunk_xfree
l00000000004A3EE8_thunk_xfree:
	call xfree (retsize: 0;)
	return
	// succ:  _rl_free_history_entry_exit
l00000000004A3EEC:
	x19 = Mem0[sp + 16:word64]
	x29 = Mem0[sp:word64]
	sp = sp + 8
	x30 = Mem0[sp:word64]
	sp = sp + 32
	return
	// succ:  _rl_free_history_entry_exit
_rl_free_history_entry_exit:


// _rl_start_using_history
// Return size: 0
void _rl_start_using_history()
_rl_start_using_history_entry:
	// succ:  l00000000004A3EF8
l00000000004A3EF8:
	sp = fp
	sp = sp + -32
	Mem0[sp:word64] = x29
	sp = sp + 8
	Mem0[sp:word64] = x30
	x29 = x31 + 0x0000000000000000
	Mem0[sp + 16:word64] = x19
	call using_history (retsize: 0;)
	x19 = 0x00000000004E2000
	x0 = x19 + 0xFFFFFFFFFFFFFF10
	x0 = Mem0[x0 + 8:word64]
	branch x0 == 0x0000000000000000 l00000000004A3F1C
	// succ:  l00000000004A3F18 l00000000004A3F1C
l00000000004A3F18:
	call _rl_free_history_entry (retsize: 0;)
	// succ:  l00000000004A3F1C
l00000000004A3F1C:
	x19 = x19 + 0xFFFFFFFFFFFFFF10
	Mem0[x19 + 8:word64] = 0x0000000000000000
	x19 = Mem0[sp + 16:word64]
	x29 = Mem0[sp:word64]
	sp = sp + 8
	x30 = Mem0[sp:word64]
	sp = sp + 32
	return
	// succ:  _rl_start_using_history_exit
_rl_start_using_history_exit:


// rl_maybe_replace_line
// Return size: 0
void rl_maybe_replace_line()
rl_maybe_replace_line_entry:
	// succ:  l00000000004A3F30
l00000000004A3F30:
	sp = fp
	sp = sp + -32
	Mem0[sp:word64] = x29
	sp = sp + 8
	Mem0[sp:word64] = x30
	x29 = x31 + 0x0000000000000000
	Mem0[sp + 16:word64] = x19
	call current_history (retsize: 0;)
	branch x0 == 0x0000000000000000 l00000000004A3F8C
	// succ:  l00000000004A3F44 l00000000004A3F8C
l00000000004A3F44:
	x19 = 0x00000000004E2000
	x1 = Mem0[x0 + 16:word64]
	x0 = Mem0[x19 + 2728:word64]
	x31 = x1 - x0
	NZCV = cond(x31)
	branch Test(EQ,Z) l00000000004A3F8C
	// succ:  l00000000004A3F58 l00000000004A3F8C
l00000000004A3F58:
	call where_history (retsize: 0;)
	x1 = 0x00000000004E1000
	x2 = Mem0[x19 + 2728:word64]
	x1 = Mem0[x1 + 3256:word64]
	call replace_history_entry (retsize: 0;)
	x19 = x0
	x0 = Mem0[x0:word64]
	call xfree (retsize: 0;)
	x0 = Mem0[x19 + 8:word64]
	branch x0 == 0x0000000000000000 l00000000004A3F84
	// succ:  l00000000004A3F80 l00000000004A3F84
l00000000004A3F80:
	call free (retsize: 0;)
	// succ:  l00000000004A3F84
l00000000004A3F84:
	x0 = x19
	call xfree (retsize: 0;)
	// succ:  l00000000004A3F8C
l00000000004A3F8C:
	w0 = 0x00000000
	x19 = Mem0[sp + 16:word64]
	x29 = Mem0[sp:word64]
	sp = sp + 8
	x30 = Mem0[sp:word64]
	sp = sp + 32
	return
	// succ:  rl_maybe_replace_line_exit
rl_maybe_replace_line_exit:


// rl_maybe_unsave_line
// Return size: 0
void rl_maybe_unsave_line()
rl_maybe_unsave_line_entry:
	// succ:  l00000000004A3F9C
l00000000004A3F9C:
	sp = fp
	sp = sp + -32
	Mem0[sp:word64] = x29
	sp = sp + 8
	Mem0[sp:word64] = x30
	x29 = x31 + 0x0000000000000000
	Mem0[sp + 16:word64] = x19
	x19 = 0x00000000004E2000
	x19 = x19 + 0xFFFFFFFFFFFFFF10
	x0 = Mem0[x19 + 8:word64]
	branch x0 == 0x0000000000000000 l00000000004A3FFC
	// succ:  l00000000004A3FB8 l00000000004A3FFC
l00000000004A3FB8:
	x0 = Mem0[x0:word64]
	w1 = 0x00000000
	call rl_replace_line (retsize: 0;)
	x0 = Mem0[x19 + 8:word64]
	x1 = 0x00000000004E2000
	x2 = Mem0[x0 + 16:word64]
	Mem0[x1 + 2728:word64] = x2
	call _rl_free_history_entry (retsize: 0;)
	x0 = 0x00000000004E3000
	w1 = Mem0[x0 + 3900:word32]
	x0 = 0x00000000004E4000
	Mem0[x19 + 8:word64] = 0x0000000000000000
	Mem0[x0 + 136:word32] = w1
	x19 = Mem0[sp + 16:word64]
	w0 = 0x00000000
	x29 = Mem0[sp:word64]
	sp = sp + 8
	x30 = Mem0[sp:word64]
	sp = sp + 32
	return
	// succ:  rl_maybe_unsave_line_exit
l00000000004A3FFC:
	call rl_ding (retsize: 0;)
	w0 = 0x00000000
	x19 = Mem0[sp + 16:word64]
	x29 = Mem0[sp:word64]
	sp = sp + 8
	x30 = Mem0[sp:word64]
	sp = sp + 32
	return
	// succ:  rl_maybe_unsave_line_exit
rl_maybe_unsave_line_exit:


// rl_maybe_save_line
// Return size: 0
void rl_maybe_save_line()
rl_maybe_save_line_entry:
	// succ:  l00000000004A4010
l00000000004A4010:
	sp = fp
	sp = sp + -48
	Mem0[sp:word64] = x29
	sp = sp + 8
	Mem0[sp:word64] = x30
	x29 = x31 + 0x0000000000000000
	v8 = sp + 16
	Mem0[v8:word64] = x19
	v8 = v8 + 8
	Mem0[v8:word64] = x20
	x19 = 0x00000000004E2000
	x19 = x19 + 0xFFFFFFFFFFFFFF10
	x20 = Mem0[x19 + 8:word64]
	v11 = sp + 32
	Mem0[v11:word64] = x21
	v11 = v11 + 8
	Mem0[v11:word64] = x22
	branch x20 == 0x0000000000000000 l00000000004A4044
	// succ:  l00000000004A4030 l00000000004A4044
l00000000004A4030:
	w0 = 0x00000000
	v13 = sp + 16
	x19 = Mem0[v13:word64]
	v13 = v13 + 8
	x20 = Mem0[v13:word64]
	v14 = sp + 32
	x21 = Mem0[v14:word64]
	v14 = v14 + 8
	x22 = Mem0[v14:word64]
	x29 = Mem0[sp:word64]
	sp = sp + 8
	x30 = Mem0[sp:word64]
	sp = sp + 48
	return
	// succ:  rl_maybe_save_line_exit
l00000000004A4044:
	x0 = 0x0000000000000018
	call xmalloc (retsize: 0;)
	x22 = 0x00000000004E1000
	x21 = x0
	x0 = Mem0[x22 + 3256:word64]
	Mem0[x19 + 8:word64] = x21
	strlen(x0)
	sp = sp + 0xFFFFFFFFFFFFFFF8
	x0 = x0 + 0x0000000000000001
	call xmalloc (retsize: 0;)
	x1 = Mem0[x22 + 3256:word64]
	strcpy(x0, x1)
	sp = sp + 0xFFFFFFFFFFFFFFF8
	x2 = 0x00000000004E2000
	x1 = Mem0[x19 + 8:word64]
	x2 = Mem0[x2 + 2728:word64]
	Mem0[x21:word64] = x0
	Mem0[x1 + 8:word64] = x20
	Mem0[x1 + 16:word64] = x2
	w0 = 0x00000000
	v18 = sp + 16
	x19 = Mem0[v18:word64]
	v18 = v18 + 8
	x20 = Mem0[v18:word64]
	v19 = sp + 32
	x21 = Mem0[v19:word64]
	v19 = v19 + 8
	x22 = Mem0[v19:word64]
	x29 = Mem0[sp:word64]
	sp = sp + 8
	x30 = Mem0[sp:word64]
	sp = sp + 48
	return
	// succ:  rl_maybe_save_line_exit
rl_maybe_save_line_exit:


// _rl_free_saved_history_line
// Return size: 0
void _rl_free_saved_history_line()
_rl_free_saved_history_line_entry:
	// succ:  l00000000004A409C
l00000000004A409C:
	sp = fp
	sp = sp + -32
	Mem0[sp:word64] = x29
	sp = sp + 8
	Mem0[sp:word64] = x30
	x29 = x31 + 0x0000000000000000
	Mem0[sp + 16:word64] = x19
	x19 = 0x00000000004E2000
	x19 = x19 + 0xFFFFFFFFFFFFFF10
	x0 = Mem0[x19 + 8:word64]
	branch x0 == 0x0000000000000000 l00000000004A40C0
	// succ:  l00000000004A40B8 l00000000004A40C0
l00000000004A40B8:
	call _rl_free_history_entry (retsize: 0;)
	Mem0[x19 + 8:word64] = 0x0000000000000000
	// succ:  l00000000004A40C0
l00000000004A40C0:
	w0 = 0x00000000
	x19 = Mem0[sp + 16:word64]
	x29 = Mem0[sp:word64]
	sp = sp + 8
	x30 = Mem0[sp:word64]
	sp = sp + 32
	return
	// succ:  _rl_free_saved_history_line_exit
_rl_free_saved_history_line_exit:


// rl_replace_from_history
// Return size: 0
void rl_replace_from_history()
rl_replace_from_history_entry:
	// succ:  l00000000004A40D0
l00000000004A40D0:
	sp = fp
	sp = sp + -32
	Mem0[sp:word64] = x29
	sp = sp + 8
	Mem0[sp:word64] = x30
	x29 = x31 + 0x0000000000000000
	Mem0[sp + 16:word64] = x19
	x19 = x0
	x0 = Mem0[x0:word64]
	w1 = 0x00000000
	call rl_replace_line (retsize: 0;)
	x0 = 0x00000000004E3000
	w1 = Mem0[x0 + 3900:word32]
	x5 = Mem0[x19 + 16:word64]
	x3 = 0x00000000004D9000
	x2 = 0x00000000004E4000
	x0 = 0x00000000004E4000
	x4 = 0x00000000004E2000
	w3 = Mem0[x3 + 1208:word32]
	Mem0[x4 + 2728:word64] = x5
	Mem0[x2 + 136:word32] = w1
	Mem0[x0 + 120:word32] = 0x00000000
	branch w3 != 0x00000000 l00000000004A4124
	// succ:  l00000000004A411C l00000000004A4124
l00000000004A411C:
	Mem0[x2 + 136:word32] = w3
	Mem0[x0 + 120:word32] = w1
	// succ:  l00000000004A4124
l00000000004A4124:
	x19 = Mem0[sp + 16:word64]
	x29 = Mem0[sp:word64]
	sp = sp + 8
	x30 = Mem0[sp:word64]
	sp = sp + 32
	return
	// succ:  rl_replace_from_history_exit
rl_replace_from_history_exit:


// _rl_revert_all_lines
// Return size: 0
void _rl_revert_all_lines()
_rl_revert_all_lines_entry:
	// succ:  l00000000004A4130
l00000000004A4130:
	sp = fp
	sp = sp + -64
	Mem0[sp:word64] = x29
	sp = sp + 8
	Mem0[sp:word64] = x30
	x29 = x31 + 0x0000000000000000
	v8 = sp + 32
	Mem0[v8:word64] = x21
	v8 = v8 + 8
	Mem0[v8:word64] = x22
	x22 = 0x00000000004E1000
	x0 = Mem0[x22 + 3256:word64]
	v12 = sp + 48
	Mem0[v12:word64] = x23
	v12 = v12 + 8
	Mem0[v12:word64] = x24
	v15 = sp + 16
	Mem0[v15:word64] = x19
	v15 = v15 + 8
	Mem0[v15:word64] = x20
	strlen(x0)
	sp = sp + 0xFFFFFFFFFFFFFFF8
	x0 = x0 + 0x0000000000000001
	call xmalloc (retsize: 0;)
	x1 = Mem0[x22 + 3256:word64]
	x19 = 0x00000000004E2000
	strcpy(x0, x1)
	sp = sp + 0xFFFFFFFFFFFFFFF8
	x23 = x0
	x21 = Mem0[x19 + 2728:word64]
	call where_history (retsize: 0;)
	w24 = w0
	x0 = 0x00000000004E4000
	w0 = Mem0[x0 + 392:word32]
	NZCV = cond(w24 - w0)
	branch Test(EQ,Z) l00000000004A41EC
	// succ:  l00000000004A4184 l00000000004A41EC
l00000000004A4184:
	call current_history (retsize: 0;)
	x20 = x0
	branch x20 == 0x0000000000000000 l00000000004A41F8
	// succ:  l00000000004A4190 l00000000004A41F8
l00000000004A4190:
	x1 = Mem0[x20 + 16:word64]
	branch x1 == 0x0000000000000000 l00000000004A41EC
	// succ:  l00000000004A4198 l00000000004A41EC
l00000000004A4198:
	x31 = x1 - x21
	NZCV = cond(x31)
	x0 = x20
	w1 = 0x00000000
l00000000004A41EC:
	call previous_history (retsize: 0;)
	x20 = x0
	branch x20 != 0x0000000000000000 l00000000004A4190
	// succ:  l00000000004A41F8 l00000000004A4190
l00000000004A41F8:
	w0 = w24
	Mem0[x19 + 2728:word64] = x21
	call history_set_pos (retsize: 0;)
	x0 = x23
	w1 = 0x00000000
	call rl_replace_line (retsize: 0;)
	call _rl_set_the_line (retsize: 0;)
	x0 = x23
	v22 = sp + 16
	x19 = Mem0[v22:word64]
	v22 = v22 + 8
	x20 = Mem0[v22:word64]
	v23 = sp + 32
	x21 = Mem0[v23:word64]
	v23 = v23 + 8
	x22 = Mem0[v23:word64]
	v24 = sp + 48
	x23 = Mem0[v24:word64]
	v24 = v24 + 8
	x24 = Mem0[v24:word64]
	x29 = Mem0[sp:word64]
	sp = sp + 8
	x30 = Mem0[sp:word64]
	sp = sp + 64
	// succ:  l00000000004A4228_thunk_xfree
l00000000004A4228_thunk_xfree:
	call xfree (retsize: 0;)
	return
	// succ:  _rl_revert_all_lines_exit
_rl_revert_all_lines_exit:


// rl_end_of_history
// Return size: 0
void rl_end_of_history()
rl_end_of_history_entry:
	// succ:  l00000000004A422C
l00000000004A422C:
	sp = fp
	sp = sp + -16
	Mem0[sp:word64] = x29
	sp = sp + 8
	Mem0[sp:word64] = x30
	x29 = x31 + 0x0000000000000000
	call rl_maybe_replace_line (retsize: 0;)
	call using_history (retsize: 0;)
	call rl_maybe_unsave_line (retsize: 0;)
	w0 = 0x00000000
	x29 = Mem0[sp:word64]
	sp = sp + 8
	x30 = Mem0[sp:word64]
	sp = sp + 16
	return
	// succ:  rl_end_of_history_exit
rl_end_of_history_exit:


// rl_get_previous_history
// Return size: 0
void rl_get_previous_history()
rl_get_previous_history_entry:
	// succ:  l00000000004A424C
l00000000004A424C:
	sp = fp
	sp = sp + -32
	Mem0[sp:word64] = x29
	sp = sp + 8
	Mem0[sp:word64] = x30
	x29 = x31 + 0x0000000000000000
	v6 = sp + 16
	Mem0[v6:word64] = x19
	v6 = v6 + 8
	Mem0[v6:word64] = x20
	NZCV = cond(w0 - w31)
	w19 = w0
	branch Test(LT,NV) l00000000004A42EC
	// succ:  l00000000004A4264 l00000000004A42EC
l00000000004A4264:
	branch Test(EQ,Z) l00000000004A42AC
	// succ:  l00000000004A4268 l00000000004A42AC
l00000000004A4268:
	x0 = 0x00000000004DE000
	x1 = x0 + 0x0000000000000600
	w1 = Mem0[x1:word32]
	w31 = w1 + 0x00000001
	NZCV = cond(w31)
	branch Test(EQ,Z) l00000000004A42C8
	// succ:  l00000000004A427C l00000000004A42C8
l00000000004A427C:
	call rl_maybe_save_line (retsize: 0;)
	call rl_maybe_replace_line (retsize: 0;)
	x20 = 0x0000000000000000
	goto l00000000004A4290
	// succ:  l00000000004A4290
l00000000004A428C:
	x20 = x0
	// succ:  l00000000004A4290
l00000000004A4290:
	call previous_history (retsize: 0;)
	w19 = w19 - 0x00000001
	NZCV = cond(w19)
	branch x0 == 0x0000000000000000 l00000000004A42BC
	// succ:  l00000000004A429C l00000000004A42BC
l00000000004A429C:
	branch Test(NE,Z) l00000000004A428C
	// succ:  l00000000004A42A0 l00000000004A428C
l00000000004A42A0:
	w1 = 0x00000000
	call rl_replace_from_history (retsize: 0;)
	call fn00000000004A391C (retsize: 0;)
	// succ:  l00000000004A42AC
l00000000004A42AC:
	w0 = 0x00000000
	v18 = sp + 16
	x19 = Mem0[v18:word64]
	v18 = v18 + 8
	x20 = Mem0[v18:word64]
	x29 = Mem0[sp:word64]
	sp = sp + 8
	x30 = Mem0[sp:word64]
	sp = sp + 32
	return
	// succ:  rl_get_previous_history_exit
l00000000004A42BC:
	branch x20 == 0x0000000000000000 l00000000004A4308
	// succ:  l00000000004A42C0 l00000000004A4308
l00000000004A42C0:
	x0 = x20
	goto l00000000004A42A0
	// succ:  l00000000004A42A0
l00000000004A42C8:
	x1 = 0x00000000004E4000
	w1 = Mem0[x1 + 136:word32]
	x2 = 0x00000000004E3000
	w2 = Mem0[x2 + 3900:word32]
	branch w1 != 0x00000000 l00000000004A42FC
	// succ:  l00000000004A42DC l00000000004A42FC
l00000000004A42DC:
	branch w2 == 0x00000000 l00000000004A427C
	// succ:  l00000000004A42E0 l00000000004A427C
l00000000004A42E0:
	x0 = x0 + 0x0000000000000600
	Mem0[x0:word32] = w1
	goto l00000000004A427C
	// succ:  l00000000004A427C
l00000000004A42EC:
	v21 = sp + 16
	x19 = Mem0[v21:word64]
	v21 = v21 + 8
	x20 = Mem0[v21:word64]
	x29 = Mem0[sp:word64]
	sp = sp + 8
	x30 = Mem0[sp:word64]
	sp = sp + 32
	w0 = w31 - w0
	// succ:  l00000000004A42F8_thunk_rl_get_next_history
l00000000004A42F8_thunk_rl_get_next_history:
	call rl_get_next_history (retsize: 0;)
	return
	// succ:  rl_get_previous_history_exit
l00000000004A42FC:
	NZCV = cond(w1 - w2)
l00000000004A4308:
	call rl_ding (retsize: 0;)
	goto l00000000004A42AC
	// succ:  l00000000004A42AC
rl_get_previous_history_exit:


// rl_beginning_of_history
// Return size: 0
void rl_beginning_of_history()
rl_beginning_of_history_entry:
	// succ:  l00000000004A4310
l00000000004A4310:
	sp = fp
	sp = sp + -32
	Mem0[sp:word64] = x29
	sp = sp + 8
	Mem0[sp:word64] = x30
	x29 = x31 + 0x0000000000000000
	Mem0[x29 + 16:word64] = x1
	call where_history (retsize: 0;)
	x1 = Mem0[x29 + 16:word64]
	x29 = Mem0[sp:word64]
	sp = sp + 8
	x30 = Mem0[sp:word64]
	sp = sp + 32
	w0 = w0 + 0x00000001
	// succ:  l00000000004A432C_thunk_rl_get_previous_history
l00000000004A432C_thunk_rl_get_previous_history:
	call rl_get_previous_history (retsize: 0;)
	return
	// succ:  rl_beginning_of_history_exit
rl_beginning_of_history_exit:


// rl_get_next_history
// Return size: 0
void rl_get_next_history()
rl_get_next_history_entry:
	// succ:  l00000000004A4330
l00000000004A4330:
	sp = fp
	sp = sp + -32
	Mem0[sp:word64] = x29
	sp = sp + 8
	Mem0[sp:word64] = x30
	x29 = x31 + 0x0000000000000000
	Mem0[sp + 16:word64] = x19
	NZCV = cond(w0 - w31)
	w19 = w0
	branch Test(LT,NV) l00000000004A43C4
	// succ:  l00000000004A4348 l00000000004A43C4
l00000000004A4348:
	branch Test(NE,Z) l00000000004A435C
	// succ:  l00000000004A434C l00000000004A435C
l00000000004A434C:
	w0 = 0x00000000
	x19 = Mem0[sp + 16:word64]
	x29 = Mem0[sp:word64]
	sp = sp + 8
	x30 = Mem0[sp:word64]
	sp = sp + 32
	return
	// succ:  rl_get_next_history_exit
l00000000004A435C:
	call rl_maybe_replace_line (retsize: 0;)
	x0 = 0x00000000004DE000
	x1 = x0 + 0x0000000000000600
	w1 = Mem0[x1:word32]
	w31 = w1 + 0x00000001
	NZCV = cond(w31)
	branch Test(EQ,Z) l00000000004A43A0
	// succ:  l00000000004A4374 l00000000004A43A0
l00000000004A4374:
	call next_history (retsize: 0;)
	w19 = w19 - 0x00000001
	NZCV = cond(w19)
	branch x0 == 0x0000000000000000 l00000000004A43E0
	// succ:  l00000000004A4380 l00000000004A43E0
l00000000004A4380:
	branch Test(NE,Z) l00000000004A4374
	// succ:  l00000000004A4384 l00000000004A4374
l00000000004A4384:
	w1 = w19
	call rl_replace_from_history (retsize: 0;)
	call fn00000000004A391C (retsize: 0;)
	w0 = 0x00000000
	x19 = Mem0[sp + 16:word64]
	x29 = Mem0[sp:word64]
	sp = sp + 8
	x30 = Mem0[sp:word64]
	sp = sp + 32
	return
	// succ:  rl_get_next_history_exit
l00000000004A43A0:
	x1 = 0x00000000004E4000
	w1 = Mem0[x1 + 136:word32]
	x2 = 0x00000000004E3000
	w2 = Mem0[x2 + 3900:word32]
	branch w1 != 0x00000000 l00000000004A43D4
	// succ:  l00000000004A43B4 l00000000004A43D4
l00000000004A43B4:
	branch w2 == 0x00000000 l00000000004A4374
	// succ:  l00000000004A43B8 l00000000004A4374
l00000000004A43B8:
	x0 = x0 + 0x0000000000000600
	Mem0[x0:word32] = w1
	goto l00000000004A4374
	// succ:  l00000000004A4374
l00000000004A43C4:
	x19 = Mem0[sp + 16:word64]
	x29 = Mem0[sp:word64]
	sp = sp + 8
	x30 = Mem0[sp:word64]
	sp = sp + 32
	w0 = w31 - w0
	// succ:  l00000000004A43D0_thunk_rl_get_previous_history
l00000000004A43D0_thunk_rl_get_previous_history:
	call rl_get_previous_history (retsize: 0;)
	return
	// succ:  rl_get_next_history_exit
l00000000004A43D4:
	NZCV = cond(w1 - w2)
l00000000004A43E0:
	call rl_maybe_unsave_line (retsize: 0;)
	goto l00000000004A434C
	// succ:  l00000000004A434C
rl_get_next_history_exit:


// rl_vi_editing_mode
// Return size: 0
void rl_vi_editing_mode()
rl_vi_editing_mode_entry:
	// succ:  l00000000004A43E8
l00000000004A43E8:
	sp = fp
	sp = sp + -16
	Mem0[sp:word64] = x29
	sp = sp + 8
	Mem0[sp:word64] = x30
	x29 = x31 + 0x0000000000000000
	w2 = 0x00000001
	x3 = 0x00000000004D9000
	Mem0[x3 + 1232:word32] = w2
	w0 = w2
	x2 = 0x00000000004D9000
	Mem0[x2 + 1208:word32] = 0x00000000
	call rl_vi_insert_mode (retsize: 0;)
	w0 = 0x00000000
	x29 = Mem0[sp:word64]
	sp = sp + 8
	x30 = Mem0[sp:word64]
	sp = sp + 16
	return
	// succ:  rl_vi_editing_mode_exit
rl_vi_editing_mode_exit:


// rl_emacs_editing_mode
// Return size: 0
void rl_emacs_editing_mode()
rl_emacs_editing_mode_entry:
	// succ:  l00000000004A4418
l00000000004A4418:
	sp = fp
	w0 = 0x00000001
	x1 = 0x00000000004D9000
	Mem0[x1 + 1208:word32] = w0
	x1 = 0x00000000004D9000
	Mem0[x1 + 1232:word32] = w0
	x1 = 0x00000000004DD000
	x1 = x1 + 0x0000000000000540
	x0 = 0x00000000004D9000
	Mem0[x0 + 1200:word64] = x1
	w0 = 0x00000000
	return
	// succ:  rl_emacs_editing_mode_exit
rl_emacs_editing_mode_exit:


// _rl_set_insert_mode
// Return size: 0
void _rl_set_insert_mode()
_rl_set_insert_mode_entry:
	// succ:  l00000000004A4444
l00000000004A4444:
	sp = fp
	x1 = 0x00000000004D9000
	Mem0[x1 + 1232:word32] = w0
	return
	// succ:  _rl_set_insert_mode_exit
_rl_set_insert_mode_exit:


// rl_overwrite_mode
// Return size: 0
void rl_overwrite_mode()
rl_overwrite_mode_entry:
	// succ:  l00000000004A4450
l00000000004A4450:
	sp = fp
	x1 = 0x00000000004E1000
	w1 = Mem0[x1 + 3332:word32]
	branch w1 == 0x00000000 l00000000004A4488
	// succ:  l00000000004A445C l00000000004A4488
l00000000004A445C:
	NZCV = cond(w0 - w31)
	branch Test(LE,ZCV) l00000000004A4474
	// succ:  l00000000004A4464 l00000000004A4474
l00000000004A4464:
	x0 = 0x00000000004D9000
	Mem0[x0 + 1232:word32] = 0x00000000
	w0 = 0x00000000
	return
	// succ:  rl_overwrite_mode_exit
l00000000004A4474:
	w1 = 0x00000001
	x0 = 0x00000000004D9000
	Mem0[x0 + 1232:word32] = w1
	w0 = 0x00000000
	return
	// succ:  rl_overwrite_mode_exit
l00000000004A4488:
	x0 = 0x00000000004D9000
	w1 = Mem0[x0 + 1232:word32]
	w1 = w1 ^ 0x00000001
	Mem0[x0 + 1232:word32] = w1
	w0 = 0x00000000
	return
	// succ:  rl_overwrite_mode_exit
rl_overwrite_mode_exit:


// history_get_history_state
// Return size: 0
void history_get_history_state()
history_get_history_state_entry:
	// succ:  l00000000004A44A0
l00000000004A44A0:
	sp = fp
	sp = sp + -16
	Mem0[sp:word64] = x29
	sp = sp + 8
	Mem0[sp:word64] = x30
	x29 = x31 + 0x0000000000000000
	x0 = 0x0000000000000018
	call xmalloc (retsize: 0;)
	x2 = 0x00000000004E4000
	x1 = 0x00000000004E2000
	x1 = x1 + 0xFFFFFFFFFFFFFF20
	w4 = Mem0[x2 + 388:word32]
	x2 = 0x00000000004E4000
	w3 = Mem0[x2 + 392:word32]
	x5 = Mem0[x1:word64]
	w2 = Mem0[x1 + 8:word32]
	w1 = Mem0[x1 + 12:word32]
	Mem0[x0:word64] = x5
	Mem0[x0 + 8:word32] = w4
	Mem0[x0 + 12:word32] = w3
	Mem0[x0 + 16:word32] = w2
	Mem0[x0 + 20:word32] = 0x00000000
	branch w1 == 0x00000000 l00000000004A44F4
	// succ:  l00000000004A44EC l00000000004A44F4
l00000000004A44EC:
	w1 = 0x00000001
	Mem0[x0 + 20:word32] = w1
	// succ:  l00000000004A44F4
l00000000004A44F4:
	x29 = Mem0[sp:word64]
	sp = sp + 8
	x30 = Mem0[sp:word64]
	sp = sp + 16
	return
	// succ:  history_get_history_state_exit
history_get_history_state_exit:


// history_set_history_state
// Return size: 0
void history_set_history_state()
history_set_history_state_entry:
	// succ:  l00000000004A44FC
l00000000004A44FC:
	sp = fp
	x3 = Mem0[x0:word64]
	x1 = 0x00000000004E2000
	w5 = Mem0[x0 + 8:word32]
	x1 = x1 + 0xFFFFFFFFFFFFFF20
	w4 = Mem0[x0 + 12:word32]
	w2 = Mem0[x0 + 16:word32]
	Mem0[x1:word64] = x3
	x3 = 0x00000000004E4000
	Mem0[x3 + 388:word32] = w5
	w0 = Mem0[x0 + 20:word32]
	x3 = 0x00000000004E4000
	Mem0[x3 + 392:word32] = w4
	Mem0[x1 + 8:word32] = w2
	branch (w0 & 0x00000001) == 0x00000000 l00000000004A453C
	// succ:  l00000000004A4534 l00000000004A453C
l00000000004A4534:
	w0 = 0x00000001
	Mem0[x1 + 12:word32] = w0
	// succ:  l00000000004A453C
l00000000004A453C:
	return
	// succ:  history_set_history_state_exit
history_set_history_state_exit:


// using_history
// Return size: 0
void using_history()
using_history_entry:
	// succ:  l00000000004A4540
l00000000004A4540:
	sp = fp
	x0 = 0x00000000004E4000
	w1 = Mem0[x0 + 392:word32]
	x0 = 0x00000000004E4000
	Mem0[x0 + 388:word32] = w1
	return
	// succ:  using_history_exit
using_history_exit:


// history_total_bytes
// Return size: 0
void history_total_bytes()
history_total_bytes_entry:
	// succ:  l00000000004A4554
l00000000004A4554:
	sp = fp
	sp = sp + -48
	Mem0[sp:word64] = x29
	sp = sp + 8
	Mem0[sp:word64] = x30
	x29 = x31 + 0x0000000000000000
	x0 = 0x00000000004E2000
	x0 = x0 + 0xFFFFFFFFFFFFFF20
	v9 = sp + 32
	Mem0[v9:word64] = x21
	v9 = v9 + 8
	Mem0[v9:word64] = x22
	x21 = Mem0[x0:word64]
	v12 = sp + 16
	Mem0[v12:word64] = x19
	v12 = v12 + 8
	Mem0[v12:word64] = x20
	branch x21 == 0x0000000000000000 l00000000004A45BC
	// succ:  l00000000004A4574 l00000000004A45BC
l00000000004A4574:
	x19 = Mem0[x21:word64]
	branch x19 == 0x0000000000000000 l00000000004A45C4
	// succ:  l00000000004A457C l00000000004A45C4
l00000000004A457C:
	x21 = x21 + 0x0000000000000008
	w20 = 0x00000000
	// succ:  l00000000004A4584
l00000000004A4584:
	x0 = Mem0[x19:word64]
	strlen(x0)
	sp = sp + 0xFFFFFFFFFFFFFFF8
	x22 = x0
	x0 = Mem0[x19 + 8:word64]
	strlen(x0)
	sp = sp + 0xFFFFFFFFFFFFFFF8
	x19 = Mem0[x21:word64]
	x21 = x21 + 8
	w0 = w0 + w22
	w20 = w0 + w20
	branch x19 != 0x0000000000000000 l00000000004A4584
	// succ:  l00000000004A45A8 l00000000004A4584
l00000000004A45A8:
	w0 = w20
	v16 = sp + 32
	x21 = Mem0[v16:word64]
	v16 = v16 + 8
	x22 = Mem0[v16:word64]
	v17 = sp + 16
	x19 = Mem0[v17:word64]
	v17 = v17 + 8
	x20 = Mem0[v17:word64]
	x29 = Mem0[sp:word64]
	sp = sp + 8
	x30 = Mem0[sp:word64]
	sp = sp + 48
	return
	// succ:  history_total_bytes_exit
l00000000004A45BC:
	w20 = w21
	goto l00000000004A45A8
	// succ:  l00000000004A45A8
l00000000004A45C4:
	w20 = w19
	goto l00000000004A45A8
	// succ:  l00000000004A45A8
history_total_bytes_exit:


// where_history
// Return size: 0
void where_history()
where_history_entry:
	// succ:  l00000000004A45CC
l00000000004A45CC:
	sp = fp
	x0 = 0x00000000004E4000
	w0 = Mem0[x0 + 388:word32]
	return
	// succ:  where_history_exit
where_history_exit:


// history_set_pos
// Return size: 0
void history_set_pos()
history_set_pos_entry:
	// succ:  l00000000004A45D8
l00000000004A45D8:
	sp = fp
	x1 = 0x00000000004E4000
	w1 = Mem0[x1 + 392:word32]
	NZCV = cond(w1 - w0)
	w1 = 0x00000000
	branch Test(LT,NV) l00000000004A460C
	// succ:  l00000000004A45EC l00000000004A460C
l00000000004A45EC:
	branch (w0 & 0x00000000) == 0x00000000 l00000000004A460C
	// succ:  l00000000004A45F0 l00000000004A460C
l00000000004A45F0:
	x2 = 0x00000000004E2000
	x2 = x2 + 0xFFFFFFFFFFFFFF20
	x2 = Mem0[x2:word64]
	branch x2 == 0x0000000000000000 l00000000004A460C
	// succ:  l00000000004A4600 l00000000004A460C
l00000000004A4600:
	x1 = 0x00000000004E4000
	Mem0[x1 + 388:word32] = w0
	w1 = 0x00000001
	// succ:  l00000000004A460C
l00000000004A460C:
	w0 = w1
	return
	// succ:  history_set_pos_exit
history_set_pos_exit:


// history_list
// Return size: 0
void history_list()
history_list_entry:
	// succ:  l00000000004A4614
l00000000004A4614:
	sp = fp
	x0 = 0x00000000004E2000
	x0 = x0 + 0xFFFFFFFFFFFFFF20
	x0 = Mem0[x0:word64]
	return
	// succ:  history_list_exit
history_list_exit:


// current_history
// Return size: 0
void current_history()
current_history_entry:
	// succ:  l00000000004A4624
l00000000004A4624:
	sp = fp
	x0 = 0x00000000004E4000
	w1 = Mem0[x0 + 388:word32]
	x0 = 0x00000000004E4000
	w0 = Mem0[x0 + 392:word32]
	NZCV = cond(w1 - w0)
	branch Test(EQ,Z) l00000000004A4654
	// succ:  l00000000004A463C l00000000004A4654
l00000000004A463C:
	x0 = 0x00000000004E2000
	x0 = x0 + 0xFFFFFFFFFFFFFF20
	x0 = Mem0[x0:word64]
	branch x0 == 0x0000000000000000 l00000000004A4650
	// succ:  l00000000004A464C l00000000004A4650
l00000000004A464C:
	x0 = Mem0[x0 + (int64) ((int32) w1):word64]
	// succ:  l00000000004A4650
l00000000004A4650:
	return
	// succ:  current_history_exit
l00000000004A4654:
	x0 = 0x0000000000000000
	return
	// succ:  current_history_exit
current_history_exit:


// previous_history
// Return size: 0
void previous_history()
previous_history_entry:
	// succ:  l00000000004A465C
l00000000004A465C:
	sp = fp
	x0 = 0x00000000004E4000
	w1 = Mem0[x0 + 388:word32]
	branch w1 == 0x00000000 l00000000004A4684
	// succ:  l00000000004A4668 l00000000004A4684
l00000000004A4668:
	x2 = 0x00000000004E2000
	x2 = x2 + 0xFFFFFFFFFFFFFF20
	x2 = Mem0[x2:word64]
	w1 = w1 - 0x00000001
	Mem0[x0 + 388:word32] = w1
	x0 = Mem0[x2 + (int64) ((int32) w1):word64]
	return
	// succ:  previous_history_exit
l00000000004A4684:
	x0 = 0x0000000000000000
	return
	// succ:  previous_history_exit
previous_history_exit:


// next_history
// Return size: 0
void next_history()
next_history_entry:
	// succ:  l00000000004A468C
l00000000004A468C:
	sp = fp
	x0 = 0x00000000004E4000
	x2 = 0x00000000004E4000
	w1 = Mem0[x0 + 388:word32]
	w2 = Mem0[x2 + 392:word32]
	NZCV = cond(w1 - w2)
	branch Test(EQ,Z) l00000000004A46C0
	// succ:  l00000000004A46A4 l00000000004A46C0
l00000000004A46A4:
	x2 = 0x00000000004E2000
	x2 = x2 + 0xFFFFFFFFFFFFFF20
	x2 = Mem0[x2:word64]
	w1 = w1 + 0x00000001
	Mem0[x0 + 388:word32] = w1
	x0 = Mem0[x2 + (int64) ((int32) w1):word64]
	return
	// succ:  next_history_exit
l00000000004A46C0:
	x0 = 0x0000000000000000
	return
	// succ:  next_history_exit
next_history_exit:


// history_get
// Return size: 0
void history_get()
history_get_entry:
	// succ:  l00000000004A46C8
l00000000004A46C8:
	sp = fp
	x1 = 0x00000000004DE000
	x1 = x1 + 0x0000000000000604
	w2 = Mem0[x1:word32]
	x1 = 0x00000000004E4000
	w1 = Mem0[x1 + 392:word32]
	w0 = w0 - w2
	NZCV = cond(w0 - w1)
	branch Test(GE,NZV) l00000000004A4704
	// succ:  l00000000004A46E8 l00000000004A4704
l00000000004A46E8:
	branch (w0 & 0x00000000) == 0x00000000 l00000000004A4704
	// succ:  l00000000004A46EC l00000000004A4704
l00000000004A46EC:
	x1 = 0x00000000004E2000
	x1 = x1 + 0xFFFFFFFFFFFFFF20
	x1 = Mem0[x1:word64]
	branch x1 == 0x0000000000000000 l00000000004A470C
	// succ:  l00000000004A46FC l00000000004A470C
l00000000004A46FC:
	x0 = Mem0[x1 + (int64) ((int32) w0):word64]
	return
	// succ:  history_get_exit
l00000000004A4704:
	x0 = 0x0000000000000000
	return
	// succ:  history_get_exit
l00000000004A470C:
	x0 = x1
	return
	// succ:  history_get_exit
history_get_exit:


// alloc_history_entry
// Return size: 0
void alloc_history_entry()
alloc_history_entry_entry:
	// succ:  l00000000004A4714
l00000000004A4714:
	sp = fp
	sp = sp + -48
	Mem0[sp:word64] = x29
	sp = sp + 8
	Mem0[sp:word64] = x30
	x29 = x31 + 0x0000000000000000
	v8 = sp + 16
	Mem0[v8:word64] = x19
	v8 = v8 + 8
	Mem0[v8:word64] = x20
	x20 = x0
	x0 = 0x0000000000000018
	Mem0[sp + 32:word64] = x21
	x21 = x1
	call xmalloc (retsize: 0;)
	x19 = x0
	x0 = x20
	branch x20 == 0x0000000000000000 l00000000004A4754
	// succ:  l00000000004A4740 l00000000004A4754
l00000000004A4740:
	strlen(x0)
	sp = sp + 0xFFFFFFFFFFFFFFF8
	x0 = x0 + 0x0000000000000001
	call xmalloc (retsize: 0;)
	x1 = x20
	strcpy(x0, x1)
	sp = sp + 0xFFFFFFFFFFFFFFF8
	// succ:  l00000000004A4754
l00000000004A4754:
	Mem0[x19:word64] = x0
	Mem0[x19 + 8:word64] = x21
	Mem0[x19 + 16:word64] = 0x0000000000000000
	x0 = x19
	x21 = Mem0[sp + 32:word64]
	v12 = sp + 16
	x19 = Mem0[v12:word64]
	v12 = v12 + 8
	x20 = Mem0[v12:word64]
	x29 = Mem0[sp:word64]
	sp = sp + 8
	x30 = Mem0[sp:word64]
	sp = sp + 48
	return
	// succ:  alloc_history_entry_exit
alloc_history_entry_exit:


// history_get_time
// Return size: 0
void history_get_time()
history_get_time_entry:
	// succ:  l00000000004A4774
l00000000004A4774:
	sp = fp
	branch x0 == 0x0000000000000000 l00000000004A4794
	// succ:  l00000000004A4778 l00000000004A4794
l00000000004A4778:
	x0 = Mem0[x0 + 8:word64]
	branch x0 == 0x0000000000000000 l00000000004A4794
	// succ:  l00000000004A4780 l00000000004A4794
l00000000004A4780:
	x1 = 0x00000000004E2000
	v6 = Mem0[x0:byte]
	w2 = (word32) v6
	v8 = Mem0[x1 + -208:byte]
	w1 = (word32) v8
	NZCV = cond(w2 - w1)
	branch Test(EQ,Z) l00000000004A479C
	// succ:  l00000000004A4794 l00000000004A479C
l00000000004A4794:
	x0 = 0x0000000000000000
	return
	// succ:  history_get_time_exit
l00000000004A479C:
	x0 = x0 + 0x0000000000000001
	x1 = 0x0000000000000000
	w2 = 0x0000000A
	strtol(x0)
	return
	// succ:  history_get_time_exit
history_get_time_exit:


// add_history_time
// Return size: 0
void add_history_time()
add_history_time_entry:
	// succ:  l00000000004A47AC
l00000000004A47AC:
	sp = fp
	sp = sp + -32
	Mem0[sp:word64] = x29
	sp = sp + 8
	Mem0[sp:word64] = x30
	x29 = x31 + 0x0000000000000000
	v8 = sp + 16
	Mem0[v8:word64] = x19
	v8 = v8 + 8
	Mem0[v8:word64] = x20
	x19 = x0
	branch x0 == 0x0000000000000000 l00000000004A4808
	// succ:  l00000000004A47C0 l00000000004A4808
l00000000004A47C0:
	x0 = 0x00000000004E4000
	w2 = Mem0[x0 + 392:word32]
	x0 = 0x00000000004E2000
	x0 = x0 + 0xFFFFFFFFFFFFFF20
	x1 = Mem0[x0:word64]
	x0 = 0xFFFFFFFFFFFFFFF8
	x0 = x0 + (int64) ((int32) w2)
	x20 = Mem0[x1 + x0:word64]
	x0 = Mem0[x20 + 8:word64]
	branch x0 == 0x0000000000000000 l00000000004A47EC
	// succ:  l00000000004A47E8 l00000000004A47EC
l00000000004A47E8:
	call free (retsize: 0;)
	// succ:  l00000000004A47EC
l00000000004A47EC:
	x0 = x19
	strlen(x0)
	sp = sp + 0xFFFFFFFFFFFFFFF8
	x0 = x0 + 0x0000000000000001
	call xmalloc (retsize: 0;)
	x1 = x19
	strcpy(x0, x1)
	sp = sp + 0xFFFFFFFFFFFFFFF8
	Mem0[x20 + 8:word64] = x0
	// succ:  l00000000004A4808
l00000000004A4808:
	v12 = sp + 16
	x19 = Mem0[v12:word64]
	v12 = v12 + 8
	x20 = Mem0[v12:word64]
	x29 = Mem0[sp:word64]
	sp = sp + 8
	x30 = Mem0[sp:word64]
	sp = sp + 32
	return
	// succ:  add_history_time_exit
add_history_time_exit:


// free_history_entry
// Return size: 0
void free_history_entry()
free_history_entry_entry:
	// succ:  l00000000004A4814
l00000000004A4814:
	sp = fp
	sp = sp + -32
	Mem0[sp:word64] = x29
	sp = sp + 8
	Mem0[sp:word64] = x30
	x29 = x31 + 0x0000000000000000
	v8 = sp + 16
	Mem0[v8:word64] = x19
	v8 = v8 + 8
	Mem0[v8:word64] = x20
	x19 = x0
	branch x0 == 0x0000000000000000 l00000000004A4850
	// succ:  l00000000004A4828 l00000000004A4850
l00000000004A4828:
	x0 = Mem0[x0:word64]
	branch x0 == 0x0000000000000000 l00000000004A4834
	// succ:  l00000000004A4830 l00000000004A4834
l00000000004A4830:
	call free (retsize: 0;)
	// succ:  l00000000004A4834
l00000000004A4834:
	x0 = Mem0[x19 + 8:word64]
	branch x0 == 0x0000000000000000 l00000000004A4840
	// succ:  l00000000004A483C l00000000004A4840
l00000000004A483C:
	call free (retsize: 0;)
	// succ:  l00000000004A4840
l00000000004A4840:
	x20 = Mem0[x19 + 16:word64]
	x0 = x19
	call xfree (retsize: 0;)
	x0 = x20
	// succ:  l00000000004A4850
l00000000004A4850:
	v10 = sp + 16
	x19 = Mem0[v10:word64]
	v10 = v10 + 8
	x20 = Mem0[v10:word64]
	x29 = Mem0[sp:word64]
	sp = sp + 8
	x30 = Mem0[sp:word64]
	sp = sp + 32
	return
	// succ:  free_history_entry_exit
free_history_entry_exit:


// add_history
// Return size: 0
void add_history()
add_history_entry:
	// succ:  l00000000004A485C
l00000000004A485C:
	sp = fp
	sp = sp + -112
	Mem0[sp:word64] = x29
	sp = sp + 8
	Mem0[sp:word64] = x30
	x29 = x31 + 0x0000000000000000
	v8 = sp + 16
	Mem0[v8:word64] = x19
	v8 = v8 + 8
	Mem0[v8:word64] = x20
	x20 = 0x00000000004E2000
	x1 = x20 + 0xFFFFFFFFFFFFFF20
	w2 = Mem0[x1 + 12:word32]
	v13 = sp + 32
	Mem0[v13:word64] = x21
	v13 = v13 + 8
	Mem0[v13:word64] = x22
	x19 = 0x00000000004E4000
	x22 = x0
	branch w2 == 0x00000000 l00000000004A4898
	// succ:  l00000000004A4884 l00000000004A4898
l00000000004A4884:
	x0 = 0x00000000004E4000
	w2 = Mem0[x19 + 392:word32]
	w0 = Mem0[x0 + 384:word32]
	NZCV = cond(w2 - w0)
	branch Test(EQ,Z) l00000000004A495C
	// succ:  l00000000004A4898 l00000000004A495C
l00000000004A4898:
	x21 = x20 + 0xFFFFFFFFFFFFFF20
	w1 = Mem0[x21 + 8:word32]
	branch w1 == 0x00000000 l00000000004A493C
	// succ:  l00000000004A48A4 l00000000004A493C
l00000000004A48A4:
	w2 = Mem0[x19 + 392:word32]
	w0 = w1 - 0x00000001
	NZCV = cond(w0 - w2)
	branch Test(EQ,Z) l00000000004A49C0
	// succ:  l00000000004A48B4 l00000000004A49C0
l00000000004A48B4:
	w2 = w2 + 0x00000001
	Mem0[x19 + 392:word32] = w2
	// succ:  l00000000004A48BC
l00000000004A48BC:
	x0 = 0x0000000000000000
	time(x0)
	sp = sp + 0xFFFFFFFFFFFFFFF8
	x4 = 0x00000000004C5000
	x5 = x0
	w2 = 0x00000001
	x3 = 0x0000000000000040
	x4 = x4 + 0x0000000000000048
	x1 = 0x000000000000003F
	x0 = x29 + 0x0000000000000030
	__snprintf_chk(x0, x1, x2, x3, x4, Mem0[sp:<unknown>])
	sp = sp + 0xFFFFFFFFFFFFFFF8
	x0 = x29 + 0x0000000000000030
	strlen(x0)
	sp = sp + 0xFFFFFFFFFFFFFFF8
	x0 = x0 + 0x0000000000000001
	call xmalloc (retsize: 0;)
	x1 = x29 + 0x0000000000000030
	strcpy(x0, x1)
	sp = sp + 0xFFFFFFFFFFFFFFF8
	x1 = x0
	x0 = 0x00000000004E2000
	v23 = Mem0[x0 + -208:byte]
	w2 = (word32) v23
	x0 = x22
	Mem0[x1:byte] = (byte) w2
	call alloc_history_entry (retsize: 0;)
	x20 = x20 + 0xFFFFFFFFFFFFFF20
	w1 = Mem0[x19 + 392:word32]
	x2 = Mem0[x20:word64]
	Mem0[x2 + (int64) ((int32) w1):word64] = 0x0000000000000000
	x1 = x2 + (int64) ((int32) w1)
	Mem0[x1 + -8:word64] = x0
	// succ:  l00000000004A492C
l00000000004A492C:
	v24 = sp + 16
	x19 = Mem0[v24:word64]
	v24 = v24 + 8
	x20 = Mem0[v24:word64]
	v25 = sp + 32
	x21 = Mem0[v25:word64]
	v25 = v25 + 8
	x22 = Mem0[v25:word64]
	x29 = Mem0[sp:word64]
	sp = sp + 8
	x30 = Mem0[sp:word64]
	sp = sp + 112
	return
	// succ:  add_history_exit
l00000000004A493C:
	w1 = 0x00000032
	x0 = 0x0000000000000190
	Mem0[x21 + 8:word32] = w1
	call xmalloc (retsize: 0;)
	Mem0[x21:word64] = x0
	w0 = 0x00000001
	Mem0[x19 + 392:word32] = w0
	goto l00000000004A48BC
	// succ:  l00000000004A48BC
l00000000004A495C:
	branch w2 == 0x00000000 l00000000004A492C
	// succ:  l00000000004A4960 l00000000004A492C
l00000000004A4960:
	x0 = Mem0[x1:word64]
	x0 = Mem0[x0:word64]
	branch x0 == 0x0000000000000000 l00000000004A4974
	// succ:  l00000000004A496C l00000000004A4974
l00000000004A496C:
	call free_history_entry (retsize: 0;)
	w2 = Mem0[x19 + 392:word32]
	// succ:  l00000000004A4974
l00000000004A4974:
	NZCV = cond(w2 - w31)
	branch Test(LE,ZCV) l00000000004A49A8
	// succ:  l00000000004A497C l00000000004A49A8
l00000000004A497C:
	x0 = x20 + 0xFFFFFFFFFFFFFF20
	x1 = Mem0[x0:word64]
	w2 = w2 - 0x00000001
	x0 = x1 + 0x0000000000000010
	x2 = x0 + (uint64) ((word32) w2)
	x1 = x1 + 0x0000000000000008
	// succ:  l00000000004A4994
l00000000004A4994:
	x0 = Mem0[x1:word64]
	x1 = x1 + 0x0000000000000008
	Mem0[x1 + -16:word64] = x0
	x31 = x1 - x2
	NZCV = cond(x31)
	branch Test(NE,Z) l00000000004A4994
	// succ:  l00000000004A49A8 l00000000004A4994
l00000000004A49A8:
	x0 = 0x00000000004DE000
	x0 = x0 + 0x0000000000000604
	w1 = Mem0[x0:word32]
	w1 = w1 + 0x00000001
	Mem0[x0:word32] = w1
	goto l00000000004A48BC
	// succ:  l00000000004A48BC
l00000000004A49C0:
	w2 = w1 + 0x00000032
	x0 = Mem0[x21:word64]
add_history_exit:


// copy_history_entry
// Return size: 0
void copy_history_entry()
copy_history_entry_entry:
	// succ:  l00000000004A49E0
l00000000004A49E0:
	sp = fp
	sp = sp + -32
	Mem0[sp:word64] = x29
	sp = sp + 8
	Mem0[sp:word64] = x30
	x29 = x31 + 0x0000000000000000
	v8 = sp + 16
	Mem0[v8:word64] = x19
	v8 = v8 + 8
	Mem0[v8:word64] = x20
	x19 = x0
	branch x0 == 0x0000000000000000 l00000000004A4A3C
	// succ:  l00000000004A49F4 l00000000004A4A3C
l00000000004A49F4:
	x0 = Mem0[x0:word64]
	x1 = 0x0000000000000000
	call alloc_history_entry (retsize: 0;)
	x20 = x0
	x0 = Mem0[x19 + 8:word64]
	branch x0 == 0x0000000000000000 l00000000004A4A20
	// succ:  l00000000004A4A0C l00000000004A4A20
l00000000004A4A0C:
	strlen(x0)
	sp = sp + 0xFFFFFFFFFFFFFFF8
	x0 = x0 + 0x0000000000000001
	call xmalloc (retsize: 0;)
	x1 = Mem0[x19 + 8:word64]
	strcpy(x0, x1)
	sp = sp + 0xFFFFFFFFFFFFFFF8
	// succ:  l00000000004A4A20
l00000000004A4A20:
	x1 = Mem0[x19 + 16:word64]
	Mem0[x20 + 8:word64] = x0
	Mem0[x20 + 16:word64] = x1
	x0 = x20
	v12 = sp + 16
	x19 = Mem0[v12:word64]
	v12 = v12 + 8
	x20 = Mem0[v12:word64]
	x29 = Mem0[sp:word64]
	sp = sp + 8
	x30 = Mem0[sp:word64]
	sp = sp + 32
	return
	// succ:  copy_history_entry_exit
l00000000004A4A3C:
	v11 = sp + 16
	x19 = Mem0[v11:word64]
	v11 = v11 + 8
	x20 = Mem0[v11:word64]
	x29 = Mem0[sp:word64]
	sp = sp + 8
	x30 = Mem0[sp:word64]
	sp = sp + 32
	return
	// succ:  copy_history_entry_exit
copy_history_entry_exit:


// replace_history_entry
// Return size: 0
void replace_history_entry()
replace_history_entry_entry:
	// succ:  l00000000004A4A48
l00000000004A4A48:
	sp = fp
	sp = sp + -64
	Mem0[sp:word64] = x29
	sp = sp + 8
	Mem0[sp:word64] = x30
	x29 = x31 + 0x0000000000000000
	v8 = sp + 16
	Mem0[v8:word64] = x19
	v8 = v8 + 8
	Mem0[v8:word64] = x20
	v11 = sp + 32
	Mem0[v11:word64] = x21
	v11 = v11 + 8
	Mem0[v11:word64] = x22
	w20 = w0
	branch (w20 & 0x00000000) == 0x00000000 l00000000004A4AF8
	// succ:  l00000000004A4A60 l00000000004A4AF8
l00000000004A4A60:
	x0 = 0x00000000004E4000
	w0 = Mem0[x0 + 392:word32]
	NZCV = cond(w20 - w0)
	branch Test(GE,NZV) l00000000004A4AF8
	// succ:  l00000000004A4A70 l00000000004A4AF8
l00000000004A4A70:
	x0 = 0x0000000000000018
	Mem0[x29 + 56:word64] = x2
	Mem0[x29 + 48:word64] = x1
	x22 = 0x00000000004E2000
	call xmalloc (retsize: 0;)
	x1 = Mem0[x29 + 48:word64]
	x22 = x22 + 0xFFFFFFFFFFFFFF20
	x3 = Mem0[x22:word64]
	x19 = x0
l00000000004A4AF8:
	x0 = 0x0000000000000000
	v20 = sp + 16
	x19 = Mem0[v20:word64]
	v20 = v20 + 8
	x20 = Mem0[v20:word64]
	v21 = sp + 32
	x21 = Mem0[v21:word64]
	v21 = v21 + 8
	x22 = Mem0[v21:word64]
	x29 = Mem0[sp:word64]
	sp = sp + 8
	x30 = Mem0[sp:word64]
	sp = sp + 64
	return
	// succ:  replace_history_entry_exit
replace_history_entry_exit:


// replace_history_data
// Return size: 0
void replace_history_data()
replace_history_data_entry:
	// succ:  l00000000004A4B0C
l00000000004A4B0C:
	sp = fp
	w31 = w0 + 0x00000002
	NZCV = cond(w31)
	branch Test(LT,NV) l00000000004A4B50
	// succ:  l00000000004A4B14 l00000000004A4B50
l00000000004A4B14:
	x3 = 0x00000000004E4000
	w3 = Mem0[x3 + 392:word32]
	NZCV = cond(w0 - w3)
	branch Test(GE,NZV) l00000000004A4B50
	// succ:  l00000000004A4B24 l00000000004A4B50
l00000000004A4B24:
	branch w3 == 0x00000000 l00000000004A4B50
	// succ:  l00000000004A4B28 l00000000004A4B50
l00000000004A4B28:
	x4 = 0x00000000004E2000
	x4 = x4 + 0xFFFFFFFFFFFFFF20
	x8 = Mem0[x4:word64]
	branch x8 == 0x0000000000000000 l00000000004A4B50
	// succ:  l00000000004A4B38 l00000000004A4B50
l00000000004A4B38:
	branch (w0 & 0x00000000) == 0x00000000 l00000000004A4B54
	// succ:  l00000000004A4B3C l00000000004A4B54
l00000000004A4B3C:
	x0 = Mem0[x8 + (int64) ((int32) w0):word64]
	branch x0 == 0x0000000000000000 l00000000004A4B50
	// succ:  l00000000004A4B44 l00000000004A4B50
l00000000004A4B44:
	x3 = Mem0[x0 + 16:word64]
	x31 = x3 - x1
	NZCV = cond(x31)
	branch Test(EQ,Z) l00000000004A4BB4
	// succ:  l00000000004A4B50 l00000000004A4BB4
l00000000004A4B50:
	return
	// succ:  replace_history_data_exit
l00000000004A4B54:
	NZCV = cond(w3 - w31)
	branch Test(LE,ZCV) l00000000004A4B50
	// succ:  l00000000004A4B5C l00000000004A4B50
l00000000004A4B5C:
	x5 = x8
	w9 = 0xFFFFFFFF
	w4 = 0x00000000
	goto l00000000004A4B78
	// succ:  l00000000004A4B78
l00000000004A4B6C:
	w4 = w4 + 0x00000001
	NZCV = cond(w4 - w3)
	branch Test(EQ,Z) l00000000004A4BA4
	// succ:  l00000000004A4B78 l00000000004A4BA4
l00000000004A4B78:
	x6 = Mem0[x5:word64]
	x5 = x5 + 0x0000000000000008
	branch x6 == 0x0000000000000000 l00000000004A4B6C
	// succ:  l00000000004A4B84 l00000000004A4B6C
l00000000004A4B84:
	x7 = Mem0[x6 + 16:word64]
	x31 = x7 - x1
	NZCV = cond(x31)
	branch Test(NE,Z) l00000000004A4B6C
	// succ:  l00000000004A4B90 l00000000004A4B6C
l00000000004A4B90:
	w31 = w0 + 0x00000001
	NZCV = cond(w31)
	w9 = w4
	branch Test(NE,Z) l00000000004A4B6C
	// succ:  l00000000004A4B9C l00000000004A4B6C
l00000000004A4B9C:
	Mem0[x6 + 16:word64] = x2
	goto l00000000004A4B6C
	// succ:  l00000000004A4B6C
l00000000004A4BA4:
	branch (w9 & 0x00000000) == 0x00000000 l00000000004A4B50
	// succ:  l00000000004A4BA8 l00000000004A4B50
l00000000004A4BA8:
	w31 = w0 + 0x00000002
	NZCV = cond(w31)
	branch Test(NE,Z) l00000000004A4B50
	// succ:  l00000000004A4BB0 l00000000004A4B50
l00000000004A4BB0:
	x0 = Mem0[x8 + (int64) ((int32) w9):word64]
	// succ:  l00000000004A4BB4
l00000000004A4BB4:
	Mem0[x0 + 16:word64] = x2
	return
	// succ:  replace_history_data_exit
replace_history_data_exit:


// remove_history
// Return size: 0
void remove_history()
remove_history_entry:
	// succ:  l00000000004A4BBC
l00000000004A4BBC:
	sp = fp
	branch (w0 & 0x00000000) == 0x00000000 l00000000004A4C28
	// succ:  l00000000004A4BC0 l00000000004A4C28
l00000000004A4BC0:
	x4 = 0x00000000004E4000
	w1 = Mem0[x4 + 392:word32]
	NZCV = cond(w0 - w1)
	branch Test(GE,NZV) l00000000004A4C28
	// succ:  l00000000004A4BD0 l00000000004A4C28
l00000000004A4BD0:
	branch w1 == 0x00000000 l00000000004A4C28
	// succ:  l00000000004A4BD4 l00000000004A4C28
l00000000004A4BD4:
	x2 = 0x00000000004E2000
	x2 = x2 + 0xFFFFFFFFFFFFFF20
	x2 = Mem0[x2:word64]
	branch x2 == 0x0000000000000000 l00000000004A4C30
	// succ:  l00000000004A4BE4 l00000000004A4C30
l00000000004A4BE4:
	w5 = w1 - 0x00000001
l00000000004A4C28:
	x0 = 0x0000000000000000
	return
	// succ:  remove_history_exit
l00000000004A4C30:
	x0 = x2
	return
	// succ:  remove_history_exit
remove_history_exit:


// stifle_history
// Return size: 0
void stifle_history()
stifle_history_entry:
	// succ:  l00000000004A4C38
l00000000004A4C38:
	sp = fp
	sp = sp + -80
	Mem0[sp:word64] = x29
	sp = sp + 8
	Mem0[sp:word64] = x30
	x29 = x31 + 0x0000000000000000
	v8 = sp + 48
	Mem0[v8:word64] = x23
	v8 = v8 + 8
	Mem0[v8:word64] = x24
	x23 = 0x00000000004E4000
	NZCV = cond(w0 - w31)
	w1 = Mem0[x23 + 392:word32]
	v15 = sp + 16
	Mem0[v15:word64] = x19
	v15 = v15 + 8
	Mem0[v15:word64] = x20
stifle_history_exit:


// unstifle_history
// Return size: 0
void unstifle_history()
unstifle_history_entry:
	// succ:  l00000000004A4D44
l00000000004A4D44:
	sp = fp
	x0 = 0x00000000004E2000
	x0 = x0 + 0xFFFFFFFFFFFFFF20
	w1 = Mem0[x0 + 12:word32]
	branch w1 != 0x00000000 l00000000004A4D64
	// succ:  l00000000004A4D54 l00000000004A4D64
l00000000004A4D54:
	x0 = 0x00000000004E4000
	w0 = Mem0[x0 + 384:word32]
	w0 = w31 - w0
	return
	// succ:  unstifle_history_exit
l00000000004A4D64:
	Mem0[x0 + 12:word32] = 0x00000000
	x0 = 0x00000000004E4000
	w0 = Mem0[x0 + 384:word32]
	return
	// succ:  unstifle_history_exit
unstifle_history_exit:


// history_is_stifled
// Return size: 0
void history_is_stifled()
history_is_stifled_entry:
	// succ:  l00000000004A4D74
l00000000004A4D74:
	sp = fp
	x0 = 0x00000000004E2000
	x0 = x0 + 0xFFFFFFFFFFFFFF20
	w0 = Mem0[x0 + 12:word32]
	return
	// succ:  history_is_stifled_exit
history_is_stifled_exit:


// clear_history
// Return size: 0
void clear_history()
clear_history_entry:
	// succ:  l00000000004A4D84
l00000000004A4D84:
	sp = fp
	sp = sp + -64
	Mem0[sp:word64] = x29
	sp = sp + 8
	Mem0[sp:word64] = x30
	x29 = x31 + 0x0000000000000000
	Mem0[sp + 48:word64] = x23
	x23 = 0x00000000004E4000
	w0 = Mem0[x23 + 392:word32]
	v10 = sp + 16
	Mem0[v10:word64] = x19
	v10 = v10 + 8
	Mem0[v10:word64] = x20
	v13 = sp + 32
	Mem0[v13:word64] = x21
	v13 = v13 + 8
	Mem0[v13:word64] = x22
	NZCV = cond(w0 - w31)
	branch Test(LE,ZCV) l00000000004A4DE4
	// succ:  l00000000004A4DA8 l00000000004A4DE4
l00000000004A4DA8:
	x22 = 0x00000000004E2000
	x22 = x22 + 0xFFFFFFFFFFFFFF20
	x19 = 0x0000000000000000
	x0 = Mem0[x22:word64]
	w20 = w19
	x21 = x23 + 0x0000000000000188
	// succ:  l00000000004A4DC0
l00000000004A4DC0:
	x0 = Mem0[x0 + x19:word64]
	w20 = w20 + 0x00000001
	call free_history_entry (retsize: 0;)
	w1 = Mem0[x21:word32]
	x0 = Mem0[x22:word64]
	NZCV = cond(w1 - w20)
	Mem0[x0 + x19:word64] = 0x0000000000000000
	x19 = x19 + 0x0000000000000008
	branch Test(GT,NZV) l00000000004A4DC0
	// succ:  l00000000004A4DE4 l00000000004A4DC0
l00000000004A4DE4:
	x0 = 0x00000000004E4000
	Mem0[x23 + 392:word32] = 0x00000000
	v22 = sp + 16
	x19 = Mem0[v22:word64]
	v22 = v22 + 8
	x20 = Mem0[v22:word64]
	v23 = sp + 32
	x21 = Mem0[v23:word64]
	v23 = v23 + 8
	x22 = Mem0[v23:word64]
	x23 = Mem0[sp + 48:word64]
	Mem0[x0 + 388:word32] = 0x00000000
	x29 = Mem0[sp:word64]
	sp = sp + 8
	x30 = Mem0[sp:word64]
	sp = sp + 64
	return
	// succ:  clear_history_exit
clear_history_exit:


// fn00000000004A4E04
// Return size: 0
void fn00000000004A4E04()
fn00000000004A4E04_entry:
	// succ:  l00000000004A4E04
l00000000004A4E04:
	sp = fp
	w4 = Mem0[x1:word32]
fn00000000004A4E04_exit:


// fn00000000004A4E74
// Return size: 0
void fn00000000004A4E74()
fn00000000004A4E74_entry:
	// succ:  l00000000004A4E74
l00000000004A4E74:
	sp = fp
	sp = sp + -80
	Mem0[sp:word64] = x29
	sp = sp + 8
	Mem0[sp:word64] = x30
	x29 = x31 + 0x0000000000000000
	v8 = sp + 16
	Mem0[v8:word64] = x19
	v8 = v8 + 8
	Mem0[v8:word64] = x20
	v11 = sp + 32
	Mem0[v11:word64] = x21
	v11 = v11 + 8
	Mem0[v11:word64] = x22
	v14 = sp + 48
	Mem0[v14:word64] = x23
	v14 = v14 + 8
	Mem0[v14:word64] = x24
	w20 = w1
	v19 = sp + 64
	Mem0[v19:word64] = x25
	v19 = v19 + 8
	Mem0[v19:word64] = x26
fn00000000004A4E74_exit:


// fn00000000004A516C
// Return size: 0
void fn00000000004A516C()
fn00000000004A516C_entry:
	// succ:  l00000000004A516C
l00000000004A516C:
	sp = fp
	sp = sp + -144
	Mem0[sp:word64] = x29
	sp = sp + 8
	Mem0[sp:word64] = x30
	x29 = x31 + 0x0000000000000000
	x31 = x2 - x31
	NZCV = cond(x31)
	Mem0[x29 + 120:word64] = x2
	w2 = (word32) Test(NE,Z)
	w31 = w1 + 0x00000001
	NZCV = cond(w31)
	Mem0[x29 + 104:word32] = w1
	w1 = (word32) Test(NE,Z)
	w1 = w2 & w1
	NZ = cond(w1)
	C = false
	V = false
	v15 = sp + 64
	Mem0[v15:word64] = x25
	v15 = v15 + 8
	Mem0[v15:word64] = x26
	v18 = sp + 16
	Mem0[v18:word64] = x19
	v18 = v18 + 8
	Mem0[v18:word64] = x20
	v21 = sp + 32
	Mem0[v21:word64] = x21
	v21 = v21 + 8
	Mem0[v21:word64] = x22
	v24 = sp + 48
	Mem0[v24:word64] = x23
	v24 = v24 + 8
	Mem0[v24:word64] = x24
	v27 = sp + 80
	Mem0[v27:word64] = x27
	v27 = v27 + 8
	Mem0[v27:word64] = x28
	Mem0[x29 + 100:word32] = w1
	x25 = x0
	branch Test(EQ,Z) l00000000004A51BC
	// succ:  l00000000004A51B0 l00000000004A51BC
l00000000004A51B0:
	x1 = Mem0[x29 + 120:word64]
	w0 = 0xFFFFFFFF
	Mem0[x1:word32] = w0
	// succ:  l00000000004A51BC
l00000000004A51BC:
	v33 = Mem0[x25:byte]
	w4 = (word32) v33
	x26 = 0x0000000000000000
	branch w4 == 0x00000000 l00000000004A522C
	// succ:  l00000000004A51C8 l00000000004A522C
l00000000004A51C8:
	x0 = 0x00000000004E2000
	x0 = x0 + 0xFFFFFFFFFFFFFF30
	Mem0[x29 + 112:word64] = x0
	x0 = 0x00000000004DE000
	x24 = 0x0000000000000000
	x0 = x0 + 0x0000000000000608
	Mem0[x29 + 128:word64] = x0
	w31 = w4 - 0x00000009
	NZCV = cond(w31)
	Mem0[x29 + 96:word32] = w24
	x23 = x25
	w27 = w24
	x26 = x24
	w19 = w24
	branch Test(NE,Z) l00000000004A530C
	// succ:  l00000000004A5200 l00000000004A530C
l00000000004A5200:
l00000000004A522C:
	x0 = x26
	v43 = sp + 16
	x19 = Mem0[v43:word64]
	v43 = v43 + 8
	x20 = Mem0[v43:word64]
	v44 = sp + 32
	x21 = Mem0[v44:word64]
	v44 = v44 + 8
	x22 = Mem0[v44:word64]
	v45 = sp + 48
	x23 = Mem0[v45:word64]
	v45 = v45 + 8
	x24 = Mem0[v45:word64]
	v46 = sp + 64
	x25 = Mem0[v46:word64]
	v46 = v46 + 8
	x26 = Mem0[v46:word64]
	v47 = sp + 80
	x27 = Mem0[v47:word64]
	v47 = v47 + 8
	x28 = Mem0[v47:word64]
	x29 = Mem0[sp:word64]
	sp = sp + 8
	x30 = Mem0[sp:word64]
	sp = sp + 144
	return
	// succ:  fn00000000004A516C_exit
l00000000004A5254:
	x2 = Mem0[x29 + 112:word64]
	v38 = Mem0[x2:byte]
	w0 = (word32) v38
	NZCV = cond(w0 - w4)
	branch Test(EQ,Z) l00000000004A522C
	// succ:  l00000000004A5264 l00000000004A522C
l00000000004A5264:
	x0 = x25
	w1 = w19
	call fn00000000004A4E74 (retsize: 0;)
	NZCV = cond(w19 - w0)
	w22 = w0
	branch Test(EQ,Z) l00000000004A533C
	// succ:  l00000000004A527C l00000000004A533C
l00000000004A527C:
	w20 = w22 - w19
	w2 = w20 + 0x00000001
l00000000004A5290:
	w0 = Mem0[x29 + 100:word32]
	branch w0 == 0x00000000 l00000000004A52B8
	// succ:  l00000000004A5298 l00000000004A52B8
l00000000004A5298:
	w1 = Mem0[x29 + 104:word32]
	NZCV = cond(w19 - w1)
	branch Test(GT,NZV) l00000000004A52B8
	// succ:  l00000000004A52A4 l00000000004A52B8
l00000000004A52A4:
	NZCV = cond(w1 - w22)
	branch Test(GE,NZV) l00000000004A52B8
	// succ:  l00000000004A52AC l00000000004A52B8
l00000000004A52AC:
	w0 = Mem0[x29 + 96:word32]
	x1 = Mem0[x29 + 120:word64]
	Mem0[x1:word32] = w0
	// succ:  l00000000004A52B8
l00000000004A52B8:
	w1 = w24 + 0x00000002
	NZCV = cond(w27 - w1)
	branch Test(LE,ZCV) l00000000004A531C
	// succ:  l00000000004A52C4 l00000000004A531C
l00000000004A52C4:
	x0 = x2
	call xmalloc (retsize: 0;)
	x1 = x21
	x2 = x20
	x19 = x0
	strncpy(x0, x1, x2)
	sp = sp + 0xFFFFFFFFFFFFFFF8
l00000000004A530C:
	w31 = w4 - 0x00000020
	NZCV = cond(w31)
	branch Test(EQ,Z) l00000000004A5200
	// succ:  l00000000004A5314 l00000000004A5200
l00000000004A5314:
	x21 = x23
	goto l00000000004A5254
	// succ:  l00000000004A5254
l00000000004A531C:
	w27 = w27 + 0x0000000A
	x0 = x26
l00000000004A533C:
	x2 = Mem0[x29 + 128:word64]
	x28 = Mem0[x2:word64]
	branch x28 == 0x0000000000000000 l00000000004A5394
	// succ:  l00000000004A5348 l00000000004A5394
l00000000004A5348:
	w22 = w19 + 0x00000001
l00000000004A5394:
	x23 = x25 + (int64) ((int32) w19)
	w22 = w19
	x20 = x28
	x2 = 0x0000000000000001
	goto l00000000004A5290
	// succ:  l00000000004A5290
fn00000000004A516C_exit:


// get_history_event
// Return size: 0
void get_history_event()
get_history_event_entry:
	// succ:  l00000000004A5570
l00000000004A5570:
	sp = fp
	sp = sp + -128
	Mem0[sp:word64] = x29
	sp = sp + 8
	Mem0[sp:word64] = x30
	x29 = x31 + 0x0000000000000000
	w3 = Mem0[x1:word32]
	v10 = sp + 32
	Mem0[v10:word64] = x21
	v10 = v10 + 8
	Mem0[v10:word64] = x22
	v13 = sp + 64
	Mem0[v13:word64] = x25
	v13 = v13 + 8
	Mem0[v13:word64] = x26
	v16 = sp + 80
	Mem0[v16:word64] = x27
	v16 = v16 + 8
	Mem0[v16:word64] = x28
	v19 = sp + 16
	Mem0[v19:word64] = x19
	v19 = v19 + 8
	Mem0[v19:word64] = x20
	v22 = sp + 48
	Mem0[v22:word64] = x23
	v22 = v22 + 8
	Mem0[v22:word64] = x24
	x25 = x1
	x1 = 0x00000000004DE000
	x21 = x0
	v25 = Mem0[x1 + 1552:byte]
	w4 = (word32) v25
	v27 = Mem0[x0 + (int64) ((int32) w3):byte]
	w0 = (word32) v27
	w27 = w2
	NZCV = cond(w4 - w0)
	branch Test(NE,Z) l00000000004A5764
	// succ:  l00000000004A55B0 l00000000004A5764
l00000000004A55B0:
	w22 = w3 + 0x00000001
l00000000004A5764:
	x0 = 0x0000000000000000
	v33 = sp + 16
	x19 = Mem0[v33:word64]
	v33 = v33 + 8
	x20 = Mem0[v33:word64]
	v34 = sp + 32
	x21 = Mem0[v34:word64]
	v34 = v34 + 8
	x22 = Mem0[v34:word64]
	v35 = sp + 48
	x23 = Mem0[v35:word64]
	v35 = v35 + 8
	x24 = Mem0[v35:word64]
	v36 = sp + 64
	x25 = Mem0[v36:word64]
	v36 = v36 + 8
	x26 = Mem0[v36:word64]
	v37 = sp + 80
	x27 = Mem0[v37:word64]
	v37 = v37 + 8
	x28 = Mem0[v37:word64]
	x29 = Mem0[sp:word64]
	sp = sp + 8
	x30 = Mem0[sp:word64]
	sp = sp + 128
	return
	// succ:  get_history_event_exit
get_history_event_exit:


// history_arg_extract
// Return size: 0
void history_arg_extract()
history_arg_extract_entry:
	// succ:  l00000000004A5A64
l00000000004A5A64:
	sp = fp
	sp = sp + -80
	Mem0[sp:word64] = x29
	sp = sp + 8
	Mem0[sp:word64] = x30
	x29 = x31 + 0x0000000000000000
	v8 = sp + 32
	Mem0[v8:word64] = x21
	v8 = v8 + 8
	Mem0[v8:word64] = x22
	v11 = sp + 16
	Mem0[v11:word64] = x19
	v11 = v11 + 8
	Mem0[v11:word64] = x20
	w22 = w1
	w20 = w0
	w1 = 0xFFFFFFFF
	x0 = x2
	x2 = 0x0000000000000000
	v20 = sp + 48
	Mem0[v20:word64] = x23
	v20 = v20 + 8
	Mem0[v20:word64] = x24
	Mem0[sp + 64:word64] = x25
	call fn00000000004A516C (retsize: 0;)
	x21 = x0
	branch x0 == 0x0000000000000000 l00000000004A5B28
	// succ:  l00000000004A5A9C l00000000004A5B28
l00000000004A5A9C:
	x19 = Mem0[x0:word64]
	branch x19 == 0x0000000000000000 l00000000004A5AB8
	// succ:  l00000000004A5AA4 l00000000004A5AB8
l00000000004A5AA4:
	x2 = x0 + 0x0000000000000008
	w19 = 0x00000000
	// succ:  l00000000004A5AAC
l00000000004A5AAC:
	x3 = Mem0[x2:word64]
	x2 = x2 + 8
	w19 = w19 + 0x00000001
	branch x3 != 0x0000000000000000 l00000000004A5AAC
	// succ:  l00000000004A5AB8 l00000000004A5AAC
l00000000004A5AB8:
	branch (w22 & 0x00000000) == 0x00000000 l00000000004A5B40
	// succ:  l00000000004A5ABC l00000000004A5B40
l00000000004A5ABC:
	branch (w20 & 0x00000000) == 0x00000000 l00000000004A5B4C
	// succ:  l00000000004A5AC0 l00000000004A5B4C
l00000000004A5AC0:
	w0 = w19 - 0x00000001
	w31 = w22 - 0x00000024
	NZCV = cond(w31)
l00000000004A5B28:
	v26 = sp + 16
	x19 = Mem0[v26:word64]
	v26 = v26 + 8
	x20 = Mem0[v26:word64]
	v27 = sp + 32
	x21 = Mem0[v27:word64]
	v27 = v27 + 8
	x22 = Mem0[v27:word64]
	v28 = sp + 48
	x23 = Mem0[v28:word64]
	v28 = v28 + 8
	x24 = Mem0[v28:word64]
	x25 = Mem0[sp + 64:word64]
	x29 = Mem0[sp:word64]
	sp = sp + 8
	x30 = Mem0[sp:word64]
	sp = sp + 80
	return
	// succ:  history_arg_extract_exit
l00000000004A5B40:
	w22 = w19 + w22
	w22 = w22 - 0x00000001
	branch (w20 & 0x00000000) == 0x00000000 l00000000004A5AC0
	// succ:  l00000000004A5B4C l00000000004A5AC0
l00000000004A5B4C:
	w20 = w19 + w20
	w20 = w20 - 0x00000001
	goto l00000000004A5AC0
	// succ:  l00000000004A5AC0
history_arg_extract_exit:


// history_expand
// Return size: 0
void history_expand()
history_expand_entry:
	// succ:  l00000000004A5C08
l00000000004A5C08:
	sp = fp
	sp = sp + -272
	Mem0[sp:word64] = x29
	sp = sp + 8
	Mem0[sp:word64] = x30
	x29 = x31 + 0x0000000000000000
	v8 = sp + 16
	Mem0[v8:word64] = x19
	v8 = v8 + 8
	Mem0[v8:word64] = x20
	v11 = sp + 32
	Mem0[v11:word64] = x21
	v11 = v11 + 8
	Mem0[v11:word64] = x22
	v14 = sp + 48
	Mem0[v14:word64] = x23
	v14 = v14 + 8
	Mem0[v14:word64] = x24
	v17 = sp + 64
	Mem0[v17:word64] = x25
	v17 = v17 + 8
	Mem0[v17:word64] = x26
	v20 = sp + 80
	Mem0[v20:word64] = x27
	v20 = v20 + 8
	Mem0[v20:word64] = x28
	Mem0[x29 + 168:word64] = x1
	x19 = x0
	branch x1 == 0x0000000000000000 l00000000004A64F0
	// succ:  l00000000004A5C30 l00000000004A64F0
l00000000004A5C30:
	x1 = 0x00000000004DE000
	x28 = x1 + 0x0000000000000608
	v24 = Mem0[x28 + 8:byte]
	w20 = (word32) v24
	branch w20 == 0x00000000 l00000000004A5EBC
	// succ:  l00000000004A5C40 l00000000004A5EBC
l00000000004A5C40:
	x0 = 0x0000000000000100
	call xmalloc (retsize: 0;)
	Mem0[x0:byte] = 0x00
	x20 = x0
	x0 = x19
	strlen(x0)
	sp = sp + 0xFFFFFFFFFFFFFFF8
	x22 = x0
	v26 = Mem0[x19:byte]
	w1 = (word32) v26
	v28 = Mem0[x28 + 9:byte]
	w0 = (word32) v28
	w24 = w22
	NZCV = cond(w0 - w1)
	branch Test(EQ,Z) l00000000004A62F4
	// succ:  l00000000004A5C70 l00000000004A62F4
l00000000004A5C70:
	Mem0[x29 + 120:word64] = 0x0000000000000000
	Mem0[x29 + 136:word32] = 0x00000000
	Mem0[x29 + 160:word32] = 0x00000000
	branch w1 == 0x00000000 l00000000004A5D38
	// succ:  l00000000004A5C80 l00000000004A5D38
l00000000004A5C80:
	x0 = 0x00000000004E2000
	x25 = x0 + 0xFFFFFFFFFFFFFF80
	x0 = 0x00000000004E2000
	x27 = x0 + 0xFFFFFFFFFFFFFF30
	// succ:  l00000000004A5C90
l00000000004A5C90:
	__ctype_get_mb_cur_max()
	sp = sp + 0xFFFFFFFFFFFFFFF8
	x31 = x0 - 0x0000000000000001
	NZCV = cond(x31)
	branch Test(ULE,ZC) l00000000004A5CA4
	// succ:  l00000000004A5C9C l00000000004A5CA4
l00000000004A5C9C:
	w0 = Mem0[x25:word32]
	branch w0 == 0x00000000 l00000000004A5F70
	// succ:  l00000000004A5CA4 l00000000004A5F70
l00000000004A5CA4:
	w23 = Mem0[x29 + 136:word32]
	v35 = Mem0[x27:byte]
	w0 = (word32) v35
l00000000004A5D38:
	x5 = 0x00000000004DE000
	x0 = x5 + 0x0000000000000608
	v46 = Mem0[x0 + 8:byte]
	w0 = (word32) v46
	x21 = x19
	NZCV = cond(w0 - w1)
	branch Test(NE,Z) l00000000004A5EB0
	// succ:  l00000000004A5D50 l00000000004A5EB0
l00000000004A5D50:
	Mem0[x29 + 136:word32] = 0x00000000
	NZCV = cond(w24 - w31)
	branch Test(LE,ZCV) l00000000004A65B4
	// succ:  l00000000004A5D5C l00000000004A65B4
l00000000004A5D5C:
	x26 = 0x00000000004E2000
	x26 = x26 + 0xFFFFFFFFFFFFFF30
	x5 = 0x00000000004DE000
	Mem0[x29 + 160:word64] = x26
	x5 = x5 + 0x0000000000000608
	Mem0[x29 + 176:word64] = x5
	x5 = Mem0[x29 + 160:word64]
	w0 = 0x00000000
	x5 = x5 + 0x0000000000000020
	w22 = 0x00000100
	Mem0[x29 + 192:word32] = w0
	Mem0[x29 + 184:word32] = w0
	Mem0[x29 + 196:word32] = w0
	w23 = w0
	w26 = w0
	Mem0[x29 + 208:word64] = x5
	goto l00000000004A5DD4
	// succ:  l00000000004A5DD4
l00000000004A5DA0:
	w0 = w22 - 0x00000001
	NZCV = cond(w0 - w26)
	branch Test(LE,ZCV) l00000000004A5F58
	// succ:  l00000000004A5DAC l00000000004A5F58
l00000000004A5DAC:
	Mem0[x20 + (int64) ((int32) w26):byte] = (byte) w28
	w5 = w26 + 0x00000001
	Mem0[x20 + (int64) ((int32) w5):byte] = 0x00
	w0 = Mem0[x29 + 136:word32]
	w26 = w5
	w23 = 0x00000000
	// succ:  l00000000004A5DC4
l00000000004A5DC4:
	w0 = w0 + 0x00000001
	Mem0[x29 + 136:word32] = w0
	NZCV = cond(w24 - w0)
	branch Test(LE,ZCV) l00000000004A5E64
	// succ:  l00000000004A5DD4 l00000000004A5E64
l00000000004A5DD4:
	v51 = Mem0[x21 + (int64) ((int32) w0):byte]
	w28 = (word32) v51
	branch w23 != 0x00000000 l00000000004A5DA0
	// succ:  l00000000004A5DDC l00000000004A5DA0
l00000000004A5DDC:
	__ctype_get_mb_cur_max()
	sp = sp + 0xFFFFFFFFFFFFFFF8
	x31 = x0 - 0x0000000000000001
	NZCV = cond(x31)
	branch Test(ULE,ZC) l00000000004A5DF4
	// succ:  l00000000004A5DE8 l00000000004A5DF4
l00000000004A5DE8:
	x0 = 0x00000000004E2000
	w0 = Mem0[x0 + 3968:word32]
	branch w0 == 0x00000000 l00000000004A600C
	// succ:  l00000000004A5DF4 l00000000004A600C
l00000000004A5DF4:
	x5 = Mem0[x29 + 176:word64]
	v52 = Mem0[x5 + 8:byte]
	w0 = (word32) v52
	NZCV = cond(w0 - w28)
	branch Test(EQ,Z) l00000000004A620C
	// succ:  l00000000004A5E04 l00000000004A620C
l00000000004A5E04:
	x5 = Mem0[x29 + 160:word64]
	v53 = Mem0[x5:byte]
	w0 = (word32) v53
	NZCV = cond(w0 - w28)
	branch Test(EQ,Z) l00000000004A6258
	// succ:  l00000000004A5E14 l00000000004A6258
l00000000004A5E14:
	w31 = w28 - 0x00000027
	NZCV = cond(w31)
	branch Test(EQ,Z) l00000000004A6134
	// succ:  l00000000004A5E1C l00000000004A6134
l00000000004A5E1C:
	w31 = w28 - 0x0000005C
	NZCV = cond(w31)
	w0 = w22 - 0x00000001
	branch Test(EQ,Z) l00000000004A610C
	// succ:  l00000000004A5E28 l00000000004A610C
l00000000004A5E28:
	w31 = w28 - 0x00000022
	NZCV = cond(w31)
	branch Test(EQ,Z) l00000000004A60D8
	// succ:  l00000000004A5E30 l00000000004A60D8
l00000000004A5E30:
	NZCV = cond(w0 - w26)
	branch Test(LE,ZCV) l00000000004A6240
	// succ:  l00000000004A5E38 l00000000004A6240
l00000000004A5E38:
	v54 = Mem0[x29 + 68:int32]
	x0 = (word64) v54
	w1 = w26 + 0x00000001
	v55 = Mem0[x21 + x0:byte]
	w0 = (word32) v55
	Mem0[x20 + (int64) ((int32) w26):byte] = (byte) w0
	Mem0[x20 + (int64) ((int32) w1):byte] = 0x00
	w0 = Mem0[x29 + 136:word32]
	w26 = w1
	w0 = w0 + 0x00000001
	Mem0[x29 + 136:word32] = w0
	NZCV = cond(w24 - w0)
	branch Test(GT,NZV) l00000000004A5DD4
	// succ:  l00000000004A5E64 l00000000004A5DD4
l00000000004A5E64:
	x5 = Mem0[x29 + 168:word64]
	x31 = x21 - x19
	NZCV = cond(x31)
	Mem0[x5:word64] = x20
	branch Test(EQ,Z) l00000000004A5E7C
	// succ:  l00000000004A5E74 l00000000004A5E7C
l00000000004A5E74:
	x0 = x21
	call xfree (retsize: 0;)
	// succ:  l00000000004A5E7C
l00000000004A5E7C:
	w3 = Mem0[x29 + 184:word32]
	w0 = 0x00000002
	branch w3 != 0x00000000 l00000000004A5EDC
	// succ:  l00000000004A5E88 l00000000004A5EDC
l00000000004A5E88:
	w5 = Mem0[x29 + 196:word32]
	v58 = sp + 16
	x19 = Mem0[v58:word64]
	v58 = v58 + 8
	x20 = Mem0[v58:word64]
	NZCV = cond(w5 - w31)
	w0 = (word32) Test(NE,Z)
	v59 = sp + 32
	x21 = Mem0[v59:word64]
	v59 = v59 + 8
	x22 = Mem0[v59:word64]
	v60 = sp + 48
	x23 = Mem0[v60:word64]
	v60 = v60 + 8
	x24 = Mem0[v60:word64]
	v61 = sp + 64
	x25 = Mem0[v61:word64]
	v61 = v61 + 8
	x26 = Mem0[v61:word64]
	v62 = sp + 80
	x27 = Mem0[v62:word64]
	v62 = v62 + 8
	x28 = Mem0[v62:word64]
	x29 = Mem0[sp:word64]
	sp = sp + 8
	x30 = Mem0[sp:word64]
	sp = sp + 272
	return
	// succ:  history_expand_exit
l00000000004A5EB0:
	x0 = x20
	call xfree (retsize: 0;)
	x0 = x19
	// succ:  l00000000004A5EBC
l00000000004A5EBC:
	strlen(x0)
	sp = sp + 0xFFFFFFFFFFFFFFF8
	x0 = x0 + 0x0000000000000001
	call xmalloc (retsize: 0;)
	x1 = x19
	strcpy(x0, x1)
	sp = sp + 0xFFFFFFFFFFFFFFF8
	x5 = Mem0[x29 + 168:word64]
	Mem0[x5:word64] = x0
	w0 = 0x00000000
	// succ:  l00000000004A5EDC
l00000000004A5EDC:
	v63 = sp + 16
	x19 = Mem0[v63:word64]
	v63 = v63 + 8
	x20 = Mem0[v63:word64]
	v64 = sp + 32
	x21 = Mem0[v64:word64]
	v64 = v64 + 8
	x22 = Mem0[v64:word64]
	v65 = sp + 48
	x23 = Mem0[v65:word64]
	v65 = v65 + 8
	x24 = Mem0[v65:word64]
	v66 = sp + 64
	x25 = Mem0[v66:word64]
	v66 = v66 + 8
	x26 = Mem0[v66:word64]
	v67 = sp + 80
	x27 = Mem0[v67:word64]
	v67 = v67 + 8
	x28 = Mem0[v67:word64]
	x29 = Mem0[sp:word64]
	sp = sp + 8
	x30 = Mem0[sp:word64]
	sp = sp + 272
	return
	// succ:  history_expand_exit
l00000000004A5F44:
	w0 = w3 + 0x00000001
	v48 = Mem0[x19 + (int64) ((int32) w0):byte]
	w1 = (word32) v48
	Mem0[x29 + 136:word32] = w0
	branch w1 != 0x00000000 l00000000004A5C90
	// succ:  l00000000004A5F54 l00000000004A5C90
l00000000004A5F54:
	goto l00000000004A5D38
	// succ:  l00000000004A5D38
l00000000004A5F58:
	w22 = w22 + 0x00000040
	x0 = x20
l00000000004A5F70:
	v41 = Mem0[x29 + 68:int32]
	x0 = (word64) v41
	x1 = x29 + 0x0000000000000078
	x0 = x19 + x0
	call _rl_get_char_len (retsize: 0;)
	w31 = w0 - 0x00000001
	NZCV = cond(w31)
	branch Test(LE,ZCV) l00000000004A5CA4
	// succ:  l00000000004A5F88 l00000000004A5CA4
l00000000004A5F88:
	w1 = Mem0[x29 + 136:word32]
	w0 = w0 - 0x00000001
	w3 = w0 + w1
	goto l00000000004A5F44
	// succ:  l00000000004A5F44
l00000000004A600C:
	v70 = x29 + 96
	Mem0[v70:word64] = x31
	v70 = v70 + 8
	Mem0[v70:word64] = x31
	x27 = x29 + 0x0000000000000060
	x25 = x29 + 0x0000000000000070
	w3 = w28
	// succ:  l00000000004A601C
l00000000004A601C:
	x0 = x29 + 0x0000000000000060
	x1 = x29 + 0x0000000000000078
	Mem0[x27:byte] = (byte) w3
	Mem0[x29 + 120:word64] = 0x0000000000000000
	call _rl_get_char_len (retsize: 0;)
	w31 = w0 + 0x00000002
	NZCV = cond(w31)
	branch Test(NE,Z) l00000000004A6054
	// succ:  l00000000004A6038 l00000000004A6054
l00000000004A6038:
	w0 = Mem0[x29 + 136:word32]
	x27 = x27 + 0x0000000000000001
	w0 = w0 + 0x00000001
	Mem0[x29 + 136:word32] = w0
	x31 = x27 - x25
	NZCV = cond(x31)
	v71 = Mem0[x21 + (int64) ((int32) w0):byte]
	w3 = (word32) v71
	branch Test(NE,Z) l00000000004A601C
	// succ:  l00000000004A6054 l00000000004A601C
l00000000004A6054:
	x0 = x29 + 0x0000000000000060
	strlen(x0)
	sp = sp + 0xFFFFFFFFFFFFFFF8
	x31 = x0 - 0x0000000000000001
	NZCV = cond(x31)
	x25 = x0
	branch Test(ULE,ZC) l00000000004A5DF4
	// succ:  l00000000004A6068 l00000000004A5DF4
l00000000004A6068:
	w26 = w26 + w0
	NZCV = cond(w26 - w22)
	branch Test(LT,NV) l00000000004A6094
	// succ:  l00000000004A6074 l00000000004A6094
l00000000004A6074:
	w0 = w26 - w22
	w0 = w0 & 0xFFFFFF80
	w22 = w22 + 0x00000080
	w22 = w22 + w0
l00000000004A6094:
l00000000004A60D8:
	w5 = Mem0[x29 + 192:word32]
	NZCV = cond(w0 - w26)
	w0 = 0x00000001
	w5 = w0 - w5
	Mem0[x29 + 192:word32] = w5
	branch Test(LE,ZCV) l00000000004A6528
	// succ:  l00000000004A60F0 l00000000004A6528
l00000000004A60F0:
	w0 = 0x00000022
	Mem0[x20 + (int64) ((int32) w26):byte] = (byte) w0
	w5 = w26 + 0x00000001
	Mem0[x20 + (int64) ((int32) w5):byte] = 0x00
	w0 = Mem0[x29 + 136:word32]
	w26 = w5
	goto l00000000004A5DC4
	// succ:  l00000000004A5DC4
l00000000004A610C:
	NZCV = cond(w0 - w26)
	branch Test(LE,ZCV) l00000000004A6510
	// succ:  l00000000004A6114 l00000000004A6510
l00000000004A6114:
	w0 = 0x0000005C
	Mem0[x20 + (int64) ((int32) w26):byte] = (byte) w0
	w5 = w26 + 0x00000001
	Mem0[x20 + (int64) ((int32) w5):byte] = 0x00
	w0 = Mem0[x29 + 136:word32]
	w26 = w5
	w23 = 0x00000001
	goto l00000000004A5DC4
	// succ:  l00000000004A5DC4
l00000000004A6134:
	w5 = Mem0[x29 + 192:word32]
	branch w5 != 0x00000000 l00000000004A6234
	// succ:  l00000000004A613C l00000000004A6234
l00000000004A613C:
	x5 = Mem0[x29 + 160:word64]
	w0 = Mem0[x5 + 24:word32]
	branch w0 == 0x00000000 l00000000004A6234
	// succ:  l00000000004A6148 l00000000004A6234
l00000000004A6148:
	w23 = Mem0[x29 + 136:word32]
	NZCV = cond(w23 - w31)
	x25 = x21 + (int64) ((int32) w23)
	branch Test(LE,ZCV) l00000000004A6164
	// succ:  l00000000004A6158 l00000000004A6164
l00000000004A6158:
	v68 = Mem0[x25 + -1:byte]
	w0 = (word32) v68
	w31 = w0 - 0x00000024
	NZCV = cond(w31)
	branch Test(EQ,Z) l00000000004A6590
	// succ:  l00000000004A6164 l00000000004A6590
l00000000004A6164:
	w2 = 0x00000000
	// succ:  l00000000004A6168
l00000000004A6168:
	x1 = x29 + 0x0000000000000060
	w0 = w23 + 0x00000001
	x1 = x1 + 40
	Mem0[x1:word32] = w0
	x0 = x21
	call fn00000000004A4E04 (retsize: 0;)
	w0 = Mem0[x29 + 136:word32]
	w28 = w0 - w23
	w28 = w28 + 0x00000002
l00000000004A620C:
	w28 = Mem0[x29 + 136:word32]
l00000000004A6234:
	w0 = w22 - 0x00000001
	NZCV = cond(w0 - w26)
	branch Test(GT,NZV) l00000000004A5E38
	// succ:  l00000000004A6240 l00000000004A5E38
l00000000004A6240:
	w22 = w22 + 0x00000040
	x0 = x20
l00000000004A6258:
	w28 = Mem0[x29 + 136:word32]
	branch w28 == 0x00000000 l00000000004A6280
	// succ:  l00000000004A6260 l00000000004A6280
l00000000004A6260:
l00000000004A6280:
	w0 = w24 - w28
	w0 = w0 + 0x00000001
l00000000004A62F4:
	w0 = w22 + 0x00000005
l00000000004A64F0:
	w0 = Mem0[x29 + 168:word32]
	v36 = sp + 16
	x19 = Mem0[v36:word64]
	v36 = v36 + 8
	x20 = Mem0[v36:word64]
	v37 = sp + 32
	x21 = Mem0[v37:word64]
	v37 = v37 + 8
	x22 = Mem0[v37:word64]
	v38 = sp + 48
	x23 = Mem0[v38:word64]
	v38 = v38 + 8
	x24 = Mem0[v38:word64]
	v39 = sp + 64
	x25 = Mem0[v39:word64]
	v39 = v39 + 8
	x26 = Mem0[v39:word64]
	v40 = sp + 80
	x27 = Mem0[v40:word64]
	v40 = v40 + 8
	x28 = Mem0[v40:word64]
	x29 = Mem0[sp:word64]
	sp = sp + 8
	x30 = Mem0[sp:word64]
	sp = sp + 272
	return
	// succ:  history_expand_exit
l00000000004A6510:
	w22 = w22 + 0x00000040
	x0 = x20
l00000000004A6528:
	w22 = w22 + 0x00000040
	x0 = x20
l00000000004A6590:
	w2 = 0x00000001
	goto l00000000004A6168
	// succ:  l00000000004A6168
l00000000004A65B4:
	Mem0[x29 + 184:word32] = 0x00000000
	w4 = Mem0[x29 + 184:word32]
	Mem0[x29 + 196:word32] = w4
	goto l00000000004A5E64
	// succ:  l00000000004A5E64
history_expand_exit:


// history_tokenize
// Return size: 0
void history_tokenize()
history_tokenize_entry:
	// succ:  l00000000004A7230
l00000000004A7230:
	sp = fp
	w1 = 0xFFFFFFFF
	x2 = 0x0000000000000000
	// succ:  l00000000004A7238_thunk_fn00000000004A516C
l00000000004A7238_thunk_fn00000000004A516C:
	call fn00000000004A516C (retsize: 0;)
	return
	// succ:  history_tokenize_exit
history_tokenize_exit:


// fn00000000004A723C
// Return size: 0
void fn00000000004A723C()
fn00000000004A723C_entry:
	// succ:  l00000000004A723C
l00000000004A723C:
	sp = fp
	sp = sp + -48
	Mem0[sp:word64] = x29
	sp = sp + 8
	Mem0[sp:word64] = x30
	x29 = x31 + 0x0000000000000000
	Mem0[sp + 16:word64] = x19
	branch x0 == 0x0000000000000000 l00000000004A7274
	// succ:  l00000000004A724C l00000000004A7274
l00000000004A724C:
	Mem0[x29 + 32:word64] = x0
	strlen(x0)
	sp = sp + 0xFFFFFFFFFFFFFFF8
	x0 = x0 + 0x0000000000000001
	call xmalloc (retsize: 0;)
	x1 = Mem0[x29 + 32:word64]
	strcpy(x0, x1)
	sp = sp + 0xFFFFFFFFFFFFFFF8
	branch x0 == 0x0000000000000000 l00000000004A7274
	// succ:  l00000000004A7268 l00000000004A7274
l00000000004A7268:
	x19 = Mem0[sp + 16:word64]
	x29 = Mem0[sp:word64]
	sp = sp + 8
	x30 = Mem0[sp:word64]
	sp = sp + 48
	return
	// succ:  fn00000000004A723C_exit
l00000000004A7274:
	x0 = 0x00000000004AB000
	x0 = x0 + 0xFFFFFFFFFFFFFA10
	call sh_get_env_value (retsize: 0;)
	branch x0 == 0x0000000000000000 l00000000004A7268
	// succ:  l00000000004A7284 l00000000004A7268
l00000000004A7284:
	Mem0[x29 + 32:word64] = x0
	strlen(x0)
	sp = sp + 0xFFFFFFFFFFFFFFF8
	x19 = x0
	w0 = w0 + 0x0000000A
fn00000000004A723C_exit:


// fn00000000004A72DC
// Return size: 0
void fn00000000004A72DC()
fn00000000004A72DC_entry:
	// succ:  l00000000004A72DC
l00000000004A72DC:
	sp = v3
	sp = sp + -112
	Mem0[sp:word64] = x29
	sp = sp + 8
	Mem0[sp:word64] = x30
	x29 = x31 + 0x0000000000000000
	v7 = sp + 16
	Mem0[v7:word64] = x19
	v7 = v7 + 8
	Mem0[v7:word64] = x20
	NZCV = cond(w2 - w31)
	w19 = w1
	w2 = 0x00000401
	w1 = 0x00000241
	v15 = sp + 64
	Mem0[v15:word64] = x25
	v15 = v15 + 8
	Mem0[v15:word64] = x26
	v18 = sp + 32
	Mem0[v18:word64] = x21
	v18 = v18 + 8
	Mem0[v18:word64] = x22
	v21 = sp + 48
	Mem0[v21:word64] = x23
	v21 = v21 + 8
	Mem0[v21:word64] = x24
	v24 = sp + 80
	Mem0[v24:word64] = x27
	v24 = v24 + 8
	Mem0[v24:word64] = x28
fn00000000004A72DC_exit:


// read_history_range
// Return size: 0
void read_history_range()
read_history_range_entry:
	// succ:  l00000000004A7558
l00000000004A7558:
	sp = fp
	sp = sp + -224
	Mem0[sp:word64] = x29
	sp = sp + 8
	Mem0[sp:word64] = x30
	x29 = x31 + 0x0000000000000000
	v8 = sp + 16
	Mem0[v8:word64] = x19
	v8 = v8 + 8
	Mem0[v8:word64] = x20
	v11 = sp + 48
	Mem0[v11:word64] = x23
	v11 = v11 + 8
	Mem0[v11:word64] = x24
	v14 = sp + 64
	Mem0[v14:word64] = x25
	v14 = v14 + 8
	Mem0[v14:word64] = x26
	v17 = sp + 32
	Mem0[v17:word64] = x21
	v17 = v17 + 8
	Mem0[v17:word64] = x22
	v20 = sp + 80
	Mem0[v20:word64] = x27
	v20 = v20 + 8
	Mem0[v20:word64] = x28
	w23 = w1
	w26 = w2
	call fn00000000004A723C (retsize: 0;)
	x19 = x0
	branch x0 == 0x0000000000000000 l00000000004A7638
	goto l00000000004A7588
	// succ:  l00000000004A7588 l00000000004A7638
l00000000004A7558:
l00000000004A7588:
	w1 = 0x00000000
	w2 = 0x000001B6
	open(x0, x1)
	sp = sp + 0xFFFFFFFFFFFFFFF8
	w21 = w0
	branch (w21 & 0x00000000) == 0x00000000 l00000000004A7618
	// succ:  l00000000004A759C l00000000004A7618
l00000000004A759C:
	w0 = 0x00000000
	w1 = w21
	x2 = x29 + 0x0000000000000060
	__fxstat(x0, x1, x2)
	sp = sp + 0xFFFFFFFFFFFFFFF8
	w31 = w0 + 0x00000001
	NZCV = cond(w31)
	branch Test(EQ,Z) l00000000004A7618
	// succ:  l00000000004A75B4 l00000000004A7618
l00000000004A75B4:
	x20 = Mem0[x29 + 144:word64]
	x0 = x20 + 0x0000000000000001
	x31 = x20 - x0
	NZCV = cond(x31)
	branch Test(ULE,ZC) l00000000004A7664
	// succ:  l00000000004A75C4 l00000000004A7664
l00000000004A75C4:
	__errno_location()
	sp = sp + 0xFFFFFFFFFFFFFFF8
	w1 = 0x0000001B
	Mem0[x0:word32] = w1
	x22 = 0x0000000000000000
	w20 = 0x0000001B
	w0 = w21
	close(x0)
	sp = sp + 0xFFFFFFFFFFFFFFF8
	branch x19 == 0x0000000000000000 l00000000004A75EC
	// succ:  l00000000004A75E4 l00000000004A75EC
l00000000004A75E4:
	x0 = x19
	call free (retsize: 0;)
	// succ:  l00000000004A75EC
l00000000004A75EC:
	branch x22 == 0x0000000000000000 l00000000004A7644
	// succ:  l00000000004A75F0 l00000000004A7644
l00000000004A75F0:
	x0 = x22
	call free (retsize: 0;)
	w0 = w20
	v35 = sp + 16
	x19 = Mem0[v35:word64]
	v35 = v35 + 8
	x20 = Mem0[v35:word64]
	v36 = sp + 32
	x21 = Mem0[v36:word64]
	v36 = v36 + 8
	x22 = Mem0[v36:word64]
	v37 = sp + 48
	x23 = Mem0[v37:word64]
	v37 = v37 + 8
	x24 = Mem0[v37:word64]
	v38 = sp + 64
	x25 = Mem0[v38:word64]
	v38 = v38 + 8
	x26 = Mem0[v38:word64]
	v39 = sp + 80
	x27 = Mem0[v39:word64]
	v39 = v39 + 8
	x28 = Mem0[v39:word64]
	x29 = Mem0[sp:word64]
	sp = sp + 8
	x30 = Mem0[sp:word64]
	sp = sp + 224
	return
	// succ:  read_history_range_exit
l00000000004A7618:
	x22 = 0x0000000000000000
	// succ:  l00000000004A761C
l00000000004A761C:
	__errno_location()
	sp = sp + 0xFFFFFFFFFFFFFFF8
	w20 = Mem0[x0:word32]
	w0 = 0x00000005
	NZCV = cond(w20 - w31)
l00000000004A7638:
	w21 = 0xFFFFFFFF
	x22 = x0
	goto l00000000004A761C
	// succ:  l00000000004A761C
l00000000004A7644:
	w0 = w20
	v40 = sp + 32
	x21 = Mem0[v40:word64]
	v40 = v40 + 8
	x22 = Mem0[v40:word64]
	v41 = sp + 16
	x19 = Mem0[v41:word64]
	v41 = v41 + 8
	x20 = Mem0[v41:word64]
	v42 = sp + 48
	x23 = Mem0[v42:word64]
	v42 = v42 + 8
	x24 = Mem0[v42:word64]
	v43 = sp + 64
	x25 = Mem0[v43:word64]
	v43 = v43 + 8
	x26 = Mem0[v43:word64]
	v44 = sp + 80
	x27 = Mem0[v44:word64]
	v44 = v44 + 8
	x28 = Mem0[v44:word64]
	x29 = Mem0[sp:word64]
	sp = sp + 8
	x30 = Mem0[sp:word64]
	sp = sp + 224
	return
	// succ:  read_history_range_exit
l00000000004A7664:
	call malloc (retsize: 0;)
	x22 = x0
	branch x0 == 0x0000000000000000 l00000000004A75C4
	// succ:  l00000000004A7670 l00000000004A75C4
l00000000004A7670:
	x2 = x20
	w0 = w21
	x1 = x22
	read(x0, x1, x2)
	sp = sp + 0xFFFFFFFFFFFFFFF8
	x20 = x0
	branch (w0 & 0x00000000) == 0x00000000 l00000000004A761C
	// succ:  l00000000004A7688 l00000000004A761C
l00000000004A7688:
	w0 = w21
	close(x0)
	sp = sp + 0xFFFFFFFFFFFFFFF8
	NZCV = cond(w26 - w31)
	x25 = x22 + (int64) ((int32) w20)
read_history_range_exit:


// read_history
// Return size: 0
void read_history()
read_history_entry:
	// succ:  l00000000004A7800
l00000000004A7800:
	sp = fp
	w1 = 0x00000000
	w2 = 0xFFFFFFFF
	// succ:  l00000000004A7808_thunk_read_history_range
l00000000004A7808_thunk_read_history_range:
	call read_history_range (retsize: 0;)
	return
	// succ:  read_history_exit
read_history_exit:


// history_truncate_file
// Return size: 0
void history_truncate_file()
history_truncate_file_entry:
	// succ:  l00000000004A780C
l00000000004A780C:
	sp = fp
	sp = sp + -208
	Mem0[sp:word64] = x29
	sp = sp + 8
	Mem0[sp:word64] = x30
	x29 = x31 + 0x0000000000000000
	v8 = sp + 16
	Mem0[v8:word64] = x19
	v8 = v8 + 8
	Mem0[v8:word64] = x20
	v11 = sp + 48
	Mem0[v11:word64] = x23
	v11 = v11 + 8
	Mem0[v11:word64] = x24
	v14 = sp + 32
	Mem0[v14:word64] = x21
	v14 = v14 + 8
	Mem0[v14:word64] = x22
	v17 = sp + 64
	Mem0[v17:word64] = x25
	v17 = v17 + 8
	Mem0[v17:word64] = x26
	w23 = w1
	call fn00000000004A723C (retsize: 0;)
	x19 = x0
	branch x0 == 0x0000000000000000 l00000000004A78A4
	// succ:  l00000000004A7834 l00000000004A78A4
l00000000004A7834:
	w1 = 0x00000000
	w2 = 0x000001B6
	open(x0, x1)
	sp = sp + 0xFFFFFFFFFFFFFFF8
	w31 = w0 + 0x00000001
	NZCV = cond(w31)
	w21 = w0
	branch Test(EQ,Z) l00000000004A78A4
	// succ:  l00000000004A784C l00000000004A78A4
l00000000004A784C:
	w0 = 0x00000000
	w1 = w21
	x2 = x29 + 0x0000000000000050
	__fxstat(x0, x1, x2)
	sp = sp + 0xFFFFFFFFFFFFFFF8
	w31 = w0 + 0x00000001
	NZCV = cond(w31)
	branch Test(EQ,Z) l00000000004A78B0
	// succ:  l00000000004A7864 l00000000004A78B0
l00000000004A7864:
	w0 = Mem0[x29 + 96:word32]
	w0 = w0 & 0x0000F000
	w31 = w0 - (0x00000008 << 12)
	NZCV = cond(w31)
	branch Test(EQ,Z) l00000000004A78C4
	// succ:  l00000000004A7874 l00000000004A78C4
l00000000004A7874:
	w0 = w21
	close(x0)
	sp = sp + 0xFFFFFFFFFFFFFFF8
	w20 = 0x00000016
	// succ:  l00000000004A7880
l00000000004A7880:
	x0 = x19
	call xfree (retsize: 0;)
	w0 = w20
	v30 = sp + 32
	x21 = Mem0[v30:word64]
	v30 = v30 + 8
	x22 = Mem0[v30:word64]
	v31 = sp + 16
	x19 = Mem0[v31:word64]
	v31 = v31 + 8
	x20 = Mem0[v31:word64]
	v32 = sp + 48
	x23 = Mem0[v32:word64]
	v32 = v32 + 8
	x24 = Mem0[v32:word64]
	v33 = sp + 64
	x25 = Mem0[v33:word64]
	v33 = v33 + 8
	x26 = Mem0[v33:word64]
	x29 = Mem0[sp:word64]
	sp = sp + 8
	x30 = Mem0[sp:word64]
	sp = sp + 208
	return
	// succ:  history_truncate_file_exit
l00000000004A78A4:
	__errno_location()
	sp = sp + 0xFFFFFFFFFFFFFFF8
	w20 = Mem0[x0:word32]
	goto l00000000004A7880
	// succ:  l00000000004A7880
l00000000004A78B0:
	__errno_location()
	sp = sp + 0xFFFFFFFFFFFFFFF8
	w20 = Mem0[x0:word32]
	w0 = w21
	close(x0)
	sp = sp + 0xFFFFFFFFFFFFFFF8
	goto l00000000004A7880
	// succ:  l00000000004A7880
l00000000004A78C4:
	x20 = Mem0[x29 + 128:word64]
	x0 = x20 + 0x0000000000000001
	x31 = x20 - x0
	NZCV = cond(x31)
	branch Test(ULE,ZC) l00000000004A78EC
	// succ:  l00000000004A78D4 l00000000004A78EC
l00000000004A78D4:
	w0 = w21
	close(x0)
	sp = sp + 0xFFFFFFFFFFFFFFF8
	__errno_location()
	sp = sp + 0xFFFFFFFFFFFFFFF8
	w20 = 0x0000001B
	Mem0[x0:word32] = w20
	goto l00000000004A7880
	// succ:  l00000000004A7880
l00000000004A78EC:
	call malloc (retsize: 0;)
	x22 = x0
	branch x0 == 0x0000000000000000 l00000000004A7A58
	// succ:  l00000000004A78F8 l00000000004A7A58
l00000000004A78F8:
	x1 = x0
	x2 = x20
	w0 = w21
	read(x0, x1, x2)
	sp = sp + 0xFFFFFFFFFFFFFFF8
	x20 = x0
	w0 = w21
	close(x0)
	sp = sp + 0xFFFFFFFFFFFFFFF8
	NZCV = cond(w20 - w31)
	branch Test(LE,ZCV) l00000000004A7A48
	// succ:  l00000000004A791C l00000000004A7A48
l00000000004A791C:
l00000000004A7A24:
	x0 = x22
	call free (retsize: 0;)
	goto l00000000004A7880
	// succ:  l00000000004A7880
l00000000004A7A48:
	branch Test(EQ,Z) l00000000004A7A24
	// succ:  l00000000004A7A4C l00000000004A7A24
l00000000004A7A4C:
	__errno_location()
	sp = sp + 0xFFFFFFFFFFFFFFF8
	w20 = Mem0[x0:word32]
	goto l00000000004A7A24
	// succ:  l00000000004A7A24
l00000000004A7A58:
	w0 = w21
	close(x0)
	sp = sp + 0xFFFFFFFFFFFFFFF8
	w20 = w22
	goto l00000000004A7880
	// succ:  l00000000004A7880
history_truncate_file_exit:


// append_history
// Return size: 0
void append_history()
append_history_entry:
	// succ:  l00000000004A7A68
l00000000004A7A68:
	sp = fp
	w3 = w0
	w2 = 0x00000000
	x0 = x1
	w1 = w3
	// succ:  l00000000004A7A78_thunk_fn00000000004A72DC
l00000000004A7A78_thunk_fn00000000004A72DC:
	call fn00000000004A72DC (retsize: 0;)
	return
	// succ:  append_history_exit
append_history_exit:


// write_history
// Return size: 0
void write_history()
write_history_entry:
	// succ:  l00000000004A7A7C
l00000000004A7A7C:
	sp = fp
	x1 = 0x00000000004E4000
	w1 = Mem0[x1 + 392:word32]
	w2 = 0x00000001
	// succ:  l00000000004A7A88_thunk_fn00000000004A72DC
l00000000004A7A88_thunk_fn00000000004A72DC:
	call fn00000000004A72DC (retsize: 0;)
	return
	// succ:  write_history_exit
write_history_exit:


// fn00000000004A7A8C
// Return size: 0
void fn00000000004A7A8C()
fn00000000004A7A8C_entry:
	// succ:  l00000000004A7A8C
l00000000004A7A8C:
	sp = fp
	sp = sp + -128
	Mem0[sp:word64] = x29
	sp = sp + 8
	Mem0[sp:word64] = x30
	x29 = x31 + 0x0000000000000000
	v8 = sp + 16
	Mem0[v8:word64] = x19
	v8 = v8 + 8
	Mem0[v8:word64] = x20
	v11 = sp + 32
	Mem0[v11:word64] = x21
	v11 = v11 + 8
	Mem0[v11:word64] = x22
	v14 = sp + 64
	Mem0[v14:word64] = x25
	v14 = v14 + 8
	Mem0[v14:word64] = x26
	v17 = sp + 80
	Mem0[v17:word64] = x27
	v17 = v17 + 8
	Mem0[v17:word64] = x28
	v20 = sp + 48
	Mem0[v20:word64] = x23
	v20 = v20 + 8
	Mem0[v20:word64] = x24
	x27 = 0x00000000004E4000
	Mem0[x29 + 100:word32] = w2
	x21 = x0
	w19 = Mem0[x27 + 388:word32]
fn00000000004A7A8C_exit:


// history_search
// Return size: 0
void history_search()
history_search_entry:
	// succ:  l00000000004A7CAC
l00000000004A7CAC:
	sp = fp
	w2 = 0x00000000
	// succ:  l00000000004A7CB0_thunk_fn00000000004A7A8C
l00000000004A7CB0_thunk_fn00000000004A7A8C:
	call fn00000000004A7A8C (retsize: 0;)
	return
	// succ:  history_search_exit
history_search_exit:


// history_search_prefix
// Return size: 0
void history_search_prefix()
history_search_prefix_entry:
	// succ:  l00000000004A7CB4
l00000000004A7CB4:
	sp = fp
	w2 = 0x00000001
	// succ:  l00000000004A7CB8_thunk_fn00000000004A7A8C
l00000000004A7CB8_thunk_fn00000000004A7A8C:
	call fn00000000004A7A8C (retsize: 0;)
	return
	// succ:  history_search_prefix_exit
history_search_prefix_exit:


// history_search_pos
// Return size: 0
void history_search_pos()
history_search_pos_entry:
	// succ:  l00000000004A7CBC
l00000000004A7CBC:
	sp = fp
	sp = sp + -48
	Mem0[sp:word64] = x29
	sp = sp + 8
	Mem0[sp:word64] = x30
	x29 = x31 + 0x0000000000000000
	v8 = sp + 16
	Mem0[v8:word64] = x19
	v8 = v8 + 8
	Mem0[v8:word64] = x20
	Mem0[x29 + 40:word64] = x1
	x19 = x0
	Mem0[x29 + 32:word64] = x2
	call where_history (retsize: 0;)
	x2 = Mem0[x29 + 32:word64]
	w20 = w0
	w0 = w2
	call history_set_pos (retsize: 0;)
	x1 = Mem0[x29 + 40:word64]
	x0 = x19
	w2 = 0x00000000
	call fn00000000004A7A8C (retsize: 0;)
	w31 = w0 + 0x00000001
	NZCV = cond(w31)
	w19 = w0
	branch Test(EQ,Z) l00000000004A7D0C
	// succ:  l00000000004A7D04 l00000000004A7D0C
l00000000004A7D04:
	call where_history (retsize: 0;)
	w19 = w0
	// succ:  l00000000004A7D0C
l00000000004A7D0C:
	w0 = w20
	call history_set_pos (retsize: 0;)
	w0 = w19
	v19 = sp + 16
	x19 = Mem0[v19:word64]
	v19 = v19 + 8
	x20 = Mem0[v19:word64]
	x29 = Mem0[sp:word64]
	sp = sp + 8
	x30 = Mem0[sp:word64]
	sp = sp + 48
	return
	// succ:  history_search_pos_exit
history_search_pos_exit:


// _rl_get_char_len
// Return size: 0
void _rl_get_char_len()
_rl_get_char_len_entry:
	// succ:  l00000000004A7D24
l00000000004A7D24:
	sp = fp
	sp = sp + -32
	Mem0[sp:word64] = x29
	sp = sp + 8
	Mem0[sp:word64] = x30
	x29 = x31 + 0x0000000000000000
	v8 = sp + 16
	Mem0[v8:word64] = x19
	v8 = v8 + 8
	Mem0[v8:word64] = x20
	x19 = x1
	x20 = x0
	strlen(x0)
	sp = sp + 0xFFFFFFFFFFFFFFF8
	x2 = x0
	branch x19 == 0x0000000000000000 l00000000004A7D88
	// succ:  l00000000004A7D44 l00000000004A7D88
l00000000004A7D44:
	x0 = 0x0000000000000000
	x1 = x20
	x3 = x19
	mbrtowc(x0, x1, x2, x3)
	sp = sp + 0xFFFFFFFFFFFFFFF8
	x31 = x0 + 0x0000000000000002
	NZCV = cond(x31)
	branch Test(EQ,Z) l00000000004A7D78
	// succ:  l00000000004A7D5C l00000000004A7D78
l00000000004A7D5C:
	x31 = x0 + 0x0000000000000001
	NZCV = cond(x31)
	branch Test(EQ,Z) l00000000004A7D78
	// succ:  l00000000004A7D64 l00000000004A7D78
l00000000004A7D64:
	x31 = x0 - x31
	NZCV = cond(x31)
l00000000004A7D6C:
	v15 = sp + 16
	x19 = Mem0[v15:word64]
	v15 = v15 + 8
	x20 = Mem0[v15:word64]
	x29 = Mem0[sp:word64]
	sp = sp + 8
	x30 = Mem0[sp:word64]
	sp = sp + 32
	return
	// succ:  _rl_get_char_len_exit
l00000000004A7D78:
	Mem0[x19:word64] = 0x0000000000000000
	v16 = sp + 16
	x19 = Mem0[v16:word64]
	v16 = v16 + 8
	x20 = Mem0[v16:word64]
	x29 = Mem0[sp:word64]
	sp = sp + 8
	x30 = Mem0[sp:word64]
	sp = sp + 32
	return
	// succ:  _rl_get_char_len_exit
l00000000004A7D88:
	x1 = x2
	x0 = x20
	x2 = x19
	call __mbrlen (retsize: 0;)
	x31 = x0 + 0x0000000000000002
	NZCV = cond(x31)
	branch Test(EQ,Z) l00000000004A7D6C
	// succ:  l00000000004A7DA0 l00000000004A7D6C
l00000000004A7DA0:
	x31 = x0 + 0x0000000000000001
	NZCV = cond(x31)
	branch Test(NE,Z) l00000000004A7D64
	// succ:  l00000000004A7DA8 l00000000004A7D64
l00000000004A7DA8:
	goto l00000000004A7D6C
	// succ:  l00000000004A7D6C
_rl_get_char_len_exit:


// _rl_compare_chars
// Return size: 0
void _rl_compare_chars()
_rl_compare_chars_entry:
	// succ:  l00000000004A7DAC
l00000000004A7DAC:
	sp = fp
	sp = sp + -96
	Mem0[sp:word64] = x29
	sp = sp + 8
	Mem0[sp:word64] = x30
	x29 = x31 + 0x0000000000000000
	v8 = sp + 32
	Mem0[v8:word64] = x21
	v8 = v8 + 8
	Mem0[v8:word64] = x22
_rl_compare_chars_exit:


// _rl_adjust_point
// Return size: 0
void _rl_adjust_point()
_rl_adjust_point_entry:
	// succ:  l00000000004A7EB0
l00000000004A7EB0:
	sp = fp
	sp = sp + -64
	Mem0[sp:word64] = x29
	sp = sp + 8
	Mem0[sp:word64] = x30
	x29 = x31 + 0x0000000000000000
	v8 = sp + 32
	Mem0[v8:word64] = x21
	v8 = v8 + 8
	Mem0[v8:word64] = x22
	v11 = sp + 16
	Mem0[v11:word64] = x19
	v11 = v11 + 8
	Mem0[v11:word64] = x20
	Mem0[sp + 48:word64] = x23
	w21 = w1
	x23 = x0
	x20 = x2
	strlen(x0)
	sp = sp + 0xFFFFFFFFFFFFFFF8
	w22 = w0
	branch (w21 & 0x00000000) == 0x00000000 l00000000004A7F7C
	// succ:  l00000000004A7EDC l00000000004A7F7C
l00000000004A7EDC:
	NZCV = cond(w0 - w21)
	branch Test(LT,NV) l00000000004A7F7C
	// succ:  l00000000004A7EE4 l00000000004A7F7C
l00000000004A7EE4:
	branch w21 == 0x00000000 l00000000004A7F74
	// succ:  l00000000004A7EE8 l00000000004A7F74
l00000000004A7EE8:
	w19 = 0x00000000
	// succ:  l00000000004A7F00
l00000000004A7F00:
	w4 = w22 - w19
	x5 = x23 + (int64) ((int32) w19)
l00000000004A7F48:
	w0 = w19 - w21
	// succ:  l00000000004A7F4C
l00000000004A7F4C:
	v24 = sp + 16
	x19 = Mem0[v24:word64]
	v24 = v24 + 8
	x20 = Mem0[v24:word64]
	v25 = sp + 32
	x21 = Mem0[v25:word64]
	v25 = v25 + 8
	x22 = Mem0[v25:word64]
	x23 = Mem0[sp + 48:word64]
	x29 = Mem0[sp:word64]
	sp = sp + 8
	x30 = Mem0[sp:word64]
	sp = sp + 64
	return
	// succ:  _rl_adjust_point_exit
l00000000004A7F74:
	w19 = w21
	goto l00000000004A7F48
	// succ:  l00000000004A7F48
l00000000004A7F7C:
	w0 = 0xFFFFFFFF
	goto l00000000004A7F4C
	// succ:  l00000000004A7F4C
_rl_adjust_point_exit:


// _rl_is_mbchar_matched
// Return size: 0
void _rl_is_mbchar_matched()
_rl_is_mbchar_matched_entry:
	// succ:  l00000000004A7F84
l00000000004A7F84:
	sp = fp
	w2 = w2 - w1
	NZCV = cond(w2 - w4)
	w2 = 0x00000000
	branch Test(LT,NV) l00000000004A7FE4
	// succ:  l00000000004A7F94 l00000000004A7FE4
l00000000004A7F94:
	NZCV = cond(w4 - w2)
	branch Test(LE,ZCV) l00000000004A7FE0
	// succ:  l00000000004A7F9C l00000000004A7FE0
l00000000004A7F9C:
l00000000004A7FE0:
	w2 = 0x00000001
	// succ:  l00000000004A7FE4
l00000000004A7FE4:
	w0 = w2
	return
	// succ:  _rl_is_mbchar_matched_exit
_rl_is_mbchar_matched_exit:


// _rl_char_value
// Return size: 0
void _rl_char_value()
_rl_char_value_entry:
	// succ:  l00000000004A7FF8
l00000000004A7FF8:
	sp = fp
	sp = sp + -64
	Mem0[sp:word64] = x29
	sp = sp + 8
	Mem0[sp:word64] = x30
	x29 = x31 + 0x0000000000000000
	x2 = 0x00000000004E2000
	x2 = x2 + 0xFFFFFFFFFFFFFF80
	w2 = Mem0[x2:word32]
	v10 = sp + 16
	Mem0[v10:word64] = x19
	v10 = v10 + 8
	Mem0[v10:word64] = x20
	x19 = x0
	branch w2 != 0x00000000 l00000000004A8030
	// succ:  l00000000004A8018 l00000000004A8030
l00000000004A8018:
	Mem0[x29 + 48:word64] = x1
	strlen(x0)
	sp = sp + 0xFFFFFFFFFFFFFFF8
	x1 = Mem0[x29 + 48:word64]
	w2 = w0 - 0x00000001
	NZCV = cond(w1 - w2)
	branch Test(LT,NV) l00000000004A8040
	// succ:  l00000000004A8030 l00000000004A8040
l00000000004A8030:
	v17 = Mem0[x19 + (int64) ((int32) w1):byte]
	w0 = (word32) v17
	v18 = sp + 16
	x19 = Mem0[v18:word64]
	v18 = v18 + 8
	x20 = Mem0[v18:word64]
	x29 = Mem0[sp:word64]
	sp = sp + 8
	x30 = Mem0[sp:word64]
	sp = sp + 64
	return
	// succ:  _rl_char_value_exit
l00000000004A8040:
	x3 = x29 + 0x0000000000000020
	Mem0[x3:word64] = 0x0000000000000000
	x3 = x3 + 8
	w2 = w0 - w1
_rl_char_value_exit:


// _rl_find_next_mbchar
// Return size: 0
void _rl_find_next_mbchar()
_rl_find_next_mbchar_entry:
	// succ:  l00000000004A8088
l00000000004A8088:
	sp = fp
	sp = sp + -96
	Mem0[sp:word64] = x29
	sp = sp + 8
	Mem0[sp:word64] = x30
	x29 = x31 + 0x0000000000000000
	NZCV = cond(w1 - w31)
	v11 = sp + 32
	Mem0[v11:word64] = x21
	v11 = v11 + 8
	Mem0[v11:word64] = x22
	v14 = sp + 16
	Mem0[v14:word64] = x19
	v14 = v14 + 8
	Mem0[v14:word64] = x20
	Mem0[sp + 48:word64] = x23
	Mem0[x29 + 64:word64] = 0x0000000000000000
_rl_find_next_mbchar_exit:


// _rl_find_prev_mbchar
// Return size: 0
void _rl_find_prev_mbchar()
_rl_find_prev_mbchar_entry:
	// succ:  l00000000004A8214
l00000000004A8214:
	sp = fp
	sp = sp + -96
	Mem0[sp:word64] = x29
	sp = sp + 8
	Mem0[sp:word64] = x30
	x29 = x31 + 0x0000000000000000
	v8 = sp + 48
	Mem0[v8:word64] = x23
	v8 = v8 + 8
	Mem0[v8:word64] = x24
	v11 = sp + 32
	Mem0[v11:word64] = x21
	v11 = v11 + 8
	Mem0[v11:word64] = x22
	Mem0[sp + 64:word64] = x25
	v15 = sp + 16
	Mem0[v15:word64] = x19
	v15 = v15 + 8
	Mem0[v15:word64] = x20
	x24 = x0
	w21 = w1
	w25 = w2
	Mem0[x29 + 80:word64] = 0x0000000000000000
	strlen(x0)
	sp = sp + 0xFFFFFFFFFFFFFFF8
	w23 = w0
	branch (w21 & 0x00000000) == 0x00000000 l00000000004A82EC
	// succ:  l00000000004A8248 l00000000004A82EC
l00000000004A8248:
	NZCV = cond(w21 - w0)
	branch Test(GT,NZV) l00000000004A82C4
	// succ:  l00000000004A8250 l00000000004A82C4
l00000000004A8250:
	NZCV = cond(w21 - w31)
	branch Test(LE,ZCV) l00000000004A82EC
	// succ:  l00000000004A8258 l00000000004A82EC
l00000000004A8258:
	w22 = 0x00000000
	w19 = w22
	// succ:  l00000000004A8274
l00000000004A8274:
	w3 = w23 - w19
l00000000004A82C4:
	v33 = sp + 16
	x19 = Mem0[v33:word64]
	v33 = v33 + 8
	x20 = Mem0[v33:word64]
	v34 = sp + 32
	x21 = Mem0[v34:word64]
	v34 = v34 + 8
	x22 = Mem0[v34:word64]
	v35 = sp + 48
	x23 = Mem0[v35:word64]
	v35 = v35 + 8
	x24 = Mem0[v35:word64]
	x25 = Mem0[sp + 64:word64]
	x29 = Mem0[sp:word64]
	sp = sp + 8
	x30 = Mem0[sp:word64]
	sp = sp + 96
	return
	// succ:  _rl_find_prev_mbchar_exit
l00000000004A82EC:
	w0 = 0x00000000
	v29 = sp + 16
	x19 = Mem0[v29:word64]
	v29 = v29 + 8
	x20 = Mem0[v29:word64]
	v30 = sp + 32
	x21 = Mem0[v30:word64]
	v30 = v30 + 8
	x22 = Mem0[v30:word64]
	v31 = sp + 48
	x23 = Mem0[v31:word64]
	v31 = v31 + 8
	x24 = Mem0[v31:word64]
	x25 = Mem0[sp + 64:word64]
	x29 = Mem0[sp:word64]
	sp = sp + 8
	x30 = Mem0[sp:word64]
	sp = sp + 96
	return
	// succ:  _rl_find_prev_mbchar_exit
_rl_find_prev_mbchar_exit:


// fn00000000004A8308
// Return size: 0
void fn00000000004A8308()
fn00000000004A8308_entry:
	// succ:  l00000000004A8308
l00000000004A8308:
	sp = fp
	sp = sp + -64
	Mem0[sp:word64] = x29
	sp = sp + 8
	Mem0[sp:word64] = x30
	x29 = x31 + 0x0000000000000000
	v6 = sp + 16
	Mem0[v6:word64] = x19
	v6 = v6 + 8
	Mem0[v6:word64] = x20
	v9 = sp + 32
	Mem0[v9:word64] = x21
	v9 = v9 + 8
	Mem0[v9:word64] = x22
	x20 = x0
	branch x0 == 0x0000000000000000 l00000000004A8390
	// succ:  l00000000004A8320 l00000000004A8390
l00000000004A8320:
	v13 = Mem0[x0:byte]
	w3 = (word32) v13
	branch w3 == 0x00000000 l00000000004A8390
	// succ:  l00000000004A8328 l00000000004A8390
l00000000004A8328:
	Mem0[x29 + 48:word64] = x1
	Mem0[x29 + 56:word64] = x2
	strlen(x0)
	sp = sp + 0xFFFFFFFFFFFFFFF8
	x1 = Mem0[x29 + 48:word64]
	x2 = Mem0[x29 + 56:word64]
	x22 = x0
	x21 = x1 + (int64) ((int32) w2)
	x0 = x21
	strlen(x0)
	sp = sp + 0xFFFFFFFFFFFFFFF8
	w0 = w0 + w22
	w0 = w0 + 0x00000001
l00000000004A8390:
	x21 = x1 + (int64) ((int32) w2)
	x0 = x21
	strlen(x0)
	sp = sp + 0xFFFFFFFFFFFFFFF8
	w0 = w0 + 0x00000001
fn00000000004A8308_exit:


// tilde_expand_word
// Return size: 0
void tilde_expand_word()
tilde_expand_word_entry:
	// succ:  l00000000004A83D0
l00000000004A83D0:
	sp = fp
	sp = sp + -64
	Mem0[sp:word64] = x29
	sp = sp + 8
	Mem0[sp:word64] = x30
	x29 = x31 + 0x0000000000000000
	v8 = sp + 16
	Mem0[v8:word64] = x19
	v8 = v8 + 8
	Mem0[v8:word64] = x20
	v11 = sp + 32
	Mem0[v11:word64] = x21
	v11 = v11 + 8
	Mem0[v11:word64] = x22
	Mem0[sp + 48:word64] = x23
	x19 = x0
	branch x0 == 0x0000000000000000 l00000000004A84D0
	// succ:  l00000000004A83EC l00000000004A84D0
l00000000004A83EC:
	v15 = Mem0[x0:byte]
	w1 = (word32) v15
	w31 = w1 - 0x0000007E
	NZCV = cond(w31)
	branch Test(NE,Z) l00000000004A84E4
	// succ:  l00000000004A83F8 l00000000004A84E4
l00000000004A83F8:
	v19 = Mem0[x0 + 1:byte]
	w1 = (word32) v19
	w31 = w1 - 0x0000002F
	NZCV = cond(w31)
	branch Test(NE,Z) l00000000004A8430
	// succ:  l00000000004A8404 l00000000004A8430
l00000000004A8404:
	x0 = 0x00000000004AB000
	x0 = x0 + 0xFFFFFFFFFFFFFA10
	call sh_get_env_value (retsize: 0;)
	branch x0 == 0x0000000000000000 l00000000004A85A4
	// succ:  l00000000004A8414 l00000000004A85A4
l00000000004A8414:
	x1 = x19
	v21 = sp + 32
	x21 = Mem0[v21:word64]
	v21 = v21 + 8
	x22 = Mem0[v21:word64]
	v22 = sp + 16
	x19 = Mem0[v22:word64]
	v22 = v22 + 8
	x20 = Mem0[v22:word64]
	x23 = Mem0[sp + 48:word64]
	x29 = Mem0[sp:word64]
	sp = sp + 8
	x30 = Mem0[sp:word64]
	sp = sp + 64
	w2 = 0x00000001
	// succ:  l00000000004A842C_thunk_fn00000000004A8308
l00000000004A842C_thunk_fn00000000004A8308:
	call fn00000000004A8308 (retsize: 0;)
	return
	// succ:  tilde_expand_word_exit
l00000000004A8430:
	branch w1 == 0x00000000 l00000000004A8404
	// succ:  l00000000004A8434 l00000000004A8404
l00000000004A8434:
	strlen(x0)
	sp = sp + 0xFFFFFFFFFFFFFFF8
	call xmalloc (retsize: 0;)
	v34 = Mem0[x19 + 1:byte]
	w4 = (word32) v34
	x20 = x0
	branch w4 == 0x00000000 l00000000004A85AC
	// succ:  l00000000004A8448 l00000000004A85AC
l00000000004A8448:
	w31 = w4 - 0x0000002F
	NZCV = cond(w31)
	branch Test(EQ,Z) l00000000004A85AC
	// succ:  l00000000004A8450 l00000000004A85AC
l00000000004A8450:
	x3 = 0x0000000000000002
	x1 = 0x0000000000000001
	goto l00000000004A8468
	// succ:  l00000000004A8468
l00000000004A845C:
	branch w4 == 0x00000000 l00000000004A8484
	// succ:  l00000000004A8460 l00000000004A8484
l00000000004A8460:
	x1 = x3
	x3 = x5
	// succ:  l00000000004A8468
l00000000004A8468:
	x1 = x20 + x1
	Mem0[x1 + -1:byte] = (byte) w4
	v36 = Mem0[x19 + x3:byte]
	w4 = (word32) v36
	w21 = w3
	w31 = w4 - 0x0000002F
	NZCV = cond(w31)
	x5 = x3 + 0x0000000000000001
	branch Test(NE,Z) l00000000004A845C
	// succ:  l00000000004A8484 l00000000004A845C
l00000000004A8484:
	x3 = x3 - 0x0000000000000001
	// succ:  l00000000004A8488
l00000000004A8488:
	x23 = 0x00000000004E2000
	Mem0[x20 + x3:byte] = 0x00
	x0 = x23 + 0xFFFFFFFFFFFFFF88
	x1 = Mem0[x0:word64]
	branch x1 == 0x0000000000000000 l00000000004A8508
	// succ:  l00000000004A849C l00000000004A8508
l00000000004A849C:
	x0 = x20
	call x1 (retsize: 0;)
	x22 = x0
	branch x0 == 0x0000000000000000 l00000000004A8508
	// succ:  l00000000004A84AC l00000000004A8508
l00000000004A84AC:
	x1 = x19
	w2 = w21
	call fn00000000004A8308 (retsize: 0;)
	x19 = x0
	x0 = x20
	call xfree (retsize: 0;)
	x0 = x22
	call xfree (retsize: 0;)
	x0 = x19
	// succ:  l00000000004A84D0
l00000000004A84D0:
	v24 = sp + 16
	x19 = Mem0[v24:word64]
	v24 = v24 + 8
	x20 = Mem0[v24:word64]
	v25 = sp + 32
	x21 = Mem0[v25:word64]
	v25 = v25 + 8
	x22 = Mem0[v25:word64]
	x23 = Mem0[sp + 48:word64]
	x29 = Mem0[sp:word64]
	sp = sp + 8
	x30 = Mem0[sp:word64]
	sp = sp + 64
	return
	// succ:  tilde_expand_word_exit
l00000000004A84E4:
	strlen(x0)
	sp = sp + 0xFFFFFFFFFFFFFFF8
	x0 = x0 + 0x0000000000000001
	call xmalloc (retsize: 0;)
	x1 = x19
	v41 = sp + 32
	x21 = Mem0[v41:word64]
	v41 = v41 + 8
	x22 = Mem0[v41:word64]
	v42 = sp + 16
	x19 = Mem0[v42:word64]
	v42 = v42 + 8
	x20 = Mem0[v42:word64]
	x23 = Mem0[sp + 48:word64]
	x29 = Mem0[sp:word64]
	sp = sp + 8
	x30 = Mem0[sp:word64]
	sp = sp + 64
	strcpy(x0, x1)
	return
	// succ:  tilde_expand_word_exit
l00000000004A8508:
	x0 = x20
	getpwnam(x0)
	sp = sp + 0xFFFFFFFFFFFFFFF8
	branch x0 == 0x0000000000000000 l00000000004A854C
	// succ:  l00000000004A8514 l00000000004A854C
l00000000004A8514:
	x0 = Mem0[x0 + 32:word64]
	w2 = w21
	x1 = x19
	call fn00000000004A8308 (retsize: 0;)
	x21 = x0
	// succ:  l00000000004A8528
l00000000004A8528:
	x0 = x20
	call xfree (retsize: 0;)
	call endpwent (retsize: 0;)
	x0 = x21
	v39 = sp + 16
	x19 = Mem0[v39:word64]
	v39 = v39 + 8
	x20 = Mem0[v39:word64]
	v40 = sp + 32
	x21 = Mem0[v40:word64]
	v40 = v40 + 8
	x22 = Mem0[v40:word64]
	x23 = Mem0[sp + 48:word64]
	x29 = Mem0[sp:word64]
	sp = sp + 8
	x30 = Mem0[sp:word64]
	sp = sp + 64
	return
	// succ:  tilde_expand_word_exit
l00000000004A854C:
	x23 = x23 + 0xFFFFFFFFFFFFFF88
	x1 = Mem0[x23 + 8:word64]
	branch x1 == 0x0000000000000000 l00000000004A8584
	// succ:  l00000000004A8558 l00000000004A8584
l00000000004A8558:
	x0 = x20
	call x1 (retsize: 0;)
	x22 = x0
	branch x0 == 0x0000000000000000 l00000000004A8584
	// succ:  l00000000004A8568 l00000000004A8584
l00000000004A8568:
	w2 = w21
	x1 = x19
	call fn00000000004A8308 (retsize: 0;)
	x21 = x0
	x0 = x22
	call xfree (retsize: 0;)
	branch x21 != 0x0000000000000000 l00000000004A8528
	// succ:  l00000000004A8584 l00000000004A8528
l00000000004A8584:
	x0 = x19
	strlen(x0)
	sp = sp + 0xFFFFFFFFFFFFFFF8
	x0 = x0 + 0x0000000000000001
	call xmalloc (retsize: 0;)
	x1 = x19
	strcpy(x0, x1)
	sp = sp + 0xFFFFFFFFFFFFFFF8
	x21 = x0
	goto l00000000004A8528
	// succ:  l00000000004A8528
l00000000004A85A4:
	call sh_get_home_dir (retsize: 0;)
	goto l00000000004A8414
	// succ:  l00000000004A8414
l00000000004A85AC:
	x3 = 0x0000000000000000
	w21 = 0x00000001
	goto l00000000004A8488
	// succ:  l00000000004A8488
tilde_expand_word_exit:


// tilde_expand
// Return size: 0
void tilde_expand()
tilde_expand_entry:
	// succ:  l00000000004A85B8
l00000000004A85B8:
	sp = fp
	sp = sp + -128
	Mem0[sp:word64] = x29
	sp = sp + 8
	Mem0[sp:word64] = x30
	x29 = x31 + 0x0000000000000000
	w1 = 0x0000007E
	v9 = sp + 48
	Mem0[v9:word64] = x23
	v9 = v9 + 8
	Mem0[v9:word64] = x24
	v12 = sp + 16
	Mem0[v12:word64] = x19
	v12 = v12 + 8
	Mem0[v12:word64] = x20
	v15 = sp + 32
	Mem0[v15:word64] = x21
	v15 = v15 + 8
	Mem0[v15:word64] = x22
	v18 = sp + 64
	Mem0[v18:word64] = x25
	v18 = v18 + 8
	Mem0[v18:word64] = x26
	v21 = sp + 80
	Mem0[v21:word64] = x27
	v21 = v21 + 8
	Mem0[v21:word64] = x28
	x24 = x0
	strchr(x0, x1)
	sp = sp + 0xFFFFFFFFFFFFFFF8
	branch x0 == 0x0000000000000000 l00000000004A88A4
	// succ:  l00000000004A85E4 l00000000004A88A4
l00000000004A85E4:
	x0 = x24
	strlen(x0)
	sp = sp + 0xFFFFFFFFFFFFFFF8
	w27 = w0 + 0x00000010
l00000000004A88A4:
	x0 = x24
	strlen(x0)
	sp = sp + 0xFFFFFFFFFFFFFFF8
	w27 = w0 + 0x00000001
tilde_expand_exit:


// rl_insert_close
// Return size: 0
void rl_insert_close()
rl_insert_close_entry:
	// succ:  l00000000004A88C0
l00000000004A88C0:
	sp = fp
	sp = sp + -256
	Mem0[sp:word64] = x29
	sp = sp + 8
	Mem0[sp:word64] = x30
	x29 = x31 + 0x0000000000000000
	x2 = 0x00000000004E1000
	w2 = Mem0[x2 + 3332:word32]
	v10 = sp + 64
	Mem0[v10:word64] = x25
	v10 = v10 + 8
	Mem0[v10:word64] = x26
	v13 = sp + 16
	Mem0[v13:word64] = x19
	v13 = v13 + 8
	Mem0[v13:word64] = x20
	v16 = sp + 32
	Mem0[v16:word64] = x21
	v16 = v16 + 8
	Mem0[v16:word64] = x22
	v19 = sp + 48
	Mem0[v19:word64] = x23
	v19 = v19 + 8
	Mem0[v19:word64] = x24
	v22 = sp + 80
	Mem0[v22:word64] = x27
	v22 = v22 + 8
	Mem0[v22:word64] = x28
	w25 = w1
	branch w2 != 0x00000000 l00000000004A88FC
	// succ:  l00000000004A88EC l00000000004A88FC
l00000000004A88EC:
	x26 = 0x00000000004DE000
	x2 = x26 + 0x0000000000000660
	w2 = Mem0[x2:word32]
	branch w2 != 0x00000000 l00000000004A8924
	// succ:  l00000000004A88FC l00000000004A8924
l00000000004A88FC:
	w1 = w25
	call _rl_insert_char (retsize: 0;)
	w0 = 0x00000000
	v26 = sp + 16
	x19 = Mem0[v26:word64]
	v26 = v26 + 8
	x20 = Mem0[v26:word64]
	v27 = sp + 32
	x21 = Mem0[v27:word64]
	v27 = v27 + 8
	x22 = Mem0[v27:word64]
	v28 = sp + 48
	x23 = Mem0[v28:word64]
	v28 = v28 + 8
	x24 = Mem0[v28:word64]
	v29 = sp + 64
	x25 = Mem0[v29:word64]
	v29 = v29 + 8
	x26 = Mem0[v29:word64]
	v30 = sp + 80
	x27 = Mem0[v30:word64]
	v30 = v30 + 8
	x28 = Mem0[v30:word64]
	x29 = Mem0[sp:word64]
	sp = sp + 8
	x30 = Mem0[sp:word64]
	sp = sp + 256
	return
	// succ:  rl_insert_close_exit
l00000000004A8924:
	w0 = 0x00000001
	call _rl_insert_char (retsize: 0;)
	x28 = 0x00000000004DE000
	x0 = Mem0[x28 + 1488:word64]
	x27 = 0x00000000004E4000
	call x0 (retsize: 0;)
	w20 = Mem0[x27 + 136:word32]
	x0 = 0x00000000004E1000
	w31 = w25 - 0x0000005D
	NZCV = cond(w31)
	x19 = Mem0[x0 + 3256:word64]
	w20 = w20 - 0x00000002
	branch Test(EQ,Z) l00000000004A8B18
	// succ:  l00000000004A8954 l00000000004A8B18
l00000000004A8954:
	w31 = w25 - 0x0000007D
	NZCV = cond(w31)
	branch Test(EQ,Z) l00000000004A8984
	// succ:  l00000000004A895C l00000000004A8984
l00000000004A895C:
	w31 = w25 - 0x00000029
	NZCV = cond(w31)
	branch Test(EQ,Z) l00000000004A8AE0
	// succ:  l00000000004A8964 l00000000004A8AE0
l00000000004A8964:
	w0 = 0xFFFFFFFF
	// succ:  l00000000004A8968
l00000000004A8968:
	v36 = sp + 16
	x19 = Mem0[v36:word64]
	v36 = v36 + 8
	x20 = Mem0[v36:word64]
	v37 = sp + 32
	x21 = Mem0[v37:word64]
	v37 = v37 + 8
	x22 = Mem0[v37:word64]
	v38 = sp + 48
	x23 = Mem0[v38:word64]
	v38 = v38 + 8
	x24 = Mem0[v38:word64]
	v39 = sp + 64
	x25 = Mem0[v39:word64]
	v39 = v39 + 8
	x26 = Mem0[v39:word64]
	v40 = sp + 80
	x27 = Mem0[v40:word64]
	v40 = v40 + 8
	x28 = Mem0[v40:word64]
	x29 = Mem0[sp:word64]
	sp = sp + 8
	x30 = Mem0[sp:word64]
	sp = sp + 256
	return
	// succ:  rl_insert_close_exit
l00000000004A8984:
	w3 = 0x0000007B
	Mem0[x29 + 240:word32] = w3
	// succ:  l00000000004A898C
l00000000004A898C:
	branch (w20 & 0x00000000) == 0x00000000 l00000000004A8964
	// succ:  l00000000004A8990 l00000000004A8964
l00000000004A8990:
	x0 = 0x00000000004DE000
	x23 = Mem0[x0 + 1416:word64]
	x19 = x19 + (int64) ((int32) w20)
	w24 = 0x00000001
	w21 = 0x00000000
	// succ:  l00000000004A89A4
l00000000004A89A4:
	branch w21 == 0x00000000 l00000000004A89B4
	// succ:  l00000000004A89A8 l00000000004A89B4
l00000000004A89A8:
	v44 = Mem0[x19:byte]
	w0 = (word32) v44
	NZCV = cond(w21 - w0)
	branch Test(EQ,Z) l00000000004A89EC
	// succ:  l00000000004A89B4 l00000000004A89EC
l00000000004A89B4:
	branch x23 == 0x0000000000000000 l00000000004A8AEC
	// succ:  l00000000004A89B8 l00000000004A8AEC
l00000000004A89B8:
	v46 = Mem0[x19:byte]
	w22 = (word32) v46
	x0 = x23
	w1 = w22
	strchr(x0, x1)
	sp = sp + 0xFFFFFFFFFFFFFFF8
	branch x0 == 0x0000000000000000 l00000000004A8AEC
	// succ:  l00000000004A89CC l00000000004A8AEC
l00000000004A89CC:
	w21 = w22
	// succ:  l00000000004A89D0
l00000000004A89D0:
	branch w24 == 0x00000000 l00000000004A89F4
	// succ:  l00000000004A89D4 l00000000004A89F4
l00000000004A89D4:
	w20 = w20 - 0x00000001
	w31 = w20 + 0x00000001
	NZCV = cond(w31)
	x19 = x19 - 0x0000000000000001
	branch Test(NE,Z) l00000000004A89A4
	// succ:  l00000000004A89E4 l00000000004A89A4
l00000000004A89E4:
	w0 = 0xFFFFFFFF
	goto l00000000004A8968
	// succ:  l00000000004A8968
l00000000004A89EC:
	w21 = 0x00000000
	branch w24 != 0x00000000 l00000000004A89D4
	// succ:  l00000000004A89F4 l00000000004A89D4
l00000000004A89F4:
	x0 = x29 + 0x0000000000000060
	x1 = x29 + 0x00000000000000E0
	// succ:  l00000000004A89FC
l00000000004A89FC:
	Mem0[x0:word64] = 0x0000000000000000
	x0 = x0 + 8
	x31 = x0 - x1
	NZCV = cond(x31)
	branch Test(NE,Z) l00000000004A89FC
	// succ:  l00000000004A8A08 l00000000004A89FC
l00000000004A8A08:
	x22 = 0x00000000004E1000
	x0 = Mem0[x22 + 3192:word64]
	x26 = x26 + 0x0000000000000660
	fileno(x0)
	sp = sp + 0xFFFFFFFFFFFFFFF8
l00000000004A8AE0:
	w3 = 0x00000028
	Mem0[x29 + 240:word32] = w3
	goto l00000000004A898C
	// succ:  l00000000004A898C
l00000000004A8AEC:
	branch w21 != 0x00000000 l00000000004A89D0
	// succ:  l00000000004A8AF0 l00000000004A89D0
l00000000004A8AF0:
	v48 = Mem0[x19:byte]
	w0 = (word32) v48
	NZCV = cond(w25 - w0)
	branch Test(EQ,Z) l00000000004A8B10
	// succ:  l00000000004A8AFC l00000000004A8B10
l00000000004A8AFC:
	w3 = Mem0[x29 + 240:word32]
	NZCV = cond(w0 - w3)
	w0 = (word32) Test(EQ,Z)
	w24 = w24 - w0
	goto l00000000004A89D0
	// succ:  l00000000004A89D0
l00000000004A8B10:
	w24 = w24 + 0x00000001
	goto l00000000004A89D0
	// succ:  l00000000004A89D0
l00000000004A8B18:
	w3 = 0x0000005B
	Mem0[x29 + 240:word32] = w3
	goto l00000000004A898C
	// succ:  l00000000004A898C
rl_insert_close_exit:


// _rl_enable_paren_matching
// Return size: 0
void _rl_enable_paren_matching()
_rl_enable_paren_matching_entry:
	// succ:  l00000000004A8B24
l00000000004A8B24:
	sp = fp
	sp = sp + -32
	Mem0[sp:word64] = x29
	sp = sp + 8
	Mem0[sp:word64] = x30
	x29 = x31 + 0x0000000000000000
	v8 = sp + 16
	Mem0[v8:word64] = x19
	v8 = v8 + 8
	Mem0[v8:word64] = x20
	branch w0 != 0x00000000 l00000000004A8B7C
	// succ:  l00000000004A8B34 l00000000004A8B7C
l00000000004A8B34:
	x20 = 0x00000000004A2000
	x20 = x20 + 0xFFFFFFFFFFFFFD50
	// succ:  l00000000004A8B3C
l00000000004A8B3C:
	x19 = 0x00000000004DD000
	x19 = x19 + 0x0000000000000540
	x1 = x20
	x2 = x19
	w0 = 0x00000029
	call rl_bind_key_in_map (retsize: 0;)
	x1 = x20
	x2 = x19
	w0 = 0x0000005D
	call rl_bind_key_in_map (retsize: 0;)
	x1 = x20
	x2 = x19
	v12 = sp + 16
	x19 = Mem0[v12:word64]
	v12 = v12 + 8
	x20 = Mem0[v12:word64]
	x29 = Mem0[sp:word64]
	sp = sp + 8
	x30 = Mem0[sp:word64]
	sp = sp + 32
	w0 = 0x0000007D
	// succ:  l00000000004A8B78_thunk_rl_bind_key_in_map
l00000000004A8B78_thunk_rl_bind_key_in_map:
	call rl_bind_key_in_map (retsize: 0;)
	return
	// succ:  _rl_enable_paren_matching_exit
l00000000004A8B7C:
	x20 = 0x00000000004A8000
	x20 = x20 + 0xFFFFFFFFFFFFF8C0
	goto l00000000004A8B3C
	// succ:  l00000000004A8B3C
_rl_enable_paren_matching_exit:


// rl_set_paren_blink_timeout
// Return size: 0
void rl_set_paren_blink_timeout()
rl_set_paren_blink_timeout_entry:
	// succ:  l00000000004A8B88
l00000000004A8B88:
	sp = fp
	x1 = 0x00000000004DE000
	x1 = x1 + 0x0000000000000660
	NZCV = cond(w0 - w31)
	w2 = Mem0[x1 + 4:word32]
	branch Test(LE,ZCV) l00000000004A8BA0
	// succ:  l00000000004A8B9C l00000000004A8BA0
l00000000004A8B9C:
	Mem0[x1 + 4:word32] = w0
	// succ:  l00000000004A8BA0
l00000000004A8BA0:
	w0 = w2
	return
	// succ:  rl_set_paren_blink_timeout_exit
rl_set_paren_blink_timeout_exit:


// fn00000000004A8BA8
// Return size: 0
void fn00000000004A8BA8()
fn00000000004A8BA8_entry:
	// succ:  l00000000004A8BA8
l00000000004A8BA8:
	sp = fp
	sp = sp + -64
	Mem0[sp:word64] = x29
	sp = sp + 8
	Mem0[sp:word64] = x30
	x29 = x31 + 0x0000000000000000
	v8 = sp + 16
	Mem0[v8:word64] = x19
	v8 = v8 + 8
	Mem0[v8:word64] = x20
	x19 = x1
	x1 = 0x00000000004C5000
	v12 = sp + 32
	Mem0[v12:word64] = x21
	v12 = v12 + 8
	Mem0[v12:word64] = x22
	w20 = w2
	x22 = x0
	x21 = 0x00000000004DE000
	x0 = 0x0000000000000000
	x1 = x1 + 0x00000000000002F0
	w2 = 0x00000005
	v18 = sp + 48
	Mem0[v18:word64] = x23
	v18 = v18 + 8
	Mem0[v18:word64] = x24
	x23 = Mem0[x21 + 1640:word64]
	dcgettext(x0, x1, x2)
	sp = sp + 0xFFFFFFFFFFFFFFF8
	x24 = x0
	x3 = x19
	branch x19 == 0x0000000000000000 l00000000004A8C2C
	// succ:  l00000000004A8BF0 l00000000004A8C2C
l00000000004A8BF0:
	x2 = x24
	w4 = w20
	w1 = 0x00000001
	x0 = x23
	__fprintf_chk(x0, x1, x2, Mem0[sp:<unknown>])
	sp = sp + 0xFFFFFFFFFFFFFFF8
	x0 = Mem0[x21 + 1640:word64]
	fflush(x0)
	sp = sp + 0xFFFFFFFFFFFFFFF8
	x0 = x22
	x1 = x19
	w2 = w20
	v23 = sp + 32
	x21 = Mem0[v23:word64]
	v23 = v23 + 8
	x22 = Mem0[v23:word64]
	v24 = sp + 16
	x19 = Mem0[v24:word64]
	v24 = v24 + 8
	x20 = Mem0[v24:word64]
	v25 = sp + 48
	x23 = Mem0[v25:word64]
	v25 = v25 + 8
	x24 = Mem0[v25:word64]
	x29 = Mem0[sp:word64]
	sp = sp + 8
	x30 = Mem0[sp:word64]
	sp = sp + 64
	// succ:  l00000000004A8C28_thunk_programming_error
l00000000004A8C28_thunk_programming_error:
	call programming_error (retsize: 0;)
	return
	// succ:  fn00000000004A8BA8_exit
l00000000004A8C2C:
	x1 = 0x00000000004BF000
	x0 = x19
	x1 = x1 + 0xFFFFFFFFFFFFFC78
	w2 = 0x00000005
	dcgettext(x0, x1, x2)
	sp = sp + 0xFFFFFFFFFFFFFFF8
	x3 = x0
	goto l00000000004A8BF0
	// succ:  l00000000004A8BF0
fn00000000004A8BA8_exit:


// fn00000000004A8C48
// Return size: 0
void fn00000000004A8C48()
fn00000000004A8C48_entry:
	// succ:  l00000000004A8C48
l00000000004A8C48:
	sp = fp
	sp = sp + -384
	Mem0[sp:word64] = x29
	sp = sp + 8
	Mem0[sp:word64] = x30
	x29 = x31 + 0x0000000000000000
	v8 = sp + 48
	Mem0[v8:word64] = x23
	v8 = v8 + 8
	Mem0[v8:word64] = x24
	x23 = 0x00000000004E2000
	v11 = sp + 16
	Mem0[v11:word64] = x19
	v11 = v11 + 8
	Mem0[v11:word64] = x20
	x20 = x23 + 0xFFFFFFFFFFFFFF98
	w19 = Mem0[x20:word32]
	v15 = sp + 32
	Mem0[v15:word64] = x21
	v15 = v15 + 8
	Mem0[v15:word64] = x22
	v18 = sp + 64
	Mem0[v18:word64] = x25
	v18 = v18 + 8
	Mem0[v18:word64] = x26
	v21 = sp + 80
	Mem0[v21:word64] = x27
	v21 = v21 + 8
	Mem0[v21:word64] = x28
	x21 = x0
	x24 = x1
	w25 = w2
	branch w19 == 0x00000000 l00000000004A8E88
	goto l00000000004A8C80
	// succ:  l00000000004A8C80 l00000000004A8E88
l00000000004A8C48:
l00000000004A8C80:
	x4 = x21 + 0x0000000000000013
	x4 = x4 & 0x0000000000000000
l00000000004A8E88:
	getpagesize()
	sp = sp + 0xFFFFFFFFFFFFFFF8
	w31 = w0 - 0x000003FF
	NZCV = cond(w31)
	branch Test(LE,ZCV) l00000000004A8F3C
	// succ:  l00000000004A8E94 l00000000004A8F3C
l00000000004A8E94:
	w1 = w0 - 0x00000001
	Mem0[x20:word32] = w0
l00000000004A8EA8:
	x0 = 0x0000000000000000
	call sbrk (retsize: 0;)
	x0 = x0 & x20
	x20 = x22 - x0
	x22 = x20 + x22
	x31 = x20 - x31
	NZCV = cond(x31)
l00000000004A8F3C:
	x22 = 0x0000000000000400
	w0 = 0x00000400
	Mem0[x20:word32] = w0
	w19 = w22
	x20 = 0x00000000000003FF
	goto l00000000004A8EA8
	// succ:  l00000000004A8EA8
fn00000000004A8C48_exit:


// fn00000000004A9458
// Return size: 0
void fn00000000004A9458()
fn00000000004A9458_entry:
	// succ:  l00000000004A9458
l00000000004A9458:
	sp = v3
	sp = sp + -32
	Mem0[sp:word64] = x29
	sp = sp + 8
	Mem0[sp:word64] = x30
	x29 = x31 + 0x0000000000000000
	Mem0[sp + 16:word64] = x19
	x19 = x0
	x0 = x1 + x0
	x1 = x2
	w2 = w3
	call fn00000000004A8C48 (retsize: 0;)
	branch x0 == 0x0000000000000000 l00000000004A94A8
	// succ:  l00000000004A947C l00000000004A94A8
l00000000004A947C:
	x1 = x19 - 0x0000000000000001
	NZ = cond(x0 & x1)
	C = false
	V = false
	branch Test(EQ,Z) l00000000004A94A8
	// succ:  l00000000004A9488 l00000000004A94A8
l00000000004A9488:
	x1 = x0 + x1
	x19 = x31 - x19
	x19 = x1 & x19
	x0 = x19 - x0
	Mem0[x19 + -4:word32] = w0
	w0 = 0xFFFFFFD6
	Mem0[x19 + -8:byte] = (byte) w0
	x0 = x19
	// succ:  l00000000004A94A8
l00000000004A94A8:
	x19 = Mem0[sp + 16:word64]
	x29 = Mem0[sp:word64]
	sp = sp + 8
	x30 = Mem0[sp:word64]
	sp = sp + 32
	return
	// succ:  fn00000000004A9458_exit
fn00000000004A9458_exit:


// fn00000000004A94B4
// Return size: 0
void fn00000000004A94B4()
fn00000000004A94B4_entry:
	// succ:  l00000000004A94B4 l00000000004A94B4
l00000000004A94B4:
	sp = fp
	sp = v3
	sp = sp + -96
	Mem0[sp:word64] = x29
	sp = sp + 8
	Mem0[sp:word64] = x30
	x29 = x31 + 0x0000000000000000
	v7 = sp + 48
	Mem0[v7:word64] = x23
	v7 = v7 + 8
	Mem0[v7:word64] = x24
	v10 = sp + 16
	Mem0[v10:word64] = x19
	v10 = v10 + 8
	Mem0[v10:word64] = x20
	v13 = sp + 32
	Mem0[v13:word64] = x21
	v13 = v13 + 8
	Mem0[v13:word64] = x22
	v16 = sp + 64
	Mem0[v16:word64] = x25
	v16 = v16 + 8
	Mem0[v16:word64] = x26
	Mem0[sp + 80:word64] = x27
	x20 = x0
	x24 = x1
	w23 = w2
	branch x0 == 0x0000000000000000 l00000000004A96B8
	// succ:  l00000000004A94E0 l00000000004A96B8
l00000000004A94E0:
	v24 = Mem0[x0 + -8:byte]
	w0 = (word32) v24
	w31 = w0 - 0x000000D6
	NZCV = cond(w31)
	branch Test(EQ,Z) l00000000004A975C
	// succ:  l00000000004A94EC l00000000004A975C
l00000000004A94EC:
	x19 = x20 - 0x0000000000000008
	x22 = x20
	// succ:  l00000000004A94F4
l00000000004A94F4:
	w31 = w0 - 0x000000F7
	NZCV = cond(w31)
	branch Test(EQ,Z) l00000000004A9524
	// succ:  l00000000004A94FC l00000000004A9524
l00000000004A94FC:
	w31 = w0 - 0x00000054
	NZCV = cond(w31)
	branch Test(EQ,Z) l00000000004A9788
	// succ:  l00000000004A9504 l00000000004A9788
l00000000004A9504:
	x1 = 0x00000000004C5000
	x0 = 0x0000000000000000
	x1 = x1 + 0x0000000000000390
	// succ:  l00000000004A9510
l00000000004A9510:
	w2 = 0x00000005
	dcgettext(x0, x1, x2)
	sp = sp + 0xFFFFFFFFFFFFFFF8
	x1 = x24
	w2 = w23
	call fn00000000004A8BA8 (retsize: 0;)
	// succ:  l00000000004A9524
l00000000004A9524:
	v30 = Mem0[x19 + 2:word16]
	w1 = (word32) v30
	w0 = 0x00005555
	NZCV = cond(w1 - w0)
	branch Test(EQ,Z) l00000000004A9548
	// succ:  l00000000004A9534 l00000000004A9548
l00000000004A9534:
	x0 = 0x00000000004C5000
	x0 = x0 + 0x00000000000003C0
	x1 = x24
	w2 = w23
	call fn00000000004A8BA8 (retsize: 0;)
	// succ:  l00000000004A9548
l00000000004A9548:
	v32 = Mem0[x19 + 1:byte]
	w21 = (word32) v32
	w4 = Mem0[x19 + 4:word32]
	x26 = 0x00000000004C5000
	x0 = x26 + 0x0000000000000200
	x25 = Mem0[x0 + (int64) ((int32) w21):word64]
	w0 = w4 + 0x00000013
	x0 = x0 & 0x0000000000000000
	x31 = x0 - x25
	NZCV = cond(x31)
	branch Test(UGT,ZC) l00000000004A96D4
	// succ:  l00000000004A956C l00000000004A96D4
l00000000004A956C:
	w1 = w4
	x5 = x22 + x1
	v37 = Mem0[x22 + x1:byte]
	w1 = (word32) v37
	v38 = Mem0[x5 + 1:byte]
	w0 = (word32) v38
	w3 = 0x00000000
l00000000004A96B8:
	v42 = sp + 16
	x19 = Mem0[v42:word64]
	v42 = v42 + 8
	x20 = Mem0[v42:word64]
	v43 = sp + 32
	x21 = Mem0[v43:word64]
	v43 = v43 + 8
	x22 = Mem0[v43:word64]
	v44 = sp + 48
	x23 = Mem0[v44:word64]
	v44 = v44 + 8
	x24 = Mem0[v44:word64]
	v45 = sp + 64
	x25 = Mem0[v45:word64]
	v45 = v45 + 8
	x26 = Mem0[v45:word64]
	x27 = Mem0[sp + 80:word64]
	x29 = Mem0[sp:word64]
	sp = sp + 8
	x30 = Mem0[sp:word64]
	sp = sp + 96
	return
	// succ:  fn00000000004A94B4_exit
l00000000004A96D4:
	x1 = 0x00000000004C5000
	x1 = x1 + 0x00000000000003E0
	w2 = 0x00000005
	x0 = 0x0000000000000000
	dcgettext(x0, x1, x2)
	sp = sp + 0xFFFFFFFFFFFFFFF8
	x1 = x24
	w2 = w23
	call fn00000000004A8BA8 (retsize: 0;)
	w4 = Mem0[x19 + 4:word32]
	goto l00000000004A956C
	// succ:  l00000000004A956C
l00000000004A975C:
	w22 = Mem0[x20 + -4:word32]
	x22 = x20 - x22
	v41 = Mem0[x22 + -8:byte]
	w0 = (word32) v41
	x19 = x22 - 0x0000000000000008
	goto l00000000004A94F4
	// succ:  l00000000004A94F4
l00000000004A9788:
	x1 = 0x00000000004C5000
	x1 = x1 + 0x0000000000000360
	x0 = 0x0000000000000000
	goto l00000000004A9510
	// succ:  l00000000004A9510
fn00000000004A94B4_exit:


// fn00000000004A9898
// Return size: 0
void fn00000000004A9898()
fn00000000004A9898_entry:
	// succ:  l00000000004A9898
l00000000004A9898:
	sp = v3
	sp = sp + -96
	Mem0[sp:word64] = x29
	sp = sp + 8
	Mem0[sp:word64] = x30
	x29 = x31 + 0x0000000000000000
	v7 = sp + 16
	Mem0[v7:word64] = x19
	v7 = v7 + 8
	Mem0[v7:word64] = x20
	v10 = sp + 32
	Mem0[v10:word64] = x21
	v10 = v10 + 8
	Mem0[v10:word64] = x22
	v13 = sp + 48
	Mem0[v13:word64] = x23
	v13 = v13 + 8
	Mem0[v13:word64] = x24
	v16 = sp + 64
	Mem0[v16:word64] = x25
	v16 = v16 + 8
	Mem0[v16:word64] = x26
	v19 = sp + 80
	Mem0[v19:word64] = x27
	v19 = v19 + 8
	Mem0[v19:word64] = x28
	x20 = x1
	x19 = x0
	x22 = x2
	w21 = w3
	branch x1 == 0x0000000000000000 l00000000004A99EC
	// succ:  l00000000004A98C8 l00000000004A99EC
l00000000004A98C8:
	branch x0 == 0x0000000000000000 l00000000004A9AB8
	// succ:  l00000000004A98CC l00000000004A9AB8
l00000000004A98CC:
	v27 = Mem0[x0 + -7:byte]
	w25 = (word32) v27
	w31 = w25 - 0x0000001D
	NZCV = cond(w31)
	branch Test(GT,NZV) l00000000004A9AA0
	// succ:  l00000000004A98D8 l00000000004A9AA0
l00000000004A98D8:
	v32 = Mem0[x19 + -8:byte]
	w0 = (word32) v32
	w31 = w0 - 0x000000F7
	NZCV = cond(w31)
	branch Test(EQ,Z) l00000000004A9904
	// succ:  l00000000004A98E4 l00000000004A9904
l00000000004A98E4:
	x1 = 0x00000000004C5000
	x1 = x1 + 0x0000000000000450
	w2 = 0x00000005
	x0 = 0x0000000000000000
	dcgettext(x0, x1, x2)
	sp = sp + 0xFFFFFFFFFFFFFFF8
	x1 = x22
	w2 = w21
	call fn00000000004A8BA8 (retsize: 0;)
	// succ:  l00000000004A9904
l00000000004A9904:
	v36 = Mem0[x19 + -12:word16]
	w1 = (word32) v36
	w0 = 0x00005555
	NZCV = cond(w1 - w0)
	branch Test(EQ,Z) l00000000004A9928
	// succ:  l00000000004A9914 l00000000004A9928
l00000000004A9914:
	x0 = 0x00000000004C5000
	x0 = x0 + 0x00000000000003C0
	x1 = x22
	w2 = w21
	call fn00000000004A8BA8 (retsize: 0;)
	// succ:  l00000000004A9928
l00000000004A9928:
	w24 = Mem0[x19 + -4:word32]
	x27 = 0x00000000004C5000
	x0 = x27 + 0x0000000000000200
	x28 = Mem0[x0 + (int64) ((int32) w25):word64]
	w0 = w24 + 0x00000013
	x0 = x0 & 0x0000000000000000
	x31 = x0 - x28
	NZCV = cond(x31)
	branch Test(UGT,ZC) l00000000004A9A78
	// succ:  l00000000004A9948 l00000000004A9A78
l00000000004A9948:
	w26 = w24
	x23 = x19 + x26
	v41 = Mem0[x19 + x26:byte]
	w2 = (word32) v41
	v42 = Mem0[x23 + 1:byte]
	w1 = (word32) v42
	w0 = 0x00000000
l00000000004A99EC:
	x1 = x22
	w2 = w21
	call fn00000000004A94B4 (retsize: 0;)
	x0 = x20
	v48 = sp + 16
	x19 = Mem0[v48:word64]
	v48 = v48 + 8
	x20 = Mem0[v48:word64]
	v49 = sp + 32
	x21 = Mem0[v49:word64]
	v49 = v49 + 8
	x22 = Mem0[v49:word64]
	v50 = sp + 48
	x23 = Mem0[v50:word64]
	v50 = v50 + 8
	x24 = Mem0[v50:word64]
	v51 = sp + 64
	x25 = Mem0[v51:word64]
	v51 = v51 + 8
	x26 = Mem0[v51:word64]
	v52 = sp + 80
	x27 = Mem0[v52:word64]
	v52 = v52 + 8
	x28 = Mem0[v52:word64]
	x29 = Mem0[sp:word64]
	sp = sp + 8
	x30 = Mem0[sp:word64]
	sp = sp + 96
	return
	// succ:  fn00000000004A9898_exit
l00000000004A9A78:
	x1 = 0x00000000004C5000
	x1 = x1 + 0x0000000000000480
	w2 = 0x00000005
	x0 = 0x0000000000000000
	dcgettext(x0, x1, x2)
	sp = sp + 0xFFFFFFFFFFFFFFF8
	x1 = x22
	w2 = w21
	call fn00000000004A8BA8 (retsize: 0;)
	w24 = Mem0[x19 + -4:word32]
	goto l00000000004A9948
	// succ:  l00000000004A9948
l00000000004A9AA0:
	x0 = 0x00000000004C5000
	x1 = x2
	x0 = x0 + 0x0000000000000440
	w2 = w3
	call fn00000000004A8BA8 (retsize: 0;)
	goto l00000000004A98D8
	// succ:  l00000000004A98D8
l00000000004A9AB8:
	v43 = sp + 16
	x19 = Mem0[v43:word64]
	v43 = v43 + 8
	x20 = Mem0[v43:word64]
	v44 = sp + 32
	x21 = Mem0[v44:word64]
	v44 = v44 + 8
	x22 = Mem0[v44:word64]
	v45 = sp + 48
	x23 = Mem0[v45:word64]
	v45 = v45 + 8
	x24 = Mem0[v45:word64]
	v46 = sp + 64
	x25 = Mem0[v46:word64]
	v46 = v46 + 8
	x26 = Mem0[v46:word64]
	v47 = sp + 80
	x27 = Mem0[v47:word64]
	v47 = v47 + 8
	x28 = Mem0[v47:word64]
	x29 = Mem0[sp:word64]
	sp = sp + 8
	x30 = Mem0[sp:word64]
	sp = sp + 96
	x0 = x1
	x1 = x2
	w2 = w3
	// succ:  l00000000004A9ADC_thunk_fn00000000004A8C48
l00000000004A9ADC_thunk_fn00000000004A8C48:
	call fn00000000004A8C48 (retsize: 0;)
	return
	// succ:  fn00000000004A9898_exit
fn00000000004A9898_exit:


// sh_malloc
// Return size: 0
void sh_malloc()
sh_malloc_entry:
	// succ:  l00000000004A9AE0
l00000000004A9AE0:
	sp = fp
	// succ:  l00000000004A9AE0_thunk_fn00000000004A8C48
l00000000004A9AE0_thunk_fn00000000004A8C48:
	call fn00000000004A8C48 (retsize: 0;)
	return
	// succ:  sh_malloc_exit
sh_malloc_exit:


// sh_realloc
// Return size: 0
void sh_realloc()
sh_realloc_entry:
	// succ:  l00000000004A9AE4
l00000000004A9AE4:
	sp = fp
	// succ:  l00000000004A9AE4_thunk_fn00000000004A9898
l00000000004A9AE4_thunk_fn00000000004A9898:
	call fn00000000004A9898 (retsize: 0;)
	return
	// succ:  sh_realloc_exit
sh_realloc_exit:


// sh_free
// Return size: 0
void sh_free()
sh_free_entry:
	// succ:  l00000000004A9AE8
l00000000004A9AE8:
	sp = fp
	// succ:  l00000000004A9AE8_thunk_fn00000000004A94B4
l00000000004A9AE8_thunk_fn00000000004A94B4:
	call fn00000000004A94B4 (retsize: 0;)
	return
	// succ:  sh_free_exit
sh_free_exit:


// sh_memalign
// Return size: 0
void sh_memalign()
sh_memalign_entry:
	// succ:  l00000000004A9AEC
l00000000004A9AEC:
	sp = fp
	// succ:  l00000000004A9AEC_thunk_fn00000000004A9458
l00000000004A9AEC_thunk_fn00000000004A9458:
	call fn00000000004A9458 (retsize: 0;)
	return
	// succ:  sh_memalign_exit
sh_memalign_exit:


// sh_calloc
// Return size: 0
void sh_calloc()
sh_calloc_entry:
	// succ:  l00000000004A9AF0
l00000000004A9AF0:
	sp = fp
	sp = sp + -32
	Mem0[sp:word64] = x29
	sp = sp + 8
	Mem0[sp:word64] = x30
	x29 = x31 + 0x0000000000000000
	v8 = sp + 16
	Mem0[v8:word64] = x19
	v8 = v8 + 8
	Mem0[v8:word64] = x20
	x20 = x0 * x1
	x0 = x20
	x1 = x2
	w2 = w3
	call fn00000000004A8C48 (retsize: 0;)
	x19 = x0
	branch x0 == 0x0000000000000000 l00000000004A9B24
	// succ:  l00000000004A9B18 l00000000004A9B24
l00000000004A9B18:
	w1 = 0x00000000
	x2 = x20
	memset(x0, x1, x2)
	sp = sp + 0xFFFFFFFFFFFFFFF8
	// succ:  l00000000004A9B24
l00000000004A9B24:
	x0 = x19
	v15 = sp + 16
	x19 = Mem0[v15:word64]
	v15 = v15 + 8
	x20 = Mem0[v15:word64]
	x29 = Mem0[sp:word64]
	sp = sp + 8
	x30 = Mem0[sp:word64]
	sp = sp + 32
	return
	// succ:  sh_calloc_exit
sh_calloc_exit:


// sh_cfree
// Return size: 0
void sh_cfree()
sh_cfree_entry:
	// succ:  l00000000004A9B34
l00000000004A9B34:
	sp = fp
	// succ:  l00000000004A9B34_thunk_fn00000000004A94B4
l00000000004A9B34_thunk_fn00000000004A94B4:
	call fn00000000004A94B4 (retsize: 0;)
	return
	// succ:  sh_cfree_exit
sh_cfree_exit:


// sh_valloc
// Return size: 0
void sh_valloc()
sh_valloc_entry:
	// succ:  l00000000004A9B38
l00000000004A9B38:
	sp = fp
	sp = sp + -48
	Mem0[sp:word64] = x29
	sp = sp + 8
	Mem0[sp:word64] = x30
	x29 = x31 + 0x0000000000000000
	w3 = w2
	Mem0[sp + 16:word64] = x19
	Mem0[x29 + 40:word64] = x3
	x19 = x1
	Mem0[x29 + 32:word64] = x0
	getpagesize()
	sp = sp + 0xFFFFFFFFFFFFFFF8
	x1 = Mem0[x29 + 32:word64]
	x2 = x19
	x3 = Mem0[x29 + 40:word64]
	x19 = Mem0[sp + 16:word64]
	x29 = Mem0[sp:word64]
	sp = sp + 8
	x30 = Mem0[sp:word64]
	sp = sp + 48
sh_valloc_exit:


// malloc
// Return size: 0
void malloc()
malloc_entry:
	// succ:  l00000000004A9B74
l00000000004A9B74:
	sp = fp
	x1 = 0x0000000000000000
	w2 = w1
	// succ:  l00000000004A9B7C_thunk_fn00000000004A8C48
l00000000004A9B7C_thunk_fn00000000004A8C48:
	call fn00000000004A8C48 (retsize: 0;)
	return
	// succ:  malloc_exit
malloc_exit:


// realloc
// Return size: 0
void realloc()
realloc_entry:
	// succ:  l00000000004A9B80
l00000000004A9B80:
	sp = fp
	x2 = 0x0000000000000000
	w3 = w2
	// succ:  l00000000004A9B88_thunk_fn00000000004A9898
l00000000004A9B88_thunk_fn00000000004A9898:
	call fn00000000004A9898 (retsize: 0;)
	return
	// succ:  realloc_exit
realloc_exit:


// free
// Return size: 0
void free()
free_entry:
	// succ:  l00000000004A9B8C
l00000000004A9B8C:
	sp = fp
	x1 = 0x0000000000000000
	w2 = w1
	// succ:  l00000000004A9B94_thunk_fn00000000004A94B4
l00000000004A9B94_thunk_fn00000000004A94B4:
	call fn00000000004A94B4 (retsize: 0;)
	return
	// succ:  free_exit
free_exit:


// memalign
// Return size: 0
void memalign()
memalign_entry:
	// succ:  l00000000004A9B98
l00000000004A9B98:
	sp = fp
	x2 = 0x0000000000000000
	w3 = w2
	// succ:  l00000000004A9BA0_thunk_fn00000000004A9458
l00000000004A9BA0_thunk_fn00000000004A9458:
	call fn00000000004A9458 (retsize: 0;)
	return
	// succ:  memalign_exit
memalign_exit:


// valloc
// Return size: 0
void valloc()
valloc_entry:
	// succ:  l00000000004A9BA4
l00000000004A9BA4:
	sp = fp
	sp = sp + -32
	Mem0[sp:word64] = x29
	sp = sp + 8
	Mem0[sp:word64] = x30
	x29 = x31 + 0x0000000000000000
	Mem0[x29 + 16:word64] = x0
	getpagesize()
	sp = sp + 0xFFFFFFFFFFFFFFF8
	x2 = 0x0000000000000000
	x1 = Mem0[x29 + 16:word64]
	x29 = Mem0[sp:word64]
	sp = sp + 8
	x30 = Mem0[sp:word64]
	sp = sp + 32
valloc_exit:


// calloc
// Return size: 0
void calloc()
calloc_entry:
	// succ:  l00000000004A9BCC
l00000000004A9BCC:
	sp = fp
	sp = sp + -32
	Mem0[sp:word64] = x29
	sp = sp + 8
	Mem0[sp:word64] = x30
	x29 = x31 + 0x0000000000000000
	v8 = sp + 16
	Mem0[v8:word64] = x19
	v8 = v8 + 8
	Mem0[v8:word64] = x20
	x20 = x0 * x1
	x1 = 0x0000000000000000
	x0 = x20
	w2 = w1
	call fn00000000004A8C48 (retsize: 0;)
	x19 = x0
	branch x0 == 0x0000000000000000 l00000000004A9C00
	// succ:  l00000000004A9BF4 l00000000004A9C00
l00000000004A9BF4:
	w1 = 0x00000000
	x2 = x20
	memset(x0, x1, x2)
	sp = sp + 0xFFFFFFFFFFFFFFF8
	// succ:  l00000000004A9C00
l00000000004A9C00:
	x0 = x19
	v14 = sp + 16
	x19 = Mem0[v14:word64]
	v14 = v14 + 8
	x20 = Mem0[v14:word64]
	x29 = Mem0[sp:word64]
	sp = sp + 8
	x30 = Mem0[sp:word64]
	sp = sp + 32
	return
	// succ:  calloc_exit
calloc_exit:


// cfree
// Return size: 0
void cfree()
cfree_entry:
	// succ:  l00000000004A9C10
l00000000004A9C10:
	sp = fp
	x1 = 0x0000000000000000
	w2 = w1
	// succ:  l00000000004A9C18_thunk_fn00000000004A94B4
l00000000004A9C18_thunk_fn00000000004A94B4:
	call fn00000000004A94B4 (retsize: 0;)
	return
	// succ:  cfree_exit
cfree_exit:


// __libc_csu_init
// Return size: 0
void __libc_csu_init()
__libc_csu_init_entry:
	// succ:  l00000000004A9CA8
l00000000004A9CA8:
	sp = fp
	sp = sp + -64
	Mem0[sp:word64] = x29
	sp = sp + 8
	Mem0[sp:word64] = x30
	x29 = x31 + 0x0000000000000000
	v8 = sp + 16
	Mem0[v8:word64] = x19
	v8 = v8 + 8
	Mem0[v8:word64] = x20
	v11 = sp + 48
	Mem0[v11:word64] = x23
	v11 = v11 + 8
	Mem0[v11:word64] = x24
	x20 = 0x00000000004D5000
	x24 = 0x00000000004D5000
	x24 = x24 + 0xFFFFFFFFFFFFFDD0
	x20 = x20 + 0xFFFFFFFFFFFFFDD8
	x20 = x20 - x24
__libc_csu_init_exit:


// __libc_csu_fini
// Return size: 0
void __libc_csu_fini()
__libc_csu_fini_entry:
	// succ:  l00000000004A9D20
l00000000004A9D20:
	sp = fp
	return
	// succ:  __libc_csu_fini_exit
__libc_csu_fini_exit:


// _fini
// Return size: 0
void _fini()
_fini_entry:
	// succ:  l00000000004A9D24
l00000000004A9D24:
	sp = fp
	sp = sp + -16
	Mem0[sp:word64] = x29
	sp = sp + 8
	Mem0[sp:word64] = x30
	x29 = x31 + 0x0000000000000000
	x29 = Mem0[sp:word64]
	sp = sp + 8
	x30 = Mem0[sp:word64]
	sp = sp + 16
	return
	// succ:  _fini_exit
_fini_exit:


