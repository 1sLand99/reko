// fn10001000
// Return size: 4
PyObject * fn10001000(PyObject * ptrArg04, PyObject * ptrArg08)
fn10001000_entry:
	// succ:  l10001000
l10001000:
	Mem0[fp + 0x00000004:(ptr PyObject)] = ptrArg04
	Mem0[fp + 0x00000008:(ptr PyObject)] = ptrArg08
	esp = fp
	Top = 0
	edx = Mem0[esp + 0x00000008:word32]
	esp = esp - 0x00000008
	SCZO = cond(esp)
	eax = esp
	esp = esp - 0x00000004
	Mem0[esp:word32] = eax
	ecx = esp + 0x00000008
	esp = esp - 0x00000004
	Mem0[esp:word32] = ecx
	esp = esp - 0x00000004
	Mem0[esp:word32] = 0x10002144
	esp = esp - 0x00000004
	Mem0[esp:word32] = edx
	eax = PyArg_ParseTuple(Mem0[esp:(ptr PyObject)], Mem0[esp + 4:(ptr char)], Mem0[esp + 8:(ptr int32)], Mem0[esp + 12:(ptr int32)])
	esp = esp + 0x00000010
	SCZO = cond(esp)
	SZO = cond(eax & eax)
	C = false
	branch Test(NE,Z) l10001027
	// succ:  l10001023 l10001027
l10001023:
	esp = esp + 0x00000008
	SCZO = cond(esp)
	return
	// succ:  fn10001000_exit
l10001027:
	eax = Mem0[esp:word32]
	ecx = Mem0[esp + 0x00000004:word32]
	ecx = ecx + eax
	SCZO = cond(ecx)
	esp = esp - 0x00000004
	Mem0[esp:word32] = ecx
	esp = esp - 0x00000004
	Mem0[esp:word32] = 0x1000214C
	eax = Py_BuildValue(Mem0[esp:(ptr char)], Mem0[esp + 4:int32])
	esp = esp + 0x00000008
	SCZO = cond(esp)
	esp = esp + 0x00000008
	SCZO = cond(esp)
	return
	// succ:  fn10001000_exit
fn10001000_exit:


// fn10001050
// Return size: 4
PyObject * fn10001050(PyObject * ptrArg04, PyObject * ptrArg08)
fn10001050_entry:
	// succ:  l10001050
l10001050:
	Mem0[fp + 0x00000004:(ptr PyObject)] = ptrArg04
	Mem0[fp + 0x00000008:(ptr PyObject)] = ptrArg08
	esp = fp
	Top = 0
	edx = Mem0[esp + 0x00000008:word32]
	esp = esp - 0x00000008
	SCZO = cond(esp)
	eax = esp + 0x00000004
	esp = esp - 0x00000004
	Mem0[esp:word32] = eax
	ecx = esp + 0x00000004
	esp = esp - 0x00000004
	Mem0[esp:word32] = ecx
	esp = esp - 0x00000004
	Mem0[esp:word32] = 0x10002150
	esp = esp - 0x00000004
	Mem0[esp:word32] = edx
	eax = PyArg_ParseTuple(Mem0[esp:(ptr PyObject)], Mem0[esp + 4:(ptr char)], Mem0[esp + 8:(ptr int32)], Mem0[esp + 12:(ptr int32)])
	esp = esp + 0x00000010
	SCZO = cond(esp)
	SZO = cond(eax & eax)
	C = false
	branch Test(NE,Z) l10001078
	// succ:  l10001074 l10001078
l10001074:
	esp = esp + 0x00000008
	SCZO = cond(esp)
	return
	// succ:  fn10001050_exit
l10001078:
	eax = Mem0[esp:word32]
	eax = eax - Mem0[esp + 0x00000004:word32]
	SCZO = cond(eax)
	esp = esp - 0x00000004
	Mem0[esp:word32] = eax
	esp = esp - 0x00000004
	Mem0[esp:word32] = 0x1000214C
	eax = Py_BuildValue(Mem0[esp:(ptr char)], Mem0[esp + 4:int32])
	esp = esp + 0x00000008
	SCZO = cond(esp)
	esp = esp + 0x00000008
	SCZO = cond(esp)
	return
	// succ:  fn10001050_exit
fn10001050_exit:


// fn100010A0
// Return size: 4
PyObject * fn100010A0(PyObject * ptrArg04, PyObject * ptrArg08)
fn100010A0_entry:
	// succ:  l100010A0
l100010A0:
	Mem0[fp + 0x00000004:(ptr PyObject)] = ptrArg04
	Mem0[fp + 0x00000008:(ptr PyObject)] = ptrArg08
	esp = fp
	Top = 0
	edx = Mem0[esp + 0x00000008:word32]
	esp = esp - 0x00000008
	SCZO = cond(esp)
	eax = esp + 0x00000004
	esp = esp - 0x00000004
	Mem0[esp:word32] = eax
	ecx = esp + 0x00000004
	esp = esp - 0x00000004
	Mem0[esp:word32] = ecx
	esp = esp - 0x00000004
	Mem0[esp:word32] = 0x10002158
	esp = esp - 0x00000004
	Mem0[esp:word32] = edx
	eax = PyArg_ParseTuple(Mem0[esp:(ptr PyObject)], Mem0[esp + 4:(ptr char)], Mem0[esp + 8:(ptr int32)], Mem0[esp + 12:(ptr int32)])
	esp = esp + 0x00000010
	SCZO = cond(esp)
	SZO = cond(eax & eax)
	C = false
	branch Test(NE,Z) l100010C8
	// succ:  l100010C4 l100010C8
l100010C4:
	esp = esp + 0x00000008
	SCZO = cond(esp)
	return
	// succ:  fn100010A0_exit
l100010C8:
	eax = Mem0[esp:word32]
	edx_eax = (int64) eax
	v11 = edx_eax
	edx = (int32) (v11 % Mem0[esp + 0x00000004:word32])
	eax = (int32) (v11 / Mem0[esp + 0x00000004:word32])
	SCZO = cond(eax)
	esp = esp - 0x00000004
	Mem0[esp:word32] = eax
	esp = esp - 0x00000004
	Mem0[esp:word32] = 0x1000214C
	eax = Py_BuildValue(Mem0[esp:(ptr char)], Mem0[esp + 4:int32])
	esp = esp + 0x00000008
	SCZO = cond(esp)
	esp = esp + 0x00000008
	SCZO = cond(esp)
	return
	// succ:  fn100010A0_exit
fn100010A0_exit:


// fn100010F0
// Return size: 4
PyObject * fn100010F0(PyObject * ptrArg04, PyObject * ptrArg08)
fn100010F0_entry:
	// succ:  l100010F0
l100010F0:
	Mem0[fp + 0x00000004:(ptr PyObject)] = ptrArg04
	Mem0[fp + 0x00000008:(ptr PyObject)] = ptrArg08
	esp = fp
	Top = 0
	edx = Mem0[esp + 0x00000008:word32]
	esp = esp - 0x00000008
	SCZO = cond(esp)
	eax = esp + 0x00000004
	esp = esp - 0x00000004
	Mem0[esp:word32] = eax
	ecx = esp + 0x00000004
	esp = esp - 0x00000004
	Mem0[esp:word32] = ecx
	esp = esp - 0x00000004
	Mem0[esp:word32] = 0x10002160
	esp = esp - 0x00000004
	Mem0[esp:word32] = edx
	eax = PyArg_ParseTuple(Mem0[esp:(ptr PyObject)], Mem0[esp + 4:(ptr char)], Mem0[esp + 8:(ptr real32)], Mem0[esp + 12:(ptr real32)])
	esp = esp + 0x00000010
	SCZO = cond(esp)
	SZO = cond(eax & eax)
	C = false
	branch Test(NE,Z) l10001118
	// succ:  l10001114 l10001118
l10001114:
	esp = esp + 0x00000008
	SCZO = cond(esp)
	return
	// succ:  fn100010F0_exit
l10001118:
	Top = Top - 0x01
	ST[Top:real64] = (real64) Mem0[esp:real32]
	esp = esp - 0x00000008
	SCZO = cond(esp)
	ST[Top:real64] = ST[Top:real64] / Mem0[esp + 0x0000000C:real32]
	Mem0[esp:real64] = ST[Top:real64]
	Top = Top + 1
	esp = esp - 0x00000004
	Mem0[esp:word32] = 0x10002168
	eax = Py_BuildValue(Mem0[esp:(ptr char)], Mem0[esp + 4:real64])
	esp = esp + 0x0000000C
	SCZO = cond(esp)
	esp = esp + 0x00000008
	SCZO = cond(esp)
	return
	// succ:  fn100010F0_exit
fn100010F0_exit:


// py_unused
// Return size: 4
PyObject * py_unused(PyObject * self, PyObject * args)
py_unused_entry:
	// succ:  l10001140
l10001140:
	Mem0[fp + 0x00000004:(ptr PyObject)] = self
	Mem0[fp + 0x00000008:(ptr PyObject)] = args
	esp = fp
	Top = 0
	eax = Mem0[esp + 0x00000008:word32]
	esp = esp - 0x00000004
	Mem0[esp:word32] = 0x1000216C
	esp = esp - 0x00000004
	Mem0[esp:word32] = eax
	eax = PyArg_ParseTuple(Mem0[esp:(ptr PyObject)], Mem0[esp + 4:(ptr char)])
	esp = esp + 0x00000008
	SCZO = cond(esp)
	SZO = cond(eax & eax)
	C = false
	branch Test(NE,Z) l10001158
	// succ:  l10001157 l10001158
l10001157:
	return
	// succ:  py_unused_exit
l10001158:
	eax = &_Py_NoneStruct
	v8 = Mem0[eax:word32] + 0x00000001
	Mem0[eax:word32] = v8
	SCZO = cond(v8)
	eax = &_Py_NoneStruct
	return
	// succ:  py_unused_exit
py_unused_exit:


// initpySample
// Return size: 4
define initpySample
initpySample_entry:
	// succ:  l10001170
l10001170:
	esp = fp
	Top = 0
	esp = esp - 0x00000004
	Mem0[esp:word32] = 0x000003EF
	esp = esp - 0x00000004
	Mem0[esp:word32] = 0x00000000
	esp = esp - 0x00000004
	Mem0[esp:word32] = 0x00000000
	esp = esp - 0x00000004
	Mem0[esp:word32] = 0x10003010
	esp = esp - 0x00000004
	Mem0[esp:word32] = 0x10002174
	eax = Py_InitModule4(Mem0[esp:(ptr char)], Mem0[esp + 4:(ptr PyMethodDef)], Mem0[esp + 8:(ptr char)], Mem0[esp + 12:(ptr PyObject)], Mem0[esp + 16:int32])
	esp = esp + 0x00000014
	SCZO = cond(esp)
	return
	// succ:  initpySample_exit
initpySample_exit:


// fn100011E9
// Return size: 4
define fn100011E9
fn100011E9_entry:
	// succ:  l100011E9
l100011E9:
	esp = fp
	Top = 0
	eax = Mem0[esp + 0x00000008:word32]
	esp = esp - 0x00000004
	Mem0[esp:word32] = ebp
	ebp = ebp ^ ebp
	SZO = cond(ebp)
	C = false
	SCZO = cond(eax - ebp)
	branch Test(NE,Z) l10001202
	// succ:  l100011F4 l10001202
l100011F4:
	SCZO = cond(Mem0[0x10003070:word32] - ebp)
	branch Test(LE,SZO) l10001233
	// succ:  l100011FC l10001233
l100011FC:
	v9 = Mem0[0x10003070:word32] - 0x00000001
	Mem0[0x10003070:word32] = v9
	SZO = cond(v9)
	// succ:  l10001202
l10001202:
	SCZO = cond(eax - 0x00000001)
	ecx = adjust_fdiv
	ecx = Mem0[ecx:word32]
	esp = esp - 0x00000004
	Mem0[esp:word32] = ebx
	esp = esp - 0x00000004
	Mem0[esp:word32] = esi
	esp = esp - 0x00000004
	Mem0[esp:word32] = edi
	Mem0[0x100033A4:word32] = ecx
	branch Test(NE,Z) l100012E8
	// succ:  l1000121C l100012E8
l1000121C:
	eax = Mem0[fs:0x00000018:word32]
	edi = Mem0[eax + 0x00000004:word32]
	ebx = InterlockedCompareExchange
	esp = esp - 0x00000004
	Mem0[esp:word32] = ebp
	esi = 0x100033AC
	goto l1000124B
	// succ:  l1000124B
l10001233:
	eax = eax ^ eax
	SZO = cond(eax)
	C = false
	goto l10001384
	// succ:  l10001384
l1000123A:
	SCZO = cond(eax - edi)
	branch Test(EQ,Z) l10001255
	// succ:  l1000123E l10001255
l1000123E:
	esp = esp - 0x00000004
	Mem0[esp:word32] = 0x000003E8
	Sleep(Mem0[esp:DWORD])
	esp = esp + 0x00000004
	esp = esp - 0x00000004
	Mem0[esp:word32] = 0x00000000
	// succ:  l1000124B
l1000124B:
	esp = esp - 0x00000004
	Mem0[esp:word32] = edi
	esp = esp - 0x00000004
	Mem0[esp:word32] = esi
	eax = InterlockedCompareExchange(Mem0[esp:(ptr LONG)], Mem0[esp + 4:LONG], Mem0[esp + 8:LONG])
	esp = esp + 0x0000000C
	SZO = cond(eax & eax)
	C = false
	branch Test(NE,Z) l1000123A
	// succ:  l10001253 l1000123A
l10001253:
	goto l10001258
	// succ:  l10001258
l10001255:
	ebp = ebp ^ ebp
	SZO = cond(ebp)
	C = false
	ebp = ebp + 0x00000001
	SZO = cond(ebp)
	// succ:  l10001258
l10001258:
	eax = Mem0[0x100033A8:word32]
	SZO = cond(eax & eax)
	C = false
	esp = esp - 0x00000004
	Mem0[esp:word32] = 0x00000002
	edi = Mem0[esp:word32]
	esp = esp + 0x00000004
	branch Test(EQ,Z) l1000126D
	// succ:  l10001264 l1000126D
l10001264:
	esp = esp - 0x00000004
	Mem0[esp:word32] = 0x0000001F
	_amsg_exit(Mem0[esp:int32])
l1000126D:
	esp = esp - 0x00000004
	Mem0[esp:word32] = 0x100020A8
	esp = esp - 0x00000004
	Mem0[esp:word32] = 0x100020A0
	Mem0[0x100033A8:word32] = 0x00000001
	eax = _initterm_e(Mem0[esp:(ptr PVFV)], Mem0[esp + 4:(ptr PVFV)])
	SZO = cond(eax & eax)
	C = false
	ecx = Mem0[esp:word32]
	esp = esp + 0x00000004
	ecx = Mem0[esp:word32]
	esp = esp + 0x00000004
	branch Test(EQ,Z) l10001293
	// succ:  l1000128C l10001293
l1000128C:
	eax = eax ^ eax
	SZO = cond(eax)
	C = false
	goto l10001381
	// succ:  l10001381
l10001293:
	esp = esp - 0x00000004
	Mem0[esp:word32] = 0x1000209C
	esp = esp - 0x00000004
	Mem0[esp:word32] = 0x10002098
	_initterm(Mem0[esp:(ptr PVFV)], Mem0[esp + 4:(ptr PVFV)])
	ecx = Mem0[esp:word32]
	esp = esp + 0x00000004
	Mem0[0x100033A8:word32] = edi
	SZO = cond(ebp & ebp)
	C = false
	ecx = Mem0[esp:word32]
	esp = esp + 0x00000004
	branch Test(NE,Z) l100012B6
	// succ:  l100012AE l100012B6
l100012AE:
	esp = esp - 0x00000004
	Mem0[esp:word32] = ebp
	esp = esp - 0x00000004
	Mem0[esp:word32] = esi
	eax = InterlockedExchange(Mem0[esp:(ptr LONG)], Mem0[esp + 4:LONG])
	esp = esp + 0x00000008
	// succ:  l100012B6
l100012B6:
	SCZO = cond(Mem0[0x100033B8:word32] - 0x00000000)
	branch Test(EQ,Z) l100012DD
	// succ:  l100012BF l100012DD
l100012BF:
	esp = esp - 0x00000004
	Mem0[esp:word32] = 0x100033B8
	call fn10001742 (retsize: 4;)
	SZO = cond(eax & eax)
	C = false
	ecx = Mem0[esp:word32]
	esp = esp + 0x00000004
	branch Test(EQ,Z) l100012DD
	// succ:  l100012CE l100012DD
l100012CE:
	v17 = Mem0[esp + 0x0000001C:word32]
	esp = esp - 0x00000004
	Mem0[esp:word32] = v17
	esp = esp - 0x00000004
	Mem0[esp:word32] = edi
	v18 = Mem0[esp + 0x0000001C:word32]
	esp = esp - 0x00000004
	Mem0[esp:word32] = v18
	call Mem0[0x100033B8:word32] (retsize: 4;)
	// succ:  l100012DD
l100012DD:
	v19 = Mem0[0x10003070:word32] + 0x00000001
	Mem0[0x10003070:word32] = v19
	SZO = cond(v19)
	goto l1000137E
	// succ:  l1000137E
l100012E8:
	SCZO = cond(eax - ebp)
	branch Test(NE,Z) l1000137E
	// succ:  l100012F0 l1000137E
l100012F0:
	edi = InterlockedCompareExchange
	esi = 0x100033AC
	goto l10001308
	// succ:  l10001308
l100012FD:
	esp = esp - 0x00000004
	Mem0[esp:word32] = 0x000003E8
	Sleep(Mem0[esp:DWORD])
	esp = esp + 0x00000004
	// succ:  l10001308
l10001308:
	esp = esp - 0x00000004
	Mem0[esp:word32] = ebp
	esp = esp - 0x00000004
	Mem0[esp:word32] = 0x00000001
	esp = esp - 0x00000004
	Mem0[esp:word32] = esi
	eax = InterlockedCompareExchange(Mem0[esp:(ptr LONG)], Mem0[esp + 4:LONG], Mem0[esp + 8:LONG])
	esp = esp + 0x0000000C
	SZO = cond(eax & eax)
	C = false
	branch Test(NE,Z) l100012FD
	// succ:  l10001312 l100012FD
l10001312:
	eax = Mem0[0x100033A8:word32]
	SCZO = cond(eax - 0x00000002)
	branch Test(EQ,Z) l10001326
	// succ:  l1000131C l10001326
l1000131C:
	esp = esp - 0x00000004
	Mem0[esp:word32] = 0x0000001F
	_amsg_exit(Mem0[esp:int32])
l10001326:
	v15 = Mem0[0x100033B4:word32]
	esp = esp - 0x00000004
	Mem0[esp:word32] = v15
	edi = _decode_pointer
	eax = _decode_pointer(Mem0[esp:(ptr void)])
	ebx = eax
	SZO = cond(ebx & ebx)
	C = false
	ecx = Mem0[esp:word32]
	esp = esp + 0x00000004
	branch Test(EQ,Z) l1000136F
	// succ:  l1000133B l1000136F
l1000133B:
	v16 = Mem0[0x100033B0:word32]
	esp = esp - 0x00000004
	Mem0[esp:word32] = v16
	eax = _decode_pointer(Mem0[esp:(ptr void)])
	ecx = Mem0[esp:word32]
	esp = esp + 0x00000004
	edi = eax
	goto l10001350
	// succ:  l10001350
l10001348:
	eax = Mem0[edi:word32]
	SZO = cond(eax & eax)
	C = false
	branch Test(EQ,Z) l10001350
	// succ:  l1000134E l10001350
l1000134E:
	call eax (retsize: 4;)
	// succ:  l10001350
l10001350:
	edi = edi - 0x00000004
	SCZO = cond(edi)
	SCZO = cond(edi - ebx)
	branch Test(UGE,C) l10001348
	// succ:  l10001357 l10001348
l10001357:
	esp = esp - 0x00000004
	Mem0[esp:word32] = ebx
	free(Mem0[esp:(ptr void)])
	ecx = Mem0[esp:word32]
	esp = esp + 0x00000004
	eax = _encoded_null()
	Mem0[0x100033B0:word32] = eax
	Mem0[0x100033B4:word32] = eax
	// succ:  l1000136F
l1000136F:
	esp = esp - 0x00000004
	Mem0[esp:word32] = 0x00000000
	esp = esp - 0x00000004
	Mem0[esp:word32] = esi
	Mem0[0x100033A8:word32] = ebp
	eax = InterlockedExchange(Mem0[esp:(ptr LONG)], Mem0[esp + 4:LONG])
	esp = esp + 0x00000008
	// succ:  l1000137E
l1000137E:
	eax = eax ^ eax
	SZO = cond(eax)
	C = false
	eax = eax + 0x00000001
	SZO = cond(eax)
	// succ:  l10001381
l10001381:
	edi = Mem0[esp:word32]
	esp = esp + 0x00000004
	esi = Mem0[esp:word32]
	esp = esp + 0x00000004
	ebx = Mem0[esp:word32]
	esp = esp + 0x00000004
	// succ:  l10001384
l10001384:
	ebp = Mem0[esp:word32]
	esp = esp + 0x00000004
	return
	// succ:  fn100011E9_exit
fn100011E9_exit:


// fn10001388
// Return size: 4
define fn10001388
fn10001388_entry:
	// succ:  l10001388
l10001388:
	esp = fp
	Top = 0
	esp = esp - 0x00000004
	Mem0[esp:word32] = 0x00000010
	esp = esp - 0x00000004
	Mem0[esp:word32] = 0x100021E8
	call fn100017E8 (retsize: 4;)
	edi = ecx
	esi = edx
	ebx = Mem0[ebp + 0x00000008:word32]
	eax = eax ^ eax
	SZO = cond(eax)
	C = false
	eax = eax + 0x00000001
	SZO = cond(eax)
	Mem0[ebp - 0x0000001C:word32] = eax
	ecx = ecx ^ ecx
	SZO = cond(ecx)
	C = false
	Mem0[ebp - 0x00000004:word32] = ecx
	Mem0[0x10003008:word32] = esi
	Mem0[ebp - 0x00000004:word32] = eax
	SCZO = cond(esi - ecx)
	branch Test(NE,Z) l100013C3
	// succ:  l100013B3 l100013C3
l100013B3:
	SCZO = cond(Mem0[0x10003070:word32] - ecx)
	branch Test(NE,Z) l100013C3
	// succ:  l100013BB l100013C3
l100013BB:
	Mem0[ebp - 0x0000001C:word32] = ecx
	goto l1000147A
	// succ:  l1000147A
l100013C3:
	SCZO = cond(esi - eax)
	branch Test(EQ,Z) l100013CC
	// succ:  l100013C7 l100013CC
l100013C7:
	SCZO = cond(esi - 0x00000002)
	branch Test(NE,Z) l100013FA
	// succ:  l100013CC l100013FA
l100013CC:
	eax = Mem0[0x100020CC:word32]
	SCZO = cond(eax - ecx)
	branch Test(EQ,Z) l100013DD
	// succ:  l100013D5 l100013DD
l100013D5:
	esp = esp - 0x00000004
	Mem0[esp:word32] = edi
	esp = esp - 0x00000004
	Mem0[esp:word32] = esi
	esp = esp - 0x00000004
	Mem0[esp:word32] = ebx
	call eax (retsize: 4;)
	Mem0[ebp - 0x0000001C:word32] = eax
	// succ:  l100013DD
l100013DD:
	SCZO = cond(Mem0[ebp - 0x0000001C:word32] - 0x00000000)
	branch Test(EQ,Z) l1000147A
	// succ:  l100013E7 l1000147A
l100013E7:
	esp = esp - 0x00000004
	Mem0[esp:word32] = edi
	esp = esp - 0x00000004
	Mem0[esp:word32] = esi
	esp = esp - 0x00000004
	Mem0[esp:word32] = ebx
	call fn100011E9 (retsize: 4;)
	esp = esp + 0x0000000C
	Mem0[ebp - 0x0000001C:word32] = eax
	SZO = cond(eax & eax)
	C = false
	branch Test(EQ,Z) l1000147A
	// succ:  l100013FA l1000147A
l100013FA:
	esp = esp - 0x00000004
	Mem0[esp:word32] = edi
	esp = esp - 0x00000004
	Mem0[esp:word32] = esi
	esp = esp - 0x00000004
	Mem0[esp:word32] = ebx
	call fn100017C6 (retsize: 4;)
	esp = esp + 0x0000000C
	Mem0[ebp - 0x0000001C:word32] = eax
	SCZO = cond(esi - 0x00000001)
	branch Test(NE,Z) l1000142E
	// succ:  l1000140A l1000142E
l1000140A:
	SZO = cond(eax & eax)
	C = false
	branch Test(NE,Z) l1000142E
	// succ:  l1000140E l1000142E
l1000140E:
	esp = esp - 0x00000004
	Mem0[esp:word32] = edi
	esp = esp - 0x00000004
	Mem0[esp:word32] = eax
	esp = esp - 0x00000004
	Mem0[esp:word32] = ebx
	call fn100017C6 (retsize: 4;)
	esp = esp + 0x0000000C
	esp = esp - 0x00000004
	Mem0[esp:word32] = edi
	esp = esp - 0x00000004
	Mem0[esp:word32] = 0x00000000
	esp = esp - 0x00000004
	Mem0[esp:word32] = ebx
	call fn100011E9 (retsize: 4;)
	esp = esp + 0x0000000C
	eax = Mem0[0x100020CC:word32]
	SZO = cond(eax & eax)
	C = false
	branch Test(EQ,Z) l1000142E
	// succ:  l10001428 l1000142E
l10001428:
	esp = esp - 0x00000004
	Mem0[esp:word32] = edi
	esp = esp - 0x00000004
	Mem0[esp:word32] = 0x00000000
	esp = esp - 0x00000004
	Mem0[esp:word32] = ebx
	call eax (retsize: 4;)
	// succ:  l1000142E
l1000142E:
	SZO = cond(esi & esi)
	C = false
	branch Test(EQ,Z) l10001437
	// succ:  l10001432 l10001437
l10001432:
	SCZO = cond(esi - 0x00000003)
	branch Test(NE,Z) l1000147A
	// succ:  l10001437 l1000147A
l10001437:
	esp = esp - 0x00000004
	Mem0[esp:word32] = edi
	esp = esp - 0x00000004
	Mem0[esp:word32] = esi
	esp = esp - 0x00000004
	Mem0[esp:word32] = ebx
	call fn100011E9 (retsize: 4;)
	esp = esp + 0x0000000C
	SZO = cond(eax & eax)
	C = false
	branch Test(NE,Z) l10001446
	// succ:  l10001443 l10001446
l10001443:
	v15 = Mem0[ebp - 0x0000001C:word32] & eax
	Mem0[ebp - 0x0000001C:word32] = v15
	SZO = cond(Mem0[ebp - 0x0000001C:word32])
	C = false
	// succ:  l10001446
l10001446:
	SCZO = cond(Mem0[ebp - 0x0000001C:word32] - 0x00000000)
	branch Test(EQ,Z) l1000147A
	// succ:  l1000144C l1000147A
l1000144C:
	eax = Mem0[0x100020CC:word32]
	SZO = cond(eax & eax)
	C = false
	branch Test(EQ,Z) l1000147A
	// succ:  l10001455 l1000147A
l10001455:
	esp = esp - 0x00000004
	Mem0[esp:word32] = edi
	esp = esp - 0x00000004
	Mem0[esp:word32] = esi
	esp = esp - 0x00000004
	Mem0[esp:word32] = ebx
	call eax (retsize: 4;)
	Mem0[ebp - 0x0000001C:word32] = eax
	// succ:  l1000147A
l1000147A:
	v14 = Mem0[ebp - 0x00000004:word32] & 0x00000000
	Mem0[ebp - 0x00000004:word32] = v14
	SZO = cond(Mem0[ebp - 0x00000004:word32])
	C = false
	Mem0[ebp - 0x00000004:word32] = 0xFFFFFFFE
	call fn10001493 (retsize: 4;)
	eax = Mem0[ebp - 0x0000001C:word32]
	call fn1000182D (retsize: 4;)
	return
	// succ:  fn10001388_exit
fn10001388_exit:


// fn10001493
// Return size: 4
define fn10001493
fn10001493_entry:
	// succ:  l10001493
l10001493:
	esp = fp
	Top = 0
	Mem0[0x10003008:word32] = 0xFFFFFFFF
	return
	// succ:  fn10001493_exit
fn10001493_exit:


// DllMain
// Return size: 4
BOOL DllMain(HANDLE hModule, DWORD dwReason, LPVOID lpReserved)
DllMain_entry:
	// succ:  l1000149E
l1000149E:
	Mem0[fp + 0x00000004:HANDLE] = hModule
	Mem0[fp + 0x00000008:DWORD] = dwReason
	Mem0[fp + 0x0000000C:LPVOID] = lpReserved
	esp = fp
	Top = 0
	SCZO = cond(Mem0[esp + 0x00000008:word32] - 0x00000001)
	branch Test(NE,Z) l100014AA
	// succ:  l100014A5 l100014AA
l100014A5:
	call fn10001864 (retsize: 4;)
	// succ:  l100014AA
l100014AA:
	v5 = Mem0[esp + 0x00000004:word32]
	esp = esp - 0x00000004
	Mem0[esp:word32] = v5
	ecx = Mem0[esp + 0x00000010:word32]
	edx = Mem0[esp + 0x0000000C:word32]
	call fn10001388 (retsize: 4;)
	ecx = Mem0[esp:word32]
	esp = esp + 0x00000004
	return
	// succ:  DllMain_exit
DllMain_exit:


// fn100015CF
// Return size: 4
define fn100015CF
fn100015CF_entry:
	// succ:  l100015CF
l100015CF:
	esp = fp
	Top = 0
	esp = esp - 0x00000004
	Mem0[esp:word32] = 0x00000014
	esp = esp - 0x00000004
	Mem0[esp:word32] = 0x10002210
	call fn100017E8 (retsize: 4;)
	v3 = Mem0[0x100033B4:word32]
	esp = esp - 0x00000004
	Mem0[esp:word32] = v3
	esi = _decode_pointer
	eax = _decode_pointer(Mem0[esp:(ptr void)])
	ecx = Mem0[esp:word32]
	esp = esp + 0x00000004
	Mem0[ebp - 0x0000001C:word32] = eax
	SCZO = cond(eax - 0xFFFFFFFF)
	branch Test(NE,Z) l100015FE
	// succ:  l100015F2 l100015FE
l100015F2:
	v10 = Mem0[ebp + 0x00000008:word32]
	esp = esp - 0x00000004
	Mem0[esp:word32] = v10
	eax = _onexit(Mem0[esp:_onexit_t])
	ecx = Mem0[esp:word32]
	esp = esp + 0x00000004
	goto l1000165F
	// succ:  l1000165F
l100015FE:
	esp = esp - 0x00000004
	Mem0[esp:word32] = 0x00000008
	call lock (retsize: 4;)
	esp = esp + 0xFFFFFFFC
	ecx = Mem0[esp:word32]
	esp = esp + 0x00000004
	v11 = Mem0[ebp - 0x00000004:word32] & 0x00000000
	Mem0[ebp - 0x00000004:word32] = v11
	SZO = cond(Mem0[ebp - 0x00000004:word32])
	C = false
	v14 = Mem0[0x100033B4:word32]
	esp = esp - 0x00000004
	Mem0[esp:word32] = v14
	eax = _decode_pointer(Mem0[esp:(ptr void)])
	Mem0[ebp - 0x0000001C:word32] = eax
	v15 = Mem0[0x100033B0:word32]
	esp = esp - 0x00000004
	Mem0[esp:word32] = v15
	eax = _decode_pointer(Mem0[esp:(ptr void)])
	Mem0[ebp - 0x00000020:word32] = eax
	eax = ebp - 0x00000020
	esp = esp - 0x00000004
	Mem0[esp:word32] = eax
	eax = ebp - 0x0000001C
	esp = esp - 0x00000004
	Mem0[esp:word32] = eax
	v16 = Mem0[ebp + 0x00000008:word32]
	esp = esp - 0x00000004
	Mem0[esp:word32] = v16
	eax = __dllonexit(Mem0[esp:_onexit_t], Mem0[esp + 4:(ptr (ptr PVFV))], Mem0[esp + 8:(ptr (ptr PVFV))])
	Mem0[ebp - 0x00000024:word32] = eax
	v17 = Mem0[ebp - 0x0000001C:word32]
	esp = esp - 0x00000004
	Mem0[esp:word32] = v17
	esi = encode_pointer
	call encode_pointer (retsize: 4;)
	esp = esp + 0xFFFFFFFC
	Mem0[0x100033B4:word32] = eax
	v18 = Mem0[ebp - 0x00000020:word32]
	esp = esp - 0x00000004
	Mem0[esp:word32] = v18
	call encode_pointer (retsize: 4;)
	esp = esp + 0xFFFFFFFC
	esp = esp + 0x0000001C
	SCZO = cond(esp)
	Mem0[0x100033B0:word32] = eax
	Mem0[ebp - 0x00000004:word32] = 0xFFFFFFFE
	call fn10001665 (retsize: 4;)
	eax = Mem0[ebp - 0x00000024:word32]
	// succ:  l1000165F
l1000165F:
	call fn1000182D (retsize: 4;)
	return
	// succ:  fn100015CF_exit
fn100015CF_exit:


// fn10001665
// Return size: 4
define fn10001665
fn10001665_entry:
	// succ:  l10001665
l10001665:
	esp = fp
	Top = 0
	esp = esp - 0x00000004
	Mem0[esp:word32] = 0x00000008
	call unlock (retsize: 4;)
	esp = esp + 0xFFFFFFFC
	ecx = Mem0[esp:word32]
	esp = esp + 0x00000004
	return
	// succ:  fn10001665_exit
fn10001665_exit:


// fn1000166E
// Return size: 4
define fn1000166E
fn1000166E_entry:
	// succ:  l1000166E
l1000166E:
	esp = fp
	Top = 0
	v3 = Mem0[esp + 0x00000004:word32]
	esp = esp - 0x00000004
	Mem0[esp:word32] = v3
	call fn100015CF (retsize: 4;)
	eax = -eax
	SCZO = cond(eax)
	C = eax == 0x00000000
	eax = eax - eax - C
	SCZO = cond(eax)
	eax = -eax
	SCZO = cond(eax)
	C = eax == 0x00000000
	ecx = Mem0[esp:word32]
	esp = esp + 0x00000004
	eax = eax - 0x00000001
	SZO = cond(eax)
	return
	// succ:  fn1000166E_exit
fn1000166E_exit:


// fn10001680
// Return size: 4
define fn10001680
fn10001680_entry:
	// succ:  l10001680
l10001680:
	esp = fp
	Top = 0
	esp = esp - 0x00000004
	Mem0[esp:word32] = esi
	esp = esp - 0x00000004
	Mem0[esp:word32] = edi
	eax = 0x100021D8
	edi = 0x100021D8
	SCZO = cond(eax - edi)
	esi = eax
	branch Test(UGE,C) l100016A1
	// succ:  l10001692 l100016A1
l10001692:
	eax = Mem0[esi:word32]
	SZO = cond(eax & eax)
	C = false
	branch Test(EQ,Z) l1000169A
	// succ:  l10001698 l1000169A
l10001698:
	call eax (retsize: 4;)
	// succ:  l1000169A
l1000169A:
	esi = esi + 0x00000004
	SCZO = cond(esi)
	SCZO = cond(esi - edi)
	branch Test(ULT,C) l10001692
	// succ:  l100016A1 l10001692
l100016A1:
	edi = Mem0[esp:word32]
	esp = esp + 0x00000004
	esi = Mem0[esp:word32]
	esp = esp + 0x00000004
	return
	edi = Mem0[esp:word32]
	esp = esp + 0x00000004
	esi = Mem0[esp:word32]
	esp = esp + 0x00000004
	return
	// succ:  fn10001680_exit fn10001680_exit
fn10001680_exit:


// fn100016D0
// Return size: 4
define fn100016D0
fn100016D0_entry:
	// succ:  l100016D0
l100016D0:
	esp = fp
	Top = 0
	ecx = Mem0[esp + 0x00000004:word32]
	SCZO = cond(Mem0[ecx:word16] - 0x5A4D)
	branch Test(EQ,Z) l100016DE
	// succ:  l100016DB l100016DE
l100016DB:
	eax = eax ^ eax
	SZO = cond(eax)
	C = false
	return
	// succ:  fn100016D0_exit
l100016DE:
	eax = Mem0[ecx + 0x0000003C:word32]
	eax = eax + ecx
	SCZO = cond(eax)
	SCZO = cond(Mem0[eax:word32] - 0x00004550)
	branch Test(NE,Z) l100016DB
	// succ:  l100016EB l100016DB
l100016EB:
	ecx = ecx ^ ecx
	SZO = cond(ecx)
	C = false
	SCZO = cond(Mem0[eax + 0x00000018:word16] - 0x010B)
	cl = Test(EQ,Z)
	eax = ecx
	return
	// succ:  fn100016D0_exit
fn100016D0_exit:


// fn10001700
// Return size: 4
define fn10001700
fn10001700_entry:
	// succ:  l10001700
l10001700:
	esp = fp
	Top = 0
	eax = Mem0[esp + 0x00000004:word32]
	ecx = Mem0[eax + 0x0000003C:word32]
	ecx = ecx + eax
	SCZO = cond(ecx)
	eax = (word32) Mem0[ecx + 0x00000014:word16]
	esp = esp - 0x00000004
	Mem0[esp:word32] = ebx
	esp = esp - 0x00000004
	Mem0[esp:word32] = esi
	esi = (word32) Mem0[ecx + 0x00000006:word16]
	edx = edx ^ edx
	SZO = cond(edx)
	C = false
	SZO = cond(esi & esi)
	C = false
	esp = esp - 0x00000004
	Mem0[esp:word32] = edi
	eax = eax + 0x00000018 + ecx
	branch Test(ULE,CZ) l1000173C
	// succ:  l1000171E l1000173C
l1000171E:
	edi = Mem0[esp + 0x00000014:word32]
	// succ:  l10001722
l10001722:
	ecx = Mem0[eax + 0x0000000C:word32]
	SCZO = cond(edi - ecx)
	branch Test(ULT,C) l10001732
	// succ:  l10001729 l10001732
l10001729:
	ebx = Mem0[eax + 0x00000008:word32]
	ebx = ebx + ecx
	SCZO = cond(ebx)
	SCZO = cond(edi - ebx)
	branch Test(ULT,C) l1000173E
	// succ:  l10001732 l1000173E
l10001732:
	edx = edx + 0x00000001
	SCZO = cond(edx)
	eax = eax + 0x00000028
	SCZO = cond(eax)
	SCZO = cond(edx - esi)
	branch Test(ULT,C) l10001722
	// succ:  l1000173C l10001722
l1000173C:
	eax = eax ^ eax
	SZO = cond(eax)
	C = false
	// succ:  l1000173E
l1000173E:
	edi = Mem0[esp:word32]
	esp = esp + 0x00000004
	esi = Mem0[esp:word32]
	esp = esp + 0x00000004
	ebx = Mem0[esp:word32]
	esp = esp + 0x00000004
	return
	// succ:  fn10001700_exit
fn10001700_exit:


// fn10001742
// Return size: 4
define fn10001742
fn10001742_entry:
	// succ:  l10001742
l10001742:
	esp = fp
	Top = 0
	esp = esp - 0x00000004
	Mem0[esp:word32] = 0x00000008
	esp = esp - 0x00000004
	Mem0[esp:word32] = 0x10002230
	call fn100017E8 (retsize: 4;)
	v4 = Mem0[ebp - 0x00000004:word32] & 0x00000000
	Mem0[ebp - 0x00000004:word32] = v4
	SZO = cond(Mem0[ebp - 0x00000004:word32])
	C = false
	edx = 0x10000000
	esp = esp - 0x00000004
	Mem0[esp:word32] = edx
	call fn100016D0 (retsize: 4;)
	ecx = Mem0[esp:word32]
	esp = esp + 0x00000004
	SZO = cond(eax & eax)
	C = false
	branch Test(EQ,Z) l1000179F
	// succ:  l10001762 l1000179F
l10001762:
	eax = Mem0[ebp + 0x00000008:word32]
	eax = eax - edx
	SCZO = cond(eax)
	esp = esp - 0x00000004
	Mem0[esp:word32] = eax
	esp = esp - 0x00000004
	Mem0[esp:word32] = edx
	call fn10001700 (retsize: 4;)
	ecx = Mem0[esp:word32]
	esp = esp + 0x00000004
	ecx = Mem0[esp:word32]
	esp = esp + 0x00000004
	SZO = cond(eax & eax)
	C = false
	branch Test(EQ,Z) l1000179F
	// succ:  l10001774 l1000179F
l10001774:
	eax = Mem0[eax + 0x00000024:word32]
	eax = eax >>u 0x0000001F
	SCZO = cond(eax)
	eax = ~eax
	eax = eax & 0x00000001
	SZO = cond(eax)
	C = false
	Mem0[ebp - 0x00000004:word32] = 0xFFFFFFFE
	goto l100017A8
	// succ:  l100017A8
l1000179F:
	Mem0[ebp - 0x00000004:word32] = 0xFFFFFFFE
	eax = eax ^ eax
	SZO = cond(eax)
	C = false
	// succ:  l100017A8
l100017A8:
	call fn1000182D (retsize: 4;)
	return
	// succ:  fn10001742_exit
fn10001742_exit:


// fn100017C6
// Return size: 4
define fn100017C6
fn100017C6_entry:
	// succ:  l100017C6
l100017C6:
	esp = fp
	Top = 0
	SCZO = cond(Mem0[esp + 0x00000008:word32] - 0x00000001)
	branch Test(NE,Z) l100017E0
	// succ:  l100017CD l100017E0
l100017CD:
	SCZO = cond(Mem0[0x100020CC:word32] - 0x00000000)
	branch Test(NE,Z) l100017E0
	// succ:  l100017D6 l100017E0
l100017D6:
	v5 = Mem0[esp + 0x00000004:word32]
	esp = esp - 0x00000004
	Mem0[esp:word32] = v5
	eax = DisableThreadLibraryCalls(Mem0[esp:HMODULE])
	esp = esp + 0x00000004
	// succ:  l100017E0
l100017E0:
	eax = eax ^ eax
	SZO = cond(eax)
	C = false
	eax = eax + 0x00000001
	SZO = cond(eax)
	return
	// succ:  fn100017C6_exit
fn100017C6_exit:


// fn100017E8
// Return size: 4
define fn100017E8
fn100017E8_entry:
	// succ:  l100017E8
l100017E8:
	esp = fp
	Top = 0
	esp = esp - 0x00000004
	Mem0[esp:word32] = 0x10001841
	v4 = Mem0[fs:0x00000000:word32]
	esp = esp - 0x00000004
	Mem0[esp:word32] = v4
	eax = Mem0[esp + 0x00000010:word32]
	Mem0[esp + 0x00000010:word32] = ebp
	ebp = esp + 0x00000010
	esp = esp - eax
	SCZO = cond(esp)
	esp = esp - 0x00000004
	Mem0[esp:word32] = ebx
	esp = esp - 0x00000004
	Mem0[esp:word32] = esi
	esp = esp - 0x00000004
	Mem0[esp:word32] = edi
	eax = Mem0[0x10003000:word32]
	v11 = Mem0[ebp - 0x00000004:word32] ^ eax
	Mem0[ebp - 0x00000004:word32] = v11
	SZO = cond(Mem0[ebp - 0x00000004:word32])
	C = false
	eax = eax ^ ebp
	SZO = cond(eax)
	C = false
	esp = esp - 0x00000004
	Mem0[esp:word32] = eax
	Mem0[ebp - 0x00000018:word32] = esp
	v14 = Mem0[ebp - 0x00000008:word32]
	esp = esp - 0x00000004
	Mem0[esp:word32] = v14
	eax = Mem0[ebp - 0x00000004:word32]
	Mem0[ebp - 0x00000004:word32] = 0xFFFFFFFE
	Mem0[ebp - 0x00000008:word32] = eax
	eax = ebp - 0x00000010
	Mem0[fs:0x00000000:word32] = eax
	return
	// succ:  fn100017E8_exit
fn100017E8_exit:


// fn1000182D
// Return size: 4
define fn1000182D
fn1000182D_entry:
	// succ:  l1000182D
l1000182D:
	esp = fp
	Top = 0
	ecx = Mem0[ebp - 0x00000010:word32]
	Mem0[fs:0x00000000:word32] = ecx
	ecx = Mem0[esp:word32]
	esp = esp + 0x00000004
	edi = Mem0[esp:word32]
	esp = esp + 0x00000004
	edi = Mem0[esp:word32]
	esp = esp + 0x00000004
	esi = Mem0[esp:word32]
	esp = esp + 0x00000004
	ebx = Mem0[esp:word32]
	esp = esp + 0x00000004
	esp = ebp
	ebp = Mem0[esp:word32]
	esp = esp + 0x00000004
	esp = esp - 0x00000004
	Mem0[esp:word32] = ecx
	return
	// succ:  fn1000182D_exit
fn1000182D_exit:


// fn10001864
// Return size: 4
define fn10001864
fn10001864_entry:
	// succ:  l10001864
l10001864:
	esp = fp
	Top = 0
	esp = esp - 0x00000004
	Mem0[esp:word32] = ebp
	ebp = esp
	esp = esp - 0x00000010
	SCZO = cond(esp)
	eax = Mem0[0x10003000:word32]
	v6 = Mem0[ebp - 0x00000008:word32] & 0x00000000
	Mem0[ebp - 0x00000008:word32] = v6
	SZO = cond(Mem0[ebp - 0x00000008:word32])
	C = false
	v9 = Mem0[ebp - 0x00000004:word32] & 0x00000000
	Mem0[ebp - 0x00000004:word32] = v9
	SZO = cond(Mem0[ebp - 0x00000004:word32])
	C = false
	esp = esp - 0x00000004
	Mem0[esp:word32] = ebx
	esp = esp - 0x00000004
	Mem0[esp:word32] = edi
	edi = 0xBB40E64E
	SCZO = cond(eax - edi)
	ebx = 0xFFFF0000
	branch Test(EQ,Z) l10001894
	// succ:  l10001887 l10001894
l10001887:
	SZO = cond(ebx & eax)
	C = false
	branch Test(EQ,Z) l10001894
	// succ:  l1000188B l10001894
l1000188B:
	eax = ~eax
	Mem0[0x10003004:word32] = eax
	goto l100018F4
	// succ:  l100018F4
l10001894:
	esp = esp - 0x00000004
	Mem0[esp:word32] = esi
	eax = ebp - 0x00000008
	esp = esp - 0x00000004
	Mem0[esp:word32] = eax
	GetSystemTimeAsFileTime(Mem0[esp:LPFILETIME])
	esp = esp + 0x00000004
	esi = Mem0[ebp - 0x00000004:word32]
	esi = esi ^ Mem0[ebp - 0x00000008:word32]
	SZO = cond(esi)
	C = false
	eax = GetCurrentProcessId()
	esi = esi ^ eax
	SZO = cond(esi)
	C = false
	eax = GetCurrentThreadId()
	esi = esi ^ eax
	SZO = cond(esi)
	C = false
	eax = GetTickCount()
	esi = esi ^ eax
	SZO = cond(esi)
	C = false
	eax = ebp - 0x00000010
	esp = esp - 0x00000004
	Mem0[esp:word32] = eax
	eax = QueryPerformanceCounter(Mem0[esp:(ptr LARGE_INTEGER)])
	esp = esp + 0x00000004
	eax = Mem0[ebp - 0x0000000C:word32]
	eax = eax ^ Mem0[ebp - 0x00000010:word32]
	SZO = cond(eax)
	C = false
	esi = esi ^ eax
	SZO = cond(esi)
	C = false
	SCZO = cond(esi - edi)
	branch Test(NE,Z) l100018DA
	// succ:  l100018D3 l100018DA
l100018D3:
	esi = 0xBB40E64F
	goto l100018E5
	// succ:  l100018E5
l100018DA:
	SZO = cond(ebx & esi)
	C = false
	branch Test(NE,Z) l100018E5
	// succ:  l100018DE l100018E5
l100018DE:
	eax = esi
	eax = eax << 0x00000010
	SCZO = cond(eax)
	esi = esi | eax
	SZO = cond(esi)
	C = false
	// succ:  l100018E5
l100018E5:
	Mem0[0x10003000:word32] = esi
	esi = ~esi
	Mem0[0x10003004:word32] = esi
	esi = Mem0[esp:word32]
	esp = esp + 0x00000004
	// succ:  l100018F4
l100018F4:
	edi = Mem0[esp:word32]
	esp = esp + 0x00000004
	ebx = Mem0[esp:word32]
	esp = esp + 0x00000004
	esp = ebp
	ebp = Mem0[esp:word32]
	esp = esp + 0x00000004
	return
	// succ:  fn10001864_exit
fn10001864_exit:


