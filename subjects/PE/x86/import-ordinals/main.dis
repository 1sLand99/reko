// fn00401000
// Return size: 4
define fn00401000
fn00401000_entry:
	// succ:  l00401000
l00401000:
	esp = fp
	Top = 0
	eax = 0x00403378
	return
	// succ:  fn00401000_exit
fn00401000_exit:


// fn00401010
// Return size: 4
define fn00401010
fn00401010_entry:
	// succ:  l00401010
l00401010:
	esp = fp
	Top = 0
	esp = esp - 0x00000004
	Mem0[esp:word32] = ebp
	ebp = esp
	esp = esp - 0x00000004
	Mem0[esp:word32] = esi
	esi = Mem0[ebp + 0x00000008:word32]
	esp = esp - 0x00000004
	Mem0[esp:word32] = 0x00000001
	call _acrt_iob_func (retsize: 4;)
	esp = esp + 0xFFFFFFFC
	esp = esp + 0x00000004
	SCZO = cond(esp)
	ecx = ebp + 0x0000000C
	esp = esp - 0x00000004
	Mem0[esp:word32] = ecx
	esp = esp - 0x00000004
	Mem0[esp:word32] = 0x00000000
	esp = esp - 0x00000004
	Mem0[esp:word32] = esi
	esp = esp - 0x00000004
	Mem0[esp:word32] = eax
	call fn00401000 (retsize: 4;)
	v8 = Mem0[eax + 0x00000004:word32]
	esp = esp - 0x00000004
	Mem0[esp:word32] = v8
	v9 = Mem0[eax:word32]
	esp = esp - 0x00000004
	Mem0[esp:word32] = v9
	call _stdio_common_vfprintf (retsize: 4;)
	esp = esp + 0xFFFFFFFC
	esp = esp + 0x00000018
	SCZO = cond(esp)
	esi = Mem0[esp:word32]
	esp = esp + 0x00000004
	ebp = Mem0[esp:word32]
	esp = esp + 0x00000004
	return
	// succ:  fn00401010_exit
fn00401010_exit:


// fn00401040
// Return size: 4
define fn00401040
fn00401040_entry:
	// succ:  l00401040
l00401040:
	esp = fp
	Top = 0
	esp = esp - 0x00000004
	Mem0[esp:word32] = ebp
	ebp = esp
	esp = esp - 0x00000004
	Mem0[esp:word32] = ecx
	ecx = ebp - 0x00000004
	call driver.dll!Ordinal_1 (retsize: 4;)
	esp = esp - 0x00000004
	Mem0[esp:word32] = 0x00000003
	ecx = ebp - 0x00000004
	call driver.dll!Ordinal_2 (retsize: 4;)
	esp = esp - 0x00000004
	Mem0[esp:word32] = 0x00000001
	ecx = ebp - 0x00000004
	call driver.dll!Ordinal_4 (retsize: 4;)
	esp = esp - 0x00000004
	Mem0[esp:word32] = 0x00000005
	ecx = ebp - 0x00000004
	call driver.dll!Ordinal_3 (retsize: 4;)
	eax = driver.dll!Ordinal_11
	v6 = Mem0[ebp - 0x00000004:word32]
	esp = esp - 0x00000004
	Mem0[esp:word32] = v6
	v7 = Mem0[eax:word32]
	esp = esp - 0x00000004
	Mem0[esp:word32] = v7
	esp = esp - 0x00000004
	Mem0[esp:word32] = 0x00402118
	call fn00401010 (retsize: 4;)
	esp = esp + 0x0000000C
	SCZO = cond(esp)
	eax = eax ^ eax
	SZO = cond(eax)
	C = false
	esp = ebp
	ebp = Mem0[esp:word32]
	esp = esp + 0x00000004
	return
	// succ:  fn00401040_exit
fn00401040_exit:


// Win32CrtStartup
// Return size: 4
DWORD Win32CrtStartup()
Win32CrtStartup_entry:
	goto l004012C9
	// succ:  l004012C9
l0040115A:
	esp = esp - 0x00000004
	Mem0[esp:word32] = 0x00000014
	esp = esp - 0x00000004
	Mem0[esp:word32] = 0x00402508
	call fn00401980 (retsize: 4;)
	esp = esp - 0x00000004
	Mem0[esp:word32] = 0x00000001
	call fn0040146F (retsize: 4;)
	ecx = Mem0[esp:word32]
	esp = esp + 0x00000004
	SZO = cond(al & al)
	C = false
	branch Test(NE,Z) l00401179
	// succ:  l00401172 l00401179
l00401172:
	esp = esp - 0x00000004
	Mem0[esp:word32] = 0x00000007
	call fn0040176D (retsize: 4;)
	// succ:  l00401179
l00401179:
	bl = bl ^ bl
	SZO = cond(bl)
	C = false
	Mem0[ebp - 0x00000019:byte] = bl
	v10 = Mem0[ebp - 0x00000004:word32] & 0x00000000
	Mem0[ebp - 0x00000004:word32] = v10
	SZO = cond(Mem0[ebp - 0x00000004:word32])
	C = false
	call fn0040143A (retsize: 4;)
	Mem0[ebp - 0x00000024:byte] = al
	eax = Mem0[0x00403334:word32]
	ecx = ecx ^ ecx
	SZO = cond(ecx)
	C = false
	ecx = ecx + 0x00000001
	SZO = cond(ecx)
	SCZO = cond(eax - ecx)
	branch Test(EQ,Z) l00401172
	// succ:  l00401196 l00401172
l00401196:
	SZO = cond(eax & eax)
	C = false
	branch Test(NE,Z) l004011E3
	// succ:  l0040119A l004011E3
l0040119A:
	Mem0[0x00403334:word32] = ecx
	esp = esp - 0x00000004
	Mem0[esp:word32] = 0x004020F0
	esp = esp - 0x00000004
	Mem0[esp:word32] = 0x004020E4
	eax = _initterm_e(Mem0[esp:(ptr PVFV)], Mem0[esp + 4:(ptr PVFV)])
	ecx = Mem0[esp:word32]
	esp = esp + 0x00000004
	ecx = Mem0[esp:word32]
	esp = esp + 0x00000004
	SZO = cond(eax & eax)
	C = false
	branch Test(EQ,Z) l004011C6
	// succ:  l004011B5 l004011C6
l004011B5:
	Mem0[ebp - 0x00000004:word32] = 0xFFFFFFFE
	eax = 0x000000FF
	goto l004012C3
	// succ:  l004012C3
l004011C6:
	esp = esp - 0x00000004
	Mem0[esp:word32] = 0x004020E0
	esp = esp - 0x00000004
	Mem0[esp:word32] = 0x004020D8
	_initterm(Mem0[esp:(ptr PVFV)], Mem0[esp + 4:(ptr PVFV)])
	ecx = Mem0[esp:word32]
	esp = esp + 0x00000004
	ecx = Mem0[esp:word32]
	esp = esp + 0x00000004
	Mem0[0x00403334:word32] = 0x00000002
	goto l004011E8
	// succ:  l004011E8
l004011E3:
	bl = cl
	Mem0[ebp - 0x00000019:byte] = bl
	// succ:  l004011E8
l004011E8:
	v14 = Mem0[ebp - 0x00000024:word32]
	esp = esp - 0x00000004
	Mem0[esp:word32] = v14
	call fn004015C9 (retsize: 4;)
	ecx = Mem0[esp:word32]
	esp = esp + 0x00000004
	call fn00401761 (retsize: 4;)
	esi = eax
	edi = edi ^ edi
	SZO = cond(edi)
	C = false
	SCZO = cond(Mem0[esi:word32] - edi)
	branch Test(EQ,Z) l00401218
	// succ:  l004011FE l00401218
l004011FE:
	esp = esp - 0x00000004
	Mem0[esp:word32] = esi
	call fn0040153F (retsize: 4;)
	ecx = Mem0[esp:word32]
	esp = esp + 0x00000004
	SZO = cond(al & al)
	C = false
	branch Test(EQ,Z) l00401218
	// succ:  l00401209 l00401218
l00401209:
	esp = esp - 0x00000004
	Mem0[esp:word32] = edi
	esp = esp - 0x00000004
	Mem0[esp:word32] = 0x00000002
	esp = esp - 0x00000004
	Mem0[esp:word32] = edi
	esi = Mem0[esi:word32]
	ecx = esi
	call fn00401972 (retsize: 4;)
	call esi (retsize: 4;)
	// succ:  l00401218
l00401218:
	call fn00401767 (retsize: 4;)
	esi = eax
	SCZO = cond(Mem0[esi:word32] - edi)
	branch Test(EQ,Z) l00401236
	// succ:  l00401223 l00401236
l00401223:
	esp = esp - 0x00000004
	Mem0[esp:word32] = esi
	call fn0040153F (retsize: 4;)
	ecx = Mem0[esp:word32]
	esp = esp + 0x00000004
	SZO = cond(al & al)
	C = false
	branch Test(EQ,Z) l00401236
	// succ:  l0040122E l00401236
l0040122E:
	v17 = Mem0[esi:word32]
	esp = esp - 0x00000004
	Mem0[esp:word32] = v17
	call register_thread_local_exe_atexit_callback (retsize: 4;)
	esp = esp + 0xFFFFFFFC
	ecx = Mem0[esp:word32]
	esp = esp + 0x00000004
	// succ:  l00401236
l00401236:
	call _p___argv (retsize: 4;)
	esp = esp + 0xFFFFFFFC
	edi = eax
	call _p___argc (retsize: 4;)
	esp = esp + 0xFFFFFFFC
	esi = eax
	call get_initial_narrow_environment (retsize: 4;)
	esp = esp + 0xFFFFFFFC
	esp = esp - 0x00000004
	Mem0[esp:word32] = eax
	v18 = Mem0[edi:word32]
	esp = esp - 0x00000004
	Mem0[esp:word32] = v18
	v19 = Mem0[esi:word32]
	esp = esp - 0x00000004
	Mem0[esp:word32] = v19
	call fn00401040 (retsize: 4;)
	esp = esp + 0x0000000C
	SCZO = cond(esp)
	esi = eax
	call fn0040188B (retsize: 4;)
	SZO = cond(al & al)
	C = false
	branch Test(NE,Z) l00401267
	// succ:  l00401261 l00401267
l00401261:
	esp = esp - 0x00000004
	Mem0[esp:word32] = esi
	exit(Mem0[esp:int32])
l00401267:
	SZO = cond(bl & bl)
	C = false
	branch Test(NE,Z) l00401270
	// succ:  l0040126B l00401270
l0040126B:
	call cexit (retsize: 4;)
	esp = esp + 0xFFFFFFFC
	// succ:  l00401270
l00401270:
	esp = esp - 0x00000004
	Mem0[esp:word32] = 0x00000000
	esp = esp - 0x00000004
	Mem0[esp:word32] = 0x00000001
	call fn004015E6 (retsize: 4;)
	ecx = Mem0[esp:word32]
	esp = esp + 0x00000004
	ecx = Mem0[esp:word32]
	esp = esp + 0x00000004
	Mem0[ebp - 0x00000004:word32] = 0xFFFFFFFE
	eax = esi
	// succ:  l004012C3
l004012C3:
	call fn004019C6 (retsize: 4;)
	return
	// succ:  Win32CrtStartup_exit
l004012C9:
	esp = fp
	Top = 0
	call fn0040165E (retsize: 4;)
	goto l0040115A
	// succ:  l0040115A
Win32CrtStartup_exit:


// fn004013F6
// Return size: 4
define fn004013F6
fn004013F6_entry:
	// succ:  l004013F6
l004013F6:
	esp = fp
	Top = 0
	esp = esp - 0x00000004
	Mem0[esp:word32] = ebp
	ebp = esp
	eax = Mem0[ebp + 0x00000008:word32]
	esp = esp - 0x00000004
	Mem0[esp:word32] = esi
	ecx = Mem0[eax + 0x0000003C:word32]
	ecx = ecx + eax
	SCZO = cond(ecx)
	eax = (word32) Mem0[ecx + 0x00000014:word16]
	edx = ecx + 0x00000018
	edx = edx + eax
	SCZO = cond(edx)
	eax = (word32) Mem0[ecx + 0x00000006:word16]
	esi = eax *s 0x00000028
	SCZO = cond(esi)
	esi = esi + edx
	SCZO = cond(esi)
	SCZO = cond(edx - esi)
	branch Test(EQ,Z) l00401431
	// succ:  l00401418 l00401431
l00401418:
	ecx = Mem0[ebp + 0x0000000C:word32]
	// succ:  l0040141B
l0040141B:
	SCZO = cond(ecx - Mem0[edx + 0x0000000C:word32])
	branch Test(ULT,C) l0040142A
	// succ:  l00401420 l0040142A
l00401420:
	eax = Mem0[edx + 0x00000008:word32]
	eax = eax + Mem0[edx + 0x0000000C:word32]
	SCZO = cond(eax)
	SCZO = cond(ecx - eax)
	branch Test(ULT,C) l00401436
	// succ:  l0040142A l00401436
l0040142A:
	edx = edx + 0x00000028
	SCZO = cond(edx)
	SCZO = cond(edx - esi)
	branch Test(NE,Z) l0040141B
	// succ:  l00401431 l0040141B
l00401431:
	eax = eax ^ eax
	SZO = cond(eax)
	C = false
	// succ:  l00401433
l00401433:
	esi = Mem0[esp:word32]
	esp = esp + 0x00000004
	ebp = Mem0[esp:word32]
	esp = esp + 0x00000004
	return
	// succ:  fn004013F6_exit
l00401436:
	eax = edx
	goto l00401433
	// succ:  l00401433
fn004013F6_exit:


// fn0040143A
// Return size: 4
define fn0040143A
fn0040143A_entry:
	// succ:  l0040143A
l0040143A:
	esp = fp
	Top = 0
	call fn00401B98 (retsize: 4;)
	SZO = cond(eax & eax)
	C = false
	branch Test(NE,Z) l00401446
	// succ:  l00401443 l00401446
l00401443:
	al = al ^ al
	SZO = cond(al)
	C = false
	return
	// succ:  fn0040143A_exit
l00401446:
	eax = Mem0[fs:0x00000018:word32]
	esp = esp - 0x00000004
	Mem0[esp:word32] = esi
	esi = 0x00403338
	edx = Mem0[eax + 0x00000004:word32]
	goto l0040145B
	// succ:  l0040145B
l00401457:
	SCZO = cond(edx - eax)
	branch Test(EQ,Z) l0040146B
	// succ:  l0040145B l0040146B
l0040145B:
	eax = eax ^ eax
	SZO = cond(eax)
	C = false
	ecx = edx
	__lock()
	Z = __cmpxchg(Mem0[esi:word32], ecx, eax, out eax)
	SZO = cond(eax & eax)
	C = false
	branch Test(NE,Z) l00401457
	eax = eax ^ eax
	SZO = cond(eax)
	C = false
	ecx = edx
	__lock()
	Z = __cmpxchg(Mem0[esi:word32], ecx, eax, out eax)
	SZO = cond(eax & eax)
	C = false
	branch Test(NE,Z) l00401457
	// succ:  l00401467 l00401457
l00401467:
	al = al ^ al
	SZO = cond(al)
	C = false
	esi = Mem0[esp:word32]
	esp = esp + 0x00000004
	return
	al = al ^ al
	SZO = cond(al)
	C = false
	esi = Mem0[esp:word32]
	esp = esp + 0x00000004
	return
	// succ:  fn0040143A_exit fn0040143A_exit
l0040146B:
	al = 0x01
	esi = Mem0[esp:word32]
	esp = esp + 0x00000004
	return
	// succ:  fn0040143A_exit
fn0040143A_exit:


// fn0040146F
// Return size: 4
define fn0040146F
fn0040146F_entry:
	// succ:  l0040146F
l0040146F:
	esp = fp
	Top = 0
	esp = esp - 0x00000004
	Mem0[esp:word32] = ebp
	ebp = esp
	SCZO = cond(Mem0[ebp + 0x00000008:word32] - 0x00000000)
	branch Test(NE,Z) l0040147F
	// succ:  l00401478 l0040147F
l00401478:
	Mem0[0x00403354:byte] = 0x01
	// succ:  l0040147F
l0040147F:
	call fn004019FE (retsize: 4;)
	call fn00401C46 (retsize: 4;)
	SZO = cond(al & al)
	C = false
	branch Test(NE,Z) l00401491
	// succ:  l0040148D l00401491
l0040148D:
	al = al ^ al
	SZO = cond(al)
	C = false
	ebp = Mem0[esp:word32]
	esp = esp + 0x00000004
	return
	// succ:  fn0040146F_exit
l00401491:
	call fn00401C46 (retsize: 4;)
	SZO = cond(al & al)
	C = false
	branch Test(NE,Z) l004014A4
	// succ:  l0040149A l004014A4
l0040149A:
	esp = esp - 0x00000004
	Mem0[esp:word32] = 0x00000000
	call fn00401C46 (retsize: 4;)
	ecx = Mem0[esp:word32]
	esp = esp + 0x00000004
	goto l0040148D
	// succ:  l0040148D
l004014A4:
	al = 0x01
	ebp = Mem0[esp:word32]
	esp = esp + 0x00000004
	return
	// succ:  fn0040146F_exit
fn0040146F_exit:


// fn0040153F
// Return size: 4
define fn0040153F
fn0040153F_entry:
	// succ:  l0040153F
l0040153F:
	esp = fp
	Top = 0
	esp = esp - 0x00000004
	Mem0[esp:word32] = 0x00000008
	esp = esp - 0x00000004
	Mem0[esp:word32] = 0x00402528
	call fn00401980 (retsize: 4;)
	v4 = Mem0[ebp - 0x00000004:word32] & 0x00000000
	Mem0[ebp - 0x00000004:word32] = v4
	SZO = cond(Mem0[ebp - 0x00000004:word32])
	C = false
	eax = 0x00005A4D
	SCZO = cond(Mem0[0x00400000:word16] - ax)
	branch Test(NE,Z) l004015BA
	// succ:  l0040155D l004015BA
l0040155D:
	eax = Mem0[0x0040003C:word32]
	SCZO = cond(Mem0[eax + 0x00400000:word32] - 0x00004550)
	branch Test(NE,Z) l004015BA
	// succ:  l0040156E l004015BA
l0040156E:
	ecx = 0x0000010B
	SCZO = cond(Mem0[eax + 0x00400018:word16] - cx)
	branch Test(NE,Z) l004015BA
	// succ:  l0040157C l004015BA
l0040157C:
	eax = Mem0[ebp + 0x00000008:word32]
	ecx = 0x00400000
	eax = eax - ecx
	SCZO = cond(eax)
	esp = esp - 0x00000004
	Mem0[esp:word32] = eax
	esp = esp - 0x00000004
	Mem0[esp:word32] = ecx
	call fn004013F6 (retsize: 4;)
	ecx = Mem0[esp:word32]
	esp = esp + 0x00000004
	ecx = Mem0[esp:word32]
	esp = esp + 0x00000004
	SZO = cond(eax & eax)
	C = false
	branch Test(EQ,Z) l004015BA
	// succ:  l00401593 l004015BA
l00401593:
	SCZO = cond(Mem0[eax + 0x00000024:word32] - 0x00000000)
	branch Test(LT,SO) l004015BA
	// succ:  l00401599 l004015BA
l00401599:
	Mem0[ebp - 0x00000004:word32] = 0xFFFFFFFE
	al = 0x01
	goto l004015C3
	// succ:  l004015C3
l004015BA:
	Mem0[ebp - 0x00000004:word32] = 0xFFFFFFFE
	al = al ^ al
	SZO = cond(al)
	C = false
	// succ:  l004015C3
l004015C3:
	call fn004019C6 (retsize: 4;)
	return
	// succ:  fn0040153F_exit
fn0040153F_exit:


// fn004015C9
// Return size: 4
define fn004015C9
fn004015C9_entry:
	// succ:  l004015C9
l004015C9:
	esp = fp
	Top = 0
	esp = esp - 0x00000004
	Mem0[esp:word32] = ebp
	ebp = esp
	call fn00401B98 (retsize: 4;)
	SZO = cond(eax & eax)
	C = false
	branch Test(EQ,Z) l004015E4
	// succ:  l004015D5 l004015E4
l004015D5:
	SCZO = cond(Mem0[ebp + 0x00000008:byte] - 0x00)
	branch Test(NE,Z) l004015E4
	// succ:  l004015DB l004015E4
l004015DB:
	eax = eax ^ eax
	SZO = cond(eax)
	C = false
	ecx = 0x00403338
	v10 = Mem0[ecx:word32]
	Mem0[ecx:word32] = eax
	eax = v10
	// succ:  l004015E4
l004015E4:
	ebp = Mem0[esp:word32]
	esp = esp + 0x00000004
	return
	// succ:  fn004015C9_exit
fn004015C9_exit:


// fn004015E6
// Return size: 4
define fn004015E6
fn004015E6_entry:
	// succ:  l004015E6
l004015E6:
	esp = fp
	Top = 0
	esp = esp - 0x00000004
	Mem0[esp:word32] = ebp
	ebp = esp
	SCZO = cond(Mem0[0x00403354:byte] - 0x00)
	branch Test(EQ,Z) l004015F8
	// succ:  l004015F2 l004015F8
l004015F2:
	SCZO = cond(Mem0[ebp + 0x0000000C:byte] - 0x00)
	branch Test(NE,Z) l0040160A
	// succ:  l004015F8 l0040160A
l004015F8:
	v6 = Mem0[ebp + 0x00000008:word32]
	esp = esp - 0x00000004
	Mem0[esp:word32] = v6
	call fn00401C46 (retsize: 4;)
	v7 = Mem0[ebp + 0x00000008:word32]
	esp = esp - 0x00000004
	Mem0[esp:word32] = v7
	call fn00401C46 (retsize: 4;)
	ecx = Mem0[esp:word32]
	esp = esp + 0x00000004
	ecx = Mem0[esp:word32]
	esp = esp + 0x00000004
	// succ:  l0040160A
l0040160A:
	al = 0x01
	ebp = Mem0[esp:word32]
	esp = esp + 0x00000004
	return
	// succ:  fn004015E6_exit
fn004015E6_exit:


// fn0040165E
// Return size: 4
define fn0040165E
fn0040165E_entry:
	// succ:  l0040165E
l0040165E:
	esp = fp
	Top = 0
	esp = esp - 0x00000004
	Mem0[esp:word32] = ebp
	ebp = esp
	esp = esp - 0x00000014
	SCZO = cond(esp)
	v5 = Mem0[ebp - 0x0000000C:word32] & 0x00000000
	Mem0[ebp - 0x0000000C:word32] = v5
	SZO = cond(Mem0[ebp - 0x0000000C:word32])
	C = false
	v8 = Mem0[ebp - 0x00000008:word32] & 0x00000000
	Mem0[ebp - 0x00000008:word32] = v8
	SZO = cond(Mem0[ebp - 0x00000008:word32])
	C = false
	eax = Mem0[0x00403004:word32]
	esp = esp - 0x00000004
	Mem0[esp:word32] = esi
	esp = esp - 0x00000004
	Mem0[esp:word32] = edi
	edi = 0xBB40E64E
	esi = 0xFFFF0000
	SCZO = cond(eax - edi)
	branch Test(EQ,Z) l0040168E
	// succ:  l00401681 l0040168E
l00401681:
	SZO = cond(esi & eax)
	C = false
	branch Test(EQ,Z) l0040168E
	// succ:  l00401685 l0040168E
l00401685:
	eax = ~eax
	Mem0[0x00403000:word32] = eax
	goto l004016F4
	// succ:  l004016F4
l0040168E:
	eax = ebp - 0x0000000C
	esp = esp - 0x00000004
	Mem0[esp:word32] = eax
	GetSystemTimeAsFileTime(Mem0[esp:LPFILETIME])
	esp = esp + 0x00000004
	eax = Mem0[ebp - 0x00000008:word32]
	eax = eax ^ Mem0[ebp - 0x0000000C:word32]
	SZO = cond(eax)
	C = false
	Mem0[ebp - 0x00000004:word32] = eax
	eax = GetCurrentThreadId()
	v13 = Mem0[ebp - 0x00000004:word32] ^ eax
	Mem0[ebp - 0x00000004:word32] = v13
	SZO = cond(Mem0[ebp - 0x00000004:word32])
	C = false
	eax = GetCurrentProcessId()
	v14 = Mem0[ebp - 0x00000004:word32] ^ eax
	Mem0[ebp - 0x00000004:word32] = v14
	SZO = cond(Mem0[ebp - 0x00000004:word32])
	C = false
	eax = ebp - 0x00000014
	esp = esp - 0x00000004
	Mem0[esp:word32] = eax
	eax = QueryPerformanceCounter(Mem0[esp:(ptr LARGE_INTEGER)])
	esp = esp + 0x00000004
	ecx = Mem0[ebp - 0x00000010:word32]
	eax = ebp - 0x00000004
	ecx = ecx ^ Mem0[ebp - 0x00000014:word32]
	SZO = cond(ecx)
	C = false
	ecx = ecx ^ Mem0[ebp - 0x00000004:word32]
	SZO = cond(ecx)
	C = false
	ecx = ecx ^ eax
	SZO = cond(ecx)
	C = false
	SCZO = cond(ecx - edi)
	branch Test(NE,Z) l004016D6
	// succ:  l004016CF l004016D6
l004016CF:
	ecx = 0xBB40E64F
	goto l004016E6
	// succ:  l004016E6
l004016D6:
	SZO = cond(esi & ecx)
	C = false
	branch Test(NE,Z) l004016E6
	// succ:  l004016DA l004016E6
l004016DA:
	eax = ecx
	eax = eax | 0x00004711
	SZO = cond(eax)
	C = false
	eax = eax << 0x00000010
	SCZO = cond(eax)
	ecx = ecx | eax
	SZO = cond(ecx)
	C = false
	// succ:  l004016E6
l004016E6:
	Mem0[0x00403004:word32] = ecx
	ecx = ~ecx
	Mem0[0x00403000:word32] = ecx
	// succ:  l004016F4
l004016F4:
	edi = Mem0[esp:word32]
	esp = esp + 0x00000004
	esi = Mem0[esp:word32]
	esp = esp + 0x00000004
	esp = ebp
	ebp = Mem0[esp:word32]
	esp = esp + 0x00000004
	return
	// succ:  fn0040165E_exit
fn0040165E_exit:


// fn00401761
// Return size: 4
define fn00401761
fn00401761_entry:
	// succ:  l00401761
l00401761:
	esp = fp
	Top = 0
	eax = 0x00403384
	return
	// succ:  fn00401761_exit
fn00401761_exit:


// fn00401767
// Return size: 4
define fn00401767
fn00401767_entry:
	// succ:  l00401767
l00401767:
	esp = fp
	Top = 0
	eax = 0x00403380
	return
	// succ:  fn00401767_exit
fn00401767_exit:


// fn0040176D
// Return size: 4
define fn0040176D
fn0040176D_entry:
	// succ:  l0040176D
l0040176D:
	esp = fp
	Top = 0
	esp = esp - 0x00000004
	Mem0[esp:word32] = ebp
	ebp = esp
	esp = esp - 0x00000324
	SCZO = cond(esp)
	esp = esp - 0x00000004
	Mem0[esp:word32] = ebx
	esp = esp - 0x00000004
	Mem0[esp:word32] = esi
	esp = esp - 0x00000004
	Mem0[esp:word32] = 0x00000017
	eax = IsProcessorFeaturePresent(Mem0[esp:DWORD])
	esp = esp + 0x00000004
	SZO = cond(eax & eax)
	C = false
	branch Test(EQ,Z) l00401788
	// succ:  l00401783 l00401788
l00401783:
	ecx = Mem0[ebp + 0x00000008:word32]
	__fastfail(ecx)
l00401788:
	esi = esi ^ esi
	SZO = cond(esi)
	C = false
	eax = ebp - 0x00000324
	esp = esp - 0x00000004
	Mem0[esp:word32] = 0x000002CC
	esp = esp - 0x00000004
	Mem0[esp:word32] = esi
	esp = esp - 0x00000004
	Mem0[esp:word32] = eax
	Mem0[0x00403368:word32] = esi
	eax = memset(Mem0[esp:(ptr void)], Mem0[esp + 4:int32], Mem0[esp + 8:size_t])
	esp = esp + 0x0000000C
	SCZO = cond(esp)
	Mem0[ebp - 0x00000274:word32] = eax
	Mem0[ebp - 0x00000278:word32] = ecx
	Mem0[ebp - 0x0000027C:word32] = edx
	Mem0[ebp - 0x00000280:word32] = ebx
	Mem0[ebp - 0x00000284:word32] = esi
	Mem0[ebp - 0x00000288:word32] = edi
	Mem0[ebp - 0x0000025C:word16] = ss
	Mem0[ebp - 0x00000268:word16] = cs
	Mem0[ebp - 0x0000028C:word16] = ds
	Mem0[ebp - 0x00000290:word16] = es
	Mem0[ebp - 0x00000294:word16] = fs
	Mem0[ebp - 0x00000298:word16] = gs
	esp = esp - 0x00000004
	Mem0[esp:word32] = SCZDOP
	Mem0[ebp - 0x00000264:word32] = Mem0[esp:word32]
	esp = esp + 0x00000004
	eax = Mem0[ebp + 0x00000004:word32]
	Mem0[ebp - 0x0000026C:word32] = eax
	eax = ebp + 0x00000004
	Mem0[ebp - 0x00000260:word32] = eax
	Mem0[ebp - 0x00000324:word32] = 0x00010001
	eax = Mem0[eax - 0x00000004:word32]
	esp = esp - 0x00000004
	Mem0[esp:word32] = 0x00000050
	Mem0[ebp - 0x00000270:word32] = eax
	eax = ebp - 0x00000058
	esp = esp - 0x00000004
	Mem0[esp:word32] = esi
	esp = esp - 0x00000004
	Mem0[esp:word32] = eax
	eax = memset(Mem0[esp:(ptr void)], Mem0[esp + 4:int32], Mem0[esp + 8:size_t])
	eax = Mem0[ebp + 0x00000004:word32]
	esp = esp + 0x0000000C
	SCZO = cond(esp)
	Mem0[ebp - 0x00000058:word32] = 0x40000015
	Mem0[ebp - 0x00000054:word32] = 0x00000001
	Mem0[ebp - 0x0000004C:word32] = eax
	eax = IsDebuggerPresent()
	esp = esp - 0x00000004
	Mem0[esp:word32] = esi
	ebx = eax - 0x00000001
	ebx = -ebx
	SCZO = cond(ebx)
	C = ebx == 0x00000000
	eax = ebp - 0x00000058
	Mem0[ebp - 0x00000008:word32] = eax
	eax = ebp - 0x00000324
	bl = bl - bl - C
	SCZO = cond(bl)
	Mem0[ebp - 0x00000004:word32] = eax
	bl = bl + 0x01
	SZO = cond(bl)
	eax = SetUnhandledExceptionFilter(Mem0[esp:LPTOP_LEVEL_EXCEPTION_FILTER])
	esp = esp + 0x00000004
	eax = ebp - 0x00000008
	esp = esp - 0x00000004
	Mem0[esp:word32] = eax
	eax = UnhandledExceptionFilter(Mem0[esp:(ptr (struct "_EXCEPTION_POINTERS"))])
	esp = esp + 0x00000004
	SZO = cond(eax & eax)
	C = false
	branch Test(NE,Z) l00401882
	// succ:  l00401875 l00401882
l00401875:
	eax = (word32) bl
	eax = -eax
	SCZO = cond(eax)
	C = eax == 0x00000000
	eax = eax - eax - C
	SCZO = cond(eax)
	v22 = Mem0[0x00403368:word32] & eax
	Mem0[0x00403368:word32] = v22
	SZO = cond(Mem0[0x00403368:word32])
	C = false
	// succ:  l00401882
l00401882:
	esi = Mem0[esp:word32]
	esp = esp + 0x00000004
	ebx = Mem0[esp:word32]
	esp = esp + 0x00000004
	esp = ebp
	ebp = Mem0[esp:word32]
	esp = esp + 0x00000004
	return
	// succ:  fn0040176D_exit
fn0040176D_exit:


// fn0040188B
// Return size: 4
define fn0040188B
fn0040188B_entry:
	// succ:  l0040188B
l0040188B:
	esp = fp
	Top = 0
	esp = esp - 0x00000004
	Mem0[esp:word32] = 0x00000000
	eax = GetModuleHandleW(Mem0[esp:LPCWSTR])
	esp = esp + 0x00000004
	ecx = eax
	SZO = cond(ecx & ecx)
	C = false
	branch Test(NE,Z) l0040189C
	// succ:  l00401899 l0040189C
l00401899:
	al = al ^ al
	SZO = cond(al)
	C = false
	return
	// succ:  fn0040188B_exit
l0040189C:
	eax = 0x00005A4D
	SCZO = cond(Mem0[ecx:word16] - ax)
	branch Test(NE,Z) l00401899
	// succ:  l004018A6 l00401899
l004018A6:
	eax = Mem0[ecx + 0x0000003C:word32]
	eax = eax + ecx
	SCZO = cond(eax)
	SCZO = cond(Mem0[eax:word32] - 0x00004550)
	branch Test(NE,Z) l00401899
	// succ:  l004018B3 l00401899
l004018B3:
	ecx = 0x0000010B
	SCZO = cond(Mem0[eax + 0x00000018:word16] - cx)
	branch Test(NE,Z) l00401899
	// succ:  l004018BE l00401899
l004018BE:
	SCZO = cond(Mem0[eax + 0x00000074:word32] - 0x0000000E)
	branch Test(ULE,CZ) l00401899
	// succ:  l004018C4 l00401899
l004018C4:
	SCZO = cond(Mem0[eax + 0x000000E8:word32] - 0x00000000)
	al = Test(NE,Z)
	return
	// succ:  fn0040188B_exit
fn0040188B_exit:


// fn00401972
// Return size: 0
define fn00401972
fn00401972_entry:
	// succ:  l00401972
l00401972:
	esp = fp
	Top = 0
	call Mem0[0x004020D4:word32] (retsize: 4;)
	return
	// succ:  fn00401972_exit
fn00401972_exit:


// fn00401980
// Return size: 4
define fn00401980
fn00401980_entry:
	// succ:  l00401980
l00401980:
	esp = fp
	Top = 0
	esp = esp - 0x00000004
	Mem0[esp:word32] = 0x004019DB
	v4 = Mem0[fs:0x00000000:word32]
	esp = esp - 0x00000004
	Mem0[esp:word32] = v4
	eax = Mem0[esp + 0x00000010:word32]
	Mem0[esp + 0x00000010:word32] = ebp
	ebp = esp + 0x00000010
	esp = esp - eax
	SCZO = cond(esp)
	esp = esp - 0x00000004
	Mem0[esp:word32] = ebx
	esp = esp - 0x00000004
	Mem0[esp:word32] = esi
	esp = esp - 0x00000004
	Mem0[esp:word32] = edi
	eax = Mem0[0x00403004:word32]
	v11 = Mem0[ebp - 0x00000004:word32] ^ eax
	Mem0[ebp - 0x00000004:word32] = v11
	SZO = cond(Mem0[ebp - 0x00000004:word32])
	C = false
	eax = eax ^ ebp
	SZO = cond(eax)
	C = false
	esp = esp - 0x00000004
	Mem0[esp:word32] = eax
	Mem0[ebp - 0x00000018:word32] = esp
	v14 = Mem0[ebp - 0x00000008:word32]
	esp = esp - 0x00000004
	Mem0[esp:word32] = v14
	eax = Mem0[ebp - 0x00000004:word32]
	Mem0[ebp - 0x00000004:word32] = 0xFFFFFFFE
	Mem0[ebp - 0x00000008:word32] = eax
	eax = ebp - 0x00000010
	Mem0[fs:0x00000000:word32] = eax
	return
	// succ:  fn00401980_exit
fn00401980_exit:


// fn004019C6
// Return size: 4
define fn004019C6
fn004019C6_entry:
	// succ:  l004019C6
l004019C6:
	esp = fp
	Top = 0
	ecx = Mem0[ebp - 0x00000010:word32]
	Mem0[fs:0x00000000:word32] = ecx
	ecx = Mem0[esp:word32]
	esp = esp + 0x00000004
	edi = Mem0[esp:word32]
	esp = esp + 0x00000004
	edi = Mem0[esp:word32]
	esp = esp + 0x00000004
	esi = Mem0[esp:word32]
	esp = esp + 0x00000004
	ebx = Mem0[esp:word32]
	esp = esp + 0x00000004
	esp = ebp
	ebp = Mem0[esp:word32]
	esp = esp + 0x00000004
	esp = esp - 0x00000004
	Mem0[esp:word32] = ecx
	return
	// succ:  fn004019C6_exit
fn004019C6_exit:


// fn004019FE
// Return size: 4
define fn004019FE
fn004019FE_entry:
	// succ:  l004019FE
l004019FE:
	esp = fp
	Top = 0
	esp = esp - 0x00000004
	Mem0[esp:word32] = ebp
	ebp = esp
	v4 = Mem0[0x0040336C:word32] & 0x00000000
	Mem0[0x0040336C:word32] = v4
	SZO = cond(Mem0[0x0040336C:word32])
	C = false
	esp = esp - 0x00000028
	SCZO = cond(esp)
	esp = esp - 0x00000004
	Mem0[esp:word32] = ebx
	ebx = ebx ^ ebx
	SZO = cond(ebx)
	C = false
	ebx = ebx + 0x00000001
	SZO = cond(ebx)
	v9 = Mem0[0x00403010:word32] | ebx
	Mem0[0x00403010:word32] = v9
	SZO = cond(Mem0[0x00403010:word32])
	C = false
	esp = esp - 0x00000004
	Mem0[esp:word32] = 0x0000000A
	eax = IsProcessorFeaturePresent(Mem0[esp:DWORD])
	esp = esp + 0x00000004
	SZO = cond(eax & eax)
	C = false
	branch Test(EQ,Z) l00401B91
	// succ:  l00401A24 l00401B91
l00401A24:
	v12 = Mem0[ebp - 0x00000010:word32] & 0x00000000
	Mem0[ebp - 0x00000010:word32] = v12
	SZO = cond(Mem0[ebp - 0x00000010:word32])
	C = false
	eax = eax ^ eax
	SZO = cond(eax)
	C = false
	v13 = Mem0[0x00403010:word32] | 0x00000002
	Mem0[0x00403010:word32] = v13
	SZO = cond(Mem0[0x00403010:word32])
	C = false
	ecx = ecx ^ ecx
	SZO = cond(ecx)
	C = false
	esp = esp - 0x00000004
	Mem0[esp:word32] = esi
	esp = esp - 0x00000004
	Mem0[esp:word32] = edi
	Mem0[0x0040336C:word32] = ebx
	edi = ebp - 0x00000028
	esp = esp - 0x00000004
	Mem0[esp:word32] = ebx
	__cpuid(eax, ecx, &eax, &ebx, &ecx, &edx)
	esi = ebx
	ebx = Mem0[esp:word32]
	esp = esp + 0x00000004
	Mem0[edi:word32] = eax
	Mem0[edi + 0x00000004:word32] = esi
	Mem0[edi + 0x00000008:word32] = ecx
	Mem0[edi + 0x0000000C:word32] = edx
	eax = Mem0[ebp - 0x00000028:word32]
	ecx = Mem0[ebp - 0x0000001C:word32]
	Mem0[ebp - 0x00000008:word32] = eax
	ecx = ecx ^ 0x49656E69
	SZO = cond(ecx)
	C = false
	eax = Mem0[ebp - 0x00000020:word32]
	eax = eax ^ 0x6C65746E
	SZO = cond(eax)
	C = false
	ecx = ecx | eax
	SZO = cond(ecx)
	C = false
	eax = Mem0[ebp - 0x00000024:word32]
	esp = esp - 0x00000004
	Mem0[esp:word32] = 0x00000001
	eax = eax ^ 0x756E6547
	SZO = cond(eax)
	C = false
	ecx = ecx | eax
	SZO = cond(ecx)
	C = false
	eax = Mem0[esp:word32]
	esp = esp + 0x00000004
	esp = esp - 0x00000004
	Mem0[esp:word32] = 0x00000000
	ecx = Mem0[esp:word32]
	esp = esp + 0x00000004
	esp = esp - 0x00000004
	Mem0[esp:word32] = ebx
	__cpuid(eax, ecx, &eax, &ebx, &ecx, &edx)
	esi = ebx
	ebx = Mem0[esp:word32]
	esp = esp + 0x00000004
	Mem0[edi:word32] = eax
	Mem0[edi + 0x00000004:word32] = esi
	Mem0[edi + 0x00000008:word32] = ecx
	Mem0[edi + 0x0000000C:word32] = edx
	branch Test(NE,Z) l00401ACE
	// succ:  l00401A8B l00401ACE
l00401A8B:
	eax = Mem0[ebp - 0x00000028:word32]
	eax = eax & 0x0FFF3FF0
	SZO = cond(eax)
	C = false
	SCZO = cond(eax - 0x000106C0)
	branch Test(EQ,Z) l00401ABD
	// succ:  l00401A9A l00401ABD
l00401A9A:
	SCZO = cond(eax - 0x00020660)
	branch Test(EQ,Z) l00401ABD
	// succ:  l00401AA1 l00401ABD
l00401AA1:
	SCZO = cond(eax - 0x00020670)
	branch Test(EQ,Z) l00401ABD
	// succ:  l00401AA8 l00401ABD
l00401AA8:
	SCZO = cond(eax - 0x00030650)
	branch Test(EQ,Z) l00401ABD
	// succ:  l00401AAF l00401ABD
l00401AAF:
	SCZO = cond(eax - 0x00030660)
	branch Test(EQ,Z) l00401ABD
	// succ:  l00401AB6 l00401ABD
l00401AB6:
	SCZO = cond(eax - 0x00030670)
	branch Test(NE,Z) l00401ACE
	// succ:  l00401ABD l00401ACE
l00401ABD:
	edi = Mem0[0x00403370:word32]
	edi = edi | 0x00000001
	SZO = cond(edi)
	C = false
	Mem0[0x00403370:word32] = edi
	goto l00401AD4
	// succ:  l00401AD4
l00401ACE:
	edi = Mem0[0x00403370:word32]
	// succ:  l00401AD4
l00401AD4:
	SCZO = cond(Mem0[ebp - 0x00000008:word32] - 0x00000007)
	eax = Mem0[ebp - 0x0000001C:word32]
	Mem0[ebp - 0x00000018:word32] = eax
	eax = Mem0[ebp - 0x00000020:word32]
	Mem0[ebp - 0x00000004:word32] = eax
	Mem0[ebp - 0x00000014:word32] = eax
	branch Test(LT,SO) l00401B1B
	// succ:  l00401AE9 l00401B1B
l00401AE9:
	esp = esp - 0x00000004
	Mem0[esp:word32] = 0x00000007
	eax = Mem0[esp:word32]
	esp = esp + 0x00000004
	ecx = ecx ^ ecx
	SZO = cond(ecx)
	C = false
	esp = esp - 0x00000004
	Mem0[esp:word32] = ebx
	__cpuid(eax, ecx, &eax, &ebx, &ecx, &edx)
	esi = ebx
	ebx = Mem0[esp:word32]
	esp = esp + 0x00000004
	ebx = ebp - 0x00000028
	Mem0[ebx:word32] = eax
	Mem0[ebx + 0x00000004:word32] = esi
	Mem0[ebx + 0x00000008:word32] = ecx
	Mem0[ebx + 0x0000000C:word32] = edx
	eax = Mem0[ebp - 0x00000024:word32]
	SZO = cond(eax & 0x00000200)
	C = false
	Mem0[ebp - 0x00000010:word32] = eax
	eax = Mem0[ebp - 0x00000004:word32]
	branch Test(EQ,Z) l00401B1B
	// succ:  l00401B12 l00401B1B
l00401B12:
	edi = edi | 0x00000002
	SZO = cond(edi)
	C = false
	Mem0[0x00403370:word32] = edi
	// succ:  l00401B1B
l00401B1B:
	edi = Mem0[esp:word32]
	esp = esp + 0x00000004
	esi = Mem0[esp:word32]
	esp = esp + 0x00000004
	SZO = cond(eax & 0x00100000)
	C = false
	branch Test(EQ,Z) l00401B91
	// succ:  l00401B24 l00401B91
l00401B24:
	v19 = Mem0[0x00403010:word32] | 0x00000004
	Mem0[0x00403010:word32] = v19
	SZO = cond(Mem0[0x00403010:word32])
	C = false
	Mem0[0x0040336C:word32] = 0x00000002
	SZO = cond(eax & 0x08000000)
	C = false
	branch Test(EQ,Z) l00401B91
	// succ:  l00401B3C l00401B91
l00401B3C:
	SZO = cond(eax & 0x10000000)
	C = false
	branch Test(EQ,Z) l00401B91
	// succ:  l00401B43 l00401B91
l00401B43:
	ecx = ecx ^ ecx
	SZO = cond(ecx)
	C = false
	edx_eax = __xgetbv(ecx)
	Mem0[ebp - 0x0000000C:word32] = eax
	Mem0[ebp - 0x00000008:word32] = edx
	eax = Mem0[ebp - 0x0000000C:word32]
	ecx = Mem0[ebp - 0x00000008:word32]
	eax = eax & 0x00000006
	SZO = cond(eax)
	C = false
	ecx = ecx ^ ecx
	SZO = cond(ecx)
	C = false
	SCZO = cond(eax - 0x00000006)
	branch Test(NE,Z) l00401B91
	// succ:  l00401B5E l00401B91
l00401B5E:
	SZO = cond(ecx & ecx)
	C = false
	branch Test(NE,Z) l00401B91
	// succ:  l00401B62 l00401B91
l00401B62:
	eax = Mem0[0x00403010:word32]
	eax = eax | 0x00000008
	SZO = cond(eax)
	C = false
	Mem0[0x0040336C:word32] = 0x00000003
	SZO = cond(Mem0[ebp - 0x00000010:byte] & 0x20)
	C = false
	Mem0[0x00403010:word32] = eax
	branch Test(EQ,Z) l00401B91
	// succ:  l00401B7F l00401B91
l00401B7F:
	eax = eax | 0x00000020
	SZO = cond(eax)
	C = false
	Mem0[0x0040336C:word32] = 0x00000005
	Mem0[0x00403010:word32] = eax
	// succ:  l00401B91
l00401B91:
	eax = eax ^ eax
	SZO = cond(eax)
	C = false
	ebx = Mem0[esp:word32]
	esp = esp + 0x00000004
	esp = ebp
	ebp = Mem0[esp:word32]
	esp = esp + 0x00000004
	return
	// succ:  fn004019FE_exit
fn004019FE_exit:


// fn00401B98
// Return size: 4
define fn00401B98
fn00401B98_entry:
	// succ:  l00401B98
l00401B98:
	esp = fp
	Top = 0
	eax = eax ^ eax
	SZO = cond(eax)
	C = false
	SCZO = cond(Mem0[0x00403014:word32] - eax)
	al = Test(NE,Z)
	return
	// succ:  fn00401B98_exit
fn00401B98_exit:


// fn00401C46
// Return size: 4
define fn00401C46
fn00401C46_entry:
	// succ:  l00401C46
l00401C46:
	esp = fp
	Top = 0
	al = 0x01
	return
	// succ:  fn00401C46_exit
fn00401C46_exit:


