// fn00401000
// Return size: 4
define fn00401000
fn00401000_entry:
	// succ:  l00401000
l00401000:
	esp = fp
	Top = 0
	v3 = &exported_critical_section
	esp = esp - 0x00000004
	Mem0[esp:word32] = v3
	InitializeCriticalSection(Mem0[esp:LPCRITICAL_SECTION])
	esp = esp + 0x00000004
	eax = &exported_int
	v5 = Mem0[eax:word32]
	esp = esp - 0x00000004
	Mem0[esp:word32] = v5
	esp = esp - 0x00000004
	Mem0[esp:word32] = 0x00402108
	call fn00401060 (retsize: 4;)
	esp = esp - 0x00000004
	Mem0[esp:word32] = 0x00000001
	eax = slow_and_safe_increment(Mem0[esp:int32])
	esp = esp - 0x00000004
	Mem0[esp:word32] = eax
	esp = esp - 0x00000004
	Mem0[esp:word32] = 0x00402108
	call fn00401060 (retsize: 4;)
	eax = &exported_int
	v6 = Mem0[eax:word32]
	esp = esp - 0x00000004
	Mem0[esp:word32] = v6
	esp = esp - 0x00000004
	Mem0[esp:word32] = 0x00402108
	call fn00401060 (retsize: 4;)
	esp = esp + 0x0000001C
	SCZO = cond(esp)
	eax = eax ^ eax
	SZO = cond(eax)
	C = false
	return
	// succ:  fn00401000_exit
fn00401000_exit:


// fn00401050
// Return size: 4
define fn00401050
fn00401050_entry:
	// succ:  l00401050
l00401050:
	esp = fp
	Top = 0
	eax = 0x00403378
	return
	// succ:  fn00401050_exit
fn00401050_exit:


// fn00401060
// Return size: 4
define fn00401060
fn00401060_entry:
	// succ:  l00401060
l00401060:
	esp = fp
	Top = 0
	esp = esp - 0x00000004
	Mem0[esp:word32] = ebp
	ebp = esp
	esp = esp - 0x00000004
	Mem0[esp:word32] = esi
	esi = Mem0[ebp + 0x00000008:word32]
	esp = esp - 0x00000004
	Mem0[esp:word32] = 0x00000001
	call _acrt_iob_func (retsize: 4;)
	esp = esp + 0xFFFFFFFC
	esp = esp + 0x00000004
	SCZO = cond(esp)
	ecx = ebp + 0x0000000C
	esp = esp - 0x00000004
	Mem0[esp:word32] = ecx
	esp = esp - 0x00000004
	Mem0[esp:word32] = 0x00000000
	esp = esp - 0x00000004
	Mem0[esp:word32] = esi
	esp = esp - 0x00000004
	Mem0[esp:word32] = eax
	call fn00401050 (retsize: 4;)
	v8 = Mem0[eax + 0x00000004:word32]
	esp = esp - 0x00000004
	Mem0[esp:word32] = v8
	v9 = Mem0[eax:word32]
	esp = esp - 0x00000004
	Mem0[esp:word32] = v9
	call _stdio_common_vfprintf (retsize: 4;)
	esp = esp + 0xFFFFFFFC
	esp = esp + 0x00000018
	SCZO = cond(esp)
	esi = Mem0[esp:word32]
	esp = esp + 0x00000004
	ebp = Mem0[esp:word32]
	esp = esp + 0x00000004
	return
	// succ:  fn00401060_exit
fn00401060_exit:


// Win32CrtStartup
// Return size: 4
DWORD Win32CrtStartup()
Win32CrtStartup_entry:
	goto l004012CE
	// succ:  l004012CE
l0040115F:
	esp = esp - 0x00000004
	Mem0[esp:word32] = 0x00000014
	esp = esp - 0x00000004
	Mem0[esp:word32] = 0x004024D8
	call fn00401980 (retsize: 4;)
	esp = esp - 0x00000004
	Mem0[esp:word32] = 0x00000001
	call fn00401474 (retsize: 4;)
	ecx = Mem0[esp:word32]
	esp = esp + 0x00000004
	SZO = cond(al & al)
	C = false
	branch Test(NE,Z) l0040117E
	// succ:  l00401177 l0040117E
l00401177:
	esp = esp - 0x00000004
	Mem0[esp:word32] = 0x00000007
	call fn00401774 (retsize: 4;)
	// succ:  l0040117E
l0040117E:
	bl = bl ^ bl
	SZO = cond(bl)
	C = false
	Mem0[ebp - 0x00000019:byte] = bl
	v10 = Mem0[ebp - 0x00000004:word32] & 0x00000000
	Mem0[ebp - 0x00000004:word32] = v10
	SZO = cond(Mem0[ebp - 0x00000004:word32])
	C = false
	call fn0040143F (retsize: 4;)
	Mem0[ebp - 0x00000024:byte] = al
	eax = Mem0[0x00403334:word32]
	ecx = ecx ^ ecx
	SZO = cond(ecx)
	C = false
	ecx = ecx + 0x00000001
	SZO = cond(ecx)
	SCZO = cond(eax - ecx)
	branch Test(EQ,Z) l00401177
	// succ:  l0040119B l00401177
l0040119B:
	SZO = cond(eax & eax)
	C = false
	branch Test(NE,Z) l004011E8
	// succ:  l0040119F l004011E8
l0040119F:
	Mem0[0x00403334:word32] = ecx
	esp = esp - 0x00000004
	Mem0[esp:word32] = 0x004020EC
	esp = esp - 0x00000004
	Mem0[esp:word32] = 0x004020E0
	eax = _initterm_e(Mem0[esp:(ptr PVFV)], Mem0[esp + 4:(ptr PVFV)])
	ecx = Mem0[esp:word32]
	esp = esp + 0x00000004
	ecx = Mem0[esp:word32]
	esp = esp + 0x00000004
	SZO = cond(eax & eax)
	C = false
	branch Test(EQ,Z) l004011CB
	// succ:  l004011BA l004011CB
l004011BA:
	Mem0[ebp - 0x00000004:word32] = 0xFFFFFFFE
	eax = 0x000000FF
	goto l004012C8
	// succ:  l004012C8
l004011CB:
	esp = esp - 0x00000004
	Mem0[esp:word32] = 0x004020DC
	esp = esp - 0x00000004
	Mem0[esp:word32] = 0x004020D4
	_initterm(Mem0[esp:(ptr PVFV)], Mem0[esp + 4:(ptr PVFV)])
	ecx = Mem0[esp:word32]
	esp = esp + 0x00000004
	ecx = Mem0[esp:word32]
	esp = esp + 0x00000004
	Mem0[0x00403334:word32] = 0x00000002
	goto l004011ED
	// succ:  l004011ED
l004011E8:
	bl = cl
	Mem0[ebp - 0x00000019:byte] = bl
	// succ:  l004011ED
l004011ED:
	v14 = Mem0[ebp - 0x00000024:word32]
	esp = esp - 0x00000004
	Mem0[esp:word32] = v14
	call fn004015CE (retsize: 4;)
	ecx = Mem0[esp:word32]
	esp = esp + 0x00000004
	call fn00401768 (retsize: 4;)
	esi = eax
	edi = edi ^ edi
	SZO = cond(edi)
	C = false
	SCZO = cond(Mem0[esi:word32] - edi)
	branch Test(EQ,Z) l0040121D
	// succ:  l00401203 l0040121D
l00401203:
	esp = esp - 0x00000004
	Mem0[esp:word32] = esi
	call fn00401544 (retsize: 4;)
	ecx = Mem0[esp:word32]
	esp = esp + 0x00000004
	SZO = cond(al & al)
	C = false
	branch Test(EQ,Z) l0040121D
	// succ:  l0040120E l0040121D
l0040120E:
	esp = esp - 0x00000004
	Mem0[esp:word32] = edi
	esp = esp - 0x00000004
	Mem0[esp:word32] = 0x00000002
	esp = esp - 0x00000004
	Mem0[esp:word32] = edi
	esi = Mem0[esi:word32]
	ecx = esi
	call fn00401976 (retsize: 4;)
	call esi (retsize: 4;)
	// succ:  l0040121D
l0040121D:
	call fn0040176E (retsize: 4;)
	esi = eax
	SCZO = cond(Mem0[esi:word32] - edi)
	branch Test(EQ,Z) l0040123B
	// succ:  l00401228 l0040123B
l00401228:
	esp = esp - 0x00000004
	Mem0[esp:word32] = esi
	call fn00401544 (retsize: 4;)
	ecx = Mem0[esp:word32]
	esp = esp + 0x00000004
	SZO = cond(al & al)
	C = false
	branch Test(EQ,Z) l0040123B
	// succ:  l00401233 l0040123B
l00401233:
	v17 = Mem0[esi:word32]
	esp = esp - 0x00000004
	Mem0[esp:word32] = v17
	call register_thread_local_exe_atexit_callback (retsize: 4;)
	esp = esp + 0xFFFFFFFC
	ecx = Mem0[esp:word32]
	esp = esp + 0x00000004
	// succ:  l0040123B
l0040123B:
	call _p___argv (retsize: 4;)
	esp = esp + 0xFFFFFFFC
	edi = eax
	call _p___argc (retsize: 4;)
	esp = esp + 0xFFFFFFFC
	esi = eax
	call get_initial_narrow_environment (retsize: 4;)
	esp = esp + 0xFFFFFFFC
	esp = esp - 0x00000004
	Mem0[esp:word32] = eax
	v18 = Mem0[edi:word32]
	esp = esp - 0x00000004
	Mem0[esp:word32] = v18
	v19 = Mem0[esi:word32]
	esp = esp - 0x00000004
	Mem0[esp:word32] = v19
	call fn00401000 (retsize: 4;)
	esp = esp + 0x0000000C
	SCZO = cond(esp)
	esi = eax
	call fn0040188F (retsize: 4;)
	SZO = cond(al & al)
	C = false
	branch Test(NE,Z) l0040126C
	// succ:  l00401266 l0040126C
l00401266:
	esp = esp - 0x00000004
	Mem0[esp:word32] = esi
	exit(Mem0[esp:int32])
l0040126C:
	SZO = cond(bl & bl)
	C = false
	branch Test(NE,Z) l00401275
	// succ:  l00401270 l00401275
l00401270:
	call cexit (retsize: 4;)
	esp = esp + 0xFFFFFFFC
	// succ:  l00401275
l00401275:
	esp = esp - 0x00000004
	Mem0[esp:word32] = 0x00000000
	esp = esp - 0x00000004
	Mem0[esp:word32] = 0x00000001
	call fn004015EB (retsize: 4;)
	ecx = Mem0[esp:word32]
	esp = esp + 0x00000004
	ecx = Mem0[esp:word32]
	esp = esp + 0x00000004
	Mem0[ebp - 0x00000004:word32] = 0xFFFFFFFE
	eax = esi
	// succ:  l004012C8
l004012C8:
	call fn004019C6 (retsize: 4;)
	return
	// succ:  Win32CrtStartup_exit
l004012CE:
	esp = fp
	Top = 0
	call fn00401663 (retsize: 4;)
	goto l0040115F
	// succ:  l0040115F
Win32CrtStartup_exit:


// fn004012D8
// Return size: 4
define fn004012D8
fn004012D8_entry:
	// succ:  l004012D8
l004012D8:
	esp = fp
	Top = 0
	esp = esp - 0x00000004
	Mem0[esp:word32] = ebp
	ebp = esp
	esp = esp - 0x00000004
	Mem0[esp:word32] = 0x00000000
	eax = SetUnhandledExceptionFilter(Mem0[esp:LPTOP_LEVEL_EXCEPTION_FILTER])
	esp = esp + 0x00000004
	v5 = Mem0[ebp + 0x00000008:word32]
	esp = esp - 0x00000004
	Mem0[esp:word32] = v5
	eax = UnhandledExceptionFilter(Mem0[esp:(ptr (struct "_EXCEPTION_POINTERS"))])
	esp = esp + 0x00000004
	esp = esp - 0x00000004
	Mem0[esp:word32] = 0xC0000409
	eax = GetCurrentProcess()
	esp = esp - 0x00000004
	Mem0[esp:word32] = eax
	eax = TerminateProcess(Mem0[esp:HANDLE], Mem0[esp + 4:UINT])
	esp = esp + 0x00000008
	ebp = Mem0[esp:word32]
	esp = esp + 0x00000004
	return
	// succ:  fn004012D8_exit
fn004012D8_exit:


// fn004013FB
// Return size: 4
define fn004013FB
fn004013FB_entry:
	// succ:  l004013FB
l004013FB:
	esp = fp
	Top = 0
	esp = esp - 0x00000004
	Mem0[esp:word32] = ebp
	ebp = esp
	eax = Mem0[ebp + 0x00000008:word32]
	esp = esp - 0x00000004
	Mem0[esp:word32] = esi
	ecx = Mem0[eax + 0x0000003C:word32]
	ecx = ecx + eax
	SCZO = cond(ecx)
	eax = (word32) Mem0[ecx + 0x00000014:word16]
	edx = ecx + 0x00000018
	edx = edx + eax
	SCZO = cond(edx)
	eax = (word32) Mem0[ecx + 0x00000006:word16]
	esi = eax *s 0x00000028
	SCZO = cond(esi)
	esi = esi + edx
	SCZO = cond(esi)
	SCZO = cond(edx - esi)
	branch Test(EQ,Z) l00401436
	// succ:  l0040141D l00401436
l0040141D:
	ecx = Mem0[ebp + 0x0000000C:word32]
	// succ:  l00401420
l00401420:
	SCZO = cond(ecx - Mem0[edx + 0x0000000C:word32])
	branch Test(ULT,C) l0040142F
	// succ:  l00401425 l0040142F
l00401425:
	eax = Mem0[edx + 0x00000008:word32]
	eax = eax + Mem0[edx + 0x0000000C:word32]
	SCZO = cond(eax)
	SCZO = cond(ecx - eax)
	branch Test(ULT,C) l0040143B
	// succ:  l0040142F l0040143B
l0040142F:
	edx = edx + 0x00000028
	SCZO = cond(edx)
	SCZO = cond(edx - esi)
	branch Test(NE,Z) l00401420
	// succ:  l00401436 l00401420
l00401436:
	eax = eax ^ eax
	SZO = cond(eax)
	C = false
	// succ:  l00401438
l00401438:
	esi = Mem0[esp:word32]
	esp = esp + 0x00000004
	ebp = Mem0[esp:word32]
	esp = esp + 0x00000004
	return
	// succ:  fn004013FB_exit
l0040143B:
	eax = edx
	goto l00401438
	// succ:  l00401438
fn004013FB_exit:


// fn0040143F
// Return size: 4
define fn0040143F
fn0040143F_entry:
	// succ:  l0040143F
l0040143F:
	esp = fp
	Top = 0
	call fn00401B98 (retsize: 4;)
	SZO = cond(eax & eax)
	C = false
	branch Test(NE,Z) l0040144B
	// succ:  l00401448 l0040144B
l00401448:
	al = al ^ al
	SZO = cond(al)
	C = false
	return
	// succ:  fn0040143F_exit
l0040144B:
	eax = Mem0[fs:0x00000018:word32]
	esp = esp - 0x00000004
	Mem0[esp:word32] = esi
	esi = 0x00403338
	edx = Mem0[eax + 0x00000004:word32]
	goto l00401460
	// succ:  l00401460
l0040145C:
	SCZO = cond(edx - eax)
	branch Test(EQ,Z) l00401470
	// succ:  l00401460 l00401470
l00401460:
	eax = eax ^ eax
	SZO = cond(eax)
	C = false
	ecx = edx
	__lock()
	Z = __cmpxchg(Mem0[esi:word32], ecx, eax, out eax)
	SZO = cond(eax & eax)
	C = false
	branch Test(NE,Z) l0040145C
	eax = eax ^ eax
	SZO = cond(eax)
	C = false
	ecx = edx
	__lock()
	Z = __cmpxchg(Mem0[esi:word32], ecx, eax, out eax)
	SZO = cond(eax & eax)
	C = false
	branch Test(NE,Z) l0040145C
	// succ:  l0040146C l0040145C
l0040146C:
	al = al ^ al
	SZO = cond(al)
	C = false
	esi = Mem0[esp:word32]
	esp = esp + 0x00000004
	return
	al = al ^ al
	SZO = cond(al)
	C = false
	esi = Mem0[esp:word32]
	esp = esp + 0x00000004
	return
	// succ:  fn0040143F_exit fn0040143F_exit
l00401470:
	al = 0x01
	esi = Mem0[esp:word32]
	esp = esp + 0x00000004
	return
	// succ:  fn0040143F_exit
fn0040143F_exit:


// fn00401474
// Return size: 4
define fn00401474
fn00401474_entry:
	// succ:  l00401474
l00401474:
	esp = fp
	Top = 0
	esp = esp - 0x00000004
	Mem0[esp:word32] = ebp
	ebp = esp
	SCZO = cond(Mem0[ebp + 0x00000008:word32] - 0x00000000)
	branch Test(NE,Z) l00401484
	// succ:  l0040147D l00401484
l0040147D:
	Mem0[0x00403354:byte] = 0x01
	// succ:  l00401484
l00401484:
	call fn004019FE (retsize: 4;)
	call fn00401C48 (retsize: 4;)
	SZO = cond(al & al)
	C = false
	branch Test(NE,Z) l00401496
	// succ:  l00401492 l00401496
l00401492:
	al = al ^ al
	SZO = cond(al)
	C = false
	ebp = Mem0[esp:word32]
	esp = esp + 0x00000004
	return
	// succ:  fn00401474_exit
l00401496:
	call fn00401C48 (retsize: 4;)
	SZO = cond(al & al)
	C = false
	branch Test(NE,Z) l004014A9
	// succ:  l0040149F l004014A9
l0040149F:
	esp = esp - 0x00000004
	Mem0[esp:word32] = 0x00000000
	call fn00401C48 (retsize: 4;)
	ecx = Mem0[esp:word32]
	esp = esp + 0x00000004
	goto l00401492
	// succ:  l00401492
l004014A9:
	al = 0x01
	ebp = Mem0[esp:word32]
	esp = esp + 0x00000004
	return
	// succ:  fn00401474_exit
fn00401474_exit:


// fn004014AD
// Return size: 4
define fn004014AD
fn004014AD_entry:
	// succ:  l004014AD
l004014AD:
	esp = fp
	Top = 0
	esp = esp - 0x00000004
	Mem0[esp:word32] = ebp
	ebp = esp
	esp = esp - 0x0000000C
	SCZO = cond(esp)
	esp = esp - 0x00000004
	Mem0[esp:word32] = esi
	esi = Mem0[ebp + 0x00000008:word32]
	SZO = cond(esi & esi)
	C = false
	branch Test(EQ,Z) l004014C0
	// succ:  l004014BB l004014C0
l004014BB:
	SCZO = cond(esi - 0x00000001)
	branch Test(NE,Z) l0040153C
	// succ:  l004014C0 l0040153C
l004014C0:
	call fn00401B98 (retsize: 4;)
	SZO = cond(eax & eax)
	C = false
	branch Test(EQ,Z) l004014F3
	// succ:  l004014C9 l004014F3
l004014C9:
	SZO = cond(esi & esi)
	C = false
	branch Test(NE,Z) l004014F3
	// succ:  l004014CD l004014F3
l004014CD:
	esp = esp - 0x00000004
	Mem0[esp:word32] = 0x0040333C
	call initialize_onexit_table (retsize: 4;)
	esp = esp + 0xFFFFFFFC
	ecx = Mem0[esp:word32]
	esp = esp + 0x00000004
	SZO = cond(eax & eax)
	C = false
	branch Test(EQ,Z) l004014E0
	// succ:  l004014DC l004014E0
l004014DC:
	al = al ^ al
	SZO = cond(al)
	C = false
	goto l00401537
	// succ:  l00401537
l004014E0:
	esp = esp - 0x00000004
	Mem0[esp:word32] = 0x00403348
	call initialize_onexit_table (retsize: 4;)
	esp = esp + 0xFFFFFFFC
	eax = -eax
	SCZO = cond(eax)
	C = eax == 0x00000000
	ecx = Mem0[esp:word32]
	esp = esp + 0x00000004
	al = al - al - C
	SCZO = cond(al)
	al = al + 0x01
	SZO = cond(al)
	goto l00401537
	// succ:  l00401537
l004014F3:
	eax = Mem0[0x00403004:word32]
	esi = ebp - 0x0000000C
	esp = esp - 0x00000004
	Mem0[esp:word32] = edi
	eax = eax & 0x0000001F
	SZO = cond(eax)
	C = false
	edi = 0x0040333C
	esp = esp - 0x00000004
	Mem0[esp:word32] = 0x00000020
	ecx = Mem0[esp:word32]
	esp = esp + 0x00000004
	ecx = ecx - eax
	SCZO = cond(ecx)
	eax = eax | 0xFFFFFFFF
	SZO = cond(eax)
	C = false
	v14 = (eax & 0x00000001 << cl) != 0x00000000
	eax = __ror(eax, cl)
	C = v14
	eax = eax ^ Mem0[0x00403004:word32]
	SZO = cond(eax)
	C = false
	Mem0[ebp - 0x0000000C:word32] = eax
	Mem0[ebp - 0x00000008:word32] = eax
	Mem0[ebp - 0x00000004:word32] = eax
	v15 = Mem0[esi:word32]
	Mem0[edi:word32] = v15
	esi = esi + 0x00000004
	edi = edi + 0x00000004
	v16 = Mem0[esi:word32]
	Mem0[edi:word32] = v16
	esi = esi + 0x00000004
	edi = edi + 0x00000004
	v17 = Mem0[esi:word32]
	Mem0[edi:word32] = v17
	esi = esi + 0x00000004
	edi = edi + 0x00000004
	edi = 0x00403348
	Mem0[ebp - 0x0000000C:word32] = eax
	Mem0[ebp - 0x00000008:word32] = eax
	esi = ebp - 0x0000000C
	Mem0[ebp - 0x00000004:word32] = eax
	al = 0x01
	v18 = Mem0[esi:word32]
	Mem0[edi:word32] = v18
	esi = esi + 0x00000004
	edi = edi + 0x00000004
	v19 = Mem0[esi:word32]
	Mem0[edi:word32] = v19
	esi = esi + 0x00000004
	edi = edi + 0x00000004
	v20 = Mem0[esi:word32]
	Mem0[edi:word32] = v20
	esi = esi + 0x00000004
	edi = edi + 0x00000004
	edi = Mem0[esp:word32]
	esp = esp + 0x00000004
	// succ:  l00401537
l00401537:
	esi = Mem0[esp:word32]
	esp = esp + 0x00000004
	esp = ebp
	ebp = Mem0[esp:word32]
	esp = esp + 0x00000004
	return
	// succ:  fn004014AD_exit
l0040153C:
	esp = esp - 0x00000004
	Mem0[esp:word32] = 0x00000005
	call fn00401774 (retsize: 4;)
	int3()
	// succ:  l00401543_thunk_fn00401544
l00401543_thunk_fn00401544:
	call fn00401544 (retsize: 4;)
	return
	// succ:  fn004014AD_exit
fn004014AD_exit:


// fn00401544
// Return size: 4
define fn00401544
fn00401544_entry:
	// succ:  l00401544
l00401544:
	esp = fp
	Top = 0
	esp = esp - 0x00000004
	Mem0[esp:word32] = 0x00000008
	esp = esp - 0x00000004
	Mem0[esp:word32] = 0x004024F8
	call fn00401980 (retsize: 4;)
	v4 = Mem0[ebp - 0x00000004:word32] & 0x00000000
	Mem0[ebp - 0x00000004:word32] = v4
	SZO = cond(Mem0[ebp - 0x00000004:word32])
	C = false
	eax = 0x00005A4D
	SCZO = cond(Mem0[0x00400000:word16] - ax)
	branch Test(NE,Z) l004015BF
	// succ:  l00401562 l004015BF
l00401562:
	eax = Mem0[0x0040003C:word32]
	SCZO = cond(Mem0[eax + 0x00400000:word32] - 0x00004550)
	branch Test(NE,Z) l004015BF
	// succ:  l00401573 l004015BF
l00401573:
	ecx = 0x0000010B
	SCZO = cond(Mem0[eax + 0x00400018:word16] - cx)
	branch Test(NE,Z) l004015BF
	// succ:  l00401581 l004015BF
l00401581:
	eax = Mem0[ebp + 0x00000008:word32]
	ecx = 0x00400000
	eax = eax - ecx
	SCZO = cond(eax)
	esp = esp - 0x00000004
	Mem0[esp:word32] = eax
	esp = esp - 0x00000004
	Mem0[esp:word32] = ecx
	call fn004013FB (retsize: 4;)
	ecx = Mem0[esp:word32]
	esp = esp + 0x00000004
	ecx = Mem0[esp:word32]
	esp = esp + 0x00000004
	SZO = cond(eax & eax)
	C = false
	branch Test(EQ,Z) l004015BF
	// succ:  l00401598 l004015BF
l00401598:
	SCZO = cond(Mem0[eax + 0x00000024:word32] - 0x00000000)
	branch Test(LT,SO) l004015BF
	// succ:  l0040159E l004015BF
l0040159E:
	Mem0[ebp - 0x00000004:word32] = 0xFFFFFFFE
	al = 0x01
	goto l004015C8
	// succ:  l004015C8
l004015BF:
	Mem0[ebp - 0x00000004:word32] = 0xFFFFFFFE
	al = al ^ al
	SZO = cond(al)
	C = false
	// succ:  l004015C8
l004015C8:
	call fn004019C6 (retsize: 4;)
	return
	// succ:  fn00401544_exit
fn00401544_exit:


// fn004015CE
// Return size: 4
define fn004015CE
fn004015CE_entry:
	// succ:  l004015CE
l004015CE:
	esp = fp
	Top = 0
	esp = esp - 0x00000004
	Mem0[esp:word32] = ebp
	ebp = esp
	call fn00401B98 (retsize: 4;)
	SZO = cond(eax & eax)
	C = false
	branch Test(EQ,Z) l004015E9
	// succ:  l004015DA l004015E9
l004015DA:
	SCZO = cond(Mem0[ebp + 0x00000008:byte] - 0x00)
	branch Test(NE,Z) l004015E9
	// succ:  l004015E0 l004015E9
l004015E0:
	eax = eax ^ eax
	SZO = cond(eax)
	C = false
	ecx = 0x00403338
	v10 = Mem0[ecx:word32]
	Mem0[ecx:word32] = eax
	eax = v10
	// succ:  l004015E9
l004015E9:
	ebp = Mem0[esp:word32]
	esp = esp + 0x00000004
	return
	// succ:  fn004015CE_exit
fn004015CE_exit:


// fn004015EB
// Return size: 4
define fn004015EB
fn004015EB_entry:
	// succ:  l004015EB
l004015EB:
	esp = fp
	Top = 0
	esp = esp - 0x00000004
	Mem0[esp:word32] = ebp
	ebp = esp
	SCZO = cond(Mem0[0x00403354:byte] - 0x00)
	branch Test(EQ,Z) l004015FD
	// succ:  l004015F7 l004015FD
l004015F7:
	SCZO = cond(Mem0[ebp + 0x0000000C:byte] - 0x00)
	branch Test(NE,Z) l0040160F
	// succ:  l004015FD l0040160F
l004015FD:
	v6 = Mem0[ebp + 0x00000008:word32]
	esp = esp - 0x00000004
	Mem0[esp:word32] = v6
	call fn00401C48 (retsize: 4;)
	v7 = Mem0[ebp + 0x00000008:word32]
	esp = esp - 0x00000004
	Mem0[esp:word32] = v7
	call fn00401C48 (retsize: 4;)
	ecx = Mem0[esp:word32]
	esp = esp + 0x00000004
	ecx = Mem0[esp:word32]
	esp = esp + 0x00000004
	// succ:  l0040160F
l0040160F:
	al = 0x01
	ebp = Mem0[esp:word32]
	esp = esp + 0x00000004
	return
	// succ:  fn004015EB_exit
fn004015EB_exit:


// fn00401613
// Return size: 4
define fn00401613
fn00401613_entry:
	// succ:  l00401613
l00401613:
	esp = fp
	Top = 0
	esp = esp - 0x00000004
	Mem0[esp:word32] = ebp
	ebp = esp
	eax = Mem0[0x00403004:word32]
	ecx = eax
	eax = eax ^ Mem0[0x0040333C:word32]
	SZO = cond(eax)
	C = false
	ecx = ecx & 0x0000001F
	SZO = cond(ecx)
	C = false
	v8 = Mem0[ebp + 0x00000008:word32]
	esp = esp - 0x00000004
	Mem0[esp:word32] = v8
	v10 = (eax & 0x00000001 << cl) != 0x00000000
	eax = __ror(eax, cl)
	C = v10
	SCZO = cond(eax - 0xFFFFFFFF)
	branch Test(NE,Z) l00401637
	// succ:  l00401630 l00401637
l00401630:
	call crt_atexit (retsize: 4;)
	esp = esp + 0xFFFFFFFC
	goto l00401642
	// succ:  l00401642
l00401637:
	esp = esp - 0x00000004
	Mem0[esp:word32] = 0x0040333C
	call register_onexit_function (retsize: 4;)
	esp = esp + 0xFFFFFFFC
	ecx = Mem0[esp:word32]
	esp = esp + 0x00000004
	// succ:  l00401642
l00401642:
	eax = -eax
	SCZO = cond(eax)
	C = eax == 0x00000000
	ecx = Mem0[esp:word32]
	esp = esp + 0x00000004
	eax = eax - eax - C
	SCZO = cond(eax)
	eax = ~eax
	eax = eax & Mem0[ebp + 0x00000008:word32]
	SZO = cond(eax)
	C = false
	ebp = Mem0[esp:word32]
	esp = esp + 0x00000004
	return
	// succ:  fn00401613_exit
fn00401613_exit:


// fn0040164E
// Return size: 4
define fn0040164E
fn0040164E_entry:
	// succ:  l0040164E
l0040164E:
	esp = fp
	Top = 0
	esp = esp - 0x00000004
	Mem0[esp:word32] = ebp
	ebp = esp
	v4 = Mem0[ebp + 0x00000008:word32]
	esp = esp - 0x00000004
	Mem0[esp:word32] = v4
	call fn00401613 (retsize: 4;)
	eax = -eax
	SCZO = cond(eax)
	C = eax == 0x00000000
	ecx = Mem0[esp:word32]
	esp = esp + 0x00000004
	eax = eax - eax - C
	SCZO = cond(eax)
	eax = -eax
	SCZO = cond(eax)
	C = eax == 0x00000000
	eax = eax - 0x00000001
	SZO = cond(eax)
	ebp = Mem0[esp:word32]
	esp = esp + 0x00000004
	return
	// succ:  fn0040164E_exit
fn0040164E_exit:


// fn00401663
// Return size: 4
define fn00401663
fn00401663_entry:
	// succ:  l00401663
l00401663:
	esp = fp
	Top = 0
	esp = esp - 0x00000004
	Mem0[esp:word32] = ebp
	ebp = esp
	esp = esp - 0x00000014
	SCZO = cond(esp)
	v5 = Mem0[ebp - 0x0000000C:word32] & 0x00000000
	Mem0[ebp - 0x0000000C:word32] = v5
	SZO = cond(Mem0[ebp - 0x0000000C:word32])
	C = false
	v8 = Mem0[ebp - 0x00000008:word32] & 0x00000000
	Mem0[ebp - 0x00000008:word32] = v8
	SZO = cond(Mem0[ebp - 0x00000008:word32])
	C = false
	eax = Mem0[0x00403004:word32]
	esp = esp - 0x00000004
	Mem0[esp:word32] = esi
	esp = esp - 0x00000004
	Mem0[esp:word32] = edi
	edi = 0xBB40E64E
	esi = 0xFFFF0000
	SCZO = cond(eax - edi)
	branch Test(EQ,Z) l00401693
	// succ:  l00401686 l00401693
l00401686:
	SZO = cond(esi & eax)
	C = false
	branch Test(EQ,Z) l00401693
	// succ:  l0040168A l00401693
l0040168A:
	eax = ~eax
	Mem0[0x00403000:word32] = eax
	goto l004016F9
	// succ:  l004016F9
l00401693:
	eax = ebp - 0x0000000C
	esp = esp - 0x00000004
	Mem0[esp:word32] = eax
	GetSystemTimeAsFileTime(Mem0[esp:LPFILETIME])
	esp = esp + 0x00000004
	eax = Mem0[ebp - 0x00000008:word32]
	eax = eax ^ Mem0[ebp - 0x0000000C:word32]
	SZO = cond(eax)
	C = false
	Mem0[ebp - 0x00000004:word32] = eax
	eax = GetCurrentThreadId()
	v13 = Mem0[ebp - 0x00000004:word32] ^ eax
	Mem0[ebp - 0x00000004:word32] = v13
	SZO = cond(Mem0[ebp - 0x00000004:word32])
	C = false
	eax = GetCurrentProcessId()
	v14 = Mem0[ebp - 0x00000004:word32] ^ eax
	Mem0[ebp - 0x00000004:word32] = v14
	SZO = cond(Mem0[ebp - 0x00000004:word32])
	C = false
	eax = ebp - 0x00000014
	esp = esp - 0x00000004
	Mem0[esp:word32] = eax
	eax = QueryPerformanceCounter(Mem0[esp:(ptr LARGE_INTEGER)])
	esp = esp + 0x00000004
	ecx = Mem0[ebp - 0x00000010:word32]
	eax = ebp - 0x00000004
	ecx = ecx ^ Mem0[ebp - 0x00000014:word32]
	SZO = cond(ecx)
	C = false
	ecx = ecx ^ Mem0[ebp - 0x00000004:word32]
	SZO = cond(ecx)
	C = false
	ecx = ecx ^ eax
	SZO = cond(ecx)
	C = false
	SCZO = cond(ecx - edi)
	branch Test(NE,Z) l004016DB
	// succ:  l004016D4 l004016DB
l004016D4:
	ecx = 0xBB40E64F
	goto l004016EB
	// succ:  l004016EB
l004016DB:
	SZO = cond(esi & ecx)
	C = false
	branch Test(NE,Z) l004016EB
	// succ:  l004016DF l004016EB
l004016DF:
	eax = ecx
	eax = eax | 0x00004711
	SZO = cond(eax)
	C = false
	eax = eax << 0x00000010
	SCZO = cond(eax)
	ecx = ecx | eax
	SZO = cond(ecx)
	C = false
	// succ:  l004016EB
l004016EB:
	Mem0[0x00403004:word32] = ecx
	ecx = ~ecx
	Mem0[0x00403000:word32] = ecx
	// succ:  l004016F9
l004016F9:
	edi = Mem0[esp:word32]
	esp = esp + 0x00000004
	esi = Mem0[esp:word32]
	esp = esp + 0x00000004
	esp = ebp
	ebp = Mem0[esp:word32]
	esp = esp + 0x00000004
	return
	// succ:  fn00401663_exit
fn00401663_exit:


// fn004016FF
// Return size: 4
define fn004016FF
fn004016FF_entry:
	// succ:  l004016FF
l004016FF:
	esp = fp
	Top = 0
	eax = eax ^ eax
	SZO = cond(eax)
	C = false
	eax = eax + 0x00000001
	SZO = cond(eax)
	return
	// succ:  fn004016FF_exit
fn004016FF_exit:


// fn00401703
// Return size: 4
define fn00401703
fn00401703_entry:
	// succ:  l00401703
l00401703:
	esp = fp
	Top = 0
	eax = 0x00004000
	return
	// succ:  fn00401703_exit
fn00401703_exit:


// fn00401709
// Return size: 4
define fn00401709
fn00401709_entry:
	// succ:  l00401709
l00401709:
	esp = fp
	Top = 0
	eax = eax ^ eax
	SZO = cond(eax)
	C = false
	return
	// succ:  fn00401709_exit
fn00401709_exit:


// fn0040170C
// Return size: 4
define fn0040170C
fn0040170C_entry:
	// succ:  l0040170C
l0040170C:
	esp = fp
	Top = 0
	esp = esp - 0x00000004
	Mem0[esp:word32] = 0x00403358
	InitializeSListHead(Mem0[esp:PSLIST_HEADER])
	esp = esp + 0x00000004
	return
	// succ:  fn0040170C_exit
fn0040170C_exit:


// fn00401718
// Return size: 4
define fn00401718
fn00401718_entry:
	// succ:  l00401718
l00401718:
	esp = fp
	Top = 0
	esp = esp - 0x00000004
	Mem0[esp:word32] = 0x00030000
	esp = esp - 0x00000004
	Mem0[esp:word32] = 0x00010000
	esp = esp - 0x00000004
	Mem0[esp:word32] = 0x00000000
	call controlfp_s (retsize: 4;)
	esp = esp + 0xFFFFFFFC
	esp = esp + 0x0000000C
	SCZO = cond(esp)
	SZO = cond(eax & eax)
	C = false
	branch Test(NE,Z) l00401731
	// succ:  l00401730 l00401731
l00401730:
	return
	// succ:  fn00401718_exit
l00401731:
	esp = esp - 0x00000004
	Mem0[esp:word32] = 0x00000007
	call fn00401774 (retsize: 4;)
	int3()
	// succ:  l00401738_thunk_fn00401739
l00401738_thunk_fn00401739:
	call fn00401739 (retsize: 4;)
	return
	// succ:  fn00401718_exit
fn00401718_exit:


// fn00401739
// Return size: 4
define fn00401739
fn00401739_entry:
	// succ:  l00401739
l00401739:
	esp = fp
	Top = 0
	eax = 0x00403360
	return
	// succ:  fn00401739_exit
fn00401739_exit:


// fn0040173F
// Return size: 4
define fn0040173F
fn0040173F_entry:
	// succ:  l0040173F
l0040173F:
	esp = fp
	Top = 0
	call fn00401050 (retsize: 4;)
	ecx = Mem0[eax + 0x00000004:word32]
	v5 = Mem0[eax:word32] | 0x00000004
	Mem0[eax:word32] = v5
	SZO = cond(Mem0[eax:word32])
	C = false
	Mem0[eax + 0x00000004:word32] = ecx
	call fn00401739 (retsize: 4;)
	ecx = Mem0[eax + 0x00000004:word32]
	v8 = Mem0[eax:word32] | 0x00000002
	Mem0[eax:word32] = v8
	SZO = cond(Mem0[eax:word32])
	C = false
	Mem0[eax + 0x00000004:word32] = ecx
	return
	// succ:  fn0040173F_exit
fn0040173F_exit:


// fn0040175C
// Return size: 4
define fn0040175C
fn0040175C_entry:
	// succ:  l0040175C
l0040175C:
	esp = fp
	Top = 0
	eax = eax ^ eax
	SZO = cond(eax)
	C = false
	SCZO = cond(Mem0[0x0040300C:word32] - eax)
	al = Test(EQ,Z)
	return
	// succ:  fn0040175C_exit
fn0040175C_exit:


// fn00401768
// Return size: 4
define fn00401768
fn00401768_entry:
	// succ:  l00401768
l00401768:
	esp = fp
	Top = 0
	eax = 0x00403388
	return
	// succ:  fn00401768_exit
fn00401768_exit:


// fn0040176E
// Return size: 4
define fn0040176E
fn0040176E_entry:
	// succ:  l0040176E
l0040176E:
	esp = fp
	Top = 0
	eax = 0x00403384
	return
	// succ:  fn0040176E_exit
fn0040176E_exit:


// fn00401774
// Return size: 4
define fn00401774
fn00401774_entry:
	// succ:  l00401774
l00401774:
	esp = fp
	Top = 0
	esp = esp - 0x00000004
	Mem0[esp:word32] = ebp
	ebp = esp
	esp = esp - 0x00000324
	SCZO = cond(esp)
	esp = esp - 0x00000004
	Mem0[esp:word32] = ebx
	esp = esp - 0x00000004
	Mem0[esp:word32] = esi
	esp = esp - 0x00000004
	Mem0[esp:word32] = 0x00000017
	eax = IsProcessorFeaturePresent(Mem0[esp:DWORD])
	esp = esp + 0x00000004
	SZO = cond(eax & eax)
	C = false
	branch Test(EQ,Z) l0040178F
	// succ:  l0040178A l0040178F
l0040178A:
	ecx = Mem0[ebp + 0x00000008:word32]
	__fastfail(ecx)
l0040178F:
	esi = esi ^ esi
	SZO = cond(esi)
	C = false
	eax = ebp - 0x00000324
	esp = esp - 0x00000004
	Mem0[esp:word32] = 0x000002CC
	esp = esp - 0x00000004
	Mem0[esp:word32] = esi
	esp = esp - 0x00000004
	Mem0[esp:word32] = eax
	Mem0[0x00403368:word32] = esi
	eax = memset(Mem0[esp:(ptr void)], Mem0[esp + 4:int32], Mem0[esp + 8:size_t])
	esp = esp + 0x0000000C
	SCZO = cond(esp)
	Mem0[ebp - 0x00000274:word32] = eax
	Mem0[ebp - 0x00000278:word32] = ecx
	Mem0[ebp - 0x0000027C:word32] = edx
	Mem0[ebp - 0x00000280:word32] = ebx
	Mem0[ebp - 0x00000284:word32] = esi
	Mem0[ebp - 0x00000288:word32] = edi
	Mem0[ebp - 0x0000025C:word16] = ss
	Mem0[ebp - 0x00000268:word16] = cs
	Mem0[ebp - 0x0000028C:word16] = ds
	Mem0[ebp - 0x00000290:word16] = es
	Mem0[ebp - 0x00000294:word16] = fs
	Mem0[ebp - 0x00000298:word16] = gs
	esp = esp - 0x00000004
	Mem0[esp:word32] = SCZDOP
	Mem0[ebp - 0x00000264:word32] = Mem0[esp:word32]
	esp = esp + 0x00000004
	eax = Mem0[ebp + 0x00000004:word32]
	Mem0[ebp - 0x0000026C:word32] = eax
	eax = ebp + 0x00000004
	Mem0[ebp - 0x00000260:word32] = eax
	Mem0[ebp - 0x00000324:word32] = 0x00010001
	eax = Mem0[eax - 0x00000004:word32]
	esp = esp - 0x00000004
	Mem0[esp:word32] = 0x00000050
	Mem0[ebp - 0x00000270:word32] = eax
	eax = ebp - 0x00000058
	esp = esp - 0x00000004
	Mem0[esp:word32] = esi
	esp = esp - 0x00000004
	Mem0[esp:word32] = eax
	eax = memset(Mem0[esp:(ptr void)], Mem0[esp + 4:int32], Mem0[esp + 8:size_t])
	eax = Mem0[ebp + 0x00000004:word32]
	esp = esp + 0x0000000C
	SCZO = cond(esp)
	Mem0[ebp - 0x00000058:word32] = 0x40000015
	Mem0[ebp - 0x00000054:word32] = 0x00000001
	Mem0[ebp - 0x0000004C:word32] = eax
	eax = IsDebuggerPresent()
	esp = esp - 0x00000004
	Mem0[esp:word32] = esi
	ebx = eax - 0x00000001
	ebx = -ebx
	SCZO = cond(ebx)
	C = ebx == 0x00000000
	eax = ebp - 0x00000058
	Mem0[ebp - 0x00000008:word32] = eax
	eax = ebp - 0x00000324
	bl = bl - bl - C
	SCZO = cond(bl)
	Mem0[ebp - 0x00000004:word32] = eax
	bl = bl + 0x01
	SZO = cond(bl)
	eax = SetUnhandledExceptionFilter(Mem0[esp:LPTOP_LEVEL_EXCEPTION_FILTER])
	esp = esp + 0x00000004
	eax = ebp - 0x00000008
	esp = esp - 0x00000004
	Mem0[esp:word32] = eax
	eax = UnhandledExceptionFilter(Mem0[esp:(ptr (struct "_EXCEPTION_POINTERS"))])
	esp = esp + 0x00000004
	SZO = cond(eax & eax)
	C = false
	branch Test(NE,Z) l00401889
	// succ:  l0040187C l00401889
l0040187C:
	eax = (word32) bl
	eax = -eax
	SCZO = cond(eax)
	C = eax == 0x00000000
	eax = eax - eax - C
	SCZO = cond(eax)
	v22 = Mem0[0x00403368:word32] & eax
	Mem0[0x00403368:word32] = v22
	SZO = cond(Mem0[0x00403368:word32])
	C = false
	// succ:  l00401889
l00401889:
	esi = Mem0[esp:word32]
	esp = esp + 0x00000004
	ebx = Mem0[esp:word32]
	esp = esp + 0x00000004
	esp = ebp
	ebp = Mem0[esp:word32]
	esp = esp + 0x00000004
	return
	// succ:  fn00401774_exit
fn00401774_exit:


// fn0040188F
// Return size: 4
define fn0040188F
fn0040188F_entry:
	// succ:  l0040188F
l0040188F:
	esp = fp
	Top = 0
	esp = esp - 0x00000004
	Mem0[esp:word32] = 0x00000000
	eax = GetModuleHandleW(Mem0[esp:LPCWSTR])
	esp = esp + 0x00000004
	ecx = eax
	SZO = cond(ecx & ecx)
	C = false
	branch Test(NE,Z) l004018A0
	// succ:  l0040189D l004018A0
l0040189D:
	al = al ^ al
	SZO = cond(al)
	C = false
	return
	// succ:  fn0040188F_exit
l004018A0:
	eax = 0x00005A4D
	SCZO = cond(Mem0[ecx:word16] - ax)
	branch Test(NE,Z) l0040189D
	// succ:  l004018AA l0040189D
l004018AA:
	eax = Mem0[ecx + 0x0000003C:word32]
	eax = eax + ecx
	SCZO = cond(eax)
	SCZO = cond(Mem0[eax:word32] - 0x00004550)
	branch Test(NE,Z) l0040189D
	// succ:  l004018B7 l0040189D
l004018B7:
	ecx = 0x0000010B
	SCZO = cond(Mem0[eax + 0x00000018:word16] - cx)
	branch Test(NE,Z) l0040189D
	// succ:  l004018C2 l0040189D
l004018C2:
	SCZO = cond(Mem0[eax + 0x00000074:word32] - 0x0000000E)
	branch Test(ULE,CZ) l0040189D
	// succ:  l004018C8 l0040189D
l004018C8:
	SCZO = cond(Mem0[eax + 0x000000E8:word32] - 0x00000000)
	al = Test(NE,Z)
	return
	// succ:  fn0040188F_exit
fn0040188F_exit:


// fn004018D3
// Return size: 4
define fn004018D3
fn004018D3_entry:
	// succ:  l004018D3
l004018D3:
	esp = fp
	Top = 0
	esp = esp - 0x00000004
	Mem0[esp:word32] = 0x004018DF
	eax = SetUnhandledExceptionFilter(Mem0[esp:LPTOP_LEVEL_EXCEPTION_FILTER])
	esp = esp + 0x00000004
	return
	// succ:  fn004018D3_exit
fn004018D3_exit:


// fn00401920
// Return size: 4
define fn00401920
fn00401920_entry:
	// succ:  l00401920
l00401920:
	esp = fp
	Top = 0
	esp = esp - 0x00000004
	Mem0[esp:word32] = ebx
	esp = esp - 0x00000004
	Mem0[esp:word32] = esi
	esi = 0x004024C8
	ebx = 0x004024C8
	SCZO = cond(esi - ebx)
	branch Test(UGE,C) l00401948
	// succ:  l00401930 l00401948
l00401930:
	esp = esp - 0x00000004
	Mem0[esp:word32] = edi
	// succ:  l00401931
l00401931:
	edi = Mem0[esi:word32]
	SZO = cond(edi & edi)
	C = false
	branch Test(EQ,Z) l00401940
	// succ:  l00401937 l00401940
l00401937:
	ecx = edi
	call fn00401976 (retsize: 4;)
	call edi (retsize: 4;)
	// succ:  l00401940
l00401940:
	esi = esi + 0x00000004
	SCZO = cond(esi)
	SCZO = cond(esi - ebx)
	branch Test(ULT,C) l00401931
	// succ:  l00401947 l00401931
l00401947:
	edi = Mem0[esp:word32]
	esp = esp + 0x00000004
	// succ:  l00401948
l00401948:
	esi = Mem0[esp:word32]
	esp = esp + 0x00000004
	ebx = Mem0[esp:word32]
	esp = esp + 0x00000004
	return
	// succ:  fn00401920_exit
fn00401920_exit:


// fn00401976
// Return size: 0
define fn00401976
fn00401976_entry:
	// succ:  l00401976
l00401976:
	esp = fp
	Top = 0
	call Mem0[0x004020D0:word32] (retsize: 4;)
	return
	// succ:  fn00401976_exit
fn00401976_exit:


// fn00401980
// Return size: 4
define fn00401980
fn00401980_entry:
	// succ:  l00401980
l00401980:
	esp = fp
	Top = 0
	esp = esp - 0x00000004
	Mem0[esp:word32] = 0x004019DB
	v4 = Mem0[fs:0x00000000:word32]
	esp = esp - 0x00000004
	Mem0[esp:word32] = v4
	eax = Mem0[esp + 0x00000010:word32]
	Mem0[esp + 0x00000010:word32] = ebp
	ebp = esp + 0x00000010
	esp = esp - eax
	SCZO = cond(esp)
	esp = esp - 0x00000004
	Mem0[esp:word32] = ebx
	esp = esp - 0x00000004
	Mem0[esp:word32] = esi
	esp = esp - 0x00000004
	Mem0[esp:word32] = edi
	eax = Mem0[0x00403004:word32]
	v11 = Mem0[ebp - 0x00000004:word32] ^ eax
	Mem0[ebp - 0x00000004:word32] = v11
	SZO = cond(Mem0[ebp - 0x00000004:word32])
	C = false
	eax = eax ^ ebp
	SZO = cond(eax)
	C = false
	esp = esp - 0x00000004
	Mem0[esp:word32] = eax
	Mem0[ebp - 0x00000018:word32] = esp
	v14 = Mem0[ebp - 0x00000008:word32]
	esp = esp - 0x00000004
	Mem0[esp:word32] = v14
	eax = Mem0[ebp - 0x00000004:word32]
	Mem0[ebp - 0x00000004:word32] = 0xFFFFFFFE
	Mem0[ebp - 0x00000008:word32] = eax
	eax = ebp - 0x00000010
	Mem0[fs:0x00000000:word32] = eax
	return
	// succ:  fn00401980_exit
fn00401980_exit:


// fn004019C6
// Return size: 4
define fn004019C6
fn004019C6_entry:
	// succ:  l004019C6
l004019C6:
	esp = fp
	Top = 0
	ecx = Mem0[ebp - 0x00000010:word32]
	Mem0[fs:0x00000000:word32] = ecx
	ecx = Mem0[esp:word32]
	esp = esp + 0x00000004
	edi = Mem0[esp:word32]
	esp = esp + 0x00000004
	edi = Mem0[esp:word32]
	esp = esp + 0x00000004
	esi = Mem0[esp:word32]
	esp = esp + 0x00000004
	ebx = Mem0[esp:word32]
	esp = esp + 0x00000004
	esp = ebp
	ebp = Mem0[esp:word32]
	esp = esp + 0x00000004
	esp = esp - 0x00000004
	Mem0[esp:word32] = ecx
	return
	// succ:  fn004019C6_exit
fn004019C6_exit:


// fn004019FE
// Return size: 4
define fn004019FE
fn004019FE_entry:
	// succ:  l004019FE
l004019FE:
	esp = fp
	Top = 0
	esp = esp - 0x00000004
	Mem0[esp:word32] = ebp
	ebp = esp
	v4 = Mem0[0x0040336C:word32] & 0x00000000
	Mem0[0x0040336C:word32] = v4
	SZO = cond(Mem0[0x0040336C:word32])
	C = false
	esp = esp - 0x00000028
	SCZO = cond(esp)
	esp = esp - 0x00000004
	Mem0[esp:word32] = ebx
	ebx = ebx ^ ebx
	SZO = cond(ebx)
	C = false
	ebx = ebx + 0x00000001
	SZO = cond(ebx)
	v9 = Mem0[0x00403010:word32] | ebx
	Mem0[0x00403010:word32] = v9
	SZO = cond(Mem0[0x00403010:word32])
	C = false
	esp = esp - 0x00000004
	Mem0[esp:word32] = 0x0000000A
	eax = IsProcessorFeaturePresent(Mem0[esp:DWORD])
	esp = esp + 0x00000004
	SZO = cond(eax & eax)
	C = false
	branch Test(EQ,Z) l00401B91
	// succ:  l00401A24 l00401B91
l00401A24:
	v12 = Mem0[ebp - 0x00000010:word32] & 0x00000000
	Mem0[ebp - 0x00000010:word32] = v12
	SZO = cond(Mem0[ebp - 0x00000010:word32])
	C = false
	eax = eax ^ eax
	SZO = cond(eax)
	C = false
	v13 = Mem0[0x00403010:word32] | 0x00000002
	Mem0[0x00403010:word32] = v13
	SZO = cond(Mem0[0x00403010:word32])
	C = false
	ecx = ecx ^ ecx
	SZO = cond(ecx)
	C = false
	esp = esp - 0x00000004
	Mem0[esp:word32] = esi
	esp = esp - 0x00000004
	Mem0[esp:word32] = edi
	Mem0[0x0040336C:word32] = ebx
	edi = ebp - 0x00000028
	esp = esp - 0x00000004
	Mem0[esp:word32] = ebx
	__cpuid(eax, ecx, &eax, &ebx, &ecx, &edx)
	esi = ebx
	ebx = Mem0[esp:word32]
	esp = esp + 0x00000004
	Mem0[edi:word32] = eax
	Mem0[edi + 0x00000004:word32] = esi
	Mem0[edi + 0x00000008:word32] = ecx
	Mem0[edi + 0x0000000C:word32] = edx
	eax = Mem0[ebp - 0x00000028:word32]
	ecx = Mem0[ebp - 0x0000001C:word32]
	Mem0[ebp - 0x00000008:word32] = eax
	ecx = ecx ^ 0x49656E69
	SZO = cond(ecx)
	C = false
	eax = Mem0[ebp - 0x00000020:word32]
	eax = eax ^ 0x6C65746E
	SZO = cond(eax)
	C = false
	ecx = ecx | eax
	SZO = cond(ecx)
	C = false
	eax = Mem0[ebp - 0x00000024:word32]
	esp = esp - 0x00000004
	Mem0[esp:word32] = 0x00000001
	eax = eax ^ 0x756E6547
	SZO = cond(eax)
	C = false
	ecx = ecx | eax
	SZO = cond(ecx)
	C = false
	eax = Mem0[esp:word32]
	esp = esp + 0x00000004
	esp = esp - 0x00000004
	Mem0[esp:word32] = 0x00000000
	ecx = Mem0[esp:word32]
	esp = esp + 0x00000004
	esp = esp - 0x00000004
	Mem0[esp:word32] = ebx
	__cpuid(eax, ecx, &eax, &ebx, &ecx, &edx)
	esi = ebx
	ebx = Mem0[esp:word32]
	esp = esp + 0x00000004
	Mem0[edi:word32] = eax
	Mem0[edi + 0x00000004:word32] = esi
	Mem0[edi + 0x00000008:word32] = ecx
	Mem0[edi + 0x0000000C:word32] = edx
	branch Test(NE,Z) l00401ACE
	// succ:  l00401A8B l00401ACE
l00401A8B:
	eax = Mem0[ebp - 0x00000028:word32]
	eax = eax & 0x0FFF3FF0
	SZO = cond(eax)
	C = false
	SCZO = cond(eax - 0x000106C0)
	branch Test(EQ,Z) l00401ABD
	// succ:  l00401A9A l00401ABD
l00401A9A:
	SCZO = cond(eax - 0x00020660)
	branch Test(EQ,Z) l00401ABD
	// succ:  l00401AA1 l00401ABD
l00401AA1:
	SCZO = cond(eax - 0x00020670)
	branch Test(EQ,Z) l00401ABD
	// succ:  l00401AA8 l00401ABD
l00401AA8:
	SCZO = cond(eax - 0x00030650)
	branch Test(EQ,Z) l00401ABD
	// succ:  l00401AAF l00401ABD
l00401AAF:
	SCZO = cond(eax - 0x00030660)
	branch Test(EQ,Z) l00401ABD
	// succ:  l00401AB6 l00401ABD
l00401AB6:
	SCZO = cond(eax - 0x00030670)
	branch Test(NE,Z) l00401ACE
	// succ:  l00401ABD l00401ACE
l00401ABD:
	edi = Mem0[0x00403370:word32]
	edi = edi | 0x00000001
	SZO = cond(edi)
	C = false
	Mem0[0x00403370:word32] = edi
	goto l00401AD4
	// succ:  l00401AD4
l00401ACE:
	edi = Mem0[0x00403370:word32]
	// succ:  l00401AD4
l00401AD4:
	SCZO = cond(Mem0[ebp - 0x00000008:word32] - 0x00000007)
	eax = Mem0[ebp - 0x0000001C:word32]
	Mem0[ebp - 0x00000018:word32] = eax
	eax = Mem0[ebp - 0x00000020:word32]
	Mem0[ebp - 0x00000004:word32] = eax
	Mem0[ebp - 0x00000014:word32] = eax
	branch Test(LT,SO) l00401B1B
	// succ:  l00401AE9 l00401B1B
l00401AE9:
	esp = esp - 0x00000004
	Mem0[esp:word32] = 0x00000007
	eax = Mem0[esp:word32]
	esp = esp + 0x00000004
	ecx = ecx ^ ecx
	SZO = cond(ecx)
	C = false
	esp = esp - 0x00000004
	Mem0[esp:word32] = ebx
	__cpuid(eax, ecx, &eax, &ebx, &ecx, &edx)
	esi = ebx
	ebx = Mem0[esp:word32]
	esp = esp + 0x00000004
	ebx = ebp - 0x00000028
	Mem0[ebx:word32] = eax
	Mem0[ebx + 0x00000004:word32] = esi
	Mem0[ebx + 0x00000008:word32] = ecx
	Mem0[ebx + 0x0000000C:word32] = edx
	eax = Mem0[ebp - 0x00000024:word32]
	SZO = cond(eax & 0x00000200)
	C = false
	Mem0[ebp - 0x00000010:word32] = eax
	eax = Mem0[ebp - 0x00000004:word32]
	branch Test(EQ,Z) l00401B1B
	// succ:  l00401B12 l00401B1B
l00401B12:
	edi = edi | 0x00000002
	SZO = cond(edi)
	C = false
	Mem0[0x00403370:word32] = edi
	// succ:  l00401B1B
l00401B1B:
	edi = Mem0[esp:word32]
	esp = esp + 0x00000004
	esi = Mem0[esp:word32]
	esp = esp + 0x00000004
	SZO = cond(eax & 0x00100000)
	C = false
	branch Test(EQ,Z) l00401B91
	// succ:  l00401B24 l00401B91
l00401B24:
	v19 = Mem0[0x00403010:word32] | 0x00000004
	Mem0[0x00403010:word32] = v19
	SZO = cond(Mem0[0x00403010:word32])
	C = false
	Mem0[0x0040336C:word32] = 0x00000002
	SZO = cond(eax & 0x08000000)
	C = false
	branch Test(EQ,Z) l00401B91
	// succ:  l00401B3C l00401B91
l00401B3C:
	SZO = cond(eax & 0x10000000)
	C = false
	branch Test(EQ,Z) l00401B91
	// succ:  l00401B43 l00401B91
l00401B43:
	ecx = ecx ^ ecx
	SZO = cond(ecx)
	C = false
	edx_eax = __xgetbv(ecx)
	Mem0[ebp - 0x0000000C:word32] = eax
	Mem0[ebp - 0x00000008:word32] = edx
	eax = Mem0[ebp - 0x0000000C:word32]
	ecx = Mem0[ebp - 0x00000008:word32]
	eax = eax & 0x00000006
	SZO = cond(eax)
	C = false
	ecx = ecx ^ ecx
	SZO = cond(ecx)
	C = false
	SCZO = cond(eax - 0x00000006)
	branch Test(NE,Z) l00401B91
	// succ:  l00401B5E l00401B91
l00401B5E:
	SZO = cond(ecx & ecx)
	C = false
	branch Test(NE,Z) l00401B91
	// succ:  l00401B62 l00401B91
l00401B62:
	eax = Mem0[0x00403010:word32]
	eax = eax | 0x00000008
	SZO = cond(eax)
	C = false
	Mem0[0x0040336C:word32] = 0x00000003
	SZO = cond(Mem0[ebp - 0x00000010:byte] & 0x20)
	C = false
	Mem0[0x00403010:word32] = eax
	branch Test(EQ,Z) l00401B91
	// succ:  l00401B7F l00401B91
l00401B7F:
	eax = eax | 0x00000020
	SZO = cond(eax)
	C = false
	Mem0[0x0040336C:word32] = 0x00000005
	Mem0[0x00403010:word32] = eax
	// succ:  l00401B91
l00401B91:
	eax = eax ^ eax
	SZO = cond(eax)
	C = false
	ebx = Mem0[esp:word32]
	esp = esp + 0x00000004
	esp = ebp
	ebp = Mem0[esp:word32]
	esp = esp + 0x00000004
	return
	// succ:  fn004019FE_exit
fn004019FE_exit:


// fn00401B98
// Return size: 4
define fn00401B98
fn00401B98_entry:
	// succ:  l00401B98
l00401B98:
	esp = fp
	Top = 0
	eax = eax ^ eax
	SZO = cond(eax)
	C = false
	SCZO = cond(Mem0[0x00403014:word32] - eax)
	al = Test(NE,Z)
	return
	// succ:  fn00401B98_exit
fn00401B98_exit:


// fn00401BA4
// Return size: 4
define fn00401BA4
fn00401BA4_entry:
	// succ:  l00401BA4
l00401BA4:
	esp = fp
	Top = 0
	return
	// succ:  fn00401BA4_exit
fn00401BA4_exit:


// fn00401C48
// Return size: 4
define fn00401C48
fn00401C48_entry:
	// succ:  l00401C48
l00401C48:
	esp = fp
	Top = 0
	al = 0x01
	return
	// succ:  fn00401C48_exit
fn00401C48_exit:


