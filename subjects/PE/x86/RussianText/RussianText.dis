// _GetExceptDLLinfo
// Return size: 4
define _GetExceptDLLinfo
__GetExceptDLLinfo_entry:
	// succ:  l00401071
l00401071:
	esp = fp
	Top = 0
	// succ:  l00401071_thunk_fn004011FC
l00401071_thunk_fn004011FC:
	call fn004011FC (retsize: 0;)
	return
	// succ:  __GetExceptDLLinfo_exit
__GetExceptDLLinfo_exit:


// fn00401084
// Return size: 4
define fn00401084
fn00401084_entry:
	// succ:  l00401084
l00401084:
	esp = fp
	Top = 0
	v3 = esp
	esp = esp - 0x00000004
	Mem0[esp:word32] = eax
	esp = esp - 0x00000004
	Mem0[esp:word32] = ecx
	esp = esp - 0x00000004
	Mem0[esp:word32] = edx
	esp = esp - 0x00000004
	Mem0[esp:word32] = ebx
	esp = esp - 0x00000004
	Mem0[esp:word32] = v3
	esp = esp - 0x00000004
	Mem0[esp:word32] = ebp
	esp = esp - 0x00000004
	Mem0[esp:word32] = esi
	esp = esp - 0x00000004
	Mem0[esp:word32] = edi
	ebx = 0xBCB05000
	esp = esp - 0x00000004
	Mem0[esp:word32] = ebx
	esp = esp - 0x00000004
	Mem0[esp:word32] = 0x00000BAD
	return
	// succ:  fn00401084_exit
fn00401084_exit:


// fn0040110B
// Return size: 4
define fn0040110B
fn0040110B_entry:
	// succ:  l0040110B
l0040110B:
	esp = fp
	Top = 0
	SCZO = cond(Mem0[0x0040208B:word32] - 0x00000000)
	branch Test(ULT,C) l0040113C
	// succ:  l00401114 l0040113C
l00401114:
	v5 = Mem0[0x0040208B:word32]
	esp = esp - 0x00000004
	Mem0[esp:word32] = v5
	call __CRTL_TLS_GetValue (retsize: 4;)
	esp = esp + 0xFFFFFFFC
	eax = eax | eax
	SZO = cond(eax)
	C = false
	branch Test(EQ,Z) l0040113C
	// succ:  l00401123 l0040113C
l00401123:
	esp = esp - 0x00000004
	Mem0[esp:word32] = eax
	esp = esp - 0x00000004
	Mem0[esp:word32] = 0x00000008
	eax = GetProcessHeap()
	esp = esp - 0x00000004
	Mem0[esp:word32] = eax
	eax = HeapFree(Mem0[esp:HANDLE], Mem0[esp + 4:DWORD], Mem0[esp + 8:LPVOID])
	esp = esp + 0x0000000C
	v9 = Mem0[0x0040208B:word32]
	esp = esp - 0x00000004
	Mem0[esp:word32] = v9
	call __CRTL_TLS_ExitThread (retsize: 4;)
	esp = esp + 0xFFFFFFFC
	// succ:  l0040113C
l0040113C:
	return
	// succ:  fn0040110B_exit
fn0040110B_exit:


// fn00401158
// Return size: 4
define fn00401158
fn00401158_entry:
	// succ:  l00401158
l00401158:
	esp = fp
	Top = 0
	eax = Mem0[0x0040208B:word32]
	edx = Mem0[fs:0x002C:word32]
	eax = Mem0[edx + eax * 0x00000004:word32]
	return
	// succ:  fn00401158_exit
fn00401158_exit:


// main
// Return size: 4
int32 main(int32 argc, char ** argv)
main_entry:
	// succ:  l00401168
l00401168:
	Mem0[fp + 0x00000004:int32] = argc
	Mem0[fp + 0x00000008:(ptr (ptr char))] = argv
	esp = fp
	Top = 0
	esp = esp - 0x00000004
	Mem0[esp:word32] = ebp
	ebp = esp
	esp = esp - 0x00000004
	Mem0[esp:word32] = 0x004020A4
	call printf (retsize: 4;)
	esp = esp + 0xFFFFFFFC
	ecx = Mem0[esp:word32]
	esp = esp + 0x00000004
	eax = eax ^ eax
	SZO = cond(eax)
	C = false
	ebp = Mem0[esp:word32]
	esp = esp + 0x00000004
	return
	// succ:  main_exit
main_exit:


// fn0040117C
// Return size: 4
define fn0040117C
fn0040117C_entry:
	// succ:  l0040117C
l0040117C:
	esp = fp
	Top = 0
	return
	// succ:  fn0040117C_exit
fn0040117C_exit:


// fn00401180
// Return size: 4
define fn00401180
fn00401180_entry:
	// succ:  l00401180
l00401180:
	esp = fp
	Top = 0
	return
	// succ:  fn00401180_exit
fn00401180_exit:


// fn004011B0
// Return size: 4
define fn004011B0
fn004011B0_entry:
	// succ:  l004011B0
l004011B0:
	esp = fp
	Top = 0
	esp = esp - 0x00000004
	Mem0[esp:word32] = ebp
	ebp = esp
	esp = esp + 0xFFFFFFF8
	SCZO = cond(esp)
	esp = esp - 0x00000004
	Mem0[esp:word32] = ebx
	ebx = Mem0[ebp + 0x00000008:word32]
	SZO = cond(ebx & ebx)
	C = false
	al = Test(NE,Z)
	eax = eax & 0x00000001
	SZO = cond(eax)
	C = false
	SZO = cond(ebx & ebx)
	C = false
	branch Test(NE,Z) l004011D7
	// succ:  l004011C6 l004011D7
l004011C6:
	SZO = cond(ebx & ebx)
	C = false
	branch Test(NE,Z) l004011D7
	// succ:  l004011CA l004011D7
l004011CA:
	edx = ebp - 0x00000008
	esp = esp - 0x00000004
	Mem0[esp:word32] = edx
	call fn004011FC (retsize: 4;)
	esp = esp + 0x00000004
	ecx = Mem0[esp:word32]
	esp = esp + 0x00000004
	ebx = Mem0[ebp - 0x00000004:word32]
	// succ:  l004011D7
l004011D7:
	esp = esp - 0x00000004
	Mem0[esp:word32] = 0x0000009C
	esp = esp - 0x00000004
	Mem0[esp:word32] = ebx
	call fn00401158 (retsize: 4;)
	eax = eax + 0x00000000
	SCZO = cond(eax)
	esp = esp - 0x00000004
	Mem0[esp:word32] = eax
	call memcpy (retsize: 4;)
	esp = esp + 0xFFFFFFFC
	esp = esp + 0x0000000C
	SCZO = cond(esp)
	call _InitTermAndUnexPtrs$qv (retsize: 4;)
	esp = esp + 0xFFFFFFFC
	ebx = Mem0[esp:word32]
	esp = esp + 0x00000004
	ecx = Mem0[esp:word32]
	esp = esp + 0x00000004
	ecx = Mem0[esp:word32]
	esp = esp + 0x00000004
	ebp = Mem0[esp:word32]
	esp = esp + 0x00000004
	return
	// succ:  fn004011B0_exit
fn004011B0_exit:


// fn004011FC
// Return size: 0
define fn004011FC
fn004011FC_entry:
	// succ:  l004011FC
l004011FC:
	esp = fp
	Top = 0
	esp = esp - 0x00000004
	Mem0[esp:word32] = ebp
	ebp = esp
	esp = esp - 0x00000004
	Mem0[esp:word32] = ebx
	ebx = Mem0[ebp + 0x00000008:word32]
	call fn00401158 (retsize: 4;)
	eax = eax + 0x0000001C
	SCZO = cond(eax)
	Mem0[0x004020F8:word32] = eax
	Mem0[ebx:word32] = 0x82727349
	Mem0[ebx + 0x00000004:word32] = 0x004020E4
	ebx = Mem0[esp:word32]
	esp = esp + 0x00000004
	ebp = Mem0[esp:word32]
	esp = esp + 0x00000004
	return
	// succ:  fn004011FC_exit
fn004011FC_exit:


