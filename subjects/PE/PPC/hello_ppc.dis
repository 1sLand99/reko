// fn00400220
// Return size: 0
define fn00400220
fn00400220_entry:
	// succ:  l00400220
l00400220:
	r1 = fp
	Mem0[r1 + -64:word32] = r1
	r1 = r1 + -64
	r12 = lr
	Mem0[r1 + 72:word32] = r12
	Mem0[r1 + 88:word32] = r3
	Mem0[r1 + 92:word32] = r4
	r4 = Mem0[r2 + 68:word32]
	r4 = r4
	r3 = r4 | 0x00000000
	call fn00400268 (retsize: 0;)
	r0 = r0 | 0x00000000
	r5 = 0
	Mem0[r1 + 56:word32] = r5
	// succ:  l00400254
l00400254:
	r3 = Mem0[r1 + 56:word32]
	r12 = Mem0[r1 + 72:word32]
	lr = r12
	r1 = r1 + 64
	return
	// succ:  fn00400220_exit
fn00400220_exit:


// fn00400268
// Return size: 0
define fn00400268
fn00400268_entry:
	// succ:  l00400268
l00400268:
	r1 = fp
	Mem0[r1 + 24:word32] = r3
	Mem0[r1 + 28:word32] = r4
	Mem0[r1 + 32:word32] = r5
	Mem0[r1 + 36:word32] = r6
	Mem0[r1 + 40:word32] = r7
	Mem0[r1 + 44:word32] = r8
	Mem0[r1 + 48:word32] = r9
	Mem0[r1 + 52:word32] = r10
	Mem0[r1 + -72:word32] = r1
	r1 = r1 + -72
	Mem0[v11:word32] = r29
	v11 = v11 + 4
	Mem0[v11:word32] = r30
	v11 = v11 + 4
	Mem0[v11:word32] = r31
	v11 = v11 + 4
	r12 = lr
	r31 = Mem0[r2 + 72:word32]
	Mem0[r1 + 80:word32] = r12
	Mem0[r1 + 96:word32] = r3
	r31 = r31 + 32
	r3 = r31 | 0x00000000
	call fn004002F8 (retsize: 0;)
	r0 = r0 | 0x00000000
	r4 = Mem0[r1 + 96:word32]
	r30 = r3 | 0x00000000
	r3 = r31 | 0x00000000
	r5 = r1 + 96
	r5 = r5 + 4
	call fn004004B4 (retsize: 0;)
	r0 = r0 | 0x00000000
	r29 = r3 | 0x00000000
	r3 = r30 | 0x00000000
	r4 = r31 | 0x00000000
	call fn00400430 (retsize: 0;)
	r0 = r0 | 0x00000000
	r12 = Mem0[r1 + 80:word32]
	r3 = r29 | 0x00000000
	lr = r12
	v19 = r1 + 56
	r29 = Mem0[v19:word32]
	v19 = v19 + 4
	r30 = Mem0[v19:word32]
	v19 = v19 + 4
	r31 = Mem0[v19:word32]
	v19 = v19 + 4
	r1 = r1 + 72
	return
	// succ:  fn00400268_exit
fn00400268_exit:


// fn004002F8
// Return size: 0
define fn004002F8
fn004002F8_entry:
	// succ:  l004002F8
l004002F8:
	r1 = fp
	Mem0[r1 + -64:word32] = r1
	r1 = r1 + -64
	Mem0[v3:word32] = r30
	v3 = v3 + 4
	Mem0[v3:word32] = r31
	v3 = v3 + 4
	r31 = r3 | 0x00000000
	r12 = lr
	r3 = Mem0[r31 + 16:word32]
	Mem0[r1 + 72:word32] = r12
	call fn00401474 (retsize: 0;)
	r0 = r0 | 0x00000000
	cr1 = cond(r3 - 0)
	branch Test(NE,cr1) l00400338
	// succ:  l00400320 l00400338
l00400320:
	r12 = Mem0[r1 + 72:word32]
	r31 = Mem0[r1 + 60:word32]
	lr = r12
	r1 = r1 + 64
	r3 = 0
	return
	// succ:  fn004002F8_exit
l00400338:
	r11 = Mem0[r2 + 72:word32]
	r4 = r11 + 32
	cr1 = cond(r31 - r4)
	branch Test(NE,cr1) l00400350
	// succ:  l00400348 l00400350
l00400348:
	r10 = 0
	goto l00400360
	// succ:  l00400360
l00400350:
	r11 = r11 + 64
	cr1 = cond(r31 - r11)
	branch Test(NE,cr1) l00400418
	// succ:  l0040035C l00400418
l0040035C:
	r10 = 1
	// succ:  l00400360
l00400360:
	r4 = Mem0[r2 + 76:word32]
	r5 = Mem0[r4 + 0:word32]
	r5 = r5 + 1
	Mem0[r4 + 0:word32] = r5
	r6 = Mem0[r31 + 12:word32]
	r6 = r6 & 0x0000010C
	cr0 = cond(r6)
	branch Test(EQ,cr0) l00400394
	// succ:  l0040037C l00400394
l0040037C:
	r12 = Mem0[r1 + 72:word32]
	r31 = Mem0[r1 + 60:word32]
	lr = r12
	r1 = r1 + 64
	r3 = 0
	return
	// succ:  fn004002F8_exit
l00400394:
	r30 = Mem0[r2 + 80:word32]
	r10 = r10 << 0x02
	r11 = Mem0[r30 + r10:word32]
	r30 = r10 + r30
	cr1 = cond(r11 - 0x00000000)
	branch Test(NE,cr1) l004003E0
	// succ:  l004003AC l004003E0
l004003AC:
	r3 = 4096
	call fn00400F9C (retsize: 0;)
	r0 = r0 | 0x00000000
	r11 = r3 | 0x00000000
	cr1 = cond(r11 - 0x00000000)
	Mem0[r30 + 0:word32] = r3
	branch Test(NE,cr1) l004003E0
	// succ:  l004003C8 l004003E0
l004003C8:
	r12 = Mem0[r1 + 72:word32]
	v18 = r1 + 56
	r30 = Mem0[v18:word32]
	v18 = v18 + 4
	r31 = Mem0[v18:word32]
	v18 = v18 + 4
	lr = r12
	r1 = r1 + 64
	r3 = 0
	return
	// succ:  fn004002F8_exit
l004003E0:
	r12 = Mem0[r1 + 72:word32]
	r4 = Mem0[r31 + 12:word32]
	lr = r12
	r4 = r4 | 0x00001102
	Mem0[r31 + 12:word32] = r4
	Mem0[r31 + 8:word32] = r11
	r5 = 4096
	Mem0[r31 + 24:word32] = r5
	Mem0[r31 + 4:word32] = r5
	Mem0[r31 + 0:word32] = r11
	v19 = r1 + 56
	r30 = Mem0[v19:word32]
	v19 = v19 + 4
	r31 = Mem0[v19:word32]
	v19 = v19 + 4
	r1 = r1 + 64
	r3 = 1
	return
	// succ:  fn004002F8_exit
l00400418:
	r12 = Mem0[r1 + 72:word32]
	r31 = Mem0[r1 + 60:word32]
	lr = r12
	r1 = r1 + 64
	r3 = 0
	return
	// succ:  fn004002F8_exit
fn004002F8_exit:


// fn00400430
// Return size: 0
define fn00400430
fn00400430_entry:
	// succ:  l00400430
l00400430:
	r1 = fp
	cr1 = cond(r3 - 0)
	r12 = lr
	Mem0[r1 + -64:word32] = r1
	r1 = r1 + -64
	Mem0[r1 + 72:word32] = r12
	Mem0[r1 + 56:word32] = r31
	r31 = r4 | 0x00000000
	branch Test(EQ,cr1) l00400488
	// succ:  l0040044C l00400488
l0040044C:
	r4 = Mem0[r31 + 12:word32]
	r4 = r4 & 0x00001000
	cr0 = cond(r4)
	branch Test(EQ,cr0) l004004A0
	// succ:  l00400458 l004004A0
l00400458:
	r3 = r31 | 0x00000000
	call fn004012B0 (retsize: 0;)
	r0 = r0 | 0x00000000
	r4 = Mem0[r31 + 12:word32]
	r5 = 0
	Mem0[r31 + 24:word32] = r5
	Mem0[r31 + 0:word32] = r5
	Mem0[r31 + 8:word32] = r5
	r6 = -4353
	r4 = r4 & r6
	Mem0[r31 + 12:word32] = r4
	goto l004004A0
	// succ:  l004004A0
l00400488:
	r4 = Mem0[r31 + 12:word32]
	r4 = r4 & 0x00001000
	cr0 = cond(r4)
	branch Test(EQ,cr0) l004004A0
	// succ:  l00400494 l004004A0
l00400494:
	r3 = r31 | 0x00000000
	call fn004012B0 (retsize: 0;)
	r0 = r0 | 0x00000000
	// succ:  l004004A0
l004004A0:
	r12 = Mem0[r1 + 72:word32]
	r31 = Mem0[r1 + 56:word32]
	lr = r12
	r1 = r1 + 64
	return
	// succ:  fn00400430_exit
fn00400430_exit:


// fn004004B4
// Return size: 0
define fn004004B4
fn004004B4_entry:
	// succ:  l004004B4
l004004B4:
	r1 = fp
	Mem0[r1 + -704:word32] = r1
	r1 = r1 + -704
	Mem0[v3:word32] = r13
	v3 = v3 + 4
	Mem0[v3:word32] = r14
	v3 = v3 + 4
	Mem0[v3:word32] = r15
	v3 = v3 + 4
	Mem0[v3:word32] = r16
	v3 = v3 + 4
	Mem0[v3:word32] = r17
	v3 = v3 + 4
	Mem0[v3:word32] = r18
	v3 = v3 + 4
	Mem0[v3:word32] = r19
	v3 = v3 + 4
	Mem0[v3:word32] = r20
	v3 = v3 + 4
	Mem0[v3:word32] = r21
	v3 = v3 + 4
	Mem0[v3:word32] = r22
	v3 = v3 + 4
	Mem0[v3:word32] = r23
	v3 = v3 + 4
	Mem0[v3:word32] = r24
	v3 = v3 + 4
	Mem0[v3:word32] = r25
	v3 = v3 + 4
	Mem0[v3:word32] = r26
	v3 = v3 + 4
	Mem0[v3:word32] = r27
	v3 = v3 + 4
	Mem0[v3:word32] = r28
	v3 = v3 + 4
	Mem0[v3:word32] = r29
	v3 = v3 + 4
	Mem0[v3:word32] = r30
	v3 = v3 + 4
	Mem0[v3:word32] = r31
	v3 = v3 + 4
	r23 = r4 | 0x00000000
	Mem0[r1 + 736:word32] = r5
	r4 = 0
	Mem0[r1 + 56:word32] = r4
	r31 = (word32) Mem0[r23 + 0:byte]
	r12 = lr
	v27 = (int8) r31
	r31 = (int32) v27
	cr0 = cond(r31)
	r22 = r3 | 0x00000000
	Mem0[r1 + 712:word32] = r12
	r23 = r23 + 1
	r6 = 0
	Mem0[r1 + 60:word32] = r6
	branch Test(EQ,cr0) l00400DEC
	// succ:  l004004F0 l00400DEC
l004004F0:
	r26 = r1 + 64
	r21 = r1 + 576
	r14 = Mem0[r2 + 84:word32]
	r16 = Mem0[r2 + 88:word32]
	r13 = Mem0[r2 + 84:word32]
	r17 = Mem0[r2 + 92:word32]
	// succ:  l00400508
l00400508:
	r4 = Mem0[r1 + 56:word32]
	cr1 = cond(r4 - -1)
	branch Test(LE,cr1) l00400DEC
	// succ:  l00400514 l00400DEC
l00400514:
	cr1 = cond(r31 - 31)
	branch Test(LE,cr1) l00400544
	// succ:  l0040051C l00400544
l0040051C:
	cr1 = cond(r31 - 121)
	branch Test(GE,cr1) l00400544
	// succ:  l00400524 l00400544
l00400524:
	r4 = r14 + 4
	r4 = r4 + -32
	r5 = r31 | 0x00000000
	r4 = (word32) Mem0[r4 + r5:byte]
	v33 = (int8) r4
	r4 = (int32) v33
	r4 = r4 & 0x0000000F
	cr0 = cond(r4)
	r10 = r4 | 0x00000000
	goto l00400548
	// succ:  l00400548
l00400544:
	r10 = 0
	// succ:  l00400548
l00400548:
	r5 = Mem0[r1 + 60:word32]
	r4 = r14 + 4
	r10 = r10 << 0x03
	r10 = r10 + r5
	r4 = (word32) Mem0[r4 + r10:byte]
	v36 = (int8) r4
	r4 = (int32) v36
	r4 = r4 >> 0x00000004
	v37 = (int8) r4
	r4 = (int32) v37
	r11 = r4
	cr1 = cond(r11 - 0x00000008)
	Mem0[r1 + 60:word32] = r4
	branch Test(GE,cr1) l00400DDC
	// succ:  l00400578 l00400DDC
l00400578:
	r11 = r11 << 0x02
	call fn004005A0 (retsize: 0;)
	// succ:  l004005B0
l004005B0:
	r4 = Mem0[r16 + 0:word32]
	r5 = r31 & 0x000000FF
	cr0 = cond(r5)
	r5 = r5 << 0x01
	r4 = (word32) Mem0[r4 + r5:word16]
	r4 = r4 & 0x00008000
	cr0 = cond(r4)
	branch Test(EQ,cr0) l004005EC
	// succ:  l004005C8 l004005EC
l004005C8:
	r4 = r1 + 56
	Mem0[r1 + 616:word32] = r4
	r5 = Mem0[r1 + 616:word32]
	r4 = r22 | 0x00000000
	r3 = r31 | 0x00000000
	call fn00400E04 (retsize: 0;)
	r31 = (word32) Mem0[r23 + 0:byte]
	r23 = r23 + 1
	v40 = (int8) r31
	r31 = (int32) v40
	// succ:  l004005EC
l004005EC:
	r4 = r1 + 56
	Mem0[r1 + 616:word32] = r4
	r5 = Mem0[r1 + 616:word32]
	r4 = r22 | 0x00000000
	r3 = r31 | 0x00000000
	call fn00400E04 (retsize: 0;)
	// succ:  l00400DDC
l00400DDC:
	r31 = (word32) Mem0[r23 + 0:byte]
	r23 = r23 + 1
	v39 = (int8) r31
	r31 = (int32) v39
	cr0 = cond(r31)
	branch Test(NE,cr0) l00400508
	// succ:  l00400DEC l00400508
l00400DEC:
	r12 = Mem0[r1 + 712:word32]
	r3 = Mem0[r1 + 56:word32]
	lr = r12
	v35 = r1 + 624
	r13 = Mem0[v35:word32]
	v35 = v35 + 4
	r14 = Mem0[v35:word32]
	v35 = v35 + 4
	r15 = Mem0[v35:word32]
	v35 = v35 + 4
	r16 = Mem0[v35:word32]
	v35 = v35 + 4
	r17 = Mem0[v35:word32]
	v35 = v35 + 4
	r18 = Mem0[v35:word32]
	v35 = v35 + 4
	r19 = Mem0[v35:word32]
	v35 = v35 + 4
	r20 = Mem0[v35:word32]
	v35 = v35 + 4
	r21 = Mem0[v35:word32]
	v35 = v35 + 4
	r22 = Mem0[v35:word32]
	v35 = v35 + 4
	r23 = Mem0[v35:word32]
	v35 = v35 + 4
	r24 = Mem0[v35:word32]
	v35 = v35 + 4
	r25 = Mem0[v35:word32]
	v35 = v35 + 4
	r26 = Mem0[v35:word32]
	v35 = v35 + 4
	r27 = Mem0[v35:word32]
	v35 = v35 + 4
	r28 = Mem0[v35:word32]
	v35 = v35 + 4
	r29 = Mem0[v35:word32]
	v35 = v35 + 4
	r30 = Mem0[v35:word32]
	v35 = v35 + 4
	r31 = Mem0[v35:word32]
	v35 = v35 + 4
	r1 = r1 + 704
	return
	// succ:  fn004004B4_exit
fn004004B4_exit:


// fn004005A0
// Return size: 0
define fn004005A0
fn004005A0_entry:
	// succ:  l004005A0
l004005A0:
	r1 = fp
	r0 = lr
	r0 = r0 + r11
	lr = r0
	return
	// succ:  fn004005A0_exit
fn004005A0_exit:


// fn00400680
// Return size: 0
define fn00400680
fn00400680_entry:
	// succ:  l00400680
l00400680:
	r1 = fp
	r0 = lr
	r0 = r0 + r11
	lr = r0
	return
	// succ:  fn00400680_exit
fn00400680_exit:


// fn00400838
// Return size: 0
define fn00400838
fn00400838_entry:
	// succ:  l00400838
l00400838:
	r1 = fp
	r0 = lr
	r0 = r0 + r11
	lr = r0
	return
	// succ:  fn00400838_exit
fn00400838_exit:


// fn00400E04
// Return size: 0
define fn00400E04
fn00400E04_entry:
	// succ:  l00400E04
l00400E04:
	r1 = fp
	Mem0[r1 + -64:word32] = r1
	r1 = r1 + -64
	Mem0[r1 + 56:word32] = r31
	r31 = r5 | 0x00000000
	r5 = Mem0[r4 + 4:word32]
	r12 = lr
	r5 = r5 + -1
	cr1 = cond(r5 - -1)
	Mem0[r1 + 72:word32] = r12
	Mem0[r4 + 4:word32] = r5
	branch Test(LE,cr1) l00400E5C
	// succ:  l00400E2C l00400E5C
l00400E2C:
	r5 = Mem0[r4 + 0:word32]
	v10 = (int8) r3
	r3 = (int32) v10
	Mem0[r5 + 0:byte] = (byte) r3
	r6 = Mem0[r4 + 0:word32]
	r7 = (word32) Mem0[r6 + 0:byte]
	r6 = r6 + 1
	Mem0[r4 + 0:word32] = r6
	v13 = (int8) r7
	r7 = (int32) v13
	r7 = r7 & 0x000000FF
	cr0 = cond(r7)
	v15 = (int16) r7
	r7 = (int32) v15
	r11 = r7 | 0x00000000
	goto l00400E68
	// succ:  l00400E68
l00400E5C:
	call fn00401598 (retsize: 0;)
	r0 = r0 | 0x00000000
	r11 = r3 | 0x00000000
	// succ:  l00400E68
l00400E68:
	cr1 = cond(r11 - -1)
	branch Test(NE,cr1) l00400E7C
	// succ:  l00400E70 l00400E7C
l00400E70:
	r4 = -1
	Mem0[r31 + 0:word32] = r4
	goto l00400E88
	// succ:  l00400E88
l00400E7C:
	r4 = Mem0[r31 + 0:word32]
	r4 = r4 + 1
	Mem0[r31 + 0:word32] = r4
	// succ:  l00400E88
l00400E88:
	r12 = Mem0[r1 + 72:word32]
	r31 = Mem0[r1 + 56:word32]
	lr = r12
	r1 = r1 + 64
	return
	// succ:  fn00400E04_exit
fn00400E04_exit:


// fn00400E9C
// Return size: 0
define fn00400E9C
fn00400E9C_entry:
	// succ:  l00400E9C
l00400E9C:
	r1 = fp
	Mem0[r1 + -72:word32] = r1
	r1 = r1 + -72
	Mem0[v3:word32] = r28
	v3 = v3 + 4
	Mem0[v3:word32] = r29
	v3 = v3 + 4
	Mem0[v3:word32] = r30
	v3 = v3 + 4
	Mem0[v3:word32] = r31
	v3 = v3 + 4
	r31 = r4 | 0x00000000
	r4 = r31 | 0x00000000
	cr1 = cond(r4 - 0)
	r12 = lr
	r28 = r3 | 0x00000000
	r29 = r5 | 0x00000000
	r30 = r6 | 0x00000000
	Mem0[r1 + 80:word32] = r12
	r31 = r31 + -1
	branch Test(LE,cr1) l00400EEC
	// succ:  l00400ECC l00400EEC
l00400ECC:
	r3 = r28 | 0x00000000
	r4 = r29 | 0x00000000
	r5 = r30 | 0x00000000
	call fn00400E04 (retsize: 0;)
	r4 = r31 | 0x00000000
	cr1 = cond(r4 - 0)
	r31 = r31 + -1
	branch Test(GT,cr1) l00400ECC
	// succ:  l00400EEC l00400ECC
l00400EEC:
	r12 = Mem0[r1 + 80:word32]
	v15 = r1 + 56
	r28 = Mem0[v15:word32]
	v15 = v15 + 4
	r29 = Mem0[v15:word32]
	v15 = v15 + 4
	r30 = Mem0[v15:word32]
	v15 = v15 + 4
	r31 = Mem0[v15:word32]
	v15 = v15 + 4
	lr = r12
	r1 = r1 + 72
	return
	// succ:  fn00400E9C_exit
fn00400E9C_exit:


// fn00400F00
// Return size: 0
define fn00400F00
fn00400F00_entry:
	// succ:  l00400F00
l00400F00:
	r1 = fp
	Mem0[r1 + -72:word32] = r1
	r1 = r1 + -72
	Mem0[v3:word32] = r28
	v3 = v3 + 4
	Mem0[v3:word32] = r29
	v3 = v3 + 4
	Mem0[v3:word32] = r30
	v3 = v3 + 4
	Mem0[v3:word32] = r31
	v3 = v3 + 4
	r31 = r4 | 0x00000000
	r4 = r31 | 0x00000000
	cr1 = cond(r4 - 0)
	r12 = lr
	r30 = r3 | 0x00000000
	r28 = r5 | 0x00000000
	r29 = r6 | 0x00000000
	Mem0[r1 + 80:word32] = r12
	r31 = r31 + -1
	branch Test(LE,cr1) l00400F60
	// succ:  l00400F30 l00400F60
l00400F30:
	r4 = r30 | 0x00000000
	r4 = (word32) Mem0[r4 + 0:byte]
	r5 = r29 | 0x00000000
	v15 = (int8) r4
	r4 = (int32) v15
	r30 = r30 + 1
	r3 = r4 | 0x00000000
	r4 = r28 | 0x00000000
	call fn00400E04 (retsize: 0;)
	r4 = r31 | 0x00000000
	cr1 = cond(r4 - 0)
	r31 = r31 + -1
	branch Test(GT,cr1) l00400F30
	// succ:  l00400F60 l00400F30
l00400F60:
	r12 = Mem0[r1 + 80:word32]
	v16 = r1 + 56
	r28 = Mem0[v16:word32]
	v16 = v16 + 4
	r29 = Mem0[v16:word32]
	v16 = v16 + 4
	r30 = Mem0[v16:word32]
	v16 = v16 + 4
	r31 = Mem0[v16:word32]
	v16 = v16 + 4
	lr = r12
	r1 = r1 + 72
	return
	// succ:  fn00400F00_exit
fn00400F00_exit:


// fn00400F74
// Return size: 0
define fn00400F74
fn00400F74_entry:
	// succ:  l00400F74
l00400F74:
	r1 = fp
	r4 = Mem0[r3 + 0:word32]
	r4 = r4 + 4
	Mem0[r3 + 0:word32] = r4
	r3 = Mem0[r4 + -4:word32]
	return
	// succ:  fn00400F74_exit
fn00400F74_exit:


// fn00400F88
// Return size: 0
define fn00400F88
fn00400F88_entry:
	// succ:  l00400F88
l00400F88:
	r1 = fp
	r4 = Mem0[r3 + 0:word32]
	r4 = r4 + 4
	Mem0[r3 + 0:word32] = r4
	r3 = (int32) Mem0[r4 + -4:int16]
	return
	// succ:  fn00400F88_exit
fn00400F88_exit:


// fn00400F9C
// Return size: 0
define fn00400F9C
fn00400F9C_entry:
	// succ:  l00400F9C
l00400F9C:
	r1 = fp
	r4 = Mem0[r2 + 100:word32]
	r12 = lr
	r4 = Mem0[r4 + 0:word32]
	Mem0[r1 + -56:word32] = r1
	r1 = r1 + -56
	Mem0[r1 + 64:word32] = r12
	call fn00400FC4 (retsize: 0;)
	r12 = Mem0[r1 + 64:word32]
	r1 = r1 + 56
	lr = r12
	return
	// succ:  fn00400F9C_exit
fn00400F9C_exit:


// fn00400FC4
// Return size: 0
define fn00400FC4
fn00400FC4_entry:
	// succ:  l00400FC4
l00400FC4:
	r1 = fp
	Mem0[r1 + -64:word32] = r1
	r1 = r1 + -64
	Mem0[v3:word32] = r30
	v3 = v3 + 4
	Mem0[v3:word32] = r31
	v3 = v3 + 4
	r31 = r3 | 0x00000000
	r30 = r4 | 0x00000000
	r4 = -32
	cr1 = cond(r31 - r4)
	r12 = lr
	Mem0[r1 + 72:word32] = r12
	branch Test(LE,cr1) l00400FF8
	// succ:  l00400FE8 l00400FF8
l00400FE8:
	v11 = r1 + 56
	r30 = Mem0[v11:word32]
	v11 = v11 + 4
	r31 = Mem0[v11:word32]
	v11 = v11 + 4
	r1 = r1 + 64
	r3 = 0
	return
	// succ:  fn00400FC4_exit
l00400FF8:
	r31 = r31 + 7
	r4 = -8
	r31 = r31 & r4
	// succ:  l00401004
l00401004:
	r3 = r31 | 0x00000000
	call fn0040105C (retsize: 0;)
	cr1 = cond(r3 - 0x00000000)
	branch Test(NE,cr1) l00401048
	// succ:  l00401014 l00401048
l00401014:
	cr1 = cond(r30 - 0)
	branch Test(EQ,cr1) l00401048
	// succ:  l0040101C l00401048
l0040101C:
	r3 = r31 | 0x00000000
	call fn004017F0 (retsize: 0;)
	r0 = r0 | 0x00000000
	cr1 = cond(r3 - 0)
	branch Test(NE,cr1) l00401004
	// succ:  l00401030 l00401004
l00401030:
	r12 = Mem0[r1 + 72:word32]
	v13 = r1 + 56
	r30 = Mem0[v13:word32]
	v13 = v13 + 4
	r31 = Mem0[v13:word32]
	v13 = v13 + 4
	lr = r12
	r1 = r1 + 64
	r3 = 0
	return
	// succ:  fn00400FC4_exit
l00401048:
	r12 = Mem0[r1 + 72:word32]
	v14 = r1 + 56
	r30 = Mem0[v14:word32]
	v14 = v14 + 4
	r31 = Mem0[v14:word32]
	v14 = v14 + 4
	lr = r12
	r1 = r1 + 64
	return
	// succ:  fn00400FC4_exit
fn00400FC4_exit:


// fn0040105C
// Return size: 0
define fn0040105C
fn0040105C_entry:
	// succ:  l0040105C
l0040105C:
	r1 = fp
	r12 = lr
	Mem0[r1 + -72:word32] = r1
	r1 = r1 + -72
	Mem0[r1 + 80:word32] = r12
	Mem0[v5:word32] = r29
	v5 = v5 + 4
	Mem0[v5:word32] = r30
	v5 = v5 + 4
	Mem0[v5:word32] = r31
	v5 = v5 + 4
	r30 = r3 | 0x00000000
	r3 = r30 | 0x00000000
	call fn00401F40 (retsize: 0;)
	r0 = r0 | 0x00000000
	r31 = r3 | 0x00000000
	cr1 = cond(r31 - 0x00000000)
	branch Test(NE,cr1) l004010D8
	// succ:  l00401088 l004010D8
l00401088:
	r3 = r30 | 0x00000000
	call fn00401ADC (retsize: 0;)
	r0 = r0 | 0x00000000
	cr1 = cond(r3 - -1)
	branch Test(EQ,cr1) l004010C0
	// succ:  l0040109C l004010C0
l0040109C:
	r3 = r30 | 0x00000000
	call fn00401F40 (retsize: 0;)
	r0 = r0 | 0x00000000
	r31 = r3 | 0x00000000
	cr1 = cond(r31 - 0x00000000)
	branch Test(NE,cr1) l004010D8
	// succ:  l004010B4 l004010D8
l004010B4:
	call fn00401AB4 (retsize: 0;)
	r0 = r0 | 0x00000000
	goto l004010D8
	// succ:  l004010D8
l004010C0:
	r12 = Mem0[r1 + 80:word32]
	v17 = r1 + 60
	r30 = Mem0[v17:word32]
	v17 = v17 + 4
	r31 = Mem0[v17:word32]
	v17 = v17 + 4
	lr = r12
	r1 = r1 + 72
	r3 = 0
	return
	// succ:  fn0040105C_exit
l004010D8:
	r4 = Mem0[r31 + 0:word32]
	r5 = Mem0[r31 + 4:word32]
	r4 = Mem0[r4 + 4:word32]
	r29 = -4
	r4 = r4 & r29
	r5 = r5 & r29
	r4 = r4 - r5
	r4 = r4 - r30
	cr1 = cond(r4 - 0x00000008)
	branch Test(EQ,cr1) l00401128
	// succ:  l00401100 l00401128
l00401100:
	r3 = r31 | 0x00000000
	r4 = r30 | 0x00000000
	call fn0040115C (retsize: 0;)
	cr1 = cond(r3 - 0x00000000)
	branch Test(EQ,cr1) l00401128
	// succ:  l00401114 l00401128
l00401114:
	r4 = Mem0[r3 + 4:word32]
	r5 = -3
	r4 = r4 & r5
	r4 = r4 | 0x00000001
	Mem0[r3 + 4:word32] = r4
	// succ:  l00401128
l00401128:
	r12 = Mem0[r1 + 80:word32]
	r4 = Mem0[r31 + 4:word32]
	lr = r12
	r5 = Mem0[r31 + 0:word32]
	r6 = Mem0[r2 + 104:word32]
	r4 = r4 & r29
	Mem0[r31 + 4:word32] = r4
	Mem0[r6 + 4:word32] = r5
	r4 = r4 & r29
	r3 = r4 + 8
	v16 = r1 + 56
	r29 = Mem0[v16:word32]
	v16 = v16 + 4
	r30 = Mem0[v16:word32]
	v16 = v16 + 4
	r31 = Mem0[v16:word32]
	v16 = v16 + 4
	r1 = r1 + 72
	return
	// succ:  fn0040105C_exit
fn0040105C_exit:


// fn0040115C
// Return size: 0
define fn0040115C
fn0040115C_entry:
	// succ:  l0040115C
l0040115C:
	r1 = fp
	Mem0[r1 + -72:word32] = r1
	r1 = r1 + -72
	Mem0[v3:word32] = r29
	v3 = v3 + 4
	Mem0[v3:word32] = r30
	v3 = v3 + 4
	Mem0[v3:word32] = r31
	v3 = v3 + 4
	r31 = r3 | 0x00000000
	r29 = r4 | 0x00000000
	r4 = Mem0[r31 + 0:word32]
	r5 = Mem0[r31 + 4:word32]
	r4 = Mem0[r4 + 4:word32]
	r30 = -4
	r5 = r5 & r30
	r4 = r4 & r30
	r4 = r4 - r5
	r4 = r4 + -8
	cr1 = cond(r4 - r29)
	r12 = lr
	Mem0[r1 + 80:word32] = r12
	branch Test(LE,cr1) l004011E4
	// succ:  l0040119C l004011E4
l0040119C:
	call fn004019CC (retsize: 0;)
	r0 = r0 | 0x00000000
	cr1 = cond(r3 - 0x00000000)
	branch Test(EQ,cr1) l004011E4
	// succ:  l004011AC l004011E4
l004011AC:
	r4 = Mem0[r31 + 4:word32]
	r12 = Mem0[r1 + 80:word32]
	r30 = r4 & r30
	r29 = r30 + r29
	r5 = r29 + 8
	Mem0[r3 + 4:word32] = r5
	Mem0[r29 + 8:word32] = r3
	lr = r12
	r6 = Mem0[r31 + 0:word32]
	Mem0[r3 + 0:word32] = r6
	Mem0[r31 + 0:word32] = r3
	v15 = r1 + 56
	r29 = Mem0[v15:word32]
	v15 = v15 + 4
	r30 = Mem0[v15:word32]
	v15 = v15 + 4
	r31 = Mem0[v15:word32]
	v15 = v15 + 4
	r1 = r1 + 72
	return
	// succ:  fn0040115C_exit
l004011E4:
	r12 = Mem0[r1 + 80:word32]
	v16 = r1 + 56
	r29 = Mem0[v16:word32]
	v16 = v16 + 4
	r30 = Mem0[v16:word32]
	v16 = v16 + 4
	r31 = Mem0[v16:word32]
	v16 = v16 + 4
	lr = r12
	r1 = r1 + 72
	r3 = 0
	return
	// succ:  fn0040115C_exit
fn0040115C_exit:


// fn004011FC
// Return size: 0
define fn004011FC
fn004011FC_entry:
	// succ:  l004011FC
l004011FC:
	r1 = fp
	Mem0[r1 + -64:word32] = r1
	r1 = r1 + -64
	Mem0[r1 + 56:word32] = r31
	r31 = r3 | 0x00000000
	cr1 = cond(r31 - 0x00000000)
	r12 = lr
	Mem0[r1 + 72:word32] = r12
	branch Test(NE,cr1) l00401234
	// succ:  l00401218 l00401234
l00401218:
	r3 = 0
	call fn00401380 (retsize: 0;)
	r12 = Mem0[r1 + 72:word32]
	r31 = Mem0[r1 + 56:word32]
	lr = r12
	r1 = r1 + 64
	return
	// succ:  fn004011FC_exit
l00401234:
	r3 = r31 | 0x00000000
	call fn004012B0 (retsize: 0;)
	cr1 = cond(r3 - 0)
	branch Test(EQ,cr1) l0040125C
	// succ:  l00401244 l0040125C
l00401244:
	r12 = Mem0[r1 + 72:word32]
	r31 = Mem0[r1 + 56:word32]
	lr = r12
	r1 = r1 + 64
	r3 = -1
	return
	// succ:  fn004011FC_exit
l0040125C:
	r4 = Mem0[r31 + 12:word32]
	r4 = r4 & 0x00004000
	cr0 = cond(r4)
	branch Test(EQ,cr0) l00401298
	// succ:  l00401268 l00401298
l00401268:
	r3 = Mem0[r31 + 16:word32]
	call fn004020BC (retsize: 0;)
	r0 = r0 | 0x00000000
	cr1 = cond(r3 - 0)
	r3 = -1
	branch Test(NE,cr1) l00401284
	// succ:  l00401280 l00401284
l00401280:
	r3 = 0
	// succ:  l00401284
l00401284:
	r12 = Mem0[r1 + 72:word32]
	r31 = Mem0[r1 + 56:word32]
	lr = r12
	r1 = r1 + 64
	return
	// succ:  fn004011FC_exit
l00401298:
	r12 = Mem0[r1 + 72:word32]
	r31 = Mem0[r1 + 56:word32]
	lr = r12
	r1 = r1 + 64
	r3 = 0
	return
	// succ:  fn004011FC_exit
fn004011FC_exit:


// fn004012B0
// Return size: 0
define fn004012B0
fn004012B0_entry:
	// succ:  l004012B0
l004012B0:
	r1 = fp
	Mem0[r1 + -72:word32] = r1
	r1 = r1 + -72
	Mem0[v3:word32] = r29
	v3 = v3 + 4
	Mem0[v3:word32] = r30
	v3 = v3 + 4
	Mem0[v3:word32] = r31
	v3 = v3 + 4
	r31 = r3 | 0x00000000
	r11 = Mem0[r31 + 12:word32]
	r12 = lr
	r4 = r11 & 0x00000003
	cr0 = cond(r4)
	cr1 = cond(r4 - 2)
	Mem0[r1 + 80:word32] = r12
	r29 = 0
	branch Test(NE,cr1) l00401334
	// succ:  l004012D8 l00401334
l004012D8:
	r11 = r11 & 0x00000108
	cr0 = cond(r11)
	branch Test(EQ,cr0) l00401334
	// succ:  l004012E0 l00401334
l004012E0:
	r4 = Mem0[r31 + 8:word32]
	r30 = Mem0[r31 + 0:word32]
	r30 = r30 - r4
	cr0 = cond(r30)
	branch Test(LE,cr0) l00401334
	// succ:  l004012F0 l00401334
l004012F0:
	r3 = Mem0[r31 + 16:word32]
	r5 = r30 | 0x00000000
	call fn00402248 (retsize: 0;)
	r0 = r0 | 0x00000000
	cr1 = cond(r3 - r30)
	branch Test(NE,cr1) l00401324
	// succ:  l00401308 l00401324
l00401308:
	r11 = Mem0[r31 + 12:word32]
	r4 = r11 & 0x00000080
	cr0 = cond(r4)
	branch Test(EQ,cr0) l00401334
	// succ:  l00401314 l00401334
l00401314:
	r4 = -3
	r11 = r11 & r4
	Mem0[r31 + 12:word32] = r11
	goto l00401334
	// succ:  l00401334
l00401324:
	r4 = Mem0[r31 + 12:word32]
	r29 = -1
	r4 = r4 | 0x00000020
	Mem0[r31 + 12:word32] = r4
	// succ:  l00401334
l00401334:
	r12 = Mem0[r1 + 80:word32]
	r4 = Mem0[r31 + 8:word32]
	lr = r12
	r3 = r29 | 0x00000000
	r5 = 0
	Mem0[r31 + 4:word32] = r5
	Mem0[r31 + 0:word32] = r4
	v16 = r1 + 56
	r29 = Mem0[v16:word32]
	v16 = v16 + 4
	r30 = Mem0[v16:word32]
	v16 = v16 + 4
	r31 = Mem0[v16:word32]
	v16 = v16 + 4
	r1 = r1 + 72
	return
	// succ:  fn004012B0_exit
fn004012B0_exit:


// fn0040135C
// Return size: 0
define fn0040135C
fn0040135C_entry:
	// succ:  l0040135C
l0040135C:
	r1 = fp
	r12 = lr
	Mem0[r1 + -56:word32] = r1
	r1 = r1 + -56
	Mem0[r1 + 64:word32] = r12
	r3 = 1
	call fn00401380 (retsize: 0;)
	r12 = Mem0[r1 + 64:word32]
	r1 = r1 + 56
	lr = r12
	return
	// succ:  fn0040135C_exit
fn0040135C_exit:


// fn00401380
// Return size: 0
define fn00401380
fn00401380_entry:
	// succ:  l00401380
l00401380:
	r1 = fp
	Mem0[r1 + -80:word32] = r1
	r1 = r1 + -80
	Mem0[v3:word32] = r27
	v3 = v3 + 4
	Mem0[v3:word32] = r28
	v3 = v3 + 4
	Mem0[v3:word32] = r29
	v3 = v3 + 4
	Mem0[v3:word32] = r30
	v3 = v3 + 4
	Mem0[v3:word32] = r31
	v3 = v3 + 4
	r27 = Mem0[r2 + 108:word32]
	r4 = Mem0[r2 + 72:word32]
	r5 = Mem0[r27 + 0:word32]
	r31 = r4 | 0x00000000
	cr1 = cond(r5 - r4)
	r12 = lr
	r30 = r3 | 0x00000000
	Mem0[r1 + 88:word32] = r12
	r29 = 0
	r28 = 0
	branch Test(LT,cr1) l00401418
	// succ:  l004013B4 l00401418
l004013B4:
	cr1 = cond(r30 - 1)
	branch Test(NE,cr1) l004013E0
	// succ:  l004013BC l004013E0
l004013BC:
	r4 = Mem0[r31 + 12:word32]
	r4 = r4 & 0x00000083
	cr0 = cond(r4)
	branch Test(EQ,cr0) l004013E0
	// succ:  l004013C8 l004013E0
l004013C8:
	r3 = r31 | 0x00000000
	call fn004011FC (retsize: 0;)
	cr1 = cond(r3 - -1)
	branch Test(EQ,cr1) l00401408
	// succ:  l004013D8 l00401408
l004013D8:
	r29 = r29 + 1
	goto l00401408
	// succ:  l00401408
l004013E0:
	cr1 = cond(r30 - 0)
	branch Test(NE,cr1) l00401408
	// succ:  l004013E8 l00401408
l004013E8:
	r4 = Mem0[r31 + 12:word32]
	r4 = r4 & 0x00000002
	cr0 = cond(r4)
	branch Test(EQ,cr0) l00401408
	// succ:  l004013F4 l00401408
l004013F4:
	r3 = r31 | 0x00000000
	call fn004011FC (retsize: 0;)
	cr1 = cond(r3 - -1)
	branch Test(NE,cr1) l00401408
	// succ:  l00401404 l00401408
l00401404:
	r28 = -1
	// succ:  l00401408
l00401408:
	r4 = Mem0[r27 + 0:word32]
	r31 = r31 + 32
	cr1 = cond(r4 - r31)
	branch Test(GE,cr1) l004013B4
	// succ:  l00401418 l004013B4
l00401418:
	cr1 = cond(r30 - 1)
	r3 = r29 | 0x00000000
	branch Test(EQ,cr1) l00401428
	// succ:  l00401424 l00401428
l00401424:
	r3 = r28 | 0x00000000
	// succ:  l00401428
l00401428:
	r12 = Mem0[r1 + 88:word32]
	v17 = r1 + 56
	r27 = Mem0[v17:word32]
	v17 = v17 + 4
	r28 = Mem0[v17:word32]
	v17 = v17 + 4
	r29 = Mem0[v17:word32]
	v17 = v17 + 4
	r30 = Mem0[v17:word32]
	v17 = v17 + 4
	r31 = Mem0[v17:word32]
	v17 = v17 + 4
	lr = r12
	r1 = r1 + 80
	return
	// succ:  fn00401380_exit
fn00401380_exit:


// fn00401474
// Return size: 0
define fn00401474
fn00401474_entry:
	// succ:  l00401474
l00401474:
	r1 = fp
	r4 = Mem0[r2 + 116:word32]
	r5 = r3 | 0x00000000
	r4 = Mem0[r4 + 0:word32]
	cr1 = cond(r4 - r5)
	branch Test(GT,cr1) l00401490
	// succ:  l00401488 l00401490
l00401488:
	r3 = 0
	return
	// succ:  fn00401474_exit
l00401490:
	r4 = Mem0[r2 + 120:word32]
	r3 = (word32) Mem0[r4 + r3:byte]
	v8 = (int8) r3
	r3 = (int32) v8
	r3 = r3 & 0x00000040
	cr0 = cond(r3)
	return
	// succ:  fn00401474_exit
fn00401474_exit:


// fn004014A4
// Return size: 0
define fn004014A4
fn004014A4_entry:
	// succ:  l004014A4
l004014A4:
	r1 = fp
	r10 = r3 | 0x00000000
	cr1 = cond(r10 - 0x00000000)
	r3 = 0
	branch Test(EQ,cr1) l004014C4
	// succ:  l004014B4 l004014C4
l004014B4:
	cr1 = cond(r5 - 0x00000000)
	branch Test(NE,cr1) l004014C4
	// succ:  l004014BC l004014C4
l004014BC:
	r3 = 0
	return
	// succ:  fn004014A4_exit
l004014C4:
	cr1 = cond(r10 - 0x00000000)
	branch Test(NE,cr1) l004014F4
	// succ:  l004014CC l004014F4
l004014CC:
	r11 = r4 | 0x00000000
	// succ:  l004014D0
l004014D0:
	r5 = r11 | 0x00000000
	r5 = (word32) Mem0[r5 + 0:word16]
	r11 = r11 + 2
	cr1 = cond(r5 - 0x00000000)
	branch Test(NE,cr1) l004014D0
	// succ:  l004014E4 l004014D0
l004014E4:
	r4 = r11 - r4
	r4 = r4 >> 0x00000001
	r3 = r4 + -1
	return
	// succ:  fn004014A4_exit
l004014F4:
	cr1 = cond(r5 - 0x00000000)
	branch Test(LE,cr1) l00401550
	// succ:  l004014FC l00401550
l004014FC:
	ctr = r5
	// succ:  l00401500
l00401500:
	r11 = (word32) Mem0[r4 + 0:word16]
	cr1 = cond(r11 - 0x00000100)
	branch Test(GE,cr1) l00401538
	// succ:  l0040150C l00401538
l0040150C:
	r11 = r11 & 0x000000FF
	cr0 = cond(r11)
	v11 = (int8) r11
	r11 = (int32) v11
	Mem0[r10 + r3:byte] = (byte) r11
	r5 = r4 | 0x00000000
	r5 = (word32) Mem0[r5 + 0:word16]
	r4 = r4 + 2
	cr1 = cond(r5 - 0x00000000)
	branch Test(EQ,cr1) l0040154C
	// succ:  l0040152C l0040154C
l0040152C:
	r3 = r3 + 1
	ctr = ctr - 0x00000001
	branch ctr != 0x00000000 l00401500
	// succ:  l00401534 l00401500
l00401534:
	goto l00401550
	// succ:  l00401550
l00401538:
	r4 = Mem0[r2 + 124:word32]
	r5 = 42
	Mem0[r4 + 0:word32] = r5
	r3 = -1
	return
	// succ:  fn004014A4_exit
l0040154C:
	return
	// succ:  fn004014A4_exit
l00401550:
	return
	// succ:  fn004014A4_exit
fn004014A4_exit:


// fn00401554
// Return size: 0
define fn00401554
fn00401554_entry:
	// succ:  l00401554
l00401554:
	r1 = fp
	cr1 = cond(r3 - 0x00000000)
	r4 = r4 & 0x0000FFFF
	cr0 = cond(r4)
	branch Test(NE,cr1) l00401568
	// succ:  l00401560 l00401568
l00401560:
	r3 = 0
	return
	// succ:  fn00401554_exit
l00401568:
	cr1 = cond(r4 - 0x000000FF)
	branch Test(LE,cr1) l00401584
	// succ:  l00401570 l00401584
l00401570:
	r4 = Mem0[r2 + 124:word32]
	r5 = 42
	Mem0[r4 + 0:word32] = r5
	r3 = -1
	return
	// succ:  fn00401554_exit
l00401584:
	r4 = r4 & 0x000000FF
	cr0 = cond(r4)
	v9 = (int8) r4
	r4 = (int32) v9
	Mem0[r3 + 0:byte] = (byte) r4
	r3 = 1
	return
	// succ:  fn00401554_exit
fn00401554_exit:


// fn00401598
// Return size: 0
define fn00401598
fn00401598_entry:
	// succ:  l00401598
l00401598:
	r1 = fp
	Mem0[r1 + -80:word32] = r1
	r1 = r1 + -80
	Mem0[v3:word32] = r27
	v3 = v3 + 4
	Mem0[v3:word32] = r28
	v3 = v3 + 4
	Mem0[v3:word32] = r29
	v3 = v3 + 4
	Mem0[v3:word32] = r30
	v3 = v3 + 4
	Mem0[v3:word32] = r31
	v3 = v3 + 4
	r31 = r4 | 0x00000000
	r10 = Mem0[r31 + 12:word32]
	r12 = lr
	r11 = r10 | 0x00000000
	r4 = r11 & 0x00000082
	cr0 = cond(r4)
	r27 = r3 | 0x00000000
	Mem0[r1 + 88:word32] = r12
	r30 = Mem0[r31 + 16:word32]
	branch Test(EQ,cr0) l00401774
	// succ:  l004015C4 l00401774
l004015C4:
	r4 = r11 & 0x00000040
	cr0 = cond(r4)
	branch Test(NE,cr0) l00401774
	// succ:  l004015CC l00401774
l004015CC:
	r11 = r11 & 0x00000001
	cr0 = cond(r11)
	branch Test(EQ,cr0) l00401620
	// succ:  l004015D4 l00401620
l004015D4:
	r4 = Mem0[r31 + 12:word32]
	r9 = 0
	r11 = r4 | 0x00000000
	r5 = r11 & 0x00000010
	cr0 = cond(r5)
	Mem0[r31 + 4:word32] = r9
	branch Test(EQ,cr0) l00401608
	// succ:  l004015EC l00401608
l004015EC:
	r10 = Mem0[r31 + 12:word32]
	r4 = Mem0[r31 + 8:word32]
	r5 = -2
	Mem0[r31 + 0:word32] = r4
	r10 = r10 & r5
	Mem0[r31 + 12:word32] = r10
	goto l00401624
	// succ:  l00401624
l00401608:
	r11 = r11 | 0x00000020
	Mem0[r31 + 12:word32] = r11
	v22 = r1 + 60
	r27 = Mem0[v22:word32]
	v22 = v22 + 4
	r28 = Mem0[v22:word32]
	v22 = v22 + 4
	r29 = Mem0[v22:word32]
	v22 = v22 + 4
	r30 = Mem0[v22:word32]
	v22 = v22 + 4
	r31 = Mem0[v22:word32]
	v22 = v22 + 4
	r1 = r1 + 80
	r3 = -1
	return
	// succ:  fn00401598_exit
l00401620:
	r9 = 0
	// succ:  l00401624
l00401624:
	r10 = r10 | 0x00000002
	Mem0[r31 + 12:word32] = r10
	r4 = -17
	r10 = r10 & r4
	Mem0[r31 + 12:word32] = r10
	r10 = Mem0[r31 + 12:word32]
	Mem0[r31 + 4:word32] = r9
	r10 = r10 & 0x0000010C
	cr0 = cond(r10)
	r28 = 0
	branch Test(NE,cr0) l00401688
	// succ:  l0040164C l00401688
l0040164C:
	r11 = Mem0[r2 + 72:word32]
	r4 = r11 + 32
	cr1 = cond(r31 - r4)
	branch Test(EQ,cr1) l00401668
	// succ:  l0040165C l00401668
l0040165C:
	r11 = r11 + 64
	cr1 = cond(r31 - r11)
	branch Test(NE,cr1) l0040167C
	// succ:  l00401668 l0040167C
l00401668:
	r3 = r30 | 0x00000000
	call fn00401474 (retsize: 0;)
	r0 = r0 | 0x00000000
	cr1 = cond(r3 - 0)
	branch Test(NE,cr1) l00401688
	// succ:  l0040167C l00401688
l0040167C:
	r3 = r31 | 0x00000000
	call fn0040298C (retsize: 0;)
	r0 = r0 | 0x00000000
	// succ:  l00401688
l00401688:
	r4 = Mem0[r31 + 12:word32]
	r4 = r4 & 0x00000108
	cr0 = cond(r4)
	branch Test(EQ,cr0) l0040170C
	// succ:  l00401694 l0040170C
l00401694:
	r29 = Mem0[r31 + 0:word32]
	r4 = Mem0[r31 + 8:word32]
	r5 = Mem0[r31 + 24:word32]
	r29 = r29 - r4
	cr0 = cond(r29)
	r4 = r4 + 1
	Mem0[r31 + 0:word32] = r4
	r5 = r5 + -1
	Mem0[r31 + 4:word32] = r5
	branch Test(LE,cr0) l004016D4
	// succ:  l004016B8 l004016D4
l004016B8:
	r4 = Mem0[r31 + 8:word32]
	r3 = r30 | 0x00000000
	r5 = r29 | 0x00000000
	call fn00402248 (retsize: 0;)
	r0 = r0 | 0x00000000
	r28 = r3 | 0x00000000
	goto l004016FC
	// succ:  l004016FC
l004016D4:
	r4 = Mem0[r2 + 120:word32]
	r4 = (word32) Mem0[r4 + r30:byte]
	v26 = (int8) r4
	r4 = (int32) v26
	r4 = r4 & 0x00000020
	cr0 = cond(r4)
	branch Test(EQ,cr0) l004016FC
	// succ:  l004016E8 l004016FC
l004016E8:
	r3 = r30 | 0x00000000
	r4 = 0
	r5 = 2
	call fn004026B8 (retsize: 0;)
	r0 = r0 | 0x00000000
	// succ:  l004016FC
l004016FC:
	r4 = Mem0[r31 + 8:word32]
	v27 = (int8) r27
	r5 = (int32) v27
	Mem0[r4 + 0:byte] = (byte) r5
	goto l00401730
	// succ:  l00401730
l0040170C:
	r3 = r30 | 0x00000000
	r4 = r1 + 56
	v24 = (int8) r27
	r6 = (int32) v24
	r29 = 1
	Mem0[r1 + 56:byte] = (byte) r6
	r5 = 1
	call fn00402248 (retsize: 0;)
	r0 = r0 | 0x00000000
	r28 = r3 | 0x00000000
	// succ:  l00401730
l00401730:
	cr1 = cond(r28 - r29)
	branch Test(EQ,cr1) l0040175C
	// succ:  l00401738 l0040175C
l00401738:
	r12 = Mem0[r1 + 88:word32]
	r4 = Mem0[r31 + 12:word32]
	lr = r12
	r4 = r4 | 0x00000020
	Mem0[r31 + 12:word32] = r4
	v25 = r1 + 60
	r27 = Mem0[v25:word32]
	v25 = v25 + 4
	r28 = Mem0[v25:word32]
	v25 = v25 + 4
	r29 = Mem0[v25:word32]
	v25 = v25 + 4
	r30 = Mem0[v25:word32]
	v25 = v25 + 4
	r31 = Mem0[v25:word32]
	v25 = v25 + 4
	r1 = r1 + 80
	r3 = -1
	return
	// succ:  fn00401598_exit
l0040175C:
	r12 = Mem0[r1 + 88:word32]
	r3 = r27 & 0x000000FF
	cr0 = cond(r3)
	lr = r12
	v28 = r1 + 60
	r27 = Mem0[v28:word32]
	v28 = v28 + 4
	r28 = Mem0[v28:word32]
	v28 = v28 + 4
	r29 = Mem0[v28:word32]
	v28 = v28 + 4
	r30 = Mem0[v28:word32]
	v28 = v28 + 4
	r31 = Mem0[v28:word32]
	v28 = v28 + 4
	r1 = r1 + 80
	return
	// succ:  fn00401598_exit
l00401774:
	r11 = r11 | 0x00000020
	Mem0[r31 + 12:word32] = r11
	v18 = r1 + 60
	r27 = Mem0[v18:word32]
	v18 = v18 + 4
	r28 = Mem0[v18:word32]
	v18 = v18 + 4
	r29 = Mem0[v18:word32]
	v18 = v18 + 4
	r30 = Mem0[v18:word32]
	v18 = v18 + 4
	r31 = Mem0[v18:word32]
	v18 = v18 + 4
	r1 = r1 + 80
	r3 = -1
	return
	// succ:  fn00401598_exit
fn00401598_exit:


// fn0040178C
// Return size: 0
define fn0040178C
fn0040178C_entry:
	// succ:  l0040178C
l0040178C:
	r1 = fp
	r4 = Mem0[r2 + 128:word32]
	r5 = Mem0[r4 + 0:word32]
	Mem0[r4 + 0:word32] = r3
	r3 = r5 | 0x00000000
	return
	// succ:  fn0040178C_exit
fn0040178C_exit:


// fn004017F0
// Return size: 0
define fn004017F0
fn004017F0_entry:
	// succ:  l004017F0
l004017F0:
	r1 = fp
	r4 = Mem0[r2 + 128:word32]
	r12 = lr
	r4 = Mem0[r4 + 0:word32]
	Mem0[r1 + -56:word32] = r1
	r1 = r1 + -56
	cr1 = cond(r4 - 0x00000000)
	Mem0[r1 + 64:word32] = r12
	branch Test(EQ,cr1) l00401838
	// succ:  l0040180C l00401838
l0040180C:
	r11 = Mem0[r2 + 128:word32]
	r12 = Mem0[r11 + 0:word32]
	call fn00403F10 (retsize: 0;)
	r2 = Mem0[r1 + 20:word32]
	cr1 = cond(r3 - 0)
	branch Test(EQ,cr1) l00401838
	// succ:  l00401824 l00401838
l00401824:
	r12 = Mem0[r1 + 64:word32]
	r1 = r1 + 56
	lr = r12
	r3 = 1
	return
	// succ:  fn004017F0_exit
l00401838:
	r12 = Mem0[r1 + 64:word32]
	r1 = r1 + 56
	lr = r12
	r3 = 0
	return
	// succ:  fn004017F0_exit
fn004017F0_exit:


// fn004019CC
// Return size: 0
define fn004019CC
fn004019CC_entry:
	// succ:  l004019CC
l004019CC:
	r1 = fp
	Mem0[r1 + -64:word32] = r1
	r1 = r1 + -64
	Mem0[r1 + 56:word32] = r31
	r31 = Mem0[r2 + 104:word32]
	r12 = lr
	r4 = Mem0[r31 + 8:word32]
	Mem0[r1 + 72:word32] = r12
	cr1 = cond(r4 - 0x00000000)
	branch Test(NE,cr1) l00401A10
	// succ:  l004019EC l00401A10
l004019EC:
	call fn00401A34 (retsize: 0;)
	cr1 = cond(r3 - 0)
	branch Test(NE,cr1) l00401A10
	// succ:  l004019F8 l00401A10
l004019F8:
	r12 = Mem0[r1 + 72:word32]
	r31 = Mem0[r1 + 56:word32]
	lr = r12
	r1 = r1 + 64
	r3 = 0
	return
	// succ:  fn004019CC_exit
l00401A10:
	r4 = Mem0[r31 + 8:word32]
	r12 = Mem0[r1 + 72:word32]
	r5 = Mem0[r4 + 0:word32]
	lr = r12
	Mem0[r31 + 8:word32] = r5
	r3 = r4 | 0x00000000
	r31 = Mem0[r1 + 56:word32]
	r1 = r1 + 64
	return
	// succ:  fn004019CC_exit
fn004019CC_exit:


// fn00401A34
// Return size: 0
define fn00401A34
fn00401A34_entry:
	// succ:  l00401A34
l00401A34:
	r1 = fp
	r12 = lr
	Mem0[r1 + -56:word32] = r1
	r1 = r1 + -56
	Mem0[r1 + 64:word32] = r12
	r3 = 4096
	call fn00404104 (retsize: 0;)
	r2 = Mem0[r1 + 20:word32]
	cr1 = cond(r3 - 0x00000000)
	branch Test(NE,cr1) l00401A68
	// succ:  l00401A54 l00401A68
l00401A54:
	r12 = Mem0[r1 + 64:word32]
	r1 = r1 + 56
	lr = r12
	r3 = 0
	return
	// succ:  fn00401A34_exit
l00401A68:
	r4 = Mem0[r2 + 104:word32]
	r10 = r3 | 0x00000000
	Mem0[r4 + 8:word32] = r3
	r3 = r3 + 4088
	cr1 = cond(r3 - r10)
	r11 = r10 + 8
	branch Test(LE,cr1) l00401A98
	// succ:  l00401A84 l00401A98
l00401A84:
	Mem0[r10 + 0:word32] = r11
	r10 = r11 | 0x00000000
	cr1 = cond(r3 - r10)
	r11 = r11 + 8
	branch Test(GT,cr1) l00401A84
	// succ:  l00401A98 l00401A84
l00401A98:
	r12 = Mem0[r1 + 64:word32]
	r1 = r1 + 56
	lr = r12
	r4 = 0
	Mem0[r3 + 0:word32] = r4
	r3 = 1
	return
	// succ:  fn00401A34_exit
fn00401A34_exit:


// fn00401AB4
// Return size: 0
define fn00401AB4
fn00401AB4_entry:
	// succ:  l00401AB4
l00401AB4:
	r1 = fp
	r12 = lr
	Mem0[r1 + -56:word32] = r1
	r1 = r1 + -56
	Mem0[r1 + 64:word32] = r12
	r3 = 18
	call fn00402C4C (retsize: 0;)
	r0 = r0 | 0x00000000
	r12 = Mem0[r1 + 64:word32]
	r1 = r1 + 56
	lr = r12
	return
	// succ:  fn00401AB4_exit
fn00401AB4_exit:


// fn00401ADC
// Return size: 0
define fn00401ADC
fn00401ADC_entry:
	// succ:  l00401ADC
l00401ADC:
	r1 = fp
	Mem0[r1 + -88:word32] = r1
	r1 = r1 + -88
	Mem0[v3:word32] = r25
	v3 = v3 + 4
	Mem0[v3:word32] = r26
	v3 = v3 + 4
	Mem0[v3:word32] = r27
	v3 = v3 + 4
	Mem0[v3:word32] = r28
	v3 = v3 + 4
	Mem0[v3:word32] = r29
	v3 = v3 + 4
	Mem0[v3:word32] = r30
	v3 = v3 + 4
	Mem0[v3:word32] = r31
	v3 = v3 + 4
	r25 = Mem0[r2 + 152:word32]
	r28 = Mem0[r2 + 148:word32]
	r11 = Mem0[r25 + 4:word32]
	r4 = Mem0[r28 + 0:word32]
	r30 = r11 | 0x00000000
	r11 = Mem0[r25 + 4:word32]
	r12 = lr
	cr1 = cond(r11 - r4)
	r26 = r3 | 0x00000000
	Mem0[r1 + 96:word32] = r12
	r26 = r26 + 8
	r26 = r26 + 7
	r27 = -1
	r5 = -8
	r26 = r26 & r5
	branch Test(GE,cr1) l00401BA0
	// succ:  l00401B24 l00401BA0
l00401B24:
	r31 = r11 << 0x04
	r29 = Mem0[r2 + 140:word32]
	// succ:  l00401B2C
l00401B2C:
	r4 = Mem0[r29 + 0:word32]
	r4 = Mem0[r4 + 0:word32]
	r4 = Mem0[r4 + r31:word32]
	cr1 = cond(r4 - 0x00000000)
	branch Test(EQ,cr1) l00401B54
	// succ:  l00401B40 l00401B54
l00401B40:
	r3 = r30 | 0x00000000
	r4 = r26 | 0x00000000
	call fn00401DD8 (retsize: 0;)
	cr1 = cond(r3 - -1)
	branch Test(NE,cr1) l00401B80
	// succ:  l00401B54 l00401B80
l00401B54:
	r4 = Mem0[r29 + 0:word32]
	r4 = Mem0[r4 + 0:word32]
	r4 = Mem0[r4 + r31:word32]
	cr1 = cond(r4 - 0x00000000)
	branch Test(EQ,cr1) l00401B9C
	// succ:  l00401B68 l00401B9C
l00401B68:
	r4 = Mem0[r28 + 0:word32]
	r30 = r30 + 1
	cr1 = cond(r30 - r4)
	r31 = r31 + 16
	branch Test(LT,cr1) l00401B2C
	// succ:  l00401B7C l00401B2C
l00401B7C:
	goto l00401BA0
	// succ:  l00401BA0
l00401B80:
	r12 = Mem0[r1 + 96:word32]
	Mem0[r25 + 4:word32] = r30
	lr = r12
	v24 = r1 + 60
	r25 = Mem0[v24:word32]
	v24 = v24 + 4
	r26 = Mem0[v24:word32]
	v24 = v24 + 4
	r27 = Mem0[v24:word32]
	v24 = v24 + 4
	r28 = Mem0[v24:word32]
	v24 = v24 + 4
	r29 = Mem0[v24:word32]
	v24 = v24 + 4
	r30 = Mem0[v24:word32]
	v24 = v24 + 4
	r31 = Mem0[v24:word32]
	v24 = v24 + 4
	r1 = r1 + 88
	r3 = 0
	return
	// succ:  fn00401ADC_exit
l00401B9C:
	r27 = r30 | 0x00000000
	// succ:  l00401BA0
l00401BA0:
	cr1 = cond(r27 - -1)
	r29 = Mem0[r2 + 140:word32]
	r11 = Mem0[r28 + 0:word32]
	r9 = Mem0[r29 + 0:word32]
	branch Test(NE,cr1) l00401CC8
	// succ:  l00401BB4 l00401CC8
l00401BB4:
	cr1 = cond(r9 - 0x00000000)
	r11 = r11 + 32
	r31 = r11 << 0x04
	branch Test(EQ,cr1) l00401BD8
	// succ:  l00401BC4 l00401BD8
l00401BC4:
	r3 = r9 | 0x00000000
	r4 = r31 | 0x00000000
	call fn0040408C (retsize: 0;)
	r2 = Mem0[r1 + 20:word32]
	r9 = Mem0[r29 + 0:word32]
	// succ:  l00401BD8
l00401BD8:
	cr1 = cond(r9 - 0x00000000)
	branch Test(EQ,cr1) l00401BF4
	// succ:  l00401BE0 l00401BF4
l00401BE0:
	r4 = Mem0[r2 + 152:word32]
	r4 = Mem0[r4 + 0:word32]
	r4 = (word32) Mem0[r4 + 0:word16]
	cr1 = cond(r4 - 0x00000000)
	branch Test(EQ,cr1) l00401C74
	// succ:  l00401BF4 l00401C74
l00401BF4:
	r3 = r31 | 0x00000000
	call fn004040A4 (retsize: 0;)
	r2 = Mem0[r1 + 20:word32]
	r31 = r3 | 0x00000000
	cr1 = cond(r31 - 0x00000000)
	branch Test(NE,cr1) l00401C24
	// succ:  l00401C0C l00401C24
l00401C0C:
	r12 = Mem0[r1 + 96:word32]
	v20 = r1 + 60
	r25 = Mem0[v20:word32]
	v20 = v20 + 4
	r26 = Mem0[v20:word32]
	v20 = v20 + 4
	r27 = Mem0[v20:word32]
	v20 = v20 + 4
	r28 = Mem0[v20:word32]
	v20 = v20 + 4
	r29 = Mem0[v20:word32]
	v20 = v20 + 4
	r30 = Mem0[v20:word32]
	v20 = v20 + 4
	r31 = Mem0[v20:word32]
	v20 = v20 + 4
	lr = r12
	r1 = r1 + 88
	r3 = -1
	return
	// succ:  fn00401ADC_exit
l00401C24:
	r3 = r31 | 0x00000000
	call fn004040BC (retsize: 0;)
	r2 = Mem0[r1 + 20:word32]
	r9 = Mem0[r29 + 0:word32]
	cr1 = cond(r9 - 0x00000000)
	branch Test(EQ,cr1) l00401C6C
	// succ:  l00401C3C l00401C6C
l00401C3C:
	r4 = Mem0[r28 + 0:word32]
	r3 = Mem0[r9 + 0:word32]
	Mem0[r1 + 56:word32] = r4
	r4 = Mem0[r31 + 0:word32]
	r5 = Mem0[r1 + 56:word32]
	r5 = r5 << 0x04
	call fn004040D4 (retsize: 0;)
	r2 = Mem0[r1 + 20:word32]
	r4 = Mem0[r29 + 0:word32]
	r3 = r4 | 0x00000000
	call fn004040EC (retsize: 0;)
	r2 = Mem0[r1 + 20:word32]
	// succ:  l00401C6C
l00401C6C:
	Mem0[r29 + 0:word32] = r31
	r9 = Mem0[r29 + 0:word32]
	// succ:  l00401C74
l00401C74:
	r9 = Mem0[r9 + 0:word32]
	r4 = Mem0[r28 + 0:word32]
	r11 = 0
	r10 = r4 << 0x04
	r10 = r10 + r9
	r9 = 32
	ctr = r9
	r9 = 0
	// succ:  l00401C94
l00401C94:
	Mem0[r10 + r11:word32] = r9
	r11 = r11 + 4
	Mem0[r10 + r11:word32] = r9
	r11 = r11 + 4
	Mem0[r10 + r11:word32] = r9
	r11 = r11 + 4
	Mem0[r10 + r11:word32] = r9
	r11 = r11 + 4
	ctr = ctr - 0x00000001
	branch ctr != 0x00000000 l00401C94
	// succ:  l00401CB8 l00401C94
l00401CB8:
	r4 = Mem0[r28 + 0:word32]
	r27 = r4 | 0x00000000
	r4 = r4 + 32
	Mem0[r28 + 0:word32] = r4
	// succ:  l00401CC8
l00401CC8:
	r3 = r27 | 0x00000000
	r4 = r26 | 0x00000000
	call fn00401CE8 (retsize: 0;)
	r12 = Mem0[r1 + 96:word32]
	v21 = r1 + 60
	r25 = Mem0[v21:word32]
	v21 = v21 + 4
	r26 = Mem0[v21:word32]
	v21 = v21 + 4
	r27 = Mem0[v21:word32]
	v21 = v21 + 4
	r28 = Mem0[v21:word32]
	v21 = v21 + 4
	r29 = Mem0[v21:word32]
	v21 = v21 + 4
	r30 = Mem0[v21:word32]
	v21 = v21 + 4
	r31 = Mem0[v21:word32]
	v21 = v21 + 4
	lr = r12
	r1 = r1 + 88
	return
	// succ:  fn00401ADC_exit
fn00401ADC_exit:


// fn00401CE8
// Return size: 0
define fn00401CE8
fn00401CE8_entry:
	// succ:  l00401CE8
l00401CE8:
	r1 = fp
	Mem0[r1 + -72:word32] = r1
	r1 = r1 + -72
	Mem0[v3:word32] = r29
	v3 = v3 + 4
	Mem0[v3:word32] = r30
	v3 = v3 + 4
	Mem0[v3:word32] = r31
	v3 = v3 + 4
	r29 = r4 | 0x00000000
	r4 = Mem0[r2 + 144:word32]
	r5 = -4096
	r4 = Mem0[r4 + 0:word32]
	r12 = lr
	r31 = r4 + 4095
	r31 = r31 & r5
	cr1 = cond(r29 - r31)
	r30 = r3 | 0x00000000
	Mem0[r1 + 80:word32] = r12
	branch Test(LE,cr1) l00401D20
	// succ:  l00401D1C l00401D20
l00401D1C:
	r31 = r29 | 0x00000000
	// succ:  l00401D20
l00401D20:
	r3 = r31 + 8
	call fn00404104 (retsize: 0;)
	r2 = Mem0[r1 + 20:word32]
	r10 = r3 | 0x00000000
	cr1 = cond(r10 - 0x00000000)
	branch Test(EQ,cr1) l00401DC0
	// succ:  l00401D38 l00401DC0
l00401D38:
	r9 = r10 | 0x00000000
	r4 = r9 & 0x00000003
	cr0 = cond(r4)
	r5 = Mem0[r2 + 140:word32]
	r11 = Mem0[r5 + 0:word32]
	r11 = Mem0[r11 + 0:word32]
	branch Test(EQ,cr0) l00401D6C
	// succ:  l00401D50 l00401D6C
l00401D50:
	r8 = r30 << 0x04
	r9 = r9 + 7
	r4 = -8
	r9 = r9 & r4
	Mem0[r11 + r8:word32] = r9
	r8 = r8 + r11
	goto l00401D78
	// succ:  l00401D78
l00401D6C:
	r8 = r30 << 0x04
	Mem0[r11 + r8:word32] = r10
	r8 = r8 + r11
	// succ:  l00401D78
l00401D78:
	r3 = r30 | 0x00000000
	r4 = r29 | 0x00000000
	Mem0[r8 + 12:word32] = r10
	Mem0[r8 + 8:word32] = r31
	r5 = 0
	Mem0[r8 + 4:word32] = r5
	call fn00401DD8 (retsize: 0;)
	cr1 = cond(r3 - 0)
	branch Test(EQ,cr1) l00401DA8
	// succ:  l00401D9C l00401DA8
l00401D9C:
	r3 = r30 | 0x00000000
	call fn00401ED4 (retsize: 0;)
	goto l00401DC0
	// succ:  l00401DC0
l00401DA8:
	r12 = Mem0[r1 + 80:word32]
	v20 = r1 + 56
	r29 = Mem0[v20:word32]
	v20 = v20 + 4
	r30 = Mem0[v20:word32]
	v20 = v20 + 4
	r31 = Mem0[v20:word32]
	v20 = v20 + 4
	lr = r12
	r1 = r1 + 72
	r3 = 0
	return
	// succ:  fn00401CE8_exit
l00401DC0:
	r12 = Mem0[r1 + 80:word32]
	v19 = r1 + 56
	r29 = Mem0[v19:word32]
	v19 = v19 + 4
	r30 = Mem0[v19:word32]
	v19 = v19 + 4
	r31 = Mem0[v19:word32]
	v19 = v19 + 4
	lr = r12
	r1 = r1 + 72
	r3 = -1
	return
	// succ:  fn00401CE8_exit
fn00401CE8_exit:


// fn00401DD8
// Return size: 0
define fn00401DD8
fn00401DD8_entry:
	// succ:  l00401DD8
l00401DD8:
	r1 = fp
	Mem0[r1 + -80:word32] = r1
	r1 = r1 + -80
	Mem0[v3:word32] = r28
	v3 = v3 + 4
	Mem0[v3:word32] = r29
	v3 = v3 + 4
	Mem0[v3:word32] = r30
	v3 = v3 + 4
	Mem0[v3:word32] = r31
	v3 = v3 + 4
	r29 = Mem0[r2 + 140:word32]
	r31 = r3 << 0x04
	r5 = Mem0[r29 + 0:word32]
	r30 = r4 + 7
	r5 = Mem0[r5 + 0:word32]
	r7 = -8
	r11 = r5 + r31
	r8 = Mem0[r11 + 4:word32]
	r9 = Mem0[r11 + 8:word32]
	r30 = r30 & r7
	r10 = r9 - r8
	cr1 = cond(r30 - r10)
	r12 = lr
	r3 = Mem0[r5 + r31:word32]
	Mem0[r1 + 88:word32] = r12
	r8 = r8 + r3
	branch Test(LE,cr1) l00401E88
	// succ:  l00401E24 l00401E88
l00401E24:
	r10 = r30 - r10
	r9 = r10 + r9
	r28 = r9 + 8
	r28 = r28 & r7
	r4 = r28 | 0x00000000
	call fn0040411C (retsize: 0;)
	r2 = Mem0[r1 + 20:word32]
	r4 = Mem0[r2 + 152:word32]
	r10 = Mem0[r29 + 0:word32]
	r4 = Mem0[r4 + 0:word32]
	r10 = Mem0[r10 + 0:word32]
	r4 = (word32) Mem0[r4 + 0:word16]
	r11 = r10 + r31
	cr1 = cond(r4 - 0x00000000)
	branch Test(EQ,cr1) l00401E78
	// succ:  l00401E60 l00401E78
l00401E60:
	r12 = Mem0[r1 + 88:word32]
	v20 = r1 + 60
	r28 = Mem0[v20:word32]
	v20 = v20 + 4
	r29 = Mem0[v20:word32]
	v20 = v20 + 4
	r30 = Mem0[v20:word32]
	v20 = v20 + 4
	r31 = Mem0[v20:word32]
	v20 = v20 + 4
	lr = r12
	r1 = r1 + 80
	r3 = -1
	return
	// succ:  fn00401DD8_exit
l00401E78:
	Mem0[r11 + 8:word32] = r28
	r8 = Mem0[r11 + 4:word32]
	r10 = Mem0[r10 + r31:word32]
	r8 = r8 + r10
	// succ:  l00401E88
l00401E88:
	r4 = Mem0[r11 + 4:word32]
	r3 = r8 | 0x00000000
	r4 = r4 + r30
	Mem0[r1 + 56:word32] = r4
	r5 = Mem0[r1 + 56:word32]
	r4 = r30 | 0x00000000
	Mem0[r11 + 4:word32] = r5
	call fn00402CE0 (retsize: 0;)
	r0 = r0 | 0x00000000
	cr1 = cond(r3 - 0)
	branch Test(EQ,cr1) l00401EBC
	// succ:  l00401EB4 l00401EBC
l00401EB4:
	call fn00401AB4 (retsize: 0;)
	r0 = r0 | 0x00000000
	// succ:  l00401EBC
l00401EBC:
	r12 = Mem0[r1 + 88:word32]
	v22 = r1 + 60
	r28 = Mem0[v22:word32]
	v22 = v22 + 4
	r29 = Mem0[v22:word32]
	v22 = v22 + 4
	r30 = Mem0[v22:word32]
	v22 = v22 + 4
	r31 = Mem0[v22:word32]
	v22 = v22 + 4
	lr = r12
	r1 = r1 + 80
	r3 = 0
	return
	// succ:  fn00401DD8_exit
fn00401DD8_exit:


// fn00401ED4
// Return size: 0
define fn00401ED4
fn00401ED4_entry:
	// succ:  l00401ED4
l00401ED4:
	r1 = fp
	Mem0[r1 + -64:word32] = r1
	r1 = r1 + -64
	Mem0[v3:word32] = r30
	v3 = v3 + 4
	Mem0[v3:word32] = r31
	v3 = v3 + 4
	r30 = Mem0[r2 + 140:word32]
	r31 = r3 << 0x04
	r11 = Mem0[r30 + 0:word32]
	r12 = lr
	r10 = Mem0[r11 + 0:word32]
	Mem0[r1 + 72:word32] = r12
	r4 = Mem0[r10 + r31:word32]
	r10 = r10 + r31
	cr1 = cond(r4 - 0x00000000)
	branch Test(EQ,cr1) l00401F14
	// succ:  l00401F04 l00401F14
l00401F04:
	r3 = Mem0[r10 + 12:word32]
	call fn00404134 (retsize: 0;)
	r2 = Mem0[r1 + 20:word32]
	r11 = Mem0[r30 + 0:word32]
	// succ:  l00401F14
l00401F14:
	r12 = Mem0[r1 + 72:word32]
	r11 = Mem0[r11 + 0:word32]
	lr = r12
	r4 = 0
	Mem0[r11 + r31:word32] = r4
	r31 = r11 + r31
	Mem0[r31 + 4:word32] = r4
	Mem0[r31 + 8:word32] = r4
	v14 = r1 + 56
	r30 = Mem0[v14:word32]
	v14 = v14 + 4
	r31 = Mem0[v14:word32]
	v14 = v14 + 4
	r1 = r1 + 64
	return
	// succ:  fn00401ED4_exit
fn00401ED4_exit:


// fn00401F40
// Return size: 0
define fn00401F40
fn00401F40_entry:
	// succ:  l00401F40
l00401F40:
	r1 = fp
	r7 = Mem0[r2 + 104:word32]
	Mem0[r1 + -16:word32] = r1
	r1 = r1 + -16
	r5 = Mem0[r7 + 4:word32]
	r6 = r7 + 12
	cr1 = cond(r5 - r6)
	Mem0[r1 + 12:word32] = r13
	r4 = 0
	r11 = Mem0[r7 + 4:word32]
	branch Test(EQ,cr1) l00401FDC
	// succ:  l00401F64 l00401FDC
l00401F64:
	r6 = -4
	// succ:  l00401F68
l00401F68:
	r5 = Mem0[r11 + 4:word32]
	r5 = r5 & 0x00000003
	cr0 = cond(r5)
	cr1 = cond(r5 - 0x00000001)
	branch Test(NE,cr1) l00401FC0
	// succ:  l00401F78 l00401FC0
l00401F78:
	r10 = Mem0[r11 + 0:word32]
	r5 = Mem0[r11 + 4:word32]
	r9 = Mem0[r10 + 4:word32]
	r5 = r5 & r6
	r8 = r9 & r6
	r8 = r8 - r5
	r8 = r8 + -8
	cr1 = cond(r8 - r3)
	branch Test(GE,cr1) l00401FD4
	// succ:  l00401F9C l00401FD4
l00401F9C:
	r9 = r9 & 0x00000003
	cr0 = cond(r9)
	cr1 = cond(r9 - 0x00000001)
	branch Test(NE,cr1) l00401FC0
	// succ:  l00401FA8 l00401FC0
l00401FA8:
	r5 = Mem0[r10 + 0:word32]
	Mem0[r11 + 0:word32] = r5
	r8 = Mem0[r7 + 8:word32]
	Mem0[r10 + 0:word32] = r8
	Mem0[r7 + 8:word32] = r10
	goto l00401F78
	// succ:  l00401F78
l00401FC0:
	r11 = Mem0[r11 + 0:word32]
	r5 = r7 + 12
	cr1 = cond(r11 - r5)
	branch Test(NE,cr1) l00401F68
	// succ:  l00401FD0 l00401F68
l00401FD0:
	goto l00401FE0
	// succ:  l00401FE0
l00401FD4:
	r4 = r11 | 0x00000000
	goto l004020AC
	// succ:  l004020AC
l00401FDC:
	r6 = -4
	// succ:  l00401FE0
l00401FE0:
	r5 = Mem0[r7 + 4:word32]
	r11 = Mem0[r7 + 0:word32]
	Mem0[r1 + 8:word32] = r5
	r8 = Mem0[r1 + 8:word32]
	r5 = r7 + 4
	cr1 = cond(r8 - r11)
	branch Test(EQ,cr1) l004020AC
	// succ:  l00401FFC l004020AC
l00401FFC:
	r8 = Mem0[r11 + 4:word32]
	r8 = r8 & 0x00000003
	cr0 = cond(r8)
	cr1 = cond(r8 - 0x00000001)
	branch Test(NE,cr1) l00402064
	// succ:  l0040200C l00402064
l0040200C:
	r10 = Mem0[r11 + 0:word32]
	r8 = Mem0[r11 + 4:word32]
	r9 = Mem0[r10 + 4:word32]
	r8 = r8 & r6
	r12 = r9 & r6
	r12 = r12 - r8
	r12 = r12 + -8
	cr1 = cond(r12 - r3)
	branch Test(GE,cr1) l00402078
	// succ:  l00402030 l00402078
l00402030:
	r9 = r9 & 0x00000003
	cr0 = cond(r9)
	cr1 = cond(r9 - 0x00000001)
	r8 = r10 | 0x00000000
	branch Test(NE,cr1) l00402064
	// succ:  l00402040 l00402064
l00402040:
	r9 = Mem0[r10 + 0:word32]
	Mem0[r11 + 0:word32] = r9
	r12 = Mem0[r7 + 8:word32]
	Mem0[r10 + 0:word32] = r12
	Mem0[r7 + 8:word32] = r10
	r13 = Mem0[r5 + 0:word32]
	cr1 = cond(r13 - r8)
	branch Test(NE,cr1) l0040200C
	// succ:  l00402060 l0040200C
l00402060:
	goto l00402080
	// succ:  l00402080
l00402064:
	r11 = Mem0[r11 + 0:word32]
	r8 = Mem0[r5 + 0:word32]
	cr1 = cond(r8 - r11)
	branch Test(NE,cr1) l00401FFC
	// succ:  l00402074 l00401FFC
l00402074:
	goto l004020AC
	// succ:  l004020AC
l00402078:
	r4 = r11 | 0x00000000
	goto l004020AC
	// succ:  l004020AC
l00402080:
	Mem0[r7 + 4:word32] = r11
	r5 = Mem0[r11 + 0:word32]
	r7 = Mem0[r11 + 4:word32]
	r5 = Mem0[r5 + 4:word32]
	r7 = r7 & r6
	r6 = r5 & r6
	r6 = r6 - r7
	r6 = r6 + -8
	cr1 = cond(r6 - r3)
	branch Test(LT,cr1) l004020AC
	// succ:  l004020A8 l004020AC
l004020A8:
	r4 = r11 | 0x00000000
	// succ:  l004020AC
l004020AC:
	r3 = r4 | 0x00000000
	r13 = Mem0[r1 + 12:word32]
	r1 = r1 + 16
	return
	// succ:  fn00401F40_exit
fn00401F40_exit:


// fn004020BC
// Return size: 0
define fn004020BC
fn004020BC_entry:
	// succ:  l004020BC
l004020BC:
	r1 = fp
	r4 = Mem0[r2 + 116:word32]
	Mem0[r1 + -152:word32] = r1
	r1 = r1 + -152
	r4 = Mem0[r4 + 0:word32]
	Mem0[v5:word32] = r29
	v5 = v5 + 4
	Mem0[v5:word32] = r30
	v5 = v5 + 4
	Mem0[v5:word32] = r31
	v5 = v5 + 4
	r29 = r3 | 0x00000000
	r5 = r29 | 0x00000000
	cr1 = cond(r5 - r4)
	r12 = lr
	Mem0[r1 + 160:word32] = r12
	branch Test(GE,cr1) l00402220
	// succ:  l004020E4 l00402220
l004020E4:
	r11 = Mem0[r2 + 120:word32]
	r11 = (word32) Mem0[r11 + r29:byte]
	v15 = (int8) r11
	r11 = (int32) v15
	r4 = r11 & 0x00000001
	cr0 = cond(r4)
	branch Test(EQ,cr0) l00402220
	// succ:  l004020F8 l00402220
l004020F8:
	r11 = r11 & 0x00000040
	cr0 = cond(r11)
	branch Test(NE,cr0) l00402210
	// succ:  l00402100 l00402210
l00402100:
	r31 = r1 + 56
	r11 = 0
	r9 = 5
	ctr = r9
	r30 = 0
	// succ:  l00402114
l00402114:
	Mem0[r31 + r11:word32] = r30
	r11 = r11 + 4
	Mem0[r31 + r11:word32] = r30
	r11 = r11 + 4
	Mem0[r31 + r11:word32] = r30
	r11 = r11 + 4
	Mem0[r31 + r11:word32] = r30
	r11 = r11 + 4
	ctr = ctr - 0x00000001
	branch ctr != 0x00000000 l00402114
	// succ:  l00402138 l00402114
l00402138:
	r4 = Mem0[r2 + 156:word32]
	r5 = r29 << 0x02
	r4 = Mem0[r4 + r5:word32]
	r3 = r31 | 0x00000000
	v19 = (int16) r4
	r4 = (int32) v19
	Mem0[r31 + 24:word16] = (word16) r4
	call fn00404074 (retsize: 0;)
	r2 = Mem0[r1 + 20:word32]
	cr1 = cond(r3 - 0)
	branch Test(EQ,cr1) l00402184
	// succ:  l00402160 l00402184
l00402160:
	r12 = Mem0[r1 + 160:word32]
	r4 = Mem0[r2 + 124:word32]
	lr = r12
	v20 = r1 + 136
	r29 = Mem0[v20:word32]
	v20 = v20 + 4
	r30 = Mem0[v20:word32]
	v20 = v20 + 4
	r31 = Mem0[v20:word32]
	v20 = v20 + 4
	r1 = r1 + 152
	r5 = 5
	Mem0[r4 + 0:word32] = r5
	r3 = -1
	return
	// succ:  fn004020BC_exit
l00402184:
	r11 = 0
	r9 = 5
	ctr = r9
	// succ:  l00402190
l00402190:
	Mem0[r31 + r11:word32] = r30
	r11 = r11 + 4
	Mem0[r31 + r11:word32] = r30
	r11 = r11 + 4
	Mem0[r31 + r11:word32] = r30
	r11 = r11 + 4
	Mem0[r31 + r11:word32] = r30
	r11 = r11 + 4
	ctr = ctr - 0x00000001
	branch ctr != 0x00000000 l00402190
	// succ:  l004021B4 l00402190
l004021B4:
	r4 = Mem0[r2 + 160:word32]
	r29 = r29 << 0x01
	r4 = (int32) Mem0[r4 + r29:int16]
	r3 = r31 | 0x00000000
	Mem0[r31 + 22:word16] = (word16) r4
	call fn00403F3C (retsize: 0;)
	r2 = Mem0[r1 + 20:word32]
	cr1 = cond(r3 - 0)
	branch Test(EQ,cr1) l004021F8
	// succ:  l004021D8 l004021F8
l004021D8:
	call fn00403104 (retsize: 0;)
	r0 = r0 | 0x00000000
	r12 = Mem0[r1 + 160:word32]
	v26 = r1 + 136
	r29 = Mem0[v26:word32]
	v26 = v26 + 4
	r30 = Mem0[v26:word32]
	v26 = v26 + 4
	r31 = Mem0[v26:word32]
	v26 = v26 + 4
	lr = r12
	r1 = r1 + 152
	r3 = -1
	return
	// succ:  fn004020BC_exit
l004021F8:
	r12 = Mem0[r1 + 160:word32]
	v27 = r1 + 136
	r29 = Mem0[v27:word32]
	v27 = v27 + 4
	r30 = Mem0[v27:word32]
	v27 = v27 + 4
	r31 = Mem0[v27:word32]
	v27 = v27 + 4
	lr = r12
	r1 = r1 + 152
	r3 = 0
	return
	// succ:  fn004020BC_exit
l00402210:
	v24 = r1 + 136
	r29 = Mem0[v24:word32]
	v24 = v24 + 4
	r30 = Mem0[v24:word32]
	v24 = v24 + 4
	r31 = Mem0[v24:word32]
	v24 = v24 + 4
	r1 = r1 + 152
	r3 = 0
	return
	// succ:  fn004020BC_exit
l00402220:
	r4 = Mem0[r2 + 124:word32]
	r5 = Mem0[r2 + 164:word32]
	v21 = r1 + 136
	r29 = Mem0[v21:word32]
	v21 = v21 + 4
	r30 = Mem0[v21:word32]
	v21 = v21 + 4
	r31 = Mem0[v21:word32]
	v21 = v21 + 4
	r1 = r1 + 152
	r6 = 9
	Mem0[r4 + 0:word32] = r6
	r7 = 0
	Mem0[r5 + 0:word32] = r7
	r3 = -1
	return
	// succ:  fn004020BC_exit
fn004020BC_exit:


// fn00402248
// Return size: 0
define fn00402248
fn00402248_entry:
	// succ:  l00402248
l00402248:
	r1 = fp
	r6 = Mem0[r2 + 116:word32]
	r10 = r3 | 0x00000000
	r6 = Mem0[r6 + 0:word32]
	r7 = r10 | 0x00000000
	cr1 = cond(r7 - r6)
	r12 = lr
	Mem0[r1 + -160:word32] = r1
	r1 = r1 + -160
	Mem0[r1 + 168:word32] = r12
	Mem0[v11:word32] = r29
	v11 = v11 + 4
	Mem0[v11:word32] = r30
	v11 = v11 + 4
	Mem0[v11:word32] = r31
	v11 = v11 + 4
	branch Test(GE,cr1) l00402374
	// succ:  l00402270 l00402374
l00402270:
	r11 = Mem0[r2 + 120:word32]
	r11 = (word32) Mem0[r11 + r10:byte]
	v16 = (int8) r11
	r11 = (int32) v16
	r6 = r11 & 0x00000001
	cr0 = cond(r6)
	branch Test(EQ,cr0) l00402374
	// succ:  l00402284 l00402374
l00402284:
	r6 = r11 & 0x00000010
	cr0 = cond(r6)
	branch Test(NE,cr0) l00402374
	// succ:  l0040228C l00402374
l0040228C:
	r6 = r11 & 0x00000040
	cr0 = cond(r6)
	branch Test(EQ,cr0) l004022E4
	// succ:  l00402294 l004022E4
l00402294:
	r6 = Mem0[r2 + 156:word32]
	r10 = r10 << 0x02
	r31 = Mem0[r6 + r10:word32]
	r29 = r5 | 0x00000000
	r30 = Mem0[r31 + 4:word32]
	Mem0[r31 + 16:word32] = r4
	Mem0[r31 + 12:word32] = r29
	r30 = Mem0[r30 + 16:word32]
	r3 = r31 | 0x00000000
	r12 = r30 | 0x00000000
	call fn00403F10 (retsize: 0;)
	r2 = Mem0[r1 + 20:word32]
	r30 = r3 | 0x00000000
	v20 = (int16) r30
	r3 = (int32) v20
	cr0 = cond(r3)
	branch Test(EQ,cr0) l004022D8
	// succ:  l004022D0 l004022D8
l004022D0:
	r3 = (int32) Mem0[r31 + 2:int16]
	goto l00402334
	// succ:  l00402334
l004022D8:
	r11 = Mem0[r31 + 12:word32]
	r11 = r29 - r11
	goto l00402334
	// succ:  l00402334
l004022E4:
	r11 = r11 & 0x00000020
	cr0 = cond(r11)
	r6 = Mem0[r2 + 156:word32]
	r10 = r10 << 0x02
	r6 = Mem0[r6 + r10:word32]
	r31 = r1 + 64
	Mem0[r31 + 32:word32] = r4
	Mem0[r31 + 36:word32] = r5
	v22 = (int16) r6
	r6 = (int32) v22
	Mem0[r31 + 24:word16] = (word16) r6
	r9 = 0
	Mem0[r31 + 46:word32] = r9
	branch Test(EQ,cr0) l00402320
	// succ:  l00402314 l00402320
l00402314:
	r4 = 2
	Mem0[r31 + 44:word16] = (word16) r4
	goto l00402324
	// succ:  l00402324
l00402320:
	Mem0[r31 + 44:word16] = (word16) r9
	// succ:  l00402324
l00402324:
	r3 = r31 | 0x00000000
	call fn0040405C (retsize: 0;)
	r2 = Mem0[r1 + 20:word32]
	r11 = Mem0[r31 + 40:word32]
	// succ:  l00402334
l00402334:
	cr1 = cond(r3 - 0)
	branch Test(NE,cr1) l00402354
	// succ:  l0040233C l00402354
l0040233C:
	r12 = Mem0[r1 + 168:word32]
	r3 = r11 | 0x00000000
	lr = r12
	v21 = r1 + 144
	r29 = Mem0[v21:word32]
	v21 = v21 + 4
	r30 = Mem0[v21:word32]
	v21 = v21 + 4
	r31 = Mem0[v21:word32]
	v21 = v21 + 4
	r1 = r1 + 160
	return
	// succ:  fn00402248_exit
l00402354:
	call fn00403104 (retsize: 0;)
	r0 = r0 | 0x00000000
	r12 = Mem0[r1 + 168:word32]
	v25 = r1 + 144
	r29 = Mem0[v25:word32]
	v25 = v25 + 4
	r30 = Mem0[v25:word32]
	v25 = v25 + 4
	r31 = Mem0[v25:word32]
	v25 = v25 + 4
	lr = r12
	r1 = r1 + 160
	r3 = -1
	return
	// succ:  fn00402248_exit
l00402374:
	r4 = Mem0[r2 + 124:word32]
	r5 = Mem0[r2 + 164:word32]
	r1 = r1 + 160
	r6 = 9
	Mem0[r4 + 0:word32] = r6
	r7 = 0
	Mem0[r5 + 0:word32] = r7
	r3 = -1
	return
	// succ:  fn00402248_exit
fn00402248_exit:


// fn00402398
// Return size: 0
define fn00402398
fn00402398_entry:
	// succ:  l00402398
l00402398:
	r1 = fp
	Mem0[r1 + -72:word32] = r1
	r1 = r1 + -72
	Mem0[v3:word32] = r29
	v3 = v3 + 4
	Mem0[v3:word32] = r30
	v3 = v3 + 4
	Mem0[v3:word32] = r31
	v3 = v3 + 4
	r29 = Mem0[r2 + 108:word32]
	r4 = Mem0[r2 + 72:word32]
	r5 = Mem0[r29 + 0:word32]
	r31 = r4 + 96
	cr1 = cond(r5 - r31)
	r12 = lr
	r30 = 0
	Mem0[r1 + 80:word32] = r12
	branch Test(LT,cr1) l004023EC
	// succ:  l004023C4 l004023EC
l004023C4:
	r3 = r31 | 0x00000000
	call fn00403170 (retsize: 0;)
	r0 = r0 | 0x00000000
	cr1 = cond(r3 - -1)
	branch Test(EQ,cr1) l004023DC
	// succ:  l004023D8 l004023DC
l004023D8:
	r30 = r30 + 1
	// succ:  l004023DC
l004023DC:
	r4 = Mem0[r29 + 0:word32]
	r31 = r31 + 32
	cr1 = cond(r4 - r31)
	branch Test(GE,cr1) l004023C4
	// succ:  l004023EC l004023C4
l004023EC:
	r12 = Mem0[r1 + 80:word32]
	r3 = r30 | 0x00000000
	lr = r12
	v15 = r1 + 56
	r29 = Mem0[v15:word32]
	v15 = v15 + 4
	r30 = Mem0[v15:word32]
	v15 = v15 + 4
	r31 = Mem0[v15:word32]
	v15 = v15 + 4
	r1 = r1 + 72
	return
	// succ:  fn00402398_exit
fn00402398_exit:


// fn00402404
// Return size: 0
define fn00402404
fn00402404_entry:
	// succ:  l00402404
l00402404:
	r1 = fp
	r12 = lr
	r3 = Mem0[r2 + 168:word32]
	r4 = Mem0[r2 + 172:word32]
	Mem0[r1 + -64:word32] = r1
	r1 = r1 + -64
	Mem0[r1 + 72:word32] = r12
	Mem0[r1 + 60:word32] = r31
	call fn0040262C (retsize: 0;)
	r3 = Mem0[r2 + 176:word32]
	r4 = Mem0[r2 + 180:word32]
	call fn0040262C (retsize: 0;)
	r3 = -24147
	r4 = 0
	call fn00404044 (retsize: 0;)
	r2 = Mem0[r1 + 20:word32]
	r31 = r3 | 0x00000000
	r3 = -22369
	r4 = 1
	call fn00404044 (retsize: 0;)
	r2 = Mem0[r1 + 20:word32]
	cr1 = cond(r31 - r3)
	branch Test(EQ,cr1) l00402480
	// succ:  l00402458 l00402480
l00402458:
	r4 = r1 + 56
	r3 = 0x73790000
	r3 = r3 | 0x00007376
	call fn00403F9C (retsize: 0;)
	r2 = Mem0[r1 + 20:word32]
	cr1 = cond(r3 - 0)
	branch Test(NE,cr1) l00402480
	// succ:  l00402474 l00402480
l00402474:
	r4 = Mem0[r2 + 184:word32]
	r5 = Mem0[r1 + 56:word32]
	Mem0[r4 + 0:word32] = r5
	// succ:  l00402480
l00402480:
	r12 = Mem0[r1 + 72:word32]
	r31 = Mem0[r1 + 60:word32]
	lr = r12
	r1 = r1 + 64
	r3 = 0
	return
	// succ:  fn00402404_exit
fn00402404_exit:


// fn004024F0
// Return size: 0
define fn004024F0
fn004024F0_entry:
	// succ:  l004024F0
l004024F0:
	r1 = fp
	cr1 = cond(r4 - 0)
	r12 = lr
	r4 = Mem0[r2 + 112:word32]
	Mem0[r1 + -64:word32] = r1
	r1 = r1 + -64
	Mem0[v8:word32] = r30
	v8 = v8 + 4
	Mem0[v8:word32] = r31
	v8 = v8 + 4
	r30 = r3 | 0x00000000
	r31 = r5 | 0x00000000
	Mem0[r1 + 72:word32] = r12
	v13 = (int8) r31
	r5 = (int32) v13
	Mem0[r4 + 0:byte] = (byte) r5
	branch Test(NE,cr1) l00402544
	// succ:  l0040251C l00402544
l0040251C:
	r3 = Mem0[r2 + 188:word32]
	r3 = Mem0[r3 + 0:word32]
	cr1 = cond(r3 - 0x00000000)
	branch Test(EQ,cr1) l00402538
	// succ:  l0040252C l00402538
l0040252C:
	r4 = Mem0[r2 + 192:word32]
	r4 = Mem0[r4 + 0:word32]
	call fn0040262C (retsize: 0;)
	// succ:  l00402538
l00402538:
	r3 = Mem0[r2 + 196:word32]
	r4 = Mem0[r2 + 200:word32]
	call fn0040262C (retsize: 0;)
	// succ:  l00402544
l00402544:
	r3 = Mem0[r2 + 204:word32]
	r4 = Mem0[r2 + 208:word32]
	call fn0040262C (retsize: 0;)
	cr1 = cond(r31 - 0)
	branch Test(NE,cr1) l00402574
	// succ:  l00402558 l00402574
l00402558:
	r11 = Mem0[r2 + 212:word32]
	r11 = Mem0[r11 + 0:word32]
	cr1 = cond(r11 - 0x00000000)
	branch Test(EQ,cr1) l0040256C
	// succ:  l00402568 l0040256C
l00402568:
	Mem0[r11 + 14:word32] = r30
	// succ:  l0040256C
l0040256C:
	call fn00403248 (retsize: 0;)
	r0 = r0 | 0x00000000
	// succ:  l00402574
l00402574:
	r12 = Mem0[r1 + 72:word32]
	v15 = r1 + 56
	r30 = Mem0[v15:word32]
	v15 = v15 + 4
	r31 = Mem0[v15:word32]
	v15 = v15 + 4
	lr = r12
	r1 = r1 + 64
	return
	// succ:  fn004024F0_exit
fn004024F0_exit:


// fn0040262C
// Return size: 0
define fn0040262C
fn0040262C_entry:
	// succ:  l0040262C
l0040262C:
	r1 = fp
	Mem0[r1 + -72:word32] = r1
	r1 = r1 + -72
	Mem0[v3:word32] = r29
	v3 = v3 + 4
	Mem0[v3:word32] = r30
	v3 = v3 + 4
	Mem0[v3:word32] = r31
	v3 = v3 + 4
	r30 = r3 | 0x00000000
	r29 = r4 | 0x00000000
	cr1 = cond(r29 - r30)
	r12 = lr
	Mem0[r1 + 80:word32] = r12
	branch Test(LE,cr1) l0040267C
	// succ:  l0040264C l0040267C
l0040264C:
	r31 = Mem0[r30 + 0:word32]
	cr1 = cond(r31 - 0x00000000)
	branch Test(EQ,cr1) l00402670
	// succ:  l00402658 l00402670
l00402658:
	r4 = -1
	cr1 = cond(r31 - r4)
	branch Test(EQ,cr1) l00402670
	// succ:  l00402664 l00402670
l00402664:
	r12 = r31 | 0x00000000
	call fn00403F10 (retsize: 0;)
	r2 = Mem0[r1 + 20:word32]
	// succ:  l00402670
l00402670:
	r30 = r30 + 4
	cr1 = cond(r29 - r30)
	branch Test(GT,cr1) l0040264C
	// succ:  l0040267C l0040264C
l0040267C:
	r12 = Mem0[r1 + 80:word32]
	v13 = r1 + 56
	r29 = Mem0[v13:word32]
	v13 = v13 + 4
	r30 = Mem0[v13:word32]
	v13 = v13 + 4
	r31 = Mem0[v13:word32]
	v13 = v13 + 4
	lr = r12
	r1 = r1 + 72
	return
	// succ:  fn0040262C_exit
fn0040262C_exit:


// fn004026B8
// Return size: 0
define fn004026B8
fn004026B8_entry:
	// succ:  l004026B8
l004026B8:
	r1 = fp
	Mem0[r1 + -160:word32] = r1
	r1 = r1 + -160
	Mem0[v3:word32] = r26
	v3 = v3 + 4
	Mem0[v3:word32] = r27
	v3 = v3 + 4
	Mem0[v3:word32] = r28
	v3 = v3 + 4
	Mem0[v3:word32] = r29
	v3 = v3 + 4
	Mem0[v3:word32] = r30
	v3 = v3 + 4
	Mem0[v3:word32] = r31
	v3 = v3 + 4
	r29 = r4 | 0x00000000
	r4 = Mem0[r2 + 116:word32]
	r28 = r3 | 0x00000000
	r4 = Mem0[r4 + 0:word32]
	r6 = r28 | 0x00000000
	cr1 = cond(r4 - r6)
	r12 = lr
	Mem0[r1 + 168:word32] = r12
	branch Test(LE,cr1) l00402964
	// succ:  l004026E4 l00402964
l004026E4:
	r11 = Mem0[r2 + 120:word32]
	r11 = (word32) Mem0[r11 + r28:byte]
	v18 = (int8) r11
	r11 = (int32) v18
	r4 = r11 & 0x00000001
	cr0 = cond(r4)
	branch Test(EQ,cr0) l00402964
	// succ:  l004026F8 l00402964
l004026F8:
	r11 = r11 & 0x00000040
	cr0 = cond(r11)
	branch Test(NE,cr0) l00402964
	// succ:  l00402700 l00402964
l00402700:
	r11 = r5 | 0x00000000
	cr1 = cond(r11 - 0)
	branch Test(EQ,cr1) l00402738
	// succ:  l0040270C l00402738
l0040270C:
	cr1 = cond(r11 - 1)
	branch Test(EQ,cr1) l00402744
	// succ:  l00402714 l00402744
l00402714:
	cr1 = cond(r11 - 2)
	branch Test(EQ,cr1) l004027A8
	// succ:  l0040271C l004027A8
l0040271C:
	r4 = Mem0[r2 + 124:word32]
	v21 = r1 + 144
	r28 = Mem0[v21:word32]
	v21 = v21 + 4
	r29 = Mem0[v21:word32]
	v21 = v21 + 4
	r30 = Mem0[v21:word32]
	v21 = v21 + 4
	r31 = Mem0[v21:word32]
	v21 = v21 + 4
	r1 = r1 + 160
	r5 = 22
	Mem0[r4 + 0:word32] = r5
	r3 = -1
	return
	// succ:  fn004026B8_exit
l00402738:
	r3 = 0
	r30 = 0
	goto l00402808
	// succ:  l00402808
l00402744:
	r31 = r1 + 56
	r11 = 0
	r9 = 5
	ctr = r9
	r30 = 0
	// succ:  l00402758
l00402758:
	Mem0[r31 + r11:word32] = r30
	r11 = r11 + 4
	Mem0[r31 + r11:word32] = r30
	r11 = r11 + 4
	Mem0[r31 + r11:word32] = r30
	r11 = r11 + 4
	Mem0[r31 + r11:word32] = r30
	r11 = r11 + 4
	ctr = ctr - 0x00000001
	branch ctr != 0x00000000 l00402758
	// succ:  l0040277C l00402758
l0040277C:
	r4 = Mem0[r2 + 156:word32]
	r5 = r28 << 0x02
	r4 = Mem0[r4 + r5:word32]
	r3 = r31 | 0x00000000
	v30 = (int16) r4
	r4 = (int32) v30
	Mem0[r31 + 24:word16] = (word16) r4
	call fn00403FE4 (retsize: 0;)
	r2 = Mem0[r1 + 20:word32]
	r31 = Mem0[r31 + 46:word32]
	r29 = r29 + r31
	goto l00402808
	// succ:  l00402808
l004027A8:
	r31 = r1 + 56
	r11 = 0
	r9 = 5
	ctr = r9
	r30 = 0
	// succ:  l004027BC
l004027BC:
	Mem0[r31 + r11:word32] = r30
	r11 = r11 + 4
	Mem0[r31 + r11:word32] = r30
	r11 = r11 + 4
	Mem0[r31 + r11:word32] = r30
	r11 = r11 + 4
	Mem0[r31 + r11:word32] = r30
	r11 = r11 + 4
	ctr = ctr - 0x00000001
	branch ctr != 0x00000000 l004027BC
	// succ:  l004027E0 l004027BC
l004027E0:
	r4 = Mem0[r2 + 156:word32]
	r5 = r28 << 0x02
	r4 = Mem0[r4 + r5:word32]
	r3 = r31 | 0x00000000
	v26 = (int16) r4
	r4 = (int32) v26
	Mem0[r31 + 24:word16] = (word16) r4
	call fn00403FFC (retsize: 0;)
	r2 = Mem0[r1 + 20:word32]
	r31 = Mem0[r31 + 28:word32]
	r29 = r29 + r31
	// succ:  l00402808
l00402808:
	cr1 = cond(r3 - 0)
	branch Test(NE,cr1) l00402920
	// succ:  l00402810 l00402920
l00402810:
	r31 = r1 + 56
	r11 = 0
	r9 = 5
	ctr = r9
	// succ:  l00402820
l00402820:
	Mem0[r31 + r11:word32] = r30
	r11 = r11 + 4
	Mem0[r31 + r11:word32] = r30
	r11 = r11 + 4
	Mem0[r31 + r11:word32] = r30
	r11 = r11 + 4
	Mem0[r31 + r11:word32] = r30
	r11 = r11 + 4
	ctr = ctr - 0x00000001
	branch ctr != 0x00000000 l00402820
	// succ:  l00402844 l00402820
l00402844:
	r27 = Mem0[r2 + 156:word32]
	r28 = r28 << 0x02
	r4 = Mem0[r27 + r28:word32]
	r3 = r31 | 0x00000000
	Mem0[r31 + 46:word32] = r29
	v27 = (int16) r4
	r4 = (int32) v27
	Mem0[r31 + 24:word16] = (word16) r4
	r27 = r28 + r27
	r26 = 1
	Mem0[r31 + 44:word16] = (word16) r26
	call fn00404014 (retsize: 0;)
	r2 = Mem0[r1 + 20:word32]
	cr1 = cond(r3 - -39)
	branch Test(NE,cr1) l00402920
	// succ:  l0040287C l00402920
l0040287C:
	r11 = 0
	r9 = 5
	ctr = r9
	// succ:  l00402888
l00402888:
	Mem0[r31 + r11:word32] = r30
	r11 = r11 + 4
	Mem0[r31 + r11:word32] = r30
	r11 = r11 + 4
	Mem0[r31 + r11:word32] = r30
	r11 = r11 + 4
	Mem0[r31 + r11:word32] = r30
	r11 = r11 + 4
	ctr = ctr - 0x00000001
	branch ctr != 0x00000000 l00402888
	// succ:  l004028AC l00402888
l004028AC:
	r4 = Mem0[r27 + 0:word32]
	r3 = r31 | 0x00000000
	Mem0[r31 + 28:word32] = r29
	v28 = (int16) r4
	r4 = (int32) v28
	Mem0[r31 + 24:word16] = (word16) r4
	call fn0040402C (retsize: 0;)
	r2 = Mem0[r1 + 20:word32]
	cr1 = cond(r3 - 0)
	branch Test(NE,cr1) l00402920
	// succ:  l004028D0 l00402920
l004028D0:
	r11 = 0
	r9 = 5
	ctr = r9
	// succ:  l004028DC
l004028DC:
	Mem0[r31 + r11:word32] = r30
	r11 = r11 + 4
	Mem0[r31 + r11:word32] = r30
	r11 = r11 + 4
	Mem0[r31 + r11:word32] = r30
	r11 = r11 + 4
	Mem0[r31 + r11:word32] = r30
	r11 = r11 + 4
	ctr = ctr - 0x00000001
	branch ctr != 0x00000000 l004028DC
	// succ:  l00402900 l004028DC
l00402900:
	r27 = Mem0[r27 + 0:word32]
	r3 = r31 | 0x00000000
	Mem0[r31 + 44:word16] = (word16) r26
	Mem0[r31 + 46:word32] = r29
	v29 = (int16) r27
	r27 = (int32) v29
	Mem0[r31 + 24:word16] = (word16) r27
	call fn00404014 (retsize: 0;)
	r2 = Mem0[r1 + 20:word32]
	// succ:  l00402920
l00402920:
	cr1 = cond(r3 - 0)
	branch Test(EQ,cr1) l00402948
	// succ:  l00402928 l00402948
l00402928:
	call fn00403104 (retsize: 0;)
	r0 = r0 | 0x00000000
	r12 = Mem0[r1 + 168:word32]
	v32 = r1 + 136
	r26 = Mem0[v32:word32]
	v32 = v32 + 4
	r27 = Mem0[v32:word32]
	v32 = v32 + 4
	r28 = Mem0[v32:word32]
	v32 = v32 + 4
	r29 = Mem0[v32:word32]
	v32 = v32 + 4
	r30 = Mem0[v32:word32]
	v32 = v32 + 4
	r31 = Mem0[v32:word32]
	v32 = v32 + 4
	lr = r12
	r1 = r1 + 160
	r3 = -1
	return
	// succ:  fn004026B8_exit
l00402948:
	r12 = Mem0[r1 + 168:word32]
	r4 = r1 + 56
	lr = r12
	r3 = Mem0[r4 + 46:word32]
	v33 = r1 + 136
	r26 = Mem0[v33:word32]
	v33 = v33 + 4
	r27 = Mem0[v33:word32]
	v33 = v33 + 4
	r28 = Mem0[v33:word32]
	v33 = v33 + 4
	r29 = Mem0[v33:word32]
	v33 = v33 + 4
	r30 = Mem0[v33:word32]
	v33 = v33 + 4
	r31 = Mem0[v33:word32]
	v33 = v33 + 4
	r1 = r1 + 160
	return
	// succ:  fn004026B8_exit
l00402964:
	r4 = Mem0[r2 + 124:word32]
	r5 = Mem0[r2 + 164:word32]
	v22 = r1 + 144
	r28 = Mem0[v22:word32]
	v22 = v22 + 4
	r29 = Mem0[v22:word32]
	v22 = v22 + 4
	r30 = Mem0[v22:word32]
	v22 = v22 + 4
	r31 = Mem0[v22:word32]
	v22 = v22 + 4
	r1 = r1 + 160
	r6 = 9
	Mem0[r4 + 0:word32] = r6
	r7 = 0
	Mem0[r5 + 0:word32] = r7
	r3 = -1
	return
	// succ:  fn004026B8_exit
fn004026B8_exit:


// fn0040298C
// Return size: 0
define fn0040298C
fn0040298C_entry:
	// succ:  l0040298C
l0040298C:
	r1 = fp
	r4 = Mem0[r2 + 76:word32]
	r12 = lr
	r5 = Mem0[r4 + 0:word32]
	Mem0[r1 + -64:word32] = r1
	r1 = r1 + -64
	Mem0[r1 + 72:word32] = r12
	Mem0[r1 + 56:word32] = r31
	r31 = r3 | 0x00000000
	r5 = r5 + 1
	Mem0[r4 + 0:word32] = r5
	r3 = 4096
	call fn00400F9C (retsize: 0;)
	r0 = r0 | 0x00000000
	r4 = r3 | 0x00000000
	cr1 = cond(r4 - 0x00000000)
	Mem0[r31 + 8:word32] = r3
	branch Test(EQ,cr1) l004029E4
	// succ:  l004029CC l004029E4
l004029CC:
	r4 = Mem0[r31 + 12:word32]
	r5 = 4096
	Mem0[r31 + 24:word32] = r5
	r4 = r4 | 0x00000008
	Mem0[r31 + 12:word32] = r4
	goto l00402A00
	// succ:  l00402A00
l004029E4:
	r4 = Mem0[r31 + 12:word32]
	r6 = r31 + 20
	Mem0[r31 + 8:word32] = r6
	r4 = r4 | 0x00000004
	Mem0[r31 + 12:word32] = r4
	r5 = 1
	Mem0[r31 + 24:word32] = r5
	// succ:  l00402A00
l00402A00:
	r12 = Mem0[r1 + 72:word32]
	r4 = Mem0[r31 + 8:word32]
	lr = r12
	r5 = 0
	Mem0[r31 + 4:word32] = r5
	Mem0[r31 + 0:word32] = r4
	r31 = Mem0[r1 + 56:word32]
	r1 = r1 + 64
	return
	// succ:  fn0040298C_exit
fn0040298C_exit:


// fn00402A24
// Return size: 0
define fn00402A24
fn00402A24_entry:
	// succ:  l00402A24
l00402A24:
	r1 = fp
	Mem0[r1 + -600:word32] = r1
	r1 = r1 + -600
	Mem0[v3:word32] = r27
	v3 = v3 + 4
	Mem0[v3:word32] = r28
	v3 = v3 + 4
	Mem0[v3:word32] = r29
	v3 = v3 + 4
	Mem0[v3:word32] = r30
	v3 = v3 + 4
	Mem0[v3:word32] = r31
	v3 = v3 + 4
	r28 = r4 | 0x00000000
	r4 = Mem0[r2 + 212:word32]
	r12 = lr
	r4 = Mem0[r4 + 0:word32]
	r27 = r3 | 0x00000000
	cr1 = cond(r4 - 0x00000000)
	r29 = r5 | 0x00000000
	Mem0[r1 + 608:word32] = r12
	branch Test(EQ,cr1) l00402AB0
	// succ:  l00402A50 l00402AB0
l00402A50:
	r31 = Mem0[r2 + 72:word32]
	r4 = Mem0[r31 + 76:word32]
	r4 = r4 & 0x0000010C
	cr0 = cond(r4)
	branch Test(NE,cr0) l00402A7C
	// succ:  l00402A60 l00402A7C
l00402A60:
	r4 = r31 + 64
	r3 = r4 | 0x00000000
	r4 = 0
	r5 = 4
	r6 = 0
	call fn00403450 (retsize: 0;)
	r0 = r0 | 0x00000000
	// succ:  l00402A7C
l00402A7C:
	r4 = Mem0[r2 + 216:word32]
	r5 = r27 | 0x00000000
	r6 = r28 | 0x00000000
	r7 = r29 | 0x00000000
	r30 = r31 + 64
	r3 = r30 | 0x00000000
	r4 = r4
	call fn004033C4 (retsize: 0;)
	r0 = r0 | 0x00000000
	r3 = r30 | 0x00000000
	call fn004011FC (retsize: 0;)
	r0 = r0 | 0x00000000
	goto l00402B84
	// succ:  l00402B84
l00402AB0:
	r31 = r1 + 56
	r4 = r31 | 0x00000000
	r3 = 0x61640000
	r3 = r3 | 0x00006472
	call fn00403F9C (retsize: 0;)
	r2 = Mem0[r1 + 20:word32]
	cr1 = cond(r3 - 0)
	branch Test(NE,cr1) l00402B04
	// succ:  l00402AD0 l00402B04
l00402AD0:
	r3 = r31 | 0x00000000
	r4 = 29
	call fn00403FB4 (retsize: 0;)
	r2 = Mem0[r1 + 20:word32]
	cr1 = cond(r3 - 0x00000000)
	branch Test(NE,cr1) l00402AF4
	// succ:  l00402AE8 l00402AF4
l00402AE8:
	r11 = Mem0[0x00000120:word32]
	r11 = r11 & 0x000000FF
	cr0 = cond(r11)
	goto l00402B04
	// succ:  l00402B04
l00402AF4:
	r11 = (word32) Mem0[0x00000BFF:byte]
	v21 = (int8) r11
	r11 = (int32) v21
	r11 = r11 & 0x000000FF
	cr0 = cond(r11)
	// succ:  l00402B04
l00402B04:
	r11 = r11 & 0x00000020
	cr0 = cond(r11)
	branch Test(EQ,cr0) l00402B4C
	// succ:  l00402B0C l00402B4C
l00402B0C:
	r4 = Mem0[r2 + 216:word32]
	r5 = r27 | 0x00000000
	r6 = r28 | 0x00000000
	r7 = r29 | 0x00000000
	r31 = r1 + 64
	r3 = r31 | 0x00000000
	r4 = r4
	call fn004032FC (retsize: 0;)
	r0 = r0 | 0x00000000
	r3 = r31 | 0x00000000
	call fn004032AC (retsize: 0;)
	r0 = r0 | 0x00000000
	r3 = r31 | 0x00000000
	call fn00403FCC (retsize: 0;)
	r2 = Mem0[r1 + 20:word32]
	goto l00402B84
	// succ:  l00402B84
l00402B4C:
	r4 = Mem0[r2 + 216:word32]
	r5 = r27 | 0x00000000
	r6 = r28 | 0x00000000
	r7 = r29 | 0x00000000
	r31 = r1 + 64
	r3 = r31 | 0x00000000
	r4 = r4
	call fn004032FC (retsize: 0;)
	r0 = r0 | 0x00000000
	r5 = r3 | 0x00000000
	r4 = r31 | 0x00000000
	r3 = 2
	call fn00402248 (retsize: 0;)
	r0 = r0 | 0x00000000
	// succ:  l00402B84
l00402B84:
	call fn0040326C (retsize: 0;)
	r0 = r0 | 0x00000000
	r12 = Mem0[r1 + 608:word32]
	v22 = r1 + 576
	r27 = Mem0[v22:word32]
	v22 = v22 + 4
	r28 = Mem0[v22:word32]
	v22 = v22 + 4
	r29 = Mem0[v22:word32]
	v22 = v22 + 4
	r30 = Mem0[v22:word32]
	v22 = v22 + 4
	r31 = Mem0[v22:word32]
	v22 = v22 + 4
	lr = r12
	r1 = r1 + 600
	return
	// succ:  fn00402A24_exit
fn00402A24_exit:


// fn00402BA0
// Return size: 0
define fn00402BA0
fn00402BA0_entry:
	// succ:  l00402BA0
l00402BA0:
	r1 = fp
	cr1 = cond(r3 - 0x00000000)
	r12 = lr
	Mem0[r1 + -64:word32] = r1
	r1 = r1 + -64
	Mem0[r1 + 72:word32] = r12
	Mem0[v7:word32] = r30
	v7 = v7 + 4
	Mem0[v7:word32] = r31
	v7 = v7 + 4
	branch Test(EQ,cr1) l00402C38
	// succ:  l00402BB8 l00402C38
l00402BB8:
	r31 = Mem0[r3 + -8:word32]
	r3 = r3 + -8
	r30 = -4
	r4 = Mem0[r31 + 4:word32]
	r4 = r4 & r30
	cr1 = cond(r4 - r3)
	branch Test(EQ,cr1) l00402BD8
	// succ:  l00402BD0 l00402BD8
l00402BD0:
	call fn00401AB4 (retsize: 0;)
	r0 = r0 | 0x00000000
	// succ:  l00402BD8
l00402BD8:
	r4 = Mem0[r31 + 4:word32]
	r10 = Mem0[r2 + 220:word32]
	r5 = -3
	r4 = r4 & r5
	r11 = r4 | 0x00000001
	Mem0[r31 + 4:word32] = r11
	r10 = Mem0[r10 + 0:word32]
	r6 = -1
	cr1 = cond(r10 - r6)
	branch Test(EQ,cr1) l00402C38
	// succ:  l00402C00 l00402C38
l00402C00:
	r9 = Mem0[r2 + 104:word32]
	r4 = Mem0[r9 + 4:word32]
	r4 = Mem0[r4 + 4:word32]
	cr1 = cond(r4 - r11)
	branch Test(LE,cr1) l00402C38
	// succ:  l00402C14 l00402C38
l00402C14:
	r4 = Mem0[r31 + 0:word32]
	r11 = r11 & r30
	r4 = Mem0[r4 + 4:word32]
	r30 = r4 & r30
	r30 = r30 - r11
	r30 = r30 + -8
	cr1 = cond(r30 - r10)
	branch Test(LT,cr1) l00402C38
	// succ:  l00402C34 l00402C38
l00402C34:
	Mem0[r9 + 4:word32] = r31
	// succ:  l00402C38
l00402C38:
	r12 = Mem0[r1 + 72:word32]
	v12 = r1 + 56
	r30 = Mem0[v12:word32]
	v12 = v12 + 4
	r31 = Mem0[v12:word32]
	v12 = v12 + 4
	lr = r12
	r1 = r1 + 64
	return
	// succ:  fn00402BA0_exit
fn00402BA0_exit:


// fn00402C4C
// Return size: 0
define fn00402C4C
fn00402C4C_entry:
	// succ:  l00402C4C
l00402C4C:
	r1 = fp
	r12 = lr
	Mem0[r1 + -64:word32] = r1
	r1 = r1 + -64
	Mem0[r1 + 72:word32] = r12
	Mem0[r1 + 56:word32] = r31
	r31 = r3 | 0x00000000
	call fn004035CC (retsize: 0;)
	r0 = r0 | 0x00000000
	r3 = r31 | 0x00000000
	call fn00403618 (retsize: 0;)
	r0 = r0 | 0x00000000
	r11 = Mem0[r2 + 224:word32]
	r3 = 255
	r12 = Mem0[r11 + 0:word32]
	call fn00403F10 (retsize: 0;)
	r2 = Mem0[r1 + 20:word32]
	r12 = Mem0[r1 + 72:word32]
	r31 = Mem0[r1 + 56:word32]
	lr = r12
	r1 = r1 + 64
	return
	// succ:  fn00402C4C_exit
fn00402C4C_exit:


// fn00402CE0
// Return size: 0
define fn00402CE0
fn00402CE0_entry:
	// succ:  l00402CE0
l00402CE0:
	r1 = fp
	r12 = lr
	Mem0[r1 + -112:word32] = r1
	r1 = r1 + -112
	Mem0[v5:word32] = r26
	v5 = v5 + 4
	Mem0[v5:word32] = r27
	v5 = v5 + 4
	Mem0[v5:word32] = r28
	v5 = v5 + 4
	Mem0[v5:word32] = r29
	v5 = v5 + 4
	Mem0[v5:word32] = r30
	v5 = v5 + 4
	Mem0[v5:word32] = r31
	v5 = v5 + 4
	r26 = r3 | 0x00000000
	r27 = r4 | 0x00000000
	Mem0[r1 + 120:word32] = r12
	r31 = r1 + 56
	r5 = r31 | 0x00000000
	Mem0[r1 + 72:word32] = r5
	r4 = 0
	Mem0[r31 + 0:word32] = r4
	Mem0[r31 + 4:word32] = r4
	Mem0[r31 + 8:word32] = r4
	Mem0[r31 + 12:word32] = r4
	call fn004019CC (retsize: 0;)
	r0 = r0 | 0x00000000
	r4 = r3 | 0x00000000
	cr1 = cond(r4 - 0x00000000)
	Mem0[r31 + 0:word32] = r3
	branch Test(EQ,cr1) l00403014
	// succ:  l00402D30 l00403014
l00402D30:
	call fn004019CC (retsize: 0;)
	r0 = r0 | 0x00000000
	r4 = r3 | 0x00000000
	cr1 = cond(r4 - 0x00000000)
	Mem0[r31 + 4:word32] = r3
	branch Test(EQ,cr1) l00403014
	// succ:  l00402D48 l00403014
l00402D48:
	call fn004019CC (retsize: 0;)
	r0 = r0 | 0x00000000
	r4 = r3 | 0x00000000
	cr1 = cond(r4 - 0x00000000)
	Mem0[r31 + 8:word32] = r3
	branch Test(EQ,cr1) l00403014
	// succ:  l00402D60 l00403014
l00402D60:
	r3 = r26 | 0x00000000
	r29 = r1 + 76
	r4 = r29 | 0x00000000
	call fn004036B0 (retsize: 0;)
	r0 = r0 | 0x00000000
	cr1 = cond(r3 - 0)
	branch Test(NE,cr1) l00402D9C
	// succ:  l00402D7C l00402D9C
l00402D7C:
	r4 = Mem0[r1 + 76:word32]
	r4 = Mem0[r4 + 4:word32]
	r4 = r4 & 0x00000003
	cr0 = cond(r4)
	cr1 = cond(r4 - 0x00000002)
	branch Test(NE,cr1) l00403014
	// succ:  l00402D90 l00403014
l00402D90:
	r4 = Mem0[r1 + 76:word32]
	r30 = r4 | 0x00000000
	goto l00402DB0
	// succ:  l00402DB0
l00402D9C:
	r4 = Mem0[r1 + 72:word32]
	r5 = Mem0[r4 + 0:word32]
	r4 = r4 + 4
	Mem0[r1 + 72:word32] = r4
	r30 = r5 | 0x00000000
	// succ:  l00402DB0
l00402DB0:
	r11 = r3 + 3
	cr1 = cond(r11 - 0x00000004)
	Mem0[r30 + 4:word32] = r26
	r4 = -3
	r4 = r26 & r4
	r4 = r4 | 0x00000001
	Mem0[r30 + 4:word32] = r4
	Mem0[r26 + 0:word32] = r30
	branch Test(GE,cr1) l00402DFC
	// succ:  l00402DD4 l00402DFC
l00402DD4:
	r11 = r11 << 0x02
	call fn00402DEC (retsize: 0;)
	goto l00402E94
	// succ:  l00402E94
l00402DFC:
	r4 = Mem0[r1 + 76:word32]
	r4 = Mem0[r4 + 4:word32]
	r4 = r4 & 0x00000003
	cr0 = cond(r4)
	cr1 = cond(r4 - 0x00000002)
	branch Test(NE,cr1) l00403014
	// succ:  l00402E10 l00403014
l00402E10:
	r4 = Mem0[r1 + 76:word32]
	r31 = Mem0[r2 + 104:word32]
	r5 = Mem0[r4 + 0:word32]
	r6 = r31 + 12
	cr1 = cond(r5 - r6)
	branch Test(NE,cr1) l00402E4C
	// succ:  l00402E28 l00402E4C
l00402E28:
	r4 = Mem0[r30 + 4:word32]
	r6 = Mem0[r31 + 16:word32]
	r29 = -4
	r4 = r4 & r29
	r11 = r4 + r27
	cr1 = cond(r6 - r11)
	branch Test(GE,cr1) l00402E50
	// succ:  l00402E44 l00402E50
l00402E44:
	Mem0[r31 + 16:word32] = r11
	goto l00402E50
	// succ:  l00402E50
l00402E4C:
	r29 = -4
	// succ:  l00402E50
l00402E50:
	r3 = r30 | 0x00000000
	r4 = r27 | 0x00000000
	r28 = r1 + 72
	r6 = r28 | 0x00000000
	call fn00403070 (retsize: 0;)
	r4 = Mem0[r1 + 76:word32]
	r5 = Mem0[r4 + 0:word32]
	r6 = Mem0[r4 + 4:word32]
	r5 = Mem0[r5 + 4:word32]
	r3 = r4 | 0x00000000
	r5 = r5 & r29
	r6 = r6 & r29
	r4 = r5 - r6
	r5 = r30 | 0x00000000
	r6 = r28 | 0x00000000
	call fn00403070 (retsize: 0;)
	goto l00402FB8
	// succ:  l00402FB8
l00402E94:
	r4 = r1 + 72
	Mem0[r1 + 80:word32] = r4
	r31 = Mem0[r2 + 104:word32]
	r6 = Mem0[r1 + 80:word32]
	r3 = r30 | 0x00000000
	r4 = r27 | 0x00000000
	r5 = r27 + r26
	Mem0[r31 + 16:word32] = r5
	r5 = r31 + 12
	call fn00403070 (retsize: 0;)
	Mem0[r31 + 4:word32] = r30
	Mem0[r31 + 0:word32] = r30
	r29 = -4
	// succ:  l00402FB8
l00402FB8:
	r4 = Mem0[r31 + 4:word32]
	r4 = Mem0[r4 + 4:word32]
	r4 = r4 & r29
	cr1 = cond(r4 - r26)
	branch Test(LE,cr1) l00402FFC
	// succ:  l00402FCC l00402FFC
l00402FCC:
	r4 = Mem0[r30 + 0:word32]
	r5 = Mem0[r2 + 220:word32]
	r4 = Mem0[r4 + 4:word32]
	r6 = Mem0[r30 + 4:word32]
	r5 = Mem0[r5 + 0:word32]
	r4 = r4 & r29
	r29 = r6 & r29
	r4 = r4 - r29
	r4 = r4 + -8
	cr1 = cond(r4 - r5)
	branch Test(LT,cr1) l00402FFC
	// succ:  l00402FF8 l00402FFC
l00402FF8:
	Mem0[r31 + 4:word32] = r30
	// succ:  l00402FFC
l00402FFC:
	r12 = Mem0[r1 + 120:word32]
	v23 = r1 + 84
	r26 = Mem0[v23:word32]
	v23 = v23 + 4
	r27 = Mem0[v23:word32]
	v23 = v23 + 4
	r28 = Mem0[v23:word32]
	v23 = v23 + 4
	r29 = Mem0[v23:word32]
	v23 = v23 + 4
	r30 = Mem0[v23:word32]
	v23 = v23 + 4
	r31 = Mem0[v23:word32]
	v23 = v23 + 4
	lr = r12
	r1 = r1 + 112
	r3 = 0
	return
	// succ:  fn00402CE0_exit
l00403014:
	r4 = Mem0[r1 + 72:word32]
	r11 = Mem0[r4 + 0:word32]
	cr1 = cond(r11 - 0x00000000)
	branch Test(EQ,cr1) l00403058
	// succ:  l00403024 l00403058
l00403024:
	r4 = Mem0[r2 + 104:word32]
	r10 = r4 + 8
	// succ:  l0040302C
l0040302C:
	r4 = Mem0[r10 + 0:word32]
	Mem0[r11 + 0:word32] = r4
	r5 = Mem0[r1 + 72:word32]
	r11 = Mem0[r5 + 0:word32]
	r5 = r5 + 4
	Mem0[r1 + 72:word32] = r5
	r6 = Mem0[r1 + 72:word32]
	Mem0[r10 + 0:word32] = r11
	r11 = Mem0[r6 + 0:word32]
	cr1 = cond(r11 - 0x00000000)
	branch Test(NE,cr1) l0040302C
	// succ:  l00403058 l0040302C
l00403058:
	r12 = Mem0[r1 + 120:word32]
	v22 = r1 + 84
	r26 = Mem0[v22:word32]
	v22 = v22 + 4
	r27 = Mem0[v22:word32]
	v22 = v22 + 4
	r28 = Mem0[v22:word32]
	v22 = v22 + 4
	r29 = Mem0[v22:word32]
	v22 = v22 + 4
	r30 = Mem0[v22:word32]
	v22 = v22 + 4
	r31 = Mem0[v22:word32]
	v22 = v22 + 4
	lr = r12
	r1 = r1 + 112
	r3 = -1
	return
	// succ:  fn00402CE0_exit
fn00402CE0_exit:


// fn00402DEC
// Return size: 0
define fn00402DEC
fn00402DEC_entry:
	// succ:  l00402DEC
l00402DEC:
	r1 = fp
	r0 = lr
	r0 = r0 + r11
	lr = r0
	return
	// succ:  fn00402DEC_exit
fn00402DEC_exit:


// fn00403070
// Return size: 0
define fn00403070
fn00403070_entry:
	// succ:  l00403070
l00403070:
	r1 = fp
	r9 = Mem0[r3 + 4:word32]
	r7 = r9 & 0x00000003
	cr0 = cond(r7)
	cr1 = cond(r7 - 0x00000002)
	branch Test(EQ,cr1) l004030FC
	// succ:  l00403080 l004030FC
l00403080:
	r10 = Mem0[r5 + 4:word32]
	r7 = r10 & 0x00000003
	cr0 = cond(r7)
	cr1 = cond(r7 - 0x00000002)
	branch Test(NE,cr1) l004030B4
	// succ:  l00403090 l004030B4
l00403090:
	r6 = -4
	r9 = r9 & r6
	r4 = r9 + r4
	Mem0[r5 + 4:word32] = r4
	r7 = -2
	r4 = r4 & r7
	r4 = r4 | 0x00000002
	Mem0[r5 + 4:word32] = r4
	goto l004030FC
	// succ:  l004030FC
l004030B4:
	r7 = -4
	r9 = r9 & r7
	r4 = r9 + r4
	r10 = r10 & r7
	r11 = r4 | 0x00000000
	cr1 = cond(r10 - r11)
	branch Test(EQ,cr1) l004030FC
	// succ:  l004030D0 l004030FC
l004030D0:
	r4 = Mem0[r6 + 0:word32]
	r7 = -2
	r8 = Mem0[r4 + 0:word32]
	r7 = r11 & r7
	r4 = r4 + 4
	Mem0[r6 + 0:word32] = r4
	Mem0[r8 + 4:word32] = r11
	r7 = r7 | 0x00000002
	Mem0[r8 + 4:word32] = r7
	Mem0[r3 + 0:word32] = r8
	r3 = r8 | 0x00000000
	// succ:  l004030FC
l004030FC:
	Mem0[r3 + 0:word32] = r5
	return
	// succ:  fn00403070_exit
fn00403070_exit:


// fn00403104
// Return size: 0
define fn00403104
fn00403104_entry:
	// succ:  l00403104
l00403104:
	r1 = fp
	r4 = Mem0[r2 + 164:word32]
	r8 = Mem0[r2 + 228:word32]
	v7 = (int16) r3
	r3 = (int32) v7
	r8 = r8
	r9 = r8 + 184
	r5 = r3 | 0x00000000
	Mem0[r4 + 0:word32] = r5
	r10 = 0
	r11 = r8 | 0x00000000
	// succ:  l00403128
l00403128:
	r4 = (int32) Mem0[r11 + 0:int16]
	cr1 = cond(r4 - r3)
	branch Test(EQ,cr1) l00403148
	// succ:  l00403134 l00403148
l00403134:
	r11 = r11 + 4
	cr1 = cond(r11 - r9)
	r10 = r10 + 1
	branch Test(LT,cr1) l00403128
	// succ:  l00403144 l00403128
l00403144:
	goto l00403160
	// succ:  l00403160
l00403148:
	r10 = r10 << 0x02
	r8 = r8 + 2
	r8 = (word32) Mem0[r8 + r10:word16]
	r4 = Mem0[r2 + 124:word32]
	Mem0[r4 + 0:word32] = r8
	goto l0040316C
	// succ:  l0040316C
l00403160:
	r4 = Mem0[r2 + 124:word32]
	r5 = 22
	Mem0[r4 + 0:word32] = r5
	// succ:  l0040316C
l0040316C:
	return
	// succ:  fn00403104_exit
fn00403104_exit:


// fn00403170
// Return size: 0
define fn00403170
fn00403170_entry:
	// succ:  l00403170
l00403170:
	r1 = fp
	Mem0[r1 + -64:word32] = r1
	r1 = r1 + -64
	Mem0[v3:word32] = r30
	v3 = v3 + 4
	Mem0[v3:word32] = r31
	v3 = v3 + 4
	r31 = r3 | 0x00000000
	r11 = Mem0[r31 + 12:word32]
	r12 = lr
	r4 = r11 & 0x00000040
	cr0 = cond(r4)
	Mem0[r1 + 72:word32] = r12
	r30 = -1
	branch Test(EQ,cr0) l004031AC
	// succ:  l00403194 l004031AC
l00403194:
	r4 = 0
	Mem0[r31 + 12:word32] = r4
	v12 = r1 + 56
	r30 = Mem0[v12:word32]
	v12 = v12 + 4
	r31 = Mem0[v12:word32]
	v12 = v12 + 4
	r1 = r1 + 64
	r3 = -1
	return
	// succ:  fn00403170_exit
l004031AC:
	r11 = r11 & 0x00000083
	cr0 = cond(r11)
	branch Test(EQ,cr0) l00403228
	// succ:  l004031B4 l00403228
l004031B4:
	r3 = r31 | 0x00000000
	call fn004012B0 (retsize: 0;)
	r0 = r0 | 0x00000000
	r30 = r3 | 0x00000000
	r3 = r31 | 0x00000000
	call fn00403A0C (retsize: 0;)
	r0 = r0 | 0x00000000
	r3 = Mem0[r31 + 16:word32]
	call fn00403898 (retsize: 0;)
	r0 = r0 | 0x00000000
	cr1 = cond(r3 - 0)
	branch Test(GE,cr1) l004031F0
	// succ:  l004031E4 l004031F0
l004031E4:
	r30 = -1
	r11 = 0
	goto l0040322C
	// succ:  l0040322C
l004031F0:
	r3 = Mem0[r31 + 28:word32]
	cr1 = cond(r3 - 0x00000000)
	branch Test(EQ,cr1) l00403228
	// succ:  l004031FC l00403228
l004031FC:
	call fn00403744 (retsize: 0;)
	r0 = r0 | 0x00000000
	cr1 = cond(r3 - 0)
	branch Test(EQ,cr1) l00403210
	// succ:  l0040320C l00403210
l0040320C:
	r30 = -1
	// succ:  l00403210
l00403210:
	r3 = Mem0[r31 + 28:word32]
	call fn00402BA0 (retsize: 0;)
	r0 = r0 | 0x00000000
	r11 = 0
	Mem0[r31 + 28:word32] = r11
	goto l0040322C
	// succ:  l0040322C
l00403228:
	r11 = 0
	// succ:  l0040322C
l0040322C:
	r12 = Mem0[r1 + 72:word32]
	r3 = r30 | 0x00000000
	lr = r12
	Mem0[r31 + 12:word32] = r11
	v15 = r1 + 56
	r30 = Mem0[v15:word32]
	v15 = v15 + 4
	r31 = Mem0[v15:word32]
	v15 = v15 + 4
	r1 = r1 + 64
	return
	// succ:  fn00403170_exit
fn00403170_exit:


// fn00403248
// Return size: 0
define fn00403248
fn00403248_entry:
	// succ:  l00403248
l00403248:
	r1 = fp
	r12 = lr
	Mem0[r1 + -56:word32] = r1
	r1 = r1 + -56
	Mem0[r1 + 64:word32] = r12
	call fn00403F84 (retsize: 0;)
	r2 = Mem0[r1 + 20:word32]
	r12 = Mem0[r1 + 64:word32]
	r1 = r1 + 56
	lr = r12
	return
	// succ:  fn00403248_exit
fn00403248_exit:


// fn0040326C
// Return size: 0
define fn0040326C
fn0040326C_entry:
	// succ:  l0040326C
l0040326C:
	r1 = fp
	r12 = lr
	Mem0[r1 + -56:word32] = r1
	r1 = r1 + -56
	Mem0[r1 + 64:word32] = r12
	r3 = 10
	call fn00403618 (retsize: 0;)
	r0 = r0 | 0x00000000
	r3 = 22
	call fn00403B08 (retsize: 0;)
	r0 = r0 | 0x00000000
	r3 = 3
	call fn004035A0 (retsize: 0;)
	r0 = r0 | 0x00000000
	r12 = Mem0[r1 + 64:word32]
	r1 = r1 + 56
	lr = r12
	return
	// succ:  fn0040326C_exit
fn0040326C_exit:


// fn004032AC
// Return size: 0
define fn004032AC
fn004032AC_entry:
	// succ:  l004032AC
l004032AC:
	r1 = fp
	cr1 = cond(r3 - 0x00000000)
	branch Test(EQ,cr1) l004032F8
	// succ:  l004032B4 l004032F8
l004032B4:
	r4 = (word32) Mem0[r3 + 0:byte]
	v6 = (int8) r4
	r4 = (int32) v6
	cr0 = cond(r4)
	branch Test(EQ,cr0) l004032F8
	// succ:  l004032C0 l004032F8
l004032C0:
	r11 = r3 | 0x00000000
	r10 = (word32) Mem0[r3 + 0:byte]
	// succ:  l004032C8
l004032C8:
	r4 = (word32) Mem0[r11 + 1:byte]
	r11 = r11 + 1
	Mem0[r11 + 0:byte] = (byte) r10
	cr1 = cond(r4 - 0x00000000)
	r10 = r4 | 0x00000000
	branch Test(NE,cr1) l004032C8
	// succ:  l004032DC l004032C8
l004032DC:
	r10 = r11 - r3
	cr1 = cond(r10 - 255)
	r9 = 255
	branch Test(GE,cr1) l004032F0
	// succ:  l004032EC l004032F0
l004032EC:
	r9 = r10 | 0x00000000
	// succ:  l004032F0
l004032F0:
	v11 = (int8) r9
	r9 = (int32) v11
	Mem0[r3 + 0:byte] = (byte) r9
	// succ:  l004032F8
l004032F8:
	return
	// succ:  fn004032AC_exit
fn004032AC_exit:


// fn004032FC
// Return size: 0
define fn004032FC
fn004032FC_entry:
	// succ:  l004032FC
l004032FC:
	r1 = fp
	r12 = lr
	Mem0[r1 + 24:word32] = r3
	Mem0[r1 + 32:word32] = r5
	Mem0[r1 + 36:word32] = r6
	Mem0[r1 + 40:word32] = r7
	Mem0[r1 + 28:word32] = r4
	Mem0[r1 + 44:word32] = r8
	Mem0[r1 + 48:word32] = r9
	Mem0[r1 + 52:word32] = r10
	Mem0[r1 + -96:word32] = r1
	r1 = r1 + -96
	Mem0[r1 + 104:word32] = r12
	Mem0[v13:word32] = r30
	v13 = v13 + 4
	Mem0[v13:word32] = r31
	v13 = v13 + 4
	Mem0[r1 + 124:word32] = r4
	r31 = r1 + 56
	Mem0[r31 + 8:word32] = r3
	Mem0[r31 + 0:word32] = r3
	r3 = r31 | 0x00000000
	r5 = r1 + 124
	r5 = r5 + 4
	r6 = 66
	Mem0[r31 + 12:word32] = r6
	r7 = 0x7FFF0000
	r7 = r7 | 0x0000FFFF
	Mem0[r31 + 4:word32] = r7
	call fn004004B4 (retsize: 0;)
	r0 = r0 | 0x00000000
	r4 = Mem0[r31 + 4:word32]
	r30 = r3 | 0x00000000
	r4 = r4 + -1
	r5 = r4 | 0x00000000
	cr1 = cond(r5 - -1)
	Mem0[r31 + 4:word32] = r4
	branch Test(LE,cr1) l0040339C
	// succ:  l00403380 l0040339C
l00403380:
	r4 = Mem0[r31 + 0:word32]
	r5 = 0
	Mem0[r4 + 0:byte] = (byte) r5
	r6 = Mem0[r31 + 0:word32]
	r6 = r6 + 1
	Mem0[r31 + 0:word32] = r6
	goto l004033AC
	// succ:  l004033AC
l0040339C:
	r4 = r31 | 0x00000000
	r3 = 0
	call fn00401598 (retsize: 0;)
	r0 = r0 | 0x00000000
	// succ:  l004033AC
l004033AC:
	r12 = Mem0[r1 + 104:word32]
	r3 = r30 | 0x00000000
	lr = r12
	v18 = r1 + 88
	r30 = Mem0[v18:word32]
	v18 = v18 + 4
	r31 = Mem0[v18:word32]
	v18 = v18 + 4
	r1 = r1 + 96
	return
	// succ:  fn004032FC_exit
fn004032FC_exit:


// fn004033C4
// Return size: 0
define fn004033C4
fn004033C4_entry:
	// succ:  l004033C4
l004033C4:
	r1 = fp
	r12 = lr
	Mem0[r1 + 24:word32] = r3
	Mem0[r1 + 28:word32] = r4
	Mem0[r1 + 32:word32] = r5
	Mem0[r1 + 36:word32] = r6
	Mem0[r1 + 40:word32] = r7
	Mem0[r1 + 44:word32] = r8
	Mem0[r1 + 48:word32] = r9
	Mem0[r1 + 52:word32] = r10
	Mem0[r1 + -72:word32] = r1
	r1 = r1 + -72
	Mem0[r1 + 80:word32] = r12
	Mem0[v13:word32] = r29
	v13 = v13 + 4
	Mem0[v13:word32] = r30
	v13 = v13 + 4
	Mem0[v13:word32] = r31
	v13 = v13 + 4
	r31 = r3 | 0x00000000
	r3 = r31 | 0x00000000
	Mem0[r1 + 100:word32] = r4
	call fn004002F8 (retsize: 0;)
	r0 = r0 | 0x00000000
	r4 = Mem0[r1 + 100:word32]
	r30 = r3 | 0x00000000
	r3 = r31 | 0x00000000
	r5 = r1 + 100
	r5 = r5 + 4
	call fn004004B4 (retsize: 0;)
	r0 = r0 | 0x00000000
	r29 = r3 | 0x00000000
	r3 = r30 | 0x00000000
	r4 = r31 | 0x00000000
	call fn00400430 (retsize: 0;)
	r0 = r0 | 0x00000000
	r12 = Mem0[r1 + 80:word32]
	r3 = r29 | 0x00000000
	lr = r12
	v18 = r1 + 56
	r29 = Mem0[v18:word32]
	v18 = v18 + 4
	r30 = Mem0[v18:word32]
	v18 = v18 + 4
	r31 = Mem0[v18:word32]
	v18 = v18 + 4
	r1 = r1 + 72
	return
	// succ:  fn004033C4_exit
fn004033C4_exit:


// fn00403450
// Return size: 0
define fn00403450
fn00403450_entry:
	// succ:  l00403450
l00403450:
	r1 = fp
	Mem0[r1 + -80:word32] = r1
	r1 = r1 + -80
	Mem0[v3:word32] = r27
	v3 = v3 + 4
	Mem0[v3:word32] = r28
	v3 = v3 + 4
	Mem0[v3:word32] = r29
	v3 = v3 + 4
	Mem0[v3:word32] = r30
	v3 = v3 + 4
	Mem0[v3:word32] = r31
	v3 = v3 + 4
	r30 = r5 | 0x00000000
	cr1 = cond(r30 - 4)
	r12 = lr
	r31 = r3 | 0x00000000
	r29 = r4 | 0x00000000
	r28 = r6 | 0x00000000
	Mem0[r1 + 88:word32] = r12
	r27 = 0
	branch Test(EQ,cr1) l004034B4
	// succ:  l0040347C l004034B4
l0040347C:
	cr1 = cond(r28 - 0x00000000)
	branch Test(EQ,cr1) l004034A4
	// succ:  l00403484 l004034A4
l00403484:
	r4 = 0x7FFF0000
	r4 = r4 | 0x0000FFFF
	cr1 = cond(r28 - r4)
	branch Test(GT,cr1) l004034A4
	// succ:  l00403494 l004034A4
l00403494:
	cr1 = cond(r30 - 0)
	branch Test(EQ,cr1) l004034B4
	// succ:  l0040349C l004034B4
l0040349C:
	cr1 = cond(r30 - 64)
	branch Test(EQ,cr1) l004034B4
	// succ:  l004034A4 l004034B4
l004034A4:
	v16 = r1 + 56
	r27 = Mem0[v16:word32]
	v16 = v16 + 4
	r28 = Mem0[v16:word32]
	v16 = v16 + 4
	r29 = Mem0[v16:word32]
	v16 = v16 + 4
	r30 = Mem0[v16:word32]
	v16 = v16 + 4
	r31 = Mem0[v16:word32]
	v16 = v16 + 4
	r1 = r1 + 80
	r3 = -1
	return
	// succ:  fn00403450_exit
l004034B4:
	r3 = r31 | 0x00000000
	call fn004012B0 (retsize: 0;)
	r0 = r0 | 0x00000000
	r3 = r31 | 0x00000000
	call fn00403A0C (retsize: 0;)
	r0 = r0 | 0x00000000
	r30 = r30 & 0x00000004
	cr0 = cond(r30)
	r11 = Mem0[r31 + 12:word32]
	r4 = -14605
	r11 = r11 & r4
	Mem0[r31 + 12:word32] = r11
	branch Test(EQ,cr0) l004034F8
	// succ:  l004034E4 l004034F8
l004034E4:
	r11 = r11 | 0x00000004
	Mem0[r31 + 12:word32] = r11
	r29 = r31 + 20
	r28 = 1
	goto l00403548
	// succ:  l00403548
l004034F8:
	cr1 = cond(r29 - 0x00000000)
	branch Test(NE,cr1) l00403540
	// succ:  l00403500 l00403540
l00403500:
	r3 = r28 | 0x00000000
	call fn00400F9C (retsize: 0;)
	r0 = r0 | 0x00000000
	r29 = r3 | 0x00000000
	cr1 = cond(r29 - 0x00000000)
	branch Test(NE,cr1) l00403530
	// succ:  l00403518 l00403530
l00403518:
	r4 = Mem0[r2 + 76:word32]
	r27 = -1
	r5 = Mem0[r4 + 0:word32]
	r5 = r5 + 1
	Mem0[r4 + 0:word32] = r5
	goto l0040355C
	// succ:  l0040355C
l00403530:
	r4 = Mem0[r31 + 12:word32]
	r4 = r4 | 0x00000008
	Mem0[r31 + 12:word32] = r4
	goto l00403548
	// succ:  l00403548
l00403540:
	r11 = r11 | 0x00000100
	Mem0[r31 + 12:word32] = r11
	// succ:  l00403548
l00403548:
	Mem0[r31 + 8:word32] = r29
	Mem0[r31 + 24:word32] = r28
	Mem0[r31 + 0:word32] = r29
	r4 = 0
	Mem0[r31 + 4:word32] = r4
	// succ:  l0040355C
l0040355C:
	r12 = Mem0[r1 + 88:word32]
	r3 = r27 | 0x00000000
	lr = r12
	v20 = r1 + 56
	r27 = Mem0[v20:word32]
	v20 = v20 + 4
	r28 = Mem0[v20:word32]
	v20 = v20 + 4
	r29 = Mem0[v20:word32]
	v20 = v20 + 4
	r30 = Mem0[v20:word32]
	v20 = v20 + 4
	r31 = Mem0[v20:word32]
	v20 = v20 + 4
	r1 = r1 + 80
	return
	// succ:  fn00403450_exit
fn00403450_exit:


// fn00403574
// Return size: 0
define fn00403574
fn00403574_entry:
	// succ:  l00403574
l00403574:
	r1 = fp
	r12 = lr
	Mem0[r1 + -56:word32] = r1
	r1 = r1 + -56
	Mem0[r1 + 64:word32] = r12
	r4 = 0
	r5 = 0
	call fn004024F0 (retsize: 0;)
	r0 = r0 | 0x00000000
	r12 = Mem0[r1 + 64:word32]
	r1 = r1 + 56
	lr = r12
	return
	// succ:  fn00403574_exit
fn00403574_exit:


// fn004035A0
// Return size: 0
define fn004035A0
fn004035A0_entry:
	// succ:  l004035A0
l004035A0:
	r1 = fp
	r12 = lr
	Mem0[r1 + -56:word32] = r1
	r1 = r1 + -56
	Mem0[r1 + 64:word32] = r12
	r4 = 1
	r5 = 0
	call fn004024F0 (retsize: 0;)
	r0 = r0 | 0x00000000
	r12 = Mem0[r1 + 64:word32]
	r1 = r1 + 56
	lr = r12
	return
	// succ:  fn004035A0_exit
fn004035A0_exit:


// fn004035CC
// Return size: 0
define fn004035CC
fn004035CC_entry:
	// succ:  l004035CC
l004035CC:
	r1 = fp
	r12 = lr
	Mem0[r1 + -56:word32] = r1
	r1 = r1 + -56
	Mem0[r1 + 64:word32] = r12
	r3 = 252
	call fn00403618 (retsize: 0;)
	r4 = Mem0[r2 + 232:word32]
	r4 = Mem0[r4 + 0:word32]
	cr1 = cond(r4 - 0x00000000)
	branch Test(EQ,cr1) l00403600
	// succ:  l004035F0 l00403600
l004035F0:
	r11 = Mem0[r2 + 232:word32]
	r12 = Mem0[r11 + 0:word32]
	call fn00403F10 (retsize: 0;)
	r2 = Mem0[r1 + 20:word32]
	// succ:  l00403600
l00403600:
	r3 = 255
	call fn00403618 (retsize: 0;)
	r12 = Mem0[r1 + 64:word32]
	r1 = r1 + 56
	lr = r12
	return
	// succ:  fn004035CC_exit
fn004035CC_exit:


// fn00403618
// Return size: 0
define fn00403618
fn00403618_entry:
	// succ:  l00403618
l00403618:
	r1 = fp
	r12 = lr
	r8 = Mem0[r2 + 236:word32]
	Mem0[r1 + -64:word32] = r1
	r1 = r1 + -64
	Mem0[r1 + 72:word32] = r12
	r8 = r8
	r9 = r8 + 88
	r10 = 0
	r11 = r8 | 0x00000000
	// succ:  l00403638
l00403638:
	r4 = Mem0[r11 + 0:word32]
	cr1 = cond(r4 - r3)
	branch Test(EQ,cr1) l00403654
	// succ:  l00403644 l00403654
l00403644:
	r11 = r11 + 8
	cr1 = cond(r11 - r9)
	r10 = r10 + 1
	branch Test(LT,cr1) l00403638
	// succ:  l00403654 l00403638
l00403654:
	r11 = r10 << 0x03
	r4 = Mem0[r8 + r11:word32]
	cr1 = cond(r4 - r3)
	branch Test(NE,cr1) l004036A0
	// succ:  l00403664 l004036A0
l00403664:
	r4 = r8 + 4
	r4 = Mem0[r4 + r11:word32]
	r5 = (word32) Mem0[r4 + 0:byte]
	Mem0[r1 + 56:byte] = (byte) r5
	r6 = (word32) Mem0[r1 + 56:byte]
	r5 = 0
	cr1 = cond(r6 - 0)
	branch Test(EQ,cr1) l00403694
	// succ:  l00403684 l00403694
l00403684:
	r5 = r5 + 1
	r6 = (word32) Mem0[r4 + r5:byte]
	cr1 = cond(r6 - 0)
	branch Test(NE,cr1) l00403684
	// succ:  l00403694 l00403684
l00403694:
	r3 = 2
	call fn00402248 (retsize: 0;)
	r0 = r0 | 0x00000000
	// succ:  l004036A0
l004036A0:
	r12 = Mem0[r1 + 72:word32]
	r1 = r1 + 64
	lr = r12
	return
	// succ:  fn00403618_exit
fn00403618_exit:


// fn004036B0
// Return size: 0
define fn004036B0
fn004036B0_entry:
	// succ:  l004036B0
l004036B0:
	r1 = fp
	r10 = Mem0[r2 + 104:word32]
	r11 = Mem0[r10 + 0:word32]
	r5 = r10 + 12
	cr1 = cond(r11 - r5)
	branch Test(NE,cr1) l004036CC
	// succ:  l004036C4 l004036CC
l004036C4:
	r3 = -3
	return
	// succ:  fn004036B0_exit
l004036CC:
	r5 = Mem0[r11 + 4:word32]
	r9 = -4
	r5 = r5 & r9
	cr1 = cond(r5 - r3)
	branch Test(LE,cr1) l004036E8
	// succ:  l004036E0 l004036E8
l004036E0:
	r3 = -1
	return
	// succ:  fn004036B0_exit
l004036E8:
	r10 = Mem0[r10 + 16:word32]
	r10 = r10 & r9
	cr1 = cond(r10 - r3)
	branch Test(GT,cr1) l00403700
	// succ:  l004036F8 l00403700
l004036F8:
	r3 = -2
	return
	// succ:  fn004036B0_exit
l00403700:
	r10 = r11 | 0x00000000
	// succ:  l00403704
l00403704:
	r11 = Mem0[r10 + 0:word32]
	r5 = Mem0[r11 + 4:word32]
	r5 = r5 & r9
	cr1 = cond(r5 - r3)
	branch Test(GT,cr1) l00403720
	// succ:  l00403718 l00403720
l00403718:
	r10 = r11 | 0x00000000
	goto l00403704
	// succ:  l00403704
l00403720:
	Mem0[r4 + 0:word32] = r10
	r10 = Mem0[r10 + 4:word32]
	r11 = 0
	r9 = r10 & r9
	cr1 = cond(r9 - r3)
	branch Test(EQ,cr1) l0040373C
	// succ:  l00403738 l0040373C
l00403738:
	r11 = 1
	// succ:  l0040373C
l0040373C:
	r3 = r11 | 0x00000000
	return
	// succ:  fn004036B0_exit
fn004036B0_exit:


// fn00403744
// Return size: 0
define fn00403744
fn00403744_entry:
	// succ:  l00403744
l00403744:
	r1 = fp
	r4 = (word32) Mem0[r3 + 0:byte]
	r12 = lr
	v7 = (int8) r4
	r4 = (int32) v7
	cr0 = cond(r4)
	Mem0[r1 + -408:word32] = r1
	r1 = r1 + -408
	Mem0[r1 + 416:word32] = r12
	Mem0[v9:word32] = r29
	v9 = v9 + 4
	Mem0[v9:word32] = r30
	v9 = v9 + 4
	Mem0[v9:word32] = r31
	v9 = v9 + 4
	branch Test(EQ,cr0) l00403880
	// succ:  l00403760 l00403880
l00403760:
	r4 = (word32) Mem0[r3 + 0:byte]
	r11 = 0
	cr1 = cond(r4 - 0)
	branch Test(EQ,cr1) l00403780
	// succ:  l00403770 l00403780
l00403770:
	r11 = r11 + 1
	r4 = (word32) Mem0[r3 + r11:byte]
	cr1 = cond(r4 - 0)
	branch Test(NE,cr1) l00403770
	// succ:  l00403780 l00403770
l00403780:
	cr1 = cond(r11 - 0x00000100)
	branch Test(GE,cr1) l00403880
	// succ:  l00403788 l00403880
l00403788:
	r29 = r1 + 56
	r11 = 0
	// succ:  l00403790
l00403790:
	r4 = (word32) Mem0[r3 + r11:byte]
	cr1 = cond(r4 - 0)
	Mem0[r29 + r11:byte] = (byte) r4
	r11 = r11 + 1
	branch Test(NE,cr1) l00403790
	// succ:  l004037A4 l00403790
l004037A4:
	r3 = r29 | 0x00000000
	call fn004032AC (retsize: 0;)
	r0 = r0 | 0x00000000
	r31 = r1 + 312
	r11 = 0
	r9 = 5
	ctr = r9
	r30 = 0
	// succ:  l004037C4
l004037C4:
	Mem0[r31 + r11:word32] = r30
	r11 = r11 + 4
	Mem0[r31 + r11:word32] = r30
	r11 = r11 + 4
	Mem0[r31 + r11:word32] = r30
	r11 = r11 + 4
	Mem0[r31 + r11:word32] = r30
	r11 = r11 + 4
	ctr = ctr - 0x00000001
	branch ctr != 0x00000000 l004037C4
	// succ:  l004037E8 l004037C4
l004037E8:
	r3 = r31 | 0x00000000
	Mem0[r31 + 18:word32] = r29
	call fn00403F54 (retsize: 0;)
	r2 = Mem0[r1 + 20:word32]
	cr1 = cond(r3 - 0)
	branch Test(NE,cr1) l00403840
	// succ:  l00403800 l00403840
l00403800:
	r11 = 0
	r9 = 5
	ctr = r9
	// succ:  l0040380C
l0040380C:
	Mem0[r31 + r11:word32] = r30
	r11 = r11 + 4
	Mem0[r31 + r11:word32] = r30
	r11 = r11 + 4
	Mem0[r31 + r11:word32] = r30
	r11 = r11 + 4
	Mem0[r31 + r11:word32] = r30
	r11 = r11 + 4
	ctr = ctr - 0x00000001
	branch ctr != 0x00000000 l0040380C
	// succ:  l00403830 l0040380C
l00403830:
	r3 = r31 | 0x00000000
	Mem0[r31 + 18:word32] = r29
	call fn00403F6C (retsize: 0;)
	r2 = Mem0[r1 + 20:word32]
	// succ:  l00403840
l00403840:
	cr1 = cond(r3 - 0)
	branch Test(EQ,cr1) l00403868
	// succ:  l00403848 l00403868
l00403848:
	call fn00403104 (retsize: 0;)
	r0 = r0 | 0x00000000
	r12 = Mem0[r1 + 416:word32]
	v20 = r1 + 392
	r29 = Mem0[v20:word32]
	v20 = v20 + 4
	r30 = Mem0[v20:word32]
	v20 = v20 + 4
	r31 = Mem0[v20:word32]
	v20 = v20 + 4
	lr = r12
	r1 = r1 + 408
	r3 = -1
	return
	// succ:  fn00403744_exit
l00403868:
	r12 = Mem0[r1 + 416:word32]
	v21 = r1 + 392
	r29 = Mem0[v21:word32]
	v21 = v21 + 4
	r30 = Mem0[v21:word32]
	v21 = v21 + 4
	r31 = Mem0[v21:word32]
	v21 = v21 + 4
	lr = r12
	r1 = r1 + 408
	r3 = 0
	return
	// succ:  fn00403744_exit
l00403880:
	r4 = Mem0[r2 + 124:word32]
	r1 = r1 + 408
	r5 = 2
	Mem0[r4 + 0:word32] = r5
	r3 = -1
	return
	// succ:  fn00403744_exit
fn00403744_exit:


// fn00403898
// Return size: 0
define fn00403898
fn00403898_entry:
	// succ:  l00403898
l00403898:
	r1 = fp
	r4 = Mem0[r2 + 116:word32]
	Mem0[r1 + -152:word32] = r1
	r1 = r1 + -152
	r4 = Mem0[r4 + 0:word32]
	Mem0[v5:word32] = r28
	v5 = v5 + 4
	Mem0[v5:word32] = r29
	v5 = v5 + 4
	Mem0[v5:word32] = r30
	v5 = v5 + 4
	Mem0[v5:word32] = r31
	v5 = v5 + 4
	r29 = r3 | 0x00000000
	r5 = r29 | 0x00000000
	cr1 = cond(r4 - r5)
	r12 = lr
	r3 = 0
	Mem0[r1 + 160:word32] = r12
	branch Test(LE,cr1) l004039E4
	// succ:  l004038C4 l004039E4
l004038C4:
	r28 = Mem0[r2 + 120:word32]
	r11 = (word32) Mem0[r28 + r29:byte]
	r28 = r29 + r28
	v16 = (int8) r11
	r11 = (int32) v16
	r4 = r11 & 0x00000001
	cr0 = cond(r4)
	branch Test(EQ,cr0) l004039E4
	// succ:  l004038DC l004039E4
l004038DC:
	r11 = r11 & 0x00000040
	cr0 = cond(r11)
	branch Test(NE,cr0) l0040399C
	// succ:  l004038E4 l0040399C
l004038E4:
	r10 = Mem0[r2 + 156:word32]
	r9 = r29 << 0x02
	r11 = Mem0[r10 + r9:word32]
	cr1 = cond(r11 - -1)
	branch Test(NE,cr1) l00403904
	// succ:  l004038F8 l00403904
l004038F8:
	r30 = 0
	Mem0[r10 + r9:word32] = r30
	goto l004039A0
	// succ:  l004039A0
l00403904:
	r31 = r1 + 56
	r3 = r31 | 0x00000000
	v25 = (int16) r11
	r11 = (int32) v25
	Mem0[r31 + 24:word16] = (word16) r11
	r30 = 0
	Mem0[r31 + 18:word32] = r30
	call fn00403F24 (retsize: 0;)
	r2 = Mem0[r1 + 20:word32]
	cr1 = cond(r3 - 0)
	branch Test(EQ,cr1) l0040394C
	// succ:  l0040392C l0040394C
l0040392C:
	call fn00403104 (retsize: 0;)
	r0 = r0 | 0x00000000
	r12 = Mem0[r1 + 160:word32]
	v26 = r1 + 136
	r28 = Mem0[v26:word32]
	v26 = v26 + 4
	r29 = Mem0[v26:word32]
	v26 = v26 + 4
	r30 = Mem0[v26:word32]
	v26 = v26 + 4
	r31 = Mem0[v26:word32]
	v26 = v26 + 4
	lr = r12
	r1 = r1 + 152
	r3 = -1
	return
	// succ:  fn00403898_exit
l0040394C:
	r11 = 0
	r9 = 5
	ctr = r9
	// succ:  l00403958
l00403958:
	Mem0[r31 + r11:word32] = r30
	r11 = r11 + 4
	Mem0[r31 + r11:word32] = r30
	r11 = r11 + 4
	Mem0[r31 + r11:word32] = r30
	r11 = r11 + 4
	Mem0[r31 + r11:word32] = r30
	r11 = r11 + 4
	ctr = ctr - 0x00000001
	branch ctr != 0x00000000 l00403958
	// succ:  l0040397C l00403958
l0040397C:
	r4 = Mem0[r2 + 160:word32]
	r29 = r29 << 0x01
	r4 = (int32) Mem0[r4 + r29:int16]
	r3 = r31 | 0x00000000
	Mem0[r31 + 22:word16] = (word16) r4
	call fn00403F3C (retsize: 0;)
	r2 = Mem0[r1 + 20:word32]
	goto l004039A0
	// succ:  l004039A0
l0040399C:
	r30 = 0
	// succ:  l004039A0
l004039A0:
	cr1 = cond(r3 - 0)
	Mem0[r28 + 0:byte] = (byte) r30
	branch Test(EQ,cr1) l004039CC
	// succ:  l004039AC l004039CC
l004039AC:
	call fn00403104 (retsize: 0;)
	r0 = r0 | 0x00000000
	r12 = Mem0[r1 + 160:word32]
	v24 = r1 + 136
	r28 = Mem0[v24:word32]
	v24 = v24 + 4
	r29 = Mem0[v24:word32]
	v24 = v24 + 4
	r30 = Mem0[v24:word32]
	v24 = v24 + 4
	r31 = Mem0[v24:word32]
	v24 = v24 + 4
	lr = r12
	r1 = r1 + 152
	r3 = -1
	return
	// succ:  fn00403898_exit
l004039CC:
	r12 = Mem0[r1 + 160:word32]
	v27 = r1 + 136
	r28 = Mem0[v27:word32]
	v27 = v27 + 4
	r29 = Mem0[v27:word32]
	v27 = v27 + 4
	r30 = Mem0[v27:word32]
	v27 = v27 + 4
	r31 = Mem0[v27:word32]
	v27 = v27 + 4
	lr = r12
	r1 = r1 + 152
	r3 = 0
	return
	// succ:  fn00403898_exit
l004039E4:
	r4 = Mem0[r2 + 124:word32]
	r5 = Mem0[r2 + 164:word32]
	v20 = r1 + 136
	r28 = Mem0[v20:word32]
	v20 = v20 + 4
	r29 = Mem0[v20:word32]
	v20 = v20 + 4
	r30 = Mem0[v20:word32]
	v20 = v20 + 4
	r31 = Mem0[v20:word32]
	v20 = v20 + 4
	r1 = r1 + 152
	r6 = 9
	Mem0[r4 + 0:word32] = r6
	r7 = 0
	Mem0[r5 + 0:word32] = r7
	r3 = -1
	return
	// succ:  fn00403898_exit
fn00403898_exit:


// fn00403A0C
// Return size: 0
define fn00403A0C
fn00403A0C_entry:
	// succ:  l00403A0C
l00403A0C:
	r1 = fp
	Mem0[r1 + -64:word32] = r1
	r1 = r1 + -64
	Mem0[r1 + 56:word32] = r31
	r31 = r3 | 0x00000000
	r11 = Mem0[r31 + 12:word32]
	r12 = lr
	r4 = r11 & 0x00000083
	cr0 = cond(r4)
	Mem0[r1 + 72:word32] = r12
	branch Test(EQ,cr0) l00403A60
	// succ:  l00403A2C l00403A60
l00403A2C:
	r11 = r11 & 0x00000008
	cr0 = cond(r11)
	branch Test(EQ,cr0) l00403A60
	// succ:  l00403A34 l00403A60
l00403A34:
	r3 = Mem0[r31 + 8:word32]
	call fn00402BA0 (retsize: 0;)
	r0 = r0 | 0x00000000
	r4 = Mem0[r31 + 12:word32]
	r5 = 0
	Mem0[r31 + 0:word32] = r5
	Mem0[r31 + 8:word32] = r5
	Mem0[r31 + 4:word32] = r5
	r6 = -9
	r4 = r4 & r6
	Mem0[r31 + 12:word32] = r4
	// succ:  l00403A60
l00403A60:
	r12 = Mem0[r1 + 72:word32]
	r31 = Mem0[r1 + 56:word32]
	lr = r12
	r1 = r1 + 64
	return
	// succ:  fn00403A0C_exit
fn00403A0C_exit:


// fn00403B08
// Return size: 0
define fn00403B08
fn00403B08_entry:
	// succ:  l00403B08
l00403B08:
	r1 = fp
	Mem0[r1 + -72:word32] = r1
	r1 = r1 + -72
	Mem0[v3:word32] = r29
	v3 = v3 + 4
	Mem0[v3:word32] = r30
	v3 = v3 + 4
	Mem0[v3:word32] = r31
	v3 = v3 + 4
	r30 = r3 | 0x00000000
	r11 = r30 + -2
	cr1 = cond(r11 - 0x00000015)
	r12 = lr
	Mem0[r1 + 80:word32] = r12
	branch Test(GE,cr1) l00403B94
	// succ:  l00403B28 l00403B94
l00403B28:
	r11 = r11 << 0x02
	call fn00403B84 (retsize: 0;)
	goto l00403BAC
	// succ:  l00403BAC
l00403B94:
	r12 = Mem0[r1 + 80:word32]
	v12 = r1 + 60
	r30 = Mem0[v12:word32]
	v12 = v12 + 4
	r31 = Mem0[v12:word32]
	v12 = v12 + 4
	lr = r12
	r1 = r1 + 72
	r3 = -1
	return
	// succ:  fn00403B08_exit
l00403BAC:
	r3 = r30 | 0x00000000
	call fn00403C20 (retsize: 0;)
	r29 = r3 | 0x00000000
	r31 = Mem0[r29 + 8:word32]
	cr1 = cond(r31 - 0x00000001)
	branch Test(NE,cr1) l00403BDC
	// succ:  l00403BC4 l00403BDC
l00403BC4:
	r12 = Mem0[r1 + 80:word32]
	v13 = r1 + 56
	r29 = Mem0[v13:word32]
	v13 = v13 + 4
	r30 = Mem0[v13:word32]
	v13 = v13 + 4
	r31 = Mem0[v13:word32]
	v13 = v13 + 4
	lr = r12
	r1 = r1 + 72
	r3 = 0
	return
	// succ:  fn00403B08_exit
l00403BDC:
	cr1 = cond(r31 - 0x00000000)
	branch Test(NE,cr1) l00403BF0
	// succ:  l00403BE4 l00403BF0
l00403BE4:
	r3 = 3
	call fn004035A0 (retsize: 0;)
	r0 = r0 | 0x00000000
	// succ:  l00403BF0
l00403BF0:
	r3 = r30 | 0x00000000
	r12 = r31 | 0x00000000
	r4 = 0
	Mem0[r29 + 8:word32] = r4
	call fn00403F10 (retsize: 0;)
	r2 = Mem0[r1 + 20:word32]
	r12 = Mem0[r1 + 80:word32]
	v17 = r1 + 56
	r29 = Mem0[v17:word32]
	v17 = v17 + 4
	r30 = Mem0[v17:word32]
	v17 = v17 + 4
	r31 = Mem0[v17:word32]
	v17 = v17 + 4
	lr = r12
	r1 = r1 + 72
	r3 = 0
	return
	// succ:  fn00403B08_exit
fn00403B08_exit:


// fn00403B84
// Return size: 0
define fn00403B84
fn00403B84_entry:
	// succ:  l00403B84
l00403B84:
	r1 = fp
	r0 = lr
	r0 = r0 + r11
	lr = r0
	return
	// succ:  fn00403B84_exit
fn00403B84_exit:


// fn00403C20
// Return size: 0
define fn00403C20
fn00403C20_entry:
	// succ:  l00403C20
l00403C20:
	r1 = fp
	r4 = Mem0[r2 + 240:word32]
	r10 = Mem0[r2 + 244:word32]
	r4 = Mem0[r4 + 0:word32]
	r11 = r10 | 0x00000000
	r4 = r4 * 12
	r10 = r4 + r10
	// succ:  l00403C38
l00403C38:
	r4 = Mem0[r11 + 4:word32]
	cr1 = cond(r4 - r3)
	branch Test(EQ,cr1) l00403C50
	// succ:  l00403C44 l00403C50
l00403C44:
	r11 = r11 + 12
	cr1 = cond(r10 - r11)
	branch Test(GT,cr1) l00403C38
	// succ:  l00403C50 l00403C38
l00403C50:
	r4 = Mem0[r11 + 4:word32]
	r10 = r11 | 0x00000000
	cr1 = cond(r4 - r3)
	branch Test(EQ,cr1) l00403C64
	// succ:  l00403C60 l00403C64
l00403C60:
	r10 = 0
	// succ:  l00403C64
l00403C64:
	r3 = r10 | 0x00000000
	return
	// succ:  fn00403C20_exit
fn00403C20_exit:


// Win32CrtStartup
// Return size: 0
void Win32CrtStartup()
Win32CrtStartup_entry:
	// succ:  l00403C6C
l00403C6C:
	r1 = fp
	r12 = lr
	Mem0[r1 + -56:word32] = r1
	r1 = r1 + -56
	Mem0[r1 + 64:word32] = r12
	call fn00403DD8 (retsize: 0;)
	r0 = r0 | 0x00000000
	r4 = Mem0[r2 + 340:word32]
	Mem0[r4 + 0:word32] = r3
	call fn00403CA0 (retsize: 0;)
	r0 = r0 | 0x00000000
	r12 = Mem0[r1 + 64:word32]
	r1 = r1 + 56
	lr = r12
	return
	// succ:  Win32CrtStartup_exit
Win32CrtStartup_exit:


// fn00403CA0
// Return size: 0
define fn00403CA0
fn00403CA0_entry:
	// succ:  l00403CA0
l00403CA0:
	r1 = fp
	r4 = Mem0[r2 + 212:word32]
	Mem0[r1 + -112:word32] = r1
	r1 = r1 + -112
	r4 = Mem0[r4 + 0:word32]
	Mem0[v5:word32] = r29
	v5 = v5 + 4
	Mem0[v5:word32] = r30
	v5 = v5 + 4
	Mem0[v5:word32] = r31
	v5 = v5 + 4
	cr1 = cond(r4 - 0x00000000)
	r12 = lr
	r29 = Mem0[r2 + 344:word32]
	Mem0[r1 + 120:word32] = r12
	Mem0[r1 + 96:word32] = r13
	r31 = 0
	Mem0[r29 + 0:word32] = r31
	branch Test(NE,cr1) l00403D38
	// succ:  l00403CD0 l00403D38
l00403CD0:
	r4 = Mem0[r2 + 348:word32]
	r5 = 1
	Mem0[r4 + 0:word32] = r5
	r6 = Mem0[0x00000910:word32]
	r3 = r1 + 56
	Mem0[r3 + 0:word32] = r6
	r7 = Mem0[0x00000914:word32]
	Mem0[r3 + 4:word32] = r7
	r8 = Mem0[0x00000918:word32]
	Mem0[r3 + 8:word32] = r8
	r9 = Mem0[0x0000091C:word32]
	Mem0[r3 + 12:word32] = r9
	r10 = Mem0[0x00000920:word32]
	Mem0[r3 + 16:word32] = r10
	r11 = Mem0[0x00000924:word32]
	Mem0[r3 + 20:word32] = r11
	r12 = Mem0[0x00000928:word32]
	Mem0[r3 + 24:word32] = r12
	r13 = Mem0[0x0000092C:word32]
	Mem0[r3 + 28:word32] = r13
	call fn00403D7C (retsize: 0;)
	r5 = Mem0[r2 + 352:word32]
	r4 = r1 + 88
	Mem0[r4 + 0:word32] = r3
	Mem0[r4 + 4:word32] = r31
	Mem0[r5 + 0:word32] = r4
	// succ:  l00403D38
l00403D38:
	r30 = Mem0[r2 + 348:word32]
	r31 = Mem0[r2 + 352:word32]
	call fn00402404 (retsize: 0;)
	r0 = r0 | 0x00000000
	r3 = Mem0[r30 + 0:word32]
	r4 = Mem0[r31 + 0:word32]
	r5 = Mem0[r29 + 0:word32]
	call fn00400220 (retsize: 0;)
	r0 = r0 | 0x00000000
	call fn00403574 (retsize: 0;)
	r0 = r0 | 0x00000000
	r12 = Mem0[r1 + 120:word32]
	r13 = Mem0[r1 + 96:word32]
	lr = r12
	v22 = r1 + 100
	r29 = Mem0[v22:word32]
	v22 = v22 + 4
	r30 = Mem0[v22:word32]
	v22 = v22 + 4
	r31 = Mem0[v22:word32]
	v22 = v22 + 4
	r1 = r1 + 112
	return
	// succ:  fn00403CA0_exit
fn00403CA0_exit:


// fn00403D7C
// Return size: 0
define fn00403D7C
fn00403D7C_entry:
	// succ:  l00403D7C
l00403D7C:
	r1 = fp
	cr1 = cond(r3 - 0x00000000)
	branch Test(EQ,cr1) l00403DCC
	// succ:  l00403D84 l00403DCC
l00403D84:
	r8 = (word32) Mem0[r3 + 0:byte]
	cr1 = cond(r8 - 0x00000000)
	branch Test(EQ,cr1) l00403DCC
	// succ:  l00403D90 l00403DCC
l00403D90:
	r11 = r8 | 0x00000000
	cr1 = cond(r11 - 0)
	r9 = r3 + 1
	r10 = r3 | 0x00000000
	branch Test(EQ,cr1) l00403DC4
	// succ:  l00403DA4 l00403DC4
l00403DA4:
	r10 = r3 + -1
	r9 = r9 + -1
	// succ:  l00403DAC
l00403DAC:
	r11 = r11 + -1
	cr1 = cond(r11 - 0)
	r4 = (word32) Mem0[r9 + 1:byte]
	r9 = r9 + 1
	Mem0[r10 + 1:byte] = (byte) r4
	r10 = r10 + 1
	branch Test(NE,cr1) l00403DAC
	// succ:  l00403DC0 l00403DAC
l00403DC0:
	r10 = r10 + 1
	// succ:  l00403DC4
l00403DC4:
	r4 = 0
	Mem0[r10 + 0:byte] = (byte) r4
	// succ:  l00403DCC
l00403DCC:
	return
	// succ:  fn00403D7C_exit
fn00403D7C_exit:


// fn00403DD8
// Return size: 0
define fn00403DD8
fn00403DD8_entry:
	// succ:  l00403DD8
l00403DD8:
	r1 = fp
	r3 = r1 | 0x00000000
	return
	// succ:  fn00403DD8_exit
fn00403DD8_exit:


// fn00403ED4
// Return size: 0
define fn00403ED4
fn00403ED4_entry:
	// succ:  l00403ED4
l00403ED4:
	r1 = fp
	r5 = Mem0[r2 + 356:word32]
	Mem0[r5 + 4:word32] = r3
	return
	// succ:  fn00403ED4_exit
fn00403ED4_exit:


// fn00403F10
// Return size: 0
define fn00403F10
fn00403F10_entry:
	// succ:  l00403F10
l00403F10:
	r1 = fp
	r0 = Mem0[r12 + 0:word32]
	Mem0[r1 + 20:word32] = r2
	ctr = r0
	r2 = Mem0[r12 + 4:word32]
	call ctr (retsize: 0;)
	return
	// succ:  fn00403F10_exit
fn00403F10_exit:


// fn00403F24
// Return size: 0
define fn00403F24
fn00403F24_entry:
	// succ:  l00403F24
l00403F24:
	r1 = fp
	r12 = Mem0[r2 + 336:word32]
	r0 = Mem0[r12 + 0:word32]
	Mem0[r1 + 20:word32] = r2
	ctr = r0
	r2 = Mem0[r12 + 4:word32]
	call ctr (retsize: 0;)
	return
	// succ:  fn00403F24_exit
fn00403F24_exit:


// fn00403F3C
// Return size: 0
define fn00403F3C
fn00403F3C_entry:
	// succ:  l00403F3C
l00403F3C:
	r1 = fp
	r12 = Mem0[r2 + 284:word32]
	r0 = Mem0[r12 + 0:word32]
	Mem0[r1 + 20:word32] = r2
	ctr = r0
	r2 = Mem0[r12 + 4:word32]
	call ctr (retsize: 0;)
	return
	// succ:  fn00403F3C_exit
fn00403F3C_exit:


// fn00403F54
// Return size: 0
define fn00403F54
fn00403F54_entry:
	// succ:  l00403F54
l00403F54:
	r1 = fp
	r12 = Mem0[r2 + 332:word32]
	r0 = Mem0[r12 + 0:word32]
	Mem0[r1 + 20:word32] = r2
	ctr = r0
	r2 = Mem0[r12 + 4:word32]
	call ctr (retsize: 0;)
	return
	// succ:  fn00403F54_exit
fn00403F54_exit:


// fn00403F6C
// Return size: 0
define fn00403F6C
fn00403F6C_entry:
	// succ:  l00403F6C
l00403F6C:
	r1 = fp
	r12 = Mem0[r2 + 328:word32]
	r0 = Mem0[r12 + 0:word32]
	Mem0[r1 + 20:word32] = r2
	ctr = r0
	r2 = Mem0[r12 + 4:word32]
	call ctr (retsize: 0;)
	return
	// succ:  fn00403F6C_exit
fn00403F6C_exit:


// fn00403F84
// Return size: 0
define fn00403F84
fn00403F84_entry:
	// succ:  l00403F84
l00403F84:
	r1 = fp
	r12 = Mem0[r2 + 260:word32]
	r0 = Mem0[r12 + 0:word32]
	Mem0[r1 + 20:word32] = r2
	ctr = r0
	r2 = Mem0[r12 + 4:word32]
	call ctr (retsize: 0;)
	return
	// succ:  fn00403F84_exit
fn00403F84_exit:


// fn00403F9C
// Return size: 0
define fn00403F9C
fn00403F9C_entry:
	// succ:  l00403F9C
l00403F9C:
	r1 = fp
	r12 = Mem0[r2 + 296:word32]
	r0 = Mem0[r12 + 0:word32]
	Mem0[r1 + 20:word32] = r2
	ctr = r0
	r2 = Mem0[r12 + 4:word32]
	call ctr (retsize: 0;)
	return
	// succ:  fn00403F9C_exit
fn00403F9C_exit:


// fn00403FB4
// Return size: 0
define fn00403FB4
fn00403FB4_entry:
	// succ:  l00403FB4
l00403FB4:
	r1 = fp
	r12 = Mem0[r2 + 324:word32]
	r0 = Mem0[r12 + 0:word32]
	Mem0[r1 + 20:word32] = r2
	ctr = r0
	r2 = Mem0[r12 + 4:word32]
	call ctr (retsize: 0;)
	return
	// succ:  fn00403FB4_exit
fn00403FB4_exit:


// fn00403FCC
// Return size: 0
define fn00403FCC
fn00403FCC_entry:
	// succ:  l00403FCC
l00403FCC:
	r1 = fp
	r12 = Mem0[r2 + 320:word32]
	r0 = Mem0[r12 + 0:word32]
	Mem0[r1 + 20:word32] = r2
	ctr = r0
	r2 = Mem0[r12 + 4:word32]
	call ctr (retsize: 0;)
	return
	// succ:  fn00403FCC_exit
fn00403FCC_exit:


// fn00403FE4
// Return size: 0
define fn00403FE4
fn00403FE4_entry:
	// succ:  l00403FE4
l00403FE4:
	r1 = fp
	r12 = Mem0[r2 + 316:word32]
	r0 = Mem0[r12 + 0:word32]
	Mem0[r1 + 20:word32] = r2
	ctr = r0
	r2 = Mem0[r12 + 4:word32]
	call ctr (retsize: 0;)
	return
	// succ:  fn00403FE4_exit
fn00403FE4_exit:


// fn00403FFC
// Return size: 0
define fn00403FFC
fn00403FFC_entry:
	// succ:  l00403FFC
l00403FFC:
	r1 = fp
	r12 = Mem0[r2 + 312:word32]
	r0 = Mem0[r12 + 0:word32]
	Mem0[r1 + 20:word32] = r2
	ctr = r0
	r2 = Mem0[r12 + 4:word32]
	call ctr (retsize: 0;)
	return
	// succ:  fn00403FFC_exit
fn00403FFC_exit:


// fn00404014
// Return size: 0
define fn00404014
fn00404014_entry:
	// succ:  l00404014
l00404014:
	r1 = fp
	r12 = Mem0[r2 + 308:word32]
	r0 = Mem0[r12 + 0:word32]
	Mem0[r1 + 20:word32] = r2
	ctr = r0
	r2 = Mem0[r12 + 4:word32]
	call ctr (retsize: 0;)
	return
	// succ:  fn00404014_exit
fn00404014_exit:


// fn0040402C
// Return size: 0
define fn0040402C
fn0040402C_entry:
	// succ:  l0040402C
l0040402C:
	r1 = fp
	r12 = Mem0[r2 + 304:word32]
	r0 = Mem0[r12 + 0:word32]
	Mem0[r1 + 20:word32] = r2
	ctr = r0
	r2 = Mem0[r12 + 4:word32]
	call ctr (retsize: 0;)
	return
	// succ:  fn0040402C_exit
fn0040402C_exit:


// fn00404044
// Return size: 0
define fn00404044
fn00404044_entry:
	// succ:  l00404044
l00404044:
	r1 = fp
	r12 = Mem0[r2 + 300:word32]
	r0 = Mem0[r12 + 0:word32]
	Mem0[r1 + 20:word32] = r2
	ctr = r0
	r2 = Mem0[r12 + 4:word32]
	call ctr (retsize: 0;)
	return
	// succ:  fn00404044_exit
fn00404044_exit:


// fn0040405C
// Return size: 0
define fn0040405C
fn0040405C_entry:
	// succ:  l0040405C
l0040405C:
	r1 = fp
	r12 = Mem0[r2 + 292:word32]
	r0 = Mem0[r12 + 0:word32]
	Mem0[r1 + 20:word32] = r2
	ctr = r0
	r2 = Mem0[r12 + 4:word32]
	call ctr (retsize: 0;)
	return
	// succ:  fn0040405C_exit
fn0040405C_exit:


// fn00404074
// Return size: 0
define fn00404074
fn00404074_entry:
	// succ:  l00404074
l00404074:
	r1 = fp
	r12 = Mem0[r2 + 288:word32]
	r0 = Mem0[r12 + 0:word32]
	Mem0[r1 + 20:word32] = r2
	ctr = r0
	r2 = Mem0[r12 + 4:word32]
	call ctr (retsize: 0;)
	return
	// succ:  fn00404074_exit
fn00404074_exit:


// fn0040408C
// Return size: 0
define fn0040408C
fn0040408C_entry:
	// succ:  l0040408C
l0040408C:
	r1 = fp
	r12 = Mem0[r2 + 276:word32]
	r0 = Mem0[r12 + 0:word32]
	Mem0[r1 + 20:word32] = r2
	ctr = r0
	r2 = Mem0[r12 + 4:word32]
	call ctr (retsize: 0;)
	return
	// succ:  fn0040408C_exit
fn0040408C_exit:


// fn004040A4
// Return size: 0
define fn004040A4
fn004040A4_entry:
	// succ:  l004040A4
l004040A4:
	r1 = fp
	r12 = Mem0[r2 + 264:word32]
	r0 = Mem0[r12 + 0:word32]
	Mem0[r1 + 20:word32] = r2
	ctr = r0
	r2 = Mem0[r12 + 4:word32]
	call ctr (retsize: 0;)
	return
	// succ:  fn004040A4_exit
fn004040A4_exit:


// fn004040BC
// Return size: 0
define fn004040BC
fn004040BC_entry:
	// succ:  l004040BC
l004040BC:
	r1 = fp
	r12 = Mem0[r2 + 256:word32]
	r0 = Mem0[r12 + 0:word32]
	Mem0[r1 + 20:word32] = r2
	ctr = r0
	r2 = Mem0[r12 + 4:word32]
	call ctr (retsize: 0;)
	return
	// succ:  fn004040BC_exit
fn004040BC_exit:


// fn004040D4
// Return size: 0
define fn004040D4
fn004040D4_entry:
	// succ:  l004040D4
l004040D4:
	r1 = fp
	r12 = Mem0[r2 + 272:word32]
	r0 = Mem0[r12 + 0:word32]
	Mem0[r1 + 20:word32] = r2
	ctr = r0
	r2 = Mem0[r12 + 4:word32]
	call ctr (retsize: 0;)
	return
	// succ:  fn004040D4_exit
fn004040D4_exit:


// fn004040EC
// Return size: 0
define fn004040EC
fn004040EC_entry:
	// succ:  l004040EC
l004040EC:
	r1 = fp
	r12 = Mem0[r2 + 268:word32]
	r0 = Mem0[r12 + 0:word32]
	Mem0[r1 + 20:word32] = r2
	ctr = r0
	r2 = Mem0[r12 + 4:word32]
	call ctr (retsize: 0;)
	return
	// succ:  fn004040EC_exit
fn004040EC_exit:


// fn00404104
// Return size: 0
define fn00404104
fn00404104_entry:
	// succ:  l00404104
l00404104:
	r1 = fp
	r12 = Mem0[r2 + 252:word32]
	r0 = Mem0[r12 + 0:word32]
	Mem0[r1 + 20:word32] = r2
	ctr = r0
	r2 = Mem0[r12 + 4:word32]
	call ctr (retsize: 0;)
	return
	// succ:  fn00404104_exit
fn00404104_exit:


// fn0040411C
// Return size: 0
define fn0040411C
fn0040411C_entry:
	// succ:  l0040411C
l0040411C:
	r1 = fp
	r12 = Mem0[r2 + 280:word32]
	r0 = Mem0[r12 + 0:word32]
	Mem0[r1 + 20:word32] = r2
	ctr = r0
	r2 = Mem0[r12 + 4:word32]
	call ctr (retsize: 0;)
	return
	// succ:  fn0040411C_exit
fn0040411C_exit:


// fn00404134
// Return size: 0
define fn00404134
fn00404134_entry:
	// succ:  l00404134
l00404134:
	r1 = fp
	r12 = Mem0[r2 + 248:word32]
	r0 = Mem0[r12 + 0:word32]
	Mem0[r1 + 20:word32] = r2
	ctr = r0
	r2 = Mem0[r12 + 4:word32]
	call ctr (retsize: 0;)
	return
	// succ:  fn00404134_exit
fn00404134_exit:


