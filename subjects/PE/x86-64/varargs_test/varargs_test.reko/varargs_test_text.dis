// fn0000000140001000
// Return size: 8
define fn0000000140001000
fn0000000140001000_entry:
	rsp = fp
	// succ:  l0000000140001000
l0000000140001000:
	rsp = rsp - 200_i32
	SCZO = cond(rsp)
	rax = Mem0[0x0000000140003000:word64]
	rax = rax ^ rsp
	SZO = cond(rax)
	C = false
	Mem0[rsp + 0xB8:word64] = rax
	xmm0 = Mem0[0x0000000140002260:word128]
	r9 = 0x0000000140002240
	Mem0[rsp + 0x38:word32] = 0x57_32
	r8 = 0x0000000140002250
	Mem0[rsp + 0x30:word32] = 0x63_32
	rcx = 0x0000000140002210
	rdx = (uint64) 3_32
	Mem0[rsp + 0x20:word128] = xmm0
	call fn0000000140001140 (retsize: 8;)
	rax = rsp + 0x44
	Mem0[rsp + 0x38:word64] = rax
	r9 = rsp + 0x78
	rax = rsp + 0x40
	Mem0[rsp + 0x30:word64] = rax
	r8 = rsp + 0x58
	rax = rsp + 0x50
	Mem0[rsp + 0x28:word64] = rax
	rdx = rsp + 0x4C
	rax = rsp + 0x48
	rcx = 0x0000000140002228
	Mem0[rsp + 0x20:word64] = rax
	call fn00000001400010D0 (retsize: 8;)
	rax = (uint64) (eax ^ eax)
	SZO = cond(eax)
	C = false
	rcx = Mem0[rsp + 0xB8:word64]
	rcx = rcx ^ rsp
	SZO = cond(rcx)
	C = false
	call fn00000001400011B0 (retsize: 8;)
	rsp = rsp + 200_i32
	SCZO = cond(rsp)
	return
	// succ:  fn0000000140001000_exit
fn0000000140001000_exit:


// fn00000001400010C0
// Return size: 8
define fn00000001400010C0
fn00000001400010C0_entry:
	rsp = fp
	// succ:  l00000001400010C0
l00000001400010C0:
	rax = 0x0000000140003628
	return
	// succ:  fn00000001400010C0_exit
fn00000001400010C0_exit:


// fn00000001400010D0
// Return size: 8
define fn00000001400010D0
fn00000001400010D0_entry:
	rsp = fp
	// succ:  l00000001400010D0
l00000001400010D0:
	Mem0[rsp + 8:word64] = rcx
	Mem0[rsp + 0x10:word64] = rdx
	Mem0[rsp + 0x18:word64] = r8
	Mem0[rsp + 0x20:word64] = r9
	rsp = rsp - 8_i
	Mem0[rsp:word64] = rbx
	rsp = rsp - 8_i
	Mem0[rsp:word64] = rsi
	rsp = rsp - 8_i
	Mem0[rsp:word64] = rdi
	rsp = rsp - 0x30
	SCZO = cond(rsp)
	rdi = rcx
	rsi = rsp + 0x58
	rcx = (uint64) (ecx ^ ecx)
	SZO = cond(ecx)
	C = false
	call _acrt_iob_func (retsize: 8;)
	rbx = rax
	call fn00000001400010C0 (retsize: 8;)
	r9 = (uint64) (r9d ^ r9d)
	SZO = cond(r9d)
	C = false
	Mem0[rsp + 0x20:word64] = rsi
	r8 = rdi
	rdx = rbx
	rcx = Mem0[rax:word64]
	call _stdio_common_vfscanf (retsize: 8;)
	rsp = rsp + 0x30
	SCZO = cond(rsp)
	rdi = Mem0[rsp:word64]
	rsp = rsp + 8_i
	rsi = Mem0[rsp:word64]
	rsp = rsp + 8_i
	rbx = Mem0[rsp:word64]
	rsp = rsp + 8_i
	return
	// succ:  fn00000001400010D0_exit
fn00000001400010D0_exit:


// fn0000000140001130
// Return size: 8
define fn0000000140001130
fn0000000140001130_entry:
	rsp = fp
	// succ:  l0000000140001130
l0000000140001130:
	rax = 0x0000000140003620
	return
	// succ:  fn0000000140001130_exit
fn0000000140001130_exit:


// fn0000000140001140
// Return size: 8
define fn0000000140001140
fn0000000140001140_entry:
	rsp = fp
	// succ:  l0000000140001140
l0000000140001140:
	Mem0[rsp + 8:word64] = rcx
	Mem0[rsp + 0x10:word64] = rdx
	Mem0[rsp + 0x18:word64] = r8
	Mem0[rsp + 0x20:word64] = r9
	rsp = rsp - 8_i
	Mem0[rsp:word64] = rbx
	rsp = rsp - 8_i
	Mem0[rsp:word64] = rsi
	rsp = rsp - 8_i
	Mem0[rsp:word64] = rdi
	rsp = rsp - 0x30
	SCZO = cond(rsp)
	rdi = rcx
	rsi = rsp + 0x58
	rcx = (uint64) 1_32
	call _acrt_iob_func (retsize: 8;)
	rbx = rax
	call fn0000000140001130 (retsize: 8;)
	r9 = (uint64) (r9d ^ r9d)
	SZO = cond(r9d)
	C = false
	Mem0[rsp + 0x20:word64] = rsi
	r8 = rdi
	rdx = rbx
	rcx = Mem0[rax:word64]
	call _stdio_common_vfprintf (retsize: 8;)
	rsp = rsp + 0x30
	SCZO = cond(rsp)
	rdi = Mem0[rsp:word64]
	rsp = rsp + 8_i
	rsi = Mem0[rsp:word64]
	rsp = rsp + 8_i
	rbx = Mem0[rsp:word64]
	rsp = rsp + 8_i
	return
	// succ:  fn0000000140001140_exit
fn0000000140001140_exit:


// fn00000001400011B0
// Return size: 8
define fn00000001400011B0
fn00000001400011B0_entry:
	rsp = fp
	// succ:  l00000001400011B0
l00000001400011B0:
	SCZO = cond(rcx - Mem0[0x0000000140003000:word64])
	branch Test(NE,Z) l00000001400011CC
	// succ:  l00000001400011BA l00000001400011CC
l00000001400011BA:
	v6 = (rcx & 1 << 0x40_8 - 0x10_8) != 0
	rcx = __rol(rcx, 0x10_8)
	C = v6
	SZO = cond(cx & 0xFFFF_16)
	C = false
	branch Test(NE,Z) l00000001400011C8
	// succ:  l00000001400011C6 l00000001400011C8
l00000001400011C6:
	return
	// succ:  fn00000001400011B0_exit
l00000001400011C8:
	v12 = (rcx & 1 << 0x10_8) != 0
	rcx = __ror(rcx, 0x10_8)
	C = v12
	// succ:  l00000001400011CC
l00000001400011CC:
	// succ:  l00000001400011CC_thunk_fn000000014000147C
l00000001400011CC_thunk_fn000000014000147C:
	call fn000000014000147C (retsize: 0;)
	return
	// succ:  fn00000001400011B0_exit
fn00000001400011B0_exit:


// fn00000001400011D4
// Return size: 8
define fn00000001400011D4
fn00000001400011D4_entry:
	rsp = fp
	// succ:  l00000001400011D4
l00000001400011D4:
	rsp = rsp - 8_i
	Mem0[rsp:word64] = rbx
	rsp = rsp - 0x20
	SCZO = cond(rsp)
	rcx = (uint64) 1_32
	call set_app_type (retsize: 8;)
	call fn0000000140001920 (retsize: 8;)
	rcx = (uint64) eax
	eax = _set_fmode(rcx)
	rax = __p__commode()
	rbx = rax
	call fn0000000140001ABC (retsize: 8;)
	rcx = (uint64) 1_32
	Mem0[rbx:word32] = eax
	call fn000000014000164C (retsize: 8;)
	SZO = cond(al & al)
	C = false
	branch Test(EQ,Z) l0000000140001279
	// succ:  l000000014000120D l0000000140001279
l000000014000120D:
	call fn0000000140001B5C (retsize: 8;)
	rcx = 0x0000000140001BA8
	call fn0000000140001854 (retsize: 8;)
	call fn0000000140001918 (retsize: 8;)
	rcx = (uint64) eax
	call configure_narrow_argv (retsize: 8;)
	SZO = cond(eax & eax)
	C = false
	branch Test(NE,Z) l0000000140001284
	// succ:  l000000014000122E l0000000140001284
l000000014000122E:
	call fn0000000140001928 (retsize: 8;)
	call fn0000000140001958 (retsize: 8;)
	SZO = cond(eax & eax)
	C = false
	branch Test(EQ,Z) l0000000140001248
	// succ:  l000000014000123C l0000000140001248
l000000014000123C:
	rcx = 0x0000000140001ABC
	__setusermatherr(rcx)
	// succ:  l0000000140001248
l0000000140001248:
	call fn0000000140001DD0 (retsize: 8;)
	call fn0000000140001DD0 (retsize: 8;)
	call fn0000000140001ABC (retsize: 8;)
	rcx = (uint64) eax
	call configthreadlocale (retsize: 8;)
	call fn0000000140001938 (retsize: 8;)
	SZO = cond(al & al)
	C = false
	branch Test(EQ,Z) l000000014000126C
	// succ:  l0000000140001267 l000000014000126C
l0000000140001267:
	call initialize_narrow_environment (retsize: 8;)
	// succ:  l000000014000126C
l000000014000126C:
	call fn0000000140001ABC (retsize: 8;)
	rax = (uint64) (eax ^ eax)
	SZO = cond(eax)
	C = false
	rsp = rsp + 0x20
	SCZO = cond(rsp)
	rbx = Mem0[rsp:word64]
	rsp = rsp + 8_i
	return
	// succ:  fn00000001400011D4_exit
l0000000140001279:
	rcx = (uint64) 7_32
	call fn0000000140001974 (retsize: 8;)
	int3()
	// succ:  l0000000140001284
l0000000140001284:
	rcx = (uint64) 7_32
	call fn0000000140001974 (retsize: 8;)
	int3()
	int3()
	// succ:  l000000014000128F_thunk_fn0000000140001290
l000000014000128F_thunk_fn0000000140001290:
	call fn0000000140001290 (retsize: 0;)
	return
	// succ:  fn00000001400011D4_exit
fn00000001400011D4_exit:


// fn0000000140001290
// Return size: 8
define fn0000000140001290
fn0000000140001290_entry:
	rsp = fp
	// succ:  l0000000140001290
l0000000140001290:
	rsp = rsp - 0x28
	SCZO = cond(rsp)
	call fn000000014000193C (retsize: 8;)
	rax = (uint64) (eax ^ eax)
	SZO = cond(eax)
	C = false
	rsp = rsp + 0x28
	SCZO = cond(rsp)
	return
	// succ:  fn0000000140001290_exit
fn0000000140001290_exit:


// fn00000001400012A0
// Return size: 0
define fn00000001400012A0
fn00000001400012A0_entry:
	rsp = fp
	// succ:  l00000001400012A0
l00000001400012A0:
	rsp = rsp - 0x28
	SCZO = cond(rsp)
	call fn0000000140001B14 (retsize: 8;)
	call fn0000000140001ABC (retsize: 8;)
	rcx = (uint64) eax
	rsp = rsp + 0x28
	SCZO = cond(rsp)
	call set_new_mode (retsize: 0;)
	return
	// succ:  fn00000001400012A0_exit
fn00000001400012A0_exit:


// fn00000001400012BC
// Return size: 0
define fn00000001400012BC
fn00000001400012BC_entry:
	rsp = fp
	// succ:  l00000001400012BC
l00000001400012BC:
	Mem0[rsp + 8:word64] = rbx
	Mem0[rsp + 0x10:word64] = rsi
	rsp = rsp - 8_i
	Mem0[rsp:word64] = rdi
	rsp = rsp - 0x30
	SCZO = cond(rsp)
	rcx = (uint64) 1_32
	call fn0000000140001600 (retsize: 8;)
	SZO = cond(al & al)
	C = false
	branch Test(NE,Z) l00000001400012E4
	// succ:  l00000001400012D9 l00000001400012E4
l00000001400012D9:
	rcx = (uint64) 7_32
	call fn0000000140001974 (retsize: 8;)
	int3()
	// succ:  l00000001400012E4
l00000001400012E4:
	sil = sil ^ sil
	SZO = cond(sil)
	C = false
	Mem0[rsp + 0x20:byte] = sil
	call fn00000001400015C4 (retsize: 8;)
	bl = al
	rcx = (uint64) Mem0[0x00000001400035B0:word32]
	SCZO = cond(ecx - 1_32)
	branch Test(NE,Z) l0000000140001308
	// succ:  l00000001400012FE l0000000140001308
l00000001400012FE:
	rcx = (uint64) 7_32
	call fn0000000140001974 (retsize: 8;)
	// succ:  l0000000140001308
l0000000140001308:
	SZO = cond(ecx & ecx)
	C = false
	branch Test(NE,Z) l0000000140001356
	// succ:  l000000014000130C l0000000140001356
l000000014000130C:
	Mem0[0x00000001400035B0:word32] = 1_32
	rdx = 0x00000001400021D0
	rcx = 0x00000001400021B8
	eax = _initterm_e(rcx, rdx)
	SZO = cond(eax & eax)
	C = false
	branch Test(EQ,Z) l0000000140001337
	// succ:  l000000014000132D l0000000140001337
l000000014000132D:
	rax = (uint64) 0xFF_32
	goto l0000000140001423
	// succ:  l0000000140001423
l0000000140001337:
	rdx = 0x00000001400021B0
	rcx = 0x00000001400021A0
	_initterm(rcx, rdx)
	Mem0[0x00000001400035B0:word32] = 2_32
	goto l000000014000135E
	// succ:  l000000014000135E
l0000000140001356:
	sil = 1_8
	Mem0[rsp + 0x20:byte] = sil
	// succ:  l000000014000135E
l000000014000135E:
	cl = bl
	call fn00000001400017B4 (retsize: 8;)
	call fn0000000140001964 (retsize: 8;)
	rbx = rax
	SCZO = cond(Mem0[rax:word64] - 0)
	branch Test(EQ,Z) l0000000140001395
	// succ:  l0000000140001373 l0000000140001395
l0000000140001373:
	rcx = rax
	call fn0000000140001718 (retsize: 8;)
	SZO = cond(al & al)
	C = false
	branch Test(EQ,Z) l0000000140001395
	// succ:  l000000014000137F l0000000140001395
l000000014000137F:
	rbx = Mem0[rbx:word64]
	rcx = rbx
	call fn0000000140001BF4 (retsize: 8;)
	r8 = (uint64) (r8d ^ r8d)
	SZO = cond(r8d)
	C = false
	edx = r8 + 2
	rcx = (uint64) (ecx ^ ecx)
	SZO = cond(ecx)
	C = false
	call rbx (retsize: 8;)
	// succ:  l0000000140001395
l0000000140001395:
	call fn000000014000196C (retsize: 8;)
	rbx = rax
	SCZO = cond(Mem0[rax:word64] - 0)
	branch Test(EQ,Z) l00000001400013B7
	// succ:  l00000001400013A3 l00000001400013B7
l00000001400013A3:
	rcx = rax
	call fn0000000140001718 (retsize: 8;)
	SZO = cond(al & al)
	C = false
	branch Test(EQ,Z) l00000001400013B7
	// succ:  l00000001400013AF l00000001400013B7
l00000001400013AF:
	rcx = Mem0[rbx:word64]
	call register_thread_local_exe_atexit_callback (retsize: 8;)
	// succ:  l00000001400013B7
l00000001400013B7:
	call _p___argv (retsize: 8;)
	rdi = rax
	call _p___argc (retsize: 8;)
	rbx = rax
	call get_initial_narrow_environment (retsize: 8;)
	r8 = rax
	rdx = Mem0[rdi:word64]
	rcx = (uint64) Mem0[rbx:word32]
	call fn0000000140001000 (retsize: 8;)
	rbx = (uint64) eax
	call fn0000000140001AC0 (retsize: 8;)
	SZO = cond(al & al)
	C = false
	branch Test(NE,Z) l00000001400013EB
	// succ:  l00000001400013E4 l00000001400013EB
l00000001400013E4:
	rcx = (uint64) ebx
	exit(rcx)
l00000001400013EB:
	SZO = cond(sil & sil)
	C = false
	branch Test(NE,Z) l00000001400013F5
	// succ:  l00000001400013F0 l00000001400013F5
l00000001400013F0:
	call cexit (retsize: 8;)
	// succ:  l00000001400013F5
l00000001400013F5:
	rdx = (uint64) (edx ^ edx)
	SZO = cond(edx)
	C = false
	cl = 1_8
	call fn00000001400017D8 (retsize: 8;)
	rax = (uint64) ebx
	// succ:  l0000000140001423
l0000000140001423:
	rbx = Mem0[rsp + 0x40:word64]
	rsi = Mem0[rsp + 0x48:word64]
	rsp = rsp + 0x30
	SCZO = cond(rsp)
	rdi = Mem0[rsp:word64]
	rsp = rsp + 8_i
	return
	// succ:  fn00000001400012BC_exit
fn00000001400012BC_exit:


// Win32CrtStartup
// Return size: 8
DWORD Win32CrtStartup()
Win32CrtStartup_entry:
	rsp = fp
	// succ:  l0000000140001434
l0000000140001434:
	rsp = rsp - 0x28
	SCZO = cond(rsp)
	call fn000000014000186C (retsize: 8;)
	rsp = rsp + 0x28
	SCZO = cond(rsp)
	// succ:  l0000000140001441_thunk_fn00000001400012BC
l0000000140001441_thunk_fn00000001400012BC:
	call fn00000001400012BC (retsize: 0;)
	return
	// succ:  Win32CrtStartup_exit
Win32CrtStartup_exit:


// fn0000000140001448
// Return size: 0
define fn0000000140001448
fn0000000140001448_entry:
	rsp = fp
	// succ:  l0000000140001448
l0000000140001448:
	rsp = rsp - 8_i
	Mem0[rsp:word64] = rbx
	rsp = rsp - 0x20
	SCZO = cond(rsp)
	rbx = rcx
	rcx = (uint64) (ecx ^ ecx)
	SZO = cond(ecx)
	C = false
	rax = SetUnhandledExceptionFilter(rcx)
	rcx = rbx
	eax = UnhandledExceptionFilter(rcx)
	eax = GetCurrentProcess()
	rcx = rax
	rdx = (uint64) 0xC0000409_32
	rsp = rsp + 0x20
	SCZO = cond(rsp)
	rbx = Mem0[rsp:word64]
	rsp = rsp + 8_i
	call TerminateProcess (retsize: 0;)
	return
	// succ:  fn0000000140001448_exit
fn0000000140001448_exit:


// fn000000014000147C
// Return size: 0
define fn000000014000147C
fn000000014000147C_entry:
	rsp = fp
	// succ:  l000000014000147C
l000000014000147C:
	Mem0[rsp + 8:word64] = rcx
	rsp = rsp - 0x38
	SCZO = cond(rsp)
	rcx = (uint64) 0x17_32
	eax = IsProcessorFeaturePresent(rcx)
	SZO = cond(eax & eax)
	C = false
	branch Test(EQ,Z) l000000014000149A
	// succ:  l0000000140001493 l000000014000149A
l0000000140001493:
	rcx = (uint64) 2_32
	__fastfail(ecx)
l000000014000149A:
	rcx = 0x00000001400030E0
	call fn0000000140001550 (retsize: 8;)
	rax = Mem0[rsp + 0x38:word64]
	Mem0[0x00000001400031D8:word64] = rax
	rax = rsp + 0x38
	rax = rax + 8
	SCZO = cond(rax)
	Mem0[0x0000000140003178:word64] = rax
	rax = Mem0[0x00000001400031D8:word64]
	Mem0[0x0000000140003050:word64] = rax
	rax = Mem0[rsp + 0x40:word64]
	Mem0[0x0000000140003160:word64] = rax
	Mem0[0x0000000140003040:word32] = 0xC0000409_32
	Mem0[0x0000000140003044:word32] = 1_32
	Mem0[0x0000000140003058:word32] = 1_32
	rax = (uint64) 8_32
	rax = rax *s 0
	SCZO = cond(rax)
	rcx = 0x0000000140003060
	Mem0[rcx + rax:word64] = 2
	rax = (uint64) 8_32
	rax = rax *s 0
	SCZO = cond(rax)
	rcx = Mem0[0x0000000140003000:word64]
	Mem0[rsp + 0x20 + rax:word64] = rcx
	rax = (uint64) 8_32
	rax = rax *s 1
	SCZO = cond(rax)
	rcx = Mem0[0x0000000140003008:word64]
	Mem0[rsp + 0x20 + rax:word64] = rcx
	rcx = 0x0000000140002200
	call fn0000000140001448 (retsize: 8;)
	rsp = rsp + 0x38
	SCZO = cond(rsp)
	return
	// succ:  fn000000014000147C_exit
fn000000014000147C_exit:


// fn0000000140001550
// Return size: 8
define fn0000000140001550
fn0000000140001550_entry:
	rsp = fp
	// succ:  l0000000140001550
l0000000140001550:
	rsp = rsp - 8_i
	Mem0[rsp:word64] = rbx
	rsp = rsp - 8_i
	Mem0[rsp:word64] = rsi
	rsp = rsp - 8_i
	Mem0[rsp:word64] = rdi
	rsp = rsp - 0x40
	SCZO = cond(rsp)
	rbx = rcx
	RtlCaptureContext(rcx)
	rsi = Mem0[rbx + 0xF8:word64]
	rdi = (uint64) (edi ^ edi)
	SZO = cond(edi)
	C = false
	// succ:  l000000014000156A
l000000014000156A:
	r8 = (uint64) (r8d ^ r8d)
	SZO = cond(r8d)
	C = false
	rdx = rsp + 0x60
	rcx = rsi
	rax = RtlLookupFunctionEntry(rcx, rdx, r8)
	SZO = cond(rax & rax)
	C = false
	branch Test(EQ,Z) l00000001400015B9
	// succ:  l0000000140001580 l00000001400015B9
l0000000140001580:
	v16 = Mem0[rsp + 0x38:word64] & 0
	Mem0[rsp + 0x38:word64] = v16
	SZO = cond(Mem0[rsp + 0x38:word64])
	C = false
	rcx = rsp + 0x68
	rdx = Mem0[rsp + 0x60:word64]
	r9 = rax
	Mem0[rsp + 0x30:word64] = rcx
	r8 = rsi
	rcx = rsp + 0x70
	Mem0[rsp + 0x28:word64] = rcx
	rcx = (uint64) (ecx ^ ecx)
	SZO = cond(ecx)
	C = false
	Mem0[rsp + 0x20:word64] = rbx
	call KERNEL32.dll!RtlVirtualUnwind (retsize: 8;)
	rdi = (uint64) (edi + 1_32)
	SZO = cond(edi)
	SCZO = cond(edi - 2_32)
	branch Test(LT,SO) l000000014000156A
	// succ:  l00000001400015B9 l000000014000156A
l00000001400015B9:
	rsp = rsp + 0x40
	SCZO = cond(rsp)
	rdi = Mem0[rsp:word64]
	rsp = rsp + 8_i
	rsi = Mem0[rsp:word64]
	rsp = rsp + 8_i
	rbx = Mem0[rsp:word64]
	rsp = rsp + 8_i
	return
	// succ:  fn0000000140001550_exit
fn0000000140001550_exit:


// fn00000001400015C4
// Return size: 8
define fn00000001400015C4
fn00000001400015C4_entry:
	rsp = fp
	// succ:  l00000001400015C4
l00000001400015C4:
	rsp = rsp - 0x28
	SCZO = cond(rsp)
	call fn0000000140001DC4 (retsize: 8;)
	SZO = cond(eax & eax)
	C = false
	branch Test(EQ,Z) l00000001400015F2
	// succ:  l00000001400015D1 l00000001400015F2
l00000001400015D1:
	rax = Mem0[gs:0x30_32:word64]
	rcx = Mem0[rax + 8:word64]
	goto l00000001400015E5
	// succ:  l00000001400015E5
l00000001400015E0:
	SCZO = cond(rcx - rax)
	branch Test(EQ,Z) l00000001400015F9
	// succ:  l00000001400015E5 l00000001400015F9
l00000001400015E5:
	rax = (uint64) (eax ^ eax)
	SZO = cond(eax)
	C = false
	__lock()
	Z = __cmpxchg(Mem0[0x00000001400035B8:word64], rcx, rax, out rax)
	branch Test(NE,Z) l00000001400015E0
	// succ:  l00000001400015F2 l00000001400015E0
l00000001400015F2:
	al = al ^ al
	SZO = cond(al)
	C = false
	// succ:  l00000001400015F4
l00000001400015F4:
	rsp = rsp + 0x28
	SCZO = cond(rsp)
	return
	// succ:  fn00000001400015C4_exit
l00000001400015F9:
	al = 1_8
	goto l00000001400015F4
	// succ:  l00000001400015F4
fn00000001400015C4_exit:


// fn0000000140001600
// Return size: 8
define fn0000000140001600
fn0000000140001600_entry:
	rsp = fp
	// succ:  l0000000140001600
l0000000140001600:
	rsp = rsp - 8_i
	Mem0[rsp:word64] = rbx
	rsp = rsp - 0x20
	SCZO = cond(rsp)
	eax = (word32) Mem0[0x00000001400035F0:byte]
	SZO = cond(ecx & ecx)
	C = false
	rbx = (uint64) 1_32
	branch Test(NE,Z) l0000000140001617
	// succ:  l0000000140001614_1 l0000000140001617
l0000000140001614_1:
	eax = ebx
	// succ:  l0000000140001617
l0000000140001617:
	Mem0[0x00000001400035F0:byte] = al
	call fn0000000140001BFC (retsize: 8;)
	call fn0000000140001938 (retsize: 8;)
	SZO = cond(al & al)
	C = false
	branch Test(NE,Z) l000000014000162F
	// succ:  l000000014000162B l000000014000162F
l000000014000162B:
	al = al ^ al
	SZO = cond(al)
	C = false
	goto l0000000140001643
	// succ:  l0000000140001643
l000000014000162F:
	call fn0000000140001938 (retsize: 8;)
	SZO = cond(al & al)
	C = false
	branch Test(NE,Z) l0000000140001641
	// succ:  l0000000140001638 l0000000140001641
l0000000140001638:
	rcx = (uint64) (ecx ^ ecx)
	SZO = cond(ecx)
	C = false
	call fn0000000140001938 (retsize: 8;)
	goto l000000014000162B
	// succ:  l000000014000162B
l0000000140001641:
	al = bl
	// succ:  l0000000140001643
l0000000140001643:
	rsp = rsp + 0x20
	SCZO = cond(rsp)
	rbx = Mem0[rsp:word64]
	rsp = rsp + 8_i
	return
	// succ:  fn0000000140001600_exit
fn0000000140001600_exit:


// fn000000014000164C
// Return size: 8
define fn000000014000164C
fn000000014000164C_entry:
	rsp = fp
	// succ:  l000000014000164C
l000000014000164C:
	Mem0[rsp + 8:word64] = rbx
	rsp = rsp - 8_i
	Mem0[rsp:word64] = rbp
	rbp = rsp
	rsp = rsp - 0x40
	SCZO = cond(rsp)
	rbx = (uint64) ecx
	SCZO = cond(ecx - 1_32)
	branch Test(UGT,CZ) l000000014000170A
	// succ:  l0000000140001664 l000000014000170A
l0000000140001664:
	call fn0000000140001DC4 (retsize: 8;)
	SZO = cond(eax & eax)
	C = false
	branch Test(EQ,Z) l0000000140001698
	// succ:  l000000014000166D l0000000140001698
l000000014000166D:
	SZO = cond(ebx & ebx)
	C = false
	branch Test(NE,Z) l0000000140001698
	// succ:  l0000000140001671 l0000000140001698
l0000000140001671:
	rcx = 0x00000001400035C0
	call initialize_onexit_table (retsize: 8;)
	SZO = cond(eax & eax)
	C = false
	branch Test(EQ,Z) l0000000140001685
	// succ:  l0000000140001681 l0000000140001685
l0000000140001681:
	al = al ^ al
	SZO = cond(al)
	C = false
	goto l00000001400016FF
	// succ:  l00000001400016FF
l0000000140001685:
	rcx = 0x00000001400035D8
	call initialize_onexit_table (retsize: 8;)
	SZO = cond(eax & eax)
	C = false
	al = Test(EQ,Z)
	goto l00000001400016FF
	// succ:  l00000001400016FF
l0000000140001698:
	rdx = Mem0[0x0000000140003000:word64]
	r8 = r8 | 