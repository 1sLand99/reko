void Win32CrtStartup()
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  d0 d1
// LiveOut:
// Trashed:
// Preserved:
// Terminates process
Win32CrtStartup_exit:
// DataOut:
// DataOut (flags): 
// SymbolicIn:

Win32CrtStartup_entry:
// DataOut: d0 d1
// DataOut (flags): 
// SymbolicIn: a7:fp

l00001004:
	__btst(d0, d1)
// DataOut:
// DataOut (flags): 
// SymbolicIn: a7:fp



void fn00001498()
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse: 
// LiveOut:
// Trashed:
// Preserved: a7
fn00001498_entry:
// DataOut:
// DataOut (flags): 
// SymbolicIn: a7:fp

l00001498:
	return
// DataOut:
// DataOut (flags): 
// SymbolicIn: a7:fp

fn00001498_exit:
// DataOut:
// DataOut (flags): 
// SymbolicIn: a7:fp



void fn0000149C(word32 d0, word32 a5)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  a5 d0
// LiveOut:
// Trashed:
// Preserved:
// Terminates process
fn0000149C_exit:
// DataOut:
// DataOut (flags): 
// SymbolicIn:

fn0000149C_entry:
// DataOut: a5 d0
// DataOut (flags): 
// SymbolicIn: a7:fp
// LocalsOut: fp(32)

l0000149C:
	__syscall(0xA9A0)
	branch DPB(dwLoc0A, 0x4270, 0) != 0x00000000 l000014BE
// DataOut: a5 a7 d0
// DataOut (flags): 
// SymbolicIn: a7:fp
// LocalsOut: fp(32)

l000014BE:
	__syscall(0xA86E)
	__syscall(0xA8FE)
	__syscall(0xA912)
	__syscall(0xA930)
	__syscall(0xA9CC)
	__syscall(0xA97B)
	__syscall(0xA850)
	__syscall(0xA986)
// DataOut: a7 d0
// DataOut (flags): 
// SymbolicIn: a7:fp - 0x0000000A -10(fp):0x4270 -8(fp):0x414C5254

l000014B6:
	Mem29[0x00000AF0:word16] = 0x001A
// DataOut: a7 d0
// DataOut (flags): 
// SymbolicIn: a7:fp - 0x0000000A -10(fp):0x4270 -8(fp):0x414C5254

l000014E2:
	__syscall(0xA9F4)
// DataOut:
// DataOut (flags): 
// SymbolicIn: a7:<invalid> -24(fp):0x00000000 -20(fp):0x4270 -18(fp):0x00000000 -14(fp):a5 + -1742 -10(fp):0x4270 -8(fp):0x414C5254



void fn000014E8(word32 a5, word32 dwArg02)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  a5
// LiveOut:
// Trashed: CVZNX a0 a1 a2 a3 a7 d0 d1 d2
// Preserved:
// Stack args: Stack +0002(32)
fn000014E8_entry:
// DataOut: a5
// DataOut (flags): 
// SymbolicIn: a7:fp
// LocalsOut: fp(32) Local -0002(32) Local -0012(0) Stack +0002(32)

l000014E8:
	Mem13[0x0000:word16] = 0x0000
	__syscall(0xA9A0)
	branch dwLoc12 == 0x00000000 l00001592
// DataOut: a5
// DataOut (flags): 
// SymbolicIn: a7:fp
// LocalsOut: fp(32) Local -0002(32) Local -0012(32) Stack +0002(32)

l00001592:
	Mem179[0x00000AF0:word16] = 0xFDA3
	__syscall(0xA9F4)
// DataOut:
// DataOut (flags): 
// SymbolicIn: a7:fp - 18 -16(fp):0x44415441 -8(fp):a2 -4(fp):a3
// LocalsOut: fp(32)

l000014FE:
	word32 a3_39 = Mem13[dwLoc12:word32]
	word32 d0_42 = Mem13[a3_39:word32]
	word32 a2_43 = a5 - d0_42
	word32 a0_172 = a2_43
	word32 d0_171 = d0_42 >>u 0x00000001
	branch d0_42 >>u 0x00000001 == 0x00000000 l00001514
// DataOut: a0 a2 a3 d0
// DataOut (flags): 
// SymbolicIn: a7:fp - 18 -16(fp):0x44415441 -8(fp):a2 -4(fp):a3
// LocalsOut: fp(32) Local -0002(32) Stack +0002(32)

l0000150E:
	Mem173[a0_172:word16] = 0x0000
	a0_172 = a0_172 + 2
	d0_171 = d0_171 - 0x00000001
	branch d0_171 != 0x00000000 l0000150E
// DataOut: a0 a2 a3 d0
// DataOut (flags): 
// SymbolicIn: a7:fp - 18 a3:<invalid> a2:<invalid> d0:<invalid> a0:<invalid> -16(fp):0x44415441 -8(fp):a2 -4(fp):a3
// LocalsOut: fp(32) Local -0002(32) Stack +0002(32)

l00001514:
	word32 a2_49 = a2_43 - Mem13[a3_39 + 4:word32]
	__syscall(0xA02E)
	word32 d0_51 = Mem13[a3_39 + 8:word32]
	word32 a2_52 = a2_49 - d0_51
	word32 a0_165 = a2_52
	word32 d0_164 = d0_51 >>u 0x00000001
	branch d0_51 >>u 0x00000001 == 0x00000000 l00001534
// DataOut: a0 a2 a3 d0
// DataOut (flags): 
// SymbolicIn: a7:fp - 18 a3:<invalid> a2:<invalid> d0:<invalid> a0:<invalid> -16(fp):0x44415441 -8(fp):a2 -4(fp):a3
// LocalsOut: fp(32) Local -0002(32) Stack +0002(32)

l0000152E:
	Mem166[a0_165:word16] = 0x0000
	a0_165 = a0_165 + 2
	d0_164 = d0_164 - 0x00000001
	branch d0_164 != 0x00000000 l0000152E
// DataOut: a0 a2 a3 d0
// DataOut (flags): 
// SymbolicIn: a7:fp - 18 a3:<invalid> a2:<invalid> d0:<invalid> a0:<invalid> a1:<invalid> -16(fp):0x44415441 -8(fp):a2 -4(fp):a3
// LocalsOut: fp(32) Local -0002(32) Stack +0002(32)

l00001534:
	word32 a2_60 = a2_52 - Mem13[a3_39 + 12:word32]
	word32 a3_121 = Mem13[a3_39 + 12:word32] + ((a3_39 + 16) + Mem13[a3_39 + 4:word32])
	__syscall(0xA02E)
// DataOut: a2 a3 d1 d2
// DataOut (flags): 
// SymbolicIn: a7:fp - 18 a3:<invalid> a2:<invalid> d0:<invalid> a0:<invalid> a1:<invalid> -16(fp):0x44415441 -8(fp):a2 -4(fp):a3
// LocalsOut: fp(32)

l00001556:
	word32 d0_126
	byte v19_76 = Mem13[a3_121:byte]
	a3_121 = a3_121 + 1
	word32 d0_122 = (uint32) (uint8) v19_76
	byte CVZN_80 = cond(v19_76)
	branch v19_76 > 0x00 l00001576
// DataOut: a2 a3 d0 d1 d2
// DataOut (flags): VN
// SymbolicIn: a7:fp - 18 a3:<invalid> a2:<invalid> d0:<invalid> a0:<invalid> a1:<invalid> d1:<invalid> d2:SLICE(a3, word32, 16) -16(fp):0x44415441 -8(fp):a2 -4(fp):a3
// LocalsOut: fp(32)

l0000155C:
	branch v19_76 < 0x00 l00001572
// DataOut: a2 a3 d0 d1 d2
// DataOut (flags): 
// SymbolicIn: a7:fp - 18 a3:<invalid> a2:<invalid> d0:<invalid> a0:<invalid> a1:<invalid> d1:<invalid> d2:SLICE(a3, word32, 16) -16(fp):0x44415441 -8(fp):a2 -4(fp):a3
// LocalsOut: fp(32)

l00001572:
	a3_121 = a3_121 + 1
	d0_122 = SEQ(SLICE(SEQ(SLICE(d0_122, word16, 16), SLICE(d0_122, word16, 0) << 0x0008), word24, 8), Mem13[a3_121:byte])
// DataOut: a2 a3 d0 d1 d2
// DataOut (flags): 
// SymbolicIn: a7:fp - 18 a3:<invalid> a2:<invalid> d0:<invalid> a0:<invalid> a1:<invalid> d1:<invalid> d2:SLICE(a3, word32, 16) -16(fp):0x44415441 -8(fp):a2 -4(fp):a3
// LocalsOut: fp(32)

l00001576:
	d0_126 = SEQ(SLICE(d0_122, word16, 16), SLICE(d0_122 * 0x00000002, word16, 0))
// DataOut: a2 a3 d0 d1 d2
// DataOut (flags): 
// SymbolicIn: a7:fp - 18 a3:<invalid> a2:<invalid> d0:<invalid> a0:<invalid> a1:<invalid> d1:<invalid> d2:SLICE(a3, word32, 16) -16(fp):0x44415441 -8(fp):a2 -4(fp):a3
// LocalsOut: fp(32)

l0000155E:
	byte v23_128 = Mem13[a3_121:byte]
	word32 d0_131 = SEQ(SLICE(d0_122, word24, 8), v23_128)
	branch v23_128 == 0x00 l0000159A
// DataOut: a2 a3 d0 d1 d2
// DataOut (flags): 
// SymbolicIn: a7:fp - 18 a3:<invalid> a2:<invalid> d0:<invalid> a0:<invalid> a1:<invalid> d1:<invalid> d2:SLICE(a3, word32, 16) -16(fp):0x44415441 -8(fp):a2 -4(fp):a3
// LocalsOut: fp(32)

l0000159A:
	__syscall(0xA9A3)
	return
// DataOut:
// DataOut (flags): 
// SymbolicIn: a7:fp - 18 a3:<invalid> a2:<invalid> d0:<invalid> a0:<invalid> a1:<invalid> d1:<invalid> d2:SLICE(a3, word32, 16) -16(fp):0x44415441 -8(fp):a2 -4(fp):a3

fn000014E8_exit:
// DataOut:
// DataOut (flags): 
// SymbolicIn: a7:fp - 10 a2:<invalid> a3:SLICE(0x44415441, word32, 16) d0:<invalid> a0:<invalid> a1:<invalid> d1:<invalid> d2:SLICE(a3, word32, 16) -16(fp):0x44415441 -8(fp):a2 -4(fp):a3

l00001562:
	word32 d0_145 = SEQ(SLICE(__swap(SEQ(SLICE(SEQ(SLICE(d0_131, word16, 16), SLICE(d0_131, word16, 0) << 0x0008), word24, 8), Mem13[a3_121 + 1:byte])), word24, 8), Mem13[a3_121 + 2:byte])
	a3_121 = a3_121 + 4
	d0_126 = SEQ(SLICE(SEQ(SLICE(d0_145, word16, 16), SLICE(d0_145, word16, 0) << 0x0008), word24, 8), Mem13[a3_121 + 3:byte]) * 0x00000002
// DataOut: a2 a3 d0 d1 d2
// DataOut (flags): 
// SymbolicIn: a7:fp - 18 a3:<invalid> a2:<invalid> d0:<invalid> a0:<invalid> a1:<invalid> d1:<invalid> d2:SLICE(a3, word32, 16) -16(fp):0x44415441 -8(fp):a2 -4(fp):a3
// LocalsOut: fp(32)

l00001578:
	a2_60 = a2_60 + d0_126
	branch dwArg02 == 0x00000000 l00001582
// DataOut: a2 a3 d1 d2
// DataOut (flags): 
// SymbolicIn: a7:fp - 18 a3:<invalid> a2:<invalid> d0:<invalid> a0:<invalid> a1:<invalid> d1:<invalid> d2:SLICE(a3, word32, 16) -16(fp):0x44415441 -8(fp):a2 -4(fp):a3
// LocalsOut: fp(32)

l0000157E:
	branch DPB(CVZN_80, false, 0) l00001586
// DataOut: a2 a3 d1 d2
// DataOut (flags): 
// SymbolicIn: a7:fp - 18 a3:<invalid> a2:<invalid> d0:<invalid> a0:<invalid> a1:<invalid> d1:<invalid> d2:SLICE(a3, word32, 16) -16(fp):0x44415441 -8(fp):a2 -4(fp):a3
// LocalsOut: fp(32)

l00001586:
	Mem119[a2_60:word32] = Mem13[Mem13[a2_60:word32] + dwArg02 + 2:word32]
// DataOut: a2 a3 d1 d2
// DataOut (flags): 
// SymbolicIn: a7:fp - 18 a3:<invalid> a2:<invalid> d0:<invalid> a0:<invalid> a1:<invalid> d1:<invalid> d2:SLICE(a3, word32, 16) -16(fp):0x44415441 -8(fp):a2 -4(fp):a3
// LocalsOut: fp(32)

l00001582:
	Mem110[a2_60:word32] = Mem13[a2_60:word32] + dwLoc02
// DataOut: a2 a3 d1 d2
// DataOut (flags): 
// SymbolicIn: a7:fp - 18 a3:<invalid> a2:<invalid> d0:<invalid> a0:<invalid> a1:<invalid> d1:<invalid> d2:SLICE(a3, word32, 16) -16(fp):0x44415441 -8(fp):a2 -4(fp):a3
// LocalsOut: fp(32)

l0000158E:
// DataOut: a2 a3 d1 d2
// DataOut (flags): 
// SymbolicIn: a7:fp - 18 a3:<invalid> a2:<invalid> d0:<invalid> a0:<invalid> a1:<invalid> d1:<invalid> d2:SLICE(a3, word32, 16) -16(fp):0x44415441 -8(fp):a2 -4(fp):a3
// LocalsOut: fp(32)



void fn000015E8(word32 d0, word32 a5, word32 dwArg04)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  a5 d0
// LiveOut:
// Trashed: CVZNX a0 d0 d3
// Preserved: a2 a6 a7 d3
// Stack args: Stack +0004(32)
fn000015E8_entry:
// DataOut: a5 d0
// DataOut (flags): 
// SymbolicIn: a7:fp
// LocalsOut: fp(32) Stack +0004(32)

l000015E8:
	word32 a7_24
	word32 a6_25
	word32 d3_26
	byte CVZN_27
	word32 d0_30
	byte ZN_31
	bool C_32
	bool V_33
	bool Z_34
	word32 a0_35
	byte CVZNX_36
	word32 a5_111
	word32 a2_113
	call a5 + 130 (retsize: 4; depth: 20)
		uses: a2_16,a5,a6_5,a7_19,CVZN_22,d3,dwLoc04_4,dwLoc08_10,dwLoc0C_14,dwLoc10_21
		defs: a0_35,a2_28,a5_29,a6_25,a7_24,C_32,CVZN_27,CVZNX_36,d0_30,d3_26,V_33,Z_34,ZN_31
	branch d0_30 == 0x00000000 l0000162A
// DataOut: a2 a5
// DataOut (flags): 
// SymbolicIn: a7:fp
// LocalsOut: fp(32)

l00001602:
	word32 d3_114
	branch a2_113 - (a5_111 + -2656) != 0x00000000 l00001610
// DataOut: a2 a5
// DataOut (flags): 
// SymbolicIn: a7:fp - 0x0000000C a6:fp - 0x00000004 a2:<invalid> -16(fp):<invalid> -12(fp):a2 -8(fp):d3 -4(fp):a6
// LocalsOut: fp(32)

l00001610:
	branch a2_113 - (a5_111 + -2624) != 0x00000000 l00001628
// DataOut: a2 a5
// DataOut (flags): 
// SymbolicIn: a7:fp - 0x0000000C a6:fp - 0x00000004 a2:<invalid> a0:a5 + -2656 -16(fp):<invalid> -12(fp):a2 -8(fp):d3 -4(fp):a6
// LocalsOut: fp(32)

l00001618:
	d3_114 = 1
// DataOut: a2 a5 d3
// DataOut (flags): 
// SymbolicIn: a7:fp - 0x0000000C a6:fp - 0x00000004 a2:<invalid> a0:a5 + -2624 -16(fp):<invalid> -12(fp):a2 -8(fp):d3 -4(fp):a6
// LocalsOut: fp(32)

l0000160A:
	d3_114 = 0
// DataOut: a2 a5 d3
// DataOut (flags): 
// SymbolicIn: a7:fp - 0x0000000C a6:fp - 0x00000004 a2:<invalid> a0:a5 + -2656 -16(fp):<invalid> -12(fp):a2 -8(fp):d3 -4(fp):a6
// LocalsOut: fp(32)

l0000161A:
	Mem91[a5_111 + -1368:word32] = Mem0[a5_111 + -1368:word32] + 0x00000001
	branch (Mem91[a2_113 + 0x0000000C:word16] & 0x010C) == 0x0000 l00001634
// DataOut: a2 a5 d0 d3
// DataOut (flags): 
// SymbolicIn: a7:fp - 0x0000000C a6:fp - 0x00000004 a2:<invalid> a0:<invalid> d3:<invalid> -16(fp):<invalid> -12(fp):a2 -8(fp):d3 -4(fp):a6
// LocalsOut: fp(32)

l00001634:
	branch Mem91[a5_111 + -2696 + d3_114 * 4:word32] != 0x00000000 l00001652
// DataOut: a2 a5 d0 d3
// DataOut (flags): 
// SymbolicIn: a7:fp - 0x0000000C a6:fp - 0x00000004 a2:<invalid> a0:<invalid> d3:<invalid> d0:<invalid> -16(fp):<invalid> -12(fp):a2 -8(fp):d3 -4(fp):a6
// LocalsOut: fp(32)

l0000163E:
	word32 a7_139
	word32 a6_140
	byte CVZN_142
	word32 d0_145
	byte ZN_146
	bool C_147
	bool V_148
	bool Z_149
	word32 a0_150
	byte CVZNX_151
	call a5_111 + 114 (retsize: 4; depth: 20)
		uses: a0_101,a2_28,a5_29,a6_25,a7_137,C_104,CVZN_89,CVZNX_92,d0_96,d3_88,dwLoc04_4,dwLoc08_10,dwLoc0C_14,dwLoc10_138,V_105,Z_103,ZN_102
		defs: a0_150,a2_143,a5_144,a6_140,a7_139,C_147,CVZN_142,CVZNX_151,d0_145,d3_141,V_148,Z_149,ZN_146
	Mem155[a5_111 + -2696 + d3_114 * 4:word32] = d0_145
	branch d0_145 == 0x00000000 l0000162A
// DataOut: a2 a5 d3
// DataOut (flags): 
// SymbolicIn: a7:fp - 0x0000000C a6:fp - 0x00000004 a2:<invalid> a0:a5 + -2696 d3:<invalid> d0:<invalid> -16(fp):<invalid> -12(fp):a2 -8(fp):d3 -4(fp):a6
// LocalsOut: fp(32)

l00001652:
	word32 d0_116 = Mem91[a5_111 + -2696 + d3_114 * 4:word32]
	Mem118[a2_113 + 8:word32] = d0_116
	Mem120[a2_113:word32] = d0_116
	Mem122[a2_113 + 24:word32] = 0x00000200
	Mem124[a2_113 + 4:word32] = 0x00000200
	Mem126[a2_113 + 14:word16] = Mem124[a2_113 + 14:word16] | 0x1102
	return
// DataOut:
// DataOut (flags): 
// SymbolicIn: a7:fp - 0x0000000C a6:fp - 0x00000004 a2:<invalid> a0:a5 + -2696 d3:<invalid> d0:<invalid> -16(fp):<invalid> -12(fp):a2 -8(fp):d3 -4(fp):a6

l00001628:
// DataOut:
// DataOut (flags): 
// SymbolicIn: a7:fp - 0x0000000C a6:fp - 0x00000004 a2:<invalid> a0:<invalid> d3:<invalid> d0:<invalid> -16(fp):<invalid> -12(fp):a2 -8(fp):d3 -4(fp):a6
// LocalsOut: fp(32)

l0000162A:
	return
// DataOut:
// DataOut (flags): 
// SymbolicIn: a7:fp - 0x0000000C a6:fp - 0x00000004 a2:<invalid> a0:<invalid> d3:<invalid> d0:<invalid> -16(fp):<invalid> -12(fp):a2 -8(fp):d3 -4(fp):a6

fn000015E8_exit:
// DataOut:
// DataOut (flags): 
// SymbolicIn: a7:fp a6:a6 a2:a2 d3:<invalid> a0:<invalid> d0:<invalid> -16(fp):<invalid> -12(fp):a2 -8(fp):d3 -4(fp):a6



void fn00001680(word32 dwArg04, word32 dwArg08)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse: 
// LiveOut:
// Trashed: CVZNX d0 d1 d2
// Preserved: a2 a6 a7
// Stack args: Stack +0004(32) Stack +0008(32)
fn00001680_entry:
// DataOut:
// DataOut (flags): 
// SymbolicIn: a7:fp
// LocalsOut: fp(32) Stack +0004(32) Stack +0008(32)

l00001680:
	branch dwArg04 == 0x00000000 l000016B8
// DataOut: a2
// DataOut (flags): 
// SymbolicIn: a7:fp
// LocalsOut: fp(32)

l000016B8:
	branch __btst(Mem0[dwArg08 + 14:byte], 0x0004) l000016C8
// DataOut: a2
// DataOut (flags): 
// SymbolicIn: a7:fp - 0x00000008 a6:fp - 0x00000004 a2:<invalid> -8(fp):a2 -4(fp):a6
// LocalsOut: fp(32)

l000016C0:
	fn00001D80(dwArg08)
// DataOut:
// DataOut (flags): 
// SymbolicIn: a7:fp - 0x00000008 a6:fp - 0x00000004 a2:<invalid> -8(fp):a2 -4(fp):a6
// LocalsOut: fp(32)

l00001690:
	branch __btst(Mem0[dwArg08 + 14:byte], 0x0004) l000016C8
// DataOut: a2
// DataOut (flags): 
// SymbolicIn: a7:fp - 0x00000008 a6:fp - 0x00000004 a2:<invalid> -8(fp):a2 -4(fp):a6
// LocalsOut: fp(32)

l000016C8:
	return
// DataOut:
// DataOut (flags): 
// SymbolicIn: a7:fp - 0x00000008 a6:fp - 0x00000004 a2:<invalid> d1:<invalid> d0:<invalid> d2:2 -12(fp):<invalid> -8(fp):a2 -4(fp):a6

l00001698:
	fn00001D80(dwArg08)
	Mem48[dwArg08 + 14:word16] = Mem0[dwArg08 + 14:word16] & 0xEEFF
	Mem51[dwArg08 + 24:word32] = 0
	Mem53[dwArg08:word32] = 0
	Mem55[dwArg08 + 8:word32] = 0
	return
// DataOut:
// DataOut (flags): 
// SymbolicIn: a7:fp - 0x00000008 a6:fp - 0x00000004 a2:<invalid> -8(fp):a2 -4(fp):a6

fn00001680_exit:
// DataOut:
// DataOut (flags): 
// SymbolicIn: a7:fp a6:a6 a2:a2 d2:<invalid> d1:<invalid> d0:<invalid> -12(fp):<invalid> -8(fp):a2 -4(fp):a6



void fn000016D0(word32 d0, word32 d6, word32 a5, word32 dwArg08)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  a5 d0 d6
// LiveOut:
// Trashed: CVZNX a0 a2 a3 a4 a6 a7 d0 d2 d3 d4 d5 d6 d7
// Preserved: a2 a3 a4 a6 a7 d3 d4 d5 d6 d7
// Stack args: Stack +0008(32)
fn000016D0_entry:
// DataOut: a5 d0 d6
// DataOut (flags): 
// SymbolicIn: a7:fp
// LocalsOut: fp(32) Stack +0008(32)

l000016D0:
	word32 dwLoc0C_122 = 0
	word32 d6_132 = SEQ(SLICE(d6, word24, 8), Mem0[dwArg08:byte])
	word32 dwArg08_123 = dwArg08 + 0x00000001
	branch SLICE(d6_132, byte, 0) == 0x00 l00001C34
// DataOut: a2 a3 d0 d6
// DataOut (flags): 
// SymbolicIn: a7:fp
// LocalsOut: fp(32) Local -000C(32) Stack +0008(32)

l000016FA:
// DataOut: a2 a3 d0 d6
// DataOut (flags): 
// SymbolicIn: a7:fp - 0x00000244 a6:fp - 0x00000004 a3:a5 + -2040 a2:a5 + -2072 d7:0 a0:<invalid> d6:<invalid> -580(fp):d3 -576(fp):d4 -572(fp):d5 -568(fp):d6 -564(fp):d7 -560(fp):a2 -556(fp):a3 -552(fp):a4 -548(fp):0 -12(fp):0 -4(fp):a6 8(fp):<invalid>
// LocalsOut: fp(32) Local -000C(32) Stack +0008(32)

l0000170E:
	branch DPB(VN, false, 0) l00001C34
// DataOut: a2 a3 d0 d6
// DataOut (flags): 
// SymbolicIn: a7:fp - 0x00000244 a6:fp - 0x00000004 a3:a5 + -2040 a2:a5 + -2072 d7:<invalid> a0:<invalid> d6:<invalid> d3:<invalid> d4:<invalid> d5:<invalid> a4:<invalid> d0:<invalid> d2:7 -580(fp):d3 -576(fp):d4 -572(fp):d5 -568(fp):d6 -564(fp):d7 -560(fp):a2 -556(fp):a3 -552(fp):a4 -548(fp):0 -12(fp):<invalid> -4(fp):a6 8(fp):<invalid>
// LocalsOut: fp(32) Local -000C(32) Stack +0008(32)

l00001716:
	word32 d0_140
	byte v26_137 = SLICE(d6_132, byte, 0) - 0x20
	VN = cond(v26_137) (alias)
	branch v26_137 < 0x00 l00001734
// DataOut: a2 a3 d0 d6
// DataOut (flags): 
// SymbolicIn: a7:fp - 0x00000244 a6:fp - 0x00000004 a3:a5 + -2040 a2:a5 + -2072 d7:<invalid> a0:<invalid> d6:<invalid> d3:<invalid> d4:<invalid> d5:<invalid> a4:<invalid> d0:<invalid> d2:7 -580(fp):d3 -576(fp):d4 -572(fp):d5 -568(fp):d6 -564(fp):d7 -560(fp):a2 -556(fp):a3 -552(fp):a4 -548(fp):0 -12(fp):<invalid> -4(fp):a6 8(fp):<invalid>
// LocalsOut: fp(32) Local -000C(32) Stack +0008(32)

l0000171C:
	branch SLICE(d6_132, byte, 0) > 0x78 l00001734
// DataOut: a2 a3 d0 d6
// DataOut (flags): 
// SymbolicIn: a7:fp - 0x00000244 a6:fp - 0x00000004 a3:a5 + -2040 a2:a5 + -2072 d7:<invalid> a0:<invalid> d6:<invalid> d3:<invalid> d4:<invalid> d5:<invalid> a4:<invalid> d0:<invalid> d2:7 -580(fp):d3 -576(fp):d4 -572(fp):d5 -568(fp):d6 -564(fp):d7 -560(fp):a2 -556(fp):a3 -552(fp):a4 -548(fp):0 -12(fp):<invalid> -4(fp):a6 8(fp):<invalid>
// LocalsOut: fp(32) Local -000C(32) Stack +0008(32)

l00001734:
	d0_140 = 0
// DataOut: a2 a3 d0 d6
// DataOut (flags): 
// SymbolicIn: a7:fp - 0x00000244 a6:fp - 0x00000004 a3:a5 + -2040 a2:a5 + -2072 d7:<invalid> a0:<invalid> d6:<invalid> d3:<invalid> d4:<invalid> d5:<invalid> a4:<invalid> d0:<invalid> d2:7 -580(fp):d3 -576(fp):d4 -572(fp):d5 -568(fp):d6 -564(fp):d7 -560(fp):a2 -556(fp):a3 -552(fp):a4 -548(fp):0 -12(fp):<invalid> -4(fp):a6 8(fp):<invalid>
// LocalsOut: fp(32) Local -000C(32) Stack +0008(32)

l00001722:
	word32 d0_206 = (int32) (int8) SEQ(SLICE(d0, word24, 8), SLICE(d6_132, byte, 0))
	word32 d0_209 = SEQ(SLICE(d0_206, word24, 8), Mem0[a5 + -2072 + d0_206:byte])
	d0_140 = (int32) (int8) SEQ(SLICE(d0_209, word24, 8), SLICE(d0_209, byte, 0) & 0x0F)
// DataOut: a2 a3 d0 d6
// DataOut (flags): 
// SymbolicIn: a7:fp - 0x00000244 a6:fp - 0x00000004 a3:a5 + -2040 a2:a5 + -2072 d7:<invalid> a0:<invalid> d6:<invalid> d3:<invalid> d4:<invalid> d5:<invalid> a4:<invalid> d0:<invalid> d2:7 -580(fp):d3 -576(fp):d4 -572(fp):d5 -568(fp):d6 -564(fp):d7 -560(fp):a2 -556(fp):a3 -552(fp):a4 -548(fp):0 -12(fp):<invalid> -4(fp):a6 8(fp):<invalid>
// LocalsOut: fp(32) Local -000C(32) Stack +0008(32)

l00001736:
	word32 d0_145 = (d0_140 << 0x00000003) + dwLoc0C_122
	word32 d0_148 = SEQ(SLICE(d0_145, word24, 8), Mem0[a5 + -2040 + d0_145:byte])
	d0 = (int32) (int8) SEQ(SLICE(d0_148, word24, 8), SLICE(d0_148, byte, 0) >> 0x04)
	dwLoc0C_122 = d0
	branch d0 >u 7 l00001C24
// DataOut: a2 a3 d0 d6
// DataOut (flags): 
// SymbolicIn: a7:fp - 0x00000244 a6:fp - 0x00000004 a3:a5 + -2040 a2:a5 + -2072 d7:<invalid> a0:<invalid> d6:<invalid> d3:<invalid> d4:<invalid> d5:<invalid> a4:<invalid> d0:<invalid> d2:7 -580(fp):d3 -576(fp):d4 -572(fp):d5 -568(fp):d6 -564(fp):d7 -560(fp):a2 -556(fp):a3 -552(fp):a4 -548(fp):0 -12(fp):<invalid> -4(fp):a6 8(fp):<invalid>
// LocalsOut: fp(32) Local -000C(32) Stack +0008(32)

l00001C24:
	d6_132 = SEQ(SLICE(d6_132, word24, 8), Mem0[dwArg08_123:byte])
	dwArg08_123 = dwArg08_123 + 0x00000001
	branch SLICE(d6_132, byte, 0) != 0x00 l0000170E
// DataOut: a2 a3 d0 d6
// DataOut (flags): 
// SymbolicIn: a7:fp - 0x00000244 a6:fp - 0x00000004 a3:a5 + -2040 a2:a5 + -2072 d7:<invalid> a0:<invalid> d6:<invalid> d3:<invalid> d4:<invalid> d5:<invalid> a4:<invalid> d0:<invalid> d2:7 -580(fp):d3 -576(fp):d4 -572(fp):d5 -568(fp):d6 -564(fp):d7 -560(fp):a2 -556(fp):a3 -552(fp):a4 -548(fp):0 -12(fp):<invalid> -4(fp):a6 8(fp):<invalid>
// LocalsOut: fp(32) Local -000C(32) Stack +0008(32)

l00001C34:
	return
// DataOut:
// DataOut (flags): 
// SymbolicIn: a7:fp - 0x00000244 a6:fp - 0x00000004 a3:a5 + -2040 a2:a5 + -2072 d7:<invalid> a0:<invalid> d6:<invalid> d3:<invalid> d4:<invalid> d5:<invalid> a4:<invalid> d0:<invalid> d2:7 -580(fp):d3 -576(fp):d4 -572(fp):d5 -568(fp):d6 -564(fp):d7 -560(fp):a2 -556(fp):a3 -552(fp):a4 -548(fp):0 -12(fp):<invalid> -4(fp):a6 8(fp):<invalid>

l00001750:
	word32 d0_162 = SEQ(SLICE(d0, word16, 16), Mem0[0x00001758 + (int32) ((int16) d0) * 2:word16])
	word32 a7_164
	word32 a6_165
	word32 a4_166
	word32 a3_167
	word32 a2_168
	word32 d7_169
	word32 d6_170
	word32 d5_171
	word32 d4_172
	word32 d3_173
	word32 a5_174
	byte CVZN_175
	word32 a0_176
	byte CVZNX_177
	byte ZN_178
	bool C_179
	bool V_180
	bool Z_181
	byte VN_182
	byte VZN_183
	word32 d0_184
	word32 d2_185
	call 0x00001758 + (int32) ((int16) d0_162) (retsize: 4; depth: 584)
		uses: a0_130,a2_33,a3_32,a4_117,a5,a6_5,a7_28,C_159,CVZN_163,CVZNX_152,d0_162,d2_156,d3_111,d4_113,d5_115,d6_132,d7_119,dwLoc0224_36,dwLoc0228_9,dwLoc022C_12,dwLoc0230_15,dwLoc0234_18,dwLoc0238_21,dwLoc023C_24,dwLoc0240_27,dwLoc0244_30,dwLoc04_4,dwLoc0C_155,dwLoc10,dwLoc14,dwLoc18,dwLoc1C,dwLoc20,V_142,VN_139,VZN_141,Z_128,ZN_143
		defs: a0_176,a2_168,a3_167,a4_166,a5_174,a6_165,a7_164,C_179,CVZN_175,CVZNX_177,d0_184,d2_185,d3_173,d4_172,d5_171,d6_170,d7_169,V_180,VN_182,VZN_183,Z_181,ZN_178
	return
// DataOut:
// DataOut (flags): 
// SymbolicIn: a7:fp - 0x00000244 a6:fp - 0x00000004 a3:a5 + -2040 a2:a5 + -2072 d7:<invalid> a0:<invalid> d6:<invalid> d3:<invalid> d4:<invalid> d5:<invalid> a4:<invalid> d0:<invalid> d2:7 -580(fp):d3 -576(fp):d4 -572(fp):d5 -568(fp):d6 -564(fp):d7 -560(fp):a2 -556(fp):a3 -552(fp):a4 -548(fp):0 -12(fp):<invalid> -4(fp):a6 8(fp):<invalid>

fn000016D0_exit:
// DataOut:
// DataOut (flags): 
// SymbolicIn: a7:<invalid> a6:<invalid> a3:<invalid> a2:<invalid> d7:<invalid> a0:<invalid> d6:<invalid> d0:<invalid> d3:<invalid> d4:<invalid> d5:<invalid> a4:<invalid> d2:7 -580(fp):d3 -576(fp):d4 -572(fp):d5 -568(fp):d6 -564(fp):d7 -560(fp):a2 -556(fp):a3 -552(fp):a4 -548(fp):0 -12(fp):<invalid> -4(fp):a6 8(fp):<invalid>



void fn00001C40(word32 a5, word32 dwArg04, byte bArg07, word32 dwArg08, word32 dwArg0C)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  a5
// LiveOut:
// Trashed: CVZNX a0 a1 d0 d1 d2
// Preserved: a6 a7
// Stack args: Stack +0004(32) Stack +0007(8) Stack +0008(32) Stack +000C(32)
fn00001C40_entry:
// DataOut: a5 d3 d4 d5 d6
// DataOut (flags): 
// SymbolicIn: a7:fp
// LocalsOut: fp(32) Stack +0004(32) Stack +0007(8) Stack +0008(32) Stack +000C(32)

l00001C40:
	word32 d0_17
	word32 v5_10 = Mem0[dwArg08 + 4:word32] - 0x00000001
	Mem11[dwArg08 + 4:word32] = v5_10
	branch v5_10 < 0x00000000 l00001C60
// DataOut: a1 a5 d3 d4 d5 d6
// DataOut (flags): 
// SymbolicIn: a7:fp
// LocalsOut: fp(32) Stack +0004(32) Stack +0007(8) Stack +000C(32)

l00001C60:
	d0_17 = fn00001E94(a5, dwArg04, SLICE(dwArg04, byte, 24), dwArg08)
// DataOut: a5 d0 d3 d4 d5 d6
// DataOut (flags): 
// SymbolicIn: a7:fp - 0x00000004 a6:fp - 0x00000004 a1:<invalid> -4(fp):a6
// LocalsOut: fp(32) Stack +000C(32)

l00001C4E:
	Mem44[Mem11[dwArg08:word32]:byte] = bArg07
	word32 a0_45 = Mem44[dwArg08:word32]
	d0_17 = (int32) (int16) (uint32) (uint8) Mem44[a0_45:byte]
	Mem53[dwArg08:word32] = a0_45 + 1
// DataOut: a5 d0 d3 d4 d5 d6
// DataOut (flags): 
// SymbolicIn: a7:fp - 0x00000004 a6:fp - 0x00000004 a1:<invalid> -4(fp):a6
// LocalsOut: fp(32) Stack +000C(32)

l00001C6C:
	branch d0_17 != -1 l00001C7C
// DataOut: a0 a5 d0 d3 d4 d5 d6
// DataOut (flags): 
// SymbolicIn: a7:fp - 0x00000004 a6:fp - 0x00000004 a1:<invalid> a0:<invalid> d0:<invalid> d1:<invalid> d2:<invalid> -12(fp):<invalid> -8(fp):<invalid> -4(fp):a6
// LocalsOut: fp(32)

l00001C7C:
	Mem36[dwArg0C:word32] = Mem11[dwArg0C:word32] + 0x00000001
	return
// DataOut: a5 d3 d4 d5 d6
// DataOut (flags): 
// SymbolicIn: a7:fp - 0x00000004 a6:fp - 0x00000004 a1:<invalid> a0:<invalid> d0:<invalid> d2:-1 d1:<invalid> -12(fp):<invalid> -8(fp):<invalid> -4(fp):a6

l00001C76:
	Mem30[dwArg0C:word32] = d0_17
	return
// DataOut: a5 d3 d4 d5 d6
// DataOut (flags): 
// SymbolicIn: a7:fp - 0x00000004 a6:fp - 0x00000004 a1:<invalid> a0:<invalid> d0:<invalid> d2:-1 d1:<invalid> -12(fp):<invalid> -8(fp):<invalid> -4(fp):a6

fn00001C40_exit:
// DataOut:
// DataOut (flags): 
// SymbolicIn: a7:fp a6:a6 a1:<invalid> a0:<invalid> d0:<invalid> d2:-1 d1:<invalid> -12(fp):<invalid> -8(fp):<invalid> -4(fp):a6



void fn00001C84(word32 a5, word32 dwArg04, word32 dwArg08, word32 dwArg0C, word32 dwArg10)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  a5
// LiveOut:
// Trashed: CVZNX a0 a1 d0 d1 d2
// Preserved: a6 a7 d3 d4 d5 d6
// Stack args: Stack +0004(32) Stack +0008(32) Stack +000C(32) Stack +0010(32)
fn00001C84_entry:
// DataOut: a5
// DataOut (flags): 
// SymbolicIn: a7:fp
// LocalsOut: fp(32) Stack +0004(32) Stack +0008(32) Stack +000C(32) Stack +0010(32)

l00001C84:
	byte VZN_28 = DPB(VZN, false, 0)
	branch VZN_28 l00001CBA
// DataOut: a5 d5
// DataOut (flags): 
// SymbolicIn: a7:fp
// LocalsOut: fp(32) Stack +0004(32) Stack +000C(32) Stack +0010(32)

l00001C98:
// DataOut: a5 d3 d4 d5 d6
// DataOut (flags): 
// SymbolicIn: a7:fp - 0x00000014 a6:fp - 0x00000004 d5:<invalid> d0:<invalid> -20(fp):d3 -16(fp):d4 -12(fp):d5 -8(fp):d6 -4(fp):a6
// LocalsOut: fp(32)

l00001CA4:
	fn00001C40(a5, dwArg04, SLICE(dwArg04, byte, 24), dwArg0C, dwArg10)
	VZN_28 = DPB(VZN_28, false, 0) (alias)
	branch VZN_28 l00001CA4
// DataOut: a5 d3 d4 d5 d6
// DataOut (flags): 
// SymbolicIn: a7:fp - 0x00000014 a6:fp - 0x00000004 d5:<invalid> d0:<invalid> d3:<invalid> d4:<invalid> d6:<invalid> a1:<invalid> a0:<invalid> d2:-1 d1:<invalid> -32(fp):<invalid> -28(fp):<invalid> -24(fp):<invalid> -20(fp):d3 -16(fp):d4 -12(fp):d5 -8(fp):d6 -4(fp):a6
// LocalsOut: fp(32)

l00001CBA:
	return
// DataOut:
// DataOut (flags): 
// SymbolicIn: a7:fp - 0x00000014 a6:fp - 0x00000004 d5:<invalid> d0:<invalid> d3:<invalid> d4:<invalid> d6:<invalid> a1:<invalid> a0:<invalid> d2:-1 d1:<invalid> -32(fp):<invalid> -28(fp):<invalid> -24(fp):<invalid> -20(fp):d3 -16(fp):d4 -12(fp):d5 -8(fp):d6 -4(fp):a6

fn00001C84_exit:
// DataOut:
// DataOut (flags): 
// SymbolicIn: a7:fp a6:a6 d5:d5 d0:<invalid> d3:d3 d4:d4 d6:d6 a1:<invalid> a0:<invalid> d2:-1 d1:<invalid> -32(fp):<invalid> -28(fp):<invalid> -24(fp):<invalid> -20(fp):d3 -16(fp):d4 -12(fp):d5 -8(fp):d6 -4(fp):a6



void fn00001CC4(word32 a5, word32 dwArg04, word32 dwArg08, word32 dwArg0C, word32 dwArg10)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  a5
// LiveOut:
// Trashed: CVZNX a0 a1 d0 d1 d2
// Preserved: a6 a7 d3 d4 d5 d6
// Stack args: Stack +0004(32) Stack +0008(32) Stack +000C(32) Stack +0010(32)
fn00001CC4_entry:
// DataOut: a5
// DataOut (flags): 
// SymbolicIn: a7:fp
// LocalsOut: fp(32) Stack +0004(32) Stack +0008(32) Stack +000C(32) Stack +0010(32)

l00001CC4:
	word32 d0_21 = dwArg08
	word32 d5_22 = dwArg08 - 0x00000001
	byte VZN_28 = DPB(VZN, false, 0)
	branch VZN_28 l00001D02
// DataOut: a5 d0 d5
// DataOut (flags): 
// SymbolicIn: a7:fp
// LocalsOut: fp(32) Stack +0004(32) Stack +000C(32) Stack +0010(32)

l00001CD8:
	word32 d3_58 = dwArg04
// DataOut: a5 d0 d3 d4 d5 d6
// DataOut (flags): 
// SymbolicIn: a7:fp - 0x00000014 a6:fp - 0x00000004 d5:<invalid> d0:<invalid> -20(fp):d3 -16(fp):d4 -12(fp):d5 -8(fp):d6 -4(fp):a6
// LocalsOut: fp(32)

l00001CE4:
	word32 d0_81 = (int32) (int8) SEQ(SLICE(d0_21, word24, 8), Mem0[d3_58:byte])
	fn00001C40(a5, d0_81, SLICE(d0_81, byte, 24), dwArg0C, dwArg10)
	d3_58 = d3_58 + 0x00000001
	d0_21 = d5_22
	d5_22 = d5_22 - 0x00000001
	VZN_28 = DPB(VZN_28, false, 0) (alias)
	branch VZN_28 l00001CE4
// DataOut: a5 d0 d3 d4 d5 d6
// DataOut (flags): 
// SymbolicIn: a7:fp - 0x00000014 a6:fp - 0x00000004 d5:<invalid> d0:<invalid> d3:<invalid> d4:<invalid> d6:<invalid> a0:<invalid> a1:<invalid> d2:-1 d1:<invalid> -32(fp):<invalid> -28(fp):<invalid> -24(fp):<invalid> -20(fp):d3 -16(fp):d4 -12(fp):d5 -8(fp):d6 -4(fp):a6
// LocalsOut: fp(32)

l00001D02:
	return
// DataOut:
// DataOut (flags): 
// SymbolicIn: a7:fp - 0x00000014 a6:fp - 0x00000004 d5:<invalid> d0:<invalid> d3:<invalid> d4:<invalid> d6:<invalid> a0:<invalid> a1:<invalid> d2:-1 d1:<invalid> -32(fp):<invalid> -28(fp):<invalid> -24(fp):<invalid> -20(fp):d3 -16(fp):d4 -12(fp):d5 -8(fp):d6 -4(fp):a6

fn00001CC4_exit:
// DataOut:
// DataOut (flags): 
// SymbolicIn: a7:fp a6:a6 d5:d5 d0:<invalid> d3:d3 d4:d4 d6:d6 a0:<invalid> a1:<invalid> d2:-1 d1:<invalid> -32(fp):<invalid> -28(fp):<invalid> -24(fp):<invalid> -20(fp):d3 -16(fp):d4 -12(fp):d5 -8(fp):d6 -4(fp):a6



void fn00001D0C(word32 dwArg04)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse: 
// LiveOut:
// Trashed: CVZN a0 a1 d0
// Preserved: a6 a7
// Stack args: Stack +0004(32)
fn00001D0C_entry:
// DataOut:
// DataOut (flags): 
// SymbolicIn: a7:fp
// LocalsOut: fp(32) Stack +0004(32)

l00001D0C:
	Mem12[dwArg04:word32] = Mem0[dwArg04:word32] + 4
	return
// DataOut:
// DataOut (flags): 
// SymbolicIn: a7:fp

fn00001D0C_exit:
// DataOut:
// DataOut (flags): 
// SymbolicIn: a7:fp a6:a6 a0:<invalid> a1:<invalid> d0:<invalid> -4(fp):a6



word32 fn00001D24(word32 a5, word32 dwArg04)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  a5
// LiveOut: d0
// Trashed: CVZNX d0 d1 d2
// Preserved: a2 a6 a7
// Stack args: Stack +0004(32)
fn00001D24_entry:
// DataOut: a5 d3 d4 d5
// DataOut (flags): 
// SymbolicIn: a7:fp
// LocalsOut: fp(32) Stack +0004(32)

l00001D24:
	branch dwArg04 != 0x00000000 l00001D44
// DataOut: a2 a5 d3 d4 d5
// DataOut (flags): 
// SymbolicIn: a7:fp
// LocalsOut: fp(32)

l00001D44:
	word32 d0_48 = fn00001D80(dwArg04)
	branch d0_48 == 0x00000000 l00001D58
// DataOut: a2 a5 d0 d3 d4 d5
// DataOut (flags): 
// SymbolicIn: a7:fp - 0x00000008 a6:fp - 0x00000004 a2:<invalid> d0:<invalid> -8(fp):a2 -4(fp):a6
// LocalsOut: fp(32)

l00001D58:
	bool Z_63 = __btst(Mem0[dwArg04 + 14:byte], 0x0006)
	branch Z_63 l00001D78
// DataOut: a2 a5 d0 d3 d4 d5
// DataOut (flags): 
// SymbolicIn: a7:fp - 0x00000008 a6:fp - 0x00000004 a2:<invalid> d0:<invalid> d1:<invalid> d2:2 -12(fp):<invalid> -8(fp):a2 -4(fp):a6
// LocalsOut: fp(32)

l00001D78:
	return 0
// DataOut: a5 d0 d3 d4 d5
// DataOut (flags): 
// SymbolicIn: a7:fp - 0x00000008 a6:fp - 0x00000004 a2:<invalid> d0:<invalid> d1:<invalid> d2:2 -12(fp):<invalid> -8(fp):a2 -4(fp):a6

l00001D60:
	word32 a7_69
	word32 a6_70
	word32 a2_71
	byte CVZN_72
	word32 d0_73
	bool Z_74
	word32 d2_75
	byte ZN_76
	bool C_77
	bool V_78
	word32 a5_79
	call a5 + 138 (retsize: 4; depth: 16)
		uses: a2_12,a5,a6_5,a7_65,C_52,CVZN_68,d0_48,d2,dwLoc04_4,dwLoc08_10,dwLoc0C_67,V_53,Z_63,ZN_50
		defs: a2_71,a5_79,a6_70,a7_69,C_77,CVZN_72,d0_73,d2_75,V_78,Z_74,ZN_76
	return (int32) (int8) SEQ(SLICE(d0_73, word31, 8), (bool) cond(d0_73))
// DataOut: a5 d0 d3 d4 d5
// DataOut (flags): 
// SymbolicIn: a7:fp - 0x00000008 a6:fp - 0x00000004 a2:<invalid> d0:<invalid> d1:<invalid> d2:2 -12(fp):<invalid> -8(fp):a2 -4(fp):a6

l00001D50:
	return -1
// DataOut: a5 d0 d3 d4 d5
// DataOut (flags): 
// SymbolicIn: a7:fp - 0x00000008 a6:fp - 0x00000004 a2:<invalid> d0:<invalid> d1:<invalid> d2:2 -12(fp):<invalid> -8(fp):a2 -4(fp):a6

l00001D32:
	return fn00001E04(a5, 0)
// DataOut: a5 d0 d3 d4 d5
// DataOut (flags): 
// SymbolicIn: a7:fp - 0x00000008 a6:fp - 0x00000004 a2:<invalid> d0:<invalid> -8(fp):a2 -4(fp):a6

fn00001D24_exit:
// DataOut: d0
// DataOut (flags): 
// SymbolicIn: a7:fp a6:a6 a2:a2 d0:<invalid> d2:<invalid> d1:<invalid> -12(fp):<invalid> -8(fp):a2 -4(fp):a6



word32 fn00001D80(word32 dwArg04)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse: 
// LiveOut: d0
// Trashed: CVZNX d0 d1 d2
// Preserved: a2 a6 a7 d3 d4
// Stack args: Stack +0004(32)
fn00001D80_entry:
// DataOut: a5 d5
// DataOut (flags): 
// SymbolicIn: a7:fp
// LocalsOut: fp(32) Stack +0004(32)

l00001D80:
	word32 d1_20 = Mem0[dwArg04 + 12:word32]
	word32 d3_118 = 0
	word32 a2_18 = dwArg04
	branch (d1_20 & 3) != 2 l00001DE0
// DataOut: a2 a5 d1 d3 d5
// DataOut (flags): 
// SymbolicIn: a7:fp
// LocalsOut: fp(32)

l00001D9E:
	branch (SLICE(d1_20, word16, 0) & 0x0108) == 0x0000 l00001DE0
// DataOut: a2 a5 d3 d5
// DataOut (flags): 
// SymbolicIn: a7:fp - 0x00000010 a6:fp - 0x00000004 d3:0 a2:<invalid> d1:<invalid> d0:<invalid> d4:3 d2:2 -16(fp):d3 -12(fp):d4 -8(fp):a2 -4(fp):a6
// LocalsOut: fp(32)

l00001DA4:
	word32 d0_73 = Mem0[dwArg04 + 8:word32]
	word32 d4_75 = Mem0[dwArg04:word32] - d0_73
	branch d4_75 <= 0x00000000 l00001DE0
// DataOut: a2 a5 d0 d3 d4 d5
// DataOut (flags): 
// SymbolicIn: a7:fp - 0x00000010 a6:fp - 0x00000004 d3:0 a2:<invalid> d1:<invalid> d0:<invalid> d4:3 d2:2 -16(fp):d3 -12(fp):d4 -8(fp):a2 -4(fp):a6
// LocalsOut: fp(32)

l00001DAE:
	word32 a7_89
	word32 a6_90
	word32 d4_92
	byte CVZN_94
	word32 d1_95
	word32 d0_96
	byte ZN_97
	bool C_98
	bool V_99
	word32 d2_100
	bool Z_101
	byte CVZNX_102
	byte VZN_103
	word32 a5_104
	call a5 + 146 (retsize: 4; depth: 32)
		uses: a2_18,a5,a6_5,a7_85,C_71,CVZN_88,CVZNX_76,d0_73,d1_68,d2_24,d3_16,d4_75,dwLoc04_4,dwLoc08_9,dwLoc0C_12,dwLoc10_15,dwLoc14_80,dwLoc18_83,dwLoc1C_87,V_72,VZN_77,Z_70,ZN_69
		defs: a2_91,a5_104,a6_90,a7_89,C_98,CVZN_94,CVZNX_102,d0_96,d1_95,d2_100,d3_93,d4_92,V_99,VZN_103,Z_101,ZN_97
	branch d0_96 - d4_92 != 0x00000000 l00001DD8
// DataOut: a2 a5 d3 d5
// DataOut (flags): 
// SymbolicIn: a7:fp - 0x00000010 a6:fp - 0x00000004 d3:0 a2:<invalid> d1:<invalid> d0:<invalid> d4:<invalid> d2:2 -16(fp):d3 -12(fp):d4 -8(fp):a2 -4(fp):a6
// LocalsOut: fp(32)

l00001DD8:
	__bset(Mem0[a2_18 + 15:byte], 0x0005, out Mem0[a2_18 + 15:byte])
	d3_118 = -1
// DataOut: a2 a5 d3 d5
// DataOut (flags): 
// SymbolicIn: a7:fp - 0x00000010 a6:fp - 0x00000004 d3:0 a2:<invalid> d1:<invalid> d0:<invalid> d4:<invalid> d2:2 -28(fp):<invalid> -24(fp):<invalid> -20(fp):<invalid> -16(fp):d3 -12(fp):d4 -8(fp):a2 -4(fp):a6
// LocalsOut: fp(32)

l00001DC2:
	word32 d0_109 = Mem0[a2_18 + 12:word32]
	branch __btst(SLICE(d0_109, byte, 0), 0x0007) l00001DE0
// DataOut: a2 a5 d0 d3 d5
// DataOut (flags): 
// SymbolicIn: a7:fp - 0x00000010 a6:fp - 0x00000004 d3:0 a2:<invalid> d1:<invalid> d0:<invalid> d4:<invalid> d2:2 -28(fp):<invalid> -24(fp):<invalid> -20(fp):<invalid> -16(fp):d3 -12(fp):d4 -8(fp):a2 -4(fp):a6
// LocalsOut: fp(32)

l00001DCC:
	word32 d0_112
	__bclr(d0_109, 0x00000001, out d0_112)
	Mem115[a2_18 + 12:word32] = d0_112
// DataOut: a2 a5 d3 d5
// DataOut (flags): 
// SymbolicIn: a7:fp - 0x00000010 a6:fp - 0x00000004 d3:0 a2:<invalid> d1:<invalid> d0:<invalid> d4:<invalid> d2:2 -28(fp):<invalid> -24(fp):<invalid> -20(fp):<invalid> -16(fp):d3 -12(fp):d4 -8(fp):a2 -4(fp):a6
// LocalsOut: fp(32)

l00001DE0:
	Mem52[a2_18:word32] = Mem0[a2_18 + 8:word32]
	Mem55[a2_18 + 4:word32] = 0
	return d3_118
// DataOut: a5 d0 d5
// DataOut (flags): 
// SymbolicIn: a7:fp - 0x00000010 a6:fp - 0x00000004 d3:<invalid> a2:<invalid> d1:<invalid> d0:<invalid> d4:<invalid> d2:2 -28(fp):<invalid> -24(fp):<invalid> -20(fp):<invalid> -16(fp):d3 -12(fp):d4 -8(fp):a2 -4(fp):a6

fn00001D80_exit:
// DataOut: d0
// DataOut (flags): 
// SymbolicIn: a7:fp a6:a6 d3:d3 a2:a2 d1:<invalid> d0:<invalid> d4:d4 d2:2 -28(fp):<invalid> -24(fp):<invalid> -20(fp):<invalid> -16(fp):d3 -12(fp):d4 -8(fp):a2 -4(fp):a6



void fn00001DF4(word32 a5)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  a5
// LiveOut:
// Trashed: CVZNX d0 d1 d2
// Preserved: a6 a7
fn00001DF4_entry:
// DataOut: a5
// DataOut (flags): 
// SymbolicIn: a7:fp
// LocalsOut: fp(32)

l00001DF4:
	fn00001E04(a5, 1)
	return
// DataOut:
// DataOut (flags): 
// SymbolicIn: a7:fp

fn00001DF4_exit:
// DataOut:
// DataOut (flags): 
// SymbolicIn: a7:fp a6:a6 d2:<invalid> d0:<invalid> d1:<invalid> -8(fp):1 -4(fp):a6



word32 fn00001E04(word32 a5, word32 dwArg04)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  a5
// LiveOut: d0
// Trashed: CVZNX d0 d1 d2
// Preserved: a2 a6 a7 d3 d4 d5 d6 d7
// Stack args: Stack +0004(32)
fn00001E04_entry:
// DataOut: a5
// DataOut (flags): 
// SymbolicIn: a7:fp
// LocalsOut: fp(32) Stack +0004(32)

l00001E04:
	word32 a2_103 = a5 + -2688
	word32 d4_100 = 0
	word32 d5_101 = 0
	branch a5 + -2688 - Mem0[a5 + -2048:word32] >u 0x00000000 l00001E64
// DataOut: a2 a5 d4 d5
// DataOut (flags): 
// SymbolicIn: a7:fp
// LocalsOut: fp(32) Stack +0004(32)

l00001E64:
// DataOut: a5 d3 d4 d5
// DataOut (flags): 
// SymbolicIn: a7:fp - 0x0000001C a6:fp - 0x00000004 d7:-1 d6:1 a2:a5 + -2688 d4:0 d5:0 -28(fp):d3 -24(fp):d4 -20(fp):d5 -16(fp):d6 -12(fp):d7 -8(fp):a2 -4(fp):a6
// LocalsOut: fp(32)

l00001E1E:
// DataOut: a2 a5 d3 d4 d5
// DataOut (flags): 
// SymbolicIn: a7:fp - 0x0000001C a6:fp - 0x00000004 d7:-1 d6:1 a2:a5 + -2688 d4:0 d5:0 -28(fp):d3 -24(fp):d4 -20(fp):d5 -16(fp):d6 -12(fp):d7 -8(fp):a2 -4(fp):a6
// LocalsOut: fp(32)

l00001E22:
	branch dwArg04 != 0x00000001 l00001E40
// DataOut: a2 a5 d3 d4 d5
// DataOut (flags): 
// SymbolicIn: a7:fp - 0x0000001C a6:fp - 0x00000004 d7:-1 d6:1 a2:<invalid> d4:<invalid> d5:<invalid> d3:<invalid> d0:<invalid> d2:<invalid> d1:<invalid> -32(fp):<invalid> -28(fp):d3 -24(fp):d4 -20(fp):d5 -16(fp):d6 -12(fp):d7 -8(fp):a2 -4(fp):a6
// LocalsOut: fp(32)

l00001E26:
	branch (Mem0[a2_103 + 0x0000000C:word16] & 0x0083) == 0x0000 l00001E40
// DataOut: a2 a5 d3 d4 d5
// DataOut (flags): 
// SymbolicIn: a7:fp - 0x0000001C a6:fp - 0x00000004 d7:-1 d6:1 a2:<invalid> d4:<invalid> d5:<invalid> d3:<invalid> d0:<invalid> d2:<invalid> d1:<invalid> -32(fp):<invalid> -28(fp):d3 -24(fp):d4 -20(fp):d5 -16(fp):d6 -12(fp):d7 -8(fp):a2 -4(fp):a6
// LocalsOut: fp(32)

l00001E40:
	branch dwArg04 != 0x00000000 l00001E58
// DataOut: a2 a5 d3 d4 d5
// DataOut (flags): 
// SymbolicIn: a7:fp - 0x0000001C a6:fp - 0x00000004 d7:-1 d6:1 a2:<invalid> d4:<invalid> d5:<invalid> d3:<invalid> d0:<invalid> d2:<invalid> d1:<invalid> -32(fp):<invalid> -28(fp):d3 -24(fp):d4 -20(fp):d5 -16(fp):d6 -12(fp):d7 -8(fp):a2 -4(fp):a6
// LocalsOut: fp(32)

l00001E44:
	branch __btst(Mem0[a2_103 + 15:word32], 1) l00001E58
// DataOut: a2 a5 d3 d4 d5
// DataOut (flags): 
// SymbolicIn: a7:fp - 0x0000001C a6:fp - 0x00000004 d7:-1 d6:1 a2:<invalid> d4:<invalid> d5:<invalid> d3:<invalid> d0:<invalid> d2:<invalid> d1:<invalid> -32(fp):<invalid> -28(fp):d3 -24(fp):d4 -20(fp):d5 -16(fp):d6 -12(fp):d7 -8(fp):a2 -4(fp):a6
// LocalsOut: fp(32)

l00001E4A:
	word32 d0_117 = fn00001D24(a5, a2_103)
	branch d0_117 != 0xFFFFFFFF l00001E58
// DataOut: a2 a5 d0 d3 d4 d5
// DataOut (flags): 
// SymbolicIn: a7:fp - 0x0000001C a6:fp - 0x00000004 d7:-1 d6:1 a2:<invalid> d4:<invalid> d5:<invalid> d3:<invalid> d0:<invalid> d2:<invalid> d1:<invalid> -32(fp):<invalid> -28(fp):d3 -24(fp):d4 -20(fp):d5 -16(fp):d6 -12(fp):d7 -8(fp):a2 -4(fp):a6
// LocalsOut: fp(32)

l00001E56:
	d5_101 = d0_117
// DataOut: a2 a5 d3 d4 d5
// DataOut (flags): 
// SymbolicIn: a7:fp - 0x0000001C a6:fp - 0x00000004 d7:-1 d6:1 a2:<invalid> d4:<invalid> d5:<invalid> d3:<invalid> d0:<invalid> d2:<invalid> d1:<invalid> -32(fp):<invalid> -28(fp):d3 -24(fp):d4 -20(fp):d5 -16(fp):d6 -12(fp):d7 -8(fp):a2 -4(fp):a6
// LocalsOut: fp(32)

l00001E30:
	branch fn00001D24(a5, a2_103) == 0xFFFFFFFF l00001E58
// DataOut: a2 a5 d3 d4 d5
// DataOut (flags): 
// SymbolicIn: a7:fp - 0x0000001C a6:fp - 0x00000004 d7:-1 d6:1 a2:<invalid> d4:<invalid> d5:<invalid> d3:<invalid> d0:<invalid> d2:<invalid> d1:<invalid> -32(fp):<invalid> -28(fp):d3 -24(fp):d4 -20(fp):d5 -16(fp):d6 -12(fp):d7 -8(fp):a2 -4(fp):a6
// LocalsOut: fp(32)

l00001E3C:
	d4_100 = d4_100 + 1
// DataOut: a2 a5 d3 d4 d5
// DataOut (flags): 
// SymbolicIn: a7:fp - 0x0000001C a6:fp - 0x00000004 d7:-1 d6:1 a2:<invalid> d4:<invalid> d5:<invalid> d3:<invalid> d0:<invalid> d2:<invalid> d1:<invalid> -32(fp):<invalid> -28(fp):d3 -24(fp):d4 -20(fp):d5 -16(fp):d6 -12(fp):d7 -8(fp):a2 -4(fp):a6
// LocalsOut: fp(32)

l00001E58:
	a2_103 = a2_103 + 32
	branch a2_103 - Mem0[a5 + -2048:word32] <=u 0x00000000 l00001E22
// DataOut: a2 a5 d3 d4 d5
// DataOut (flags): 
// SymbolicIn: a7:fp - 0x0000001C a6:fp - 0x00000004 d7:-1 d6:1 a2:<invalid> d4:<invalid> d5:<invalid> d3:<invalid> d0:<invalid> d2:<invalid> d1:<invalid> -32(fp):<invalid> -28(fp):d3 -24(fp):d4 -20(fp):d5 -16(fp):d6 -12(fp):d7 -8(fp):a2 -4(fp):a6
// LocalsOut: fp(32)

l00001E62:
// DataOut: a5 d3 d4 d5
// DataOut (flags): 
// SymbolicIn: a7:fp - 0x0000001C a6:fp - 0x00000004 d7:-1 d6:1 a2:<invalid> d4:<invalid> d5:<invalid> d3:<invalid> d0:<invalid> d2:<invalid> d1:<invalid> -32(fp):<invalid> -28(fp):d3 -24(fp):d4 -20(fp):d5 -16(fp):d6 -12(fp):d7 -8(fp):a2 -4(fp):a6
// LocalsOut: fp(32)

l00001E68:
	branch dwArg04 == 1 l00001E70
// DataOut: a5 d4 d5
// DataOut (flags): 
// SymbolicIn: a7:fp - 0x0000001C a6:fp - 0x00000004 d7:-1 d6:1 a2:<invalid> d4:<invalid> d5:<invalid> d3:<invalid> d0:<invalid> d2:<invalid> d1:<invalid> -32(fp):<invalid> -28(fp):d3 -24(fp):d4 -20(fp):d5 -16(fp):d6 -12(fp):d7 -8(fp):a2 -4(fp):a6
// LocalsOut: fp(32)

l00001E6E:
	d4_100 = d5_101
// DataOut: a5 d4
// DataOut (flags): 
// SymbolicIn: a7:fp - 0x0000001C a6:fp - 0x00000004 d7:1 d6:1 a2:<invalid> d4:<invalid> d5:<invalid> d3:<invalid> d0:<invalid> d2:<invalid> d1:<invalid> -32(fp):<invalid> -28(fp):d3 -24(fp):d4 -20(fp):d5 -16(fp):d6 -12(fp):d7 -8(fp):a2 -4(fp):a6
// LocalsOut: fp(32)

l00001E70:
	return d4_100
// DataOut: a5 d0
// DataOut (flags): 
// SymbolicIn: a7:fp - 0x0000001C a6:fp - 0x00000004 d7:1 d6:1 a2:<invalid> d4:<invalid> d5:<invalid> d3:<invalid> d0:<invalid> d2:<invalid> d1:<invalid> -32(fp):<invalid> -28(fp):d3 -24(fp):d4 -20(fp):d5 -16(fp):d6 -12(fp):d7 -8(fp):a2 -4(fp):a6

fn00001E04_exit:
// DataOut: d0
// DataOut (flags): 
// SymbolicIn: a7:fp a6:a6 d7:d7 d6:d6 a2:a2 d4:d4 d5:d5 d3:d3 d0:<invalid> d2:<invalid> d1:<invalid> -32(fp):<invalid> -28(fp):d3 -24(fp):d4 -20(fp):d5 -16(fp):d6 -12(fp):d7 -8(fp):a2 -4(fp):a6



word32 fn00001E94(word32 a5, word32 dwArg04, byte bArg07, word32 dwArg08)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  a5
// LiveOut: d0
// Trashed: CVZNX a0 d0 d1 d2
// Preserved: a2 a3 a6 a7 d3 d4 d5
// Stack args: Stack +0004(32) Stack +0007(8) Stack +0008(32)
fn00001E94_entry:
// DataOut: a5 d6
// DataOut (flags): 
// SymbolicIn: a7:fp
// LocalsOut: fp(32) Local -0024(32) Stack +0004(32) Stack +0007(8) Stack +0008(32)

l00001E94:
	word32 d0_27 = Mem0[dwArg08 + 12:word32]
	word32 a3_124 = dwArg08
	word32 d3_120 = Mem0[dwArg08 + 16:word32]
	word32 a2_123 = dwArg08 + 12
	branch (SLICE(d0_27, word16, 0) & 0x0082) == 0x0000 l00001F5C
// DataOut: a2 a3 a5 d0 d3 d6
// DataOut (flags): 
// SymbolicIn: a7:fp
// LocalsOut: fp(32) Local -0024(32) Stack +0004(32) Stack +0007(8)

l00001EB4:
	branch __btst(SLICE(d0_27, byte, 0), 0x0006) l00001F5C
// DataOut: a2 a3 a5 d0 d3 d6
// DataOut (flags): 
// SymbolicIn: a7:fp - 0x0000001C a6:fp - 0x00000004 a3:<invalid> d3:<invalid> a2:<invalid> d0:<invalid> d1:<invalid> -28(fp):d3 -24(fp):d4 -20(fp):d5 -16(fp):a2 -12(fp):a3 -4(fp):a6
// LocalsOut: fp(32) Local -0024(32) Stack +0004(32) Stack +0007(8)

l00001EBC:
	branch __btst(SLICE(d0_27, byte, 0), 0x0000) l00001EDA
// DataOut: a2 a3 a5 d3 d6
// DataOut (flags): 
// SymbolicIn: a7:fp - 0x0000001C a6:fp - 0x00000004 a3:<invalid> d3:<invalid> a2:<invalid> d0:<invalid> d1:<invalid> -28(fp):d3 -24(fp):d4 -20(fp):d5 -16(fp):a2 -12(fp):a3 -4(fp):a6
// LocalsOut: fp(32) Local -0024(32) Stack +0004(32) Stack +0007(8)

l00001EC2:
	Mem397[dwArg08 + 4:word32] = 0
	d0_27 = Mem397[dwArg08 + 12:word32]
	branch __btst(SLICE(d0_27, byte, 0), 0x0004) l00001F5C
// DataOut: a2 a3 a5 d0 d3 d6
// DataOut (flags): 
// SymbolicIn: a7:fp - 0x0000001C a6:fp - 0x00000004 a3:<invalid> d3:<invalid> a2:<invalid> d0:<invalid> d1:<invalid> -28(fp):d3 -24(fp):d4 -20(fp):d5 -16(fp):a2 -12(fp):a3 -4(fp):a6
// LocalsOut: fp(32) Local -0024(32) Stack +0004(32) Stack +0007(8)

l00001F5C:
	word32 d0_60
	__bset(d0_27, 0x0005, out d0_60)
	Mem63[dwArg08 + 12:word32] = d0_60
	return -1
// DataOut: a5 d0 d6
// DataOut (flags): 
// SymbolicIn: a7:fp - 0x0000001C a6:fp - 0x00000004 a3:<invalid> d3:<invalid> a2:<invalid> d0:<invalid> d1:<invalid> d5:0 -28(fp):d3 -24(fp):d4 -20(fp):d5 -16(fp):a2 -12(fp):a3 -4(fp):a6

l00001ED2:
	Mem402[dwArg08:word32] = Mem397[dwArg08 + 8:word32]
	__bclr(Mem402[dwArg08 + 15:byte], 0x00, out Mem402[dwArg08 + 15:byte])
// DataOut: a2 a3 a5 d3 d6
// DataOut (flags): 
// SymbolicIn: a7:fp - 0x0000001C a6:fp - 0x00000004 a3:<invalid> d3:<invalid> a2:<invalid> d0:<invalid> d1:<invalid> d5:0 -28(fp):d3 -24(fp):d4 -20(fp):d5 -16(fp):a2 -12(fp):a3 -4(fp):a6
// LocalsOut: fp(32) Local -0024(32) Stack +0004(32) Stack +0007(8)

l00001EDA:
	word32 d0_92
	__bset(Mem0[dwArg08 + 12:word32], 0x0001, out d0_92)
	Mem95[dwArg08 + 12:word32] = d0_92
	word32 d0_96
	__bclr(d0_92, 0x00000004, out d0_96)
	Mem99[dwArg08 + 12:word32] = d0_96
	Mem102[dwArg08 + 4:word32] = 0
	word32 d0_104 = Mem102[dwArg08 + 12:word32]
	word16 v24_105 = SLICE(d0_104, word16, 0) & 0x010C
	word32 d4_103 = 0
	word32 d0_107 = SEQ(SLICE(d0_104, word16, 16), v24_105)
	branch v24_105 != 0x0000 l00001F1C
// DataOut: a2 a3 a5 d0 d3 d4 d6
// DataOut (flags): 
// SymbolicIn: a7:fp - 0x0000001C a6:fp - 0x00000004 a3:<invalid> d3:<invalid> a2:<invalid> d0:<invalid> d1:<invalid> d5:0 -28(fp):d3 -24(fp):d4 -20(fp):d5 -16(fp):a2 -12(fp):a3 -4(fp):a6
// LocalsOut: fp(32) Local -0024(32) Stack +0004(32) Stack +0007(8)

l00001EF8:
	branch dwArg08 - (a5 + -2656) == 0x00000000 l00001F08
// DataOut: a2 a3 a5 d0 d3 d4 d6
// DataOut (flags): 
// SymbolicIn: a7:fp - 0x0000001C a6:fp - 0x00000004 a3:<invalid> d3:<invalid> a2:<invalid> d0:<invalid> d1:<invalid> d5:0 d4:0 -28(fp):d3 -24(fp):d4 -20(fp):d5 -16(fp):a2 -12(fp):a3 -4(fp):a6
// LocalsOut: fp(32) Local -0024(32) Stack +0004(32) Stack +0007(8)

l00001F00:
	branch dwArg08 - (a5 + -2624) != 0x00000000 l00001F14
// DataOut: a2 a3 a5 d0 d3 d4 d6
// DataOut (flags): 
// SymbolicIn: a7:fp - 0x0000001C a6:fp - 0x00000004 a3:<invalid> d3:<invalid> a2:<invalid> d0:<invalid> d1:<invalid> d5:0 d4:0 a0:a5 + -2656 -28(fp):d3 -24(fp):d4 -20(fp):d5 -16(fp):a2 -12(fp):a3 -4(fp):a6
// LocalsOut: fp(32) Local -0024(32) Stack +0004(32) Stack +0007(8)

l00001F08:
	word32 a7_367
	word32 a6_368
	word32 d5_371
	byte CVZN_374
	word32 d1_376
	byte ZN_377
	bool C_378
	bool V_379
	bool Z_380
	word32 a0_381
	byte CVZNX_383
	word32 d2_385
	call a5 + 130 (retsize: 4; depth: 36)
		uses: a0_337,a2_26,a3_23,a5,a6_5,a7_363,bLoc05,C_110,CVZN_366,CVZNX,d0_107,d1_31,d2,d3_25,d4_103,d5_100,dwLoc04_4,dwLoc0C_9,dwLoc10_12,dwLoc14_15,dwLoc18_18,dwLoc1C_21,dwLoc20_365,dwLoc24,dwLoc28,V_111,VZN,Z_340,ZN_108
		defs: a0_381,a2_370,a3_369,a5_382,a6_368,a7_367,C_378,CVZN_374,CVZNX_383,d0_375,d1_376,d2_385,d3_373,d4_372,d5_371,V_379,VZN_384,Z_380,ZN_377
	branch d0_107 != 0x00000000 l00001F1C
// DataOut: a2 a3 a5 d0 d3 d4 d6
// DataOut (flags): 
// SymbolicIn: a7:fp - 0x0000001C a6:fp - 0x00000004 a3:<invalid> d3:<invalid> a2:<invalid> d0:<invalid> d1:<invalid> d5:0 d4:0 a0:<invalid> -28(fp):d3 -24(fp):d4 -20(fp):d5 -16(fp):a2 -12(fp):a3 -4(fp):a6
// LocalsOut: fp(32) Local -0024(32) Stack +0004(32) Stack +0007(8)

l00001F14:
	fn00002014(d0_107, a5, a3_124)
// DataOut: a2 a3 a5 d3 d4 d6
// DataOut (flags): 
// SymbolicIn: a7:fp - 0x0000001C a6:fp - 0x00000004 a3:<invalid> d3:<invalid> a2:<invalid> d0:<invalid> d1:<invalid> d5:0 d4:0 a0:<invalid> -32(fp):<invalid> -28(fp):d3 -24(fp):d4 -20(fp):d5 -16(fp):a2 -12(fp):a3 -4(fp):a6
// LocalsOut: fp(32) Stack +0004(32) Stack +0007(8)

l00001F1C:
	word32 d5_151
	branch (Mem102[a2_123:word16] & 0x0108) == 0x0000 l00001F94
// DataOut: a2 a3 a5 d0 d3 d4 d6
// DataOut (flags): 
// SymbolicIn: a7:fp - 0x0000001C a6:fp - 0x00000004 a3:<invalid> d3:<invalid> a2:<invalid> d0:<invalid> d1:<invalid> d5:0 d4:0 a0:<invalid> d2:0 -32(fp):<invalid> -28(fp):d3 -24(fp):d4 -20(fp):d5 -16(fp):a2 -12(fp):a3 -4(fp):a6
// LocalsOut: fp(32) Stack +0004(32) Stack +0007(8)

l00001F94:
	word32 a7_315
	word32 a6_316
	word32 a3_317
	word32 d4_320
	word32 d3_321
	byte CVZN_322
	word32 d0_323
	word32 d1_324
	byte ZN_325
	bool C_326
	bool V_327
	bool Z_328
	word32 a0_329
	word32 a5_330
	byte CVZNX_331
	byte VZN_332
	word32 d2_333
	call a5 + 146 (retsize: 4; depth: 44)
		uses: a0_118,a2_123,a3_124,a5_116,a6_125,a7_311,bLoc05_305,C_133,CVZN_314,CVZNX_115,d0_130,d1_117,d2_113,d3_120,d4_121,d5_303,dwLoc04_4,dwLoc0C_9,dwLoc10_12,dwLoc14_15,dwLoc18_18,dwLoc1C_21,dwLoc20_308,dwLoc24_310,dwLoc28_313,V_134,VZN_114,Z_132,ZN_131
		defs: a0_329,a2_318,a3_317,a5_330,a6_316,a7_315,C_326,CVZN_322,CVZNX_331,d0_323,d1_324,d2_333,d3_321,d4_320,d5_319,V_327,VZN_332,Z_328,ZN_325
	d4_103 = d0_323
// DataOut: a2 a5 d4 d5 d6
// DataOut (flags): 
// SymbolicIn: a7:fp - 0x0000001C a6:fp - 0x00000004 a3:<invalid> d3:<invalid> a2:<invalid> d0:<invalid> d1:<invalid> d5:0 d4:0 a0:<invalid> d2:0 -32(fp):<invalid> -28(fp):d3 -24(fp):d4 -20(fp):d5 -16(fp):a2 -12(fp):a3 -4(fp):a6
// LocalsOut: fp(32) Stack +0004(32)

l00001F24:
	word32 d0_192 = Mem102[a3_124 + 8:word32]
	d5_151 = Mem102[a3_124:word32] - d0_192
	Mem198[a3_124:word32] = d0_192 + 1
	Mem203[a3_124 + 4:word32] = Mem198[a3_124 + 24:word32] - 0x00000001
	byte VZN_207 = DPB(VZN, false, 0)
	branch VZN_207 l00001F6C
// DataOut: a2 a3 a5 d0 d3 d4 d5 d6
// DataOut (flags): 
// SymbolicIn: a7:fp - 0x0000001C a6:fp - 0x00000004 a3:<invalid> d3:<invalid> a2:<invalid> d0:<invalid> d1:<invalid> d5:0 d4:0 a0:<invalid> d2:0 -32(fp):<invalid> -28(fp):d3 -24(fp):d4 -20(fp):d5 -16(fp):a2 -12(fp):a3 -4(fp):a6
// LocalsOut: fp(32) Stack +0004(32) Stack +0007(8)

l00001F6C:
	word32 a0_245 = a5 + -1704
	bool Z_246 = __btst(Mem203[a0_245 + d3_120:byte], 0x0005)
	branch Z_246 l00001F8A
// DataOut: a2 a3 a5 d4 d5 d6
// DataOut (flags): 
// SymbolicIn: a7:fp - 0x0000001C a6:fp - 0x00000004 a3:<invalid> d3:<invalid> a2:<invalid> d0:<invalid> d1:<invalid> d5:<invalid> d4:0 a0:<invalid> d2:0 -32(fp):<invalid> -28(fp):d3 -24(fp):d4 -20(fp):d5 -16(fp):a2 -12(fp):a3 -4(fp):a6
// LocalsOut: fp(32) Stack +0004(32) Stack +0007(8)

l00001F78:
	word32 a7_283
	word32 a6_284
	word32 d3_289
	byte CVZN_290
	word32 d0_291
	word32 d1_292
	byte ZN_293
	bool C_294
	bool V_295
	bool Z_296
	word32 a0_297
	word32 a5_298
	byte CVZNX_299
	byte VZN_300
	word32 d2_301
	call a5 + 154 (retsize: 4; depth: 44)
		uses: a0_245,a2_123,a3_124,a5_116,a6_125,a7_279,bLoc05,C_205,CVZN_282,CVZNX_201,d0_200,d1_275,d2_271,d3_120,d4_121,d5_194,dwLoc04_4,dwLoc0C_9,dwLoc10_12,dwLoc14_15,dwLoc18_18,dwLoc1C_21,dwLoc20_274,dwLoc24_278,dwLoc28_281,V_206,VZN_207,Z_246,ZN_204
		defs: a0_297,a2_286,a3_285,a5_298,a6_284,a7_283,C_294,CVZN_290,CVZNX_299,d0_291,d1_292,d2_301,d3_289,d4_288,d5_287,V_295,VZN_300,Z_296,ZN_293
// DataOut: a2 a3 a5 d4 d5 d6
// DataOut (flags): 
// SymbolicIn: a7:fp - 0x0000001C a6:fp - 0x00000004 a3:<invalid> d3:<invalid> a2:<invalid> d0:<invalid> d1:<invalid> d5:<invalid> d4:0 a0:a5 + -1704 d2:0 -32(fp):<invalid> -28(fp):d3 -24(fp):d4 -20(fp):d5 -16(fp):a2 -12(fp):a3 -4(fp):a6
// LocalsOut: fp(32) Stack +0004(32) Stack +0007(8)

l00001F8A:
	Mem269[Mem203[a3_124 + 8:word32]:byte] = bArg07
// DataOut: a2 a5 d4 d5 d6
// DataOut (flags): 
// SymbolicIn: a7:fp - 0x0000001C a6:fp - 0x00000004 a3:<invalid> d3:<invalid> a2:<invalid> d0:<invalid> d1:<invalid> d5:<invalid> d4:0 a0:a5 + -1704 d2:<invalid> -40(fp):<invalid> -36(fp):0 -32(fp):<invalid> -28(fp):d3 -24(fp):d4 -20(fp):d5 -16(fp):a2 -12(fp):a3 -4(fp):a6
// LocalsOut: fp(32) Stack +0004(32)

l00001F40:
	word32 a7_219
	word32 a6_220
	word32 a3_221
	word32 d4_224
	word32 d3_225
	byte CVZN_226
	word32 d0_227
	word32 d1_228
	byte ZN_229
	bool C_230
	bool V_231
	bool Z_232
	word32 a0_233
	word32 a5_234
	byte CVZNX_235
	byte VZN_236
	word32 d2_237
	call a5 + 146 (retsize: 4; depth: 44)
		uses: a0_196,a2_123,a3_124,a5_116,a6_125,a7_215,bLoc05,C_205,CVZN_218,CVZNX_201,d0_200,d1_117,d2_113,d3_120,d4_121,d5_194,dwLoc04_4,dwLoc0C_9,dwLoc10_12,dwLoc14_15,dwLoc18_18,dwLoc1C_21,dwLoc20_210,dwLoc24_214,dwLoc28_217,V_206,VZN_207,Z_132,ZN_204
		defs: a0_233,a2_222,a3_221,a5_234,a6_220,a7_219,C_230,CVZN_226,CVZNX_235,d0_227,d1_228,d2_237,d3_225,d4_224,d5_223,V_231,VZN_236,Z_232,ZN_229
	Mem243[Mem203[a3_221 + 8:word32]:byte] = bArg07
	d4_103 = d0_227
// DataOut: a2 a5 d4 d5 d6
// DataOut (flags): 
// SymbolicIn: a7:fp - 0x0000001C a6:fp - 0x00000004 a3:<invalid> d3:<invalid> a2:<invalid> d0:<invalid> d1:<invalid> d5:<invalid> d4:0 a0:<invalid> d2:0 -32(fp):<invalid> -28(fp):d3 -24(fp):d4 -20(fp):d5 -16(fp):a2 -12(fp):a3 -4(fp):a6
// LocalsOut: fp(32) Stack +0004(32)

l00001FAE:
	branch d4_103 - d5_151 == 0x00000000 l00001FC4
// DataOut: a2 a5 d6
// DataOut (flags): 
// SymbolicIn: a7:fp - 0x0000001C a6:fp - 0x00000004 a3:<invalid> d3:<invalid> a2:<invalid> d0:<invalid> d1:<invalid> d5:<invalid> d4:<invalid> a0:<invalid> d2:<invalid> -40(fp):<invalid> -36(fp):<invalid> -32(fp):<invalid> -28(fp):d3 -24(fp):d4 -20(fp):d5 -16(fp):a2 -12(fp):a3 -5(fp):<invalid> -4(fp):a6
// LocalsOut: fp(32) Stack +0004(32)

l00001FC4:
	return dwArg04 & 0x000000FF
// DataOut: a5 d0 d6
// DataOut (flags): 
// SymbolicIn: a7:fp - 0x0000001C a6:fp - 0x00000004 a3:<invalid> d3:<invalid> a2:<invalid> d0:<invalid> d1:<invalid> d5:<invalid> d4:<invalid> a0:<invalid> d2:<invalid> -40(fp):<invalid> -36(fp):<invalid> -32(fp):<invalid> -28(fp):d3 -24(fp):d4 -20(fp):d5 -16(fp):a2 -12(fp):a3 -5(fp):<invalid> -4(fp):a6

l00001FB2:
	__bset(Mem102[a2_123 + 3:byte], 0x0005, out Mem102[a2_123 + 3:byte])
	return -1
// DataOut: a5 d0 d6
// DataOut (flags): 
// SymbolicIn: a7:fp - 0x0000001C a6:fp - 0x00000004 a3:<invalid> d3:<invalid> a2:<invalid> d0:<invalid> d1:<invalid> d5:<invalid> d4:<invalid> a0:<invalid> d2:<invalid> -40(fp):<invalid> -36(fp):<invalid> -32(fp):<invalid> -28(fp):d3 -24(fp):d4 -20(fp):d5 -16(fp):a2 -12(fp):a3 -5(fp):<invalid> -4(fp):a6

fn00001E94_exit:
// DataOut: d0
// DataOut (flags): 
// SymbolicIn: a7:fp a6:a6 a3:a3 d3:d3 a2:a2 d0:<invalid> d1:<invalid> d4:d4 d5:d5 a0:<invalid> d2:<invalid> -40(fp):<invalid> -36(fp):<invalid> -32(fp):<invalid> -28(fp):d3 -24(fp):d4 -20(fp):d5 -16(fp):a2 -12(fp):a3 -5(fp):<invalid> -4(fp):a6



void fn00001FD8(word32 a5)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  a5
// LiveOut:
// Trashed: CVZNX a0 d0 d1 d2
// Preserved: a6 a7 d3 d4 d5 d6
fn00001FD8_entry:
// DataOut: a5
// DataOut (flags): 
// SymbolicIn: a7:fp
// LocalsOut: fp(32)

l00001FD8:
	word32 d4_24 = a5 + -2592
	branch a5 + -2592 - Mem0[a5 + -2048:word32] >u 0x00000000 l00002008
// DataOut: a5 d4
// DataOut (flags): 
// SymbolicIn: a7:fp
// LocalsOut: fp(32)

l00001FF2:
	word32 d3_56
	branch fn00002068(d4_24, out d3_56) == 0xFFFFFFFF l00002000
// DataOut: a5 d3 d4
// DataOut (flags): 
// SymbolicIn: a7:fp - 0x00000014 a6:fp - 0x00000004 d6:32 d5:-1 d3:<invalid> a0:a5 + -2592 d4:<invalid> d0:<invalid> d2:0 d1:<invalid> -24(fp):<invalid> -20(fp):d3 -16(fp):d4 -12(fp):d5 -8(fp):d6 -4(fp):a6
// LocalsOut: fp(32)

l00001FFE:
// DataOut: a5 d4
// DataOut (flags): 
// SymbolicIn: a7:fp - 0x00000014 a6:fp - 0x00000004 d6:32 d5:-1 d3:<invalid> a0:a5 + -2592 d4:<invalid> d0:<invalid> d2:0 d1:<invalid> -24(fp):<invalid> -20(fp):d3 -16(fp):d4 -12(fp):d5 -8(fp):d6 -4(fp):a6
// LocalsOut: fp(32)

l00002000:
	d4_24 = d4_24 + 32
	branch d4_24 - Mem0[a5 + -2048:word32] <=u 0x00000000 l00001FF2
// DataOut: a5 d4
// DataOut (flags): 
// SymbolicIn: a7:fp - 0x00000014 a6:fp - 0x00000004 d6:32 d5:-1 d3:<invalid> a0:a5 + -2592 d4:<invalid> d0:<invalid> d2:0 d1:<invalid> -24(fp):<invalid> -20(fp):d3 -16(fp):d4 -12(fp):d5 -8(fp):d6 -4(fp):a6
// LocalsOut: fp(32)

l00002008:
	return
// DataOut:
// DataOut (flags): 
// SymbolicIn: a7:fp - 0x00000014 a6:fp - 0x00000004 d6:32 d5:-1 d3:<invalid> a0:a5 + -2592 d4:<invalid> d0:<invalid> d2:0 d1:<invalid> -24(fp):<invalid> -20(fp):d3 -16(fp):d4 -12(fp):d5 -8(fp):d6 -4(fp):a6

fn00001FD8_exit:
// DataOut:
// DataOut (flags): 
// SymbolicIn: a7:fp a6:a6 d6:d6 d5:d5 d3:d3 a0:a5 + -2592 d4:d4 d0:<invalid> d2:0 d1:<invalid> -24(fp):<invalid> -20(fp):d3 -16(fp):d4 -12(fp):d5 -8(fp):d6 -4(fp):a6



void fn00002014(word32 d0, word32 a5, word32 dwArg04)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  a5 d0
// LiveOut:
// Trashed: CVZNX a0 d2
// Preserved: a2 a6 a7
// Stack args: Stack +0004(32)
fn00002014_entry:
// DataOut: a3 a5 d0 d3 d4 d6
// DataOut (flags): 
// SymbolicIn: a7:fp
// LocalsOut: fp(32) Stack +0004(32)

l00002014:
	Mem14[a5 + -1368:word32] = Mem0[a5 + -1368:word32] + 0x00000001
	word32 a7_20
	word32 a6_21
	word32 a2_22
	byte CVZN_23
	word32 a5_24
	byte CVZNX_25
	word32 d0_26
	bool Z_27
	word32 a0_28
	word32 d2_29
	call a5 + 114 (retsize: 4; depth: 16)
		uses: a2_17,a5,a6_5,a7_18,CVZNX_15,dwLoc04_4,dwLoc08_10,dwLoc0C_19
		defs: a0_28,a2_22,a5_24,a6_21,a7_20,CVZN_23,CVZNX_25,d0_26,d2_29,Z_27
	Mem32[a2_22 + 8:word32] = d0_26
	branch d0_26 == 0x00000000 l00002044
// DataOut: a2 a3 a5 d3 d4 d6
// DataOut (flags): 
// SymbolicIn: a7:fp
// LocalsOut: fp(32)

l00002044:
	__bset(Mem32[a2_22 + 15:byte], 0x0002, out Mem32[a2_22 + 15:byte])
	Mem55[a2_22 + 8:word32] = a2_22 + 20
	Mem58[a2_22 + 24:word32] = 1
// DataOut: a2 a3 a5 d3 d4 d6
// DataOut (flags): 
// SymbolicIn: a7:fp - 0x00000008 a6:fp - 0x00000004 a2:<invalid> -12(fp):00000200 -8(fp):a2 -4(fp):a6
// LocalsOut: fp(32)

l00002032:
	__bset(Mem32[a2_22 + 15:byte], 0x0003, out Mem32[a2_22 + 15:byte])
	Mem50[a2_22 + 24:word32] = 0x00000200
// DataOut: a2 a3 a5 d3 d4 d6
// DataOut (flags): 
// SymbolicIn: a7:fp - 0x00000008 a6:fp - 0x00000004 a2:<invalid> -12(fp):00000200 -8(fp):a2 -4(fp):a6
// LocalsOut: fp(32)

l00002058:
	Mem38[a2_22:word32] = Mem32[a2_22 + 8:word32]
	Mem41[a2_22 + 4:word32] = 0
	return
// DataOut: a3 a5 d3 d4 d6
// DataOut (flags): 
// SymbolicIn: a7:fp - 0x00000008 a6:fp - 0x00000004 a2:<invalid> a0:<invalid> d2:1 -12(fp):00000200 -8(fp):a2 -4(fp):a6

fn00002014_exit:
// DataOut:
// DataOut (flags): 
// SymbolicIn: a7:fp a6:a6 a2:a2 a0:<invalid> d2:0 -12(fp):00000200 -8(fp):a2 -4(fp):a6



word32 fn00002068(word32 dwArg04, ptr32 & d3Out)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse: 
// LiveOut: d0 d3
// Trashed: CVZNX d0 d1 d2 d3
// Preserved: a2 a6 a7
// Stack args: Stack +0004(32)
fn00002068_entry:
// DataOut: a5 d3 d4
// DataOut (flags): 
// SymbolicIn: a7:fp
// LocalsOut: fp(32) Stack +0004(32)

l00002068:
	word32 d0_19 = Mem0[dwArg04 + 12:word32]
	word32 d3_106 = -1
	word32 a2_108 = dwArg04
	branch __btst(SLICE(d0_19, byte, 0), 0x0006) l00002090
// DataOut: a2 a5 d0 d3 d4
// DataOut (flags): 
// SymbolicIn: a7:fp
// LocalsOut: fp(32) Local -0008(32)

l00002090:
	branch (SLICE(d0_19, word16, 0) & 0x0083) == 0x0000 l000020E0
// DataOut: a2 a5 d3 d4
// DataOut (flags): 
// SymbolicIn: a7:fp - 0x0000000C a6:fp - 0x00000004 d3:-1 a2:<invalid> d0:<invalid> -12(fp):a2 -8(fp):d3 -4(fp):a6
// LocalsOut: fp(32) Local -0008(32)

l00002096:
	fn00001D80(dwArg04)
	word32 d0_97 = fn000020F0(dwArg04)
	word32 a7_104
	word32 a6_105
	byte CVZN_107
	word32 d0_109
	bool Z_110
	byte ZN_111
	bool C_112
	bool V_113
	word32 a5_114
	byte VN_115
	word32 d2_116
	call a5 + 162 (retsize: 4; depth: 20)
		uses: a2_17,a5,a6_5,a7_100,C_62,CVZN_103,d0_97,d2,d3_92,dwLoc04_4,dwLoc08_10,dwLoc0C_14,dwLoc10_102,V_63,VN,Z_61,ZN_60
		defs: a2_108,a5_114,a6_105,a7_104,C_112,CVZN_107,d0_109,d2_116,d3_106,V_113,VN_115,Z_110,ZN_111
	byte VN_121 = DPB(VN_115, false, 0)
	branch VN_121 l000020BC
// DataOut: a2 a5 d3 d4
// DataOut (flags): 
// SymbolicIn: a7:fp - 0x0000000C a6:fp - 0x00000004 d3:-1 a2:<invalid> d0:<invalid> -12(fp):a2 -8(fp):d3 -4(fp):a6
// LocalsOut: fp(32) Local -0008(32)

l000020BC:
	word32 d0_124 = Mem0[a2_108 + 28:word32]
	branch d0_124 == 0x00000000 l000020E0
// DataOut: a2 a5 d0 d3 d4
// DataOut (flags): 
// SymbolicIn: a7:fp - 0x0000000C a6:fp - 0x00000004 d3:<invalid> a2:<invalid> d0:<invalid> d1:<invalid> d2:<invalid> -16(fp):<invalid> -12(fp):a2 -8(fp):d3 -4(fp):a6
// LocalsOut: fp(32) Local -0008(32)

l000020C2:
	word32 a7_131
	word32 a6_132
	word32 d3_133
	byte CVZN_134
	word32 a2_135
	word32 d0_136
	bool Z_137
	byte ZN_138
	bool C_139
	bool V_140
	word32 a5_141
	byte VN_142
	word32 d2_143
	call a5_114 + 178 (retsize: 4; depth: 20)
		uses: a2_108,a5_114,a6_105,a7_127,C_119,CVZN_130,d0_124,d2_116,d3_106,dwLoc04_4,dwLoc08_10,dwLoc0C_14,dwLoc10_129,V_120,VN_121,Z_126,ZN_118
		defs: a2_135,a5_141,a6_132,a7_131,C_139,CVZN_134,d0_136,d2_143,d3_133,V_140,VN_142,Z_137,ZN_138
	branch d0_136 == 0x00000000 l000020D0
// DataOut: a2 a5 d3 d4
// DataOut (flags): 
// SymbolicIn: a7:fp - 0x0000000C a6:fp - 0x00000004 d3:<invalid> a2:<invalid> d0:<invalid> d1:<invalid> d2:<invalid> -16(fp):<invalid> -12(fp):a2 -8(fp):d3 -4(fp):a6
// LocalsOut: fp(32) Local -0008(32)

l000020CE:
// DataOut: a2 a5 d3 d4
// DataOut (flags): 
// SymbolicIn: a7:fp - 0x0000000C a6:fp - 0x00000004 d3:<invalid> a2:<invalid> d0:<invalid> d1:<invalid> d2:<invalid> -16(fp):<invalid> -12(fp):a2 -8(fp):d3 -4(fp):a6
// LocalsOut: fp(32) Local -0008(32)

l000020D0:
	word32 a7_154
	word32 a6_155
	byte CVZN_157
	word32 d0_159
	bool Z_160
	byte ZN_161
	bool C_162
	bool V_163
	word32 a5_164
	byte VN_165
	word32 d2_166
	call a5_141 + 122 (retsize: 4; depth: 20)
		uses: a2_135,a5_141,a6_132,a7_150,C_147,CVZN_153,d0_136,d2_143,d3_133,dwLoc04_4,dwLoc08_10,dwLoc0C_14,dwLoc10_152,V_148,VN_142,Z_146,ZN_145
		defs: a2_158,a5_164,a6_155,a7_154,C_162,CVZN_157,d0_159,d2_166,d3_156,V_163,VN_165,Z_160,ZN_161
	Mem170[a2_108 + 28:word32] = 0
// DataOut: a2 a5 d3 d4
// DataOut (flags): 
// SymbolicIn: a7:fp - 0x0000000C a6:fp - 0x00000004 d3:<invalid> a2:<invalid> d0:<invalid> d1:<invalid> d2:<invalid> -16(fp):<invalid> -12(fp):a2 -8(fp):d3 -4(fp):a6
// LocalsOut: fp(32) Local -0008(32)

l000020B6:
	d3_106 = -1
// DataOut: a2 a5 d3 d4
// DataOut (flags): 
// SymbolicIn: a7:fp - 0x0000000C a6:fp - 0x00000004 d3:<invalid> a2:<invalid> d0:<invalid> d1:<invalid> d2:<invalid> -16(fp):<invalid> -12(fp):a2 -8(fp):d3 -4(fp):a6
// LocalsOut: fp(32) Local -0008(32)

l000020E0:
	Mem75[a2_108 + 12:word32] = 0
	return d3_106
// DataOut: a5 d0 d3 d4
// DataOut (flags): 
// SymbolicIn: a7:fp - 0x0000000C a6:fp - 0x00000004 d3:<invalid> a2:<invalid> d0:<invalid> d1:<invalid> d2:<invalid> -16(fp):<invalid> -12(fp):a2 -8(fp):d3 -4(fp):a6

l00002080:
	Mem39[dwArg04 + 12:word32] = 0
	return -1
// DataOut: a5 d0 d3 d4
// DataOut (flags): 
// SymbolicIn: a7:fp - 0x0000000C a6:fp - 0x00000004 d3:-1 a2:<invalid> d0:<invalid> -12(fp):a2 -8(fp):d3 -4(fp):a6

fn00002068_exit:
// DataOut: d0 d3
// DataOut (flags): 
// SymbolicIn: a7:fp a6:a6 d3:<invalid> a2:a2 d0:<invalid> d2:0 d1:<invalid> -16(fp):<invalid> -12(fp):a2 -8(fp):d3 -4(fp):a6



word32 fn000020F0(word32 dwArg04)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse: 
// LiveOut: d0
// Trashed: CVZN d0 d1 d2
// Preserved: a2 a6 a7
// Stack args: Stack +0004(32)
fn000020F0_entry:
// DataOut: a5 d3 d4
// DataOut (flags): 
// SymbolicIn: a7:fp
// LocalsOut: fp(32) Stack +0004(32)

l000020F0:
	word32 d0_14 = Mem0[dwArg04 + 12:word32]
	branch (SLICE(d0_14, word16, 0) & 0x0083) == 0x0000 l00002128
// DataOut: a2 a5 d0 d3 d4
// DataOut (flags): 
// SymbolicIn: a7:fp
// LocalsOut: fp(32)

l00002106:
	bool Z_42 = __btst(SLICE(d0_14, byte, 0), 0x0003)
	branch Z_42 l00002128
// DataOut: a2 a5 d0 d3 d4
// DataOut (flags): 
// SymbolicIn: a7:fp - 0x00000008 a6:fp - 0x00000004 a2:<invalid> d0:<invalid> d1:<invalid> -8(fp):a2 -4(fp):a6
// LocalsOut: fp(32)

l0000210C:
	word32 a7_48
	word32 a6_49
	word32 a2_50
	byte CVZN_51
	word32 d1_53
	byte ZN_54
	bool C_55
	bool V_56
	bool Z_57
	word32 a5_58
	word32 d2_59
	call a5 + 122 (retsize: 4; depth: 16)
		uses: a2_12,a5,a6_5,a7_44,C_21,CVZN_47,d0_14,d1_18,d2,dwLoc04_4,dwLoc08_10,dwLoc0C_46,V_22,Z_42,ZN_19
		defs: a2_50,a5_58,a6_49,a7_48,C_55,CVZN_51,d0_52,d1_53,d2_59,V_56,Z_57,ZN_54
	__bclr(Mem0[a2_50 + 15:byte], 0x03, out Mem0[a2_50 + 15:byte])
	Mem64[a2_50:word32] = 0
	Mem66[a2_50 + 8:word32] = 0
	Mem68[a2_50 + 4:word32] = 0
// DataOut: a5 d0 d3 d4
// DataOut (flags): 
// SymbolicIn: a7:fp - 0x00000008 a6:fp - 0x00000004 a2:<invalid> d0:<invalid> d1:<invalid> -8(fp):a2 -4(fp):a6
// LocalsOut: fp(32)

l00002128:
	return d0_14
// DataOut: a5 d0 d3 d4
// DataOut (flags): 
// SymbolicIn: a7:fp - 0x00000008 a6:fp - 0x00000004 a2:<invalid> d0:<invalid> d1:<invalid> d2:0 -12(fp):<invalid> -8(fp):a2 -4(fp):a6

fn000020F0_exit:
// DataOut: d0
// DataOut (flags): 
// SymbolicIn: a7:fp a6:a6 a2:a2 d0:<invalid> d1:<invalid> d2:0 -12(fp):<invalid> -8(fp):a2 -4(fp):a6



void fn000021F0(word32 a5)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  a5
// LiveOut:
// Trashed: CVZNX a0 a1 d0 d1 d2
// Preserved: a2 a6 a7 d3 d4
fn000021F0_entry:
// DataOut: a5
// DataOut (flags): 
// SymbolicIn: a7:fp
// LocalsOut: fp(32)

l000021F0:
	word32 d0_19 = Mem0[Mem0[a5 + -1376:word32] + 28:word32]
	word32 a1_22 = d0_19
	branch d0_19 == 0x00000000 l0000225A
// DataOut: a1 a5
// DataOut (flags): 
// SymbolicIn: a7:fp
// LocalsOut: fp(32)

l00002204:
	word32 d1_48 = 0
// DataOut: a1 a5 d1
// DataOut (flags): 
// SymbolicIn: a7:fp - 0x00000010 a6:fp - 0x00000004 a0:<invalid> d0:<invalid> a1:<invalid> -16(fp):d3 -12(fp):d4 -8(fp):a2 -4(fp):a6
// LocalsOut: fp(32)

l00002218:
	word32 d0_55 = Mem0[Mem0[a1_22 + 4:word32]:word32]
	branch d0_55 == 0x45434F4E l00002228
// DataOut: a1 a5 d0 d1
// DataOut (flags): 
// SymbolicIn: a7:fp - 0x00000010 a6:fp - 0x00000004 a0:<invalid> d0:<invalid> a1:<invalid> d4:3 a2:a5 + -1640 d3:0x46535953 d2:0x45434F4E d1:<invalid> -16(fp):d3 -12(fp):d4 -8(fp):a2 -4(fp):a6
// LocalsOut: fp(32)

l00002228:
	Mem83[a5 + -1704 + d1_48:byte] = Mem0[a5 + -1704 + d1_48:byte] | 0x41
	Mem85[a1_22 + d1_48 * 4:word32] = a1_22
// DataOut: a1 a5 d1
// DataOut (flags): 
// SymbolicIn: a7:fp - 0x00000010 a6:fp - 0x00000004 a0:<invalid> d0:<invalid> a1:<invalid> d4:3 a2:a5 + -1640 d3:0x46535953 d2:0x45434F4E d1:<invalid> -16(fp):d3 -12(fp):d4 -8(fp):a2 -4(fp):a6
// LocalsOut: fp(32)

l00002222:
	branch d0_55 == 0x46535953 l00002238
// DataOut: a1 a5 d1
// DataOut (flags): 
// SymbolicIn: a7:fp - 0x00000010 a6:fp - 0x00000004 a0:<invalid> d0:<invalid> a1:<invalid> d4:3 a2:a5 + -1640 d3:0x46535953 d2:0x45434F4E d1:<invalid> -16(fp):d3 -12(fp):d4 -8(fp):a2 -4(fp):a6
// LocalsOut: fp(32)

l00002238:
	Mem72[a5 + -1704 + d1_48:byte] = Mem0[a5 + -1704 + d1_48:byte] | 0x01
	word32 a0_74 = Mem72[Mem72[a1_22 + 8:word32]:word32]
	word32 a0_77 = SEQ(SLICE(a0_74, word16, 16), Mem72[a0_74 + 2:word16])
	Mem79[a0_77 + d1_48 * 4:word32] = a0_77
// DataOut: a1 a5 d1
// DataOut (flags): 
// SymbolicIn: a7:fp - 0x00000010 a6:fp - 0x00000004 a0:<invalid> d0:<invalid> a1:<invalid> d4:3 a2:a5 + -1640 d3:0x46535953 d2:0x45434F4E d1:<invalid> -16(fp):d3 -12(fp):d4 -8(fp):a2 -4(fp):a6
// LocalsOut: fp(32)

l00002226:
// DataOut: a1 a5 d1
// DataOut (flags): 
// SymbolicIn: a7:fp - 0x00000010 a6:fp - 0x00000004 a0:<invalid> d0:<invalid> a1:<invalid> d4:3 a2:a5 + -1640 d3:0x46535953 d2:0x45434F4E d1:<invalid> -16(fp):d3 -12(fp):d4 -8(fp):a2 -4(fp):a6
// LocalsOut: fp(32)

l00002250:
	a1_22 = a1_22 + 20
	d1_48 = d1_48 + 0x00000001
	branch d1_48 < 0x00000003 l00002218
// DataOut: a1 a5 d1
// DataOut (flags): 
// SymbolicIn: a7:fp - 0x00000010 a6:fp - 0x00000004 a0:<invalid> d0:<invalid> a1:<invalid> d4:3 a2:a5 + -1640 d3:0x46535953 d2:0x45434F4E d1:<invalid> -16(fp):d3 -12(fp):d4 -8(fp):a2 -4(fp):a6
// LocalsOut: fp(32)

l0000225A:
	return
// DataOut:
// DataOut (flags): 
// SymbolicIn: a7:fp - 0x00000010 a6:fp - 0x00000004 a0:<invalid> d0:<invalid> a1:<invalid> d4:3 a2:a5 + -1640 d3:0x46535953 d2:0x45434F4E d1:<invalid> -16(fp):d3 -12(fp):d4 -8(fp):a2 -4(fp):a6

fn000021F0_exit:
// DataOut:
// DataOut (flags): 
// SymbolicIn: a7:fp a6:a6 a0:<invalid> d0:<invalid> a1:<invalid> d3:d3 d4:d4 a2:a2 d2:0x45434F4E d1:<invalid> -16(fp):d3 -12(fp):d4 -8(fp):a2 -4(fp):a6



void fn00002264(word32 d1, word32 dwArg04)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  d1
// LiveOut:
// Trashed: CVZNX a0 a1 d0 d1
// Preserved: a2 a6 a7
// Stack args: Stack +0004(32)
fn00002264_entry:
// DataOut: d1
// DataOut (flags): 
// SymbolicIn: a7:fp
// LocalsOut: fp(32) Stack +0004(32)

l00002264:
	branch dwArg04 == 0x00000000 l0000228C
// DataOut: a0 d0 d1
// DataOut (flags): 
// SymbolicIn: a7:fp
// LocalsOut: fp(32)

l00002272:
	byte v11_39 = Mem0[dwArg04:byte]
	word32 d1_41 = SEQ(SLICE(d1, word24, 8), v11_39)
	branch v11_39 == 0x00 l0000228C
// DataOut: a0 d0 d1
// DataOut (flags): 
// SymbolicIn: a7:fp - 0x00000008 a6:fp - 0x00000004 a0:<invalid> d0:<invalid> -8(fp):a2 -4(fp):a6
// LocalsOut: fp(32)

l00002276:
	word32 a2_44 = dwArg04
	word32 d0_48 = (uint32) (uint8) SLICE(d1_41, byte, 0)
	word32 a1_53 = dwArg04 + 1
	branch d0_48 == 0x00000000 l0000228A
// DataOut: a1 a2 d0
// DataOut (flags): 
// SymbolicIn: a7:fp - 0x00000008 a6:fp - 0x00000004 a0:<invalid> d0:<invalid> d1:<invalid> -8(fp):a2 -4(fp):a6
// LocalsOut: fp(32)

l00002284:
	Mem69[a2_44:byte] = Mem0[a1_53:byte]
	a1_53 = a1_53 + 1
	a2_44 = a2_44 + 1
	d0_48 = d0_48 - 0x00000001
	branch d0_48 != 0x00000000 l00002284
// DataOut: a1 a2 d0
// DataOut (flags): 
// SymbolicIn: a7:fp - 0x00000008 a6:fp - 0x00000004 a0:<invalid> d0:<invalid> d1:<invalid> a2:<invalid> a1:<invalid> -8(fp):a2 -4(fp):a6
// LocalsOut: fp(32)

l0000228A:
	Mem58[a2_44:byte] = 0x00
// DataOut:
// DataOut (flags): 
// SymbolicIn: a7:fp - 0x00000008 a6:fp - 0x00000004 a0:<invalid> d0:<invalid> d1:<invalid> a2:<invalid> a1:<invalid> -8(fp):a2 -4(fp):a6
// LocalsOut: fp(32)

l0000228C:
	return
// DataOut:
// DataOut (flags): 
// SymbolicIn: a7:fp - 0x00000008 a6:fp - 0x00000004 a0:<invalid> d0:<invalid> d1:<invalid> a2:<invalid> a1:<invalid> -8(fp):a2 -4(fp):a6

fn00002264_exit:
// DataOut:
// DataOut (flags): 
// SymbolicIn: a7:fp a6:a6 a0:<invalid> d0:<invalid> d1:<invalid> a2:a2 a1:<invalid> -8(fp):a2 -4(fp):a6



void fn00002294(word32 a5, word32 dwArg04)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  a5
// LiveOut:
// Trashed: CVZNX a0 d0 d2
// Preserved: a6 a7
// Stack args: Stack +0004(32)
fn00002294_entry:
// DataOut: a5
// DataOut (flags): 
// SymbolicIn: a7:fp
// LocalsOut: fp(32) Stack +0004(32)

l00002294:
	fn00002354(a5, dwArg04, 0, 0, 0x00)
	return
// DataOut:
// DataOut (flags): 
// SymbolicIn: a7:fp

fn00002294_exit:
// DataOut:
// DataOut (flags): 
// SymbolicIn: a7:fp a6:a6 d2:0 a0:<invalid> d0:<invalid> -16(fp):<invalid> -12(fp):0 -8(fp):0 -4(fp):a6



void fn000022C4(word32 a5)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  a5
// LiveOut:
// Trashed: CVZNX a0 a1 a2 d0
// Preserved: a6 a7
fn000022C4_entry:
// DataOut: a5
// DataOut (flags): 
// SymbolicIn: a7:fp
// LocalsOut: fp(32) Local -0012(32) Local -0013(32) Local -0015(32) Local -0016(32)

l000022C4:
	fn000023B4(a5 + -744, a5 + -740)
	word32 a0_23 = fn000023B4(a5 + -752, a5 + -748)
	word32 a7_34
	word32 a6_35
	word32 a2_36
	byte CVZN_37
	word32 a5_38
	bool Z_39
	bool C_40
	bool N_41
	bool V_42
	word32 a1_43
	word32 d0_44
	word32 a0_45
	byte ZN_46
	call a5 + 194 (retsize: 4; depth: 23)
		uses: a0_23,a2,a5,a6_5,a7_28,bLoc13_30,CVZN_33,dwLoc04_4,dwLoc0C_10,dwLoc10_20,dwLoc13_32,dwLoc14_22,wLoc12_27
		defs: a0_45,a1_43,a2_36,a5_38,a6_35,a7_34,C_40,CVZN_37,d0_44,N_41,V_42,Z_39,ZN_46
	Mem57[0x00:byte] = 0x00
	word32 dwLoc16_55 = DPB(dwLoc16, 0xA1AD, 8)
	word32 a7_62
	word32 a6_63
	word32 a2_64
	byte CVZN_65
	word32 a5_66
	bool Z_67
	bool C_68
	bool N_69
	bool V_70
	word32 a1_71
	word32 d0_72
	word32 a0_73
	byte ZN_74
	call a5_38 + 194 (retsize: 4; depth: 26)
		uses: a0_45,a1_43,a2_49,a5_38,a6_35,a7_56,bLoc13_30,C_59,CVZN_37,d0_44,dwLoc04_4,dwLoc0C_10,dwLoc10_20,dwLoc13_32,dwLoc14_22,dwLoc16_55,N_60,V_61,wLoc12_27,wLoc15_53,Z_58,ZN_46
		defs: a0_73,a1_71,a2_64,a5_66,a6_63,a7_62,C_68,CVZN_65,d0_72,N_69,V_70,Z_67,ZN_74
	branch a2_64 - dwLoc16_55 == 0x00000000 l0000231C
// DataOut: a0 a5
// DataOut (flags): 
// SymbolicIn: a7:fp
// LocalsOut: fp(32)

l00002304:
	__syscall(0xA1AD)
	branch true l0000231C
// DataOut: a5
// DataOut (flags): 
// SymbolicIn: a7:fp - 0x00000012 a6:fp - 0x00000004 a2:<invalid> a0:<invalid> d0:<invalid> -21(fp):0xA1AD -20(fp):a5 + -752 -19(fp):0x01 -18(fp):0xA89F -16(fp):a5 + -748 -12(fp):a2 -4(fp):a6
// LocalsOut: fp(32) Local -0008(32)

l00002316:
	Mem104[a5_66 + -1720:word32] = a0_73
// DataOut:
// DataOut (flags): 
// SymbolicIn: a7:fp - 0x00000012 a6:fp - 0x00000004 a2:<invalid> a1:fp + 0xFFFFFFF8 d0:0x73797376 a0:<invalid> -21(fp):0xA1AD -20(fp):a5 + -752 -19(fp):0x01 -18(fp):0xA89F -16(fp):a5 + -748 -12(fp):a2 -8(fp):<invalid> -4(fp):a6
// LocalsOut: fp(32)

l0000231C:
	return
// DataOut:
// DataOut (flags): 
// SymbolicIn: a7:fp - 0x00000012 a6:fp - 0x00000004 a2:<invalid> a1:fp + 0xFFFFFFF8 d0:<invalid> a0:<invalid> -21(fp):0xA1AD -20(fp):a5 + -752 -19(fp):0x01 -18(fp):0xA89F -16(fp):a5 + -748 -12(fp):a2 -8(fp):<invalid> -4(fp):a6

fn000022C4_exit:
// DataOut:
// DataOut (flags): 
// SymbolicIn: a7:fp a6:a6 a2:<invalid> a1:fp + 0xFFFFFFF8 d0:0 a0:<invalid> -21(fp):0xA1AD -20(fp):a5 + -752 -19(fp):0x01 -18(fp):0xA89F -16(fp):a5 + -748 -12(fp):a2 -8(fp):<invalid> -4(fp):a6



void fn00002354(word32 a5, word32 dwArg04, word32 dwArg08, word32 dwArg0C, byte bArg0F)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  a5
// LiveOut:
// Trashed: CVZNX a0 d0
// Preserved: a6 a7
// Stack args: Stack +0004(32) Stack +0008(32) Stack +000C(32) Stack +000F(8)
fn00002354_entry:
// DataOut: a5
// DataOut (flags): 
// SymbolicIn: a7:fp
// LocalsOut: fp(32) Stack +0004(32) Stack +0008(32) Stack +000C(32) Stack +000F(8)

l00002354:
	Mem9[a5 + -1380:byte] = bArg0F
	branch dwArg08 != 0x00000000 l00002386
// DataOut: a5
// DataOut (flags): 
// SymbolicIn: a7:fp
// LocalsOut: fp(32) Stack +0004(32) Stack +000C(32)

l00002364:
	branch Mem9[a5 + -708:word32] == 0x00000000 l00002378
// DataOut: a5
// DataOut (flags): 
// SymbolicIn: a7:fp - 0x00000004 a6:fp - 0x00000004 -4(fp):a6
// LocalsOut: fp(32) Stack +0004(32) Stack +000C(32)

l0000236A:
	fn000023B4(Mem9[a5 + -708:word32], Mem9[a5 + -712:word32])
// DataOut: a5
// DataOut (flags): 
// SymbolicIn: a7:fp - 0x00000004 a6:fp - 0x00000004 -4(fp):a6
// LocalsOut: fp(32) Stack +0004(32) Stack +000C(32)

l00002378:
	fn000023B4(a5 + -736, a5 + -728)
// DataOut: a5
// DataOut (flags): 
// SymbolicIn: a7:fp - 0x00000004 a6:fp - 0x00000004 a0:<invalid> d0:<invalid> -12(fp):<invalid> -8(fp):<invalid> -4(fp):a6
// LocalsOut: fp(32) Stack +0004(32) Stack +000C(32)

l00002386:
	word32 a0_22 = fn000023B4(a5 + -724, a5 + -720)
	branch dwArg0C != 0x00000000 l000023AE
// DataOut: a5
// DataOut (flags): 
// SymbolicIn: a7:fp - 0x00000004 a6:fp - 0x00000004 a0:<invalid> d0:<invalid> -12(fp):a5 + -736 -8(fp):a5 + -728 -4(fp):a6
// LocalsOut: fp(32) Stack +0004(32)

l0000239A:
	branch Mem9[a5 + -1376:word32] == 0x00000000 l000023AA
// DataOut: a5
// DataOut (flags): 
// SymbolicIn: a7:fp - 0x00000004 a6:fp - 0x00000004 a0:<invalid> d0:<invalid> -12(fp):a5 + -724 -8(fp):a5 + -720 -4(fp):a6
// LocalsOut: fp(32) Stack +0004(32)

l000023A0:
	Mem55[Mem9[a5 + -1376:word32] + 14:word32] = dwArg04
// DataOut:
// DataOut (flags): 
// SymbolicIn: a7:fp - 0x00000004 a6:fp - 0x00000004 a0:<invalid> d0:<invalid> -12(fp):a5 + -724 -8(fp):a5 + -720 -4(fp):a6
// LocalsOut: fp(32)

l000023AA:
	word32 a7_43
	word32 a6_44
	word32 a5_45
	byte CVZN_46
	byte ZN_47
	bool C_48
	bool V_49
	bool Z_50
	word32 a0_51
	call a5 + 98 (retsize: 4; depth: 8)
		uses: a0_22,a5,a6_5,a7_23,C_41,CVZN_17,dwLoc04_4,dwLoc08_19,dwLoc0C_21,V_42,Z_40,ZN_39
		defs: a0_51,a5_45,a6_44,a7_43,C_48,CVZN_46,V_49,Z_50,ZN_47
// DataOut:
// DataOut (flags): 
// SymbolicIn: a7:fp - 0x00000004 a6:fp - 0x00000004 a0:<invalid> d0:<invalid> -12(fp):a5 + -724 -8(fp):a5 + -720 -4(fp):a6
// LocalsOut: fp(32)

l000023AE:
	return
// DataOut:
// DataOut (flags): 
// SymbolicIn: a7:fp - 0x00000004 a6:fp - 0x00000004 a0:<invalid> d0:<invalid> -12(fp):a5 + -724 -8(fp):a5 + -720 -4(fp):a6

fn00002354_exit:
// DataOut:
// DataOut (flags): 
// SymbolicIn: a7:fp a6:a6 a0:<invalid> d0:<invalid> -12(fp):a5 + -724 -8(fp):a5 + -720 -4(fp):a6



word32 fn000023B4(word32 dwArg04, word32 dwArg08)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse: 
// LiveOut: a0
// Trashed: CVZNX a0 d0
// Preserved: a6 a7 d3 d4 d5
// Stack args: Stack +0004(32) Stack +0008(32)
fn000023B4_entry:
// DataOut: a0 a5
// DataOut (flags): 
// SymbolicIn: a7:fp
// LocalsOut: fp(32) Stack +0004(32) Stack +0008(32)

l000023B4:
	word32 d4_18 = dwArg08
	word32 d3_20 = dwArg04
	branch dwArg08 - dwArg04 <=u 0x00000000 l000023DE
// DataOut: a0 a5 d3 d4
// DataOut (flags): 
// SymbolicIn: a7:fp
// LocalsOut: fp(32)

l000023CA:
	a0 = d3_20
	word32 d0_51 = Mem0[d3_20:word32]
	branch d0_51 == 0x00000000 l000023D8
// DataOut: a0 a5 d0 d3 d4
// DataOut (flags): 
// SymbolicIn: a7:fp - 0x00000010 a6:fp - 0x00000004 d5:-1 d4:<invalid> d3:<invalid> a0:<invalid> d0:<invalid> -16(fp):d3 -12(fp):d4 -8(fp):d5 -4(fp):a6
// LocalsOut: fp(32)

l000023D0:
	branch d0_51 == 0xFFFFFFFF l000023D8
// DataOut: a0 a5 d0 d3 d4
// DataOut (flags): 
// SymbolicIn: a7:fp - 0x00000010 a6:fp - 0x00000004 d5:-1 d4:<invalid> d3:<invalid> a0:<invalid> d0:<invalid> -16(fp):d3 -12(fp):d4 -8(fp):d5 -4(fp):a6
// LocalsOut: fp(32)

l000023D4:
	word32 a7_71
	word32 a6_72
	word32 d5_73
	byte CVZN_76
	byte CZ_77
	word32 d0_79
	bool Z_80
	byte CVZNX_81
	call d0_51 (retsize: 4; depth: 20)
		uses: a0_70,a6_47,a7_48,CVZN_68,CVZNX_42,CZ_43,d0_51,d3_44,d4_45,d5_46,dwLoc04_4,dwLoc08_9,dwLoc0C_12,dwLoc10_15,Z_69
		defs: a0_78,a6_72,a7_71,CVZN_76,CVZNX_81,CZ_77,d0_79,d3_75,d4_74,d5_73,Z_80
// DataOut: a0 a5 d3 d4
// DataOut (flags): 
// SymbolicIn: a7:fp - 0x00000010 a6:fp - 0x00000004 d5:-1 d4:<invalid> d3:<invalid> a0:<invalid> d0:<invalid> -16(fp):d3 -12(fp):d4 -8(fp):d5 -4(fp):a6
// LocalsOut: fp(32)

l000023D8:
	d3_20 = d3_20 + 0x00000004
	branch d4_18 - d3_20 >u 0x00000000 l000023CA
// DataOut: a0 a5 d3 d4
// DataOut (flags): 
// SymbolicIn: a7:fp - 0x00000010 a6:fp - 0x00000004 d5:-1 d4:<invalid> d3:<invalid> a0:<invalid> d0:<invalid> -16(fp):d3 -12(fp):d4 -8(fp):d5 -4(fp):a6
// LocalsOut: fp(32)

l000023DE:
	return a0
// DataOut: a0 a5
// DataOut (flags): 
// SymbolicIn: a7:fp - 0x00000010 a6:fp - 0x00000004 d5:-1 d4:<invalid> d3:<invalid> a0:<invalid> d0:<invalid> -16(fp):d3 -12(fp):d4 -8(fp):d5 -4(fp):a6

fn000023B4_exit:
// DataOut: a0
// DataOut (flags): 
// SymbolicIn: a7:fp a6:a6 d5:d5 d4:d4 d3:d3 a0:<invalid> d0:<invalid> -16(fp):d3 -12(fp):d4 -8(fp):d5 -4(fp):a6



void fn000023F8(word32 a5, word32 dwArg04)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  a5
// LiveOut:
// Trashed: CVZNX a0 a1 d0 d1 d2
// Preserved: a6 a7
// Stack args: Stack +0004(32)
fn000023F8_entry:
// DataOut: a5
// DataOut (flags): 
// SymbolicIn: a7:fp
// LocalsOut: fp(32) Stack +0004(32)

l000023F8:
	fn00002418(a5)
	fn0000243C(a5, dwArg04)
	word32 a0_18 = Mem0[a5 + -1288:word32]
	word32 a7_19
	word32 a6_20
	byte CVZN_21
	word32 a5_22
	word32 a0_23
	call a0_18 (retsize: 4; depth: 12)
		uses: a0_18,a5,a6_5,a7_15,CVZN_13,dwLoc04_4,dwLoc08_16
		defs: a0_23,a5_22,a6_20,a7_19,CVZN_21
	return
// DataOut:
// DataOut (flags): 
// SymbolicIn: a7:fp

fn000023F8_exit:
// DataOut:
// DataOut (flags): 
// SymbolicIn: a7:fp a6:a6 a0:<invalid> d0:<invalid> a1:<invalid> d1:<invalid> d2:<invalid> -8(fp):000000FF -4(fp):a6



void fn00002418(word32 a5)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  a5
// LiveOut:
// Trashed: CVZNX a0 a1 d0 d1 d2
// Preserved: a6 a7
fn00002418_entry:
// DataOut: a5
// DataOut (flags): 
// SymbolicIn: a7:fp
// LocalsOut: fp(32)

l00002418:
	fn0000243C(a5, 0x000000FC)
	word32 a0_12 = Mem0[a5 + -1012:word32]
	branch a0_12 == 0x00000000 l00002430
// DataOut: a5
// DataOut (flags): 
// SymbolicIn: a7:fp
// LocalsOut: fp(32)

l0000242E:
	word32 a7_26
	word32 a6_27
	word32 a0_29
	word32 d0_30
	byte CVZN_31
	bool Z_32
	call a0_12 (retsize: 4; depth: 8)
		uses: a0_12,a5,a6_5,a7_10,CVZN_14,d0_13,dwLoc04_4,dwLoc08_8,Z_15
		defs: a0_29,a5_28,a6_27,a7_26,CVZN_31,d0_30,Z_32
// DataOut: a5
// DataOut (flags): 
// SymbolicIn: a7:fp - 0x00000004 a6:fp - 0x00000004 a0:<invalid> d0:<invalid> a1:<invalid> d1:<invalid> d2:<invalid> -8(fp):000000FC -4(fp):a6
// LocalsOut: fp(32)

l00002430:
	fn0000243C(a5, 0x000000FF)
	return
// DataOut: a5
// DataOut (flags): 
// SymbolicIn: a7:fp - 0x00000004 a6:fp - 0x00000004 a0:<invalid> d0:<invalid> a1:<invalid> d1:<invalid> d2:<invalid> -8(fp):000000FC -4(fp):a6

fn00002418_exit:
// DataOut:
// DataOut (flags): 
// SymbolicIn: a7:fp a6:a6 a0:<invalid> d0:<invalid> a1:<invalid> d1:<invalid> d2:<invalid> -8(fp):000000FF -4(fp):a6



void fn0000243C(word32 a5, word32 dwArg04)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  a5
// LiveOut:
// Trashed: CVZNX a0 a1 d0 d1 d2
// Preserved: a2 a6 a7
// Stack args: Stack +0004(32)
fn0000243C_entry:
// DataOut: a5
// DataOut (flags): 
// SymbolicIn: a7:fp
// LocalsOut: fp(32) Stack +0004(32)

l0000243C:
	word32 d1_103 = 0
	word32 d2_102 = a5 + -1100
// DataOut: a1 a5 d0 d1 d2
// DataOut (flags): 
// SymbolicIn: a7:fp
// LocalsOut: fp(32)

l00002452:
	branch dwArg04 - Mem0[d2_102:word32] == 0x00000000 l00002460
// DataOut: a1 a5 d0 d1 d2
// DataOut (flags): 
// SymbolicIn: a7:fp - 0x00000008 a6:fp - 0x00000004 a1:a5 + -1012 d1:<invalid> a0:<invalid> d2:<invalid> d0:<invalid> -8(fp):a2 -4(fp):a6
// LocalsOut: fp(32)

l00002458:
	d2_102 = d2_102 + 0x00000008
	d1_103 = d1_103 + 0x00000001
	branch d2_102 - (a5 + -1012) <u 0x00000000 l00002452
// DataOut: a1 a5 d0 d1 d2
// DataOut (flags): 
// SymbolicIn: a7:fp - 0x00000008 a6:fp - 0x00000004 a1:a5 + -1012 d1:<invalid> a0:<invalid> d2:<invalid> d0:<invalid> -8(fp):a2 -4(fp):a6
// LocalsOut: fp(32)

l00002460:
	branch dwArg04 - Mem0[(a5 + -1100) + d1_103 * 8:word32] != 0x00000000 l0000248E
// DataOut: a5 d1
// DataOut (flags): 
// SymbolicIn: a7:fp - 0x00000008 a6:fp - 0x00000004 a1:a5 + -1012 d1:<invalid> a0:<invalid> d2:<invalid> d0:<invalid> -8(fp):a2 -4(fp):a6
// LocalsOut: fp(32)

l0000246A:
	word32 a0_64 = Mem0[a5 + -1096 + d1_103 * 8:word32]
	word32 a1_65 = a0_64
// DataOut: a1 a2 a5
// DataOut (flags): 
// SymbolicIn: a7:fp - 0x00000008 a6:fp - 0x00000004 a1:a5 + -1012 d1:<invalid> a0:a5 + -1100 d2:<invalid> d0:<invalid> -8(fp):a2 -4(fp):a6
// LocalsOut: fp(32)

l00002478:
	a1_65 = a1_108 + 1
	word32 a1_108 = a1_65
	branch Mem0[a1_108:byte] != 0x00 l00002478
// DataOut: a1 a2 a5
// DataOut (flags): 
// SymbolicIn: a7:fp - 0x00000008 a6:fp - 0x00000004 a1:<invalid> d1:<invalid> a0:<invalid> d2:<invalid> d0:<invalid> a2:<invalid> -8(fp):a2 -4(fp):a6
// LocalsOut: fp(32)

l0000247C:
	word32 a7_86
	word32 a6_87
	word32 a2_88
	byte CVZN_89
	word32 a1_90
	word32 a5_91
	word32 d1_92
	word32 a0_93
	word32 d2_94
	word32 d0_95
	bool Z_96
	byte CVZNX_97
	bool C_98
	byte ZN_99
	bool V_100
	call a5 + 146 (retsize: 4; depth: 24)
		uses: a0_64,a1_74,a2_66,a5,a6_5,a7_82,C_72,CVZN_85,CVZNX_31,d0_17,d1_33,d2_81,dwLoc04_4,dwLoc08_10,dwLoc0C_77,dwLoc10_80,dwLoc14_84,V_73,Z_71,ZN_70
		defs: a0_93,a1_90,a2_88,a5_91,a6_87,a7_86,C_98,CVZN_89,CVZNX_97,d0_95,d1_92,d2_94,V_100,Z_96,ZN_99
// DataOut: a5
// DataOut (flags): 
// SymbolicIn: a7:fp - 0x00000008 a6:fp - 0x00000004 a1:<invalid> d1:<invalid> a0:<invalid> d2:<invalid> d0:<invalid> a2:<invalid> -8(fp):a2 -4(fp):a6
// LocalsOut: fp(32)

l0000248E:
	return
// DataOut: a5
// DataOut (flags): 
// SymbolicIn: a7:fp - 0x00000008 a6:fp - 0x00000004 a1:<invalid> d1:<invalid> a0:<invalid> d2:<invalid> d0:<invalid> a2:<invalid> -20(fp):2 -16(fp):<invalid> -12(fp):<invalid> -8(fp):a2 -4(fp):a6

fn0000243C_exit:
// DataOut:
// DataOut (flags): 
// SymbolicIn: a7:fp a6:a6 a1:<invalid> d1:<invalid> a0:<invalid> d2:<invalid> d0:<invalid> a2:a2 -20(fp):2 -16(fp):<invalid> -12(fp):<invalid> -8(fp):a2 -4(fp):a6



void fn000024B0(word32 a5, word32 dwArg04)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  a5
// LiveOut:
// Trashed: CVZNX a0 a1 a2 a3 a6 a7 d0 d1 d2 d3 d4 d5 d6 d7
// Preserved: a6 a7
// Stack args: Stack +0004(32)
fn000024B0_entry:
// DataOut: a5
// DataOut (flags): 
// SymbolicIn: a7:fp
// LocalsOut: fp(32) Stack +0004(32)

l000024B0:
	fn000024C4(a5, fp - 0x00000004, dwArg04, Mem0[a5 + -1340:word32])
	return
// DataOut:
// DataOut (flags): 
// SymbolicIn: a7:fp

fn000024B0_exit:
// DataOut:
// DataOut (flags): 
// SymbolicIn: a7:<invalid> a6:<invalid> d4:<invalid> d0:<invalid> a0:<invalid> a2:<invalid> d2:<invalid> d1:<invalid> a1:<invalid> d3:<invalid> d6:<invalid> d5:<invalid> d7:<invalid> a3:<invalid> -12(fp):<invalid> -8(fp):<invalid> -4(fp):a6



void fn000024C4(word32 a5, word32 a6, word32 dwArg04, word32 dwArg08)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  a5 a6
// LiveOut:
// Trashed: CVZNX a0 a1 a2 a3 a6 a7 d0 d1 d2 d3 d4 d5 d6 d7
// Preserved: a6 a7 d3
// Stack args: Stack +0004(32)
fn000024C4_entry:
// DataOut: a5 a6
// DataOut (flags): 
// SymbolicIn: a7:fp
// LocalsOut: fp(32) Stack +0004(32)

l000024C4:
	branch dwArg04 <=u -32 l000024E0
// DataOut: a5 a6 a7 d3
// DataOut (flags): 
// SymbolicIn: a7:fp
// LocalsOut: fp(32) Local -0004(32)

l000024E0:
	word32 d3_50 = SEQ(SLICE(dwArg04 + 0x00000003, word16, 16), SLICE(dwArg04 + 0x00000003, word16, 0) & 0xFFFC)
// DataOut: a5 a6 a7 d3
// DataOut (flags): 
// SymbolicIn: a7:fp - 0x0000000C a6:fp - 0x00000004 d3:<invalid> d4:-32 -12(fp):d4 -8(fp):d3 -4(fp):a6
// LocalsOut: Local -0004(32)

l000024EA:
	Mem57[fp - 0x00000010:word32] = d3_50
	word32 d4_61
	branch fn00002510(a5, fp - 0x00000004, dwArg00, out d4_61) != 0x00000000 l00002506
// DataOut: a5 a6 a7 d3 d4
// DataOut (flags): 
// SymbolicIn: a7:<invalid> a6:<invalid> d3:<invalid> d4:<invalid> a0:<invalid> d0:<invalid> a2:<invalid> d2:<invalid> d1:<invalid> a1:<invalid> d6:<invalid> d5:<invalid> d7:<invalid> a3:<invalid> -16(fp):<invalid> -12(fp):d4 -8(fp):d3 -4(fp):a6
// LocalsOut: Local -0004(32)

l000024F6:
	branch d4_61 == 0x00000000 l00002506
// DataOut: a5 a6 a7 d3
// DataOut (flags): 
// SymbolicIn: a7:<invalid> a6:<invalid> d3:<invalid> d4:<invalid> a0:<invalid> d0:<invalid> a2:<invalid> d2:<invalid> d1:<invalid> a1:<invalid> d6:<invalid> d5:<invalid> d7:<invalid> a3:<invalid> -16(fp):<invalid> -12(fp):d4 -8(fp):d3 -4(fp):a6
// LocalsOut: Local -0004(32)

l000024FA:
	Mem89[fp - 0x00000010:word32] = d3_50
	branch fn00002644(a5, dwArg00) != 0x00000000 l000024EA
// DataOut: a5 a6 a7 d3
// DataOut (flags): 
// SymbolicIn: a7:<invalid> a6:<invalid> d3:<invalid> d4:<invalid> a0:<invalid> d0:<invalid> a2:<invalid> d2:<invalid> d1:<invalid> a1:<invalid> d6:<invalid> d5:<invalid> d7:<invalid> a3:<invalid> -16(fp):<invalid> -12(fp):d4 -8(fp):d3 -4(fp):a6
// LocalsOut: Local -0004(32)

l00002506:
	return
// DataOut:
// DataOut (flags): 
// SymbolicIn: a7:<invalid> a6:<invalid> d3:<invalid> d4:<invalid> a0:<invalid> d0:<invalid> a2:<invalid> d2:<invalid> d1:<invalid> a1:<invalid> d6:<invalid> d5:<invalid> d7:<invalid> a3:<invalid> -16(fp):<invalid> -12(fp):d4 -8(fp):d3 -4(fp):a6

l000024D6:
	return
// DataOut:
// DataOut (flags): 
// SymbolicIn: a7:fp - 0x0000000C a6:fp - 0x00000004 d3:<invalid> d4:-32 -12(fp):d4 -8(fp):d3 -4(fp):a6

fn000024C4_exit:
// DataOut:
// DataOut (flags): 
// SymbolicIn: a7:<invalid> a6:<invalid> d3:<invalid> d4:<invalid> d0:<invalid> a0:<invalid> a2:<invalid> d2:<invalid> d1:<invalid> a1:<invalid> d6:<invalid> d5:<invalid> d7:<invalid> a3:<invalid> -16(fp):<invalid> -12(fp):d4 -8(fp):d3 -4(fp):a6



word32 fn00002510(word32 a5, word32 a6, word32 dwArg04, ptr32 & d4Out)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  a5 a6
// LiveOut: d0 d4
// Trashed: CVZNX a0 a1 a2 a3 a6 a7 d0 d1 d2 d3 d4 d5 d6 d7
// Preserved: a6 a7 d3
// Stack args: Stack +0004(32)
fn00002510_entry:
	*d4Out = d4
// DataOut: a5 a6 d4
// DataOut (flags): 
// SymbolicIn: a7:fp
// LocalsOut: fp(32) Stack +0004(32)

l00002510:
	word32 a0_22
	word32 d0_23 = fn000027B0(a5, dwArg04, out a0_22)
	word32 a2_143 = d0_23
	branch d0_23 != 0x00000000 l0000254A
// DataOut: a0 a2 a5 a6 a7 d3 d4
// DataOut (flags): 
// SymbolicIn: a7:fp
// LocalsOut: fp(32) Local -0004(32)

l0000252A:
	branch fn000028A0(a0_22, d0_23, a5, fp - 0x00000004, dwArg04) == -1 l000025A8
// DataOut: a5 a6 a7 d3 d4
// DataOut (flags): 
// SymbolicIn: a7:fp - 0x0000000C a6:fp - 0x00000004 d3:<invalid> a2:<invalid> a1:<invalid> d2:<invalid> d0:<invalid> a0:<invalid> d1:<invalid> -16(fp):<invalid> -12(fp):a2 -8(fp):d3 -4(fp):a6
// LocalsOut: Local -0004(32)

l000025A8:
	return 0
// DataOut: a5 d0 d4
// DataOut (flags): 
// SymbolicIn: a7:<invalid> a6:<invalid> d3:<invalid> a2:<invalid> d2:-1 a1:<invalid> d0:<invalid> a0:<invalid> d1:<invalid> d6:<invalid> d5:<invalid> d4:<invalid> d7:<invalid> a3:<invalid> -16(fp):<invalid> -12(fp):a2 -8(fp):d3 -4(fp):a6

l00002538:
	Mem134[fp - 0x00000010:word32] = dwArg04
	word32 a0_136
	word32 d0_137 = fn000027B0(a5, dwArg00, out a0_136)
	a2_143 = d0_137
	branch d0_137 != 0x00000000 l0000254A
// DataOut: a2 a5 a6 a7 d3 d4
// DataOut (flags): 
// SymbolicIn: a7:<invalid> a6:<invalid> d3:<invalid> a2:<invalid> d2:-1 a1:<invalid> d0:<invalid> a0:<invalid> d1:<invalid> d6:<invalid> d5:<invalid> d4:<invalid> d7:<invalid> a3:<invalid> -16(fp):<invalid> -12(fp):a2 -8(fp):d3 -4(fp):a6
// LocalsOut: Local -0004(32)

l00002546:
	fn000027A0()
// DataOut: a2 a5 a6 a7 d3 d4
// DataOut (flags): 
// SymbolicIn: a7:<invalid> a6:<invalid> d3:<invalid> a2:<invalid> d2:<invalid> a1:<invalid> d0:<invalid> a0:<invalid> d1:<invalid> d6:<invalid> d5:<invalid> d4:<invalid> d7:<invalid> a3:<invalid> -16(fp):<invalid> -12(fp):a2 -8(fp):d3 -4(fp):a6
// LocalsOut: Local -0004(32)

l0000254A:
	word32 d0_55 = Mem0[Mem0[a2_143:word32] + 4:word32]
	word32 d1_59 = Mem0[a2_143 + 4:word32]
	branch SEQ(SLICE(d0_55, word16, 16), SLICE(d0_55, word16, 0) & 0xFFFC) - SEQ(SLICE(d1_59, word16, 16), SLICE(d1_59, word16, 0) & 0xFFFC) - dwArg04 == 4 l00002586
// DataOut: a2 a5 a6 a7 d3 d4
// DataOut (flags): 
// SymbolicIn: a7:<invalid> a6:<invalid> d3:<invalid> a2:<invalid> d2:<invalid> a1:<invalid> d0:<invalid> a0:<invalid> d1:<invalid> d6:<invalid> d5:<invalid> d4:<invalid> d7:<invalid> a3:<invalid> -16(fp):<invalid> -12(fp):a2 -8(fp):d3 -4(fp):a6
// LocalsOut: Local -0004(32)

l00002566:
	Mem101[fp - 0x00000010:word32] = dwArg04
	Mem104[fp - 0x00000014:word32] = a2_143
	word32 d0_107 = fn000025B4(a5, dwArg00, dwArg04)
	branch d0_107 == 0x00000000 l00002586
// DataOut: a0 a2 a5 a6 a7 d4
// DataOut (flags): 
// SymbolicIn: a7:<invalid> a6:<invalid> d3:<invalid> a2:<invalid> a0:<invalid> d0:<invalid> d1:<invalid> d2:4 a1:<invalid> d6:<invalid> d5:<invalid> d4:<invalid> d7:<invalid> a3:<invalid> -16(fp):<invalid> -12(fp):a2 -8(fp):d3 -4(fp):a6

l00002576:
	word32 d0_115
	__bclr(Mem104[d0_107 + 4:word32], 0x00000001, out d0_115)
	word32 d0_117
	__bset(d0_115, 0x0000, out d0_117)
	Mem120[d0_107 + 4:word32] = d0_117
// DataOut: a2 a5 a6 a7 d4
// DataOut (flags): 
// SymbolicIn: a7:<invalid> a6:<invalid> d3:<invalid> a2:<invalid> a0:<invalid> d0:<invalid> d1:<invalid> d2:<invalid> a1:<invalid> d6:<invalid> d5:<invalid> d4:<invalid> d7:<invalid> a3:<invalid> -20(fp):<invalid> -16(fp):<invalid> -12(fp):a2 -8(fp):d3 -4(fp):a6

l00002586:
	word32 d0_76 = Mem0[a2_143 + 4:word32]
	Mem81[a2_143 + 4:word32] = SEQ(SLICE(d0_76, word16, 16), SLICE(d0_76, word16, 0) & 0xFFFC)
	Mem83[a5 + -1332:word32] = Mem81[a2_143:word32]
	word32 d0_84 = Mem83[a2_143 + 4:word32]
	return SEQ(SLICE(d0_84, word16, 16), SLICE(d0_84, word16, 0) & 0xFFFC) + 0x00000004
// DataOut: a5 d0 d4
// DataOut (flags): 
// SymbolicIn: a7:<invalid> a6:<invalid> d3:<invalid> a2:<invalid> a0:<invalid> d0:<invalid> d1:<invalid> d2:<invalid> a1:<invalid> d6:<invalid> d5:<invalid> d4:<invalid> d7:<invalid> a3:<invalid> -20(fp):<invalid> -16(fp):<invalid> -12(fp):a2 -8(fp):d3 -4(fp):a6

fn00002510_exit:
// DataOut: d0 d4
// DataOut (flags): 
// SymbolicIn: a7:<invalid> a6:<invalid> d3:<invalid> a2:<invalid> d2:<invalid> d0:<invalid> a0:<invalid> d1:<invalid> a1:<invalid> d6:<invalid> d5:<invalid> d4:<invalid> d7:<invalid> a3:<invalid> -20(fp):<invalid> -16(fp):<invalid> -12(fp):a2 -8(fp):d3 -4(fp):a6



word32 fn000025B4(word32 a5, word32 dwArg04, word32 dwArg08)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  a5
// LiveOut: d0
// Trashed: CVZNX a0 a1 d0 d1 d2
// Preserved: a2 a6 a7
// Stack args: Stack +0004(32) Stack +0008(32)
fn000025B4_entry:
// DataOut: a5 d4
// DataOut (flags): 
// SymbolicIn: a7:fp
// LocalsOut: fp(32) Stack +0004(32) Stack +0008(32)

l000025B4:
	word32 a0_14 = Mem0[dwArg04:word32]
	word32 d0_15 = Mem0[a0_14 + 4:word32]
	word32 d1_19 = Mem0[dwArg04 + 4:word32]
	branch SEQ(SLICE(d0_15, word16, 16), SLICE(d0_15, word16, 0) & 0xFFFC) - SEQ(SLICE(d1_19, word16, 16), SLICE(d1_19, word16, 0) & 0xFFFC) - 0x00000004 - dwArg08 <=u 0x00000000 l00002608
// DataOut: a0 a2 a5 d4
// DataOut (flags): 
// SymbolicIn: a7:fp
// LocalsOut: fp(32) Stack +0008(32)

l000025DA:
	word32 a0_60
	word32 d0_61 = fn0000273C(a0_14, a5, out a0_60)
	branch d0_61 == 0x00000000 l00002608
// DataOut: a0 a2 a5 d4
// DataOut (flags): 
// SymbolicIn: a7:fp - 0x00000008 a6:fp - 0x00000004 a2:<invalid> a0:<invalid> d0:<invalid> d1:<invalid> -8(fp):a2 -4(fp):a6
// LocalsOut: fp(32) Stack +0008(32)

l00002608:
	return 0
// DataOut: a5 d0 d4
// DataOut (flags): 
// SymbolicIn: a7:fp - 0x00000008 a6:fp - 0x00000004 a2:<invalid> a0:<invalid> d0:<invalid> d1:<invalid> d2:<invalid> -8(fp):a2 -4(fp):a6

l000025E4:
	word32 d0_67 = Mem0[dwArg04 + 4:word32]
	word32 d0_71 = SEQ(SLICE(d0_67, word16, 16), SLICE(d0_67, word16, 0) & 0xFFFC) + dwArg08
	Mem76[d0_61 + 4:word32] = d0_71 + 0x00000004
	Mem78[d0_71 + 0x00000004:word32] = d0_61
	Mem80[d0_61:word32] = Mem78[dwArg04:word32]
	Mem82[dwArg04:word32] = d0_61
	return d0_61
// DataOut: a5 d0 d4
// DataOut (flags): 
// SymbolicIn: a7:fp - 0x00000008 a6:fp - 0x00000004 a2:<invalid> a0:<invalid> d0:<invalid> d1:<invalid> d2:<invalid> -8(fp):a2 -4(fp):a6

fn000025B4_exit:
// DataOut: d0
// DataOut (flags): 
// SymbolicIn: a7:fp a6:a6 a2:a2 a0:<invalid> d0:<invalid> d1:<invalid> a1:<invalid> d2:<invalid> -8(fp):a2 -4(fp):a6



void fn00002610(word32 a5, word32 dwArg04)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  a5
// LiveOut:
// Trashed: CVZN d0
// Preserved: a6 a7
// Stack args: Stack +0004(32)
fn00002610_entry:
// DataOut: a5
// DataOut (flags): 
// SymbolicIn: a7:fp
// LocalsOut: fp(32) Stack +0004(32)

l00002610:
	Mem11[a5 + -716:word32] = dwArg04
	return
// DataOut:
// DataOut (flags): 
// SymbolicIn: a7:fp

fn00002610_exit:
// DataOut:
// DataOut (flags): 
// SymbolicIn: a7:fp a6:a6 d0:<invalid> -4(fp):a6



word32 fn00002644(word32 a5, word32 dwArg04)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  a5
// LiveOut: d0
// Trashed: CVZN a0 d0
// Preserved: a6 a7
fn00002644_entry:
// DataOut: a5 d3
// DataOut (flags): 
// SymbolicIn: a7:fp
// LocalsOut: fp(32)

l00002644:
	word32 a0_9 = Mem0[a5 + -716:word32]
	branch a0_9 == 0x00000000 l00002664
// DataOut: a5 d0 d3
// DataOut (flags): 
// SymbolicIn: a7:fp
// LocalsOut: fp(32)

l00002650:
	word32 a7_46
	word32 a6_47
	word32 a5_48
	word32 a0_49
	word32 d0_50
	byte CVZN_51
	bool Z_52
	byte ZN_53
	bool C_54
	bool V_55
	call a0_9 (retsize: 4; depth: 12)
		uses: a0_9,a5,a6_5,a7_42,C,CVZN_45,d0_10,dwLoc04_4,dwLoc08_44,V,Z_12,ZN
		defs: a0_49,a5_48,a6_47,a7_46,C_54,CVZN_51,d0_50,V_55,Z_52,ZN_53
	branch d0_50 == 0x00000000 l00002664
// DataOut: a5 d3
// DataOut (flags): 
// SymbolicIn: a7:fp - 0x00000004 a6:fp - 0x00000004 a0:<invalid> d0:<invalid> -4(fp):a6
// LocalsOut: fp(32)

l00002664:
	return 0
// DataOut: a5 d0 d3
// DataOut (flags): 
// SymbolicIn: a7:fp - 0x00000004 a6:fp - 0x00000004 a0:<invalid> d0:<invalid> -8(fp):<invalid> -4(fp):a6

l0000265C:
	return 1
// DataOut: a5 d0 d3
// DataOut (flags): 
// SymbolicIn: a7:fp - 0x00000004 a6:fp - 0x00000004 a0:<invalid> d0:<invalid> -8(fp):<invalid> -4(fp):a6

fn00002644_exit:
// DataOut: d0
// DataOut (flags): 
// SymbolicIn: a7:fp a6:a6 a0:<invalid> d0:<invalid> -8(fp):<invalid> -4(fp):a6



word32 fn0000273C(word32 a0, word32 a5, ptr32 & a0Out)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  a0 a5
// LiveOut: a0 d0
// Trashed: CVZNX a0 d0 d1 d2
// Preserved: a6 a7
fn0000273C_entry:
// DataOut: a0 a2 a5 d4 d7
// DataOut (flags): 
// SymbolicIn: a7:fp
// LocalsOut: fp(32)

l0000273C:
	word32 d0_17
	branch Mem0[a5 + -1328:word32] != 0x00000000 l0000274E
// DataOut: a0 a2 a5 d4 d7
// DataOut (flags): 
// SymbolicIn: a7:fp
// LocalsOut: fp(32)

l00002746:
	word32 a0_34
	d0_17 = fn0000275C(a0, a5, out a0_34)
	branch d0_17 == 0x00000000 l00002758
// DataOut: a0 a2 a5 d0 d4 d7
// DataOut (flags): 
// SymbolicIn: a7:fp - 0x00000004 a6:fp - 0x00000004 -4(fp):a6
// LocalsOut: fp(32)

l0000274E:
	d0_17 = Mem0[a5 + -1328:word32]
	Mem31[a5 + -1328:word32] = Mem0[d0_17:word32]
	word32 a0_29
	*a0Out = d0_17
// DataOut: a0 a2 a5 d0 d4 d7
// DataOut (flags): 
// SymbolicIn: a7:fp - 0x00000004 a6:fp - 0x00000004 d0:<invalid> d2:<invalid> d1:<invalid> a0:<invalid> -4(fp):a6
// LocalsOut: fp(32)

l00002758:
	return d0_17
// DataOut: a0 a2 a5 d0 d4 d7
// DataOut (flags): 
// SymbolicIn: a7:fp - 0x00000004 a6:fp - 0x00000004 d0:<invalid> a0:<invalid> d2:<invalid> d1:<invalid> -4(fp):a6

fn0000273C_exit:
// DataOut: a0 d0
// DataOut (flags): 
// SymbolicIn: a7:fp a6:a6 d0:<invalid> a0:<invalid> d2:<invalid> d1:<invalid> -4(fp):a6



word32 fn0000275C(word32 a0, word32 a5, ptr32 & a0Out)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  a0 a5
// LiveOut: a0 d0
// Trashed: CVZNX a0 d0 d1 d2
// Preserved: a6 a7
fn0000275C_entry:
	*a0Out = a0
// DataOut: a0 a2 a5 d4 d7
// DataOut (flags): 
// SymbolicIn: a7:fp
// LocalsOut: fp(32)

l0000275C:
	__syscall(0xA11E)
	branch a0 != 0x00000000 l00002774
// DataOut: a0 a2 a5 d2 d4 d7
// DataOut (flags): 
// SymbolicIn: a7:fp
// LocalsOut: fp(32)

l00002774:
	Mem32[a5 + -1328:word32] = a0
	word32 d0_30 = a0
	word32 d1_36 = a0 + 0x00000008
	branch a0 + 0x00000FF8 - a0 <=u 0x00000000 l00002794
// DataOut: a2 a5 d0 d1 d2 d4 d7
// DataOut (flags): 
// SymbolicIn: a7:fp - 0x00000004 a6:fp - 0x00000004 d0:0x00001000 d2:a0 -4(fp):a6
// LocalsOut: fp(32)

l00002788:
	Mem57[d0_30:word32] = d1_64
	d0_30 = d1_64
	d1_36 = d1_64 + 0x00000008
	word32 d1_64 = d1_36
	branch a0 + 0x00000FF8 - d1_64 >u 0x00000000 l00002788
// DataOut: a2 a5 d0 d1 d2 d4 d7
// DataOut (flags): 
// SymbolicIn: a7:fp - 0x00000004 a6:fp - 0x00000004 d0:<invalid> d2:a0 + 0x00000FF8 d1:<invalid> a0:<invalid> -4(fp):a6
// LocalsOut: fp(32)

l00002794:
	Mem47[a0 + 0x00000FF8:word32] = 0
	word32 a0_44
	*a0Out = a0 + 0x00000FF8
	return 1
// DataOut: a0 a2 a5 d0 d4 d7
// DataOut (flags): 
// SymbolicIn: a7:fp - 0x00000004 a6:fp - 0x00000004 d0:<invalid> d2:a0 + 0x00000FF8 d1:<invalid> a0:<invalid> -4(fp):a6

l0000276C:
	return 0
// DataOut: a0 a2 a5 d0 d4 d7
// DataOut (flags): 
// SymbolicIn: a7:fp - 0x00000004 a6:fp - 0x00000004 d0:0x00001000 d2:a0 -4(fp):a6

fn0000275C_exit:
// DataOut: a0 d0
// DataOut (flags): 
// SymbolicIn: a7:fp a6:a6 d0:<invalid> d2:<invalid> d1:<invalid> a0:a0 + 0x00000FF8 -4(fp):a6



void fn000027A0()
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse: 
// LiveOut:
// Trashed: CVZN d2
// Preserved: a6 a7
fn000027A0_entry:
// DataOut: a2 a5 d3 d4 d7
// DataOut (flags): 
// SymbolicIn: a7:fp
// LocalsOut: fp(32)

l000027A0:
	word32 a7_13
	word32 a6_14
	word32 d2_15
	byte CVZN_16
	word32 a5_17
	call a5 + 90 (retsize: 4; depth: 12)
		uses: a5,a6_5,a7_8,CVZN_11,d2_7,dwLoc04_4,dwLoc08_10
		defs: a5_17,a6_14,a7_13,CVZN_16,d2_15
	return
// DataOut: a2 a5 d3 d4 d7
// DataOut (flags): 
// SymbolicIn: a7:fp

fn000027A0_exit:
// DataOut:
// DataOut (flags): 
// SymbolicIn: a7:fp a6:a6 d2:18 -8(fp):18 -4(fp):a6



word32 fn000027B0(word32 a5, word32 dwArg04, ptr32 & a0Out)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  a5
// LiveOut: a0 d0
// Trashed: CVZNX a0 a1 d0 d1 d2
// Preserved: a2 a3 a4 a6 a7 d3 d4 d5 d6
// Stack args: Stack +0004(32)
fn000027B0_entry:
	*a0Out = a0
// DataOut: a0 a5
// DataOut (flags): 
// SymbolicIn: a7:fp
// LocalsOut: fp(32) Stack +0004(32)

l000027B0:
	word32 a2_110 = Mem0[a5 + -1332:word32]
	word32 a1_33 = 0x00000000
	branch a5 + -1324 - a2_110 == 0x00000000 l00002814
// DataOut: a0 a1 a2 a3 a5
// DataOut (flags): 
// SymbolicIn: a7:fp
// LocalsOut: fp(32) Stack +0004(32)

l00002814:
// DataOut: a0 a1 a5 d2
// DataOut (flags): 
// SymbolicIn: a7:fp - 0x00000020 a6:fp - 0x00000004 a3:a5 + -1324 d6:0x0000FFFC d5:1 d4:3 a1:0x00000000 a2:<invalid> -32(fp):d3 -28(fp):d4 -24(fp):d5 -20(fp):d6 -16(fp):a2 -12(fp):a3 -8(fp):a4 -4(fp):a6
// LocalsOut: fp(32)

l000027D0:
// DataOut: a0 a1 a2 a3 a5 d2
// DataOut (flags): 
// SymbolicIn: a7:fp - 0x00000020 a6:fp - 0x00000004 a3:a5 + -1324 d6:0x0000FFFC d5:1 d4:3 a1:0x00000000 a2:<invalid> -32(fp):d3 -28(fp):d4 -24(fp):d5 -20(fp):d6 -16(fp):a2 -12(fp):a3 -8(fp):a4 -4(fp):a6
// LocalsOut: fp(32)

l000027D4:
	word32 a4_214 = a2_110 + 4
	branch (Mem0[a4_214:word32] & 3) != 0x00000001 l0000280C
// DataOut: a0 a1 a2 a3 a4 a5 d2
// DataOut (flags): 
// SymbolicIn: a7:fp - 0x00000020 a6:fp - 0x00000004 a3:a5 + -1324 d6:0x0000FFFC d5:1 d4:3 a1:0x00000000 a2:<invalid> d2:<invalid> a4:<invalid> d0:<invalid> a0:<invalid> d1:<invalid> d3:<invalid> -32(fp):d3 -28(fp):d4 -24(fp):d5 -20(fp):d6 -16(fp):a2 -12(fp):a3 -8(fp):a4 -4(fp):a6
// LocalsOut: fp(32)

l000027E0:
	word32 a0_231 = Mem0[a2_110:word32]
	*a0Out = a0_231
	word32 d0_232 = Mem0[a0_231 + 4:word32]
	word32 d3_237 = Mem0[a4_214:word32]
	branch SEQ(SLICE(d0_232, word16, 16), SLICE(d0_232, word16, 0) & 0xFFFC) - SEQ(SLICE(d3_237, word16, 16), SLICE(d3_237, word16, 0) & 0xFFFC) - 0x00000004 - dwArg04 >=u 0x00000000 l00002880
// DataOut: a0 a1 a2 a3 a4 a5 d0 d2
// DataOut (flags): 
// SymbolicIn: a7:fp - 0x00000020 a6:fp - 0x00000004 a3:a5 + -1324 d6:0x0000FFFC d5:1 d4:3 a1:0x00000000 a2:<invalid> d2:<invalid> a4:<invalid> d0:<invalid> a0:<invalid> d1:<invalid> d3:<invalid> -32(fp):d3 -28(fp):d4 -24(fp):d5 -20(fp):d6 -16(fp):a2 -12(fp):a3 -8(fp):a4 -4(fp):a6
// LocalsOut: fp(32)

l000027F8:
	branch (d0_232 & 3) != 0x00000001 l0000280C
// DataOut: a0 a1 a2 a3 a4 a5 d2
// DataOut (flags): 
// SymbolicIn: a7:fp - 0x00000020 a6:fp - 0x00000004 a3:a5 + -1324 d6:0x0000FFFC d5:1 d4:3 a1:0x00000000 a2:<invalid> d2:<invalid> a4:<invalid> d0:<invalid> a0:<invalid> d1:<invalid> d3:<invalid> -32(fp):d3 -28(fp):d4 -24(fp):d5 -20(fp):d6 -16(fp):a2 -12(fp):a3 -8(fp):a4 -4(fp):a6
// LocalsOut: fp(32)

l0000280C:
	a2_110 = Mem0[a2_110:word32]
	branch a2_110 - (a5 + -1324) != 0x00000000 l000027D4
// DataOut: a0 a1 a2 a3 a5 d2
// DataOut (flags): 
// SymbolicIn: a7:fp - 0x00000020 a6:fp - 0x00000004 a3:a5 + -1324 d6:0x0000FFFC d5:1 d4:3 a1:0x00000000 a2:<invalid> d2:<invalid> a4:<invalid> d0:<invalid> a0:<invalid> d1:<invalid> d3:<invalid> -32(fp):d3 -28(fp):d4 -24(fp):d5 -20(fp):d6 -16(fp):a2 -12(fp):a3 -8(fp):a4 -4(fp):a6
// LocalsOut: fp(32)

l00002812:
// DataOut: a0 a1 a5 d2
// DataOut (flags): 
// SymbolicIn: a7:fp - 0x00000020 a6:fp - 0x00000004 a3:a5 + -1324 d6:0x0000FFFC d5:1 d4:3 a1:0x00000000 a2:<invalid> d2:<invalid> a4:<invalid> d0:<invalid> a0:<invalid> d1:<invalid> d3:<invalid> -32(fp):d3 -28(fp):d4 -24(fp):d5 -20(fp):d6 -16(fp):a2 -12(fp):a3 -8(fp):a4 -4(fp):a6
// LocalsOut: fp(32)

l00002818:
	a2_110 = Mem0[a5 + -1336:word32]
	branch a2_110 - Mem0[a5 + -1332:word32] == 0x00000000 l00002882
// DataOut: a0 a1 a2 a5 d2
// DataOut (flags): 
// SymbolicIn: a7:fp - 0x00000020 a6:fp - 0x00000004 a3:a5 + -1324 d6:0x0000FFFC d5:1 d4:3 a1:0x00000000 a2:<invalid> d2:<invalid> a4:<invalid> d0:<invalid> a0:<invalid> d1:<invalid> d3:<invalid> -32(fp):d3 -28(fp):d4 -24(fp):d5 -20(fp):d6 -16(fp):a2 -12(fp):a3 -8(fp):a4 -4(fp):a6
// LocalsOut: fp(32)

l0000282C:
	word32 a3_120 = a2_110 + 4
	branch (Mem0[a3_120:word32] & 3) != 0x00000001 l0000288C
// DataOut: a0 a1 a2 a3 a5 d2
// DataOut (flags): 
// SymbolicIn: a7:fp - 0x00000020 a6:fp - 0x00000004 a3:<invalid> d6:0x0000FFFC d5:1 d4:3 a1:0x00000000 a2:<invalid> d2:<invalid> d0:<invalid> a4:<invalid> a0:<invalid> d3:<invalid> d1:<invalid> -32(fp):d3 -28(fp):d4 -24(fp):d5 -20(fp):d6 -16(fp):a2 -12(fp):a3 -8(fp):a4 -4(fp):a6
// LocalsOut: fp(32)

l00002838:
	word32 a0_155 = Mem0[a2_110:word32]
	*a0Out = a0_155
	word32 d3_156 = Mem0[a0_155 + 4:word32]
	word32 d1_161 = Mem0[a3_120:word32]
	branch SEQ(SLICE(d3_156, word16, 16), SLICE(d3_156, word16, 0) & 0xFFFC) - SEQ(SLICE(d1_161, word16, 16), SLICE(d1_161, word16, 0) & 0xFFFC) - 0x00000004 - dwArg04 >=u 0x00000000 l00002880
// DataOut: a0 a1 a2 a3 a5 d2 d3
// DataOut (flags): 
// SymbolicIn: a7:fp - 0x00000020 a6:fp - 0x00000004 a3:<invalid> d6:0x0000FFFC d5:1 d4:3 a1:0x00000000 a2:<invalid> d2:<invalid> d0:<invalid> a4:<invalid> a0:<invalid> d3:<invalid> d1:<invalid> -32(fp):d3 -28(fp):d4 -24(fp):d5 -20(fp):d6 -16(fp):a2 -12(fp):a3 -8(fp):a4 -4(fp):a6
// LocalsOut: fp(32)

l0000284E:
	branch (d3_156 & 3) != 0x00000001 l0000288C
// DataOut: a0 a1 a2 a3 a5 d2
// DataOut (flags): 
// SymbolicIn: a7:fp - 0x00000020 a6:fp - 0x00000004 a3:<invalid> d6:0x0000FFFC d5:1 d4:3 a1:0x00000000 a2:<invalid> d2:<invalid> d0:<invalid> a0:<invalid> d3:<invalid> d1:<invalid> a4:<invalid> -32(fp):d3 -28(fp):d4 -24(fp):d5 -20(fp):d6 -16(fp):a2 -12(fp):a3 -8(fp):a4 -4(fp):a6
// LocalsOut: fp(32)

l0000288C:
	a2_110 = Mem0[a2_110:word32]
	branch a2_110 - Mem0[a5 + -1332:word32] != 0x00000000 l0000282C
// DataOut: a0 a1 a2 a5 d2
// DataOut (flags): 
// SymbolicIn: a7:fp - 0x00000020 a6:fp - 0x00000004 a3:<invalid> d6:0x0000FFFC d5:1 d4:3 a1:0x00000000 a2:<invalid> d2:<invalid> d0:<invalid> a0:<invalid> d3:<invalid> d1:<invalid> a4:<invalid> -32(fp):d3 -28(fp):d4 -24(fp):d5 -20(fp):d6 -16(fp):a2 -12(fp):a3 -8(fp):a4 -4(fp):a6
// LocalsOut: fp(32)

l00002894:
	return 0x00000000
// DataOut: a0 a5 d0
// DataOut (flags): 
// SymbolicIn: a7:fp - 0x00000020 a6:fp - 0x00000004 a3:<invalid> d6:0x0000FFFC d5:1 d4:3 a1:0x00000000 a2:<invalid> d2:<invalid> d0:<invalid> a0:<invalid> d3:<invalid> d1:<invalid> a4:<invalid> -32(fp):d3 -28(fp):d4 -24(fp):d5 -20(fp):d6 -16(fp):a2 -12(fp):a3 -8(fp):a4 -4(fp):a6

l00002854:
	Mem176[a2_110:word32] = Mem0[a0_155:word32]
	Mem178[a0_155:word32] = Mem176[a5 + -1328:word32]
	Mem180[a5 + -1328:word32] = a0_155
	branch a0_155 - Mem180[a5 + -1332:word32] != 0x00000000 l00002838
// DataOut: a1 a2 a3 a5 d2
// DataOut (flags): 
// SymbolicIn: a7:fp - 0x00000020 a6:fp - 0x00000004 a3:<invalid> d6:0x0000FFFC d5:1 d4:3 a1:0x00000000 a2:<invalid> d2:<invalid> d0:<invalid> a0:<invalid> d3:<invalid> d1:<invalid> a4:<invalid> -32(fp):d3 -28(fp):d4 -24(fp):d5 -20(fp):d6 -16(fp):a2 -12(fp):a3 -8(fp):a4 -4(fp):a6
// LocalsOut: fp(32)

l00002864:
	Mem185[a5 + -1332:word32] = a2_110
	word32 a0_186 = Mem185[a2_110:word32]
	*a0Out = a0_186
	word32 d0_187 = Mem185[a0_186 + 4:word32]
	word32 d1_191 = Mem185[a3_120:word32]
	branch SEQ(SLICE(d0_187, word16, 16), SLICE(d0_187, word16, 0) & 0xFFFC) - SEQ(SLICE(d1_191, word16, 16), SLICE(d1_191, word16, 0) & 0xFFFC) - 0x00000004 - dwArg04 <u 0x00000000 l00002882
// DataOut: a0 a1 a2 a5
// DataOut (flags): 
// SymbolicIn: a7:fp - 0x00000020 a6:fp - 0x00000004 a3:<invalid> d6:0x0000FFFC d5:1 d4:3 a1:0x00000000 a2:<invalid> d2:<invalid> d0:<invalid> a0:<invalid> d3:<invalid> d1:<invalid> a4:<invalid> -32(fp):d3 -28(fp):d4 -24(fp):d5 -20(fp):d6 -16(fp):a2 -12(fp):a3 -8(fp):a4 -4(fp):a6
// LocalsOut: fp(32)

l00002880:
	a1_33 = a2_110
// DataOut: a0 a1 a5
// DataOut (flags): 
// SymbolicIn: a7:fp - 0x00000020 a6:fp - 0x00000004 a3:<invalid> d6:0x0000FFFC d5:1 d4:3 a1:0x00000000 a2:<invalid> d2:<invalid> a4:<invalid> d0:<invalid> a0:<invalid> d1:<invalid> d3:<invalid> -32(fp):d3 -28(fp):d4 -24(fp):d5 -20(fp):d6 -16(fp):a2 -12(fp):a3 -8(fp):a4 -4(fp):a6
// LocalsOut: fp(32)

l00002882:
	return a1_33
// DataOut: a0 a5 d0
// DataOut (flags): 
// SymbolicIn: a7:fp - 0x00000020 a6:fp - 0x00000004 a3:<invalid> d6:0x0000FFFC d5:1 d4:3 a1:<invalid> a2:<invalid> d2:<invalid> a4:<invalid> d0:<invalid> a0:<invalid> d1:<invalid> d3:<invalid> -32(fp):d3 -28(fp):d4 -24(fp):d5 -20(fp):d6 -16(fp):a2 -12(fp):a3 -8(fp):a4 -4(fp):a6

fn000027B0_exit:
// DataOut: a0 d0
// DataOut (flags): 
// SymbolicIn: a7:fp a6:a6 a3:a3 d6:d6 d5:d5 d4:d4 a1:<invalid> a2:a2 d2:<invalid> d0:<invalid> d3:d3 a4:a4 a0:<invalid> d1:<invalid> -32(fp):d3 -28(fp):d4 -24(fp):d5 -20(fp):d6 -16(fp):a2 -12(fp):a3 -8(fp):a4 -4(fp):a6

l000027FE:
	Mem252[a2_110:word32] = Mem0[a0_231:word32]
	Mem254[a0_231:word32] = Mem252[a5 + -1328:word32]
	Mem256[a5 + -1328:word32] = a0_231
// DataOut: a1 a2 a3 a4 a5 d2
// DataOut (flags): 
// SymbolicIn: a7:fp - 0x00000020 a6:fp - 0x00000004 a3:a5 + -1324 d6:0x0000FFFC d5:1 d4:3 a1:0x00000000 a2:<invalid> d2:<invalid> a4:<invalid> d0:<invalid> a0:<invalid> d1:<invalid> d3:<invalid> -32(fp):d3 -28(fp):d4 -24(fp):d5 -20(fp):d6 -16(fp):a2 -12(fp):a3 -8(fp):a4 -4(fp):a6
// LocalsOut: fp(32)



word32 fn000028A0(word32 a0, word32 a2, word32 a5, word32 a6, word32 dwArg04)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  a0 a2 a5 a6
// LiveOut: d0
// Trashed: CVZNX a0 a1 a2 a3 a6 a7 d0 d1 d2 d3 d4 d5 d6 d7
// Preserved: a2 a6 a7 d3 d4 d5 d6 d7
// Stack args: Stack +0004(32)
fn000028A0_entry:
// DataOut: a0 a2 a5 a6
// DataOut (flags): 
// SymbolicIn: a7:fp
// LocalsOut: fp(32) Stack +0004(32)

l000028A0:
	word32 d4_266 = Mem0[a5 + -1292:word32]
	word32 a2_26 = SEQ(SLICE(a2, word16, 16), 0x0010)
	word32 d5_202 = -1
	word32 d3_36 = SEQ(SLICE(dwArg04 + 0x00000007, word16, 16), SLICE(dwArg04 + 0x00000007, word16, 0) & 0xFFFC)
	branch d4_266 - Mem0[a5 + -1312:word32] >= 0x00000000 l0000290E
// DataOut: a0 a2 a5 a6 a7 d3 d4 d5
// DataOut (flags): 
// SymbolicIn: a7:fp
// LocalsOut: Local -0004(32)

l000028C6:
	word32 d7_260 = d4_266 << 0x00000004
// DataOut: a2 a5 a6 a7 d3 d4 d5 d7
// DataOut (flags): 
// SymbolicIn: a7:fp - 0x0000001C a6:fp - 0x00000004 a2:SEQ(SLICE(a2, word16, 16), 0x0010) d6:-1 d5:-1 d3:<invalid> d4:<invalid> -28(fp):d3 -24(fp):d4 -20(fp):d5 -16(fp):d6 -12(fp):d7 -8(fp):a2 -4(fp):a6
// LocalsOut: Local -0004(32)

l000028CA:
	branch Mem0[Mem0[Mem0[a5 + -1316:word32]:word32] + d7_260:word32] == 0x00000000 l000028E4
// DataOut: a2 a5 a6 a7 d3 d4 d5 d7
// DataOut (flags): 
// SymbolicIn: a7:<invalid> a6:<invalid> a2:<invalid> d6:-1 d5:<invalid> d3:<invalid> d4:<invalid> d7:<invalid> a0:<invalid> d1:<invalid> d0:<invalid> a1:<invalid> d2:<invalid> a3:<invalid> -36(fp):<invalid> -32(fp):<invalid> -28(fp):d3 -24(fp):d4 -20(fp):d5 -16(fp):d6 -12(fp):d7 -8(fp):a2 -4(fp):a6
// LocalsOut: Local -0004(32)

l000028D6:
	Mem294[fp - 0x00000020:word32] = d3_36
	Mem297[fp - 0x00000024:word32] = d4_266
	branch fn00002A54(a5, dwArg00, dwArg04) != 0xFFFFFFFF l000028FC
// DataOut: a2 a5 a6 a7 d3 d4 d5 d7
// DataOut (flags): 
// SymbolicIn: a7:<invalid> a6:<invalid> a2:<invalid> d6:-1 d5:<invalid> d3:<invalid> d4:<invalid> d7:<invalid> a0:<invalid> d1:<invalid> d0:<invalid> a1:<invalid> d2:<invalid> a3:<invalid> -36(fp):<invalid> -32(fp):<invalid> -28(fp):d3 -24(fp):d4 -20(fp):d5 -16(fp):d6 -12(fp):d7 -8(fp):a2 -4(fp):a6
// LocalsOut: Local -0004(32)

l000028FC:
	Mem305[a5 + -1292:word32] = d4_266
	return 0
// DataOut: a5 d0
// DataOut (flags): 
// SymbolicIn: a7:<invalid> a6:<invalid> a2:<invalid> d6:-1 d5:<invalid> d3:<invalid> d4:<invalid> d7:<invalid> a0:<invalid> d1:<invalid> d0:<invalid> a1:<invalid> d2:<invalid> a3:<invalid> -36(fp):<invalid> -32(fp):<invalid> -28(fp):d3 -24(fp):d4 -20(fp):d5 -16(fp):d6 -12(fp):d7 -8(fp):a2 -4(fp):a6

l000028E4:
	a0 = Mem0[Mem0[a5 + -1316:word32]:word32]
	branch Mem0[a0 + d7_260:word32] == 0x00000000 l0000290C
// DataOut: a0 a2 a5 a6 a7 d3 d4 d5 d7
// DataOut (flags): 
// SymbolicIn: a7:<invalid> a6:<invalid> a2:<invalid> d6:-1 d5:<invalid> d3:<invalid> d4:<invalid> d7:<invalid> a0:<invalid> d1:<invalid> d0:<invalid> a1:<invalid> d2:<invalid> a3:<invalid> -36(fp):<invalid> -32(fp):<invalid> -28(fp):d3 -24(fp):d4 -20(fp):d5 -16(fp):d6 -12(fp):d7 -8(fp):a2 -4(fp):a6
// LocalsOut: Local -0004(32)

l0000290C:
	d5_202 = d4_266
// DataOut: a0 a5 a6 a7 d3 d5
// DataOut (flags): 
// SymbolicIn: a7:<invalid> a6:<invalid> a2:<invalid> d6:-1 d5:<invalid> d3:<invalid> d4:<invalid> d7:<invalid> a0:<invalid> d1:<invalid> d0:<invalid> a1:<invalid> d2:<invalid> a3:<invalid> -36(fp):<invalid> -32(fp):<invalid> -28(fp):d3 -24(fp):d4 -20(fp):d5 -16(fp):d6 -12(fp):d7 -8(fp):a2 -4(fp):a6
// LocalsOut: Local -0004(32)

l000028F0:
	d4_266 = d4_266 + 0x00000001
	d7_260 = d7_260 + a2_26
	branch d4_266 - Mem0[a5 + -1312:word32] < 0x00000000 l000028CA
// DataOut: a0 a2 a5 a6 a7 d3 d4 d5 d7
// DataOut (flags): 
// SymbolicIn: a7:<invalid> a6:<invalid> a2:<invalid> d6:-1 d5:<invalid> d3:<invalid> d4:<invalid> d7:<invalid> a0:<invalid> d1:<invalid> d0:<invalid> a1:<invalid> d2:<invalid> a3:<invalid> -36(fp):<invalid> -32(fp):<invalid> -28(fp):d3 -24(fp):d4 -20(fp):d5 -16(fp):d6 -12(fp):d7 -8(fp):a2 -4(fp):a6
// LocalsOut: Local -0004(32)

l000028FA:
// DataOut: a0 a5 a6 a7 d3 d5
// DataOut (flags): 
// SymbolicIn: a7:<invalid> a6:<invalid> a2:<invalid> d6:-1 d5:<invalid> d3:<invalid> d4:<invalid> d7:<invalid> a0:<invalid> d1:<invalid> d0:<invalid> a1:<invalid> d2:<invalid> a3:<invalid> -36(fp):<invalid> -32(fp):<invalid> -28(fp):d3 -24(fp):d4 -20(fp):d5 -16(fp):d6 -12(fp):d7 -8(fp):a2 -4(fp):a6
// LocalsOut: Local -0004(32)

l0000290E:
	branch d5_202 != -1 l000029B4
// DataOut: a0 a5 a6 a7 d3 d5
// DataOut (flags): 
// SymbolicIn: a7:<invalid> a6:<invalid> a2:<invalid> d6:-1 d5:<invalid> d3:<invalid> d4:<invalid> d7:<invalid> a0:<invalid> d1:<invalid> d0:<invalid> a1:<invalid> d2:<invalid> a3:<invalid> -36(fp):<invalid> -32(fp):<invalid> -28(fp):d3 -24(fp):d4 -20(fp):d5 -16(fp):d6 -12(fp):d7 -8(fp):a2 -4(fp):a6
// LocalsOut: Local -0004(32)

l00002916:
	branch Mem0[a5 + -1316:word32] == 0x00000000 l0000292E
// DataOut: a0 a5 a6 a7 d3
// DataOut (flags): 
// SymbolicIn: a7:<invalid> a6:<invalid> a2:<invalid> d6:-1 d5:<invalid> d3:<invalid> d4:<invalid> d7:-1 a0:<invalid> d1:<invalid> d0:<invalid> a1:<invalid> d2:<invalid> a3:<invalid> -36(fp):<invalid> -32(fp):<invalid> -28(fp):d3 -24(fp):d4 -20(fp):d5 -16(fp):d6 -12(fp):d7 -8(fp):a2 -4(fp):a6
// LocalsOut: Local -0004(32)

l00002926:
	a0 = Mem0[a5 + -1316:word32]
	__syscall(0xA024)
// DataOut: a0 a5 a6 a7 d3
// DataOut (flags): 
// SymbolicIn: a7:<invalid> a6:<invalid> a2:<invalid> d6:-1 d5:<invalid> d3:<invalid> d4:<invalid> d7:32 a0:<invalid> d1:<invalid> d0:<invalid> a1:<invalid> d2:<invalid> a3:<invalid> -36(fp):<invalid> -32(fp):<invalid> -28(fp):d3 -24(fp):d4 -20(fp):d5 -16(fp):d6 -12(fp):d7 -8(fp):a2 -4(fp):a6
// LocalsOut: Local -0004(32)

l0000292E:
	branch Mem0[a5 + -1316:word32] == 0x00000000 l0000293C
// DataOut: a0 a5 a6 a7 d3
// DataOut (flags): 
// SymbolicIn: a7:<invalid> a6:<invalid> a2:<invalid> d6:-1 d5:<invalid> d3:<invalid> d4:<invalid> d7:32 d0:<invalid> a0:<invalid> d1:<invalid> a1:<invalid> d2:<invalid> a3:<invalid> -36(fp):<invalid> -32(fp):<invalid> -28(fp):d3 -24(fp):d4 -20(fp):d5 -16(fp):d6 -12(fp):d7 -8(fp):a2 -4(fp):a6
// LocalsOut: Local -0004(32)

l00002934:
	a0 = Mem0[a5 + -1296:word32]
	branch Mem0[a0:word16] == 0x0000 l00002974
// DataOut: a0 a5 a6 a7 d3
// DataOut (flags): 
// SymbolicIn: a7:<invalid> a6:<invalid> a2:<invalid> d6:-1 d5:<invalid> d3:<invalid> d4:<invalid> d7:32 d0:<invalid> a0:<invalid> d1:<invalid> a1:<invalid> d2:<invalid> a3:<invalid> -36(fp):<invalid> -32(fp):<invalid> -28(fp):d3 -24(fp):d4 -20(fp):d5 -16(fp):d6 -12(fp):d7 -8(fp):a2 -4(fp):a6
// LocalsOut: Local -0004(32)

l0000293C:
	__syscall(0xA122)
	branch a0 != 0x00000000 l00002950
// DataOut: a2 a5 a6 a7 d3
// DataOut (flags): 
// SymbolicIn: a7:<invalid> a6:<invalid> a2:<invalid> d6:-1 d5:<invalid> d3:<invalid> d4:<invalid> d7:32 d0:<invalid> a0:<invalid> d1:<invalid> a1:<invalid> d2:<invalid> a3:<invalid> -36(fp):<invalid> -32(fp):<invalid> -28(fp):d3 -24(fp):d4 -20(fp):d5 -16(fp):d6 -12(fp):d7 -8(fp):a2 -4(fp):a6
// LocalsOut: Local -0004(32)

l00002950:
	__syscall(0xA029)
	branch Mem0[a5 + -1316:word32] == 0x00000000 l00002970
// DataOut: a2 a5 a6 a7 d3
// DataOut (flags): 
// SymbolicIn: a7:<invalid> a6:<invalid> a2:<invalid> d6:-1 d5:<invalid> d3:<invalid> d4:<invalid> d7:32 d0:<invalid> a0:<invalid> d1:<invalid> a1:<invalid> d2:<invalid> a3:<invalid> -36(fp):<invalid> -32(fp):<invalid> -28(fp):d3 -24(fp):d4 -20(fp):d5 -16(fp):d6 -12(fp):d7 -8(fp):a2 -4(fp):a6
// LocalsOut: Local -0004(32)

l0000295A:
	__syscall(0xA02E)
	__syscall(0xA023)
// DataOut: a2 a5 a6 a7 d3
// DataOut (flags): 
// SymbolicIn: a7:<invalid> a6:<invalid> a2:<invalid> d6:-1 d5:<invalid> d3:<invalid> d4:<invalid> d7:32 d0:<invalid> a0:<invalid> d1:<invalid> a1:<invalid> d2:<invalid> a3:<invalid> -36(fp):<invalid> -32(fp):<invalid> -28(fp):d3 -24(fp):d4 -20(fp):d5 -16(fp):d6 -12(fp):d7 -8(fp):a2 -4(fp):a6
// LocalsOut: Local -0004(32)

l00002970:
	Mem242[a5 + -1316:word32] = a0
// DataOut: a5 a6 a7 d3
// DataOut (flags): 
// SymbolicIn: a7:<invalid> a6:<invalid> a2:<invalid> d6:-1 d5:<invalid> d3:<invalid> d4:<invalid> d7:32 d0:<invalid> a0:<invalid> a1:<invalid> d1:<invalid> d2:<invalid> a3:<invalid> -36(fp):<invalid> -32(fp):<invalid> -28(fp):d3 -24(fp):d4 -20(fp):d5 -16(fp):d6 -12(fp):d7 -8(fp):a2 -4(fp):a6
// LocalsOut: Local -0004(32)

l00002974:
	a0 = Mem0[Mem0[a5 + -1316:word32]:word32] + (Mem0[a5 + -1312:word32] << 0x00000004)
	word32 d0_145 = 7
// DataOut: a0 a5 a6 a7 d0 d3
// DataOut (flags): 
// SymbolicIn: a7:<invalid> a6:<invalid> a2:<invalid> d6:-1 d5:<invalid> d3:<invalid> d4:<invalid> d7:32 d0:<invalid> a0:<invalid> a1:<invalid> d1:<invalid> d2:<invalid> a3:<invalid> -36(fp):<invalid> -32(fp):<invalid> -28(fp):d3 -24(fp):d4 -20(fp):d5 -16(fp):d6 -12(fp):d7 -8(fp):a2 -4(fp):a6
// LocalsOut: Local -0004(32)

l00002986:
	Mem150[a0:word32] = 0
	word32 a0_151 = a0 + 4
	Mem153[a0_151:word32] = 0
	Mem156[a0_151 + 4:word32] = 0
	Mem159[a0_151 + 8:word32] = 0
	Mem162[a0_151 + 12:word32] = 0
	Mem165[a0_151 + 16:word32] = 0
	Mem168[a0_151 + 20:word32] = 0
	Mem171[a0_151 + 24:word32] = 0
	Mem174[a0_151 + 28:word32] = 0
	Mem177[a0_151 + 32:word32] = 0
	Mem180[a0_151 + 36:word32] = 0
	Mem183[a0_151 + 40:word32] = 0
	Mem186[a0_151 + 44:word32] = 0
	Mem189[a0_151 + 48:word32] = 0
	Mem192[a0_151 + 52:word32] = 0
	Mem195[a0_151 + 56:word32] = 0
	word16 v49_198 = SLICE(d0_145, word16, 0)
	a0 = a0_151 + 60
	d0_145 = SEQ(SLICE(d0_145, word16, 16), v49_198 - 1)
	branch v49_198 != 0x0000 l00002986
// DataOut: a0 a5 a6 a7 d0 d3
// DataOut (flags): 
// SymbolicIn: a7:<invalid> a6:<invalid> a2:<invalid> d6:-1 d5:<invalid> d3:<invalid> d4:<invalid> d7:32 d0:<invalid> a0:<invalid> d1:0 a1:<invalid> d2:<invalid> a3:<invalid> -36(fp):<invalid> -32(fp):<invalid> -28(fp):d3 -24(fp):d4 -20(fp):d5 -16(fp):d6 -12(fp):d7 -8(fp):a2 -4(fp):a6
// LocalsOut: Local -0004(32)

l000029AA:
	d5_202 = Mem195[a5 + -1312:word32]
	Mem205[a5 + -1312:word32] = Mem195[a5 + -1312:word32] + 32
// DataOut: a0 a5 a6 a7 d3 d5
// DataOut (flags): 
// SymbolicIn: a7:<invalid> a6:<invalid> a2:<invalid> d6:-1 d5:<invalid> d3:<invalid> d4:<invalid> d7:32 d0:<invalid> a0:<invalid> d1:0 a1:<invalid> d2:<invalid> a3:<invalid> -36(fp):<invalid> -32(fp):<invalid> -28(fp):d3 -24(fp):d4 -20(fp):d5 -16(fp):d6 -12(fp):d7 -8(fp):a2 -4(fp):a6
// LocalsOut: Local -0004(32)

l000029B4:
	Mem94[fp - 0x00000020:word32] = d3_36
	Mem97[fp - 0x00000024:word32] = d5_202
	return fn000029C8(a0, a5, fp - 0x00000004, dwArg00, dwArg04)
// DataOut: a5 d0
// DataOut (flags): 
// SymbolicIn: a7:<invalid> a6:<invalid> a2:<invalid> d6:-1 d5:<invalid> d3:<invalid> d4:<invalid> d7:<invalid> a0:<invalid> d0:<invalid> d1:<invalid> a1:<invalid> d2:<invalid> a3:<invalid> -36(fp):<invalid> -32(fp):<invalid> -28(fp):d3 -24(fp):d4 -20(fp):d5 -16(fp):d6 -12(fp):d7 -8(fp):a2 -4(fp):a6

l00002946:
	return -1
// DataOut: a5 d0
// DataOut (flags): 
// SymbolicIn: a7:<invalid> a6:<invalid> a2:<invalid> d6:-1 d5:<invalid> d3:<invalid> d4:<invalid> d7:32 d0:<invalid> a0:<invalid> d1:<invalid> a1:<invalid> d2:<invalid> a3:<invalid> -36(fp):<invalid> -32(fp):<invalid> -28(fp):d3 -24(fp):d4 -20(fp):d5 -16(fp):d6 -12(fp):d7 -8(fp):a2 -4(fp):a6

fn000028A0_exit:
// DataOut: d0
// DataOut (flags): 
// SymbolicIn: a7:<invalid> a6:<invalid> a2:<invalid> d6:<invalid> d5:<invalid> d3:<invalid> d4:<invalid> d7:<invalid> a0:<invalid> d0:<invalid> d1:<invalid> a1:<invalid> d2:<invalid> a3:<invalid> -36(fp):<invalid> -32(fp):<invalid> -28(fp):d3 -24(fp):d4 -20(fp):d5 -16(fp):d6 -12(fp):d7 -8(fp):a2 -4(fp):a6



word32 fn000029C8(word32 a0, word32 a5, word32 a6, word32 dwArg04, word32 dwArg08)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  a0 a5 a6
// LiveOut: d0
// Trashed: CVZNX a0 a1 a2 a3 a6 a7 d0 d1 d2 d3 d4 d5
// Preserved: a6 a7 d3 d4 d5
// Stack args: Stack +0004(32) Stack +0008(32)
fn000029C8_entry:
// DataOut: a0 a5 a6
// DataOut (flags): 
// SymbolicIn: a7:fp
// LocalsOut: fp(32) Stack +0004(32) Stack +0008(32)

l000029C8:
	word32 d4_18 = Mem0[a5 + -1300:word32]
	word32 d4_139 = SEQ(SLICE(d4_18 + 0x00000FFF, word16, 16), SLICE(d4_18 + 0x00000FFF, word16, 0) & 0xF000)
	branch d4_139 - dwArg08 >=u 0x00000000 l000029E8
// DataOut: a0 a5 a6 a7 d3 d4
// DataOut (flags): 
// SymbolicIn: a7:fp
// LocalsOut: fp(32) Local -0004(32) Stack +0004(32)

l000029E6:
	d4_139 = dwArg08
// DataOut: a0 a5 a6 a7 d3 d4
// DataOut (flags): 
// SymbolicIn: a7:fp - 0x00000010 a6:fp - 0x00000004 d4:<invalid> d3:<invalid> -16(fp):d3 -12(fp):d4 -8(fp):d5 -4(fp):a6
// LocalsOut: fp(32) Local -0004(32) Stack +0004(32)

l000029E8:
	word32 d0_106
	__syscall(0xA11E)
	branch a0 == 0x00000000 l00002A4A
// DataOut: a0 a5 a6 a7 d0 d3 d4
// DataOut (flags): 
// SymbolicIn: a7:fp - 0x00000010 a6:fp - 0x00000004 d4:<invalid> d3:<invalid> -16(fp):d3 -12(fp):d4 -8(fp):d5 -4(fp):a6
// LocalsOut: fp(32) Local -0004(32) Stack +0004(32)

l000029F2:
	word32 a1_78 = Mem0[Mem0[a5 + -1316:word32]:word32]
	branch (SLICE(a0, word16, 0) & 0x0003) == 0x0000 l00002A14
// DataOut: a0 a1 a5 d3 d4
// DataOut (flags): 
// SymbolicIn: a7:fp - 0x00000010 a6:fp - 0x00000004 d4:<invalid> d3:<invalid> d0:a0 -16(fp):d3 -12(fp):d4 -8(fp):d5 -4(fp):a6
// LocalsOut: fp(32) Local -0004(32) Stack +0004(32)

l00002A14:
	Mem137[a0 + (dwArg04 << 0x00000004):word32] = a0
// DataOut: a0 a1 a5 d3 d4 d5
// DataOut (flags): 
// SymbolicIn: a7:fp - 0x00000010 a6:fp - 0x00000004 d4:<invalid> d3:<invalid> d0:SEQ(SLICE(a0, word16, 16), SLICE(a0, word16, 0) & 0x0003) a1:<invalid> -16(fp):d3 -12(fp):d4 -8(fp):d5 -4(fp):a6
// LocalsOut: fp(32) Local -0004(32)

l000029FE:
	Mem130[a0 + (dwArg04 << 0x00000004):word32] = SEQ(SLICE(a0 + 0x00000003, word16, 16), SLICE(a0 + 0x00000003, word16, 0) & 0xFFFC)
// DataOut: a0 a1 a5 d3 d4 d5
// DataOut (flags): 
// SymbolicIn: a7:fp - 0x00000010 a6:fp - 0x00000004 d4:<invalid> d3:<invalid> d0:SEQ(SLICE(a0, word16, 16), SLICE(a0, word16, 0) & 0x0003) a1:<invalid> -16(fp):d3 -12(fp):d4 -8(fp):d5 -4(fp):a6
// LocalsOut: fp(32) Local -0004(32)

l00002A20:
	word32 a1_91 = a1_78 + (dwArg04 << 0x00000004)
	Mem93[a1_91 + 12:word32] = a0
	Mem95[a1_91 + 8:word32] = d4_139
	Mem98[a1_91 + 4:word32] = 0
	d0_106 = fn00002A54(a5, dwArg04, dwArg08)
	branch d0_106 == 0x00000000 l00002A4C
// DataOut: a2 a5 a6 a7 d0 d5
// DataOut (flags): 
// SymbolicIn: a7:fp - 0x00000010 a6:fp - 0x00000004 d4:<invalid> d3:<invalid> d0:<invalid> a1:<invalid> d5:<invalid> d1:<invalid> -16(fp):d3 -12(fp):d4 -8(fp):d5 -4(fp):a6
// LocalsOut: Local -0004(32)

l00002A42:
	Mem114[fp - 0x00000014:word32] = dwArg04
	fn00002AE0(a2, a5, dwArg00)
// DataOut: a5 a6 a7
// DataOut (flags): 
// SymbolicIn: a7:<invalid> a6:<invalid> d4:<invalid> d3:<invalid> d0:<invalid> a1:<invalid> d5:<invalid> d1:<invalid> a0:<invalid> d2:<invalid> a2:<invalid> a3:<invalid> -24(fp):<invalid> -20(fp):<invalid> -16(fp):d3 -12(fp):d4 -8(fp):d5 -4(fp):a6

l00002A4A:
	d0_106 = -1
// DataOut: a5 a6 a7 d0
// DataOut (flags): 
// SymbolicIn: a7:<invalid> a6:<invalid> d4:<invalid> d3:<invalid> d0:<invalid> a1:<invalid> d5:<invalid> d1:<invalid> a0:<invalid> d2:0 a2:<invalid> a3:<invalid> -24(fp):<invalid> -20(fp):<invalid> -16(fp):d3 -12(fp):d4 -8(fp):d5 -4(fp):a6

l00002A4C:
	return d0_106
// DataOut: a5 d0
// DataOut (flags): 
// SymbolicIn: a7:<invalid> a6:<invalid> d4:<invalid> d3:<invalid> d0:<invalid> a1:<invalid> d5:<invalid> d1:<invalid> a0:<invalid> d2:<invalid> a2:<invalid> a3:<invalid> -24(fp):<invalid> -20(fp):<invalid> -16(fp):d3 -12(fp):d4 -8(fp):d5 -4(fp):a6

fn000029C8_exit:
// DataOut: d0
// DataOut (flags): 
// SymbolicIn: a7:<invalid> a6:<invalid> d4:<invalid> d3:<invalid> d0:<invalid> d5:<invalid> a1:<invalid> d1:<invalid> a0:<invalid> d2:<invalid> a2:<invalid> a3:<invalid> -24(fp):<invalid> -20(fp):<invalid> -16(fp):d3 -12(fp):d4 -8(fp):d5 -4(fp):a6



word32 fn00002A54(word32 a5, word32 dwArg04, word32 dwArg08)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  a5
// LiveOut: d0
// Trashed: CVZNX a0 a1 a2 a3 a6 a7 d0 d1 d2 d3 d4 d5
// Preserved: a2 a6 a7 d3 d4 d5
// Stack args: Stack +0004(32) Stack +0008(32)
fn00002A54_entry:
// DataOut: a5 d7
// DataOut (flags): 
// SymbolicIn: a7:fp
// LocalsOut: fp(32) Stack +0004(32) Stack +0008(32)

l00002A54:
	word32 a2_103 = Mem0[Mem0[a5 + -1316:word32]:word32] + (dwArg04 << 0x00000004)
	word32 d4_27 = Mem0[a2_103 + 8:word32]
	word32 d1_28 = Mem0[a2_103 + 4:word32]
	word32 d0_30 = d4_27 - d1_28
	word32 d3_40 = SEQ(SLICE(dwArg08 + 0x00000003, word16, 16), SLICE(dwArg08 + 0x00000003, word16, 0) & 0xFFFC)
	word32 a1_127 = Mem0[a2_103:word32] + d1_28
	branch d3_40 - d0_30 <=u 0x00000000 l00002ABE
// DataOut: a1 a2 a5 d0 d3 d4 d5 d7
// DataOut (flags): 
// SymbolicIn: a7:fp
// LocalsOut: fp(32)

l00002A8A:
	__syscall(0xA020)
	word32 d4_94 = d4_27 - d0_30 + d3_40
	word32 d4_99 = SEQ(SLICE(d4_94 + 0x00000004, word16, 16), SLICE(d4_94 + 0x00000004, word16, 0) & 0xFFFC)
	a2_103 = Mem0[Mem0[a5 + -1316:word32]:word32] + (dwArg04 << 0x00000004)
	branch Mem0[Mem0[a5 + -1296:word32]:word16] == 0x0000 l00002AB4
// DataOut: a2 a5 d3 d4 d7
// DataOut (flags): 
// SymbolicIn: a7:fp - 0x00000014 a6:fp - 0x00000004 d5:<invalid> a0:<invalid> a2:<invalid> d4:<invalid> d1:<invalid> d0:<invalid> a1:<invalid> d3:<invalid> -20(fp):d3 -16(fp):d4 -12(fp):d5 -8(fp):a2 -4(fp):a6
// LocalsOut: fp(32)

l00002AB4:
	Mem124[a2_103 + 8:word32] = d4_99
	a1_127 = Mem124[a2_103:word32] + Mem124[a2_103 + 4:word32]
// DataOut: a1 a2 a5 d3 d7
// DataOut (flags): 
// SymbolicIn: a7:fp - 0x00000014 a6:fp - 0x00000004 d5:<invalid> a0:<invalid> a2:<invalid> d4:<invalid> d1:<invalid> d0:<invalid> a1:<invalid> d3:<invalid> -20(fp):d3 -16(fp):d4 -12(fp):d5 -8(fp):a2 -4(fp):a6
// LocalsOut: fp(32)

l00002ABE:
	Mem66[a2_103 + 4:word32] = Mem0[a2_103 + 4:word32] + d3_40
	branch fn00002BB4(a5, a1_127, d3_40) == 0x00000000 l00002AD4
// DataOut: a5 a6 a7 d7
// DataOut (flags): 
// SymbolicIn: a7:fp - 0x00000014 a6:fp - 0x00000004 d5:<invalid> a0:<invalid> a2:<invalid> d4:<invalid> d1:<invalid> d0:<invalid> a1:<invalid> d3:<invalid> -20(fp):d3 -16(fp):d4 -12(fp):d5 -8(fp):a2 -4(fp):a6

l00002AD0:
	fn000027A0()
// DataOut: a5 a6 a7 d7
// DataOut (flags): 
// SymbolicIn: a7:<invalid> a6:<invalid> d5:<invalid> a0:<invalid> a2:<invalid> d4:<invalid> d1:<invalid> d0:<invalid> a1:<invalid> d3:<invalid> d2:<invalid> a3:<invalid> -28(fp):<invalid> -24(fp):<invalid> -20(fp):d3 -16(fp):d4 -12(fp):d5 -8(fp):a2 -4(fp):a6

l00002AD4:
	return 0
// DataOut: a5 d0 d7
// DataOut (flags): 
// SymbolicIn: a7:<invalid> a6:<invalid> d5:<invalid> a0:<invalid> a2:<invalid> d4:<invalid> d1:<invalid> d0:<invalid> a1:<invalid> d3:<invalid> d2:<invalid> a3:<invalid> -28(fp):<invalid> -24(fp):<invalid> -20(fp):d3 -16(fp):d4 -12(fp):d5 -8(fp):a2 -4(fp):a6

l00002AA8:
	return -1
// DataOut: a5 d0 d7
// DataOut (flags): 
// SymbolicIn: a7:fp - 0x00000014 a6:fp - 0x00000004 d5:<invalid> a0:<invalid> a2:<invalid> d4:<invalid> d1:<invalid> d0:<invalid> a1:<invalid> d3:<invalid> -20(fp):d3 -16(fp):d4 -12(fp):d5 -8(fp):a2 -4(fp):a6

fn00002A54_exit:
// DataOut: d0
// DataOut (flags): 
// SymbolicIn: a7:<invalid> a6:<invalid> d5:<invalid> a0:<invalid> a2:<invalid> d4:<invalid> d1:<invalid> d0:<invalid> a1:<invalid> d3:<invalid> d2:<invalid> a3:<invalid> -28(fp):<invalid> -24(fp):<invalid> -20(fp):d3 -16(fp):d4 -12(fp):d5 -8(fp):a2 -4(fp):a6



void fn00002AE0(word32 a2, word32 a5, word32 dwArg04)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  a2 a5
// LiveOut:
// Trashed: CVZNX a0 d2
// Preserved: a6 a7 d3
// Stack args: Stack +0004(32)
fn00002AE0_entry:
// DataOut: a2 a5
// DataOut (flags): 
// SymbolicIn: a7:fp
// LocalsOut: fp(32) Stack +0004(32)

l00002AE0:
	branch Mem0[Mem0[Mem0[a5 + -1316:word32]:word32] + (dwArg04 << 0x00000004):word32] == 0x00000000 l00002AFE
// DataOut: a0 a2 a5 d3
// DataOut (flags): 
// SymbolicIn: a7:fp
// LocalsOut: fp(32)

l00002AF8:
	__syscall(0xA01F)
// DataOut: a2 a5 d3
// DataOut (flags): 
// SymbolicIn: a7:fp - 0x00000008 a6:fp - 0x00000004 a0:<invalid> d3:<invalid> -8(fp):d3 -4(fp):a6
// LocalsOut: fp(32)

l00002AFE:
	Mem27[a2 + (dwArg04 << 0x00000004):word32] = 0
	Mem30[a2 + 4 + (dwArg04 << 0x00000004):word32] = 0
	Mem32[a2 + 8 + (dwArg04 << 0x00000004):word32] = 0
	return
// DataOut: a5
// DataOut (flags): 
// SymbolicIn: a7:fp - 0x00000008 a6:fp - 0x00000004 a0:<invalid> d3:<invalid> -8(fp):d3 -4(fp):a6

fn00002AE0_exit:
// DataOut:
// DataOut (flags): 
// SymbolicIn: a7:fp a6:a6 a0:<invalid> d3:d3 d2:0 -8(fp):d3 -4(fp):a6



void fn00002B18(word32 a5, word32 dwArg04)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  a5
// LiveOut:
// Trashed: CVZNX a0 d0 d1 d2
// Preserved: a2 a6 a7
// Stack args: Stack +0004(32)
fn00002B18_entry:
// DataOut: a5
// DataOut (flags): 
// SymbolicIn: a7:fp
// LocalsOut: fp(32) Stack +0004(32)

l00002B18:
	branch dwArg04 == 0x00000000 l00002B78
// DataOut: a5 d0
// DataOut (flags): 
// SymbolicIn: a7:fp
// LocalsOut: fp(32)

l00002B24:
	word32 a2_37 = Mem0[dwArg04 - 0x00000004:word32]
	word32 d1_38 = Mem0[a2_37 + 4:word32]
	branch SEQ(SLICE(d1_38, word16, 16), SLICE(d1_38, word16, 0) & 0xFFFC) - (dwArg04 - 0x00000004) == 0x00000000 l00002B3A
// DataOut: a2 a5
// DataOut (flags): 
// SymbolicIn: a7:fp - 0x00000008 a6:fp - 0x00000004 d0:<invalid> -8(fp):a2 -4(fp):a6
// LocalsOut: fp(32)

l00002B36:
	fn000027A0()
// DataOut: a2 a5
// DataOut (flags): 
// SymbolicIn: a7:fp - 0x00000008 a6:fp - 0x00000004 d0:<invalid> a0:<invalid> a2:<invalid> d1:<invalid> -8(fp):a2 -4(fp):a6
// LocalsOut: fp(32)

l00002B3A:
	word32 d0_46
	__bclr(Mem0[a2_37 + 4:word32], 0x00000001, out d0_46)
	word32 d0_48
	__bset(d0_46, 0x0000, out d0_48)
	Mem51[a2_37 + 4:word32] = d0_48
	branch Mem51[a5 + -1308:word32] == -1 l00002B78
// DataOut: a2 a5 d0
// DataOut (flags): 
// SymbolicIn: a7:fp - 0x00000008 a6:fp - 0x00000004 d0:<invalid> a0:<invalid> a2:<invalid> d1:<invalid> d2:18 -8(fp):a2 -4(fp):a6
// LocalsOut: fp(32)

l00002B52:
	branch d0_48 - Mem51[Mem51[a5 + -1332:word32] + 4:word32] >=u 0x00000000 l00002B78
// DataOut: a2 a5 d0
// DataOut (flags): 
// SymbolicIn: a7:fp - 0x00000008 a6:fp - 0x00000004 d0:<invalid> a0:<invalid> a2:<invalid> d1:<invalid> d2:-1 -8(fp):a2 -4(fp):a6
// LocalsOut: fp(32)

l00002B5C:
	word32 d1_62 = Mem51[Mem51[a2_37:word32] + 4:word32]
	branch SEQ(SLICE(d1_62, word16, 16), SLICE(d1_62, word16, 0) & 0xFFFC) - SEQ(SLICE(d0_48, word16, 16), SLICE(d0_48, word16, 0) & 0xFFFC) - 0x00000004 - Mem51[a5 + -1308:word32] <u 0x00000000 l00002B78
// DataOut: a2 a5
// DataOut (flags): 
// SymbolicIn: a7:fp - 0x00000008 a6:fp - 0x00000004 d0:<invalid> a0:<invalid> a2:<invalid> d1:<invalid> d2:-1 -8(fp):a2 -4(fp):a6
// LocalsOut: fp(32)

l00002B74:
	Mem76[a5 + -1332:word32] = a2_37
// DataOut:
// DataOut (flags): 
// SymbolicIn: a7:fp - 0x00000008 a6:fp - 0x00000004 d0:<invalid> a0:<invalid> a2:<invalid> d1:<invalid> d2:-1 -8(fp):a2 -4(fp):a6
// LocalsOut: fp(32)

l00002B78:
	return
// DataOut:
// DataOut (flags): 
// SymbolicIn: a7:fp - 0x00000008 a6:fp - 0x00000004 d0:<invalid> a0:<invalid> a2:<invalid> d1:<invalid> d2:-1 -8(fp):a2 -4(fp):a6

fn00002B18_exit:
// DataOut:
// DataOut (flags): 
// SymbolicIn: a7:fp a6:a6 d0:<invalid> a2:a2 a0:<invalid> d1:<invalid> d2:-1 -8(fp):a2 -4(fp):a6



word32 fn00002BB4(word32 a5, word32 dwArg04, word32 dwArg08)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  a5
// LiveOut: d0
// Trashed: CVZNX a0 a1 a2 a3 a6 a7 d0 d1 d2
// Preserved: a2 a3 a6 a7
// Stack args: Stack +0004(32) Stack +0008(32)
fn00002BB4_entry:
// DataOut: a5 d7
// DataOut (flags): 
// SymbolicIn: a7:fp
// LocalsOut: fp(32) Local -0008(32) Local -0030(32) Stack +0004(32) Stack +0008(32)

l00002BB4:
	word32 dwLoc1C_103 = fp + 0xFFFFFFE8
	word32 a0_29
	word32 d0_30 = fn0000273C(fp + 0xFFFFFFE8, a5, out a0_29)
	branch d0_30 == 0x00000000 l00002DE8
// DataOut: a0 a5 d7
// DataOut (flags): 
// SymbolicIn: a7:fp
// LocalsOut: fp(32) Local -0008(32) Local -0018(32) Local -001C(32) Local -0030(32) Stack +0004(32) Stack +0008(32)

l00002BE2:
	word32 a0_119
	branch fn0000273C(a0_29, a5, out a0_119) == 0x00000000 l00002DE8
// DataOut: a0 a5 d7
// DataOut (flags): 
// SymbolicIn: a7:fp - 0x00000024 a6:fp - 0x00000004 d2:<invalid> a0:<invalid> d0:<invalid> d1:<invalid> -36(fp):a3 -32(fp):a2 -28(fp):fp + 0xFFFFFFE8 -24(fp):<invalid> -20(fp):0 -16(fp):0 -12(fp):0 -4(fp):a6
// LocalsOut: fp(32) Local -0008(32) Local -0018(32) Local -001C(32) Local -0030(32) Stack +0004(32) Stack +0008(32)

l00002BEE:
	word32 a0_125
	branch fn0000273C(a0_119, a5, out a0_125) == 0x00000000 l00002DE8
// DataOut: a5 d7
// DataOut (flags): 
// SymbolicIn: a7:fp - 0x00000024 a6:fp - 0x00000004 d2:<invalid> a0:<invalid> d0:<invalid> d1:<invalid> -36(fp):a3 -32(fp):a2 -28(fp):fp + 0xFFFFFFE8 -24(fp):<invalid> -20(fp):<invalid> -16(fp):0 -12(fp):0 -4(fp):a6
// LocalsOut: fp(32) Local -0008(32) Local -0018(32) Local -001C(32) Local -0030(32) Stack +0004(32) Stack +0008(32)

l00002BFA:
	word32 a3_147
	word32 d0_139 = fn00002EA8(a5, dwArg04, fp + 0xFFFFFFF8)
	branch d0_139 != 0x00000000 l00002C28
// DataOut: a2 a5 d0 d7
// DataOut (flags): 
// SymbolicIn: a7:fp - 0x00000024 a6:fp - 0x00000004 d2:<invalid> a0:<invalid> d0:<invalid> d1:<invalid> -36(fp):a3 -32(fp):a2 -28(fp):fp + 0xFFFFFFE8 -24(fp):<invalid> -20(fp):<invalid> -16(fp):<invalid> -12(fp):0 -4(fp):a6
// LocalsOut: fp(32) Local -0008(32) Local -0018(32) Local -001C(32) Stack +0008(32)

l00002C28:
	a3_147 = d0_30
	dwLoc1C_103 = fp + 0xFFFFFFEC
// DataOut: a2 a3 a5 d0 d7
// DataOut (flags): 
// SymbolicIn: a7:fp - 0x00000024 a6:fp - 0x00000004 d2:<invalid> a0:<invalid> a2:<invalid> d0:<invalid> d1:<invalid> a1:<invalid> -44(fp):<invalid> -40(fp):fp + 0xFFFFFFF8 -36(fp):a3 -32(fp):a2 -28(fp):fp + 0xFFFFFFE8 -24(fp):<invalid> -20(fp):<invalid> -16(fp):<invalid> -12(fp):0 -4(fp):a6
// LocalsOut: fp(32) Local -0008(32) Local -001C(32) Stack +0008(32)

l00002C0E:
	branch (Mem0[dwLoc08 + 4:word32] & 3) != 2 l00002DE8
// DataOut: a0 a2 a5 d0 d7
// DataOut (flags): 
// SymbolicIn: a7:fp - 0x00000024 a6:fp - 0x00000004 d2:<invalid> a0:<invalid> a2:<invalid> d0:<invalid> d1:<invalid> a1:<invalid> -44(fp):<invalid> -40(fp):fp + 0xFFFFFFF8 -36(fp):a3 -32(fp):a2 -28(fp):fp + 0xFFFFFFE8 -24(fp):<invalid> -20(fp):<invalid> -16(fp):<invalid> -12(fp):0 -4(fp):a6
// LocalsOut: fp(32) Local -0008(32) Local -001C(32) Stack +0008(32)

l00002C22:
	a3_147 = dwLoc08
// DataOut: a2 a3 a5 d0 d7
// DataOut (flags): 
// SymbolicIn: a7:fp - 0x00000024 a6:fp - 0x00000004 d2:2 a0:<invalid> a2:<invalid> d0:<invalid> d1:<invalid> a1:<invalid> -44(fp):<invalid> -40(fp):fp + 0xFFFFFFF8 -36(fp):a3 -32(fp):a2 -28(fp):fp + 0xFFFFFFE8 -24(fp):<invalid> -20(fp):<invalid> -16(fp):<invalid> -12(fp):0 -4(fp):a6
// LocalsOut: fp(32) Local -0008(32) Local -001C(32) Stack +0008(32)

l00002C32:
	Mem149[a3_147 + 4:word32] = dwArg04
	word32 d1_151
	__bclr(dwArg04, 0x00000001, out d1_151)
	word32 d1_153
	bool Z_154 = __bset(d1_151, 0x0000, out d1_153)
	Mem156[a3_147 + 4:word32] = d1_153
	Mem158[dwArg04:word32] = a3_147
	branch d0_139 + 0x00000003 >u 3 l00002C60
// DataOut: a2 a3 a5 d0 d7
// DataOut (flags): 
// SymbolicIn: a7:fp - 0x00000024 a6:fp - 0x00000004 d2:<invalid> a0:<invalid> a2:<invalid> d0:<invalid> a3:<invalid> d1:<invalid> a1:<invalid> -44(fp):<invalid> -40(fp):fp + 0xFFFFFFF8 -36(fp):a3 -32(fp):a2 -28(fp):<invalid> -24(fp):<invalid> -20(fp):<invalid> -16(fp):<invalid> -12(fp):0 -4(fp):a6
// LocalsOut: fp(32) Local -0008(32) Local -001C(32) Stack +0008(32)

l00002C60:
	branch (Mem158[dwLoc08 + 4:word32] & 3) != 2 l00002DE8
// DataOut: a0 a2 a3 a5 d7
// DataOut (flags): 
// SymbolicIn: a7:fp - 0x00000024 a6:fp - 0x00000004 d2:3 a0:<invalid> a2:<invalid> d0:<invalid> a3:<invalid> d1:<invalid> a1:<invalid> -44(fp):<invalid> -40(fp):fp + 0xFFFFFFF8 -36(fp):a3 -32(fp):a2 -28(fp):<invalid> -24(fp):<invalid> -20(fp):<invalid> -16(fp):<invalid> -12(fp):0 -4(fp):a6
// LocalsOut: fp(32) Local -0008(32) Local -001C(32) Stack +0008(32)

l00002DE8:
	branch Mem0[dwLoc1C_103:word32] == 0x00000000 l00002E0E
// DataOut: a5 d7
// DataOut (flags): 
// SymbolicIn: a7:fp - 0x00000024 a6:fp - 0x00000004 d2:<invalid> a0:<invalid> d0:<invalid> a2:<invalid> d1:<invalid> a3:<invalid> a1:<invalid> -44(fp):<invalid> -40(fp):fp + 0xFFFFFFF8 -36(fp):a3 -32(fp):a2 -28(fp):<invalid> -24(fp):<invalid> -20(fp):<invalid> -16(fp):<invalid> -12(fp):0 -4(fp):a6
// LocalsOut: fp(32) Local -001C(32)

l00002DF0:
	Mem107[Mem0[dwLoc1C_103:word32]:word32] = Mem0[a5 + -1328:word32]
	Mem110[a5 + -1328:word32] = Mem107[dwLoc1C_103:word32]
	word32 v30_111 = dwLoc1C_103 + 0x00000004
	dwLoc1C_103 = v30_111
	branch Mem110[v30_111:word32] != 0x00000000 l00002DF0
// DataOut: a5 d7
// DataOut (flags): 
// SymbolicIn: a7:fp - 0x00000024 a6:fp - 0x00000004 d2:<invalid> a0:<invalid> d0:<invalid> a2:<invalid> d1:<invalid> a3:<invalid> a1:<invalid> -44(fp):<invalid> -40(fp):fp + 0xFFFFFFF8 -36(fp):a3 -32(fp):a2 -28(fp):<invalid> -24(fp):<invalid> -20(fp):<invalid> -16(fp):<invalid> -12(fp):0 -4(fp):a6
// LocalsOut: fp(32) Local -001C(32)

l00002E0E:
	return -1
// DataOut: a5 d0 d7
// DataOut (flags): 
// SymbolicIn: a7:fp - 0x00000024 a6:fp - 0x00000004 d2:<invalid> a0:<invalid> d0:<invalid> a2:<invalid> d1:<invalid> a3:<invalid> a1:<invalid> -44(fp):<invalid> -40(fp):fp + 0xFFFFFFF8 -36(fp):a3 -32(fp):a2 -28(fp):<invalid> -24(fp):<invalid> -20(fp):<invalid> -16(fp):<invalid> -12(fp):0 -4(fp):a6

l00002C74:
	branch a5 + -1324 - Mem158[dwLoc08:word32] != 0x00000000 l00002C92
// DataOut: a2 a3 a5 d7
// DataOut (flags): 
// SymbolicIn: a7:fp - 0x00000024 a6:fp - 0x00000004 d2:3 a0:<invalid> a2:<invalid> d0:<invalid> a3:<invalid> d1:2 a1:<invalid> -44(fp):<invalid> -40(fp):fp + 0xFFFFFFF8 -36(fp):a3 -32(fp):a2 -28(fp):<invalid> -24(fp):<invalid> -20(fp):<invalid> -16(fp):<invalid> -12(fp):0 -4(fp):a6
// LocalsOut: fp(32) Local -0008(32) Stack +0008(32)

l00002C7C:
	word32 d0_283 = Mem158[a3_147 + 4:word32]
	word32 d0_287 = SEQ(SLICE(d0_283, word16, 16), SLICE(d0_283, word16, 0) & 0xFFFC) + dwArg08
	branch d0_287 - Mem158[a5 + -1320:word32] <=u 0x00000000 l00002C92
// DataOut: a2 a3 a5 d0 d7
// DataOut (flags): 
// SymbolicIn: a7:fp - 0x00000024 a6:fp - 0x00000004 d2:3 a0:<invalid> a2:<invalid> d0:<invalid> a3:<invalid> d1:2 a1:a5 + -1324 -44(fp):<invalid> -40(fp):fp + 0xFFFFFFF8 -36(fp):a3 -32(fp):a2 -28(fp):<invalid> -24(fp):<invalid> -20(fp):<invalid> -16(fp):<invalid> -12(fp):0 -4(fp):a6
// LocalsOut: fp(32) Local -0008(32) Stack +0008(32)

l00002C8E:
	Mem293[a5 + -1320:word32] = d0_287
// DataOut: a2 a3 a5 d7
// DataOut (flags): 
// SymbolicIn: a7:fp - 0x00000024 a6:fp - 0x00000004 d2:3 a0:<invalid> a2:<invalid> d0:<invalid> a3:<invalid> d1:2 a1:a5 + -1324 -44(fp):<invalid> -40(fp):fp + 0xFFFFFFF8 -36(fp):a3 -32(fp):a2 -28(fp):<invalid> -24(fp):<invalid> -20(fp):<invalid> -16(fp):<invalid> -12(fp):0 -4(fp):a6
// LocalsOut: fp(32) Local -0008(32) Stack +0008(32)

l00002C92:
	fn00002E18(a3_147, dwArg08, Mem158[dwLoc08:word32], fp + 0xFFFFFFE4)
	word32 d0_224 = Mem158[Mem158[dwLoc08:word32] + 4:word32]
	word32 d1_229 = Mem158[dwLoc08 + 4:word32]
	word32 d0_233 = SEQ(SLICE(d0_224, word16, 16), SLICE(d0_224, word16, 0) & 0xFFFC) - SEQ(SLICE(d1_229, word16, 16), SLICE(d1_229, word16, 0) & 0xFFFC)
// DataOut: a2 a3 a5 d7
// DataOut (flags): 
// SymbolicIn: a7:fp - 0x00000024 a6:fp - 0x00000004 d2:3 a0:<invalid> a2:<invalid> d0:<invalid> a3:<invalid> d1:2 a1:a5 + -1324 -44(fp):<invalid> -40(fp):fp + 0xFFFFFFF8 -36(fp):a3 -32(fp):a2 -28(fp):<invalid> -24(fp):<invalid> -20(fp):<invalid> -16(fp):<invalid> -12(fp):0 -4(fp):a6
// LocalsOut: fp(32) Local -0028(32) Local -002C(32) Local -0030(32) Local -0034(32)

l00002DA4:
	fn00002E18(dwLoc08, d0_233, a3_147, fp + 0xFFFFFFE4)
	word32 d0_244 = Mem158[Mem158[a5 + -1332:word32] + 4:word32]
	branch SEQ(SLICE(d0_244, word16, 16), SLICE(d0_244, word16, 0) & 0xFFFC) - dwArg04 <=u 0x00000000 l00002DDC
// DataOut: a3 a5 d7
// DataOut (flags): 
// SymbolicIn: a7:fp - 0x00000034 a6:fp - 0x00000004 d2:<invalid> a0:<invalid> a2:<invalid> d0:<invalid> a3:<invalid> d1:<invalid> a1:<invalid> -52(fp):<invalid> -48(fp):<invalid> -44(fp):<invalid> -40(fp):fp + 0xFFFFFFE4 -36(fp):a3 -32(fp):a2 -28(fp):<invalid> -24(fp):<invalid> -20(fp):<invalid> -16(fp):<invalid> -12(fp):0 -4(fp):a6
// LocalsOut: fp(32)

l00002DBC:
	word32 d0_266 = Mem158[Mem158[a3_147:word32] + 4:word32]
	word32 d1_270 = Mem158[a3_147 + 4:word32]
	branch SEQ(SLICE(d0_266, word16, 16), SLICE(d0_266, word16, 0) & 0xFFFC) - SEQ(SLICE(d1_270, word16, 16), SLICE(d1_270, word16, 0) & 0xFFFC) - 0x00000004 - Mem158[a5 + -1308:word32] <u 0x00000000 l00002DDC
// DataOut: a3 a5 d7
// DataOut (flags): 
// SymbolicIn: a7:fp - 0x00000024 a6:fp - 0x00000004 d2:<invalid> a0:<invalid> a2:<invalid> d0:<invalid> a3:<invalid> d1:<invalid> a1:<invalid> -52(fp):<invalid> -48(fp):<invalid> -44(fp):<invalid> -40(fp):fp + 0xFFFFFFE4 -36(fp):a3 -32(fp):a2 -28(fp):<invalid> -24(fp):<invalid> -20(fp):<invalid> -16(fp):<invalid> -12(fp):0 -4(fp):a6
// LocalsOut: fp(32)

l00002DD8:
	Mem281[a5 + -1332:word32] = a3_147
// DataOut: a5 d7
// DataOut (flags): 
// SymbolicIn: a7:fp - 0x00000024 a6:fp - 0x00000004 d2:<invalid> a0:<invalid> a2:<invalid> d0:<invalid> a3:<invalid> d1:<invalid> a1:<invalid> -52(fp):<invalid> -48(fp):<invalid> -44(fp):<invalid> -40(fp):fp + 0xFFFFFFE4 -36(fp):a3 -32(fp):a2 -28(fp):<invalid> -24(fp):<invalid> -20(fp):<invalid> -16(fp):<invalid> -12(fp):0 -4(fp):a6
// LocalsOut: fp(32)

l00002DDC:
	return 0
// DataOut: a5 d0 d7
// DataOut (flags): 
// SymbolicIn: a7:fp - 0x00000024 a6:fp - 0x00000004 d2:<invalid> a0:<invalid> a2:<invalid> d0:<invalid> a3:<invalid> d1:<invalid> a1:<invalid> -52(fp):<invalid> -48(fp):<invalid> -44(fp):<invalid> -40(fp):fp + 0xFFFFFFE4 -36(fp):a3 -32(fp):a2 -28(fp):<invalid> -24(fp):<invalid> -20(fp):<invalid> -16(fp):<invalid> -12(fp):0 -4(fp):a6

l00002C4E:
	word32 d0_167 = SEQ(SLICE(d0_139 + 0x00000003, word16, 16), Mem158[0x00002C58 + (int32) ((int16) (d0_139 + 0x00000003)) * 2:word16])
	word32 a7_169
	word32 a6_170
	word32 a2_171
	byte CVZN_172
	word32 a3_173
	word32 d2_174
	word32 a0_175
	word32 d0_176
	bool Z_177
	byte ZN_178
	bool C_179
	bool V_180
	word32 d1_181
	word32 a5_182
	byte CVZNX_183
	word32 a1_184
	byte CZ_185
	call 0x00002C58 + (int32) ((int16) d0_167) (retsize: 4; depth: 40)
		uses: a0_146,a1,a2_134,a3_147,a5,a6_5,a7_140,C_164,CVZN_168,CVZNX_160,CZ,d0_167,d1_153,d2_161,dwLoc04_4,dwLoc0C_23,dwLoc10_128,dwLoc14_122,dwLoc18_32,dwLoc1C_145,dwLoc20_10,dwLoc24_14,dwLoc28_132,dwLoc2C_137,dwLoc30,dwLoc34,V_144,Z_154,ZN_141
		defs: a0_175,a1_184,a2_171,a3_173,a5_182,a6_170,a7_169,C_179,CVZN_172,CVZNX_183,CZ_185,d0_176,d1_181,d2_174,V_180,Z_177,ZN_178
	return d0_176
// DataOut: a5 d0 d7
// DataOut (flags): 
// SymbolicIn: a7:fp - 0x00000024 a6:fp - 0x00000004 d2:3 a0:<invalid> a2:<invalid> d0:<invalid> a3:<invalid> d1:<invalid> a1:<invalid> -44(fp):<invalid> -40(fp):fp + 0xFFFFFFF8 -36(fp):a3 -32(fp):a2 -28(fp):<invalid> -24(fp):<invalid> -20(fp):<invalid> -16(fp):<invalid> -12(fp):0 -4(fp):a6

fn00002BB4_exit:
// DataOut: d0
// DataOut (flags): 
// SymbolicIn: a7:<invalid> a6:<invalid> d2:<invalid> a0:<invalid> d0:<invalid> a3:<invalid> a2:<invalid> d1:<invalid> a1:<invalid> -52(fp):<invalid> -48(fp):<invalid> -44(fp):<invalid> -40(fp):<invalid> -36(fp):a3 -32(fp):a2 -28(fp):<invalid> -24(fp):<invalid> -20(fp):<invalid> -16(fp):<invalid> -12(fp):0 -4(fp):a6



void fn00002E18(word32 dwArg04, word32 dwArg08, word32 dwArg0C, word32 dwArg10)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse: 
// LiveOut:
// Trashed: CVZNX a0 a1 d0 d1 d2
// Preserved: a2 a3 a6 a7
// Stack args: Stack +0004(32) Stack +0008(32) Stack +000C(32) Stack +0010(32)
fn00002E18_entry:
// DataOut: a5 d7
// DataOut (flags): 
// SymbolicIn: a7:fp
// LocalsOut: fp(32) Stack +0004(32) Stack +0008(32) Stack +000C(32) Stack +0010(32)

l00002E18:
	word32 d2_18 = Mem0[dwArg04 + 4:word32]
	word32 a2_124 = dwArg04
	branch (d2_18 & 3) == 2 l00002E9A
// DataOut: a2 a5 d2 d7
// DataOut (flags): 
// SymbolicIn: a7:fp
// LocalsOut: fp(32) Stack +0008(32) Stack +000C(32) Stack +0010(32)

l00002E34:
	word32 d1_63 = Mem0[dwArg0C + 4:word32]
	branch (d1_63 & 0x00000003) != 0x00000002 l00002E6C
// DataOut: a0 a2 a5 d1 d2 d7
// DataOut (flags): 
// SymbolicIn: a7:fp - 0x0000000C a6:fp - 0x00000004 a2:<invalid> d2:<invalid> d0:<invalid> d1:2 -12(fp):a3 -8(fp):a2 -4(fp):a6
// LocalsOut: fp(32) Stack +0008(32) Stack +000C(32) Stack +0010(32)

l00002E6C:
	word32 d2_97 = SEQ(SLICE(d2_18, word16, 16), SLICE(d2_18, word16, 0) & 0xFFFC) + dwArg08
	branch SEQ(SLICE(d1_63, word16, 16), SLICE(d1_63, word16, 0) & 0xFFFC) - d2_97 == 0x00000000 l00002E9A
// DataOut: a2 a5 d2 d7
// DataOut (flags): 
// SymbolicIn: a7:fp - 0x0000000C a6:fp - 0x00000004 a2:<invalid> d2:<invalid> d0:<invalid> d1:<invalid> a0:<invalid> -12(fp):a3 -8(fp):a2 -4(fp):a6
// LocalsOut: fp(32) Stack +000C(32) Stack +0010(32)

l00002E7C:
	word32 a0_107 = Mem0[dwArg10:word32]
	word32 v36_108 = Mem0[a0_107:word32]
	Mem112[dwArg10:word32] = a0_107 + 4
	Mem114[v36_108 + 4:word32] = d2_97
	word32 d2_115
	__bclr(d2_97, 0x00000000, out d2_115)
	word32 d2_117
	__bset(d2_115, 0x0001, out d2_117)
	Mem120[v36_108 + 4:word32] = d2_117
	Mem122[dwArg04:word32] = v36_108
	a2_124 = v36_108
// DataOut: a2 a5 d7
// DataOut (flags): 
// SymbolicIn: a7:fp - 0x0000000C a6:fp - 0x00000004 a2:<invalid> d2:<invalid> d0:<invalid> d1:<invalid> a0:<invalid> -12(fp):a3 -8(fp):a2 -4(fp):a6
// LocalsOut: fp(32) Stack +000C(32)

l00002E9A:
	Mem51[a2_124:word32] = dwArg0C
	return
// DataOut: a5 d7
// DataOut (flags): 
// SymbolicIn: a7:fp - 0x0000000C a6:fp - 0x00000004 a2:<invalid> d2:<invalid> d0:<invalid> d1:<invalid> a0:<invalid> a1:<invalid> a3:<invalid> -12(fp):a3 -8(fp):a2 -4(fp):a6

l00002E4C:
	word32 d2_73 = SEQ(SLICE(d2_18, word16, 16), SLICE(d2_18, word16, 0) & 0xFFFC) + dwArg08
	Mem76[dwArg0C + 4:word32] = d2_73
	word32 d2_77
	__bclr(d2_73, 0x00000000, out d2_77)
	word32 d2_79
	__bset(d2_77, 0x0001, out d2_79)
	Mem82[dwArg0C + 4:word32] = d2_79
	Mem84[dwArg04:word32] = dwArg0C
	return
// DataOut: a5 d7
// DataOut (flags): 
// SymbolicIn: a7:fp - 0x0000000C a6:fp - 0x00000004 a2:<invalid> d2:<invalid> d0:<invalid> d1:<invalid> a0:<invalid> -12(fp):a3 -8(fp):a2 -4(fp):a6

fn00002E18_exit:
// DataOut:
// DataOut (flags): 
// SymbolicIn: a7:fp a6:a6 a2:a2 d2:<invalid> d0:<invalid> d1:<invalid> a3:a3 a0:<invalid> a1:<invalid> -12(fp):a3 -8(fp):a2 -4(fp):a6



word32 fn00002EA8(word32 a5, word32 dwArg04, word32 dwArg08)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  a5
// LiveOut: d0
// Trashed: CVZN a0 a1 d0 d1 d2
// Preserved: a6 a7
// Stack args: Stack +0004(32) Stack +0008(32)
fn00002EA8_entry:
// DataOut: a2 a5 d7
// DataOut (flags): 
// SymbolicIn: a7:fp
// LocalsOut: fp(32) Stack +0004(32) Stack +0008(32)

l00002EA8:
	branch a5 + -1324 - Mem0[a5 + -1336:word32] != 0x00000000 l00002EBC
// DataOut: a2 a5 d7
// DataOut (flags): 
// SymbolicIn: a7:fp
// LocalsOut: fp(32) Stack +0004(32) Stack +0008(32)

l00002EBC:
	word32 d0_33 = Mem0[Mem0[a5 + -1336:word32] + 4:word32]
	branch SEQ(SLICE(d0_33, word16, 16), SLICE(d0_33, word16, 0) & 0xFFFC) - dwArg04 <=u 0x00000000 l00002ED8
// DataOut: a2 a5 d2 d7
// DataOut (flags): 
// SymbolicIn: a7:fp - 0x00000004 a6:fp - 0x00000004 a0:a5 + -1324 -4(fp):a6
// LocalsOut: fp(32) Stack +0008(32)

l00002ED8:
	word32 d0_47 = Mem0[a5 + -1320:word32]
	branch SEQ(SLICE(d0_47, word16, 16), SLICE(d0_47, word16, 0) & 0xFFFC) - dwArg04 >u 0x00000000 l00002EEC
// DataOut: a2 a5 d2 d7
// DataOut (flags): 
// SymbolicIn: a7:fp - 0x00000004 a6:fp - 0x00000004 a0:<invalid> d0:<invalid> d2:<invalid> -4(fp):a6
// LocalsOut: fp(32) Stack +0008(32)

l00002EEC:
	word32 a1_61 = Mem0[a5 + -1336:word32]
// DataOut: a1 a2 a5 d2 d7
// DataOut (flags): 
// SymbolicIn: a7:fp - 0x00000004 a6:fp - 0x00000004 a0:<invalid> d0:<invalid> d2:<invalid> -4(fp):a6
// LocalsOut: fp(32) Stack +0008(32)

l00002EF6:
	word32 a0_63 = Mem0[a1_61:word32]
	word32 d1_64 = Mem0[a0_63 + 4:word32]
	branch SEQ(SLICE(d1_64, word16, 16), SLICE(d1_64, word16, 0) & 0xFFFC) - dwArg04 >u 0x00000000 l00002F08
// DataOut: a0 a1 a2 a5 d2 d7
// DataOut (flags): 
// SymbolicIn: a7:fp - 0x00000004 a6:fp - 0x00000004 a0:<invalid> d0:0x0000FFFC d2:<invalid> a1:<invalid> d1:<invalid> -4(fp):a6
// LocalsOut: fp(32) Stack +0008(32)

l00002F08:
	Mem75[dwArg08:word32] = a1_61
	word32 d1_77 = Mem75[a1_61 + 4:word32]
	word32 d0_76 = 0
	branch SEQ(SLICE(d1_77, word16, 16), SLICE(d1_77, word16, 0) & 0xFFFC) - dwArg04 == 0x00000000 l00002F1E
// DataOut: a2 a5 d0 d7
// DataOut (flags): 
// SymbolicIn: a7:fp - 0x00000004 a6:fp - 0x00000004 a0:<invalid> d0:0x0000FFFC d2:<invalid> a1:<invalid> d1:<invalid> -4(fp):a6
// LocalsOut: fp(32)

l00002F1C:
	d0_76 = 1
// DataOut: a2 a5 d0 d7
// DataOut (flags): 
// SymbolicIn: a7:fp - 0x00000004 a6:fp - 0x00000004 a0:<invalid> d0:0 d2:<invalid> a1:<invalid> d1:<invalid> -4(fp):a6
// LocalsOut: fp(32)

l00002F1E:
	return d0_76
// DataOut: a2 a5 d0 d7
// DataOut (flags): 
// SymbolicIn: a7:fp - 0x00000004 a6:fp - 0x00000004 a0:<invalid> d0:<invalid> d2:<invalid> a1:<invalid> d1:<invalid> -4(fp):a6

l00002F02:
	a1_61 = a0_63
// DataOut: a1 a2 a5 d2 d7
// DataOut (flags): 
// SymbolicIn: a7:fp - 0x00000004 a6:fp - 0x00000004 a0:<invalid> d0:0x0000FFFC d2:<invalid> a1:<invalid> d1:<invalid> -4(fp):a6
// LocalsOut: fp(32) Stack +0008(32)

l00002EE4:
	return -2
// DataOut: a2 a5 d0 d7
// DataOut (flags): 
// SymbolicIn: a7:fp - 0x00000004 a6:fp - 0x00000004 a0:<invalid> d0:<invalid> d2:<invalid> -4(fp):a6

l00002ED0:
	return -1
// DataOut: a2 a5 d0 d7
// DataOut (flags): 
// SymbolicIn: a7:fp - 0x00000004 a6:fp - 0x00000004 a0:<invalid> d0:<invalid> d2:<invalid> -4(fp):a6

l00002EB6:
	return -3
// DataOut: a2 a5 d0 d7
// DataOut (flags): 
// SymbolicIn: a7:fp - 0x00000004 a6:fp - 0x00000004 a0:a5 + -1324 -4(fp):a6

fn00002EA8_exit:
// DataOut: d0
// DataOut (flags): 
// SymbolicIn: a7:fp a6:a6 a0:<invalid> d0:<invalid> d2:<invalid> a1:<invalid> d1:<invalid> -4(fp):a6



void fn00003340(word32 d0, word32 d1, word32 a5, word16 wArg06)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  a5 d0 d1
// LiveOut:
// Trashed: CVZNX a0 a1 d0 d1 d2
// Preserved: a6 a7
// Stack args: Stack +0006(32)
fn00003340_entry:
// DataOut: a5 d0 d1
// DataOut (flags): 
// SymbolicIn: a7:fp
// LocalsOut: fp(32) Stack +0006(32)

l00003340:
	word32 d1_13 = SEQ(SLICE(d1, word16, 16), wArg06)
	Mem20[a5 + -1728:word32] = (int32) (int16) SEQ(SLICE(d0, word16, 16), SLICE(d1_13, word16, 0))
	word32 d2_21 = 0
	word32 d0_23 = a5 + -1284
// DataOut: a1 a5 d0 d1 d2
// DataOut (flags): 
// SymbolicIn: a7:fp
// LocalsOut: fp(32)

l0000335C:
	branch SLICE(d1_13, word16, 0) - Mem20[d0_23:word16] == 0x0000 l00003374
// DataOut: a1 a5 d0 d1 d2
// DataOut (flags): 
// SymbolicIn: a7:fp - 0x00000004 a6:fp - 0x00000004 a1:a5 + -1100 d1:<invalid> d0:<invalid> d2:<invalid> a0:<invalid> -4(fp):a6
// LocalsOut: fp(32)

l00003374:
	Mem62[a5 + -1732:word32] = (uint32) (uint16) Mem20[a5 + -1282 + d2_21 * 4:word16]
	return
// DataOut:
// DataOut (flags): 
// SymbolicIn: a7:fp - 0x00000004 a6:fp - 0x00000004 a1:a5 + -1100 d1:<invalid> d0:<invalid> d2:<invalid> a0:<invalid> -4(fp):a6

l00003362:
	d0_23 = d0_23 + 0x00000004
	d2_21 = d2_21 + 0x00000001
	branch d0_23 - (a5 + -1100) <u 0x00000000 l0000335C
// DataOut: a1 a5 d0 d1 d2
// DataOut (flags): 
// SymbolicIn: a7:fp - 0x00000004 a6:fp - 0x00000004 a1:a5 + -1100 d1:<invalid> d0:<invalid> d2:<invalid> a0:<invalid> -4(fp):a6
// LocalsOut: fp(32)

l0000336A:
	Mem51[a5 + -1732:word32] = 22
	return
// DataOut:
// DataOut (flags): 
// SymbolicIn: a7:fp - 0x00000004 a6:fp - 0x00000004 a1:a5 + -1100 d1:<invalid> d0:<invalid> d2:<invalid> a0:<invalid> -4(fp):a6

fn00003340_exit:
// DataOut:
// DataOut (flags): 
// SymbolicIn: a7:fp a6:a6 a1:a5 + -1100 d1:<invalid> d0:<invalid> d2:<invalid> a0:<invalid> -4(fp):a6



