// Win32CrtStartup
// Return size: 4
void Win32CrtStartup()
Win32CrtStartup_entry:
	// succ:  l00001004
l00001004:
	a7 = fp
	Z = __btst(d0, d1)
	v6 = (byte) d0 | 0x00
	d0 = DPB(d0, v6, 0)
	ZN = cond(v6)
	C = false
	V = false
	v10 = (byte) d0 | 0xFF
	d0 = DPB(d0, v10, 0)
	ZN = cond(v10)
	C = false
	V = false
	v11 = (byte) d0 | 0x00
	d0 = DPB(d0, v11, 0)
	ZN = cond(v11)
	C = false
	V = false
	v12 = (byte) d0 | 0x00
	d0 = DPB(d0, v12, 0)
	ZN = cond(v12)
	C = false
	V = false
	v13 = (byte) d0 | 0x00
	d0 = DPB(d0, v13, 0)
	ZN = cond(v13)
	C = false
	V = false
	v14 = (byte) d0 | 0x00
	d0 = DPB(d0, v14, 0)
	ZN = cond(v14)
	C = false
	V = false
	v15 = (byte) d0 | 0x00
	d0 = DPB(d0, v15, 0)
	ZN = cond(v15)
	C = false
	V = false
	v16 = (byte) d0 | 0x00
	d0 = DPB(d0, v16, 0)
	ZN = cond(v16)
	C = false
	V = false
	v17 = (byte) d0 | 0x00
	d0 = DPB(d0, v17, 0)
	ZN = cond(v17)
	C = false
	V = false
	v18 = (byte) d0 | 0x00
	d0 = DPB(d0, v18, 0)
	ZN = cond(v18)
	C = false
	V = false
	v19 = (byte) d0 | 0x00
	d0 = DPB(d0, v19, 0)
	ZN = cond(v19)
	C = false
	V = false
	v20 = (byte) d0 | 0x00
	d0 = DPB(d0, v20, 0)
	ZN = cond(v20)
	C = false
	V = false
	v21 = (byte) d0 | 0x00
	d0 = DPB(d0, v21, 0)
	ZN = cond(v21)
	C = false
	V = false
	v22 = (byte) d0 | 0x00
	d0 = DPB(d0, v22, 0)
	ZN = cond(v22)
	C = false
	V = false
	v23 = (byte) d0 | 0x1F
	d0 = DPB(d0, v23, 0)
	ZN = cond(v23)
	C = false
	V = false
Win32CrtStartup_exit:


// fn00001498
// Return size: 4
define fn00001498
fn00001498_entry:
	// succ:  l00001498
l00001498:
	a7 = fp
	return
	// succ:  fn00001498_exit
fn00001498_exit:


// fn0000149C
// Return size: 0
define fn0000149C
fn0000149C_entry:
	// succ:  l0000149C
l0000149C:
	a7 = fp
	a7 = a7 - 0x00000004
	CVZNX = cond(a7)
	a7 = a7 - 4
	v4 = 0x414C5254
	Mem0[a7:word32] = v4
	CVZN = cond(v4)
	a7 = a7 - 2
	v6 = 0x4270
	Mem0[a7:word16] = v6
	CVZN = cond(v6)
	__syscall(0xA9A0)
	v7 = Mem0[a7:word32] - 0x00000000
	CVZN = cond(v7)
	branch Test(NE,Z) l000014BE
	// succ:  l000014B6 l000014BE
l000014B6:
	v9 = 0x001A
	Mem0[0x00000AF0:word16] = v9
	CVZN = cond(v9)
	goto l000014E2
	// succ:  l000014E2
l000014BE:
	a7 = a7 - 0x00000004
	Mem0[a7:word32] = a5 + -1742
	__syscall(0xA86E)
	__syscall(0xA8FE)
	__syscall(0xA912)
	__syscall(0xA930)
	__syscall(0xA9CC)
	a7 = a7 - 4
	v11 = 0x00000000
	Mem0[a7:word32] = v11
	CVZN = cond(v11)
	__syscall(0xA97B)
	__syscall(0xA850)
	a7 = a7 - 2
	v12 = 0x4270
	Mem0[a7:word16] = v12
	CVZN = cond(v12)
	a7 = a7 - 4
	v13 = 0x00000000
	Mem0[a7:word32] = v13
	CVZN = cond(v13)
	__syscall(0xA986)
	// succ:  l000014E2
l000014E2:
	a7 = a7 + 4
	__syscall(0xA9F4)
	v15 = (byte) d0 | 0xE7
	d0 = DPB(d0, v15, 0)
	ZN = cond(v15)
	C = false
	V = false
fn0000149C_exit:


// fn000014E8
// Return size: 4
define fn000014E8
fn000014E8_entry:
	// succ:  l000014E8
l000014E8:
	a7 = fp
	a7 = a7 - 4
	Mem0[a7:word32] = a3
	a7 = a7 - 4
	Mem0[a7:word32] = a2
	a7 = a7 - 4
	a7 = a7 - 4
	v5 = 0x44415441
	Mem0[a7:word32] = v5
	CVZN = cond(v5)
	a7 = a7 - 2
	Mem0[0x0000:word16] = 0x0000
	Z = true
	C = false
	N = false
	V = false
	__syscall(0xA9A0)
	ZN = cond(Mem0[a7:word32] - 0x00000000)
	C = false
	V = false
	branch Test(EQ,Z) l00001592
	// succ:  l000014FE l00001592
l000014FE:
	a3 = Mem0[a7:word32]
	a3 = Mem0[a3:word32]
	a2 = a5
	d0 = Mem0[a3:word32]
	CVZN = cond(d0)
	a2 = a2 - d0
	CVZNX = cond(a2)
	a0 = a2
	d0 = d0 >>u 0x00000001
	CVZNX = cond(d0)
	branch Test(EQ,Z) l00001514
	// succ:  l0000150E l00001514
l0000150E:
	Mem0[a0:word16] = 0x0000
	a0 = a0 + 2
	Z = true
	C = false
	N = false
	V = false
	d0 = d0 - 0x00000001
	CVZNX = cond(d0)
	branch Test(NE,Z) l0000150E
	// succ:  l00001514 l0000150E
l00001514:
	d0 = Mem0[a3 + 4:word32]
	CVZN = cond(d0)
	a2 = a2 - d0
	CVZNX = cond(a2)
	a1 = a2
	a0 = a3 + 16
	__syscall(0xA02E)
	d0 = Mem0[a3 + 8:word32]
	CVZN = cond(d0)
	a2 = a2 - d0
	CVZNX = cond(a2)
	a0 = a2
	d0 = d0 >>u 0x00000001
	CVZNX = cond(d0)
	branch Test(EQ,Z) l00001534
	// succ:  l0000152E l00001534
l0000152E:
	Mem0[a0:word16] = 0x0000
	a0 = a0 + 2
	Z = true
	C = false
	N = false
	V = false
	d0 = d0 - 0x00000001
	CVZNX = cond(d0)
	branch Test(NE,Z) l0000152E
	// succ:  l00001534 l0000152E
l00001534:
	d0 = Mem0[a3 + 12:word32]
	CVZN = cond(d0)
	a2 = a2 - d0
	CVZNX = cond(a2)
	a0 = a3 + 16
	d1 = Mem0[a3 + 4:word32]
	CVZN = cond(d1)
	a0 = a0 + d1
	a1 = a2
	a3 = Mem0[a3 + 12:word32]
	a3 = a3 + a0
	__syscall(0xA02E)
	d1 = Mem0[a7 + 20:word32]
	CVZN = cond(d1)
	d2 = Mem0[a7 + 16:word32]
	CVZN = cond(d2)
	// succ:  l00001556
l00001556:
	d0 = 0
	CVZN = cond(d0)
	v19 = Mem0[a3:byte]
	a3 = a3 + 1
	d0 = DPB(d0, v19, 0)
	CVZN = cond(v19)
	branch Test(GT,VZN) l00001576
	// succ:  l0000155C l00001576
l0000155C:
	branch Test(LT,CV) l00001572
	// succ:  l0000155E l00001572
l0000155E:
	v22 = Mem0[a3:byte]
	a3 = a3 + 1
	d0 = DPB(d0, v22, 0)
	CVZN = cond(v22)
	branch Test(EQ,Z) l0000159A
	// succ:  l00001562 l0000159A
l00001562:
	v23 = (word16) d0 << 0x0008
	d0 = DPB(d0, v23, 0)
	CVZNX = cond(v23)
	v24 = Mem0[a3:byte]
	a3 = a3 + 1
	d0 = DPB(d0, v24, 0)
	CVZN = cond(v24)
	d0 = __swap(d0)
	ZN = cond(d0)
	C = false
	V = false
	v25 = Mem0[a3:byte]
	a3 = a3 + 1
	d0 = DPB(d0, v25, 0)
	CVZN = cond(v25)
	v26 = (word16) d0 << 0x0008
	d0 = DPB(d0, v26, 0)
	CVZNX = cond(v26)
	v27 = Mem0[a3:byte]
	a3 = a3 + 1
	d0 = DPB(d0, v27, 0)
	CVZN = cond(v27)
	d0 = d0 + d0
	CVZNX = cond(d0)
	goto l00001578
	// succ:  l00001578
l00001572:
	v31 = (word16) d0 << 0x0008
	d0 = DPB(d0, v31, 0)
	CVZNX = cond(v31)
	v32 = Mem0[a3:byte]
	a3 = a3 + 1
	d0 = DPB(d0, v32, 0)
	CVZN = cond(v32)
	// succ:  l00001576
l00001576:
	v34 = (word16) d0 + (word16) d0
	d0 = DPB(d0, v34, 0)
	CVZNX = cond(v34)
	// succ:  l00001578
l00001578:
	a2 = a2 + d0
	ZN = cond(d1 - 0x00000000)
	C = false
	V = false
	branch Test(EQ,Z) l00001582
	// succ:  l0000157E l00001582
l0000157E:
	ZN = cond(Mem0[a2:word32] - 0x00000000)
	C = false
	V = false
	branch Test(GE,VN) l00001586
	// succ:  l00001582 l00001586
l00001582:
	v30 = Mem0[a2:word32] + d2
	Mem0[a2:word32] = v30
	CVZNX = cond(v30)
	goto l0000158E
	// succ:  l0000158E
l00001586:
	a0 = Mem0[a2:word32]
	a0 = a0 + d1
	v33 = Mem0[a0 + 2:word32]
	Mem0[a2:word32] = v33
	CVZN = cond(v33)
	// succ:  l0000158E
l0000158E:
	goto l00001556
	// succ:  l00001556
l00001592:
	v28 = 0xFDA3
	Mem0[0x00000AF0:word16] = v28
	CVZN = cond(v28)
	__syscall(0xA9F4)
	// succ:  l0000159A
l0000159A:
	__syscall(0xA9A3)
	a2 = Mem0[a7:word32]
	a7 = a7 + 4
	a3 = Mem0[a7:word32]
	a7 = a7 + 4
	return
	// succ:  fn000014E8_exit
fn000014E8_exit:


// fn000015E8
// Return size: 4
define fn000015E8
fn000015E8_entry:
	// succ:  l000015E8
l000015E8:
	a7 = fp
	a7 = a7 - 0x00000004
	Mem0[a7:word32] = a6
	a6 = a7
	a7 = a7 + 0x00000000
	a7 = a7 - 4
	v5 = d3
	Mem0[a7:word32] = v5
	CVZN = cond(v5)
	a7 = a7 - 4
	v8 = a2
	Mem0[a7:word32] = v8
	CVZN = cond(v8)
	a2 = Mem0[a6 + 8:word32]
	v9 = Mem0[a2 + 16:word32]
	a7 = a7 - 4
	v10 = v9
	Mem0[a7:word32] = v10
	CVZN = cond(v10)
	call a5 + 130 (retsize: 4;)
	a7 = a7 + 4
	ZN = cond(d0 - 0x00000000)
	C = false
	V = false
	branch Test(EQ,Z) l0000162A
	// succ:  l00001602 l0000162A
l00001602:
	a0 = a5 + -2656
	v18 = a2 - a0
	CVZN = cond(v18)
	branch Test(NE,Z) l00001610
	// succ:  l0000160A l00001610
l0000160A:
	d3 = 0
	CVZN = cond(d3)
	goto l0000161A
	// succ:  l0000161A
l00001610:
	a0 = a5 + -2624
	v24 = a2 - a0
	CVZN = cond(v24)
	branch Test(NE,Z) l00001628
	// succ:  l00001618 l00001628
l00001618:
	d3 = 1
	CVZN = cond(d3)
	// succ:  l0000161A
l0000161A:
	v21 = Mem0[a5 + -1368:word32] + 0x00000001
	Mem0[a5 + -1368:word32] = v21
	CVZNX = cond(v21)
	d0 = Mem0[a2 + 12:word32]
	CVZN = cond(d0)
	v23 = (word16) d0 & 0x010C
	d0 = DPB(d0, v23, 0)
	ZN = cond(v23)
	C = false
	V = false
	branch Test(EQ,Z) l00001634
	// succ:  l00001628 l00001634
l00001628:
	d0 = 0
	CVZN = cond(d0)
	// succ:  l0000162A
l0000162A:
	v19 = Mem0[a7:word32]
	a7 = a7 + 4
	a2 = v19
	v20 = Mem0[a7:word32]
	a7 = a7 + 4
	d3 = v20
	CVZN = cond(d3)
	a7 = a6
	a6 = Mem0[a7:word32]
	a7 = a7 + 0x00000004
	return
	// succ:  fn000015E8_exit
l00001634:
	a0 = a5 + -2696
	ZN = cond(Mem0[a0 + d3 * 4:word32] - 0x00000000)
	C = false
	V = false
	branch Test(NE,Z) l00001652
	// succ:  l0000163E l00001652
l0000163E:
	a7 = a7 - 0x00000004
	Mem0[a7:word32] = 0x00000200
	call a5 + 114 (retsize: 4;)
	a7 = a7 + 4
	a0 = a5 + -2696
	v25 = d0
	Mem0[a0 + d3 * 4:word32] = v25
	CVZN = cond(v25)
	branch Test(EQ,Z) l0000162A
	// succ:  l00001652 l0000162A
l00001652:
	a0 = a5 + -2696
	d0 = Mem0[a0 + d3 * 4:word32]
	CVZN = cond(d0)
	v26 = d0
	Mem0[a2 + 8:word32] = v26
	CVZN = cond(v26)
	v27 = d0
	Mem0[a2:word32] = v27
	CVZN = cond(v27)
	v28 = 0x00000200
	Mem0[a2 + 24:word32] = v28
	CVZN = cond(v28)
	v29 = 0x00000200
	Mem0[a2 + 4:word32] = v29
	CVZN = cond(v29)
	v30 = Mem0[a2 + 14:word16] | 0x1102
	Mem0[a2 + 14:word16] = v30
	ZN = cond(v30)
	C = false
	V = false
	d0 = 1
	CVZN = cond(d0)
	v31 = Mem0[a7:word32]
	a7 = a7 + 4
	a2 = v31
	v32 = Mem0[a7:word32]
	a7 = a7 + 4
	d3 = v32
	CVZN = cond(d3)
	a7 = a6
	a6 = Mem0[a7:word32]
	a7 = a7 + 0x00000004
	return
	// succ:  fn000015E8_exit
fn000015E8_exit:


// fn00001680
// Return size: 4
define fn00001680
fn00001680_entry:
	// succ:  l00001680
l00001680:
	a7 = fp
	a7 = a7 - 0x00000004
	Mem0[a7:word32] = a6
	a6 = a7
	a7 = a7 + 0x00000000
	a7 = a7 - 4
	v5 = a2
	Mem0[a7:word32] = v5
	CVZN = cond(v5)
	ZN = cond(Mem0[a6 + 8:word32] - 0x00000000)
	C = false
	V = false
	a2 = Mem0[a6 + 12:word32]
	branch Test(EQ,Z) l000016B8
	// succ:  l00001690 l000016B8
l00001690:
	Z = __btst(Mem0[a2 + 14:byte], 0x0004)
	branch Test(EQ,Z) l000016C8
	// succ:  l00001698 l000016C8
l00001698:
	a7 = a7 - 4
	v11 = a2
	Mem0[a7:word32] = v11
	CVZN = cond(v11)
	call fn00001D80 (retsize: 4;)
	a7 = a7 + 4
	v12 = Mem0[a2 + 14:word16] & 0xEEFF
	Mem0[a2 + 14:word16] = v12
	ZN = cond(v12)
	C = false
	V = false
	d2 = 0
	CVZN = cond(d2)
	v14 = d2
	Mem0[a2 + 24:word32] = v14
	CVZN = cond(v14)
	v15 = d2
	Mem0[a2:word32] = v15
	CVZN = cond(v15)
	v16 = d2
	Mem0[a2 + 8:word32] = v16
	CVZN = cond(v16)
	v17 = Mem0[a7:word32]
	a7 = a7 + 4
	a2 = v17
	a7 = a6
	a6 = Mem0[a7:word32]
	a7 = a7 + 0x00000004
	return
	// succ:  fn00001680_exit
l000016B8:
	Z = __btst(Mem0[a2 + 14:byte], 0x0004)
	branch Test(EQ,Z) l000016C8
	// succ:  l000016C0 l000016C8
l000016C0:
	a7 = a7 - 4
	v18 = a2
	Mem0[a7:word32] = v18
	CVZN = cond(v18)
	call fn00001D80 (retsize: 4;)
	a7 = a7 + 4
	// succ:  l000016C8
l000016C8:
	v19 = Mem0[a7:word32]
	a7 = a7 + 4
	a2 = v19
	a7 = a6
	a6 = Mem0[a7:word32]
	a7 = a7 + 0x00000004
	return
	// succ:  fn00001680_exit
fn00001680_exit:


// fn000016D0
// Return size: 4
define fn000016D0
fn000016D0_entry:
	// succ:  l000016D0
l000016D0:
	a7 = fp
	a7 = a7 - 0x00000004
	Mem0[a7:word32] = a6
	a6 = a7
	a7 = a7 - 0x00000220
	a7 = a7 - 4
	Mem0[a7:word32] = a4
	a7 = a7 - 4
	Mem0[a7:word32] = a3
	a7 = a7 - 4
	Mem0[a7:word32] = a2
	a7 = a7 - 4
	Mem0[a7:word32] = d7
	a7 = a7 - 4
	Mem0[a7:word32] = d6
	a7 = a7 - 4
	Mem0[a7:word32] = d5
	a7 = a7 - 4
	Mem0[a7:word32] = d4
	a7 = a7 - 4
	Mem0[a7:word32] = d3
	a3 = a5 + -2040
	a2 = a5 + -2072
	d7 = 0
	CVZN = cond(d7)
	v14 = d7
	Mem0[a6 + -544:word32] = v14
	CVZN = cond(v14)
	v15 = d7
	Mem0[a6 + -8:word32] = v15
	CVZN = cond(v15)
	a0 = Mem0[a6 + 12:word32]
	v17 = Mem0[a0:byte]
	d6 = DPB(d6, v17, 0)
	CVZN = cond(v17)
	v18 = Mem0[a6 + 12:word32] + 0x00000001
	Mem0[a6 + 12:word32] = v18
	CVZNX = cond(v18)
	ZN = cond((byte) d6 - 0x00)
	C = false
	V = false
	branch Test(EQ,Z) l00001C34
	// succ:  l000016FA l00001C34
l000016FA:
	d3 = Mem0[a6 + -12:word32]
	CVZN = cond(d3)
	d4 = Mem0[a6 + -16:word32]
	CVZN = cond(d4)
	d5 = Mem0[a6 + -20:word32]
	CVZN = cond(d5)
	a4 = Mem0[a6 + -24:word32]
	d7 = Mem0[a6 + -28:word32]
	CVZN = cond(d7)
	// succ:  l0000170E
l0000170E:
	ZN = cond(Mem0[a6 + -544:word32] - 0x00000000)
	C = false
	V = false
	branch Test(LT,CV) l00001C34
	// succ:  l00001716 l00001C34
l00001716:
	v25 = (byte) d6 - 0x20
	CVZN = cond(v25)
	branch Test(LT,CV) l00001734
	// succ:  l0000171C l00001734
l0000171C:
	v26 = (byte) d6 - 0x78
	CVZN = cond(v26)
	branch Test(GT,VZN) l00001734
	// succ:  l00001722 l00001734
l00001722:
	v29 = (byte) d6
	d0 = DPB(d0, v29, 0)
	CVZN = cond(v29)
	d0 = (int32) (int8) d0
	ZN = cond(d0)
	v30 = Mem0[a2 + d0:byte]
	d0 = DPB(d0, v30, 0)
	CVZN = cond(v30)
	v31 = (byte) d0 & 0x0F
	d0 = DPB(d0, v31, 0)
	ZN = cond(v31)
	C = false
	V = false
	d0 = (int32) (int8) d0
	ZN = cond(d0)
	goto l00001736
	// succ:  l00001736
l00001734:
	d0 = 0
	CVZN = cond(d0)
	// succ:  l00001736
l00001736:
	d0 = d0 << 0x00000003
	CVZNX = cond(d0)
	d0 = d0 + Mem0[a6 + -8:word32]
	CVZNX = cond(d0)
	v32 = Mem0[a3 + d0:byte]
	d0 = DPB(d0, v32, 0)
	CVZN = cond(v32)
	v33 = (byte) d0 >> 0x04
	d0 = DPB(d0, v33, 0)
	CVZNX = cond(v33)
	d0 = (int32) (int8) d0
	ZN = cond(d0)
	v34 = d0
	Mem0[a6 + -8:word32] = v34
	CVZN = cond(v34)
	d2 = 7
	CVZN = cond(d2)
	v36 = d2 - d0
	CVZN = cond(v36)
	branch Test(ULT,C) l00001C24
	// succ:  l00001750 l00001C24
l00001750:
	v37 = Mem0[0x00001758 + (int32) ((int16) d0) * 2:word16]
	d0 = DPB(d0, v37, 0)
	CVZN = cond(v37)
	call 0x00001758 + (int32) ((int16) d0) (retsize: 4;)
	return
	// succ:  fn000016D0_exit
l00001C24:
	a0 = Mem0[a6 + 12:word32]
	v38 = Mem0[a0:byte]
	d6 = DPB(d6, v38, 0)
	CVZN = cond(v38)
	v39 = Mem0[a6 + 12:word32] + 0x00000001
	Mem0[a6 + 12:word32] = v39
	CVZNX = cond(v39)
	ZN = cond((byte) d6 - 0x00)
	C = false
	V = false
	branch Test(NE,Z) l0000170E
	// succ:  l00001C34 l0000170E
l00001C34:
	d0 = Mem0[a6 + -544:word32]
	CVZN = cond(d0)
	d3 = Mem0[a7:word32]
	a7 = a7 + 4
	d4 = Mem0[a7:word32]
	a7 = a7 + 4
	d5 = Mem0[a7:word32]
	a7 = a7 + 4
	d6 = Mem0[a7:word32]
	a7 = a7 + 4
	d7 = Mem0[a7:word32]
	a7 = a7 + 4
	a2 = Mem0[a7:word32]
	a7 = a7 + 4
	a3 = Mem0[a7:word32]
	a7 = a7 + 4
	a4 = Mem0[a7:word32]
	a7 = a7 + 4
	a7 = a6
	a6 = Mem0[a7:word32]
	a7 = a7 + 0x00000004
	return
	// succ:  fn000016D0_exit
fn000016D0_exit:


// fn00001C40
// Return size: 4
define fn00001C40
fn00001C40_entry:
	// succ:  l00001C40
l00001C40:
	a7 = fp
	a7 = a7 - 0x00000004
	Mem0[a7:word32] = a6
	a6 = a7
	a7 = a7 + 0x00000000
	a1 = Mem0[a6 + 12:word32]
	v5 = Mem0[a1 + 4:word32] - 0x00000001
	Mem0[a1 + 4:word32] = v5
	CVZNX = cond(v5)
	branch Test(LT,CV) l00001C60
	// succ:  l00001C4E l00001C60
l00001C4E:
	a0 = Mem0[a1:word32]
	v9 = Mem0[a6 + 11:byte]
	Mem0[a0:byte] = v9
	CVZN = cond(v9)
	a0 = Mem0[a1:word32]
	d0 = 0
	CVZN = cond(d0)
	v12 = Mem0[a0:byte]
	a0 = a0 + 1
	d0 = DPB(d0, v12, 0)
	CVZN = cond(v12)
	d0 = (int32) (int16) d0
	ZN = cond(d0)
	v14 = a0
	Mem0[a1:word32] = v14
	CVZN = cond(v14)
	goto l00001C6C
	// succ:  l00001C6C
l00001C60:
	a7 = a7 - 4
	v15 = a1
	Mem0[a7:word32] = v15
	CVZN = cond(v15)
	v16 = Mem0[a6 + 8:word32]
	a7 = a7 - 4
	v17 = v16
	Mem0[a7:word32] = v17
	CVZN = cond(v17)
	call fn00001E94 (retsize: 4;)
	a7 = a7 + 8
	// succ:  l00001C6C
l00001C6C:
	d2 = -1
	CVZN = cond(d2)
	v19 = d2 - d0
	CVZN = cond(v19)
	a0 = Mem0[a6 + 16:word32]
	branch Test(NE,Z) l00001C7C
	// succ:  l00001C76 l00001C7C
l00001C76:
	v21 = d0
	Mem0[a0:word32] = v21
	CVZN = cond(v21)
	a7 = a6
	a6 = Mem0[a7:word32]
	a7 = a7 + 0x00000004
	return
	// succ:  fn00001C40_exit
l00001C7C:
	v22 = Mem0[a0:word32] + 0x00000001
	Mem0[a0:word32] = v22
	CVZNX = cond(v22)
	a7 = a6
	a6 = Mem0[a7:word32]
	a7 = a7 + 0x00000004
	return
	// succ:  fn00001C40_exit
fn00001C40_exit:


// fn00001C84
// Return size: 4
define fn00001C84
fn00001C84_entry:
	// succ:  l00001C84
l00001C84:
	a7 = fp
	a7 = a7 - 0x00000004
	Mem0[a7:word32] = a6
	a6 = a7
	a7 = a7 + 0x00000000
	a7 = a7 - 4
	Mem0[a7:word32] = d6
	a7 = a7 - 4
	Mem0[a7:word32] = d5
	a7 = a7 - 4
	Mem0[a7:word32] = d4
	a7 = a7 - 4
	Mem0[a7:word32] = d3
	d5 = Mem0[a6 + 12:word32]
	CVZN = cond(d5)
	d0 = d5
	CVZN = cond(d0)
	d5 = d5 - 0x00000001
	CVZNX = cond(d5)
	ZN = cond(d0 - 0x00000000)
	C = false
	V = false
	branch Test(LE,VZN) l00001CBA
	// succ:  l00001C98 l00001CBA
l00001C98:
	d3 = Mem0[a6 + 8:word32]
	CVZN = cond(d3)
	d4 = Mem0[a6 + 16:word32]
	CVZN = cond(d4)
	d6 = Mem0[a6 + 20:word32]
	CVZN = cond(d6)
	// succ:  l00001CA4
l00001CA4:
	a7 = a7 - 4
	v15 = d6
	Mem0[a7:word32] = v15
	CVZN = cond(v15)
	a7 = a7 - 4
	v16 = d4
	Mem0[a7:word32] = v16
	CVZN = cond(v16)
	a7 = a7 - 4
	v17 = d3
	Mem0[a7:word32] = v17
	CVZN = cond(v17)
	call fn00001C40 (retsize: 4;)
	a7 = a7 + 12
	d0 = d5
	CVZN = cond(d0)
	d5 = d5 - 0x00000001
	CVZNX = cond(d5)
	ZN = cond(d0 - 0x00000000)
	C = false
	V = false
	branch Test(GT,VZN) l00001CA4
	// succ:  l00001CBA l00001CA4
l00001CBA:
	d3 = Mem0[a7:word32]
	a7 = a7 + 4
	d4 = Mem0[a7:word32]
	a7 = a7 + 4
	d5 = Mem0[a7:word32]
	a7 = a7 + 4
	d6 = Mem0[a7:word32]
	a7 = a7 + 4
	a7 = a6
	a6 = Mem0[a7:word32]
	a7 = a7 + 0x00000004
	return
	// succ:  fn00001C84_exit
fn00001C84_exit:


// fn00001CC4
// Return size: 4
define fn00001CC4
fn00001CC4_entry:
	// succ:  l00001CC4
l00001CC4:
	a7 = fp
	a7 = a7 - 0x00000004
	Mem0[a7:word32] = a6
	a6 = a7
	a7 = a7 + 0x00000000
	a7 = a7 - 4
	Mem0[a7:word32] = d6
	a7 = a7 - 4
	Mem0[a7:word32] = d5
	a7 = a7 - 4
	Mem0[a7:word32] = d4
	a7 = a7 - 4
	Mem0[a7:word32] = d3
	d5 = Mem0[a6 + 12:word32]
	CVZN = cond(d5)
	d0 = d5
	CVZN = cond(d0)
	d5 = d5 - 0x00000001
	CVZNX = cond(d5)
	ZN = cond(d0 - 0x00000000)
	C = false
	V = false
	branch Test(LE,VZN) l00001D02
	// succ:  l00001CD8 l00001D02
l00001CD8:
	d3 = Mem0[a6 + 8:word32]
	CVZN = cond(d3)
	d4 = Mem0[a6 + 16:word32]
	CVZN = cond(d4)
	d6 = Mem0[a6 + 20:word32]
	CVZN = cond(d6)
	// succ:  l00001CE4
l00001CE4:
	a0 = d3
	d3 = d3 + 0x00000001
	CVZNX = cond(d3)
	a7 = a7 - 4
	v16 = d6
	Mem0[a7:word32] = v16
	CVZN = cond(v16)
	a7 = a7 - 4
	v17 = d4
	Mem0[a7:word32] = v17
	CVZN = cond(v17)
	v18 = Mem0[a0:byte]
	d0 = DPB(d0, v18, 0)
	CVZN = cond(v18)
	d0 = (int32) (int8) d0
	ZN = cond(d0)
	a7 = a7 - 4
	v19 = d0
	Mem0[a7:word32] = v19
	CVZN = cond(v19)
	call fn00001C40 (retsize: 4;)
	a7 = a7 + 12
	d0 = d5
	CVZN = cond(d0)
	d5 = d5 - 0x00000001
	CVZNX = cond(d5)
	ZN = cond(d0 - 0x00000000)
	C = false
	V = false
	branch Test(GT,VZN) l00001CE4
	// succ:  l00001D02 l00001CE4
l00001D02:
	d3 = Mem0[a7:word32]
	a7 = a7 + 4
	d4 = Mem0[a7:word32]
	a7 = a7 + 4
	d5 = Mem0[a7:word32]
	a7 = a7 + 4
	d6 = Mem0[a7:word32]
	a7 = a7 + 4
	a7 = a6
	a6 = Mem0[a7:word32]
	a7 = a7 + 0x00000004
	return
	// succ:  fn00001CC4_exit
fn00001CC4_exit:


// fn00001D0C
// Return size: 4
define fn00001D0C
fn00001D0C_entry:
	// succ:  l00001D0C
l00001D0C:
	a7 = fp
	a7 = a7 - 0x00000004
	Mem0[a7:word32] = a6
	a6 = a7
	a7 = a7 + 0x00000000
	a0 = Mem0[a6 + 8:word32]
	a1 = Mem0[a0:word32]
	a1 = a1 + 4
	v6 = a1
	Mem0[a0:word32] = v6
	CVZN = cond(v6)
	d0 = Mem0[a1 + -4:word32]
	CVZN = cond(d0)
	a7 = a6
	a6 = Mem0[a7:word32]
	a7 = a7 + 0x00000004
	return
	// succ:  fn00001D0C_exit
fn00001D0C_exit:


// fn00001D24
// Return size: 4
define fn00001D24
fn00001D24_entry:
	// succ:  l00001D24
l00001D24:
	a7 = fp
	a7 = a7 - 0x00000004
	Mem0[a7:word32] = a6
	a6 = a7
	a7 = a7 + 0x00000000
	a7 = a7 - 4
	v5 = a2
	Mem0[a7:word32] = v5
	CVZN = cond(v5)
	a2 = Mem0[a6 + 8:word32]
	d0 = a2
	CVZN = cond(d0)
	branch Test(NE,Z) l00001D44
	// succ:  l00001D32 l00001D44
l00001D32:
	d2 = 0
	CVZN = cond(d2)
	a7 = a7 - 4
	v10 = d2
	Mem0[a7:word32] = v10
	CVZN = cond(v10)
	call fn00001E04 (retsize: 4;)
	a7 = a7 + 4
	v11 = Mem0[a7:word32]
	a7 = a7 + 4
	a2 = v11
	a7 = a6
	a6 = Mem0[a7:word32]
	a7 = a7 + 0x00000004
	return
	// succ:  fn00001D24_exit
l00001D44:
	a7 = a7 - 4
	v12 = a2
	Mem0[a7:word32] = v12
	CVZN = cond(v12)
	call fn00001D80 (retsize: 4;)
	a7 = a7 + 4
	ZN = cond(d0 - 0x00000000)
	C = false
	V = false
	branch Test(EQ,Z) l00001D58
	// succ:  l00001D50 l00001D58
l00001D50:
	d0 = -1
	CVZN = cond(d0)
	v16 = Mem0[a7:word32]
	a7 = a7 + 4
	a2 = v16
	a7 = a6
	a6 = Mem0[a7:word32]
	a7 = a7 + 0x00000004
	return
	// succ:  fn00001D24_exit
l00001D58:
	Z = __btst(Mem0[a2 + 14:byte], 0x0006)
	branch Test(EQ,Z) l00001D78
	// succ:  l00001D60 l00001D78
l00001D60:
	v17 = Mem0[a2 + 16:word32]
	a7 = a7 - 4
	v18 = v17
	Mem0[a7:word32] = v18
	CVZN = cond(v18)
	call a5 + 138 (retsize: 4;)
	a7 = a7 + 4
	ZN = cond(d0 - 0x00000000)
	C = false
	V = false
	d0 = DPB(d0, Z, 0)
	d0 = (int32) (int8) d0
	ZN = cond(d0)
	v21 = Mem0[a7:word32]
	a7 = a7 + 4
	a2 = v21
	a7 = a6
	a6 = Mem0[a7:word32]
	a7 = a7 + 0x00000004
	return
	// succ:  fn00001D24_exit
l00001D78:
	d0 = 0
	CVZN = cond(d0)
	v22 = Mem0[a7:word32]
	a7 = a7 + 4
	a2 = v22
	a7 = a6
	a6 = Mem0[a7:word32]
	a7 = a7 + 0x00000004
	return
	// succ:  fn00001D24_exit
fn00001D24_exit:


// fn00001D80
// Return size: 4
define fn00001D80
fn00001D80_entry:
	// succ:  l00001D80
l00001D80:
	a7 = fp
	a7 = a7 - 0x00000004
	Mem0[a7:word32] = a6
	a6 = a7
	a7 = a7 + 0x00000000
	a7 = a7 - 4
	Mem0[a7:word32] = a2
	a7 = a7 - 4
	Mem0[a7:word32] = d4
	a7 = a7 - 4
	Mem0[a7:word32] = d3
	d3 = 0
	CVZN = cond(d3)
	a2 = Mem0[a6 + 8:word32]
	d1 = Mem0[a2 + 12:word32]
	CVZN = cond(d1)
	d0 = d1
	CVZN = cond(d0)
	d4 = 3
	CVZN = cond(d4)
	d0 = d0 & d4
	ZN = cond(d0)
	C = false
	V = false
	d2 = 2
	CVZN = cond(d2)
	v14 = d2 - d0
	CVZN = cond(v14)
	branch Test(NE,Z) l00001DE0
	// succ:  l00001D9E l00001DE0
l00001D9E:
	v16 = (word16) d1 & 0x0108
	d1 = DPB(d1, v16, 0)
	ZN = cond(v16)
	C = false
	V = false
	branch Test(EQ,Z) l00001DE0
	// succ:  l00001DA4 l00001DE0
l00001DA4:
	d0 = Mem0[a2 + 8:word32]
	CVZN = cond(d0)
	d4 = Mem0[a2:word32]
	CVZN = cond(d4)
	d4 = d4 - d0
	CVZNX = cond(d4)
	branch Test(LE,VZN) l00001DE0
	// succ:  l00001DAE l00001DE0
l00001DAE:
	a7 = a7 - 4
	v19 = d4
	Mem0[a7:word32] = v19
	CVZN = cond(v19)
	a7 = a7 - 4
	v20 = d0
	Mem0[a7:word32] = v20
	CVZN = cond(v20)
	v21 = Mem0[a2 + 16:word32]
	a7 = a7 - 4
	v22 = v21
	Mem0[a7:word32] = v22
	CVZN = cond(v22)
	call a5 + 146 (retsize: 4;)
	a7 = a7 + 12
	v24 = d0 - d4
	CVZN = cond(v24)
	branch Test(NE,Z) l00001DD8
	// succ:  l00001DC2 l00001DD8
l00001DC2:
	d0 = Mem0[a2 + 12:word32]
	CVZN = cond(d0)
	Z = __btst((byte) d0, 0x0007)
	branch Test(EQ,Z) l00001DE0
	// succ:  l00001DCC l00001DE0
l00001DCC:
	Z = __bclr(d0, 0x00000001, out d0)
	v25 = d0
	Mem0[a2 + 12:word32] = v25
	CVZN = cond(v25)
	goto l00001DE0
	// succ:  l00001DE0
l00001DD8:
	Z = __bset(Mem0[a2 + 15:byte], 0x0005, out Mem0[a2 + 15:byte])
	d3 = -1
	CVZN = cond(d3)
	// succ:  l00001DE0
l00001DE0:
	v26 = Mem0[a2 + 8:word32]
	Mem0[a2:word32] = v26
	CVZN = cond(v26)
	d4 = 0
	CVZN = cond(d4)
	v27 = d4
	Mem0[a2 + 4:word32] = v27
	CVZN = cond(v27)
	d0 = d3
	CVZN = cond(d0)
	d3 = Mem0[a7:word32]
	a7 = a7 + 4
	d4 = Mem0[a7:word32]
	a7 = a7 + 4
	a2 = Mem0[a7:word32]
	a7 = a7 + 4
	a7 = a6
	a6 = Mem0[a7:word32]
	a7 = a7 + 0x00000004
	return
	// succ:  fn00001D80_exit
fn00001D80_exit:


// fn00001DF4
// Return size: 4
define fn00001DF4
fn00001DF4_entry:
	// succ:  l00001DF4
l00001DF4:
	a7 = fp
	a7 = a7 - 0x00000004
	Mem0[a7:word32] = a6
	a6 = a7
	a7 = a7 + 0x00000000
	d2 = 1
	CVZN = cond(d2)
	a7 = a7 - 4
	v6 = d2
	Mem0[a7:word32] = v6
	CVZN = cond(v6)
	call fn00001E04 (retsize: 4;)
	a7 = a6
	a6 = Mem0[a7:word32]
	a7 = a7 + 0x00000004
	return
	// succ:  fn00001DF4_exit
fn00001DF4_exit:


// fn00001E04
// Return size: 4
define fn00001E04
fn00001E04_entry:
	// succ:  l00001E04
l00001E04:
	a7 = fp
	a7 = a7 - 0x00000004
	Mem0[a7:word32] = a6
	a6 = a7
	a7 = a7 + 0x00000000
	a7 = a7 - 4
	Mem0[a7:word32] = a2
	a7 = a7 - 4
	Mem0[a7:word32] = d7
	a7 = a7 - 4
	Mem0[a7:word32] = d6
	a7 = a7 - 4
	Mem0[a7:word32] = d5
	a7 = a7 - 4
	Mem0[a7:word32] = d4
	a7 = a7 - 4
	Mem0[a7:word32] = d3
	d7 = -1
	CVZN = cond(d7)
	d6 = 1
	CVZN = cond(d6)
	a2 = a5 + -2688
	d4 = 0
	CVZN = cond(d4)
	d5 = 0
	CVZN = cond(d5)
	v12 = a2 - Mem0[a5 + -2048:word32]
	CVZN = cond(v12)
	branch Test(UGT,CZ) l00001E64
	// succ:  l00001E1E l00001E64
l00001E1E:
	d3 = Mem0[a6 + 8:word32]
	CVZN = cond(d3)
	// succ:  l00001E22
l00001E22:
	v14 = d3 - d6
	CVZN = cond(v14)
	branch Test(NE,Z) l00001E40
	// succ:  l00001E26 l00001E40
l00001E26:
	d0 = Mem0[a2 + 12:word32]
	CVZN = cond(d0)
	v17 = (word16) d0 & 0x0083
	d0 = DPB(d0, v17, 0)
	ZN = cond(v17)
	C = false
	V = false
	branch Test(EQ,Z) l00001E40
	// succ:  l00001E30 l00001E40
l00001E30:
	a7 = a7 - 4
	v21 = a2
	Mem0[a7:word32] = v21
	CVZN = cond(v21)
	call fn00001D24 (retsize: 4;)
	a7 = a7 + 4
	v22 = d0 - d7
	CVZN = cond(v22)
	branch Test(EQ,Z) l00001E58
	// succ:  l00001E3C l00001E58
l00001E3C:
	d4 = d4 + d6
	CVZNX = cond(d4)
	goto l00001E58
	// succ:  l00001E58
l00001E40:
	ZN = cond(d3 - 0x00000000)
	C = false
	V = false
	branch Test(NE,Z) l00001E58
	// succ:  l00001E44 l00001E58
l00001E44:
	Z = __btst(Mem0[a2 + 15:word32], d6)
	branch Test(EQ,Z) l00001E58
	// succ:  l00001E4A l00001E58
l00001E4A:
	a7 = a7 - 4
	v27 = a2
	Mem0[a7:word32] = v27
	CVZN = cond(v27)
	call fn00001D24 (retsize: 4;)
	a7 = a7 + 4
	v28 = d0 - d7
	CVZN = cond(v28)
	branch Test(NE,Z) l00001E58
	// succ:  l00001E56 l00001E58
l00001E56:
	d5 = d0
	CVZN = cond(d5)
	// succ:  l00001E58
l00001E58:
	a2 = a2 + 32
	v25 = a2 - Mem0[a5 + -2048:word32]
	CVZN = cond(v25)
	branch Test(ULE,VZ) l00001E22
	// succ:  l00001E62 l00001E22
l00001E62:
	goto l00001E68
	// succ:  l00001E68
l00001E64:
	d3 = Mem0[a6 + 8:word32]
	CVZN = cond(d3)
	// succ:  l00001E68
l00001E68:
	d7 = 1
	CVZN = cond(d7)
	v24 = d7 - d3
	CVZN = cond(v24)
	branch Test(EQ,Z) l00001E70
	// succ:  l00001E6E l00001E70
l00001E6E:
	d4 = d5
	CVZN = cond(d4)
	// succ:  l00001E70
l00001E70:
	d0 = d4
	CVZN = cond(d0)
	d3 = Mem0[a7:word32]
	a7 = a7 + 4
	d4 = Mem0[a7:word32]
	a7 = a7 + 4
	d5 = Mem0[a7:word32]
	a7 = a7 + 4
	d6 = Mem0[a7:word32]
	a7 = a7 + 4
	d7 = Mem0[a7:word32]
	a7 = a7 + 4
	a2 = Mem0[a7:word32]
	a7 = a7 + 4
	a7 = a6
	a6 = Mem0[a7:word32]
	a7 = a7 + 0x00000004
	return
	// succ:  fn00001E04_exit
fn00001E04_exit:


// fn00001E94
// Return size: 4
define fn00001E94
fn00001E94_entry:
	// succ:  l00001E94
l00001E94:
	a7 = fp
	a7 = a7 - 0x00000004
	Mem0[a7:word32] = a6
	a6 = a7
	a7 = a7 - 0x00000004
	a7 = a7 - 4
	Mem0[a7:word32] = a3
	a7 = a7 - 4
	Mem0[a7:word32] = a2
	a7 = a7 - 4
	Mem0[a7:word32] = d5
	a7 = a7 - 4
	Mem0[a7:word32] = d4
	a7 = a7 - 4
	Mem0[a7:word32] = d3
	a3 = Mem0[a6 + 12:word32]
	d3 = Mem0[a3 + 16:word32]
	CVZN = cond(d3)
	a2 = a3 + 12
	d0 = Mem0[a2:word32]
	CVZN = cond(d0)
	d1 = d0
	CVZN = cond(d1)
	v12 = (word16) d1 & 0x0082
	d1 = DPB(d1, v12, 0)
	ZN = cond(v12)
	C = false
	V = false
	branch Test(EQ,Z) l00001F5C
	// succ:  l00001EB4 l00001F5C
l00001EB4:
	Z = __btst((byte) d0, 0x0006)
	branch Test(NE,Z) l00001F5C
	// succ:  l00001EBC l00001F5C
l00001EBC:
	Z = __btst((byte) d0, 0x0000)
	branch Test(EQ,Z) l00001EDA
	// succ:  l00001EC2 l00001EDA
l00001EC2:
	d5 = 0
	CVZN = cond(d5)
	v17 = d5
	Mem0[a3 + 4:word32] = v17
	CVZN = cond(v17)
	d0 = Mem0[a2:word32]
	CVZN = cond(d0)
	Z = __btst((byte) d0, 0x0004)
	branch Test(EQ,Z) l00001F5C
	// succ:  l00001ED2 l00001F5C
l00001ED2:
	v18 = Mem0[a3 + 8:word32]
	Mem0[a3:word32] = v18
	CVZN = cond(v18)
	Z = __bclr(Mem0[a2 + 3:byte], (byte) d5, out Mem0[a2 + 3:byte])
	// succ:  l00001EDA
l00001EDA:
	d0 = Mem0[a2:word32]
	CVZN = cond(d0)
	Z = __bset(d0, 0x0001, out d0)
	v20 = d0
	Mem0[a2:word32] = v20
	CVZN = cond(v20)
	Z = __bclr(d0, 0x00000004, out d0)
	v21 = d0
	Mem0[a2:word32] = v21
	CVZN = cond(v21)
	d5 = 0
	CVZN = cond(d5)
	v22 = d5
	Mem0[a3 + 4:word32] = v22
	CVZN = cond(v22)
	d4 = 0
	CVZN = cond(d4)
	d0 = Mem0[a2:word32]
	CVZN = cond(d0)
	v23 = (word16) d0 & 0x010C
	d0 = DPB(d0, v23, 0)
	ZN = cond(v23)
	C = false
	V = false
	branch Test(NE,Z) l00001F1C
	// succ:  l00001EF8 l00001F1C
l00001EF8:
	a0 = a5 + -2656
	v26 = a3 - a0
	CVZN = cond(v26)
	branch Test(EQ,Z) l00001F08
	// succ:  l00001F00 l00001F08
l00001F00:
	a0 = a5 + -2624
	v27 = a3 - a0
	CVZN = cond(v27)
	branch Test(NE,Z) l00001F14
	// succ:  l00001F08 l00001F14
l00001F08:
	a7 = a7 - 4
	v28 = d3
	Mem0[a7:word32] = v28
	CVZN = cond(v28)
	call a5 + 130 (retsize: 4;)
	a7 = a7 + 4
	ZN = cond(d0 - 0x00000000)
	C = false
	V = false
	branch Test(NE,Z) l00001F1C
	// succ:  l00001F14 l00001F1C
l00001F14:
	a7 = a7 - 4
	v29 = a3
	Mem0[a7:word32] = v29
	CVZN = cond(v29)
	call fn00002014 (retsize: 4;)
	a7 = a7 + 4
	// succ:  l00001F1C
l00001F1C:
	d0 = Mem0[a2:word32]
	CVZN = cond(d0)
	v30 = (word16) d0 & 0x0108
	d0 = DPB(d0, v30, 0)
	ZN = cond(v30)
	C = false
	V = false
	branch Test(EQ,Z) l00001F94
	// succ:  l00001F24 l00001F94
l00001F24:
	d0 = Mem0[a3 + 8:word32]
	CVZN = cond(d0)
	d5 = Mem0[a3:word32]
	CVZN = cond(d5)
	d5 = d5 - d0
	CVZNX = cond(d5)
	a0 = d0
	a0 = a0 + 1
	v32 = a0
	Mem0[a3:word32] = v32
	CVZN = cond(v32)
	d0 = Mem0[a3 + 24:word32]
	CVZN = cond(d0)
	d0 = d0 - 0x00000001
	CVZNX = cond(d0)
	v33 = d0
	Mem0[a3 + 4:word32] = v33
	CVZN = cond(v33)
	ZN = cond(d5 - 0x00000000)
	C = false
	V = false
	branch Test(LE,VZN) l00001F6C
	// succ:  l00001F40 l00001F6C
l00001F40:
	a7 = a7 - 4
	v35 = d5
	Mem0[a7:word32] = v35
	CVZN = cond(v35)
	v36 = Mem0[a3 + 8:word32]
	a7 = a7 - 4
	v37 = v36
	Mem0[a7:word32] = v37
	CVZN = cond(v37)
	a7 = a7 - 4
	v38 = d3
	Mem0[a7:word32] = v38
	CVZN = cond(v38)
	call a5 + 146 (retsize: 4;)
	a7 = a7 + 12
	d4 = d0
	CVZN = cond(d4)
	a0 = Mem0[a3 + 8:word32]
	v39 = Mem0[a6 + 11:byte]
	Mem0[a0:byte] = v39
	CVZN = cond(v39)
	goto l00001FAE
	// succ:  l00001FAE
l00001F5C:
	Z = __bset(d0, 0x0005, out d0)
	v19 = d0
	Mem0[a2:word32] = v19
	CVZN = cond(v19)
	d0 = -1
	CVZN = cond(d0)
	d3 = Mem0[a7:word32]
	a7 = a7 + 4
	d4 = Mem0[a7:word32]
	a7 = a7 + 4
	d5 = Mem0[a7:word32]
	a7 = a7 + 4
	a2 = Mem0[a7:word32]
	a7 = a7 + 4
	a3 = Mem0[a7:word32]
	a7 = a7 + 4
	a7 = a6
	a6 = Mem0[a7:word32]
	a7 = a7 + 0x00000004
	return
	// succ:  fn00001E94_exit
l00001F6C:
	a0 = a5 + -1704
	Z = __btst(Mem0[a0 + d3:byte], 0x0005)
	branch Test(EQ,Z) l00001F8A
	// succ:  l00001F78 l00001F8A
l00001F78:
	d2 = 2
	CVZN = cond(d2)
	a7 = a7 - 4
	v41 = d2
	Mem0[a7:word32] = v41
	CVZN = cond(v41)
	d1 = 0
	CVZN = cond(d1)
	a7 = a7 - 4
	v42 = d1
	Mem0[a7:word32] = v42
	CVZN = cond(v42)
	a7 = a7 - 4
	v43 = d3
	Mem0[a7:word32] = v43
	CVZN = cond(v43)
	call a5 + 154 (retsize: 4;)
	a7 = a7 + 12
	// succ:  l00001F8A
l00001F8A:
	a0 = Mem0[a3 + 8:word32]
	v45 = Mem0[a6 + 11:byte]
	Mem0[a0:byte] = v45
	CVZN = cond(v45)
	goto l00001FAE
	// succ:  l00001FAE
l00001F94:
	d5 = 1
	CVZN = cond(d5)
	v46 = Mem0[a6 + 11:byte]
	Mem0[a6 + -1:byte] = v46
	CVZN = cond(v46)
	a7 = a7 - 4
	v47 = d5
	Mem0[a7:word32] = v47
	CVZN = cond(v47)
	a7 = a7 - 0x00000004
	Mem0[a7:word32] = a6 + -1
	a7 = a7 - 4
	v48 = d3
	Mem0[a7:word32] = v48
	CVZN = cond(v48)
	call a5 + 146 (retsize: 4;)
	a7 = a7 + 12
	d4 = d0
	CVZN = cond(d4)
	// succ:  l00001FAE
l00001FAE:
	v44 = d4 - d5
	CVZN = cond(v44)
	branch Test(EQ,Z) l00001FC4
	// succ:  l00001FB2 l00001FC4
l00001FB2:
	Z = __bset(Mem0[a2 + 3:byte], 0x0005, out Mem0[a2 + 3:byte])
	d0 = -1
	CVZN = cond(d0)
	d3 = Mem0[a7:word32]
	a7 = a7 + 4
	d4 = Mem0[a7:word32]
	a7 = a7 + 4
	d5 = Mem0[a7:word32]
	a7 = a7 + 4
	a2 = Mem0[a7:word32]
	a7 = a7 + 4
	a3 = Mem0[a7:word32]
	a7 = a7 + 4
	a7 = a6
	a6 = Mem0[a7:word32]
	a7 = a7 + 0x00000004
	return
	// succ:  fn00001E94_exit
l00001FC4:
	d0 = Mem0[a6 + 8:word32]
	CVZN = cond(d0)
	d0 = d0 & 0x000000FF
	ZN = cond(d0)
	C = false
	V = false
	d3 = Mem0[a7:word32]
	a7 = a7 + 4
	d4 = Mem0[a7:word32]
	a7 = a7 + 4
	d5 = Mem0[a7:word32]
	a7 = a7 + 4
	a2 = Mem0[a7:word32]
	a7 = a7 + 4
	a3 = Mem0[a7:word32]
	a7 = a7 + 4
	a7 = a6
	a6 = Mem0[a7:word32]
	a7 = a7 + 0x00000004
	return
	// succ:  fn00001E94_exit
fn00001E94_exit:


// fn00001FD8
// Return size: 4
define fn00001FD8
fn00001FD8_entry:
	// succ:  l00001FD8
l00001FD8:
	a7 = fp
	a7 = a7 - 0x00000004
	Mem0[a7:word32] = a6
	a6 = a7
	a7 = a7 + 0x00000000
	a7 = a7 - 4
	Mem0[a7:word32] = d6
	a7 = a7 - 4
	Mem0[a7:word32] = d5
	a7 = a7 - 4
	Mem0[a7:word32] = d4
	a7 = a7 - 4
	Mem0[a7:word32] = d3
	d6 = 32
	CVZN = cond(d6)
	d5 = -1
	CVZN = cond(d5)
	d3 = 0
	CVZN = cond(d3)
	a0 = a5 + -2592
	d4 = a0
	CVZN = cond(d4)
	v11 = a0 - Mem0[a5 + -2048:word32]
	CVZN = cond(v11)
	branch Test(UGT,CZ) l00002008
	// succ:  l00001FF2 l00002008
l00001FF2:
	a7 = a7 - 4
	v13 = d4
	Mem0[a7:word32] = v13
	CVZN = cond(v13)
	call fn00002068 (retsize: 4;)
	a7 = a7 + 4
	v15 = d0 - d5
	CVZN = cond(v15)
	branch Test(EQ,Z) l00002000
	// succ:  l00001FFE l00002000
l00001FFE:
	d3 = d3 + 0x00000001
	CVZNX = cond(d3)
	// succ:  l00002000
l00002000:
	d4 = d4 + d6
	CVZNX = cond(d4)
	v18 = d4 - Mem0[a5 + -2048:word32]
	CVZN = cond(v18)
	branch Test(ULE,VZ) l00001FF2
	// succ:  l00002008 l00001FF2
l00002008:
	d0 = d3
	CVZN = cond(d0)
	d3 = Mem0[a7:word32]
	a7 = a7 + 4
	d4 = Mem0[a7:word32]
	a7 = a7 + 4
	d5 = Mem0[a7:word32]
	a7 = a7 + 4
	d6 = Mem0[a7:word32]
	a7 = a7 + 4
	a7 = a6
	a6 = Mem0[a7:word32]
	a7 = a7 + 0x00000004
	return
	// succ:  fn00001FD8_exit
fn00001FD8_exit:


// fn00002014
// Return size: 4
define fn00002014
fn00002014_entry:
	// succ:  l00002014
l00002014:
	a7 = fp
	a7 = a7 - 0x00000004
	Mem0[a7:word32] = a6
	a6 = a7
	a7 = a7 + 0x00000000
	a7 = a7 - 4
	v5 = a2
	Mem0[a7:word32] = v5
	CVZN = cond(v5)
	v8 = Mem0[a5 + -1368:word32] + 0x00000001
	Mem0[a5 + -1368:word32] = v8
	CVZNX = cond(v8)
	a2 = Mem0[a6 + 8:word32]
	a7 = a7 - 0x00000004
	Mem0[a7:word32] = 0x00000200
	call a5 + 114 (retsize: 4;)
	a7 = a7 + 4
	v11 = d0
	Mem0[a2 + 8:word32] = v11
	CVZN = cond(v11)
	branch Test(EQ,Z) l00002044
	// succ:  l00002032 l00002044
l00002032:
	Z = __bset(Mem0[a2 + 15:byte], 0x0003, out Mem0[a2 + 15:byte])
	v13 = 0x00000200
	Mem0[a2 + 24:word32] = v13
	CVZN = cond(v13)
	goto l00002058
	// succ:  l00002058
l00002044:
	Z = __bset(Mem0[a2 + 15:byte], 0x0002, out Mem0[a2 + 15:byte])
	a0 = a2 + 20
	v15 = a0
	Mem0[a2 + 8:word32] = v15
	CVZN = cond(v15)
	d2 = 1
	CVZN = cond(d2)
	v17 = d2
	Mem0[a2 + 24:word32] = v17
	CVZN = cond(v17)
	// succ:  l00002058
l00002058:
	v18 = Mem0[a2 + 8:word32]
	Mem0[a2:word32] = v18
	CVZN = cond(v18)
	d2 = 0
	CVZN = cond(d2)
	v19 = d2
	Mem0[a2 + 4:word32] = v19
	CVZN = cond(v19)
	v20 = Mem0[a7:word32]
	a7 = a7 + 4
	a2 = v20
	a7 = a6
	a6 = Mem0[a7:word32]
	a7 = a7 + 0x00000004
	return
	// succ:  fn00002014_exit
fn00002014_exit:


// fn00002068
// Return size: 4
define fn00002068
fn00002068_entry:
	// succ:  l00002068
l00002068:
	a7 = fp
	a7 = a7 - 0x00000004
	Mem0[a7:word32] = a6
	a6 = a7
	a7 = a7 + 0x00000000
	a7 = a7 - 4
	v5 = d3
	Mem0[a7:word32] = v5
	CVZN = cond(v5)
	a7 = a7 - 4
	v8 = a2
	Mem0[a7:word32] = v8
	CVZN = cond(v8)
	d3 = -1
	CVZN = cond(d3)
	a2 = Mem0[a6 + 8:word32]
	d0 = Mem0[a2 + 12:word32]
	CVZN = cond(d0)
	Z = __btst((byte) d0, 0x0006)
	branch Test(EQ,Z) l00002090
	// succ:  l00002080 l00002090
l00002080:
	d3 = 0
	CVZN = cond(d3)
	v11 = d3
	Mem0[a2 + 12:word32] = v11
	CVZN = cond(v11)
	d0 = -1
	CVZN = cond(d0)
	v12 = Mem0[a7:word32]
	a7 = a7 + 4
	a2 = v12
	v13 = Mem0[a7:word32]
	a7 = a7 + 4
	d3 = v13
	CVZN = cond(d3)
	a7 = a6
	a6 = Mem0[a7:word32]
	a7 = a7 + 0x00000004
	return
	// succ:  fn00002068_exit
l00002090:
	v14 = (word16) d0 & 0x0083
	d0 = DPB(d0, v14, 0)
	ZN = cond(v14)
	C = false
	V = false
	branch Test(EQ,Z) l000020E0
	// succ:  l00002096 l000020E0
l00002096:
	a7 = a7 - 4
	v18 = a2
	Mem0[a7:word32] = v18
	CVZN = cond(v18)
	call fn00001D80 (retsize: 4;)
	a7 = a7 + 4
	d3 = d0
	CVZN = cond(d3)
	a7 = a7 - 4
	v19 = a2
	Mem0[a7:word32] = v19
	CVZN = cond(v19)
	call fn000020F0 (retsize: 4;)
	a7 = a7 + 4
	v20 = Mem0[a2 + 16:word32]
	a7 = a7 - 4
	v21 = v20
	Mem0[a7:word32] = v21
	CVZN = cond(v21)
	call a5 + 162 (retsize: 4;)
	a7 = a7 + 4
	ZN = cond(d0 - 0x00000000)
	C = false
	V = false
	branch Test(GE,VN) l000020BC
	// succ:  l000020B6 l000020BC
l000020B6:
	d3 = -1
	CVZN = cond(d3)
	goto l000020E0
	// succ:  l000020E0
l000020BC:
	d0 = Mem0[a2 + 28:word32]
	CVZN = cond(d0)
	branch Test(EQ,Z) l000020E0
	// succ:  l000020C2 l000020E0
l000020C2:
	a7 = a7 - 4
	v28 = d0
	Mem0[a7:word32] = v28
	CVZN = cond(v28)
	call a5 + 178 (retsize: 4;)
	a7 = a7 + 4
	ZN = cond(d0 - 0x00000000)
	C = false
	V = false
	branch Test(EQ,Z) l000020D0
	// succ:  l000020CE l000020D0
l000020CE:
	d3 = -1
	CVZN = cond(d3)
	// succ:  l000020D0
l000020D0:
	v29 = Mem0[a2 + 28:word32]
	a7 = a7 - 4
	v30 = v29
	Mem0[a7:word32] = v30
	CVZN = cond(v30)
	call a5 + 122 (retsize: 4;)
	a7 = a7 + 4
	d2 = 0
	CVZN = cond(d2)
	v31 = d2
	Mem0[a2 + 28:word32] = v31
	CVZN = cond(v31)
	// succ:  l000020E0
l000020E0:
	d2 = 0
	CVZN = cond(d2)
	v25 = d2
	Mem0[a2 + 12:word32] = v25
	CVZN = cond(v25)
	d0 = d3
	CVZN = cond(d0)
	v26 = Mem0[a7:word32]
	a7 = a7 + 4
	a2 = v26
	v27 = Mem0[a7:word32]
	a7 = a7 + 4
	d3 = v27
	CVZN = cond(d3)
	a7 = a6
	a6 = Mem0[a7:word32]
	a7 = a7 + 0x00000004
	return
	// succ:  fn00002068_exit
fn00002068_exit:


// fn000020F0
// Return size: 4
define fn000020F0
fn000020F0_entry:
	// succ:  l000020F0
l000020F0:
	a7 = fp
	a7 = a7 - 0x00000004
	Mem0[a7:word32] = a6
	a6 = a7
	a7 = a7 + 0x00000000
	a7 = a7 - 4
	v5 = a2
	Mem0[a7:word32] = v5
	CVZN = cond(v5)
	a2 = Mem0[a6 + 8:word32]
	d0 = Mem0[a2 + 12:word32]
	CVZN = cond(d0)
	d1 = d0
	CVZN = cond(d1)
	v9 = (word16) d1 & 0x0083
	d1 = DPB(d1, v9, 0)
	ZN = cond(v9)
	C = false
	V = false
	branch Test(EQ,Z) l00002128
	// succ:  l00002106 l00002128
l00002106:
	Z = __btst((byte) d0, 0x0003)
	branch Test(EQ,Z) l00002128
	// succ:  l0000210C l00002128
l0000210C:
	v14 = Mem0[a2 + 8:word32]
	a7 = a7 - 4
	v15 = v14
	Mem0[a7:word32] = v15
	CVZN = cond(v15)
	call a5 + 122 (retsize: 4;)
	a7 = a7 + 4
	Z = __bclr(Mem0[a2 + 15:byte], 0x03, out Mem0[a2 + 15:byte])
	d2 = 0
	CVZN = cond(d2)
	v18 = d2
	Mem0[a2:word32] = v18
	CVZN = cond(v18)
	v19 = d2
	Mem0[a2 + 8:word32] = v19
	CVZN = cond(v19)
	v20 = d2
	Mem0[a2 + 4:word32] = v20
	CVZN = cond(v20)
	// succ:  l00002128
l00002128:
	v21 = Mem0[a7:word32]
	a7 = a7 + 4
	a2 = v21
	a7 = a6
	a6 = Mem0[a7:word32]
	a7 = a7 + 0x00000004
	return
	// succ:  fn000020F0_exit
fn000020F0_exit:


// fn000021F0
// Return size: 4
define fn000021F0
fn000021F0_entry:
	// succ:  l000021F0
l000021F0:
	a7 = fp
	a7 = a7 - 0x00000004
	Mem0[a7:word32] = a6
	a6 = a7
	a7 = a7 + 0x00000000
	a7 = a7 - 4
	Mem0[a7:word32] = a2
	a7 = a7 - 4
	Mem0[a7:word32] = d4
	a7 = a7 - 4
	Mem0[a7:word32] = d3
	a0 = Mem0[a5 + -1376:word32]
	d0 = Mem0[a0 + 28:word32]
	CVZN = cond(d0)
	a1 = d0
	branch Test(EQ,Z) l0000225A
	// succ:  l00002204 l0000225A
l00002204:
	d4 = 3
	CVZN = cond(d4)
	a2 = a5 + -1640
	d3 = 0x46535953
	CVZN = cond(d3)
	d2 = 0x45434F4E
	CVZN = cond(d2)
	d1 = 0
	CVZN = cond(d1)
	// succ:  l00002218
l00002218:
	a0 = Mem0[a1 + 4:word32]
	d0 = Mem0[a0:word32]
	CVZN = cond(d0)
	v15 = d0 - d2
	CVZN = cond(v15)
	branch Test(EQ,Z) l00002228
	// succ:  l00002222 l00002228
l00002222:
	v16 = d0 - d3
	CVZN = cond(v16)
	branch Test(EQ,Z) l00002238
	// succ:  l00002226 l00002238
l00002226:
	goto l00002250
	// succ:  l00002250
l00002228:
	a0 = a5 + -1704
	v26 = Mem0[a0 + d1:byte] | 0x41
	Mem0[a0 + d1:byte] = v26
	ZN = cond(v26)
	C = false
	V = false
	v27 = a1
	Mem0[a1 + d1 * 4:word32] = v27
	CVZN = cond(v27)
	goto l00002250
	// succ:  l00002250
l00002238:
	a0 = a5 + -1704
	v20 = Mem0[a0 + d1:byte] | 0x01
	Mem0[a0 + d1:byte] = v20
	ZN = cond(v20)
	C = false
	V = false
	a0 = Mem0[a1 + 8:word32]
	a0 = Mem0[a0:word32]
	v24 = Mem0[a0 + 2:word16]
	a0 = DPB(a0, v24, 0)
	v25 = a0
	Mem0[a0 + d1 * 4:word32] = v25
	CVZN = cond(v25)
	// succ:  l00002250
l00002250:
	a1 = a1 + 20
	d1 = d1 + 0x00000001
	CVZNX = cond(d1)
	v18 = d1 - d4
	CVZN = cond(v18)
	branch Test(LT,CV) l00002218
	// succ:  l0000225A l00002218
l0000225A:
	d3 = Mem0[a7:word32]
	a7 = a7 + 4
	d4 = Mem0[a7:word32]
	a7 = a7 + 4
	a2 = Mem0[a7:word32]
	a7 = a7 + 4
	a7 = a6
	a6 = Mem0[a7:word32]
	a7 = a7 + 0x00000004
	return
	// succ:  fn000021F0_exit
fn000021F0_exit:


// fn00002264
// Return size: 4
define fn00002264
fn00002264_entry:
	// succ:  l00002264
l00002264:
	a7 = fp
	a7 = a7 - 0x00000004
	Mem0[a7:word32] = a6
	a6 = a7
	a7 = a7 + 0x00000000
	a7 = a7 - 4
	v5 = a2
	Mem0[a7:word32] = v5
	CVZN = cond(v5)
	a0 = Mem0[a6 + 8:word32]
	d0 = a0
	CVZN = cond(d0)
	branch Test(EQ,Z) l0000228C
	// succ:  l00002272 l0000228C
l00002272:
	v11 = Mem0[a0:byte]
	d1 = DPB(d1, v11, 0)
	CVZN = cond(v11)
	branch Test(EQ,Z) l0000228C
	// succ:  l00002276 l0000228C
l00002276:
	a2 = d0
	d0 = 0
	CVZN = cond(d0)
	v12 = (byte) d1
	d0 = DPB(d0, v12, 0)
	CVZN = cond(v12)
	ZN = cond(d0 - 0x00000000)
	C = false
	V = false
	a1 = a0 + 1
	branch Test(EQ,Z) l0000228A
	// succ:  l00002284 l0000228A
l00002284:
	v17 = Mem0[a1:byte]
	a1 = a1 + 1
	v18 = v17
	Mem0[a2:byte] = v18
	a2 = a2 + 1
	CVZN = cond(v18)
	d0 = d0 - 0x00000001
	CVZNX = cond(d0)
	branch Test(NE,Z) l00002284
	// succ:  l0000228A l00002284
l0000228A:
	Mem0[a2:byte] = 0x00
	Z = true
	C = false
	N = false
	V = false
	// succ:  l0000228C
l0000228C:
	d0 = a0
	CVZN = cond(d0)
	v22 = Mem0[a7:word32]
	a7 = a7 + 4
	a2 = v22
	a7 = a6
	a6 = Mem0[a7:word32]
	a7 = a7 + 0x00000004
	return
	// succ:  fn00002264_exit
fn00002264_exit:


// fn00002294
// Return size: 4
define fn00002294
fn00002294_entry:
	// succ:  l00002294
l00002294:
	a7 = fp
	a7 = a7 - 0x00000004
	Mem0[a7:word32] = a6
	a6 = a7
	a7 = a7 + 0x00000000
	d2 = 0
	CVZN = cond(d2)
	a7 = a7 - 4
	v6 = d2
	Mem0[a7:word32] = v6
	CVZN = cond(v6)
	a7 = a7 - 4
	v7 = d2
	Mem0[a7:word32] = v7
	CVZN = cond(v7)
	v8 = Mem0[a6 + 8:word32]
	a7 = a7 - 4
	v9 = v8
	Mem0[a7:word32] = v9
	CVZN = cond(v9)
	call fn00002354 (retsize: 4;)
	a7 = a6
	a6 = Mem0[a7:word32]
	a7 = a7 + 0x00000004
	return
	// succ:  fn00002294_exit
fn00002294_exit:


// fn000022C4
// Return size: 4
define fn000022C4
fn000022C4_entry:
	// succ:  l000022C4
l000022C4:
	a7 = fp
	a7 = a7 - 0x00000004
	Mem0[a7:word32] = a6
	a6 = a7
	a7 = a7 - 0x00000004
	a7 = a7 - 4
	v5 = a2
	Mem0[a7:word32] = v5
	CVZN = cond(v5)
	a7 = a7 - 0x00000004
	Mem0[a7:word32] = a5 + -740
	a7 = a7 - 0x00000004
	Mem0[a7:word32] = a5 + -744
	call fn000023B4 (retsize: 4;)
	a7 = a7 + 8
	a7 = a7 - 0x00000004
	Mem0[a7:word32] = a5 + -748
	a7 = a7 - 0x00000004
	Mem0[a7:word32] = a5 + -752
	call fn000023B4 (retsize: 4;)
	a7 = a7 + 4
	a7 = a7 - 2
	v8 = 0xA89F
	Mem0[a7:word16] = v8
	CVZN = cond(v8)
	a7 = a7 - 1
	v9 = 0x01
	Mem0[a7:byte] = v9
	CVZN = cond(v9)
	call a5 + 194 (retsize: 4;)
	v10 = Mem0[a7:word32]
	a7 = a7 + 4
	a2 = v10
	a7 = a7 - 4
	a7 = a7 - 2
	v11 = 0xA1AD
	Mem0[a7:word16] = v11
	CVZN = cond(v11)
	a7 = a7 - 1
	Mem0[0x00:byte] = 0x00
	Z = true
	C = false
	N = false
	V = false
	call a5 + 194 (retsize: 4;)
	v16 = Mem0[a7:word32]
	a7 = a7 + 4
	v17 = a2 - v16
	CVZN = cond(v17)
	branch Test(EQ,Z) l0000231C
	// succ:  l00002304 l0000231C
l00002304:
	a1 = a6 + -4
	d0 = 0x73797376
	CVZN = cond(d0)
	__syscall(0xA1AD)
	v21 = a0
	Mem0[a1:word32] = v21
	CVZN = cond(v21)
	ZN = cond((word16) d0 - 0x0000)
	C = false
	V = false
	branch Test(NE,Z) l0000231C
	// succ:  l00002316 l0000231C
l00002316:
	v23 = Mem0[a6 + -4:word32]
	Mem0[a5 + -1720:word32] = v23
	CVZN = cond(v23)
	// succ:  l0000231C
l0000231C:
	d0 = 0
	CVZN = cond(d0)
	v24 = Mem0[a7:word32]
	a7 = a7 + 4
	a2 = v24
	a7 = a6
	a6 = Mem0[a7:word32]
	a7 = a7 + 0x00000004
	return
	// succ:  fn000022C4_exit
fn000022C4_exit:


// fn00002354
// Return size: 4
define fn00002354
fn00002354_entry:
	// succ:  l00002354
l00002354:
	a7 = fp
	a7 = a7 - 0x00000004
	Mem0[a7:word32] = a6
	a6 = a7
	a7 = a7 + 0x00000000
	v5 = Mem0[a6 + 19:byte]
	Mem0[a5 + -1380:byte] = v5
	CVZN = cond(v5)
	ZN = cond(Mem0[a6 + 12:word32] - 0x00000000)
	C = false
	V = false
	branch Test(NE,Z) l00002386
	// succ:  l00002364 l00002386
l00002364:
	ZN = cond(Mem0[a5 + -708:word32] - 0x00000000)
	C = false
	V = false
	branch Test(EQ,Z) l00002378
	// succ:  l0000236A l00002378
l0000236A:
	v11 = Mem0[a5 + -712:word32]
	a7 = a7 - 4
	v12 = v11
	Mem0[a7:word32] = v12
	CVZN = cond(v12)
	v13 = Mem0[a5 + -708:word32]
	a7 = a7 - 4
	v14 = v13
	Mem0[a7:word32] = v14
	CVZN = cond(v14)
	call fn000023B4 (retsize: 4;)
	a7 = a7 + 8
	// succ:  l00002378
l00002378:
	a7 = a7 - 0x00000004
	Mem0[a7:word32] = a5 + -728
	a7 = a7 - 0x00000004
	Mem0[a7:word32] = a5 + -736
	call fn000023B4 (retsize: 4;)
	a7 = a7 + 8
	// succ:  l00002386
l00002386:
	a7 = a7 - 0x00000004
	Mem0[a7:word32] = a5 + -720
	a7 = a7 - 0x00000004
	Mem0[a7:word32] = a5 + -724
	call fn000023B4 (retsize: 4;)
	a7 = a7 + 8
	ZN = cond(Mem0[a6 + 16:word32] - 0x00000000)
	C = false
	V = false
	branch Test(NE,Z) l000023AE
	// succ:  l0000239A l000023AE
l0000239A:
	ZN = cond(Mem0[a5 + -1376:word32] - 0x00000000)
	C = false
	V = false
	branch Test(EQ,Z) l000023AA
	// succ:  l000023A0 l000023AA
l000023A0:
	a0 = Mem0[a5 + -1376:word32]
	v16 = Mem0[a6 + 8:word32]
	Mem0[a0 + 14:word32] = v16
	CVZN = cond(v16)
	// succ:  l000023AA
l000023AA:
	call a5 + 98 (retsize: 4;)
	// succ:  l000023AE
l000023AE:
	a7 = a6
	a6 = Mem0[a7:word32]
	a7 = a7 + 0x00000004
	return
	// succ:  fn00002354_exit
fn00002354_exit:


// fn000023B4
// Return size: 4
define fn000023B4
fn000023B4_entry:
	// succ:  l000023B4
l000023B4:
	a7 = fp
	a7 = a7 - 0x00000004
	Mem0[a7:word32] = a6
	a6 = a7
	a7 = a7 + 0x00000000
	a7 = a7 - 4
	Mem0[a7:word32] = d5
	a7 = a7 - 4
	Mem0[a7:word32] = d4
	a7 = a7 - 4
	Mem0[a7:word32] = d3
	d5 = -1
	CVZN = cond(d5)
	d4 = Mem0[a6 + 12:word32]
	CVZN = cond(d4)
	d3 = Mem0[a6 + 8:word32]
	CVZN = cond(d3)
	v8 = d4 - d3
	CVZN = cond(v8)
	branch Test(ULE,VZ) l000023DE
	// succ:  l000023CA l000023DE
l000023CA:
	a0 = d3
	d0 = Mem0[a0:word32]
	CVZN = cond(d0)
	branch Test(EQ,Z) l000023D8
	// succ:  l000023D0 l000023D8
l000023D0:
	v13 = d0 - d5
	CVZN = cond(v13)
	branch Test(EQ,Z) l000023D8
	// succ:  l000023D4 l000023D8
l000023D4:
	a0 = d0
	call a0 (retsize: 4;)
	// succ:  l000023D8
l000023D8:
	d3 = d3 + 0x00000004
	CVZNX = cond(d3)
	v15 = d4 - d3
	CVZN = cond(v15)
	branch Test(UGT,CZ) l000023CA
	// succ:  l000023DE l000023CA
l000023DE:
	d3 = Mem0[a7:word32]
	a7 = a7 + 4
	d4 = Mem0[a7:word32]
	a7 = a7 + 4
	d5 = Mem0[a7:word32]
	a7 = a7 + 4
	a7 = a6
	a6 = Mem0[a7:word32]
	a7 = a7 + 0x00000004
	return
	// succ:  fn000023B4_exit
fn000023B4_exit:


// fn000023F8
// Return size: 4
define fn000023F8
fn000023F8_entry:
	// succ:  l000023F8
l000023F8:
	a7 = fp
	a7 = a7 - 0x00000004
	Mem0[a7:word32] = a6
	a6 = a7
	a7 = a7 + 0x00000000
	call fn00002418 (retsize: 4;)
	v4 = Mem0[a6 + 8:word32]
	a7 = a7 - 4
	v5 = v4
	Mem0[a7:word32] = v5
	CVZN = cond(v5)
	call fn0000243C (retsize: 4;)
	a7 = a7 + 4
	a7 = a7 - 0x00000004
	Mem0[a7:word32] = 0x000000FF
	a0 = Mem0[a5 + -1288:word32]
	call a0 (retsize: 4;)
	a7 = a6
	a6 = Mem0[a7:word32]
	a7 = a7 + 0x00000004
	return
	// succ:  fn000023F8_exit
fn000023F8_exit:


// fn00002418
// Return size: 4
define fn00002418
fn00002418_entry:
	// succ:  l00002418
l00002418:
	a7 = fp
	a7 = a7 - 0x00000004
	Mem0[a7:word32] = a6
	a6 = a7
	a7 = a7 + 0x00000000
	a7 = a7 - 0x00000004
	Mem0[a7:word32] = 0x000000FC
	call fn0000243C (retsize: 4;)
	a7 = a7 + 4
	a0 = Mem0[a5 + -1012:word32]
	d0 = a0
	CVZN = cond(d0)
	branch Test(EQ,Z) l00002430
	// succ:  l0000242E l00002430
l0000242E:
	call a0 (retsize: 4;)
	// succ:  l00002430
l00002430:
	a7 = a7 - 0x00000004
	Mem0[a7:word32] = 0x000000FF
	call fn0000243C (retsize: 4;)
	a7 = a6
	a6 = Mem0[a7:word32]
	a7 = a7 + 0x00000004
	return
	// succ:  fn00002418_exit
fn00002418_exit:


// fn0000243C
// Return size: 4
define fn0000243C
fn0000243C_entry:
	// succ:  l0000243C
l0000243C:
	a7 = fp
	a7 = a7 - 0x00000004
	Mem0[a7:word32] = a6
	a6 = a7
	a7 = a7 + 0x00000000
	a7 = a7 - 4
	v5 = a2
	Mem0[a7:word32] = v5
	CVZN = cond(v5)
	a1 = a5 + -1012
	d1 = 0
	CVZN = cond(d1)
	a0 = a5 + -1100
	d2 = a0
	CVZN = cond(d2)
	d0 = Mem0[a6 + 8:word32]
	CVZN = cond(d0)
	// succ:  l00002452
l00002452:
	a0 = d2
	v13 = d0 - Mem0[a0:word32]
	CVZN = cond(v13)
	branch Test(EQ,Z) l00002460
	// succ:  l00002458 l00002460
l00002458:
	d2 = d2 + 0x00000008
	CVZNX = cond(d2)
	d1 = d1 + 0x00000001
	CVZNX = cond(d1)
	v16 = d2 - a1
	CVZN = cond(v16)
	branch Test(ULT,C) l00002452
	// succ:  l00002460 l00002452
l00002460:
	a0 = a5 + -1100
	v18 = d0 - Mem0[a0 + d1 * 8:word32]
	CVZN = cond(v18)
	branch Test(NE,Z) l0000248E
	// succ:  l0000246A l0000248E
l0000246A:
	a0 = a5 + -1096
	a0 = Mem0[a0 + d1 * 8:word32]
	a1 = a0
	a2 = a1 + 1
	// succ:  l00002478
l00002478:
	v19 = Mem0[a1:byte]
	a1 = a1 + 1
	ZN = cond(v19 - 0x00)
	C = false
	V = false
	branch Test(NE,Z) l00002478
	// succ:  l0000247C l00002478
l0000247C:
	a1 = a1 - a2
	CVZNX = cond(a1)
	a7 = a7 - 4
	v22 = a1
	Mem0[a7:word32] = v22
	CVZN = cond(v22)
	a7 = a7 - 4
	v23 = a0
	Mem0[a7:word32] = v23
	CVZN = cond(v23)
	d2 = 2
	CVZN = cond(d2)
	a7 = a7 - 4
	v24 = d2
	Mem0[a7:word32] = v24
	CVZN = cond(v24)
	call a5 + 146 (retsize: 4;)
	a7 = a7 + 12
	// succ:  l0000248E
l0000248E:
	v25 = Mem0[a7:word32]
	a7 = a7 + 4
	a2 = v25
	a7 = a6
	a6 = Mem0[a7:word32]
	a7 = a7 + 0x00000004
	return
	// succ:  fn0000243C_exit
fn0000243C_exit:


// fn000024B0
// Return size: 4
define fn000024B0
fn000024B0_entry:
	// succ:  l000024B0
l000024B0:
	a7 = fp
	a7 = a7 - 0x00000004
	Mem0[a7:word32] = a6
	a6 = a7
	a7 = a7 + 0x00000000
	v5 = Mem0[a5 + -1340:word32]
	a7 = a7 - 4
	v6 = v5
	Mem0[a7:word32] = v6
	CVZN = cond(v6)
	v8 = Mem0[a6 + 8:word32]
	a7 = a7 - 4
	v9 = v8
	Mem0[a7:word32] = v9
	CVZN = cond(v9)
	call fn000024C4 (retsize: 4;)
	a7 = a6
	a6 = Mem0[a7:word32]
	a7 = a7 + 0x00000004
	return
	// succ:  fn000024B0_exit
fn000024B0_exit:


// fn000024C4
// Return size: 4
define fn000024C4
fn000024C4_entry:
	// succ:  l000024C4
l000024C4:
	a7 = fp
	a7 = a7 - 0x00000004
	Mem0[a7:word32] = a6
	a6 = a7
	a7 = a7 + 0x00000000
	a7 = a7 - 4
	v5 = d3
	Mem0[a7:word32] = v5
	CVZN = cond(v5)
	a7 = a7 - 4
	v8 = d4
	Mem0[a7:word32] = v8
	CVZN = cond(v8)
	d3 = Mem0[a6 + 8:word32]
	CVZN = cond(d3)
	d4 = -32
	CVZN = cond(d4)
	v9 = d4 - d3
	CVZN = cond(v9)
	branch Test(UGE,C) l000024E0
	// succ:  l000024D6 l000024E0
l000024D6:
	d0 = 0
	CVZN = cond(d0)
	v12 = Mem0[a7:word32]
	a7 = a7 + 4
	d4 = v12
	CVZN = cond(d4)
	v13 = Mem0[a7:word32]
	a7 = a7 + 4
	d3 = v13
	CVZN = cond(d3)
	a7 = a6
	a6 = Mem0[a7:word32]
	a7 = a7 + 0x00000004
	return
	// succ:  fn000024C4_exit
l000024E0:
	d3 = d3 + 0x00000003
	CVZNX = cond(d3)
	v15 = (word16) d3 & 0xFFFC
	d3 = DPB(d3, v15, 0)
	ZN = cond(v15)
	C = false
	V = false
	d4 = Mem0[a6 + 12:word32]
	CVZN = cond(d4)
	// succ:  l000024EA
l000024EA:
	a7 = a7 - 4
	v18 = d3
	Mem0[a7:word32] = v18
	CVZN = cond(v18)
	call fn00002510 (retsize: 4;)
	a7 = a7 + 4
	ZN = cond(d0 - 0x00000000)
	C = false
	V = false
	branch Test(NE,Z) l00002506
	// succ:  l000024F6 l00002506
l000024F6:
	ZN = cond(d4 - 0x00000000)
	C = false
	V = false
	branch Test(EQ,Z) l00002506
	// succ:  l000024FA l00002506
l000024FA:
	a7 = a7 - 4
	v20 = d3
	Mem0[a7:word32] = v20
	CVZN = cond(v20)
	call fn00002644 (retsize: 4;)
	a7 = a7 + 4
	ZN = cond(d0 - 0x00000000)
	C = false
	V = false
	branch Test(NE,Z) l000024EA
	// succ:  l00002506 l000024EA
l00002506:
	v21 = Mem0[a7:word32]
	a7 = a7 + 4
	d4 = v21
	CVZN = cond(d4)
	v22 = Mem0[a7:word32]
	a7 = a7 + 4
	d3 = v22
	CVZN = cond(d3)
	a7 = a6
	a6 = Mem0[a7:word32]
	a7 = a7 + 0x00000004
	return
	// succ:  fn000024C4_exit
fn000024C4_exit:


// fn00002510
// Return size: 4
define fn00002510
fn00002510_entry:
	// succ:  l00002510
l00002510:
	a7 = fp
	a7 = a7 - 0x00000004
	Mem0[a7:word32] = a6
	a6 = a7
	a7 = a7 + 0x00000000
	a7 = a7 - 4
	v5 = d3
	Mem0[a7:word32] = v5
	CVZN = cond(v5)
	a7 = a7 - 4
	v8 = a2
	Mem0[a7:word32] = v8
	CVZN = cond(v8)
	d3 = Mem0[a6 + 8:word32]
	CVZN = cond(d3)
	a7 = a7 - 4
	v9 = d3
	Mem0[a7:word32] = v9
	CVZN = cond(v9)
	call fn000027B0 (retsize: 4;)
	a7 = a7 + 4
	ZN = cond(d0 - 0x00000000)
	C = false
	V = false
	a2 = d0
	branch Test(NE,Z) l0000254A
	// succ:  l0000252A l0000254A
l0000252A:
	a7 = a7 - 4
	v15 = d3
	Mem0[a7:word32] = v15
	CVZN = cond(v15)
	call fn000028A0 (retsize: 4;)
	a7 = a7 + 4
	d2 = -1
	CVZN = cond(d2)
	v17 = d2 - d0
	CVZN = cond(v17)
	branch Test(EQ,Z) l000025A8
	// succ:  l00002538 l000025A8
l00002538:
	a7 = a7 - 4
	v18 = d3
	Mem0[a7:word32] = v18
	CVZN = cond(v18)
	call fn000027B0 (retsize: 4;)
	a7 = a7 + 4
	ZN = cond(d0 - 0x00000000)
	C = false
	V = false
	a2 = d0
	branch Test(NE,Z) l0000254A
	// succ:  l00002546 l0000254A
l00002546:
	call fn000027A0 (retsize: 4;)
	// succ:  l0000254A
l0000254A:
	a0 = Mem0[a2:word32]
	d0 = Mem0[a0 + 4:word32]
	CVZN = cond(d0)
	v20 = (word16) d0 & 0xFFFC
	d0 = DPB(d0, v20, 0)
	ZN = cond(v20)
	C = false
	V = false
	d1 = Mem0[a2 + 4:word32]
	CVZN = cond(d1)
	v22 = (word16) d1 & 0xFFFC
	d1 = DPB(d1, v22, 0)
	ZN = cond(v22)
	C = false
	V = false
	d0 = d0 - d1
	CVZNX = cond(d0)
	d0 = d0 - d3
	CVZNX = cond(d0)
	d2 = 4
	CVZN = cond(d2)
	v24 = d2 - d0
	CVZN = cond(v24)
	branch Test(EQ,Z) l00002586
	// succ:  l00002566 l00002586
l00002566:
	a7 = a7 - 4
	v25 = d3
	Mem0[a7:word32] = v25
	CVZN = cond(v25)
	a7 = a7 - 4
	v26 = a2
	Mem0[a7:word32] = v26
	CVZN = cond(v26)
	call fn000025B4 (retsize: 4;)
	a7 = a7 + 8
	ZN = cond(d0 - 0x00000000)
	C = false
	V = false
	a0 = d0
	branch Test(EQ,Z) l00002586
	// succ:  l00002576 l00002586
l00002576:
	d0 = Mem0[a0 + 4:word32]
	CVZN = cond(d0)
	Z = __bclr(d0, 0x00000001, out d0)
	Z = __bset(d0, 0x0000, out d0)
	v27 = d0
	Mem0[a0 + 4:word32] = v27
	CVZN = cond(v27)
	// succ:  l00002586
l00002586:
	d0 = Mem0[a2 + 4:word32]
	CVZN = cond(d0)
	v28 = (word16) d0 & 0xFFFC
	d0 = DPB(d0, v28, 0)
	ZN = cond(v28)
	C = false
	V = false
	v29 = d0
	Mem0[a2 + 4:word32] = v29
	CVZN = cond(v29)
	v31 = Mem0[a2:word32]
	Mem0[a5 + -1332:word32] = v31
	CVZN = cond(v31)
	d0 = Mem0[a2 + 4:word32]
	CVZN = cond(d0)
	v32 = (word16) d0 & 0xFFFC
	d0 = DPB(d0, v32, 0)
	ZN = cond(v32)
	C = false
	V = false
	d0 = d0 + 0x00000004
	CVZNX = cond(d0)
	v33 = Mem0[a7:word32]
	a7 = a7 + 4
	a2 = v33
	v34 = Mem0[a7:word32]
	a7 = a7 + 4
	d3 = v34
	CVZN = cond(d3)
	a7 = a6
	a6 = Mem0[a7:word32]
	a7 = a7 + 0x00000004
	return
	// succ:  fn00002510_exit
l000025A8:
	d0 = 0
	CVZN = cond(d0)
	v35 = Mem0[a7:word32]
	a7 = a7 + 4
	a2 = v35
	v36 = Mem0[a7:word32]
	a7 = a7 + 4
	d3 = v36
	CVZN = cond(d3)
	a7 = a6
	a6 = Mem0[a7:word32]
	a7 = a7 + 0x00000004
	return
	// succ:  fn00002510_exit
fn00002510_exit:


// fn000025B4
// Return size: 4
define fn000025B4
fn000025B4_entry:
	// succ:  l000025B4
l000025B4:
	a7 = fp
	a7 = a7 - 0x00000004
	Mem0[a7:word32] = a6
	a6 = a7
	a7 = a7 + 0x00000000
	a7 = a7 - 4
	v5 = a2
	Mem0[a7:word32] = v5
	CVZN = cond(v5)
	a2 = Mem0[a6 + 8:word32]
	a0 = Mem0[a2:word32]
	d0 = Mem0[a0 + 4:word32]
	CVZN = cond(d0)
	v9 = (word16) d0 & 0xFFFC
	d0 = DPB(d0, v9, 0)
	ZN = cond(v9)
	C = false
	V = false
	d1 = Mem0[a2 + 4:word32]
	CVZN = cond(d1)
	v14 = (word16) d1 & 0xFFFC
	d1 = DPB(d1, v14, 0)
	ZN = cond(v14)
	C = false
	V = false
	d0 = d0 - d1
	CVZNX = cond(d0)
	d0 = d0 - 0x00000004
	CVZNX = cond(d0)
	v16 = d0 - Mem0[a6 + 12:word32]
	CVZN = cond(v16)
	branch Test(ULE,VZ) l00002608
	// succ:  l000025DA l00002608
l000025DA:
	call fn0000273C (retsize: 4;)
	ZN = cond(d0 - 0x00000000)
	C = false
	V = false
	a0 = d0
	branch Test(EQ,Z) l00002608
	// succ:  l000025E4 l00002608
l000025E4:
	d0 = Mem0[a2 + 4:word32]
	CVZN = cond(d0)
	v19 = (word16) d0 & 0xFFFC
	d0 = DPB(d0, v19, 0)
	ZN = cond(v19)
	C = false
	V = false
	d0 = d0 + Mem0[a6 + 12:word32]
	CVZNX = cond(d0)
	d0 = d0 + 0x00000004
	CVZNX = cond(d0)
	a1 = d0
	v21 = a1
	Mem0[a0 + 4:word32] = v21
	CVZN = cond(v21)
	v22 = a0
	Mem0[a1:word32] = v22
	CVZN = cond(v22)
	v23 = Mem0[a2:word32]
	Mem0[a0:word32] = v23
	CVZN = cond(v23)
	v24 = a0
	Mem0[a2:word32] = v24
	CVZN = cond(v24)
	d0 = a0
	CVZN = cond(d0)
	v25 = Mem0[a7:word32]
	a7 = a7 + 4
	a2 = v25
	a7 = a6
	a6 = Mem0[a7:word32]
	a7 = a7 + 0x00000004
	return
	// succ:  fn000025B4_exit
l00002608:
	d0 = 0
	CVZN = cond(d0)
	v26 = Mem0[a7:word32]
	a7 = a7 + 4
	a2 = v26
	a7 = a6
	a6 = Mem0[a7:word32]
	a7 = a7 + 0x00000004
	return
	// succ:  fn000025B4_exit
fn000025B4_exit:


// fn00002610
// Return size: 4
define fn00002610
fn00002610_entry:
	// succ:  l00002610
l00002610:
	a7 = fp
	a7 = a7 - 0x00000004
	Mem0[a7:word32] = a6
	a6 = a7
	a7 = a7 + 0x00000000
	d0 = Mem0[a5 + -716:word32]
	CVZN = cond(d0)
	v7 = Mem0[a6 + 8:word32]
	Mem0[a5 + -716:word32] = v7
	CVZN = cond(v7)
	a7 = a6
	a6 = Mem0[a7:word32]
	a7 = a7 + 0x00000004
	return
	// succ:  fn00002610_exit
fn00002610_exit:


// fn00002644
// Return size: 4
define fn00002644
fn00002644_entry:
	// succ:  l00002644
l00002644:
	a7 = fp
	a7 = a7 - 0x00000004
	Mem0[a7:word32] = a6
	a6 = a7
	a7 = a7 + 0x00000000
	a0 = Mem0[a5 + -716:word32]
	d0 = a0
	CVZN = cond(d0)
	branch Test(EQ,Z) l00002664
	// succ:  l00002650 l00002664
l00002650:
	v9 = Mem0[a6 + 8:word32]
	a7 = a7 - 4
	v10 = v9
	Mem0[a7:word32] = v10
	CVZN = cond(v10)
	call a0 (retsize: 4;)
	a7 = a7 + 4
	ZN = cond(d0 - 0x00000000)
	C = false
	V = false
	branch Test(EQ,Z) l00002664
	// succ:  l0000265C l00002664
l0000265C:
	d0 = 1
	CVZN = cond(d0)
	a7 = a6
	a6 = Mem0[a7:word32]
	a7 = a7 + 0x00000004
	return
	// succ:  fn00002644_exit
l00002664:
	d0 = 0
	CVZN = cond(d0)
	a7 = a6
	a6 = Mem0[a7:word32]
	a7 = a7 + 0x00000004
	return
	// succ:  fn00002644_exit
fn00002644_exit:


// fn0000273C
// Return size: 4
define fn0000273C
fn0000273C_entry:
	// succ:  l0000273C
l0000273C:
	a7 = fp
	a7 = a7 - 0x00000004
	Mem0[a7:word32] = a6
	a6 = a7
	a7 = a7 + 0x00000000
	ZN = cond(Mem0[a5 + -1328:word32] - 0x00000000)
	C = false
	V = false
	branch Test(NE,Z) l0000274E
	// succ:  l00002746 l0000274E
l00002746:
	call fn0000275C (retsize: 4;)
	ZN = cond(d0 - 0x00000000)
	C = false
	V = false
	branch Test(EQ,Z) l00002758
	// succ:  l0000274E l00002758
l0000274E:
	d0 = Mem0[a5 + -1328:word32]
	CVZN = cond(d0)
	a0 = d0
	v12 = Mem0[a0:word32]
	Mem0[a5 + -1328:word32] = v12
	CVZN = cond(v12)
	// succ:  l00002758
l00002758:
	a7 = a6
	a6 = Mem0[a7:word32]
	a7 = a7 + 0x00000004
	return
	// succ:  fn0000273C_exit
fn0000273C_exit:


// fn0000275C
// Return size: 4
define fn0000275C
fn0000275C_entry:
	// succ:  l0000275C
l0000275C:
	a7 = fp
	a7 = a7 - 0x00000004
	Mem0[a7:word32] = a6
	a6 = a7
	a7 = a7 + 0x00000000
	d0 = 0x00001000
	CVZN = cond(d0)
	__syscall(0xA11E)
	d2 = a0
	CVZN = cond(d2)
	branch Test(NE,Z) l00002774
	// succ:  l0000276C l00002774
l0000276C:
	d0 = 0
	CVZN = cond(d0)
	a7 = a6
	a6 = Mem0[a7:word32]
	a7 = a7 + 0x00000004
	return
	// succ:  fn0000275C_exit
l00002774:
	d0 = d2
	CVZN = cond(d0)
	v10 = d0
	Mem0[a5 + -1328:word32] = v10
	CVZN = cond(v10)
	d2 = d2 + 0x00000FF8
	CVZNX = cond(d2)
	d1 = d0
	CVZN = cond(d1)
	d1 = d1 + 0x00000008
	CVZNX = cond(d1)
	v13 = d2 - d0
	CVZN = cond(v13)
	branch Test(ULE,VZ) l00002794
	// succ:  l00002788 l00002794
l00002788:
	a0 = d0
	v15 = d1
	Mem0[a0:word32] = v15
	CVZN = cond(v15)
	d0 = d1
	CVZN = cond(d0)
	d1 = d1 + 0x00000008
	CVZNX = cond(d1)
	v16 = d2 - d0
	CVZN = cond(v16)
	branch Test(UGT,CZ) l00002788
	// succ:  l00002794 l00002788
l00002794:
	a0 = d2
	d2 = 0
	CVZN = cond(d2)
	v18 = d2
	Mem0[a0:word32] = v18
	CVZN = cond(v18)
	d0 = 1
	CVZN = cond(d0)
	a7 = a6
	a6 = Mem0[a7:word32]
	a7 = a7 + 0x00000004
	return
	// succ:  fn0000275C_exit
fn0000275C_exit:


// fn000027A0
// Return size: 4
define fn000027A0
fn000027A0_entry:
	// succ:  l000027A0
l000027A0:
	a7 = fp
	a7 = a7 - 0x00000004
	Mem0[a7:word32] = a6
	a6 = a7
	a7 = a7 + 0x00000000
	d2 = 18
	CVZN = cond(d2)
	a7 = a7 - 4
	v6 = d2
	Mem0[a7:word32] = v6
	CVZN = cond(v6)
	call a5 + 90 (retsize: 4;)
	a7 = a6
	a6 = Mem0[a7:word32]
	a7 = a7 + 0x00000004
	return
	// succ:  fn000027A0_exit
fn000027A0_exit:


// fn000027B0
// Return size: 4
define fn000027B0
fn000027B0_entry:
	// succ:  l000027B0
l000027B0:
	a7 = fp
	a7 = a7 - 0x00000004
	Mem0[a7:word32] = a6
	a6 = a7
	a7 = a7 + 0x00000000
	a7 = a7 - 4
	Mem0[a7:word32] = a4
	a7 = a7 - 4
	Mem0[a7:word32] = a3
	a7 = a7 - 4
	Mem0[a7:word32] = a2
	a7 = a7 - 4
	Mem0[a7:word32] = d6
	a7 = a7 - 4
	Mem0[a7:word32] = d5
	a7 = a7 - 4
	Mem0[a7:word32] = d4
	a7 = a7 - 4
	Mem0[a7:word32] = d3
	a3 = a5 + -1324
	d6 = 0x0000FFFC
	CVZN = cond(d6)
	d5 = 1
	CVZN = cond(d5)
	d4 = 3
	CVZN = cond(d4)
	a1 = a1 - a1
	CVZNX = cond(a1)
	a2 = Mem0[a5 + -1332:word32]
	v15 = a3 - a2
	CVZN = cond(v15)
	branch Test(EQ,Z) l00002814
	// succ:  l000027D0 l00002814
l000027D0:
	d2 = Mem0[a6 + 8:word32]
	CVZN = cond(d2)
	// succ:  l000027D4
l000027D4:
	a4 = a2 + 4
	d0 = Mem0[a4:word32]
	CVZN = cond(d0)
	d0 = d0 & d4
	ZN = cond(d0)
	C = false
	V = false
	v22 = d0 - d5
	CVZN = cond(v22)
	branch Test(NE,Z) l0000280C
	// succ:  l000027E0 l0000280C
l000027E0:
	a0 = Mem0[a2:word32]
	d0 = Mem0[a0 + 4:word32]
	CVZN = cond(d0)
	d1 = d0
	CVZN = cond(d1)
	v25 = (word16) d1 & (word16) d6
	d1 = DPB(d1, v25, 0)
	ZN = cond(v25)
	C = false
	V = false
	d3 = Mem0[a4:word32]
	CVZN = cond(d3)
	v26 = (word16) d3 & (word16) d6
	d3 = DPB(d3, v26, 0)
	ZN = cond(v26)
	C = false
	V = false
	d1 = d1 - d3
	CVZNX = cond(d1)
	d1 = d1 - 0x00000004
	CVZNX = cond(d1)
	v27 = d1 - d2
	CVZN = cond(v27)
	branch Test(UGE,C) l00002880
	// succ:  l000027F8 l00002880
l000027F8:
	d0 = d0 & d4
	ZN = cond(d0)
	C = false
	V = false
	v28 = d0 - d5
	CVZN = cond(v28)
	branch Test(NE,Z) l0000280C
	// succ:  l000027FE l0000280C
l000027FE:
	v29 = Mem0[a0:word32]
	Mem0[a2:word32] = v29
	CVZN = cond(v29)
	v30 = Mem0[a5 + -1328:word32]
	Mem0[a0:word32] = v30
	CVZN = cond(v30)
	v31 = a0
	Mem0[a5 + -1328:word32] = v31
	CVZN = cond(v31)
	goto l000027E0
	// succ:  l000027E0
l0000280C:
	a2 = Mem0[a2:word32]
	v47 = a2 - a3
	CVZN = cond(v47)
	branch Test(NE,Z) l000027D4
	// succ:  l00002812 l000027D4
l00002812:
	goto l00002818
	// succ:  l00002818
l00002814:
	d2 = Mem0[a6 + 8:word32]
	CVZN = cond(d2)
	// succ:  l00002818
l00002818:
	d6 = 0x0000FFFC
	CVZN = cond(d6)
	d5 = 1
	CVZN = cond(d5)
	d4 = 3
	CVZN = cond(d4)
	a2 = Mem0[a5 + -1336:word32]
	v32 = a2 - Mem0[a5 + -1332:word32]
	CVZN = cond(v32)
	branch Test(EQ,Z) l00002882
	// succ:  l0000282C l00002882
l0000282C:
	a3 = a2 + 4
	d0 = Mem0[a3:word32]
	CVZN = cond(d0)
	d0 = d0 & d4
	ZN = cond(d0)
	C = false
	V = false
	v33 = d0 - d5
	CVZN = cond(v33)
	branch Test(NE,Z) l0000288C
	// succ:  l00002838 l0000288C
l00002838:
	a0 = Mem0[a2:word32]
	d3 = Mem0[a0 + 4:word32]
	CVZN = cond(d3)
	d0 = d3
	CVZN = cond(d0)
	v34 = (word16) d0 & (word16) d6
	d0 = DPB(d0, v34, 0)
	ZN = cond(v34)
	C = false
	V = false
	d1 = Mem0[a3:word32]
	CVZN = cond(d1)
	v35 = (word16) d1 & (word16) d6
	d1 = DPB(d1, v35, 0)
	ZN = cond(v35)
	C = false
	V = false
	d0 = d0 - d1
	CVZNX = cond(d0)
	d0 = d0 - 0x00000004
	CVZNX = cond(d0)
	v36 = d0 - d2
	CVZN = cond(v36)
	branch Test(UGE,C) l00002880
	// succ:  l0000284E l00002880
l0000284E:
	d3 = d3 & d4
	ZN = cond(d3)
	C = false
	V = false
	v37 = d3 - d5
	CVZN = cond(v37)
	branch Test(NE,Z) l0000288C
	// succ:  l00002854 l0000288C
l00002854:
	v38 = Mem0[a0:word32]
	Mem0[a2:word32] = v38
	CVZN = cond(v38)
	v39 = Mem0[a5 + -1328:word32]
	Mem0[a0:word32] = v39
	CVZN = cond(v39)
	v40 = a0
	Mem0[a5 + -1328:word32] = v40
	CVZN = cond(v40)
	v41 = a0 - Mem0[a5 + -1332:word32]
	CVZN = cond(v41)
	branch Test(NE,Z) l00002838
	// succ:  l00002864 l00002838
l00002864:
	v42 = a2
	Mem0[a5 + -1332:word32] = v42
	CVZN = cond(v42)
	a0 = Mem0[a2:word32]
	d0 = Mem0[a0 + 4:word32]
	CVZN = cond(d0)
	v43 = (word16) d0 & 0xFFFC
	d0 = DPB(d0, v43, 0)
	ZN = cond(v43)
	C = false
	V = false
	d1 = Mem0[a3:word32]
	CVZN = cond(d1)
	v44 = (word16) d1 & 0xFFFC
	d1 = DPB(d1, v44, 0)
	ZN = cond(v44)
	C = false
	V = false
	d0 = d0 - d1
	CVZNX = cond(d0)
	d0 = d0 - 0x00000004
	CVZNX = cond(d0)
	v45 = d0 - d2
	CVZN = cond(v45)
	branch Test(ULT,C) l00002882
	// succ:  l00002880 l00002882
l00002880:
	a1 = a2
	// succ:  l00002882
l00002882:
	d0 = a1
	CVZN = cond(d0)
	d3 = Mem0[a7:word32]
	a7 = a7 + 4
	d4 = Mem0[a7:word32]
	a7 = a7 + 4
	d5 = Mem0[a7:word32]
	a7 = a7 + 4
	d6 = Mem0[a7:word32]
	a7 = a7 + 4
	a2 = Mem0[a7:word32]
	a7 = a7 + 4
	a3 = Mem0[a7:word32]
	a7 = a7 + 4
	a4 = Mem0[a7:word32]
	a7 = a7 + 4
	a7 = a6
	a6 = Mem0[a7:word32]
	a7 = a7 + 0x00000004
	return
	// succ:  fn000027B0_exit
l0000288C:
	a2 = Mem0[a2:word32]
	v46 = a2 - Mem0[a5 + -1332:word32]
	CVZN = cond(v46)
	branch Test(NE,Z) l0000282C
	// succ:  l00002894 l0000282C
l00002894:
	d0 = a1
	CVZN = cond(d0)
	d3 = Mem0[a7:word32]
	a7 = a7 + 4
	d4 = Mem0[a7:word32]
	a7 = a7 + 4
	d5 = Mem0[a7:word32]
	a7 = a7 + 4
	d6 = Mem0[a7:word32]
	a7 = a7 + 4
	a2 = Mem0[a7:word32]
	a7 = a7 + 4
	a3 = Mem0[a7:word32]
	a7 = a7 + 4
	a4 = Mem0[a7:word32]
	a7 = a7 + 4
	a7 = a6
	a6 = Mem0[a7:word32]
	a7 = a7 + 0x00000004
	return
	// succ:  fn000027B0_exit
fn000027B0_exit:


// fn000028A0
// Return size: 4
define fn000028A0
fn000028A0_entry:
	// succ:  l000028A0
l000028A0:
	a7 = fp
	a7 = a7 - 0x00000004
	Mem0[a7:word32] = a6
	a6 = a7
	a7 = a7 + 0x00000000
	a7 = a7 - 4
	Mem0[a7:word32] = a2
	a7 = a7 - 4
	Mem0[a7:word32] = d7
	a7 = a7 - 4
	Mem0[a7:word32] = d6
	a7 = a7 - 4
	Mem0[a7:word32] = d5
	a7 = a7 - 4
	Mem0[a7:word32] = d4
	a7 = a7 - 4
	Mem0[a7:word32] = d3
	a2 = DPB(a2, 0x0010, 0)
	d6 = -1
	CVZN = cond(d6)
	d5 = -1
	CVZN = cond(d5)
	d3 = Mem0[a6 + 8:word32]
	CVZN = cond(d3)
	d3 = d3 + 0x00000004
	CVZNX = cond(d3)
	d3 = d3 + 0x00000003
	CVZNX = cond(d3)
	v12 = (word16) d3 & 0xFFFC
	d3 = DPB(d3, v12, 0)
	ZN = cond(v12)
	C = false
	V = false
	d4 = Mem0[a5 + -1292:word32]
	CVZN = cond(d4)
	v17 = d4 - Mem0[a5 + -1312:word32]
	CVZN = cond(v17)
	branch Test(GE,VN) l0000290E
	// succ:  l000028C6 l0000290E
l000028C6:
	d7 = d4
	CVZN = cond(d7)
	d7 = d7 << 0x00000004
	CVZNX = cond(d7)
	// succ:  l000028CA
l000028CA:
	a0 = Mem0[a5 + -1316:word32]
	a0 = Mem0[a0:word32]
	ZN = cond(Mem0[a0 + d7:word32] - 0x00000000)
	C = false
	V = false
	branch Test(EQ,Z) l000028E4
	// succ:  l000028D6 l000028E4
l000028D6:
	a7 = a7 - 4
	v21 = d3
	Mem0[a7:word32] = v21
	CVZN = cond(v21)
	a7 = a7 - 4
	v22 = d4
	Mem0[a7:word32] = v22
	CVZN = cond(v22)
	call fn00002A54 (retsize: 4;)
	a7 = a7 + 8
	v24 = d0 - d6
	CVZN = cond(v24)
	branch Test(NE,Z) l000028FC
	// succ:  l000028E4 l000028FC
l000028E4:
	a0 = Mem0[a5 + -1316:word32]
	a0 = Mem0[a0:word32]
	ZN = cond(Mem0[a0 + d7:word32] - 0x00000000)
	C = false
	V = false
	branch Test(EQ,Z) l0000290C
	// succ:  l000028F0 l0000290C
l000028F0:
	d7 = d7 + a2
	CVZNX = cond(d7)
	d4 = d4 + 0x00000001
	CVZNX = cond(d4)
	v25 = d4 - Mem0[a5 + -1312:word32]
	CVZN = cond(v25)
	branch Test(LT,CV) l000028CA
	// succ:  l000028FA l000028CA
l000028FA:
	goto l0000290E
	// succ:  l0000290E
l000028FC:
	v50 = d4
	Mem0[a5 + -1292:word32] = v50
	CVZN = cond(v50)
	d0 = 0
	CVZN = cond(d0)
	d3 = Mem0[a7:word32]
	a7 = a7 + 4
	d4 = Mem0[a7:word32]
	a7 = a7 + 4
	d5 = Mem0[a7:word32]
	a7 = a7 + 4
	d6 = Mem0[a7:word32]
	a7 = a7 + 4
	d7 = Mem0[a7:word32]
	a7 = a7 + 4
	a2 = Mem0[a7:word32]
	a7 = a7 + 4
	a7 = a6
	a6 = Mem0[a7:word32]
	a7 = a7 + 0x00000004
	return
	// succ:  fn000028A0_exit
l0000290C:
	d5 = d4
	CVZN = cond(d5)
	// succ:  l0000290E
l0000290E:
	d7 = -1
	CVZN = cond(d7)
	v27 = d7 - d5
	CVZN = cond(v27)
	branch Test(NE,Z) l000029B4
	// succ:  l00002916 l000029B4
l00002916:
	d4 = Mem0[a5 + -1312:word32]
	CVZN = cond(d4)
	d7 = 32
	CVZN = cond(d7)
	d4 = d4 + d7
	CVZNX = cond(d4)
	d4 = d4 << 0x00000004
	CVZNX = cond(d4)
	ZN = cond(Mem0[a5 + -1316:word32] - 0x00000000)
	C = false
	V = false
	branch Test(EQ,Z) l0000292E
	// succ:  l00002926 l0000292E
l00002926:
	d0 = d4
	CVZN = cond(d0)
	a0 = Mem0[a5 + -1316:word32]
	__syscall(0xA024)
	// succ:  l0000292E
l0000292E:
	ZN = cond(Mem0[a5 + -1316:word32] - 0x00000000)
	C = false
	V = false
	branch Test(EQ,Z) l0000293C
	// succ:  l00002934 l0000293C
l00002934:
	a0 = Mem0[a5 + -1296:word32]
	ZN = cond(Mem0[a0:word16] - 0x0000)
	C = false
	V = false
	branch Test(EQ,Z) l00002974
	// succ:  l0000293C l00002974
l0000293C:
	d0 = d4
	CVZN = cond(d0)
	__syscall(0xA122)
	d0 = a0
	CVZN = cond(d0)
	a2 = a0
	branch Test(NE,Z) l00002950
	// succ:  l00002946 l00002950
l00002946:
	d0 = -1
	CVZN = cond(d0)
	d3 = Mem0[a7:word32]
	a7 = a7 + 4
	d4 = Mem0[a7:word32]
	a7 = a7 + 4
	d5 = Mem0[a7:word32]
	a7 = a7 + 4
	d6 = Mem0[a7:word32]
	a7 = a7 + 4
	d7 = Mem0[a7:word32]
	a7 = a7 + 4
	a2 = Mem0[a7:word32]
	a7 = a7 + 4
	a7 = a6
	a6 = Mem0[a7:word32]
	a7 = a7 + 0x00000004
	return
	// succ:  fn000028A0_exit
l00002950:
	a0 = a2
	__syscall(0xA029)
	ZN = cond(Mem0[a5 + -1316:word32] - 0x00000000)
	C = false
	V = false
	branch Test(EQ,Z) l00002970
	// succ:  l0000295A l00002970
l0000295A:
	d0 = Mem0[a5 + -1312:word32]
	CVZN = cond(d0)
	d0 = d0 << 0x00000004
	CVZNX = cond(d0)
	a1 = Mem0[a2:word32]
	a0 = Mem0[a5 + -1316:word32]
	a0 = Mem0[a0:word32]
	__syscall(0xA02E)
	a0 = Mem0[a5 + -1316:word32]
	__syscall(0xA023)
	// succ:  l00002970
l00002970:
	v49 = a2
	Mem0[a5 + -1316:word32] = v49
	CVZN = cond(v49)
	// succ:  l00002974
l00002974:
	d1 = 0
	CVZN = cond(d1)
	d0 = Mem0[a5 + -1312:word32]
	CVZN = cond(d0)
	d0 = d0 << 0x00000004
	CVZNX = cond(d0)
	a0 = Mem0[a5 + -1316:word32]
	a0 = Mem0[a0:word32]
	a0 = a0 + d0
	d0 = 7
	CVZN = cond(d0)
	// succ:  l00002986
l00002986:
	v32 = d1
	Mem0[a0:word32] = v32
	a0 = a0 + 4
	CVZN = cond(v32)
	v33 = d1
	Mem0[a0:word32] = v33
	a0 = a0 + 4
	CVZN = cond(v33)
	v34 = d1
	Mem0[a0:word32] = v34
	a0 = a0 + 4
	CVZN = cond(v34)
	v35 = d1
	Mem0[a0:word32] = v35
	a0 = a0 + 4
	CVZN = cond(v35)
	v36 = d1
	Mem0[a0:word32] = v36
	a0 = a0 + 4
	CVZN = cond(v36)
	v37 = d1
	Mem0[a0:word32] = v37
	a0 = a0 + 4
	CVZN = cond(v37)
	v38 = d1
	Mem0[a0:word32] = v38
	a0 = a0 + 4
	CVZN = cond(v38)
	v39 = d1
	Mem0[a0:word32] = v39
	a0 = a0 + 4
	CVZN = cond(v39)
	v40 = d1
	Mem0[a0:word32] = v40
	a0 = a0 + 4
	CVZN = cond(v40)
	v41 = d1
	Mem0[a0:word32] = v41
	a0 = a0 + 4
	CVZN = cond(v41)
	v42 = d1
	Mem0[a0:word32] = v42
	a0 = a0 + 4
	CVZN = cond(v42)
	v43 = d1
	Mem0[a0:word32] = v43
	a0 = a0 + 4
	CVZN = cond(v43)
	v44 = d1
	Mem0[a0:word32] = v44
	a0 = a0 + 4
	CVZN = cond(v44)
	v45 = d1
	Mem0[a0:word32] = v45
	a0 = a0 + 4
	CVZN = cond(v45)
	v46 = d1
	Mem0[a0:word32] = v46
	a0 = a0 + 4
	CVZN = cond(v46)
	v47 = d1
	Mem0[a0:word32] = v47
	a0 = a0 + 4
	CVZN = cond(v47)
	d0 = d0 - 0x00000001
	branch d0 != 0xFFFFFFFF l00002986
	// succ:  l000029AA l00002986
l000029AA:
	d5 = Mem0[a5 + -1312:word32]
	CVZN = cond(d5)
	d7 = 32
	CVZN = cond(d7)
	v48 = Mem0[a5 + -1312:word32] + d7
	Mem0[a5 + -1312:word32] = v48
	CVZNX = cond(v48)
	// succ:  l000029B4
l000029B4:
	a7 = a7 - 4
	v28 = d3
	Mem0[a7:word32] = v28
	CVZN = cond(v28)
	a7 = a7 - 4
	v29 = d5
	Mem0[a7:word32] = v29
	CVZN = cond(v29)
	call fn000029C8 (retsize: 4;)
	a7 = a7 + 8
	d3 = Mem0[a7:word32]
	a7 = a7 + 4
	d4 = Mem0[a7:word32]
	a7 = a7 + 4
	d5 = Mem0[a7:word32]
	a7 = a7 + 4
	d6 = Mem0[a7:word32]
	a7 = a7 + 4
	d7 = Mem0[a7:word32]
	a7 = a7 + 4
	a2 = Mem0[a7:word32]
	a7 = a7 + 4
	a7 = a6
	a6 = Mem0[a7:word32]
	a7 = a7 + 0x00000004
	return
	// succ:  fn000028A0_exit
fn000028A0_exit:


// fn000029C8
// Return size: 4
define fn000029C8
fn000029C8_entry:
	// succ:  l000029C8
l000029C8:
	a7 = fp
	a7 = a7 - 0x00000004
	Mem0[a7:word32] = a6
	a6 = a7
	a7 = a7 + 0x00000000
	a7 = a7 - 4
	Mem0[a7:word32] = d5
	a7 = a7 - 4
	Mem0[a7:word32] = d4
	a7 = a7 - 4
	Mem0[a7:word32] = d3
	d4 = Mem0[a5 + -1300:word32]
	CVZN = cond(d4)
	d4 = d4 + 0x00000FFF
	CVZNX = cond(d4)
	v10 = (word16) d4 & 0xF000
	d4 = DPB(d4, v10, 0)
	ZN = cond(v10)
	C = false
	V = false
	d3 = Mem0[a6 + 12:word32]
	CVZN = cond(d3)
	v14 = d4 - d3
	CVZN = cond(v14)
	branch Test(UGE,C) l000029E8
	// succ:  l000029E6 l000029E8
l000029E6:
	d4 = d3
	CVZN = cond(d4)
	// succ:  l000029E8
l000029E8:
	d0 = d4
	CVZN = cond(d0)
	d0 = d0 + 0x00000004
	CVZNX = cond(d0)
	__syscall(0xA11E)
	d0 = a0
	CVZN = cond(d0)
	branch Test(EQ,Z) l00002A4A
	// succ:  l000029F2 l00002A4A
l000029F2:
	a1 = Mem0[a5 + -1316:word32]
	a1 = Mem0[a1:word32]
	v19 = (word16) d0 & 0x0003
	d0 = DPB(d0, v19, 0)
	ZN = cond(v19)
	C = false
	V = false
	branch Test(EQ,Z) l00002A14
	// succ:  l000029FE l00002A14
l000029FE:
	d0 = a0
	CVZN = cond(d0)
	d0 = d0 + 0x00000003
	CVZNX = cond(d0)
	v20 = (word16) d0 & 0xFFFC
	d0 = DPB(d0, v20, 0)
	ZN = cond(v20)
	C = false
	V = false
	d5 = Mem0[a6 + 8:word32]
	CVZN = cond(d5)
	d1 = d5
	CVZN = cond(d1)
	d1 = d1 << 0x00000004
	CVZNX = cond(d1)
	v22 = d0
	Mem0[a0 + d1:word32] = v22
	CVZN = cond(v22)
	goto l00002A20
	// succ:  l00002A20
l00002A14:
	d5 = Mem0[a6 + 8:word32]
	CVZN = cond(d5)
	d0 = d5
	CVZN = cond(d0)
	d0 = d0 << 0x00000004
	CVZNX = cond(d0)
	v23 = a0
	Mem0[a0 + d0:word32] = v23
	CVZN = cond(v23)
	// succ:  l00002A20
l00002A20:
	d0 = d5
	CVZN = cond(d0)
	d0 = d0 << 0x00000004
	CVZNX = cond(d0)
	a1 = a1 + d0
	v24 = a0
	Mem0[a1 + 12:word32] = v24
	CVZN = cond(v24)
	v25 = d4
	Mem0[a1 + 8:word32] = v25
	CVZN = cond(v25)
	d4 = 0
	CVZN = cond(d4)
	v26 = d4
	Mem0[a1 + 4:word32] = v26
	CVZN = cond(v26)
	a7 = a7 - 4
	v27 = d3
	Mem0[a7:word32] = v27
	CVZN = cond(v27)
	a7 = a7 - 4
	v28 = d5
	Mem0[a7:word32] = v28
	CVZN = cond(v28)
	call fn00002A54 (retsize: 4;)
	a7 = a7 + 8
	ZN = cond(d0 - 0x00000000)
	C = false
	V = false
	branch Test(EQ,Z) l00002A4C
	// succ:  l00002A42 l00002A4C
l00002A42:
	a7 = a7 - 4
	v29 = d5
	Mem0[a7:word32] = v29
	CVZN = cond(v29)
	call fn00002AE0 (retsize: 4;)
	a7 = a7 + 4
	// succ:  l00002A4A
l00002A4A:
	d0 = -1
	CVZN = cond(d0)
	// succ:  l00002A4C
l00002A4C:
	d3 = Mem0[a7:word32]
	a7 = a7 + 4
	d4 = Mem0[a7:word32]
	a7 = a7 + 4
	d5 = Mem0[a7:word32]
	a7 = a7 + 4
	a7 = a6
	a6 = Mem0[a7:word32]
	a7 = a7 + 0x00000004
	return
	// succ:  fn000029C8_exit
fn000029C8_exit:


// fn00002A54
// Return size: 4
define fn00002A54
fn00002A54_entry:
	// succ:  l00002A54
l00002A54:
	a7 = fp
	a7 = a7 - 0x00000004
	Mem0[a7:word32] = a6
	a6 = a7
	a7 = a7 + 0x00000000
	a7 = a7 - 4
	Mem0[a7:word32] = a2
	a7 = a7 - 4
	Mem0[a7:word32] = d5
	a7 = a7 - 4
	Mem0[a7:word32] = d4
	a7 = a7 - 4
	Mem0[a7:word32] = d3
	d5 = Mem0[a6 + 8:word32]
	CVZN = cond(d5)
	d5 = d5 << 0x00000004
	CVZNX = cond(d5)
	a0 = Mem0[a5 + -1316:word32]
	a2 = Mem0[a0:word32]
	a2 = a2 + d5
	d4 = Mem0[a2 + 8:word32]
	CVZN = cond(d4)
	d1 = Mem0[a2 + 4:word32]
	CVZN = cond(d1)
	d0 = d4
	CVZN = cond(d0)
	d0 = d0 - d1
	CVZNX = cond(d0)
	a0 = Mem0[a2:word32]
	a1 = a0
	a1 = a1 + d1
	d3 = Mem0[a6 + 12:word32]
	CVZN = cond(d3)
	d3 = d3 + 0x00000003
	CVZNX = cond(d3)
	v15 = (word16) d3 & 0xFFFC
	d3 = DPB(d3, v15, 0)
	ZN = cond(v15)
	C = false
	V = false
	v19 = d3 - d0
	CVZN = cond(v19)
	branch Test(ULE,VZ) l00002ABE
	// succ:  l00002A8A l00002ABE
l00002A8A:
	d4 = d4 - d0
	CVZNX = cond(d4)
	d4 = d4 + d3
	CVZNX = cond(d4)
	d4 = d4 + 0x00000004
	CVZNX = cond(d4)
	v21 = (word16) d4 & 0xFFFC
	d4 = DPB(d4, v21, 0)
	ZN = cond(v21)
	C = false
	V = false
	d0 = d4
	CVZN = cond(d0)
	__syscall(0xA020)
	a0 = Mem0[a5 + -1316:word32]
	a2 = Mem0[a0:word32]
	a2 = a2 + d5
	a0 = Mem0[a5 + -1296:word32]
	ZN = cond(Mem0[a0:word16] - 0x0000)
	C = false
	V = false
	branch Test(EQ,Z) l00002AB4
	// succ:  l00002AA8 l00002AB4
l00002AA8:
	d0 = -1
	CVZN = cond(d0)
	d3 = Mem0[a7:word32]
	a7 = a7 + 4
	d4 = Mem0[a7:word32]
	a7 = a7 + 4
	d5 = Mem0[a7:word32]
	a7 = a7 + 4
	a2 = Mem0[a7:word32]
	a7 = a7 + 4
	a7 = a6
	a6 = Mem0[a7:word32]
	a7 = a7 + 0x00000004
	return
	// succ:  fn00002A54_exit
l00002AB4:
	v26 = d4
	Mem0[a2 + 8:word32] = v26
	CVZN = cond(v26)
	a1 = Mem0[a2:word32]
	a1 = a1 + Mem0[a2 + 4:word32]
	// succ:  l00002ABE
l00002ABE:
	v23 = Mem0[a2 + 4:word32] + d3
	Mem0[a2 + 4:word32] = v23
	CVZNX = cond(v23)
	a7 = a7 - 4
	v24 = d3
	Mem0[a7:word32] = v24
	CVZN = cond(v24)
	a7 = a7 - 4
	v25 = a1
	Mem0[a7:word32] = v25
	CVZN = cond(v25)
	call fn00002BB4 (retsize: 4;)
	a7 = a7 + 8
	ZN = cond(d0 - 0x00000000)
	C = false
	V = false
	branch Test(EQ,Z) l00002AD4
	// succ:  l00002AD0 l00002AD4
l00002AD0:
	call fn000027A0 (retsize: 4;)
	// succ:  l00002AD4
l00002AD4:
	d0 = 0
	CVZN = cond(d0)
	d3 = Mem0[a7:word32]
	a7 = a7 + 4
	d4 = Mem0[a7:word32]
	a7 = a7 + 4
	d5 = Mem0[a7:word32]
	a7 = a7 + 4
	a2 = Mem0[a7:word32]
	a7 = a7 + 4
	a7 = a6
	a6 = Mem0[a7:word32]
	a7 = a7 + 0x00000004
	return
	// succ:  fn00002A54_exit
fn00002A54_exit:


// fn00002AE0
// Return size: 4
define fn00002AE0
fn00002AE0_entry:
	// succ:  l00002AE0
l00002AE0:
	a7 = fp
	a7 = a7 - 0x00000004
	Mem0[a7:word32] = a6
	a6 = a7
	a7 = a7 + 0x00000000
	a7 = a7 - 4
	v5 = d3
	Mem0[a7:word32] = v5
	CVZN = cond(v5)
	a0 = Mem0[a5 + -1316:word32]
	a0 = Mem0[a0:word32]
	d3 = Mem0[a6 + 8:word32]
	CVZN = cond(d3)
	d3 = d3 << 0x00000004
	CVZNX = cond(d3)
	ZN = cond(Mem0[a0 + d3:word32] - 0x00000000)
	C = false
	V = false
	branch Test(EQ,Z) l00002AFE
	// succ:  l00002AF8 l00002AFE
l00002AF8:
	a0 = Mem0[a0 + 12 + d3:word32]
	__syscall(0xA01F)
	// succ:  l00002AFE
l00002AFE:
	a0 = Mem0[a5 + -1316:word32]
	a0 = Mem0[a0:word32]
	d2 = 0
	CVZN = cond(d2)
	v16 = d2
	Mem0[a2 + d3:word32] = v16
	CVZN = cond(v16)
	v17 = d2
	Mem0[a2 + 4 + d3:word32] = v17
	CVZN = cond(v17)
	v18 = d2
	Mem0[a2 + 8 + d3:word32] = v18
	CVZN = cond(v18)
	v19 = Mem0[a7:word32]
	a7 = a7 + 4
	d3 = v19
	CVZN = cond(d3)
	a7 = a6
	a6 = Mem0[a7:word32]
	a7 = a7 + 0x00000004
	return
	// succ:  fn00002AE0_exit
fn00002AE0_exit:


// fn00002B18
// Return size: 4
define fn00002B18
fn00002B18_entry:
	// succ:  l00002B18
l00002B18:
	a7 = fp
	a7 = a7 - 0x00000004
	Mem0[a7:word32] = a6
	a6 = a7
	a7 = a7 + 0x00000000
	a7 = a7 - 4
	v5 = a2
	Mem0[a7:word32] = v5
	CVZN = cond(v5)
	d0 = Mem0[a6 + 8:word32]
	CVZN = cond(d0)
	branch Test(EQ,Z) l00002B78
	// succ:  l00002B24 l00002B78
l00002B24:
	d0 = d0 - 0x00000004
	CVZNX = cond(d0)
	a0 = d0
	a2 = Mem0[a0:word32]
	d1 = Mem0[a2 + 4:word32]
	CVZN = cond(d1)
	v12 = (word16) d1 & 0xFFFC
	d1 = DPB(d1, v12, 0)
	ZN = cond(v12)
	C = false
	V = false
	v16 = d1 - a0
	CVZN = cond(v16)
	branch Test(EQ,Z) l00002B3A
	// succ:  l00002B36 l00002B3A
l00002B36:
	call fn000027A0 (retsize: 4;)
	// succ:  l00002B3A
l00002B3A:
	d0 = Mem0[a2 + 4:word32]
	CVZN = cond(d0)
	Z = __bclr(d0, 0x00000001, out d0)
	Z = __bset(d0, 0x0000, out d0)
	v18 = d0
	Mem0[a2 + 4:word32] = v18
	CVZN = cond(v18)
	d2 = -1
	CVZN = cond(d2)
	v21 = d2 - Mem0[a5 + -1308:word32]
	CVZN = cond(v21)
	branch Test(EQ,Z) l00002B78
	// succ:  l00002B52 l00002B78
l00002B52:
	a0 = Mem0[a5 + -1332:word32]
	v22 = d0 - Mem0[a0 + 4:word32]
	CVZN = cond(v22)
	branch Test(UGE,C) l00002B78
	// succ:  l00002B5C l00002B78
l00002B5C:
	a0 = Mem0[a2:word32]
	d1 = Mem0[a0 + 4:word32]
	CVZN = cond(d1)
	v23 = (word16) d1 & 0xFFFC
	d1 = DPB(d1, v23, 0)
	ZN = cond(v23)
	C = false
	V = false
	v24 = (word16) d0 & 0xFFFC
	d0 = DPB(d0, v24, 0)
	ZN = cond(v24)
	C = false
	V = false
	d1 = d1 - d0
	CVZNX = cond(d1)
	d1 = d1 - 0x00000004
	CVZNX = cond(d1)
	v25 = d1 - Mem0[a5 + -1308:word32]
	CVZN = cond(v25)
	branch Test(ULT,C) l00002B78
	// succ:  l00002B74 l00002B78
l00002B74:
	v26 = a2
	Mem0[a5 + -1332:word32] = v26
	CVZN = cond(v26)
	// succ:  l00002B78
l00002B78:
	v17 = Mem0[a7:word32]
	a7 = a7 + 4
	a2 = v17
	a7 = a6
	a6 = Mem0[a7:word32]
	a7 = a7 + 0x00000004
	return
	// succ:  fn00002B18_exit
fn00002B18_exit:


// fn00002BB4
// Return size: 4
define fn00002BB4
fn00002BB4_entry:
	// succ:  l00002BB4
l00002BB4:
	a7 = fp
	a7 = a7 - 0x00000004
	Mem0[a7:word32] = a6
	a6 = a7
	a7 = a7 - 0x00000018
	a7 = a7 - 4
	v5 = a2
	Mem0[a7:word32] = v5
	CVZN = cond(v5)
	a7 = a7 - 4
	v8 = a3
	Mem0[a7:word32] = v8
	CVZN = cond(v8)
	d2 = 0
	CVZN = cond(d2)
	v10 = d2
	Mem0[a6 + -20:word32] = v10
	CVZN = cond(v10)
	v11 = d2
	Mem0[a6 + -16:word32] = v11
	CVZN = cond(v11)
	v12 = d2
	Mem0[a6 + -12:word32] = v12
	CVZN = cond(v12)
	v13 = d2
	Mem0[a6 + -8:word32] = v13
	CVZN = cond(v13)
	a0 = a6 + -20
	v15 = a0
	Mem0[a6 + -24:word32] = v15
	CVZN = cond(v15)
	call fn0000273C (retsize: 4;)
	v17 = d0
	Mem0[a6 + -20:word32] = v17
	CVZN = cond(v17)
	branch Test(EQ,Z) l00002DE8
	// succ:  l00002BE2 l00002DE8
l00002BE2:
	call fn0000273C (retsize: 4;)
	v19 = d0
	Mem0[a6 + -16:word32] = v19
	CVZN = cond(v19)
	branch Test(EQ,Z) l00002DE8
	// succ:  l00002BEE l00002DE8
l00002BEE:
	call fn0000273C (retsize: 4;)
	v20 = d0
	Mem0[a6 + -12:word32] = v20
	CVZN = cond(v20)
	branch Test(EQ,Z) l00002DE8
	// succ:  l00002BFA l00002DE8
l00002BFA:
	a7 = a7 - 0x00000004
	Mem0[a7:word32] = a6 + -4
	a2 = Mem0[a6 + 8:word32]
	a7 = a7 - 4
	v21 = a2
	Mem0[a7:word32] = v21
	CVZN = cond(v21)
	call fn00002EA8 (retsize: 4;)
	a7 = a7 + 8
	ZN = cond(d0 - 0x00000000)
	C = false
	V = false
	branch Test(NE,Z) l00002C28
	// succ:  l00002C0E l00002C28
l00002C0E:
	a0 = Mem0[a6 + -4:word32]
	d1 = Mem0[a0 + 4:word32]
	CVZN = cond(d1)
	d2 = 3
	CVZN = cond(d2)
	d1 = d1 & d2
	ZN = cond(d1)
	C = false
	V = false
	d2 = 2
	CVZN = cond(d2)
	v26 = d2 - d1
	CVZN = cond(v26)
	branch Test(NE,Z) l00002DE8
	// succ:  l00002C22 l00002DE8
l00002C22:
	a3 = a0
	goto l00002C32
	// succ:  l00002C32
l00002C28:
	a0 = Mem0[a6 + -24:word32]
	a3 = Mem0[a0:word32]
	v46 = Mem0[a6 + -24:word32] + 0x00000004
	Mem0[a6 + -24:word32] = v46
	CVZNX = cond(v46)
	// succ:  l00002C32
l00002C32:
	v34 = a2
	Mem0[a3 + 4:word32] = v34
	CVZN = cond(v34)
	d1 = a2
	CVZN = cond(d1)
	Z = __bclr(d1, 0x00000001, out d1)
	Z = __bset(d1, 0x0000, out d1)
	v35 = d1
	Mem0[a3 + 4:word32] = v35
	CVZN = cond(v35)
	v36 = a3
	Mem0[a2:word32] = v36
	CVZN = cond(v36)
	d0 = d0 + 0x00000003
	CVZNX = cond(d0)
	d2 = 3
	CVZN = cond(d2)
	v37 = d2 - d0
	CVZN = cond(v37)
	branch Test(ULT,C) l00002C60
	// succ:  l00002C4E l00002C60
l00002C4E:
	v38 = Mem0[0x00002C58 + (int32) ((int16) d0) * 2:word16]
	d0 = DPB(d0, v38, 0)
	CVZN = cond(v38)
	call 0x00002C58 + (int32) ((int16) d0) (retsize: 4;)
	return
	// succ:  fn00002BB4_exit
l00002C60:
	a0 = Mem0[a6 + -4:word32]
	d0 = Mem0[a0 + 4:word32]
	CVZN = cond(d0)
	d2 = 3
	CVZN = cond(d2)
	d0 = d0 & d2
	ZN = cond(d0)
	C = false
	V = false
	d1 = 2
	CVZN = cond(d1)
	v39 = d1 - d0
	CVZN = cond(v39)
	branch Test(NE,Z) l00002DE8
	// succ:  l00002C74 l00002DE8
l00002C74:
	a1 = a5 + -1324
	v41 = a1 - Mem0[a0:word32]
	CVZN = cond(v41)
	branch Test(NE,Z) l00002C92
	// succ:  l00002C7C l00002C92
l00002C7C:
	d0 = Mem0[a3 + 4:word32]
	CVZN = cond(d0)
	v42 = (word16) d0 & 0xFFFC
	d0 = DPB(d0, v42, 0)
	ZN = cond(v42)
	C = false
	V = false
	d0 = d0 + Mem0[a6 + 12:word32]
	CVZNX = cond(d0)
	v43 = d0 - Mem0[a5 + -1320:word32]
	CVZN = cond(v43)
	branch Test(ULE,VZ) l00002C92
	// succ:  l00002C8E l00002C92
l00002C8E:
	v45 = d0
	Mem0[a5 + -1320:word32] = v45
	CVZN = cond(v45)
	// succ:  l00002C92
l00002C92:
	a7 = a7 - 0x00000004
	Mem0[a7:word32] = a6 + -24
	a0 = Mem0[a6 + -4:word32]
	v47 = Mem0[a0:word32]
	a7 = a7 - 4
	v48 = v47
	Mem0[a7:word32] = v48
	CVZN = cond(v48)
	v49 = Mem0[a6 + 12:word32]
	a7 = a7 - 4
	v50 = v49
	Mem0[a7:word32] = v50
	CVZN = cond(v50)
	a7 = a7 - 4
	v51 = a3
	Mem0[a7:word32] = v51
	CVZN = cond(v51)
	call fn00002E18 (retsize: 4;)
	a7 = a7 + 16
	a7 = a7 - 0x00000004
	Mem0[a7:word32] = a6 + -24
	a7 = a7 - 4
	v52 = a3
	Mem0[a7:word32] = v52
	CVZN = cond(v52)
	a0 = Mem0[a6 + -4:word32]
	a0 = Mem0[a0:word32]
	d0 = Mem0[a0 + 4:word32]
	CVZN = cond(d0)
	v53 = (word16) d0 & 0xFFFC
	d0 = DPB(d0, v53, 0)
	ZN = cond(v53)
	C = false
	V = false
	a0 = Mem0[a6 + -4:word32]
	d1 = Mem0[a0 + 4:word32]
	CVZN = cond(d1)
	v54 = (word16) d1 & 0xFFFC
	d1 = DPB(d1, v54, 0)
	ZN = cond(v54)
	C = false
	V = false
	d0 = d0 - d1
	CVZNX = cond(d0)
	a7 = a7 - 4
	v55 = d0
	Mem0[a7:word32] = v55
	CVZN = cond(v55)
	a7 = a7 - 4
	v56 = a0
	Mem0[a7:word32] = v56
	CVZN = cond(v56)
	// succ:  l00002DA4
l00002DA4:
	call fn00002E18 (retsize: 4;)
	a7 = a7 + 16
	a0 = Mem0[a5 + -1332:word32]
	d0 = Mem0[a0 + 4:word32]
	CVZN = cond(d0)
	v57 = (word16) d0 & 0xFFFC
	d0 = DPB(d0, v57, 0)
	ZN = cond(v57)
	C = false
	V = false
	v58 = d0 - a2
	CVZN = cond(v58)
	branch Test(ULE,VZ) l00002DDC
	// succ:  l00002DBC l00002DDC
l00002DBC:
	a0 = Mem0[a3:word32]
	d0 = Mem0[a0 + 4:word32]
	CVZN = cond(d0)
	v59 = (word16) d0 & 0xFFFC
	d0 = DPB(d0, v59, 0)
	ZN = cond(v59)
	C = false
	V = false
	d1 = Mem0[a3 + 4:word32]
	CVZN = cond(d1)
	v60 = (word16) d1 & 0xFFFC
	d1 = DPB(d1, v60, 0)
	ZN = cond(v60)
	C = false
	V = false
	d0 = d0 - d1
	CVZNX = cond(d0)
	d0 = d0 - 0x00000004
	CVZNX = cond(d0)
	v61 = d0 - Mem0[a5 + -1308:word32]
	CVZN = cond(v61)
	branch Test(ULT,C) l00002DDC
	// succ:  l00002DD8 l00002DDC
l00002DD8:
	v62 = a3
	Mem0[a5 + -1332:word32] = v62
	CVZN = cond(v62)
	// succ:  l00002DDC
l00002DDC:
	d0 = 0
	CVZN = cond(d0)
	v63 = Mem0[a7:word32]
	a7 = a7 + 4
	a3 = v63
	v64 = Mem0[a7:word32]
	a7 = a7 + 4
	a2 = v64
	a7 = a6
	a6 = Mem0[a7:word32]
	a7 = a7 + 0x00000004
	return
	// succ:  fn00002BB4_exit
l00002DE8:
	a0 = Mem0[a6 + -24:word32]
	ZN = cond(Mem0[a0:word32] - 0x00000000)
	C = false
	V = false
	branch Test(EQ,Z) l00002E0E
	// succ:  l00002DF0 l00002E0E
l00002DF0:
	a0 = Mem0[a6 + -24:word32]
	a0 = Mem0[a0:word32]
	v28 = Mem0[a5 + -1328:word32]
	Mem0[a0:word32] = v28
	CVZN = cond(v28)
	a0 = Mem0[a6 + -24:word32]
	v29 = Mem0[a0:word32]
	Mem0[a5 + -1328:word32] = v29
	CVZN = cond(v29)
	v30 = Mem0[a6 + -24:word32] + 0x00000004
	Mem0[a6 + -24:word32] = v30
	CVZNX = cond(v30)
	a0 = Mem0[a6 + -24:word32]
	ZN = cond(Mem0[a0:word32] - 0x00000000)
	C = false
	V = false
	branch Test(NE,Z) l00002DF0
	// succ:  l00002E0E l00002DF0
l00002E0E:
	d0 = -1
	CVZN = cond(d0)
	v32 = Mem0[a7:word32]
	a7 = a7 + 4
	a3 = v32
	v33 = Mem0[a7:word32]
	a7 = a7 + 4
	a2 = v33
	a7 = a6
	a6 = Mem0[a7:word32]
	a7 = a7 + 0x00000004
	return
	// succ:  fn00002BB4_exit
fn00002BB4_exit:


// fn00002E18
// Return size: 4
define fn00002E18
fn00002E18_entry:
	// succ:  l00002E18
l00002E18:
	a7 = fp
	a7 = a7 - 0x00000004
	Mem0[a7:word32] = a6
	a6 = a7
	a7 = a7 + 0x00000000
	a7 = a7 - 4
	v5 = a2
	Mem0[a7:word32] = v5
	CVZN = cond(v5)
	a7 = a7 - 4
	v8 = a3
	Mem0[a7:word32] = v8
	CVZN = cond(v8)
	a2 = Mem0[a6 + 8:word32]
	d2 = Mem0[a2 + 4:word32]
	CVZN = cond(d2)
	d0 = d2
	CVZN = cond(d0)
	d1 = 3
	CVZN = cond(d1)
	d0 = d0 & d1
	ZN = cond(d0)
	C = false
	V = false
	d1 = 2
	CVZN = cond(d1)
	v15 = d1 - d0
	CVZN = cond(v15)
	branch Test(EQ,Z) l00002E9A
	// succ:  l00002E34 l00002E9A
l00002E34:
	a0 = Mem0[a6 + 16:word32]
	a0 = a0 + 4
	d1 = Mem0[a0:word32]
	CVZN = cond(d1)
	d0 = d1
	CVZN = cond(d0)
	d0 = d0 & 0x00000003
	ZN = cond(d0)
	C = false
	V = false
	v18 = d0 - 0x00000002
	CVZN = cond(v18)
	branch Test(NE,Z) l00002E6C
	// succ:  l00002E4C l00002E6C
l00002E4C:
	v19 = (word16) d2 & 0xFFFC
	d2 = DPB(d2, v19, 0)
	ZN = cond(v19)
	C = false
	V = false
	d2 = d2 + Mem0[a6 + 12:word32]
	CVZNX = cond(d2)
	v21 = d2
	Mem0[a0:word32] = v21
	CVZN = cond(v21)
	Z = __bclr(d2, 0x00000000, out d2)
	Z = __bset(d2, 0x0001, out d2)
	v22 = d2
	Mem0[a0:word32] = v22
	CVZN = cond(v22)
	v23 = Mem0[a6 + 16:word32]
	Mem0[a2:word32] = v23
	CVZN = cond(v23)
	v24 = Mem0[a7:word32]
	a7 = a7 + 4
	a3 = v24
	v25 = Mem0[a7:word32]
	a7 = a7 + 4
	a2 = v25
	a7 = a6
	a6 = Mem0[a7:word32]
	a7 = a7 + 0x00000004
	return
	// succ:  fn00002E18_exit
l00002E6C:
	v29 = (word16) d2 & 0xFFFC
	d2 = DPB(d2, v29, 0)
	ZN = cond(v29)
	C = false
	V = false
	d2 = d2 + Mem0[a6 + 12:word32]
	CVZNX = cond(d2)
	v30 = (word16) d1 & 0xFFFC
	d1 = DPB(d1, v30, 0)
	ZN = cond(v30)
	C = false
	V = false
	v31 = d1 - d2
	CVZN = cond(v31)
	branch Test(EQ,Z) l00002E9A
	// succ:  l00002E7C l00002E9A
l00002E7C:
	a1 = Mem0[a6 + 20:word32]
	a0 = Mem0[a1:word32]
	v33 = Mem0[a0:word32]
	a0 = a0 + 4
	a3 = v33
	v34 = a0
	Mem0[a1:word32] = v34
	CVZN = cond(v34)
	v35 = d2
	Mem0[a3 + 4:word32] = v35
	CVZN = cond(v35)
	Z = __bclr(d2, 0x00000000, out d2)
	Z = __bset(d2, 0x0001, out d2)
	v36 = d2
	Mem0[a3 + 4:word32] = v36
	CVZN = cond(v36)
	v37 = a3
	Mem0[a2:word32] = v37
	CVZN = cond(v37)
	a2 = a3
	// succ:  l00002E9A
l00002E9A:
	v26 = Mem0[a6 + 16:word32]
	Mem0[a2:word32] = v26
	CVZN = cond(v26)
	v27 = Mem0[a7:word32]
	a7 = a7 + 4
	a3 = v27
	v28 = Mem0[a7:word32]
	a7 = a7 + 4
	a2 = v28
	a7 = a6
	a6 = Mem0[a7:word32]
	a7 = a7 + 0x00000004
	return
	// succ:  fn00002E18_exit
fn00002E18_exit:


// fn00002EA8
// Return size: 4
define fn00002EA8
fn00002EA8_entry:
	// succ:  l00002EA8
l00002EA8:
	a7 = fp
	a7 = a7 - 0x00000004
	Mem0[a7:word32] = a6
	a6 = a7
	a7 = a7 + 0x00000000
	a0 = a5 + -1324
	v6 = a0 - Mem0[a5 + -1336:word32]
	CVZN = cond(v6)
	branch Test(NE,Z) l00002EBC
	// succ:  l00002EB6 l00002EBC
l00002EB6:
	d0 = -3
	CVZN = cond(d0)
	a7 = a6
	a6 = Mem0[a7:word32]
	a7 = a7 + 0x00000004
	return
	// succ:  fn00002EA8_exit
l00002EBC:
	a0 = Mem0[a5 + -1336:word32]
	d0 = Mem0[a0 + 4:word32]
	CVZN = cond(d0)
	v10 = (word16) d0 & 0xFFFC
	d0 = DPB(d0, v10, 0)
	ZN = cond(v10)
	C = false
	V = false
	d2 = Mem0[a6 + 8:word32]
	CVZN = cond(d2)
	v15 = d0 - d2
	CVZN = cond(v15)
	branch Test(ULE,VZ) l00002ED8
	// succ:  l00002ED0 l00002ED8
l00002ED0:
	d0 = -1
	CVZN = cond(d0)
	a7 = a6
	a6 = Mem0[a7:word32]
	a7 = a7 + 0x00000004
	return
	// succ:  fn00002EA8_exit
l00002ED8:
	d0 = Mem0[a5 + -1320:word32]
	CVZN = cond(d0)
	v17 = (word16) d0 & 0xFFFC
	d0 = DPB(d0, v17, 0)
	ZN = cond(v17)
	C = false
	V = false
	v18 = d0 - d2
	CVZN = cond(v18)
	branch Test(UGT,CZ) l00002EEC
	// succ:  l00002EE4 l00002EEC
l00002EE4:
	d0 = -2
	CVZN = cond(d0)
	a7 = a6
	a6 = Mem0[a7:word32]
	a7 = a7 + 0x00000004
	return
	// succ:  fn00002EA8_exit
l00002EEC:
	d0 = 0x0000FFFC
	CVZN = cond(d0)
	a1 = Mem0[a5 + -1336:word32]
	// succ:  l00002EF6
l00002EF6:
	a0 = Mem0[a1:word32]
	d1 = Mem0[a0 + 4:word32]
	CVZN = cond(d1)
	v22 = (word16) d1 & (word16) d0
	d1 = DPB(d1, v22, 0)
	ZN = cond(v22)
	C = false
	V = false
	v23 = d1 - d2
	CVZN = cond(v23)
	branch Test(UGT,CZ) l00002F08
	// succ:  l00002F02 l00002F08
l00002F02:
	a1 = a0
	goto l00002EF6
	// succ:  l00002EF6
l00002F08:
	a0 = Mem0[a6 + 12:word32]
	v24 = a1
	Mem0[a0:word32] = v24
	CVZN = cond(v24)
	d0 = 0
	CVZN = cond(d0)
	d1 = Mem0[a1 + 4:word32]
	CVZN = cond(d1)
	v25 = (word16) d1 & 0xFFFC
	d1 = DPB(d1, v25, 0)
	ZN = cond(v25)
	C = false
	V = false
	v26 = d1 - d2
	CVZN = cond(v26)
	branch Test(EQ,Z) l00002F1E
	// succ:  l00002F1C l00002F1E
l00002F1C:
	d0 = 1
	CVZN = cond(d0)
	// succ:  l00002F1E
l00002F1E:
	a7 = a6
	a6 = Mem0[a7:word32]
	a7 = a7 + 0x00000004
	return
	// succ:  fn00002EA8_exit
fn00002EA8_exit:


// fn00003340
// Return size: 4
define fn00003340
fn00003340_entry:
	// succ:  l00003340
l00003340:
	a7 = fp
	a7 = a7 - 0x00000004
	Mem0[a7:word32] = a6
	a6 = a7
	a7 = a7 + 0x00000000
	a1 = a5 + -1100
	v7 = Mem0[a6 + 10:word16]
	d1 = DPB(d1, v7, 0)
	CVZN = cond(v7)
	v10 = (word16) d1
	d0 = DPB(d0, v10, 0)
	CVZN = cond(v10)
	d0 = (int32) (int16) d0
	ZN = cond(d0)
	v12 = d0
	Mem0[a5 + -1728:word32] = v12
	CVZN = cond(v12)
	d2 = 0
	CVZN = cond(d2)
	a0 = a5 + -1284
	d0 = a0
	CVZN = cond(d0)
	// succ:  l0000335C
l0000335C:
	a0 = d0
	v15 = (word16) d1 - Mem0[a0:word16]
	CVZN = cond(v15)
	branch Test(EQ,Z) l00003374
	// succ:  l00003362 l00003374
l00003362:
	d0 = d0 + 0x00000004
	CVZNX = cond(d0)
	d2 = d2 + 0x00000001
	CVZNX = cond(d2)
	v18 = d0 - a1
	CVZN = cond(v18)
	branch Test(ULT,C) l0000335C
	// succ:  l0000336A l0000335C
l0000336A:
	d0 = 22
	CVZN = cond(d0)
	v20 = d0
	Mem0[a5 + -1732:word32] = v20
	CVZN = cond(v20)
	a7 = a6
	a6 = Mem0[a7:word32]
	a7 = a7 + 0x00000004
	return
	// succ:  fn00003340_exit
l00003374:
	a0 = a5 + -1282
	d0 = 0
	CVZN = cond(d0)
	v21 = Mem0[a0 + d2 * 4:word16]
	d0 = DPB(d0, v21, 0)
	CVZN = cond(v21)
	v22 = d0
	Mem0[a5 + -1732:word32] = v22
	CVZN = cond(v22)
	a7 = a6
	a6 = Mem0[a7:word32]
	a7 = a7 + 0x00000004
	return
	// succ:  fn00003340_exit
fn00003340_exit:


