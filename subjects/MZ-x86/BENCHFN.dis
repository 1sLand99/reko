// __exit
// Return size: 0
define __exit
fn0800_0121_entry:
	// succ:  l0800_0121
l0800_0121:
	sp = fp
	Top = 0
	ds = Mem0[0x0800:0x01F8:selector]
	call __restorezero (retsize: 2;)
	sp = sp - 2
	call SEQ(0x0800, Mem0[ds:0x05DC:word16]) (retsize: 2;)
	ax = ax ^ ax
	SZO = cond(ax)
	C = false
	si = ax
	cx = 0x002F
	D = false
	// succ:  l0800_0137
l0800_0137:
	al = al + Mem0[ds:si:byte]
	SCZO = cond(al)
	ah = ah + 0x00 + C
	SCZO = cond(ah)
	si = si + 0x0001
	SZO = cond(si)
	cx = cx - 0x0001
	branch cx != 0x0000 l0800_0137
	// succ:  l0800_013F l0800_0137
l0800_013F:
	ax = ax - 0x0D37
	SCZO = cond(ax)
	branch Test(EQ,Z) l0800_014F
	// succ:  l0800_0145 l0800_014F
l0800_0145:
	cx = 0x0019
	dx = 0x002F
	call fn0800_01DA (retsize: 2;)
	// succ:  l0800_014F
l0800_014F:
	bp = sp
	ah = 0x4C
	al = Mem0[ss:bp + 0x0002:byte]
	msdos_terminate(al)
fn0800_0121_exit:


// fn0800_0162
// Return size: 2
define fn0800_0162
fn0800_0162_entry:
	// succ:  l0800_0162
l0800_0162:
	sp = fp
	Top = 0
	sp = sp - 2
	Mem0[ss:sp:word16] = ds
	ax = 0x3500
	es_bx = msdos_get_interrupt_vector(al)
	Mem0[ds:0x0074:word16] = bx
	Mem0[ds:0x0076:word16] = es
	ax = 0x3504
	es_bx = msdos_get_interrupt_vector(al)
	Mem0[ds:0x0078:word16] = bx
	Mem0[ds:0x007A:word16] = es
	ax = 0x3505
	es_bx = msdos_get_interrupt_vector(al)
	Mem0[ds:0x007C:word16] = bx
	Mem0[ds:0x007E:word16] = es
	ax = 0x3506
	es_bx = msdos_get_interrupt_vector(al)
	Mem0[ds:0x0080:word16] = bx
	Mem0[ds:0x0082:word16] = es
	ax = 0x2500
	dx = cs
	ds = dx
	dx = 0x0158
	msdos_set_interrupt_vector(al, ds_dx)
	ds = Mem0[ss:sp:selector]
	sp = sp + 2
	return
	// succ:  fn0800_0162_exit
fn0800_0162_exit:


// __restorezero
// Return size: 2
define __restorezero
fn0800_01A5_entry:
	// succ:  l0800_01A5
l0800_01A5:
	sp = fp
	Top = 0
	sp = sp - 2
	Mem0[ss:sp:word16] = ds
	ax = 0x2500
	ds_dx = Mem0[ds:0x0074:segptr32]
	msdos_set_interrupt_vector(al, ds_dx)
	ds = Mem0[ss:sp:selector]
	sp = sp + 2
	sp = sp - 2
	Mem0[ss:sp:word16] = ds
	ax = 0x2504
	ds_dx = Mem0[ds:0x0078:segptr32]
	msdos_set_interrupt_vector(al, ds_dx)
	ds = Mem0[ss:sp:selector]
	sp = sp + 2
	sp = sp - 2
	Mem0[ss:sp:word16] = ds
	ax = 0x2505
	ds_dx = Mem0[ds:0x007C:segptr32]
	msdos_set_interrupt_vector(al, ds_dx)
	ds = Mem0[ss:sp:selector]
	sp = sp + 2
	sp = sp - 2
	Mem0[ss:sp:word16] = ds
	ax = 0x2506
	ds_dx = Mem0[ds:0x0080:segptr32]
	msdos_set_interrupt_vector(al, ds_dx)
	ds = Mem0[ss:sp:selector]
	sp = sp + 2
	return
	// succ:  fn0800_01A5_exit
fn0800_01A5_exit:


// fn0800_01DA
// Return size: 2
define fn0800_01DA
fn0800_01DA_entry:
	// succ:  l0800_01DA
l0800_01DA:
	sp = fp
	Top = 0
	ah = 0x40
	bx = 0x0002
	C = msdos_write_file(bx, cx, ds_dx, out ax)
	return
	// succ:  fn0800_01DA_exit
fn0800_01DA_exit:


// _abort
// Return size: 2
define _abort
fn0800_01E2_entry:
	// succ:  l0800_01E2
l0800_01E2:
	sp = fp
	Top = 0
	cx = 0x001E
	dx = 0x0056
	ds = Mem0[0x0800:0x01F8:selector]
	call fn0800_01DA (retsize: 2;)
	ax = 0x0003
	sp = sp - 2
	Mem0[ss:sp:word16] = ax
	call __exit (retsize: 2;)
	v11 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v11
	SCZO = cond(v11)
	// succ:  l0800_01F8_thunk__f3
l0800_01F8_thunk__f3:
	call _f3 (retsize: 0;)
	return
	// succ:  fn0800_01E2_exit
fn0800_01E2_exit:


// fn0800_01E9
// Return size: 2
define fn0800_01E9
fn0800_01E9_entry:
	// succ:  l0800_01E9
l0800_01E9:
	sp = fp
	Top = 0
	ds = Mem0[0x0800:0x01F8:selector]
	call fn0800_01DA (retsize: 2;)
	ax = 0x0003
	sp = sp - 2
	Mem0[ss:sp:word16] = ax
	call __exit (retsize: 2;)
	v9 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v9
	SCZO = cond(v9)
	// succ:  l0800_01F8_thunk__f3
l0800_01F8_thunk__f3:
	call _f3 (retsize: 0;)
	return
	// succ:  fn0800_01E9_exit
fn0800_01E9_exit:


// _f3
// Return size: 2
define _f3
_f3_entry:
	// succ:  l0800_01FA
l0800_01FA:
	sp = fp
	Top = 0
	sp = sp - 2
	Mem0[ss:sp:word16] = bp
	bp = sp
	bp = Mem0[ss:sp:word16]
	sp = sp + 2
	return
	// succ:  _f3_exit
_f3_exit:


// _f2
// Return size: 2
define _f2
_f2_entry:
	// succ:  l0800_01FF
l0800_01FF:
	sp = fp
	Top = 0
	sp = sp - 2
	Mem0[ss:sp:word16] = bp
	bp = sp
	call _f3 (retsize: 2;)
	call _f3 (retsize: 2;)
	call _f3 (retsize: 2;)
	call _f3 (retsize: 2;)
	call _f3 (retsize: 2;)
	call _f3 (retsize: 2;)
	call _f3 (retsize: 2;)
	call _f3 (retsize: 2;)
	call _f3 (retsize: 2;)
	call _f3 (retsize: 2;)
	bp = Mem0[ss:sp:word16]
	sp = sp + 2
	return
	// succ:  _f2_exit
_f2_exit:


// fn0800_0222
// Return size: 2
define fn0800_0222
fn0800_0222_entry:
	// succ:  l0800_0222
l0800_0222:
	sp = fp
	Top = 0
	sp = sp - 2
	Mem0[ss:sp:word16] = bp
	bp = sp
	call _f2 (retsize: 2;)
	call _f2 (retsize: 2;)
	call _f2 (retsize: 2;)
	call _f2 (retsize: 2;)
	call _f2 (retsize: 2;)
	call _f2 (retsize: 2;)
	call _f2 (retsize: 2;)
	call _f2 (retsize: 2;)
	call _f2 (retsize: 2;)
	call _f2 (retsize: 2;)
	bp = Mem0[ss:sp:word16]
	sp = sp + 2
	return
	// succ:  fn0800_0222_exit
fn0800_0222_exit:


// _f0
// Return size: 2
define _f0
_f0_entry:
	// succ:  l0800_0245
l0800_0245:
	sp = fp
	Top = 0
	sp = sp - 2
	Mem0[ss:sp:word16] = bp
	bp = sp
	call fn0800_0222 (retsize: 2;)
	call fn0800_0222 (retsize: 2;)
	call fn0800_0222 (retsize: 2;)
	call fn0800_0222 (retsize: 2;)
	call fn0800_0222 (retsize: 2;)
	call fn0800_0222 (retsize: 2;)
	call fn0800_0222 (retsize: 2;)
	call fn0800_0222 (retsize: 2;)
	call fn0800_0222 (retsize: 2;)
	bp = Mem0[ss:sp:word16]
	sp = sp + 2
	return
	// succ:  _f0_exit
_f0_exit:


// _main
// Return size: 2
define _main
_main_entry:
	// succ:  l0800_0265
l0800_0265:
	sp = fp
	Top = 0
	sp = sp - 2
	Mem0[ss:sp:word16] = bp
	bp = sp
	sp = sp - 0x0008
	SCZO = cond(sp)
	ax = 0x0194
	sp = sp - 2
	Mem0[ss:sp:word16] = ax
	call _printf (retsize: 2;)
	cx = Mem0[ss:sp:word16]
	sp = sp + 2
	ax = bp - 0x0004
	sp = sp - 2
	Mem0[ss:sp:word16] = ax
	ax = 0x01B0
	sp = sp - 2
	Mem0[ss:sp:word16] = ax
	call _scanf (retsize: 2;)
	cx = Mem0[ss:sp:word16]
	sp = sp + 2
	cx = Mem0[ss:sp:word16]
	sp = sp + 2
	v8 = Mem0[ss:bp - 0x0002:word16]
	sp = sp - 2
	Mem0[ss:sp:word16] = v8
	v9 = Mem0[ss:bp - 0x0004:word16]
	sp = sp - 2
	Mem0[ss:sp:word16] = v9
	ax = 0x01B4
	sp = sp - 2
	Mem0[ss:sp:word16] = ax
	call _printf (retsize: 2;)
	sp = sp + 0x0006
	SCZO = cond(sp)
	Mem0[ss:bp - 0x0006:word16] = 0x0000
	Mem0[ss:bp - 0x0008:word16] = 0x0001
	goto l0800_02A7
	// succ:  l0800_02A7
l0800_029C:
	call _f0 (retsize: 2;)
	v14 = Mem0[ss:bp - 0x0008:word16] + 0x0001
	Mem0[ss:bp - 0x0008:word16] = v14
	SCZO = cond(v14)
	v16 = Mem0[ss:bp - 0x0006:word16] + 0x00 + C
	Mem0[ss:bp - 0x0006:word16] = v16
	SCZO = cond(v16)
	// succ:  l0800_02A7
l0800_02A7:
	dx = Mem0[ss:bp - 0x0006:word16]
	ax = Mem0[ss:bp - 0x0008:word16]
	SCZO = cond(dx - Mem0[ss:bp - 0x0002:word16])
	branch Test(LT,SO) l0800_029C
	// succ:  l0800_02B2 l0800_029C
l0800_02B2:
	branch Test(GT,SZO) l0800_02B9
	// succ:  l0800_02B4 l0800_02B9
l0800_02B4:
	SCZO = cond(ax - Mem0[ss:bp - 0x0004:word16])
	branch Test(ULE,CZ) l0800_029C
	// succ:  l0800_02B9 l0800_029C
l0800_02B9:
	ax = 0x01CE
	sp = sp - 2
	Mem0[ss:sp:word16] = ax
	call _printf (retsize: 2;)
	cx = Mem0[ss:sp:word16]
	sp = sp + 2
	sp = bp
	bp = Mem0[ss:sp:word16]
	sp = sp + 2
	return
	// succ:  _main_exit
_main_exit:


// __IOERROR
// Return size: 2
define __IOERROR
fn0800_02C5_entry:
	// succ:  l0800_02C5
l0800_02C5:
	sp = fp
	Top = 0
	sp = sp - 2
	Mem0[ss:sp:word16] = bp
	bp = sp
	sp = sp - 2
	Mem0[ss:sp:word16] = si
	si = Mem0[ss:bp + 0x0004:word16]
	si = si | si
	SZO = cond(si)
	C = false
	branch Test(LT,SO) l0800_02E4
	// succ:  l0800_02D0 l0800_02E4
l0800_02D0:
	SCZO = cond(si - 0x0058)
	branch Test(ULE,CZ) l0800_02D8
	// succ:  l0800_02D5 l0800_02D8
l0800_02D5:
	si = 0x0057
	// succ:  l0800_02D8
l0800_02D8:
	Mem0[ds:0x01D8:word16] = si
	al = Mem0[ds:si + 0x01DA:byte]
	ax = (int16) al
	v14 = ax
	ax = si
	si = v14
	goto l0800_02F1
	// succ:  l0800_02F1
l0800_02E4:
	si = -si
	SCZO = cond(si)
	C = si == 0x0000
	SCZO = cond(si - 0x0023)
	branch Test(UGT,CZ) l0800_02D5
	// succ:  l0800_02EB l0800_02D5
l0800_02EB:
	Mem0[ds:0x01D8:word16] = 0xFFFF
	// succ:  l0800_02F1
l0800_02F1:
	ax = si
	Mem0[ds:0x0094:word16] = ax
	ax = 0xFFFF
	// succ:  l0800_02FB
l0800_02FB:
	si = Mem0[ss:sp:word16]
	sp = sp + 2
	bp = Mem0[ss:sp:word16]
	sp = sp + 2
	return
	// succ:  fn0800_02C5_exit
fn0800_02C5_exit:


// _exit
// Return size: 2
define _exit
fn0800_0301_entry:
	// succ:  l0800_0301
l0800_0301:
	sp = fp
	Top = 0
	sp = sp - 2
	Mem0[ss:sp:word16] = bp
	bp = sp
	goto l0800_0310
	// succ:  l0800_0310
l0800_0306:
	bx = Mem0[ds:0x023E:word16]
	bx = bx << 0x0001
	SCZO = cond(bx)
	call SEQ(0x0800, Mem0[ds:bx + 0x05E8:word16]) (retsize: 2;)
	// succ:  l0800_0310
l0800_0310:
	ax = Mem0[ds:0x023E:word16]
	v7 = Mem0[ds:0x023E:word16] - 0x0001
	Mem0[ds:0x023E:word16] = v7
	SZO = cond(v7)
	ax = ax | ax
	SZO = cond(ax)
	C = false
	branch Test(NE,Z) l0800_0306
	// succ:  l0800_031B l0800_0306
l0800_031B:
	call SEQ(0x0800, Mem0[ds:0x0234:word16]) (retsize: 2;)
	call SEQ(0x0800, Mem0[ds:0x0236:word16]) (retsize: 2;)
	call SEQ(0x0800, Mem0[ds:0x0238:word16]) (retsize: 2;)
	v11 = Mem0[ss:bp + 0x0004:word16]
	sp = sp - 2
	Mem0[ss:sp:word16] = v11
	call __exit (retsize: 2;)
	cx = Mem0[ss:sp:word16]
	sp = sp + 2
	bp = Mem0[ss:sp:word16]
	sp = sp + 2
	return
	// succ:  fn0800_0301_exit
fn0800_0301_exit:


// __setargv
// Return size: 2
define __setargv
fn0800_0336_entry:
	// succ:  l0800_0336
l0800_0336:
	sp = fp
	Top = 0
	Mem0[0x0800:0x0330:word16] = Mem0[ss:sp:word16]
	sp = sp + 2
	Mem0[0x0800:0x0332:word16] = ds
	D = false
	es = Mem0[ds:0x0090:selector]
	si = 0x0080
	ah = ah ^ ah
	SZO = cond(ah)
	C = false
	al = Mem0[ds:si:byte]
	si = si + 0x0001
	ax = ax + 0x0001
	SZO = cond(ax)
	bp = es
	v14 = si
	si = dx
	dx = v14
	v16 = ax
	ax = bx
	bx = v16
	si = Mem0[ds:0x008A:word16]
	si = si + 0x0002
	SCZO = cond(si)
	cx = 0x0001
	SCZO = cond(Mem0[ds:0x0092:byte] - 0x03)
	branch Test(ULT,C) l0800_0374
	// succ:  l0800_0363 l0800_0374
l0800_0363:
	es = Mem0[ds:0x008C:selector]
	di = si
	cl = 0x7F
	al = al ^ al
	SZO = cond(al)
	C = false
	// succ:  l0800_036D
l0800_036D:
	branch cx == 0x0000 l0800_036F
	// succ:  l0800_036D_1 l0800_036F
l0800_036D_1:
	SCZO = cond(al - Mem0[es:di:byte])
	di = di + 0x0001
	cx = cx - 0x0001
	branch Test(EQ,Z) l0800_036D
	// succ:  l0800_036F l0800_036D
l0800_036F:
	branch cx == 0x0000 l0800_03E7
	goto l0800_0371
	// succ:  l0800_0371 l0800_036F_thunk_fn0800_03E7
l0800_036F_thunk_fn0800_03E7:
	call fn0800_03E7 (retsize: 0;)
	return
	// succ:  fn0800_0336_exit
l0800_0371:
	cl = cl ^ 0x7F
	SZO = cond(cl)
	C = false
	// succ:  l0800_0374
l0800_0374:
	sp = sp - 0x0002
	SCZO = cond(sp)
	ax = 0x0001
	ax = ax + bx
	SCZO = cond(ax)
	ax = ax + cx
	SCZO = cond(ax)
	ax = ax & 0xFFFE
	SZO = cond(ax)
	C = false
	di = sp
	di = di - ax
	SCZO = cond(di)
	branch Test(ULT,C) l0800_03E7
	goto l0800_0387
	// succ:  l0800_0387 l0800_0385_thunk_fn0800_03E7
l0800_0385_thunk_fn0800_03E7:
	call fn0800_03E7 (retsize: 0;)
	return
	// succ:  fn0800_0336_exit
l0800_0387:
	sp = di
	ax = es
	ds = ax
	ax = ss
	es = ax
	sp = sp - 2
	Mem0[ss:sp:word16] = cx
	cx = cx - 0x0001
	SZO = cond(cx)
	// succ:  l0800_0392_thunk_fn0800_0393
l0800_0392_thunk_fn0800_0393:
	call fn0800_0393 (retsize: 0;)
	return
	// succ:  fn0800_0336_exit
fn0800_0336_exit:


// fn0800_038D
// Return size: 0
define fn0800_038D
fn0800_038D_entry:
	// succ:  l0800_038D
l0800_038D:
	sp = fp
	Top = 0
	ax = ss
	es = ax
	sp = sp - 2
	Mem0[ss:sp:word16] = cx
	cx = cx - 0x0001
	SZO = cond(cx)
	// succ:  l0800_0392_thunk_fn0800_0393
l0800_0392_thunk_fn0800_0393:
	call fn0800_0393 (retsize: 0;)
	return
	// succ:  fn0800_038D_exit
fn0800_038D_exit:


// fn0800_0393
// Return size: 0
define fn0800_0393
fn0800_0393_entry:
	// succ:  l0800_0393
l0800_0393:
	sp = v4
	Top = 0
	branch cx == 0x0000 l0800_0395
	// succ:  l0800_0393_1 l0800_0395
l0800_0393_1:
	v8 = Mem0[ds:si:byte]
	Mem0[es:di:byte] = v8
	si = si + 0x0001
	di = di + 0x0001
	cx = cx - 0x0001
	goto l0800_0393
	// succ:  l0800_0393
l0800_0395:
	al = al ^ al
	SZO = cond(al)
	C = false
	Mem0[es:di:byte] = al
	di = di + 0x0001
	ds = bp
	v16 = dx
	dx = si
	si = v16
	v17 = cx
	cx = bx
	bx = v17
	ax = bx
	dx = ax
	bx = bx + 0x0001
	SZO = cond(bx)
	// succ:  l0800_03A3
l0800_03A3:
	call fn0800_03BF (retsize: 2;)
	branch Test(UGT,CZ) l0800_03AF
	// succ:  l0800_03A8 l0800_03AF
l0800_03A8:
	branch Test(ULT,C) l0800_03EA
	// succ:  l0800_03AA l0800_03EA
l0800_03AA:
	call fn0800_03BF (retsize: 2;)
	branch Test(UGT,CZ) l0800_03A8
	// succ:  l0800_03AF l0800_03A8
l0800_03AF:
	SCZO = cond(al - 0x20)
	branch Test(EQ,Z) l0800_03BB
	// succ:  l0800_03B3 l0800_03BB
l0800_03B3:
	SCZO = cond(al - 0x0D)
	branch Test(EQ,Z) l0800_03BB
	// succ:  l0800_03B7 l0800_03BB
l0800_03B7:
	SCZO = cond(al - 0x09)
	branch Test(NE,Z) l0800_03A3
	// succ:  l0800_03BB l0800_03A3
l0800_03BB:
	al = al ^ al
	SZO = cond(al)
	C = false
	goto l0800_03A3
	// succ:  l0800_03A3
l0800_03EA:
	cx = Mem0[ss:sp:word16]
	sp = sp + 2
	cx = cx + dx
	SCZO = cond(cx)
	ds = Mem0[0x0800:0x0332:selector]
	Mem0[ds:0x0084:word16] = bx
	bx = bx + 0x0001
	SZO = cond(bx)
	bx = bx + bx
	SCZO = cond(bx)
	si = sp
	bp = sp
	bp = bp - bx
	SCZO = cond(bp)
	branch Test(ULT,C) l0800_03E7
	goto l0800_0401
	// succ:  l0800_0401 l0800_03FF_thunk_fn0800_03E7
l0800_03FF_thunk_fn0800_03E7:
	call fn0800_03E7 (retsize: 0;)
	return
	// succ:  fn0800_0393_exit
l0800_0401:
	sp = bp
	Mem0[ds:0x0086:word16] = bp
	// succ:  l0800_0407
l0800_0407:
	branch cx == 0x0000 l0800_0417
	// succ:  l0800_0409 l0800_0417
l0800_0409:
	Mem0[ss:bp + 0x0000:word16] = si
	bp = bp + 0x0002
	SCZO = cond(bp)
	// succ:  l0800_040F
l0800_040F:
	al = Mem0[ds:si:byte]
	si = si + 0x0001
	al = al | al
	SZO = cond(al)
	C = false
	cx = cx - 0x0001
	branch Test(NE,Z) && cx != 0x0000 l0800_040F
	// succ:  l0800_0415 l0800_040F
l0800_0415:
	branch Test(EQ,Z) l0800_0407
	// succ:  l0800_0417 l0800_0407
l0800_0417:
	ax = ax ^ ax
	SZO = cond(ax)
	C = false
	Mem0[ss:bp + 0x0000:word16] = ax
	call Mem0[0x0800:0x0330:word16] (retsize: 2;)
	return
	// succ:  fn0800_0393_exit
fn0800_0393_exit:


// fn0800_03BF
// Return size: 2
define fn0800_03BF
fn0800_03BF_entry:
	// succ:  l0800_03BF
l0800_03BF:
	sp = fp
	Top = 0
	ax = ax | ax
	SZO = cond(ax)
	C = false
	branch Test(EQ,Z) l0800_03CA
	// succ:  l0800_03C3 l0800_03CA
l0800_03C3:
	dx = dx + 0x0001
	SZO = cond(dx)
	Mem0[es:di:byte] = al
	di = di + 0x0001
	al = al | al
	SZO = cond(al)
	C = false
	branch Test(NE,Z) l0800_03CA
	// succ:  l0800_03C9 l0800_03CA
l0800_03C9:
	bx = bx + 0x0001
	SZO = cond(bx)
	// succ:  l0800_03CA
l0800_03CA:
	v12 = al
	al = ah
	ah = v12
	al = al ^ al
	SZO = cond(al)
	C = false
	C = true
	branch cx == 0x0000 l0800_03E6
	// succ:  l0800_03D1 l0800_03E6
l0800_03D1:
	al = Mem0[ds:si:byte]
	si = si + 0x0001
	cx = cx - 0x0001
	SZO = cond(cx)
	al = al - 0x22
	SCZO = cond(al)
	branch Test(EQ,Z) l0800_03E6
	// succ:  l0800_03D7 l0800_03E6
l0800_03D7:
	al = al + 0x22
	SCZO = cond(al)
	SCZO = cond(al - 0x5C)
	branch Test(NE,Z) l0800_03E4
	// succ:  l0800_03DD l0800_03E4
l0800_03DD:
	SCZO = cond(Mem0[ds:si:byte] - 0x22)
	branch Test(NE,Z) l0800_03E4
	// succ:  l0800_03E2 l0800_03E4
l0800_03E2:
	al = Mem0[ds:si:byte]
	si = si + 0x0001
	cx = cx - 0x0001
	SZO = cond(cx)
	// succ:  l0800_03E4
l0800_03E4:
	si = si | si
	SZO = cond(si)
	C = false
	// succ:  l0800_03E6
l0800_03E6:
	return
	// succ:  fn0800_03BF_exit
fn0800_03BF_exit:


// fn0800_03E7
// Return size: 0
define fn0800_03E7
fn0800_03E7_entry:
	// succ:  l0800_03E7
l0800_03E7:
	sp = fp
	Top = 0
	// succ:  l0800_03E7_thunk__abort
l0800_03E7_thunk__abort:
	call _abort (retsize: 0;)
	return
	// succ:  fn0800_03E7_exit
fn0800_03E7_exit:


// __setenvp
// Return size: 2
define __setenvp
fn0800_0421_entry:
	// succ:  l0800_0421
l0800_0421:
	sp = fp
	Top = 0
	cx = Mem0[ds:0x008A:word16]
	sp = sp - 2
	Mem0[ss:sp:word16] = cx
	call _malloc (retsize: 2;)
	cx = Mem0[ss:sp:word16]
	sp = sp + 2
	di = ax
	ax = ax | ax
	SZO = cond(ax)
	C = false
	branch Test(EQ,Z) l0800_0454
	// succ:  l0800_0430 l0800_0454
l0800_0430:
	sp = sp - 2
	Mem0[ss:sp:word16] = ds
	sp = sp - 2
	Mem0[ss:sp:word16] = ds
	es = Mem0[ss:sp:selector]
	sp = sp + 2
	ds = Mem0[ds:0x008C:selector]
	si = si ^ si
	SZO = cond(si)
	C = false
	D = false
	// succ:  l0800_043A
l0800_043A:
	branch cx == 0x0000 l0800_043C
	// succ:  l0800_043A_1 l0800_043C
l0800_043A_1:
	v14 = Mem0[ds:si:byte]
	Mem0[es:di:byte] = v14
	si = si + 0x0001
	di = di + 0x0001
	cx = cx - 0x0001
	goto l0800_043A
	// succ:  l0800_043A
l0800_043C:
	ds = Mem0[ss:sp:selector]
	sp = sp + 2
	di = ax
	sp = sp - 2
	Mem0[ss:sp:word16] = es
	v15 = Mem0[ds:0x008E:word16]
	sp = sp - 2
	Mem0[ss:sp:word16] = v15
	call _malloc (retsize: 2;)
	sp = sp + 0x0002
	SCZO = cond(sp)
	bx = ax
	es = Mem0[ss:sp:selector]
	sp = sp + 2
	Mem0[ds:0x0088:word16] = ax
	ax = ax | ax
	SZO = cond(ax)
	C = false
	branch Test(NE,Z) l0800_0457
	// succ:  l0800_0454 l0800_0457
l0800_0454:
	// succ:  l0800_0454_thunk__abort
l0800_0454_thunk__abort:
	call _abort (retsize: 0;)
	return
	// succ:  fn0800_0421_exit
l0800_0457:
	ax = ax ^ ax
	SZO = cond(ax)
	C = false
	cx = 0xFFFF
	// succ:  l0800_045C
l0800_045C:
	Mem0[ds:bx:word16] = di
	bx = bx + 0x0002
	SCZO = cond(bx)
	// succ:  l0800_0461
l0800_0461:
	branch cx == 0x0000 l0800_0463
	// succ:  l0800_0461_1 l0800_0463
l0800_0461_1:
	SCZO = cond(al - Mem0[es:di:byte])
	di = di + 0x0001
	cx = cx - 0x0001
	branch Test(EQ,Z) l0800_0461
	// succ:  l0800_0463 l0800_0461
l0800_0463:
	SCZO = cond(Mem0[es:di:byte] - al)
	branch Test(NE,Z) l0800_045C
	// succ:  l0800_0468 l0800_045C
l0800_0468:
	Mem0[ds:bx:word16] = ax
	return
	// succ:  fn0800_0421_exit
fn0800_0421_exit:


// ___pull_free_block
// Return size: 2
define ___pull_free_block
fn0800_0491_entry:
	// succ:  l0800_0491
l0800_0491:
	sp = fp
	Top = 0
	sp = sp - 2
	Mem0[ss:sp:word16] = bp
	bp = sp
	sp = sp - 2
	Mem0[ss:sp:word16] = si
	sp = sp - 2
	Mem0[ss:sp:word16] = di
	di = Mem0[ss:bp + 0x0004:word16]
	ax = Mem0[ds:di + 0x0006:word16]
	Mem0[ds:0x062A:word16] = ax
	SCZO = cond(ax - di)
	branch Test(NE,Z) l0800_04AB
	// succ:  l0800_04A3 l0800_04AB
l0800_04A3:
	Mem0[ds:0x062A:word16] = 0x0000
	goto l0800_04BB
	// succ:  l0800_04BB
l0800_04AB:
	si = Mem0[ds:di + 0x0004:word16]
	bx = Mem0[ds:0x062A:word16]
	Mem0[ds:bx + 0x0004:word16] = si
	ax = Mem0[ds:0x062A:word16]
	Mem0[ds:si + 0x0006:word16] = ax
	// succ:  l0800_04BB
l0800_04BB:
	di = Mem0[ss:sp:word16]
	sp = sp + 2
	si = Mem0[ss:sp:word16]
	sp = sp + 2
	bp = Mem0[ss:sp:word16]
	sp = sp + 2
	return
	// succ:  fn0800_0491_exit
fn0800_0491_exit:


// fn0800_04BF
// Return size: 2
define fn0800_04BF
fn0800_04BF_entry:
	// succ:  l0800_04BF
l0800_04BF:
	sp = fp
	Top = 0
	sp = sp - 2
	Mem0[ss:sp:word16] = bp
	bp = sp
	sp = sp - 2
	Mem0[ss:sp:word16] = si
	sp = sp - 2
	Mem0[ss:sp:word16] = di
	di = Mem0[ss:bp + 0x0004:word16]
	ax = Mem0[ss:bp + 0x0006:word16]
	v9 = Mem0[ds:di:word16] - ax
	Mem0[ds:di:word16] = v9
	SCZO = cond(v9)
	si = Mem0[ds:di:word16]
	si = si + di
	SCZO = cond(si)
	ax = Mem0[ss:bp + 0x0006:word16]
	ax = ax + 0x0001
	SZO = cond(ax)
	Mem0[ds:si:word16] = ax
	Mem0[ds:si + 0x0002:word16] = di
	ax = Mem0[ds:0x0628:word16]
	SCZO = cond(ax - di)
	branch Test(NE,Z) l0800_04E6
	// succ:  l0800_04E0 l0800_04E6
l0800_04E0:
	Mem0[ds:0x0628:word16] = si
	goto l0800_04EE
	// succ:  l0800_04EE
l0800_04E6:
	di = si
	di = di + Mem0[ss:bp + 0x0006:word16]
	SCZO = cond(di)
	Mem0[ds:di + 0x0002:word16] = si
	// succ:  l0800_04EE
l0800_04EE:
	ax = si
	ax = ax + 0x0004
	SCZO = cond(ax)
	// succ:  l0800_04F5
l0800_04F5:
	di = Mem0[ss:sp:word16]
	sp = sp + 2
	si = Mem0[ss:sp:word16]
	sp = sp + 2
	bp = Mem0[ss:sp:word16]
	sp = sp + 2
	return
	// succ:  fn0800_04BF_exit
fn0800_04BF_exit:


// fn0800_04F9
// Return size: 2
define fn0800_04F9
fn0800_04F9_entry:
	// succ:  l0800_04F9
l0800_04F9:
	sp = fp
	Top = 0
	sp = sp - 2
	Mem0[ss:sp:word16] = bp
	bp = sp
	sp = sp - 2
	Mem0[ss:sp:word16] = si
	ax = Mem0[ss:bp + 0x0004:word16]
	dx = dx ^ dx
	SZO = cond(dx)
	C = false
	ax = ax & 0xFFFF
	SZO = cond(ax)
	C = false
	dx = dx & 0x0000
	SZO = cond(dx)
	C = false
	sp = sp - 2
	Mem0[ss:sp:word16] = dx
	sp = sp - 2
	Mem0[ss:sp:word16] = ax
	call ___sbrk (retsize: 2;)
	cx = Mem0[ss:sp:word16]
	sp = sp + 2
	cx = Mem0[ss:sp:word16]
	sp = sp + 2
	si = ax
	SCZO = cond(si - 0xFFFF)
	branch Test(NE,Z) l0800_051B
	// succ:  l0800_0517 l0800_051B
l0800_0517:
	ax = ax ^ ax
	SZO = cond(ax)
	C = false
	goto l0800_0533
	// succ:  l0800_0533
l0800_051B:
	ax = Mem0[ds:0x0628:word16]
	Mem0[ds:si + 0x0002:word16] = ax
	ax = Mem0[ss:bp + 0x0004:word16]
	ax = ax + 0x0001
	SZO = cond(ax)
	Mem0[ds:si:word16] = ax
	Mem0[ds:0x0628:word16] = si
	ax = Mem0[ds:0x0628:word16]
	ax = ax + 0x0004
	SCZO = cond(ax)
	// succ:  l0800_0533
l0800_0533:
	si = Mem0[ss:sp:word16]
	sp = sp + 2
	bp = Mem0[ss:sp:word16]
	sp = sp + 2
	return
	// succ:  fn0800_04F9_exit
fn0800_04F9_exit:


// fn0800_0536
// Return size: 2
define fn0800_0536
fn0800_0536_entry:
	// succ:  l0800_0536
l0800_0536:
	sp = fp
	Top = 0
	sp = sp - 2
	Mem0[ss:sp:word16] = bp
	bp = sp
	sp = sp - 2
	Mem0[ss:sp:word16] = si
	ax = Mem0[ss:bp + 0x0004:word16]
	dx = dx ^ dx
	SZO = cond(dx)
	C = false
	ax = ax & 0xFFFF
	SZO = cond(ax)
	C = false
	dx = dx & 0x0000
	SZO = cond(dx)
	C = false
	sp = sp - 2
	Mem0[ss:sp:word16] = dx
	sp = sp - 2
	Mem0[ss:sp:word16] = ax
	call ___sbrk (retsize: 2;)
	cx = Mem0[ss:sp:word16]
	sp = sp + 2
	cx = Mem0[ss:sp:word16]
	sp = sp + 2
	si = ax
	SCZO = cond(si - 0xFFFF)
	branch Test(NE,Z) l0800_0558
	// succ:  l0800_0554 l0800_0558
l0800_0554:
	ax = ax ^ ax
	SZO = cond(ax)
	C = false
	goto l0800_056D
	// succ:  l0800_056D
l0800_0558:
	Mem0[ds:0x062C:word16] = si
	Mem0[ds:0x0628:word16] = si
	ax = Mem0[ss:bp + 0x0004:word16]
	ax = ax + 0x0001
	SZO = cond(ax)
	Mem0[ds:si:word16] = ax
	ax = si
	ax = ax + 0x0004
	SCZO = cond(ax)
	// succ:  l0800_056D
l0800_056D:
	si = Mem0[ss:sp:word16]
	sp = sp + 2
	bp = Mem0[ss:sp:word16]
	sp = sp + 2
	return
	// succ:  fn0800_0536_exit
fn0800_0536_exit:


// _malloc
// Return size: 2
define _malloc
fn0800_0570_entry:
	// succ:  l0800_0570
l0800_0570:
	sp = fp
	Top = 0
	sp = sp - 2
	Mem0[ss:sp:word16] = bp
	bp = sp
	sp = sp - 2
	Mem0[ss:sp:word16] = si
	sp = sp - 2
	Mem0[ss:sp:word16] = di
	di = Mem0[ss:bp + 0x0004:word16]
	di = di | di
	SZO = cond(di)
	C = false
	branch Test(EQ,Z) l0800_0581
	// succ:  l0800_057C l0800_0581
l0800_057C:
	SCZO = cond(di - 0xFFF4)
	branch Test(ULE,CZ) l0800_0585
	// succ:  l0800_0581 l0800_0585
l0800_0581:
	ax = ax ^ ax
	SZO = cond(ax)
	C = false
	goto l0800_05DF
	// succ:  l0800_05DF
l0800_0585:
	ax = di
	ax = ax + 0x000B
	SCZO = cond(ax)
	ax = ax & 0xFFF8
	SZO = cond(ax)
	C = false
	di = ax
	SCZO = cond(Mem0[ds:0x062C:word16] - 0x0000)
	branch Test(NE,Z) l0800_059D
	// succ:  l0800_0596 l0800_059D
l0800_0596:
	sp = sp - 2
	Mem0[ss:sp:word16] = di
	call fn0800_0536 (retsize: 2;)
	cx = Mem0[ss:sp:word16]
	sp = sp + 2
	goto l0800_05DF
	// succ:  l0800_05DF
l0800_059D:
	si = Mem0[ds:0x062A:word16]
	ax = si
	ax = ax | ax
	SZO = cond(ax)
	C = false
	branch Test(EQ,Z) l0800_05D8
	// succ:  l0800_05A7 l0800_05D8
l0800_05A7:
	ax = Mem0[ds:si:word16]
	dx = di
	dx = dx + 0x0028
	SCZO = cond(dx)
	SCZO = cond(ax - dx)
	branch Test(ULT,C) l0800_05BB
	// succ:  l0800_05B2 l0800_05BB
l0800_05B2:
	sp = sp - 2
	Mem0[ss:sp:word16] = di
	sp = sp - 2
	Mem0[ss:sp:word16] = si
	call fn0800_04BF (retsize: 2;)
	cx = Mem0[ss:sp:word16]
	sp = sp + 2
	cx = Mem0[ss:sp:word16]
	sp = sp + 2
	goto l0800_05DF
	// succ:  l0800_05DF
l0800_05BB:
	ax = Mem0[ds:si:word16]
	SCZO = cond(ax - di)
	branch Test(ULT,C) l0800_05CF
	// succ:  l0800_05C1 l0800_05CF
l0800_05C1:
	sp = sp - 2
	Mem0[ss:sp:word16] = si
	call ___pull_free_block (retsize: 2;)
	cx = Mem0[ss:sp:word16]
	sp = sp + 2
	v16 = Mem0[ds:si:word16] + 0x0001
	Mem0[ds:si:word16] = v16
	SZO = cond(v16)
	ax = si
	ax = ax + 0x0004
	SCZO = cond(ax)
	goto l0800_05DF
	// succ:  l0800_05DF
l0800_05CF:
	si = Mem0[ds:si + 0x0006:word16]
	SCZO = cond(si - Mem0[ds:0x062A:word16])
	branch Test(NE,Z) l0800_05A7
	// succ:  l0800_05D8 l0800_05A7
l0800_05D8:
	sp = sp - 2
	Mem0[ss:sp:word16] = di
	call fn0800_04F9 (retsize: 2;)
	cx = Mem0[ss:sp:word16]
	sp = sp + 2
	// succ:  l0800_05DF
l0800_05DF:
	di = Mem0[ss:sp:word16]
	sp = sp + 2
	si = Mem0[ss:sp:word16]
	sp = sp + 2
	bp = Mem0[ss:sp:word16]
	sp = sp + 2
	return
	// succ:  fn0800_0570_exit
fn0800_0570_exit:


// ___brk
// Return size: 2
define ___brk
fn0800_05E3_entry:
	// succ:  l0800_05E3
l0800_05E3:
	sp = fp
	Top = 0
	sp = sp - 2
	Mem0[ss:sp:word16] = bp
	bp = sp
	ax = Mem0[ss:bp + 0x0004:word16]
	dx = sp
	dx = dx - 0x0100
	SCZO = cond(dx)
	SCZO = cond(ax - dx)
	branch Test(UGE,C) l0800_05FA
	// succ:  l0800_05F3 l0800_05FA
l0800_05F3:
	Mem0[ds:0x009E:word16] = ax
	ax = ax ^ ax
	SZO = cond(ax)
	C = false
	goto l0800_0605
	// succ:  l0800_0605
l0800_05FA:
	Mem0[ds:0x0094:word16] = 0x0008
	ax = 0xFFFF
	// succ:  l0800_0605
l0800_0605:
	bp = Mem0[ss:sp:word16]
	sp = sp + 2
	return
	// succ:  fn0800_05E3_exit
fn0800_05E3_exit:


// ___sbrk
// Return size: 2
define ___sbrk
fn0800_0607_entry:
	// succ:  l0800_0607
l0800_0607:
	sp = fp
	Top = 0
	sp = sp - 2
	Mem0[ss:sp:word16] = bp
	bp = sp
	ax = Mem0[ss:bp + 0x0004:word16]
	dx = Mem0[ss:bp + 0x0006:word16]
	ax = ax + Mem0[ds:0x009E:word16]
	SCZO = cond(ax)
	dx = dx + 0x00 + C
	SCZO = cond(dx)
	cx = ax
	cx = cx + 0x0100
	SCZO = cond(cx)
	dx = dx + 0x00 + C
	SCZO = cond(dx)
	dx = dx | dx
	SZO = cond(dx)
	C = false
	branch Test(NE,Z) l0800_062E
	// succ:  l0800_0624 l0800_062E
l0800_0624:
	SCZO = cond(cx - sp)
	branch Test(UGE,C) l0800_062E
	// succ:  l0800_0628 l0800_062E
l0800_0628:
	v13 = Mem0[ds:0x009E:word16]
	Mem0[ds:0x009E:word16] = ax
	ax = v13
	goto l0800_0639
	// succ:  l0800_0639
l0800_062E:
	Mem0[ds:0x0094:word16] = 0x0008
	ax = 0xFFFF
	// succ:  l0800_0639
l0800_0639:
	bp = Mem0[ss:sp:word16]
	sp = sp + 2
	return
	// succ:  fn0800_0607_exit
fn0800_0607_exit:


// _brk
// Return size: 2
define _brk
fn0800_063B_entry:
	// succ:  l0800_063B
l0800_063B:
	sp = fp
	Top = 0
	sp = sp - 2
	Mem0[ss:sp:word16] = bp
	bp = sp
	v5 = Mem0[ss:bp + 0x0004:word16]
	sp = sp - 2
	Mem0[ss:sp:word16] = v5
	call ___brk (retsize: 2;)
	cx = Mem0[ss:sp:word16]
	sp = sp + 2
	// succ:  l0800_0647
l0800_0647:
	bp = Mem0[ss:sp:word16]
	sp = sp + 2
	return
	// succ:  fn0800_063B_exit
fn0800_063B_exit:


// fn0800_065B
// Return size: 2
define fn0800_065B
fn0800_065B_entry:
	// succ:  l0800_065B
l0800_065B:
	sp = fp
	Top = 0
	sp = sp - 2
	Mem0[ss:sp:word16] = bp
	bp = sp
	sp = sp - 0x0002
	SCZO = cond(sp)
	sp = sp - 2
	Mem0[ss:sp:word16] = si
	sp = sp - 2
	Mem0[ss:sp:word16] = di
	bx = Mem0[ss:bp + 0x0004:word16]
	si = Mem0[ds:bx:word16]
	ax = si
	Mem0[ss:bp - 0x0002:word16] = ax
	bx = Mem0[ss:bp + 0x0004:word16]
	SZO = cond(Mem0[ds:bx + 0x0002:word16] & 0x0040)
	C = false
	branch Test(EQ,Z) l0800_067B
	// succ:  l0800_0677 l0800_067B
l0800_0677:
	ax = si
	goto l0800_069A
	// succ:  l0800_069A
l0800_067B:
	bx = Mem0[ss:bp + 0x0004:word16]
	di = Mem0[ds:bx + 0x000A:word16]
	goto l0800_068E
	// succ:  l0800_068E
l0800_0683:
	bx = di
	di = di + 0x0001
	SZO = cond(di)
	SCZO = cond(Mem0[ds:bx:byte] - 0x0A)
	branch Test(NE,Z) l0800_068E
	// succ:  l0800_068B l0800_068E
l0800_068B:
	v14 = Mem0[ss:bp - 0x0002:word16] + 0x0001
	Mem0[ss:bp - 0x0002:word16] = v14
	SZO = cond(v14)
	// succ:  l0800_068E
l0800_068E:
	ax = si
	si = si - 0x0001
	SZO = cond(si)
	ax = ax | ax
	SZO = cond(ax)
	C = false
	branch Test(NE,Z) l0800_0683
	// succ:  l0800_0695 l0800_0683
l0800_0695:
	ax = Mem0[ss:bp - 0x0002:word16]
	// succ:  l0800_069A
l0800_069A:
	di = Mem0[ss:sp:word16]
	sp = sp + 2
	si = Mem0[ss:sp:word16]
	sp = sp + 2
	sp = bp
	bp = Mem0[ss:sp:word16]
	sp = sp + 2
	return
	// succ:  fn0800_065B_exit
fn0800_065B_exit:


// _fseek
// Return size: 2
define _fseek
fn0800_06A2_entry:
	// succ:  l0800_06A2
l0800_06A2:
	sp = fp
	Top = 0
	sp = sp - 2
	Mem0[ss:sp:word16] = bp
	bp = sp
	sp = sp - 2
	Mem0[ss:sp:word16] = si
	si = Mem0[ss:bp + 0x0004:word16]
	sp = sp - 2
	Mem0[ss:sp:word16] = si
	call _fflush (retsize: 2;)
	cx = Mem0[ss:sp:word16]
	sp = sp + 2
	ax = ax | ax
	SZO = cond(ax)
	C = false
	branch Test(EQ,Z) l0800_06B7
	// succ:  l0800_06B2 l0800_06B7
l0800_06B2:
	ax = 0xFFFF
	goto l0800_0703
	// succ:  l0800_0703
l0800_06B7:
	SCZO = cond(Mem0[ss:bp + 0x000A:word16] - 0x0001)
	branch Test(NE,Z) l0800_06CD
	// succ:  l0800_06BD l0800_06CD
l0800_06BD:
	SCZO = cond(Mem0[ds:si:word16] - 0x0000)
	branch Test(LE,SZO) l0800_06CD
	// succ:  l0800_06C2 l0800_06CD
l0800_06C2:
	sp = sp - 2
	Mem0[ss:sp:word16] = si
	call fn0800_065B (retsize: 2;)
	sp = sp + 0x0002
	dx_ax = (int32) ax
	v14 = Mem0[ss:bp + 0x0006:word16] - ax
	Mem0[ss:bp + 0x0006:word16] = v14
	SCZO = cond(v14)
	v16 = Mem0[ss:bp + 0x0008:word16] - dx - C
	Mem0[ss:bp + 0x0008:word16] = v16
	SCZO = cond(v16)
	// succ:  l0800_06CD
l0800_06CD:
	v17 = Mem0[ds:si + 0x0002:word16] & 0xFE5F
	Mem0[ds:si + 0x0002:word16] = v17
	SZO = cond(Mem0[ds:si + 0x0002:word16])
	C = false
	Mem0[ds:si:word16] = 0x0000
	ax = Mem0[ds:si + 0x0008:word16]
	Mem0[ds:si + 0x000A:word16] = ax
	v18 = Mem0[ss:bp + 0x000A:word16]
	sp = sp - 2
	Mem0[ss:sp:word16] = v18
	v19 = Mem0[ss:bp + 0x0008:word16]
	sp = sp - 2
	Mem0[ss:sp:word16] = v19
	v20 = Mem0[ss:bp + 0x0006:word16]
	sp = sp - 2
	Mem0[ss:sp:word16] = v20
	al = Mem0[ds:si + 0x0004:byte]
	ax = (int16) al
	sp = sp - 2
	Mem0[ss:sp:word16] = ax
	call _lseek (retsize: 2;)
	sp = sp + 0x0008
	SCZO = cond(sp)
	SCZO = cond(dx - 0xFFFF)
	branch Test(NE,Z) l0800_06FF
	// succ:  l0800_06F5 l0800_06FF
l0800_06F5:
	SCZO = cond(ax - 0xFFFF)
	branch Test(NE,Z) l0800_06FF
	// succ:  l0800_06FA l0800_06FF
l0800_06FA:
	ax = 0xFFFF
	goto l0800_0701
	// succ:  l0800_0701
l0800_06FF:
	ax = ax ^ ax
	SZO = cond(ax)
	C = false
	// succ:  l0800_0701
l0800_0701:
	// succ:  l0800_0703
l0800_0703:
	si = Mem0[ss:sp:word16]
	sp = sp + 2
	bp = Mem0[ss:sp:word16]
	sp = sp + 2
	return
	// succ:  fn0800_06A2_exit
fn0800_06A2_exit:


// fn0800_075B
// Return size: 2
define fn0800_075B
fn0800_075B_entry:
	// succ:  l0800_075B
l0800_075B:
	sp = fp
	Top = 0
	sp = sp - 2
	Mem0[ss:sp:word16] = si
	sp = sp - 2
	Mem0[ss:sp:word16] = di
	di = 0x0014
	si = 0x0342
	goto l0800_0778
	// succ:  l0800_0778
l0800_0765:
	ax = Mem0[ds:si + 0x0002:word16]
	ax = ax & 0x0300
	SZO = cond(ax)
	C = false
	SCZO = cond(ax - 0x0300)
	branch Test(NE,Z) l0800_0775
	// succ:  l0800_0770 l0800_0775
l0800_0770:
	sp = sp - 2
	Mem0[ss:sp:word16] = si
	call _fflush (retsize: 2;)
	cx = Mem0[ss:sp:word16]
	sp = sp + 2
	// succ:  l0800_0775
l0800_0775:
	si = si + 0x0010
	SCZO = cond(si)
	// succ:  l0800_0778
l0800_0778:
	ax = di
	di = di - 0x0001
	SZO = cond(di)
	ax = ax | ax
	SZO = cond(ax)
	C = false
	branch Test(NE,Z) l0800_0765
	// succ:  l0800_077F l0800_0765
l0800_077F:
	di = Mem0[ss:sp:word16]
	sp = sp + 2
	si = Mem0[ss:sp:word16]
	sp = sp + 2
	return
	// succ:  fn0800_075B_exit
fn0800_075B_exit:


// fn0800_0782
// Return size: 2
define fn0800_0782
fn0800_0782_entry:
	// succ:  l0800_0782
l0800_0782:
	sp = fp
	Top = 0
	sp = sp - 2
	Mem0[ss:sp:word16] = bp
	bp = sp
	sp = sp - 2
	Mem0[ss:sp:word16] = si
	si = Mem0[ss:bp + 0x0004:word16]
	SZO = cond(Mem0[ds:si + 0x0002:word16] & 0x0200)
	C = false
	branch Test(EQ,Z) l0800_0793
	// succ:  l0800_0790 l0800_0793
l0800_0790:
	call fn0800_075B (retsize: 2;)
	// succ:  l0800_0793
l0800_0793:
	v10 = Mem0[ds:si + 0x0006:word16]
	sp = sp - 2
	Mem0[ss:sp:word16] = v10
	ax = Mem0[ds:si + 0x0008:word16]
	Mem0[ds:si + 0x000A:word16] = ax
	sp = sp - 2
	Mem0[ss:sp:word16] = ax
	al = Mem0[ds:si + 0x0004:byte]
	ax = (int16) al
	sp = sp - 2
	Mem0[ss:sp:word16] = ax
	call _read (retsize: 2;)
	sp = sp + 0x0006
	SCZO = cond(sp)
	Mem0[ds:si:word16] = ax
	ax = ax | ax
	SZO = cond(ax)
	C = false
	branch Test(LE,SZO) l0800_07B9
	// succ:  l0800_07AE l0800_07B9
l0800_07AE:
	v14 = Mem0[ds:si + 0x0002:word16] & 0xFFDF
	Mem0[ds:si + 0x0002:word16] = v14
	SZO = cond(Mem0[ds:si + 0x0002:word16])
	C = false
	ax = ax ^ ax
	SZO = cond(ax)
	C = false
	goto l0800_07DA
	// succ:  l0800_07DA
l0800_07B9:
	SCZO = cond(Mem0[ds:si:word16] - 0x0000)
	branch Test(NE,Z) l0800_07CC
	// succ:  l0800_07BE l0800_07CC
l0800_07BE:
	ax = Mem0[ds:si + 0x0002:word16]
	ax = ax & 0xFE7F
	SZO = cond(ax)
	C = false
	ax = ax | 0x0020
	SZO = cond(ax)
	C = false
	Mem0[ds:si + 0x0002:word16] = ax
	goto l0800_07D5
	// succ:  l0800_07D5
l0800_07CC:
	Mem0[ds:si:word16] = 0x0000
	v15 = Mem0[ds:si + 0x0002:word16] | 0x0010
	Mem0[ds:si + 0x0002:word16] = v15
	SZO = cond(Mem0[ds:si + 0x0002:word16])
	C = false
	// succ:  l0800_07D5
l0800_07D5:
	ax = 0xFFFF
	// succ:  l0800_07DA
l0800_07DA:
	si = Mem0[ss:sp:word16]
	sp = sp + 2
	bp = Mem0[ss:sp:word16]
	sp = sp + 2
	return
	// succ:  fn0800_0782_exit
fn0800_0782_exit:


// _fgetc
// Return size: 2
define _fgetc
fn0800_07F2_entry:
	// succ:  l0800_07F2
l0800_07F2:
	sp = fp
	Top = 0
	sp = sp - 2
	Mem0[ss:sp:word16] = bp
	bp = sp
	sp = sp - 0x0002
	SCZO = cond(sp)
	sp = sp - 2
	Mem0[ss:sp:word16] = si
	si = Mem0[ss:bp + 0x0004:word16]
	// succ:  l0800_07FC
l0800_07FC:
	v8 = Mem0[ds:si:word16] - 0x0001
	Mem0[ds:si:word16] = v8
	SZO = cond(v8)
	branch Test(LT,SO) l0800_080E
	// succ:  l0800_0800 l0800_080E
l0800_0800:
	v11 = Mem0[ds:si + 0x000A:word16] + 0x0001
	Mem0[ds:si + 0x000A:word16] = v11
	SZO = cond(v11)
	bx = Mem0[ds:si + 0x000A:word16]
	al = Mem0[ds:bx - 0x0001:byte]
	ah = 0x00
	goto l0800_08E2
	// succ:  l0800_08E2
l0800_080E:
	v15 = Mem0[ds:si:word16] + 0x0001
	Mem0[ds:si:word16] = v15
	SZO = cond(v15)
	branch Test(LT,SO) l0800_0819
	// succ:  l0800_0812 l0800_0819
l0800_0812:
	SZO = cond(Mem0[ds:si + 0x0002:word16] & 0x0110)
	C = false
	branch Test(EQ,Z) l0800_0824
	// succ:  l0800_0819 l0800_0824
l0800_0819:
	v18 = Mem0[ds:si + 0x0002:word16] | 0x0010
	Mem0[ds:si + 0x0002:word16] = v18
	SZO = cond(Mem0[ds:si + 0x0002:word16])
	C = false
	ax = 0xFFFF
	goto l0800_08E2
	// succ:  l0800_08E2
l0800_0824:
	v20 = Mem0[ds:si + 0x0002:word16] | 0x0080
	Mem0[ds:si + 0x0002:word16] = v20
	SZO = cond(Mem0[ds:si + 0x0002:word16])
	C = false
	SCZO = cond(Mem0[ds:si + 0x0006:word16] - 0x0000)
	branch Test(EQ,Z) l0800_0842
	// succ:  l0800_082F l0800_0842
l0800_082F:
	sp = sp - 2
	Mem0[ss:sp:word16] = si
	call fn0800_0782 (retsize: 2;)
	sp = sp + 0x0002
	ax = ax | ax
	SZO = cond(ax)
	C = false
	branch Test(EQ,Z) l0800_083D
	// succ:  l0800_0837 l0800_083D
l0800_0837:
	ax = 0xFFFF
	goto l0800_08E2
	// succ:  l0800_08E2
l0800_083D:
	goto l0800_07FC
	// succ:  l0800_07FC
l0800_0842:
	SCZO = cond(Mem0[ds:0x04AA:word16] - 0x0000)
	branch Test(NE,Z) l0800_0881
	// succ:  l0800_0849 l0800_0881
l0800_0849:
	ax = 0x0342
	SCZO = cond(ax - si)
	branch Test(NE,Z) l0800_0881
	// succ:  l0800_0850 l0800_0881
l0800_0850:
	al = Mem0[ds:si + 0x0004:byte]
	ax = (int16) al
	sp = sp - 2
	Mem0[ss:sp:word16] = ax
	call _isatty (retsize: 2;)
	cx = Mem0[ss:sp:word16]
	sp = sp + 2
	ax = ax | ax
	SZO = cond(ax)
	C = false
	branch Test(NE,Z) l0800_0862
	// succ:  l0800_085D l0800_0862
l0800_085D:
	v22 = Mem0[ds:si + 0x0002:word16] & 0xFDFF
	Mem0[ds:si + 0x0002:word16] = v22
	SZO = cond(Mem0[ds:si + 0x0002:word16])
	C = false
	// succ:  l0800_0862
l0800_0862:
	ax = 0x0200
	sp = sp - 2
	Mem0[ss:sp:word16] = ax
	SZO = cond(Mem0[ds:si + 0x0002:word16] & 0x0200)
	C = false
	branch Test(EQ,Z) l0800_0872
	// succ:  l0800_086D l0800_0872
l0800_086D:
	ax = 0x0001
	goto l0800_0874
	// succ:  l0800_0874
l0800_0872:
	ax = ax ^ ax
	SZO = cond(ax)
	C = false
	// succ:  l0800_0874
l0800_0874:
	sp = sp - 2
	Mem0[ss:sp:word16] = ax
	ax = ax ^ ax
	SZO = cond(ax)
	C = false
	sp = sp - 2
	Mem0[ss:sp:word16] = ax
	sp = sp - 2
	Mem0[ss:sp:word16] = si
	call _setvbuf (retsize: 2;)
	sp = sp + 0x0008
	SCZO = cond(sp)
	goto l0800_0824
	// succ:  l0800_0824
l0800_0881:
	SZO = cond(Mem0[ds:si + 0x0002:word16] & 0x0200)
	C = false
	branch Test(EQ,Z) l0800_088B
	// succ:  l0800_0888 l0800_088B
l0800_0888:
	call fn0800_075B (retsize: 2;)
	// succ:  l0800_088B
l0800_088B:
	ax = 0x0001
	sp = sp - 2
	Mem0[ss:sp:word16] = ax
	ax = bp - 0x0001
	sp = sp - 2
	Mem0[ss:sp:word16] = ax
	al = Mem0[ds:si + 0x0004:byte]
	ax = (int16) al
	sp = sp - 2
	Mem0[ss:sp:word16] = ax
	call __read (retsize: 2;)
	sp = sp + 0x0006
	SCZO = cond(sp)
	SCZO = cond(ax - 0x0001)
	branch Test(EQ,Z) l0800_08C9
	// succ:  l0800_08A3 l0800_08C9
l0800_08A3:
	al = Mem0[ds:si + 0x0004:byte]
	ax = (int16) al
	sp = sp - 2
	Mem0[ss:sp:word16] = ax
	call _eof (retsize: 2;)
	cx = Mem0[ss:sp:word16]
	sp = sp + 2
	SCZO = cond(ax - 0x0001)
	branch Test(EQ,Z) l0800_08B8
	// succ:  l0800_08B1 l0800_08B8
l0800_08B1:
	v23 = Mem0[ds:si + 0x0002:word16] | 0x0010
	Mem0[ds:si + 0x0002:word16] = v23
	SZO = cond(Mem0[ds:si + 0x0002:word16])
	C = false
	goto l0800_08C4
	// succ:  l0800_08C4
l0800_08B8:
	ax = Mem0[ds:si + 0x0002:word16]
	ax = ax & 0xFE7F
	SZO = cond(ax)
	C = false
	ax = ax | 0x0020
	SZO = cond(ax)
	C = false
	Mem0[ds:si + 0x0002:word16] = ax
	// succ:  l0800_08C4
l0800_08C4:
	ax = 0xFFFF
	goto l0800_08E2
	// succ:  l0800_08E2
l0800_08C9:
	SCZO = cond(Mem0[ss:bp - 0x0001:byte] - 0x0D)
	branch Test(NE,Z) l0800_08D6
	// succ:  l0800_08CF l0800_08D6
l0800_08CF:
	SZO = cond(Mem0[ds:si + 0x0002:word16] & 0x0040)
	C = false
	branch Test(EQ,Z) l0800_0881
	// succ:  l0800_08D6 l0800_0881
l0800_08D6:
	v24 = Mem0[ds:si + 0x0002:word16] & 0xFFDF
	Mem0[ds:si + 0x0002:word16] = v24
	SZO = cond(Mem0[ds:si + 0x0002:word16])
	C = false
	al = Mem0[ss:bp - 0x0001:byte]
	ah = 0x00
	// succ:  l0800_08E2
l0800_08E2:
	si = Mem0[ss:sp:word16]
	sp = sp + 2
	sp = bp
	bp = Mem0[ss:sp:word16]
	sp = sp + 2
	return
	// succ:  fn0800_07F2_exit
fn0800_07F2_exit:


// _isatty
// Return size: 2
define _isatty
fn0800_08F2_entry:
	// succ:  l0800_08F2
l0800_08F2:
	sp = fp
	Top = 0
	sp = sp - 2
	Mem0[ss:sp:word16] = bp
	bp = sp
	ax = 0x4400
	bx = Mem0[ss:bp + 0x0004:word16]
	C = msdos_ioctl_get_device_info(bx, out dx)
	ax = dx
	ax = ax & 0x0080
	SZO = cond(ax)
	C = false
	bp = Mem0[ss:sp:word16]
	sp = sp + 2
	return
	// succ:  fn0800_08F2_exit
fn0800_08F2_exit:


// _setvbuf
// Return size: 2
define _setvbuf
fn0800_0904_entry:
	// succ:  l0800_0904
l0800_0904:
	sp = fp
	Top = 0
	sp = sp - 2
	Mem0[ss:sp:word16] = bp
	bp = sp
	sp = sp - 2
	Mem0[ss:sp:word16] = si
	sp = sp - 2
	Mem0[ss:sp:word16] = di
	di = Mem0[ss:bp + 0x000A:word16]
	si = Mem0[ss:bp + 0x0004:word16]
	ax = Mem0[ds:si + 0x000E:word16]
	SCZO = cond(ax - si)
	branch Test(NE,Z) l0800_0922
	// succ:  l0800_0916 l0800_0922
l0800_0916:
	SCZO = cond(Mem0[ss:bp + 0x0008:word16] - 0x0002)
	branch Test(GT,SZO) l0800_0922
	// succ:  l0800_091C l0800_0922
l0800_091C:
	SCZO = cond(di - 0x7FFF)
	branch Test(ULE,CZ) l0800_0928
	// succ:  l0800_0922 l0800_0928
l0800_0922:
	ax = 0xFFFF
	goto l0800_09D2
	// succ:  l0800_09D2
l0800_0928:
	SCZO = cond(Mem0[ds:0x04AC:word16] - 0x0000)
	branch Test(NE,Z) l0800_093E
	// succ:  l0800_092F l0800_093E
l0800_092F:
	ax = 0x0352
	SCZO = cond(ax - si)
	branch Test(NE,Z) l0800_093E
	// succ:  l0800_0936 l0800_093E
l0800_0936:
	Mem0[ds:0x04AC:word16] = 0x0001
	goto l0800_0952
	// succ:  l0800_0952
l0800_093E:
	SCZO = cond(Mem0[ds:0x04AA:word16] - 0x0000)
	branch Test(NE,Z) l0800_0952
	// succ:  l0800_0945 l0800_0952
l0800_0945:
	ax = 0x0342
	SCZO = cond(ax - si)
	branch Test(NE,Z) l0800_0952
	// succ:  l0800_094C l0800_0952
l0800_094C:
	Mem0[ds:0x04AA:word16] = 0x0001
	// succ:  l0800_0952
l0800_0952:
	SCZO = cond(Mem0[ds:si:word16] - 0x0000)
	branch Test(EQ,Z) l0800_0966
	// succ:  l0800_0957 l0800_0966
l0800_0957:
	ax = 0x0001
	sp = sp - 2
	Mem0[ss:sp:word16] = ax
	ax = ax ^ ax
	SZO = cond(ax)
	C = false
	sp = sp - 2
	Mem0[ss:sp:word16] = ax
	sp = sp - 2
	Mem0[ss:sp:word16] = ax
	sp = sp - 2
	Mem0[ss:sp:word16] = si
	call _fseek (retsize: 2;)
	sp = sp + 0x0008
	SCZO = cond(sp)
	// succ:  l0800_0966
l0800_0966:
	SZO = cond(Mem0[ds:si + 0x0002:word16] & 0x0004)
	C = false
	branch Test(EQ,Z) l0800_0974
	// succ:  l0800_096D l0800_0974
l0800_096D:
	v14 = Mem0[ds:si + 0x0008:word16]
	sp = sp - 2
	Mem0[ss:sp:word16] = v14
	call _free (retsize: 2;)
	cx = Mem0[ss:sp:word16]
	sp = sp + 2
	// succ:  l0800_0974
l0800_0974:
	v16 = Mem0[ds:si + 0x0002:word16] & 0xFFF3
	Mem0[ds:si + 0x0002:word16] = v16
	SZO = cond(Mem0[ds:si + 0x0002:word16])
	C = false
	Mem0[ds:si + 0x0006:word16] = 0x0000
	ax = si
	ax = ax + 0x0005
	SCZO = cond(ax)
	Mem0[ds:si + 0x0008:word16] = ax
	Mem0[ds:si + 0x000A:word16] = ax
	SCZO = cond(Mem0[ss:bp + 0x0008:word16] - 0x0002)
	branch Test(EQ,Z) l0800_09CE
	// succ:  l0800_098F l0800_09CE
l0800_098F:
	di = di | di
	SZO = cond(di)
	C = false
	branch Test(ULE,CZ) l0800_09CE
	// succ:  l0800_0993 l0800_09CE
l0800_0993:
	Mem0[ds:0x0234:word16] = 0x09D6
	SCZO = cond(Mem0[ss:bp + 0x0006:word16] - 0x0000)
	branch Test(NE,Z) l0800_09B7
	// succ:  l0800_099F l0800_09B7
l0800_099F:
	sp = sp - 2
	Mem0[ss:sp:word16] = di
	call _malloc (retsize: 2;)
	cx = Mem0[ss:sp:word16]
	sp = sp + 2
	Mem0[ss:bp + 0x0006:word16] = ax
	ax = ax | ax
	SZO = cond(ax)
	C = false
	branch Test(EQ,Z) l0800_09B2
	// succ:  l0800_09AB l0800_09B2
l0800_09AB:
	v17 = Mem0[ds:si + 0x0002:word16] | 0x0004
	Mem0[ds:si + 0x0002:word16] = v17
	SZO = cond(Mem0[ds:si + 0x0002:word16])
	C = false
	goto l0800_09B7
	// succ:  l0800_09B7
l0800_09B2:
	ax = 0xFFFF
	goto l0800_09D2
	// succ:  l0800_09D2
l0800_09B7:
	ax = Mem0[ss:bp + 0x0006:word16]
	Mem0[ds:si + 0x000A:word16] = ax
	Mem0[ds:si + 0x0008:word16] = ax
	Mem0[ds:si + 0x0006:word16] = di
	SCZO = cond(Mem0[ss:bp + 0x0008:word16] - 0x0001)
	branch Test(NE,Z) l0800_09CE
	// succ:  l0800_09C9 l0800_09CE
l0800_09C9:
	v18 = Mem0[ds:si + 0x0002:word16] | 0x0008
	Mem0[ds:si + 0x0002:word16] = v18
	SZO = cond(Mem0[ds:si + 0x0002:word16])
	C = false
	// succ:  l0800_09CE
l0800_09CE:
	ax = ax ^ ax
	SZO = cond(ax)
	C = false
	// succ:  l0800_09D2
l0800_09D2:
	di = Mem0[ss:sp:word16]
	sp = sp + 2
	si = Mem0[ss:sp:word16]
	sp = sp + 2
	bp = Mem0[ss:sp:word16]
	sp = sp + 2
	return
	// succ:  fn0800_0904_exit
fn0800_0904_exit:


// _read
// Return size: 2
define _read
fn0800_09F7_entry:
	// succ:  l0800_09F7
l0800_09F7:
	sp = fp
	Top = 0
	sp = sp - 2
	Mem0[ss:sp:word16] = bp
	bp = sp
	sp = sp - 0x0004
	SCZO = cond(sp)
	sp = sp - 2
	Mem0[ss:sp:word16] = si
	sp = sp - 2
	Mem0[ss:sp:word16] = di
	ax = Mem0[ss:bp + 0x0008:word16]
	ax = ax + 0x0001
	SZO = cond(ax)
	SCZO = cond(ax - 0x0002)
	branch Test(ULT,C) l0800_0A15
	// succ:  l0800_0A08 l0800_0A15
l0800_0A08:
	bx = Mem0[ss:bp + 0x0004:word16]
	bx = bx << 0x0001
	SCZO = cond(bx)
	SZO = cond(Mem0[ds:bx + 0x0482:word16] & 0x0200)
	C = false
	branch Test(EQ,Z) l0800_0A1A
	// succ:  l0800_0A15 l0800_0A1A
l0800_0A15:
	ax = ax ^ ax
	SZO = cond(ax)
	C = false
	goto l0800_0AAD
	// succ:  l0800_0AAD
l0800_0A1A:
	v14 = Mem0[ss:bp + 0x0008:word16]
	sp = sp - 2
	Mem0[ss:sp:word16] = v14
	v15 = Mem0[ss:bp + 0x0006:word16]
	sp = sp - 2
	Mem0[ss:sp:word16] = v15
	v16 = Mem0[ss:bp + 0x0004:word16]
	sp = sp - 2
	Mem0[ss:sp:word16] = v16
	call __read (retsize: 2;)
	sp = sp + 0x0006
	SCZO = cond(sp)
	Mem0[ss:bp - 0x0004:word16] = ax
	ax = Mem0[ss:bp - 0x0004:word16]
	ax = ax + 0x0001
	SZO = cond(ax)
	SCZO = cond(ax - 0x0002)
	branch Test(ULT,C) l0800_0A42
	// succ:  l0800_0A35 l0800_0A42
l0800_0A35:
	bx = Mem0[ss:bp + 0x0004:word16]
	bx = bx << 0x0001
	SCZO = cond(bx)
	SZO = cond(Mem0[ds:bx + 0x0482:word16] & 0x8000)
	C = false
	branch Test(EQ,Z) l0800_0A48
	// succ:  l0800_0A42 l0800_0A48
l0800_0A42:
	ax = Mem0[ss:bp - 0x0004:word16]
	goto l0800_0AAD
	// succ:  l0800_0AAD
l0800_0A48:
	cx = Mem0[ss:bp - 0x0004:word16]
	si = Mem0[ss:bp + 0x0006:word16]
	sp = sp - 2
	Mem0[ss:sp:word16] = ds
	es = Mem0[ss:sp:selector]
	sp = sp + 2
	di = si
	bx = si
	D = false
	// succ:  l0800_0A55
l0800_0A55:
	al = Mem0[ds:si:byte]
	si = si + 0x0001
	SCZO = cond(al - 0x1A)
	branch Test(EQ,Z) l0800_0A87
	// succ:  l0800_0A5A l0800_0A87
l0800_0A5A:
	SCZO = cond(al - 0x0D)
	branch Test(EQ,Z) l0800_0A63
	// succ:  l0800_0A5E l0800_0A63
l0800_0A5E:
	Mem0[es:di:byte] = al
	di = di + 0x0001
	cx = cx - 0x0001
	branch cx != 0x0000 l0800_0A55
	// succ:  l0800_0A61 l0800_0A55
l0800_0A61:
	goto l0800_0A7F
	// succ:  l0800_0A7F
l0800_0A63:
	cx = cx - 0x0001
	branch cx != 0x0000 l0800_0A55
	// succ:  l0800_0A65 l0800_0A55
l0800_0A65:
	sp = sp - 2
	Mem0[ss:sp:word16] = es
	sp = sp - 2
	Mem0[ss:sp:word16] = bx
	ax = 0x0001
	sp = sp - 2
	Mem0[ss:sp:word16] = ax
	ax = bp - 0x0001
	sp = sp - 2
	Mem0[ss:sp:word16] = ax
	v23 = Mem0[ss:bp + 0x0004:word16]
	sp = sp - 2
	Mem0[ss:sp:word16] = v23
	call __read (retsize: 2;)
	sp = sp + 0x0006
	SCZO = cond(sp)
	bx = Mem0[ss:sp:word16]
	sp = sp + 2
	es = Mem0[ss:sp:selector]
	sp = sp + 2
	D = false
	al = Mem0[ss:bp - 0x0001:byte]
	Mem0[es:di:byte] = al
	di = di + 0x0001
	// succ:  l0800_0A7F
l0800_0A7F:
	SCZO = cond(di - bx)
	branch Test(NE,Z) l0800_0A85
	// succ:  l0800_0A83 l0800_0A85
l0800_0A83:
	goto l0800_0A1A
	// succ:  l0800_0A1A
l0800_0A85:
	goto l0800_0AA7
	// succ:  l0800_0AA7
l0800_0A87:
	sp = sp - 2
	Mem0[ss:sp:word16] = bx
	ax = 0x0002
	sp = sp - 2
	Mem0[ss:sp:word16] = ax
	cx = -cx
	SCZO = cond(cx)
	C = cx == 0x0000
	ax = ax - ax - C
	SCZO = cond(ax)
	sp = sp - 2
	Mem0[ss:sp:word16] = ax
	sp = sp - 2
	Mem0[ss:sp:word16] = cx
	v21 = Mem0[ss:bp + 0x0004:word16]
	sp = sp - 2
	Mem0[ss:sp:word16] = v21
	call _lseek (retsize: 2;)
	sp = sp + 0x0008
	SCZO = cond(sp)
	bx = Mem0[ss:bp + 0x0004:word16]
	bx = bx << 0x0001
	SCZO = cond(bx)
	v22 = Mem0[ds:bx + 0x0482:word16] | 0x0200
	Mem0[ds:bx + 0x0482:word16] = v22
	SZO = cond(Mem0[ds:bx + 0x0482:word16])
	C = false
	bx = Mem0[ss:sp:word16]
	sp = sp + 2
	// succ:  l0800_0AA7
l0800_0AA7:
	ax = di
	ax = ax - bx
	SCZO = cond(ax)
	// succ:  l0800_0AAD
l0800_0AAD:
	di = Mem0[ss:sp:word16]
	sp = sp + 2
	si = Mem0[ss:sp:word16]
	sp = sp + 2
	sp = bp
	bp = Mem0[ss:sp:word16]
	sp = sp + 2
	return
	// succ:  fn0800_09F7_exit
fn0800_09F7_exit:


// __read
// Return size: 2
define __read
fn0800_0AB3_entry:
	// succ:  l0800_0AB3
l0800_0AB3:
	sp = fp
	Top = 0
	sp = sp - 2
	Mem0[ss:sp:word16] = bp
	bp = sp
	ah = 0x3F
	bx = Mem0[ss:bp + 0x0004:word16]
	cx = Mem0[ss:bp + 0x0008:word16]
	dx = Mem0[ss:bp + 0x0006:word16]
	C = msdos_read_file(bx, cx, ds_dx, out ax)
	branch Test(ULT,C) l0800_0AC7
	// succ:  l0800_0AC5 l0800_0AC7
l0800_0AC5:
	goto l0800_0ACD
	// succ:  l0800_0ACD
l0800_0AC7:
	sp = sp - 2
	Mem0[ss:sp:word16] = ax
	call __IOERROR (retsize: 2;)
	sp = sp + 0x0002
	// succ:  l0800_0ACD
l0800_0ACD:
	bp = Mem0[ss:sp:word16]
	sp = sp + 2
	return
	// succ:  fn0800_0AB3_exit
fn0800_0AB3_exit:


// _write
// Return size: 2
define _write
fn0800_0ACF_entry:
	// succ:  l0800_0ACF
l0800_0ACF:
	sp = fp
	Top = 0
	sp = sp - 2
	Mem0[ss:sp:word16] = bp
	bp = sp
	sp = sp - 0x008A
	SCZO = cond(sp)
	sp = sp - 2
	Mem0[ss:sp:word16] = si
	sp = sp - 2
	Mem0[ss:sp:word16] = di
	ax = Mem0[ss:bp + 0x0008:word16]
	ax = ax + 0x0001
	SZO = cond(ax)
	SCZO = cond(ax - 0x0002)
	branch Test(UGE,C) l0800_0AE6
	// succ:  l0800_0AE1 l0800_0AE6
l0800_0AE1:
	ax = ax ^ ax
	SZO = cond(ax)
	C = false
	goto l0800_0BDC
	// succ:  l0800_0BDC
l0800_0AE6:
	bx = Mem0[ss:bp + 0x0004:word16]
	bx = bx << 0x0001
	SCZO = cond(bx)
	SZO = cond(Mem0[ds:bx + 0x0482:word16] & 0x8000)
	C = false
	branch Test(EQ,Z) l0800_0B05
	// succ:  l0800_0AF3 l0800_0B05
l0800_0AF3:
	v14 = Mem0[ss:bp + 0x0008:word16]
	sp = sp - 2
	Mem0[ss:sp:word16] = v14
	v15 = Mem0[ss:bp + 0x0006:word16]
	sp = sp - 2
	Mem0[ss:sp:word16] = v15
	v16 = Mem0[ss:bp + 0x0004:word16]
	sp = sp - 2
	Mem0[ss:sp:word16] = v16
	call __write (retsize: 2;)
	sp = sp + 0x0006
	SCZO = cond(sp)
	goto l0800_0BDC
	// succ:  l0800_0BDC
l0800_0B05:
	bx = Mem0[ss:bp + 0x0004:word16]
	bx = bx << 0x0001
	SCZO = cond(bx)
	v17 = Mem0[ds:bx + 0x0482:word16] & 0xFDFF
	Mem0[ds:bx + 0x0482:word16] = v17
	SZO = cond(Mem0[ds:bx + 0x0482:word16])
	C = false
	ax = Mem0[ss:bp + 0x0006:word16]
	Mem0[ss:bp - 0x0084:word16] = ax
	ax = Mem0[ss:bp + 0x0008:word16]
	Mem0[ss:bp - 0x0088:word16] = ax
	si = bp - 0x0082
	goto l0800_0B91
	// succ:  l0800_0B91
l0800_0B24:
	v20 = Mem0[ss:bp - 0x0088:word16] - 0x0001
	Mem0[ss:bp - 0x0088:word16] = v20
	SZO = cond(v20)
	bx = Mem0[ss:bp - 0x0084:word16]
	v21 = Mem0[ss:bp - 0x0084:word16] + 0x0001
	Mem0[ss:bp - 0x0084:word16] = v21
	SZO = cond(v21)
	al = Mem0[ds:bx:byte]
	Mem0[ss:bp - 0x0085:byte] = al
	SCZO = cond(al - 0x0A)
	branch Test(NE,Z) l0800_0B3E
	// succ:  l0800_0B3A l0800_0B3E
l0800_0B3A:
	Mem0[ds:si:byte] = 0x0D
	si = si + 0x0001
	SZO = cond(si)
	// succ:  l0800_0B3E
l0800_0B3E:
	al = Mem0[ss:bp - 0x0085:byte]
	Mem0[ds:si:byte] = al
	si = si + 0x0001
	SZO = cond(si)
	ax = bp - 0x0082
	dx = si
	dx = dx - ax
	SCZO = cond(dx)
	SCZO = cond(dx - 0x0080)
	branch Test(LT,SO) l0800_0B91
	// succ:  l0800_0B53 l0800_0B91
l0800_0B53:
	ax = bp - 0x0082
	di = si
	di = di - ax
	SCZO = cond(di)
	sp = sp - 2
	Mem0[ss:sp:word16] = di
	ax = bp - 0x0082
	sp = sp - 2
	Mem0[ss:sp:word16] = ax
	v25 = Mem0[ss:bp + 0x0004:word16]
	sp = sp - 2
	Mem0[ss:sp:word16] = v25
	call __write (retsize: 2;)
	sp = sp + 0x0006
	SCZO = cond(sp)
	Mem0[ss:bp - 0x008A:word16] = ax
	SCZO = cond(ax - di)
	branch Test(EQ,Z) l0800_0B8D
	// succ:  l0800_0B72 l0800_0B8D
l0800_0B72:
	SCZO = cond(Mem0[ss:bp - 0x008A:word16] - 0x0000)
	branch Test(UGE,C) l0800_0B7E
	// succ:  l0800_0B79 l0800_0B7E
l0800_0B79:
	ax = 0xFFFF
	goto l0800_0B8B
	// succ:  l0800_0B8B
l0800_0B7E:
	ax = Mem0[ss:bp + 0x0008:word16]
	ax = ax - Mem0[ss:bp - 0x0088:word16]
	SCZO = cond(ax)
	ax = ax + Mem0[ss:bp - 0x008A:word16]
	SCZO = cond(ax)
	ax = ax - di
	SCZO = cond(ax)
	// succ:  l0800_0B8B
l0800_0B8B:
	goto l0800_0BDC
	// succ:  l0800_0BDC
l0800_0B8D:
	si = bp - 0x0082
	// succ:  l0800_0B91
l0800_0B91:
	SCZO = cond(Mem0[ss:bp - 0x0088:word16] - 0x0000)
	branch Test(EQ,Z) l0800_0B9B
	// succ:  l0800_0B98 l0800_0B9B
l0800_0B98:
	goto l0800_0B24
	// succ:  l0800_0B24
l0800_0B9B:
	ax = bp - 0x0082
	di = si
	di = di - ax
	SCZO = cond(di)
	ax = di
	ax = ax | ax
	SZO = cond(ax)
	C = false
	branch Test(ULE,CZ) l0800_0BD7
	// succ:  l0800_0BA9 l0800_0BD7
l0800_0BA9:
	sp = sp - 2
	Mem0[ss:sp:word16] = di
	ax = bp - 0x0082
	sp = sp - 2
	Mem0[ss:sp:word16] = ax
	v19 = Mem0[ss:bp + 0x0004:word16]
	sp = sp - 2
	Mem0[ss:sp:word16] = v19
	call __write (retsize: 2;)
	sp = sp + 0x0006
	SCZO = cond(sp)
	Mem0[ss:bp - 0x008A:word16] = ax
	SCZO = cond(ax - di)
	branch Test(EQ,Z) l0800_0BD7
	// succ:  l0800_0BC0 l0800_0BD7
l0800_0BC0:
	SCZO = cond(Mem0[ss:bp - 0x008A:word16] - 0x0000)
	branch Test(UGE,C) l0800_0BCC
	// succ:  l0800_0BC7 l0800_0BCC
l0800_0BC7:
	ax = 0xFFFF
	goto l0800_0BD5
	// succ:  l0800_0BD5
l0800_0BCC:
	ax = Mem0[ss:bp + 0x0008:word16]
	ax = ax + Mem0[ss:bp - 0x008A:word16]
	SCZO = cond(ax)
	ax = ax - di
	SCZO = cond(ax)
	// succ:  l0800_0BD5
l0800_0BD5:
	goto l0800_0BDC
	// succ:  l0800_0BDC
l0800_0BD7:
	ax = Mem0[ss:bp + 0x0008:word16]
	// succ:  l0800_0BDC
l0800_0BDC:
	di = Mem0[ss:sp:word16]
	sp = sp + 2
	si = Mem0[ss:sp:word16]
	sp = sp + 2
	sp = bp
	bp = Mem0[ss:sp:word16]
	sp = sp + 2
	return
	// succ:  fn0800_0ACF_exit
fn0800_0ACF_exit:


// __write
// Return size: 2
define __write
fn0800_0BE2_entry:
	// succ:  l0800_0BE2
l0800_0BE2:
	sp = fp
	Top = 0
	sp = sp - 2
	Mem0[ss:sp:word16] = bp
	bp = sp
	bx = Mem0[ss:bp + 0x0004:word16]
	bx = bx << 0x0001
	SCZO = cond(bx)
	SZO = cond(Mem0[ds:bx + 0x0482:word16] & 0x0800)
	C = false
	branch Test(EQ,Z) l0800_0C02
	// succ:  l0800_0BF2 l0800_0C02
l0800_0BF2:
	ax = 0x0002
	sp = sp - 2
	Mem0[ss:sp:word16] = ax
	ax = ax ^ ax
	SZO = cond(ax)
	C = false
	sp = sp - 2
	Mem0[ss:sp:word16] = ax
	sp = sp - 2
	Mem0[ss:sp:word16] = ax
	v12 = Mem0[ss:bp + 0x0004:word16]
	sp = sp - 2
	Mem0[ss:sp:word16] = v12
	call _lseek (retsize: 2;)
	sp = bp
	// succ:  l0800_0C02
l0800_0C02:
	ah = 0x40
	bx = Mem0[ss:bp + 0x0004:word16]
	cx = Mem0[ss:bp + 0x0008:word16]
	dx = Mem0[ss:bp + 0x0006:word16]
	C = msdos_write_file(bx, cx, ds_dx, out ax)
	branch Test(ULT,C) l0800_0C20
	// succ:  l0800_0C11 l0800_0C20
l0800_0C11:
	sp = sp - 2
	Mem0[ss:sp:word16] = ax
	bx = Mem0[ss:bp + 0x0004:word16]
	bx = bx << 0x0001
	SCZO = cond(bx)
	v17 = Mem0[ds:bx + 0x0482:word16] | 0x1000
	Mem0[ds:bx + 0x0482:word16] = v17
	SZO = cond(Mem0[ds:bx + 0x0482:word16])
	C = false
	ax = Mem0[ss:sp:word16]
	sp = sp + 2
	goto l0800_0C26
	// succ:  l0800_0C26
l0800_0C20:
	sp = sp - 2
	Mem0[ss:sp:word16] = ax
	call __IOERROR (retsize: 2;)
	sp = sp + 0x0002
	// succ:  l0800_0C26
l0800_0C26:
	bp = Mem0[ss:sp:word16]
	sp = sp + 2
	return
	// succ:  fn0800_0BE2_exit
fn0800_0BE2_exit:


// _lseek
// Return size: 2
define _lseek
fn0800_0C28_entry:
	// succ:  l0800_0C28
l0800_0C28:
	sp = fp
	Top = 0
	sp = sp - 2
	Mem0[ss:sp:word16] = bp
	bp = sp
	bx = Mem0[ss:bp + 0x0004:word16]
	bx = bx << 0x0001
	SCZO = cond(bx)
	v8 = Mem0[ds:bx + 0x0482:word16] & 0xFDFF
	Mem0[ds:bx + 0x0482:word16] = v8
	SZO = cond(Mem0[ds:bx + 0x0482:word16])
	C = false
	ah = 0x42
	al = Mem0[ss:bp + 0x000A:byte]
	bx = Mem0[ss:bp + 0x0004:word16]
	cx = Mem0[ss:bp + 0x0008:word16]
	dx = Mem0[ss:bp + 0x0006:word16]
	C = msdos_set_file_position(bx, cx_dx, al, dx_ax)
	branch Test(ULT,C) l0800_0C4A
	// succ:  l0800_0C48 l0800_0C4A
l0800_0C48:
	goto l0800_0C51
	// succ:  l0800_0C51
l0800_0C4A:
	sp = sp - 2
	Mem0[ss:sp:word16] = ax
	call __IOERROR (retsize: 2;)
	sp = sp + 0x0002
	dx_ax = (word32) ax
	// succ:  l0800_0C51
l0800_0C51:
	bp = Mem0[ss:sp:word16]
	sp = sp + 2
	return
	// succ:  fn0800_0C28_exit
fn0800_0C28_exit:


// __LONGTOA
// Return size: 2
define __LONGTOA
fn0800_0C53_entry:
	// succ:  l0800_0C53
l0800_0C53:
	sp = fp
	Top = 0
	sp = sp - 2
	Mem0[ss:sp:word16] = bp
	bp = sp
	sp = sp - 0x0022
	SCZO = cond(sp)
	sp = sp - 2
	Mem0[ss:sp:word16] = si
	sp = sp - 2
	Mem0[ss:sp:word16] = di
	sp = sp - 2
	Mem0[ss:sp:word16] = es
	di = Mem0[ss:bp + 0x000A:word16]
	sp = sp - 2
	Mem0[ss:sp:word16] = ds
	es = Mem0[ss:sp:selector]
	sp = sp + 2
	bx = Mem0[ss:bp + 0x0008:word16]
	SCZO = cond(bx - 0x0024)
	branch Test(UGT,CZ) l0800_0CC1
	// succ:  l0800_0C69 l0800_0CC1
l0800_0C69:
	SCZO = cond(bl - 0x02)
	branch Test(ULT,C) l0800_0CC1
	// succ:  l0800_0C6E l0800_0CC1
l0800_0C6E:
	ax = Mem0[ss:bp + 0x000C:word16]
	cx = Mem0[ss:bp + 0x000E:word16]
	cx = cx | cx
	SZO = cond(cx)
	C = false
	branch Test(GE,SO) l0800_0C89
	// succ:  l0800_0C78 l0800_0C89
l0800_0C78:
	SCZO = cond(Mem0[ss:bp + 0x0006:byte] - 0x00)
	branch Test(EQ,Z) l0800_0C89
	// succ:  l0800_0C7E l0800_0C89
l0800_0C7E:
	Mem0[ds:di:byte] = 0x2D
	di = di + 0x0001
	SZO = cond(di)
	cx = -cx
	SCZO = cond(cx)
	C = cx == 0x0000
	ax = -ax
	SCZO = cond(ax)
	C = ax == 0x0000
	cx = cx - 0x00 - C
	SCZO = cond(cx)
	// succ:  l0800_0C89
l0800_0C89:
	si = bp - 0x0022
	branch cx == 0x0000 l0800_0C9D
	// succ:  l0800_0C8E l0800_0C9D
l0800_0C8E:
	v20 = ax
	ax = cx
	cx = v20
	dx = dx - dx
	SCZO = cond(dx)
	v23 = dx_ax
	dx = (uint16) (v23 % bx)
	ax = (uint16) (v23 /u bx)
	SCZO = cond(ax)
	v24 = ax
	ax = cx
	cx = v24
	v25 = dx_ax
	dx = (uint16) (v25 % bx)
	ax = (uint16) (v25 /u bx)
	SCZO = cond(ax)
	Mem0[ds:si:byte] = dl
	si = si + 0x0001
	SZO = cond(si)
	branch cx == 0x0000 l0800_0CA4
	// succ:  l0800_0C9B l0800_0CA4
l0800_0C9B:
	goto l0800_0C8E
	// succ:  l0800_0C8E
l0800_0C9D:
	dx = dx - dx
	SCZO = cond(dx)
	v28 = dx_ax
	dx = (uint16) (v28 % bx)
	ax = (uint16) (v28 /u bx)
	SCZO = cond(ax)
	Mem0[ds:si:byte] = dl
	si = si + 0x0001
	SZO = cond(si)
	// succ:  l0800_0CA4
l0800_0CA4:
	ax = ax | ax
	SZO = cond(ax)
	C = false
	branch Test(NE,Z) l0800_0C9D
	// succ:  l0800_0CA8 l0800_0C9D
l0800_0CA8:
	cx = bp - 0x0022
	cx = -cx
	SCZO = cond(cx)
	C = cx == 0x0000
	cx = cx + si
	SCZO = cond(cx)
	D = false
	// succ:  l0800_0CB0
l0800_0CB0:
	si = si - 0x0001
	SZO = cond(si)
	al = Mem0[ds:si:byte]
	al = al - 0x0A
	SCZO = cond(al)
	branch Test(UGE,C) l0800_0CBB
	// succ:  l0800_0CB7 l0800_0CBB
l0800_0CB7:
	al = al + 0x3A
	SCZO = cond(al)
	goto l0800_0CBE
	// succ:  l0800_0CBE
l0800_0CBB:
	al = al + Mem0[ss:bp + 0x0004:byte]
	SCZO = cond(al)
	// succ:  l0800_0CBE
l0800_0CBE:
	Mem0[es:di:byte] = al
	di = di + 0x0001
	cx = cx - 0x0001
	branch cx != 0x0000 l0800_0CB0
	// succ:  l0800_0CC1 l0800_0CB0
l0800_0CC1:
	al = 0x00
	Mem0[es:di:byte] = al
	di = di + 0x0001
	es = Mem0[ss:sp:selector]
	sp = sp + 2
	ax = Mem0[ss:bp + 0x000A:word16]
	// succ:  l0800_0CCA
l0800_0CCA:
	di = Mem0[ss:sp:word16]
	sp = sp + 2
	si = Mem0[ss:sp:word16]
	sp = sp + 2
	sp = bp
	bp = Mem0[ss:sp:word16]
	sp = sp + 2
	return
	// succ:  fn0800_0C53_exit
fn0800_0C53_exit:


// _eof
// Return size: 2
define _eof
fn0800_0D5F_entry:
	// succ:  l0800_0D5F
l0800_0D5F:
	sp = fp
	Top = 0
	sp = sp - 2
	Mem0[ss:sp:word16] = bp
	bp = sp
	sp = sp - 0x0004
	SCZO = cond(sp)
	bx = Mem0[ss:bp + 0x0004:word16]
	bx = bx << 0x0001
	SCZO = cond(bx)
	SZO = cond(Mem0[ds:bx + 0x0482:word16] & 0x0200)
	C = false
	branch Test(EQ,Z) l0800_0D78
	// succ:  l0800_0D72 l0800_0D78
l0800_0D72:
	ax = 0x0001
	goto l0800_0DC9
	// succ:  l0800_0DC9
l0800_0D78:
	ax = 0x4400
	bx = Mem0[ss:bp + 0x0004:word16]
	C = msdos_ioctl_get_device_info(bx, out dx)
	branch Test(ULT,C) l0800_0DC3
	// succ:  l0800_0D82 l0800_0DC3
l0800_0D82:
	SZO = cond(dl & 0x80)
	C = false
	branch Test(NE,Z) l0800_0DBF
	// succ:  l0800_0D87 l0800_0DBF
l0800_0D87:
	ax = 0x4201
	cx = cx ^ cx
	SZO = cond(cx)
	C = false
	dx = dx ^ dx
	SZO = cond(dx)
	C = false
	C = msdos_set_file_position(bx, cx_dx, al, dx_ax)
	branch Test(ULT,C) l0800_0DC3
	// succ:  l0800_0D92 l0800_0DC3
l0800_0D92:
	sp = sp - 2
	Mem0[ss:sp:word16] = dx
	sp = sp - 2
	Mem0[ss:sp:word16] = ax
	ax = 0x4202
	cx = cx ^ cx
	SZO = cond(cx)
	C = false
	dx = dx ^ dx
	SZO = cond(dx)
	C = false
	C = msdos_set_file_position(bx, cx_dx, al, dx_ax)
	Mem0[ss:bp - 0x0004:word16] = ax
	Mem0[ss:bp - 0x0002:word16] = dx
	dx = Mem0[ss:sp:word16]
	sp = sp + 2
	cx = Mem0[ss:sp:word16]
	sp = sp + 2
	branch Test(ULT,C) l0800_0DC3
	// succ:  l0800_0DA7 l0800_0DC3
l0800_0DA7:
	ax = 0x4200
	C = msdos_set_file_position(bx, cx_dx, al, dx_ax)
	branch Test(ULT,C) l0800_0DC3
	// succ:  l0800_0DAE l0800_0DC3
l0800_0DAE:
	SCZO = cond(dx - Mem0[ss:bp - 0x0002:word16])
	branch Test(ULT,C) l0800_0DBF
	// succ:  l0800_0DB3 l0800_0DBF
l0800_0DB3:
	branch Test(UGT,CZ) l0800_0DBA
	// succ:  l0800_0DB5 l0800_0DBA
l0800_0DB5:
	SCZO = cond(ax - Mem0[ss:bp - 0x0004:word16])
	branch Test(ULT,C) l0800_0DBF
	// succ:  l0800_0DBA l0800_0DBF
l0800_0DBA:
	ax = 0x0001
	goto l0800_0DC9
	// succ:  l0800_0DC9
l0800_0DBF:
	ax = ax ^ ax
	SZO = cond(ax)
	C = false
	goto l0800_0DC9
	// succ:  l0800_0DC9
l0800_0DC3:
	sp = sp - 2
	Mem0[ss:sp:word16] = ax
	call __IOERROR (retsize: 2;)
	sp = sp + 0x0002
	// succ:  l0800_0DC9
l0800_0DC9:
	sp = bp
	bp = Mem0[ss:sp:word16]
	sp = sp + 2
	return
	// succ:  fn0800_0D5F_exit
fn0800_0D5F_exit:


// _fflush
// Return size: 2
define _fflush
fn0800_0DCD_entry:
	// succ:  l0800_0DCD
l0800_0DCD:
	sp = fp
	Top = 0
	sp = sp - 2
	Mem0[ss:sp:word16] = bp
	bp = sp
	sp = sp - 2
	Mem0[ss:sp:word16] = si
	sp = sp - 2
	Mem0[ss:sp:word16] = di
	si = Mem0[ss:bp + 0x0004:word16]
	ax = Mem0[ds:si + 0x000E:word16]
	SCZO = cond(ax - si)
	branch Test(EQ,Z) l0800_0DE1
	// succ:  l0800_0DDC l0800_0DE1
l0800_0DDC:
	ax = 0xFFFF
	goto l0800_0E47
	// succ:  l0800_0E47
l0800_0DE1:
	SCZO = cond(Mem0[ds:si:word16] - 0x0000)
	branch Test(LT,SO) l0800_0E13
	// succ:  l0800_0DE6 l0800_0E13
l0800_0DE6:
	SZO = cond(Mem0[ds:si + 0x0002:word16] & 0x0008)
	C = false
	branch Test(NE,Z) l0800_0DF9
	// succ:  l0800_0DED l0800_0DF9
l0800_0DED:
	ax = Mem0[ds:si + 0x000A:word16]
	dx = si
	dx = dx + 0x0005
	SCZO = cond(dx)
	SCZO = cond(ax - dx)
	branch Test(NE,Z) l0800_0E0F
	// succ:  l0800_0DF9 l0800_0E0F
l0800_0DF9:
	Mem0[ds:si:word16] = 0x0000
	ax = Mem0[ds:si + 0x000A:word16]
	dx = si
	dx = dx + 0x0005
	SCZO = cond(dx)
	SCZO = cond(ax - dx)
	branch Test(NE,Z) l0800_0E0F
	// succ:  l0800_0E09 l0800_0E0F
l0800_0E09:
	ax = Mem0[ds:si + 0x0008:word16]
	Mem0[ds:si + 0x000A:word16] = ax
	// succ:  l0800_0E0F
l0800_0E0F:
	ax = ax ^ ax
	SZO = cond(ax)
	C = false
	goto l0800_0E47
	// succ:  l0800_0E47
l0800_0E13:
	di = Mem0[ds:si + 0x0006:word16]
	di = di + Mem0[ds:si:word16]
	SCZO = cond(di)
	di = di + 0x0001
	SZO = cond(di)
	v15 = Mem0[ds:si:word16] - di
	Mem0[ds:si:word16] = v15
	SCZO = cond(v15)
	sp = sp - 2
	Mem0[ss:sp:word16] = di
	ax = Mem0[ds:si + 0x0008:word16]
	Mem0[ds:si + 0x000A:word16] = ax
	sp = sp - 2
	Mem0[ss:sp:word16] = ax
	al = Mem0[ds:si + 0x0004:byte]
	ax = (int16) al
	sp = sp - 2
	Mem0[ss:sp:word16] = ax
	call _write (retsize: 2;)
	sp = sp + 0x0006
	SCZO = cond(sp)
	SCZO = cond(ax - di)
	branch Test(EQ,Z) l0800_0E43
	// succ:  l0800_0E32 l0800_0E43
l0800_0E32:
	SZO = cond(Mem0[ds:si + 0x0002:word16] & 0x0200)
	C = false
	branch Test(NE,Z) l0800_0E43
	// succ:  l0800_0E39 l0800_0E43
l0800_0E39:
	v17 = Mem0[ds:si + 0x0002:word16] | 0x0010
	Mem0[ds:si + 0x0002:word16] = v17
	SZO = cond(Mem0[ds:si + 0x0002:word16])
	C = false
	ax = 0xFFFF
	goto l0800_0E47
	// succ:  l0800_0E47
l0800_0E43:
	ax = ax ^ ax
	SZO = cond(ax)
	C = false
	// succ:  l0800_0E47
l0800_0E47:
	di = Mem0[ss:sp:word16]
	sp = sp + 2
	si = Mem0[ss:sp:word16]
	sp = sp + 2
	bp = Mem0[ss:sp:word16]
	sp = sp + 2
	return
	// succ:  fn0800_0DCD_exit
fn0800_0DCD_exit:


// _printf
// Return size: 2
define _printf
_printf_entry:
	// succ:  l0800_0E4B
l0800_0E4B:
	sp = fp
	Top = 0
	sp = sp - 2
	Mem0[ss:sp:word16] = bp
	bp = sp
	ax = 0x0F81
	sp = sp - 2
	Mem0[ss:sp:word16] = ax
	ax = 0x0352
	sp = sp - 2
	Mem0[ss:sp:word16] = ax
	v6 = Mem0[ss:bp + 0x0004:word16]
	sp = sp - 2
	Mem0[ss:sp:word16] = v6
	ax = bp + 0x0006
	sp = sp - 2
	Mem0[ss:sp:word16] = ax
	call __VPRINTER (retsize: 2;)
	sp = sp + 0x0008
	// succ:  l0800_0E62
l0800_0E62:
	bp = Mem0[ss:sp:word16]
	sp = sp + 2
	return
	// succ:  _printf_exit
_printf_exit:


// __fputc
// Return size: 2
define __fputc
fn0800_0E64_entry:
	// succ:  l0800_0E64
l0800_0E64:
	sp = fp
	Top = 0
	sp = sp - 2
	Mem0[ss:sp:word16] = bp
	bp = sp
	bx = Mem0[ss:bp + 0x0006:word16]
	v7 = Mem0[ds:bx:word16] - 0x0001
	Mem0[ds:bx:word16] = v7
	SZO = cond(v7)
	v9 = Mem0[ss:bp + 0x0006:word16]
	sp = sp - 2
	Mem0[ss:sp:word16] = v9
	al = Mem0[ss:bp + 0x0004:byte]
	ax = (int16) al
	sp = sp - 2
	Mem0[ss:sp:word16] = ax
	call _fputc (retsize: 2;)
	sp = bp
	// succ:  l0800_0E7B
l0800_0E7B:
	bp = Mem0[ss:sp:word16]
	sp = sp + 2
	return
	// succ:  fn0800_0E64_exit
fn0800_0E64_exit:


// _fputc
// Return size: 2
define _fputc
fn0800_0E7D_entry:
	// succ:  l0800_0E7D
l0800_0E7D:
	sp = fp
	Top = 0
	sp = sp - 2
	Mem0[ss:sp:word16] = bp
	bp = sp
	sp = sp - 0x0002
	SCZO = cond(sp)
	sp = sp - 2
	Mem0[ss:sp:word16] = si
	si = Mem0[ss:bp + 0x0006:word16]
	al = Mem0[ss:bp + 0x0004:byte]
	Mem0[ss:bp - 0x0001:byte] = al
	// succ:  l0800_0E8D
l0800_0E8D:
	v9 = Mem0[ds:si:word16] + 0x0001
	Mem0[ds:si:word16] = v9
	SZO = cond(v9)
	branch Test(GE,SO) l0800_0EC7
	// succ:  l0800_0E91 l0800_0EC7
l0800_0E91:
	al = Mem0[ss:bp - 0x0001:byte]
	v12 = Mem0[ds:si + 0x000A:word16] + 0x0001
	Mem0[ds:si + 0x000A:word16] = v12
	SZO = cond(v12)
	bx = Mem0[ds:si + 0x000A:word16]
	Mem0[ds:bx - 0x0001:byte] = al
	SZO = cond(Mem0[ds:si + 0x0002:word16] & 0x0008)
	C = false
	branch Test(EQ,Z) l0800_0EBF
	// succ:  l0800_0EA4 l0800_0EBF
l0800_0EA4:
	SCZO = cond(Mem0[ss:bp - 0x0001:byte] - 0x0A)
	branch Test(EQ,Z) l0800_0EB0
	// succ:  l0800_0EAA l0800_0EB0
l0800_0EAA:
	SCZO = cond(Mem0[ss:bp - 0x0001:byte] - 0x0D)
	branch Test(NE,Z) l0800_0EBF
	// succ:  l0800_0EB0 l0800_0EBF
l0800_0EB0:
	sp = sp - 2
	Mem0[ss:sp:word16] = si
	call _fflush (retsize: 2;)
	cx = Mem0[ss:sp:word16]
	sp = sp + 2
	ax = ax | ax
	SZO = cond(ax)
	C = false
	branch Test(EQ,Z) l0800_0EBF
	// succ:  l0800_0EB9 l0800_0EBF
l0800_0EB9:
	ax = 0xFFFF
	goto l0800_0F66
	// succ:  l0800_0F66
l0800_0EBF:
	al = Mem0[ss:bp - 0x0001:byte]
	ah = 0x00
	goto l0800_0F66
	// succ:  l0800_0F66
l0800_0EC7:
	v18 = Mem0[ds:si:word16] - 0x0001
	Mem0[ds:si:word16] = v18
	SZO = cond(v18)
	SZO = cond(Mem0[ds:si + 0x0002:word16] & 0x0090)
	C = false
	branch Test(NE,Z) l0800_0ED7
	// succ:  l0800_0ED0 l0800_0ED7
l0800_0ED0:
	SZO = cond(Mem0[ds:si + 0x0002:word16] & 0x0002)
	C = false
	branch Test(NE,Z) l0800_0EE2
	// succ:  l0800_0ED7 l0800_0EE2
l0800_0ED7:
	v19 = Mem0[ds:si + 0x0002:word16] | 0x0010
	Mem0[ds:si + 0x0002:word16] = v19
	SZO = cond(Mem0[ds:si + 0x0002:word16])
	C = false
	ax = 0xFFFF
	goto l0800_0F66
	// succ:  l0800_0F66
l0800_0EE2:
	v20 = Mem0[ds:si + 0x0002:word16] | 0x0100
	Mem0[ds:si + 0x0002:word16] = v20
	SZO = cond(Mem0[ds:si + 0x0002:word16])
	C = false
	SCZO = cond(Mem0[ds:si + 0x0006:word16] - 0x0000)
	branch Test(EQ,Z) l0800_0F11
	// succ:  l0800_0EED l0800_0F11
l0800_0EED:
	SCZO = cond(Mem0[ds:si:word16] - 0x0000)
	branch Test(EQ,Z) l0800_0F02
	// succ:  l0800_0EF2 l0800_0F02
l0800_0EF2:
	sp = sp - 2
	Mem0[ss:sp:word16] = si
	call _fflush (retsize: 2;)
	cx = Mem0[ss:sp:word16]
	sp = sp + 2
	ax = ax | ax
	SZO = cond(ax)
	C = false
	branch Test(EQ,Z) l0800_0F00
	// succ:  l0800_0EFB l0800_0F00
l0800_0EFB:
	ax = 0xFFFF
	goto l0800_0F66
	// succ:  l0800_0F66
l0800_0F00:
	goto l0800_0F0C
	// succ:  l0800_0F0C
l0800_0F02:
	ax = Mem0[ds:si + 0x0006:word16]
	dx = 0xFFFF
	dx = dx - ax
	SCZO = cond(dx)
	Mem0[ds:si:word16] = dx
	// succ:  l0800_0F0C
l0800_0F0C:
	goto l0800_0E8D
	// succ:  l0800_0E8D
l0800_0F11:
	SCZO = cond(Mem0[ss:bp - 0x0001:byte] - 0x0A)
	branch Test(NE,Z) l0800_0F36
	// succ:  l0800_0F17 l0800_0F36
l0800_0F17:
	SZO = cond(Mem0[ds:si + 0x0002:word16] & 0x0040)
	C = false
	branch Test(NE,Z) l0800_0F36
	// succ:  l0800_0F1E l0800_0F36
l0800_0F1E:
	ax = 0x0001
	sp = sp - 2
	Mem0[ss:sp:word16] = ax
	ax = 0x04E0
	sp = sp - 2
	Mem0[ss:sp:word16] = ax
	al = Mem0[ds:si + 0x0004:byte]
	ax = (int16) al
	sp = sp - 2
	Mem0[ss:sp:word16] = ax
	call __write (retsize: 2;)
	sp = sp + 0x0006
	SCZO = cond(sp)
	SCZO = cond(ax - 0x0001)
	branch Test(NE,Z) l0800_0F4E
	// succ:  l0800_0F36 l0800_0F4E
l0800_0F36:
	ax = 0x0001
	sp = sp - 2
	Mem0[ss:sp:word16] = ax
	ax = bp + 0x0004
	sp = sp - 2
	Mem0[ss:sp:word16] = ax
	al = Mem0[ds:si + 0x0004:byte]
	ax = (int16) al
	sp = sp - 2
	Mem0[ss:sp:word16] = ax
	call __write (retsize: 2;)
	sp = sp + 0x0006
	SCZO = cond(sp)
	SCZO = cond(ax - 0x0001)
	branch Test(EQ,Z) l0800_0F5F
	// succ:  l0800_0F4E l0800_0F5F
l0800_0F4E:
	SZO = cond(Mem0[ds:si + 0x0002:word16] & 0x0200)
	C = false
	branch Test(NE,Z) l0800_0F5F
	// succ:  l0800_0F55 l0800_0F5F
l0800_0F55:
	v22 = Mem0[ds:si + 0x0002:word16] | 0x0010
	Mem0[ds:si + 0x0002:word16] = v22
	SZO = cond(Mem0[ds:si + 0x0002:word16])
	C = false
	ax = 0xFFFF
	goto l0800_0F66
	// succ:  l0800_0F66
l0800_0F5F:
	al = Mem0[ss:bp - 0x0001:byte]
	ah = 0x00
	// succ:  l0800_0F66
l0800_0F66:
	si = Mem0[ss:sp:word16]
	sp = sp + 2
	sp = bp
	bp = Mem0[ss:sp:word16]
	sp = sp + 2
	return
	// succ:  fn0800_0E7D_exit
fn0800_0E7D_exit:


// __REALCVT
// Return size: 0
define __REALCVT
fn0800_1044_entry:
	// succ:  l0800_1044
l0800_1044:
	sp = fp
	Top = 0
	call Mem0[ds:0x05E0:word16] (retsize: 2;)
	return
	// succ:  fn0800_1044_exit
fn0800_1044_exit:


// fn0800_1048
// Return size: 2
define fn0800_1048
fn0800_1048_entry:
	// succ:  l0800_1048
l0800_1048:
	sp = fp
	Top = 0
	sp = sp - 2
	Mem0[ss:sp:word16] = bp
	bp = sp
	dx = Mem0[ss:bp + 0x0004:word16]
	cx = 0x0F04
	bx = 0x04E9
	D = false
	al = dh
	al = al >>u cl
	SCZO = cond(al)
	al = Mem0[ds:bx + (uint16) al:byte]
	Mem0[es:di:byte] = al
	di = di + 0x0001
	al = dh
	al = al & ch
	SZO = cond(al)
	C = false
	al = Mem0[ds:bx + (uint16) al:byte]
	Mem0[es:di:byte] = al
	di = di + 0x0001
	al = dl
	al = al >>u cl
	SCZO = cond(al)
	al = Mem0[ds:bx + (uint16) al:byte]
	Mem0[es:di:byte] = al
	di = di + 0x0001
	al = dl
	al = al & ch
	SZO = cond(al)
	C = false
	al = Mem0[ds:bx + (uint16) al:byte]
	Mem0[es:di:byte] = al
	di = di + 0x0001
	// succ:  l0800_106F
l0800_106F:
	bp = Mem0[ss:sp:word16]
	sp = sp + 2
	return
	// succ:  fn0800_1048_exit
fn0800_1048_exit:


// __VPRINTER
// Return size: 2
define __VPRINTER
fn0800_1073_entry:
	// succ:  l0800_1073
l0800_1073:
	sp = fp
	Top = 0
	sp = sp - 2
	Mem0[ss:sp:word16] = bp
	bp = sp
	sp = sp - 0x0098
	SCZO = cond(sp)
	sp = sp - 2
	Mem0[ss:sp:word16] = si
	sp = sp - 2
	Mem0[ss:sp:word16] = di
	Mem0[ss:bp - 0x0058:word16] = 0x0000
	Mem0[ss:bp - 0x0055:byte] = 0x50
	Mem0[ss:bp - 0x0002:word16] = 0x0000
	// succ:  l0800_10CD
l0800_10CD:
	sp = sp - 2
	Mem0[ss:sp:word16] = es
	D = false
	di = bp - 0x0054
	Mem0[ss:bp - 0x0096:word16] = di
	// succ:  l0800_10D6
l0800_10D6:
	di = Mem0[ss:bp - 0x0096:word16]
	// succ:  l0800_10DA
l0800_10DA:
	si = Mem0[ss:bp + 0x0006:word16]
	// succ:  l0800_10DD
l0800_10DD:
	al = Mem0[ds:si:byte]
	si = si + 0x0001
	al = al | al
	SZO = cond(al)
	C = false
	branch Test(EQ,Z) l0800_10F3
	// succ:  l0800_10E2 l0800_10F3
l0800_10E2:
	SCZO = cond(al - 0x25)
	branch Test(EQ,Z) l0800_10F6
	// succ:  l0800_10E6 l0800_10F6
l0800_10E6:
	Mem0[ds:di:byte] = al
	di = di + 0x0001
	SZO = cond(di)
	v15 = Mem0[ss:bp - 0x0055:byte] - 0x01
	Mem0[ss:bp - 0x0055:byte] = v15
	SZO = cond(v15)
	branch Test(GT,SZO) l0800_10DD
	// succ:  l0800_10EE l0800_10DD
l0800_10EE:
	call fn0800_10A1 (retsize: 2;)
	goto l0800_10DD
	// succ:  l0800_10DD
l0800_10F3:
	goto l0800_1572
	// succ:  l0800_1572
l0800_10F6:
	Mem0[ss:bp - 0x008A:word16] = si
	al = Mem0[ds:si:byte]
	si = si + 0x0001
	SCZO = cond(al - 0x25)
	branch Test(EQ,Z) l0800_10E6
	// succ:  l0800_10FF l0800_10E6
l0800_10FF:
	Mem0[ss:bp - 0x0096:word16] = di
	cx = cx ^ cx
	SZO = cond(cx)
	C = false
	Mem0[ss:bp - 0x008C:word16] = cx
	Mem0[ss:bp - 0x0098:word16] = cx
	Mem0[ss:bp - 0x008D:byte] = cl
	Mem0[ss:bp - 0x0092:word16] = 0xFFFF
	Mem0[ss:bp - 0x0090:word16] = 0xFFFF
	goto l0800_1120
	// succ:  l0800_1120
l0800_111F:
	al = Mem0[ds:si:byte]
	si = si + 0x0001
	// succ:  l0800_1120
l0800_1120:
	ah = ah ^ ah
	SZO = cond(ah)
	C = false
	dx = ax
	bx = ax
	bl = bl - 0x20
	SCZO = cond(bl)
	SCZO = cond(bl - 0x60)
	branch Test(UGE,C) l0800_1175
	// succ:  l0800_112E l0800_1175
l0800_112E:
	bl = Mem0[ds:bx + 0x04F9:byte]
	ax = bx
	SCZO = cond(ax - 0x0017)
	branch Test(ULE,CZ) l0800_113C
	// succ:  l0800_1139 l0800_113C
l0800_1139:
	goto l0800_1560
	// succ:  l0800_1560
l0800_113C:
	bx = ax
	bx = bx << 0x0001
	SCZO = cond(bx)
	switch (ax) { l0800_1190 l0800_1178 l0800_11D1 l0800_1184 l0800_11F6 l0800_1200 l0800_1242 l0800_124C l0800_125C l0800_11B7 l0800_1291 l0800_126C l0800_1270 l0800_1274 l0800_1316 l0800_13C8 l0800_1369 l0800_1389 l0800_1533 l0800_1560 l0800_1560 l0800_1560 l0800_11A3 l0800_11AD }
	// succ:  l0800_1190 l0800_1178 l0800_11D1 l0800_1184 l0800_11F6 l0800_1200 l0800_1242 l0800_124C l0800_125C l0800_11B7 l0800_1291 l0800_126C l0800_1270 l0800_1274 l0800_1316 l0800_13C8 l0800_1369 l0800_1389 l0800_1533 l0800_1560 l0800_1560 l0800_1560 l0800_11A3 l0800_11AD
l0800_1175:
	goto l0800_1560
	// succ:  l0800_1560
l0800_1178:
	SCZO = cond(ch - 0x00)
	branch Test(UGT,CZ) l0800_1175
	// succ:  l0800_117D l0800_1175
l0800_117D:
	v63 = Mem0[ss:bp - 0x0098:word16] | 0x0001
	Mem0[ss:bp - 0x0098:word16] = v63
	SZO = cond(Mem0[ss:bp - 0x0098:word16])
	C = false
	goto l0800_111F
	// succ:  l0800_111F
l0800_1184:
	SCZO = cond(ch - 0x00)
	branch Test(UGT,CZ) l0800_1175
	// succ:  l0800_1189 l0800_1175
l0800_1189:
	v26 = Mem0[ss:bp - 0x0098:word16] | 0x0002
	Mem0[ss:bp - 0x0098:word16] = v26
	SZO = cond(Mem0[ss:bp - 0x0098:word16])
	C = false
	goto l0800_111F
	// succ:  l0800_111F
l0800_1190:
	SCZO = cond(ch - 0x00)
	branch Test(UGT,CZ) l0800_1175
	// succ:  l0800_1195 l0800_1175
l0800_1195:
	SCZO = cond(Mem0[ss:bp - 0x008D:byte] - 0x2B)
	branch Test(EQ,Z) l0800_11A0
	// succ:  l0800_119C l0800_11A0
l0800_119C:
	Mem0[ss:bp - 0x008D:byte] = dl
	// succ:  l0800_11A0
l0800_11A0:
	goto l0800_111F
	// succ:  l0800_111F
l0800_11A3:
	v29 = Mem0[ss:bp - 0x0098:word16] & 0xFFDF
	Mem0[ss:bp - 0x0098:word16] = v29
	SZO = cond(Mem0[ss:bp - 0x0098:word16])
	C = false
	ch = 0x05
	goto l0800_111F
	// succ:  l0800_111F
l0800_11AD:
	v28 = Mem0[ss:bp - 0x0098:word16] | 0x0020
	Mem0[ss:bp - 0x0098:word16] = v28
	SZO = cond(Mem0[ss:bp - 0x0098:word16])
	C = false
	ch = 0x05
	goto l0800_111F
	// succ:  l0800_111F
l0800_11B7:
	SCZO = cond(ch - 0x00)
	branch Test(UGT,CZ) l0800_1200
	// succ:  l0800_11BC l0800_1200
l0800_11BC:
	SZO = cond(Mem0[ss:bp - 0x0098:word16] & 0x0002)
	C = false
	branch Test(NE,Z) l0800_11E5
	// succ:  l0800_11C4 l0800_11E5
l0800_11C4:
	v50 = Mem0[ss:bp - 0x0098:word16] | 0x0008
	Mem0[ss:bp - 0x0098:word16] = v50
	SZO = cond(Mem0[ss:bp - 0x0098:word16])
	C = false
	ch = 0x01
	goto l0800_111F
	// succ:  l0800_111F
l0800_11CE:
	goto l0800_1560
	// succ:  l0800_1560
l0800_11D1:
	di = Mem0[ss:bp + 0x0004:word16]
	ax = Mem0[ds:di:word16]
	v62 = Mem0[ss:bp + 0x0004:word16] + 0x0002
	Mem0[ss:bp + 0x0004:word16] = v62
	SCZO = cond(v62)
	SCZO = cond(ch - 0x02)
	branch Test(UGE,C) l0800_11E8
	// succ:  l0800_11DF l0800_11E8
l0800_11DF:
	Mem0[ss:bp - 0x0092:word16] = ax
	ch = 0x03
	// succ:  l0800_11E5
l0800_11E5:
	goto l0800_111F
	// succ:  l0800_111F
l0800_11E8:
	SCZO = cond(ch - 0x04)
	branch Test(NE,Z) l0800_11CE
	// succ:  l0800_11ED l0800_11CE
l0800_11ED:
	Mem0[ss:bp - 0x0090:word16] = ax
	ch = ch + 0x01
	SZO = cond(ch)
	goto l0800_111F
	// succ:  l0800_111F
l0800_11F6:
	SCZO = cond(ch - 0x04)
	branch Test(UGE,C) l0800_11CE
	// succ:  l0800_11FB l0800_11CE
l0800_11FB:
	ch = 0x04
	goto l0800_111F
	// succ:  l0800_111F
l0800_1200:
	v57 = ax
	ax = dx
	dx = v57
	al = al - 0x30
	SCZO = cond(al)
	ax = (int16) al
	SCZO = cond(ch - 0x02)
	branch Test(UGT,CZ) l0800_1224
	// succ:  l0800_1209 l0800_1224
l0800_1209:
	ch = 0x02
	v58 = Mem0[ss:bp - 0x0092:word16]
	Mem0[ss:bp - 0x0092:word16] = ax
	ax = v58
	ax = ax | ax
	SZO = cond(ax)
	C = false
	branch Test(LT,SO) l0800_11E5
	// succ:  l0800_1213 l0800_11E5
l0800_1213:
	ax = ax << 0x0001
	SCZO = cond(ax)
	dx = ax
	ax = ax << 0x0001
	SCZO = cond(ax)
	ax = ax << 0x0001
	SCZO = cond(ax)
	ax = ax + dx
	SCZO = cond(ax)
	v59 = Mem0[ss:bp - 0x0092:word16] + ax
	Mem0[ss:bp - 0x0092:word16] = v59
	SCZO = cond(v59)
	goto l0800_111F
	// succ:  l0800_111F
l0800_1224:
	SCZO = cond(ch - 0x04)
	branch Test(NE,Z) l0800_11CE
	// succ:  l0800_1229 l0800_11CE
l0800_1229:
	v60 = Mem0[ss:bp - 0x0090:word16]
	Mem0[ss:bp - 0x0090:word16] = ax
	ax = v60
	ax = ax | ax
	SZO = cond(ax)
	C = false
	branch Test(LT,SO) l0800_11E5
	// succ:  l0800_1231 l0800_11E5
l0800_1231:
	ax = ax << 0x0001
	SCZO = cond(ax)
	dx = ax
	ax = ax << 0x0001
	SCZO = cond(ax)
	ax = ax << 0x0001
	SCZO = cond(ax)
	ax = ax + dx
	SCZO = cond(ax)
	v61 = Mem0[ss:bp - 0x0090:word16] + ax
	Mem0[ss:bp - 0x0090:word16] = v61
	SCZO = cond(v61)
	goto l0800_111F
	// succ:  l0800_111F
l0800_1242:
	v56 = Mem0[ss:bp - 0x0098:word16] | 0x0010
	Mem0[ss:bp - 0x0098:word16] = v56
	SZO = cond(Mem0[ss:bp - 0x0098:word16])
	C = false
	ch = 0x05
	goto l0800_111F
	// succ:  l0800_111F
l0800_124C:
	v54 = Mem0[ss:bp - 0x0098:word16] | 0x0100
	Mem0[ss:bp - 0x0098:word16] = v54
	SZO = cond(Mem0[ss:bp - 0x0098:word16])
	C = false
	v55 = Mem0[ss:bp - 0x0098:word16] & 0xFFEF
	Mem0[ss:bp - 0x0098:word16] = v55
	SZO = cond(Mem0[ss:bp - 0x0098:word16])
	C = false
	ch = 0x05
	goto l0800_111F
	// succ:  l0800_111F
l0800_125C:
	v51 = Mem0[ss:bp - 0x0098:word16] & 0xFFEF
	Mem0[ss:bp - 0x0098:word16] = v51
	SZO = cond(Mem0[ss:bp - 0x0098:word16])
	C = false
	v52 = Mem0[ss:bp - 0x0098:word16] | 0x0080
	Mem0[ss:bp - 0x0098:word16] = v52
	SZO = cond(Mem0[ss:bp - 0x0098:word16])
	C = false
	ch = 0x05
	goto l0800_111F
	// succ:  l0800_111F
l0800_126C:
	bh = 0x08
	goto l0800_127A
	// succ:  l0800_127A
l0800_1270:
	bh = 0x0A
	goto l0800_127F
	// succ:  l0800_127F
l0800_1274:
	bh = 0x10
	bl = 0xE9
	bl = bl + dl
	SCZO = cond(bl)
	// succ:  l0800_127A
l0800_127A:
	Mem0[ss:bp - 0x008D:byte] = 0x00
	// succ:  l0800_127F
l0800_127F:
	Mem0[ss:bp - 0x0093:byte] = 0x00
	Mem0[ss:bp - 0x0094:byte] = dl
	di = Mem0[ss:bp + 0x0004:word16]
	ax = Mem0[ds:di:word16]
	dx = dx ^ dx
	SZO = cond(dx)
	C = false
	goto l0800_12A2
	// succ:  l0800_12A2
l0800_1291:
	bh = 0x0A
	Mem0[ss:bp - 0x0093:byte] = 0x01
	Mem0[ss:bp - 0x0094:byte] = dl
	di = Mem0[ss:bp + 0x0004:word16]
	ax = Mem0[ds:di:word16]
	dx_ax = (int32) ax
	// succ:  l0800_12A2
l0800_12A2:
	di = di + 0x0001
	SZO = cond(di)
	di = di + 0x0001
	SZO = cond(di)
	Mem0[ss:bp + 0x0006:word16] = si
	SZO = cond(Mem0[ss:bp - 0x0098:word16] & 0x0010)
	C = false
	branch Test(EQ,Z) l0800_12B3
	// succ:  l0800_12AF l0800_12B3
l0800_12AF:
	dx = Mem0[ds:di:word16]
	di = di + 0x0001
	SZO = cond(di)
	di = di + 0x0001
	SZO = cond(di)
	// succ:  l0800_12B3
l0800_12B3:
	Mem0[ss:bp + 0x0004:word16] = di
	di = bp - 0x0087
	ax = ax | ax
	SZO = cond(ax)
	C = false
	branch Test(NE,Z) l0800_12F1
	// succ:  l0800_12BE l0800_12F1
l0800_12BE:
	dx = dx | dx
	SZO = cond(dx)
	C = false
	branch Test(NE,Z) l0800_12F1
	// succ:  l0800_12C2 l0800_12F1
l0800_12C2:
	SCZO = cond(Mem0[ss:bp - 0x0090:word16] - 0x0000)
	branch Test(NE,Z) l0800_12F6
	// succ:  l0800_12C9 l0800_12F6
l0800_12C9:
	di = Mem0[ss:bp - 0x0096:word16]
	cx = Mem0[ss:bp - 0x0092:word16]
	branch cx == 0x0000 l0800_12EE
	// succ:  l0800_12D3 l0800_12EE
l0800_12D3:
	SCZO = cond(cx - 0xFFFF)
	branch Test(EQ,Z) l0800_12EE
	// succ:  l0800_12D8 l0800_12EE
l0800_12D8:
	ax = Mem0[ss:bp - 0x0098:word16]
	ax = ax & 0x0008
	SZO = cond(ax)
	C = false
	branch Test(EQ,Z) l0800_12E5
	// succ:  l0800_12E1 l0800_12E5
l0800_12E1:
	dl = 0x30
	goto l0800_12E7
	// succ:  l0800_12E7
l0800_12E5:
	dl = 0x20
	// succ:  l0800_12E7
l0800_12E7:
	al = dl
	call fn0800_1099 (retsize: 2;)
	sp = sp + 0xFFFE
	cx = cx - 0x0001
	branch cx != 0x0000 l0800_12E7
	// succ:  l0800_12EE l0800_12E7
l0800_12EE:
	goto l0800_10DA
	// succ:  l0800_10DA
l0800_12F1:
	v43 = Mem0[ss:bp - 0x0098:word16] | 0x0004
	Mem0[ss:bp - 0x0098:word16] = v43
	SZO = cond(Mem0[ss:bp - 0x0098:word16])
	C = false
	// succ:  l0800_12F6
l0800_12F6:
	sp = sp - 2
	Mem0[ss:sp:word16] = dx
	sp = sp - 2
	Mem0[ss:sp:word16] = ax
	sp = sp - 2
	Mem0[ss:sp:word16] = di
	al = bh
	ax = (int16) al
	sp = sp - 2
	Mem0[ss:sp:word16] = ax
	al = Mem0[ss:bp - 0x0093:byte]
	sp = sp - 2
	Mem0[ss:sp:word16] = ax
	sp = sp - 2
	Mem0[ss:sp:word16] = bx
	call __LONGTOA (retsize: 2;)
	sp = sp + 0x000C
	sp = sp - 2
	Mem0[ss:sp:word16] = ss
	es = Mem0[ss:sp:selector]
	sp = sp + 2
	dx = Mem0[ss:bp - 0x0090:word16]
	dx = dx | dx
	SZO = cond(dx)
	C = false
	branch Test(GT,SZO) l0800_1313
	// succ:  l0800_1310 l0800_1313
l0800_1310:
	goto l0800_1427
	// succ:  l0800_1427
l0800_1313:
	goto l0800_1437
	// succ:  l0800_1437
l0800_1316:
	Mem0[ss:bp - 0x0094:byte] = dl
	Mem0[ss:bp + 0x0006:word16] = si
	di = bp - 0x0088
	bx = Mem0[ss:bp + 0x0004:word16]
	v45 = Mem0[ds:bx:word16]
	sp = sp - 2
	Mem0[ss:sp:word16] = v45
	bx = bx + 0x0001
	SZO = cond(bx)
	bx = bx + 0x0001
	SZO = cond(bx)
	Mem0[ss:bp + 0x0004:word16] = bx
	SZO = cond(Mem0[ss:bp - 0x0098:word16] & 0x0020)
	C = false
	branch Test(EQ,Z) l0800_1342
	// succ:  l0800_1333 l0800_1342
l0800_1333:
	v46 = Mem0[ds:bx:word16]
	sp = sp - 2
	Mem0[ss:sp:word16] = v46
	bx = bx + 0x0001
	SZO = cond(bx)
	bx = bx + 0x0001
	SZO = cond(bx)
	Mem0[ss:bp + 0x0004:word16] = bx
	sp = sp - 2
	Mem0[ss:sp:word16] = ss
	es = Mem0[ss:sp:selector]
	sp = sp + 2
	call fn0800_1048 (retsize: 2;)
	sp = sp + 0x0002
	al = 0x3A
	Mem0[es:di:byte] = al
	di = di + 0x0001
	// succ:  l0800_1342
l0800_1342:
	sp = sp - 2
	Mem0[ss:sp:word16] = ss
	es = Mem0[ss:sp:selector]
	sp = sp + 2
	call fn0800_1048 (retsize: 2;)
	sp = sp + 0x0002
	Mem0[ds:di:byte] = 0x00
	Mem0[ss:bp - 0x0093:byte] = 0x00
	v48 = Mem0[ss:bp - 0x0098:word16] & 0xFFFB
	Mem0[ss:bp - 0x0098:word16] = v48
	SZO = cond(Mem0[ss:bp - 0x0098:word16])
	C = false
	cx = bp - 0x0088
	di = di - cx
	SCZO = cond(di)
	v49 = di
	di = cx
	cx = v49
	dx = Mem0[ss:bp - 0x0090:word16]
	SCZO = cond(dx - cx)
	branch Test(GT,SZO) l0800_1366
	// succ:  l0800_1364 l0800_1366
l0800_1364:
	dx = cx
	// succ:  l0800_1366
l0800_1366:
	goto l0800_1427
	// succ:  l0800_1427
l0800_1369:
	Mem0[ss:bp + 0x0006:word16] = si
	Mem0[ss:bp - 0x0094:byte] = dl
	di = Mem0[ss:bp + 0x0004:word16]
	ax = Mem0[ds:di:word16]
	v33 = Mem0[ss:bp + 0x0004:word16] + 0x0002
	Mem0[ss:bp + 0x0004:word16] = v33
	SCZO = cond(v33)
	sp = sp - 2
	Mem0[ss:sp:word16] = ss
	es = Mem0[ss:sp:selector]
	sp = sp + 2
	di = bp - 0x0087
	ah = ah ^ ah
	SZO = cond(ah)
	C = false
	Mem0[ds:di:word16] = ax
	cx = 0x0001
	goto l0800_1468
	// succ:  l0800_1468
l0800_1389:
	Mem0[ss:bp + 0x0006:word16] = si
	Mem0[ss:bp - 0x0094:byte] = dl
	di = Mem0[ss:bp + 0x0004:word16]
	SZO = cond(Mem0[ss:bp - 0x0098:word16] & 0x0020)
	C = false
	branch Test(NE,Z) l0800_13A7
	// succ:  l0800_139B l0800_13A7
l0800_139B:
	di = Mem0[ds:di:word16]
	v32 = Mem0[ss:bp + 0x0004:word16] + 0x0002
	Mem0[ss:bp + 0x0004:word16] = v32
	SCZO = cond(v32)
	sp = sp - 2
	Mem0[ss:sp:word16] = ds
	es = Mem0[ss:sp:selector]
	sp = sp + 2
	di = di | di
	SZO = cond(di)
	C = false
	goto l0800_13B1
	// succ:  l0800_13B1
l0800_13A7:
	es_di = Mem0[ds:di + 0x0000:segptr32]
	v35 = Mem0[ss:bp + 0x0004:word16] + 0x0004
	Mem0[ss:bp + 0x0004:word16] = v35
	SCZO = cond(v35)
	ax = es
	ax = ax | di
	SZO = cond(ax)
	C = false
	// succ:  l0800_13B1
l0800_13B1:
	branch Test(NE,Z) l0800_13B8
	// succ:  l0800_13B3 l0800_13B8
l0800_13B3:
	sp = sp - 2
	Mem0[ss:sp:word16] = ds
	es = Mem0[ss:sp:selector]
	sp = sp + 2
	di = 0x04E2
	// succ:  l0800_13B8
l0800_13B8:
	call fn0800_108C (retsize: 2;)
	SCZO = cond(cx - Mem0[ss:bp - 0x0090:word16])
	branch Test(ULE,CZ) l0800_13C5
	// succ:  l0800_13C1 l0800_13C5
l0800_13C1:
	cx = Mem0[ss:bp - 0x0090:word16]
	// succ:  l0800_13C5
l0800_13C5:
	goto l0800_1468
	// succ:  l0800_1468
l0800_13C8:
	Mem0[ss:bp + 0x0006:word16] = si
	Mem0[ss:bp - 0x0094:byte] = dl
	di = Mem0[ss:bp + 0x0004:word16]
	cx = Mem0[ss:bp - 0x0090:word16]
	cx = cx | cx
	SZO = cond(cx)
	C = false
	branch Test(GE,SO) l0800_13DD
	// succ:  l0800_13DA l0800_13DD
l0800_13DA:
	cx = 0x0006
	// succ:  l0800_13DD
l0800_13DD:
	sp = sp - 2
	Mem0[ss:sp:word16] = di
	sp = sp - 2
	Mem0[ss:sp:word16] = cx
	bx = bp - 0x0087
	sp = sp - 2
	Mem0[ss:sp:word16] = bx
	sp = sp - 2
	Mem0[ss:sp:word16] = dx
	ax = 0x0001
	ax = ax & Mem0[ss:bp - 0x0098:word16]
	SZO = cond(ax)
	C = false
	sp = sp - 2
	Mem0[ss:sp:word16] = ax
	ax = Mem0[ss:bp - 0x0098:word16]
	SZO = cond(ax & 0x0080)
	C = false
	branch Test(EQ,Z) l0800_1400
	// succ:  l0800_13F6 l0800_1400
l0800_13F6:
	ax = 0x0002
	Mem0[ss:bp - 0x0004:word16] = 0x0004
	goto l0800_1417
	// succ:  l0800_1417
l0800_1400:
	SZO = cond(ax & 0x0100)
	C = false
	branch Test(EQ,Z) l0800_140F
	// succ:  l0800_1405 l0800_140F
l0800_1405:
	ax = 0x0008
	Mem0[ss:bp - 0x0004:word16] = 0x000A
	goto l0800_1417
	// succ:  l0800_1417
l0800_140F:
	Mem0[ss:bp - 0x0004:word16] = 0x0008
	ax = 0x0006
	// succ:  l0800_1417
l0800_1417:
	sp = sp - 2
	Mem0[ss:sp:word16] = ax
	call __REALCVT (retsize: 2;)
	ax = Mem0[ss:bp - 0x0004:word16]
	v53 = Mem0[ss:bp + 0x0004:word16] + ax
	Mem0[ss:bp + 0x0004:word16] = v53
	SCZO = cond(v53)
	sp = sp - 2
	Mem0[ss:sp:word16] = ss
	es = Mem0[ss:sp:selector]
	sp = sp + 2
	di = bp - 0x0087
	// succ:  l0800_1427
l0800_1427:
	SZO = cond(Mem0[ss:bp - 0x0098:word16] & 0x0008)
	C = false
	branch Test(EQ,Z) l0800_1449
	// succ:  l0800_142F l0800_1449
l0800_142F:
	dx = Mem0[ss:bp - 0x0092:word16]
	dx = dx | dx
	SZO = cond(dx)
	C = false
	branch Test(LE,SZO) l0800_1449
	// succ:  l0800_1437 l0800_1449
l0800_1437:
	call fn0800_108C (retsize: 2;)
	SCZO = cond(Mem0[es:di:byte] - 0x2D)
	branch Test(NE,Z) l0800_1441
	// succ:  l0800_1440 l0800_1441
l0800_1440:
	cx = cx - 0x0001
	SZO = cond(cx)
	// succ:  l0800_1441
l0800_1441:
	dx = dx - cx
	SCZO = cond(dx)
	branch Test(LE,SZO) l0800_1449
	// succ:  l0800_1445 l0800_1449
l0800_1445:
	Mem0[ss:bp - 0x008C:word16] = dx
	// succ:  l0800_1449
l0800_1449:
	al = Mem0[ss:bp - 0x008D:byte]
	al = al | al
	SZO = cond(al)
	C = false
	branch Test(EQ,Z) l0800_1465
	// succ:  l0800_1451 l0800_1465
l0800_1451:
	SCZO = cond(Mem0[es:di:byte] - 0x2D)
	branch Test(EQ,Z) l0800_1465
	// succ:  l0800_1457 l0800_1465
l0800_1457:
	v40 = Mem0[ss:bp - 0x008C:word16] - 0x0001
	Mem0[ss:bp - 0x008C:word16] = v40
	SCZO = cond(v40)
	v41 = Mem0[ss:bp - 0x008C:word16] + 0x00 + C
	Mem0[ss:bp - 0x008C:word16] = v41
	SCZO = cond(v41)
	di = di - 0x0001
	SZO = cond(di)
	Mem0[es:di:byte] = al
	// succ:  l0800_1465
l0800_1465:
	call fn0800_108C (retsize: 2;)
	// succ:  l0800_1468
l0800_1468:
	si = di
	di = Mem0[ss:bp - 0x0096:word16]
	bx = Mem0[ss:bp - 0x0092:word16]
	ax = 0x0005
	ax = ax & Mem0[ss:bp - 0x0098:word16]
	SZO = cond(ax)
	C = false
	SCZO = cond(ax - 0x0005)
	branch Test(NE,Z) l0800_1494
	// succ:  l0800_147E l0800_1494
l0800_147E:
	ah = Mem0[ss:bp - 0x0094:byte]
	SCZO = cond(ah - 0x6F)
	branch Test(NE,Z) l0800_1497
	// succ:  l0800_1487 l0800_1497
l0800_1487:
	SCZO = cond(Mem0[ss:bp - 0x008C:word16] - 0x0000)
	branch Test(GT,SZO) l0800_1494
	// succ:  l0800_148E l0800_1494
l0800_148E:
	Mem0[ss:bp - 0x008C:word16] = 0x0001
	// succ:  l0800_1494
l0800_1494:
	goto l0800_14B5
	// succ:  l0800_14B5
l0800_1497:
	SCZO = cond(ah - 0x78)
	branch Test(EQ,Z) l0800_14A1
	// succ:  l0800_149C l0800_14A1
l0800_149C:
	SCZO = cond(ah - 0x58)
	branch Test(NE,Z) l0800_14B5
	// succ:  l0800_14A1 l0800_14B5
l0800_14A1:
	v36 = Mem0[ss:bp - 0x0098:word16] | 0x0040
	Mem0[ss:bp - 0x0098:word16] = v36
	SZO = cond(Mem0[ss:bp - 0x0098:word16])
	C = false
	bx = bx - 0x0001
	SZO = cond(bx)
	bx = bx - 0x0001
	SZO = cond(bx)
	v37 = Mem0[ss:bp - 0x008C:word16] - 0x0002
	Mem0[ss:bp - 0x008C:word16] = v37
	SCZO = cond(v37)
	branch Test(GE,SO) l0800_14B5
	// succ:  l0800_14AF l0800_14B5
l0800_14AF:
	Mem0[ss:bp - 0x008C:word16] = 0x0000
	// succ:  l0800_14B5
l0800_14B5:
	cx = cx + Mem0[ss:bp - 0x008C:word16]
	SCZO = cond(cx)
	SZO = cond(Mem0[ss:bp - 0x0098:word16] & 0x0002)
	C = false
	branch Test(NE,Z) l0800_14CD
	// succ:  l0800_14C1 l0800_14CD
l0800_14C1:
	goto l0800_14C9
	// succ:  l0800_14C9
l0800_14C3:
	al = 0x20
	call fn0800_1099 (retsize: 2;)
	sp = sp + 0xFFFE
	bx = bx - 0x0001
	SZO = cond(bx)
	// succ:  l0800_14C9
l0800_14C9:
	SCZO = cond(bx - cx)
	branch Test(GT,SZO) l0800_14C3
	// succ:  l0800_14CD l0800_14C3
l0800_14CD:
	SZO = cond(Mem0[ss:bp - 0x0098:word16] & 0x0040)
	C = false
	branch Test(EQ,Z) l0800_14E1
	// succ:  l0800_14D5 l0800_14E1
l0800_14D5:
	al = 0x30
	call fn0800_1099 (retsize: 2;)
	sp = sp + 0xFFFE
	al = Mem0[ss:bp - 0x0094:byte]
	call fn0800_1099 (retsize: 2;)
	sp = sp + 0xFFFE
	// succ:  l0800_14E1
l0800_14E1:
	dx = Mem0[ss:bp - 0x008C:word16]
	dx = dx | dx
	SZO = cond(dx)
	C = false
	branch Test(LE,SZO) l0800_1510
	// succ:  l0800_14E9 l0800_1510
l0800_14E9:
	cx = cx - dx
	SCZO = cond(cx)
	bx = bx - dx
	SCZO = cond(bx)
	al = Mem0[es:si:byte]
	SCZO = cond(al - 0x2D)
	branch Test(EQ,Z) l0800_14FC
	// succ:  l0800_14F4 l0800_14FC
l0800_14F4:
	SCZO = cond(al - 0x20)
	branch Test(EQ,Z) l0800_14FC
	// succ:  l0800_14F8 l0800_14FC
l0800_14F8:
	SCZO = cond(al - 0x2B)
	branch Test(NE,Z) l0800_1503
	// succ:  l0800_14FC l0800_1503
l0800_14FC:
	al = Mem0[ds:si:byte]
	si = si + 0x0001
	call fn0800_1099 (retsize: 2;)
	sp = sp + 0xFFFE
	cx = cx - 0x0001
	SZO = cond(cx)
	bx = bx - 0x0001
	SZO = cond(bx)
	// succ:  l0800_1503
l0800_1503:
	v38 = dx
	dx = cx
	cx = v38
	branch cx == 0x0000 l0800_150E
	// succ:  l0800_1507 l0800_150E
l0800_1507:
	al = 0x30
	call fn0800_1099 (retsize: 2;)
	sp = sp + 0xFFFE
	cx = cx - 0x0001
	branch cx != 0x0000 l0800_1507
	// succ:  l0800_150E l0800_1507
l0800_150E:
	v39 = dx
	dx = cx
	cx = v39
	// succ:  l0800_1510
l0800_1510:
	branch cx == 0x0000 l0800_1523
	// succ:  l0800_1512 l0800_1523
l0800_1512:
	bx = bx - cx
	SCZO = cond(bx)
	// succ:  l0800_1514
l0800_1514:
	al = Mem0[ds:si:byte]
	si = si + 0x0001
	Mem0[ds:di:byte] = al
	di = di + 0x0001
	SZO = cond(di)
	v42 = Mem0[ss:bp - 0x0055:byte] - 0x01
	Mem0[ss:bp - 0x0055:byte] = v42
	SZO = cond(v42)
	branch Test(GT,SZO) l0800_1521
	// succ:  l0800_151E l0800_1521
l0800_151E:
	call fn0800_10A1 (retsize: 2;)
	// succ:  l0800_1521
l0800_1521:
	cx = cx - 0x0001
	branch cx != 0x0000 l0800_1514
	// succ:  l0800_1523 l0800_1514
l0800_1523:
	bx = bx | bx
	SZO = cond(bx)
	C = false
	branch Test(LE,SZO) l0800_1530
	// succ:  l0800_1527 l0800_1530
l0800_1527:
	cx = bx
	// succ:  l0800_1529
l0800_1529:
	al = 0x20
	call fn0800_1099 (retsize: 2;)
	sp = sp + 0xFFFE
	cx = cx - 0x0001
	branch cx != 0x0000 l0800_1529
	// succ:  l0800_1530 l0800_1529
l0800_1530:
	goto l0800_10DA
	// succ:  l0800_10DA
l0800_1533:
	Mem0[ss:bp + 0x0006:word16] = si
	di = Mem0[ss:bp + 0x0004:word16]
	SZO = cond(Mem0[ss:bp - 0x0098:word16] & 0x0020)
	C = false
	branch Test(NE,Z) l0800_154B
	// succ:  l0800_1541 l0800_154B
l0800_1541:
	di = Mem0[ds:di:word16]
	v30 = Mem0[ss:bp + 0x0004:word16] + 0x0002
	Mem0[ss:bp + 0x0004:word16] = v30
	SCZO = cond(v30)
	sp = sp - 2
	Mem0[ss:sp:word16] = ds
	es = Mem0[ss:sp:selector]
	sp = sp + 2
	goto l0800_1551
	// succ:  l0800_1551
l0800_154B:
	es_di = Mem0[ds:di + 0x0000:segptr32]
	v44 = Mem0[ss:bp + 0x0004:word16] + 0x0004
	Mem0[ss:bp + 0x0004:word16] = v44
	SCZO = cond(v44)
	// succ:  l0800_1551
l0800_1551:
	ax = 0x0050
	al = al - Mem0[ss:bp - 0x0055:byte]
	SCZO = cond(al)
	ax = ax + Mem0[ss:bp - 0x0058:word16]
	SCZO = cond(ax)
	Mem0[es:di:word16] = ax
	goto l0800_10D6
	// succ:  l0800_10D6
l0800_1560:
	si = Mem0[ss:bp - 0x008A:word16]
	di = Mem0[ss:bp - 0x0096:word16]
	al = 0x25
	// succ:  l0800_156A
l0800_156A:
	call fn0800_1099 (retsize: 2;)
	sp = sp + 0xFFFE
	al = Mem0[ds:si:byte]
	si = si + 0x0001
	al = al | al
	SZO = cond(al)
	C = false
	branch Test(NE,Z) l0800_156A
	// succ:  l0800_1572 l0800_156A
l0800_1572:
	SCZO = cond(Mem0[ss:bp - 0x0055:byte] - 0x50)
	branch Test(GE,SO) l0800_157B
	// succ:  l0800_1578 l0800_157B
l0800_1578:
	call fn0800_10A1 (retsize: 2;)
	// succ:  l0800_157B
l0800_157B:
	es = Mem0[ss:sp:selector]
	sp = sp + 2
	SCZO = cond(Mem0[ss:bp - 0x0002:word16] - 0x0000)
	branch Test(EQ,Z) l0800_1589
	// succ:  l0800_1582 l0800_1589
l0800_1582:
	ax = 0xFFFF
	goto l0800_158E
	// succ:  l0800_158E
l0800_1589:
	ax = Mem0[ss:bp - 0x0058:word16]
	// succ:  l0800_158E
l0800_158E:
	di = Mem0[ss:sp:word16]
	sp = sp + 2
	si = Mem0[ss:sp:word16]
	sp = sp + 2
	sp = bp
	bp = Mem0[ss:sp:word16]
	sp = sp + 2
	return
	// succ:  fn0800_1073_exit
fn0800_1073_exit:


// fn0800_108C
// Return size: 2
define fn0800_108C
fn0800_108C_entry:
	// succ:  l0800_108C
l0800_108C:
	sp = fp
	Top = 0
	sp = sp - 2
	Mem0[ss:sp:word16] = di
	cx = 0xFFFF
	al = al ^ al
	SZO = cond(al)
	C = false
	// succ:  l0800_1092
l0800_1092:
	branch cx == 0x0000 l0800_1094
	// succ:  l0800_1092_1 l0800_1094
l0800_1092_1:
	SCZO = cond(al - Mem0[es:di:byte])
	di = di + 0x0001
	cx = cx - 0x0001
	branch Test(EQ,Z) l0800_1092
	// succ:  l0800_1094 l0800_1092
l0800_1094:
	cx = ~cx
	cx = cx - 0x0001
	SZO = cond(cx)
	di = Mem0[ss:sp:word16]
	sp = sp + 2
	return
	// succ:  fn0800_108C_exit
fn0800_108C_exit:


// fn0800_1099
// Return size: 2
define fn0800_1099
fn0800_1099_entry:
	// succ:  l0800_1099
l0800_1099:
	sp = fp
	Top = 0
	Mem0[ds:di:byte] = al
	di = di + 0x0001
	SZO = cond(di)
	v9 = Mem0[ss:bp - 0x0055:byte] - 0x01
	Mem0[ss:bp - 0x0055:byte] = v9
	SZO = cond(v9)
	branch Test(LE,SZO) l0800_10CC_in_fn0800_1099
	// succ:  l0800_109F_thunk_fn0800_10A1 l0800_10CC_in_fn0800_1099
l0800_109F_thunk_fn0800_10A1:
	call fn0800_10A1 (retsize: 0;)
	return
	// succ:  fn0800_1099_exit
l0800_10CC_in_fn0800_1099:
	return
	// succ:  fn0800_1099_exit
fn0800_1099_exit:


// fn0800_10A1
// Return size: 2
define fn0800_10A1
fn0800_10A1_entry:
	// succ:  l0800_10A1
l0800_10A1:
	sp = fp
	Top = 0
	sp = sp - 2
	Mem0[ss:sp:word16] = bx
	sp = sp - 2
	Mem0[ss:sp:word16] = cx
	sp = sp - 2
	Mem0[ss:sp:word16] = dx
	sp = sp - 2
	Mem0[ss:sp:word16] = es
	ax = bp - 0x0054
	di = di - ax
	SCZO = cond(di)
	ax = bp - 0x0054
	sp = sp - 2
	Mem0[ss:sp:word16] = ax
	sp = sp - 2
	Mem0[ss:sp:word16] = di
	v12 = Mem0[ss:bp + 0x0008:word16]
	sp = sp - 2
	Mem0[ss:sp:word16] = v12
	call SEQ(0x0800, Mem0[ss:bp + 0x000A:word16]) (retsize: 2;)
	ax = ax | ax
	SZO = cond(ax)
	C = false
	branch Test(NE,Z) l0800_10BE
	// succ:  l0800_10B9 l0800_10BE
l0800_10B9:
	Mem0[ss:bp - 0x0002:word16] = 0x0001
	// succ:  l0800_10BE
l0800_10BE:
	Mem0[ss:bp - 0x0055:byte] = 0x50
	v16 = Mem0[ss:bp - 0x0058:word16] + di
	Mem0[ss:bp - 0x0058:word16] = v16
	SCZO = cond(v16)
	di = bp - 0x0054
	es = Mem0[ss:sp:selector]
	sp = sp + 2
	dx = Mem0[ss:sp:word16]
	sp = sp + 2
	cx = Mem0[ss:sp:word16]
	sp = sp + 2
	bx = Mem0[ss:sp:word16]
	sp = sp + 2
	// succ:  l0800_10CC
l0800_10CC:
	return
	// succ:  fn0800_10A1_exit
fn0800_10A1_exit:


// fn0800_1596
// Return size: 2
define fn0800_1596
fn0800_1596_entry:
	// succ:  l0800_1596
l0800_1596:
	sp = fp
	Top = 0
	sp = sp - 2
	Mem0[ss:sp:word16] = bp
	bp = sp
	sp = sp - 2
	Mem0[ss:sp:word16] = si
	sp = sp - 2
	Mem0[ss:sp:word16] = di
	si = Mem0[ss:bp + 0x0004:word16]
	SCZO = cond(Mem0[ds:0x062A:word16] - 0x0000)
	branch Test(EQ,Z) l0800_15C1
	// succ:  l0800_15A5 l0800_15C1
l0800_15A5:
	bx = Mem0[ds:0x062A:word16]
	di = Mem0[ds:bx + 0x0006:word16]
	bx = Mem0[ds:0x062A:word16]
	Mem0[ds:bx + 0x0006:word16] = si
	Mem0[ds:di + 0x0004:word16] = si
	Mem0[ds:si + 0x0006:word16] = di
	ax = Mem0[ds:0x062A:word16]
	Mem0[ds:si + 0x0004:word16] = ax
	goto l0800_15CB
	// succ:  l0800_15CB
l0800_15C1:
	Mem0[ds:0x062A:word16] = si
	Mem0[ds:si + 0x0004:word16] = si
	Mem0[ds:si + 0x0006:word16] = si
	// succ:  l0800_15CB
l0800_15CB:
	di = Mem0[ss:sp:word16]
	sp = sp + 2
	si = Mem0[ss:sp:word16]
	sp = sp + 2
	bp = Mem0[ss:sp:word16]
	sp = sp + 2
	return
	// succ:  fn0800_1596_exit
fn0800_1596_exit:


// fn0800_15CF
// Return size: 2
define fn0800_15CF
fn0800_15CF_entry:
	// succ:  l0800_15CF
l0800_15CF:
	sp = fp
	Top = 0
	sp = sp - 2
	Mem0[ss:sp:word16] = bp
	bp = sp
	sp = sp - 0x0002
	SCZO = cond(sp)
	sp = sp - 2
	Mem0[ss:sp:word16] = si
	sp = sp - 2
	Mem0[ss:sp:word16] = di
	si = Mem0[ss:bp + 0x0006:word16]
	di = Mem0[ss:bp + 0x0004:word16]
	ax = Mem0[ds:si:word16]
	v10 = Mem0[ds:di:word16] + ax
	Mem0[ds:di:word16] = v10
	SCZO = cond(v10)
	ax = Mem0[ds:0x0628:word16]
	SCZO = cond(ax - si)
	branch Test(NE,Z) l0800_15EE
	// succ:  l0800_15E8 l0800_15EE
l0800_15E8:
	Mem0[ds:0x0628:word16] = di
	goto l0800_15FB
	// succ:  l0800_15FB
l0800_15EE:
	ax = Mem0[ds:si:word16]
	ax = ax + si
	SCZO = cond(ax)
	Mem0[ss:bp - 0x0002:word16] = ax
	bx = Mem0[ss:bp - 0x0002:word16]
	Mem0[ds:bx + 0x0002:word16] = di
	// succ:  l0800_15FB
l0800_15FB:
	sp = sp - 2
	Mem0[ss:sp:word16] = si
	call ___pull_free_block (retsize: 2;)
	cx = Mem0[ss:sp:word16]
	sp = sp + 2
	di = Mem0[ss:sp:word16]
	sp = sp + 2
	si = Mem0[ss:sp:word16]
	sp = sp + 2
	sp = bp
	bp = Mem0[ss:sp:word16]
	sp = sp + 2
	return
	// succ:  fn0800_15CF_exit
fn0800_15CF_exit:


// fn0800_1606
// Return size: 2
define fn0800_1606
fn0800_1606_entry:
	// succ:  l0800_1606
l0800_1606:
	sp = fp
	Top = 0
	sp = sp - 2
	Mem0[ss:sp:word16] = si
	ax = Mem0[ds:0x062C:word16]
	SCZO = cond(ax - Mem0[ds:0x0628:word16])
	branch Test(NE,Z) l0800_1622
	// succ:  l0800_1610 l0800_1622
l0800_1610:
	v9 = Mem0[ds:0x062C:word16]
	sp = sp - 2
	Mem0[ss:sp:word16] = v9
	call _brk (retsize: 2;)
	cx = Mem0[ss:sp:word16]
	sp = sp + 2
	ax = ax ^ ax
	SZO = cond(ax)
	C = false
	Mem0[ds:0x0628:word16] = ax
	Mem0[ds:0x062C:word16] = ax
	goto l0800_165D
	// succ:  l0800_165D
l0800_1622:
	bx = Mem0[ds:0x0628:word16]
	si = Mem0[ds:bx + 0x0002:word16]
	SZO = cond(Mem0[ds:si:word16] & 0x0001)
	C = false
	branch Test(NE,Z) l0800_1651
	// succ:  l0800_162F l0800_1651
l0800_162F:
	sp = sp - 2
	Mem0[ss:sp:word16] = si
	call ___pull_free_block (retsize: 2;)
	cx = Mem0[ss:sp:word16]
	sp = sp + 2
	SCZO = cond(si - Mem0[ds:0x062C:word16])
	branch Test(NE,Z) l0800_1644
	// succ:  l0800_163A l0800_1644
l0800_163A:
	ax = ax ^ ax
	SZO = cond(ax)
	C = false
	Mem0[ds:0x0628:word16] = ax
	Mem0[ds:0x062C:word16] = ax
	goto l0800_164A
	// succ:  l0800_164A
l0800_1644:
	ax = Mem0[ds:si + 0x0002:word16]
	Mem0[ds:0x0628:word16] = ax
	// succ:  l0800_164A
l0800_164A:
	sp = sp - 2
	Mem0[ss:sp:word16] = si
	call _brk (retsize: 2;)
	cx = Mem0[ss:sp:word16]
	sp = sp + 2
	goto l0800_165D
	// succ:  l0800_165D
l0800_1651:
	v14 = Mem0[ds:0x0628:word16]
	sp = sp - 2
	Mem0[ss:sp:word16] = v14
	call _brk (retsize: 2;)
	cx = Mem0[ss:sp:word16]
	sp = sp + 2
	Mem0[ds:0x0628:word16] = si
	// succ:  l0800_165D
l0800_165D:
	si = Mem0[ss:sp:word16]
	sp = sp + 2
	return
	// succ:  fn0800_1606_exit
fn0800_1606_exit:


// fn0800_165F
// Return size: 2
define fn0800_165F
fn0800_165F_entry:
	// succ:  l0800_165F
l0800_165F:
	sp = fp
	Top = 0
	sp = sp - 2
	Mem0[ss:sp:word16] = bp
	bp = sp
	sp = sp - 0x0002
	SCZO = cond(sp)
	sp = sp - 2
	Mem0[ss:sp:word16] = si
	sp = sp - 2
	Mem0[ss:sp:word16] = di
	si = Mem0[ss:bp + 0x0004:word16]
	v9 = Mem0[ds:si:word16] - 0x0001
	Mem0[ds:si:word16] = v9
	SZO = cond(v9)
	ax = Mem0[ds:si:word16]
	ax = ax + si
	SCZO = cond(ax)
	Mem0[ss:bp - 0x0002:word16] = ax
	di = Mem0[ds:si + 0x0002:word16]
	SZO = cond(Mem0[ds:di:word16] & 0x0001)
	C = false
	branch Test(NE,Z) l0800_1690
	// succ:  l0800_167C l0800_1690
l0800_167C:
	SCZO = cond(si - Mem0[ds:0x062C:word16])
	branch Test(EQ,Z) l0800_1690
	// succ:  l0800_1682 l0800_1690
l0800_1682:
	ax = Mem0[ds:si:word16]
	v14 = Mem0[ds:di:word16] + ax
	Mem0[ds:di:word16] = v14
	SCZO = cond(v14)
	bx = Mem0[ss:bp - 0x0002:word16]
	Mem0[ds:bx + 0x0002:word16] = di
	si = di
	goto l0800_1695
	// succ:  l0800_1695
l0800_1690:
	sp = sp - 2
	Mem0[ss:sp:word16] = si
	call fn0800_1596 (retsize: 2;)
	cx = Mem0[ss:sp:word16]
	sp = sp + 2
	// succ:  l0800_1695
l0800_1695:
	bx = Mem0[ss:bp - 0x0002:word16]
	SZO = cond(Mem0[ds:bx:word16] & 0x0001)
	C = false
	branch Test(NE,Z) l0800_16A7
	// succ:  l0800_169E l0800_16A7
l0800_169E:
	v17 = Mem0[ss:bp - 0x0002:word16]
	sp = sp - 2
	Mem0[ss:sp:word16] = v17
	sp = sp - 2
	Mem0[ss:sp:word16] = si
	call fn0800_15CF (retsize: 2;)
	cx = Mem0[ss:sp:word16]
	sp = sp + 2
	cx = Mem0[ss:sp:word16]
	sp = sp + 2
	// succ:  l0800_16A7
l0800_16A7:
	di = Mem0[ss:sp:word16]
	sp = sp + 2
	si = Mem0[ss:sp:word16]
	sp = sp + 2
	sp = bp
	bp = Mem0[ss:sp:word16]
	sp = sp + 2
	return
	// succ:  fn0800_165F_exit
fn0800_165F_exit:


// _free
// Return size: 2
define _free
fn0800_16AD_entry:
	// succ:  l0800_16AD
l0800_16AD:
	sp = fp
	Top = 0
	sp = sp - 2
	Mem0[ss:sp:word16] = bp
	bp = sp
	sp = sp - 2
	Mem0[ss:sp:word16] = si
	si = Mem0[ss:bp + 0x0004:word16]
	si = si | si
	SZO = cond(si)
	C = false
	branch Test(NE,Z) l0800_16BA
	// succ:  l0800_16B8 l0800_16BA
l0800_16B8:
	goto l0800_16D1
	// succ:  l0800_16D1
l0800_16BA:
	ax = si
	ax = ax + 0xFFFC
	SCZO = cond(ax)
	si = ax
	SCZO = cond(si - Mem0[ds:0x0628:word16])
	branch Test(NE,Z) l0800_16CC
	// succ:  l0800_16C7 l0800_16CC
l0800_16C7:
	call fn0800_1606 (retsize: 2;)
	goto l0800_16D1
	// succ:  l0800_16D1
l0800_16CC:
	sp = sp - 2
	Mem0[ss:sp:word16] = si
	call fn0800_165F (retsize: 2;)
	cx = Mem0[ss:sp:word16]
	sp = sp + 2
	// succ:  l0800_16D1
l0800_16D1:
	si = Mem0[ss:sp:word16]
	sp = sp + 2
	bp = Mem0[ss:sp:word16]
	sp = sp + 2
	return
	// succ:  fn0800_16AD_exit
fn0800_16AD_exit:


// _scanf
// Return size: 2
define _scanf
_scanf_entry:
	// succ:  l0800_16D4
l0800_16D4:
	sp = fp
	Top = 0
	sp = sp - 2
	Mem0[ss:sp:word16] = bp
	bp = sp
	ax = bp + 0x0006
	sp = sp - 2
	Mem0[ss:sp:word16] = ax
	v6 = Mem0[ss:bp + 0x0004:word16]
	sp = sp - 2
	Mem0[ss:sp:word16] = v6
	ax = 0x0342
	sp = sp - 2
	Mem0[ss:sp:word16] = ax
	ax = 0x1D65
	sp = sp - 2
	Mem0[ss:sp:word16] = ax
	ax = 0x07F2
	sp = sp - 2
	Mem0[ss:sp:word16] = ax
	call __scanner (retsize: 2;)
	sp = bp
	// succ:  l0800_16F1
l0800_16F1:
	bp = Mem0[ss:sp:word16]
	sp = sp + 2
	return
	// succ:  _scanf_exit
_scanf_exit:


// __scanner
// Return size: 2
define __scanner
fn0800_16F3_entry:
	// succ:  l0800_16F3
l0800_16F3:
	sp = fp
	Top = 0
	sp = sp - 2
	Mem0[ss:sp:word16] = bp
	bp = sp
	sp = sp - 0x002A
	SCZO = cond(sp)
	sp = sp - 2
	Mem0[ss:sp:word16] = si
	sp = sp - 2
	Mem0[ss:sp:word16] = di
	Mem0[ss:bp - 0x0028:word16] = 0x0000
	Mem0[ss:bp - 0x0026:word16] = 0x0000
	// succ:  l0800_1721
l0800_1721:
	sp = sp - 2
	Mem0[ss:sp:word16] = es
	D = false
	// succ:  l0800_1723
l0800_1723:
	si = Mem0[ss:bp + 0x000A:word16]
	// succ:  l0800_1726
l0800_1726:
	al = Mem0[ds:si:byte]
	si = si + 0x0001
	al = al | al
	SZO = cond(al)
	C = false
	branch Test(EQ,Z) l0800_1788
	// succ:  l0800_172B l0800_1788
l0800_172B:
	SCZO = cond(al - 0x25)
	branch Test(EQ,Z) l0800_178B
	// succ:  l0800_172F l0800_178B
l0800_172F:
	ax = (int16) al
	v16 = ax
	ax = di
	di = v16
	v17 = Mem0[ss:bp - 0x0026:word16] + 0x0001
	Mem0[ss:bp - 0x0026:word16] = v17
	SZO = cond(v17)
	v18 = Mem0[ss:bp + 0x0008:word16]
	sp = sp - 2
	Mem0[ss:sp:word16] = v18
	call SEQ(0x0800, Mem0[ss:bp + 0x0004:word16]) (retsize: 2;)
	cx = Mem0[ss:sp:word16]
	sp = sp + 2
	ax = ax | ax
	SZO = cond(ax)
	C = false
	branch Test(LT,SO) l0800_1764
	// succ:  l0800_173F l0800_1764
l0800_173F:
	di = di | di
	SZO = cond(di)
	C = false
	branch Test(SG,S) l0800_1775
	// succ:  l0800_1743 l0800_1775
l0800_1743:
	SCZO = cond(Mem0[ds:di + 0x055A:byte] - 0x01)
	branch Test(NE,Z) l0800_1775
	// succ:  l0800_174A l0800_1775
l0800_174A:
	v22 = ax
	ax = bx
	bx = v22
	bl = bl | bl
	SZO = cond(bl)
	C = false
	branch Test(SG,S) l0800_1767
	// succ:  l0800_174F l0800_1767
l0800_174F:
	SCZO = cond(Mem0[ds:bx + 0x055A:byte] - 0x01)
	branch Test(NE,Z) l0800_1767
	// succ:  l0800_1756 l0800_1767
l0800_1756:
	v25 = Mem0[ss:bp - 0x0026:word16] + 0x0001
	Mem0[ss:bp - 0x0026:word16] = v25
	SZO = cond(v25)
	v26 = Mem0[ss:bp + 0x0008:word16]
	sp = sp - 2
	Mem0[ss:sp:word16] = v26
	call SEQ(0x0800, Mem0[ss:bp + 0x0004:word16]) (retsize: 2;)
	cx = Mem0[ss:sp:word16]
	sp = sp + 2
	ax = ax | ax
	SZO = cond(ax)
	C = false
	branch Test(GT,SZO) l0800_174A
	// succ:  l0800_1764 l0800_174A
l0800_1764:
	// succ:  l0800_1764_thunk_fn0800_1AEB
l0800_1764_thunk_fn0800_1AEB:
	call fn0800_1AEB (retsize: 0;)
	return
	// succ:  fn0800_16F3_exit
l0800_1767:
	v29 = Mem0[ss:bp + 0x0008:word16]
	sp = sp - 2
	Mem0[ss:sp:word16] = v29
	sp = sp - 2
	Mem0[ss:sp:word16] = bx
	call SEQ(0x0800, Mem0[ss:bp + 0x0006:word16]) (retsize: 2;)
	cx = Mem0[ss:sp:word16]
	sp = sp + 2
	cx = Mem0[ss:sp:word16]
	sp = sp + 2
	v30 = Mem0[ss:bp - 0x0026:word16] - 0x0001
	Mem0[ss:bp - 0x0026:word16] = v30
	SZO = cond(v30)
	goto l0800_1726
	// succ:  l0800_1726
l0800_1775:
	SCZO = cond(ax - di)
	branch Test(EQ,Z) l0800_1726
	// succ:  l0800_1779 l0800_1726
l0800_1779:
	v31 = Mem0[ss:bp + 0x0008:word16]
	sp = sp - 2
	Mem0[ss:sp:word16] = v31
	sp = sp - 2
	Mem0[ss:sp:word16] = ax
	call SEQ(0x0800, Mem0[ss:bp + 0x0006:word16]) (retsize: 2;)
	cx = Mem0[ss:sp:word16]
	sp = sp + 2
	cx = Mem0[ss:sp:word16]
	sp = sp + 2
	v32 = Mem0[ss:bp - 0x0026:word16] - 0x0001
	Mem0[ss:bp - 0x0026:word16] = v32
	SZO = cond(v32)
	// succ:  l0800_1785_thunk_fn0800_1AEB
l0800_1785_thunk_fn0800_1AEB:
	call fn0800_1AEB (retsize: 0;)
	return
	// succ:  fn0800_16F3_exit
l0800_1788:
	// succ:  l0800_1788_thunk_fn0800_1AEB
l0800_1788_thunk_fn0800_1AEB:
	call fn0800_1AEB (retsize: 0;)
	return
	// succ:  fn0800_16F3_exit
l0800_178B:
	Mem0[ss:bp - 0x0022:word16] = 0xFFFF
	Mem0[ss:bp - 0x0029:byte] = 0x00
	// succ:  l0800_1794
l0800_1794:
	al = Mem0[ds:si:byte]
	si = si + 0x0001
	ax = (int16) al
	Mem0[ss:bp + 0x000A:word16] = si
	v33 = ax
	ax = di
	di = v33
	di = di | di
	SZO = cond(di)
	C = false
	branch Test(LT,SO) l0800_17E6
	// succ:  l0800_179E l0800_17E6
l0800_179E:
	bl = Mem0[ds:di + 0x055A:byte]
	bh = bh ^ bh
	SZO = cond(bh)
	C = false
	ax = bx
	SCZO = cond(ax - 0x0015)
	branch Test(ULE,CZ) l0800_17AE
	// succ:  l0800_17AB l0800_17AE
l0800_17AB:
	// succ:  l0800_17AB_thunk_fn0800_1AEB
l0800_17AB_thunk_fn0800_1AEB:
	call fn0800_1AEB (retsize: 0;)
	return
	// succ:  fn0800_16F3_exit
l0800_17AE:
	bx = ax
	bx = bx << 0x0001
	SCZO = cond(bx)
	switch (ax) { l0800_17E6 l0800_17E6 l0800_17E6 l0800_17E3 l0800_17E9 l0800_17EF l0800_19C8 l0800_1837 l0800_1837 l0800_1841 l0800_1908 l0800_1803 l0800_180F l0800_1809 l0800_1832 l0800_196C l0800_1A06 l0800_1824 l0800_183C l0800_1895 l0800_1816 l0800_181D }
	// succ:  l0800_17E6 l0800_17E6 l0800_17E6 l0800_17E3 l0800_17E9 l0800_17EF l0800_19C8 l0800_1837 l0800_1837 l0800_1841 l0800_1908 l0800_1803 l0800_180F l0800_1809 l0800_1832 l0800_196C l0800_1A06 l0800_1824 l0800_183C l0800_1895 l0800_1816 l0800_181D
l0800_17E3:
	goto l0800_172F
	// succ:  l0800_172F
l0800_17E6:
	// succ:  l0800_17E6_thunk_fn0800_1AEB
l0800_17E6_thunk_fn0800_1AEB:
	call fn0800_1AEB (retsize: 0;)
	return
	// succ:  fn0800_16F3_exit
l0800_17E9:
	v36 = Mem0[ss:bp - 0x0029:byte] | 0x01
	Mem0[ss:bp - 0x0029:byte] = v36
	SZO = cond(Mem0[ss:bp - 0x0029:byte])
	C = false
	goto l0800_1794
	// succ:  l0800_1794
l0800_17EF:
	di = di - 0x0030
	SCZO = cond(di)
	v75 = Mem0[ss:bp - 0x0022:word16]
	Mem0[ss:bp - 0x0022:word16] = di
	di = v75
	di = di | di
	SZO = cond(di)
	C = false
	branch Test(LT,SO) l0800_1794
	// succ:  l0800_17F9 l0800_1794
l0800_17F9:
	ax = 0x000A
	dx_ax = di *u ax
	SCZO = cond(dx_ax)
	v77 = Mem0[ss:bp - 0x0022:word16] + ax
	Mem0[ss:bp - 0x0022:word16] = v77
	SCZO = cond(v77)
	goto l0800_1794
	// succ:  l0800_1794
l0800_1803:
	v37 = Mem0[ss:bp - 0x0029:byte] | 0x08
	Mem0[ss:bp - 0x0029:byte] = v37
	SZO = cond(Mem0[ss:bp - 0x0029:byte])
	C = false
	goto l0800_1794
	// succ:  l0800_1794
l0800_1809:
	v60 = Mem0[ss:bp - 0x0029:byte] | 0x04
	Mem0[ss:bp - 0x0029:byte] = v60
	SZO = cond(Mem0[ss:bp - 0x0029:byte])
	C = false
	goto l0800_1794
	// succ:  l0800_1794
l0800_180F:
	v52 = Mem0[ss:bp - 0x0029:byte] | 0x02
	Mem0[ss:bp - 0x0029:byte] = v52
	SZO = cond(Mem0[ss:bp - 0x0029:byte])
	C = false
	goto l0800_1794
	// succ:  l0800_1794
l0800_1816:
	v39 = Mem0[ss:bp - 0x0029:byte] & 0xDF
	Mem0[ss:bp - 0x0029:byte] = v39
	SZO = cond(Mem0[ss:bp - 0x0029:byte])
	C = false
	goto l0800_1794
	// succ:  l0800_1794
l0800_181D:
	v38 = Mem0[ss:bp - 0x0029:byte] | 0x20
	Mem0[ss:bp - 0x0029:byte] = v38
	SZO = cond(Mem0[ss:bp - 0x0029:byte])
	C = false
	goto l0800_1794
	// succ:  l0800_1794
l0800_1824:
	ax = Mem0[ss:bp - 0x0026:word16]
	dx = dx - dx
	SCZO = cond(dx)
	SZO = cond(Mem0[ss:bp - 0x0029:byte] & 0x01)
	C = false
	branch Test(EQ,Z) l0800_187E
	// succ:  l0800_182F l0800_187E
l0800_182F:
	goto l0800_1794
	// succ:  l0800_1794
l0800_1832:
	si = 0x0008
	goto l0800_1844
	// succ:  l0800_1844
l0800_1837:
	si = 0x000A
	goto l0800_1844
	// succ:  l0800_1844
l0800_183C:
	si = 0x0010
	goto l0800_1844
	// succ:  l0800_1844
l0800_1841:
	si = 0x0000
	// succ:  l0800_1844
l0800_1844:
	SZO = cond(di & 0x0020)
	C = false
	branch Test(NE,Z) l0800_184E
	// succ:  l0800_184A l0800_184E
l0800_184A:
	v41 = Mem0[ss:bp - 0x0029:byte] | 0x04
	Mem0[ss:bp - 0x0029:byte] = v41
	SZO = cond(Mem0[ss:bp - 0x0029:byte])
	C = false
	// succ:  l0800_184E
l0800_184E:
	ax = bp - 0x0024
	sp = sp - 2
	Mem0[ss:sp:word16] = ax
	ax = bp - 0x0026
	sp = sp - 2
	Mem0[ss:sp:word16] = ax
	ax = Mem0[ss:bp - 0x0022:word16]
	ax = ax & 0x7FFF
	SZO = cond(ax)
	C = false
	sp = sp - 2
	Mem0[ss:sp:word16] = ax
	ax = si
	sp = sp - 2
	Mem0[ss:sp:word16] = ax
	v45 = Mem0[ss:bp + 0x0008:word16]
	sp = sp - 2
	Mem0[ss:sp:word16] = v45
	v46 = Mem0[ss:bp + 0x0006:word16]
	sp = sp - 2
	Mem0[ss:sp:word16] = v46
	v47 = Mem0[ss:bp + 0x0004:word16]
	sp = sp - 2
	Mem0[ss:sp:word16] = v47
	call __scantol (retsize: 2;)
	sp = sp + 0x000E
	SCZO = cond(sp)
	SCZO = cond(Mem0[ss:bp - 0x0024:word16] - 0x0000)
	branch Test(LE,SZO) l0800_188D
	// succ:  l0800_1875 l0800_188D
l0800_1875:
	SZO = cond(Mem0[ss:bp - 0x0029:byte] & 0x01)
	C = false
	branch Test(NE,Z) l0800_188A
	// succ:  l0800_187B l0800_188A
l0800_187B:
	v48 = Mem0[ss:bp - 0x0028:word16] + 0x0001
	Mem0[ss:bp - 0x0028:word16] = v48
	SZO = cond(v48)
	// succ:  l0800_187E
l0800_187E:
	call fn0800_1708 (retsize: 2;)
	Mem0[es:di:word16] = ax
	di = di + 0x0002
	SZO = cond(Mem0[ss:bp - 0x0029:byte] & 0x04)
	C = false
	branch Test(EQ,Z) l0800_188A
	// succ:  l0800_1888 l0800_188A
l0800_1888:
	v44 = ax
	ax = dx
	dx = v44
	Mem0[es:di:word16] = ax
	di = di + 0x0002
	// succ:  l0800_188A
l0800_188A:
	goto l0800_1723
	// succ:  l0800_1723
l0800_188D:
	branch Test(LT,SO) l0800_1892
	// succ:  l0800_188F l0800_1892
l0800_188F:
	// succ:  l0800_188F_thunk_fn0800_1AFF
l0800_188F_thunk_fn0800_1AFF:
	call fn0800_1AFF (retsize: 0;)
	return
	// succ:  fn0800_16F3_exit
l0800_1892:
	// succ:  l0800_1892_thunk_fn0800_1AEB
l0800_1892_thunk_fn0800_1AEB:
	call fn0800_1AEB (retsize: 0;)
	return
	// succ:  fn0800_16F3_exit
l0800_1895:
	call fn0800_1898 (retsize: 2;)
	// succ:  l0800_1895_thunk_fn0800_1898
l0800_1895_thunk_fn0800_1898:
	call fn0800_1898 (retsize: 0;)
	return
	// succ:  fn0800_16F3_exit
l0800_1905:
	// succ:  l0800_1905_thunk_fn0800_1AEB
l0800_1905_thunk_fn0800_1AEB:
	call fn0800_1AEB (retsize: 0;)
	return
	// succ:  fn0800_16F3_exit
l0800_1908:
	ax = bp - 0x0024
	sp = sp - 2
	Mem0[ss:sp:word16] = ax
	ax = bp - 0x0026
	sp = sp - 2
	Mem0[ss:sp:word16] = ax
	ax = 0x7FFF
	ax = ax & Mem0[ss:bp - 0x0022:word16]
	SZO = cond(ax)
	C = false
	sp = sp - 2
	Mem0[ss:sp:word16] = ax
	v62 = Mem0[ss:bp + 0x0008:word16]
	sp = sp - 2
	Mem0[ss:sp:word16] = v62
	v63 = Mem0[ss:bp + 0x0006:word16]
	sp = sp - 2
	Mem0[ss:sp:word16] = v63
	v64 = Mem0[ss:bp + 0x0004:word16]
	sp = sp - 2
	Mem0[ss:sp:word16] = v64
	call __scantod (retsize: 2;)
	sp = sp + 0x000C
	SCZO = cond(sp)
	SCZO = cond(Mem0[ss:bp - 0x0024:word16] - 0x0000)
	branch Test(LE,SZO) l0800_1964
	// succ:  l0800_192C l0800_1964
l0800_192C:
	SZO = cond(Mem0[ss:bp - 0x0029:byte] & 0x01)
	C = false
	branch Test(EQ,Z) l0800_1935
	// succ:  l0800_1932 l0800_1935
l0800_1932:
	goto l0800_195E
	// succ:  l0800_195E
l0800_1935:
	call fn0800_1708 (retsize: 2;)
	v65 = Mem0[ss:bp - 0x0028:word16] + 0x0001
	Mem0[ss:bp - 0x0028:word16] = v65
	SZO = cond(v65)
	SZO = cond(Mem0[ss:bp - 0x0029:byte] & 0x04)
	C = false
	branch Test(EQ,Z) l0800_1946
	// succ:  l0800_1941 l0800_1946
l0800_1941:
	ax = 0x0004
	goto l0800_1953
	// succ:  l0800_1953
l0800_1946:
	SZO = cond(Mem0[ss:bp - 0x0029:byte] & 0x08)
	C = false
	branch Test(EQ,Z) l0800_1951
	// succ:  l0800_194C l0800_1951
l0800_194C:
	ax = 0x0008
	goto l0800_1953
	// succ:  l0800_1953
l0800_1951:
	ax = ax ^ ax
	SZO = cond(ax)
	C = false
	// succ:  l0800_1953
l0800_1953:
	sp = sp - 2
	Mem0[ss:sp:word16] = ax
	sp = sp - 2
	Mem0[ss:sp:word16] = di
	call __scanrslt (retsize: 2;)
	sp = sp + 0x0004
	SCZO = cond(sp)
	goto l0800_1723
	// succ:  l0800_1723
l0800_195E:
	call __scanpop (retsize: 2;)
	goto l0800_1723
	// succ:  l0800_1723
l0800_1964:
	call __scanpop (retsize: 2;)
	branch Test(LT,SO) l0800_1905
	// succ:  l0800_1969 l0800_1905
l0800_1969:
	// succ:  l0800_1969_thunk_fn0800_1AFF
l0800_1969_thunk_fn0800_1AFF:
	call fn0800_1AFF (retsize: 0;)
	return
	// succ:  fn0800_16F3_exit
l0800_196C:
	call fn0800_196F (retsize: 2;)
	// succ:  l0800_196C_thunk_fn0800_196F
l0800_196C_thunk_fn0800_196F:
	call fn0800_196F (retsize: 0;)
	return
	// succ:  fn0800_16F3_exit
l0800_19C8:
	SZO = cond(Mem0[ss:bp - 0x0029:byte] & 0x01)
	C = false
	branch Test(NE,Z) l0800_19D1
	// succ:  l0800_19CE l0800_19D1
l0800_19CE:
	call fn0800_1708 (retsize: 2;)
	// succ:  l0800_19D1
l0800_19D1:
	si = Mem0[ss:bp - 0x0022:word16]
	si = si | si
	SZO = cond(si)
	C = false
	branch Test(GE,SO) l0800_19DB
	// succ:  l0800_19D8 l0800_19DB
l0800_19D8:
	si = 0x0001
	// succ:  l0800_19DB
l0800_19DB:
	branch Test(EQ,Z) l0800_19F7
	// succ:  l0800_19DD l0800_19F7
l0800_19DD:
	v49 = Mem0[ss:bp - 0x0026:word16] + 0x0001
	Mem0[ss:bp - 0x0026:word16] = v49
	SZO = cond(v49)
	sp = sp - 2
	Mem0[ss:sp:word16] = es
	v50 = Mem0[ss:bp + 0x0008:word16]
	sp = sp - 2
	Mem0[ss:sp:word16] = v50
	call SEQ(0x0800, Mem0[ss:bp + 0x0004:word16]) (retsize: 2;)
	cx = Mem0[ss:sp:word16]
	sp = sp + 2
	es = Mem0[ss:sp:selector]
	sp = sp + 2
	SZO = cond(Mem0[ss:bp - 0x0029:byte] & 0x01)
	C = false
	branch Test(NE,Z) l0800_19F0
	// succ:  l0800_19EF l0800_19F0
l0800_19EF:
	Mem0[es:di:byte] = al
	di = di + 0x0001
	// succ:  l0800_19F0
l0800_19F0:
	ax = ax | ax
	SZO = cond(ax)
	C = false
	branch Test(LT,SO) l0800_1A03
	// succ:  l0800_19F4 l0800_1A03
l0800_19F4:
	si = si - 0x0001
	SZO = cond(si)
	branch Test(GT,SZO) l0800_19DD
	// succ:  l0800_19F7 l0800_19DD
l0800_19F7:
	SZO = cond(Mem0[ss:bp - 0x0029:byte] & 0x01)
	C = false
	branch Test(NE,Z) l0800_1A00
	// succ:  l0800_19FD l0800_1A00
l0800_19FD:
	v51 = Mem0[ss:bp - 0x0028:word16] + 0x0001
	Mem0[ss:bp - 0x0028:word16] = v51
	SZO = cond(v51)
	// succ:  l0800_1A00
l0800_1A00:
	goto l0800_1723
	// succ:  l0800_1723
l0800_1A03:
	// succ:  l0800_1A03_thunk_fn0800_1AEB
l0800_1A03_thunk_fn0800_1AEB:
	call fn0800_1AEB (retsize: 0;)
	return
	// succ:  fn0800_16F3_exit
l0800_1A06:
	ax = ax - ax
	SCZO = cond(ax)
	D = false
	sp = sp - 2
	Mem0[ss:sp:word16] = ss
	es = Mem0[ss:sp:selector]
	sp = sp + 2
	di = bp - 0x0020
	cx = 0x0010
	// succ:  l0800_1A11
l0800_1A11:
	branch cx == 0x0000 l0800_1A13
	// succ:  l0800_1A11_1 l0800_1A13
l0800_1A11_1:
	Mem0[es:di:word16] = ax
	di = di + 0x0002
	cx = cx - 0x0001
	goto l0800_1A11
	// succ:  l0800_1A11
l0800_1A13:
	al = Mem0[ds:si:byte]
	si = si + 0x0001
	v42 = Mem0[ss:bp - 0x0029:byte] & 0xEF
	Mem0[ss:bp - 0x0029:byte] = v42
	SZO = cond(Mem0[ss:bp - 0x0029:byte])
	C = false
	SCZO = cond(al - 0x5E)
	branch Test(NE,Z) l0800_1A21
	// succ:  l0800_1A1C l0800_1A21
l0800_1A1C:
	v43 = Mem0[ss:bp - 0x0029:byte] | 0x10
	Mem0[ss:bp - 0x0029:byte] = v43
	SZO = cond(Mem0[ss:bp - 0x0029:byte])
	C = false
	al = Mem0[ds:si:byte]
	si = si + 0x0001
	// succ:  l0800_1A21
l0800_1A21:
	ah = 0x00
	// succ:  l0800_1A23
l0800_1A23:
	dl = al
	di = ax
	cl = 0x03
	di = di >>u cl
	SCZO = cond(di)
	cx = 0x0107
	cl = cl & dl
	SZO = cond(cl)
	C = false
	ch = ch << cl
	SCZO = cond(ch)
	v57 = Mem0[ss:bp - 0x0020 + di:byte] | ch
	Mem0[ss:bp - 0x0020 + di:byte] = v57
	SZO = cond(Mem0[ss:bp - 0x0020 + di:byte])
	C = false
	// succ:  l0800_1A35
l0800_1A35:
	al = Mem0[ds:si:byte]
	si = si + 0x0001
	SCZO = cond(al - 0x00)
	branch Test(EQ,Z) l0800_1A60
	// succ:  l0800_1A3A l0800_1A60
l0800_1A3A:
	SCZO = cond(al - 0x5D)
	branch Test(EQ,Z) l0800_1A63
	// succ:  l0800_1A3E l0800_1A63
l0800_1A3E:
	SCZO = cond(al - 0x2D)
	branch Test(NE,Z) l0800_1A23
	// succ:  l0800_1A42 l0800_1A23
l0800_1A42:
	SCZO = cond(dl - Mem0[ds:si:byte])
	branch Test(UGT,CZ) l0800_1A23
	// succ:  l0800_1A46 l0800_1A23
l0800_1A46:
	SCZO = cond(Mem0[ds:si:byte] - 0x5D)
	branch Test(EQ,Z) l0800_1A23
	// succ:  l0800_1A4B l0800_1A23
l0800_1A4B:
	al = Mem0[ds:si:byte]
	si = si + 0x0001
	al = al - dl
	SCZO = cond(al)
	branch Test(EQ,Z) l0800_1A35
	// succ:  l0800_1A50 l0800_1A35
l0800_1A50:
	dl = dl + al
	SCZO = cond(dl)
	// succ:  l0800_1A52
l0800_1A52:
	v58 = (ch & 0x01 << 0x08 - 0x01) != 0x00
	ch = __rol(ch, 0x01)
	C = v58
	di = di + 0x00 + C
	SCZO = cond(di)
	v59 = Mem0[ss:bp - 0x0020 + di:byte] | ch
	Mem0[ss:bp - 0x0020 + di:byte] = v59
	SZO = cond(Mem0[ss:bp - 0x0020 + di:byte])
	C = false
	al = al - 0x01
	SZO = cond(al)
	branch Test(NE,Z) l0800_1A52
	// succ:  l0800_1A5E l0800_1A52
l0800_1A5E:
	goto l0800_1A35
	// succ:  l0800_1A35
l0800_1A60:
	// succ:  l0800_1A60_thunk_fn0800_1AFF
l0800_1A60_thunk_fn0800_1AFF:
	call fn0800_1AFF (retsize: 0;)
	return
	// succ:  fn0800_16F3_exit
l0800_1A63:
	Mem0[ss:bp + 0x000A:word16] = si
	v61 = Mem0[ss:bp - 0x0022:word16] & 0x7FFF
	Mem0[ss:bp - 0x0022:word16] = v61
	SZO = cond(Mem0[ss:bp - 0x0022:word16])
	C = false
	si = Mem0[ss:bp - 0x0022:word16]
	SZO = cond(Mem0[ss:bp - 0x0029:byte] & 0x01)
	C = false
	branch Test(NE,Z) l0800_1A77
	// succ:  l0800_1A74 l0800_1A77
l0800_1A74:
	call fn0800_1708 (retsize: 2;)
	// succ:  l0800_1A77
l0800_1A77:
	si = si - 0x0001
	SZO = cond(si)
	branch Test(LT,SO) l0800_1ACA
	// succ:  l0800_1A7A l0800_1ACA
l0800_1A7A:
	v66 = Mem0[ss:bp - 0x0026:word16] + 0x0001
	Mem0[ss:bp - 0x0026:word16] = v66
	SZO = cond(v66)
	sp = sp - 2
	Mem0[ss:sp:word16] = es
	v67 = Mem0[ss:bp + 0x0008:word16]
	sp = sp - 2
	Mem0[ss:sp:word16] = v67
	call SEQ(0x0800, Mem0[ss:bp + 0x0004:word16]) (retsize: 2;)
	cx = Mem0[ss:sp:word16]
	sp = sp + 2
	es = Mem0[ss:sp:selector]
	sp = sp + 2
	ax = ax | ax
	SZO = cond(ax)
	C = false
	branch Test(LT,SO) l0800_1AD9
	// succ:  l0800_1A8A l0800_1AD9
l0800_1A8A:
	v68 = ax
	ax = si
	si = v68
	bx = si
	cl = 0x03
	si = si >>u cl
	SCZO = cond(si)
	cx = 0x0107
	cl = cl & bl
	SZO = cond(cl)
	C = false
	ch = ch << cl
	SCZO = cond(ch)
	SZO = cond(Mem0[ss:bp - 0x0020 + si:byte] & ch)
	C = false
	v69 = ax
	ax = si
	si = v69
	v70 = ax
	ax = bx
	bx = v70
	branch Test(EQ,Z) l0800_1AA7
	// succ:  l0800_1A9F l0800_1AA7
l0800_1A9F:
	SZO = cond(Mem0[ss:bp - 0x0029:byte] & 0x10)
	C = false
	branch Test(EQ,Z) l0800_1AAD
	// succ:  l0800_1AA5 l0800_1AAD
l0800_1AA5:
	goto l0800_1AB6
	// succ:  l0800_1AB6
l0800_1AA7:
	SZO = cond(Mem0[ss:bp - 0x0029:byte] & 0x10)
	C = false
	branch Test(EQ,Z) l0800_1AB6
	// succ:  l0800_1AAD l0800_1AB6
l0800_1AAD:
	SZO = cond(Mem0[ss:bp - 0x0029:byte] & 0x01)
	C = false
	branch Test(NE,Z) l0800_1A77
	// succ:  l0800_1AB3 l0800_1A77
l0800_1AB3:
	Mem0[es:di:byte] = al
	di = di + 0x0001
	goto l0800_1A77
	// succ:  l0800_1A77
l0800_1AB6:
	sp = sp - 2
	Mem0[ss:sp:word16] = es
	v71 = Mem0[ss:bp + 0x0008:word16]
	sp = sp - 2
	Mem0[ss:sp:word16] = v71
	sp = sp - 2
	Mem0[ss:sp:word16] = ax
	call SEQ(0x0800, Mem0[ss:bp + 0x0006:word16]) (retsize: 2;)
	cx = Mem0[ss:sp:word16]
	sp = sp + 2
	cx = Mem0[ss:sp:word16]
	sp = sp + 2
	es = Mem0[ss:sp:selector]
	sp = sp + 2
	v72 = Mem0[ss:bp - 0x0026:word16] - 0x0001
	Mem0[ss:bp - 0x0026:word16] = v72
	SZO = cond(v72)
	si = si + 0x0001
	SZO = cond(si)
	SCZO = cond(si - Mem0[ss:bp - 0x0022:word16])
	branch Test(GE,SO) l0800_1AD3
	// succ:  l0800_1ACA l0800_1AD3
l0800_1ACA:
	SZO = cond(Mem0[ss:bp - 0x0029:byte] & 0x01)
	C = false
	branch Test(NE,Z) l0800_1AD6
	// succ:  l0800_1AD0 l0800_1AD6
l0800_1AD0:
	v73 = Mem0[ss:bp - 0x0028:word16] + 0x0001
	Mem0[ss:bp - 0x0028:word16] = v73
	SZO = cond(v73)
	// succ:  l0800_1AD3
l0800_1AD3:
	al = 0x00
	Mem0[es:di:byte] = al
	di = di + 0x0001
	// succ:  l0800_1AD6
l0800_1AD6:
	goto l0800_1723
	// succ:  l0800_1723
l0800_1AD9:
	si = si + 0x0001
	SZO = cond(si)
	SCZO = cond(si - Mem0[ss:bp - 0x0022:word16])
	branch Test(GE,SO) l0800_1ADD_thunk_fn0800_1AEB
	goto l0800_1ADF
	// succ:  l0800_1ADF l0800_1ADD_thunk_fn0800_1AEB
l0800_1ADD_thunk_fn0800_1AEB:
	call fn0800_1AEB (retsize: 0;)
	return
	// succ:  fn0800_16F3_exit
l0800_1ADF:
	SZO = cond(Mem0[ss:bp - 0x0029:byte] & 0x01)
	C = false
	branch Test(NE,Z) l0800_1AE3_thunk_fn0800_1AEB
	goto l0800_1AE5
	// succ:  l0800_1AE5 l0800_1AE3_thunk_fn0800_1AEB
l0800_1AE3_thunk_fn0800_1AEB:
	call fn0800_1AEB (retsize: 0;)
	return
	// succ:  fn0800_16F3_exit
l0800_1AE5:
	al = 0x00
	Mem0[es:di:byte] = al
	di = di + 0x0001
	v74 = Mem0[ss:bp - 0x0028:word16] + 0x0001
	Mem0[ss:bp - 0x0028:word16] = v74
	SZO = cond(v74)
	// succ:  l0800_1AE8_thunk_fn0800_1AEB
l0800_1AE8_thunk_fn0800_1AEB:
	call fn0800_1AEB (retsize: 0;)
	return
	// succ:  fn0800_16F3_exit
fn0800_16F3_exit:


// fn0800_1708
// Return size: 2
define fn0800_1708
fn0800_1708_entry:
	// succ:  l0800_1708
l0800_1708:
	sp = fp
	Top = 0
	di = Mem0[ss:bp + 0x000C:word16]
	SZO = cond(Mem0[ss:bp - 0x0029:byte] & 0x20)
	C = false
	branch Test(EQ,Z) l0800_1718
	// succ:  l0800_1711 l0800_1718
l0800_1711:
	es_di = Mem0[ds:di + 0x0000:segptr32]
	v11 = Mem0[ss:bp + 0x000C:word16] + 0x0004
	Mem0[ss:bp + 0x000C:word16] = v11
	SCZO = cond(v11)
	return
	// succ:  fn0800_1708_exit
l0800_1718:
	di = Mem0[ds:di:word16]
	sp = sp - 2
	Mem0[ss:sp:word16] = ds
	es = Mem0[ss:sp:selector]
	sp = sp + 2
	v14 = Mem0[ss:bp + 0x000C:word16] + 0x0002
	Mem0[ss:bp + 0x000C:word16] = v14
	SCZO = cond(v14)
	return
	// succ:  fn0800_1708_exit
fn0800_1708_exit:


// fn0800_1898
// Return size: 0
define fn0800_1898
fn0800_1898_entry:
	// succ:  l0800_1898
l0800_1898:
	sp = fp
	Top = 0
	// succ:  l0800_1898_thunk_fn0800_1B06
l0800_1898_thunk_fn0800_1B06:
	call fn0800_1B06 (retsize: 0;)
	return
	// succ:  fn0800_1898_exit
fn0800_1898_exit:


// fn0800_18AF
// Return size: 0
define fn0800_18AF
fn0800_18AF_entry:
	// succ:  l0800_18AF
l0800_18AF:
	sp = fp
	Top = 0
	// succ:  l0800_18AF_thunk_fn0800_1B2C
l0800_18AF_thunk_fn0800_1B2C:
	call fn0800_1B2C (retsize: 0;)
	return
	// succ:  fn0800_18AF_exit
fn0800_18AF_exit:


// fn0800_18CF
// Return size: 0
define fn0800_18CF
fn0800_18CF_entry:
	// succ:  l0800_18CF
l0800_18CF:
	sp = fp
	Top = 0
	// succ:  l0800_18CF_thunk_fn0800_1B2C
l0800_18CF_thunk_fn0800_1B2C:
	call fn0800_1B2C (retsize: 0;)
	return
	// succ:  fn0800_18CF_exit
fn0800_18CF_exit:


// fn0800_196F
// Return size: 0
define fn0800_196F
fn0800_196F_entry:
	// succ:  l0800_196F
l0800_196F:
	sp = fp
	Top = 0
	// succ:  l0800_196F_thunk_fn0800_1B06
l0800_196F_thunk_fn0800_1B06:
	call fn0800_1B06 (retsize: 0;)
	return
	// succ:  fn0800_196F_exit
fn0800_196F_exit:


// fn0800_1AEB
// Return size: 0
define fn0800_1AEB
fn0800_1AEB_entry:
	// succ:  l0800_1AEB
l0800_1AEB:
	sp = v4
	Top = 0
	v7 = Mem0[ss:bp + 0x0008:word16]
	sp = sp - 2
	Mem0[ss:sp:word16] = v7
	ax = 0xFFFF
	sp = sp - 2
	Mem0[ss:sp:word16] = ax
	call SEQ(0x0800, Mem0[ss:bp + 0x0006:word16]) (retsize: 2;)
	cx = Mem0[ss:sp:word16]
	sp = sp + 2
	cx = Mem0[ss:sp:word16]
	sp = sp + 2
	SCZO = cond(Mem0[ss:bp - 0x0028:word16] - 0x0001)
	v12 = Mem0[ss:bp - 0x0028:word16] - 0x00 - C
	Mem0[ss:bp - 0x0028:word16] = v12
	SCZO = cond(v12)
	// succ:  l0800_1AFB_thunk_fn0800_1AFF
l0800_1AFB_thunk_fn0800_1AFF:
	call fn0800_1AFF (retsize: 0;)
	return
	// succ:  fn0800_1AEB_exit
fn0800_1AEB_exit:


// fn0800_1AFF
// Return size: 0
define fn0800_1AFF
fn0800_1AFF_entry:
	// succ:  l0800_1AFF
l0800_1AFF:
	sp = v4
	Top = 0
	es = Mem0[ss:sp:selector]
	sp = sp + 2
	ax = Mem0[ss:bp - 0x0028:word16]
	// succ:  l0800_1B8C
l0800_1B8C:
	di = Mem0[ss:sp:word16]
	sp = sp + 2
	si = Mem0[ss:sp:word16]
	sp = sp + 2
	sp = bp
	bp = Mem0[ss:sp:word16]
	sp = sp + 2
	return
	// succ:  fn0800_1AFF_exit
fn0800_1AFF_exit:


// fn0800_1B06
// Return size: 0
define fn0800_1B06
fn0800_1B06_entry:
	// succ:  l0800_1B06
l0800_1B06:
	sp = v4
	Top = 0
	v7 = Mem0[ss:bp - 0x0026:word16] + 0x0001
	Mem0[ss:bp - 0x0026:word16] = v7
	SZO = cond(v7)
	v9 = Mem0[ss:bp + 0x0008:word16]
	sp = sp - 2
	Mem0[ss:sp:word16] = v9
	call SEQ(0x0800, Mem0[ss:bp + 0x0004:word16]) (retsize: 2;)
	cx = Mem0[ss:sp:word16]
	sp = sp + 2
	ax = ax | ax
	SZO = cond(ax)
	C = false
	branch Test(LE,SZO) l0800_1B27
	// succ:  l0800_1B14 l0800_1B27
l0800_1B14:
	al = al | al
	SZO = cond(al)
	C = false
	branch Test(SG,S) l0800_1B21
	// succ:  l0800_1B18 l0800_1B21
l0800_1B18:
	v15 = ax
	ax = bx
	bx = v15
	SCZO = cond(Mem0[ds:bx + 0x055A:byte] - 0x01)
	v19 = ax
	ax = bx
	bx = v19
	branch Test(EQ,Z) l0800_1B06
	// succ:  l0800_1B21 l0800_1B06
l0800_1B21:
	cx = Mem0[ss:sp:word16]
	sp = sp + 2
	cx = cx + 0x0003
	SCZO = cond(cx)
	call cx (retsize: 2;)
	return
	// succ:  fn0800_1B06_exit
l0800_1B27:
	branch Test(EQ,Z) l0800_1B21
	// succ:  l0800_1B29 l0800_1B21
l0800_1B29:
	cx = Mem0[ss:sp:word16]
	sp = sp + 2
	// succ:  l0800_1B2A_thunk_fn0800_1AEB
l0800_1B2A_thunk_fn0800_1AEB:
	call fn0800_1AEB (retsize: 0;)
	return
	// succ:  fn0800_1B06_exit
fn0800_1B06_exit:


// fn0800_1B2C
// Return size: 0
define fn0800_1B2C
fn0800_1B2C_entry:
	// succ:  l0800_1B2C
l0800_1B2C:
	sp = fp
	Top = 0
	dx = dx - dx
	SCZO = cond(dx)
	cx = 0x0004
	// succ:  l0800_1B31
l0800_1B31:
	v8 = Mem0[ss:bp - 0x0022:word16] - 0x0001
	Mem0[ss:bp - 0x0022:word16] = v8
	SZO = cond(v8)
	branch Test(LT,SO) l0800_1B7B
	// succ:  l0800_1B36 l0800_1B7B
l0800_1B36:
	sp = sp - 2
	Mem0[ss:sp:word16] = dx
	sp = sp - 2
	Mem0[ss:sp:word16] = cx
	v11 = Mem0[ss:bp - 0x0026:word16] + 0x0001
	Mem0[ss:bp - 0x0026:word16] = v11
	SZO = cond(v11)
	v12 = Mem0[ss:bp + 0x0008:word16]
	sp = sp - 2
	Mem0[ss:sp:word16] = v12
	call SEQ(0x0800, Mem0[ss:bp + 0x0004:word16]) (retsize: 2;)
	cx = Mem0[ss:sp:word16]
	sp = sp + 2
	cx = Mem0[ss:sp:word16]
	sp = sp + 2
	dx = Mem0[ss:sp:word16]
	sp = sp + 2
	ax = ax | ax
	SZO = cond(ax)
	C = false
	branch Test(LE,SZO) l0800_1B7D
	// succ:  l0800_1B48 l0800_1B7D
l0800_1B48:
	cl = cl - 0x01
	SZO = cond(cl)
	branch Test(LT,SO) l0800_1B7D
	// succ:  l0800_1B4C l0800_1B7D
l0800_1B4C:
	ch = al
	ch = ch - 0x30
	SCZO = cond(ch)
	branch Test(ULT,C) l0800_1B7D
	// succ:  l0800_1B53 l0800_1B7D
l0800_1B53:
	SCZO = cond(ch - 0x0A)
	branch Test(ULT,C) l0800_1B6F
	// succ:  l0800_1B58 l0800_1B6F
l0800_1B58:
	ch = ch - 0x11
	SCZO = cond(ch)
	branch Test(ULT,C) l0800_1B7D
	// succ:  l0800_1B5D l0800_1B7D
l0800_1B5D:
	SCZO = cond(ch - 0x06)
	branch Test(ULT,C) l0800_1B6C
	// succ:  l0800_1B62 l0800_1B6C
l0800_1B62:
	ch = ch - 0x20
	SCZO = cond(ch)
	branch Test(ULT,C) l0800_1B7D
	// succ:  l0800_1B67 l0800_1B7D
l0800_1B67:
	SCZO = cond(ch - 0x06)
	branch Test(UGE,C) l0800_1B7D
	// succ:  l0800_1B6C l0800_1B7D
l0800_1B6C:
	ch = ch + 0x0A
	SCZO = cond(ch)
	// succ:  l0800_1B6F
l0800_1B6F:
	dx = dx << 0x0001
	SCZO = cond(dx)
	dx = dx << 0x0001
	SCZO = cond(dx)
	dx = dx << 0x0001
	SCZO = cond(dx)
	dx = dx << 0x0001
	SCZO = cond(dx)
	dl = dl + ch
	SCZO = cond(dl)
	goto l0800_1B31
	// succ:  l0800_1B31
l0800_1B7B:
	ax = ax - ax
	SCZO = cond(ax)
	// succ:  l0800_1B7D
l0800_1B7D:
	SCZO = cond(cl - 0x04)
	branch Test(EQ,Z) l0800_1B88
	// succ:  l0800_1B82 l0800_1B88
l0800_1B82:
	cx = Mem0[ss:sp:word16]
	sp = sp + 2
	cx = cx + 0x0003
	SCZO = cond(cx)
	call cx (retsize: 2;)
	return
	// succ:  fn0800_1B2C_exit
l0800_1B88:
	cx = Mem0[ss:sp:word16]
	sp = sp + 2
	// succ:  l0800_1B89_thunk_fn0800_1AEB
l0800_1B89_thunk_fn0800_1AEB:
	call fn0800_1AEB (retsize: 0;)
	return
	// succ:  fn0800_1B2C_exit
fn0800_1B2C_exit:


// __scantod
// Return size: 0
define __scantod
fn0800_1B92_entry:
	// succ:  l0800_1B92
l0800_1B92:
	sp = fp
	Top = 0
	call Mem0[ds:0x05E2:word16] (retsize: 2;)
	return
	// succ:  fn0800_1B92_exit
fn0800_1B92_exit:


// __scanrslt
// Return size: 0
define __scanrslt
fn0800_1B96_entry:
	// succ:  l0800_1B96
l0800_1B96:
	sp = fp
	Top = 0
	call Mem0[ds:0x05E4:word16] (retsize: 2;)
	return
	// succ:  fn0800_1B96_exit
fn0800_1B96_exit:


// __scanpop
// Return size: 0
define __scanpop
fn0800_1B9A_entry:
	// succ:  l0800_1B9A
l0800_1B9A:
	sp = fp
	Top = 0
	call Mem0[ds:0x05E6:word16] (retsize: 2;)
	return
	// succ:  fn0800_1B9A_exit
fn0800_1B9A_exit:


// fn0800_1B9E
// Return size: 2
define fn0800_1B9E
fn0800_1B9E_entry:
	// succ:  l0800_1B9E
l0800_1B9E:
	sp = fp
	Top = 0
	sp = sp - 2
	Mem0[ss:sp:word16] = bx
	bl = bl - 0x30
	SCZO = cond(bl)
	branch Test(ULT,C) l0800_1BC7
	// succ:  l0800_1BA4 l0800_1BC7
l0800_1BA4:
	SCZO = cond(bl - 0x09)
	branch Test(ULE,CZ) l0800_1BBB
	// succ:  l0800_1BA9 l0800_1BBB
l0800_1BA9:
	SCZO = cond(bl - 0x2A)
	branch Test(UGT,CZ) l0800_1BB3
	// succ:  l0800_1BAE l0800_1BB3
l0800_1BAE:
	bl = bl - 0x07
	SCZO = cond(bl)
	goto l0800_1BB6
	// succ:  l0800_1BB6
l0800_1BB3:
	bl = bl - 0x27
	SCZO = cond(bl)
	// succ:  l0800_1BB6
l0800_1BB6:
	SCZO = cond(bl - 0x09)
	branch Test(ULE,CZ) l0800_1BC7
	// succ:  l0800_1BBB l0800_1BC7
l0800_1BBB:
	SCZO = cond(bl - cl)
	branch Test(UGE,C) l0800_1BC7
	// succ:  l0800_1BBF l0800_1BC7
l0800_1BBF:
	sp = sp + 0x0002
	SCZO = cond(sp)
	C = false
	bh = 0x00
	// succ:  l0800_1BC5
l0800_1BC5:
	goto l0800_1BCB
	// succ:  l0800_1BCB
l0800_1BC7:
	bx = Mem0[ss:sp:word16]
	sp = sp + 2
	C = true
	goto l0800_1BC5
	// succ:  l0800_1BC5
l0800_1BCB:
	return
	// succ:  fn0800_1B9E_exit
fn0800_1B9E_exit:


// __scantol
// Return size: 2
define __scantol
fn0800_1BCC_entry:
	// succ:  l0800_1BCC
l0800_1BCC:
	sp = fp
	Top = 0
	sp = sp - 2
	Mem0[ss:sp:word16] = bp
	bp = sp
	sp = sp - 0x0006
	SCZO = cond(sp)
	sp = sp - 2
	Mem0[ss:sp:word16] = si
	sp = sp - 2
	Mem0[ss:sp:word16] = di
	Mem0[ss:bp - 0x0005:byte] = 0x00
	Mem0[ss:bp - 0x0004:word16] = 0x0000
	Mem0[ss:bp - 0x0002:word16] = 0x0001
	sp = sp - 2
	Mem0[ss:sp:word16] = es
	di = 0x0241
	// succ:  l0800_1BE6
l0800_1BE6:
	v9 = Mem0[ss:bp - 0x0004:word16] + 0x0001
	Mem0[ss:bp - 0x0004:word16] = v9
	SZO = cond(v9)
	v11 = Mem0[ss:bp + 0x0008:word16]
	sp = sp - 2
	Mem0[ss:sp:word16] = v11
	call SEQ(0x0800, Mem0[ss:bp + 0x0004:word16]) (retsize: 2;)
	cx = Mem0[ss:sp:word16]
	sp = sp + 2
	ax = ax | ax
	SZO = cond(ax)
	C = false
	branch Test(LT,SO) l0800_1C5A
	// succ:  l0800_1BF4 l0800_1C5A
l0800_1BF4:
	ax = (int16) al
	v17 = ax
	ax = bx
	bx = v17
	SZO = cond(bl & 0x80)
	C = false
	branch Test(NE,Z) l0800_1C00
	// succ:  l0800_1BFB l0800_1C00
l0800_1BFB:
	SZO = cond(Mem0[ds:bx + di:byte] & 0x01)
	C = false
	branch Test(NE,Z) l0800_1BE6
	// succ:  l0800_1C00 l0800_1BE6
l0800_1C00:
	v22 = ax
	ax = bx
	bx = v22
	v23 = Mem0[ss:bp + 0x000C:word16] - 0x0001
	Mem0[ss:bp + 0x000C:word16] = v23
	SZO = cond(v23)
	branch Test(LT,SO) l0800_1C61
	// succ:  l0800_1C06 l0800_1C61
l0800_1C06:
	SCZO = cond(al - 0x2B)
	branch Test(EQ,Z) l0800_1C11
	// succ:  l0800_1C0A l0800_1C11
l0800_1C0A:
	SCZO = cond(al - 0x2D)
	branch Test(NE,Z) l0800_1C24
	// succ:  l0800_1C0E l0800_1C24
l0800_1C0E:
	v24 = Mem0[ss:bp - 0x0005:byte] + 0x01
	Mem0[ss:bp - 0x0005:byte] = v24
	SZO = cond(v24)
	// succ:  l0800_1C11
l0800_1C11:
	v25 = Mem0[ss:bp + 0x000C:word16] - 0x0001
	Mem0[ss:bp + 0x000C:word16] = v25
	SZO = cond(v25)
	branch Test(LT,SO) l0800_1C61
	// succ:  l0800_1C16 l0800_1C61
l0800_1C16:
	v26 = Mem0[ss:bp - 0x0004:word16] + 0x0001
	Mem0[ss:bp - 0x0004:word16] = v26
	SZO = cond(v26)
	v27 = Mem0[ss:bp + 0x0008:word16]
	sp = sp - 2
	Mem0[ss:sp:word16] = v27
	call SEQ(0x0800, Mem0[ss:bp + 0x0004:word16]) (retsize: 2;)
	cx = Mem0[ss:sp:word16]
	sp = sp + 2
	ax = ax | ax
	SZO = cond(ax)
	C = false
	branch Test(LT,SO) l0800_1C5A
	// succ:  l0800_1C24 l0800_1C5A
l0800_1C24:
	si = si - si
	SCZO = cond(si)
	di = si
	cx = Mem0[ss:bp + 0x000A:word16]
	branch cx == 0x0000 l0800_1C7B
	// succ:  l0800_1C2D l0800_1C7B
l0800_1C2D:
	SCZO = cond(cx - 0x0024)
	branch Test(UGT,CZ) l0800_1C61
	// succ:  l0800_1C32 l0800_1C61
l0800_1C32:
	SCZO = cond(cl - 0x02)
	branch Test(ULT,C) l0800_1C61
	// succ:  l0800_1C37 l0800_1C61
l0800_1C37:
	SCZO = cond(al - 0x30)
	branch Test(NE,Z) l0800_1CA7
	// succ:  l0800_1C3B l0800_1CA7
l0800_1C3B:
	SCZO = cond(cl - 0x10)
	branch Test(NE,Z) l0800_1CA5
	// succ:  l0800_1C40 l0800_1CA5
l0800_1C40:
	v30 = Mem0[ss:bp + 0x000C:word16] - 0x0001
	Mem0[ss:bp + 0x000C:word16] = v30
	SZO = cond(v30)
	branch Test(LT,SO) l0800_1C78
	// succ:  l0800_1C45 l0800_1C78
l0800_1C45:
	v31 = Mem0[ss:bp - 0x0004:word16] + 0x0001
	Mem0[ss:bp - 0x0004:word16] = v31
	SZO = cond(v31)
	v32 = Mem0[ss:bp + 0x0008:word16]
	sp = sp - 2
	Mem0[ss:sp:word16] = v32
	call SEQ(0x0800, Mem0[ss:bp + 0x0004:word16]) (retsize: 2;)
	cx = Mem0[ss:sp:word16]
	sp = sp + 2
	SCZO = cond(al - 0x78)
	branch Test(EQ,Z) l0800_1CA5
	// succ:  l0800_1C53 l0800_1CA5
l0800_1C53:
	SCZO = cond(al - 0x58)
	branch Test(EQ,Z) l0800_1CA5
	// succ:  l0800_1C57 l0800_1CA5
l0800_1C57:
	goto l0800_1CCD
	// succ:  l0800_1CCD
l0800_1C5A:
	Mem0[ss:bp - 0x0002:word16] = 0xFFFF
	goto l0800_1C66
	// succ:  l0800_1C66
l0800_1C61:
	Mem0[ss:bp - 0x0002:word16] = 0x0000
	// succ:  l0800_1C66
l0800_1C66:
	v33 = Mem0[ss:bp + 0x0008:word16]
	sp = sp - 2
	Mem0[ss:sp:word16] = v33
	sp = sp - 2
	Mem0[ss:sp:word16] = ax
	call SEQ(0x0800, Mem0[ss:bp + 0x0006:word16]) (retsize: 2;)
	cx = Mem0[ss:sp:word16]
	sp = sp + 2
	cx = Mem0[ss:sp:word16]
	sp = sp + 2
	v34 = Mem0[ss:bp - 0x0004:word16] - 0x0001
	Mem0[ss:bp - 0x0004:word16] = v34
	SZO = cond(v34)
	ax = ax - ax
	SCZO = cond(ax)
	dx_ax = (int32) ax
	goto l0800_1D1F
	// succ:  l0800_1D1F
l0800_1C78:
	goto l0800_1D0F
	// succ:  l0800_1D0F
l0800_1C7B:
	SCZO = cond(al - 0x30)
	Mem0[ss:bp + 0x000A:word16] = 0x000A
	branch Test(NE,Z) l0800_1CA7
	// succ:  l0800_1C84 l0800_1CA7
l0800_1C84:
	v62 = Mem0[ss:bp + 0x000C:word16] - 0x0001
	Mem0[ss:bp + 0x000C:word16] = v62
	SZO = cond(v62)
	branch Test(LT,SO) l0800_1C78
	// succ:  l0800_1C89 l0800_1C78
l0800_1C89:
	v63 = Mem0[ss:bp - 0x0004:word16] + 0x0001
	Mem0[ss:bp - 0x0004:word16] = v63
	SZO = cond(v63)
	v64 = Mem0[ss:bp + 0x0008:word16]
	sp = sp - 2
	Mem0[ss:sp:word16] = v64
	call SEQ(0x0800, Mem0[ss:bp + 0x0004:word16]) (retsize: 2;)
	cx = Mem0[ss:sp:word16]
	sp = sp + 2
	Mem0[ss:bp + 0x000A:word16] = 0x0008
	SCZO = cond(al - 0x78)
	branch Test(EQ,Z) l0800_1CA0
	// succ:  l0800_1C9C l0800_1CA0
l0800_1C9C:
	SCZO = cond(al - 0x58)
	branch Test(NE,Z) l0800_1CCD
	// succ:  l0800_1CA0 l0800_1CCD
l0800_1CA0:
	Mem0[ss:bp + 0x000A:word16] = 0x0010
	// succ:  l0800_1CA5
l0800_1CA5:
	goto l0800_1CBE
	// succ:  l0800_1CBE
l0800_1CA7:
	cx = Mem0[ss:bp + 0x000A:word16]
	v52 = ax
	ax = bx
	bx = v52
	call fn0800_1B9E (retsize: 2;)
	v53 = ax
	ax = bx
	bx = v53
	branch Test(ULT,C) l0800_1C61
	// succ:  l0800_1CB1 l0800_1C61
l0800_1CB1:
	v54 = ax
	ax = si
	si = v54
	goto l0800_1CBE
	// succ:  l0800_1CBE
l0800_1CB4:
	v44 = ax
	ax = si
	si = v44
	dx_ax = Mem0[ss:bp + 0x000A:word16] *u ax
	SCZO = cond(dx_ax)
	si = si + ax
	SCZO = cond(si)
	di = di + dx + C
	SCZO = cond(di)
	branch Test(NE,Z) l0800_1CEA
	// succ:  l0800_1CBE l0800_1CEA
l0800_1CBE:
	v39 = Mem0[ss:bp + 0x000C:word16] - 0x0001
	Mem0[ss:bp + 0x000C:word16] = v39
	SZO = cond(v39)
	branch Test(LT,SO) l0800_1D0F
	// succ:  l0800_1CC3 l0800_1D0F
l0800_1CC3:
	v40 = Mem0[ss:bp - 0x0004:word16] + 0x0001
	Mem0[ss:bp - 0x0004:word16] = v40
	SZO = cond(v40)
	v41 = Mem0[ss:bp + 0x0008:word16]
	sp = sp - 2
	Mem0[ss:sp:word16] = v41
	call SEQ(0x0800, Mem0[ss:bp + 0x0004:word16]) (retsize: 2;)
	cx = Mem0[ss:sp:word16]
	sp = sp + 2
	// succ:  l0800_1CCD
l0800_1CCD:
	cx = Mem0[ss:bp + 0x000A:word16]
	v36 = ax
	ax = bx
	bx = v36
	call fn0800_1B9E (retsize: 2;)
	v37 = ax
	ax = bx
	bx = v37
	branch Test(UGE,C) l0800_1CB4
	// succ:  l0800_1CD7 l0800_1CB4
l0800_1CD7:
	goto l0800_1D03
	// succ:  l0800_1D03
l0800_1CD9:
	v55 = ax
	ax = si
	si = v55
	dx_ax = cx *u ax
	SCZO = cond(dx_ax)
	v56 = ax
	ax = di
	di = v56
	v57 = dx
	dx = cx
	cx = v57
	dx_ax = dx *u ax
	SCZO = cond(dx_ax)
	si = si + di
	SCZO = cond(si)
	ax = ax + cx + C
	SCZO = cond(ax)
	v58 = ax
	ax = di
	di = v58
	dl = dl + dh + C
	SCZO = cond(dl)
	branch Test(NE,Z) l0800_1D32
	// succ:  l0800_1CEA l0800_1D32
l0800_1CEA:
	v47 = Mem0[ss:bp + 0x000C:word16] - 0x0001
	Mem0[ss:bp + 0x000C:word16] = v47
	SZO = cond(v47)
	branch Test(LT,SO) l0800_1D0F
	// succ:  l0800_1CEF l0800_1D0F
l0800_1CEF:
	v48 = Mem0[ss:bp - 0x0004:word16] + 0x0001
	Mem0[ss:bp - 0x0004:word16] = v48
	SZO = cond(v48)
	v49 = Mem0[ss:bp + 0x0008:word16]
	sp = sp - 2
	Mem0[ss:sp:word16] = v49
	call SEQ(0x0800, Mem0[ss:bp + 0x0004:word16]) (retsize: 2;)
	cx = Mem0[ss:sp:word16]
	sp = sp + 2
	cx = Mem0[ss:bp + 0x000A:word16]
	v50 = ax
	ax = bx
	bx = v50
	call fn0800_1B9E (retsize: 2;)
	v51 = ax
	ax = bx
	bx = v51
	branch Test(UGE,C) l0800_1CD9
	// succ:  l0800_1D03 l0800_1CD9
l0800_1D03:
	v42 = Mem0[ss:bp + 0x0008:word16]
	sp = sp - 2
	Mem0[ss:sp:word16] = v42
	sp = sp - 2
	Mem0[ss:sp:word16] = ax
	call SEQ(0x0800, Mem0[ss:bp + 0x0006:word16]) (retsize: 2;)
	cx = Mem0[ss:sp:word16]
	sp = sp + 2
	cx = Mem0[ss:sp:word16]
	sp = sp + 2
	v43 = Mem0[ss:bp - 0x0004:word16] - 0x0001
	Mem0[ss:bp - 0x0004:word16] = v43
	SZO = cond(v43)
	// succ:  l0800_1D0F
l0800_1D0F:
	dx = di
	v46 = ax
	ax = si
	si = v46
	SCZO = cond(Mem0[ss:bp - 0x0005:byte] - 0x00)
	branch Test(EQ,Z) l0800_1D1F
	// succ:  l0800_1D18 l0800_1D1F
l0800_1D18:
	dx = -dx
	SCZO = cond(dx)
	C = dx == 0x0000
	ax = -ax
	SCZO = cond(ax)
	C = ax == 0x0000
	dx = dx - 0x00 - C
	SCZO = cond(dx)
	// succ:  l0800_1D1F
l0800_1D1F:
	di = Mem0[ss:bp + 0x000E:word16]
	bx = Mem0[ss:bp - 0x0004:word16]
	v38 = Mem0[ds:di:word16] + bx
	Mem0[ds:di:word16] = v38
	SCZO = cond(v38)
	di = Mem0[ss:bp + 0x0010:word16]
	bx = Mem0[ss:bp - 0x0002:word16]
	Mem0[ds:di:word16] = bx
	es = Mem0[ss:sp:selector]
	sp = sp + 2
	goto l0800_1D48
	// succ:  l0800_1D48
l0800_1D32:
	ax = 0xFFFF
	dx = 0x7FFF
	al = al + Mem0[ss:bp - 0x0005:byte]
	SCZO = cond(al)
	ah = ah + 0x00 + C
	SCZO = cond(ah)
	dx = dx + 0x00 + C
	SCZO = cond(dx)
	Mem0[ss:bp - 0x0002:word16] = 0x0002
	goto l0800_1D1F
	// succ:  l0800_1D1F
l0800_1D48:
	di = Mem0[ss:sp:word16]
	sp = sp + 2
	si = Mem0[ss:sp:word16]
	sp = sp + 2
	sp = bp
	bp = Mem0[ss:sp:word16]
	sp = sp + 2
	return
	// succ:  fn0800_1BCC_exit
fn0800_1BCC_exit:


// _tell
// Return size: 2
define _tell
fn0800_1D4E_entry:
	// succ:  l0800_1D4E
l0800_1D4E:
	sp = fp
	Top = 0
	sp = sp - 2
	Mem0[ss:sp:word16] = bp
	bp = sp
	ax = 0x0001
	sp = sp - 2
	Mem0[ss:sp:word16] = ax
	ax = ax ^ ax
	SZO = cond(ax)
	C = false
	sp = sp - 2
	Mem0[ss:sp:word16] = ax
	sp = sp - 2
	Mem0[ss:sp:word16] = ax
	v8 = Mem0[ss:bp + 0x0004:word16]
	sp = sp - 2
	Mem0[ss:sp:word16] = v8
	call _lseek (retsize: 2;)
	sp = bp
	// succ:  l0800_1D63
l0800_1D63:
	bp = Mem0[ss:sp:word16]
	sp = sp + 2
	return
	// succ:  fn0800_1D4E_exit
fn0800_1D4E_exit:


