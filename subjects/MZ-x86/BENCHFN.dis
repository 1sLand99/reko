// fn0800_01FA
// Return size: 2
void fn0800_01FA()
fn0800_01FA_entry:
	// succ:  l0800_01FA
l0800_01FA:
	sp = fp
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = bp
	bp = sp
	bp = Mem0[ss:sp:word16]
	sp = sp + 0x0002
	return
	// succ:  fn0800_01FA_exit
fn0800_01FA_exit:


// fn0800_01FF
// Return size: 2
void fn0800_01FF()
fn0800_01FF_entry:
	// succ:  l0800_01FF
l0800_01FF:
	sp = fp
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = bp
	bp = sp
	call fn0800_01FA (retsize: 2;)
	call fn0800_01FA (retsize: 2;)
	call fn0800_01FA (retsize: 2;)
	call fn0800_01FA (retsize: 2;)
	call fn0800_01FA (retsize: 2;)
	call fn0800_01FA (retsize: 2;)
	call fn0800_01FA (retsize: 2;)
	call fn0800_01FA (retsize: 2;)
	call fn0800_01FA (retsize: 2;)
	call fn0800_01FA (retsize: 2;)
	bp = Mem0[ss:sp:word16]
	sp = sp + 0x0002
	return
	// succ:  fn0800_01FF_exit
fn0800_01FF_exit:


// fn0800_0222
// Return size: 2
void fn0800_0222()
fn0800_0222_entry:
	// succ:  l0800_0222
l0800_0222:
	sp = fp
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = bp
	bp = sp
	call fn0800_01FF (retsize: 2;)
	call fn0800_01FF (retsize: 2;)
	call fn0800_01FF (retsize: 2;)
	call fn0800_01FF (retsize: 2;)
	call fn0800_01FF (retsize: 2;)
	call fn0800_01FF (retsize: 2;)
	call fn0800_01FF (retsize: 2;)
	call fn0800_01FF (retsize: 2;)
	call fn0800_01FF (retsize: 2;)
	call fn0800_01FF (retsize: 2;)
	bp = Mem0[ss:sp:word16]
	sp = sp + 0x0002
	return
	// succ:  fn0800_0222_exit
fn0800_0222_exit:


// fn0800_0245
// Return size: 2
void fn0800_0245()
fn0800_0245_entry:
	// succ:  l0800_0245
l0800_0245:
	sp = fp
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = bp
	bp = sp
	call fn0800_0222 (retsize: 2;)
	call fn0800_0222 (retsize: 2;)
	call fn0800_0222 (retsize: 2;)
	call fn0800_0222 (retsize: 2;)
	call fn0800_0222 (retsize: 2;)
	call fn0800_0222 (retsize: 2;)
	call fn0800_0222 (retsize: 2;)
	call fn0800_0222 (retsize: 2;)
	call fn0800_0222 (retsize: 2;)
	bp = Mem0[ss:sp:word16]
	sp = sp + 0x0002
	return
	// succ:  fn0800_0245_exit
fn0800_0245_exit:


// main
// Return size: 2
void main()
main_entry:
	// succ:  l0800_0265
l0800_0265:
	sp = fp
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = bp
	bp = sp
	sp = sp - 0x0008
	SCZO = cond(sp)
	ax = 0x0194
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	call fn0800_0E4B (retsize: 2;)
	cx = Mem0[ss:sp:word16]
	sp = sp + 0x0002
	ax = bp - 0x0004
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	ax = 0x01B0
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	call fn0800_16D4 (retsize: 2;)
	cx = Mem0[ss:sp:word16]
	sp = sp + 0x0002
	cx = Mem0[ss:sp:word16]
	sp = sp + 0x0002
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ss:bp - 0x0002:word16]
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ss:bp - 0x0004:word16]
	ax = 0x01B4
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	call fn0800_0E4B (retsize: 2;)
	sp = sp + 0x0006
	SCZO = cond(sp)
	Mem0[ss:bp - 0x0006:word16] = 0x0000
	Mem0[ss:bp - 0x0008:word16] = 0x0001
	goto l0800_02A7
	// succ:  l0800_02A7
l0800_029C:
	call fn0800_0245 (retsize: 2;)
	v12 = Mem0[ss:bp - 0x0008:word16] + 0x0001
	Mem0[ss:bp - 0x0008:word16] = v12
	SCZO = cond(v12)
	v14 = Mem0[ss:bp - 0x0006:word16] + 0x00 + C
	Mem0[ss:bp - 0x0006:word16] = v14
	SCZO = cond(v14)
	// succ:  l0800_02A7
l0800_02A7:
	dx = Mem0[ss:bp - 0x0006:word16]
	ax = Mem0[ss:bp - 0x0008:word16]
	SCZO = cond(dx - Mem0[ss:bp - 0x0002:word16])
	branch Test(LT,SO) l0800_029C
	// succ:  l0800_02B2 l0800_029C
l0800_02B2:
	branch Test(GT,SZO) l0800_02B9
	// succ:  l0800_02B4 l0800_02B9
l0800_02B4:
	SCZO = cond(ax - Mem0[ss:bp - 0x0004:word16])
	branch Test(ULE,CZ) l0800_029C
	// succ:  l0800_02B9 l0800_029C
l0800_02B9:
	ax = 0x01CE
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	call fn0800_0E4B (retsize: 2;)
	cx = Mem0[ss:sp:word16]
	sp = sp + 0x0002
	sp = bp
	bp = Mem0[ss:sp:word16]
	sp = sp + 0x0002
	return
	// succ:  main_exit
main_exit:


// fn0800_0E4B
// Return size: 2
void fn0800_0E4B()
fn0800_0E4B_entry:
	// succ:  l0800_0E4B
l0800_0E4B:
	sp = fp
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = bp
	bp = sp
	ax = 0x0F81
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	ax = 0x0352
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ss:bp + 0x0004:word16]
	ax = bp + 0x0006
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	call fn0800_1073 (retsize: 2;)
	sp = sp + 0x0008
	// succ:  l0800_0E62
l0800_0E62:
	bp = Mem0[ss:sp:word16]
	sp = sp + 0x0002
	return
	// succ:  fn0800_0E4B_exit
fn0800_0E4B_exit:


// fn0800_1073
// Return size: 2
void fn0800_1073()
fn0800_1073_entry:
	// succ:  l0800_1073
l0800_1073:
	sp = fp
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = bp
	bp = sp
	sp = sp - 0x0098
	SCZO = cond(sp)
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = si
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = di
	Mem0[ss:bp - 0x0058:word16] = 0x0000
	Mem0[ss:bp - 0x0055:byte] = 0x50
	Mem0[ss:bp - 0x0002:word16] = 0x0000
	// succ:  l0800_10CD
l0800_10CD:
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = es
	D = false
	di = bp - 0x0054
	Mem0[ss:bp - 0x0096:word16] = di
	di = Mem0[ss:bp - 0x0096:word16]
	si = Mem0[ss:bp + 0x0006:word16]
	// succ:  l0800_10DD
l0800_10DD:
	al = Mem0[ds:si:byte]
	si = si + 0x0001
	al = al | al
	SZO = cond(al)
	C = false
	branch Test(EQ,Z) l0800_10F3
	// succ:  l0800_10E2 l0800_10F3
l0800_10E2:
	SCZO = cond(al - 0x25)
	branch Test(EQ,Z) l0800_10F6
	// succ:  l0800_10E6 l0800_10F6
l0800_10E6:
	Mem0[ds:di:byte] = al
	di = di + 0x0001
	SZO = cond(di)
	v15 = Mem0[ss:bp - 0x0055:byte] - 0x01
	Mem0[ss:bp - 0x0055:byte] = v15
	SZO = cond(v15)
	branch Test(GT,SZO) l0800_10DD
	// succ:  l0800_10EE l0800_10DD
l0800_10EE:
	call fn0800_10A1 (retsize: 2;)
	goto l0800_10DD
	// succ:  l0800_10DD
l0800_10F3:
	goto l0800_1572
	// succ:  l0800_1572
l0800_10F6:
	Mem0[ss:bp - 0x008A:word16] = si
	al = Mem0[ds:si:byte]
	si = si + 0x0001
	SCZO = cond(al - 0x25)
	branch Test(EQ,Z) l0800_10E6
	// succ:  l0800_10FF l0800_10E6
l0800_10FF:
	Mem0[ss:bp - 0x0096:word16] = di
	cx = cx ^ cx
	SZO = cond(cx)
	C = false
	Mem0[ss:bp - 0x008C:word16] = cx
	Mem0[ss:bp - 0x0098:word16] = cx
	Mem0[ss:bp - 0x008D:byte] = cl
	Mem0[ss:bp - 0x0092:word16] = 0xFFFF
	Mem0[ss:bp - 0x0090:word16] = 0xFFFF
	goto l0800_1120
	// succ:  l0800_1120
l0800_111F:
	al = Mem0[ds:si:byte]
	si = si + 0x0001
	// succ:  l0800_1120
l0800_1120:
	ah = ah ^ ah
	SZO = cond(ah)
	C = false
	dx = ax
	bx = ax
	bl = bl - 0x20
	SCZO = cond(bl)
	SCZO = cond(bl - 0x60)
	branch Test(UGE,C) l0800_1175
	// succ:  l0800_112E l0800_1175
l0800_112E:
	bl = Mem0[ds:bx + 0x04F9:byte]
	ax = bx
	SCZO = cond(ax - 0x0017)
	branch Test(ULE,CZ) l0800_113C
	// succ:  l0800_1139 l0800_113C
l0800_1139:
	goto l0800_1560
	// succ:  l0800_1560
l0800_113C:
	bx = ax
	bx = bx << 0x0001
	SCZO = cond(bx)
	switch (bx) { l0800_1190 }
	goto l0800_1190
	// succ:  l0800_1190
l0800_1175:
	goto l0800_1560
	// succ:  l0800_1560
l0800_1190:
	SCZO = cond(ch - 0x00)
	branch Test(UGT,CZ) l0800_1175
	// succ:  l0800_1195 l0800_1175
l0800_1195:
	SCZO = cond(Mem0[ss:bp - 0x008D:byte] - 0x2B)
	branch Test(EQ,Z) l0800_11A0
	// succ:  l0800_119C l0800_11A0
l0800_119C:
	Mem0[ss:bp - 0x008D:byte] = dl
	// succ:  l0800_11A0
l0800_11A0:
	goto l0800_111F
	// succ:  l0800_111F
l0800_1560:
	si = Mem0[ss:bp - 0x008A:word16]
	di = Mem0[ss:bp - 0x0096:word16]
	al = 0x25
	// succ:  l0800_156A
l0800_156A:
	call fn0800_1099 (retsize: 2;)
	sp = sp + 0xFFFE
	al = Mem0[ds:si:byte]
	si = si + 0x0001
	al = al | al
	SZO = cond(al)
	C = false
	branch Test(NE,Z) l0800_156A
	// succ:  l0800_1572 l0800_156A
l0800_1572:
	SCZO = cond(Mem0[ss:bp - 0x0055:byte] - 0x50)
	branch Test(GE,SO) l0800_157B
	SCZO = cond(Mem0[ss:bp - 0x0055:byte] - 0x50)
	branch Test(GE,SO) l0800_157B
	// succ:  l0800_1578 l0800_157B
l0800_1578:
	call fn0800_10A1 (retsize: 2;)
	call fn0800_10A1 (retsize: 2;)
	// succ:  l0800_157B
l0800_157B:
	es = Mem0[ss:sp:selector]
	sp = sp + 0x0002
	SCZO = cond(Mem0[ss:bp - 0x0002:word16] - 0x0000)
	branch Test(EQ,Z) l0800_1589
	// succ:  l0800_1582 l0800_1589
l0800_1582:
	ax = 0xFFFF
	goto l0800_158E
	// succ:  l0800_158E
l0800_1589:
	ax = Mem0[ss:bp - 0x0058:word16]
	// succ:  l0800_158E
l0800_158E:
	di = Mem0[ss:sp:word16]
	sp = sp + 0x0002
	si = Mem0[ss:sp:word16]
	sp = sp + 0x0002
	sp = bp
	bp = Mem0[ss:sp:word16]
	sp = sp + 0x0002
	return
	// succ:  fn0800_1073_exit
fn0800_1073_exit:


// fn0800_1099
// Return size: 2
void fn0800_1099()
fn0800_1099_entry:
	// succ:  l0800_1099
l0800_1099:
	sp = fp
	Mem0[ds:di:byte] = al
	di = di + 0x0001
	SZO = cond(di)
	v9 = Mem0[ss:bp - 0x0055:byte] - 0x01
	Mem0[ss:bp - 0x0055:byte] = v9
	SZO = cond(v9)
	branch Test(LE,SZO) l0800_10CC_in_fn0800_1099
	// succ:  l0800_109F_thunk_fn0800_10A1 l0800_10CC_in_fn0800_1099
l0800_109F_thunk_fn0800_10A1:
	call fn0800_10A1 (retsize: 2;)
	return
	// succ:  fn0800_1099_exit l0800_109F_thunk_fn0800_10A1
l0800_109F_thunk_fn0800_10A1:
	call fn0800_10A1 (retsize: 2;)
	return
	// succ:  fn0800_1099_exit
l0800_10CC_in_fn0800_1099:
	return
	// succ:  fn0800_1099_exit
fn0800_1099_exit:


// fn0800_10A1
// Return size: 2
void fn0800_10A1()
fn0800_10A1_entry:
	// succ:  l0800_10A1
l0800_10A1:
	sp = fp
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = bx
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = cx
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = dx
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = es
	ax = bp - 0x0054
	di = di - ax
	SCZO = cond(di)
	ax = bp - 0x0054
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = di
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ss:bp + 0x0008:word16]
	call SEQ(cs, Mem0[ss:bp + 0x000A:word16]) (retsize: 2;)
	ax = ax | ax
	SZO = cond(ax)
	C = false
	branch Test(NE,Z) l0800_10BE
	// succ:  l0800_10B9 l0800_10BE
l0800_10B9:
	Mem0[ss:bp - 0x0002:word16] = 0x0001
	// succ:  l0800_10BE
l0800_10BE:
	Mem0[ss:bp - 0x0055:byte] = 0x50
	v16 = Mem0[ss:bp - 0x0058:word16] + di
	Mem0[ss:bp - 0x0058:word16] = v16
	SCZO = cond(v16)
	di = bp - 0x0054
	es = Mem0[ss:sp:selector]
	sp = sp + 0x0002
	dx = Mem0[ss:sp:word16]
	sp = sp + 0x0002
	cx = Mem0[ss:sp:word16]
	sp = sp + 0x0002
	bx = Mem0[ss:sp:word16]
	sp = sp + 0x0002
	// succ:  l0800_10CC
l0800_10CC:
	return
	// succ:  fn0800_10A1_exit
fn0800_10A1_exit:


// fn0800_16D4
// Return size: 2
void fn0800_16D4()
fn0800_16D4_entry:
	// succ:  l0800_16D4
l0800_16D4:
	sp = fp
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = bp
	bp = sp
	ax = bp + 0x0006
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ss:bp + 0x0004:word16]
	ax = 0x0342
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	ax = 0x1D65
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	ax = 0x07F2
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	call fn0800_16F3 (retsize: 2;)
	sp = bp
	// succ:  l0800_16F1
l0800_16F1:
	bp = Mem0[ss:sp:word16]
	sp = sp + 0x0002
	return
	// succ:  fn0800_16D4_exit
fn0800_16D4_exit:


// fn0800_16F3
// Return size: 2
void fn0800_16F3()
fn0800_16F3_entry:
	// succ:  l0800_16F3
l0800_16F3:
	sp = fp
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = bp
	bp = sp
	sp = sp - 0x002A
	SCZO = cond(sp)
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = si
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = di
	Mem0[ss:bp - 0x0028:word16] = 0x0000
	Mem0[ss:bp - 0x0026:word16] = 0x0000
	// succ:  l0800_1721
l0800_1721:
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = es
	D = false
	si = Mem0[ss:bp + 0x000A:word16]
	// succ:  l0800_1726
l0800_1726:
	al = Mem0[ds:si:byte]
	si = si + 0x0001
	al = al | al
	SZO = cond(al)
	C = false
	branch Test(EQ,Z) l0800_1788
	// succ:  l0800_172B l0800_1788
l0800_172B:
	SCZO = cond(al - 0x25)
	branch Test(EQ,Z) l0800_178B
	// succ:  l0800_172F l0800_178B
l0800_172F:
	ax = (int16) al
	v16 = ax
	ax = di
	di = v16
	v17 = Mem0[ss:bp - 0x0026:word16] + 0x0001
	Mem0[ss:bp - 0x0026:word16] = v17
	SZO = cond(v17)
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ss:bp + 0x0008:word16]
	call SEQ(cs, Mem0[ss:bp + 0x0004:word16]) (retsize: 2;)
	cx = Mem0[ss:sp:word16]
	sp = sp + 0x0002
	ax = ax | ax
	SZO = cond(ax)
	C = false
	branch Test(LT,SO) l0800_1764
	// succ:  l0800_173F l0800_1764
l0800_173F:
	di = di | di
	SZO = cond(di)
	C = false
	branch Test(SG,S) l0800_1775
	// succ:  l0800_1743 l0800_1775
l0800_1743:
	SCZO = cond(Mem0[ds:di + 0x055A:byte] - 0x01)
	branch Test(NE,Z) l0800_1775
	// succ:  l0800_174A l0800_1775
l0800_174A:
	v22 = ax
	ax = bx
	bx = v22
	bl = bl | bl
	SZO = cond(bl)
	C = false
	branch Test(SG,S) l0800_1767
	// succ:  l0800_174F l0800_1767
l0800_174F:
	SCZO = cond(Mem0[ds:bx + 0x055A:byte] - 0x01)
	branch Test(NE,Z) l0800_1767
	// succ:  l0800_1756 l0800_1767
l0800_1756:
	v25 = Mem0[ss:bp - 0x0026:word16] + 0x0001
	Mem0[ss:bp - 0x0026:word16] = v25
	SZO = cond(v25)
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ss:bp + 0x0008:word16]
	call SEQ(cs, Mem0[ss:bp + 0x0004:word16]) (retsize: 2;)
	cx = Mem0[ss:sp:word16]
	sp = sp + 0x0002
	ax = ax | ax
	SZO = cond(ax)
	C = false
	branch Test(GT,SZO) l0800_174A
	// succ:  l0800_1764 l0800_174A
l0800_1764:
	goto l0800_1AEB
	// succ:  l0800_1AEB
l0800_1767:
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ss:bp + 0x0008:word16]
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = bx
	call SEQ(cs, Mem0[ss:bp + 0x0006:word16]) (retsize: 2;)
	cx = Mem0[ss:sp:word16]
	sp = sp + 0x0002
	cx = Mem0[ss:sp:word16]
	sp = sp + 0x0002
	v27 = Mem0[ss:bp - 0x0026:word16] - 0x0001
	Mem0[ss:bp - 0x0026:word16] = v27
	SZO = cond(v27)
	goto l0800_1726
	// succ:  l0800_1726
l0800_1775:
	SCZO = cond(ax - di)
	branch Test(EQ,Z) l0800_1726
	// succ:  l0800_1779 l0800_1726
l0800_1779:
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ss:bp + 0x0008:word16]
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	call SEQ(cs, Mem0[ss:bp + 0x0006:word16]) (retsize: 2;)
	cx = Mem0[ss:sp:word16]
	sp = sp + 0x0002
	cx = Mem0[ss:sp:word16]
	sp = sp + 0x0002
	v28 = Mem0[ss:bp - 0x0026:word16] - 0x0001
	Mem0[ss:bp - 0x0026:word16] = v28
	SZO = cond(v28)
	goto l0800_1AFF
	// succ:  l0800_1AFF
l0800_1788:
	goto l0800_1AFF
	// succ:  l0800_1AFF
l0800_178B:
	Mem0[ss:bp - 0x0022:word16] = 0xFFFF
	Mem0[ss:bp - 0x0029:byte] = 0x00
	al = Mem0[ds:si:byte]
	si = si + 0x0001
	ax = (int16) al
	Mem0[ss:bp + 0x000A:word16] = si
	v29 = ax
	ax = di
	di = v29
	di = di | di
	SZO = cond(di)
	C = false
	branch Test(LT,SO) l0800_17E6
	// succ:  l0800_179E l0800_17E6
l0800_179E:
	bl = Mem0[ds:di + 0x055A:byte]
	bh = bh ^ bh
	SZO = cond(bh)
	C = false
	ax = bx
	SCZO = cond(ax - 0x0015)
	branch Test(ULE,CZ) l0800_17AE
	// succ:  l0800_17AB l0800_17AE
l0800_17AB:
	goto l0800_1AEB
	// succ:  l0800_1AEB
l0800_17AE:
	bx = ax
	bx = bx << 0x0001
	SCZO = cond(bx)
	switch (di) { l0800_17E6 }
	// succ:  l0800_17E6
l0800_17E6:
	goto l0800_1AFF
	// succ:  l0800_1AFF
l0800_1AEB:
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ss:bp + 0x0008:word16]
	ax = 0xFFFF
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	call SEQ(cs, Mem0[ss:bp + 0x0006:word16]) (retsize: 2;)
	cx = Mem0[ss:sp:word16]
	sp = sp + 0x0002
	cx = Mem0[ss:sp:word16]
	sp = sp + 0x0002
	SCZO = cond(Mem0[ss:bp - 0x0028:word16] - 0x0001)
	v26 = Mem0[ss:bp - 0x0028:word16] - 0x00 - C
	Mem0[ss:bp - 0x0028:word16] = v26
	SCZO = cond(v26)
	// succ:  l0800_1AFF
l0800_1AFF:
	es = Mem0[ss:sp:selector]
	sp = sp + 0x0002
	ax = Mem0[ss:bp - 0x0028:word16]
	// succ:  l0800_1B8C
l0800_1B8C:
	di = Mem0[ss:sp:word16]
	sp = sp + 0x0002
	si = Mem0[ss:sp:word16]
	sp = sp + 0x0002
	sp = bp
	bp = Mem0[ss:sp:word16]
	sp = sp + 0x0002
	return
	// succ:  fn0800_16F3_exit
fn0800_16F3_exit:


