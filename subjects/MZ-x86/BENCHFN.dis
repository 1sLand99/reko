void fn0800_0000()
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse: 
// LiveOut:
// Trashed:
// Preserved:
// Terminates process
fn0800_0000_exit:
// DataOut:
// DataOut (flags): 
// SymbolicIn:

fn0800_0000_entry:
// DataOut:
// DataOut (flags): 
// SymbolicIn: sp:fp



void fn0800_0121()
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  ss
// LiveOut:
// Trashed:
// Preserved:
// Terminates process
fn0800_0121_exit:
// DataOut:
// DataOut (flags): 
// SymbolicIn:

fn0800_0121_entry:
// DataOut: ss
// DataOut (flags): 
// SymbolicIn: sp:fp
// LocalsOut: fp(16)

l0800_0121:
	selector ds_3 = Mem0[0x0800:0x01F8:selector]
	fn0800_01A5(ds_3)
	word16 sp_6
	selector ds_7
	selector cs_8
	word16 ax_9
	byte SZO_10
	byte C_11
	word16 si_12
	word16 cx_13
	byte D_14
	byte al_15
	byte SCZO_16
	byte ah_17
	byte Z_18
	word16 dx_19
	word16 bp_20
	selector ss_21
	word16 bx_22
	call SEQ(cs, Mem0[ds_3:0x05DC:word16]) (retsize: 2; depth: 4)
		uses: cs,ds_3,sp_4
		defs: ah_17,al_15,ax_9,bp_20,bx_22,C_11,cs_8,cx_13,D_14,ds_7,dx_19,SCZO_16,si_12,sp_6,ss_21,SZO_10,Z_18
	word16 ax_23 = 0x0000
	byte al_24 = 0x00
	byte ah_25 = 0x00
	word16 si_29 = 0x0000
	word16 cx_30 = 0x002F
// DataOut: ah al cx ds si sp ss
// DataOut (flags): 
// SymbolicIn: sp:fp

l0800_0137:
	al_24 = al_24 + Mem0[ds_7:si_29:byte]
	ah_25 = ah_25 + (al_24 <u 0x00)
	ax_23 = DPB(ax_23, ah_25, 8) (alias)
	si_29 = si_29 + 0x0001
	cx_30 = cx_30 - 0x0001
	branch cx_30 != 0x0000 l0800_0137
// DataOut: ah al ax cx ds si sp ss
// DataOut (flags): 
// SymbolicIn: sp:<invalid> ds:<invalid> ax:<invalid> si:<invalid> cx:<invalid> al:<invalid> ah:<invalid> dx:<invalid>

l0800_013F:
	byte al_48 = (byte) (ax_23 - 0x0D37)
	branch ax_23 == 0x0D37 l0800_014F
// DataOut: al ds sp ss
// DataOut (flags): 
// SymbolicIn: sp:<invalid> ds:<invalid> ax:<invalid> si:<invalid> cx:<invalid> al:<invalid> ah:<invalid> dx:<invalid>

l0800_0145:
	fn0800_01DA(al_48, 0x0019, 0x002F, ds_7)
// DataOut: al sp ss
// DataOut (flags): 
// SymbolicIn: sp:<invalid> ds:<invalid> ax:<invalid> si:<invalid> cx:<invalid> al:<invalid> ah:<invalid> dx:<invalid>

l0800_014F:
	msdos_terminate(Mem0[ss_21:sp_6 + 0x0002:byte])
// DataOut:
// DataOut (flags): 
// SymbolicIn: sp:<invalid> ds:<invalid> ax:<invalid> si:<invalid> cx:<invalid> al:<invalid> ah:<invalid> dx:<invalid> bx:0x0002



void fn0800_0162(selector ds)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  cs ds
// LiveOut:
// Trashed: ah al ax bh bl bx dh dl dx eax ebx edx es rax rbx rdx
// Preserved: ds sp
fn0800_0162_entry:
// DataOut: cs ds
// DataOut (flags): 
// SymbolicIn: sp:fp
// LocalsOut: fp(16)

l0800_0162:
	word32 es_bx_7 = msdos_get_interrupt_vector(0x00)
	Mem10[ds:0x0074:word16] = (word16) es_bx_7
	Mem11[ds:0x0076:word16] = SLICE(es_bx_7, selector, 16)
	word32 es_bx_14 = msdos_get_interrupt_vector(0x04)
	Mem17[ds:0x0078:word16] = (word16) es_bx_14
	Mem18[ds:0x007A:word16] = SLICE(es_bx_14, selector, 16)
	word32 es_bx_21 = msdos_get_interrupt_vector(0x05)
	Mem24[ds:0x007C:word16] = (word16) es_bx_21
	Mem25[ds:0x007E:word16] = SLICE(es_bx_21, selector, 16)
	word32 es_bx_28 = msdos_get_interrupt_vector(0x06)
	Mem31[ds:0x0080:word16] = (word16) es_bx_28
	Mem32[ds:0x0082:word16] = SLICE(es_bx_28, selector, 16)
	msdos_set_interrupt_vector(0x00, SEQ(cs, 0x0158))
	return
// DataOut:
// DataOut (flags): 
// SymbolicIn: sp:fp

fn0800_0162_exit:
// DataOut:
// DataOut (flags): 
// SymbolicIn: sp:fp ax:0x2500 Sequence es:bx:<invalid> dx:0x0158 ds:ds -2(fp):ds



void fn0800_01A5(selector ds)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  ds
// LiveOut:
// Trashed: ah al ax dh dl ds dx eax edx rax rdx
// Preserved: ds sp
fn0800_01A5_entry:
// DataOut: ds ss
// DataOut (flags): 
// SymbolicIn: sp:fp
// LocalsOut: fp(16)

l0800_01A5:
	msdos_set_interrupt_vector(0x00, Mem0[ds:0x0074:segptr32])
	msdos_set_interrupt_vector(0x04, Mem0[ds:0x0078:segptr32])
	msdos_set_interrupt_vector(0x05, Mem0[ds:0x007C:segptr32])
	msdos_set_interrupt_vector(0x06, Mem0[ds:0x0080:segptr32])
	return
// DataOut: ss
// DataOut (flags): 
// SymbolicIn: sp:fp

fn0800_01A5_exit:
// DataOut:
// DataOut (flags): 
// SymbolicIn: sp:fp ax:0x2506 Sequence ds:dx:<invalid> ds:ds -2(fp):ds



word16 fn0800_01DA(byte al, word16 cx, word16 dx, selector ds)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  al cx ds dx
// LiveOut: bx
// Trashed: C ah ax bh bl bx eax ebx rax rbx
// Preserved: sp
fn0800_01DA_entry:
// DataOut: al cx ds dx si ss
// DataOut (flags): 
// SymbolicIn: sp:fp

l0800_01DA:
	word16 ax_8
	msdos_write_file(0x0002, cx, ds_dx, out ax_8)
	return 0x0002
// DataOut: al bx ds si ss
// DataOut (flags): 
// SymbolicIn: sp:fp

fn0800_01DA_exit:
// DataOut: bx
// DataOut (flags): 
// SymbolicIn: sp:fp ah:0x40 bx:0x0002



void fn0800_01E2(byte al, word16 si)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  al si ss
// LiveOut:
// Trashed:
// Preserved:
// Terminates process
fn0800_01E2_entry:
// DataOut: al si ss
// DataOut (flags): 
// SymbolicIn: sp:fp
// LocalsOut: fp(16)

l0800_01E2:
	selector ds_5 = Mem0[0x0800:0x01F8:selector]
	word16 bx_7 = fn0800_01DA(al, 0x001E, 0x0056, ds_5)
	fn0800_0121()
	Mem14[ds_5:bx_7 + si:byte] = Mem0[ds_5:bx_7 + si:byte] + 0x03
	return
// DataOut:
// DataOut (flags): 
// SymbolicIn: sp:fp
// Terminates process

fn0800_01E2_exit:
// DataOut:
// DataOut (flags): 
// SymbolicIn: sp:sp - 0x0002 bp:<invalid> -2(fp):0x0003



void fn0800_01E9(byte al, word16 cx, word16 dx, word16 si)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  al cx dx si ss
// LiveOut:
// Trashed:
// Preserved:
// Terminates process
fn0800_01E9_entry:
// DataOut: al cx dx si ss
// DataOut (flags): 
// SymbolicIn: sp:fp
// LocalsOut: fp(16)

l0800_01E9:
	selector ds_3 = Mem0[0x0800:0x01F8:selector]
	word16 bx_7 = fn0800_01DA(al, cx, dx, ds_3)
	fn0800_0121()
	Mem14[ds_3:bx_7 + si:byte] = Mem0[ds_3:bx_7 + si:byte] + 0x03
// DataOut:
// DataOut (flags): 
// SymbolicIn: sp:fp
// Terminates process

l0800_01F8_thunk_fn0800_01FA:
	fn0800_01FA()
	return
// DataOut:
// DataOut (flags): 
// SymbolicIn: -2(fp):0x0003

fn0800_01E9_exit:
// DataOut:
// DataOut (flags): 
// SymbolicIn: -2(fp):0x0003



void fn0800_01FA()
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse: 
// LiveOut:
// Trashed:
// Preserved: bp sp
fn0800_01FA_entry:
// DataOut: ds ss
// DataOut (flags): 
// SymbolicIn: sp:fp
// LocalsOut: fp(16)

l0800_01FA:
	return
// DataOut: ds ss
// DataOut (flags): 
// SymbolicIn: sp:fp

fn0800_01FA_exit:
// DataOut:
// DataOut (flags): 
// SymbolicIn: sp:fp bp:bp -2(fp):bp



void fn0800_01FF()
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse: 
// LiveOut:
// Trashed:
// Preserved: bp sp
fn0800_01FF_entry:
// DataOut: ds ss
// DataOut (flags): 
// SymbolicIn: sp:fp
// LocalsOut: fp(16)

l0800_01FF:
	fn0800_01FA()
	fn0800_01FA()
	fn0800_01FA()
	fn0800_01FA()
	fn0800_01FA()
	fn0800_01FA()
	fn0800_01FA()
	fn0800_01FA()
	fn0800_01FA()
	fn0800_01FA()
	return
// DataOut: ds ss
// DataOut (flags): 
// SymbolicIn: sp:fp

fn0800_01FF_exit:
// DataOut:
// DataOut (flags): 
// SymbolicIn: sp:fp bp:bp -2(fp):bp



void fn0800_0222()
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse: 
// LiveOut:
// Trashed:
// Preserved: bp sp
fn0800_0222_entry:
// DataOut: ds ss
// DataOut (flags): 
// SymbolicIn: sp:fp
// LocalsOut: fp(16)

l0800_0222:
	fn0800_01FF()
	fn0800_01FF()
	fn0800_01FF()
	fn0800_01FF()
	fn0800_01FF()
	fn0800_01FF()
	fn0800_01FF()
	fn0800_01FF()
	fn0800_01FF()
	fn0800_01FF()
	return
// DataOut: ds ss
// DataOut (flags): 
// SymbolicIn: sp:fp

fn0800_0222_exit:
// DataOut:
// DataOut (flags): 
// SymbolicIn: sp:fp bp:bp -2(fp):bp



void fn0800_0245()
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse: 
// LiveOut:
// Trashed:
// Preserved: bp sp
fn0800_0245_entry:
// DataOut: ds ss
// DataOut (flags): 
// SymbolicIn: sp:fp
// LocalsOut: fp(16)

l0800_0245:
	fn0800_0222()
	fn0800_0222()
	fn0800_0222()
	fn0800_0222()
	fn0800_0222()
	fn0800_0222()
	fn0800_0222()
	fn0800_0222()
	fn0800_0222()
	return
// DataOut: ds ss
// DataOut (flags): 
// SymbolicIn: sp:fp

fn0800_0245_exit:
// DataOut:
// DataOut (flags): 
// SymbolicIn: sp:fp bp:bp -2(fp):bp



void main(word16 bp, selector ds)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  bp ds ss
// LiveOut:
// Trashed: SCZDO ah al ax bh bl bp bpl bx ch cl cx dh di dil dl dx eax ebp ebx ecx edi edx es esi esp rax rbp rbx rcx rdi rdx rsi rsp si sil sp spl
// Preserved:
fn0800_0265_entry:
// DataOut: bp ds ss
// DataOut (flags): 
// SymbolicIn: sp:fp
// LocalsOut: fp(16)

l0800_0265:
	word16 bp_12
	word16 di_13
	word16 bx_14 = fn0800_0E4B(ds, 0x0194, out bp_12, out di_13)
	Mem21[ss:fp - 0x000C:word16] = bp_12 - 0x0004
	Mem24[ss:fp - 0x000E:word16] = 0x01B0
	fn0800_16D4(bx_14, di_13, ds, wArg00)
	Mem32[ss:fp - 0x000C:word16] = Mem24[ss:bp_12 - 0x0002:word16]
	Mem35[ss:fp - 0x000E:word16] = Mem32[ss:bp_12 - 0x0004:word16]
	Mem38[ss:fp - 0x0010:word16] = 0x01B4
	word16 bp_39
	word16 di_40
	fn0800_0E4B(ds, wArg00, out bp_39, out di_40)
	Mem44[ss:bp_39 - 0x0006:word16] = 0x0000
	Mem45[ss:bp_39 - 0x0008:word16] = 0x0001
// DataOut: bp ds sp ss
// DataOut (flags): 
// SymbolicIn: sp:fp
// LocalsOut: Local -0002(0)

l0800_02A7:
	word16 dx_46 = Mem45[ss:bp_39 - 0x0006:word16]
	word16 ax_47 = Mem45[ss:bp_39 - 0x0008:word16]
	branch dx_46 < Mem45[ss:bp_39 - 0x0002:word16] l0800_029C
// DataOut: ax bp ds sp ss
// DataOut (flags): SZO
// SymbolicIn: sp:<invalid> bp:<invalid> ax:<invalid> cx:<invalid> dx:<invalid> si:<invalid> al:<invalid> es:<invalid> di:<invalid> bl:<invalid> bh:<invalid> bx:<invalid> ah:<invalid> -16(fp):0x01B4 -14(fp):<invalid> -12(fp):<invalid> -10(fp):<invalid> -8(fp):<invalid> -2(fp):bp
// LocalsOut: Local -0002(0)

l0800_02B2:
	branch dx_46 > Mem45[ss:bp_39 - 0x0002:word16] l0800_02B9
// DataOut: ax bp ds sp ss
// DataOut (flags): 
// SymbolicIn: sp:<invalid> bp:<invalid> ax:<invalid> cx:<invalid> dx:<invalid> si:<invalid> al:<invalid> es:<invalid> di:<invalid> bl:<invalid> bh:<invalid> bx:<invalid> ah:<invalid> -16(fp):0x01B4 -14(fp):<invalid> -12(fp):<invalid> -10(fp):<invalid> -8(fp):<invalid> -2(fp):bp
// LocalsOut: Local -0002(0)

l0800_02B4:
	branch ax_47 <=u Mem45[ss:bp_39 - 0x0004:word16] l0800_029C
// DataOut: bp ds sp ss
// DataOut (flags): 
// SymbolicIn: sp:<invalid> bp:<invalid> ax:<invalid> cx:<invalid> dx:<invalid> si:<invalid> al:<invalid> es:<invalid> di:<invalid> bl:<invalid> bh:<invalid> bx:<invalid> ah:<invalid> -16(fp):0x01B4 -14(fp):<invalid> -12(fp):<invalid> -10(fp):<invalid> -8(fp):<invalid> -2(fp):bp
// LocalsOut: Local -0002(0)

l0800_029C:
	fn0800_0245()
	word16 v14_54 = Mem45[ss:bp_39 - 0x0008:word16] + 0x0001
	Mem55[ss:bp_39 - 0x0008:word16] = v14_54
	Mem59[ss:bp_39 - 0x0006:word16] = Mem55[ss:bp_39 - 0x0006:word16] + (v14_54 <u 0x0000)
// DataOut: bp ds sp ss
// DataOut (flags): 
// SymbolicIn: sp:<invalid> bp:<invalid> ax:<invalid> cx:<invalid> dx:<invalid> si:<invalid> al:<invalid> es:<invalid> di:<invalid> bl:<invalid> bh:<invalid> bx:<invalid> ah:<invalid> -16(fp):0x01B4 -14(fp):<invalid> -12(fp):<invalid> -10(fp):<invalid> -8(fp):<invalid> -2(fp):bp
// LocalsOut: Local -0002(0)

l0800_02B9:
	Mem65[ss:fp - 0x000C:word16] = 0x01CE
	word16 bp_66
	word16 di_67
	fn0800_0E4B(ds, wArg00, out bp_66, out di_67)
	return
// DataOut:
// DataOut (flags): 
// SymbolicIn: sp:<invalid> bp:<invalid> ax:<invalid> cx:<invalid> dx:<invalid> si:<invalid> al:<invalid> es:<invalid> di:<invalid> bl:<invalid> bh:<invalid> bx:<invalid> ah:<invalid> -16(fp):0x01B4 -14(fp):<invalid> -12(fp):<invalid> -10(fp):<invalid> -8(fp):<invalid> -2(fp):bp

fn0800_0265_exit:
// DataOut:
// DataOut (flags): 
// SymbolicIn: sp:<invalid> bp:<invalid> ax:<invalid> cx:<invalid> dx:<invalid> si:<invalid> al:<invalid> es:<invalid> di:<invalid> bl:<invalid> bh:<invalid> bx:<invalid> ah:<invalid> -16(fp):0x01B4 -14(fp):<invalid> -12(fp):<invalid> -10(fp):<invalid> -8(fp):<invalid> -2(fp):bp



word16 fn0800_02C5(selector ds, word16 wArg02)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  ds
// LiveOut: ax
// Trashed: SCZO ah al ax eax rax
// Preserved: bp si sp
// Stack args: Stack +0002(16)
fn0800_02C5_entry:
// DataOut: di ds
// DataOut (flags): 
// SymbolicIn: sp:fp
// LocalsOut: fp(16) Stack +0002(16)

l0800_02C5:
	word16 si_17
	word16 si_11 = wArg02
	branch wArg02 < 0x0000 l0800_02E4
// DataOut: di ds si
// DataOut (flags): 
// SymbolicIn: sp:fp
// LocalsOut: fp(16)

l0800_02E4:
	si_17 = -wArg02
	branch si_17 >u 0x0023 l0800_02D5
// DataOut: di ds si
// DataOut (flags): 
// SymbolicIn: sp:fp - 0x0004 bp:fp - 0x0002 si:<invalid> -4(fp):si -2(fp):bp
// LocalsOut: fp(16)

l0800_02EB:
	Mem44[ds:0x01D8:word16] = 0xFFFF
// DataOut: di ds si
// DataOut (flags): 
// SymbolicIn: sp:fp - 0x0004 bp:fp - 0x0002 si:<invalid> -4(fp):si -2(fp):bp
// LocalsOut: fp(16)

l0800_02D0:
	branch wArg02 <=u 0x0058 l0800_02D8
// DataOut: di ds si
// DataOut (flags): 
// SymbolicIn: sp:fp - 0x0004 bp:fp - 0x0002 si:<invalid> -4(fp):si -2(fp):bp
// LocalsOut: fp(16)

l0800_02D5:
	si_11 = 0x0057
// DataOut: di ds si
// DataOut (flags): 
// SymbolicIn: sp:fp - 0x0004 bp:fp - 0x0002 si:<invalid> -4(fp):si -2(fp):bp
// LocalsOut: fp(16)

l0800_02D8:
	Mem30[ds:0x01D8:word16] = si_11
	si_17 = (int16) Mem30[ds:si_11 + 0x01DA:byte]
// DataOut: di ds si
// DataOut (flags): 
// SymbolicIn: sp:fp - 0x0004 bp:fp - 0x0002 si:<invalid> -4(fp):si -2(fp):bp
// LocalsOut: fp(16)

l0800_02F1:
	Mem19[ds:0x0094:word16] = si_17
// DataOut: ax di ds
// DataOut (flags): 
// SymbolicIn: sp:fp - 0x0004 bp:fp - 0x0002 si:<invalid> al:<invalid> ax:<invalid> -4(fp):si -2(fp):bp
// LocalsOut: fp(16)

l0800_02FB:
	return 0xFFFF
// DataOut: ax di ds
// DataOut (flags): 
// SymbolicIn: sp:fp - 0x0004 bp:fp - 0x0002 si:<invalid> al:0xFF ax:0xFFFF -4(fp):si -2(fp):bp

fn0800_02C5_exit:
// DataOut: ax
// DataOut (flags): 
// SymbolicIn: sp:fp bp:bp si:si al:0xFF ax:0xFFFF -4(fp):si -2(fp):bp



void fn0800_0301(selector ds, word16 wArg02)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  ds ss
// LiveOut:
// Trashed:
// Preserved:
// Stack args: Stack +0002(16)
// Terminates process
fn0800_0301_entry:
// DataOut: ds ss
// DataOut (flags): 
// SymbolicIn: sp:fp
// LocalsOut: fp(16) Stack +0002(16)

l0800_0301:
// DataOut: ds sp ss
// DataOut (flags): 
// SymbolicIn: sp:fp
// LocalsOut: Stack +0002(16)

l0800_0310:
	word16 ax_21 = Mem0[ds:0x023E:word16]
	Mem23[ds:0x023E:word16] = Mem0[ds:0x023E:word16] - 0x0001
	branch ax_21 != 0x0000 l0800_0306
// DataOut: ds sp ss
// DataOut (flags): 
// SymbolicIn: sp:<invalid> bp:fp - 0x0002 ax:<invalid> bx:<invalid> -2(fp):bp
// LocalsOut: Stack +0002(16)

l0800_0306:
	word16 sp_75
	word16 bp_76
	selector ss_77
	word16 ax_78
	byte SZO_80
	byte C_81
	byte Z_82
	word16 cx_84
	word16 bx_85
	byte SCZO_86
	call SEQ(cs, Mem23[ds:(Mem23[ds:0x023E:word16] << 0x0001) + 0x05E8:word16]) (retsize: 2; depth: 2)
		uses: ax_24,bp_18,bx_73,C_27,cs_14,cx_17,ds_15,SCZO_74,sp_19,ss_16,SZO_25,wLoc02_4,Z_26
		defs: ax_78,bp_76,bx_85,C_81,cs_83,cx_84,ds_79,SCZO_86,sp_75,ss_77,SZO_80,Z_82
// DataOut: ds sp ss
// DataOut (flags): 
// SymbolicIn: sp:<invalid> bp:fp - 0x0002 ax:<invalid> bx:<invalid> -2(fp):bp
// LocalsOut: Stack +0002(16)

l0800_031B:
	word16 sp_28
	word16 bp_29
	selector ss_30
	word16 ax_31
	selector ds_32
	byte SZO_33
	byte C_34
	byte Z_35
	selector cs_36
	word16 cx_37
	word16 bx_38
	byte SCZO_39
	call SEQ(cs, Mem23[ds:0x0234:word16]) (retsize: 2; depth: 2)
		uses: ax_24,bp_18,bx_13,C_27,cs_14,cx_17,ds_15,SCZO_12,sp_19,ss_16,SZO_25,wLoc02_4,Z_26
		defs: ax_31,bp_29,bx_38,C_34,cs_36,cx_37,ds_32,SCZO_39,sp_28,ss_30,SZO_33,Z_35
	word16 sp_40
	word16 bp_41
	selector ss_42
	word16 ax_43
	selector ds_44
	byte SZO_45
	byte C_46
	byte Z_47
	selector cs_48
	word16 cx_49
	word16 bx_50
	byte SCZO_51
	call SEQ(cs_36, Mem23[ds_32:0x0236:word16]) (retsize: 2; depth: 2)
		uses: ax_31,bp_29,bx_38,C_34,cs_36,cx_37,ds_32,SCZO_39,sp_28,ss_30,SZO_33,wLoc02_4,Z_35
		defs: ax_43,bp_41,bx_50,C_46,cs_48,cx_49,ds_44,SCZO_51,sp_40,ss_42,SZO_45,Z_47
	word16 sp_52
	word16 bp_53
	selector ss_54
	word16 ax_55
	selector ds_56
	byte SZO_57
	byte C_58
	byte Z_59
	selector cs_60
	word16 cx_61
	word16 bx_62
	byte SCZO_63
	call SEQ(cs_48, Mem23[ds_44:0x0238:word16]) (retsize: 2; depth: 2)
		uses: ax_43,bp_41,bx_50,C_46,cs_48,cx_49,ds_44,SCZO_51,sp_40,ss_42,SZO_45,wLoc02_4,Z_47
		defs: ax_55,bp_53,bx_62,C_58,cs_60,cx_61,ds_56,SCZO_63,sp_52,ss_54,SZO_57,Z_59
	Mem67[ss_54:sp_52 - 0x0002:word16] = wArg02
	fn0800_0121()
	return
// DataOut:
// DataOut (flags): 
// SymbolicIn: sp:<invalid> bp:fp - 0x0002 ax:<invalid> bx:<invalid> -2(fp):bp
// Terminates process

fn0800_0301_exit:
// DataOut:
// DataOut (flags): 
// SymbolicIn: cx:<invalid> sp:sp + 0x0006 bp:<invalid> -2(fp):bp



void fn0800_0336(byte al, selector ds, word16 wArg00)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  al ds ss
// LiveOut:
// Trashed: SCZDO ah al ax bh bl bp bpl bx ch cl cx dh di dil dl ds dx eax ebp ebx ecx edi edx es esi esp rax rbp rbx rcx rdi rdx rsi rsp si sil sp spl
// Preserved:
// Stack args: Stack +0000(16)
fn0800_0336_entry:
// DataOut: al ds ss
// DataOut (flags): 
// SymbolicIn: sp:fp
// LocalsOut: fp(16) Stack +0000(16)

l0800_0336:
	selector es_43
	Mem3[0x0800:0x0330:word16] = wArg00
	Mem6[0x0800:0x0332:word16] = ds
	selector es_8 = Mem6[ds:0x0090:selector]
	word16 ax_13 = DPB(ax, Mem6[ds:0x0080:byte], 0)
	word16 si_23 = Mem6[ds:0x008A:word16]
	word16 cx_25 = 0x0001
	es_43 = es_8
	branch Mem6[ds:0x0092:byte] <u 0x03 l0800_0374
// DataOut: bp bx cx ds dx es si ss
// DataOut (flags): 
// SymbolicIn: sp:fp
// LocalsOut: fp(16)

l0800_0363:
	es_43 = Mem6[ds:0x008C:selector]
	word16 di_62 = si_23 + 0x0002
	byte cl_63 = 0x7F
	word16 cx_64 = 0x007F
// DataOut: al bp bx cl cx di dx es si ss
// DataOut (flags): 
// SymbolicIn: sp:fp + 0x0002 es:<invalid> si:<invalid> ah:<invalid> al:<invalid> ax:bx bp:<invalid> dx:0x0081 bx:bx + 0x0002 cx:0x0001
// LocalsOut: fp(16)

l0800_036D:
	branch cx_64 == 0x0000 l0800_036F
// DataOut: al bp bx cl cx di dx es si ss
// DataOut (flags): 
// SymbolicIn: sp:fp + 0x0002 es:<invalid> si:<invalid> ah:<invalid> al:<invalid> ax:<invalid> bp:<invalid> dx:0x0081 bx:bx + 0x0002 cx:<invalid> di:<invalid> cl:<invalid>
// LocalsOut: fp(16)

l0800_036D_1:
	cx_64 = cx_64 - 0x0001
	di_62 = di_88 + 0x0001
	cl_63 = (byte) cx_64 (alias)
	word16 di_88 = di_62
	branch 0x00 != Mem6[es_43:di_88:byte] l0800_036D
// DataOut: al bp bx cl cx di dx es si ss
// DataOut (flags): 
// SymbolicIn: sp:fp + 0x0002 es:<invalid> si:<invalid> ah:<invalid> al:<invalid> ax:<invalid> bp:<invalid> dx:0x0081 bx:bx + 0x0002 cx:<invalid> di:<invalid> cl:<invalid>
// LocalsOut: fp(16)

l0800_036F:
	branch cx_64 == 0x0000 l0800_036F_thunk_fn0800_03E7
// DataOut: al bp bx cl dx es si ss
// DataOut (flags): 
// SymbolicIn: sp:fp + 0x0002 es:<invalid> si:<invalid> ah:<invalid> al:<invalid> ax:<invalid> bp:<invalid> dx:0x0081 bx:bx + 0x0002 cx:<invalid> di:<invalid> cl:<invalid>
// LocalsOut: fp(16)

l0800_036F_thunk_fn0800_03E7:
	fn0800_03E7(0x00, si_23 + 0x0002)
	return
// DataOut:
// DataOut (flags): 
// SymbolicIn: sp:fp + 0x0002 es:<invalid> si:<invalid> ah:<invalid> al:<invalid> ax:<invalid> bp:<invalid> dx:0x0081 bx:bx + 0x0002 cx:<invalid> di:<invalid> cl:<invalid>

l0800_0371:
	cx_25 = DPB(cx_64, cl_63 ^ 0x7F, 0) (alias)
// DataOut: bp bx cx dx es si ss
// DataOut (flags): 
// SymbolicIn: sp:fp + 0x0002 es:<invalid> si:<invalid> ah:<invalid> al:<invalid> ax:<invalid> bp:<invalid> dx:0x0081 bx:bx + 0x0002 cx:<invalid> di:<invalid> cl:<invalid>
// LocalsOut: fp(16)

l0800_0374:
	word16 ax_51 = ax_13 + 0x0002 + cx_25
	byte al_53 = (byte) (ax_51 & 0xFFFE)
	word16 di_55 = fp - ((ax_51 & 0xFFFE) & 0xFFFE)
	branch di_55 <u 0x0000 l0800_0385_thunk_fn0800_03E7
// DataOut: al bp bx cx di dx es si ss
// DataOut (flags): 
// SymbolicIn: sp:fp + 0x0002 es:<invalid> si:<invalid> ah:<invalid> al:<invalid> ax:<invalid> bp:<invalid> dx:0x0081 bx:bx + 0x0002 cx:<invalid> di:<invalid> cl:<invalid>

l0800_0385_thunk_fn0800_03E7:
	fn0800_03E7(al_53, si_23 + 0x0002)
	return
// DataOut:
// DataOut (flags): 
// SymbolicIn: sp:fp es:<invalid> si:<invalid> ah:<invalid> al:<invalid> ax:<invalid> bp:<invalid> dx:0x0081 bx:bx + 0x0002 cx:<invalid> di:<invalid> cl:<invalid>

l0800_0387:
// DataOut: bp bx cx di ds dx si ss
// DataOut (flags): 
// SymbolicIn: sp:fp es:<invalid> si:<invalid> ah:<invalid> al:<invalid> ax:<invalid> bp:<invalid> dx:0x0081 bx:bx + 0x0002 cx:<invalid> di:<invalid> cl:<invalid>

l0800_038B_thunk_fn0800_038D:
	fn0800_038D(cx_25, 0x0081, ax_13 + 0x0001, es_8, si_23 + 0x0002, di_55, es_43)
	return
// DataOut:
// DataOut (flags): 
// SymbolicIn: sp:<invalid> es:<invalid> si:<invalid> ah:<invalid> al:<invalid> ax:<invalid> bp:<invalid> dx:0x0081 bx:bx + 0x0002 cx:<invalid> di:<invalid> ds:<invalid> cl:<invalid>

fn0800_0336_exit:
// DataOut:
// DataOut (flags): 
// SymbolicIn: sp:<invalid> es:<invalid> si:<invalid> ah:<invalid> al:<invalid> ax:<invalid> bp:<invalid> dx:<invalid> bx:<invalid> cx:<invalid> di:<invalid> ds:<invalid> cl:<invalid>



void fn0800_038D(word16 cx, word16 dx, word16 bx, word16 bp, word16 si, word16 di, selector ds)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  bp bx cx di ds dx si ss
// LiveOut:
// Trashed: SCZO ah al ax bh bl bp bpl bx ch cl cx dh di dil dl ds dx eax ebp ebx ecx edi edx es esi esp rax rbp rbx rcx rdi rdx rsi rsp si sil sp spl
// Preserved:
fn0800_038D_entry:
// DataOut: bp bx cx di ds dx si ss
// DataOut (flags): 
// SymbolicIn: sp:fp
// LocalsOut: fp(16)

l0800_038D:
	word16 cx_14 = cx - 0x0001 + 0x0001
// DataOut: bp bx cx di ds dx es si ss
// DataOut (flags): 
// SymbolicIn: sp:fp
// LocalsOut: fp(16) Local -0002(16)

l0800_0393:
	branch cx_14 == 0xFFFF l0800_0395
// DataOut: bp bx cx di ds dx es si ss
// DataOut (flags): 
// SymbolicIn: sp:fp - 0x0002 ax:ss es:ss cx:<invalid> si:<invalid> di:<invalid> -2(fp):cx
// LocalsOut: fp(16) Local -0002(16)

l0800_0395:
	Mem24[ss:di:byte] = 0x00
	word16 di_25 = di + 0x0001
	word16 si_30 = dx
	word16 cx_33 = bx
	word16 ax_35 = cx_14
	byte al_36 = (byte) cx_14
	word16 dx_37 = cx_14
	word16 bx_38 = cx_14 + 0x0000
// DataOut: ax bx cx di ds dx es si ss
// DataOut (flags): 
// SymbolicIn: sp:fp - 0x0002 ax:ss es:ss cx:<invalid> si:<invalid> di:<invalid> -2(fp):cx
// LocalsOut: fp(16) Local -0002(16)

l0800_03A3:
	byte CZ_53 = fn0800_03BF(ax_35, cx_33, dx_37, bx_38, si_30, di_25, ss, bp, out ax_35, out cx_33, out dx_37, out bx_38, out si_30, out di_25)
	byte C_54 = CZ_53
	branch CZ_53 l0800_03AF
// DataOut: al ax bx cx di ds dx es si ss
// DataOut (flags): C
// SymbolicIn: sp:fp - 0x0002 ax:<invalid> es:ss cx:<invalid> al:<invalid> di:<invalid> ds:bp si:<invalid> bx:<invalid> dx:<invalid> -2(fp):cx
// LocalsOut: fp(16) Local -0002(16)

l0800_03A8:
	branch C_54 l0800_03EA
// DataOut: al ax bx cx di ds dx es si ss
// DataOut (flags): 
// SymbolicIn: sp:fp - 0x0002 ax:<invalid> es:ss cx:<invalid> al:<invalid> di:<invalid> ds:bp si:<invalid> bx:<invalid> dx:<invalid> -2(fp):cx
// LocalsOut: fp(16) Local -0002(16)

l0800_03EA:
	selector ds_104 = Mem24[0x0800:0x0332:selector]
	Mem105[ds_104:0x0084:word16] = bx_38
	word16 cx_103 = cx + dx_37
	word16 si_108 = fp
	word16 bp_110 = fp - (bx_38 + 0x0001) * 0x0002
	branch bp_110 <u 0x0000 l0800_03FF_thunk_fn0800_03E7
// DataOut: al bp cx ds si ss
// DataOut (flags): 
// SymbolicIn: sp:fp - 0x0002 ax:<invalid> es:ss cx:<invalid> al:<invalid> di:<invalid> ds:bp si:<invalid> bx:<invalid> dx:<invalid> -2(fp):cx

l0800_03FF_thunk_fn0800_03E7:
	fn0800_03E7(al_36, fp)
	return
// DataOut:
// DataOut (flags): 
// SymbolicIn: sp:fp ax:<invalid> es:ss cx:<invalid> al:<invalid> di:<invalid> ds:<invalid> si:fp bx:<invalid> dx:<invalid> bp:<invalid> -2(fp):cx

l0800_0401:
	Mem131[ds_104:0x0086:word16] = bp_110
// DataOut: bp cx ds si ss
// DataOut (flags): 
// SymbolicIn: sp:fp ax:<invalid> es:ss cx:<invalid> al:<invalid> di:<invalid> ds:<invalid> si:fp bx:<invalid> dx:<invalid> bp:<invalid> -2(fp):cx

l0800_0407:
	branch cx_103 == 0x0000 l0800_0417
// DataOut: bp cx ds si ss
// DataOut (flags): 
// SymbolicIn: sp:<invalid> ax:<invalid> es:ss cx:<invalid> al:<invalid> di:<invalid> ds:<invalid> si:<invalid> bx:<invalid> dx:<invalid> bp:<invalid> -2(fp):cx

l0800_0409:
	Mem163[ss:bp_110:word16] = si_108
	bp_110 = bp_110 + 0x0002
// DataOut: bp cx ds si ss
// DataOut (flags): 
// SymbolicIn: sp:<invalid> ax:<invalid> es:ss cx:<invalid> al:<invalid> di:<invalid> ds:<invalid> si:<invalid> bx:<invalid> dx:<invalid> bp:<invalid> -2(fp):cx

l0800_040F:
	byte al_168 = Mem163[ds_104:si_108:byte]
	si_108 = si_108 + 0x0001
	cx_103 = cx_103 - 0x0001
	branch al_168 != 0x00 && cx_103 != 0x0000 l0800_040F
// DataOut: bp cx ds si ss
// DataOut (flags): Z
// SymbolicIn: sp:<invalid> ax:<invalid> es:ss cx:<invalid> al:<invalid> di:<invalid> ds:<invalid> si:<invalid> bx:<invalid> dx:<invalid> bp:<invalid> -2(fp):cx

l0800_0415:
	branch al_168 == 0x00 l0800_0407
// DataOut: bp cx ds si ss
// DataOut (flags): 
// SymbolicIn: sp:<invalid> ax:<invalid> es:ss cx:<invalid> al:<invalid> di:<invalid> ds:<invalid> si:<invalid> bx:<invalid> dx:<invalid> bp:<invalid> -2(fp):cx

l0800_0417:
	Mem145[ss:bp_110:word16] = 0x0000
	word16 sp_146
	word16 ax_147
	selector ss_148
	selector es_149
	word16 cx_150
	byte SZO_151
	selector ds_152
	word16 si_153
	word16 di_154
	byte al_155
	byte C_156
	word16 bp_157
	word16 dx_158
	word16 bx_159
	byte CZ_160
	byte SCZO_161
	byte Z_162
	call Mem145[0x0800:0x0330:word16] (retsize: 4; depth: 4)
		uses: al_136,ax_142,bp_141,bx_107,C_144,cx_140,CZ_133,di_88,ds_104,dx_79,es_4,SCZO_134,si_139,sp_130,ss,SZO_143,wLoc02_7,Z_135
		defs: al_155,ax_147,bp_157,bx_159,C_156,cx_150,CZ_160,di_154,ds_152,dx_158,es_149,SCZO_161,si_153,sp_146,ss_148,SZO_151,Z_162
	return
// DataOut:
// DataOut (flags): 
// SymbolicIn: sp:<invalid> ax:<invalid> es:ss cx:<invalid> al:<invalid> di:<invalid> ds:<invalid> si:<invalid> bx:<invalid> dx:<invalid> bp:<invalid> -2(fp):cx

fn0800_038D_exit:
// DataOut:
// DataOut (flags): 
// SymbolicIn: sp:<invalid> ax:<invalid> es:ss cx:<invalid> al:<invalid> di:<invalid> ds:<invalid> si:<invalid> bx:<invalid> dx:<invalid> bp:<invalid> -2(fp):cx

l0800_03AA:
	byte CZ_96 = fn0800_03BF(ax_35, cx_33, dx_37, bx_38, si_30, di_25, ss, bp, out ax_35, out cx_33, out dx_37, out bx_38, out si_30, out di_25)
	C_54 = CZ_96 (alias)
	branch CZ_96 l0800_03A8
// DataOut: al ax bx cx di ds dx es si ss
// DataOut (flags): C
// SymbolicIn: sp:fp - 0x0002 ax:<invalid> es:ss cx:<invalid> al:<invalid> di:<invalid> ds:bp si:<invalid> bx:<invalid> dx:<invalid> -2(fp):cx
// LocalsOut: fp(16) Local -0002(16)

l0800_03AF:
	branch al_36 == 0x20 l0800_03BB
// DataOut: al ax bx cx di ds dx es si ss
// DataOut (flags): 
// SymbolicIn: sp:fp - 0x0002 ax:<invalid> es:ss cx:<invalid> al:<invalid> di:<invalid> ds:bp si:<invalid> bx:<invalid> dx:<invalid> -2(fp):cx
// LocalsOut: fp(16) Local -0002(16)

l0800_03B3:
	branch al_36 == 0x0D l0800_03BB
// DataOut: al ax bx cx di ds dx es si ss
// DataOut (flags): 
// SymbolicIn: sp:fp - 0x0002 ax:<invalid> es:ss cx:<invalid> al:<invalid> di:<invalid> ds:bp si:<invalid> bx:<invalid> dx:<invalid> -2(fp):cx
// LocalsOut: fp(16) Local -0002(16)

l0800_03B7:
	branch al_36 != 0x09 l0800_03A3
// DataOut: ax bx cx di ds dx es si ss
// DataOut (flags): 
// SymbolicIn: sp:fp - 0x0002 ax:<invalid> es:ss cx:<invalid> al:<invalid> di:<invalid> ds:bp si:<invalid> bx:<invalid> dx:<invalid> -2(fp):cx
// LocalsOut: fp(16) Local -0002(16)

l0800_03BB:
	al_36 = 0x00
	ax_35 = DPB(ax_35, 0x00, 0) (alias)
// DataOut: ax bx cx di ds dx es si ss
// DataOut (flags): 
// SymbolicIn: sp:fp - 0x0002 ax:<invalid> es:ss cx:<invalid> al:<invalid> di:<invalid> ds:bp si:<invalid> bx:<invalid> dx:<invalid> -2(fp):cx
// LocalsOut: fp(16) Local -0002(16)

l0800_0393_1:
	Mem18[ss:di:byte] = Mem0[ds:si:byte]
	si = si + 0x0001
	di = di + 0x0001
	cx_14 = cx_14 - 0x0001
// DataOut: bp bx cx di ds dx es si ss
// DataOut (flags): 
// SymbolicIn: sp:fp - 0x0002 ax:ss es:ss cx:<invalid> si:<invalid> di:<invalid> -2(fp):cx
// LocalsOut: fp(16) Local -0002(16)



byte fn0800_03BF(word16 ax, word16 cx, word16 dx, word16 bx, word16 si, word16 di, selector es, selector ds, ptr16 & axOut, ptr16 & cxOut, ptr16 & dxOut, ptr16 & bxOut, ptr16 & siOut, ptr16 & diOut)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  ax bx cx di ds dx es si
// LiveOut: CZ al ax bx cx di dx si
// Trashed: SCZO ah al ax bh bl bx ch cl cx dh di dil dl dx eax ebx ecx edi edx esi rax rbx rcx rdi rdx rsi si sil
// Preserved: ah sp
fn0800_03BF_entry:
	*dxOut = dx
	*diOut = di
	*bxOut = bx
	*cxOut = cx
	*siOut = si
// DataOut: ax bx cx di ds dx es si ss
// DataOut (flags): 
// SymbolicIn: sp:fp

l0800_03BF:
	word16 ax_16 = ax
	byte al_4 = (byte) ax
	branch ax == 0x0000 l0800_03CA
// DataOut: ah al bx cx di ds dx es si ss
// DataOut (flags): 
// SymbolicIn: sp:fp

l0800_03C3:
	Mem78[es:di:byte] = al_4
	word16 dx_77
	*dxOut = dx + 0x0001
	word16 di_80
	*diOut = di + 0x0001
	ax_16 = DPB(ax, al_4, 0) (alias)
	branch al_4 != 0x00 l0800_03CA
// DataOut: ah bx cx di ds dx es si ss
// DataOut (flags): 
// SymbolicIn: sp:fp ax:ax

l0800_03C9:
	word16 bx_86
	*bxOut = bx + 0x0001
// DataOut: ah bx cx di ds dx es si ss
// DataOut (flags): 
// SymbolicIn: sp:fp ax:<invalid> dx:dx + 0x0001 di:di + 0x0001 al:al

l0800_03CA:
	word16 ax_21
	*axOut = DPB(ax_16, 0x00, 0)
	byte CZ_26 = true
	branch cx == 0x0000 l0800_03E6
// DataOut: al ax bx cx di ds dx es si ss
// DataOut (flags): CZ
// SymbolicIn: sp:fp ax:<invalid> dx:dx + 0x0001 di:di + 0x0001 al:al bx:bx + 0x0001

l0800_03D1:
	byte al_46 = Mem0[ds:si:byte]
	word16 si_47 = si + 0x0001
	*siOut = si_47
	word16 cx_48 = cx - 0x0001
	*cxOut = cx_48
	word16 ax_50
	*axOut = DPB(ax_16, al_46 - 0x22, 0)
	CZ_26 = cond(al_46 - 0x22) (alias)
	branch al_46 == 0x22 l0800_03E6
// DataOut: al ax bx cx di ds dx es si ss
// DataOut (flags): CZ
// SymbolicIn: sp:fp ax:<invalid> dx:dx + 0x0001 di:di + 0x0001 al:0x00 ah:ah bx:bx + 0x0001

l0800_03D7:
	word16 ax_57
	*axOut = DPB(ax_16, al_46, 0)
	branch al_46 != 0x5C l0800_03E4
// DataOut: al ax bx cx di ds dx es si ss
// DataOut (flags): 
// SymbolicIn: sp:fp ax:<invalid> dx:dx + 0x0001 di:di + 0x0001 al:<invalid> ah:ah si:si + 0x0001 cx:cx - 0x0001 bx:bx + 0x0001

l0800_03DD:
	branch Mem0[ds:si + 0x0001:byte] != 0x22 l0800_03E4
// DataOut: al ax bx cx di ds dx es si ss
// DataOut (flags): 
// SymbolicIn: sp:fp ax:<invalid> dx:dx + 0x0001 di:di + 0x0001 al:<invalid> ah:ah si:si + 0x0001 cx:cx - 0x0001 bx:bx + 0x0001

l0800_03E2:
	word16 ax_73
	*axOut = DPB(ax_16, Mem0[ds:si + 0x0001:byte], 0)
	si_47 = si + 0x0002
	word16 cx_75
	*cxOut = cx - 0x0002
// DataOut: al ax bx cx di ds dx es si ss
// DataOut (flags): 
// SymbolicIn: sp:fp ax:<invalid> dx:dx + 0x0001 di:di + 0x0001 al:<invalid> ah:ah si:si + 0x0001 cx:cx - 0x0001 bx:bx + 0x0001

l0800_03E4:
	word16 si_64
	*siOut = si_47
	CZ_26 = false (alias)
// DataOut: al ax bx cx di ds dx es si ss
// DataOut (flags): CZ
// SymbolicIn: sp:fp ax:<invalid> dx:dx + 0x0001 di:di + 0x0001 al:<invalid> ah:ah si:<invalid> cx:<invalid> bx:bx + 0x0001

l0800_03E6:
	return CZ_26
// DataOut: al ax bx cx di ds dx es si ss
// DataOut (flags): CZ
// SymbolicIn: sp:fp ax:<invalid> dx:dx + 0x0001 di:di + 0x0001 al:<invalid> ah:ah si:<invalid> cx:<invalid> bx:bx + 0x0001

fn0800_03BF_exit:
// DataOut: al ax bx cx di dx si
// DataOut (flags): CZ
// SymbolicIn: sp:fp ax:<invalid> dx:dx + 0x0001 di:di + 0x0001 al:<invalid> ah:ah si:<invalid> cx:<invalid> bx:bx + 0x0001



void fn0800_03E7(byte al, word16 si)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  al si ss
// LiveOut:
// Trashed:
// Preserved:
// Terminates process
fn0800_03E7_entry:
// DataOut: al si ss
// DataOut (flags): 
// SymbolicIn: sp:fp

l0800_03E7:
// DataOut: al si ss
// DataOut (flags): 
// SymbolicIn: sp:fp

l0800_03E7_thunk_fn0800_01E2:
	fn0800_01E2(al, si)
	return
// DataOut:
// DataOut (flags): 
// SymbolicIn: sp:fp
// Terminates process

fn0800_03E7_exit:
// DataOut:
// DataOut (flags): 
// SymbolicIn:



void fn0800_0421(word16 si, selector ds)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  ds si ss
// LiveOut:
// Trashed: SCZDO ah al ax bh bl bx ch cl cx dh di dil dl dx eax ebx ecx edi edx es esi rax rbx rcx rdi rdx rsi si sil
// Preserved: ds sp
fn0800_0421_entry:
// DataOut: ds si ss
// DataOut (flags): 
// SymbolicIn: sp:fp
// LocalsOut: fp(16) Local -0004(16)

l0800_0421:
	word16 cx_4 = Mem0[ds:0x008A:word16]
	word16 ax_7 = fn0800_0570(ds, cx_4)
	word16 cx_66 = cx_4
	word16 di_10 = ax_7
	byte al_12 = (byte) ax_7
	branch ax_7 == 0x0000 l0800_0454
// DataOut: al ax cx di ds si ss
// DataOut (flags): 
// SymbolicIn: sp:fp
// LocalsOut: fp(16)

l0800_0430:
	selector ds_59 = Mem0[ds:0x008C:selector]
	si = 0x0000
// DataOut: ax cx di ds es si ss
// DataOut (flags): 
// SymbolicIn: sp:fp cx:<invalid> di:<invalid> ax:<invalid> dx:<invalid> bx:<invalid> -2(fp):<invalid>
// LocalsOut: fp(16) Local -0002(16)

l0800_043A:
	branch cx_66 == 0x0000 l0800_043C
// DataOut: ax cx di ds es si ss
// DataOut (flags): 
// SymbolicIn: sp:fp - 0x0002 cx:<invalid> di:<invalid> ax:<invalid> es:ds ds:<invalid> si:<invalid> dx:<invalid> bx:<invalid> -4(fp):ds -2(fp):ds
// LocalsOut: fp(16) Local -0002(16)

l0800_043C:
	word16 ax_80 = fn0800_0570(ds, Mem0[ds:0x008E:word16])
	Mem85[ds:0x0088:word16] = ax_80
	word16 di_105 = ax_7
	word16 bx_101 = ax_80
	al_12 = (byte) ax_80 (alias)
	branch ax_80 != 0x0000 l0800_0457
// DataOut: al bx di ds es si ss
// DataOut (flags): 
// SymbolicIn: sp:fp - 0x0002 cx:<invalid> di:<invalid> ax:<invalid> es:ds ds:<invalid> si:<invalid> dx:<invalid> bx:<invalid> -4(fp):ds -2(fp):ds

l0800_0457:
	word16 cx_106 = 0xFFFF
// DataOut: al ax bx cx di ds es
// DataOut (flags): 
// SymbolicIn: sp:fp cx:<invalid> di:<invalid> ax:<invalid> es:ds ds:ds si:<invalid> bx:<invalid> dx:<invalid> -4(fp):<invalid> -2(fp):ds

l0800_045C:
	Mem100[ds:bx_101:word16] = di_105
	bx_101 = bx_101 + 0x0002
// DataOut: al ax bx cx di ds es
// DataOut (flags): 
// SymbolicIn: sp:fp cx:<invalid> di:<invalid> ax:<invalid> es:ds ds:ds si:<invalid> bx:<invalid> dx:<invalid> -4(fp):<invalid> -2(fp):ds

l0800_0461:
	branch cx_106 == 0x0000 l0800_0463
// DataOut: al ax bx cx di ds es
// DataOut (flags): 
// SymbolicIn: sp:fp cx:<invalid> di:<invalid> ax:<invalid> es:ds ds:ds si:<invalid> bx:<invalid> dx:<invalid> -4(fp):<invalid> -2(fp):ds

l0800_0461_1:
	di_105 = di_105 + 0x0001
	cx_106 = cx_106 - 0x0001
	branch 0x00 != Mem100[ds:di_105:byte] l0800_0461
// DataOut: al ax bx cx di ds es
// DataOut (flags): 
// SymbolicIn: sp:fp cx:<invalid> di:<invalid> ax:<invalid> es:ds ds:ds si:<invalid> bx:<invalid> dx:<invalid> -4(fp):<invalid> -2(fp):ds

l0800_0463:
	branch Mem100[ds:di_105:byte] != 0x00 l0800_045C
// DataOut: al ax bx cx di ds es
// DataOut (flags): 
// SymbolicIn: sp:fp cx:<invalid> di:<invalid> ax:<invalid> es:ds ds:ds si:<invalid> bx:<invalid> dx:<invalid> -4(fp):<invalid> -2(fp):ds

l0800_0468:
	Mem111[ds:bx_101:word16] = 0x0000
	return
// DataOut:
// DataOut (flags): 
// SymbolicIn: sp:fp cx:<invalid> di:<invalid> ax:<invalid> es:ds ds:ds si:<invalid> bx:<invalid> dx:<invalid> -4(fp):<invalid> -2(fp):ds

l0800_0454:
// DataOut: al si ss
// DataOut (flags): 
// SymbolicIn: sp:fp cx:<invalid> di:<invalid> ax:<invalid> es:ds ds:ds si:<invalid> bx:<invalid> dx:<invalid> -4(fp):<invalid> -2(fp):<invalid>

l0800_0454_thunk_fn0800_01E2:
	fn0800_01E2(al_12, si)
	return
// DataOut:
// DataOut (flags): 
// SymbolicIn: sp:fp cx:<invalid> di:<invalid> ax:<invalid> es:ds ds:ds si:<invalid> bx:<invalid> dx:<invalid> -4(fp):<invalid> -2(fp):<invalid>

l0800_0454_thunk_fn0800_01E2:
	fn0800_01E2(al_12, si)
	return
// DataOut:
// DataOut (flags): 
// SymbolicIn: sp:fp cx:<invalid> di:<invalid> ax:<invalid> es:ds ds:ds si:<invalid> bx:<invalid> dx:<invalid> -4(fp):<invalid> -2(fp):<invalid>

fn0800_0421_exit:
// DataOut:
// DataOut (flags): 
// SymbolicIn: sp:fp cx:<invalid> di:<invalid> ax:<invalid> es:ds ds:ds si:<invalid> bx:<invalid> dx:<invalid> -4(fp):<invalid> -2(fp):<invalid>

l0800_043A_1:
	Mem68[ds:di_10:byte] = Mem0[ds_59:si:byte]
	si = si + 0x0001
	di_10 = di_10 + 0x0001
	cx_66 = cx_66 - 0x0001
// DataOut: ax cx di ds es si ss
// DataOut (flags): 
// SymbolicIn: sp:fp - 0x0002 cx:<invalid> di:<invalid> ax:<invalid> es:ds ds:<invalid> si:<invalid> dx:<invalid> bx:<invalid> -4(fp):ds -2(fp):ds
// LocalsOut: fp(16) Local -0002(16)



void fn0800_0491(selector ds, word16 wArg02)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  ds
// LiveOut:
// Trashed: SCZO ah al ax bh bl bx eax ebx rax rbx
// Preserved: bp di si sp
// Stack args: Stack +0002(16)
fn0800_0491_entry:
// DataOut: ds ss
// DataOut (flags): 
// SymbolicIn: sp:fp
// LocalsOut: fp(16) Stack +0002(16)

l0800_0491:
	word16 ax_16 = Mem0[ds:wArg02 + 0x0006:word16]
	Mem17[ds:0x062A:word16] = ax_16
	branch ax_16 != wArg02 l0800_04AB
// DataOut: di ds ss
// DataOut (flags): 
// SymbolicIn: sp:fp
// LocalsOut: fp(16)

l0800_04AB:
	word16 si_30 = Mem17[ds:wArg02 + 0x0004:word16]
	Mem32[ds:Mem17[ds:0x062A:word16] + 0x0004:word16] = si_30
	Mem34[ds:si_30 + 0x0006:word16] = Mem32[ds:0x062A:word16]
// DataOut: ds ss
// DataOut (flags): 
// SymbolicIn: sp:fp - 0x0006 bp:fp - 0x0002 di:<invalid> ax:<invalid> -6(fp):di -4(fp):si -2(fp):bp
// LocalsOut: fp(16)

l0800_04A3:
	Mem28[ds:0x062A:word16] = 0x0000
// DataOut: ds ss
// DataOut (flags): 
// SymbolicIn: sp:fp - 0x0006 bp:fp - 0x0002 di:<invalid> ax:<invalid> -6(fp):di -4(fp):si -2(fp):bp
// LocalsOut: fp(16)

l0800_04BB:
	return
// DataOut: ds ss
// DataOut (flags): 
// SymbolicIn: sp:fp - 0x0006 bp:fp - 0x0002 di:<invalid> ax:<invalid> si:<invalid> bx:<invalid> -6(fp):di -4(fp):si -2(fp):bp

fn0800_0491_exit:
// DataOut:
// DataOut (flags): 
// SymbolicIn: sp:fp bp:bp di:di ax:<invalid> si:si bx:<invalid> -6(fp):di -4(fp):si -2(fp):bp



word16 fn0800_04BF(selector ds, word16 wArg02, word16 wArg04)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  ds
// LiveOut: ax
// Trashed: SCZO ah al ax eax rax
// Preserved: bp di si sp
// Stack args: Stack +0002(16) Stack +0004(16)
fn0800_04BF_entry:
// DataOut: ds ss
// DataOut (flags): 
// SymbolicIn: sp:fp
// LocalsOut: fp(16) Stack +0002(16) Stack +0004(16)

l0800_04BF:
	Mem19[ds:wArg02:word16] = Mem0[ds:wArg02:word16] - wArg04
	word16 si_21 = Mem19[ds:wArg02:word16] + wArg02
	Mem24[ds:si_21:word16] = wArg04 + 0x0001
	Mem25[ds:si_21 + 0x0002:word16] = wArg02
	branch Mem25[ds:0x0628:word16] != wArg02 l0800_04E6
// DataOut: ds si ss
// DataOut (flags): 
// SymbolicIn: sp:fp
// LocalsOut: fp(16) Stack +0004(16)

l0800_04E6:
	Mem43[ds:si_21 + wArg04 + 0x0002:word16] = si_21
// DataOut: ds si ss
// DataOut (flags): 
// SymbolicIn: sp:fp - 0x0006 bp:fp - 0x0002 di:<invalid> ax:<invalid> si:<invalid> -6(fp):di -4(fp):si -2(fp):bp
// LocalsOut: fp(16)

l0800_04E0:
	Mem39[ds:0x0628:word16] = si_21
// DataOut: ds si ss
// DataOut (flags): 
// SymbolicIn: sp:fp - 0x0006 bp:fp - 0x0002 di:<invalid> ax:<invalid> si:<invalid> -6(fp):di -4(fp):si -2(fp):bp
// LocalsOut: fp(16)

l0800_04EE:
// DataOut: ax ds ss
// DataOut (flags): 
// SymbolicIn: sp:fp - 0x0006 bp:fp - 0x0002 di:<invalid> ax:<invalid> si:<invalid> -6(fp):di -4(fp):si -2(fp):bp
// LocalsOut: fp(16)

l0800_04F5:
	return si_21 + 0x0004
// DataOut: ax ds ss
// DataOut (flags): 
// SymbolicIn: sp:fp - 0x0006 bp:fp - 0x0002 di:<invalid> ax:<invalid> si:<invalid> -6(fp):di -4(fp):si -2(fp):bp

fn0800_04BF_exit:
// DataOut: ax
// DataOut (flags): 
// SymbolicIn: sp:fp bp:bp di:di ax:<invalid> si:si -6(fp):di -4(fp):si -2(fp):bp



word16 fn0800_04F9(selector ds, word16 wArg02)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  ds
// LiveOut: ax
// Trashed: SCZO ah al ax ch cl cx dh dl dx eax ecx edx rax rcx rdx
// Preserved: bp si sp
// Stack args: Stack +0002(16)
fn0800_04F9_entry:
// DataOut: di ds ss
// DataOut (flags): 
// SymbolicIn: sp:fp
// LocalsOut: fp(16) Stack +0002(16)

l0800_04F9:
	word16 ax_30
	word16 ax_21 = fn0800_0607(ds, wArg02 & 0xFFFF, 0x0000)
	branch ax_21 != 0xFFFF l0800_051B
// DataOut: di ds si ss
// DataOut (flags): 
// SymbolicIn: sp:fp
// LocalsOut: fp(16) Stack +0002(16)

l0800_051B:
	Mem42[ds:ax_21 + 0x0002:word16] = Mem0[ds:0x0628:word16]
	Mem45[ds:ax_21:word16] = wArg02 + 0x0001
	Mem46[ds:0x0628:word16] = ax_21
	ax_30 = Mem46[ds:0x0628:word16] + 0x0004
// DataOut: ax di ds ss
// DataOut (flags): 
// SymbolicIn: sp:fp - 0x0004 bp:fp - 0x0002 ax:<invalid> dx:<invalid> cx:0x0000 si:<invalid> -8(fp):<invalid> -6(fp):0x0000 -4(fp):si -2(fp):bp
// LocalsOut: fp(16)

l0800_0517:
	ax_30 = 0x0000
// DataOut: ax di ds ss
// DataOut (flags): 
// SymbolicIn: sp:fp - 0x0004 bp:fp - 0x0002 ax:<invalid> dx:<invalid> cx:0x0000 si:<invalid> -8(fp):<invalid> -6(fp):0x0000 -4(fp):si -2(fp):bp
// LocalsOut: fp(16)

l0800_0533:
	return ax_30
// DataOut: ax di ds ss
// DataOut (flags): 
// SymbolicIn: sp:fp - 0x0004 bp:fp - 0x0002 ax:<invalid> dx:<invalid> cx:0x0000 si:<invalid> -8(fp):<invalid> -6(fp):0x0000 -4(fp):si -2(fp):bp

fn0800_04F9_exit:
// DataOut: ax
// DataOut (flags): 
// SymbolicIn: sp:fp bp:bp ax:<invalid> dx:<invalid> cx:0x0000 si:si -8(fp):<invalid> -6(fp):0x0000 -4(fp):si -2(fp):bp



word16 fn0800_0536(selector ds, word16 wArg02)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  ds
// LiveOut: ax
// Trashed: SCZO ah al ax ch cl cx dh dl dx eax ecx edx rax rcx rdx
// Preserved: bp si sp
// Stack args: Stack +0002(16)
fn0800_0536_entry:
// DataOut: ds ss
// DataOut (flags): 
// SymbolicIn: sp:fp
// LocalsOut: fp(16) Stack +0002(16)

l0800_0536:
	word16 ax_30
	word16 ax_21 = fn0800_0607(ds, wArg02 & 0xFFFF, 0x0000)
	branch ax_21 != 0xFFFF l0800_0558
// DataOut: ds si ss
// DataOut (flags): 
// SymbolicIn: sp:fp
// LocalsOut: fp(16) Stack +0002(16)

l0800_0558:
	Mem40[ds:0x062C:word16] = ax_21
	Mem41[ds:0x0628:word16] = ax_21
	Mem44[ds:ax_21:word16] = wArg02 + 0x0001
	ax_30 = ax_21 + 0x0004
// DataOut: ax ds ss
// DataOut (flags): 
// SymbolicIn: sp:fp - 0x0004 bp:fp - 0x0002 ax:<invalid> dx:<invalid> cx:0x0000 si:<invalid> -8(fp):<invalid> -6(fp):0x0000 -4(fp):si -2(fp):bp
// LocalsOut: fp(16)

l0800_0554:
	ax_30 = 0x0000
// DataOut: ax ds ss
// DataOut (flags): 
// SymbolicIn: sp:fp - 0x0004 bp:fp - 0x0002 ax:<invalid> dx:<invalid> cx:0x0000 si:<invalid> -8(fp):<invalid> -6(fp):0x0000 -4(fp):si -2(fp):bp
// LocalsOut: fp(16)

l0800_056D:
	return ax_30
// DataOut: ax ds ss
// DataOut (flags): 
// SymbolicIn: sp:fp - 0x0004 bp:fp - 0x0002 ax:<invalid> dx:<invalid> cx:0x0000 si:<invalid> -8(fp):<invalid> -6(fp):0x0000 -4(fp):si -2(fp):bp

fn0800_0536_exit:
// DataOut: ax
// DataOut (flags): 
// SymbolicIn: sp:fp bp:bp ax:<invalid> dx:<invalid> cx:0x0000 si:si -8(fp):<invalid> -6(fp):0x0000 -4(fp):si -2(fp):bp



word16 fn0800_0570(selector ds, word16 wArg02)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  ds
// LiveOut: ax
// Trashed: SCZO ah al ax bh bl bx ch cl cx dh dl dx eax ebx ecx edx rax rbx rcx rdx
// Preserved: bp di si sp
// Stack args: Stack +0002(16)
fn0800_0570_entry:
// DataOut: ds ss
// DataOut (flags): 
// SymbolicIn: sp:fp
// LocalsOut: fp(16) Local -000A(16) Stack +0002(16)

l0800_0570:
	word16 ax_107
	branch wArg02 == 0x0000 l0800_0581
// DataOut: di ds ss
// DataOut (flags): 
// SymbolicIn: sp:fp
// LocalsOut: fp(16) Local -000A(16)

l0800_057C:
	branch wArg02 <=u 0xFFF4 l0800_0585
// DataOut: di ds ss
// DataOut (flags): 
// SymbolicIn: sp:fp - 0x0006 bp:fp - 0x0002 di:<invalid> -6(fp):di -4(fp):si -2(fp):bp
// LocalsOut: fp(16) Local -000A(16)

l0800_0585:
	word16 ax_49 = wArg02 + 0x000B & 0xFFF8
	branch Mem0[ds:0x062C:word16] != 0x0000 l0800_059D
// DataOut: di ds ss
// DataOut (flags): 
// SymbolicIn: sp:fp - 0x0006 bp:fp - 0x0002 di:<invalid> -6(fp):di -4(fp):si -2(fp):bp
// LocalsOut: fp(16) Local -000A(16)

l0800_059D:
	word16 si_109 = Mem0[ds:0x062A:word16]
	branch si_109 == 0x0000 l0800_05D8
// DataOut: di ds si ss
// DataOut (flags): 
// SymbolicIn: sp:fp - 0x0006 bp:fp - 0x0002 di:<invalid> ax:<invalid> -6(fp):di -4(fp):si -2(fp):bp
// LocalsOut: fp(16) Local -000A(16)

l0800_05A7:
	branch Mem0[ds:si_109:word16] <u ax_49 + 0x0028 l0800_05BB
// DataOut: di ds si ss
// DataOut (flags): 
// SymbolicIn: sp:fp - 0x0006 bp:fp - 0x0002 di:<invalid> ax:<invalid> si:<invalid> dx:<invalid> -6(fp):di -4(fp):si -2(fp):bp
// LocalsOut: fp(16) Local -000A(16)

l0800_05BB:
	branch Mem0[ds:si_109:word16] <u ax_49 l0800_05CF
// DataOut: di ds si ss
// DataOut (flags): 
// SymbolicIn: sp:fp - 0x0006 bp:fp - 0x0002 di:<invalid> ax:<invalid> si:<invalid> dx:<invalid> -6(fp):di -4(fp):si -2(fp):bp
// LocalsOut: fp(16) Local -000A(16)

l0800_05CF:
	si_109 = Mem0[ds:si_109 + 0x0006:word16]
	branch si_109 != Mem0[ds:0x062A:word16] l0800_05A7
// DataOut: di ds si ss
// DataOut (flags): 
// SymbolicIn: sp:fp - 0x0006 bp:fp - 0x0002 di:<invalid> ax:<invalid> si:<invalid> dx:<invalid> -6(fp):di -4(fp):si -2(fp):bp
// LocalsOut: fp(16) Local -000A(16)

l0800_05D8:
	fn0800_04F9(ds, ax_49)
	ax_107 = fn0800_04F9(ds, ax_49)
// DataOut: ax ds ss
// DataOut (flags): 
// SymbolicIn: sp:fp - 0x0006 bp:fp - 0x0002 di:<invalid> ax:<invalid> si:<invalid> dx:<invalid> -6(fp):di -4(fp):si -2(fp):bp
// LocalsOut: fp(16)

l0800_05C1:
	fn0800_0491(ds, si_109)
	Mem105[ds:si_109:word16] = Mem0[ds:si_109:word16] + 0x0001
	ax_107 = si_109 + 0x0004
// DataOut: ax ds ss
// DataOut (flags): 
// SymbolicIn: sp:fp - 0x0006 bp:fp - 0x0002 di:<invalid> ax:<invalid> si:<invalid> dx:<invalid> -6(fp):di -4(fp):si -2(fp):bp
// LocalsOut: fp(16)

l0800_05B2:
	ax_107 = fn0800_04BF(ds, si_109, ax_49)
// DataOut: ax ds ss
// DataOut (flags): 
// SymbolicIn: sp:fp - 0x0006 bp:fp - 0x0002 di:<invalid> ax:<invalid> si:<invalid> dx:<invalid> -6(fp):di -4(fp):si -2(fp):bp
// LocalsOut: fp(16)

l0800_0596:
	ax_107 = fn0800_0536(ds, ax_49)
// DataOut: ax ds ss
// DataOut (flags): 
// SymbolicIn: sp:fp - 0x0006 bp:fp - 0x0002 di:<invalid> ax:<invalid> -6(fp):di -4(fp):si -2(fp):bp
// LocalsOut: fp(16)

l0800_0581:
	ax_107 = 0x0000
// DataOut: ax ds ss
// DataOut (flags): 
// SymbolicIn: sp:fp - 0x0006 bp:fp - 0x0002 di:<invalid> -6(fp):di -4(fp):si -2(fp):bp
// LocalsOut: fp(16)

l0800_05DF:
	return ax_107
// DataOut: ax ds ss
// DataOut (flags): 
// SymbolicIn: sp:fp - 0x0006 bp:fp - 0x0002 di:<invalid> ax:<invalid> dx:<invalid> cx:<invalid> si:<invalid> bx:<invalid> -10(fp):<invalid> -8(fp):<invalid> -6(fp):di -4(fp):si -2(fp):bp

fn0800_0570_exit:
// DataOut: ax
// DataOut (flags): 
// SymbolicIn: sp:fp bp:bp di:di ax:<invalid> si:si dx:<invalid> cx:<invalid> bx:<invalid> -10(fp):<invalid> -8(fp):<invalid> -6(fp):di -4(fp):si -2(fp):bp



void fn0800_05E3(selector ds, word16 wArg02)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  ds
// LiveOut:
// Trashed: SCZO ah al ax dh dl dx eax edx rax rdx
// Preserved: bp sp
// Stack args: Stack +0002(16)
fn0800_05E3_entry:
// DataOut: di ds si
// DataOut (flags): 
// SymbolicIn: sp:fp
// LocalsOut: fp(16) Stack +0002(16)

l0800_05E3:
	branch wArg02 >=u fp - 0x0102 l0800_05FA
// DataOut: ax di ds si
// DataOut (flags): 
// SymbolicIn: sp:fp

l0800_05FA:
	Mem22[ds:0x0094:word16] = 0x0008
// DataOut: di ds si
// DataOut (flags): 
// SymbolicIn: sp:fp - 0x0002 bp:fp - 0x0002 ax:<invalid> dx:fp - 0x0102 -2(fp):bp

l0800_05F3:
	Mem17[ds:0x009E:word16] = wArg02
// DataOut: di ds si
// DataOut (flags): 
// SymbolicIn: sp:fp - 0x0002 bp:fp - 0x0002 ax:<invalid> dx:fp - 0x0102 -2(fp):bp

l0800_0605:
	return
// DataOut: di ds si
// DataOut (flags): 
// SymbolicIn: sp:fp - 0x0002 bp:fp - 0x0002 ax:<invalid> dx:fp - 0x0102 -2(fp):bp

fn0800_05E3_exit:
// DataOut:
// DataOut (flags): 
// SymbolicIn: sp:fp bp:bp ax:<invalid> dx:fp - 0x0102 -2(fp):bp



word16 fn0800_0607(selector ds, word16 wArg02, word16 wArg04)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  ds
// LiveOut: ax
// Trashed: SCZO ah al ax ch cl cx dh dl dx eax ecx edx rax rcx rdx
// Preserved: bp sp
// Stack args: Stack +0002(16) Stack +0004(16)
fn0800_0607_entry:
// DataOut: di ds ss
// DataOut (flags): 
// SymbolicIn: sp:fp
// LocalsOut: fp(16) Stack +0002(16) Stack +0004(16)

l0800_0607:
	word16 ax_31
	word16 ax_12 = wArg02 + Mem0[ds:0x009E:word16]
	ui32 dx_cx_18 = SEQ(wArg04 + (ax_12 <u 0x0000), ax_12 + 0x0100)
	word16 cx_22 = (word16) (dx_cx_18 + 0x00000100)
	branch SEQ(SLICE(dx_cx_18 + 0x00000100, word16, 16), cx_22) != 0x00000000 l0800_062E
// DataOut: ax cx di ds ss
// DataOut (flags): 
// SymbolicIn: sp:fp
// LocalsOut: fp(16)

l0800_0624:
	branch cx_22 >=u fp - 0x0002 l0800_062E
// DataOut: ax di ds ss
// DataOut (flags): 
// SymbolicIn: sp:fp - 0x0002 bp:fp - 0x0002 ax:<invalid> dx:<invalid> cx:<invalid> -2(fp):bp

l0800_062E:
	Mem37[ds:0x0094:word16] = 0x0008
	ax_31 = 0xFFFF
// DataOut: ax di ds ss
// DataOut (flags): 
// SymbolicIn: sp:fp - 0x0002 bp:fp - 0x0002 ax:<invalid> dx:<invalid> cx:<invalid> -2(fp):bp

l0800_0628:
	word16 v13_42 = Mem0[ds:0x009E:word16]
	Mem43[ds:0x009E:word16] = ax_12
	ax_31 = v13_42
// DataOut: ax di ds ss
// DataOut (flags): 
// SymbolicIn: sp:fp - 0x0002 bp:fp - 0x0002 ax:<invalid> dx:<invalid> cx:<invalid> -2(fp):bp

l0800_0639:
	return ax_31
// DataOut: ax di ds ss
// DataOut (flags): 
// SymbolicIn: sp:fp - 0x0002 bp:fp - 0x0002 ax:<invalid> dx:<invalid> cx:<invalid> -2(fp):bp

fn0800_0607_exit:
// DataOut: ax
// DataOut (flags): 
// SymbolicIn: sp:fp bp:bp ax:<invalid> dx:<invalid> cx:<invalid> -2(fp):bp



void fn0800_063B(selector ds, word16 wArg02)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  ds
// LiveOut:
// Trashed: SCZO ah al ax ch cl cx dh dl dx eax ecx edx rax rcx rdx
// Preserved: bp sp
// Stack args: Stack +0002(16)
fn0800_063B_entry:
// DataOut: di ds si
// DataOut (flags): 
// SymbolicIn: sp:fp
// LocalsOut: fp(16) Stack +0002(16)

l0800_063B:
	fn0800_05E3(ds, wArg02)
// DataOut: di ds si
// DataOut (flags): 
// SymbolicIn: sp:fp

l0800_0647:
	return
// DataOut: di ds si
// DataOut (flags): 
// SymbolicIn: sp:fp - 0x0002 bp:fp - 0x0002 cx:<invalid> ax:<invalid> dx:<invalid> -4(fp):<invalid> -2(fp):bp

fn0800_063B_exit:
// DataOut:
// DataOut (flags): 
// SymbolicIn: sp:fp bp:bp cx:<invalid> ax:<invalid> dx:<invalid> -4(fp):<invalid> -2(fp):bp



word16 fn0800_065B(selector ds, word16 wArg02)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  ds
// LiveOut: ax
// Trashed: SCZO ah al ax bh bl bx eax ebx rax rbx
// Preserved: bp di si sp
// Stack args: Stack +0002(16)
fn0800_065B_entry:
// DataOut: ds
// DataOut (flags): 
// SymbolicIn: sp:fp
// LocalsOut: fp(16) Stack +0002(16)

l0800_065B:
	word16 ax_30
	word16 si_17 = Mem0[ds:wArg02:word16]
	word16 wLoc04_19 = si_17
	branch (Mem0[ds:wArg02 + 0x0002:word16] & 0x0040) == 0x0000 l0800_067B
// DataOut: ds si
// DataOut (flags): 
// SymbolicIn: sp:fp
// LocalsOut: fp(16) Local -0004(16) Stack +0002(16)

l0800_067B:
	word16 di_40 = Mem0[ds:wArg02 + 0x000A:word16]
// DataOut: di ds si
// DataOut (flags): 
// SymbolicIn: sp:fp - 0x0008 bp:fp - 0x0002 bx:<invalid> si:<invalid> ax:<invalid> -8(fp):di -6(fp):si -4(fp):<invalid> -2(fp):bp
// LocalsOut: fp(16) Local -0004(16)

l0800_068E:
	si_17 = si_17 - 0x0001
	branch si_17 != 0x0000 l0800_0683
// DataOut: di ds si
// DataOut (flags): 
// SymbolicIn: sp:fp - 0x0008 bp:fp - 0x0002 bx:<invalid> si:<invalid> ax:<invalid> di:<invalid> -8(fp):di -6(fp):si -4(fp):<invalid> -2(fp):bp
// LocalsOut: fp(16) Local -0004(16)

l0800_0683:
	di_40 = di_60 + 0x0001
	word16 di_60 = di_40
	branch Mem0[ds:di_60:byte] != 0x0A l0800_068E
// DataOut: di ds si
// DataOut (flags): 
// SymbolicIn: sp:fp - 0x0008 bp:fp - 0x0002 bx:<invalid> si:<invalid> ax:<invalid> di:<invalid> -8(fp):di -6(fp):si -4(fp):<invalid> -2(fp):bp
// LocalsOut: fp(16) Local -0004(16)

l0800_068B:
	wLoc04_19 = wLoc04_19 + 0x0001
// DataOut: di ds si
// DataOut (flags): 
// SymbolicIn: sp:fp - 0x0008 bp:fp - 0x0002 bx:<invalid> si:<invalid> ax:<invalid> di:<invalid> -8(fp):di -6(fp):si -4(fp):<invalid> -2(fp):bp
// LocalsOut: fp(16) Local -0004(16)

l0800_0695:
	ax_30 = wLoc04_19
// DataOut: ax ds
// DataOut (flags): 
// SymbolicIn: sp:fp - 0x0008 bp:fp - 0x0002 bx:<invalid> si:<invalid> ax:<invalid> di:<invalid> -8(fp):di -6(fp):si -4(fp):<invalid> -2(fp):bp
// LocalsOut: fp(16)

l0800_0677:
	ax_30 = si_17
// DataOut: ax ds
// DataOut (flags): 
// SymbolicIn: sp:fp - 0x0008 bp:fp - 0x0002 bx:<invalid> si:<invalid> ax:<invalid> -8(fp):di -6(fp):si -4(fp):<invalid> -2(fp):bp
// LocalsOut: fp(16)

l0800_069A:
	return ax_30
// DataOut: ax ds
// DataOut (flags): 
// SymbolicIn: sp:fp - 0x0008 bp:fp - 0x0002 bx:<invalid> si:<invalid> ax:<invalid> di:<invalid> -8(fp):di -6(fp):si -4(fp):<invalid> -2(fp):bp

fn0800_065B_exit:
// DataOut: ax
// DataOut (flags): 
// SymbolicIn: sp:fp bp:bp bx:<invalid> si:si ax:<invalid> di:di -8(fp):di -6(fp):si -4(fp):<invalid> -2(fp):bp



void fn0800_06A2(selector ds, word16 wArg02, word16 wArg04, word16 wArg06, word16 wArg08)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  ds
// LiveOut:
// Trashed: SCZO ah al ax bh bl bx ch cl cx dh dl dx eax ebx ecx edx rax rbx rcx rdx
// Preserved: bp si sp
// Stack args: Stack +0002(16) Stack +0004(16) Stack +0006(16) Stack +0008(16)
fn0800_06A2_entry:
// DataOut: di ds
// DataOut (flags): 
// SymbolicIn: sp:fp
// LocalsOut: fp(16) Local -0008(16) Stack +0002(16) Stack +0004(16) Stack +0006(16) Stack +0008(16)

l0800_06A2:
	branch fn0800_0DCD(ds, wArg02) == 0x0000 l0800_06B7
// DataOut: di ds si
// DataOut (flags): 
// SymbolicIn: sp:fp
// LocalsOut: fp(16) Local -0008(16) Stack +0004(16) Stack +0006(16) Stack +0008(16)

l0800_06B7:
	branch wArg08 != 0x0001 l0800_06CD
// DataOut: di ds si
// DataOut (flags): 
// SymbolicIn: sp:fp - 0x0004 bp:fp - 0x0002 si:<invalid> cx:<invalid> ax:<invalid> al:<invalid> dx:<invalid> bx:<invalid> ah:<invalid> -6(fp):<invalid> -4(fp):si -2(fp):bp
// LocalsOut: fp(16) Local -0008(16) Stack +0004(16) Stack +0006(16) Stack +0008(16)

l0800_06BD:
	branch Mem0[ds:wArg02:word16] <= 0x0000 l0800_06CD
// DataOut: di ds si
// DataOut (flags): 
// SymbolicIn: sp:fp - 0x0004 bp:fp - 0x0002 si:<invalid> cx:<invalid> ax:<invalid> al:<invalid> dx:<invalid> bx:<invalid> ah:<invalid> -6(fp):<invalid> -4(fp):si -2(fp):bp
// LocalsOut: fp(16) Local -0008(16) Stack +0004(16) Stack +0006(16) Stack +0008(16)

l0800_06C2:
	wArg04 = wArg04 - (word16) ((int32) fn0800_065B(ds, wArg02))
	wArg06 = v16
// DataOut: di ds si
// DataOut (flags): 
// SymbolicIn: sp:fp - 0x0004 bp:fp - 0x0002 si:<invalid> cx:<invalid> ax:<invalid> al:<invalid> dx:<invalid> bx:<invalid> ah:<invalid> -6(fp):<invalid> -4(fp):si -2(fp):bp
// LocalsOut: fp(16) Stack +0004(16) Stack +0006(16) Stack +0008(16)

l0800_06CD:
	Mem64[ds:wArg02 + 0x0002:word16] = Mem0[ds:wArg02 + 0x0002:word16] & 0xFE5F
	Mem67[ds:wArg02:word16] = 0x0000
	Mem69[ds:wArg02 + 0x000A:word16] = Mem67[ds:wArg02 + 0x0008:word16]
	word16 ax_81 = (int16) Mem69[ds:wArg02 + 0x0004:byte]
	word16 dx_85
	word16 ax_86 = fn0800_0C28((byte) ax_81, ds, ax_81, wArg04, wArg06, (byte) wArg08, out dx_85)
	branch dx_85 != 0xFFFF l0800_06FF
// DataOut: ax di ds
// DataOut (flags): 
// SymbolicIn: sp:fp - 0x0004 bp:fp - 0x0002 si:<invalid> cx:<invalid> ax:<invalid> bx:<invalid> Sequence dx:ax:<invalid> al:<invalid> dx:<invalid> ah:<invalid> -6(fp):<invalid> -4(fp):si -2(fp):bp 4(fp):<invalid> 6(fp):<invalid>
// LocalsOut: fp(16)

l0800_06F5:
	branch ax_86 != 0xFFFF l0800_06FF
// DataOut: di ds
// DataOut (flags): 
// SymbolicIn: sp:fp - 0x0004 bp:fp - 0x0002 si:<invalid> cx:<invalid> ax:<invalid> al:<invalid> bx:<invalid> Sequence dx:ax:<invalid> ah:0x42 dx:<invalid> -12(fp):<invalid> -10(fp):<invalid> -8(fp):<invalid> -6(fp):<invalid> -4(fp):si -2(fp):bp 4(fp):<invalid> 6(fp):<invalid>
// LocalsOut: fp(16)

l0800_06FF:
// DataOut: di ds
// DataOut (flags): 
// SymbolicIn: sp:fp - 0x0004 bp:fp - 0x0002 si:<invalid> cx:<invalid> ax:<invalid> al:<invalid> bx:<invalid> Sequence dx:ax:<invalid> ah:0x42 dx:<invalid> -12(fp):<invalid> -10(fp):<invalid> -8(fp):<invalid> -6(fp):<invalid> -4(fp):si -2(fp):bp 4(fp):<invalid> 6(fp):<invalid>
// LocalsOut: fp(16)

l0800_06FA:
// DataOut: di ds
// DataOut (flags): 
// SymbolicIn: sp:fp - 0x0004 bp:fp - 0x0002 si:<invalid> cx:<invalid> ax:<invalid> al:<invalid> bx:<invalid> Sequence dx:ax:<invalid> ah:0x42 dx:<invalid> -12(fp):<invalid> -10(fp):<invalid> -8(fp):<invalid> -6(fp):<invalid> -4(fp):si -2(fp):bp 4(fp):<invalid> 6(fp):<invalid>
// LocalsOut: fp(16)

l0800_0701:
// DataOut: di ds
// DataOut (flags): 
// SymbolicIn: sp:fp - 0x0004 bp:fp - 0x0002 si:<invalid> cx:<invalid> ax:<invalid> al:<invalid> bx:<invalid> Sequence dx:ax:<invalid> ah:<invalid> dx:<invalid> -12(fp):<invalid> -10(fp):<invalid> -8(fp):<invalid> -6(fp):<invalid> -4(fp):si -2(fp):bp 4(fp):<invalid> 6(fp):<invalid>
// LocalsOut: fp(16)

l0800_06B2:
// DataOut: di ds
// DataOut (flags): 
// SymbolicIn: sp:fp - 0x0004 bp:fp - 0x0002 si:<invalid> cx:<invalid> ax:<invalid> al:<invalid> dx:<invalid> bx:<invalid> ah:<invalid> -6(fp):<invalid> -4(fp):si -2(fp):bp
// LocalsOut: fp(16)

l0800_0703:
	return
// DataOut: di ds
// DataOut (flags): 
// SymbolicIn: sp:fp - 0x0004 bp:fp - 0x0002 si:<invalid> cx:<invalid> ax:<invalid> al:<invalid> bx:<invalid> Sequence dx:ax:<invalid> ah:<invalid> dx:<invalid> -12(fp):<invalid> -10(fp):<invalid> -8(fp):<invalid> -6(fp):<invalid> -4(fp):si -2(fp):bp 4(fp):<invalid> 6(fp):<invalid>

fn0800_06A2_exit:
// DataOut:
// DataOut (flags): 
// SymbolicIn: sp:fp bp:bp si:si cx:<invalid> ax:<invalid> al:<invalid> bx:<invalid> Sequence dx:ax:<invalid> ah:<invalid> dx:<invalid> -12(fp):<invalid> -10(fp):<invalid> -8(fp):<invalid> -6(fp):<invalid> -4(fp):si -2(fp):bp 4(fp):<invalid> 6(fp):<invalid>



void fn0800_075B(selector ds)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  ds
// LiveOut:
// Trashed: SCZO ah al ax bh bl bx ch cl cx dh dl dx eax ebx ecx edx rax rbx rcx rdx
// Preserved: di si sp
fn0800_075B_entry:
// DataOut: ds
// DataOut (flags): 
// SymbolicIn: sp:fp
// LocalsOut: fp(16)

l0800_075B:
	word16 di_16 = 0x0014
	word16 si_17 = 0x0344
// DataOut: di ds si
// DataOut (flags): 
// SymbolicIn: sp:fp
// LocalsOut: fp(16)

l0800_0778:
	di_16 = di_16 - 0x0001
	branch di_16 != 0x0000 l0800_0765
// DataOut: di ds si
// DataOut (flags): 
// SymbolicIn: sp:fp - 0x0004 di:<invalid> si:<invalid> ax:<invalid> cx:<invalid> al:<invalid> dx:<invalid> bx:<invalid> ah:<invalid> -6(fp):<invalid> -4(fp):di -2(fp):si
// LocalsOut: fp(16)

l0800_0765:
	branch (Mem0[ds:si_17 + 0x0000:word16] & 0x0300) != 0x0300 l0800_0775
// DataOut: di ds si
// DataOut (flags): 
// SymbolicIn: sp:fp - 0x0004 di:<invalid> si:<invalid> ax:<invalid> cx:<invalid> al:<invalid> dx:<invalid> bx:<invalid> ah:<invalid> -6(fp):<invalid> -4(fp):di -2(fp):si
// LocalsOut: fp(16)

l0800_0770:
	fn0800_0DCD(ds, si_17)
// DataOut: di ds si
// DataOut (flags): 
// SymbolicIn: sp:fp - 0x0004 di:<invalid> si:<invalid> ax:<invalid> cx:<invalid> al:<invalid> dx:<invalid> bx:<invalid> ah:<invalid> -6(fp):<invalid> -4(fp):di -2(fp):si
// LocalsOut: fp(16)

l0800_0775:
	si_17 = si_17 + 0x0010
// DataOut: di ds si
// DataOut (flags): 
// SymbolicIn: sp:fp - 0x0004 di:<invalid> si:<invalid> ax:<invalid> cx:<invalid> al:<invalid> dx:<invalid> bx:<invalid> ah:<invalid> -6(fp):<invalid> -4(fp):di -2(fp):si
// LocalsOut: fp(16)

l0800_077F:
	return
// DataOut: ds
// DataOut (flags): 
// SymbolicIn: sp:fp - 0x0004 di:<invalid> si:<invalid> ax:<invalid> cx:<invalid> al:<invalid> dx:<invalid> bx:<invalid> ah:<invalid> -6(fp):<invalid> -4(fp):di -2(fp):si

fn0800_075B_exit:
// DataOut:
// DataOut (flags): 
// SymbolicIn: sp:fp di:di si:si ax:<invalid> cx:<invalid> al:<invalid> dx:<invalid> bx:<invalid> ah:<invalid> -6(fp):<invalid> -4(fp):di -2(fp):si



word16 fn0800_0782(selector ds, word16 wArg02)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  ds
// LiveOut: ax
// Trashed: SCZDO ah al ax bh bl bx ch cl cx dh dl dx eax ebx ecx edx es rax rbx rcx rdx
// Preserved: bp si sp
// Stack args: Stack +0002(16)
fn0800_0782_entry:
// DataOut: ds
// DataOut (flags): 
// SymbolicIn: sp:fp
// LocalsOut: fp(16) Stack +0002(16)

l0800_0782:
	branch (Mem0[ds:wArg02 + 0x0002:word16] & 0x0200) == 0x0000 l0800_0793
// DataOut: ds si
// DataOut (flags): 
// SymbolicIn: sp:fp
// LocalsOut: fp(16)

l0800_0790:
	fn0800_075B(ds)
// DataOut: ds si
// DataOut (flags): 
// SymbolicIn: sp:fp - 0x0004 bp:fp - 0x0002 si:<invalid> -4(fp):si -2(fp):bp
// LocalsOut: fp(16)

l0800_0793:
	word16 ax_35
	word16 v10_16 = Mem0[ds:wArg02 + 0x0006:word16]
	word16 ax_19 = Mem0[ds:wArg02 + 0x0008:word16]
	Mem20[ds:wArg02 + 0x000A:word16] = ax_19
	word16 ax_27 = fn0800_09F7(ds, (int16) Mem20[ds:wArg02 + 0x0004:byte], ax_19, v10_16)
	Mem29[ds:wArg02:word16] = ax_27
	branch ax_27 <= 0x0000 l0800_07B9
// DataOut: ds si
// DataOut (flags): 
// SymbolicIn: sp:fp - 0x0004 bp:fp - 0x0002 si:<invalid> ax:<invalid> cx:<invalid> al:<invalid> dx:<invalid> bx:<invalid> ah:<invalid> -4(fp):si -2(fp):bp
// LocalsOut: fp(16)

l0800_07B9:
	branch Mem29[ds:wArg02:word16] != 0x0000 l0800_07CC
// DataOut: ds si
// DataOut (flags): 
// SymbolicIn: sp:fp - 0x0004 bp:fp - 0x0002 si:<invalid> ax:<invalid> al:<invalid> bx:<invalid> cx:<invalid> ah:<invalid> dx:<invalid> es:<invalid> -10(fp):<invalid> -8(fp):<invalid> -6(fp):<invalid> -4(fp):si -2(fp):bp
// LocalsOut: fp(16)

l0800_07CC:
	Mem63[ds:wArg02:word16] = 0x0000
	Mem65[ds:wArg02 + 0x0002:word16] = Mem63[ds:wArg02 + 0x0002:word16] | 0x0010
// DataOut: ds
// DataOut (flags): 
// SymbolicIn: sp:fp - 0x0004 bp:fp - 0x0002 si:<invalid> ax:<invalid> al:<invalid> bx:<invalid> cx:<invalid> ah:<invalid> dx:<invalid> es:<invalid> -10(fp):<invalid> -8(fp):<invalid> -6(fp):<invalid> -4(fp):si -2(fp):bp
// LocalsOut: fp(16)

l0800_07BE:
	Mem62[ds:wArg02 + 0x0002:word16] = Mem29[ds:wArg02 + 0x0002:word16] & 0xFE7F | 0x0020
// DataOut: ds
// DataOut (flags): 
// SymbolicIn: sp:fp - 0x0004 bp:fp - 0x0002 si:<invalid> ax:<invalid> al:<invalid> bx:<invalid> cx:<invalid> ah:<invalid> dx:<invalid> es:<invalid> -10(fp):<invalid> -8(fp):<invalid> -6(fp):<invalid> -4(fp):si -2(fp):bp
// LocalsOut: fp(16)

l0800_07D5:
	ax_35 = 0xFFFF
// DataOut: ax ds
// DataOut (flags): 
// SymbolicIn: sp:fp - 0x0004 bp:fp - 0x0002 si:<invalid> ax:<invalid> al:<invalid> bx:<invalid> cx:<invalid> ah:<invalid> dx:<invalid> es:<invalid> -10(fp):<invalid> -8(fp):<invalid> -6(fp):<invalid> -4(fp):si -2(fp):bp
// LocalsOut: fp(16)

l0800_07AE:
	Mem44[ds:wArg02 + 0x0002:word16] = Mem29[ds:wArg02 + 0x0002:word16] & 0xFFDF
	ax_35 = 0x0000
// DataOut: ax ds
// DataOut (flags): 
// SymbolicIn: sp:fp - 0x0004 bp:fp - 0x0002 si:<invalid> ax:<invalid> al:<invalid> bx:<invalid> cx:<invalid> ah:<invalid> dx:<invalid> es:<invalid> -10(fp):<invalid> -8(fp):<invalid> -6(fp):<invalid> -4(fp):si -2(fp):bp
// LocalsOut: fp(16)

l0800_07DA:
	return ax_35
// DataOut: ax ds
// DataOut (flags): 
// SymbolicIn: sp:fp - 0x0004 bp:fp - 0x0002 si:<invalid> ax:<invalid> al:<invalid> bx:<invalid> cx:<invalid> ah:<invalid> dx:<invalid> es:<invalid> -10(fp):<invalid> -8(fp):<invalid> -6(fp):<invalid> -4(fp):si -2(fp):bp

fn0800_0782_exit:
// DataOut: ax
// DataOut (flags): 
// SymbolicIn: sp:fp bp:bp si:si ax:<invalid> al:<invalid> bx:<invalid> cx:<invalid> ah:<invalid> dx:<invalid> es:<invalid> -10(fp):<invalid> -8(fp):<invalid> -6(fp):<invalid> -4(fp):si -2(fp):bp



void fn0800_07F2(selector ds, word16 wArg02)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  ds
// LiveOut:
// Trashed: SCZDO ah al ax bh bl bx ch cl cx dh dl dx eax ebx ecx edx es rax rbx rcx rdx
// Preserved: bp si sp
// Stack args: Stack +0002(16)
fn0800_07F2_entry:
// DataOut: ds
// DataOut (flags): 
// SymbolicIn: sp:fp
// LocalsOut: fp(16) Local -0003(0) Local -000A(16) Local -000E(16) Stack +0002(16)

l0800_07F2:
// DataOut: ds si
// DataOut (flags): 
// SymbolicIn: sp:fp
// LocalsOut: fp(16) Local -0003(0) Local -000A(16) Local -000E(16)

l0800_07FC:
	word16 v8_37 = Mem0[ds:wArg02:word16] - 0x0001
	Mem38[ds:wArg02:word16] = v8_37
	branch v8_37 < 0x0000 l0800_080E
// DataOut: ds si
// DataOut (flags): 
// SymbolicIn: sp:fp - 0x0006 bp:fp - 0x0002 si:<invalid> ax:<invalid> al:<invalid> bx:<invalid> cx:<invalid> ah:<invalid> dx:<invalid> es:<invalid> -14(fp):<invalid> -12(fp):<invalid> -10(fp):<invalid> -8(fp):<invalid> -6(fp):si -2(fp):bp
// LocalsOut: fp(16) Local -0003(0) Local -000A(16) Local -000E(16)

l0800_080E:
	word16 v15_65 = Mem38[ds:wArg02:word16] + 0x0001
	Mem66[ds:wArg02:word16] = v15_65
	branch v15_65 < 0x0000 l0800_0819
// DataOut: ds si
// DataOut (flags): 
// SymbolicIn: sp:fp - 0x0006 bp:fp - 0x0002 si:<invalid> ax:<invalid> al:<invalid> bx:<invalid> cx:<invalid> ah:<invalid> dx:<invalid> es:<invalid> -14(fp):<invalid> -12(fp):<invalid> -10(fp):<invalid> -8(fp):<invalid> -6(fp):si -2(fp):bp
// LocalsOut: fp(16) Local -0003(0) Local -000A(16) Local -000E(16)

l0800_0812:
	branch (Mem66[ds:wArg02 + 0x0002:word16] & 0x0110) == 0x0000 l0800_0824
// DataOut: ds si
// DataOut (flags): 
// SymbolicIn: sp:fp - 0x0006 bp:fp - 0x0002 si:<invalid> ax:<invalid> al:<invalid> bx:<invalid> cx:<invalid> ah:<invalid> dx:<invalid> es:<invalid> -14(fp):<invalid> -12(fp):<invalid> -10(fp):<invalid> -8(fp):<invalid> -6(fp):si -2(fp):bp
// LocalsOut: fp(16) Local -0003(0) Local -000A(16) Local -000E(16)

l0800_0824:
	Mem90[ds:wArg02 + 0x0002:word16] = Mem66[ds:wArg02 + 0x0002:word16] | 0x0080
	branch Mem90[ds:wArg02 + 0x0006:word16] == 0x0000 l0800_0842
// DataOut: ds si
// DataOut (flags): 
// SymbolicIn: sp:fp - 0x0006 bp:fp - 0x0002 si:<invalid> ax:<invalid> al:<invalid> bx:<invalid> cx:<invalid> dx:<invalid> ah:<invalid> es:<invalid> -14(fp):<invalid> -12(fp):<invalid> -10(fp):<invalid> -8(fp):<invalid> -6(fp):si -2(fp):bp
// LocalsOut: fp(16) Local -0003(0) Local -000A(16) Local -000E(16)

l0800_0842:
	branch Mem90[ds:0x04AA:word16] != 0x0000 l0800_0881
// DataOut: ds si
// DataOut (flags): 
// SymbolicIn: sp:fp - 0x0006 bp:fp - 0x0002 si:<invalid> ax:<invalid> al:<invalid> bx:<invalid> cx:<invalid> dx:<invalid> ah:<invalid> es:<invalid> -14(fp):<invalid> -12(fp):<invalid> -10(fp):<invalid> -8(fp):<invalid> -6(fp):si -2(fp):bp
// LocalsOut: fp(16) Local -0003(0) Local -000A(16) Local -000E(16)

l0800_0849:
	branch 0x0342 != wArg02 l0800_0881
// DataOut: ds si
// DataOut (flags): 
// SymbolicIn: sp:fp - 0x0006 bp:fp - 0x0002 si:<invalid> ax:<invalid> al:<invalid> bx:<invalid> cx:<invalid> dx:<invalid> ah:<invalid> es:<invalid> -14(fp):<invalid> -12(fp):<invalid> -10(fp):<invalid> -8(fp):<invalid> -6(fp):si -2(fp):bp
// LocalsOut: fp(16) Local -0003(0) Local -000A(16) Local -000E(16)

l0800_0881:
	branch (Mem90[ds:wArg02 + 0x0002:word16] & 0x0200) == 0x0000 l0800_088B
// DataOut: ds si
// DataOut (flags): 
// SymbolicIn: sp:fp - 0x0006 bp:fp - 0x0002 si:<invalid> ax:<invalid> cx:<invalid> al:<invalid> ah:<invalid> bx:<invalid> dx:<invalid> es:<invalid> -14(fp):<invalid> -12(fp):<invalid> -10(fp):<invalid> -8(fp):<invalid> -6(fp):si -2(fp):bp
// LocalsOut: fp(16) Local -0003(0) Local -000E(16)

l0800_0888:
	fn0800_075B(ds)
// DataOut: ds si
// DataOut (flags): 
// SymbolicIn: sp:fp - 0x0006 bp:fp - 0x0002 si:<invalid> ax:<invalid> cx:<invalid> al:<invalid> ah:<invalid> bx:<invalid> dx:<invalid> es:<invalid> -14(fp):<invalid> -12(fp):<invalid> -10(fp):<invalid> -8(fp):<invalid> -6(fp):si -2(fp):bp
// LocalsOut: fp(16) Local -0003(0) Local -000E(16)

l0800_088B:
	word16 ax_122 = (int16) Mem90[ds:wArg02 + 0x0004:byte]
	fn0800_0AB3((byte) ax_122, ds, ax_122, fp - 0x0003, 0x0001)
	branch 0xFFFE == 0x0000 l0800_08C9
// DataOut: ds si
// DataOut (flags): 
// SymbolicIn: sp:fp - 0x0006 bp:fp - 0x0002 si:<invalid> ax:<invalid> cx:<invalid> al:<invalid> dx:<invalid> ah:<invalid> bx:<invalid> es:<invalid> -14(fp):<invalid> -12(fp):<invalid> -10(fp):<invalid> -8(fp):<invalid> -6(fp):si -2(fp):bp
// LocalsOut: fp(16) Local -0003(0) Local -000A(16) Local -000E(16)

l0800_08C9:
	branch bLoc03 != 0x0D l0800_08D6
// DataOut: ds si
// DataOut (flags): 
// SymbolicIn: sp:fp - 0x0006 bp:fp - 0x0002 si:<invalid> ax:<invalid> cx:<invalid> al:<invalid> ah:0x3F bx:<invalid> dx:<invalid> es:<invalid> -14(fp):<invalid> -12(fp):<invalid> -10(fp):fp - 0x0003 -8(fp):0x0001 -6(fp):si -2(fp):bp
// LocalsOut: fp(16) Local -0003(8) Local -000E(16)

l0800_08CF:
	branch (Mem90[ds:wArg02 + 0x0002:word16] & 0x0040) == 0x0000 l0800_0881
// DataOut: ds si
// DataOut (flags): 
// SymbolicIn: sp:fp - 0x0006 bp:fp - 0x0002 si:<invalid> ax:<invalid> cx:<invalid> al:<invalid> ah:0x3F bx:<invalid> dx:<invalid> es:<invalid> -14(fp):<invalid> -12(fp):<invalid> -10(fp):fp - 0x0003 -8(fp):0x0001 -6(fp):si -2(fp):bp
// LocalsOut: fp(16) Local -0003(8) Local -000E(16)

l0800_08D6:
	Mem156[ds:wArg02 + 0x0002:word16] = Mem90[ds:wArg02 + 0x0002:word16] & 0xFFDF
// DataOut:
// DataOut (flags): 
// SymbolicIn: sp:fp - 0x0006 bp:fp - 0x0002 si:<invalid> ax:<invalid> cx:<invalid> al:<invalid> ah:0x3F bx:<invalid> dx:<invalid> es:<invalid> -14(fp):<invalid> -12(fp):<invalid> -10(fp):fp - 0x0003 -8(fp):0x0001 -6(fp):si -2(fp):bp
// LocalsOut: fp(16)

l0800_08A3:
	branch fn0800_0D5F(ds, (int16) Mem90[ds:wArg02 + 0x0004:byte]) == 0x0001 l0800_08B8
// DataOut: ds si
// DataOut (flags): 
// SymbolicIn: sp:fp - 0x0006 bp:fp - 0x0002 si:<invalid> ax:<invalid> cx:<invalid> al:<invalid> ah:0x3F bx:<invalid> dx:<invalid> es:<invalid> -14(fp):<invalid> -12(fp):<invalid> -10(fp):fp - 0x0003 -8(fp):0x0001 -6(fp):si -2(fp):bp
// LocalsOut: fp(16)

l0800_08B8:
	Mem150[ds:wArg02 + 0x0002:word16] = Mem90[ds:wArg02 + 0x0002:word16] & 0xFE7F | 0x0020
// DataOut:
// DataOut (flags): 
// SymbolicIn: sp:fp - 0x0006 bp:fp - 0x0002 si:<invalid> ax:<invalid> cx:<invalid> al:0xFF ah:<invalid> bx:<invalid> dx:<invalid> es:<invalid> -14(fp):<invalid> -12(fp):<invalid> -10(fp):fp - 0x0003 -8(fp):<invalid> -6(fp):si -2(fp):bp
// LocalsOut: fp(16)

l0800_08B1:
	Mem142[ds:wArg02 + 0x0002:word16] = Mem90[ds:wArg02 + 0x0002:word16] | 0x0010
// DataOut:
// DataOut (flags): 
// SymbolicIn: sp:fp - 0x0006 bp:fp - 0x0002 si:<invalid> ax:<invalid> cx:<invalid> al:0xFF ah:<invalid> bx:<invalid> dx:<invalid> es:<invalid> -14(fp):<invalid> -12(fp):<invalid> -10(fp):fp - 0x0003 -8(fp):<invalid> -6(fp):si -2(fp):bp
// LocalsOut: fp(16)

l0800_08C4:
// DataOut:
// DataOut (flags): 
// SymbolicIn: sp:fp - 0x0006 bp:fp - 0x0002 si:<invalid> ax:<invalid> cx:<invalid> al:<invalid> ah:<invalid> bx:<invalid> dx:<invalid> es:<invalid> -14(fp):<invalid> -12(fp):<invalid> -10(fp):fp - 0x0003 -8(fp):<invalid> -6(fp):si -2(fp):bp
// LocalsOut: fp(16)

l0800_0850:
	branch fn0800_08F2((int16) Mem90[ds:wArg02 + 0x0004:byte]) != 0x0000 l0800_0862
// DataOut: ds si
// DataOut (flags): 
// SymbolicIn: sp:fp - 0x0006 bp:fp - 0x0002 si:<invalid> ax:0x0342 al:0x42 bx:<invalid> cx:<invalid> dx:<invalid> ah:0x03 es:<invalid> -14(fp):<invalid> -12(fp):<invalid> -10(fp):<invalid> -8(fp):<invalid> -6(fp):si -2(fp):bp
// LocalsOut: fp(16) Local -0003(0)

l0800_085D:
	Mem207[ds:wArg02 + 0x0002:word16] = Mem90[ds:wArg02 + 0x0002:word16] & 0xFDFF
// DataOut: ds si
// DataOut (flags): 
// SymbolicIn: sp:fp - 0x0006 bp:fp - 0x0002 si:<invalid> ax:<invalid> al:<invalid> bx:<invalid> cx:<invalid> dx:<invalid> ah:<invalid> es:<invalid> -14(fp):<invalid> -12(fp):<invalid> -10(fp):<invalid> -8(fp):<invalid> -6(fp):si -2(fp):bp
// LocalsOut: fp(16) Local -0003(0)

l0800_0862:
	word16 ax_184
	branch (Mem90[ds:wArg02 + 0x0002:word16] & 0x0200) == 0x0000 l0800_0872
// DataOut: ds si
// DataOut (flags): 
// SymbolicIn: sp:fp - 0x0006 bp:fp - 0x0002 si:<invalid> ax:<invalid> al:<invalid> bx:<invalid> cx:<invalid> dx:<invalid> ah:<invalid> es:<invalid> -14(fp):<invalid> -12(fp):<invalid> -10(fp):<invalid> -8(fp):<invalid> -6(fp):si -2(fp):bp
// LocalsOut: fp(16) Local -0003(0) Local -0008(16)

l0800_0872:
	ax_184 = 0x0000
// DataOut: ax ds si
// DataOut (flags): 
// SymbolicIn: sp:fp - 0x0008 bp:fp - 0x0002 si:<invalid> ax:0x0200 al:0x00 bx:<invalid> cx:<invalid> dx:<invalid> ah:0x02 es:<invalid> -14(fp):<invalid> -12(fp):<invalid> -10(fp):<invalid> -8(fp):0x0200 -6(fp):si -2(fp):bp
// LocalsOut: fp(16) Local -0003(0) Local -0008(16)

l0800_086D:
	ax_184 = 0x0001
// DataOut: ax ds si
// DataOut (flags): 
// SymbolicIn: sp:fp - 0x0008 bp:fp - 0x0002 si:<invalid> ax:0x0200 al:0x00 bx:<invalid> cx:<invalid> dx:<invalid> ah:0x02 es:<invalid> -14(fp):<invalid> -12(fp):<invalid> -10(fp):<invalid> -8(fp):0x0200 -6(fp):si -2(fp):bp
// LocalsOut: fp(16) Local -0003(0) Local -0008(16)

l0800_0874:
	fn0800_0904(ds, wArg02, 0x0000, ax_184, 0x0200)
// DataOut: ds si
// DataOut (flags): 
// SymbolicIn: sp:fp - 0x0008 bp:fp - 0x0002 si:<invalid> ax:<invalid> al:<invalid> bx:<invalid> cx:<invalid> dx:<invalid> ah:0x00 es:<invalid> -14(fp):<invalid> -12(fp):<invalid> -10(fp):<invalid> -8(fp):0x0200 -6(fp):si -2(fp):bp
// LocalsOut: fp(16) Local -0003(0) Local -000A(16) Local -000E(16)

l0800_082F:
	branch fn0800_0782(ds, wArg02) == 0x0000 l0800_083D
// DataOut: ds si
// DataOut (flags): 
// SymbolicIn: sp:fp - 0x0006 bp:fp - 0x0002 si:<invalid> ax:<invalid> al:<invalid> bx:<invalid> cx:<invalid> dx:<invalid> ah:<invalid> es:<invalid> -14(fp):<invalid> -12(fp):<invalid> -10(fp):<invalid> -8(fp):<invalid> -6(fp):si -2(fp):bp
// LocalsOut: fp(16) Local -0003(0) Local -000A(16) Local -000E(16)

l0800_083D:
// DataOut: ds si
// DataOut (flags): 
// SymbolicIn: sp:fp - 0x0006 bp:fp - 0x0002 si:<invalid> ax:<invalid> al:<invalid> bx:<invalid> cx:<invalid> ah:<invalid> dx:<invalid> es:<invalid> -14(fp):<invalid> -12(fp):<invalid> -10(fp):<invalid> -8(fp):<invalid> -6(fp):si -2(fp):bp
// LocalsOut: fp(16) Local -0003(0) Local -000A(16) Local -000E(16)

l0800_0837:
// DataOut:
// DataOut (flags): 
// SymbolicIn: sp:fp - 0x0006 bp:fp - 0x0002 si:<invalid> ax:<invalid> al:<invalid> bx:<invalid> cx:<invalid> ah:<invalid> dx:<invalid> es:<invalid> -14(fp):<invalid> -12(fp):<invalid> -10(fp):<invalid> -8(fp):<invalid> -6(fp):si -2(fp):bp
// LocalsOut: fp(16)

l0800_0819:
	Mem71[ds:wArg02 + 0x0002:word16] = Mem66[ds:wArg02 + 0x0002:word16] | 0x0010
// DataOut:
// DataOut (flags): 
// SymbolicIn: sp:fp - 0x0006 bp:fp - 0x0002 si:<invalid> ax:<invalid> al:<invalid> bx:<invalid> cx:<invalid> ah:<invalid> dx:<invalid> es:<invalid> -14(fp):<invalid> -12(fp):<invalid> -10(fp):<invalid> -8(fp):<invalid> -6(fp):si -2(fp):bp
// LocalsOut: fp(16)

l0800_0800:
	Mem60[ds:wArg02 + 0x000A:word16] = Mem38[ds:wArg02 + 0x000A:word16] + 0x0001
// DataOut:
// DataOut (flags): 
// SymbolicIn: sp:fp - 0x0006 bp:fp - 0x0002 si:<invalid> ax:<invalid> al:<invalid> bx:<invalid> cx:<invalid> ah:<invalid> dx:<invalid> es:<invalid> -14(fp):<invalid> -12(fp):<invalid> -10(fp):<invalid> -8(fp):<invalid> -6(fp):si -2(fp):bp
// LocalsOut: fp(16)

l0800_08E2:
	return
// DataOut:
// DataOut (flags): 
// SymbolicIn: sp:fp - 0x0006 bp:fp - 0x0002 si:<invalid> bx:<invalid> al:<invalid> ah:<invalid> ax:<invalid> cx:<invalid> dx:<invalid> es:<invalid> -14(fp):<invalid> -12(fp):<invalid> -10(fp):<invalid> -8(fp):<invalid> -6(fp):si -2(fp):bp

fn0800_07F2_exit:
// DataOut:
// DataOut (flags): 
// SymbolicIn: sp:fp bp:bp si:si bx:<invalid> al:<invalid> ah:<invalid> ax:<invalid> cx:<invalid> dx:<invalid> es:<invalid> -14(fp):<invalid> -12(fp):<invalid> -10(fp):<invalid> -8(fp):<invalid> -6(fp):si -2(fp):bp



word16 fn0800_08F2(word16 wArg02)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse: 
// LiveOut: ax
// Trashed: SCZO ah al ax bh bl bx eax ebx rax rbx
// Preserved: bp sp
// Stack args: Stack +0002(16)
fn0800_08F2_entry:
// DataOut: ds si
// DataOut (flags): 
// SymbolicIn: sp:fp
// LocalsOut: fp(16) Stack +0002(16)

l0800_08F2:
	word16 dx_8
	msdos_ioctl_get_device_info(wArg02, out dx_8)
	return dx_8 & 0x0080
// DataOut: ax ds si
// DataOut (flags): 
// SymbolicIn: sp:fp

fn0800_08F2_exit:
// DataOut: ax
// DataOut (flags): 
// SymbolicIn: sp:fp bp:bp bx:<invalid> ax:dx & 0x0080 -2(fp):bp



void fn0800_0904(selector ds, word16 wArg02, word16 wArg04, word16 wArg06, word16 wArg08)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  ds
// LiveOut:
// Trashed: SCZO ah al ax bh bl bx ch cl cx dh dl dx eax ebx ecx edx rax rbx rcx rdx
// Preserved: bp di si sp
// Stack args: Stack +0002(16) Stack +0004(16) Stack +0006(16) Stack +0008(16)
fn0800_0904_entry:
// DataOut: ds
// DataOut (flags): 
// SymbolicIn: sp:fp
// LocalsOut: fp(16) Local -000A(16) Stack +0002(16) Stack +0004(16) Stack +0006(16) Stack +0008(16)

l0800_0904:
	branch Mem0[ds:wArg02 + 0x000E:word16] != wArg02 l0800_0922
// DataOut: di ds si
// DataOut (flags): 
// SymbolicIn: sp:fp
// LocalsOut: fp(16) Local -000A(16) Stack +0004(16) Stack +0006(16)

l0800_0916:
	branch wArg06 > 0x0002 l0800_0922
// DataOut: di ds si
// DataOut (flags): 
// SymbolicIn: sp:fp - 0x0006 bp:fp - 0x0002 di:<invalid> si:<invalid> ax:<invalid> -6(fp):di -4(fp):si -2(fp):bp
// LocalsOut: fp(16) Local -000A(16) Stack +0004(16) Stack +0006(16)

l0800_091C:
	branch wArg08 <=u 0x7FFF l0800_0928
// DataOut: di ds si
// DataOut (flags): 
// SymbolicIn: sp:fp - 0x0006 bp:fp - 0x0002 di:<invalid> si:<invalid> ax:<invalid> -6(fp):di -4(fp):si -2(fp):bp
// LocalsOut: fp(16) Local -000A(16) Stack +0004(16) Stack +0006(16)

l0800_0928:
	branch Mem0[ds:0x04AC:word16] != 0x0000 l0800_093E
// DataOut: di ds si
// DataOut (flags): 
// SymbolicIn: sp:fp - 0x0006 bp:fp - 0x0002 di:<invalid> si:<invalid> ax:<invalid> -6(fp):di -4(fp):si -2(fp):bp
// LocalsOut: fp(16) Local -000A(16) Stack +0004(16) Stack +0006(16)

l0800_092F:
	branch 0x0352 != wArg02 l0800_093E
// DataOut: di ds si
// DataOut (flags): 
// SymbolicIn: sp:fp - 0x0006 bp:fp - 0x0002 di:<invalid> si:<invalid> ax:<invalid> -6(fp):di -4(fp):si -2(fp):bp
// LocalsOut: fp(16) Local -000A(16) Stack +0004(16) Stack +0006(16)

l0800_093E:
	branch Mem0[ds:0x04AA:word16] != 0x0000 l0800_0952
// DataOut: di ds si
// DataOut (flags): 
// SymbolicIn: sp:fp - 0x0006 bp:fp - 0x0002 di:<invalid> si:<invalid> ax:<invalid> -6(fp):di -4(fp):si -2(fp):bp
// LocalsOut: fp(16) Local -000A(16) Stack +0004(16) Stack +0006(16)

l0800_0945:
	branch 0x0342 != wArg02 l0800_0952
// DataOut: di ds si
// DataOut (flags): 
// SymbolicIn: sp:fp - 0x0006 bp:fp - 0x0002 di:<invalid> si:<invalid> ax:<invalid> -6(fp):di -4(fp):si -2(fp):bp
// LocalsOut: fp(16) Local -000A(16) Stack +0004(16) Stack +0006(16)

l0800_094C:
	Mem159[ds:0x04AA:word16] = 0x0001
// DataOut: di ds si
// DataOut (flags): 
// SymbolicIn: sp:fp - 0x0006 bp:fp - 0x0002 di:<invalid> si:<invalid> ax:0x0342 -6(fp):di -4(fp):si -2(fp):bp
// LocalsOut: fp(16) Local -000A(16) Stack +0004(16) Stack +0006(16)

l0800_0936:
	Mem163[ds:0x04AC:word16] = 0x0001
// DataOut: di ds si
// DataOut (flags): 
// SymbolicIn: sp:fp - 0x0006 bp:fp - 0x0002 di:<invalid> si:<invalid> ax:0x0352 -6(fp):di -4(fp):si -2(fp):bp
// LocalsOut: fp(16) Local -000A(16) Stack +0004(16) Stack +0006(16)

l0800_0952:
	branch Mem0[ds:wArg02:word16] == 0x0000 l0800_0966
// DataOut: di ds si
// DataOut (flags): 
// SymbolicIn: sp:fp - 0x0006 bp:fp - 0x0002 di:<invalid> si:<invalid> ax:<invalid> -6(fp):di -4(fp):si -2(fp):bp
// LocalsOut: fp(16) Local -000A(16) Stack +0004(16) Stack +0006(16)

l0800_0957:
	fn0800_06A2(ds, wArg02, 0x0000, 0x0000, 0x0001)
// DataOut: di ds si
// DataOut (flags): 
// SymbolicIn: sp:fp - 0x0006 bp:fp - 0x0002 di:<invalid> si:<invalid> ax:<invalid> -6(fp):di -4(fp):si -2(fp):bp
// LocalsOut: fp(16) Local -000A(16) Stack +0004(16) Stack +0006(16)

l0800_0966:
	branch (Mem0[ds:wArg02 + 0x0002:word16] & 0x0004) == 0x0000 l0800_0974
// DataOut: di ds si
// DataOut (flags): 
// SymbolicIn: sp:fp - 0x0006 bp:fp - 0x0002 di:<invalid> si:<invalid> ax:<invalid> cx:<invalid> al:<invalid> bx:<invalid> dx:<invalid> ah:<invalid> -14(fp):<invalid> -12(fp):0x0000 -10(fp):0x0000 -8(fp):0x0001 -6(fp):di -4(fp):si -2(fp):bp
// LocalsOut: fp(16) Local -000A(16) Stack +0004(16) Stack +0006(16)

l0800_096D:
	fn0800_16AD(ds, Mem0[ds:wArg02 + 0x0008:word16])
// DataOut: di ds si
// DataOut (flags): 
// SymbolicIn: sp:fp - 0x0006 bp:fp - 0x0002 di:<invalid> si:<invalid> ax:<invalid> cx:<invalid> al:<invalid> bx:<invalid> dx:<invalid> ah:<invalid> -14(fp):<invalid> -12(fp):0x0000 -10(fp):0x0000 -8(fp):0x0001 -6(fp):di -4(fp):si -2(fp):bp
// LocalsOut: fp(16) Local -000A(16) Stack +0004(16) Stack +0006(16)

l0800_0974:
	Mem76[ds:wArg02 + 0x0002:word16] = Mem0[ds:wArg02 + 0x0002:word16] & 0xFFF3
	Mem78[ds:wArg02 + 0x0006:word16] = 0x0000
	Mem81[ds:wArg02 + 0x0008:word16] = wArg02 + 0x0005
	Mem82[ds:wArg02 + 0x000A:word16] = wArg02 + 0x0005
	branch wArg06 == 0x0002 l0800_09CE
// DataOut: di ds si
// DataOut (flags): 
// SymbolicIn: sp:fp - 0x0006 bp:fp - 0x0002 di:<invalid> si:<invalid> ax:<invalid> cx:<invalid> al:<invalid> bx:<invalid> dx:<invalid> ah:<invalid> -14(fp):<invalid> -12(fp):0x0000 -10(fp):0x0000 -8(fp):<invalid> -6(fp):di -4(fp):si -2(fp):bp
// LocalsOut: fp(16) Local -000A(16) Stack +0004(16) Stack +0006(16)

l0800_098F:
	branch false l0800_09CE
// DataOut: di ds si
// DataOut (flags): 
// SymbolicIn: sp:fp - 0x0006 bp:fp - 0x0002 di:<invalid> si:<invalid> ax:<invalid> cx:<invalid> al:<invalid> bx:<invalid> dx:<invalid> ah:<invalid> -14(fp):<invalid> -12(fp):0x0000 -10(fp):0x0000 -8(fp):<invalid> -6(fp):di -4(fp):si -2(fp):bp
// LocalsOut: fp(16) Local -000A(16) Stack +0004(16) Stack +0006(16)

l0800_0993:
	Mem100[ds:0x0234:word16] = 0x09D6
	branch wArg04 != 0x0000 l0800_09B7
// DataOut: di ds si
// DataOut (flags): 
// SymbolicIn: sp:fp - 0x0006 bp:fp - 0x0002 di:<invalid> si:<invalid> ax:<invalid> cx:<invalid> al:<invalid> bx:<invalid> dx:<invalid> ah:<invalid> -14(fp):<invalid> -12(fp):0x0000 -10(fp):0x0000 -8(fp):<invalid> -6(fp):di -4(fp):si -2(fp):bp
// LocalsOut: fp(16) Local -000A(16) Stack +0004(16) Stack +0006(16)

l0800_099F:
	word16 ax_121 = fn0800_0570(ds, wArg08)
	wArg04 = ax_121
	branch ax_121 == 0x0000 l0800_09B2
// DataOut: di ds si
// DataOut (flags): 
// SymbolicIn: sp:fp - 0x0006 bp:fp - 0x0002 di:<invalid> si:<invalid> ax:<invalid> cx:<invalid> al:<invalid> bx:<invalid> dx:<invalid> ah:<invalid> -14(fp):<invalid> -12(fp):0x0000 -10(fp):0x0000 -8(fp):<invalid> -6(fp):di -4(fp):si -2(fp):bp
// LocalsOut: fp(16) Stack +0004(16) Stack +0006(16)

l0800_09B2:
// DataOut: ds
// DataOut (flags): 
// SymbolicIn: sp:fp - 0x0006 bp:fp - 0x0002 di:<invalid> si:<invalid> ax:<invalid> cx:<invalid> al:<invalid> dx:<invalid> bx:<invalid> ah:<invalid> -14(fp):<invalid> -12(fp):0x0000 -10(fp):0x0000 -8(fp):<invalid> -6(fp):di -4(fp):si -2(fp):bp 4(fp):<invalid>
// LocalsOut: fp(16)

l0800_09AB:
	Mem130[ds:wArg02 + 0x0002:word16] = Mem100[ds:wArg02 + 0x0002:word16] | 0x0004
// DataOut: di ds si
// DataOut (flags): 
// SymbolicIn: sp:fp - 0x0006 bp:fp - 0x0002 di:<invalid> si:<invalid> ax:<invalid> cx:<invalid> al:<invalid> dx:<invalid> bx:<invalid> ah:<invalid> -14(fp):<invalid> -12(fp):0x0000 -10(fp):0x0000 -8(fp):<invalid> -6(fp):di -4(fp):si -2(fp):bp 4(fp):<invalid>
// LocalsOut: fp(16) Stack +0004(16) Stack +0006(16)

l0800_09B7:
	Mem110[ds:wArg02 + 0x000A:word16] = wArg04
	Mem111[ds:wArg02 + 0x0008:word16] = wArg04
	Mem112[ds:wArg02 + 0x0006:word16] = wArg08
	branch wArg06 != 0x0001 l0800_09CE
// DataOut: ds si
// DataOut (flags): 
// SymbolicIn: sp:fp - 0x0006 bp:fp - 0x0002 di:<invalid> si:<invalid> ax:<invalid> cx:<invalid> al:<invalid> dx:<invalid> bx:<invalid> ah:<invalid> -14(fp):<invalid> -12(fp):0x0000 -10(fp):0x0000 -8(fp):<invalid> -6(fp):di -4(fp):si -2(fp):bp 4(fp):<invalid>
// LocalsOut: fp(16)

l0800_09C9:
	Mem116[ds:wArg02 + 0x0002:word16] = Mem112[ds:wArg02 + 0x0002:word16] | 0x0008
// DataOut: ds
// DataOut (flags): 
// SymbolicIn: sp:fp - 0x0006 bp:fp - 0x0002 di:<invalid> si:<invalid> ax:<invalid> cx:<invalid> al:<invalid> dx:<invalid> bx:<invalid> ah:<invalid> -14(fp):<invalid> -12(fp):0x0000 -10(fp):0x0000 -8(fp):<invalid> -6(fp):di -4(fp):si -2(fp):bp 4(fp):<invalid>
// LocalsOut: fp(16)

l0800_09CE:
// DataOut: ds
// DataOut (flags): 
// SymbolicIn: sp:fp - 0x0006 bp:fp - 0x0002 di:<invalid> si:<invalid> ax:<invalid> cx:<invalid> al:<invalid> bx:<invalid> dx:<invalid> ah:<invalid> -14(fp):<invalid> -12(fp):0x0000 -10(fp):0x0000 -8(fp):<invalid> -6(fp):di -4(fp):si -2(fp):bp 4(fp):<invalid>
// LocalsOut: fp(16)

l0800_0922:
// DataOut: ds
// DataOut (flags): 
// SymbolicIn: sp:fp - 0x0006 bp:fp - 0x0002 di:<invalid> si:<invalid> ax:<invalid> -6(fp):di -4(fp):si -2(fp):bp
// LocalsOut: fp(16)

l0800_09D2:
	return
// DataOut: ds
// DataOut (flags): 
// SymbolicIn: sp:fp - 0x0006 bp:fp - 0x0002 di:<invalid> si:<invalid> ax:<invalid> cx:<invalid> al:<invalid> bx:<invalid> dx:<invalid> ah:<invalid> -14(fp):<invalid> -12(fp):0x0000 -10(fp):0x0000 -8(fp):<invalid> -6(fp):di -4(fp):si -2(fp):bp 4(fp):<invalid>

fn0800_0904_exit:
// DataOut:
// DataOut (flags): 
// SymbolicIn: sp:fp bp:bp di:di si:si ax:<invalid> cx:<invalid> al:<invalid> bx:<invalid> dx:<invalid> ah:<invalid> -14(fp):<invalid> -12(fp):0x0000 -10(fp):0x0000 -8(fp):<invalid> -6(fp):di -4(fp):si -2(fp):bp 4(fp):<invalid>



word16 fn0800_09F7(selector ds, word16 wArg02, word16 wArg04, word16 wArg06)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  ds
// LiveOut: ax
// Trashed: SCZDO ah al ax bh bl bx ch cl cx dh dl dx eax ebx ecx edx es rax rbx rcx rdx
// Preserved: bp di si sp
// Stack args: Stack +0002(16) Stack +0004(16) Stack +0006(16)
fn0800_09F7_entry:
// DataOut: ds
// DataOut (flags): 
// SymbolicIn: sp:fp
// LocalsOut: fp(16) Local -0003(8) Local -0012(16) Stack +0002(16) Stack +0004(16) Stack +0006(16)

l0800_09F7:
	word16 ax_101
	byte al_121 = (byte) (wArg06 + 0x0001)
	branch wArg06 <u 0xFFFF l0800_0A15
// DataOut: al ds
// DataOut (flags): 
// SymbolicIn: sp:fp
// LocalsOut: fp(16) Local -0003(8) Local -0012(16) Stack +0002(16) Stack +0004(16) Stack +0006(16)

l0800_0A08:
	branch (Mem0[ds:(wArg02 << 0x0001) + 0x0482:word16] & 0x0200) == 0x0000 l0800_0A1A
// DataOut: al ds
// DataOut (flags): 
// SymbolicIn: sp:fp - 0x000A bp:fp - 0x0002 ax:<invalid> -10(fp):di -8(fp):si -2(fp):bp
// LocalsOut: fp(16) Local -0003(8) Local -0012(16) Stack +0002(16) Stack +0004(16) Stack +0006(16)

l0800_0A1A:
	fn0800_0AB3(al_121, ds, wArg02, wArg04, wArg06)
	branch false l0800_0A42
// DataOut: ds
// DataOut (flags): 
// SymbolicIn: sp:fp - 0x000A bp:fp - 0x0002 ax:<invalid> bx:<invalid> cx:<invalid> si:<invalid> es:ds di:<invalid> al:<invalid> ah:<invalid> dx:<invalid> -20(fp):<invalid> -18(fp):fp - 0x0003 -16(fp):<invalid> -14(fp):<invalid> -12(fp):ds -10(fp):di -8(fp):si -6(fp):<invalid> -2(fp):bp
// LocalsOut: fp(16) Local -0003(8) Local -0006(16) Local -0012(16) Stack +0002(16) Stack +0004(16) Stack +0006(16)

l0800_0A35:
	branch (Mem0[ds:(wArg02 << 0x0001) + 0x0482:word16] & 0x8000) == 0x0000 l0800_0A48
// DataOut: ds
// DataOut (flags): 
// SymbolicIn: sp:fp - 0x000A bp:fp - 0x0002 ax:<invalid> bx:<invalid> ah:<invalid> cx:<invalid> dx:<invalid> al:0x00 si:<invalid> es:ds di:<invalid> -20(fp):<invalid> -18(fp):fp - 0x0003 -16(fp):<invalid> -14(fp):<invalid> -12(fp):<invalid> -10(fp):di -8(fp):si -6(fp):<invalid> -2(fp):bp
// LocalsOut: fp(16) Local -0003(8) Local -0006(16) Local -0012(16) Stack +0002(16) Stack +0004(16) Stack +0006(16)

l0800_0A48:
	word16 cx_108 = 0xFFFF
	word16 si_109 = wArg04
	word16 di_114 = wArg04
// DataOut: bx cx di ds es si
// DataOut (flags): 
// SymbolicIn: sp:fp - 0x000A bp:fp - 0x0002 ax:<invalid> bx:<invalid> ah:<invalid> cx:<invalid> dx:<invalid> al:0x00 si:<invalid> es:ds di:<invalid> -20(fp):<invalid> -18(fp):fp - 0x0003 -16(fp):<invalid> -14(fp):<invalid> -12(fp):<invalid> -10(fp):di -8(fp):si -6(fp):<invalid> -2(fp):bp
// LocalsOut: fp(16) Local -0003(8) Local -0012(16) Stack +0002(16) Stack +0004(16) Stack +0006(16)

l0800_0A55:
	al_121 = Mem0[ds:si_109:byte]
	si_109 = si_109 + 0x0001
	branch al_121 == 0x1A l0800_0A87
// DataOut: al bx cx di ds es si
// DataOut (flags): 
// SymbolicIn: sp:fp - 0x000A bp:fp - 0x0002 ax:<invalid> bx:<invalid> cx:<invalid> si:<invalid> es:ds di:<invalid> ah:<invalid> dx:<invalid> al:<invalid> -20(fp):<invalid> -18(fp):fp - 0x0003 -16(fp):<invalid> -14(fp):<invalid> -12(fp):ds -10(fp):di -8(fp):si -6(fp):<invalid> -2(fp):bp
// LocalsOut: fp(16) Local -0003(8) Local -0012(16) Stack +0002(16) Stack +0004(16) Stack +0006(16)

l0800_0A87:
	word16 cx_199 = -cx_108
	word16 ax_201 = 0x0000 - (cx_199 == 0x0000)
	word16 dx_211
	fn0800_0C28((byte) ax_201, ds, wArg02, cx_199, ax_201, 0x02, out dx_211)
	Mem217[ds:(wArg02 << 0x0001) + 0x0482:word16] = Mem0[ds:(wArg02 << 0x0001) + 0x0482:word16] | 0x0200
// DataOut: bx di ds
// DataOut (flags): 
// SymbolicIn: sp:fp - 0x000A bp:fp - 0x0002 ax:<invalid> bx:<invalid> cx:<invalid> si:<invalid> es:ds di:<invalid> al:<invalid> ah:<invalid> dx:<invalid> -20(fp):<invalid> -18(fp):fp - 0x0003 -16(fp):<invalid> -14(fp):<invalid> -12(fp):ds -10(fp):di -8(fp):si -6(fp):<invalid> -2(fp):bp
// LocalsOut: fp(16)

l0800_0A5A:
	branch al_121 == 0x0D l0800_0A63
// DataOut: al bx cx di ds es si
// DataOut (flags): 
// SymbolicIn: sp:fp - 0x000A bp:fp - 0x0002 ax:<invalid> bx:<invalid> cx:<invalid> si:<invalid> es:ds di:<invalid> al:<invalid> ah:<invalid> dx:<invalid> -20(fp):<invalid> -18(fp):fp - 0x0003 -16(fp):<invalid> -14(fp):<invalid> -12(fp):ds -10(fp):di -8(fp):si -6(fp):<invalid> -2(fp):bp
// LocalsOut: fp(16) Local -0003(8) Local -0012(16) Stack +0002(16) Stack +0004(16) Stack +0006(16)

l0800_0A63:
	cx_108 = cx_108 - 0x0001
	branch cx_108 != 0x0000 l0800_0A55
// DataOut: bx cx di ds es si
// DataOut (flags): 
// SymbolicIn: sp:fp - 0x000A bp:fp - 0x0002 ax:<invalid> bx:<invalid> cx:<invalid> si:<invalid> es:ds di:<invalid> al:<invalid> ah:<invalid> dx:<invalid> -20(fp):<invalid> -18(fp):fp - 0x0003 -16(fp):<invalid> -14(fp):<invalid> -12(fp):ds -10(fp):di -8(fp):si -6(fp):<invalid> -2(fp):bp
// LocalsOut: fp(16) Local -0003(8) Local -0012(16) Stack +0002(16) Stack +0004(16) Stack +0006(16)

l0800_0A65:
	fn0800_0AB3((byte) (fp - 0x0003), ds, wArg02, fp - 0x0003, 0x0001)
	Mem191[ds:di_114:byte] = bLoc03
	al_121 = bLoc03
	di_114 = di_114 + 0x0001
// DataOut: al bx di ds
// DataOut (flags): 
// SymbolicIn: sp:fp - 0x000A bp:fp - 0x0002 ax:<invalid> bx:<invalid> cx:<invalid> si:<invalid> es:ds di:<invalid> al:<invalid> ah:<invalid> dx:<invalid> -20(fp):<invalid> -18(fp):fp - 0x0003 -16(fp):<invalid> -14(fp):<invalid> -12(fp):ds -10(fp):di -8(fp):si -6(fp):<invalid> -2(fp):bp
// LocalsOut: fp(16) Local -0003(8) Local -0012(16) Stack +0002(16) Stack +0004(16) Stack +0006(16)

l0800_0A5E:
	Mem163[ds:di_114:byte] = al_121
	di_114 = di_114 + 0x0001
	cx_108 = cx_108 - 0x0001
	branch cx_108 != 0x0000 l0800_0A55
// DataOut: al bx cx di ds es si
// DataOut (flags): 
// SymbolicIn: sp:fp - 0x000A bp:fp - 0x0002 ax:<invalid> bx:<invalid> cx:<invalid> si:<invalid> es:ds di:<invalid> al:<invalid> ah:<invalid> dx:<invalid> -20(fp):<invalid> -18(fp):fp - 0x0003 -16(fp):<invalid> -14(fp):<invalid> -12(fp):ds -10(fp):di -8(fp):si -6(fp):<invalid> -2(fp):bp
// LocalsOut: fp(16) Local -0003(8) Local -0012(16) Stack +0002(16) Stack +0004(16) Stack +0006(16)

l0800_0A61:
// DataOut: al bx di ds
// DataOut (flags): 
// SymbolicIn: sp:fp - 0x000A bp:fp - 0x0002 ax:<invalid> bx:<invalid> cx:<invalid> si:<invalid> es:ds di:<invalid> al:<invalid> ah:<invalid> dx:<invalid> -20(fp):<invalid> -18(fp):fp - 0x0003 -16(fp):<invalid> -14(fp):<invalid> -12(fp):ds -10(fp):di -8(fp):si -6(fp):<invalid> -2(fp):bp
// LocalsOut: fp(16) Local -0003(8) Local -0012(16) Stack +0002(16) Stack +0004(16) Stack +0006(16)

l0800_0A7F:
	branch di_114 != wArg04 l0800_0A85
// DataOut: al bx di ds
// DataOut (flags): 
// SymbolicIn: sp:fp - 0x000A bp:fp - 0x0002 ax:<invalid> bx:<invalid> cx:<invalid> si:<invalid> es:ds di:<invalid> al:<invalid> ah:<invalid> dx:<invalid> -20(fp):<invalid> -18(fp):fp - 0x0003 -16(fp):<invalid> -14(fp):<invalid> -12(fp):ds -10(fp):di -8(fp):si -6(fp):<invalid> -2(fp):bp
// LocalsOut: fp(16) Local -0003(8) Local -0012(16) Stack +0002(16) Stack +0004(16) Stack +0006(16)

l0800_0A85:
// DataOut: bx di ds
// DataOut (flags): 
// SymbolicIn: sp:fp - 0x000A bp:fp - 0x0002 ax:<invalid> bx:<invalid> cx:<invalid> si:<invalid> es:ds di:<invalid> al:<invalid> ah:<invalid> dx:<invalid> -20(fp):<invalid> -18(fp):fp - 0x0003 -16(fp):<invalid> -14(fp):<invalid> -12(fp):ds -10(fp):di -8(fp):si -6(fp):<invalid> -2(fp):bp
// LocalsOut: fp(16)

l0800_0AA7:
	ax_101 = di_114 - wArg04
// DataOut: ax ds
// DataOut (flags): 
// SymbolicIn: sp:fp - 0x000A bp:fp - 0x0002 ax:<invalid> bx:<invalid> cx:<invalid> si:<invalid> es:ds di:<invalid> al:<invalid> ah:<invalid> dx:<invalid> -20(fp):<invalid> -18(fp):<invalid> -16(fp):<invalid> -14(fp):<invalid> -12(fp):<invalid> -10(fp):di -8(fp):si -6(fp):<invalid> -2(fp):bp
// LocalsOut: fp(16)

l0800_0A83:
// DataOut: al ds
// DataOut (flags): 
// SymbolicIn: sp:fp - 0x000A bp:fp - 0x0002 ax:<invalid> bx:<invalid> cx:<invalid> si:<invalid> es:ds di:<invalid> al:<invalid> ah:<invalid> dx:<invalid> -20(fp):<invalid> -18(fp):fp - 0x0003 -16(fp):<invalid> -14(fp):<invalid> -12(fp):ds -10(fp):di -8(fp):si -6(fp):<invalid> -2(fp):bp
// LocalsOut: fp(16) Local -0003(8) Local -0012(16) Stack +0002(16) Stack +0004(16) Stack +0006(16)

l0800_0A42:
	ax_101 = 0xFFFF
// DataOut: ax ds
// DataOut (flags): 
// SymbolicIn: sp:fp - 0x000A bp:fp - 0x0002 ax:<invalid> bx:<invalid> ah:<invalid> cx:<invalid> dx:<invalid> al:0x00 si:<invalid> es:ds di:<invalid> -20(fp):<invalid> -18(fp):fp - 0x0003 -16(fp):<invalid> -14(fp):<invalid> -12(fp):<invalid> -10(fp):di -8(fp):si -6(fp):<invalid> -2(fp):bp
// LocalsOut: fp(16)

l0800_0A15:
	ax_101 = 0x0000
// DataOut: ax ds
// DataOut (flags): 
// SymbolicIn: sp:fp - 0x000A bp:fp - 0x0002 ax:<invalid> bx:<invalid> -10(fp):di -8(fp):si -2(fp):bp
// LocalsOut: fp(16)

l0800_0AAD:
	return ax_101
// DataOut: ax ds
// DataOut (flags): 
// SymbolicIn: sp:fp - 0x000A bp:fp - 0x0002 ax:<invalid> bx:<invalid> ah:<invalid> cx:<invalid> dx:<invalid> si:<invalid> es:ds di:<invalid> al:<invalid> -20(fp):<invalid> -18(fp):<invalid> -16(fp):<invalid> -14(fp):<invalid> -12(fp):<invalid> -10(fp):di -8(fp):si -6(fp):<invalid> -2(fp):bp

fn0800_09F7_exit:
// DataOut: ax
// DataOut (flags): 
// SymbolicIn: sp:fp bp:bp ax:<invalid> bx:<invalid> di:di si:si ah:<invalid> cx:<invalid> dx:<invalid> es:ds al:<invalid> -20(fp):<invalid> -18(fp):<invalid> -16(fp):<invalid> -14(fp):<invalid> -12(fp):<invalid> -10(fp):di -8(fp):si -6(fp):<invalid> -2(fp):bp



void fn0800_0AB3(byte al, selector ds, word16 wArg02, word16 wArg04, word16 wArg06)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  al ds
// LiveOut:
// Trashed: SCZO ah al ax bh bl bx ch cl cx dh dl dx eax ebx ecx edx rax rbx rcx rdx
// Preserved: bp sp
// Stack args: Stack +0002(16) Stack +0004(16) Stack +0006(16)
fn0800_0AB3_entry:
// DataOut: al di ds si
// DataOut (flags): 
// SymbolicIn: sp:fp
// LocalsOut: fp(16) Stack +0002(16) Stack +0004(16) Stack +0006(16)

l0800_0AB3:
	word16 ax_17
	branch msdos_read_file(wArg02, wArg06, SEQ(ds, wArg04), out ax_17) l0800_0AC7
// DataOut: ax di ds si
// DataOut (flags): 
// SymbolicIn: sp:fp
// LocalsOut: fp(16)

l0800_0AC7:
	fn0800_02C5(ds, ax_17)
// DataOut: di ds si
// DataOut (flags): 
// SymbolicIn: sp:fp - 0x0002 bp:fp - 0x0002 ah:0x3F bx:<invalid> cx:<invalid> dx:<invalid> -2(fp):bp

l0800_0AC5:
// DataOut: di ds si
// DataOut (flags): 
// SymbolicIn: sp:fp - 0x0002 bp:fp - 0x0002 ah:0x3F bx:<invalid> cx:<invalid> dx:<invalid> -2(fp):bp

l0800_0ACD:
	return
// DataOut: di ds si
// DataOut (flags): 
// SymbolicIn: sp:fp - 0x0002 bp:fp - 0x0002 ah:0x3F bx:<invalid> cx:<invalid> dx:<invalid> al:0xFF ax:0xFFFF -4(fp):ax -2(fp):bp

fn0800_0AB3_exit:
// DataOut:
// DataOut (flags): 
// SymbolicIn: sp:fp bp:bp ah:0x3F bx:<invalid> cx:<invalid> dx:<invalid> al:0xFF ax:0xFFFF -4(fp):ax -2(fp):bp



word16 fn0800_0ACF(selector ds, word16 wArg02, word16 wArg04, word16 wArg06)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  ds
// LiveOut: ax
// Trashed: SCZO ah al ax bh bl bx ch cl cx dh dl dx eax ebx ecx edx rax rbx rcx rdx
// Preserved: bp di si sp
// Stack args: Stack +0002(16) Stack +0004(16) Stack +0006(16)
fn0800_0ACF_entry:
// DataOut: ds
// DataOut (flags): 
// SymbolicIn: sp:fp
// LocalsOut: fp(16) Stack +0002(16) Stack +0004(16) Stack +0006(16)

l0800_0ACF:
	word16 ax_149
	byte al_16 = (byte) (wArg06 + 0x0001)
	branch wArg06 >=u 0xFFFF l0800_0AE6
// DataOut: al ds
// DataOut (flags): 
// SymbolicIn: sp:fp
// LocalsOut: fp(16) Stack +0002(16) Stack +0004(16) Stack +0006(16)

l0800_0AE6:
	branch (Mem0[ds:(wArg02 << 0x0001) + 0x0482:word16] & 0x8000) == 0x0000 l0800_0B05
// DataOut: al ds
// DataOut (flags): 
// SymbolicIn: sp:fp - 0x0090 bp:fp - 0x0002 ax:<invalid> -144(fp):di -142(fp):si -2(fp):bp
// LocalsOut: fp(16) Stack +0002(16) Stack +0004(16) Stack +0006(16)

l0800_0B05:
	Mem83[ds:(wArg02 << 0x0001) + 0x0482:word16] = Mem0[ds:(wArg02 << 0x0001) + 0x0482:word16] & 0xFDFF
	word16 wLoc86_113 = wArg04
	word16 wLoc8A_110 = wArg06
	word16 si_105 = fp - 0x0084
// DataOut: ds si
// DataOut (flags): 
// SymbolicIn: sp:fp - 0x0090 bp:fp - 0x0002 ax:<invalid> bx:<invalid> -144(fp):di -142(fp):si -2(fp):bp
// LocalsOut: fp(16) Local -0086(16) Local -008A(0) Stack +0002(16) Stack +0006(16)

l0800_0B91:
	branch wLoc8A_110 == 0x0000 l0800_0B9B
// DataOut: ds si
// DataOut (flags): 
// SymbolicIn: sp:fp - 0x0090 bp:fp - 0x0002 ax:<invalid> bx:<invalid> si:<invalid> al:<invalid> dx:<invalid> di:<invalid> ah:<invalid> cx:<invalid> -150(fp):<invalid> -148(fp):fp - 0x0084 -146(fp):<invalid> -144(fp):di -142(fp):si -140(fp):<invalid> -138(fp):<invalid> -135(fp):<invalid> -134(fp):<invalid> -132(fp):0x0D -2(fp):bp
// LocalsOut: fp(16) Local -0086(16) Local -008A(16) Stack +0002(16) Stack +0006(16)

l0800_0B9B:
	word16 di_165 = si_105 - (fp - 0x0084)
	branch false l0800_0BD7
// DataOut: di ds
// DataOut (flags): 
// SymbolicIn: sp:fp - 0x0090 bp:fp - 0x0002 ax:<invalid> bx:<invalid> si:<invalid> al:<invalid> dx:<invalid> di:<invalid> ah:<invalid> cx:<invalid> -150(fp):<invalid> -148(fp):fp - 0x0084 -146(fp):<invalid> -144(fp):di -142(fp):si -140(fp):<invalid> -138(fp):<invalid> -135(fp):<invalid> -134(fp):<invalid> -132(fp):0x0D -2(fp):bp
// LocalsOut: fp(16) Stack +0002(16) Stack +0006(16)

l0800_0BA9:
	word16 ax_189 = fn0800_0BE2((byte) (fp - 0x0084), ds, wArg02, fp - 0x0084, di_165)
	branch ax_189 == di_165 l0800_0BD7
// DataOut: di ds
// DataOut (flags): 
// SymbolicIn: sp:fp - 0x0090 bp:fp - 0x0002 ax:<invalid> bx:<invalid> si:<invalid> di:<invalid> al:<invalid> dx:<invalid> ah:<invalid> cx:<invalid> -150(fp):<invalid> -148(fp):fp - 0x0084 -146(fp):<invalid> -144(fp):di -142(fp):si -140(fp):<invalid> -138(fp):<invalid> -135(fp):<invalid> -134(fp):<invalid> -132(fp):0x0D -2(fp):bp
// LocalsOut: fp(16) Local -008C(0) Stack +0006(16)

l0800_0BD7:
	ax_149 = wArg06
// DataOut: ax ds
// DataOut (flags): 
// SymbolicIn: sp:fp - 0x0090 bp:fp - 0x0002 ax:<invalid> bx:<invalid> si:<invalid> di:<invalid> ah:<invalid> cx:<invalid> dx:<invalid> al:<invalid> -150(fp):<invalid> -148(fp):fp - 0x0084 -146(fp):<invalid> -144(fp):di -142(fp):si -140(fp):<invalid> -138(fp):<invalid> -135(fp):<invalid> -134(fp):<invalid> -132(fp):0x0D -2(fp):bp
// LocalsOut: fp(16)

l0800_0BC0:
	branch ax_189 >=u 0x0000 l0800_0BCC
// DataOut: di ds
// DataOut (flags): 
// SymbolicIn: sp:fp - 0x0090 bp:fp - 0x0002 ax:<invalid> bx:<invalid> si:<invalid> di:<invalid> ah:<invalid> cx:<invalid> dx:<invalid> al:<invalid> -150(fp):<invalid> -148(fp):fp - 0x0084 -146(fp):<invalid> -144(fp):di -142(fp):si -140(fp):<invalid> -138(fp):<invalid> -135(fp):<invalid> -134(fp):<invalid> -132(fp):0x0D -2(fp):bp
// LocalsOut: fp(16) Local -008C(16) Stack +0006(16)

l0800_0BCC:
	ax_149 = wArg06 + ax_189 - di_165
// DataOut: ax ds
// DataOut (flags): 
// SymbolicIn: sp:fp - 0x0090 bp:fp - 0x0002 ax:<invalid> bx:<invalid> si:<invalid> di:<invalid> ah:<invalid> cx:<invalid> dx:<invalid> al:<invalid> -150(fp):<invalid> -148(fp):fp - 0x0084 -146(fp):<invalid> -144(fp):di -142(fp):si -140(fp):<invalid> -138(fp):<invalid> -135(fp):<invalid> -134(fp):<invalid> -132(fp):0x0D -2(fp):bp
// LocalsOut: fp(16)

l0800_0BC7:
	ax_149 = 0xFFFF
// DataOut: ax ds
// DataOut (flags): 
// SymbolicIn: sp:fp - 0x0090 bp:fp - 0x0002 ax:<invalid> bx:<invalid> si:<invalid> di:<invalid> ah:<invalid> cx:<invalid> dx:<invalid> al:<invalid> -150(fp):<invalid> -148(fp):fp - 0x0084 -146(fp):<invalid> -144(fp):di -142(fp):si -140(fp):<invalid> -138(fp):<invalid> -135(fp):<invalid> -134(fp):<invalid> -132(fp):0x0D -2(fp):bp
// LocalsOut: fp(16)

l0800_0BD5:
// DataOut: ax ds
// DataOut (flags): 
// SymbolicIn: sp:fp - 0x0090 bp:fp - 0x0002 ax:<invalid> bx:<invalid> si:<invalid> di:<invalid> ah:<invalid> cx:<invalid> dx:<invalid> al:<invalid> -150(fp):<invalid> -148(fp):fp - 0x0084 -146(fp):<invalid> -144(fp):di -142(fp):si -140(fp):<invalid> -138(fp):<invalid> -135(fp):<invalid> -134(fp):<invalid> -132(fp):0x0D -2(fp):bp
// LocalsOut: fp(16)

l0800_0B98:
// DataOut: ds si
// DataOut (flags): 
// SymbolicIn: sp:fp - 0x0090 bp:fp - 0x0002 ax:<invalid> bx:<invalid> si:<invalid> al:<invalid> dx:<invalid> di:<invalid> ah:<invalid> cx:<invalid> -150(fp):<invalid> -148(fp):fp - 0x0084 -146(fp):<invalid> -144(fp):di -142(fp):si -140(fp):<invalid> -138(fp):<invalid> -135(fp):<invalid> -134(fp):<invalid> -132(fp):0x0D -2(fp):bp
// LocalsOut: fp(16) Local -0086(16) Local -008A(16) Stack +0002(16) Stack +0006(16)

l0800_0B24:
	word16 v20_109 = wLoc8A_110 - 0x0001
	wLoc8A_110 = v20_109
	wLoc86_113 = wLoc86_113 + 0x0001
	byte al_114 = Mem83[ds:wLoc86_113:byte]
	branch al_114 != 0x0A l0800_0B3E
// DataOut: ds si
// DataOut (flags): 
// SymbolicIn: sp:fp - 0x0090 bp:fp - 0x0002 ax:<invalid> bx:<invalid> si:<invalid> al:<invalid> dx:<invalid> di:<invalid> ah:<invalid> cx:<invalid> -150(fp):<invalid> -148(fp):fp - 0x0084 -146(fp):<invalid> -144(fp):di -142(fp):si -140(fp):<invalid> -138(fp):<invalid> -135(fp):<invalid> -134(fp):<invalid> -132(fp):0x0D -2(fp):bp
// LocalsOut: fp(16) Local -0086(16) Local -0087(8) Local -008A(0) Stack +0002(16) Stack +0006(16)

l0800_0B3A:
	Mem160[ds:si_105:byte] = 0x0D
	si_105 = si_105 + 0x0001
// DataOut: ds si
// DataOut (flags): 
// SymbolicIn: sp:fp - 0x0090 bp:fp - 0x0002 ax:<invalid> bx:<invalid> si:<invalid> al:<invalid> dx:<invalid> di:<invalid> ah:<invalid> cx:<invalid> -150(fp):<invalid> -148(fp):fp - 0x0084 -146(fp):<invalid> -144(fp):di -142(fp):si -140(fp):<invalid> -138(fp):<invalid> -135(fp):<invalid> -134(fp):<invalid> -132(fp):0x0D -2(fp):bp
// LocalsOut: fp(16) Local -0086(16) Local -0087(8) Local -008A(0) Stack +0002(16) Stack +0006(16)

l0800_0B3E:
	Mem121[ds:si_105:byte] = al_114
	si_105 = si_105 + 0x0001
	branch si_105 - (fp - 0x0084) < 0x0080 l0800_0B91
// DataOut: ds si
// DataOut (flags): 
// SymbolicIn: sp:fp - 0x0090 bp:fp - 0x0002 ax:<invalid> bx:<invalid> si:<invalid> al:<invalid> dx:<invalid> di:<invalid> ah:<invalid> cx:<invalid> -150(fp):<invalid> -148(fp):fp - 0x0084 -146(fp):<invalid> -144(fp):di -142(fp):si -140(fp):<invalid> -138(fp):<invalid> -135(fp):<invalid> -134(fp):<invalid> -132(fp):0x0D -2(fp):bp
// LocalsOut: fp(16) Local -0086(16) Local -008A(0) Stack +0002(16) Stack +0006(16)

l0800_0B53:
	word16 di_130 = si_105 - (fp - 0x0084)
	word16 ax_141 = fn0800_0BE2((byte) (fp - 0x0084), ds, wArg02, fp - 0x0084, di_130)
	branch ax_141 == di_130 l0800_0B8D
// DataOut: di ds
// DataOut (flags): 
// SymbolicIn: sp:fp - 0x0090 bp:fp - 0x0002 ax:fp - 0x0084 bx:<invalid> si:<invalid> al:<invalid> dx:<invalid> di:<invalid> ah:<invalid> cx:<invalid> -150(fp):<invalid> -148(fp):fp - 0x0084 -146(fp):<invalid> -144(fp):di -142(fp):si -140(fp):<invalid> -138(fp):<invalid> -135(fp):<invalid> -134(fp):<invalid> -132(fp):0x0D -2(fp):bp
// LocalsOut: fp(16) Local -0086(16) Local -008A(0) Local -008C(0) Stack +0002(16) Stack +0006(16)

l0800_0B8D:
	si_105 = fp - 0x0084
// DataOut: ds si
// DataOut (flags): 
// SymbolicIn: sp:fp - 0x0090 bp:fp - 0x0002 ax:<invalid> bx:<invalid> si:<invalid> al:<invalid> dx:<invalid> di:<invalid> ah:<invalid> cx:<invalid> -150(fp):<invalid> -148(fp):fp - 0x0084 -146(fp):<invalid> -144(fp):di -142(fp):si -140(fp):<invalid> -138(fp):<invalid> -135(fp):<invalid> -134(fp):<invalid> -132(fp):0x0D -2(fp):bp
// LocalsOut: fp(16) Local -0086(16) Local -008A(0) Stack +0002(16) Stack +0006(16)

l0800_0B72:
	branch ax_141 >=u 0x0000 l0800_0B7E
// DataOut: di ds
// DataOut (flags): 
// SymbolicIn: sp:fp - 0x0090 bp:fp - 0x0002 ax:<invalid> bx:<invalid> si:<invalid> al:<invalid> dx:<invalid> di:<invalid> ah:<invalid> cx:<invalid> -150(fp):<invalid> -148(fp):fp - 0x0084 -146(fp):<invalid> -144(fp):di -142(fp):si -140(fp):<invalid> -138(fp):<invalid> -135(fp):<invalid> -134(fp):<invalid> -132(fp):0x0D -2(fp):bp
// LocalsOut: fp(16) Local -008A(16) Local -008C(16) Stack +0006(16)

l0800_0B7E:
	ax_149 = wArg06 - v20_109 + ax_141 - di_130
// DataOut: ax ds
// DataOut (flags): 
// SymbolicIn: sp:fp - 0x0090 bp:fp - 0x0002 ax:<invalid> bx:<invalid> si:<invalid> al:<invalid> dx:<invalid> di:<invalid> ah:<invalid> cx:<invalid> -150(fp):<invalid> -148(fp):fp - 0x0084 -146(fp):<invalid> -144(fp):di -142(fp):si -140(fp):<invalid> -138(fp):<invalid> -135(fp):<invalid> -134(fp):<invalid> -132(fp):0x0D -2(fp):bp
// LocalsOut: fp(16)

l0800_0B79:
	ax_149 = 0xFFFF
// DataOut: ax ds
// DataOut (flags): 
// SymbolicIn: sp:fp - 0x0090 bp:fp - 0x0002 ax:<invalid> bx:<invalid> si:<invalid> al:<invalid> dx:<invalid> di:<invalid> ah:<invalid> cx:<invalid> -150(fp):<invalid> -148(fp):fp - 0x0084 -146(fp):<invalid> -144(fp):di -142(fp):si -140(fp):<invalid> -138(fp):<invalid> -135(fp):<invalid> -134(fp):<invalid> -132(fp):0x0D -2(fp):bp
// LocalsOut: fp(16)

l0800_0B8B:
// DataOut: ax ds
// DataOut (flags): 
// SymbolicIn: sp:fp - 0x0090 bp:fp - 0x0002 ax:<invalid> bx:<invalid> si:<invalid> al:<invalid> dx:<invalid> di:<invalid> ah:<invalid> cx:<invalid> -150(fp):<invalid> -148(fp):fp - 0x0084 -146(fp):<invalid> -144(fp):di -142(fp):si -140(fp):<invalid> -138(fp):<invalid> -135(fp):<invalid> -134(fp):<invalid> -132(fp):0x0D -2(fp):bp
// LocalsOut: fp(16)

l0800_0AF3:
	ax_149 = fn0800_0BE2(al_16, ds, wArg02, wArg04, wArg06)
// DataOut: ax ds
// DataOut (flags): 
// SymbolicIn: sp:fp - 0x0090 bp:fp - 0x0002 ax:<invalid> bx:<invalid> -144(fp):di -142(fp):si -2(fp):bp
// LocalsOut: fp(16)

l0800_0AE1:
	ax_149 = 0x0000
// DataOut: ax ds
// DataOut (flags): 
// SymbolicIn: sp:fp - 0x0090 bp:fp - 0x0002 ax:<invalid> -144(fp):di -142(fp):si -2(fp):bp
// LocalsOut: fp(16)

l0800_0BDC:
	return ax_149
// DataOut: ax ds
// DataOut (flags): 
// SymbolicIn: sp:fp - 0x0090 bp:fp - 0x0002 ax:<invalid> bx:<invalid> si:<invalid> di:<invalid> ah:<invalid> cx:<invalid> dx:<invalid> al:<invalid> -150(fp):<invalid> -148(fp):<invalid> -146(fp):<invalid> -144(fp):di -142(fp):si -140(fp):<invalid> -138(fp):<invalid> -135(fp):<invalid> -134(fp):<invalid> -132(fp):0x0D -2(fp):bp

fn0800_0ACF_exit:
// DataOut: ax
// DataOut (flags): 
// SymbolicIn: sp:fp bp:bp ax:<invalid> di:di si:si bx:<invalid> ah:<invalid> cx:<invalid> dx:<invalid> al:<invalid> -150(fp):<invalid> -148(fp):<invalid> -146(fp):<invalid> -144(fp):di -142(fp):si -140(fp):<invalid> -138(fp):<invalid> -135(fp):<invalid> -134(fp):<invalid> -132(fp):0x0D -2(fp):bp



word16 fn0800_0BE2(byte al, selector ds, word16 wArg02, word16 wArg04, word16 wArg06)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  al ds
// LiveOut: ax
// Trashed: SCZO ah al ax bh bl bx ch cl cx dh dl dx eax ebx ecx edx rax rbx rcx rdx
// Preserved: bp sp
// Stack args: Stack +0002(16) Stack +0004(16) Stack +0006(16)
fn0800_0BE2_entry:
// DataOut: al di ds si
// DataOut (flags): 
// SymbolicIn: sp:fp
// LocalsOut: fp(16) Local -0006(16) Stack +0002(16) Stack +0004(16) Stack +0006(16)

l0800_0BE2:
	branch (Mem0[ds:(wArg02 << 0x0001) + 0x0482:word16] & 0x0800) == 0x0000 l0800_0C02
// DataOut: al di ds si
// DataOut (flags): 
// SymbolicIn: sp:fp
// LocalsOut: fp(16) Local -0006(16) Stack +0002(16) Stack +0004(16) Stack +0006(16)

l0800_0BF2:
	word16 dx_82
	fn0800_0C28(0x00, ds, wArg02, 0x0000, 0x0000, 0x02, out dx_82)
// DataOut: al di ds si
// DataOut (flags): 
// SymbolicIn: sp:fp - 0x0002 bp:fp - 0x0002 bx:<invalid> -2(fp):bp
// LocalsOut: fp(16) Local -0006(16) Stack +0002(16) Stack +0004(16) Stack +0006(16)

l0800_0C02:
	word16 ax_44
	word16 ax_38
	branch msdos_write_file(wArg02, wArg06, SEQ(ds, wArg04), out ax_38) l0800_0C20
// DataOut: ax di ds si
// DataOut (flags): 
// SymbolicIn: sp:fp - 0x0002 bp:fp - 0x0002 bx:<invalid> ax:<invalid> ah:0x42 al:<invalid> cx:<invalid> dx:<invalid> -10(fp):<invalid> -8(fp):0x0000 -6(fp):0x0000 -4(fp):0x0002 -2(fp):bp
// LocalsOut: fp(16) Local -0006(16) Stack +0002(16)

l0800_0C20:
	ax_44 = fn0800_02C5(ds, ax_38)
// DataOut: ax di ds si
// DataOut (flags): 
// SymbolicIn: sp:fp - 0x0002 bp:fp - 0x0002 bx:<invalid> ax:<invalid> ah:0x40 cx:<invalid> dx:<invalid> al:<invalid> -10(fp):<invalid> -8(fp):0x0000 -6(fp):0x0000 -4(fp):0x0002 -2(fp):bp

l0800_0C11:
	Mem54[ds:(wArg02 << 0x0001) + 0x0482:word16] = Mem0[ds:(wArg02 << 0x0001) + 0x0482:word16] | 0x1000
	ax_44 = ax_38
// DataOut: ax di ds si
// DataOut (flags): 
// SymbolicIn: sp:fp - 0x0002 bp:fp - 0x0002 bx:<invalid> ax:<invalid> ah:0x40 cx:<invalid> dx:<invalid> al:<invalid> -10(fp):<invalid> -8(fp):0x0000 -6(fp):0x0000 -4(fp):0x0002 -2(fp):bp

l0800_0C26:
	return ax_44
// DataOut: ax di ds si
// DataOut (flags): 
// SymbolicIn: sp:fp - 0x0002 bp:fp - 0x0002 bx:<invalid> ax:<invalid> ah:<invalid> cx:<invalid> dx:<invalid> al:<invalid> -10(fp):<invalid> -8(fp):0x0000 -6(fp):0x0000 -4(fp):<invalid> -2(fp):bp

fn0800_0BE2_exit:
// DataOut: ax
// DataOut (flags): 
// SymbolicIn: sp:fp bp:bp bx:<invalid> ax:<invalid> ah:<invalid> cx:<invalid> dx:<invalid> al:<invalid> -10(fp):<invalid> -8(fp):0x0000 -6(fp):0x0000 -4(fp):<invalid> -2(fp):bp



word16 fn0800_0C28(byte al, selector ds, word16 wArg02, word16 wArg04, word16 wArg06, byte bArg08, ptr16 & dxOut)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  al ds
// LiveOut: al ax dx
// Trashed: SCZO ah al ax bh bl bx ch cl cx dh dl dx eax ebx ecx edx rax rbx rcx rdx
// Preserved: bp sp
// Stack args: Stack +0002(16) Stack +0004(16) Stack +0006(16) Stack +0008(8)
fn0800_0C28_entry:
// DataOut: al di ds si
// DataOut (flags): 
// SymbolicIn: sp:fp
// LocalsOut: fp(16) Stack +0002(16) Stack +0004(16) Stack +0006(16) Stack +0008(8)

l0800_0C28:
	Mem12[ds:(wArg02 << 0x0001) + 0x0482:word16] = Mem0[ds:(wArg02 << 0x0001) + 0x0482:word16] & 0xFDFF
	word16 ax_18 = DPB(ax, bArg08, 0)
	word16 dx_23
	*dxOut = wArg04
	branch msdos_set_file_position(wArg02, SEQ(wArg06, wArg04), bArg08, SEQ(wArg04, ax_18)) l0800_0C4A
// DataOut: al ax di ds dx si
// DataOut (flags): 
// SymbolicIn: sp:fp
// LocalsOut: fp(16)

l0800_0C4A:
	fn0800_02C5(ds, ax_18)
	word16 dx_44
	*dxOut = 0x0000
	ax_18 = 0xFFFF (alias)
// DataOut: al ax di ds dx si
// DataOut (flags): 
// SymbolicIn: sp:fp - 0x0002 bp:fp - 0x0002 bx:<invalid> ah:0x42 al:<invalid> cx:<invalid> dx:<invalid> -2(fp):bp

l0800_0C48:
// DataOut: al ax di ds dx si
// DataOut (flags): 
// SymbolicIn: sp:fp - 0x0002 bp:fp - 0x0002 bx:<invalid> ah:0x42 al:<invalid> cx:<invalid> dx:<invalid> -2(fp):bp

l0800_0C51:
	return ax_18
// DataOut: al ax di ds dx si
// DataOut (flags): 
// SymbolicIn: sp:fp - 0x0002 bp:fp - 0x0002 bx:<invalid> ah:0x42 al:<invalid> cx:<invalid> dx:<invalid> Sequence dx:ax:<invalid> ax:0xFFFF -4(fp):ax -2(fp):bp

fn0800_0C28_exit:
// DataOut: al ax dx
// DataOut (flags): 
// SymbolicIn: sp:fp bp:bp bx:<invalid> ah:0x42 al:<invalid> cx:<invalid> dx:<invalid> Sequence dx:ax:<invalid> ax:0xFFFF -4(fp):ax -2(fp):bp



void fn0800_0C53(selector es, selector ds, byte bArg02, byte bArg04, word16 wArg06, word16 wArg08, word16 wArg0A, word16 wArg0C)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  ds es
// LiveOut:
// Trashed: SCZDO ah al ax bh bl bx ch cl cx dh di dil dl dx eax ebx ecx edi edx es esi rax rbx rcx rdi rdx rsi si sil
// Preserved: bp sp
// Stack args: Stack +0002(8) Stack +0004(8) Stack +0006(16) Stack +0008(16) Stack +000A(16) Stack +000C(16)
fn0800_0C53_entry:
// DataOut: ds es
// DataOut (flags): 
// SymbolicIn: sp:fp
// LocalsOut: fp(16) Stack +0002(8) Stack +0004(8) Stack +0006(16) Stack +0008(16) Stack +000A(16) Stack +000C(16)

l0800_0C53:
	word16 di_126 = wArg08
	byte bl_25 = (byte) wArg06
	branch wArg06 >u 0x0024 l0800_0CC1
// DataOut: bl bx di ds es
// DataOut (flags): 
// SymbolicIn: sp:fp
// LocalsOut: fp(16) Local -002A(16) Stack +0002(8) Stack +0004(8) Stack +000A(16) Stack +000C(16)

l0800_0C69:
	branch bl_25 <u 0x02 l0800_0CC1
// DataOut: bl bx di ds es
// DataOut (flags): 
// SymbolicIn: sp:fp - 0x002A bp:fp - 0x0002 di:<invalid> es:ds bx:<invalid> -44(fp):ds -42(fp):es -40(fp):di -38(fp):si -2(fp):bp
// LocalsOut: fp(16) Local -002A(16) Stack +0002(8) Stack +0004(8) Stack +000A(16) Stack +000C(16)

l0800_0C6E:
	word16 ax_110 = wArg0A
	word16 cx_152 = wArg0C
	branch wArg0C >= 0x0000 l0800_0C89
// DataOut: ax bl bx cx di ds es
// DataOut (flags): 
// SymbolicIn: sp:fp - 0x002A bp:fp - 0x0002 di:<invalid> es:ds bx:<invalid> -44(fp):ds -42(fp):es -40(fp):di -38(fp):si -2(fp):bp
// LocalsOut: fp(16) Local -002A(16) Stack +0002(8) Stack +0004(8)

l0800_0C78:
	branch bArg04 == 0x00 l0800_0C89
// DataOut: ax bl bx cx di ds es
// DataOut (flags): 
// SymbolicIn: sp:fp - 0x002A bp:fp - 0x0002 di:<invalid> es:ds bx:<invalid> ax:<invalid> cx:<invalid> -44(fp):ds -42(fp):es -40(fp):di -38(fp):si -2(fp):bp
// LocalsOut: fp(16) Local -002A(16) Stack +0002(8)

l0800_0C7E:
	Mem180[ds:wArg08:byte] = 0x2D
	ax_110 = -wArg0A
	di_126 = wArg08 + 0x0001
	cx_152 = -wArg0C - (ax_110 == 0x0000)
// DataOut: ax bl bx cx di ds es
// DataOut (flags): 
// SymbolicIn: sp:fp - 0x002A bp:fp - 0x0002 di:<invalid> es:ds bx:<invalid> ax:<invalid> cx:<invalid> -44(fp):ds -42(fp):es -40(fp):di -38(fp):si -2(fp):bp
// LocalsOut: fp(16) Local -002A(16) Stack +0002(8)

l0800_0C89:
	word16 si_104 = fp - 0x0024
	branch cx_152 == 0x0000 l0800_0C9D
// DataOut: ax bl bx cx di ds es si
// DataOut (flags): 
// SymbolicIn: sp:fp - 0x002A bp:fp - 0x0002 di:<invalid> es:ds bx:<invalid> ax:<invalid> cx:<invalid> -44(fp):ds -42(fp):es -40(fp):di -38(fp):si -2(fp):bp
// LocalsOut: fp(16) Local -002A(16) Stack +0002(8)

l0800_0C8E:
	word32 dx_ax_159 = (uint32) (uint16) cx_152
	word32 dx_ax_165 = SEQ((uint16) (dx_ax_159 % wArg06), ax_110)
	Mem174[ds:si_104:byte] = (byte) (uint16) (dx_ax_165 % wArg06)
	word16 ax_162 = (uint16) (dx_ax_159 /u wArg06)
	cx_152 = ax_162
	ax_110 = (uint16) (dx_ax_165 /u wArg06)
	si_104 = si_104 + 0x0001
	branch ax_162 == 0x0000 l0800_0CA4
// DataOut: ax bl bx cx di ds es si
// DataOut (flags): 
// SymbolicIn: sp:fp - 0x002A bp:fp - 0x0002 di:<invalid> es:ds bx:<invalid> ax:<invalid> cx:<invalid> si:<invalid> dx:<invalid> -44(fp):ds -42(fp):es -40(fp):di -38(fp):si -36(fp):dl -2(fp):bp
// LocalsOut: fp(16) Local -002A(16) Stack +0002(8)

l0800_0CA4:
	branch ax_110 != 0x0000 l0800_0C9D
// DataOut: ax bl bx di ds es si
// DataOut (flags): 
// SymbolicIn: sp:fp - 0x002A bp:fp - 0x0002 di:<invalid> es:ds bx:<invalid> ax:<invalid> cx:<invalid> si:<invalid> dx:<invalid> -44(fp):ds -42(fp):es -40(fp):di -38(fp):si -36(fp):dl -2(fp):bp
// LocalsOut: fp(16) Local -002A(16) Stack +0002(8)

l0800_0C9D:
	word32 dx_ax_95 = (uint32) (uint16) ax_110
	Mem103[ds:si_104:byte] = (byte) (uint16) (dx_ax_95 % wArg06)
	ax_110 = (uint16) (dx_ax_95 /u wArg06)
	si_104 = si_104 + 0x0001
// DataOut: ax bl bx di ds es si
// DataOut (flags): 
// SymbolicIn: sp:fp - 0x002A bp:fp - 0x0002 di:<invalid> es:ds bx:<invalid> ax:<invalid> cx:<invalid> si:<invalid> dx:<invalid> -44(fp):ds -42(fp):es -40(fp):di -38(fp):si -36(fp):dl -2(fp):bp
// LocalsOut: fp(16) Local -002A(16) Stack +0002(8)

l0800_0CA8:
	word16 cx_120 = 0x0024 - fp + si_104
// DataOut: cx di ds es si
// DataOut (flags): 
// SymbolicIn: sp:fp - 0x002A bp:fp - 0x0002 di:<invalid> es:ds bx:<invalid> ax:<invalid> cx:<invalid> si:<invalid> dx:<invalid> -44(fp):ds -42(fp):es -40(fp):di -38(fp):si -36(fp):dl -2(fp):bp
// LocalsOut: fp(16) Local -002A(16) Stack +0002(8)

l0800_0CB0:
	byte al_138
	si_104 = si_104 - 0x0001
	byte al_130 = Mem0[ds:si_104:byte]
	branch al_130 >=u 0x0A l0800_0CBB
// DataOut: al cx di ds es si
// DataOut (flags): 
// SymbolicIn: sp:fp - 0x002A bp:fp - 0x0002 di:<invalid> es:ds bx:<invalid> ax:<invalid> cx:<invalid> si:<invalid> dx:<invalid> al:<invalid> -44(fp):ds -42(fp):es -40(fp):di -38(fp):si -36(fp):dl -2(fp):bp
// LocalsOut: fp(16) Local -002A(16) Stack +0002(8)

l0800_0CBB:
	al_138 = al_130 - 0x0A + bArg02
// DataOut: al cx di ds es si
// DataOut (flags): 
// SymbolicIn: sp:fp - 0x002A bp:fp - 0x0002 di:<invalid> es:ds bx:<invalid> ax:<invalid> cx:<invalid> si:<invalid> dx:<invalid> al:<invalid> -44(fp):ds -42(fp):es -40(fp):di -38(fp):si -36(fp):dl -2(fp):bp
// LocalsOut: fp(16) Local -002A(16) Stack +0002(8)

l0800_0CB7:
	al_138 = al_130 + 0x30
// DataOut: al cx di ds es si
// DataOut (flags): 
// SymbolicIn: sp:fp - 0x002A bp:fp - 0x0002 di:<invalid> es:ds bx:<invalid> ax:<invalid> cx:<invalid> si:<invalid> dx:<invalid> al:<invalid> -44(fp):ds -42(fp):es -40(fp):di -38(fp):si -36(fp):dl -2(fp):bp
// LocalsOut: fp(16) Local -002A(16) Stack +0002(8)

l0800_0CBE:
	Mem140[ds:di_126:byte] = al_138
	di_126 = di_126 + 0x0001
	cx_120 = cx_120 - 0x0001
	branch cx_120 != 0x0000 l0800_0CB0
// DataOut: cx di ds es si
// DataOut (flags): 
// SymbolicIn: sp:fp - 0x002A bp:fp - 0x0002 di:<invalid> es:ds bx:<invalid> ax:<invalid> cx:<invalid> si:<invalid> dx:<invalid> al:<invalid> -44(fp):ds -42(fp):es -40(fp):di -38(fp):si -36(fp):dl -2(fp):bp
// LocalsOut: fp(16) Local -002A(16) Stack +0002(8)

l0800_0CC1:
	Mem50[ds:di_126:byte] = 0x00
	Mem56[es:di_126 + 0x0001:byte] = 0x00
// DataOut:
// DataOut (flags): 
// SymbolicIn: sp:fp - 0x002A bp:fp - 0x0002 di:<invalid> es:ds bx:<invalid> ax:<invalid> cx:<invalid> si:<invalid> dx:<invalid> al:<invalid> -44(fp):ds -42(fp):es -40(fp):di -38(fp):si -36(fp):dl -2(fp):bp
// LocalsOut: fp(16)

l0800_0CCA:
	return
// DataOut:
// DataOut (flags): 
// SymbolicIn: sp:fp - 0x0026 bp:fp - 0x0002 di:<invalid> es:di bx:<invalid> al:<invalid> ax:<invalid> cx:<invalid> si:<invalid> dx:<invalid> -44(fp):ds -42(fp):es -40(fp):di -38(fp):si -36(fp):dl -2(fp):bp

fn0800_0C53_exit:
// DataOut:
// DataOut (flags): 
// SymbolicIn: sp:fp bp:bp di:si es:di bx:<invalid> al:<invalid> ax:<invalid> si:<invalid> cx:<invalid> dx:<invalid> -44(fp):ds -42(fp):es -40(fp):di -38(fp):si -36(fp):dl -2(fp):bp

l0800_0C9B:
// DataOut: ax bl bx cx di ds es si
// DataOut (flags): 
// SymbolicIn: sp:fp - 0x002A bp:fp - 0x0002 di:<invalid> es:ds bx:<invalid> ax:<invalid> cx:<invalid> si:<invalid> dx:<invalid> -44(fp):ds -42(fp):es -40(fp):di -38(fp):si -36(fp):dl -2(fp):bp
// LocalsOut: fp(16) Local -002A(16) Stack +0002(8)



word16 fn0800_0D5F(selector ds, word16 wArg02)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  ds
// LiveOut: ax
// Trashed: SCZO ah al ax bh bl bx ch cl cx dh dl dx eax ebx ecx edx rax rbx rcx rdx
// Preserved: bp sp
// Stack args: Stack +0002(16)
fn0800_0D5F_entry:
// DataOut: ds si
// DataOut (flags): 
// SymbolicIn: sp:fp
// LocalsOut: fp(16) Local -000A(16) Stack +0002(16)

l0800_0D5F:
	word16 ax_131
	branch (Mem0[ds:(wArg02 << 0x0001) + 0x0482:word16] & 0x0200) == 0x0000 l0800_0D78
// DataOut: ds si
// DataOut (flags): 
// SymbolicIn: sp:fp
// LocalsOut: fp(16) Local -000A(16) Stack +0002(16)

l0800_0D78:
	word16 ax_103 = 0x4400
	word16 dx_52
	branch msdos_ioctl_get_device_info(wArg02, out dx_52) l0800_0DC3
// DataOut: ax bx dl ds si
// DataOut (flags): 
// SymbolicIn: sp:fp - 0x0006 bp:fp - 0x0002 bx:<invalid> -2(fp):bp
// LocalsOut: fp(16) Local -000A(16)

l0800_0D82:
	branch (dl & 0x80) != 0x00 l0800_0DBF
// DataOut: bx ds si
// DataOut (flags): 
// SymbolicIn: sp:fp - 0x0006 bp:fp - 0x0002 bx:<invalid> ax:0x4400 -2(fp):bp
// LocalsOut: fp(16) Local -000A(16)

l0800_0D87:
	ax_103 = 0x4201
	branch msdos_set_file_position(wArg02, 0x00000000, 0x01, 0x00004201) l0800_0DC3
// DataOut: ax bx ds si
// DataOut (flags): 
// SymbolicIn: sp:fp - 0x0006 bp:fp - 0x0002 bx:<invalid> ax:0x4400 -2(fp):bp
// LocalsOut: fp(16) Local -000A(16)

l0800_0D92:
	ax_103 = 0x4202
	branch msdos_set_file_position(wArg02, 0x00000000, 0x02, 0x00004202) l0800_0DC3
// DataOut: ax bx cx ds dx si
// DataOut (flags): 
// SymbolicIn: sp:fp - 0x0006 bp:fp - 0x0002 bx:<invalid> ax:0x4201 cx:0x0000 dx:0x0000 -2(fp):bp
// LocalsOut: fp(16) Local -000A(16)

l0800_0DA7:
	ax_103 = 0x4200
	branch msdos_set_file_position(wArg02, 0x00004201, 0x00, 0x42014200) l0800_0DC3
// DataOut: ax ds si
// DataOut (flags): 
// SymbolicIn: sp:fp - 0x0006 bp:fp - 0x0002 bx:<invalid> ax:0x4202 cx:0x0000 dx:0x4201 -10(fp):0x4201 -8(fp):0x0000 -6(fp):0x4202 -4(fp):0x0000 -2(fp):bp
// LocalsOut: fp(16) Local -000A(16)

l0800_0DC3:
	ax_131 = fn0800_02C5(ds, ax_103)
// DataOut: ax ds si
// DataOut (flags): 
// SymbolicIn: sp:fp - 0x0006 bp:fp - 0x0002 bx:<invalid> ax:<invalid> cx:0x0000 dx:<invalid> -10(fp):0x4201 -8(fp):0x0000 -6(fp):0x4202 -4(fp):0x0000 -2(fp):bp
// LocalsOut: fp(16)

l0800_0DAE:
	branch false l0800_0DBF
// DataOut: ds si
// DataOut (flags): CZ
// SymbolicIn: sp:fp - 0x0006 bp:fp - 0x0002 bx:<invalid> ax:0x4200 cx:0x0000 dx:0x4201 -10(fp):0x4201 -8(fp):0x0000 -6(fp):0x4202 -4(fp):0x0000 -2(fp):bp
// LocalsOut: fp(16)

l0800_0DB3:
	branch false l0800_0DBA
// DataOut: ds si
// DataOut (flags): 
// SymbolicIn: sp:fp - 0x0006 bp:fp - 0x0002 bx:<invalid> ax:0x4200 cx:0x0000 dx:0x4201 -10(fp):0x4201 -8(fp):0x0000 -6(fp):0x4202 -4(fp):0x0000 -2(fp):bp
// LocalsOut: fp(16)

l0800_0DB5:
	branch false l0800_0DBF
// DataOut: ds si
// DataOut (flags): 
// SymbolicIn: sp:fp - 0x0006 bp:fp - 0x0002 bx:<invalid> ax:0x4200 cx:0x0000 dx:0x4201 -10(fp):0x4201 -8(fp):0x0000 -6(fp):0x4202 -4(fp):0x0000 -2(fp):bp
// LocalsOut: fp(16)

l0800_0DBF:
	ax_131 = 0x0000
// DataOut: ax ds si
// DataOut (flags): 
// SymbolicIn: sp:fp - 0x0006 bp:fp - 0x0002 bx:<invalid> ax:<invalid> cx:0x0000 dx:0x4201 -10(fp):0x4201 -8(fp):0x0000 -6(fp):0x4202 -4(fp):0x0000 -2(fp):bp
// LocalsOut: fp(16)

l0800_0DBA:
	ax_131 = 0x0001
// DataOut: ax ds si
// DataOut (flags): 
// SymbolicIn: sp:fp - 0x0006 bp:fp - 0x0002 bx:<invalid> ax:0x4200 cx:0x0000 dx:0x4201 -10(fp):0x4201 -8(fp):0x0000 -6(fp):0x4202 -4(fp):0x0000 -2(fp):bp
// LocalsOut: fp(16)

l0800_0D72:
	ax_131 = 0x0001
// DataOut: ax ds si
// DataOut (flags): 
// SymbolicIn: sp:fp - 0x0006 bp:fp - 0x0002 bx:<invalid> -2(fp):bp
// LocalsOut: fp(16)

l0800_0DC9:
	return ax_131
// DataOut: ax ds si
// DataOut (flags): 
// SymbolicIn: sp:fp - 0x0006 bp:fp - 0x0002 bx:<invalid> ax:<invalid> cx:0x0000 dx:<invalid> al:0xFF -10(fp):0x4201 -8(fp):<invalid> -6(fp):0x4202 -4(fp):0x0000 -2(fp):bp

fn0800_0D5F_exit:
// DataOut: ax
// DataOut (flags): 
// SymbolicIn: sp:fp bp:bp bx:<invalid> ax:<invalid> cx:0x0000 dx:<invalid> al:0xFF -10(fp):0x4201 -8(fp):<invalid> -6(fp):0x4202 -4(fp):0x0000 -2(fp):bp



word16 fn0800_0DCD(selector ds, word16 wArg02)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  ds
// LiveOut: ax
// Trashed: SCZO ah al ax bh bl bx ch cl cx dh dl dx eax ebx ecx edx rax rbx rcx rdx
// Preserved: bp di si sp
// Stack args: Stack +0002(16)
fn0800_0DCD_entry:
// DataOut: ds
// DataOut (flags): 
// SymbolicIn: sp:fp
// LocalsOut: fp(16) Stack +0002(16)

l0800_0DCD:
	word16 ax_102
	branch Mem0[ds:wArg02 + 0x000E:word16] == wArg02 l0800_0DE1
// DataOut: ds si
// DataOut (flags): 
// SymbolicIn: sp:fp
// LocalsOut: fp(16)

l0800_0DE1:
	branch Mem0[ds:wArg02:word16] < 0x0000 l0800_0E13
// DataOut: ds si
// DataOut (flags): 
// SymbolicIn: sp:fp - 0x0006 bp:fp - 0x0002 si:<invalid> ax:<invalid> -6(fp):di -4(fp):si -2(fp):bp
// LocalsOut: fp(16)

l0800_0E13:
	word16 di_71 = Mem0[ds:wArg02 + 0x0006:word16] + Mem0[ds:wArg02:word16]
	Mem74[ds:wArg02:word16] = Mem0[ds:wArg02:word16] - (di_71 + 0x0001)
	word16 ax_78 = Mem74[ds:wArg02 + 0x0008:word16]
	Mem79[ds:wArg02 + 0x000A:word16] = ax_78
	branch fn0800_0ACF(ds, (int16) Mem79[ds:wArg02 + 0x0004:byte], ax_78, di_71 + 0x0001) == di_71 + 0x0001 l0800_0E43
// DataOut: ds si
// DataOut (flags): 
// SymbolicIn: sp:fp - 0x0006 bp:fp - 0x0002 si:<invalid> ax:<invalid> -6(fp):di -4(fp):si -2(fp):bp
// LocalsOut: fp(16)

l0800_0E32:
	branch (Mem79[ds:wArg02 + 0x0002:word16] & 0x0200) != 0x0000 l0800_0E43
// DataOut: ds si
// DataOut (flags): 
// SymbolicIn: sp:fp - 0x0006 bp:fp - 0x0002 si:<invalid> ax:<invalid> di:<invalid> al:<invalid> bx:<invalid> ah:<invalid> cx:<invalid> dx:<invalid> -12(fp):<invalid> -10(fp):<invalid> -8(fp):<invalid> -6(fp):di -4(fp):si -2(fp):bp
// LocalsOut: fp(16)

l0800_0E43:
	ax_102 = 0x0000
// DataOut: ax ds
// DataOut (flags): 
// SymbolicIn: sp:fp - 0x0006 bp:fp - 0x0002 si:<invalid> ax:<invalid> di:<invalid> al:<invalid> bx:<invalid> ah:<invalid> cx:<invalid> dx:<invalid> -12(fp):<invalid> -10(fp):<invalid> -8(fp):<invalid> -6(fp):di -4(fp):si -2(fp):bp
// LocalsOut: fp(16)

l0800_0E39:
	Mem99[ds:wArg02 + 0x0002:word16] = Mem79[ds:wArg02 + 0x0002:word16] | 0x0010
	ax_102 = 0xFFFF
// DataOut: ax ds
// DataOut (flags): 
// SymbolicIn: sp:fp - 0x0006 bp:fp - 0x0002 si:<invalid> ax:<invalid> di:<invalid> al:<invalid> bx:<invalid> ah:<invalid> cx:<invalid> dx:<invalid> -12(fp):<invalid> -10(fp):<invalid> -8(fp):<invalid> -6(fp):di -4(fp):si -2(fp):bp
// LocalsOut: fp(16)

l0800_0DE6:
	branch (Mem0[ds:wArg02 + 0x0002:word16] & 0x0008) != 0x0000 l0800_0DF9
// DataOut: ds si
// DataOut (flags): 
// SymbolicIn: sp:fp - 0x0006 bp:fp - 0x0002 si:<invalid> ax:<invalid> -6(fp):di -4(fp):si -2(fp):bp
// LocalsOut: fp(16)

l0800_0DED:
	branch Mem0[ds:wArg02 + 0x000A:word16] != wArg02 + 0x0005 l0800_0E0F
// DataOut: ds si
// DataOut (flags): 
// SymbolicIn: sp:fp - 0x0006 bp:fp - 0x0002 si:<invalid> ax:<invalid> -6(fp):di -4(fp):si -2(fp):bp
// LocalsOut: fp(16)

l0800_0DF9:
	Mem57[ds:wArg02:word16] = 0x0000
	branch Mem57[ds:wArg02 + 0x000A:word16] != wArg02 + 0x0005 l0800_0E0F
// DataOut: ds si
// DataOut (flags): 
// SymbolicIn: sp:fp - 0x0006 bp:fp - 0x0002 si:<invalid> ax:<invalid> dx:<invalid> -6(fp):di -4(fp):si -2(fp):bp
// LocalsOut: fp(16)

l0800_0E09:
	Mem64[ds:wArg02 + 0x000A:word16] = Mem57[ds:wArg02 + 0x0008:word16]
// DataOut: ds
// DataOut (flags): 
// SymbolicIn: sp:fp - 0x0006 bp:fp - 0x0002 si:<invalid> ax:<invalid> dx:<invalid> -6(fp):di -4(fp):si -2(fp):bp
// LocalsOut: fp(16)

l0800_0E0F:
	ax_102 = 0x0000
// DataOut: ax ds
// DataOut (flags): 
// SymbolicIn: sp:fp - 0x0006 bp:fp - 0x0002 si:<invalid> ax:<invalid> dx:<invalid> -6(fp):di -4(fp):si -2(fp):bp
// LocalsOut: fp(16)

l0800_0DDC:
	ax_102 = 0xFFFF
// DataOut: ax ds
// DataOut (flags): 
// SymbolicIn: sp:fp - 0x0006 bp:fp - 0x0002 si:<invalid> ax:<invalid> -6(fp):di -4(fp):si -2(fp):bp
// LocalsOut: fp(16)

l0800_0E47:
	return ax_102
// DataOut: ax ds
// DataOut (flags): 
// SymbolicIn: sp:fp - 0x0006 bp:fp - 0x0002 si:<invalid> ax:<invalid> di:<invalid> al:<invalid> dx:<invalid> bx:<invalid> ah:<invalid> cx:<invalid> -12(fp):<invalid> -10(fp):<invalid> -8(fp):<invalid> -6(fp):di -4(fp):si -2(fp):bp

fn0800_0DCD_exit:
// DataOut: ax
// DataOut (flags): 
// SymbolicIn: sp:fp bp:bp si:si ax:<invalid> di:di al:<invalid> dx:<invalid> bx:<invalid> ah:<invalid> cx:<invalid> -12(fp):<invalid> -10(fp):<invalid> -8(fp):<invalid> -6(fp):di -4(fp):si -2(fp):bp



word16 fn0800_0E4B(selector ds, word16 wArg02, ptr16 & bpOut, ptr16 & diOut)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  ds ss
// LiveOut: bp bx di sp
// Trashed: SCZDO ah al ax bh bl bp bpl bx ch cl cx dh di dil dl dx eax ebp ebx ecx edi edx es esi esp rax rbp rbx rcx rdi rdx rsi rsp si sil sp spl
// Preserved:
fn0800_0E4B_entry:
// DataOut: ds ss
// DataOut (flags): 
// SymbolicIn: sp:fp
// LocalsOut: fp(16)

l0800_0E4B:
	word16 di_20
	word16 bx_21 = fn0800_1073(ds, out di_20)
// DataOut: bx di ds sp ss
// DataOut (flags): 
// SymbolicIn: sp:fp

l0800_0E62:
	word16 bp_25
	*bpOut = Mem0[ss:fp - 0x000C:word16]
	return bx_21
// DataOut: bp bx di ds sp ss
// DataOut (flags): 
// SymbolicIn: sp:<invalid> bp:<invalid> ax:<invalid> di:<invalid> si:<invalid> al:<invalid> es:<invalid> cx:0x0000 ah:<invalid> dx:<invalid> bx:<invalid> bl:<invalid> -10(fp):fp + 0x0004 -8(fp):<invalid> -6(fp):0x0352 -4(fp):0x0F81 -2(fp):bp

fn0800_0E4B_exit:
// DataOut: bp bx di sp
// DataOut (flags): 
// SymbolicIn: sp:<invalid> bp:<invalid> ax:<invalid> di:<invalid> si:<invalid> al:<invalid> es:<invalid> cx:0x0000 ah:<invalid> dx:<invalid> bx:<invalid> bl:<invalid> -10(fp):fp + 0x0004 -8(fp):<invalid> -6(fp):0x0352 -4(fp):0x0F81 -2(fp):bp



void fn0800_0E64(selector ds, byte bArg02, word16 wArg04)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  ds
// LiveOut:
// Trashed: SCZO ah al ax bh bl bx ch cl cx dh dl dx eax ebx ecx edx rax rbx rcx rdx
// Preserved: bp sp
// Stack args: Stack +0002(8) Stack +0004(16)
fn0800_0E64_entry:
// DataOut: ds
// DataOut (flags): 
// SymbolicIn: sp:fp
// LocalsOut: fp(16) Stack +0002(8) Stack +0004(16)

l0800_0E64:
	Mem11[ds:wArg04:word16] = Mem0[ds:wArg04:word16] - 0x0001
	fn0800_0E7D(ds, (byte) (int16) bArg02, wArg04)
// DataOut:
// DataOut (flags): 
// SymbolicIn: sp:fp

l0800_0E7B:
	return
// DataOut:
// DataOut (flags): 
// SymbolicIn: sp:fp - 0x0002 bp:fp - 0x0002 bx:<invalid> al:<invalid> ax:<invalid> ah:<invalid> cx:<invalid> dx:<invalid> -6(fp):<invalid> -4(fp):<invalid> -2(fp):bp

fn0800_0E64_exit:
// DataOut:
// DataOut (flags): 
// SymbolicIn: sp:fp bp:bp bx:<invalid> al:<invalid> ax:<invalid> ah:<invalid> cx:<invalid> dx:<invalid> -6(fp):<invalid> -4(fp):<invalid> -2(fp):bp



void fn0800_0E7D(selector ds, byte bArg02, word16 wArg04)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  ds
// LiveOut:
// Trashed: SCZO ah al ax bh bl bx ch cl cx dh dl dx eax ebx ecx edx rax rbx rcx rdx
// Preserved: bp si sp
// Stack args: Stack +0002(8) Stack +0004(16)
fn0800_0E7D_entry:
// DataOut: ds
// DataOut (flags): 
// SymbolicIn: sp:fp
// LocalsOut: fp(16) Local -000A(16) Stack +0002(8) Stack +0004(16)

l0800_0E7D:
// DataOut: ds si
// DataOut (flags): 
// SymbolicIn: sp:fp
// LocalsOut: fp(16) Local -0003(8) Local -000A(16)

l0800_0E8D:
	word16 v9_30 = Mem0[ds:wArg04:word16] + 0x0001
	Mem31[ds:wArg04:word16] = v9_30
	branch v9_30 >= 0x0000 l0800_0EC7
// DataOut: ds si
// DataOut (flags): 
// SymbolicIn: sp:fp - 0x0006 bp:fp - 0x0002 si:<invalid> al:<invalid> ax:<invalid> dx:<invalid> cx:<invalid> bx:<invalid> ah:<invalid> -8(fp):<invalid> -6(fp):si -3(fp):<invalid> -2(fp):bp
// LocalsOut: fp(16) Local -0003(8) Local -000A(16)

l0800_0EC7:
	Mem87[ds:wArg04:word16] = Mem31[ds:wArg04:word16] - 0x0001
	branch (Mem87[ds:wArg04 + 0x0002:word16] & 0x0090) != 0x0000 l0800_0ED7
// DataOut: ds si
// DataOut (flags): 
// SymbolicIn: sp:fp - 0x0006 bp:fp - 0x0002 si:<invalid> al:<invalid> ax:<invalid> dx:<invalid> cx:<invalid> bx:<invalid> ah:<invalid> -8(fp):<invalid> -6(fp):si -3(fp):<invalid> -2(fp):bp
// LocalsOut: fp(16) Local -0003(0) Local -000A(16)

l0800_0ED0:
	branch (Mem87[ds:wArg04 + 0x0002:word16] & 0x0002) != 0x0000 l0800_0EE2
// DataOut: ds si
// DataOut (flags): 
// SymbolicIn: sp:fp - 0x0006 bp:fp - 0x0002 si:<invalid> al:<invalid> ax:<invalid> dx:<invalid> cx:<invalid> bx:<invalid> ah:<invalid> -8(fp):<invalid> -6(fp):si -3(fp):<invalid> -2(fp):bp
// LocalsOut: fp(16) Local -0003(0) Local -000A(16)

l0800_0EE2:
	Mem102[ds:wArg04 + 0x0002:word16] = Mem87[ds:wArg04 + 0x0002:word16] | 0x0100
	branch Mem102[ds:wArg04 + 0x0006:word16] == 0x0000 l0800_0F11
// DataOut: ds si
// DataOut (flags): 
// SymbolicIn: sp:fp - 0x0006 bp:fp - 0x0002 si:<invalid> al:<invalid> ax:<invalid> dx:<invalid> cx:<invalid> bx:<invalid> ah:<invalid> -8(fp):<invalid> -6(fp):si -3(fp):<invalid> -2(fp):bp
// LocalsOut: fp(16) Local -0003(0) Local -000A(16)

l0800_0F11:
	branch bArg02 != 0x0A l0800_0F36
// DataOut: ds si
// DataOut (flags): 
// SymbolicIn: sp:fp - 0x0006 bp:fp - 0x0002 si:<invalid> al:<invalid> ax:<invalid> dx:<invalid> cx:<invalid> bx:<invalid> ah:<invalid> -8(fp):<invalid> -6(fp):si -3(fp):<invalid> -2(fp):bp
// LocalsOut: fp(16) Local -0003(8)

l0800_0F17:
	branch (Mem102[ds:wArg04 + 0x0002:word16] & 0x0040) != 0x0000 l0800_0F36
// DataOut: ds si
// DataOut (flags): 
// SymbolicIn: sp:fp - 0x0006 bp:fp - 0x0002 si:<invalid> al:<invalid> ax:<invalid> dx:<invalid> cx:<invalid> bx:<invalid> ah:<invalid> -8(fp):<invalid> -6(fp):si -3(fp):<invalid> -2(fp):bp
// LocalsOut: fp(16) Local -0003(8)

l0800_0F1E:
	word16 ax_178 = (int16) Mem102[ds:wArg04 + 0x0004:byte]
	branch fn0800_0BE2((byte) ax_178, ds, ax_178, 0x04E0, 0x0001) != 0x0001 l0800_0F4E
// DataOut: ds si
// DataOut (flags): 
// SymbolicIn: sp:fp - 0x0006 bp:fp - 0x0002 si:<invalid> al:<invalid> ax:<invalid> dx:<invalid> cx:<invalid> bx:<invalid> ah:<invalid> -8(fp):<invalid> -6(fp):si -3(fp):<invalid> -2(fp):bp
// LocalsOut: fp(16) Local -0003(8)

l0800_0F36:
	word16 ax_160 = (int16) Mem102[ds:wArg04 + 0x0004:byte]
	branch fn0800_0BE2((byte) ax_160, ds, ax_160, fp + 0x0002, 0x0001) == 0x0001 l0800_0F5F
// DataOut: ds si
// DataOut (flags): 
// SymbolicIn: sp:fp - 0x0006 bp:fp - 0x0002 si:<invalid> al:<invalid> ax:<invalid> bx:<invalid> ah:<invalid> cx:<invalid> dx:<invalid> -12(fp):<invalid> -10(fp):0x04E0 -8(fp):<invalid> -6(fp):si -3(fp):<invalid> -2(fp):bp
// LocalsOut: fp(16) Local -0003(8)

l0800_0F4E:
	branch (Mem102[ds:wArg04 + 0x0002:word16] & 0x0200) != 0x0000 l0800_0F5F
// DataOut: ds si
// DataOut (flags): 
// SymbolicIn: sp:fp - 0x0006 bp:fp - 0x0002 si:<invalid> al:<invalid> ax:<invalid> bx:<invalid> ah:<invalid> cx:<invalid> dx:<invalid> -12(fp):<invalid> -10(fp):<invalid> -8(fp):0x0001 -6(fp):si -3(fp):<invalid> -2(fp):bp
// LocalsOut: fp(16) Local -0003(8)

l0800_0F5F:
// DataOut:
// DataOut (flags): 
// SymbolicIn: sp:fp - 0x0006 bp:fp - 0x0002 si:<invalid> al:<invalid> ax:<invalid> bx:<invalid> ah:<invalid> cx:<invalid> dx:<invalid> -12(fp):<invalid> -10(fp):<invalid> -8(fp):0x0001 -6(fp):si -3(fp):<invalid> -2(fp):bp
// LocalsOut: fp(16)

l0800_0F55:
	Mem147[ds:wArg04 + 0x0002:word16] = Mem102[ds:wArg04 + 0x0002:word16] | 0x0010
// DataOut:
// DataOut (flags): 
// SymbolicIn: sp:fp - 0x0006 bp:fp - 0x0002 si:<invalid> al:<invalid> ax:<invalid> bx:<invalid> ah:<invalid> cx:<invalid> dx:<invalid> -12(fp):<invalid> -10(fp):<invalid> -8(fp):0x0001 -6(fp):si -3(fp):<invalid> -2(fp):bp
// LocalsOut: fp(16)

l0800_0EED:
	branch Mem102[ds:wArg04:word16] == 0x0000 l0800_0F02
// DataOut: ds si
// DataOut (flags): 
// SymbolicIn: sp:fp - 0x0006 bp:fp - 0x0002 si:<invalid> al:<invalid> ax:<invalid> dx:<invalid> cx:<invalid> bx:<invalid> ah:<invalid> -8(fp):<invalid> -6(fp):si -3(fp):<invalid> -2(fp):bp
// LocalsOut: fp(16) Local -0003(8) Local -000A(16)

l0800_0F02:
	Mem122[ds:wArg04:word16] = 0xFFFF - Mem102[ds:wArg04 + 0x0006:word16]
// DataOut:
// DataOut (flags): 
// SymbolicIn: sp:fp - 0x0006 bp:fp - 0x0002 si:<invalid> al:<invalid> ax:<invalid> dx:<invalid> cx:<invalid> bx:<invalid> ah:<invalid> -8(fp):<invalid> -6(fp):si -3(fp):<invalid> -2(fp):bp

l0800_0EF2:
	branch fn0800_0DCD(ds, wArg04) == 0x0000 l0800_0F00
// DataOut: ds si
// DataOut (flags): 
// SymbolicIn: sp:fp - 0x0006 bp:fp - 0x0002 si:<invalid> al:<invalid> ax:<invalid> dx:<invalid> cx:<invalid> bx:<invalid> ah:<invalid> -8(fp):<invalid> -6(fp):si -3(fp):<invalid> -2(fp):bp
// LocalsOut: fp(16) Local -0003(8) Local -000A(16)

l0800_0F00:
// DataOut: ds si
// DataOut (flags): 
// SymbolicIn: sp:fp - 0x0006 bp:fp - 0x0002 si:<invalid> al:<invalid> ax:<invalid> dx:<invalid> cx:<invalid> bx:<invalid> ah:<invalid> -8(fp):<invalid> -6(fp):si -3(fp):<invalid> -2(fp):bp
// LocalsOut: fp(16) Local -0003(8) Local -000A(16)

l0800_0F0C:
// DataOut: ds si
// DataOut (flags): 
// SymbolicIn: sp:fp - 0x0006 bp:fp - 0x0002 si:<invalid> al:<invalid> ax:<invalid> dx:<invalid> cx:<invalid> bx:<invalid> ah:<invalid> -8(fp):<invalid> -6(fp):si -3(fp):<invalid> -2(fp):bp
// LocalsOut: fp(16) Local -0003(8) Local -000A(16)

l0800_0EFB:
// DataOut:
// DataOut (flags): 
// SymbolicIn: sp:fp - 0x0006 bp:fp - 0x0002 si:<invalid> al:<invalid> ax:<invalid> dx:<invalid> cx:<invalid> bx:<invalid> ah:<invalid> -8(fp):<invalid> -6(fp):si -3(fp):<invalid> -2(fp):bp
// LocalsOut: fp(16)

l0800_0ED7:
	Mem93[ds:wArg04 + 0x0002:word16] = Mem87[ds:wArg04 + 0x0002:word16] | 0x0010
// DataOut:
// DataOut (flags): 
// SymbolicIn: sp:fp - 0x0006 bp:fp - 0x0002 si:<invalid> al:<invalid> ax:<invalid> dx:<invalid> cx:<invalid> bx:<invalid> ah:<invalid> -8(fp):<invalid> -6(fp):si -3(fp):<invalid> -2(fp):bp
// LocalsOut: fp(16)

l0800_0E91:
	Mem52[ds:wArg04 + 0x000A:word16] = Mem31[ds:wArg04 + 0x000A:word16] + 0x0001
	Mem54[ds:Mem52[ds:wArg04 + 0x000A:word16] - 0x0001:byte] = bArg02
	branch (Mem54[ds:wArg04 + 0x0002:word16] & 0x0008) == 0x0000 l0800_0EBF
// DataOut: ds si
// DataOut (flags): 
// SymbolicIn: sp:fp - 0x0006 bp:fp - 0x0002 si:<invalid> al:<invalid> ax:<invalid> dx:<invalid> cx:<invalid> bx:<invalid> ah:<invalid> -8(fp):<invalid> -6(fp):si -3(fp):<invalid> -2(fp):bp
// LocalsOut: fp(16) Local -0003(8) Local -000A(16)

l0800_0EA4:
	branch bArg02 == 0x0A l0800_0EB0
// DataOut: ds si
// DataOut (flags): 
// SymbolicIn: sp:fp - 0x0006 bp:fp - 0x0002 si:<invalid> al:<invalid> bx:<invalid> ax:<invalid> dx:<invalid> cx:<invalid> ah:<invalid> -8(fp):<invalid> -6(fp):si -3(fp):<invalid> -2(fp):bp
// LocalsOut: fp(16) Local -0003(8) Local -000A(16)

l0800_0EAA:
	branch bArg02 != 0x0D l0800_0EBF
// DataOut: ds si
// DataOut (flags): 
// SymbolicIn: sp:fp - 0x0006 bp:fp - 0x0002 si:<invalid> al:<invalid> bx:<invalid> ax:<invalid> dx:<invalid> cx:<invalid> ah:<invalid> -8(fp):<invalid> -6(fp):si -3(fp):<invalid> -2(fp):bp
// LocalsOut: fp(16) Local -0003(8) Local -000A(16)

l0800_0EB0:
	branch fn0800_0DCD(ds, wArg04) == 0x0000 l0800_0EBF
// DataOut:
// DataOut (flags): 
// SymbolicIn: sp:fp - 0x0006 bp:fp - 0x0002 si:<invalid> al:<invalid> bx:<invalid> ax:<invalid> dx:<invalid> cx:<invalid> ah:<invalid> -8(fp):<invalid> -6(fp):si -3(fp):<invalid> -2(fp):bp
// LocalsOut: fp(16) Local -0003(8)

l0800_0EBF:
// DataOut:
// DataOut (flags): 
// SymbolicIn: sp:fp - 0x0006 bp:fp - 0x0002 si:<invalid> al:<invalid> bx:<invalid> ax:<invalid> cx:<invalid> dx:<invalid> ah:<invalid> -8(fp):<invalid> -6(fp):si -3(fp):<invalid> -2(fp):bp
// LocalsOut: fp(16)

l0800_0EB9:
// DataOut:
// DataOut (flags): 
// SymbolicIn: sp:fp - 0x0006 bp:fp - 0x0002 si:<invalid> al:<invalid> bx:<invalid> ax:<invalid> cx:<invalid> dx:<invalid> ah:<invalid> -8(fp):<invalid> -6(fp):si -3(fp):<invalid> -2(fp):bp
// LocalsOut: fp(16)

l0800_0F66:
	return
// DataOut:
// DataOut (flags): 
// SymbolicIn: sp:fp - 0x0006 bp:fp - 0x0002 si:<invalid> al:<invalid> bx:<invalid> ah:<invalid> ax:<invalid> cx:<invalid> dx:<invalid> -12(fp):<invalid> -10(fp):<invalid> -8(fp):<invalid> -6(fp):si -3(fp):<invalid> -2(fp):bp

fn0800_0E7D_exit:
// DataOut:
// DataOut (flags): 
// SymbolicIn: sp:fp bp:bp si:si al:<invalid> bx:<invalid> ah:<invalid> ax:<invalid> cx:<invalid> dx:<invalid> -12(fp):<invalid> -10(fp):<invalid> -8(fp):<invalid> -6(fp):si -3(fp):<invalid> -2(fp):bp



void fn0800_1044()
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse: 
// LiveOut:
// Trashed: esp rsp sp spl
// Preserved:
fn0800_1044_entry:
// DataOut:
// DataOut (flags): 
// SymbolicIn: sp:fp

l0800_1044:
	word16 sp_4
	selector ds_5
	call Mem0[ds:0x05E0:word16] (retsize: 4; depth: 4)
		uses: ds,sp_1
		defs: ds_5,sp_4
	return
// DataOut:
// DataOut (flags): 
// SymbolicIn: sp:fp

fn0800_1044_exit:
// DataOut:
// DataOut (flags): 
// SymbolicIn: sp:<invalid>



void fn0800_1048(word16 di, selector es, selector ds, word16 wArg02)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  di ds es
// LiveOut:
// Trashed: SCZDO al ax bh bl bx ch cl cx dh di dil dl dx eax ebx ecx edi edx rax rbx rcx rdi rdx
// Preserved: bp sp
// Stack args: Stack +0002(16)
fn0800_1048_entry:
// DataOut: di ds es
// DataOut (flags): 
// SymbolicIn: sp:fp
// LocalsOut: fp(16) Stack +0002(16)

l0800_1048:
	byte dh_8 = SLICE(wArg02, byte, 8)
	Mem20[es:di:byte] = Mem0[ds:(uint16) (dh_8 >>u 0x04) + 0x04E9:byte]
	Mem27[es:di + 0x0001:byte] = Mem20[ds:(uint16) (dh_8 & 0x0F) + 0x04E9:byte]
	byte dl_9 = (byte) wArg02
	Mem32[es:di + 0x0002:byte] = Mem27[ds:(uint16) (dl_9 >>u 0x04) + 0x04E9:byte]
	Mem39[es:di + 0x0003:byte] = Mem32[ds:(uint16) (dl_9 & 0x0F) + 0x04E9:byte]
// DataOut:
// DataOut (flags): 
// SymbolicIn: sp:fp

l0800_106F:
	return
// DataOut:
// DataOut (flags): 
// SymbolicIn: sp:fp - 0x0002 bp:fp - 0x0002 dx:<invalid> cx:0x0F04 bx:0x04E9 al:<invalid> di:di + 0x000F -2(fp):bp

fn0800_1048_exit:
// DataOut:
// DataOut (flags): 
// SymbolicIn: sp:fp bp:bp dx:<invalid> cx:0x0F04 bx:0x04E9 al:<invalid> di:di + 0x000F -2(fp):bp



word16 fn0800_1073(selector ds, ptr16 & diOut)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  ds ss
// LiveOut: bx di sp
// Trashed: SCZDO ah al ax bh bl bp bpl bx ch cl cx dh di dil dl dx eax ebp ebx ecx edi edx es esi esp rax rbp rbx rcx rdi rdx rsi rsp si sil sp spl
// Preserved:
fn0800_1073_entry:
// DataOut: ds ss
// DataOut (flags): 
// SymbolicIn: sp:fp
// LocalsOut: fp(16)

l0800_1073:
// DataOut: bp ds ss
// DataOut (flags): 
// SymbolicIn: sp:fp

l0800_108A_thunk_fn0800_10CD:
	word16 di_18
	return fn0800_10CD(fp - 0x0002, ds, out di_18)
// DataOut: bx di ds sp ss
// DataOut (flags): 
// SymbolicIn: sp:fp - 0x009E bp:fp - 0x0002 -158(fp):di -156(fp):si -90(fp):0x0000 -87(fp):0x50 -4(fp):0x0000 -2(fp):bp

fn0800_1073_exit:
// DataOut: bx di sp
// DataOut (flags): 
// SymbolicIn: sp:<invalid> bp:<invalid> di:<invalid> si:<invalid> al:<invalid> ax:<invalid> es:<invalid> cx:0x0000 ah:<invalid> dx:<invalid> bx:<invalid> bl:<invalid> -158(fp):di -156(fp):si -90(fp):0x0000 -87(fp):0x50 -4(fp):0x0000 -2(fp):bp



void fn0800_108C(word16 di, selector es)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  di es
// LiveOut:
// Trashed: SCZO al ax ch cl cx eax ecx rax rcx
// Preserved: di sp
fn0800_108C_entry:
// DataOut: di es
// DataOut (flags): 
// SymbolicIn: sp:fp
// LocalsOut: fp(16)

l0800_108C:
	word16 cx_13 = 0xFFFF
// DataOut: cx di es
// DataOut (flags): 
// SymbolicIn: sp:fp

l0800_1092:
	branch cx_13 == 0x0000 l0800_1094
// DataOut: cx di es
// DataOut (flags): 
// SymbolicIn: sp:fp - 0x0002 cx:<invalid> al:0x00 di:<invalid> -2(fp):di

l0800_1092_1:
	di = di_29 + 0x0001
	cx_13 = cx_13 - 0x0001
	word16 di_29 = di
	branch 0x00 != Mem0[es:di_29:byte] l0800_1092
// DataOut: cx di es
// DataOut (flags): 
// SymbolicIn: sp:fp - 0x0002 cx:<invalid> al:0x00 di:<invalid> -2(fp):di

l0800_1094:
	return
// DataOut:
// DataOut (flags): 
// SymbolicIn: sp:fp - 0x0002 cx:<invalid> al:0x00 di:<invalid> -2(fp):di

fn0800_108C_exit:
// DataOut:
// DataOut (flags): 
// SymbolicIn: sp:fp cx:<invalid> al:0x00 di:di -2(fp):di



word16 fn0800_1099(byte al, word16 bp, word16 di, selector ds)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  al bp di ds ss
// LiveOut: di
// Trashed: SZO di dil edi rdi
// Preserved: sp
fn0800_1099_entry:
// DataOut: al bp bx di ds si ss
// DataOut (flags): 
// SymbolicIn: sp:fp

l0800_1099:
	Mem3[ds:di:byte] = al
	byte v9_9 = Mem3[ss:bp - 0x0055:byte] - 0x01
	Mem10[ss:bp - 0x0055:byte] = v9_9
	branch v9_9 <= 0x00 l0800_10CC_in_fn0800_1099
// DataOut: bp bx di ds si ss
// DataOut (flags): 
// SymbolicIn: sp:fp

l0800_10CC_in_fn0800_1099:
	return di + 0x0001
// DataOut: bp bx di ds si ss
// DataOut (flags): 
// SymbolicIn: sp:fp di:di + 0x0001

l0800_109F_thunk_fn0800_10A1:
	fn0800_10A1(bp, di + 0x0001)
	return di + 0x0001
// DataOut: bp bx di ds si ss
// DataOut (flags): 
// SymbolicIn: sp:fp di:di + 0x0001
// Terminates process

l0800_109F_thunk_fn0800_10A1:
	fn0800_10A1(bp, di + 0x0001)
	return di + 0x0001
// DataOut: bp bx di ds si ss
// DataOut (flags): 
// SymbolicIn:
// Terminates process

fn0800_1099_exit:
// DataOut: di
// DataOut (flags): 
// SymbolicIn: sp:fp di:di + 0x0001



void fn0800_10A1(word16 bp, word16 di)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  bp di ss
// LiveOut:
// Trashed:
// Preserved:
// Terminates process
fn0800_10A1_exit:
// DataOut:
// DataOut (flags): 
// SymbolicIn:

fn0800_10A1_entry:
// DataOut: bp di ss
// DataOut (flags): 
// SymbolicIn: sp:fp
// LocalsOut: fp(16)

l0800_10A1:
	word16 sp_30
	word16 bx_31
	selector ss_32
	word16 cx_33
	word16 dx_34
	selector es_35
	word16 bp_36
	word16 ax_37
	word16 di_38
	byte SCZO_39
	selector cs_40
	byte SZO_41
	byte C_42
	byte Z_43
	call SEQ(cs, Mem0[ss:bp + 0x000A:word16]) (retsize: 2; depth: 16)
		uses: ax_19,bp,bx,cs,cx,di_17,dx,es,SCZO_18,sp_27,ss,wLoc02_4,wLoc04_7,wLoc06_10,wLoc08_13,wLoc0A_21,wLoc0C_23,wLoc0E_28
		defs: ax_37,bp_36,bx_31,C_42,cs_40,cx_33,di_38,dx_34,es_35,SCZO_39,sp_30,ss_32,SZO_41,Z_43
	branch ax_37 != 0x0000 l0800_10BE
// DataOut: bp di sp ss
// DataOut (flags): 
// SymbolicIn: sp:fp

l0800_10B9:
	Mem61[ss_32:bp_36 - 0x0002:word16] = 0x0001
// DataOut: bp di sp ss
// DataOut (flags): 
// SymbolicIn: sp:<invalid> ax:<invalid> di:di - (bp - 0x0054) -14(fp):<invalid> -12(fp):di - (bp - 0x0054) -10(fp):bp - 0x0054 -8(fp):es -6(fp):dx -4(fp):cx -2(fp):bx

l0800_10BE:
	Mem48[ss_32:bp_36 - 0x0055:byte] = 0x50
	Mem50[ss_32:bp_36 - 0x0058:word16] = Mem48[ss_32:bp_36 - 0x0058:word16] + di_38
// DataOut:
// DataOut (flags): 
// SymbolicIn: sp:<invalid> ax:<invalid> di:di - (bp - 0x0054) -14(fp):<invalid> -12(fp):di - (bp - 0x0054) -10(fp):bp - 0x0054 -8(fp):es -6(fp):dx -4(fp):cx -2(fp):bx

l0800_10CC:
	return
// DataOut:
// DataOut (flags): 
// SymbolicIn: sp:<invalid> ax:<invalid> di:bp - 0x0054 es:<invalid> dx:<invalid> cx:<invalid> bx:<invalid> -14(fp):<invalid> -12(fp):di - (bp - 0x0054) -10(fp):bp - 0x0054 -8(fp):es -6(fp):dx -4(fp):cx -2(fp):bx



word16 fn0800_10CD(word16 bp, selector ds, ptr16 & diOut)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  bp ds ss
// LiveOut: bx di sp
// Trashed: SCZDO ah al ax bh bl bp bpl bx ch cl cx dh di dil dl dx eax ebp ebx ecx edi edx es esi esp rax rbp rbx rcx rdi rdx rsi rsp si sil sp spl
// Preserved: es
l0800_10CD:
// DataOut: bx di ds sp ss
// DataOut (flags): 
// SymbolicIn:

fn0800_10CD_entry:
// DataOut: bp bx ds ss
// DataOut (flags): 
// SymbolicIn: sp:fp
// LocalsOut: fp(16)

l0800_10CD:
	Mem8[ss:bp - 0x0096:word16] = bp - 0x0054
	word16 sp_119 = fp - 0x0002
	word16 di_10 = Mem8[ss:bp - 0x0096:word16]
	word16 si_11 = Mem8[ss:bp + 0x0006:word16]
// DataOut: bp bx di ds si sp ss
// DataOut (flags): 
// SymbolicIn: sp:fp

l0800_10DD:
	byte al_19 = Mem8[ds:si_11:byte]
	si_11 = si_11 + 0x0001
	byte al_21 = al_19
	ax = DPB(ax, al_19, 0) (alias)
	branch al_19 == 0x00 l0800_10F3
// DataOut: al bp bx di ds si sp ss
// DataOut (flags): 
// SymbolicIn: sp:fp - 0x0002 di:<invalid> si:<invalid> al:<invalid> -2(fp):es

l0800_10F3:
// DataOut: bp bx di ds sp ss
// DataOut (flags): 
// SymbolicIn: sp:fp - 0x0002 di:<invalid> si:<invalid> al:<invalid> -2(fp):es

l0800_10E2:
	branch al_19 == 0x25 l0800_10F6
// DataOut: al bp bx di ds si sp ss
// DataOut (flags): 
// SymbolicIn: sp:fp - 0x0002 di:<invalid> si:<invalid> al:<invalid> -2(fp):es

l0800_10F6:
	Mem73[ss:bp - 0x008A:word16] = si_11
	al_21 = Mem73[ds:si_11:byte]
	ax = DPB(ax, al_21, 0) (alias)
	si_11 = si_11 + 0x0001
	branch al_21 == 0x25 l0800_10E6
// DataOut: al bp bx di ds si sp ss
// DataOut (flags): 
// SymbolicIn: sp:fp - 0x0002 di:<invalid> si:<invalid> al:<invalid> -2(fp):es

l0800_10FF:
	Mem79[ss:bp - 0x0096:word16] = di_10
	Mem85[ss:bp - 0x008C:word16] = 0x0000
	Mem86[ss:bp - 0x0098:word16] = 0x0000
	Mem87[ss:bp - 0x008D:byte] = 0x00
	Mem88[ss:bp - 0x0092:word16] = 0xFFFF
	Mem89[ss:bp - 0x0090:word16] = 0xFFFF
// DataOut: al bp ch ds si sp ss
// DataOut (flags): 
// SymbolicIn: sp:fp - 0x0002 di:<invalid> si:<invalid> al:<invalid> -2(fp):es

l0800_1120:
	word16 ax_97 = DPB(ax, 0x00, 8)
	byte bl_101 = (byte) ax_97
	byte dl_99 = (byte) ax_97
	bx = DPB(ax_97, bl_101 - 0x20, 0) (alias)
	branch bl_101 >=u 0x80 l0800_1175
// DataOut: bp bx ch dl ds si sp ss
// DataOut (flags): 
// SymbolicIn: sp:fp - 0x0002 di:<invalid> si:<invalid> al:<invalid> cx:0x0000 ah:<invalid> dx:<invalid> bx:<invalid> bl:<invalid> ax:<invalid> -2(fp):es

l0800_112E:
	bx = DPB(ax_97, Mem89[ds:bx + 0x04F9:byte], 0) (alias)
	branch bx <=u 0x0017 l0800_113C
// DataOut: ax bp bx ch dl ds si sp ss
// DataOut (flags): 
// SymbolicIn: sp:fp - 0x0002 di:<invalid> si:<invalid> al:<invalid> cx:0x0000 ah:<invalid> dx:<invalid> bx:<invalid> bl:<invalid> ax:<invalid> -2(fp):es

l0800_113C:
	bx = bx << 0x0001
	switch (bx << 0x0001) { l0800_1190 }
// DataOut: bp bx ch dl ds si sp ss
// DataOut (flags): 
// SymbolicIn: sp:fp - 0x0002 di:<invalid> si:<invalid> al:<invalid> cx:0x0000 ah:<invalid> dx:<invalid> bx:<invalid> bl:<invalid> ax:<invalid> -2(fp):es

l0800_1190:
	branch true l0800_1175
// DataOut: bp bx ch dl ds si sp ss
// DataOut (flags): 
// SymbolicIn: sp:fp - 0x0002 di:<invalid> si:<invalid> al:<invalid> cx:0x0000 ah:<invalid> dx:<invalid> bx:<invalid> bl:<invalid> ax:<invalid> -2(fp):es

l0800_1175:
// DataOut: bp bx ds sp ss
// DataOut (flags): 
// SymbolicIn: sp:fp - 0x0002 di:<invalid> si:<invalid> al:<invalid> cx:0x0000 ah:<invalid> dx:<invalid> bx:<invalid> bl:<invalid> ax:<invalid> -2(fp):es

l0800_1195:
	branch Mem89[ss:bp - 0x008D:byte] == 0x2B l0800_11A0
// DataOut: bp ch dl ds si sp ss
// DataOut (flags): 
// SymbolicIn: sp:fp - 0x0002 di:<invalid> si:<invalid> al:<invalid> cx:0x0000 ah:<invalid> dx:<invalid> bx:<invalid> bl:<invalid> ax:<invalid> -2(fp):es

l0800_119C:
	Mem155[ss:bp - 0x008D:byte] = dl_99
// DataOut: bp ch ds si sp ss
// DataOut (flags): 
// SymbolicIn: sp:fp - 0x0002 di:<invalid> si:<invalid> al:<invalid> cx:0x0000 ah:<invalid> dx:<invalid> bx:<invalid> bl:<invalid> ax:<invalid> -2(fp):es

l0800_11A0:
// DataOut: bp ch ds si sp ss
// DataOut (flags): 
// SymbolicIn: sp:fp - 0x0002 di:<invalid> si:<invalid> al:<invalid> cx:0x0000 ah:<invalid> dx:<invalid> bx:<invalid> bl:<invalid> ax:<invalid> -2(fp):es

l0800_111F:
	ax = DPB(ax_97, Mem89[ds:si_11:byte], 0) (alias)
	si_11 = si_11 + 0x0001
// DataOut: al bp ch ds si sp ss
// DataOut (flags): 
// SymbolicIn: sp:fp - 0x0002 di:<invalid> si:<invalid> al:<invalid> cx:0x0000 ah:<invalid> dx:<invalid> bx:<invalid> bl:<invalid> ax:<invalid> -2(fp):es

l0800_1139:
// DataOut: bp bx ds sp ss
// DataOut (flags): 
// SymbolicIn: sp:fp - 0x0002 di:<invalid> si:<invalid> al:<invalid> cx:0x0000 ah:<invalid> dx:<invalid> bx:<invalid> bl:<invalid> ax:<invalid> -2(fp):es

l0800_1560:
	word16 si_112 = Mem89[ss:bp - 0x008A:word16]
	di_10 = Mem89[ss:bp - 0x0096:word16]
	byte al_114 = 0x25
// DataOut: al bp bx di ds si sp ss
// DataOut (flags): 
// SymbolicIn: sp:fp - 0x0002 di:<invalid> si:<invalid> al:<invalid> cx:0x0000 ah:<invalid> dx:<invalid> bx:<invalid> bl:<invalid> ax:<invalid> -2(fp):es

l0800_156A:
	di_10 = fn0800_1099(al_114, bp, di_10, ds)
	byte al_123 = Mem89[ds:si_112:byte]
	sp_119 = sp_119 + 0xFFFE
	si_112 = si_112 + 0x0001
	al_114 = al_123
	branch al_123 != 0x00 l0800_156A
// DataOut: al bp bx di ds si sp ss
// DataOut (flags): 
// SymbolicIn: sp:<invalid> di:<invalid> si:<invalid> al:<invalid> cx:0x0000 ah:<invalid> dx:<invalid> bx:<invalid> bl:<invalid> ax:<invalid> -2(fp):es

l0800_1572:
	branch Mem8[ss:bp - 0x0055:byte] >= 0x50 l0800_157B
	branch Mem8[ss:bp - 0x0055:byte] >= 0x50 l0800_157B
// DataOut: bp bx di ds sp ss
// DataOut (flags): 
// SymbolicIn: sp:<invalid> di:<invalid> si:<invalid> al:<invalid> cx:0x0000 ah:<invalid> dx:<invalid> bx:<invalid> bl:<invalid> ax:<invalid> -2(fp):es

l0800_1578:
	fn0800_10A1(bp, di_10)
	fn0800_10A1(bp, di_10)
// DataOut: bp bx ds sp ss
// DataOut (flags): 
// SymbolicIn: sp:<invalid> di:<invalid> si:<invalid> al:<invalid> cx:0x0000 ah:<invalid> dx:<invalid> bx:<invalid> bl:<invalid> ax:<invalid> -2(fp):es
// Terminates process

l0800_157B:
	word16 sp_48 = sp_119 + 0x0002
	branch Mem8[ss:bp - 0x0002:word16] == 0x0000 l0800_1589
// DataOut: bp bx ds sp ss
// DataOut (flags): 
// SymbolicIn: sp:<invalid> di:<invalid> si:<invalid> al:<invalid> cx:0x0000 ah:<invalid> dx:<invalid> bx:<invalid> bl:<invalid> ax:<invalid> -2(fp):es

l0800_1589:
// DataOut: bp bx ds sp ss
// DataOut (flags): 
// SymbolicIn: sp:<invalid> di:<invalid> si:<invalid> al:<invalid> es:<invalid> cx:0x0000 ah:<invalid> dx:<invalid> bx:<invalid> bl:<invalid> ax:<invalid> -2(fp):es

l0800_1582:
// DataOut: bp bx ds sp ss
// DataOut (flags): 
// SymbolicIn: sp:<invalid> di:<invalid> si:<invalid> al:<invalid> es:<invalid> cx:0x0000 ah:<invalid> dx:<invalid> bx:<invalid> bl:<invalid> ax:<invalid> -2(fp):es

l0800_158E:
	word16 di_52
	*diOut = Mem8[ss:sp_48:word16]
	return bx
// DataOut: bx di ds sp ss
// DataOut (flags): 
// SymbolicIn: sp:<invalid> di:<invalid> si:<invalid> al:<invalid> es:<invalid> ax:<invalid> cx:0x0000 ah:<invalid> dx:<invalid> bx:<invalid> bl:<invalid> -2(fp):es

fn0800_10CD_exit:
// DataOut: bx di sp
// DataOut (flags): 
// SymbolicIn: sp:bp + 0x0002 di:<invalid> si:<invalid> al:<invalid> es:<invalid> ax:<invalid> bp:<invalid> cx:0x0000 ah:<invalid> dx:<invalid> bx:<invalid> bl:<invalid> -2(fp):es

l0800_10E6:
	Mem68[ds:di_10:byte] = al_21
	byte v15_70 = Mem68[ss:bp - 0x0055:byte] - 0x01
	Mem71[ss:bp - 0x0055:byte] = v15_70
	di_10 = di_10 + 0x0001
	branch v15_70 > 0x00 l0800_10DD
// DataOut: bp bx di ds si sp ss
// DataOut (flags): 
// SymbolicIn: sp:fp - 0x0002 di:<invalid> si:<invalid> al:<invalid> -2(fp):es

l0800_10EE:
	fn0800_10A1(bp, di_10)
// DataOut: bp bx di ds si sp ss
// DataOut (flags): 
// SymbolicIn: sp:fp - 0x0002 di:<invalid> si:<invalid> al:<invalid> -2(fp):es
// Terminates process



void fn0800_1596(selector ds, word16 wArg02)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  ds
// LiveOut:
// Trashed: SCZO ah al ax bh bl bx eax ebx rax rbx
// Preserved: bp di si sp
// Stack args: Stack +0002(16)
fn0800_1596_entry:
// DataOut: ds
// DataOut (flags): 
// SymbolicIn: sp:fp
// LocalsOut: fp(16) Stack +0002(16)

l0800_1596:
	branch Mem0[ds:0x062A:word16] == 0x0000 l0800_15C1
// DataOut: ds si
// DataOut (flags): 
// SymbolicIn: sp:fp
// LocalsOut: fp(16)

l0800_15C1:
	Mem34[ds:0x062A:word16] = wArg02
	Mem35[ds:wArg02 + 0x0004:word16] = wArg02
	Mem36[ds:wArg02 + 0x0006:word16] = wArg02
// DataOut: ds
// DataOut (flags): 
// SymbolicIn: sp:fp - 0x0006 bp:fp - 0x0002 si:<invalid> -6(fp):di -4(fp):si -2(fp):bp
// LocalsOut: fp(16)

l0800_15A5:
	word16 di_27 = Mem0[ds:Mem0[ds:0x062A:word16] + 0x0006:word16]
	Mem29[ds:Mem0[ds:0x062A:word16] + 0x0006:word16] = wArg02
	Mem30[ds:di_27 + 0x0004:word16] = wArg02
	Mem31[ds:wArg02 + 0x0006:word16] = di_27
	Mem33[ds:wArg02 + 0x0004:word16] = Mem31[ds:0x062A:word16]
// DataOut: ds
// DataOut (flags): 
// SymbolicIn: sp:fp - 0x0006 bp:fp - 0x0002 si:<invalid> -6(fp):di -4(fp):si -2(fp):bp
// LocalsOut: fp(16)

l0800_15CB:
	return
// DataOut: ds
// DataOut (flags): 
// SymbolicIn: sp:fp - 0x0006 bp:fp - 0x0002 si:<invalid> bx:<invalid> di:<invalid> ax:<invalid> -6(fp):di -4(fp):si -2(fp):bp

fn0800_1596_exit:
// DataOut:
// DataOut (flags): 
// SymbolicIn: sp:fp bp:bp si:si bx:<invalid> di:di ax:<invalid> -6(fp):di -4(fp):si -2(fp):bp



void fn0800_15CF(selector ds, word16 wArg02, word16 wArg04)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  ds
// LiveOut:
// Trashed: SCZO ah al ax bh bl bx ch cl cx eax ebx ecx rax rbx rcx
// Preserved: bp di si sp
// Stack args: Stack +0002(16) Stack +0004(16)
fn0800_15CF_entry:
// DataOut: ds
// DataOut (flags): 
// SymbolicIn: sp:fp
// LocalsOut: fp(16) Stack +0002(16) Stack +0004(16)

l0800_15CF:
	Mem21[ds:wArg02:word16] = Mem0[ds:wArg02:word16] + Mem0[ds:wArg04:word16]
	branch Mem21[ds:0x0628:word16] != wArg04 l0800_15EE
// DataOut: di ds si
// DataOut (flags): 
// SymbolicIn: sp:fp
// LocalsOut: fp(16)

l0800_15EE:
	Mem47[ds:Mem21[ds:wArg04:word16] + wArg04 + 0x0002:word16] = wArg02
// DataOut: ds si
// DataOut (flags): 
// SymbolicIn: sp:fp - 0x0008 bp:fp - 0x0002 si:<invalid> di:<invalid> ax:<invalid> -8(fp):di -6(fp):si -2(fp):bp
// LocalsOut: fp(16)

l0800_15E8:
	Mem39[ds:0x0628:word16] = wArg02
// DataOut: ds si
// DataOut (flags): 
// SymbolicIn: sp:fp - 0x0008 bp:fp - 0x0002 si:<invalid> di:<invalid> ax:<invalid> -8(fp):di -6(fp):si -2(fp):bp
// LocalsOut: fp(16)

l0800_15FB:
	fn0800_0491(ds, wArg04)
	return
// DataOut: ds
// DataOut (flags): 
// SymbolicIn: sp:fp - 0x0008 bp:fp - 0x0002 si:<invalid> di:<invalid> ax:<invalid> bx:<invalid> -8(fp):di -6(fp):si -4(fp):<invalid> -2(fp):bp

fn0800_15CF_exit:
// DataOut:
// DataOut (flags): 
// SymbolicIn: sp:fp bp:bp si:si di:di ax:<invalid> bx:<invalid> cx:<invalid> -10(fp):<invalid> -8(fp):di -6(fp):si -4(fp):<invalid> -2(fp):bp



void fn0800_1606(selector ds)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  ds
// LiveOut:
// Trashed: SCZO ah al ax bh bl bx ch cl cx dh dl dx eax ebx ecx edx rax rbx rcx rdx
// Preserved: si sp
fn0800_1606_entry:
// DataOut: di ds
// DataOut (flags): 
// SymbolicIn: sp:fp
// LocalsOut: fp(16)

l0800_1606:
	branch Mem0[ds:0x062C:word16] != Mem0[ds:0x0628:word16] l0800_1622
// DataOut: di ds
// DataOut (flags): 
// SymbolicIn: sp:fp
// LocalsOut: fp(16)

l0800_1622:
	word16 si_32 = Mem0[ds:Mem0[ds:0x0628:word16] + 0x0002:word16]
	branch (Mem0[ds:si_32:word16] & 0x0001) != 0x0000 l0800_1651
// DataOut: di ds si
// DataOut (flags): 
// SymbolicIn: sp:fp - 0x0002 ax:<invalid> -2(fp):si
// LocalsOut: fp(16)

l0800_1651:
	fn0800_063B(ds, Mem0[ds:0x0628:word16])
	Mem61[ds:0x0628:word16] = si_32
// DataOut: di ds
// DataOut (flags): 
// SymbolicIn: sp:fp - 0x0002 ax:<invalid> bx:<invalid> si:<invalid> -2(fp):si

l0800_162F:
	fn0800_0491(ds, si_32)
	branch si_32 != Mem0[ds:0x062C:word16] l0800_1644
// DataOut: di ds si
// DataOut (flags): 
// SymbolicIn: sp:fp - 0x0002 ax:<invalid> bx:<invalid> si:<invalid> -2(fp):si
// LocalsOut: fp(16)

l0800_1644:
	Mem55[ds:0x0628:word16] = Mem0[ds:si_32 + 0x0002:word16]
// DataOut: di ds si
// DataOut (flags): 
// SymbolicIn: sp:fp - 0x0002 ax:<invalid> bx:<invalid> si:<invalid> cx:<invalid> -4(fp):<invalid> -2(fp):si
// LocalsOut: fp(16)

l0800_163A:
	Mem52[ds:0x0628:word16] = 0x0000
	Mem53[ds:0x062C:word16] = 0x0000
// DataOut: di ds si
// DataOut (flags): 
// SymbolicIn: sp:fp - 0x0002 ax:<invalid> bx:<invalid> si:<invalid> cx:<invalid> -4(fp):<invalid> -2(fp):si
// LocalsOut: fp(16)

l0800_164A:
	fn0800_063B(ds, si_32)
// DataOut: di ds
// DataOut (flags): 
// SymbolicIn: sp:fp - 0x0002 ax:<invalid> bx:<invalid> si:<invalid> cx:<invalid> -4(fp):<invalid> -2(fp):si

l0800_1610:
	fn0800_063B(ds, Mem0[ds:0x062C:word16])
	Mem28[ds:0x0628:word16] = 0x0000
	Mem29[ds:0x062C:word16] = 0x0000
// DataOut: di ds
// DataOut (flags): 
// SymbolicIn: sp:fp - 0x0002 ax:<invalid> -2(fp):si

l0800_165D:
	return
// DataOut: di ds
// DataOut (flags): 
// SymbolicIn: sp:fp - 0x0002 ax:<invalid> cx:<invalid> bx:<invalid> si:<invalid> dx:<invalid> -4(fp):<invalid> -2(fp):si

fn0800_1606_exit:
// DataOut:
// DataOut (flags): 
// SymbolicIn: sp:fp ax:<invalid> cx:<invalid> si:si bx:<invalid> dx:<invalid> -4(fp):<invalid> -2(fp):si



void fn0800_165F(selector ds, word16 wArg02)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  ds
// LiveOut:
// Trashed: SCZO ah al ax bh bl bx ch cl cx eax ebx ecx rax rbx rcx
// Preserved: bp di si sp
// Stack args: Stack +0002(16)
fn0800_165F_entry:
// DataOut: ds
// DataOut (flags): 
// SymbolicIn: sp:fp
// LocalsOut: fp(16) Local -000C(16) Stack +0002(16)

l0800_165F:
	Mem18[ds:wArg02:word16] = Mem0[ds:wArg02:word16] - 0x0001
	word16 si_14 = wArg02
	word16 ax_20 = Mem18[ds:wArg02:word16] + wArg02
	word16 di_22 = Mem18[ds:wArg02 + 0x0002:word16]
	branch (Mem18[ds:di_22:word16] & 0x0001) != 0x0000 l0800_1690
// DataOut: di ds si
// DataOut (flags): 
// SymbolicIn: sp:fp
// LocalsOut: fp(16) Local -0004(16) Local -000C(16)

l0800_167C:
	branch wArg02 == Mem18[ds:0x062C:word16] l0800_1690
// DataOut: di ds si
// DataOut (flags): 
// SymbolicIn: sp:fp - 0x0008 bp:fp - 0x0002 si:<invalid> ax:<invalid> di:<invalid> -8(fp):di -6(fp):si -4(fp):<invalid> -2(fp):bp
// LocalsOut: fp(16) Local -0004(16) Local -000C(16)

l0800_1690:
	fn0800_1596(ds, wArg02)
// DataOut: ds si
// DataOut (flags): 
// SymbolicIn: sp:fp - 0x0008 bp:fp - 0x0002 si:<invalid> ax:<invalid> di:<invalid> -8(fp):di -6(fp):si -4(fp):<invalid> -2(fp):bp
// LocalsOut: fp(16) Local -0004(16)

l0800_1682:
	Mem66[ds:di_22:word16] = Mem18[ds:di_22:word16] + Mem18[ds:wArg02:word16]
	Mem69[ds:ax_20 + 0x0002:word16] = di_22
	si_14 = di_22
// DataOut: ds si
// DataOut (flags): 
// SymbolicIn: sp:fp - 0x0008 bp:fp - 0x0002 si:<invalid> ax:<invalid> di:<invalid> -8(fp):di -6(fp):si -4(fp):<invalid> -2(fp):bp
// LocalsOut: fp(16) Local -0004(16)

l0800_1695:
	branch (Mem18[ds:ax_20:word16] & 0x0001) != 0x0000 l0800_16A7
// DataOut: ds si
// DataOut (flags): 
// SymbolicIn: sp:fp - 0x0008 bp:fp - 0x0002 si:<invalid> ax:<invalid> di:<invalid> cx:<invalid> bx:<invalid> -10(fp):<invalid> -8(fp):di -6(fp):si -4(fp):<invalid> -2(fp):bp
// LocalsOut: fp(16) Local -0004(16)

l0800_169E:
	fn0800_15CF(ds, si_14, ax_20)
// DataOut: ds
// DataOut (flags): 
// SymbolicIn: sp:fp - 0x0008 bp:fp - 0x0002 si:<invalid> ax:<invalid> di:<invalid> cx:<invalid> bx:<invalid> -10(fp):<invalid> -8(fp):di -6(fp):si -4(fp):<invalid> -2(fp):bp
// LocalsOut: fp(16)

l0800_16A7:
	return
// DataOut: ds
// DataOut (flags): 
// SymbolicIn: sp:fp - 0x0008 bp:fp - 0x0002 si:<invalid> ax:<invalid> di:<invalid> cx:<invalid> bx:<invalid> -12(fp):<invalid> -10(fp):<invalid> -8(fp):di -6(fp):si -4(fp):<invalid> -2(fp):bp

fn0800_165F_exit:
// DataOut:
// DataOut (flags): 
// SymbolicIn: sp:fp bp:bp si:si ax:<invalid> di:di cx:<invalid> bx:<invalid> -12(fp):<invalid> -10(fp):<invalid> -8(fp):di -6(fp):si -4(fp):<invalid> -2(fp):bp



void fn0800_16AD(selector ds, word16 wArg02)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  ds
// LiveOut:
// Trashed: SCZO ah al ax bh bl bx ch cl cx dh dl dx eax ebx ecx edx rax rbx rcx rdx
// Preserved: bp si sp
// Stack args: Stack +0002(16)
fn0800_16AD_entry:
// DataOut: di ds
// DataOut (flags): 
// SymbolicIn: sp:fp
// LocalsOut: fp(16) Stack +0002(16)

l0800_16AD:
	branch wArg02 != 0x0000 l0800_16BA
// DataOut: di ds si
// DataOut (flags): 
// SymbolicIn: sp:fp
// LocalsOut: fp(16)

l0800_16BA:
	branch wArg02 + 0xFFFC != Mem0[ds:0x0628:word16] l0800_16CC
// DataOut: di ds si
// DataOut (flags): 
// SymbolicIn: sp:fp - 0x0004 bp:fp - 0x0002 si:<invalid> -4(fp):si -2(fp):bp
// LocalsOut: fp(16)

l0800_16CC:
	fn0800_165F(ds, wArg02 + 0xFFFC)
// DataOut: di ds
// DataOut (flags): 
// SymbolicIn: sp:fp - 0x0004 bp:fp - 0x0002 si:<invalid> ax:<invalid> -4(fp):si -2(fp):bp
// LocalsOut: fp(16)

l0800_16C7:
	fn0800_1606(ds)
// DataOut: di ds
// DataOut (flags): 
// SymbolicIn: sp:fp - 0x0004 bp:fp - 0x0002 si:<invalid> ax:<invalid> -4(fp):si -2(fp):bp
// LocalsOut: fp(16)

l0800_16B8:
// DataOut: di ds
// DataOut (flags): 
// SymbolicIn: sp:fp - 0x0004 bp:fp - 0x0002 si:<invalid> -4(fp):si -2(fp):bp
// LocalsOut: fp(16)

l0800_16D1:
	return
// DataOut: di ds
// DataOut (flags): 
// SymbolicIn: sp:fp - 0x0004 bp:fp - 0x0002 si:<invalid> ax:<invalid> cx:<invalid> bx:<invalid> dx:<invalid> -6(fp):<invalid> -4(fp):si -2(fp):bp

fn0800_16AD_exit:
// DataOut:
// DataOut (flags): 
// SymbolicIn: sp:fp bp:bp si:si ax:<invalid> cx:<invalid> bx:<invalid> dx:<invalid> -6(fp):<invalid> -4(fp):si -2(fp):bp



void fn0800_16D4(word16 bx, word16 di, selector ds, word16 wArg02)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  bx di ds ss
// LiveOut:
// Trashed: SCZDO ah al ax bh bl bp bpl bx ch cl cx di dil eax ebp ebx ecx edi es esi esp rax rbp rbx rcx rdi rsi rsp si sil sp spl
// Preserved: bp sp
// Stack args: Stack +0002(16)
fn0800_16D4_entry:
// DataOut: bx di ds ss
// DataOut (flags): 
// SymbolicIn: sp:fp
// LocalsOut: fp(16) Stack +0002(16)

l0800_16D4:
	fn0800_16F3(bx, di, ds, 0x0342, wArg02)
// DataOut: ds sp ss
// DataOut (flags): 
// SymbolicIn: sp:fp

l0800_16F1:
	return
// DataOut: ds ss
// DataOut (flags): 
// SymbolicIn: sp:<invalid> bp:<invalid> ax:<invalid> si:<invalid> al:<invalid> es:<invalid> di:<invalid> cx:<invalid> bl:<invalid> bh:<invalid> bx:<invalid> -12(fp):0x07F2 -10(fp):0x1D65 -8(fp):0x0342 -6(fp):<invalid> -4(fp):fp + 0x0004 -2(fp):bp

fn0800_16D4_exit:
// DataOut:
// DataOut (flags): 
// SymbolicIn: sp:<invalid> bp:<invalid> ax:<invalid> si:<invalid> al:<invalid> es:<invalid> di:<invalid> cx:<invalid> bl:<invalid> bh:<invalid> bx:<invalid> -12(fp):0x07F2 -10(fp):0x1D65 -8(fp):0x0342 -6(fp):<invalid> -4(fp):fp + 0x0004 -2(fp):bp



word16 fn0800_16F3(word16 bx, word16 di, selector ds, word16 wArg06, word16 wArg08)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  bx di ds ss
// LiveOut: bp
// Trashed: SCZDO ah al ax bh bl bp bpl bx ch cl cx di dil eax ebp ebx ecx edi es esi esp rax rbp rbx rcx rdi rsi rsp si sil sp spl
// Preserved:
// Stack args: Stack +0006(16) Stack +0008(16)
fn0800_16F3_entry:
// DataOut: bx di ds ss
// DataOut (flags): 
// SymbolicIn: sp:fp
// LocalsOut: fp(16) Stack +0006(16) Stack +0008(16)

l0800_16F3:
	word16 bp_102 = fp - 0x0002
// DataOut: bp bx di ds ss
// DataOut (flags): 
// SymbolicIn: sp:fp
// LocalsOut: fp(16) Local -0028(16) Stack +0006(16) Stack +0008(16)

l0800_1721:
	word16 sp_124 = fp - 0x0032
	word16 si_105 = wArg08
// DataOut: bp bx di ds si sp ss
// DataOut (flags): 
// SymbolicIn: sp:fp - 0x0030 bp:fp - 0x0002 -48(fp):di -46(fp):si -42(fp):0x0000 -40(fp):0x0000 -2(fp):bp
// LocalsOut: Local -0028(16) Stack +0006(16)

l0800_1726:
	byte al_53 = Mem0[ds:si_105:byte]
	word16 si_54 = si_105 + 0x0001
	branch al_53 == 0x00 l0800_1788
// DataOut: al bp bx di ds si sp ss
// DataOut (flags): 
// SymbolicIn: sp:<invalid> bp:fp - 0x0002 si:<invalid> al:<invalid> ax:<invalid> di:<invalid> cx:<invalid> bx:<invalid> bl:<invalid> -52(fp):<invalid> -50(fp):es -48(fp):di -46(fp):si -42(fp):0x0000 -40(fp):<invalid> -2(fp):bp
// LocalsOut: Local -0028(16) Stack +0006(16)

l0800_1788:
// DataOut: bp ds ss
// DataOut (flags): 
// SymbolicIn: sp:<invalid> bp:fp - 0x0002 si:<invalid> al:<invalid> ax:<invalid> di:<invalid> cx:<invalid> bx:<invalid> bl:<invalid> -52(fp):<invalid> -50(fp):es -48(fp):di -46(fp):si -42(fp):0x0000 -40(fp):<invalid> -2(fp):bp

l0800_1788_thunk_fn0800_1AFF:
	return fn0800_1AFF(bp_102, psegArg00, wArg02, wArg04)
// DataOut: bp ds ss
// DataOut (flags): 
// SymbolicIn: sp:<invalid> bp:fp - 0x0002 si:<invalid> al:<invalid> ax:<invalid> di:<invalid> cx:<invalid> bx:<invalid> bl:<invalid> -52(fp):<invalid> -50(fp):es -48(fp):di -46(fp):si -42(fp):0x0000 -40(fp):<invalid> -2(fp):bp

l0800_172B:
	branch al_53 == 0x25 l0800_178B
// DataOut: al bp bx di ds si sp ss
// DataOut (flags): 
// SymbolicIn: sp:<invalid> bp:fp - 0x0002 si:<invalid> al:<invalid> ax:<invalid> di:<invalid> cx:<invalid> bx:<invalid> bl:<invalid> -52(fp):<invalid> -50(fp):es -48(fp):di -46(fp):si -42(fp):0x0000 -40(fp):<invalid> -2(fp):bp
// LocalsOut: Local -0028(16) Stack +0006(16)

l0800_178B:
	word16 ax_303 = (int16) Mem0[ds:si_54:byte]
	branch ax_303 < 0x0000 l0800_17E6
// DataOut: bp di dil ds ss
// DataOut (flags): 
// SymbolicIn: sp:<invalid> bp:fp - 0x0002 si:<invalid> al:<invalid> ax:<invalid> di:<invalid> cx:<invalid> bx:<invalid> bl:<invalid> -52(fp):<invalid> -50(fp):es -48(fp):di -46(fp):si -42(fp):0x0000 -40(fp):<invalid> -2(fp):bp

l0800_179E:
	branch DPB(bx, 0x00, 8) <=u 0x0015 l0800_17AE
// DataOut: ax bp di dil ds ss
// DataOut (flags): 
// SymbolicIn: sp:<invalid> bp:fp - 0x0002 si:<invalid> al:<invalid> ax:<invalid> di:<invalid> cx:<invalid> bx:<invalid> bl:<invalid> -52(fp):<invalid> -50(fp):es -48(fp):di -46(fp):si -43(fp):0x00 -42(fp):0x0000 -40(fp):<invalid> -36(fp):0xFFFF -2(fp):bp 8(fp):<invalid>

l0800_17AE:
	switch (ax_303) { l0800_17E6 }
// DataOut: bp ds ss
// DataOut (flags): 
// SymbolicIn: sp:<invalid> bp:fp - 0x0002 si:<invalid> al:<invalid> ax:<invalid> di:<invalid> bl:<invalid> bh:0x00 cx:<invalid> bx:<invalid> -52(fp):<invalid> -50(fp):es -48(fp):di -46(fp):si -43(fp):0x00 -42(fp):0x0000 -40(fp):<invalid> -36(fp):0xFFFF -2(fp):bp 8(fp):<invalid>

l0800_17E6:
// DataOut: bp ds ss
// DataOut (flags): 
// SymbolicIn: sp:<invalid> bp:fp - 0x0002 si:<invalid> al:<invalid> ax:<invalid> di:<invalid> bl:<invalid> bh:<invalid> bx:<invalid> cx:<invalid> -52(fp):<invalid> -50(fp):es -48(fp):di -46(fp):si -43(fp):0x00 -42(fp):0x0000 -40(fp):<invalid> -36(fp):0xFFFF -2(fp):bp 8(fp):<invalid>

l0800_17E6_thunk_fn0800_1AFF:
	return fn0800_1AFF(bp_102, psegArg00, wArg02, wArg04)
// DataOut: bp ds ss
// DataOut (flags): 
// SymbolicIn: sp:<invalid> bp:fp - 0x0002 si:<invalid> al:<invalid> ax:<invalid> di:<invalid> bl:<invalid> bh:<invalid> bx:<invalid> cx:<invalid> -52(fp):<invalid> -50(fp):es -48(fp):di -46(fp):si -43(fp):0x00 -42(fp):0x0000 -40(fp):<invalid> -36(fp):0xFFFF -2(fp):bp 8(fp):<invalid>

l0800_17AB:
// DataOut: bp ds ss
// DataOut (flags): 
// SymbolicIn: sp:<invalid> bp:fp - 0x0002 si:<invalid> al:<invalid> ax:<invalid> di:<invalid> bl:<invalid> bh:0x00 cx:<invalid> bx:<invalid> -52(fp):<invalid> -50(fp):es -48(fp):di -46(fp):si -43(fp):0x00 -42(fp):0x0000 -40(fp):<invalid> -36(fp):0xFFFF -2(fp):bp 8(fp):<invalid>

l0800_17AB_thunk_fn0800_1AEB:
	return fn0800_1AEB(bp_102)
// DataOut: bp ds ss
// DataOut (flags): 
// SymbolicIn: sp:<invalid> bp:fp - 0x0002 si:<invalid> al:<invalid> ax:<invalid> di:<invalid> bl:<invalid> bh:0x00 cx:<invalid> bx:<invalid> -52(fp):<invalid> -50(fp):es -48(fp):di -46(fp):si -43(fp):0x00 -42(fp):0x0000 -40(fp):<invalid> -36(fp):0xFFFF -2(fp):bp 8(fp):<invalid>

l0800_17AB_thunk_fn0800_1AEB:
	return fn0800_1AEB(bp_102)
// DataOut: bp ds ss
// DataOut (flags): 
// SymbolicIn: sp:<invalid> bp:fp - 0x0002 si:<invalid> al:<invalid> ax:<invalid> di:<invalid> bl:<invalid> bh:0x00 cx:<invalid> bx:<invalid> -52(fp):<invalid> -50(fp):es -48(fp):di -46(fp):si -43(fp):0x00 -42(fp):0x0000 -40(fp):<invalid> -36(fp):0xFFFF -2(fp):bp 8(fp):<invalid>

l0800_172F:
	word16 sp_97 = sp_124 - 0x0002
	Mem98[ss:sp_97:word16] = wArg06
	word16 sp_101
	byte SCZO_104
	word16 di_106
	selector es_107
	byte D_108
	byte al_109
	byte SZO_111
	byte C_112
	byte Z_113
	word16 ax_114
	word16 cx_116
	byte SO_117
	byte S_118
	byte bl_120
	byte bh_121
	byte CZ_122
	call SEQ(cs, Mem98[ss:bp_102 + 0x0004:word16]) (retsize: 2; depth: 2)
		uses: al_55,ax_90,bh_35,bl_36,bLoc2B,bp_51,bx_37,C_59,cs_40,cx_48,CZ_34,D_42,di_91,ds_41,es_43,S_38,SCZO_86,si_54,SO_39,sp_97,ss_47,SZO_94,wLoc02_4,wLoc24,wLoc28_93,wLoc2A_14,wLoc2E_10,wLoc30_13,wLoc32_18,Z_87
		defs: al_109,ax_114,bh_121,bl_120,bp_102,bx_119,C_112,cs_115,cx_116,CZ_122,D_108,di_106,ds_110,es_107,S_118,SCZO_104,si_105,SO_117,sp_101,ss_103,SZO_111,Z_113
	sp_124 = sp_101 + 0x0002
	word16 ax_125 = ax_114
	branch ax_114 < 0x0000 l0800_1764
// DataOut: al ax bp bx di ds si sp ss
// DataOut (flags): 
// SymbolicIn: sp:<invalid> bp:fp - 0x0002 si:<invalid> al:<invalid> ax:<invalid> di:<invalid> cx:<invalid> bx:<invalid> bl:<invalid> -52(fp):<invalid> -50(fp):es -48(fp):di -46(fp):si -42(fp):0x0000 -40(fp):<invalid> -2(fp):bp
// LocalsOut: Local -0028(16) Stack +0006(16)

l0800_173F:
	branch di_106 < 0x0000 l0800_1775
// DataOut: al ax bp bx di ds si sp ss
// DataOut (flags): 
// SymbolicIn: sp:<invalid> bp:fp - 0x0002 si:<invalid> al:<invalid> ax:<invalid> di:<invalid> cx:<invalid> bx:<invalid> bl:<invalid> -52(fp):<invalid> -50(fp):es -48(fp):di -46(fp):si -42(fp):0x0000 -40(fp):<invalid> -2(fp):bp
// LocalsOut: Local -0028(16) Stack +0006(16)

l0800_1743:
	branch Mem98[ds:di_106 + 0x055A:byte] != 0x01 l0800_1775
// DataOut: al ax bp bx di ds si sp ss
// DataOut (flags): 
// SymbolicIn: sp:<invalid> bp:fp - 0x0002 si:<invalid> al:<invalid> ax:<invalid> di:<invalid> cx:<invalid> bx:<invalid> bl:<invalid> -52(fp):<invalid> -50(fp):es -48(fp):di -46(fp):si -42(fp):0x0000 -40(fp):<invalid> -2(fp):bp
// LocalsOut: Local -0028(16) Stack +0006(16)

l0800_1775:
	branch ax_114 == di_106 l0800_1726
// DataOut: ax bp bx di ds si sp ss
// DataOut (flags): 
// SymbolicIn: sp:<invalid> bp:fp - 0x0002 si:<invalid> al:<invalid> ax:<invalid> di:<invalid> cx:<invalid> bx:<invalid> bl:<invalid> -52(fp):<invalid> -50(fp):es -48(fp):di -46(fp):si -42(fp):0x0000 -40(fp):<invalid> -2(fp):bp
// LocalsOut: Local -0028(16) Stack +0006(16)

l0800_1779:
	Mem163[ss:sp_101:word16] = wArg06
	Mem165[ss:sp_101 - 0x0002:word16] = ax_114
	word16 sp_166
	word16 bp_167
	selector ss_168
	byte SCZO_169
	word16 si_170
	word16 di_171
	selector es_172
	byte D_173
	byte al_174
	selector ds_175
	byte SZO_176
	byte C_177
	byte Z_178
	word16 ax_179
	selector cs_180
	word16 cx_181
	byte SO_182
	byte S_183
	word16 bx_184
	byte bl_185
	byte bh_186
	byte CZ_187
	call SEQ(cs, Mem165[ss:bp_102 + 0x0006:word16]) (retsize: 2; depth: 2)
		uses: al_126,ax_125,bh_121,bl_120,bLoc2B,bp_102,bx_119,C_158,cs_115,cx_123,CZ_122,D_108,di_155,ds_110,es_107,S_157,SCZO_159,si_105,SO_128,sp_164,ss_103,SZO_156,wLoc02_4,wLoc24,wLoc28_93,wLoc2A_14,wLoc2E_10,wLoc30_13,wLoc32_18,Z_160
		defs: al_174,ax_179,bh_186,bl_185,bp_167,bx_184,C_177,cs_180,cx_181,CZ_187,D_173,di_171,ds_175,es_172,S_183,SCZO_169,si_170,SO_182,sp_166,ss_168,SZO_176,Z_178
// DataOut: bp ds ss
// DataOut (flags): 
// SymbolicIn: sp:<invalid> bp:fp - 0x0002 si:<invalid> al:<invalid> ax:<invalid> di:<invalid> cx:<invalid> bx:<invalid> bl:<invalid> -52(fp):<invalid> -50(fp):es -48(fp):di -46(fp):si -42(fp):0x0000 -40(fp):<invalid> -2(fp):bp

l0800_1785_thunk_fn0800_1AFF:
	return fn0800_1AFF(bp_167, psegArg00, wArg02, wArg04)
// DataOut: bp ds ss
// DataOut (flags): 
// SymbolicIn: sp:<invalid> bp:fp - 0x0002 si:<invalid> al:<invalid> ax:<invalid> di:<invalid> cx:<invalid> bx:<invalid> bl:<invalid> -52(fp):<invalid> -50(fp):es -48(fp):di -46(fp):si -42(fp):0x0000 -40(fp):<invalid> -2(fp):bp

l0800_174A:
	byte bl_222 = (byte) ax_125
	word16 bx_225 = DPB(ax_125, bl_222, 0)
	branch bl_222 < 0x00 l0800_1767
// DataOut: ax bp bx di ds si sp ss
// DataOut (flags): 
// SymbolicIn: sp:<invalid> bp:fp - 0x0002 si:<invalid> al:<invalid> ax:<invalid> di:<invalid> cx:<invalid> bx:<invalid> bl:<invalid> -52(fp):<invalid> -50(fp):es -48(fp):di -46(fp):si -42(fp):0x0000 -40(fp):<invalid> -2(fp):bp
// LocalsOut: Local -0028(16) Stack +0006(16)

l0800_174F:
	branch Mem98[ds:bx_225 + 0x055A:byte] != 0x01 l0800_1767
// DataOut: ax bp bx di ds si sp ss
// DataOut (flags): 
// SymbolicIn: sp:<invalid> bp:fp - 0x0002 si:<invalid> al:<invalid> ax:<invalid> di:<invalid> cx:<invalid> bx:<invalid> bl:<invalid> -52(fp):<invalid> -50(fp):es -48(fp):di -46(fp):si -42(fp):0x0000 -40(fp):<invalid> -2(fp):bp
// LocalsOut: Local -0028(16) Stack +0006(16)

l0800_1767:
	word16 sp_230 = sp_124 - 0x0002
	Mem231[ss:sp_230:word16] = wArg06
	Mem233[ss:sp_230 - 0x0002:word16] = bx_225
	word16 sp_234
	byte SCZO_237
	word16 di_239
	selector es_240
	byte D_241
	byte al_242
	byte SZO_244
	byte C_245
	byte Z_246
	word16 ax_247
	word16 cx_249
	byte SO_250
	byte S_251
	byte bl_253
	byte bh_254
	byte CZ_255
	call SEQ(cs, Mem233[ss:bp_102 + 0x0006:word16]) (retsize: 2; depth: 2)
		uses: al_220,ax_219,bh_223,bl_224,bLoc2B,bp_217,bx_225,C_228,cs_205,cx_214,CZ_202,D_208,di_210,ds_207,es_209,S_227,SCZO_212,si_211,SO_204,sp_232,ss_213,SZO_226,wLoc02_4,wLoc24,wLoc28_201,wLoc2A_14,wLoc2E_10,wLoc30_13,wLoc32_18,Z_206
		defs: al_242,ax_247,bh_254,bl_253,bp_235,bx_252,C_245,cs_248,cx_249,CZ_255,D_241,di_239,ds_243,es_240,S_251,SCZO_237,si_238,SO_250,sp_234,ss_236,SZO_244,Z_246
	sp_124 = sp_234 + 0x0004
// DataOut: bp bx di ds si sp ss
// DataOut (flags): 
// SymbolicIn: sp:<invalid> bp:fp - 0x0002 si:<invalid> al:<invalid> ax:<invalid> di:<invalid> cx:<invalid> bx:<invalid> bl:<invalid> -52(fp):<invalid> -50(fp):es -48(fp):di -46(fp):si -42(fp):0x0000 -40(fp):<invalid> -2(fp):bp
// LocalsOut: Local -0028(16) Stack +0006(16)

l0800_1756:
	word16 sp_269 = sp_124 - 0x0002
	Mem270[ss:sp_269:word16] = wArg06
	word16 sp_271
	byte SCZO_274
	word16 si_275
	word16 di_276
	selector es_277
	byte D_278
	byte al_279
	byte SZO_281
	byte C_282
	byte Z_283
	word16 ax_284
	word16 cx_286
	byte SO_287
	byte S_288
	word16 bx_289
	byte bl_290
	byte bh_291
	byte CZ_292
	call SEQ(cs, Mem270[ss:bp_102 + 0x0004:word16]) (retsize: 2; depth: 2)
		uses: al_220,ax_219,bh_223,bl_224,bLoc2B,bp_217,bx_225,C_228,cs_205,cx_214,CZ_202,D_208,di_210,ds_207,es_209,S_227,SCZO_263,si_211,SO_204,sp_269,ss_213,SZO_267,wLoc02_4,wLoc24,wLoc28_266,wLoc2A_14,wLoc2E_10,wLoc30_13,wLoc32_18,Z_264
		defs: al_279,ax_284,bh_291,bl_290,bp_272,bx_289,C_282,cs_285,cx_286,CZ_292,D_278,di_276,ds_280,es_277,S_288,SCZO_274,si_275,SO_287,sp_271,ss_273,SZO_281,Z_283
	sp_124 = sp_271 + 0x0002
	ax_125 = ax_284
	branch ax_284 > 0x0000 l0800_174A
// DataOut: al bp bx di ds si sp ss
// DataOut (flags): 
// SymbolicIn: sp:<invalid> bp:fp - 0x0002 si:<invalid> al:<invalid> ax:<invalid> di:<invalid> cx:<invalid> bx:<invalid> bl:<invalid> -52(fp):<invalid> -50(fp):es -48(fp):di -46(fp):si -42(fp):0x0000 -40(fp):<invalid> -2(fp):bp
// LocalsOut: Local -0028(16) Stack +0006(16)

l0800_1764:
// DataOut: bp ds ss
// DataOut (flags): 
// SymbolicIn: sp:<invalid> bp:fp - 0x0002 si:<invalid> al:<invalid> ax:<invalid> di:<invalid> cx:<invalid> bx:<invalid> bl:<invalid> -52(fp):<invalid> -50(fp):es -48(fp):di -46(fp):si -42(fp):0x0000 -40(fp):<invalid> -2(fp):bp

l0800_1764_thunk_fn0800_1AEB:
	return fn0800_1AEB(bp_102)
// DataOut: bp ds ss
// DataOut (flags): 
// SymbolicIn: sp:<invalid> bp:fp - 0x0002 si:<invalid> al:<invalid> ax:<invalid> di:<invalid> cx:<invalid> bx:<invalid> bl:<invalid> -52(fp):<invalid> -50(fp):es -48(fp):di -46(fp):si -42(fp):0x0000 -40(fp):<invalid> -2(fp):bp

l0800_1764_thunk_fn0800_1AEB:
	return fn0800_1AEB(bp_102)
// DataOut: bp ds ss
// DataOut (flags): 
// SymbolicIn: sp:<invalid> bp:fp - 0x0002 si:<invalid> al:<invalid> ax:<invalid> di:<invalid> cx:<invalid> bx:<invalid> bl:<invalid> -52(fp):<invalid> -50(fp):es -48(fp):di -46(fp):si -42(fp):0x0000 -40(fp):<invalid> -2(fp):bp

fn0800_16F3_exit:
// DataOut: bp
// DataOut (flags): 
// SymbolicIn: sp:<invalid> bp:<invalid> si:<invalid> al:<invalid> es:<invalid> ax:<invalid> di:<invalid> cx:<invalid> bl:<invalid> bh:<invalid> bx:<invalid> -52(fp):<invalid> -50(fp):es -48(fp):di -46(fp):si -43(fp):0x00 -42(fp):0x0000 -40(fp):<invalid> -36(fp):0xFFFF -2(fp):bp 8(fp):<invalid>



void fn0800_1708(word16 bp, selector ds)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  bp ds ss
// LiveOut:
// Trashed: SCZO di dil edi es rdi
// Preserved: sp
fn0800_1708_entry:
// DataOut: bp ds ss
// DataOut (flags): 
// SymbolicIn: sp:fp
// LocalsOut: fp(16)

l0800_1708:
	branch (Mem0[ss:bp - 0x0029:byte] & 0x20) == 0x00 l0800_1718
// DataOut: bp di ds ss
// DataOut (flags): 
// SymbolicIn: sp:fp
// LocalsOut: fp(16)

l0800_1718:
	Mem29[ss:bp + 0x000C:word16] = Mem0[ss:bp + 0x000C:word16] + 0x0002
	return
// DataOut:
// DataOut (flags): 
// SymbolicIn: sp:fp di:<invalid>

l0800_1711:
	Mem20[ss:bp + 0x000C:word16] = Mem0[ss:bp + 0x000C:word16] + 0x0004
	return
// DataOut:
// DataOut (flags): 
// SymbolicIn: sp:fp di:<invalid>

fn0800_1708_exit:
// DataOut:
// DataOut (flags): 
// SymbolicIn: sp:fp di:<invalid> Sequence es:di:<invalid> es:ds -2(fp):ds



void fn0800_1898(word16 ax, word16 bp, selector ds)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  ax bp ds ss
// LiveOut:
// Trashed: SCZO ah al ax bh bl bp bpl bx ch cl cx di dil eax ebp ebx ecx edi es esi esp rax rbp rbx rcx rdi rsi rsp si sil sp spl
// Preserved: sp
fn0800_1898_entry:
// DataOut: ax bp ds ss
// DataOut (flags): 
// SymbolicIn: sp:fp

l0800_1898:
// DataOut: ax bp ds ss
// DataOut (flags): 
// SymbolicIn: sp:fp

l0800_1898_thunk_fn0800_1B06:
	fn0800_1B06(ax, bp, ds)
	return
// DataOut:
// DataOut (flags): 
// SymbolicIn: sp:fp

fn0800_1898_exit:
// DataOut:
// DataOut (flags): 
// SymbolicIn: sp:<invalid> cx:<invalid> ax:<invalid> al:<invalid> bx:<invalid> es:<invalid> di:<invalid> si:<invalid> bp:<invalid>



void fn0800_18AF(word16 ax, word16 bp)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  ax bp ss
// LiveOut:
// Trashed: SCZO ah al ax bp bpl ch cl cx dh di dil dl dx eax ebp ecx edi edx es esi esp rax rbp rcx rdi rdx rsi rsp si sil sp spl
// Preserved: sp
fn0800_18AF_entry:
// DataOut: ax bp ss
// DataOut (flags): 
// SymbolicIn: sp:fp

l0800_18AF:
// DataOut: ax bp ss
// DataOut (flags): 
// SymbolicIn: sp:fp

l0800_18AF_thunk_fn0800_1B2C:
	fn0800_1B2C(ax, bp)
	return
// DataOut:
// DataOut (flags): 
// SymbolicIn: sp:fp

fn0800_18AF_exit:
// DataOut:
// DataOut (flags): 
// SymbolicIn: sp:<invalid> dx:<invalid> cx:<invalid> ax:<invalid> cl:<invalid> es:<invalid> di:<invalid> si:<invalid> bp:<invalid> ch:<invalid> dl:<invalid>



void fn0800_18CF(word16 ax, word16 bp)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  ax bp ss
// LiveOut:
// Trashed: SCZO ah al ax bp bpl ch cl cx dh di dil dl dx eax ebp ecx edi edx es esi esp rax rbp rcx rdi rdx rsi rsp si sil sp spl
// Preserved: sp
fn0800_18CF_entry:
// DataOut: ax bp ss
// DataOut (flags): 
// SymbolicIn: sp:fp

l0800_18CF:
// DataOut: ax bp ss
// DataOut (flags): 
// SymbolicIn: sp:fp

l0800_18CF_thunk_fn0800_1B2C:
	fn0800_1B2C(ax, bp)
	return
// DataOut:
// DataOut (flags): 
// SymbolicIn: sp:fp

fn0800_18CF_exit:
// DataOut:
// DataOut (flags): 
// SymbolicIn: sp:<invalid> dx:<invalid> cx:<invalid> ax:<invalid> cl:<invalid> es:<invalid> di:<invalid> si:<invalid> bp:<invalid> ch:<invalid> dl:<invalid>



void fn0800_196F(word16 ax, word16 bp, selector ds)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  ax bp ds ss
// LiveOut:
// Trashed: SCZO ah al ax bh bl bp bpl bx ch cl cx di dil eax ebp ebx ecx edi es esi esp rax rbp rbx rcx rdi rsi rsp si sil sp spl
// Preserved: sp
fn0800_196F_entry:
// DataOut: ax bp ds ss
// DataOut (flags): 
// SymbolicIn: sp:fp

l0800_196F:
// DataOut: ax bp ds ss
// DataOut (flags): 
// SymbolicIn: sp:fp

l0800_196F_thunk_fn0800_1B06:
	fn0800_1B06(ax, bp, ds)
	return
// DataOut:
// DataOut (flags): 
// SymbolicIn: sp:fp

fn0800_196F_exit:
// DataOut:
// DataOut (flags): 
// SymbolicIn: sp:<invalid> cx:<invalid> ax:<invalid> al:<invalid> bx:<invalid> es:<invalid> di:<invalid> si:<invalid> bp:<invalid>



word16 fn0800_1AEB(word16 bp)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  bp ss
// LiveOut: bp
// Trashed: SCZO ah al ax bp bpl ch cl cx di dil eax ebp ecx edi es esi esp rax rbp rcx rdi rsi rsp si sil sp spl
// Preserved:
fn0800_1AEB_entry:
// DataOut: bp ds ss
// DataOut (flags): 
// SymbolicIn: sp:fp
// LocalsOut: v3(16)

l0800_1AEB:
	Mem7[ss:v3 - 0x0002:word16] = Mem0[ss:bp + 0x0008:word16]
	Mem10[ss:v3 - 0x0004:word16] = 0xFFFF
	word16 sp_12
	selector ss_13
	word16 bp_14
	word16 ax_15
	selector cs_16
	word16 cx_17
	byte SCZO_18
	byte C_19
	selector es_20
	word16 di_21
	word16 si_22
	call SEQ(cs, Mem10[ss:bp + 0x0006:word16]) (retsize: 2; depth: 2)
		uses: ax_8,bp,cs,sp_9,ss
		defs: ax_15,bp_14,C_19,cs_16,cx_17,di_21,es_20,SCZO_18,si_22,sp_12,ss_13
	Mem30[ss_13:bp_14 - 0x0028:word16] = Mem10[ss_13:bp_14 - 0x0028:word16] - (Mem10[ss_13:bp_14 - 0x0028:word16] <u 0x0001)
// DataOut: bp ds ss
// DataOut (flags): 
// SymbolicIn: sp:fp

l0800_1AFB_thunk_fn0800_1AFF:
	return fn0800_1AFF(bp_14, psegArg00, wArg02, wArg04)
// DataOut: bp ds ss
// DataOut (flags): 
// SymbolicIn: sp:<invalid> ax:<invalid> cx:<invalid>

fn0800_1AEB_exit:
// DataOut: bp
// DataOut (flags): 
// SymbolicIn: sp:<invalid> ax:<invalid> cx:<invalid> es:<invalid> di:<invalid> si:<invalid> bp:<invalid>



word16 fn0800_1AFF(word16 bp, selector psegArg00, word16 wArg02, word16 wArg04)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  bp ss
// LiveOut: bp
// Trashed: ah al ax bp bpl di dil eax ebp edi es esi esp rax rbp rdi rsi rsp si sil sp spl
// Preserved:
l0800_1AFF:
// DataOut: bp ds sp ss
// DataOut (flags): 
// SymbolicIn:

l0800_1B8C:
	return bp
// DataOut: bp ds ss
// DataOut (flags): 
// SymbolicIn:

fn0800_1AFF_entry:
// DataOut: bp ds ss
// DataOut (flags): 
// SymbolicIn: sp:fp
// LocalsOut: fp(16)

l0800_1AFF:
// DataOut: bp ds ss
// DataOut (flags): 
// SymbolicIn: sp:fp
// LocalsOut: fp(16)

l0800_1B8C_in_fn0800_1AFF:
	return Mem0[ss:bp:word16]
// DataOut: bp ds ss
// DataOut (flags): 
// SymbolicIn: sp:fp + 0x0002 es:<invalid> ax:<invalid>

fn0800_1AFF_exit:
// DataOut: bp
// DataOut (flags): 
// SymbolicIn: sp:bp + 0x0002 es:<invalid> ax:<invalid> di:<invalid> si:<invalid> bp:<invalid>



void fn0800_1B06(word16 ax, word16 bp, selector ds)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  ax bp ds ss
// LiveOut:
// Trashed: SCZO ah al ax bh bl bp bpl bx ch cl cx di dil eax ebp ebx ecx edi es esi esp rax rbp rbx rcx rdi rsi rsp si sil sp spl
// Preserved:
fn0800_1B06_entry:
// DataOut: ax bp ds ss
// DataOut (flags): 
// SymbolicIn: sp:fp
// LocalsOut: fp(16)

l0800_1B06:
	Mem8[ss:bp - 0x0026:word16] = Mem0[ss:bp - 0x0026:word16] + 0x0001
	word16 sp_14
	byte SZO_17
	selector cs_18
	word16 cx_19
	word16 ax_20
	byte C_21
	byte al_22
	byte S_23
	word16 bx_24
	selector ds_25
	byte SCZO_26
	byte Z_27
	selector es_28
	word16 di_29
	word16 si_30
	call SEQ(cs, Mem8[ss:bp + 0x0004:word16]) (retsize: 2; depth: 4)
		uses: bp_3,cs,sp_11,ss_2,SZO_9,wLoc02_12
		defs: al_22,ax_20,bp_15,bx_24,C_21,cs_18,cx_19,di_29,ds_25,es_28,S_23,SCZO_26,si_30,sp_14,ss_16,SZO_17,Z_27
	byte al_34 = (byte) ax_20
	branch ax_20 <= 0x0000 l0800_1B27
// DataOut: al bp ds sp ss
// DataOut (flags): Z
// SymbolicIn: sp:<invalid> cx:<invalid> ax:<invalid> al:<invalid> bx:<invalid> -2(fp):<invalid>
// LocalsOut: fp(16)

l0800_1B27:
	branch ax_20 == 0x0000 l0800_1B21
// DataOut: bp sp ss
// DataOut (flags): 
// SymbolicIn: sp:<invalid> cx:<invalid> ax:<invalid> al:<invalid> bx:<invalid> -2(fp):<invalid>

l0800_1B29:
// DataOut: bp ss
// DataOut (flags): 
// SymbolicIn: sp:<invalid> cx:<invalid> ax:<invalid> al:<invalid> bx:<invalid> -2(fp):<invalid>

l0800_1B29_thunk_fn0800_1AEB:
	fn0800_1AEB(bp)
	return
// DataOut:
// DataOut (flags): 
// SymbolicIn: sp:<invalid> cx:<invalid> ax:<invalid> al:<invalid> bx:<invalid> -2(fp):<invalid>

l0800_1B14:
	word16 ax_79 = DPB(ax_20, al_34, 0)
	branch al_34 < 0x00 l0800_1B21
// DataOut: ax bp ds sp ss
// DataOut (flags): 
// SymbolicIn: sp:<invalid> cx:<invalid> ax:<invalid> al:<invalid> bx:<invalid> -2(fp):<invalid>
// LocalsOut: fp(16)

l0800_1B18:
	branch Mem8[ds_25:ax_79 + 0x055A:byte] == 0x01 l0800_1B06
// DataOut: ax bp ds sp ss
// DataOut (flags): 
// SymbolicIn: sp:<invalid> cx:<invalid> ax:<invalid> al:<invalid> bx:<invalid> -2(fp):<invalid>
// LocalsOut: fp(16)

l0800_1B21:
	word16 sp_61
	word16 bp_62
	selector ss_63
	byte SZO_64
	selector cs_65
	word16 cx_66
	word16 ax_67
	byte C_68
	byte al_69
	byte S_70
	word16 bx_71
	selector ds_72
	byte SCZO_73
	byte Z_74
	selector es_75
	word16 di_76
	word16 si_77
	call Mem8[ss:sp_14 + 0x0002:word16] + 0x0003 (retsize: 4; depth: 4)
		uses: al_34,ax_33,bp_15,bx_24,C_38,cs_18,cx_59,di_29,ds_25,es_28,S_37,SCZO_60,si_30,sp_58,ss_16,SZO_35,wLoc02_12,Z_36
		defs: al_69,ax_67,bp_62,bx_71,C_68,cs_65,cx_66,di_76,ds_72,es_75,S_70,SCZO_73,si_77,sp_61,ss_63,SZO_64,Z_74
	return
// DataOut:
// DataOut (flags): 
// SymbolicIn: sp:<invalid> cx:<invalid> ax:<invalid> al:<invalid> bx:<invalid> -2(fp):<invalid>

fn0800_1B06_exit:
// DataOut:
// DataOut (flags): 
// SymbolicIn: sp:<invalid> cx:<invalid> ax:<invalid> al:<invalid> bx:<invalid> es:<invalid> di:<invalid> si:<invalid> bp:<invalid> -2(fp):<invalid>



void fn0800_1B2C(word16 ax, word16 bp)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  ax bp ss
// LiveOut:
// Trashed: SCZO ah al ax bp bpl ch cl cx dh di dil dl dx eax ebp ecx edi edx es esi esp rax rbp rcx rdi rdx rsi rsp si sil sp spl
// Preserved:
fn0800_1B2C_entry:
// DataOut: ax bp ss
// DataOut (flags): 
// SymbolicIn: sp:fp
// LocalsOut: fp(16)

l0800_1B2C:
	word16 sp_1 = fp
	word16 dx_147 = 0x0000
	word16 cx_133 = 0x0004
	byte cl_118 = 0x04
// DataOut: ax bp cl cx dx sp ss
// DataOut (flags): 
// SymbolicIn: sp:fp

l0800_1B31:
	word16 v8_30 = Mem0[ss:bp - 0x0022:word16] - 0x0001
	Mem31[ss:bp - 0x0022:word16] = v8_30
	branch v8_30 < 0x0000 l0800_1B7B
// DataOut: ax bp cl cx dx sp ss
// DataOut (flags): 
// SymbolicIn: sp:<invalid> dx:<invalid> cx:<invalid> ax:<invalid> cl:<invalid> ch:<invalid> dl:<invalid> -6(fp):<invalid> -4(fp):0x0004 -2(fp):0x0000

l0800_1B7B:
// DataOut: bp cl sp ss
// DataOut (flags): 
// SymbolicIn: sp:<invalid> dx:<invalid> cx:<invalid> ax:<invalid> cl:<invalid> ch:<invalid> dl:<invalid> -6(fp):<invalid> -4(fp):0x0004 -2(fp):0x0000

l0800_1B36:
	word16 sp_89 = sp_1 - 0x0002
	Mem90[ss:sp_89:word16] = dx_147
	Mem92[ss:sp_89 - 0x0002:word16] = cx_133
	Mem94[ss:bp - 0x0026:word16] = Mem92[ss:bp - 0x0026:word16] + 0x0001
	Mem98[ss:sp_89 - 0x0004:word16] = Mem94[ss:bp + 0x0008:word16]
	word16 sp_99
	word16 dx_100
	byte SCZO_101
	word16 cx_102
	byte SZO_105
	byte SO_106
	word16 ax_108
	byte C_109
	byte cl_110
	byte ch_111
	byte al_112
	byte dl_113
	byte Z_114
	call SEQ(cs, Mem98[ss:bp + 0x0004:word16]) (retsize: 2; depth: 2)
		uses: al_16,ax_19,bp_22,C_18,ch_24,cl_17,cs_20,cx_25,dl_26,dx_27,SCZO_28,SO_33,sp_97,ss_21,SZO_95,Z_15
		defs: al_112,ax_108,bp_103,C_109,ch_111,cl_110,cs_107,cx_102,dl_113,dx_100,SCZO_101,SO_106,sp_99,ss_104,SZO_105,Z_114
	word16 cx_117 = Mem98[ss:sp_99 + 0x0002:word16]
	cl_118 = (byte) cx_117 (alias)
	word16 dx_120 = Mem98[ss:sp_99 + 0x0004:word16]
	sp_1 = sp_99 + 0x0006
	byte al_124 = (byte) ax_108
	branch ax_108 <= 0x0000 l0800_1B7D
// DataOut: al ax bp cl dl sp ss
// DataOut (flags): 
// SymbolicIn: sp:<invalid> dx:<invalid> cx:<invalid> ax:<invalid> cl:<invalid> ch:<invalid> dl:<invalid> -6(fp):<invalid> -4(fp):0x0004 -2(fp):0x0000

l0800_1B48:
	cl_118 = cl_118 - 0x01
	word16 cx_128 = DPB(cx_117, cl_118 - 0x01, 0)
	branch cl_118 < 0x01 l0800_1B7D
// DataOut: al ax bp cl dl sp ss
// DataOut (flags): 
// SymbolicIn: sp:<invalid> dx:<invalid> cx:<invalid> ax:<invalid> cl:<invalid> ch:<invalid> dl:<invalid> -6(fp):<invalid> -4(fp):0x0004 -2(fp):0x0000

l0800_1B4C:
	byte ch_132 = al_124 - 0x30
	cx_133 = DPB(cx_128, al_124 - 0x30, 8) (alias)
	branch al_124 <u 0x30 l0800_1B7D
// DataOut: ax bp ch cl cx dl sp ss
// DataOut (flags): 
// SymbolicIn: sp:<invalid> dx:<invalid> cx:<invalid> ax:<invalid> cl:<invalid> ch:<invalid> dl:<invalid> -6(fp):<invalid> -4(fp):0x0004 -2(fp):0x0000

l0800_1B53:
	branch al_124 <u 0x3A l0800_1B6F
// DataOut: ax bp ch cl cx dl sp ss
// DataOut (flags): 
// SymbolicIn: sp:<invalid> dx:<invalid> cx:<invalid> ax:<invalid> cl:<invalid> ch:al - 0x30 dl:<invalid> -6(fp):<invalid> -4(fp):0x0004 -2(fp):0x0000

l0800_1B58:
	byte ch_149 = al_124 - 0x41
	word16 cx_150 = DPB(cx_128, al_124 - 0x41, 8)
	branch al_124 <u 0x41 l0800_1B7D
// DataOut: ax bp ch cl dl sp ss
// DataOut (flags): 
// SymbolicIn: sp:<invalid> dx:<invalid> cx:<invalid> ax:<invalid> cl:<invalid> ch:al - 0x30 dl:<invalid> -6(fp):<invalid> -4(fp):0x0004 -2(fp):0x0000

l0800_1B5D:
	branch al_124 <u 0x47 l0800_1B6C
// DataOut: ax bp ch cl dl sp ss
// DataOut (flags): 
// SymbolicIn: sp:<invalid> dx:<invalid> cx:<invalid> ax:<invalid> cl:<invalid> ch:al - 0x41 dl:<invalid> -6(fp):<invalid> -4(fp):0x0004 -2(fp):0x0000

l0800_1B62:
	ch_149 = al_124 - 0x61
	cx_150 = DPB(cx_128, al_124 - 0x61, 8) (alias)
	branch al_124 <u 0x61 l0800_1B7D
// DataOut: ax bp ch cl dl sp ss
// DataOut (flags): 
// SymbolicIn: sp:<invalid> dx:<invalid> cx:<invalid> ax:<invalid> cl:<invalid> ch:al - 0x41 dl:<invalid> -6(fp):<invalid> -4(fp):0x0004 -2(fp):0x0000

l0800_1B67:
	branch al_124 >=u 0x67 l0800_1B7D
// DataOut: ax bp ch cl dl sp ss
// DataOut (flags): 
// SymbolicIn: sp:<invalid> dx:<invalid> cx:<invalid> ax:<invalid> cl:<invalid> ch:al - 0x61 dl:<invalid> -6(fp):<invalid> -4(fp):0x0004 -2(fp):0x0000

l0800_1B7D:
	branch cl_118 == 0x04 l0800_1B88
// DataOut: bp sp ss
// DataOut (flags): 
// SymbolicIn: sp:<invalid> dx:<invalid> cx:<invalid> ax:<invalid> cl:<invalid> ch:<invalid> dl:<invalid> -6(fp):<invalid> -4(fp):0x0004 -2(fp):0x0000

l0800_1B88:
// DataOut: bp ss
// DataOut (flags): 
// SymbolicIn: sp:<invalid> dx:<invalid> cx:<invalid> ax:<invalid> cl:<invalid> ch:<invalid> dl:<invalid> -6(fp):<invalid> -4(fp):0x0004 -2(fp):0x0000

l0800_1B89_thunk_fn0800_1AEB:
	fn0800_1AEB(bp)
	return
// DataOut:
// DataOut (flags): 
// SymbolicIn: sp:<invalid> dx:<invalid> cx:<invalid> ax:<invalid> cl:<invalid> ch:<invalid> dl:<invalid> -6(fp):<invalid> -4(fp):0x0004 -2(fp):0x0000

l0800_1B82:
	word16 sp_70
	word16 dx_71
	byte SCZO_72
	word16 cx_73
	word16 bp_74
	selector ss_75
	byte SZO_76
	byte SO_77
	selector cs_78
	word16 ax_79
	byte C_80
	byte cl_81
	byte ch_82
	byte al_83
	byte dl_84
	byte Z_85
	call Mem31[ss:sp_1:word16] + 0x0003 (retsize: 4; depth: 4)
		uses: al_34,ax_37,bp_42,C_36,ch_44,cl_35,cs_38,cx_68,dl_46,dx_47,SCZO_69,SO_39,sp_67,ss_41,SZO_40,Z_49
		defs: al_83,ax_79,bp_74,C_80,ch_82,cl_81,cs_78,cx_73,dl_84,dx_71,SCZO_72,SO_77,sp_70,ss_75,SZO_76,Z_85
	return
// DataOut:
// DataOut (flags): 
// SymbolicIn: sp:<invalid> dx:<invalid> cx:<invalid> ax:<invalid> cl:<invalid> ch:<invalid> dl:<invalid> -6(fp):<invalid> -4(fp):0x0004 -2(fp):0x0000

fn0800_1B2C_exit:
// DataOut:
// DataOut (flags): 
// SymbolicIn: sp:<invalid> dx:<invalid> cx:<invalid> ax:<invalid> cl:<invalid> es:<invalid> di:<invalid> si:<invalid> bp:<invalid> ch:<invalid> dl:<invalid> -6(fp):<invalid> -4(fp):0x0004 -2(fp):0x0000

l0800_1B6C:
	ch_132 = ch_149 + 0x0A
	cx_133 = DPB(cx_150, ch_132, 8) (alias)
// DataOut: ax bp ch cl cx dl sp ss
// DataOut (flags): 
// SymbolicIn: sp:<invalid> dx:<invalid> cx:<invalid> ax:<invalid> cl:<invalid> ch:<invalid> dl:<invalid> -6(fp):<invalid> -4(fp):0x0004 -2(fp):0x0000

l0800_1B6F:
	dx_147 = DPB(dx_120 << 0x0004, (byte) (dx_120 << 0x0004) + ch_132, 0) (alias)
// DataOut: ax bp cl cx dx sp ss
// DataOut (flags): 
// SymbolicIn: sp:<invalid> dx:<invalid> cx:<invalid> ax:<invalid> cl:<invalid> ch:<invalid> dl:<invalid> -6(fp):<invalid> -4(fp):0x0004 -2(fp):0x0000



void fn0800_1B92()
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse: 
// LiveOut:
// Trashed: esp rsp sp spl
// Preserved:
fn0800_1B92_entry:
// DataOut:
// DataOut (flags): 
// SymbolicIn: sp:fp

l0800_1B92:
	word16 sp_4
	selector ds_5
	call Mem0[ds:0x05E2:word16] (retsize: 4; depth: 4)
		uses: ds,sp_1
		defs: ds_5,sp_4
	return
// DataOut:
// DataOut (flags): 
// SymbolicIn: sp:fp

fn0800_1B92_exit:
// DataOut:
// DataOut (flags): 
// SymbolicIn: sp:<invalid>



void fn0800_1B96()
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse: 
// LiveOut:
// Trashed: esp rsp sp spl
// Preserved:
fn0800_1B96_entry:
// DataOut:
// DataOut (flags): 
// SymbolicIn: sp:fp

l0800_1B96:
	word16 sp_4
	selector ds_5
	call Mem0[ds:0x05E4:word16] (retsize: 4; depth: 4)
		uses: ds,sp_1
		defs: ds_5,sp_4
	return
// DataOut:
// DataOut (flags): 
// SymbolicIn: sp:fp

fn0800_1B96_exit:
// DataOut:
// DataOut (flags): 
// SymbolicIn: sp:<invalid>



void fn0800_1B9A()
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse: 
// LiveOut:
// Trashed: esp rsp sp spl
// Preserved:
fn0800_1B9A_entry:
// DataOut:
// DataOut (flags): 
// SymbolicIn: sp:fp

l0800_1B9A:
	word16 sp_4
	selector ds_5
	call Mem0[ds:0x05E6:word16] (retsize: 4; depth: 4)
		uses: ds,sp_1
		defs: ds_5,sp_4
	return
// DataOut:
// DataOut (flags): 
// SymbolicIn: sp:fp

fn0800_1B9A_exit:
// DataOut:
// DataOut (flags): 
// SymbolicIn: sp:<invalid>



byte fn0800_1B9E(byte cl, byte bl, ptr16 & blOut)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  bl cl
// LiveOut: C bl
// Trashed: SCZO bh bl bx ebx rbx
// Preserved: bx sp
fn0800_1B9E_entry:
// DataOut: bl cl cx di ds si ss
// DataOut (flags): 
// SymbolicIn: sp:fp
// LocalsOut: fp(16)

l0800_1B9E:
	byte C_12
	byte bl_27
	*blOut = bl - 0x30
	branch bl <u 0x30 l0800_1BC7
// DataOut: bl cl cx di ds si ss
// DataOut (flags): 
// SymbolicIn: sp:fp
// LocalsOut: fp(16) Local -0002(8)

l0800_1BA4:
	branch bl <=u 0x39 l0800_1BBB
// DataOut: bl cl cx di ds si ss
// DataOut (flags): 
// SymbolicIn: sp:fp - 0x0002 bl:bl - 0x30 -2(fp):bx
// LocalsOut: fp(16) Local -0002(8)

l0800_1BA9:
	branch bl >u 0x5A l0800_1BB3
// DataOut: bl cl cx di ds si ss
// DataOut (flags): 
// SymbolicIn: sp:fp - 0x0002 bl:bl - 0x30 -2(fp):bx
// LocalsOut: fp(16) Local -0002(8)

l0800_1BB3:
	*blOut = bl - 0x57
// DataOut: bl cl cx di ds si ss
// DataOut (flags): 
// SymbolicIn: sp:fp - 0x0002 bl:bl - 0x30 -2(fp):bx
// LocalsOut: fp(16) Local -0002(8)

l0800_1BAE:
	*blOut = bl - 0x37
// DataOut: bl cl cx di ds si ss
// DataOut (flags): 
// SymbolicIn: sp:fp - 0x0002 bl:bl - 0x30 -2(fp):bx
// LocalsOut: fp(16) Local -0002(8)

l0800_1BB6:
	branch bl_27 <=u 0x09 l0800_1BC7
// DataOut: bl cl cx di ds si ss
// DataOut (flags): 
// SymbolicIn: sp:fp - 0x0002 bl:<invalid> -2(fp):bx
// LocalsOut: fp(16) Local -0002(8)

l0800_1BBB:
	branch bl_27 >=u cl l0800_1BC7
// DataOut: bl cx di ds si ss
// DataOut (flags): 
// SymbolicIn: sp:fp - 0x0002 bl:<invalid> -2(fp):bx
// LocalsOut: fp(16) Local -0002(8)

l0800_1BC7:
	byte bl_19
	*blOut = (byte) bx
	C_12 = true
// DataOut: bl cx di ds si ss
// DataOut (flags): C
// SymbolicIn: sp:fp - 0x0002 bl:<invalid> -2(fp):bx

l0800_1BBF:
	C_12 = false
// DataOut: bl cx di ds si ss
// DataOut (flags): C
// SymbolicIn: sp:fp - 0x0002 bl:<invalid> -2(fp):bx

l0800_1BC5:
// DataOut: bl cx di ds si ss
// DataOut (flags): C
// SymbolicIn: sp:fp bl:<invalid> bx:bx bh:0x00 -2(fp):bx

l0800_1BCB:
	return C_12
// DataOut: bl cx di ds si ss
// DataOut (flags): C
// SymbolicIn: sp:fp bl:<invalid> bx:bx bh:0x00 -2(fp):bx

fn0800_1B9E_exit:
// DataOut: bl
// DataOut (flags): C
// SymbolicIn: sp:fp bl:<invalid> bx:bx bh:0x00 -2(fp):bx



void fn0800_1BCC(word16 ax, word16 bx, selector ds, word16 wArg06, word16 wArg08, word16 wArg0A, word16 wArg0C, word16 wArg0E)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  ax bx ds ss
// LiveOut:
// Trashed: SCZO ah al ax bh bl bx ch cl cx dh di dil dl dx eax ebx ecx edi edx es esi rax rbx rcx rdi rdx rsi si sil
// Preserved: al bp sp
// Stack args: Stack +0006(16) Stack +0008(16) Stack +000A(16) Stack +000C(16) Stack +000E(16)
fn0800_1BCC_entry:
// DataOut: ax bx ds ss
// DataOut (flags): 
// SymbolicIn: sp:fp
// LocalsOut: fp(16) Stack +0006(16) Stack +0008(16) Stack +000A(16) Stack +000C(16) Stack +000E(16)

l0800_1BCC:
	byte bLoc07_1005 = 0x00
	word16 wLoc06_128 = 0x0000
	word16 wLoc04_124 = 0x0001
	word16 sp_132 = fp - 0x000E
// DataOut: ax bx di ds sp ss
// DataOut (flags): 
// SymbolicIn: sp:fp
// LocalsOut: fp(16) Local -0004(16) Local -0006(16) Local -0007(0) Stack +0006(16) Stack +0008(16) Stack +000A(16) Stack +000C(16) Stack +000E(16)

l0800_1BE6:
	selector ds_155
	word16 v9_28 = wLoc06_128 + 0x0001
	word16 sp_33 = sp_132 - 0x0002
	Mem34[ss:sp_33:word16] = wArg06
	wLoc06_128 = v9_28
	word16 sp_36
	word16 bp_37
	byte SCZO_39
	word16 si_40
	word16 di_41
	selector es_42
	byte SZO_43
	selector cs_44
	word16 cx_45
	word16 ax_46
	byte C_47
	byte SO_48
	byte al_49
	word16 bx_50
	byte bl_51
	byte Z_52
	selector ds_53
	byte CZ_54
	byte cl_55
	word16 dx_56
	byte dl_57
	byte dh_58
	byte ah_59
	call SEQ(cs, Mem34[ss:fp + 0x0002:word16]) (retsize: 2; depth: 2)
		uses: bLoc07_14,bp_5,cs,cx,di_20,es,SCZO_7,si,sp_33,ss_25,SZO_30,wLoc02_4,wLoc04_16,wLoc06_29,wLoc0A_10,wLoc0C_13,wLoc0E_19
		defs: ah_59,al_49,ax_46,bl_51,bp_37,bx_50,C_47,cl_55,cs_44,cx_45,CZ_54,dh_58,di_41,dl_57,ds_53,dx_56,es_42,SCZO_39,si_40,SO_48,sp_36,ss_38,SZO_43,Z_52
	sp_132 = sp_36 + 0x0002
	word16 ax_131 = ax_46
	byte al_66 = (byte) ax_46
	branch ax_46 < 0x0000 l0800_1C5A
// DataOut: al ax bx di ds sp ss
// DataOut (flags): 
// SymbolicIn: sp:<invalid> bp:fp - 0x0002 di:0x0241 cx:<invalid> ax:<invalid> bx:(int16) al -16(fp):<invalid> -14(fp):es -12(fp):di -10(fp):si -7(fp):0x00 -6(fp):<invalid> -4(fp):0x0001 -2(fp):bp
// LocalsOut: fp(16) Local -0004(16) Local -0006(16) Local -0007(0) Stack +0006(16) Stack +0008(16) Stack +000A(16) Stack +000C(16) Stack +000E(16)

l0800_1BF4:
	word16 ax_203 = (int16) al_66
	byte bl_212 = (byte) ax_203
	branch (bl_212 & 0x80) != 0x00 l0800_1C00
// DataOut: ax bl bx di ds sp ss
// DataOut (flags): 
// SymbolicIn: sp:<invalid> bp:fp - 0x0002 di:0x0241 cx:<invalid> ax:<invalid> bx:<invalid> -16(fp):<invalid> -14(fp):es -12(fp):di -10(fp):si -7(fp):0x00 -6(fp):<invalid> -4(fp):0x0001 -2(fp):bp
// LocalsOut: fp(16) Local -0004(16) Local -0006(16) Local -0007(0) Stack +0006(16) Stack +0008(16) Stack +000A(16) Stack +000C(16) Stack +000E(16)

l0800_1BFB:
	branch (Mem34[ds_53:ax_203 + di_41:byte] & 0x01) != 0x00 l0800_1BE6
// DataOut: ax bl bx di ds sp ss
// DataOut (flags): 
// SymbolicIn: sp:<invalid> bp:fp - 0x0002 di:0x0241 cx:<invalid> ax:<invalid> bx:(int16) al -16(fp):<invalid> -14(fp):es -12(fp):di -10(fp):si -7(fp):0x00 -6(fp):<invalid> -4(fp):0x0001 -2(fp):bp
// LocalsOut: fp(16) Local -0004(16) Local -0006(16) Local -0007(0) Stack +0006(16) Stack +0008(16) Stack +000A(16) Stack +000C(16) Stack +000E(16)

l0800_1C00:
	ax_131 = ax_203
	byte al_222 = (byte) ax_203
	word16 wArg0A_227 = wArg0A - 0x0001
	branch wArg0A < 0x0001 l0800_1C61
// DataOut: al ax ds sp ss
// DataOut (flags): 
// SymbolicIn: sp:<invalid> bp:fp - 0x0002 di:0x0241 cx:<invalid> ax:<invalid> bx:(int16) al -16(fp):<invalid> -14(fp):es -12(fp):di -10(fp):si -7(fp):0x00 -6(fp):<invalid> -4(fp):0x0001 -2(fp):bp
// LocalsOut: fp(16) Local -0004(16) Local -0006(16) Local -0007(0) Stack +0006(16) Stack +0008(16) Stack +000A(16) Stack +000C(16) Stack +000E(16)

l0800_1C06:
	word16 bp_288
	selector cs_272
	branch al_222 == 0x2B l0800_1C11
// DataOut: al ax ds sp ss
// DataOut (flags): 
// SymbolicIn: sp:<invalid> bp:fp - 0x0002 di:0x0241 cx:<invalid> ax:(int16) al bx:<invalid> -16(fp):<invalid> -14(fp):es -12(fp):di -10(fp):si -7(fp):0x00 -6(fp):<invalid> -4(fp):0x0001 -2(fp):bp 10(fp):<invalid>
// LocalsOut: fp(16) Local -0004(16) Local -0006(16) Local -0007(0) Stack +0006(16) Stack +0008(16) Stack +000A(16) Stack +000C(16) Stack +000E(16)

l0800_1C0A:
	ds_155 = ds_53
	cs_272 = cs_44
	bp_288 = bp_37
	branch al_222 != 0x2D l0800_1C24
// DataOut: al ax ds sp ss
// DataOut (flags): 
// SymbolicIn: sp:<invalid> bp:fp - 0x0002 di:0x0241 cx:<invalid> ax:(int16) al bx:<invalid> -16(fp):<invalid> -14(fp):es -12(fp):di -10(fp):si -7(fp):0x00 -6(fp):<invalid> -4(fp):0x0001 -2(fp):bp 10(fp):<invalid>
// LocalsOut: fp(16) Local -0004(16) Local -0006(16) Local -0007(0) Stack +0006(16) Stack +0008(16) Stack +000A(16) Stack +000C(16) Stack +000E(16)

l0800_1C0E:
	bLoc07_1005 = 0x01
// DataOut: ax ds sp ss
// DataOut (flags): 
// SymbolicIn: sp:<invalid> bp:fp - 0x0002 di:0x0241 cx:<invalid> ax:(int16) al bx:<invalid> -16(fp):<invalid> -14(fp):es -12(fp):di -10(fp):si -7(fp):0x00 -6(fp):<invalid> -4(fp):0x0001 -2(fp):bp 10(fp):<invalid>
// LocalsOut: fp(16) Local -0004(16) Local -0006(16) Local -0007(0) Stack +0006(16) Stack +0008(16) Stack +000A(16) Stack +000C(16) Stack +000E(16)

l0800_1C11:
	wArg0A_227 = wArg0A - 0x0002
	branch wArg0A < 0x0002 l0800_1C61
// DataOut: ax ds sp ss
// DataOut (flags): 
// SymbolicIn: sp:<invalid> bp:fp - 0x0002 di:0x0241 cx:<invalid> ax:(int16) al bx:<invalid> -16(fp):<invalid> -14(fp):es -12(fp):di -10(fp):si -7(fp):<invalid> -6(fp):<invalid> -4(fp):0x0001 -2(fp):bp 10(fp):<invalid>
// LocalsOut: fp(16) Local -0004(16) Local -0006(16) Local -0007(0) Stack +0006(16) Stack +0008(16) Stack +000A(16) Stack +000C(16) Stack +000E(16)

l0800_1C16:
	Mem966[ss:sp_36:word16] = wArg06
	wLoc06_128 = v9_28 + 0x0001
	word16 sp_967
	byte SCZO_970
	word16 si_971
	word16 di_972
	selector es_973
	byte SZO_974
	word16 cx_976
	word16 ax_977
	byte C_978
	byte SO_979
	byte al_980
	word16 bx_981
	byte bl_982
	byte Z_983
	byte CZ_985
	byte cl_986
	word16 dx_987
	byte dl_988
	byte dh_989
	byte ah_990
	call SEQ(cs_44, Mem966[ss:bp_37 + 0x0004:word16]) (retsize: 2; depth: 2)
		uses: ah_223,al_222,ax_219,bl_212,bLoc07_954,bp_37,bx_225,C_217,cl_55,cs_44,cx_60,CZ_54,dh_58,di_41,dl_57,ds_53,dx_56,es_42,SCZO_956,si_40,SO_960,sp_965,ss_38,SZO_963,wLoc02_4,wLoc04_16,wLoc06_962,wLoc0A_10,wLoc0C_13,wLoc0E_19,Z_955
		defs: ah_990,al_980,ax_977,bl_982,bp_968,bx_981,C_978,cl_986,cs_975,cx_976,CZ_985,dh_989,di_972,dl_988,ds_984,dx_987,es_973,SCZO_970,si_971,SO_979,sp_967,ss_969,SZO_974,Z_983
	sp_132 = sp_967 + 0x0002
	ax_131 = ax_977
	al_222 = (byte) ax_977 (alias)
	branch ax_977 < 0x0000 l0800_1C5A
// DataOut: al ax ds sp ss
// DataOut (flags): 
// SymbolicIn: sp:<invalid> bp:fp - 0x0002 di:0x0241 cx:<invalid> ax:(int16) al bx:<invalid> -16(fp):<invalid> -14(fp):es -12(fp):di -10(fp):si -7(fp):<invalid> -6(fp):<invalid> -4(fp):0x0001 -2(fp):bp 10(fp):<invalid>
// LocalsOut: fp(16) Local -0004(16) Local -0006(16) Local -0007(0) Stack +0006(16) Stack +0008(16) Stack +000A(16) Stack +000C(16) Stack +000E(16)

l0800_1C5A:
	wLoc04_124 = 0xFFFF
// DataOut: ax ds sp ss
// DataOut (flags): 
// SymbolicIn: sp:<invalid> bp:fp - 0x0002 di:0x0241 cx:<invalid> ax:<invalid> bx:<invalid> -16(fp):<invalid> -14(fp):es -12(fp):di -10(fp):si -7(fp):<invalid> -6(fp):<invalid> -4(fp):0x0001 -2(fp):bp 10(fp):<invalid>
// LocalsOut: fp(16) Local -0004(16) Local -0006(16) Stack +0006(16) Stack +000C(16) Stack +000E(16)

l0800_1C24:
	word16 si_418
	word16 di_419
	word16 ax_424
	byte cl_297 = (byte) wArg08
	branch wArg08 == 0x0000 l0800_1C7B
// DataOut: al ax cl cx di ds si sp ss
// DataOut (flags): 
// SymbolicIn: sp:<invalid> bp:fp - 0x0002 di:0x0241 cx:<invalid> ax:<invalid> bx:<invalid> -16(fp):<invalid> -14(fp):es -12(fp):di -10(fp):si -7(fp):<invalid> -6(fp):<invalid> -4(fp):0x0001 -2(fp):bp 10(fp):<invalid>
// LocalsOut: fp(16) Local -0004(16) Local -0006(16) Local -0007(0) Stack +0006(16) Stack +0008(16) Stack +000A(16) Stack +000C(16) Stack +000E(16)

l0800_1C7B:
	wArg08 = 0x000A
	branch al_222 != 0x30 l0800_1CA7
// DataOut: al di ds si sp ss
// DataOut (flags): 
// SymbolicIn: sp:<invalid> bp:fp - 0x0002 di:0x0000 cx:<invalid> ax:<invalid> bx:<invalid> si:0x0000 -16(fp):<invalid> -14(fp):es -12(fp):di -10(fp):si -7(fp):<invalid> -6(fp):<invalid> -4(fp):0x0001 -2(fp):bp 10(fp):<invalid>
// LocalsOut: fp(16) Local -0004(16) Local -0006(16) Local -0007(0) Stack +0006(16) Stack +0008(16) Stack +000A(16) Stack +000C(16) Stack +000E(16)

l0800_1C84:
	word16 v75_909 = wArg0A_227 - 0x0001
	wArg0A_227 = v75_909
	branch v75_909 < 0x0000 l0800_1C78
// DataOut: al di ds si sp ss
// DataOut (flags): 
// SymbolicIn: sp:<invalid> bp:fp - 0x0002 di:0x0000 cx:<invalid> ax:<invalid> bx:<invalid> si:0x0000 -16(fp):<invalid> -14(fp):es -12(fp):di -10(fp):si -7(fp):<invalid> -6(fp):<invalid> -4(fp):0x0001 -2(fp):bp 8(fp):0x000A 10(fp):<invalid>
// LocalsOut: fp(16) Local -0004(16) Local -0006(16) Local -0007(0) Stack +0006(16) Stack +000A(16) Stack +000C(16) Stack +000E(16)

l0800_1C89:
	word16 sp_917 = sp_132 - 0x0002
	Mem918[ss:sp_917:word16] = wArg06
	wLoc06_128 = wLoc06_128 + 0x0001
	word16 sp_919
	byte SCZO_922
	selector es_925
	byte SZO_926
	word16 cx_928
	byte C_930
	byte SO_931
	byte al_932
	word16 bx_933
	byte bl_934
	byte Z_935
	byte CZ_937
	byte cl_938
	word16 dx_939
	byte dl_940
	byte dh_941
	byte ah_942
	call SEQ(cs_272, Mem918[ss:bp_288 + 0x0004:word16]) (retsize: 2; depth: 2)
		uses: ah_280,al_279,ax_283,bl_270,bLoc07_266,bp_288,bx_286,C_284,cl_297,cs_272,cx_295,CZ_268,dh_277,di_293,dl_276,ds_269,dx_285,es_287,SCZO_906,si_290,SO_912,sp_917,ss_273,SZO_915,wLoc02_4,wLoc04_16,wLoc06_914,wLoc0A_10,wLoc0C_13,wLoc0E_19,Z_907
		defs: ah_942,al_932,ax_929,bl_934,bp_920,bx_933,C_930,cl_938,cs_927,cx_928,CZ_937,dh_941,di_924,dl_940,ds_936,dx_939,es_925,SCZO_922,si_923,SO_931,sp_919,ss_921,SZO_926,Z_935
	sp_132 = sp_919 + 0x0002
	wArg08 = 0x0008
	branch al_932 == 0x78 l0800_1CA0
// DataOut: al di ds si sp ss
// DataOut (flags): 
// SymbolicIn: sp:<invalid> bp:fp - 0x0002 di:0x0000 cx:<invalid> ax:<invalid> bx:<invalid> si:0x0000 -16(fp):<invalid> -14(fp):es -12(fp):di -10(fp):si -7(fp):<invalid> -6(fp):<invalid> -4(fp):0x0001 -2(fp):bp 8(fp):0x000A 10(fp):<invalid>
// LocalsOut: fp(16) Local -0004(16) Local -0006(16) Local -0007(0) Stack +0006(16) Stack +0008(16) Stack +000A(16) Stack +000C(16) Stack +000E(16)

l0800_1C9C:
	branch al_932 != 0x58 l0800_1CCD
// DataOut: al di ds si sp ss
// DataOut (flags): 
// SymbolicIn: sp:<invalid> bp:fp - 0x0002 di:0x0000 cx:<invalid> ax:<invalid> bx:<invalid> si:0x0000 -16(fp):<invalid> -14(fp):es -12(fp):di -10(fp):si -7(fp):<invalid> -6(fp):<invalid> -4(fp):0x0001 -2(fp):bp 8(fp):0x0008 10(fp):<invalid>
// LocalsOut: fp(16) Local -0004(16) Local -0006(16) Local -0007(0) Stack +0006(16) Stack +0008(16) Stack +000A(16) Stack +000C(16) Stack +000E(16)

l0800_1CA0:
	wArg08 = 0x0010
// DataOut: al di ds si sp ss
// DataOut (flags): 
// SymbolicIn: sp:<invalid> bp:fp - 0x0002 di:0x0000 cx:<invalid> ax:<invalid> bx:<invalid> si:0x0000 -16(fp):<invalid> -14(fp):es -12(fp):di -10(fp):si -7(fp):<invalid> -6(fp):<invalid> -4(fp):0x0001 -2(fp):bp 8(fp):0x0008 10(fp):<invalid>
// LocalsOut: fp(16) Local -0004(16) Local -0006(16) Local -0007(0) Stack +0006(16) Stack +0008(16) Stack +000A(16) Stack +000C(16) Stack +000E(16)

l0800_1C2D:
	branch wArg08 >u 0x0024 l0800_1C61
// DataOut: al ax cl di ds si sp ss
// DataOut (flags): 
// SymbolicIn: sp:<invalid> bp:fp - 0x0002 di:0x0000 cx:<invalid> ax:<invalid> bx:<invalid> si:0x0000 -16(fp):<invalid> -14(fp):es -12(fp):di -10(fp):si -7(fp):<invalid> -6(fp):<invalid> -4(fp):0x0001 -2(fp):bp 10(fp):<invalid>
// LocalsOut: fp(16) Local -0004(16) Local -0006(16) Local -0007(0) Stack +0006(16) Stack +0008(16) Stack +000A(16) Stack +000C(16) Stack +000E(16)

l0800_1C32:
	branch cl_297 <u 0x02 l0800_1C61
// DataOut: al ax cl di ds si sp ss
// DataOut (flags): 
// SymbolicIn: sp:<invalid> bp:fp - 0x0002 di:0x0000 cx:<invalid> ax:<invalid> bx:<invalid> si:0x0000 -16(fp):<invalid> -14(fp):es -12(fp):di -10(fp):si -7(fp):<invalid> -6(fp):<invalid> -4(fp):0x0001 -2(fp):bp 10(fp):<invalid>
// LocalsOut: fp(16) Local -0004(16) Local -0006(16) Local -0007(0) Stack +0006(16) Stack +0008(16) Stack +000A(16) Stack +000C(16) Stack +000E(16)

l0800_1C37:
	branch al_222 != 0x30 l0800_1CA7
// DataOut: al cl di ds si sp ss
// DataOut (flags): 
// SymbolicIn: sp:<invalid> bp:fp - 0x0002 di:0x0000 cx:<invalid> ax:<invalid> bx:<invalid> si:0x0000 -16(fp):<invalid> -14(fp):es -12(fp):di -10(fp):si -7(fp):<invalid> -6(fp):<invalid> -4(fp):0x0001 -2(fp):bp 10(fp):<invalid>
// LocalsOut: fp(16) Local -0004(16) Local -0006(16) Local -0007(0) Stack +0006(16) Stack +0008(16) Stack +000A(16) Stack +000C(16) Stack +000E(16)

l0800_1CA7:
	byte bl_839
	branch fn0800_1B9E(0x0A, (byte) ax_131, out bl_839) l0800_1C61
// DataOut: ax di ds sp ss
// DataOut (flags): 
// SymbolicIn: sp:<invalid> bp:fp - 0x0002 di:0x0000 cx:<invalid> ax:<invalid> bx:<invalid> si:0x0000 -16(fp):<invalid> -14(fp):es -12(fp):di -10(fp):si -7(fp):<invalid> -6(fp):<invalid> -4(fp):0x0001 -2(fp):bp 8(fp):0x000A 10(fp):<invalid>
// LocalsOut: fp(16) Local -0004(16) Local -0006(16) Local -0007(0) Stack +0006(16) Stack +0008(16) Stack +000A(16) Stack +000C(16) Stack +000E(16)

l0800_1C61:
	wLoc04_124 = 0x0000
// DataOut: ax ds sp ss
// DataOut (flags): 
// SymbolicIn: sp:<invalid> bp:fp - 0x0002 di:<invalid> cx:<invalid> ax:<invalid> bx:<invalid> si:0x0000 bl:<invalid> bh:<invalid> -16(fp):<invalid> -14(fp):es -12(fp):di -10(fp):si -7(fp):<invalid> -6(fp):<invalid> -4(fp):0x0001 -2(fp):bp 8(fp):0x000A 10(fp):<invalid>
// LocalsOut: fp(16) Local -0004(16) Local -0006(16) Stack +0006(16) Stack +000C(16) Stack +000E(16)

l0800_1C66:
	word16 sp_134 = sp_132 - 0x0002
	Mem135[ss:sp_134:word16] = wArg06
	Mem137[ss:sp_134 - 0x0002:word16] = ax_131
	word16 sp_138
	word16 bp_139
	selector ss_140
	byte SCZO_141
	word16 si_142
	word16 di_143
	selector es_144
	byte SZO_145
	selector cs_146
	word16 cx_147
	word16 ax_148
	byte C_149
	byte SO_150
	byte al_151
	word16 bx_152
	byte bl_153
	byte Z_154
	byte CZ_156
	byte cl_157
	word16 dx_158
	byte dl_159
	byte dh_160
	byte ah_161
	call SEQ(cs_44, Mem137[ss:bp_37 + 0x0006:word16]) (retsize: 2; depth: 2)
		uses: ah_67,al_66,ax_131,bl_51,bLoc07_121,bp_37,bx_50,C_71,cl_55,cs_44,cx_60,CZ_54,dh_58,di_41,dl_57,ds_53,dx_56,es_42,SCZO_39,si_40,SO_70,sp_136,ss_126,SZO_69,wLoc02_4,wLoc04_124,wLoc06_128,wLoc0A_10,wLoc0C_13,wLoc0E_19,Z_52
		defs: ah_161,al_151,ax_148,bl_153,bp_139,bx_152,C_149,cl_157,cs_146,cx_147,CZ_156,dh_160,di_143,dl_159,ds_155,dx_158,es_144,SCZO_141,si_142,SO_150,sp_138,ss_140,SZO_145,Z_154
	wLoc06_128 = wLoc06_128 - 0x0001
// DataOut: ds sp ss
// DataOut (flags): 
// SymbolicIn: sp:<invalid> bp:fp - 0x0002 di:<invalid> cx:<invalid> ax:<invalid> bx:<invalid> si:0x0000 bl:<invalid> bh:<invalid> -16(fp):<invalid> -14(fp):es -12(fp):di -10(fp):si -7(fp):<invalid> -6(fp):<invalid> -4(fp):<invalid> -2(fp):bp 8(fp):0x000A 10(fp):<invalid>
// LocalsOut: fp(16) Local -0004(16) Local -0006(16) Stack +000C(16) Stack +000E(16)

l0800_1CB1:
// DataOut: al di ds si sp ss
// DataOut (flags): 
// SymbolicIn: sp:<invalid> bp:fp - 0x0002 di:0x0000 cx:0x000A ax:<invalid> bx:<invalid> si:0x0000 bl:<invalid> bh:<invalid> -16(fp):<invalid> -14(fp):es -12(fp):di -10(fp):si -7(fp):<invalid> -6(fp):<invalid> -4(fp):0x0001 -2(fp):bp 8(fp):0x000A 10(fp):<invalid>
// LocalsOut: fp(16) Local -0004(16) Local -0006(16) Local -0007(0) Stack +0006(16) Stack +0008(16) Stack +000A(16) Stack +000C(16) Stack +000E(16)

l0800_1C3B:
	branch cl_297 != 0x10 l0800_1CA5
// DataOut: al di ds si sp ss
// DataOut (flags): 
// SymbolicIn: sp:<invalid> bp:fp - 0x0002 di:0x0000 cx:<invalid> ax:<invalid> bx:<invalid> si:0x0000 -16(fp):<invalid> -14(fp):es -12(fp):di -10(fp):si -7(fp):<invalid> -6(fp):<invalid> -4(fp):0x0001 -2(fp):bp 10(fp):<invalid>
// LocalsOut: fp(16) Local -0004(16) Local -0006(16) Local -0007(0) Stack +0006(16) Stack +0008(16) Stack +000A(16) Stack +000C(16) Stack +000E(16)

l0800_1C40:
	word16 v31_865 = wArg0A_227 - 0x0001
	wArg0A_227 = v31_865
	branch v31_865 < 0x0000 l0800_1C78
// DataOut: al di ds si sp ss
// DataOut (flags): 
// SymbolicIn: sp:<invalid> bp:fp - 0x0002 di:0x0000 cx:<invalid> ax:<invalid> bx:<invalid> si:0x0000 -16(fp):<invalid> -14(fp):es -12(fp):di -10(fp):si -7(fp):<invalid> -6(fp):<invalid> -4(fp):0x0001 -2(fp):bp 10(fp):<invalid>
// LocalsOut: fp(16) Local -0004(16) Local -0006(16) Local -0007(0) Stack +0006(16) Stack +0008(16) Stack +000A(16) Stack +000C(16) Stack +000E(16)

l0800_1C78:
// DataOut: di ds si sp ss
// DataOut (flags): 
// SymbolicIn: sp:<invalid> bp:fp - 0x0002 di:0x0000 cx:<invalid> ax:<invalid> bx:<invalid> si:0x0000 -16(fp):<invalid> -14(fp):es -12(fp):di -10(fp):si -7(fp):<invalid> -6(fp):<invalid> -4(fp):0x0001 -2(fp):bp 8(fp):0x000A 10(fp):<invalid>
// LocalsOut: fp(16) Local -0004(16) Local -0006(16) Local -0007(0) Stack +000C(16) Stack +000E(16)

l0800_1C45:
	word16 sp_873 = sp_132 - 0x0002
	Mem874[ss:sp_873:word16] = wArg06
	wLoc06_128 = wLoc06_128 + 0x0001
	word16 sp_875
	byte SCZO_878
	selector es_881
	byte SZO_882
	word16 cx_884
	byte C_886
	byte SO_887
	byte al_888
	word16 bx_889
	byte bl_890
	byte Z_891
	byte CZ_893
	byte cl_894
	word16 dx_895
	byte dl_896
	byte dh_897
	byte ah_898
	call SEQ(cs_272, Mem874[ss:bp_288 + 0x0004:word16]) (retsize: 2; depth: 2)
		uses: ah_280,al_279,ax_283,bl_270,bLoc07_266,bp_288,bx_286,C_860,cl_297,cs_272,cx_295,CZ_858,dh_277,di_293,dl_276,ds_269,dx_285,es_287,SCZO_863,si_290,SO_868,sp_873,ss_273,SZO_871,wLoc02_4,wLoc04_16,wLoc06_870,wLoc0A_10,wLoc0C_13,wLoc0E_19,Z_864
		defs: ah_898,al_888,ax_885,bl_890,bp_876,bx_889,C_886,cl_894,cs_883,cx_884,CZ_893,dh_897,di_880,dl_896,ds_892,dx_895,es_881,SCZO_878,si_879,SO_887,sp_875,ss_877,SZO_882,Z_891
	sp_132 = sp_875 + 0x0002
	branch al_888 == 0x78 l0800_1CA5
// DataOut: al di ds si sp ss
// DataOut (flags): 
// SymbolicIn: sp:<invalid> bp:fp - 0x0002 di:0x0000 cx:<invalid> ax:<invalid> bx:<invalid> si:0x0000 -16(fp):<invalid> -14(fp):es -12(fp):di -10(fp):si -7(fp):<invalid> -6(fp):<invalid> -4(fp):0x0001 -2(fp):bp 10(fp):<invalid>
// LocalsOut: fp(16) Local -0004(16) Local -0006(16) Local -0007(0) Stack +0006(16) Stack +0008(16) Stack +000A(16) Stack +000C(16) Stack +000E(16)

l0800_1C53:
	branch al_888 == 0x58 l0800_1CA5
// DataOut: al di ds si sp ss
// DataOut (flags): 
// SymbolicIn: sp:<invalid> bp:fp - 0x0002 di:0x0000 cx:<invalid> ax:<invalid> bx:<invalid> si:0x0000 -16(fp):<invalid> -14(fp):es -12(fp):di -10(fp):si -7(fp):<invalid> -6(fp):<invalid> -4(fp):0x0001 -2(fp):bp 10(fp):<invalid>
// LocalsOut: fp(16) Local -0004(16) Local -0006(16) Local -0007(0) Stack +0006(16) Stack +0008(16) Stack +000A(16) Stack +000C(16) Stack +000E(16)

l0800_1CA5:
// DataOut: al di ds si sp ss
// DataOut (flags): 
// SymbolicIn: sp:<invalid> bp:fp - 0x0002 di:0x0000 cx:<invalid> ax:<invalid> bx:<invalid> si:0x0000 -16(fp):<invalid> -14(fp):es -12(fp):di -10(fp):si -7(fp):<invalid> -6(fp):<invalid> -4(fp):0x0001 -2(fp):bp 8(fp):0x0010 10(fp):<invalid>
// LocalsOut: fp(16) Local -0004(16) Local -0006(16) Local -0007(0) Stack +0006(16) Stack +0008(16) Stack +000A(16) Stack +000C(16) Stack +000E(16)

l0800_1C57:
// DataOut: al di ds si sp ss
// DataOut (flags): 
// SymbolicIn: sp:<invalid> bp:fp - 0x0002 di:0x0000 cx:<invalid> ax:<invalid> bx:<invalid> si:0x0000 -16(fp):<invalid> -14(fp):es -12(fp):di -10(fp):si -7(fp):<invalid> -6(fp):<invalid> -4(fp):0x0001 -2(fp):bp 10(fp):<invalid>
// LocalsOut: fp(16) Local -0004(16) Local -0006(16) Local -0007(0) Stack +0006(16) Stack +0008(16) Stack +000A(16) Stack +000C(16) Stack +000E(16)

l0800_1CCD:
	byte cl_465 = (byte) wArg08
	byte bl_470
	byte C_471 = fn0800_1B9E(cl_465, (byte) ax_424, out bl_470)
	word16 ax_473 = ax_424
	branch C_471 l0800_1CB4
// DataOut: ax di ds si sp ss
// DataOut (flags): 
// SymbolicIn: sp:<invalid> bp:fp - 0x0002 di:<invalid> cx:<invalid> ax:<invalid> bx:<invalid> si:<invalid> bl:<invalid> bh:<invalid> Sequence dx:ax:<invalid> -16(fp):<invalid> -14(fp):es -12(fp):di -10(fp):si -7(fp):<invalid> -6(fp):<invalid> -4(fp):0x0001 -2(fp):bp 8(fp):<invalid> 10(fp):<invalid>
// LocalsOut: fp(16) Local -0004(16) Local -0006(16) Local -0007(0) Stack +0006(16) Stack +0008(16) Stack +000A(16) Stack +000C(16) Stack +000E(16)

l0800_1CB4:
	int32 dx_ax_602 = wArg08 *u si_418
	cs_620 = cs_272
	bp_641 = bp_288
	branch SEQ(di_419, ax_424 + (word16) dx_ax_602) + dx_ax_602 != 0x00000000 l0800_1CEA
// DataOut: al di ds si sp ss
// DataOut (flags): 
// SymbolicIn: sp:<invalid> bp:fp - 0x0002 di:<invalid> cx:<invalid> ax:<invalid> bx:<invalid> si:<invalid> bl:<invalid> bh:<invalid> Sequence dx:ax:<invalid> -16(fp):<invalid> -14(fp):es -12(fp):di -10(fp):si -7(fp):<invalid> -6(fp):<invalid> -4(fp):0x0001 -2(fp):bp 8(fp):<invalid> 10(fp):<invalid>
// LocalsOut: fp(16) Local -0004(16) Local -0006(16) Local -0007(0) Stack +0006(16) Stack +0008(16) Stack +000A(16) Stack +000C(16) Stack +000E(16)

l0800_1CEA:
	selector cs_620
	word16 bp_641
	word16 v51_643 = wArg0A_227 - 0x0001
	branch v51_643 < 0x0000 l0800_1D0F
	wArg0A_227 = v51_643 - 0x0001
	branch v51_643 < 0x0001 l0800_1D0F
// DataOut: al di ds si sp ss
// DataOut (flags): 
// SymbolicIn: sp:<invalid> bp:fp - 0x0002 di:<invalid> cx:<invalid> ax:<invalid> bx:<invalid> si:<invalid> bl:<invalid> bh:<invalid> Sequence dx:ax:<invalid> dx:<invalid> dl:<invalid> -16(fp):<invalid> -14(fp):es -12(fp):di -10(fp):si -7(fp):<invalid> -6(fp):<invalid> -4(fp):0x0001 -2(fp):bp 8(fp):<invalid> 10(fp):<invalid>
// LocalsOut: fp(16) Local -0004(16) Local -0006(16) Local -0007(0) Stack +0006(16) Stack +0008(16) Stack +000A(16) Stack +000C(16) Stack +000E(16)

l0800_1CEF:
	word16 sp_655 = sp_132 - 0x0002
	Mem656[ss:sp_655:word16] = wArg06
	word16 sp_657
	word16 bp_658
	selector ss_659
	byte SCZO_660
	word16 si_661
	word16 di_662
	selector es_663
	byte SZO_664
	selector cs_665
	word16 cx_666
	word16 ax_667
	byte C_668
	byte SO_669
	byte al_670
	word16 bx_671
	byte bl_672
	byte Z_673
	selector ds_674
	byte CZ_675
	byte cl_676
	word16 dx_677
	byte dl_678
	byte dh_679
	byte ah_680
	call SEQ(cs_620, Mem656[ss:bp_641 + 0x0004:word16]) (retsize: 2; depth: 2)
		uses: ah_629,al_628,ax_633,bl_619,bLoc07_266,bp_641,bx_637,C_634,cl_616,cs_620,cx_622,CZ_617,dh_626,di_639,dl_625,ds_618,dx_635,es_638,SCZO_636,si_640,SO_650,sp_655,ss_621,SZO_653,wLoc02_4,wLoc04_16,wLoc06_652,wLoc0A_10,wLoc0C_13,wLoc0E_19,Z_632
		defs: ah_680,al_670,ax_667,bl_672,bp_658,bx_671,C_668,cl_676,cs_665,cx_666,CZ_675,dh_679,di_662,dl_678,ds_674,dx_677,es_663,SCZO_660,si_661,SO_669,sp_657,ss_659,SZO_664,Z_673
	byte cl_684 = (byte) wArg08
	word16 v52_651 = wLoc06_128 + 0x0001
	byte bl_689
	byte C_690 = fn0800_1B9E(cl_684, (byte) ax_667, out bl_689)
	branch C_690 l0800_1CD9
	Mem699[ss_659:sp_657:word16] = wArg06
	wLoc06_128 = v52_651 + 0x0001
	word16 sp_700
	byte SCZO_703
	word16 si_704
	word16 di_705
	selector es_706
	byte SZO_707
	word16 cx_709
	word16 ax_710
	byte C_711
	byte SO_712
	byte al_713
	word16 bx_714
	byte bl_715
	byte Z_716
	byte CZ_718
	byte cl_719
	word16 dx_720
	byte dl_721
	byte dh_722
	byte ah_723
	call SEQ(cs_665, Mem699[ss_659:bp_658 + 0x0004:word16]) (retsize: 2; depth: 2)
		uses: ah_680,al_670,ax_692,bl_689,bLoc07_266,bp_658,bx_693,C_690,cl_684,cs_665,cx_683,CZ_675,dh_679,di_662,dl_678,ds_674,dx_677,es_663,SCZO_660,si_661,SO_669,sp_698,ss_659,SZO_696,wLoc02_4,wLoc04_16,wLoc06_695,wLoc0A_10,wLoc0C_13,wLoc0E_19,Z_673
		defs: ah_723,al_713,ax_710,bl_715,bp_701,bx_714,C_711,cl_719,cs_708,cx_709,CZ_718,dh_722,di_705,dl_721,ds_717,dx_720,es_706,SCZO_703,si_704,SO_712,sp_700,ss_702,SZO_707,Z_716
	sp_132 = sp_700 + 0x0002
	ax_473 = ax_710
	byte bl_733
	branch fn0800_1B9E((byte) wArg08, (byte) ax_710, out bl_733) l0800_1CD9
// DataOut: ax cx di ds si sp ss
// DataOut (flags): 
// SymbolicIn: sp:<invalid> bp:fp - 0x0002 di:<invalid> cx:<invalid> ax:<invalid> bx:<invalid> si:<invalid> bl:<invalid> bh:<invalid> Sequence dx:ax:<invalid> dx:<invalid> dl:<invalid> -16(fp):<invalid> -14(fp):es -12(fp):di -10(fp):si -7(fp):<invalid> -6(fp):<invalid> -4(fp):0x0001 -2(fp):bp 8(fp):<invalid> 10(fp):<invalid>
// LocalsOut: fp(16) Local -0004(16) Local -0006(16) Local -0007(0) Stack +0006(16) Stack +0008(16) Stack +000A(16) Stack +000C(16) Stack +000E(16)

l0800_1CD9:
	int32 dx_ax_746 = wArg08 *u si_704
	word16 ax_747 = (word16) dx_ax_746
	int32 dx_ax_756 = wArg08 *u di_705
	branch SLICE(dx_ax_756, byte, 16) + SLICE(dx_ax_756, byte, 24) + (SEQ(di_705, ax_710 + ax_747) + SEQ(SLICE(dx_ax_746, word16, 16), ax_747) <u 0x00000000) != 0x00 l0800_1D32
// DataOut: al di ds si sp ss
// DataOut (flags): 
// SymbolicIn: sp:<invalid> bp:fp - 0x0002 di:<invalid> cx:<invalid> ax:<invalid> bx:<invalid> si:<invalid> bl:<invalid> bh:<invalid> Sequence dx:ax:<invalid> dx:<invalid> dl:<invalid> -16(fp):<invalid> -14(fp):es -12(fp):di -10(fp):si -7(fp):<invalid> -6(fp):<invalid> -4(fp):0x0001 -2(fp):bp 8(fp):<invalid> 10(fp):<invalid>
// LocalsOut: fp(16) Local -0004(16) Local -0006(16) Local -0007(0) Stack +0006(16) Stack +0008(16) Stack +000A(16) Stack +000C(16) Stack +000E(16)

l0800_1D32:
	wLoc04_124 = 0x0002
// DataOut: ds sp ss
// DataOut (flags): 
// SymbolicIn: sp:<invalid> bp:fp - 0x0002 di:<invalid> cx:<invalid> ax:<invalid> bx:<invalid> si:<invalid> bl:<invalid> bh:<invalid> Sequence dx:ax:<invalid> dx:<invalid> dl:<invalid> -16(fp):<invalid> -14(fp):es -12(fp):di -10(fp):si -7(fp):<invalid> -6(fp):<invalid> -4(fp):0x0001 -2(fp):bp 8(fp):<invalid> 10(fp):<invalid>
// LocalsOut: fp(16) Local -0004(16) Local -0006(16) Stack +000C(16) Stack +000E(16)

l0800_1CBE:
	word16 v40_368 = wArg0A_227 - 0x0001
	branch v40_368 < 0x0000 l0800_1D0F
	wArg0A_227 = v40_368 - 0x0001
	branch v40_368 < 0x0001 l0800_1D0F
// DataOut: al di ds si sp ss
// DataOut (flags): 
// SymbolicIn: sp:<invalid> bp:fp - 0x0002 di:<invalid> cx:<invalid> ax:<invalid> bx:<invalid> si:<invalid> bl:<invalid> bh:<invalid> Sequence dx:ax:<invalid> -16(fp):<invalid> -14(fp):es -12(fp):di -10(fp):si -7(fp):<invalid> -6(fp):<invalid> -4(fp):0x0001 -2(fp):bp 8(fp):<invalid> 10(fp):<invalid>
// LocalsOut: fp(16) Local -0004(16) Local -0006(16) Local -0007(0) Stack +0006(16) Stack +0008(16) Stack +000A(16) Stack +000C(16) Stack +000E(16)

l0800_1CC3:
	word16 sp_380 = sp_132 - 0x0002
	Mem381[ss:sp_380:word16] = wArg06
	word16 sp_382
	word16 bp_383
	selector ss_384
	byte SCZO_385
	word16 si_386
	word16 di_387
	selector es_388
	byte SZO_389
	selector cs_390
	word16 cx_391
	word16 ax_392
	byte C_393
	byte SO_394
	byte al_395
	word16 bx_396
	byte bl_397
	byte Z_398
	selector ds_399
	byte CZ_400
	byte cl_401
	word16 dx_402
	byte dl_403
	byte dh_404
	byte ah_405
	call SEQ(cs_272, Mem381[ss:bp_288 + 0x0004:word16]) (retsize: 2; depth: 2)
		uses: ah_354,al_353,ax_358,bl_344,bLoc07_266,bp_366,bx_362,C_359,cl_341,cs_345,cx_347,CZ_342,dh_351,di_364,dl_350,ds_343,dx_360,es_363,SCZO_361,si_365,SO_375,sp_380,ss_346,SZO_378,wLoc02_4,wLoc04_16,wLoc06_377,wLoc0A_10,wLoc0C_13,wLoc0E_19,Z_357
		defs: ah_405,al_395,ax_392,bl_397,bp_383,bx_396,C_393,cl_401,cs_390,cx_391,CZ_400,dh_404,di_387,dl_403,ds_399,dx_402,es_388,SCZO_385,si_386,SO_394,sp_382,ss_384,SZO_389,Z_398
	Mem413[ss_384:sp_382:word16] = wArg06
	wLoc06_128 = wLoc06_128 + 0x0002
	word16 sp_414
	byte SCZO_417
	selector es_420
	byte SZO_421
	word16 cx_423
	byte C_425
	byte SO_426
	byte al_427
	word16 bx_428
	byte bl_429
	byte Z_430
	byte CZ_432
	byte cl_433
	word16 dx_434
	byte dl_435
	byte dh_436
	byte ah_437
	call SEQ(cs_390, Mem413[ss_384:bp_383 + 0x0004:word16]) (retsize: 2; depth: 2)
		uses: ah_405,al_395,ax_392,bl_397,bLoc07_266,bp_383,bx_396,C_393,cl_401,cs_390,cx_406,CZ_400,dh_404,di_387,dl_403,ds_399,dx_402,es_388,SCZO_385,si_386,SO_394,sp_412,ss_384,SZO_410,wLoc02_4,wLoc04_16,wLoc06_409,wLoc0A_10,wLoc0C_13,wLoc0E_19,Z_398
		defs: ah_437,al_427,ax_424,bl_429,bp_415,bx_428,C_425,cl_433,cs_422,cx_423,CZ_432,dh_436,di_419,dl_435,ds_431,dx_434,es_420,SCZO_417,si_418,SO_426,sp_414,ss_416,SZO_421,Z_430
	sp_132 = sp_414 + 0x0002
// DataOut: al di ds si sp ss
// DataOut (flags): 
// SymbolicIn: sp:<invalid> bp:fp - 0x0002 di:<invalid> cx:<invalid> ax:<invalid> bx:<invalid> si:<invalid> bl:<invalid> bh:<invalid> Sequence dx:ax:<invalid> -16(fp):<invalid> -14(fp):es -12(fp):di -10(fp):si -7(fp):<invalid> -6(fp):<invalid> -4(fp):0x0001 -2(fp):bp 8(fp):<invalid> 10(fp):<invalid>
// LocalsOut: fp(16) Local -0004(16) Local -0006(16) Local -0007(0) Stack +0006(16) Stack +0008(16) Stack +000A(16) Stack +000C(16) Stack +000E(16)

l0800_1CD7:
// DataOut: ax di ds si sp ss
// DataOut (flags): 
// SymbolicIn: sp:<invalid> bp:fp - 0x0002 di:<invalid> cx:<invalid> ax:<invalid> bx:<invalid> si:<invalid> bl:<invalid> bh:<invalid> Sequence dx:ax:<invalid> -16(fp):<invalid> -14(fp):es -12(fp):di -10(fp):si -7(fp):<invalid> -6(fp):<invalid> -4(fp):0x0001 -2(fp):bp 8(fp):<invalid> 10(fp):<invalid>
// LocalsOut: fp(16) Local -0004(16) Local -0006(16) Local -0007(0) Stack +0006(16) Stack +000C(16) Stack +000E(16)

l0800_1D03:
	word16 sp_490 = sp_132 - 0x0002
	Mem491[ss:sp_490:word16] = wArg06
	Mem493[ss:sp_490 - 0x0002:word16] = ax_473
	word16 sp_494
	word16 bp_495
	selector ss_496
	byte SCZO_497
	word16 si_498
	word16 di_499
	selector es_500
	byte SZO_501
	selector cs_502
	word16 cx_503
	word16 ax_504
	byte C_505
	byte SO_506
	byte al_507
	word16 bx_508
	byte bl_509
	byte Z_510
	selector ds_511
	byte CZ_512
	byte cl_513
	word16 dx_514
	byte dl_515
	byte dh_516
	byte ah_517
	call SEQ(cs_272, Mem493[ss:bp_288 + 0x0006:word16]) (retsize: 2; depth: 2)
		uses: ah_477,al_476,ax_487,bl_470,bLoc07_266,bp_461,bx_479,C_471,cl_465,cs_447,cx_463,CZ_444,dh_452,di_459,dl_451,ds_445,dx_455,es_458,SCZO_456,si_460,SO_446,sp_492,ss_482,SZO_450,wLoc02_4,wLoc04_16,wLoc06_483,wLoc0A_10,wLoc0C_13,wLoc0E_19,Z_453
		defs: ah_517,al_507,ax_504,bl_509,bp_495,bx_508,C_505,cl_513,cs_502,cx_503,CZ_512,dh_516,di_499,dl_515,ds_511,dx_514,es_500,SCZO_497,si_498,SO_506,sp_494,ss_496,SZO_501,Z_510
	Mem527[ss_496:sp_494 + 0x0002:word16] = wArg06
	Mem529[ss_496:sp_494:word16] = ax_504
	word16 sp_530
	word16 bp_531
	selector ss_532
	byte SCZO_533
	word16 si_534
	word16 di_535
	selector es_536
	byte SZO_537
	selector cs_538
	word16 cx_539
	word16 ax_540
	byte C_541
	byte SO_542
	byte al_543
	word16 bx_544
	byte bl_545
	byte Z_546
	selector ds_547
	byte CZ_548
	byte cl_549
	word16 dx_550
	byte dl_551
	byte dh_552
	byte ah_553
	call SEQ(cs_502, Mem529[ss_496:bp_495 + 0x0006:word16]) (retsize: 2; depth: 2)
		uses: ah_517,al_507,ax_504,bl_509,bLoc07_266,bp_495,bx_508,C_505,cl_513,cs_502,cx_520,CZ_512,dh_516,di_499,dl_515,ds_511,dx_514,es_500,SCZO_497,si_498,SO_506,sp_528,ss_496,SZO_524,wLoc02_4,wLoc04_16,wLoc06_523,wLoc0A_10,wLoc0C_13,wLoc0E_19,Z_510
		defs: ah_553,al_543,ax_540,bl_545,bp_531,bx_544,C_541,cl_549,cs_538,cx_539,CZ_548,dh_552,di_535,dl_551,ds_547,dx_550,es_536,SCZO_533,si_534,SO_542,sp_530,ss_532,SZO_537,Z_546
	Mem563[ss_532:sp_530 + 0x0002:word16] = wArg06
	Mem565[ss_532:sp_530:word16] = ax_540
	word16 sp_566
	word16 bp_567
	selector ss_568
	byte SCZO_569
	word16 si_570
	word16 di_571
	selector es_572
	byte SZO_573
	selector cs_574
	word16 cx_575
	word16 ax_576
	byte C_577
	byte SO_578
	byte al_579
	word16 bx_580
	byte bl_581
	byte Z_582
	byte CZ_584
	byte cl_585
	word16 dx_586
	byte dl_587
	byte dh_588
	byte ah_589
	call SEQ(cs_538, Mem565[ss_532:bp_531 + 0x0006:word16]) (retsize: 2; depth: 2)
		uses: ah_553,al_543,ax_540,bl_545,bLoc07_266,bp_531,bx_544,C_541,cl_549,cs_538,cx_556,CZ_548,dh_552,di_535,dl_551,ds_547,dx_550,es_536,SCZO_533,si_534,SO_542,sp_564,ss_532,SZO_560,wLoc02_4,wLoc04_16,wLoc06_559,wLoc0A_10,wLoc0C_13,wLoc0E_19,Z_546
		defs: ah_589,al_579,ax_576,bl_581,bp_567,bx_580,C_577,cl_585,cs_574,cx_575,CZ_584,dh_588,di_571,dl_587,ds_583,dx_586,es_572,SCZO_569,si_570,SO_578,sp_566,ss_568,SZO_573,Z_582
	wLoc06_128 = wLoc06_128 - 0x0003
// DataOut: di ds si sp ss
// DataOut (flags): 
// SymbolicIn: sp:<invalid> bp:fp - 0x0002 di:<invalid> cx:<invalid> ax:<invalid> bx:<invalid> si:<invalid> bl:<invalid> bh:<invalid> Sequence dx:ax:<invalid> dx:<invalid> dl:<invalid> -16(fp):<invalid> -14(fp):es -12(fp):di -10(fp):si -7(fp):<invalid> -6(fp):<invalid> -4(fp):0x0001 -2(fp):bp 8(fp):<invalid> 10(fp):<invalid>
// LocalsOut: fp(16) Local -0004(16) Local -0006(16) Local -0007(0) Stack +000C(16) Stack +000E(16)

l0800_1D0F:
	branch bLoc07_1005 == 0x00 l0800_1D1F
// DataOut: ax ds dx sp ss
// DataOut (flags): 
// SymbolicIn: sp:<invalid> bp:fp - 0x0002 di:<invalid> cx:<invalid> ax:<invalid> bx:<invalid> si:<invalid> bl:<invalid> bh:<invalid> Sequence dx:ax:<invalid> dx:<invalid> dl:<invalid> -16(fp):<invalid> -14(fp):es -12(fp):di -10(fp):si -7(fp):<invalid> -6(fp):<invalid> -4(fp):0x0001 -2(fp):bp 8(fp):<invalid> 10(fp):<invalid>
// LocalsOut: fp(16) Local -0004(16) Local -0006(16) Stack +000C(16) Stack +000E(16)

l0800_1D18:
// DataOut: ds sp ss
// DataOut (flags): 
// SymbolicIn: sp:<invalid> bp:fp - 0x0002 di:<invalid> cx:<invalid> ax:<invalid> bx:<invalid> si:<invalid> dx:<invalid> bl:<invalid> bh:<invalid> Sequence dx:ax:<invalid> dl:<invalid> -16(fp):<invalid> -14(fp):es -12(fp):di -10(fp):si -7(fp):<invalid> -6(fp):<invalid> -4(fp):0x0001 -2(fp):bp 8(fp):<invalid> 10(fp):<invalid>
// LocalsOut: fp(16) Local -0004(16) Local -0006(16) Stack +000C(16) Stack +000E(16)

l0800_1D1F:
	Mem107[ds_155:wArg0C:word16] = Mem34[ds_155:wArg0C:word16] + wLoc06_128
	Mem112[ds_155:wArg0E:word16] = wLoc04_124
// DataOut: sp ss
// DataOut (flags): 
// SymbolicIn: sp:<invalid> bp:fp - 0x0002 di:<invalid> cx:<invalid> ax:<invalid> Sequence dx:ax:<invalid> bx:<invalid> si:<invalid> dx:<invalid> bl:<invalid> bh:<invalid> dl:<invalid> al:<invalid> ah:<invalid> -16(fp):<invalid> -14(fp):es -12(fp):di -10(fp):si -7(fp):<invalid> -6(fp):<invalid> -4(fp):<invalid> -2(fp):bp 8(fp):<invalid> 10(fp):<invalid>
// LocalsOut: fp(16)

l0800_1D48:
	return
// DataOut:
// DataOut (flags): 
// SymbolicIn: sp:<invalid> bp:fp - 0x0002 di:<invalid> cx:<invalid> ax:<invalid> Sequence dx:ax:<invalid> bx:<invalid> es:<invalid> si:<invalid> dx:<invalid> bl:<invalid> bh:<invalid> dl:<invalid> al:<invalid> ah:<invalid> -16(fp):<invalid> -14(fp):es -12(fp):di -10(fp):si -7(fp):<invalid> -6(fp):<invalid> -4(fp):<invalid> -2(fp):bp 8(fp):<invalid> 10(fp):<invalid>

fn0800_1BCC_exit:
// DataOut:
// DataOut (flags): 
// SymbolicIn: sp:fp bp:bp di:<invalid> cx:<invalid> ax:<invalid> Sequence dx:ax:<invalid> bx:<invalid> es:<invalid> si:<invalid> dx:<invalid> bl:<invalid> bh:<invalid> dl:<invalid> al:<invalid> ah:<invalid> -16(fp):<invalid> -14(fp):es -12(fp):di -10(fp):si -7(fp):<invalid> -6(fp):<invalid> -4(fp):<invalid> -2(fp):bp 8(fp):<invalid> 10(fp):<invalid>



void fn0800_1D4E(selector ds, word16 wArg02)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  ds
// LiveOut:
// Trashed: SCZO ah al ax bh bl bx ch cl cx dh dl dx eax ebx ecx edx rax rbx rcx rdx
// Preserved: bp sp
// Stack args: Stack +0002(16)
fn0800_1D4E_entry:
// DataOut: ds
// DataOut (flags): 
// SymbolicIn: sp:fp
// LocalsOut: fp(16) Stack +0002(16)

l0800_1D4E:
	word16 dx_23
	fn0800_0C28(0x00, ds, wArg02, 0x0000, 0x0000, 0x01, out dx_23)
// DataOut:
// DataOut (flags): 
// SymbolicIn: sp:fp

l0800_1D63:
	return
// DataOut:
// DataOut (flags): 
// SymbolicIn: sp:fp - 0x0002 bp:fp - 0x0002 ax:<invalid> bx:<invalid> ah:0x42 al:<invalid> cx:<invalid> dx:<invalid> -10(fp):<invalid> -8(fp):0x0000 -6(fp):0x0000 -4(fp):0x0001 -2(fp):bp

fn0800_1D4E_exit:
// DataOut:
// DataOut (flags): 
// SymbolicIn: sp:fp bp:bp ax:<invalid> bx:<invalid> ah:0x42 al:<invalid> cx:<invalid> dx:<invalid> -10(fp):<invalid> -8(fp):0x0000 -6(fp):0x0000 -4(fp):0x0001 -2(fp):bp



