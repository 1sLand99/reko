byte fn0800_0150(ptr16 & dxOut, ptr16 & bxOut, ptr16 & esOut)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  ss:[0..15]
// LiveOut: ah bx dx es
// Trashed: SCZO ah bx dx es Top
// Preserved: di si sp
fn0800_0150_entry:
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_0150:
	selector es_5 = Mem0[0x0800:0x025A:selector]
	word16 bx_16
	word16 dx_17
	byte ah_15 = fn0800_01E6(0x2714, 0x2714, es_5, out dx_17, out bx_16)
	dxOut = dx_17
	bxOut = bx_16
	esOut = es_5
	return ah_15
// DataOut:
// DataOut (flags):
// SymbolicIn:

fn0800_0150_exit:
// DataOut:
// DataOut (flags):
// SymbolicIn:



void fn0800_0163()
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse: 
// LiveOut:
// Trashed: Top
// Preserved: sp
fn0800_0163_entry:
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_0163:
	return
// DataOut:
// DataOut (flags):
// SymbolicIn:

fn0800_0163_exit:
// DataOut:
// DataOut (flags):
// SymbolicIn:



void fn0800_0164(byte bArg02)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  Stack +0002:[0..7]
// LiveOut:
// Trashed:
// Preserved: sp
// Terminates process
fn0800_0164_exit:
// DataOut:
// DataOut (flags):
// SymbolicIn:

fn0800_0164_entry:
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_0164:
	msdos_terminate(bArg02)
// DataOut:
// DataOut (flags):
// SymbolicIn:



void fn0800_0176(selector ds)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  cs:[0..15] ds:[0..15]
// LiveOut:
// Trashed: ax bx dx es Top
// Preserved: ds sp
fn0800_0176_entry:
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_0176:
	word32 es_bx_10 = msdos_get_interrupt_vector(0x00)
	Mem12[ds:0x005B:word16] = (word16) es_bx_10
	Mem14[ds:0x005D:word16] = SLICE(es_bx_10, selector, 16)
	word32 es_bx_17 = msdos_get_interrupt_vector(0x04)
	Mem19[ds:0x005F:word16] = (word16) es_bx_17
	Mem21[ds:0x0061:word16] = SLICE(es_bx_17, selector, 16)
	word32 es_bx_24 = msdos_get_interrupt_vector(0x05)
	Mem26[ds:0x0063:word16] = (word16) es_bx_24
	Mem28[ds:0x0065:word16] = SLICE(es_bx_24, selector, 16)
	word32 es_bx_31 = msdos_get_interrupt_vector(0x06)
	Mem33[ds:0x0067:word16] = (word16) es_bx_31
	Mem35[ds:0x0069:word16] = SLICE(es_bx_31, selector, 16)
	msdos_set_interrupt_vector(0x00, SEQ(cs, 0x016D))
	return
// DataOut:
// DataOut (flags):
// SymbolicIn:

fn0800_0176_exit:
// DataOut:
// DataOut (flags):
// SymbolicIn:



word16 fn0800_01B9(selector ds, ptr16 & dxOut)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  ds:[0..15]
// LiveOut: ax dx
// Trashed: ax dx Top
// Preserved: ds sp
fn0800_01B9_entry:
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_01B9:
	msdos_set_interrupt_vector(0x00, Mem7[ds:0x005B:segptr32])
	msdos_set_interrupt_vector(0x04, Mem16[ds:0x005F:segptr32])
	msdos_set_interrupt_vector(0x05, Mem25[ds:0x0063:segptr32])
	ptr32 ds_dx_36 = Mem34[ds:0x0067:segptr32]
	msdos_set_interrupt_vector(0x06, ds_dx_36)
	dxOut = (word16) ds_dx_36
	return 0x2506
// DataOut:
// DataOut (flags):
// SymbolicIn:

fn0800_01B9_exit:
// DataOut:
// DataOut (flags):
// SymbolicIn:



byte fn0800_01E6(word16 si, word16 di, selector es, ptr16 & dxOut, ptr16 & bxOut)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  di:[0..15] es:[0..15] si:[0..15] ss:[0..15]
// LiveOut: ah bx dx
// Trashed: SCZO ah bx dx Top
// Preserved: es sp
fn0800_01E6_entry:
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_01E6:
	byte ah_35
	branch si == 0x26FC l0800_01F0
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_01F0:
	ah_35 = 0xFF
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_01EC:
	ah_35 = 0x00
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_01F2:
	word16 dx_13 = di
	word16 bx_15 = si
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_01F6:
	branch bx_15 == di l0800_021D
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_021D:
	branch dx_13 == di l0800_023C
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_023C:
	dxOut = dx_13
	bxOut = bx_15
	return ah_35
// DataOut:
// DataOut (flags):
// SymbolicIn:

fn0800_01E6_exit:
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_0221:
	Mem27[es:dx_13:byte] = 0xFF
	branch Mem85[es:dx_13:byte] == 0x00 l0800_0235
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_0235:
	word16 sp_33
	call SEQ(0x0800, Mem31[es:dx_13 + 0x0002:word16]) (retsize: 2;)
		uses: ah:ah_35,bx:dx_20,di:di,dx:dx_20,es:es_81,si:si,sp:fp - 2,ss:ss,Stack +0002:es_81,Top:0
		defs: sp:sp_33
	es = Mem31[ss:sp_33:selector]
	Mem85 = Mem31
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_022E:
	word16 sp_44
	call Mem31[es:dx_13 + 0x0002:ptr32] (retsize: 4;)
		uses: ah:ah_35,bx:dx_20,di:di,dx:dx_20,es:es_81,si:si,sp:fp - 2,ss:ss,Stack +0004:es_81,Top:0
		defs: sp:sp_44
	es = Mem31[ss:sp_44:selector]
	Mem85 = Mem31
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_01FA:
	branch Mem85[es:bx_15:byte] == 0xFF l0800_0218
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_0200:
	byte CZ_58
	branch si == 0x26FC l0800_020C
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_020C:
	CZ_58 = SLICE(cond(Mem85[es:bx_15 + 0x0001:byte] - ah_35), bool, 2) (alias)
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_0206:
	CZ_58 = SLICE(cond(ah_35 - Mem85[es:bx_15 + 0x0001:byte]), bool, 2) (alias)
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_0210:
	branch CZ_58 l0800_0218
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_0212:
	ah_35 = Mem85[es:bx_15 + 0x0001:byte]
	dx_13 = bx_15
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_0218:
	bx_15 = bx_15 + 0x0006
// DataOut:
// DataOut (flags):
// SymbolicIn:



void fn0800_023D(word16 cx, word16 dx, selector ds)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  cx:[0..15] ds:[0..15] dx:[0..15]
// LiveOut:
// Trashed: C ax bx Top
// Preserved: sp
fn0800_023D_entry:
	word32 ds_dx_9 = SEQ(ds, dx)
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_023D:
	word16 ax_10
	msdos_write_file(0x0002, cx, ds_dx_9, out ax_10)
	return
// DataOut:
// DataOut (flags):
// SymbolicIn:

fn0800_023D_exit:
// DataOut:
// DataOut (flags):
// SymbolicIn:



void main(selector es, selector ds)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  ds:[0..15] es:[0..15] ss:[0..15]
// LiveOut:
// Trashed: SCZDO ax bp bx cx di ds dx es si sp Top
// Preserved: P
main_entry:
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_025E:
	Mem15[ds:0x2A27:word16] = 0x0001
	Mem16[ds:0x2E4D:word16] = 0x0000
	Mem17[ds:0x2A1F:word16] = 0x0000
	Mem18[ds:0x2E4F:word16] = 0x0000
	Mem19[ds:0x2A1D:word16] = 0x0000
	Mem20[ds:0x2A17:word16] = 0x0000
	Mem21[ds:0x2A1B:word16] = 0x0000
	Mem22[ds:0x2A11:word16] = 0x0000
	Mem23[ds:0x2A0F:word16] = 0x0000
	Mem24[ds:0x2A0D:word16] = 0x0000
	Mem25[ds:0x2A0B:word16] = 0x3000
	Mem26[ds:0x2E31:word16] = 0x8000
	Mem27[ds:0x2E2F:word16] = 0x1000
	Mem28[ds:0x2A21:word16] = 0x0001
	Mem29[ds:0x29F5:word16] = 0x0000
	Mem30[ds:0x29F3:word16] = 0x0000
	Mem31[ds:0x29F1:word16] = 0x0000
	Mem32[ds:0x29EF:word16] = 0x0000
	Mem33[ds:0x2A13:word16] = 0x0000
	Mem34[ds:0x2A23:word16] = 0x0001
	word16 bx_36
	word16 dx_38
	word16 cx_37 = fn0800_2C9A(ds, out dx_38, out bx_36)
	word16 di_54
	fn0800_B2EF(cx_37, dx_38, bx_36, ds, 0x07E8, ds, out si_482, out di_54)
	word16 sp_84
	selector ds_134 = fn0800_0541(fn0800_0402(cx_37, dx_38, bx_36, es, ds), di_54, ds)
	Mem91[ss:sp_84 - 2:word16] = 0x0001
	Mem93[ss:sp_84 - 4:word16] = 0x0001
	fn0800_2DBF(ds_134, Mem93[ss:sp_84 - 4:word16], Mem93[ss:sp_84 - 2:word16])
	Mem100[ss:sp_84 - 2:word16] = 0x0000
	Mem102[ss:sp_84 - 4:word16] = 0x0000
	word16 bp_104
	word16 cx_106
	word16 dx_108
	word16 sp_111
	word16 ax_103 = fn0800_9764(ds_134, out cx_106, out dx_108, out bp_104, out si_483, out di_484)
	Mem118[ss:bp_104 - 0x0002:word16] = dx_108
	Mem119[ss:bp_104 - 0x0004:word16] = ax_103
	word16 sp_117 = sp_111 + 0x0004
	word16 bx_120 = Mem119[ds_134:0x2A25:word16]
	branch bx_120 >u 0x0008 l0800_0338
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_031A:
	switch (bx_120 << 0x0001) { l0800_0321 l0800_0330 l0800_0330 l0800_0326 l0800_0326 l0800_032B l0800_0335 l0800_0335 l0800_0335 }
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_0335:
	ds_134 = fn0800_19EE(cx_106, dx_108, ds_134)
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_032B:
	ds_134 = fn0800_18D9(cx_106, dx_108, ds_134)
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_0326:
	ds_134 = fn0800_12E2(cx_106, dx_108, ds_134)
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_0330:
	ds_134 = fn0800_112D(cx_106, dx_108, ds_134)
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_0321:
	ds_134 = fn0800_0DE8(cx_106, dx_108, ds_134)
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_0338:
	word16 sp_222 = sp_117 - 2
	Mem224[ss:sp_222:word16] = 0x0000
	Mem226[ss:sp_222 - 2:word16] = 0x0000
	word16 bp_229
	word16 di_232
	word16 dx_233
	word16 si_235
	word16 sp_236
	word32 dx_ax_469 = SEQ(dx_233, fn0800_9764(ds_134, out cx_485, out dx_233, out bp_229, out si_235, out di_232)) - SEQ(Mem226[ss:bp_229 - 0x0002:word16], Mem226[ss:bp_229 - 0x0004:word16])
	Mem248[ss:bp_229 - 0x0002:word16] = SLICE(dx_ax_469, word16, 16)
	Mem249[ss:bp_229 - 0x0004:word16] = (word16) dx_ax_469
	Mem252[ss:sp_236 + 0x0002:word16] = Mem249[ds_134:0x29F1:word16]
	Mem255[ss:sp_236:word16] = Mem252[ds_134:0x29EF:word16]
	Mem258[ss:sp_236 - 2:word16] = Mem255[ds_134:0x29F5:word16]
	Mem261[ss:sp_236 - 4:word16] = Mem258[ds_134:0x29F3:word16]
	word16 di_265
	word16 ax_262 = fn0800_0B79(si_235, di_232, Mem261[ss:sp_236 - 4:word16], Mem261[ss:sp_236 - 2:word16], Mem261[ss:sp_236:word16], Mem261[ss:sp_236 + 2:word16], out di_265)
	Mem279[ss:sp_236 + 0x0002:word16] = 0x0000
	Mem281[ss:sp_236:word16] = 0x003C
	Mem284[ss:sp_236 - 2:word16] = Mem281[ss:bp_229 - 0x0002:word16]
	Mem287[ss:sp_236 - 4:word16] = Mem284[ss:bp_229 - 0x0004:word16]
	// Failed to bind call argument.
	// Please report this issue at https://github.com/uxmal/reko
	word16 stackArg0 = <invalid>
	word16 bp_289
	word16 di_292
	word16 dx_293
	word16 si_294
	word16 sp_295
	word16 ax_288 = fn0800_8BCA(bp_229, ax_262, di_265, stackArg0, out dx_293, out bp_289, out si_294, out di_292)
	Mem301[ss:sp_295 - 2:word16] = dx_293
	Mem303[ss:sp_295 - 4:word16] = ax_288
	Mem309[ss:sp_295 - 6:word16] = 0x0000
	Mem311[ss:sp_295 - 8:word16] = 0x003C
	Mem314[ss:sp_295 - 10:word16] = 0x0000
	Mem316[ss:sp_295 - 12:word16] = 0x0E10
	Mem319[ss:sp_295 - 14:word16] = Mem316[ss:bp_289 - 0x0002:word16]
	Mem322[ss:sp_295 - 16:word16] = Mem319[ss:bp_289 - 0x0004:word16]
	// Failed to bind call argument.
	// Please report this issue at https://github.com/uxmal/reko
	word16 stackArg0 = <invalid>
	word16 bp_324
	word16 di_327
	word16 dx_328
	word16 si_329
	word16 sp_330
	word16 ax_323 = fn0800_8BCA(bp_289, si_294, di_292, stackArg0, out dx_328, out bp_324, out si_329, out di_327)
	Mem336[ss:sp_330 - 2:word16] = dx_328
	Mem338[ss:sp_330 - 4:word16] = ax_323
	// Failed to bind call argument.
	// Please report this issue at https://github.com/uxmal/reko
	word16 stackArg0 = <invalid>
	word16 bp_340
	word16 di_343
	word16 dx_344
	word16 si_345
	word16 sp_346
	word16 ax_339 = fn0800_8BBB(bp_324, si_329, di_327, stackArg0, out cx_489, out dx_344, out bx_490, out bp_340, out si_345, out di_343)
	Mem352[ss:sp_346 - 2:word16] = dx_344
	Mem354[ss:sp_346 - 4:word16] = ax_339
	Mem360[ss:sp_346 - 6:word16] = 0x0000
	Mem362[ss:sp_346 - 8:word16] = 0x0E10
	Mem365[ss:sp_346 - 10:word16] = 0x0000
	Mem367[ss:sp_346 - 12:word16] = 0x5180
	Mem370[ss:sp_346 - 14:word16] = Mem367[ss:bp_340 - 0x0002:word16]
	Mem373[ss:sp_346 - 16:word16] = Mem370[ss:bp_340 - 0x0004:word16]
	// Failed to bind call argument.
	// Please report this issue at https://github.com/uxmal/reko
	word16 stackArg0 = <invalid>
	word16 bp_375
	word16 di_378
	word16 dx_379
	word16 si_380
	word16 sp_381
	word16 ax_374 = fn0800_8BCA(bp_340, si_345, di_343, stackArg0, out dx_379, out bp_375, out si_380, out di_378)
	Mem387[ss:sp_381 - 2:word16] = dx_379
	Mem389[ss:sp_381 - 4:word16] = ax_374
	// Failed to bind call argument.
	// Please report this issue at https://github.com/uxmal/reko
	word16 stackArg0 = <invalid>
	word16 cx_393
	word16 dx_395
	word16 si_396
	word16 sp_397
	word16 ax_390 = fn0800_8BBB(bp_375, si_380, di_378, stackArg0, out cx_393, out dx_395, out bx_493, out bp_391, out si_396, out di_494)
	Mem403[ss:sp_397 - 2:word16] = dx_395
	Mem405[ss:sp_397 - 4:word16] = ax_390
	Mem414[ss:sp_397 - 6:word16] = (uint16) ((uint32) (uint16) si_396 % 0x0064)
	word32 dx_ax_417 = (uint32) (uint16) si_396
	Mem423[ss:sp_397 - 8:word16] = (uint16) (dx_ax_417 /u 0x0064)
	Mem426[ss:sp_397 - 10:word16] = Mem423[ds_134:0x29F1:word16]
	Mem429[ss:sp_397 - 12:word16] = Mem426[ds_134:0x29EF:word16]
	Mem432[ss:sp_397 - 14:word16] = Mem429[ds_134:0x29F5:word16]
	Mem435[ss:sp_397 - 16:word16] = Mem432[ds_134:0x29F3:word16]
	Mem437[ss:sp_397 - 18:word16] = ds_134
	Mem440[ss:sp_397 - 20:word16] = 0x05DC
	Mem443[ss:sp_397 - 22:word16] = 0x0008
	Mem446[ss:sp_397 - 24:word16] = Mem443[ds_134:0x2A13:word16]
	Mem448[ss:sp_397 - 26:word16] = ds_134
	Mem451[ss:sp_397 - 28:word16] = 0x07EB
	fn0800_B2EF(cx_393, (uint16) (dx_ax_417 % 0x0064), 0x0064, ds_134, Mem451[ss:sp_397 - 28:word16], Mem451[ss:sp_397 - 26:word16], out si_495, out di_496)
	return
// DataOut:
// DataOut (flags):
// SymbolicIn:

main_exit:
// DataOut:
// DataOut (flags):
// SymbolicIn:



word16 fn0800_0402(word16 cx, word16 dx, word16 bx, selector es, selector ds)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  bx:[0..15] cx:[0..15] ds:[0..15] dx:[0..15] es:[0..15] ss:[0..15]
// LiveOut: cx
// Trashed: SCZDO ax bx cx dx es Top
// Preserved: di ds si sp
fn0800_0402_entry:
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_0402:
	branch Mem10[ds:0x2A27:word16] != Mem10[ds:0x269A:word16] l0800_0410
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_040D:
	fn0800_0DCE(cx, dx, bx, es, ds, out si_618, out di_619)
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_0410:
	ptr32 es_bx_37 = Mem10[ds:0x269C:segptr32]
	// Failed to bind call argument.
	// Please report this issue at https://github.com/uxmal/reko
	selector es_41 = SLICE(es_bx_37, selector, 16)
	word16 bx_39 = (word16) es_bx_37 + (Mem10[ds:0x2A27:word16] << 0x0002)
	word16 stackArg4 = <invalid>
	word16 cx_175
	branch fn0800_BFC7(SEQ(Mem10[es_41:bx_39 + 0x0002:word16], Mem46[es_41:bx_39:word16]), stackArg4, out cx_175, out es_617) <=u 0x0001 l0800_044D
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_042F:
	ptr32 es_bx_64 = Mem49[ds:0x269C:segptr32]
	// Failed to bind call argument.
	// Please report this issue at https://github.com/uxmal/reko
	selector es_68 = SLICE(es_bx_64, selector, 16)
	word16 bx_66 = (word16) es_bx_64 + (Mem49[ds:0x2A27:word16] << 0x0002)
	word16 stackArg6 = <invalid>
	fn0800_0D24(ds, 0x0001, SEQ(Mem49[es_68:bx_66 + 0x0002:word16], Mem71[es_68:bx_66:word16]), stackArg6, out cx_175, out dx_621, out bx_622, out si_623, out di_624, out es_625, out ds, out Top_626)
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_044D:
	word16 ax_96 = Mem95[ds:0x2A27:word16]
	byte cl_119
	word16 bx_118
	word16 dx_120
	selector es_121
	word16 ax_117 = fn0800_0C29(ds, 0x0829, ds, DPB(ax_96 << 0x0002, Mem95[Mem95[ds:(word16) Mem95[ds:0x269C:segptr32] + (ax_96 << 0x0002):segptr32]:byte], 0), out cl_119, out dx_120, out bx_118, out es_121)
	Mem127[ds:0x2A25:word16] = ax_117
	word16 cx_149 = DPB(cx_175, cl_119, 0)
	branch ax_117 < 0x0009 l0800_0492
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_0474:
	ptr32 es_bx_133 = Mem127[ds:0x269C:segptr32]
	// Failed to bind call argument.
	// Please report this issue at https://github.com/uxmal/reko
	selector es_137 = SLICE(es_bx_133, selector, 16)
	word16 bx_135 = (word16) es_bx_133 + (Mem127[ds:0x2A27:word16] << 0x0002)
	word16 stackArg6 = <invalid>
	fn0800_0D24(ds, 0x0001, SEQ(Mem127[es_137:bx_135 + 0x0002:word16], Mem140[es_137:bx_135:word16]), stackArg6, out cx_149, out dx_120, out bx_118, out si_628, out di_629, out es_121, out ds, out Top_630)
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_0492:
	Mem166[ds:0x2A27:word16] = Mem164[ds:0x2A27:word16] + 0x0001
	branch Mem166[ds:0x2A25:word16] > 0x0002 l0800_04A0
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_04A0:
	branch Mem166[ds:0x2A27:word16] != Mem166[ds:0x269A:word16] l0800_04AC
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_04A9:
	fn0800_0DCE(cx_149, dx_120, bx_118, es_121, ds, out si_632, out di_633)
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_04AC:
	word16 ax_194 = Mem166[ds:0x2A27:word16]
	Mem196[ds:0x2A27:word16] = Mem166[ds:0x2A27:word16] + 0x0001
	ptr32 es_bx_199 = Mem196[ds:0x269C:segptr32]
	// Failed to bind call argument.
	// Please report this issue at https://github.com/uxmal/reko
	selector es_203 = SLICE(es_bx_199, selector, 16)
	word16 bx_201 = (word16) es_bx_199 + (ax_194 << 0x0002)
	word16 stackArg4 = <invalid>
	fn0800_BF9E(SEQ(ds, 0x4348), stackArg4, SEQ(Mem196[es_203:bx_201 + 0x0002:word16], Mem209[es_203:bx_201:word16]))
	fn0800_0C6C(ds, SEQ(ds, 0x4348))
	word16 di_247 = 0x4348
	word16 cx_251 = 0xFFFF
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_04E4:
	branch cx_251 == 0x0000 l0800_04E6
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_04E4_1:
	di_247 = di_247 + 0x0001
	cx_251 = cx_251 - 0x0001
	branch Mem244[ds:di_247:byte] == 0x00 l0800_04E4
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_04E6:
	word16 di_265 = di_247 - 0x0001
	word16 cx_262 = ~cx_251
	bool Z_276 = SLICE(cond(di_265), bool, 2)
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_04ED:
	branch cx_262 == 0x0000 l0800_04EF
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_04ED_2:
	Z_276 = SLICE(cond(0x2E - Mem244[ds:di_265:byte]), bool, 2) (alias)
	di_265 = di_265 - 0x0001
	cx_262 = cx_262 - 0x0001
	branch Mem244[ds:di_265:byte] == 0x2E l0800_04ED
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_04EF:
	branch Z_276 l0800_04F8
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_04F1:
	di_265 = 0xFFFF
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_04F8:
	word16 di_287 = di_265 + 0x0001
	word16 di_313 = 0x4348
	word16 cx_317 = 0xFFFF
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_0507:
	branch cx_317 == 0x0000 l0800_0509
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_0507_1:
	di_313 = di_313 + 0x0001
	cx_317 = cx_317 - 0x0001
	branch Mem312[ds:di_313:byte] == 0x00 l0800_0507
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_0509:
	cx_149 = ~cx_317
	word16 di_331 = di_313 - cx_149
	bool Z_341 = SLICE(cond(di_331), bool, 2)
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_0510:
	branch cx_149 == 0x0000 l0800_0512
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_0510_2:
	Z_341 = SLICE(cond(0x5C - Mem312[ds:di_331:byte]), bool, 2) (alias)
	di_331 = di_331 + 0x0001
	cx_149 = cx_149 - 0x0001
	branch Mem312[ds:di_331:byte] == 0x5C l0800_0510
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_0512:
	branch Z_341 l0800_051B
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_0514:
	di_331 = 0x0001
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_051B:
	branch di_287 >u di_331 - 0x0001 l0800_0538
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_0523:
	word16 di_378 = 0x4348
	word16 si_379 = 0x0833
	word16 cx_380 = 0xFFFF
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_0530:
	branch cx_380 == 0x0000 l0800_0532
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_0530_1:
	di_378 = di_378 + 0x0001
	cx_380 = cx_380 - 0x0001
	branch Mem375[ds:di_378:byte] == 0x00 l0800_0530
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_0532:
	word16 di_394 = di_378 - 0x0001
	cx_149 = 0x0005
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_0536:
	branch cx_149 == 0x0000 l0800_0538
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_0538:
	Mem400[ds:0x2A19:word16] = 0x0001
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_0536_2:
	Mem406[ds:di_394:byte] = Mem402[ds:si_379:byte]
	si_379 = si_379 + 0x0001
	di_394 = di_394 + 0x0001
	cx_149 = cx_149 - 0x0001
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_049D:
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_053E:
	return cx_149
// DataOut:
// DataOut (flags):
// SymbolicIn:

fn0800_0402_exit:
// DataOut:
// DataOut (flags):
// SymbolicIn:



selector fn0800_0541(byte ch, word16 di, selector ds)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  cx:[8..15] di:[0..15] ds:[0..15] ss:[0..15]
// LiveOut: ds sp
// Trashed: SCZO ax bp bx cx di ds dx es si sp Top
// Preserved: D
fn0800_0541_entry:
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_0541:
	word16 ax_17 = Mem15[ds:0x2A27:word16]
	branch ax_17 != Mem15[ds:0x269A:word16] l0800_0555
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_0555:
	branch Mem15[Mem15[ds:(word16) Mem15[ds:0x269C:segptr32] + (ax_17 << 0x0002):segptr32]:byte] != 0x2D l0800_056B
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_056B:
	branch Mem15[Mem15[ds:(word16) Mem15[ds:0x269C:segptr32] + (Mem15[ds:0x2A27:word16] << 0x0002):segptr32]:byte] != 0x2F l0800_0584
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_0584:
	return ds
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_0581:
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_0568:
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_086D:
	branch Mem48[Mem48[ds:(word16) Mem48[ds:0x269C:segptr32] + (Mem48[ds:0x2A27:word16] << 0x0002):segptr32]:byte] != 0x2D l0800_0886
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_0886:
	branch Mem48[Mem48[ds:(word16) Mem48[ds:0x269C:segptr32] + (Mem48[ds:0x2A27:word16] << 0x0002):segptr32]:byte] != 0x2F l0800_089F
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_089F:
	word16 ax_71 = Mem48[ds:0x2A21:word16]
	branch ax_71 == 0x0001 l0800_08AE
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_08AE:
	word16 di_1744 = 0x4271
	word16 si_107 = 0x085B
	word16 cx_82 = 0xFFFF
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_08BB:
	branch cx_82 == 0x0000 l0800_08BD
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_08BB_1:
	di_1744 = di_1744 + 0x0001
	cx_82 = cx_82 - 0x0001
	branch Mem77[ds:di_1744:byte] == 0x00 l0800_08BB
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_08BD:
	word16 di_110 = di_1744 - 0x0001
	word16 cx_114 = 0x0002
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_08C1:
	branch cx_114 == 0x0000 l0800_08C3
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_08C3:
	branch Mem101[ds:0x2E31:word16] <=u 0x8000 l0800_08D1
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_08CB:
	Mem104[ds:0x2E31:word16] = 0x8000
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_08D1:
	Mem106[ds:0x2E2F:word16] = 0x1000
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_08C1_2:
	Mem111[ds:di_110:byte] = Mem101[ds:si_107:byte]
	si_107 = si_107 + 0x0001
	di_110 = di_110 + 0x0001
	cx_114 = cx_114 - 0x0001
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_08A7:
	branch ax_71 == 0x0002 l0800_08D9
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_08D9:
	word16 di_121 = 0x4271
	word16 si_122 = 0x085D
	word16 cx_123 = 0xFFFF
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_08E6:
	branch cx_123 == 0x0000 l0800_08E8
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_08E6_1:
	di_121 = di_121 + 0x0001
	cx_123 = cx_123 - 0x0001
	branch Mem118[ds:di_121:byte] == 0x00 l0800_08E6
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_08E8:
	word16 di_137 = di_121 - 0x0001
	word16 cx_139 = 0x0002
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_08EC:
	branch cx_139 == 0x0000 l0800_08EE
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_08EE:
	branch Mem142[ds:0x2E31:word16] <=u 0x1000 l0800_08FC
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_08F6:
	Mem145[ds:0x2E31:word16] = 0x1000
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_08FC:
	Mem147[ds:0x2E2F:word16] = 0x00FF
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_08EC_2:
	Mem152[ds:di_137:byte] = Mem142[ds:si_122:byte]
	si_122 = si_122 + 0x0001
	di_137 = di_137 + 0x0001
	cx_139 = cx_139 - 0x0001
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_08AC:
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_0902:
	branch Mem157[ds:0x2A23:word16] != 0x0002 l0800_0911
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_0909:
	Mem163[ds:0x2A1D:word16] = 0x0000
	Mem164[ds:0x2E4F:word16] = 0x0000
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_0911:
	branch Mem166[ds:0x2E4F:word16] == 0x0000 l0800_092D
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_0918:
	word16 di_1746 = 0x4271
	word16 si_194 = 0x0653
	word16 cx_195 = 0xFFFF
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_0925:
	branch cx_195 == 0x0000 l0800_0927
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_0925_1:
	di_1746 = di_1746 + 0x0001
	cx_195 = cx_195 - 0x0001
	branch Mem190[ds:di_1746:byte] == 0x00 l0800_0925
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_0927:
	word16 di_209 = di_1746 - 0x0001
	word16 cx_211 = 0x0002
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_092B:
	branch cx_211 == 0x0000 l0800_092D
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_092D:
	branch Mem215[ds:0x2A1D:word16] == 0x0000 l0800_0949
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_0934:
	word16 di_1747 = 0x4271
	word16 si_228 = 0x085F
	word16 cx_229 = 0xFFFF
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_0941:
	branch cx_229 == 0x0000 l0800_0943
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_0941_1:
	di_1747 = di_1747 + 0x0001
	cx_229 = cx_229 - 0x0001
	branch Mem224[ds:di_1747:byte] == 0x00 l0800_0941
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_0943:
	word16 di_243 = di_1747 - 0x0001
	word16 cx_245 = 0x0002
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_0947:
	branch cx_245 == 0x0000 l0800_0949
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_0949:
	word16 di_1748 = 0x4271
	word16 si_258 = 0x0861
	word16 cx_259 = 0xFFFF
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_0956:
	branch cx_259 == 0x0000 l0800_0958
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_0956_1:
	di_1748 = di_1748 + 0x0001
	cx_259 = cx_259 - 0x0001
	branch Mem254[ds:di_1748:byte] == 0x00 l0800_0956
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_0958:
	word16 di_273 = di_1748 - 0x0001
	word16 cx_275 = 0x0005
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_095C:
	branch cx_275 == 0x0000 l0800_095E
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_095E:
	branch Mem278[ds:0x2A25:word16] != 0x0000 l0800_0987
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_0965:
	branch Mem278[Mem278[ds:(Mem278[ds:0x2A23:word16] << 0x0002) + 0x0545:segptr32]:byte] == 0x00 l0800_0987
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_0977:
	fn0800_09A3(out ds)
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_095C_2:
	Mem323[ds:di_273:byte] = Mem278[ds:si_258:byte]
	si_258 = si_258 + 0x0001
	di_273 = di_273 + 0x0001
	cx_275 = cx_275 - 0x0001
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_0947_2:
	Mem332[ds:di_243:byte] = Mem328[ds:si_228:byte]
	si_228 = si_228 + 0x0001
	di_243 = di_243 + 0x0001
	cx_245 = cx_245 - 0x0001
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_092B_2:
	Mem340[ds:di_209:byte] = Mem216[ds:si_194:byte]
	si_194 = si_194 + 0x0001
	di_209 = di_209 + 0x0001
	cx_211 = cx_211 - 0x0001
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_089C:
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_0883:
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_058A:
	word16 ax_346 = Mem48[ds:0x2A27:word16]
	byte cl_369
	selector es_371
	word16 dx_370
	word16 ax_367 = fn0800_0C29(ds, 0x0838, ds, DPB(ax_346 << 0x0002, Mem48[Mem48[ds:(word16) Mem48[ds:0x269C:segptr32] + (ax_346 << 0x0002):segptr32] + 0x0001:byte], 0), out cl_369, out dx_370, out bx_1709, out es_371)
	cx = DPB(cx, cl_369, 0) (alias)
	word16 si_377 = ax_367
	branch ax_367 < 0x000B l0800_05CF
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_05B1:
	ptr32 es_bx_383 = Mem366[ds:0x269C:segptr32]
	// Failed to bind call argument.
	// Please report this issue at https://github.com/uxmal/reko
	selector es_387 = SLICE(es_bx_383, selector, 16)
	word16 bx_385 = (word16) es_bx_383 + (Mem366[ds:0x2A27:word16] << 0x0002)
	word16 stackArg6 = <invalid>
	fn0800_0D24(ds, 0x0002, SEQ(Mem366[es_387:bx_385 + 0x0002:word16], Mem390[es_387:bx_385:word16]), stackArg6, out cx, out dx_370, out bx_1711, out si_377, out di, out es_371, out ds, out Top_1712)
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_05CF:
	branch si_377 < 0x0006 l0800_05D7
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_05D7:
	word16 dx_491
	word16 ax_490
	word16 dx_453
	word16 ax_452
	ptr32 es_bx_421 = Mem417[ds:0x269C:segptr32]
	// Failed to bind call argument.
	// Please report this issue at https://github.com/uxmal/reko
	selector es_425 = SLICE(es_bx_421, selector, 16)
	word16 bx_423 = (word16) es_bx_421 + (Mem417[ds:0x2A27:word16] << 0x0002)
	word16 stackArg4 = <invalid>
	selector es_436
	branch fn0800_BFC7(SEQ(Mem417[es_425:bx_423 + 0x0002:word16], Mem430[es_425:bx_423:word16]), stackArg4, out cx, out es_436) != 0x0002 l0800_0622
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_0622:
	ptr32 es_bx_448 = Mem433[ds:0x269C:segptr32]
	selector es_451 = SLICE(es_bx_448, selector, 16)
	word16 bx_450 = (word16) es_bx_448 + (Mem433[ds:0x2A27:word16] << 0x0002)
	dx_453 = Mem433[es_451:bx_450:word16]
	ax_452 = Mem433[es_451:bx_450 + 0x0002:word16]
	dx_370 = dx_453 + 0x0002
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_05F6:
	Mem462[ds:0x2A27:word16] = Mem433[ds:0x2A27:word16] + 0x0001
	branch Mem462[ds:0x2A27:word16] != Mem462[ds:0x269A:word16] l0800_0606
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_0603:
	cx = fn0800_0DCE(cx, dx_370, bx_423, es_436, ds, out si_377, out di)
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_0606:
	ptr32 es_bx_485 = Mem462[ds:0x269C:segptr32]
	selector es_489 = SLICE(es_bx_485, selector, 16)
	word16 bx_487 = (word16) es_bx_485 + (Mem462[ds:0x2A27:word16] << 0x0002)
	ax_490 = Mem462[es_489:bx_487 + 0x0002:word16]
	dx_491 = Mem462[es_489:bx_487:word16]
	dx_370 = dx_491
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_063F:
	ptrLoc06_1362 = SEQ(ax_490, dx_491) (alias)
	ptrLoc06_1362 = SEQ(ax_452, dx_453 + 0x0002) (alias)
	es_371 = SLICE(ptrLoc06_1362, selector, 16) (alias)
	branch (int16) Mem498[ptrLoc06_1362:byte] != 0x0000 l0800_0659
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_064A:
	// Failed to bind call argument.
	// Please report this issue at https://github.com/uxmal/reko
	word16 stackArg6 = <invalid>
	fn0800_0D24(ds, 0x0002, SEQ(ds, 0x05DC), stackArg6, out cx, out dx_370, out bx_1742, out si_377, out di, out es_371, out ds, out Top_1743)
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_05D4:
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_0659:
	segptr32 ptrLoc06_1431
	branch si_377 <=u 0x000A l0800_0663
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_0663:
	word16 bx_541 = si_377 << 0x0001
	switch (bx_541) { l0800_069D l0800_0716 l0800_0765 l0800_080A l0800_07A9 l0800_074C l0800_066A l0800_0682 l0800_0679 l0800_068B l0800_0694 }
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_0694:
	Mem544[ds:0x2A15:word16] = 0x0001
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_068B:
	Mem545[ds:0x2A17:word16] = 0x0001
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_0679:
	Mem546[ds:0x2A1D:word16] = 0x0001
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_0682:
	Mem547[ds:0x2A1B:word16] = 0x0001
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_066A:
	Mem548[ds:0x2A1F:word16] = 0x0001
	Mem549[ds:0x2E4F:word16] = 0x0000
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_074C:
	cx = (word16) fn0800_BF18(cx, dx_370, bx_541, si_377, di, es_371, ds, 0x0853, ds, out di)
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_07A9:
	word16 di_1749 = ptrLoc06_1362
	word16 cx_615 = 0xFFFF
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_07BB:
	branch cx_615 == 0x0000 l0800_07BD
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_07BB_1:
	di_1749 = di_1749 + 0x0001
	cx_615 = cx_615 - 0x0001
	branch Mem610[ptrLoc06_1362:di_1749:byte] == 0x00 l0800_07BB
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_07BD:
	word16 cx_626 = ~cx_615
	word16 cx_629 = cx_626 >>u 0x0001
	word16 si_631 = di_1749 - cx_626
	word16 di_637 = 0x42E3
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_07CC:
	branch cx_629 == 0x0000 l0800_07CE
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_07CE:
	word16 cx_650 = cx_629 * 0x0002 + (cx_626 >>u 0x0001 <u 0x0000)
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_07D0:
	branch cx_650 == 0x0000 l0800_07D2
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_07D2:
	fn0800_0C6C(ds, SEQ(ds, 0x42E3))
	di = 0x42E3
	word16 cx_680 = 0xFFFF
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_07E8:
	branch cx_680 == 0x0000 l0800_07EA
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_07E8_1:
	di = di + 0x0001
	cx_680 = cx_680 - 0x0001
	branch Mem673[ds:di:byte] == 0x00 l0800_07E8
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_07EA:
	word16 cx_691 = ~cx_680
	cx = cx_691 - 0x0002
	branch Mem673[ds:cx_691 + 0x42E1:byte] == 0x5C l0800_0869
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_07F7:
	word16 di_1751 = 0x42E3
	word16 si_701 = 0x0859
	word16 cx_702 = 0xFFFF
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_0800:
	branch cx_702 == 0x0000 l0800_0802
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_0800_2:
	di_1751 = di_1751 + 0x0001
	cx_702 = cx_702 - 0x0001
	branch Mem673[ds:di_1751:byte] == 0x00 l0800_0800
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_0802:
	di = di_1751 - 0x0001
	cx = 0x0002
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_0806:
	branch cx == 0x0000 l0800_0808
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_0808:
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_0806_3:
	Mem723[ds:di:byte] = Mem719[ds:si_701:byte]
	si_701 = si_701 + 0x0001
	di = di + 0x0001
	cx = cx - 0x0001
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_07D0_1:
	Mem732[ds:di_637:byte] = Mem655[ptrLoc06_1362:si_631:byte]
	si_631 = si_631 + 0x0001
	di_637 = di_637 + 0x0001
	cx_650 = cx_650 - 0x0001
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_07CC_2:
	Mem742[ds:di_637:word16] = Mem738[ptrLoc06_1362:si_631:word16]
	si_631 = si_631 + 0x0002
	di_637 = di_637 + 0x0002
	cx_629 = cx_629 - 0x0001
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_080A:
	word16 di_1752 = ptrLoc06_1362
	word16 cx_760 = 0xFFFF
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_081C:
	branch cx_760 == 0x0000 l0800_081E
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_081C_1:
	di_1752 = di_1752 + 0x0001
	cx_760 = cx_760 - 0x0001
	branch Mem755[ptrLoc06_1362:di_1752:byte] == 0x00 l0800_081C
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_081E:
	word16 cx_771 = ~cx_760
	word16 cx_774 = cx_771 >>u 0x0001
	word16 si_776 = di_1752 - cx_771
	word16 di_782 = 0x427E
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_082D:
	branch cx_774 == 0x0000 l0800_082F
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_082F:
	word16 cx_795 = cx_774 * 0x0002 + (cx_771 >>u 0x0001 <u 0x0000)
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_0831:
	branch cx_795 == 0x0000 l0800_0833
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_0833:
	fn0800_0C6C(ds, SEQ(ds, 0x427E))
	di = 0x427E
	word16 cx_825 = 0xFFFF
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_0849:
	branch cx_825 == 0x0000 l0800_084B
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_0849_1:
	di = di + 0x0001
	cx_825 = cx_825 - 0x0001
	branch Mem818[ds:di:byte] == 0x00 l0800_0849
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_084B:
	word16 cx_836 = ~cx_825
	cx = cx_836 - 0x0002
	branch Mem818[ds:cx_836 + 0x427C:byte] == 0x5C l0800_0869
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_0858:
	word16 di_1754 = 0x427E
	word16 si_846 = 0x0859
	word16 cx_847 = 0xFFFF
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_0861:
	branch cx_847 == 0x0000 l0800_0863
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_0861_2:
	di_1754 = di_1754 + 0x0001
	cx_847 = cx_847 - 0x0001
	branch Mem818[ds:di_1754:byte] == 0x00 l0800_0861
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_0863:
	di = di_1754 - 0x0001
	cx = 0x0002
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_0867:
	branch cx == 0x0000 l0800_0869
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_0867_3:
	Mem868[ds:di:byte] = Mem864[ds:si_846:byte]
	si_846 = si_846 + 0x0001
	di = di + 0x0001
	cx = cx - 0x0001
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_0831_1:
	Mem877[ds:di_782:byte] = Mem800[ptrLoc06_1362:si_776:byte]
	si_776 = si_776 + 0x0001
	di_782 = di_782 + 0x0001
	cx_795 = cx_795 - 0x0001
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_082D_2:
	Mem887[ds:di_782:word16] = Mem883[ptrLoc06_1362:si_776:word16]
	si_776 = si_776 + 0x0002
	di_782 = di_782 + 0x0002
	cx_774 = cx_774 - 0x0001
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_0765:
	cx = (word16) fn0800_BF18(cx, dx_370, bx_541, si_377, di, es_371, ds, 0x0856, ds, out di)
	branch Mem906[ds:0x2A21:word16] > 0x0002 l0800_0796
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_0782:
	branch Mem906[ds:0x2A21:word16] == 0x0000 l0800_078C
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_078C:
	branch Mem906[ds:0x2A25:word16] == 0x0000 l0800_0796
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_0796:
	// Failed to bind call argument.
	// Please report this issue at https://github.com/uxmal/reko
	word16 stackArg6 = <invalid>
	fn0800_0D24(ds, 0x0005, SEQ(ptrLoc06_1362, ptrLoc06_1362), stackArg6, out cx, out dx_1715, out bx_1716, out si_1717, out di, out es_1718, out ds, out Top_1719)
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_0793:
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_0789:
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_0716:
	cx = (word16) fn0800_BF18(cx, dx_370, bx_541, si_377, di, es_371, ds, 0x084F, ds, out di)
	branch Mem972[ds:0x2E4F:word16] != 0x0000 l0800_0743
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_0733:
	// Failed to bind call argument.
	// Please report this issue at https://github.com/uxmal/reko
	word16 stackArg6 = <invalid>
	fn0800_0D24(ds, 0x0004, SEQ(ptrLoc06_1362, ptrLoc06_1362), stackArg6, out cx, out dx_1721, out bx_1722, out si_1723, out di, out es_1724, out ds, out Top_1725)
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_0743:
	Mem1015[ds:0x2A1F:word16] = 0x0000
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_069D:
	branch Mem1016[ds:0x2A19:word16] == 0x0000 l0800_06A7
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_06A7:
	ptrLoc06_1431 = SEQ(ptrLoc06_1362, ptrLoc06_1362) (alias)
	selector es_1334 = SLICE(ptrLoc06_1431, selector, 16)
	word16 di_1027 = (word16) ptrLoc06_1431
	word16 ax_1020 = 0x0000
	word16 cx_1023 = 0xFFFF
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_06AF:
	ax_1020 = DPB(ax_1020, 0x00, 0) (alias)
	ax_1020 = DPB(ax_1020, 0x00, 0) (alias)
	branch cx_1023 == 0x0000 l0800_06B1
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_06AF_1:
	di_1027 = di_1755 + 0x0001
	cx_1023 = cx_1023 - 0x0001
	di_1755 = di_1027
	branch Mem1016[es_1334:di_1755:byte] == 0x00 l0800_06AF
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_06B1:
	word16 cx_1034 = ~cx_1023
	word16 cx_1035 = cx_1034 - 0x0001
	branch cx_1034 <=u 0x0002 l0800_06C9
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_06B9:
	// Failed to bind call argument.
	// Please report this issue at https://github.com/uxmal/reko
	word16 stackArg6 = <invalid>
	ax_1020 = fn0800_0D24(ds, 0x0003, SEQ(ptrLoc06_1431, ptrLoc06_1431), stackArg6, out cx_1035, out dx_1729, out bx_1730, out si_1731, out di_1732, out es_1733, out ds, out Top_1734)
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_06C9:
	byte cl_1096
	word16 dx_1097
	word16 ax_1094 = fn0800_0C29(ds, 0x0844, ds, DPB(ax_1020, Mem1074[ptrLoc06_1362:byte], 0), out cl_1096, out dx_1097, out bx_1726, out es_1727)
	Mem1104[ds:0x2A23:word16] = ax_1094
	ptrLoc06_1362 = SEQ(ptrLoc06_1431, ptrLoc06_1431) (alias)
	ptrLoc06_1362 = SEQ(ptrLoc06_1431, ptrLoc06_1431) (alias)
	cx = DPB(cx_1035, cl_1096, 0) (alias)
	branch ax_1094 < 0x0006 l0800_06F3
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_06E3:
	// Failed to bind call argument.
	// Please report this issue at https://github.com/uxmal/reko
	word16 stackArg6 = <invalid>
	fn0800_0D24(ds, 0x0003, SEQ(ptrLoc06_1362, ptrLoc06_1362), stackArg6, out cx, out dx_1097, out bx_1736, out si_1737, out di_1738, out es_1739, out ds, out Top_1740)
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_06F3:
	fn0800_BEA2(cx, dx_1097, ds, SEQ(ds, 0x4271), 0x084B, ds, out di)
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_06A4:
	ptrLoc06_1362 = ptrLoc06_1431
	ptrLoc06_1362 = ptrLoc06_1431
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_0660:
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_0869:
	Mem1175[ds:0x2A27:word16] = Mem1173[ds:0x2A27:word16] + 0x0001
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_0552:
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_0987:
	return ds
// DataOut:
// DataOut (flags):
// SymbolicIn:

fn0800_0541_exit:
// DataOut:
// DataOut (flags):
// SymbolicIn:



word16 fn0800_09A3(ptr16 & dsOut)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  ss:[0..15]
// LiveOut: bp ds sp
// Trashed: SCZDO ax bp bx cx di ds dx es si sp Top
// Preserved:
fn0800_09A3_entry:
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_09A3:
	// Failed to bind call argument.
	// Please report this issue at https://github.com/uxmal/reko
	// Failed to bind call argument.
	// Please report this issue at https://github.com/uxmal/reko
	word16 stackArg2 = <invalid>
	word16 stackArg4 = <invalid>
	word16 bp_55
	selector ds_59
	word16 dx_60
	word16 sp_63
	word16 ax_54 = fn0800_4311(stackArg2, stackArg4, out dx_60, out bp_55, out si_433, out di_434, out ds_59)
	Mem71[ss:bp_55 - 0x0002:word16] = dx_60
	Mem72[ss:bp_55 - 0x0004:word16] = ax_54
	Mem73[ss:bp_55 - 0x0006:word16] = dx_60
	Mem74[ss:bp_55 - 0x0008:word16] = ax_54
	Mem77[ss:sp_63 + 0x0002:word16] = Mem74[ss:bp_55 - 0x0002:word16]
	Mem79[ss:sp_63:word16] = ax_54
	Mem81[ss:sp_63 - 2:word16] = ds_59
	Mem84[ss:sp_63 - 4:word16] = 0x0A6E
	word16 sp_94
	selector ds_108
	word16 bp_86 = fn0800_867A(Mem84[ss:sp_63 - 4:word16], Mem84[ss:sp_63 - 2:selector], Mem84[ss:sp_63:word16], Mem84[ss:sp_63 + 2:selector], out ds_108)
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_0A4F:
	word16 dx_272
	word16 si_105 = Mem104[ss:bp_86 + 0x0004:word16]
	Mem109[ss:sp_94 + 0x0006:word16] = ds_108
	ptr32 es_di_111 = Mem109[ss:bp_86 - 0x0008:segptr32]
	selector ds_110 = Mem109[ss:bp_86 + 0x0006:selector]
	selector es_390 = SLICE(es_di_111, selector, 16)
	word16 di_119 = (word16) es_di_111
	word16 ax_112 = 0x0000
	word16 cx_115 = 0xFFFF
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_0A5E:
	ax_112 = DPB(ax_112, 0x00, 0) (alias)
	ax_112 = DPB(ax_112, 0x00, 0) (alias)
	branch cx_115 == 0x0000 l0800_0A60
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_0A5E_1:
	di_119 = di_119 + 0x0001
	cx_115 = cx_115 - 0x0001
	branch Mem109[es_390:di_119:byte] == 0x00 l0800_0A5E
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_0A60:
	word16 cx_126 = ~cx_115
	word16 di_128 = di_119 - cx_126
	bool Z_140 = SLICE(cond(di_128), bool, 2)
	di_135 = di_128
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_0A64:
	word16 di_135
	branch cx_126 == 0x0000 l0800_0A66
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_0A64_2:
	Z_140 = SLICE(cond(Mem109[ds_110:si_440:byte] - Mem109[es_390:di_441:byte]), bool, 2) (alias)
	si_105 = si_440 + 0x0001
	di_135 = di_441 + 0x0001
	cx_126 = cx_126 - 0x0001
	si_440 = si_105
	di_441 = di_135
	branch Mem109[ds_110:si_440:byte] != Mem109[es_390:di_441:byte] l0800_0A64
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_0A66:
	branch Z_140 l0800_0A6D
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_0A68:
	word16 ax_148 = 0x0000 - (di_128 <u 0x0000)
	ax_112 = ax_148 - 0xFFFF - (ax_148 <u 0x0000)
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_0A6D:
	ds_108 = Mem109[ss:sp_94 + 0x0006:selector]
	branch ax_112 != 0x0000 l0800_09FF
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_09FF:
	ptr32 es_di_183 = Mem109[ss:bp_86 - 0x0008:segptr32]
	selector es_399 = SLICE(es_di_183, selector, 16)
	word16 di_191 = (word16) es_di_183
	word16 cx_187 = 0xFFFF
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_0A07:
	branch cx_187 == 0x0000 l0800_0A09
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_0A07_1:
	di_191 = di_442 + 0x0001
	cx_187 = cx_187 - 0x0001
	di_442 = di_191
	branch Mem109[es_399:di_442:byte] == 0x00 l0800_0A07
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_0A09:
	word16 di_213 = Mem109[ss:bp_86 - 0x0008:word16]
	Mem217[ss:sp_94 + 0x0006:word16] = (int16) Mem109[es_399:Mem109[ss:bp_86 - 0x0008:word16] + (~cx_187 - 0x0001) + 0x0001:byte] << 0x08
	word16 cx_221 = 0xFFFF
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_0A25:
	branch cx_221 == 0x0000 l0800_0A27
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_0A25_2:
	di_213 = di_443 + 0x0001
	cx_221 = cx_221 - 0x0001
	di_443 = di_213
	branch Mem217[es_399:di_443:byte] == 0x00 l0800_0A25
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_0A27:
	word16 ax_240 = Mem217[ss:bp_86 - 0x0008:word16] + (~cx_221 - 0x0001)
	word16 dx_251 = Mem217[ss:sp_94 + 0x0006:word16] + DPB(DPB(ax_240, Mem217[es_399:ax_240 + 0x0002:byte], 0), 0x00, 8)
	word16 di_252 = Mem217[ss:bp_86 - 0x0008:word16]
	word16 cx_256 = 0xFFFF
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_0A42:
	branch cx_256 == 0x0000 l0800_0A44
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_0A42_3:
	di_252 = di_444 + 0x0001
	cx_256 = cx_256 - 0x0001
	di_444 = di_252
	branch Mem217[es_399:di_444:byte] == 0x00 l0800_0A42
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_0A44:
	word16 dx_271 = dx_251 + (~cx_256 - 0x0001)
	Mem279[ss:bp_86 - 0x0008:word16] = Mem217[ss:bp_86 - 0x0008:word16] + (dx_271 + 0x0003)
	dx_272 = dx_271 + 0x0003
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_0A72:
	ptr32 es_di_281 = Mem109[ss:bp_86 - 0x0008:segptr32]
	selector es_404 = SLICE(es_di_281, selector, 16)
	word16 di_289 = (word16) es_di_281
	word16 cx_285 = 0xFFFF
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_0A7A:
	branch cx_285 == 0x0000 l0800_0A7C
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_0A7A_1:
	di_289 = di_445 + 0x0001
	cx_285 = cx_285 - 0x0001
	di_445 = di_289
	branch Mem109[es_404:di_445:byte] == 0x00 l0800_0A7A
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_0A7C:
	Mem305[ss:bp_86 - 0x0008:word16] = Mem109[ss:bp_86 - 0x0008:word16] + ~cx_285
	ptr32 es_bx_306 = Mem305[ss:bp_86 - 0x0008:segptr32]
	Mem331[ss:sp_94 + 0x0006:word16] = ((int16) Mem305[es_bx_306:byte] << 0x08) + DPB(DPB(dx_272, Mem305[es_bx_306 + 0x0001:byte], 0), 0x00, 8) + 0x0002
	Mem334[ss:sp_94 + 0x0004:word16] = Mem331[ss:bp_86 - 0x0006:word16]
	Mem336[ss:sp_94 + 0x0002:word16] = (word16) es_bx_306
	Mem339[ss:sp_94:word16] = Mem336[ss:bp_86 + 0x000A:word16]
	Mem342[ss:sp_94 - 0x0002:word16] = Mem339[ss:bp_86 + 0x0008:word16]
	fn0800_B0F3(Mem342[ss:sp_94 - 0x0002:word16], Mem342[ss:sp_94:word16], Mem342[ss:sp_94 + 0x0002:word16], Mem342[ss:sp_94 + 0x0004:word16], Mem342[ss:sp_94 + 0x0006:word16])
	Mem357[ss:sp_94 + 0x0006:word16] = Mem342[ss:bp_86 - 0x0002:word16]
	Mem360[ss:sp_94 + 0x0004:word16] = Mem357[ss:bp_86 - 0x0004:word16]
	// Failed to bind call argument.
	// Please report this issue at https://github.com/uxmal/reko
	word16 stackArg2 = <invalid>
	selector ds_366
	fn0800_4346(ds_108, stackArg2, Mem360[ss:sp_94 + 0x0006:word16], out cx_436, out dx_437, out bx_438, out ds_366)
	word16 bp_379 = Mem360[ss:bp_86:word16]
	dsOut = ds_366
	return bp_379
// DataOut:
// DataOut (flags):
// SymbolicIn:

fn0800_09A3_exit:
// DataOut:
// DataOut (flags):
// SymbolicIn:



word16 fn0800_0ABC(word16 di, selector ds, word16 wArg02, word16 wArg04, word16 wArg06, ptr16 & dxOut, ptr16 & diOut)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  di:[0..15] ds:[0..15] ss:[0..15] Stack +0002:[0..15] Stack +0004:[0..15] Stack +0006:[0..15]
// LiveOut: cx di dx
// Trashed: SCZDO ax bx cx di dx es Top
// Preserved: bp si sp
fn0800_0ABC_entry:
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_0ABC:
	fn0800_35A3(wArg02, di, fp - 0x0010, ss, wArg04, wArg06)
	word16 ax_52 = fn0800_0B79(wArg02, di, Mem48[ds:0x2A07:word16], Mem45[ds:0x2A09:word16], Mem42[ds:0x2A03:word16], Mem25[ds:0x2A05:word16], out di_262)
	word16 dx_76 = (uint16) ((uint32) (uint16) ax_52 % 0x0064)
	word16 si_110
	fn0800_B2EF(ax_52, dx_76, 0x0064, ds, 0x0866, ds, out si_110, out di_263)
	word16 bx_126 = 0x0064
	branch Mem107[ds:0x2A25:word16] == 0x0002 l0800_0B2E
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_0B2A:
	branch si_110 == 0x0000 l0800_0B47
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_0B2E:
	fn0800_B2EF(ax_52, dx_76, si_110 << 0x0002, ds, 0x0889, ds, out si_264, out di_265)
	bx_126 = si_110 << 0x0002
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_0B47:
	word16 di_167
	fn0800_B2EF(ax_52, dx_76, bx_126, ds, 0x0827, ds, out si_266, out di_167)
	word16 ax_175 = Mem162[ds:0x2A09:word16]
	word16 dx_176 = Mem162[ds:0x2A07:word16]
	Mem178[ds:0x29F3:word16] = v30_177
	ui32 v31_v30_202 = SEQ(Mem178[ds:0x29F5:word16], Mem162[ds:0x29F3:word16]) + SEQ(ax_175, dx_176)
	Mem182[ds:0x29F5:word16] = SLICE(v31_v30_202, word16, 16)
	word16 ax_183 = Mem182[ds:0x2A05:word16]
	word16 dx_184 = Mem182[ds:0x2A03:word16]
	Mem186[ds:0x29EF:word16] = v32_185
	ui32 v33_v32_204 = SEQ(Mem186[ds:0x29F1:word16], Mem182[ds:0x29EF:word16]) + SEQ(ax_183, dx_184)
	Mem190[ds:0x29F1:word16] = SLICE(v33_v32_204, word16, 16)
	Mem193[ds:0x2A13:word16] = Mem190[ds:0x2A13:word16] + 0x0001
	dxOut = dx_184
	diOut = di_167
	word16 v30_177 = (word16) v31_v30_202
	word16 v32_185 = (word16) v33_v32_204
	return ax_52
// DataOut:
// DataOut (flags):
// SymbolicIn:

fn0800_0ABC_exit:
// DataOut:
// DataOut (flags):
// SymbolicIn:



word16 fn0800_0B79(word16 si, word16 di, word16 wArg02, word16 wArg04, word16 wArg06, word16 wArg08, ptr16 & diOut)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  di:[0..15] si:[0..15] ss:[0..15] Stack +0002:[0..15] Stack +0004:[0..15] Stack +0006:[0..15] Stack +0008:[0..15]
// LiveOut: ax di
// Trashed: SCZO ax bx cx di dx si Top
// Preserved: bp sp
fn0800_0B79_entry:
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_0B79:
	word16 sp_103 = fp - 2
	word16 bp_27 = fp - 2
	branch (wArg02 | wArg04) == 0x0000 l0800_0B9E
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_0B84:
	branch (wArg06 | wArg08) == 0x0000 l0800_0B9E
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_0B8C:
	branch wArg04 >u wArg08 l0800_0BCE
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_0B97:
	branch wArg04 != wArg08 l0800_0B9E
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_0B99:
	branch wArg02 >u wArg06 l0800_0BCE
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_0BCE:
	ui32 ax_dx_164 = SEQ(Mem28[ss:bp_27 + 0x0006:word16], Mem28[ss:bp_27 + 0x0004:word16])
	Mem28[ss:bp_27 + 0x0008:ui32] = SEQ(Mem28[ss:bp_27 + 0x000A:word16], Mem28[ss:bp_27 + 0x0008:word16])
	ui32 ax_dx_165 = ax_dx_164 - Mem28[ss:bp_27 + 0x0008:ui32]
	word16 dx_31 = (word16) ax_dx_165
	word16 ax_34 = SLICE(ax_dx_165, word16, 16)
	branch ax_34 >u 0x0006 l0800_0BA2
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_0BDF:
	branch ax_34 != 0x0006 l0800_0BE7
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_0BE1:
	branch dx_31 >u 0x8DB8 l0800_0BA2
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_0BA2:
	word16 sp_46 = sp_103 - 2
	Mem48[ss:sp_46:word16] = 0x0000
	Mem50[ss:sp_46 - 2:word16] = 0x000A
	Mem54[ss:sp_46 - 4:word16] = Mem50[ss:bp_27 + 0x0006:word16]
	Mem57[ss:sp_46 - 6:word16] = Mem54[ss:bp_27 + 0x0004:word16]
	// Failed to bind call argument.
	// Please report this issue at https://github.com/uxmal/reko
	word16 stackArg0 = <invalid>
	word16 bp_63
	word16 di_66
	word16 dx_67
	word16 si_68
	word16 sp_69
	word16 ax_62 = fn0800_8BC2(bp_27, si, di, stackArg0, out cx_207, out dx_67, out bx_208, out bp_63, out si_68, out di_66)
	Mem75[ss:bp_63 + 0x0006:word16] = dx_67
	Mem76[ss:bp_63 + 0x0004:word16] = ax_62
	Mem82[ss:sp_69 + 0x0006:word16] = 0x0000
	Mem84[ss:sp_69 + 0x0004:word16] = 0x000A
	Mem87[ss:sp_69 + 0x0002:word16] = Mem84[ss:bp_63 + 0x000A:word16]
	Mem90[ss:sp_69:word16] = Mem87[ss:bp_63 + 0x0008:word16]
	// Failed to bind call argument.
	// Please report this issue at https://github.com/uxmal/reko
	word16 stackArg0 = <invalid>
	word16 dx_96
	word16 sp_98
	word16 ax_91 = fn0800_8BC2(bp_63, si_68, di_66, stackArg0, out cx_210, out dx_96, out bx_211, out bp_27, out si, out di)
	Mem104[ss:bp_27 + 0x000A:word16] = dx_96
	Mem105[ss:bp_27 + 0x0008:word16] = ax_91
	sp_103 = sp_98 + 0x0008
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_0BE7:
	word16 sp_111 = sp_103 - 2
	Mem112[ss:sp_111:word16] = Mem28[ss:bp_27 + 0x0006:word16]
	Mem115[ss:sp_111 - 2:word16] = Mem112[ss:bp_27 + 0x0004:word16]
	ui32 cx_bx_166 = SEQ(Mem115[ss:bp_27 + 0x0006:word16], Mem115[ss:bp_27 + 0x0004:word16])
	Mem115[ss:bp_27 + 0x0008:ui32] = SEQ(Mem115[ss:bp_27 + 0x000A:word16], Mem115[ss:bp_27 + 0x0008:word16])
	ui32 cx_bx_167 = cx_bx_166 - Mem115[ss:bp_27 + 0x0008:ui32]
	word16 dx_127
	word16 ax_126 = fn0800_8F18(0x2710, SLICE(cx_bx_167, word16, 16), 0x0000, (word16) cx_bx_167, out cx_212, out dx_127)
	Mem134[ss:sp_111 - 4:word16] = dx_127
	Mem136[ss:sp_111 - 6:word16] = ax_126
	// Failed to bind call argument.
	// Please report this issue at https://github.com/uxmal/reko
	word16 stackArg0 = <invalid>
	word16 di_143
	word16 ax_139 = fn0800_8BC2(bp_27, si, di, stackArg0, out cx_214, out dx_215, out bx_216, out bp_217, out si_218, out di_143)
	diOut = di_143
	return ax_139
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_0B9E:
	diOut = di
	return 0x0000
// DataOut:
// DataOut (flags):
// SymbolicIn:

fn0800_0B79_exit:
// DataOut:
// DataOut (flags):
// SymbolicIn:



word16 fn0800_0C08(word16 wArg02, ptr16 & cxOut)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  Stack +0002:[0..15]
// LiveOut: ax cx
// Trashed: SCZO ax bx cx dx Top
// Preserved: bp si sp
fn0800_0C08_entry:
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_0C08:
	word16 si_12 = wArg02
	word16 cx_13 = 0x0001
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_0C15:
	word16 ax_21 = (uint16) ((uint32) (uint16) si_12 /u 0x0002)
	si_12 = ax_21
	branch ax_21 != 0x0000 l0800_0C14
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_0C14:
	cx_13 = cx_13 + 0x0001
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_0C24:
	cxOut = cx_13
	return cx_13
// DataOut:
// DataOut (flags):
// SymbolicIn:

fn0800_0C08_exit:
// DataOut:
// DataOut (flags):
// SymbolicIn:



word16 fn0800_0C29(selector ds, word16 wArg02, word16 wArg04, byte bArg06, ptr16 & clOut, ptr16 & dxOut, ptr16 & bxOut, ptr16 & esOut)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  ds:[0..15] Stack +0002:[0..15] Stack +0004:[0..15] Stack +0006:[0..7]
// LiveOut: ax bx cl dx es
// Trashed: SCZO ax bx cl dx es Top
// Preserved: bp sp
fn0800_0C29_entry:
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_0C29:
	byte al_26 = (byte) (word16) fn0800_97CC(ds, (int16) bArg06)
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_0C4F:
	segptr32 ptrLoc06_73
	selector es_36 = SLICE(ptrLoc06_73, selector, 16)
	word16 bx_37 = (word16) ptrLoc06_73
	branch Mem34[ptrLoc06_73:byte] == 0x00 l0800_0C5D
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_0C58:
	branch Mem34[ptrLoc06_73:byte] != al_26 l0800_0C4C
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_0C4C:
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_0C5D:
	clOut = al_26
	word16 ax_51 = ptrLoc06_73 - wArg02
	dxOut = 0x0000 - (ax_51 <u 0x0000)
	bxOut = bx_37
	esOut = es_36
	ptrLoc06_73 = SEQ(wArg04, wArg02) (alias)
	return ax_51
// DataOut:
// DataOut (flags):
// SymbolicIn:

fn0800_0C29_exit:
// DataOut:
// DataOut (flags):
// SymbolicIn:



void fn0800_0C6C(selector ds, segptr32 ptrArg02)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  ds:[0..15] Stack +0002:[0..31]
// LiveOut:
// Trashed: SCZO ax bx dx es Top
// Preserved: bp sp
fn0800_0C6C_entry:
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_0C6C:
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_0C88:
	word16 v12_40
	branch Mem11[ptrArg02:byte] != 0x00 l0800_0C71
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_0C71:
	Mem39[ptrArg02:byte] = (byte) (word16) fn0800_97CC(ds, (int16) Mem11[ptrArg02:byte])
	v12_40 = ptrArg02 + 0x0001
	ptrArg02 = ptrArg02_52
	Mem11 = Mem41
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_0C91:
	ptrArg02_52 = DPB(ptrArg02, v12_40, 0) (alias)
	return
// DataOut:
// DataOut (flags):
// SymbolicIn:

fn0800_0C6C_exit:
// DataOut:
// DataOut (flags):
// SymbolicIn:



word16 fn0800_0C93(word16 si, word16 di, selector ds, word16 wArg02, word16 wArg04, ptr16 & dxOut)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  di:[0..15] ds:[0..15] si:[0..15] ss:[0..15] Stack +0002:[0..15] Stack +0004:[0..15]
// LiveOut: ax dx
// Trashed: SCZDO ax bx cx dx es Top
// Preserved: bp di ds si sp
fn0800_0C93_entry:
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_0C93:
	word16 bx_29
	word16 dx_162 = fn0800_3509(si, di, fp - 0x0068, ss, wArg02, wArg04, out bx_29)
	word16 si_39 = 0x2714
	word16 di_398 = fp - 0x0068
	word16 ax_45 = 0x0000
	word16 cx_48 = 0xFFFF
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_0CB9:
	ax_45 = DPB(ax_45, 0x00, 0) (alias)
	ax_45 = DPB(ax_45, 0x00, 0) (alias)
	branch cx_48 == 0x0000 l0800_0CBB
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_0CB9_1:
	di_398 = di_398 + 0x0001
	cx_48 = cx_48 - 0x0001
	branch Mem41[ss:di_398:byte] == 0x00 l0800_0CB9
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_0CBB:
	word16 cx_130 = ~cx_48
	word16 di_61 = di_398 - cx_130
	bool Z_73 = SLICE(cond(di_61), bool, 2)
	di_68 = di_61
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_0CBF:
	word16 di_68
	branch cx_130 == 0x0000 l0800_0CC1
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_0CBF_2:
	Z_73 = SLICE(cond(Mem41[ds:si_399:byte] - Mem41[ss:di_400:byte]), bool, 2) (alias)
	si_39 = si_399 + 0x0001
	di_68 = di_400 + 0x0001
	cx_130 = cx_130 - 0x0001
	si_399 = si_39
	di_400 = di_68
	branch Mem41[ds:si_399:byte] != Mem41[ss:di_400:byte] l0800_0CBF
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_0CC1:
	branch Z_73 l0800_0CC8
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_0CC3:
	word16 ax_81 = 0x0000 - (di_61 <u 0x0000)
	ax_45 = ax_81 - 0xFFFF - (ax_81 <u 0x0000)
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_0CC8:
	branch ax_45 == 0x0000 l0800_0D0D
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_0CCC:
	fn0800_B2EF(cx_130, dx_162, bx_29, ds, 0x088F, ds, out si_396, out di_397)
	word16 di_160 = fp - 0x0068
	dx_162 = ds
	word16 cx_172 = 0xFFFF
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_0CF5:
	branch cx_172 == 0x0000 l0800_0CF7
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_0CF5_1:
	di_160 = di_160 + 0x0001
	cx_172 = cx_172 - 0x0001
	branch Mem168[ss:di_160:byte] == 0x00 l0800_0CF5
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_0CF7:
	word16 cx_183 = ~cx_172
	word16 cx_186 = cx_183 >>u 0x0001
	word16 si_188 = di_160 - cx_183
	word16 di_194 = 0x2714
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_0D06:
	branch cx_186 == 0x0000 l0800_0D08
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_0D08:
	cx_130 = cx_186 * 0x0002 + (cx_183 >>u 0x0001 <u 0x0000)
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_0D0A:
	branch cx_130 == 0x0000 l0800_0D0C
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_0D0C:
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_0D0D:
	word16 ax_239 = fn0800_B2EF(cx_130, dx_162, bx_29, ds, 0x089E, ds, out si_394, out di_395)
	dxOut = dx_162
	return ax_239
// DataOut:
// DataOut (flags):
// SymbolicIn:

fn0800_0C93_exit:
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_0D0A_1:
	Mem260[ds:di_194:byte] = Mem212[ss:si_188:byte]
	si_188 = si_188 + 0x0001
	di_194 = di_194 + 0x0001
	cx_130 = cx_130 - 0x0001
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_0D06_2:
	Mem270[ds:di_194:word16] = Mem266[ss:si_188:word16]
	si_188 = si_188 + 0x0002
	di_194 = di_194 + 0x0002
	cx_186 = cx_186 - 0x0001
// DataOut:
// DataOut (flags):
// SymbolicIn:



word16 fn0800_0D24(selector ds, word16 wArg02, segptr32 ptrArg04, word16 wArg06, ptr16 & cxOut, ptr16 & dxOut, ptr16 & bxOut, ptr16 & siOut, ptr16 & diOut, ptr16 & esOut, ptr16 & dsOut, ptr16 & TopOut)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  ds:[0..15] ss:[0..15] Stack +0002:[0..15] Stack +0004:[0..31]
// LiveOut: ax bx cx di ds dx es si Top
// Trashed: SCZDO ax bx cx di ds dx es si Top
// Preserved: bp sp
fn0800_0D24_entry:
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_0D24:
	selector ds_25
	fn0800_0DA9(ds, Mem17[ds:0x29DB:word16], Mem14[ds:0x29DD:word16], out dx_212, out ds_25)
	selector ds_50
	fn0800_0DA9(ds_25, Mem42[ds_25:0x29D7:word16], Mem39[ds_25:0x29D9:word16], out dx_213, out ds_50)
	selector ds_75
	word16 dx_76
	word16 cx_73 = fn0800_0DA9(ds_50, Mem67[ds_50:0x29D3:word16], Mem64[ds_50:0x29D5:word16], out dx_76, out ds_75)
	fn0800_B2EF(cx_73, dx_76, wArg02 << 0x0002, ds_75, 0x08A2, ds_75, out si_214, out di_215)
	selector es_109 = SLICE(ptrArg04, selector, 16)
	word16 bx_110 = (word16) ptrArg04
	branch Mem98[ptrArg04:byte] == 0x00 l0800_0D92
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_0D83:
	fn0800_B2EF(cx_73, dx_76, bx_110, ds_75, 0x08A6, ds_75, out si_216, out di_217)
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_0D92:
	word16 di_145
	word16 si_146
	fn0800_B2EF(cx_73, dx_76, bx_110, ds_75, 0x0827, ds_75, out si_146, out di_145)
	word16 bx_159
	word16 cx_160
	word16 dx_161
	selector es_162
	word16 si_163
	int8 Top_164
	word16 ax_158 = fn0800_8B5A(cx_73, dx_76, bx_110, si_146, es_109, ds_75, 0x0001, out cx_160, out dx_161, out bx_159, out si_163, out es_162, out Top_164)
	cxOut = cx_160
	dxOut = dx_161
	bxOut = bx_159
	siOut = si_163
	diOut = di_145
	esOut = es_162
	dsOut = ds_75
	TopOut = Top_164
	return ax_158
// DataOut:
// DataOut (flags):
// SymbolicIn:

fn0800_0D24_exit:
// DataOut:
// DataOut (flags):
// SymbolicIn:



word16 fn0800_0DA9(selector ds, word16 wArg02, word16 wArg04, ptr16 & dxOut, ptr16 & dsOut)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  ds:[0..15] ss:[0..15] Stack +0002:[0..15] Stack +0004:[0..15]
// LiveOut: cx ds dx
// Trashed: SCZO ax bx cx di ds dx es si Top
// Preserved: bp sp
fn0800_0DA9_entry:
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_0DA9:
	branch (wArg02 | wArg04) == 0x0000 l0800_0DCC
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_0DB4:
	// Failed to bind call argument.
	// Please report this issue at https://github.com/uxmal/reko
	word16 stackArg4 = <invalid>
	word16 bp_22
	word16 sp_25
	word16 ax_21 = fn0800_A614(ds, SEQ(wArg04, wArg02), stackArg4, out cx, out dx_91, out bp_22, out si_92, out di_93, out ds)
	Mem39[ss:sp_25 + 0x0002:word16] = Mem19[ss:bp_22 + 0x000A:word16]
	Mem42[ss:sp_25:word16] = Mem39[ss:bp_22 + 0x0008:word16]
	dx = fn0800_8F7F(ax_21, ds, Mem42[ss:sp_25:segptr32])
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_0DCC:
	dxOut = dx
	dsOut = ds
	return cx
// DataOut:
// DataOut (flags):
// SymbolicIn:

fn0800_0DA9_exit:
// DataOut:
// DataOut (flags):
// SymbolicIn:



word16 fn0800_0DCE(word16 cx, word16 dx, word16 bx, selector es, selector ds, ptr16 & siOut, ptr16 & diOut)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  bx:[0..15] cx:[0..15] ds:[0..15] dx:[0..15] es:[0..15] ss:[0..15]
// LiveOut: cx di si
// Trashed: SCZDO ax bx cx di dx es si Top
// Preserved: sp
fn0800_0DCE_entry:
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_0DCE:
	word16 di_20
	word16 si_21
	fn0800_B2EF(cx, dx, bx, ds, 0x07E8, ds, out si_21, out di_20)
	word16 cx_36
	word16 si_39
	fn0800_8B5A(cx, dx, bx, si_21, es, ds, 0x0000, out cx_36, out dx_58, out bx_59, out si_39, out es_60, out Top_61)
	siOut = si_39
	diOut = di_20
	return cx_36
// DataOut:
// DataOut (flags):
// SymbolicIn:

fn0800_0DCE_exit:
// DataOut:
// DataOut (flags):
// SymbolicIn:



selector fn0800_0DE8(word16 cx, word16 dx, selector ds)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  cx:[0..15] ds:[0..15] dx:[0..15] ss:[0..15]
// LiveOut: ds
// Trashed: SCZDOP ax bp bx cx di ds dx es Top
// Preserved: si sp
fn0800_0DE8_entry:
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_0DE8:
	word16 bx_18 = Mem17[ds:0x2A25:word16]
	fn0800_B2EF(cx, dx, bx_18 << 0x0002, ds, 0x08AC, ds, out si_984, out di_985)
	branch Mem32[ds:0x2E4F:word16] == 0x0000 l0800_0E2A
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_0E1B:
	fn0800_B2EF(cx, dx, bx_18 << 0x0002, ds, 0x08BA, ds, out si_986, out di_987)
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_0E2A:
	branch Mem65[ds:0x2A1F:word16] == 0x0000 l0800_0E3C
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_0E31:
	fn0800_B2EF(cx, dx, bx_18 << 0x0002, ds, 0x08CF, ds, out si_994, out di_995)
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_0E3C:
	fn0800_B2EF(cx, dx, bx_18 << 0x0002, ds, 0x08DC, ds, out si_988, out di_989)
	// Failed to bind call argument.
	// Please report this issue at https://github.com/uxmal/reko
	// Failed to bind call argument.
	// Please report this issue at https://github.com/uxmal/reko
	word16 stackArg6 = <invalid>
	word16 stackArg8 = <invalid>
	selector ds_117
	word16 dx_118
	word16 di_140
	word16 sp_169
	word16 di_164
	word16 cx_163
	word16 dx_166
	selector ds_165
	word16 si_168
	word16 ax_160 = fn0800_4234(fn0800_37BE(fn0800_3678(ds, 0x427E, ds, out dx_118, out si_990, out ds_117), dx_118, ds_117, 0x4477, ds_117, stackArg6, stackArg8, out di_140), di_140, ds_117, 0x4477, ds_117, 0x08EC, ds_117, out cx_163, out dx_166, out bp_993, out si_168, out di_164, out ds_165)
	Mem177[ds_165:0x29DD:word16] = dx_166
	Mem178[ds_165:0x29DB:word16] = ax_160
	word16 sp_175 = sp_169 + 0x0008
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_10F4:
	word16 sp_180 = sp_175 - 2
	Mem183[ss:sp_180:word16] = ds_165
	Mem186[ss:sp_180 - 2:word16] = 0x4541
	// Failed to bind call argument.
	// Please report this issue at https://github.com/uxmal/reko
	word16 stackArg4 = <invalid>
	word16 di_198
	selector ds_199
	word16 si_200
	word16 sp_201
	branch fn0800_2DE2(cx_163, dx_166, si_168, di_164, ds_165, Mem186[ss:sp_180 - 2:segptr32], stackArg4, out ch_997, out bp_998, out si_200, out di_198, out ds_199) == 0x0000 l0800_1106
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_1106:
	Mem215[ss:sp_201 + 0x0002:word16] = Mem186[ds_199:0x29DD:word16]
	Mem218[ss:sp_201:word16] = Mem215[ds_199:0x29DB:word16]
	// Failed to bind call argument.
	// Please report this issue at https://github.com/uxmal/reko
	word16 stackArg4 = <invalid>
	selector ds_228
	fn0800_A614(ds_199, Mem218[ss:sp_201:segptr32], stackArg4, out cx_1000, out dx_1001, out bp_1002, out si_1003, out di_1004, out ds_228)
	fn0800_8F7F(0x4477, ds_228, SEQ(ds_228, 0x4477))
	return ds_228
// DataOut:
// DataOut (flags):
// SymbolicIn:

fn0800_0DE8_exit:
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_1103:
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_0E7C:
	fn0800_3764(si_200, di_198, ds_199)
	branch fn0800_388C(si_200, di_198, ds_199, out cx_163, out dx_166, out bp_1005, out si_168, out di_164, out ds_165) != 0x0000 l0800_0E89
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_0E89:
	word16 si_343
	Mem282[ss:sp_175 - 2:word16] = ds_165
	Mem285[ss:sp_175 - 4:word16] = 0x4541
	word16 dx_289
	word16 ax_286 = fn0800_0C93(si_168, di_164, ds_165, Mem285[ss:sp_175 - 4:word16], Mem285[ss:sp_175 - 2:word16], out dx_289)
	Mem301[ss:sp_175 - 2:word16] = Mem285[ds_165:0x29E5:word16]
	Mem304[ss:sp_175 - 4:word16] = Mem301[ds_165:0x29E3:word16]
	fn0800_4194(ds_165, Mem304[ss:sp_175 - 4:word16], Mem304[ss:sp_175 - 2:word16])
	Mem313[ds_165:0x2A09:word16] = dx_289
	Mem314[ds_165:0x2A07:word16] = ax_286
	Mem315[ds_165:0x2A05:word16] = dx_289
	Mem316[ds_165:0x2A03:word16] = ax_286
	word16 sp_312 = sp_175
	branch Mem316[ds_165:0x2A09:word16] >u 0x0000 l0800_0ECF
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_0EB9:
	branch Mem316[ds_165:0x2A09:word16] != 0x0000 l0800_0EC2
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_0EBB:
	branch Mem316[ds_165:0x2A07:word16] >u 0x0012 l0800_0ECF
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_0EC2:
	branch Mem316[ds_165:0x2A15:word16] != 0x0000 l0800_0ECF
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_0ECF:
	word16 bp_336
	word16 dx_341
	word16 ax_334 = fn0800_3992(0x0000, di_164, ds_165, out dx_341, out bp_336, out si_343, out ds_165)
	word16 ax_349 = ax_334
	branch ax_334 == 0x0000 l0800_0EDC
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_0EDC:
	word16 bx_354 = Mem316[ds_165:0x2A23:word16]
	branch bx_354 <=u 0x0005 l0800_0EE8
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_0EE8:
	switch (bx_354 << 0x0001) { l0800_0FF4 l0800_0EEF l0800_1002 l0800_0FFB l0800_0FCC l0800_0FED }
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_0FED:
	ax_349 = fn0800_67BF(ds_165, out dx_341, out ds_165)
	si_343 = ax_349
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_0FCC:
	Mem377[ss:sp_312 - 2:word16] = Mem316[ds_165:0x29E5:word16]
	Mem380[ss:sp_312 - 4:word16] = Mem377[ds_165:0x29E3:word16]
	selector ds_385
	branch fn0800_3F0A(ds_165, Mem380[ss:sp_312 - 4:word16], Mem380[ss:sp_312 - 2:word16], out cx_1019, out dx_1020, out ds_385) != 0x4D5A l0800_0FE6
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_0FE6:
	ax_349 = fn0800_669C(ds_385, out dx_341, out ds_165)
	si_343 = ax_349
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_0FDF:
	ax_349 = fn0800_5E64(ds_385, out dx_341, out ds_165)
	si_343 = ax_349
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_0FFB:
	ax_349 = fn0800_73AC(ds_165, out dx_341, out ds_165)
	si_343 = ax_349
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_1002:
	ax_349 = fn0800_741D(ds_165, out dx_341)
	si_343 = ax_349
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_0EEF:
	branch Mem316[ds_165:0x2A09:word16] <u 0x0000 l0800_0F1F
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_0EF6:
	branch Mem316[ds_165:0x2A09:word16] != 0x0000 l0800_0EFF
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_0EF8:
	branch Mem316[ds_165:0x2A07:word16] <u 0x0012 l0800_0F1F
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_0EFF:
	Mem465[ss:sp_312 - 2:word16] = Mem316[ds_165:0x29E5:word16]
	Mem468[ss:sp_312 - 4:word16] = Mem465[ds_165:0x29E3:word16]
	word16 dx_473
	fn0800_3F58(ds_165, Mem468[ss:sp_312 - 4:word16], Mem468[ss:sp_312 - 2:word16], out dx_473, out di_1021, out ds_165)
	// Failed to bind call argument.
	// Please report this issue at https://github.com/uxmal/reko
	word16 stackArg0 = <invalid>
	ax_349 = fn0800_8CAA(ax_334, 0x08, dx_473, stackArg0, out cl_1023, out dx_341)
	branch dx_341 != 0x0052 l0800_0F1F
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_0F17:
	branch ax_349 != 0x4E43 l0800_0F1F
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_0F1C:
	si_343 = 0x0004
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_0F1F:
	branch si_343 == 0x0000 l0800_0F26
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_0F26:
	word16 sp_508 = sp_312 - 2
	Mem510[ss:sp_508:word16] = Mem505[ds_165:0x2A09:word16]
	Mem513[ss:sp_508 - 2:word16] = Mem510[ds_165:0x2A07:word16]
	Mem516[ss:sp_508 - 4:word16] = Mem513[ds_165:0x2A09:word16]
	Mem519[ss:sp_508 - 6:word16] = Mem516[ds_165:0x2A07:word16]
	word16 sp_529
	fn0800_75EA(ds_165, Mem519[ss:sp_508 - 6:word16], Mem519[ss:sp_508 - 4:word16], Mem519[ss:sp_508 - 2:word16], Mem519[ss:sp_508:word16], out dx_1024, out bp_1025, out si_343, out ds_165)
	sp_312 = sp_529 + 0x0008
	ax_349 = Mem519[ds_165:0x2A05:word16]
	dx_341 = Mem519[ds_165:0x2A03:word16]
	branch ax_349 >=u Mem519[ds_165:0x2A09:word16] l0800_0F4C
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_0F4C:
	branch ax_349 != Mem519[ds_165:0x2A09:word16] l0800_0F57
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_0F4E:
	branch dx_341 >=u Mem519[ds_165:0x2A07:word16] l0800_0F57
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_0F57:
	branch Mem519[ds_165:0x2A15:word16] != 0x0000 l0800_0F61
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_0F61:
	Mem551[ss:sp_529 + 0x0006:word16] = Mem519[ds_165:0x29E5:word16]
	Mem554[ss:sp_529 + 0x0004:word16] = Mem551[ds_165:0x29E3:word16]
	fn0800_BA67(ds_165, Mem554[ss:sp_529 + 0x0004:word16], Mem554[ss:sp_529 + 0x0006:word16])
	Mem567[ss:sp_529 + 0x0006:word16] = Mem554[ds_165:0x29E1:word16]
	Mem570[ss:sp_529 + 0x0004:word16] = Mem567[ds_165:0x29DF:word16]
	word16 cx_572 = fn0800_BA67(ds_165, Mem570[ss:sp_529 + 0x0004:word16], Mem570[ss:sp_529 + 0x0006:word16])
	Mem583[ss:sp_529 + 0x0006:word16] = Mem570[ds_165:0x29E1:word16]
	Mem586[ss:sp_529 + 0x0004:word16] = Mem583[ds_165:0x29DF:word16]
	Mem590[ss:sp_529 + 0x0002:word16] = 0x524E
	Mem592[ss:sp_529:word16] = 0x4300
	word16 cx_595
	selector ds_597
	fn0800_409C(cx_572, ds_165, Mem592[ss:sp_529:word16], Mem592[ss:sp_529 + 2:word16], Mem592[ss:sp_529 + 4:word16], Mem592[ss:sp_529 + 6:word16], out cx_595, out dx_1026, out di_1027, out es_1028, out ds_597, out Top_1029)
	Mem609[ss:sp_529 + 0x0006:word16] = Mem592[ds_597:0x29E1:word16]
	Mem612[ss:sp_529 + 0x0004:word16] = Mem609[ds_597:0x29DF:word16]
	Mem615[ss:sp_529 + 0x0002:word16] = Mem612[ds_597:0x2A09:word16]
	Mem618[ss:sp_529:word16] = Mem615[ds_597:0x2A07:word16]
	selector ds_623
	fn0800_409C(cx_595, ds_597, Mem618[ss:sp_529:word16], Mem618[ss:sp_529 + 2:word16], Mem618[ss:sp_529 + 4:word16], Mem618[ss:sp_529 + 6:word16], out cx_1030, out dx_1031, out di_1032, out es_1033, out ds_623, out Top_1034)
	Mem635[ss:sp_529 + 0x0006:word16] = Mem618[ds_623:0x2A09:word16]
	Mem638[ss:sp_529 + 0x0004:word16] = Mem635[ds_623:0x2A07:word16]
	Mem641[ss:sp_529 + 0x0002:word16] = Mem638[ds_623:0x29E1:word16]
	Mem644[ss:sp_529:word16] = Mem641[ds_623:0x29DF:word16]
	Mem647[ss:sp_529 - 2:word16] = Mem644[ds_623:0x29E5:word16]
	Mem650[ss:sp_529 - 4:word16] = Mem647[ds_623:0x29E3:word16]
	word16 sp_660
	ax_349 = fn0800_3B0A(Mem650[ss:sp_529 + 4:word16], Mem650[ss:sp_529 + 6:word16], out cx_1035, out dx_341, out bp_1036, out ds_165)
	sp_312 = sp_660 + 0x000C
	si_343 = 0x0002
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_0F5E:
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_0F54:
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_0F49:
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_0F23:
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_0FF4:
	ax_349 = fn0800_6AD4(bp_336, si_343, ds_165, out dx_341, out ds_165)
	si_343 = ax_349
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_0EE5:
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_1007:
	word16 sp_689 = sp_312 - 2
	Mem691[ss:sp_689:word16] = Mem686[ds_165:0x29E1:word16]
	Mem694[ss:sp_689 - 2:word16] = Mem691[ds_165:0x29DF:word16]
	fn0800_4194(ds_165, Mem694[ss:sp_689 - 2:word16], Mem694[ss:sp_689:word16])
	Mem706[ds_165:0x2A05:word16] = dx_341
	Mem710[ds_165:0x2A03:word16] = ax_349
	sp_312 = sp_689 + 0x0002
	word16 ax_711 = Mem710[ds_165:0x2A05:word16]
	word16 dx_712 = Mem710[ds_165:0x2A03:word16]
	branch ax_711 <u Mem710[ds_165:0x2A09:word16] l0800_1049
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_1029:
	branch ax_711 != Mem710[ds_165:0x2A09:word16] l0800_1031
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_102B:
	branch dx_712 <u Mem710[ds_165:0x2A07:word16] l0800_1049
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_1031:
	branch Mem710[ds_165:0x2A15:word16] != 0x0000 l0800_1049
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_1038:
	word16 dx_723 = Mem710[ds_165:0x2A07:word16]
	Mem724[ds_165:0x2A05:word16] = Mem710[ds_165:0x2A09:word16]
	Mem725[ds_165:0x2A03:word16] = dx_723
	si_343 = 0x0003
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_1049:
	branch si_343 != 0x0004 l0800_105C
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_104E:
	word16 dx_736 = Mem734[ds_165:0x2A07:word16]
	Mem737[ds_165:0x2A05:word16] = Mem734[ds_165:0x2A09:word16]
	Mem738[ds_165:0x2A03:word16] = dx_736
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_0ED6:
	si_343 = 0x000E
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_0EC9:
	si_343 = 0x0003
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_105C:
	branch Mem742[ds_165:0x427E:byte] == 0x00 l0800_10B7
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_1063:
	branch si_343 == 0x0003 l0800_106D
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_1068:
	branch si_343 != 0x0004 l0800_10B7
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_106D:
	word16 dx_753 = Mem742[ds_165:0x2A07:word16]
	Mem754[ds_165:0x2A05:word16] = Mem742[ds_165:0x2A09:word16]
	Mem755[ds_165:0x2A03:word16] = dx_753
	word16 sp_762 = sp_312 - 2
	Mem767[ss:sp_762:word16] = Mem755[ds_165:0x29E5:word16]
	Mem770[ss:sp_762 - 2:word16] = Mem767[ds_165:0x29E3:word16]
	fn0800_BA67(ds_165, Mem770[ss:sp_762 - 2:word16], Mem770[ss:sp_762:word16])
	Mem783[ss:sp_762:word16] = Mem770[ds_165:0x29E1:word16]
	Mem786[ss:sp_762 - 2:word16] = Mem783[ds_165:0x29DF:word16]
	fn0800_BA67(ds_165, Mem786[ss:sp_762 - 2:word16], Mem786[ss:sp_762:word16])
	Mem799[ss:sp_762:word16] = Mem786[ds_165:0x2A09:word16]
	Mem802[ss:sp_762 - 2:word16] = Mem799[ds_165:0x2A07:word16]
	Mem805[ss:sp_762 - 4:word16] = Mem802[ds_165:0x29E1:word16]
	Mem808[ss:sp_762 - 6:word16] = Mem805[ds_165:0x29DF:word16]
	Mem811[ss:sp_762 - 8:word16] = Mem808[ds_165:0x29E5:word16]
	Mem814[ss:sp_762 - 10:word16] = Mem811[ds_165:0x29E3:word16]
	word16 sp_824
	fn0800_3B0A(Mem814[ss:sp_762 - 2:word16], Mem814[ss:sp_762:word16], out cx_1016, out dx_1017, out bp_1018, out ds_165)
	sp_312 = sp_824 + 0x000C
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_10B7:
	word16 sp_892
	word16 sp_838 = sp_312 - 2
	Mem840[ss:sp_838:word16] = Mem835[ds_165:0x29E5:word16]
	Mem843[ss:sp_838 - 2:word16] = Mem840[ds_165:0x29E3:word16]
	// Failed to bind call argument.
	// Please report this issue at https://github.com/uxmal/reko
	word16 stackArg4 = <invalid>
	word16 sp_848
	selector ds_853
	fn0800_A614(ds_165, Mem843[ss:sp_838 - 2:segptr32], stackArg4, out cx_1007, out dx_1008, out bp_1009, out si_1010, out di_1011, out ds_853)
	Mem862[ss:sp_848 + 0x0002:word16] = Mem843[ds_853:0x29E1:word16]
	Mem865[ss:sp_848:word16] = Mem862[ds_853:0x29DF:word16]
	// Failed to bind call argument.
	// Please report this issue at https://github.com/uxmal/reko
	word16 stackArg4 = <invalid>
	word16 sp_870
	word16 di_872
	fn0800_A614(ds_853, Mem865[ss:sp_848:segptr32], stackArg4, out cx_1013, out dx_1014, out bp_1015, out si_168, out di_872, out ds_165)
	branch si_168 <= 0x0002 l0800_10E5
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_10E5:
	si_168 = fn0800_37DF(si_168, di_872, ds_165, out di_872, out ds_165)
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_10D8:
	Mem900[ss:sp_870 + 0x0002:word16] = ds_165
	Mem903[ss:sp_870:word16] = 0x44DC
	fn0800_8F7F(0x44DC, ds_165, Mem903[ss:sp_870:segptr32])
	sp_892 = sp_870 + 0x0004
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_10E8:
	word16 sp_913 = sp_892 - 2
	Mem916[ss:sp_913:word16] = ds_165
	Mem919[ss:sp_913 - 2:word16] = 0x4541
	Mem922[ss:sp_913 - 4:word16] = si_168
	cx_163 = fn0800_0ABC(di_872, ds_165, Mem922[ss:sp_913 - 4:word16], Mem922[ss:sp_913 - 2:word16], Mem922[ss:sp_913:word16], out dx_166, out di_164)
	sp_175 = sp_913 + 0x0002
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_0E86:
// DataOut:
// DataOut (flags):
// SymbolicIn:



selector fn0800_112D(word16 cx, word16 dx, selector ds)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  cx:[0..15] ds:[0..15] dx:[0..15] ss:[0..15]
// LiveOut: ds
// Trashed: SCZDOP bp bx cx di ds dx es Top
// Preserved: si sp
fn0800_112D_entry:
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_112D:
	word16 bx_18 = Mem17[ds:0x2A25:word16]
	fn0800_B2EF(cx, dx, bx_18 << 0x0002, ds, 0x08F0, ds, out si_591, out di_592)
	branch Mem32[ds:0x2E4F:word16] == 0x0000 l0800_116F
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_1160:
	fn0800_B2EF(cx, dx, bx_18 << 0x0002, ds, 0x08FE, ds, out si_593, out di_594)
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_116F:
	word16 di_114
	word16 si_113
	fn0800_B2EF(cx, dx, bx_18 << 0x0002, ds, 0x0913, ds, out si_113, out di_114)
	word16 sp_103 = fp - 0x0002
	branch Mem71[ds:0x2A25:word16] == 0x0001 l0800_1184
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_1184:
	cx = fn0800_3678(ds, 0x427E, ds, out dx, out si_113, out ds)
	sp_103 = fp - 0x0002
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_1181:
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_12C2:
	word16 sp_106 = sp_103 - 2
	Mem109[ss:sp_106:word16] = ds
	Mem112[ss:sp_106 - 2:word16] = 0x4541
	// Failed to bind call argument.
	// Please report this issue at https://github.com/uxmal/reko
	word16 stackArg4 = <invalid>
	word16 di_124
	selector ds_125
	word16 si_126
	branch fn0800_2DE2(cx, dx, si_113, di_114, ds, Mem112[ss:sp_106 - 2:segptr32], stackArg4, out ch_596, out bp_597, out si_126, out di_124, out ds_125) == 0x0000 l0800_12D4
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_12D4:
	return ds_125
// DataOut:
// DataOut (flags):
// SymbolicIn:

fn0800_112D_exit:
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_12D1:
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_1192:
	fn0800_3764(si_126, di_124, ds_125)
	word16 bp_152
	branch fn0800_388C(si_126, di_124, ds_125, out cx, out dx, out bp_152, out si_113, out di_114, out ds) != 0x0000 l0800_119F
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_119F:
	Mem173[ss:sp_103 - 2:word16] = ds
	Mem176[ss:sp_103 - 4:word16] = 0x4541
	word16 dx_180
	word16 ax_177 = fn0800_0C93(si_113, di_114, ds, Mem176[ss:sp_103 - 4:word16], Mem176[ss:sp_103 - 2:word16], out dx_180)
	Mem192[ss:sp_103 - 2:word16] = Mem176[ds:0x29E5:word16]
	Mem195[ss:sp_103 - 4:word16] = Mem192[ds:0x29E3:word16]
	fn0800_4194(ds, Mem195[ss:sp_103 - 4:word16], Mem195[ss:sp_103 - 2:word16])
	Mem204[ds:0x2A05:word16] = dx_180
	Mem205[ds:0x2A03:word16] = ax_177
	word16 sp_203 = sp_103
	word16 dx_206 = dx_180
	branch dx_180 >u 0x0000 l0800_11CF
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_11C3:
	branch Test(ULT,false) l0800_11CA
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_11C5:
	branch ax_177 >=u 0x0012 l0800_11CF
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_11CF:
	word16 bx_215 = Mem205[ds:0x2A23:word16]
	branch bx_215 >u 0x0005 l0800_1243
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_11D8:
	switch (bx_215 << 0x0001) { l0800_1230 l0800_11DF l0800_123E l0800_1237 l0800_1208 l0800_1229 }
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_1229:
	ax_177 = fn0800_4BB1(ax_177, dx_180, ds, out dx_206, out ds)
	si_113 = ax_177
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_1208:
	Mem242[ss:sp_103 - 2:word16] = Mem205[ds:0x29E5:word16]
	Mem245[ss:sp_103 - 4:word16] = Mem242[ds:0x29E3:word16]
	selector ds_250
	word16 dx_251
	word16 ax_246 = fn0800_3F0A(ds, Mem245[ss:sp_103 - 4:word16], Mem245[ss:sp_103 - 2:word16], out cx_601, out dx_251, out ds_250)
	branch ax_246 != 0x4D5A l0800_1222
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_1222:
	ax_177 = fn0800_4B97(ax_246, dx_251, ds_250, out dx_206, out ds)
	si_113 = ax_177
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_121B:
	ax_177 = fn0800_46FE(ds_250, out dx_206, out ds)
	si_113 = ax_177
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_1237:
	ax_177 = fn0800_518F(ax_177, dx_180, ds, out dx_206, out ds)
	si_113 = ax_177
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_123E:
	ax_177 = fn0800_51A9(ds, out dx_206, out ds)
	si_113 = ax_177
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_11DF:
	Mem327[ss:sp_103 - 2:word16] = Mem205[ds:0x29E5:word16]
	Mem330[ss:sp_103 - 4:word16] = Mem327[ds:0x29E3:word16]
	word16 dx_335
	fn0800_3F58(ds, Mem330[ss:sp_103 - 4:word16], Mem330[ss:sp_103 - 2:word16], out dx_335, out di_598, out ds)
	// Failed to bind call argument.
	// Please report this issue at https://github.com/uxmal/reko
	word16 stackArg0 = <invalid>
	ax_177 = fn0800_8CAA(ax_177, 0x08, dx_335, stackArg0, out cl_600, out dx_206)
	branch dx_206 != 0x0052 l0800_1203
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_11F7:
	branch ax_177 != 0x4E43 l0800_1203
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_1203:
	si_113 = 0x0007
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_11FC:
	ax_177 = fn0800_5374(ds, out dx_206, out bp_612, out ds)
	si_113 = ax_177
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_1230:
	ax_177 = fn0800_4C55(ax_177, bp_152, ds, out dx_206, out ds)
	si_113 = ax_177
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_11CA:
	si_113 = 0x0007
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_1243:
	word16 sp_402 = sp_203 - 2
	Mem406[ss:sp_402:word16] = Mem395[ds:0x29E1:word16]
	Mem409[ss:sp_402 - 2:word16] = Mem406[ds:0x29DF:word16]
	fn0800_4194(ds, Mem409[ss:sp_402 - 2:word16], Mem409[ss:sp_402:word16])
	Mem422[ds:0x2A09:word16] = dx_206
	Mem426[ds:0x2A07:word16] = ax_177
	Mem429[ss:sp_402:word16] = Mem426[ds:0x29E5:word16]
	Mem432[ss:sp_402 - 2:word16] = Mem429[ds:0x29E3:word16]
	fn0800_4194(ds, Mem432[ss:sp_402 - 2:word16], Mem432[ss:sp_402:word16])
	Mem441[ds:0x2A05:word16] = dx_206
	Mem442[ds:0x2A03:word16] = ax_177
	branch si_113 == 0x0000 l0800_127F
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_1271:
	word16 dx_450 = Mem442[ds:0x2A03:word16]
	Mem451[ds:0x2A09:word16] = Mem442[ds:0x2A05:word16]
	Mem452[ds:0x2A07:word16] = dx_450
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_127F:
	word16 sp_515
	Mem459[ss:sp_402:word16] = Mem454[ds:0x29E5:word16]
	Mem462[ss:sp_402 - 2:word16] = Mem459[ds:0x29E3:word16]
	// Failed to bind call argument.
	// Please report this issue at https://github.com/uxmal/reko
	word16 stackArg4 = <invalid>
	word16 sp_467
	selector ds_472
	fn0800_A614(ds, Mem462[ss:sp_402 - 2:segptr32], stackArg4, out cx_603, out dx_604, out bp_605, out si_606, out di_607, out ds_472)
	Mem481[ss:sp_467 + 0x0002:word16] = Mem462[ds_472:0x29E1:word16]
	Mem484[ss:sp_467:word16] = Mem481[ds_472:0x29DF:word16]
	// Failed to bind call argument.
	// Please report this issue at https://github.com/uxmal/reko
	word16 stackArg4 = <invalid>
	word16 sp_489
	word16 si_493
	word16 di_491
	fn0800_A614(ds_472, Mem484[ss:sp_467:segptr32], stackArg4, out cx_609, out dx_610, out bp_611, out si_493, out di_491, out ds)
	branch Mem484[ds:0x2A25:word16] == 0x0002 l0800_12A6
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_12A2:
	branch si_493 == 0x0000 l0800_12B3
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_12B3:
	si_113 = fn0800_37DF(si_493, di_491, ds, out di_491, out ds)
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_12A6:
	Mem526[ss:sp_489 + 0x0002:word16] = ds
	Mem529[ss:sp_489:word16] = 0x44DC
	fn0800_8F7F(0x44DC, ds, Mem529[ss:sp_489:segptr32])
	si_113 = si_493
	sp_515 = sp_489 + 0x0004
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_12B6:
	word16 sp_539 = sp_515 - 2
	Mem542[ss:sp_539:word16] = ds
	Mem545[ss:sp_539 - 2:word16] = 0x4541
	Mem549[ss:sp_539 - 4:word16] = si_113
	cx = fn0800_0ABC(di_491, ds, Mem549[ss:sp_539 - 4:word16], Mem549[ss:sp_539 - 2:word16], Mem549[ss:sp_539:word16], out dx, out di_114)
	sp_103 = sp_539 + 0x0002
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_119C:
// DataOut:
// DataOut (flags):
// SymbolicIn:



selector fn0800_12E2(word16 cx, word16 dx, selector ds)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  cx:[0..15] ds:[0..15] dx:[0..15] ss:[0..15]
// LiveOut: ds sp
// Trashed: SCZDOP ax bp bx cx di ds dx es si sp Top
// Preserved:
fn0800_12E2_entry:
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_12E2:
	word16 bx_22 = Mem21[ds:0x2A25:word16]
	fn0800_B2EF(cx, dx, bx_22 << 0x0002, ds, 0x0916, ds, out si_1944, out di_1945)
	branch Mem36[ds:0x2E4F:word16] == 0x0000 l0800_1321
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_1312:
	fn0800_B2EF(cx, dx, bx_22 << 0x0002, ds, 0x0925, ds, out si_1947, out di_1948)
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_1321:
	word16 di_80
	word16 si_81
	fn0800_B2EF(cx, dx, bx_22 << 0x0002, ds, 0x093A, ds, out si_81, out di_80)
	word16 dx_105
	word16 si_107
	word16 sp_108
	word16 di_103
	word16 bp_100
	selector ds_104
	word16 ax_99 = fn0800_AA7E(si_81, di_80, ds, 0x4348, ds, 0x093D, ds, out cx_1946, out dx_105, out bp_100, out si_107, out di_103, out ds_104)
	Mem114[ds_104:0x29D1:word16] = dx_105
	Mem115[ds_104:0x29CF:word16] = ax_99
	word16 sp_113 = sp_108 + 0x0008
	word16 ax_116 = Mem115[ds_104:0x2A25:word16]
	branch ax_116 == 0x0003 l0800_1353
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_1353:
	branch (Mem115[ds_104:0x29CF:word16] | Mem115[ds_104:0x29D1:word16]) == 0x0000 l0800_135F
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_135F:
	Mem125[ss:sp_108 + 0x0006:word16] = ds_104
	Mem128[ss:sp_108 + 0x0004:word16] = 0x4348
	Mem131[ss:sp_108 + 0x0002:word16] = 0x0007
	// Failed to bind call argument.
	// Please report this issue at https://github.com/uxmal/reko
	word16 stackArg6 = <invalid>
	fn0800_0D24(ds_104, Mem131[ss:sp_108 + 0x0002:word16], Mem131[ss:sp_108 + 0x0004:segptr32], stackArg6, out cx_1952, out dx_1953, out bx_1954, out si_1955, out di_1956, out es_1957, out ds_104, out Top_1958)
	sp_113 = sp_108 + 0x0008
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_135C:
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_134B:
	branch ax_116 == 0x0004 l0800_1371
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_1371:
	branch (Mem115[ds_104:0x29CF:word16] | Mem115[ds_104:0x29D1:word16]) == 0x0000 l0800_13C6
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_137A:
	Mem157[ss:sp_108 + 0x0006:word16] = Mem115[ds_104:0x29D1:word16]
	Mem160[ss:sp_108 + 0x0004:word16] = Mem157[ds_104:0x29CF:word16]
	branch fn0800_3E27(ds_104, Mem160[ss:sp_108 + 0x0004:word16], Mem160[ss:sp_108 + 0x0006:word16], out cx_1959, out dx_1960, out di_103, out es_1961, out ds_104, out Top_1962) != 0x4D5A l0800_13BA
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_13BA:
	Mem176[ds_104:0x29D1:word16] = 0x0000
	Mem177[ds_104:0x29CF:word16] = 0x0000
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_138D:
	Mem180[ss:sp_108 + 0x0006:word16] = 0x0002
	Mem185[ss:sp_108 + 0x0004:word16] = 0x0000
	Mem187[ss:sp_108 + 0x0002:word16] = 0x0000
	Mem190[ss:sp_108:word16] = Mem187[ds_104:0x29D1:word16]
	Mem193[ss:sp_108 - 2:word16] = Mem190[ds_104:0x29CF:word16]
	fn0800_ACB3(ds_104, Mem193[ss:sp_108 - 2:word16], Mem193[ss:sp_108:word16], Mem193[ss:sp_108 + 6:word16], out cx_1963, out dx_1964, out bx_1965, out es_1966)
	Mem207[ss:sp_108 + 0x0006:word16] = Mem193[ds_104:0x29D1:word16]
	Mem210[ss:sp_108 + 0x0004:word16] = Mem207[ds_104:0x29CF:word16]
	// Failed to bind call argument.
	// Please report this issue at https://github.com/uxmal/reko
	word16 stackArg4 = <invalid>
	word16 dx_214
	word16 ax_211 = fn0800_AD2F(ds_104, Mem210[ss:sp_108 + 0x0004:segptr32], stackArg4, out cx_1968, out dx_214)
	Mem222[ds_104:0x29ED:word16] = dx_214
	Mem223[ds_104:0x29EB:word16] = ax_211
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_13C6:
	word16 sp_231 = sp_108 + 0x0008
	branch (Mem225[ds_104:0x29CF:word16] | Mem225[ds_104:0x29D1:word16]) != 0x0000 l0800_13F2
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_13CF:
	Mem234[ss:sp_108 + 0x0006:word16] = ds_104
	Mem237[ss:sp_108 + 0x0004:word16] = 0x0941
	Mem239[ss:sp_108 + 0x0002:word16] = ds_104
	Mem242[ss:sp_108:word16] = 0x4348
	word16 dx_251
	word16 sp_254
	word16 ax_245 = fn0800_4234(si_107, di_103, ds_104, Mem242[ss:sp_108:word16], Mem242[ss:sp_108 + 0x0002:word16], Mem242[ss:sp_108 + 0x0004:word16], Mem242[ss:sp_108 + 0x0006:word16], out cx_1982, out dx_251, out bp_100, out si_1983, out di_1984, out ds_104)
	Mem262[ds_104:0x29D1:word16] = dx_251
	Mem263[ds_104:0x29CF:word16] = ax_245
	Mem264[ds_104:0x29ED:word16] = 0x0000
	Mem265[ds_104:0x29EB:word16] = 0x0000
	sp_231 = sp_254 + 0x0008
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_13F2:
	Mem269[ss:bp_100 - 0x006E:byte] = 0x52
	Mem270[ss:bp_100 - 0x006D:byte] = 0x4E
	Mem271[ss:bp_100 - 0x006C:byte] = 0x43
	Mem272[ss:bp_100 - 0x006B:byte] = 0x41
	Mem273[ss:bp_100 - 0x006A:byte] = 0x00
	Mem274[ss:bp_100 - 0x0069:byte] = 0x0C
	Mem275[ss:bp_100 - 0x0066:byte] = 0x00
	Mem276[ss:bp_100 - 0x0065:byte] = 0x0C
	Mem277[ss:bp_100 - 0x0064:byte] = 0x00
	Mem278[ss:bp_100 - 0x0063:byte] = 0x00
	word16 sp_283 = sp_231 - 2
	Mem284[ss:sp_283:word16] = 0x0000
	Mem287[ss:sp_283 - 2:word16] = 0x0004
	Mem289[ss:sp_283 - 4:word16] = ss
	Mem292[ss:sp_283 - 6:word16] = bp_100 - 0x0066
	Mem307[ss:bp_100 - 0x0068:byte] = (byte) (fn0800_2CCF(ds_104, Mem292[ss:sp_283 - 6:segptr32], Mem292[ss:sp_283 - 2:word16], Mem292[ss:sp_283:byte], out cl_1973, out dx_1974) >>u 0x08)
	Mem312[ss:sp_283:word16] = 0x0000
	Mem315[ss:sp_283 - 2:word16] = 0x0004
	Mem317[ss:sp_283 - 4:word16] = ss
	Mem320[ss:sp_283 - 6:word16] = bp_100 - 0x0066
	Mem332[ss:bp_100 - 0x0067:byte] = (byte) fn0800_2CCF(ds_104, Mem320[ss:sp_283 - 6:segptr32], Mem320[ss:sp_283 - 2:word16], Mem320[ss:sp_283:byte], out cl_1975, out dx_1976)
	Mem335[ss:sp_283:word16] = Mem332[ds_104:0x29D1:word16]
	Mem338[ss:sp_283 - 2:word16] = Mem335[ds_104:0x29CF:word16]
	Mem344[ss:sp_283 - 4:word16] = 0x0000
	Mem346[ss:sp_283 - 6:word16] = 0x000C
	Mem348[ss:sp_283 - 8:word16] = ss
	Mem351[ss:sp_283 - 10:word16] = bp_100 - 0x006E
	word16 cx_354
	selector ds_356
	fn0800_4152(ds_104, Mem351[ss:sp_283 - 10:word16], Mem351[ss:sp_283 - 8:word16], Mem351[ss:sp_283 - 6:word16], Mem351[ss:sp_283 - 2:word16], Mem351[ss:sp_283:word16], out cx_354, out ds_356)
	Mem369[ss:sp_283:word16] = Mem351[ds_356:0x29D1:word16]
	Mem372[ss:sp_283 - 2:word16] = Mem369[ds_356:0x29CF:word16]
	Mem375[ss:sp_283 - 4:word16] = Mem372[ds_356:0x29ED:word16]
	Mem378[ss:sp_283 - 6:word16] = Mem375[ds_356:0x29EB:word16]
	fn0800_409C(cx_354, ds_356, Mem378[ss:sp_283 - 6:word16], Mem378[ss:sp_283 - 4:word16], Mem378[ss:sp_283 - 2:word16], Mem378[ss:sp_283:word16], out cx_1977, out dx_1978, out di_1979, out es_1980, out ds_104, out Top_1981)
	sp_113 = sp_283 + 0x0002
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_1350:
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_1478:
	word16 sp_397 = sp_113 - 2
	Mem399[ss:sp_397:word16] = 0x0000
	word16 sp_410
	word16 dx_407
	selector ds_406
	word16 di_1833
	word16 cx_1836 = fn0800_1CF6(ds_104, Mem399[ss:sp_397:word16], out dx_407, out bp_1949, out si_1950, out di_1833, out ds_406)
	word16 sp_1804 = sp_410 + 0x0002
	word16 si_417 = 0x0000
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_1527:
	word16 sp_421 = sp_1804 - 2
	Mem424[ss:sp_421:word16] = ds_406
	Mem427[ss:sp_421 - 2:word16] = 0x4541
	// Failed to bind call argument.
	// Please report this issue at https://github.com/uxmal/reko
	word16 stackArg4 = <invalid>
	sp_1804 = sp_442 + 0x0004
	word16 bp_438
	word16 sp_442
	branch fn0800_2DE2(cx_1836, dx_407, si_417, di_1833, ds_406, Mem427[ss:sp_421 - 2:segptr32], stackArg4, out ch_1970, out bp_438, out si_417, out di_1833, out ds_406) == 0x0000 l0800_1539
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_1536:
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_1486:
	Mem455[ss:sp_442 + 0x0002:word16] = ds_406
	Mem458[ss:sp_442:word16] = 0x4541
	Mem460[ss:sp_442 - 2:word16] = ss
	Mem463[ss:sp_442 - 4:word16] = bp_438 - 0x006E
	fn0800_3509(si_417, di_1833, Mem463[ss:sp_442 - 4:word16], Mem463[ss:sp_442 - 2:selector], Mem463[ss:sp_442:word16], Mem463[ss:sp_442 + 2:word16], out bx_1971)
	Mem477[ss:sp_442 + 0x0002:word16] = ds_406
	Mem480[ss:sp_442:word16] = 0x4541
	Mem482[ss:sp_442 - 2:word16] = ss
	Mem485[ss:sp_442 - 4:word16] = bp_438 - 0x0084
	fn0800_35A3(si_417, di_1833, Mem485[ss:sp_442 - 4:word16], Mem485[ss:sp_442 - 2:selector], Mem485[ss:sp_442:word16], Mem485[ss:sp_442 + 2:word16])
	Mem499[ss:sp_442 + 0x0002:word16] = ss
	Mem502[ss:sp_442:word16] = bp_438 - 0x006E
	// Failed to bind call argument.
	// Please report this issue at https://github.com/uxmal/reko
	word16 stackArg4 = <invalid>
	word16 dx_506
	word16 ax_503 = fn0800_283D(ds_406, Mem502[ss:sp_442:segptr32], stackArg4, out dx_506)
	Mem513[ss:bp_438 - 0x0002:word16] = dx_506
	Mem514[ss:bp_438 - 0x0004:word16] = ax_503
	branch (ax_503 | dx_506) != 0x0000 l0800_14CD
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_14BC:
	Mem520[ss:sp_442 + 0x0002:word16] = ss
	Mem523[ss:sp_442:word16] = bp_438 - 0x006E
	// Failed to bind call argument.
	// Please report this issue at https://github.com/uxmal/reko
	word16 stackArg4 = <invalid>
	word16 dx_529
	word16 ax_524 = fn0800_1F5C(ds_406, Mem523[ss:sp_442:segptr32], stackArg4, out dx_529, out di_1833, out ds_406)
	Mem538[ss:bp_438 - 0x0002:word16] = dx_529
	Mem539[ss:bp_438 - 0x0004:word16] = ax_524
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_14CD:
	word16 cx_1835
	Mem546[ss:sp_442 + 0x0002:word16] = Mem542[ss:bp_438 - 0x0002:word16]
	Mem549[ss:sp_442:word16] = Mem546[ss:bp_438 - 0x0004:word16]
	Mem551[ss:sp_442 - 0x0002:word16] = ss
	Mem554[ss:sp_442 - 0x0004:word16] = bp_438 - 0x0084
	// Failed to bind call argument.
	// Please report this issue at https://github.com/uxmal/reko
	word16 stackArg8 = <invalid>
	word16 dx_558
	word16 ax_555 = fn0800_2931(Mem554[ss:sp_442 - 0x0004:segptr32], Mem554[ss:sp_442:segptr32], stackArg8, out dx_558)
	Mem565[ss:bp_438 - 0x0006:word16] = dx_558
	Mem566[ss:bp_438 - 0x0008:word16] = ax_555
	branch (ax_555 | dx_558) != 0x0000 l0800_14FD
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_14FD:
	Mem573[ss:sp_442 + 0x0002:word16] = Mem566[ss:bp_438 - 0x0006:word16]
	Mem576[ss:sp_442:word16] = Mem573[ss:bp_438 - 0x0008:word16]
	word16 sp_587
	cx_1835 = (word16) fn0800_23EC(ds_406, Mem576[ss:sp_442:word16], Mem576[ss:sp_442 + 0x0002:word16], out bp_1987, out si_1988, out di_1833, out ds_406)
	sp_1804 = sp_587 + 0x0004
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_14E9:
	Mem598[ss:sp_442 + 0x0002:word16] = Mem566[ss:bp_438 - 0x0002:word16]
	Mem601[ss:sp_442:word16] = Mem598[ss:bp_438 - 0x0004:word16]
	Mem603[ss:sp_442 - 0x0002:word16] = ss
	Mem606[ss:sp_442 - 0x0004:word16] = bp_438 - 0x0084
	// Failed to bind call argument.
	// Please report this issue at https://github.com/uxmal/reko
	selector stackArg4 = <invalid>
	cx_1835 = (word16) fn0800_2085(ds_406, Mem606[ss:sp_442 - 0x0004:segptr32], stackArg4, Mem606[ss:sp_442:segptr32])
	sp_1804 = sp_442 + 0x0004
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_1509:
	word16 dx_584
	word16 ax_578
	ptr32 es_bx_622 = Mem621[ds_406:0x2E51:segptr32]
	dx_407 = DPB(DPB(dx_584, Mem621[es_bx_622 + 0x0005:byte], 0), 0x00, 8) (alias)
	si_417 = 0x0001
	cx_1836 = DPB(cx_1835, 0x08, 0) (alias)
	branch (DPB(DPB(ax_578, Mem621[es_bx_622 + 0x0004:byte], 0), 0x00, 8) << 0x08) + dx_407 >=u 0xFF8C l0800_1539
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_1539:
	branch si_417 != 0x0000 l0800_1551
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_1551:
	word16 sp_656
	selector ds_652 = fn0800_1E5E(ds_406)
	Mem665[ss:sp_656 - 2:word16] = 0x0001
	selector ds_671
	word16 sp_675
	word16 cx_669 = fn0800_1CF6(ds_652, Mem665[ss:sp_656 - 2:word16], out dx_1990, out bp_1991, out si_1992, out di_1993, out ds_671)
	Mem684[ss:sp_675:word16] = 0x0001
	Mem689[ss:sp_675 - 2:word16] = 0x0000
	fn0800_2DBF(ds_671, Mem689[ss:sp_675 - 2:word16], Mem689[ss:sp_675:word16])
	word16 dx_694 = Mem689[ds_671:0x29CF:word16]
	Mem695[ds_671:0x29E1:word16] = Mem689[ds_671:0x29D1:word16]
	Mem696[ds_671:0x29DF:word16] = dx_694
	Mem698[ss:sp_675:word16] = ds_671
	Mem701[ss:sp_675 - 2:word16] = 0x0945
	Mem703[ss:sp_675 - 4:word16] = ds_671
	Mem706[ss:sp_675 - 6:word16] = 0x4477
	// Failed to bind call argument.
	// Please report this issue at https://github.com/uxmal/reko
	// Failed to bind call argument.
	// Please report this issue at https://github.com/uxmal/reko
	word16 stackArg6 = <invalid>
	word16 stackArg8 = <invalid>
	word16 di_709
	word16 si_711 = fn0800_37BE(cx_669, dx_694, ds_671, Mem706[ss:sp_675 - 6:word16], Mem706[ss:sp_675 - 4:word16], stackArg6, stackArg8, out di_709)
	Mem720[ss:sp_675:word16] = ds_671
	Mem723[ss:sp_675 - 2:word16] = 0x0941
	Mem725[ss:sp_675 - 4:word16] = ds_671
	Mem728[ss:sp_675 - 6:word16] = 0x4477
	word16 sp_738
	word16 si_1660
	word16 di_1678
	word16 cx_1709
	word16 dx_1700
	selector ds_1661
	word16 ax_729 = fn0800_4234(si_711, di_709, ds_671, Mem728[ss:sp_675 - 6:word16], Mem728[ss:sp_675 - 4:word16], Mem728[ss:sp_675 - 2:word16], Mem728[ss:sp_675:word16], out cx_1709, out dx_1700, out bp_1996, out si_1660, out di_1678, out ds_1661)
	Mem746[ds_1661:0x29DD:word16] = dx_1700
	Mem747[ds_1661:0x29DB:word16] = ax_729
	word16 sp_1687 = sp_738 + 0x0008
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_1897:
	word16 sp_749 = sp_1687 - 2
	Mem752[ss:sp_749:word16] = ds_1661
	Mem755[ss:sp_749 - 2:word16] = 0x4541
	// Failed to bind call argument.
	// Please report this issue at https://github.com/uxmal/reko
	word16 stackArg4 = <invalid>
	word16 sp_1718 = sp_770 + 0x0004
	word16 di_767
	word16 si_769
	word16 sp_770
	branch fn0800_2DE2(cx_1709, dx_1700, si_1660, di_1678, ds_1661, Mem755[ss:sp_749 - 2:segptr32], stackArg4, out ch_2003, out bp_2004, out si_769, out di_767, out ds_1661) == 0x0000 l0800_18A9
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_18A6:
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_15A3:
	Mem783[ss:sp_770 + 0x0002:word16] = ds_1661
	Mem786[ss:sp_770:word16] = 0x093D
	Mem788[ss:sp_770 - 2:word16] = ds_1661
	Mem791[ss:sp_770 - 4:word16] = 0x4541
	word16 bp_793
	word16 di_796
	word16 dx_798
	word16 si_800
	word16 sp_801
	selector ds_1322
	word16 ax_792 = fn0800_4234(si_769, di_767, ds_1661, Mem791[ss:sp_770 - 4:word16], Mem791[ss:sp_770 - 2:word16], Mem791[ss:sp_770:word16], Mem791[ss:sp_770 + 2:word16], out cx_2016, out dx_798, out bp_793, out si_800, out di_796, out ds_1322)
	Mem809[ds_1322:0x29E5:word16] = dx_798
	Mem810[ds_1322:0x29E3:word16] = ax_792
	Mem812[ss:sp_801 + 0x0006:word16] = ds_1322
	Mem815[ss:sp_801 + 0x0004:word16] = 0x4541
	Mem817[ss:sp_801 + 0x0002:word16] = ss
	Mem820[ss:sp_801:word16] = bp_793 - 0x006E
	fn0800_3509(si_800, di_796, Mem820[ss:sp_801:word16], Mem820[ss:sp_801 + 2:selector], Mem820[ss:sp_801 + 4:word16], Mem820[ss:sp_801 + 6:word16], out bx_2017)
	Mem834[ss:sp_801 + 0x0006:word16] = ds_1322
	Mem837[ss:sp_801 + 0x0004:word16] = 0x4541
	Mem839[ss:sp_801 + 0x0002:word16] = ss
	Mem842[ss:sp_801:word16] = bp_793 - 0x0084
	fn0800_35A3(si_800, di_796, Mem842[ss:sp_801:word16], Mem842[ss:sp_801 + 2:selector], Mem842[ss:sp_801 + 4:word16], Mem842[ss:sp_801 + 6:word16])
	Mem856[ss:sp_801 + 0x0006:word16] = ds_1322
	Mem859[ss:sp_801 + 0x0004:word16] = 0x4541
	fn0800_0C93(si_800, di_796, ds_1322, Mem859[ss:sp_801 + 0x0004:word16], Mem859[ss:sp_801 + 0x0006:word16], out dx_2018)
	Mem874[ss:sp_801 + 0x0006:word16] = ss
	Mem877[ss:sp_801 + 0x0004:word16] = bp_793 - 0x006E
	// Failed to bind call argument.
	// Please report this issue at https://github.com/uxmal/reko
	word16 stackArg4 = <invalid>
	word16 dx_881
	word16 ax_878 = fn0800_283D(ds_1322, Mem877[ss:sp_801 + 0x0004:segptr32], stackArg4, out dx_881)
	Mem890[ss:sp_801 + 0x0006:word16] = dx_881
	Mem892[ss:sp_801 + 0x0004:word16] = ax_878
	Mem894[ss:sp_801 + 0x0002:word16] = ss
	Mem897[ss:sp_801:word16] = bp_793 - 0x0084
	// Failed to bind call argument.
	// Please report this issue at https://github.com/uxmal/reko
	word16 stackArg8 = <invalid>
	word16 dx_901
	word16 ax_898 = fn0800_2931(Mem897[ss:sp_801:segptr32], Mem897[ss:sp_801 + 4:segptr32], stackArg8, out dx_901)
	Mem909[ss:bp_793 - 0x0006:word16] = dx_901
	Mem910[ss:bp_793 - 0x0008:word16] = ax_898
	Mem913[ss:sp_801 + 0x0006:word16] = Mem910[ds_1322:0x29D1:word16]
	Mem916[ss:sp_801 + 0x0004:word16] = Mem913[ds_1322:0x29CF:word16]
	fn0800_4194(ds_1322, Mem916[ss:sp_801 + 0x0004:word16], Mem916[ss:sp_801 + 0x0006:word16])
	Mem930[ds_1322:0x29E9:word16] = dx_901 - (ax_898 <u 0x0004)
	Mem931[ds_1322:0x29E7:word16] = ax_898 - 0x0004
	// Failed to bind call argument.
	// Please report this issue at https://github.com/uxmal/reko
	int32 dx_ax_933 = (int32) Mem931[ds_1322:0x29E9:word16]
	word16 stackArg0 = <invalid>
	word16 sp_941
	word16 ax_937 = fn0800_8C8A((word16) dx_ax_933, 0x08, SLICE(dx_ax_933, word16, 16), stackArg0, out cl_2022, out dx_2023)
	ptr32 es_di_946 = Mem931[ss:bp_793 - 0x0008:segptr32]
	Mem948[ss:sp_941 - 2:word16] = ax_937
	selector es_1838 = SLICE(es_di_946, selector, 16)
	word16 di_1839 = (word16) es_di_946
	word16 cx_952 = 0xFFFF
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_1632:
	branch cx_952 == 0x0000 l0800_1634
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_1632_1:
	di_1839 = di_1839 + 0x0001
	cx_952 = cx_952 - 0x0001
	branch Mem948[es_1838:di_1839:byte] == 0x00 l0800_1632
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_1634:
	word16 cx_963 = ~cx_952
	word16 di_2061 = di_1839 - cx_963
	bool Z_976 = SLICE(cond(di_2061), bool, 2)
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_163A:
	branch cx_963 == 0x0000 l0800_163C
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_163A_2:
	Z_976 = SLICE(cond(0x00 - Mem948[es_1838:di_2061:byte]), bool, 2) (alias)
	di_2061 = di_2061 + 0x0001
	cx_963 = cx_963 - 0x0001
	branch Mem948[es_1838:di_2061:byte] == 0x00 l0800_163A
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_163C:
	branch Z_976 l0800_1645
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_163E:
	di_2061 = 0x0001
	es_1838 = 0x0000
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_1645:
	Mem1007[es_1838:di_2061:byte] = (byte) Mem948[ss:sp_941 - 2:word16]
	ptr32 es_di_1020 = Mem1007[ss:bp_793 - 0x0008:segptr32]
	Mem1023[ss:sp_941 - 2:word16] = (word16) (int32) Mem1007[ds_1322:0x29E9:word16]
	selector es_1059 = SLICE(es_di_1020, selector, 16)
	word16 di_1031 = (word16) es_di_1020
	word16 cx_1027 = 0xFFFF
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_165C:
	branch cx_1027 == 0x0000 l0800_165E
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_165C_1:
	di_1031 = di_1031 + 0x0001
	cx_1027 = cx_1027 - 0x0001
	branch Mem1023[es_1059:di_1031:byte] == 0x00 l0800_165C
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_165E:
	word16 cx_1038 = ~cx_1027
	word16 di_1041 = di_1031 - cx_1038
	bool Z_1051 = SLICE(cond(di_1041), bool, 2)
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_1664:
	branch cx_1038 == 0x0000 l0800_1666
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_1664_2:
	Z_1051 = SLICE(cond(0x00 - Mem1023[es_1059:di_1041:byte]), bool, 2) (alias)
	di_1041 = di_1041 + 0x0001
	cx_1038 = cx_1038 - 0x0001
	branch Mem1023[es_1059:di_1041:byte] == 0x00 l0800_1664
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_1666:
	branch Z_1051 l0800_166F
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_1668:
	di_1041 = 0x0001
	es_1059 = 0x0000
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_166F:
	Mem1083[es_1059:di_1041 + 0x0001:byte] = (byte) Mem1023[ss:sp_941 - 2:word16]
	// Failed to bind call argument.
	// Please report this issue at https://github.com/uxmal/reko
	word16 stackArg0 = <invalid>
	word16 dx_1095
	word16 sp_1096
	word16 ax_1092 = fn0800_8C8A(Mem1083[ds_1322:0x29E7:word16], 0x08, Mem1083[ds_1322:0x29E9:word16], stackArg0, out cl_2025, out dx_1095)
	ptr32 es_di_1106 = Mem1083[ss:bp_793 - 0x0008:segptr32]
	Mem1108[ss:sp_1096 - 2:word16] = ax_1092
	selector es_1144 = SLICE(es_di_1106, selector, 16)
	word16 di_1116 = (word16) es_di_1106
	word16 cx_1112 = 0xFFFF
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_168E:
	branch cx_1112 == 0x0000 l0800_1690
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_168E_1:
	di_1116 = di_1116 + 0x0001
	cx_1112 = cx_1112 - 0x0001
	branch Mem1108[es_1144:di_1116:byte] == 0x00 l0800_168E
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_1690:
	word16 cx_1123 = ~cx_1112
	word16 di_1126 = di_1116 - cx_1123
	bool Z_1136 = SLICE(cond(di_1126), bool, 2)
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_1696:
	branch cx_1123 == 0x0000 l0800_1698
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_1696_2:
	Z_1136 = SLICE(cond(0x00 - Mem1108[es_1144:di_1126:byte]), bool, 2) (alias)
	di_1126 = di_1126 + 0x0001
	cx_1123 = cx_1123 - 0x0001
	branch Mem1108[es_1144:di_1126:byte] == 0x00 l0800_1696
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_1698:
	branch Z_1136 l0800_16A1
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_169A:
	di_1126 = 0x0001
	es_1144 = 0x0000
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_16A1:
	Mem1167[es_1144:di_1126 + 0x0002:byte] = (byte) Mem1108[ss:sp_1096 - 2:word16]
	ptr32 es_di_1173 = Mem1167[ss:bp_793 - 0x0008:segptr32]
	selector es_1209 = SLICE(es_di_1173, selector, 16)
	word16 di_1181 = (word16) es_di_1173
	word16 cx_1177 = 0xFFFF
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_16B3:
	branch cx_1177 == 0x0000 l0800_16B5
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_16B3_1:
	di_1181 = di_1181 + 0x0001
	cx_1177 = cx_1177 - 0x0001
	branch Mem1167[es_1209:di_1181:byte] == 0x00 l0800_16B3
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_16B5:
	word16 cx_1188 = ~cx_1177
	word16 di_1191 = di_1181 - cx_1188
	bool Z_1201 = SLICE(cond(di_1191), bool, 2)
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_16BB:
	branch cx_1188 == 0x0000 l0800_16BD
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_16BB_2:
	Z_1201 = SLICE(cond(0x00 - Mem1167[es_1209:di_1191:byte]), bool, 2) (alias)
	di_1191 = di_1191 + 0x0001
	cx_1188 = cx_1188 - 0x0001
	branch Mem1167[es_1209:di_1191:byte] == 0x00 l0800_16BB
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_16BD:
	branch Z_1201 l0800_16C6
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_16BF:
	di_1191 = 0x0001
	es_1209 = 0x0000
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_16C6:
	byte dl_1228 = Mem1167[ds_1322:0x29E7:byte]
	Mem1230[es_1209:di_1191 + 0x0003:byte] = dl_1228
	Mem1235[ds_1322:0x2A05:word16] = 0x0000
	Mem1236[ds_1322:0x2A03:word16] = 0x0000
	Mem1250[ss:sp_1096 - 2:word16] = Mem1236[ds_1322:0x29E5:word16]
	Mem1253[ss:sp_1096 - 4:word16] = Mem1250[ds_1322:0x29E3:word16]
	fn0800_4194(ds_1322, Mem1253[ss:sp_1096 - 4:word16], Mem1253[ss:sp_1096 - 2:word16])
	Mem1273[ds_1322:0x2A09:word16] = DPB(dx_1095, dl_1228, 0)
	Mem1274[ds_1322:0x2A07:word16] = 0x0000
	Mem1279[ss:sp_1096 - 2:word16] = 0x0000
	Mem1282[ss:sp_1096 - 4:word16] = Mem1279[ds_1322:0x29E9:word16]
	Mem1285[ss:sp_1096 - 6:word16] = Mem1282[ds_1322:0x29E7:word16]
	Mem1288[ss:sp_1096 - 8:word16] = Mem1285[ds_1322:0x29E1:word16]
	Mem1291[ss:sp_1096 - 10:word16] = Mem1288[ds_1322:0x29DF:word16]
	word16 di_1231 = 0x0001
	word16 cx_1294
	word16 ax_1292 = fn0800_ACB3(ds_1322, Mem1291[ss:sp_1096 - 10:word16], Mem1291[ss:sp_1096 - 8:word16], Mem1291[ss:sp_1096 - 2:word16], out cx_1294, out dx_2026, out bx_2027, out es_2028)
	word16 sp_1301 = sp_1096
	branch Mem1291[ds_1322:0x2A09:word16] >=u 0x0000 l0800_171B
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_171B:
	branch Mem1291[ds_1322:0x2A09:word16] >u 0x0000 l0800_1724
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_171D:
	branch Mem1291[ds_1322:0x2A07:word16] <=u 0x0012 l0800_17A2
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_1724:
	branch Mem1291[ds_1322:0x2A21:word16] == 0x0000 l0800_17A2
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_172B:
	Mem1315[ss:sp_1096 - 2:word16] = Mem1291[ds_1322:0x29E5:word16]
	Mem1318[ss:sp_1096 - 4:word16] = Mem1315[ds_1322:0x29E3:word16]
	// Failed to bind call argument.
	// Please report this issue at https://github.com/uxmal/reko
	word16 dx_1323
	word16 cx_1320 = fn0800_3F58(ds_1322, Mem1318[ss:sp_1096 - 4:word16], Mem1318[ss:sp_1096 - 2:word16], out dx_1323, out di_1231, out ds_1322)
	word16 stackArg0 = <invalid>
	byte cl_1336
	word16 dx_1337
	word16 ax_1334 = fn0800_8CAA(ax_1292, 0x08, dx_1323, stackArg0, out cl_1336, out dx_1337)
	cx_1294 = DPB(cx_1320, cl_1336, 0) (alias)
	branch dx_1337 != 0x0052 l0800_1748
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_1743:
	branch ax_1334 == 0x4E43 l0800_17A2
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_1748:
	word16 ax_1386
	Mem1353[ss:sp_1301 - 2:word16] = Mem1318[ds_1322:0x2A09:word16]
	Mem1356[ss:sp_1301 - 4:word16] = Mem1353[ds_1322:0x2A07:word16]
	Mem1359[ss:sp_1301 - 6:word16] = Mem1356[ds_1322:0x2A09:word16]
	Mem1362[ss:sp_1301 - 8:word16] = Mem1359[ds_1322:0x2A07:word16]
	word16 sp_1372
	cx_1294 = fn0800_75EA(ds_1322, Mem1362[ss:sp_1301 - 8:word16], Mem1362[ss:sp_1301 - 6:word16], Mem1362[ss:sp_1301 - 4:word16], Mem1362[ss:sp_1301 - 2:word16], out dx_2039, out bp_2040, out si_2041, out ds_1322)
	sp_1301 = sp_1372 + 0x0008
	word16 ax_1379 = Mem1362[ds_1322:0x2A05:word16]
	word16 dx_1380 = Mem1362[ds_1322:0x2A03:word16]
	branch ax_1379 <u Mem1362[ds_1322:0x2A09:word16] l0800_1778
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_176B:
	branch ax_1379 != Mem1362[ds_1322:0x2A09:word16] l0800_1773
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_176D:
	branch dx_1380 <u Mem1362[ds_1322:0x2A07:word16] l0800_1778
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_1778:
	ax_1386 = 0x0000
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_1773:
	ax_1386 = 0x0001
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_177A:
	di_1231 = ax_1386
	branch ax_1386 == 0x0000 l0800_17A2
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_1780:
	Mem1404[ss:sp_1372 + 0x0006:word16] = 0x0001
	word16 dx_1411 = -Mem1404[ds_1322:0x2A03:word16]
	Mem1416[ss:sp_1372 + 0x0004:word16] = -Mem1404[ds_1322:0x2A05:word16] - (dx_1411 == 0x0000)
	Mem1418[ss:sp_1372 + 0x0002:word16] = dx_1411
	Mem1421[ss:sp_1372:word16] = Mem1418[ds_1322:0x29E1:word16]
	Mem1424[ss:sp_1372 - 2:word16] = Mem1421[ds_1322:0x29DF:word16]
	fn0800_ACB3(ds_1322, Mem1424[ss:sp_1372 - 2:word16], Mem1424[ss:sp_1372:word16], Mem1424[ss:sp_1372 + 6:word16], out cx_1294, out dx_2044, out bx_2045, out es_2046)
	sp_1301 = sp_1372 + 0x0008
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_1718:
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_17A2:
	branch di_1231 != 0x0000 l0800_17A9
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_17A9:
	word16 ax_1447 = Mem1443[ds_1322:0x2A09:word16]
	word16 dx_1448 = Mem1443[ds_1322:0x2A07:word16]
	Mem1449[ds_1322:0x2A05:word16] = ax_1447
	Mem1450[ds_1322:0x2A03:word16] = dx_1448
	word16 sp_1453 = sp_1301 - 2
	Mem1455[ss:sp_1453:word16] = Mem1450[ds_1322:0x29E5:word16]
	Mem1458[ss:sp_1453 - 2:word16] = Mem1455[ds_1322:0x29E3:word16]
	word16 cx_1460 = fn0800_BA67(ds_1322, Mem1458[ss:sp_1453 - 2:word16], Mem1458[ss:sp_1453:word16])
	word16 sp_1467 = sp_1453 + 0x0002
	branch Mem1458[ds_1322:0x2A09:word16] <u 0x0000 l0800_17F2
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_17CC:
	branch Mem1458[ds_1322:0x2A09:word16] != 0x0000 l0800_17D5
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_17CE:
	branch Mem1458[ds_1322:0x2A07:word16] <u 0x0012 l0800_17F2
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_17D5:
	Mem1479[ss:sp_1453:word16] = Mem1458[ds_1322:0x29E5:word16]
	Mem1482[ss:sp_1453 - 2:word16] = Mem1479[ds_1322:0x29E3:word16]
	// Failed to bind call argument.
	// Please report this issue at https://github.com/uxmal/reko
	word16 dx_1487
	word16 cx_1484 = fn0800_3F58(ds_1322, Mem1482[ss:sp_1453 - 2:word16], Mem1482[ss:sp_1453:word16], out dx_1487, out di_2056, out ds_1322)
	word16 stackArg0 = <invalid>
	byte cl_1500
	word16 dx_1501
	word16 ax_1498 = fn0800_8CAA(ax_1447, 0x08, dx_1487, stackArg0, out cl_1500, out dx_1501)
	cx_1460 = DPB(cx_1484, cl_1500, 0) (alias)
	branch dx_1501 != 0x0052 l0800_17F2
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_17ED:
	branch ax_1498 == 0x4E43 l0800_181E
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_17F2:
	word16 sp_1515 = sp_1467 - 2
	Mem1517[ss:sp_1515:word16] = Mem1512[ds_1322:0x29D1:word16]
	Mem1520[ss:sp_1515 - 2:word16] = Mem1517[ds_1322:0x29CF:word16]
	Mem1524[ss:sp_1515 - 4:word16] = 0x524E
	Mem1526[ss:sp_1515 - 6:word16] = 0x4300
	word16 cx_1531
	selector ds_1533
	fn0800_409C(cx_1460, ds_1322, Mem1526[ss:sp_1515 - 6:word16], Mem1526[ss:sp_1515 - 4:word16], Mem1526[ss:sp_1515 - 2:word16], Mem1526[ss:sp_1515:word16], out cx_1531, out dx_2047, out di_2048, out es_2049, out ds_1533, out Top_2050)
	Mem1545[ss:sp_1515:word16] = Mem1526[ds_1533:0x29D1:word16]
	Mem1548[ss:sp_1515 - 2:word16] = Mem1545[ds_1533:0x29CF:word16]
	Mem1551[ss:sp_1515 - 4:word16] = Mem1548[ds_1533:0x2A09:word16]
	Mem1554[ss:sp_1515 - 6:word16] = Mem1551[ds_1533:0x2A07:word16]
	fn0800_409C(cx_1531, ds_1533, Mem1554[ss:sp_1515 - 6:word16], Mem1554[ss:sp_1515 - 4:word16], Mem1554[ss:sp_1515 - 2:word16], Mem1554[ss:sp_1515:word16], out cx_2051, out dx_2052, out di_2053, out es_2054, out ds_1322, out Top_2055)
	sp_1467 = sp_1515 + 0x0002
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_181E:
	word16 sp_1573 = sp_1467 - 2
	Mem1575[ss:sp_1573:word16] = Mem1570[ds_1322:0x2A09:word16]
	Mem1578[ss:sp_1573 - 2:word16] = Mem1575[ds_1322:0x2A07:word16]
	Mem1581[ss:sp_1573 - 4:word16] = Mem1578[ds_1322:0x29D1:word16]
	Mem1584[ss:sp_1573 - 6:word16] = Mem1581[ds_1322:0x29CF:word16]
	Mem1587[ss:sp_1573 - 8:word16] = Mem1584[ds_1322:0x29E5:word16]
	Mem1590[ss:sp_1573 - 10:word16] = Mem1587[ds_1322:0x29E3:word16]
	word16 sp_1600
	fn0800_3B0A(Mem1590[ss:sp_1573 - 2:word16], Mem1590[ss:sp_1573:word16], out cx_1294, out dx_2058, out bp_2059, out ds_1322)
	sp_1301 = sp_1600 + 0x000C
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_17A6:
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_183F:
	word16 sp_1613 = sp_1301 - 2
	Mem1615[ss:sp_1613:word16] = Mem1610[ds_1322:0x29D1:word16]
	Mem1618[ss:sp_1613 - 2:word16] = Mem1615[ds_1322:0x29CF:word16]
	Mem1621[ss:sp_1613 - 4:word16] = Mem1618[ds_1322:0x29ED:word16]
	Mem1624[ss:sp_1613 - 6:word16] = Mem1621[ds_1322:0x29EB:word16]
	selector ds_1636
	fn0800_409C(cx_1294, ds_1322, Mem1624[ss:sp_1613 - 6:word16], Mem1624[ss:sp_1613 - 4:word16], Mem1624[ss:sp_1613 - 2:word16], Mem1624[ss:sp_1613:word16], out cx_2029, out dx_2030, out di_2031, out es_2032, out ds_1636, out Top_2033)
	Mem1648[ss:sp_1613:word16] = Mem1624[ds_1636:0x29E5:word16]
	Mem1651[ss:sp_1613 - 2:word16] = Mem1648[ds_1636:0x29E3:word16]
	// Failed to bind call argument.
	// Please report this issue at https://github.com/uxmal/reko
	word16 stackArg4 = <invalid>
	word16 sp_1656
	word16 di_1658
	fn0800_A614(ds_1636, Mem1651[ss:sp_1613 - 2:segptr32], stackArg4, out cx_2035, out dx_2036, out bp_2037, out si_1660, out di_1658, out ds_1661)
	Mem1669[ss:sp_1656 + 0x0002:word16] = ds_1661
	Mem1672[ss:sp_1656:word16] = 0x4541
	Mem1674[ss:sp_1656 - 2:word16] = si_1660
	word16 dx_1679
	word16 cx_1677 = fn0800_0ABC(di_1658, ds_1661, Mem1674[ss:sp_1656 - 2:word16], Mem1674[ss:sp_1656:word16], Mem1674[ss:sp_1656 + 2:word16], out dx_1679, out di_1678)
	ptr32 es_bx_1688 = Mem1674[ds_1661:0x2E51:segptr32]
	dx_1700 = DPB(DPB(dx_1679, Mem1674[es_bx_1688 + 0x0005:byte], 0), 0x00, 8) (alias)
	sp_1687 = sp_1656 + 0x0004
	word16 bx_1690 = (word16) es_bx_1688
	cx_1709 = DPB(cx_1677, 0x08, 0) (alias)
	branch (DPB(DPB(ax_1675, Mem1674[es_bx_1688 + 0x0004:byte], 0), 0x00, 8) << 0x08) + dx_1700 <u 0xFF8C l0800_1897
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_188A:
	Mem1705[ss:sp_1656 + 0x0002:word16] = ds_1661
	Mem1708[ss:sp_1656:word16] = 0x0952
	fn0800_B2EF(cx_1709, dx_1700, bx_1690, ds_1661, Mem1708[ss:sp_1656:word16], Mem1708[ss:sp_1656 + 2:word16], out si_2042, out di_2043)
	sp_1718 = sp_1656 + 0x0004
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_18A9:
	word16 sp_1724 = sp_1718 - 2
	Mem1726[ss:sp_1724:word16] = Mem1721[ds_1661:0x29DD:word16]
	Mem1729[ss:sp_1724 - 2:word16] = Mem1726[ds_1661:0x29DB:word16]
	// Failed to bind call argument.
	// Please report this issue at https://github.com/uxmal/reko
	word16 stackArg4 = <invalid>
	word16 sp_1734
	selector ds_1739
	fn0800_A614(ds_1661, Mem1729[ss:sp_1724 - 2:segptr32], stackArg4, out cx_2006, out dx_2007, out bp_2008, out si_2009, out di_2010, out ds_1739)
	Mem1747[ss:sp_1734 + 0x0002:word16] = ds_1739
	Mem1750[ss:sp_1734:word16] = 0x4477
	fn0800_8F7F(0x4477, ds_1739, Mem1750[ss:sp_1734:segptr32])
	word16 sp_1767
	selector ds_1763 = fn0800_1E5E(ds_1739)
	Mem1776[ss:sp_1767 - 2:word16] = Mem1750[ds_1763:0x29D1:word16]
	Mem1779[ss:sp_1767 - 4:word16] = Mem1776[ds_1763:0x29CF:word16]
	// Failed to bind call argument.
	// Please report this issue at https://github.com/uxmal/reko
	word16 stackArg4 = <invalid>
	selector ds_1789
	fn0800_A614(ds_1763, Mem1779[ss:sp_1767 - 4:segptr32], stackArg4, out cx_2012, out dx_2013, out bp_1781, out si_2014, out di_2015, out ds_1789)
	return ds_1789
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_153D:
	word16 sp_1806 = sp_1804 - 2
	Mem1807[ss:sp_1806:word16] = Mem1802[ds_406:0x29D1:word16]
	Mem1810[ss:sp_1806 - 2:word16] = Mem1807[ds_406:0x29CF:word16]
	// Failed to bind call argument.
	// Please report this issue at https://github.com/uxmal/reko
	word16 stackArg4 = <invalid>
	selector ds_1820
	fn0800_A614(ds_406, Mem1810[ss:sp_1806 - 2:segptr32], stackArg4, out cx_1998, out dx_1999, out bp_1812, out si_2000, out di_2001, out ds_1820)
	return ds_1820
// DataOut:
// DataOut (flags):
// SymbolicIn:

fn0800_12E2_exit:
// DataOut:
// DataOut (flags):
// SymbolicIn:



selector fn0800_18D9(word16 cx, word16 dx, selector ds)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  cx:[0..15] ds:[0..15] dx:[0..15] ss:[0..15]
// LiveOut: ds sp
// Trashed: SCZDOP ax bp bx cx di ds dx es si sp Top
// Preserved:
fn0800_18D9_entry:
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_18D9:
	word16 di_37
	word16 si_38
	fn0800_B2EF(cx, dx, Mem18[ds:0x2A25:word16] << 0x0002, ds, 0x096C, ds, out si_38, out di_37)
	word16 dx_62
	word16 sp_65
	selector ds_106
	word16 ax_56 = fn0800_AA7E(si_38, di_37, ds, 0x4348, ds, 0x097D, ds, out cx_434, out dx_62, out bp_435, out si_436, out di_437, out ds_106)
	Mem71[ds_106:0x29D1:word16] = dx_62
	Mem72[ds_106:0x29CF:word16] = ax_56
	branch (ax_56 | dx_62) != 0x0000 l0800_192A
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_191B:
	Mem78[ss:sp_65 + 0x0006:word16] = ds_106
	Mem81[ss:sp_65 + 0x0004:word16] = 0x4348
	Mem84[ss:sp_65 + 0x0002:word16] = 0x0007
	// Failed to bind call argument.
	// Please report this issue at https://github.com/uxmal/reko
	word16 stackArg6 = <invalid>
	fn0800_0D24(ds_106, Mem84[ss:sp_65 + 0x0002:word16], Mem84[ss:sp_65 + 0x0004:segptr32], stackArg6, out cx_439, out dx_440, out bx_441, out si_442, out di_443, out es_444, out ds_106, out Top_445)
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_192A:
	Mem105[ss:sp_65 + 0x0006:word16] = 0x0001
	word16 sp_116
	word16 bp_108
	word16 si_115
	word16 di_111
	selector ds_112
	word16 dx_113
	word16 cx_110 = fn0800_1CF6(ds_106, Mem105[ss:sp_65 + 0x0006:word16], out dx_113, out bp_108, out si_115, out di_111, out ds_112)
	Mem127[ss:sp_116:word16] = 0x0000
	Mem129[ss:sp_116 - 2:word16] = 0x0000
	fn0800_2DBF(ds_112, Mem129[ss:sp_116 - 2:word16], Mem129[ss:sp_116:word16])
	word16 sp_131 = sp_116 + 0x0002
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_19BC:
	word16 sp_134 = sp_131 - 2
	Mem136[ss:sp_134:word16] = ss
	Mem140[ss:sp_134 - 2:word16] = bp_108 - 0x006E
	Mem142[ss:sp_134 - 4:word16] = ss
	Mem145[ss:sp_134 - 6:word16] = bp_108 - 0x0008
	Mem147[ss:sp_134 - 8:word16] = ss
	Mem150[ss:sp_134 - 10:word16] = bp_108 - 0x0004
	word16 di_159
	word16 si_162
	selector ds_164
	word16 bp_165
	word16 sp_166
	branch fn0800_29C5(cx_110, dx_113, si_115, di_111, ds_112, out bp_165, out si_162, out di_159, out ds_164) == 0x0000 l0800_19D8
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_19D8:
	word16 sp_186
	selector ds_182 = fn0800_1E5E(ds_164)
	Mem195[ss:sp_186 - 2:word16] = Mem150[ds_182:0x29D1:word16]
	Mem198[ss:sp_186 - 4:word16] = Mem195[ds_182:0x29CF:word16]
	// Failed to bind call argument.
	// Please report this issue at https://github.com/uxmal/reko
	word16 stackArg4 = <invalid>
	selector ds_208
	fn0800_A614(ds_182, Mem198[ss:sp_186 - 4:segptr32], stackArg4, out cx_447, out dx_448, out bp_200, out si_449, out di_450, out ds_208)
	return ds_208
// DataOut:
// DataOut (flags):
// SymbolicIn:

fn0800_18D9_exit:
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_19D5:
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_1940:
	Mem220[ss:sp_166 + 0x000A:word16] = ss
	Mem223[ss:sp_166 + 0x0008:word16] = bp_165 - 0x006E
	fn0800_0C93(si_162, di_159, ds_164, Mem223[ss:sp_166 + 0x0008:word16], Mem223[ss:sp_166 + 0x000A:word16], out dx_451)
	Mem239[ss:sp_166 + 0x000A:word16] = Mem223[ss:bp_165 - 0x0006:word16]
	Mem242[ss:sp_166 + 0x0008:word16] = Mem239[ss:bp_165 - 0x0008:word16]
	word16 sp_252
	fn0800_23EC(ds_164, Mem242[ss:sp_166 + 0x0008:word16], Mem242[ss:sp_166 + 0x000A:word16], out bp_108, out si_115, out di_452, out ds_112)
	Mem263[ss:sp_252 + 0x0002:word16] = Mem242[ss:bp_108 - 0x0006:word16]
	Mem266[ss:sp_252:word16] = Mem263[ss:bp_108 - 0x0008:word16]
	// Failed to bind call argument.
	// Please report this issue at https://github.com/uxmal/reko
	word16 stackArg4 = <invalid>
	fn0800_22FE(ds_112, Mem266[ss:sp_252:segptr32], stackArg4)
	ptr32 es_di_278 = Mem266[ss:bp_108 - 0x0004:segptr32]
	selector es_316 = SLICE(es_di_278, selector, 16)
	word16 di_280 = (word16) es_di_278 + 0x0002
	word16 cx_284 = 0xFFFF
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_196E:
	branch cx_284 == 0x0000 l0800_1970
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_196E_1:
	di_280 = di_280 + 0x0001
	cx_284 = cx_284 - 0x0001
	branch Mem266[es_316:di_280:byte] == 0x00 l0800_196E
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_1970:
	word16 cx_295 = ~cx_284
	word16 di_298 = di_280 - cx_295
	bool Z_308 = SLICE(cond(di_298), bool, 2)
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_1976:
	branch cx_295 == 0x0000 l0800_1978
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_1976_2:
	Z_308 = SLICE(cond(0x00 - Mem266[es_316:di_298:byte]), bool, 2) (alias)
	di_298 = di_298 + 0x0001
	cx_295 = cx_295 - 0x0001
	branch Mem266[es_316:di_298:byte] == 0x00 l0800_1976
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_1978:
	branch Z_308 l0800_1981
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_197A:
	di_298 = 0x0001
	es_316 = 0x0000
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_1981:
	word16 di_319 = di_298 - 0x0001
	branch Mem266[es_316:di_319 + 0x0001:byte] != 0x00 l0800_19AD
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_198D:
	word16 dx_334 = Mem266[ds_112:0x2E51:word16]
	branch Mem266[ds_112:0x2E53:word16] != Mem266[ss:bp_108 - 0x0002:word16] l0800_19A1
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_199C:
	branch dx_334 + 0x0008 == Mem266[ss:bp_108 - 0x0004:word16] l0800_19AD
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_19A1:
	Mem361[ss:sp_252 + 0x0002:word16] = Mem266[ss:bp_108 - 0x0002:word16]
	Mem364[ss:sp_252:word16] = Mem361[ss:bp_108 - 0x0004:word16]
	// Failed to bind call argument.
	// Please report this issue at https://github.com/uxmal/reko
	word16 stackArg4 = <invalid>
	fn0800_2201(ds_112, Mem364[ss:sp_252:segptr32], stackArg4)
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_19AD:
	Mem381[ss:sp_252 + 0x0002:word16] = ss
	Mem385[ss:sp_252:word16] = bp_108 - 0x006E
	Mem388[ss:sp_252 - 0x0002:word16] = 0x000D
	cx_110 = fn0800_0ABC(di_319, ds_112, Mem388[ss:sp_252 - 0x0002:word16], Mem388[ss:sp_252:word16], Mem388[ss:sp_252 + 0x0002:word16], out dx_113, out di_111)
	sp_131 = sp_252 + 0x0004
// DataOut:
// DataOut (flags):
// SymbolicIn:



selector fn0800_19EE(word16 cx, word16 dx, selector ds)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  cx:[0..15] ds:[0..15] dx:[0..15] ss:[0..15]
// LiveOut: ds sp
// Trashed: SCZDOP ax bp bx cx di ds dx es si sp Top
// Preserved:
fn0800_19EE_entry:
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_19EE:
	word16 di_40
	word16 si_41
	fn0800_B2EF(cx, dx, Mem21[ds:0x2A25:word16] << 0x0002, ds, 0x0986, ds, out si_41, out di_40)
	word16 bp_60
	word16 dx_65
	word16 sp_68
	selector ds_104
	word16 ax_59 = fn0800_AA7E(si_41, di_40, ds, 0x4348, ds, 0x0997, ds, out cx_1241, out dx_65, out bp_60, out si_1242, out di_1243, out ds_104)
	Mem74[ds_104:0x29D1:word16] = dx_65
	Mem75[ds_104:0x29CF:word16] = ax_59
	branch (ax_59 | dx_65) != 0x0000 l0800_1A40
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_1A31:
	Mem81[ss:sp_68 + 0x0006:word16] = ds_104
	Mem84[ss:sp_68 + 0x0004:word16] = 0x4348
	Mem87[ss:sp_68 + 0x0002:word16] = 0x0007
	// Failed to bind call argument.
	// Please report this issue at https://github.com/uxmal/reko
	word16 stackArg6 = <invalid>
	fn0800_0D24(ds_104, Mem87[ss:sp_68 + 0x0002:word16], Mem87[ss:sp_68 + 0x0004:segptr32], stackArg6, out cx_1245, out dx_1246, out bx_1247, out si_1248, out di_1249, out es_1250, out ds_104, out Top_1251)
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_1A40:
	branch Mem105[ds_104:0x2A27:word16] != Mem105[ds_104:0x269A:word16] l0800_1A7D
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_1A49:
	word16 dx_110 = Mem105[ds_104:0x0982:word16]
	Mem113[ss:bp_60 - 0x000A:word16] = Mem105[ds_104:0x0984:word16]
	Mem114[ss:bp_60 - 0x000C:word16] = dx_110
	ptr32 es_bx_117 = Mem114[ds_104:0x269C:segptr32]
	Mem121[es_bx_117 + 0x0006:word16] = ss
	Mem122[es_bx_117 + 0x0004:word16] = bp_60 - 0x000C
	Mem123[ds_104:0x2A27:word16] = 0x0001
	Mem124[ds_104:0x269A:word16] = 0x0002
	Mem125[ds_104:0x2A1B:word16] = 0x0001
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_1A7D:
	Mem133[ss:sp_68 + 0x0006:word16] = 0x0000
	Mem136[ss:sp_68 + 0x0004:word16] = 0x0001
	fn0800_2DBF(ds_104, Mem136[ss:sp_68 + 0x0004:word16], Mem136[ss:sp_68 + 0x0006:word16])
	Mem143[ss:sp_68 + 0x0006:word16] = 0x0001
	word16 sp_153
	word16 bp_1102
	word16 si_1116
	word16 di_1149
	selector ds_1110
	word16 dx_1150
	word16 cx_1148 = fn0800_1CF6(ds_104, Mem143[ss:sp_68 + 0x0006:word16], out dx_1150, out bp_1102, out si_1116, out di_1149, out ds_1110)
	word16 sp_1158 = sp_153 + 0x0002
	branch Mem143[ds_1110:0x2A25:word16] == 0x0007 l0800_1A9E
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_1A9E:
	Mem163[ss:sp_153:word16] = ds_1110
	Mem166[ss:sp_153 - 2:word16] = 0x099B
	Mem168[ss:sp_153 - 4:word16] = ds_1110
	Mem171[ss:sp_153 - 6:word16] = 0x44DC
	// Failed to bind call argument.
	// Please report this issue at https://github.com/uxmal/reko
	// Failed to bind call argument.
	// Please report this issue at https://github.com/uxmal/reko
	word16 stackArg6 = <invalid>
	word16 stackArg8 = <invalid>
	si_1116 = fn0800_37BE(cx_1148, dx_1150, ds_1110, Mem171[ss:sp_153 - 6:word16], Mem171[ss:sp_153 - 4:word16], stackArg6, stackArg8, out di_1149)
	sp_1158 = sp_153 + 0x0002
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_1A9B:
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_1CB4:
	word16 sp_185 = sp_1158 - 2
	Mem187[ss:sp_185:word16] = ss
	Mem191[ss:sp_185 - 2:word16] = bp_1102 - 0x0072
	Mem193[ss:sp_185 - 4:word16] = ss
	Mem196[ss:sp_185 - 6:word16] = bp_1102 - 0x0008
	Mem198[ss:sp_185 - 8:word16] = ss
	Mem201[ss:sp_185 - 10:word16] = bp_1102 - 0x0004
	word16 di_210
	word16 si_213
	selector ds_215
	word16 bp_216
	word16 sp_217
	branch fn0800_29C5(cx_1148, dx_1150, si_1116, di_1149, ds_1110, out bp_216, out si_213, out di_210, out ds_215) == 0x0000 l0800_1CD0
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_1CD0:
	Mem231[ss:sp_217 + 0x000A:word16] = Mem201[ds_215:0x29D1:word16]
	Mem234[ss:sp_217 + 0x0008:word16] = Mem231[ds_215:0x29CF:word16]
	// Failed to bind call argument.
	// Please report this issue at https://github.com/uxmal/reko
	word16 stackArg4 = <invalid>
	word16 sp_239
	selector ds_244
	fn0800_A614(ds_215, Mem234[ss:sp_217 + 0x0008:segptr32], stackArg4, out cx_1255, out dx_242, out bp_236, out si_1256, out di_1257, out ds_244)
	branch Mem234[ds_244:0x2A25:word16] != 0x0007 l0800_1CF0
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_1CE5:
	Mem253[ss:sp_239 + 0x0002:word16] = ds_244
	Mem256[ss:sp_239:word16] = 0x44DC
	fn0800_8F7F(0x44DC, ds_244, Mem256[ss:sp_239:segptr32])
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_1CF0:
	return ds_244
// DataOut:
// DataOut (flags):
// SymbolicIn:

fn0800_19EE_exit:
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_1CCD:
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_1AB1:
	Mem276[ss:sp_217 + 0x000A:word16] = ss
	Mem279[ss:sp_217 + 0x0008:word16] = bp_216 - 0x0072
	fn0800_0C93(si_213, di_210, ds_215, Mem279[ss:sp_217 + 0x0008:word16], Mem279[ss:sp_217 + 0x000A:word16], out dx_1258)
	Mem295[ss:sp_217 + 0x000A:word16] = Mem279[ss:bp_216 - 0x0006:word16]
	Mem298[ss:sp_217 + 0x0008:word16] = Mem295[ss:bp_216 - 0x0008:word16]
	selector ds_1018
	word16 si_1034 = fn0800_24FE(ds_215, Mem298[ss:sp_217 + 0x0008:segptr32], out ds_1018)
	Mem317[ss:sp_217 + 0x000A:word16] = 0x0000
	ptr32 es_di_318 = Mem317[ss:bp_216 - 0x0008:segptr32]
	selector es_1161 = SLICE(es_di_318, selector, 16)
	word16 di_1162 = (word16) es_di_318
	word16 cx_319 = 0xFFFF
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_1AD1:
	branch cx_319 == 0x0000 l0800_1AD3
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_1AD1_1:
	di_1162 = di_1162 + 0x0001
	cx_319 = cx_319 - 0x0001
	branch Mem317[es_1161:di_1162:byte] == 0x00 l0800_1AD1
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_1AD3:
	word16 cx_330 = ~cx_319
	word16 di_1276 = di_1162 - cx_330
	bool Z_343 = SLICE(cond(di_1276), bool, 2)
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_1AD9:
	branch cx_330 == 0x0000 l0800_1ADB
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_1AD9_2:
	Z_343 = SLICE(cond(0x00 - Mem317[es_1161:di_1276:byte]), bool, 2) (alias)
	di_1276 = di_1276 + 0x0001
	cx_330 = cx_330 - 0x0001
	branch Mem317[es_1161:di_1276:byte] == 0x00 l0800_1AD9
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_1ADB:
	branch Z_343 l0800_1AE4
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_1ADD:
	di_1276 = 0x0001
	es_1161 = 0x0000
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_1AE4:
	ptr32 es_di_375 = Mem317[ss:bp_216 - 0x0008:segptr32]
	Mem382[ss:sp_217 + 0x0008:word16] = (int16) Mem317[es_1161:di_1276:byte] << 0x08
	selector es_1167 = SLICE(es_di_375, selector, 16)
	word16 di_1168 = (word16) es_di_375
	word16 cx_386 = 0xFFFF
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_1AFB:
	branch cx_386 == 0x0000 l0800_1AFD
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_1AFB_1:
	di_1168 = di_1168 + 0x0001
	cx_386 = cx_386 - 0x0001
	branch Mem382[es_1167:di_1168:byte] == 0x00 l0800_1AFB
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_1AFD:
	word16 cx_397 = ~cx_386
	word16 di_1278 = di_1168 - cx_397
	bool Z_410 = SLICE(cond(di_1278), bool, 2)
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_1B03:
	branch cx_397 == 0x0000 l0800_1B05
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_1B03_2:
	Z_410 = SLICE(cond(0x00 - Mem382[es_1167:di_1278:byte]), bool, 2) (alias)
	di_1278 = di_1278 + 0x0001
	cx_397 = cx_397 - 0x0001
	branch Mem382[es_1167:di_1278:byte] == 0x00 l0800_1B03
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_1B05:
	branch Z_410 l0800_1B0E
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_1B07:
	di_1278 = 0x0001
	es_1167 = 0x0000
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_1B0E:
	ptr32 es_di_453 = Mem382[ss:bp_216 - 0x0008:segptr32]
	Mem455[ss:sp_217 + 0x0008:word16] = Mem382[ss:sp_217 + 0x0008:word16] + DPB(DPB(es_1167, Mem382[es_1167:di_1278 + 0x0001:byte], 0), 0x00, 8)
	Mem457[ss:sp_217 + 0x0006:word16] = 0x0000
	selector es_1173 = SLICE(es_di_453, selector, 16)
	word16 di_1174 = (word16) es_di_453
	word16 cx_458 = 0xFFFF
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_1B26:
	branch cx_458 == 0x0000 l0800_1B28
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_1B26_1:
	di_1174 = di_1174 + 0x0001
	cx_458 = cx_458 - 0x0001
	branch Mem457[es_1173:di_1174:byte] == 0x00 l0800_1B26
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_1B28:
	word16 cx_469 = ~cx_458
	word16 di_1280 = di_1174 - cx_469
	bool Z_482 = SLICE(cond(di_1280), bool, 2)
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_1B2E:
	branch cx_469 == 0x0000 l0800_1B30
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_1B2E_2:
	Z_482 = SLICE(cond(0x00 - Mem457[es_1173:di_1280:byte]), bool, 2) (alias)
	di_1280 = di_1280 + 0x0001
	cx_469 = cx_469 - 0x0001
	branch Mem457[es_1173:di_1280:byte] == 0x00 l0800_1B2E
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_1B30:
	branch Z_482 l0800_1B39
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_1B32:
	di_1280 = 0x0001
	es_1173 = 0x0000
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_1B39:
	ptr32 es_di_514 = Mem457[ss:bp_216 - 0x0008:segptr32]
	Mem521[ss:sp_217 + 0x0004:word16] = (int16) Mem457[es_1173:di_1280 + 0x0002:byte] << 0x08
	selector es_1179 = SLICE(es_di_514, selector, 16)
	word16 di_1180 = (word16) es_di_514
	word16 cx_525 = 0xFFFF
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_1B50:
	branch cx_525 == 0x0000 l0800_1B52
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_1B50_1:
	di_1180 = di_1180 + 0x0001
	cx_525 = cx_525 - 0x0001
	branch Mem521[es_1179:di_1180:byte] == 0x00 l0800_1B50
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_1B52:
	word16 cx_536 = ~cx_525
	word16 di_1282 = di_1180 - cx_536
	bool Z_549 = SLICE(cond(di_1282), bool, 2)
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_1B58:
	branch cx_536 == 0x0000 l0800_1B5A
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_1B58_2:
	Z_549 = SLICE(cond(0x00 - Mem521[es_1179:di_1282:byte]), bool, 2) (alias)
	di_1282 = di_1282 + 0x0001
	cx_536 = cx_536 - 0x0001
	branch Mem521[es_1179:di_1282:byte] == 0x00 l0800_1B58
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_1B5A:
	branch Z_549 l0800_1B63
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_1B5C:
	di_1282 = 0x0001
	es_1179 = 0x0000
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_1B63:
	word16 di_1055 = di_1282 - 0x0001
	word16 ax_586 = Mem521[ss:sp_217 + 0x0006:word16] + (Mem521[ss:sp_217 + 0x0004:word16] + DPB(DPB(es_1179, Mem521[es_1179:di_1055 + 0x0004:byte], 0), 0x00, 8))
	Mem594[ss:sp_217 + 0x0008:word16] = Mem521[ss:sp_217 + 0x0008:word16] + (ax_586 <u 0x0000)
	Mem596[ss:sp_217 + 0x0006:word16] = ax_586
	Mem619[ss:sp_217 + 0x0004:word16] = Mem596[ds_1018:0x29D1:word16]
	Mem622[ss:sp_217 + 0x0002:word16] = Mem619[ds_1018:0x29CF:word16]
	fn0800_ACB3(ds_1018, Mem622[ss:sp_217 + 0x0002:word16], Mem622[ss:sp_217 + 0x0004:word16], Mem622[ss:sp_217 + 0x000A:word16], out cx_1259, out dx_1260, out bx_1261, out es_1262)
	branch Mem622[ds_1018:0x2A25:word16] != 0x0007 l0800_1B92
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_1B92:
	Mem636[ss:sp_217 + 0x000A:word16] = ds_1018
	selector es_637 = Mem636[ss:sp_217 + 0x000A:selector]
	Mem641[ss:sp_217 + 0x000A:word16] = es_637
	Mem643[ss:sp_217 + 0x0008:word16] = 0x44DC
	word16 di_1283 = 0x427E
	word16 cx_648 = 0xFFFF
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_1BA1:
	branch cx_648 == 0x0000 l0800_1BA3
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_1BA1_1:
	di_1283 = di_1283 + 0x0001
	cx_648 = cx_648 - 0x0001
	branch Mem643[es_637:di_1283:byte] == 0x00 l0800_1BA1
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_1BA3:
	word16 di_1001 = Mem643[ss:sp_217 + 0x0008:word16]
	selector es_674 = Mem643[ss:sp_217 + 0x000A:selector]
	Mem679[ss:sp_217 + 0x000A:word16] = ds_1018
	word16 cx_659 = ~cx_648
	word16 cx_1015 = cx_659 >>u 0x0001
	word16 si_1003 = di_1283 - cx_659
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_1BB2:
	branch cx_1015 == 0x0000 l0800_1BB4
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_1BB4:
	word16 cx_1005 = cx_1015 * 0x0002 + (cx_659 >>u 0x0001 <u 0x0000)
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_1BB6:
	branch cx_1005 == 0x0000 l0800_1BB8
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_1BB8:
	selector ds_689 = Mem688[ss:sp_217 + 0x000A:selector]
	branch Mem688[ds_689:0x2A25:word16] != 0x0008 l0800_1C29
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_1BC0:
	branch Mem688[ds_689:0x427E:byte] == 0x00 l0800_1BFC
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_1BC7:
	branch Mem688[ss:bp_216 - 0x0072:byte] != 0x5C l0800_1BFC
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_1BFC:
	Mem701[ss:sp_217 + 0x000A:word16] = ss
	Mem705[ss:sp_217 + 0x0008:word16] = bp_216 - 0x0072
	Mem708[ss:sp_217 + 0x0006:word16] = ds_689
	selector es_709 = Mem708[ss:sp_217 + 0x0006:selector]
	word16 di_1284 = 0x44DC
	word16 cx_715 = 0xFFFF
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_1C0B:
	branch cx_715 == 0x0000 l0800_1C0D
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_1C0B_1:
	di_1284 = di_1284 + 0x0001
	cx_715 = cx_715 - 0x0001
	branch Mem708[es_709:di_1284:byte] == 0x00 l0800_1C0B
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_1C0D:
	word16 cx_726 = ~cx_715
	word16 di_1285 = di_1284 - cx_726
	bool Z_739 = SLICE(cond(di_1285), bool, 2)
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_1C13:
	branch cx_726 == 0x0000 l0800_1C15
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_1C13_2:
	Z_739 = SLICE(cond(0x00 - Mem708[es_709:di_1285:byte]), bool, 2) (alias)
	di_1285 = di_1285 + 0x0001
	cx_726 = cx_726 - 0x0001
	branch Mem708[es_709:di_1285:byte] == 0x00 l0800_1C13
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_1C15:
	branch Z_739 l0800_1C1E
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_1C17:
	di_1285 = 0x0001
	es_709 = 0x0000
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_1C1E:
	Mem766[ss:sp_217 + 0x0006:word16] = es_709
	word16 di_750 = di_1285 - 0x0001
	Mem768[ss:sp_217 + 0x0004:word16] = di_750
	fn0800_3509(si_1003, di_750, Mem768[ss:sp_217 + 0x0004:word16], Mem768[ss:sp_217 + 0x0006:selector], Mem768[ss:sp_217 + 0x0008:word16], Mem768[ss:sp_217 + 0x000A:word16], out bx_1274)
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_1BCD:
	Mem789[ss:sp_217 + 0x000A:word16] = ss
	Mem792[ss:sp_217 + 0x0008:word16] = bp_216 - 0x0071
	Mem794[ss:sp_217 + 0x0006:word16] = ds_689
	selector es_795 = Mem794[ss:sp_217 + 0x0006:selector]
	word16 di_1286 = 0x44DC
	word16 cx_801 = 0xFFFF
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_1BDC:
	branch cx_801 == 0x0000 l0800_1BDE
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_1BDC_1:
	di_1286 = di_1286 + 0x0001
	cx_801 = cx_801 - 0x0001
	branch Mem794[es_795:di_1286:byte] == 0x00 l0800_1BDC
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_1BDE:
	word16 cx_812 = ~cx_801
	word16 di_1287 = di_1286 - cx_812
	bool Z_825 = SLICE(cond(di_1287), bool, 2)
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_1BE4:
	branch cx_812 == 0x0000 l0800_1BE6
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_1BE4_2:
	Z_825 = SLICE(cond(0x00 - Mem794[es_795:di_1287:byte]), bool, 2) (alias)
	di_1287 = di_1287 + 0x0001
	cx_812 = cx_812 - 0x0001
	branch Mem794[es_795:di_1287:byte] == 0x00 l0800_1BE4
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_1BE6:
	branch Z_825 l0800_1BEF
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_1BE8:
	di_1287 = 0x0001
	es_795 = 0x0000
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_1BEF:
	Mem852[ss:sp_217 + 0x0006:word16] = es_795
	word16 di_836 = di_1287 - 0x0001
	Mem854[ss:sp_217 + 0x0004:word16] = di_836
	fn0800_3509(si_1003, di_836, Mem854[ss:sp_217 + 0x0004:word16], Mem854[ss:sp_217 + 0x0006:selector], Mem854[ss:sp_217 + 0x0008:word16], Mem854[ss:sp_217 + 0x000A:word16], out bx_1273)
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_1C29:
	Mem886[ss:sp_217 + 0x000A:word16] = ds_689
	Mem889[ss:sp_217 + 0x0008:word16] = 0x44DC
	fn0800_3678(ds_689, Mem889[ss:sp_217 + 0x0008:word16], Mem889[ss:sp_217 + 0x000A:word16], out dx_1272, out si_1034, out ds_1018)
	Mem904[ss:sp_217 + 0x000A:word16] = ss
	Mem918[ss:sp_217 + 0x0008:word16] = bp_216 - 0x0072
	Mem920[ss:sp_217 + 0x0006:word16] = ds_1018
	selector es_921 = Mem920[ss:sp_217 + 0x0006:selector]
	word16 di_1288 = 0x44DC
	word16 cx_927 = 0xFFFF
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_1C43:
	branch cx_927 == 0x0000 l0800_1C45
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_1C43_1:
	di_1288 = di_1288 + 0x0001
	cx_927 = cx_927 - 0x0001
	branch Mem920[es_921:di_1288:byte] == 0x00 l0800_1C43
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_1C45:
	word16 cx_938 = ~cx_927
	word16 di_1289 = di_1288 - cx_938
	bool Z_951 = SLICE(cond(di_1289), bool, 2)
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_1C4B:
	branch cx_938 == 0x0000 l0800_1C4D
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_1C4B_2:
	Z_951 = SLICE(cond(0x00 - Mem920[es_921:di_1289:byte]), bool, 2) (alias)
	di_1289 = di_1289 + 0x0001
	cx_938 = cx_938 - 0x0001
	branch Mem920[es_921:di_1289:byte] == 0x00 l0800_1C4B
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_1C4D:
	branch Z_951 l0800_1C56
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_1C4F:
	di_1289 = 0x0001
	es_921 = 0x0000
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_1C56:
	Mem978[ss:sp_217 + 0x0006:word16] = es_921
	di_1055 = di_1289 - 0x0001
	Mem980[ss:sp_217 + 0x0004:word16] = di_1055
	fn0800_35A3(si_1034, di_1055, Mem980[ss:sp_217 + 0x0004:word16], Mem980[ss:sp_217 + 0x0006:selector], Mem980[ss:sp_217 + 0x0008:word16], Mem980[ss:sp_217 + 0x000A:word16])
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_1BB6_1:
	Mem1002[es_674:di_1001:byte] = Mem688[es_637:si_1003:byte]
	si_1003 = si_1003 + 0x0001
	di_1001 = di_1001 + 0x0001
	cx_1005 = cx_1005 - 0x0001
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_1BB2_2:
	Mem1012[es_674:di_1001:word16] = Mem1008[es_637:si_1003:word16]
	si_1003 = si_1003 + 0x0002
	di_1001 = di_1001 + 0x0002
	cx_1015 = cx_1015 - 0x0001
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_1B8F:
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_1C61:
	Mem1025[ss:sp_217 + 0x000A:word16] = ds_1018
	Mem1028[ss:sp_217 + 0x0008:word16] = 0x09A8
	Mem1030[ss:sp_217 + 0x0006:word16] = ds_1018
	Mem1033[ss:sp_217 + 0x0004:word16] = 0x44DC
	selector ds_1061
	word16 dx_1062
	word16 ax_1056 = fn0800_4234(si_1034, di_1055, ds_1018, Mem1033[ss:sp_217 + 0x0004:word16], Mem1033[ss:sp_217 + 0x0006:word16], Mem1033[ss:sp_217 + 0x0008:word16], Mem1033[ss:sp_217 + 0x000A:word16], out cx_1263, out dx_1062, out bp_1264, out si_1265, out di_1266, out ds_1061)
	Mem1073[ds_1061:0x29E1:word16] = dx_1062
	Mem1074[ds_1061:0x29DF:word16] = ax_1056
	word16 dx_1076 = Mem1074[ds_1061:0x29CF:word16]
	Mem1077[ds_1061:0x29E5:word16] = Mem1074[ds_1061:0x29D1:word16]
	Mem1078[ds_1061:0x29E3:word16] = dx_1076
	selector ds_1084
	word16 sp_1088
	fn0800_5374(ds_1061, out dx_1267, out bp_1268, out ds_1084)
	Mem1097[ss:sp_1088 - 2:word16] = Mem1078[ds_1084:0x29E1:word16]
	Mem1100[ss:sp_1088 - 4:word16] = Mem1097[ds_1084:0x29DF:word16]
	// Failed to bind call argument.
	// Please report this issue at https://github.com/uxmal/reko
	word16 stackArg4 = <invalid>
	word16 sp_1105
	word16 di_1107
	word16 si_1109
	fn0800_A614(ds_1084, Mem1100[ss:sp_1088 - 4:segptr32], stackArg4, out cx_1270, out dx_1271, out bp_1102, out si_1109, out di_1107, out ds_1110)
	si_1116 = si_1109
	branch si_1109 == 0x0000 l0800_1CA8
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_1C9D:
	Mem1121[ss:sp_1105 + 0x0002:word16] = ds_1110
	Mem1124[ss:sp_1105:word16] = 0x44DC
	fn0800_8F7F(0x44DC, ds_1110, Mem1124[ss:sp_1105:segptr32])
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_1CA8:
	Mem1136[ss:sp_1105 + 0x0002:word16] = ss
	Mem1140[ss:sp_1105:word16] = bp_1102 - 0x0072
	Mem1143[ss:sp_1105 - 0x0002:word16] = si_1109
	cx_1148 = fn0800_0ABC(di_1107, ds_1110, Mem1143[ss:sp_1105 - 0x0002:word16], Mem1143[ss:sp_1105:word16], Mem1143[ss:sp_1105 + 0x0002:word16], out dx_1150, out di_1149)
	sp_1158 = sp_1105 + 0x0004
// DataOut:
// DataOut (flags):
// SymbolicIn:



word16 fn0800_1CF6(selector ds, word16 wArg02, ptr16 & dxOut, ptr16 & bpOut, ptr16 & siOut, ptr16 & diOut, ptr16 & dsOut)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  ds:[0..15] ss:[0..15] Stack +0002:[0..15]
// LiveOut: bp cx di ds dx si sp
// Trashed: SCZO ax bp bx cx di ds dx es si sp Top
// Preserved: D
fn0800_1CF6_entry:
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_1CF6:
	Mem18[ds:0x45A8:word16] = 0x0000
	Mem19[ds:0x45A6:word16] = 0x0000
	Mem20[ds:0x29ED:word16] = 0x0000
	Mem21[ds:0x29EB:word16] = 0x0000
	word16 ax_37 = fn0800_ACB3(ds, Mem33[ds:0x29CF:word16], Mem30[ds:0x29D1:word16], 0x0002, out cx_493, out dx_494, out bx_495, out es_496)
	word16 dx_58
	selector ds_103
	fn0800_3E5D(ds, Mem50[ds:0x29CF:word16], Mem36[ds:0x29D1:word16], out dx_58, out di_497, out es_498, out ds_103, out Top_499)
	Mem67[ds_103:0x29ED:word16] = dx_58
	Mem68[ds_103:0x29EB:word16] = ax_37
	fn0800_4194(ds_103, Mem71[ds_103:0x29CF:word16], Mem68[ds_103:0x29D1:word16])
	branch dx_58 >u Mem74[ds_103:0x29ED:word16] l0800_1D69
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_1D52:
	branch dx_58 <u Mem74[ds_103:0x29ED:word16] l0800_1D5A
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_1D54:
	branch ax_37 >=u Mem74[ds_103:0x29EB:word16] l0800_1D69
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_1D5A:
	// Failed to bind call argument.
	// Please report this issue at https://github.com/uxmal/reko
	word16 stackArg6 = <invalid>
	fn0800_0D24(ds_103, 0x000B, SEQ(ds_103, 0x4348), stackArg6, out cx_508, out dx_509, out bx_510, out si_511, out di_512, out es_513, out ds_103, out Top_514)
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_1D69:
	word16 ax_135 = fn0800_ACB3(ds_103, Mem131[ds_103:0x29CF:word16], Mem128[ds_103:0x29D1:word16], 0x0000, out cx_500, out dx_501, out bx_502, out es_503)
	word16 dx_156
	selector ds_155
	fn0800_3E5D(ds_103, Mem148[ds_103:0x29CF:word16], Mem134[ds_103:0x29D1:word16], out dx_156, out di_504, out es_505, out ds_155, out Top_506)
	branch dx_156 != 0x524E l0800_1D9B
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_1D96:
	branch ax_135 == 0x4341 l0800_1DAA
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_1D9B:
	// Failed to bind call argument.
	// Please report this issue at https://github.com/uxmal/reko
	word16 stackArg6 = <invalid>
	fn0800_0D24(ds_155, 0x000B, SEQ(ds_155, 0x4348), stackArg6, out cx_516, out dx_517, out bx_518, out si_519, out di_520, out es_521, out ds_155, out Top_522)
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_1DAA:
	word16 bp_255
	word16 si_262
	selector ds_259
	word16 sp_269
	selector ds_209
	fn0800_3E27(ds_155, Mem201[ds_155:0x29CF:word16], Mem196[ds_155:0x29D1:word16], out cx_523, out dx_524, out di_525, out es_526, out ds_209, out Top_527)
	fn0800_3E27(ds_209, Mem222[ds_209:0x29CF:word16], Mem204[ds_209:0x29D1:word16], out cx_528, out dx_529, out di_530, out es_531, out ds_532, out Top_533)
	branch wArg02 == 0x0000 l0800_1DE4
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_1DE4:
	// Failed to bind call argument.
	// Please report this issue at https://github.com/uxmal/reko
	// Failed to bind call argument.
	// Please report this issue at https://github.com/uxmal/reko
	word16 stackArg2 = <invalid>
	word16 stackArg4 = <invalid>
	word16 dx_260
	word16 sp_263
	word16 ax_254 = fn0800_4311(stackArg2, stackArg4, out dx_260, out bp_255, out si_262, out di_536, out ds_259)
	Mem271[ds_259:0x2E53:word16] = dx_260
	Mem272[ds_259:0x2E51:word16] = ax_254
	sp_269 = sp_263 + 0x0004
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_1DD1:
	// Failed to bind call argument.
	// Please report this issue at https://github.com/uxmal/reko
	// Failed to bind call argument.
	// Please report this issue at https://github.com/uxmal/reko
	word16 stackArg2 = <invalid>
	word16 stackArg4 = <invalid>
	word16 dx_286
	word16 sp_289
	word16 ax_280 = fn0800_4311(stackArg2, stackArg4, out dx_286, out bp_255, out si_262, out di_539, out ds_259)
	Mem297[ds_259:0x2E53:word16] = dx_286
	Mem298[ds_259:0x2E51:word16] = ax_280
	sp_269 = sp_289 + 0x0004
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_1DF8:
	word16 sp_303 = sp_269 - 2
	Mem305[ss:sp_303:word16] = 0x0000
	Mem309[ss:sp_303 - 2:word16] = Mem305[ds_259:0x29ED:word16]
	Mem312[ss:sp_303 - 4:word16] = Mem309[ds_259:0x29EB:word16]
	Mem315[ss:sp_303 - 6:word16] = Mem312[ds_259:0x29D1:word16]
	Mem318[ss:sp_303 - 8:word16] = Mem315[ds_259:0x29CF:word16]
	fn0800_ACB3(ds_259, Mem318[ss:sp_303 - 8:word16], Mem318[ss:sp_303 - 6:word16], Mem318[ss:sp_303:word16], out cx_540, out dx_541, out bx_542, out es_543)
	Mem331[ss:sp_303:word16] = Mem318[ds_259:0x29D1:word16]
	Mem334[ss:sp_303 - 2:word16] = Mem331[ds_259:0x29CF:word16]
	Mem339[ss:sp_303 - 4:word16] = 0x0000
	Mem342[ss:sp_303 - 6:word16] = si_262
	Mem345[ss:sp_303 - 8:word16] = Mem342[ds_259:0x2E53:word16]
	Mem348[ss:sp_303 - 10:word16] = Mem345[ds_259:0x2E51:word16]
	word16 si_356
	word16 di_352
	selector ds_353
	word16 cx_351 = (word16) fn0800_4110(ds_259, Mem348[ss:sp_303 - 10:word16], Mem348[ss:sp_303 - 8:word16], Mem348[ss:sp_303 - 6:word16], Mem348[ss:sp_303 - 4:word16], Mem348[ss:sp_303 - 2:word16], Mem348[ss:sp_303:word16], out si_356, out di_352, out ds_353)
	Mem365[ss:sp_303:word16] = 0x0000
	Mem369[ss:sp_303 - 2:word16] = si_356 - 0x0008
	word16 ax_370 = Mem369[ds_353:0x2E51:word16]
	Mem375[ss:sp_303 - 4:word16] = Mem369[ds_353:0x2E53:word16]
	Mem377[ss:sp_303 - 6:word16] = ax_370 + 0x0008
	word16 cx_401 = DPB(cx_351, cl_380, 0)
	byte cl_380
	word16 dx_381
	branch fn0800_2CCF(ds_353, Mem377[ss:sp_303 - 6:segptr32], Mem377[ss:sp_303 - 2:word16], Mem377[ss:sp_303:byte], out cl_380, out dx_381) == Mem377[ss:bp_255 - 0x0002:word16] l0800_1E59
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_1E4A:
	Mem392[ss:sp_303:word16] = ds_353
	Mem395[ss:sp_303 - 2:word16] = 0x4348
	Mem398[ss:sp_303 - 4:word16] = 0x000D
	// Failed to bind call argument.
	// Please report this issue at https://github.com/uxmal/reko
	word16 stackArg6 = <invalid>
	fn0800_0D24(ds_353, Mem398[ss:sp_303 - 4:word16], Mem398[ss:sp_303 - 2:segptr32], stackArg6, out cx_401, out dx_381, out bx_545, out si_546, out di_352, out es_547, out ds_353, out Top_548)
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_1E59:
	word16 si_418 = Mem417[ss:sp_269:word16]
	word16 bp_421 = Mem417[ss:bp_255:word16]
	dxOut = dx_381
	bpOut = bp_421
	siOut = si_418
	diOut = di_352
	dsOut = ds_353
	return cx_401
// DataOut:
// DataOut (flags):
// SymbolicIn:

fn0800_1CF6_exit:
// DataOut:
// DataOut (flags):
// SymbolicIn:



selector fn0800_1E5E(selector ds)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  ds:[0..15] ss:[0..15]
// LiveOut: ds sp
// Trashed: SCZO ax bp bx cx di ds dx es si sp Top
// Preserved: D
fn0800_1E5E_entry:
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_1E5E:
	ptr32 es_bx_9 = Mem7[ds:0x2E51:segptr32]
	word16 ax_24 = (DPB(DPB(ax, Mem7[es_bx_9 + 0x0004:byte], 0), 0x00, 8) << 0x08) + DPB(DPB(dx, Mem7[es_bx_9 + 0x0005:byte], 0), 0x00, 8)
	word16 ax_41 = fn0800_2CCF(ds, SEQ(Mem32[ds:0x2E53:word16], Mem32[ds:0x2E51:word16] + 0x0008), ax_24 - 0x0008, 0x0000, out cl_312, out dx_313)
	ptr32 es_bx_54 = Mem40[ds:0x2E51:segptr32]
	Mem58[es_bx_54 + 0x0006:byte] = (byte) (ax_41 >>u 0x08)
	Mem60[es_bx_54 + 0x0007:byte] = (byte) ax_41
	fn0800_ACB3(ds, Mem77[ds:0x29CF:word16], Mem74[ds:0x29D1:word16], 0x0000, out cx_314, out dx_315, out bx_316, out es_317)
	word16 si_145 = ax_24
	word16 cx_100
	word16 di_101
	selector ds_102
	word16 ax_98 = fn0800_3E27(ds, Mem94[ds:0x29CF:word16], Mem80[ds:0x29D1:word16], out cx_100, out dx_318, out di_101, out es_319, out ds_102, out Top_320)
	word16 sp_110 = fp - 0x0002
	branch ax_24 <=u ax_98 l0800_1EF7
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_1EF7:
	branch ax_24 >=u ax_98 l0800_1F19
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_1EFB:
	word16 sp_146
	fn0800_3C99(ax_24, di_101, ds_102, out bp_330, out si_145, out ds_102)
	sp_110 = sp_146 + 0x000C
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_1ED7:
	word16 sp_185
	si_145 = fn0800_3BC3(cx_100, 0x0000, ds_102, out ds_102)
	sp_110 = sp_185 + 0x000C
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_1F19:
	word16 sp_198 = sp_110 - 2
	Mem200[ss:sp_198:word16] = 0x0000
	Mem204[ss:sp_198 - 2:word16] = Mem200[ds_102:0x29ED:word16]
	Mem207[ss:sp_198 - 4:word16] = Mem204[ds_102:0x29EB:word16]
	Mem210[ss:sp_198 - 6:word16] = Mem207[ds_102:0x29D1:word16]
	Mem213[ss:sp_198 - 8:word16] = Mem210[ds_102:0x29CF:word16]
	fn0800_ACB3(ds_102, Mem213[ss:sp_198 - 8:word16], Mem213[ss:sp_198 - 6:word16], Mem213[ss:sp_198:word16], out cx_321, out dx_322, out bx_323, out es_324)
	Mem226[ss:sp_198:word16] = Mem213[ds_102:0x29D1:word16]
	Mem229[ss:sp_198 - 2:word16] = Mem226[ds_102:0x29CF:word16]
	Mem234[ss:sp_198 - 4:word16] = 0x0000
	Mem237[ss:sp_198 - 6:word16] = si_145
	Mem240[ss:sp_198 - 8:word16] = Mem237[ds_102:0x2E53:word16]
	Mem243[ss:sp_198 - 10:word16] = Mem240[ds_102:0x2E51:word16]
	selector ds_248
	fn0800_4152(ds_102, Mem243[ss:sp_198 - 10:word16], Mem243[ss:sp_198 - 8:word16], Mem243[ss:sp_198 - 6:word16], Mem243[ss:sp_198 - 2:word16], Mem243[ss:sp_198:word16], out cx_325, out ds_248)
	Mem261[ss:sp_198:word16] = Mem243[ds_248:0x2E53:word16]
	Mem264[ss:sp_198 - 2:word16] = Mem261[ds_248:0x2E51:word16]
	// Failed to bind call argument.
	// Please report this issue at https://github.com/uxmal/reko
	word16 stackArg2 = <invalid>
	selector ds_268
	fn0800_4346(ds_248, stackArg2, Mem264[ss:sp_198:word16], out cx_327, out dx_328, out bx_329, out ds_268)
	return ds_268
// DataOut:
// DataOut (flags):
// SymbolicIn:

fn0800_1E5E_exit:
// DataOut:
// DataOut (flags):
// SymbolicIn:



word16 fn0800_1F5C(selector ds, segptr32 ptrArg02, word16 wArg04, ptr16 & dxOut, ptr16 & diOut, ptr16 & dsOut)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  ds:[0..15] ss:[0..15] Stack +0002:[0..31]
// LiveOut: ax di ds dx
// Trashed: SCZO ax bx cx di ds dx es si Top
// Preserved: bp sp
fn0800_1F5C_entry:
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_1F5C:
	selector es_362 = SLICE(ptrArg02, selector, 16)
	word16 di_24 = (word16) ptrArg02
	word16 cx_20 = 0xFFFF
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_1F6C:
	branch cx_20 == 0x0000 l0800_1F6E
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_1F6C_1:
	di_24 = di_24 + 0x0001
	cx_20 = cx_20 - 0x0001
	branch Mem15[es_362:di_24:byte] == 0x00 l0800_1F6C
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_1F6E:
	word16 cx_31 = ~cx_20
	word16 di_34 = di_24 - cx_31
	bool Z_44 = SLICE(cond(di_34), bool, 2)
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_1F75:
	branch cx_31 == 0x0000 l0800_1F77
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_1F75_2:
	Z_44 = SLICE(cond(0x3A - Mem15[es_362:di_34:byte]), bool, 2) (alias)
	di_34 = di_34 + 0x0001
	cx_31 = cx_31 - 0x0001
	branch Mem15[es_362:di_34:byte] == 0x3A l0800_1F75
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_1F77:
	branch Z_44 l0800_1F80
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_1F79:
	di_34 = 0x0001
	es_362 = 0x0000
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_1F80:
	selector es_111
	word16 di_114
	word16 ax_117 = es_362
	branch (di_34 - 0x0001 | es_362) == 0x0000 l0800_1FAD
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_1F87:
	es_111 = SLICE(ptrArg02, selector, 16) (alias)
	word16 di_369 = (word16) ptrArg02
	word16 cx_79 = 0xFFFF
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_1F8F:
	branch cx_79 == 0x0000 l0800_1F91
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_1F8F_1:
	di_369 = di_369 + 0x0001
	cx_79 = cx_79 - 0x0001
	branch Mem15[es_111:di_369:byte] == 0x00 l0800_1F8F
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_1F91:
	word16 cx_102 = ~cx_79
	word16 di_101 = di_369 - cx_102
	bool Z_103 = SLICE(cond(di_101), bool, 2)
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_1F98:
	branch cx_102 == 0x0000 l0800_1F9A
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_1F98_2:
	Z_103 = SLICE(cond(0x3A - Mem15[es_111:di_101:byte]), bool, 2) (alias)
	di_101 = di_101 + 0x0001
	cx_102 = cx_102 - 0x0001
	branch Mem15[es_111:di_101:byte] == 0x3A l0800_1F98
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_1F9A:
	branch Z_103 l0800_1FA3
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_1F9C:
	di_101 = 0x0001
	es_111 = 0x0000
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_1FA3:
	di_114 = di_101 - 0x0001
	ax_117 = es_111
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_1FAD:
	ptr32 es_bx_145 = Mem144[ds:0x2E51:segptr32]
	word16 ax_171 = (DPB(DPB(ax_117, Mem144[es_bx_145 + 0x0004:byte], 0), 0x00, 8) << 0x08) + DPB(DPB(dx, Mem144[es_bx_145 + 0x0005:byte], 0), 0x00, 8)
	word16 ax_175 = Mem174[ds:0x2E53:word16]
	word16 dx_177 = Mem174[ds:0x2E51:word16] + ax_171
	ptrArg02 = SEQ(es_111, di_114 + 0x0001) (alias)
	selector es_374 = SLICE(ptrArg02, selector, 16)
	word16 di_188 = (word16) ptrArg02
	word16 cx_184 = 0xFFFF
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_1FDE:
	branch cx_184 == 0x0000 l0800_1FE0
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_1FDE_1:
	di_188 = di_479 + 0x0001
	cx_184 = cx_184 - 0x0001
	di_479 = di_188
	branch Mem179[es_374:di_479:byte] == 0x00 l0800_1FDE
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_1FE0:
	word16 ax_207 = dx_177 - Mem202[ds:0x2E51:word16]
	word16 cx_195 = ~cx_184
	// Failed to bind call argument.
	// Please report this issue at https://github.com/uxmal/reko
	word16 ax_211 = ax_207 + (cx_195 + 0x0003)
	word16 stackArg0 = <invalid>
	segptr32 ptrLoc06_407 = SEQ(ax_175, dx_177)
	word16 sp_221
	Mem230[ptrLoc06_407:byte] = (byte) fn0800_8C8A(ax_211, 0x08, 0x0000 - (ax_207 <u 0x0000) + (ax_211 <u 0x0000), stackArg0, out cl_473, out dx_474)
	Mem239[ptrLoc06_407 + 0x0001:byte] = (byte) (ptrLoc06_407 - Mem230[ds:0x2E51:word16]) + (cx_195 + 0x0003)
	Mem243[ss:sp_221 - 2:word16] = SLICE(ptrLoc06_407, selector, 16)
	Mem246[ss:sp_221 - 4:word16] = ptrLoc06_407 + 0x0002
	word16 bx_229 = (word16) ptrLoc06_407
	word16 di_247 = ptrArg02
	word16 cx_251 = 0xFFFF
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_202C:
	branch cx_251 == 0x0000 l0800_202E
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_202C_2:
	di_247 = di_247 + 0x0001
	cx_251 = cx_251 - 0x0001
	branch Mem246[ptrArg02:di_247:byte] == 0x00 l0800_202C
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_202E:
	word16 di_273 = Mem246[ss:sp_221 - 4:word16]
	selector es_277 = Mem246[ss:sp_221 - 2:selector]
	Mem282[ss:sp_221 - 2:word16] = ds
	word16 cx_262 = ~cx_251
	word16 cx_265 = cx_262 >>u 0x0001
	word16 si_267 = di_247 - cx_262
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_203D:
	branch cx_265 == 0x0000 l0800_203F
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_203F:
	word16 cx_286 = cx_265 * 0x0002 + (cx_262 >>u 0x0001 <u 0x0000)
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_2041:
	branch cx_286 == 0x0000 l0800_2043
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_2043:
	selector ds_292 = Mem291[ss:sp_221 - 2:selector]
	Mem298[ptrLoc06_407:bx_229 + (cx_195 + 0x0003) - 0x0001:byte] = 0x00
	ptr32 es_bx_303 = Mem298[ds_292:0x2E51:segptr32]
	Mem307[es_bx_303 + 0x0004:byte] = (byte) (ax_171 + (cx_195 + 0x0003) >>u 0x08)
	Mem310[es_bx_303 + 0x0005:byte] = ax_171 + (cx_195 + 0x0003)
	Mem315[ss:sp_221 - 2:word16] = 0x0000
	Mem317[ss:sp_221 - 4:word16] = 0x0000
	Mem319[ss:sp_221 - 6:word16] = 0x0000
	Mem322[ss:sp_221 - 8:word16] = cx_195 + 0x0003
	fn0800_2688(ds_292, Mem322[ss:sp_221 - 8:word16], Mem322[ss:sp_221 - 6:word16], Mem322[ss:sp_221 - 4:word16], Mem322[ss:sp_221 - 2:word16])
	word16 di_336 = Mem322[ss:sp_221:word16]
	dxOut = ptrLoc06_407
	diOut = di_336
	dsOut = ds_292
	return ptrLoc06_407
// DataOut:
// DataOut (flags):
// SymbolicIn:

fn0800_1F5C_exit:
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_2041_1:
	Mem347[es_277:di_273:byte] = Mem291[ptrArg02:si_267:byte]
	si_267 = si_267 + 0x0001
	di_273 = di_273 + 0x0001
	cx_286 = cx_286 - 0x0001
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_203D_3:
	Mem357[es_277:di_273:word16] = Mem353[ptrArg02:si_267:word16]
	si_267 = si_267 + 0x0002
	di_273 = di_273 + 0x0002
	cx_265 = cx_265 - 0x0001
// DataOut:
// DataOut (flags):
// SymbolicIn:



byte fn0800_2085(selector ds, segptr32 ptrArg02, selector psegArg04, segptr32 ptrArg06)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  ds:[0..15] ss:[0..15] Stack +0002:[0..31] Stack +0006:[0..31]
// LiveOut: cx
// Trashed: SCZDO ax bx cx dx es Top
// Preserved: bp di ds si sp
fn0800_2085_entry:
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_2085:
	ptr32 es_bx_17 = Mem15[ds:0x2E51:segptr32]
	word16 ax_32 = (DPB(DPB(ax, Mem15[es_bx_17 + 0x0004:byte], 0), 0x00, 8) << 0x08) + DPB(DPB(dx, Mem15[es_bx_17 + 0x0005:byte], 0), 0x00, 8)
	word16 dx_36 = Mem33[ds:0x2E51:word16] + ax_32
	selector es_497 = SLICE(ptrArg02, selector, 16)
	word16 di_47 = (word16) ptrArg02
	word16 cx_43 = 0xFFFF
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_20BE:
	branch cx_43 == 0x0000 l0800_20C0
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_20BE_1:
	di_47 = di_783 + 0x0001
	cx_43 = cx_43 - 0x0001
	di_783 = di_47
	branch Mem38[es_497:di_783:byte] == 0x00 l0800_20BE
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_20C0:
	word16 bx_80 = Mem61[ds:0x2E51:word16] + (((int16) Mem61[ptrArg06:byte] << 0x08) + DPB(DPB(dx_36, Mem61[ptrArg06 + 0x0001:byte], 0), 0x00, 8))
	word16 cx_54 = ~cx_43
	word16 dx_78 = Mem61[ds:0x2E53:word16]
	fn0800_B0F3(bx_80 - 0x0001 + (cx_54 + 0x0004), Mem98[ds:0x2E53:word16], bx_80 - 0x0001, Mem93[ds:0x2E53:word16], dx_36 - (bx_80 - 0x0001))
	segptr32 ptrLoc06_550 = SEQ(dx_78, bx_80 - 0x0001)
	selector es_120 = SLICE(ptrLoc06_550, selector, 16)
	word16 di_124 = (word16) ptrLoc06_550
	word16 di_126 = ptrArg02
	word16 cx_130 = 0xFFFF
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_211F:
	branch cx_130 == 0x0000 l0800_2121
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_211F_2:
	di_126 = di_126 + 0x0001
	cx_130 = cx_130 - 0x0001
	branch Mem125[ptrArg02:di_126:byte] == 0x00 l0800_211F
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_2121:
	word16 cx_141 = ~cx_130
	word16 cx_144 = cx_141 >>u 0x0001
	word16 si_146 = di_126 - cx_141
	word16 di_152 = di_124
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_2130:
	segptr32 ptrLoc06_702
	branch cx_144 == 0x0000 l0800_2132
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_2132:
	word16 cx_165 = cx_144 * 0x0002 + (cx_141 >>u 0x0001 <u 0x0000)
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_2134:
	branch cx_165 == 0x0000 l0800_2136
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_2136:
	selector es_210 = SLICE(ptrLoc06_702, selector, 16)
	word16 di_182 = (word16) ptrLoc06_702
	word16 cx_178 = 0xFFFF
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_213F:
	branch cx_178 == 0x0000 l0800_2141
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_213F_1:
	di_182 = di_182 + 0x0001
	cx_178 = cx_178 - 0x0001
	branch Mem170[es_210:di_182:byte] == 0x00 l0800_213F
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_2141:
	word16 cx_189 = ~cx_178
	word16 di_192 = di_182 - cx_189
	bool Z_202 = SLICE(cond(di_192), bool, 2)
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_2147:
	branch cx_189 == 0x0000 l0800_2149
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_2147_2:
	Z_202 = SLICE(cond(0x00 - Mem170[es_210:di_192:byte]), bool, 2) (alias)
	di_192 = di_192 + 0x0001
	cx_189 = cx_189 - 0x0001
	branch Mem170[es_210:di_192:byte] == 0x00 l0800_2147
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_2149:
	branch Z_202 l0800_2152
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_214B:
	di_192 = 0x0001
	es_210 = 0x0000
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_2152:
	Mem218[es_210:di_192:byte] = 0x00
	selector es_265 = SLICE(ptrLoc06_702, selector, 16)
	word16 di_237 = (word16) ptrLoc06_702
	word16 cx_233 = 0xFFFF
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_2164:
	branch cx_233 == 0x0000 l0800_2166
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_2164_1:
	di_237 = di_237 + 0x0001
	cx_233 = cx_233 - 0x0001
	branch Mem218[es_265:di_237:byte] == 0x00 l0800_2164
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_2166:
	word16 cx_244 = ~cx_233
	word16 di_247 = di_237 - cx_244
	bool Z_257 = SLICE(cond(di_247), bool, 2)
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_216C:
	branch cx_244 == 0x0000 l0800_216E
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_216C_2:
	Z_257 = SLICE(cond(0x00 - Mem218[es_265:di_247:byte]), bool, 2) (alias)
	di_247 = di_247 + 0x0001
	cx_244 = cx_244 - 0x0001
	branch Mem218[es_265:di_247:byte] == 0x00 l0800_216C
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_216E:
	branch Z_257 l0800_2177
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_2170:
	di_247 = 0x0001
	es_265 = 0x0000
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_2177:
	Mem273[es_265:di_247 + 0x0001:byte] = 0x00
	selector es_320 = SLICE(ptrLoc06_702, selector, 16)
	word16 di_292 = (word16) ptrLoc06_702
	word16 cx_288 = 0xFFFF
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_2189:
	branch cx_288 == 0x0000 l0800_218B
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_2189_1:
	di_292 = di_292 + 0x0001
	cx_288 = cx_288 - 0x0001
	branch Mem273[es_320:di_292:byte] == 0x00 l0800_2189
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_218B:
	word16 cx_299 = ~cx_288
	word16 di_302 = di_292 - cx_299
	bool Z_312 = SLICE(cond(di_302), bool, 2)
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_2191:
	branch cx_299 == 0x0000 l0800_2193
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_2191_2:
	Z_312 = SLICE(cond(0x00 - Mem273[es_320:di_302:byte]), bool, 2) (alias)
	di_302 = di_302 + 0x0001
	cx_299 = cx_299 - 0x0001
	branch Mem273[es_320:di_302:byte] == 0x00 l0800_2191
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_2193:
	branch Z_312 l0800_219C
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_2195:
	di_302 = 0x0001
	es_320 = 0x0000
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_219C:
	Mem328[es_320:di_302 + 0x0002:byte] = 0x00
	selector es_375 = SLICE(ptrLoc06_702, selector, 16)
	word16 di_347 = (word16) ptrLoc06_702
	word16 cx_343 = 0xFFFF
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_21AE:
	branch cx_343 == 0x0000 l0800_21B0
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_21AE_1:
	di_347 = di_347 + 0x0001
	cx_343 = cx_343 - 0x0001
	branch Mem328[es_375:di_347:byte] == 0x00 l0800_21AE
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_21B0:
	word16 cx_354 = ~cx_343
	word16 di_357 = di_347 - cx_354
	bool Z_367 = SLICE(cond(di_357), bool, 2)
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_21B6:
	branch cx_354 == 0x0000 l0800_21B8
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_21B6_2:
	Z_367 = SLICE(cond(0x00 - Mem328[es_375:di_357:byte]), bool, 2) (alias)
	di_357 = di_357 + 0x0001
	cx_354 = cx_354 - 0x0001
	branch Mem328[es_375:di_357:byte] == 0x00 l0800_21B6
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_21B8:
	branch Z_367 l0800_21C1
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_21BA:
	di_357 = 0x0001
	es_375 = 0x0000
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_21C1:
	Mem383[es_375:di_357 + 0x0003:byte] = 0x00
	ptr32 es_bx_418 = Mem383[ds:0x2E51:segptr32]
	Mem422[es_bx_418 + 0x0004:byte] = (byte) (ax_32 + (cx_54 + 0x0004) >>u 0x08)
	Mem425[es_bx_418 + 0x0005:byte] = ax_32 + (cx_54 + 0x0004)
	return (byte) DPB(cx_354, fn0800_2688(ds, cx_54 + 0x0004, 0x0000, 0x0000, 0x0000), 0)
// DataOut:
// DataOut (flags):
// SymbolicIn:

fn0800_2085_exit:
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_2134_1:
	Mem482[es_120:di_152:byte] = Mem170[ptrArg02:si_146:byte]
	si_146 = si_146 + 0x0001
	di_152 = di_152 + 0x0001
	cx_165 = cx_165 - 0x0001
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_2130_3:
	Mem492[es_120:di_152:word16] = Mem488[ptrArg02:si_146:word16]
	si_146 = si_146 + 0x0002
	di_152 = di_152 + 0x0002
	ptrLoc06_702 = SEQ(dx_78, bx_80 - 0x0001) (alias)
	cx_144 = cx_144 - 0x0001
// DataOut:
// DataOut (flags):
// SymbolicIn:



void fn0800_2201(selector ds, segptr32 ptrArg02, word16 wArg04)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  ds:[0..15] ss:[0..15] Stack +0002:[0..31]
// LiveOut:
// Trashed: SCZDO ax bx cx dx es Top
// Preserved: bp di sp
fn0800_2201_entry:
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_2201:
	ptr32 es_bx_14 = Mem12[ds:0x2E51:segptr32]
	word16 ax_29 = (DPB(DPB(ax, Mem12[es_bx_14 + 0x0004:byte], 0), 0x00, 8) << 0x08) + DPB(DPB(dx, Mem12[es_bx_14 + 0x0005:byte], 0), 0x00, 8)
	word16 dx_33 = Mem30[ds:0x2E51:word16] + ax_29
	word16 dx_50 = Mem35[ds:0x2E51:word16] + (((int16) Mem35[ptrArg02:byte] << 0x08) + DPB(DPB(dx_33, Mem35[ptrArg02 + 0x0001:byte], 0), 0x00, 8)) - ptrArg02
	word16 ax_56 = ptrArg02 + dx_50
	fn0800_B0F3(ptrArg02, ptrArg02, ax_56, ptrArg02, dx_33 - ax_56)
	ptr32 es_bx_93 = Mem77[ds:0x2E51:segptr32]
	Mem97[es_bx_93 + 0x0004:byte] = (byte) (ax_29 - dx_50 >>u 0x08)
	Mem100[es_bx_93 + 0x0005:byte] = ax_29 - dx_50
	word16 ax_109 = -dx_50
	fn0800_2688(ds, ax_109, -0x0000 - (ax_109 == 0x0000), 0x0000, 0x0000)
	word16 dx_128 = Mem116[ds:0x45AE:word16]
	branch Mem116[ds:0x45B0:word16] != ptrArg02 l0800_22EA
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_22B7:
	branch dx_128 != ptrArg02 l0800_22EA
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_22EA:
	branch Mem116[ds:0x45AE:word16] <=u ptrArg02 l0800_22F9
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_22F2:
	Mem142[ds:0x45AA:word16] = Mem116[ds:0x45AA:word16] - dx_50
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_22F9:
	return
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_22BC:
	selector es_191 = SLICE(ptrArg02, selector, 16)
	word16 di_155 = (word16) ptrArg02 + 0x0002
	word16 cx_159 = 0xFFFF
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_22C7:
	branch cx_159 == 0x0000 l0800_22C9
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_22C7_1:
	di_155 = di_155 + 0x0001
	cx_159 = cx_159 - 0x0001
	branch Mem116[es_191:di_155:byte] == 0x00 l0800_22C7
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_22C9:
	word16 cx_170 = ~cx_159
	word16 di_173 = di_155 - cx_170
	bool Z_183 = SLICE(cond(di_173), bool, 2)
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_22CF:
	branch cx_170 == 0x0000 l0800_22D1
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_22CF_2:
	Z_183 = SLICE(cond(0x00 - Mem116[es_191:di_173:byte]), bool, 2) (alias)
	di_173 = di_173 + 0x0001
	cx_170 = cx_170 - 0x0001
	branch Mem116[es_191:di_173:byte] == 0x00 l0800_22CF
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_22D1:
	branch Z_183 l0800_22DA
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_22D3:
	di_173 = 0x0001
	es_191 = 0x0000
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_22DA:
	Mem205[ds:0x45AC:word16] = es_191
	Mem206[ds:0x45AA:word16] = di_173
	return
// DataOut:
// DataOut (flags):
// SymbolicIn:

fn0800_2201_exit:
// DataOut:
// DataOut (flags):
// SymbolicIn:



void fn0800_22FE(selector ds, segptr32 ptrArg02, word16 wArg04)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  ds:[0..15] ss:[0..15] Stack +0002:[0..31]
// LiveOut:
// Trashed: SCZDO ax bx cx dx es Top
// Preserved: bp di sp
fn0800_22FE_entry:
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_22FE:
	ptr32 es_bx_14 = Mem12[ds:0x2E51:segptr32]
	word16 ax_29 = (DPB(DPB(ax, Mem12[es_bx_14 + 0x0004:byte], 0), 0x00, 8) << 0x08) + DPB(DPB(dx, Mem12[es_bx_14 + 0x0005:byte], 0), 0x00, 8)
	word16 dx_33 = Mem30[ds:0x2E51:word16] + ax_29
	selector es_213 = SLICE(ptrArg02, selector, 16)
	word16 di_214 = (word16) ptrArg02
	word16 cx_40 = 0xFFFF
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_2336:
	branch cx_40 == 0x0000 l0800_2338
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_2336_1:
	di_214 = di_214 + 0x0001
	cx_40 = cx_40 - 0x0001
	branch Mem35[es_213:di_214:byte] == 0x00 l0800_2336
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_2338:
	word16 cx_51 = ~cx_40
	word16 di_309 = di_214 - cx_51
	bool Z_64 = SLICE(cond(di_309), bool, 2)
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_233E:
	branch cx_51 == 0x0000 l0800_2340
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_233E_2:
	Z_64 = SLICE(cond(0x00 - Mem35[es_213:di_309:byte]), bool, 2) (alias)
	di_309 = di_309 + 0x0001
	cx_51 = cx_51 - 0x0001
	branch Mem35[es_213:di_309:byte] == 0x00 l0800_233E
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_2340:
	branch Z_64 l0800_2349
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_2342:
	di_309 = 0x0001
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_2349:
	word16 di_93 = di_309 + 0x0004 - ptrArg02
	word16 ax_99 = ptrArg02 + di_93
	fn0800_B0F3(ptrArg02, ptrArg02, ax_99, ptrArg02, dx_33 - ax_99)
	ptr32 es_bx_146 = Mem125[ds:0x2E51:segptr32]
	Mem150[es_bx_146 + 0x0004:byte] = (byte) (ax_29 - di_93 >>u 0x08)
	Mem153[es_bx_146 + 0x0005:byte] = ax_29 - di_93
	word16 ax_162 = -di_93
	fn0800_2688(ds, ax_162, -0x0000 - (ax_162 == 0x0000), 0x0000, 0x0000)
	Mem183[ds:0x45AC:word16] = ptrArg02
	word16 dx_182 = ptrArg02 + di_93
	Mem184[ds:0x45AA:word16] = dx_182
	branch (dx_182 | ptrArg02) == 0x0000 l0800_23D8
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_23D8:
	branch Mem184[ds:0x45AA:word16] <=u ptrArg02 l0800_23E7
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_23E0:
	Mem194[ds:0x45AA:word16] = Mem184[ds:0x45AA:word16] - di_93
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_23E7:
	return
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_23C6:
	Mem206[ds:0x45AC:word16] = ptrArg02
	Mem207[ds:0x45AA:word16] = ptrArg02
	return
// DataOut:
// DataOut (flags):
// SymbolicIn:

fn0800_22FE_exit:
// DataOut:
// DataOut (flags):
// SymbolicIn:



byte fn0800_23EC(selector ds, segptr32 ptrArg02, word16 wArg04, ptr16 & bpOut, ptr16 & siOut, ptr16 & diOut, ptr16 & dsOut)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  ds:[0..15] ss:[0..15] Stack +0002:[0..15] Stack +0004:[0..15]
// LiveOut: bp cx di ds si sp
// Trashed: SCZDO ax bp bx cx di ds dx es si sp Top
// Preserved:
fn0800_23EC_entry:
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_23EC:
	segptr32 ptrArg02_468 = SEQ(wArg04, wArg02)
	selector ds_24
	word16 si_26 = fn0800_24FE(ds, SEQ(wArg04, wArg02), out ds_24)
	selector es_434 = SLICE(ptrArg02_468, selector, 16)
	word16 di_435 = (word16) ptrArg02_468
	word16 cx_41 = 0xFFFF
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_240D:
	branch cx_41 == 0x0000 l0800_240F
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_240D_1:
	di_435 = di_435 + 0x0001
	cx_41 = cx_41 - 0x0001
	branch Mem36[es_434:di_435:byte] == 0x00 l0800_240D
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_240F:
	word16 cx_52 = ~cx_41
	word16 di_55 = di_435 - cx_52
	bool Z_65 = SLICE(cond(di_55), bool, 2)
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_2415:
	branch cx_52 == 0x0000 l0800_2417
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_2415_2:
	Z_65 = SLICE(cond(0x00 - Mem36[es_434:di_577:byte]), bool, 2) (alias)
	di_55 = di_577 + 0x0001
	cx_52 = cx_52 - 0x0001
	di_577 = di_55
	branch Mem36[es_434:di_577:byte] == 0x00 l0800_2415
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_2417:
	branch Z_65 l0800_2420
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_2419:
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_2420:
	segptr32 ptrArg02_474 = SEQ(wArg04, wArg02)
	selector es_440 = SLICE(ptrArg02_474, selector, 16)
	word16 di_112 = (word16) ptrArg02_474
	word16 cx_108 = 0xFFFF
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_2437:
	branch cx_108 == 0x0000 l0800_2439
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_2437_1:
	di_112 = di_112 + 0x0001
	cx_108 = cx_108 - 0x0001
	branch Mem104[es_440:di_112:byte] == 0x00 l0800_2437
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_2439:
	word16 cx_119 = ~cx_108
	word16 di_122 = di_112 - cx_119
	bool Z_132 = SLICE(cond(di_122), bool, 2)
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_243F:
	branch cx_119 == 0x0000 l0800_2441
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_243F_2:
	Z_132 = SLICE(cond(0x00 - Mem104[es_440:di_579:byte]), bool, 2) (alias)
	di_122 = di_579 + 0x0001
	cx_119 = cx_119 - 0x0001
	di_579 = di_122
	branch Mem104[es_440:di_579:byte] == 0x00 l0800_243F
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_2441:
	branch Z_132 l0800_244A
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_2443:
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_244A:
	selector es_446 = SLICE(ptrArg02_474, selector, 16)
	word16 di_184 = (word16) ptrArg02_474
	word16 cx_180 = 0xFFFF
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_2462:
	branch cx_180 == 0x0000 l0800_2464
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_2462_1:
	di_184 = di_184 + 0x0001
	cx_180 = cx_180 - 0x0001
	branch Mem179[es_446:di_184:byte] == 0x00 l0800_2462
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_2464:
	word16 cx_191 = ~cx_180
	word16 di_194 = di_184 - cx_191
	bool Z_204 = SLICE(cond(di_194), bool, 2)
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_246A:
	branch cx_191 == 0x0000 l0800_246C
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_246A_2:
	Z_204 = SLICE(cond(0x00 - Mem179[es_446:di_581:byte]), bool, 2) (alias)
	di_194 = di_581 + 0x0001
	cx_191 = cx_191 - 0x0001
	di_581 = di_194
	branch Mem179[es_446:di_581:byte] == 0x00 l0800_246A
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_246C:
	branch Z_204 l0800_2475
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_246E:
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_2475:
	selector es_452 = SLICE(ptrArg02_474, selector, 16)
	word16 di_251 = (word16) ptrArg02_474
	word16 cx_247 = 0xFFFF
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_248C:
	branch cx_247 == 0x0000 l0800_248E
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_248C_1:
	di_251 = di_251 + 0x0001
	cx_247 = cx_247 - 0x0001
	branch Mem243[es_452:di_251:byte] == 0x00 l0800_248C
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_248E:
	word16 cx_258 = ~cx_247
	word16 di_261 = di_251 - cx_258
	bool Z_271 = SLICE(cond(di_261), bool, 2)
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_2494:
	branch cx_258 == 0x0000 l0800_2496
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_2494_2:
	Z_271 = SLICE(cond(0x00 - Mem243[es_452:di_261:byte]), bool, 2) (alias)
	di_261 = di_261 + 0x0001
	cx_258 = cx_258 - 0x0001
	branch Mem243[es_452:di_261:byte] == 0x00 l0800_2494
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_2496:
	branch Z_271 l0800_249F
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_2498:
	di_261 = 0x0001
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_249F:
	word16 bp_385
	selector ds_389
	word16 si_392
	word16 sp_393
	word16 cx_387 = (word16) fn0800_3C99(si_26, di_261 - 0x0001, ds_24, out bp_385, out si_392, out ds_389)
	Mem403[ss:sp_393 + 0x000A:word16] = Mem363[ss:bp_385 - 0x0002:word16]
	Mem406[ss:sp_393 + 0x0008:word16] = Mem403[ss:bp_385 - 0x0004:word16]
	word16 dx_410 = -Mem406[ss:bp_385 - 0x0008:word16]
	Mem415[ss:sp_393 + 0x0006:word16] = -Mem406[ss:bp_385 - 0x0006:word16] - (dx_410 == 0x0000)
	Mem417[ss:sp_393 + 0x0004:word16] = dx_410
	fn0800_2688(ds_389, Mem417[ss:sp_393 + 0x0004:word16], Mem417[ss:sp_393 + 0x0006:word16], Mem417[ss:sp_393 + 0x0008:word16], Mem417[ss:sp_393 + 0x000A:word16])
	word16 di_429 = Mem417[ss:sp_393 + 0x000C:word16]
	bpOut = Mem417[ss:bp_385:word16]
	siOut = si_392
	diOut = di_429
	dsOut = ds_389
	return fn0800_2688(ds_389, Mem417[ss:sp_393 + 0x0004:word16], Mem417[ss:sp_393 + 0x0006:word16], Mem417[ss:sp_393 + 0x0008:word16], Mem417[ss:sp_393 + 0x000A:word16])
// DataOut:
// DataOut (flags):
// SymbolicIn:

fn0800_23EC_exit:
// DataOut:
// DataOut (flags):
// SymbolicIn:



word16 fn0800_24FE(selector ds, segptr32 ptrArg02, ptr16 & dsOut)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  ds:[0..15] ss:[0..15] Stack +0002:[0..15]
// LiveOut: ds si
// Trashed: SCZO ax bx cx di ds dx es si Top
// Preserved: D bp sp
fn0800_24FE_entry:
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_24FE:
	selector es_514 = SLICE(ptrArg02, selector, 16)
	word16 di_21 = (word16) ptrArg02
	word16 cx_17 = 0xFFFF
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_250D:
	branch cx_17 == 0x0000 l0800_250F
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_250D_1:
	di_21 = di_21 + 0x0001
	cx_17 = cx_17 - 0x0001
	branch Mem12[es_514:di_21:byte] == 0x00 l0800_250D
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_250F:
	word16 cx_28 = ~cx_17
	word16 di_31 = di_21 - cx_28
	bool Z_41 = SLICE(cond(di_31), bool, 2)
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_2515:
	branch cx_28 == 0x0000 l0800_2517
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_2515_2:
	Z_41 = SLICE(cond(0x00 - Mem12[es_514:di_719:byte]), bool, 2) (alias)
	di_31 = di_719 + 0x0001
	cx_28 = cx_28 - 0x0001
	di_719 = di_31
	branch Mem12[es_514:di_719:byte] == 0x00 l0800_2515
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_2517:
	branch Z_41 l0800_2520
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_2519:
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_2520:
	selector es_520 = SLICE(ptrArg02, selector, 16)
	word16 di_521 = (word16) ptrArg02
	word16 cx_84 = 0xFFFF
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_2537:
	branch cx_84 == 0x0000 l0800_2539
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_2537_1:
	di_521 = di_521 + 0x0001
	cx_84 = cx_84 - 0x0001
	branch Mem80[es_520:di_521:byte] == 0x00 l0800_2537
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_2539:
	word16 cx_100 = ~cx_84
	word16 di_103 = di_521 - cx_100
	bool Z_108 = SLICE(cond(di_103), bool, 2)
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_253F:
	branch cx_100 == 0x0000 l0800_2541
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_253F_2:
	Z_108 = SLICE(cond(0x00 - Mem80[es_520:di_721:byte]), bool, 2) (alias)
	di_103 = di_721 + 0x0001
	cx_100 = cx_100 - 0x0001
	di_721 = di_103
	branch Mem80[es_520:di_721:byte] == 0x00 l0800_253F
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_2541:
	branch Z_108 l0800_254A
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_2543:
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_254A:
	selector es_526 = SLICE(ptrArg02, selector, 16)
	word16 di_160 = (word16) ptrArg02
	word16 cx_156 = 0xFFFF
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_2562:
	branch cx_156 == 0x0000 l0800_2564
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_2562_1:
	di_160 = di_160 + 0x0001
	cx_156 = cx_156 - 0x0001
	branch Mem155[es_526:di_160:byte] == 0x00 l0800_2562
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_2564:
	word16 cx_167 = ~cx_156
	word16 di_170 = di_160 - cx_167
	bool Z_180 = SLICE(cond(di_170), bool, 2)
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_256A:
	branch cx_167 == 0x0000 l0800_256C
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_256A_2:
	Z_180 = SLICE(cond(0x00 - Mem155[es_526:di_723:byte]), bool, 2) (alias)
	di_170 = di_723 + 0x0001
	cx_167 = cx_167 - 0x0001
	di_723 = di_170
	branch Mem155[es_526:di_723:byte] == 0x00 l0800_256A
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_256C:
	branch Z_180 l0800_2575
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_256E:
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_2575:
	selector es_532 = SLICE(ptrArg02, selector, 16)
	word16 di_227 = (word16) ptrArg02
	word16 cx_223 = 0xFFFF
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_258C:
	branch cx_223 == 0x0000 l0800_258E
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_258C_1:
	di_227 = di_227 + 0x0001
	cx_223 = cx_223 - 0x0001
	branch Mem219[es_532:di_227:byte] == 0x00 l0800_258C
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_258E:
	word16 cx_234 = ~cx_223
	word16 di_237 = di_227 - cx_234
	bool Z_247 = SLICE(cond(di_237), bool, 2)
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_2594:
	branch cx_234 == 0x0000 l0800_2596
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_2594_2:
	Z_247 = SLICE(cond(0x00 - Mem219[es_532:di_725:byte]), bool, 2) (alias)
	di_237 = di_725 + 0x0001
	cx_234 = cx_234 - 0x0001
	di_725 = di_237
	branch Mem219[es_532:di_725:byte] == 0x00 l0800_2594
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_2596:
	branch Z_247 l0800_259F
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_2598:
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_259F:
	word16 ax_339 = fn0800_ACB3(ds, Mem335[ds:0x29CF:word16], Mem332[ds:0x29D1:word16], 0x0000, out cx_697, out dx_698, out bx_699, out es_700)
	word16 dx_360
	selector ds_359
	fn0800_3E5D(ds, Mem352[ds:0x29CF:word16], Mem338[ds:0x29D1:word16], out dx_360, out di_701, out es_702, out ds_359, out Top_703)
	// Failed to bind call argument.
	// Please report this issue at https://github.com/uxmal/reko
	word16 stackArg0 = <invalid>
	word16 dx_375
	word16 sp_376
	word16 ax_372 = fn0800_8C8A(ax_339, 0x08, dx_360, stackArg0, out cl_705, out dx_375)
	branch dx_375 != 0x0052 l0800_25FC
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_25F7:
	branch ax_372 == 0x4E43 l0800_260B
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_25FC:
	Mem389[ss:sp_376 - 2:word16] = ds_359
	Mem392[ss:sp_376 - 4:word16] = 0x4348
	Mem395[ss:sp_376 - 6:word16] = 0x000C
	// Failed to bind call argument.
	// Please report this issue at https://github.com/uxmal/reko
	word16 stackArg6 = <invalid>
	fn0800_0D24(ds_359, Mem395[ss:sp_376 - 6:word16], Mem395[ss:sp_376 - 4:segptr32], stackArg6, out cx_707, out dx_708, out bx_709, out si, out di_710, out es_711, out ds_359, out Top_712)
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_260B:
	selector ds_433
	branch (ax_339 & 0x00FF) == 0x0000 l0800_2655
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_2655:
	Mem426[ss:sp_376 - 2:word16] = Mem415[ds_359:0x29D1:word16]
	Mem429[ss:sp_376 - 4:word16] = Mem426[ds_359:0x29CF:word16]
	word16 dx_434
	fn0800_3E5D(ds_359, Mem429[ss:sp_376 - 4:word16], Mem429[ss:sp_376 - 2:word16], out dx_434, out di_713, out es_435, out ds_433, out Top_436)
	Mem442[ds_433:0x2A05:word16] = dx_434
	Mem443[ds_433:0x2A03:word16] = ax_339 & 0x00FF
	Mem444[ds_433:0x2A09:word16] = dx_434
	Mem445[ds_433:0x2A07:word16] = ax_339 & 0x00FF
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_2616:
	Mem455[ss:sp_376 - 2:word16] = Mem415[ds_359:0x29D1:word16]
	Mem458[ss:sp_376 - 4:word16] = Mem455[ds_359:0x29CF:word16]
	selector ds_462
	word16 dx_463
	fn0800_3E5D(ds_359, Mem458[ss:sp_376 - 4:word16], Mem458[ss:sp_376 - 2:word16], out dx_463, out di_714, out es_715, out ds_462, out Top_716)
	Mem472[ds_462:0x2A09:word16] = dx_463
	Mem473[ds_462:0x2A07:word16] = ax_339 & 0x00FF
	Mem476[ss:sp_376 - 2:word16] = Mem473[ds_462:0x29D1:word16]
	Mem479[ss:sp_376 - 4:word16] = Mem476[ds_462:0x29CF:word16]
	word16 dx_484
	fn0800_3E5D(ds_462, Mem479[ss:sp_376 - 4:word16], Mem479[ss:sp_376 - 2:word16], out dx_484, out di_717, out es_485, out ds_433, out Top_486)
	Mem492[ds_433:0x2A05:word16] = dx_484
	Mem493[ds_433:0x2A03:word16] = ax_339 & 0x00FF
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_267D:
	dsOut = ds_433
	return si
// DataOut:
// DataOut (flags):
// SymbolicIn:

fn0800_24FE_exit:
// DataOut:
// DataOut (flags):
// SymbolicIn:



byte fn0800_2688(selector ds, ui32 dwArg02, word16 wArg04, word16 wArg06, word16 wArg08)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  ds:[0..15] ss:[0..15] Stack +0002:[0..15] Stack +0004:[0..15] Stack +0006:[0..15] Stack +0008:[0..15]
// LiveOut: cl
// Trashed: SCZO ax bx cl dx es Top
// Preserved: bp sp
fn0800_2688_entry:
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_2688:
	ptr32 es_bx_11 = Mem7[ds:0x2E51:segptr32]
	word16 sp_110 = fp - 0x0012
	byte cl_108 = 0x08
	word16 dx_27 = Mem7[ds:0x2E53:word16]
	word16 bx_28 = (word16) es_bx_11 + ((DPB(DPB(ax, Mem7[es_bx_11 + 0x0004:byte], 0), 0x00, 8) << 0x08) + DPB(DPB(dx, Mem7[es_bx_11 + 0x0005:byte], 0), 0x00, 8))
	segptr32 ptrLoc06_291 = Mem30[ds:0x2E53:word16]
	word16 wLoc06_273 = Mem30[ds:0x2E51:word16] + 0x0008
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_27B3:
	branch ptrLoc06_291 == dx_27 l0800_27C1
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_27C1:
	branch wLoc06_273 == bx_28 l0800_27C9
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_27C9:
	branch (wArg06 | wArg08) != 0x0000 l0800_27DF
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_27D1:
	Mem55[ds:0x45A6:word16] = v22_54
	ui32 v23_v22_262 = SEQ(Mem55[ds:0x45A8:word16], Mem39[ds:0x45A6:word16]) + SEQ(dwArg02_314, dwArg02_314)
	Mem59[ds:0x45A8:word16] = SLICE(v23_v22_262, word16, 16)
	word16 v22_54 = (word16) v23_v22_262
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_27DF:
	return cl_108
// DataOut:
// DataOut (flags):
// SymbolicIn:

fn0800_2688_exit:
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_27C6:
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_27BE:
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_26C3:
	word16 dx_149 = wLoc06_273
	word16 v18_74 = wLoc06_273 + 0x0002
	ptrLoc06_289 = ptrLoc06_339
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_26D3:
	segptr32 ptrLoc06_289
	word16 v19_81 = ptrLoc06_414 + 0x0001
	ptrLoc06_414 = ptrLoc06_289
	branch Mem82[ptrLoc06_414:byte] != 0x00 l0800_26D3
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_26DF:
	ptrLoc06_291 = ptrLoc06_341
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_277D:
	segptr32 ptrLoc0E_344
	branch Mem89[ptrLoc06_291:byte] == 0x00 l0800_2789
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_2789:
	word16 v24_95 = ptrLoc06_291 + 0x0001
	// Failed to bind call argument.
	// Please report this issue at https://github.com/uxmal/reko
	word16 ax_100 = v24_95 - Mem96[ds:0x2E51:word16]
	word16 stackArg0 = <invalid>
	Mem119[ptrLoc0E_344:byte] = (byte) fn0800_8C8A(ax_100, 0x08, 0x0000 - (ax_100 <u 0x0000), stackArg0, out cl_108, out dx_408)
	Mem128[ptrLoc0E_344 + 0x0001:byte] = (byte) (v24_95 - Mem119[ds:0x2E51:word16])
	wLoc06_273 = v24_95
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_2786:
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_26E2:
	word16 v25_133 = ptrLoc06_415 + 0x0001
	ptrLoc06_415 = ptrLoc06_291
	branch Mem134[ptrLoc06_415:byte] != 0x00 l0800_26E2
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_26EE:
	ptrLoc06_291 = DPB(ptrLoc06_415, v25_133, 0) (alias)
	word16 sp_156 = sp_110 - 2
	Mem157[ss:sp_156:word16] = ((int16) Mem134[ptrLoc06_291:byte] << 0x08) + DPB(DPB(dx_149, Mem134[ptrLoc06_291 + 0x0001:byte], 0), 0x00, 8)
	word16 ax_166 = ((int16) Mem157[ptrLoc06_291 + 0x0002:byte] << 0x08) + DPB(DPB(v25_133, Mem157[ptrLoc06_291 + 0x0003:byte], 0), 0x00, 8)
	dx_149 = ax_166
	sp_110 = sp_156 + 2
	word16 ax_172 = Mem157[ss:sp_156:word16] + (ax_166 <u 0x0000)
	branch ax_172 < wArg08 l0800_2779
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_2727:
	branch ax_172 != wArg08 l0800_272E
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_2729:
	branch ax_166 <u wArg06 l0800_2779
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_272E:
	ui32 dwArg02_311 = SEQ(dwArg02_314, dwArg02_314)
	// Failed to bind call argument.
	// Please report this issue at https://github.com/uxmal/reko
	int32 dx_ax_191 = (int32) SLICE(SEQ(ax_172, ax_166) + dwArg02_311, word16, 16)
	word16 stackArg0 = <invalid>
	Mem208[ptrLoc06_291:byte] = (byte) fn0800_8C8A((word16) dx_ax_191, 0x08, SLICE(dx_ax_191, word16, 16), stackArg0, out cl_410, out dx_411)
	ui32 dwArg02_313 = SEQ(dwArg02_311, dwArg02_311)
	Mem217[ptrLoc06_291 + 0x0001:byte] = (byte) (int32) SLICE(SEQ(ax_172, ax_166) + dwArg02_313, word16, 16)
	dwArg02_314 = SEQ(dwArg02_313, dwArg02_313)
	// Failed to bind call argument.
	// Please report this issue at https://github.com/uxmal/reko
	int32 dx_ax_268 = SEQ(ax_172, ax_166) + dwArg02_314
	word16 stackArg0 = <invalid>
	Mem239[ptrLoc06_291 + 0x0002:byte] = (byte) fn0800_8C8A((word16) dx_ax_268, 0x08, SLICE(dx_ax_268, word16, 16), stackArg0, out cl_413, out dx_149)
	Mem243[ptrLoc06_291 + 0x0003:byte] = ax_166 + dwArg02_314
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_2779:
	ptrLoc06_339 = SEQ(ptrLoc06_291, v18_74) (alias)
	ptrLoc06_289 = DPB(ptrLoc06_414, v19_81, 0) (alias)
	ptrLoc06_341 = DPB(ptrLoc06_414, v19_81, 0) (alias)
	ptrLoc0E_344 = SEQ(ptrLoc06_291, wLoc06_273) (alias)
	ptrLoc06_291 = DPB(ptrLoc06_415, v25_133, 0) (alias)
// DataOut:
// DataOut (flags):
// SymbolicIn:



word16 fn0800_283D(selector ds, segptr32 ptrArg02, word16 wArg04, ptr16 & dxOut)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  ds:[0..15] Stack +0002:[0..15]
// LiveOut: ax dx
// Trashed: SCZO ax bx cx dx es Top
// Preserved: bp di ds si sp
fn0800_283D_entry:
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_283D:
	selector es_320 = SLICE(ptrArg02, selector, 16)
	word16 di_24 = (word16) ptrArg02
	word16 cx_20 = 0xFFFF
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_284D:
	branch cx_20 == 0x0000 l0800_284F
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_284D_1:
	di_24 = di_24 + 0x0001
	cx_20 = cx_20 - 0x0001
	branch Mem15[es_320:di_24:byte] == 0x00 l0800_284D
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_284F:
	word16 cx_31 = ~cx_20
	word16 di_34 = di_24 - cx_31
	bool Z_44 = SLICE(cond(di_34), bool, 2)
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_2856:
	branch cx_31 == 0x0000 l0800_2858
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_2856_2:
	Z_44 = SLICE(cond(0x3A - Mem15[es_320:di_34:byte]), bool, 2) (alias)
	di_34 = di_34 + 0x0001
	cx_31 = cx_31 - 0x0001
	branch Mem15[es_320:di_34:byte] == 0x3A l0800_2856
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_2858:
	branch Z_44 l0800_2861
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_285A:
	di_34 = 0x0001
	es_320 = 0x0000
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_2861:
	selector es_111
	word16 di_114
	word16 ax_117 = es_320
	branch (di_34 - 0x0001 | es_320) == 0x0000 l0800_288E
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_2868:
	es_111 = SLICE(ptrArg02, selector, 16) (alias)
	word16 di_327 = (word16) ptrArg02
	word16 cx_79 = 0xFFFF
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_2870:
	branch cx_79 == 0x0000 l0800_2872
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_2870_1:
	di_327 = di_327 + 0x0001
	cx_79 = cx_79 - 0x0001
	branch Mem15[es_111:di_327:byte] == 0x00 l0800_2870
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_2872:
	word16 cx_102 = ~cx_79
	word16 di_101 = di_327 - cx_102
	bool Z_103 = SLICE(cond(di_101), bool, 2)
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_2879:
	branch cx_102 == 0x0000 l0800_287B
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_2879_2:
	Z_103 = SLICE(cond(0x3A - Mem15[es_111:di_101:byte]), bool, 2) (alias)
	di_101 = di_101 + 0x0001
	cx_102 = cx_102 - 0x0001
	branch Mem15[es_111:di_101:byte] == 0x3A l0800_2879
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_287B:
	branch Z_103 l0800_2884
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_287D:
	di_101 = 0x0001
	es_111 = 0x0000
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_2884:
	di_114 = di_101 - 0x0001
	ax_117 = es_111
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_288E:
	ptr32 es_bx_145 = Mem144[ds:0x2E51:segptr32]
	word16 dx_172 = Mem144[ds:0x2E53:word16]
	word16 bx_173 = (word16) es_bx_145 + ((DPB(DPB(ax_117, Mem144[es_bx_145 + 0x0004:byte], 0), 0x00, 8) << 0x08) + DPB(DPB(dx, Mem144[es_bx_145 + 0x0005:byte], 0), 0x00, 8))
	word16 wLoc08_364 = Mem177[ds:0x2E53:word16]
	word16 wLoc0A_365 = Mem177[ds:0x2E51:word16] + 0x0008
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_2917:
	branch wLoc08_364 != dx_172 l0800_28C2
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_2922:
	branch wLoc0A_365 != bx_173 l0800_28C2
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_28C2:
	word16 si_197 = wLoc0A_365 + 0x0002
	selector es_343 = SLICE(ptrArg02, selector, 16)
	word16 di_213 = (word16) ptrArg02
	word16 ax_206 = 0x0000
	word16 cx_209 = 0xFFFF
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_28D4:
	ax_206 = DPB(ax_206, 0x00, 0) (alias)
	ax_206 = DPB(ax_206, 0x00, 0) (alias)
	branch cx_209 == 0x0000 l0800_28D6
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_28D4_1:
	di_213 = di_213 + 0x0001
	cx_209 = cx_209 - 0x0001
	branch Mem203[es_343:di_213:byte] == 0x00 l0800_28D4
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_28D6:
	word16 cx_220 = ~cx_209
	word16 di_222 = di_213 - cx_220
	bool Z_234 = SLICE(cond(di_222), bool, 2)
	di_229 = di_222
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_28DA:
	word16 di_229
	branch cx_220 == 0x0000 l0800_28DC
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_28DA_2:
	Z_234 = SLICE(cond(Mem203[wLoc08_364:si_525:byte] - Mem203[es_343:di_526:byte]), bool, 2) (alias)
	si_197 = si_525 + 0x0001
	di_229 = di_526 + 0x0001
	cx_220 = cx_220 - 0x0001
	si_525 = si_197
	di_526 = di_229
	branch Mem203[wLoc08_364:si_525:byte] != Mem203[es_343:di_526:byte] l0800_28DA
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_28DC:
	branch Z_234 l0800_28E3
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_28DE:
	word16 ax_242 = 0x0000 - (di_222 <u 0x0000)
	ax_206 = ax_242 - 0xFFFF - (ax_242 <u 0x0000)
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_28E3:
	segptr32 ptrLoc0A_385
	branch ax_206 != 0x0000 l0800_28F4
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_28F4:
	ptrLoc0A_385 = SEQ(wLoc08_364, wLoc0A_365) (alias)
	wLoc08_364 = Mem203[ds:0x2E53:word16]
	wLoc0A_365 = Mem203[ds:0x2E51:word16] + (((int16) Mem203[ptrLoc0A_385:byte] << 0x08) + DPB(DPB(wLoc0A_365, Mem203[ptrLoc0A_385 + 0x0001:byte], 0), 0x00, 8))
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_28E8:
	dxOut = ptrLoc0A_385
	return ptrLoc0A_385
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_2927:
	dxOut = 0x0000
	ptrArg02 = SEQ(es_111, di_114 + 0x0001) (alias)
	return 0x0000
// DataOut:
// DataOut (flags):
// SymbolicIn:

fn0800_283D_exit:
// DataOut:
// DataOut (flags):
// SymbolicIn:



word16 fn0800_2931(segptr32 ptrArg02, segptr32 ptrArg06, word16 wArg08, ptr16 & dxOut)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  Stack +0002:[0..15] Stack +0006:[0..15]
// LiveOut: ax dx
// Trashed: SCZO ax bx cx dx es Top
// Preserved: bp di ds si sp
fn0800_2931_entry:
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_2931:
	selector es_236 = SLICE(ptrArg06, selector, 16)
	word16 di_17 = (word16) ptrArg06 + 0x0002
	word16 cx_21 = 0xFFFF
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_2941:
	branch cx_21 == 0x0000 l0800_2943
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_2941_1:
	di_17 = di_17 + 0x0001
	cx_21 = cx_21 - 0x0001
	branch Mem14[es_236:di_17:byte] == 0x00 l0800_2941
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_2943:
	word16 cx_32 = ~cx_21
	word16 di_35 = di_17 - cx_32
	bool Z_45 = SLICE(cond(di_35), bool, 2)
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_2949:
	branch cx_32 == 0x0000 l0800_294B
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_2949_2:
	Z_45 = SLICE(cond(0x00 - Mem14[es_236:di_35:byte]), bool, 2) (alias)
	di_35 = di_35 + 0x0001
	cx_32 = cx_32 - 0x0001
	branch Mem14[es_236:di_35:byte] == 0x00 l0800_2949
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_294B:
	branch Z_45 l0800_2954
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_294D:
	di_35 = 0x0001
	es_236 = 0x0000
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_2954:
	word16 di_56 = di_35 - 0x0001
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_29B4:
	selector es_196
	word16 di_199
	segptr32 ptrArg06_282
	branch Mem76[ptrArg06_282:byte] != 0x00 l0800_2960
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_2960:
	word16 si_109 = ptrArg06_282
	selector es_262 = SLICE(ptrArg02, selector, 16)
	word16 di_104 = (word16) ptrArg02
	word16 ax_128 = 0x0000
	word16 cx_100 = 0xFFFF
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_296F:
	ax_128 = DPB(ax_128, 0x00, 0) (alias)
	ax_128 = DPB(ax_128, 0x00, 0) (alias)
	branch cx_100 == 0x0000 l0800_2971
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_296F_1:
	di_104 = di_104 + 0x0001
	cx_100 = cx_100 - 0x0001
	branch Mem86[es_262:di_104:byte] == 0x00 l0800_296F
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_2971:
	word16 cx_103 = ~cx_100
	word16 di_105 = di_104 - cx_103
	bool Z_117 = SLICE(cond(di_105), bool, 2)
	di_112 = di_105
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_2975:
	word16 di_112
	branch cx_103 == 0x0000 l0800_2977
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_2975_2:
	Z_117 = SLICE(cond(Mem86[ptrArg06_282:si_418:byte] - Mem86[es_262:di_419:byte]), bool, 2) (alias)
	si_109 = si_418 + 0x0001
	di_112 = di_419 + 0x0001
	cx_103 = cx_103 - 0x0001
	si_418 = si_109
	di_419 = di_112
	branch Mem86[ptrArg06_282:si_418:byte] != Mem86[es_262:di_419:byte] l0800_2975
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_2977:
	branch Z_117 l0800_297E
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_2979:
	word16 ax_125 = 0x0000 - (di_105 <u 0x0000)
	ax_128 = ax_125 - 0xFFFF - (ax_125 <u 0x0000)
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_297E:
	segptr32 ptrArg06_295
	branch ax_128 != 0x0000 l0800_298D
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_298D:
	ptrArg06_295 = SEQ(ptrArg06_282, ptrArg06_282) (alias)
	es_196 = SLICE(ptrArg06_295, selector, 16) (alias)
	word16 di_168 = (word16) ptrArg06_295
	word16 cx_164 = 0xFFFF
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_2995:
	branch cx_164 == 0x0000 l0800_2997
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_2995_1:
	di_168 = di_168 + 0x0001
	cx_164 = cx_164 - 0x0001
	branch Mem86[es_196:di_168:byte] == 0x00 l0800_2995
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_2997:
	word16 cx_175 = ~cx_164
	word16 di_178 = di_168 - cx_175
	bool Z_188 = SLICE(cond(di_178), bool, 2)
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_299D:
	branch cx_175 == 0x0000 l0800_299F
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_299D_2:
	Z_188 = SLICE(cond(0x00 - Mem86[es_196:di_178:byte]), bool, 2) (alias)
	di_178 = di_178 + 0x0001
	cx_175 = cx_175 - 0x0001
	branch Mem86[es_196:di_178:byte] == 0x00 l0800_299D
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_299F:
	branch Z_188 l0800_29A8
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_29A1:
	di_178 = 0x0001
	es_196 = 0x0000
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_29A8:
	di_199 = di_178 - 0x0001
	Mem76 = Mem216
	ptrArg06_282 = ptrArg06_347
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_2983:
	dxOut = ptrArg06_295
	return ptrArg06_295
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_29BD:
	dxOut = 0x0000
	ptrArg06_282 = SEQ(es_236, di_56 + 0x0001) (alias)
	ptrArg06_347 = SEQ(es_196, di_199 + 0x0005) (alias)
	return 0x0000
// DataOut:
// DataOut (flags):
// SymbolicIn:

fn0800_2931_exit:
// DataOut:
// DataOut (flags):
// SymbolicIn:



word16 fn0800_29C5(word16 cx, word16 dx, word16 si, word16 di, selector ds, ptr16 & bpOut, ptr16 & siOut, ptr16 & diOut, ptr16 & dsOut)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  cx:[0..15] di:[0..15] ds:[0..15] dx:[0..15] si:[0..15] ss:[0..15]
// LiveOut: ax bp di ds si sp
// Trashed: SCZDOP ax bp bx cx di ds dx es si sp Top
// Preserved:
fn0800_29C5_entry:
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_29C5:
	word16 bp_40 = fp - 2
	word16 sp_13 = fp - 0x007E
	branch (Mem15[ds:0x45AE:word16] | Mem15[ds:0x45B0:word16]) != 0x0000 l0800_2A07
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_29D6:
	branch (Mem15[ds:0x45AA:word16] | Mem15[ds:0x45AC:word16]) != 0x0000 l0800_2A07
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_29DF:
	// Failed to bind call argument.
	// Please report this issue at https://github.com/uxmal/reko
	word16 stackArg4 = <invalid>
	sp_13 = sp_44 + 0x0004
	word16 sp_44
	branch fn0800_2DE2(cx, dx, si, di, ds, SEQ(ds, 0x4541), stackArg4, out ch_1255, out bp_40, out si, out di, out ds) != 0x0000 l0800_29F6
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_29F6:
	word16 dx_57 = Mem31[ds:0x2E51:word16]
	Mem60[ds:0x45B0:word16] = Mem31[ds:0x2E53:word16]
	Mem61[ds:0x45AE:word16] = dx_57 + 0x0008
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_2A07:
	word16 sp_63 = sp_13 - 2
	Mem66[ss:sp_63:word16] = ds
	Mem69[ss:sp_63 - 2:word16] = 0x4541
	Mem71[ss:sp_63 - 4:word16] = ss
	Mem75[ss:sp_63 - 6:word16] = bp_40 - 0x006A
	fn0800_3509(si, di, Mem75[ss:sp_63 - 6:word16], Mem75[ss:sp_63 - 4:selector], Mem75[ss:sp_63 - 2:word16], Mem75[ss:sp_63:word16], out bx_1253)
	Mem91[ss:sp_63:word16] = ds
	Mem94[ss:sp_63 - 2:word16] = 0x4541
	Mem96[ss:sp_63 - 4:word16] = ss
	Mem99[ss:sp_63 - 6:word16] = bp_40 - 0x0078
	fn0800_35A3(si, di, Mem99[ss:sp_63 - 6:word16], Mem99[ss:sp_63 - 4:selector], Mem99[ss:sp_63 - 2:word16], Mem99[ss:sp_63:word16])
	ptr32 es_bx_111 = Mem99[ds:0x2E51:segptr32]
	word16 bx_126 = (word16) es_bx_111 + ((DPB(DPB(ax_100, Mem99[es_bx_111 + 0x0004:byte], 0), 0x00, 8) << 0x08) + DPB(DPB(dx_102, Mem99[es_bx_111 + 0x0005:byte], 0), 0x00, 8))
	Mem128[ss:bp_40 - 0x0002:word16] = Mem99[ds:0x2E53:word16]
	Mem129[ss:bp_40 - 0x0004:word16] = bx_126
	word16 cx_174 = DPB(cx, 0x08, 0)
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_2C53:
	word16 dx_133 = Mem131[ds:0x45AE:word16]
	branch Mem131[ds:0x45B0:word16] == Mem131[ss:bp_40 - 0x0002:word16] l0800_2C62
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_2C62:
	branch dx_133 == Mem131[ss:bp_40 - 0x0004:word16] l0800_2C6A
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_2C6A:
	Mem144[ds:0x45AC:word16] = 0x0000
	Mem145[ds:0x45AA:word16] = 0x0000
	Mem146[ds:0x45B0:word16] = 0x0000
	Mem147[ds:0x45AE:word16] = 0x0000
	word16 sp_150 = sp_13 - 2
	Mem151[ss:sp_150:word16] = Mem147[ss:bp_40 + 0x000E:word16]
	Mem154[ss:sp_150 - 2:word16] = Mem151[ss:bp_40 + 0x000C:word16]
	Mem157[ss:sp_150 - 4:word16] = Mem154[ss:bp_40 + 0x000A:word16]
	Mem160[ss:sp_150 - 6:word16] = Mem157[ss:bp_40 + 0x0008:word16]
	Mem163[ss:sp_150 - 8:word16] = Mem160[ss:bp_40 + 0x0006:word16]
	Mem166[ss:sp_150 - 10:word16] = Mem163[ss:bp_40 + 0x0004:word16]
	word16 sp_167
	word16 ax_170 = fn0800_29C5(cx_174, 0x0000, si, di, ds, out bp_1256, out si_1257, out di_1258, out ds_1259)
	word16 di_182 = Mem166[ss:sp_167 + 0x000C:word16]
	word16 si_184 = Mem166[ss:sp_167 + 0x000E:word16]
	bpOut = Mem166[ss:bp_40:word16]
	siOut = si_184
	diOut = di_182
	dsOut = ds
	return ax_170
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_2C67:
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_2C5F:
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_2A4C:
	branch (Mem131[ds:0x45AA:word16] | Mem131[ds:0x45AC:word16]) != 0x0000 l0800_2A58
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_2A58:
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_2B54:
	branch Mem196[Mem196[ds:0x45AA:segptr32]:byte] == 0x00 l0800_2B61
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_2B61:
	ptr32 es_bx_202 = Mem196[ds:0x45AE:segptr32]
	word16 bx_217 = Mem196[ds:0x2E51:word16] + (((int16) Mem196[es_bx_202:byte] << 0x08) + DPB(DPB(dx_133, Mem196[es_bx_202 + 0x0001:byte], 0), 0x00, 8))
	Mem219[ds:0x45B0:word16] = Mem196[ds:0x2E53:word16]
	Mem220[ds:0x45AE:word16] = bx_217
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_2B5E:
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_2A5B:
	word16 sp_222 = sp_13 - 2
	Mem224[ss:sp_222:word16] = ss
	Mem228[ss:sp_222 - 2:word16] = bp_40 - 0x0078
	Mem231[ss:sp_222 - 4:word16] = Mem228[ds:0x45AC:word16]
	Mem234[ss:sp_222 - 6:word16] = Mem231[ds:0x45AA:word16]
	dx_133 = DPB(dx_133, dl_237, 0) (alias)
	branch fn0800_4357(Mem234[ss:sp_222 - 6:segptr32], Mem234[ss:sp_222 - 2:segptr32]) != 0x0000 l0800_2A75
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_2A75:
	ptr32 es_bx_248 = Mem234[ss:bp_40 + 0x0004:segptr32]
	word16 dx_250 = Mem234[ds:0x45AE:word16]
	Mem253[es_bx_248 + 0x0002:word16] = Mem234[ds:0x45B0:word16]
	Mem254[es_bx_248:word16] = dx_250
	ptr32 es_bx_255 = Mem254[ss:bp_40 + 0x0008:segptr32]
	word16 dx_257 = Mem254[ds:0x45AA:word16]
	Mem260[es_bx_255 + 0x0002:word16] = Mem254[ds:0x45AC:word16]
	Mem261[es_bx_255:word16] = dx_257
	ptr32 es_di_262 = Mem261[ds:0x45AE:segptr32]
	Mem267[ss:sp_222:word16] = SLICE(es_di_262, selector, 16)
	selector es_268 = Mem267[ss:bp_40 + 0x000E:selector]
	Mem270[ss:sp_222 - 2:word16] = (word16) es_di_262 + 0x0002
	word16 di_271 = Mem270[ss:bp_40 + 0x000C:word16]
	word16 di_1260 = Mem270[ss:sp_222 - 2:word16]
	selector es_276 = Mem270[ss:sp_222:selector]
	Mem279[ss:sp_222:word16] = es_268
	Mem281[ss:sp_222 - 2:word16] = di_271
	word16 cx_285 = 0xFFFF
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_2AB3:
	branch cx_285 == 0x0000 l0800_2AB5
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_2AB3_1:
	di_1260 = di_1260 + 0x0001
	cx_285 = cx_285 - 0x0001
	branch Mem281[es_276:di_1260:byte] == 0x00 l0800_2AB3
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_2AB5:
	word16 di_307 = Mem281[ss:sp_222 - 2:word16]
	selector es_311 = Mem281[ss:sp_222:selector]
	Mem316[ss:sp_222:word16] = ds
	word16 cx_296 = ~cx_285
	word16 cx_299 = cx_296 >>u 0x0001
	word16 si_301 = di_1260 - cx_296
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_2AC4:
	branch cx_299 == 0x0000 l0800_2AC6
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_2AC6:
	word16 cx_320 = cx_299 * 0x0002 + (cx_296 >>u 0x0001 <u 0x0000)
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_2AC8:
	branch cx_320 == 0x0000 l0800_2ACA
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_2ACA:
	ptr32 es_di_329 = Mem325[ss:bp_40 + 0x000C:segptr32]
	selector ds_326 = Mem325[ss:sp_222:selector]
	Mem332[ss:sp_222:word16] = SLICE(es_di_329, selector, 16)
	selector es_333 = Mem332[ds_326:0x45AC:selector]
	Mem336[ss:sp_222 - 2:word16] = (word16) es_di_329
	word16 di_1261 = Mem336[ds_326:0x45AA:word16]
	word16 cx_341 = 0xFFFF
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_2ADD:
	branch cx_341 == 0x0000 l0800_2ADF
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_2ADD_1:
	di_1261 = di_1261 + 0x0001
	cx_341 = cx_341 - 0x0001
	branch Mem336[es_333:di_1261:byte] == 0x00 l0800_2ADD
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_2ADF:
	word16 cx_352 = ~cx_341
	word16 di_1262 = Mem336[ss:sp_222 - 2:word16]
	selector es_365 = Mem336[ss:sp_222:selector]
	Mem372[ss:sp_222:word16] = cx_352
	word16 si_355 = di_1261 - cx_352
	word16 cx_373 = 0xFFFF
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_2AF3:
	branch cx_373 == 0x0000 l0800_2AF5
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_2AF3_2:
	di_1262 = di_1262 + 0x0001
	cx_373 = cx_373 - 0x0001
	branch Mem372[es_365:di_1262:byte] == 0x00 l0800_2AF3
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_2AF5:
	word16 di_387 = di_1262 - 0x0001
	word16 cx_394 = Mem372[ss:sp_222:word16]
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_2AF7:
	branch cx_394 == 0x0000 l0800_2AF9
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_2AF9:
	ptr32 es_di_400 = Mem399[ds_326:0x45AA:segptr32]
	selector es_433 = SLICE(es_di_400, selector, 16)
	word16 di_1263 = (word16) es_di_400
	word16 cx_401 = 0xFFFF
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_2B02:
	branch cx_401 == 0x0000 l0800_2B04
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_2B02_1:
	di_1263 = di_1263 + 0x0001
	cx_401 = cx_401 - 0x0001
	branch Mem399[es_433:di_1263:byte] == 0x00 l0800_2B02
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_2B04:
	word16 cx_412 = ~cx_401
	word16 di_1264 = di_1263 - cx_412
	bool Z_425 = SLICE(cond(di_1264), bool, 2)
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_2B0A:
	branch cx_412 == 0x0000 l0800_2B0C
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_2B0A_2:
	Z_425 = SLICE(cond(0x00 - Mem399[es_433:di_1264:byte]), bool, 2) (alias)
	di_1264 = di_1264 + 0x0001
	cx_412 = cx_412 - 0x0001
	branch Mem399[es_433:di_1264:byte] == 0x00 l0800_2B0A
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_2B0C:
	branch Z_425 l0800_2B15
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_2B0E:
	di_1264 = 0x0001
	es_433 = 0x0000
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_2B15:
	Mem447[ds_326:0x45AC:word16] = es_433
	Mem448[ds_326:0x45AA:word16] = di_1264 + 0x0004
	word16 di_462 = Mem448[ss:sp_222 + 2:word16]
	word16 si_464 = Mem448[ss:sp_222 + 4:word16]
	bpOut = Mem448[ss:bp_40:word16]
	siOut = si_464
	diOut = di_462
	dsOut = ds_326
	return 0x0001
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_2AF7_3:
	Mem479[es_365:di_387:byte] = Mem399[es_333:si_355:byte]
	si_355 = si_355 + 0x0001
	di_387 = di_387 + 0x0001
	cx_394 = cx_394 - 0x0001
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_2AC8_1:
	Mem488[es_311:di_307:byte] = Mem325[es_276:si_301:byte]
	si_301 = si_301 + 0x0001
	di_307 = di_307 + 0x0001
	cx_320 = cx_320 - 0x0001
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_2AC4_2:
	Mem498[es_311:di_307:word16] = Mem494[es_276:si_301:word16]
	si_301 = si_301 + 0x0002
	di_307 = di_307 + 0x0002
	cx_299 = cx_299 - 0x0001
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_2A72:
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_2B2B:
	ptr32 es_di_502 = Mem234[ds:0x45AA:segptr32]
	selector es_538 = SLICE(es_di_502, selector, 16)
	word16 di_1265 = (word16) es_di_502
	word16 cx_506 = 0xFFFF
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_2B34:
	branch cx_506 == 0x0000 l0800_2B36
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_2B34_1:
	di_1265 = di_1265 + 0x0001
	cx_506 = cx_506 - 0x0001
	branch Mem234[es_538:di_1265:byte] == 0x00 l0800_2B34
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_2B36:
	word16 cx_517 = ~cx_506
	word16 di_1266 = di_1265 - cx_517
	bool Z_530 = SLICE(cond(di_1266), bool, 2)
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_2B3C:
	branch cx_517 == 0x0000 l0800_2B3E
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_2B3C_2:
	Z_530 = SLICE(cond(0x00 - Mem234[es_538:di_1266:byte]), bool, 2) (alias)
	di_1266 = di_1266 + 0x0001
	cx_517 = cx_517 - 0x0001
	branch Mem234[es_538:di_1266:byte] == 0x00 l0800_2B3C
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_2B3E:
	branch Z_530 l0800_2B47
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_2B40:
	di_1266 = 0x0001
	es_538 = 0x0000
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_2B47:
	Mem552[ds:0x45AC:word16] = es_538
	Mem553[ds:0x45AA:word16] = di_1266 + 0x0004
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_2A55:
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_2C12:
	word16 dx_557 = Mem555[ds:0x45AE:word16]
	branch Mem555[ds:0x45B0:word16] == Mem555[ss:bp_40 - 0x0002:word16] l0800_2C21
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_2C21:
	branch dx_557 == Mem555[ss:bp_40 - 0x0004:word16] l0800_2C29
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_2C26:
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_2C1E:
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_2B8A:
	branch Mem555[ds:0x2A1B:word16] == 0x0000 l0800_2BBB
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_2B91:
	word16 sp_570 = sp_13 - 2
	Mem572[ss:sp_570:word16] = ss
	selector es_573 = Mem572[ss:sp_570:selector]
	word16 di_576 = bp_40 - 0x006A
	word16 cx_580 = 0xFFFF
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_2B9B:
	branch cx_580 == 0x0000 l0800_2B9D
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_2B9B_1:
	di_576 = di_1267 + 0x0001
	cx_580 = cx_580 - 0x0001
	di_1267 = di_576
	branch Mem572[es_573:di_1267:byte] == 0x00 l0800_2B9B
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_2B9D:
	Mem598[ss:sp_570:word16] = ~cx_580 - 0x0001
	Mem600[ss:sp_570 - 2:word16] = ss
	Mem605[ss:sp_570 - 4:word16] = bp_40 - 0x006A
	word16 ax_608 = Mem605[ds:0x45AE:word16]
	Mem613[ss:sp_570 - 6:word16] = Mem605[ds:0x45B0:word16]
	Mem615[ss:sp_570 - 8:word16] = ax_608 + 0x0002
	branch fn0800_BFE6(Mem615[ss:sp_570 - 8:segptr32], Mem615[ss:sp_570 - 4:segptr32], Mem615[ss:sp_570:word16]) == 0x0000 l0800_2C29
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_2BBB:
	branch Mem632[ds:0x2A1B:word16] != 0x0000 l0800_2BEC
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_2BC2:
	si = Mem632[ds:0x45AE:word16] + 0x0002
	word16 sp_638 = sp_13 - 2
	Mem640[ss:sp_638:word16] = ds
	selector ds_641 = Mem640[ds:0x45B0:selector]
	Mem643[ss:sp_638 - 2:word16] = ss
	selector es_644 = Mem643[ss:sp_638 - 2:selector]
	word16 di_1268 = bp_40 - 0x006A
	word16 ax_648 = 0x0000
	word16 cx_651 = 0xFFFF
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_2BD8:
	ax_648 = DPB(ax_648, 0x00, 0) (alias)
	ax_648 = DPB(ax_648, 0x00, 0) (alias)
	branch cx_651 == 0x0000 l0800_2BDA
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_2BD8_2:
	di_1268 = di_1268 + 0x0001
	cx_651 = cx_651 - 0x0001
	branch Mem643[es_644:di_1268:byte] == 0x00 l0800_2BD8
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_2BDA:
	word16 cx_662 = ~cx_651
	word16 di_664 = di_1268 - cx_662
	bool Z_676 = SLICE(cond(di_664), bool, 2)
	di_671 = di_664
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_2BDE:
	word16 di_671
	branch cx_662 == 0x0000 l0800_2BE0
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_2BDE_3:
	Z_676 = SLICE(cond(Mem643[ds_641:si:byte] - Mem643[es_644:di_1270:byte]), bool, 2) (alias)
	si = si + 0x0001
	di_671 = di_1270 + 0x0001
	cx_662 = cx_662 - 0x0001
	di_1270 = di_671
	branch Mem643[ds_641:si:byte] != Mem643[es_644:di_1270:byte] l0800_2BDE
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_2BE0:
	branch Z_676 l0800_2BE7
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_2BE2:
	word16 ax_684 = 0x0000 - (di_664 <u 0x0000)
	ax_648 = ax_684 - 0xFFFF - (ax_684 <u 0x0000)
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_2BE7:
	ds = Mem643[ss:sp_638:selector]
	branch ax_648 == 0x0000 l0800_2C29
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_2C29:
	ptr32 es_di_716 = Mem715[ds:0x45AE:segptr32]
	selector es_754 = SLICE(es_di_716, selector, 16)
	word16 di_1271 = (word16) es_di_716 + 0x0002
	word16 cx_722 = 0xFFFF
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_2C35:
	branch cx_722 == 0x0000 l0800_2C37
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_2C35_1:
	di_1271 = di_1271 + 0x0001
	cx_722 = cx_722 - 0x0001
	branch Mem715[es_754:di_1271:byte] == 0x00 l0800_2C35
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_2C37:
	cx_174 = ~cx_722
	word16 di_1272 = di_1271 - cx_174
	bool Z_746 = SLICE(cond(di_1272), bool, 2)
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_2C3D:
	branch cx_174 == 0x0000 l0800_2C3F
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_2C3D_2:
	Z_746 = SLICE(cond(0x00 - Mem715[es_754:di_1272:byte]), bool, 2) (alias)
	di_1272 = di_1272 + 0x0001
	cx_174 = cx_174 - 0x0001
	branch Mem715[es_754:di_1272:byte] == 0x00 l0800_2C3D
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_2C3F:
	branch Z_746 l0800_2C48
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_2C41:
	di_1272 = 0x0001
	es_754 = 0x0000
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_2C48:
	word16 di_757 = di_1272 - 0x0001
	Mem768[ds:0x45AC:word16] = es_754
	Mem769[ds:0x45AA:word16] = di_757 + 0x0001
	di = di_757 + 0x0001
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_2BEC:
	ptr32 es_bx_772 = Mem771[ds:0x45AE:segptr32]
	word16 bx_794 = Mem771[ds:0x2E51:word16] + (((int16) Mem771[es_bx_772:byte] << 0x08) + DPB(DPB(dx_557, Mem771[es_bx_772 + 0x0001:byte], 0), 0x00, 8))
	Mem796[ds:0x45B0:word16] = Mem771[ds:0x2E53:word16]
	Mem797[ds:0x45AE:word16] = bx_794
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_29EE:
	word16 di_801 = Mem31[ss:sp_44 + 0x0004:word16]
	word16 si_803 = Mem31[ss:sp_44 + 0x0006:word16]
	bpOut = Mem31[ss:bp_40:word16]
	siOut = si_803
	diOut = di_801
	dsOut = ds
	return 0x0000
// DataOut:
// DataOut (flags):
// SymbolicIn:

fn0800_29C5_exit:
// DataOut:
// DataOut (flags):
// SymbolicIn:



word16 fn0800_2C9A(selector ds, ptr16 & dxOut, ptr16 & bxOut)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  ds:[0..15]
// LiveOut: bx cx dx
// Trashed: SCZO ax bx cx dx Top
// Preserved: si sp
fn0800_2C9A_entry:
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_2C9A:
	word16 cx_12 = 0x0000
	word16 si_11 = 0x2A29
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_2CA0:
	word16 dx_13 = cx_12
	word16 bx_14 = 0x0008
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_2CBD:
	branch bx_14 != 0x0000 l0800_2CA7
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_2CA7:
	word16 ax_25
	branch (dx_13 & 0x0001) == 0x0000 l0800_2CB6
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_2CB6:
	ax_25 = dx_13 >>u 0x0001
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_2CAD:
	ax_25 = dx_13 >>u 0x0001 ^ 0xA001
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_2CBA:
	dx_13 = ax_25
	bx_14 = bx_14 - 0x0001
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_2CC1:
	Mem43[ds:si_11:word16] = dx_13
	si_11 = si_11 + 0x0002
	cx_12 = cx_12 + 0x0001
	branch cx_12 <u 0x0100 l0800_2CA0
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_2CCD:
	dxOut = dx_13
	bxOut = bx_14
	return cx_12
// DataOut:
// DataOut (flags):
// SymbolicIn:

fn0800_2C9A_exit:
// DataOut:
// DataOut (flags):
// SymbolicIn:



word16 fn0800_2CCF(selector ds, segptr32 ptrArg02, word16 wArg06, word16 wArg08, ptr16 & clOut, ptr16 & dxOut)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  ds:[0..15] Stack +0002:[0..31] Stack +0006:[0..15] Stack +0008:[0..15]
// LiveOut: ax cl dx
// Trashed: SCZO ax bx cl dx es Top
// Preserved: bp si sp
fn0800_2CCF_entry:
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_2CCF:
	word16 si_12 = wArg06
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_2CFD:
	word16 v19_42
	si_12 = si_12 - 0x0001
	branch si_12 != 0x0000 l0800_2CD8
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_2CD8:
	cl = 0x08
	dx = bArg08 >>u 0x08
	bArg08 = Mem22[ds:((DPB(DPB(si_12, bArg08 ^ Mem22[ptrArg02:byte], 0), 0x00, 8) & 0x00FF) << 0x0001) + 0x2A29:word16] ^ bArg08 >>u 0x08
	v19_42 = ptrArg02 + 0x0001
	Mem22 = Mem43
	ptrArg02 = ptrArg02_63
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_2D04:
	clOut = cl
	dxOut = dx
	ptrArg02_63 = DPB(ptrArg02, v19_42, 0) (alias)
	return bArg08
// DataOut:
// DataOut (flags):
// SymbolicIn:

fn0800_2CCF_exit:
// DataOut:
// DataOut (flags):
// SymbolicIn:



word16 fn0800_2D0A(ptr16 & dxOut, ptr16 & bpOut, ptr16 & dsOut)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  ss:[0..15]
// LiveOut: ax bp ds dx sp
// Trashed: SCZO ax bp bx cx di ds dx es si sp Top
// Preserved:
fn0800_2D0A_entry:
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_2D0A:
	// Failed to bind call argument.
	// Please report this issue at https://github.com/uxmal/reko
	// Failed to bind call argument.
	// Please report this issue at https://github.com/uxmal/reko
	word16 stackArg2 = <invalid>
	word16 stackArg4 = <invalid>
	word16 bp_22
	word16 dx_27
	word16 sp_30
	selector ds_114
	word16 ax_21 = fn0800_4311(stackArg2, stackArg4, out dx_27, out bp_22, out si_241, out di_25, out ds_114)
	Mem38[ss:bp_22 - 0x0002:word16] = dx_27
	Mem39[ss:bp_22 - 0x0004:word16] = ax_21
	Mem42[ss:sp_30 + 0x0002:word16] = Mem39[ss:bp_22 + 0x0006:word16]
	Mem45[ss:sp_30:word16] = Mem42[ss:bp_22 + 0x0004:word16]
	// Failed to bind call argument.
	// Please report this issue at https://github.com/uxmal/reko
	word16 stackArg4 = <invalid>
	word16 dx_49
	word16 ax_46 = fn0800_AD2F(ds_114, Mem45[ss:sp_30:segptr32], stackArg4, out cx_243, out dx_49)
	Mem56[ss:bp_22 - 0x000A:word16] = dx_49
	Mem57[ss:bp_22 - 0x000C:word16] = ax_46
	word16 si_152 = 0x0000
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_2D8F:
	branch (Mem63[ss:bp_22 + 0x0008:word16] | Mem63[ss:bp_22 + 0x000A:word16]) != 0x0000 l0800_2D3A
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_2D3A:
	word16 ax_78
	word16 dx_77
	branch Mem63[ss:bp_22 + 0x000A:word16] <u 0x0000 l0800_2D4F
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_2D40:
	branch Mem63[ss:bp_22 + 0x000A:word16] >u 0x0000 l0800_2D48
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_2D42:
	branch Mem63[ss:bp_22 + 0x0008:word16] <=u 0xFFF0 l0800_2D4F
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_2D4F:
	dx_77 = Mem63[ss:bp_22 + 0x000A:word16]
	ax_78 = Mem63[ss:bp_22 + 0x0008:word16]
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_2D48:
	dx_77 = 0x0000
	ax_78 = 0xFFF0
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_2D55:
	Mem88[ss:bp_22 - 0x0006:word16] = dx_77
	Mem90[ss:bp_22 - 0x0008:word16] = ax_78
	Mem97[ss:sp_30 + 0x0002:word16] = Mem90[ss:bp_22 + 0x0006:word16]
	Mem100[ss:sp_30:word16] = Mem97[ss:bp_22 + 0x0004:word16]
	Mem103[ss:sp_30 - 0x0002:word16] = Mem100[ss:bp_22 - 0x0006:word16]
	Mem105[ss:sp_30 - 0x0004:word16] = ax_78
	Mem108[ss:sp_30 - 0x0006:word16] = Mem105[ss:bp_22 - 0x0002:word16]
	Mem111[ss:sp_30 - 0x0008:word16] = Mem108[ss:bp_22 - 0x0004:word16]
	word16 si_123
	fn0800_4110(ds_114, Mem111[ss:sp_30 - 0x0008:word16], Mem111[ss:sp_30 - 0x0006:word16], Mem111[ss:sp_30 - 0x0004:word16], Mem111[ss:sp_30 - 0x0002:word16], Mem111[ss:sp_30:word16], Mem111[ss:sp_30 + 0x0002:word16], out si_123, out di_251, out ds_114)
	Mem132[ss:sp_30 + 0x0002:word16] = si_123
	Mem135[ss:sp_30:word16] = Mem132[ss:bp_22 - 0x0008:word16]
	Mem138[ss:sp_30 - 0x0002:word16] = Mem135[ss:bp_22 - 0x0002:word16]
	Mem141[ss:sp_30 - 0x0004:word16] = Mem138[ss:bp_22 - 0x0004:word16]
	si_152 = fn0800_2CCF(ds_114, Mem141[ss:sp_30 - 0x0004:segptr32], Mem141[ss:sp_30:word16], Mem141[ss:sp_30 + 0x0002:byte], out cl_252, out dx_253)
	word16 ax_153 = Mem141[ss:bp_22 - 0x0006:word16]
	word16 dx_154 = Mem141[ss:bp_22 - 0x0008:word16]
	Mem156[ss:bp_22 + 0x0008:word16] = v29_155
	Mem141[ss:bp_22 + 0x0008:ui32] = SEQ(Mem156[ss:bp_22 + 0x000A:word16], Mem141[ss:bp_22 + 0x0008:word16])
	ui32 v30_v29_215 = Mem141[ss:bp_22 + 0x0008:ui32] - SEQ(ax_153, dx_154)
	Mem160[ss:bp_22 + 0x000A:word16] = SLICE(v30_v29_215, word16, 16)
	word16 v29_155 = (word16) v30_v29_215
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_2D97:
	Mem166[ss:sp_30 + 0x0002:word16] = 0x0000
	Mem169[ss:sp_30:word16] = Mem166[ss:bp_22 - 0x000A:word16]
	Mem172[ss:sp_30 - 0x0002:word16] = Mem169[ss:bp_22 - 0x000C:word16]
	Mem175[ss:sp_30 - 0x0004:word16] = Mem172[ss:bp_22 + 0x0006:word16]
	Mem178[ss:sp_30 - 0x0006:word16] = Mem175[ss:bp_22 + 0x0004:word16]
	fn0800_ACB3(ds_114, Mem178[ss:sp_30 - 0x0006:word16], Mem178[ss:sp_30 - 0x0004:word16], Mem178[ss:sp_30 + 0x0002:word16], out cx_244, out dx_245, out bx_246, out es_247)
	Mem192[ss:sp_30 + 0x0002:word16] = Mem178[ss:bp_22 - 0x0002:word16]
	Mem195[ss:sp_30:word16] = Mem192[ss:bp_22 - 0x0004:word16]
	// Failed to bind call argument.
	// Please report this issue at https://github.com/uxmal/reko
	word16 stackArg2 = <invalid>
	selector ds_199
	word16 dx_200
	fn0800_4346(ds_114, stackArg2, Mem195[ss:sp_30 + 0x0002:word16], out cx_249, out dx_200, out bx_250, out ds_199)
	word16 bp_212 = Mem195[ss:bp_22:word16]
	dxOut = dx_200
	bpOut = bp_212
	dsOut = ds_199
	return si_152
// DataOut:
// DataOut (flags):
// SymbolicIn:

fn0800_2D0A_exit:
// DataOut:
// DataOut (flags):
// SymbolicIn:



void fn0800_2DBF(selector ds, word16 wArg02, word16 wArg04)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  ds:[0..15] Stack +0002:[0..15] Stack +0004:[0..15]
// LiveOut:
// Trashed: ax Top
// Preserved: bp sp
fn0800_2DBF_entry:
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_2DBF:
	Mem10[ds:0x4656:word16] = 0xFFFF
	Mem11[ds:0x4654:word16] = 0x0000
	Mem13[ds:0x4652:word16] = Mem11[ds:0x2A27:word16]
	Mem15[ds:0x4650:word16] = wArg02
	Mem17[ds:0x464E:word16] = wArg04
	return
// DataOut:
// DataOut (flags):
// SymbolicIn:

fn0800_2DBF_exit:
// DataOut:
// DataOut (flags):
// SymbolicIn:



word16 fn0800_2DE2(word16 cx, word16 dx, word16 si, word16 di, selector ds, segptr32 ptrArg02, word16 wArg04, ptr16 & chOut, ptr16 & bpOut, ptr16 & siOut, ptr16 & diOut, ptr16 & dsOut)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  cx:[0..15] di:[0..15] ds:[0..15] dx:[0..15] si:[0..15] ss:[0..15] Stack +0002:[0..31]
// LiveOut: ax bp cx di ds si sp
// Trashed: SCZDOP ax bp bx cx di ds dx es si sp Top
// Preserved:
fn0800_2DE2_entry:
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_2DE2:
	word16 si_313
	si_313 = si
	branch Mem15[ds:0x4654:word16] != 0x0000 l0800_2E11
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_2DF1:
	si_313 = si
	branch Mem15[ds:0x4652:word16] != Mem15[ds:0x4656:word16] l0800_2E11
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_2DFA:
	si_313 = si
	branch Mem15[ds:0x464E:word16] == 0x0000 l0800_2E11
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_2E01:
	si_313 = fn0800_3479(ds, fp - 0x0012, ss, 0x0000, out cx, out dx)
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_2E11:
	word16 di_2165
	branch Mem49[ds:0x4654:word16] != 0x0000 l0800_2E1B
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_2E1B:
	Mem52[ds:0x4617:word16] = 0x0000
	// Failed to bind call argument.
	// Please report this issue at https://github.com/uxmal/reko
	word16 stackArg10 = <invalid>
	word16 dx_72
	branch (fn0800_A77D(ds, 0x45B2, ds, 0x0065, SEQ(Mem52[ds:0x461D:word16], Mem57[ds:0x461B:word16]), stackArg10, out dx_72) | dx_72) != 0x0000 l0800_2E3F
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_2E3F:
	selector es_123 = ds
	word16 di_104 = 0x45B2
	word16 cx_101 = 0xFFFF
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_2E49:
	branch cx_101 == 0x0000 l0800_2E4B
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_2E49_1:
	di_104 = di_104 + 0x0001
	cx_101 = cx_101 - 0x0001
	branch Mem84[ds:di_104:byte] == 0x00 l0800_2E49
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_2E4B:
	word16 cx_102 = ~cx_101
	word16 di_105 = di_104 - cx_102
	bool Z_115 = SLICE(cond(di_105), bool, 2)
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_2E52:
	branch cx_102 == 0x0000 l0800_2E54
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_2E52_2:
	Z_115 = SLICE(cond(0x0D - Mem84[ds:di_105:byte]), bool, 2) (alias)
	di_105 = di_105 + 0x0001
	cx_102 = cx_102 - 0x0001
	branch Mem84[ds:di_105:byte] == 0x0D l0800_2E52
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_2E54:
	branch Z_115 l0800_2E5D
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_2E56:
	di_105 = 0x0001
	es_123 = 0x0000
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_2E5D:
	word16 di_130 = di_105 - 0x0001 | es_123
	branch di_130 == 0x0000 l0800_2E8B
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_2E64:
	selector es_151 = ds
	word16 di_153 = 0x45B2
	word16 cx_157 = 0xFFFF
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_2E6E:
	branch cx_157 == 0x0000 l0800_2E70
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_2E6E_1:
	di_153 = di_153 + 0x0001
	cx_157 = cx_157 - 0x0001
	branch Mem150[ds:di_153:byte] == 0x00 l0800_2E6E
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_2E70:
	cx_102 = ~cx_157
	word16 di_171 = di_153 - cx_102
	bool Z_181 = SLICE(cond(di_171), bool, 2)
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_2E77:
	branch cx_102 == 0x0000 l0800_2E79
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_2E77_2:
	Z_181 = SLICE(cond(0x0D - Mem150[ds:di_171:byte]), bool, 2) (alias)
	di_171 = di_171 + 0x0001
	cx_102 = cx_102 - 0x0001
	branch Mem150[ds:di_171:byte] == 0x0D l0800_2E77
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_2E79:
	branch Z_181 l0800_2E82
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_2E7B:
	di_171 = 0x0001
	es_151 = 0x0000
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_2E82:
	di_130 = di_171 - 0x0001
	Mem198[es_151:di_130:byte] = 0x00
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_2E8B:
	branch (int16) Mem205[ds:0x45B2:byte] != 0x0000 l0800_2EA5
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_2EA5:
	di_2165 = 0x45B2
	word16 cx_234 = 0xFFFF
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_2EAF:
	branch cx_234 == 0x0000 l0800_2EB1
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_2EAF_1:
	di_2165 = di_2165 + 0x0001
	cx_234 = cx_234 - 0x0001
	branch Mem227[ds:di_2165:byte] == 0x00 l0800_2EAF
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_2EB1:
	Mem250[ds:0x4619:word16] = ~cx_234 - 0x0001
	fn0800_0C6C(ds, SEQ(ds, 0x45B2))
	branch Mem259[ds:0x464E:word16] != 0x0000 l0800_2EFE
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_2EFE:
	si_313 = fn0800_33CD(ds, fp - 0x0012, ss, 0x0000, 0x45B2, ds, out cx, out dx)
	Mem314[ds:0x4654:word16] = 0x0000
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_2ECA:
	selector es_317 = SLICE(ptrArg02, selector, 16)
	word16 di_324 = (word16) ptrArg02
	word16 di_2166 = 0x45B2
	word16 cx_330 = 0xFFFF
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_2ED9:
	branch cx_330 == 0x0000 l0800_2EDB
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_2ED9_2:
	di_2166 = di_2166 + 0x0001
	cx_330 = cx_330 - 0x0001
	branch Mem325[ds:di_2166:byte] == 0x00 l0800_2ED9
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_2EDB:
	word16 cx_341 = ~cx_330
	word16 cx_344 = cx_341 >>u 0x0001
	word16 si_346 = di_2166 - cx_341
	word16 di_352 = di_324
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_2EEA:
	branch cx_344 == 0x0000 l0800_2EEC
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_2EEC:
	word16 cx_365 = cx_344 * 0x0002 + (cx_341 >>u 0x0001 <u 0x0000)
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_2EEE:
	branch cx_365 == 0x0000 l0800_2EF0
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_2EF0:
	Mem374[ds:0x4617:word16] = Mem370[ds:0x4617:word16] + 0x0001
	chOut = <invalid>
	bpOut = bp
	siOut = si
	diOut = di
	dsOut = ds
	return 0x0001
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_2EEE_1:
	Mem389[es_317:di_352:byte] = Mem370[ds:si_346:byte]
	si_346 = si_346 + 0x0001
	di_352 = di_352 + 0x0001
	cx_365 = cx_365 - 0x0001
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_2EEA_3:
	Mem399[es_317:di_352:word16] = Mem395[ds:si_346:word16]
	si_346 = si_346 + 0x0002
	di_352 = di_352 + 0x0002
	cx_344 = cx_344 - 0x0001
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_2E93:
	// Failed to bind call argument.
	// Please report this issue at https://github.com/uxmal/reko
	word16 stackArg4 = <invalid>
	word16 ax_423 = fn0800_2DE2(cx_102, dx_72, si_313, di_130, ds, ptrArg02, stackArg4, out ch_2148, out bp_2149, out si_2150, out di_2151, out ds_2152)
	chOut = <invalid>
	bpOut = bp
	siOut = si
	diOut = di
	dsOut = ds
	return ax_423
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_2E3C:
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_2F1B:
	// Failed to bind call argument.
	// Please report this issue at https://github.com/uxmal/reko
	word16 stackArg4 = <invalid>
	word16 bp_484
	word16 sp_487
	word16 cx_488
	word16 di_489
	word16 dx_490
	word16 si_491
	selector ds_492
	fn0800_A614(ds, SEQ(Mem68[ds:0x461D:word16], Mem479[ds:0x461B:word16]), stackArg4, out cx_488, out dx_490, out bp_484, out si_491, out di_489, out ds_492)
	Mem499[ds_492:0x4654:word16] = 0x0000
	Mem500[ds_492:0x461D:word16] = 0x0000
	Mem501[ds_492:0x461B:word16] = 0x0000
	Mem503[ds_492:0x4652:word16] = Mem501[ds_492:0x4652:word16] + 0x0001
	Mem507[ss:sp_487 + 0x0002:word16] = Mem503[ss:bp_484 + 0x0006:word16]
	Mem510[ss:sp_487:word16] = Mem507[ss:bp_484 + 0x0004:word16]
	// Failed to bind call argument.
	// Please report this issue at https://github.com/uxmal/reko
	// Failed to bind call argument.
	// Please report this issue at https://github.com/uxmal/reko
	segptr32 stackArg2 = <invalid>
	word16 stackArg4 = <invalid>
	word16 ax_512 = fn0800_2DE2(cx_488, dx_490, si_491, di_489, ds_492, stackArg2, stackArg4, out ch_2129, out bp_2130, out si_2131, out di_2132, out ds_2133)
	word16 di_520 = Mem510[ss:sp_487 + 0x0004:word16]
	word16 si_522 = Mem510[ss:sp_487 + 0x0006:word16]
	word16 bp_524 = Mem510[ss:bp_484:word16]
	chOut = <invalid>
	bpOut = bp_524
	siOut = si_522
	diOut = di_520
	dsOut = ds_492
	return ax_512
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_2E18:
	di_2165 = di
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_2F51:
	word16 ax_528 = Mem527[ds:0x4652:word16]
	branch ax_528 != Mem527[ds:0x4656:word16] l0800_2F5D
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_2F5D:
	branch ax_528 != Mem527[ds:0x269A:word16] l0800_2F6B
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_2F6B:
	ptr32 es_bx_536 = Mem527[ds:0x269C:segptr32]
	// Failed to bind call argument.
	// Please report this issue at https://github.com/uxmal/reko
	selector es_540 = SLICE(es_bx_536, selector, 16)
	word16 bx_538 = (word16) es_bx_536 + (Mem527[ds:0x4652:word16] << 0x0002)
	word16 stackArg4 = <invalid>
	fn0800_BF9E(SEQ(ds, 0x45B2), stackArg4, SEQ(Mem527[es_540:bx_538 + 0x0002:word16], Mem545[es_540:bx_538:word16]))
	di_2165 = 0x45B2
	word16 cx_572 = 0xFFFF
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_2F94:
	branch cx_572 == 0x0000 l0800_2F96
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_2F94_1:
	di_2165 = di_2165 + 0x0001
	cx_572 = cx_572 - 0x0001
	branch Mem565[ds:di_2165:byte] == 0x00 l0800_2F94
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_2F96:
	Mem588[ds:0x4619:word16] = ~cx_572 - 0x0001
	fn0800_0C6C(ds, SEQ(ds, 0x45B2))
	word16 ax_607 = Mem597[ds:0x4652:word16]
	Mem608[ds:0x4656:word16] = ax_607
	Mem609[ds:0x4617:word16] = 0x0000
	branch Mem609[Mem609[ds:(word16) Mem609[ds:0x269C:segptr32] + (ax_607 << 0x0002):segptr32]:byte] != 0x40 l0800_3007
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_3007:
	fn0800_335C(si_313, di_2165, ds, 0x45B2, ds)
	branch Mem624[ds:0x464E:word16] != 0x0000 l0800_3051
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_3051:
	si_313 = fn0800_33CD(ds, fp - 0x0012, ss, 0x0000, 0x45B2, ds, out cx, out dx)
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_3019:
	selector es_678 = SLICE(ptrArg02, selector, 16)
	word16 di_685 = (word16) ptrArg02
	word16 di_2168 = 0x45B2
	word16 cx_691 = 0xFFFF
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_3028:
	branch cx_691 == 0x0000 l0800_302A
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_3028_1:
	di_2168 = di_2168 + 0x0001
	cx_691 = cx_691 - 0x0001
	branch Mem686[ds:di_2168:byte] == 0x00 l0800_3028
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_302A:
	word16 cx_702 = ~cx_691
	word16 cx_705 = cx_702 >>u 0x0001
	word16 si_707 = di_2168 - cx_702
	word16 di_713 = di_685
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_3039:
	branch cx_705 == 0x0000 l0800_303B
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_303B:
	word16 cx_726 = cx_705 * 0x0002 + (cx_702 >>u 0x0001 <u 0x0000)
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_303D:
	branch cx_726 == 0x0000 l0800_303F
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_303F:
	Mem735[ds:0x4617:word16] = Mem731[ds:0x4617:word16] + 0x0001
	Mem737[ds:0x4652:word16] = Mem735[ds:0x4652:word16] + 0x0001
	chOut = <invalid>
	bpOut = bp
	siOut = si
	diOut = di
	dsOut = ds
	return 0x0001
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_303D_1:
	Mem752[es_678:di_713:byte] = Mem731[ds:si_707:byte]
	si_707 = si_707 + 0x0001
	di_713 = di_713 + 0x0001
	cx_726 = cx_726 - 0x0001
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_3039_2:
	Mem762[es_678:di_713:word16] = Mem758[ds:si_707:word16]
	si_707 = si_707 + 0x0002
	di_713 = di_713 + 0x0002
	cx_705 = cx_705 - 0x0001
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_2FC7:
	ptr32 es_bx_774 = Mem770[ds:0x269C:segptr32]
	selector es_778 = SLICE(es_bx_774, selector, 16)
	word16 bx_776 = (word16) es_bx_774 + (Mem770[ds:0x4652:word16] << 0x0002)
	word16 bp_788
	word16 cx_790
	word16 di_791
	selector ds_792
	word16 dx_793
	word16 si_795
	word16 sp_796
	word16 ax_787 = fn0800_4234(si_313, di_2165, ds, Mem770[es_778:bx_776:word16] + 0x0001, Mem770[es_778:bx_776 + 0x0002:word16], 0x0A13, ds, out cx_790, out dx_793, out bp_788, out si_795, out di_791, out ds_792)
	Mem804[ds_792:0x461D:word16] = dx_793
	Mem805[ds_792:0x461B:word16] = ax_787
	Mem806[ds_792:0x4654:word16] = 0x0001
	Mem809[ss:sp_796 + 0x0006:word16] = Mem806[ss:bp_788 + 0x0006:word16]
	Mem812[ss:sp_796 + 0x0004:word16] = Mem809[ss:bp_788 + 0x0004:word16]
	// Failed to bind call argument.
	// Please report this issue at https://github.com/uxmal/reko
	// Failed to bind call argument.
	// Please report this issue at https://github.com/uxmal/reko
	segptr32 stackArg2 = <invalid>
	word16 stackArg4 = <invalid>
	word16 ax_814 = fn0800_2DE2(cx_790, dx_793, si_795, di_791, ds_792, stackArg2, stackArg4, out ch_2156, out bp_2157, out si_2158, out di_2159, out ds_2160)
	word16 di_822 = Mem812[ss:sp_796 + 0x0008:word16]
	word16 si_824 = Mem812[ss:sp_796 + 0x000A:word16]
	word16 bp_826 = Mem812[ss:bp_788:word16]
	chOut = <invalid>
	bpOut = bp_826
	siOut = si_824
	diOut = di_822
	dsOut = ds_792
	return ax_814
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_2F63:
	chOut = <invalid>
	bpOut = bp
	siOut = si
	diOut = di
	dsOut = ds
	return 0x0000
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_2F5A:
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_3066:
	word16 si_1046 = si_313
	branch si_313 != 0x0000 l0800_306D
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_306D:
	branch Mem843[ds:0x2A1B:word16] == 0x0000 l0800_309E
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_3074:
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_309A:
	branch si_1046 != 0x0000 l0800_3076
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_3076:
	branch fn0800_31B4(si_1046, di_2165, ds, 0x45B2, ds, out cx, out dx) == 0x0000 l0800_309E
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_3085:
	si_1046 = fn0800_33CD(ds, fp - 0x0012, ss, 0x0000, 0x45B2, ds, out cx, out dx)
	Mem914 = Mem892
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_309E:
	branch si_1046 == 0x0000 l0800_30F0
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_30A2:
	word16 bx_915 = Mem913[ds:0x4619:word16]
	Mem916[ds:bx_915 + 0x45B2:byte] = 0x00
	branch Mem916[ds:0x4617:word16] != 0x0000 l0800_30C9
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_30B2:
	branch Mem916[ds:0x4650:word16] == 0x0000 l0800_30C9
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_30B9:
	fn0800_B2EF(cx, dx, bx_915, ds, 0x0A17, ds, out si_1046, out di_2165)
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_30C9:
	branch (Mem958[ds:0x461B:word16] | Mem958[ds:0x461D:word16]) == 0x0000 l0800_30DA
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_30DA:
	Mem965[ds:0x4652:word16] = Mem958[ds:0x4652:word16] + 0x0001
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_30D2:
	Mem967[ds:0x4654:word16] = 0x0001
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_30DE:
	// Failed to bind call argument.
	// Please report this issue at https://github.com/uxmal/reko
	word16 stackArg4 = <invalid>
	word16 ax_995 = fn0800_2DE2(cx, dx, si_1046, di_2165, ds, ptrArg02, stackArg4, out ch_2136, out bp_2137, out si_2138, out di_2139, out ds_2140)
	chOut = <invalid>
	bpOut = bp
	siOut = si
	diOut = di
	dsOut = ds
	return ax_995
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_306A:
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_30F0:
	fn0800_3509(si_1046, di_2165, ptrArg02, ptrArg02, 0x45B2, ds, out bx_2134)
	word16 di_1071 = fp - 0x0012
	word16 cx_1083 = 0xFFFF
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_311B:
	branch cx_1083 == 0x0000 l0800_311D
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_311B_1:
	di_1071 = di_1071 + 0x0001
	cx_1083 = cx_1083 - 0x0001
	branch Mem1079[ss:di_1071:byte] == 0x00 l0800_311B
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_311D:
	word16 cx_1094 = ~cx_1083
	word16 si_1097 = di_1071 - cx_1094
	word16 di_1103 = ptrArg02
	word16 cx_1117 = 0xFFFF
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_3132:
	branch cx_1117 == 0x0000 l0800_3134
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_3132_2:
	di_1103 = di_1103 + 0x0001
	cx_1117 = cx_1117 - 0x0001
	branch Mem1116[ptrArg02:di_1103:byte] == 0x00 l0800_3132
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_3134:
	word16 di_1131 = di_1103 - 0x0001
	word16 cx_1138 = cx_1094
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_3136:
	branch cx_1138 == 0x0000 l0800_3138
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_3138:
	fn0800_0C6C(ds, SEQ(ptrArg02, ptrArg02))
	word16 si_1161 = ptrArg02
	word16 di_1167 = 0x4348
	word16 ax_1171 = 0x0000
	word16 cx_1174 = 0xFFFF
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_315A:
	ax_1171 = DPB(ax_1171, 0x00, 0) (alias)
	ax_1171 = DPB(ax_1171, 0x00, 0) (alias)
	branch cx_1174 == 0x0000 l0800_315C
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_315A_1:
	di_1167 = di_1167 + 0x0001
	cx_1174 = cx_1174 - 0x0001
	branch Mem1169[ds:di_1167:byte] == 0x00 l0800_315A
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_315C:
	word16 cx_1185 = ~cx_1174
	word16 di_1187 = di_1167 - cx_1185
	bool Z_1199 = SLICE(cond(di_1187), bool, 2)
	di_1194 = di_1187
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_3160:
	word16 di_1194
	branch cx_1185 == 0x0000 l0800_3162
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_3160_2:
	Z_1199 = SLICE(cond(Mem1169[ptrArg02:si_1161:byte] - Mem1169[ds:di_1194:byte]), bool, 2) (alias)
	si_1161 = si_1161 + 0x0001
	di_1194 = di_1194 + 0x0001
	cx_1185 = cx_1185 - 0x0001
	branch Mem1169[ptrArg02:si_1161:byte] != Mem1169[ds:di_1194:byte] l0800_3160
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_3162:
	branch Z_1199 l0800_3169
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_3164:
	word16 ax_1207 = 0x0000 - (di_1187 <u 0x0000)
	ax_1171 = ax_1207 - 0xFFFF - (ax_1207 <u 0x0000)
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_3169:
	branch ax_1171 == 0x0000 l0800_3195
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_316E:
	si_1161 = ptrArg02
	word16 di_1248 = 0x4477
	word16 ax_1252 = 0x0000
	word16 cx_1255 = 0xFFFF
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_3181:
	ax_1252 = DPB(ax_1252, 0x00, 0) (alias)
	ax_1252 = DPB(ax_1252, 0x00, 0) (alias)
	branch cx_1255 == 0x0000 l0800_3183
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_3181_1:
	di_1248 = di_1248 + 0x0001
	cx_1255 = cx_1255 - 0x0001
	branch Mem1250[ds:di_1248:byte] == 0x00 l0800_3181
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_3183:
	cx_1185 = ~cx_1255
	word16 di_1268 = di_1248 - cx_1185
	bool Z_1280 = SLICE(cond(di_1268), bool, 2)
	di_1194 = di_1268
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_3187:
	branch cx_1185 == 0x0000 l0800_3189
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_3187_2:
	Z_1280 = SLICE(cond(Mem1250[ptrArg02:si_1161:byte] - Mem1250[ds:di_1194:byte]), bool, 2) (alias)
	si_1161 = si_1161 + 0x0001
	di_1194 = di_1194 + 0x0001
	cx_1185 = cx_1185 - 0x0001
	branch Mem1250[ptrArg02:si_1161:byte] != Mem1250[ds:di_1194:byte] l0800_3187
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_3189:
	branch Z_1280 l0800_3190
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_318B:
	word16 ax_1288 = 0x0000 - (di_1268 <u 0x0000)
	ax_1252 = ax_1288 - 0xFFFF - (ax_1288 <u 0x0000)
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_3190:
	branch ax_1252 != 0x0000 l0800_31A7
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_31A7:
	Mem1319[ds:0x4617:word16] = Mem1250[ds:0x4617:word16] + 0x0001
	chOut = <invalid>
	bpOut = bp
	siOut = si
	diOut = di
	dsOut = ds
	return 0x0001
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_3195:
	// Failed to bind call argument.
	// Please report this issue at https://github.com/uxmal/reko
	word16 stackArg4 = <invalid>
	word16 ax_1356 = fn0800_2DE2(cx_1185, dx_1154, si_1161, di_1194, ds, ptrArg02, stackArg4, out ch_2142, out bp_2143, out si_2144, out di_2145, out ds_2146)
	chOut = <invalid>
	bpOut = bp
	siOut = si
	diOut = di
	dsOut = ds
	return ax_1356
// DataOut:
// DataOut (flags):
// SymbolicIn:

fn0800_2DE2_exit:
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_3136_3:
	Mem1419[ptrArg02:di_1131:byte] = Mem1143[ss:si_1097:byte]
	si_1097 = si_1097 + 0x0001
	di_1131 = di_1131 + 0x0001
	cx_1138 = cx_1138 - 0x0001
// DataOut:
// DataOut (flags):
// SymbolicIn:



word16 fn0800_31B4(word16 si, word16 di, selector ds, word16 wArg02, word16 wArg04, ptr16 & cxOut, ptr16 & dxOut)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  di:[0..15] ds:[0..15] si:[0..15] ss:[0..15] Stack +0002:[0..15] Stack +0004:[0..15]
// LiveOut: ax cx dx
// Trashed: SCZDOP ax bx cx dx es Top
// Preserved: bp di ds si sp
fn0800_31B4_entry:
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_31B4:
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_31BD:
	fn0800_3509(si, di, fp - 0x0084, ss, wArg02, wArg04, out bx_461)
	fn0800_35A3(si, di, fp - 0x0010, ss, wArg02, wArg04)
	word16 cx_87
	word16 dx_88
	branch fn0800_32CD(ds, fp - 0x001E, ss, fp - 0x0084, ss, Mem56[ds:(Mem56[ds:0x09AC:word16] << 0x0001) + 0x09AE:word16], out cx_87, out dx_88) != 0x0000 l0800_323E
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_323E:
	branch Mem84[ds:0x09AC:word16] != 0x0000 l0800_3253
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_3253:
	word16 di_107 = fp - 0x0084
	word16 cx_111 = 0xFFFF
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_325E:
	branch cx_111 == 0x0000 l0800_3260
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_325E_1:
	di_107 = di_107 + 0x0001
	cx_111 = cx_111 - 0x0001
	branch Mem104[ss:di_107:byte] == 0x00 l0800_325E
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_3260:
	Mem133[ss:~cx_111 - 0x0002 + (fp - 0x0084):byte] = 0x00
	fn0800_3509(si, di_107, wArg02, wArg04, fp - 0x0084, ss, out bx_460)
	word16 di_172 = fp - 0x0010
	word16 cx_184 = 0xFFFF
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_3298:
	branch cx_184 == 0x0000 l0800_329A
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_3298_2:
	di_172 = di_172 + 0x0001
	cx_184 = cx_184 - 0x0001
	branch Mem180[ss:di_172:byte] == 0x00 l0800_3298
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_329A:
	word16 cx_195 = ~cx_184
	si = di_172 - cx_195
	word16 di_204 = wArg02
	word16 cx_218 = 0xFFFF
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_32AE:
	branch cx_218 == 0x0000 l0800_32B0
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_32AE_3:
	di_204 = di_204 + 0x0001
	cx_218 = cx_218 - 0x0001
	branch Mem217[wArg04:di_204:byte] == 0x00 l0800_32AE
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_32B0:
	di = di_204 - 0x0001
	word16 cx_239 = cx_195
	Mem244 = Mem217
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_32B2:
	branch cx_239 == 0x0000 l0800_32B4
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_32B4:
	Mem246[ds:0x09AC:word16] = Mem244[ds:0x09AC:word16] - 0x0001
	word16 bx_247 = Mem246[ds:0x09AC:word16]
	Mem251[ds:(bx_247 << 0x0001) + 0x09AE:word16] = Mem246[ds:(bx_247 << 0x0001) + 0x09AE:word16] + 0x0001
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_32B2_4:
	Mem258[wArg04:di:byte] = Mem244[ss:si:byte]
	si = si + 0x0001
	di = di + 0x0001
	cx_239 = cx_239 - 0x0001
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_3245:
	Mem262[ds:0x09AE:word16] = 0x0000
	cxOut = <invalid>
	dxOut = <invalid>
	return 0x0000
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_31FF:
	fn0800_BEA2(cx_87, dx_88, ds, SEQ(wArg04, wArg02), 0x0A27, ds, out di_459)
	Mem315[ds:0x09AC:word16] = Mem302[ds:0x09AC:word16] + 0x0001
	Mem319[ds:(Mem315[ds:0x09AC:word16] << 0x0001) + 0x09AE:word16] = 0x0000
	cxOut = <invalid>
	dxOut = <invalid>
	return 0x0001
// DataOut:
// DataOut (flags):
// SymbolicIn:

fn0800_31B4_exit:
// DataOut:
// DataOut (flags):
// SymbolicIn:



word16 fn0800_32CD(selector ds, word16 wArg02, word16 wArg04, word16 wArg06, selector psegArg08, word16 wArg0A, ptr16 & cxOut, ptr16 & dxOut)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  ds:[0..15] ss:[0..15] Stack +0002:[0..15] Stack +0004:[0..15] Stack +0006:[0..15] Stack +0008:[0..15] Stack +000A:[0..15]
// LiveOut: ax cx dx
// Trashed: SCZDOP ax bx cx dx es Top
// Preserved: bp di ds si sp
fn0800_32CD_entry:
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_32CD:
	word16 di_26 = wArg06
	word16 cx_30 = 0xFFFF
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_32E7:
	branch cx_30 == 0x0000 l0800_32E9
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_32E7_1:
	di_26 = di_26 + 0x0001
	cx_30 = cx_30 - 0x0001
	branch Mem25[psegArg08:di_26:byte] == 0x00 l0800_32E7
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_32E9:
	word16 cx_41 = ~cx_30
	word16 cx_213 = cx_41 >>u 0x0001
	word16 si_196 = di_26 - cx_41
	word16 di_199 = fp - 0x0068
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_32F8:
	branch cx_213 == 0x0000 l0800_32FA
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_32FA:
	word16 cx_203 = cx_213 * 0x0002 + (cx_41 >>u 0x0001 <u 0x0000)
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_32FC:
	branch cx_203 == 0x0000 l0800_32FE
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_32FE:
	word16 di_367 = fp - 0x0068
	word16 si_186 = 0x0A32
	word16 cx_81 = 0xFFFF
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_330C:
	branch cx_81 == 0x0000 l0800_330E
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_330C_1:
	di_367 = di_367 + 0x0001
	cx_81 = cx_81 - 0x0001
	branch Mem75[ss:di_367:byte] == 0x00 l0800_330C
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_330E:
	word16 di_190 = di_367 - 0x0001
	word16 cx_194 = 0x0004
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_3312:
	branch cx_194 == 0x0000 l0800_3314
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_3314:
	word16 dx_120
	word16 cx_119
	branch fn0800_33CD(ds, wArg02, wArg04, 0x0010, fp - 0x0068, ss, out cx_119, out dx_120) == 0x0000 l0800_334D
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_334D:
	branch wArg0A != 0x0000 l0800_3336
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_3336:
	branch fn0800_3479(ds, wArg02, wArg04, 0x0010, out cx_119, out dx_120) != 0x0000 l0800_3353
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_334A:
	wArg0A = wArg0A - 0x0001
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_3353:
	cxOut = cx_119
	dxOut = dx_120
	return wArg0A
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_332D:
	cxOut = cx_119
	dxOut = dx_120
	return 0x0001
// DataOut:
// DataOut (flags):
// SymbolicIn:

fn0800_32CD_exit:
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_3312_2:
	Mem191[ss:di_190:byte] = Mem187[ds:si_186:byte]
	si_186 = si_186 + 0x0001
	di_190 = di_190 + 0x0001
	cx_194 = cx_194 - 0x0001
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_32FC_1:
	Mem200[ss:di_199:byte] = Mem71[psegArg08:si_196:byte]
	si_196 = si_196 + 0x0001
	di_199 = di_199 + 0x0001
	cx_203 = cx_203 - 0x0001
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_32F8_2:
	Mem210[ss:di_199:word16] = Mem206[psegArg08:si_196:word16]
	si_196 = si_196 + 0x0002
	di_199 = di_199 + 0x0002
	cx_213 = cx_213 - 0x0001
// DataOut:
// DataOut (flags):
// SymbolicIn:



void fn0800_335C(word16 si, word16 di, selector ds, segptr32 ptrArg02, word16 wArg04)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  di:[0..15] ds:[0..15] si:[0..15] ss:[0..15] Stack +0002:[0..15] Stack +0004:[0..15]
// LiveOut:
// Trashed: SCZDOP ax bx cx dx es Top
// Preserved: bp di ds si sp
fn0800_335C_entry:
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_335C:
	branch fn0800_33CD(ds, fp - 0x0010, ss, 0x0010, wArg02, wArg04, out cx_34, out dx_35) != 0x0000 l0800_33C7
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_337D:
	fn0800_35A3(si, di, fp - 0x001E, ss, wArg02, wArg04)
	word16 si_100 = fp - 0x0010
	word16 di_346 = fp - 0x001E
	word16 ax_119 = 0x0000
	word16 cx_83 = 0xFFFF
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_33A0:
	ax_119 = DPB(ax_119, 0x00, 0) (alias)
	ax_119 = DPB(ax_119, 0x00, 0) (alias)
	branch cx_83 == 0x0000 l0800_33A2
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_33A0_1:
	di_346 = di_346 + 0x0001
	cx_83 = cx_83 - 0x0001
	branch Mem76[ss:di_346:byte] == 0x00 l0800_33A0
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_33A2:
	word16 cx_107 = ~cx_83
	word16 di_96 = di_346 - cx_107
	bool Z_108 = SLICE(cond(di_96), bool, 2)
	di_103 = di_96
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_33A6:
	word16 di_103
	branch cx_107 == 0x0000 l0800_33A8
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_33A6_2:
	Z_108 = SLICE(cond(Mem76[ss:si_347:byte] - Mem76[ss:di_348:byte]), bool, 2) (alias)
	si_100 = si_347 + 0x0001
	di_103 = di_348 + 0x0001
	cx_107 = cx_107 - 0x0001
	si_347 = si_100
	di_348 = di_103
	branch Mem76[ss:si_347:byte] != Mem76[ss:di_348:byte] l0800_33A6
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_33A8:
	branch Z_108 l0800_33AF
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_33AA:
	word16 ax_116 = 0x0000 - (di_96 <u 0x0000)
	ax_119 = ax_116 - 0xFFFF - (ax_116 <u 0x0000)
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_33AF:
	branch ax_119 != 0x0000 l0800_33C7
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_33B4:
	segptr32 ptrArg02_242 = SEQ(wArg04, wArg02)
	selector es_202 = SLICE(ptrArg02_242, selector, 16)
	word16 di_160 = (word16) ptrArg02_242
	word16 si_152 = 0x0A36
	word16 cx_153 = 0xFFFF
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_33BF:
	branch cx_153 == 0x0000 l0800_33C1
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_33BF_1:
	di_160 = di_160 + 0x0001
	cx_153 = cx_153 - 0x0001
	branch Mem76[es_202:di_160:byte] == 0x00 l0800_33BF
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_33C1:
	word16 di_167 = di_160 - 0x0001
	word16 cx_169 = 0x0005
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_33C5:
	branch cx_169 == 0x0000 l0800_33C7
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_33C7:
	return
// DataOut:
// DataOut (flags):
// SymbolicIn:

fn0800_335C_exit:
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_33C5_2:
	Mem190[es_202:di_167:byte] = Mem176[ds:si_152:byte]
	si_152 = si_152 + 0x0001
	di_167 = di_167 + 0x0001
	cx_169 = cx_169 - 0x0001
// DataOut:
// DataOut (flags):
// SymbolicIn:



word16 fn0800_33CD(selector ds, segptr32 ptrArg02, word16 wArg04, word16 wArg06, word16 wArg08, word16 wArg0A, ptr16 & cxOut, ptr16 & dxOut)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  ds:[0..15] Stack +0002:[0..15] Stack +0004:[0..15] Stack +0006:[0..15] Stack +0008:[0..15] Stack +000A:[0..15]
// LiveOut: ax cx dx
// Trashed: SCZDOP ax bx cx dx es Top
// Preserved: bp di ds si sp
fn0800_33CD_entry:
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_33CD:
	word16 cx_32
	word16 dx_33
	branch fn0800_A817(0x4623, ds, SEQ(wArg0A, wArg08), SEQ(ds, 0x4623), wArg06, out cx_32, out dx_33) == 0x0000 l0800_33F1
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_33F1:
	word16 di_50 = 0x0A3B
	word16 si_51 = 0x4641
	word16 cx_52 = 0x0002
	word16 ax_53 = 0x0000
	bool Z_66 = SLICE(cond(0x0000), bool, 2)
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_33FE:
	branch cx_52 == 0x0000 l0800_3400
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_33FE_1:
	Z_66 = SLICE(cond(Mem47[ds:si_472:byte] - Mem47[ds:di_473:byte]), bool, 2) (alias)
	si_51 = si_472 + 0x0001
	di_50 = di_473 + 0x0001
	cx_52 = cx_52 - 0x0001
	si_472 = si_51
	di_473 = di_50
	branch Mem47[ds:si_472:byte] != Mem47[ds:di_473:byte] l0800_33FE
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_3400:
	branch Z_66 l0800_3407
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_3402:
	ax_53 = 0x0001
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_3407:
	branch ax_53 == 0x0000 l0800_3431
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_340B:
	word16 di_108 = 0x0A3D
	word16 si_105 = 0x4641
	word16 cx_103 = 0x0003
	word16 ax_100 = 0x0000
	bool Z_113 = SLICE(cond(0x0000), bool, 2)
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_3418:
	branch cx_103 == 0x0000 l0800_341A
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_3418_1:
	Z_113 = SLICE(cond(Mem94[ds:si_474:byte] - Mem94[ds:di_475:byte]), bool, 2) (alias)
	si_105 = si_474 + 0x0001
	di_108 = di_475 + 0x0001
	cx_103 = cx_103 - 0x0001
	si_474 = si_105
	di_475 = di_108
	branch Mem94[ds:si_474:byte] != Mem94[ds:di_475:byte] l0800_3418
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_341A:
	branch Z_113 l0800_3421
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_341C:
	ax_100 = 0x0001
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_3421:
	branch ax_100 == 0x0000 l0800_3431
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_3425:
	branch ((int16) Mem94[ds:0x4638:byte] & wArg06) == wArg06 l0800_3444
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_3444:
	branch (wArg02 | wArg04) == 0x0000 l0800_3473
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_344C:
	segptr32 ptrArg02_328 = SEQ(wArg04, wArg02)
	selector es_160 = SLICE(ptrArg02_328, selector, 16)
	word16 di_167 = (word16) ptrArg02_328
	word16 di_169 = 0x4641
	word16 cx_173 = 0xFFFF
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_345B:
	branch cx_173 == 0x0000 l0800_345D
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_345B_1:
	di_169 = di_169 + 0x0001
	cx_173 = cx_173 - 0x0001
	branch Mem168[ds:di_169:byte] == 0x00 l0800_345B
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_345D:
	word16 cx_184 = ~cx_173
	word16 cx_187 = cx_184 >>u 0x0001
	word16 si_189 = di_169 - cx_184
	word16 di_195 = di_167
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_346C:
	branch cx_187 == 0x0000 l0800_346E
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_346E:
	cx_103 = cx_187 * 0x0002 + (cx_184 >>u 0x0001 <u 0x0000)
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_3470:
	branch cx_103 == 0x0000 l0800_3472
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_3472:
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_3473:
	cxOut = cx_103
	dxOut = dx_33
	return 0x0000
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_3470_1:
	Mem233[es_160:di_195:byte] = Mem213[ds:si_189:byte]
	si_189 = si_189 + 0x0001
	di_195 = di_195 + 0x0001
	cx_103 = cx_103 - 0x0001
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_346C_2:
	Mem243[es_160:di_195:word16] = Mem239[ds:si_189:word16]
	si_189 = si_189 + 0x0002
	di_195 = di_195 + 0x0002
	cx_187 = cx_187 - 0x0001
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_3431:
	word16 cx_265
	word16 dx_266
	word16 ax_263 = fn0800_3479(ds, wArg02, wArg04, wArg06, out cx_265, out dx_266)
	cxOut = cx_265
	dxOut = dx_266
	return ax_263
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_33EA:
	cxOut = cx_32
	dxOut = dx_33
	return 0x0001
// DataOut:
// DataOut (flags):
// SymbolicIn:

fn0800_33CD_exit:
// DataOut:
// DataOut (flags):
// SymbolicIn:



word16 fn0800_3479(selector ds, segptr32 ptrArg02, word16 wArg04, word16 wArg06, ptr16 & cxOut, ptr16 & dxOut)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  ds:[0..15] Stack +0002:[0..15] Stack +0004:[0..15] Stack +0006:[0..15]
// LiveOut: ax cx dx
// Trashed: SCZDOP ax bx cx dx es Top
// Preserved: bp di ds si sp
fn0800_3479_entry:
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_3479:
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_347E:
	word16 cx_25
	branch fn0800_A84A(0x4623, ds, SEQ(ds, 0x4623), out cx_25, out dx_26) == 0x0000 l0800_3494
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_3494:
	word16 di_43 = 0x0A3B
	word16 si_44 = 0x4641
	word16 cx_45 = 0x0002
	word16 ax_46 = 0x0000
	bool Z_59 = SLICE(cond(0x0000), bool, 2)
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_34A1:
	branch cx_45 == 0x0000 l0800_34A3
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_34A1_1:
	Z_59 = SLICE(cond(Mem40[ds:si_419:byte] - Mem40[ds:di_420:byte]), bool, 2) (alias)
	si_44 = si_419 + 0x0001
	di_43 = di_420 + 0x0001
	cx_45 = cx_45 - 0x0001
	si_419 = si_44
	di_420 = di_43
	branch Mem40[ds:si_419:byte] != Mem40[ds:di_420:byte] l0800_34A1
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_34A3:
	branch Z_59 l0800_34AA
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_34A5:
	ax_46 = 0x0001
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_34AA:
	branch ax_46 == 0x0000 l0800_347E
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_34AE:
	word16 di_101 = 0x0A3D
	word16 si_103 = 0x4641
	word16 cx_105 = 0x0003
	word16 ax_116 = 0x0000
	bool Z_106 = SLICE(cond(0x0000), bool, 2)
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_34BB:
	branch cx_105 == 0x0000 l0800_34BD
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_34BB_1:
	Z_106 = SLICE(cond(Mem87[ds:si_421:byte] - Mem87[ds:di_422:byte]), bool, 2) (alias)
	si_103 = si_421 + 0x0001
	di_101 = di_422 + 0x0001
	cx_105 = cx_105 - 0x0001
	si_421 = si_103
	di_422 = di_101
	branch Mem87[ds:si_421:byte] != Mem87[ds:di_422:byte] l0800_34BB
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_34BD:
	branch Z_106 l0800_34C4
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_34BF:
	ax_116 = 0x0001
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_34C4:
	branch ax_116 == 0x0000 l0800_347E
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_34C8:
	branch ((int16) Mem87[ds:0x4638:byte] & wArg06) != wArg06 l0800_347E
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_34D4:
	branch (wArg02 | wArg04) == 0x0000 l0800_3503
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_34DC:
	segptr32 ptrArg02_284 = SEQ(wArg04, wArg02)
	selector es_154 = SLICE(ptrArg02_284, selector, 16)
	word16 di_161 = (word16) ptrArg02_284
	word16 di_163 = 0x4641
	word16 cx_167 = 0xFFFF
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_34EB:
	branch cx_167 == 0x0000 l0800_34ED
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_34EB_1:
	di_163 = di_163 + 0x0001
	cx_167 = cx_167 - 0x0001
	branch Mem162[ds:di_163:byte] == 0x00 l0800_34EB
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_34ED:
	word16 cx_178 = ~cx_167
	word16 cx_181 = cx_178 >>u 0x0001
	word16 si_183 = di_163 - cx_178
	word16 di_189 = di_161
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_34FC:
	branch cx_181 == 0x0000 l0800_34FE
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_34FE:
	cx_105 = cx_181 * 0x0002 + (cx_178 >>u 0x0001 <u 0x0000)
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_3500:
	branch cx_105 == 0x0000 l0800_3502
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_3502:
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_3503:
	cxOut = cx_105
	dxOut = <invalid>
	return 0x0000
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_3500_1:
	Mem227[es_154:di_189:byte] = Mem207[ds:si_183:byte]
	si_183 = si_183 + 0x0001
	di_189 = di_189 + 0x0001
	cx_105 = cx_105 - 0x0001
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_34FC_2:
	Mem237[es_154:di_189:word16] = Mem233[ds:si_183:word16]
	si_183 = si_183 + 0x0002
	di_189 = di_189 + 0x0002
	cx_181 = cx_181 - 0x0001
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_348D:
	cxOut = cx_25
	dxOut = <invalid>
	return 0x0001
// DataOut:
// DataOut (flags):
// SymbolicIn:

fn0800_3479_exit:
// DataOut:
// DataOut (flags):
// SymbolicIn:



word16 fn0800_3509(word16 si, word16 di, word16 wArg02, selector psegArg04, word16 wArg06, word16 wArg08, ptr16 & bxOut)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  di:[0..15] si:[0..15] ss:[0..15] Stack +0002:[0..15] Stack +0004:[0..15] Stack +0006:[0..15] Stack +0008:[0..15]
// LiveOut: bx dx
// Trashed: SCZDO ax bx dx es Top
// Preserved: bp di ds si sp
fn0800_3509_entry:
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_3509:
	word16 bx_44 = fn0800_BE3B(si, di, wArg06, wArg08, fp - 0x0006, ss, fp - 0x005A, ss, fp - 0x0010, ss, fp - 0x0016, ss)
	word16 di_391 = fp - 0x0006
	word16 cx_81 = 0xFFFF
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_354B:
	branch cx_81 == 0x0000 l0800_354D
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_354B_1:
	di_391 = di_391 + 0x0001
	cx_81 = cx_81 - 0x0001
	branch Mem77[ss:di_391:byte] == 0x00 l0800_354B
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_354D:
	word16 cx_92 = ~cx_81
	word16 cx_115 = cx_92 >>u 0x0001
	word16 si_229 = di_391 - cx_92
	word16 di_103 = wArg02
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_355C:
	branch cx_115 == 0x0000 l0800_355E
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_355E:
	word16 cx_117 = cx_115 * 0x0002 + (cx_92 >>u 0x0001 <u 0x0000)
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_3560:
	branch cx_117 == 0x0000 l0800_3562
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_3562:
	word16 di_138 = fp - 0x005A
	word16 cx_150 = 0xFFFF
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_357D:
	branch cx_150 == 0x0000 l0800_357F
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_357D_1:
	di_138 = di_138 + 0x0001
	cx_150 = cx_150 - 0x0001
	branch Mem146[ss:di_138:byte] == 0x00 l0800_357D
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_357F:
	word16 cx_161 = ~cx_150
	word16 si_164 = di_138 - cx_161
	word16 di_170 = wArg02
	word16 cx_184 = 0xFFFF
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_3594:
	branch cx_184 == 0x0000 l0800_3596
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_3594_2:
	di_170 = di_170 + 0x0001
	cx_184 = cx_184 - 0x0001
	branch Mem183[psegArg04:di_170:byte] == 0x00 l0800_3594
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_3596:
	word16 di_198 = di_170 - 0x0001
	word16 cx_205 = cx_161
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_3598:
	branch cx_205 == 0x0000 l0800_359A
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_359A:
	bxOut = bx_44
	return psegArg04
// DataOut:
// DataOut (flags):
// SymbolicIn:

fn0800_3509_exit:
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_3598_3:
	Mem224[psegArg04:di_198:byte] = Mem210[ss:si_164:byte]
	si_164 = si_164 + 0x0001
	di_198 = di_198 + 0x0001
	cx_205 = cx_205 - 0x0001
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_3560_1:
	Mem233[psegArg04:di_103:byte] = Mem122[ss:si_229:byte]
	si_229 = si_229 + 0x0001
	di_103 = di_103 + 0x0001
	cx_117 = cx_117 - 0x0001
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_355C_2:
	Mem243[psegArg04:di_103:word16] = Mem239[ss:si_229:word16]
	si_229 = si_229 + 0x0002
	di_103 = di_103 + 0x0002
	cx_115 = cx_115 - 0x0001
// DataOut:
// DataOut (flags):
// SymbolicIn:



void fn0800_35A3(word16 si, word16 di, word16 wArg02, selector psegArg04, word16 wArg06, word16 wArg08)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  di:[0..15] si:[0..15] ss:[0..15] Stack +0002:[0..15] Stack +0004:[0..15] Stack +0006:[0..15] Stack +0008:[0..15]
// LiveOut:
// Trashed: SCZDO ax bx dx es Top
// Preserved: bp di ds si sp
fn0800_35A3_entry:
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_35A3:
	fn0800_BE3B(si, di, wArg06, wArg08, fp - 0x0006, ss, fp - 0x005A, ss, fp - 0x0010, ss, fp - 0x0016, ss)
	word16 di_390 = fp - 0x0010
	word16 cx_81 = 0xFFFF
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_35E5:
	branch cx_81 == 0x0000 l0800_35E7
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_35E5_1:
	di_390 = di_390 + 0x0001
	cx_81 = cx_81 - 0x0001
	branch Mem77[ss:di_390:byte] == 0x00 l0800_35E5
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_35E7:
	word16 cx_92 = ~cx_81
	word16 cx_115 = cx_92 >>u 0x0001
	word16 si_229 = di_390 - cx_92
	word16 di_103 = wArg02
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_35F6:
	branch cx_115 == 0x0000 l0800_35F8
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_35F8:
	word16 cx_117 = cx_115 * 0x0002 + (cx_92 >>u 0x0001 <u 0x0000)
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_35FA:
	branch cx_117 == 0x0000 l0800_35FC
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_35FC:
	word16 di_138 = fp - 0x0016
	word16 cx_150 = 0xFFFF
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_3617:
	branch cx_150 == 0x0000 l0800_3619
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_3617_1:
	di_138 = di_138 + 0x0001
	cx_150 = cx_150 - 0x0001
	branch Mem146[ss:di_138:byte] == 0x00 l0800_3617
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_3619:
	word16 cx_161 = ~cx_150
	word16 si_164 = di_138 - cx_161
	word16 di_170 = wArg02
	word16 cx_184 = 0xFFFF
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_362E:
	branch cx_184 == 0x0000 l0800_3630
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_362E_2:
	di_170 = di_170 + 0x0001
	cx_184 = cx_184 - 0x0001
	branch Mem183[psegArg04:di_170:byte] == 0x00 l0800_362E
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_3630:
	word16 di_198 = di_170 - 0x0001
	word16 cx_205 = cx_161
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_3632:
	branch cx_205 == 0x0000 l0800_3634
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_3634:
	return
// DataOut:
// DataOut (flags):
// SymbolicIn:

fn0800_35A3_exit:
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_3632_3:
	Mem224[psegArg04:di_198:byte] = Mem210[ss:si_164:byte]
	si_164 = si_164 + 0x0001
	di_198 = di_198 + 0x0001
	cx_205 = cx_205 - 0x0001
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_35FA_1:
	Mem233[psegArg04:di_103:byte] = Mem122[ss:si_229:byte]
	si_229 = si_229 + 0x0001
	di_103 = di_103 + 0x0001
	cx_117 = cx_117 - 0x0001
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_35F6_2:
	Mem243[psegArg04:di_103:word16] = Mem239[ss:si_229:word16]
	si_229 = si_229 + 0x0002
	di_103 = di_103 + 0x0002
	cx_115 = cx_115 - 0x0001
// DataOut:
// DataOut (flags):
// SymbolicIn:



word16 fn0800_363D(selector ds, segptr32 ptrArg02, word16 wArg06, word16 wArg08, ptr16 & dxOut)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  ds:[0..15] ss:[0..15] Stack +0002:[0..31] Stack +0006:[0..15] Stack +0008:[0..15]
// LiveOut: cx dx
// Trashed: SCZDOP ax bx cx dx es Top
// Preserved: bp sp
fn0800_363D_entry:
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_363D:
	branch fn0800_A817(fp - 0x002E, ds, SEQ(wArg08, wArg06), SEQ(ss, fp - 0x002E), 0x0000, out cx_29, out dx_30) == 0x0000 l0800_3662
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_3662:
	Mem47[ptrArg02:word16] = wLoc18
	Mem49[ptrArg02 + 0x0002:word16] = wLoc16
	return
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_365B:
	return
// DataOut:
// DataOut (flags):
// SymbolicIn:

fn0800_363D_exit:
// DataOut:
// DataOut (flags):
// SymbolicIn:



word16 fn0800_3678(selector ds, segptr32 ptrArg02, word16 wArg04, ptr16 & dxOut, ptr16 & siOut, ptr16 & dsOut)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  ds:[0..15] ss:[0..15] Stack +0002:[0..15] Stack +0004:[0..15]
// LiveOut: cx ds dx si
// Trashed: SCZO ax bx cx ds dx es si Top
// Preserved: DP bp di sp
fn0800_3678_entry:
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_3678:
	segptr32 ptrArg02_308 = SEQ(wArg04, wArg02)
	selector es_274 = SLICE(ptrArg02_308, selector, 16)
	word16 di_25 = (word16) ptrArg02_308
	word16 cx_21 = 0xFFFF
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_3693:
	branch cx_21 == 0x0000 l0800_3695
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_3693_1:
	di_25 = di_25 + 0x0001
	cx_21 = cx_21 - 0x0001
	branch Mem16[es_274:di_25:byte] == 0x00 l0800_3693
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_3695:
	word16 cx_32 = ~cx_21
	word16 di_35 = di_25 - cx_32
	bool Z_45 = SLICE(cond(di_35), bool, 2)
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_369C:
	branch cx_32 == 0x0000 l0800_369E
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_369C_2:
	Z_45 = SLICE(cond(0x5C - Mem16[es_274:di_35:byte]), bool, 2) (alias)
	di_35 = di_35 + 0x0001
	cx_32 = cx_32 - 0x0001
	branch Mem16[es_274:di_35:byte] == 0x5C l0800_369C
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_369E:
	branch Z_45 l0800_36A7
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_36A0:
	di_35 = 0x0001
	es_274 = 0x0000
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_36A7:
	segptr32 ptrLoc0A_321
	word16 wLoc06_327
	word16 di_56 = di_35 - 0x0001
	branch (di_56 | es_274) == 0x0000 l0800_3732
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_36B6:
	branch es_274 != wArg04 l0800_36C6
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_36C1:
	wLoc08_493 = ptrLoc0A_321
	branch di_56 == wArg02 l0800_36D0
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_36C6:
	ptrLoc0A_321 = SEQ(es_274, di_56) (alias)
	ptrLoc0A_321 = SEQ(es_274, di_56) (alias)
	wLoc08_494 = ptrLoc0A_321
	branch Mem71[ptrLoc0A_321 - 0x0001:byte] != 0x3A l0800_3732
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_36D0:
	wLoc06_327 = ptrLoc0A_321 + 0x0001
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_3732:
	segptr32 ptrLoc06_328
	selector es_139 = SLICE(ptrLoc06_328, selector, 16)
	word16 di_111 = (word16) ptrLoc06_328
	word16 cx_107 = 0xFFFF
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_373A:
	branch cx_107 == 0x0000 l0800_373C
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_373A_1:
	di_111 = di_111 + 0x0001
	cx_107 = cx_107 - 0x0001
	branch Mem102[es_139:di_111:byte] == 0x00 l0800_373A
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_373C:
	word16 cx_118 = ~cx_107
	word16 di_121 = di_111 - cx_118
	bool Z_131 = SLICE(cond(di_121), bool, 2)
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_3743:
	branch cx_118 == 0x0000 l0800_3745
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_3743_2:
	Z_131 = SLICE(cond(0x5C - Mem102[es_139:di_121:byte]), bool, 2) (alias)
	di_121 = di_121 + 0x0001
	cx_118 = cx_118 - 0x0001
	branch Mem102[es_139:di_121:byte] == 0x5C l0800_3743
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_3745:
	branch Z_131 l0800_374E
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_3747:
	di_121 = 0x0001
	es_139 = 0x0000
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_374E:
	segptr32 ptrLoc0A_331
	word16 di_142 = di_121 - 0x0001
	word16 dx_159 = di_142 | es_139
	branch dx_159 != 0x0000 l0800_36DF
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_36DF:
	ptrLoc0A_331 = SEQ(es_139, di_142) (alias)
	Mem166[ptrLoc0A_331:byte] = 0x00
	word16 ax_195 = fn0800_33CD(ds, 0x0000, 0x0000, 0x0010, wArg02, wArg04, out cx_482, out dx_483)
	branch ax_195 == 0x0000 l0800_371E
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_36FE:
	branch fn0800_8E52(ax_195, ds, SEQ(wArg04, wArg02)) == 0x0000 l0800_371E
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_370E:
	// Failed to bind call argument.
	// Please report this issue at https://github.com/uxmal/reko
	word16 stackArg6 = <invalid>
	fn0800_0D24(ds, 0x000E, SEQ(wArg04, wArg02), stackArg6, out cx_485, out dx_486, out bx_487, out si, out di_488, out es_489, out ds, out Top_490)
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_371E:
	Mem259[ptrLoc0A_331:byte] = 0x5C
	ptrLoc06_328 = ptrLoc06_395
	Mem102 = Mem265
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_375D:
	dxOut = dx_159
	siOut = si
	dsOut = ds
	ptrLoc06_328 = SEQ(wArg04, wArg02) (alias)
	ptrLoc06_328 = SEQ(ptrLoc0A_321, wLoc06_327) (alias)
	ptrLoc06_395 = SEQ(ptrLoc0A_331, ptrLoc0A_331 + 0x0001) (alias)
	return cx_118
// DataOut:
// DataOut (flags):
// SymbolicIn:

fn0800_3678_exit:
// DataOut:
// DataOut (flags):
// SymbolicIn:



void fn0800_3764(word16 si, word16 di, selector ds)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  di:[0..15] ds:[0..15] si:[0..15] ss:[0..15]
// LiveOut:
// Trashed: SCZO ax bx cx dx es Top
// Preserved: D di ds si sp
fn0800_3764_entry:
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_3764:
	branch Mem10[ds:0x427E:byte] == 0x00 l0800_3796
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_3796:
	fn0800_3509(si, di, 0x44DC, ds, 0x4541, ds, out bx_25)
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_376D:
	word16 di_252 = 0x427E
	word16 cx_49 = 0xFFFF
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_377C:
	branch cx_49 == 0x0000 l0800_377E
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_377C_1:
	di_252 = di_252 + 0x0001
	cx_49 = cx_49 - 0x0001
	branch Mem44[ds:di_252:byte] == 0x00 l0800_377C
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_377E:
	word16 cx_60 = ~cx_49
	word16 cx_153 = cx_60 >>u 0x0001
	word16 si_136 = di_252 - cx_60
	word16 di_139 = 0x44DC
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_378D:
	branch cx_153 == 0x0000 l0800_378F
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_378F:
	word16 cx_143 = cx_153 * 0x0002 + (cx_60 >>u 0x0001 <u 0x0000)
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_3791:
	branch cx_143 == 0x0000 l0800_3793
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_3793:
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_37A6:
	word16 di_108 = 0x44DC
	word16 si_100 = 0x0A40
	word16 cx_101 = 0xFFFF
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_37B3:
	branch cx_101 == 0x0000 l0800_37B5
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_37B3_1:
	di_108 = di_108 + 0x0001
	cx_101 = cx_101 - 0x0001
	branch Mem96[ds:di_108:byte] == 0x00 l0800_37B3
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_37B5:
	word16 di_115 = di_108 - 0x0001
	word16 cx_117 = 0x000D
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_37B9:
	branch cx_117 == 0x0000 l0800_37BB
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_37BB:
	return
// DataOut:
// DataOut (flags):
// SymbolicIn:

fn0800_3764_exit:
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_37B9_2:
	Mem131[ds:di_115:byte] = Mem121[ds:si_100:byte]
	si_100 = si_100 + 0x0001
	di_115 = di_115 + 0x0001
	cx_117 = cx_117 - 0x0001
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_3791_1:
	Mem140[ds:di_139:byte] = Mem89[ds:si_136:byte]
	si_136 = si_136 + 0x0001
	di_139 = di_139 + 0x0001
	cx_143 = cx_143 - 0x0001
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_378D_2:
	Mem150[ds:di_139:word16] = Mem146[ds:si_136:word16]
	si_136 = si_136 + 0x0002
	di_139 = di_139 + 0x0002
	cx_153 = cx_153 - 0x0001
// DataOut:
// DataOut (flags):
// SymbolicIn:



word16 fn0800_37BE(word16 cx, word16 dx, selector ds, word16 wArg02, word16 wArg04, word16 wArg06, word16 wArg08, ptr16 & diOut)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  cx:[0..15] ds:[0..15] dx:[0..15] ss:[0..15] Stack +0002:[0..15] Stack +0004:[0..15]
// LiveOut: di si
// Trashed: SCZDO ax bx di es si Top
// Preserved: bp sp
fn0800_37BE_entry:
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_37BE:
	word16 di_36
	word16 si_38 = fn0800_BEA2(cx, dx, ds, SEQ(wArg04, wArg02), 0x0A2B, ds, out di_36)
	diOut = di_36
	return si_38
// DataOut:
// DataOut (flags):
// SymbolicIn:

fn0800_37BE_exit:
// DataOut:
// DataOut (flags):
// SymbolicIn:



word16 fn0800_37DF(word16 si, word16 di, selector ds, ptr16 & diOut, ptr16 & dsOut)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  di:[0..15] ds:[0..15] si:[0..15] ss:[0..15]
// LiveOut: di ds si sp
// Trashed: SCZDO ax bp bx cx di ds dx es si sp Top
// Preserved:
fn0800_37DF_entry:
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_37DF:
	fn0800_3509(si, di, fp - 0x006C, ss, 0x44DC, ds, out bx_326)
	selector es_44 = ss
	word16 di_339 = fp - 0x006C
	word16 cx_50 = 0xFFFF
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_3805:
	branch cx_50 == 0x0000 l0800_3807
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_3805_1:
	di_339 = di_339 + 0x0001
	cx_50 = cx_50 - 0x0001
	branch Mem43[ss:di_339:byte] == 0x00 l0800_3805
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_3807:
	word16 cx_61 = ~cx_50
	word16 di_340 = di_339 - cx_61
	bool Z_74 = SLICE(cond(di_340), bool, 2)
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_380D:
	branch cx_61 == 0x0000 l0800_380F
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_380D_2:
	Z_74 = SLICE(cond(0x00 - Mem43[ss:di_340:byte]), bool, 2) (alias)
	di_340 = di_340 + 0x0001
	cx_61 = cx_61 - 0x0001
	branch Mem43[ss:di_340:byte] == 0x00 l0800_380D
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_380F:
	branch Z_74 l0800_3818
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_3811:
	di_340 = 0x0001
	es_44 = 0x0000
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_3818:
	word16 di_85 = di_340 - 0x0001
	fn0800_35A3(si, di_85, di_85, es_44, 0x4541, ds)
	word16 dx_147
	word16 sp_150
	word16 si_149
	word16 bp_142
	selector ds_146
	word16 ax_141 = fn0800_AA7E(si, di_85, ds, fp - 0x006C, ss, 0x0A4D, ds, out cx_144, out dx_147, out bp_142, out si_149, out di_327, out ds_146)
	Mem156[ss:bp_142 - 0x0002:word16] = dx_147
	Mem157[ss:bp_142 - 0x0004:word16] = ax_141
	word16 sp_155 = sp_150 + 0x0008
	branch (ax_141 | dx_147) == 0x0000 l0800_3863
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_383D:
	Mem164[ss:sp_150 + 0x0006:word16] = Mem157[ss:bp_142 - 0x0002:word16]
	Mem167[ss:sp_150 + 0x0004:word16] = Mem164[ss:bp_142 - 0x0004:word16]
	// Failed to bind call argument.
	// Please report this issue at https://github.com/uxmal/reko
	word16 stackArg4 = <invalid>
	word16 sp_172
	fn0800_A614(ds_146, Mem167[ss:sp_150 + 0x0004:segptr32], stackArg4, out cx_329, out dx_330, out bp_142, out si_149, out di_331, out ds_146)
	Mem186[ss:sp_172 + 0x0002:word16] = 0x0180
	Mem188[ss:sp_172:word16] = ss
	Mem191[ss:sp_172 - 2:word16] = bp_142 - 0x006A
	fn0800_A4F6(ds_146, Mem191[ss:sp_172 - 2:word16], Mem191[ss:sp_172:word16], Mem191[ss:sp_172 + 2:word16])
	Mem202[ss:sp_172 + 0x0002:word16] = ss
	Mem205[ss:sp_172:word16] = bp_142 - 0x006A
	fn0800_8F7F(bp_142 - 0x006A, ds_146, Mem205[ss:sp_172:segptr32])
	sp_155 = sp_172 + 0x0004
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_3863:
	word16 sp_215 = sp_155 - 2
	Mem217[ss:sp_215:word16] = ss
	Mem221[ss:sp_215 - 2:word16] = bp_142 - 0x006A
	Mem224[ss:sp_215 - 4:word16] = ds_146
	Mem227[ss:sp_215 - 6:word16] = 0x44DC
	branch fn0800_BA4A(ds_146, Mem227[ss:sp_215 - 6:segptr32], Mem227[ss:sp_215 - 2:segptr32]) != 0xFFFF l0800_3887
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_3878:
	Mem239[ss:sp_215:word16] = ds_146
	Mem242[ss:sp_215 - 2:word16] = 0x44DC
	Mem245[ss:sp_215 - 4:word16] = 0x000A
	// Failed to bind call argument.
	// Please report this issue at https://github.com/uxmal/reko
	word16 stackArg6 = <invalid>
	fn0800_0D24(ds_146, Mem245[ss:sp_215 - 4:word16], Mem245[ss:sp_215 - 2:segptr32], stackArg6, out cx_333, out dx_334, out bx_335, out si_149, out di_336, out es_337, out ds_146, out Top_338)
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_3887:
	diOut = Mem264[ss:sp_155:word16]
	dsOut = ds_146
	return si_149
// DataOut:
// DataOut (flags):
// SymbolicIn:

fn0800_37DF_exit:
// DataOut:
// DataOut (flags):
// SymbolicIn:



word16 fn0800_388C(word16 si, word16 di, selector ds, ptr16 & cxOut, ptr16 & dxOut, ptr16 & bpOut, ptr16 & siOut, ptr16 & diOut, ptr16 & dsOut)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  di:[0..15] ds:[0..15] si:[0..15] ss:[0..15]
// LiveOut: ax bp cx di ds dx si sp
// Trashed: SCZDOP ax bp bx cx di ds dx es si sp Top
// Preserved:
fn0800_388C_entry:
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_388C:
	word16 di_28
	selector ds_29
	word16 dx_30
	word16 si_32
	word16 sp_33
	word16 ax_24 = fn0800_4234(si, di, ds, 0x4541, ds, 0x0A13, ds, out cx_294, out dx_30, out bp_295, out si_32, out di_28, out ds_29)
	Mem41[ds_29:0x29E5:word16] = dx_30
	Mem42[ds_29:0x29E3:word16] = ax_24
	Mem44[ss:sp_33 + 0x0006:word16] = ds_29
	Mem47[ss:sp_33 + 0x0004:word16] = 0x0A50
	Mem49[ss:sp_33 + 0x0002:word16] = ds_29
	Mem52[ss:sp_33:word16] = 0x44DC
	word16 bp_54
	word16 di_57
	selector ds_58
	word16 dx_59
	word16 si_61
	word16 sp_62
	word16 ax_53 = fn0800_4234(si_32, di_28, ds_29, Mem52[ss:sp_33:word16], Mem52[ss:sp_33 + 2:word16], Mem52[ss:sp_33 + 4:word16], Mem52[ss:sp_33 + 6:word16], out cx_296, out dx_59, out bp_54, out si_61, out di_57, out ds_58)
	Mem70[ds_58:0x29E1:word16] = dx_59
	Mem71[ds_58:0x29DF:word16] = ax_53
	Mem73[ss:sp_62 + 0x0006:word16] = ds_58
	Mem76[ss:sp_62 + 0x0004:word16] = 0x44DC
	Mem78[ss:sp_62 + 0x0002:word16] = ss
	Mem81[ss:sp_62:word16] = bp_54 - 0x0004
	word16 dx_85
	word16 cx_84 = fn0800_363D(ds_58, Mem81[ss:sp_62:segptr32], Mem81[ss:sp_62 + 4:word16], Mem81[ss:sp_62 + 6:word16], out dx_85)
	branch Mem81[ds_58:0x0A12:byte] != 0x00 l0800_38EF
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_38EF:
	Mem97[ss:sp_62 + 0x0006:word16] = ds_58
	Mem100[ss:sp_62 + 0x0004:word16] = 0x4541
	Mem102[ss:sp_62 + 0x0002:word16] = ss
	Mem105[ss:sp_62:word16] = bp_54 - 0x0008
	word16 dx_109
	word16 cx_108 = fn0800_363D(ds_58, Mem105[ss:sp_62:segptr32], Mem105[ss:sp_62 + 4:word16], Mem105[ss:sp_62 + 6:word16], out dx_109)
	Mem120[ss:sp_62 + 0x0006:word16] = ds_58
	Mem123[ss:sp_62 + 0x0004:word16] = 0x461F
	Mem125[ss:sp_62 + 0x0002:word16] = ss
	Mem128[ss:sp_62:word16] = bp_54 - 0x0008
	branch fn0800_395B(Mem128[ss:sp_62:segptr32], Mem128[ss:sp_62 + 4:segptr32]) < 0x0000 l0800_3927
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_3913:
	Mem142[ss:sp_62 + 0x0006:word16] = ss
	Mem145[ss:sp_62 + 0x0004:word16] = bp_54 - 0x0004
	Mem147[ss:sp_62 + 0x0002:word16] = ss
	Mem150[ss:sp_62:word16] = bp_54 - 0x0008
	branch fn0800_395B(Mem150[ss:sp_62:segptr32], Mem150[ss:sp_62 + 4:segptr32]) <= 0x0000 l0800_392E
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_392E:
	Mem164[ss:sp_62 + 0x0006:word16] = Mem150[ds_58:0x29E5:word16]
	Mem167[ss:sp_62 + 0x0004:word16] = Mem164[ds_58:0x29E3:word16]
	// Failed to bind call argument.
	// Please report this issue at https://github.com/uxmal/reko
	word16 stackArg4 = <invalid>
	word16 sp_172
	selector ds_177
	fn0800_A614(ds_58, Mem167[ss:sp_62 + 0x0004:segptr32], stackArg4, out cx_298, out dx_299, out bp_300, out si_301, out di_302, out ds_177)
	Mem186[ss:sp_172 + 0x0002:word16] = Mem167[ds_177:0x29E1:word16]
	Mem189[ss:sp_172:word16] = Mem186[ds_177:0x29DF:word16]
	// Failed to bind call argument.
	// Please report this issue at https://github.com/uxmal/reko
	word16 stackArg4 = <invalid>
	word16 bp_191
	word16 sp_194
	word16 cx_195
	word16 di_196
	word16 si_198
	selector ds_199
	fn0800_A614(ds_177, Mem189[ss:sp_172:segptr32], stackArg4, out cx_195, out dx_304, out bp_191, out si_198, out di_196, out ds_199)
	Mem207[ss:sp_194 + 0x0002:word16] = ds_199
	Mem210[ss:sp_194:word16] = 0x44DC
	word16 dx_212 = fn0800_8F7F(0x44DC, ds_199, Mem210[ss:sp_194:segptr32])
	word16 bp_222 = Mem210[ss:bp_191:word16]
	cxOut = cx_195
	dxOut = dx_212
	bpOut = bp_222
	siOut = si_198
	diOut = di_196
	dsOut = ds_199
	return 0x0000
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_3927:
	word16 bp_229 = Mem228[ss:bp_54:word16]
	cxOut = cx_108
	dxOut = dx_109
	bpOut = bp_229
	siOut = si_61
	diOut = di_57
	dsOut = ds_58
	return 0x0001
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_38D7:
	Mem232[ds_58:0x4621:word16] = Mem81[ss:bp_54 - 0x0002:word16]
	Mem234[ds_58:0x461F:word16] = Mem232[ss:bp_54 - 0x0004:word16]
	Mem235[ds_58:0x0A12:byte] = 0x01
	word16 bp_238 = Mem235[ss:bp_54:word16]
	cxOut = cx_84
	dxOut = dx_85
	bpOut = bp_238
	siOut = si_61
	diOut = di_57
	dsOut = ds_58
	return 0x0001
// DataOut:
// DataOut (flags):
// SymbolicIn:

fn0800_388C_exit:
// DataOut:
// DataOut (flags):
// SymbolicIn:



word16 fn0800_395B(segptr32 ptrArg02, segptr32 ptrArg06)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  Stack +0002:[0..31] Stack +0006:[0..31]
// LiveOut: ax
// Trashed: SCZO ax bx es Top
// Preserved: bp sp
fn0800_395B_entry:
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_395B:
	word16 ax_13 = Mem7[ptrArg02 + 0x0002:word16]
	branch ax_13 != Mem14[ptrArg06 + 0x0002:word16] l0800_3984
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_3984:
	return ax_13 - Mem14[ptrArg06 + 0x0002:word16]
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_3974:
	return Mem14[ptrArg02:word16] - Mem14[ptrArg06:word16]
// DataOut:
// DataOut (flags):
// SymbolicIn:

fn0800_395B_exit:
// DataOut:
// DataOut (flags):
// SymbolicIn:



word16 fn0800_3992(word16 si, word16 di, selector ds, ptr16 & dxOut, ptr16 & bpOut, ptr16 & siOut, ptr16 & dsOut)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  di:[0..15] ds:[0..15] si:[0..15] ss:[0..15]
// LiveOut: ax bp ds dx si sp
// Trashed: SCZO ax bp bx cx di ds dx es si sp Top
// Preserved: DP
fn0800_3992_entry:
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_3992:
	branch Mem12[ds:0x427E:byte] == 0x00 l0800_39AE
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_39A0:
	branch Mem12[ds:0x2A23:word16] != 0x0001 l0800_39AE
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_39A7:
	branch Mem12[ds:0x2A17:word16] != 0x0000 l0800_39B5
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_39B5:
	fn0800_3509(si, di, fp - 0x0074, ss, 0x44DC, ds, out bx_619)
	selector es_49 = ss
	word16 di_51 = fp - 0x0074
	word16 cx_55 = 0xFFFF
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_39D4:
	branch cx_55 == 0x0000 l0800_39D6
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_39D4_1:
	di_51 = di_51 + 0x0001
	cx_55 = cx_55 - 0x0001
	branch Mem48[ss:di_51:byte] == 0x00 l0800_39D4
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_39D6:
	word16 cx_66 = ~cx_55
	word16 di_651 = di_51 - cx_66
	bool Z_79 = SLICE(cond(di_651), bool, 2)
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_39DC:
	branch cx_66 == 0x0000 l0800_39DE
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_39DC_2:
	Z_79 = SLICE(cond(0x00 - Mem48[ss:di_651:byte]), bool, 2) (alias)
	di_651 = di_651 + 0x0001
	cx_66 = cx_66 - 0x0001
	branch Mem48[ss:di_651:byte] == 0x00 l0800_39DC
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_39DE:
	branch Z_79 l0800_39E7
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_39E0:
	di_651 = 0x0001
	es_49 = 0x0000
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_39E7:
	word16 di_90 = di_651 - 0x0001
	fn0800_35A3(si, di_90, di_90, es_49, 0x4541, ds)
	word16 bp_147
	selector ds_151
	word16 dx_152
	word16 si_154
	word16 sp_155
	word16 ax_146 = fn0800_AA7E(si, di_90, ds, fp - 0x0074, ss, 0x0A4D, ds, out cx_620, out dx_152, out bp_147, out si_154, out di_621, out ds_151)
	Mem161[ss:bp_147 - 0x0002:word16] = dx_152
	Mem162[ss:bp_147 - 0x0004:word16] = ax_146
	word16 ax_163 = ax_146 | dx_152
	branch ax_163 != 0x0000 l0800_3A13
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_3A13:
	Mem169[ss:sp_155 + 0x0006:word16] = Mem162[ss:bp_147 - 0x0002:word16]
	Mem172[ss:sp_155 + 0x0004:word16] = Mem169[ss:bp_147 - 0x0004:word16]
	fn0800_4194(ds_151, Mem172[ss:sp_155 + 0x0004:word16], Mem172[ss:sp_155 + 0x0006:word16])
	branch dx_152 >u 0x0000 l0800_3A3D
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_3A23:
	branch dx_152 != 0x0000 l0800_3A2A
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_3A25:
	branch ax_163 >u 0x0012 l0800_3A3D
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_3A3D:
	Mem194[ss:sp_155 + 0x0006:word16] = Mem172[ss:bp_147 - 0x0002:word16]
	Mem197[ss:sp_155 + 0x0004:word16] = Mem194[ss:bp_147 - 0x0004:word16]
	selector ds_202
	word16 dx_203
	fn0800_3E5D(ds_151, Mem197[ss:sp_155 + 0x0004:word16], Mem197[ss:sp_155 + 0x0006:word16], out dx_203, out di_622, out es_623, out ds_202, out Top_624)
	// Failed to bind call argument.
	// Please report this issue at https://github.com/uxmal/reko
	word16 stackArg0 = <invalid>
	word16 dx_217
	word16 sp_218
	word16 ax_214 = fn0800_8CAA(ax_163, 0x08, dx_203, stackArg0, out cl_626, out dx_217)
	branch dx_217 != 0x0052 l0800_3A58
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_3A53:
	branch ax_214 == 0x4E43 l0800_3A6B
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_3A6B:
	Mem229[ss:sp_218 - 2:word16] = Mem197[ss:bp_147 - 0x0002:word16]
	Mem232[ss:sp_218 - 4:word16] = Mem229[ss:bp_147 - 0x0004:word16]
	selector ds_236
	word16 dx_237
	fn0800_3E5D(ds_202, Mem232[ss:sp_218 - 4:word16], Mem232[ss:sp_218 - 2:word16], out dx_237, out di_633, out es_634, out ds_236, out Top_635)
	branch dx_237 != Mem232[ds_236:0x2A09:word16] l0800_3A83
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_3A7D:
	branch ax_214 == Mem232[ds_236:0x2A07:word16] l0800_3A96
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_3A96:
	Mem250[ss:sp_218 - 2:word16] = ss
	Mem253[ss:sp_218 - 4:word16] = bp_147 - 0x0072
	Mem255[ss:sp_218 - 6:word16] = ss
	Mem258[ss:sp_218 - 8:word16] = bp_147 - 0x000C
	fn0800_363D(ds_236, Mem258[ss:sp_218 - 8:segptr32], Mem258[ss:sp_218 - 4:word16], Mem258[ss:sp_218 - 2:word16], out dx_639)
	Mem273[ss:sp_218 - 2:word16] = ds_236
	Mem276[ss:sp_218 - 4:word16] = 0x4541
	Mem278[ss:sp_218 - 6:word16] = ss
	Mem281[ss:sp_218 - 8:word16] = bp_147 - 0x0008
	fn0800_363D(ds_236, Mem281[ss:sp_218 - 8:segptr32], Mem281[ss:sp_218 - 4:word16], Mem281[ss:sp_218 - 2:word16], out dx_640)
	Mem296[ss:sp_218 - 2:word16] = ss
	Mem299[ss:sp_218 - 4:word16] = bp_147 - 0x0008
	Mem301[ss:sp_218 - 6:word16] = ss
	Mem304[ss:sp_218 - 8:word16] = bp_147 - 0x000C
	word16 ax_305 = fn0800_395B(Mem304[ss:sp_218 - 8:segptr32], Mem304[ss:sp_218 - 4:segptr32])
	branch ax_305 >= 0x0000 l0800_3ADD
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_3ADD:
	Mem319[ss:sp_218 - 2:word16] = Mem304[ss:bp_147 - 0x0002:word16]
	Mem322[ss:sp_218 - 4:word16] = Mem319[ss:bp_147 - 0x0004:word16]
	selector ds_326
	word16 dx_327
	fn0800_3E5D(ds_236, Mem322[ss:sp_218 - 4:word16], Mem322[ss:sp_218 - 2:word16], out dx_327, out di_641, out es_642, out ds_326, out Top_643)
	Mem340[ds_326:0x2A05:word16] = dx_327 + (ax_305 <u 0x0012)
	Mem341[ds_326:0x2A03:word16] = ax_305 + 0x0012
	Mem344[ss:sp_218 - 2:word16] = Mem341[ss:bp_147 - 0x0002:word16]
	Mem347[ss:sp_218 - 4:word16] = Mem344[ss:bp_147 - 0x0004:word16]
	// Failed to bind call argument.
	// Please report this issue at https://github.com/uxmal/reko
	word16 stackArg4 = <invalid>
	word16 bp_349
	word16 dx_355
	word16 si_356
	selector ds_357
	fn0800_A614(ds_326, Mem347[ss:sp_218 - 4:segptr32], stackArg4, out cx_645, out dx_355, out bp_349, out si_356, out di_646, out ds_357)
	word16 bp_367 = Mem347[ss:bp_349:word16]
	dxOut = dx_355
	bpOut = bp_367
	siOut = si_356
	dsOut = ds_357
	return 0x0001
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_3ACA:
	Mem371[ss:sp_218 - 2:word16] = Mem304[ss:bp_147 - 0x0002:word16]
	Mem374[ss:sp_218 - 4:word16] = Mem371[ss:bp_147 - 0x0004:word16]
	// Failed to bind call argument.
	// Please report this issue at https://github.com/uxmal/reko
	word16 stackArg4 = <invalid>
	word16 bp_376
	word16 dx_382
	word16 si_383
	selector ds_384
	fn0800_A614(ds_236, Mem374[ss:sp_218 - 4:segptr32], stackArg4, out cx_648, out dx_382, out bp_376, out si_383, out di_649, out ds_384)
	word16 bp_395 = Mem374[ss:bp_376:word16]
	dxOut = dx_382
	bpOut = bp_395
	siOut = si_383
	dsOut = ds_384
	return 0x0000
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_3A83:
	Mem403[ss:sp_218 - 2:word16] = Mem232[ss:bp_147 - 0x0002:word16]
	Mem406[ss:sp_218 - 4:word16] = Mem403[ss:bp_147 - 0x0004:word16]
	// Failed to bind call argument.
	// Please report this issue at https://github.com/uxmal/reko
	word16 stackArg4 = <invalid>
	word16 bp_409
	word16 dx_415
	word16 si_416
	selector ds_417
	fn0800_A614(ds_236, Mem406[ss:sp_218 - 4:segptr32], stackArg4, out cx_637, out dx_415, out bp_409, out si_416, out di_638, out ds_417)
	word16 bp_428 = Mem406[ss:bp_409:word16]
	dxOut = dx_415
	bpOut = bp_428
	siOut = si_416
	dsOut = ds_417
	return 0x0000
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_3A58:
	Mem436[ss:sp_218 - 2:word16] = Mem197[ss:bp_147 - 0x0002:word16]
	Mem439[ss:sp_218 - 4:word16] = Mem436[ss:bp_147 - 0x0004:word16]
	// Failed to bind call argument.
	// Please report this issue at https://github.com/uxmal/reko
	word16 stackArg4 = <invalid>
	word16 bp_442
	word16 dx_448
	word16 si_449
	selector ds_450
	fn0800_A614(ds_202, Mem439[ss:sp_218 - 4:segptr32], stackArg4, out cx_631, out dx_448, out bp_442, out si_449, out di_632, out ds_450)
	word16 bp_461 = Mem439[ss:bp_442:word16]
	dxOut = dx_448
	bpOut = bp_461
	siOut = si_449
	dsOut = ds_450
	return 0x0000
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_3A2A:
	Mem469[ss:sp_155 + 0x0006:word16] = Mem172[ss:bp_147 - 0x0002:word16]
	Mem472[ss:sp_155 + 0x0004:word16] = Mem469[ss:bp_147 - 0x0004:word16]
	// Failed to bind call argument.
	// Please report this issue at https://github.com/uxmal/reko
	word16 stackArg4 = <invalid>
	word16 bp_475
	word16 dx_481
	word16 si_482
	selector ds_483
	fn0800_A614(ds_151, Mem472[ss:sp_155 + 0x0004:segptr32], stackArg4, out cx_628, out dx_481, out bp_475, out si_482, out di_629, out ds_483)
	word16 bp_494 = Mem472[ss:bp_475:word16]
	dxOut = dx_481
	bpOut = bp_494
	siOut = si_482
	dsOut = ds_483
	return 0x0000
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_3A0C:
	word16 bp_501 = Mem162[ss:bp_147:word16]
	dxOut = dx_152
	bpOut = bp_501
	siOut = si_154
	dsOut = ds_151
	return 0x0000
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_39AE:
	dxOut = dx
	bpOut = bp
	siOut = si
	dsOut = ds
	return 0x0000
// DataOut:
// DataOut (flags):
// SymbolicIn:

fn0800_3992_exit:
// DataOut:
// DataOut (flags):
// SymbolicIn:



word16 fn0800_3B0A(word16 wArg0A, word16 wArg0C, ptr16 & cxOut, ptr16 & dxOut, ptr16 & bpOut, ptr16 & dsOut)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  ss:[0..15] Stack +000A:[0..15] Stack +000C:[0..15]
// LiveOut: ax bp cx ds dx sp
// Trashed: SCZO ax bp bx cx di ds dx es si sp Top
// Preserved:
fn0800_3B0A_entry:
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_3B0A:
	word16 bp_193 = fp - 2
	word16 ax_11 = wArg0A | wArg0C
	branch ax_11 != 0x0000 l0800_3B1B
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_3B1B:
	branch wArg0C < 0x0000 l0800_3B31
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_3B21:
	branch wArg0C > 0x0000 l0800_3B2A
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_3B23:
	branch wArg0A <=u 0xFDE8 l0800_3B31
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_3B31:
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_3B2A:
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_3B37:
	// Failed to bind call argument.
	// Please report this issue at https://github.com/uxmal/reko
	// Failed to bind call argument.
	// Please report this issue at https://github.com/uxmal/reko
	word16 stackArg2 = <invalid>
	word16 stackArg4 = <invalid>
	word16 dx_51
	word16 sp_54
	selector ds_117
	word16 ax_45 = fn0800_4311(stackArg2, stackArg4, out dx_51, out bp_193, out si_53, out di_49, out ds_117)
	Mem62[ss:bp_193 - 0x0002:word16] = dx_51
	Mem63[ss:bp_193 - 0x0004:word16] = ax_45
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_3BAB:
	branch (Mem66[ss:bp_193 + 0x000C:word16] | Mem66[ss:bp_193 + 0x000E:word16]) != 0x0000 l0800_3B4F
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_3B4F:
	word16 ax_81
	word16 dx_80
	branch Mem66[ss:bp_193 + 0x000E:word16] < 0x0000 l0800_3B65
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_3B55:
	branch Mem66[ss:bp_193 + 0x000E:word16] > 0x0000 l0800_3B5E
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_3B57:
	branch Mem66[ss:bp_193 + 0x000C:word16] <=u 0xFDE8 l0800_3B65
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_3B65:
	dx_80 = Mem66[ss:bp_193 + 0x000E:word16]
	ax_81 = Mem66[ss:bp_193 + 0x000C:word16]
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_3B5E:
	dx_80 = 0x0000
	ax_81 = 0xFDE8
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_3B6B:
	Mem91[ss:bp_193 - 0x0006:word16] = dx_80
	Mem93[ss:bp_193 - 0x0008:word16] = ax_81
	Mem100[ss:sp_54 + 0x0002:word16] = Mem93[ss:bp_193 + 0x0006:word16]
	Mem103[ss:sp_54:word16] = Mem100[ss:bp_193 + 0x0004:word16]
	Mem106[ss:sp_54 - 0x0002:word16] = Mem103[ss:bp_193 - 0x0006:word16]
	Mem108[ss:sp_54 - 0x0004:word16] = ax_81
	Mem111[ss:sp_54 - 0x0006:word16] = Mem108[ss:bp_193 - 0x0002:word16]
	Mem114[ss:sp_54 - 0x0008:word16] = Mem111[ss:bp_193 - 0x0004:word16]
	selector ds_123
	fn0800_4110(ds_117, Mem114[ss:sp_54 - 0x0008:word16], Mem114[ss:sp_54 - 0x0006:word16], Mem114[ss:sp_54 - 0x0004:word16], Mem114[ss:sp_54 - 0x0002:word16], Mem114[ss:sp_54:word16], Mem114[ss:sp_54 + 0x0002:word16], out si_265, out di_266, out ds_123)
	Mem136[ss:sp_54 + 0x0002:word16] = Mem114[ss:bp_193 + 0x000A:word16]
	Mem139[ss:sp_54:word16] = Mem136[ss:bp_193 + 0x0008:word16]
	Mem142[ss:sp_54 - 0x0002:word16] = Mem139[ss:bp_193 - 0x0006:word16]
	Mem145[ss:sp_54 - 0x0004:word16] = Mem142[ss:bp_193 - 0x0008:word16]
	Mem148[ss:sp_54 - 0x0006:word16] = Mem145[ss:bp_193 - 0x0002:word16]
	Mem151[ss:sp_54 - 0x0008:word16] = Mem148[ss:bp_193 - 0x0004:word16]
	fn0800_4152(ds_123, Mem151[ss:sp_54 - 0x0008:word16], Mem151[ss:sp_54 - 0x0006:word16], Mem151[ss:sp_54 - 0x0004:word16], Mem151[ss:sp_54:word16], Mem151[ss:sp_54 + 0x0002:word16], out cx_267, out ds_117)
	word16 ax_166 = Mem151[ss:bp_193 - 0x0006:word16]
	word16 dx_167 = Mem151[ss:bp_193 - 0x0008:word16]
	Mem169[ss:bp_193 + 0x000C:word16] = v27_168
	Mem151[ss:bp_193 + 0x000C:ui32] = SEQ(Mem169[ss:bp_193 + 0x000E:word16], Mem151[ss:bp_193 + 0x000C:word16])
	ui32 v28_v27_200 = Mem151[ss:bp_193 + 0x000C:ui32] - SEQ(ax_166, dx_167)
	Mem173[ss:bp_193 + 0x000E:word16] = SLICE(v28_v27_200, word16, 16)
	word16 v27_168 = (word16) v28_v27_200
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_3BB3:
	Mem177[ss:sp_54 + 0x0002:word16] = Mem66[ss:bp_193 - 0x0002:word16]
	Mem180[ss:sp_54:word16] = Mem177[ss:bp_193 - 0x0004:word16]
	// Failed to bind call argument.
	// Please report this issue at https://github.com/uxmal/reko
	word16 stackArg2 = <invalid>
	ax_11 = fn0800_4346(ds_117, stackArg2, Mem180[ss:sp_54 + 0x0002:word16], out cx, out dx, out bx_264, out ds)
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_3B18:
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_3BBF:
	word16 bp_197 = Mem196[ss:bp_193:word16]
	cxOut = cx
	dxOut = dx
	bpOut = bp_197
	dsOut = ds
	return ax_11
// DataOut:
// DataOut (flags):
// SymbolicIn:

fn0800_3B0A_exit:
// DataOut:
// DataOut (flags):
// SymbolicIn:



word16 fn0800_3BC3(word16 cx, word16 dx, selector ds, ptr16 & dsOut)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  cx:[0..15] ds:[0..15] dx:[0..15] ss:[0..15]
// LiveOut: ds si sp
// Trashed: SCZDO ax bp bx cx di ds dx es si sp Top
// Preserved:
fn0800_3BC3_entry:
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_3BC3:
	// Failed to bind call argument.
	// Please report this issue at https://github.com/uxmal/reko
	// Failed to bind call argument.
	// Please report this issue at https://github.com/uxmal/reko
	word16 stackArg6 = <invalid>
	word16 stackArg8 = <invalid>
	word16 di_26
	word16 bp_47
	selector ds_51
	word16 dx_52
	word16 sp_55
	word16 ax_46 = fn0800_4234(fn0800_37BE(cx, dx, ds, 0x43AD, ds, stackArg6, stackArg8, out di_26), di_26, ds, 0x43AD, ds, 0x0A61, ds, out cx_287, out dx_52, out bp_47, out si_288, out di_289, out ds_51)
	Mem63[ds_51:0x29D5:word16] = dx_52
	Mem64[ds_51:0x29D3:word16] = ax_46
	Mem67[ss:sp_55 + 0x0006:word16] = Mem64[ss:bp_47 + 0x0006:word16]
	Mem70[ss:sp_55 + 0x0004:word16] = Mem67[ss:bp_47 + 0x0004:word16]
	fn0800_4194(ds_51, Mem70[ss:sp_55 + 0x0004:word16], Mem70[ss:sp_55 + 0x0006:word16])
	Mem70[ss:bp_47 + 0x0008:ui32] = SEQ(Mem70[ss:bp_47 + 0x000A:word16], Mem70[ss:bp_47 + 0x0008:word16])
	ui32 dx_ax_268 = SEQ(dx_52, ax_46) - Mem70[ss:bp_47 + 0x0008:ui32]
	Mem83[ss:bp_47 - 0x0002:word16] = SLICE(dx_ax_268, word16, 16)
	Mem84[ss:bp_47 - 0x0004:word16] = (word16) dx_ax_268
	Mem89[ss:sp_55 + 0x0006:word16] = 0x0000
	Mem92[ss:sp_55 + 0x0004:word16] = Mem89[ss:bp_47 + 0x000A:word16]
	Mem95[ss:sp_55 + 0x0002:word16] = Mem92[ss:bp_47 + 0x0008:word16]
	Mem98[ss:sp_55:word16] = Mem95[ss:bp_47 + 0x0006:word16]
	Mem101[ss:sp_55 - 2:word16] = Mem98[ss:bp_47 + 0x0004:word16]
	fn0800_ACB3(ds_51, Mem101[ss:sp_55 - 2:word16], Mem101[ss:sp_55:word16], Mem101[ss:sp_55 + 6:word16], out cx_290, out dx_291, out bx_292, out es_293)
	Mem115[ss:sp_55 + 0x0006:word16] = Mem101[ss:bp_47 - 0x0002:word16]
	Mem118[ss:sp_55 + 0x0004:word16] = Mem115[ss:bp_47 - 0x0004:word16]
	Mem121[ss:sp_55 + 0x0002:word16] = Mem118[ds_51:0x29D5:word16]
	Mem124[ss:sp_55:word16] = Mem121[ds_51:0x29D3:word16]
	Mem127[ss:sp_55 - 2:word16] = Mem124[ss:bp_47 + 0x0006:word16]
	Mem130[ss:sp_55 - 4:word16] = Mem127[ss:bp_47 + 0x0004:word16]
	word16 bp_132
	selector ds_136
	word16 sp_140
	fn0800_3B0A(Mem130[ss:sp_55 + 4:word16], Mem130[ss:sp_55 + 6:word16], out cx_294, out dx_295, out bp_132, out ds_136)
	Mem150[ss:sp_140 + 0x000A:word16] = Mem130[ds_136:0x29D5:word16]
	Mem153[ss:sp_140 + 0x0008:word16] = Mem150[ds_136:0x29D3:word16]
	fn0800_BA67(ds_136, Mem153[ss:sp_140 + 0x0008:word16], Mem153[ss:sp_140 + 0x000A:word16])
	Mem165[ss:sp_140 + 0x000A:word16] = 0x0000
	ui32 ax_dx_269 = SEQ(Mem165[ss:bp_132 + 0x000A:word16], Mem165[ss:bp_132 + 0x0008:word16])
	Mem165[ss:bp_132 + 0x000C:ui32] = SEQ(Mem165[ss:bp_132 + 0x000E:word16], Mem165[ss:bp_132 + 0x000C:word16])
	ui32 ax_dx_270 = ax_dx_269 + Mem165[ss:bp_132 + 0x000C:ui32]
	Mem174[ss:sp_140 + 0x0008:word16] = SLICE(ax_dx_270, word16, 16)
	Mem176[ss:sp_140 + 0x0006:word16] = (word16) ax_dx_270
	Mem179[ss:sp_140 + 0x0004:word16] = Mem176[ss:bp_132 + 0x0006:word16]
	Mem182[ss:sp_140 + 0x0002:word16] = Mem179[ss:bp_132 + 0x0004:word16]
	fn0800_ACB3(ds_136, Mem182[ss:sp_140 + 0x0002:word16], Mem182[ss:sp_140 + 0x0004:word16], Mem182[ss:sp_140 + 0x000A:word16], out cx_296, out dx_297, out bx_298, out es_299)
	Mem196[ss:sp_140 + 0x000A:word16] = Mem182[ss:bp_132 - 0x0002:word16]
	Mem199[ss:sp_140 + 0x0008:word16] = Mem196[ss:bp_132 - 0x0004:word16]
	Mem202[ss:sp_140 + 0x0006:word16] = Mem199[ss:bp_132 + 0x0006:word16]
	Mem205[ss:sp_140 + 0x0004:word16] = Mem202[ss:bp_132 + 0x0004:word16]
	Mem208[ss:sp_140 + 0x0002:word16] = Mem205[ds_136:0x29D5:word16]
	Mem211[ss:sp_140:word16] = Mem208[ds_136:0x29D3:word16]
	selector ds_217
	word16 sp_221
	fn0800_3B0A(Mem211[ss:sp_140 + 8:word16], Mem211[ss:sp_140 + 10:word16], out cx_300, out dx_301, out bp_302, out ds_217)
	Mem231[ss:sp_221 + 0x000A:word16] = Mem211[ds_217:0x29D5:word16]
	Mem234[ss:sp_221 + 0x0008:word16] = Mem231[ds_217:0x29D3:word16]
	// Failed to bind call argument.
	// Please report this issue at https://github.com/uxmal/reko
	word16 stackArg4 = <invalid>
	word16 sp_239
	word16 si_243
	selector ds_244
	fn0800_A614(ds_217, Mem234[ss:sp_221 + 0x0008:segptr32], stackArg4, out cx_304, out dx_305, out bp_236, out si_243, out di_306, out ds_244)
	Mem252[ss:sp_239 + 0x0002:word16] = ds_244
	Mem255[ss:sp_239:word16] = 0x43AD
	fn0800_8F7F(0x43AD, ds_244, Mem255[ss:sp_239:segptr32])
	dsOut = ds_244
	return si_243
// DataOut:
// DataOut (flags):
// SymbolicIn:

fn0800_3BC3_exit:
// DataOut:
// DataOut (flags):
// SymbolicIn:



byte fn0800_3C99(word16 si, word16 di, selector ds, ptr16 & bpOut, ptr16 & siOut, ptr16 & dsOut)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  di:[0..15] ds:[0..15] si:[0..15] ss:[0..15]
// LiveOut: bp cx ds si sp
// Trashed: SCZDO ax bp bx cx di ds dx es si sp Top
// Preserved:
fn0800_3C99_entry:
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_3C99:
	fn0800_3509(si, di, fp - 0x006C, ss, 0x4348, ds, out bx_457)
	word16 di_43 = fp - 0x006C
	word16 si_411 = 0x0A54
	word16 cx_45 = 0xFFFF
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_3CBE:
	branch cx_45 == 0x0000 l0800_3CC0
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_3CBE_1:
	di_43 = di_43 + 0x0001
	cx_45 = cx_45 - 0x0001
	branch Mem40[ss:di_43:byte] == 0x00 l0800_3CBE
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_3CC0:
	word16 di_412 = di_43 - 0x0001
	word16 cx_413 = 0x000D
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_3CC4:
	branch cx_413 == 0x0000 l0800_3CC6
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_3CC6:
	word16 bp_80
	selector ds_84
	word16 dx_85
	word16 sp_88
	word16 ax_79 = fn0800_4234(si_411, di_412, ds, fp - 0x006C, ss, 0x0A61, ds, out cx_458, out dx_85, out bp_80, out si_459, out di_460, out ds_84)
	Mem95[ss:bp_80 - 0x0002:word16] = dx_85
	Mem96[ss:bp_80 - 0x0004:word16] = ax_79
	Mem101[ss:sp_88 + 0x0006:word16] = 0x0000
	Mem103[ss:sp_88 + 0x0004:word16] = 0x0000
	Mem105[ss:sp_88 + 0x0002:word16] = 0x0000
	Mem108[ss:sp_88:word16] = Mem105[ss:bp_80 + 0x0006:word16]
	Mem111[ss:sp_88 - 2:word16] = Mem108[ss:bp_80 + 0x0004:word16]
	fn0800_ACB3(ds_84, Mem111[ss:sp_88 - 2:word16], Mem111[ss:sp_88:word16], Mem111[ss:sp_88 + 6:word16], out cx_461, out dx_462, out bx_463, out es_464)
	Mem125[ss:sp_88 + 0x0006:word16] = Mem111[ss:bp_80 + 0x000A:word16]
	Mem128[ss:sp_88 + 0x0004:word16] = Mem125[ss:bp_80 + 0x0008:word16]
	Mem131[ss:sp_88 + 0x0002:word16] = Mem128[ss:bp_80 - 0x0002:word16]
	Mem134[ss:sp_88:word16] = Mem131[ss:bp_80 - 0x0004:word16]
	Mem137[ss:sp_88 - 2:word16] = Mem134[ss:bp_80 + 0x0006:word16]
	Mem140[ss:sp_88 - 4:word16] = Mem137[ss:bp_80 + 0x0004:word16]
	word16 bp_142
	selector ds_146
	word16 sp_150
	fn0800_3B0A(Mem140[ss:sp_88 + 4:word16], Mem140[ss:sp_88 + 6:word16], out cx_465, out dx_466, out bp_142, out ds_146)
	Mem159[ss:sp_150 + 0x000A:word16] = 0x0000
	ui32 ax_dx_427 = SEQ(Mem159[ss:bp_142 + 0x000A:word16], Mem159[ss:bp_142 + 0x0008:word16])
	Mem159[ss:bp_142 + 0x000C:ui32] = SEQ(Mem159[ss:bp_142 + 0x000E:word16], Mem159[ss:bp_142 + 0x000C:word16])
	ui32 ax_dx_428 = ax_dx_427 + Mem159[ss:bp_142 + 0x000C:ui32]
	Mem168[ss:sp_150 + 0x0008:word16] = SLICE(ax_dx_428, word16, 16)
	Mem170[ss:sp_150 + 0x0006:word16] = (word16) ax_dx_428
	Mem173[ss:sp_150 + 0x0004:word16] = Mem170[ss:bp_142 + 0x0006:word16]
	Mem176[ss:sp_150 + 0x0002:word16] = Mem173[ss:bp_142 + 0x0004:word16]
	word16 dx_180
	word16 ax_177 = fn0800_ACB3(ds_146, Mem176[ss:sp_150 + 0x0002:word16], Mem176[ss:sp_150 + 0x0004:word16], Mem176[ss:sp_150 + 0x000A:word16], out cx_467, out dx_180, out bx_468, out es_469)
	Mem190[ss:sp_150 + 0x000A:word16] = Mem176[ss:bp_142 + 0x0006:word16]
	Mem193[ss:sp_150 + 0x0008:word16] = Mem190[ss:bp_142 + 0x0004:word16]
	fn0800_4194(ds_146, Mem193[ss:sp_150 + 0x0008:word16], Mem193[ss:sp_150 + 0x000A:word16])
	ui32 bx_cx_429 = SEQ(Mem193[ss:bp_142 + 0x000A:word16], Mem193[ss:bp_142 + 0x0008:word16])
	Mem193[ss:bp_142 + 0x000C:ui32] = SEQ(Mem193[ss:bp_142 + 0x000E:word16], Mem193[ss:bp_142 + 0x000C:word16])
	ui32 dx_ax_433 = SEQ(dx_180, ax_177) - (bx_cx_429 + Mem193[ss:bp_142 + 0x000C:ui32])
	Mem213[ss:bp_142 + 0x000E:word16] = SLICE(dx_ax_433, word16, 16)
	word16 ax_208 = (word16) dx_ax_433
	Mem214[ss:bp_142 + 0x000C:word16] = ax_208
	Mem217[ss:sp_150 + 0x000A:word16] = Mem214[ss:bp_142 + 0x000E:word16]
	Mem219[ss:sp_150 + 0x0008:word16] = ax_208
	Mem222[ss:sp_150 + 0x0006:word16] = Mem219[ss:bp_142 - 0x0002:word16]
	Mem225[ss:sp_150 + 0x0004:word16] = Mem222[ss:bp_142 - 0x0004:word16]
	Mem228[ss:sp_150 + 0x0002:word16] = Mem225[ss:bp_142 + 0x0006:word16]
	Mem231[ss:sp_150:word16] = Mem228[ss:bp_142 + 0x0004:word16]
	word16 bp_233
	selector ds_237
	word16 sp_241
	fn0800_3B0A(Mem231[ss:sp_150 + 8:word16], Mem231[ss:sp_150 + 10:word16], out cx_470, out dx_471, out bp_233, out ds_237)
	Mem251[ss:sp_241 + 0x000A:word16] = Mem231[ss:bp_233 - 0x0002:word16]
	Mem254[ss:sp_241 + 0x0008:word16] = Mem251[ss:bp_233 - 0x0004:word16]
	// Failed to bind call argument.
	// Please report this issue at https://github.com/uxmal/reko
	word16 stackArg4 = <invalid>
	word16 sp_259
	selector ds_264
	fn0800_A614(ds_237, Mem254[ss:sp_241 + 0x0008:segptr32], stackArg4, out cx_473, out dx_474, out bp_475, out si_476, out di_477, out ds_264)
	Mem273[ss:sp_259 + 0x0002:word16] = Mem254[ds_264:0x29D1:word16]
	Mem276[ss:sp_259:word16] = Mem273[ds_264:0x29CF:word16]
	// Failed to bind call argument.
	// Please report this issue at https://github.com/uxmal/reko
	word16 stackArg4 = <invalid>
	word16 bp_278
	word16 sp_281
	selector ds_286
	word16 si_285
	word16 di_283
	fn0800_A614(ds_264, Mem276[ss:sp_259:segptr32], stackArg4, out cx_479, out dx_480, out bp_278, out si_285, out di_283, out ds_286)
	Mem295[ss:sp_281 + 0x0002:word16] = 0x0180
	Mem297[ss:sp_281:word16] = ds_286
	Mem300[ss:sp_281 - 2:word16] = 0x4348
	fn0800_A4F6(ds_286, Mem300[ss:sp_281 - 2:word16], Mem300[ss:sp_281:word16], Mem300[ss:sp_281 + 2:word16])
	Mem311[ss:sp_281 + 0x0002:word16] = ds_286
	Mem314[ss:sp_281:word16] = 0x4348
	fn0800_8F7F(0x4348, ds_286, Mem314[ss:sp_281:segptr32])
	Mem324[ss:sp_281 + 0x0002:word16] = ds_286
	Mem327[ss:sp_281:word16] = 0x4348
	Mem329[ss:sp_281 - 2:word16] = ss
	Mem332[ss:sp_281 - 4:word16] = bp_278 - 0x006A
	branch fn0800_BA4A(ds_286, Mem332[ss:sp_281 - 4:segptr32], Mem332[ss:sp_281:segptr32]) != 0xFFFF l0800_3DB2
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_3DA3:
	Mem344[ss:sp_281 + 0x0002:word16] = ss
	Mem347[ss:sp_281:word16] = bp_278 - 0x006A
	Mem350[ss:sp_281 - 2:word16] = 0x000A
	// Failed to bind call argument.
	// Please report this issue at https://github.com/uxmal/reko
	word16 stackArg6 = <invalid>
	fn0800_0D24(ds_286, Mem350[ss:sp_281 - 2:word16], Mem350[ss:sp_281:segptr32], stackArg6, out cx_484, out dx_485, out bx_486, out si_285, out di_283, out es_487, out ds_286, out Top_488)
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_3DB2:
	Mem371[ss:sp_281 + 0x0002:word16] = ds_286
	Mem374[ss:sp_281:word16] = 0x0A65
	Mem376[ss:sp_281 - 0x0002:word16] = ds_286
	Mem379[ss:sp_281 - 0x0004:word16] = 0x4348
	word16 bp_383
	word16 cx_385
	selector ds_387
	word16 dx_388
	word16 sp_391
	word16 ax_382 = fn0800_4234(si_285, di_283, ds_286, Mem379[ss:sp_281 - 0x0004:word16], Mem379[ss:sp_281 - 0x0002:word16], Mem379[ss:sp_281:word16], Mem379[ss:sp_281 + 0x0002:word16], out cx_385, out dx_388, out bp_383, out si_481, out di_482, out ds_387)
	Mem399[ds_387:0x29D1:word16] = dx_388
	Mem400[ds_387:0x29CF:word16] = ax_382
	word16 si_403 = Mem400[ss:sp_391 + 0x000A:word16]
	bpOut = Mem400[ss:bp_383:word16]
	siOut = si_403
	dsOut = ds_387
	return (byte) cx_385
// DataOut:
// DataOut (flags):
// SymbolicIn:

fn0800_3C99_exit:
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_3CC4_2:
	Mem410[ss:di_412:byte] = Mem407[ds:si_411:byte]
	si_411 = si_411 + 0x0001
	di_412 = di_412 + 0x0001
	cx_413 = cx_413 - 0x0001
// DataOut:
// DataOut (flags):
// SymbolicIn:



word16 fn0800_3DCF(selector ds, segptr32 ptrArg02, word16 wArg04, ptr16 & cxOut, ptr16 & dxOut, ptr16 & diOut, ptr16 & esOut, ptr16 & dsOut, ptr16 & TopOut)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  ds:[0..15] ss:[0..15] Stack +0002:[0..31]
// LiveOut: ax cx di ds dx es Top
// Trashed: SCZO ax bx cx di ds dx es Top
// Preserved: D bp si sp
fn0800_3DCF_entry:
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_3DCF:
	selector es_144
	word16 ax_28
	word16 v10_17 = Mem13[ptrArg02:word16] - 0x0001
	Mem18[ptrArg02:word16] = v10_17
	int8 Top_152 = 0
	branch v10_17 < 0x0000 l0800_3DF3
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_3DF3:
	// Failed to bind call argument.
	// Please report this issue at https://github.com/uxmal/reko
	word16 stackArg4 = <invalid>
	ax_28 = fn0800_AEC2(ds, SEQ(ptrArg02, ptrArg02), stackArg4, out cx, out dx, out es_144)
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_3DDE:
	word16 ax_40 = Mem18[ptrArg02 + 0x000E:word16]
	word16 si_41 = Mem18[ptrArg02 + 0x000C:word16]
	Mem43[ptrArg02 + 0x000C:word16] = Mem18[ptrArg02 + 0x000C:word16] + 0x0001
	es_144 = ax_40
	ax_28 = DPB(DPB(ax_40, Mem43[ax_40:si_41:byte], 0), 0x00, 8) (alias)
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_3DFF:
	word16 ax_124
	ax_124 = ax_28
	branch ax_28 != 0xFFFF l0800_3E1F
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_3E07:
	// Failed to bind call argument.
	// Please report this issue at https://github.com/uxmal/reko
	word16 stackArg6 = <invalid>
	word16 dx_65
	ax_124 = fn0800_0D24(ds, 0x0008, SEQ(dx_65, fn0800_4271(ds, ptrArg02, ptrArg02, out dx_65)), stackArg6, out cx, out dx, out bx_164, out si_165, out di, out es_144, out ds, out Top_152)
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_3E1F:
	cxOut = cx
	dxOut = dx
	diOut = di
	esOut = es_144
	dsOut = ds
	TopOut = Top_152
	return DPB(ax_124, ax_28, 0)
// DataOut:
// DataOut (flags):
// SymbolicIn:

fn0800_3DCF_exit:
// DataOut:
// DataOut (flags):
// SymbolicIn:



word16 fn0800_3E27(selector ds, word16 wArg02, word16 wArg04, ptr16 & cxOut, ptr16 & dxOut, ptr16 & diOut, ptr16 & esOut, ptr16 & dsOut, ptr16 & TopOut)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  ds:[0..15] ss:[0..15] Stack +0002:[0..15] Stack +0004:[0..15]
// LiveOut: ax cx di ds dx es Top
// Trashed: SCZO ax bx cx di ds dx es Top
// Preserved: bp sp
fn0800_3E27_entry:
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_3E27:
	// Failed to bind call argument.
	// Please report this issue at https://github.com/uxmal/reko
	// Failed to bind call argument.
	// Please report this issue at https://github.com/uxmal/reko
	word16 stackArg4 = <invalid>
	word16 stackArg4 = <invalid>
	selector ds_25
	word16 cx_43
	word16 dx_44
	selector es_45
	int8 Top_46
	word16 di_47
	selector ds_48
	word16 ax_60 = (DPB(fn0800_3DCF(ds, SEQ(wArg04, wArg02), stackArg4, out cx_88, out dx_89, out di_90, out es_91, out ds_25, out Top_92), 0x00, 8) << 0x08) + DPB(fn0800_3DCF(ds_25, SEQ(wArg04, wArg02), stackArg4, out cx_43, out dx_44, out di_47, out es_45, out ds_48, out Top_46), 0x00, 8)
	cxOut = DPB(cx_43, 0x08, 0)
	dxOut = dx_44
	diOut = di_47
	esOut = es_45
	dsOut = ds_48
	TopOut = Top_46
	return ax_60
// DataOut:
// DataOut (flags):
// SymbolicIn:

fn0800_3E27_exit:
// DataOut:
// DataOut (flags):
// SymbolicIn:



word16 fn0800_3E5D(selector ds, word16 wArg02, word16 wArg04, ptr16 & dxOut, ptr16 & diOut, ptr16 & esOut, ptr16 & dsOut, ptr16 & TopOut)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  ds:[0..15] ss:[0..15] Stack +0002:[0..15] Stack +0004:[0..15]
// LiveOut: cx di ds dx es Top
// Trashed: SCZO bx cx di ds dx es Top
// Preserved: bp sp
fn0800_3E5D_entry:
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_3E5D:
	selector ds_22
	word16 cx_42
	word16 di_43
	selector ds_44
	selector es_46
	int8 Top_47
	dxOut = fn0800_3E27(ds, wArg02, wArg04, out cx_85, out dx_86, out di_87, out es_88, out ds_22, out Top_89) + (fn0800_3E27(ds_22, wArg02, wArg04, out cx_42, out dx_90, out di_43, out es_46, out ds_44, out Top_47) <u 0x0000)
	diOut = di_43
	esOut = es_46
	dsOut = ds_44
	TopOut = Top_47
	return cx_42
// DataOut:
// DataOut (flags):
// SymbolicIn:

fn0800_3E5D_exit:
// DataOut:
// DataOut (flags):
// SymbolicIn:



word16 fn0800_3E9A(selector ds, segptr32 ptrArg02, word16 wArg04, ptr16 & dxOut, ptr16 & dsOut)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  ds:[0..15] ss:[0..15] Stack +0002:[0..31]
// LiveOut: ax ds dx
// Trashed: SCZO ax bx cx di ds dx es Top
// Preserved: D bp si sp
fn0800_3E9A_entry:
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_3E9A:
	word16 ax_28
	word16 v10_17 = Mem13[ptrArg02:word16] - 0x0001
	Mem18[ptrArg02:word16] = v10_17
	branch v10_17 < 0x0000 l0800_3EBE
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_3EBE:
	// Failed to bind call argument.
	// Please report this issue at https://github.com/uxmal/reko
	word16 stackArg4 = <invalid>
	ax_28 = fn0800_AEC2(ds, SEQ(ptrArg02, ptrArg02), stackArg4, out cx_173, out dx_174, out es_175)
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_3EA9:
	word16 ax_40 = Mem18[ptrArg02 + 0x000E:word16]
	word16 si_41 = Mem18[ptrArg02 + 0x000C:word16]
	Mem43[ptrArg02 + 0x000C:word16] = Mem18[ptrArg02 + 0x000C:word16] + 0x0001
	ax_28 = DPB(DPB(ax_40, Mem43[ax_40:si_41:byte], 0), 0x00, 8) (alias)
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_3ECA:
	branch ax_28 != 0xFFFF l0800_3EEA
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_3ED2:
	// Failed to bind call argument.
	// Please report this issue at https://github.com/uxmal/reko
	word16 stackArg6 = <invalid>
	word16 dx_65
	fn0800_0D24(ds, 0x0008, SEQ(dx_65, fn0800_4271(ds, ptrArg02, ptrArg02, out dx_65)), stackArg6, out cx_180, out dx_181, out bx_182, out si_183, out di_184, out es_185, out ds, out Top_186)
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_3EEA:
	word16 dx_117
	word16 ax_157 = DPB(fn0800_ACB3(ds, ptrArg02, ptrArg02, 0x0001, out cx_176, out dx_117, out bx_177, out es_178), ax_28, 0)
	dxOut = dx_117
	dsOut = ds
	return ax_157
// DataOut:
// DataOut (flags):
// SymbolicIn:

fn0800_3E9A_exit:
// DataOut:
// DataOut (flags):
// SymbolicIn:



word16 fn0800_3F0A(selector ds, word16 wArg02, word16 wArg04, ptr16 & cxOut, ptr16 & dxOut, ptr16 & dsOut)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  ds:[0..15] ss:[0..15] Stack +0002:[0..15] Stack +0004:[0..15]
// LiveOut: ax cx ds dx
// Trashed: SCZO ax bx cx di ds dx es Top
// Preserved: bp sp
fn0800_3F0A_entry:
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_3F0A:
	// Failed to bind call argument.
	// Please report this issue at https://github.com/uxmal/reko
	// Failed to bind call argument.
	// Please report this issue at https://github.com/uxmal/reko
	word16 stackArg4 = <invalid>
	selector ds_25
	word16 ax_33 = DPB(fn0800_3DCF(ds, SEQ(wArg04, wArg02), stackArg4, out cx_116, out dx_117, out di_118, out es_119, out ds_25, out Top_120), 0x00, 8)
	word16 stackArg4 = <invalid>
	selector ds_48
	word16 ax_56 = DPB(fn0800_3DCF(ds_25, SEQ(wArg04, wArg02), stackArg4, out cx_122, out dx_123, out di_124, out es_125, out ds_48, out Top_126), 0x00, 8)
	word16 cx_75
	word16 dx_76
	fn0800_ACB3(ds_48, wArg02, wArg04, 0x0001, out cx_75, out dx_76, out bx_127, out es_128)
	cxOut = DPB(cx_75, 0x08, 0)
	dxOut = dx_76
	dsOut = ds_48
	return (ax_33 << 0x08) + ax_56
// DataOut:
// DataOut (flags):
// SymbolicIn:

fn0800_3F0A_exit:
// DataOut:
// DataOut (flags):
// SymbolicIn:



word16 fn0800_3F58(selector ds, word16 wArg02, word16 wArg04, ptr16 & dxOut, ptr16 & diOut, ptr16 & dsOut)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  ds:[0..15] ss:[0..15] Stack +0002:[0..15] Stack +0004:[0..15]
// LiveOut: cx di ds dx
// Trashed: SCZO bx cx di ds dx es Top
// Preserved: bp sp
fn0800_3F58_entry:
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_3F58:
	selector ds_22
	word16 ax_18 = fn0800_3E27(ds, wArg02, wArg04, out cx_114, out dx_115, out di_116, out es_117, out ds_22, out Top_118)
	word16 di_43
	selector ds_44
	word16 ax_40 = fn0800_3E27(ds_22, wArg02, wArg04, out cx_119, out dx_120, out di_43, out es_121, out ds_44, out Top_122)
	word16 cx_73
	fn0800_ACB3(ds_44, wArg02, wArg04, 0x0001, out cx_73, out dx_123, out bx_124, out es_125)
	dxOut = ax_18 + (ax_40 <u 0x0000)
	diOut = di_43
	dsOut = ds_44
	return cx_73
// DataOut:
// DataOut (flags):
// SymbolicIn:

fn0800_3F58_exit:
// DataOut:
// DataOut (flags):
// SymbolicIn:



word16 fn0800_3FAD(selector ds, word16 wArg02, word16 wArg04, ptr16 & cxOut, ptr16 & diOut, ptr16 & dsOut)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  ds:[0..15] ss:[0..15] Stack +0002:[0..15] Stack +0004:[0..15]
// LiveOut: ax cx di ds
// Trashed: SCZO ax bx cx di ds dx es Top
// Preserved: bp sp
fn0800_3FAD_entry:
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_3FAD:
	// Failed to bind call argument.
	// Please report this issue at https://github.com/uxmal/reko
	// Failed to bind call argument.
	// Please report this issue at https://github.com/uxmal/reko
	word16 stackArg4 = <invalid>
	word16 stackArg4 = <invalid>
	selector ds_25
	word16 cx_43
	word16 di_47
	selector ds_48
	word16 ax_59 = (DPB(fn0800_3DCF(ds_25, SEQ(wArg04, wArg02), stackArg4, out cx_43, out dx_90, out di_47, out es_91, out ds_48, out Top_92), 0x00, 8) << 0x08) + DPB(fn0800_3DCF(ds, SEQ(wArg04, wArg02), stackArg4, out cx_84, out dx_85, out di_86, out es_87, out ds_25, out Top_88), 0x00, 8)
	cxOut = DPB(cx_43, 0x08, 0)
	diOut = di_47
	dsOut = ds_48
	return ax_59
// DataOut:
// DataOut (flags):
// SymbolicIn:

fn0800_3FAD_exit:
// DataOut:
// DataOut (flags):
// SymbolicIn:



word16 fn0800_401E(byte ch, selector ds, word16 wArg02, word16 wArg04, word16 wArg06, ptr16 & cxOut, ptr16 & dxOut, ptr16 & bxOut, ptr16 & diOut, ptr16 & esOut, ptr16 & dsOut, ptr16 & TopOut)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  cx:[8..15] ds:[0..15] ss:[0..15] Stack +0002:[0..15] Stack +0004:[0..15] Stack +0006:[0..15]
// LiveOut: ax bx cx di ds dx es Top
// Trashed: SCZO ax bx cx di ds dx es Top
// Preserved: bp sp
fn0800_401E_entry:
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_401E:
	// Failed to bind call argument.
	// Please report this issue at https://github.com/uxmal/reko
	// Failed to bind call argument.
	// Please report this issue at https://github.com/uxmal/reko
	word16 stackArg6 = <invalid>
	word16 stackArg6 = <invalid>
	word16 cx_26
	selector ds_31
	word16 bx_49
	word16 cx_50
	word16 dx_51
	selector es_52
	int8 Top_53
	word16 di_54
	selector ds_55
	word16 ax_48 = fn0800_4047(cx_26, ds_31, DPB(fn0800_4047(DPB(cx, 0x08, 0), ds, wArg02 >>u 0x08, SEQ(wArg06, wArg04), stackArg6, out cx_26, out dx_88, out bx_89, out di_90, out es_91, out ds_31, out Top_92), wArg02, 0), SEQ(wArg06, wArg04), stackArg6, out cx_50, out dx_51, out bx_49, out di_54, out es_52, out ds_55, out Top_53)
	cxOut = cx_50
	dxOut = dx_51
	bxOut = bx_49
	diOut = di_54
	esOut = es_52
	dsOut = ds_55
	TopOut = Top_53
	return ax_48
// DataOut:
// DataOut (flags):
// SymbolicIn:

fn0800_401E_exit:
// DataOut:
// DataOut (flags):
// SymbolicIn:



word16 fn0800_4047(byte ch, selector ds, byte bArg02, segptr32 ptrArg04, word16 wArg06, ptr16 & cxOut, ptr16 & dxOut, ptr16 & bxOut, ptr16 & diOut, ptr16 & esOut, ptr16 & dsOut, ptr16 & TopOut)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  cx:[8..15] ds:[0..15] ss:[0..15] Stack +0002:[0..15] Stack +0004:[0..31]
// LiveOut: ax bx cx di ds dx es Top
// Trashed: SCZO ax bx cx di ds dx es Top
// Preserved: D bp si sp
fn0800_4047_entry:
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_4047:
	selector es_147
	word16 dx_143
	word16 ax_127
	word16 v10_16 = Mem11[ptrArg04:word16] + 0x0001
	Mem17[ptrArg04:word16] = v10_16
	int8 Top_155 = 0
	word16 cx_28 = DPB(cx, bArg02, 0)
	word16 cx_133 = DPB(cx, bArg02, 0)
	word16 bx_128 = (word16) ptrArg04
	branch v10_16 >= 0x0000 l0800_406F
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_406F:
	// Failed to bind call argument.
	// Please report this issue at https://github.com/uxmal/reko
	word16 stackArg6 = <invalid>
	ax_127 = fn0800_B30A(ds, cx_28, SEQ(ptrArg04, ptrArg04), stackArg6, out cx_133, out dx_143, out bx_128, out es_147)
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_4056:
	word16 ax_43 = Mem17[ptrArg04 + 0x000E:word16]
	word16 si_44 = Mem17[ptrArg04 + 0x000C:word16]
	Mem46[ptrArg04 + 0x000C:word16] = Mem17[ptrArg04 + 0x000C:word16] + 0x0001
	Mem50[ax_43:si_44:byte] = bArg02
	dx_143 = DPB(dx, bArg02, 0) (alias)
	es_147 = ax_43
	ax_127 = DPB(DPB(ax_43, bArg02, 0), 0x00, 8) (alias)
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_407C:
	branch ax_127 != 0xFFFF l0800_4099
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_4081:
	// Failed to bind call argument.
	// Please report this issue at https://github.com/uxmal/reko
	word16 stackArg6 = <invalid>
	word16 dx_70
	ax_127 = fn0800_0D24(ds, 0x0009, SEQ(dx_70, fn0800_4271(ds, ptrArg04, ptrArg04, out dx_70)), stackArg6, out cx_133, out dx_143, out bx_128, out si_168, out di, out es_147, out ds, out Top_155)
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_4099:
	cxOut = cx_133
	dxOut = dx_143
	bxOut = bx_128
	diOut = di
	esOut = es_147
	dsOut = ds
	TopOut = Top_155
	return ax_127
// DataOut:
// DataOut (flags):
// SymbolicIn:

fn0800_4047_exit:
// DataOut:
// DataOut (flags):
// SymbolicIn:



word16 fn0800_409C(word16 cx, selector ds, word16 wArg02, word16 wArg04, word16 wArg06, word16 wArg08, ptr16 & cxOut, ptr16 & dxOut, ptr16 & diOut, ptr16 & esOut, ptr16 & dsOut, ptr16 & TopOut)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  cx:[0..15] ds:[0..15] ss:[0..15] Stack +0002:[0..15] Stack +0004:[0..15] Stack +0006:[0..15] Stack +0008:[0..15]
// LiveOut: ax cx di ds dx es Top
// Trashed: SCZO ax bx cx di ds dx es Top
// Preserved: bp sp
fn0800_409C_entry:
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_409C:
	word16 cx_22
	selector ds_24
	fn0800_401E(cx, ds, wArg04, wArg06, wArg08, out cx_22, out dx_80, out bx_81, out di_82, out es_83, out ds_24, out Top_84)
	word16 cx_45
	word16 di_46
	selector ds_47
	word16 dx_48
	selector es_49
	int8 Top_50
	word16 ax_43 = fn0800_401E(cx_22, ds_24, wArg02, wArg06, wArg08, out cx_45, out dx_48, out bx_85, out di_46, out es_49, out ds_47, out Top_50)
	cxOut = cx_45
	dxOut = dx_48
	diOut = di_46
	esOut = es_49
	dsOut = ds_47
	TopOut = Top_50
	return ax_43
// DataOut:
// DataOut (flags):
// SymbolicIn:

fn0800_409C_exit:
// DataOut:
// DataOut (flags):
// SymbolicIn:



word16 fn0800_40BF(byte ah, word16 cx, selector ds, word16 wArg02, word16 wArg04, word16 wArg06, ptr16 & cxOut, ptr16 & dxOut, ptr16 & diOut, ptr16 & dsOut)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  ax:[8..15] cx:[0..15] ds:[0..15] ss:[0..15] Stack +0002:[0..15] Stack +0004:[0..15] Stack +0006:[0..15]
// LiveOut: ax cx di ds dx
// Trashed: SCZO ax bx cx di ds dx es Top
// Preserved: bp sp
fn0800_40BF_entry:
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_40BF:
	// Failed to bind call argument.
	// Please report this issue at https://github.com/uxmal/reko
	word16 stackArg6 = <invalid>
	word16 cx_27
	selector ds_32
	fn0800_4047(cx, ds, DPB(ax, bArg02 & 0xFF, 0), SEQ(wArg06, wArg04), stackArg6, out cx_27, out dx_93, out bx_94, out di_95, out es_96, out ds_32, out Top_97)
	// Failed to bind call argument.
	// Please report this issue at https://github.com/uxmal/reko
	word16 stackArg6 = <invalid>
	word16 cx_57
	word16 dx_58
	word16 di_61
	selector ds_62
	word16 ax_55 = fn0800_4047(DPB(cx_27, 0x08, 0), ds_32, DPB(wArg02 >>u 0x08, (byte) (wArg02 >>u 0x08) & 0xFF, 0), SEQ(wArg06, wArg04), stackArg6, out cx_57, out dx_58, out bx_99, out di_61, out es_100, out ds_62, out Top_101)
	cxOut = cx_57
	dxOut = dx_58
	diOut = di_61
	dsOut = ds_62
	return ax_55
// DataOut:
// DataOut (flags):
// SymbolicIn:

fn0800_40BF_exit:
// DataOut:
// DataOut (flags):
// SymbolicIn:



byte fn0800_4110(selector ds, word16 wArg02, word16 wArg04, word16 wArg06, word16 wArg08, word16 wArg0A, word16 wArg0C, ptr16 & siOut, ptr16 & diOut, ptr16 & dsOut)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  ds:[0..15] ss:[0..15] Stack +0002:[0..15] Stack +0004:[0..15] Stack +0006:[0..15] Stack +0008:[0..15] Stack +000A:[0..15] Stack +000C:[0..15]
// LiveOut: cx di ds si
// Trashed: SCZO ax bx cx di ds dx es si Top
// Preserved: D bp sp
fn0800_4110_entry:
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_4110:
	word16 cx_120
	word16 di_123
	word16 si_133
	word16 ax_28 = fn0800_ABA3(ds, wArg02, wArg04, 0x0001, wArg06, wArg0A, wArg0C, out ch_140, out si_133, out di_123)
	branch wArg08 != 0x0000 l0800_4138
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_4133:
	branch ax_28 == wArg06 l0800_4150
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_4138:
	// Failed to bind call argument.
	// Please report this issue at https://github.com/uxmal/reko
	word16 stackArg6 = <invalid>
	word16 dx_57
	fn0800_0D24(ds, 0x0008, SEQ(dx_57, fn0800_4271(ds, wArg0A, wArg0C, out dx_57)), stackArg6, out cx_120, out dx_76, out bx_72, out si_133, out di_123, out es_77, out ds, out Top_79)
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_4150:
	siOut = si_133
	diOut = di_123
	dsOut = ds
	return (byte) cx_120
// DataOut:
// DataOut (flags):
// SymbolicIn:

fn0800_4110_exit:
// DataOut:
// DataOut (flags):
// SymbolicIn:



byte fn0800_4152(selector ds, word16 wArg02, word16 wArg04, word16 wArg06, word16 wArg0A, word16 wArg0C, ptr16 & cxOut, ptr16 & dsOut)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  ds:[0..15] ss:[0..15] Stack +0002:[0..15] Stack +0004:[0..15] Stack +0006:[0..15] Stack +000A:[0..15] Stack +000C:[0..15]
// LiveOut: ax cx ds
// Trashed: SCZO ax bx cx di ds dx es si Top
// Preserved: D bp sp
fn0800_4152_entry:
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_4152:
	word16 bp_33
	word16 cx_111
	word16 ax_106 = fn0800_AD85(ds, wArg02, wArg04, 0x0001, wArg06, wArg0A, wArg0C, out cx_111, out bp_33)
	branch Mem26[ss:bp_33 + 0x000A:word16] != 0x0000 l0800_417A
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_4175:
	branch ax_106 == Mem26[ss:bp_33 + 0x0008:word16] l0800_4192
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_417A:
	// Failed to bind call argument.
	// Please report this issue at https://github.com/uxmal/reko
	word16 stackArg6 = <invalid>
	word16 dx_59
	ax_106 = fn0800_0D24(ds, 0x0009, SEQ(dx_59, fn0800_4271(ds, Mem53[ss:bp_33 + 0x000C:word16], Mem26[ss:bp_33 + 0x000E:word16], out dx_59)), stackArg6, out cx_111, out dx_78, out bx_74, out si_80, out di_76, out es_79, out ds, out Top_81)
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_4192:
	cxOut = cx_111
	dsOut = ds
	return (byte) ax_106
// DataOut:
// DataOut (flags):
// SymbolicIn:

fn0800_4152_exit:
// DataOut:
// DataOut (flags):
// SymbolicIn:



void fn0800_4194(selector ds, word16 wArg02, word16 wArg04)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  ds:[0..15] ss:[0..15] Stack +0002:[0..15] Stack +0004:[0..15]
// LiveOut:
// Trashed: SCZO bx cx es Top
// Preserved: bp sp
fn0800_4194_entry:
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_4194:
	// Failed to bind call argument.
	// Please report this issue at https://github.com/uxmal/reko
	word16 stackArg4 = <invalid>
	fn0800_AD2F(ds, SEQ(wArg04, wArg02), stackArg4, out cx_136, out dx_137)
	fn0800_ACB3(ds, wArg02, wArg04, 0x0002, out cx_138, out dx_139, out bx_140, out es_141)
	// Failed to bind call argument.
	// Please report this issue at https://github.com/uxmal/reko
	word16 stackArg4 = <invalid>
	fn0800_AD2F(ds, SEQ(wArg04, wArg02), stackArg4, out cx_143, out dx_66)
	fn0800_ACB3(ds, wArg02, wArg04, 0x0000, out cx_144, out dx_145, out bx_146, out es_147)
	return
// DataOut:
// DataOut (flags):
// SymbolicIn:

fn0800_4194_exit:
// DataOut:
// DataOut (flags):
// SymbolicIn:



word16 fn0800_4234(word16 si, word16 di, selector ds, word16 wArg02, word16 wArg04, word16 wArg06, word16 wArg08, ptr16 & cxOut, ptr16 & dxOut, ptr16 & bpOut, ptr16 & siOut, ptr16 & diOut, ptr16 & dsOut)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  di:[0..15] ds:[0..15] si:[0..15] ss:[0..15] Stack +0002:[0..15] Stack +0004:[0..15] Stack +0006:[0..15] Stack +0008:[0..15]
// LiveOut: ax bp cx di ds dx si sp
// Trashed: SCZO ax bp bx cx di ds dx es si sp Top
// Preserved: D
fn0800_4234_entry:
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_4234:
	word16 bp_27
	word16 dx_32
	word16 sp_35
	word16 cx_29
	word16 di_30
	selector ds_31
	word16 si_104
	word16 ax_26 = fn0800_AA7E(si, di, ds, wArg02, wArg04, wArg06, wArg08, out cx_29, out dx_32, out bp_27, out si_104, out di_30, out ds_31)
	Mem41[ss:bp_27 - 0x0002:word16] = dx_32
	Mem42[ss:bp_27 - 0x0004:word16] = ax_26
	branch (ax_26 | Mem42[ss:bp_27 - 0x0002:word16]) != 0x0000 l0800_4267
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_4257:
	Mem49[ss:sp_35 + 0x0006:word16] = Mem42[ss:bp_27 + 0x0006:word16]
	Mem52[ss:sp_35 + 0x0004:word16] = Mem49[ss:bp_27 + 0x0004:word16]
	Mem55[ss:sp_35 + 0x0002:word16] = 0x0007
	// Failed to bind call argument.
	// Please report this issue at https://github.com/uxmal/reko
	word16 stackArg6 = <invalid>
	fn0800_0D24(ds_31, Mem55[ss:sp_35 + 0x0002:word16], Mem55[ss:sp_35 + 0x0004:segptr32], stackArg6, out cx_29, out dx_115, out bx_116, out si_104, out di_30, out es_117, out ds_31, out Top_118)
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_4267:
	word16 dx_75 = Mem74[ss:bp_27 - 0x0002:word16]
	word16 ax_76 = Mem74[ss:bp_27 - 0x0004:word16]
	word16 bp_78 = Mem74[ss:bp_27:word16]
	cxOut = cx_29
	dxOut = dx_75
	bpOut = bp_78
	siOut = si_104
	diOut = di_30
	dsOut = ds_31
	return ax_76
// DataOut:
// DataOut (flags):
// SymbolicIn:

fn0800_4234_exit:
// DataOut:
// DataOut (flags):
// SymbolicIn:



word16 fn0800_4271(selector ds, word16 wArg02, word16 wArg04, ptr16 & dxOut)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  ds:[0..15] Stack +0002:[0..15] Stack +0004:[0..15]
// LiveOut: ax dx
// Trashed: SCZO ax dx Top
// Preserved: bp sp
fn0800_4271_entry:
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_4271:
	branch wArg04 != Mem7[ds:0x29E5:word16] l0800_428D
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_4280:
	branch wArg02 != Mem7[ds:0x29E3:word16] l0800_428D
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_428D:
	branch wArg04 != Mem7[ds:0x29E1:word16] l0800_42A6
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_4299:
	branch wArg02 != Mem7[ds:0x29DF:word16] l0800_42A6
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_42A6:
	branch wArg04 != Mem7[ds:0x29D1:word16] l0800_42BF
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_42B2:
	branch wArg02 != Mem7[ds:0x29CF:word16] l0800_42BF
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_42BF:
	branch wArg04 != Mem7[ds:0x29DD:word16] l0800_42D8
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_42CB:
	branch wArg02 != Mem7[ds:0x29DB:word16] l0800_42D8
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_42D8:
	branch wArg04 != Mem7[ds:0x29D9:word16] l0800_42F1
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_42E4:
	branch wArg02 != Mem7[ds:0x29D7:word16] l0800_42F1
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_42F1:
	branch wArg04 != Mem7[ds:0x29D5:word16] l0800_430A
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_42FD:
	branch wArg02 != Mem7[ds:0x29D3:word16] l0800_430A
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_430A:
	dxOut = <invalid>
	return 0x0A60
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_4303:
	dxOut = <invalid>
	return 0x43AD
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_42EA:
	dxOut = <invalid>
	return 0x4412
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_42D1:
	dxOut = <invalid>
	return 0x4477
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_42B8:
	dxOut = <invalid>
	return 0x4348
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_429F:
	dxOut = <invalid>
	return 0x44DC
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_4286:
	dxOut = <invalid>
	return 0x4541
// DataOut:
// DataOut (flags):
// SymbolicIn:

fn0800_4271_exit:
// DataOut:
// DataOut (flags):
// SymbolicIn:



word16 fn0800_4311(word16 wArg02, word16 wArg04, ptr16 & dxOut, ptr16 & bpOut, ptr16 & siOut, ptr16 & diOut, ptr16 & dsOut)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  ss:[0..15]
// LiveOut: ax bp di ds dx si sp
// Trashed: SCZO ax bp bx cx di ds dx es si sp Top
// Preserved: D
fn0800_4311_entry:
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_4311:
	// Failed to bind call argument.
	// Please report this issue at https://github.com/uxmal/reko
	// Failed to bind call argument.
	// Please report this issue at https://github.com/uxmal/reko
	word16 stackArg2 = <invalid>
	word16 stackArg4 = <invalid>
	word16 bp_18
	word16 dx_23
	word16 sp_26
	word16 di_21
	selector ds_22
	word16 si_25
	word16 ax_17 = fn0800_9F89(stackArg2, stackArg4, out dx_23, out bp_18, out si_25, out di_21, out ds_22)
	Mem32[ss:bp_18 - 0x0002:word16] = dx_23
	Mem33[ss:bp_18 - 0x0004:word16] = ax_17
	branch (ax_17 | dx_23) != 0x0000 l0800_433C
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_432D:
	Mem39[ss:sp_26 + 0x0002:word16] = ds_22
	Mem42[ss:sp_26:word16] = 0x0A6C
	Mem45[ss:sp_26 - 2:word16] = 0x0006
	// Failed to bind call argument.
	// Please report this issue at https://github.com/uxmal/reko
	word16 stackArg6 = <invalid>
	fn0800_0D24(ds_22, Mem45[ss:sp_26 - 2:word16], Mem45[ss:sp_26:segptr32], stackArg6, out cx_102, out dx_103, out bx_104, out si_25, out di_21, out es_105, out ds_22, out Top_106)
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_433C:
	word16 ax_66 = Mem64[ss:bp_18 - 0x0004:word16]
	word16 bp_68 = Mem64[ss:bp_18:word16]
	dxOut = Mem64[ss:bp_18 - 0x0002:word16]
	bpOut = bp_68
	siOut = si_25
	diOut = di_21
	dsOut = ds_22
	return ax_66
// DataOut:
// DataOut (flags):
// SymbolicIn:

fn0800_4311_exit:
// DataOut:
// DataOut (flags):
// SymbolicIn:



word16 fn0800_4346(selector ds, word16 wArg02, word16 wArg04, ptr16 & cxOut, ptr16 & dxOut, ptr16 & bxOut, ptr16 & dsOut)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  ds:[0..15] Stack +0004:[0..15]
// LiveOut: ax bx cx ds dx
// Trashed: SCZO ax bx cx ds dx es Top
// Preserved: bp sp
fn0800_4346_entry:
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_4346:
	selector ds_16
	word16 dx_17
	word16 bx_19
	word16 cx_21
	word16 ax_18 = fn0800_9E75(ds, wArg04, out cx_21, out dx_17, out bx_19, out ds_16)
	cxOut = cx_21
	dxOut = dx_17
	bxOut = bx_19
	dsOut = ds_16
	return ax_18
// DataOut:
// DataOut (flags):
// SymbolicIn:

fn0800_4346_exit:
// DataOut:
// DataOut (flags):
// SymbolicIn:



word16 fn0800_4357(segptr32 ptrArg02, segptr32 ptrArg06)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  Stack +0002:[0..31] Stack +0006:[0..31]
// LiveOut: ax
// Trashed: SCZO ax bx dl es Top
// Preserved: bp sp
fn0800_4357_entry:
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_4357:
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_43B9:
	branch Mem11[ptrArg06:byte] != 0x00 l0800_435C
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_435C:
	byte al_20 = Mem11[ptrArg06:byte]
	word16 ax_22 = (int16) al_20
	branch ax_22 == 0x002A l0800_4379
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_4379:
	branch Mem27[ptrArg02:byte] == 0x2E l0800_43B6
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_4382:
	branch Mem27[ptrArg02:byte] != 0x00 l0800_4376
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_4376:
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_4388:
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_436A:
	branch ax_22 == 0x002E l0800_439E
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_439E:
	branch Mem11[ptrArg02:byte] == 0x00 l0800_43B6
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_436F:
	branch ax_22 == 0x003F l0800_438A
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_438A:
	branch Mem11[ptrArg02:byte] == 0x2E l0800_43B6
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_4393:
	branch Mem11[ptrArg02:byte] == 0x00 l0800_43B6
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_4399:
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_4374:
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_43A7:
	branch al_20 == Mem11[ptrArg02:byte] l0800_43B3
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_43B3:
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_43B6:
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_43AF:
	return 0x0000
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_43C2:
	word16 ax_122
	branch Mem11[ptrArg02:byte] != 0x00 l0800_43D0
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_43D0:
	ax_122 = 0x0000
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_43CB:
	ax_122 = 0x0001
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_43D2:
	return ax_122
// DataOut:
// DataOut (flags):
// SymbolicIn:

fn0800_4357_exit:
// DataOut:
// DataOut (flags):
// SymbolicIn:



void fn0800_43D4(word16 wArg02, selector psegArg04, word16 wArg06)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  Stack +0002:[0..15] Stack +0004:[0..15] Stack +0006:[0..15]
// LiveOut:
// Trashed: SCZO ax cx dx es Top
// Preserved: bp si sp
fn0800_43D4_entry:
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_43D4:
	word16 cx_12 = wArg06
	word16 si_18 = wArg02 + (word16) (wArg06 *s 0x000C)
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_440F:
	si_18 = si_18 - 0x000C
	cx_12 = cx_12 - 0x0001
	branch cx_12 != 0x0000 l0800_43E9
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_43E9:
	Mem33[psegArg04:si_18 + 0x0002:word16] = 0x0000
	Mem34[psegArg04:si_18:word16] = 0x0000
	Mem35[psegArg04:si_18 + 0x0004:word16] = 0xFFFF
	Mem36[psegArg04:si_18 + 0x0008:word16] = 0x0000
	Mem37[psegArg04:si_18 + 0x0006:word16] = 0x0000
	Mem38[psegArg04:si_18 + 0x000A:word16] = 0x0000
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_4419:
	return
// DataOut:
// DataOut (flags):
// SymbolicIn:

fn0800_43D4_exit:
// DataOut:
// DataOut (flags):
// SymbolicIn:



word16 fn0800_441C(selector ds, segptr32 ptrArg02, selector psegArg04, word16 wArg06, ptr16 & bpOut)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  ds:[0..15] ss:[0..15] Stack +0002:[0..31] Stack +0006:[0..15]
// LiveOut: bp cx sp
// Trashed: SCZO ax bp bx cx di dx es si sp Top
// Preserved:
fn0800_441C_entry:
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_441C:
	word16 bp_118 = fp - 2
	word16 di_16 = 0x0000
	word16 cx_120 = 0x0000
	word16 si_23 = wArg02
	branch wArg06 <=u 0x0000 l0800_4452
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_4439:
	branch (Mem28[psegArg04_279:si_23:word16] | Mem28[psegArg04_279:si_23 + 0x0002:word16]) == 0x0000 l0800_4449
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_4445:
	di_16 = di_16 + 0x0001
	wLoc04 = cx_120
	Mem47 = Mem40
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_4449:
	si_23 = si_23 + 0x000C
	cx_120 = cx_120 + 0x0001
	branch cx_120 <u wArg06 l0800_4439
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_4452:
	segptr32 ptrArg02_286
	segptr32 ptrArg02_290
	branch di_16 != 0x0000 l0800_4459
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_4459:
	branch di_16 == 0x0001 l0800_4461
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_4461:
	selector es_69 = SLICE(psegArg04_279, selector, 16)
	word16 bx_67 = (word16) (psegArg04_279 + wLoc04 *s 0x000C)
	Mem71[es_69:bx_67 + 0x000A:word16] = Mem60[es_69:bx_67 + 0x000A:word16] + 0x0001
	bpOut = bp
	return cx_120
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_445E:
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_4525:
	branch fn0800_463B(ds, psegArg04_279, psegArg04_279, wArg06) == 0x0000 l0800_453B
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_453B:
	cx_120 = fn0800_4550(out bp_118)
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_4538:
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_4478:
	ptrArg02_286 = SEQ(psegArg04_279, psegArg04_279) (alias)
	word16 ax_135 = (word16) (Mem94[ds:0x4658:word16] *s 0x000C)
	selector es_140 = SLICE(ptrArg02_286, selector, 16)
	word16 bx_139 = (word16) ptrArg02_286 + ax_135
	word16 ax_150 = (word16) (Mem144[ds:0x465A:word16] *s 0x000C)
	word16 ax_141 = Mem94[es_140:bx_139 + 0x0002:word16]
	word16 dx_142 = Mem94[es_140:bx_139:word16]
	word16 bx_153 = ptrArg02_286 + ax_150
	Mem157[es_140:bx_153:word16] = v23_156
	ui32 v24_v23_250 = SEQ(Mem157[es_140:bx_153 + 0x0002:word16], Mem148[es_140:bx_153:word16]) + SEQ(ax_141, dx_142)
	Mem163[es_140:bx_153 + 0x0002:word16] = SLICE(v24_v23_250, word16, 16)
	word16 bx_165 = ptrArg02_286 + ax_135
	Mem166[es_140:bx_165 + 0x0002:word16] = 0x0000
	Mem167[es_140:bx_165:word16] = 0x0000
	word16 bx_169 = ptrArg02_286 + ax_150
	Mem172[es_140:bx_169 + 0x000A:word16] = Mem167[es_140:bx_169 + 0x000A:word16] + 0x0001
	word16 cx_136 = ax_135
	word16 dx_151 = ax_150
	word16 v23_156 = (word16) v24_v23_250
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_44DD:
	selector es_182 = SLICE(ptrArg02_286, selector, 16)
	word16 bx_180 = (word16) ptrArg02_286 + dx_151
	branch Mem176[es_182:bx_180 + 0x0004:word16] != 0xFFFF l0800_44C3
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_44C3:
	word16 ax_186 = Mem176[ptrArg02_286:bx_180 + 0x0004:word16]
	Mem188[ds:0x465A:word16] = ax_186
	word16 ax_191 = (word16) (ax_186 *s 0x000C)
	word16 bx_194 = ptrArg02_286 + ax_191
	Mem197[ptrArg02_286:bx_194 + 0x000A:word16] = Mem188[ptrArg02_286:bx_194 + 0x000A:word16] + 0x0001
	dx_151 = ax_191
	ptrArg02_286 = ptrArg02_294
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_44EB:
	Mem200[es_182:bx_180 + 0x0004:word16] = Mem176[ds:0x4658:word16]
	word16 bx_203 = ptrArg02_286 + ax_135
	Mem206[es_182:bx_203 + 0x000A:word16] = Mem200[es_182:bx_203 + 0x000A:word16] + 0x0001
	ptrArg02_290 = ptrArg02_286
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_4517:
	word16 bx_214 = (word16) ptrArg02_290 + cx_136
	psegArg04_279 = ptrArg02_290
	psegArg04_279 = ptrArg02_290
	branch Mem210[SLICE(ptrArg02_290, selector, 16):bx_214 + 0x0004:word16] != 0xFFFF l0800_44FD
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_44FD:
	word16 ax_220 = Mem210[ptrArg02_290:bx_214 + 0x0004:word16]
	Mem222[ds:0x4658:word16] = ax_220
	word16 ax_225 = (word16) (ax_220 *s 0x000C)
	word16 bx_228 = ptrArg02_290 + ax_225
	Mem231[ptrArg02_290:bx_228 + 0x000A:word16] = Mem222[ptrArg02_290:bx_228 + 0x000A:word16] + 0x0001
	cx_136 = ax_225
	ptrArg02_290 = ptrArg02_295
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_4456:
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_454A:
	bpOut = Mem235[ss:bp_118:word16]
	ptrArg02_294 = SEQ(ptrArg02_286, ptrArg02_286) (alias)
	ptrArg02_295 = SEQ(ptrArg02_290, ptrArg02_290) (alias)
	return cx_120
// DataOut:
// DataOut (flags):
// SymbolicIn:

fn0800_441C_exit:
// DataOut:
// DataOut (flags):
// SymbolicIn:



word16 fn0800_4550(ptr16 & bpOut)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  ss:[0..15]
// LiveOut: bp cx sp
// Trashed: SCZO ax bp bx cx di dx es si sp Top
// Preserved:
fn0800_4550_entry:
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_4550:
	word16 bp_103 = fp - 2
	word16 sp_117 = fp - 0x0010
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_45D6:
	branch Mem24[ss:bp_103 - 0x000A:word16] <=u 0x0010 l0800_4573
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_4573:
	word16 di_27 = 0x0000
	word16 si_28 = Mem24[ss:bp_103 + 0x0004:word16]
	branch Mem24[ss:bp_103 + 0x0008:word16] <=u 0x0000 l0800_45C3
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_457D:
	branch Mem33[Mem33[ss:bp_103 + 0x0006:selector]:si_28 + 0x000A:word16] != Mem33[ss:bp_103 - 0x000A:word16] l0800_45BA
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_4589:
	word16 sp_41 = sp_117 - 2
	Mem42[ss:sp_41:word16] = Mem33[ss:bp_103 - 0x000A:word16]
	Mem45[ss:sp_41 - 2:word16] = Mem42[ss:bp_103 - 0x0006:word16]
	Mem48[ss:sp_41 - 4:word16] = Mem45[ss:bp_103 - 0x0008:word16]
	Mem51[ss:sp_41 - 6:word16] = Mem48[ss:bp_103 - 0x0002:word16]
	Mem54[ss:sp_41 - 8:word16] = Mem51[ss:bp_103 - 0x0004:word16]
	// Failed to bind call argument.
	// Please report this issue at https://github.com/uxmal/reko
	word16 stackArg0 = <invalid>
	word16 dx_61
	word16 sp_63
	word16 ax_56 = fn0800_8BC2(bp_103, si_28, di_27, stackArg0, out cx, out dx_61, out bx_174, out bp_103, out si_28, out di_27)
	Mem70[ss:sp_63 + 0x0006:word16] = dx_61
	Mem72[ss:sp_63 + 0x0004:word16] = ax_56
	word16 dx_75
	word16 ax_73 = fn0800_45E2(Mem72[ss:sp_63 + 0x0004:word16], Mem72[ss:sp_63 + 0x0006:word16], Mem72[ss:sp_63 + 0x0008:word16], out dx_75)
	selector es_81 = Mem72[ss:bp_103 + 0x0006:selector]
	Mem82[es_81:si_28 + 0x0008:word16] = dx_75
	Mem83[es_81:si_28 + 0x0006:word16] = ax_73
	word16 ax_84 = Mem83[ss:bp_103 - 0x0006:word16]
	word16 dx_85 = Mem83[ss:bp_103 - 0x0008:word16]
	Mem87[ss:bp_103 - 0x0004:word16] = v20_86
	ui32 v21_v20_127 = SEQ(Mem87[ss:bp_103 - 0x0002:word16], Mem83[ss:bp_103 - 0x0004:word16]) + SEQ(ax_84, dx_85)
	Mem91[ss:bp_103 - 0x0002:word16] = SLICE(v21_v20_127, word16, 16)
	sp_117 = sp_63 + 0x000A
	word16 v20_86 = (word16) v21_v20_127
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_45BA:
	si_28 = si_28 + 0x000C
	di_27 = di_27 + 0x0001
	branch di_27 <u Mem99[ss:bp_103 + 0x0008:word16] l0800_457D
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_45C3:
	Mem106[ss:bp_103 - 0x000A:word16] = Mem104[ss:bp_103 - 0x000A:word16] + 0x0001
	word16 ax_107 = Mem106[ss:bp_103 - 0x0006:word16]
	word16 dx_113 = __rcr(Mem106[ss:bp_103 - 0x0008:word16], 0x01, SLICE(cond(ax_107 >>u 0x0001), bool, 1))
	Mem115[ss:bp_103 - 0x0006:word16] = ax_107 >>u 0x0001
	Mem116[ss:bp_103 - 0x0008:word16] = dx_113
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_45DC:
	bpOut = Mem24[ss:bp_103:word16]
	return cx
// DataOut:
// DataOut (flags):
// SymbolicIn:

fn0800_4550_exit:
// DataOut:
// DataOut (flags):
// SymbolicIn:



word16 fn0800_45E2(word16 wArg02, word16 wArg04, word16 wArg06, ptr16 & dxOut)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  Stack +0002:[0..15] Stack +0004:[0..15] Stack +0006:[0..15]
// LiveOut: ax dx
// Trashed: SCZO ax bx dx Top
// Preserved: bp sp
fn0800_45E2_entry:
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_45E2:
	word16 bx_11 = wArg06
	word16 wLoc04_67 = 0x0000
	word16 wLoc06_68 = 0x0000
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_462A:
	bx_11 = bx_11 - 0x0001
	branch bx_11 != 0x0000 l0800_45F7
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_45F7:
	word16 ax_30 = __rcl(wLoc04_67, 0x01, SLICE(cond(wLoc06_68 << 0x0001), bool, 1))
	wLoc06_68 = wLoc06_68 << 0x0001
	branch (wArg02 & 0x0001) == 0x0000 l0800_461A
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_4612:
	wLoc06_68 = wLoc06_68 | 0x0001
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_461A:
	wLoc04_67 = ax_30
	wArg04 = wArg04 >>u 0x0001
	wArg02 = __rcr(wArg02, 0x01, SLICE(cond(wArg04 >>u 0x0001), bool, 1))
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_4631:
	dxOut = wLoc04_67
	return wLoc06_68
// DataOut:
// DataOut (flags):
// SymbolicIn:

fn0800_45E2_exit:
// DataOut:
// DataOut (flags):
// SymbolicIn:



word16 fn0800_463B(selector ds, word16 wArg02, selector psegArg04, word16 wArg06)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  ds:[0..15] Stack +0002:[0..15] Stack +0004:[0..15] Stack +0006:[0..15]
// LiveOut: ax
// Trashed: SCZO ax cx dx Top
// Preserved: bp di es si sp
fn0800_463B_entry:
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_463B:
	word16 wLoc0C_155 = 0xFFFF
	word16 wLoc0E_156 = 0xFFFF
	word16 wLoc08_157 = 0xFFFF
	word16 wLoc0A_158 = 0xFFFF
	word16 cx_23 = 0x0000
	word16 si_24 = wArg02
	branch wArg06 <=u 0x0000 l0800_46D5
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_4661:
	word16 ax_32 = Mem29[psegArg04:si_24 + 0x0002:word16]
	word16 dx_33 = Mem29[psegArg04:si_24:word16]
	Mem106 = Mem35
	branch (dx_33 | ax_32) == 0x0000 l0800_46CD
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_4675:
	branch ax_32 >u wLoc08_157 l0800_46AB
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_4680:
	branch ax_32 <u wLoc08_157 l0800_4687
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_4682:
	branch dx_33 >=u wLoc0A_158 l0800_46AB
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_46AB:
	Mem106 = Mem35
	branch ax_32 >u wLoc0C_155 l0800_46CD
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_46B6:
	branch ax_32 <u wLoc0C_155 l0800_46BD
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_46B8:
	Mem106 = Mem35
	branch dx_33 >=u wLoc0E_156 l0800_46CD
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_46BD:
	Mem70[ds:0x4658:word16] = cx_23
	wLoc0C_155 = ax_32
	wLoc0E_156 = dx_33
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_4687:
	Mem80[ds:0x4658:word16] = Mem77[ds:0x465A:word16]
	Mem86[ds:0x465A:word16] = cx_23
	wLoc0C_155 = wLoc08_157
	wLoc0E_156 = wLoc0A_158
	wLoc08_157 = ax_32
	wLoc0A_158 = dx_33
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_46CD:
	si_24 = si_24 + 0x000C
	cx_23 = cx_23 + 0x0001
	branch cx_23 <u wArg06 l0800_4661
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_46D5:
	branch wLoc08_157 != 0xFFFF l0800_46E1
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_46DB:
	branch wLoc0A_158 == 0xFFFF l0800_46ED
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_46E1:
	branch wLoc0C_155 != 0xFFFF l0800_46F5
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_46E7:
	branch wLoc0E_156 != 0xFFFF l0800_46F5
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_46F5:
	return 0x0001
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_46ED:
	return 0x0000
// DataOut:
// DataOut (flags):
// SymbolicIn:

fn0800_463B_exit:
// DataOut:
// DataOut (flags):
// SymbolicIn:



word16 fn0800_46FE(selector ds, ptr16 & dxOut, ptr16 & dsOut)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  ds:[0..15] ss:[0..15]
// LiveOut: ax ds dx sp
// Trashed: SCZO ax bp bx cx di ds dx es si sp Top
// Preserved:
fn0800_46FE_entry:
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_46FE:
	branch Mem15[ds:0x2A05:word16] >u 0x0000 l0800_471F
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_470D:
	branch Mem15[ds:0x2A05:word16] <u 0x0000 l0800_4716
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_470F:
	branch Mem15[ds:0x2A03:word16] >=u 0x002A l0800_471F
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_471F:
	fn0800_ACB3(ds, Mem37[ds:0x29E3:word16], Mem33[ds:0x29E5:word16], 0x0000, out cx_1591, out dx_1592, out bx_1593, out es_1594)
	selector ds_62
	word16 ax_58 = fn0800_3FAD(ds, Mem54[ds:0x29E3:word16], Mem40[ds:0x29E5:word16], out cx_1595, out di_1596, out ds_62)
	branch Mem57[ds_62:0x2A05:word16] >u 0x0000 l0800_4761
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_4750:
	branch Mem57[ds_62:0x2A05:word16] <u 0x0000 l0800_4758
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_4752:
	branch ax_58 + 0x0024 <=u Mem57[ds_62:0x2A03:word16] l0800_4761
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_4761:
	word16 ax_101 = fn0800_ACB3(ds_62, Mem97[ds_62:0x29E3:word16], Mem93[ds_62:0x29E5:word16], 0x0000, out cx_1597, out dx_1598, out bx_1599, out es_1600)
	selector ds_121
	word16 dx_122
	fn0800_3F58(ds_62, Mem114[ds_62:0x29E3:word16], Mem100[ds_62:0x29E5:word16], out dx_122, out di_1601, out ds_121)
	// Failed to bind call argument.
	// Please report this issue at https://github.com/uxmal/reko
	word16 stackArg0 = <invalid>
	word16 dx_135
	word16 sp_136
	word16 ax_132 = fn0800_8CAA(ax_101, 0x08, dx_122, stackArg0, out cl_134, out dx_135)
	branch dx_135 != 0x0052 l0800_4798
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_4793:
	branch ax_132 == 0x4E43 l0800_47A1
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_47A1:
	Mem147[ss:sp_136 - 2:word16] = Mem117[ds_121:0x29E5:word16]
	Mem150[ss:sp_136 - 4:word16] = Mem147[ds_121:0x29E3:word16]
	// Failed to bind call argument.
	// Please report this issue at https://github.com/uxmal/reko
	word16 stackArg4 = <invalid>
	word16 dx_154
	word16 ax_151 = fn0800_AD2F(ds_121, Mem150[ss:sp_136 - 4:segptr32], stackArg4, out cx_1604, out dx_154)
	Mem169[ss:sp_136 - 2:word16] = 0x0000
	Mem172[ss:sp_136 - 4:word16] = 0x0000
	Mem174[ss:sp_136 - 6:word16] = 0x0002
	Mem177[ss:sp_136 - 8:word16] = Mem174[ds_121:0x29E5:word16]
	Mem180[ss:sp_136 - 10:word16] = Mem177[ds_121:0x29E3:word16]
	fn0800_ACB3(ds_121, Mem180[ss:sp_136 - 10:word16], Mem180[ss:sp_136 - 8:word16], Mem180[ss:sp_136 - 2:word16], out cx_1605, out dx_1606, out bx_1607, out es_1608)
	Mem194[ss:sp_136 - 2:word16] = Mem180[ds_121:0x29E5:word16]
	Mem197[ss:sp_136 - 4:word16] = Mem194[ds_121:0x29E3:word16]
	selector ds_202
	fn0800_3FAD(ds_121, Mem197[ss:sp_136 - 4:word16], Mem197[ss:sp_136 - 2:word16], out cx_1609, out di_1610, out ds_202)
	Mem215[ss:sp_136 - 2:word16] = Mem197[ds_202:0x29E5:word16]
	Mem218[ss:sp_136 - 4:word16] = Mem215[ds_202:0x29E3:word16]
	word16 di_222
	selector ds_223
	word16 ax_219 = fn0800_3FAD(ds_202, Mem218[ss:sp_136 - 4:word16], Mem218[ss:sp_136 - 2:word16], out cx_1611, out di_222, out ds_223)
	word16 wLoc0C_1465 = ax_219
	branch di_222 == 0x0000 l0800_47F3
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_47F0:
	wLoc0C_1465 = ax_219 - 0x0001
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_47F3:
	// Failed to bind call argument.
	// Please report this issue at https://github.com/uxmal/reko
	word16 stackArg0 = <invalid>
	word16 sp_252
	fn0800_8C69(wLoc0C_1465, 0x09, 0x0000, stackArg0, out cl_1613, out dx_1614)
	Mem268[ss:sp_252 - 2:word16] = 0x0000
	Mem271[ss:sp_252 - 4:word16] = 0x0000
	Mem273[ss:sp_252 - 6:word16] = 0x0016
	Mem277[ss:sp_252 - 8:word16] = Mem273[ds_223:0x29E5:word16]
	Mem280[ss:sp_252 - 10:word16] = Mem277[ds_223:0x29E3:word16]
	fn0800_ACB3(ds_223, Mem280[ss:sp_252 - 10:word16], Mem280[ss:sp_252 - 8:word16], Mem280[ss:sp_252 - 2:word16], out cx_1615, out dx_1616, out bx_1617, out es_1618)
	Mem294[ss:sp_252 - 2:word16] = Mem280[ds_223:0x29E5:word16]
	Mem297[ss:sp_252 - 4:word16] = Mem294[ds_223:0x29E3:word16]
	selector ds_302
	fn0800_3FAD(ds_223, Mem297[ss:sp_252 - 4:word16], Mem297[ss:sp_252 - 2:word16], out cx_1619, out di_1620, out ds_302)
	Mem314[ss:sp_252 - 2:word16] = Mem297[ds_302:0x29E5:word16]
	Mem317[ss:sp_252 - 4:word16] = Mem314[ds_302:0x29E3:word16]
	selector ds_322
	word16 ax_318 = fn0800_3FAD(ds_302, Mem317[ss:sp_252 - 4:word16], Mem317[ss:sp_252 - 2:word16], out cx_1621, out di_1622, out ds_322)
	Mem335[ss:sp_252 - 2:word16] = Mem332[ds_322:0x29E5:word16]
	Mem338[ss:sp_252 - 4:word16] = Mem335[ds_322:0x29E3:word16]
	selector ds_343
	word16 ax_339 = fn0800_3FAD(ds_322, Mem338[ss:sp_252 - 4:word16], Mem338[ss:sp_252 - 2:word16], out cx_1623, out di_1624, out ds_343)
	Mem356[ss:sp_252 - 2:word16] = Mem353[ds_343:0x29E5:word16]
	Mem359[ss:sp_252 - 4:word16] = Mem356[ds_343:0x29E3:word16]
	selector ds_364
	word16 ax_360 = fn0800_3FAD(ds_343, Mem359[ss:sp_252 - 4:word16], Mem359[ss:sp_252 - 2:word16], out cx_1625, out di_1626, out ds_364)
	Mem377[ss:sp_252 - 2:word16] = Mem374[ds_364:0x29E5:word16]
	Mem380[ss:sp_252 - 4:word16] = Mem377[ds_364:0x29E3:word16]
	selector ds_385
	word16 ax_381 = fn0800_3FAD(ds_364, Mem380[ss:sp_252 - 4:word16], Mem380[ss:sp_252 - 2:word16], out cx_1627, out di_1628, out ds_385)
	Mem398[ss:sp_252 - 2:word16] = Mem395[ds_385:0x29E5:word16]
	Mem401[ss:sp_252 - 4:word16] = Mem398[ds_385:0x29E3:word16]
	selector ds_406
	word16 ax_402 = fn0800_3FAD(ds_385, Mem401[ss:sp_252 - 4:word16], Mem401[ss:sp_252 - 2:word16], out cx_1629, out di_1630, out ds_406)
	Mem419[ss:sp_252 - 2:word16] = Mem416[ds_406:0x29E5:word16]
	Mem422[ss:sp_252 - 4:word16] = Mem419[ds_406:0x29E3:word16]
	selector ds_427
	word16 ax_423 = fn0800_3FAD(ds_406, Mem422[ss:sp_252 - 4:word16], Mem422[ss:sp_252 - 2:word16], out cx_1631, out di_1632, out ds_427)
	Mem440[ss:sp_252 - 2:word16] = Mem437[ds_427:0x29E5:word16]
	Mem443[ss:sp_252 - 4:word16] = Mem440[ds_427:0x29E3:word16]
	selector ds_448
	word16 ax_444 = fn0800_3FAD(ds_427, Mem443[ss:sp_252 - 4:word16], Mem443[ss:sp_252 - 2:word16], out cx_1633, out di_1634, out ds_448)
	Mem461[ss:sp_252 - 2:word16] = Mem458[ds_448:0x29E5:word16]
	Mem464[ss:sp_252 - 4:word16] = Mem461[ds_448:0x29E3:word16]
	word16 cx_467
	selector ds_469
	word16 ax_465 = fn0800_3FAD(ds_448, Mem464[ss:sp_252 - 4:word16], Mem464[ss:sp_252 - 2:word16], out cx_467, out di_1635, out ds_469)
	Mem482[ss:sp_252 - 2:word16] = Mem479[ds_469:0x29E1:word16]
	Mem485[ss:sp_252 - 4:word16] = Mem482[ds_469:0x29DF:word16]
	Mem488[ss:sp_252 - 6:word16] = 0x4D5A
	word16 cx_491
	selector ds_493
	fn0800_401E(cx_467, ds_469, Mem488[ss:sp_252 - 6:word16], Mem488[ss:sp_252 - 4:word16], Mem488[ss:sp_252 - 2:word16], out cx_491, out dx_1636, out bx_1637, out di_1638, out es_1639, out ds_493, out Top_1640)
	Mem504[ss:sp_252 - 2:word16] = Mem488[ds_493:0x29E1:word16]
	Mem507[ss:sp_252 - 4:word16] = Mem504[ds_493:0x29DF:word16]
	Mem512[ss:sp_252 - 6:word16] = 0x0000
	Mem514[ss:sp_252 - 8:word16] = 0x0000
	word16 cx_517
	selector ds_519
	fn0800_409C(cx_491, ds_493, Mem514[ss:sp_252 - 8:word16], Mem514[ss:sp_252 - 6:word16], Mem514[ss:sp_252 - 4:word16], Mem514[ss:sp_252 - 2:word16], out cx_517, out dx_1641, out di_1642, out es_1643, out ds_519, out Top_1644)
	Mem530[ss:sp_252 - 2:word16] = Mem514[ds_519:0x29E1:word16]
	Mem533[ss:sp_252 - 4:word16] = Mem530[ds_519:0x29DF:word16]
	Mem538[ss:sp_252 - 6:word16] = 0x0000
	Mem540[ss:sp_252 - 8:word16] = 0x0000
	word16 cx_543
	selector ds_545
	word16 ax_541 = fn0800_409C(cx_517, ds_519, Mem540[ss:sp_252 - 8:word16], Mem540[ss:sp_252 - 6:word16], Mem540[ss:sp_252 - 4:word16], Mem540[ss:sp_252 - 2:word16], out cx_543, out dx_1645, out di_1646, out es_1647, out ds_545, out Top_1648)
	Mem557[ss:sp_252 - 2:word16] = Mem540[ds_545:0x29E1:word16]
	Mem560[ss:sp_252 - 4:word16] = Mem557[ds_545:0x29DF:word16]
	Mem563[ss:sp_252 - 6:word16] = ax_360
	word16 cx_566
	selector ds_568
	word16 ax_564 = fn0800_40BF(ax_541, cx_543, ds_545, Mem563[ss:sp_252 - 6:byte], Mem563[ss:sp_252 - 4:word16], Mem563[ss:sp_252 - 2:word16], out cx_566, out dx_1649, out di_1650, out ds_568)
	Mem580[ss:sp_252 - 2:word16] = Mem563[ds_568:0x29E1:word16]
	Mem583[ss:sp_252 - 4:word16] = Mem580[ds_568:0x29DF:word16]
	Mem586[ss:sp_252 - 6:word16] = ax_381
	word16 cx_589
	selector ds_591
	word16 ax_587 = fn0800_40BF(ax_564, cx_566, ds_568, Mem586[ss:sp_252 - 6:byte], Mem586[ss:sp_252 - 4:word16], Mem586[ss:sp_252 - 2:word16], out cx_589, out dx_1651, out di_1652, out ds_591)
	Mem603[ss:sp_252 - 2:word16] = Mem586[ds_591:0x29E1:word16]
	Mem606[ss:sp_252 - 4:word16] = Mem603[ds_591:0x29DF:word16]
	Mem609[ss:sp_252 - 6:word16] = ax_465
	word16 cx_612
	selector ds_614
	word16 ax_610 = fn0800_40BF(ax_587, cx_589, ds_591, Mem609[ss:sp_252 - 6:byte], Mem609[ss:sp_252 - 4:word16], Mem609[ss:sp_252 - 2:word16], out cx_612, out dx_1653, out di_1654, out ds_614)
	Mem626[ss:sp_252 - 2:word16] = Mem609[ds_614:0x29E1:word16]
	Mem629[ss:sp_252 - 4:word16] = Mem626[ds_614:0x29DF:word16]
	Mem632[ss:sp_252 - 6:word16] = ax_444
	word16 cx_635
	selector ds_637
	fn0800_40BF(ax_610, cx_612, ds_614, Mem632[ss:sp_252 - 6:byte], Mem632[ss:sp_252 - 4:word16], Mem632[ss:sp_252 - 2:word16], out cx_635, out dx_1655, out di_1656, out ds_637)
	Mem648[ss:sp_252 - 2:word16] = Mem632[ds_637:0x29E1:word16]
	Mem651[ss:sp_252 - 4:word16] = Mem648[ds_637:0x29DF:word16]
	Mem656[ss:sp_252 - 6:word16] = 0x0000
	word16 cx_659
	selector ds_661
	word16 ax_657 = fn0800_401E(cx_635, ds_637, Mem656[ss:sp_252 - 6:word16], Mem656[ss:sp_252 - 4:word16], Mem656[ss:sp_252 - 2:word16], out cx_659, out dx_1657, out bx_1658, out di_1659, out es_1660, out ds_661, out Top_1661)
	Mem673[ss:sp_252 - 2:word16] = Mem656[ds_661:0x29E1:word16]
	Mem676[ss:sp_252 - 4:word16] = Mem673[ds_661:0x29DF:word16]
	Mem679[ss:sp_252 - 6:word16] = ax_402
	word16 cx_682
	selector ds_684
	word16 ax_680 = fn0800_40BF(ax_657, cx_659, ds_661, Mem679[ss:sp_252 - 6:byte], Mem679[ss:sp_252 - 4:word16], Mem679[ss:sp_252 - 2:word16], out cx_682, out dx_1662, out di_1663, out ds_684)
	Mem696[ss:sp_252 - 2:word16] = Mem679[ds_684:0x29E1:word16]
	Mem699[ss:sp_252 - 4:word16] = Mem696[ds_684:0x29DF:word16]
	Mem702[ss:sp_252 - 6:word16] = ax_423
	word16 cx_705
	selector ds_707
	fn0800_40BF(ax_680, cx_682, ds_684, Mem702[ss:sp_252 - 6:byte], Mem702[ss:sp_252 - 4:word16], Mem702[ss:sp_252 - 2:word16], out cx_705, out dx_1664, out di_1665, out ds_707)
	Mem719[ss:sp_252 - 2:word16] = Mem702[ds_707:0x29E1:word16]
	Mem722[ss:sp_252 - 4:word16] = Mem719[ds_707:0x29DF:word16]
	Mem725[ss:sp_252 - 6:word16] = 0x001E
	word16 cx_728
	selector ds_730
	word16 ax_726 = fn0800_40BF(0x001E, cx_705, ds_707, Mem725[ss:sp_252 - 6:byte], Mem725[ss:sp_252 - 4:word16], Mem725[ss:sp_252 - 2:word16], out cx_728, out dx_1666, out di_1667, out ds_730)
	Mem742[ss:sp_252 - 2:word16] = Mem725[ds_730:0x29E1:word16]
	Mem745[ss:sp_252 - 4:word16] = Mem742[ds_730:0x29DF:word16]
	Mem748[ss:sp_252 - 6:word16] = ax_339
	word16 cx_751
	selector ds_753
	fn0800_40BF(ax_726, cx_728, ds_730, Mem748[ss:sp_252 - 6:byte], Mem748[ss:sp_252 - 4:word16], Mem748[ss:sp_252 - 2:word16], out cx_751, out dx_1668, out di_1669, out ds_753)
	Mem764[ss:sp_252 - 2:word16] = Mem748[ds_753:0x29E1:word16]
	Mem767[ss:sp_252 - 4:word16] = Mem764[ds_753:0x29DF:word16]
	Mem772[ss:sp_252 - 6:word16] = 0x0000
	selector ds_1044
	fn0800_401E(cx_751, ds_753, Mem772[ss:sp_252 - 6:word16], Mem772[ss:sp_252 - 4:word16], Mem772[ss:sp_252 - 2:word16], out cx_1670, out dx_1671, out bx_1672, out di_1673, out es_1674, out ds_1044, out Top_1675)
	Mem788[ss:sp_252 - 2:word16] = 0x0000
	Mem795[ss:sp_252 - 4:word16] = 0x0000
	Mem797[ss:sp_252 - 6:word16] = ax_318 + 0x0020
	Mem800[ss:sp_252 - 8:word16] = Mem797[ds_1044:0x29E5:word16]
	Mem803[ss:sp_252 - 10:word16] = Mem800[ds_1044:0x29E3:word16]
	fn0800_ACB3(ds_1044, Mem803[ss:sp_252 - 10:word16], Mem803[ss:sp_252 - 8:word16], Mem803[ss:sp_252 - 2:word16], out cx_1676, out dx_1677, out bx_1678, out es_1679)
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_49B5:
	Mem822[ss:sp_252 - 2:word16] = Mem817[ds_1044:0x29E5:word16]
	Mem825[ss:sp_252 - 4:word16] = Mem822[ds_1044:0x29E3:word16]
	// Failed to bind call argument.
	// Please report this issue at https://github.com/uxmal/reko
	word16 stackArg4 = <invalid>
	word16 ax_840 = DPB(fn0800_3DCF(ds_1044, Mem825[ss:sp_252 - 4:segptr32], stackArg4, out cx_1691, out dx_1692, out di_1693, out es_1694, out ds_1044, out Top_1695), 0x00, 8)
	word16 di_842 = ax_840
	branch ax_840 == 0x0000 l0800_4A22
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_49CB:
	Mem848[ss:sp_252 - 2:word16] = Mem825[ds_1044:0x29E5:word16]
	Mem851[ss:sp_252 - 4:word16] = Mem848[ds_1044:0x29E3:word16]
	word16 ax_852 = fn0800_3FAD(ds_1044, Mem851[ss:sp_252 - 4:word16], Mem851[ss:sp_252 - 2:word16], out cx_1680, out di_842, out ds_1044)
	word16 si_867 = 0x0000
	word16 wLoc0C_1480 = di_842
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_4A15:
	wLoc0C_1480 = wLoc0C_1480 - 0x0001
	branch wLoc0C_1480 != 0x0000 l0800_49E3
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_49E3:
	Mem885[ss:sp_252 - 2:word16] = Mem876[ds_1044:0x29E5:word16]
	Mem888[ss:sp_252 - 4:word16] = Mem885[ds_1044:0x29E3:word16]
	// Failed to bind call argument.
	// Please report this issue at https://github.com/uxmal/reko
	word16 stackArg4 = <invalid>
	word16 cx_891
	selector ds_896
	word16 ax_904 = DPB(fn0800_3DCF(ds_1044, Mem888[ss:sp_252 - 4:segptr32], stackArg4, out cx_891, out dx_1682, out di_1683, out es_1684, out ds_896, out Top_1685), 0x00, 8)
	Mem909[ss:sp_252 - 2:word16] = Mem888[ds_896:0x29E1:word16]
	Mem912[ss:sp_252 - 4:word16] = Mem909[ds_896:0x29DF:word16]
	si_867 = si_867 + ax_904
	Mem914[ss:sp_252 - 6:word16] = si_867
	word16 cx_917
	selector ds_919
	word16 ax_915 = fn0800_40BF(ax_904, cx_891, ds_896, Mem914[ss:sp_252 - 6:byte], Mem914[ss:sp_252 - 4:word16], Mem914[ss:sp_252 - 2:word16], out cx_917, out dx_1686, out di_1687, out ds_919)
	Mem931[ss:sp_252 - 2:word16] = Mem914[ds_919:0x29E1:word16]
	Mem934[ss:sp_252 - 4:word16] = Mem931[ds_919:0x29DF:word16]
	Mem937[ss:sp_252 - 6:word16] = ax_852
	fn0800_40BF(ax_915, cx_917, ds_919, Mem937[ss:sp_252 - 6:byte], Mem937[ss:sp_252 - 4:word16], Mem937[ss:sp_252 - 2:word16], out cx_1688, out dx_1689, out di_842, out ds_1044)
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_4A1F:
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_4A22:
	branch di_842 != 0x0000 l0800_49B5
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_4A26:
	word16 cx_1025
	word16 di_1012
	Mem967[ss:sp_252 - 2:word16] = Mem962[ds_1044:0x29E1:word16]
	Mem970[ss:sp_252 - 4:word16] = Mem967[ds_1044:0x29DF:word16]
	// Failed to bind call argument.
	// Please report this issue at https://github.com/uxmal/reko
	word16 stackArg4 = <invalid>
	word16 dx_974
	word16 ax_971 = fn0800_AD2F(ds_1044, Mem970[ss:sp_252 - 4:segptr32], stackArg4, out cx_1697, out dx_974)
	branch dx_974 > 0x0000 l0800_4A56
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_4A38:
	branch dx_974 < 0x0000 l0800_4A3F
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_4A3A:
	branch ax_971 >=u 0x0200 l0800_4A56
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_4A56:
	Mem993[ss:sp_252 - 2:word16] = Mem970[ds_1044:0x29E1:word16]
	Mem996[ss:sp_252 - 4:word16] = Mem993[ds_1044:0x29DF:word16]
	// Failed to bind call argument.
	// Please report this issue at https://github.com/uxmal/reko
	word16 stackArg4 = <invalid>
	di_1012 = 0x0010 - fn0800_AD2F(ds_1044, Mem996[ss:sp_252 - 4:segptr32], stackArg4, out cx_1025, out dx_1699) & 0x000F
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_4A3F:
	Mem1019[ss:sp_252 - 2:word16] = Mem970[ds_1044:0x29E1:word16]
	Mem1022[ss:sp_252 - 4:word16] = Mem1019[ds_1044:0x29DF:word16]
	// Failed to bind call argument.
	// Please report this issue at https://github.com/uxmal/reko
	word16 stackArg4 = <invalid>
	di_1012 = 0x0200 - fn0800_AD2F(ds_1044, Mem1022[ss:sp_252 - 4:segptr32], stackArg4, out cx_1025, out dx_1701)
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_4A81:
	branch di_1012 != 0x0000 l0800_4A70
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_4A70:
	Mem1050[ss:sp_252 - 2:word16] = Mem1045[ds_1044:0x29E1:word16]
	Mem1053[ss:sp_252 - 4:word16] = Mem1050[ds_1044:0x29DF:word16]
	Mem1057[ss:sp_252 - 6:word16] = DPB(di_1012, 0x00, 0)
	// Failed to bind call argument.
	// Please report this issue at https://github.com/uxmal/reko
	word16 stackArg6 = <invalid>
	fn0800_4047(cx_1025, ds_1044, Mem1057[ss:sp_252 - 6:byte], Mem1057[ss:sp_252 - 4:segptr32], stackArg6, out cx_1025, out dx_1703, out bx_1704, out di_1012, out es_1705, out ds_1044, out Top_1706)
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_4A88:
	Mem1075[ss:sp_252 - 2:word16] = Mem1045[ds_1044:0x29E1:word16]
	Mem1078[ss:sp_252 - 4:word16] = Mem1075[ds_1044:0x29DF:word16]
	// Failed to bind call argument.
	// Please report this issue at https://github.com/uxmal/reko
	// Failed to bind call argument.
	// Please report this issue at https://github.com/uxmal/reko
	word16 stackArg4 = <invalid>
	word16 stackArg0 = <invalid>
	word16 dx_1082
	word16 sp_1095
	fn0800_8C8A(fn0800_AD2F(ds_1044, Mem1078[ss:sp_252 - 4:segptr32], stackArg4, out cx_1708, out dx_1082), 0x04, dx_1082, stackArg0, out cl_1710, out dx_1711)
	Mem1109[ss:sp_1095 - 2:word16] = 0x0000
	Mem1112[ss:sp_1095 - 4:word16] = dx_154
	Mem1115[ss:sp_1095 - 6:word16] = ax_151
	Mem1118[ss:sp_1095 - 8:word16] = Mem1115[ds_1044:0x29E5:word16]
	Mem1121[ss:sp_1095 - 10:word16] = Mem1118[ds_1044:0x29E3:word16]
	fn0800_ACB3(ds_1044, Mem1121[ss:sp_1095 - 10:word16], Mem1121[ss:sp_1095 - 8:word16], Mem1121[ss:sp_1095 - 2:word16], out cx_1712, out dx_1713, out bx_1714, out es_1715)
	word16 bp_1134
	selector ds_1138
	word16 sp_1142
	word16 ax_1133 = fn0800_5374(ds_1044, out dx_1716, out bp_1134, out ds_1138)
	branch ax_1133 == 0x0000 l0800_4AC4
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_4AC4:
	Mem1155[ss:sp_1142 - 2:word16] = Mem1121[ds_1138:0x29E1:word16]
	Mem1158[ss:sp_1142 - 4:word16] = Mem1155[ds_1138:0x29DF:word16]
	// Failed to bind call argument.
	// Please report this issue at https://github.com/uxmal/reko
	word16 stackArg4 = <invalid>
	word16 dx_1162
	word16 ax_1159 = fn0800_AD2F(ds_1138, Mem1158[ss:sp_1142 - 4:segptr32], stackArg4, out cx_1718, out dx_1162)
	Mem1169[ss:bp_1134 - 0x0006:word16] = dx_1162
	Mem1170[ss:bp_1134 - 0x0008:word16] = ax_1159
	Mem1175[ss:sp_1142 - 2:word16] = 0x0000
	Mem1178[ss:sp_1142 - 4:word16] = Mem1175[ss:bp_1134 - 0x0002:word16]
	Mem1181[ss:sp_1142 - 6:word16] = Mem1178[ss:bp_1134 - 0x0004:word16]
	Mem1184[ss:sp_1142 - 8:word16] = Mem1181[ds_1138:0x29E5:word16]
	Mem1187[ss:sp_1142 - 10:word16] = Mem1184[ds_1138:0x29E3:word16]
	word16 dx_1191
	word16 ax_1188 = fn0800_ACB3(ds_1138, Mem1187[ss:sp_1142 - 10:word16], Mem1187[ss:sp_1142 - 8:word16], Mem1187[ss:sp_1142 - 2:word16], out cx_1719, out dx_1191, out bx_1720, out es_1721)
	Mem1201[ss:sp_1142 - 2:word16] = Mem1187[ds_1138:0x29E5:word16]
	Mem1204[ss:sp_1142 - 4:word16] = Mem1201[ds_1138:0x29E3:word16]
	fn0800_4194(ds_1138, Mem1204[ss:sp_1142 - 4:word16], Mem1204[ss:sp_1142 - 2:word16])
	ui32 dx_ax_1445 = SEQ(dx_1191, ax_1188) - SEQ(Mem1204[ss:bp_1134 - 0x0002:word16], Mem1204[ss:bp_1134 - 0x0004:word16])
	Mem1219[ss:sp_1142 - 2:word16] = SLICE(dx_ax_1445, word16, 16)
	Mem1221[ss:sp_1142 - 4:word16] = (word16) dx_ax_1445
	Mem1224[ss:sp_1142 - 6:word16] = Mem1221[ds_1138:0x29E1:word16]
	Mem1227[ss:sp_1142 - 8:word16] = Mem1224[ds_1138:0x29DF:word16]
	Mem1230[ss:sp_1142 - 10:word16] = Mem1227[ds_1138:0x29E5:word16]
	Mem1233[ss:sp_1142 - 12:word16] = Mem1230[ds_1138:0x29E3:word16]
	word16 bp_1235
	selector ds_1239
	fn0800_3B0A(Mem1233[ss:sp_1142 - 4:word16], Mem1233[ss:sp_1142 - 2:word16], out cx_1722, out dx_1723, out bp_1235, out ds_1239)
	// Failed to bind call argument.
	// Please report this issue at https://github.com/uxmal/reko
	word16 di_1250 = Mem1233[ss:bp_1235 - 0x0008:word16]
	word16 stackArg0 = <invalid>
	word16 sp_1261
	Mem1266[ss:bp_1235 - 0x000A:word16] = fn0800_8CAA(Mem1233[ss:bp_1235 - 0x0008:word16], 0x09, Mem1233[ss:bp_1235 - 0x0006:word16], stackArg0, out cl_1725, out dx_1726)
	branch (di_1250 & 0x01FF) == 0x0000 l0800_4B37
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_4B34:
	Mem1272[ss:bp_1235 - 0x000A:word16] = Mem1266[ss:bp_1235 - 0x000A:word16] + 0x0001
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_4B37:
	Mem1280[ss:sp_1261 - 2:word16] = 0x0000
	Mem1283[ss:sp_1261 - 4:word16] = 0x0000
	Mem1285[ss:sp_1261 - 6:word16] = 0x0002
	Mem1289[ss:sp_1261 - 8:word16] = Mem1285[ds_1239:0x29E1:word16]
	Mem1292[ss:sp_1261 - 10:word16] = Mem1289[ds_1239:0x29DF:word16]
	word16 cx_1295
	word16 ax_1293 = fn0800_ACB3(ds_1239, Mem1292[ss:sp_1261 - 10:word16], Mem1292[ss:sp_1261 - 8:word16], Mem1292[ss:sp_1261 - 2:word16], out cx_1295, out dx_1727, out bx_1728, out es_1729)
	Mem1306[ss:sp_1261 - 2:word16] = Mem1292[ds_1239:0x29E1:word16]
	Mem1309[ss:sp_1261 - 4:word16] = Mem1306[ds_1239:0x29DF:word16]
	Mem1312[ss:sp_1261 - 6:word16] = di_1250 & 0x01FF
	word16 cx_1315
	selector ds_1317
	word16 ax_1313 = fn0800_40BF(ax_1293, cx_1295, ds_1239, Mem1312[ss:sp_1261 - 6:byte], Mem1312[ss:sp_1261 - 4:word16], Mem1312[ss:sp_1261 - 2:word16], out cx_1315, out dx_1730, out di_1731, out ds_1317)
	Mem1329[ss:sp_1261 - 2:word16] = Mem1312[ds_1317:0x29E1:word16]
	Mem1332[ss:sp_1261 - 4:word16] = Mem1329[ds_1317:0x29DF:word16]
	Mem1336[ss:sp_1261 - 6:word16] = Mem1332[ss:bp_1235 - 0x000A:word16]
	word16 cx_1339
	selector ds_1341
	word16 ax_1337 = fn0800_40BF(ax_1313, cx_1315, ds_1317, Mem1336[ss:sp_1261 - 6:byte], Mem1336[ss:sp_1261 - 4:word16], Mem1336[ss:sp_1261 - 2:word16], out cx_1339, out dx_1732, out di_1733, out ds_1341)
	Mem1353[ss:sp_1261 - 2:word16] = Mem1336[ds_1341:0x29E1:word16]
	Mem1356[ss:sp_1261 - 4:word16] = Mem1353[ds_1341:0x29DF:word16]
	Mem1359[ss:sp_1261 - 6:word16] = Mem1356[ss:bp_1235 - 0x000C:word16]
	word16 cx_1362
	selector ds_1364
	word16 ax_1360 = fn0800_40BF(ax_1337, cx_1339, ds_1341, Mem1359[ss:sp_1261 - 6:byte], Mem1359[ss:sp_1261 - 4:word16], Mem1359[ss:sp_1261 - 2:word16], out cx_1362, out dx_1734, out di_1735, out ds_1364)
	Mem1376[ss:sp_1261 - 2:word16] = Mem1359[ds_1364:0x29E1:word16]
	Mem1379[ss:sp_1261 - 4:word16] = Mem1376[ds_1364:0x29DF:word16]
	Mem1382[ss:sp_1261 - 6:word16] = Mem1379[ss:bp_1235 - 0x000E:word16]
	selector ds_1387
	word16 dx_1388
	fn0800_40BF(ax_1360, cx_1362, ds_1364, Mem1382[ss:sp_1261 - 6:byte], Mem1382[ss:sp_1261 - 4:word16], Mem1382[ss:sp_1261 - 2:word16], out cx_1736, out dx_1388, out di_1737, out ds_1387)
	dxOut = dx_1388
	dsOut = ds_1387
	return 0x0000
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_4ABE:
	dxOut = ax_1133
	dsOut = ds_1138
	return ax_1133
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_4798:
	dxOut = dx_135
	dsOut = ds_121
	return 0x0007
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_4758:
	dxOut = 0x0000
	dsOut = ds_62
	return 0x0007
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_4716:
	dxOut = dx
	dsOut = ds
	return 0x0007
// DataOut:
// DataOut (flags):
// SymbolicIn:

fn0800_46FE_exit:
// DataOut:
// DataOut (flags):
// SymbolicIn:



word16 fn0800_4B97(word16 ax, word16 dx, selector ds, ptr16 & dxOut, ptr16 & dsOut)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  ax:[0..15] ds:[0..15] dx:[0..15] ss:[0..15]
// LiveOut: ax ds dx sp
// Trashed: SCZO ax bp bx cx di ds dx es si sp Top
// Preserved:
fn0800_4B97_entry:
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_4B97:
	selector ds_19
	word16 dx_20
	branch fn0800_5DCE(ax, dx, ds, Mem9[ds:0x29E3:word16], Mem0[ds:0x29E5:word16], out dx_20, out ds_19) != 0x0000 l0800_4BAD
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_4BAD:
	selector ds_37
	word16 dx_38
	word16 ax_32 = fn0800_5374(ds_19, out dx_38, out bp_71, out ds_37)
	dxOut = dx_38
	dsOut = ds_37
	return ax_32
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_4BA9:
	dxOut = dx_20
	dsOut = ds_19
	return 0x0007
// DataOut:
// DataOut (flags):
// SymbolicIn:

fn0800_4B97_exit:
// DataOut:
// DataOut (flags):
// SymbolicIn:



word16 fn0800_4BB1(word16 ax, word16 dx, selector ds, ptr16 & dxOut, ptr16 & dsOut)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  ax:[0..15] ds:[0..15] dx:[0..15] ss:[0..15]
// LiveOut: ax ds dx sp
// Trashed: SCZO ax bp bx cx di ds dx es si sp Top
// Preserved:
fn0800_4BB1_entry:
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_4BB1:
	selector ds_19
	word16 dx_20
	branch fn0800_5DCE(ax, dx, ds, Mem9[ds:0x29E3:word16], Mem0[ds:0x29E5:word16], out dx_20, out ds_19) != 0x0000 l0800_4BC7
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_4BC7:
	word16 cx_49
	fn0800_ACB3(ds_19, Mem43[ds_19:0x29E3:word16], Mem40[ds_19:0x29E5:word16], 0x0001, out cx_49, out dx_264, out bx_265, out es_266)
	fn0800_401E(cx_49, ds_19, 0x601A, Mem60[ds_19:0x29DF:word16], Mem46[ds_19:0x29E1:word16], out cx_267, out dx_268, out bx_269, out di_270, out es_271, out ds_272, out Top_273)
	word16 cx_103
	selector ds_105
	word16 sp_109
	fn0800_3B0A(0x0010, 0x0000, out cx_103, out dx_274, out bp_275, out ds_105)
	Mem118[ss:sp_109 + 0x000A:word16] = Mem99[ds_105:0x29E1:word16]
	Mem121[ss:sp_109 + 0x0008:word16] = Mem118[ds_105:0x29DF:word16]
	Mem126[ss:sp_109 + 0x0006:word16] = 0x0000
	Mem128[ss:sp_109 + 0x0004:word16] = 0x0000
	word16 cx_131
	selector ds_133
	fn0800_409C(cx_103, ds_105, Mem128[ss:sp_109 + 0x0004:word16], Mem128[ss:sp_109 + 0x0006:word16], Mem128[ss:sp_109 + 0x0008:word16], Mem128[ss:sp_109 + 0x000A:word16], out cx_131, out dx_276, out di_277, out es_278, out ds_133, out Top_279)
	Mem144[ss:sp_109 + 0x000A:word16] = Mem128[ds_133:0x29E1:word16]
	Mem147[ss:sp_109 + 0x0008:word16] = Mem144[ds_133:0x29DF:word16]
	Mem152[ss:sp_109 + 0x0006:word16] = 0x0000
	Mem154[ss:sp_109 + 0x0004:word16] = 0x0000
	selector ds_159
	fn0800_409C(cx_131, ds_133, Mem154[ss:sp_109 + 0x0004:word16], Mem154[ss:sp_109 + 0x0006:word16], Mem154[ss:sp_109 + 0x0008:word16], Mem154[ss:sp_109 + 0x000A:word16], out cx_280, out dx_281, out di_282, out es_283, out ds_159, out Top_284)
	Mem171[ss:sp_109 + 0x000A:word16] = Mem154[ds_159:0x29E1:word16]
	Mem174[ss:sp_109 + 0x0008:word16] = Mem171[ds_159:0x29DF:word16]
	Mem177[ss:sp_109 + 0x0006:word16] = Mem174[ds_159:0x29E5:word16]
	Mem180[ss:sp_109 + 0x0004:word16] = Mem177[ds_159:0x29E3:word16]
	word16 cx_183
	selector ds_185
	Mem196[ss:sp_109 + 0x0006:word16] = fn0800_3E27(ds_159, Mem180[ss:sp_109 + 0x0004:word16], Mem180[ss:sp_109 + 0x0006:word16], out cx_183, out dx_285, out di_286, out es_287, out ds_185, out Top_288)
	selector ds_201
	fn0800_401E(cx_183, ds_185, Mem196[ss:sp_109 + 0x0006:word16], Mem196[ss:sp_109 + 0x0008:word16], Mem196[ss:sp_109 + 0x000A:word16], out cx_289, out dx_290, out bx_291, out di_292, out es_293, out ds_201, out Top_294)
	selector ds_216
	word16 dx_217
	word16 ax_211 = fn0800_5374(ds_201, out dx_217, out bp_295, out ds_216)
	dxOut = dx_217
	dsOut = ds_216
	return ax_211
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_4BC3:
	dxOut = dx_20
	dsOut = ds_19
	return 0x0007
// DataOut:
// DataOut (flags):
// SymbolicIn:

fn0800_4BB1_exit:
// DataOut:
// DataOut (flags):
// SymbolicIn:



word16 fn0800_4C55(word16 ax, word16 bp, selector ds, ptr16 & dxOut, ptr16 & dsOut)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  ax:[0..15] bp:[0..15] ds:[0..15] ss:[0..15]
// LiveOut: ax ds dx sp
// Trashed: SCZO ax bp bx cx di ds dx es sp Top
// Preserved:
fn0800_4C55_entry:
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_4C55:
	selector ds_21
	word16 dx_22
	word16 cx_19 = fn0800_3E5D(ds, Mem14[ds:0x29E3:word16], Mem7[ds:0x29E5:word16], out dx_22, out di_897, out es_898, out ds_21, out Top_899)
	branch dx_22 != 0x0000 l0800_4C72
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_4C6D:
	branch ax == 0x03F3 l0800_4C79
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_4C79:
	selector ds_109
	word16 ax_180 = fn0800_409C(cx_19, ds_21, 0x03F3, 0x0000, Mem39[ds_21:0x29DF:word16], Mem17[ds_21:0x29E1:word16], out cx_900, out dx_901, out di_902, out es_903, out ds_109, out Top_904)
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_4C8E:
	selector ds_78
	word16 dx_79
	fn0800_409C(fn0800_3E5D(ds_109, Mem71[ds_109:0x29E3:word16], Mem66[ds_109:0x29E5:word16], out dx_79, out di_913, out es_914, out ds_78, out Top_915), ds_78, ax_180, dx_79, Mem96[ds_78:0x29DF:word16], Mem93[ds_78:0x29E1:word16], out cx_916, out dx_917, out di_918, out es_919, out ds_109, out Top_920)
	word16 wLoc08_708 = dx_79
	word16 wLoc0A_709 = ax_180
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_4CDA:
	word16 v21_124 = wLoc0A_709 - 0x0001
	wLoc0A_709 = v21_124
	wLoc08_708 = wLoc08_708 - (v21_124 <u 0x0000)
	word16 ax_130 = wLoc0A_709 | wLoc08_708
	branch ax_130 != 0x0000 l0800_4CBC
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_4CBC:
	selector ds_151
	word16 dx_152
	fn0800_409C(fn0800_3E5D(ds_109, Mem144[ds_109:0x29E3:word16], Mem141[ds_109:0x29E5:word16], out dx_152, out di_905, out es_906, out ds_151, out Top_907), ds_151, ax_130, dx_152, Mem138[ds_109:0x29DF:word16], Mem129[ds_109:0x29E1:word16], out cx_908, out dx_909, out di_910, out es_911, out ds_109, out Top_912)
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_4CEC:
	ax_180 = ax_180 | dx_79
	Mem66 = Mem129
	branch ax_180 != 0x0000 l0800_4C8E
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_4CF4:
	selector ds_199
	word16 dx_200
	selector ds_221
	word16 ax_217 = fn0800_409C(fn0800_3E5D(ds_109, Mem192[ds_109:0x29E3:word16], Mem189[ds_109:0x29E5:word16], out dx_200, out di_921, out es_922, out ds_199, out Top_923), ds_199, ax_180 - 0x0001, dx_200 - (ax_180 <u 0x0001), Mem186[ds_109:0x29DF:word16], Mem129[ds_109:0x29E1:word16], out cx_924, out dx_925, out di_926, out es_927, out ds_221, out Top_928)
	selector ds_240
	word16 dx_241
	fn0800_3E5D(ds_221, Mem233[ds_221:0x29E3:word16], Mem216[ds_221:0x29E5:word16], out dx_241, out di_929, out es_930, out ds_240, out Top_931)
	selector ds_261
	word16 dx_262
	word16 cx_295
	selector ds_297
	fn0800_409C(fn0800_3E5D(ds_240, Mem254[ds_240:0x29E3:word16], Mem251[ds_240:0x29E5:word16], out dx_262, out di_932, out es_933, out ds_261, out Top_934), ds_261, ax_217, dx_241, Mem283[ds_261:0x29DF:word16], Mem280[ds_261:0x29E1:word16], out cx_295, out dx_935, out di_936, out es_937, out ds_297, out Top_938)
	selector ds_327
	fn0800_409C(cx_295, ds_297, ax_217 - 0x0001, dx_262 - (ax_217 <u 0x0001), Mem308[ds_297:0x29DF:word16], Mem292[ds_297:0x29E1:word16], out cx_939, out dx_940, out di_941, out es_942, out ds_327, out Top_943)
	// Failed to bind call argument.
	// Please report this issue at https://github.com/uxmal/reko
	word16 stackArg4 = <invalid>
	word16 dx_346
	word16 ax_343 = fn0800_AD2F(ds_327, SEQ(Mem322[ds_327:0x29E1:word16], Mem339[ds_327:0x29DF:word16]), stackArg4, out cx_945, out dx_346)
	Mem353[ds_327:0x4E8E:word16] = dx_346
	Mem354[ds_327:0x4E8C:word16] = ax_343
	fn0800_ACB3(ds_327, Mem368[ds_327:0x29E3:word16], Mem365[ds_327:0x29E5:word16], 0x0001, out cx_946, out dx_947, out bx_948, out es_949)
	ui32 ax_dx_698 = SEQ(dx_262, ax_217) - SEQ(dx_241, ax_217)
	word16 ax_277 = SLICE(ax_dx_698, word16, 16)
	word16 dx_274 = (word16) ax_dx_698
	word16 wLoc04_760 = ax_277
	word16 wLoc06_761 = dx_274
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_4DE4:
	word16 ax_391 = wLoc06_761 | wLoc04_760
	branch ax_391 != 0x0000 l0800_4DBE
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_4DBE:
	selector ds_412
	word16 dx_413
	fn0800_409C(fn0800_3E5D(ds_327, Mem405[ds_327:0x29E3:word16], Mem402[ds_327:0x29E5:word16], out dx_413, out di_950, out es_951, out ds_412, out Top_952), ds_412, ax_391, dx_413, Mem399[ds_327:0x29DF:word16], Mem389[ds_327:0x29E1:word16], out cx_953, out dx_954, out di_955, out es_956, out ds_327, out Top_957)
	word16 v56_439 = wLoc06_761 - 0x0001
	wLoc06_761 = v56_439
	wLoc04_760 = wLoc04_760 - (v56_439 <u 0x0000)
	Mem389 = Mem444
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_4DEC:
	word16 v45_457 = Mem456[ds_327:0x29E5:word16]
	word16 v46_460 = Mem459[ds_327:0x29E3:word16]
	word16 ax_463 = fn0800_ACB3(ds_327, v46_460, v45_457, 0x0001, out cx_958, out dx_959, out bx_960, out es_961)
	word16 v48_477 = Mem476[ds_327:0x29E3:word16]
	selector ds_483
	word16 dx_484
	fn0800_3E5D(ds_327, v48_477, Mem462[ds_327:0x29E5:word16], out dx_484, out di_962, out es_963, out ds_483, out Top_964)
	// Failed to bind call argument.
	// Please report this issue at https://github.com/uxmal/reko
	word16 dx_495 = dx_484 + (ax_463 <u 0x0001)
	word16 stackArg0 = <invalid>
	word16 dx_508
	word16 sp_509
	word16 ax_505 = fn0800_8C69(ax_463 + 0x0001, 0x02, dx_495, stackArg0, out cl_966, out dx_508)
	Mem515[ss:sp_509 - 2:word16] = dx_508
	Mem517[ss:sp_509 - 4:word16] = ax_505
	Mem520[ss:sp_509 - 6:word16] = Mem517[ds_483:0x29E5:word16]
	Mem523[ss:sp_509 - 8:word16] = Mem520[ds_483:0x29E3:word16]
	fn0800_ACB3(ds_483, Mem523[ss:sp_509 - 8:word16], Mem523[ss:sp_509 - 6:word16], Mem523[ss:sp_509:word16], out cx_967, out dx_968, out bx_969, out es_970)
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_4EDE:
	Mem537[ss:sp_509:word16] = Mem523[ds_483:0x29E5:word16]
	Mem540[ss:sp_509 - 2:word16] = Mem537[ds_483:0x29E3:word16]
	// Failed to bind call argument.
	// Please report this issue at https://github.com/uxmal/reko
	word16 stackArg4 = <invalid>
	word16 dx_544
	word16 ax_541 = fn0800_AD2F(ds_483, Mem540[ss:sp_509 - 2:segptr32], stackArg4, out cx_972, out dx_544)
	Mem553[ss:sp_509:word16] = ax_541
	Mem555[ss:sp_509 - 2:word16] = dx_544
	Mem558[ss:sp_509 - 4:word16] = Mem555[ds_483:0x29E5:word16]
	Mem561[ss:sp_509 - 6:word16] = Mem558[ds_483:0x29E3:word16]
	fn0800_4194(ds_483, Mem561[ss:sp_509 - 6:word16], Mem561[ss:sp_509 - 4:word16])
	word16 bx_570 = Mem561[ss:sp_509 - 0x0002:word16]
	word16 dx_573 = Mem561[ss:sp_509:word16]
	branch bx_570 >=u dx_544 l0800_4F05
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_4F05:
	branch bx_570 != dx_544 l0800_4F0E
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_4F07:
	branch dx_573 >=u ax_541 l0800_4F0E
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_4F0E:
	dxOut = dx_573
	dsOut = ds_483
	return 0x0000
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_4F0B:
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_4F02:
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_4E41:
	Mem594[ss:sp_509:word16] = Mem561[ds_483:0x29E5:word16]
	Mem597[ss:sp_509 - 2:word16] = Mem594[ds_483:0x29E3:word16]
	selector ds_601
	word16 dx_602
	word16 cx_599 = fn0800_3E5D(ds_483, Mem597[ss:sp_509 - 2:word16], Mem597[ss:sp_509:word16], out dx_602, out di_973, out es_974, out ds_601, out Top_975)
	Mem617[ss:sp_509:word16] = Mem614[ds_601:0x29E1:word16]
	Mem620[ss:sp_509 - 2:word16] = Mem617[ds_601:0x29DF:word16]
	Mem623[ss:sp_509 - 4:word16] = dx_602
	Mem625[ss:sp_509 - 6:word16] = ax_541
	word16 di_629
	selector ds_630
	selector es_632
	int8 Top_633
	fn0800_409C(cx_599, ds_601, Mem625[ss:sp_509 - 6:word16], Mem625[ss:sp_509 - 4:word16], Mem625[ss:sp_509 - 2:word16], Mem625[ss:sp_509:word16], out cx_976, out dx_977, out di_629, out es_632, out ds_630, out Top_633)
	word16 cx_646 = 0x0004
	word16 bx_647 = 0x4F14
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_4E7C:
	branch Mem645[0x0800:bx_647:word16] != ax_541 l0800_4E8D
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_4E84:
	word16 ax_655 = Mem645[0x0800:bx_647 + 0x0008:word16]
	branch ax_655 == (dx_602 & 0x3FFF) l0800_4E94
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_4E94:
	word16 dx_662
	word16 ax_663
	call Mem645[0x0800:bx_647 + 0x0010:word16] (retsize: 2;)
		uses: ax:ax_655,bp:fp - 2,bx:bx_648,cx:cx_664,di:di_629,ds:ds_630,dx:ax_541,es:es_632,sp:sp_509 + 0x0002,ss:ss,Stack +0000:bp,Stack +FFFFFFDE:v46_460,Stack +FFFFFFE0:v45_457,Stack +FFFFFFE2:0x0004,Stack +FFFFFFE4:v48_477,Stack +FFFFFFE6:0x0001,Stack +FFFFFFE8:ax_541,Stack +FFFFFFEA:dx_602 & 0x3FFF,Stack +FFFFFFEC:dx_274,Stack +FFFFFFEE:ax_277,Stack +FFFFFFF0:ax_217,Stack +FFFFFFF2:dx_262,Stack +FFFFFFF4:ax_217,Stack +FFFFFFF6:dx_241,Stack +FFFFFFF8:ax_541,Stack +FFFFFFFA:dx_602,Stack +FFFFFFFC:ax_463 + 0x0001,Stack +FFFFFFFE:dx_495,Top:Top_633
		defs: ax:ax_663,dx:dx_662
	dxOut = dx_662
	dsOut = ds_630
	return ax_663
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_4E8D:
	bx_647 = bx_647 + 0x0002
	cx_646 = cx_646 - 0x0001
	branch cx_646 != 0x0000 l0800_4E7C
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_4E92:
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_4ED7:
	dxOut = ax_541
	dsOut = ds_630
	return 0x0009
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_4C72:
	dxOut = dx_22
	dsOut = ds_21
	return 0x0007
// DataOut:
// DataOut (flags):
// SymbolicIn:

fn0800_4C55_exit:
// DataOut:
// DataOut (flags):
// SymbolicIn:



void fn0800_4F2C(word16 ax, selector ds)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  ax:[0..15] ds:[0..15] ss:[0..15]
// LiveOut:
// Trashed: SCZO ax bp bx cx di ds dx es si sp Top
// Preserved:
fn0800_4F2C_entry:
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_4F2C:
	word16 dx_22
	selector ds_103
	fn0800_3E5D(ds, Mem14[ds:0x29E3:word16], Mem7[ds:0x29E5:word16], out dx_22, out di_782, out es_783, out ds_103, out Top_784)
	// Failed to bind call argument.
	// Please report this issue at https://github.com/uxmal/reko
	word16 stackArg0 = <invalid>
	word16 dx_36
	word16 sp_37
	word16 ax_33 = fn0800_8C69(ax, 0x02, dx_22, stackArg0, out cl_786, out dx_36)
	Mem46[ss:sp_37 - 2:word16] = Mem43[ds_103:0x29E5:word16]
	Mem49[ss:sp_37 - 4:word16] = Mem46[ds_103:0x29E3:word16]
	// Failed to bind call argument.
	// Please report this issue at https://github.com/uxmal/reko
	word16 stackArg4 = <invalid>
	word16 dx_53
	word16 ax_50 = fn0800_AD2F(ds_103, Mem49[ss:sp_37 - 4:segptr32], stackArg4, out cx_788, out dx_53)
	branch dx_36 <u 0x0000 l0800_4F95
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_4F65:
	branch dx_36 >u 0x0000 l0800_4F6D
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_4F67:
	branch ax_33 <=u 0x0012 l0800_4F95
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_4F6D:
	Mem73[ss:sp_37 - 2:word16] = Mem61[ds_103:0x29E5:word16]
	Mem76[ss:sp_37 - 4:word16] = Mem73[ds_103:0x29E3:word16]
	selector ds_80
	word16 dx_81
	fn0800_3E5D(ds_103, Mem76[ss:sp_37 - 4:word16], Mem76[ss:sp_37 - 2:word16], out dx_81, out di_792, out es_793, out ds_80, out Top_794)
	Mem96[ss:sp_37 - 2:word16] = Mem93[ds_80:0x29E5:word16]
	Mem99[ss:sp_37 - 4:word16] = Mem96[ds_80:0x29E3:word16]
	word16 dx_104
	fn0800_3E5D(ds_80, Mem99[ss:sp_37 - 4:word16], Mem99[ss:sp_37 - 2:word16], out dx_104, out di_795, out es_796, out ds_103, out Top_797)
	wLoc16 = dx_81
	wLoc18 = ax_50
	wLoc0E = dx_104
	wLoc10 = ax_50
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_4F95:
	Mem121[ss:sp_37 - 2:word16] = Mem116[ds_103:0x29E5:word16]
	Mem124[ss:sp_37 - 4:word16] = Mem121[ds_103:0x29E3:word16]
	// Failed to bind call argument.
	// Please report this issue at https://github.com/uxmal/reko
	selector ds_128
	word16 dx_129
	word16 cx_126 = fn0800_3F58(ds_103, Mem124[ss:sp_37 - 4:word16], Mem124[ss:sp_37 - 2:word16], out dx_129, out di_789, out ds_128)
	word16 stackArg0 = <invalid>
	word16 dx_143
	word16 sp_144
	word16 ax_140 = fn0800_8CAA(ax_50, 0x08, dx_129, stackArg0, out cl_791, out dx_143)
	branch dx_143 != 0x0052 l0800_4FB5
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_4FAD:
	branch ax_140 != 0x4E43 l0800_4FB5
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_4FB5:
	Mem159[ss:sp_144 - 2:word16] = Mem124[ds_128:0x29E1:word16]
	Mem162[ss:sp_144 - 4:word16] = Mem159[ds_128:0x29DF:word16]
	// Failed to bind call argument.
	// Please report this issue at https://github.com/uxmal/reko
	word16 stackArg0 = <invalid>
	byte cl_170
	word16 dx_171
	word16 sp_172
	word16 ax_168 = fn0800_8CAA(ax_33, 0x02, dx_36, stackArg0, out cl_170, out dx_171)
	Mem178[ss:sp_172 - 2:word16] = dx_171
	Mem180[ss:sp_172 - 4:word16] = ax_168
	selector ds_188
	fn0800_409C(DPB(cx_126, cl_170, 0), ds_128, Mem180[ss:sp_172 - 4:word16], Mem180[ss:sp_172 - 2:word16], Mem180[ss:sp_172:word16], Mem180[ss:sp_172 + 2:word16], out cx_799, out dx_800, out di_801, out es_802, out ds_188, out Top_803)
	Mem201[ss:sp_172 + 0x0002:word16] = 0x0000
	Mem204[ss:sp_172:word16] = dx_53
	Mem207[ss:sp_172 - 2:word16] = ax_50
	Mem210[ss:sp_172 - 4:word16] = Mem207[ds_188:0x29E5:word16]
	Mem213[ss:sp_172 - 6:word16] = Mem210[ds_188:0x29E3:word16]
	fn0800_ACB3(ds_188, Mem213[ss:sp_172 - 6:word16], Mem213[ss:sp_172 - 4:word16], Mem213[ss:sp_172 + 2:word16], out cx_804, out dx_805, out bx_806, out es_807)
	Mem227[ss:sp_172 + 0x0002:word16] = dx_36
	Mem230[ss:sp_172:word16] = ax_33
	Mem233[ss:sp_172 - 2:word16] = Mem230[ds_188:0x29E1:word16]
	Mem236[ss:sp_172 - 4:word16] = Mem233[ds_188:0x29DF:word16]
	Mem239[ss:sp_172 - 6:word16] = Mem236[ds_188:0x29E5:word16]
	Mem242[ss:sp_172 - 8:word16] = Mem239[ds_188:0x29E3:word16]
	word16 sp_252
	word16 bp_244
	selector ds_248
	word16 ax_243 = fn0800_3B0A(Mem242[ss:sp_172:word16], Mem242[ss:sp_172 + 2:word16], out cx_808, out dx_809, out bp_244, out ds_248)
	word16 sp_258 = sp_252 + 0x000C
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_50BC:
	word16 sp_264 = sp_258 - 2
	Mem266[ss:sp_264:word16] = Mem261[ds_248:0x29E5:word16]
	Mem269[ss:sp_264 - 2:word16] = Mem266[ds_248:0x29E3:word16]
	selector ds_273
	word16 dx_274
	fn0800_3F58(ds_248, Mem269[ss:sp_264 - 2:word16], Mem269[ss:sp_264:word16], out dx_274, out di_835, out ds_273)
	branch dx_274 != 0x0000 l0800_50D6
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_50CE:
	branch ax_243 != 0x03EC l0800_50D6
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_50D6:
	word16 v58_291 = Mem269[ds_273:0x4E8C:word16] + 0x0004
	Mem292[ds_273:0x4E8C:word16] = v58_291
	Mem296[ds_273:0x4E8E:word16] = Mem292[ds_273:0x4E8E:word16] + (v58_291 <u 0x0000)
	return
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_50D3:
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_5006:
	Mem308[ss:sp_264:word16] = 0x0001
	Mem314[ss:sp_264 - 2:word16] = 0x0000
	Mem316[ss:sp_264 - 4:word16] = 0x0004
	Mem319[ss:sp_264 - 6:word16] = Mem316[ds_273:0x29E5:word16]
	Mem322[ss:sp_264 - 8:word16] = Mem319[ds_273:0x29E3:word16]
	word16 cx_325
	fn0800_ACB3(ds_273, Mem322[ss:sp_264 - 8:word16], Mem322[ss:sp_264 - 6:word16], Mem322[ss:sp_264:word16], out cx_325, out dx_836, out bx_837, out es_838)
	Mem335[ss:sp_264:word16] = Mem322[ds_273:0x29E1:word16]
	Mem338[ss:sp_264 - 2:word16] = Mem335[ds_273:0x29DF:word16]
	Mem344[ss:sp_264 - 4:word16] = 0x0000
	Mem346[ss:sp_264 - 6:word16] = 0x03EC
	ax_243 = fn0800_409C(cx_325, ds_273, Mem346[ss:sp_264 - 6:word16], Mem346[ss:sp_264 - 4:word16], Mem346[ss:sp_264 - 2:word16], Mem346[ss:sp_264:word16], out cx_839, out dx_840, out di_841, out es_842, out ds_248, out Top_843)
	sp_258 = sp_264 + 0x0002
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_5034:
	word16 sp_365 = sp_258 - 2
	Mem367[ss:sp_365:word16] = Mem362[ds_248:0x29E5:word16]
	Mem370[ss:sp_365 - 2:word16] = Mem367[ds_248:0x29E3:word16]
	selector ds_374
	word16 dx_375
	word16 cx_372 = fn0800_3E5D(ds_248, Mem370[ss:sp_365 - 2:word16], Mem370[ss:sp_365:word16], out dx_375, out di_856, out es_857, out ds_374, out Top_858)
	Mem385[ss:bp_244 - 0x0004:word16] = dx_375
	Mem387[ss:bp_244 - 0x0006:word16] = ax_243
	Mem390[ss:sp_365:word16] = Mem387[ds_374:0x29E1:word16]
	Mem393[ss:sp_365 - 2:word16] = Mem390[ds_374:0x29DF:word16]
	Mem396[ss:sp_365 - 4:word16] = Mem393[ss:bp_244 - 0x0004:word16]
	Mem398[ss:sp_365 - 6:word16] = ax_243
	fn0800_409C(cx_372, ds_374, Mem398[ss:sp_365 - 6:word16], Mem398[ss:sp_365 - 4:word16], Mem398[ss:sp_365 - 2:word16], Mem398[ss:sp_365:word16], out cx_859, out dx_860, out di_861, out es_862, out ds_248, out Top_863)
	sp_258 = sp_365 + 0x0002
	word16 ax_413 = Mem398[ss:bp_244 - 0x0006:word16] | Mem398[ss:bp_244 - 0x0004:word16]
	branch ax_413 == 0x0000 l0800_50B1
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_5062:
	Mem419[ss:sp_365:word16] = Mem398[ds_248:0x29E5:word16]
	Mem422[ss:sp_365 - 0x0002:word16] = Mem419[ds_248:0x29E3:word16]
	selector ds_426
	word16 dx_427
	word16 cx_424 = fn0800_3E5D(ds_248, Mem422[ss:sp_365 - 0x0002:word16], Mem422[ss:sp_365:word16], out dx_427, out di_844, out es_845, out ds_426, out Top_846)
	Mem440[ss:bp_244 - 0x0008:word16] = dx_427 - (ax_413 <u 0x0001)
	Mem441[ss:bp_244 - 0x000A:word16] = ax_413 - 0x0001
	Mem444[ss:sp_365:word16] = Mem441[ds_426:0x29E1:word16]
	Mem447[ss:sp_365 - 0x0002:word16] = Mem444[ds_426:0x29DF:word16]
	Mem450[ss:sp_365 - 0x0004:word16] = Mem447[ss:bp_244 - 0x0008:word16]
	Mem452[ss:sp_365 - 6:word16] = ax_413 - 0x0001
	selector ds_457
	fn0800_409C(cx_424, ds_426, Mem452[ss:sp_365 - 6:word16], Mem452[ss:sp_365 - 4:word16], Mem452[ss:sp_365 - 2:word16], Mem452[ss:sp_365:word16], out cx_847, out dx_848, out di_849, out es_850, out ds_457, out Top_851)
	// Failed to bind call argument.
	// Please report this issue at https://github.com/uxmal/reko
	word16 stackArg0 = <invalid>
	word16 dx_473
	word16 sp_474
	word16 ax_470 = fn0800_8C69(Mem452[ss:bp_244 - 0x0006:word16], 0x02, Mem452[ss:bp_244 - 0x0004:word16], stackArg0, out cl_853, out dx_473)
	Mem480[ss:sp_474 - 2:word16] = dx_473
	Mem482[ss:sp_474 - 4:word16] = ax_470
	Mem485[ss:sp_474 - 6:word16] = Mem482[ds_457:0x29E1:word16]
	Mem488[ss:sp_474 - 8:word16] = Mem485[ds_457:0x29DF:word16]
	Mem491[ss:sp_474 - 10:word16] = Mem488[ds_457:0x29E5:word16]
	Mem494[ss:sp_474 - 12:word16] = Mem491[ds_457:0x29E3:word16]
	word16 sp_504
	fn0800_3B0A(Mem494[ss:sp_474 - 4:word16], Mem494[ss:sp_474 - 2:word16], out cx_854, out dx_855, out bp_244, out ds_248)
	sp_258 = sp_504 + 0x000C
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_50B1:
	ax_243 = Mem514[ss:bp_244 - 0x0006:word16] | Mem514[ss:bp_244 - 0x0004:word16]
	branch ax_243 == 0x0000 l0800_50BC
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_50B9:
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_4FB2:
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_50E6:
	Mem522[ss:sp_144 - 2:word16] = Mem124[ds_128:0x29E1:word16]
	Mem525[ss:sp_144 - 4:word16] = Mem522[ds_128:0x29DF:word16]
	// Failed to bind call argument.
	// Please report this issue at https://github.com/uxmal/reko
	word16 stackArg0 = <invalid>
	byte cl_531
	word16 dx_532
	word16 sp_533
	word16 ax_529 = fn0800_8CAA(wLoc18, 0x02, wLoc16, stackArg0, out cl_531, out dx_532)
	Mem539[ss:sp_533 - 2:word16] = dx_532
	Mem541[ss:sp_533 - 4:word16] = ax_529
	selector ds_547
	fn0800_409C(DPB(cx_126, cl_531, 0), ds_128, Mem541[ss:sp_533 - 4:word16], Mem541[ss:sp_533 - 2:word16], Mem541[ss:sp_533:word16], Mem541[ss:sp_533 + 2:word16], out cx_811, out dx_812, out di_813, out es_814, out ds_547, out Top_815)
	Mem559[ss:sp_533 + 0x0002:word16] = Mem541[ds_547:0x29E1:word16]
	Mem562[ss:sp_533:word16] = Mem559[ds_547:0x29DF:word16]
	// Failed to bind call argument.
	// Please report this issue at https://github.com/uxmal/reko
	word16 stackArg4 = <invalid>
	word16 dx_566
	word16 ax_563 = fn0800_AD2F(ds_547, Mem562[ss:sp_533:segptr32], stackArg4, out cx_817, out dx_566)
	Mem579[ss:sp_533 + 0x0002:word16] = 0x0000
	Mem582[ss:sp_533:word16] = Mem579[ds_547:0x4E8E:word16]
	Mem585[ss:sp_533 - 2:word16] = Mem582[ds_547:0x4E8C:word16]
	Mem588[ss:sp_533 - 4:word16] = Mem585[ds_547:0x29E1:word16]
	Mem591[ss:sp_533 - 6:word16] = Mem588[ds_547:0x29DF:word16]
	word16 cx_594
	fn0800_ACB3(ds_547, Mem591[ss:sp_533 - 6:word16], Mem591[ss:sp_533 - 4:word16], Mem591[ss:sp_533 + 2:word16], out cx_594, out dx_818, out bx_819, out es_820)
	Mem605[ss:sp_533 + 0x0002:word16] = Mem591[ds_547:0x29E1:word16]
	Mem608[ss:sp_533:word16] = Mem605[ds_547:0x29DF:word16]
	Mem611[ss:sp_533 - 2:word16] = wLoc0E
	Mem614[ss:sp_533 - 4:word16] = wLoc10
	selector ds_619
	fn0800_409C(cx_594, ds_547, Mem614[ss:sp_533 - 4:word16], Mem614[ss:sp_533 - 2:word16], Mem614[ss:sp_533:word16], Mem614[ss:sp_533 + 2:word16], out cx_821, out dx_822, out di_823, out es_824, out ds_619, out Top_825)
	word16 v48_628 = Mem614[ds_619:0x4E8C:word16] + 0x0004
	Mem629[ds_619:0x4E8C:word16] = v48_628
	Mem633[ds_619:0x4E8E:word16] = Mem629[ds_619:0x4E8E:word16] + (v48_628 <u 0x0000)
	Mem638[ss:sp_533 + 0x0002:word16] = 0x0000
	Mem641[ss:sp_533:word16] = dx_566
	Mem644[ss:sp_533 - 2:word16] = ax_563
	Mem647[ss:sp_533 - 4:word16] = Mem644[ds_619:0x29E1:word16]
	Mem650[ss:sp_533 - 6:word16] = Mem647[ds_619:0x29DF:word16]
	fn0800_ACB3(ds_619, Mem650[ss:sp_533 - 6:word16], Mem650[ss:sp_533 - 4:word16], Mem650[ss:sp_533 + 2:word16], out cx_826, out dx_827, out bx_828, out es_829)
	word16 bp_663
	selector ds_667
	word16 sp_671
	Mem677[ss:bp_663 - 0x0002:word16] = fn0800_5374(ds_619, out dx_830, out bp_663, out ds_667)
	Mem680[ss:sp_671 - 2:word16] = 0x0000
	ui32 ax_dx_716 = SEQ(Mem680[ss:bp_663 - 0x0018:word16], Mem680[ss:bp_663 - 0x001A:word16]) + SEQ(Mem680[ss:bp_663 - 0x0010:word16], Mem680[ss:bp_663 - 0x0012:word16])
	Mem689[ss:sp_671 - 4:word16] = SLICE(ax_dx_716, word16, 16)
	Mem691[ss:sp_671 - 6:word16] = (word16) ax_dx_716
	Mem694[ss:sp_671 - 8:word16] = Mem691[ds_667:0x29E5:word16]
	Mem697[ss:sp_671 - 10:word16] = Mem694[ds_667:0x29E3:word16]
	fn0800_ACB3(ds_667, Mem697[ss:sp_671 - 10:word16], Mem697[ss:sp_671 - 8:word16], Mem697[ss:sp_671 - 2:word16], out cx_831, out dx_832, out bx_833, out es_834)
	return
// DataOut:
// DataOut (flags):
// SymbolicIn:

fn0800_4F2C_exit:
// DataOut:
// DataOut (flags):
// SymbolicIn:



word16 fn0800_518F(word16 ax, word16 dx, selector ds, ptr16 & dxOut, ptr16 & dsOut)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  ax:[0..15] ds:[0..15] dx:[0..15] ss:[0..15]
// LiveOut: ax ds dx sp
// Trashed: SCZO ax bp bx cx di ds dx es si sp Top
// Preserved:
fn0800_518F_entry:
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_518F:
	selector ds_19
	word16 dx_20
	branch fn0800_5DCE(ax, dx, ds, Mem9[ds:0x29E3:word16], Mem0[ds:0x29E5:word16], out dx_20, out ds_19) != 0x0000 l0800_51A5
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_51A5:
	selector ds_37
	word16 dx_38
	word16 ax_32 = fn0800_5374(ds_19, out dx_38, out bp_71, out ds_37)
	dxOut = dx_38
	dsOut = ds_37
	return ax_32
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_51A1:
	dxOut = dx_20
	dsOut = ds_19
	return 0x0007
// DataOut:
// DataOut (flags):
// SymbolicIn:

fn0800_518F_exit:
// DataOut:
// DataOut (flags):
// SymbolicIn:



word16 fn0800_51A9(selector ds, ptr16 & dxOut, ptr16 & dsOut)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  ds:[0..15] ss:[0..15]
// LiveOut: ax ds dx sp
// Trashed: SCZO ax bp bx cx di ds dx es si sp Top
// Preserved:
fn0800_51A9_entry:
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_51A9:
	word16 bp_290 = fp - 2
	word16 sp_11 = fp - 0x0008
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_533D:
	word16 sp_18 = sp_11 - 2
	Mem20[ss:sp_18:word16] = Mem15[ds:0x29E5:word16]
	Mem23[ss:sp_18 - 2:word16] = Mem20[ds:0x29E3:word16]
	// Failed to bind call argument.
	// Please report this issue at https://github.com/uxmal/reko
	word16 stackArg4 = <invalid>
	word16 dx_27
	word16 ax_24 = fn0800_AD2F(ds, Mem23[ss:sp_18 - 2:segptr32], stackArg4, out cx_589, out dx_27)
	Mem36[ss:sp_18:word16] = ax_24
	Mem38[ss:sp_18 - 2:word16] = dx_27
	Mem41[ss:sp_18 - 4:word16] = Mem38[ds:0x29E5:word16]
	Mem44[ss:sp_18 - 6:word16] = Mem41[ds:0x29E3:word16]
	fn0800_4194(ds, Mem44[ss:sp_18 - 6:word16], Mem44[ss:sp_18 - 4:word16])
	word16 bx_53 = Mem44[ss:sp_18 - 0x0002:word16]
	word16 dx_56 = Mem44[ss:sp_18:word16]
	branch bx_53 >=u dx_27 l0800_5364
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_5364:
	branch bx_53 != dx_27 l0800_536D
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_5366:
	branch dx_56 >=u ax_24 l0800_536D
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_536D:
	dxOut = dx_56
	dsOut = ds
	return 0x0000
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_536A:
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_5361:
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_51B3:
	Mem80[ss:sp_18:word16] = Mem44[ds:0x29E5:word16]
	Mem83[ss:sp_18 - 2:word16] = Mem80[ds:0x29E3:word16]
	// Failed to bind call argument.
	// Please report this issue at https://github.com/uxmal/reko
	word16 stackArg4 = <invalid>
	word16 dx_87
	word16 ax_84 = fn0800_3E9A(ds, Mem83[ss:sp_18 - 2:segptr32], stackArg4, out dx_87, out ds)
	branch ax_84 == 0x0000 l0800_51D5
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_51D5:
	Mem103[ss:sp_18:word16] = Mem83[ds:0x29E1:word16]
	Mem106[ss:sp_18 - 2:word16] = Mem103[ds:0x29DF:word16]
	Mem109[ss:sp_18 - 4:word16] = Mem106[ds:0x29E5:word16]
	Mem112[ss:sp_18 - 6:word16] = Mem109[ds:0x29E3:word16]
	// Failed to bind call argument.
	// Please report this issue at https://github.com/uxmal/reko
	word16 stackArg4 = <invalid>
	word16 cx_115
	selector ds_120
	Mem128[ss:sp_18 - 0x0004:word16] = fn0800_3DCF(ds, Mem112[ss:sp_18 - 6:segptr32], stackArg4, out cx_115, out dx_592, out di_593, out es_594, out ds_120, out Top_595)
	// Failed to bind call argument.
	// Please report this issue at https://github.com/uxmal/reko
	word16 stackArg6 = <invalid>
	fn0800_4047(cx_115, ds_120, Mem128[ss:sp_18 - 0x0004:byte], Mem128[ss:sp_18 - 0x0002:segptr32], stackArg6, out cx_597, out dx_598, out bx_599, out di_600, out es_601, out ds, out Top_602)
	sp_11 = sp_18 + 0x0002
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_51C5:
	branch ax_84 == 0x0001 l0800_51F5
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_51F5:
	Mem147[ss:sp_18:word16] = Mem83[ds:0x29E1:word16]
	Mem150[ss:sp_18 - 2:word16] = Mem147[ds:0x29DF:word16]
	Mem153[ss:sp_18 - 4:word16] = Mem150[ds:0x29E5:word16]
	Mem156[ss:sp_18 - 6:word16] = Mem153[ds:0x29E3:word16]
	selector ds_160
	word16 dx_161
	word16 cx_158 = fn0800_3E5D(ds, Mem156[ss:sp_18 - 6:word16], Mem156[ss:sp_18 - 4:word16], out dx_161, out di_603, out es_604, out ds_160, out Top_605)
	Mem171[ss:sp_18 - 0x0004:word16] = dx_161
	Mem173[ss:sp_18 - 0x0006:word16] = ax_84
	selector ds_178
	fn0800_409C(cx_158, ds_160, Mem173[ss:sp_18 - 0x0006:word16], Mem173[ss:sp_18 - 0x0004:word16], Mem173[ss:sp_18 - 0x0002:word16], Mem173[ss:sp_18:word16], out cx_606, out dx_607, out di_608, out es_609, out ds_178, out Top_610)
	Mem190[ss:sp_18:word16] = Mem173[ds_178:0x29E5:word16]
	Mem193[ss:sp_18 - 2:word16] = Mem190[ds_178:0x29E3:word16]
	word16 cx_196
	selector ds_198
	word16 ax_194 = fn0800_3FAD(ds_178, Mem193[ss:sp_18 - 2:word16], Mem193[ss:sp_18:word16], out cx_196, out di_611, out ds_198)
	Mem209[ss:bp_290 - 0x0002:word16] = 0x0000
	Mem210[ss:bp_290 - 0x0004:word16] = ax_194
	Mem213[ss:sp_18:word16] = Mem210[ds_198:0x29E1:word16]
	Mem216[ss:sp_18 - 2:word16] = Mem213[ds_198:0x29DF:word16]
	Mem218[ss:sp_18 - 4:word16] = ax_194
	selector ds_223
	word16 ax_219 = fn0800_40BF(ax_194, cx_196, ds_198, Mem218[ss:sp_18 - 4:byte], Mem218[ss:sp_18 - 2:word16], Mem218[ss:sp_18:word16], out cx_612, out dx_613, out di_614, out ds_223)
	Mem235[ss:sp_18:word16] = Mem218[ds_223:0x29E5:word16]
	Mem238[ss:sp_18 - 2:word16] = Mem235[ds_223:0x29E3:word16]
	selector ds_242
	word16 dx_243
	fn0800_3F58(ds_223, Mem238[ss:sp_18 - 2:word16], Mem238[ss:sp_18:word16], out dx_243, out di_615, out ds_242)
	// Failed to bind call argument.
	// Please report this issue at https://github.com/uxmal/reko
	word16 stackArg0 = <invalid>
	word16 dx_256
	word16 sp_257
	word16 ax_253 = fn0800_8CAA(ax_219, 0x08, dx_243, stackArg0, out cl_617, out dx_256)
	branch dx_256 != 0x0052 l0800_52BA
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_5250:
	branch ax_253 != 0x4E43 l0800_52BA
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_52BA:
	Mem272[ss:sp_257 - 2:word16] = Mem238[ss:bp_290 - 0x0002:word16]
	Mem275[ss:sp_257 - 4:word16] = Mem272[ss:bp_290 - 0x0004:word16]
	Mem279[ss:sp_257 - 6:word16] = Mem275[ds_242:0x29E1:word16]
	Mem282[ss:sp_257 - 8:word16] = Mem279[ds_242:0x29DF:word16]
	Mem285[ss:sp_257 - 10:word16] = Mem282[ds_242:0x29E5:word16]
	Mem288[ss:sp_257 - 12:word16] = Mem285[ds_242:0x29E3:word16]
	word16 sp_298
	fn0800_3B0A(Mem288[ss:sp_257 - 4:word16], Mem288[ss:sp_257 - 2:word16], out cx_634, out dx_635, out bp_290, out ds)
	sp_11 = sp_298 + 0x000C
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_5255:
	selector ds_311
	word16 dx_312
	word16 sp_315
	word16 ax_306 = fn0800_5374(ds_242, out dx_312, out bp_290, out ds_311)
	branch ax_306 == 0x0000 l0800_5263
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_5263:
	Mem328[ss:sp_315 - 2:word16] = 0x0001
	word16 dx_330 = Mem328[ds_311:0x2A07:word16]
	word16 dx_336 = -(dx_330 + 0x0002)
	Mem341[ss:sp_315 - 4:word16] = -(Mem328[ds_311:0x2A09:word16] + (dx_330 <u 0x0002)) - (dx_336 == 0x0000)
	Mem343[ss:sp_315 - 6:word16] = dx_336
	Mem346[ss:sp_315 - 8:word16] = Mem343[ds_311:0x29E1:word16]
	Mem349[ss:sp_315 - 10:word16] = Mem346[ds_311:0x29DF:word16]
	word16 cx_352
	word16 ax_350 = fn0800_ACB3(ds_311, Mem349[ss:sp_315 - 10:word16], Mem349[ss:sp_315 - 8:word16], Mem349[ss:sp_315 - 2:word16], out cx_352, out dx_636, out bx_637, out es_638)
	Mem363[ss:sp_315 - 2:word16] = Mem349[ds_311:0x29E1:word16]
	Mem366[ss:sp_315 - 4:word16] = Mem363[ds_311:0x29DF:word16]
	Mem369[ss:sp_315 - 6:word16] = Mem366[ds_311:0x2A07:word16]
	fn0800_40BF(ax_350, cx_352, ds_311, Mem369[ss:sp_315 - 6:byte], Mem369[ss:sp_315 - 4:word16], Mem369[ss:sp_315 - 2:word16], out cx_639, out dx_640, out di_641, out ds)
	Mem386[ss:sp_315 - 2:word16] = 0x0001
	Mem389[ss:sp_315 - 4:word16] = Mem386[ds:0x2A09:word16]
	Mem392[ss:sp_315 - 6:word16] = Mem389[ds:0x2A07:word16]
	Mem395[ss:sp_315 - 8:word16] = Mem392[ds:0x29E1:word16]
	Mem398[ss:sp_315 - 10:word16] = Mem395[ds:0x29DF:word16]
	fn0800_ACB3(ds, Mem398[ss:sp_315 - 10:word16], Mem398[ss:sp_315 - 8:word16], Mem398[ss:sp_315 - 2:word16], out cx_642, out dx_643, out bx_644, out es_645)
	sp_11 = sp_315
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_525E:
	dxOut = dx_312
	dsOut = ds_311
	return ax_306
// DataOut:
// DataOut (flags):
// SymbolicIn:

fn0800_51A9_exit:
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_51CA:
	branch ax_84 != 0x0003 l0800_51D2
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_51D2:
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_5301:
	Mem418[ss:sp_18:word16] = Mem83[ds:0x29E5:word16]
	Mem421[ss:sp_18 - 2:word16] = Mem418[ds:0x29E3:word16]
	fn0800_4194(ds, Mem421[ss:sp_18 - 2:word16], Mem421[ss:sp_18:word16])
	Mem432[ss:sp_18:word16] = ax_84
	Mem434[ss:sp_18 - 2:word16] = dx_87
	Mem437[ss:sp_18 - 4:word16] = Mem434[ds:0x29E5:word16]
	Mem440[ss:sp_18 - 6:word16] = Mem437[ds:0x29E3:word16]
	// Failed to bind call argument.
	// Please report this issue at https://github.com/uxmal/reko
	word16 stackArg4 = <invalid>
	word16 dx_444
	ui32 bx_cx_551 = SEQ(Mem440[ss:sp_18 - 0x0002:word16], Mem440[ss:sp_18:word16]) - SEQ(dx_444, fn0800_AD2F(ds, Mem440[ss:sp_18 - 6:segptr32], stackArg4, out cx_619, out dx_444))
	Mem461[ss:sp_18:word16] = SLICE(bx_cx_551, word16, 16)
	Mem463[ss:sp_18 - 2:word16] = (word16) bx_cx_551
	Mem466[ss:sp_18 - 4:word16] = Mem463[ds:0x29E1:word16]
	Mem469[ss:sp_18 - 6:word16] = Mem466[ds:0x29DF:word16]
	Mem472[ss:sp_18 - 8:word16] = Mem469[ds:0x29E5:word16]
	Mem475[ss:sp_18 - 10:word16] = Mem472[ds:0x29E3:word16]
	word16 sp_485
	fn0800_3B0A(Mem475[ss:sp_18 - 2:word16], Mem475[ss:sp_18:word16], out cx_620, out dx_621, out bp_290, out ds)
	sp_11 = sp_485 + 0x000C
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_51CF:
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_52D8:
	word16 si_493 = 0x0000
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_52FA:
	branch si_493 != 0x0003 l0800_52DC
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_52DC:
	word16 sp_503 = sp_11 - 2
	Mem505[ss:sp_503:word16] = Mem500[ds:0x29E1:word16]
	Mem508[ss:sp_503 - 2:word16] = Mem505[ds:0x29DF:word16]
	Mem511[ss:sp_503 - 4:word16] = Mem508[ds:0x29E5:word16]
	Mem514[ss:sp_503 - 6:word16] = Mem511[ds:0x29E3:word16]
	// Failed to bind call argument.
	// Please report this issue at https://github.com/uxmal/reko
	word16 stackArg4 = <invalid>
	word16 cx_517
	selector ds_522
	Mem530[ss:sp_503 - 0x0004:word16] = fn0800_3DCF(ds, Mem514[ss:sp_503 - 6:segptr32], stackArg4, out cx_517, out dx_623, out di_624, out es_625, out ds_522, out Top_626)
	// Failed to bind call argument.
	// Please report this issue at https://github.com/uxmal/reko
	word16 stackArg6 = <invalid>
	fn0800_4047(cx_517, ds_522, Mem530[ss:sp_503 - 0x0004:byte], Mem530[ss:sp_503 - 0x0002:segptr32], stackArg6, out cx_628, out dx_629, out bx_630, out di_631, out es_632, out ds, out Top_633)
	si_493 = si_493 + 0x0001
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_52FF:
// DataOut:
// DataOut (flags):
// SymbolicIn:



word16 fn0800_5374(selector ds, ptr16 & dxOut, ptr16 & bpOut, ptr16 & dsOut)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  ds:[0..15] ss:[0..15]
// LiveOut: ax bp ds dx sp
// Trashed: SCZO ax bp bx cx di ds dx es si sp Top
// Preserved:
fn0800_5374_entry:
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_5374:
	// Failed to bind call argument.
	// Please report this issue at https://github.com/uxmal/reko
	word16 stackArg4 = <invalid>
	word16 ax_21 = fn0800_AD2F(ds, SEQ(Mem13[ds:0x29E5:word16], Mem17[ds:0x29E3:word16]), stackArg4, out cx_641, out dx_642)
	selector ds_43
	fn0800_3E5D(ds, Mem36[ds:0x29E3:word16], Mem33[ds:0x29E5:word16], out dx_643, out di_644, out es_645, out ds_43, out Top_646)
	Mem55[ds_43:0x2A21:word16] = ax_21 & 0x0003
	selector ds_65
	word16 dx_66
	fn0800_3E5D(ds_43, Mem58[ds_43:0x29E3:word16], Mem55[ds_43:0x29E5:word16], out dx_66, out di_647, out es_648, out ds_65, out Top_649)
	Mem74[ds_65:0x2A09:word16] = dx_66
	Mem75[ds_65:0x2A07:word16] = ax_21 & 0x0003
	branch Mem75[ds_65:0x2A21:word16] != 0x0000 l0800_53EF
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_53EF:
	selector ds_87
	word16 dx_88
	fn0800_3E5D(ds_65, Mem80[ds_65:0x29E3:word16], Mem75[ds_65:0x29E5:word16], out dx_88, out di_650, out es_651, out ds_87, out Top_652)
	Mem97[ds_87:0x2A05:word16] = dx_88
	Mem98[ds_87:0x2A03:word16] = ax_21 & 0x0003
	selector ds_109
	Mem119[ds_109:0x2E4B:word16] = fn0800_3E27(ds_87, Mem101[ds_87:0x29E3:word16], Mem98[ds_87:0x29E5:word16], out cx_653, out dx_654, out di_655, out es_656, out ds_109, out Top_657)
	selector ds_130
	Mem140[ds_130:0x2E49:word16] = fn0800_3E27(ds_109, Mem122[ds_109:0x29E3:word16], Mem119[ds_109:0x29E5:word16], out cx_658, out dx_659, out di_660, out es_661, out ds_130, out Top_662)
	fn0800_3E27(ds_130, Mem143[ds_130:0x29E3:word16], Mem140[ds_130:0x29E5:word16], out cx_663, out dx_664, out di_665, out es_666, out ds_667, out Top_668)
	word16 bp_174
	selector ds_178
	word16 dx_179
	word16 sp_182
	branch fn0800_2D0A(out dx_179, out bp_174, out ds_178) == Mem172[ds_178:0x2E49:word16] l0800_5458
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_5458:
	Mem194[ss:sp_182 + 0x0006:word16] = 0x0001
	Mem196[ss:sp_182 + 0x0004:word16] = 0x000F
	// Failed to bind call argument.
	// Please report this issue at https://github.com/uxmal/reko
	// Failed to bind call argument.
	// Please report this issue at https://github.com/uxmal/reko
	word16 stackArg2 = <invalid>
	word16 stackArg4 = <invalid>
	word16 bp_198
	selector ds_202
	word16 dx_203
	word16 sp_206
	word16 ax_197 = fn0800_4311(stackArg2, stackArg4, out dx_203, out bp_198, out si_673, out di_674, out ds_202)
	Mem214[ss:bp_198 - 0x0006:word16] = dx_203
	Mem215[ss:bp_198 - 0x0008:word16] = ax_197
	Mem218[ds_202:0x2E73:word16] = dx_203 + 0x0001
	Mem219[ds_202:0x2E71:word16] = 0x0000
	Mem223[ss:sp_206 + 0x0002:word16] = 0x0001
	Mem225[ss:sp_206:word16] = 0x000F
	// Failed to bind call argument.
	// Please report this issue at https://github.com/uxmal/reko
	// Failed to bind call argument.
	// Please report this issue at https://github.com/uxmal/reko
	word16 stackArg2 = <invalid>
	word16 stackArg4 = <invalid>
	word16 bp_227
	selector ds_231
	word16 dx_232
	word16 sp_235
	word16 ax_226 = fn0800_4311(stackArg2, stackArg4, out dx_232, out bp_227, out si_677, out di_678, out ds_231)
	Mem242[ss:bp_227 - 0x0002:word16] = dx_232
	Mem243[ss:bp_227 - 0x0004:word16] = ax_226
	Mem245[ds_231:0x2E5B:word16] = dx_232 + 0x0001
	Mem246[ds_231:0x2E59:word16] = 0x0000
	word16 dx_248 = Mem246[ds_231:0x2E71:word16]
	Mem250[ds_231:0x2E6F:word16] = Mem246[ds_231:0x2E73:word16]
	Mem251[ds_231:0x2E6D:word16] = dx_248 + 0xFFFD
	word16 dx_254 = Mem251[ds_231:0x2E59:word16] + Mem251[ds_231:0x2E31:word16]
	Mem255[ds_231:0x2E57:word16] = Mem251[ds_231:0x2E5B:word16]
	Mem256[ds_231:0x2E55:word16] = dx_254
	Mem257[ds_231:0x2E4D:word16] = 0x0000
	Mem261[ds_231:0x2E45:word16] = 0x0000
	Mem262[ds_231:0x29FD:word16] = 0x0000
	Mem263[ds_231:0x29FB:word16] = 0x0000
	Mem264[ds_231:0x2A01:word16] = 0x0000
	Mem265[ds_231:0x29FF:word16] = 0x0000
	Mem267[ss:bp_227 - 0x000E:word16] = Mem265[ds_231:0x2E4F:word16]
	Mem270[ss:sp_235 + 0x0002:word16] = 0x0001
	word16 si_278
	selector ds_275
	branch fn0800_5C1A(ds_231, Mem270[ss:sp_235 + 0x0002:word16], out si_278, out ds_275) == 0x0000 l0800_5504
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_54F3:
	branch Mem270[ds_275:0x2A25:word16] == 0x0002 l0800_5504
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_54FA:
	branch Mem270[ds_275:0x2A25:word16] == 0x0007 l0800_5504
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_5501:
	si_278 = 0x000A
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_5504:
	word16 si_295 = si_278
	branch si_278 != 0x0000 l0800_555D
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_5508:
	Mem303[ss:sp_235 + 0x0002:word16] = 0x0001
	branch fn0800_5C1A(ds_275, Mem303[ss:sp_235 + 0x0002:word16], out si_295, out ds_275) == 0x0000 l0800_5557
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_5557:
	Mem323[ds_275:0x2E4F:word16] = 0x0000
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_5516:
	branch Mem303[ds_275:0x2A23:word16] == 0x0001 l0800_554B
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_551D:
	Mem328[ss:sp_235 + 0x0002:word16] = 0x0010
	word16 ax_329 = fn0800_5C1A(ds_275, Mem328[ss:sp_235 + 0x0002:word16], out si_295, out ds_275)
	branch Mem328[ds_275:0x2A25:word16] != 0x0002 l0800_553B
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_5530:
	branch Mem328[ds_275:0x2E4F:word16] != 0x0000 l0800_553B
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_5537:
	Mem348[ds_275:0x2E4F:word16] = ax_329
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_553B:
	branch Mem350[ds_275:0x2E4F:word16] == ax_329 l0800_554B
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_5541:
	branch Mem350[ds_275:0x2E4F:word16] == 0x0000 l0800_554B
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_5548:
	si_295 = 0x000C
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_554B:
	branch Mem358[ds_275:0x2E4F:word16] != 0x0000 l0800_555D
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_5552:
	si_295 = 0x000B
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_555D:
	word16 si_365 = si_295
	branch si_295 != 0x0000 l0800_557C
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_5561:
	word16 ax_372 = Mem370[ds_275:0x2A21:word16]
	branch ax_372 == 0x0001 l0800_5570
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_5570:
	si_365 = fn0800_55E8(ds_275, out ds_275)
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_5569:
	branch ax_372 == 0x0002 l0800_5577
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_5577:
	si_365 = fn0800_579B(ds_275, out ds_275)
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_556E:
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_557C:
	Mem417[ds_275:0x2E4F:word16] = Mem370[ss:bp_227 - 0x000E:word16]
	Mem424[ss:sp_235 + 0x0002:word16] = Mem417[ss:bp_227 - 0x0006:word16]
	Mem427[ss:sp_235:word16] = Mem424[ss:bp_227 - 0x0008:word16]
	// Failed to bind call argument.
	// Please report this issue at https://github.com/uxmal/reko
	word16 stackArg2 = <invalid>
	selector ds_431
	fn0800_4346(ds_275, stackArg2, Mem427[ss:sp_235 + 0x0002:word16], out cx_680, out dx_681, out bx_682, out ds_431)
	Mem442[ss:sp_235 + 0x0002:word16] = Mem427[ss:bp_227 - 0x0002:word16]
	Mem445[ss:sp_235:word16] = Mem442[ss:bp_227 - 0x0004:word16]
	// Failed to bind call argument.
	// Please report this issue at https://github.com/uxmal/reko
	word16 stackArg2 = <invalid>
	selector ds_449
	fn0800_4346(ds_431, stackArg2, Mem445[ss:sp_235 + 0x0002:word16], out cx_684, out dx_685, out bx_686, out ds_449)
	word16 v40_457 = Mem445[ds_449:0x2A03:word16] + 0x0012
	Mem458[ds_449:0x2A03:word16] = v40_457
	Mem462[ds_449:0x2A05:word16] = Mem458[ds_449:0x2A05:word16] + (v40_457 <u 0x0000)
	Mem465[ss:sp_235 + 0x0002:word16] = 0x0000
	ui32 ax_dx_568 = SEQ(Mem465[ss:bp_227 - 0x000A:word16], Mem465[ss:bp_227 - 0x000C:word16]) + SEQ(Mem465[ds_449:0x2A05:word16], Mem465[ds_449:0x2A03:word16])
	Mem474[ss:sp_235:word16] = SLICE(ax_dx_568, word16, 16)
	Mem476[ss:sp_235 - 0x0002:word16] = (word16) ax_dx_568
	Mem479[ss:sp_235 - 0x0004:word16] = Mem476[ds_449:0x29E5:word16]
	Mem482[ss:sp_235 - 0x0006:word16] = Mem479[ds_449:0x29E3:word16]
	word16 dx_486
	fn0800_ACB3(ds_449, Mem482[ss:sp_235 - 0x0006:word16], Mem482[ss:sp_235 - 0x0004:word16], Mem482[ss:sp_235 + 0x0002:word16], out cx_687, out dx_486, out bx_688, out es_689)
	branch si_365 == 0x0000 l0800_55D0
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_55D0:
	branch Mem482[ds_449:0x2E4D:word16] == Mem482[ds_449:0x2E4B:word16] l0800_55E1
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_55E1:
	word16 bp_506 = Mem482[ss:bp_227:word16]
	dxOut = dx_486
	bpOut = bp_506
	dsOut = ds_449
	return 0x0000
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_55D9:
	word16 bp_511 = Mem482[ss:bp_227:word16]
	dxOut = dx_486
	bpOut = bp_511
	dsOut = ds_449
	return 0x0006
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_55C9:
	word16 bp_516 = Mem482[ss:bp_227:word16]
	dxOut = dx_486
	bpOut = bp_516
	dsOut = ds_449
	return si_365
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_5450:
	word16 bp_521 = Mem172[ss:bp_174:word16]
	dxOut = dx_179
	bpOut = bp_521
	dsOut = ds_178
	return 0x0005
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_53BF:
	word16 bp_541
	selector ds_545
	fn0800_3B0A(ax_21 & 0x0003, Mem75[ds_65:0x2A09:word16], out cx_669, out dx_670, out bp_541, out ds_545)
	word16 dx_557 = Mem539[ds_545:0x2A07:word16]
	Mem558[ds_545:0x2A05:word16] = Mem539[ds_545:0x2A09:word16]
	Mem559[ds_545:0x2A03:word16] = dx_557
	word16 bp_565 = Mem559[ss:bp_541:word16]
	dxOut = dx_557
	bpOut = bp_565
	dsOut = ds_545
	return 0x0000
// DataOut:
// DataOut (flags):
// SymbolicIn:

fn0800_5374_exit:
// DataOut:
// DataOut (flags):
// SymbolicIn:



word16 fn0800_55E8(selector ds, ptr16 & dsOut)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  ds:[0..15] ss:[0..15]
// LiveOut: ax ds
// Trashed: SCZO ax bx cx di ds dx es si Top
// Preserved: bp sp
fn0800_55E8_entry:
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_55E8:
	word16 sp_170 = fp - 0x0006
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_574B:
	word16 ax_13 = Mem12[ds:0x2A01:word16]
	word16 dx_14 = Mem12[ds:0x29FF:word16]
	branch ax_13 >=u Mem12[ds:0x2A09:word16] l0800_575B
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_575B:
	branch ax_13 != Mem12[ds:0x2A09:word16] l0800_5766
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_575D:
	branch dx_14 >=u Mem12[ds:0x2A07:word16] l0800_5766
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_5766:
	word16 sp_25 = sp_170 - 2
	Mem28[ss:sp_25:word16] = Mem12[ds:0x29E1:word16]
	Mem31[ss:sp_25 - 2:word16] = Mem28[ds:0x29DF:word16]
	word16 ax_34 = Mem31[ds:0x2E55:word16] - Mem31[ds:0x2E59:word16]
	word16 ax_38 = ax_34 - Mem31[ds:0x2E31:word16]
	Mem43[ss:sp_25 - 4:word16] = 0x0000 - (ax_34 <u 0x0000) - (ax_38 <u 0x0000)
	Mem45[ss:sp_25 - 6:word16] = ax_38
	word16 ax_47 = Mem45[ds:0x2E59:word16] + Mem45[ds:0x2E31:word16]
	Mem51[ss:sp_25 - 8:word16] = Mem45[ds:0x2E5B:word16]
	Mem53[ss:sp_25 - 10:word16] = ax_47
	selector ds_58
	fn0800_4152(ds, Mem53[ss:sp_25 - 10:word16], Mem53[ss:sp_25 - 8:word16], Mem53[ss:sp_25 - 6:word16], Mem53[ss:sp_25 - 2:word16], Mem53[ss:sp_25:word16], out cx_473, out ds_58)
	dsOut = ds_58
	return 0x0000
// DataOut:
// DataOut (flags):
// SymbolicIn:

fn0800_55E8_exit:
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_5763:
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_5758:
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_55F1:
	word16 sp_78 = sp_170 - 2
	Mem80[ss:sp_78:word16] = 0x0010
	Mem83[ss:sp_78 - 2:word16] = ds
	Mem86[ss:sp_78 - 4:word16] = 0x290F
	selector ds_90
	word16 sp_94
	fn0800_5A24(ds, Mem86[ss:sp_78 - 4:word16], Mem86[ss:sp_78 - 2:word16], Mem86[ss:sp_78:word16], out ds_90)
	Mem106[ss:sp_94 + 0x0004:word16] = 0x0010
	Mem108[ss:sp_94 + 0x0002:word16] = ds_90
	Mem111[ss:sp_94:word16] = 0x284F
	selector ds_115
	word16 sp_119
	fn0800_5A24(ds_90, Mem111[ss:sp_94:word16], Mem111[ss:sp_94 + 2:word16], Mem111[ss:sp_94 + 4:word16], out ds_115)
	Mem131[ss:sp_119 + 0x0004:word16] = 0x0010
	Mem133[ss:sp_119 + 0x0002:word16] = ds_115
	Mem136[ss:sp_119:word16] = 0x278F
	selector ds_140
	word16 sp_144
	word16 bp_137 = fn0800_5A24(ds_115, Mem136[ss:sp_119:word16], Mem136[ss:sp_119 + 2:word16], Mem136[ss:sp_119 + 4:word16], out ds_140)
	Mem156[ss:sp_144 + 0x0004:word16] = 0x0010
	word16 ax_157 = fn0800_5C39(ds_140, Mem156[ss:sp_144 + 0x0004:word16], out si_471, out di_472, out ds)
	Mem172[ss:bp_137 - 0x0002:word16] = 0x0000
	Mem173[ss:bp_137 - 0x0004:word16] = ax_157
	sp_170 = sp_144 + 0x0006
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_5736:
	word16 ax_177 = Mem176[ss:bp_137 - 0x0004:word16]
	word16 dx_178 = Mem176[ss:bp_137 - 0x0002:word16]
	word16 v11_179 = Mem176[ss:bp_137 - 0x0004:word16] - 0x0001
	Mem180[ss:bp_137 - 0x0004:word16] = v11_179
	Mem184[ss:bp_137 - 0x0002:word16] = Mem180[ss:bp_137 - 0x0002:word16] - (v11_179 <u 0x0000)
	branch (ax_177 | dx_178) == 0x0000 l0800_574B
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_5748:
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_5633:
	word16 sp_190 = sp_170 - 2
	Mem192[ss:sp_190:word16] = ds
	Mem195[ss:sp_190 - 2:word16] = 0x290F
	word16 ax_196 = fn0800_5A8D(ds, Mem195[ss:sp_190 - 2:word16], Mem195[ss:sp_190:selector], out ds)
	Mem208[ds:0x2E47:word16] = ax_196
	word16 v17_209 = Mem208[ds:0x29FF:word16] + ax_196
	Mem210[ds:0x29FF:word16] = v17_209
	Mem214[ds:0x2A01:word16] = Mem210[ds:0x2A01:word16] + (v17_209 <u 0x0000)
	sp_170 = sp_190 + 0x0002
	branch Mem214[ds:0x2E47:word16] != 0x0000 l0800_5654
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_5654:
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_5664:
	word16 dx_200
	word16 ax_219 = Mem218[ds:0x2E47:word16]
	Mem221[ds:0x2E47:word16] = Mem218[ds:0x2E47:word16] - 0x0001
	word16 ax_222 = ax_219
	branch ax_219 != 0x0000 l0800_5656
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_5656:
	selector ds_231
	word16 ax_227 = fn0800_5B15(ds, out si_474, out di_475, out ds_231)
	word16 sp_245 = sp_170 - 2
	Mem247[ss:sp_245:word16] = DPB(ax_227, (byte) ax_227 ^ Mem221[ds_231:0x2E4F:byte], 0)
	ds = fn0800_5D2F(ds_231, Mem247[ss:sp_245:byte])
	dx_200 = dx_251
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_566F:
	branch (Mem221[ds:0x2E4F:word16] & 0x0001) == 0x0000 l0800_5684
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_5684:
	Mem267[ds:0x2E4F:word16] = Mem221[ds:0x2E4F:word16] >>u 0x0001
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_5677:
	ax_222 = Mem221[ds:0x2E4F:word16] >>u 0x0001 | 0x8000
	Mem274[ds:0x2E4F:word16] = ax_222
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_5688:
	ptr32 es_bx_277 = Mem276[ds:0x2E6D:segptr32]
	word16 sp_283 = sp_170 - 2
	Mem288[ss:sp_283:word16] = DPB(DPB(ax_222, Mem276[es_bx_277 + 0x0002:byte], 0), 0x00, 8)
	word16 dx_296 = DPB(DPB(dx_200, Mem288[es_bx_277 + 0x0001:byte], 0), 0x00, 8)
	word16 dx_303 = Mem288[ss:sp_283:word16] + (dx_296 << 0x08 <u 0x0000)
	word16 bx_310 = DPB(DPB((word16) es_bx_277, Mem288[es_bx_277:byte], 0), 0x00, 8)
	Mem307[ss:sp_283:word16] = dx_296 << 0x08
	Mem313[ss:sp_283 - 2:word16] = dx_303
	// Failed to bind call argument.
	// Please report this issue at https://github.com/uxmal/reko
	int32 dx_ax_462 = SEQ(Mem313[ss:sp_283 - 2:word16], Mem313[ss:sp_283:word16]) + (int32) bx_310
	word16 stackArg0 = <invalid>
	word16 dx_332
	word16 sp_333
	Mem339[ss:sp_333 - 2:word16] = fn0800_8C69((word16) dx_ax_462, Mem313[ds:0x2E45:byte], SLICE(dx_ax_462, word16, 16), stackArg0, out cl_477, out dx_332)
	word16 ax_342 = 0x0001 << Mem339[ds:0x2E45:byte]
	Mem345[ss:sp_333 - 4:word16] = dx_332
	int32 dx_ax_346 = (int32) (ax_342 - 0x0001)
	ui32 ax_dx_465 = SEQ(Mem345[ss:sp_333 - 4:word16], Mem345[ss:sp_333 - 2:word16]) + SEQ(Mem345[ds:0x29FD:word16] & SLICE(dx_ax_346, word16, 16), Mem345[ds:0x29FB:word16] & (word16) dx_ax_346)
	Mem362[ds:0x29FD:word16] = SLICE(ax_dx_465, word16, 16)
	Mem363[ds:0x29FB:word16] = (word16) ax_dx_465
	sp_170 = sp_333
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_5651:
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_56E6:
	branch (Mem368[ss:bp_137 - 0x0004:word16] | Mem368[ss:bp_137 - 0x0002:word16]) == 0x0000 l0800_574B
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_56EE:
	word16 sp_375 = sp_170 - 2
	Mem377[ss:sp_375:word16] = ds
	Mem380[ss:sp_375 - 2:word16] = 0x284F
	selector ds_384
	Mem396[ds_384:0x2E2B:word16] = fn0800_5A8D(ds, Mem380[ss:sp_375 - 2:word16], Mem380[ss:sp_375:selector], out ds_384) + 0x0001
	Mem398[ss:sp_375:word16] = ds_384
	Mem401[ss:sp_375 - 2:word16] = 0x278F
	word16 ax_402 = fn0800_5A8D(ds_384, Mem401[ss:sp_375 - 2:word16], Mem401[ss:sp_375:selector], out ds)
	Mem415[ds:0x2E29:word16] = ax_402 + 0x0002
	word16 v19_416 = Mem415[ds:0x29FF:word16] + (ax_402 + 0x0002)
	Mem417[ds:0x29FF:word16] = v19_416
	Mem421[ds:0x2A01:word16] = Mem417[ds:0x2A01:word16] + (v19_416 <u 0x0000)
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_572B:
	word16 ax_425 = Mem424[ds:0x2E29:word16]
	Mem427[ds:0x2E29:word16] = Mem424[ds:0x2E29:word16] - 0x0001
	branch ax_425 != 0x0000 l0800_5719
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_5719:
	ptr32 es_bx_432 = Mem427[ds:0x2E55:segptr32]
	word16 sp_439 = sp_170 - 2
	Mem442[ss:sp_439:word16] = DPB(ax_425, Mem427[SLICE(es_bx_432, selector, 16):(word16) es_bx_432 - Mem427[ds:0x2E2B:word16]:byte], 0)
	ds = fn0800_5D2F(ds, Mem442[ss:sp_439:byte])
// DataOut:
// DataOut (flags):
// SymbolicIn:



word16 fn0800_579B(selector ds, ptr16 & dsOut)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  ds:[0..15] ss:[0..15]
// LiveOut: ax ds
// Trashed: SCZO ax bx cx di ds dx es si Top
// Preserved: sp
fn0800_579B_entry:
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_579B:
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_58F2:
	word16 ax_6 = Mem5[ds:0x2A01:word16]
	word16 dx_7 = Mem5[ds:0x29FF:word16]
	branch ax_6 >=u Mem5[ds:0x2A09:word16] l0800_5902
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_5902:
	branch ax_6 != Mem5[ds:0x2A09:word16] l0800_590D
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_5904:
	branch dx_7 >=u Mem5[ds:0x2A07:word16] l0800_590D
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_590D:
	selector ds_51
	fn0800_4152(ds, Mem38[ds:0x2E59:word16] + Mem38[ds:0x2E31:word16], Mem38[ds:0x2E5B:word16], Mem24[ds:0x2E55:word16] - Mem24[ds:0x2E59:word16] - Mem24[ds:0x2E31:word16], Mem21[ds:0x29DF:word16], Mem5[ds:0x29E1:word16], out cx_487, out ds_51)
	dsOut = ds_51
	return 0x0000
// DataOut:
// DataOut (flags):
// SymbolicIn:

fn0800_579B_exit:
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_590A:
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_58FF:
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_57CF:
	selector ds_73
	branch fn0800_5CD9(ds, 0x0001, out ds_73) == 0x0000 l0800_579E
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_579E:
	selector ds_90
	word16 ax_86 = fn0800_5B15(ds_73, out si_488, out di_489, out ds_90)
	ds = fn0800_5D2F(ds_90, DPB(ax_86, (byte) ax_86 ^ Mem68[ds_90:0x2E4F:byte], 0))
	branch (Mem105[ds:0x2E4F:word16] & 0x0001) == 0x0000 l0800_57C1
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_57C1:
	Mem124[ds:0x2E4F:word16] = Mem105[ds:0x2E4F:word16] >>u 0x0001
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_57B4:
	Mem131[ds:0x2E4F:word16] = Mem105[ds:0x2E4F:word16] >>u 0x0001 | 0x8000
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_57C5:
	word16 v16_134 = Mem133[ds:0x29FF:word16] + 0x0001
	Mem135[ds:0x29FF:word16] = v16_134
	Mem139[ds:0x2A01:word16] = Mem135[ds:0x2A01:word16] + (v16_134 <u 0x0000)
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_57DD:
	selector ds_147
	branch fn0800_5CD9(ds_73, 0x0001, out ds_147) == 0x0000 l0800_5866
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_5866:
	selector ds_162 = fn0800_593F(ds_147)
	branch Mem143[ds_162:0x2E29:word16] != 0x0009 l0800_58B7
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_58B7:
	ds = fn0800_5975(ds_162)
	word16 v28_187 = Mem143[ds:0x29FF:word16] + Mem143[ds:0x2E29:word16]
	Mem188[ds:0x29FF:word16] = v28_187
	Mem192[ds:0x2A01:word16] = Mem188[ds:0x2A01:word16] + (v28_187 <u 0x0000)
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_58DA:
	word16 ax_196 = Mem195[ds:0x2E29:word16]
	Mem198[ds:0x2E29:word16] = Mem195[ds:0x2E29:word16] - 0x0001
	branch ax_196 != 0x0000 l0800_58C8
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_58C8:
	ptr32 es_bx_203 = Mem198[ds:0x2E55:segptr32]
	ds = fn0800_5D2F(ds, DPB(ax_196, Mem198[SLICE(es_bx_203, selector, 16):(word16) es_bx_203 - Mem198[ds:0x2E2B:word16]:byte], 0))
	Mem195 = Mem213
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_58E5:
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_5870:
	ds = fn0800_5A0F(ds_162)
	word16 v22_241 = Mem143[ds:0x29FF:word16] + Mem143[ds:0x2E47:word16]
	Mem242[ds:0x29FF:word16] = v22_241
	Mem246[ds:0x2A01:word16] = Mem242[ds:0x2A01:word16] + (v22_241 <u 0x0000)
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_588F:
	word16 ax_250 = Mem249[ds:0x2E47:word16]
	Mem252[ds:0x2E47:word16] = Mem249[ds:0x2E47:word16] - 0x0001
	branch ax_250 != 0x0000 l0800_5881
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_5881:
	selector ds_262
	word16 ax_258 = fn0800_5B15(ds, out si_494, out di_495, out ds_262)
	ds = fn0800_5D2F(ds_262, DPB(ax_258, (byte) ax_258 ^ Mem252[ds_262:0x2E4F:byte], 0))
	Mem249 = Mem278
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_589A:
	branch (Mem252[ds:0x2E4F:word16] & 0x0001) == 0x0000 l0800_58B0
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_58B0:
	Mem298[ds:0x2E4F:word16] = Mem252[ds:0x2E4F:word16] >>u 0x0001
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_58A2:
	Mem305[ds:0x2E4F:word16] = Mem252[ds:0x2E4F:word16] >>u 0x0001 | 0x8000
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_57EB:
	selector ds_400
	selector ds_312
	branch fn0800_5CD9(ds_147, 0x0001, out ds_312) != 0x0000 l0800_580A
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_580A:
	selector ds_348
	selector ds_331
	branch fn0800_5CD9(ds_312, 0x0001, out ds_331) != 0x0000 l0800_5820
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_5820:
	Mem360[ds_348:0x2E29:word16] = DPB(fn0800_5B15(ds_331, out si_492, out di_493, out ds_348), 0x00, 8) + 0x0008
	ds_331 = ds_348
	branch Mem360[ds_348:0x2E29:word16] != 0x0008 l0800_5835
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_5832:
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_58E8:
	fn0800_5CD9(ds_348, 0x0001, out ds)
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_5818:
	Mem379[ds_331:0x2E29:word16] = 0x0003
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_5835:
	ds = fn0800_5975(ds_331)
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_57F9:
	Mem395[ds_312:0x2E29:word16] = 0x0002
	Mem413[ds_400:0x2E2B:word16] = DPB(fn0800_5B15(ds_312, out si_490, out di_491, out ds_400), 0x00, 8) + 0x0001
	ds = ds_400
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_5838:
	word16 v13_418 = Mem415[ds:0x29FF:word16] + Mem415[ds:0x2E29:word16]
	Mem419[ds:0x29FF:word16] = v13_418
	Mem423[ds:0x2A01:word16] = Mem419[ds:0x2A01:word16] + (v13_418 <u 0x0000)
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_5858:
	word16 ax_427 = Mem426[ds:0x2E29:word16]
	Mem429[ds:0x2E29:word16] = Mem426[ds:0x2E29:word16] - 0x0001
	branch ax_427 != 0x0000 l0800_5846
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_5846:
	ptr32 es_bx_434 = Mem429[ds:0x2E55:segptr32]
	ds = fn0800_5D2F(ds, DPB(ax_427, Mem429[SLICE(es_bx_434, selector, 16):(word16) es_bx_434 - Mem429[ds:0x2E2B:word16]:byte], 0))
	Mem426 = Mem444
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_5863:
// DataOut:
// DataOut (flags):
// SymbolicIn:



selector fn0800_593F(selector ds)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  ds:[0..15] ss:[0..15]
// LiveOut: ds
// Trashed: SCZO ax bx cx ds dx es Top
// Preserved: sp
fn0800_593F_entry:
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_593F:
	selector ds_12
	Mem23[ds_12:0x2E29:word16] = fn0800_5CD9(ds, 0x0001, out ds_12) + 0x0004
	selector ds_30
	branch fn0800_5CD9(ds_12, 0x0001, out ds_30) == 0x0000 l0800_5974
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_595D:
	Mem63[ds_30:0x2E29:word16] = (Mem45[ds_30:0x2E29:word16] - 0x0001 << 0x0001) + fn0800_5CD9(ds_30, 0x0001, out ds_30)
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_5974:
	return ds_30
// DataOut:
// DataOut (flags):
// SymbolicIn:

fn0800_593F_exit:
// DataOut:
// DataOut (flags):
// SymbolicIn:



selector fn0800_5975(selector ds)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  ds:[0..15] ss:[0..15]
// LiveOut: ds
// Trashed: SCZO ax bx cx di ds dx es si Top
// Preserved: sp
fn0800_5975_entry:
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_5975:
	Mem5[ds:0x2E2B:word16] = 0x0000
	selector ds_110
	branch fn0800_5CD9(ds, 0x0001, out ds_110) == 0x0000 l0800_59FA
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_5989:
	selector ds_32
	Mem42[ds_32:0x2E2B:word16] = fn0800_5CD9(ds_110, 0x0001, out ds_32)
	branch fn0800_5CD9(ds_32, 0x0001, out ds_110) == 0x0000 l0800_59E3
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_59E3:
	branch Mem45[ds_110:0x2E2B:word16] != 0x0000 l0800_59FA
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_59EA:
	Mem81[ds_110:0x2E2B:word16] = fn0800_5CD9(ds_110, 0x0001, out ds_110) + 0x0002
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_59A4:
	selector ds_88
	Mem103[ds_88:0x2E2B:word16] = (Mem84[ds_88:0x2E2B:word16] << 0x0001) + fn0800_5CD9(ds_110, 0x0001, out ds_88) | 0x0004
	branch fn0800_5CD9(ds_88, 0x0001, out ds_110) != 0x0000 l0800_59FA
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_59CB:
	Mem142[ds_110:0x2E2B:word16] = (Mem125[ds_110:0x2E2B:word16] << 0x0001) + fn0800_5CD9(ds_110, 0x0001, out ds_110)
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_59FA:
	selector ds_149
	Mem168[ds_149:0x2E2B:word16] = (Mem159[ds_149:0x2E2B:word16] << 0x08) + DPB(fn0800_5B15(ds_110, out si_182, out di_183, out ds_149), 0x00, 8) + 0x0001
	return ds_149
// DataOut:
// DataOut (flags):
// SymbolicIn:

fn0800_5975_exit:
// DataOut:
// DataOut (flags):
// SymbolicIn:



selector fn0800_5A0F(selector ds)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  ds:[0..15] ss:[0..15]
// LiveOut: ds
// Trashed: SCZO ax bx cx ds dx es Top
// Preserved: sp
fn0800_5A0F_entry:
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_5A0F:
	selector ds_12
	Mem25[ds_12:0x2E47:word16] = (fn0800_5CD9(ds, 0x0004, out ds_12) << 0x0002) + 0x000C
	return ds_12
// DataOut:
// DataOut (flags):
// SymbolicIn:

fn0800_5A0F_exit:
// DataOut:
// DataOut (flags):
// SymbolicIn:



word16 fn0800_5A24(selector ds, word16 wArg02, word16 wArg04, word16 wArg06, ptr16 & dsOut)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  ds:[0..15] ss:[0..15] Stack +0002:[0..15] Stack +0004:[0..15] Stack +0006:[0..15]
// LiveOut: bp ds sp
// Trashed: SCZO ax bp bx cx di ds dx es si sp Top
// Preserved:
fn0800_5A24_entry:
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_5A24:
	fn0800_43D4(wArg02, wArg04, wArg06)
	selector ds_164
	word16 ax_38 = fn0800_5C39(ds, 0x0005, out si_180, out di_181, out ds_164)
	word16 sp_122 = fp - 0x0006
	word16 wArg06_144 = ax_38
	branch ax_38 == 0x0000 l0800_5A89
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_5A49:
	branch ax_38 <=u 0x0010 l0800_5A54
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_5A4F:
	wArg06_144 = 0x0010
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_5A54:
	branch wArg06_144 <=u 0x0000 l0800_5A7A
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_5A61:
	word16 si_75
	word16 di_80
	Mem90[wArg04:si_75:word16] = fn0800_5C39(ds_164, 0x0004, out si_75, out di_80, out ds_164)
	branch di_80 + 0x0001 <u wArg06_144 l0800_5A61
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_5A7A:
	word16 sp_117
	fn0800_4550(out bp_182)
	sp_122 = sp_117 + 0x0006
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_5A89:
	word16 bp_131 = Mem126[ss:sp_122 + 4:word16]
	dsOut = ds_164
	return bp_131
// DataOut:
// DataOut (flags):
// SymbolicIn:

fn0800_5A24_exit:
// DataOut:
// DataOut (flags):
// SymbolicIn:



word16 fn0800_5A8D(selector ds, word16 wArg02, selector psegArg04, ptr16 & dsOut)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  ds:[0..15] ss:[0..15] Stack +0002:[0..15] Stack +0004:[0..15]
// LiveOut: ax ds
// Trashed: SCZO ax bx cx ds dx es Top
// Preserved: bp di si sp
fn0800_5A8D_entry:
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_5A8D:
	word16 wLoc04_123 = 0x0000
	word16 di_18 = wArg02
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_5AA5:
	branch Mem21[psegArg04:di_18 + 0x000A:word16] == 0x0000 l0800_5A9F
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_5AAF:
	int32 dx_ax_30 = (int32) ((0x0001 << Mem21[psegArg04:di_18 + 0x000A:byte]) - 0x0001)
	word16 cx_35 = Mem21[ds:0x29FB:word16] & (word16) dx_ax_30
	branch (Mem21[ds:0x29FD:word16] & SLICE(dx_ax_30, word16, 16)) != Mem21[psegArg04:di_18 + 0x0008:word16] l0800_5A9F
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_5ACC:
	branch cx_35 != Mem21[psegArg04:di_18 + 0x0006:word16] l0800_5A9F
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_5A9F:
	di_18 = di_18 + 0x000C
	wLoc04_123 = wLoc04_123 + 0x0001
	Mem21 = Mem49
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_5AD2:
	selector ds_70
	fn0800_5C39(ds, Mem21[psegArg04:wArg02 + (word16) (wLoc04_123 *s 0x000C) + 0x000A:word16], out si_164, out di_165, out ds_70)
	branch wLoc04_123 >=u 0x0002 l0800_5AF8
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_5AF8:
	selector ds_91
	word16 ax_102 = fn0800_5C39(ds_70, wLoc04_123 - 0x0001, out si_166, out di_167, out ds_91) | 0x0001 << wLoc04_123 - 0x01
	dsOut = ds_91
	return ax_102
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_5AEF:
	dsOut = ds_70
	return wLoc04_123
// DataOut:
// DataOut (flags):
// SymbolicIn:

fn0800_5A8D_exit:
// DataOut:
// DataOut (flags):
// SymbolicIn:



word16 fn0800_5B15(selector ds, ptr16 & siOut, ptr16 & diOut, ptr16 & dsOut)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  ds:[0..15] ss:[0..15]
// LiveOut: ax di ds si
// Trashed: SCZO ax bx cx di ds dx es si Top
// Preserved: bp sp
fn0800_5B15_entry:
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_5B15:
	word16 ax_11 = Mem7[ds:0x2E73:word16]
	word16 dx_12 = Mem7[ds:0x2E71:word16]
	branch ax_11 == Mem7[ds:0x2E6F:word16] l0800_5B2E
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_5B2E:
	branch dx_12 + 0xFFFD == Mem7[ds:0x2E6D:word16] l0800_5B37
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_5B37:
	word16 ax_72
	word16 dx_71
	fn0800_4194(ds, Mem20[ds:0x29E3:word16], Mem7[ds:0x29E5:word16])
	// Failed to bind call argument.
	// Please report this issue at https://github.com/uxmal/reko
	word16 stackArg4 = <invalid>
	word16 dx_46
	ui32 bx_cx_233 = SEQ(dx_12 + 0xFFFD, ax_11) - SEQ(dx_46, fn0800_AD2F(ds, SEQ(Mem36[ds:0x29E5:word16], Mem39[ds:0x29E3:word16]), stackArg4, out cx_318, out dx_46))
	word16 cx_57 = (word16) bx_cx_233
	word16 bx_60 = SLICE(bx_cx_233, word16, 16)
	branch bx_60 <u 0x0000 l0800_5B76
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_5B67:
	branch bx_60 >u 0x0000 l0800_5B6F
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_5B69:
	branch cx_57 <=u 0xFFFD l0800_5B76
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_5B76:
	dx_71 = bx_60
	ax_72 = cx_57
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_5B6F:
	dx_71 = 0x0000
	ax_72 = 0xFFFD
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_5B7C:
	word16 v23_88 = Mem84[ds:0x29E5:word16]
	word16 v24_94 = Mem93[ds:0x29E3:word16]
	word16 ax_102 = Mem101[ds:0x2E73:word16]
	word16 dx_103 = Mem101[ds:0x2E71:word16]
	Mem104[ds:0x2E6F:word16] = ax_102
	Mem105[ds:0x2E6D:word16] = dx_103
	selector ds_114
	fn0800_4110(ds, dx_103, ax_102, ax_72, dx_71, v24_94, v23_88, out si_319, out di_320, out ds_114)
	ui32 v27_v26_235 = SEQ(bx_60, v26_126) - SEQ(dx_71, ax_72)
	word16 v26_126 = (word16) v27_v26_235
	word16 v27_131 = SLICE(v27_v26_235, word16, 16)
	word16 wLoc06_256 = v26_126
	word16 wLoc04_259 = v27_131
	branch Test(ULT,false) l0800_5BCB
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_5BBA:
	branch v27_131 >u 0x0000 l0800_5BC1
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_5BBC:
	branch v26_126 <=u 0x0002 l0800_5BCB
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_5BC1:
	wLoc04_259 = 0x0000
	wLoc06_256 = 0x0002
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_5BCB:
	fn0800_4110(ds_114, Mem163[ds_114:0x2E71:word16] + ax_72, Mem163[ds_114:0x2E73:word16], wLoc06_256, wLoc04_259, Mem153[ds_114:0x29E3:word16], Mem147[ds_114:0x29E5:word16], out si, out di, out ds)
	ax_11 = fn0800_ACB3(ds, Mem202[ds:0x29E3:word16], Mem199[ds:0x29E5:word16], 0x0001, out cx_321, out dx_322, out bx_323, out es_324)
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_5B34:
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_5B2B:
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_5C0B:
	ptr32 es_bx_219 = Mem218[ds:0x2E6D:segptr32]
	Mem221[ds:0x2E6D:word16] = Mem218[ds:0x2E6D:word16] + 0x0001
	word16 ax_284 = DPB(ax_11, Mem221[es_bx_219:byte], 0)
	siOut = si
	diOut = di
	dsOut = ds
	return ax_284
// DataOut:
// DataOut (flags):
// SymbolicIn:

fn0800_5B15_exit:
// DataOut:
// DataOut (flags):
// SymbolicIn:



word16 fn0800_5C1A(selector ds, word16 wArg02, ptr16 & siOut, ptr16 & dsOut)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  ds:[0..15] ss:[0..15] Stack +0002:[0..15]
// LiveOut: ax ds si
// Trashed: SCZO ax bx cx di ds dx es si Top
// Preserved: bp sp
fn0800_5C1A_entry:
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_5C1A:
	branch Mem7[ds:0x2A21:word16] != 0x0002 l0800_5C30
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_5C30:
	word16 si_16
	selector ds_22
	word16 ax_15 = fn0800_5C39(ds, wArg02, out si_16, out di_80, out ds_22)
	siOut = si_16
	dsOut = ds_22
	return ax_15
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_5C27:
	selector ds_37
	word16 ax_34 = fn0800_5CD9(ds, wArg02, out ds_37)
	siOut = si
	dsOut = ds_37
	return ax_34
// DataOut:
// DataOut (flags):
// SymbolicIn:

fn0800_5C1A_exit:
// DataOut:
// DataOut (flags):
// SymbolicIn:



word16 fn0800_5C39(selector ds, word16 wArg02, ptr16 & siOut, ptr16 & diOut, ptr16 & dsOut)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  ds:[0..15] ss:[0..15] Stack +0002:[0..15]
// LiveOut: ax di ds si
// Trashed: SCZO ax bx cx di ds dx es si Top
// Preserved: bp sp
fn0800_5C39_entry:
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_5C39:
	word16 sp_13 = fp - 0x000C
	word16 si_155 = wArg02
	word16 di_129 = 0x0000
	word16 wLoc08_165 = 0x0001
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_5CCA:
	word16 si_154 = si_155
	branch si_155 == 0x0000 l0800_5CD1
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_5CD1:
	word16 di_31 = Mem30[ss:sp_13:word16]
	siOut = Mem30[ss:sp_13 + 2:word16]
	diOut = di_31
	dsOut = ds
	return di_129
// DataOut:
// DataOut (flags):
// SymbolicIn:

fn0800_5C39_exit:
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_5CCE:
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_5C4D:
	branch Mem30[ds:0x2E45:word16] != 0x0000 l0800_5CA2
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_5C54:
	selector ds_45
	word16 ax_55 = DPB(fn0800_5B15(ds, out si_198, out di_199, out ds_45), 0x00, 8)
	// Failed to bind call argument.
	// Please report this issue at https://github.com/uxmal/reko
	word16 ax_57 = fn0800_5B15(ds_45, out si_154, out di_129, out ds)
	word16 stackArg0 = <invalid>
	word16 dx_88
	word16 ax_85 = fn0800_8C69(DPB(DPB(DPB(ax_57, 0x00, 8), Mem72[Mem72[ds:0x2E6D:segptr32] + 0x0001:byte], 0), 0x00, 8), 0x18, 0x0000, stackArg0, out cl_201, out dx_88)
	word16 ax_109 = ax_85 + (DPB(ax_57, 0x00, 8) << 0x08)
	ptr32 es_bx_94 = Mem72[ds:0x2E6D:segptr32]
	word16 ax_113 = ax_109 + ax_55
	Mem118[ds:0x29FD:word16] = dx_88 + DPB(DPB((word16) es_bx_94, Mem72[es_bx_94:byte], 0), 0x00, 8) + (ax_85 <u 0x0000) + (ax_109 <u 0x0000) + (ax_113 <u 0x0000)
	Mem119[ds:0x29FB:word16] = ax_113
	Mem120[ds:0x2E45:word16] = 0x0010
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_5CA2:
	branch (Mem122[ds:0x29FB:word16] & 0x0001) == 0x0000 l0800_5CB0
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_5CAD:
	di_129 = di_129 | wLoc08_165
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_5CB0:
	word16 ax_137 = Mem122[ds:0x29FD:word16]
	word16 dx_143 = __rcr(Mem122[ds:0x29FB:word16], 0x01, SLICE(cond(ax_137 >>u 0x0001), bool, 1))
	Mem144[ds:0x29FD:word16] = ax_137 >>u 0x0001
	Mem145[ds:0x29FB:word16] = dx_143
	Mem152[ds:0x2E45:word16] = Mem149[ds:0x2E45:word16] - 0x0001
	wLoc08_165 = wLoc08_165 << 0x0001
	si_155 = si_154 - 0x0001
// DataOut:
// DataOut (flags):
// SymbolicIn:



word16 fn0800_5CD9(selector ds, word16 wArg02, ptr16 & dsOut)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  ds:[0..15] ss:[0..15] Stack +0002:[0..15]
// LiveOut: ax ds
// Trashed: SCZO ax bx cx ds dx es Top
// Preserved: bp di si sp
fn0800_5CD9_entry:
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_5CD9:
	word16 di_15 = wArg02
	word16 si_16 = 0x0000
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_5D25:
	word16 di_20 = di_15
	branch di_15 != 0x0000 l0800_5CE5
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_5CE5:
	branch Mem25[ds:0x2E45:word16] != 0x0000 l0800_5D00
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_5CEC:
	word16 ax_44 = DPB(fn0800_5B15(ds, out si_16, out di_20, out ds), 0x00, 8)
	Mem43[ds:0x29FD:word16] = 0x0000
	Mem45[ds:0x29FB:word16] = ax_44
	Mem46[ds:0x2E45:word16] = 0x0008
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_5D00:
	si_16 = si_16 << 0x0001
	branch (Mem51[ds:0x29FB:word16] & 0x0080) == 0x0000 l0800_5D0E
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_5D0D:
	si_16 = si_16 + 0x0001
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_5D0E:
	word16 dx_63 = Mem51[ds:0x29FB:word16]
	Mem70[ds:0x29FD:word16] = __rcl(Mem51[ds:0x29FD:word16], 0x01, SLICE(cond(dx_63 << 0x0001), bool, 1))
	Mem71[ds:0x29FB:word16] = dx_63 << 0x0001
	Mem73[ds:0x2E45:word16] = Mem71[ds:0x2E45:word16] - 0x0001
	di_15 = di_20 - 0x0001
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_5D29:
	dsOut = ds
	return si_16
// DataOut:
// DataOut (flags):
// SymbolicIn:

fn0800_5CD9_exit:
// DataOut:
// DataOut (flags):
// SymbolicIn:



selector fn0800_5D2F(selector ds, byte bArg02)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  ds:[0..15] ss:[0..15] Stack +0002:[0..7]
// LiveOut: ds
// Trashed: SCZO ax bx cx di ds dx es si Top
// Preserved: D bp sp
fn0800_5D2F_entry:
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_5D2F:
	word16 ax_10 = Mem7[ds:0x2E5B:word16]
	word16 dx_11 = Mem7[ds:0x2E59:word16]
	branch ax_10 != Mem7[ds:0x2E57:word16] l0800_5D9E
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_5D40:
	branch dx_11 - 0x0001 != Mem7[ds:0x2E55:word16] l0800_5D9E
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_5D46:
	fn0800_4152(ds, Mem32[ds:0x2E59:word16] + Mem32[ds:0x2E31:word16], Mem32[ds:0x2E5B:word16], 0xFFFF - Mem22[ds:0x2E31:word16], Mem19[ds:0x29DF:word16], Mem7[ds:0x29E1:word16], out cx_148, out ds)
	fn0800_B0F3(Mem68[ds:0x2E59:word16], Mem65[ds:0x2E5B:word16], Mem57[ds:0x2E55:word16] - Mem57[ds:0x2E31:word16], Mem57[ds:0x2E57:word16], Mem40[ds:0x2E31:word16])
	ax_10 = Mem71[ds:0x2E5B:word16]
	word16 dx_85 = Mem71[ds:0x2E59:word16] + Mem71[ds:0x2E31:word16]
	Mem87[ds:0x2E57:word16] = ax_10
	Mem88[ds:0x2E55:word16] = dx_85
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_5D9E:
	Mem97[Mem90[ds:0x2E55:segptr32]:byte] = bArg02
	Mem99[ds:0x2E55:word16] = Mem97[ds:0x2E55:word16] + 0x0001
	Mem116[ds:0x2E4D:word16] = Mem99[ds:((DPB(DPB(ax_10, Mem99[ds:0x2E4D:byte] ^ bArg02, 0), 0x00, 8) & 0x00FF) << 0x0001) + 0x2A29:word16] ^ Mem99[ds:0x2E4D:word16] >>u 0x08
	return ds
// DataOut:
// DataOut (flags):
// SymbolicIn:

fn0800_5D2F_exit:
// DataOut:
// DataOut (flags):
// SymbolicIn:



word16 fn0800_5DCE(word16 ax, word16 dx, selector ds, word16 wArg02, word16 wArg04, ptr16 & dxOut, ptr16 & dsOut)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  ax:[0..15] ds:[0..15] dx:[0..15] ss:[0..15] Stack +0002:[0..15] Stack +0004:[0..15]
// LiveOut: ax ds dx
// Trashed: SCZO ax bx cx di ds dx es Top
// Preserved: bp si sp
fn0800_5DCE_entry:
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_5DCE:
	word16 ax_55
	fn0800_4194(ds, wArg02, wArg04)
	word16 dx_132 = dx
	branch Test(ULT,false) l0800_5DEE
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_5DE2:
	branch dx != 0x0000 l0800_5DE9
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_5DE4:
	branch ax <u 0x0400 l0800_5DEE
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_5DEE:
	fn0800_4194(ds, wArg02, wArg04)
	ax_55 = ax & 0xFFFC
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_5DE9:
	ax_55 = 0x0400
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_5DFD:
	word16 si_141 = ax_55
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_5E5B:
	branch si_141 != 0x0000 l0800_5E01
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_5E01:
	branch fn0800_3E27(ds, wArg02, wArg04, out cx_79, out dx_132, out di_80, out es_83, out ds, out Top_84) != 0x524E l0800_5E58
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_5E12:
	branch (fn0800_3E27(ds, wArg02, wArg04, out cx_284, out dx_285, out di_286, out es_287, out ds, out Top_288) & 0xFF00) != 0x4300 l0800_5E40
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_5E40:
	fn0800_ACB3(ds, wArg02, wArg04, 0x0001, out cx_289, out dx_132, out bx_290, out es_291)
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_5E58:
	si_141 = si_141 - 0x0002
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_5E26:
	fn0800_ACB3(ds, wArg02, wArg04, 0x0001, out cx_292, out dx_132, out bx_293, out es_294)
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_5E5F:
	dxOut = dx_132
	dsOut = ds
	return si_141
// DataOut:
// DataOut (flags):
// SymbolicIn:

fn0800_5DCE_exit:
// DataOut:
// DataOut (flags):
// SymbolicIn:



word16 fn0800_5E64(selector ds, ptr16 & dxOut, ptr16 & dsOut)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  ds:[0..15] ss:[0..15]
// LiveOut: ax ds dx sp
// Trashed: SCZO ax bp bx cx di ds dx es si sp Top
// Preserved: D
fn0800_5E64_entry:
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_5E64:
	word16 bp_1076 = fp - 2
	word16 sp_128 = fp - 0x003E
	word16 di_21 = 0x2202
	word16 si_22 = 0x4271
	word16 cx_2217 = 0x0004
	word16 dx_118 = 0x0003
	branch true l0800_5E80
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_5E7E:
	cx_2217 = 0x0003
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_5E80:
	word16 ax_28 = 0x0000
	bool Z_41 = SLICE(cond(0x0000), bool, 2)
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_5E82:
	branch cx_2217 == 0x0000 l0800_5E84
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_5E82_1:
	Z_41 = SLICE(cond(Mem18[ds:si_2663:byte] - Mem18[ds:di_2664:byte]), bool, 2) (alias)
	si_22 = si_2663 + 0x0001
	di_21 = di_2664 + 0x0001
	cx_2217 = cx_2217 - 0x0001
	si_2663 = si_22
	di_2664 = di_21
	branch Mem18[ds:si_2663:byte] != Mem18[ds:di_2664:byte] l0800_5E82
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_5E84:
	branch Z_41 l0800_5E8B
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_5E86:
	ax_28 = 0x0001
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_5E8B:
	word16 ax_112 = ax_28
	branch ax_28 == 0x0000 l0800_5EC3
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_5E8F:
	word16 di_2193 = 0x4271
	word16 si_2198 = 0x2202
	word16 cx_77 = 0x0004
	word16 dx_2225 = 0xFFFF
	branch true l0800_5EA5
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_5EA1:
	cx_77 = 0x0003
	dx_2225 = 0x0000
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_5EA5:
	word16 cx_86 = cx_77 >>u 0x0001
	cx_2216 = cx_86
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_5EA7:
	word16 cx_2216
	branch cx_2216 == 0x0000 l0800_5EA9
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_5EA9:
	word16 cx_2206 = cx_2216 * 0x0002 + (cx_86 <u 0x0000)
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_5EAB:
	branch cx_2206 == 0x0000 l0800_5EAD
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_5EAD:
	word16 cx_2196 = dx_2225
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_5EB1:
	branch cx_2196 == 0x0000 l0800_5EB3
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_5EB3:
	word16 sp_121
	bp_1076 = fn0800_09A3(out ds)
	sp_128 = sp_121 + 0x0008
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_5EC3:
	word16 ax_150 = (DPB(DPB(ax_112, Mem131[ds:0x2E75:byte], 0), 0x00, 8) << 0x08) + DPB(DPB(dx_118, Mem131[ds:0x2E76:byte], 0), 0x00, 8)
	branch Mem131[ds:0x2A09:word16] >u 0x0000 l0800_5EED
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_5EDC:
	branch Mem131[ds:0x2A09:word16] != 0x0000 l0800_5EE4
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_5EDE:
	branch ax_150 <u Mem131[ds:0x2A07:word16] l0800_5EED
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_5EED:
	branch Mem131[ds:0x2A0D:word16] <u 0x0000 l0800_5F0A
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_5EF4:
	branch Mem131[ds:0x2A0D:word16] >u 0x0000 l0800_5EFE
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_5EF6:
	branch Mem131[ds:0x2A0B:word16] <=u 0x7FF0 l0800_5F0A
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_5EFE:
	Mem165[ds:0x2A0D:word16] = 0x0000
	Mem166[ds:0x2A0B:word16] = 0x7FF0
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_5F0A:
	word16 sp_174 = sp_128 - 2
	Mem179[ss:sp_174:word16] = 0x0000
	Mem182[ss:sp_174 - 2:word16] = 0x0000
	Mem184[ss:sp_174 - 4:word16] = 0x0002
	Mem188[ss:sp_174 - 6:word16] = Mem184[ds:0x29E5:word16]
	Mem191[ss:sp_174 - 8:word16] = Mem188[ds:0x29E3:word16]
	fn0800_ACB3(ds, Mem191[ss:sp_174 - 8:word16], Mem191[ss:sp_174 - 6:word16], Mem191[ss:sp_174:word16], out cx_2492, out dx_2493, out bx_2494, out es_2495)
	Mem205[ss:sp_174:word16] = Mem191[ds:0x29E5:word16]
	Mem208[ss:sp_174 - 2:word16] = Mem205[ds:0x29E3:word16]
	selector ds_213
	Mem231[ss:bp_1076 - 0x0022:word16] = fn0800_3FAD(ds, Mem208[ss:sp_174 - 2:word16], Mem208[ss:sp_174:word16], out cx_2496, out di_2497, out ds_213)
	Mem234[ss:sp_174:word16] = Mem231[ds_213:0x29E5:word16]
	Mem237[ss:sp_174 - 2:word16] = Mem234[ds_213:0x29E3:word16]
	selector ds_242
	word16 ax_238 = fn0800_3FAD(ds_213, Mem237[ss:sp_174 - 2:word16], Mem237[ss:sp_174:word16], out cx_2498, out di_2499, out ds_242)
	word16 di_251 = ax_238
	branch Mem237[ss:bp_1076 - 0x0022:word16] == 0x0000 l0800_5F48
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_5F47:
	di_251 = ax_238 - 0x0001
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_5F48:
	// Failed to bind call argument.
	// Please report this issue at https://github.com/uxmal/reko
	word16 stackArg0 = <invalid>
	word16 dx_265
	word16 sp_266
	word16 ax_274 = fn0800_8C69(di_251, 0x09, 0x0000, stackArg0, out cl_2501, out dx_265) + Mem237[ss:bp_1076 - 0x0022:word16]
	Mem278[ss:bp_1076 - 0x0002:word16] = dx_265 + (ax_274 <u 0x0000)
	Mem279[ss:bp_1076 - 0x0004:word16] = ax_274
	word16 ax_280 = Mem279[ss:bp_1076 - 0x0002:word16]
	word16 dx_281 = Mem279[ss:bp_1076 - 0x0004:word16]
	branch ax_280 <u Mem279[ds_242:0x2A09:word16] l0800_5F7E
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_5F69:
	branch ax_280 >u Mem279[ds_242:0x2A09:word16] l0800_5F71
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_5F6B:
	branch dx_281 <=u Mem279[ds_242:0x2A07:word16] l0800_5F7E
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_5F71:
	word16 dx_291 = Mem279[ds_242:0x2A07:word16]
	Mem294[ss:bp_1076 - 0x0002:word16] = Mem279[ds_242:0x2A09:word16]
	Mem295[ss:bp_1076 - 0x0004:word16] = dx_291
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_5F7E:
	Mem303[ss:sp_266 - 2:word16] = Mem297[ds_242:0x29E5:word16]
	Mem306[ss:sp_266 - 4:word16] = Mem303[ds_242:0x29E3:word16]
	selector ds_311
	Mem322[ss:bp_1076 - 0x0024:word16] = fn0800_3FAD(ds_242, Mem306[ss:sp_266 - 4:word16], Mem306[ss:sp_266 - 2:word16], out cx_2502, out di_2503, out ds_311)
	Mem325[ss:sp_266 - 2:word16] = Mem322[ds_311:0x29E5:word16]
	Mem328[ss:sp_266 - 4:word16] = Mem325[ds_311:0x29E3:word16]
	selector ds_333
	Mem343[ss:bp_1076 - 0x0026:word16] = fn0800_3FAD(ds_311, Mem328[ss:sp_266 - 4:word16], Mem328[ss:sp_266 - 2:word16], out cx_2504, out di_2505, out ds_333)
	Mem346[ss:sp_266 - 2:word16] = Mem343[ds_333:0x29E5:word16]
	Mem349[ss:sp_266 - 4:word16] = Mem346[ds_333:0x29E3:word16]
	selector ds_354
	Mem364[ss:bp_1076 - 0x0028:word16] = fn0800_3FAD(ds_333, Mem349[ss:sp_266 - 4:word16], Mem349[ss:sp_266 - 2:word16], out cx_2506, out di_2507, out ds_354)
	Mem367[ss:sp_266 - 2:word16] = Mem364[ds_354:0x29E5:word16]
	Mem370[ss:sp_266 - 4:word16] = Mem367[ds_354:0x29E3:word16]
	selector ds_375
	Mem385[ss:bp_1076 - 0x002A:word16] = fn0800_3FAD(ds_354, Mem370[ss:sp_266 - 4:word16], Mem370[ss:sp_266 - 2:word16], out cx_2508, out di_2509, out ds_375)
	Mem388[ss:sp_266 - 2:word16] = Mem385[ds_375:0x29E5:word16]
	Mem391[ss:sp_266 - 4:word16] = Mem388[ds_375:0x29E3:word16]
	selector ds_396
	Mem406[ss:bp_1076 - 0x002C:word16] = fn0800_3FAD(ds_375, Mem391[ss:sp_266 - 4:word16], Mem391[ss:sp_266 - 2:word16], out cx_2510, out di_2511, out ds_396)
	Mem409[ss:sp_266 - 2:word16] = Mem406[ds_396:0x29E5:word16]
	Mem412[ss:sp_266 - 4:word16] = Mem409[ds_396:0x29E3:word16]
	selector ds_417
	Mem427[ss:bp_1076 - 0x002E:word16] = fn0800_3FAD(ds_396, Mem412[ss:sp_266 - 4:word16], Mem412[ss:sp_266 - 2:word16], out cx_2512, out di_2513, out ds_417)
	Mem430[ss:sp_266 - 2:word16] = Mem427[ds_417:0x29E5:word16]
	Mem433[ss:sp_266 - 4:word16] = Mem430[ds_417:0x29E3:word16]
	selector ds_438
	fn0800_3FAD(ds_417, Mem433[ss:sp_266 - 4:word16], Mem433[ss:sp_266 - 2:word16], out cx_2514, out di_2515, out ds_438)
	Mem450[ss:sp_266 - 2:word16] = Mem433[ds_438:0x29E5:word16]
	Mem453[ss:sp_266 - 4:word16] = Mem450[ds_438:0x29E3:word16]
	selector ds_458
	Mem468[ss:bp_1076 - 0x0030:word16] = fn0800_3FAD(ds_438, Mem453[ss:sp_266 - 4:word16], Mem453[ss:sp_266 - 2:word16], out cx_2516, out di_2517, out ds_458)
	Mem471[ss:sp_266 - 2:word16] = Mem468[ds_458:0x29E5:word16]
	Mem474[ss:sp_266 - 4:word16] = Mem471[ds_458:0x29E3:word16]
	selector ds_479
	Mem489[ss:bp_1076 - 0x0032:word16] = fn0800_3FAD(ds_458, Mem474[ss:sp_266 - 4:word16], Mem474[ss:sp_266 - 2:word16], out cx_2518, out di_2519, out ds_479)
	Mem492[ss:sp_266 - 2:word16] = Mem489[ds_479:0x29E5:word16]
	Mem495[ss:sp_266 - 4:word16] = Mem492[ds_479:0x29E3:word16]
	selector ds_500
	Mem510[ss:bp_1076 - 0x0034:word16] = fn0800_3FAD(ds_479, Mem495[ss:sp_266 - 4:word16], Mem495[ss:sp_266 - 2:word16], out cx_2520, out di_2521, out ds_500)
	Mem513[ss:sp_266 - 2:word16] = Mem510[ds_500:0x29E5:word16]
	Mem516[ss:sp_266 - 4:word16] = Mem513[ds_500:0x29E3:word16]
	selector ds_521
	word16 ax_517 = fn0800_3FAD(ds_500, Mem516[ss:sp_266 - 4:word16], Mem516[ss:sp_266 - 2:word16], out cx_2522, out di_2523, out ds_521)
	Mem532[ss:sp_266 - 2:word16] = Mem516[ds_521:0x29E1:word16]
	Mem535[ss:sp_266 - 4:word16] = Mem532[ds_521:0x29DF:word16]
	word16 ax_546 = (DPB(DPB(ax_517, Mem535[ds_521:0x2E75:byte], 0), 0x00, 8) << 0x08) + DPB(DPB(dx_522, Mem535[ds_521:0x2E76:byte], 0), 0x00, 8)
	Mem551[ss:sp_266 - 6:word16] = 0x0000
	Mem553[ss:sp_266 - 8:word16] = ax_546
	Mem555[ss:sp_266 - 10:word16] = ds_521
	Mem558[ss:sp_266 - 12:word16] = 0x2E77
	selector ds_1025
	word16 cx_1040
	word16 ax_1037 = (word16) fn0800_4152(ds_521, Mem558[ss:sp_266 - 12:word16], Mem558[ss:sp_266 - 10:word16], Mem558[ss:sp_266 - 8:word16], Mem558[ss:sp_266 - 4:word16], Mem558[ss:sp_266 - 2:word16], out cx_1040, out ds_1025)
	word16 sp_1028 = sp_266
	branch Mem558[ss:bp_1076 - 0x0024:word16] != 0x0000 l0800_6064
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_6064:
	Mem580[ss:sp_266 - 2:word16] = 0x0000
	Mem582[ss:sp_266 - 4:word16] = 0xFFFF
	// Failed to bind call argument.
	// Please report this issue at https://github.com/uxmal/reko
	// Failed to bind call argument.
	// Please report this issue at https://github.com/uxmal/reko
	word16 stackArg2 = <invalid>
	word16 stackArg4 = <invalid>
	word16 dx_589
	word16 sp_592
	word16 di_587
	selector ds_588
	word16 ax_583 = fn0800_4311(stackArg2, stackArg4, out dx_589, out bp_1076, out si_2526, out di_587, out ds_588)
	Mem599[ss:bp_1076 - 0x000A:word16] = dx_589
	Mem600[ss:bp_1076 - 0x000C:word16] = ax_583
	Mem605[ss:sp_592 + 0x0002:word16] = 0x0000
	Mem607[ss:sp_592:word16] = 0x0000
	Mem610[ss:sp_592 - 2:word16] = Mem607[ss:bp_1076 - 0x0034:word16]
	Mem613[ss:sp_592 - 4:word16] = Mem610[ds_588:0x29E5:word16]
	Mem616[ss:sp_592 - 6:word16] = Mem613[ds_588:0x29E3:word16]
	word16 bx_618
	word16 cx_619
	selector es_621
	fn0800_ACB3(ds_588, Mem616[ss:sp_592 - 6:word16], Mem616[ss:sp_592 - 4:word16], Mem616[ss:sp_592 + 2:word16], out cx_619, out dx_2527, out bx_618, out es_621)
	Mem631[ss:bp_1076 - 0x0036:word16] = Mem616[ss:bp_1076 - 0x000C:word16]
	word16 sp_626 = sp_592 + 0x0004
	word16 si_627 = 0x0000
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_60D6:
	branch si_627 != Mem635[ss:bp_1076 - 0x0024:word16] l0800_6096
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_6096:
	word16 sp_641 = sp_626 - 2
	Mem642[ss:sp_641:word16] = Mem635[ds_588:0x29E5:word16]
	Mem645[ss:sp_641 - 2:word16] = Mem642[ds_588:0x29E3:word16]
	selector ds_650
	Mem660[ss:bp_1076 - 0x0022:word16] = fn0800_3FAD(ds_588, Mem645[ss:sp_641 - 2:word16], Mem645[ss:sp_641:word16], out cx_2536, out di_2537, out ds_650)
	Mem663[ss:sp_641:word16] = Mem660[ds_650:0x29E5:word16]
	Mem666[ss:sp_641 - 2:word16] = Mem663[ds_650:0x29E3:word16]
	// Failed to bind call argument.
	// Please report this issue at https://github.com/uxmal/reko
	word16 cx_669
	word16 ax_667 = fn0800_3FAD(ds_650, Mem666[ss:sp_641 - 2:word16], Mem666[ss:sp_641:word16], out cx_669, out di_2538, out ds_588)
	word16 stackArg0 = <invalid>
	byte cl_687
	word16 dx_688
	word16 ax_694 = fn0800_8C69(ax_667, 0x04, 0x0000, stackArg0, out cl_687, out dx_688) + Mem666[ss:bp_1076 - 0x0022:word16]
	es_621 = Mem666[ss:bp_1076 - 0x000A:selector]
	bx_618 = Mem666[ss:bp_1076 - 0x0036:word16]
	Mem700[es_621:bx_618 + 0x0002:word16] = dx_688 + (ax_694 <u 0x0000)
	Mem701[es_621:bx_618:word16] = ax_694
	Mem703[ss:bp_1076 - 0x0036:word16] = Mem701[ss:bp_1076 - 0x0036:word16] + 0x0004
	di_587 = ax_667
	cx_619 = DPB(cx_669, cl_687, 0) (alias)
	si_627 = si_627 + 0x0001
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_60DB:
	word16 sp_708 = sp_626 - 2
	Mem709[ss:sp_708:word16] = 0x667B
	Mem712[ss:sp_708 - 2:word16] = 0x0004
	Mem715[ss:sp_708 - 4:word16] = Mem712[ss:bp_1076 - 0x0024:word16]
	Mem718[ss:sp_708 - 6:word16] = Mem715[ss:bp_1076 - 0x000A:word16]
	Mem721[ss:sp_708 - 8:word16] = Mem718[ss:bp_1076 - 0x000C:word16]
	// Failed to bind call argument.
	// Please report this issue at https://github.com/uxmal/reko
	// Failed to bind call argument.
	// Please report this issue at https://github.com/uxmal/reko
	word16 stackArg2 = <invalid>
	word16 stackArg4 = <invalid>
	word16 cx_1016 = fn0800_B95E(cx_619, bx_618, si_627, di_587, es_621, ds_588, stackArg2, stackArg4, Mem721[ss:sp_708 - 4:word16], Mem721[ss:sp_708 - 2:word16], Mem721[ss:sp_708:word16])
	word16 di_741 = Mem721[ss:bp_1076 - 0x000C:word16]
	Mem748[ss:bp_1076 - 0x0038:word16] = -false
	word16 sp_1023 = sp_708 + 0x0002
	word16 si_2232 = 0x0000
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_620C:
	branch si_2232 == Mem752[ss:bp_1076 - 0x0024:word16] l0800_6214
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_6214:
	word16 sp_757 = sp_1023 - 2
	Mem758[ss:sp_757:word16] = Mem752[ss:bp_1076 - 0x000A:word16]
	Mem761[ss:sp_757 - 2:word16] = Mem758[ss:bp_1076 - 0x000C:word16]
	// Failed to bind call argument.
	// Please report this issue at https://github.com/uxmal/reko
	word16 stackArg2 = <invalid>
	ax_1037 = fn0800_4346(ds_588, stackArg2, Mem761[ss:sp_757:word16], out cx_1040, out dx_2577, out bx_2578, out ds_1025)
	sp_1028 = sp_757 + 0x0002
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_6211:
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_6104:
	selector es_775 = Mem752[ss:bp_1076 - 0x000A:selector]
	word16 ax_777 = Mem752[es_775:di_741 + 0x0002:word16]
	word16 dx_778 = Mem752[es_775:di_741:word16]
	Mem779[ss:bp_1076 - 0x0012:word16] = ax_777
	Mem780[ss:bp_1076 - 0x0014:word16] = dx_778
	Mem785[ss:bp_1076 - 0x000E:word16] = ax_777 & 0x000F
	Mem786[ss:bp_1076 - 0x0010:word16] = dx_778 & 0xFFF0
	word16 sp_788 = sp_1023 - 2
	Mem789[ss:sp_788:word16] = Mem786[ds_588:0x29E1:word16]
	Mem792[ss:sp_788 - 2:word16] = Mem789[ds_588:0x29DF:word16]
	Mem796[ss:sp_788 - 4:word16] = DPB(ax_777 & 0x000F, 0x00, 0)
	// Failed to bind call argument.
	// Please report this issue at https://github.com/uxmal/reko
	word16 stackArg6 = <invalid>
	word16 cx_800
	selector ds_805
	fn0800_4047(cx_1016, ds_588, Mem796[ss:sp_788 - 4:byte], Mem796[ss:sp_788 - 2:segptr32], stackArg6, out cx_800, out dx_2580, out bx_2581, out di_2582, out es_2583, out ds_805, out Top_2584)
	Mem814[ss:sp_788:word16] = Mem796[ds_805:0x29E1:word16]
	Mem817[ss:sp_788 - 2:word16] = Mem814[ds_805:0x29DF:word16]
	// Failed to bind call argument.
	// Please report this issue at https://github.com/uxmal/reko
	word16 stackArg0 = <invalid>
	byte cl_823
	word16 sp_825
	word16 ax_821 = fn0800_8CAA(Mem817[ss:bp_1076 - 0x0010:word16], 0x04, Mem817[ss:bp_1076 - 0x000E:word16], stackArg0, out cl_823, out dx_2586)
	Mem831[ss:sp_825 - 2:word16] = ax_821
	word16 di_836
	word16 cx_835
	selector ds_837
	fn0800_40BF(ax_821, DPB(cx_800, cl_823, 0), ds_805, Mem831[ss:sp_825 - 2:byte], Mem831[ss:sp_825:word16], Mem831[ss:sp_825 + 2:word16], out cx_835, out dx_2587, out di_836, out ds_837)
	Mem847[ss:bp_1076 - 0x0022:word16] = 0x0000
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_6150:
	selector es_851 = Mem850[ss:bp_1076 - 0x000A:selector]
	ui32 ax_dx_2248 = SEQ(Mem850[es_851:di_836 + 0x0002:word16], Mem850[es_851:di_836:word16]) - SEQ(Mem850[ss:bp_1076 - 0x000E:word16], Mem850[ss:bp_1076 - 0x0010:word16])
	Mem859[ss:bp_1076 - 0x0016:word16] = SLICE(ax_dx_2248, word16, 16)
	Mem860[ss:bp_1076 - 0x0018:word16] = (word16) ax_dx_2248
	Mem862[ss:bp_1076 - 0x0010:word16] = v101_861
	ui32 v102_v101_2250 = SEQ(Mem862[ss:bp_1076 - 0x000E:word16], Mem860[ss:bp_1076 - 0x0010:word16]) + ax_dx_2248
	Mem866[ss:bp_1076 - 0x000E:word16] = SLICE(v102_v101_2250, word16, 16)
	word16 v101_861 = (word16) v102_v101_2250
	branch Mem866[ss:bp_1076 - 0x0016:word16] >u 0x0000 l0800_61B9
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_6172:
	branch Mem866[ss:bp_1076 - 0x0016:word16] != 0x0000 l0800_617B
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_6174:
	branch Mem866[ss:bp_1076 - 0x0018:word16] >u 0x00FF l0800_61B9
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_617B:
	ui32 ax_dx_2246 = SEQ(Mem866[ss:bp_1076 - 0x000E:word16], Mem866[ss:bp_1076 - 0x0010:word16]) - SEQ(Mem866[ss:bp_1076 - 0x0012:word16], Mem866[ss:bp_1076 - 0x0014:word16])
	word16 dx_877 = (word16) ax_dx_2246
	word16 ax_880 = SLICE(ax_dx_2246, word16, 16)
	branch ax_880 >u 0x0000 l0800_61B9
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_618B:
	branch Test(ULT,false) l0800_6192
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_618D:
	branch dx_877 >=u 0xFFF0 l0800_61B9
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_6192:
	branch Mem866[ss:bp_1076 - 0x0022:word16] == 0x00FF l0800_61B9
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_6199:
	Mem901[ss:sp_825 + 0x0002:word16] = Mem866[ds_837:0x29E1:word16]
	Mem904[ss:sp_825:word16] = Mem901[ds_837:0x29DF:word16]
	Mem909[ss:sp_825 - 0x0002:word16] = DPB(ax_880, Mem904[ss:bp_1076 - 0x0018:byte], 0)
	// Failed to bind call argument.
	// Please report this issue at https://github.com/uxmal/reko
	word16 stackArg6 = <invalid>
	word16 di_919
	fn0800_4047(cx_835, ds_837, Mem909[ss:sp_825 - 0x0002:byte], Mem909[ss:sp_825:segptr32], stackArg6, out cx_835, out dx_2616, out bx_2617, out di_919, out es_2618, out ds_837, out Top_2619)
	Mem927[ss:bp_1076 - 0x0022:word16] = Mem909[ss:bp_1076 - 0x0022:word16] + 0x0001
	di_836 = di_919 + 0x0004
	si_2232 = si_2232 + 0x0001
	branch si_2232 != Mem927[ss:bp_1076 - 0x0024:word16] l0800_6150
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_61B9:
	Mem940[ss:sp_825 + 0x0002:word16] = 0x0001
	word16 ax_945 = -(Mem940[ss:bp_1076 - 0x0022:word16] + 0x0003)
	Mem950[ss:sp_825:word16] = Mem940[ss:bp_1076 - 0x0038:word16] - (ax_945 == 0x0000)
	Mem952[ss:sp_825 - 0x0002:word16] = ax_945
	Mem956[ss:sp_825 - 0x0004:word16] = Mem952[ds_837:0x29E1:word16]
	Mem959[ss:sp_825 - 0x0006:word16] = Mem956[ds_837:0x29DF:word16]
	word16 cx_962
	word16 ax_960 = fn0800_ACB3(ds_837, Mem959[ss:sp_825 - 0x0006:word16], Mem959[ss:sp_825 - 0x0004:word16], Mem959[ss:sp_825 + 0x0002:word16], out cx_962, out dx_2603, out bx_2604, out es_2605)
	Mem973[ss:sp_825 + 0x0002:word16] = Mem959[ds_837:0x29E1:word16]
	Mem976[ss:sp_825:word16] = Mem973[ds_837:0x29DF:word16]
	Mem980[ss:sp_825 - 0x0002:word16] = DPB(ax_960, Mem976[ss:bp_1076 - 0x0022:byte], 0)
	// Failed to bind call argument.
	// Please report this issue at https://github.com/uxmal/reko
	word16 stackArg6 = <invalid>
	fn0800_4047(cx_962, ds_837, Mem980[ss:sp_825 - 0x0002:byte], Mem980[ss:sp_825:segptr32], stackArg6, out cx_2607, out dx_2608, out bx_2609, out di_741, out es_2610, out ds_588, out Top_2611)
	Mem996[ss:sp_825 + 0x0002:word16] = 0x0001
	word16 ax_997 = Mem996[ss:bp_1076 - 0x0022:word16]
	Mem1005[ss:sp_825:word16] = SLICE(cond(ax_997 + 0x0002), bool, 1)
	Mem1007[ss:sp_825 - 0x0002:word16] = ax_997 + 0x0002
	Mem1010[ss:sp_825 - 0x0004:word16] = Mem1007[ds_588:0x29E1:word16]
	Mem1013[ss:sp_825 - 0x0006:word16] = Mem1010[ds_588:0x29DF:word16]
	fn0800_ACB3(ds_588, Mem1013[ss:sp_825 - 0x0006:word16], Mem1013[ss:sp_825 - 0x0004:word16], Mem1013[ss:sp_825 + 0x0002:word16], out cx_1016, out dx_2612, out bx_2613, out es_2614)
	sp_1023 = sp_825 + 0x0004
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_6061:
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_6220:
	word16 sp_1029 = sp_1028 - 2
	Mem1031[ss:sp_1029:word16] = Mem1026[ds_1025:0x29E1:word16]
	Mem1034[ss:sp_1029 - 2:word16] = Mem1031[ds_1025:0x29DF:word16]
	Mem1039[ss:sp_1029 - 4:word16] = DPB(ax_1037, 0x00, 0)
	// Failed to bind call argument.
	// Please report this issue at https://github.com/uxmal/reko
	word16 stackArg6 = <invalid>
	selector ds_1048
	fn0800_4047(cx_1040, ds_1025, Mem1039[ss:sp_1029 - 4:byte], Mem1039[ss:sp_1029 - 2:segptr32], stackArg6, out cx_2529, out dx_2530, out bx_2531, out di_2532, out es_2533, out ds_1048, out Top_2534)
	Mem1057[ss:sp_1029:word16] = Mem1039[ds_1048:0x29E1:word16]
	Mem1060[ss:sp_1029 - 2:word16] = Mem1057[ds_1048:0x29DF:word16]
	// Failed to bind call argument.
	// Please report this issue at https://github.com/uxmal/reko
	word16 stackArg4 = <invalid>
	word16 dx_1064
	word16 cx_1063
	word16 ax_1061 = fn0800_AD2F(ds_1048, Mem1060[ss:sp_1029 - 2:segptr32], stackArg4, out cx_1063, out dx_1064)
	Mem1077[ss:bp_1076 - 0x001A:word16] = dx_1064 + 0xFF + (ax_1061 <u 0xFFE0)
	Mem1078[ss:bp_1076 - 0x001C:word16] = ax_1061 + 0xFFE0
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_6266:
	word16 ax_1082 = Mem1081[ss:bp_1076 - 0x001C:word16]
	branch (ax_1082 & 0x000F) != 0x0000 l0800_624D
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_624D:
	word16 sp_1091 = sp_1028 - 2
	Mem1092[ss:sp_1091:word16] = Mem1081[ds_1048:0x29E1:word16]
	Mem1095[ss:sp_1091 - 2:word16] = Mem1092[ds_1048:0x29DF:word16]
	Mem1099[ss:sp_1091 - 4:word16] = DPB(ax_1082 & 0x000F, 0x00, 0)
	// Failed to bind call argument.
	// Please report this issue at https://github.com/uxmal/reko
	word16 stackArg6 = <invalid>
	fn0800_4047(cx_1063, ds_1048, Mem1099[ss:sp_1091 - 4:byte], Mem1099[ss:sp_1091 - 2:segptr32], stackArg6, out cx_1063, out dx_2543, out bx_2544, out di_2545, out es_2546, out ds_1048, out Top_2547)
	word16 v163_1114 = Mem1099[ss:bp_1076 - 0x001C:word16] + 0x0001
	Mem1115[ss:bp_1076 - 0x001C:word16] = v163_1114
	Mem1119[ss:bp_1076 - 0x001A:word16] = Mem1115[ss:bp_1076 - 0x001A:word16] + (v163_1114 <u 0x0000)
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_6271:
	word16 v64_1124 = Mem1081[ss:bp_1076 - 0x0004:word16] - (Mem1081[ss:bp_1076 - 0x0026:word16] << 0x04)
	Mem1125[ss:bp_1076 - 0x0004:word16] = v64_1124
	Mem1129[ss:bp_1076 - 0x0002:word16] = Mem1125[ss:bp_1076 - 0x0002:word16] - (v64_1124 <u 0x0000)
	word16 sp_1131 = sp_1028 - 2
	Mem1132[ss:sp_1131:word16] = 0x0000
	word16 ax_1133 = Mem1132[ss:bp_1076 - 0x0026:word16]
	Mem1139[ss:sp_1131 - 2:word16] = 0x0000
	Mem1141[ss:sp_1131 - 4:word16] = ax_1133 << 0x04
	Mem1144[ss:sp_1131 - 6:word16] = Mem1141[ds_1048:0x29E5:word16]
	Mem1147[ss:sp_1131 - 8:word16] = Mem1144[ds_1048:0x29E3:word16]
	fn0800_ACB3(ds_1048, Mem1147[ss:sp_1131 - 8:word16], Mem1147[ss:sp_1131 - 6:word16], Mem1147[ss:sp_1131:word16], out cx_2548, out dx_2549, out bx_2550, out es_2551)
	Mem1161[ss:sp_1131:word16] = Mem1147[ss:bp_1076 - 0x0002:word16]
	Mem1164[ss:sp_1131 - 2:word16] = Mem1161[ss:bp_1076 - 0x0004:word16]
	Mem1167[ss:sp_1131 - 4:word16] = Mem1164[ss:bp_1076 - 0x0002:word16]
	Mem1170[ss:sp_1131 - 6:word16] = Mem1167[ss:bp_1076 - 0x0004:word16]
	word16 bp_1172
	selector ds_1176
	word16 sp_1180
	fn0800_75EA(ds_1048, Mem1170[ss:sp_1131 - 6:word16], Mem1170[ss:sp_1131 - 4:word16], Mem1170[ss:sp_1131 - 2:word16], Mem1170[ss:sp_1131:word16], out dx_2552, out bp_1172, out si_2553, out ds_1176)
	Mem1191[ss:sp_1180 + 0x0006:word16] = 0x0000
	Mem1194[ss:sp_1180 + 0x0004:word16] = 0x0000
	Mem1196[ss:sp_1180 + 0x0002:word16] = 0x0020
	Mem1199[ss:sp_1180:word16] = Mem1196[ds_1176:0x29E1:word16]
	Mem1202[ss:sp_1180 - 2:word16] = Mem1199[ds_1176:0x29DF:word16]
	word16 cx_1205
	word16 ax_1203 = fn0800_ACB3(ds_1176, Mem1202[ss:sp_1180 - 2:word16], Mem1202[ss:sp_1180:word16], Mem1202[ss:sp_1180 + 6:word16], out cx_1205, out dx_2554, out bx_2555, out es_2556)
	Mem1216[ss:sp_1180 + 0x0006:word16] = Mem1202[ds_1176:0x29E1:word16]
	Mem1219[ss:sp_1180 + 0x0004:word16] = Mem1216[ds_1176:0x29DF:word16]
	Mem1222[ss:sp_1180 + 0x0002:word16] = Mem1219[ss:bp_1172 - 0x0030:word16]
	word16 cx_1225
	selector ds_1227
	word16 ax_1223 = fn0800_40BF(ax_1203, cx_1205, ds_1176, Mem1222[ss:sp_1180 + 0x0002:byte], Mem1222[ss:sp_1180 + 0x0004:word16], Mem1222[ss:sp_1180 + 0x0006:word16], out cx_1225, out dx_2557, out di_2558, out ds_1227)
	Mem1239[ss:sp_1180 + 0x0006:word16] = Mem1222[ds_1227:0x29E1:word16]
	Mem1242[ss:sp_1180 + 0x0004:word16] = Mem1239[ds_1227:0x29DF:word16]
	Mem1245[ss:sp_1180 + 0x0002:word16] = Mem1242[ss:bp_1172 - 0x0032:word16]
	word16 cx_1248
	selector ds_1250
	word16 ax_1246 = fn0800_40BF(ax_1223, cx_1225, ds_1227, Mem1245[ss:sp_1180 + 0x0002:byte], Mem1245[ss:sp_1180 + 0x0004:word16], Mem1245[ss:sp_1180 + 0x0006:word16], out cx_1248, out dx_2559, out di_2560, out ds_1250)
	Mem1262[ss:sp_1180 + 0x0006:word16] = Mem1245[ds_1250:0x29E1:word16]
	Mem1265[ss:sp_1180 + 0x0004:word16] = Mem1262[ds_1250:0x29DF:word16]
	Mem1268[ss:sp_1180 + 0x0002:word16] = Mem1265[ss:bp_1172 - 0x002E:word16]
	word16 cx_1271
	selector ds_1273
	word16 ax_1269 = fn0800_40BF(ax_1246, cx_1248, ds_1250, Mem1268[ss:sp_1180 + 0x0002:byte], Mem1268[ss:sp_1180 + 0x0004:word16], Mem1268[ss:sp_1180 + 0x0006:word16], out cx_1271, out dx_2561, out di_2562, out ds_1273)
	Mem1285[ss:sp_1180 + 0x0006:word16] = Mem1268[ds_1273:0x29E1:word16]
	Mem1288[ss:sp_1180 + 0x0004:word16] = Mem1285[ds_1273:0x29DF:word16]
	Mem1291[ss:sp_1180 + 0x0002:word16] = Mem1288[ss:bp_1172 - 0x002C:word16]
	word16 cx_1294
	selector ds_1296
	word16 ax_1292 = fn0800_40BF(ax_1269, cx_1271, ds_1273, Mem1291[ss:sp_1180 + 0x0002:byte], Mem1291[ss:sp_1180 + 0x0004:word16], Mem1291[ss:sp_1180 + 0x0006:word16], out cx_1294, out dx_2563, out di_2564, out ds_1296)
	Mem1308[ss:sp_1180 + 0x0006:word16] = Mem1291[ds_1296:0x29E1:word16]
	Mem1311[ss:sp_1180 + 0x0004:word16] = Mem1308[ds_1296:0x29DF:word16]
	Mem1314[ss:sp_1180 + 0x0002:word16] = Mem1311[ss:bp_1172 - 0x001C:word16]
	word16 cx_1317
	selector ds_1319
	fn0800_40BF(ax_1292, cx_1294, ds_1296, Mem1314[ss:sp_1180 + 0x0002:byte], Mem1314[ss:sp_1180 + 0x0004:word16], Mem1314[ss:sp_1180 + 0x0006:word16], out cx_1317, out dx_2565, out di_2566, out ds_1319)
	// Failed to bind call argument.
	// Please report this issue at https://github.com/uxmal/reko
	word16 stackArg0 = <invalid>
	byte cl_1334
	word16 sp_1336
	Mem1341[ss:bp_1172 - 0x0022:word16] = fn0800_8CAA(Mem1314[ds_1319:0x2A03:word16], 0x04, Mem1314[ds_1319:0x2A05:word16], stackArg0, out cl_1334, out dx_2568)
	word16 cx_1367 = DPB(cx_1317, cl_1334, 0)
	word16 ax_1342 = Mem1341[ds_1319:0x2A03:word16]
	branch (ax_1342 & 0x000F) == 0x0000 l0800_6333
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_6330:
	Mem1349[ss:bp_1172 - 0x0022:word16] = Mem1341[ss:bp_1172 - 0x0022:word16] + 0x0001
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_6333:
	Mem1357[ss:sp_1336 - 2:word16] = Mem1352[ds_1319:0x29E1:word16]
	Mem1360[ss:sp_1336 - 4:word16] = Mem1357[ds_1319:0x29DF:word16]
	Mem1364[ss:sp_1336 - 6:word16] = Mem1360[ss:bp_1172 - 0x0022:word16]
	word16 cx_1370
	selector ds_1372
	fn0800_40BF(ax_1342 & 0x000F, cx_1367, ds_1319, Mem1364[ss:sp_1336 - 6:byte], Mem1364[ss:sp_1336 - 4:word16], Mem1364[ss:sp_1336 - 2:word16], out cx_1370, out dx_2569, out di_2570, out ds_1372)
	Mem1384[ss:sp_1336 - 2:word16] = Mem1364[ds_1372:0x29E1:word16]
	Mem1387[ss:sp_1336 - 4:word16] = Mem1384[ds_1372:0x29DF:word16]
	// Failed to bind call argument.
	// Please report this issue at https://github.com/uxmal/reko
	word16 stackArg0 = <invalid>
	byte cl_1393
	word16 sp_1395
	word16 ax_1391 = fn0800_8CAA(Mem1387[ss:bp_1172 - 0x001C:word16], 0x04, Mem1387[ss:bp_1172 - 0x001A:word16], stackArg0, out cl_1393, out dx_2572)
	Mem1404[ss:sp_1395 - 2:word16] = Mem1387[ss:bp_1172 - 0x0022:word16] + ax_1391
	selector ds_1410
	fn0800_40BF(ax_1391, DPB(cx_1370, cl_1393, 0), ds_1372, Mem1404[ss:sp_1395 - 2:byte], Mem1404[ss:sp_1395:word16], Mem1404[ss:sp_1395 + 2:word16], out cx_2573, out dx_2574, out di_2575, out ds_1410)
	ui32 ax_dx_2242 = SEQ(Mem1404[ss:bp_1172 - 0x0002:word16], Mem1404[ss:bp_1172 - 0x0004:word16]) - SEQ(Mem1404[ds_1410:0x2A05:word16], Mem1404[ds_1410:0x2A03:word16]) + SEQ(Mem1404[ds_1410:0x4E8A:word16], Mem1404[ds_1410:0x4E88:word16])
	word16 dx_1425 = (word16) ax_dx_2242
	Mem1433[ss:bp_1172 - 0x0006:word16] = SLICE(ax_dx_2242, word16, 16) + (dx_1425 <u 0x0080)
	Mem1434[ss:bp_1172 - 0x0008:word16] = dx_1425 + 0x0080
	branch Mem1434[ds_1410:0x2A1D:word16] == 0x0000 l0800_6398
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_6398:
	branch Mem1434[ds_1410:0x2A21:word16] != 0x0001 l0800_63A8
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_639F:
	word16 v153_1439 = Mem1434[ss:bp_1172 - 0x0008:word16] + 0x0180
	Mem1440[ss:bp_1172 - 0x0008:word16] = v153_1439
	Mem1444[ss:bp_1172 - 0x0006:word16] = Mem1440[ss:bp_1172 - 0x0006:word16] + (v153_1439 <u 0x0000)
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_638D:
	word16 v95_1446 = Mem1434[ss:bp_1172 - 0x0008:word16] + 0x0200
	Mem1447[ss:bp_1172 - 0x0008:word16] = v95_1446
	Mem1451[ss:bp_1172 - 0x0006:word16] = Mem1447[ss:bp_1172 - 0x0006:word16] + (v95_1446 <u 0x0000)
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_63A8:
	Mem1457[ss:sp_1395 + 0x0002:word16] = 0x0000
	word16 bx_1464 = Mem1457[ss:bp_1172 - 0x0004:word16] + (Mem1457[ss:bp_1172 - 0x0026:word16] << 0x04)
	Mem1470[ss:sp_1395:word16] = Mem1457[ss:bp_1172 - 0x0002:word16] + (bx_1464 <u 0x0000)
	Mem1472[ss:sp_1395 - 2:word16] = bx_1464
	Mem1476[ss:sp_1395 - 4:word16] = Mem1472[ds_1410:0x29E5:word16]
	Mem1479[ss:sp_1395 - 6:word16] = Mem1476[ds_1410:0x29E3:word16]
	fn0800_ACB3(ds_1410, Mem1479[ss:sp_1395 - 6:word16], Mem1479[ss:sp_1395 - 4:word16], Mem1479[ss:sp_1395 + 2:word16], out cx_2588, out dx_2589, out bx_2590, out es_2591)
	Mem1492[ss:sp_1395 + 0x0002:word16] = 0x0002
	Mem1497[ss:sp_1395:word16] = 0x0000
	Mem1499[ss:sp_1395 - 2:word16] = 0x0000
	Mem1502[ss:sp_1395 - 4:word16] = Mem1499[ds_1410:0x29E1:word16]
	Mem1505[ss:sp_1395 - 6:word16] = Mem1502[ds_1410:0x29DF:word16]
	fn0800_ACB3(ds_1410, Mem1505[ss:sp_1395 - 6:word16], Mem1505[ss:sp_1395 - 4:word16], Mem1505[ss:sp_1395 + 2:word16], out cx_2592, out dx_2593, out bx_2594, out es_2595)
	Mem1519[ss:sp_1395 + 0x0002:word16] = Mem1505[ds_1410:0x29E1:word16]
	Mem1522[ss:sp_1395:word16] = Mem1519[ds_1410:0x29DF:word16]
	// Failed to bind call argument.
	// Please report this issue at https://github.com/uxmal/reko
	word16 stackArg4 = <invalid>
	word16 dx_1526
	word16 ax_1523 = fn0800_AD2F(ds_1410, Mem1522[ss:sp_1395:segptr32], stackArg4, out cx_2597, out dx_1526)
	Mem1533[ss:bp_1172 - 0x001E:word16] = dx_1526
	Mem1534[ss:bp_1172 - 0x0020:word16] = ax_1523
	ui32 dx_bx_2244 = SEQ(Mem1534[ds_1410:0x2A09:word16], Mem1534[ds_1410:0x2A07:word16]) - SEQ(Mem1534[ss:bp_1172 - 0x0002:word16], Mem1534[ss:bp_1172 - 0x0004:word16])
	word16 bx_1544 = (word16) dx_bx_2244 - (Mem1534[ss:bp_1172 - 0x0026:word16] << 0x04)
	Mem1550[ss:sp_1395 + 0x0002:word16] = SLICE(dx_bx_2244, word16, 16) - (bx_1544 <u 0x0000)
	Mem1552[ss:sp_1395:word16] = bx_1544
	Mem1555[ss:sp_1395 - 2:word16] = Mem1552[ds_1410:0x29E1:word16]
	Mem1558[ss:sp_1395 - 4:word16] = Mem1555[ds_1410:0x29DF:word16]
	Mem1561[ss:sp_1395 - 6:word16] = Mem1558[ds_1410:0x29E5:word16]
	Mem1564[ss:sp_1395 - 8:word16] = Mem1561[ds_1410:0x29E3:word16]
	word16 bp_1566
	selector ds_1570
	fn0800_3B0A(Mem1564[ss:sp_1395:word16], Mem1564[ss:sp_1395 + 2:word16], out cx_2598, out dx_2599, out bp_1566, out ds_1570)
	Mem1585[ss:bp_1566 - 0x0022:word16] = Mem1564[ss:bp_1566 - 0x0020:word16] & 0x01FF
	// Failed to bind call argument.
	// Please report this issue at https://github.com/uxmal/reko
	word16 stackArg0 = <invalid>
	word16 sp_1593
	fn0800_8CAA(Mem1585[ss:bp_1566 - 0x0020:word16], 0x09, Mem1585[ss:bp_1566 - 0x001E:word16], stackArg0, out cl_2601, out dx_2602)
	branch Mem1585[ss:bp_1566 - 0x0022:word16] == 0x0000 l0800_6446
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_6445:
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_6446:
	Mem1609[ss:sp_1593 - 2:word16] = 0x0000
	Mem1612[ss:sp_1593 - 4:word16] = 0x0000
	Mem1614[ss:sp_1593 - 6:word16] = 0x0002
	Mem1618[ss:sp_1593 - 8:word16] = Mem1614[ds_1570:0x29E1:word16]
	Mem1621[ss:sp_1593 - 10:word16] = Mem1618[ds_1570:0x29DF:word16]
	word16 cx_1624
	word16 ax_1622 = fn0800_ACB3(ds_1570, Mem1621[ss:sp_1593 - 10:word16], Mem1621[ss:sp_1593 - 8:word16], Mem1621[ss:sp_1593 - 2:word16], out cx_1624, out dx_2620, out bx_2621, out es_2622)
	Mem1635[ss:sp_1593 - 2:word16] = Mem1621[ds_1570:0x29E1:word16]
	Mem1638[ss:sp_1593 - 4:word16] = Mem1635[ds_1570:0x29DF:word16]
	Mem1642[ss:sp_1593 - 6:word16] = Mem1638[ss:bp_1566 - 0x0022:word16]
	word16 cx_1645
	word16 di_1646
	selector ds_1647
	word16 ax_1643 = fn0800_40BF(ax_1622, cx_1624, ds_1570, Mem1642[ss:sp_1593 - 6:byte], Mem1642[ss:sp_1593 - 4:word16], Mem1642[ss:sp_1593 - 2:word16], out cx_1645, out dx_2623, out di_1646, out ds_1647)
	Mem1659[ss:sp_1593 - 2:word16] = Mem1642[ds_1647:0x29E1:word16]
	Mem1662[ss:sp_1593 - 4:word16] = Mem1659[ds_1647:0x29DF:word16]
	Mem1664[ss:sp_1593 - 6:word16] = di_1646
	selector ds_1669
	fn0800_40BF(ax_1643, cx_1645, ds_1647, Mem1664[ss:sp_1593 - 6:byte], Mem1664[ss:sp_1593 - 4:word16], Mem1664[ss:sp_1593 - 2:word16], out cx_2624, out dx_2625, out di_2626, out ds_1669)
	branch Mem1664[ds_1669:0x2A1D:word16] == 0x0000 l0800_64B9
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_6483:
	Mem1684[ss:sp_1593 - 2:word16] = 0x0000
	Mem1687[ss:sp_1593 - 4:word16] = 0x0000
	Mem1689[ss:sp_1593 - 6:word16] = 0x002E
	Mem1692[ss:sp_1593 - 8:word16] = Mem1689[ds_1669:0x29E1:word16]
	Mem1695[ss:sp_1593 - 10:word16] = Mem1692[ds_1669:0x29DF:word16]
	word16 cx_1698
	word16 ax_1696 = fn0800_ACB3(ds_1669, Mem1695[ss:sp_1593 - 10:word16], Mem1695[ss:sp_1593 - 8:word16], Mem1695[ss:sp_1593 - 2:word16], out cx_1698, out dx_2644, out bx_2645, out es_2646)
	Mem1709[ss:sp_1593 - 2:word16] = Mem1695[ds_1669:0x29E1:word16]
	Mem1712[ss:sp_1593 - 4:word16] = Mem1709[ds_1669:0x29DF:word16]
	Mem1715[ss:sp_1593 - 6:word16] = Mem1712[ss:bp_1566 - 0x0022:word16]
	word16 cx_1718
	word16 di_1719
	selector ds_1720
	word16 ax_1716 = fn0800_40BF(ax_1696, cx_1698, ds_1669, Mem1715[ss:sp_1593 - 6:byte], Mem1715[ss:sp_1593 - 4:word16], Mem1715[ss:sp_1593 - 2:word16], out cx_1718, out dx_2647, out di_1719, out ds_1720)
	Mem1732[ss:sp_1593 - 2:word16] = Mem1715[ds_1720:0x29E1:word16]
	Mem1735[ss:sp_1593 - 4:word16] = Mem1732[ds_1720:0x29DF:word16]
	Mem1737[ss:sp_1593 - 6:word16] = di_1719
	fn0800_40BF(ax_1716, cx_1718, ds_1720, Mem1737[ss:sp_1593 - 6:byte], Mem1737[ss:sp_1593 - 4:word16], Mem1737[ss:sp_1593 - 2:word16], out cx_2648, out dx_2649, out di_2650, out ds_1669)
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_64B9:
	Mem1758[ss:sp_1593 - 2:word16] = 0x0000
	Mem1761[ss:sp_1593 - 4:word16] = 0x0000
	Mem1763[ss:sp_1593 - 6:word16] = 0x0018
	Mem1767[ss:sp_1593 - 8:word16] = Mem1763[ds_1669:0x29E1:word16]
	Mem1770[ss:sp_1593 - 10:word16] = Mem1767[ds_1669:0x29DF:word16]
	word16 cx_1773
	word16 dx_1774
	word16 ax_1771 = fn0800_ACB3(ds_1669, Mem1770[ss:sp_1593 - 10:word16], Mem1770[ss:sp_1593 - 8:word16], Mem1770[ss:sp_1593 - 2:word16], out cx_1773, out dx_1774, out bx_2627, out es_2628)
	Mem1783[ss:sp_1593 - 2:word16] = Mem1770[ds_1669:0x29E1:word16]
	Mem1786[ss:sp_1593 - 4:word16] = Mem1783[ds_1669:0x29DF:word16]
	word16 ax_1797 = (DPB(DPB(ax_1771, Mem1786[ds_1669:0x2E75:byte], 0), 0x00, 8) << 0x08) + DPB(DPB(dx_1774, Mem1786[ds_1669:0x2E76:byte], 0), 0x00, 8)
	Mem1801[ss:sp_1593 - 6:word16] = ax_1797 - 0x0020
	selector ds_1807
	fn0800_40BF(ax_1797 - 0x0020, DPB(cx_1773, 0x08, 0), ds_1669, Mem1801[ss:sp_1593 - 6:byte], Mem1801[ss:sp_1593 - 4:word16], Mem1801[ss:sp_1593 - 2:word16], out cx_2629, out dx_2630, out di_2631, out ds_1807)
	Mem1820[ss:sp_1593 - 2:word16] = 0x0000
	Mem1823[ss:sp_1593 - 4:word16] = 0x0000
	Mem1825[ss:sp_1593 - 6:word16] = 0x001C
	Mem1828[ss:sp_1593 - 8:word16] = Mem1825[ds_1807:0x29E1:word16]
	Mem1831[ss:sp_1593 - 10:word16] = Mem1828[ds_1807:0x29DF:word16]
	word16 cx_1834
	word16 ax_1832 = fn0800_ACB3(ds_1807, Mem1831[ss:sp_1593 - 10:word16], Mem1831[ss:sp_1593 - 8:word16], Mem1831[ss:sp_1593 - 2:word16], out cx_1834, out dx_2632, out bx_2633, out es_2634)
	Mem1845[ss:sp_1593 - 2:word16] = Mem1831[ds_1807:0x29E1:word16]
	Mem1848[ss:sp_1593 - 4:word16] = Mem1845[ds_1807:0x29DF:word16]
	Mem1852[ss:sp_1593 - 6:word16] = Mem1848[ss:bp_1566 - 0x0028:word16]
	word16 cx_1855
	selector ds_1857
	word16 ax_1853 = fn0800_40BF(ax_1832, cx_1834, ds_1807, Mem1852[ss:sp_1593 - 6:byte], Mem1852[ss:sp_1593 - 4:word16], Mem1852[ss:sp_1593 - 2:word16], out cx_1855, out dx_2635, out di_2636, out ds_1857)
	Mem1869[ss:sp_1593 - 2:word16] = Mem1852[ds_1857:0x29E1:word16]
	Mem1872[ss:sp_1593 - 4:word16] = Mem1869[ds_1857:0x29DF:word16]
	Mem1875[ss:sp_1593 - 6:word16] = Mem1872[ss:bp_1566 - 0x002A:word16]
	selector ds_1880
	fn0800_40BF(ax_1853, cx_1855, ds_1857, Mem1875[ss:sp_1593 - 6:byte], Mem1875[ss:sp_1593 - 4:word16], Mem1875[ss:sp_1593 - 2:word16], out cx_2637, out dx_2638, out di_2639, out ds_1880)
	Mem1893[ss:sp_1593 - 2:word16] = 0x0000
	Mem1896[ss:sp_1593 - 4:word16] = 0x0000
	Mem1898[ss:sp_1593 - 6:word16] = 0x000A
	Mem1901[ss:sp_1593 - 8:word16] = Mem1898[ds_1880:0x29E1:word16]
	Mem1904[ss:sp_1593 - 10:word16] = Mem1901[ds_1880:0x29DF:word16]
	fn0800_ACB3(ds_1880, Mem1904[ss:sp_1593 - 10:word16], Mem1904[ss:sp_1593 - 8:word16], Mem1904[ss:sp_1593 - 2:word16], out cx_2640, out dx_2641, out bx_2642, out es_2643)
	word16 cx_1925 = Mem1904[ss:bp_1566 - 0x0020:word16]
	word16 bx_1920 = Mem1904[ss:bp_1566 - 0x0004:word16] + (Mem1904[ss:bp_1566 - 0x0028:word16] << 0x04)
	word16 cx_1930 = cx_1925 - 0x0020 + Mem1904[ss:bp_1566 - 0x0008:word16]
	word16 dx_1923 = Mem1904[ss:bp_1566 - 0x0002:word16] + (bx_1920 <u 0x0000)
	word16 ax_1933 = Mem1904[ss:bp_1566 - 0x001E:word16] - (cx_1925 <u 0x0020) + Mem1904[ss:bp_1566 - 0x0006:word16] + (cx_1930 <u 0x0000)
	branch dx_1923 <u ax_1933 l0800_659C
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_6568:
	branch dx_1923 >u ax_1933 l0800_656E
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_656A:
	branch bx_1920 <=u cx_1930 l0800_659C
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_656E:
	word16 cx_1952 = Mem1904[ss:bp_1566 - 0x0020:word16]
	word16 bx_1947 = Mem1904[ss:bp_1566 - 0x0004:word16] + (Mem1904[ss:bp_1566 - 0x0028:word16] << 0x04)
	cx_1930 = cx_1952 - 0x0020 + Mem1904[ss:bp_1566 - 0x0008:word16]
	ui32 dx_bx_2254 = SEQ(Mem1904[ss:bp_1566 - 0x0002:word16] + (bx_1947 <u 0x0000), bx_1947) - SEQ(((Mem1904[ss:bp_1566 - 0x001E:word16] - (cx_1952 <u 0x0020)) + Mem1904[ss:bp_1566 - 0x0006:word16]) + (cx_1930 <u 0x0000), cx_1930)
	Mem1966[ss:bp_1566 - 0x0008:word16] = v151_1965
	ui32 v152_v151_2256 = SEQ(Mem1966[ss:bp_1566 - 0x0006:word16], Mem1904[ss:bp_1566 - 0x0008:word16]) + dx_bx_2254
	Mem1970[ss:bp_1566 - 0x0006:word16] = SLICE(v152_v151_2256, word16, 16)
	word16 v151_1965 = (word16) v152_v151_2256
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_659C:
	0x00000010 = 0x00000010
	word16 v157_1982 = Mem1976[ss:bp_1566 - 0x0008:word16] + ((word16) (0x00000010 - SEQ(Mem1976[ss:bp_1566 - 0x0006:word16], Mem1976[ss:bp_1566 - 0x0008:word16])) & 0x000F)
	Mem1983[ss:bp_1566 - 0x0008:word16] = v157_1982
	Mem1987[ss:bp_1566 - 0x0006:word16] = Mem1983[ss:bp_1566 - 0x0006:word16] + (v157_1982 <u 0x0000)
	// Failed to bind call argument.
	// Please report this issue at https://github.com/uxmal/reko
	word16 stackArg0 = <invalid>
	byte cl_1994
	word16 sp_1996
	word16 ax_1992 = fn0800_8CAA(Mem1987[ss:bp_1566 - 0x0008:word16], 0x04, Mem1987[ss:bp_1566 - 0x0006:word16], stackArg0, out cl_1994, out dx_2652)
	Mem2001[ss:bp_1566 - 0x0028:word16] = ax_1992
	Mem2006[ss:sp_1996 - 2:word16] = Mem2001[ds_1880:0x29E1:word16]
	Mem2009[ss:sp_1996 - 4:word16] = Mem2006[ds_1880:0x29DF:word16]
	Mem2011[ss:sp_1996 - 6:word16] = ax_1992
	word16 cx_2016
	selector ds_2018
	fn0800_40BF(ax_1992, DPB(cx_1930, cl_1994, 0), ds_1880, Mem2011[ss:sp_1996 - 6:byte], Mem2011[ss:sp_1996 - 4:word16], Mem2011[ss:sp_1996 - 2:word16], out cx_2016, out dx_2653, out di_2654, out ds_2018)
	word16 ax_2027 = Mem2011[ss:bp_1566 - 0x002A:word16]
	branch ax_2027 >=u Mem2011[ss:bp_1566 - 0x0028:word16] l0800_65DC
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_65D6:
	ax_2027 = Mem2011[ss:bp_1566 - 0x0028:word16]
	Mem2031[ss:bp_1566 - 0x002A:word16] = ax_2027
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_65DC:
	Mem2038[ss:sp_1996 - 2:word16] = Mem2033[ds_2018:0x29E1:word16]
	Mem2041[ss:sp_1996 - 4:word16] = Mem2038[ds_2018:0x29DF:word16]
	Mem2045[ss:sp_1996 - 6:word16] = Mem2041[ss:bp_1566 - 0x002A:word16]
	word16 cx_2050
	selector ds_2052
	fn0800_40BF(ax_2027, cx_2016, ds_2018, Mem2045[ss:sp_1996 - 6:byte], Mem2045[ss:sp_1996 - 4:word16], Mem2045[ss:sp_1996 - 2:word16], out cx_2050, out dx_2655, out di_2656, out ds_2052)
	ui32 dx_ax_2258 = SEQ(Mem2045[ss:bp_1566 - 0x0002:word16], Mem2045[ss:bp_1566 - 0x0004:word16]) + SEQ(Mem2045[ds_2052:0x4E8A:word16], Mem2045[ds_2052:0x4E88:word16])
	// Failed to bind call argument.
	// Please report this issue at https://github.com/uxmal/reko
	word16 ax_2063 = (word16) dx_ax_2258
	word16 stackArg0 = <invalid>
	byte cl_2075
	word16 sp_2077
	word16 ax_2073 = fn0800_8CAA(ax_2063 + 0x0020, 0x04, SLICE(dx_ax_2258, word16, 16) + (ax_2063 <u 0x0020), stackArg0, out cl_2075, out dx_2658)
	Mem2082[ss:bp_1566 - 0x002C:word16] = ax_2073
	Mem2085[ss:sp_2077 - 2:word16] = Mem2082[ds_2052:0x29E1:word16]
	Mem2088[ss:sp_2077 - 4:word16] = Mem2085[ds_2052:0x29DF:word16]
	Mem2090[ss:sp_2077 - 6:word16] = ax_2073
	word16 cx_2094
	selector ds_2096
	fn0800_40BF(ax_2073, DPB(cx_2050, cl_2075, 0), ds_2052, Mem2090[ss:sp_2077 - 6:byte], Mem2090[ss:sp_2077 - 4:word16], Mem2090[ss:sp_2077 - 2:word16], out cx_2094, out dx_2659, out di_2660, out ds_2096)
	word16 ax_2105 = Mem2090[ss:bp_1566 - 0x001C:word16]
	Mem2107[ss:bp_1566 - 0x002E:word16] = ax_2105 + 0x0080
	branch Mem2107[ds_2096:0x2A1D:word16] == 0x0000 l0800_662F
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_662F:
	branch Mem2107[ds_2096:0x2A21:word16] != 0x0001 l0800_663B
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_6636:
	Mem2113[ss:bp_1566 - 0x002E:word16] = Mem2107[ss:bp_1566 - 0x002E:word16] + 0x0180
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_6628:
	Mem2116[ss:bp_1566 - 0x002E:word16] = Mem2107[ss:bp_1566 - 0x002E:word16] + 0x0200
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_663B:
	Mem2124[ss:sp_2077 - 2:word16] = Mem2119[ds_2096:0x29E1:word16]
	Mem2127[ss:sp_2077 - 4:word16] = Mem2124[ds_2096:0x29DF:word16]
	Mem2131[ss:sp_2077 - 6:word16] = Mem2127[ss:bp_1566 - 0x002E:word16]
	selector ds_2138
	fn0800_40BF(ax_2105 + 0x0080, cx_2094, ds_2096, Mem2131[ss:sp_2077 - 6:byte], Mem2131[ss:sp_2077 - 4:word16], Mem2131[ss:sp_2077 - 2:word16], out cx_2136, out dx_2661, out di_2662, out ds_2138)
	ui32 dx_bx_2260 = SEQ(Mem2131[ds_2138:0x2A09:word16], Mem2131[ds_2138:0x2A07:word16]) - SEQ(Mem2131[ss:bp_1566 - 0x0002:word16], Mem2131[ss:bp_1566 - 0x0004:word16])
	word16 bx_2156 = (word16) dx_bx_2260 - (Mem2131[ss:bp_1566 - 0x0026:word16] << 0x04)
	word16 dx_2159 = SLICE(dx_bx_2260, word16, 16) - (bx_2156 <u 0x0000)
	branch (bx_2156 | dx_2159) == 0x0000 l0800_6673
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_6673:
	dxOut = dx_2159
	dsOut = ds_2138
	return 0x0000
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_666A:
	dxOut = dx_2159
	dsOut = ds_2138
	return 0x0001
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_5EE4:
	dxOut = 0x0000
	dsOut = ds
	return 0x0003
// DataOut:
// DataOut (flags):
// SymbolicIn:

fn0800_5E64_exit:
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_5EB1_1:
	Mem2194[ds:di_2193:byte] = 0x00
	di_2193 = di_2193 + 0x0001
	cx_2196 = cx_2196 - 0x0001
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_5EAB_1:
	Mem2203[ds:di_2193:byte] = Mem2199[ds:si_2198:byte]
	si_2198 = si_2198 + 0x0001
	di_2193 = di_2193 + 0x0001
	cx_2206 = cx_2206 - 0x0001
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_5EA7_1:
	Mem2213[ds:di_2193:word16] = Mem2209[ds:si_2198:word16]
	si_2198 = si_2198 + 0x0002
	di_2193 = di_2193 + 0x0002
	cx_2216 = cx_2216 - 0x0001
// DataOut:
// DataOut (flags):
// SymbolicIn:



word16 fn0800_669C(selector ds, ptr16 & dxOut, ptr16 & dsOut)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  ds:[0..15] ss:[0..15]
// LiveOut: ax ds dx sp
// Trashed: SCZO ax bp bx cx di ds dx es si sp Top
// Preserved: D
fn0800_669C_entry:
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_669C:
	word16 bp_121 = fp - 2
	branch Mem15[ds:0x2A09:word16] <u 0x0000 l0800_66BE
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_66AB:
	branch Mem15[ds:0x2A09:word16] >u 0x0000 l0800_66B5
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_66AD:
	branch Mem15[ds:0x2A07:word16] <=u 0xFEFE l0800_66BE
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_66BE:
	word16 sp_136 = fp - 0x000A
	word16 di_29 = 0x2206
	word16 si_30 = 0x4271
	word16 cx_31 = 0x0004
	word16 dx_126 = 0x0003
	branch true l0800_66D2
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_66D0:
	cx_31 = 0x0003
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_66D2:
	word16 ax_36 = 0x0000
	bool Z_49 = SLICE(cond(0x0000), bool, 2)
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_66D4:
	branch cx_31 == 0x0000 l0800_66D6
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_66D4_1:
	Z_49 = SLICE(cond(Mem26[ds:si_451:byte] - Mem26[ds:di_452:byte]), bool, 2) (alias)
	si_30 = si_451 + 0x0001
	di_29 = di_452 + 0x0001
	cx_31 = cx_31 - 0x0001
	si_451 = si_30
	di_452 = di_29
	branch Mem26[ds:si_451:byte] != Mem26[ds:di_452:byte] l0800_66D4
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_66D6:
	branch Z_49 l0800_66DD
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_66D8:
	ax_36 = 0x0001
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_66DD:
	word16 ax_120 = ax_36
	branch ax_36 == 0x0000 l0800_6715
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_66E1:
	word16 di_304 = 0x4271
	word16 si_309 = 0x2206
	word16 cx_85 = 0x0004
	word16 dx_347 = 0xFFFF
	branch true l0800_66F7
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_66F3:
	cx_85 = 0x0003
	dx_347 = 0x0000
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_66F7:
	word16 cx_94 = cx_85 >>u 0x0001
	cx_327 = cx_94
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_66F9:
	word16 cx_327
	branch cx_327 == 0x0000 l0800_66FB
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_66FB:
	word16 cx_100 = cx_327 * 0x0002 + (cx_94 <u 0x0000)
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_66FD:
	branch cx_100 == 0x0000 l0800_66FF
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_66FF:
	word16 cx_102 = dx_347
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_6703:
	branch cx_102 == 0x0000 l0800_6705
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_6705:
	word16 sp_129
	bp_121 = fn0800_09A3(out ds)
	sp_136 = sp_129 + 0x0008
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_6715:
	word16 sp_144 = sp_136 - 2
	Mem146[ss:sp_144:word16] = Mem139[ds:0x29E1:word16]
	Mem149[ss:sp_144 - 2:word16] = Mem146[ds:0x29DF:word16]
	word16 ax_166 = (DPB(DPB(ax_120, Mem149[ds:0x2E75:byte], 0), 0x00, 8) << 0x08) + DPB(DPB(dx_126, Mem149[ds:0x2E76:byte], 0), 0x00, 8)
	Mem171[ss:sp_144 - 4:word16] = 0x0000
	Mem173[ss:sp_144 - 6:word16] = ax_166
	Mem175[ss:sp_144 - 8:word16] = ds
	Mem178[ss:sp_144 - 10:word16] = 0x2E77
	selector ds_183
	word16 bx_206 = Mem178[ds_183:0x2A07:word16] + ((DPB(DPB((word16) fn0800_4152(ds, Mem178[ss:sp_144 - 10:word16], Mem178[ss:sp_144 - 8:word16], Mem178[ss:sp_144 - 6:word16], Mem178[ss:sp_144 - 2:word16], Mem178[ss:sp_144:word16], out cx_181, out ds_183), Mem178[ds_183:0x2E75:byte], 0), 0x00, 8) << 0x08) + DPB(DPB(dx_184, Mem178[ds_183:0x2E76:byte], 0), 0x00, 8))
	word16 dx_213 = Mem178[ds_183:0x2A09:word16] + (bx_206 <u 0x0000) + (bx_206 <u 0x0040)
	Mem220[ss:bp_121 - 0x0002:word16] = dx_213
	Mem221[ss:bp_121 - 0x0004:word16] = bx_206 + 0x0040
	branch Mem221[ds_183:0x2A1D:word16] == 0x0000 l0800_6779
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_6779:
	branch Mem221[ds_183:0x2A21:word16] != 0x0001 l0800_6789
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_6780:
	word16 v28_226 = Mem221[ss:bp_121 - 0x0004:word16] + 0x0180
	Mem227[ss:bp_121 - 0x0004:word16] = v28_226
	Mem231[ss:bp_121 - 0x0002:word16] = Mem227[ss:bp_121 - 0x0002:word16] + (v28_226 <u 0x0000)
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_676E:
	word16 v25_233 = Mem221[ss:bp_121 - 0x0004:word16] + 0x0200
	Mem234[ss:bp_121 - 0x0004:word16] = v25_233
	Mem238[ss:bp_121 - 0x0002:word16] = Mem234[ss:bp_121 - 0x0002:word16] + (v25_233 <u 0x0000)
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_6789:
	branch Mem242[ss:bp_121 - 0x0002:word16] <u 0x0000 l0800_67A1
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_678F:
	branch Mem242[ss:bp_121 - 0x0002:word16] >u 0x0000 l0800_6798
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_6791:
	branch Mem242[ss:bp_121 - 0x0004:word16] <=u 0xFEFE l0800_67A1
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_67A1:
	Mem256[ss:sp_144:word16] = Mem242[ds_183:0x2A09:word16]
	Mem259[ss:sp_144 - 2:word16] = Mem256[ds_183:0x2A07:word16]
	Mem262[ss:sp_144 - 4:word16] = Mem259[ds_183:0x2A09:word16]
	Mem265[ss:sp_144 - 6:word16] = Mem262[ds_183:0x2A07:word16]
	selector ds_271
	word16 dx_272
	fn0800_75EA(ds_183, Mem265[ss:sp_144 - 6:word16], Mem265[ss:sp_144 - 4:word16], Mem265[ss:sp_144 - 2:word16], Mem265[ss:sp_144:word16], out dx_272, out bp_267, out si_450, out ds_271)
	dxOut = dx_272
	dsOut = ds_271
	return 0x0000
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_6798:
	dxOut = dx_213
	dsOut = ds_183
	return 0x0003
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_6703_1:
	Mem305[ds:di_304:byte] = 0x00
	di_304 = di_304 + 0x0001
	cx_102 = cx_102 - 0x0001
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_66FD_1:
	Mem314[ds:di_304:byte] = Mem310[ds:si_309:byte]
	si_309 = si_309 + 0x0001
	di_304 = di_304 + 0x0001
	cx_100 = cx_100 - 0x0001
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_66F9_1:
	Mem324[ds:di_304:word16] = Mem320[ds:si_309:word16]
	si_309 = si_309 + 0x0002
	di_304 = di_304 + 0x0002
	cx_327 = cx_327 - 0x0001
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_66B5:
	dxOut = dx
	dsOut = ds
	return 0x0003
// DataOut:
// DataOut (flags):
// SymbolicIn:

fn0800_669C_exit:
// DataOut:
// DataOut (flags):
// SymbolicIn:



word16 fn0800_67BF(selector ds, ptr16 & dxOut, ptr16 & dsOut)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  ds:[0..15] ss:[0..15]
// LiveOut: ax ds dx sp
// Trashed: SCZO ax bp bx cx di ds dx es si sp Top
// Preserved:
fn0800_67BF_entry:
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_67BF:
	word16 ax_23 = (DPB(DPB(ax, Mem7[ds:0x2E75:byte], 0), 0x00, 8) << 0x08) + DPB(DPB(dx, Mem7[ds:0x2E76:byte], 0), 0x00, 8)
	branch Mem24[ds:0x2A09:word16] >u 0x0000 l0800_67F0
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_67E1:
	branch Mem24[ds:0x2A09:word16] != 0x0000 l0800_67E9
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_67E3:
	branch ax_23 <u Mem24[ds:0x2A07:word16] l0800_67F0
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_67F0:
	selector ds_274
	word16 bp_270
	word16 sp_284
	selector ds_59
	fn0800_4152(ds, 0x2E77, ds, ax_23, Mem37[ds:0x29DF:word16], Mem24[ds:0x29E1:word16], out cx_969, out ds_59)
	fn0800_ACB3(ds_59, Mem81[ds_59:0x29DF:word16], Mem78[ds_59:0x29E1:word16], 0x0001, out cx_970, out dx_971, out bx_972, out es_973)
	word16 cx_104
	selector ds_106
	branch fn0800_3F0A(ds_59, Mem98[ds_59:0x29E3:word16], Mem84[ds_59:0x29E5:word16], out cx_104, out dx_974, out ds_106) == 0x601A l0800_6839
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_6839:
	fn0800_ACB3(ds_106, Mem130[ds_106:0x29E3:word16], Mem127[ds_106:0x29E5:word16], 0x0001, out cx_975, out dx_976, out bx_977, out es_978)
	selector ds_169
	word16 sp_173
	fn0800_3B0A(0x0010, 0x0000, out cx_979, out dx_980, out bp_981, out ds_169)
	Mem184[ss:sp_173 + 0x000A:word16] = 0x0000
	Mem187[ss:sp_173 + 0x0008:word16] = 0x0000
	Mem189[ss:sp_173 + 0x0006:word16] = 0x001A
	Mem192[ss:sp_173 + 0x0004:word16] = Mem189[ds_169:0x29E5:word16]
	Mem195[ss:sp_173 + 0x0002:word16] = Mem192[ds_169:0x29E3:word16]
	fn0800_ACB3(ds_169, Mem195[ss:sp_173 + 0x0002:word16], Mem195[ss:sp_173 + 0x0004:word16], Mem195[ss:sp_173 + 0x000A:word16], out cx_982, out dx_983, out bx_984, out es_985)
	Mem209[ss:sp_173 + 0x000A:word16] = Mem195[ds_169:0x29E1:word16]
	Mem212[ss:sp_173 + 0x0008:word16] = Mem209[ds_169:0x29DF:word16]
	Mem215[ss:sp_173 + 0x0006:word16] = Mem212[ds_169:0x29E5:word16]
	Mem218[ss:sp_173 + 0x0004:word16] = Mem215[ds_169:0x29E3:word16]
	word16 cx_221
	selector ds_223
	Mem234[ss:sp_173 + 0x0006:word16] = fn0800_3E27(ds_169, Mem218[ss:sp_173 + 0x0004:word16], Mem218[ss:sp_173 + 0x0006:word16], out cx_221, out dx_986, out di_987, out es_988, out ds_223, out Top_989)
	selector ds_239
	fn0800_401E(cx_221, ds_223, Mem234[ss:sp_173 + 0x0006:word16], Mem234[ss:sp_173 + 0x0008:word16], Mem234[ss:sp_173 + 0x000A:word16], out cx_990, out dx_991, out bx_992, out di_993, out es_994, out ds_239, out Top_995)
	word16 dx_249 = Mem234[ds_239:0x2A07:word16]
	Mem255[ss:sp_173 + 0x000A:word16] = Mem234[ds_239:0x2A09:word16] - (dx_249 <u 0x001C)
	Mem257[ss:sp_173 + 0x0008:word16] = dx_249 - 0x001C
	word16 dx_259 = Mem257[ds_239:0x2A07:word16]
	Mem266[ss:sp_173 + 0x0006:word16] = Mem257[ds_239:0x2A09:word16] - (dx_259 <u 0x001C)
	Mem268[ss:sp_173 + 0x0004:word16] = dx_259 - 0x001C
	word16 sp_278
	fn0800_75EA(ds_239, Mem268[ss:sp_173 + 0x0004:word16], Mem268[ss:sp_173 + 0x0006:word16], Mem268[ss:sp_173 + 0x0008:word16], Mem268[ss:sp_173 + 0x000A:word16], out dx_996, out bp_270, out si_277, out ds_274)
	word16 dx_286 = Mem268[ds_274:0x2A07:word16]
	word16 dx_291 = dx_286 - 0x001C - Mem268[ds_274:0x2A03:word16]
	ui32 ax_dx_826 = SEQ(Mem268[ds_274:0x2A09:word16] - (dx_286 <u 0x001C) - Mem268[ds_274:0x2A05:word16] - (dx_291 <u 0x0000), dx_291) + SEQ(Mem268[ds_274:0x4E8A:word16], Mem268[ds_274:0x4E88:word16])
	word16 dx_295 = (word16) ax_dx_826
	Mem304[ss:bp_270 - 0x0006:word16] = SLICE(ax_dx_826, word16, 16) + (dx_295 <u 0x000E)
	Mem305[ss:bp_270 - 0x0008:word16] = dx_295 + 0x000E
	sp_284 = sp_278 + 0x0008
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_6836:
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_68F1:
	selector ds_322
	fn0800_409C(cx_104, ds_106, Mem314[ds_106:0x2A07:word16], Mem311[ds_106:0x2A09:word16], Mem308[ds_106:0x29DF:word16], Mem101[ds_106:0x29E1:word16], out cx_997, out dx_998, out di_999, out es_1000, out ds_322, out Top_1001)
	fn0800_ACB3(ds_322, Mem344[ds_322:0x29DF:word16], Mem341[ds_322:0x29E1:word16], 0x0001, out cx_1002, out dx_1003, out bx_1004, out es_1005)
	word16 sp_380
	fn0800_75EA(ds_322, Mem367[ds_322:0x2A07:word16], Mem364[ds_322:0x2A09:word16], Mem361[ds_322:0x2A07:word16], Mem347[ds_322:0x2A09:word16], out dx_1006, out bp_270, out si_379, out ds_274)
	ui32 ax_dx_830 = SEQ(Mem370[ds_274:0x2A09:word16], Mem370[ds_274:0x2A07:word16]) - SEQ(Mem370[ds_274:0x2A05:word16], Mem370[ds_274:0x2A03:word16]) + SEQ(Mem370[ds_274:0x4E8A:word16], Mem370[ds_274:0x4E88:word16])
	word16 dx_393 = (word16) ax_dx_830
	Mem402[ss:bp_270 - 0x0006:word16] = SLICE(ax_dx_830, word16, 16) + (dx_393 <u 0x000E)
	Mem403[ss:bp_270 - 0x0008:word16] = dx_393 + 0x000E
	sp_284 = sp_380 + 0x0008
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_6959:
	word16 sp_408 = sp_284 - 2
	Mem410[ss:sp_408:word16] = Mem405[ds_274:0x29E1:word16]
	Mem413[ss:sp_408 - 2:word16] = Mem410[ds_274:0x29DF:word16]
	// Failed to bind call argument.
	// Please report this issue at https://github.com/uxmal/reko
	word16 stackArg4 = <invalid>
	word16 cx_416
	word16 ax_414 = fn0800_AD2F(ds_274, Mem413[ss:sp_408 - 2:segptr32], stackArg4, out cx_416, out dx_1008)
	branch (ax_414 & 0x0001) == 0x0000 l0800_6988
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_696F:
	Mem431[ss:sp_408:word16] = Mem413[ds_274:0x29E1:word16]
	Mem434[ss:sp_408 - 2:word16] = Mem431[ds_274:0x29DF:word16]
	Mem438[ss:sp_408 - 4:word16] = DPB(ax_414 & 0x0001, 0x90, 0)
	// Failed to bind call argument.
	// Please report this issue at https://github.com/uxmal/reko
	word16 stackArg6 = <invalid>
	fn0800_4047(cx_416, ds_274, Mem438[ss:sp_408 - 4:byte], Mem438[ss:sp_408 - 2:segptr32], stackArg6, out cx_416, out dx_1036, out bx_1037, out di_1038, out es_1039, out ds_274, out Top_1040)
	word16 v50_453 = Mem438[ss:bp_270 - 0x0008:word16] + 0x0001
	Mem454[ss:bp_270 - 0x0008:word16] = v50_453
	Mem458[ss:bp_270 - 0x0006:word16] = Mem454[ss:bp_270 - 0x0006:word16] + (v50_453 <u 0x0000)
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_6988:
	word16 sp_464 = sp_284 - 2
	Mem466[ss:sp_464:word16] = Mem461[ds_274:0x29E1:word16]
	Mem469[ss:sp_464 - 2:word16] = Mem466[ds_274:0x29DF:word16]
	Mem474[ss:sp_464 - 4:word16] = 0x0000
	Mem476[ss:sp_464 - 6:word16] = 0x0000
	selector ds_482
	fn0800_409C(cx_416, ds_274, Mem476[ss:sp_464 - 6:word16], Mem476[ss:sp_464 - 4:word16], Mem476[ss:sp_464 - 2:word16], Mem476[ss:sp_464:word16], out cx_1009, out dx_1010, out di_1011, out es_1012, out ds_482, out Top_1013)
	Mem494[ss:sp_464:word16] = Mem476[ds_482:0x29E1:word16]
	Mem497[ss:sp_464 - 2:word16] = Mem494[ds_482:0x29DF:word16]
	// Failed to bind call argument.
	// Please report this issue at https://github.com/uxmal/reko
	word16 stackArg4 = <invalid>
	word16 dx_501
	word16 ax_498 = fn0800_AD2F(ds_482, Mem497[ss:sp_464 - 2:segptr32], stackArg4, out cx_1015, out dx_501)
	Mem512[ds_482:0x2A05:word16] = dx_501 + 0xFF + (ax_498 <u 0xFFE0)
	Mem513[ds_482:0x2A03:word16] = ax_498 + 0xFFE0
	Mem518[ss:sp_464:word16] = 0x0000
	Mem521[ss:sp_464 - 2:word16] = 0x0000
	Mem523[ss:sp_464 - 4:word16] = 0x0002
	Mem526[ss:sp_464 - 6:word16] = Mem523[ds_482:0x29E1:word16]
	Mem529[ss:sp_464 - 8:word16] = Mem526[ds_482:0x29DF:word16]
	word16 ax_530 = fn0800_ACB3(ds_482, Mem529[ss:sp_464 - 8:word16], Mem529[ss:sp_464 - 6:word16], Mem529[ss:sp_464:word16], out cx_1016, out dx_1017, out bx_1018, out es_1019)
	Mem543[ss:sp_464:word16] = Mem529[ds_482:0x29E1:word16]
	Mem546[ss:sp_464 - 2:word16] = Mem543[ds_482:0x29DF:word16]
	selector ds_550
	word16 dx_551
	word16 cx_548 = fn0800_3F58(ds_482, Mem546[ss:sp_464 - 2:word16], Mem546[ss:sp_464:word16], out dx_551, out di_1020, out ds_550)
	Mem561[ss:bp_270 - 0x0008:word16] = v60_560
	ui32 v61_v60_832 = SEQ(Mem561[ss:bp_270 - 0x0006:word16], Mem546[ss:bp_270 - 0x0008:word16]) - SEQ(dx_551, ax_530)
	Mem565[ss:bp_270 - 0x0006:word16] = SLICE(v61_v60_832, word16, 16)
	Mem569[ss:sp_464:word16] = Mem565[ds_550:0x29E1:word16]
	Mem572[ss:sp_464 - 2:word16] = Mem569[ds_550:0x29DF:word16]
	Mem575[ss:sp_464 - 4:word16] = Mem572[ds_550:0x2A05:word16]
	Mem578[ss:sp_464 - 6:word16] = Mem575[ds_550:0x2A03:word16]
	selector ds_583
	fn0800_409C(cx_548, ds_550, Mem578[ss:sp_464 - 6:word16], Mem578[ss:sp_464 - 4:word16], Mem578[ss:sp_464 - 2:word16], Mem578[ss:sp_464:word16], out cx_1021, out dx_1022, out di_1023, out es_1024, out ds_583, out Top_1025)
	Mem596[ss:sp_464:word16] = 0x0000
	Mem598[ss:sp_464 - 2:word16] = 0x0000
	Mem600[ss:sp_464 - 4:word16] = 0x0000
	Mem603[ss:sp_464 - 6:word16] = Mem600[ds_583:0x29E5:word16]
	Mem606[ss:sp_464 - 8:word16] = Mem603[ds_583:0x29E3:word16]
	fn0800_ACB3(ds_583, Mem606[ss:sp_464 - 8:word16], Mem606[ss:sp_464 - 6:word16], Mem606[ss:sp_464:word16], out cx_1026, out dx_1027, out bx_1028, out es_1029)
	Mem620[ss:sp_464:word16] = Mem606[ds_583:0x29E5:word16]
	Mem623[ss:sp_464 - 2:word16] = Mem620[ds_583:0x29E3:word16]
	word16 v60_560 = (word16) v61_v60_832
	selector ds_628
	word16 ax_624 = fn0800_3E27(ds_583, Mem623[ss:sp_464 - 2:word16], Mem623[ss:sp_464:word16], out cx_1030, out dx_1031, out di_1032, out es_1033, out ds_628, out Top_1034)
	branch ax_624 == 0x601A l0800_6A1E
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_6A1E:
	Mem641[ss:sp_464:word16] = Mem623[ds_628:0x29E5:word16]
	Mem644[ss:sp_464 - 2:word16] = Mem641[ds_628:0x29E3:word16]
	selector ds_648
	word16 dx_649
	fn0800_3E5D(ds_628, Mem644[ss:sp_464 - 2:word16], Mem644[ss:sp_464:word16], out dx_649, out di_1041, out es_1042, out ds_648, out Top_1043)
	Mem659[ss:sp_464:word16] = ax_624
	Mem661[ss:sp_464 - 2:word16] = dx_649
	Mem664[ss:sp_464 - 4:word16] = Mem661[ds_648:0x29E5:word16]
	Mem667[ss:sp_464 - 6:word16] = Mem664[ds_648:0x29E3:word16]
	selector ds_671
	word16 dx_672
	fn0800_3E5D(ds_648, Mem667[ss:sp_464 - 6:word16], Mem667[ss:sp_464 - 4:word16], out dx_672, out di_1044, out es_1045, out ds_671, out Top_1046)
	ui32 bx_cx_835 = SEQ(Mem667[ss:sp_464 - 0x0002:word16], Mem667[ss:sp_464:word16]) + SEQ(dx_672, ax_624)
	Mem689[ss:bp_270 - 0x0002:word16] = SLICE(bx_cx_835, word16, 16)
	Mem690[ss:bp_270 - 0x0004:word16] = (word16) bx_cx_835
	Mem693[ss:sp_464:word16] = Mem690[ds_671:0x29E5:word16]
	Mem696[ss:sp_464 - 2:word16] = Mem693[ds_671:0x29E3:word16]
	word16 dx_701
	fn0800_3E5D(ds_671, Mem696[ss:sp_464 - 2:word16], Mem696[ss:sp_464:word16], out dx_701, out di_1047, out es_1048, out ds_628, out Top_1049)
	Mem709[ss:bp_270 - 0x000A:word16] = dx_701
	Mem710[ss:bp_270 - 0x000C:word16] = ax_624
	ui32 ax_dx_837 = SEQ(Mem710[ss:bp_270 - 0x0002:word16], Mem710[ss:bp_270 - 0x0004:word16]) + SEQ(Mem710[ss:bp_270 - 0x000A:word16], Mem710[ss:bp_270 - 0x000C:word16])
	ui32 bx_cx_839 = SEQ(Mem710[ds_628:0x2A05:word16], Mem710[ds_628:0x2A03:word16]) + SEQ(Mem710[ss:bp_270 - 0x0006:word16], Mem710[ss:bp_270 - 0x0008:word16])
	word16 dx_713 = (word16) ax_dx_837
	word16 ax_716 = SLICE(ax_dx_837, word16, 16)
	word16 cx_719 = (word16) bx_cx_839
	word16 bx_722 = SLICE(bx_cx_839, word16, 16)
	branch ax_716 <u bx_722 l0800_6AA4
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_6A7A:
	branch ax_716 >u bx_722 l0800_6A80
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_6A7C:
	branch dx_713 <=u cx_719 l0800_6AA4
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_6A80:
	ui32 ax_dx_846 = SEQ(Mem710[ss:bp_270 - 0x0002:word16], Mem710[ss:bp_270 - 0x0004:word16]) + SEQ(Mem710[ss:bp_270 - 0x000A:word16], Mem710[ss:bp_270 - 0x000C:word16]) - (SEQ(Mem710[ds_628:0x2A05:word16], Mem710[ds_628:0x2A03:word16]) + SEQ(Mem710[ss:bp_270 - 0x0006:word16], Mem710[ss:bp_270 - 0x0008:word16]))
	Mem749[ss:bp_270 - 0x0008:word16] = v79_748
	ui32 v80_v79_848 = SEQ(Mem749[ss:bp_270 - 0x0006:word16], Mem710[ss:bp_270 - 0x0008:word16]) + ax_dx_846
	Mem753[ss:bp_270 - 0x0006:word16] = SLICE(v80_v79_848, word16, 16)
	word16 v79_748 = (word16) v80_v79_848
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_6A1B:
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_6AA4:
	word16 sp_760 = sp_284 - 2
	Mem762[ss:sp_760:word16] = 0x0000
	Mem765[ss:sp_760 - 2:word16] = 0x0000
	Mem767[ss:sp_760 - 4:word16] = 0x000A
	Mem771[ss:sp_760 - 6:word16] = Mem767[ds_628:0x29E1:word16]
	Mem774[ss:sp_760 - 8:word16] = Mem771[ds_628:0x29DF:word16]
	word16 cx_777
	fn0800_ACB3(ds_628, Mem774[ss:sp_760 - 8:word16], Mem774[ss:sp_760 - 6:word16], Mem774[ss:sp_760:word16], out cx_777, out dx_1050, out bx_1051, out es_1052)
	Mem788[ss:sp_760:word16] = Mem774[ds_628:0x29E1:word16]
	Mem791[ss:sp_760 - 2:word16] = Mem788[ds_628:0x29DF:word16]
	Mem795[ss:sp_760 - 4:word16] = Mem791[ss:bp_270 - 0x0006:word16]
	Mem798[ss:sp_760 - 6:word16] = Mem795[ss:bp_270 - 0x0008:word16]
	selector ds_803
	word16 dx_804
	fn0800_409C(cx_777, ds_628, Mem798[ss:sp_760 - 6:word16], Mem798[ss:sp_760 - 4:word16], Mem798[ss:sp_760 - 2:word16], Mem798[ss:sp_760:word16], out cx_1053, out dx_804, out di_1054, out es_1055, out ds_803, out Top_1056)
	dxOut = dx_804
	dsOut = ds_803
	return 0x0000
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_67E9:
	dxOut = 0x0000
	dsOut = ds
	return 0x0003
// DataOut:
// DataOut (flags):
// SymbolicIn:

fn0800_67BF_exit:
// DataOut:
// DataOut (flags):
// SymbolicIn:



word16 fn0800_6AD4(word16 bp, word16 si, selector ds, ptr16 & dxOut, ptr16 & dsOut)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  bp:[0..15] ds:[0..15] si:[0..15] ss:[0..15]
// LiveOut: ax ds dx sp
// Trashed: SCZO ax bp bx cx di ds dx es si sp Top
// Preserved:
fn0800_6AD4_entry:
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_6AD4:
	word16 ax_26 = (DPB(DPB(ax, Mem12[ds:0x2E75:byte], 0), 0x00, 8) << 0x08) + DPB(DPB(dx, Mem12[ds:0x2E76:byte], 0), 0x00, 8)
	branch Mem12[ds:0x2A09:word16] >u 0x0000 l0800_6B04
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_6AF4:
	branch Mem12[ds:0x2A09:word16] != 0x0000 l0800_6AFC
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_6AF6:
	branch ax_26 <u Mem12[ds:0x2A07:word16] l0800_6B04
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_6B04:
	selector ds_46
	word16 dx_47
	word16 cx_44 = fn0800_3E5D(ds, Mem39[ds:0x29E3:word16], Mem12[ds:0x29E5:word16], out dx_47, out di_909, out es_910, out ds_46, out Top_911)
	branch dx_47 != 0x0000 l0800_6B1B
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_6B16:
	branch ax_26 == 0x03F3 l0800_6B23
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_6B23:
	selector ds_134
	word16 ax_115 = fn0800_409C(cx_44, ds_46, 0x03F3, 0x0000, Mem64[ds_46:0x29DF:word16], Mem42[ds_46:0x29E1:word16], out cx_912, out dx_913, out di_914, out es_915, out ds_134, out Top_916)
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_6B38:
	selector ds_103
	word16 dx_104
	fn0800_409C(fn0800_3E5D(ds_134, Mem96[ds_134:0x29E3:word16], Mem91[ds_134:0x29E5:word16], out dx_104, out di_925, out es_926, out ds_103, out Top_927), ds_103, ax_115, dx_104, Mem121[ds_103:0x29DF:word16], Mem118[ds_103:0x29E1:word16], out cx_928, out dx_929, out di_930, out es_931, out ds_134, out Top_932)
	word16 wLoc08_683 = dx_104
	word16 wLoc0A_684 = ax_115
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_6B84:
	word16 v27_149 = wLoc0A_684 - 0x0001
	wLoc0A_684 = v27_149
	wLoc08_683 = wLoc08_683 - (v27_149 <u 0x0000)
	word16 ax_155 = wLoc0A_684 | wLoc08_683
	branch ax_155 != 0x0000 l0800_6B66
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_6B66:
	selector ds_176
	word16 dx_177
	fn0800_409C(fn0800_3E5D(ds_134, Mem169[ds_134:0x29E3:word16], Mem166[ds_134:0x29E5:word16], out dx_177, out di_917, out es_918, out ds_176, out Top_919), ds_176, ax_155, dx_177, Mem163[ds_134:0x29DF:word16], Mem154[ds_134:0x29E1:word16], out cx_920, out dx_921, out di_922, out es_923, out ds_134, out Top_924)
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_6B96:
	ax_115 = ax_115 | dx_104
	Mem91 = Mem154
	branch ax_115 != 0x0000 l0800_6B38
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_6B9E:
	selector ds_224
	word16 dx_225
	selector ds_246
	word16 ax_242 = fn0800_409C(fn0800_3E5D(ds_134, Mem217[ds_134:0x29E3:word16], Mem214[ds_134:0x29E5:word16], out dx_225, out di_933, out es_934, out ds_224, out Top_935), ds_224, ax_115 + 0x0001, dx_225 + (ax_115 <u 0x0001), Mem211[ds_134:0x29DF:word16], Mem154[ds_134:0x29E1:word16], out cx_936, out dx_937, out di_938, out es_939, out ds_246, out Top_940)
	selector ds_265
	word16 dx_266
	fn0800_3E5D(ds_246, Mem258[ds_246:0x29E3:word16], Mem241[ds_246:0x29E5:word16], out dx_266, out di_941, out es_942, out ds_265, out Top_943)
	selector ds_286
	word16 dx_287
	word16 cx_324
	selector ds_326
	fn0800_409C(fn0800_3E5D(ds_265, Mem279[ds_265:0x29E3:word16], Mem276[ds_265:0x29E5:word16], out dx_287, out di_944, out es_945, out ds_286, out Top_946), ds_286, ax_242, dx_266, Mem312[ds_286:0x29DF:word16], Mem309[ds_286:0x29E1:word16], out cx_324, out dx_947, out di_948, out es_949, out ds_326, out Top_950)
	word16 cx_354
	selector ds_356
	word16 dx_357
	selector ds_400
	fn0800_409C(DPB(cx_354, 0x08, 0), ds_356, (DPB(DPB(fn0800_409C(cx_324, ds_326, ax_242 + 0x0001, dx_287 + (ax_242 <u 0x0001), Mem337[ds_326:0x29DF:word16], Mem321[ds_326:0x29E1:word16], out cx_354, out dx_357, out di_951, out es_952, out ds_356, out Top_953), Mem351[ds_356:0x2E75:byte], 0), 0x00, 8) << 0x08) + DPB(DPB(dx_357, Mem351[ds_356:0x2E76:byte], 0), 0x00, 8) - 0x000C >>u 0x0002, 0x0000, Mem383[ds_356:0x29DF:word16], Mem380[ds_356:0x29E1:word16], out cx_954, out dx_955, out di_956, out es_957, out ds_400, out Top_958)
	// Failed to bind call argument.
	// Please report this issue at https://github.com/uxmal/reko
	word16 stackArg4 = <invalid>
	word16 dx_419
	word16 ax_416 = fn0800_AD2F(ds_400, SEQ(Mem394[ds_400:0x29E1:word16], Mem412[ds_400:0x29DF:word16]), stackArg4, out cx_960, out dx_419)
	Mem427[ds_400:0x4E8E:word16] = dx_419
	Mem428[ds_400:0x4E8C:word16] = ax_416
	ui32 ax_dx_672 = SEQ(dx_287, ax_242) - SEQ(dx_266, ax_242)
	word16 dx_299 = (word16) ax_dx_672
	word16 ax_306 = SLICE(ax_dx_672, word16, 16) + (dx_299 <u 0x0001)
	word16 dx_430 = dx_299 + 0x0001
	word16 wLoc04_736 = ax_306
	word16 wLoc06_737 = dx_299 + 0x0001
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_6CAF:
	word16 ax_437 = wLoc06_737 | wLoc04_736
	branch ax_437 != 0x0000 l0800_6C89
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_6C89:
	selector ds_458
	word16 dx_459
	fn0800_409C(fn0800_3E5D(ds_400, Mem451[ds_400:0x29E3:word16], Mem448[ds_400:0x29E5:word16], out dx_459, out di_961, out es_962, out ds_458, out Top_963), ds_458, ax_437, dx_459, Mem445[ds_400:0x29DF:word16], Mem435[ds_400:0x29E1:word16], out cx_964, out dx_430, out di_965, out es_966, out ds_400, out Top_967)
	word16 v58_485 = wLoc06_737 - 0x0001
	wLoc06_737 = v58_485
	wLoc04_736 = wLoc04_736 - (v58_485 <u 0x0000)
	Mem435 = Mem490
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_6CB7:
	word16 ax_509 = (DPB(DPB(ax_437, Mem497[ds_400:0x2E75:byte], 0), 0x00, 8) << 0x08) + DPB(DPB(dx_430, Mem497[ds_400:0x2E76:byte], 0), 0x00, 8)
	selector ds_526
	fn0800_4152(ds_400, 0x2E77, ds_400, ax_509, Mem494[ds_400:0x29DF:word16], Mem435[ds_400:0x29E1:word16], out cx_968, out ds_526)
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_6E93:
	// Failed to bind call argument.
	// Please report this issue at https://github.com/uxmal/reko
	word16 stackArg4 = <invalid>
	word16 dx_548
	word16 ax_545 = fn0800_AD2F(ds_526, SEQ(Mem521[ds_526:0x29E5:word16], Mem541[ds_526:0x29E3:word16]), stackArg4, out cx_970, out dx_548)
	branch dx_548 >=u Mem544[ds_526:0x2A09:word16] l0800_6EAA
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_6EAA:
	branch dx_548 != Mem544[ds_526:0x2A09:word16] l0800_6EB5
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_6EAC:
	branch ax_545 >=u Mem544[ds_526:0x2A07:word16] l0800_6EB5
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_6EB5:
	dxOut = dx_548
	dsOut = ds_526
	return 0x0000
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_6EB2:
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_6EA7:
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_6CE4:
	word16 v62_573 = Mem544[ds_526:0x29E5:word16]
	word16 v63_578 = Mem577[ds_526:0x29E3:word16]
	word16 di_583
	selector ds_584
	word16 dx_585
	selector es_586
	int8 Top_587
	fn0800_3E5D(ds_526, v63_578, v62_573, out dx_585, out di_583, out es_586, out ds_584, out Top_587)
	word16 cx_604 = 0x0007
	word16 bx_605 = 0x6EBC
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_6D0D:
	branch Mem603[0x0800:bx_605:word16] != ax_545 l0800_6D1E
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_6D15:
	word16 ax_613 = Mem603[0x0800:bx_605 + 0x000E:word16]
	branch ax_613 == (dx_585 & 0x3FFF) l0800_6D26
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_6D26:
	word16 ax_619
	word16 dx_624
	call Mem603[0x0800:bx_605 + 0x001C:word16] (retsize: 2;)
		uses: ax:ax_613,bp:fp - 2,bx:bx_606,cx:cx_621,di:di_583,ds:ds_584,dx:ax_545,es:es_586,si:0x0000,sp:fp - 0x001C,ss:ss,Stack +0000:v62_573,Stack +0002:si,Stack +0004:ax_545,Stack +0006:dx_585 & 0x3FFF,Stack +0008:dx_299 + 0x0001,Stack +000A:ax_306,Stack +000C:ax_242,Stack +000E:dx_287,Stack +0010:ax_242,Stack +0012:dx_266,Stack +0014:ax_545,Stack +0016:dx_585,Stack +0018:wLoc06_738,Stack +001A:wLoc04_739,Stack +001C:bp,Stack +FFFFFFF6:0x2E77,Stack +FFFFFFF8:ds_441,Stack +FFFFFFFA:ax_509,Stack +FFFFFFFC:0x0000,Stack +FFFFFFFE:v63_578,Top:Top_587
		defs: ax:ax_619,dx:dx_624
	dxOut = dx_624
	dsOut = ds_584
	return ax_619
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_6D1E:
	bx_605 = bx_605 + 0x0002
	cx_604 = cx_604 - 0x0001
	branch cx_604 != 0x0000 l0800_6D0D
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_6D23:
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_6E8B:
	dxOut = ax_545
	dsOut = ds_584
	return 0x0009
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_6B1B:
	dxOut = dx_47
	dsOut = ds_46
	return 0x0003
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_6AFC:
	dxOut = 0x0000
	dsOut = ds
	return 0x0003
// DataOut:
// DataOut (flags):
// SymbolicIn:

fn0800_6AD4_exit:
// DataOut:
// DataOut (flags):
// SymbolicIn:



void fn0800_6EE6(word16 cx, word16 dx, word16 bx, selector ds, word16 wArg02, word16 wArg04, word16 wArg06)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  bx:[0..15] cx:[0..15] ds:[0..15] dx:[0..15] ss:[0..15]
// LiveOut:
// Trashed: SCZDO ax di si Top
// Preserved: bp sp
fn0800_6EE6_entry:
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_6EE6:
	fn0800_B2EF(cx, dx, bx, ds, 0x2223, ds, out si_52, out di_53)
	return
// DataOut:
// DataOut (flags):
// SymbolicIn:

fn0800_6EE6_exit:
// DataOut:
// DataOut (flags):
// SymbolicIn:



void fn0800_6EFF(word16 cx, word16 dx, word16 bx, selector ds, word16 wArg02)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  bx:[0..15] cx:[0..15] ds:[0..15] dx:[0..15] ss:[0..15] Stack +0002:[0..15]
// LiveOut:
// Trashed: SCZDO ax di si Top
// Preserved: bp sp
fn0800_6EFF_entry:
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_6EFF:
	fn0800_B2EF(cx, dx, bx, ds, 0x2231, ds, out si_20, out di_19)
	branch wArg02 <=u 0x0009 l0800_6F1E
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_6F13:
	fn0800_B2EF(cx, dx, bx, ds, 0x223E, ds, out si_73, out di_74)
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_6F1E:
	return
// DataOut:
// DataOut (flags):
// SymbolicIn:

fn0800_6EFF_exit:
// DataOut:
// DataOut (flags):
// SymbolicIn:



void fn0800_6F20(word16 ax, selector ds, word16 wArg02, word16 wArg04)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  ax:[0..15] ds:[0..15] ss:[0..15] Stack +0002:[0..15] Stack +0004:[0..15]
// LiveOut:
// Trashed: SCZO ax bp bx cx di ds dx es si sp Top
// Preserved:
fn0800_6F20_entry:
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_6F20:
	word16 dx_22
	selector ds_102
	fn0800_3E5D(ds, Mem14[ds:0x29E3:word16], Mem7[ds:0x29E5:word16], out dx_22, out di_1329, out es_1330, out ds_102, out Top_1331)
	// Failed to bind call argument.
	// Please report this issue at https://github.com/uxmal/reko
	word16 stackArg0 = <invalid>
	word16 dx_36
	word16 sp_37
	word16 ax_33 = fn0800_8C69(ax, 0x02, dx_22, stackArg0, out cl_1333, out dx_36)
	Mem46[ss:sp_37 - 2:word16] = Mem43[ds_102:0x29E5:word16]
	Mem49[ss:sp_37 - 4:word16] = Mem46[ds_102:0x29E3:word16]
	// Failed to bind call argument.
	// Please report this issue at https://github.com/uxmal/reko
	word16 stackArg4 = <invalid>
	word16 dx_53
	word16 ax_50 = fn0800_AD2F(ds_102, Mem49[ss:sp_37 - 4:segptr32], stackArg4, out cx_1335, out dx_53)
	Mem65[ss:sp_37 - 2:word16] = 0x0001
	Mem68[ss:sp_37 - 4:word16] = dx_36
	Mem71[ss:sp_37 - 6:word16] = ax_33
	Mem74[ss:sp_37 - 8:word16] = Mem71[ds_102:0x29E5:word16]
	Mem77[ss:sp_37 - 10:word16] = Mem74[ds_102:0x29E3:word16]
	word16 bp_508 = fp - 2
	word16 ax_115 = fn0800_ACB3(ds_102, Mem77[ss:sp_37 - 10:word16], Mem77[ss:sp_37 - 8:word16], Mem77[ss:sp_37 - 2:word16], out cx_1336, out dx_1337, out bx_1338, out es_1339)
	word16 sp_1216 = sp_37
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_6FCC:
	word16 sp_93 = sp_1216 - 2
	Mem95[ss:sp_93:word16] = Mem90[ds_102:0x29E5:word16]
	Mem98[ss:sp_93 - 2:word16] = Mem95[ds_102:0x29E3:word16]
	word16 dx_103
	fn0800_3F58(ds_102, Mem98[ss:sp_93 - 2:word16], Mem98[ss:sp_93:word16], out dx_103, out di_1340, out ds_102)
	branch dx_103 != 0x0000 l0800_6FE3
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_6FDE:
	branch ax_115 == 0x03EC l0800_6F6D
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_6F6D:
	Mem120[ss:sp_93:word16] = 0x0001
	Mem126[ss:sp_93 - 2:word16] = 0x0000
	Mem128[ss:sp_93 - 4:word16] = 0x0004
	Mem131[ss:sp_93 - 6:word16] = Mem128[ds_102:0x29E5:word16]
	Mem134[ss:sp_93 - 8:word16] = Mem131[ds_102:0x29E3:word16]
	ax_115 = fn0800_ACB3(ds_102, Mem134[ss:sp_93 - 8:word16], Mem134[ss:sp_93 - 6:word16], Mem134[ss:sp_93:word16], out cx_1348, out dx_1349, out bx_1350, out es_1351)
	sp_1216 = sp_93 + 0x0002
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_6F86:
	word16 sp_150 = sp_1216 - 2
	Mem152[ss:sp_150:word16] = Mem147[ds_102:0x29E5:word16]
	Mem155[ss:sp_150 - 2:word16] = Mem152[ds_102:0x29E3:word16]
	word16 dx_160
	fn0800_3E5D(ds_102, Mem155[ss:sp_150 - 2:word16], Mem155[ss:sp_150:word16], out dx_160, out di_1454, out es_1455, out ds_102, out Top_1456)
	// Failed to bind call argument.
	// Please report this issue at https://github.com/uxmal/reko
	word16 stackArg0 = <invalid>
	word16 dx_174
	word16 sp_175
	word16 ax_171 = fn0800_8C69(ax_115, 0x02, dx_160, stackArg0, out cl_1458, out dx_174)
	Mem220 = Mem182
	branch (ax_171 | dx_174) == 0x0000 l0800_6FC4
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_6FA4:
	Mem189[ss:sp_175 - 2:word16] = 0x0001
	Mem198[ss:sp_175 - 4:word16] = dx_174 + (ax_171 <u 0x0004)
	Mem200[ss:sp_175 - 6:word16] = ax_171 + 0x0004
	Mem203[ss:sp_175 - 8:word16] = Mem200[ds_102:0x29E5:word16]
	Mem206[ss:sp_175 - 10:word16] = Mem203[ds_102:0x29E3:word16]
	fn0800_ACB3(ds_102, Mem206[ss:sp_175 - 10:word16], Mem206[ss:sp_175 - 8:word16], Mem206[ss:sp_175 - 2:word16], out cx_1430, out dx_1431, out bx_1432, out es_1433)
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_6FC4:
	sp_1216 = sp_175
	ax_115 = ax_171 | dx_174
	branch ax_115 != 0x0000 l0800_6F86
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_6FE3:
	Mem232[ss:sp_93:word16] = Mem98[ds_102:0x29E5:word16]
	Mem235[ss:sp_93 - 2:word16] = Mem232[ds_102:0x29E3:word16]
	// Failed to bind call argument.
	// Please report this issue at https://github.com/uxmal/reko
	word16 stackArg4 = <invalid>
	word16 cx_238
	word16 dx_239
	ui32 dx_ax_1225 = SEQ(dx_239, fn0800_AD2F(ds_102, Mem235[ss:sp_93 - 2:segptr32], stackArg4, out cx_238, out dx_239)) - SEQ(dx_53, ax_50)
	word16 dx_251 = SLICE(dx_ax_1225, word16, 16)
	Mem255[ds_102:0x2A05:word16] = dx_251
	word16 ax_248 = (word16) dx_ax_1225
	Mem256[ds_102:0x2A03:word16] = ax_248
	Mem259[ss:sp_93:word16] = Mem256[ds_102:0x29E1:word16]
	Mem262[ss:sp_93 - 2:word16] = Mem259[ds_102:0x29DF:word16]
	Mem265[ss:sp_93 - 4:word16] = wArg04
	Mem268[ss:sp_93 - 6:word16] = wArg02
	selector ds_273
	fn0800_409C(cx_238, ds_102, Mem268[ss:sp_93 - 6:word16], Mem268[ss:sp_93 - 4:word16], Mem268[ss:sp_93 - 2:word16], Mem268[ss:sp_93:word16], out cx_1342, out dx_1343, out di_1344, out es_1345, out ds_273, out Top_1346)
	Mem285[ss:sp_93:word16] = Mem268[ds_273:0x29E1:word16]
	Mem288[ss:sp_93 - 2:word16] = Mem285[ds_273:0x29DF:word16]
	// Failed to bind call argument.
	// Please report this issue at https://github.com/uxmal/reko
	word16 stackArg4 = <invalid>
	word16 dx_292
	word16 cx_1221
	word16 ax_289 = fn0800_AD2F(ds_273, Mem288[ss:sp_93 - 2:segptr32], stackArg4, out cx_1221, out dx_292)
	word16 sp_298 = sp_93 + 0x0002
	branch dx_251 >=u 0x0000 l0800_7035
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_7035:
	branch dx_251 >u 0x0000 l0800_7040
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_7037:
	branch ax_248 >u 0x0012 l0800_7040
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_7040:
	Mem312[ss:sp_93:word16] = 0x0000
	Mem316[ss:sp_93 - 2:word16] = Mem312[ds_273:0x4E8E:word16]
	Mem319[ss:sp_93 - 4:word16] = Mem316[ds_273:0x4E8C:word16]
	Mem322[ss:sp_93 - 6:word16] = Mem319[ds_273:0x29E1:word16]
	Mem325[ss:sp_93 - 8:word16] = Mem322[ds_273:0x29DF:word16]
	word16 ax_326 = fn0800_ACB3(ds_273, Mem325[ss:sp_93 - 8:word16], Mem325[ss:sp_93 - 6:word16], Mem325[ss:sp_93:word16], out cx_1352, out dx_1353, out bx_1354, out es_1355)
	Mem339[ss:sp_93:word16] = Mem325[ds_273:0x29E1:word16]
	Mem342[ss:sp_93 - 2:word16] = Mem339[ds_273:0x29DF:word16]
	selector ds_346
	word16 dx_347
	fn0800_3E5D(ds_273, Mem342[ss:sp_93 - 2:word16], Mem342[ss:sp_93:word16], out dx_347, out di_1356, out es_1357, out ds_346, out Top_1358)
	Mem362[ss:sp_93:word16] = 0x0000
	Mem365[ss:sp_93 - 2:word16] = dx_292
	Mem368[ss:sp_93 - 4:word16] = ax_289
	Mem371[ss:sp_93 - 6:word16] = Mem368[ds_346:0x29E1:word16]
	Mem374[ss:sp_93 - 8:word16] = Mem371[ds_346:0x29DF:word16]
	word16 cx_377
	fn0800_ACB3(ds_346, Mem374[ss:sp_93 - 8:word16], Mem374[ss:sp_93 - 6:word16], Mem374[ss:sp_93:word16], out cx_377, out dx_1359, out bx_1360, out es_1361)
	Mem387[ss:sp_93:word16] = Mem374[ds_346:0x29E1:word16]
	Mem390[ss:sp_93 - 2:word16] = Mem387[ds_346:0x29DF:word16]
	Mem395[ss:sp_93 - 4:word16] = 0x0000
	Mem397[ss:sp_93 - 6:word16] = 0x0000
	word16 cx_400
	selector ds_402
	fn0800_409C(cx_377, ds_346, Mem397[ss:sp_93 - 6:word16], Mem397[ss:sp_93 - 4:word16], Mem397[ss:sp_93 - 2:word16], Mem397[ss:sp_93:word16], out cx_400, out dx_1362, out di_1363, out es_1364, out ds_402, out Top_1365)
	Mem414[ss:sp_93:word16] = Mem397[ds_402:0x29E1:word16]
	Mem417[ss:sp_93 - 2:word16] = Mem414[ds_402:0x29DF:word16]
	Mem420[ss:sp_93 - 4:word16] = dx_36
	Mem423[ss:sp_93 - 6:word16] = ax_33
	word16 cx_426
	selector ds_428
	fn0800_409C(cx_400, ds_402, Mem423[ss:sp_93 - 6:word16], Mem423[ss:sp_93 - 4:word16], Mem423[ss:sp_93 - 2:word16], Mem423[ss:sp_93:word16], out cx_426, out dx_1366, out di_1367, out es_1368, out ds_428, out Top_1369)
	Mem440[ss:sp_93:word16] = Mem423[ds_428:0x29E1:word16]
	Mem443[ss:sp_93 - 2:word16] = Mem440[ds_428:0x29DF:word16]
	Mem446[ss:sp_93 - 4:word16] = dx_347
	Mem449[ss:sp_93 - 6:word16] = ax_326
	selector ds_454
	fn0800_409C(cx_426, ds_428, Mem449[ss:sp_93 - 6:word16], Mem449[ss:sp_93 - 4:word16], Mem449[ss:sp_93 - 2:word16], Mem449[ss:sp_93:word16], out cx_1370, out dx_1371, out di_1372, out es_1373, out ds_454, out Top_1374)
	Mem467[ss:sp_93:word16] = 0x0000
	Mem470[ss:sp_93 - 2:word16] = dx_53
	Mem473[ss:sp_93 - 4:word16] = ax_50
	Mem476[ss:sp_93 - 6:word16] = Mem473[ds_454:0x29E5:word16]
	Mem479[ss:sp_93 - 8:word16] = Mem476[ds_454:0x29E3:word16]
	fn0800_ACB3(ds_454, Mem479[ss:sp_93 - 8:word16], Mem479[ss:sp_93 - 6:word16], Mem479[ss:sp_93:word16], out cx_1375, out dx_1376, out bx_1377, out es_1378)
	Mem498[ss:sp_93:word16] = dx_251 - (ax_248 <u 0x0008)
	Mem500[ss:sp_93 - 2:word16] = ax_248 - 0x0008
	Mem503[ss:sp_93 - 4:word16] = dx_251
	Mem506[ss:sp_93 - 6:word16] = ax_248
	word16 sp_516
	cx_1221 = fn0800_75EA(ds_454, Mem506[ss:sp_93 - 6:word16], Mem506[ss:sp_93 - 4:word16], Mem506[ss:sp_93 - 2:word16], Mem506[ss:sp_93:word16], out dx_1379, out bp_508, out si_1380, out ds_273)
	word16 v58_523 = Mem506[ds_273:0x2A03:word16] + 0x0008
	Mem524[ds_273:0x2A03:word16] = v58_523
	Mem528[ds_273:0x2A05:word16] = Mem524[ds_273:0x2A05:word16] + (v58_523 <u 0x0000)
	sp_298 = sp_516 + 0x0008
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_703D:
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_7032:
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_70F9:
	word16 ax_532 = Mem531[ds_273:0x2A05:word16]
	word16 dx_533 = Mem531[ds_273:0x2A03:word16]
	branch ax_532 >=u Mem531[ss:bp_508 - 0x0016:word16] l0800_7108
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_7108:
	branch ax_532 != Mem531[ss:bp_508 - 0x0016:word16] l0800_7112
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_710A:
	branch dx_533 >=u Mem531[ss:bp_508 - 0x0018:word16] l0800_7112
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_7112:
	word16 sp_546 = sp_298 - 2
	Mem548[ss:sp_546:word16] = 0x0000
	Mem552[ss:sp_546 - 2:word16] = Mem548[ss:bp_508 - 0x0002:word16]
	Mem555[ss:sp_546 - 4:word16] = Mem552[ss:bp_508 - 0x0004:word16]
	Mem559[ss:sp_546 - 6:word16] = Mem555[ds_273:0x29E1:word16]
	Mem562[ss:sp_546 - 8:word16] = Mem559[ds_273:0x29DF:word16]
	fn0800_ACB3(ds_273, Mem562[ss:sp_546 - 8:word16], Mem562[ss:sp_546 - 6:word16], Mem562[ss:sp_546:word16], out cx_1381, out dx_1382, out bx_1383, out es_1384)
	Mem575[ss:sp_546:word16] = 0x0000
	word16 dx_577 = Mem575[ss:bp_508 - 0x0014:word16]
	Mem584[ss:sp_546 - 2:word16] = Mem575[ss:bp_508 - 0x0012:word16] - (dx_577 <u 0x0004)
	Mem586[ss:sp_546 - 4:word16] = dx_577 - 0x0004
	Mem589[ss:sp_546 - 6:word16] = Mem586[ds_273:0x29E5:word16]
	Mem592[ss:sp_546 - 8:word16] = Mem589[ds_273:0x29E3:word16]
	fn0800_ACB3(ds_273, Mem592[ss:sp_546 - 8:word16], Mem592[ss:sp_546 - 6:word16], Mem592[ss:sp_546:word16], out cx_1385, out dx_1386, out bx_1387, out es_1388)
	word16 dx_604 = Mem592[ss:bp_508 - 0x0010:word16]
	Mem611[ss:sp_546:word16] = Mem592[ss:bp_508 - 0x000E:word16] + (dx_604 <u 0x0004)
	Mem613[ss:sp_546 - 2:word16] = dx_604 + 0x0004
	Mem616[ss:sp_546 - 4:word16] = Mem613[ds_273:0x29E1:word16]
	Mem619[ss:sp_546 - 6:word16] = Mem616[ds_273:0x29DF:word16]
	Mem622[ss:sp_546 - 8:word16] = Mem619[ds_273:0x29E5:word16]
	Mem625[ss:sp_546 - 10:word16] = Mem622[ds_273:0x29E3:word16]
	selector ds_631
	word16 sp_635
	word16 bp_627
	word16 ax_626 = fn0800_3B0A(Mem625[ss:sp_546 - 2:word16], Mem625[ss:sp_546:word16], out cx_1389, out dx_1390, out bp_627, out ds_631)
	Mem645[ss:sp_635 + 0x000A:word16] = Mem625[ds_631:0x29E5:word16]
	Mem648[ss:sp_635 + 0x0008:word16] = Mem645[ds_631:0x29E3:word16]
	word16 dx_653
	selector ds_652
	fn0800_3F58(ds_631, Mem648[ss:sp_635 + 0x0008:word16], Mem648[ss:sp_635 + 0x000A:word16], out dx_653, out di_651, out ds_652)
	branch dx_653 == 0x0000 l0800_7181
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_7181:
	branch ax_626 == 0x03EC l0800_7189
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_7189:
	Mem669[ss:sp_635 + 0x000A:word16] = 0x0001
	Mem675[ss:sp_635 + 0x0008:word16] = 0x0000
	Mem677[ss:sp_635 + 0x0006:word16] = 0x0004
	Mem680[ss:sp_635 + 0x0004:word16] = Mem677[ds_652:0x29E5:word16]
	Mem683[ss:sp_635 + 0x0002:word16] = Mem680[ds_652:0x29E3:word16]
	word16 cx_686
	fn0800_ACB3(ds_652, Mem683[ss:sp_635 + 0x0002:word16], Mem683[ss:sp_635 + 0x0004:word16], Mem683[ss:sp_635 + 0x000A:word16], out cx_686, out dx_1422, out bx_1423, out es_1424)
	Mem696[ss:sp_635 + 0x000A:word16] = Mem683[ds_652:0x29E1:word16]
	Mem699[ss:sp_635 + 0x0008:word16] = Mem696[ds_652:0x29DF:word16]
	Mem705[ss:sp_635 + 0x0006:word16] = 0x0000
	Mem707[ss:sp_635 + 0x0004:word16] = 0x03EC
	word16 ax_708 = fn0800_409C(cx_686, ds_652, Mem707[ss:sp_635 + 0x0004:word16], Mem707[ss:sp_635 + 0x0006:word16], Mem707[ss:sp_635 + 0x0008:word16], Mem707[ss:sp_635 + 0x000A:word16], out cx_1425, out dx_1426, out di_1427, out es_1428, out ds_652, out Top_1429)
	word16 sp_1217 = sp_635 + 0x000C
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_71B7:
	word16 sp_726 = sp_1217 - 2
	Mem728[ss:sp_726:word16] = Mem723[ds_652:0x29E5:word16]
	Mem731[ss:sp_726 - 2:word16] = Mem728[ds_652:0x29E3:word16]
	selector ds_735
	word16 dx_736
	word16 cx_733 = fn0800_3E5D(ds_652, Mem731[ss:sp_726 - 2:word16], Mem731[ss:sp_726:word16], out dx_736, out di_1446, out es_1447, out ds_735, out Top_1448)
	Mem746[ss:bp_627 - 0x0002:word16] = dx_736
	Mem748[ss:bp_627 - 0x0004:word16] = ax_708
	Mem751[ss:sp_726:word16] = Mem748[ds_735:0x29E1:word16]
	Mem754[ss:sp_726 - 2:word16] = Mem751[ds_735:0x29DF:word16]
	Mem757[ss:sp_726 - 4:word16] = Mem754[ss:bp_627 - 0x0002:word16]
	Mem759[ss:sp_726 - 6:word16] = ax_708
	fn0800_409C(cx_733, ds_735, Mem759[ss:sp_726 - 6:word16], Mem759[ss:sp_726 - 4:word16], Mem759[ss:sp_726 - 2:word16], Mem759[ss:sp_726:word16], out cx_1449, out dx_1450, out di_1451, out es_1452, out ds_652, out Top_1453)
	sp_1217 = sp_726 + 0x0002
	word16 ax_774 = Mem759[ss:bp_627 - 0x0004:word16] | Mem759[ss:bp_627 - 0x0002:word16]
	branch ax_774 == 0x0000 l0800_7234
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_71E5:
	Mem780[ss:sp_726:word16] = Mem759[ds_652:0x29E5:word16]
	Mem783[ss:sp_726 - 0x0002:word16] = Mem780[ds_652:0x29E3:word16]
	selector ds_787
	word16 dx_788
	word16 cx_785 = fn0800_3E5D(ds_652, Mem783[ss:sp_726 - 0x0002:word16], Mem783[ss:sp_726:word16], out dx_788, out di_1434, out es_1435, out ds_787, out Top_1436)
	Mem801[ss:bp_627 - 0x0006:word16] = dx_788 + (ax_774 <u 0x0001)
	Mem802[ss:bp_627 - 0x0008:word16] = ax_774 + 0x0001
	Mem805[ss:sp_726:word16] = Mem802[ds_787:0x29E1:word16]
	Mem808[ss:sp_726 - 0x0002:word16] = Mem805[ds_787:0x29DF:word16]
	Mem811[ss:sp_726 - 0x0004:word16] = Mem808[ss:bp_627 - 0x0006:word16]
	Mem813[ss:sp_726 - 6:word16] = ax_774 + 0x0001
	selector ds_818
	fn0800_409C(cx_785, ds_787, Mem813[ss:sp_726 - 6:word16], Mem813[ss:sp_726 - 4:word16], Mem813[ss:sp_726 - 2:word16], Mem813[ss:sp_726:word16], out cx_1437, out dx_1438, out di_1439, out es_1440, out ds_818, out Top_1441)
	// Failed to bind call argument.
	// Please report this issue at https://github.com/uxmal/reko
	word16 stackArg0 = <invalid>
	word16 dx_834
	word16 sp_835
	word16 ax_831 = fn0800_8C69(Mem813[ss:bp_627 - 0x0004:word16], 0x02, Mem813[ss:bp_627 - 0x0002:word16], stackArg0, out cl_1443, out dx_834)
	Mem841[ss:sp_835 - 2:word16] = dx_834
	Mem843[ss:sp_835 - 4:word16] = ax_831
	Mem846[ss:sp_835 - 6:word16] = Mem843[ds_818:0x29E1:word16]
	Mem849[ss:sp_835 - 8:word16] = Mem846[ds_818:0x29DF:word16]
	Mem852[ss:sp_835 - 10:word16] = Mem849[ds_818:0x29E5:word16]
	Mem855[ss:sp_835 - 12:word16] = Mem852[ds_818:0x29E3:word16]
	word16 sp_865
	fn0800_3B0A(Mem855[ss:sp_835 - 4:word16], Mem855[ss:sp_835 - 2:word16], out cx_1444, out dx_1445, out bp_627, out ds_652)
	sp_1217 = sp_865 + 0x000C
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_7234:
	ax_708 = Mem875[ss:bp_627 - 0x0004:word16] | Mem875[ss:bp_627 - 0x0002:word16]
	branch ax_708 == 0x0000 l0800_723F
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_723C:
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_7186:
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_717E:
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_723F:
	word16 v80_884 = Mem883[ds_652:0x4E8C:word16] + 0x0004
	Mem885[ds_652:0x4E8C:word16] = v80_884
	Mem889[ds_652:0x4E8E:word16] = Mem885[ds_652:0x4E8E:word16] + (v80_884 <u 0x0000)
	return
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_710F:
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_7105:
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_724D:
	ui32 ax_dx_1227 = SEQ(Mem531[ss:bp_508 - 0x0016:word16], Mem531[ss:bp_508 - 0x0018:word16]) + SEQ(Mem531[ds_273:0x4E8A:word16], Mem531[ds_273:0x4E88:word16])
	Mem906[ss:bp_508 - 0x0002:word16] = SLICE(ax_dx_1227, word16, 16)
	Mem907[ss:bp_508 - 0x0004:word16] = (word16) ax_dx_1227
	branch (Mem907[ds_273:0x2A03:word16] & 0x0003) == 0x0000 l0800_7274
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_726C:
	word16 v60_914 = Mem907[ss:bp_508 - 0x0004:word16] + 0x0002
	Mem915[ss:bp_508 - 0x0004:word16] = v60_914
	Mem919[ss:bp_508 - 0x0002:word16] = Mem915[ss:bp_508 - 0x0002:word16] + (v60_914 <u 0x0000)
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_7274:
	word16 cx_1222
	word16 sp_937
	branch (Mem923[ss:bp_508 - 0x0004:word16] & 0x0003) == 0x0000 l0800_7298
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_7298:
	// Failed to bind call argument.
	// Please report this issue at https://github.com/uxmal/reko
	word16 stackArg0 = <invalid>
	byte cl_935
	word16 dx_936
	word16 ax_933 = fn0800_8CAA(Mem923[ss:bp_508 - 0x0004:word16], 0x02, Mem923[ss:bp_508 - 0x0002:word16], stackArg0, out cl_935, out dx_936)
	Mem942[ss:bp_508 - 0x0002:word16] = dx_936
	Mem943[ss:bp_508 - 0x0004:word16] = ax_933
	cx_1222 = DPB(cx_1221, cl_935, 0) (alias)
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_727F:
	// Failed to bind call argument.
	// Please report this issue at https://github.com/uxmal/reko
	word16 stackArg0 = <invalid>
	byte cl_949
	word16 dx_950
	word16 ax_947 = fn0800_8CAA(Mem923[ss:bp_508 - 0x0004:word16], 0x02, Mem923[ss:bp_508 - 0x0002:word16], stackArg0, out cl_949, out dx_950)
	Mem961[ss:bp_508 - 0x0002:word16] = dx_950 + (ax_947 <u 0x0001)
	Mem962[ss:bp_508 - 0x0004:word16] = ax_947 + 0x0001
	cx_1222 = DPB(cx_1221, cl_949, 0) (alias)
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_72C6:
	word16 ax_965 = Mem964[ds_273:0x2A03:word16]
	branch (ax_965 & 0x0003) != 0x0000 l0800_72AB
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_72AB:
	word16 sp_973 = sp_937 - 2
	Mem975[ss:sp_973:word16] = Mem964[ds_273:0x29E1:word16]
	Mem978[ss:sp_973 - 2:word16] = Mem975[ds_273:0x29DF:word16]
	Mem982[ss:sp_973 - 4:word16] = DPB(ax_965 & 0x0003, 0x00, 0)
	// Failed to bind call argument.
	// Please report this issue at https://github.com/uxmal/reko
	word16 stackArg6 = <invalid>
	fn0800_4047(cx_1222, ds_273, Mem982[ss:sp_973 - 4:byte], Mem982[ss:sp_973 - 2:segptr32], stackArg6, out cx_1222, out dx_1394, out bx_1395, out di_1396, out es_1397, out ds_273, out Top_1398)
	word16 v101_997 = Mem982[ds_273:0x2A03:word16] + 0x0001
	Mem998[ds_273:0x2A03:word16] = v101_997
	Mem1002[ds_273:0x2A05:word16] = Mem998[ds_273:0x2A05:word16] + (v101_997 <u 0x0000)
	sp_937 = sp_973 + 0x0002
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_72D1:
	word16 sp_1005 = sp_937 - 2
	Mem1006[ss:sp_1005:word16] = Mem964[ds_273:0x29E1:word16]
	Mem1009[ss:sp_1005 - 2:word16] = Mem1006[ds_273:0x29DF:word16]
	// Failed to bind call argument.
	// Please report this issue at https://github.com/uxmal/reko
	word16 stackArg4 = <invalid>
	word16 dx_1013
	word16 ax_1010 = fn0800_AD2F(ds_273, Mem1009[ss:sp_1005 - 2:segptr32], stackArg4, out cx_1400, out dx_1013)
	Mem1021[ss:bp_508 - 0x0006:word16] = dx_1013
	Mem1022[ss:bp_508 - 0x0008:word16] = ax_1010
	Mem1025[ss:sp_1005:word16] = 0x0001
	word16 dx_1029 = -Mem1025[ds_273:0x2A03:word16]
	Mem1038[ss:sp_1005 - 2:word16] = -Mem1025[ds_273:0x2A05:word16] - (dx_1029 == 0x0000) - (dx_1029 <u 0x0004)
	Mem1040[ss:sp_1005 - 4:word16] = dx_1029 - 0x0004
	Mem1043[ss:sp_1005 - 6:word16] = Mem1040[ds_273:0x29E1:word16]
	Mem1046[ss:sp_1005 - 8:word16] = Mem1043[ds_273:0x29DF:word16]
	word16 cx_1049
	fn0800_ACB3(ds_273, Mem1046[ss:sp_1005 - 8:word16], Mem1046[ss:sp_1005 - 6:word16], Mem1046[ss:sp_1005:word16], out cx_1049, out dx_1401, out bx_1402, out es_1403)
	Mem1060[ss:sp_1005:word16] = Mem1046[ds_273:0x29E1:word16]
	Mem1063[ss:sp_1005 - 2:word16] = Mem1060[ds_273:0x29DF:word16]
	// Failed to bind call argument.
	// Please report this issue at https://github.com/uxmal/reko
	word16 stackArg0 = <invalid>
	byte cl_1069
	word16 dx_1070
	word16 sp_1071
	word16 ax_1067 = fn0800_8CAA(Mem1063[ds_273:0x2A03:word16], 0x02, Mem1063[ds_273:0x2A05:word16], stackArg0, out cl_1069, out dx_1070)
	Mem1077[ss:sp_1071 - 2:word16] = dx_1070
	Mem1079[ss:sp_1071 - 4:word16] = ax_1067
	selector ds_1085
	fn0800_409C(DPB(cx_1049, cl_1069, 0), ds_273, Mem1079[ss:sp_1071 - 4:word16], Mem1079[ss:sp_1071 - 2:word16], Mem1079[ss:sp_1071:word16], Mem1079[ss:sp_1071 + 2:word16], out cx_1405, out dx_1406, out di_1407, out es_1408, out ds_1085, out Top_1409)
	word16 ax_1094 = Mem1079[ss:bp_508 - 0x000A:word16]
	word16 dx_1095 = Mem1079[ss:bp_508 - 0x000C:word16]
	Mem1097[ss:bp_508 - 0x001A:word16] = ax_1094 & 0x3FFF
	branch (ax_1094 & 0x3FFF) <u Mem1097[ss:bp_508 - 0x0002:word16] l0800_734D
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_733A:
	branch (ax_1094 & 0x3FFF) >u Mem1097[ss:bp_508 - 0x0002:word16] l0800_7341
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_733C:
	branch dx_1095 <=u Mem1097[ss:bp_508 - 0x0004:word16] l0800_734D
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_7341:
	word16 ax_1106 = Mem1097[ss:bp_508 - 0x000C:word16]
	Mem1108[ss:bp_508 - 0x0002:word16] = Mem1097[ss:bp_508 - 0x001A:word16]
	Mem1109[ss:bp_508 - 0x0004:word16] = ax_1106
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_734D:
	word16 ax_1113 = Mem1112[ss:bp_508 - 0x000A:word16]
	Mem1116[ss:bp_508 - 0x0004:word16] = Mem1112[ss:bp_508 - 0x0004:word16]
	Mem1119[ss:bp_508 - 0x0002:word16] = Mem1116[ss:bp_508 - 0x0002:word16] | ax_1113 & 0xC000
	Mem1127[ss:sp_1071 + 0x0002:word16] = 0x0000
	Mem1132[ss:sp_1071:word16] = Mem1127[ds_1085:0x4E8E:word16]
	Mem1135[ss:sp_1071 - 2:word16] = Mem1132[ds_1085:0x4E8C:word16]
	Mem1138[ss:sp_1071 - 4:word16] = Mem1135[ds_1085:0x29E1:word16]
	Mem1141[ss:sp_1071 - 6:word16] = Mem1138[ds_1085:0x29DF:word16]
	word16 cx_1144
	fn0800_ACB3(ds_1085, Mem1141[ss:sp_1071 - 6:word16], Mem1141[ss:sp_1071 - 4:word16], Mem1141[ss:sp_1071 + 2:word16], out cx_1144, out dx_1410, out bx_1411, out es_1412)
	Mem1155[ss:sp_1071 + 0x0002:word16] = Mem1141[ds_1085:0x29E1:word16]
	Mem1158[ss:sp_1071:word16] = Mem1155[ds_1085:0x29DF:word16]
	Mem1161[ss:sp_1071 - 2:word16] = Mem1158[ss:bp_508 - 0x0002:word16]
	Mem1164[ss:sp_1071 - 4:word16] = Mem1161[ss:bp_508 - 0x0004:word16]
	selector ds_1169
	fn0800_409C(cx_1144, ds_1085, Mem1164[ss:sp_1071 - 4:word16], Mem1164[ss:sp_1071 - 2:word16], Mem1164[ss:sp_1071:word16], Mem1164[ss:sp_1071 + 2:word16], out cx_1413, out dx_1414, out di_1415, out es_1416, out ds_1169, out Top_1417)
	Mem1182[ss:sp_1071 + 0x0002:word16] = 0x0000
	Mem1185[ss:sp_1071:word16] = Mem1182[ss:bp_508 - 0x0006:word16]
	Mem1188[ss:sp_1071 - 2:word16] = Mem1185[ss:bp_508 - 0x0008:word16]
	Mem1191[ss:sp_1071 - 4:word16] = Mem1188[ds_1169:0x29E1:word16]
	Mem1194[ss:sp_1071 - 6:word16] = Mem1191[ds_1169:0x29DF:word16]
	fn0800_ACB3(ds_1169, Mem1194[ss:sp_1071 - 6:word16], Mem1194[ss:sp_1071 - 4:word16], Mem1194[ss:sp_1071 + 2:word16], out cx_1418, out dx_1419, out bx_1420, out es_1421)
	word16 v96_1205 = Mem1194[ds_1169:0x4E8C:word16] + 0x0004
	Mem1206[ds_1169:0x4E8C:word16] = v96_1205
	Mem1210[ds_1169:0x4E8E:word16] = Mem1206[ds_1169:0x4E8E:word16] + (v96_1205 <u 0x0000)
	return
// DataOut:
// DataOut (flags):
// SymbolicIn:

fn0800_6F20_exit:
// DataOut:
// DataOut (flags):
// SymbolicIn:



word16 fn0800_73AC(selector ds, ptr16 & dxOut, ptr16 & dsOut)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  ds:[0..15] ss:[0..15]
// LiveOut: ax ds dx
// Trashed: SCZO ax bp bx cx di ds dx es si Top
// Preserved: sp
fn0800_73AC_entry:
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_73AC:
	selector ds_42
	fn0800_4152(ds, 0x2E77, ds, (DPB(DPB(ax, Mem12[ds:0x2E75:byte], 0), 0x00, 8) << 0x08) + DPB(DPB(dx, Mem12[ds:0x2E76:byte], 0), 0x00, 8), Mem9[ds:0x29DF:word16], Mem0[ds:0x29E1:word16], out cx_160, out ds_42)
	word16 cx_70
	fn0800_ACB3(ds_42, Mem64[ds_42:0x29DF:word16], Mem61[ds_42:0x29E1:word16], 0x0001, out cx_70, out dx_161, out bx_162, out es_163)
	selector ds_95
	fn0800_409C(cx_70, ds_42, Mem87[ds_42:0x2A0F:word16], Mem84[ds_42:0x2A11:word16], Mem81[ds_42:0x29DF:word16], Mem67[ds_42:0x29E1:word16], out cx_164, out dx_165, out di_166, out es_167, out ds_95, out Top_168)
	selector ds_122
	word16 dx_123
	fn0800_75EA(ds_95, Mem113[ds_95:0x2A07:word16], Mem110[ds_95:0x2A09:word16], Mem107[ds_95:0x2A07:word16], Mem90[ds_95:0x2A09:word16], out dx_123, out bp_169, out si_170, out ds_122)
	dxOut = dx_123
	dsOut = ds_122
	return 0x0000
// DataOut:
// DataOut (flags):
// SymbolicIn:

fn0800_73AC_exit:
// DataOut:
// DataOut (flags):
// SymbolicIn:



word16 fn0800_741D(selector ds, ptr16 & dxOut)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  ds:[0..15] ss:[0..15]
// LiveOut: ax dx
// Trashed: SCZO ax bx cx dx es si Top
// Preserved: bp di ds sp
fn0800_741D_entry:
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_741D:
	word16 bp_225 = fp - 2
	word16 sp_11 = fp - 0x0008
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_75C1:
	word16 sp_18 = sp_11 - 2
	Mem20[ss:sp_18:word16] = Mem15[ds:0x29E5:word16]
	Mem23[ss:sp_18 - 2:word16] = Mem20[ds:0x29E3:word16]
	// Failed to bind call argument.
	// Please report this issue at https://github.com/uxmal/reko
	word16 stackArg4 = <invalid>
	word16 dx_27
	word16 ax_24 = fn0800_AD2F(ds, Mem23[ss:sp_18 - 2:segptr32], stackArg4, out cx_537, out dx_27)
	branch dx_27 >=u Mem23[ds:0x2A09:word16] l0800_75D8
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_75D8:
	branch dx_27 != Mem23[ds:0x2A09:word16] l0800_75E3
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_75DA:
	branch ax_24 >=u Mem23[ds:0x2A07:word16] l0800_75E3
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_75E3:
	dxOut = dx_27
	return 0x0000
// DataOut:
// DataOut (flags):
// SymbolicIn:

fn0800_741D_exit:
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_75E0:
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_75D5:
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_7427:
	Mem57[ss:sp_18:word16] = Mem23[ds:0x29E5:word16]
	Mem60[ss:sp_18 - 2:word16] = Mem57[ds:0x29E3:word16]
	// Failed to bind call argument.
	// Please report this issue at https://github.com/uxmal/reko
	word16 stackArg4 = <invalid>
	word16 ax_61 = fn0800_3E9A(ds, Mem60[ss:sp_18 - 2:segptr32], stackArg4, out dx_539, out ds)
	branch ax_61 == 0x0000 l0800_7449
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_7449:
	Mem80[ss:sp_18:word16] = Mem60[ds:0x29E1:word16]
	Mem83[ss:sp_18 - 2:word16] = Mem80[ds:0x29DF:word16]
	Mem86[ss:sp_18 - 4:word16] = Mem83[ds:0x29E5:word16]
	Mem89[ss:sp_18 - 6:word16] = Mem86[ds:0x29E3:word16]
	// Failed to bind call argument.
	// Please report this issue at https://github.com/uxmal/reko
	word16 stackArg4 = <invalid>
	word16 cx_92
	selector ds_97
	Mem105[ss:sp_18 - 0x0004:word16] = fn0800_3DCF(ds, Mem89[ss:sp_18 - 6:segptr32], stackArg4, out cx_92, out dx_541, out di_542, out es_543, out ds_97, out Top_544)
	// Failed to bind call argument.
	// Please report this issue at https://github.com/uxmal/reko
	word16 stackArg6 = <invalid>
	fn0800_4047(cx_92, ds_97, Mem105[ss:sp_18 - 0x0004:byte], Mem105[ss:sp_18 - 0x0002:segptr32], stackArg6, out cx_546, out dx_547, out bx_548, out di_549, out es_550, out ds, out Top_551)
	sp_11 = sp_18 + 0x0002
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_7439:
	branch ax_61 == 0x0001 l0800_7469
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_7469:
	Mem124[ss:sp_18:word16] = Mem60[ds:0x29E1:word16]
	Mem127[ss:sp_18 - 2:word16] = Mem124[ds:0x29DF:word16]
	Mem130[ss:sp_18 - 4:word16] = Mem127[ds:0x29E5:word16]
	Mem133[ss:sp_18 - 6:word16] = Mem130[ds:0x29E3:word16]
	selector ds_137
	word16 dx_138
	word16 cx_135 = fn0800_3E5D(ds, Mem133[ss:sp_18 - 6:word16], Mem133[ss:sp_18 - 4:word16], out dx_138, out di_552, out es_553, out ds_137, out Top_554)
	Mem148[ss:sp_18 - 0x0004:word16] = dx_138
	Mem150[ss:sp_18 - 0x0006:word16] = ax_61
	selector ds_155
	fn0800_409C(cx_135, ds_137, Mem150[ss:sp_18 - 0x0006:word16], Mem150[ss:sp_18 - 0x0004:word16], Mem150[ss:sp_18 - 0x0002:word16], Mem150[ss:sp_18:word16], out cx_555, out dx_556, out di_557, out es_558, out ds_155, out Top_559)
	Mem167[ss:sp_18:word16] = Mem150[ds_155:0x29E5:word16]
	Mem170[ss:sp_18 - 2:word16] = Mem167[ds_155:0x29E3:word16]
	word16 cx_173
	selector ds_175
	word16 ax_171 = fn0800_3FAD(ds_155, Mem170[ss:sp_18 - 2:word16], Mem170[ss:sp_18:word16], out cx_173, out di_560, out ds_175)
	Mem185[ss:bp_225 - 0x0002:word16] = 0x0000
	Mem186[ss:bp_225 - 0x0004:word16] = ax_171
	Mem189[ss:sp_18:word16] = Mem186[ds_175:0x29E1:word16]
	Mem192[ss:sp_18 - 2:word16] = Mem189[ds_175:0x29DF:word16]
	Mem197[ss:sp_18 - 4:word16] = 0x0000
	selector ds_202
	fn0800_401E(cx_173, ds_175, Mem197[ss:sp_18 - 4:word16], Mem197[ss:sp_18 - 2:word16], Mem197[ss:sp_18:word16], out cx_561, out dx_562, out bx_563, out di_564, out es_565, out ds_202, out Top_566)
	Mem214[ss:sp_18:word16] = Mem197[ss:bp_225 - 0x0002:word16]
	Mem217[ss:sp_18 - 2:word16] = Mem214[ss:bp_225 - 0x0004:word16]
	Mem220[ss:sp_18 - 4:word16] = Mem217[ss:bp_225 - 0x0002:word16]
	Mem223[ss:sp_18 - 6:word16] = Mem220[ss:bp_225 - 0x0004:word16]
	selector ds_229
	word16 sp_233
	fn0800_75EA(ds_202, Mem223[ss:sp_18 - 6:word16], Mem223[ss:sp_18 - 4:word16], Mem223[ss:sp_18 - 2:word16], Mem223[ss:sp_18:word16], out dx_567, out bp_225, out si_568, out ds_229)
	Mem242[ss:sp_233 + 0x0006:word16] = 0x0001
	word16 dx_244 = Mem242[ds_229:0x2A03:word16]
	word16 dx_250 = -(dx_244 + 0x0002)
	Mem255[ss:sp_233 + 0x0004:word16] = -(Mem242[ds_229:0x2A05:word16] + (dx_244 <u 0x0002)) - (dx_250 == 0x0000)
	Mem257[ss:sp_233 + 0x0002:word16] = dx_250
	Mem260[ss:sp_233:word16] = Mem257[ds_229:0x29E1:word16]
	Mem263[ss:sp_233 - 2:word16] = Mem260[ds_229:0x29DF:word16]
	word16 cx_266
	word16 ax_264 = fn0800_ACB3(ds_229, Mem263[ss:sp_233 - 2:word16], Mem263[ss:sp_233:word16], Mem263[ss:sp_233 + 6:word16], out cx_266, out dx_569, out bx_570, out es_571)
	Mem277[ss:sp_233 + 0x0006:word16] = Mem263[ds_229:0x29E1:word16]
	Mem280[ss:sp_233 + 0x0004:word16] = Mem277[ds_229:0x29DF:word16]
	Mem283[ss:sp_233 + 0x0002:word16] = Mem280[ds_229:0x2A03:word16]
	fn0800_40BF(ax_264, cx_266, ds_229, Mem283[ss:sp_233 + 0x0002:byte], Mem283[ss:sp_233 + 0x0004:word16], Mem283[ss:sp_233 + 0x0006:word16], out cx_572, out dx_573, out di_574, out ds)
	word16 dx_298 = Mem283[ds:0x2A03:word16]
	branch Mem283[ds:0x2A05:word16] != Mem283[ss:bp_225 - 0x0002:word16] l0800_754A
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_7506:
	branch dx_298 != Mem283[ss:bp_225 - 0x0004:word16] l0800_754A
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_754A:
	Mem307[ss:sp_233 + 0x0006:word16] = 0x0001
	Mem311[ss:sp_233 + 0x0004:word16] = Mem307[ds:0x2A05:word16]
	Mem314[ss:sp_233 + 0x0002:word16] = Mem311[ds:0x2A03:word16]
	Mem317[ss:sp_233:word16] = Mem314[ds:0x29E1:word16]
	Mem320[ss:sp_233 - 2:word16] = Mem317[ds:0x29DF:word16]
	fn0800_ACB3(ds, Mem320[ss:sp_233 - 2:word16], Mem320[ss:sp_233:word16], Mem320[ss:sp_233 + 6:word16], out cx_591, out dx_592, out bx_593, out es_594)
	sp_11 = sp_233 + 0x0008
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_750B:
	Mem334[ss:sp_233 + 0x0006:word16] = 0x0001
	word16 dx_338 = -Mem334[ss:bp_225 - 0x0004:word16]
	Mem343[ss:sp_233 + 0x0004:word16] = -Mem334[ss:bp_225 - 0x0002:word16] - (dx_338 == 0x0000)
	Mem345[ss:sp_233 + 0x0002:word16] = dx_338
	Mem348[ss:sp_233:word16] = Mem345[ds:0x29E5:word16]
	Mem351[ss:sp_233 - 2:word16] = Mem348[ds:0x29E3:word16]
	fn0800_ACB3(ds, Mem351[ss:sp_233 - 2:word16], Mem351[ss:sp_233:word16], Mem351[ss:sp_233 + 6:word16], out cx_595, out dx_596, out bx_597, out es_598)
	Mem365[ss:sp_233 + 0x0006:word16] = Mem351[ss:bp_225 - 0x0002:word16]
	Mem368[ss:sp_233 + 0x0004:word16] = Mem365[ss:bp_225 - 0x0004:word16]
	Mem371[ss:sp_233 + 0x0002:word16] = Mem368[ds:0x29E1:word16]
	Mem374[ss:sp_233:word16] = Mem371[ds:0x29DF:word16]
	Mem377[ss:sp_233 - 2:word16] = Mem374[ds:0x29E5:word16]
	Mem380[ss:sp_233 - 4:word16] = Mem377[ds:0x29E3:word16]
	word16 sp_390
	fn0800_3B0A(Mem380[ss:sp_233 + 4:word16], Mem380[ss:sp_233 + 6:word16], out cx_599, out dx_600, out bp_225, out ds)
	sp_11 = sp_390 + 0x000C
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_743E:
	branch ax_61 != 0x0003 l0800_7446
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_7446:
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_758F:
	Mem402[ss:sp_18:word16] = Mem60[ds:0x29E5:word16]
	Mem405[ss:sp_18 - 2:word16] = Mem402[ds:0x29E3:word16]
	// Failed to bind call argument.
	// Please report this issue at https://github.com/uxmal/reko
	word16 stackArg4 = <invalid>
	word16 dx_409
	ui32 bx_cx_515 = SEQ(Mem405[ds:0x2A09:word16], Mem405[ds:0x2A07:word16]) - SEQ(dx_409, fn0800_AD2F(ds, Mem405[ss:sp_18 - 2:segptr32], stackArg4, out cx_576, out dx_409))
	Mem424[ss:sp_18:word16] = SLICE(bx_cx_515, word16, 16)
	Mem426[ss:sp_18 - 2:word16] = (word16) bx_cx_515
	Mem429[ss:sp_18 - 4:word16] = Mem426[ds:0x29E1:word16]
	Mem432[ss:sp_18 - 6:word16] = Mem429[ds:0x29DF:word16]
	Mem435[ss:sp_18 - 8:word16] = Mem432[ds:0x29E5:word16]
	Mem438[ss:sp_18 - 10:word16] = Mem435[ds:0x29E3:word16]
	word16 sp_448
	fn0800_3B0A(Mem438[ss:sp_18 - 2:word16], Mem438[ss:sp_18:word16], out cx_577, out dx_578, out bp_225, out ds)
	sp_11 = sp_448 + 0x000C
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_7443:
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_7566:
	word16 si_456 = 0x0000
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_7588:
	branch si_456 != 0x0003 l0800_756A
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_756A:
	word16 sp_466 = sp_11 - 2
	Mem468[ss:sp_466:word16] = Mem463[ds:0x29E1:word16]
	Mem471[ss:sp_466 - 2:word16] = Mem468[ds:0x29DF:word16]
	Mem474[ss:sp_466 - 4:word16] = Mem471[ds:0x29E5:word16]
	Mem477[ss:sp_466 - 6:word16] = Mem474[ds:0x29E3:word16]
	// Failed to bind call argument.
	// Please report this issue at https://github.com/uxmal/reko
	word16 stackArg4 = <invalid>
	word16 cx_480
	selector ds_485
	Mem493[ss:sp_466 - 0x0004:word16] = fn0800_3DCF(ds, Mem477[ss:sp_466 - 6:segptr32], stackArg4, out cx_480, out dx_580, out di_581, out es_582, out ds_485, out Top_583)
	// Failed to bind call argument.
	// Please report this issue at https://github.com/uxmal/reko
	word16 stackArg6 = <invalid>
	fn0800_4047(cx_480, ds_485, Mem493[ss:sp_466 - 0x0004:byte], Mem493[ss:sp_466 - 0x0002:segptr32], stackArg6, out cx_585, out dx_586, out bx_587, out di_588, out es_589, out ds, out Top_590)
	si_456 = si_456 + 0x0001
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_758D:
// DataOut:
// DataOut (flags):
// SymbolicIn:



word16 fn0800_75EA(selector ds, word16 wArg02, word16 wArg04, word16 wArg06, word16 wArg08, ptr16 & dxOut, ptr16 & bpOut, ptr16 & siOut, ptr16 & dsOut)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  ds:[0..15] ss:[0..15] Stack +0002:[0..15] Stack +0004:[0..15] Stack +0006:[0..15] Stack +0008:[0..15]
// LiveOut: bp cx ds dx si sp
// Trashed: SCZO ax bp bx cx di ds dx es si sp Top
// Preserved: D
fn0800_75EA_entry:
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_75EA:
	Mem16[ds:0x4680:word16] = wArg04
	Mem17[ds:0x467E:word16] = wArg02
	Mem18[ds:0x2A05:word16] = wArg04
	Mem19[ds:0x2A03:word16] = wArg02
	Mem20[ds:0x4678:word16] = wArg04
	Mem21[ds:0x4676:word16] = wArg02
	Mem28[ds:0x4E86:word16] = wArg08 - (wArg06 <u 0x0012)
	Mem29[ds:0x4E84:word16] = wArg06 - 0x0012
	word16 bp_181 = fp - 2
	word16 sp_10 = fp - 0x001A
	word16 dx_1007 = wArg06 - 0x0012
	branch Mem29[ds:0x4680:word16] >u 0x0000 l0800_7634
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_7626:
	branch Mem29[ds:0x4680:word16] == 0x0000 l0800_762B
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_762B:
	branch wArg02 >u 0x0012 l0800_7634
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_7634:
	Mem36[ds:0x2E4B:word16] = 0x0000
	Mem37[ds:0x2E49:word16] = 0x0000
	Mem38[ds:0x465C:word16] = 0x0000
	Mem39[ds:0x4668:word16] = 0x0000
	Mem40[ds:0x4666:word16] = 0x0000
	Mem41[ds:0x2A05:word16] = 0x0000
	Mem42[ds:0x2A03:word16] = 0x0000
	Mem43[ds:0x2A01:word16] = 0x0000
	Mem44[ds:0x29FF:word16] = 0x0000
	Mem45[ds:0x467C:word16] = 0x0000
	Mem46[ds:0x467A:word16] = 0x0000
	Mem47[ds:0x4674:word16] = 0x0000
	Mem48[ds:0x4672:word16] = 0x0000
	Mem49[ds:0x2E43:word16] = 0x0000
	Mem50[ds:0x2E45:word16] = 0x0000
	Mem51[ds:0x4E82:word16] = 0x0000
	Mem52[ds:0x4E8A:word16] = 0x0000
	Mem53[ds:0x4E88:word16] = 0x0000
	Mem54[ds:0x29F9:word16] = 0x0000
	Mem55[ds:0x29F7:word16] = 0x0000
	// Failed to bind call argument.
	// Please report this issue at https://github.com/uxmal/reko
	// Failed to bind call argument.
	// Please report this issue at https://github.com/uxmal/reko
	word16 stackArg2 = <invalid>
	word16 stackArg4 = <invalid>
	word16 bp_65
	selector ds_69
	word16 dx_70
	word16 sp_73
	word16 ax_64 = fn0800_4311(stackArg2, stackArg4, out dx_70, out bp_65, out si_1052, out di_1053, out ds_69)
	Mem81[ss:bp_65 - 0x0014:word16] = dx_70
	Mem82[ss:bp_65 - 0x0016:word16] = ax_64
	Mem85[ds_69:0x2E73:word16] = dx_70 + 0x0001
	Mem86[ds_69:0x2E71:word16] = 0x0000
	Mem90[ss:sp_73 + 0x0002:word16] = 0x0001
	Mem92[ss:sp_73:word16] = 0x0010
	// Failed to bind call argument.
	// Please report this issue at https://github.com/uxmal/reko
	// Failed to bind call argument.
	// Please report this issue at https://github.com/uxmal/reko
	word16 stackArg2 = <invalid>
	word16 stackArg4 = <invalid>
	word16 bp_94
	selector ds_98
	word16 dx_99
	word16 sp_102
	word16 ax_93 = fn0800_4311(stackArg2, stackArg4, out dx_99, out bp_94, out si_1056, out di_1057, out ds_98)
	Mem110[ss:bp_94 - 0x0010:word16] = dx_99
	Mem111[ss:bp_94 - 0x0012:word16] = ax_93
	Mem114[ds_98:0x2E39:word16] = dx_99 + 0x0001
	Mem115[ds_98:0x2E37:word16] = 0x0000
	Mem119[ss:sp_102 + 0x0002:word16] = 0x0001
	Mem121[ss:sp_102:word16] = 0x0010
	// Failed to bind call argument.
	// Please report this issue at https://github.com/uxmal/reko
	// Failed to bind call argument.
	// Please report this issue at https://github.com/uxmal/reko
	word16 stackArg2 = <invalid>
	word16 stackArg4 = <invalid>
	word16 bp_123
	selector ds_127
	word16 dx_128
	word16 sp_131
	word16 ax_122 = fn0800_4311(stackArg2, stackArg4, out dx_128, out bp_123, out si_1060, out di_1061, out ds_127)
	Mem139[ss:bp_123 - 0x000C:word16] = dx_128
	Mem140[ss:bp_123 - 0x000E:word16] = ax_122
	Mem143[ds_127:0x2E35:word16] = dx_128 + 0x0001
	Mem144[ds_127:0x2E33:word16] = 0x0000
	Mem148[ss:sp_131 + 0x0002:word16] = 0x0001
	Mem150[ss:sp_131:word16] = 0x0010
	// Failed to bind call argument.
	// Please report this issue at https://github.com/uxmal/reko
	// Failed to bind call argument.
	// Please report this issue at https://github.com/uxmal/reko
	word16 stackArg2 = <invalid>
	word16 stackArg4 = <invalid>
	word16 bp_152
	selector ds_156
	word16 dx_157
	word16 sp_160
	word16 ax_151 = fn0800_4311(stackArg2, stackArg4, out dx_157, out bp_152, out si_1064, out di_1065, out ds_156)
	Mem168[ss:bp_152 - 0x0008:word16] = dx_157
	Mem169[ss:bp_152 - 0x000A:word16] = ax_151
	Mem172[ds_156:0x2E41:word16] = dx_157 + 0x0001
	Mem173[ds_156:0x2E3F:word16] = 0x0000
	Mem177[ss:sp_160 + 0x0002:word16] = 0x0001
	Mem179[ss:sp_160:word16] = 0x0010
	// Failed to bind call argument.
	// Please report this issue at https://github.com/uxmal/reko
	// Failed to bind call argument.
	// Please report this issue at https://github.com/uxmal/reko
	word16 stackArg2 = <invalid>
	word16 stackArg4 = <invalid>
	selector ds_185
	word16 dx_186
	word16 sp_189
	word16 ax_180 = fn0800_4311(stackArg2, stackArg4, out dx_186, out bp_181, out si_1068, out di_1069, out ds_185)
	Mem197[ss:bp_181 - 0x0004:word16] = dx_186
	Mem198[ss:bp_181 - 0x0006:word16] = ax_180
	Mem201[ds_185:0x2E3D:word16] = dx_186 + 0x0001
	Mem202[ds_185:0x2E3B:word16] = 0x0000
	fn0800_87F8(ds_185)
	Mem213[ss:sp_189 + 0x0002:word16] = Mem202[ds_185:0x29E5:word16]
	Mem216[ss:sp_189:word16] = Mem213[ds_185:0x29E3:word16]
	// Failed to bind call argument.
	// Please report this issue at https://github.com/uxmal/reko
	word16 stackArg4 = <invalid>
	word16 dx_220
	word16 ax_217 = fn0800_AD2F(ds_185, Mem216[ss:sp_189:segptr32], stackArg4, out cx_1071, out dx_220)
	Mem228[ds_185:0x4664:word16] = dx_220
	Mem229[ds_185:0x4662:word16] = ax_217
	Mem232[ss:sp_189 + 0x0002:word16] = Mem229[ds_185:0x29E1:word16]
	Mem235[ss:sp_189:word16] = Mem232[ds_185:0x29DF:word16]
	// Failed to bind call argument.
	// Please report this issue at https://github.com/uxmal/reko
	word16 stackArg4 = <invalid>
	word16 cx_238
	word16 dx_239
	word16 ax_236 = fn0800_AD2F(ds_185, Mem235[ss:sp_189:segptr32], stackArg4, out cx_238, out dx_239)
	Mem246[ds_185:0x4660:word16] = dx_239
	Mem247[ds_185:0x465E:word16] = ax_236
	Mem250[ss:sp_189 + 0x0002:word16] = Mem247[ds_185:0x29E1:word16]
	Mem253[ss:sp_189:word16] = Mem250[ds_185:0x29DF:word16]
	int32 dx_ax_255 = (int32) Mem253[ds_185:0x2A21:word16]
	word16 ax_256 = (word16) dx_ax_255
	Mem264[ss:sp_189 - 2:word16] = SLICE(dx_ax_255, word16, 16) + 0x524E + (ax_256 <u 0x4300)
	Mem266[ss:sp_189 - 4:word16] = ax_256 + 0x4300
	word16 cx_269
	selector ds_271
	fn0800_409C(cx_238, ds_185, Mem266[ss:sp_189 - 4:word16], Mem266[ss:sp_189 - 2:word16], Mem266[ss:sp_189:word16], Mem266[ss:sp_189 + 2:word16], out cx_269, out dx_1073, out di_1074, out es_1075, out ds_271, out Top_1076)
	Mem283[ss:sp_189 + 0x0002:word16] = Mem266[ds_271:0x29E1:word16]
	Mem286[ss:sp_189:word16] = Mem283[ds_271:0x29DF:word16]
	Mem289[ss:sp_189 - 2:word16] = Mem286[ds_271:0x4680:word16]
	Mem292[ss:sp_189 - 4:word16] = Mem289[ds_271:0x467E:word16]
	word16 cx_295
	selector ds_297
	fn0800_409C(cx_269, ds_271, Mem292[ss:sp_189 - 4:word16], Mem292[ss:sp_189 - 2:word16], Mem292[ss:sp_189:word16], Mem292[ss:sp_189 + 2:word16], out cx_295, out dx_1077, out di_1078, out es_1079, out ds_297, out Top_1080)
	Mem308[ss:sp_189 + 0x0002:word16] = Mem292[ds_297:0x29E1:word16]
	Mem311[ss:sp_189:word16] = Mem308[ds_297:0x29DF:word16]
	Mem316[ss:sp_189 - 2:word16] = 0x0000
	Mem318[ss:sp_189 - 4:word16] = 0x0000
	word16 cx_321
	selector ds_323
	fn0800_409C(cx_295, ds_297, Mem318[ss:sp_189 - 4:word16], Mem318[ss:sp_189 - 2:word16], Mem318[ss:sp_189:word16], Mem318[ss:sp_189 + 2:word16], out cx_321, out dx_1081, out di_1082, out es_1083, out ds_323, out Top_1084)
	Mem334[ss:sp_189 + 0x0002:word16] = Mem318[ds_323:0x29E1:word16]
	Mem337[ss:sp_189:word16] = Mem334[ds_323:0x29DF:word16]
	Mem342[ss:sp_189 - 2:word16] = 0x0000
	word16 cx_345
	selector ds_347
	fn0800_401E(cx_321, ds_323, Mem342[ss:sp_189 - 2:word16], Mem342[ss:sp_189:word16], Mem342[ss:sp_189 + 2:word16], out cx_345, out dx_1085, out bx_1086, out di_1087, out es_1088, out ds_347, out Top_1089)
	Mem358[ss:sp_189 + 0x0002:word16] = Mem342[ds_347:0x29E1:word16]
	Mem361[ss:sp_189:word16] = Mem358[ds_347:0x29DF:word16]
	Mem366[ss:sp_189 - 2:word16] = 0x0000
	word16 cx_369
	selector ds_371
	fn0800_401E(cx_345, ds_347, Mem366[ss:sp_189 - 2:word16], Mem366[ss:sp_189:word16], Mem366[ss:sp_189 + 2:word16], out cx_369, out dx_1090, out bx_1091, out di_1092, out es_1093, out ds_371, out Top_1094)
	Mem382[ss:sp_189 + 0x0002:word16] = Mem366[ds_371:0x29E1:word16]
	Mem385[ss:sp_189:word16] = Mem382[ds_371:0x29DF:word16]
	Mem390[ss:sp_189 - 2:word16] = 0x0000
	word16 bx_392
	word16 cx_393
	word16 dx_396
	selector ds_395
	fn0800_401E(cx_369, ds_371, Mem390[ss:sp_189 - 2:word16], Mem390[ss:sp_189:word16], Mem390[ss:sp_189 + 2:word16], out cx_393, out dx_396, out bx_392, out di_1095, out es_1096, out ds_395, out Top_1097)
	Mem406[ss:sp_189 + 0x0002:word16] = ds_395
	Mem409[ss:sp_189:word16] = 0x2240
	fn0800_B2EF(cx_393, dx_396, bx_392, ds_395, Mem409[ss:sp_189:word16], Mem409[ss:sp_189 + 2:word16], out si_1098, out di_1099)
	Mem420[ss:bp_181 - 0x0002:word16] = Mem409[ds_395:0x2E4F:word16]
	Mem423[ss:sp_189 + 0x0002:word16] = 0x0001
	word16 ax_421 = 0x0001
	branch Mem423[ds_395:0x2A1F:word16] == 0x0000 l0800_7808
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_7808:
	ax_421 = 0x0000
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_7806:
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_780A:
	Mem433[ss:sp_189:word16] = ax_421
	word16 cx_438 = fn0800_8465(cx_393, ds_395, Mem433[ss:sp_189:word16], Mem433[ss:sp_189 + 2:word16])
	Mem446[ss:sp_189 + 0x0002:word16] = 0x0001
	word16 ax_444 = 0x0001
	branch Mem446[ds_395:0x2E4F:word16] == 0x0000 l0800_781E
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_781E:
	ax_444 = 0x0000
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_781C:
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_7820:
	Mem456[ss:sp_189:word16] = ax_444
	word16 cx_461 = fn0800_8465(cx_438, ds_395, Mem456[ss:sp_189:word16], Mem456[ss:sp_189 + 2:word16])
	branch Mem456[ds_395:0x2A23:word16] == 0x0001 l0800_7843
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_782E:
	branch Mem456[ds_395:0x2E4F:word16] == 0x0000 l0800_7843
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_7835:
	Mem473[ss:sp_189 + 0x0002:word16] = 0x0010
	Mem476[ss:sp_189:word16] = Mem473[ds_395:0x2E4F:word16]
	cx_461 = fn0800_8465(cx_461, ds_395, Mem476[ss:sp_189:word16], Mem476[ss:sp_189 + 2:word16])
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_7843:
	word16 ax_488 = Mem487[ds_395:0x2A21:word16]
	branch ax_488 == 0x0001 l0800_7852
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_7852:
	ax_488 = (word16) fn0800_7A02(cx_461, ds_395, out cx_461, out ds_395)
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_784B:
	branch ax_488 == 0x0002 l0800_7857
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_7857:
	ax_488 = (word16) fn0800_7C78(cx_461, ds_395, out cx_461, out ds_395)
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_7850:
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_785A:
	word16 si_519 = 0x4682
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_7870:
	branch Mem523[ds_395:0x4E82:word16] != 0x0000 l0800_785E
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_785E:
	Mem536[ss:sp_189 + 0x0002:word16] = DPB(ax_488, Mem523[ds_395:si_519 + 0x0000:byte], 0)
	ax_488 = (word16) fn0800_8624(cx_461, ds_395, Mem536[ss:sp_189 + 0x0002:byte], out cx_461, out dx_1100, out di_1101, out ds_395)
	Mem553[ds_395:0x4E82:word16] = Mem536[ds_395:0x4E82:word16] - 0x0001
	si_519 = si_519 + 0x0001
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_7877:
	Mem561[ds_395:0x2E4F:word16] = Mem523[ss:bp_181 - 0x0002:word16]
	ui32 ax_dx_974 = SEQ(Mem561[ds_395:0x4680:word16], Mem561[ds_395:0x467E:word16]) - SEQ(Mem561[ds_395:0x2A05:word16], Mem561[ds_395:0x2A03:word16])
	word16 dx_564 = (word16) ax_dx_974
	word16 ax_567 = SLICE(ax_dx_974, word16, 16)
	branch ax_567 >u Mem561[ds_395:0x4E8A:word16] l0800_78B3
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_7892:
	branch ax_567 <u Mem561[ds_395:0x4E8A:word16] l0800_789A
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_7894:
	branch dx_564 >=u Mem561[ds_395:0x4E88:word16] l0800_78B3
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_78B3:
	Mem574[ds_395:0x4E8A:word16] = 0x0000
	Mem575[ds_395:0x4E88:word16] = 0x0000
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_789A:
	ui32 ax_dx_976 = SEQ(Mem561[ds_395:0x4680:word16], Mem561[ds_395:0x467E:word16]) - SEQ(Mem561[ds_395:0x2A05:word16], Mem561[ds_395:0x2A03:word16])
	Mem585[ds_395:0x4E88:word16] = v34_584
	ui32 v35_v34_978 = SEQ(Mem585[ds_395:0x4E8A:word16], Mem561[ds_395:0x4E88:word16]) - ax_dx_976
	Mem589[ds_395:0x4E8A:word16] = SLICE(v35_v34_978, word16, 16)
	word16 v34_584 = (word16) v35_v34_978
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_78BF:
	branch Mem592[ds_395:0x2A21:word16] != 0x0002 l0800_78D0
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_78C6:
	word16 v39_595 = Mem592[ds_395:0x4E88:word16] + 0x0002
	Mem596[ds_395:0x4E88:word16] = v39_595
	Mem600[ds_395:0x4E8A:word16] = Mem596[ds_395:0x4E8A:word16] + (v39_595 <u 0x0000)
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_78D0:
	Mem614[ss:sp_189 + 0x0002:word16] = Mem603[ds_395:0x29E1:word16]
	Mem617[ss:sp_189:word16] = Mem614[ds_395:0x29DF:word16]
	// Failed to bind call argument.
	// Please report this issue at https://github.com/uxmal/reko
	word16 stackArg4 = <invalid>
	word16 dx_621
	int32 dx_ax_980 = SEQ(dx_621, fn0800_AD2F(ds_395, Mem617[ss:sp_189:segptr32], stackArg4, out cx_1103, out dx_621)) - SEQ(Mem617[ds_395:0x4660:word16], Mem617[ds_395:0x465E:word16])
	Mem632[ds_395:0x2A05:word16] = SLICE(dx_ax_980, word16, 16)
	Mem633[ds_395:0x2A03:word16] = (word16) dx_ax_980
	Mem636[ss:sp_189 + 0x0002:word16] = 0x0000
	word16 dx_638 = Mem636[ds_395:0x465E:word16]
	Mem645[ss:sp_189:word16] = Mem636[ds_395:0x4660:word16] + (dx_638 <u 0x0008)
	Mem647[ss:sp_189 - 0x0002:word16] = dx_638 + 0x0008
	Mem650[ss:sp_189 - 0x0004:word16] = Mem647[ds_395:0x29E1:word16]
	Mem653[ss:sp_189 - 0x0006:word16] = Mem650[ds_395:0x29DF:word16]
	word16 cx_656
	fn0800_ACB3(ds_395, Mem653[ss:sp_189 - 0x0006:word16], Mem653[ss:sp_189 - 0x0004:word16], Mem653[ss:sp_189 + 0x0002:word16], out cx_656, out dx_1104, out bx_1105, out es_1106)
	Mem666[ss:sp_189 + 0x0002:word16] = Mem653[ds_395:0x29E1:word16]
	Mem669[ss:sp_189:word16] = Mem666[ds_395:0x29DF:word16]
	word16 dx_671 = Mem669[ds_395:0x2A03:word16]
	Mem678[ss:sp_189 - 0x0002:word16] = Mem669[ds_395:0x2A05:word16] - (dx_671 <u 0x0012)
	Mem680[ss:sp_189 - 0x0004:word16] = dx_671 - 0x0012
	word16 cx_683
	selector ds_685
	fn0800_409C(cx_656, ds_395, Mem680[ss:sp_189 - 0x0004:word16], Mem680[ss:sp_189 - 0x0002:word16], Mem680[ss:sp_189:word16], Mem680[ss:sp_189 + 0x0002:word16], out cx_683, out dx_1107, out di_1108, out es_1109, out ds_685, out Top_1110)
	Mem697[ss:sp_189 + 0x0002:word16] = Mem680[ds_685:0x29E1:word16]
	Mem700[ss:sp_189:word16] = Mem697[ds_685:0x29DF:word16]
	Mem703[ss:sp_189 - 0x0002:word16] = Mem700[ds_685:0x2E4B:word16]
	word16 cx_706
	selector ds_708
	fn0800_401E(cx_683, ds_685, Mem703[ss:sp_189 - 0x0002:word16], Mem703[ss:sp_189:word16], Mem703[ss:sp_189 + 0x0002:word16], out cx_706, out dx_1111, out bx_1112, out di_1113, out es_1114, out ds_708, out Top_1115)
	Mem720[ss:sp_189 + 0x0002:word16] = Mem703[ds_708:0x29E1:word16]
	Mem723[ss:sp_189:word16] = Mem720[ds_708:0x29DF:word16]
	Mem726[ss:sp_189 - 0x0002:word16] = Mem723[ds_708:0x2E49:word16]
	word16 cx_729
	selector ds_731
	word16 ax_727 = fn0800_401E(cx_706, ds_708, Mem726[ss:sp_189 - 0x0002:word16], Mem726[ss:sp_189:word16], Mem726[ss:sp_189 + 0x0002:word16], out cx_729, out dx_1116, out bx_1117, out di_1118, out es_1119, out ds_731, out Top_1120)
	Mem743[ss:sp_189 + 0x0002:word16] = Mem726[ds_731:0x29E1:word16]
	Mem746[ss:sp_189:word16] = Mem743[ds_731:0x29DF:word16]
	Mem750[ss:sp_189 - 0x0002:word16] = DPB(ax_727, Mem746[ds_731:0x4E88:byte], 0)
	// Failed to bind call argument.
	// Please report this issue at https://github.com/uxmal/reko
	word16 stackArg6 = <invalid>
	word16 cx_753
	selector ds_758
	word16 ax_751 = fn0800_4047(cx_729, ds_731, Mem750[ss:sp_189 - 0x0002:byte], Mem750[ss:sp_189:segptr32], stackArg6, out cx_753, out dx_1122, out bx_1123, out di_1124, out es_1125, out ds_758, out Top_1126)
	Mem767[ss:sp_189 + 0x0002:word16] = Mem750[ds_758:0x29E1:word16]
	Mem770[ss:sp_189:word16] = Mem767[ds_758:0x29DF:word16]
	Mem774[ss:sp_189 - 0x0002:word16] = DPB(ax_751, Mem770[ds_758:0x29F7:byte], 0)
	// Failed to bind call argument.
	// Please report this issue at https://github.com/uxmal/reko
	word16 stackArg6 = <invalid>
	selector ds_782
	fn0800_4047(cx_753, ds_758, Mem774[ss:sp_189 - 0x0002:byte], Mem774[ss:sp_189:segptr32], stackArg6, out cx_1128, out dx_1129, out bx_1130, out di_1131, out es_1132, out ds_782, out Top_1133)
	Mem790[ss:sp_189 + 0x0002:word16] = 0x0000
	ui32 ax_dx_982 = SEQ(Mem790[ds_782:0x4660:word16], Mem790[ds_782:0x465E:word16]) + SEQ(Mem790[ds_782:0x2A05:word16], Mem790[ds_782:0x2A03:word16])
	Mem799[ss:sp_189:word16] = SLICE(ax_dx_982, word16, 16)
	Mem801[ss:sp_189 - 0x0002:word16] = (word16) ax_dx_982
	Mem804[ss:sp_189 - 0x0004:word16] = Mem801[ds_782:0x29E1:word16]
	Mem807[ss:sp_189 - 0x0006:word16] = Mem804[ds_782:0x29DF:word16]
	fn0800_ACB3(ds_782, Mem807[ss:sp_189 - 0x0006:word16], Mem807[ss:sp_189 - 0x0004:word16], Mem807[ss:sp_189 + 0x0002:word16], out cx_1134, out dx_1135, out bx_1136, out es_1137)
	Mem820[ss:sp_189 + 0x0002:word16] = 0x0000
	ui32 ax_dx_984 = SEQ(Mem820[ds_782:0x4664:word16], Mem820[ds_782:0x4662:word16]) + SEQ(Mem820[ds_782:0x4680:word16], Mem820[ds_782:0x467E:word16])
	Mem829[ss:sp_189:word16] = SLICE(ax_dx_984, word16, 16)
	Mem831[ss:sp_189 - 0x0002:word16] = (word16) ax_dx_984
	Mem834[ss:sp_189 - 0x0004:word16] = Mem831[ds_782:0x29E5:word16]
	Mem837[ss:sp_189 - 0x0006:word16] = Mem834[ds_782:0x29E3:word16]
	fn0800_ACB3(ds_782, Mem837[ss:sp_189 - 0x0006:word16], Mem837[ss:sp_189 - 0x0004:word16], Mem837[ss:sp_189 + 0x0002:word16], out cx_1138, out dx_1139, out bx_1140, out es_1141)
	Mem855[ss:sp_189 + 0x0002:word16] = Mem837[ss:bp_181 - 0x0014:word16]
	Mem858[ss:sp_189:word16] = Mem855[ss:bp_181 - 0x0016:word16]
	// Failed to bind call argument.
	// Please report this issue at https://github.com/uxmal/reko
	word16 stackArg2 = <invalid>
	selector ds_862
	fn0800_4346(ds_782, stackArg2, Mem858[ss:sp_189 + 0x0002:word16], out cx_1143, out dx_1144, out bx_1145, out ds_862)
	Mem873[ss:sp_189 + 0x0002:word16] = Mem858[ss:bp_181 - 0x0010:word16]
	Mem876[ss:sp_189:word16] = Mem873[ss:bp_181 - 0x0012:word16]
	// Failed to bind call argument.
	// Please report this issue at https://github.com/uxmal/reko
	word16 stackArg2 = <invalid>
	selector ds_880
	fn0800_4346(ds_862, stackArg2, Mem876[ss:sp_189 + 0x0002:word16], out cx_1147, out dx_1148, out bx_1149, out ds_880)
	Mem891[ss:sp_189 + 0x0002:word16] = Mem876[ss:bp_181 - 0x000C:word16]
	Mem894[ss:sp_189:word16] = Mem891[ss:bp_181 - 0x000E:word16]
	// Failed to bind call argument.
	// Please report this issue at https://github.com/uxmal/reko
	word16 stackArg2 = <invalid>
	selector ds_898
	fn0800_4346(ds_880, stackArg2, Mem894[ss:sp_189 + 0x0002:word16], out cx_1151, out dx_1152, out bx_1153, out ds_898)
	Mem909[ss:sp_189 + 0x0002:word16] = Mem894[ss:bp_181 - 0x0008:word16]
	Mem912[ss:sp_189:word16] = Mem909[ss:bp_181 - 0x000A:word16]
	// Failed to bind call argument.
	// Please report this issue at https://github.com/uxmal/reko
	word16 stackArg2 = <invalid>
	selector ds_916
	fn0800_4346(ds_898, stackArg2, Mem912[ss:sp_189 + 0x0002:word16], out cx_1155, out dx_1156, out bx_1157, out ds_916)
	Mem927[ss:sp_189 + 0x0002:word16] = Mem912[ss:bp_181 - 0x0004:word16]
	Mem930[ss:sp_189:word16] = Mem927[ss:bp_181 - 0x0006:word16]
	// Failed to bind call argument.
	// Please report this issue at https://github.com/uxmal/reko
	word16 stackArg2 = <invalid>
	word16 bx_932
	fn0800_4346(ds_916, stackArg2, Mem930[ss:sp_189 + 0x0002:word16], out cx, out dx_1007, out bx_932, out ds)
	Mem944[ss:sp_189 + 0x0002:word16] = ds
	Mem947[ss:sp_189:word16] = 0x223C
	fn0800_B2EF(cx, dx_1007, bx_932, ds, Mem947[ss:sp_189:word16], Mem947[ss:sp_189 + 0x0002:word16], out si_1159, out di_1160)
	sp_10 = sp_189 + 0x0004
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_7631:
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_7628:
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_79FD:
	word16 si_961 = Mem960[ss:sp_10:word16]
	word16 bp_964 = Mem960[ss:bp_181:word16]
	dxOut = dx_1007
	bpOut = bp_964
	siOut = si_961
	dsOut = ds
	return cx
// DataOut:
// DataOut (flags):
// SymbolicIn:

fn0800_75EA_exit:
// DataOut:
// DataOut (flags):
// SymbolicIn:



byte fn0800_7A02(byte ch, selector ds, ptr16 & cxOut, ptr16 & dsOut)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  cx:[8..15] ds:[0..15] ss:[0..15]
// LiveOut: ax cx ds
// Trashed: SCZO ax bx cx di ds dx es Top
// Preserved: bp si sp
fn0800_7A02_entry:
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_7A02:
	word16 sp_11 = fp - 0x0008
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_7C1A:
	word16 ax_21 = Mem20[ds:0x467C:word16]
	word16 dx_22 = Mem20[ds:0x467A:word16]
	branch ax_21 >=u Mem20[ds:0x4680:word16] l0800_7C2A
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_7C2A:
	branch ax_21 != Mem20[ds:0x4680:word16] l0800_7C35
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_7C2C:
	branch dx_22 >=u Mem20[ds:0x467E:word16] l0800_7C35
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_7C35:
	byte cl_31 = 0x10 - Mem20[ds:0x2E45:byte]
	Mem33[ds:0x2E43:word16] = Mem20[ds:0x2E43:word16] >>u cl_31
	word16 cx_55 = DPB(cx, cl_31, 0)
	branch Mem33[ds:0x2E45:word16] != 0x0000 l0800_7C4D
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_7C46:
	branch Mem33[ds:0x4E82:word16] == 0x0000 l0800_7C57
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_7C4D:
	word16 sp_44 = sp_11 - 2
	Mem51[ss:sp_44:word16] = DPB(ax_21, Mem33[ds:0x2E43:byte], 0)
	ax_21 = (word16) fn0800_8624(cx_55, ds, Mem51[ss:sp_44:byte], out cx_55, out dx_57, out di_61, out ds)
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_7C57:
	branch Mem71[ds:0x2E45:word16] >u 0x0008 l0800_7C65
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_7C5E:
	branch Mem71[ds:0x4E82:word16] == 0x0000 l0800_7C73
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_7C65:
	word16 sp_84 = sp_11 - 2
	Mem87[ss:sp_84:word16] = Mem71[ds:0x2E43:word16] >>u 0x08
	ax_21 = (word16) fn0800_8624(DPB(cx_55, 0x08, 0), ds, Mem87[ss:sp_84:byte], out cx_55, out dx_92, out di_96, out ds)
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_7C73:
	cxOut = cx_55
	dsOut = ds
	return (byte) ax_21
// DataOut:
// DataOut (flags):
// SymbolicIn:

fn0800_7A02_exit:
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_7C32:
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_7C27:
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_7A19:
	word16 sp_120 = sp_11 - 2
	Mem122[ss:sp_120:word16] = 0x0010
	Mem125[ss:sp_120 - 2:word16] = ds
	Mem128[ss:sp_120 - 4:word16] = 0x284F
	fn0800_43D4(Mem128[ss:sp_120 - 4:word16], Mem128[ss:sp_120 - 2:selector], Mem128[ss:sp_120:word16])
	Mem141[ss:sp_120:word16] = 0x0010
	Mem143[ss:sp_120 - 2:word16] = ds
	Mem146[ss:sp_120 - 4:word16] = 0x278F
	fn0800_43D4(Mem146[ss:sp_120 - 4:word16], Mem146[ss:sp_120 - 2:selector], Mem146[ss:sp_120:word16])
	Mem159[ss:sp_120:word16] = 0x0010
	Mem161[ss:sp_120 - 2:word16] = ds
	Mem164[ss:sp_120 - 4:word16] = 0x290F
	fn0800_43D4(Mem164[ss:sp_120 - 4:word16], Mem164[ss:sp_120 - 2:selector], Mem164[ss:sp_120:word16])
	word16 sp_185
	word16 bp_184 = fn0800_7FDC(ds, out ds)
	Mem194[ss:sp_185 - 2:word16] = 0x0000
	Mem197[ss:sp_185 - 4:word16] = Mem194[ss:bp_184 - 0x0002:word16]
	Mem200[ss:sp_185 - 6:word16] = Mem197[ss:bp_184 - 0x0004:word16]
	Mem203[ss:sp_185 - 8:word16] = Mem200[ds:0x29E5:word16]
	Mem206[ss:sp_185 - 10:word16] = Mem203[ds:0x29E3:word16]
	fn0800_ACB3(ds, Mem206[ss:sp_185 - 10:word16], Mem206[ss:sp_185 - 8:word16], Mem206[ss:sp_185 - 2:word16], out cx_773, out dx_774, out bx_775, out es_776)
	Mem220[ss:sp_185 - 2:word16] = 0x0010
	Mem222[ss:sp_185 - 4:word16] = ds
	Mem225[ss:sp_185 - 6:word16] = 0x290F
	// Failed to bind call argument.
	// Please report this issue at https://github.com/uxmal/reko
	selector stackArg4 = <invalid>
	word16 sp_234
	fn0800_441C(ds, Mem225[ss:sp_185 - 6:word16], stackArg4, Mem225[ss:sp_185 - 2:word16], out bp_778)
	Mem243[ss:sp_234 + 0x0004:word16] = 0x0010
	Mem245[ss:sp_234 + 0x0002:word16] = ds
	Mem248[ss:sp_234:word16] = 0x284F
	// Failed to bind call argument.
	// Please report this issue at https://github.com/uxmal/reko
	selector stackArg4 = <invalid>
	word16 sp_257
	fn0800_441C(ds, Mem248[ss:sp_234:word16], stackArg4, Mem248[ss:sp_234 + 4:word16], out bp_780)
	Mem266[ss:sp_257 + 0x0004:word16] = 0x0010
	Mem268[ss:sp_257 + 0x0002:word16] = ds
	Mem271[ss:sp_257:word16] = 0x278F
	// Failed to bind call argument.
	// Please report this issue at https://github.com/uxmal/reko
	selector stackArg4 = <invalid>
	word16 bp_277
	word16 sp_280
	word16 cx_274 = fn0800_441C(ds, Mem271[ss:sp_257:word16], stackArg4, Mem271[ss:sp_257 + 4:word16], out bp_277)
	Mem289[ss:sp_280 + 0x0004:word16] = 0x0010
	Mem291[ss:sp_280 + 0x0002:word16] = ds
	Mem294[ss:sp_280:word16] = 0x290F
	// Failed to bind call argument.
	// Please report this issue at https://github.com/uxmal/reko
	selector stackArg4 = <invalid>
	fn0800_83A1(cx_274, ds, Mem294[ss:sp_280:segptr32], stackArg4, Mem294[ss:sp_280 + 4:word16])
	Mem307[ss:sp_280 + 0x0004:word16] = 0x0010
	Mem309[ss:sp_280 + 0x0002:word16] = ds
	Mem312[ss:sp_280:word16] = 0x284F
	// Failed to bind call argument.
	// Please report this issue at https://github.com/uxmal/reko
	selector stackArg4 = <invalid>
	fn0800_83A1(cx_274, ds, Mem312[ss:sp_280:segptr32], stackArg4, Mem312[ss:sp_280 + 4:word16])
	Mem325[ss:sp_280 + 0x0004:word16] = 0x0010
	Mem327[ss:sp_280 + 0x0002:word16] = ds
	Mem330[ss:sp_280:word16] = 0x278F
	// Failed to bind call argument.
	// Please report this issue at https://github.com/uxmal/reko
	selector stackArg4 = <invalid>
	fn0800_83A1(cx_274, ds, Mem330[ss:sp_280:segptr32], stackArg4, Mem330[ss:sp_280 + 4:word16])
	Mem343[ss:sp_280 + 0x0004:word16] = 0x0010
	Mem346[ss:sp_280 + 0x0002:word16] = Mem343[ds:0x466A:word16]
	fn0800_8489(cx_274, ds, Mem346[ss:sp_280 + 0x0002:word16], Mem346[ss:sp_280 + 0x0004:word16])
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_7BC0:
	word16 ax_356 = Mem355[ds:0x466A:word16]
	word16 dx_357 = Mem355[ds:0x466C:word16]
	word16 v18_358 = Mem355[ds:0x466A:word16] - 0x0001
	Mem359[ds:0x466A:word16] = v18_358
	Mem363[ds:0x466C:word16] = Mem359[ds:0x466C:word16] - (v18_358 <u 0x0000)
	word16 ax_364 = ax_356 | dx_357
	branch ax_364 == 0x0000 l0800_7BD8
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_7BD8:
	branch Mem363[ds:0x2E45:word16] != 0x0000 l0800_7BFC
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_7BDF:
	word16 si_370 = 0x4682
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_7BF5:
	branch Mem374[ds:0x4E82:word16] != 0x0000 l0800_7BE3
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_7BE3:
	Mem387[ss:sp_280 + 0x0004:word16] = DPB(ax_364, Mem374[ds:si_370 + 0x0000:byte], 0)
	ax_364 = (word16) fn0800_8624(cx_274, ds, Mem387[ss:sp_280 + 0x0004:byte], out cx_274, out dx_788, out di_789, out ds)
	Mem404[ds:0x4E82:word16] = Mem387[ds:0x4E82:word16] - 0x0001
	si_370 = si_370 + 0x0001
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_7BFC:
	word16 v29_408 = Mem407[ds:0x29F7:word16] + 0x0001
	Mem409[ds:0x29F7:word16] = v29_408
	Mem413[ds:0x29F9:word16] = Mem409[ds:0x29F9:word16] + (v29_408 <u 0x0000)
	Mem421[ss:sp_280 + 0x0004:word16] = Mem413[ds:0x29E5:word16]
	Mem424[ss:sp_280 + 0x0002:word16] = Mem421[ds:0x29E3:word16]
	// Failed to bind call argument.
	// Please report this issue at https://github.com/uxmal/reko
	word16 stackArg4 = <invalid>
	word16 dx_428
	word16 ax_425 = fn0800_AD2F(ds, Mem424[ss:sp_280 + 0x0002:segptr32], stackArg4, out cx, out dx_428)
	Mem439[ss:bp_277 - 0x0002:word16] = dx_428
	Mem440[ss:bp_277 - 0x0004:word16] = ax_425
	sp_11 = sp_280 + 0x0006
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_7BD5:
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_7ACB:
	Mem443[ss:sp_280 + 0x0004:word16] = Mem363[ds:0x29DD:word16]
	Mem446[ss:sp_280 + 0x0002:word16] = Mem443[ds:0x29DB:word16]
	word16 cx_449
	word16 ax_447 = fn0800_3E27(ds, Mem446[ss:sp_280 + 0x0002:word16], Mem446[ss:sp_280 + 0x0004:word16], out cx_449, out dx_785, out di_450, out es_786, out ds, out Top_454)
	Mem460[ds:0x2E47:word16] = ax_447
	word16 v25_461 = Mem460[ds:0x467A:word16] + ax_447
	Mem462[ds:0x467A:word16] = v25_461
	Mem466[ds:0x467C:word16] = Mem462[ds:0x467C:word16] + (v25_461 <u 0x0000)
	Mem469[ss:sp_280 + 0x0004:word16] = ds
	Mem472[ss:sp_280 + 0x0002:word16] = 0x290F
	Mem475[ss:sp_280:word16] = Mem472[ds:0x2E47:word16]
	cx_274 = fn0800_8407(cx_449, ds, Mem475[ss:sp_280:word16], Mem475[ss:sp_280 + 0x0002:segptr32])
	branch Mem475[ds:0x2E47:word16] == 0x0000 l0800_7B56
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_7AFB:
	branch Mem475[ds:0x2E45:word16] == 0x0000 l0800_7B32
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_7B32:
	word16 ax_492 = Mem491[ds:0x2E47:word16]
	Mem494[ds:0x2E47:word16] = Mem491[ds:0x2E47:word16] - 0x0001
	branch ax_492 != 0x0000 l0800_7B24
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_7B24:
	word16 cx_502
	selector ds_504
	word16 ax_500 = fn0800_8359(ds, out cx_502, out dx_799, out ds_504)
	Mem519[ss:sp_280 + 0x0004:word16] = DPB(ax_500, (byte) ax_500 ^ Mem494[ds_504:0x2E4F:byte], 0)
	fn0800_8624(cx_502, ds_504, Mem519[ss:sp_280 + 0x0004:byte], out cx_274, out dx_800, out di_801, out ds)
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_7B02:
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_7B17:
	selector ds_548
	word16 ax_536 = Mem535[ds:0x2E47:word16]
	Mem538[ds:0x2E47:word16] = Mem535[ds:0x2E47:word16] - 0x0001
	branch ax_536 != 0x0000 l0800_7B04
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_7B04:
	Mem560[ds_548:Mem538[ds_548:0x4E82:word16] + 0x4682:byte] = (byte) fn0800_8359(ds, out cx_274, out dx_797, out ds_548) ^ Mem538[ds_548:0x2E4F:byte]
	Mem562[ds_548:0x4E82:word16] = Mem560[ds_548:0x4E82:word16] + 0x0001
	ds = ds_548
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_7B22:
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_7B3D:
	branch (Mem565[ds:0x2E4F:word16] & 0x0001) == 0x0000 l0800_7B52
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_7B52:
	Mem570[ds:0x2E4F:word16] = Mem565[ds:0x2E4F:word16] >>u 0x0001
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_7B45:
	Mem577[ds:0x2E4F:word16] = Mem565[ds:0x2E4F:word16] >>u 0x0001 | 0x8000
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_7B56:
	branch (Mem579[ds:0x466A:word16] | Mem579[ds:0x466C:word16]) == 0x0000 l0800_7BC0
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_7B5F:
	Mem592[ss:sp_280 + 0x0004:word16] = Mem579[ds:0x29DD:word16]
	Mem595[ss:sp_280 + 0x0002:word16] = Mem592[ds:0x29DB:word16]
	selector ds_600
	Mem610[ds_600:0x2E29:word16] = fn0800_3E27(ds, Mem595[ss:sp_280 + 0x0002:word16], Mem595[ss:sp_280 + 0x0004:word16], out cx_790, out dx_791, out di_792, out es_793, out ds_600, out Top_794)
	Mem613[ss:sp_280 + 0x0004:word16] = Mem610[ds_600:0x29DD:word16]
	Mem616[ss:sp_280 + 0x0002:word16] = Mem613[ds_600:0x29DB:word16]
	word16 cx_619
	selector ds_621
	Mem631[ds_621:0x2E2B:word16] = fn0800_3E27(ds_600, Mem616[ss:sp_280 + 0x0002:word16], Mem616[ss:sp_280 + 0x0004:word16], out cx_619, out dx_795, out di_620, out es_796, out ds_621, out Top_624)
	Mem633[ss:sp_280 + 0x0004:word16] = ds_621
	Mem636[ss:sp_280 + 0x0002:word16] = 0x284F
	Mem639[ss:sp_280:word16] = Mem636[ds_621:0x2E2B:word16]
	word16 cx_644 = fn0800_8407(cx_619, ds_621, Mem639[ss:sp_280:word16], Mem639[ss:sp_280 + 0x0002:segptr32])
	Mem652[ss:sp_280 + 0x0004:word16] = ds_621
	Mem655[ss:sp_280 + 0x0002:word16] = 0x278F
	Mem658[ss:sp_280:word16] = Mem655[ds_621:0x2E29:word16]
	cx_274 = fn0800_8407(cx_644, ds_621, Mem658[ss:sp_280:word16], Mem658[ss:sp_280 + 0x0002:segptr32])
	Mem670[ds_621:0x2E29:word16] = Mem658[ds_621:0x2E29:word16] + 0x0002
	word16 v40_672 = Mem670[ds_621:0x467A:word16] + Mem670[ds_621:0x2E29:word16]
	Mem673[ds_621:0x467A:word16] = v40_672
	Mem677[ds_621:0x467C:word16] = Mem673[ds_621:0x467C:word16] + (v40_672 <u 0x0000)
	ds = ds_621
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_7BB5:
	word16 ax_681 = Mem680[ds:0x2E29:word16]
	Mem683[ds:0x2E29:word16] = Mem680[ds:0x2E29:word16] - 0x0001
	branch ax_681 != 0x0000 l0800_7BB2
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_7BB2:
	fn0800_8359(ds, out cx_274, out dx_798, out ds)
// DataOut:
// DataOut (flags):
// SymbolicIn:



byte fn0800_7C78(byte ch, selector ds, ptr16 & cxOut, ptr16 & dsOut)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  cx:[8..15] ds:[0..15] ss:[0..15]
// LiveOut: ax cx ds
// Trashed: SCZO ax bx cx di ds dx es Top
// Preserved: bp si sp
fn0800_7C78_entry:
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_7C78:
	word16 sp_11 = fp - 0x0008
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_7E6D:
	word16 ax_21 = Mem20[ds:0x467C:word16]
	word16 dx_22 = Mem20[ds:0x467A:word16]
	branch ax_21 >=u Mem20[ds:0x4680:word16] l0800_7E7D
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_7E7D:
	branch ax_21 != Mem20[ds:0x4680:word16] l0800_7E88
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_7E7F:
	branch dx_22 >=u Mem20[ds:0x467E:word16] l0800_7E88
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_7E88:
	byte cl_31 = 0x08 - Mem20[ds:0x2E45:byte]
	Mem33[ds:0x2E43:word16] = Mem20[ds:0x2E43:word16] << cl_31
	word16 cx_55 = DPB(cx, cl_31, 0)
	branch Mem33[ds:0x2E45:word16] != 0x0000 l0800_7EA0
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_7E99:
	branch Mem33[ds:0x4E82:word16] == 0x0000 l0800_7EAA
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_7EA0:
	word16 sp_44 = sp_11 - 2
	Mem51[ss:sp_44:word16] = DPB(ax_21, Mem33[ds:0x2E43:byte], 0)
	ax_21 = (word16) fn0800_8624(cx_55, ds, Mem51[ss:sp_44:byte], out cx_55, out dx_57, out di_61, out ds)
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_7EAA:
	cxOut = cx_55
	dsOut = ds
	return (byte) ax_21
// DataOut:
// DataOut (flags):
// SymbolicIn:

fn0800_7C78_exit:
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_7E85:
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_7E7A:
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_7C8F:
	word16 sp_93
	selector ds_126
	word16 bp_92 = fn0800_7FDC(ds, out ds_126)
	Mem102[ss:sp_93 - 2:word16] = 0x0000
	Mem105[ss:sp_93 - 4:word16] = Mem102[ss:bp_92 - 0x0002:word16]
	Mem108[ss:sp_93 - 6:word16] = Mem105[ss:bp_92 - 0x0004:word16]
	Mem111[ss:sp_93 - 8:word16] = Mem108[ds_126:0x29E5:word16]
	Mem114[ss:sp_93 - 10:word16] = Mem111[ds_126:0x29E3:word16]
	word16 cx_117
	fn0800_ACB3(ds_126, Mem114[ss:sp_93 - 10:word16], Mem114[ss:sp_93 - 8:word16], Mem114[ss:sp_93 - 2:word16], out cx_117, out dx_653, out bx_654, out es_655)
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_7DCD:
	word16 ax_128 = Mem127[ds_126:0x466A:word16]
	word16 dx_129 = Mem127[ds_126:0x466C:word16]
	word16 v17_130 = Mem127[ds_126:0x466A:word16] - 0x0001
	Mem131[ds_126:0x466A:word16] = v17_130
	Mem135[ds_126:0x466C:word16] = Mem131[ds_126:0x466C:word16] - (v17_130 <u 0x0000)
	branch (ax_128 | dx_129) == 0x0000 l0800_7DE5
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_7DE5:
	word16 cx_194
	word16 ax_193
	Mem144[ss:sp_93 - 2:word16] = 0x0004
	Mem147[ss:sp_93 - 4:word16] = 0x000F
	word16 cx_150
	Mem160[ss:sp_93 - 2:word16] = DPB((word16) fn0800_854B(cx_117, ds_126, Mem147[ss:sp_93 - 4:word16], Mem147[ss:sp_93 - 2:byte], out cx_150), 0x00, 0)
	word16 cx_163 = fn0800_8600(cx_150, dx_129, ds_126, Mem160[ss:sp_93 - 2:byte], out dx_656, out di_164, out ds)
	word16 ax_174 = Mem160[ds:0x467C:word16]
	word16 dx_175 = Mem160[ds:0x467A:word16]
	branch ax_174 >u Mem160[ds:0x4680:word16] l0800_7E1E
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_7E09:
	branch ax_174 <u Mem160[ds:0x4680:word16] l0800_7E11
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_7E0B:
	branch dx_175 >=u Mem160[ds:0x467E:word16] l0800_7E1E
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_7E1E:
	Mem185[ss:sp_93 - 2:word16] = 0x0001
	Mem190[ss:sp_93 - 4:word16] = 0x0000
	ax_193 = (word16) fn0800_854B(cx_163, ds, Mem190[ss:sp_93 - 4:word16], Mem190[ss:sp_93 - 2:byte], out cx_194)
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_7E11:
	Mem205[ss:sp_93 - 2:word16] = 0x0001
	Mem207[ss:sp_93 - 4:word16] = 0x0001
	ax_193 = (word16) fn0800_854B(cx_163, ds, Mem207[ss:sp_93 - 4:word16], Mem207[ss:sp_93 - 2:byte], out cx_194)
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_7E2B:
	branch Mem219[ds:0x2E45:word16] != 0x0000 l0800_7E4F
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_7E32:
	word16 si_222 = 0x4682
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_7E48:
	branch Mem226[ds:0x4E82:word16] != 0x0000 l0800_7E36
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_7E36:
	Mem239[ss:sp_93 - 2:word16] = DPB(ax_193, Mem226[ds:si_222 + 0x0000:byte], 0)
	ax_193 = (word16) fn0800_8624(cx_194, ds, Mem239[ss:sp_93 - 2:byte], out cx_194, out dx_672, out di_673, out ds)
	Mem256[ds:0x4E82:word16] = Mem239[ds:0x4E82:word16] - 0x0001
	si_222 = si_222 + 0x0001
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_7E4F:
	word16 v31_260 = Mem259[ds:0x29F7:word16] + 0x0001
	Mem261[ds:0x29F7:word16] = v31_260
	Mem265[ds:0x29F9:word16] = Mem261[ds:0x29F9:word16] + (v31_260 <u 0x0000)
	Mem273[ss:sp_93 - 2:word16] = Mem265[ds:0x29E5:word16]
	Mem276[ss:sp_93 - 4:word16] = Mem273[ds:0x29E3:word16]
	// Failed to bind call argument.
	// Please report this issue at https://github.com/uxmal/reko
	word16 stackArg4 = <invalid>
	word16 dx_280
	word16 ax_277 = fn0800_AD2F(ds, Mem276[ss:sp_93 - 4:segptr32], stackArg4, out cx, out dx_280)
	Mem294[ss:bp_92 - 0x0002:word16] = dx_280
	Mem295[ss:bp_92 - 0x0004:word16] = ax_277
	sp_11 = sp_93
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_7DE2:
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_7CAC:
	Mem298[ss:sp_93 - 2:word16] = Mem135[ds_126:0x29DD:word16]
	Mem301[ss:sp_93 - 4:word16] = Mem298[ds_126:0x29DB:word16]
	word16 ax_302 = fn0800_3E27(ds_126, Mem301[ss:sp_93 - 4:word16], Mem301[ss:sp_93 - 2:word16], out cx_117, out dx_657, out di_658, out es_659, out ds_126, out Top_660)
	Mem315[ds_126:0x2E47:word16] = ax_302
	word16 v25_316 = Mem315[ds_126:0x467A:word16] + ax_302
	Mem317[ds_126:0x467A:word16] = v25_316
	Mem321[ds_126:0x467C:word16] = Mem317[ds_126:0x467C:word16] + (v25_316 <u 0x0000)
	Mem324[ss:sp_93 - 2:word16] = ax_302
	fn0800_7EAF(cx_117, ds_126, Mem324[ss:sp_93 - 2:word16])
	branch (Mem324[ds_126:0x466A:word16] | Mem324[ds_126:0x466C:word16]) != 0x0000 l0800_7CD9
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_7CD9:
	Mem337[ss:sp_93 - 2:word16] = Mem324[ds_126:0x29DD:word16]
	Mem340[ss:sp_93 - 4:word16] = Mem337[ds_126:0x29DB:word16]
	selector ds_345
	Mem355[ds_345:0x2E29:word16] = fn0800_3E27(ds_126, Mem340[ss:sp_93 - 4:word16], Mem340[ss:sp_93 - 2:word16], out cx_661, out dx_662, out di_663, out es_664, out ds_345, out Top_665)
	Mem358[ss:sp_93 - 2:word16] = Mem355[ds_345:0x29DD:word16]
	Mem361[ss:sp_93 - 4:word16] = Mem358[ds_345:0x29DB:word16]
	word16 cx_364
	selector ds_366
	word16 dx_367
	word16 ax_362 = fn0800_3E27(ds_345, Mem361[ss:sp_93 - 4:word16], Mem361[ss:sp_93 - 2:word16], out cx_364, out dx_367, out di_666, out es_667, out ds_366, out Top_668)
	Mem375[ds_366:0x2E2B:word16] = ax_362
	branch Mem375[ds_366:0x2E29:word16] != 0x0000 l0800_7D1D
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_7D1D:
	branch Mem375[ds_366:0x2E29:word16] >=u 0x0007 l0800_7D68
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_7D68:
	Mem382[ss:sp_93 - 2:word16] = 0x0004
	Mem385[ss:sp_93 - 4:word16] = 0x000F
	word16 cx_387
	Mem398[ss:sp_93 - 2:word16] = DPB((word16) fn0800_854B(cx_364, ds_366, Mem385[ss:sp_93 - 4:word16], Mem385[ss:sp_93 - 2:byte], out cx_387), Mem385[ds_366:0x2E29:byte] - 0x06, 0)
	selector ds_403
	word16 dx_404
	word16 cx_401 = fn0800_8600(cx_387, dx_367, ds_366, Mem398[ss:sp_93 - 2:byte], out dx_404, out di_674, out ds_403)
	word16 bx_412 = Mem398[ds_403:0x2E2B:word16]
	byte al_417 = Mem398[ds_403:(bx_412 >>u 0x08) + 0x21F2:byte]
	Mem422[ss:sp_93 - 2:word16] = DPB(DPB(ax_399, al_417, 0), 0x00, 8)
	Mem430[ss:sp_93 - 4:word16] = DPB(DPB(DPB(DPB(ax_399, al_417, 0), 0x00, 8), Mem422[ds_403:(bx_412 >>u 0x08) + 0x21E2:byte], 0), 0x00, 8)
	word16 cx_433
	Mem445[ss:sp_93 - 2:word16] = DPB((word16) fn0800_854B(DPB(cx_401, 0x08, 0), ds_403, Mem430[ss:sp_93 - 4:word16], Mem430[ss:sp_93 - 2:byte], out cx_433), Mem430[ds_403:0x2E2B:byte] & 0xFF, 0)
	cx_117 = fn0800_8600(cx_433, dx_404, ds_403, Mem445[ss:sp_93 - 2:byte], out dx_675, out di_676, out ds_126)
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_7D24:
	word16 bx_460 = Mem375[ds_366:0x2E29:word16]
	byte al_461 = Mem375[ds_366:bx_460 + 0x21DB:byte]
	Mem466[ss:sp_93 - 2:word16] = DPB(DPB(ax_362, al_461, 0), 0x00, 8)
	Mem474[ss:sp_93 - 4:word16] = DPB(DPB(DPB(DPB(ax_362, al_461, 0), 0x00, 8), Mem466[ds_366:bx_460 + 0x21D4:byte], 0), 0x00, 8)
	word16 cx_476
	word16 ax_475 = (word16) fn0800_854B(cx_364, ds_366, Mem474[ss:sp_93 - 4:word16], Mem474[ss:sp_93 - 2:byte], out cx_476)
	word16 bx_482 = Mem474[ds_366:0x2E2B:word16]
	byte al_487 = Mem474[ds_366:(bx_482 >>u 0x08) + 0x21F2:byte]
	Mem492[ss:sp_93 - 2:word16] = DPB(DPB(ax_475, al_487, 0), 0x00, 8)
	Mem500[ss:sp_93 - 4:word16] = DPB(DPB(DPB(DPB(ax_475, al_487, 0), 0x00, 8), Mem492[ds_366:(bx_482 >>u 0x08) + 0x21E2:byte], 0), 0x00, 8)
	word16 cx_503
	Mem515[ss:sp_93 - 2:word16] = DPB((word16) fn0800_854B(DPB(cx_476, 0x08, 0), ds_366, Mem500[ss:sp_93 - 4:word16], Mem500[ss:sp_93 - 2:byte], out cx_503), Mem500[ds_366:0x2E2B:byte] & 0xFF, 0)
	cx_117 = fn0800_8600(cx_503, dx_367, ds_366, Mem515[ss:sp_93 - 2:byte], out dx_677, out di_678, out ds_126)
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_7D02:
	Mem532[ss:sp_93 - 2:word16] = 0x0003
	Mem535[ss:sp_93 - 4:word16] = 0x0006
	word16 cx_537
	Mem547[ss:sp_93 - 2:word16] = DPB((word16) fn0800_854B(cx_364, ds_366, Mem535[ss:sp_93 - 4:word16], Mem535[ss:sp_93 - 2:byte], out cx_537), Mem535[ds_366:0x2E2B:byte], 0)
	cx_117 = fn0800_8600(cx_537, dx_367, ds_366, Mem547[ss:sp_93 - 2:byte], out dx_670, out di_671, out ds_126)
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_7DAC:
	Mem565[ds_126:0x2E29:word16] = Mem563[ds_126:0x2E29:word16] + 0x0002
	word16 v36_567 = Mem565[ds_126:0x467A:word16] + Mem565[ds_126:0x2E29:word16]
	Mem568[ds_126:0x467A:word16] = v36_567
	Mem572[ds_126:0x467C:word16] = Mem568[ds_126:0x467C:word16] + (v36_567 <u 0x0000)
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_7DC2:
	word16 ax_576 = Mem575[ds_126:0x2E29:word16]
	Mem578[ds_126:0x2E29:word16] = Mem575[ds_126:0x2E29:word16] - 0x0001
	branch ax_576 != 0x0000 l0800_7DBF
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_7DBF:
	fn0800_8359(ds_126, out cx_117, out dx_679, out ds_126)
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_7CD6:
// DataOut:
// DataOut (flags):
// SymbolicIn:



void fn0800_7EAF(word16 cx, selector ds, word16 wArg02)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  cx:[0..15] ds:[0..15] ss:[0..15] Stack +0002:[0..15]
// LiveOut:
// Trashed: SCZO Top
// Preserved: ax bp bx cx di ds dx es si sp
fn0800_7EAF_entry:
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_7EAF:
	word16 si_137 = wArg02
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_7FD1:
	word16 si_101 = si_137
	branch si_137 == 0x0000 l0800_7FD8
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_7FD8:
	return
// DataOut:
// DataOut (flags):
// SymbolicIn:

fn0800_7EAF_exit:
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_7FD5:
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_7EBA:
	branch si_137 >=u 0x000C l0800_7F32
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_7F32:
	branch (si_101 & 0x0003) != 0x0000 l0800_7EFD
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_7EFD:
	fn0800_854B(cx, ds, 0x0000, 0x0001, out cx_445)
	word16 cx_58
	selector ds_60
	word16 dx_61
	word16 ax_56 = fn0800_8359(ds, out cx_58, out dx_61, out ds_60)
	cx = fn0800_8600(cx_58, dx_61, ds_60, DPB(ax_56, (byte) ax_56 ^ Mem45[ds_60:0x2E4F:byte], 0), out dx_446, out di_447, out ds)
	branch (Mem74[ds:0x2E4F:word16] & 0x0001) == 0x0000 l0800_7F2D
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_7F2D:
	Mem92[ds:0x2E4F:word16] = Mem74[ds:0x2E4F:word16] >>u 0x0001
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_7F20:
	Mem99[ds:0x2E4F:word16] = Mem74[ds:0x2E4F:word16] >>u 0x0001 | 0x8000
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_7F31:
	si_101 = si_101 - 0x0001
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_7F38:
	word16 cx_110
	fn0800_854B(cx, ds, 0x0017, 0x0005, out cx_110)
	branch si_101 <u 0x0048 l0800_7F8F
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_7F8F:
	fn0800_854B(cx_110, ds, si_101 - 0x000C >>u 0x0002, 0x0004, out cx)
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_7FB4:
	si_137 = si_101
	branch si_101 != 0x0000 l0800_7FA5
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_7FA5:
	word16 cx_145
	selector ds_147
	word16 dx_148
	word16 ax_143 = fn0800_8359(ds, out cx_145, out dx_148, out ds_147)
	cx = fn0800_8600(cx_145, dx_148, ds_147, DPB(ax_143, (byte) ax_143 ^ Mem156[ds_147:0x2E4F:byte], 0), out dx_452, out di_453, out ds)
	si_101 = si_101 - 0x0001
	Mem156 = Mem163
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_7FB8:
	branch (Mem156[ds:0x2E4F:word16] & 0x0001) == 0x0000 l0800_7FCD
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_7FCD:
	Mem184[ds:0x2E4F:word16] = Mem156[ds:0x2E4F:word16] >>u 0x0001
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_7FC0:
	Mem191[ds:0x2E4F:word16] = Mem156[ds:0x2E4F:word16] >>u 0x0001 | 0x8000
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_7F4B:
	fn0800_854B(cx_110, ds, 0x000F, 0x0004, out cx)
	word16 di_205 = 0x0000
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_7F6C:
	branch di_205 != 0x0048 l0800_7F5D
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_7F5D:
	word16 cx_215
	selector ds_217
	word16 dx_218
	word16 ax_213 = fn0800_8359(ds, out cx_215, out dx_218, out ds_217)
	word16 di_237
	cx = fn0800_8600(cx_215, dx_218, ds_217, DPB(ax_213, (byte) ax_213 ^ Mem226[ds_217:0x2E4F:byte], 0), out dx_451, out di_237, out ds)
	di_205 = di_237 + 0x0001
	Mem226 = Mem233
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_7F71:
	branch (Mem226[ds:0x2E4F:word16] & 0x0001) == 0x0000 l0800_7F86
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_7F86:
	Mem254[ds:0x2E4F:word16] = Mem226[ds:0x2E4F:word16] >>u 0x0001
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_7F79:
	Mem261[ds:0x2E4F:word16] = Mem226[ds:0x2E4F:word16] >>u 0x0001 | 0x8000
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_7F8A:
	si_137 = si_101 - 0x0048
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_7EBF:
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_7EF6:
	si_137 = si_101
	branch si_101 != 0x0000 l0800_7EC1
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_7EC1:
	fn0800_854B(cx, ds, 0x0000, 0x0001, out cx_448)
	word16 cx_293
	selector ds_295
	word16 dx_296
	word16 ax_291 = fn0800_8359(ds, out cx_293, out dx_296, out ds_295)
	cx = fn0800_8600(cx_293, dx_296, ds_295, DPB(ax_291, (byte) ax_291 ^ Mem280[ds_295:0x2E4F:byte], 0), out dx_449, out di_450, out ds)
	branch (Mem309[ds:0x2E4F:word16] & 0x0001) == 0x0000 l0800_7EF1
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_7EF1:
	Mem327[ds:0x2E4F:word16] = Mem309[ds:0x2E4F:word16] >>u 0x0001
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_7EE4:
	Mem334[ds:0x2E4F:word16] = Mem309[ds:0x2E4F:word16] >>u 0x0001 | 0x8000
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_7EF5:
	si_101 = si_101 - 0x0001
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_7EFA:
// DataOut:
// DataOut (flags):
// SymbolicIn:



word16 fn0800_7FDC(selector ds, ptr16 & dsOut)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  ds:[0..15] ss:[0..15]
// LiveOut: bp ds sp
// Trashed: SCZO ax bp bx cx di ds dx es si sp Top
// Preserved: D
fn0800_7FDC_entry:
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_7FDC:
	Mem11[ds:0x466C:word16] = 0x0000
	Mem12[ds:0x466A:word16] = 0x0000
	Mem13[ds:0x2E47:word16] = 0x0000
	word16 dx_15 = Mem13[ds:0x2A0B:word16]
	Mem16[ds:0x4670:word16] = Mem13[ds:0x2A0D:word16]
	Mem17[ds:0x466E:word16] = dx_15
	fn0800_ACB3(ds, Mem38[ds:0x29E3:word16], Mem35[ds:0x29E5:word16], 0x0000, out cx_786, out dx_787, out bx_788, out es_789)
	word16 cx_501
	fn0800_ACB3(ds, Mem63[ds:0x29DB:word16], Mem60[ds:0x29DD:word16], 0x0000, out cx_501, out dx_790, out bx_791, out es_792)
	word16 bp_105 = fp - 2
	word16 sp_133 = fp - 0x0006
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_82A1:
	branch (Mem79[ds:0x4676:word16] | Mem79[ds:0x4678:word16]) == 0x0000 l0800_82AD
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_82AD:
	branch (Mem79[ds:0x4672:word16] | Mem79[ds:0x4674:word16]) == 0x0000 l0800_82B9
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_82B6:
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_82AA:
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_8042:
	word16 dx_94 = 0xFFFF - Mem79[ds:0x2E31:word16]
	ui32 ax_dx_652 = SEQ(0x0000 - (dx_94 <u 0x0000), dx_94) - SEQ(Mem79[ds:0x4674:word16], Mem79[ds:0x4672:word16])
	Mem106[ss:bp_105 - 0x0002:word16] = SLICE(ax_dx_652, word16, 16)
	Mem107[ss:bp_105 - 0x0004:word16] = (word16) ax_dx_652
	word16 ax_108 = Mem107[ds:0x4678:word16]
	word16 dx_109 = Mem107[ds:0x4676:word16]
	branch ax_108 >u Mem107[ss:bp_105 - 0x0002:word16] l0800_807C
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_8068:
	branch ax_108 <u Mem107[ss:bp_105 - 0x0002:word16] l0800_806F
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_806A:
	branch dx_109 >=u Mem107[ss:bp_105 - 0x0004:word16] l0800_807C
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_806F:
	word16 dx_118 = Mem107[ds:0x4676:word16]
	Mem121[ss:bp_105 - 0x0002:word16] = Mem107[ds:0x4678:word16]
	Mem122[ss:bp_105 - 0x0004:word16] = dx_118
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_807C:
	word16 dx_127 = Mem124[ds:0x2E71:word16] + Mem124[ds:0x2E31:word16]
	Mem128[ds:0x2E6F:word16] = Mem124[ds:0x2E73:word16]
	Mem129[ds:0x2E6D:word16] = dx_127
	word16 sp_135 = sp_133 - 2
	Mem137[ss:sp_135:word16] = Mem129[ds:0x29E5:word16]
	Mem140[ss:sp_135 - 2:word16] = Mem137[ds:0x29E3:word16]
	Mem144[ss:sp_135 - 4:word16] = Mem140[ss:bp_105 - 0x0002:word16]
	Mem147[ss:sp_135 - 6:word16] = Mem144[ss:bp_105 - 0x0004:word16]
	word16 ax_149 = Mem147[ds:0x2E6D:word16] + Mem147[ds:0x4672:word16]
	Mem153[ss:sp_135 - 8:word16] = Mem147[ds:0x2E73:word16]
	Mem155[ss:sp_135 - 10:word16] = ax_149
	word16 si_163
	word16 di_159
	fn0800_4110(ds, Mem155[ss:sp_135 - 10:word16], Mem155[ss:sp_135 - 8:word16], Mem155[ss:sp_135 - 6:word16], Mem155[ss:sp_135 - 4:word16], Mem155[ss:sp_135 - 2:word16], Mem155[ss:sp_135:word16], out si_163, out di_159, out ds)
	word16 ax_170 = Mem155[ss:bp_105 - 0x0002:word16]
	word16 dx_171 = Mem155[ss:bp_105 - 0x0004:word16]
	Mem173[ds:0x4676:word16] = v27_172
	ui32 v28_v27_654 = SEQ(Mem173[ds:0x4678:word16], Mem155[ds:0x4676:word16]) - SEQ(ax_170, dx_171)
	Mem177[ds:0x4678:word16] = SLICE(v28_v27_654, word16, 16)
	Mem179[ds:0x4672:word16] = v29_178
	ui32 v30_v29_656 = SEQ(Mem179[ds:0x4674:word16], Mem177[ds:0x4672:word16]) + SEQ(ax_170, dx_171)
	Mem183[ds:0x4674:word16] = SLICE(v30_v29_656, word16, 16)
	word16 ax_184 = Mem183[ds:0x2E6F:word16]
	word16 dx_186 = Mem183[ds:0x2E6D:word16] + Mem183[ds:0x4672:word16]
	Mem187[ds:0x2E67:word16] = ax_184
	Mem188[ds:0x2E65:word16] = dx_186
	Mem189[ds:0x2E6B:word16] = ax_184
	Mem190[ds:0x2E69:word16] = dx_186
	word16 sp_169 = sp_135 + 0x0002
	word16 v27_172 = (word16) v28_v27_654
	word16 v29_178 = (word16) v30_v29_656
	word16 ax_191 = Mem190[ds:0x4670:word16]
	word16 dx_192 = Mem190[ds:0x466E:word16]
	branch ax_191 <=u Mem190[ds:0x4674:word16] l0800_80ED
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_80ED:
	branch ax_191 <u Mem190[ds:0x4674:word16] l0800_80F8
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_80EF:
	branch dx_192 <u Mem190[ds:0x4672:word16] l0800_80F8
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_80F8:
	word16 dx_202 = Mem190[ds:0x2E6D:word16] + Mem190[ds:0x466E:word16]
	Mem204[ds:0x2E67:word16] = Mem190[ds:0x2E6F:word16]
	Mem205[ds:0x2E65:word16] = dx_202
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_80F5:
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_80EA:
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_81E9:
	branch Mem207[ds:0x2E65:word16] - 0x0001 <=u Mem207[ds:0x2E6D:word16] l0800_8209
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_81F3:
	branch Mem207[ds:0x466C:word16] >=u 0x0000 l0800_81FD
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_81FD:
	branch Mem207[ds:0x466C:word16] != 0x0000 l0800_8209
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_81FF:
	branch Mem207[ds:0x466A:word16] >=u 0xFFFE l0800_8209
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_8206:
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_81FA:
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_810D:
	word16 cx_220 = fn0800_8832(ds)
	branch Mem207[ds:0x2E29:word16] <u 0x0002 l0800_8193
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_8193:
	word16 sp_234 = sp_804 - 2
	Mem237[ss:sp_234:word16] = 0x0001
	fn0800_89A8(ds, Mem237[ss:sp_234:word16])
	Mem251[ds:0x2E47:word16] = Mem237[ds:0x2E47:word16] + 0x0001
	Mem253[ds:0x465C:word16] = Mem251[ds:0x465C:word16] + 0x0001
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_8117:
	branch Mem207[ds:0x2E6D:word16] + Mem207[ds:0x2E29:word16] <=u Mem207[ds:0x2E65:word16] l0800_813F
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_8124:
	branch (Mem207[ds:0x466A:word16] | Mem207[ds:0x466C:word16]) == 0x0000 l0800_8130
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_8130:
	Mem271[ds:0x2E29:word16] = Mem207[ds:0x2E65:word16] - Mem207[ds:0x2E6D:word16]
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_813F:
	word16 sp_273 = sp_804 - 2
	Mem276[ss:sp_273:word16] = ds
	Mem279[ss:sp_273 - 2:word16] = 0x290F
	Mem282[ss:sp_273 - 4:word16] = Mem279[ds:0x2E47:word16]
	selector ds_288
	word16 cx_286 = fn0800_831D(cx_220, ds, Mem282[ss:sp_273 - 4:word16], Mem282[ss:sp_273 - 2:segptr32], out di_798, out ds_288)
	Mem298[ss:sp_273:word16] = ds_288
	Mem301[ss:sp_273 - 2:word16] = 0x278F
	Mem306[ss:sp_273 - 4:word16] = Mem301[ds_288:0x2E29:word16] - 0x0002
	selector ds_311
	word16 cx_309 = fn0800_831D(cx_286, ds_288, Mem306[ss:sp_273 - 4:word16], Mem306[ss:sp_273 - 2:segptr32], out di_799, out ds_311)
	Mem322[ss:sp_273:word16] = ds_311
	Mem325[ss:sp_273 - 2:word16] = 0x284F
	Mem330[ss:sp_273 - 4:word16] = Mem325[ds_311:0x2E2B:word16] - 0x0001
	fn0800_831D(cx_309, ds_311, Mem330[ss:sp_273 - 4:word16], Mem330[ss:sp_273 - 2:segptr32], out di_159, out ds)
	Mem347[ss:sp_273:word16] = Mem330[ds:0x2E29:word16]
	fn0800_89A8(ds, Mem347[ss:sp_273:word16])
	word16 v40_359 = Mem347[ds:0x466A:word16] + 0x0001
	Mem360[ds:0x466A:word16] = v40_359
	Mem364[ds:0x466C:word16] = Mem360[ds:0x466C:word16] + (v40_359 <u 0x0000)
	Mem365[ds:0x2E47:word16] = 0x0000
	Mem368[ds:0x465C:word16] = Mem365[ds:0x465C:word16] + Mem365[ds:0x2E29:word16]
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_81A5:
	sp_169 = sp_804
	sp_804 = sp_169
	branch Mem371[ds:0x465C:word16] <u 0x0400 l0800_81E9
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_81AD:
	word16 v45_375 = Mem371[ds:0x4666:word16] + Mem371[ds:0x465C:word16]
	Mem376[ds:0x4666:word16] = v45_375
	Mem380[ds:0x4668:word16] = Mem376[ds:0x4668:word16] + (v45_375 <u 0x0000)
	word16 sp_383 = sp_804 - 2
	Mem385[ss:sp_383:word16] = Mem380[ds:0x4680:word16]
	Mem388[ss:sp_383 - 2:word16] = Mem385[ds:0x467E:word16]
	word16 dx_396
	word16 ax_395 = fn0800_8F18(0x0063, Mem388[ds:0x4668:word16], 0x0000, Mem388[ds:0x4666:word16], out cx_800, out dx_396)
	Mem403[ss:sp_383 - 4:word16] = dx_396
	Mem405[ss:sp_383 - 6:word16] = ax_395
	// Failed to bind call argument.
	// Please report this issue at https://github.com/uxmal/reko
	word16 stackArg0 = <invalid>
	word16 bx_419
	word16 cx_420
	word16 dx_422
	word16 sp_424
	word16 ax_417 = fn0800_8BC2(bp_105, si_163, di_159, stackArg0, out cx_420, out dx_422, out bx_419, out bp_105, out si_802, out di_803)
	Mem431[ss:sp_424 + 0x0006:word16] = dx_422
	Mem433[ss:sp_424 + 0x0004:word16] = ax_417
	Mem435[ss:sp_424 + 0x0002:word16] = ds
	Mem438[ss:sp_424:word16] = 0x2244
	fn0800_B2EF(cx_420, dx_422, bx_419, ds, Mem438[ss:sp_424:word16], Mem438[ss:sp_424 + 2:word16], out si_163, out di_159)
	Mem449[ds:0x465C:word16] = 0x0000
	sp_169 = sp_424 + 0x0008
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_812D:
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_8209:
	word16 ax_454 = Mem207[ds:0x2E69:word16] - Mem207[ds:0x2E6D:word16]
	Mem458[ds:0x4674:word16] = 0x0000 - (ax_454 <u 0x0000)
	Mem459[ds:0x4672:word16] = ax_454
	word16 ax_462 = Mem459[ds:0x2E6D:word16] - Mem459[ds:0x2E71:word16]
	word16 ax_466 = ax_462 - Mem459[ds:0x2E31:word16]
	Mem472[ss:bp_105 - 0x0002:word16] = 0x0000 - (ax_462 <u 0x0000) - (ax_466 <u 0x0000)
	Mem473[ss:bp_105 - 0x0004:word16] = ax_466
	word16 ax_475 = Mem473[ds:0x2E71:word16] + Mem473[ss:bp_105 - 0x0004:word16]
	word16 sp_486 = sp_804 - 2
	Mem487[ss:sp_486:word16] = Mem473[ds:0x2E6D:word16] - ax_475 + Mem473[ds:0x4672:word16]
	Mem490[ss:sp_486 - 2:word16] = Mem487[ds:0x2E73:word16]
	Mem492[ss:sp_486 - 4:word16] = ax_475
	Mem495[ss:sp_486 - 6:word16] = Mem492[ds:0x2E73:word16]
	Mem498[ss:sp_486 - 8:word16] = Mem495[ds:0x2E71:word16]
	cx_501 = fn0800_B0F3(Mem498[ss:sp_486 - 8:word16], Mem498[ss:sp_486 - 6:word16], Mem498[ss:sp_486 - 4:word16], Mem498[ss:sp_486 - 2:word16], Mem498[ss:sp_486:word16])
	sp_133 = sp_486 + 0x0002
	branch Mem498[ds:0x2E65:word16] <u Mem498[ds:0x2E69:word16] l0800_82B9
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_8269:
	word16 dx_514 = Mem498[ds:0x2E65:word16]
	branch Mem498[ds:0x2E67:word16] != Mem498[ds:0x2E6B:word16] l0800_8285
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_8276:
	branch dx_514 != Mem498[ds:0x2E69:word16] l0800_8285
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_827C:
	branch (Mem498[ds:0x4676:word16] | Mem498[ds:0x4678:word16]) == 0x0000 l0800_82B9
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_8285:
	branch Mem498[ds:0x466C:word16] != 0x0000 l0800_8293
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_828C:
	branch Mem498[ds:0x466A:word16] == 0xFFFE l0800_82B9
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_82B9:
	word16 dx_533 = Mem531[ds:0x2E65:word16]
	branch Mem531[ds:0x2E67:word16] != Mem531[ds:0x2E6B:word16] l0800_82ED
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_82C6:
	branch dx_533 != Mem531[ds:0x2E69:word16] l0800_82ED
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_82CC:
	branch (Mem531[ds:0x4676:word16] | Mem531[ds:0x4678:word16]) != 0x0000 l0800_82ED
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_82D5:
	branch Mem531[ds:0x466C:word16] != 0x0000 l0800_82E3
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_82DC:
	branch Mem531[ds:0x466A:word16] == 0xFFFE l0800_82ED
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_82E3:
	Mem552[ds:0x2E47:word16] = Mem531[ds:0x2E47:word16] + Mem531[ds:0x4672:word16]
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_82ED:
	word16 sp_557 = sp_133 - 2
	Mem563[ss:sp_557:word16] = ds
	Mem566[ss:sp_557 - 2:word16] = 0x290F
	Mem569[ss:sp_557 - 4:word16] = Mem566[ds:0x2E47:word16]
	selector ds_579
	fn0800_831D(cx_501, ds, Mem569[ss:sp_557 - 4:word16], Mem569[ss:sp_557 - 2:segptr32], out di_793, out ds_579)
	word16 v18_588 = Mem569[ds_579:0x466A:word16] + 0x0001
	Mem589[ds_579:0x466A:word16] = v18_588
	Mem593[ds_579:0x466C:word16] = Mem589[ds_579:0x466C:word16] + (v18_588 <u 0x0000)
	Mem598[ss:sp_557:word16] = 0x0000
	Mem600[ss:sp_557 - 2:word16] = 0x0000
	Mem602[ss:sp_557 - 4:word16] = 0x0000
	Mem605[ss:sp_557 - 6:word16] = Mem602[ds_579:0x29DD:word16]
	Mem608[ss:sp_557 - 8:word16] = Mem605[ds_579:0x29DB:word16]
	fn0800_ACB3(ds_579, Mem608[ss:sp_557 - 8:word16], Mem608[ss:sp_557 - 6:word16], Mem608[ss:sp_557:word16], out cx_794, out dx_795, out bx_796, out es_797)
	word16 bp_625 = Mem608[ss:bp_105:word16]
	dsOut = ds_579
	return bp_625
// DataOut:
// DataOut (flags):
// SymbolicIn:

fn0800_7FDC_exit:
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_8293:
	word16 ax_630 = Mem498[ss:bp_105 - 0x0002:word16]
	word16 dx_631 = Mem498[ss:bp_105 - 0x0004:word16]
	Mem634[ds:0x466E:word16] = v36_633
	ui32 v37_v36_658 = SEQ(Mem634[ds:0x4670:word16], Mem498[ds:0x466E:word16]) - SEQ(ax_630, dx_631)
	Mem638[ds:0x4670:word16] = SLICE(v37_v36_658, word16, 16)
	word16 v36_633 = (word16) v37_v36_658
// DataOut:
// DataOut (flags):
// SymbolicIn:



word16 fn0800_831D(word16 cx, selector ds, word16 wArg02, segptr32 ptrArg04, ptr16 & diOut, ptr16 & dsOut)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  cx:[0..15] ds:[0..15] ss:[0..15] Stack +0002:[0..15] Stack +0004:[0..15]
// LiveOut: cx di ds
// Trashed: SCZO ax bx cx di ds dx es Top
// Preserved: bp si sp
fn0800_831D_entry:
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_831D:
	word16 ax_15
	branch wArg02 <=u 0x0001 l0800_8332
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_8332:
	ax_15 = wArg02
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_8329:
	ax_15 = fn0800_0C08(wArg02, out cx)
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_8334:
	selector es_38 = SLICE(ptrArg04, selector, 16)
	word16 bx_37 = (word16) (ptrArg04 + ax_15 *s 0x000C)
	word16 v14_39 = Mem33[es_38:bx_37:word16] + 0x0001
	Mem40[es_38:bx_37:word16] = v14_39
	Mem44[es_38:bx_37 + 0x0002:word16] = Mem40[es_38:bx_37 + 0x0002:word16] + (v14_39 <u 0x0000)
	word16 cx_62
	word16 di_63
	selector ds_64
	fn0800_401E(cx, ds, wArg02, Mem51[ds:0x29DB:word16], Mem44[ds:0x29DD:word16], out cx_62, out dx_95, out bx_96, out di_63, out es_97, out ds_64, out Top_98)
	diOut = di_63
	dsOut = ds_64
	return cx_62
// DataOut:
// DataOut (flags):
// SymbolicIn:

fn0800_831D_exit:
// DataOut:
// DataOut (flags):
// SymbolicIn:



word16 fn0800_8359(selector ds, ptr16 & cxOut, ptr16 & dxOut, ptr16 & dsOut)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  ds:[0..15] ss:[0..15]
// LiveOut: ax cx ds dx
// Trashed: SCZO ax bx cx di ds dx es Top
// Preserved: bp sp
fn0800_8359_entry:
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_8359:
	// Failed to bind call argument.
	// Please report this issue at https://github.com/uxmal/reko
	word16 stackArg4 = <invalid>
	word16 cx_20
	selector ds_25
	word16 ax_18 = fn0800_3DCF(ds, SEQ(Mem7[ds:0x29E5:word16], Mem14[ds:0x29E3:word16]), stackArg4, out cx_20, out dx_73, out di_74, out es_75, out ds_25, out Top_76)
	byte al_31 = (byte) ax_18
	word16 dx_42 = Mem32[ds_25:0x2E4B:word16]
	word16 ax_45 = Mem32[ds_25:((DPB(DPB(ax_18, Mem32[ds_25:0x2E4B:byte] ^ al_31, 0), 0x00, 8) & 0x00FF) << 0x0001) + 0x2A29:word16] ^ dx_42 >>u 0x08
	Mem46[ds_25:0x2E4B:word16] = ax_45
	word16 v17_47 = Mem46[ds_25:0x29FF:word16] + 0x0001
	Mem48[ds_25:0x29FF:word16] = v17_47
	Mem52[ds_25:0x2A01:word16] = Mem48[ds_25:0x2A01:word16] + (v17_47 <u 0x0000)
	cxOut = DPB(cx_20, 0x08, 0)
	dxOut = dx_42 >>u 0x08
	dsOut = ds_25
	return DPB(ax_45, al_31, 0)
// DataOut:
// DataOut (flags):
// SymbolicIn:

fn0800_8359_exit:
// DataOut:
// DataOut (flags):
// SymbolicIn:



void fn0800_83A1(word16 cx, selector ds, segptr32 ptrArg02, selector psegArg04, word16 wArg06)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  cx:[0..15] ds:[0..15] ss:[0..15] Stack +0002:[0..31] Stack +0006:[0..15]
// LiveOut:
// Trashed: SCZO ax bx dx es Top
// Preserved: bp di si sp
fn0800_83A1_entry:
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_83A1:
	word16 di_17 = wArg06
	word16 si_18 = wArg06
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_83C4:
	si_18 = si_18 - 0x0001
	branch si_18 != 0x0000 l0800_83B0
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_83B0:
	branch Mem16[SLICE(ptrArg02, selector, 16):(word16) (ptrArg02 + si_18 *s 0x000C) + 0x000A:word16] != 0x0000 l0800_83CB
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_83C3:
	di_17 = di_17 - 0x0001
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_83CB:
	fn0800_8489(cx, ds, di_17, 0x0005)
	word16 si_63 = 0x0000
	word16 wLoc04_114 = ptrArg02 + 0x000A
	branch di_17 <=u 0x0000 l0800_8401
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_83E5:
	fn0800_8489(cx, ds, Mem74[ptrArg02:wLoc04_114:word16], 0x0004)
	wLoc04_114 = wLoc04_114 + 0x000C
	si_63 = si_63 + 0x0001
	branch si_63 <u di_17 l0800_83E5
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_8401:
	return
// DataOut:
// DataOut (flags):
// SymbolicIn:

fn0800_83A1_exit:
// DataOut:
// DataOut (flags):
// SymbolicIn:



word16 fn0800_8407(word16 cx, selector ds, word16 wArg02, segptr32 ptrArg04)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  cx:[0..15] ds:[0..15] ss:[0..15] Stack +0002:[0..15] Stack +0004:[0..15]
// LiveOut: cx
// Trashed: SCZO ax bx cx dx es Top
// Preserved: bp di si sp
fn0800_8407_entry:
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_8407:
	word16 ax_19
	branch wArg02 <=u 0x0001 l0800_8420
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_8420:
	ax_19 = wArg02
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_8417:
	ax_19 = fn0800_0C08(wArg02, out cx)
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_8422:
	selector es_44 = SLICE(ptrArg04, selector, 16)
	word16 bx_41 = (word16) (ptrArg04 + ax_19 *s 0x000C)
	fn0800_8489(cx, ds, Mem48[es_44:bx_41 + 0x0006:word16], Mem35[es_44:bx_41 + 0x000A:word16])
	branch ax_19 <=u 0x0001 l0800_845F
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_8445:
	cx = DPB(cx, ax_19 - 0x01, 0) (alias)
	fn0800_8489(cx, ds, wArg02 - (0x0001 << ax_19 - 0x01), ax_19 - 0x0001)
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_845F:
	return cx
// DataOut:
// DataOut (flags):
// SymbolicIn:

fn0800_8407_exit:
// DataOut:
// DataOut (flags):
// SymbolicIn:



word16 fn0800_8465(word16 cx, selector ds, word16 wArg02, word16 wArg04)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  cx:[0..15] ds:[0..15] ss:[0..15] Stack +0002:[0..15] Stack +0004:[0..15]
// LiveOut: cx
// Trashed: SCZO ax cx dx Top
// Preserved: bp sp
fn0800_8465_entry:
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_8465:
	branch Mem7[ds:0x2A21:word16] != 0x0002 l0800_847F
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_847F:
	fn0800_8489(cx, ds, wArg02, wArg04)
	return cx
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_8475:
	word16 cx_33
	fn0800_854B(cx, ds, wArg02, wArg04, out cx_33)
	return cx_33
// DataOut:
// DataOut (flags):
// SymbolicIn:

fn0800_8465_exit:
// DataOut:
// DataOut (flags):
// SymbolicIn:



void fn0800_8489(word16 cx, selector ds, word16 wArg02, word16 wArg04)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  cx:[0..15] ds:[0..15] ss:[0..15] Stack +0002:[0..15] Stack +0004:[0..15]
// LiveOut:
// Trashed: SCZO ax Top
// Preserved: bp bx cx di ds dx es si sp
fn0800_8489_entry:
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_8489:
	word16 di_118 = wArg02
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_853A:
	wArg04 = wArg04 - 0x0001
	branch wArg04 == 0x0000 l0800_8547
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_8547:
	return
// DataOut:
// DataOut (flags):
// SymbolicIn:

fn0800_8489_exit:
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_8544:
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_8494:
	Mem35[ds:0x2E43:word16] = Mem21[ds:0x2E43:word16] >>u 0x0001
	branch (di_118 & 0x0001) == 0x0000 l0800_84A4
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_849E:
	Mem41[ds:0x2E43:word16] = Mem35[ds:0x2E43:word16] | 0x8000
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_84A4:
	Mem49[ds:0x2E45:word16] = Mem47[ds:0x2E45:word16] + 0x0001
	di_118 = di_118 >>u 0x0001
	word16 ax_50 = Mem49[ds:0x2E45:word16]
	branch ax_50 == 0x0010 l0800_84B5
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_84B5:
	word16 cx_65
	selector ds_67
	fn0800_8624(cx, ds, DPB(ax_50, Mem49[ds:0x2E43:byte], 0), out cx_65, out dx_250, out di_251, out ds_67)
	word16 ax_108 = (word16) fn0800_8624(DPB(cx_65, 0x08, 0), ds_67, Mem58[ds_67:0x2E43:word16] >>u 0x08, out cx, out dx_252, out di_118, out ds)
	word16 si_101 = 0x4682
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_84E3:
	branch Mem98[ds:0x4E82:word16] != 0x0000 l0800_84D1
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_84D1:
	ax_108 = (word16) fn0800_8624(cx, ds, DPB(ax_108, Mem98[ds:si_101 + 0x0000:byte], 0), out cx, out dx_253, out di_118, out ds)
	Mem128[ds:0x4E82:word16] = Mem111[ds:0x4E82:word16] - 0x0001
	si_101 = si_101 + 0x0001
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_84EA:
	word16 ax_130 = Mem98[ds:0x2A01:word16]
	word16 dx_131 = Mem98[ds:0x29FF:word16]
	branch ax_130 <u Mem98[ds:0x2A05:word16] l0800_8532
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_84F7:
	branch ax_130 >u Mem98[ds:0x2A05:word16] l0800_84FF
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_84F9:
	branch dx_131 <=u Mem98[ds:0x2A03:word16] l0800_8532
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_84FF:
	ui32 ax_dx_188 = SEQ(Mem98[ds:0x2A01:word16], Mem98[ds:0x29FF:word16]) - SEQ(Mem98[ds:0x2A05:word16], Mem98[ds:0x2A03:word16])
	word16 dx_141 = (word16) ax_dx_188
	word16 ax_144 = SLICE(ax_dx_188, word16, 16)
	branch ax_144 <u Mem98[ds:0x4E8A:word16] l0800_8532
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_8514:
	branch ax_144 >u Mem98[ds:0x4E8A:word16] l0800_851C
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_8516:
	branch dx_141 <=u Mem98[ds:0x4E88:word16] l0800_8532
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_851C:
	ui32 ax_dx_190 = SEQ(Mem98[ds:0x2A01:word16], Mem98[ds:0x29FF:word16]) - SEQ(Mem98[ds:0x2A05:word16], Mem98[ds:0x2A03:word16])
	Mem159[ds:0x4E8A:word16] = SLICE(ax_dx_190, word16, 16)
	Mem160[ds:0x4E88:word16] = (word16) ax_dx_190
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_8532:
	Mem165[ds:0x2E45:word16] = 0x0000
	Mem166[ds:0x2E43:word16] = 0x0000
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_84B2:
// DataOut:
// DataOut (flags):
// SymbolicIn:



byte fn0800_854B(byte ch, selector ds, word16 wArg02, word16 wArg04, ptr16 & cxOut)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  cx:[8..15] ds:[0..15] ss:[0..15] Stack +0002:[0..15] Stack +0004:[0..15]
// LiveOut: ax cx
// Trashed: SCZO ax cx Top
// Preserved: bp bx di ds dx es si sp
fn0800_854B_entry:
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_854B:
	word16 cx_100 = DPB(cx, bArg04 - 0x01, 0)
	word16 di_101 = 0x0001 << bArg04 - 0x01
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_85EF:
	wArg04 = wArg04 - 0x0001
	branch wArg04 == 0x0000 l0800_85FC
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_85FC:
	cxOut = cx_100
	return (byte) wArg04
// DataOut:
// DataOut (flags):
// SymbolicIn:

fn0800_854B_exit:
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_85F9:
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_855D:
	Mem39[ds:0x2E43:word16] = Mem25[ds:0x2E43:word16] << 0x0001
	branch (wArg02 & di_101) == 0x0000 l0800_856A
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_8566:
	Mem45[ds:0x2E43:word16] = Mem39[ds:0x2E43:word16] + 0x0001
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_856A:
	Mem52[ds:0x2E45:word16] = Mem50[ds:0x2E45:word16] + 0x0001
	di_101 = di_101 >>u 0x0001
	word16 ax_53 = Mem52[ds:0x2E45:word16]
	branch ax_53 != 0x0008 l0800_85EF
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_8578:
	word16 ax_64 = (word16) fn0800_8624(cx_100, ds, DPB(ax_53, Mem52[ds:0x2E43:byte], 0), out cx_100, out dx_241, out di_101, out ds)
	word16 si_77 = 0x4682
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_8598:
	branch Mem81[ds:0x4E82:word16] != 0x0000 l0800_8586
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_8586:
	ax_64 = (word16) fn0800_8624(cx_100, ds, DPB(ax_64, Mem81[ds:si_77 + 0x0000:byte], 0), out cx_100, out dx_242, out di_101, out ds)
	Mem111[ds:0x4E82:word16] = Mem94[ds:0x4E82:word16] - 0x0001
	si_77 = si_77 + 0x0001
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_859F:
	word16 ax_113 = Mem81[ds:0x2A01:word16]
	word16 dx_114 = Mem81[ds:0x29FF:word16]
	branch ax_113 <u Mem81[ds:0x2A05:word16] l0800_85E7
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_85AC:
	branch ax_113 >u Mem81[ds:0x2A05:word16] l0800_85B4
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_85AE:
	branch dx_114 <=u Mem81[ds:0x2A03:word16] l0800_85E7
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_85B4:
	ui32 ax_dx_172 = SEQ(Mem81[ds:0x2A01:word16], Mem81[ds:0x29FF:word16]) - SEQ(Mem81[ds:0x2A05:word16], Mem81[ds:0x2A03:word16])
	word16 dx_124 = (word16) ax_dx_172
	word16 ax_127 = SLICE(ax_dx_172, word16, 16)
	branch ax_127 <u Mem81[ds:0x4E8A:word16] l0800_85E7
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_85C9:
	branch ax_127 >u Mem81[ds:0x4E8A:word16] l0800_85D1
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_85CB:
	branch dx_124 <=u Mem81[ds:0x4E88:word16] l0800_85E7
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_85D1:
	ui32 ax_dx_174 = SEQ(Mem81[ds:0x2A01:word16], Mem81[ds:0x29FF:word16]) - SEQ(Mem81[ds:0x2A05:word16], Mem81[ds:0x2A03:word16])
	Mem142[ds:0x4E8A:word16] = SLICE(ax_dx_174, word16, 16)
	Mem143[ds:0x4E88:word16] = (word16) ax_dx_174
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_85E7:
	Mem148[ds:0x2E45:word16] = 0x0000
	Mem149[ds:0x2E43:word16] = 0x0000
// DataOut:
// DataOut (flags):
// SymbolicIn:



word16 fn0800_8600(word16 cx, byte dh, selector ds, byte bArg02, ptr16 & dxOut, ptr16 & diOut, ptr16 & dsOut)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  cx:[0..15] ds:[0..15] dx:[8..15] ss:[0..15] Stack +0002:[0..15]
// LiveOut: cx di ds dx
// Trashed: SCZO ax bx cx di ds dx es Top
// Preserved: bp sp
fn0800_8600_entry:
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_8600:
	word16 dx_15 = DPB(dx, bArg02, 0)
	word16 dx_56 = DPB(dx, bArg02, 0)
	branch Mem7[ds:0x2E45:word16] == 0x0000 l0800_861B
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_861B:
	word16 dx_19
	word16 cx_22
	word16 di_23
	selector ds_24
	fn0800_8624(cx, ds, dx_15, out cx_22, out dx_19, out di_23, out ds_24)
	dxOut = dx_19
	diOut = di_23
	dsOut = ds_24
	return cx_22
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_860D:
	Mem35[ds:Mem7[ds:0x4E82:word16] + 0x4682:byte] = bArg02
	Mem37[ds:0x4E82:word16] = Mem35[ds:0x4E82:word16] + 0x0001
	dxOut = dx_56
	diOut = di
	dsOut = ds
	return cx
// DataOut:
// DataOut (flags):
// SymbolicIn:

fn0800_8600_exit:
// DataOut:
// DataOut (flags):
// SymbolicIn:



byte fn0800_8624(word16 cx, selector ds, byte bArg02, ptr16 & cxOut, ptr16 & dxOut, ptr16 & diOut, ptr16 & dsOut)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  cx:[0..15] ds:[0..15] ss:[0..15] Stack +0002:[0..15]
// LiveOut: ax cx di ds dx
// Trashed: SCZO ax bx cx di ds dx es Top
// Preserved: bp sp
fn0800_8624_entry:
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_8624:
	word16 ax_10 = Mem7[ds:0x2A05:word16]
	word16 dx_11 = Mem7[ds:0x2A03:word16]
	branch ax_10 >u Mem7[ds:0x4E86:word16] l0800_8678
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_8634:
	branch ax_10 <u Mem7[ds:0x4E86:word16] l0800_863C
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_8636:
	branch dx_11 >=u Mem7[ds:0x4E84:word16] l0800_8678
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_863C:
	// Failed to bind call argument.
	// Please report this issue at https://github.com/uxmal/reko
	word16 stackArg6 = <invalid>
	word16 cx_37
	word16 ax_35 = fn0800_4047(cx, ds, DPB(ax_10, bArg02, 0), SEQ(Mem7[ds:0x29E1:word16], Mem23[ds:0x29DF:word16]), stackArg6, out cx_37, out dx_114, out bx_115, out di, out es_116, out ds, out Top_117)
	word16 dx_57 = Mem32[ds:0x2E49:word16]
	ax_10 = Mem32[ds:((DPB(DPB(ax_35, Mem32[ds:0x2E49:byte] ^ bArg02, 0), 0x00, 8) & 0x00FF) << 0x0001) + 0x2A29:word16] ^ dx_57 >>u 0x08
	Mem61[ds:0x2E49:word16] = ax_10
	word16 v18_62 = Mem61[ds:0x2A03:word16] + 0x0001
	Mem63[ds:0x2A03:word16] = v18_62
	Mem67[ds:0x2A05:word16] = Mem63[ds:0x2A05:word16] + (v18_62 <u 0x0000)
	cx = DPB(cx_37, 0x08, 0) (alias)
	dx_11 = dx_57 >>u 0x08
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_8678:
	cxOut = cx
	dxOut = dx_11
	diOut = di
	dsOut = ds
	return (byte) ax_10
// DataOut:
// DataOut (flags):
// SymbolicIn:

fn0800_8624_exit:
// DataOut:
// DataOut (flags):
// SymbolicIn:



word16 fn0800_867A(word16 wArg04, selector psegArg06, word16 wArg08, selector psegArg0A, ptr16 & dsOut)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  Stack +0004:[0..15] Stack +0006:[0..15] Stack +0008:[0..15] Stack +000A:[0..15]
// LiveOut: bp ds sp
// Trashed: SCZDO bp bx cx di ds dx es si sp Top
// Preserved:
fn0800_867A_entry:
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_867A:
	word16 si_27 = fn0800_87EF(wArg04 + 0x0004, psegArg06)
	byte al_37 = Mem32[psegArg06:si_27 + 0x000A:byte] * 0x02 + true
	selector ds_20 = psegArg06
	word16 di_189 = wArg08
	selector es_22 = psegArg0A
	word16 si_101 = si_27 + 0x000B
	byte al_115 = al_37 * 0x02
	word16 ax_241 = DPB(ax_25, al_37 * 0x02, 0)
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_8745:
	word16 bx_26
	byte al_41 = al_115 * 0x02
	word16 ax_240 = DPB(ax_241, al_41, 0)
	bool Z_56 = SLICE(cond(al_41), bool, 2)
	al_115 = al_41
	branch al_41 <u 0x00 l0800_8751
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_8749:
	Mem50[es_22:di_189:byte] = Mem46[ds_20:si_101:byte]
	si_101 = si_101 + 0x0001
	di_189 = di_189 + 0x0001
	al_115 = al_41 * 0x02
	ax_240 = DPB(ax_241, al_41 * 0x02, 0) (alias)
	Z_56 = SLICE(cond(al_41 * 0x02), bool, 2) (alias)
	branch al_41 * 0x02 >=u 0x00 l0800_8744
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_8751:
	word16 ax_239 = DPB(ax_240, al_115, 0)
	branch Z_56 l0800_873C
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_873C:
	al_115 = Mem61[ds_20:si_101:byte] * 0x02 + (al_41 <u 0x00)
	si_101 = si_101 + 0x0001
	ax_239 = DPB(ax_240, al_115, 0) (alias)
	ax_240 = DPB(ax_240, al_115, 0) (alias)
	branch al_115 <u 0x00 l0800_8753
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_8741:
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_8744:
	Mem76[es_22:di_189:byte] = Mem70[ds_20:si_101:byte]
	ax_241 = DPB(ax_240, al_115, 0) (alias)
	si_101 = si_101 + 0x0001
	di_189 = di_189 + 0x0001
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_8753:
	byte al_83 = al_115 * 0x02
	word16 cx_146 = 0x0002
	byte bh_171 = 0x00
	word16 bx_465 = DPB(bx_26, 0x00, 8)
	bx_465 = DPB(bx_26, 0x00, 8) (alias)
	word16 bx_464 = DPB(bx_465, 0x00, 8)
	bx_464 = DPB(bx_465, 0x00, 8) (alias)
	bx_460 = DPB(bx_464, 0x00, 8) (alias)
	word16 bx_463 = DPB(bx_464, 0x00, 8)
	bx_463 = DPB(bx_464, 0x00, 8) (alias)
	bx_462 = DPB(bx_463, 0x00, 8) (alias)
	word16 bx_462 = DPB(bx_463, 0x00, 8)
	word16 bx_484 = DPB(bx_465, 0x00, 8)
	bx_484 = DPB(bx_465, 0x00, 8) (alias)
	word16 bx_483 = DPB(bx_484, 0x00, 8)
	bx_483 = DPB(bx_484, 0x00, 8) (alias)
	bx_462 = DPB(bx_483, 0x00, 8) (alias)
	word16 bx_490 = DPB(bx_483, 0x00, 8)
	bx_490 = DPB(bx_483, 0x00, 8) (alias)
	bx_462 = DPB(bx_490, 0x00, 8) (alias)
	word16 bx_461 = DPB(bx_462, 0x00, 8)
	bx_461 = DPB(bx_462, 0x00, 8) (alias)
	word16 bx_460 = DPB(bx_461, 0x00, 8)
	word16 bx_498 = DPB(bx_461, 0x00, 8)
	bx_498 = DPB(bx_461, 0x00, 8) (alias)
	word16 bx_664 = DPB(bx_490, 0x00, 8)
	word16 ax_238 = DPB(ax_239, al_83, 0)
	bool C_91 = SLICE(cond(al_83), bool, 1)
	branch al_83 == 0x00 l0800_879B
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_879B:
	al_83 = Mem61[ds_20:si_101:byte] * 0x02 + (al_83 <u 0x00)
	si_101 = si_101 + 0x0001
	ax_238 = DPB(ax_239, al_83, 0) (alias)
	C_91 = SLICE(cond(al_83), bool, 1) (alias)
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_875C:
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_875F:
	word16 ax_236
	word16 ax_253
	branch C_91 l0800_86E6
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_86E6:
	byte al_106 = al_83 * 0x02
	word16 ax_589 = DPB(ax_238, al_106, 0)
	bool C_105 = SLICE(cond(al_106), bool, 1)
	branch al_106 == 0x00 l0800_86BC
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_86BC:
	al_106 = Mem61[ds_20:si_101:byte] * 0x02 + (al_106 <u 0x00)
	si_101 = si_101 + 0x0001
	ax_589 = DPB(ax_238, al_106, 0) (alias)
	C_105 = SLICE(cond(al_106), bool, 1) (alias)
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_86EA:
	al_115 = al_106 * 0x02
	cx_146 = DPB(0x0002, C_105 + 0x04, 0) (alias)
	word16 ax_588 = DPB(ax_589, al_115, 0)
	bool C_123 = SLICE(cond(al_115), bool, 1)
	branch al_115 == 0x00 l0800_86C2
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_86C2:
	al_115 = Mem61[ds_20:si_101:byte] * 0x02 + (al_115 <u 0x00)
	si_101 = si_101 + 0x0001
	ax_588 = DPB(ax_589, al_115, 0) (alias)
	C_123 = SLICE(cond(al_115), bool, 1) (alias)
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_86F0:
	ax_236 = DPB(ax_588, al_115, 0) (alias)
	bx_906 = bx_462
	branch C_123 l0800_8701
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_86F2:
	byte al_129 = al_115 * 0x02
	word16 ax_587 = DPB(ax_588, al_129, 0)
	al_115 = al_129
	branch al_129 == 0x00 l0800_86C8
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_86C8:
	al_115 = Mem61[ds_20:si_101:byte] * 0x02 + (al_129 <u 0x00)
	si_101 = si_101 + 0x0001
	ax_587 = DPB(ax_588, al_115, 0) (alias)
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_86F9:
	byte cl_154 = (byte) (cx_146 - 0x0001) * 0x02 + (al_129 <u 0x00)
	ax_236 = DPB(ax_587, al_115, 0) (alias)
	word16 ax_585 = DPB(ax_587, al_115, 0)
	cx_146 = DPB(cx_146 - 0x0001, cl_154, 0) (alias)
	bx_907 = bx_462
	branch cl_154 == 0x09 l0800_86A7
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_86A7:
	word16 cx_177 = DPB(cx_146, 0x04, 0)
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_86A9:
	byte al_159 = al_115 * 0x02
	bx_664 = DPB(bx_664, bh_171, 8) (alias)
	bx_664 = DPB(bx_664, bh_171, 8) (alias)
	ax_585 = DPB(ax_585, al_159, 0) (alias)
	al_115 = al_159
	branch al_159 == 0x00 l0800_86A1
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_86A1:
	al_115 = Mem61[ds_20:si_101:byte] * 0x02 + (al_159 <u 0x00)
	si_101 = si_101 + 0x0001
	ax_585 = DPB(ax_585, al_115, 0) (alias)
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_86AD:
	bh_171 = bh_171 * 0x02 + (al_159 <u 0x00)
	word16 ax_584 = DPB(ax_585, al_115, 0)
	ax_603 = DPB(ax_584, al_115, 0) (alias)
	ax_241 = DPB(ax_584, al_115, 0) (alias)
	bx_26 = DPB(bx_664, bh_171, 8) (alias)
	cx_177 = cx_177 - 0x0001
	branch cx_177 != 0x0000 l0800_86A9
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_86B1:
	word16 cx_183 = DPB(cx_177, (bh_171 + 0x03) * 0x02, 0)
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_86B7:
	branch cx_183 == 0x0000 l0800_86B9
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_86B9:
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_86B7_1:
	Mem190[es_22:di_189:word16] = Mem186[ds_20:si_101:word16]
	si_101 = si_101 + 0x0002
	di_189 = di_189 + 0x0002
	cx_183 = cx_183 - 0x0001
	ax_584 = ax_603
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_8761:
	al_115 = al_83 * 0x02
	word16 ax_237 = DPB(ax_238, al_115, 0)
	bool C_199 = SLICE(cond(al_115), bool, 1)
	branch al_115 == 0x00 l0800_87A0
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_87A0:
	al_115 = Mem61[ds_20:si_101:byte] * 0x02 + (al_115 <u 0x00)
	si_101 = si_101 + 0x0001
	ax_237 = DPB(ax_238, al_115, 0) (alias)
	C_199 = SLICE(cond(al_115), bool, 1) (alias)
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_8765:
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_8768:
	ax_253 = DPB(ax_237, al_115, 0) (alias)
	branch C_199 l0800_8728
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_876A:
	byte al_207 = al_115 * 0x02
	cx_146 = 0x0003
	ax_236 = DPB(ax_237, al_207, 0) (alias)
	bool C_215 = SLICE(cond(al_207), bool, 1)
	branch al_207 == 0x00 l0800_87A5
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_87A5:
	byte al_216 = Mem61[ds_20:si_101:byte] * 0x02 + (al_207 <u 0x00)
	si_101 = si_101 + 0x0001
	ax_236 = DPB(ax_237, al_216, 0) (alias)
	C_215 = SLICE(cond(al_216), bool, 1) (alias)
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_876F:
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_8772:
	al_115 = (byte) ax_236 (alias)
	al_115 = (byte) ax_236 (alias)
	ax_236 = DPB(ax_236, al_115, 0) (alias)
	bx_908 = bx_462
	branch C_215 l0800_8701
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_8774:
	byte cl_223 = Mem61[ds_20:si_101:byte]
	si_101 = si_101 + 0x0001
	word16 cx_315 = DPB(0x0003, cl_223, 0)
	branch cl_223 == 0x00 l0800_87B4
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_87B4:
	word16 ax_284 = ds_20 + (si_101 >>u 0x04)
	byte al_288 = (byte) ax_236
	di_189 = (di_189 & 0x000F) + 0x8000
	es_22 = es_22 + (di_189 >>u 0x04) - 0x0800
	si_101 = si_101 & 0x000F
	bx_26 = si_101 >>u 0x04
	ds_20 = ax_284
	al_115 = al_288 * 0x02
	word16 ax_579 = DPB(ax_236, al_288 * 0x02, 0)
	bool C_294 = SLICE(cond(al_288 * 0x02), bool, 1)
	branch al_288 * 0x02 != 0x00 l0800_87E3
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_87DD:
	al_115 = Mem262[ax_284:si_101 & 0x000F:byte] * 0x02 + (al_288 * 0x02 <u 0x00)
	si_101 = (si_101 & 0x000F) + 0x0001
	ax_579 = DPB(ax_236, al_115, 0) (alias)
	C_294 = SLICE(cond(al_115), bool, 1) (alias)
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_87E3:
	ax_241 = DPB(ax_579, al_115, 0) (alias)
	branch C_294 l0800_87E8
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_87E8:
	dsOut = psegLoc0A
	return si
// DataOut:
// DataOut (flags):
// SymbolicIn:

fn0800_867A_exit:
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_87E5:
	Mem46 = Mem262
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_877B:
	cx_146 = cx_315 + 0x0008
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_8701:
	al_115 = al_115 * 0x02
	word16 ax_608 = DPB(ax_236, al_115, 0)
	bool C_333 = SLICE(cond(al_115), bool, 1)
	branch al_115 == 0x00 l0800_86CE
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_86CE:
	al_115 = Mem61[ds_20:si_101:byte] * 0x02 + (al_115 <u 0x00)
	si_101 = si_101 + 0x0001
	ax_608 = DPB(ax_236, al_115, 0) (alias)
	C_333 = SLICE(cond(al_115), bool, 1) (alias)
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_8705:
	ax_253 = DPB(ax_608, al_115, 0) (alias)
	branch C_333 l0800_8728
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_8707:
	byte al_339 = al_115 * 0x02
	word16 ax_615 = DPB(ax_608, al_339, 0)
	bool C_347 = SLICE(cond(al_339), bool, 1)
	branch al_339 == 0x00 l0800_86D4
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_86D4:
	al_339 = Mem61[ds_20:si_101:byte] * 0x02 + (al_339 <u 0x00)
	si_101 = si_101 + 0x0001
	ax_615 = DPB(ax_608, al_339, 0) (alias)
	C_347 = SLICE(cond(al_339), bool, 1) (alias)
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_870E:
	al_115 = al_339 * 0x02
	word16 bx_497 = DPB(bx_498, C_347, 8)
	bx_497 = DPB(bx_498, C_347, 8) (alias)
	word16 bx_509 = DPB(bx_497, C_347, 8)
	bx_509 = DPB(bx_497, C_347, 8) (alias)
	word16 ax_614 = DPB(ax_615, al_115, 0)
	bool C_371 = SLICE(cond(al_115), bool, 1)
	branch al_115 == 0x00 l0800_86DA
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_86DA:
	al_115 = Mem61[ds_20:si_101:byte] * 0x02 + (al_115 <u 0x00)
	si_101 = si_101 + 0x0001
	ax_614 = DPB(ax_615, al_115, 0) (alias)
	C_371 = SLICE(cond(al_115), bool, 1) (alias)
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_8714:
	word16 bx_506
	byte bh_393
	ax_253 = DPB(ax_614, al_115, 0) (alias)
	word16 ax_623 = DPB(ax_614, al_115, 0)
	branch C_371 l0800_8784
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_8784:
	byte al_386
	byte al_377 = al_115 * 0x02
	word16 ax_626 = DPB(ax_614, al_377, 0)
	branch al_377 == 0x00 l0800_87AA
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_87AA:
	al_386 = Mem61[ds_20:si_101:byte] * 0x02 + (al_377 <u 0x00)
	si_101 = si_101 + 0x0001
	ax_626 = DPB(ax_614, al_386, 0) (alias)
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_8788:
	al_386 = al_377
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_878B:
	byte bh_392 = C_347 * 0x02 + (al_377 <u 0x00)
	al_115 = al_386 * 0x02
	bh_393 = bh_392 | 0x04
	word16 bx_508 = DPB(bx_509, bh_392 | 0x04, 8)
	bx_508 = DPB(bx_509, bh_392 | 0x04, 8) (alias)
	bx_460 = DPB(bx_508, bh_392 | 0x04, 8) (alias)
	bx_506 = DPB(bx_508, bh_392 | 0x04, 8) (alias)
	word16 ax_625 = DPB(ax_626, al_115, 0)
	bool C_403 = SLICE(cond(al_115), bool, 1)
	branch al_115 == 0x00 l0800_87AF
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_87AF:
	al_115 = Mem61[ds_20:si_101:byte] * 0x02 + (al_115 <u 0x00)
	si_101 = si_101 + 0x0001
	ax_625 = DPB(ax_626, al_115, 0) (alias)
	C_403 = SLICE(cond(al_115), bool, 1) (alias)
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_8794:
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_8797:
	ax_253 = DPB(ax_625, al_115, 0) (alias)
	ax_623 = DPB(ax_625, al_115, 0) (alias)
	branch C_403 l0800_8728
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_8799:
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_8716:
	bx_460 = DPB(bx_497, C_347, 8) (alias)
	branch C_347 != false l0800_8728
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_871D:
	bh_393 = C_347 + 0x01
	bx_506 = DPB(bx_497, bh_393, 8) (alias)
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_8722:
	byte al_416 = al_115 * 0x02
	word16 bx_505 = DPB(bx_506, bh_393, 8)
	bx_505 = DPB(bx_506, bh_393, 8) (alias)
	word16 ax_622 = DPB(ax_623, al_416, 0)
	al_115 = al_416
	branch al_416 == 0x00 l0800_86E0
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_86E0:
	al_115 = Mem61[ds_20:si_101:byte] * 0x02 + (al_416 <u 0x00)
	si_101 = si_101 + 0x0001
	ax_622 = DPB(ax_623, al_115, 0) (alias)
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_8726:
	ax_253 = DPB(ax_622, al_115, 0) (alias)
	bx_460 = DPB(bx_505, bh_393 * 0x02 + (al_416 <u 0x00), 8) (alias)
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_8728:
	bx_26 = DPB(bx_460, Mem61[ds_20:si_101:byte], 0) (alias)
	__cli()
	word16 ax_606 = DPB(ax_253, al_115, 0)
	ax_639 = DPB(ax_606, al_115, 0) (alias)
	ax_241 = DPB(ax_606, al_115, 0) (alias)
	word16 si_444 = si_101 + 0x0001
	word16 si_522 = di_189 - 0x0001 - bx_26
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_8733:
	branch cx_146 == 0x0000 l0800_8736
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_8736:
	__sti()
	si_101 = si_444
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_8733_1:
	Mem533[es_22:di_189:byte] = Mem529[ds_20:si_522:byte]
	si_522 = si_522 + 0x0001
	di_189 = di_189 + 0x0001
	cx_146 = cx_146 - 0x0001
	ax_606 = ax_639
// DataOut:
// DataOut (flags):
// SymbolicIn:



word16 fn0800_87EF(word16 si, selector ds)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  ds:[0..15] si:[0..15]
// LiveOut: si
// Trashed: ax bx si Top
// Preserved: sp
fn0800_87EF_entry:
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_87EF:
	word16 si_7 = fn0800_87F4(si, ds)
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_87F2_thunk_fn0800_87F4:
	return fn0800_87F4(si_7, ds)
// DataOut:
// DataOut (flags):
// SymbolicIn:

fn0800_87EF_exit:
// DataOut:
// DataOut (flags):
// SymbolicIn:



word16 fn0800_87F4(word16 si, selector ds)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  ds:[0..15] si:[0..15]
// LiveOut: si
// Trashed: ax si Top
// Preserved: sp
fn0800_87F4_entry:
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_87F4:
	return si + 0x0002
// DataOut:
// DataOut (flags):
// SymbolicIn:

fn0800_87F4_exit:
// DataOut:
// DataOut (flags):
// SymbolicIn:



void fn0800_87F8(selector ds)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  ds:[0..15]
// LiveOut:
// Trashed: SCZDO ax cx es Top
// Preserved: di sp
fn0800_87F8_entry:
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_87F8:
	ptr32 es_di_10 = Mem7[ds:0x2E37:segptr32]
	selector es_80 = SLICE(es_di_10, selector, 16)
	word16 di_66 = (word16) es_di_10
	word16 ax_11 = Mem7[ds:0x2E31:word16]
	word16 cx_12 = 0x8000
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_8804:
	branch cx_12 == 0x0000 l0800_8806
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_8806:
	ptr32 es_di_16 = Mem15[ds:0x2E33:segptr32]
	selector es_78 = SLICE(es_di_16, selector, 16)
	word16 di_60 = (word16) es_di_16
	word16 ax_17 = Mem15[ds:0x2E31:word16]
	word16 cx_18 = 0x8000
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_8810:
	branch cx_18 == 0x0000 l0800_8812
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_8812:
	ptr32 es_di_22 = Mem21[ds:0x2E3B:segptr32]
	selector es_76 = SLICE(es_di_22, selector, 16)
	word16 di_54 = (word16) es_di_22
	word16 cx_23 = Mem21[ds:0x2E31:word16]
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_881C:
	branch cx_23 == 0x0000 l0800_881E
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_881E:
	ptr32 es_di_30 = Mem29[ds:0x2E3F:segptr32]
	selector es_70 = SLICE(es_di_30, selector, 16)
	word16 di_37 = (word16) es_di_30
	word16 ax_31 = 0x0000
	word16 cx_34 = Mem29[ds:0x2E31:word16]
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_8828:
	Mem38[es_70:di_37:word16] = ax_31
	di_37 = di_37 + 0x0002
	ax_31 = ax_31 + 0x0001
	cx_34 = cx_34 - 0x0001
	branch cx_34 != 0x0000 l0800_8828
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_882C:
	Mem45[ds:0x2E2D:word16] = cx_34
	return
// DataOut:
// DataOut (flags):
// SymbolicIn:

fn0800_87F8_exit:
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_881C_1:
	Mem55[es_76:di_54:word16] = 0x0000
	di_54 = di_54 + 0x0002
	cx_23 = cx_23 - 0x0001
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_8810_1:
	Mem61[es_78:di_60:word16] = ax_17
	di_60 = di_60 + 0x0002
	cx_18 = cx_18 - 0x0001
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_8804_1:
	Mem67[es_80:di_66:word16] = ax_11
	di_66 = di_66 + 0x0002
	cx_12 = cx_12 - 0x0001
// DataOut:
// DataOut (flags):
// SymbolicIn:



word16 fn0800_8832(selector ds)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  ds:[0..15]
// LiveOut: cx
// Trashed: SCZDO ax bx cx dx es Top
// Preserved: di si sp
fn0800_8832_entry:
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_8832:
	word16 cx_14 = fn0800_889A(ds)
	branch Mem10[ds:0x2E29:word16] <u 0x0002 l0800_8897
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_883E:
	branch Mem10[ds:0x2E65:word16] - Mem10[ds:0x2E6D:word16] <u 0x0003 l0800_8897
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_884D:
	word16 ax_30 = Mem10[ds:0x2E2D:word16]
	word16 si_28 = Mem10[ds:0x2E29:word16]
	word16 di_29 = Mem10[ds:0x2E2B:word16]
	word16 ax_33 = ax_30 + 0x0001
	branch ax_30 + 0x0001 != Mem32[ds:0x2E31:word16] l0800_8865
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_8863:
	ax_33 = 0x0000
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_8865:
	Mem41[ds:0x2E2D:word16] = ax_33
	Mem43[ds:0x2E6D:word16] = Mem41[ds:0x2E6D:word16] + 0x0001
	cx_14 = fn0800_889A(ds)
	Mem56[ds:0x2E6D:word16] = Mem43[ds:0x2E6D:word16] - 0x0001
	Mem59[ds:0x2E2D:word16] = ax_30
	branch Mem59[ds:0x2E29:word16] <=u si_28 l0800_888F
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_888F:
	Mem64[ds:0x2E29:word16] = si_28
	Mem66[ds:0x2E2B:word16] = di_29
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_887D:
	Mem67[ds:0x2E29:word16] = 0x0001
	Mem68[ds:0x2E2B:word16] = 0x0000
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_8897:
	return cx_14
// DataOut:
// DataOut (flags):
// SymbolicIn:

fn0800_8832_exit:
// DataOut:
// DataOut (flags):
// SymbolicIn:



word16 fn0800_889A(selector ds)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  ds:[0..15]
// LiveOut: cx
// Trashed: SCZDO ax bx cx dx es Top
// Preserved: di ds si sp
fn0800_889A_entry:
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_889A:
	Mem13[ds:0x2E2B:word16] = 0x0000
	Mem14[ds:0x2E29:word16] = 0x0001
	ptr32 es_di_15 = Mem14[ds:0x2E6D:segptr32]
	word16 ax_18 = Mem14[es_di_15:word16]
	Mem19[ds:0x4E90:word16] = ax_18
	word16 di_17 = (word16) es_di_15
	word16 dx_22 = Mem19[ds:0x2E69:word16] - (di_17 + 0x0001)
	selector es_16 = SLICE(es_di_15, selector, 16)
	byte al_199 = (byte) ax_18
	word16 di_20 = di_17 + 0x0001
	bool Z_33 = SLICE(cond(dx_22), bool, 2)
	word16 cx_100 = dx_22
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_88BC:
	branch cx_100 == 0x0000 l0800_88BE
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_88BC_1:
	Z_33 = SLICE(cond(al_199 - Mem19[es_16:di_307:byte]), bool, 2) (alias)
	di_20 = di_307 + 0x0001
	cx_100 = cx_100 - 0x0001
	di_307 = di_20
	branch al_199 != Mem19[es_16:di_307:byte] l0800_88BC
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_88BE:
	branch Z_33 l0800_88C1
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_88C0:
	cx_100 = cx_100 - 0x0001
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_88C1:
	Mem54[ds:0x4E94:word16] = Mem19[ds:0x2E69:word16] - (word16) Mem19[ds:0x2E6D:segptr32]
	word16 dx_44 = dx_22 - cx_100
	word16 ax_185 = Mem54[Mem54[ds:0x2E39:selector]:Mem54[ds:0x4E90:word16] << 0x0001:word16]
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_88DC:
	branch ax_185 != Mem62[ds:0x2E31:word16] l0800_88E5
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_88E5:
	word16 di_66 = ax_185 << 0x0001
	Mem69[ds:0x4E92:word16] = Mem62[Mem62[ds:0x2E41:selector]:di_66:word16]
	word16 bx_70 = Mem69[ds:0x2E2D:word16]
	branch bx_70 >u ax_185 l0800_8903
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_88FC:
	bx_70 = bx_70 + Mem69[ds:0x2E31:word16]
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_8903:
	ptr32 es_si_80 = Mem69[ds:0x2E6D:segptr32]
	word16 bx_110 = bx_70 - ax_185
	branch Mem69[ds:0x4E90:word16] != Mem69[SLICE(es_si_80, selector, 16):(word16) es_si_80 - bx_110:word16] l0800_897E
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_8914:
	cx_100 = Mem69[Mem69[ds:0x2E3D:selector]:di_66:word16]
	branch cx_100 <=u bx_110 l0800_892D
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_892D:
	branch cx_100 <=u dx_44 l0800_893A
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_8931:
	bx_110 = bx_110 - (cx_100 - dx_44)
	cx_100 = dx_44
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_893A:
	branch cx_100 != dx_44 l0800_8963
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_893E:
	ptr32 es_di_106 = Mem69[ds:0x2E6D:segptr32]
	word16 di_108 = (word16) es_di_106 + cx_100
	word16 ax_113 = Mem69[ds:0x4E94:word16] - cx_100
	selector es_215 = SLICE(es_di_106, selector, 16)
	word16 si_111 = di_108 - bx_110
	bool Z_135 = SLICE(cond(ax_113), bool, 2)
	word16 cx_115 = ax_113
	selector ds_124 = Mem123[ds:0x2E6F:selector]
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_8957:
	branch cx_115 == 0x0000 l0800_8959
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_8957_1:
	Z_135 = SLICE(cond(Mem123[ds_124:si_308:byte] - Mem123[es_215:di_309:byte]), bool, 2) (alias)
	si_111 = si_308 + 0x0001
	di_108 = di_309 + 0x0001
	cx_115 = cx_115 - 0x0001
	si_308 = si_111
	di_309 = di_108
	branch Mem123[ds_124:si_308:byte] != Mem123[es_215:di_309:byte] l0800_8957
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_8959:
	branch Z_135 l0800_895C
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_895B:
	cx_115 = cx_115 + 0x0001
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_895C:
	cx_100 = dx_44 + (ax_113 - cx_115)
	Mem167 = Mem123
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_8922:
	bx_110 = 0x0001
	cx_100 = dx_44
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_8963:
	branch cx_100 <=u Mem167[ds:0x2E2F:word16] l0800_896D
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_8969:
	cx_100 = Mem167[ds:0x2E2F:word16]
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_896D:
	branch cx_100 <u Mem167[ds:0x2E29:word16] l0800_897E
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_8973:
	Mem176[ds:0x2E29:word16] = cx_100
	Mem182[ds:0x2E2B:word16] = bx_110
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_897E:
	ax_185 = Mem184[ds:0x4E92:word16]
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_88E2:
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_8984:
	branch Mem62[ds:0x2E29:word16] != 0x0002 l0800_89A5
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_898B:
	branch Mem62[ds:0x2E2B:word16] <=u 0x0100 l0800_89A5
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_8996:
	Mem190[ds:0x2E29:word16] = 0x0001
	Mem191[ds:0x2E2B:word16] = 0x0000
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_89A5:
	return cx_100
// DataOut:
// DataOut (flags):
// SymbolicIn:

fn0800_889A_exit:
// DataOut:
// DataOut (flags):
// SymbolicIn:



void fn0800_89A8(selector ds, word16 wArg02)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  ds:[0..15] Stack +0002:[0..15]
// LiveOut:
// Trashed: SCZDO ax bx cx dx es Top
// Preserved: bp di sp
fn0800_89A8_entry:
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_89A8:
	word16 dx_13 = Mem11[ds:0x2E31:word16]
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_89B1:
	word16 di_17 = Mem16[ds:0x2E2D:word16]
	selector es_19 = Mem16[ds:0x2E41:selector]
	word16 ax_20 = Mem16[es_19:di_17 << 0x0001:word16]
	Mem22[es_19:di_17 << 0x0001:word16] = dx_13
	branch Mem22[ds:0x2E2D:word16] == ax_20 l0800_89EA
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_89C7:
	ptr32 es_di_25 = Mem22[ds:0x2E6D:segptr32]
	word16 di_29 = Mem22[SLICE(es_di_25, selector, 16):(word16) es_di_25 - dx_13:word16]
	Mem32[Mem22[ds:0x2E39:selector]:di_29 << 0x0001:word16] = ax_20
	branch ax_20 != dx_13 l0800_89EA
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_89E0:
	Mem36[Mem32[ds:0x2E35:selector]:di_29 << 0x0001:word16] = dx_13
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_89EA:
	word16 di_42 = Mem38[Mem38[ds:0x2E6D:segptr32]:word16]
	word16 ax_44 = Mem38[ds:0x2E2D:word16]
	selector es_45 = Mem38[ds:0x2E39:selector]
	branch Mem38[es_45:di_42 << 0x0001:word16] != dx_13 l0800_8A08
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_8A08:
	Mem54[Mem38[ds:0x2E41:selector]:Mem38[Mem38[ds:0x2E35:selector]:di_42 << 0x0001:word16] << 0x0001:word16] = ax_44
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_89FF:
	Mem55[es_45:di_42 << 0x0001:word16] = ax_44
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_8A18:
	Mem61[Mem57[ds:0x2E35:selector]:di_42 << 0x0001:word16] = ax_44
	ptr32 es_di_62 = Mem61[ds:0x2E6D:segptr32]
	word16 di_64 = (word16) es_di_62
	word16 bx_68 = Mem61[ds:0x2E69:word16] - (di_64 + 0x0001)
	selector es_63 = SLICE(es_di_62, selector, 16)
	byte al_65 = Mem61[es_di_62:byte]
	word16 di_66 = di_64 + 0x0001
	bool Z_79 = SLICE(cond(bx_68), bool, 2)
	word16 cx_70 = bx_68
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_8A2F:
	branch cx_70 == 0x0000 l0800_8A31
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_8A2F_1:
	Z_79 = SLICE(cond(al_65 - Mem61[es_63:di_233:byte]), bool, 2) (alias)
	di_66 = di_233 + 0x0001
	cx_70 = cx_70 - 0x0001
	di_233 = di_66
	branch al_65 != Mem61[es_63:di_233:byte] l0800_8A2F
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_8A31:
	branch Z_79 l0800_8A34
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_8A33:
	cx_70 = cx_70 - 0x0001
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_8A34:
	word16 bx_131 = bx_68 - cx_70
	Mem100[Mem61[ds:0x2E3D:selector]:Mem61[ds:0x2E2D:word16] << 0x0001:word16] = bx_131
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_8A86:
	word16 ax_103 = Mem102[ds:0x2E2D:word16]
	word16 ax_104 = ax_103 + 0x0001
	branch ax_103 + 0x0001 != dx_13 l0800_8A90
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_8A8E:
	ax_104 = 0x0000
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_8A90:
	Mem113[ds:0x2E2D:word16] = ax_104
	Mem115[ds:0x2E6D:word16] = Mem113[ds:0x2E6D:word16] + 0x0001
	word16 v20_120 = wArg02 - 0x0001
	wArg02 = v20_120
	branch v20_120 == 0x0000 l0800_8AA8
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_8AA8:
	return
// DataOut:
// DataOut (flags):
// SymbolicIn:

fn0800_89A8_exit:
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_8A9C:
	bx_131 = bx_131 - 0x0001
	branch bx_131 >u 0x0001 l0800_8A46
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_8A46:
	word16 di_135 = Mem121[ds:0x2E2D:word16]
	Mem138[Mem121[ds:0x2E3D:selector]:di_135 << 0x0001:word16] = bx_131
	selector es_139 = Mem138[ds:0x2E41:selector]
	word16 v22_141 = Mem138[es_139:di_135 << 0x0001:word16]
	Mem142[es_139:di_135 << 0x0001:word16] = Mem138[ds:0x2E2D:word16]
	branch Mem142[ds:0x2E2D:word16] == v22_141 l0800_8A86
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_8A63:
	ptr32 es_di_146 = Mem142[ds:0x2E6D:segptr32]
	word16 di_151 = Mem142[SLICE(es_di_146, selector, 16):(word16) es_di_146 - dx_13:word16]
	Mem154[Mem142[ds:0x2E39:selector]:di_151 << 0x0001:word16] = v22_141
	branch v22_141 != dx_13 l0800_8A86
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_8A7C:
	Mem158[Mem154[ds:0x2E35:selector]:di_151 << 0x0001:word16] = dx_13
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_8AA5:
	Mem16 = Mem121
// DataOut:
// DataOut (flags):
// SymbolicIn:



void fn0800_8ACF(word16 cx, selector ds, segptr32 ptrArg02, segptr32 ptrArg06)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  cx:[0..15] ds:[0..15] Stack +0002:[0..15] Stack +0006:[0..31]
// LiveOut:
// Trashed: SCZO ax bx dx es Top
// Preserved: bp ds sp
fn0800_8ACF_entry:
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_8ACF:
	msdos_unknown_2143()
	word16 ax_22 = DPB(DPB(ax, 0x43, 8), 0x00, 0)
	branch Test(ULT,false) l0800_8AE9
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_8AE9:
	fn0800_8D64(ds, ax_22)
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_8ADF:
	Mem34[ptrArg06:word16] = cx
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_8AED:
	return
// DataOut:
// DataOut (flags):
// SymbolicIn:

fn0800_8ACF_exit:
// DataOut:
// DataOut (flags):
// SymbolicIn:



word16 fn0800_8B0D(word16 ax, word16 cx, word16 dx, word16 bx, word16 bp, word16 si, selector es, selector ds, word16 wArg02, word16 wArg04, word16 wArg06, ptr16 & cxOut, ptr16 & dxOut, ptr16 & bxOut, ptr16 & siOut, ptr16 & esOut, ptr16 & TopOut)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  ax:[0..15] bp:[0..15] bx:[0..15] cx:[0..15] ds:[0..15] dx:[0..15] es:[0..15] si:[0..15] ss:[0..15] Stack +0002:[0..15] Stack +0004:[0..15] Stack +0006:[0..15]
// LiveOut: ax bx cx dx es si Top
// Trashed: SCZO ax bp bx cx dx es si sp Top
// Preserved:
fn0800_8B0D_entry:
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_8B0D:
	int8 Top_3 = 0
	word16 sp_26 = fp - 4
	branch wArg06 != 0x0000 l0800_8B36
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_8B18:
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_8B28:
	branch Mem18[ds:0x224E:word16] != 0x0000 l0800_8B1A
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_8B1A:
	Mem22[ds:0x224E:word16] = Mem18[ds:0x224E:word16] - 0x0001
	word16 bx_23 = Mem22[ds:0x224E:word16]
	call SEQ(0x0800, Mem22[ds:(bx_23 << 0x0001) + 0x4E96:word16]) (retsize: 2;)
		uses: ax:ax_102,bp:fp - 2,bx:bx_23 << 0x0001,cx:cx_31,ds:ds,dx:dx_104,es:es,si:wArg06,sp:sp_26,ss:ss,Stack +0000:bp,Stack +0004:wArg02,Stack +0006:wArg04,Stack +0008:wArg06,Stack +FFFFFFFE:si,Top:Top_34
		defs: ax:ax_103,cx:cx_32,dx:dx_105,sp:sp_27,Top:Top_35
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_8B2F:
	word16 bx_38
	word16 dx_39
	byte ah_49
	call SEQ(0x0800, Mem18[ds:0x2352:word16]) (retsize: 2;)
		uses: ah:fn0800_0150(out dx_39, out bx_38, out es_40),ax:ax_110,bp:fp - 2,bx:bx_38,cx:cx_31,ds:ds,dx:dx_39,es:es_40,si:wArg06,sp:sp_26,ss:ss,Stack +0000:bp,Stack +0004:wArg02,Stack +0006:wArg04,Stack +0008:wArg06,Stack +FFFFFFFE:si,Top:Top_34
		defs: ah:ah_49,bx:bx_47,cx:cx_46,sp:sp_45,Top:Top_48
	word16 ax_110 = DPB(ax, ah_49, 8)
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_8B36:
	word16 dx_55
	word16 ax_54 = fn0800_01B9(ds, out dx_55)
	fn0800_0163()
	branch wArg04 != 0x0000 l0800_8B55
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_8B55:
	word16 si_95 = Mem58[ss:sp_26:word16]
	cxOut = cx
	dxOut = dx_55
	bxOut = bx
	siOut = si_95
	esOut = es
	TopOut = Top_3
	return ax_54
// DataOut:
// DataOut (flags):
// SymbolicIn:

fn0800_8B0D_exit:
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_8B42:
	branch wArg06 != 0x0000 l0800_8B4E
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_8B46:
	word16 sp_67
	word16 cx_70
	word16 bx_73
	int8 Top_75
	word16 ax_76
	word16 dx_77
	call SEQ(0x0800, Mem58[ds:0x2354:word16]) (retsize: 2;)
		uses: ax:ax_54,bp:fp - 2,bx:bx_71,cx:cx_68,ds:ds,dx:dx_55,es:es_78,si:wArg06,sp:sp_66,ss:ss,Stack +0000:bp,Stack +0004:wArg02,Stack +0006:wArg04,Stack +0008:wArg06,Stack +FFFFFFFE:si,Top:Top_74
		defs: ax:ax_76,bx:bx_73,cx:cx_70,dx:dx_77,sp:sp_67,Top:Top_75
	call SEQ(0x0800, Mem58[ds:0x2356:word16]) (retsize: 2;)
		uses: ax:ax_76,bp:fp - 2,bx:bx_73,cx:cx_70,ds:ds,dx:dx_77,es:es_78,si:wArg06,sp:sp_67,ss:ss,Stack +0000:bp,Stack +0004:wArg02,Stack +0006:wArg04,Stack +0008:wArg06,Stack +FFFFFFFE:si,Top:Top_75
		defs: sp:sp_81
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_8B4E:
	word16 sp_93 = sp_26 - 2
	Mem94[ss:sp_93:word16] = wArg02
	fn0800_0164(Mem94[ss:sp_93:byte])
// DataOut:
// DataOut (flags):
// SymbolicIn:



word16 fn0800_8B5A(word16 cx, word16 dx, word16 bx, word16 si, selector es, selector ds, word16 wArg02, ptr16 & cxOut, ptr16 & dxOut, ptr16 & bxOut, ptr16 & siOut, ptr16 & esOut, ptr16 & TopOut)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  bx:[0..15] cx:[0..15] ds:[0..15] dx:[0..15] es:[0..15] si:[0..15] ss:[0..15] Stack +0002:[0..15]
// LiveOut: ax bx cx dx es si Top
// Trashed: SCZO ax bx cx dx es si Top
// Preserved: bp sp
fn0800_8B5A_entry:
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_8B5A:
	word16 dx_27
	int8 Top_29
	word16 bx_30
	word16 cx_31
	selector es_32
	word16 si_33
	word16 ax_25 = fn0800_8B0D(0x0000, cx, dx, bx, fp - 2, si, es, ds, wArg02, 0x0000, 0x0000, out cx_31, out dx_27, out bx_30, out si_33, out es_32, out Top_29)
	cxOut = cx_31
	dxOut = dx_27
	bxOut = bx_30
	siOut = si_33
	esOut = es_32
	TopOut = Top_29
	return ax_25
// DataOut:
// DataOut (flags):
// SymbolicIn:

fn0800_8B5A_exit:
// DataOut:
// DataOut (flags):
// SymbolicIn:



void fn0800_8B69(word16 cx, word16 dx, word16 bx, word16 si, selector es, selector ds, word16 wArg02)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  bx:[0..15] cx:[0..15] ds:[0..15] dx:[0..15] es:[0..15] si:[0..15] ss:[0..15] Stack +0002:[0..15]
// LiveOut:
// Trashed: SCZO ax bx cx dx es si Top
// Preserved: bp sp
fn0800_8B69_entry:
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_8B69:
	fn0800_8B0D(0x0000, cx, dx, bx, fp - 2, si, es, ds, wArg02, 0x0000, 0x0001, out cx_47, out dx_48, out bx_49, out si_50, out es_51, out Top_52)
	return
// DataOut:
// DataOut (flags):
// SymbolicIn:

fn0800_8B69_exit:
// DataOut:
// DataOut (flags):
// SymbolicIn:



void fn0800_8B95(segptr32 ptrArg02)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  Stack +0002:[0..31]
// LiveOut:
// Trashed: ah bx cx dx es Top
// Preserved: bp sp
fn0800_8B95_entry:
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_8B95:
	byte dh_10
	word16 cx_11
	word16 dx_19 = DPB(DPB(dx, dh_10, 8), msdos_get_system_date(out dh_10, out cx_11), 0)
	Mem16[ptrArg02:word16] = cx_11
	Mem20[ptrArg02 + 0x0002:word16] = dx_19
	return
// DataOut:
// DataOut (flags):
// SymbolicIn:

fn0800_8B95_exit:
// DataOut:
// DataOut (flags):
// SymbolicIn:



void fn0800_8BA8(segptr32 ptrArg02)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  Stack +0002:[0..31]
// LiveOut:
// Trashed: ah bx cx dx es Top
// Preserved: bp sp
fn0800_8BA8_entry:
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_8BA8:
	byte ch_10
	byte dh_11
	byte dl_12
	Mem20[ptrArg02:word16] = DPB(DPB(cx, ch_10, 8), msdos_get_system_time(out ch_10, out dh_11, out dl_12), 0)
	Mem24[ptrArg02 + 0x0002:word16] = DPB(DPB(dx, dh_11, 8), dl_12, 0)
	return
// DataOut:
// DataOut (flags):
// SymbolicIn:

fn0800_8BA8_exit:
// DataOut:
// DataOut (flags):
// SymbolicIn:



word16 fn0800_8BBB(word16 bp, word16 si, word16 di, word16 wArg00, ptr16 & cxOut, ptr16 & dxOut, ptr16 & bxOut, ptr16 & bpOut, ptr16 & siOut, ptr16 & diOut)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  bp:[0..15] di:[0..15] si:[0..15] ss:[0..15]
// LiveOut: ax bp bx cx di dx si sp
// Trashed: SCZO ax bp bx cx di dx si sp Top
// Preserved:
fn0800_8BBB_entry:
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_8BBB:
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_8BC0_thunk_fn0800_8BD8:
	word16 bp_20
	word16 bx_21
	word16 cx_22
	word16 di_23
	word16 dx_24
	word16 si_25
	word16 ax_19 = fn0800_8BD8(0x0000, bp, si, di, out cx_22, out dx_24, out bx_21, out bp_20, out si_25, out di_23)
	cxOut = cx_22
	dxOut = dx_24
	bxOut = bx_21
	bpOut = bp_20
	siOut = si_25
	diOut = di_23
	return ax_19
// DataOut:
// DataOut (flags):
// SymbolicIn:

fn0800_8BBB_exit:
// DataOut:
// DataOut (flags):
// SymbolicIn:



word16 fn0800_8BC2(word16 bp, word16 si, word16 di, word16 wArg00, ptr16 & cxOut, ptr16 & dxOut, ptr16 & bxOut, ptr16 & bpOut, ptr16 & siOut, ptr16 & diOut)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  bp:[0..15] di:[0..15] si:[0..15] ss:[0..15]
// LiveOut: ax bp bx cx di dx si sp
// Trashed: SCZO ax bp bx cx di dx si sp Top
// Preserved:
fn0800_8BC2_entry:
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_8BC2:
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_8BC8_thunk_fn0800_8BD8:
	word16 bp_18
	word16 bx_19
	word16 cx_20
	word16 di_21
	word16 dx_22
	word16 si_23
	word16 ax_17 = fn0800_8BD8(0x0001, bp, si, di, out cx_20, out dx_22, out bx_19, out bp_18, out si_23, out di_21)
	cxOut = cx_20
	dxOut = dx_22
	bxOut = bx_19
	bpOut = bp_18
	siOut = si_23
	diOut = di_21
	return ax_17
// DataOut:
// DataOut (flags):
// SymbolicIn:

fn0800_8BC2_exit:
// DataOut:
// DataOut (flags):
// SymbolicIn:



word16 fn0800_8BCA(word16 bp, word16 si, word16 di, word16 wArg00, ptr16 & dxOut, ptr16 & bpOut, ptr16 & siOut, ptr16 & diOut)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  bp:[0..15] di:[0..15] si:[0..15] ss:[0..15]
// LiveOut: ax bp di dx si sp
// Trashed: SCZO ax bp bx cx di dx si sp Top
// Preserved:
fn0800_8BCA_entry:
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_8BCA:
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_8BD0_thunk_fn0800_8BD8:
	word16 bp_18
	word16 di_21
	word16 dx_22
	word16 si_23
	word16 ax_17 = fn0800_8BD8(0x0002, bp, si, di, out cx_36, out dx_22, out bx_37, out bp_18, out si_23, out di_21)
	dxOut = dx_22
	bpOut = bp_18
	siOut = si_23
	diOut = di_21
	return ax_17
// DataOut:
// DataOut (flags):
// SymbolicIn:

fn0800_8BCA_exit:
// DataOut:
// DataOut (flags):
// SymbolicIn:



word16 fn0800_8BD8(word16 cx, word16 bp, word16 si, word16 di, ptr16 & cxOut, ptr16 & dxOut, ptr16 & bxOut, ptr16 & bpOut, ptr16 & siOut, ptr16 & diOut)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  bp:[0..15] cx:[0..15] di:[0..15] si:[0..15] ss:[0..15]
// LiveOut: ax bp bx cx di dx si sp
// Trashed: SCZO ax bp bx cx di dx si sp Top
// Preserved:
fn0800_8BD8_entry:
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_8BD8:
	word16 dx_102
	word16 bx_146
	Mem7[ss:v4 - 2:word16] = bp
	Mem10[ss:v4 - 4:word16] = si
	Mem13[ss:v4 - 6:word16] = di
	word16 cx_20 = Mem13[ss:v4 + 0x000A:word16]
	word16 di_16 = cx
	word16 ax_100 = Mem13[ss:v4 + 0x0004:word16]
	word16 dx_18 = Mem13[ss:v4 + 0x0006:word16]
	word16 bx_19 = Mem13[ss:v4 + 0x0008:word16]
	word16 cx_134 = cx_20
	branch cx_20 != 0x0000 l0800_8BF7
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_8BEF:
	branch dx_18 == 0x0000 l0800_8C5C
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_8BF3:
	branch bx_19 == 0x0000 l0800_8C5C
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_8C5C:
	word32 dx_ax_35 = SEQ(dx_18, ax_100)
	bx_146 = bx_19
	word16 dx_38 = (uint16) (dx_ax_35 % bx_19)
	ax_100 = (uint16) (dx_ax_35 /u bx_19)
	branch (cx & 0x0002) == 0x0000 l0800_8C65
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_8C64:
	ax_100 = dx_38
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_8C65:
	dx_102 = 0x0000
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_8BF7:
	word16 bx_194 = bx_19
	dx_102 = dx_18
	branch (cx & 0x0001) != 0x0000 l0800_8C19
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_8BFD:
	dx_102 = dx_18
	branch dx_18 >= 0x0000 l0800_8C0B
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_8C01:
	ax_100 = -ax_100
	dx_102 = -dx_18 - (ax_100 == 0x0000)
	di_16 = cx | 0x000C
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_8C0B:
	cx_134 = cx_20
	branch cx_20 >= 0x0000 l0800_8C19
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_8C0F:
	bx_194 = -bx_19
	cx_134 = -cx_20 - (bx_194 == 0x0000)
	di_16 = di_16 ^ 0x0004
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_8C19:
	Mem94[ss:v4 - 8:word16] = di_16
	cx_134 = 0x0020
	word16 di_111 = 0x0000
	word16 si_107 = 0x0000
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_8C23:
	ax_100 = ax_100 << 0x0001
	dx_102 = __rcl(dx_102, 0x01, SLICE(cond(ax_100), bool, 1))
	si_107 = __rcl(si_107, 0x01, (dx_102 & 0x8000) != 0x0000)
	di_111 = __rcl(di_111, 0x01, (si_107 & 0x8000) != 0x0000)
	branch di_111 <u cx_134 l0800_8C3A
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_8C2F:
	branch di_111 >u cx_134 l0800_8C35
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_8C31:
	branch si_107 <u bx_194 l0800_8C3A
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_8C35:
	ui32 di_si_198 = SEQ(di_111, si_107) - SEQ(cx_134, bx_194)
	si_107 = (word16) di_si_198
	di_111 = SLICE(di_si_198, word16, 16)
	ax_100 = ax_100 + 0x0001
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_8C3A:
	cx_134 = cx_134 - 0x0001
	branch cx_134 != 0x0000 l0800_8C23
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_8C3C:
	bx_146 = Mem94[ss:v4 - 8:word16]
	branch (bx_146 & 0x0002) == 0x0000 l0800_8C49
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_8C43:
	ax_100 = si_107
	dx_102 = di_111
	bx_146 = bx_146 >>u 0x0001
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_8C49:
	branch (bx_146 & 0x0004) == 0x0000 l0800_8C56
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_8C4F:
	ax_100 = -ax_100
	dx_102 = -dx_102 - (ax_100 == 0x0000)
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_8C56:
	word16 di_183 = Mem179[ss:v4 - 6:word16]
	word16 si_185 = Mem179[ss:v4 - 4:word16]
	word16 bp_187 = Mem179[ss:v4 - 2:word16]
	cxOut = cx_134
	dxOut = dx_102
	bxOut = bx_146
	bpOut = bp_187
	siOut = si_185
	diOut = di_183
	return ax_100
// DataOut:
// DataOut (flags):
// SymbolicIn:

fn0800_8BD8_exit:
// DataOut:
// DataOut (flags):
// SymbolicIn:



word16 fn0800_8C69(word16 ax, byte cl, word16 dx, word16 wArg00, ptr16 & clOut, ptr16 & dxOut)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  ax:[0..15] cl:[0..7] dx:[0..15]
// LiveOut: ax cl dx sp
// Trashed: SCZO ax bx cl dx sp Top
// Preserved:
fn0800_8C69_entry:
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_8C69:
	branch cl >=u 0x10 l0800_8C81
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_8C81:
	clOut = cl - 0x10
	dxOut = ax << cl - 0x10
	return 0x0000
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_8C71:
	byte cl_28 = -cl
	clOut = cl_28 + 0x10
	dxOut = dx << cl | ax >>u cl_28 + 0x10
	return ax << cl
// DataOut:
// DataOut (flags):
// SymbolicIn:

fn0800_8C69_exit:
// DataOut:
// DataOut (flags):
// SymbolicIn:



word16 fn0800_8C8A(word16 ax, byte cl, word16 dx, word16 wArg00, ptr16 & clOut, ptr16 & dxOut)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  ax:[0..15] cl:[0..7] dx:[0..15]
// LiveOut: ax cl dx sp
// Trashed: SCZO ax bx cl dx sp Top
// Preserved:
fn0800_8C8A_entry:
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_8C8A:
	branch cl >=u 0x10 l0800_8CA2
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_8CA2:
	clOut = cl - 0x10
	int32 dx_ax_21 = (int32) dx
	dxOut = SLICE(dx_ax_21, word16, 16)
	return (word16) dx_ax_21 >> cl - 0x10
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_8C92:
	byte cl_28 = -cl
	clOut = cl_28 + 0x10
	dxOut = dx >> cl
	return ax >>u cl | dx << cl_28 + 0x10
// DataOut:
// DataOut (flags):
// SymbolicIn:

fn0800_8C8A_exit:
// DataOut:
// DataOut (flags):
// SymbolicIn:



word16 fn0800_8CAA(word16 ax, byte cl, word16 dx, word16 wArg00, ptr16 & clOut, ptr16 & dxOut)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  ax:[0..15] cl:[0..7] dx:[0..15]
// LiveOut: ax cl dx sp
// Trashed: SCZO ax bx cl dx sp Top
// Preserved:
fn0800_8CAA_entry:
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_8CAA:
	branch cl >=u 0x10 l0800_8CC2
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_8CC2:
	clOut = cl - 0x10
	dxOut = 0x0000
	return dx >>u cl - 0x10
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_8CB2:
	byte cl_28 = -cl
	clOut = cl_28 + 0x10
	dxOut = dx >>u cl
	return ax >>u cl | dx << cl_28 + 0x10
// DataOut:
// DataOut (flags):
// SymbolicIn:

fn0800_8CAA_exit:
// DataOut:
// DataOut (flags):
// SymbolicIn:



word16 fn0800_8CCB(word16 ax, word16 cx, word16 dx, word16 bx, selector psegArg00, ptr16 & cxOut, ptr16 & dxOut)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  ax:[0..15] bx:[0..15] cx:[0..15] dx:[0..15]
// LiveOut: ax cx dx sp
// Trashed: SCZO ax bx cx dx es sp Top
// Preserved:
fn0800_8CCB_entry:
	byte dh_31 = SLICE(dx, byte, 8)
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_8CCB:
	byte cl_27 = (byte) cx
	word16 cx_94 = DPB(cx, cl_27, 0)
	cx_94 = DPB(cx, cl_27, 0) (alias)
	word16 cx_97 = DPB(cx_94, cl_27, 0)
	branch cx >= 0x0000 l0800_8CDE
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_8CDE:
	word16 ax_20 = ax + bx
	byte al_36 = (byte) ax_20
	ax_20 = DPB(ax_20, al_36, 0) (alias)
	word16 ax_40 = DPB(ax_20, al_36, 0)
	branch ax_20 >=u 0x0000 l0800_8CE6
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_8CE2:
	dx = dx + 0x1000
	dh_31 = SLICE(dx + 0x1000, byte, 8) (alias)
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_8CE6:
	cxOut = DPB(DPB(DPB(cx_97, cl_27, 8), 0x04, 0), al_36, 8)
	dxOut = DPB(dx, dh_31 + (cl_27 << 0x04), 8) + (ax_40 >>u 0x04)
	return DPB(ax_40 >>u 0x04, al_36, 0) & 0x000F
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_8CD2:
	word16 bx_50 = ~bx
	word16 cx_55 = ~cx + (bx_50 <u 0x0001)
	byte cl_63 = (byte) cx_55
	word16 cx_101 = DPB(cx_55, cl_63, 0)
	cx_101 = DPB(cx_55, cl_63, 0) (alias)
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_8D0D:
	word16 ax_57 = ax - (bx_50 + 0x0001)
	byte al_74 = (byte) ax_57
	ax_57 = DPB(ax_57, al_74, 0) (alias)
	word16 ax_78 = DPB(ax_57, al_74, 0)
	branch ax_57 >=u 0x0000 l0800_8D15
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_8D11:
	dx = dx - 0x1000
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_8D15:
	cxOut = DPB(DPB(cx_101, 0x04, 0), al_74, 8)
	dxOut = dx - DPB(DPB(bx_50 + 0x0001, cl_63 << 0x04, 8), 0x00, 0) + (ax_78 >>u 0x04)
	return DPB(ax_78 >>u 0x04, al_74, 0) & 0x000F
// DataOut:
// DataOut (flags):
// SymbolicIn:

fn0800_8CCB_exit:
// DataOut:
// DataOut (flags):
// SymbolicIn:



word16 fn0800_8D2B(selector ds, word16 wArg02)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  ds:[0..15] Stack +0002:[0..15]
// LiveOut: ax
// Trashed: SCZO ax Top
// Preserved: bp si sp
fn0800_8D2B_entry:
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_8D2B:
	word16 si_17
	word16 si_13 = wArg02
	branch wArg02 < 0x0000 l0800_8D4B
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_8D4B:
	si_17 = -wArg02
	branch si_17 > 0x0023 l0800_8D3B
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_8D52:
	Mem21[ds:0x2516:word16] = 0xFFFF
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_8D36:
	branch wArg02 <= 0x0058 l0800_8D3E
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_8D3B:
	si_13 = 0x0057
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_8D3E:
	Mem28[ds:0x2516:word16] = si_13
	si_17 = (int16) Mem28[ds:si_13 + 0x2518:byte]
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_8D58:
	Mem34[ds:0x007F:word16] = si_17
	return 0xFFFF
// DataOut:
// DataOut (flags):
// SymbolicIn:

fn0800_8D2B_exit:
// DataOut:
// DataOut (flags):
// SymbolicIn:



void fn0800_8D64(selector ds, word16 wArg02)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  ds:[0..15] Stack +0002:[0..15]
// LiveOut:
// Trashed: SCZO ax Top
// Preserved: bp si sp
fn0800_8D64_entry:
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_8D64:
	fn0800_8D2B(ds, wArg02)
	return
// DataOut:
// DataOut (flags):
// SymbolicIn:

fn0800_8D64_exit:
// DataOut:
// DataOut (flags):
// SymbolicIn:



word16 fn0800_8D76(word16 wArg02)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  Stack +0002:[0..15]
// LiveOut: ax
// Trashed: SCZO ax bx dx Top
// Preserved: bp sp
fn0800_8D76_entry:
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_8D76:
	word16 dx_11
	msdos_ioctl_get_device_info(wArg02, out dx_11)
	return dx_11 & 0x0080
// DataOut:
// DataOut (flags):
// SymbolicIn:

fn0800_8D76_exit:
// DataOut:
// DataOut (flags):
// SymbolicIn:



word16 fn0800_8D87(byte bArg04, word16 wArg06, segptr32 ptrArg08, word16 wArg0C, word16 wArg0E, ptr16 & diOut)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  ss:[0..15] Stack +0004:[0..7] Stack +0006:[0..15] Stack +0008:[0..31] Stack +000C:[0..15] Stack +000E:[0..15]
// LiveOut: di si
// Trashed: SCZDO ax bx cx di dx si Top
// Preserved: bp es sp ss
fn0800_8D87_entry:
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_8D87:
	byte bl_23 = (byte) wArg06
	word16 bp_8 = fp - 2
	word16 sp_134 = fp - 0x002A
	selector es_129 = SLICE(ptrArg08, selector, 16)
	word16 di_122 = (word16) ptrArg08
	word16 bx_81 = DPB(wArg06, bl_23, 0)
	branch wArg06 >u 0x0024 l0800_8DF7
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_8D9B:
	branch bl_23 <u 0x02 l0800_8DF7
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_8DA0:
	word16 ax_26 = wArg0C
	word16 cx_28 = wArg0E
	branch wArg0E >= 0x0000 l0800_8DBC
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_8DAA:
	branch bArg04 == 0x00 l0800_8DBC
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_8DB0:
	Mem36[ptrArg08:byte] = 0x2D
	ax_26 = -wArg0C
	di_122 = di_122 + 0x0001
	cx_28 = -wArg0E - (ax_26 == 0x0000)
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_8DBC:
	word16 si_105 = fp - 0x0024
	branch cx_28 == 0x0000 l0800_8DD1
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_8DC1:
	word32 dx_ax_52 = (uint32) (uint16) cx_28
	word32 dx_ax_60 = SEQ((uint16) (dx_ax_52 % bx_81), ax_26)
	Mem68[ss:si_105:byte] = (byte) (uint16) (dx_ax_60 % bx_81)
	word16 ax_56 = (uint16) (dx_ax_52 /u bx_81)
	cx_28 = ax_56
	ax_26 = (uint16) (dx_ax_60 /u bx_81)
	si_105 = si_105 + 0x0001
	branch ax_56 == 0x0000 l0800_8DD9
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_8DD9:
	branch ax_26 != 0x0000 l0800_8DD1
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_8DD1:
	word32 dx_ax_79 = (uint32) (uint16) ax_26
	Mem94[ss:si_105:byte] = (byte) (uint16) (dx_ax_79 % bx_81)
	ax_26 = (uint16) (dx_ax_79 /u bx_81)
	si_105 = si_105 + 0x0001
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_8DDD:
	word16 cx_102 = 0x0022 - bp_8 + si_105
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_8DE5:
	byte al_114
	si_105 = si_105 - 0x0001
	byte al_109 = Mem108[ss:si_105:byte]
	branch al_109 >=u 0x0A l0800_8DF1
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_8DF1:
	al_114 = al_109 - 0x0A + Mem108[ss:bp_8 + 0x0004:byte]
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_8DED:
	al_114 = al_109 + 0x30
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_8DF4:
	Mem123[es_129:di_122:byte] = al_114
	di_122 = di_122 + 0x0001
	cx_102 = cx_102 - 0x0001
	branch cx_102 != 0x0000 l0800_8DE5
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_8DF7:
	Mem131[es_129:di_122:byte] = 0x00
	word16 sp_142 = sp_134 + 2
	word16 si_149 = Mem131[ss:sp_142 + 2:word16]
	diOut = Mem131[ss:sp_142:word16]
	return si_149
// DataOut:
// DataOut (flags):
// SymbolicIn:

fn0800_8D87_exit:
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_8DCF:
// DataOut:
// DataOut (flags):
// SymbolicIn:



word16 fn0800_8E09(word16 wArg02, word16 wArg04, word16 wArg06, ptr16 & diOut)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  ss:[0..15] Stack +0002:[0..15] Stack +0004:[0..15] Stack +0006:[0..15]
// LiveOut: di si
// Trashed: SCZDO ax bx cx di dx si Top
// Preserved: bp sp
fn0800_8E09_entry:
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_8E09:
	word16 di_36
	word16 si_38 = fn0800_8D87(0x0000, 0x000A, SEQ(wArg04, wArg02), wArg06, 0x0000, out di_36)
	diOut = di_36
	return si_38
// DataOut:
// DataOut (flags):
// SymbolicIn:

fn0800_8E09_exit:
// DataOut:
// DataOut (flags):
// SymbolicIn:



word16 fn0800_8E29(selector ds, word16 wArg02, word16 wArg04, word16 wArg06, byte bArg08, ptr16 & cxOut, ptr16 & dxOut, ptr16 & bxOut)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  ds:[0..15] Stack +0002:[0..15] Stack +0004:[0..15] Stack +0006:[0..15] Stack +0008:[0..15]
// LiveOut: ax bx cx dx
// Trashed: SCZO ax bx cx dx Top
// Preserved: bp sp
fn0800_8E29_entry:
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_8E29:
	Mem13[ds:(wArg02 << 0x0001) + 0x24EA:word16] = Mem7[ds:(wArg02 << 0x0001) + 0x24EA:word16] & 0xFDFF
	word16 ax_23 = DPB(DPB(ax, 0x42, 8), bArg08, 0)
	word16 dx_19 = wArg04
	branch msdos_set_file_position(wArg02, SEQ(wArg06, wArg04), bArg08, SEQ(wArg04, ax_23)) l0800_8E4B
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_8E4B:
	word32 dx_ax_34 = (word32) fn0800_8D2B(ds, ax_23)
	ax_23 = (word16) dx_ax_34 (alias)
	dx_19 = SLICE(dx_ax_34, word16, 16) (alias)
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_8E49:
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_8E50:
	cxOut = wArg06
	dxOut = dx_19
	bxOut = wArg02
	return ax_23
// DataOut:
// DataOut (flags):
// SymbolicIn:

fn0800_8E29_exit:
// DataOut:
// DataOut (flags):
// SymbolicIn:



word16 fn0800_8E52(byte al, selector ds, segptr32 ptrArg02)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  ax:[0..7] ds:[0..15] Stack +0002:[0..15]
// LiveOut: ax
// Trashed: SCZO ax dx Top
// Preserved: bp ds sp
fn0800_8E52_entry:
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_8E52:
	word16 ax_21
	__syscall(0x21)
	word16 ax_19 = DPB(ax, 0x39, 8)
	branch C l0800_8E64
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_8E64:
	ax_21 = fn0800_8D2B(ds, ax_19)
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_8E60:
	ax_21 = 0x0000
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_8E68:
	return ax_21
// DataOut:
// DataOut (flags):
// SymbolicIn:

fn0800_8E52_exit:
// DataOut:
// DataOut (flags):
// SymbolicIn:



word16 fn0800_8E6A(selector ds, word16 wArg02, word16 wArg04, word16 wArg06, word16 wArg08, word16 wArg0A, ptr16 & dxOut, ptr16 & siOut, ptr16 & diOut)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  ds:[0..15] ss:[0..15] Stack +0002:[0..15] Stack +0004:[0..15] Stack +0006:[0..15] Stack +0008:[0..15] Stack +000A:[0..15]
// LiveOut: ax di dx si
// Trashed: SCZDO ax bx cx di dx es si Top
// Preserved: bp sp
fn0800_8E6A_entry:
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_8E6A:
	branch (wArg08 | wArg0A) != 0x0000 l0800_8E7D
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_8E75:
	wArg0A = ds
	wArg08 = 0x4ED6
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_8E7D:
	word16 ax_30
	word16 dx_29
	branch (wArg04 | wArg06) != 0x0000 l0800_8E8F
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_8E8F:
	dx_29 = wArg06
	ax_30 = wArg04
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_8E88:
	dx_29 = ds
	ax_30 = 0x2572
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_8E95:
	word16 dx_51
	word16 di_67
	word16 si_69 = fn0800_8E09(fn0800_9CE6(wArg08, wArg0A, ax_30, dx_29, out dx_51), dx_51, wArg02, out di_67)
	fn0800_BF5F(SEQ(wArg0A, wArg08), SEQ(ds, 0x2576))
	dxOut = wArg0A
	siOut = si_69
	diOut = di_67
	return wArg08
// DataOut:
// DataOut (flags):
// SymbolicIn:

fn0800_8E6A_exit:
// DataOut:
// DataOut (flags):
// SymbolicIn:



word16 fn0800_8F18(word16 ax, word16 cx, word16 dx, word16 bx, ptr16 & cxOut, ptr16 & dxOut)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  ax:[0..15] bx:[0..15] cx:[0..15] dx:[0..15]
// LiveOut: ax cx dx
// Trashed: SCZO ax cx dx Top
// Preserved: si sp
fn0800_8F18_entry:
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_8F18:
	word16 ax_14 = dx
	branch dx == 0x0000 l0800_8F21
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_8F1F:
	ax_14 = (word16) (bx *u dx) (alias)
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_8F21:
	branch cx == 0x0000 l0800_8F28
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_8F23:
	cx = ax_14
	ax_14 = (word16) (ax *u cx) + ax_14
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_8F28:
	cxOut = cx
	word32 dx_ax_42 = bx *u ax
	dxOut = SLICE(dx_ax_42, word16, 16) + ax_14
	return (word16) dx_ax_42
// DataOut:
// DataOut (flags):
// SymbolicIn:

fn0800_8F18_exit:
// DataOut:
// DataOut (flags):
// SymbolicIn:



byte fn0800_8F2F(byte al, byte ah, word16 cx, word16 dx, byte bl, byte bh, ptr16 & cxOut, ptr16 & dxOut, ptr16 & bxOut)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  al:[8..15] ax:[8..15] bl:[0..15] bx:[8..15] cx:[0..15] dx:[0..15]
// LiveOut: CZ bx cx dx
// Trashed: SCZO ax bx cx dx Top
// Preserved: sp
fn0800_8F2F_entry:
	word16 ax_13 = DPB(ax, al, 0)
	word16 bx_22 = DPB(bx, bl, 0)
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_8F2F:
	word16 dx_16 = dx + (ax_13 >>u 0x04)
	word16 cx_26 = cx + (bx_22 >>u 0x04)
	word16 bx_32 = DPB(bx_22 >>u 0x04, bl, 0) & 0x000F
	branch dx_16 != cx_26 l0800_8F4F
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_8F4D:
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_8F4F:
	cxOut = cx_26
	dxOut = dx_16
	bxOut = bx_32
	return <invalid>
// DataOut:
// DataOut (flags):
// SymbolicIn:

fn0800_8F2F_exit:
// DataOut:
// DataOut (flags):
// SymbolicIn:



word16 fn0800_8F50(selector ds, word16 wArg02, segptr32 ptrArg04, word16 wArg08, ptr16 & chOut, ptr16 & dxOut)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  ds:[0..15] Stack +0002:[0..15] Stack +0004:[0..31] Stack +0008:[0..15]
// LiveOut: ax cx dx
// Trashed: SCZO ax bx cx dx Top
// Preserved: bp ds sp
fn0800_8F50_entry:
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_8F50:
	word16 ax_23
	word16 wLoc04_52
	branch (Mem7[ds:(wArg02 << 0x0001) + 0x24EA:word16] & 0x0002) == 0x0000 l0800_8F66
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_8F66:
	dx = (word16) ptrArg04 (alias)
	branch msdos_read_file(wArg02, wArg08, ptrArg04, out ax_23) l0800_8F79
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_8F79:
	wLoc04_52 = ax_23
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_8F77:
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_8F60:
	wLoc04_52 = 0x0005
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_8F7A:
	ax_23 = fn0800_8D2B(ds, wLoc04_52)
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_8F7D:
	chOut = <invalid>
	dxOut = dx
	return ax_23
// DataOut:
// DataOut (flags):
// SymbolicIn:

fn0800_8F50_exit:
// DataOut:
// DataOut (flags):
// SymbolicIn:



word16 fn0800_8F7F(byte al, selector ds, segptr32 ptrArg02)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  ax:[0..7] ds:[0..15] Stack +0002:[0..15]
// LiveOut: dx
// Trashed: SCZO ax dx Top
// Preserved: bp ds sp
fn0800_8F7F_entry:
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_8F7F:
	word16 dx_15 = (word16) ptrArg02
	word16 ax_21 = DPB(ax, 0x41, 8)
	branch msdos_delete_file(SLICE(ptrArg02, selector, 16), dx_15) l0800_8F91
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_8F91:
	fn0800_8D2B(ds, ax_21)
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_8F8D:
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_8F95:
	return dx_15
// DataOut:
// DataOut (flags):
// SymbolicIn:

fn0800_8F7F_exit:
// DataOut:
// DataOut (flags):
// SymbolicIn:



byte fn0800_8F97(word16 cx, word16 dx, word16 bx, word16 bp, word16 si, word16 di, selector es, selector ds, word16 wArg02, word16 wArg04, word16 wArg06, word16 wArg08, word16 wArg0A, selector psegArg0C, ptr16 & diOut)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  bp:[0..15] bx:[0..15] cx:[0..15] di:[0..15] ds:[0..15] dx:[0..15] es:[0..15] si:[0..15] ss:[0..15] Stack +0002:[0..15] Stack +0004:[0..15] Stack +0006:[0..15] Stack +0008:[0..15] Stack +000A:[0..15] Stack +000C:[0..15]
// LiveOut: cx di
// Trashed: SCZDO ax bp bx cx di dx es si sp Top
// Preserved:
l0800_906C_thunk_fn0800_93A6:
	fn0800_93A6(fp - 2, si_92, ax_93, psegArg0C, out bp_1827, out si_1828, out di_8, out es_1829)
	diOut = di_8
	return (byte) cx_909
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_906C_thunk_fn0800_93A6:
	fn0800_93A6(fp - 2, si_92, ax_93, psegArg0C, out bp_1824, out si_1825, out di_24, out es_1826)
	diOut = di_24
	return (byte) cx_909
// DataOut:
// DataOut (flags):
// SymbolicIn:

fn0800_8F97_entry:
	def fp
	def bp
	def ss
	def si
	def di
	def es
	def ds
	def cx
	def bx
	def dx
	def wArg0A
	def psegArg0C
	def wArg08
	def wArg06
	def wArg02
	def wLoc0C
	def bLoc03
	def wArg04
	def wLoc0A
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_8F97:
	Top_35 = 0
	wLoc06_1259 = 0x0000
	wLoc08_1260 = 0x0000
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_8FC6:
	sp_51 = fp - 0x0032
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_8FC8:
	bLoc03_1708 = PHI((bLoc03, l0800_8FC6), (bLoc03_1710, l0800_911C), (bLoc03_1267, l0800_92AB), (bLoc03_1501, l0800_9391), (bLoc03_1267, l0800_91F1), (bLoc03_1267, l0800_91FD))
	wLoc0C_1698 = PHI((wLoc0C, l0800_8FC6), (wLoc0C_1318, l0800_911C), (wLoc0C_1318, l0800_92AB), (wLoc0C_1276, l0800_9391), (wLoc0C_1318, l0800_91F1), (wLoc0C_1318, l0800_91FD))
	wLoc06_1679 = PHI((wLoc06_1259, l0800_8FC6), (wLoc06_1680, l0800_911C), (wLoc06_1682, l0800_92AB), (wLoc06_1683, l0800_9391), (wLoc06_1325, l0800_91F1), (wLoc06_1679, l0800_91FD))
	wLoc08_1601 = PHI((wLoc08_1260, l0800_8FC6), (wLoc08_1383, l0800_911C), (wLoc08_1608, l0800_92AB), (wLoc08_1609, l0800_9391), (wLoc08_1383, l0800_91F1), (wLoc08_1383, l0800_91FD))
	wArg0A_1262 = PHI((wArg0A, l0800_8FC6), (wArg0A_1266, l0800_911C), (wArg0A_1266, l0800_92AB), (wArg0A_1274, l0800_9391), (wArg0A_1266, l0800_91F1), (wArg0A_1266, l0800_91FD))
	Top_1248 = PHI((Top_35, l0800_8FC6), (Top_1249, l0800_911C), (Top_1252, l0800_92AB), (Top_1253, l0800_9391), (Top_605, l0800_91F1), (Top_572, l0800_91FD))
	dx_1239 = PHI((dx, l0800_8FC6), (dx_1241, l0800_911C), (dx_1243, l0800_92AB), (dx_1244, l0800_9391), (dx_681, l0800_91F1), (dx_681, l0800_91FD))
	bx_1229 = PHI((bx, l0800_8FC6), (bx_1231, l0800_911C), (bx_1234, l0800_92AB), (bx_1235, l0800_9391), (bx_124, l0800_91F1), (bx_124, l0800_91FD))
	cx_1219 = PHI((cx, l0800_8FC6), (cx_1221, l0800_911C), (cx_1224, l0800_92AB), (cx_1225, l0800_9391), (cx_909, l0800_91F1), (cx_909, l0800_91FD))
	sp_1211 = PHI((sp_51, l0800_8FC6), (sp_1212, l0800_911C), (sp_1215, l0800_92AB), (sp_1216, l0800_9391), (sp_606, l0800_91F1), (sp_571, l0800_91FD))
	di_1103 = PHI((di, l0800_8FC6), (di_1104, l0800_911C), (di_1106, l0800_92AB), (di_1110, l0800_9391), (di_573, l0800_91F1), (di_101, l0800_91FD))
	Mem57 = PHI((Mem53, l0800_8FC6), (Mem1089, l0800_911C), (Mem1090, l0800_92AB), (Mem1091, l0800_9391), (Mem602, l0800_91F1), (Mem540, l0800_91FD))
	si_58 = wArg0A_1262
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_8FCB:
	bLoc03_1412 = PHI((bLoc03_1411, l0800_9019), (bLoc03_1411, l0800_902B), (bLoc03_1708, l0800_8FC8))
	wLoc0C_1410 = PHI((wLoc0C_1409, l0800_9019), (wLoc0C_1409, l0800_902B), (wLoc0C_1698, l0800_8FC8))
	wArg0A_1406 = PHI((wArg0A_1405, l0800_9019), (wArg0A_1405, l0800_902B), (wArg0A_1262, l0800_8FC8))
	wLoc08_1383 = PHI((wLoc08_1463, l0800_9019), (wLoc08_1384, l0800_902B), (wLoc08_1601, l0800_8FC8))
	Top_918 = PHI((Top_1034, l0800_9019), (Top_920, l0800_902B), (Top_1248, l0800_8FC8))
	dx_915 = PHI((dx_1031, l0800_9019), (dx_916, l0800_902B), (dx_1239, l0800_8FC8))
	bx_912 = PHI((bx_1028, l0800_9019), (bx_913, l0800_902B), (bx_1229, l0800_8FC8))
	cx_909 = PHI((cx_1027, l0800_9019), (cx_924, l0800_902B), (cx_1219, l0800_8FC8))
	sp_897 = PHI((sp_1036, l0800_9019), (sp_925, l0800_902B), (sp_1211, l0800_8FC8))
	di_71 = PHI((di_932, l0800_9019), (di_932, l0800_902B), (di_1103, l0800_8FC8))
	si_64 = PHI((si_904, l0800_9019), (si_904, l0800_902B), (si_58, l0800_8FC8))
	Mem61 = PHI((Mem1039, l0800_9019), (Mem902, l0800_902B), (Mem57, l0800_8FC8))
	al_65 = Mem61[ds:si_64:byte]
	si_66 = si_64 + 0x0001
	al_67 = al_65
	branch al_65 == 0x00 l0800_9042
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_9042:
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_9042_thunk_fn0800_93A6:
	fn0800_93A6(fp - 2, si_66, di_71, psegArg0C, out bp_1812, out si_1813, out di_74, out es_1814)
	diOut = di_74
	return (byte) cx_909
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_8FD4:
	branch al_65 == 0x25 l0800_9045
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_9045:
	wLoc0C_1264 = 0xFFFF
	es_86 = psegArg0C
	bLoc03_1265 = 0x20
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_9051:
	wLoc0C_1318 = PHI((wLoc0C_1264, l0800_9045), (wLoc0C_1318, l0800_9078), (wLoc0C_1318, l0800_9092), (wLoc0C_1318, l0800_90AA), (wLoc0C_1318, l0800_90A4), (wLoc0C_1318, l0800_90BB), (wLoc0C_1318, l0800_909E), (wLoc0C_1318, l0800_9098), (wLoc0C_1379, l0800_907E), (wLoc0C_1380, l0800_9088))
	bLoc03_1267 = PHI((bLoc03_1265, l0800_9045), (bLoc03_1381, l0800_9078), (bLoc03_1317, l0800_9092), (bLoc03_1268, l0800_90AA), (bLoc03_1269, l0800_90A4), (bLoc03_1267, l0800_90BB), (bLoc03_1316, l0800_909E), (bLoc03_1315, l0800_9098), (bLoc03_1267, l0800_907E), (bLoc03_1267, l0800_9088))
	dx_681 = PHI((dx_915, l0800_9045), (dx_681, l0800_9078), (dx_681, l0800_9092), (dx_681, l0800_90AA), (dx_681, l0800_90A4), (dx_163, l0800_90BB), (dx_681, l0800_909E), (dx_681, l0800_9098), (dx_681, l0800_907E), (dx_1186, l0800_9088))
	bx_119 = PHI((bx_912, l0800_9045), (bx_124, l0800_9078), (bx_124, l0800_9092), (bx_124, l0800_90AA), (bx_124, l0800_90A4), (bx_124, l0800_90BB), (bx_124, l0800_909E), (bx_124, l0800_9098), (bx_124, l0800_907E), (bx_124, l0800_9088))
	di_98 = PHI((di_71, l0800_9045), (di_101, l0800_9078), (di_101, l0800_9092), (di_101, l0800_90AA), (di_101, l0800_90A4), (di_101, l0800_90BB), (di_101, l0800_909E), (di_101, l0800_9098), (di_843, l0800_907E), (di_843, l0800_9088))
	Mem90 = PHI((Mem87, l0800_9045), (Mem854, l0800_9078), (Mem510, l0800_9092), (Mem127, l0800_90AA), (Mem131, l0800_90A4), (Mem96, l0800_90BB), (Mem506, l0800_909E), (Mem502, l0800_9098), (Mem841, l0800_907E), (Mem851, l0800_9088))
	si_89 = PHI((si_66, l0800_9045), (si_92, l0800_9078), (si_92, l0800_9092), (si_92, l0800_90AA), (si_92, l0800_90A4), (si_92, l0800_90BB), (si_92, l0800_909E), (si_92, l0800_9098), (si_92, l0800_907E), (si_92, l0800_9088))
	si_92 = si_89 + 0x0001
	ax_93 = (int16) Mem90[ds:si_89:byte]
	wArg0A_1266 = si_92
	ax_99 = di_98
	di_101 = ax_93
	branch ax_93 < 0x0000 l0800_9075
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_9075:
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_9075_thunk_fn0800_93A6:
	fn0800_93A6(fp - 2, si_92, ax_93, psegArg0C, out bp_1818, out si_1819, out di_108, out es_1820)
	diOut = di_108
	return (byte) cx_909
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_905C:
	bx_121 = DPB(DPB(bx_119, Mem96[ds:ax_93 + 0x257C:byte], 0), 0x00, 8) (alias)
	branch bx_121 <=u 0x0015 l0800_906A
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_906A:
	bx_124 = bx_121 << 0x0001
	switch (bx_121 << 0x0001) { l0800_93BE l0800_93BE l0800_93BE l0800_9071 l0800_9078 l0800_907E l0800_926F l0800_90C2 l0800_90C2 l0800_90CC l0800_91A1 l0800_9092 l0800_909E l0800_9098 l0800_90BD l0800_920B l0800_92B1 l0800_90B0 l0800_90C7 l0800_9127 l0800_90A4 l0800_90AA }
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_90AA:
	bLoc03_1268 = bLoc03_1267 | 0x20
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_90A4:
	bLoc03_1269 = bLoc03_1267 & 0xDF
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_9127:
	ax_135 = fn0800_912A(di_98, cx_909, bx_121 << 0x0001, fp - 2, si_92, ax_93, psegArg0C, ds, out cx_138, out bx_137, out bp_136, out si_141, out di_139, out es_140)
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_9127_thunk_fn0800_912A:
	fn0800_912A(ax_135, cx_138, bx_137, bp_136, si_141, di_139, es_140, ds, out cx_151, out bx_1830, out bp_1831, out si_1832, out di_152, out es_1833)
	diOut = di_152
	return (byte) cx_151
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_90C7:
	si_161 = 0x0010
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_90B0:
	ax_162 = wLoc08_1383
	dx_163 = 0x0000
	branch (bLoc03_1267 & 0x01) == 0x00 l0800_9110
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_90BB:
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_92B1:
	sp_168 = sp_897 - 2
	Mem169[ss:sp_168:word16] = psegArg0C
	Mem174[ss:sp_168 - 2:word16] = ss
	es_175 = Mem174[ss:sp_168 - 2:selector]
	di_177 = fp - 0x002C
	cx_178 = 0x0010
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_92BD:
	di_470 = PHI((di_177, l0800_92B1), (di_472, l0800_92BD_1))
	Mem182 = PHI((Mem174, l0800_92B1), (Mem471, l0800_92BD_1))
	cx_179 = PHI((cx_178, l0800_92B1), (cx_473, l0800_92BD_1))
	branch cx_179 == 0x0000 l0800_92BF
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_92BF:
	al_187 = Mem182[ds:si_92:byte]
	v48_190 = bLoc03_1267 & 0xEF
	es_183 = Mem182[ss:sp_168:selector]
	sp_184 = sp_168 + 2
	ax_1113 = (word16) al_187 (alias)
	si_188 = si_92 + 0x0001
	bLoc03_1272 = v48_190
	branch al_187 != 0x5E l0800_92D0
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_92CA:
	al_199 = Mem196[ds:si_92 + 0x0001:byte]
	bLoc03_1273 = v48_190 | 0x10
	ax_1114 = DPB(ax_1113, al_199, 0) (alias)
	si_200 = si_92 + 0x0002
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_92D0:
	bLoc03_1501 = PHI((bLoc03_1272, l0800_92BF), (bLoc03_1273, l0800_92CA))
	si_1136 = PHI((si_188, l0800_92BF), (si_200, l0800_92CA))
	Mem1131 = PHI((Mem191, l0800_92BF), (Mem196, l0800_92CA))
	ax_1112 = PHI((ax_1113, l0800_92BF), (ax_1114, l0800_92CA))
	al_1111 = PHI((al_187, l0800_92BF), (al_199, l0800_92CA))
	ax_1116 = DPB(DPB(ax_1112, 0x00, 8), al_1111, 0) (alias)
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_92D2:
	dx_1161 = PHI((dx_681, l0800_92D0), (dx_1165, l0800_92EE), (dx_1166, l0800_92F2), (dx_1167, l0800_92F7))
	si_1135 = PHI((si_1136, l0800_92D0), (si_225, l0800_92EE), (si_225, l0800_92F2), (si_225, l0800_92F7))
	Mem216 = PHI((Mem1131, l0800_92D0), (Mem223, l0800_92EE), (Mem223, l0800_92F2), (Mem223, l0800_92F7))
	ax_204 = PHI((ax_1116, l0800_92D0), (ax_1128, l0800_92EE), (ax_1120, l0800_92F2), (ax_1121, l0800_92F7))
	al_202 = PHI((al_1111, l0800_92D0), (al_224, l0800_92EE), (al_224, l0800_92F2), (al_224, l0800_92F7))
	ax_205 = DPB(ax_204, al_202, 0) (alias)
	Mem218[ss:fp - 0x002C + (ax_205 >>u 0x03):byte] = Mem216[ss:fp - 0x002C + (ax_205 >>u 0x03):byte] | 0x80
	dl_203 = al_202
	dx_1168 = DPB(dx_1161, al_202, 0) (alias)
	di_208 = ax_205 >>u 0x03
	cx_1150 = 0x8007 (alias)
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_92E4:
	dx_1160 = PHI((dx_1168, l0800_92D2), (dx_1169, l0800_92FD), (dx_1171, l0800_9311))
	cx_1149 = PHI((cx_1150, l0800_92D2), (cx_1149, l0800_92FD), (cx_1152, l0800_9311))
	di_1144 = PHI((di_208, l0800_92D2), (di_1144, l0800_92FD), (di_456, l0800_9311))
	ax_1117 = PHI((ax_205, l0800_92D2), (ax_1122, l0800_92FD), (ax_1125, l0800_9311))
	dl_438 = PHI((dl_203, l0800_92D2), (dl_438, l0800_92FD), (dl_1181, l0800_9311))
	Mem223 = PHI((Mem218, l0800_92D2), (Mem223, l0800_92FD), (Mem461, l0800_9311))
	si_222 = PHI((si_1135, l0800_92D2), (si_445, l0800_92FD), (si_445, l0800_9311))
	al_224 = Mem223[ds:si_222:byte]
	ch_1185 = SLICE(cx_1149, byte, 8) (alias)
	dx_1165 = DPB(dx_1160, dl_438, 0) (alias)
	dx_1166 = DPB(dx_1160, dl_438, 0) (alias)
	dx_1167 = DPB(dx_1160, dl_438, 0) (alias)
	dx_1169 = DPB(dx_1160, dl_438, 0) (alias)
	dx_1173 = DPB(dx_1160, dl_438, 0) (alias)
	ax_1120 = DPB(ax_1117, al_224, 0) (alias)
	ax_1121 = DPB(ax_1117, al_224, 0) (alias)
	ax_1127 = DPB(ax_1117, al_224, 0) (alias)
	ax_1128 = DPB(ax_1117, al_224, 0) (alias)
	si_225 = si_222 + 0x0001
	branch al_224 == 0x00 l0800_9313
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_9313:
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_9313_thunk_fn0800_93BE:
	fn0800_93BE(fp - 2, out bp_1844, out si_1845, out di_232, out es_1846)
	diOut = di_232
	return (byte) cx_1149
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_92EA:
	branch al_224 == 0x5D l0800_9316
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_9316:
	v64_239 = wLoc0C_1318 & 0x7FFF
	wArg0A_1274 = si_225
	wLoc0C_1276 = v64_239
	si_242 = v64_239
	branch (bLoc03_1501 & 0x01) != 0x00 l0800_932A
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_9327:
	di_246 = fn0800_8FAB(fp - 2, ds, out es_247)
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_932A:
	wLoc08_1278 = PHI((wLoc08_1383, l0800_9316), (wLoc08_1383, l0800_9327), (wLoc08_1279, l0800_9364), (wLoc08_1279, l0800_936A))
	Top_283 = PHI((Top_918, l0800_9316), (Top_918, l0800_9327), (Top_284, l0800_9364), (Top_284, l0800_936A))
	dx_281 = PHI((dx_1173, l0800_9316), (dx_1173, l0800_9327), (dx_282, l0800_9364), (dx_282, l0800_936A))
	bx_279 = PHI((bx_124, l0800_9316), (bx_124, l0800_9327), (bx_360, l0800_9364), (bx_360, l0800_936A))
	cx_277 = PHI((cx_1149, l0800_9316), (cx_1149, l0800_9327), (cx_403, l0800_9364), (cx_403, l0800_936A))
	ax_274 = PHI((ax_1127, l0800_9316), (ax_1127, l0800_9327), (ax_1146, l0800_9364), (ax_1147, l0800_936A))
	di_273 = PHI((di_1144, l0800_9316), (di_246, l0800_9327), (di_273, l0800_9364), (di_379, l0800_936A))
	es_264 = PHI((es_183, l0800_9316), (es_247, l0800_9327), (es_290, l0800_9364), (es_290, l0800_936A))
	sp_262 = PHI((sp_184, l0800_9316), (sp_184, l0800_9327), (sp_291, l0800_9364), (sp_291, l0800_936A))
	Mem258 = PHI((Mem240, l0800_9316), (Mem240, l0800_9327), (Mem271, l0800_9364), (Mem378, l0800_936A))
	si_252 = PHI((si_242, l0800_9316), (si_242, l0800_9327), (si_357, l0800_9364), (si_357, l0800_936A))
	si_253 = si_252 - 0x0001
	branch si_253 < 0x0000 l0800_9385
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_932D:
	v68_259 = wLoc08_1278 + 0x0001
	sp_263 = sp_262 - 2
	Mem265[ss:sp_263:word16] = es_264
	Mem268[ss:sp_263 - 2:word16] = wArg08
	Mem271[ss:sp_263 - 4:word16] = wArg06
	call SEQ(0x0800, wArg02) (retsize: 2;)
		uses: ax:ax_274,bp:fp - 2,bx:bx_279,cx:cx_277,di:di_273,ds:ds,dx:dx_281,es:es_264,si:si_253,sp:sp_263 - 4,ss:ss,Stack +0000:bp,Stack +0004:wArg02,Stack +0006:wArg04,Stack +0008:wArg06,Stack +000A:wArg08,Stack +000C:si_225,Stack +000E:psegArg0C,Stack +FFFFFFD0:es,Stack +FFFFFFD2:di,Stack +FFFFFFD4:si,Stack +FFFFFFF6:v64_239,Stack +FFFFFFF8:wLoc0A,Stack +FFFFFFFA:v68_259,Stack +FFFFFFFC:wLoc06_1679,Stack +FFFFFFFF:bLoc03_1501,Top:Top_283
		defs: ax:ax_275,dx:dx_282,sp:sp_272,Top:Top_284
	wLoc08_1279 = v68_259
	cx_288 = Mem271[ss:sp_272 + 2:word16]
	es_290 = Mem271[ss:sp_272 + 4:selector]
	sp_291 = sp_272 + 6
	branch ax_275 < 0x0000 l0800_9394
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_9394:
	branch si_253 + 0x0001 >= v64_239 l0800_9398_thunk_fn0800_93A6
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_9398_thunk_fn0800_93A6:
	fn0800_93A6(fp - 2, si_253 + 0x0001, di_273, es_290, out bp_1847, out si_1848, out di_301, out es_1849)
	diOut = di_301
	return (byte) cx_288
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_939A:
	branch (bLoc03_1501 & 0x01) != 0x00 l0800_939E_thunk_fn0800_93A6
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_939E_thunk_fn0800_93A6:
	fn0800_93A6(fp - 2, si_253 + 0x0001, di_273, es_290, out bp_1850, out si_1851, out di_315, out es_1852)
	diOut = di_315
	return (byte) cx_288
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_93A0:
	Mem325[es_290:di_273:byte] = 0x00
	di_326 = di_273 + 0x0001
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_93A3_thunk_fn0800_93A6:
	fn0800_93A6(fp - 2, si_253 + 0x0001, di_326, es_290, out bp_1853, out si_1854, out di_332, out es_1855)
	diOut = di_332
	return (byte) cx_288
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_9341:
	al_375 = (byte) ax_275 (alias)
	cx_403 = 0x8007 (alias)
	si_357 = si_253
	ax_394 = DPB(ax_275, al_375, 0) (alias)
	ax_395 = DPB(ax_275, al_375, 0) (alias)
	ax_1146 = DPB(ax_1145, al_375, 0) (alias)
	ax_1147 = DPB(ax_1145, al_375, 0) (alias)
	bx_360 = ax_275 >>u 0x03
	branch (Mem271[ss:fp - 0x002C + (ax_275 >>u 0x03):byte] & 0x80) == 0x00 l0800_935E
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_935E:
	branch (bLoc03_1501 & 0x10) == 0x00 l0800_936D
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_9356:
	branch (bLoc03_1501 & 0x10) == 0x00 l0800_9364
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_9364:
	ax_1145 = PHI((ax_394, l0800_9356), (ax_395, l0800_935E))
	branch (bLoc03_1501 & 0x01) != 0x00 l0800_932A
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_936A:
	Mem378[es_290:di_273:byte] = al_375
	di_379 = di_273 + 0x0001
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_935C:
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_936D:
	ax_393 = PHI((ax_394, l0800_935C), (ax_395, l0800_935E))
	Mem384[ss:sp_272 + 4:word16] = es_290
	Mem388[ss:sp_272 + 2:word16] = wArg08
	Mem391[ss:sp_272:word16] = wArg06
	Mem396[ss:sp_272 - 2:word16] = ax_393
	call SEQ(0x0800, wArg04) (retsize: 2;)
		uses: ax:ax_393,bp:fp - 2,bx:ax_275 >>u 0x03,cx:0x8007,di:di_273,ds:ds,dx:dx_282,es:es_290,si:si_253,sp:sp_272 - 2,ss:ss,Stack +0000:bp,Stack +0004:wArg02,Stack +0006:wArg04,Stack +0008:wArg06,Stack +000A:wArg08,Stack +000C:si_225,Stack +000E:psegArg0C,Stack +FFFFFFD0:es,Stack +FFFFFFD2:di,Stack +FFFFFFD4:si,Stack +FFFFFFF6:v64_239,Stack +FFFFFFF8:wLoc0A,Stack +FFFFFFFA:v68_259,Stack +FFFFFFFC:wLoc06_1679,Stack +FFFFFFFF:bLoc03_1501,Top:Top_284
		defs: bx:bx_406,cx:cx_404,dx:dx_408,sp:sp_397,Top:Top_410
	es_413 = Mem396[ss:sp_397 + 0x0006:selector]
	sp_414 = sp_397 + 0x0008
	branch si_253 + 0x0001 >= v64_239 l0800_938E
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_9385:
	Top_1254 = PHI((Top_283, l0800_932A), (Top_410, l0800_936D))
	dx_1245 = PHI((dx_281, l0800_932A), (dx_408, l0800_936D))
	bx_1236 = PHI((bx_279, l0800_932A), (bx_406, l0800_936D))
	cx_1226 = PHI((cx_277, l0800_932A), (cx_404, l0800_936D))
	sp_1217 = PHI((sp_262, l0800_932A), (sp_414, l0800_936D))
	es_431 = PHI((es_264, l0800_932A), (es_413, l0800_936D))
	Mem422 = PHI((Mem258, l0800_932A), (Mem416, l0800_936D))
	branch (bLoc03_1501 & 0x01) != 0x00 l0800_9391
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_938B:
	wLoc06_1314 = wLoc06_1679 + 0x0001
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_938E:
	wLoc06_1684 = PHI((wLoc06_1679, l0800_936D), (wLoc06_1314, l0800_938B))
	Top_1255 = PHI((Top_410, l0800_936D), (Top_1254, l0800_938B))
	dx_1246 = PHI((dx_408, l0800_936D), (dx_1245, l0800_938B))
	bx_1237 = PHI((bx_406, l0800_936D), (bx_1236, l0800_938B))
	cx_1227 = PHI((cx_404, l0800_936D), (cx_1226, l0800_938B))
	sp_1218 = PHI((sp_414, l0800_936D), (sp_1217, l0800_938B))
	es_430 = PHI((es_413, l0800_936D), (es_431, l0800_938B))
	Mem434[es_430:di_273:byte] = 0x00
	di_435 = di_273 + 0x0001
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_9391:
	wLoc06_1683 = PHI((wLoc06_1679, l0800_9385), (wLoc06_1684, l0800_938E))
	Top_1253 = PHI((Top_1254, l0800_9385), (Top_1255, l0800_938E))
	dx_1244 = PHI((dx_1245, l0800_9385), (dx_1246, l0800_938E))
	bx_1235 = PHI((bx_1236, l0800_9385), (bx_1237, l0800_938E))
	cx_1225 = PHI((cx_1226, l0800_9385), (cx_1227, l0800_938E))
	sp_1216 = PHI((sp_1217, l0800_9385), (sp_1218, l0800_938E))
	di_1110 = PHI((di_273, l0800_9385), (di_435, l0800_938E))
	Mem1091 = PHI((Mem422, l0800_9385), (Mem434, l0800_938E))
	wLoc08_1609 = wLoc08_1278
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_92EE:
	branch al_224 != 0x2D l0800_92D2
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_92F2:
	branch dl_438 >u Mem223[es_183:si_225:byte] l0800_92D2
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_92F7:
	branch Mem223[es_183:si_225:byte] == 0x5D l0800_92D2
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_92FD:
	al_446 = Mem223[ds:si_225:byte] - dl_438
	si_445 = si_225 + 0x0001
	ax_1122 = DPB(ax_1117, al_446, 0) (alias)
	branch al_446 == 0x00 l0800_92E4
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_9303:
	dl_449 = dl_438 + al_446
	dx_1171 = DPB(dx_1160, dl_449, 0) (alias)
	dl_1181 = dl_449 (alias)
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_9305:
	al_464 = PHI((al_446, l0800_9303), (al_465, l0800_9305))
	Mem459 = PHI((Mem223, l0800_9303), (Mem461, l0800_9305))
	di_455 = PHI((di_1144, l0800_9303), (di_456, l0800_9305))
	ch_451 = PHI((ch_1185, l0800_9303), (ch_453, l0800_9305))
	ch_453 = __rol(ch_451, 0x01)
	di_456 = di_455 + ((ch_451 & 0x80) != 0x00)
	Mem461[ss:fp - 0x002C + di_456:byte] = Mem459[ss:fp - 0x002C + di_456:byte] | ch_453
	al_465 = al_464 - 0x01
	cx_1152 = DPB(cx_1149, ch_453, 8) (alias)
	ax_1125 = DPB(ax_1117, al_465, 0) (alias)
	branch al_465 != 0x00 l0800_9305
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_9311:
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_92BD_1:
	Mem471[es_175:di_470:word16] = 0x0000
	di_472 = di_470 + 0x0002
	cx_473 = cx_179 - 0x0001
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_920B:
	ax_474 = fn0800_920E(di_98, cx_909, bx_121 << 0x0001, fp - 2, si_92, ax_93, psegArg0C, ds, out cx_477, out bx_476, out bp_475, out si_480, out di_478, out es_479)
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_920B_thunk_fn0800_920E:
	fn0800_920E(ax_474, cx_477, bx_476, bp_475, si_480, di_478, es_479, ds, out cx_490, out bx_1834, out bp_1835, out si_1836, out di_491, out es_1837)
	diOut = di_491
	return (byte) cx_490
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_90BD:
	si_500 = 0x0008
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_9098:
	bLoc03_1315 = bLoc03_1267 | 0x04
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_909E:
	bLoc03_1316 = bLoc03_1267 | 0x02
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_9092:
	bLoc03_1317 = bLoc03_1267 | 0x08
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_91A1:
	sp_513 = sp_897 - 2
	Mem514[ss:sp_513:word16] = ss
	Mem517[ss:sp_513 - 2:word16] = fp - 0x000A
	Mem519[ss:sp_513 - 4:word16] = ss
	Mem522[ss:sp_513 - 6:word16] = fp - 0x0008
	Mem528[ss:sp_513 - 8:word16] = wLoc0C_1318 & 0x7FFF
	Mem531[ss:sp_513 - 10:word16] = wArg08
	Mem534[ss:sp_513 - 12:word16] = wArg06
	Mem537[ss:sp_513 - 14:word16] = wArg04
	Mem540[ss:sp_513 - 16:word16] = wArg02
	fn0800_A2D0(ds)
	branch wLoc0A <= 0x0000 l0800_9203
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_9203:
	fn0800_A2D8(ds)
	branch wLoc0A < 0x0000 l0800_919E
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_919E:
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_919E_thunk_fn0800_93A6:
	fn0800_93A6(fp - 2, si_92, ax_93, psegArg0C, out bp_1862, out si_1863, out di_551, out es_1864)
	diOut = di_551
	return (byte) cx_909
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_9208:
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_9208_thunk_fn0800_93BE:
	fn0800_93BE(fp - 2, out bp_1859, out si_1860, out di_562, out es_1861)
	diOut = di_562
	return (byte) cx_909
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_91CA:
	branch ((int16) bLoc03_1267 & 0x0001) != 0x0000 l0800_91FD
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_91FD:
	Top_572 = fn0800_A2D8(ds)
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_91D3:
	di_573 = fn0800_8FAB(fp - 2, ds, out es_574)
	wLoc06_1325 = wLoc06_1679 + 0x0001
	branch (bLoc03_1267 & 0x04) == 0x00 l0800_91E4
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_91E4:
	branch (bLoc03_1267 & 0x08) == 0x00 l0800_91EF
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_91EF:
	ax_587 = 0x0000
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_91EA:
	ax_590 = 0x0008
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_91DF:
	ax_591 = 0x0004
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_91F1:
	ax_594 = PHI((ax_591, l0800_91DF), (ax_590, l0800_91EA), (ax_587, l0800_91EF))
	Mem596[ss:sp_541 + 0x0010:word16] = ax_594
	Mem599[ss:sp_541 + 0x000E:word16] = es_574
	Mem602[ss:sp_541 + 0x000C:word16] = di_573
	Top_605 = fn0800_A2D4(ds)
	sp_606 = sp_604 + 0x0006
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_90CC:
	si_608 = 0x0000
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_90C2:
	si_611 = 0x000A
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_90CE:
	si_652 = PHI((si_161, l0800_90C7), (si_500, l0800_90BD), (si_611, l0800_90C2), (si_608, l0800_90CC))
	branch (ax_93 & 0x0020) != 0x0000 l0800_90DD
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_90D4:
	branch ax_93 == 0x0058 l0800_90DD
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_90D9:
	bLoc03_1328 = bLoc03_1267 | 0x04
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_90DD:
	bLoc03_1347 = PHI((bLoc03_1267, l0800_90CE), (bLoc03_1267, l0800_90D4), (bLoc03_1328, l0800_90D9))
	sp_632 = sp_897 - 2
	Mem634[ss:sp_632:word16] = ss
	Mem638[ss:sp_632 - 2:word16] = fp - 0x000A
	Mem640[ss:sp_632 - 4:word16] = ss
	Mem643[ss:sp_632 - 6:word16] = fp - 0x0008
	Mem649[ss:sp_632 - 8:word16] = wLoc0C_1318 & 0x7FFF
	Mem653[ss:sp_632 - 10:word16] = si_652
	Mem656[ss:sp_632 - 12:word16] = wArg08
	Mem659[ss:sp_632 - 14:word16] = wArg06
	Mem662[ss:sp_632 - 16:word16] = wArg04
	Mem665[ss:sp_632 - 18:word16] = wArg02
	ax_683 = fn0800_94B0(wLoc0C_1318 & 0x7FFF, cx_909, dx_681, bx_121 << 0x0001, fp - 2, si_652, ax_93, psegArg0C, ds, Mem665[ss:sp_632 - 18:word16], Mem665[ss:sp_632 - 16:word16], Mem665[ss:sp_632 - 14:word16], Mem665[ss:sp_632 - 12:word16], Mem665[ss:sp_632 - 10:word16], Mem665[ss:sp_632 - 8:word16], out cx_685, out dx_687, out bx_684, out si_689, out di_686, out es_688, out Top_690)
	branch wLoc0A <= 0x0000 l0800_911F
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_911F:
	branch wLoc0A < 0x0000 l0800_9124
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_9124:
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_9124_thunk_fn0800_93A6:
	fn0800_93A6(fp - 2, si_689, di_686, es_688, out bp_1841, out si_1842, out di_701, out es_1843)
	diOut = di_701
	return (byte) cx_685
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_9121:
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_9121_thunk_fn0800_93BE:
	fn0800_93BE(fp - 2, out bp_1838, out si_1839, out di_712, out es_1840)
	diOut = di_712
	return (byte) cx_685
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_9107:
	branch (bLoc03_1347 & 0x01) != 0x00 l0800_911C
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_910D:
	wLoc06_1351 = wLoc06_1679 + 0x0001
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_9110:
	wLoc06_1681 = PHI((wLoc06_1679, l0800_90B0), (wLoc06_1351, l0800_910D))
	bLoc03_1352 = PHI((bLoc03_1267, l0800_90B0), (bLoc03_1347, l0800_910D))
	Top_1250 = PHI((Top_918, l0800_90B0), (Top_690, l0800_910D))
	bx_1232 = PHI((bx_124, l0800_90B0), (bx_684, l0800_910D))
	cx_1222 = PHI((cx_909, l0800_90B0), (cx_685, l0800_910D))
	dx_738 = PHI((dx_163, l0800_90B0), (dx_687, l0800_910D))
	ax_731 = PHI((ax_162, l0800_90B0), (ax_683, l0800_910D))
	di_725 = fn0800_8FAB(fp - 2, ds, out es_726)
	Mem732[es_726:di_725:word16] = ax_731
	di_733 = di_725 + 0x0002
	branch (bLoc03_1352 & 0x04) == 0x00 l0800_911C
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_911A:
	Mem741[es_726:di_725 + 0x0002:word16] = dx_738
	dx_740 = ax_731
	di_742 = di_725 + 0x0004
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_911C:
	bLoc03_1710 = PHI((bLoc03_1352, l0800_9110), (bLoc03_1352, l0800_911A), (bLoc03_1347, l0800_9107))
	wLoc06_1680 = PHI((wLoc06_1681, l0800_9110), (wLoc06_1681, l0800_911A), (wLoc06_1679, l0800_9107))
	Top_1249 = PHI((Top_1250, l0800_9110), (Top_1250, l0800_911A), (Top_690, l0800_9107))
	dx_1241 = PHI((dx_738, l0800_9110), (dx_740, l0800_911A), (dx_687, l0800_9107))
	bx_1231 = PHI((bx_1232, l0800_9110), (bx_1232, l0800_911A), (bx_684, l0800_9107))
	cx_1221 = PHI((cx_1222, l0800_9110), (cx_1222, l0800_911A), (cx_685, l0800_9107))
	di_1104 = PHI((di_733, l0800_9110), (di_742, l0800_911A), (di_686, l0800_9107))
	Mem1089 = PHI((Mem732, l0800_9110), (Mem741, l0800_911A), (Mem665, l0800_9107))
	sp_1212 = sp_897
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_926F:
	branch (bLoc03_1267 & 0x01) != 0x00 l0800_9278
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_9275:
	di_746 = fn0800_8FAB(fp - 2, ds, out es_747)
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_9278:
	es_1191 = PHI((es_86, l0800_926F), (es_747, l0800_9275))
	di_1108 = PHI((di_101, l0800_926F), (di_746, l0800_9275))
	si_756 = wLoc0C_1318
	branch wLoc0C_1318 >= 0x0000 l0800_9282
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_927F:
	si_760 = 0x0001
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_9282:
	si_1193 = PHI((si_756, l0800_9278), (si_760, l0800_927F))
	branch wLoc0C_1318 == 0x0000 l0800_92A2
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_9284:
	wLoc08_1354 = PHI((wLoc08_1383, l0800_9282), (wLoc08_1355, l0800_929F))
	Top_791 = PHI((Top_918, l0800_9282), (Top_792, l0800_929F))
	dx_789 = PHI((dx_681, l0800_9282), (dx_790, l0800_929F))
	bx_787 = PHI((bx_124, l0800_9282), (bx_788, l0800_929F))
	cx_785 = PHI((cx_909, l0800_9282), (cx_796, l0800_929F))
	ax_782 = PHI((ax_99, l0800_9282), (ax_1196, l0800_929F))
	di_781 = PHI((di_1108, l0800_9282), (di_1109, l0800_929F))
	si_780 = PHI((si_1193, l0800_9282), (si_822, l0800_929F))
	es_771 = PHI((es_1191, l0800_9282), (es_798, l0800_929F))
	sp_769 = PHI((sp_897, l0800_9282), (sp_799, l0800_929F))
	v65_766 = wLoc08_1354 + 0x0001
	sp_770 = sp_769 - 2
	Mem772[ss:sp_770:word16] = es_771
	Mem775[ss:sp_770 - 2:word16] = wArg08
	Mem778[ss:sp_770 - 4:word16] = wArg06
	call SEQ(0x0800, wArg02) (retsize: 2;)
		uses: ax:ax_782,bp:fp - 2,bx:bx_787,cx:cx_785,di:di_781,ds:ds,dx:dx_789,es:es_771,si:si_780,sp:sp_770 - 4,ss:ss,Stack +0000:bp,Stack +0004:wArg02,Stack +0006:wArg04,Stack +0008:wArg06,Stack +000A:wArg08,Stack +000C:si_92,Stack +000E:psegArg0C,Stack +FFFFFFD0:es,Stack +FFFFFFD2:di,Stack +FFFFFFD4:si,Stack +FFFFFFF6:wLoc0C_1318,Stack +FFFFFFF8:wLoc0A,Stack +FFFFFFFA:v65_766,Stack +FFFFFFFC:wLoc06_1679,Stack +FFFFFFFF:bLoc03_1267,Top:Top_791
		defs: ax:ax_783,bx:bx_788,dx:dx_790,sp:sp_779,Top:Top_792
	al_818 = (byte) ax_783 (alias)
	wLoc08_1355 = v65_766
	cx_796 = Mem778[ss:sp_779 + 2:word16]
	es_798 = Mem778[ss:sp_779 + 4:selector]
	sp_799 = sp_779 + 6
	ax_1197 = DPB(ax_783, al_818, 0) (alias)
	ax_1198 = DPB(ax_783, al_818, 0) (alias)
	branch ax_783 < 0x0000 l0800_92AE
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_92AE:
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_92AE_thunk_fn0800_93A6:
	fn0800_93A6(fp - 2, si_780, di_781, es_798, out bp_1856, out si_1857, out di_806, out es_1858)
	diOut = di_806
	return (byte) cx_796
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_9298:
	branch (bLoc03_1267 & 0x01) != 0x00 l0800_929F
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_929E:
	Mem819[es_798:di_781:byte] = al_818
	di_820 = di_781 + 0x0001
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_929F:
	ax_1196 = PHI((ax_1197, l0800_9298), (ax_1198, l0800_929E))
	di_1109 = PHI((di_781, l0800_9298), (di_820, l0800_929E))
	Mem832 = PHI((Mem778, l0800_9298), (Mem819, l0800_929E))
	si_822 = si_780 - 0x0001
	branch si_822 > 0x0000 l0800_9284
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_92A2:
	wLoc08_1608 = PHI((wLoc08_1383, l0800_9282), (wLoc08_1355, l0800_929F))
	Top_1252 = PHI((Top_918, l0800_9282), (Top_792, l0800_929F))
	dx_1243 = PHI((dx_681, l0800_9282), (dx_790, l0800_929F))
	bx_1234 = PHI((bx_124, l0800_9282), (bx_788, l0800_929F))
	cx_1224 = PHI((cx_909, l0800_9282), (cx_796, l0800_929F))
	sp_1215 = PHI((sp_897, l0800_9282), (sp_799, l0800_929F))
	di_1106 = PHI((di_1108, l0800_9282), (di_1109, l0800_929F))
	Mem830 = PHI((Mem96, l0800_9282), (Mem832, l0800_929F))
	branch (bLoc03_1267 & 0x01) != 0x00 l0800_92AB
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_92A8:
	wLoc06_1378 = wLoc06_1679 + 0x0001
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_92AB:
	wLoc06_1682 = PHI((wLoc06_1679, l0800_92A2), (wLoc06_1378, l0800_92A8))
	Mem1090 = PHI((Mem830, l0800_92A2), (Mem837, l0800_92A8))
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_907E:
	wLoc0C_1379 = ax_93 - 0x0030
	di_843 = wLoc0C_1318
	branch wLoc0C_1318 < 0x0000 l0800_9051
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_9088:
	dx_1186 = SLICE(wLoc0C_1318 *u 0x000A, word16, 16) (alias)
	wLoc0C_1380 = ax_93 - 0x0030 + (word16) (wLoc0C_1318 *u 0x000A)
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_9078:
	bLoc03_1381 = bLoc03_1267 | 0x01
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_9071:
	al_883 = (byte) ax_93 (alias)
	di_859 = di_98
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_906C_thunk_fn0800_93A6:
	fn0800_93A6(fp - 2, si_92, ax_93, psegArg0C, out bp_1821, out si_1822, out di_862, out es_1823)
	diOut = di_862
	return (byte) cx_909
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_9067:
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_9067_thunk_fn0800_93A6:
	fn0800_93A6(fp - 2, si_92, ax_93, psegArg0C, out bp_1809, out si_1810, out di_873, out es_1811)
	diOut = di_873
	return (byte) cx_909
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_8FD8:
	bLoc03_1411 = PHI((bLoc03_1412, l0800_8FD4), (bLoc03_1267, l0800_9071))
	wLoc0C_1409 = PHI((wLoc0C_1410, l0800_8FD4), (wLoc0C_1318, l0800_9071))
	wArg0A_1405 = PHI((wArg0A_1406, l0800_8FD4), (wArg0A_1266, l0800_9071))
	dx_914 = PHI((dx_915, l0800_8FD4), (dx_681, l0800_9071))
	bx_911 = PHI((bx_912, l0800_8FD4), (bx_124, l0800_9071))
	si_904 = PHI((si_66, l0800_8FD4), (si_92, l0800_9071))
	di_886 = PHI((di_71, l0800_8FD4), (di_859, l0800_9071))
	al_882 = PHI((al_67, l0800_8FD4), (al_883, l0800_9071))
	v17_892 = wLoc08_1383 + 0x0001
	sp_898 = sp_897 - 2
	Mem899[ss:sp_898:word16] = wArg08
	Mem902[ss:sp_898 - 2:word16] = wArg06
	ax_884 = (int16) al_882
	call SEQ(0x0800, wArg02) (retsize: 2;)
		uses: ax:di_886,bp:fp - 2,bx:bx_911,cx:cx_909,di:ax_884,ds:ds,dx:dx_914,es:psegArg0C,si:si_904,sp:sp_898 - 2,ss:ss,Stack +0000:bp,Stack +0004:wArg02,Stack +0006:wArg04,Stack +0008:wArg06,Stack +000A:wArg08,Stack +000C:wArg0A_1405,Stack +000E:psegArg0C,Stack +FFFFFFD0:es,Stack +FFFFFFD2:di,Stack +FFFFFFD4:si,Stack +FFFFFFF6:wLoc0C_1409,Stack +FFFFFFF8:wLoc0A,Stack +FFFFFFFA:v17_892,Stack +FFFFFFFC:wLoc06_1679,Stack +FFFFFFFF:bLoc03_1411,Top:Top_918
		defs: ax:ax_906,bx:bx_913,dx:dx_916,sp:sp_903,Top:Top_920
	wLoc08_1384 = v17_892
	cx_924 = Mem902[ss:sp_903 + 2:word16]
	sp_925 = sp_903 + 4
	al_930 = (byte) ax_906 (alias)
	branch ax_906 < 0x0000 l0800_9016
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_8FEC:
	ax_931 = (int16) al_930
	di_932 = ax_884
	branch ax_884 < 0x0000 l0800_902B
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_8FF1:
	branch Mem902[ds:ax_884 + 0x257C:byte] != 0x01 l0800_902B
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_902B:
	branch ax_931 == ax_884 l0800_8FCB
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_902F:
	Mem948[ss:sp_903 + 2:word16] = wArg08
	Mem951[ss:sp_903:word16] = wArg06
	Mem953[ss:sp_903 - 2:word16] = ax_931
	call SEQ(0x0800, wArg04) (retsize: 2;)
		uses: ax:ax_931,bp:fp - 2,bx:bx_913,cx:cx_924,di:ax_884,ds:ds,dx:dx_916,es:psegArg0C,si:si_904,sp:sp_903 - 2,ss:ss,Stack +0000:bp,Stack +0004:wArg02,Stack +0006:wArg04,Stack +0008:wArg06,Stack +000A:wArg08,Stack +000C:wArg0A_1405,Stack +000E:psegArg0C,Stack +FFFFFFD0:es,Stack +FFFFFFD2:di,Stack +FFFFFFD4:si,Stack +FFFFFFF6:wLoc0C_1409,Stack +FFFFFFF8:wLoc0A,Stack +FFFFFFFA:v17_892,Stack +FFFFFFFC:wLoc06_1679,Stack +FFFFFFFF:bLoc03_1411,Top:Top_920
		defs: cx:cx_960
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_903F_thunk_fn0800_93A6:
	fn0800_93A6(fp - 2, si_904, ax_884, psegArg0C, out bp_1815, out si_1816, out di_975, out es_1817)
	diOut = di_975
	return (byte) cx_960
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_8FF8:
	wLoc08_1448 = PHI((wLoc08_1384, l0800_8FF1), (wLoc08_1464, l0800_9004))
	Top_1033 = PHI((Top_920, l0800_8FF1), (Top_1055, l0800_9004))
	dx_1030 = PHI((dx_916, l0800_8FF1), (dx_1054, l0800_9004))
	cx_1026 = PHI((cx_924, l0800_8FF1), (cx_1059, l0800_9004))
	sp_1006 = PHI((sp_925, l0800_8FF1), (sp_1060, l0800_9004))
	Mem996 = PHI((Mem902, l0800_8FF1), (Mem1049, l0800_9004))
	bx_986 = PHI((bx_913, l0800_8FF1), (bx_1053, l0800_9004))
	ax_984 = PHI((ax_931, l0800_8FF1), (ax_1061, l0800_9004))
	bl_989 = (byte) ax_984 (alias)
	bx_995 = DPB(ax_984, bl_989, 0) (alias)
	branch bl_989 < 0x00 l0800_9019
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_8FFD:
	branch Mem996[ds:bx_995 + 0x257C:byte] != 0x01 l0800_9019
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_9019:
	sp_1007 = sp_1006 - 2
	Mem1008[ss:sp_1007:word16] = wArg08
	Mem1011[ss:sp_1007 - 2:word16] = wArg06
	Mem1014[ss:sp_1007 - 4:word16] = bx_995
	call SEQ(0x0800, wArg04) (retsize: 2;)
		uses: ax:bx_986,bp:fp - 2,bx:bx_995,cx:cx_1026,di:ax_884,ds:ds,dx:dx_1030,es:psegArg0C,si:si_904,sp:sp_1007 - 4,ss:ss,Stack +0000:bp,Stack +0004:wArg02,Stack +0006:wArg04,Stack +0008:wArg06,Stack +000A:wArg08,Stack +000C:wArg0A_1405,Stack +000E:psegArg0C,Stack +FFFFFFD0:es,Stack +FFFFFFD2:di,Stack +FFFFFFD4:si,Stack +FFFFFFF6:wLoc0C_1409,Stack +FFFFFFF8:wLoc0A,Stack +FFFFFFFA:wLoc08_1448,Stack +FFFFFFFC:wLoc06_1679,Stack +FFFFFFFF:bLoc03_1411,Top:Top_1033
		defs: bx:bx_1028,cx:cx_1027,dx:dx_1031,sp:sp_1015,Top:Top_1034
	sp_1036 = sp_1015 + 0x0006
	wLoc08_1463 = wLoc08_1448 - 0x0001
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_9004:
	v26_1041 = wLoc08_1448 + 0x0001
	sp_1045 = sp_1006 - 2
	Mem1046[ss:sp_1045:word16] = wArg08
	Mem1049[ss:sp_1045 - 2:word16] = wArg06
	call SEQ(0x0800, wArg02) (retsize: 2;)
		uses: ax:bx_986,bp:fp - 2,bx:bx_995,cx:cx_1026,di:ax_884,ds:ds,dx:dx_1030,es:psegArg0C,si:si_904,sp:sp_1045 - 2,ss:ss,Stack +0000:bp,Stack +0004:wArg02,Stack +0006:wArg04,Stack +0008:wArg06,Stack +000A:wArg08,Stack +000C:wArg0A_1405,Stack +000E:psegArg0C,Stack +FFFFFFD0:es,Stack +FFFFFFD2:di,Stack +FFFFFFD4:si,Stack +FFFFFFF6:wLoc0C_1409,Stack +FFFFFFF8:wLoc0A,Stack +FFFFFFFA:v26_1041,Stack +FFFFFFFC:wLoc06_1679,Stack +FFFFFFFF:bLoc03_1411,Top:Top_1033
		defs: ax:ax_1051,bx:bx_1053,dx:dx_1054,sp:sp_1050,Top:Top_1055
	wLoc08_1464 = v26_1041
	cx_1059 = Mem1049[ss:sp_1050 + 2:word16]
	sp_1060 = sp_1050 + 4
	ax_1061 = ax_1051
	branch ax_1051 > 0x0000 l0800_8FF8
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_9016:
	cx_1752 = PHI((cx_924, l0800_8FD8), (cx_1059, l0800_9004))
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_9016_thunk_fn0800_93A6:
	fn0800_93A6(fp - 2, si_904, ax_884, psegArg0C, out bp_1806, out si_1807, out di_1071, out es_1808)
	diOut = di_1071
	return (byte) cx_1752
// DataOut:
// DataOut (flags):
// SymbolicIn:

fn0800_8F97_exit:
// DataOut:
// DataOut (flags):
// SymbolicIn:



word16 fn0800_8FAB(word16 bp, selector ds, ptr16 & esOut)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  bp:[0..15] ds:[0..15] ss:[0..15]
// LiveOut: di es
// Trashed: SCZO di es Top
// Preserved: sp
fn0800_8FAB_entry:
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_8FAB:
	ptr32 es_di_7 = Mem0[ss:bp + 0x0010:segptr32]
	word16 di_12 = (word16) es_di_7
	branch (Mem0[ss:bp - 0x0001:byte] & 0x20) == 0x00 l0800_8FBC
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_8FBC:
	word16 di_13 = Mem0[es_di_7:word16]
	Mem20[ss:bp + 0x0010:word16] = Mem16[ss:bp + 0x0010:word16] + 0x0002
	esOut = ds
	return di_13
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_8FB4:
	ptr32 es_di_22 = Mem0[ds:di_12:segptr32]
	Mem24[ss:bp + 0x0010:word16] = Mem0[ss:bp + 0x0010:word16] + 0x0004
	esOut = SLICE(es_di_22, selector, 16)
	return (word16) es_di_22
// DataOut:
// DataOut (flags):
// SymbolicIn:

fn0800_8FAB_exit:
// DataOut:
// DataOut (flags):
// SymbolicIn:



word16 fn0800_912A(word16 ax, word16 cx, word16 bx, word16 bp, word16 si, word16 di, selector es, selector ds, ptr16 & cxOut, ptr16 & bxOut, ptr16 & bpOut, ptr16 & siOut, ptr16 & diOut, ptr16 & esOut)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  ax:[0..15] bp:[0..15] bx:[0..15] cx:[0..15] di:[0..15] ds:[0..15] es:[0..15] si:[0..15] ss:[0..15]
// LiveOut: ax bp bx cx di es si
// Trashed: SCZO ax bp bx cx di es si sp Top
// Preserved:
fn0800_912A_entry:
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_912A:
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_912A_thunk_fn0800_93C5:
	word16 bx_14
	word16 cx_15
	word16 bp_18
	word16 di_19
	selector es_20
	word16 si_21
	word16 ax_13 = fn0800_93C5(ax, cx, bx, bp, si, di, es, ds, out cx_15, out bx_14, out bp_18, out si_21, out di_19, out es_20)
	cxOut = cx_15
	bxOut = bx_14
	bpOut = bp_18
	siOut = si_21
	diOut = di_19
	esOut = es_20
	return ax_13
// DataOut:
// DataOut (flags):
// SymbolicIn:

fn0800_912A_exit:
// DataOut:
// DataOut (flags):
// SymbolicIn:



void fn0800_9145(word16 ax, word16 bp, word16 si, word16 di, selector es)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  ax:[0..15] bp:[0..15] di:[0..15] es:[0..15] si:[0..15] ss:[0..15]
// LiveOut:
// Trashed: SCZO ax bp cx di dx es si sp Top
// Preserved:
fn0800_9145_entry:
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_9145:
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_9145_thunk_fn0800_93EF:
	fn0800_93EF(ax, bp, si, di, es)
	return
// DataOut:
// DataOut (flags):
// SymbolicIn:

fn0800_9145_exit:
// DataOut:
// DataOut (flags):
// SymbolicIn:



void fn0800_9169(word16 ax, word16 bp, word16 si, word16 di, selector es)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  ax:[0..15] bp:[0..15] di:[0..15] es:[0..15] si:[0..15] ss:[0..15]
// LiveOut:
// Trashed: SCZO ax bp cx di dx es si sp Top
// Preserved:
fn0800_9169_entry:
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_9169:
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_9169_thunk_fn0800_93EF:
	fn0800_93EF(ax, bp, si, di, es)
	return
// DataOut:
// DataOut (flags):
// SymbolicIn:

fn0800_9169_exit:
// DataOut:
// DataOut (flags):
// SymbolicIn:



word16 fn0800_920E(word16 ax, word16 cx, word16 bx, word16 bp, word16 si, word16 di, selector es, selector ds, ptr16 & cxOut, ptr16 & bxOut, ptr16 & bpOut, ptr16 & siOut, ptr16 & diOut, ptr16 & esOut)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  ax:[0..15] bp:[0..15] bx:[0..15] cx:[0..15] di:[0..15] ds:[0..15] es:[0..15] si:[0..15] ss:[0..15]
// LiveOut: ax bp bx cx di es si
// Trashed: SCZO ax bp bx cx di es si sp Top
// Preserved:
fn0800_920E_entry:
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_920E:
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_920E_thunk_fn0800_93C5:
	word16 bx_14
	word16 cx_15
	word16 bp_18
	word16 di_19
	selector es_20
	word16 si_21
	word16 ax_13 = fn0800_93C5(ax, cx, bx, bp, si, di, es, ds, out cx_15, out bx_14, out bp_18, out si_21, out di_19, out es_20)
	cxOut = cx_15
	bxOut = bx_14
	bpOut = bp_18
	siOut = si_21
	diOut = di_19
	esOut = es_20
	return ax_13
// DataOut:
// DataOut (flags):
// SymbolicIn:

fn0800_920E_exit:
// DataOut:
// DataOut (flags):
// SymbolicIn:



word16 fn0800_93A6(word16 bp, word16 si, word16 di, selector es, ptr16 & bpOut, ptr16 & siOut, ptr16 & diOut, ptr16 & esOut)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  bp:[0..15] di:[0..15] es:[0..15] si:[0..15] ss:[0..15]
// LiveOut: ax bp di es si
// Trashed: SCZO ax bp di es si sp Top
// Preserved:
fn0800_93A6_entry:
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_93A6:
	Mem9[ss:v4 - 2:word16] = Mem0[ss:bp + 0x000A:word16]
	Mem12[ss:v4 - 4:word16] = Mem9[ss:bp + 0x0008:word16]
	Mem15[ss:v4 - 6:word16] = 0xFFFF
	call SEQ(0x0800, Mem15[ss:bp + 0x0006:word16]) (retsize: 2;)
		uses: ax:0xFFFF,bp:bp,di:di,es:es,si:si,sp:v4 - 6,ss:ss,Top:0
	Mem27[ss:bp - 0x0004:word16] = Mem15[ss:bp - 0x0004:word16] - (Mem15[ss:bp - 0x0004:word16] <u 0x0001)
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_93BA_thunk_fn0800_93BE:
	word16 bp_30
	word16 di_31
	selector es_32
	word16 si_33
	word16 ax_29 = fn0800_93BE(bp, out bp_30, out si_33, out di_31, out es_32)
	bpOut = bp_30
	siOut = si_33
	diOut = di_31
	esOut = es_32
	return ax_29
// DataOut:
// DataOut (flags):
// SymbolicIn:

fn0800_93A6_exit:
// DataOut:
// DataOut (flags):
// SymbolicIn:



word16 fn0800_93BE(word16 bp, ptr16 & bpOut, ptr16 & siOut, ptr16 & diOut, ptr16 & esOut)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  bp:[0..15] ss:[0..15]
// LiveOut: ax bp di es si
// Trashed: ax bp di es si sp Top
// Preserved:
fn0800_93BE_entry:
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_93BE:
	selector es_6 = Mem0[ss:v4:selector]
	word16 ax_9 = Mem0[ss:bp - 0x0004:word16]
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_9453:
	word16 di_10 = Mem0[ss:v4 + 2:word16]
	word16 si_12 = Mem0[ss:v4 + 4:word16]
	bpOut = Mem0[ss:bp:word16]
	siOut = si_12
	diOut = di_10
	esOut = es_6
	return ax_9
// DataOut:
// DataOut (flags):
// SymbolicIn:

fn0800_93BE_exit:
// DataOut:
// DataOut (flags):
// SymbolicIn:



word16 fn0800_93C5(word16 ax, word16 cx, word16 bx, word16 bp, word16 si, word16 di, selector es, selector ds, ptr16 & cxOut, ptr16 & bxOut, ptr16 & bpOut, ptr16 & siOut, ptr16 & diOut, ptr16 & esOut)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  ax:[0..15] bp:[0..15] bx:[0..15] cx:[0..15] di:[0..15] ds:[0..15] es:[0..15] si:[0..15] ss:[0..15]
// LiveOut: ax bp bx cx di es si
// Trashed: SCZO ax bp bx cx di es si sp Top
// Preserved:
fn0800_93C5_entry:
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_93C5:
	Mem8[ss:bp - 0x0006:word16] = Mem6[ss:bp - 0x0006:word16] + 0x0001
	Mem12[ss:v4 - 2:word16] = Mem8[ss:bp + 0x000A:word16]
	Mem15[ss:v4 - 4:word16] = Mem12[ss:bp + 0x0008:word16]
	word16 sp_16
	int8 Top_17
	word16 ax_21
	word16 bx_23
	call SEQ(0x0800, Mem15[ss:bp + 0x0004:word16]) (retsize: 2;)
		uses: ax:ax_20,bp:bp,bx:bx_22,cx:cx_18,di:di,ds:ds,es:es,si:si,sp:v4 - 4,ss:ss,Top:0
		defs: ax:ax_21,bx:bx_23,sp:sp_16,Top:Top_17
	cx = Mem15[ss:sp_16 + 2:word16]
	ax = ax_21
	byte al_50 = (byte) ax_21
	branch ax_21 <= 0x0000 l0800_93EA
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_93EA:
	branch ax_21 == 0x0000 l0800_93E4
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_93EC:
	word16 cx_34 = Mem15[ss:sp_16 + 4:word16]
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_93ED_thunk_fn0800_93A6:
	word16 bp_40
	word16 di_41
	selector es_42
	word16 si_43
	word16 ax_39 = fn0800_93A6(bp, si, di, es, out bp_40, out si_43, out di_41, out es_42)
	cxOut = cx_34
	bxOut = bx_23
	bpOut = bp_40
	siOut = si_43
	diOut = di_41
	esOut = es_42
	return ax_39
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_93D7:
	ax = DPB(ax_21, al_50, 0) (alias)
	branch al_50 < 0x00 l0800_93E4
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_93DB:
	bx = bx_23
	branch Mem15[ds:ax + 0x257C:byte] == 0x01 l0800_93C5
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_93E4:
	word16 cx_67 = Mem15[ss:sp_16 + 4:word16]
	word16 cx_75
	word16 ax_77
	word16 bx_79
	call cx_67 + 0x0003 (retsize: 2;)
		uses: ax:ax_76,bp:bp,bx:bx_23,cx:cx_67 + 0x0003,di:di,ds:ds,es:es,si:si,sp:sp_16 + 6,ss:ss,Top:Top_17
		defs: ax:ax_77,bx:bx_79,cx:cx_75
	cxOut = cx_75
	bxOut = bx_79
	bpOut = bp
	siOut = si
	diOut = di
	esOut = es
	return ax_77
// DataOut:
// DataOut (flags):
// SymbolicIn:

fn0800_93C5_exit:
// DataOut:
// DataOut (flags):
// SymbolicIn:



void fn0800_93EF(word16 ax, word16 bp, word16 si, word16 di, selector es)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  ax:[0..15] bp:[0..15] di:[0..15] es:[0..15] si:[0..15] ss:[0..15]
// LiveOut:
// Trashed: SCZO ax bp cx di dx es si sp Top
// Preserved:
fn0800_93EF_entry:
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_93EF:
	word16 sp_16 = fp
	int8 Top_111 = 0
	word16 dx_104 = 0x0000
	word16 cx_155 = 0x0004
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_93F4:
	word16 v8_10 = Mem9[ss:bp - 0x000A:word16] - 0x0001
	Mem11[ss:bp - 0x000A:word16] = v8_10
	byte cl_51 = (byte) cx_155
	branch v8_10 < 0x0000 l0800_9442
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_9442:
	ax = 0x0000
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_93F9:
	word16 sp_17 = sp_16 - 2
	Mem19[ss:sp_17:word16] = dx_104
	Mem22[ss:sp_17 - 2:word16] = cx_155
	Mem24[ss:bp - 0x0006:word16] = Mem22[ss:bp - 0x0006:word16] + 0x0001
	Mem28[ss:sp_17 - 4:word16] = Mem24[ss:bp + 0x000A:word16]
	Mem31[ss:sp_17 - 6:word16] = Mem28[ss:bp + 0x0008:word16]
	word16 sp_32
	word16 ax_36
	call SEQ(0x0800, Mem31[ss:bp + 0x0004:word16]) (retsize: 2;)
		uses: ax:ax_35,bp:bp,cx:cx_21,di:di,dx:dx_18,es:es,si:si,sp:sp_17 - 6,ss:ss,Top:Top_37
		defs: ax:ax_36,sp:sp_32,Top:Top_38
	word16 cx_44 = Mem31[ss:sp_32 + 4:word16]
	byte al_55 = (byte) ax_36
	cl_51 = (byte) cx_44 (alias)
	dx_104 = Mem31[ss:sp_32 + 6:word16]
	sp_16 = sp_32 + 8
	ax = ax_36
	ax = DPB(ax_36, al_55, 0) (alias)
	ax = DPB(ax_36, al_55, 0) (alias)
	branch ax_36 <= 0x0000 l0800_9444
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_940F:
	word16 cx_152
	word16 cx_150
	word16 cx_148
	word16 cx_146
	word16 cx_143
	word16 cx_141
	cl_51 = cl_51 - 0x01
	word16 cx_140 = DPB(cx_44, cl_51 - 0x01, 0)
	word16 cx_142 = DPB(cx_141, cl_51 - 0x01, 0)
	word16 cx_139 = DPB(cx_143, cl_51 - 0x01, 0)
	word16 cx_147 = DPB(cx_146, cl_51 - 0x01, 0)
	word16 cx_145 = DPB(cx_148, cl_51 - 0x01, 0)
	word16 cx_151 = DPB(cx_150, cl_51 - 0x01, 0)
	cx_145 = DPB(cx_152, cl_51 - 0x01, 0) (alias)
	branch cl_51 < 0x01 l0800_9444
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_9413:
	byte ch_115 = al_55 - 0x30
	cx_141 = DPB(cx_140, al_55 - 0x30, 8) (alias)
	cx_143 = DPB(cx_142, al_55 - 0x30, 8) (alias)
	branch al_55 <u 0x30 l0800_9444
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_941A:
	branch al_55 <u 0x3A l0800_9436
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_941F:
	byte ch_114 = al_55 - 0x41
	cx_146 = DPB(cx_139, al_55 - 0x41, 8) (alias)
	cx_148 = DPB(cx_147, al_55 - 0x41, 8) (alias)
	branch al_55 <u 0x41 l0800_9444
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_9424:
	branch al_55 <u 0x47 l0800_9433
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_9429:
	ch_114 = al_55 - 0x61
	cx_150 = DPB(cx_145, al_55 - 0x61, 8) (alias)
	cx_152 = DPB(cx_151, al_55 - 0x61, 8) (alias)
	branch al_55 <u 0x61 l0800_9444
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_942E:
	branch al_55 >=u 0x67 l0800_9444
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_9444:
	branch cl_51 == 0x04 l0800_944F
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_944F:
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_9450_thunk_fn0800_93A6:
	fn0800_93A6(bp, si, di, es, out bp_187, out si_188, out di_189, out es_190)
	return
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_9449:
	word16 cx_99 = Mem78[ss:sp_16:word16]
	call cx_99 + 0x0003 (retsize: 2;)
		uses: ax:ax_107,bp:bp,cx:cx_99 + 0x0003,di:di,dx:dx_104,es:es,si:si,sp:sp_77 + 2,ss:ss,Top:Top_111
	return
// DataOut:
// DataOut (flags):
// SymbolicIn:

fn0800_93EF_exit:
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_9433:
	ch_115 = ch_114 + 0x0A
	cx_139 = DPB(cx_145, ch_115, 8) (alias)
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_9436:
	cx_155 = DPB(cx_139, ch_115, 8) (alias)
	dx_104 = DPB(dx_104 << 0x0004, (byte) (dx_104 << 0x0004) + ch_115, 0) (alias)
// DataOut:
// DataOut (flags):
// SymbolicIn:



bool fn0800_9485(byte cl, byte bl, ptr16 & bxOut)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  bx:[0..7] cl:[0..7]
// LiveOut: C bx
// Trashed: SCZO bx Top
// Preserved: sp
fn0800_9485_entry:
	byte bl_8 = (byte) bx
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_9485:
	bool C_40
	word16 bx_38
	byte bl_16 = bl_8 - 0x30
	word16 bx_51 = DPB(bx, bl_8 - 0x30, 0)
	branch bl_8 <u 0x30 l0800_94AD
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_948B:
	branch bl_8 <=u 0x39 l0800_94A2
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_9490:
	word16 bx_54
	branch bl_8 >u 0x5A l0800_949A
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_949A:
	bl_16 = bl_8 - 0x57
	bx_54 = DPB(bx, bl_8 - 0x57, 0) (alias)
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_9495:
	bl_16 = bl_8 - 0x37
	bx_54 = DPB(bx, bl_8 - 0x37, 0) (alias)
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_949D:
	bx_51 = DPB(bx_54, bl_16, 0) (alias)
	branch bl_16 <=u 0x09 l0800_94AD
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_94A2:
	word16 bx_59 = DPB(bx_51, bl_16, 0)
	branch bl_16 >=u cl l0800_94AD
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_94AD:
	bx_38 = bx
	C_40 = true
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_94A6:
	C_40 = false
	bx_38 = DPB(bx_59, 0x00, 8) (alias)
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_94AF:
	bxOut = bx_38
	return C_40
// DataOut:
// DataOut (flags):
// SymbolicIn:

fn0800_9485_exit:
// DataOut:
// DataOut (flags):
// SymbolicIn:



word16 fn0800_94B0(word16 ax, word16 cx, word16 dx, word16 bx, word16 bp, word16 si, word16 di, selector es, selector ds, word16 wArg02, word16 wArg04, word16 wArg06, word16 wArg08, word16 wArg0A, word16 wArg0C, ptr16 & cxOut, ptr16 & dxOut, ptr16 & bxOut, ptr16 & siOut, ptr16 & diOut, ptr16 & esOut, ptr16 & TopOut)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  ax:[0..15] bp:[0..15] bx:[0..15] cx:[0..15] di:[0..15] ds:[0..15] dx:[0..15] es:[0..15] si:[0..15] ss:[0..15] Stack +0002:[0..15] Stack +0004:[0..15] Stack +0006:[0..15] Stack +0008:[0..15] Stack +000A:[0..15] Stack +000C:[0..15]
// LiveOut: ax bx cx di dx es si Top
// Trashed: SCZO ax bx cx di dx es si Top
// Preserved: bp ds sp ss
fn0800_94B0_entry:
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_94B0:
	int8 Top_131 = 0
	word16 wLoc02_611 = bp
	word16 bp_328 = fp - 2
	word16 wLoc0A_612 = si
	word16 sp_136 = fp - 0x000C
	word16 wLoc0C_613 = di
	byte bLoc03_614 = 0x00
	word16 wLoc06_615 = 0x0000
	word16 wLoc08_616 = 0x0001
	di_112 = di
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_94C6:
	word16 ax_558
	word16 dx_447
	word16 wLoc08_653
	word16 si_144
	word16 di_112
	word16 v8_23 = wLoc06_615 + 0x0001
	word16 sp_28 = sp_136 - 2
	Mem29[ss:sp_28:word16] = wArg08
	Mem32[ss:sp_28 - 2:word16] = wArg06
	word16 sp_33
	word16 ax_39
	word16 bx_121
	call SEQ(0x0800, wArg02) (retsize: 2;)
		uses: ax:ax_38,bp:fp - 2,bx:bx_40,cx:cx_36,di:di_35,ds:ds,dx:dx_44,es:es,si:si,sp:sp_28 - 2,ss:ss,Stack +0000:bp,Stack +0004:wArg02,Stack +0006:wArg04,Stack +0008:wArg06,Stack +000A:wArg08,Stack +000C:wArg0A,Stack +000E:wArg0C,Stack +FFFFFFF6:di,Stack +FFFFFFF8:si,Stack +FFFFFFFA:0x0001,Stack +FFFFFFFC:v8_23,Stack +FFFFFFFF:0x00,Top:Top_46
		defs: ax:ax_39,bx:bx_41,dx:dx_45,sp:sp_33,Top:Top_47
	wLoc06_615 = v8_23
	cx = Mem32[ss:sp_33 + 2:word16]
	sp_136 = sp_33 + 4
	word16 ax_116 = ax_39
	byte al_57 = (byte) ax_39
	branch ax_39 < 0x0000 l0800_9549
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_94D8:
	word16 ax_58 = (int16) al_57
	ax = bx_121
	bx = ax_58
	branch ((byte) ax_58 & 0x80) != 0x00 l0800_94E7
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_94DF:
	di_112 = 0x2251
	branch (Mem32[ds:ax_58 + 0x2251:byte] & 0x01) != 0x00 l0800_94C6
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_94E7:
	byte al_151 = (byte) ax_58
	ax_116 = ax_58
	ax_116 = DPB(ax_58, al_151, 0) (alias)
	ax_116 = DPB(ax_58, al_151, 0) (alias)
	wArg0C = wArg0C - 0x0001
	si_144 = si
	branch wArg0C < 0x0001 l0800_9550
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_94ED:
	branch al_151 == 0x2B l0800_94F8
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_94F1:
	branch al_151 != 0x2D l0800_950F
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_94F5:
	bLoc03_614 = 0x01
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_94F8:
	wArg0C = wArg0C - 0x0002
	si_144 = si
	branch wArg0C < 0x0002 l0800_9550
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_94FD:
	Mem104[ss:sp_33 + 2:word16] = wArg08
	Mem107[ss:sp_33:word16] = wArg06
	word16 sp_108
	word16 ax_119
	call SEQ(0x0800, wArg02) (retsize: 2;)
		uses: ax:ax_116,bp:fp - 2,bx:bx_41,cx:cx_51,di:di_112,ds:ds,dx:dx_45,es:es,si:si,sp:sp_33,ss:ss,Stack +0000:bp,Stack +0004:wArg02,Stack +0006:wArg04,Stack +0008:wArg06,Stack +000A:wArg08,Stack +000C:wArg0A,Stack +000E:wArg0C - 0x0002,Stack +FFFFFFF6:di,Stack +FFFFFFF8:si,Stack +FFFFFFFA:0x0001,Stack +FFFFFFFC:v8_23 + 0x0001,Stack +FFFFFFFF:bLoc03_650,Top:Top_47
		defs: ax:ax_119,bx:bx_121,dx:dx_128,sp:sp_108,Top:Top_131
	wLoc06_615 = v8_23 + 0x0001
	cx = Mem107[ss:sp_108 + 2:word16]
	sp_136 = sp_108 + 4
	ax_116 = ax_119
	al_151 = (byte) ax_119 (alias)
	branch ax_119 < 0x0000 l0800_9549
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_9549:
	wLoc08_653 = 0xFFFF
	si_144 = si
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_950F:
	byte cl_200 = (byte) wArg0A
	ax_174 = DPB(ax_116, al_151, 0) (alias)
	ax_116 = DPB(ax_116, al_151, 0) (alias)
	ax_116 = DPB(ax_116, al_151, 0) (alias)
	word16 ax_174 = DPB(ax_116, al_151, 0)
	si_144 = 0x0000
	di_112 = 0x0000
	cx = wArg0A
	cx = DPB(wArg0A, cl_200, 0) (alias)
	cx = DPB(wArg0A, cl_200, 0) (alias)
	branch wArg0A == 0x0000 l0800_956E
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_956E:
	wArg0A = 0x000A
	branch al_151 != 0x30 l0800_959E
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_9577:
	word16 v70_156 = wArg0C - 0x0001
	wArg0C = v70_156
	branch v70_156 < 0x0000 l0800_956B
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_957C:
	word16 v71_160 = wLoc06_615 + 0x0001
	word16 sp_165 = sp_136 - 2
	Mem166[ss:sp_165:word16] = wArg08
	Mem169[ss:sp_165 - 2:word16] = wArg06
	word16 sp_170
	call SEQ(0x0800, wArg02) (retsize: 2;)
		uses: ax:ax_174,bp:fp - 2,bx:bx_176,cx:wArg0A,di:0x0000,ds:ds,dx:dx_180,es:es,si:0x0000,sp:sp_165 - 2,ss:ss,Stack +0000:bp,Stack +0004:wArg02,Stack +0006:wArg04,Stack +0008:wArg06,Stack +000A:wArg08,Stack +000C:0x000A,Stack +000E:v70_156,Stack +FFFFFFF6:di,Stack +FFFFFFF8:si,Stack +FFFFFFFA:0x0001,Stack +FFFFFFFC:v71_160,Stack +FFFFFFFF:bLoc03_670,Top:Top_182
		defs: ax:ax_175,bx:bx_177,dx:dx_181,sp:sp_170,Top:Top_183
	byte al_190 = (byte) ax_174
	wLoc06_615 = v71_160
	ax_174 = DPB(ax_174, al_190, 0) (alias)
	cx = Mem169[ss:sp_170 + 2:word16]
	sp_136 = sp_170 + 4
	wArg0A = 0x0008
	branch al_190 == 0x78 l0800_9597
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_9593:
	branch al_190 != 0x58 l0800_95C8
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_9597:
	wArg0A = 0x0010
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_9518:
	branch wArg0A >u 0x0024 l0800_9550
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_951D:
	branch cl_200 <u 0x02 l0800_9550
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_9522:
	branch al_151 != 0x30 l0800_959E
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_959E:
	cx = wArg0A
	ax_116 = bx_218
	word16 bx_218
	branch fn0800_9485((byte) wArg0A, ax_174, out bx_218) l0800_9550
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_9550:
	wLoc08_653 = 0x0000
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_9555:
	word16 sp_237 = sp_136 - 2
	Mem238[ss:sp_237:word16] = wArg08
	Mem241[ss:sp_237 - 2:word16] = wArg06
	Mem246[ss:sp_237 - 4:word16] = ax_116
	word16 sp_247
	call SEQ(0x0800, wArg04) (retsize: 2;)
		uses: ax:ax_243,bp:fp - 2,bx:bx_262,cx:cx_256,di:di_252,ds:ds,dx:dx_274,es:es,si:si_248,sp:sp_237 - 4,ss:ss,Stack +0000:bp,Stack +0004:wArg02,Stack +0006:wArg04,Stack +0008:wArg06,Stack +000A:wArg08,Stack +000C:wArg0A_722,Stack +000E:wArg0C_718,Stack +FFFFFFF6:di,Stack +FFFFFFF8:si,Stack +FFFFFFFA:wLoc08_713,Stack +FFFFFFFC:wLoc06_709,Stack +FFFFFFFF:bLoc03_705,Top:Top_279
		defs: cx:cx_260,sp:sp_247,Top:Top_283
	sp_136 = sp_247 + 0x0006
	ax_558 = 0x0000 (alias)
	dx_447 = 0x0000 (alias)
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_95A8:
	ax_174 = 0x0000
	si_144 = bx_218
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_9526:
	branch cl_200 != 0x10 l0800_959C
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_952B:
	word16 v31_296 = wArg0C - 0x0001
	wArg0C = v31_296
	branch v31_296 < 0x0000 l0800_956B
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_956B:
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_9530:
	word16 v32_300 = wLoc06_615 + 0x0001
	word16 sp_304 = sp_136 - 2
	Mem305[ss:sp_304:word16] = wArg08
	Mem308[ss:sp_304 - 2:word16] = wArg06
	word16 sp_309
	call SEQ(0x0800, wArg02) (retsize: 2;)
		uses: ax:ax_212,bp:fp - 2,bx:bx_176,cx:cx_311,di:0x0000,ds:ds,dx:dx_180,es:es,si:0x0000,sp:sp_304 - 2,ss:ss,Stack +0000:bp,Stack +0004:wArg02,Stack +0006:wArg04,Stack +0008:wArg06,Stack +000A:wArg08,Stack +000C:wArg0A,Stack +000E:v31_296,Stack +FFFFFFF6:di,Stack +FFFFFFF8:si,Stack +FFFFFFFA:0x0001,Stack +FFFFFFFC:v32_300,Stack +FFFFFFFF:bLoc03_670,Top:Top_182
		defs: ax:ax_313,bx:bx_314,dx:dx_315,sp:sp_309,Top:Top_316
	byte al_322 = (byte) ax_174
	wLoc06_615 = v32_300
	ax_174 = DPB(ax_174, al_322, 0) (alias)
	cx = Mem308[ss:sp_309 + 2:word16]
	sp_136 = sp_309 + 4
	branch al_322 == 0x78 l0800_959C
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_9542:
	branch al_322 == 0x58 l0800_959C
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_959C:
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_9546:
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_95C8:
	cx = Mem329[ss:bp_328 + 0x000C:word16]
	word16 ax_343 = bx_337
	word16 bx_337
	branch fn0800_9485((byte) cx, ax_174, out bx_337) l0800_95AB
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_95AB:
	int32 dx_ax_349 = Mem329[ss:bp_328 + 0x000C:word16] *u si_144
	ui32 di_si_607 = SEQ(di_112, bx_337) + dx_ax_349
	ax_174 = (word16) dx_ax_349 (alias)
	dx = SLICE(dx_ax_349, word16, 16) (alias)
	si_144 = (word16) di_si_607
	di_112 = SLICE(di_si_607, word16, 16)
	branch di_112 != 0x0000 l0800_95E5
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_95E5:
	word16 v54_362 = Mem361[ss:bp_328 + 0x000E:word16] - 0x0001
	Mem363[ss:bp_328 + 0x000E:word16] = v54_362
	branch v54_362 < 0x0000 l0800_9612
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_95EA:
	Mem367[ss:bp_328 - 0x0004:word16] = Mem363[ss:bp_328 - 0x0004:word16] + 0x0001
	word16 sp_371 = sp_136 - 2
	Mem372[ss:sp_371:word16] = Mem367[ss:bp_328 + 0x000A:word16]
	Mem375[ss:sp_371 - 2:word16] = Mem372[ss:bp_328 + 0x0008:word16]
	word16 sp_376
	word16 ax_382
	word16 bx_384
	call SEQ(0x0800, Mem375[ss:bp_328 + 0x0004:word16]) (retsize: 2;)
		uses: ax:ax_381,bp:bp_328,bx:bx_383,cx:cx_379,di:di_378,ds:ds_497,dx:dx_387,es:es_501,si:si_377,sp:sp_371 - 2,ss:ss_327,Stack +0000:wLoc02_743,Stack +0004:wArg02_776,Stack +0006:wArg04_787,Stack +0008:wArg06_772,Stack +000A:wArg08_768,Stack +000C:wArg0A_783,Stack +000E:wArg0C_780,Stack +FFFFFFF6:wLoc0C_751,Stack +FFFFFFF8:wLoc0A_747,Stack +FFFFFFFA:wLoc08_763,Stack +FFFFFFFC:wLoc06_759,Stack +FFFFFFFF:bLoc03_755,Top:Top_389
		defs: ax:ax_382,bx:bx_384,dx:dx_388,sp:sp_376,Top:Top_390
	cx = Mem375[ss:bp_328 + 0x000C:word16]
	sp_136 = sp_376 + 4
	ax_343 = bx_401
	bx_121 = bx_384
	word16 bx_401
	branch fn0800_9485((byte) cx, ax_382, out bx_401) l0800_95D4
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_95D4:
	int32 dx_ax_412 = cx *u si_144
	int32 dx_ax_421 = cx *u di_112
	ui32 ax_si_610 = SEQ((word16) dx_ax_421, bx_401) + dx_ax_412
	word16 ax_426 = SLICE(ax_si_610, word16, 16)
	byte dl_434 = SLICE(dx_ax_421, byte, 16) + SLICE(dx_ax_421, byte, 24) + (ax_426 <u 0x0000)
	cx = SLICE(dx_ax_412, word16, 16)
	si_144 = (word16) ax_si_610
	ax_174 = (word16) dx_ax_412
	di_112 = ax_426
	dx = DPB(SLICE(dx_ax_421, word16, 16), dl_434, 0) (alias)
	branch dl_434 != 0x00 l0800_9636
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_9636:
	bool C_443 = SLICE(cond(Mem375[ss:bp_328 - 0x0001:byte] + 0xFF), bool, 1)
	Mem449[ss:bp_328 - 0x0006:word16] = 0x0002
	ax_558 = DPB(0xFFFF, C_443 + 0xFF, 8) (alias)
	dx_447 = SLICE(cond(C_443 + 0xFF), bool, 1) + 0x7FFF
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_95B5:
	word16 v44_456 = Mem454[ss:bp_328 + 0x000E:word16] - 0x0001
	Mem457[ss:bp_328 + 0x000E:word16] = v44_456
	branch v44_456 < 0x0000 l0800_9612
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_95BA:
	Mem461[ss:bp_328 - 0x0004:word16] = Mem457[ss:bp_328 - 0x0004:word16] + 0x0001
	word16 sp_468 = sp_136 - 2
	Mem469[ss:sp_468:word16] = Mem461[ss:bp_328 + 0x000A:word16]
	Mem472[ss:sp_468 - 2:word16] = Mem469[ss:bp_328 + 0x0008:word16]
	word16 sp_473
	call SEQ(0x0800, Mem472[ss:bp_328 + 0x0004:word16]) (retsize: 2;)
		uses: ax:ax_484,bp:bp_452,bx:bx_490,cx:cx_480,di:di_477,ds:ds_494,dx:dx_502,es:es_498,si:si_474,sp:sp_468 - 2,ss:ss_450,Stack +0000:wLoc02_740,Stack +0004:wArg02_773,Stack +0006:wArg04_784,Stack +0008:wArg06_769,Stack +000A:wArg08_765,Stack +000C:wArg0A_781,Stack +000E:wArg0C_777,Stack +FFFFFFF6:wLoc0C_748,Stack +FFFFFFF8:wLoc0A_744,Stack +FFFFFFFA:wLoc08_760,Stack +FFFFFFFC:wLoc06_756,Stack +FFFFFFFF:bLoc03_752,Top:Top_506
		defs: ax:ax_489,bx:bx_493,dx:dx_505,sp:sp_473,Top:Top_510
	sp_136 = sp_473 + 4
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_95D2:
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_9602:
	word16 sp_521 = sp_136 - 2
	Mem522[ss:sp_521:word16] = Mem518[ss:bp_328 + 0x000A:word16]
	Mem525[ss:sp_521 - 2:word16] = Mem522[ss:bp_328 + 0x0008:word16]
	Mem528[ss:sp_521 - 4:word16] = ax_343
	word16 sp_529
	call SEQ(0x0800, Mem528[ss:bp_328 + 0x0006:word16]) (retsize: 2;)
		uses: ax:ax_527,bp:bp_328,bx:bx_535,cx:cx_532,di:di_531,ds:ds_497,dx:dx_539,es:es_501,si:si_530,sp:sp_521 - 4,ss:ss_327,Stack +0000:wLoc02_743,Stack +0004:wArg02_776,Stack +0006:wArg04_787,Stack +0008:wArg06_772,Stack +000A:wArg08_768,Stack +000C:wArg0A_783,Stack +000E:wArg0C_780,Stack +FFFFFFF6:wLoc0C_751,Stack +FFFFFFF8:wLoc0A_747,Stack +FFFFFFFA:wLoc08_763,Stack +FFFFFFFC:wLoc06_759,Stack +FFFFFFFF:bLoc03_755,Top:Top_542
		defs: cx:cx_533,sp:sp_529,Top:Top_543
	Mem548[ss:bp_328 - 0x0004:word16] = Mem528[ss:bp_328 - 0x0004:word16] - 0x0001
	sp_136 = sp_529 + 0x0006
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_9612:
	dx_447 = di_112
	ax_558 = si_144
	branch Mem564[ss:bp_328 - 0x0001:byte] == 0x00 l0800_9622
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_961B:
	ax_558 = -si_144
	dx_447 = -di_112 - (ax_558 == 0x0000)
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_9622:
	ptr32 es_di_576 = Mem575[ss:bp_328 + 0x0010:segptr32]
	Mem581[es_di_576:word16] = Mem575[es_di_576:word16] + Mem575[ss:bp_328 - 0x0004:word16]
	ptr32 es_di_583 = Mem581[ss:bp_328 + 0x0014:segptr32]
	word16 bx_584 = Mem581[ss:bp_328 - 0x0006:word16]
	Mem587[es_di_583:word16] = bx_584
	selector es_585 = SLICE(es_di_583, selector, 16)
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_964C:
	word16 di_591 = Mem587[ss:sp_136:word16]
	word16 si_593 = Mem587[ss:sp_136 + 2:word16]
	cxOut = cx
	dxOut = dx_447
	bxOut = bx_584
	siOut = si_593
	diOut = di_591
	esOut = es_585
	TopOut = Top_131
	return ax_558
// DataOut:
// DataOut (flags):
// SymbolicIn:

fn0800_94B0_exit:
// DataOut:
// DataOut (flags):
// SymbolicIn:



void fn0800_9652(segptr32 ptrArg02)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  Stack +0002:[0..31]
// LiveOut:
// Trashed: ah cx dx es Top
// Preserved: bp si sp
fn0800_9652_entry:
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_9652:
	__syscall(0x21)
	return
// DataOut:
// DataOut (flags):
// SymbolicIn:

fn0800_9652_exit:
// DataOut:
// DataOut (flags):
// SymbolicIn:



void fn0800_9667(segptr32 ptrArg02)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  Stack +0002:[0..31]
// LiveOut:
// Trashed: ah cx dx es Top
// Preserved: bp si sp
fn0800_9667_entry:
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_9667:
	__syscall(0x21)
	return
// DataOut:
// DataOut (flags):
// SymbolicIn:

fn0800_9667_exit:
// DataOut:
// DataOut (flags):
// SymbolicIn:



word16 fn0800_9764(selector ds, ptr16 & cxOut, ptr16 & dxOut, ptr16 & bpOut, ptr16 & siOut, ptr16 & diOut)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  ds:[0..15] ss:[0..15]
// LiveOut: ax bp cx di dx si sp
// Trashed: SCZDO ax bp bx cx di dx es si sp Top
// Preserved:
fn0800_9764_entry:
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_9764:
	fn0800_8B95(SEQ(ss, fp - 0x0006))
	fn0800_8BA8(SEQ(ss, fp - 0x000A))
	word16 bp_51
	word16 cx_53
	word16 di_54
	word16 dx_55
	word16 si_57
	word16 ax_50 = fn0800_C04F(ds, out cx_53, out dx_55, out bp_51, out si_57, out di_54)
	Mem65[ss:bp_51 - 0x000A:word16] = dx_55
	Mem66[ss:bp_51 - 0x000C:word16] = ax_50
	branch (Mem66[ss:bp_51 + 0x0004:word16] | Mem66[ss:bp_51 + 0x0006:word16]) == 0x0000 l0800_97AC
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_979C:
	ptr32 es_bx_72 = Mem66[ss:bp_51 + 0x0004:segptr32]
	word16 dx_74 = Mem66[ss:bp_51 - 0x000C:word16]
	Mem77[es_bx_72 + 0x0002:word16] = Mem66[ss:bp_51 - 0x000A:word16]
	Mem78[es_bx_72:word16] = dx_74
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_97AC:
	word16 dx_82 = Mem81[ss:bp_51 - 0x000A:word16]
	word16 ax_83 = Mem81[ss:bp_51 - 0x000C:word16]
	word16 bp_85 = Mem81[ss:bp_51:word16]
	cxOut = cx_53
	dxOut = dx_82
	bpOut = bp_85
	siOut = si_57
	diOut = di_54
	return ax_83
// DataOut:
// DataOut (flags):
// SymbolicIn:

fn0800_9764_exit:
// DataOut:
// DataOut (flags):
// SymbolicIn:



word16 fn0800_97B6(selector ds, word16 wArg02, ptr16 & dxOut)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  ds:[0..15] Stack +0002:[0..15]
// LiveOut: ax dx
// Trashed: SCZO ax bx cx dx Top
// Preserved: bp sp
fn0800_97B6_entry:
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_97B6:
	word16 dx_26
	word16 ax_23 = fn0800_8E29(ds, wArg02, 0x0000, 0x0000, 0x0001, out cx_46, out dx_26, out bx_47)
	dxOut = dx_26
	return ax_23
// DataOut:
// DataOut (flags):
// SymbolicIn:

fn0800_97B6_exit:
// DataOut:
// DataOut (flags):
// SymbolicIn:



byte fn0800_97CC(selector ds, word16 wArg02)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  ds:[0..15] Stack +0002:[0..15]
// LiveOut: ax
// Trashed: SCZO ax bx dx Top
// Preserved: bp sp
fn0800_97CC_entry:
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_97CC:
	word16 ax_29
	byte dl_12 = (byte) wArg02
	branch wArg02 != 0xFFFF l0800_97DC
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_97DC:
	word16 ax_17 = DPB(DPB(ax, dl_12, 0), 0x00, 8)
	branch (Mem7[ds:ax_17 + 0x2251:byte] & 0x08) == 0x00 l0800_97F2
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_97F2:
	ax_29 = DPB(DPB(ax_17, dl_12, 0), 0x00, 8) (alias)
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_97E9:
	ax_29 = DPB(DPB(ax_17, dl_12, 0), 0x00, 8) + 0xFFE0
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_97D7:
	ax_29 = 0xFFFF
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_97F6:
	return (byte) ax_29
// DataOut:
// DataOut (flags):
// SymbolicIn:

fn0800_97CC_exit:
// DataOut:
// DataOut (flags):
// SymbolicIn:



word16 fn0800_97F8(byte al, selector ds, segptr32 ptrArg02)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  ax:[0..7] ds:[0..15] Stack +0002:[0..15]
// LiveOut: dx
// Trashed: SCZO ax dx Top
// Preserved: bp ds sp
fn0800_97F8_entry:
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_97F8:
	word16 dx_15 = (word16) ptrArg02
	word16 ax_21 = DPB(ax, 0x41, 8)
	branch msdos_delete_file(SLICE(ptrArg02, selector, 16), dx_15) l0800_980A
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_980A:
	fn0800_8D2B(ds, ax_21)
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_9806:
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_980E:
	return dx_15
// DataOut:
// DataOut (flags):
// SymbolicIn:

fn0800_97F8_exit:
// DataOut:
// DataOut (flags):
// SymbolicIn:



word16 fn0800_9810(byte dh, byte dl, word16 di, selector es)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  dh:[0..7] di:[0..15] dl:[0..7] es:[0..15]
// LiveOut: di sp
// Trashed: SCZO ax di sp Top
// Preserved:
fn0800_9810_entry:
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_9810:
	word16 di_9 = fn0800_9817(dh, di, es)
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_9815_thunk_fn0800_9817:
	return fn0800_9817(dl, di_9, es)
// DataOut:
// DataOut (flags):
// SymbolicIn:

fn0800_9810_exit:
// DataOut:
// DataOut (flags):
// SymbolicIn:



word16 fn0800_9817(byte al, word16 di, selector es)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  al:[0..7] di:[0..15] es:[0..15]
// LiveOut: di
// Trashed: SCZO ax di Top
// Preserved: sp
fn0800_9817_entry:
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_9817:
	word16 ax_5 = __aam(al)
	byte al_6 = (byte) ax_5
	word16 di_14 = fn0800_9820(SLICE(ax_5, byte, 8), di, es)
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_981E_thunk_fn0800_9820:
	return fn0800_9820(al_6, di_14, es)
// DataOut:
// DataOut (flags):
// SymbolicIn:

fn0800_9817_exit:
// DataOut:
// DataOut (flags):
// SymbolicIn:



word16 fn0800_9820(byte al, word16 di, selector es)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  al:[0..7] di:[0..15] es:[0..15]
// LiveOut: di
// Trashed: SCZO al di Top
// Preserved: sp
fn0800_9820_entry:
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_9820:
	byte al_7 = al + 0xD0 + __daa(al + 0x90, &(al + 0x90))
	__daa(al_7, &al_7)
	Mem12[es:di:byte] = al_7
	return di + 0x0001
// DataOut:
// DataOut (flags):
// SymbolicIn:

fn0800_9820_exit:
// DataOut:
// DataOut (flags):
// SymbolicIn:



word16 fn0800_9828(word16 cx, word16 dx, word16 bx, selector ds, word16 wArg02, segptr32 ptrArg04, selector psegArg06, ptr16 & siOut, ptr16 & diOut)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  bx:[0..15] cx:[0..15] ds:[0..15] dx:[0..15] ss:[0..15] Stack +0002:[0..15] Stack +0004:[0..31]
// LiveOut: ax di si
// Trashed: SCZDO ax di si Top
// Preserved: bp bx cx dx es sp
fn0800_9828_entry:
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_9828:
	byte bLoc16_1529 = 0x0050
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_988C:
	word16 sp_1025 = fp - 0x009E
	word16 wLoc06_1319 = fp - 0x0098
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_9895:
	word16 di_1010 = wLoc06_1319
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_9898:
	word16 si_1134 = (word16) ptrArg04
	selector es_1009 = SLICE(ptrArg04, selector, 16)
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_989B:
	byte al_37 = Mem36[ds:si_1134:byte]
	si_1134 = si_1134 + 0x0001
	byte al_1078 = al_37
	word16 ax_1144 = DPB(ax, al_37, 0)
	branch al_37 == 0x00 l0800_98B3
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_98B3:
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_98A1:
	branch al_37 == 0x25 l0800_98B6
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_98B6:
	al_1078 = Mem47[ds:si_1134:byte]
	ax_1144 = DPB(ax, al_1078, 0) (alias)
	word16 ax_1182 = DPB(ax, al_1078, 0)
	si_1134 = si_1134 + 0x0001
	branch al_1078 == 0x25 l0800_98A5
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_98BF:
	wLoc06_1319 = di_1010
	word16 cx_1232 = 0x0000
	byte ch_1223 = 0x00
	word16 wLoc10_1324 = 0x0000
	word16 wLoc04_1325 = 0x0020
	byte bLoc0D_1326 = 0x00
	word16 wLoc0A_1327 = 0xFFFF
	word16 wLoc0C_1328 = 0xFFFF
	Mem74 = Mem62
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_98DD:
	word16 ax_1183 = DPB(ax_1182, 0x00, 8)
	byte dl_131 = (byte) ax_1183
	byte bl_68 = (byte) ax_1183
	cx = DPB(cx_1232, ch_1223, 8) (alias)
	cx = DPB(cx_1232, ch_1223, 8) (alias)
	word16 cx_1233 = DPB(cx_1232, ch_1223, 8)
	cx = DPB(cx_1232, ch_1223, 8) (alias)
	word16 cx_1242 = DPB(cx_1232, ch_1223, 8)
	cx = DPB(cx, ch_1223, 8) (alias)
	cx_1242 = DPB(cx, ch_1223, 8) (alias)
	cx = DPB(cx_1232, ch_1223, 8) (alias)
	cx = DPB(cx_1232, ch_1223, 8) (alias)
	cx_1233 = DPB(cx_1232, ch_1223, 8) (alias)
	cx = DPB(cx_1232, ch_1223, 8) (alias)
	cx_1233 = DPB(cx, ch_1223, 8) (alias)
	cx = DPB(cx_1232, ch_1223, 8) (alias)
	word16 cx_1262 = DPB(cx_1232, ch_1223, 8)
	cx_1262 = DPB(cx_1232, ch_1223, 8) (alias)
	cx_1233 = DPB(cx_1262, ch_1223, 8) (alias)
	cx = DPB(cx_1232, ch_1223, 8) (alias)
	cx = DPB(cx_1232, ch_1223, 8) (alias)
	dx = ax_1183
	dx = DPB(ax_1183, dl_131, 0) (alias)
	dx = DPB(ax_1183, dl_131, 0) (alias)
	dx_231 = DPB(ax_1183, dl_131, 0) (alias)
	word16 dx_231 = DPB(ax_1183, dl_131, 0)
	dx_231 = DPB(ax_1183, dl_131, 0) (alias)
	dx = DPB(ax_1183, dl_131, 0) (alias)
	bx = DPB(ax_1183, bl_68 - 0x20, 0) (alias)
	branch bl_68 >=u 0x80 l0800_98FE
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_98EB:
	bx = DPB(ax_1183, Mem74[ds:bx + 0x2605:byte], 0) (alias)
	branch bx <=u 0x0017 l0800_98F7
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_98F7:
	byte bLoc08_1368
	selector es_140
	word16 cx_172
	word16 di_142
	word16 bx_445
	word16 bx_444
	word16 bx_443
	byte bh_333
	word16 dx_347
	word16 ax_353
	bx = bx << 0x0001
	cx_2054 = cx
	switch (bx << 0x0001) { l0800_9917 l0800_9901 l0800_994C l0800_990C l0800_997A l0800_9987 l0800_99C5 l0800_99CC l0800_99D1 l0800_9935 l0800_99FA l0800_99D8 l0800_99DC l0800_99E0 l0800_9A55 l0800_9B02 l0800_9AA5 l0800_9AC5 l0800_9C46 l0800_9C82 l0800_9C82 l0800_9C82 l0800_9927 l0800_992D }
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_992D:
	wLoc04_1325 = wLoc04_1325 | 0x0020
	Mem994 = Mem84
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_9927:
	wLoc04_1325 = wLoc04_1325 & 0xFFDF
	Mem994 = Mem88
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_9C46:
	word16 di_101
	selector es_108
	branch (wLoc04_1325 & 0x0020) != 0x0000 l0800_9C5E
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_9C5E:
	ptr32 es_di_97 = Mem92[ds:wArg02:segptr32]
	es_108 = SLICE(es_di_97, selector, 16) (alias)
	di_101 = (word16) es_di_97 (alias)
	wArg02 = wArg02 + 0x0004
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_9C53:
	di_101 = Mem92[ss:wArg02:word16]
	word16 sp_106 = sp_1025 - 2
	Mem107[ss:sp_106:word16] = ds
	wArg02 = wArg02 + 0x0002
	es_108 = Mem107[ss:sp_106:selector]
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_9C65:
	word16 ax_116 = DPB(0x0050, 0x50 - bLoc16_1529, 0)
	Mem122[es_108:di_101:word16] = ax_116
	ax = ax_116
	branch (wLoc04_1325 & 0x0010) == 0x0000 l0800_9C7F
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_9C78:
	Mem129[es_108:di_101 + 0x0002:word16] = 0x0000
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_9C7F:
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_9AC5:
	bool Z_156
	branch (wLoc04_1325 & 0x0020) != 0x0000 l0800_9AE2
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_9AE2:
	ptr32 es_di_137 = Mem132[ds:wArg02:segptr32]
	es_140 = SLICE(es_di_137, selector, 16) (alias)
	di_142 = (word16) es_di_137 (alias)
	wArg02 = wArg02 + 0x0004
	Z_156 = SLICE(cond(es_140 | di_142), bool, 2) (alias)
	Mem181 = Mem139
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_9AD5:
	word16 di_146 = Mem132[ss:wArg02:word16]
	word16 sp_149 = sp_1025 - 2
	Mem150[ss:sp_149:word16] = ds
	wArg02 = wArg02 + 0x0002
	es_140 = Mem150[ss:sp_149:selector]
	di_142 = di_146
	Z_156 = SLICE(cond(di_146), bool, 2) (alias)
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_9AED:
	branch Z_156 l0800_9AF4
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_9AEF:
	word16 sp_160 = sp_1025 - 2
	Mem163[ss:sp_160:word16] = ds
	es_140 = Mem163[ss:sp_160:selector]
	di_142 = 0x25FE
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_9AF4:
	cx_172 = fn0800_9842(di_142, es_140)
	branch cx_172 <=u wLoc0C_1328 l0800_9AFF
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_9AFC:
	cx_172 = wLoc0C_1328
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_9AFF:
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_9AA5:
	word16 sp_191 = sp_1025 - 2
	Mem192[ss:sp_191:word16] = ss
	wArg02 = wArg02 + 0x0002
	es_140 = Mem192[ss:sp_191:selector]
	sp_1025 = sp_191 + 2
	di_142 = fp - 0x0047
	cx_172 = 0x0001
	Mem574 = Mem200
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_9B02:
	word16 cx_206 = wLoc0C_1328
	branch wLoc0C_1328 >= 0x0000 l0800_9B15
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_9B12:
	cx_206 = 0x0006
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_9B15:
	word16 ax_244
	word16 sp_212 = sp_1025 - 2
	Mem214[ss:sp_212:word16] = ss
	Mem217[ss:sp_212 - 2:word16] = wArg02
	Mem220[ss:sp_212 - 4:word16] = cx_206
	Mem222[ss:sp_212 - 6:word16] = ss
	Mem226[ss:sp_212 - 8:word16] = fp - 0x0047
	Mem232[ss:sp_212 - 10:word16] = dx_231
	Mem236[ss:sp_212 - 12:word16] = wLoc04_1325 & 0x0001
	branch (wLoc04_1325 & 0x0100) == 0x0000 l0800_9B36
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_9B36:
	wArg02 = wArg02 + 0x0008
	ax_244 = 0x0006
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_9B2D:
	ax_244 = 0x0008
	wArg02 = wArg02 + 0x000A
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_9B3D:
	Mem253[ss:sp_212 - 14:word16] = ax_244
	word16 sp_256
	fn0800_A2CC(ds)
	Mem259[ss:sp_256 - 2:word16] = ss
	es_140 = Mem259[ss:sp_256 - 2:selector]
	sp_1025 = sp_256
	di_142 = fp - 0x0047
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_9A55:
	word16 sp_269 = sp_1025 - 2
	Mem270[ss:sp_269:word16] = Mem265[ss:wArg02:word16]
	word16 di_266 = fp - 0x0048
	wArg02 = wArg02 + 0x0002
	branch (wLoc04_1325 & 0x0020) == 0x0000 l0800_9A80
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_9A70:
	word16 dx_277 = Mem273[ss:wArg02 + 0x0002:word16]
	Mem283[ss:sp_269 - 2:word16] = ss
	selector es_284 = Mem283[ss:sp_269 - 2:selector]
	word16 sp_290
	word16 di_289 = fn0800_9810(SLICE(dx_277, byte, 8), (byte) dx_277, fp - 0x0048, es_284)
	Mem297[es_284:di_289:byte] = 0x3A
	wArg02 = wArg02 + 0x0004
	sp_269 = sp_290 + 0xFFFE
	di_266 = di_289 + 0x0001
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_9A80:
	word16 sp_300 = sp_269 - 2
	Mem302[ss:sp_300:word16] = ss
	word16 dx_305 = Mem302[ss:sp_300 + 2:word16]
	es_140 = Mem302[ss:sp_300:selector]
	word16 sp_312
	word16 di_311 = fn0800_9810(SLICE(dx_305, byte, 8), (byte) dx_305, di_266, es_140)
	Mem318[ss:di_311:byte] = 0x00
	sp_1025 = sp_312 + 0xFFFE
	wLoc04_1325 = wLoc04_1325 & 0xFFFB
	word16 di_325 = di_311 - (fp - 0x0048)
	di_142 = fp - 0x0048
	dx_231 = wLoc0C_1328
	branch wLoc0C_1328 > di_325 l0800_9AA2
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_9AA0:
	dx_231 = di_325
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_9AA2:
	Mem487 = Mem322
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_99E0:
	bh_333 = 0x10
	bx_445 = DPB(DPB(bx << 0x0001, 0x10, 8), dl_131 + 0xE9, 0) (alias)
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_99DC:
	bh_333 = 0x0A
	bx_444 = DPB(bx << 0x0001, 0x0A, 8) (alias)
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_99D8:
	bh_333 = 0x08
	bx_445 = DPB(bx << 0x0001, 0x08, 8) (alias)
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_99E6:
	bx_444 = DPB(bx_445, bh_333, 8) (alias)
	bLoc0D_1326 = 0x00
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_99EA:
	bx_443 = DPB(bx_444, bh_333, 8) (alias)
	dx_347 = 0x0000
	bLoc08_1368 = 0x00
	ax_353 = Mem351[ss:wArg02:word16]
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_99FA:
	int32 dx_ax_359 = (int32) Mem356[ss:wArg02:word16]
	bh_333 = 0x0A
	bx_443 = DPB(bx << 0x0001, 0x0A, 8) (alias)
	bLoc08_1368 = 0x01
	ax_353 = (word16) dx_ax_359 (alias)
	dx_347 = SLICE(dx_ax_359, word16, 16) (alias)
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_9A0A:
	word16 di_361 = wArg02 + 0x0001
	word16 bx_442 = DPB(bx_443, bh_333, 8)
	bx_442 = DPB(bx_443, bh_333, 8) (alias)
	word16 bx_455 = DPB(bx_442, bh_333, 8)
	bx_455 = DPB(bx_442, bh_333, 8) (alias)
	bx = DPB(bx_442, bh_333, 8) (alias)
	bx = DPB(bx_455, bh_333, 8) (alias)
	word16 bx_460 = DPB(bx, bh_333, 8)
	word16 di_362 = di_361 + 0x0001
	branch (wLoc04_1325 & 0x0010) == 0x0000 l0800_9A1B
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_9A16:
	dx_347 = Mem368[ss:di_361 + 0x0001:word16]
	di_362 = di_361 + 0x0003
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_9A1B:
	wArg02 = di_362
	ax = ax_353
	bx_2052 = bx_455
	branch ax_353 != 0x0000 l0800_9A32
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_9A25:
	dx = dx_347
	bx_2053 = bx_455
	branch dx_347 != 0x0000 l0800_9A32
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_9A32:
	wLoc04_1325 = wLoc04_1325 | 0x0004
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_9A29:
	bx_2051 = bx
	branch wLoc0C_1328 != 0x0000 l0800_9A36
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_9A36:
	word16 sp_410 = sp_1025 - 2
	Mem414[ss:sp_410:word16] = dx_347
	Mem418[ss:sp_410 - 2:word16] = ax_353
	Mem420[ss:sp_410 - 4:word16] = ss
	Mem424[ss:sp_410 - 6:word16] = fp - 0x0047
	word16 ax_432 = (int16) bh_333
	Mem434[ss:sp_410 - 8:word16] = ax_432
	Mem439[ss:sp_410 - 10:word16] = DPB(ax_432, bLoc08_1368, 0)
	Mem461[ss:sp_410 - 12:word16] = bx_460
	fn0800_8D87(Mem461[ss:sp_410 - 10:byte], Mem461[ss:sp_410 - 8:word16], Mem461[ss:sp_410 - 6:segptr32], Mem461[ss:sp_410 - 2:word16], Mem461[ss:sp_410:word16], out di_142)
	Mem475[ss:sp_410:word16] = ss
	es_140 = Mem475[ss:sp_410:selector]
	sp_1025 = sp_410 + 2
	dx_231 = wLoc0C_1328
	branch wLoc0C_1328 >= 0x0000 l0800_9A52
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_9A52:
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_9A4F:
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_9B46:
	branch (wLoc04_1325 & 0x0008) == 0x0000 l0800_9B65
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_9B4D:
	dx_231 = wLoc0A_1327
	branch wLoc0A_1327 <= 0x0000 l0800_9B65
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_9B54:
	word16 cx_503 = fn0800_9842(di_142, es_140)
	branch Mem508[es_140:di_142:byte] != 0x2D l0800_9B5E
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_9B5D:
	cx_503 = cx_503 - 0x0001
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_9B5E:
	dx_231 = dx_231 - cx_503
	branch dx_231 <= 0x0000 l0800_9B65
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_9B62:
	wLoc10_1324 = dx_231
	Mem528 = Mem523
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_9B65:
	branch Mem528[es_140:di_142:byte] == 0x2D l0800_9B76
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_9B6B:
	branch bLoc0D_1326 == 0x00 l0800_9B86
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_9B72:
	di_142 = di_142 - 0x0001
	Mem541[es_140:di_142:byte] = bLoc0D_1326
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_9B76:
	branch wLoc10_1324 <= 0x0000 l0800_9B86
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_9B7C:
	branch wLoc0C_1328 >= 0x0000 l0800_9B86
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_9B83:
	wLoc10_1324 = wLoc10_1324 - 0x0001
	Mem576 = Mem553
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_9B86:
	cx_172 = fn0800_9842(di_142, es_140)
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_9B89:
	word16 si_1206 = di_142
	word16 bx_578 = wLoc0A_1327
	ax = wLoc04_1325 & 0x0005
	branch ax != 0x0005 l0800_9BAF
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_9B9C:
	ax = DPB(ax, dl_131, 8) (alias)
	ax = DPB(ax, dl_131, 8) (alias)
	ax = DPB(ax, dl_131, 8) (alias)
	branch dl_131 != 0x6F l0800_9BB1
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_9BB1:
	branch dl_131 == 0x78 l0800_9BBB
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_9BB6:
	branch dl_131 != 0x58 l0800_9BCC
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_9BBB:
	word16 v40_599 = wLoc10_1324 - 0x0002
	wLoc04_1325 = wLoc04_1325 | 0x0040
	bx_578 = wLoc0A_1327 - 0x0002
	wLoc10_1324 = v40_599
	Mem616 = Mem600
	branch v40_599 >= 0x0000 l0800_9BCC
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_9BC7:
	wLoc10_1324 = 0x0000
	Mem616 = Mem603
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_9BA4:
	branch wLoc10_1324 > 0x0000 l0800_9BAF
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_9BAA:
	wLoc10_1324 = 0x0001
	Mem617 = Mem606
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_9BAF:
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_9BCC:
	cx = cx_172 + wLoc10_1324
	branch (wLoc04_1325 & 0x0002) != 0x0000 l0800_9BE2
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_9BD6:
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_9BDE:
	branch bx_578 > cx l0800_9BD8
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_9BD8:
	ax = DPB(ax, 0x20, 0) (alias)
	di_1010 = fn0800_984F(0x20, cx, dx_231, bx_578, fp - 2, di_1010, es_140)
	sp_1025 = sp_1025 + 0xFFFE
	bx_578 = bx_578 - 0x0001
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_9BE2:
	branch (wLoc04_1325 & 0x0040) == 0x0000 l0800_9BF4
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_9BE9:
	ax = DPB(ax, dl_131, 0) (alias)
	di_1010 = fn0800_984F(dl_131, cx, dx_231, bx_578, fp - 2, fn0800_984F(0x30, cx, dx_231, bx_578, fp - 2, di_1010, es_140), es_140)
	sp_1025 = sp_1025 + 0xFFFC
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_9BF4:
	dx = wLoc10_1324
	branch wLoc10_1324 <= 0x0000 l0800_9C22
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_9BFB:
	byte al_724 = Mem616[es_140:di_142:byte]
	word16 cx_714 = cx - wLoc10_1324
	bx_578 = bx_578 - wLoc10_1324
	ax = DPB(ax, al_724, 0) (alias)
	ax = DPB(ax, al_724, 0) (alias)
	ax = DPB(ax, al_724, 0) (alias)
	branch al_724 == 0x2D l0800_9C0E
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_9C06:
	branch al_724 == 0x20 l0800_9C0E
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_9C0A:
	branch al_724 != 0x2B l0800_9C15
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_9C0E:
	byte al_757 = Mem616[ds:di_142:byte]
	ax = DPB(ax, al_757, 0) (alias)
	si_1206 = di_142 + 0x0001
	di_1010 = fn0800_984F(al_757, cx_714, wLoc10_1324, bx_578, fp - 2, di_1010, es_140)
	sp_1025 = sp_1025 + 0xFFFE
	cx_714 = cx_714 - 0x0001
	bx_578 = bx_578 - 0x0001
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_9C15:
	word16 cx_782 = wLoc10_1324
	branch wLoc10_1324 == 0x0000 l0800_9C20
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_9C19:
	ax = DPB(ax, 0x30, 0) (alias)
	di_1010 = fn0800_984F(0x30, cx_782, cx_714, bx_578, fp - 2, di_1010, es_140)
	sp_1025 = sp_1025 + 0xFFFE
	cx_782 = cx_782 - 0x0001
	branch cx_782 != 0x0000 l0800_9C19
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_9C20:
	dx = cx_782
	cx = cx_714
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_9C22:
	branch cx == 0x0000 l0800_9C36
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_9C24:
	bx_578 = bx_578 - cx
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_9C26:
	byte al_813 = Mem812[ds:si_1206:byte]
	Mem817[ss:di_1010:byte] = al_813
	byte v45_820 = bLoc16_1529 - 0x01
	ax = DPB(ax, al_813, 0) (alias)
	si_1206 = si_1206 + 0x0001
	di_1010 = di_1010 + 0x0001
	bLoc16_1529 = v45_820
	branch v45_820 > 0x00 l0800_9C34
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_9C31:
	di_1010 = fn0800_9858(cx, dx, bx_578, fp - 2, di_1010, es_140)
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_9C34:
	cx = cx - 0x0001
	Mem812 = Mem821
	Mem1113 = Mem821
	branch cx != 0x0000 l0800_9C26
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_9C36:
	bx = bx_578
	branch bx_578 <= 0x0000 l0800_9C43
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_9C3A:
	cx = bx_578
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_9C3C:
	ax = DPB(ax, 0x20, 0) (alias)
	di_1010 = fn0800_984F(0x20, cx, dx, bx_578, fp - 2, di_1010, es_140)
	sp_1025 = sp_1025 + 0xFFFE
	cx = cx - 0x0001
	branch cx != 0x0000 l0800_9C3C
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_9C43:
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_9A2F:
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_9935:
	cx_2055 = cx
	branch ch_1223 >u 0x00 l0800_9987
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_993A:
	branch (wLoc04_1325 & 0x0002) != 0x0000 l0800_996A
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_9941:
	wLoc04_1325 = wLoc04_1325 | 0x0008
	ch_1223 = 0x01
	cx_1233 = DPB(cx_1232, 0x01, 8) (alias)
	Mem993 = Mem864
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_99CC:
	wLoc04_1325 = wLoc04_1325 | 0x0100
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_99D1:
	wLoc04_1325 = wLoc04_1325 & 0xFFEF
	Mem994 = Mem876
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_99C5:
	wLoc04_1325 = wLoc04_1325 | 0x0010
	Mem994 = Mem880
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_9931:
	ch_1223 = 0x05
	cx_1233 = DPB(cx_1232, 0x05, 8) (alias)
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_9987:
	dx = ax_1183
	word16 ax_891 = (int16) (dl_131 - 0x30)
	branch ch_1223 >u 0x02 l0800_99A9
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_99A9:
	branch ch_1223 != 0x04 l0800_9949
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_99AE:
	wLoc0C_1328 = ax_891
	ax_1183 = wLoc0C_1328
	Mem995 = Mem901
	branch wLoc0C_1328 == 0x0000 l0800_996A
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_99B5:
	ax_1183 = (wLoc0C_1328 << 0x0003) + (wLoc0C_1328 << 0x0001)
	wLoc0C_1328 = ax_891 + ax_1183
	Mem993 = Mem913
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_9990:
	ch_1223 = 0x02
	cx_1242 = DPB(cx_2054, 0x02, 8) (alias)
	cx_1233 = DPB(cx_2054, 0x02, 8) (alias)
	wLoc0A_1327 = ax_891
	ax_1183 = wLoc0A_1327
	Mem995 = Mem917
	branch wLoc0A_1327 < 0x0000 l0800_996A
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_9999:
	ax_1183 = (wLoc0A_1327 << 0x0003) + (wLoc0A_1327 << 0x0001)
	wLoc0A_1327 = ax_891 + ax_1183
	Mem993 = Mem929
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_997A:
	branch ch_1223 >=u 0x04 l0800_9949
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_997F:
	ch_1223 = 0x04
	cx_1233 = DPB(cx_1232, 0x04, 8) (alias)
	wLoc0C_1328 = wLoc0C_1328 + 0x0001
	Mem993 = Mem935
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_990C:
	branch ch_1223 >u 0x00 l0800_98FE
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_9911:
	wLoc04_1325 = wLoc04_1325 | 0x0002
	Mem993 = Mem940
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_994C:
	ax_1183 = Mem74[ss:wArg02:word16]
	wArg02 = wArg02 + 0x0002
	branch ch_1223 >=u 0x02 l0800_996D
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_996D:
	branch ch_1223 != 0x04 l0800_9949
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_9949:
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_9972:
	ch_1223 = ch_1223 + 0x01
	wLoc0C_1328 = ax_1183
	cx_1233 = DPB(cx_1232, ch_1223, 8) (alias)
	Mem993 = Mem951
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_995B:
	branch ax_1183 >= 0x0000 l0800_9965
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_995F:
	ax_1183 = -ax_1183
	wLoc04_1325 = wLoc04_1325 | 0x0002
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_9965:
	wLoc0A_1327 = ax_1183
	ch_1223 = 0x03
	cx_1242 = DPB(cx_1232, 0x03, 8) (alias)
	Mem995 = Mem966
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_996A:
	cx_1233 = DPB(cx_1242, ch_1223, 8) (alias)
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_9901:
	branch ch_1223 >u 0x00 l0800_98FE
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_9906:
	wLoc04_1325 = wLoc04_1325 | 0x0001
	Mem993 = Mem971
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_9917:
	branch ch_1223 >u 0x00 l0800_98FE
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_98FE:
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_991C:
	branch bLoc0D_1326 == 0x2B l0800_9925
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_9922:
	bLoc0D_1326 = dl_131
	Mem996 = Mem978
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_9925:
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_98DB:
	cx_1232 = DPB(cx_1233, ch_1223, 8) (alias)
	ax_1182 = DPB(ax_1183, Mem993[ds:si_1134:byte], 0) (alias)
	si_1134 = si_1134 + 0x0001
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_98F4:
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_9C82:
	word16 si_1008 = si_1134
	es_1009 = ptrArg04
	byte al_1011 = 0x25
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_9C8D:
	di_1010 = fn0800_984F(al_1011, cx, dx, bx, fp - 2, di_1010, ptrArg04)
	byte al_1030 = Mem1005[ds:si_1008:byte]
	sp_1025 = sp_1025 + 0xFFFE
	si_1008 = si_1008 + 0x0001
	al_1011 = al_1030
	branch al_1030 != 0x00 l0800_9C8D
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_9C96:
	branch bLoc16_1529 >= 0x50 l0800_9C9F
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_9C9C:
	fn0800_9858(cx, dx, bx, fp - 2, di_1010, es_1009)
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_9C9F:
	word16 ax_1066
	word16 sp_1062 = sp_1025 + 2
	branch 0x0000 == 0x0000 l0800_9CAB
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_9CAB:
	ax_1066 = 0x0000
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_9CA6:
	ax_1066 = 0xFFFF
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_9CAE:
	word16 di_1071 = Mem1038[ss:sp_1062:word16]
	siOut = Mem1038[ss:sp_1062 + 2:word16]
	diOut = di_1071
	return ax_1066
// DataOut:
// DataOut (flags):
// SymbolicIn:

fn0800_9828_exit:
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_98A5:
	Mem1081[ss:di_1010:byte] = al_1078
	byte v16_1084 = bLoc16_1529 - 0x01
	ax = DPB(ax_1144, al_1078, 0) (alias)
	di_1010 = di_1010 + 0x0001
	bLoc16_1529 = v16_1084
	Mem36 = Mem1085
	branch v16_1084 > 0x00 l0800_989B
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_98AE:
	di_1010 = fn0800_9858(cx, dx, bx, fp - 2, di_1010, es_1009)
	Mem36 = Mem1085
// DataOut:
// DataOut (flags):
// SymbolicIn:



word16 fn0800_9842(word16 di, selector es)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  di:[0..15] es:[0..15]
// LiveOut: cx
// Trashed: SCZO al cx Top
// Preserved: di sp
fn0800_9842_entry:
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_9842:
	word16 cx_12 = 0xFFFF
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_9848:
	branch cx_12 == 0x0000 l0800_984A
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_9848_1:
	di = di_45 + 0x0001
	cx_12 = cx_12 - 0x0001
	di_45 = di
	branch Mem7[es:di_45:byte] == 0x00 l0800_9848
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_984A:
	return ~cx_12 - 0x0001
// DataOut:
// DataOut (flags):
// SymbolicIn:

fn0800_9842_exit:
// DataOut:
// DataOut (flags):
// SymbolicIn:



word16 fn0800_984F(byte al, word16 cx, word16 dx, word16 bx, word16 bp, word16 di, selector es)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  al:[0..7] bp:[0..15] bx:[0..15] cx:[0..15] di:[0..15] dx:[0..15] es:[0..15] ss:[0..15]
// LiveOut: di
// Trashed: SZO di Top
// Preserved: C sp
fn0800_984F_entry:
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_984F:
	Mem7[ss:di:byte] = al
	byte v8_10 = Mem7[ss:bp - 0x0014:byte] - 0x01
	Mem11[ss:bp - 0x0014:byte] = v8_10
	branch v8_10 != 0x00 l0800_988B_in_fn0800_984F
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_988B_in_fn0800_984F:
	return di + 0x0001
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_9856_thunk_fn0800_9858:
	return fn0800_9858(cx, dx, bx, bp, di + 0x0001, es)
// DataOut:
// DataOut (flags):
// SymbolicIn:

fn0800_984F_exit:
// DataOut:
// DataOut (flags):
// SymbolicIn:



word16 fn0800_9858(word16 cx, word16 dx, word16 bx, word16 bp, word16 di, selector es)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  bp:[0..15] bx:[0..15] cx:[0..15] di:[0..15] dx:[0..15] es:[0..15] ss:[0..15]
// LiveOut: di
// Trashed: SCZO di Top
// Preserved: bx cx dx es sp
fn0800_9858_entry:
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_9858:
	word16 di_20 = di - (bp - 0x0096)
	word16 ax_39
	call SEQ(0x0800, Mem34[ss:bp + 0x000E:word16]) (retsize: 2;)
		uses: ax:bp - 0x0096,bp:bp,bx:bx,cx:cx,di:di_20,dx:dx,es:es,sp:fp - 18,ss:ss,Stack +0002:Mem31[ss:bp + 0x000A:word16],Stack +0004:Mem28[ss:bp + 0x000C:word16],Stack +0006:di_20,Stack +0008:bp - 0x0096,Stack +000A:ss,Stack +000C:es,Stack +000E:dx,Stack +0010:cx,Stack +0012:bx,Top:0
		defs: ax:ax_39
	branch ax_39 != 0x0000 l0800_987B
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_9876:
	Mem46[ss:bp - 0x0016:word16] = 0x0001
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_987B:
	Mem49[ss:bp - 0x0014:word16] = 0x0050
	Mem52[ss:bp - 0x0012:word16] = Mem49[ss:bp - 0x0012:word16] + di_20
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_988B:
	return bp - 0x0096
// DataOut:
// DataOut (flags):
// SymbolicIn:

fn0800_9858_exit:
// DataOut:
// DataOut (flags):
// SymbolicIn:



word16 fn0800_9CE6(word16 wArg02, word16 wArg04, word16 wArg06, word16 wArg08, ptr16 & dxOut)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  Stack +0002:[0..15] Stack +0004:[0..15] Stack +0006:[0..15] Stack +0008:[0..15]
// LiveOut: ax dx
// Trashed: SCZDO ax cx dx es Top
// Preserved: bp si sp
fn0800_9CE6_entry:
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_9CE6:
	// Failed to bind call argument.
	// Please report this issue at https://github.com/uxmal/reko
	// Failed to bind call argument.
	// Please report this issue at https://github.com/uxmal/reko
	word16 stackArg4 = <invalid>
	word16 ax_18 = fn0800_BFC7(SEQ(wArg08, wArg06), stackArg4, out cx_87, out es_88)
	word16 stackArg4 = <invalid>
	fn0800_B03B(SEQ(wArg04, wArg02), stackArg4, SEQ(wArg08, wArg06), ax_18 + 0x0001)
	dxOut = wArg04
	return wArg02 + ax_18
// DataOut:
// DataOut (flags):
// SymbolicIn:

fn0800_9CE6_exit:
// DataOut:
// DataOut (flags):
// SymbolicIn:



word16 fn0800_9D41(word16 dx, ptr16 & cxOut, ptr16 & dxOut, ptr16 & bxOut)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  dx:[0..15]
// LiveOut: ax bx cx dx
// Trashed: SCZO ax bx cx ds dx es Top
// Preserved: sp
fn0800_9D41_entry:
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_9D41:
	selector ds_35
	word16 wLoc02_67
	branch dx == Mem0[0x0800:0x9D35:word16] l0800_9D7F
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_9D48:
	selector ds_9 = Mem0[dx:0x0002:selector]
	branch Mem0[ds_9:0x0002:word16] == 0x0000 l0800_9D5C
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_9D5C:
	branch ds_9 == Mem0[0x0800:0x9D35:word16] l0800_9D7A
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_9D7A:
	dx = Mem0[0x0800:0x9D35:word16]
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_9D7F:
	Mem16[0x0800:0x9D35:word16] = 0x0000
	Mem17[0x0800:0x9D37:word16] = 0x0000
	Mem18[0x0800:0x9D39:word16] = 0x0000
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_9D65:
	Mem20[0x0800:0x9D37:word16] = Mem0[ds_9:0x0008:word16]
	fn0800_9E15(ds_9)
	wLoc02_67 = ds_9
	ds_35 = Mem28[0x0800:0x9D3B:selector]
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_9D55:
	Mem36[0x0800:0x9D37:word16] = ds_9
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_9D94:
	ds_35 = Mem37[0x0800:0x9D3B:selector]
	wLoc02_67 = dx
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_9D9D:
	word16 bx_57
	word16 cx_58
	word16 dx_59
	word16 ax_56 = fn0800_A1D6(ds_35, 0x0000, wLoc02_67, out cx_58, out dx_59, out bx_57)
	cxOut = cx_58
	dxOut = dx_59
	bxOut = bx_57
	return ax_56
// DataOut:
// DataOut (flags):
// SymbolicIn:

fn0800_9D41_exit:
// DataOut:
// DataOut (flags):
// SymbolicIn:



word16 fn0800_9DA4(word16 dx, ptr16 & bxOut)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  dx:[0..15]
// LiveOut: ax bx
// Trashed: SCZO ax bx ds es Top
// Preserved: DP cx dx sp
fn0800_9DA4_entry:
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_9DA4:
	word16 bx_17
	selector es_9 = Mem8[dx:0x0002:selector]
	Mem10[dx:0x0002:word16] = 0x0000
	Mem11[dx:0x0008:word16] = es_9
	word16 wLoc02_67 = dx
	branch dx == Mem11[0x0800:0x9D35:word16] l0800_9DEA
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_9DBC:
	branch Mem11[es_9:0x0002:word16] != 0x0000 l0800_9DEA
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_9DEA:
	bx_17 = fn0800_9E3E(dx)
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_9DC4:
	word16 ax_25 = Mem11[dx:0x0000:word16]
	Mem31[es_9:0x0000:word16] = Mem29[es_9:0x0000:word16] + ax_25
	bx_17 = dx
	wLoc02_67 = es_9
	word16 dx_33 = dx + ax_25
	branch Mem31[dx_33:0x0002:word16] != 0x0000 l0800_9DE3
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_9DE3:
	Mem37[dx_33:0x0002:word16] = es_9
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_9DDC:
	Mem38[dx_33:0x0008:word16] = es_9
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_9DED:
	word16 ax_48 = wLoc02_67 + Mem43[wLoc02_67:0x0000:word16]
	branch Mem43[ax_48:0x0002:word16] == 0x0000 l0800_9DFF
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_9DFF:
	Mem54[wLoc02_67:0x0000:word16] = Mem43[wLoc02_67:0x0000:word16] + Mem43[ax_48:0x0000:word16]
	Mem60[ax_48 + Mem54[ax_48:0x0000:word16]:0x0002:word16] = wLoc02_67
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_9E11_thunk_fn0800_9E15:
	bxOut = fn0800_9E15(ax_48)
	return wLoc02_67
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_9DFE:
	bxOut = bx_17
	return ax_48
// DataOut:
// DataOut (flags):
// SymbolicIn:

fn0800_9DA4_exit:
// DataOut:
// DataOut (flags):
// SymbolicIn:



word16 fn0800_9E15(selector ds)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  ds:[0..15]
// LiveOut: bx
// Trashed: SCZO bx es Top
// Preserved: ds sp
fn0800_9E15_entry:
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_9E15:
	branch ds == Mem0[ds:0x0006:word16] l0800_9E36
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_9E36:
	Mem9[0x0800:0x9D39:word16] = 0x0000
	return
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_9E1D:
	selector es_10 = Mem0[ds:0x0006:selector]
	selector ds_11 = Mem0[ds:0x0004:selector]
	Mem12[ds_11:0x0006:word16] = es_10
	Mem13[es_10:0x0004:word16] = ds_11
	Mem14[0x0800:0x9D39:word16] = ds_11
	return
// DataOut:
// DataOut (flags):
// SymbolicIn:

fn0800_9E15_exit:
// DataOut:
// DataOut (flags):
// SymbolicIn:



word16 fn0800_9E3E(selector ds)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  ds:[0..15]
// LiveOut: bx
// Trashed: SCZDOP bx es Top
// Preserved: sp ss
fn0800_9E3E_entry:
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_9E3E:
	word16 ax_5 = Mem0[0x0800:0x9D39:word16]
	branch ax_5 == 0x0000 l0800_9E67
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_9E67:
	Mem11[0x0800:0x9D39:word16] = ds
	Mem12[ds:0x0004:word16] = ds
	Mem13[ds:0x0006:word16] = ds
	return bx
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_9E46:
	__cli()
	selector es_22 = Mem20[ax_5:0x0006:selector]
	Mem23[ax_5:0x0006:word16] = ds
	Mem24[ds:0x0004:word16] = ax_5
	Mem28[es_22:0x0004:word16] = ds
	Mem29[ds:0x0006:word16] = es_22
	return ss
// DataOut:
// DataOut (flags):
// SymbolicIn:

fn0800_9E3E_exit:
// DataOut:
// DataOut (flags):
// SymbolicIn:



word16 fn0800_9E75(selector ds, word16 wArg04, ptr16 & cxOut, ptr16 & dxOut, ptr16 & bxOut, ptr16 & dsOut)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  ds:[0..15] Stack +0004:[0..15]
// LiveOut: ax bx cx ds dx
// Trashed: SCZO ax bx cx ds dx es Top
// Preserved: bp di si sp
fn0800_9E75_entry:
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_9E75:
	Mem16[0x0800:0x9D3B:word16] = ds
	word16 dx_18 = wArg04
	branch wArg04 == 0x0000 l0800_9E95
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_9E86:
	branch wArg04 != Mem16[0x0800:0x9D37:word16] l0800_9E92
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_9E92:
	ax = fn0800_9DA4(wArg04, out bx)
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_9E8D:
	ax = fn0800_9D41(wArg04, out cx, out dx_18, out bx)
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_9E95:
	selector ds_43 = Mem16[0x0800:0x9D3B:selector]
	cxOut = cx
	dxOut = dx_18
	bxOut = bx
	dsOut = ds_43
	return ax
// DataOut:
// DataOut (flags):
// SymbolicIn:

fn0800_9E75_exit:
// DataOut:
// DataOut (flags):
// SymbolicIn:



word16 fn0800_9E9E(word16 ax, ptr16 & dxOut)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  ax:[0..15] ss:[0..15]
// LiveOut: ax dx
// Trashed: SCZO ax bx cx ds dx es Top
// Preserved: sp
fn0800_9E9E_entry:
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_9E9E:
	word16 ax_16 = fn0800_A215(Mem7[0x0800:0x9D3B:selector], 0x0000, 0x0000, out dx_126)
	branch (ax_16 & 0x000F) == 0x0000 l0800_9EC7
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_9EB3:
	fn0800_A215(Mem15[0x0800:0x9D3B:selector], 0x0010 - (ax_16 & 0x000F), 0x0000, out dx_127)
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_9EC7:
	word16 dx_74
	branch fn0800_A215(Mem57[0x0800:0x9D3B:selector], ax << 0x04, (word16) SLICE(ax, byte, 8) >>u 0x04, out dx_74) == 0xFFFF l0800_9EFE
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_9EFE:
	dxOut = 0x0000
	return 0x0000
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_9EE6:
	Mem89[0x0800:0x9D35:word16] = dx_74
	Mem90[0x0800:0x9D37:word16] = dx_74
	Mem92[dx_74:0x0000:word16] = ax
	Mem93[dx_74:0x0002:word16] = dx_74
	dxOut = dx_74
	return 0x0004
// DataOut:
// DataOut (flags):
// SymbolicIn:

fn0800_9E9E_exit:
// DataOut:
// DataOut (flags):
// SymbolicIn:



word16 fn0800_9F02(word16 ax, ptr16 & dxOut)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  ax:[0..15] ss:[0..15]
// LiveOut: ax dx
// Trashed: SCZO ax bx cx ds dx es Top
// Preserved: sp
fn0800_9F02_entry:
	byte ah_9 = SLICE(ax, byte, 8)
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_9F02:
	selector ds_16 = Mem7[0x0800:0x9D3B:selector]
	word16 dx_24
	word16 ax_21 = fn0800_A215(ds_16, ax << 0x04, (word16) ah_9 >>u 0x04, out dx_24)
	branch ax_21 == 0xFFFF l0800_9F58
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_9F20:
	branch (ax_21 & 0x000F) != 0x0000 l0800_9F3D
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_9F3D:
	branch fn0800_A215(ds_16, -(ax_21 & 0x000F) + 0x0010, 0x0000, out dx_127) == 0xFFFF l0800_9F58
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_9F58:
	dxOut = 0x0000
	return 0x0000
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_9F55:
	dx_24 = dx_24 + 0x0001
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_9F25:
	word16 cx_75 = Mem74[0x0800:0x9D37:word16]
	Mem77[0x0800:0x9D37:word16] = dx_24
	Mem80[dx_24:0x0000:word16] = ax
	Mem81[dx_24:0x0002:word16] = cx_75
	dxOut = dx_24
	return 0x0004
// DataOut:
// DataOut (flags):
// SymbolicIn:

fn0800_9F02_exit:
// DataOut:
// DataOut (flags):
// SymbolicIn:



word16 fn0800_9F5C(word16 ax, word16 dx, selector ds, ptr16 & dxOut)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  ax:[0..15] ds:[0..15] dx:[0..15]
// LiveOut: ax dx
// Trashed: SCZO ax bx ds dx Top
// Preserved: sp
fn0800_9F5C_entry:
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_9F5C:
	Mem10[ds:0x0000:word16] = Mem0[ds:0x0000:word16] - ax
	word16 dx_11 = dx + Mem10[ds:0x0000:word16]
	Mem13[dx_11:0x0000:word16] = ax
	Mem14[dx_11:0x0002:word16] = dx
	Mem19[dx_11 + Mem14[dx_11:0x0000:word16]:0x0002:word16] = dx_11
	dxOut = dx_11
	return 0x0004
// DataOut:
// DataOut (flags):
// SymbolicIn:

fn0800_9F5C_exit:
// DataOut:
// DataOut (flags):
// SymbolicIn:



word16 fn0800_9F7F(word16 wArg02, ptr16 & dxOut, ptr16 & bpOut, ptr16 & siOut, ptr16 & diOut, ptr16 & dsOut)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse: 
// LiveOut: ax bp di ds dx si sp
// Trashed: SCZO ax bp bx cx di ds dx es si sp Top
// Preserved:
fn0800_9F7F_entry:
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_9F7F:
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_9F87_thunk_fn0800_9F92:
	// Failed to bind call argument.
	// Please report this issue at https://github.com/uxmal/reko
	word16 stackArg0 = <invalid>
	word16 bp_14
	selector ds_16
	word16 dx_17
	word16 di_20
	word16 si_22
	word16 ax_13 = fn0800_9F92(stackArg0, out dx_17, out bp_14, out si_22, out di_20, out ds_16)
	dxOut = dx_17
	bpOut = bp_14
	siOut = si_22
	diOut = di_20
	dsOut = ds_16
	return ax_13
// DataOut:
// DataOut (flags):
// SymbolicIn:

fn0800_9F7F_exit:
// DataOut:
// DataOut (flags):
// SymbolicIn:



word16 fn0800_9F89(word16 wArg02, word16 wArg04, ptr16 & dxOut, ptr16 & bpOut, ptr16 & siOut, ptr16 & diOut, ptr16 & dsOut)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse: 
// LiveOut: ax bp di ds dx si sp
// Trashed: SCZO ax bp bx cx di ds dx es si sp Top
// Preserved:
fn0800_9F89_entry:
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_9F89:
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_9F8F_thunk_fn0800_9F92:
	// Failed to bind call argument.
	// Please report this issue at https://github.com/uxmal/reko
	word16 stackArg0 = <invalid>
	word16 bp_12
	selector ds_14
	word16 dx_15
	word16 di_18
	word16 si_20
	word16 ax_11 = fn0800_9F92(stackArg0, out dx_15, out bp_12, out si_20, out di_18, out ds_14)
	dxOut = dx_15
	bpOut = bp_12
	siOut = si_20
	diOut = di_18
	dsOut = ds_14
	return ax_11
// DataOut:
// DataOut (flags):
// SymbolicIn:

fn0800_9F89_exit:
// DataOut:
// DataOut (flags):
// SymbolicIn:



word16 fn0800_9F92(word16 wArg00, ptr16 & dxOut, ptr16 & bpOut, ptr16 & siOut, ptr16 & diOut, ptr16 & dsOut)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse: 
// LiveOut: ax bp di ds dx si sp
// Trashed: SCZO ax bp bx cx di ds dx es si sp Top
// Preserved:
l0800_9F92:
	Mem11[ss:sp - 2:word16] = si
	Mem14[ss:sp - 4:word16] = di
	Mem16[0x0800:0x9D3B:word16] = ds
	branch (ax | dx) == 0x0000 l0800_9FFD
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_9F9D_thunk_fn0800_9F9F:
	word16 bp_19
	word16 di_20
	selector ds_21
	word16 dx_22
	word16 si_23
	word16 ax_18 = fn0800_9F9F(ax, dx, out dx_22, out bp_19, out si_23, out di_20, out ds_21)
	dxOut = dx_22
	bpOut = bp_19
	siOut = si_23
	diOut = di_20
	dsOut = ds_21
	return ax_18
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_9F9D_thunk_fn0800_9F9F:
	word16 bp_33
	word16 di_34
	selector ds_35
	word16 dx_36
	word16 si_37
	word16 ax_32 = fn0800_9F9F(ax, dx, out dx_36, out bp_33, out si_37, out di_34, out ds_35)
	dxOut = dx_36
	bpOut = bp_33
	siOut = si_37
	diOut = di_34
	dsOut = ds_35
	return ax_32
// DataOut:
// DataOut (flags):
// SymbolicIn:

fn0800_9F92_entry:
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_9F92:
	Mem57[0x0800:0x9D3B:word16] = ds
	branch (ax | dx) == 0x0000 l0800_9FFD_in_fn0800_9F92
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_9FFD_in_fn0800_9F92:
	selector ds_59 = Mem57[0x0800:0x9D3B:selector]
	dxOut = dx
	bpOut = wArg00
	siOut = si
	diOut = di
	dsOut = ds_59
	return ax
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_9F9D_thunk_fn0800_9F9F:
	word16 bp_67
	word16 di_68
	selector ds_69
	word16 dx_70
	word16 si_71
	word16 ax_66 = fn0800_9F9F(ax, dx, out dx_70, out bp_67, out si_71, out di_68, out ds_69)
	dxOut = dx_70
	bpOut = bp_67
	siOut = si_71
	diOut = di_68
	dsOut = ds_69
	return ax_66
// DataOut:
// DataOut (flags):
// SymbolicIn:

fn0800_9F92_exit:
// DataOut:
// DataOut (flags):
// SymbolicIn:



word16 fn0800_9F9F(word16 ax, word16 dx, ptr16 & dxOut, ptr16 & bpOut, ptr16 & siOut, ptr16 & diOut, ptr16 & dsOut)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  ax:[0..15] dx:[0..15] ss:[0..15]
// LiveOut: ax bp di ds dx si sp
// Trashed: SCZO ax bp bx cx di ds dx es si sp Top
// Preserved:
fn0800_9F9F_entry:
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_9F9F:
	word16 dx_117
	word16 ax_106
	word16 dx_9 = dx + (ax <u 0x0013)
	branch dx_9 <u 0x0000 l0800_9FE8
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_9FA7:
	branch (dx_9 & 0xFFF0) != 0x0000 l0800_9FE8
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_9FE8:
	ax_106 = 0x0000 (alias)
	dx_117 = 0x0000 (alias)
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_9FAD:
	word16 ax_20 = ax + 0x0013 >>u 0x04
	word16 ax_31 = DPB(ax_20, SLICE(ax_20, byte, 8) | (byte) (dx_9 << 0x04), 8)
	branch Mem0[0x0800:0x9D35:word16] == 0x0000 l0800_9FDE
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_9FDE:
	ax_106 = fn0800_9E9E(ax_31, out dx_117)
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_9FBE:
	word16 dx_43 = Mem0[0x0800:0x9D39:word16]
	dx_117 = dx_43
	branch dx_43 == 0x0000 l0800_9FD9
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_9FC7:
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_9FC9:
	branch Mem0[dx_117:0x0000:word16] >=u ax_31 l0800_9FED
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_9FED:
	branch Mem0[dx_117:0x0000:word16] >u ax_31 l0800_9FE3
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_9FE3:
	ax_106 = fn0800_9F5C(ax_31, dx_117, dx_117, out dx_117)
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_9FEF:
	fn0800_9E15(dx_117)
	Mem71[dx_117:0x0002:word16] = Mem0[dx_117:0x0008:word16]
	ax_106 = 0x0004
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_9FD1:
	dx_117 = Mem0[dx_117:0x0006:word16]
	branch dx_117 != dx_43 l0800_9FC9
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_9FD9:
	ax_106 = fn0800_9F02(ax_31, out dx_117)
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_9FFD:
	selector ds_93 = Mem90[0x0800:0x9D3B:selector]
	word16 di_100 = Mem90[ss:v4:word16]
	word16 si_102 = Mem90[ss:v4 + 2:word16]
	word16 bp_104 = Mem90[ss:v4 + 4:word16]
	dxOut = dx_117
	bpOut = bp_104
	siOut = si_102
	diOut = di_100
	dsOut = ds_93
	return ax_106
// DataOut:
// DataOut (flags):
// SymbolicIn:

fn0800_9F9F_exit:
// DataOut:
// DataOut (flags):
// SymbolicIn:



void fn0800_A006(word16 bx)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  bx:[0..15]
// LiveOut:
// Trashed: SCZDO ax bp bx cx di ds es si Top
// Preserved: sp
fn0800_A006_entry:
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_A006:
	// Failed to bind call argument.
	// Please report this issue at https://github.com/uxmal/reko
	// Failed to bind call argument.
	// Please report this issue at https://github.com/uxmal/reko
	word16 stackArg2 = <invalid>
	word16 stackArg4 = <invalid>
	word16 dx_20
	fn0800_9F89(stackArg2, stackArg4, out dx_20, out bp_202, out si_203, out di_204, out ds_205)
	branch dx_20 != 0x0000 l0800_A01F
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_A01F:
	word16 dx_42 = Mem41[bx:0x0000:word16]
	word16 di_124 = 0x0004
	word16 si_122 = 0x0004
	word16 cx_128 = 0x0006
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_A033:
	branch cx_128 == 0x0000 l0800_A035
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_A035:
	word16 dx_51 = dx_42 - 0x0001
	branch dx_42 == 0x0001 l0800_A070
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_A039:
	selector es_109 = dx_20 + 0x0001
	selector ds_114 = bx + 0x0001
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_A043:
	word16 di_117 = 0x0000
	word16 si_115 = 0x0000
	word16 cx_67 = dx_51
	branch dx_51 <=u 0x1000 l0800_A052
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_A04F:
	cx_67 = 0x1000
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_A052:
	word16 cx_121 = cx_67 << 0x0003
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_A058:
	branch cx_121 == 0x0000 l0800_A05A
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_A05A:
	dx_51 = dx_51 - 0x1000
	branch dx_51 <=u 0x0000 l0800_A070
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_A070:
	fn0800_9E75(Mem81[0x0800:0x9D3B:selector], bx, out cx_206, out dx_207, out bx_208, out ds_209)
	return
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_A060:
	es_109 = es_109 + 0x1000
	ds_114 = ds_114 + 0x1000
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_A058_1:
	Mem118[es_109:di_117:word16] = Mem83[ds_114:si_115:word16]
	si_115 = si_115 + 0x0002
	di_117 = di_117 + 0x0002
	cx_121 = cx_121 - 0x0001
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_A033_1:
	Mem125[dx_20:di_124:word16] = Mem82[bx:si_122:word16]
	si_122 = si_122 + 0x0002
	di_124 = di_124 + 0x0002
	cx_128 = cx_128 - 0x0001
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_A01D:
	return
// DataOut:
// DataOut (flags):
// SymbolicIn:

fn0800_A006_exit:
// DataOut:
// DataOut (flags):
// SymbolicIn:



void fn0800_A080(word16 ax, word16 cx, word16 bx, selector ds)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  ax:[0..15] bx:[0..15] cx:[0..15] ds:[0..15]
// LiveOut:
// Trashed: SCZO ax bx cx di ds dx es si Top
// Preserved: sp
fn0800_A080_entry:
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_A080:
	branch bx == Mem0[0x0800:0x9D37:word16] l0800_A0CB
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_A0CB:
	Mem13[bx:0x0000:word16] = ax
	fn0800_A1D6(ds, 0x0000, bx + ax, out cx_110, out dx_111, out bx_112)
	return
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_A087:
	word16 di_38 = bx + ax
	Mem43[di_38:0x0000:word16] = cx - ax
	Mem44[di_38:0x0002:word16] = bx
	Mem50[bx:0x0000:word16] = ax
	word16 dx_52 = bx + cx
	branch Mem50[dx_52:0x0002:word16] == 0x0000 l0800_A0B8
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_A0B8:
	Mem56[dx_52:0x0008:word16] = di_38
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_A0B1:
	Mem57[dx_52:0x0002:word16] = di_38
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_A0BD:
	fn0800_9E75(ds, di_38, out cx_113, out dx_114, out bx_115, out ds_116)
	return
// DataOut:
// DataOut (flags):
// SymbolicIn:

fn0800_A080_exit:
// DataOut:
// DataOut (flags):
// SymbolicIn:



word16 fn0800_A162(selector ds, word16 wArg02, word16 wArg04, ptr16 & cxOut, ptr16 & dxOut, ptr16 & bxOut)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  ds:[0..15] Stack +0002:[0..15] Stack +0004:[0..15]
// LiveOut: ax bx cx dx
// Trashed: SCZO ax bx cx dx es Top
// Preserved: bp si sp
fn0800_A162_entry:
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_A162:
	word16 dx_111
	word16 ax_56
	word16 cx_106 = DPB(cx, 0x06, 0)
	word16 si_18 = wArg04 + 0x0001 - Mem11[ds:0x007B:word16] + 0x003F >>u 0x06
	branch si_18 != Mem11[ds:0x2698:word16] l0800_A18D
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_A18D:
	word16 si_22 = si_18 << 0x06
	word16 dx_23 = Mem11[ds:0x0091:word16]
	word16 ax_25 = (si_18 << 0x06) + Mem11[ds:0x007B:word16]
	branch ax_25 <=u dx_23 l0800_A1A5
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_A19F:
	si_22 = dx_23 - Mem11[ds:0x007B:word16]
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_A1A5:
	word16 ax_41 = fn0800_A401(ax_25, ds, Mem35[ds:0x007B:word16], si_22, out bx)
	cx_106 = si_22
	dx_111 = ax_41
	branch ax_41 != 0xFFFF l0800_A1C1
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_A1C1:
	Mem54[ds:0x0091:word16] = Mem39[ds:0x007B:word16] + ax_41
	Mem55[ds:0x008F:word16] = 0x0000
	ax_56 = 0x0000
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_A1B6:
	Mem63[ds:0x2698:word16] = si_22 >>u 0x06
	cx_106 = DPB(si_22, 0x06, 0) (alias)
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_A17B:
	Mem71[ds:0x008D:word16] = wArg04
	Mem72[ds:0x008B:word16] = wArg02
	dx_111 = wArg02
	ax_56 = 0x0001
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_A1D1:
	cxOut = cx_106
	dxOut = dx_111
	bxOut = bx
	return ax_56
// DataOut:
// DataOut (flags):
// SymbolicIn:

fn0800_A162_exit:
// DataOut:
// DataOut (flags):
// SymbolicIn:



word16 fn0800_A1D6(selector ds, word16 wArg02, word16 wArg04, ptr16 & cxOut, ptr16 & dxOut, ptr16 & bxOut)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  ds:[0..15] Stack +0002:[0..15] Stack +0004:[0..15]
// LiveOut: ax bx cx dx
// Trashed: SCZO ax bx cx dx es Top
// Preserved: bp sp
fn0800_A1D6_entry:
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_A1D6:
	word16 ax_59
	word16 bx_11 = Mem7[ds:0x0087:word16]
	bool C_21
	word16 bx_17
	word16 cx_18
	word16 dx_19
	fn0800_8F2F((byte) wArg02, wArg02, Mem7[ds:0x0089:word16], wArg04, (byte) bx_11, bx_11, out cx_18, out dx_19, out bx_17)
	branch C_21 l0800_A20C
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_A1EC:
	word16 bx_25 = Mem7[ds:0x008F:word16]
	bool C_35
	bool Z_36
	fn0800_8F2F((byte) wArg02, wArg02, Mem7[ds:0x0091:word16], wArg04, (byte) bx_25, bx_25, out cx_18, out dx_19, out bx_17)
	branch Z_36 | C_35 l0800_A20C
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_A1FF:
	branch fn0800_A162(ds, wArg02, wArg04, out cx_18, out dx_19, out bx_17) != 0x0000 l0800_A211
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_A211:
	ax_59 = 0x0000
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_A20C:
	ax_59 = 0xFFFF
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_A213:
	cxOut = cx_18
	dxOut = dx_19
	bxOut = bx_17
	return ax_59
// DataOut:
// DataOut (flags):
// SymbolicIn:

fn0800_A1D6_exit:
// DataOut:
// DataOut (flags):
// SymbolicIn:



word16 fn0800_A215(selector ds, ui32 dwArg02, word16 wArg04, ptr16 & dxOut)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  ds:[0..15] ss:[0..15] Stack +0002:[0..15] Stack +0004:[0..15]
// LiveOut: ax dx
// Trashed: SCZO ax bx cx dx es Top
// Preserved: bp sp
fn0800_A215_entry:
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_A215:
	word16 dx_110
	word16 ax_111
	// Failed to bind call argument.
	// Please report this issue at https://github.com/uxmal/reko
	word16 stackArg0 = <invalid>
	word16 dx_19
	word16 ax_25 = fn0800_8C69(Mem7[ds:0x008D:word16], 0x04, 0x0000, stackArg0, out cl_18, out dx_19) + Mem7[ds:0x008B:word16]
	ui32 dwArg02_128 = SEQ(wArg04, wArg02)
	ui32 dx_ax_124 = SEQ(dx_19 + (ax_25 <u 0x0000), ax_25) + dwArg02_128
	word16 ax_29 = (word16) dx_ax_124
	word16 dx_32 = SLICE(dx_ax_124, word16, 16)
	branch dx_32 < 0x000F l0800_A246
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_A237:
	branch dx_32 > 0x000F l0800_A23E
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_A239:
	branch ax_29 <=u 0xFFFF l0800_A246
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_A246:
	// Failed to bind call argument.
	// Please report this issue at https://github.com/uxmal/reko
	selector stackArg0 = <invalid>
	word16 dx_48
	word16 sp_50
	word16 ax_46 = fn0800_8CCB(Mem7[ds:0x008B:word16], dwArg02_128, Mem7[ds:0x008D:word16], dwArg02_128, stackArg0, out cx_173, out dx_48)
	word16 bx_59 = Mem57[ds:0x0087:word16]
	bool C_68
	fn0800_8F2F((byte) ax_46, ax_46, Mem57[ds:0x0089:word16], dx_48, (byte) bx_59, bx_59, out cx_65, out dx_174, out bx_64)
	branch C_68 l0800_A23E
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_A26C:
	word16 bx_72 = Mem57[ds:0x008F:word16]
	bool C_82
	bool Z_83
	fn0800_8F2F((byte) ax_46, ax_46, Mem57[ds:0x0091:word16], dx_48, (byte) bx_72, bx_72, out cx_175, out dx_176, out bx_177)
	branch Z_83 | C_82 l0800_A23E
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_A27F:
	word16 ax_86 = Mem57[ds:0x008D:word16]
	word16 dx_87 = Mem57[ds:0x008B:word16]
	Mem92[ss:sp_50 - 2:word16] = dx_48
	Mem95[ss:sp_50 - 4:word16] = ax_46
	branch fn0800_A162(ds, Mem95[ss:sp_50 - 4:word16], Mem95[ss:sp_50 - 2:word16], out cx_178, out dx_179, out bx_180) == 0x0000 l0800_A23E
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_A299:
	dx_110 = ax_86
	ax_111 = dx_87
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_A23E:
	dx_110 = 0xFFFF
	ax_111 = 0xFFFF
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_A29F:
	dxOut = dx_110
	return ax_111
// DataOut:
// DataOut (flags):
// SymbolicIn:

fn0800_A215_exit:
// DataOut:
// DataOut (flags):
// SymbolicIn:



word16 fn0800_A2A3(selector ds, word16 wArg02, word16 wArg04, segptr32 ptrArg06, word16 wArg0A, ptr16 & cxOut)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  ds:[0..15] Stack +0004:[0..15] Stack +0006:[0..15]
// LiveOut: ax cx
// Trashed: SCZO ax bx cx dx Top
// Preserved: bp ds sp
fn0800_A2A3_entry:
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_A2A3:
	msdos_unknown_2144()
	word16 dx_33 = (word16) ptrArg06
	word16 ax_23 = DPB(DPB(ax, 0x44, 8), bArg04, 0)
	branch C l0800_A2C6
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_A2C6:
	ax_23 = fn0800_8D2B(ds, ax_23)
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_A2BA:
	branch wArg04 != 0x0000 l0800_A2C4
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_A2C4:
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_A2C0:
	ax_23 = dx_33
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_A2CA:
	cxOut = wArg0A
	return ax_23
// DataOut:
// DataOut (flags):
// SymbolicIn:

fn0800_A2A3_exit:
// DataOut:
// DataOut (flags):
// SymbolicIn:



void fn0800_A2CC(selector ds)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  ds:[0..15]
// LiveOut: sp
// Trashed: sp Top
// Preserved:
fn0800_A2CC_entry:
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_A2CC:
	call Mem0[ds:0x26F4:word16] (retsize: 2;)
		uses: ds:ds,sp:fp,Top:0
	return
// DataOut:
// DataOut (flags):
// SymbolicIn:

fn0800_A2CC_exit:
// DataOut:
// DataOut (flags):
// SymbolicIn:



void fn0800_A2D0(selector ds)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  ds:[0..15]
// LiveOut: sp
// Trashed: sp Top
// Preserved:
fn0800_A2D0_entry:
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_A2D0:
	call Mem0[ds:0x26F6:word16] (retsize: 2;)
		uses: ds:ds,sp:fp,Top:0
	return
// DataOut:
// DataOut (flags):
// SymbolicIn:

fn0800_A2D0_exit:
// DataOut:
// DataOut (flags):
// SymbolicIn:



int8 fn0800_A2D4(selector ds)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  ds:[0..15]
// LiveOut: sp Top
// Trashed: sp Top
// Preserved:
fn0800_A2D4_entry:
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_A2D4:
	int8 Top_7
	call Mem0[ds:0x26F8:word16] (retsize: 2;)
		uses: ds:ds,sp:fp,Top:0
		defs: Top:Top_7
	return Top_7
// DataOut:
// DataOut (flags):
// SymbolicIn:

fn0800_A2D4_exit:
// DataOut:
// DataOut (flags):
// SymbolicIn:



int8 fn0800_A2D8(selector ds)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  ds:[0..15]
// LiveOut: sp Top
// Trashed: sp Top
// Preserved:
fn0800_A2D8_entry:
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_A2D8:
	int8 Top_7
	call Mem0[ds:0x26FA:word16] (retsize: 2;)
		uses: ds:ds,sp:fp,Top:0
		defs: Top:Top_7
	return Top_7
// DataOut:
// DataOut (flags):
// SymbolicIn:

fn0800_A2D8_exit:
// DataOut:
// DataOut (flags):
// SymbolicIn:



void fn0800_A36D(word16 ax, word16 cx, word16 si, word16 di, selector es, selector ds)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  ax:[0..15] cx:[0..15] di:[0..15] ds:[0..15] es:[0..15] si:[0..15]
// LiveOut:
// Trashed: SCZO ax cx si Top
// Preserved: bx di dx sp
fn0800_A36D_entry:
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_A36D:
	byte al_11 = (byte) ax
	branch ax == 0x0000 l0800_A378
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_A371:
	Mem14[es:di:byte] = al_11
	branch al_11 != 0x00 l0800_A378
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_A377:
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_A378:
	branch cx == 0x0000 l0800_A394
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_A37F:
	byte al_40 = Mem38[ds:si:byte]
	branch al_40 == 0x22 l0800_A394
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_A385:
	branch al_40 != 0x5C l0800_A392
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_A38B:
	branch Mem38[ds:si + 0x0001:byte] != 0x22 l0800_A392
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_A390:
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_A392:
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_A394:
	return
// DataOut:
// DataOut (flags):
// SymbolicIn:

fn0800_A36D_exit:
// DataOut:
// DataOut (flags):
// SymbolicIn:



word16 fn0800_A401(byte al, selector ds, selector psegArg02, word16 wArg04, ptr16 & bxOut)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  ax:[0..7] ds:[0..15] Stack +0002:[0..15] Stack +0004:[0..15]
// LiveOut: ax bx
// Trashed: C ax bx es Top
// Preserved: SZO bp sp
fn0800_A401_entry:
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_A401:
	word16 ax_27
	word16 ax_18 = DPB(ax, 0x4A, 8)
	word16 bx_12
	branch msdos_resize_memory_block(psegArg02, wArg04, out bx_12) l0800_A415
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_A415:
	fn0800_8D2B(ds, ax_18)
	ax_27 = bx_12
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_A410:
	ax_27 = 0xFFFF
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_A41B:
	bxOut = bx_12
	return ax_27
// DataOut:
// DataOut (flags):
// SymbolicIn:

fn0800_A401_exit:
// DataOut:
// DataOut (flags):
// SymbolicIn:



word16 fn0800_A471(selector ds, segptr32 ptrArg02, ptr16 & dxOut, ptr16 & bpOut, ptr16 & diOut)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  ds:[0..15] ss:[0..15] Stack +0002:[0..15]
// LiveOut: ax bp di dx sp
// Trashed: SCZDO ax bp bx cx di dx es si sp Top
// Preserved: ss
fn0800_A471_entry:
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_A471:
	word16 sp_151 = fp - 10
	selector es_168 = SLICE(ptrArg02, selector, 16)
	word16 si_169 = (word16) ptrArg02
	word16 ax_118 = 0x0000
	word16 dx_121 = 0x0000
	word16 cx_25 = 0x000A
	word16 bx_172 = DPB(bx, 0x00, 8)
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_A487:
	byte bl_31 = Mem19[es_168:si_169:byte]
	bx_172 = DPB(bx_172, bl_31, 0) (alias)
	word16 bx_115 = DPB(bx_172, bl_31, 0)
	bx_115 = DPB(bx_172, bl_31, 0) (alias)
	si_169 = si_169 + 0x0001
	branch (Mem19[ds:bx_172 + 0x2251:byte] & 0x01) != 0x00 l0800_A487
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_A490:
	word16 bp_124 = 0x0000
	branch bl_31 == 0x2B l0800_A49E
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_A498:
	branch bl_31 != 0x2D l0800_A4A2
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_A49D:
	bp_124 = 0x0001
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_A49E:
	bl_31 = Mem49[es_168:si_169:byte]
	bx_115 = DPB(bx_115, bl_31, 0) (alias)
	si_169 = si_169 + 0x0001
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_A4A2:
	branch bl_31 >u 0x39 l0800_A4D6
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_A4A7:
	byte bl_56 = bl_31 - 0x30
	bx_115 = DPB(bx_115, bl_56, 0) (alias)
	branch bl_56 <u 0x00 l0800_A4D6
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_A4AC:
	int32 dx_ax_66 = cx_25 *u ax_118
	ui32 dl_ax_177 = dx_ax_66 + SEQ(SLICE(dx_ax_66, byte, 24), bx_115)
	byte dl_80 = SLICE(dl_ax_177, byte, 16)
	ax_118 = (word16) dl_ax_177
	dx_121 = DPB(SLICE(dx_ax_66, word16, 16), dl_80, 0) (alias)
	branch dl_80 == 0x00 l0800_A49E
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_A4B4:
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_A4C8:
	byte bl_86 = Mem157[es_168:si_169:byte]
	si_169 = si_169 + 0x0001
	branch bl_86 >u 0x39 l0800_A4D6
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_A4D1:
	bx_115 = DPB(bx_115, bl_86 - 0x30, 0) (alias)
	branch bl_86 >=u 0x30 l0800_A4B6
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_A4B6:
	int32 dx_ax_97 = ax_118 *u 0x000A
	int32 dx_ax_180 = SEQ((word16) (dx_121 *u 0x000A), (word16) dx_ax_97) + SEQ(SLICE(dx_ax_97, word16, 16), bx_115)
	ax_118 = (word16) dx_ax_180
	dx_121 = SLICE(dx_ax_180, word16, 16)
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_A4D6:
	branch bp_124 < 0x0001 l0800_A4E0
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_A4D9:
	ax_118 = -ax_118
	dx_121 = -dx_121 - (ax_118 == 0x0000)
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_A4E0:
	word16 sp_159 = sp_151 + 2
	word16 di_162 = Mem157[ss:sp_159 + 2:word16]
	word16 bp_166 = Mem157[ss:sp_159 + 6:word16]
	dxOut = dx_121
	bpOut = bp_166
	diOut = di_162
	return ax_118
// DataOut:
// DataOut (flags):
// SymbolicIn:

fn0800_A471_exit:
// DataOut:
// DataOut (flags):
// SymbolicIn:



void fn0800_A4F6(selector ds, word16 wArg02, word16 wArg04, word16 wArg06)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  ds:[0..15] Stack +0002:[0..15] Stack +0004:[0..15] Stack +0006:[0..15]
// LiveOut:
// Trashed: SCZO ax cx dx Top
// Preserved: bp sp
fn0800_A4F6_entry:
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_A4F6:
	// Failed to bind call argument.
	// Please report this issue at https://github.com/uxmal/reko
	word16 stackArg8 = <invalid>
	branch fn0800_A53C(ds, SEQ(wArg04, wArg02), 0x0000, stackArg8, out cx_22) != 0xFFFF l0800_A513
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_A513:
	branch (wArg06 & 0x0080) != 0x0000 l0800_A520
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_A51D:
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_A520:
	// Failed to bind call argument.
	// Please report this issue at https://github.com/uxmal/reko
	word16 stackArg8 = <invalid>
	branch fn0800_A53C(ds, SEQ(wArg04, wArg02), 0x0001, stackArg8, out cx_115) == 0xFFFF l0800_A50F
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_A538:
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_A50F:
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_A53A:
	return
// DataOut:
// DataOut (flags):
// SymbolicIn:

fn0800_A4F6_exit:
// DataOut:
// DataOut (flags):
// SymbolicIn:



word16 fn0800_A53C(selector ds, segptr32 ptrArg02, byte bArg06, word16 wArg08, ptr16 & cxOut)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  ds:[0..15] Stack +0002:[0..15] Stack +0006:[8..15]
// LiveOut: ax cx
// Trashed: ax cx dx Top
// Preserved: SCZO bp ds sp
fn0800_A53C_entry:
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_A53C:
	word16 ax_24
	msdos_unknown_2143()
	word16 cx_12 = wArg08
	word16 ax_22 = DPB(DPB(ax, 0x43, 8), bArg06, 0)
	branch C l0800_A553
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_A553:
	ax_24 = fn0800_8D2B(ds, ax_22)
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_A550:
	ax_24 = wArg08
	cx_12 = ax_22
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_A557:
	cxOut = cx_12
	return ax_24
// DataOut:
// DataOut (flags):
// SymbolicIn:

fn0800_A53C_exit:
// DataOut:
// DataOut (flags):
// SymbolicIn:



word16 fn0800_A559(word16 ax, selector ds, word16 wArg02, ptr16 & dxOut)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  ax:[0..15] ds:[0..15] Stack +0002:[0..15]
// LiveOut: ax dx
// Trashed: SCZO ax bx cx dx Top
// Preserved: bp sp
fn0800_A559_entry:
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_A559:
	word16 ax_20
	branch wArg02 <u Mem7[ds:0x24E8:word16] l0800_A56E
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_A56E:
	Mem16[ds:(wArg02 << 0x0001) + 0x24EA:word16] = 0x0000
	ax_20 = fn0800_A57F(ax, ds, wArg02)
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_A565:
	ax_20 = fn0800_8D2B(ds, 0x0006)
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_A57D:
	dxOut = wArg02
	return ax_20
// DataOut:
// DataOut (flags):
// SymbolicIn:

fn0800_A559_exit:
// DataOut:
// DataOut (flags):
// SymbolicIn:



word16 fn0800_A57F(byte al, selector ds, word16 wArg02)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  ax:[0..7] ds:[0..15] Stack +0002:[0..15]
// LiveOut: ax
// Trashed: SCZO ax bx Top
// Preserved: bp sp
fn0800_A57F_entry:
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_A57F:
	word16 ax_17
	word16 ax_14 = DPB(ax, 0x3E, 8)
	branch msdos_close_file(wArg02) l0800_A597
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_A597:
	ax_17 = fn0800_8D2B(ds, ax_14)
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_A58B:
	Mem24[ds:(wArg02 << 0x0001) + 0x24EA:word16] = 0x0000
	ax_17 = 0x0000
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_A59B:
	return ax_17
// DataOut:
// DataOut (flags):
// SymbolicIn:

fn0800_A57F_exit:
// DataOut:
// DataOut (flags):
// SymbolicIn:



word16 fn0800_A59D(selector ds, word16 wArg02, ptr16 & dxOut)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  ds:[0..15] Stack +0002:[0..15]
// LiveOut: ax dx
// Trashed: SCZO ax bx cx dx Top
// Preserved: bp sp
fn0800_A59D_entry:
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_A59D:
	word16 wLoc08_109
	word16 ax_118
	branch wArg02 <u Mem7[ds:0x24E8:word16] l0800_A5B2
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_A5B2:
	branch (Mem7[ds:(wArg02 << 0x0001) + 0x24EA:word16] & 0x0200) == 0x0000 l0800_A5C4
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_A5C4:
	byte dl_23 = (byte) dx
	word16 ax_19 = 0x4400
	dx = DPB(dx, dl_23, 0) (alias)
	branch msdos_ioctl_get_device_info(wArg02, out dx) l0800_A60C
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_A5CE:
	branch (dl_23 & 0x80) != 0x00 l0800_A608
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_A5D3:
	ax_19 = 0x4201
	dx = 0x0000
	branch msdos_set_file_position(wArg02, 0x00000000, 0x01, 0x00004201) l0800_A60C
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_A5DE:
	ax_19 = 0x4202
	dx = 0x4201
	branch msdos_set_file_position(wArg02, 0x00000000, 0x02, 0x00004202) l0800_A60C
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_A5F3:
	ax_19 = 0x4200
	branch msdos_set_file_position(wArg02, 0x00004201, 0x00, 0x42014200) l0800_A60C
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_A60C:
	wLoc08_109 = ax_19
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_A5FA:
	branch false l0800_A608
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_A5FF:
	branch false l0800_A606
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_A601:
	branch false l0800_A608
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_A608:
	ax_118 = 0x0000
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_A606:
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_A5BF:
	ax_118 = 0x0001
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_A5AC:
	wLoc08_109 = 0x0006
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_A60D:
	ax_118 = fn0800_8D2B(ds, wLoc08_109)
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_A610:
	dxOut = dx
	return ax_118
// DataOut:
// DataOut (flags):
// SymbolicIn:

fn0800_A59D_exit:
// DataOut:
// DataOut (flags):
// SymbolicIn:



word16 fn0800_A614(selector ds, segptr32 ptrArg02, word16 wArg04, ptr16 & cxOut, ptr16 & dxOut, ptr16 & bpOut, ptr16 & siOut, ptr16 & diOut, ptr16 & dsOut)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  ds:[0..15] ss:[0..15] Stack +0002:[0..31]
// LiveOut: ax bp cx di ds dx si sp
// Trashed: SCZO ax bp bx cx di ds dx es si sp Top
// Preserved: D
fn0800_A614_entry:
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_A614:
	word16 bp_33 = fp - 2
	word16 sp_122 = fp - 4
	word16 si_106 = 0xFFFF
	branch Mem11[ptrArg02 + 0x0012:word16] == ptrArg02 l0800_A62A
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_A62A:
	word16 bx_21 = (word16) ptrArg02
	branch Mem11[ptrArg02 + 0x0006:word16] == 0x0000 l0800_A65F
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_A634:
	branch Mem11[ptrArg02:word16] >= 0x0000 l0800_A647
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_A63A:
	word16 sp_38
	word16 ax_32 = fn0800_A6B7(ds, bx_21, ptrArg02, out dx, out bx_228, out bp_33, out es_229)
	cx = Mem30[ss:sp_38 + 2:word16]
	sp_122 = sp_38 + 4
	branch ax_32 != 0x0000 l0800_A6B2
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_A647:
	ptr32 es_bx_54 = Mem53[ss:bp_33 + 0x0004:segptr32]
	branch (Mem53[es_bx_54 + 0x0002:word16] & 0x0004) == 0x0000 l0800_A65F
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_A652:
	word16 sp_62 = sp_122 - 2
	Mem63[ss:sp_62:word16] = Mem53[es_bx_54 + 0x000A:word16]
	Mem66[ss:sp_62 - 2:word16] = Mem63[es_bx_54 + 0x0008:word16]
	fn0800_9E75(ds, Mem66[ss:sp_62:word16], out cx_230, out dx, out bx_231, out ds)
	cx = Mem66[ss:sp_62:word16]
	sp_122 = sp_62 + 2
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_A65F:
	ptr32 es_bx_85 = Mem84[ss:bp_33 + 0x0004:segptr32]
	branch Mem84[es_bx_85 + 0x0004:byte] < 0x00 l0800_A675
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_A669:
	word16 ax_91 = (int16) Mem84[es_bx_85 + 0x0004:byte]
	word16 sp_93 = sp_122 - 2
	Mem94[ss:sp_93:word16] = ax_91
	word16 ax_96 = fn0800_A559(ax_91, ds, Mem94[ss:sp_93:word16], out dx)
	cx = Mem94[ss:sp_93:word16]
	si_106 = ax_96
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_A675:
	ptr32 es_bx_110 = Mem109[ss:bp_33 + 0x0004:segptr32]
	Mem113[es_bx_110 + 0x0002:word16] = 0x0000
	Mem114[es_bx_110 + 0x0006:word16] = 0x0000
	Mem115[es_bx_110:word16] = 0x0000
	Mem116[es_bx_110 + 0x0004:byte] = 0xFF
	branch Mem116[es_bx_110 + 0x0010:word16] == 0x0000 l0800_A6B2
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_A695:
	word16 sp_123 = sp_122 - 2
	Mem124[ss:sp_123:word16] = 0x0000
	Mem126[ss:sp_123 - 2:word16] = 0x0000
	Mem128[ss:sp_123 - 4:word16] = 0x0000
	Mem130[ss:sp_123 - 6:word16] = 0x0000
	Mem133[ss:sp_123 - 8:word16] = Mem130[es_bx_110 + 0x0010:word16]
	word16 dx_139
	word16 ax_135 = fn0800_8E6A(ds, Mem133[ss:sp_123 - 8:word16], Mem133[ss:sp_123 - 6:word16], Mem133[ss:sp_123 - 4:word16], Mem133[ss:sp_123 - 2:word16], Mem133[ss:sp_123:word16], out dx_139, out si_106, out di)
	Mem149[ss:sp_123:word16] = dx_139
	Mem151[ss:sp_123 - 2:word16] = ax_135
	dx = fn0800_97F8(ax_135, ds, Mem151[ss:sp_123 - 2:segptr32])
	cx = Mem151[ss:sp_123:word16]
	Mem165[Mem151[ss:bp_33 + 0x0004:segptr32] + 0x0010:word16] = 0x0000
	sp_122 = sp_123 + 2
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_A627:
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_A6B2:
	word16 si_174 = Mem173[ss:sp_122:word16]
	word16 bp_176 = Mem173[ss:sp_122 + 2:word16]
	cxOut = cx
	dxOut = dx
	bpOut = bp_176
	siOut = si_174
	diOut = di
	dsOut = ds
	return si_106
// DataOut:
// DataOut (flags):
// SymbolicIn:

fn0800_A614_exit:
// DataOut:
// DataOut (flags):
// SymbolicIn:



word16 fn0800_A6B7(selector ds, segptr32 ptrArg02, word16 wArg04, ptr16 & dxOut, ptr16 & bxOut, ptr16 & bpOut, ptr16 & esOut)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  ds:[0..15] ss:[0..15] Stack +0002:[0..15] Stack +0004:[0..15]
// LiveOut: ax bp bx dx es sp
// Trashed: SCZO ax bp bx cx dx es sp Top
// Preserved: si
fn0800_A6B7_entry:
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_A6B7:
	word16 bx_107
	word16 ax_103
	branch (wArg02 | wArg04) != 0x0000 l0800_A6C9
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_A6C9:
	segptr32 ptrArg02_136 = SEQ(wArg04, wArg02)
	es = SLICE(ptrArg02_136, selector, 16) (alias)
	bx_107 = (word16) ptrArg02_136 (alias)
	branch Mem11[ptrArg02_136 + 0x0012:word16] == ptrArg02_136 l0800_A6DB
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_A6DB:
	es = SLICE(ptrArg02_136, selector, 16) (alias)
	bx_107 = (word16) ptrArg02_136 (alias)
	branch Mem11[ptrArg02_136:word16] < 0x0000 l0800_A732
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_A732:
	word16 ax_32 = Mem11[ptrArg02_136 + 0x0006:word16] + Mem11[ptrArg02_136:word16]
	Mem36[ptrArg02_136:word16] = Mem11[ptrArg02_136:word16] - (ax_32 + 0x0001)
	word16 ax_40 = Mem39[ptrArg02_136 + 0x000A:word16]
	word16 dx_41 = Mem39[ptrArg02_136 + 0x0008:word16]
	Mem42[ptrArg02_136 + 0x000E:word16] = ax_40
	Mem43[ptrArg02_136 + 0x000C:word16] = dx_41
	branch fn0800_C632(ds, (int16) Mem47[ptrArg02_136 + 0x0004:byte], dx_41, ax_40, ax_32 + 0x0001, out cx_196, out dx, out bx_107, out es) == ax_32 + 0x0001 l0800_A778
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_A765:
	es = SLICE(ptrArg02_136, selector, 16) (alias)
	bx_107 = (word16) ptrArg02_136 (alias)
	branch (Mem51[ptrArg02_136 + 0x0002:word16] & 0x0200) != 0x0000 l0800_A778
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_A770:
	Mem72[ptrArg02_136 + 0x0002:word16] = Mem51[ptrArg02_136 + 0x0002:word16] | 0x0010
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_A6E4:
	branch (Mem11[ptrArg02_136 + 0x0002:word16] & 0x0008) != 0x0000 l0800_A701
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_A6EC:
	dx = ptrArg02_136 + 0x0005
	branch Mem11[ptrArg02_136 + 0x000E:word16] != ptrArg02_136 l0800_A778
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_A6FB:
	branch Mem11[ptrArg02_136 + 0x000C:word16] != ptrArg02_136 + 0x0005 l0800_A778
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_A701:
	segptr32 ptrArg02_141
	Mem91[ptrArg02_141:word16] = 0x0000
	ptrArg02_141 = SEQ(ptrArg02_136, ptrArg02_136) (alias)
	ptrArg02_141 = SEQ(ptrArg02_136, ptrArg02_136) (alias)
	es = SLICE(ptrArg02_141, selector, 16) (alias)
	bx_107 = (word16) ptrArg02_141 (alias)
	dx = ptrArg02_141 + 0x0005
	branch Mem91[ptrArg02_141 + 0x000E:word16] != ptrArg02_141 l0800_A778
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_A718:
	branch Mem91[ptrArg02_141 + 0x000C:word16] != ptrArg02_141 + 0x0005 l0800_A778
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_A71E:
	dx = Mem91[ptrArg02_141 + 0x0008:word16]
	Mem101[ptrArg02_141 + 0x000E:word16] = Mem91[ptrArg02_141 + 0x000A:word16]
	Mem102[ptrArg02_141 + 0x000C:word16] = dx
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_A6D5:
	ax_103 = 0xFFFF
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_A6C3:
	dx = fn0800_A877(ds, out bx_107)
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_A778:
	ax_103 = 0x0000
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_A77A:
	dxOut = dx
	bxOut = bx_107
	bpOut = bp
	esOut = es
	return ax_103
// DataOut:
// DataOut (flags):
// SymbolicIn:

fn0800_A6B7_exit:
// DataOut:
// DataOut (flags):
// SymbolicIn:



word16 fn0800_A77D(selector ds, word16 wArg02, word16 wArg04, word16 wArg06, segptr32 ptrArg08, word16 wArg0A, ptr16 & dxOut)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  ds:[0..15] ss:[0..15] Stack +0002:[0..15] Stack +0004:[0..15] Stack +0006:[0..15] Stack +0008:[0..31]
// LiveOut: ax dx
// Trashed: SCZO ax bx cx dx es Top
// Preserved: bp di si sp
fn0800_A77D_entry:
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_A77D:
	word16 di_16 = wArg06
	word16 cx_135 = 0x0000
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_A7A1:
	word16 v25_84
	segptr32 ptrLoc06_152
	branch cx_135 == 0x000A l0800_A7D8
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_A7A6:
	di_16 = di_16 - 0x0001
	branch di_16 <= 0x0000 l0800_A7D8
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_A7A9:
	word16 ax_48
	word16 v17_36 = Mem32[ptrArg08:word16] - 0x0001
	Mem37[ptrArg08:word16] = v17_36
	branch v17_36 < 0x0000 l0800_A7C6
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_A7C6:
	// Failed to bind call argument.
	// Please report this issue at https://github.com/uxmal/reko
	word16 stackArg4 = <invalid>
	ax_48 = fn0800_AEC2(ds, SEQ(ptrArg08, ptrArg08), stackArg4, out cx_223, out dx_224, out es_52)
	ptrArg08 = ptrArg08_169
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_A7B1:
	word16 ax_62 = Mem37[ptrArg08 + 0x000E:word16]
	word16 si_63 = Mem37[ptrArg08 + 0x000C:word16]
	Mem65[ptrArg08 + 0x000C:word16] = Mem37[ptrArg08 + 0x000C:word16] + 0x0001
	ax_48 = DPB(DPB(ax_62, Mem65[ax_62:si_63:byte], 0), 0x00, 8) (alias)
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_A7D1:
	byte cl_80 = (byte) ax_48
	cx_135 = ax_48
	cx_135 = DPB(ax_48, cl_80, 0) (alias)
	branch ax_48 != 0xFFFF l0800_A798
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_A798:
	Mem83[ptrLoc06_152:byte] = cl_80
	v25_84 = ptrLoc06_152 + 0x0001
	Mem32 = Mem85
	ptrLoc06_152 = ptrLoc06_189
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_A7D8:
	word16 ax_113
	word16 dx_112
	branch cx_135 != 0xFFFF l0800_A7F3
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_A7DD:
	branch ptrLoc06_152 != wArg04 l0800_A7F3
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_A7E8:
	branch ptrLoc06_152 != wArg02 l0800_A7F3
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_A7F3:
	segptr32 ptrLoc06_162
	Mem105[ptrLoc06_162:byte] = 0x00
	ptrLoc06_162 = SEQ(ptrLoc06_152, ptrLoc06_152) (alias)
	ptrLoc06_162 = SEQ(ptrLoc06_152, ptrLoc06_152) (alias)
	ptrLoc06_162 = SEQ(ptrLoc06_152, ptrLoc06_152) (alias)
	ptrArg08_169 = SEQ(ptrArg08, ptrArg08) (alias)
	branch (Mem105[ptrArg08 + 0x0002:word16] & 0x0010) == 0x0000 l0800_A80B
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_A80B:
	dx_112 = wArg04
	ax_113 = wArg02
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_A805:
	dx_112 = 0x0000
	ax_113 = 0x0000
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_A7ED:
	dx_112 = 0x0000
	ax_113 = 0x0000
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_A811:
	dxOut = dx_112
	ptrLoc06_152 = SEQ(wArg04, wArg02) (alias)
	ptrLoc06_189 = DPB(ptrLoc06_152, v25_84, 0) (alias)
	return ax_113
// DataOut:
// DataOut (flags):
// SymbolicIn:

fn0800_A77D_exit:
// DataOut:
// DataOut (flags):
// SymbolicIn:



word16 fn0800_A817(byte al, selector ds, segptr32 ptrArg02, segptr32 ptrArg06, word16 wArg0A, ptr16 & cxOut, ptr16 & dxOut)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  ax:[0..7] ds:[0..15] Stack +0002:[0..15] Stack +0006:[0..15] Stack +000A:[0..15]
// LiveOut: ax cx dx
// Trashed: SCZDOP ax bx cx dx es Top
// Preserved: bp ds sp
fn0800_A817_entry:
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_A817:
	word16 ax_53
	word32 es_bx_12 = msdos_get_disk_transfer_area_address()
	msdos_set_DTA(SLICE(ptrArg06, selector, 16), (word16) ptrArg06)
	word16 bx_17 = (word16) es_bx_12
	word16 cx_32 = msdos_find_first_file(wArg0A, SLICE(ptrArg02, selector, 16), (word16) ptrArg02) | SZDOP
	msdos_set_DTA(SLICE(es_bx_12, selector, 16), bx_17)
	word16 ax_35 = DPB(ax, 0x4E, 8)
	branch fp - 6 l0800_A844
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_A844:
	ax_53 = fn0800_8D2B(ds, ax_35)
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_A840:
	ax_53 = 0x0000
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_A848:
	cxOut = cx_32
	dxOut = bx_17
	return ax_53
// DataOut:
// DataOut (flags):
// SymbolicIn:

fn0800_A817_exit:
// DataOut:
// DataOut (flags):
// SymbolicIn:



word16 fn0800_A84A(byte al, selector ds, segptr32 ptrArg02, ptr16 & cxOut, ptr16 & dxOut)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  ax:[0..7] ds:[0..15] Stack +0002:[0..15]
// LiveOut: ax cx dx
// Trashed: SCZDOP ax bx cx dx es Top
// Preserved: bp ds sp
fn0800_A84A_entry:
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_A84A:
	word16 ax_49
	word32 es_bx_12 = msdos_get_disk_transfer_area_address()
	msdos_set_DTA(SLICE(ptrArg02, selector, 16), (word16) ptrArg02)
	word16 bx_17 = (word16) es_bx_12
	word16 cx_28 = msdos_find_next_file() | SZDOP
	msdos_set_DTA(SLICE(es_bx_12, selector, 16), bx_17)
	word16 ax_31 = DPB(ax, 0x4F, 8)
	branch fp - 6 l0800_A871
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_A871:
	ax_49 = fn0800_8D2B(ds, ax_31)
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_A86D:
	ax_49 = 0x0000
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_A875:
	cxOut = cx_28
	dxOut = bx_17
	return ax_49
// DataOut:
// DataOut (flags):
// SymbolicIn:

fn0800_A84A_exit:
// DataOut:
// DataOut (flags):
// SymbolicIn:



word16 fn0800_A877(selector ds, ptr16 & bxOut)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  ds:[0..15] ss:[0..15]
// LiveOut: bx dx
// Trashed: SCZO ax bx cx di es si Top
// Preserved: bp sp
fn0800_A877_entry:
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_A877:
	word16 sp_13 = fp - 0x000A
	word16 si_20 = Mem15[ds:0x24E8:word16]
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_A8A8:
	segptr32 ptrLoc06_86
	si_20 = si_20 - 0x0001
	branch si_20 != 0x0000 l0800_A88F
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_A88F:
	bx = (word16) ptrLoc06_86 (alias)
	branch (Mem32[ptrLoc06_86 + 0x0002:word16] & 0x0003) == 0x0000 l0800_A8A4
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_A89A:
	word16 sp_41 = sp_13 - 2
	Mem42[ss:sp_41:word16] = ptrLoc06_86
	Mem44[ss:sp_41 - 2:word16] = bx
	// Failed to bind call argument.
	// Please report this issue at https://github.com/uxmal/reko
	// Failed to bind call argument.
	// Please report this issue at https://github.com/uxmal/reko
	segptr32 stackArg2 = <invalid>
	word16 stackArg4 = <invalid>
	word16 sp_45
	fn0800_A6B7(ds, stackArg2, stackArg4, out dx_109, out bx, out bp_110, out es_111)
	sp_13 = sp_45 + 4
	ptrLoc06_86 = ptrLoc06_94
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_A8A4:
	Mem32 = Mem65
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_A8AF:
	bxOut = bx
	ptrLoc06_86 = SEQ(ds, 0x2358) (alias)
	ptrLoc06_94 = SEQ(ptrLoc06_86, ptrLoc06_86) (alias)
	return <invalid>
// DataOut:
// DataOut (flags):
// SymbolicIn:

fn0800_A877_exit:
// DataOut:
// DataOut (flags):
// SymbolicIn:



word16 fn0800_A8B7(selector ds, segptr32 ptrArg02, segptr32 ptrArg06, segptr32 ptrArg0A, ptr16 & clOut)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  ds:[0..15] Stack +0002:[0..31] Stack +0006:[0..31] Stack +000A:[0..31]
// LiveOut: ax cl
// Trashed: SCZO ax bx cl dx es Top
// Preserved: bp di si sp
fn0800_A8B7_entry:
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_A8B7:
	word16 ax_141
	word16 si_107
	word16 dx_32
	word16 di_134 = 0x0000
	byte cl_21 = Mem18[ptrArg0A:byte]
	branch cl_21 != 0x72 l0800_A8D5
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_A8D5:
	branch cl_21 != 0x77 l0800_A8DF
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_A8DF:
	branch cl_21 != 0x61 l0800_A8EF
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_A8EF:
	ax_141 = 0x0000
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_A8E4:
	dx_32 = 0x0902
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_A8DA:
	dx_32 = 0x0302
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_A8E7:
	di_134 = 0x0080
	si_107 = 0x0002
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_A8CD:
	dx_32 = 0x0001
	si_107 = 0x0001
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_A8F3:
	segptr32 ptrArg0A_168
	segptr32 ptrArg0A_163
	ptrArg0A_163 = DPB(ptrArg0A, ptrArg0A + 0x0001, 0) (alias)
	ptrArg0A_163 = DPB(ptrArg0A, ptrArg0A + 0x0001, 0) (alias)
	cl_21 = Mem18[ptrArg0A_163:byte]
	word16 v18_48 = ptrArg0A_163 + 0x0001
	branch cl_21 == 0x2B l0800_A914
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_A901:
	ptrArg0A_168 = DPB(ptrArg0A_163, v18_48, 0) (alias)
	branch Mem49[ptrArg0A_168:byte] != 0x2B l0800_A92B
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_A90A:
	branch cl_21 == 0x74 l0800_A914
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_A90F:
	branch cl_21 != 0x62 l0800_A92B
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_A914:
	branch cl_21 != 0x2B l0800_A91F
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_A919:
	ptrArg0A_168 = DPB(ptrArg0A_163, v18_48, 0) (alias)
	cl_21 = Mem49[ptrArg0A_168:byte]
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_A91F:
	dx_32 = dx_32 & 0xFFFC | 0x0004
	di_134 = 0x0180
	si_107 = 0x0003
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_A92B:
	word16 dx_103
	branch cl_21 != 0x74 l0800_A936
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_A936:
	branch cl_21 != 0x62 l0800_A941
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_A941:
	dx_103 = dx_32 | Mem49[ds:0x2512:word16] & 0xC000
	branch (dx_103 & 0x8000) == 0x0000 l0800_A953
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_A93B:
	dx_103 = dx_32 | 0x8000
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_A950:
	si_107 = si_107 | 0x0040
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_A930:
	dx_103 = dx_32 | 0x4000
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_A953:
	Mem117[ds:0x2354:word16] = 0xC7B5
	Mem131[ptrArg06:word16] = dx_103
	Mem139[ptrArg02:word16] = di_134
	ax_141 = si_107
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_A967:
	clOut = cl_21
	return ax_141
// DataOut:
// DataOut (flags):
// SymbolicIn:

fn0800_A8B7_exit:
// DataOut:
// DataOut (flags):
// SymbolicIn:



word16 fn0800_A96D(word16 si, word16 di, selector ds, word16 wArg02, word16 wArg04, word16 wArg06, word16 wArg08, word16 wArg0A, segptr32 ptrArg0C, word16 wArg0E, ptr16 & cxOut, ptr16 & dxOut, ptr16 & bpOut, ptr16 & siOut, ptr16 & diOut, ptr16 & dsOut)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  di:[0..15] ds:[0..15] si:[0..15] ss:[0..15] Stack +0002:[0..15] Stack +0004:[0..15] Stack +0006:[0..15] Stack +0008:[0..15] Stack +000A:[0..15] Stack +000C:[0..31]
// LiveOut: ax bp cx di ds dx si
// Trashed: SCZO ax bp bx cx di ds dx es si sp Top
// Preserved:
fn0800_A96D_entry:
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_A96D:
	word16 dx_177
	word16 ax_178
	byte cl_30
	word16 ax_28 = fn0800_A8B7(ds, SEQ(ss, fp - 0x0006), SEQ(ss, fp - 0x0004), SEQ(wArg06, wArg04), out cl_30)
	Mem41[ptrArg0C + 0x0002:word16] = ax_28
	word16 bp_155 = fp - 2
	word16 cx_161 = DPB(cx, cl_30, 0)
	branch ax_28 == 0x0000 l0800_A9B9
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_A991:
	branch Mem41[ptrArg0C + 0x0004:byte] >= 0x00 l0800_A9CD
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_A998:
	byte al_77 = (byte) (word16) fn0800_B140(si, di, ds, wArg08, wArg0A, wLoc04 | wArg02, wLoc06, out cx_161, out si, out di)
	Mem80[ptrArg0C + 0x0004:byte] = al_77
	branch al_77 >= 0x00 l0800_A9CD
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_A9CD:
	branch fn0800_8D76((int16) Mem87[ptrArg0C + 0x0004:byte]) == 0x0000 l0800_A9E7
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_A9DE:
	Mem113[ptrArg0C + 0x0002:word16] = Mem95[ptrArg0C + 0x0002:word16] | 0x0200
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_A9E7:
	word16 ax_128
	branch (Mem120[ptrArg0C + 0x0002:word16] & 0x0200) == 0x0000 l0800_A9FB
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_A9FB:
	ax_128 = 0x0000
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_A9F6:
	ax_128 = 0x0001
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_A9FD:
	// Failed to bind call argument.
	// Please report this issue at https://github.com/uxmal/reko
	word16 stackArg4 = <invalid>
	word16 sp_159
	branch fn0800_BA89(ds, SEQ(ptrArg0C, ptrArg0C), stackArg4, 0x0000, 0x0000, ax_128, 0x0200, out cx_161, out bp_155, out si, out di, out ds) == 0x0000 l0800_AA1F
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_AA1F:
	Mem176[Mem150[ss:bp_155 + 0x000E:segptr32] + 0x0010:word16] = 0x0000
	dx_177 = Mem176[ss:bp_155 + 0x0010:word16]
	ax_178 = Mem176[ss:bp_155 + 0x000E:word16]
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_AA12:
	Mem181[ss:sp_159 + 0x000A:word16] = Mem150[ss:bp_155 + 0x0010:word16]
	Mem184[ss:sp_159 + 0x0008:word16] = Mem181[ss:bp_155 + 0x000E:word16]
	// Failed to bind call argument.
	// Please report this issue at https://github.com/uxmal/reko
	word16 stackArg4 = <invalid>
	word16 sp_189
	fn0800_A614(ds, Mem184[ss:sp_159 + 0x0008:segptr32], stackArg4, out cx_303, out dx_304, out bp_155, out si, out di, out ds)
	cx_161 = Mem184[ss:sp_189 + 2:word16]
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_A9B9:
	Mem209[ptrArg0C + 0x0004:byte] = 0xFF
	Mem210[ptrArg0C + 0x0002:word16] = 0x0000
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_A9C7:
	dx_177 = 0x0000
	ax_178 = 0x0000
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_AA2E:
	word16 bp_222 = Mem220[ss:bp_155:word16]
	cxOut = cx_161
	dxOut = dx_177
	bpOut = bp_222
	siOut = si
	diOut = di
	dsOut = ds
	return ax_178
// DataOut:
// DataOut (flags):
// SymbolicIn:

fn0800_A96D_exit:
// DataOut:
// DataOut (flags):
// SymbolicIn:



word16 fn0800_AA34(selector ds, ptr16 & dxOut)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  ds:[0..15]
// LiveOut: ax dx
// Trashed: SCZO ax bx dx es Top
// Preserved: bp sp
fn0800_AA34_entry:
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_AA34:
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_AA42:
	segptr32 ptrLoc06_68
	branch Mem16[ptrLoc06_68 + 0x0004:byte] < 0x00 l0800_AA64
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_AA4C:
	Mem16 = Mem27
	branch ptrLoc06_68 <u (word16) (Mem27[ds:0x24E8:word16] *s 0x0014) + 0x2358 l0800_AA42
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_AA64:
	word16 ax_47
	word16 dx_46
	branch Mem40[ptrLoc06_68 + 0x0004:byte] < 0x00 l0800_AA74
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_AA74:
	dx_46 = ptrLoc06_68
	ax_47 = ptrLoc06_68
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_AA6E:
	dx_46 = 0x0000
	ax_47 = 0x0000
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_AA7A:
	dxOut = dx_46
	ptrLoc06_68 = SEQ(ds, 0x2358) (alias)
	return ax_47
// DataOut:
// DataOut (flags):
// SymbolicIn:

fn0800_AA34_exit:
// DataOut:
// DataOut (flags):
// SymbolicIn:



word16 fn0800_AA7E(word16 si, word16 di, selector ds, word16 wArg02, word16 wArg04, word16 wArg06, word16 wArg08, ptr16 & cxOut, ptr16 & dxOut, ptr16 & bpOut, ptr16 & siOut, ptr16 & diOut, ptr16 & dsOut)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  di:[0..15] ds:[0..15] si:[0..15] ss:[0..15] Stack +0002:[0..15] Stack +0004:[0..15] Stack +0006:[0..15] Stack +0008:[0..15]
// LiveOut: ax bp cx di ds dx si sp
// Trashed: SCZO ax bp bx cx di ds dx es si sp Top
// Preserved:
fn0800_AA7E_entry:
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_AA7E:
	word16 dx_54
	word16 ax_51
	word16 dx_14
	word16 ax_12 = fn0800_AA34(ds, out dx_14)
	word16 bp_56 = fp - 2
	branch (ax_12 | dx_14) != 0x0000 l0800_AA97
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_AA97:
	// Failed to bind call argument.
	// Please report this issue at https://github.com/uxmal/reko
	word16 stackArg14 = <invalid>
	ax_51 = fn0800_A96D(si, di, ds, 0x0000, wArg06, wArg08, wArg02, wArg04, SEQ(dx_14, ax_12), stackArg14, out cx, out dx_54, out bp_56, out si, out di, out ds)
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_AA91:
	dx_54 = 0x0000
	ax_51 = 0x0000
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_AAAF:
	word16 bp_74 = Mem73[ss:bp_56:word16]
	cxOut = cx
	dxOut = dx_54
	bpOut = bp_74
	siOut = si
	diOut = di
	dsOut = ds
	return ax_51
// DataOut:
// DataOut (flags):
// SymbolicIn:

fn0800_AA7E_exit:
// DataOut:
// DataOut (flags):
// SymbolicIn:



word16 fn0800_AAB3(word16 dx, selector ds, segptr32 ptrArg02, word16 wArg04, word16 wArg06, segptr32 ptrArg08, word16 wArg0A, ptr16 & chOut)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  ds:[0..15] dx:[0..15] ss:[0..15] Stack +0002:[0..31] Stack +0006:[0..15] Stack +0008:[0..15] Stack +000A:[0..15]
// LiveOut: ax cx
// Trashed: SCZO ax bx cx dx es Top
// Preserved: bp di si sp
fn0800_AAB3_entry:
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_AAB3:
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_AB91:
	word16 v34_116
	branch wArg06 == 0x0000 l0800_AB9A
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_AB97:
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_AABB:
	word16 ax_31
	word16 v10_20 = wArg06 + 0x0001
	wArg06 = v10_20
	branch Mem21[ptrArg02 + 0x0006:word16] <=u v10_20 l0800_AACF
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_AACF:
	ax_31 = Mem21[ptrArg02 + 0x0006:word16]
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_AACA:
	ax_31 = v10_20
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_AAD6:
	word16 di_34 = ax_31
	ptrArg08_346 = ptrArg08_233
	branch (Mem21[ptrArg02 + 0x0002:word16] & 0x0040) == 0x0000 l0800_AB50
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_AAE3:
	ptrArg02_343 = ptrArg02
	ptrArg08_347 = ptrArg08_233
	branch Mem21[ptrArg02 + 0x0006:word16] == 0x0000 l0800_AB50
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_AAEA:
	ptrArg02_344 = ptrArg02
	ptrArg08_348 = ptrArg08_233
	branch Mem21[ptrArg02 + 0x0006:word16] >=u v10_20 l0800_AB50
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_AAF3:
	ptrArg02_345 = ptrArg02
	ptrArg08_349 = ptrArg08_233
	branch Mem21[ptrArg02:word16] != 0x0000 l0800_AB50
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_AB50:
	word16 v18_54 = wArg06 - 0x0001
	wArg06 = v18_54
	branch v18_54 == 0x0000 l0800_AB8C
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_AB5A:
	di_34 = di_34 - 0x0001
	branch di_34 == 0x0000 l0800_AB8C
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_AB5D:
	word16 ax_102
	word16 v19_68 = Mem55[ptrArg02:word16] - 0x0001
	Mem69[ptrArg02:word16] = v19_68
	branch v19_68 < 0x0000 l0800_AB7A
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_AB7A:
	// Failed to bind call argument.
	// Please report this issue at https://github.com/uxmal/reko
	word16 stackArg4 = <invalid>
	ax_102 = fn0800_AEC2(ds, SEQ(ptrArg02, ptrArg02), stackArg4, out cx_337, out dx_338, out es_84)
	Mem110 = Mem78
	ptrArg02 = ptrArg02_255
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_AB65:
	word16 ax_94 = Mem69[ptrArg02 + 0x000E:word16]
	word16 si_95 = Mem69[ptrArg02 + 0x000C:word16]
	Mem97[ptrArg02 + 0x000C:word16] = Mem69[ptrArg02 + 0x000C:word16] + 0x0001
	ax_102 = DPB(DPB(ax_94, Mem97[ax_94:si_95:byte], 0), 0x00, 8) (alias)
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_AB85:
	byte dl_112 = (byte) ax_102
	dx = ax_102
	dx = DPB(ax_102, dl_112, 0) (alias)
	branch ax_102 != 0xFFFF l0800_AB47
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_AB47:
	Mem115[ptrArg08_346:byte] = dl_112
	v34_116 = ptrArg08_346 + 0x0001
	ptrArg08_233 = ptrArg08_290
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_AB8C:
	wArg0A_341 = ptrArg08_233
	wArg08_351 = ptrArg08_233
	branch dx == 0xFFFF l0800_AB3D
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_AAF9:
	wArg06 = v10_20 - 0x0001
	word16 di_128 = 0x0000
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_AB0E:
	branch Mem133[ptrArg02 + 0x0006:word16] <=u wArg06 l0800_AB00
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_AB00:
	di_128 = di_128 + Mem133[ptrArg02 + 0x0006:word16]
	wArg06 = wArg06 - Mem133[ptrArg02 + 0x0006:word16]
	Mem133 = Mem147
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_AB1A:
	word16 ax_167 = fn0800_8F50(ds, (int16) Mem159[ptrArg02 + 0x0004:byte], SEQ(wArg0A_341, wArg08_350), di_128, out ch_339, out dx_340)
	dx = ax_167
	ptrArg08_233 = wArg08_350 + ax_167
	wArg08_350 = ptrArg08_233
	branch ax_167 == di_128 l0800_AB91
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_AB36:
	wArg06 = wArg06 + (di_128 - ax_167)
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_AB3D:
	Mem196[ptrArg02 + 0x0002:word16] = Mem190[ptrArg02 + 0x0002:word16] | 0x0020
	ptrArg02_255 = SEQ(ptrArg02, ptrArg02) (alias)
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_AB9A:
	chOut = <invalid>
	ptrArg08_233 = SEQ(wArg0A_341, wArg08_350) (alias)
	ptrArg08_233 = SEQ(wArg0A_341, wArg08_350) (alias)
	ptrArg08_233 = SEQ(wArg0A_341, wArg08_350) (alias)
	ptrArg08_233 = SEQ(wArg0A_341, wArg08_350) (alias)
	ptrArg08_290 = DPB(ptrArg08_233, v34_116, 0) (alias)
	return wArg06
// DataOut:
// DataOut (flags):
// SymbolicIn:

fn0800_AAB3_exit:
// DataOut:
// DataOut (flags):
// SymbolicIn:



word16 fn0800_ABA3(selector ds, word16 wArg02, word16 wArg04, word16 wArg06, word16 wArg08, word16 wArg0A, word16 wArg0C, ptr16 & chOut, ptr16 & siOut, ptr16 & diOut)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  ds:[0..15] ss:[0..15] Stack +0002:[0..15] Stack +0004:[0..15] Stack +0006:[0..15] Stack +0008:[0..15] Stack +000A:[0..15] Stack +000C:[0..15]
// LiveOut: ax cx di si
// Trashed: SCZO ax bx cx di dx es si Top
// Preserved: bp sp
fn0800_ABA3_entry:
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_ABA3:
	word16 ax_113
	word16 sp_100 = fp - 0x000A
	branch wArg06 != 0x0000 l0800_ABB6
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_ABB6:
	word16 dx_28
	word16 ax_27 = fn0800_8F18(wArg08, 0x0000, 0x0000, wArg06, out cx_29, out dx_28)
	branch dx_28 >u 0x0001 l0800_ABF2
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_ABCD:
	branch dx_28 <u 0x0001 l0800_ABD3
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_ABCF:
	branch Test(UGE,false) l0800_ABF2
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_ABF2:
	word16 si_46 = wArg08 + 0x0001
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_AC0B:
	word16 dx_98
	si_46 = si_46 - 0x0001
	branch si_46 == 0x0000 l0800_AC26
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_AC12:
	word16 sp_60 = sp_100 - 2
	Mem61[ss:sp_60:word16] = wArg04
	Mem64[ss:sp_60 - 2:word16] = wArg02
	Mem67[ss:sp_60 - 4:word16] = wArg06
	Mem70[ss:sp_60 - 6:word16] = wArg0C
	Mem73[ss:sp_60 - 8:word16] = wArg0A
	// Failed to bind call argument.
	// Please report this issue at https://github.com/uxmal/reko
	word16 stackArg4 = <invalid>
	branch fn0800_AAB3(dx_28, ds, Mem73[ss:sp_60 - 8:segptr32], stackArg4, Mem73[ss:sp_60 - 4:word16], Mem73[ss:sp_60 - 2:word16], Mem73[ss:sp_60:word16], out ch_264) == 0x0000 l0800_ABF8
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_ABF8:
	// Failed to bind call argument.
	// Please report this issue at https://github.com/uxmal/reko
	selector stackArg0 = <invalid>
	wArg04 = dx_98
	wArg02 = fn0800_8CCB(wArg02, 0x0000, wArg04, wArg06, stackArg0, out cx_97, out dx_98)
	Mem57 = Mem107
	dx_28 = dx_98
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_AC26:
	ax_113 = wArg08 - si_46
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_ABD3:
	// Failed to bind call argument.
	// Please report this issue at https://github.com/uxmal/reko
	word16 stackArg4 = <invalid>
	sp_100 = fp - 0x000A
	ax_113 = (uint16) ((uint32) (uint16) (ax_27 - fn0800_AAB3(dx_28, ds, SEQ(wArg0C, wArg0A), stackArg4, ax_27, wArg02, wArg04, out ch_262)) /u wArg06)
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_ABB2:
	ax_113 = 0x0000
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_AC2B:
	word16 di_167 = Mem166[ss:sp_100:word16]
	word16 si_169 = Mem166[ss:sp_100 + 2:word16]
	chOut = <invalid>
	siOut = si_169
	diOut = di_167
	return ax_113
// DataOut:
// DataOut (flags):
// SymbolicIn:

fn0800_ABA3_exit:
// DataOut:
// DataOut (flags):
// SymbolicIn:



word16 fn0800_AC31(segptr32 ptrArg02, ptr16 & cxOut)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  Stack +0002:[0..31]
// LiveOut: ax cx
// Trashed: SCZO ax bx cx dx es Top
// Preserved: bp si sp
fn0800_AC31_entry:
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_AC31:
	word16 cx_108
	word16 si_29
	branch Mem12[ptrArg02:word16] >= 0x0000 l0800_AC4D
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_AC4D:
	int32 dx_ax_22 = (int32) Mem12[ptrArg02:word16]
	word16 dx_24 = SLICE(dx_ax_22, word16, 16)
	word16 ax_26 = ((word16) dx_ax_22 ^ dx_24) - dx_24
	cx_108 = ax_26
	si_29 = ax_26
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_AC41:
	word16 cx_31 = Mem12[ptrArg02 + 0x0006:word16] + Mem12[ptrArg02:word16]
	cx_108 = cx_31 + 0x0001
	si_29 = cx_31 + 0x0001
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_AC5C:
	segptr32 ptrLoc06_115
	segptr32 ptrLoc06_131
	word16 v19_65
	word16 dx_49
	word16 ax_48
	branch (Mem12[ptrArg02 + 0x0002:word16] & 0x0040) != 0x0000 l0800_ACAA
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_AC67:
	ax_48 = Mem12[ptrArg02 + 0x000E:word16]
	dx_49 = Mem12[ptrArg02 + 0x000C:word16]
	ptrLoc06_159 = ptrLoc06_115
	branch Mem51[ptrArg02:word16] >= 0x0000 l0800_ACA3
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_ACA3:
	cx_108 = cx_108 - 0x0001
	branch cx_108 != 0x0000 l0800_AC96
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_AC96:
	v19_65 = ptrLoc06_159 + 0x0001
	ptrLoc06_160 = ptrLoc06_115
	branch Mem66[ptrLoc06_159:byte] != 0x0A l0800_ACA3
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_ACA2:
	si_29 = si_29 + 0x0001
	ptrLoc06_115 = ptrLoc06_130
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_AC7E:
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_AC8D:
	cx_108 = cx_108 - 0x0001
	branch cx_108 != 0x0000 l0800_AC80
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_AC80:
	branch Mem85[ptrLoc06_131:byte] != 0x0A l0800_AC8D
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_AC8C:
	si_29 = si_29 + 0x0001
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_AC94:
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_ACAA:
	cxOut = cx_108
	ptrLoc06_115 = SEQ(ax_48, dx_49) (alias)
	ptrLoc06_115 = DPB(ptrLoc06_115, v19_65, 0) (alias)
	ptrLoc06_130 = DPB(ptrLoc06_115, v19_65, 0) (alias)
	ptrLoc06_131 = SEQ(ax_48, dx_49) (alias)
	return si_29
// DataOut:
// DataOut (flags):
// SymbolicIn:

fn0800_AC31_exit:
// DataOut:
// DataOut (flags):
// SymbolicIn:



word16 fn0800_ACB3(selector ds, word16 wArg02, word16 wArg04, word16 wArg0A, ptr16 & cxOut, ptr16 & dxOut, ptr16 & bxOut, ptr16 & esOut)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  ds:[0..15] ss:[0..15] Stack +0002:[0..15] Stack +0004:[0..15] Stack +000A:[0..15]
// LiveOut: ax bx cx dx es
// Trashed: SCZO ax bx cx dx es Top
// Preserved: bp si sp
fn0800_ACB3_entry:
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_ACB3:
	word16 ax_114
	word16 cx_103 = wArg04
	word16 bp_21
	word16 bx_102
	word16 dx_104
	selector es_147
	branch fn0800_A6B7(ds, wArg02, wArg04, out dx_104, out bx_102, out bp_21, out es_147) == 0x0000 l0800_ACCE
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_ACCE:
	branch wArg0A != 0x0001 l0800_ACEA
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_ACD3:
	ptr32 es_bx_41 = Mem18[ss:bp_21 + 0x0004:segptr32]
	word16 bx_43 = (word16) es_bx_41
	branch Mem18[es_bx_41:word16] <= 0x0000 l0800_ACEA
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_ACDC:
	int32 dx_ax_61 = (int32) fn0800_AC31(SEQ(Mem18[ss:bp_21 + 0x0006:word16], bx_43), out cx_187)
	Mem64[ss:bp_21 + 0x0008:word16] = v19_63
	Mem50[ss:bp_21 + 0x0008:ui32] = SEQ(Mem64[ss:bp_21 + 0x000A:word16], Mem50[ss:bp_21 + 0x0008:word16])
	ui32 v21_v19_130 = Mem50[ss:bp_21 + 0x0008:ui32] - dx_ax_61
	Mem69[ss:bp_21 + 0x000A:word16] = SLICE(v21_v19_130, word16, 16)
	word16 v19_63 = (word16) v21_v19_130
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_ACEA:
	ptr32 es_bx_74 = Mem73[ss:bp_21 + 0x0004:segptr32]
	Mem78[es_bx_74 + 0x0002:word16] = Mem73[es_bx_74 + 0x0002:word16] & 0xFE5F
	Mem81[es_bx_74:word16] = 0x0000
	word16 dx_83 = Mem81[es_bx_74 + 0x0008:word16]
	Mem84[es_bx_74 + 0x000E:word16] = Mem81[es_bx_74 + 0x000A:word16]
	Mem85[es_bx_74 + 0x000C:word16] = dx_83
	es_147 = SLICE(es_bx_74, selector, 16) (alias)
	word16 ax_101 = fn0800_8E29(ds, (int16) Mem95[es_bx_74 + 0x0004:byte], Mem92[ss:bp_21 + 0x0008:word16], Mem89[ss:bp_21 + 0x000A:word16], wArg0A, out cx_103, out dx_104, out bx_102)
	branch dx_104 != 0xFFFF l0800_AD2A
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_AD20:
	branch ax_101 != 0xFFFF l0800_AD2A
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_AD2A:
	ax_114 = 0x0000
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_AD25:
	ax_114 = 0xFFFF
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_ACC9:
	ax_114 = 0xFFFF
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_AD2C:
	cxOut = cx_103
	dxOut = dx_104
	bxOut = bx_102
	esOut = es_147
	return ax_114
// DataOut:
// DataOut (flags):
// SymbolicIn:

fn0800_ACB3_exit:
// DataOut:
// DataOut (flags):
// SymbolicIn:



word16 fn0800_AD2F(selector ds, segptr32 ptrArg02, word16 wArg04, ptr16 & cxOut, ptr16 & dxOut)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  ds:[0..15] Stack +0002:[0..31]
// LiveOut: ax cx dx
// Trashed: SCZO ax bx cx dx es Top
// Preserved: bp sp
fn0800_AD2F_entry:
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_AD2F:
	word16 ax_15 = (int16) Mem7[ptrArg02 + 0x0004:byte]
	word16 dx_22
	word16 ax_19 = fn0800_97B6(ds, ax_15, out dx_22)
	word16 cx_133 = ax_15
	word16 wLoc04_110 = dx_22
	word16 wLoc06_111 = ax_19
	branch dx_22 != 0xFFFF l0800_AD52
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_AD4D:
	branch ax_19 == 0xFFFF l0800_AD7B
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_AD52:
	word16 bx_40 = (word16) ptrArg02
	branch Mem30[ptrArg02:word16] >= 0x0000 l0800_AD6B
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_AD6B:
	ui32 v23_v22_104 = SEQ(dx_22, v22_62) - (int32) fn0800_AC31(SEQ(ptrArg02, ptrArg02), out cx_133)
	word16 v22_62 = (word16) v23_v22_104
	wLoc06_111 = v22_62
	wLoc04_110 = SLICE(v23_v22_104, word16, 16)
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_AD5B:
	ui32 v19_v17_106 = SEQ(dx_22, v17_87) + (int32) fn0800_AC31(SEQ(ptrArg02, bx_40), out cx_133)
	word16 v17_87 = (word16) v19_v17_106
	wLoc06_111 = v17_87
	wLoc04_110 = SLICE(v19_v17_106, word16, 16)
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_AD7B:
	cxOut = cx_133
	dxOut = wLoc04_110
	return wLoc06_111
// DataOut:
// DataOut (flags):
// SymbolicIn:

fn0800_AD2F_exit:
// DataOut:
// DataOut (flags):
// SymbolicIn:



word16 fn0800_AD85(selector ds, word16 wArg02, word16 wArg04, word16 wArg06, word16 wArg08, word16 wArg0A, word16 wArg0C, ptr16 & cxOut, ptr16 & bpOut)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  ds:[0..15] ss:[0..15] Stack +0002:[0..15] Stack +0004:[0..15] Stack +0006:[0..15] Stack +0008:[0..15] Stack +000A:[0..15] Stack +000C:[0..15]
// LiveOut: ax bp cx
// Trashed: SCZO ax bp bx cx di dx es si sp Top
// Preserved:
fn0800_AD85_entry:
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_AD85:
	word16 ax_113
	word16 bp_111 = fp - 2
	word16 sp_13 = fp - 0x000A
	word16 di_17 = wArg06
	branch wArg06 == 0x0000 l0800_AE07
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_AD94:
	word16 dx_28
	word16 ax_27 = fn0800_8F18(wArg08, 0x0000, 0x0000, wArg06, out cx, out dx_28)
	branch dx_28 >u 0x0001 l0800_ADC9
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_ADAB:
	branch dx_28 <u 0x0001 l0800_ADB1
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_ADAD:
	branch Test(UGE,false) l0800_ADC9
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_ADC9:
	branch wArg08 <=u 0x0000 l0800_AE07
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_ADD0:
	word16 sp_53 = sp_13 - 2
	Mem54[ss:sp_53:word16] = Mem50[ss:bp_111 + 0x0006:word16]
	Mem57[ss:sp_53 - 2:word16] = Mem54[ss:bp_111 + 0x0004:word16]
	Mem60[ss:sp_53 - 4:word16] = di_17
	Mem63[ss:sp_53 - 6:word16] = Mem60[ss:bp_111 + 0x000E:word16]
	Mem66[ss:sp_53 - 8:word16] = Mem63[ss:bp_111 + 0x000C:word16]
	// Failed to bind call argument.
	// Please report this issue at https://github.com/uxmal/reko
	word16 stackArg4 = <invalid>
	word16 si_74
	word16 ax_68 = fn0800_B4BE(ds, Mem66[ss:sp_53 - 8:segptr32], stackArg4, Mem66[ss:sp_53 - 4:word16], Mem66[ss:sp_53 - 2:word16], Mem66[ss:sp_53:word16], out cx, out bp_111, out si_74, out di_17)
	branch false l0800_ADEA
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_ADE6:
	branch ax_68 == di_17 l0800_ADEE
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_ADEE:
	// Failed to bind call argument.
	// Please report this issue at https://github.com/uxmal/reko
	selector stackArg0 = <invalid>
	word16 dx_97
	word16 ax_95 = fn0800_8CCB(Mem66[ss:bp_111 + 0x0004:word16], 0x0000, Mem66[ss:bp_111 + 0x0006:word16], di_17, stackArg0, out cx, out dx_97)
	Mem105[ss:bp_111 + 0x0006:word16] = dx_97
	Mem106[ss:bp_111 + 0x0004:word16] = ax_95
	branch si_74 + 0x0001 <u Mem106[ss:bp_111 + 0x000A:word16] l0800_ADD0
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_AE07:
	ax_113 = Mem112[ss:bp_111 + 0x000A:word16]
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_ADEA:
	ax_113 = si_74
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_ADB1:
	// Failed to bind call argument.
	// Please report this issue at https://github.com/uxmal/reko
	word16 stackArg4 = <invalid>
	word16 di_140
	ax_113 = (uint16) ((uint32) (uint16) fn0800_B4BE(ds, SEQ(wArg0C, wArg0A), stackArg4, ax_27, wArg02, wArg04, out cx, out bp_111, out si_257, out di_140) /u di_140)
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_AE0A:
	word16 bp_171 = Mem163[ss:bp_111:word16]
	cxOut = cx
	bpOut = bp_171
	return ax_113
// DataOut:
// DataOut (flags):
// SymbolicIn:

fn0800_AD85_exit:
// DataOut:
// DataOut (flags):
// SymbolicIn:



word16 fn0800_AE10(selector ds)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  ds:[0..15] ss:[0..15]
// LiveOut: bp sp
// Trashed: SCZO ax bp bx cx dx es si sp Top
// Preserved:
fn0800_AE10_entry:
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_AE10:
	word16 bp_26 = fp - 2
	word16 sp_11 = fp - 0x0008
	word16 si_14 = 0x0014
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_AE40:
	si_14 = si_14 - 0x0001
	branch si_14 != 0x0000 l0800_AE24
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_AE24:
	ptr32 es_bx_28 = Mem27[ss:bp_26 - 0x0004:segptr32]
	word16 bx_30 = (word16) es_bx_28
	branch (Mem27[es_bx_28 + 0x0002:word16] & 0x0300) != 0x0300 l0800_AE3C
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_AE33:
	word16 sp_37 = sp_11 - 2
	Mem38[ss:sp_37:word16] = Mem27[ss:bp_26 - 0x0002:word16]
	Mem40[ss:sp_37 - 2:word16] = bx_30
	word16 sp_48
	fn0800_A6B7(ds, Mem40[ss:sp_37 - 2:word16], Mem40[ss:sp_37:word16], out dx_90, out bx_91, out bp_26, out es_92)
	sp_11 = sp_48 + 4
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_AE3C:
	Mem61[ss:bp_26 - 0x0004:word16] = Mem59[ss:bp_26 - 0x0004:word16] + 0x0014
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_AE47:
	return Mem27[ss:bp_26:word16]
// DataOut:
// DataOut (flags):
// SymbolicIn:

fn0800_AE10_exit:
// DataOut:
// DataOut (flags):
// SymbolicIn:



word16 fn0800_AE4C(selector ds, segptr32 ptrArg02, ptr16 & dxOut, ptr16 & bpOut, ptr16 & esOut)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  ds:[0..15] ss:[0..15] Stack +0002:[0..31]
// LiveOut: ax bp dx es sp
// Trashed: SCZDO ax bp bx cx dx es si sp Top
// Preserved:
fn0800_AE4C_entry:
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_AE4C:
	word16 sp_23 = fp - 2
	word16 bp_17 = fp - 2
	branch (Mem7[ptrArg02 + 0x0002:word16] & 0x0200) == 0x0000 l0800_AE5D
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_AE5A:
	bp_17 = fn0800_AE10(ds)
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_AE5D:
	word16 ax_105
	ptr32 es_bx_31 = Mem7[ss:bp_17 + 0x0004:segptr32]
	word16 sp_36 = sp_23 - 2
	Mem37[ss:sp_36:word16] = Mem7[es_bx_31 + 0x0006:word16]
	word16 ax_38 = Mem37[es_bx_31 + 0x000A:word16]
	word16 dx_39 = Mem37[es_bx_31 + 0x0008:word16]
	Mem40[es_bx_31 + 0x000E:word16] = ax_38
	Mem41[es_bx_31 + 0x000C:word16] = dx_39
	Mem43[ss:sp_36 - 2:word16] = ax_38
	Mem45[ss:sp_36 - 4:word16] = dx_39
	Mem49[ss:sp_36 - 6:word16] = (int16) Mem45[es_bx_31 + 0x0004:byte]
	word16 dx_54
	word16 ax_51 = fn0800_B97F(ds, Mem49[ss:sp_36 - 6:word16], Mem49[ss:sp_36 - 4:word16], Mem49[ss:sp_36 - 2:word16], Mem49[ss:sp_36:word16], out dx_54)
	ptr32 es_bx_62 = Mem49[ss:bp_17 + 0x0004:segptr32]
	Mem65[es_bx_62:word16] = ax_51
	selector es_116 = SLICE(es_bx_62, selector, 16)
	branch ax_51 <= 0x0000 l0800_AE95
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_AE95:
	ptr32 es_bx_69 = Mem65[ss:bp_17 + 0x0004:segptr32]
	es_116 = SLICE(es_bx_69, selector, 16) (alias)
	branch Mem65[es_bx_69:word16] != 0x0000 l0800_AEAE
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_AEAE:
	ptr32 es_bx_74 = Mem65[ss:bp_17 + 0x0004:segptr32]
	Mem77[es_bx_74:word16] = 0x0000
	Mem79[es_bx_74 + 0x0002:word16] = Mem77[es_bx_74 + 0x0002:word16] | 0x0010
	es_116 = SLICE(es_bx_74, selector, 16) (alias)
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_AE9E:
	Mem87[es_bx_69 + 0x0002:word16] = Mem65[es_bx_69 + 0x0002:word16] & 0xFE7F | 0x0020
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_AEBB:
	ax_105 = 0xFFFF
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_AE8C:
	Mem90[es_bx_62 + 0x0002:word16] = Mem65[es_bx_62 + 0x0002:word16] & 0xFFDF
	ax_105 = 0x0000
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_AEBE:
	word16 bp_101 = Mem99[ss:sp_36 + 0x0002:word16]
	dxOut = dx_54
	bpOut = bp_101
	esOut = es_116
	return ax_105
// DataOut:
// DataOut (flags):
// SymbolicIn:

fn0800_AE4C_exit:
// DataOut:
// DataOut (flags):
// SymbolicIn:



word16 fn0800_AEC2(selector ds, segptr32 ptrArg02, word16 wArg04, ptr16 & cxOut, ptr16 & dxOut, ptr16 & esOut)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  ds:[0..15] ss:[0..15] Stack +0002:[0..31]
// LiveOut: ax cx dx es
// Trashed: SCZO ax bx cx dx es si Top
// Preserved: bp sp
fn0800_AEC2_entry:
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_AEC2:
	Mem13[ptrArg02:word16] = Mem7[ptrArg02:word16] + 0x0001
	word16 dx_25
	selector es_26
	word16 ax_21 = fn0800_AED6(ds, (word16) ptrArg02, ptrArg02, out dx_25, out es_26)
	cxOut = ptrArg02
	dxOut = dx_25
	esOut = es_26
	return ax_21
// DataOut:
// DataOut (flags):
// SymbolicIn:

fn0800_AEC2_exit:
// DataOut:
// DataOut (flags):
// SymbolicIn:



word16 fn0800_AED6(selector ds, segptr32 ptrArg02, word16 wArg04, ptr16 & dxOut, ptr16 & esOut)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  ds:[0..15] ss:[0..15] Stack +0002:[0..15] Stack +0004:[0..15]
// LiveOut: ax dx es
// Trashed: SCZO ax bp bx cx dx es si sp Top
// Preserved: D
fn0800_AED6_entry:
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_AED6:
	word16 ax_196
	word16 bp_147 = fp - 2
	word16 sp_58 = fp - 4
	branch (wArg02 | wArg04) != 0x0000 l0800_AEE8
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_AEE8:
	word16 ax_222
	segptr32 ptrArg02_217 = SEQ(wArg04, wArg02)
	branch Mem11[ptrArg02_217:word16] <= 0x0000 l0800_AF0B
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_AF0B:
	branch Mem11[ptrArg02_217:word16] < 0x0000 l0800_AF7F
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_AF14:
	branch (Mem11[ptrArg02_217 + 0x0002:word16] & 0x0110) != 0x0000 l0800_AF7F
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_AF1C:
	branch (Mem11[ptrArg02_217 + 0x0002:word16] & 0x0001) == 0x0000 l0800_AF7F
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_AF24:
	Mem37[ptrArg02_217 + 0x0002:word16] = Mem11[ptrArg02_217 + 0x0002:word16] | 0x0080
	word16 bx_35 = (word16) ptrArg02_217
	branch Mem37[ptrArg02_217 + 0x0006:word16] == 0x0000 l0800_AF43
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_AF43:
	branch (Mem43[Mem43[ss:bp_147 + 0x0004:segptr32] + 0x0002:word16] & 0x0200) == 0x0000 l0800_AF51
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_AF4E:
	bp_147 = fn0800_AE10(ds)
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_AF51:
	word16 sp_66 = sp_58 - 2
	Mem68[ss:sp_66:word16] = 0x0001
	Mem71[ss:sp_66 - 2:word16] = ds
	Mem74[ss:sp_66 - 4:word16] = 0x4EE4
	Mem82[ss:sp_66 - 6:word16] = (int16) Mem74[Mem74[ss:bp_147 + 0x0004:segptr32] + 0x0004:byte]
	word16 ax_83 = fn0800_B97F(ds, Mem82[ss:sp_66 - 6:word16], Mem82[ss:sp_66 - 4:word16], Mem82[ss:sp_66 - 2:word16], Mem82[ss:sp_66:word16], out dx)
	sp_58 = sp_66 + 0x0002
	branch ax_83 != 0x0000 l0800_AF9E
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_AF9E:
	branch Mem82[ds:0x4EE4:byte] != 0x0D l0800_AFB0
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_AFA5:
	branch (Mem82[Mem82[ss:bp_147 + 0x0004:segptr32] + 0x0002:word16] & 0x0040) == 0x0000 l0800_AF43
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_AFB0:
	ptr32 es_bx_109 = Mem82[ss:bp_147 + 0x0004:segptr32]
	Mem113[es_bx_109 + 0x0002:word16] = Mem82[es_bx_109 + 0x0002:word16] & 0xFFDF
	es = SLICE(es_bx_109, selector, 16) (alias)
	ax_222 = DPB(ax_83, Mem113[ds:0x4EE4:byte], 0) (alias)
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_AF6D:
	Mem124[ss:sp_66:word16] = (int16) Mem82[Mem82[ss:bp_147 + 0x0004:segptr32] + 0x0004:byte]
	branch fn0800_A59D(ds, Mem124[ss:sp_66:word16], out dx) == 0x0001 l0800_AF8A
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_AF8A:
	ptr32 es_bx_137 = Mem124[ss:bp_147 + 0x0004:segptr32]
	Mem145[es_bx_137 + 0x0002:word16] = Mem124[es_bx_137 + 0x0002:word16] & 0xFE7F | 0x0020
	es = SLICE(es_bx_137, selector, 16) (alias)
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_AF7F:
	ptr32 es_bx_149 = Mem148[ss:bp_147 + 0x0004:segptr32]
	Mem153[es_bx_149 + 0x0002:word16] = Mem148[es_bx_149 + 0x0002:word16] | 0x0010
	es = SLICE(es_bx_149, selector, 16) (alias)
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_AF34:
	branch fn0800_AE4C(ds, SEQ(ptrArg02_217, bx_35), out dx, out bp_147, out es) == 0x0000 l0800_AEF1
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_AF3F:
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_AEF1:
	ptr32 es_bx_183 = Mem182[ss:bp_147 + 0x0004:segptr32]
	Mem187[es_bx_183:word16] = Mem182[es_bx_183:word16] - 0x0001
	word16 ax_188 = Mem187[es_bx_183 + 0x000E:word16]
	word16 si_189 = Mem187[es_bx_183 + 0x000C:word16]
	Mem191[es_bx_183 + 0x000C:word16] = Mem187[es_bx_183 + 0x000C:word16] + 0x0001
	es = ax_188
	ax_222 = DPB(ax_188, Mem191[ax_188:si_189:byte], 0) (alias)
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_AFBB:
	ax_196 = DPB(ax_222, 0x00, 8) (alias)
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_AEE2:
	ax_196 = 0xFFFF
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_AFBD:
	dxOut = dx
	esOut = es
	return ax_196
// DataOut:
// DataOut (flags):
// SymbolicIn:

fn0800_AED6_exit:
// DataOut:
// DataOut (flags):
// SymbolicIn:



word16 fn0800_AFCB(selector ds, segptr32 ptrArg02, ptr16 & dxOut)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  ds:[0..15] Stack +0002:[0..31]
// LiveOut: ax dx
// Trashed: SCZDO ax bx cx dx es Top
// Preserved: bp di ds si sp
fn0800_AFCB_entry:
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_AFCB:
	word16 dx_129
	word16 ax_127
	selector es_17 = SLICE(ptrArg02, selector, 16)
	word16 di_19 = (word16) ptrArg02
	branch (es_17 | di_19) == 0x0000 l0800_AFFC
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_AFDC:
	byte ah_25 = Mem15[ptrArg02:byte]
	word16 cx_26 = 0xFFFF
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_AFE5:
	branch cx_26 == 0x0000 l0800_AFE7
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_AFE5_1:
	di_19 = di_257 + 0x0001
	cx_26 = cx_26 - 0x0001
	di_257 = di_19
	branch Mem15[es_17:di_257:byte] == 0x00 l0800_AFE5
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_AFE7:
	word16 cx_38 = ~cx_26
	branch cx_38 == 0x0001 l0800_AFFC
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_AFEC:
	ptr32 es_di_46 = Mem15[ds:0x26AA:segptr32]
	word16 di_151 = (word16) es_di_46
	branch (SLICE(es_di_46, selector, 16) | di_151) != 0x0000 l0800_B009
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_B009:
	ptr32 es_di_63 = Mem62[ds:di_151:segptr32]
	selector es_64 = SLICE(es_di_63, selector, 16)
	word16 di_124 = (word16) es_di_63
	word16 cx_79 = cx_38 - 0x0001
	branch (es_64 | di_124) == 0x0000 l0800_AFFC
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_B012:
	byte al_71 = Mem62[es_di_63:byte]
	branch al_71 == 0x00 l0800_AFFC
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_B019:
	branch ah_25 != al_71 l0800_B002
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_B01D:
	bool Z_113 = SLICE(cond(Mem62[es_64:cx_38 - 0x0001 + di_124:byte] - 0x3D), bool, 2)
	branch Mem62[es_64:cx_38 - 0x0001 + di_124:byte] != 0x3D l0800_B002
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_B025:
	selector ds_159 = SLICE(ptrArg02, selector, 16)
	word16 si_160 = (word16) ptrArg02
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_B029:
	branch cx_79 == 0x0000 l0800_B02B
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_B029_1:
	Z_113 = SLICE(cond(Mem86[ds_159:si_258:byte] - Mem86[es_64:di_124:byte]), bool, 2) (alias)
	si_160 = si_258 + 0x0001
	di_124 = di_124 + 0x0001
	cx_79 = cx_79 - 0x0001
	si_258 = si_160
	branch Mem86[ds_159:si_258:byte] != Mem86[es_64:di_124:byte] l0800_B029
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_B02B:
	branch Z_113 l0800_B002
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_B002:
	di_151 = (word16) es_di_46 (alias)
	Mem62 = Mem121
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_B030:
	ax_127 = di_124 + 0x0001
	dx_129 = es_64
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_AFFC:
	dx_129 = 0x0000
	ax_127 = 0x0000
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_B035:
	dxOut = dx_129
	return ax_127
// DataOut:
// DataOut (flags):
// SymbolicIn:

fn0800_AFCB_exit:
// DataOut:
// DataOut (flags):
// SymbolicIn:



word16 fn0800_B03B(segptr32 ptrArg02, word16 wArg04, segptr32 ptrArg06, word16 wArg0A)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  Stack +0002:[0..15] Stack +0006:[0..15] Stack +000A:[0..15]
// LiveOut: cx
// Trashed: SCZDO ax cx dx es Top
// Preserved: bp di ds si sp
fn0800_B03B_entry:
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_B03B:
	selector es_60 = SLICE(ptrArg02, selector, 16)
	word16 di_30 = (word16) ptrArg02
	selector ds_58 = SLICE(ptrArg06, selector, 16)
	word16 si_26 = (word16) ptrArg06
	word16 cx_20 = wArg0A >>u 0x0001
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_B04E:
	branch cx_20 == 0x0000 l0800_B050
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_B050:
	branch wArg0A >>u 0x0001 >=u 0x0000 l0800_B053
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_B052:
	Mem31[es_60:di_30:byte] = Mem27[ds_58:si_26:byte]
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_B053:
	return cx_20
// DataOut:
// DataOut (flags):
// SymbolicIn:

fn0800_B03B_exit:
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_B04E_1:
	Mem53[es_60:di_30:word16] = Mem27[ds_58:si_26:word16]
	si_26 = si_26 + 0x0002
	di_30 = di_30 + 0x0002
	cx_20 = cx_20 - 0x0001
// DataOut:
// DataOut (flags):
// SymbolicIn:



void fn0800_B05F(segptr32 ptrArg02, word16 wArg06, byte bArg08)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  Stack +0002:[0..31] Stack +0006:[0..15] Stack +0008:[0..15]
// LiveOut:
// Trashed: SCZDO ax cx es Top
// Preserved: bp di sp
fn0800_B05F_entry:
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_B05F:
	word16 ax_59 = DPB(DPB(ax, bArg08, 0), bArg08, 8)
	word16 di_17 = (word16) ptrArg02
	selector es_21 = SLICE(ptrArg02, selector, 16)
	word16 cx_13 = wArg06
	ax_59 = DPB(ax_59, bArg08, 0) (alias)
	word16 ax_46 = DPB(ax_59, bArg08, 0)
	branch (di_17 & 0x0001) == 0x0000 l0800_B079
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_B075:
	branch wArg06 == 0x0000 l0800_B080
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_B077:
	Mem22[ptrArg02:byte] = bArg08
	di_17 = di_17 + 0x0001
	cx_13 = wArg06 - 0x0001
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_B079:
	word16 cx_27 = cx_13 >>u 0x0001
	cx_29 = cx_27
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_B07B:
	word16 cx_29
	ax_46 = DPB(ax_46, bArg08, 0) (alias)
	branch cx_29 == 0x0000 l0800_B07D
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_B07D:
	branch cx_27 >=u 0x0000 l0800_B080
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_B07F:
	Mem34[es_21:di_17:byte] = bArg08
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_B080:
	return
// DataOut:
// DataOut (flags):
// SymbolicIn:

fn0800_B05F_exit:
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_B07B_1:
	Mem48[es_21:di_17:word16] = ax_46
	di_17 = di_17 + 0x0002
	cx_29 = cx_29 - 0x0001
// DataOut:
// DataOut (flags):
// SymbolicIn:



void fn0800_B083(byte ah, word16 wArg02, word16 wArg04, byte bArg06, word16 wArg08)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  ax:[8..15] Stack +0002:[0..15] Stack +0004:[0..15] Stack +0006:[8..15] Stack +0008:[0..15]
// LiveOut:
// Trashed: SCZDO ax cx dx es Top
// Preserved: bp sp
fn0800_B083_entry:
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_B083:
	fn0800_B05F(SEQ(wArg04, wArg02), wArg08, DPB(ax, bArg06, 0))
	return
// DataOut:
// DataOut (flags):
// SymbolicIn:

fn0800_B083_exit:
// DataOut:
// DataOut (flags):
// SymbolicIn:



word16 fn0800_B0A1(segptr32 ptrArg02, word16 wArg04, segptr32 ptrArg06, word16 wArg08, word16 wArg0A)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  Stack +0002:[0..15] Stack +0004:[0..15] Stack +0006:[0..15] Stack +0008:[0..15] Stack +000A:[0..15]
// LiveOut: cx
// Trashed: SCZDO ax bx cx dx es Top
// Preserved: bp di ds si sp
fn0800_B0A1_entry:
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_B0A1:
	word16 ax_33
	bool C_29
	fn0800_8F2F((byte) wArg02, wArg02, wArg08, wArg04, (byte) wArg06, wArg06, out cx_196, out dx_197, out bx_198)
	branch C_29 l0800_B0BE
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_B0BE:
	ax_33 = 0x0000
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_B0B8:
	ax_33 = 0x0001
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_B0C1:
	segptr32 ptrArg06_137
	segptr32 ptrArg02_134
	ptrArg02_134 = SEQ(wArg04, wArg02) (alias)
	ptrArg02_134 = SEQ(wArg04, wArg02) (alias)
	word16 si_49 = (word16) ptrArg02_134
	selector ds_63 = SLICE(ptrArg02_134, selector, 16)
	ptrArg06_137 = SEQ(wArg08, wArg06) (alias)
	ptrArg06_137 = SEQ(wArg08, wArg06) (alias)
	word16 di_52 = (word16) ptrArg06_137
	selector es_68 = SLICE(ptrArg06_137, selector, 16)
	word16 cx_119 = wArg0A
	branch ax_33 == 0x0000 l0800_B0D4
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_B0CE:
	si_49 = si_49 + wArg0A - 0x0001
	di_52 = di_52 + wArg0A - 0x0001
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_B0D4:
	branch (di_52 & 0x0001) == 0x0000 l0800_B0DE
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_B0DA:
	branch wArg0A == 0x0000 l0800_B0ED
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_B0DC:
	Mem69[es_68:di_52:byte] = Mem17[ds_63:si_49:byte]
	si_49 = si_49 + 0x0001
	di_52 = di_52 + 0x0001
	cx_119 = wArg0A - 0x0001
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_B0DE:
	word16 si_117 = si_49 - ax_33
	word16 di_118 = di_52 - ax_33
	word16 cx_81 = cx_119 >>u 0x0001
	cx_119 = cx_81
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_B0E4:
	branch cx_119 == 0x0000 l0800_B0E6
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_B0E6:
	branch cx_81 >=u 0x0000 l0800_B0ED
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_B0E8:
	Mem95[es_68:di_118 + ax_33:byte] = Mem92[ds_63:si_117 + ax_33:byte]
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_B0ED:
	return cx_119
// DataOut:
// DataOut (flags):
// SymbolicIn:

fn0800_B0A1_exit:
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_B0E4_1:
	Mem116[es_68:di_118:word16] = Mem92[ds_63:si_117:word16]
	si_117 = si_117 + 0x0002
	di_118 = di_118 + 0x0002
	cx_119 = cx_119 - 0x0001
// DataOut:
// DataOut (flags):
// SymbolicIn:



word16 fn0800_B0F3(word16 wArg02, word16 wArg04, word16 wArg06, word16 wArg08, word16 wArg0A)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  Stack +0002:[0..15] Stack +0004:[0..15] Stack +0006:[0..15] Stack +0008:[0..15] Stack +000A:[0..15]
// LiveOut: cx
// Trashed: SCZDO ax bx cx dx es Top
// Preserved: bp sp
fn0800_B0F3_entry:
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_B0F3:
	return fn0800_B0A1(wArg06, wArg08, wArg02, wArg04, wArg0A)
// DataOut:
// DataOut (flags):
// SymbolicIn:

fn0800_B0F3_exit:
// DataOut:
// DataOut (flags):
// SymbolicIn:



word16 fn0800_B113(selector ds, word16 wArg02, segptr32 ptrArg04, ptr16 & cxOut)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  ds:[0..15] Stack +0002:[0..15] Stack +0004:[0..15]
// LiveOut: ax cx
// Trashed: C ax cx dx Top
// Preserved: SZO bp ds sp
fn0800_B113_entry:
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_B113:
	word16 ax_17
	branch msdos_create_truncate_file(wArg02, SLICE(ptrArg04, selector, 16), (word16) ptrArg04, out ax_17) l0800_B126
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_B126:
	ax_17 = fn0800_8D2B(ds, ax_17)
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_B124:
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_B12A:
	cxOut = wArg02
	return ax_17
// DataOut:
// DataOut (flags):
// SymbolicIn:

fn0800_B113_exit:
// DataOut:
// DataOut (flags):
// SymbolicIn:



word16 fn0800_B12E(selector ds, word16 wArg02)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  ds:[0..15] Stack +0002:[0..15]
// LiveOut: cx
// Trashed: SCZO ax bx cx dx Top
// Preserved: bp sp
fn0800_B12E_entry:
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_B12E:
	word16 ax_16
	msdos_write_file(wArg02, 0x0000, SEQ(ds, 0x0000), out ax_16)
	return 0x0000
// DataOut:
// DataOut (flags):
// SymbolicIn:

fn0800_B12E_exit:
// DataOut:
// DataOut (flags):
// SymbolicIn:



byte fn0800_B140(word16 si, word16 di, selector ds, word16 wArg02, word16 wArg04, word16 wArg06, word16 wArg08, ptr16 & cxOut, ptr16 & siOut, ptr16 & diOut)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  di:[0..15] ds:[0..15] si:[0..15] Stack +0002:[0..15] Stack +0004:[0..15] Stack +0006:[0..15] Stack +0008:[0..15]
// LiveOut: ax cx di si
// Trashed: SCZO ax bx cx di dx si Top
// Preserved: bp sp
fn0800_B140_entry:
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_B140:
	word16 si_16 = wArg06
	branch (wArg06 & 0xC000) != 0x0000 l0800_B15C
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_B154:
	si_16 = wArg06 | Mem15[ds:0x2512:word16] & 0xC000
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_B15C:
	word16 ax_324
	word16 di_114
	segptr32 ptrLoc0A_395
	// Failed to bind call argument.
	// Please report this issue at https://github.com/uxmal/reko
	word16 stackArg8 = <invalid>
	word16 cx_110
	word16 ax_42 = fn0800_A53C(ds, SEQ(wArg04, wArg02), 0x0000, stackArg8, out cx_110)
	word16 wLoc04_368 = ax_42
	branch (si_16 & 0x0100) == 0x0000 l0800_B1F2
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_B174:
	word16 di_52 = wArg08 & Mem46[ds:0x2514:word16]
	branch (di_52 & 0x0180) != 0x0000 l0800_B186
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_B17F:
	fn0800_8D2B(ds, 0x0001)
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_B186:
	word16 wLoc0C_371
	branch ax_42 != 0xFFFF l0800_B1AF
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_B1AF:
	branch (si_16 & 0x0400) == 0x0000 l0800_B1F2
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_B1B5:
	wLoc0C_371 = 0x0050
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_B18C:
	branch Mem68[ds:0x2516:word16] == 0x0002 l0800_B19D
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_B19D:
	word16 ax_86
	branch (di_52 & 0x0080) == 0x0000 l0800_B1A7
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_B1A7:
	ax_86 = 0x0001
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_B1A3:
	ax_86 = 0x0000
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_B1AA:
	wLoc04_368 = ax_86
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_B1BB:
	branch (si_16 & 0x00F0) == 0x0000 l0800_B1DD
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_B1DD:
	word16 ax_109 = fn0800_B113(ds, ax_86, SEQ(wArg04, wArg02), out cx_110)
	di_114 = ax_109
	branch ax_109 >= 0x0000 l0800_B265
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_B1EF:
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_B1C1:
	word16 ax_130 = fn0800_B113(ds, 0x0000, SEQ(wArg04, wArg02), out cx_110)
	di_114 = ax_130
	branch ax_130 >= 0x0000 l0800_B1D6
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_B1D6:
	fn0800_A57F(ax_130, ds, ax_130)
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_B1F2:
	word16 ax_163 = fn0800_B2A0(ds, SEQ(wArg04, wArg02), si_16, out cx_110)
	di_114 = ax_163
	branch ax_163 < 0x0000 l0800_B265
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_B205:
	// Failed to bind call argument.
	// Please report this issue at https://github.com/uxmal/reko
	// Failed to bind call argument.
	// Please report this issue at https://github.com/uxmal/reko
	word16 stackArg2 = <invalid>
	word16 stackArg10 = <invalid>
	ptrLoc0A_395 = SEQ(si, di) (alias)
	ptrLoc0A_395 = SEQ(si, di) (alias)
	word16 ax_184 = fn0800_A2A3(ds, stackArg2, 0x0000, ptrLoc0A_395, stackArg10, out cx_509)
	cx_110 = 0x0000
	branch (ax_184 & 0x0080) == 0x0000 l0800_B237
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_B237:
	branch (si_16 & 0x0200) == 0x0000 l0800_B241
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_B23D:
	cx_110 = fn0800_B12E(ds, ax_163)
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_B216:
	si_16 = si_16 | 0x2000
	branch (si_16 & 0x8000) == 0x0000 l0800_B241
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_B220:
	// Failed to bind call argument.
	// Please report this issue at https://github.com/uxmal/reko
	// Failed to bind call argument.
	// Please report this issue at https://github.com/uxmal/reko
	word16 stackArg2 = <invalid>
	word16 stackArg10 = <invalid>
	fn0800_A2A3(ds, stackArg2, 0x0001, (uint32) (uint16) (ax_184 & 0x00FF | 0x0020), stackArg10, out cx_110)
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_B241:
	branch (wLoc04_368 & 0x0001) == 0x0000 l0800_B265
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_B248:
	branch (si_16 & 0x0100) == 0x0000 l0800_B265
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_B24E:
	branch (si_16 & 0x00F0) == 0x0000 l0800_B265
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_B254:
	// Failed to bind call argument.
	// Please report this issue at https://github.com/uxmal/reko
	word16 stackArg8 = <invalid>
	fn0800_A53C(ds, SEQ(wArg04, wArg02), 0x0001, stackArg8, out cx_110)
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_B265:
	branch di_114 < 0x0000 l0800_B298
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_B269:
	word16 ax_283
	branch (si_16 & 0x0300) == 0x0000 l0800_B274
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_B274:
	ax_283 = 0x0000
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_B26F:
	ax_283 = 0x1000
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_B276:
	word16 ax_303
	word16 dx_291 = si_16 & 0xF8FF | ax_283
	branch (wLoc04_368 & 0x0001) == 0x0000 l0800_B28A
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_B28A:
	ax_303 = 0x0100
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_B286:
	ax_303 = 0x0000
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_B28D:
	Mem322[ds:(di_114 << 0x0001) + 0x24EA:word16] = dx_291 | ax_303
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_B1D3:
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_B298:
	ax_324 = di_114
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_B193:
	wLoc0C_371 = Mem68[ds:0x2516:word16]
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_B197:
	ax_324 = fn0800_8D2B(ds, wLoc0C_371)
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_B29A:
	cxOut = cx_110
	siOut = ptrLoc0A_395
	diOut = ptrLoc0A_395
	return (byte) ax_324
// DataOut:
// DataOut (flags):
// SymbolicIn:

fn0800_B140_exit:
// DataOut:
// DataOut (flags):
// SymbolicIn:



word16 fn0800_B2A0(selector ds, segptr32 ptrArg02, word16 wArg06, ptr16 & cxOut)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  ds:[0..15] Stack +0002:[0..31] Stack +0006:[0..15]
// LiveOut: ax cx
// Trashed: SCZO ax bx cx dx Top
// Preserved: bp ds sp
fn0800_B2A0_entry:
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_B2A0:
	byte al_10 = 0x01
	branch (wArg06 & 0x0002) != 0x0000 l0800_B2BB
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_B2B1:
	al_10 = 0x02
	branch (wArg06 & 0x0004) != 0x0000 l0800_B2BB
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_B2B9:
	al_10 = 0x00
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_B2BB:
	word16 ax_42
	word16 cx_82 = DPB(wArg06, wArg06 & 0xF0, 0)
	word16 ax_36
	branch msdos_open_file(ptrArg02, al_10 | wArg06 & 0xF0, out ax_36) l0800_B2E7
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_B2E7:
	ax_42 = fn0800_8D2B(ds, ax_36)
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_B2CD:
	Mem55[ds:(ax_36 << 0x0001) + 0x24EA:word16] = wArg06 & 0xB8FF | 0x8000
	ax_42 = ax_36
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_B2EB:
	cxOut = cx_82
	return ax_42
// DataOut:
// DataOut (flags):
// SymbolicIn:

fn0800_B2A0_exit:
// DataOut:
// DataOut (flags):
// SymbolicIn:



word16 fn0800_B2EF(word16 cx, word16 dx, word16 bx, selector ds, word16 wArg02, word16 wArg04, ptr16 & siOut, ptr16 & diOut)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  bx:[0..15] cx:[0..15] ds:[0..15] dx:[0..15] ss:[0..15] Stack +0002:[0..15] Stack +0004:[0..15]
// LiveOut: ax di si
// Trashed: SCZDO ax di si Top
// Preserved: bp sp
fn0800_B2EF_entry:
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_B2EF:
	// Failed to bind call argument.
	// Please report this issue at https://github.com/uxmal/reko
	selector stackArg6 = <invalid>
	word16 di_31
	word16 si_32
	word16 ax_30 = fn0800_9828(cx, dx, bx, ds, fp + 0x0006, SEQ(wArg04, wArg02), stackArg6, out si_32, out di_31)
	siOut = si_32
	diOut = di_31
	return ax_30
// DataOut:
// DataOut (flags):
// SymbolicIn:

fn0800_B2EF_exit:
// DataOut:
// DataOut (flags):
// SymbolicIn:



word16 fn0800_B30A(selector ds, byte bArg02, segptr32 ptrArg04, word16 wArg06, ptr16 & cxOut, ptr16 & dxOut, ptr16 & bxOut, ptr16 & esOut)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  ds:[0..15] ss:[0..15] Stack +0002:[0..7] Stack +0004:[0..31]
// LiveOut: ax bx cx dx es
// Trashed: SCZO ax bx cx dx es si Top
// Preserved: bp sp
fn0800_B30A_entry:
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_B30A:
	Mem13[ptrArg04:word16] = Mem7[ptrArg04:word16] - 0x0001
	// Failed to bind call argument.
	// Please report this issue at https://github.com/uxmal/reko
	word16 stackArg6 = <invalid>
	word16 bx_27
	selector es_28
	word16 cx_30
	word16 dx_31
	word16 ax_25 = fn0800_B324(ds, (int16) bArg02, SEQ(ptrArg04, (word16) ptrArg04), stackArg6, out cx_30, out dx_31, out bx_27, out bp_57, out es_28)
	cxOut = cx_30
	dxOut = dx_31
	bxOut = bx_27
	esOut = es_28
	return ax_25
// DataOut:
// DataOut (flags):
// SymbolicIn:

fn0800_B30A_exit:
// DataOut:
// DataOut (flags):
// SymbolicIn:



word16 fn0800_B324(selector ds, byte bArg02, segptr32 ptrArg04, word16 wArg06, ptr16 & cxOut, ptr16 & dxOut, ptr16 & bxOut, ptr16 & bpOut, ptr16 & esOut)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  ds:[0..15] ss:[0..15] Stack +0002:[0..7] Stack +0004:[0..31]
// LiveOut: ax bp bx cx dx es sp
// Trashed: SCZO ax bp bx cx dx es si sp Top
// Preserved:
fn0800_B324_entry:
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_B324:
	selector es_121
	word16 ax_127
	word16 ax_286
	Mem14[ds:0x4EE6:byte] = bArg02
	word16 bp_155 = fp - 2
	word16 sp_135 = fp - 4
	word16 bx_128 = (word16) ptrArg04
	branch Mem14[ptrArg04:word16] >= 0xFFFF l0800_B389
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_B389:
	branch (Mem14[ptrArg04 + 0x0002:word16] & 0x0090) != 0x0000 l0800_B39C
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_B394:
	branch (Mem14[ptrArg04 + 0x0002:word16] & 0x0002) != 0x0000 l0800_B3A6
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_B3A6:
	Mem33[ptrArg04 + 0x0002:word16] = Mem14[ptrArg04 + 0x0002:word16] | 0x0100
	word16 bx_31 = (word16) ptrArg04
	branch Mem33[ptrArg04 + 0x0006:word16] == 0x0000 l0800_B421
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_B421:
	selector es_38 = SLICE(ptrArg04, selector, 16)
	branch (Mem33[ds:((int16) Mem33[ptrArg04 + 0x0004:byte] << 0x0001) + 0x24EA:word16] & 0x0800) == 0x0000 l0800_B44C
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_B435:
	fn0800_8E29(ds, (int16) Mem56[es_38:ptrArg04 + 0x0004:byte], 0x0000, 0x0000, 0x0002, out cx_413, out dx_414, out bx_415)
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_B44C:
	branch Mem73[ds:0x4EE6:byte] != 0x0A l0800_B478
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_B453:
	branch (Mem73[ptrArg04 + 0x0002:word16] & 0x0040) != 0x0000 l0800_B478
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_B45E:
	ax_127 = fn0800_C779(ds, (int16) Mem92[ptrArg04 + 0x0004:byte], SEQ(ds, 0x26AE), 0x0001, out cx, out dx, out bx_416)
	branch ax_127 != 0x0001 l0800_B495
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_B478:
	es_121 = SLICE(ptrArg04, selector, 16) (alias)
	ax_127 = fn0800_C779(ds, (int16) Mem118[ptrArg04 + 0x0004:byte], SEQ(ds, 0x4EE6), 0x0001, out cx, out dx, out bx_128)
	sp_135 = fp - 0x0004
	branch ax_127 == 0x0001 l0800_B4A3
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_B495:
	sp_135 = fp - 0x0004
	es_121 = SLICE(ptrArg04, selector, 16) (alias)
	bx_128 = (word16) ptrArg04 (alias)
	branch (Mem140[ptrArg04 + 0x0002:word16] & 0x0200) != 0x0000 l0800_B4A3
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_B4A0:
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_B3B6:
	branch Mem33[ptrArg04:word16] == 0x0000 l0800_B3C9
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_B3BC:
	word16 sp_160
	word16 ax_154 = fn0800_A6B7(ds, bx_31, ptrArg04, out dx, out bx_128, out bp_155, out es_121)
	cx = Mem153[ss:sp_160 + 2:word16]
	sp_135 = sp_160 + 4
	branch ax_154 != 0x0000 l0800_B380
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_B3C9:
	ptr32 es_bx_176 = Mem175[ss:bp_155 + 0x0006:segptr32]
	Mem181[es_bx_176:word16] = -Mem175[es_bx_176 + 0x0006:word16]
	ax_127 = Mem181[es_bx_176 + 0x000E:word16]
	word16 si_183 = Mem181[es_bx_176 + 0x000C:word16]
	Mem185[es_bx_176 + 0x000C:word16] = Mem181[es_bx_176 + 0x000C:word16] + 0x0001
	byte dl_187 = Mem185[ds:0x4EE6:byte]
	Mem189[ax_127:si_183:byte] = dl_187
	bx_128 = (word16) es_bx_176 (alias)
	dx = DPB(dx, dl_187, 0) (alias)
	es_121 = Mem189[ss:bp_155 + 0x0008:selector]
	branch (Mem189[es_121:bx_128 + 0x0002:word16] & 0x0008) != 0x0000 l0800_B3F8
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_B3F8:
	branch Mem189[ds:0x4EE6:byte] == 0x0A l0800_B409
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_B3FF:
	branch Mem189[ds:0x4EE6:byte] == 0x0D l0800_B409
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_B409:
	word16 sp_204 = sp_135 - 2
	Mem205[ss:sp_204:word16] = Mem189[ss:bp_155 + 0x0008:word16]
	Mem208[ss:sp_204 - 2:word16] = Mem205[ss:bp_155 + 0x0006:word16]
	word16 sp_216
	word16 ax_210 = fn0800_A6B7(ds, Mem208[ss:sp_204 - 2:word16], Mem208[ss:sp_204:word16], out dx, out bx_128, out bp_412, out es_121)
	cx = Mem208[ss:sp_216 + 2:word16]
	sp_135 = sp_216 + 4
	ax_127 = ax_210
	branch ax_210 != 0x0000 l0800_B41B
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_B41B:
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_B418:
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_B406:
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_B3F5:
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_B39C:
	Mem236[ptrArg04 + 0x0002:word16] = Mem231[ptrArg04 + 0x0002:word16] | 0x0010
	sp_135 = fp - 4
	es_121 = SLICE(ptrArg04, selector, 16) (alias)
	bx_128 = (word16) ptrArg04 (alias)
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_B337:
	Mem240[ptrArg04:word16] = Mem14[ptrArg04:word16] + 0x0001
	ax_127 = Mem240[ptrArg04 + 0x000E:word16]
	word16 si_242 = Mem240[ptrArg04 + 0x000C:word16]
	Mem244[ptrArg04 + 0x000C:word16] = Mem240[ptrArg04 + 0x000C:word16] + 0x0001
	byte dl_245 = Mem244[ds:0x4EE6:byte]
	Mem247[ax_127:si_242:byte] = dl_245
	dx = DPB(dx, dl_245, 0) (alias)
	es_121 = ptrArg04
	branch (Mem247[ptrArg04:bx_128 + 0x0002:word16] & 0x0008) != 0x0000 l0800_B35D
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_B35D:
	branch Mem247[ds:0x4EE6:byte] == 0x0A l0800_B36E
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_B364:
	branch Mem247[ds:0x4EE6:byte] == 0x0D l0800_B36E
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_B36E:
	word16 sp_273
	word16 ax_267 = fn0800_A6B7(ds, ptrArg04, ptrArg04, out dx, out bx_128, out bp_417, out es_121)
	cx = Mem265[ss:sp_273 + 2:word16]
	sp_135 = sp_273 + 4
	ax_127 = ax_267
	branch ax_267 != 0x0000 l0800_B380
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_B380:
	ax_286 = 0xFFFF
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_B37D:
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_B36B:
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_B35A:
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_B4A3:
	ax_286 = DPB(DPB(ax_127, Mem289[ds:0x4EE6:byte], 0), 0x00, 8) (alias)
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_B4A8:
	word16 bp_304 = Mem300[ss:sp_135 + 2:word16]
	cxOut = cx
	dxOut = dx
	bxOut = bx_128
	bpOut = bp_304
	esOut = es_121
	return ax_286
// DataOut:
// DataOut (flags):
// SymbolicIn:

fn0800_B324_exit:
// DataOut:
// DataOut (flags):
// SymbolicIn:



word16 fn0800_B4BE(selector ds, segptr32 ptrArg02, word16 wArg04, word16 wArg06, segptr32 ptrArg08, word16 wArg0A, ptr16 & cxOut, ptr16 & bpOut, ptr16 & siOut, ptr16 & diOut)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  ds:[0..15] ss:[0..15] Stack +0002:[0..31] Stack +0006:[0..15] Stack +0008:[0..15] Stack +000A:[0..15]
// LiveOut: ax bp cx di si sp
// Trashed: SCZO ax bp bx cx di dx es si sp Top
// Preserved: D
fn0800_B4BE_entry:
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_B4BE:
	segptr32 ptrArg08_478
	word16 ax_419
	word16 v22_361
	word16 v43_334
	word16 bp_121 = fp - 2
	word16 sp_103 = fp - 0x0008
	word16 di_16 = wArg06
	branch (Mem17[ptrArg02 + 0x0002:word16] & 0x0008) == 0x0000 l0800_B504
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_B504:
	word16 bx_26 = (word16) ptrArg02
	branch (Mem17[ptrArg02 + 0x0002:word16] & 0x0040) != 0x0000 l0800_B512
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_B512:
	branch Mem17[ptrArg02 + 0x0006:word16] != 0x0000 l0800_B51C
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_B51C:
	branch Mem17[ptrArg02 + 0x0006:word16] >=u wArg06 l0800_B583
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_B583:
	branch Mem17[ptrArg02:word16] + wArg06 < 0x0000 l0800_B5B1
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_B58D:
	branch Mem17[ptrArg02:word16] != 0x0000 l0800_B59F
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_B59F:
	word16 sp_56
	word16 ax_50 = fn0800_A6B7(ds, ptrArg02, ptrArg02, out dx_585, out bx_586, out bp_121, out es_587)
	cx = Mem48[ss:sp_56 + 2:word16]
	sp_103 = sp_56 + 4
	branch ax_50 == 0x0000 l0800_B5B1
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_B5AE:
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_B593:
	Mem72[ptrArg02:word16] = 0xFFFF - Mem17[ptrArg02 + 0x0006:word16]
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_B5B1:
	word16 sp_74 = sp_103 - 2
	Mem77[ss:sp_74:word16] = wArg06
	Mem81[ss:sp_74 - 2:word16] = Mem77[ss:bp_121 + 0x000C:word16]
	Mem84[ss:sp_74 - 4:word16] = Mem81[ss:bp_121 + 0x000A:word16]
	ptr32 es_bx_85 = Mem84[ss:bp_121 + 0x0004:segptr32]
	Mem90[ss:sp_74 - 6:word16] = Mem84[es_bx_85 + 0x000E:word16]
	Mem93[ss:sp_74 - 8:word16] = Mem90[es_bx_85 + 0x000C:word16]
	// Failed to bind call argument.
	// Please report this issue at https://github.com/uxmal/reko
	word16 stackArg4 = <invalid>
	cx = fn0800_B03B(Mem93[ss:sp_74 - 8:segptr32], stackArg4, Mem93[ss:sp_74 - 4:segptr32], Mem93[ss:sp_74:word16])
	ptr32 es_bx_104 = Mem93[ss:bp_121 + 0x0004:segptr32]
	Mem109[es_bx_104:word16] = Mem93[es_bx_104:word16] + wArg06
	Mem111[es_bx_104 + 0x000C:word16] = Mem109[es_bx_104 + 0x000C:word16] + wArg06
	sp_103 = sp_74 + 0x0002
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_B522:
	branch Mem17[ptrArg02:word16] == 0x0000 l0800_B535
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_B528:
	word16 sp_126
	word16 ax_120 = fn0800_A6B7(ds, bx_26, ptrArg02, out dx_576, out bx_577, out bp_121, out es_578)
	cx = Mem119[ss:sp_126 + 2:word16]
	sp_103 = sp_126 + 4
	branch ax_120 != 0x0000 l0800_B4F5
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_B535:
	ptr32 es_bx_142 = Mem141[ss:bp_121 + 0x0004:segptr32]
	selector es_143 = SLICE(es_bx_142, selector, 16)
	branch (Mem141[ds:((int16) Mem141[es_bx_142 + 0x0004:byte] << 0x0001) + 0x24EA:word16] & 0x0800) == 0x0000 l0800_B560
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_B549:
	word16 sp_155 = sp_103 - 2
	Mem156[ss:sp_155:word16] = 0x0002
	Mem161[ss:sp_155 - 2:word16] = 0x0000
	Mem163[ss:sp_155 - 4:word16] = 0x0000
	Mem168[ss:sp_155 - 6:word16] = (int16) Mem163[es_143:Mem163[ss:bp_121 + 0x0004:word16] + 0x0004:byte]
	fn0800_8E29(ds, Mem168[ss:sp_155 - 6:word16], Mem168[ss:sp_155 - 4:word16], Mem168[ss:sp_155 - 2:word16], Mem168[ss:sp_155:byte], out cx_581, out dx_582, out bx_583)
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_B560:
	word16 sp_180 = sp_103 - 2
	Mem184[ss:sp_180:word16] = wArg06
	Mem188[ss:sp_180 - 2:word16] = Mem184[ss:bp_121 + 0x000C:word16]
	Mem191[ss:sp_180 - 4:word16] = Mem188[ss:bp_121 + 0x000A:word16]
	Mem198[ss:sp_180 - 6:word16] = (int16) Mem191[Mem191[ss:bp_121 + 0x0004:segptr32] + 0x0004:byte]
	sp_103 = sp_180 + 0x0002
	branch fn0800_C779(ds, Mem198[ss:sp_180 - 6:word16], Mem198[ss:sp_180 - 4:segptr32], Mem198[ss:sp_180:word16], out cx, out dx_579, out bx_580) <u wArg06 l0800_B57D
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_B57D:
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_B57A:
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_B519:
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_B5DB:
	selector es_212 = SLICE(ptrArg02, selector, 16)
	branch (Mem17[ds:((int16) Mem17[ptrArg02 + 0x0004:byte] << 0x0001) + 0x24EA:word16] & 0x0800) == 0x0000 l0800_B606
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_B5EF:
	fn0800_8E29(ds, (int16) Mem230[es_212:ptrArg02 + 0x0004:byte], 0x0000, 0x0000, 0x0002, out cx_573, out dx_574, out bx_575)
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_B606:
	sp_103 = fp - 0x0008
	branch fn0800_C779(ds, (int16) Mem257[ptrArg02 + 0x0004:byte], SEQ(wArg0A, wArg08), wArg06, out cx, out dx_571, out bx_572) >=u wArg06 l0800_B69D
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_B620:
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_B50F:
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_B625:
	branch Mem17[ptrArg02 + 0x0006:word16] == 0x0000 l0800_B680
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_B680:
	sp_103 = fp - 0x0008
	branch fn0800_C632(ds, (int16) Mem289[ptrArg02 + 0x0004:byte], wArg08, wArg0A, wArg06, out cx, out dx_299, out bx_298, out es_301) >=u wArg06 l0800_B69D
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_B69A:
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_B62F:
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_B677:
	sp_103 = fp - 0x0008
	di_16 = di_16 - 0x0001
	branch di_16 != 0x0000 l0800_B631
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_B631:
	word16 ax_344
	word16 v19_322 = Mem318[ptrArg02:word16] + 0x0001
	Mem323[ptrArg02:word16] = v19_322
	branch v19_322 >= 0x0000 l0800_B659
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_B659:
	// Failed to bind call argument.
	// Please report this issue at https://github.com/uxmal/reko
	word16 stackArg6 = <invalid>
	v43_334 = ptrArg08_589 + 0x0001
	ax_344 = fn0800_B30A(ds, DPB(di_16, Mem335[ptrArg08_589:byte], 0), SEQ(ptrArg02, ptrArg02), stackArg6, out cx, out dx_347, out bx_345, out es_348)
	Mem435 = Mem342
	ptrArg02 = ptrArg02_484
	ptrArg08_478 = ptrArg08_488
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_B639:
	word16 ax_356 = Mem323[ptrArg02 + 0x000E:word16]
	word16 si_357 = Mem323[ptrArg02 + 0x000C:word16]
	Mem359[ptrArg02 + 0x000C:word16] = Mem323[ptrArg02 + 0x000C:word16] + 0x0001
	byte dl_366 = Mem362[ptrArg08_589:byte]
	Mem368[ax_356:si_357:byte] = dl_366
	v22_361 = ptrArg08_589 + 0x0001
	ax_344 = DPB(DPB(ax_356, dl_366, 0), 0x00, 8) (alias)
	ptrArg08_478 = ptrArg08_487
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_B66F:
	sp_103 = fp - 0x0008
	ptrArg08_589 = ptrArg08_478
	branch ax_344 != 0xFFFF l0800_B677
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_B674:
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_B67E:
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_B4D7:
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_B4FA:
	di_16 = di_16 - 0x0001
	branch di_16 != 0x0000 l0800_B4D9
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_B4D9:
	word16 sp_388 = sp_103 - 2
	Mem389[ss:sp_388:word16] = Mem385[ss:bp_121 + 0x0006:word16]
	Mem392[ss:sp_388 - 2:word16] = Mem389[ss:bp_121 + 0x0004:word16]
	ptr32 es_bx_393 = Mem392[ss:bp_121 + 0x000A:segptr32]
	Mem395[ss:bp_121 + 0x000A:word16] = Mem392[ss:bp_121 + 0x000A:word16] + 0x0001
	Mem402[ss:sp_388 - 4:word16] = (int16) Mem395[es_bx_393:byte]
	// Failed to bind call argument.
	// Please report this issue at https://github.com/uxmal/reko
	word16 stackArg6 = <invalid>
	sp_103 = sp_408 + 0x0006
	word16 sp_408
	branch fn0800_B324(ds, Mem402[ss:sp_388 - 4:byte], Mem402[ss:sp_388 - 2:segptr32], stackArg6, out cx, out dx_410, out bx_406, out bp_121, out es_407) != 0xFFFF l0800_B4FA
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_B4F5:
	ax_419 = 0x0000
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_B501:
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_B69D:
	ax_419 = Mem424[ss:bp_121 - 0x0002:word16]
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_B6A0:
	word16 di_436 = Mem433[ss:sp_103:word16]
	word16 si_438 = Mem433[ss:sp_103 + 2:word16]
	word16 bp_443 = Mem433[ss:bp_121:word16]
	cxOut = cx
	bpOut = bp_443
	siOut = si_438
	diOut = di_436
	ptrArg02_484 = SEQ(ptrArg02, ptrArg02) (alias)
	ptrArg08_478 = SEQ(wArg0A, wArg08) (alias)
	ptrArg08_487 = DPB(ptrArg08_478, v22_361, 0) (alias)
	ptrArg08_488 = DPB(ptrArg08_478, v43_334, 0) (alias)
	return ax_419
// DataOut:
// DataOut (flags):
// SymbolicIn:

fn0800_B4BE_exit:
// DataOut:
// DataOut (flags):
// SymbolicIn:



word16 fn0800_B6A8(selector ds, segptr32 ptrArg02, segptr32 ptrArg06, ptr16 & cxOut, ptr16 & esOut)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  ds:[0..15] Stack +0002:[0..31] Stack +0006:[0..31]
// LiveOut: ax cx es
// Trashed: SCZDO ax cx es Top
// Preserved: bp di ds si sp
fn0800_B6A8_entry:
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_B6A8:
	word16 ax_39
	word16 cx_19 = Mem17[ds:0x4EE8:word16]
	selector es_25 = SLICE(ptrArg02, selector, 16)
	word16 di_26 = (word16) ptrArg02
	selector ds_28 = SLICE(ptrArg06, selector, 16)
	word16 si_29 = (word16) ptrArg06
	word16 cx_22 = cx_19 >>u 0x0001
	branch cx_19 >>u 0x0001 >=u 0x0000 l0800_B6C6
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_B6BD:
	byte al_27 = Mem17[ptrArg02:byte]
	Mem31[ptrArg02:byte] = Mem17[ptrArg06:byte]
	Mem34[ptrArg06:byte] = al_27
	ax_39 = DPB(ax, al_27, 0) (alias)
	si_29 = si_29 + 0x0001
	di_26 = di_26 + 0x0001
	branch cx_19 >>u 0x0001 == 0x0000 l0800_B6CF
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_B6C6:
	ax_39 = Mem38[es_25:di_26:word16]
	Mem43[es_25:di_26:word16] = Mem38[ds_28:si_29:word16]
	si_29 = si_29 + 0x0002
	Mem46[ds_28:si_29 - 0x0002:word16] = ax_39
	di_26 = di_26 + 0x0002
	cx_22 = cx_22 - 0x0001
	branch cx_22 != 0x0000 l0800_B6C6
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_B6CF:
	cxOut = cx_22
	esOut = es_25
	return ax_39
// DataOut:
// DataOut (flags):
// SymbolicIn:

fn0800_B6A8_exit:
// DataOut:
// DataOut (flags):
// SymbolicIn:



word16 fn0800_B6D6(word16 cx, word16 bx, word16 bp, word16 si, word16 di, selector es, selector ds, word16 wArg02, ptr16 & bxOut, ptr16 & TopOut)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  bp:[0..15] bx:[0..15] cx:[0..15] di:[0..15] ds:[0..15] es:[0..15] si:[0..15] ss:[0..15] Stack +0002:[0..15]
// LiveOut: bx cx Top
// Trashed: SCZDO ax bp bx cx di dx es si sp Top
// Preserved:
fn0800_B6D6_entry:
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_B6D6:
	int8 Top_116 = 0
	word16 bp_27 = fp - 2
	word16 sp_14 = fp - 0x001A
	word16 si_17 = wArg02
	di_223 = di
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_B6E1:
	word16 sp_607
	word16 di_223
	branch si_17 >u 0x0002 l0800_B726
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_B726:
	word16 bx_31 = Mem24[ss:bp_27 + 0x0006:word16] + (word16) (Mem24[ds:0x4EE8:word16] *s (si_17 - 0x0001))
	Mem32[ss:bp_27 - 0x0006:word16] = Mem24[ss:bp_27 + 0x0008:word16]
	Mem33[ss:bp_27 - 0x0008:word16] = bx_31
	word16 ax_39 = (word16) (Mem33[ds:0x4EE8:word16] *s (si_17 >>u 0x0001))
	word16 dx_37 = Mem33[ss:bp_27 + 0x0008:word16]
	word16 bx_40 = Mem33[ss:bp_27 + 0x0006:word16] + ax_39
	Mem42[ss:bp_27 - 0x0002:word16] = dx_37
	Mem43[ss:bp_27 - 0x0004:word16] = bx_40
	word16 sp_46 = sp_14 - 2
	Mem47[ss:sp_46:word16] = Mem43[ss:bp_27 - 0x0006:word16]
	Mem50[ss:sp_46 - 2:word16] = Mem47[ss:bp_27 - 0x0008:word16]
	Mem53[ss:sp_46 - 4:word16] = Mem50[ss:bp_27 - 0x0002:word16]
	Mem55[ss:sp_46 - 6:word16] = bx_40
	word16 sp_56
	word16 ax_58
	word16 dx_59
	word16 bx_60
	int8 Top_62
	call SEQ(0x0800, Mem55[ds:0x4EEA:word16]) (retsize: 2;)
		uses: ax:ax_39,bp:bp_27,bx:bx_40,cx:cx_118,di:di_57,ds:ds,dx:dx_37,es:es_121,si:si_18,sp:sp_46 - 6,ss:ss,Stack +0000:bp,Stack +0004:wArg02,Stack +FFFFFFE8:di,Stack +FFFFFFEA:si,Top:Top_61
		defs: ax:ax_58,bx:bx_60,dx:dx_59,sp:sp_56,Top:Top_62
	word16 ax_109 = ax_58
	branch ax_58 <= 0x0000 l0800_B775
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_B766:
	Mem70[ss:sp_56 + 0x0006:word16] = Mem55[ss:bp_27 - 0x0002:word16]
	Mem73[ss:sp_56 + 0x0004:word16] = Mem70[ss:bp_27 - 0x0004:word16]
	Mem76[ss:sp_56 + 0x0002:word16] = Mem73[ss:bp_27 - 0x0006:word16]
	Mem79[ss:sp_56:word16] = Mem76[ss:bp_27 - 0x0008:word16]
	ax_109 = fn0800_B6A8(ds, Mem79[ss:sp_56:segptr32], Mem79[ss:sp_56 + 4:segptr32], out cx, out es)
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_B775:
	word16 cx_144
	word16 sp_146
	word16 sp_160
	Mem95[ss:sp_56 + 0x0006:word16] = Mem91[ss:bp_27 + 0x0008:word16]
	Mem98[ss:sp_56 + 0x0004:word16] = Mem95[ss:bp_27 + 0x0006:word16]
	Mem101[ss:sp_56 + 0x0002:word16] = Mem98[ss:bp_27 - 0x0002:word16]
	Mem104[ss:sp_56:word16] = Mem101[ss:bp_27 - 0x0004:word16]
	word16 sp_106
	word16 ax_110
	word16 dx_112
	word16 cx_119
	call SEQ(0x0800, Mem104[ds:0x4EEA:word16]) (retsize: 2;)
		uses: ax:ax_109,bp:bp_27,bx:bx_60,cx:cx_117,di:di_57,ds:ds,dx:dx_59,es:es_120,si:si_18,sp:sp_56,ss:ss,Stack +0000:bp,Stack +0004:wArg02,Stack +FFFFFFE8:di,Stack +FFFFFFEA:si,Top:Top_62
		defs: ax:ax_110,bx:bx_114,cx:cx_119,dx:dx_112,sp:sp_106,Top:Top_116
	branch ax_110 <= 0x0000 l0800_B79A
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_B79A:
	Mem129[ss:sp_106 + 0x0006:word16] = Mem104[ss:bp_27 - 0x0006:word16]
	Mem132[ss:sp_106 + 0x0004:word16] = Mem129[ss:bp_27 - 0x0008:word16]
	Mem135[ss:sp_106 + 0x0002:word16] = Mem132[ss:bp_27 + 0x0008:word16]
	Mem138[ss:sp_106:word16] = Mem135[ss:bp_27 + 0x0006:word16]
	word16 sp_139
	word16 ax_140
	call SEQ(0x0800, Mem138[ds:0x4EEA:word16]) (retsize: 2;)
		uses: ax:ax_110,bp:bp_27,bx:bx_114,cx:cx_119,di:di_57,ds:ds,dx:dx_112,es:es_120,si:si_18,sp:sp_106,ss:ss,Stack +0000:bp,Stack +0004:wArg02,Stack +FFFFFFE8:di,Stack +FFFFFFEA:si,Top:Top_116
		defs: ax:ax_140,bx:bx_142,cx:cx_144,sp:sp_139,Top:Top_143
	sp_146 = sp_139 + 0x0008
	branch ax_140 <= 0x0000 l0800_B7C0
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_B7B1:
	Mem152[ss:sp_139 + 0x0006:word16] = Mem138[ss:bp_27 + 0x0008:word16]
	Mem155[ss:sp_139 + 0x0004:word16] = Mem152[ss:bp_27 + 0x0006:word16]
	Mem158[ss:sp_139 + 0x0002:word16] = Mem155[ss:bp_27 - 0x0006:word16]
	Mem161[ss:sp_139:word16] = Mem158[ss:bp_27 - 0x0008:word16]
	sp_160 = sp_139
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_B78C:
	Mem164[ss:sp_106 + 0x0006:word16] = Mem104[ss:bp_27 - 0x0002:word16]
	Mem167[ss:sp_106 + 0x0004:word16] = Mem164[ss:bp_27 - 0x0004:word16]
	Mem170[ss:sp_106 + 0x0002:word16] = Mem167[ss:bp_27 + 0x0008:word16]
	Mem173[ss:sp_106:word16] = Mem170[ss:bp_27 + 0x0006:word16]
	sp_160 = sp_106
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_B7BD:
	fn0800_B6A8(ds, Mem177[ss:sp_160:segptr32], Mem177[ss:sp_160 + 4:segptr32], out cx_144, out es)
	sp_146 = sp_160 + 0x0008
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_B7C0:
	branch si_17 != 0x0003 l0800_B7D4
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_B7D4:
	word16 ax_195 = Mem194[ss:bp_27 + 0x0008:word16]
	word16 dx_198 = Mem194[ss:bp_27 + 0x0006:word16] + Mem194[ds:0x4EE8:word16]
	Mem200[ss:bp_27 - 0x000A:word16] = ax_195
	Mem201[ss:bp_27 - 0x000C:word16] = dx_198
	Mem202[ss:bp_27 - 0x0002:word16] = ax_195
	Mem203[ss:bp_27 - 0x0004:word16] = dx_198
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_B813:
	word16 sp_209 = sp_146 - 2
	Mem210[ss:sp_209:word16] = Mem206[ss:bp_27 + 0x0008:word16]
	Mem213[ss:sp_209 - 2:word16] = Mem210[ss:bp_27 + 0x0006:word16]
	Mem216[ss:sp_209 - 4:word16] = Mem213[ss:bp_27 - 0x0002:word16]
	Mem219[ss:sp_209 - 6:word16] = Mem216[ss:bp_27 - 0x0004:word16]
	word16 sp_221
	word16 ax_225
	call SEQ(0x0800, Mem219[ds:0x4EEA:word16]) (retsize: 2;)
		uses: ax:ax_224,bp:bp_27,bx:bx_228,cx:cx_232,di:di_223,ds:ds,dx:dx_226,es:es_234,si:si_18,sp:sp_209 - 6,ss:ss,Stack +0000:bp,Stack +0004:wArg02,Stack +FFFFFFE8:di,Stack +FFFFFFEA:si,Top:Top_230
		defs: ax:ax_225,bx:bx_229,cx:cx_233,dx:dx_227,sp:sp_221,Top:Top_231
	sp_146 = sp_221 + 0x0008
	di_223 = ax_225
	branch ax_225 <= 0x0000 l0800_B7EC
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_B7EC:
	di_223 = ax_225
	branch ax_225 != 0x0000 l0800_B805
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_B7F0:
	Mem247[ss:sp_221 + 0x0006:word16] = Mem219[ss:bp_27 - 0x0002:word16]
	Mem250[ss:sp_221 + 0x0004:word16] = Mem247[ss:bp_27 - 0x0004:word16]
	Mem253[ss:sp_221 + 0x0002:word16] = Mem250[ss:bp_27 - 0x000A:word16]
	Mem256[ss:sp_221:word16] = Mem253[ss:bp_27 - 0x000C:word16]
	fn0800_B6A8(ds, Mem256[ss:sp_221:segptr32], Mem256[ss:sp_221 + 4:segptr32], out cx_144, out es)
	Mem268[ss:bp_27 - 0x000C:word16] = Mem256[ss:bp_27 - 0x000C:word16] + Mem256[ds:0x4EE8:word16]
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_B805:
	sp_146 = sp_221 + 0x0008
	ax_195 = Mem272[ss:bp_27 - 0x0004:word16]
	branch ax_195 >=u Mem272[ss:bp_27 - 0x0008:word16] l0800_B883
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_B80D:
	ax_195 = Mem272[ds:0x4EE8:word16]
	Mem279[ss:bp_27 - 0x0004:word16] = Mem272[ss:bp_27 - 0x0004:word16] + ax_195
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_B82C:
	word16 ax_281 = Mem219[ss:bp_27 - 0x0004:word16]
	branch ax_281 >=u Mem219[ss:bp_27 - 0x0008:word16] l0800_B87B
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_B834:
	word16 sp_289 = sp_146 - 2
	Mem290[ss:sp_289:word16] = Mem286[ss:bp_27 - 0x0006:word16]
	Mem293[ss:sp_289 - 2:word16] = Mem290[ss:bp_27 - 0x0008:word16]
	Mem296[ss:sp_289 - 4:word16] = Mem293[ss:bp_27 + 0x0008:word16]
	Mem299[ss:sp_289 - 6:word16] = Mem296[ss:bp_27 + 0x0006:word16]
	word16 sp_301
	word16 ax_305
	call SEQ(0x0800, Mem299[ds:0x4EEA:word16]) (retsize: 2;)
		uses: ax:ax_304,bp:bp_27,bx:bx_308,cx:cx_312,di:di_303,ds:ds,dx:dx_306,es:es_234,si:si_18,sp:sp_289 - 6,ss:ss,Stack +0000:bp,Stack +0004:wArg02,Stack +FFFFFFE8:di,Stack +FFFFFFEA:si,Top:Top_310
		defs: ax:ax_305,bx:bx_309,cx:cx_313,dx:dx_307,sp:sp_301,Top:Top_311
	sp_146 = sp_301 + 0x0008
	di_223 = ax_305
	branch ax_305 >= 0x0000 l0800_B855
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_B855:
	Mem324[ss:sp_301 + 0x0006:word16] = Mem299[ss:bp_27 - 0x0002:word16]
	Mem327[ss:sp_301 + 0x0004:word16] = Mem324[ss:bp_27 - 0x0004:word16]
	Mem330[ss:sp_301 + 0x0002:word16] = Mem327[ss:bp_27 - 0x0006:word16]
	Mem333[ss:sp_301:word16] = Mem330[ss:bp_27 - 0x0008:word16]
	fn0800_B6A8(ds, Mem333[ss:sp_301:segptr32], Mem333[ss:sp_301 + 4:segptr32], out cx_144, out es)
	sp_146 = sp_301 + 0x0008
	di_223 = ax_305
	branch ax_305 == 0x0000 l0800_B87B
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_B868:
	word16 ax_347 = Mem333[ds:0x4EE8:word16]
	Mem349[ss:bp_27 - 0x0004:word16] = Mem333[ss:bp_27 - 0x0004:word16] + ax_347
	Mem351[ss:bp_27 - 0x0008:word16] = Mem349[ss:bp_27 - 0x0008:word16] - ax_347
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_B84D:
	Mem355[ss:bp_27 - 0x0008:word16] = Mem299[ss:bp_27 - 0x0008:word16] - Mem299[ds:0x4EE8:word16]
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_B873:
	ax_281 = Mem355[ss:bp_27 - 0x0004:word16]
	branch ax_281 <u Mem355[ss:bp_27 - 0x0008:word16] l0800_B834
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_B87B:
	ax_195 = Mem362[ss:bp_27 - 0x0004:word16]
	branch ax_195 <u Mem362[ss:bp_27 - 0x0008:word16] l0800_B813
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_B883:
	word16 sp_373 = sp_146 - 2
	Mem374[ss:sp_373:word16] = Mem368[ss:bp_27 + 0x0008:word16]
	Mem377[ss:sp_373 - 2:word16] = Mem374[ss:bp_27 + 0x0006:word16]
	Mem380[ss:sp_373 - 4:word16] = Mem377[ss:bp_27 - 0x0002:word16]
	Mem383[ss:sp_373 - 6:word16] = Mem380[ss:bp_27 - 0x0004:word16]
	word16 sp_386
	word16 ax_394
	call SEQ(0x0800, Mem383[ds:0x4EEA:word16]) (retsize: 2;)
		uses: ax:ax_393,bp:bp_27,bx:bx_399,cx:cx_407,di:di_390,ds:ds,dx:dx_395,es:es_411,si:si_18,sp:sp_373 - 6,ss:ss,Stack +0000:bp,Stack +0004:wArg02,Stack +FFFFFFE8:di,Stack +FFFFFFEA:si,Top:Top_403
		defs: ax:ax_394,sp:sp_386
	branch ax_394 > 0x0000 l0800_B8AA
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_B89A:
	word16 dx_421 = Mem383[ss:bp_27 - 0x0004:word16] + Mem383[ds:0x4EE8:word16]
	Mem423[ss:bp_27 - 0x0002:word16] = Mem383[ss:bp_27 - 0x0002:word16]
	Mem424[ss:bp_27 - 0x0004:word16] = dx_421
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_B8AA:
	word16 dx_431 = Mem427[ss:bp_27 - 0x0004:word16] - Mem427[ds:0x4EE8:word16]
	Mem433[ss:bp_27 - 0x0012:word16] = Mem427[ss:bp_27 - 0x0002:word16]
	Mem434[ss:bp_27 - 0x0014:word16] = dx_431
	word16 dx_436 = Mem434[ss:bp_27 + 0x0006:word16]
	Mem437[ss:bp_27 - 0x000E:word16] = Mem434[ss:bp_27 + 0x0008:word16]
	Mem438[ss:bp_27 - 0x0010:word16] = dx_436
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_B8E0:
	branch Mem441[ss:bp_27 - 0x0010:word16] >=u Mem441[ss:bp_27 - 0x000C:word16] l0800_B8F0
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_B8E8:
	branch Mem441[ss:bp_27 - 0x0014:word16] >=u Mem441[ss:bp_27 - 0x000C:word16] l0800_B8C8
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_B8C8:
	Mem451[ss:sp_386 + 0x0006:word16] = Mem441[ss:bp_27 - 0x000E:word16]
	Mem454[ss:sp_386 + 0x0004:word16] = Mem451[ss:bp_27 - 0x0010:word16]
	Mem457[ss:sp_386 + 0x0002:word16] = Mem454[ss:bp_27 - 0x0012:word16]
	Mem460[ss:sp_386:word16] = Mem457[ss:bp_27 - 0x0014:word16]
	fn0800_B6A8(ds, Mem460[ss:sp_386:segptr32], Mem460[ss:sp_386 + 0x0004:segptr32], out cx_786, out es)
	word16 ax_471 = Mem460[ds:0x4EE8:word16]
	Mem473[ss:bp_27 - 0x0010:word16] = Mem460[ss:bp_27 - 0x0010:word16] + ax_471
	Mem475[ss:bp_27 - 0x0014:word16] = Mem473[ss:bp_27 - 0x0014:word16] - ax_471
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_B8F0:
	Mem481[ss:sp_386 + 0x0006:word16] = 0x0000
	Mem485[ss:sp_386 + 0x0004:word16] = Mem481[ds:0x4EE8:word16]
	word16 ax_489 = Mem485[ss:bp_27 - 0x0004:word16] - Mem485[ss:bp_27 - 0x000C:word16]
	Mem495[ss:sp_386 + 0x0002:word16] = 0x0000 - (ax_489 <u 0x0000)
	Mem497[ss:sp_386:word16] = ax_489
	// Failed to bind call argument.
	// Please report this issue at https://github.com/uxmal/reko
	word16 stackArg0 = <invalid>
	word16 bp_505
	word16 si_510
	word16 sp_511
	word16 ax_504 = fn0800_8BBB(bp_27, si_17, di_223, stackArg0, out cx_779, out dx_780, out bx_781, out bp_505, out si_510, out di_782)
	Mem519[ss:sp_511 - 2:word16] = 0x0000
	Mem522[ss:sp_511 - 4:word16] = Mem519[ds:0x4EE8:word16]
	word16 dx_529 = Mem522[ss:bp_505 + 0x0006:word16] + (word16) (Mem522[ds:0x4EE8:word16] *s si_510) - Mem522[ss:bp_505 - 0x0004:word16]
	Mem535[ss:sp_511 - 6:word16] = 0x0000 - (dx_529 <u 0x0000)
	Mem537[ss:sp_511 - 8:word16] = dx_529
	// Failed to bind call argument.
	// Please report this issue at https://github.com/uxmal/reko
	word16 stackArg0 = <invalid>
	word16 bx_540
	word16 cx_541
	word16 sp_545
	word16 ax_538 = fn0800_8BBB(bp_505, si_510, ax_504, stackArg0, out cx_541, out dx_784, out bx_540, out bp_27, out si_785, out di_223)
	si_17 = ax_538
	branch ax_538 >=u di_223 l0800_B93D
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_B93D:
	Mem555[ss:sp_545 - 2:word16] = Mem537[ss:bp_27 + 0x0008:word16]
	Mem558[ss:sp_545 - 4:word16] = Mem555[ss:bp_27 + 0x0006:word16]
	Mem560[ss:sp_545 - 6:word16] = di_223
	// Failed to bind call argument.
	// Please report this issue at https://github.com/uxmal/reko
	word16 stackArg2 = <invalid>
	cx = fn0800_B6D6(cx_541, bx_540, bp_27, ax_538, di_223, es, ds, stackArg2, out bx, out Top_116)
	word16 dx_576 = Mem560[ss:bp_27 - 0x0004:word16]
	Mem577[ss:bp_27 + 0x0008:word16] = Mem560[ss:bp_27 - 0x0002:word16]
	Mem578[ss:bp_27 + 0x0006:word16] = dx_576
	sp_14 = sp_545
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_B92E:
	Mem581[ss:sp_545 - 2:word16] = Mem537[ss:bp_27 - 0x0002:word16]
	Mem584[ss:sp_545 - 4:word16] = Mem581[ss:bp_27 - 0x0004:word16]
	Mem586[ss:sp_545 - 6:word16] = ax_538
	// Failed to bind call argument.
	// Please report this issue at https://github.com/uxmal/reko
	word16 stackArg2 = <invalid>
	cx = fn0800_B6D6(cx_541, bx_540, bp_27, ax_538, di_223, es, ds, stackArg2, out bx, out Top_116)
	sp_14 = sp_545
	si_17 = di_223
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_B7C5:
	word16 sp_598 = sp_146 - 2
	Mem599[ss:sp_598:word16] = Mem194[ss:bp_27 + 0x0008:word16]
	Mem602[ss:sp_598 - 2:word16] = Mem599[ss:bp_27 + 0x0006:word16]
	Mem605[ss:sp_598 - 4:word16] = Mem602[ss:bp_27 - 0x0002:word16]
	Mem608[ss:sp_598 - 6:word16] = Mem605[ss:bp_27 - 0x0004:word16]
	sp_607 = sp_598 - 6
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_B6E6:
	branch si_17 == 0x0002 l0800_B6EE
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_B6EE:
	word16 ax_611 = Mem24[ss:bp_27 + 0x0008:word16]
	word16 dx_613 = Mem24[ss:bp_27 + 0x0006:word16] + Mem24[ds:0x4EE8:word16]
	Mem615[ss:bp_27 - 0x0006:word16] = ax_611
	Mem616[ss:bp_27 - 0x0008:word16] = dx_613
	word16 sp_617 = sp_14 - 2
	Mem618[ss:sp_617:word16] = ax_611
	Mem620[ss:sp_617 - 2:word16] = dx_613
	Mem623[ss:sp_617 - 4:word16] = Mem620[ss:bp_27 + 0x0008:word16]
	Mem626[ss:sp_617 - 6:word16] = Mem623[ss:bp_27 + 0x0006:word16]
	word16 sp_627
	word16 ax_628
	call SEQ(0x0800, Mem626[ds:0x4EEA:word16]) (retsize: 2;)
		uses: ax:ax_611,bp:bp_27,bx:bx_630,cx:cx_118,di:di_57,ds:ds,dx:dx_613,es:es_121,si:si_18,sp:sp_617 - 6,ss:ss,Stack +0000:bp,Stack +0004:wArg02,Stack +FFFFFFE8:di,Stack +FFFFFFEA:si,Top:Top_61
		defs: ax:ax_628,bx:bx_632,cx:cx_634,sp:sp_627,Top:Top_633
	branch ax_628 > 0x0000 l0800_B714
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_B714:
	Mem642[ss:sp_627 + 0x0006:word16] = Mem626[ss:bp_27 + 0x0008:word16]
	Mem645[ss:sp_627 + 0x0004:word16] = Mem642[ss:bp_27 + 0x0006:word16]
	Mem648[ss:sp_627 + 0x0002:word16] = Mem645[ss:bp_27 - 0x0006:word16]
	Mem651[ss:sp_627:word16] = Mem648[ss:bp_27 - 0x0008:word16]
	sp_607 = sp_627
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_B720:
	fn0800_B6A8(ds, Mem655[ss:sp_607:segptr32], Mem655[ss:sp_607 + 4:segptr32], out cx, out es_777)
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_B711:
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_B6EB:
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_B956:
	bxOut = bx
	TopOut = Top_116
	return cx
// DataOut:
// DataOut (flags):
// SymbolicIn:

fn0800_B6D6_exit:
// DataOut:
// DataOut (flags):
// SymbolicIn:



word16 fn0800_B95E(word16 cx, word16 bx, word16 si, word16 di, selector es, selector ds, word16 wArg02, word16 wArg04, word16 wArg06, word16 wArg08, word16 wArg0A)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  bx:[0..15] cx:[0..15] di:[0..15] ds:[0..15] es:[0..15] si:[0..15] ss:[0..15] Stack +0006:[0..15] Stack +0008:[0..15] Stack +000A:[0..15]
// LiveOut: cx
// Trashed: SCZO ax bx cx di dx es si Top
// Preserved: D bp sp
fn0800_B95E_entry:
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_B95E:
	Mem11[ds:0x4EE8:word16] = wArg08
	branch wArg08 == 0x0000 l0800_B97D
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_B96B:
	Mem17[ds:0x4EEA:word16] = wArg0A
	cx = fn0800_B6D6(cx, bx, fp - 2, si, di, es, ds, wArg06, out bx_80, out Top_81)
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_B97D:
	return cx
// DataOut:
// DataOut (flags):
// SymbolicIn:

fn0800_B95E_exit:
// DataOut:
// DataOut (flags):
// SymbolicIn:



word16 fn0800_B97F(selector ds, word16 wArg02, segptr32 ptrArg04, word16 wArg06, word16 wArg08, ptr16 & dxOut)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  ds:[0..15] ss:[0..15] Stack +0002:[0..15] Stack +0004:[0..15] Stack +0006:[0..15] Stack +0008:[0..15]
// LiveOut: ax dx
// Trashed: SCZDO ax bx cx dx es Top
// Preserved: bp di si sp
fn0800_B97F_entry:
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_B97F:
	word16 ax_174
	branch wArg02 <u Mem15[ds:0x24E8:word16] l0800_B99A
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_B99A:
	branch wArg08 <u 0x0001 l0800_B9B0
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_B9A3:
	branch (Mem15[ds:(wArg02 << 0x0001) + 0x24EA:word16] & 0x0200) == 0x0000 l0800_B9B5
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_B9B5:
	word16 ax_46 = fn0800_8F50(ds, wArg02, SEQ(ptrArg04_232, ptrArg04_232), wArg08, out ch_343, out dx)
	branch ax_46 <u 0x0001 l0800_B9DD
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_B9D0:
	branch (Mem55[ds:(wArg02 << 0x0001) + 0x24EA:word16] & 0x4000) != 0x0000 l0800_B9E2
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_B9E2:
	ptrArg04_232 = SEQ(ptrArg04_232, ptrArg04_232) (alias)
	word16 si_66 = (word16) ptrArg04_232
	word16 cx_117 = ax_46
	selector es_216 = SLICE(ptrArg04_232, selector, 16)
	word16 di_150 = si_66
	si_71 = si_66
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_B9ED:
	word16 si_71
	byte al_73 = Mem72[ds:si_71:byte]
	si_71 = si_71 + 0x0001
	branch al_73 == 0x1A l0800_BA21
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_BA21:
	word16 cx_86 = -cx_117
	fn0800_8E29(ds, wArg02, cx_86, 0x0000 - (cx_86 == 0x0000), 0x0001, out cx_100, out dx, out bx_344)
	Mem110[ds:(wArg02 << 0x0001) + 0x24EA:word16] = Mem97[ds:(wArg02 << 0x0001) + 0x24EA:word16] | 0x0200
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_B9F3:
	branch al_73 == 0x0D l0800_B9FC
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_B9FC:
	cx_117 = cx_117 - 0x0001
	branch cx_117 != 0x0000 l0800_B9ED
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_B9FE:
	fn0800_8F50(ds, wArg02, SEQ(ss, fp - 0x0005), 0x0001, out ch_345, out dx)
	Mem151[es_216:di_150:byte] = bLoc05
	di_150 = di_150 + 0x0001
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_B9F7:
	Mem153[es_216:di_150:byte] = al_73
	di_150 = di_150 + 0x0001
	cx_117 = cx_117 - 0x0001
	branch cx_117 != 0x0000 l0800_B9ED
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_B9FA:
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_BA19:
	branch di_150 != si_66 l0800_BA1F
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_BA1F:
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_BA41:
	ax_174 = di_150 - si_66
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_BA1D:
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_B9DD:
	ax_174 = ax_46
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_B9B0:
	ax_174 = 0x0000
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_B990:
	ax_174 = fn0800_8D2B(ds, 0x0006)
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_BA44:
	dxOut = dx
	return ax_174
// DataOut:
// DataOut (flags):
// SymbolicIn:

fn0800_B97F_exit:
// DataOut:
// DataOut (flags):
// SymbolicIn:



word16 fn0800_BA4A(selector ds, segptr32 ptrArg02, segptr32 ptrArg06)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  ds:[0..15] Stack +0002:[0..31] Stack +0006:[0..31]
// LiveOut: ax
// Trashed: SCZO ax dx es Top
// Preserved: bp di ds sp
fn0800_BA4A_entry:
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_BA4A:
	word16 ax_28
	word16 ax_22
	branch msdos_rename_file(ptrArg02, ptrArg06, out ax_22) l0800_BA60
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_BA60:
	ax_28 = fn0800_8D2B(ds, ax_22)
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_BA5C:
	ax_28 = 0x0000
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_BA64:
	return ax_28
// DataOut:
// DataOut (flags):
// SymbolicIn:

fn0800_BA4A_exit:
// DataOut:
// DataOut (flags):
// SymbolicIn:



word16 fn0800_BA67(selector ds, segptr32 ptrArg02, word16 wArg04)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  ds:[0..15] ss:[0..15] Stack +0002:[0..15] Stack +0004:[0..15]
// LiveOut: cx
// Trashed: SCZO bx cx dx es Top
// Preserved: bp sp
fn0800_BA67_entry:
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_BA67:
	word16 cx_27
	branch fn0800_ACB3(ds, wArg02, wArg04, 0x0000, out cx_27, out dx_76, out bx_26, out es_29) != 0x0000 l0800_BA87
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_BA7F:
	segptr32 ptrArg02_59 = SEQ(wArg04, wArg02)
	Mem43[ptrArg02_59 + 0x0002:word16] = Mem23[ptrArg02_59 + 0x0002:word16] & 0xFFEF
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_BA87:
	return cx_27
// DataOut:
// DataOut (flags):
// SymbolicIn:

fn0800_BA67_exit:
// DataOut:
// DataOut (flags):
// SymbolicIn:



word16 fn0800_BA89(selector ds, segptr32 ptrArg02, word16 wArg04, word16 wArg06, word16 wArg08, word16 wArg0A, word16 wArg0C, ptr16 & cxOut, ptr16 & bpOut, ptr16 & siOut, ptr16 & diOut, ptr16 & dsOut)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  ds:[0..15] ss:[0..15] Stack +0002:[0..31] Stack +0006:[0..15] Stack +0008:[0..15] Stack +000A:[0..15] Stack +000C:[0..15]
// LiveOut: ax bp cx di ds si sp
// Trashed: SCZO ax bp bx cx di ds dx es si sp Top
// Preserved:
fn0800_BA89_entry:
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_BA89:
	word16 ax_202
	word16 bp_153 = fp - 2
	word16 sp_12 = fp - 6
	word16 di_15 = wArg0A
	branch Mem14[ptrArg02 + 0x0012:word16] != ptrArg02 l0800_BAAB
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_BAA0:
	branch wArg0A > 0x0002 l0800_BAAB
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_BAA5:
	branch wArg0C <=u 0x7FFF l0800_BAB1
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_BAB1:
	branch Mem14[ds:0x26B2:word16] != 0x0000 l0800_BAC7
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_BAB8:
	branch ptrArg02 != 0x236C l0800_BAC7
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_BAC7:
	branch Mem14[ds:0x26B0:word16] != 0x0000 l0800_BADB
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_BACE:
	branch ptrArg02 != 0x2358 l0800_BADB
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_BAD5:
	Mem40[ds:0x26B0:word16] = 0x0001
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_BABF:
	Mem41[ds:0x26B2:word16] = 0x0001
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_BADB:
	word16 bx_47 = (word16) ptrArg02
	branch Mem44[ptrArg02:word16] == 0x0000 l0800_BAF6
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_BAE4:
	fn0800_ACB3(ds, bx_47, ptrArg02, 0x0001, out cx, out dx_312, out bx_313, out es_314)
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_BAF6:
	branch (Mem81[ptrArg02 + 0x0002:word16] & 0x0004) == 0x0000 l0800_BB0E
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_BB01:
	word16 v18_88 = Mem81[ptrArg02 + 0x000A:word16]
	fn0800_9E75(ds, v18_88, out cx_315, out dx_316, out bx_317, out ds)
	cx = v18_88
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_BB0E:
	Mem117[ptrArg02 + 0x0002:word16] = Mem112[ptrArg02 + 0x0002:word16] & 0xFFF3
	Mem119[ptrArg02 + 0x0006:word16] = 0x0000
	Mem123[ptrArg02 + 0x000A:word16] = ptrArg02
	Mem124[ptrArg02 + 0x0008:word16] = ptrArg02 + 0x0005
	Mem125[ptrArg02 + 0x000E:word16] = ptrArg02
	Mem126[ptrArg02 + 0x000C:word16] = ptrArg02 + 0x0005
	sp_12 = fp - 6
	branch wArg0A == 0x0002 l0800_BB92
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_BB3A:
	word16 si_137 = wArg0C
	branch wArg0C <=u 0x0000 l0800_BB92
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_BB3E:
	Mem143[ds:0x2352:word16] = 0xC7F0
	branch (wArg06 | wArg08) != 0x0000 l0800_BB6B
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_BB4C:
	// Failed to bind call argument.
	// Please report this issue at https://github.com/uxmal/reko
	word16 stackArg2 = <invalid>
	word16 dx_158
	word16 sp_161
	word16 ax_152 = fn0800_9F7F(stackArg2, out dx_158, out bp_153, out si_137, out di_15, out ds)
	cx = Mem151[ss:sp_161:word16]
	Mem168[ss:bp_153 + 0x000A:word16] = dx_158
	Mem169[ss:bp_153 + 0x0008:word16] = ax_152
	sp_12 = sp_161 + 2
	branch (ax_152 | dx_158) != 0x0000 l0800_BB5E
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_BB5E:
	ptr32 es_bx_174 = Mem169[ss:bp_153 + 0x0004:segptr32]
	Mem178[es_bx_174 + 0x0002:word16] = Mem169[es_bx_174 + 0x0002:word16] | 0x0004
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_BB6B:
	ptr32 es_bx_184 = Mem183[ss:bp_153 + 0x0004:segptr32]
	word16 ax_185 = Mem183[ss:bp_153 + 0x000A:word16]
	word16 dx_186 = Mem183[ss:bp_153 + 0x0008:word16]
	Mem189[es_bx_184 + 0x000E:word16] = ax_185
	Mem190[es_bx_184 + 0x000C:word16] = dx_186
	Mem191[es_bx_184 + 0x000A:word16] = ax_185
	Mem192[es_bx_184 + 0x0008:word16] = dx_186
	Mem194[es_bx_184 + 0x0006:word16] = si_137
	branch di_15 != 0x0001 l0800_BB92
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_BB8D:
	Mem199[es_bx_184 + 0x0002:word16] = Mem194[es_bx_184 + 0x0002:word16] | 0x0008
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_BB92:
	ax_202 = 0x0000
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_BB5B:
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_BAAB:
	ax_202 = 0xFFFF
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_BB94:
	word16 sp_217 = sp_12 + 2
	word16 di_216 = Mem213[ss:sp_12:word16]
	word16 si_218 = Mem213[ss:sp_217:word16]
	word16 bp_220 = Mem213[ss:sp_217 + 2:word16]
	cxOut = cx
	bpOut = bp_220
	siOut = si_218
	diOut = di_216
	dsOut = ds
	return ax_202
// DataOut:
// DataOut (flags):
// SymbolicIn:

fn0800_BA89_exit:
// DataOut:
// DataOut (flags):
// SymbolicIn:



void fn0800_BB98(word16 wArg02, word16 wArg04, word16 wArg06, segptr32 ptrArg08, word16 wArg0A)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  Stack +0002:[0..15] Stack +0004:[0..15] Stack +0006:[0..15] Stack +0008:[0..15] Stack +000A:[0..15]
// LiveOut:
// Trashed: SCZO ax bx cx dx es Top
// Preserved: D bp si sp
fn0800_BB98_entry:
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_BB98:
	branch (wArg08 | wArg0A) == 0x0000 l0800_BBE4
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_BBA7:
	// Failed to bind call argument.
	// Please report this issue at https://github.com/uxmal/reko
	word16 stackArg4 = <invalid>
	branch fn0800_BFC7(SEQ(wArg06, wArg04), stackArg4, out cx_151, out es_152) <u wArg02 l0800_BBD2
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_BBD2:
	// Failed to bind call argument.
	// Please report this issue at https://github.com/uxmal/reko
	word16 stackArg4 = <invalid>
	fn0800_BF9E(SEQ(wArg0A, wArg08), stackArg4, SEQ(wArg06, wArg04))
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_BBB6:
	// Failed to bind call argument.
	// Please report this issue at https://github.com/uxmal/reko
	word16 stackArg4 = <invalid>
	fn0800_C01E(SEQ(wArg0A, wArg08), stackArg4, SEQ(wArg06, wArg04), wArg02)
	Mem90[SEQ(wArg0A, wArg08) + wArg02:byte] = 0x00
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_BBE4:
	return
// DataOut:
// DataOut (flags):
// SymbolicIn:

fn0800_BB98_exit:
// DataOut:
// DataOut (flags):
// SymbolicIn:



void fn0800_BBE9(word16 bp, segptr32 ptrArg02)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  bp:[0..15] ss:[0..15] Stack +0002:[0..31]
// LiveOut:
// Trashed: SCZO ax bp bx cx es sp Top
// Preserved:
fn0800_BBE9_entry:
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_BBE9:
	branch Mem7[ptrArg02 - 0x0001:byte] != 0x2E l0800_BBFC
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_BBF9:
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_BBFC:
	selector es_25 = SLICE(ptrArg02, selector, 16)
	word16 ax_28 = (int16) Mem22[ptrArg02:byte]
	word16 cx_30 = 0x0004
	word16 bx_31 = 0xBC39
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_BC0F:
	word16 ax_34 = Mem29[0x0800:bx_31:word16]
	branch ax_34 == ax_28 l0800_BC1E
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_BC1E:
	call Mem29[0x0800:bx_31 + 0x0008:word16] (retsize: 2;)
		uses: ax:ax_34,bp:fp - 2,bx:bx_32,cx:cx_44,es:es_25,sp:fp - 0x0004,ss:ss,Stack +0002:ax_28,Stack +0004:bp,Stack +0008:ptrArg02,Top:0
	return
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_BC17:
	bx_31 = bx_31 + 0x0002
	cx_30 = cx_30 - 0x0001
	branch cx_30 != 0x0000 l0800_BC0F
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_BC1C:
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_BC31:
	return
// DataOut:
// DataOut (flags):
// SymbolicIn:

fn0800_BBE9_exit:
// DataOut:
// DataOut (flags):
// SymbolicIn:



word16 fn0800_BC49(word16 bp, word16 si, word16 di, segptr32 ptrArg02, word16 wArg04, segptr32 ptrArg06, word16 wArg08, segptr32 ptrArg0A, word16 wArg0C, segptr32 ptrArg0E, word16 wArg10, segptr32 ptrArg12, word16 wArg14)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  bp:[0..15] di:[0..15] si:[0..15] ss:[0..15] Stack +0002:[0..31] Stack +0006:[0..15] Stack +0008:[0..15] Stack +000A:[0..15] Stack +000C:[0..15] Stack +000E:[0..15] Stack +0010:[0..15] Stack +0012:[0..15] Stack +0014:[0..15]
// LiveOut: bx
// Trashed: SCZDO ax bp bx cx di dx es si sp Top
// Preserved:
fn0800_BC49_entry:
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_BC49:
	branch (ptrArg06_210 | ptrArg06_210) == 0x0000 l0800_BC62
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_BC5B:
	ptrArg06_210 = SEQ(ptrArg06_210, ptrArg06_210) (alias)
	Mem25[ptrArg06_210:byte] = 0x00
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_BC62:
	branch (ptrArg0A_215 | ptrArg0A_215) == 0x0000 l0800_BC71
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_BC6A:
	ptrArg0A_215 = SEQ(ptrArg0A_215, ptrArg0A_215) (alias)
	Mem37[ptrArg0A_215:byte] = 0x00
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_BC71:
	branch (ptrArg0E_222 | ptrArg0E_222) == 0x0000 l0800_BC80
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_BC79:
	ptrArg0E_222 = SEQ(ptrArg0E_222, ptrArg0E_222) (alias)
	Mem49[ptrArg0E_222:byte] = 0x00
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_BC80:
	branch (ptrArg12_231 | ptrArg12_231) == 0x0000 l0800_BC8F
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_BC88:
	ptrArg12_231 = SEQ(ptrArg12_231, ptrArg12_231) (alias)
	Mem61[ptrArg12_231:byte] = 0x00
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_BC8F:
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_BC9D:
	word16 bx_72 = (word16) ptrArg02
	branch Mem69[ptrArg02:byte] == 0x20 l0800_BC9A
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_BC9A:
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_BCA6:
	// Failed to bind call argument.
	// Please report this issue at https://github.com/uxmal/reko
	word16 stackArg4 = <invalid>
	word16 ax_88 = fn0800_BFC7(SEQ(ptrArg02, bx_72), stackArg4, out cx_363, out es_364)
	word16 si_100 = ax_88
	branch ax_88 <= 0x0050 l0800_BCB9
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_BCB6:
	si_100 = 0x0050
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_BCB9:
	segptr32 ptrLoc06_241 = SEQ(ss, fp - 0x005A)
	Mem110[ptrLoc06_241:byte] = 0x00
	// Failed to bind call argument.
	// Please report this issue at https://github.com/uxmal/reko
	word16 stackArg4 = <invalid>
	word16 v23_141 = ptrLoc06_241 + 0x0001 + si_100
	word16 dx_133 = fn0800_C01E(SEQ(ptrLoc06_241, ptrLoc06_241 + 0x0001), stackArg4, SEQ(ptrArg02, ptrArg02), si_100)
	Mem146[DPB(ptrLoc06_241, v23_141, 0):byte] = 0x00
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_BCE2:
	segptr32 ptrLoc06_256
	selector es_157 = SLICE(ptrLoc06_256, selector, 16)
	word16 ax_160 = (int16) Mem154[ptrLoc06_256:byte]
	word16 cx_162 = 0x0007
	word16 bx_163 = 0xBE1F
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_BCF5:
	segptr32 ptrArg02_351
	word16 ax_166 = Mem161[0x0800:bx_163:word16]
	branch ax_166 == ax_160 l0800_BD04
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_BD04:
	word16 bx_176
	call Mem161[0x0800:bx_163 + 0x000E:word16] (retsize: 2;)
		uses: ax:ax_166,bp:fp - 2,bx:bx_164,cx:cx_178,di:0x0000,dx:dx_133,es:es_157,si:0x0000,sp:fp - 0x005E,ss:ss,Stack +0000:si_116,Stack +0002:di,Stack +0004:si,Stack +0058:ax_160,Stack +005A:wLoc06_271,Stack +005C:wLoc04_270,Stack +005E:bp,Stack +0062:ptrArg02_351,Stack +0064:ptrArg02_351,Stack +0066:wArg06_312,Stack +0068:wArg08_319,Stack +006A:wArg0A_325,Stack +006C:wArg0C_331,Stack +006E:wArg0E_336,Stack +0070:wArg10_341,Stack +0072:wArg12_345,Stack +0074:wArg14_349,Stack +FFFFFFF8:ptrLoc06_241 + 0x0001,Stack +FFFFFFFA:ptrLoc06_241,Stack +FFFFFFFC:ptrArg02,Stack +FFFFFFFE:ptrArg02,Top:0
		defs: bx:bx_176
	return bx_176
// DataOut:
// DataOut (flags):
// SymbolicIn:

fn0800_BC49_exit:
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_BCFD:
	bx_163 = bx_163 + 0x0002
	cx_162 = cx_162 - 0x0001
	ptrLoc06_256 = DPB(ptrLoc06_241, v23_141, 0) (alias)
	ptrLoc06_256 = SEQ(ptrLoc06_256, ptrLoc06_256) (alias)
	ptrArg02_351 = SEQ(ptrArg02, ptrArg02) (alias)
	branch cx_162 != 0x0000 l0800_BCF5
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_BD02:
// DataOut:
// DataOut (flags):
// SymbolicIn:



word16 fn0800_BE3B(word16 si, word16 di, word16 wArg02, word16 wArg04, word16 wArg06, word16 wArg08, word16 wArg0A, word16 wArg0C, word16 wArg0E, word16 wArg10, word16 wArg12, word16 wArg14)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  di:[0..15] si:[0..15] ss:[0..15] Stack +0002:[0..15] Stack +0004:[0..15] Stack +0006:[0..15] Stack +0008:[0..15] Stack +000A:[0..15] Stack +000C:[0..15] Stack +000E:[0..15] Stack +0010:[0..15] Stack +0012:[0..15] Stack +0014:[0..15]
// LiveOut: bx
// Trashed: SCZDO ax bx cx di dx es si Top
// Preserved: bp sp
fn0800_BE3B_entry:
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_BE3B:
	// Failed to bind call argument.
	// Please report this issue at https://github.com/uxmal/reko
	word16 stackArg4 = <invalid>
	return fn0800_BC49(fp - 2, si, di, SEQ(wArg04, wArg02), stackArg4, wArg06, wArg08, wArg0A, wArg0C, wArg0E, wArg10, wArg12, wArg14)
// DataOut:
// DataOut (flags):
// SymbolicIn:

fn0800_BE3B_exit:
// DataOut:
// DataOut (flags):
// SymbolicIn:



word16 fn0800_BEA2(word16 cx, word16 dx, selector ds, segptr32 ptrArg02, word16 wArg06, word16 wArg08, ptr16 & diOut)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  cx:[0..15] ds:[0..15] dx:[0..15] ss:[0..15] Stack +0002:[0..31] Stack +0006:[0..15] Stack +0008:[0..15]
// LiveOut: di si
// Trashed: SCZDO ax bx di es si Top
// Preserved: bp sp
fn0800_BEA2_entry:
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_BEA2:
	Mem12[ptrArg02:byte] = 0x00
	// Failed to bind call argument.
	// Please report this issue at https://github.com/uxmal/reko
	selector stackArg6 = <invalid>
	word16 di_34
	word16 si_35
	fn0800_9828(cx, dx, (word16) ptrArg02, ds, fp + 0x000A, SEQ(wArg08, wArg06), stackArg6, out si_35, out di_34)
	diOut = di_34
	return si_35
// DataOut:
// DataOut (flags):
// SymbolicIn:

fn0800_BEA2_exit:
// DataOut:
// DataOut (flags):
// SymbolicIn:



byte fn0800_BF18(word16 cx, word16 dx, word16 bx, word16 si, word16 di, selector es, selector ds, word16 wArg06, word16 wArg08, ptr16 & diOut)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  bx:[0..15] cx:[0..15] di:[0..15] ds:[0..15] dx:[0..15] es:[0..15] si:[0..15] ss:[0..15] Stack +0006:[0..15] Stack +0008:[0..15]
// LiveOut: cx di
// Trashed: SCZDO ax bx cx di dx es si Top
// Preserved: bp sp
fn0800_BF18_entry:
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_BF18:
	word16 di_40
	word16 cx_46 = (word16) fn0800_8F97(cx, dx, bx, fp - 2, si, di, es, ds, 0xBEE5, 0xBF0D, fp + 0x0002, ss, wArg06, wArg08, out di_40)
	diOut = di_40
	return (byte) cx_46
// DataOut:
// DataOut (flags):
// SymbolicIn:

fn0800_BF18_exit:
// DataOut:
// DataOut (flags):
// SymbolicIn:



void fn0800_BF5F(segptr32 ptrArg02, segptr32 ptrArg06)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  Stack +0002:[0..15] Stack +0006:[0..15]
// LiveOut:
// Trashed: SCZDO ax cx dx Top
// Preserved: bp di ds si sp
fn0800_BF5F_entry:
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_BF5F:
	word16 di_20 = (word16) ptrArg02
	selector es_126 = SLICE(ptrArg02, selector, 16)
	word16 cx_25 = 0xFFFF
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_BF70:
	branch cx_25 == 0x0000 l0800_BF72
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_BF70_1:
	di_20 = di_20 + 0x0001
	cx_25 = cx_25 - 0x0001
	branch Mem18[es_126:di_20:byte] == 0x00 l0800_BF70
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_BF72:
	word16 si_43 = di_20 - 0x0001
	selector es_128 = SLICE(ptrArg06, selector, 16)
	word16 di_129 = (word16) ptrArg06
	word16 cx_47 = 0xFFFF
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_BF7C:
	branch cx_47 == 0x0000 l0800_BF7E
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_BF7C_2:
	di_129 = di_129 + 0x0001
	cx_47 = cx_47 - 0x0001
	branch Mem41[es_128:di_129:byte] == 0x00 l0800_BF7C
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_BF7E:
	word16 cx_58 = ~cx_47
	word16 di_60 = di_129 - cx_58
	word16 di_124 = si_43
	word16 si_123 = di_60
	branch (di_60 & 0x0001) == 0x0000 l0800_BF8F
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_BF8D:
	Mem81[es_126:si_43:byte] = Mem67[es_128:di_60:byte]
	si_123 = di_60 + 0x0001
	di_124 = si_43 + 0x0001
	cx_58 = cx_58 - 0x0001
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_BF8F:
	word16 cx_87 = cx_58 >>u 0x0001
	cx_125 = cx_87
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_BF91:
	word16 cx_125
	branch cx_125 == 0x0000 l0800_BF93
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_BF93:
	branch cx_87 >=u 0x0000 l0800_BF96
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_BF95:
	Mem97[es_126:di_124:byte] = Mem93[es_128:si_123:byte]
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_BF96:
	return
// DataOut:
// DataOut (flags):
// SymbolicIn:

fn0800_BF5F_exit:
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_BF91_1:
	Mem122[es_126:di_124:word16] = Mem93[es_128:si_123:word16]
	si_123 = si_123 + 0x0002
	di_124 = di_124 + 0x0002
	cx_125 = cx_125 - 0x0001
// DataOut:
// DataOut (flags):
// SymbolicIn:



void fn0800_BF9E(segptr32 ptrArg02, word16 wArg04, segptr32 ptrArg06)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  Stack +0002:[0..15] Stack +0006:[0..15]
// LiveOut:
// Trashed: SCZDO ax cx dx es Top
// Preserved: bp di ds si sp
fn0800_BF9E_entry:
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_BF9E:
	word16 di_17 = (word16) ptrArg06
	selector es_73 = SLICE(ptrArg06, selector, 16)
	word16 si_18 = di_17
	word16 cx_22 = 0xFFFF
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_BFAE:
	branch cx_22 == 0x0000 l0800_BFB0
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_BFAE_1:
	di_17 = di_122 + 0x0001
	cx_22 = cx_22 - 0x0001
	di_122 = di_17
	branch Mem14[es_73:di_122:byte] == 0x00 l0800_BFAE
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_BFB0:
	word16 cx_33 = ~cx_22
	selector es_76 = SLICE(ptrArg02, selector, 16)
	word16 di_68 = (word16) ptrArg02
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_BFBA:
	branch cx_33 == 0x0000 l0800_BFBC
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_BFBC:
	return
// DataOut:
// DataOut (flags):
// SymbolicIn:

fn0800_BF9E_exit:
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_BFBA_2:
	Mem69[es_76:di_68:byte] = Mem52[es_73:si_18:byte]
	si_18 = si_18 + 0x0001
	di_68 = di_68 + 0x0001
	cx_33 = cx_33 - 0x0001
// DataOut:
// DataOut (flags):
// SymbolicIn:



word16 fn0800_BFC7(segptr32 ptrArg02, word16 wArg04, ptr16 & cxOut, ptr16 & esOut)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  Stack +0002:[0..31]
// LiveOut: ax cx es
// Trashed: SCZDO ax cx es Top
// Preserved: bp di sp
fn0800_BFC7_entry:
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_BFC7:
	word16 di_16 = (word16) ptrArg02
	selector es_58 = SLICE(ptrArg02, selector, 16)
	word16 ax_13 = 0x0000
	branch ptrArg02 != 0x0000 l0800_BFD9
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_BFD5:
	branch di_16 == 0x0000 l0800_BFE3
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_BFD9:
	word16 cx_20 = 0xFFFF
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_BFDD:
	ax_13 = DPB(ax_13, 0x00, 0) (alias)
	ax_13 = DPB(ax_13, 0x00, 0) (alias)
	branch cx_20 == 0x0000 l0800_BFDF
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_BFDD_1:
	di_16 = di_102 + 0x0001
	cx_20 = cx_20 - 0x0001
	di_102 = di_16
	branch Mem11[es_58:di_102:byte] == 0x00 l0800_BFDD
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_BFDF:
	cx = ax_13
	ax_13 = ~cx_20 - 0x0001
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_BFE3:
	cxOut = cx
	esOut = es_58
	return ax_13
// DataOut:
// DataOut (flags):
// SymbolicIn:

fn0800_BFC7_exit:
// DataOut:
// DataOut (flags):
// SymbolicIn:



word16 fn0800_BFE6(segptr32 ptrArg02, segptr32 ptrArg06, word16 wArg0A)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  Stack +0002:[0..15] Stack +0006:[0..15] Stack +000A:[0..15]
// LiveOut: ax
// Trashed: SCZDO ax bx cx dx es Top
// Preserved: bp di ds si sp
fn0800_BFE6_entry:
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_BFE6:
	word16 di_19 = (word16) ptrArg06
	selector es_107 = SLICE(ptrArg06, selector, 16)
	word16 ax_134 = wArg0A
	word16 cx_22 = wArg0A
	branch wArg0A == 0x0000 l0800_C018
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_BFFA:
	word16 ax_73 = DPB(wArg0A, 0x00, 0)
	di_30 = di_19
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_BFFE:
	word16 di_30
	ax_73 = DPB(ax_73, 0x00, 0) (alias)
	ax_73 = DPB(ax_73, 0x00, 0) (alias)
	branch cx_22 == 0x0000 l0800_C000
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_BFFE_1:
	di_30 = di_162 + 0x0001
	cx_22 = cx_22 - 0x0001
	di_162 = di_30
	branch Mem14[es_107:di_162:byte] == 0x00 l0800_BFFE
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_C000:
	word16 bx_39 = wArg0A - cx_22
	word16 cx_41 = bx_39
	word16 di_164 = di_19
	selector ds_108 = SLICE(ptrArg02, selector, 16)
	word16 si_109 = (word16) ptrArg02
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_C009:
	branch cx_41 == 0x0000 l0800_C00B
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_C009_2:
	si_109 = si_109 + 0x0001
	di_164 = di_164 + 0x0001
	cx_41 = cx_41 - 0x0001
	branch Mem14[ds_108:si_109:byte] != Mem14[es_107:di_164:byte] l0800_C009
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_C00B:
	ax_134 = DPB(DPB(ax_73, Mem14[ds_108:si_109 - 0x0001:byte], 0), 0x00, 8) - DPB(DPB(bx_39, Mem14[es_107:di_164 - 0x0001:byte], 0), 0x00, 8)
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_C018:
	return ax_134
// DataOut:
// DataOut (flags):
// SymbolicIn:

fn0800_BFE6_exit:
// DataOut:
// DataOut (flags):
// SymbolicIn:



word16 fn0800_C01E(segptr32 ptrArg02, word16 wArg04, segptr32 ptrArg06, word16 wArg0A)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  Stack +0002:[0..15] Stack +0006:[0..15] Stack +000A:[0..15]
// LiveOut: dx
// Trashed: SCZDO ax bx cx dx es Top
// Preserved: bp di ds si sp
fn0800_C01E_entry:
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_C01E:
	word16 di_17 = (word16) ptrArg06
	selector es_90 = SLICE(ptrArg06, selector, 16)
	word16 si_18 = di_17
	word16 cx_23 = wArg0A
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_C030:
	branch cx_23 == 0x0000 l0800_C032
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_C030_1:
	di_17 = di_148 + 0x0001
	cx_23 = cx_23 - 0x0001
	di_148 = di_17
	branch Mem14[es_90:di_148:byte] == 0x00 l0800_C030
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_C032:
	selector es_98 = SLICE(ptrArg02, selector, 16)
	word16 di_76 = (word16) ptrArg02
	word16 cx_55 = wArg0A - cx_23
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_C03E:
	branch cx_55 == 0x0000 l0800_C040
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_C040:
	word16 cx_58 = cx_23
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_C042:
	branch cx_58 == 0x0000 l0800_C044
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_C044:
	return ptrArg02
// DataOut:
// DataOut (flags):
// SymbolicIn:

fn0800_C01E_exit:
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_C042_1:
	Mem77[es_98:di_76:byte] = 0x00
	di_76 = di_76 + 0x0001
	cx_58 = cx_58 - 0x0001
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_C03E_2:
	Mem86[es_98:di_76:byte] = Mem82[es_90:si_18:byte]
	si_18 = si_18 + 0x0001
	di_76 = di_76 + 0x0001
	cx_55 = cx_55 - 0x0001
// DataOut:
// DataOut (flags):
// SymbolicIn:



word16 fn0800_C04F(selector ds, ptr16 & cxOut, ptr16 & dxOut, ptr16 & bpOut, ptr16 & siOut, ptr16 & diOut)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  ds:[0..15] ss:[0..15]
// LiveOut: ax bp cx di dx si
// Trashed: SCZDO ax bp bx cx di dx es si sp Top
// Preserved:
fn0800_C04F_entry:
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_C04F:
	word16 di_21
	word16 sp_23
	word16 bp_20 = fn0800_C379(ds, out si_400, out di_21)
	word16 dx_30 = Mem13[ds:0x26E2:word16]
	Mem35[ss:bp_20 - 0x0002:word16] = Mem13[ds:0x26E4:word16] + 0x12CE + (dx_30 <u 0xA600)
	Mem36[ss:bp_20 - 0x0004:word16] = dx_30 + 0xA600
	word16 si_40 = Mem36[Mem36[ss:bp_20 + 0x0004:segptr32]:word16]
	int32 dx_ax_46 = (int32) (si_40 + 0xF844 >> 0x0002)
	Mem49[ss:sp_23 - 2:word16] = (word16) dx_ax_46
	Mem52[ss:sp_23 - 4:word16] = SLICE(dx_ax_46, word16, 16)
	word16 dx_60
	word16 ax_59 = fn0800_8F18(0x1F80, Mem52[ss:sp_23 - 4:word16], 0x0786, Mem52[ss:sp_23 - 2:word16], out cx_401, out dx_60)
	Mem67[ss:bp_20 - 0x0004:word16] = v16_66
	ui32 v17_v16_316 = SEQ(Mem67[ss:bp_20 - 0x0002:word16], Mem52[ss:bp_20 - 0x0004:word16]) + SEQ(dx_60, ax_59)
	Mem71[ss:bp_20 - 0x0002:word16] = SLICE(v17_v16_316, word16, 16)
	int32 dx_ax_76 = (int32) (si_40 + 0xF844 & 0x0003)
	Mem79[ss:sp_23 - 2:word16] = (word16) dx_ax_76
	Mem82[ss:sp_23 - 4:word16] = SLICE(dx_ax_76, word16, 16)
	word16 dx_90
	word16 ax_89 = fn0800_8F18(0x3380, Mem82[ss:sp_23 - 4:word16], 0x01E1, Mem82[ss:sp_23 - 2:word16], out cx_402, out dx_90)
	Mem97[ss:bp_20 - 0x0004:word16] = v19_96
	ui32 v20_v19_318 = SEQ(Mem97[ss:bp_20 - 0x0002:word16], Mem82[ss:bp_20 - 0x0004:word16]) + SEQ(dx_90, ax_89)
	Mem101[ss:bp_20 - 0x0002:word16] = SLICE(v20_v19_318, word16, 16)
	word16 v16_66 = (word16) v17_v16_316
	word16 v19_96 = (word16) v20_v19_318
	branch (si_40 + 0xF844 & 0x0003) == 0x0000 l0800_C0B9
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_C0B0:
	Mem106[ss:bp_20 - 0x0004:word16] = v22_105
	0x00015180 = 0x005180
	ui32 v23_v22_319 = SEQ(Mem106[ss:bp_20 - 0x0002:word16], Mem101[ss:bp_20 - 0x0004:word16]) + 0x00015180
	Mem110[ss:bp_20 - 0x0002:word16] = SLICE(v23_v22_319, word16, 16)
	word16 v22_105 = (word16) v23_v22_319
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_C0B9:
	word16 cx_112 = 0x0000
	word16 si_124 = (int16) Mem116[Mem116[ss:bp_20 + 0x0004:segptr32] + 0x0003:byte] - 0x0001
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_C0D0:
	branch si_124 > 0x0000 l0800_C0C8
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_C0C8:
	si_124 = si_124 - 0x0001
	cx_112 = cx_112 + (int16) Mem116[ds:si_124 + 0x26B4:byte]
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_C0D4:
	ptr32 es_bx_139 = Mem116[ss:bp_20 + 0x0004:segptr32]
	word16 ax_143 = (int16) Mem116[es_bx_139 + 0x0002:byte]
	word16 cx_145 = cx_112 + (ax_143 - 0x0001)
	branch Mem116[es_bx_139 + 0x0003:byte] <= 0x02 l0800_C0EE
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_C0E6:
	branch (Mem116[es_bx_139:word16] & 0x0003) != 0x0000 l0800_C0EE
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_C0ED:
	cx_145 = cx_145 + 0x0001
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_C0EE:
	ptr32 es_bx_156 = Mem116[ss:bp_20 + 0x0008:segptr32]
	Mem168[ss:sp_23 - 2:word16] = DPB(DPB(ax_143 - 0x0001, Mem116[es_bx_156 + 0x0001:byte], 0), 0x00, 8)
	word16 ax_176 = (word16) (cx_145 *s 0x0018) + Mem168[ss:sp_23 - 2:word16]
	word16 si_177 = ax_176
	branch Mem168[ds:0x26E6:word16] == 0x0000 l0800_C128
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_C10B:
	Mem186[ss:sp_23 - 2:word16] = DPB(DPB(ax_176, Mem168[es_bx_156 + 0x0001:byte], 0), 0x00, 8)
	Mem188[ss:sp_23 - 4:word16] = cx_145
	Mem191[ss:sp_23 - 6:word16] = 0x0000
	Mem199[ss:sp_23 - 8:word16] = Mem191[Mem191[ss:bp_20 + 0x0004:segptr32]:word16] + 0xF84E
	branch fn0800_C553(ds, Mem199[ss:sp_23 - 8:word16], Mem199[ss:sp_23 - 6:word16], Mem199[ss:sp_23 - 4:word16], Mem199[ss:sp_23 - 2:byte]) == 0x0000 l0800_C128
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_C127:
	si_177 = ax_176 - 0x0001
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_C128:
	int32 dx_ax_217 = (int32) si_177
	Mem222[ss:sp_23 - 2:word16] = (word16) dx_ax_217
	Mem225[ss:sp_23 - 4:word16] = SLICE(dx_ax_217, word16, 16)
	word16 dx_235
	word16 ax_234 = fn0800_8F18(0x0E10, Mem225[ss:sp_23 - 4:word16], 0x0000, Mem225[ss:sp_23 - 2:word16], out cx_403, out dx_235)
	Mem243[ss:bp_20 - 0x0004:word16] = v26_242
	ui32 v27_v26_321 = SEQ(Mem243[ss:bp_20 - 0x0002:word16], Mem225[ss:bp_20 - 0x0004:word16]) + SEQ(dx_235, ax_234)
	Mem247[ss:bp_20 - 0x0002:word16] = SLICE(v27_v26_321, word16, 16)
	int32 dx_ax_255 = (int32) DPB(DPB(ax_234, Mem247[Mem247[ss:bp_20 + 0x0008:segptr32]:byte], 0), 0x00, 8)
	Mem258[ss:sp_23 - 2:word16] = (word16) dx_ax_255
	Mem261[ss:sp_23 - 4:word16] = SLICE(dx_ax_255, word16, 16)
	word16 dx_271
	word16 ax_270 = fn0800_8F18(0x003C, Mem261[ss:sp_23 - 4:word16], 0x0000, Mem261[ss:sp_23 - 2:word16], out cx_404, out dx_271)
	ptr32 es_bx_277 = Mem261[ss:bp_20 + 0x0008:segptr32]
	word16 bx_286 = DPB(DPB((word16) es_bx_277, Mem261[es_bx_277 + 0x0003:byte], 0), 0x00, 8)
	Mem283[ss:sp_23 - 2:word16] = ax_270
	Mem289[ss:sp_23 - 4:word16] = dx_271
	ui32 bx_cx_324 = SEQ(Mem289[ss:sp_23 - 4:word16], Mem289[ss:sp_23 - 2:word16]) + (int32) bx_286
	Mem302[ss:bp_20 - 0x0004:word16] = v30_301
	ui32 v31_v30_326 = SEQ(Mem302[ss:bp_20 - 0x0002:word16], Mem289[ss:bp_20 - 0x0004:word16]) + bx_cx_324
	Mem306[ss:bp_20 - 0x0002:word16] = SLICE(v31_v30_326, word16, 16)
	word16 dx_308 = Mem306[ss:bp_20 - 0x0002:word16]
	word16 ax_309 = Mem306[ss:bp_20 - 0x0004:word16]
	word16 si_310 = Mem306[ss:sp_23:word16]
	word16 bp_312 = Mem306[ss:bp_20:word16]
	cxOut = (word16) bx_cx_324
	dxOut = dx_308
	bpOut = bp_312
	siOut = si_310
	diOut = di_21
	word16 v26_242 = (word16) v27_v26_321
	word16 v30_301 = (word16) v31_v30_326
	return ax_309
// DataOut:
// DataOut (flags):
// SymbolicIn:

fn0800_C04F_exit:
// DataOut:
// DataOut (flags):
// SymbolicIn:



void fn0800_C177(selector ds)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  ds:[0..15] ss:[0..15]
// LiveOut:
// Trashed: SCZDO ax bx cx di dx es si Top
// Preserved: bp sp
fn0800_C177_entry:
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_C177:
	word16 di_16
	word16 si_17
	word16 sp_18
	word16 bp_15 = fn0800_C379(ds, out si_17, out di_16)
	ax_29 = Mem7[ds:0x26E4:word16] + 0x12CE + (Mem7[ds:0x26E2:word16] <u 0xA600)
	Mem31[ss:bp_15 + 0x0004:word16] = v10_30
	Mem7[ss:bp_15 + 0x0004:ui32] = SEQ(Mem31[ss:bp_15 + 0x0006:word16], Mem7[ss:bp_15 + 0x0004:word16])
	ui32 v11_v10_579 = Mem7[ss:bp_15 + 0x0004:ui32] - SEQ(ax_29, dx_25 + 0xA600)
	Mem35[ss:bp_15 + 0x0006:word16] = SLICE(v11_v10_579, word16, 16)
	Mem39[Mem35[ss:bp_15 + 0x000C:segptr32] + 0x0002:byte] = 0x00
	Mem45[ss:sp_18 - 2:word16] = 0x0000
	Mem47[ss:sp_18 - 4:word16] = 0x003C
	Mem50[ss:sp_18 - 6:word16] = Mem47[ss:bp_15 + 0x0006:word16]
	Mem53[ss:sp_18 - 8:word16] = Mem50[ss:bp_15 + 0x0004:word16]
	// Failed to bind call argument.
	// Please report this issue at https://github.com/uxmal/reko
	word16 stackArg0 = <invalid>
	word16 bp_55
	word16 di_58
	word16 si_60
	word16 sp_61
	Mem70[Mem53[ss:bp_55 + 0x000C:segptr32] + 0x0003:byte] = (byte) fn0800_8BCA(bp_15, si_17, di_16, stackArg0, out dx_700, out bp_55, out si_60, out di_58)
	Mem76[ss:sp_61 - 2:word16] = 0x0000
	Mem78[ss:sp_61 - 4:word16] = 0x003C
	Mem81[ss:sp_61 - 6:word16] = Mem78[ss:bp_55 + 0x0006:word16]
	Mem84[ss:sp_61 - 8:word16] = Mem81[ss:bp_55 + 0x0004:word16]
	// Failed to bind call argument.
	// Please report this issue at https://github.com/uxmal/reko
	word16 stackArg0 = <invalid>
	word16 bp_86
	word16 di_89
	word16 dx_90
	word16 si_91
	word16 sp_92
	word16 ax_85 = fn0800_8BBB(bp_55, si_60, di_58, stackArg0, out cx_702, out dx_90, out bx_703, out bp_86, out si_91, out di_89)
	Mem97[ss:bp_86 + 0x0006:word16] = dx_90
	Mem98[ss:bp_86 + 0x0004:word16] = ax_85
	Mem104[ss:sp_92 - 2:word16] = 0x0000
	Mem106[ss:sp_92 - 4:word16] = 0x003C
	Mem109[ss:sp_92 - 6:word16] = Mem106[ss:bp_86 + 0x0006:word16]
	Mem112[ss:sp_92 - 8:word16] = Mem109[ss:bp_86 + 0x0004:word16]
	// Failed to bind call argument.
	// Please report this issue at https://github.com/uxmal/reko
	word16 stackArg0 = <invalid>
	word16 bp_114
	word16 di_117
	word16 si_119
	word16 sp_120
	Mem129[Mem112[ss:bp_114 + 0x000C:segptr32]:byte] = (byte) fn0800_8BCA(bp_86, si_91, di_89, stackArg0, out dx_705, out bp_114, out si_119, out di_117)
	Mem135[ss:sp_120 - 2:word16] = 0x0000
	Mem137[ss:sp_120 - 4:word16] = 0x003C
	Mem140[ss:sp_120 - 6:word16] = Mem137[ss:bp_114 + 0x0006:word16]
	Mem143[ss:sp_120 - 8:word16] = Mem140[ss:bp_114 + 0x0004:word16]
	// Failed to bind call argument.
	// Please report this issue at https://github.com/uxmal/reko
	word16 stackArg0 = <invalid>
	word16 bp_145
	word16 di_148
	word16 dx_149
	word16 si_150
	word16 sp_151
	word16 ax_144 = fn0800_8BBB(bp_114, si_119, di_117, stackArg0, out cx_707, out dx_149, out bx_708, out bp_145, out si_150, out di_148)
	Mem156[ss:bp_145 + 0x0006:word16] = dx_149
	Mem157[ss:bp_145 + 0x0004:word16] = ax_144
	Mem163[ss:sp_151 - 2:word16] = 0x0000
	Mem165[ss:sp_151 - 4:word16] = 0x88F8
	Mem168[ss:sp_151 - 6:word16] = Mem165[ss:bp_145 + 0x0006:word16]
	Mem171[ss:sp_151 - 8:word16] = Mem168[ss:bp_145 + 0x0004:word16]
	// Failed to bind call argument.
	// Please report this issue at https://github.com/uxmal/reko
	word16 stackArg0 = <invalid>
	word16 bp_173
	word16 di_176
	word16 si_178
	word16 sp_179
	Mem190[Mem171[ss:bp_173 + 0x0008:segptr32]:word16] = (fn0800_8BBB(bp_145, si_150, di_148, stackArg0, out cx_710, out dx_711, out bx_712, out bp_173, out si_178, out di_176) << 0x0002) + 0x07BC
	Mem196[ss:sp_179 - 2:word16] = 0x0000
	Mem198[ss:sp_179 - 4:word16] = 0x88F8
	Mem201[ss:sp_179 - 6:word16] = Mem198[ss:bp_173 + 0x0006:word16]
	Mem204[ss:sp_179 - 8:word16] = Mem201[ss:bp_173 + 0x0004:word16]
	// Failed to bind call argument.
	// Please report this issue at https://github.com/uxmal/reko
	word16 stackArg0 = <invalid>
	word16 dx_210
	word16 sp_212
	word16 bp_206
	word16 si_211
	word16 di_209
	word16 ax_205 = fn0800_8BCA(bp_173, si_178, di_176, stackArg0, out dx_210, out bp_206, out si_211, out di_209)
	Mem217[ss:bp_206 + 0x0006:word16] = dx_210
	Mem218[ss:bp_206 + 0x0004:word16] = ax_205
	word16 v10_30 = (word16) v11_v10_579
	branch Mem218[ss:bp_206 + 0x0006:word16] < 0x0000 l0800_C26F
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_C22B:
	branch Mem218[ss:bp_206 + 0x0006:word16] != 0x0000 l0800_C234
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_C22D:
	branch Mem218[ss:bp_206 + 0x0004:word16] <u 0x2250 l0800_C26F
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_C234:
	word16 v31_227 = Mem218[ss:bp_206 + 0x0004:word16] - 0x2250
	Mem228[ss:bp_206 + 0x0004:word16] = v31_227
	Mem232[ss:bp_206 + 0x0006:word16] = Mem228[ss:bp_206 + 0x0006:word16] - (v31_227 <u 0x0000)
	ptr32 es_bx_233 = Mem232[ss:bp_206 + 0x0008:segptr32]
	Mem237[es_bx_233:word16] = Mem232[es_bx_233:word16] + 0x0001
	Mem244[ss:sp_212 - 2:word16] = 0x0000
	Mem246[ss:sp_212 - 4:word16] = 0x2238
	Mem249[ss:sp_212 - 6:word16] = Mem246[ss:bp_206 + 0x0006:word16]
	Mem252[ss:sp_212 - 8:word16] = Mem249[ss:bp_206 + 0x0004:word16]
	// Failed to bind call argument.
	// Please report this issue at https://github.com/uxmal/reko
	word16 stackArg0 = <invalid>
	word16 bp_256
	word16 di_259
	word16 si_261
	word16 sp_262
	word16 ax_255 = fn0800_8BBB(bp_206, si_211, di_209, stackArg0, out cx_715, out dx_716, out bx_717, out bp_256, out si_261, out di_259)
	ptr32 es_bx_267 = Mem252[ss:bp_256 + 0x0008:segptr32]
	Mem271[es_bx_267:word16] = Mem252[es_bx_267:word16] + ax_255
	Mem277[ss:sp_262 - 2:word16] = 0x0000
	Mem279[ss:sp_262 - 4:word16] = 0x2238
	Mem282[ss:sp_262 - 6:word16] = Mem279[ss:bp_256 + 0x0006:word16]
	Mem285[ss:sp_262 - 8:word16] = Mem282[ss:bp_256 + 0x0004:word16]
	// Failed to bind call argument.
	// Please report this issue at https://github.com/uxmal/reko
	word16 stackArg0 = <invalid>
	word16 dx_291
	word16 ax_286 = fn0800_8BCA(bp_256, si_261, di_259, stackArg0, out dx_291, out bp_206, out si_211, out di_209)
	Mem298[ss:bp_206 + 0x0006:word16] = dx_291
	Mem299[ss:bp_206 + 0x0004:word16] = ax_286
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_C26F:
	branch Mem302[ds:0x26E6:word16] == 0x0000 l0800_C2B4
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_C276:
	word16 sp_310 = sp_212 - 2
	Mem312[ss:sp_310:word16] = 0x0000
	Mem314[ss:sp_310 - 2:word16] = 0x0018
	Mem318[ss:sp_310 - 4:word16] = Mem314[ss:bp_206 + 0x0006:word16]
	Mem321[ss:sp_310 - 6:word16] = Mem318[ss:bp_206 + 0x0004:word16]
	// Failed to bind call argument.
	// Please report this issue at https://github.com/uxmal/reko
	word16 stackArg0 = <invalid>
	word16 bp_325
	word16 di_328
	word16 si_330
	word16 sp_331
	Mem337[ss:sp_331 - 2:word16] = fn0800_8BCA(bp_206, si_211, di_209, stackArg0, out dx_727, out bp_325, out si_330, out di_328)
	Mem343[ss:sp_331 - 4:word16] = 0x0000
	Mem345[ss:sp_331 - 6:word16] = 0x0018
	Mem348[ss:sp_331 - 8:word16] = Mem345[ss:bp_325 + 0x0006:word16]
	Mem351[ss:sp_331 - 10:word16] = Mem348[ss:bp_325 + 0x0004:word16]
	// Failed to bind call argument.
	// Please report this issue at https://github.com/uxmal/reko
	word16 stackArg0 = <invalid>
	word16 sp_359
	Mem365[ss:sp_359 - 2:word16] = fn0800_8BBB(bp_325, si_330, di_328, stackArg0, out cx_729, out dx_730, out bx_731, out bp_206, out si_211, out di_209)
	Mem368[ss:sp_359 - 4:word16] = 0x0000
	Mem376[ss:sp_359 - 6:word16] = Mem368[Mem368[ss:bp_206 + 0x0008:segptr32]:word16] + 0xF84E
	sp_212 = sp_359 + 0x0002
	branch fn0800_C553(ds, Mem376[ss:sp_359 - 6:word16], Mem376[ss:sp_359 - 4:word16], Mem376[ss:sp_359 - 2:word16], Mem376[ss:sp_359:byte]) == 0x0000 l0800_C2B4
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_C2AC:
	word16 v43_390 = Mem376[ss:bp_206 + 0x0004:word16] + 0x0001
	Mem391[ss:bp_206 + 0x0004:word16] = v43_390
	Mem395[ss:bp_206 + 0x0006:word16] = Mem391[ss:bp_206 + 0x0006:word16] + (v43_390 <u 0x0000)
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_C2B4:
	word16 sp_402 = sp_212 - 2
	Mem404[ss:sp_402:word16] = 0x0000
	Mem406[ss:sp_402 - 2:word16] = 0x0018
	Mem410[ss:sp_402 - 4:word16] = Mem406[ss:bp_206 + 0x0006:word16]
	Mem413[ss:sp_402 - 6:word16] = Mem410[ss:bp_206 + 0x0004:word16]
	// Failed to bind call argument.
	// Please report this issue at https://github.com/uxmal/reko
	word16 stackArg0 = <invalid>
	word16 bp_417
	word16 di_420
	word16 si_422
	word16 sp_423
	Mem432[Mem413[ss:bp_417 + 0x000C:segptr32] + 0x0001:byte] = (byte) fn0800_8BCA(bp_206, si_211, di_209, stackArg0, out dx_720, out bp_417, out si_422, out di_420)
	Mem438[ss:sp_423 - 2:word16] = 0x0000
	Mem440[ss:sp_423 - 4:word16] = 0x0018
	Mem443[ss:sp_423 - 6:word16] = Mem440[ss:bp_417 + 0x0006:word16]
	Mem446[ss:sp_423 - 8:word16] = Mem443[ss:bp_417 + 0x0004:word16]
	// Failed to bind call argument.
	// Please report this issue at https://github.com/uxmal/reko
	word16 stackArg0 = <invalid>
	word16 bp_448
	word16 dx_452
	word16 ax_447 = fn0800_8BBB(bp_417, si_422, di_420, stackArg0, out cx_722, out dx_452, out bx_723, out bp_448, out si_724, out di_725)
	Mem459[ss:bp_448 + 0x0006:word16] = dx_452
	Mem460[ss:bp_448 + 0x0004:word16] = ax_447
	word16 v49_461 = Mem460[ss:bp_448 + 0x0004:word16] + 0x0001
	Mem462[ss:bp_448 + 0x0004:word16] = v49_461
	Mem466[ss:bp_448 + 0x0006:word16] = Mem462[ss:bp_448 + 0x0006:word16] + (v49_461 <u 0x0000)
	branch (Mem466[Mem466[ss:bp_448 + 0x0008:segptr32]:word16] & 0x0003) != 0x0000 l0800_C326
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_C2F3:
	branch Mem466[ss:bp_448 + 0x0006:word16] < 0x0000 l0800_C30B
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_C2F9:
	branch Mem466[ss:bp_448 + 0x0006:word16] > 0x0000 l0800_C301
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_C2FB:
	branch Mem466[ss:bp_448 + 0x0004:word16] <=u 0x003C l0800_C30B
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_C30B:
	branch Mem466[ss:bp_448 + 0x0006:word16] != 0x0000 l0800_C326
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_C311:
	branch Mem466[ss:bp_448 + 0x0004:word16] != 0x003C l0800_C326
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_C317:
	ptr32 es_bx_485 = Mem466[ss:bp_448 + 0x0008:segptr32]
	Mem488[es_bx_485 + 0x0003:byte] = 0x02
	Mem489[es_bx_485 + 0x0002:byte] = 0x1D
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_C301:
	word16 v52_493 = Mem466[ss:bp_448 + 0x0004:word16] - 0x0001
	Mem494[ss:bp_448 + 0x0004:word16] = v52_493
	Mem498[ss:bp_448 + 0x0006:word16] = Mem494[ss:bp_448 + 0x0006:word16] - (v52_493 <u 0x0000)
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_C326:
	Mem506[Mem502[ss:bp_448 + 0x0008:segptr32] + 0x0003:byte] = 0x00
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_C34D:
	int32 dx_ax_519 = (int32) (int16) Mem509[ds:(int16) Mem509[Mem509[ss:bp_448 + 0x0008:segptr32] + 0x0003:byte] + 0x26B4:byte]
	word16 dx_520 = SLICE(dx_ax_519, word16, 16)
	word16 ax_524 = (word16) dx_ax_519
	branch dx_520 < Mem509[ss:bp_448 + 0x0006:word16] l0800_C330
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_C362:
	branch dx_520 != Mem509[ss:bp_448 + 0x0006:word16] l0800_C369
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_C364:
	branch ax_524 <u Mem509[ss:bp_448 + 0x0004:word16] l0800_C330
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_C330:
	ptr32 es_bx_530 = Mem509[ss:bp_448 + 0x0008:segptr32]
	int32 dx_ax_539 = (int32) (int16) Mem509[ds:(int16) Mem509[es_bx_530 + 0x0003:byte] + 0x26B4:byte]
	Mem542[ss:bp_448 + 0x0004:word16] = v56_541
	Mem509[ss:bp_448 + 0x0004:ui32] = SEQ(Mem542[ss:bp_448 + 0x0006:word16], Mem509[ss:bp_448 + 0x0004:word16])
	ui32 v57_v56_581 = Mem509[ss:bp_448 + 0x0004:ui32] - dx_ax_539
	Mem547[ss:bp_448 + 0x0006:word16] = SLICE(v57_v56_581, word16, 16)
	selector es_531 = SLICE(es_bx_530, selector, 16)
	word16 bx_549 = Mem547[ss:bp_448 + 0x0008:word16]
	Mem551[es_531:bx_549 + 0x0003:byte] = Mem547[es_531:bx_549 + 0x0003:byte] + 0x01
	word16 v56_541 = (word16) v57_v56_581
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_C369:
	ptr32 es_bx_556 = Mem509[ss:bp_448 + 0x0008:segptr32]
	Mem560[es_bx_556 + 0x0003:byte] = Mem509[es_bx_556 + 0x0003:byte] + 0x01
	Mem563[es_bx_556 + 0x0002:byte] = Mem560[ss:bp_448 + 0x0004:byte]
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_C377:
	return
// DataOut:
// DataOut (flags):
// SymbolicIn:

fn0800_C177_exit:
// DataOut:
// DataOut (flags):
// SymbolicIn:



word16 fn0800_C379(selector ds, ptr16 & siOut, ptr16 & diOut)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  ds:[0..15] ss:[0..15]
// LiveOut: bp di si sp
// Trashed: SCZDO ax bp bx cx di dx es si sp Top
// Preserved:
fn0800_C379_entry:
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_C379:
	word16 sp_221
	word16 dx_21
	word16 ax_20 = fn0800_AFCB(ds, SEQ(ds, 0x26E8), out dx_21)
	word16 bp_193 = fp - 2
	branch (ax_20 | dx_21) != 0x0000 l0800_C397
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_C397:
	// Failed to bind call argument.
	// Please report this issue at https://github.com/uxmal/reko
	word16 stackArg4 = <invalid>
	branch fn0800_BFC7(SEQ(dx_21, ax_20), stackArg4, out cx_476, out es_477) >=u 0x0004 l0800_C3AA
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_C3AA:
	segptr32 ptrLoc06_400 = SEQ(dx_21, ax_20)
	selector es_61 = SLICE(ptrLoc06_400, selector, 16)
	branch ((int16) Mem45[ds:(int16) Mem45[ptrLoc06_400:byte] + 0x2251:byte] & 0x000C) == 0x0000 l0800_C42C
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_C3BD:
	branch ((int16) Mem45[ds:(int16) Mem45[es_61:ptrLoc06_400 + 0x0001:byte] + 0x2251:byte] & 0x000C) == 0x0000 l0800_C42C
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_C3D1:
	branch ((int16) Mem45[ds:(int16) Mem45[es_61:ptrLoc06_400 + 0x0002:byte] + 0x2251:byte] & 0x000C) == 0x0000 l0800_C42C
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_C3E5:
	branch Mem45[es_61:ptrLoc06_400 + 0x0003:byte] == 0x2D l0800_C404
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_C3EF:
	branch Mem45[es_61:ptrLoc06_400 + 0x0003:byte] == 0x2B l0800_C404
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_C3F6:
	branch (Mem45[ds:(int16) Mem45[es_61:ptrLoc06_400 + 0x0003:byte] + 0x2251:byte] & 0x02) == 0x00 l0800_C42C
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_C404:
	selector es_104 = SLICE(ptrLoc06_400, selector, 16)
	branch ((int16) Mem45[ds:(int16) Mem45[ptrLoc06_400 + 0x0003:byte] + 0x2251:byte] & 0x0002) != 0x0000 l0800_C467
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_C418:
	branch ((int16) Mem45[ds:(int16) Mem45[es_104:ptrLoc06_400 + 0x0004:byte] + 0x2251:byte] & 0x0002) != 0x0000 l0800_C467
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_C467:
	fn0800_B083(0x0000, Mem138[ds:0x26DE:word16], Mem134[ds:0x26E0:word16], 0x0000, 0x0004)
	// Failed to bind call argument.
	// Please report this issue at https://github.com/uxmal/reko
	word16 stackArg4 = <invalid>
	fn0800_C01E(SEQ(Mem162[ds:0x26DC:word16], Mem165[ds:0x26DA:word16]), stackArg4, SEQ(ptrLoc06_400, ptrLoc06_400), 0x0003)
	Mem183[Mem168[ds:0x26DA:segptr32] + 0x0003:byte] = 0x00
	word16 dx_197
	word16 sp_200
	Mem211[ss:sp_200 + 2:word16] = fn0800_A471(ds, SEQ(ptrLoc06_400, ptrLoc06_400 + 0x0003), out dx_197, out bp_193, out di)
	Mem213[ss:sp_200:word16] = dx_197
	word16 dx_223
	word16 ax_222 = fn0800_8F18(0x0E10, Mem213[ss:sp_200:word16], 0x0000, Mem213[ss:sp_200 + 2:word16], out cx_481, out dx_223)
	Mem229[ds:0x26E4:word16] = dx_223
	Mem230[ds:0x26E2:word16] = ax_222
	Mem231[ds:0x26E6:word16] = 0x0000
	sp_221 = sp_200 + 4
	word16 si_232 = 0x0003
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_C542:
	branch Mem231[Mem231[ss:bp_193 - 0x0004:segptr32] + si_232:byte] == 0x00 l0800_C54E
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_C54B:
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_C4CA:
	branch (Mem231[ds:(int16) Mem231[Mem231[ss:bp_193 - 0x0004:segptr32] + si_232:byte] + 0x2251:byte] & 0x0C) == 0x00 l0800_C541
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_C541:
	si_232 = si_232 + 0x0001
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_C4DA:
	word16 ax_255 = Mem231[ss:bp_193 - 0x0004:word16] + si_232
	Mem260[ss:sp_200 + 2:word16] = Mem231[ss:bp_193 - 0x0002:word16]
	Mem262[ss:sp_200:word16] = ax_255
	// Failed to bind call argument.
	// Please report this issue at https://github.com/uxmal/reko
	word16 stackArg4 = <invalid>
	sp_221 = sp_200 + 4
	branch fn0800_BFC7(Mem262[ss:sp_200:segptr32], stackArg4, out cx_483, out es_484) <u 0x0003 l0800_C54E
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_C4ED:
	ptr32 es_bx_277 = Mem262[ss:bp_193 - 0x0004:segptr32]
	selector es_278 = SLICE(es_bx_277, selector, 16)
	branch ((int16) Mem262[ds:(int16) Mem262[es_278:(word16) es_bx_277 + 0x0001 + si_232:byte] + 0x2251:byte] & 0x000C) == 0x0000 l0800_C54E
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_C501:
	branch ((int16) Mem262[ds:(int16) Mem262[es_278:Mem262[ss:bp_193 - 0x0004:word16] + 0x0002 + si_232:byte] + 0x2251:byte] & 0x000C) == 0x0000 l0800_C54E
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_C515:
	Mem299[ss:sp_200 + 2:word16] = 0x0003
	word16 ax_301 = Mem299[ss:bp_193 - 0x0004:word16] + si_232
	Mem305[ss:sp_200:word16] = Mem299[ss:bp_193 - 0x0002:word16]
	Mem307[ss:sp_200 - 2:word16] = ax_301
	Mem310[ss:sp_200 - 4:word16] = Mem307[ds:0x26E0:word16]
	Mem313[ss:sp_200 - 6:word16] = Mem310[ds:0x26DE:word16]
	// Failed to bind call argument.
	// Please report this issue at https://github.com/uxmal/reko
	word16 stackArg4 = <invalid>
	fn0800_C01E(Mem313[ss:sp_200 - 6:segptr32], stackArg4, Mem313[ss:sp_200 - 2:segptr32], Mem313[ss:sp_200 + 2:word16])
	Mem329[Mem313[ds:0x26DE:segptr32] + 0x0003:byte] = 0x00
	Mem330[ds:0x26E6:word16] = 0x0001
	sp_221 = sp_200 + 0x0004
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_C3A7:
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_C394:
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_C42C:
	Mem332[ds:0x26E6:word16] = 0x0001
	Mem333[ds:0x26E4:word16] = 0x0000
	Mem334[ds:0x26E2:word16] = 0x4650
	// Failed to bind call argument.
	// Please report this issue at https://github.com/uxmal/reko
	word16 stackArg4 = <invalid>
	fn0800_BF9E(SEQ(Mem341[ds:0x26DC:word16], Mem344[ds:0x26DA:word16]), stackArg4, SEQ(ds, 0x26EB))
	// Failed to bind call argument.
	// Please report this issue at https://github.com/uxmal/reko
	word16 stackArg4 = <invalid>
	fn0800_BF9E(SEQ(Mem363[ds:0x26E0:word16], Mem366[ds:0x26DE:word16]), stackArg4, SEQ(ds, 0x26EF))
	sp_221 = fp - 0x0008
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_C54E:
	word16 bp_388 = Mem383[ss:bp_193:word16]
	siOut = Mem383[ss:sp_221:word16]
	diOut = di
	return bp_388
// DataOut:
// DataOut (flags):
// SymbolicIn:

fn0800_C379_exit:
// DataOut:
// DataOut (flags):
// SymbolicIn:



word16 fn0800_C553(selector ds, word16 wArg02, word16 wArg04, word16 wArg06, byte bArg08)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  ds:[0..15] Stack +0002:[0..15] Stack +0004:[0..15] Stack +0006:[0..15] Stack +0008:[0..7]
// LiveOut: ax
// Trashed: SCZO ax bx cx dx Top
// Preserved: bp si sp
fn0800_C553_entry:
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_C553:
	branch wArg04 != 0x0000 l0800_C589
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_C589:
	branch wArg04 <u 0x0003 l0800_C59A
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_C58F:
	branch (wArg02 + 0x0046 & 0x0003) == 0x0000 l0800_C59D
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_C59A:
	wArg06 = wArg06 - 0x0001
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_C59D:
	wArg06 = wArg06 + Mem29[ds:(wArg04 - 0x0001 << 0x0001) + 0x26C0:word16]
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_C55D:
	word16 si_167 = wArg06
	branch wArg06 <u 0x003B l0800_C572
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_C566:
	branch (wArg02 + 0x0046 & 0x0003) != 0x0000 l0800_C572
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_C571:
	si_167 = wArg06 - 0x0001
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_C572:
	wArg04 = 0x0000
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_C57C:
	branch Mem55[ds:(wArg04 << 0x0001) + 0x26C0:word16] <=u si_167 l0800_C579
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_C579:
	wArg04 = wArg04 + 0x0001
	Mem55 = Mem63
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_C587:
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_C5AA:
	word16 ax_140
	branch wArg04 <u 0x0004 l0800_C62B
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_C5B0:
	branch wArg04 == 0x0004 l0800_C5BA
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_C5B2:
	branch wArg04 >u 0x000A l0800_C62B
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_C5B8:
	branch wArg04 != 0x000A l0800_C626
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_C5BA:
	word16 cx_103
	branch wArg02 <= 0x0010 l0800_C5D4
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_C5C5:
	branch wArg04 != 0x0004 l0800_C5D4
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_C5D4:
	cx_103 = Mem67[ds:(wArg04 << 0x0001) + 0x26C0:word16]
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_C5CB:
	cx_103 = Mem67[ds:(wArg04 << 0x0001) + 0x26BE:word16] + 0x0007
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_C5D8:
	branch ((byte) (wArg02 + 0x07B2) & 0x03) == 0x00 l0800_C5E5
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_C5E4:
	cx_103 = cx_103 - 0x0001
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_C5E5:
	word16 cx_126 = cx_103 - (uint16) ((uint32) ((uint16) (((word16) (wArg02 *u 0x016D) + ((wArg02 + 0x0001 >> 0x0002) + cx_103)) + 0x0004)) % 0x0007)
	branch wArg04 != 0x0004 l0800_C61A
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_C61A:
	branch wArg06 <u cx_126 l0800_C626
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_C61E:
	branch wArg06 != cx_126 l0800_C62B
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_C620:
	branch bArg08 >u 0x01 l0800_C62B
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_C60C:
	branch wArg06 >u cx_126 l0800_C626
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_C610:
	branch wArg06 != cx_126 l0800_C62B
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_C612:
	branch bArg08 <u 0x02 l0800_C62B
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_C62B:
	ax_140 = 0x0000
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_C618:
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_C626:
	ax_140 = 0x0001
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_C62D:
	return ax_140
// DataOut:
// DataOut (flags):
// SymbolicIn:

fn0800_C553_exit:
// DataOut:
// DataOut (flags):
// SymbolicIn:



word16 fn0800_C632(selector ds, word16 wArg02, word16 wArg04, word16 wArg06, word16 wArg08, ptr16 & cxOut, ptr16 & dxOut, ptr16 & bxOut, ptr16 & esOut)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  ds:[0..15] ss:[0..15] Stack +0002:[0..15] Stack +0004:[0..15] Stack +0006:[0..15] Stack +0008:[0..15]
// LiveOut: ax bx cx dx es
// Trashed: SCZO ax bx cx dx es Top
// Preserved: bp di si sp
fn0800_C632_entry:
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_C632:
	word16 ax_123
	segptr32 ptrLoc0E_307
	segptr32 ptrLoc06_312
	word16 v26_153
	word16 v22_130
	branch wArg02 <u Mem15[ds:0x24E8:word16] l0800_C64E
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_C64E:
	branch wArg08 >=u 0x0001 l0800_C65C
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_C65C:
	branch (Mem15[ds:(wArg02 << 0x0001) + 0x24EA:word16] & 0x0800) == 0x0000 l0800_C677
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_C668:
	fn0800_8E29(ds, wArg02, 0x0000, 0x0000, 0x0002, out cx, out dx_460, out bx_461)
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_C677:
	branch (Mem55[ds:(wArg02 << 0x0001) + 0x24EA:word16] & 0x4000) != 0x0000 l0800_C696
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_C696:
	Mem62[ds:(wArg02 << 0x0001) + 0x24EA:word16] = Mem55[ds:(wArg02 << 0x0001) + 0x24EA:word16] & 0xFDFF
	bx = wArg02 << 0x0001
	word16 wLoc08_294 = wArg08
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_C727:
	word16 wLoc06_296 = fp - 0x0090
	ptrLoc06_310 = ptrLoc06_370
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_C731:
	word16 si_175
	word16 ax_126
	segptr32 ptrLoc06_310
	branch wLoc08_294 == 0x0000 l0800_C73A
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_C73A:
	si_175 = wLoc06_296 - (fp - 0x0090)
	dx = 0x0000 - (si_175 <u 0x0000)
	branch si_175 <=u 0x0000 l0800_C770
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_C74E:
	word16 ax_108 = fn0800_C779(ds, wArg02, SEQ(ss, fp - 0x0090), si_175, out cx, out dx_462, out bx)
	dx = ax_108
	branch ax_108 == si_175 l0800_C770
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_C770:
	ax_123 = wArg08
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_C762:
	branch ax_108 == 0xFFFF l0800_C71A
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_C767:
	ax_126 = wArg08
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_C737:
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_C6B4:
	word16 v25_142
	word16 v20_127 = wLoc08_294 - 0x0001
	wLoc08_294 = v20_127
	v22_130 = ptrLoc0E_464 + 0x0001
	byte al_134 = Mem131[ptrLoc0E_464:byte]
	ptrLoc06_312 = ptrLoc06_310
	ptrLoc0E_307 = ptrLoc0E_368
	branch al_134 != 0x0A l0800_C6D1
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_C6C7:
	Mem141[ptrLoc06_310:byte] = 0x0D
	v25_142 = ptrLoc06_310 + 0x0001
	ptrLoc0E_307 = ptrLoc0E_369
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_C6D1:
	Mem152[ptrLoc06_312:byte] = al_134
	v26_153 = ptrLoc06_312 + 0x0001
	word16 dx_158 = v26_153 - (fp - 0x0090)
	word16 bx_161 = 0x0000 - (dx_158 <u 0x0000)
	ptrLoc06_312 = DPB(ptrLoc06_310, v25_142, 0) (alias)
	es = SLICE(ptrLoc06_312, selector, 16) (alias)
	wLoc06_296 = v26_153
	bx = bx_161
	ptrLoc06_310 = ptrLoc06_371
	ptrLoc0E_464 = ptrLoc0E_307
	branch bx_161 < 0x0000 l0800_C731
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_C6EF:
	branch bx_161 != 0x0000 l0800_C6F7
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_C6F1:
	ptrLoc06_310 = ptrLoc06_372
	ptrLoc0E_465 = ptrLoc0E_307
	branch dx_158 <u 0x0080 l0800_C731
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_C6F7:
	si_175 = v26_153 - (fp - 0x0090)
	word16 ax_194 = fn0800_C779(ds, wArg02, SEQ(ss, fp - 0x0090), si_175, out cx, out dx_463, out bx)
	dx = ax_194
	branch ax_194 == si_175 l0800_C727
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_C715:
	branch ax_194 != 0xFFFF l0800_C71F
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_C71F:
	ax_126 = wArg08 - v20_127
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_C76A:
	ax_123 = ax_126 + dx - si_175
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_C71A:
	ax_123 = 0xFFFF
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_C76E:
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_C683:
	ax_123 = fn0800_C779(ds, wArg02, SEQ(wArg06, wArg04), wArg08, out cx, out dx, out bx)
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_C657:
	ax_123 = 0x0000
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_C644:
	ax_123 = fn0800_8D2B(ds, 0x0006)
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_C773:
	cxOut = cx
	dxOut = dx
	bxOut = bx
	esOut = es
	ptrLoc0E_307 = SEQ(wArg06, wArg04) (alias)
	ptrLoc0E_368 = DPB(ptrLoc0E_307, v22_130, 0) (alias)
	ptrLoc0E_369 = DPB(ptrLoc0E_307, v22_130, 0) (alias)
	ptrLoc06_370 = SEQ(ss, fp - 0x0090) (alias)
	ptrLoc06_371 = DPB(ptrLoc06_312, v26_153, 0) (alias)
	ptrLoc06_372 = DPB(ptrLoc06_312, v26_153, 0) (alias)
	return ax_123
// DataOut:
// DataOut (flags):
// SymbolicIn:

fn0800_C632_exit:
// DataOut:
// DataOut (flags):
// SymbolicIn:



word16 fn0800_C779(selector ds, word16 wArg02, segptr32 ptrArg04, word16 wArg08, ptr16 & cxOut, ptr16 & dxOut, ptr16 & bxOut)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  ds:[0..15] Stack +0002:[0..15] Stack +0004:[0..31] Stack +0008:[0..15]
// LiveOut: ax bx cx dx
// Trashed: SCZO ax bx cx dx Top
// Preserved: bp ds sp
fn0800_C779_entry:
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_C779:
	word16 ax_37
	word16 wLoc04_62
	word16 bx_10 = wArg02 << 0x0001
	branch (Mem7[ds:(wArg02 << 0x0001) + 0x24EA:word16] & 0x0001) == 0x0000 l0800_C78F
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_C78F:
	bx_10 = wArg02
	cx = wArg08
	dx = (word16) ptrArg04 (alias)
	word16 ax_23
	branch msdos_write_file(wArg02, wArg08, ptrArg04, out ax_23) l0800_C7AF
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_C7AF:
	wLoc04_62 = ax_23
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_C7A0:
	Mem34[ds:(wArg02 << 0x0001) + 0x24EA:word16] = Mem30[ds:(wArg02 << 0x0001) + 0x24EA:word16] | 0x1000
	bx_10 = wArg02 << 0x0001
	ax_37 = ax_23
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_C789:
	wLoc04_62 = 0x0005
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_C7B0:
	ax_37 = fn0800_8D2B(ds, wLoc04_62)
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0800_C7B3:
	cxOut = cx
	dxOut = dx
	bxOut = bx_10
	return ax_37
// DataOut:
// DataOut (flags):
// SymbolicIn:

fn0800_C779_exit:
// DataOut:
// DataOut (flags):
// SymbolicIn:



void fn1483_0ADB()
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse: 
// LiveOut:
// Trashed: Top
// Preserved: sp
fn1483_0ADB_entry:
// DataOut:
// DataOut (flags):
// SymbolicIn:

l1483_0ADB:
	return
// DataOut:
// DataOut (flags):
// SymbolicIn:

fn1483_0ADB_exit:
// DataOut:
// DataOut (flags):
// SymbolicIn:



void fn1483_0ADC(word16 ax, byte ch, byte cl, byte dh, byte dl, byte bl, byte bh, word16 bp, word16 si, word16 di, selector es, selector ds, word16 wArg00, word16 wArg02, word16 wArg04, word16 wArg06, word16 wArg08, word16 wArg0A, word16 wArg0C, word16 wArg0E)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  ax:[0..15] bl:[0..15] bp:[0..15] bx:[8..15] ch:[0..7] cs:[0..15] cx:[0..7] dh:[0..7] di:[0..15] ds:[0..15] dx:[0..7] es:[0..15] si:[0..15] ss:[0..15] Stack +0000:[0..15] Stack +0002:[0..15]
// LiveOut:
// Trashed: SCZO ax bp bx cx di dx es si Top
// Preserved: sp
fn1483_0ADC_entry:
	word16 cx_22 = DPB(cx, ch, 8)
	word16 bx_12 = DPB(bx, bl, 0)
	word16 dx_19 = DPB(dx, dh, 8)
// DataOut:
// DataOut (flags):
// SymbolicIn:

l1483_0ADC:
	// Failed to bind call argument.
	// Please report this issue at https://github.com/uxmal/reko
	word16 stackArg8 = <invalid>
	selector es_31
	int8 Top_34
	ST40[Top_34:real64] = Mem0[es_31:fn1483_0D3F(ax, ch, cx_22, dh, dx_19, bl, bx_12, bp, si, di, es, ds, wLoc02, wArg00, wArg02, stackArg8, out es_31, out Top_34) + 0xE086:real32] - ST[Top_34:real64]
	return
// DataOut:
// DataOut (flags):
// SymbolicIn:

fn1483_0ADC_exit:
// DataOut:
// DataOut (flags):
// SymbolicIn:



int8 fn1483_0C11(byte al, word16 cx, word16 si, word16 di, selector es)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  al:[0..7] cx:[0..15] di:[0..15] es:[0..15] si:[0..15] ss:[0..15]
// LiveOut: Top
// Trashed: SCZO ax bx cx dx sp Top
// Preserved: si
l1483_0C11:
// DataOut:
// DataOut (flags):
// SymbolicIn:

fn1483_0C11_entry:
// DataOut:
// DataOut (flags):
// SymbolicIn:

l1483_0C11:
	branch al != Mem11[ss:si:byte] l1483_0C4D
// DataOut:
// DataOut (flags):
// SymbolicIn:

l1483_0C4D:
	word16 ax_28 = DPB(ax, al + 0x01, 0)
// DataOut:
// DataOut (flags):
// SymbolicIn:

l1483_0C53_thunk_fn1483_0C55:
	// Failed to bind call argument.
	// Please report this issue at https://github.com/uxmal/reko
	// Failed to bind call argument.
	// Please report this issue at https://github.com/uxmal/reko
	// Failed to bind call argument.
	// Please report this issue at https://github.com/uxmal/reko
	word16 stackArg0 = <invalid>
	word16 stackArg2 = <invalid>
	word16 stackArg4 = <invalid>
	return fn1483_0C55(ax_28, ds, stackArg0, stackArg2, stackArg4)
// DataOut:
// DataOut (flags):
// SymbolicIn:

l1483_0C1B:
	branch al - 0x8C - (al <u Mem11[ss:si:byte]) != 0x00 && cx != 0x0001 l1483_0C22_thunk_fn1483_0C6C
// DataOut:
// DataOut (flags):
// SymbolicIn:

l1483_0C22_thunk_fn1483_0C6C:
	return fn1483_0C6C(0x55, 0x1955, cx - 0x0001, 0x8000, bx, bp, si, di, es, ds)
// DataOut:
// DataOut (flags):
// SymbolicIn:

fn1483_0C11_exit:
// DataOut:
// DataOut (flags):
// SymbolicIn:

l1483_0C24:
	Mem55[es:di:word16] = 0x1955
// DataOut:
// DataOut (flags):
// SymbolicIn:



int8 fn1483_0C55(word16 ax, selector ds, word16 wArg00, word16 wArg02, word16 wArg04)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  ax:[0..15] ds:[0..15] Stack +0000:[0..15]
// LiveOut: Top
// Trashed: SCZO ax di dx si sp Top
// Preserved:
l1483_0C55:
// DataOut:
// DataOut (flags):
// SymbolicIn:

fn1483_0C55_entry:
// DataOut:
// DataOut (flags):
// SymbolicIn:

l1483_0C55:
	branch Z l1483_0C55_thunk_fn1483_0C11
// DataOut:
// DataOut (flags):
// SymbolicIn:

l1483_0C55_thunk_fn1483_0C11:
	return fn1483_0C11((byte) ax, cx, si, di, es)
// DataOut:
// DataOut (flags):
// SymbolicIn:

l1483_0C57:
	return 0
// DataOut:
// DataOut (flags):
// SymbolicIn:

fn1483_0C55_exit:
// DataOut:
// DataOut (flags):
// SymbolicIn:



int8 fn1483_0C6C(byte al, byte ah, word32 ecx, word16 dx, word16 bx, word16 bp, word16 si, word16 di, selector es, selector ds)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  al:[0..15] ax:[8..15] bp:[0..15] bx:[0..15] cs:[0..15] cx:[0..31] di:[0..15] ds:[0..15] dx:[0..15] ecx:[16..31] es:[0..15] si:[0..15] ss:[0..15]
// LiveOut: Top
// Trashed: SCZDO bp di ds dx eax ebx ecx es si sp ss Top
// Preserved:
l1483_0C6C:
// DataOut:
// DataOut (flags):
// SymbolicIn:

fn1483_0C6C_entry:
	word16 ax_14 = DPB(ax, al, 0)
	word32 ecx_19 = DPB(ecx, cx, 0)
// DataOut:
// DataOut (flags):
// SymbolicIn:

l1483_0C6C:
	__daa(al, &al)
	word16 bx_25
	word16 di_26
	selector ds_27
	word16 dx_28
	word32 ecx_29
	selector es_30
	word16 si_31
	word16 sp_32
	selector ss_33
	word16 ax_23 = fn1483_1BB8(al, ax_14, ecx_19, dx, bx, bp, si, di, es, ds, out cx_134, out dl_135, out bx_25, out si_31, out di_26, out es_30, out ds_27)
	word16 di_40 = di_26 + Mem0[ds_27:bx_25:word16]
	word16 ax_41 = (word16) (SEQ(SLICE(dx_28, byte, 8), ax_23) + SEQ(Mem0[ds_27:si_31 + 0x147C:byte], Mem0[ds_27:bx_25 + 0x3303:word16]))
	word16 sp_59 = Mem0[ss_33:sp_32:word16]
	word16 v17_62 = Mem0[ds_27:ax_41 + 0x020E + di_40:word16] + di_40
	Mem63[ds_27:ax_41 + 0x020E + di_40:word16] = v17_62
	word16 cx_65 = (word16) ecx_29
	byte ch_85 = SLICE(cx_65 - 0x0001, byte, 8)
	word32 ecx_102 = DPB(ecx_29, cx_65 - 0x0001, 0)
	branch v17_62 != 0x0000 && cx_65 != 0x0001 l1483_0C85_thunk_fn1483_0CA0
// DataOut:
// DataOut (flags):
// SymbolicIn:

l1483_0C85_thunk_fn1483_0CA0:
	return fn1483_0CA0(Mem63[ss_33:sp_59 + 2:word16], Mem63[ss_33:sp_59 + 4:word16], Mem63[ss_33:sp_59 + 6:word16])
// DataOut:
// DataOut (flags):
// SymbolicIn:

l1483_0C87:
	word16 ax_82 = Mem63[ds_27:ax_41:word16]
	Mem84[ss_33:sp_59:word16] = si_31
	Mem89[es_30:di_40:byte] = Mem84[ds_27:si_31:byte]
	word32 ecx_103 = DPB(ecx_102, ch_85 + (byte) ax_82, 8)
// DataOut:
// DataOut (flags):
// SymbolicIn:

l1483_0C8F_thunk_fn1483_0C91:
	// Failed to bind call argument.
	// Please report this issue at https://github.com/uxmal/reko
	// Failed to bind call argument.
	// Please report this issue at https://github.com/uxmal/reko
	// Failed to bind call argument.
	// Please report this issue at https://github.com/uxmal/reko
	// Failed to bind call argument.
	// Please report this issue at https://github.com/uxmal/reko
	selector stackArg0 = <invalid>
	word16 stackArg2 = <invalid>
	word16 stackArg4 = <invalid>
	word16 stackArg6 = <invalid>
	int8 Top_105
	fn1483_0C91(ax_82 * 0x0002, (byte) ecx_103, (word16) ecx_103, ax_41, bp_24, si_31 + 0x0001, di_40 + 0x0001, ds_27, stackArg0, stackArg2, stackArg4, stackArg6, out es_140, out Top_105)
	return Top_105
// DataOut:
// DataOut (flags):
// SymbolicIn:

fn1483_0C6C_exit:
// DataOut:
// DataOut (flags):
// SymbolicIn:



word16 fn1483_0C91(byte al, byte ch, byte cl, word16 bx, word16 bp, word16 si, word16 di, selector ds, selector psegArg00, word16 wArg02, word16 wArg04, word16 wArg06, ptr16 & esOut, ptr16 & TopOut)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  ax:[0..7] bp:[0..15] bx:[0..15] ch:[0..7] cx:[0..7] di:[0..15] ds:[0..15] si:[0..15] ss:[0..15] Stack +0000:[0..15] Stack +0002:[0..15] Stack +0004:[0..15] Stack +0006:[0..15]
// LiveOut: di es Top
// Trashed: SCZO ax bp bx cx di dx es sp Top
// Preserved:
l1483_0C91:
// DataOut:
// DataOut (flags):
// SymbolicIn:

fn1483_0C91_entry:
	byte ah_46 = SLICE(ax, byte, 8)
	byte al_12 = (byte) ax
	word16 ax_49 = DPB(ax, ah_46, 8)
	word16 cx_23 = DPB(cx, ch, 8)
	byte bl_45 = (byte) bx
// DataOut:
// DataOut (flags):
// SymbolicIn:

l1483_0C91:
	byte al_14 = al_12 + ch
	word16 ax_19 = DPB(ax, al_14, 0)
	branch !OVERFLOW(al_14) l1483_0C96_thunk_fn1483_0C55
// DataOut:
// DataOut (flags):
// SymbolicIn:

l1483_0C96_thunk_fn1483_0C55:
	// Failed to bind call argument.
	// Please report this issue at https://github.com/uxmal/reko
	// Failed to bind call argument.
	// Please report this issue at https://github.com/uxmal/reko
	word16 stackArg2 = <invalid>
	word16 stackArg4 = <invalid>
	int8 Top_31 = fn1483_0C55(ax_19, ds, wArg02, stackArg2, stackArg4)
	esOut = <invalid>
	TopOut = Top_31
	return di
// DataOut:
// DataOut (flags):
// SymbolicIn:

l1483_0C98:
	branch Mem0[ds:bx + si:word16] *s 0x0018 == 0x0000 && cx_23 != 0x0001 l1483_0CA9_in_fn1483_0C91
// DataOut:
// DataOut (flags):
// SymbolicIn:

l1483_0CA9_in_fn1483_0C91:
	word16 dx_39 = Mem0[ds:si + 0x173E:word16] *s 0x0C62
	Mem43[ds:bx:byte] = v13
	byte bl_47 = bl_45 + ah_46
	word16 bx_51 = DPB(bx, bl_47, 0)
	Mem53[ds:bx_51 - 0x0056 + di:byte] = __rol(Mem43[ds:bx_51 - 0x0056 + di:byte], 0xE2)
	Mem55[ss:bp + 0x007B:word16] = __ror(Mem53[ss:bp + 0x007B:word16], 0x01)
	Mem60[ds:bx_51:byte] = v21
	word16 bx_67 = DPB(bx, bl_47 & Mem60[ds:bx_51:byte], 0)
	Mem64[psegArg00:di:byte] = (byte) (ax_49 - 0x32AC)
	Mem70[ds:bx_67:word16] = v23
	Mem75[ds:di + 0x0015:word16] = ax_49 - 0xBDCB
	word16 bx_82
	int8 Top_83
	call fn1483_4FE0 (retsize: 2;)
		uses: ax:v25,bp:bp - 0x0001,bx:bx_67,cx:di + 0x0001 - si,di:di + 0x0001,ds:ds,dx:dx_39,es:psegArg00,si:si,sp:fp + 2,ss:ss,Stack +0000:psegArg00,Stack +0002:wArg02,Stack +0004:wArg04,Stack +0006:wArg06,Top:0
		defs: bx:bx_82,Top:Top_83
	Mem87[ds:0xF7E3:word16] = v26
	Mem91[ds:bx_82 + (di + 0x0001):word16] = v27
	__inw(0x8B)
	esOut = <invalid>
	TopOut = Top_83
	return di + 0x0001
// DataOut:
// DataOut (flags):
// SymbolicIn:

l1483_0C9D:
	Mem106[ds:bx + 0x2203 + si:word16] = Mem0[ds:bx + 0x2203 + si:word16] + (cx_23 - 0x0001)
// DataOut:
// DataOut (flags):
// SymbolicIn:

l1483_0C9D_thunk_fn1483_0CA1:
	int8 Top_114
	word16 di_112 = fn1483_0CA1(wArg02, wArg04, wArg06, out Top_114)
	esOut = <invalid>
	TopOut = Top_114
	return di_112
// DataOut:
// DataOut (flags):
// SymbolicIn:

fn1483_0C91_exit:
// DataOut:
// DataOut (flags):
// SymbolicIn:



int8 fn1483_0CA0(word16 wArg00, word16 wArg02, word16 wArg04)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  Stack +0000:[0..15] Stack +0002:[0..15] Stack +0004:[0..15]
// LiveOut: Top
// Trashed: SCZO ax bp bx cx di dx Top
// Preserved: sp
l1483_0CA0:
// DataOut:
// DataOut (flags):
// SymbolicIn:

fn1483_0CA0_entry:
// DataOut:
// DataOut (flags):
// SymbolicIn:

l1483_0CA0:
// DataOut:
// DataOut (flags):
// SymbolicIn:

l1483_0CA0_thunk_fn1483_0CA1:
	int8 Top_17
	fn1483_0CA1(wArg00, wArg02, wArg04, out Top_17)
	return Top_17
// DataOut:
// DataOut (flags):
// SymbolicIn:

fn1483_0CA0_exit:
// DataOut:
// DataOut (flags):
// SymbolicIn:



word16 fn1483_0CA1(word16 wArg00, word16 wArg02, word16 wArg04, ptr16 & TopOut)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  Stack +0000:[0..15] Stack +0002:[0..15] Stack +0004:[0..15]
// LiveOut: di Top
// Trashed: SCZO ax bp bx cx di dx Top
// Preserved: sp
l1483_0CA1:
	call fn1483_FD4E (retsize: 2;)
		uses: ax:DPB(ax, ah + Mem0[ds:bx + si:byte], 8),bp:bp,bx:bx,cx:cx,di:di,ds:ds,dx:dx,es:es,si:si,sp:sp,ss:ss,Stack +0000:wLoc02,Top:Top
		defs: ax:ax_16,bx:bx_12,sp:sp_9,Top:Top_23
	ah_33 = SLICE(ax_16, byte, 8) (alias)
	bl_32 = (byte) bx_12 (alias)
	ax_35 = DPB(ax_16, ah_33, 8) (alias)
// DataOut:
// DataOut (flags):
// SymbolicIn:

l1483_0CA9:
	dx_27 = Mem0[ds:si + 0x173E:word16] *s 0x0C62
	Mem30[ds:bx_12:byte] = Mem0[ds:bx_12:byte] + (byte) dx_27
	bl_34 = bl_32 + ah_33
	bx_37 = DPB(bx_12, bl_34, 0) (alias)
	Mem39[ds:bx_37 - 0x0056 + di:byte] = __rol(Mem30[ds:bx_37 - 0x0056 + di:byte], 0xE2)
	v46_40 = (Mem39[ss:bp + 0x007B:word16] & 0x0002) != 0x0000
	Mem41[ss:bp + 0x007B:word16] = __ror(Mem39[ss:bp + 0x007B:word16], 0x01)
	Mem44[ds:bx_37:byte] = Mem41[ds:bx_37:byte] + bl_34 + v46_40
	bx_51 = DPB(bx_12, bl_34 & Mem44[ds:bx_37:byte], 0) (alias)
	Mem48[es:di:byte] = (byte) (ax_35 - 0x32AC)
	Mem53[ds:bx_51:word16] = Mem48[ds:bx_51:word16] + bx_51
	v49_57 = Mem53[ds:di + 0x0015:word16]
	Mem58[ds:di + 0x0015:word16] = ax_35 - 0xBDCB
	call fn1483_4FE0 (retsize: 2;)
		uses: ax:v49_57,bp:bp - 0x0001,bx:bx_51,cx:di + 0x0001 - si,di:di + 0x0001,ds:ds,dx:dx_27,es:es,si:si,sp:sp_9,ss:ss,Stack +0000:wLoc02,Top:Top_23
		defs: bx:bx_61,dx:dx_63,Top:Top_65
	Mem68[ds:0xF7E3:word16] = Mem58[ds:0xF7E3:word16] - dx_63
	Mem71[ds:bx_61 + (di + 0x0001):word16] = Mem68[ds:bx_61 + (di + 0x0001):word16] + (bp - 0x0001)
	__inw(0x8B)
// DataOut:
// DataOut (flags):
// SymbolicIn:

l1483_0CE5:
	TopOut = Top_65
	return <invalid>
// DataOut:
// DataOut (flags):
// SymbolicIn:

fn1483_0CA1_entry:
// DataOut:
// DataOut (flags):
// SymbolicIn:

l1483_0CA1:
	Mem90[ds:bx + di:word16] = Mem88[ds:bx + di:word16] + si
	call fn1483_FD4E (retsize: 2;)
		uses: ax:DPB(ax, ah + Mem90[ds:bx + si:byte], 8),bp:bp,bx:bx,cx:cx,di:di,ds:ds,dx:dx,es:es,si:si,sp:fp - 2,ss:ss,Stack +0002:es,Stack +0004:wArg00,Stack +0006:wArg02,Stack +0008:wArg04,Top:0
		defs: ax:ax_97,bx:bx_94,sp:sp_93,Top:Top_100
	ah_111 = SLICE(ax_97, byte, 8) (alias)
	bl_110 = (byte) bx_94 (alias)
	ax_113 = DPB(ax_97, ah_111, 8) (alias)
// DataOut:
// DataOut (flags):
// SymbolicIn:

l1483_0CA9_in_fn1483_0CA1:
	dx_104 = Mem90[ds:si + 0x173E:word16] *s 0x0C62
	Mem108[ds:bx_94:byte] = v13
	bl_112 = bl_110 + ah_111
	bx_115 = DPB(bx_94, bl_112, 0) (alias)
	Mem117[ds:bx_115 - 0x0056 + di:byte] = __rol(Mem108[ds:bx_115 - 0x0056 + di:byte], 0xE2)
	Mem119[ss:bp + 0x007B:word16] = __ror(Mem117[ss:bp + 0x007B:word16], 0x01)
	Mem124[ds:bx_115:byte] = v21
	bx_131 = DPB(bx_94, bl_112 & Mem124[ds:bx_115:byte], 0) (alias)
	Mem128[es:di:byte] = (byte) (ax_113 - 0x32AC)
	Mem134[ds:bx_131:word16] = v23
	Mem139[ds:di + 0x0015:word16] = ax_113 - 0xBDCB
	call fn1483_4FE0 (retsize: 2;)
		uses: ax:v25,bp:bp - 0x0001,bx:bx_131,cx:di + 0x0001 - si,di:di + 0x0001,ds:ds,dx:dx_104,es:es,si:si,sp:sp_93,ss:ss,Stack +0000:es,Stack +0002:wArg00,Stack +0004:wArg02,Stack +0006:wArg04,Top:Top_100
		defs: bx:bx_143,Top:Top_147
	Mem151[ds:0xF7E3:word16] = v26
	Mem155[ds:bx_143 + (di + 0x0001):word16] = v27
	__inw(0x8B)
	TopOut = Top_147
	return <invalid>
// DataOut:
// DataOut (flags):
// SymbolicIn:

fn1483_0CA1_exit:
// DataOut:
// DataOut (flags):
// SymbolicIn:



word16 fn1483_0CFA(byte al, byte ch, byte bl, word16 si, selector ds, selector psegArg00, word16 wArg02, word16 wArg04, word16 wArg06, ptr16 & esOut, ptr16 & TopOut)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  al:[0..7] bl:[0..7] ch:[0..7] ds:[0..15] si:[0..15] Stack +0000:[0..15] Stack +0002:[0..15] Stack +0004:[0..15] Stack +0006:[0..15]
// LiveOut: di es Top
// Trashed: SCZO ax bp bx cx di dx es si sp Top
// Preserved:
l1483_0CFA:
// DataOut:
// DataOut (flags):
// SymbolicIn:

fn1483_0CFA_entry:
// DataOut:
// DataOut (flags):
// SymbolicIn:

l1483_0CFA:
	Mem10[ds:si + 0xD832:byte] = Mem0[ds:si + 0xD832:byte] - ch - C
// DataOut:
// DataOut (flags):
// SymbolicIn:

l1483_0CFA_thunk_fn1483_0CFC:
	selector es_21
	int8 Top_24
	word16 di_19 = fn1483_0CFC(al, bl, psegArg00, wArg02, wArg04, wArg06, out es_21, out Top_24)
	esOut = es_21
	TopOut = Top_24
	return di_19
// DataOut:
// DataOut (flags):
// SymbolicIn:

fn1483_0CFA_exit:
// DataOut:
// DataOut (flags):
// SymbolicIn:



word16 fn1483_0CFC(byte al, byte bl, selector psegArg00, word16 wArg02, word16 wArg04, word16 wArg06, ptr16 & esOut, ptr16 & TopOut)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  al:[0..7] bl:[0..7] Stack +0000:[0..15] Stack +0002:[0..15] Stack +0004:[0..15] Stack +0006:[0..15]
// LiveOut: di es Top
// Trashed: SCZO ax bp bx cx di dx es si sp Top
// Preserved:
l1483_0CFC:
	ax_12 = DPB(ax, Mem0[ds:bx + di:byte], 0) (alias)
	Mem9[ss:bp + si:word16] = 0xD1FF
	branch cx == 0x0000 l1483_0D04_thunk_fn1483_0C91
	ch_13 = SLICE(cx, byte, 8) (alias)
	ch_58 = SLICE(cx, byte, 8) (alias)
	cx_14 = DPB(cx, ch_13, 8) (alias)
	cx_59 = DPB(cx, ch_58, 8) (alias)
// DataOut:
// DataOut (flags):
// SymbolicIn:

l1483_0D04_thunk_fn1483_0C91:
	di_24 = fn1483_0C91(ax_12, ch_13, cx_14, bx, bp, si, di, ds, Mem9[ss:sp:selector], Mem9[ss:sp + 2:word16], Mem9[ss:sp + 4:word16], Mem9[ss:sp + 6:word16], out es_20, out Top_22)
	esOut = es_20
	TopOut = Top_22
	return di_24
// DataOut:
// DataOut (flags):
// SymbolicIn:

l1483_0D02_thunk_fn1483_0D06:
	di_36 = fn1483_0D06(ax_12, dx, bx, ds, fs)
	esOut = es
	TopOut = Top
	return di_36
// DataOut:
// DataOut (flags):
// SymbolicIn:

fn1483_0CFC_entry:
// DataOut:
// DataOut (flags):
// SymbolicIn:

l1483_0CFC:
	bx_52 = DPB(bx, bl ^ al, 0) (alias)
	ax_57 = DPB(ax, Mem0[ds:bx_52 + di:byte], 0) (alias)
	Mem55[ss:bp + si:word16] = 0xD1FF
	branch cx == 0x0000 l1483_0D04_thunk_fn1483_0C91
// DataOut:
// DataOut (flags):
// SymbolicIn:

l1483_0D04_thunk_fn1483_0C91:
	di_68 = fn1483_0C91(ax_57, ch_58, cx_59, bx_52, bp, si, di, ds, psegArg00, wArg02, wArg04, wArg06, out es_64, out Top_66)
	esOut = es_64
	TopOut = Top_66
	return di_68
// DataOut:
// DataOut (flags):
// SymbolicIn:

l1483_0D04_thunk_fn1483_0D06:
	di_78 = fn1483_0D06(ax_57, dx, bx_52, ds, fs)
	esOut = es
	TopOut = 0
	return di_78
// DataOut:
// DataOut (flags):
// SymbolicIn:

fn1483_0CFC_exit:
// DataOut:
// DataOut (flags):
// SymbolicIn:



word16 fn1483_0D06(word16 ax, word16 dx, word16 bx, selector ds, selector fs)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  ax:[0..15] bx:[0..15] ds:[0..15] dx:[0..15] fs:[0..15] ss:[0..15]
// LiveOut: di
// Trashed: SCZO ax bp bx cx di dx si sp Top
// Preserved:
fn1483_0D06_entry:
// DataOut:
// DataOut (flags):
// SymbolicIn:

l1483_0D06:
	Mem10[ds:bx + 0xE209:word16] = Mem0[ds:bx + 0xE209:word16] - dx - C
	branch bx == dx l1483_0D2B
// DataOut:
// DataOut (flags):
// SymbolicIn:

l1483_0D11:
	msdos_display_string(SEQ(ds, 0x0D21))
	di = Mem10[ss:v4:word16]
	word16 bp_28 = Mem10[ss:v4 + 0x0004:word16]
	Mem42[fs:bp_28 + 0x0052 + di:byte] = Mem10[fs:bp_28 + 0x0052 + di:byte] & (byte) Mem10[ss:v4 + 0x000E:word16]
// DataOut:
// DataOut (flags):
// SymbolicIn:

l1483_0D2B:
	return di
// DataOut:
// DataOut (flags):
// SymbolicIn:

fn1483_0D06_exit:
// DataOut:
// DataOut (flags):
// SymbolicIn:



word16 fn1483_0D3F(word16 ax, byte ch, byte cl, byte dh, byte dl, byte bl, byte bh, word16 bp, word16 si, word16 di, selector es, selector ds, word16 wArg00, word16 wArg02, word16 wArg04, word16 wArg08, ptr16 & esOut, ptr16 & TopOut)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  ax:[0..15] bl:[0..7] bp:[0..15] bx:[8..15] ch:[0..7] cs:[0..15] cx:[0..7] dh:[0..7] di:[0..15] ds:[0..15] dx:[0..7] es:[0..15] si:[0..15] ss:[0..15] Stack +0000:[0..15] Stack +0002:[0..15] Stack +0004:[0..15]
// LiveOut: di es Top
// Trashed: SCZO ax bp bx cx di dx es si sp Top
// Preserved: DP
fn1483_0D3F_entry:
	byte al_13 = (byte) ax
// DataOut:
// DataOut (flags):
// SymbolicIn:

l1483_0D3F:
	branch P l1483_0D40_thunk_fn1483_0CFA
// DataOut:
// DataOut (flags):
// SymbolicIn:

l1483_0D40_thunk_fn1483_0CFA:
	selector es_20
	int8 Top_23
	word16 di_18 = fn1483_0CFA(al_13, ch, bl, si, ds, ax, wArg00, wArg02, wArg04, out es_20, out Top_23)
	esOut = es_20
	TopOut = Top_23
	return di_18
// DataOut:
// DataOut (flags):
// SymbolicIn:

l1483_0D42:
	ui16 ax_ch_297 = SEQ(DPB(ax, al_13 + ch, 0), ch) - SEQ(0xFC68, Mem7[ds:(bx_33 + 0x0002) + si:byte])
	byte ch_34 = (byte) ax_ch_297
	word16 ax_38 = SLICE(ax_ch_297, word16, 8)
	word16 bx_33 = DPB(bx, 0xB4, 0)
	word16 cx_118 = DPB(cx, ch_34, 8)
	cx_118 = DPB(cx, ch_34, 8) (alias)
	word16 cx_125 = DPB(cx_118, ch_34, 8)
	byte al_66 = (byte) ax_38
	byte ah_81 = SLICE(ax_38, byte, 8)
	word16 dx_109 = DPB(dx, dh ^ 0x17, 8)
	branch (dh ^ 0x17) < 0x00 l1483_0CED
// DataOut:
// DataOut (flags):
// SymbolicIn:

l1483_0CED:
	word16 si_47 = si + Mem40[ds:di:word16]
	word16 v37_48 = Mem40[ds:bx_33 + 0xF7E2 + si_47:word16] + (fp - 4)
	Mem49[ds:bx_33 + 0xF7E2 + si_47:word16] = v37_48
	Mem52[es:di:word16] = ax_38
	bool C_62 = SLICE(cond(v37_48), bool, 1)
	word16 bx_60 = DPB(bx, 0xB5, 0)
	branch true l1483_0CE5_in_fn1483_0D3F
// DataOut:
// DataOut (flags):
// SymbolicIn:

l1483_0CE5_in_fn1483_0D3F:
	esOut = es
	TopOut = 0
	return di + 0x0002
// DataOut:
// DataOut (flags):
// SymbolicIn:

l1483_0CF8:
	Mem63[ds:bx_60 + si_47:byte] = __rcr(Mem52[ds:bx_60 + si_47:byte], 0xAC, C_62)
// DataOut:
// DataOut (flags):
// SymbolicIn:

l1483_0CF9_thunk_fn1483_0CFC:
	selector es_73
	int8 Top_76
	word16 di_71 = fn1483_0CFC(al_66, 0xB5, ax, wArg00, wArg02, wArg04, out es_73, out Top_76)
	esOut = es_73
	TopOut = Top_76
	return di_71
// DataOut:
// DataOut (flags):
// SymbolicIn:

l1483_0D52:
	word16 ax_115 = DPB(ax_38, ah_81 + Mem40[ds:di:byte], 8)
	word16 v19_87 = Mem86[ds:bx_33 + 0x0043 + si:word16]
	Mem89[ds:bx_33 + 0x0043 + si:word16] = bp
	Mem92[ds:di:byte] = Mem89[ds:di:byte] << 0x68
	word16 v22_94 = -Mem92[ss:v19_87 - 0x0006:word16]
	Mem95[ss:v19_87 - 0x0006:word16] = v22_94
	branch !OVERFLOW(v22_94) l1483_0D69
// DataOut:
// DataOut (flags):
// SymbolicIn:

l1483_0D68_1:
	__syscall(0x04)
// DataOut:
// DataOut (flags):
// SymbolicIn:

l1483_0D69:
	Mem104[ds:si + 0x5C87:byte] = ch_34
	word16 sp_113
	word16 ax_116
	word16 cx_126
	word16 bx_128
	word16 dx_129
	int8 Top_136
	byte SCZDOP_137
	call fn1483_8A82 (retsize: 2;)
		uses: ax:ax_115,bp:v19_87,bx:bx_33,cs:cs,cx:cx_125,di:di,ds:ds,dx:dx_109,es:es,si:si,sp:fp + 0x0008,ss:ss,Stack +0002:es,Stack +FFFFFFF2:0x0C58,Stack +FFFFFFF4:0x0F5F,Stack +FFFFFFF6:si,Stack +FFFFFFF8:ax,Stack +FFFFFFFA:wArg00,Stack +FFFFFFFC:wArg02,Stack +FFFFFFFE:wArg04,Top:0
		defs: ax:ax_116,bx:bx_128,cx:cx_126,dx:dx_129,SCZDOP:SCZDOP_137,sp:sp_113,Top:Top_136
	Mem140[ss:sp_113 - 2:word16] = ax_116
	Mem142[ss:sp_113 - 4:word16] = cx_126
	Mem144[ss:sp_113 - 6:word16] = dx_129
	Mem146[ss:sp_113 - 8:word16] = bx_128
	Mem148[ss:sp_113 - 10:word16] = sp_113
	Mem150[ss:sp_113 - 12:word16] = v19_87
	Mem152[ss:sp_113 - 14:word16] = si
	Mem154[ss:sp_113 - 16:word16] = di
	word16 bx_156 = bx_128 + Mem154[ds:(bx_128 - 0x0079) + di:word16] + SCZDOP_137
	Mem161[ss:v19_87 + 0xF512 + di:byte] = Mem154[ss:v19_87 + 0xF512 + di:byte] + SLICE(dx_129, byte, 8) + (bx_156 <u 0x0000)
	Mem164[ds:bx_156 + 0x007D:byte] = Mem161[ds:bx_156 + 0x007D:byte] & (byte) ax_116
	word16 ax_177 = __aad(si)
	word16 ax_173 = DPB(ax_116 - 0x8747, (byte) (ax_116 - 0x8747) + SLICE(cx_126, byte, 8) + (ax_116 <u 0x8747), 0)
	word16 v31_178 = Mem164[ds:ax_173 + 0x995D:word16]
	Mem179[ds:ax_173 + 0x995D:word16] = ax_173
	Mem183[ss:sp_113 - 18:word16] = sp_113 - 16
	bx_190 = bx_156 + Mem183[ds:bx_156 + v31_178:word16]
	byte bh_205 = SLICE(bx_190, byte, 8)
	byte al_184 = (byte) ax_177
	byte ah_200 = SLICE(ax_177, byte, 8)
	byte bl_196 = (byte) bx_190
	word16 bx_190 = DPB(bx_190, bh_205, 8)
	word16 sp_193 = sp_113 - 16
	byte cl_237 = (byte) (cx_126 - 0x0001)
	branch sp_113 - 18 && cx_126 != 0x0001 l1483_0D99
// DataOut:
// DataOut (flags):
// SymbolicIn:

l1483_0D99:
	Mem198[ds:bx_190 + v31_178:byte] = Mem183[ds:bx_190 + v31_178:byte] - bl_196
// DataOut:
// DataOut (flags):
// SymbolicIn:

l1483_0D97:
	byte v36_202 = Mem183[ds:bx_190 + 0x0028 + di:byte] - ah_200 - (sp_113 - 18)
	Mem203[ds:bx_190 + 0x0028 + di:byte] = v36_202
// DataOut:
// DataOut (flags):
// SymbolicIn:

l1483_0D9A:
	Mem208[ds:v31_178 + 0x005A:byte] = Mem203[ds:v31_178 + 0x005A:byte] - bh_205 - (v36_202 <u 0x00)
// DataOut:
// DataOut (flags):
// SymbolicIn:

l1483_0D9B:
	byte v40_216 = Mem215[ds:di + 0x002D:byte] - (al_184 | 0x3F)
	Mem217[ds:di + 0x002D:byte] = v40_216
	Mem221[es:di:byte] = al_184 | 0x3F
	branch v40_216 >= 0x00 l1483_0DB9
// DataOut:
// DataOut (flags):
// SymbolicIn:

l1483_0DA7:
	Mem224[es:di + 0x0001:byte] = al_184 | 0x3F
	branch v40_216 >= 0x00 l1483_0DBE
// DataOut:
// DataOut (flags):
// SymbolicIn:

l1483_0DBE:
// DataOut:
// DataOut (flags):
// SymbolicIn:

l1483_0DC2:
	Mem232[ss:sp_113 - 18:word16] = cs
// DataOut:
// DataOut (flags):
// SymbolicIn:

l1483_0DC6:
	Mem235[ss:0x0B01:word16] = es
	Mem239[ds:0x8C00:byte] = Mem235[ds:0x8C00:byte] + cl_237
// DataOut:
// DataOut (flags):
// SymbolicIn:

l1483_0DCB:
	Mem243[ss:v19_87 + 0x8CC3:word16] = __ror(Mem239[ss:v19_87 + 0x8CC3:word16], cl_237)
// DataOut:
// DataOut (flags):
// SymbolicIn:

l1483_0DCF:
	esOut = es
	TopOut = Top_136
	return di + 0x0002
// DataOut:
// DataOut (flags):
// SymbolicIn:

l1483_0DAA:
	Mem247[ss:v19_87 + v31_178:word16] = -Mem224[ss:v19_87 + v31_178:word16]
	__cli()
	Mem251[ds:bx_190 + 0x0045 + (di + 0x0001):word16] = Mem247[ss:sp_113 - 16:word16]
	Mem257[ds:bx_190 + 0xC079 + v31_178:word16] = Mem251[ds:bx_190 + 0xC079 + v31_178:word16] + (v19_87 + 0x0001)
	sp_193 = sp_113 - 12
// DataOut:
// DataOut (flags):
// SymbolicIn:

l1483_0DB9:
	Mem270[ds:bx_190 + (di + 0x0001):byte] = Mem263[ds:bx_190 + (di + 0x0001):byte] >>u 0x01
	Mem273[ds:bx_190 + 0x0002 + (di + 0x0001):byte] = Mem270[ds:bx_190 + 0x0002 + (di + 0x0001):byte] + cl_237
	word16 sp_265 = sp_193 + 2
// DataOut:
// DataOut (flags):
// SymbolicIn:

l1483_0DBF:
	Mem277[ss:sp_265 - 2:word16] = es
	Mem280[ds:0x03BC:byte] = Mem277[ds:0x03BC:byte] + cl_237
// DataOut:
// DataOut (flags):
// SymbolicIn:

l1483_0DC5:
// DataOut:
// DataOut (flags):
// SymbolicIn:

l1483_0DC9:
	Mem294[ds:v31_178 + 0x8ED3:byte] = Mem280[ds:v31_178 + 0x8ED3:byte] + cl_237
// DataOut:
// DataOut (flags):
// SymbolicIn:

l1483_0DCD:
	esOut = es
	TopOut = Top_136
	return di + 0x0002
// DataOut:
// DataOut (flags):
// SymbolicIn:

fn1483_0D3F_exit:
// DataOut:
// DataOut (flags):
// SymbolicIn:



void fn1483_1104(word16 ax, byte dl, word16 bx, word16 bp, word16 si, word16 di, selector es, selector ds)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  ax:[0..15] bp:[0..15] bx:[0..15] di:[0..15] ds:[0..15] dx:[0..7] es:[0..15] si:[0..15] ss:[0..15]
// LiveOut:
// Trashed:
// Preserved:
// Terminates process
fn1483_1104_exit:
// DataOut:
// DataOut (flags):
// SymbolicIn:

fn1483_1104_entry:
// DataOut:
// DataOut (flags):
// SymbolicIn:

l1483_1104:
	word16 sp_2 = fp
	int8 Top_3 = 0
	word16 dx_31 = DPB(dx, 0x26, 8)
	byte al_12 = (byte) __aam((byte) (ax - 0x5D97)) - 0x75 - (ax <u 0x5D97)
// DataOut:
// DataOut (flags):
// SymbolicIn:

l1483_110D:
	Mem22[ss:bp + 0x450F:word16] = Mem18[ss:bp + 0x450F:word16] + si + (al_12 <u 0x00)
	word16 sp_27 = sp_2 - 2
	Mem29[ss:sp_27:word16] = es
	dx_31 = DPB(dx_31, 0x34, 8) (alias)
	Mem33[ss:bp + 0x005E + si:word16] = dx_31
	Mem38[ds:bx + 0x675E + di:word16] = Mem33[ds:bx + 0x675E + di:word16] - 0x007D
	Mem46[ss:sp_27 - 2:word16] = dx_31
	ST51[Top_3 + 1:real64] = ST50[Top_3 + 1:real64] * lg2(ST50[Top_3:real64] + 1.0)
	ptr32 es_bx_64 = Mem46[ds:0x9F59:segptr32]
	Top_3 = Top_3 + 1
	ST66[Top_3:real64] = scalbn(ST51[Top_3:real64], ST51[Top_3 + 1:real64])
	Mem69[ss:bp + 0x1EC4:word16] = Mem46[ss:bp + 0x1EC4:word16] + bp
	sp_2 = sp_27
	si = 0x9F59
	es = SLICE(es_bx_64, selector, 16) (alias)
	bx = (word16) es_bx_64 (alias)
	di = 0xBFC4
// DataOut:
// DataOut (flags):
// SymbolicIn:



byte fn1483_1B91(word16 cx, byte bh, byte bl, word16 di, selector ds, selector psegArg00, ptr16 & ecxOut)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  bh:[0..7] bx:[0..7] cx:[0..15] di:[0..15] ds:[0..15] Stack +0000:[0..15]
// LiveOut: SCZO ecx
// Trashed: SCZO ax bx di ds dx ecx sp Top
// Preserved:
fn1483_1B91_entry:
	word16 bx_17 = DPB(bx, bh, 8)
// DataOut:
// DataOut (flags):
// SymbolicIn:

l1483_1B91:
	Mem21[ds:bx_17 + 0x10F8 + di:word16] = ~Mem0[ds:bx_17 + 0x10F8 + di:word16]
	word16 ax_8 = DPB(ax, al - 0x28, 0)
	word16 v18_35 = Mem30[psegArg00:bx_17 + 0x3201 + di:word16]
	Mem36[psegArg00:bx_17 + 0x3201 + di:word16] = di
	__inb(0x41)
	__sti()
	Mem47[psegArg00:0xFF1F:word16] = Mem36[psegArg00:0xFF1F:word16] + 0x0001
	word16 ax_22 = DPB(ax_8 ^ 0x2EF9, al_12, 0)
	ui16 ax_al_62 = SEQ(cx, (byte) (ax_8 ^ 0x2EF9)) - SEQ(0xA587, bh)
	word32 ecx_43 = DPB(ecx, ax_22, 0)
	byte al_12 = (byte) ax_al_62
	word16 ax_54 = DPB(SLICE(ax_al_62, word16, 8), __inb(fp) - 0xF8 & 0x0A, 0)
// DataOut:
// DataOut (flags):
// SymbolicIn:

l1483_1BB7_thunk_fn1483_1BB9:
	word32 ecx_57
	fn1483_1BB9(ax_54, ecx_43, fp, bx_17, bp, si, v18_35, es, psegArg00, out ecx_57, out dl_73, out bx_74, out si_75, out di_76, out es_77, out ds_78)
	ecxOut = ecx_57
	return <invalid>
// DataOut:
// DataOut (flags):
// SymbolicIn:

fn1483_1B91_exit:
// DataOut:
// DataOut (flags):
// SymbolicIn:



word16 fn1483_1BB8(byte al, byte ah, word32 ecx, word16 dx, word16 bx, word16 bp, word16 si, word16 di, selector es, selector ds, ptr16 & cxOut, ptr16 & dlOut, ptr16 & bxOut, ptr16 & siOut, ptr16 & diOut, ptr16 & esOut, ptr16 & dsOut)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  al:[0..7] ax:[8..15] bp:[0..15] bx:[0..15] cs:[0..15] cx:[0..31] di:[0..15] ds:[0..15] dx:[0..15] ecx:[16..31] es:[0..15] si:[0..15] ss:[0..15]
// LiveOut: ax bx di ds dx ecx es si sp ss
// Trashed: SCZO ax bp bx di ds dx ecx es si sp ss Top
// Preserved:
fn1483_1BB8_entry:
	word32 ecx_22 = DPB(ecx, cx, 0)
// DataOut:
// DataOut (flags):
// SymbolicIn:

l1483_1BB8:
	word16 ax_16 = DPB(ax, al | Mem0[ds:si:byte], 0)
// DataOut:
// DataOut (flags):
// SymbolicIn:

l1483_1BB8_thunk_fn1483_1BB9:
	word16 bx_28
	word16 di_29
	selector ds_30
	word16 si_33
	selector es_36
	word16 ax_26 = fn1483_1BB9(ax_16, ecx_22, dx, bx, bp, si, di, es, ds, out ecx_32, out dl_49, out bx_28, out si_33, out di_29, out es_36, out ds_30)
	cxOut = <invalid>
	dlOut = <invalid>
	bxOut = bx_28
	siOut = si_33
	diOut = di_29
	esOut = es_36
	dsOut = ds_30
	return ax_26
// DataOut:
// DataOut (flags):
// SymbolicIn:

fn1483_1BB8_exit:
// DataOut:
// DataOut (flags):
// SymbolicIn:



word16 fn1483_1BB9(word16 ax, word32 ecx, word16 dx, word16 bx, word16 bp, word16 si, word16 di, selector es, selector ds, ptr16 & ecxOut, ptr16 & dlOut, ptr16 & bxOut, ptr16 & siOut, ptr16 & diOut, ptr16 & esOut, ptr16 & dsOut)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  ax:[0..15] bp:[0..15] bx:[0..15] cs:[0..15] cx:[0..31] di:[0..15] ds:[0..15] dx:[0..15] ecx:[16..31] es:[0..15] si:[0..15] ss:[0..15]
// LiveOut: ax bx di ds dx ecx es si sp ss
// Trashed: SCZO ax bp bx di ds dx ecx es si sp ss Top
// Preserved:
fn1483_1BB9_entry:
	word32 ecx_236 = DPB(ecx, cx, 0)
// DataOut:
// DataOut (flags):
// SymbolicIn:

l1483_1BB9:
	byte bh_31 = SLICE(bx, byte, 8)
	bx = DPB(bx, bh_31, 8) (alias)
	byte bh_142 = SLICE(bx, byte, 8)
	byte al_123 = (byte) ax
	byte al_182 = (byte) ax
	word32 ecx_232 = DPB(ecx_236, cx, 0)
	byte cl_197 = (byte) cx
	word16 sp_106 = v4
	branch C l1483_1BBF
// DataOut:
// DataOut (flags):
// SymbolicIn:

l1483_1BBF:
// DataOut:
// DataOut (flags):
// SymbolicIn:

l1483_1BBC:
// DataOut:
// DataOut (flags):
// SymbolicIn:

l1483_1B38:
	word16 dx_9 = dx - 0x0001
	byte dh_189 = SLICE(dx_9, byte, 8)
	branch dx_9 != 0x0000 l1483_1B7F
// DataOut:
// DataOut (flags):
// SymbolicIn:

l1483_1B3B:
	word16 cx_13 = cx - 0x0001
	word32 ecx_233 = DPB(ecx_236, cx_13, 0)
	branch dx_9 == 0x0000 && cx_13 != 0x0000 l1483_1B6D
// DataOut:
// DataOut (flags):
// SymbolicIn:

l1483_1B3D:
	selector es_15 = Mem6[ss:v4:selector]
	word16 sp_16 = v4 + 2
	branch si == bx l1483_1B51
// DataOut:
// DataOut (flags):
// SymbolicIn:

l1483_1B44:
	byte al_33 = (byte) (v4 + 2) + bh_31 + (si <u bx)
	word16 ax_25 = si - 0x0001
	byte ah_54 = SLICE(v4 + 2, byte, 8)
	word16 ax_48 = DPB(v4 + 2, al_33, 0)
	branch al_33 == 0x00 l1483_1B13
// DataOut:
// DataOut (flags):
// SymbolicIn:

l1483_1B13:
	__sti()
	word32 ecx_47
	word16 ax_49
	word16 bx_50
	call Mem6[0x1483:bx:ptr32] (retsize: 4;)
		uses: ax:ax_48,bp:bp_52,bx:bx_38,cs:cs,di:di_36,ds:ds_5,dx:0x02E2,ecx:ecx_46,es:es_15,si:ax_17,sp:ax_25,ss:di_36,Top:0
		defs: ax:ax_49,bx:bx_50,ecx:ecx_47
	ecxOut = ecx_47
	dlOut = <invalid>
	bxOut = bx_50
	siOut = ax
	diOut = di
	esOut = es_15
	dsOut = <invalid>
	return ax_49
// DataOut:
// DataOut (flags):
// SymbolicIn:

l1483_1B4E:
	Mem56[ds:ax:byte] = Mem6[ds:ax:byte] + ah_54
	Mem59[ss:ax_25 - 2:word16] = cs
	sp_16 = ax_25 - 2
// DataOut:
// DataOut (flags):
// SymbolicIn:

l1483_1B51:
	es = Mem62[ss:sp_16:selector]
	Mem70[es:0x02FB:byte] = Mem62[ds:ax:byte]
	// Failed to bind call argument.
	// Please report this issue at https://github.com/uxmal/reko
	selector stackArg0 = <invalid>
	word32 ecx_78
	byte SCZO_87 = fn1483_1B91(cx_13, (byte) bx, bx, 0x02FC, ds, stackArg0, out ecx_78)
	__cli()
	Mem90[es:0x02FB:word16] = 0x0A0D
	word16 sp_64 = sp_16 + 2
	bx = Mem90[ss:sp_64 + 0x0008:word16]
	word16 cx_103 = Mem90[ss:sp_64 + 0x000C:word16]
	word16 ax_105 = Mem90[ss:sp_64 + 0x000E:word16]
	word16 di_92 = Mem90[ss:sp_64:word16]
	si = Mem90[ss:sp_64 + 0x0002:word16]
	Mem108[es:di_92:byte] = (byte) ax_105
	word16 v37_115 = Mem108[ds:bx + (di_92 + 0x0001):word16] + bx
	Mem116[ds:bx + (di_92 + 0x0001):word16] = v37_115
	Mem121[ds:di_92 + 0x0001:byte] = __rcl(Mem116[ds:di_92 + 0x0001:byte], (byte) cx_103, SLICE(cond(v37_115), bool, 1))
	ax = ax_105 - 0xECBA - SCZO_87
	bh_142 = SLICE(bx, byte, 8) (alias)
	ecx_233 = DPB(ecx_78, cx_103, 0) (alias)
	sp_106 = sp_64 + 0x0010
	di = di_92 + 0x0001
	al_123 = (byte) ax (alias)
// DataOut:
// DataOut (flags):
// SymbolicIn:

l1483_1B6D:
	byte al_126 = al_123 & 0x5C
	word16 sp_130 = sp_106 - 2
	Mem133[ss:sp_130:word16] = si
	word16 bx_147 = DPB(bx, bh_142, 8)
	word16 bx_148 = DPB(bx, bh_142, 8)
	word16 ax_139 = DPB(ax, al_126, 0)
	branch al_126 != 0x00 l1483_1BE8
// DataOut:
// DataOut (flags):
// SymbolicIn:

l1483_1BE8:
	word16 bx_272 = DPB(bx, bh_142 | Mem133[ds:bx_148 + 0x0003:byte], 8)
	Mem153[ss:sp_130 - 2:word16] = es
	ecxOut = ecx_233
	dlOut = <invalid>
	bxOut = bx_272
	siOut = 0x7269
	diOut = di
	esOut = es
	dsOut = <invalid>
	return ax_139 - 0x85FE
// DataOut:
// DataOut (flags):
// SymbolicIn:

fn1483_1BB9_exit:
// DataOut:
// DataOut (flags):
// SymbolicIn:

l1483_1B75:
	Mem159[ss:sp_130 - 2:word16] = 0x6365
	word16 sp_160 = Mem159[ds:bx_147 + 0x726A:word16] *s 0x0046
	cx = Mem159[ss:sp_160 + 0x000C:word16]
	di = Mem159[ss:sp_160:word16]
	si = Mem159[ss:sp_160 + 0x0002:word16]
	bx = Mem159[ss:sp_160 + 0x0008:word16]
	dh_189 = Mem159[sp_160 + 0x000B:byte] (alias)
	cl_197 = (byte) cx (alias)
	ecx_232 = DPB(ecx_233, cx, 0) (alias)
	al_182 = (byte) Mem159[ss:sp_160 + 0x000E:word16] (alias)
	sp_106 = sp_160 + 0x0010
// DataOut:
// DataOut (flags):
// SymbolicIn:

l1483_1B7F:
	bp = Mem179[ds:si + 0x0065:word16] *s 0x3A64
	Mem186[ss:bp + si:byte] = Mem179[ss:bp + si:byte] & al_182
	byte dh_194 = dh_189 ^ Mem186[ds:bx + di:byte]
	word16 ax_196 = __inw(0x0C)
	Mem201[ds:0x2CF2:byte] = Mem186[ds:0x2CF2:byte] ^ cl_197
	Mem204[ds:di:byte] = Mem201[ds:di:byte] - dh_194
	Mem210[ds:di + 0xEA01:word16] = ~Mem204[ds:di + 0xEA01:word16]
	byte al_205 = (byte) ax_196
	word16 sp_220 = sp_106 - 2
	Mem221[ss:sp_220:word16] = sp_106
	ds = Mem221[ss:sp_220 + 2:selector]
	dx = Mem221[ss:sp_220:word16]
	word16 v35_226 = Mem221[ds:di + 0x0B0A:word16]
	Mem227[ds:di + 0x0B0A:word16] = di
	__inb(0x41)
	__sti()
	Mem240[ds:0xFF1F:word16] = Mem227[ds:0xFF1F:word16] + 0x0001
	word16 ax_211 = DPB(ax_196, al_205 - 0xD9, 0)
	bx = 0xD909
	cx = ax_211
	ecx_236 = DPB(ecx_232, ax_211, 0) (alias)
	di = v35_226
	ax = DPB(DPB(DPB(cx, 0xAF, 8), cl_197, 0) + 0xA587 + (al_205 <u 0xD9), __inb(dx) - 0xF8 & 0x0A, 0) (alias)
	C = false
// DataOut:
// DataOut (flags):
// SymbolicIn:



void fn1483_1C50(byte ah, word16 dx)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  ax:[8..15] dx:[0..15]
// LiveOut:
// Trashed: ax dx sp Top
// Preserved:
fn1483_1C50_entry:
// DataOut:
// DataOut (flags):
// SymbolicIn:

l1483_1C50:
	word16 ax_7 = DPB(ax, __inb(dx), 0)
	call ax_7 (retsize: 2;)
		uses: ax:ax_7,dx:dx,sp:fp,Top:0
	return
// DataOut:
// DataOut (flags):
// SymbolicIn:

fn1483_1C50_exit:
// DataOut:
// DataOut (flags):
// SymbolicIn:



