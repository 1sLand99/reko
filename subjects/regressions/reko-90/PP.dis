// fn0800_0150
// Return size: 2
define fn0800_0150
fn0800_0150_entry:
	// succ:  l0800_0150
l0800_0150:
	sp = fp
	Top = 0
	es = Mem0[0x0800:0x025A:selector]
	sp = sp - 2
	Mem0[ss:sp:word16] = si
	sp = sp - 2
	Mem0[ss:sp:word16] = di
	si = 0x2714
	di = 0x2714
	call fn0800_01E6 (retsize: 2;)
	di = Mem0[ss:sp:word16]
	sp = sp + 2
	si = Mem0[ss:sp:word16]
	sp = sp + 2
	return
	// succ:  fn0800_0150_exit
fn0800_0150_exit:


// fn0800_0163
// Return size: 2
define fn0800_0163
fn0800_0163_entry:
	// succ:  l0800_0163
l0800_0163:
	sp = fp
	Top = 0
	return
	// succ:  fn0800_0163_exit
fn0800_0163_exit:


// fn0800_0164
// Return size: 0
define fn0800_0164
fn0800_0164_entry:
	// succ:  l0800_0164
l0800_0164:
	sp = fp
	Top = 0
	bp = sp
	ah = 0x4C
	al = Mem0[ss:bp + 0x0002:byte]
	msdos_terminate(al)
fn0800_0164_exit:


// fn0800_0176
// Return size: 2
define fn0800_0176
fn0800_0176_entry:
	// succ:  l0800_0176
l0800_0176:
	sp = fp
	Top = 0
	sp = sp - 2
	Mem0[ss:sp:word16] = ds
	ax = 0x3500
	es_bx = msdos_get_interrupt_vector(al)
	Mem0[ds:0x005B:word16] = bx
	Mem0[ds:0x005D:word16] = es
	ax = 0x3504
	es_bx = msdos_get_interrupt_vector(al)
	Mem0[ds:0x005F:word16] = bx
	Mem0[ds:0x0061:word16] = es
	ax = 0x3505
	es_bx = msdos_get_interrupt_vector(al)
	Mem0[ds:0x0063:word16] = bx
	Mem0[ds:0x0065:word16] = es
	ax = 0x3506
	es_bx = msdos_get_interrupt_vector(al)
	Mem0[ds:0x0067:word16] = bx
	Mem0[ds:0x0069:word16] = es
	ax = 0x2500
	dx = cs
	ds = dx
	dx = 0x016D
	msdos_set_interrupt_vector(al, ds_dx)
	ds = Mem0[ss:sp:selector]
	sp = sp + 2
	return
	// succ:  fn0800_0176_exit
fn0800_0176_exit:


// fn0800_01B9
// Return size: 2
define fn0800_01B9
fn0800_01B9_entry:
	// succ:  l0800_01B9
l0800_01B9:
	sp = fp
	Top = 0
	sp = sp - 2
	Mem0[ss:sp:word16] = ds
	ax = 0x2500
	ds_dx = Mem0[ds:0x005B:segptr32]
	msdos_set_interrupt_vector(al, ds_dx)
	ds = Mem0[ss:sp:selector]
	sp = sp + 2
	sp = sp - 2
	Mem0[ss:sp:word16] = ds
	ax = 0x2504
	ds_dx = Mem0[ds:0x005F:segptr32]
	msdos_set_interrupt_vector(al, ds_dx)
	ds = Mem0[ss:sp:selector]
	sp = sp + 2
	sp = sp - 2
	Mem0[ss:sp:word16] = ds
	ax = 0x2505
	ds_dx = Mem0[ds:0x0063:segptr32]
	msdos_set_interrupt_vector(al, ds_dx)
	ds = Mem0[ss:sp:selector]
	sp = sp + 2
	sp = sp - 2
	Mem0[ss:sp:word16] = ds
	ax = 0x2506
	ds_dx = Mem0[ds:0x0067:segptr32]
	msdos_set_interrupt_vector(al, ds_dx)
	ds = Mem0[ss:sp:selector]
	sp = sp + 2
	return
	// succ:  fn0800_01B9_exit
fn0800_01B9_exit:


// fn0800_01E6
// Return size: 2
define fn0800_01E6
fn0800_01E6_entry:
	// succ:  l0800_01E6
l0800_01E6:
	sp = fp
	Top = 0
	SCZO = cond(si - 0x26FC)
	branch Test(EQ,Z) l0800_01F0
	// succ:  l0800_01EC l0800_01F0
l0800_01EC:
	ah = ah ^ ah
	SZO = cond(ah)
	C = false
	goto l0800_01F2
	// succ:  l0800_01F2
l0800_01F0:
	ah = 0xFF
	// succ:  l0800_01F2
l0800_01F2:
	dx = di
	bx = si
	// succ:  l0800_01F6
l0800_01F6:
	SCZO = cond(bx - di)
	branch Test(EQ,Z) l0800_021D
	// succ:  l0800_01FA l0800_021D
l0800_01FA:
	SCZO = cond(Mem0[es:bx:byte] - 0xFF)
	branch Test(EQ,Z) l0800_0218
	// succ:  l0800_0200 l0800_0218
l0800_0200:
	SCZO = cond(si - 0x26FC)
	branch Test(EQ,Z) l0800_020C
	// succ:  l0800_0206 l0800_020C
l0800_0206:
	SCZO = cond(ah - Mem0[es:bx + 0x0001:byte])
	goto l0800_0210
	// succ:  l0800_0210
l0800_020C:
	SCZO = cond(Mem0[es:bx + 0x0001:byte] - ah)
	// succ:  l0800_0210
l0800_0210:
	branch Test(UGT,CZ) l0800_0218
	// succ:  l0800_0212 l0800_0218
l0800_0212:
	ah = Mem0[es:bx + 0x0001:byte]
	dx = bx
	// succ:  l0800_0218
l0800_0218:
	bx = bx + 0x0006
	SCZO = cond(bx)
	goto l0800_01F6
	// succ:  l0800_01F6
l0800_021D:
	SCZO = cond(dx - di)
	branch Test(EQ,Z) l0800_023C
	// succ:  l0800_0221 l0800_023C
l0800_0221:
	bx = dx
	SCZO = cond(Mem0[es:bx:byte] - 0x00)
	Mem0[es:bx:byte] = 0xFF
	sp = sp - 2
	Mem0[ss:sp:word16] = es
	branch Test(EQ,Z) l0800_0235
	// succ:  l0800_022E l0800_0235
l0800_022E:
	call Mem0[es:bx + 0x0002:ptr32] (retsize: 4;)
	es = Mem0[ss:sp:selector]
	sp = sp + 2
	goto l0800_01E6
	// succ:  l0800_01E6
l0800_0235:
	call SEQ(0x0800, Mem0[es:bx + 0x0002:word16]) (retsize: 2;)
	es = Mem0[ss:sp:selector]
	sp = sp + 2
	goto l0800_01E6
	// succ:  l0800_01E6
l0800_023C:
	return
	// succ:  fn0800_01E6_exit
fn0800_01E6_exit:


// fn0800_023D
// Return size: 2
define fn0800_023D
fn0800_023D_entry:
	// succ:  l0800_023D
l0800_023D:
	sp = fp
	Top = 0
	ah = 0x40
	bx = 0x0002
	C = msdos_write_file(bx, cx, ds_dx, out ax)
	return
	// succ:  fn0800_023D_exit
fn0800_023D_exit:


// main
// Return size: 2
define main
main_entry:
	// succ:  l0800_025E
l0800_025E:
	sp = fp
	Top = 0
	sp = sp - 2
	Mem0[ss:sp:word16] = bp
	bp = sp
	sp = sp - 0x0004
	SCZO = cond(sp)
	sp = sp - 2
	Mem0[ss:sp:word16] = si
	Mem0[ds:0x2A27:word16] = 0x0001
	Mem0[ds:0x2E4D:word16] = 0x0000
	Mem0[ds:0x2A1F:word16] = 0x0000
	Mem0[ds:0x2E4F:word16] = 0x0000
	Mem0[ds:0x2A1D:word16] = 0x0000
	Mem0[ds:0x2A17:word16] = 0x0000
	Mem0[ds:0x2A1B:word16] = 0x0000
	Mem0[ds:0x2A11:word16] = 0x0000
	Mem0[ds:0x2A0F:word16] = 0x0000
	Mem0[ds:0x2A0D:word16] = 0x0000
	Mem0[ds:0x2A0B:word16] = 0x3000
	Mem0[ds:0x2E31:word16] = 0x8000
	Mem0[ds:0x2E2F:word16] = 0x1000
	Mem0[ds:0x2A21:word16] = 0x0001
	Mem0[ds:0x29F5:word16] = 0x0000
	Mem0[ds:0x29F3:word16] = 0x0000
	Mem0[ds:0x29F1:word16] = 0x0000
	Mem0[ds:0x29EF:word16] = 0x0000
	Mem0[ds:0x2A13:word16] = 0x0000
	Mem0[ds:0x2A23:word16] = 0x0001
	call fn0800_2C9A (retsize: 2;)
	sp = sp - 2
	Mem0[ss:sp:word16] = ds
	ax = 0x0094
	sp = sp - 2
	Mem0[ss:sp:word16] = ax
	sp = sp - 2
	Mem0[ss:sp:word16] = ds
	ax = 0x07E8
	sp = sp - 2
	Mem0[ss:sp:word16] = ax
	call fn0800_B2EF (retsize: 2;)
	sp = sp + 0x0008
	SCZO = cond(sp)
	call fn0800_0402 (retsize: 2;)
	call fn0800_0541 (retsize: 2;)
	ax = 0x0001
	sp = sp - 2
	Mem0[ss:sp:word16] = ax
	sp = sp - 2
	Mem0[ss:sp:word16] = ax
	call fn0800_2DBF (retsize: 2;)
	sp = sp + 0x0004
	SCZO = cond(sp)
	ax = ax ^ ax
	SZO = cond(ax)
	C = false
	sp = sp - 2
	Mem0[ss:sp:word16] = ax
	sp = sp - 2
	Mem0[ss:sp:word16] = ax
	call fn0800_9764 (retsize: 2;)
	sp = sp + 0x0004
	SCZO = cond(sp)
	Mem0[ss:bp - 0x0002:word16] = dx
	Mem0[ss:bp - 0x0004:word16] = ax
	bx = Mem0[ds:0x2A25:word16]
	SCZO = cond(bx - 0x0008)
	branch Test(UGT,CZ) l0800_0338
	// succ:  l0800_031A l0800_0338
l0800_031A:
	bx = bx << 0x0001
	SCZO = cond(bx)
	switch (bx) { l0800_0321 l0800_0330 l0800_0330 l0800_0326 l0800_0326 l0800_032B l0800_0335 l0800_0335 l0800_0335 }
	// succ:  l0800_0321 l0800_0330 l0800_0330 l0800_0326 l0800_0326 l0800_032B l0800_0335 l0800_0335 l0800_0335
l0800_0321:
	call fn0800_0DE8 (retsize: 2;)
	goto l0800_0338
	// succ:  l0800_0338
l0800_0326:
	call fn0800_12E2 (retsize: 2;)
	goto l0800_0338
	// succ:  l0800_0338
l0800_032B:
	call fn0800_18D9 (retsize: 2;)
	goto l0800_0338
	// succ:  l0800_0338
l0800_0330:
	call fn0800_112D (retsize: 2;)
	goto l0800_0338
	// succ:  l0800_0338
l0800_0335:
	call fn0800_19EE (retsize: 2;)
	// succ:  l0800_0338
l0800_0338:
	ax = ax ^ ax
	SZO = cond(ax)
	C = false
	sp = sp - 2
	Mem0[ss:sp:word16] = ax
	sp = sp - 2
	Mem0[ss:sp:word16] = ax
	call fn0800_9764 (retsize: 2;)
	sp = sp + 0x0004
	SCZO = cond(sp)
	ax = ax - Mem0[ss:bp - 0x0004:word16]
	SCZO = cond(ax)
	dx = dx - Mem0[ss:bp - 0x0002:word16] - C
	SCZO = cond(dx)
	Mem0[ss:bp - 0x0002:word16] = dx
	Mem0[ss:bp - 0x0004:word16] = ax
	v14 = Mem0[ds:0x29F1:word16]
	sp = sp - 2
	Mem0[ss:sp:word16] = v14
	v15 = Mem0[ds:0x29EF:word16]
	sp = sp - 2
	Mem0[ss:sp:word16] = v15
	v16 = Mem0[ds:0x29F5:word16]
	sp = sp - 2
	Mem0[ss:sp:word16] = v16
	v17 = Mem0[ds:0x29F3:word16]
	sp = sp - 2
	Mem0[ss:sp:word16] = v17
	call fn0800_0B79 (retsize: 2;)
	sp = sp + 0x0008
	SCZO = cond(sp)
	si = ax
	ax = ax ^ ax
	SZO = cond(ax)
	C = false
	dx = 0x003C
	sp = sp - 2
	Mem0[ss:sp:word16] = ax
	sp = sp - 2
	Mem0[ss:sp:word16] = dx
	v18 = Mem0[ss:bp - 0x0002:word16]
	sp = sp - 2
	Mem0[ss:sp:word16] = v18
	v19 = Mem0[ss:bp - 0x0004:word16]
	sp = sp - 2
	Mem0[ss:sp:word16] = v19
	call fn0800_8BCA (retsize: 2;)
	sp = sp - 2
	Mem0[ss:sp:word16] = dx
	sp = sp - 2
	Mem0[ss:sp:word16] = ax
	ax = ax ^ ax
	SZO = cond(ax)
	C = false
	dx = 0x003C
	sp = sp - 2
	Mem0[ss:sp:word16] = ax
	sp = sp - 2
	Mem0[ss:sp:word16] = dx
	dx = 0x0E10
	sp = sp - 2
	Mem0[ss:sp:word16] = ax
	sp = sp - 2
	Mem0[ss:sp:word16] = dx
	v20 = Mem0[ss:bp - 0x0002:word16]
	sp = sp - 2
	Mem0[ss:sp:word16] = v20
	v21 = Mem0[ss:bp - 0x0004:word16]
	sp = sp - 2
	Mem0[ss:sp:word16] = v21
	call fn0800_8BCA (retsize: 2;)
	sp = sp - 2
	Mem0[ss:sp:word16] = dx
	sp = sp - 2
	Mem0[ss:sp:word16] = ax
	call fn0800_8BBB (retsize: 2;)
	sp = sp - 2
	Mem0[ss:sp:word16] = dx
	sp = sp - 2
	Mem0[ss:sp:word16] = ax
	ax = ax ^ ax
	SZO = cond(ax)
	C = false
	dx = 0x0E10
	sp = sp - 2
	Mem0[ss:sp:word16] = ax
	sp = sp - 2
	Mem0[ss:sp:word16] = dx
	dx = 0x5180
	sp = sp - 2
	Mem0[ss:sp:word16] = ax
	sp = sp - 2
	Mem0[ss:sp:word16] = dx
	v22 = Mem0[ss:bp - 0x0002:word16]
	sp = sp - 2
	Mem0[ss:sp:word16] = v22
	v23 = Mem0[ss:bp - 0x0004:word16]
	sp = sp - 2
	Mem0[ss:sp:word16] = v23
	call fn0800_8BCA (retsize: 2;)
	sp = sp - 2
	Mem0[ss:sp:word16] = dx
	sp = sp - 2
	Mem0[ss:sp:word16] = ax
	call fn0800_8BBB (retsize: 2;)
	sp = sp - 2
	Mem0[ss:sp:word16] = dx
	sp = sp - 2
	Mem0[ss:sp:word16] = ax
	ax = si
	bx = 0x0064
	dx = dx ^ dx
	SZO = cond(dx)
	C = false
	v25 = dx_ax
	dx = (uint16) (v25 % bx)
	ax = (uint16) (v25 /u bx)
	SCZO = cond(ax)
	sp = sp - 2
	Mem0[ss:sp:word16] = dx
	ax = si
	dx = dx ^ dx
	SZO = cond(dx)
	C = false
	v26 = dx_ax
	dx = (uint16) (v26 % bx)
	ax = (uint16) (v26 /u bx)
	SCZO = cond(ax)
	sp = sp - 2
	Mem0[ss:sp:word16] = ax
	v27 = Mem0[ds:0x29F1:word16]
	sp = sp - 2
	Mem0[ss:sp:word16] = v27
	v28 = Mem0[ds:0x29EF:word16]
	sp = sp - 2
	Mem0[ss:sp:word16] = v28
	v29 = Mem0[ds:0x29F5:word16]
	sp = sp - 2
	Mem0[ss:sp:word16] = v29
	v30 = Mem0[ds:0x29F3:word16]
	sp = sp - 2
	Mem0[ss:sp:word16] = v30
	sp = sp - 2
	Mem0[ss:sp:word16] = ds
	ax = 0x05DC
	sp = sp - 2
	Mem0[ss:sp:word16] = ax
	ax = 0x0008
	sp = sp - 2
	Mem0[ss:sp:word16] = ax
	v31 = Mem0[ds:0x2A13:word16]
	sp = sp - 2
	Mem0[ss:sp:word16] = v31
	sp = sp - 2
	Mem0[ss:sp:word16] = ds
	ax = 0x07EB
	sp = sp - 2
	Mem0[ss:sp:word16] = ax
	call fn0800_B2EF (retsize: 2;)
	sp = sp + 0x0024
	SCZO = cond(sp)
	ax = ax ^ ax
	SZO = cond(ax)
	C = false
	si = Mem0[ss:sp:word16]
	sp = sp + 2
	sp = bp
	bp = Mem0[ss:sp:word16]
	sp = sp + 2
	return
	// succ:  main_exit
main_exit:


// fn0800_0402
// Return size: 2
define fn0800_0402
fn0800_0402_entry:
	// succ:  l0800_0402
l0800_0402:
	sp = fp
	Top = 0
	sp = sp - 2
	Mem0[ss:sp:word16] = si
	sp = sp - 2
	Mem0[ss:sp:word16] = di
	ax = Mem0[ds:0x2A27:word16]
	SCZO = cond(ax - Mem0[ds:0x269A:word16])
	branch Test(NE,Z) l0800_0410
	// succ:  l0800_040D l0800_0410
l0800_040D:
	call fn0800_0DCE (retsize: 2;)
	// succ:  l0800_0410
l0800_0410:
	ax = Mem0[ds:0x2A27:word16]
	ax = ax << 0x0001
	SCZO = cond(ax)
	ax = ax << 0x0001
	SCZO = cond(ax)
	es_bx = Mem0[ds:0x269C:segptr32]
	bx = bx + ax
	SCZO = cond(bx)
	v13 = Mem0[es:bx + 0x0002:word16]
	sp = sp - 2
	Mem0[ss:sp:word16] = v13
	v14 = Mem0[es:bx:word16]
	sp = sp - 2
	Mem0[ss:sp:word16] = v14
	call fn0800_BFC7 (retsize: 2;)
	sp = sp + 0x0004
	SCZO = cond(sp)
	SCZO = cond(ax - 0x0001)
	branch Test(ULE,CZ) l0800_044D
	// succ:  l0800_042F l0800_044D
l0800_042F:
	ax = Mem0[ds:0x2A27:word16]
	ax = ax << 0x0001
	SCZO = cond(ax)
	ax = ax << 0x0001
	SCZO = cond(ax)
	es_bx = Mem0[ds:0x269C:segptr32]
	bx = bx + ax
	SCZO = cond(bx)
	v16 = Mem0[es:bx + 0x0002:word16]
	sp = sp - 2
	Mem0[ss:sp:word16] = v16
	v17 = Mem0[es:bx:word16]
	sp = sp - 2
	Mem0[ss:sp:word16] = v17
	ax = 0x0001
	sp = sp - 2
	Mem0[ss:sp:word16] = ax
	call fn0800_0D24 (retsize: 2;)
	sp = sp + 0x0006
	SCZO = cond(sp)
	// succ:  l0800_044D
l0800_044D:
	ax = Mem0[ds:0x2A27:word16]
	ax = ax << 0x0001
	SCZO = cond(ax)
	ax = ax << 0x0001
	SCZO = cond(ax)
	es_bx = Mem0[ds:0x269C:segptr32]
	bx = bx + ax
	SCZO = cond(bx)
	es_bx = Mem0[ds:bx + 0x0000:segptr32]
	al = Mem0[es:bx:byte]
	sp = sp - 2
	Mem0[ss:sp:word16] = ax
	sp = sp - 2
	Mem0[ss:sp:word16] = ds
	ax = 0x0829
	sp = sp - 2
	Mem0[ss:sp:word16] = ax
	call fn0800_0C29 (retsize: 2;)
	sp = sp + 0x0006
	SCZO = cond(sp)
	Mem0[ds:0x2A25:word16] = ax
	SCZO = cond(ax - 0x0009)
	branch Test(LT,SO) l0800_0492
	// succ:  l0800_0474 l0800_0492
l0800_0474:
	ax = Mem0[ds:0x2A27:word16]
	ax = ax << 0x0001
	SCZO = cond(ax)
	ax = ax << 0x0001
	SCZO = cond(ax)
	es_bx = Mem0[ds:0x269C:segptr32]
	bx = bx + ax
	SCZO = cond(bx)
	v20 = Mem0[es:bx + 0x0002:word16]
	sp = sp - 2
	Mem0[ss:sp:word16] = v20
	v21 = Mem0[es:bx:word16]
	sp = sp - 2
	Mem0[ss:sp:word16] = v21
	ax = 0x0001
	sp = sp - 2
	Mem0[ss:sp:word16] = ax
	call fn0800_0D24 (retsize: 2;)
	sp = sp + 0x0006
	SCZO = cond(sp)
	// succ:  l0800_0492
l0800_0492:
	v22 = Mem0[ds:0x2A27:word16] + 0x0001
	Mem0[ds:0x2A27:word16] = v22
	SZO = cond(v22)
	SCZO = cond(Mem0[ds:0x2A25:word16] - 0x0002)
	branch Test(GT,SZO) l0800_04A0
	// succ:  l0800_049D l0800_04A0
l0800_049D:
	goto l0800_053E
	// succ:  l0800_053E
l0800_04A0:
	ax = Mem0[ds:0x2A27:word16]
	SCZO = cond(ax - Mem0[ds:0x269A:word16])
	branch Test(NE,Z) l0800_04AC
	// succ:  l0800_04A9 l0800_04AC
l0800_04A9:
	call fn0800_0DCE (retsize: 2;)
	// succ:  l0800_04AC
l0800_04AC:
	ax = Mem0[ds:0x2A27:word16]
	v24 = Mem0[ds:0x2A27:word16] + 0x0001
	Mem0[ds:0x2A27:word16] = v24
	SZO = cond(v24)
	ax = ax << 0x0001
	SCZO = cond(ax)
	ax = ax << 0x0001
	SCZO = cond(ax)
	es_bx = Mem0[ds:0x269C:segptr32]
	bx = bx + ax
	SCZO = cond(bx)
	v25 = Mem0[es:bx + 0x0002:word16]
	sp = sp - 2
	Mem0[ss:sp:word16] = v25
	v26 = Mem0[es:bx:word16]
	sp = sp - 2
	Mem0[ss:sp:word16] = v26
	sp = sp - 2
	Mem0[ss:sp:word16] = ds
	ax = 0x4348
	sp = sp - 2
	Mem0[ss:sp:word16] = ax
	call fn0800_BF9E (retsize: 2;)
	sp = sp + 0x0008
	SCZO = cond(sp)
	sp = sp - 2
	Mem0[ss:sp:word16] = ds
	ax = 0x4348
	sp = sp - 2
	Mem0[ss:sp:word16] = ax
	call fn0800_0C6C (retsize: 2;)
	sp = sp + 0x0004
	SCZO = cond(sp)
	sp = sp - 2
	Mem0[ss:sp:word16] = ds
	es = Mem0[ss:sp:selector]
	sp = sp + 2
	di = 0x4348
	ax = ax ^ ax
	SZO = cond(ax)
	C = false
	cx = 0xFFFF
	// succ:  l0800_04E4
l0800_04E4:
	branch cx == 0x0000 l0800_04E6
	// succ:  l0800_04E4_1 l0800_04E6
l0800_04E4_1:
	SCZO = cond(al - Mem0[es:di:byte])
	di = di + 0x0001
	cx = cx - 0x0001
	branch Test(EQ,Z) l0800_04E4
	// succ:  l0800_04E6 l0800_04E4
l0800_04E6:
	cx = ~cx
	ax = 0x002E
	di = di - 0x0001
	SZO = cond(di)
	D = true
	// succ:  l0800_04ED
l0800_04ED:
	branch cx == 0x0000 l0800_04EF
	// succ:  l0800_04ED_2 l0800_04EF
l0800_04ED_2:
	SCZO = cond(al - Mem0[es:di:byte])
	di = di - 0x0001
	cx = cx - 0x0001
	branch Test(EQ,Z) l0800_04ED
	// succ:  l0800_04EF l0800_04ED
l0800_04EF:
	branch Test(EQ,Z) l0800_04F8
	// succ:  l0800_04F1 l0800_04F8
l0800_04F1:
	di = 0xFFFF
	ax = ax ^ ax
	SZO = cond(ax)
	C = false
	es = ax
	// succ:  l0800_04F8
l0800_04F8:
	di = di + 0x0001
	SZO = cond(di)
	D = false
	ax = es
	sp = sp - 2
	Mem0[ss:sp:word16] = ds
	es = Mem0[ss:sp:selector]
	sp = sp + 2
	sp = sp - 2
	Mem0[ss:sp:word16] = di
	di = 0x4348
	ax = ax ^ ax
	SZO = cond(ax)
	C = false
	cx = 0xFFFF
	// succ:  l0800_0507
l0800_0507:
	branch cx == 0x0000 l0800_0509
	// succ:  l0800_0507_1 l0800_0509
l0800_0507_1:
	SCZO = cond(al - Mem0[es:di:byte])
	di = di + 0x0001
	cx = cx - 0x0001
	branch Test(EQ,Z) l0800_0507
	// succ:  l0800_0509 l0800_0507
l0800_0509:
	cx = ~cx
	ax = 0x005C
	di = di - cx
	SCZO = cond(di)
	// succ:  l0800_0510
l0800_0510:
	branch cx == 0x0000 l0800_0512
	// succ:  l0800_0510_2 l0800_0512
l0800_0510_2:
	SCZO = cond(al - Mem0[es:di:byte])
	di = di + 0x0001
	cx = cx - 0x0001
	branch Test(EQ,Z) l0800_0510
	// succ:  l0800_0512 l0800_0510
l0800_0512:
	branch Test(EQ,Z) l0800_051B
	// succ:  l0800_0514 l0800_051B
l0800_0514:
	di = 0x0001
	ax = ax ^ ax
	SZO = cond(ax)
	C = false
	es = ax
	// succ:  l0800_051B
l0800_051B:
	di = di - 0x0001
	SZO = cond(di)
	ax = es
	ax = Mem0[ss:sp:word16]
	sp = sp + 2
	SCZO = cond(ax - di)
	branch Test(UGT,CZ) l0800_0538
	// succ:  l0800_0523 l0800_0538
l0800_0523:
	sp = sp - 2
	Mem0[ss:sp:word16] = ds
	es = Mem0[ss:sp:selector]
	sp = sp + 2
	di = 0x4348
	si = 0x0833
	cx = 0xFFFF
	ax = ax ^ ax
	SZO = cond(ax)
	C = false
	// succ:  l0800_0530
l0800_0530:
	branch cx == 0x0000 l0800_0532
	// succ:  l0800_0530_1 l0800_0532
l0800_0530_1:
	SCZO = cond(al - Mem0[es:di:byte])
	di = di + 0x0001
	cx = cx - 0x0001
	branch Test(EQ,Z) l0800_0530
	// succ:  l0800_0532 l0800_0530
l0800_0532:
	di = di - 0x0001
	SZO = cond(di)
	cx = 0x0005
	// succ:  l0800_0536
l0800_0536:
	branch cx == 0x0000 l0800_0538
	// succ:  l0800_0536_2 l0800_0538
l0800_0536_2:
	v30 = Mem0[ds:si:byte]
	Mem0[es:di:byte] = v30
	si = si + 0x0001
	di = di + 0x0001
	cx = cx - 0x0001
	goto l0800_0536
	// succ:  l0800_0536
l0800_0538:
	Mem0[ds:0x2A19:word16] = 0x0001
	// succ:  l0800_053E
l0800_053E:
	di = Mem0[ss:sp:word16]
	sp = sp + 2
	si = Mem0[ss:sp:word16]
	sp = sp + 2
	return
	// succ:  fn0800_0402_exit
fn0800_0402_exit:


// fn0800_0541
// Return size: 2
define fn0800_0541
fn0800_0541_entry:
	// succ:  l0800_0541
l0800_0541:
	sp = fp
	Top = 0
	sp = sp - 2
	Mem0[ss:sp:word16] = bp
	bp = sp
	sp = sp - 0x0004
	SCZO = cond(sp)
	sp = sp - 2
	Mem0[ss:sp:word16] = si
	sp = sp - 2
	Mem0[ss:sp:word16] = di
	ax = Mem0[ds:0x2A27:word16]
	SCZO = cond(ax - Mem0[ds:0x269A:word16])
	branch Test(NE,Z) l0800_0555
	// succ:  l0800_0552 l0800_0555
l0800_0552:
	goto l0800_0987
	// succ:  l0800_0987
l0800_0555:
	ax = ax << 0x0001
	SCZO = cond(ax)
	ax = ax << 0x0001
	SCZO = cond(ax)
	es_bx = Mem0[ds:0x269C:segptr32]
	bx = bx + ax
	SCZO = cond(bx)
	es_bx = Mem0[ds:bx + 0x0000:segptr32]
	SCZO = cond(Mem0[es:bx:byte] - 0x2D)
	branch Test(NE,Z) l0800_056B
	// succ:  l0800_0568 l0800_056B
l0800_0568:
	goto l0800_086D
	// succ:  l0800_086D
l0800_056B:
	ax = Mem0[ds:0x2A27:word16]
	ax = ax << 0x0001
	SCZO = cond(ax)
	ax = ax << 0x0001
	SCZO = cond(ax)
	es_bx = Mem0[ds:0x269C:segptr32]
	bx = bx + ax
	SCZO = cond(bx)
	es_bx = Mem0[ds:bx + 0x0000:segptr32]
	SCZO = cond(Mem0[es:bx:byte] - 0x2F)
	branch Test(NE,Z) l0800_0584
	// succ:  l0800_0581 l0800_0584
l0800_0581:
	goto l0800_086D
	// succ:  l0800_086D
l0800_0584:
	di = Mem0[ss:sp:word16]
	sp = sp + 2
	si = Mem0[ss:sp:word16]
	sp = sp + 2
	sp = bp
	bp = Mem0[ss:sp:word16]
	sp = sp + 2
	return
	// succ:  fn0800_0541_exit
l0800_058A:
	ax = Mem0[ds:0x2A27:word16]
	ax = ax << 0x0001
	SCZO = cond(ax)
	ax = ax << 0x0001
	SCZO = cond(ax)
	es_bx = Mem0[ds:0x269C:segptr32]
	bx = bx + ax
	SCZO = cond(bx)
	es_bx = Mem0[ds:bx + 0x0000:segptr32]
	al = Mem0[es:bx + 0x0001:byte]
	sp = sp - 2
	Mem0[ss:sp:word16] = ax
	sp = sp - 2
	Mem0[ss:sp:word16] = ds
	ax = 0x0838
	sp = sp - 2
	Mem0[ss:sp:word16] = ax
	call fn0800_0C29 (retsize: 2;)
	sp = sp + 0x0006
	SCZO = cond(sp)
	si = ax
	SCZO = cond(ax - 0x000B)
	branch Test(LT,SO) l0800_05CF
	// succ:  l0800_05B1 l0800_05CF
l0800_05B1:
	ax = Mem0[ds:0x2A27:word16]
	ax = ax << 0x0001
	SCZO = cond(ax)
	ax = ax << 0x0001
	SCZO = cond(ax)
	es_bx = Mem0[ds:0x269C:segptr32]
	bx = bx + ax
	SCZO = cond(bx)
	v16 = Mem0[es:bx + 0x0002:word16]
	sp = sp - 2
	Mem0[ss:sp:word16] = v16
	v17 = Mem0[es:bx:word16]
	sp = sp - 2
	Mem0[ss:sp:word16] = v17
	ax = 0x0002
	sp = sp - 2
	Mem0[ss:sp:word16] = ax
	call fn0800_0D24 (retsize: 2;)
	sp = sp + 0x0006
	SCZO = cond(sp)
	// succ:  l0800_05CF
l0800_05CF:
	SCZO = cond(si - 0x0006)
	branch Test(LT,SO) l0800_05D7
	// succ:  l0800_05D4 l0800_05D7
l0800_05D4:
	goto l0800_0659
	// succ:  l0800_0659
l0800_05D7:
	ax = Mem0[ds:0x2A27:word16]
	ax = ax << 0x0001
	SCZO = cond(ax)
	ax = ax << 0x0001
	SCZO = cond(ax)
	es_bx = Mem0[ds:0x269C:segptr32]
	bx = bx + ax
	SCZO = cond(bx)
	v51 = Mem0[es:bx + 0x0002:word16]
	sp = sp - 2
	Mem0[ss:sp:word16] = v51
	v52 = Mem0[es:bx:word16]
	sp = sp - 2
	Mem0[ss:sp:word16] = v52
	call fn0800_BFC7 (retsize: 2;)
	sp = sp + 0x0004
	SCZO = cond(sp)
	SCZO = cond(ax - 0x0002)
	branch Test(NE,Z) l0800_0622
	// succ:  l0800_05F6 l0800_0622
l0800_05F6:
	v53 = Mem0[ds:0x2A27:word16] + 0x0001
	Mem0[ds:0x2A27:word16] = v53
	SZO = cond(v53)
	ax = Mem0[ds:0x2A27:word16]
	SCZO = cond(ax - Mem0[ds:0x269A:word16])
	branch Test(NE,Z) l0800_0606
	// succ:  l0800_0603 l0800_0606
l0800_0603:
	call fn0800_0DCE (retsize: 2;)
	// succ:  l0800_0606
l0800_0606:
	ax = Mem0[ds:0x2A27:word16]
	ax = ax << 0x0001
	SCZO = cond(ax)
	ax = ax << 0x0001
	SCZO = cond(ax)
	es_bx = Mem0[ds:0x269C:segptr32]
	bx = bx + ax
	SCZO = cond(bx)
	ax = Mem0[es:bx + 0x0002:word16]
	dx = Mem0[es:bx:word16]
	Mem0[ss:bp - 0x0002:word16] = ax
	Mem0[ss:bp - 0x0004:word16] = dx
	goto l0800_063F
	// succ:  l0800_063F
l0800_0622:
	ax = Mem0[ds:0x2A27:word16]
	ax = ax << 0x0001
	SCZO = cond(ax)
	ax = ax << 0x0001
	SCZO = cond(ax)
	es_bx = Mem0[ds:0x269C:segptr32]
	bx = bx + ax
	SCZO = cond(bx)
	ax = Mem0[es:bx + 0x0002:word16]
	dx = Mem0[es:bx:word16]
	dx = dx + 0x0002
	SCZO = cond(dx)
	Mem0[ss:bp - 0x0002:word16] = ax
	Mem0[ss:bp - 0x0004:word16] = dx
	// succ:  l0800_063F
l0800_063F:
	es_bx = Mem0[ss:bp - 0x0004:segptr32]
	al = Mem0[es:bx:byte]
	ax = (int16) al
	ax = ax | ax
	SZO = cond(ax)
	C = false
	branch Test(NE,Z) l0800_0659
	// succ:  l0800_064A l0800_0659
l0800_064A:
	sp = sp - 2
	Mem0[ss:sp:word16] = ds
	ax = 0x05DC
	sp = sp - 2
	Mem0[ss:sp:word16] = ax
	ax = 0x0002
	sp = sp - 2
	Mem0[ss:sp:word16] = ax
	call fn0800_0D24 (retsize: 2;)
	sp = sp + 0x0006
	SCZO = cond(sp)
	// succ:  l0800_0659
l0800_0659:
	bx = si
	SCZO = cond(bx - 0x000A)
	branch Test(ULE,CZ) l0800_0663
	// succ:  l0800_0660 l0800_0663
l0800_0660:
	goto l0800_0869
	// succ:  l0800_0869
l0800_0663:
	bx = bx << 0x0001
	SCZO = cond(bx)
	switch (bx) { l0800_069D l0800_0716 l0800_0765 l0800_080A l0800_07A9 l0800_074C l0800_066A l0800_0682 l0800_0679 l0800_068B l0800_0694 }
	// succ:  l0800_069D l0800_0716 l0800_0765 l0800_080A l0800_07A9 l0800_074C l0800_066A l0800_0682 l0800_0679 l0800_068B l0800_0694
l0800_066A:
	Mem0[ds:0x2A1F:word16] = 0x0001
	Mem0[ds:0x2E4F:word16] = 0x0000
	goto l0800_0869
	// succ:  l0800_0869
l0800_0679:
	Mem0[ds:0x2A1D:word16] = 0x0001
	goto l0800_0869
	// succ:  l0800_0869
l0800_0682:
	Mem0[ds:0x2A1B:word16] = 0x0001
	goto l0800_0869
	// succ:  l0800_0869
l0800_068B:
	Mem0[ds:0x2A17:word16] = 0x0001
	goto l0800_0869
	// succ:  l0800_0869
l0800_0694:
	Mem0[ds:0x2A15:word16] = 0x0001
	goto l0800_0869
	// succ:  l0800_0869
l0800_069D:
	SCZO = cond(Mem0[ds:0x2A19:word16] - 0x0000)
	branch Test(EQ,Z) l0800_06A7
	// succ:  l0800_06A4 l0800_06A7
l0800_06A4:
	goto l0800_0869
	// succ:  l0800_0869
l0800_06A7:
	es_di = Mem0[ss:bp - 0x0004:segptr32]
	ax = ax ^ ax
	SZO = cond(ax)
	C = false
	cx = 0xFFFF
	// succ:  l0800_06AF
l0800_06AF:
	branch cx == 0x0000 l0800_06B1
	// succ:  l0800_06AF_1 l0800_06B1
l0800_06AF_1:
	SCZO = cond(al - Mem0[es:di:byte])
	di = di + 0x0001
	cx = cx - 0x0001
	branch Test(EQ,Z) l0800_06AF
	// succ:  l0800_06B1 l0800_06AF
l0800_06B1:
	cx = ~cx
	cx = cx - 0x0001
	SZO = cond(cx)
	SCZO = cond(cx - 0x0001)
	branch Test(ULE,CZ) l0800_06C9
	// succ:  l0800_06B9 l0800_06C9
l0800_06B9:
	v37 = Mem0[ss:bp - 0x0002:word16]
	sp = sp - 2
	Mem0[ss:sp:word16] = v37
	v38 = Mem0[ss:bp - 0x0004:word16]
	sp = sp - 2
	Mem0[ss:sp:word16] = v38
	ax = 0x0003
	sp = sp - 2
	Mem0[ss:sp:word16] = ax
	call fn0800_0D24 (retsize: 2;)
	sp = sp + 0x0006
	SCZO = cond(sp)
	// succ:  l0800_06C9
l0800_06C9:
	es_bx = Mem0[ss:bp - 0x0004:segptr32]
	al = Mem0[es:bx:byte]
	sp = sp - 2
	Mem0[ss:sp:word16] = ax
	sp = sp - 2
	Mem0[ss:sp:word16] = ds
	ax = 0x0844
	sp = sp - 2
	Mem0[ss:sp:word16] = ax
	call fn0800_0C29 (retsize: 2;)
	sp = sp + 0x0006
	SCZO = cond(sp)
	Mem0[ds:0x2A23:word16] = ax
	SCZO = cond(ax - 0x0006)
	branch Test(LT,SO) l0800_06F3
	// succ:  l0800_06E3 l0800_06F3
l0800_06E3:
	v42 = Mem0[ss:bp - 0x0002:word16]
	sp = sp - 2
	Mem0[ss:sp:word16] = v42
	v43 = Mem0[ss:bp - 0x0004:word16]
	sp = sp - 2
	Mem0[ss:sp:word16] = v43
	ax = 0x0003
	sp = sp - 2
	Mem0[ss:sp:word16] = ax
	call fn0800_0D24 (retsize: 2;)
	sp = sp + 0x0006
	SCZO = cond(sp)
	// succ:  l0800_06F3
l0800_06F3:
	bx = Mem0[ds:0x2A23:word16]
	bx = bx << 0x0001
	SCZO = cond(bx)
	bx = bx << 0x0001
	SCZO = cond(bx)
	v44 = Mem0[ds:bx + 0x0547:word16]
	sp = sp - 2
	Mem0[ss:sp:word16] = v44
	v45 = Mem0[ds:bx + 0x0545:word16]
	sp = sp - 2
	Mem0[ss:sp:word16] = v45
	sp = sp - 2
	Mem0[ss:sp:word16] = ds
	ax = 0x084B
	sp = sp - 2
	Mem0[ss:sp:word16] = ax
	sp = sp - 2
	Mem0[ss:sp:word16] = ds
	ax = 0x4271
	sp = sp - 2
	Mem0[ss:sp:word16] = ax
	call fn0800_BEA2 (retsize: 2;)
	sp = sp + 0x000C
	SCZO = cond(sp)
	goto l0800_0869
	// succ:  l0800_0869
l0800_0716:
	sp = sp - 2
	Mem0[ss:sp:word16] = ds
	ax = 0x2E4F
	sp = sp - 2
	Mem0[ss:sp:word16] = ax
	sp = sp - 2
	Mem0[ss:sp:word16] = ds
	ax = 0x084F
	sp = sp - 2
	Mem0[ss:sp:word16] = ax
	v32 = Mem0[ss:bp - 0x0002:word16]
	sp = sp - 2
	Mem0[ss:sp:word16] = v32
	v33 = Mem0[ss:bp - 0x0004:word16]
	sp = sp - 2
	Mem0[ss:sp:word16] = v33
	call fn0800_BF18 (retsize: 2;)
	sp = sp + 0x000C
	SCZO = cond(sp)
	SCZO = cond(Mem0[ds:0x2E4F:word16] - 0x0000)
	branch Test(NE,Z) l0800_0743
	// succ:  l0800_0733 l0800_0743
l0800_0733:
	v34 = Mem0[ss:bp - 0x0002:word16]
	sp = sp - 2
	Mem0[ss:sp:word16] = v34
	v35 = Mem0[ss:bp - 0x0004:word16]
	sp = sp - 2
	Mem0[ss:sp:word16] = v35
	ax = 0x0004
	sp = sp - 2
	Mem0[ss:sp:word16] = ax
	call fn0800_0D24 (retsize: 2;)
	sp = sp + 0x0006
	SCZO = cond(sp)
	// succ:  l0800_0743
l0800_0743:
	Mem0[ds:0x2A1F:word16] = 0x0000
	goto l0800_0869
	// succ:  l0800_0869
l0800_074C:
	sp = sp - 2
	Mem0[ss:sp:word16] = ds
	ax = 0x2A0F
	sp = sp - 2
	Mem0[ss:sp:word16] = ax
	sp = sp - 2
	Mem0[ss:sp:word16] = ds
	ax = 0x0853
	sp = sp - 2
	Mem0[ss:sp:word16] = ax
	v26 = Mem0[ss:bp - 0x0002:word16]
	sp = sp - 2
	Mem0[ss:sp:word16] = v26
	v27 = Mem0[ss:bp - 0x0004:word16]
	sp = sp - 2
	Mem0[ss:sp:word16] = v27
	call fn0800_BF18 (retsize: 2;)
	sp = sp + 0x000C
	SCZO = cond(sp)
	goto l0800_0869
	// succ:  l0800_0869
l0800_0765:
	sp = sp - 2
	Mem0[ss:sp:word16] = ds
	ax = 0x2A21
	sp = sp - 2
	Mem0[ss:sp:word16] = ax
	sp = sp - 2
	Mem0[ss:sp:word16] = ds
	ax = 0x0856
	sp = sp - 2
	Mem0[ss:sp:word16] = ax
	v30 = Mem0[ss:bp - 0x0002:word16]
	sp = sp - 2
	Mem0[ss:sp:word16] = v30
	v31 = Mem0[ss:bp - 0x0004:word16]
	sp = sp - 2
	Mem0[ss:sp:word16] = v31
	call fn0800_BF18 (retsize: 2;)
	sp = sp + 0x000C
	SCZO = cond(sp)
	SCZO = cond(Mem0[ds:0x2A21:word16] - 0x0002)
	branch Test(GT,SZO) l0800_0796
	// succ:  l0800_0782 l0800_0796
l0800_0782:
	SCZO = cond(Mem0[ds:0x2A21:word16] - 0x0000)
	branch Test(EQ,Z) l0800_078C
	// succ:  l0800_0789 l0800_078C
l0800_0789:
	goto l0800_0869
	// succ:  l0800_0869
l0800_078C:
	SCZO = cond(Mem0[ds:0x2A25:word16] - 0x0000)
	branch Test(EQ,Z) l0800_0796
	// succ:  l0800_0793 l0800_0796
l0800_0793:
	goto l0800_0869
	// succ:  l0800_0869
l0800_0796:
	v39 = Mem0[ss:bp - 0x0002:word16]
	sp = sp - 2
	Mem0[ss:sp:word16] = v39
	v40 = Mem0[ss:bp - 0x0004:word16]
	sp = sp - 2
	Mem0[ss:sp:word16] = v40
	ax = 0x0005
	sp = sp - 2
	Mem0[ss:sp:word16] = ax
	call fn0800_0D24 (retsize: 2;)
	sp = sp + 0x0006
	SCZO = cond(sp)
	goto l0800_0869
	// succ:  l0800_0869
l0800_07A9:
	sp = sp - 2
	Mem0[ss:sp:word16] = ds
	es = Mem0[ss:sp:selector]
	sp = sp + 2
	di = 0x42E3
	sp = sp - 2
	Mem0[ss:sp:word16] = es
	es = Mem0[ss:bp - 0x0002:selector]
	sp = sp - 2
	Mem0[ss:sp:word16] = di
	di = Mem0[ss:bp - 0x0004:word16]
	ax = ax ^ ax
	SZO = cond(ax)
	C = false
	cx = 0xFFFF
	// succ:  l0800_07BB
l0800_07BB:
	branch cx == 0x0000 l0800_07BD
	// succ:  l0800_07BB_1 l0800_07BD
l0800_07BB_1:
	SCZO = cond(al - Mem0[es:di:byte])
	di = di + 0x0001
	cx = cx - 0x0001
	branch Test(EQ,Z) l0800_07BB
	// succ:  l0800_07BD l0800_07BB
l0800_07BD:
	cx = ~cx
	di = di - cx
	SCZO = cond(di)
	cx = cx >>u 0x0001
	SCZO = cond(cx)
	si = di
	di = Mem0[ss:sp:word16]
	sp = sp + 2
	ax = es
	es = Mem0[ss:sp:selector]
	sp = sp + 2
	sp = sp - 2
	Mem0[ss:sp:word16] = ds
	ds = ax
	// succ:  l0800_07CC
l0800_07CC:
	branch cx == 0x0000 l0800_07CE
	// succ:  l0800_07CC_2 l0800_07CE
l0800_07CC_2:
	v28 = Mem0[ds:si:word16]
	Mem0[es:di:word16] = v28
	si = si + 0x0002
	di = di + 0x0002
	cx = cx - 0x0001
	goto l0800_07CC
	// succ:  l0800_07CC
l0800_07CE:
	cx = cx + cx + C
	SCZO = cond(cx)
	// succ:  l0800_07D0
l0800_07D0:
	branch cx == 0x0000 l0800_07D2
	// succ:  l0800_07D0_1 l0800_07D2
l0800_07D0_1:
	v47 = Mem0[ds:si:byte]
	Mem0[es:di:byte] = v47
	si = si + 0x0001
	di = di + 0x0001
	cx = cx - 0x0001
	goto l0800_07D0
	// succ:  l0800_07D0
l0800_07D2:
	ds = Mem0[ss:sp:selector]
	sp = sp + 2
	sp = sp - 2
	Mem0[ss:sp:word16] = ds
	ax = 0x42E3
	sp = sp - 2
	Mem0[ss:sp:word16] = ax
	call fn0800_0C6C (retsize: 2;)
	sp = sp + 0x0004
	SCZO = cond(sp)
	sp = sp - 2
	Mem0[ss:sp:word16] = ds
	es = Mem0[ss:sp:selector]
	sp = sp + 2
	di = 0x42E3
	ax = ax ^ ax
	SZO = cond(ax)
	C = false
	cx = 0xFFFF
	// succ:  l0800_07E8
l0800_07E8:
	branch cx == 0x0000 l0800_07EA
	// succ:  l0800_07E8_1 l0800_07EA
l0800_07E8_1:
	SCZO = cond(al - Mem0[es:di:byte])
	di = di + 0x0001
	cx = cx - 0x0001
	branch Test(EQ,Z) l0800_07E8
	// succ:  l0800_07EA l0800_07E8
l0800_07EA:
	cx = ~cx
	cx = cx - 0x0001
	SZO = cond(cx)
	cx = cx - 0x0001
	SZO = cond(cx)
	bx = cx
	SCZO = cond(Mem0[ds:bx + 0x42E3:byte] - 0x5C)
	branch Test(EQ,Z) l0800_0869
	// succ:  l0800_07F7 l0800_0869
l0800_07F7:
	di = 0x42E3
	si = 0x0859
	cx = 0xFFFF
	// succ:  l0800_0800
l0800_0800:
	branch cx == 0x0000 l0800_0802
	// succ:  l0800_0800_2 l0800_0802
l0800_0800_2:
	SCZO = cond(al - Mem0[es:di:byte])
	di = di + 0x0001
	cx = cx - 0x0001
	branch Test(EQ,Z) l0800_0800
	// succ:  l0800_0802 l0800_0800
l0800_0802:
	di = di - 0x0001
	SZO = cond(di)
	cx = 0x0002
	// succ:  l0800_0806
l0800_0806:
	branch cx == 0x0000 l0800_0808
	// succ:  l0800_0806_3 l0800_0808
l0800_0806_3:
	v48 = Mem0[ds:si:byte]
	Mem0[es:di:byte] = v48
	si = si + 0x0001
	di = di + 0x0001
	cx = cx - 0x0001
	goto l0800_0806
	// succ:  l0800_0806
l0800_0808:
	goto l0800_0869
	// succ:  l0800_0869
l0800_080A:
	sp = sp - 2
	Mem0[ss:sp:word16] = ds
	es = Mem0[ss:sp:selector]
	sp = sp + 2
	di = 0x427E
	sp = sp - 2
	Mem0[ss:sp:word16] = es
	es = Mem0[ss:bp - 0x0002:selector]
	sp = sp - 2
	Mem0[ss:sp:word16] = di
	di = Mem0[ss:bp - 0x0004:word16]
	ax = ax ^ ax
	SZO = cond(ax)
	C = false
	cx = 0xFFFF
	// succ:  l0800_081C
l0800_081C:
	branch cx == 0x0000 l0800_081E
	// succ:  l0800_081C_1 l0800_081E
l0800_081C_1:
	SCZO = cond(al - Mem0[es:di:byte])
	di = di + 0x0001
	cx = cx - 0x0001
	branch Test(EQ,Z) l0800_081C
	// succ:  l0800_081E l0800_081C
l0800_081E:
	cx = ~cx
	di = di - cx
	SCZO = cond(di)
	cx = cx >>u 0x0001
	SCZO = cond(cx)
	si = di
	di = Mem0[ss:sp:word16]
	sp = sp + 2
	ax = es
	es = Mem0[ss:sp:selector]
	sp = sp + 2
	sp = sp - 2
	Mem0[ss:sp:word16] = ds
	ds = ax
	// succ:  l0800_082D
l0800_082D:
	branch cx == 0x0000 l0800_082F
	// succ:  l0800_082D_2 l0800_082F
l0800_082D_2:
	v29 = Mem0[ds:si:word16]
	Mem0[es:di:word16] = v29
	si = si + 0x0002
	di = di + 0x0002
	cx = cx - 0x0001
	goto l0800_082D
	// succ:  l0800_082D
l0800_082F:
	cx = cx + cx + C
	SCZO = cond(cx)
	// succ:  l0800_0831
l0800_0831:
	branch cx == 0x0000 l0800_0833
	// succ:  l0800_0831_1 l0800_0833
l0800_0831_1:
	v41 = Mem0[ds:si:byte]
	Mem0[es:di:byte] = v41
	si = si + 0x0001
	di = di + 0x0001
	cx = cx - 0x0001
	goto l0800_0831
	// succ:  l0800_0831
l0800_0833:
	ds = Mem0[ss:sp:selector]
	sp = sp + 2
	sp = sp - 2
	Mem0[ss:sp:word16] = ds
	ax = 0x427E
	sp = sp - 2
	Mem0[ss:sp:word16] = ax
	call fn0800_0C6C (retsize: 2;)
	sp = sp + 0x0004
	SCZO = cond(sp)
	sp = sp - 2
	Mem0[ss:sp:word16] = ds
	es = Mem0[ss:sp:selector]
	sp = sp + 2
	di = 0x427E
	ax = ax ^ ax
	SZO = cond(ax)
	C = false
	cx = 0xFFFF
	// succ:  l0800_0849
l0800_0849:
	branch cx == 0x0000 l0800_084B
	// succ:  l0800_0849_1 l0800_084B
l0800_0849_1:
	SCZO = cond(al - Mem0[es:di:byte])
	di = di + 0x0001
	cx = cx - 0x0001
	branch Test(EQ,Z) l0800_0849
	// succ:  l0800_084B l0800_0849
l0800_084B:
	cx = ~cx
	cx = cx - 0x0001
	SZO = cond(cx)
	cx = cx - 0x0001
	SZO = cond(cx)
	bx = cx
	SCZO = cond(Mem0[ds:bx + 0x427E:byte] - 0x5C)
	branch Test(EQ,Z) l0800_0869
	// succ:  l0800_0858 l0800_0869
l0800_0858:
	di = 0x427E
	si = 0x0859
	cx = 0xFFFF
	// succ:  l0800_0861
l0800_0861:
	branch cx == 0x0000 l0800_0863
	// succ:  l0800_0861_2 l0800_0863
l0800_0861_2:
	SCZO = cond(al - Mem0[es:di:byte])
	di = di + 0x0001
	cx = cx - 0x0001
	branch Test(EQ,Z) l0800_0861
	// succ:  l0800_0863 l0800_0861
l0800_0863:
	di = di - 0x0001
	SZO = cond(di)
	cx = 0x0002
	// succ:  l0800_0867
l0800_0867:
	branch cx == 0x0000 l0800_0869
	// succ:  l0800_0867_3 l0800_0869
l0800_0867_3:
	v46 = Mem0[ds:si:byte]
	Mem0[es:di:byte] = v46
	si = si + 0x0001
	di = di + 0x0001
	cx = cx - 0x0001
	goto l0800_0867
	// succ:  l0800_0867
l0800_0869:
	v23 = Mem0[ds:0x2A27:word16] + 0x0001
	Mem0[ds:0x2A27:word16] = v23
	SZO = cond(v23)
	// succ:  l0800_086D
l0800_086D:
	ax = Mem0[ds:0x2A27:word16]
	ax = ax << 0x0001
	SCZO = cond(ax)
	ax = ax << 0x0001
	SCZO = cond(ax)
	es_bx = Mem0[ds:0x269C:segptr32]
	bx = bx + ax
	SCZO = cond(bx)
	es_bx = Mem0[ds:bx + 0x0000:segptr32]
	SCZO = cond(Mem0[es:bx:byte] - 0x2D)
	branch Test(NE,Z) l0800_0886
	// succ:  l0800_0883 l0800_0886
l0800_0883:
	goto l0800_058A
	// succ:  l0800_058A
l0800_0886:
	ax = Mem0[ds:0x2A27:word16]
	ax = ax << 0x0001
	SCZO = cond(ax)
	ax = ax << 0x0001
	SCZO = cond(ax)
	es_bx = Mem0[ds:0x269C:segptr32]
	bx = bx + ax
	SCZO = cond(bx)
	es_bx = Mem0[ds:bx + 0x0000:segptr32]
	SCZO = cond(Mem0[es:bx:byte] - 0x2F)
	branch Test(NE,Z) l0800_089F
	// succ:  l0800_089C l0800_089F
l0800_089C:
	goto l0800_058A
	// succ:  l0800_058A
l0800_089F:
	ax = Mem0[ds:0x2A21:word16]
	SCZO = cond(ax - 0x0001)
	branch Test(EQ,Z) l0800_08AE
	// succ:  l0800_08A7 l0800_08AE
l0800_08A7:
	SCZO = cond(ax - 0x0002)
	branch Test(EQ,Z) l0800_08D9
	// succ:  l0800_08AC l0800_08D9
l0800_08AC:
	goto l0800_0902
	// succ:  l0800_0902
l0800_08AE:
	sp = sp - 2
	Mem0[ss:sp:word16] = ds
	es = Mem0[ss:sp:selector]
	sp = sp + 2
	di = 0x4271
	si = 0x085B
	cx = 0xFFFF
	ax = ax ^ ax
	SZO = cond(ax)
	C = false
	// succ:  l0800_08BB
l0800_08BB:
	branch cx == 0x0000 l0800_08BD
	// succ:  l0800_08BB_1 l0800_08BD
l0800_08BB_1:
	SCZO = cond(al - Mem0[es:di:byte])
	di = di + 0x0001
	cx = cx - 0x0001
	branch Test(EQ,Z) l0800_08BB
	// succ:  l0800_08BD l0800_08BB
l0800_08BD:
	di = di - 0x0001
	SZO = cond(di)
	cx = 0x0002
	// succ:  l0800_08C1
l0800_08C1:
	branch cx == 0x0000 l0800_08C3
	// succ:  l0800_08C1_2 l0800_08C3
l0800_08C1_2:
	v50 = Mem0[ds:si:byte]
	Mem0[es:di:byte] = v50
	si = si + 0x0001
	di = di + 0x0001
	cx = cx - 0x0001
	goto l0800_08C1
	// succ:  l0800_08C1
l0800_08C3:
	SCZO = cond(Mem0[ds:0x2E31:word16] - 0x8000)
	branch Test(ULE,CZ) l0800_08D1
	// succ:  l0800_08CB l0800_08D1
l0800_08CB:
	Mem0[ds:0x2E31:word16] = 0x8000
	// succ:  l0800_08D1
l0800_08D1:
	Mem0[ds:0x2E2F:word16] = 0x1000
	goto l0800_0902
	// succ:  l0800_0902
l0800_08D9:
	sp = sp - 2
	Mem0[ss:sp:word16] = ds
	es = Mem0[ss:sp:selector]
	sp = sp + 2
	di = 0x4271
	si = 0x085D
	cx = 0xFFFF
	ax = ax ^ ax
	SZO = cond(ax)
	C = false
	// succ:  l0800_08E6
l0800_08E6:
	branch cx == 0x0000 l0800_08E8
	// succ:  l0800_08E6_1 l0800_08E8
l0800_08E6_1:
	SCZO = cond(al - Mem0[es:di:byte])
	di = di + 0x0001
	cx = cx - 0x0001
	branch Test(EQ,Z) l0800_08E6
	// succ:  l0800_08E8 l0800_08E6
l0800_08E8:
	di = di - 0x0001
	SZO = cond(di)
	cx = 0x0002
	// succ:  l0800_08EC
l0800_08EC:
	branch cx == 0x0000 l0800_08EE
	// succ:  l0800_08EC_2 l0800_08EE
l0800_08EC_2:
	v22 = Mem0[ds:si:byte]
	Mem0[es:di:byte] = v22
	si = si + 0x0001
	di = di + 0x0001
	cx = cx - 0x0001
	goto l0800_08EC
	// succ:  l0800_08EC
l0800_08EE:
	SCZO = cond(Mem0[ds:0x2E31:word16] - 0x1000)
	branch Test(ULE,CZ) l0800_08FC
	// succ:  l0800_08F6 l0800_08FC
l0800_08F6:
	Mem0[ds:0x2E31:word16] = 0x1000
	// succ:  l0800_08FC
l0800_08FC:
	Mem0[ds:0x2E2F:word16] = 0x00FF
	// succ:  l0800_0902
l0800_0902:
	SCZO = cond(Mem0[ds:0x2A23:word16] - 0x0002)
	branch Test(NE,Z) l0800_0911
	// succ:  l0800_0909 l0800_0911
l0800_0909:
	ax = ax ^ ax
	SZO = cond(ax)
	C = false
	Mem0[ds:0x2A1D:word16] = ax
	Mem0[ds:0x2E4F:word16] = ax
	// succ:  l0800_0911
l0800_0911:
	SCZO = cond(Mem0[ds:0x2E4F:word16] - 0x0000)
	branch Test(EQ,Z) l0800_092D
	// succ:  l0800_0918 l0800_092D
l0800_0918:
	sp = sp - 2
	Mem0[ss:sp:word16] = ds
	es = Mem0[ss:sp:selector]
	sp = sp + 2
	di = 0x4271
	si = 0x0653
	cx = 0xFFFF
	ax = ax ^ ax
	SZO = cond(ax)
	C = false
	// succ:  l0800_0925
l0800_0925:
	branch cx == 0x0000 l0800_0927
	// succ:  l0800_0925_1 l0800_0927
l0800_0925_1:
	SCZO = cond(al - Mem0[es:di:byte])
	di = di + 0x0001
	cx = cx - 0x0001
	branch Test(EQ,Z) l0800_0925
	// succ:  l0800_0927 l0800_0925
l0800_0927:
	di = di - 0x0001
	SZO = cond(di)
	cx = 0x0002
	// succ:  l0800_092B
l0800_092B:
	branch cx == 0x0000 l0800_092D
	// succ:  l0800_092B_2 l0800_092D
l0800_092B_2:
	v24 = Mem0[ds:si:byte]
	Mem0[es:di:byte] = v24
	si = si + 0x0001
	di = di + 0x0001
	cx = cx - 0x0001
	goto l0800_092B
	// succ:  l0800_092B
l0800_092D:
	SCZO = cond(Mem0[ds:0x2A1D:word16] - 0x0000)
	branch Test(EQ,Z) l0800_0949
	// succ:  l0800_0934 l0800_0949
l0800_0934:
	sp = sp - 2
	Mem0[ss:sp:word16] = ds
	es = Mem0[ss:sp:selector]
	sp = sp + 2
	di = 0x4271
	si = 0x085F
	cx = 0xFFFF
	ax = ax ^ ax
	SZO = cond(ax)
	C = false
	// succ:  l0800_0941
l0800_0941:
	branch cx == 0x0000 l0800_0943
	// succ:  l0800_0941_1 l0800_0943
l0800_0941_1:
	SCZO = cond(al - Mem0[es:di:byte])
	di = di + 0x0001
	cx = cx - 0x0001
	branch Test(EQ,Z) l0800_0941
	// succ:  l0800_0943 l0800_0941
l0800_0943:
	di = di - 0x0001
	SZO = cond(di)
	cx = 0x0002
	// succ:  l0800_0947
l0800_0947:
	branch cx == 0x0000 l0800_0949
	// succ:  l0800_0947_2 l0800_0949
l0800_0947_2:
	v25 = Mem0[ds:si:byte]
	Mem0[es:di:byte] = v25
	si = si + 0x0001
	di = di + 0x0001
	cx = cx - 0x0001
	goto l0800_0947
	// succ:  l0800_0947
l0800_0949:
	sp = sp - 2
	Mem0[ss:sp:word16] = ds
	es = Mem0[ss:sp:selector]
	sp = sp + 2
	di = 0x4271
	si = 0x0861
	cx = 0xFFFF
	ax = ax ^ ax
	SZO = cond(ax)
	C = false
	// succ:  l0800_0956
l0800_0956:
	branch cx == 0x0000 l0800_0958
	// succ:  l0800_0956_1 l0800_0958
l0800_0956_1:
	SCZO = cond(al - Mem0[es:di:byte])
	di = di + 0x0001
	cx = cx - 0x0001
	branch Test(EQ,Z) l0800_0956
	// succ:  l0800_0958 l0800_0956
l0800_0958:
	di = di - 0x0001
	SZO = cond(di)
	cx = 0x0005
	// succ:  l0800_095C
l0800_095C:
	branch cx == 0x0000 l0800_095E
	// succ:  l0800_095C_2 l0800_095E
l0800_095C_2:
	v49 = Mem0[ds:si:byte]
	Mem0[es:di:byte] = v49
	si = si + 0x0001
	di = di + 0x0001
	cx = cx - 0x0001
	goto l0800_095C
	// succ:  l0800_095C
l0800_095E:
	SCZO = cond(Mem0[ds:0x2A25:word16] - 0x0000)
	branch Test(NE,Z) l0800_0987
	// succ:  l0800_0965 l0800_0987
l0800_0965:
	bx = Mem0[ds:0x2A23:word16]
	bx = bx << 0x0001
	SCZO = cond(bx)
	bx = bx << 0x0001
	SCZO = cond(bx)
	es_bx = Mem0[ds:bx + 0x0545:segptr32]
	SCZO = cond(Mem0[es:bx:byte] - 0x00)
	branch Test(EQ,Z) l0800_0987
	// succ:  l0800_0977 l0800_0987
l0800_0977:
	sp = sp - 2
	Mem0[ss:sp:word16] = ds
	ax = 0x2E75
	sp = sp - 2
	Mem0[ss:sp:word16] = ax
	sp = sp - 2
	Mem0[ss:sp:word16] = ds
	ax = 0x4271
	sp = sp - 2
	Mem0[ss:sp:word16] = ax
	call fn0800_09A3 (retsize: 2;)
	sp = sp + 0x0008
	SCZO = cond(sp)
	// succ:  l0800_0987
l0800_0987:
	di = Mem0[ss:sp:word16]
	sp = sp + 2
	si = Mem0[ss:sp:word16]
	sp = sp + 2
	sp = bp
	bp = Mem0[ss:sp:word16]
	sp = sp + 2
	return
	// succ:  fn0800_0541_exit
fn0800_0541_exit:


// fn0800_09A3
// Return size: 2
define fn0800_09A3
fn0800_09A3_entry:
	// succ:  l0800_09A3
l0800_09A3:
	sp = fp
	Top = 0
	sp = sp - 2
	Mem0[ss:sp:word16] = bp
	bp = sp
	sp = sp - 0x0008
	SCZO = cond(sp)
	sp = sp - 2
	Mem0[ss:sp:word16] = si
	sp = sp - 2
	Mem0[ss:sp:word16] = di
	al = Mem0[ds:0x0A72:byte]
	ax = (int16) al
	cl = 0x08
	ax = ax << cl
	SCZO = cond(ax)
	dl = Mem0[ds:0x0A73:byte]
	dh = 0x00
	ax = ax + dx
	SCZO = cond(ax)
	dx = dx ^ dx
	SZO = cond(dx)
	C = false
	sp = sp - 2
	Mem0[ss:sp:word16] = ax
	al = Mem0[ds:0x0A74:byte]
	ax = (int16) al
	ax = ax << cl
	SCZO = cond(ax)
	bl = Mem0[ds:0x0A75:byte]
	bh = 0x00
	ax = ax + bx
	SCZO = cond(ax)
	dx = dx + ax
	SCZO = cond(dx)
	ax = Mem0[ss:sp:word16]
	sp = sp + 2
	ax = ax + 0x0000 + C
	SCZO = cond(ax)
	dx = dx + 0x0020
	SCZO = cond(dx)
	ax = ax + 0x0000 + C
	SCZO = cond(ax)
	sp = sp - 2
	Mem0[ss:sp:word16] = ax
	sp = sp - 2
	Mem0[ss:sp:word16] = dx
	call fn0800_4311 (retsize: 2;)
	sp = sp + 0x0004
	SCZO = cond(sp)
	Mem0[ss:bp - 0x0002:word16] = dx
	Mem0[ss:bp - 0x0004:word16] = ax
	Mem0[ss:bp - 0x0006:word16] = dx
	Mem0[ss:bp - 0x0008:word16] = ax
	v20 = Mem0[ss:bp - 0x0002:word16]
	sp = sp - 2
	Mem0[ss:sp:word16] = v20
	sp = sp - 2
	Mem0[ss:sp:word16] = ax
	sp = sp - 2
	Mem0[ss:sp:word16] = ds
	ax = 0x0A6E
	sp = sp - 2
	Mem0[ss:sp:word16] = ax
	sp = sp - 2
	call fn0800_867A (retsize: 2;)
	sp = sp + 0x0008
	SCZO = cond(sp)
	goto l0800_0A4F
	// succ:  l0800_0A4F
l0800_09FF:
	es_di = Mem0[ss:bp - 0x0008:segptr32]
	ax = ax ^ ax
	SZO = cond(ax)
	C = false
	cx = 0xFFFF
	// succ:  l0800_0A07
l0800_0A07:
	branch cx == 0x0000 l0800_0A09
	// succ:  l0800_0A07_1 l0800_0A09
l0800_0A07_1:
	SCZO = cond(al - Mem0[es:di:byte])
	di = di + 0x0001
	cx = cx - 0x0001
	branch Test(EQ,Z) l0800_0A07
	// succ:  l0800_0A09 l0800_0A07
l0800_0A09:
	cx = ~cx
	cx = cx - 0x0001
	SZO = cond(cx)
	ax = Mem0[ss:bp - 0x0008:word16]
	ax = ax + cx
	SCZO = cond(ax)
	bx = ax
	al = Mem0[es:bx + 0x0001:byte]
	ax = (int16) al
	cl = 0x08
	ax = ax << cl
	SCZO = cond(ax)
	di = Mem0[ss:bp - 0x0008:word16]
	sp = sp - 2
	Mem0[ss:sp:word16] = ax
	ax = ax ^ ax
	SZO = cond(ax)
	C = false
	cx = 0xFFFF
	// succ:  l0800_0A25
l0800_0A25:
	branch cx == 0x0000 l0800_0A27
	// succ:  l0800_0A25_2 l0800_0A27
l0800_0A25_2:
	SCZO = cond(al - Mem0[es:di:byte])
	di = di + 0x0001
	cx = cx - 0x0001
	branch Test(EQ,Z) l0800_0A25
	// succ:  l0800_0A27 l0800_0A25
l0800_0A27:
	cx = ~cx
	cx = cx - 0x0001
	SZO = cond(cx)
	ax = Mem0[ss:bp - 0x0008:word16]
	ax = ax + cx
	SCZO = cond(ax)
	bx = ax
	al = Mem0[es:bx + 0x0002:byte]
	ah = 0x00
	dx = Mem0[ss:sp:word16]
	sp = sp + 2
	dx = dx + ax
	SCZO = cond(dx)
	di = Mem0[ss:bp - 0x0008:word16]
	ax = ax ^ ax
	SZO = cond(ax)
	C = false
	cx = 0xFFFF
	// succ:  l0800_0A42
l0800_0A42:
	branch cx == 0x0000 l0800_0A44
	// succ:  l0800_0A42_3 l0800_0A44
l0800_0A42_3:
	SCZO = cond(al - Mem0[es:di:byte])
	di = di + 0x0001
	cx = cx - 0x0001
	branch Test(EQ,Z) l0800_0A42
	// succ:  l0800_0A44 l0800_0A42
l0800_0A44:
	cx = ~cx
	cx = cx - 0x0001
	SZO = cond(cx)
	dx = dx + cx
	SCZO = cond(dx)
	dx = dx + 0x0003
	SCZO = cond(dx)
	v33 = Mem0[ss:bp - 0x0008:word16] + dx
	Mem0[ss:bp - 0x0008:word16] = v33
	SCZO = cond(v33)
	// succ:  l0800_0A4F
l0800_0A4F:
	si = Mem0[ss:bp + 0x0004:word16]
	sp = sp - 2
	Mem0[ss:sp:word16] = ds
	ds = Mem0[ss:bp + 0x0006:selector]
	es_di = Mem0[ss:bp - 0x0008:segptr32]
	ax = ax ^ ax
	SZO = cond(ax)
	C = false
	cx = 0xFFFF
	// succ:  l0800_0A5E
l0800_0A5E:
	branch cx == 0x0000 l0800_0A60
	// succ:  l0800_0A5E_1 l0800_0A60
l0800_0A5E_1:
	SCZO = cond(al - Mem0[es:di:byte])
	di = di + 0x0001
	cx = cx - 0x0001
	branch Test(EQ,Z) l0800_0A5E
	// succ:  l0800_0A60 l0800_0A5E
l0800_0A60:
	cx = ~cx
	di = di - cx
	SCZO = cond(di)
	// succ:  l0800_0A64
l0800_0A64:
	branch cx == 0x0000 l0800_0A66
	// succ:  l0800_0A64_2 l0800_0A66
l0800_0A64_2:
	SCZO = cond(Mem0[ds:si:byte] - Mem0[es:di:byte])
	si = si + 0x0001
	di = di + 0x0001
	cx = cx - 0x0001
	branch Test(NE,Z) l0800_0A64
	// succ:  l0800_0A66 l0800_0A64
l0800_0A66:
	branch Test(EQ,Z) l0800_0A6D
	// succ:  l0800_0A68 l0800_0A6D
l0800_0A68:
	ax = ax - ax - C
	SCZO = cond(ax)
	ax = ax - 0xFFFF - C
	SCZO = cond(ax)
	// succ:  l0800_0A6D
l0800_0A6D:
	ds = Mem0[ss:sp:selector]
	sp = sp + 2
	ax = ax | ax
	SZO = cond(ax)
	C = false
	branch Test(NE,Z) l0800_09FF
	// succ:  l0800_0A72 l0800_09FF
l0800_0A72:
	es_di = Mem0[ss:bp - 0x0008:segptr32]
	ax = ax ^ ax
	SZO = cond(ax)
	C = false
	cx = 0xFFFF
	// succ:  l0800_0A7A
l0800_0A7A:
	branch cx == 0x0000 l0800_0A7C
	// succ:  l0800_0A7A_1 l0800_0A7C
l0800_0A7A_1:
	SCZO = cond(al - Mem0[es:di:byte])
	di = di + 0x0001
	cx = cx - 0x0001
	branch Test(EQ,Z) l0800_0A7A
	// succ:  l0800_0A7C l0800_0A7A
l0800_0A7C:
	cx = ~cx
	cx = cx - 0x0001
	SZO = cond(cx)
	cx = cx + 0x0001
	SZO = cond(cx)
	v25 = Mem0[ss:bp - 0x0008:word16] + cx
	Mem0[ss:bp - 0x0008:word16] = v25
	SCZO = cond(v25)
	es_bx = Mem0[ss:bp - 0x0008:segptr32]
	al = Mem0[es:bx:byte]
	ax = (int16) al
	cl = 0x08
	ax = ax << cl
	SCZO = cond(ax)
	dl = Mem0[es:bx + 0x0001:byte]
	dh = 0x00
	ax = ax + dx
	SCZO = cond(ax)
	ax = ax + 0x0002
	SCZO = cond(ax)
	sp = sp - 2
	Mem0[ss:sp:word16] = ax
	v27 = Mem0[ss:bp - 0x0006:word16]
	sp = sp - 2
	Mem0[ss:sp:word16] = v27
	sp = sp - 2
	Mem0[ss:sp:word16] = bx
	v28 = Mem0[ss:bp + 0x000A:word16]
	sp = sp - 2
	Mem0[ss:sp:word16] = v28
	v29 = Mem0[ss:bp + 0x0008:word16]
	sp = sp - 2
	Mem0[ss:sp:word16] = v29
	call fn0800_B0F3 (retsize: 2;)
	sp = sp + 0x000A
	SCZO = cond(sp)
	v30 = Mem0[ss:bp - 0x0002:word16]
	sp = sp - 2
	Mem0[ss:sp:word16] = v30
	v31 = Mem0[ss:bp - 0x0004:word16]
	sp = sp - 2
	Mem0[ss:sp:word16] = v31
	call fn0800_4346 (retsize: 2;)
	sp = sp + 0x0004
	SCZO = cond(sp)
	di = Mem0[ss:sp:word16]
	sp = sp + 2
	si = Mem0[ss:sp:word16]
	sp = sp + 2
	sp = bp
	bp = Mem0[ss:sp:word16]
	sp = sp + 2
	return
	// succ:  fn0800_09A3_exit
fn0800_09A3_exit:


// fn0800_0ABC
// Return size: 2
define fn0800_0ABC
fn0800_0ABC_entry:
	// succ:  l0800_0ABC
l0800_0ABC:
	sp = fp
	Top = 0
	sp = sp - 2
	Mem0[ss:sp:word16] = bp
	bp = sp
	sp = sp - 0x000E
	SCZO = cond(sp)
	sp = sp - 2
	Mem0[ss:sp:word16] = si
	si = Mem0[ss:bp + 0x0004:word16]
	v7 = Mem0[ss:bp + 0x0008:word16]
	sp = sp - 2
	Mem0[ss:sp:word16] = v7
	v8 = Mem0[ss:bp + 0x0006:word16]
	sp = sp - 2
	Mem0[ss:sp:word16] = v8
	sp = sp - 2
	Mem0[ss:sp:word16] = ss
	ax = bp - 0x000E
	sp = sp - 2
	Mem0[ss:sp:word16] = ax
	call fn0800_35A3 (retsize: 2;)
	sp = sp + 0x0008
	SCZO = cond(sp)
	v11 = Mem0[ds:0x2A05:word16]
	sp = sp - 2
	Mem0[ss:sp:word16] = v11
	v12 = Mem0[ds:0x2A03:word16]
	sp = sp - 2
	Mem0[ss:sp:word16] = v12
	v13 = Mem0[ds:0x2A09:word16]
	sp = sp - 2
	Mem0[ss:sp:word16] = v13
	v14 = Mem0[ds:0x2A07:word16]
	sp = sp - 2
	Mem0[ss:sp:word16] = v14
	call fn0800_0B79 (retsize: 2;)
	sp = sp + 0x0008
	SCZO = cond(sp)
	cx = ax
	bx = 0x0064
	dx = dx ^ dx
	SZO = cond(dx)
	C = false
	v21 = dx_ax
	dx = (uint16) (v21 % bx)
	ax = (uint16) (v21 /u bx)
	SCZO = cond(ax)
	sp = sp - 2
	Mem0[ss:sp:word16] = dx
	ax = cx
	dx = dx ^ dx
	SZO = cond(dx)
	C = false
	v22 = dx_ax
	dx = (uint16) (v22 % bx)
	ax = (uint16) (v22 /u bx)
	SCZO = cond(ax)
	sp = sp - 2
	Mem0[ss:sp:word16] = ax
	v23 = Mem0[ds:0x2A05:word16]
	sp = sp - 2
	Mem0[ss:sp:word16] = v23
	v24 = Mem0[ds:0x2A03:word16]
	sp = sp - 2
	Mem0[ss:sp:word16] = v24
	v25 = Mem0[ds:0x2A09:word16]
	sp = sp - 2
	Mem0[ss:sp:word16] = v25
	v26 = Mem0[ds:0x2A07:word16]
	sp = sp - 2
	Mem0[ss:sp:word16] = v26
	sp = sp - 2
	Mem0[ss:sp:word16] = ss
	ax = bp - 0x000E
	sp = sp - 2
	Mem0[ss:sp:word16] = ax
	ax = 0x0014
	sp = sp - 2
	Mem0[ss:sp:word16] = ax
	sp = sp - 2
	Mem0[ss:sp:word16] = ax
	sp = sp - 2
	Mem0[ss:sp:word16] = ds
	ax = 0x0866
	sp = sp - 2
	Mem0[ss:sp:word16] = ax
	call fn0800_B2EF (retsize: 2;)
	sp = sp + 0x0018
	SCZO = cond(sp)
	SCZO = cond(Mem0[ds:0x2A25:word16] - 0x0002)
	branch Test(EQ,Z) l0800_0B2E
	// succ:  l0800_0B2A l0800_0B2E
l0800_0B2A:
	si = si | si
	SZO = cond(si)
	C = false
	branch Test(EQ,Z) l0800_0B47
	// succ:  l0800_0B2E l0800_0B47
l0800_0B2E:
	bx = si
	bx = bx << 0x0001
	SCZO = cond(bx)
	bx = bx << 0x0001
	SCZO = cond(bx)
	v28 = Mem0[ds:bx + 0x059B:word16]
	sp = sp - 2
	Mem0[ss:sp:word16] = v28
	v29 = Mem0[ds:bx + 0x0599:word16]
	sp = sp - 2
	Mem0[ss:sp:word16] = v29
	sp = sp - 2
	Mem0[ss:sp:word16] = ds
	ax = 0x0889
	sp = sp - 2
	Mem0[ss:sp:word16] = ax
	call fn0800_B2EF (retsize: 2;)
	sp = sp + 0x0008
	SCZO = cond(sp)
	// succ:  l0800_0B47
l0800_0B47:
	sp = sp - 2
	Mem0[ss:sp:word16] = ds
	ax = 0x0827
	sp = sp - 2
	Mem0[ss:sp:word16] = ax
	call fn0800_B2EF (retsize: 2;)
	sp = sp + 0x0004
	SCZO = cond(sp)
	ax = Mem0[ds:0x2A09:word16]
	dx = Mem0[ds:0x2A07:word16]
	v30 = Mem0[ds:0x29F3:word16] + dx
	Mem0[ds:0x29F3:word16] = v30
	SCZO = cond(v30)
	v31 = Mem0[ds:0x29F5:word16] + ax + C
	Mem0[ds:0x29F5:word16] = v31
	SCZO = cond(v31)
	ax = Mem0[ds:0x2A05:word16]
	dx = Mem0[ds:0x2A03:word16]
	v32 = Mem0[ds:0x29EF:word16] + dx
	Mem0[ds:0x29EF:word16] = v32
	SCZO = cond(v32)
	v33 = Mem0[ds:0x29F1:word16] + ax + C
	Mem0[ds:0x29F1:word16] = v33
	SCZO = cond(v33)
	v34 = Mem0[ds:0x2A13:word16] + 0x0001
	Mem0[ds:0x2A13:word16] = v34
	SZO = cond(v34)
	si = Mem0[ss:sp:word16]
	sp = sp + 2
	sp = bp
	bp = Mem0[ss:sp:word16]
	sp = sp + 2
	return
	// succ:  fn0800_0ABC_exit
fn0800_0ABC_exit:


// fn0800_0B79
// Return size: 2
define fn0800_0B79
fn0800_0B79_entry:
	// succ:  l0800_0B79
l0800_0B79:
	sp = fp
	Top = 0
	sp = sp - 2
	Mem0[ss:sp:word16] = bp
	bp = sp
	ax = Mem0[ss:bp + 0x0004:word16]
	ax = ax | Mem0[ss:bp + 0x0006:word16]
	SZO = cond(ax)
	C = false
	branch Test(EQ,Z) l0800_0B9E
	// succ:  l0800_0B84 l0800_0B9E
l0800_0B84:
	ax = Mem0[ss:bp + 0x0008:word16]
	ax = ax | Mem0[ss:bp + 0x000A:word16]
	SZO = cond(ax)
	C = false
	branch Test(EQ,Z) l0800_0B9E
	// succ:  l0800_0B8C l0800_0B9E
l0800_0B8C:
	ax = Mem0[ss:bp + 0x0006:word16]
	dx = Mem0[ss:bp + 0x0004:word16]
	SCZO = cond(ax - Mem0[ss:bp + 0x000A:word16])
	branch Test(UGT,CZ) l0800_0BCE
	// succ:  l0800_0B97 l0800_0BCE
l0800_0B97:
	branch Test(NE,Z) l0800_0B9E
	// succ:  l0800_0B99 l0800_0B9E
l0800_0B99:
	SCZO = cond(dx - Mem0[ss:bp + 0x0008:word16])
	branch Test(UGT,CZ) l0800_0BCE
	// succ:  l0800_0B9E l0800_0BCE
l0800_0B9E:
	ax = ax ^ ax
	SZO = cond(ax)
	C = false
	bp = Mem0[ss:sp:word16]
	sp = sp + 2
	return
	// succ:  fn0800_0B79_exit
l0800_0BA2:
	ax = ax ^ ax
	SZO = cond(ax)
	C = false
	dx = 0x000A
	sp = sp - 2
	Mem0[ss:sp:word16] = ax
	sp = sp - 2
	Mem0[ss:sp:word16] = dx
	v16 = Mem0[ss:bp + 0x0006:word16]
	sp = sp - 2
	Mem0[ss:sp:word16] = v16
	v17 = Mem0[ss:bp + 0x0004:word16]
	sp = sp - 2
	Mem0[ss:sp:word16] = v17
	call fn0800_8BC2 (retsize: 2;)
	sp = sp + 0x0008
	Mem0[ss:bp + 0x0006:word16] = dx
	Mem0[ss:bp + 0x0004:word16] = ax
	ax = ax ^ ax
	SZO = cond(ax)
	C = false
	dx = 0x000A
	sp = sp - 2
	Mem0[ss:sp:word16] = ax
	sp = sp - 2
	Mem0[ss:sp:word16] = dx
	v18 = Mem0[ss:bp + 0x000A:word16]
	sp = sp - 2
	Mem0[ss:sp:word16] = v18
	v19 = Mem0[ss:bp + 0x0008:word16]
	sp = sp - 2
	Mem0[ss:sp:word16] = v19
	call fn0800_8BC2 (retsize: 2;)
	sp = sp + 0x0008
	Mem0[ss:bp + 0x000A:word16] = dx
	Mem0[ss:bp + 0x0008:word16] = ax
	// succ:  l0800_0BCE
l0800_0BCE:
	ax = Mem0[ss:bp + 0x0006:word16]
	dx = Mem0[ss:bp + 0x0004:word16]
	dx = dx - Mem0[ss:bp + 0x0008:word16]
	SCZO = cond(dx)
	ax = ax - Mem0[ss:bp + 0x000A:word16] - C
	SCZO = cond(ax)
	SCZO = cond(ax - 0x0006)
	branch Test(UGT,CZ) l0800_0BA2
	// succ:  l0800_0BDF l0800_0BA2
l0800_0BDF:
	branch Test(NE,Z) l0800_0BE7
	// succ:  l0800_0BE1 l0800_0BE7
l0800_0BE1:
	SCZO = cond(dx - 0x8DB8)
	branch Test(UGT,CZ) l0800_0BA2
	// succ:  l0800_0BE7 l0800_0BA2
l0800_0BE7:
	v12 = Mem0[ss:bp + 0x0006:word16]
	sp = sp - 2
	Mem0[ss:sp:word16] = v12
	v13 = Mem0[ss:bp + 0x0004:word16]
	sp = sp - 2
	Mem0[ss:sp:word16] = v13
	cx = Mem0[ss:bp + 0x0006:word16]
	bx = Mem0[ss:bp + 0x0004:word16]
	bx = bx - Mem0[ss:bp + 0x0008:word16]
	SCZO = cond(bx)
	cx = cx - Mem0[ss:bp + 0x000A:word16] - C
	SCZO = cond(cx)
	dx = dx ^ dx
	SZO = cond(dx)
	C = false
	ax = 0x2710
	call fn0800_8F18 (retsize: 2;)
	sp = sp - 2
	Mem0[ss:sp:word16] = dx
	sp = sp - 2
	Mem0[ss:sp:word16] = ax
	call fn0800_8BC2 (retsize: 2;)
	sp = sp + 0x0008
	bp = Mem0[ss:sp:word16]
	sp = sp + 2
	return
	// succ:  fn0800_0B79_exit
fn0800_0B79_exit:


// fn0800_0C08
// Return size: 2
define fn0800_0C08
fn0800_0C08_entry:
	// succ:  l0800_0C08
l0800_0C08:
	sp = fp
	Top = 0
	sp = sp - 2
	Mem0[ss:sp:word16] = bp
	bp = sp
	sp = sp - 2
	Mem0[ss:sp:word16] = si
	si = Mem0[ss:bp + 0x0004:word16]
	cx = 0x0001
	goto l0800_0C15
	// succ:  l0800_0C15
l0800_0C14:
	cx = cx + 0x0001
	SZO = cond(cx)
	// succ:  l0800_0C15
l0800_0C15:
	bx = 0x0002
	ax = si
	dx = dx ^ dx
	SZO = cond(dx)
	C = false
	v13 = dx_ax
	dx = (uint16) (v13 % bx)
	ax = (uint16) (v13 /u bx)
	SCZO = cond(ax)
	si = ax
	ax = ax | ax
	SZO = cond(ax)
	C = false
	branch Test(NE,Z) l0800_0C14
	// succ:  l0800_0C24 l0800_0C14
l0800_0C24:
	ax = cx
	si = Mem0[ss:sp:word16]
	sp = sp + 2
	bp = Mem0[ss:sp:word16]
	sp = sp + 2
	return
	// succ:  fn0800_0C08_exit
fn0800_0C08_exit:


// fn0800_0C29
// Return size: 2
define fn0800_0C29
fn0800_0C29_entry:
	// succ:  l0800_0C29
l0800_0C29:
	sp = fp
	Top = 0
	sp = sp - 2
	Mem0[ss:sp:word16] = bp
	bp = sp
	sp = sp - 0x0004
	SCZO = cond(sp)
	cl = Mem0[ss:bp + 0x0008:byte]
	al = cl
	ax = (int16) al
	sp = sp - 2
	Mem0[ss:sp:word16] = ax
	call fn0800_97CC (retsize: 2;)
	sp = sp + 0x0002
	SCZO = cond(sp)
	cl = al
	ax = Mem0[ss:bp + 0x0006:word16]
	dx = Mem0[ss:bp + 0x0004:word16]
	Mem0[ss:bp - 0x0002:word16] = ax
	Mem0[ss:bp - 0x0004:word16] = dx
	goto l0800_0C4F
	// succ:  l0800_0C4F
l0800_0C4C:
	v16 = Mem0[ss:bp - 0x0004:word16] + 0x0001
	Mem0[ss:bp - 0x0004:word16] = v16
	SZO = cond(v16)
	// succ:  l0800_0C4F
l0800_0C4F:
	es_bx = Mem0[ss:bp - 0x0004:segptr32]
	SCZO = cond(Mem0[es:bx:byte] - 0x00)
	branch Test(EQ,Z) l0800_0C5D
	// succ:  l0800_0C58 l0800_0C5D
l0800_0C58:
	SCZO = cond(Mem0[es:bx:byte] - cl)
	branch Test(NE,Z) l0800_0C4C
	// succ:  l0800_0C5D l0800_0C4C
l0800_0C5D:
	ax = Mem0[ss:bp - 0x0004:word16]
	dx = dx ^ dx
	SZO = cond(dx)
	C = false
	ax = ax - Mem0[ss:bp + 0x0004:word16]
	SCZO = cond(ax)
	dx = dx - 0x00 - C
	SCZO = cond(dx)
	sp = bp
	bp = Mem0[ss:sp:word16]
	sp = sp + 2
	return
	// succ:  fn0800_0C29_exit
fn0800_0C29_exit:


// fn0800_0C6C
// Return size: 2
define fn0800_0C6C
fn0800_0C6C_entry:
	// succ:  l0800_0C6C
l0800_0C6C:
	sp = fp
	Top = 0
	sp = sp - 2
	Mem0[ss:sp:word16] = bp
	bp = sp
	goto l0800_0C88
	// succ:  l0800_0C88
l0800_0C71:
	es_bx = Mem0[ss:bp + 0x0004:segptr32]
	al = Mem0[es:bx:byte]
	ax = (int16) al
	sp = sp - 2
	Mem0[ss:sp:word16] = ax
	call fn0800_97CC (retsize: 2;)
	sp = sp + 0x0002
	SCZO = cond(sp)
	es_bx = Mem0[ss:bp + 0x0004:segptr32]
	Mem0[es:bx:byte] = al
	v12 = Mem0[ss:bp + 0x0004:word16] + 0x0001
	Mem0[ss:bp + 0x0004:word16] = v12
	SZO = cond(v12)
	// succ:  l0800_0C88
l0800_0C88:
	es_bx = Mem0[ss:bp + 0x0004:segptr32]
	SCZO = cond(Mem0[es:bx:byte] - 0x00)
	branch Test(NE,Z) l0800_0C71
	// succ:  l0800_0C91 l0800_0C71
l0800_0C91:
	bp = Mem0[ss:sp:word16]
	sp = sp + 2
	return
	// succ:  fn0800_0C6C_exit
fn0800_0C6C_exit:


// fn0800_0C93
// Return size: 2
define fn0800_0C93
fn0800_0C93_entry:
	// succ:  l0800_0C93
l0800_0C93:
	sp = fp
	Top = 0
	sp = sp - 2
	Mem0[ss:sp:word16] = bp
	bp = sp
	sp = sp - 0x0066
	SCZO = cond(sp)
	sp = sp - 2
	Mem0[ss:sp:word16] = si
	sp = sp - 2
	Mem0[ss:sp:word16] = di
	v8 = Mem0[ss:bp + 0x0006:word16]
	sp = sp - 2
	Mem0[ss:sp:word16] = v8
	v9 = Mem0[ss:bp + 0x0004:word16]
	sp = sp - 2
	Mem0[ss:sp:word16] = v9
	sp = sp - 2
	Mem0[ss:sp:word16] = ss
	ax = bp - 0x0066
	sp = sp - 2
	Mem0[ss:sp:word16] = ax
	call fn0800_3509 (retsize: 2;)
	sp = sp + 0x0008
	SCZO = cond(sp)
	si = 0x2714
	sp = sp - 2
	Mem0[ss:sp:word16] = ss
	es = Mem0[ss:sp:selector]
	sp = sp + 2
	di = bp - 0x0066
	ax = ax ^ ax
	SZO = cond(ax)
	C = false
	cx = 0xFFFF
	// succ:  l0800_0CB9
l0800_0CB9:
	branch cx == 0x0000 l0800_0CBB
	// succ:  l0800_0CB9_1 l0800_0CBB
l0800_0CB9_1:
	SCZO = cond(al - Mem0[es:di:byte])
	di = di + 0x0001
	cx = cx - 0x0001
	branch Test(EQ,Z) l0800_0CB9
	// succ:  l0800_0CBB l0800_0CB9
l0800_0CBB:
	cx = ~cx
	di = di - cx
	SCZO = cond(di)
	// succ:  l0800_0CBF
l0800_0CBF:
	branch cx == 0x0000 l0800_0CC1
	// succ:  l0800_0CBF_2 l0800_0CC1
l0800_0CBF_2:
	SCZO = cond(Mem0[ds:si:byte] - Mem0[es:di:byte])
	si = si + 0x0001
	di = di + 0x0001
	cx = cx - 0x0001
	branch Test(NE,Z) l0800_0CBF
	// succ:  l0800_0CC1 l0800_0CBF
l0800_0CC1:
	branch Test(EQ,Z) l0800_0CC8
	// succ:  l0800_0CC3 l0800_0CC8
l0800_0CC3:
	ax = ax - ax - C
	SCZO = cond(ax)
	ax = ax - 0xFFFF - C
	SCZO = cond(ax)
	// succ:  l0800_0CC8
l0800_0CC8:
	ax = ax | ax
	SZO = cond(ax)
	C = false
	branch Test(EQ,Z) l0800_0D0D
	// succ:  l0800_0CCC l0800_0D0D
l0800_0CCC:
	sp = sp - 2
	Mem0[ss:sp:word16] = ss
	ax = bp - 0x0066
	sp = sp - 2
	Mem0[ss:sp:word16] = ax
	sp = sp - 2
	Mem0[ss:sp:word16] = ds
	ax = 0x088F
	sp = sp - 2
	Mem0[ss:sp:word16] = ax
	call fn0800_B2EF (retsize: 2;)
	sp = sp + 0x0008
	SCZO = cond(sp)
	sp = sp - 2
	Mem0[ss:sp:word16] = ss
	es = Mem0[ss:sp:selector]
	sp = sp + 2
	di = bp - 0x0066
	sp = sp - 2
	Mem0[ss:sp:word16] = es
	sp = sp - 2
	Mem0[ss:sp:word16] = ds
	es = Mem0[ss:sp:selector]
	sp = sp + 2
	sp = sp - 2
	Mem0[ss:sp:word16] = di
	di = 0x2714
	ax = di
	di = Mem0[ss:sp:word16]
	sp = sp + 2
	dx = es
	es = Mem0[ss:sp:selector]
	sp = sp + 2
	sp = sp - 2
	Mem0[ss:sp:word16] = dx
	sp = sp - 2
	Mem0[ss:sp:word16] = ax
	ax = ax ^ ax
	SZO = cond(ax)
	C = false
	cx = 0xFFFF
	// succ:  l0800_0CF5
l0800_0CF5:
	branch cx == 0x0000 l0800_0CF7
	// succ:  l0800_0CF5_1 l0800_0CF7
l0800_0CF5_1:
	SCZO = cond(al - Mem0[es:di:byte])
	di = di + 0x0001
	cx = cx - 0x0001
	branch Test(EQ,Z) l0800_0CF5
	// succ:  l0800_0CF7 l0800_0CF5
l0800_0CF7:
	cx = ~cx
	di = di - cx
	SCZO = cond(di)
	cx = cx >>u 0x0001
	SCZO = cond(cx)
	si = di
	di = Mem0[ss:sp:word16]
	sp = sp + 2
	ax = es
	es = Mem0[ss:sp:selector]
	sp = sp + 2
	sp = sp - 2
	Mem0[ss:sp:word16] = ds
	ds = ax
	// succ:  l0800_0D06
l0800_0D06:
	branch cx == 0x0000 l0800_0D08
	// succ:  l0800_0D06_2 l0800_0D08
l0800_0D06_2:
	v19 = Mem0[ds:si:word16]
	Mem0[es:di:word16] = v19
	si = si + 0x0002
	di = di + 0x0002
	cx = cx - 0x0001
	goto l0800_0D06
	// succ:  l0800_0D06
l0800_0D08:
	cx = cx + cx + C
	SCZO = cond(cx)
	// succ:  l0800_0D0A
l0800_0D0A:
	branch cx == 0x0000 l0800_0D0C
	// succ:  l0800_0D0A_1 l0800_0D0C
l0800_0D0A_1:
	v22 = Mem0[ds:si:byte]
	Mem0[es:di:byte] = v22
	si = si + 0x0001
	di = di + 0x0001
	cx = cx - 0x0001
	goto l0800_0D0A
	// succ:  l0800_0D0A
l0800_0D0C:
	ds = Mem0[ss:sp:selector]
	sp = sp + 2
	// succ:  l0800_0D0D
l0800_0D0D:
	v20 = Mem0[ss:bp + 0x0006:word16]
	sp = sp - 2
	Mem0[ss:sp:word16] = v20
	v21 = Mem0[ss:bp + 0x0004:word16]
	sp = sp - 2
	Mem0[ss:sp:word16] = v21
	sp = sp - 2
	Mem0[ss:sp:word16] = ds
	ax = 0x089E
	sp = sp - 2
	Mem0[ss:sp:word16] = ax
	call fn0800_B2EF (retsize: 2;)
	sp = sp + 0x0008
	SCZO = cond(sp)
	di = Mem0[ss:sp:word16]
	sp = sp + 2
	si = Mem0[ss:sp:word16]
	sp = sp + 2
	sp = bp
	bp = Mem0[ss:sp:word16]
	sp = sp + 2
	return
	// succ:  fn0800_0C93_exit
fn0800_0C93_exit:


// fn0800_0D24
// Return size: 2
define fn0800_0D24
fn0800_0D24_entry:
	// succ:  l0800_0D24
l0800_0D24:
	sp = fp
	Top = 0
	sp = sp - 2
	Mem0[ss:sp:word16] = bp
	bp = sp
	sp = sp - 2
	Mem0[ss:sp:word16] = ds
	ax = 0x4477
	sp = sp - 2
	Mem0[ss:sp:word16] = ax
	v7 = Mem0[ds:0x29DD:word16]
	sp = sp - 2
	Mem0[ss:sp:word16] = v7
	v8 = Mem0[ds:0x29DB:word16]
	sp = sp - 2
	Mem0[ss:sp:word16] = v8
	call fn0800_0DA9 (retsize: 2;)
	sp = sp + 0x0008
	SCZO = cond(sp)
	sp = sp - 2
	Mem0[ss:sp:word16] = ds
	ax = 0x4412
	sp = sp - 2
	Mem0[ss:sp:word16] = ax
	v10 = Mem0[ds:0x29D9:word16]
	sp = sp - 2
	Mem0[ss:sp:word16] = v10
	v11 = Mem0[ds:0x29D7:word16]
	sp = sp - 2
	Mem0[ss:sp:word16] = v11
	call fn0800_0DA9 (retsize: 2;)
	sp = sp + 0x0008
	SCZO = cond(sp)
	sp = sp - 2
	Mem0[ss:sp:word16] = ds
	ax = 0x43AD
	sp = sp - 2
	Mem0[ss:sp:word16] = ax
	v12 = Mem0[ds:0x29D5:word16]
	sp = sp - 2
	Mem0[ss:sp:word16] = v12
	v13 = Mem0[ds:0x29D3:word16]
	sp = sp - 2
	Mem0[ss:sp:word16] = v13
	call fn0800_0DA9 (retsize: 2;)
	sp = sp + 0x0008
	SCZO = cond(sp)
	bx = Mem0[ss:bp + 0x0004:word16]
	bx = bx << 0x0001
	SCZO = cond(bx)
	bx = bx << 0x0001
	SCZO = cond(bx)
	v15 = Mem0[ds:bx + 0x055F:word16]
	sp = sp - 2
	Mem0[ss:sp:word16] = v15
	v16 = Mem0[ds:bx + 0x055D:word16]
	sp = sp - 2
	Mem0[ss:sp:word16] = v16
	sp = sp - 2
	Mem0[ss:sp:word16] = ds
	ax = 0x08A2
	sp = sp - 2
	Mem0[ss:sp:word16] = ax
	call fn0800_B2EF (retsize: 2;)
	sp = sp + 0x0008
	SCZO = cond(sp)
	es_bx = Mem0[ss:bp + 0x0006:segptr32]
	SCZO = cond(Mem0[es:bx:byte] - 0x00)
	branch Test(EQ,Z) l0800_0D92
	// succ:  l0800_0D83 l0800_0D92
l0800_0D83:
	v20 = Mem0[ss:bp + 0x0008:word16]
	sp = sp - 2
	Mem0[ss:sp:word16] = v20
	sp = sp - 2
	Mem0[ss:sp:word16] = bx
	sp = sp - 2
	Mem0[ss:sp:word16] = ds
	ax = 0x08A6
	sp = sp - 2
	Mem0[ss:sp:word16] = ax
	call fn0800_B2EF (retsize: 2;)
	sp = sp + 0x0008
	SCZO = cond(sp)
	// succ:  l0800_0D92
l0800_0D92:
	sp = sp - 2
	Mem0[ss:sp:word16] = ds
	ax = 0x0827
	sp = sp - 2
	Mem0[ss:sp:word16] = ax
	call fn0800_B2EF (retsize: 2;)
	sp = sp + 0x0004
	SCZO = cond(sp)
	ax = 0x0001
	sp = sp - 2
	Mem0[ss:sp:word16] = ax
	call fn0800_8B5A (retsize: 2;)
	sp = sp + 0x0002
	SCZO = cond(sp)
	bp = Mem0[ss:sp:word16]
	sp = sp + 2
	return
	// succ:  fn0800_0D24_exit
fn0800_0D24_exit:


// fn0800_0DA9
// Return size: 2
define fn0800_0DA9
fn0800_0DA9_entry:
	// succ:  l0800_0DA9
l0800_0DA9:
	sp = fp
	Top = 0
	sp = sp - 2
	Mem0[ss:sp:word16] = bp
	bp = sp
	ax = Mem0[ss:bp + 0x0004:word16]
	ax = ax | Mem0[ss:bp + 0x0006:word16]
	SZO = cond(ax)
	C = false
	branch Test(EQ,Z) l0800_0DCC
	// succ:  l0800_0DB4 l0800_0DCC
l0800_0DB4:
	v9 = Mem0[ss:bp + 0x0006:word16]
	sp = sp - 2
	Mem0[ss:sp:word16] = v9
	v10 = Mem0[ss:bp + 0x0004:word16]
	sp = sp - 2
	Mem0[ss:sp:word16] = v10
	call fn0800_A614 (retsize: 2;)
	sp = sp + 0x0004
	SCZO = cond(sp)
	v12 = Mem0[ss:bp + 0x000A:word16]
	sp = sp - 2
	Mem0[ss:sp:word16] = v12
	v13 = Mem0[ss:bp + 0x0008:word16]
	sp = sp - 2
	Mem0[ss:sp:word16] = v13
	call fn0800_8F7F (retsize: 2;)
	sp = sp + 0x0004
	SCZO = cond(sp)
	// succ:  l0800_0DCC
l0800_0DCC:
	bp = Mem0[ss:sp:word16]
	sp = sp + 2
	return
	// succ:  fn0800_0DA9_exit
fn0800_0DA9_exit:


// fn0800_0DCE
// Return size: 2
define fn0800_0DCE
fn0800_0DCE_entry:
	// succ:  l0800_0DCE
l0800_0DCE:
	sp = fp
	Top = 0
	sp = sp - 2
	Mem0[ss:sp:word16] = ds
	ax = 0x0121
	sp = sp - 2
	Mem0[ss:sp:word16] = ax
	sp = sp - 2
	Mem0[ss:sp:word16] = ds
	ax = 0x07E8
	sp = sp - 2
	Mem0[ss:sp:word16] = ax
	call fn0800_B2EF (retsize: 2;)
	sp = sp + 0x0008
	SCZO = cond(sp)
	ax = ax ^ ax
	SZO = cond(ax)
	C = false
	sp = sp - 2
	Mem0[ss:sp:word16] = ax
	call fn0800_8B5A (retsize: 2;)
	sp = sp + 0x0002
	SCZO = cond(sp)
	return
	// succ:  fn0800_0DCE_exit
fn0800_0DCE_exit:


// fn0800_0DE8
// Return size: 2
define fn0800_0DE8
fn0800_0DE8_entry:
	// succ:  l0800_0DE8
l0800_0DE8:
	sp = fp
	Top = 0
	sp = sp - 2
	Mem0[ss:sp:word16] = si
	bx = Mem0[ds:0x2A23:word16]
	bx = bx << 0x0001
	SCZO = cond(bx)
	bx = bx << 0x0001
	SCZO = cond(bx)
	v8 = Mem0[ds:bx + 0x052F:word16]
	sp = sp - 2
	Mem0[ss:sp:word16] = v8
	v9 = Mem0[ds:bx + 0x052D:word16]
	sp = sp - 2
	Mem0[ss:sp:word16] = v9
	bx = Mem0[ds:0x2A25:word16]
	bx = bx << 0x0001
	SCZO = cond(bx)
	bx = bx << 0x0001
	SCZO = cond(bx)
	v10 = Mem0[ds:bx + 0x050B:word16]
	sp = sp - 2
	Mem0[ss:sp:word16] = v10
	v11 = Mem0[ds:bx + 0x0509:word16]
	sp = sp - 2
	Mem0[ss:sp:word16] = v11
	sp = sp - 2
	Mem0[ss:sp:word16] = ds
	ax = 0x08AC
	sp = sp - 2
	Mem0[ss:sp:word16] = ax
	call fn0800_B2EF (retsize: 2;)
	sp = sp + 0x000C
	SCZO = cond(sp)
	SCZO = cond(Mem0[ds:0x2E4F:word16] - 0x0000)
	branch Test(EQ,Z) l0800_0E2A
	// succ:  l0800_0E1B l0800_0E2A
l0800_0E1B:
	v14 = Mem0[ds:0x2E4F:word16]
	sp = sp - 2
	Mem0[ss:sp:word16] = v14
	sp = sp - 2
	Mem0[ss:sp:word16] = ds
	ax = 0x08BA
	sp = sp - 2
	Mem0[ss:sp:word16] = ax
	call fn0800_B2EF (retsize: 2;)
	sp = sp + 0x0006
	SCZO = cond(sp)
	// succ:  l0800_0E2A
l0800_0E2A:
	SCZO = cond(Mem0[ds:0x2A1F:word16] - 0x0000)
	branch Test(EQ,Z) l0800_0E3C
	// succ:  l0800_0E31 l0800_0E3C
l0800_0E31:
	sp = sp - 2
	Mem0[ss:sp:word16] = ds
	ax = 0x08CF
	sp = sp - 2
	Mem0[ss:sp:word16] = ax
	call fn0800_B2EF (retsize: 2;)
	sp = sp + 0x0004
	SCZO = cond(sp)
	// succ:  l0800_0E3C
l0800_0E3C:
	sp = sp - 2
	Mem0[ss:sp:word16] = ds
	ax = 0x08DC
	sp = sp - 2
	Mem0[ss:sp:word16] = ax
	call fn0800_B2EF (retsize: 2;)
	sp = sp + 0x0004
	SCZO = cond(sp)
	sp = sp - 2
	Mem0[ss:sp:word16] = ds
	ax = 0x427E
	sp = sp - 2
	Mem0[ss:sp:word16] = ax
	call fn0800_3678 (retsize: 2;)
	sp = sp + 0x0004
	SCZO = cond(sp)
	sp = sp - 2
	Mem0[ss:sp:word16] = ds
	ax = 0x08DF
	sp = sp - 2
	Mem0[ss:sp:word16] = ax
	sp = sp - 2
	Mem0[ss:sp:word16] = ds
	ax = 0x4477
	sp = sp - 2
	Mem0[ss:sp:word16] = ax
	call fn0800_37BE (retsize: 2;)
	sp = sp + 0x0008
	SCZO = cond(sp)
	sp = sp - 2
	Mem0[ss:sp:word16] = ds
	ax = 0x08EC
	sp = sp - 2
	Mem0[ss:sp:word16] = ax
	sp = sp - 2
	Mem0[ss:sp:word16] = ds
	ax = 0x4477
	sp = sp - 2
	Mem0[ss:sp:word16] = ax
	call fn0800_4234 (retsize: 2;)
	sp = sp + 0x0008
	SCZO = cond(sp)
	Mem0[ds:0x29DD:word16] = dx
	Mem0[ds:0x29DB:word16] = ax
	goto l0800_10F4
	// succ:  l0800_10F4
l0800_0E7C:
	call fn0800_3764 (retsize: 2;)
	call fn0800_388C (retsize: 2;)
	ax = ax | ax
	SZO = cond(ax)
	C = false
	branch Test(NE,Z) l0800_0E89
	// succ:  l0800_0E86 l0800_0E89
l0800_0E86:
	goto l0800_10F4
	// succ:  l0800_10F4
l0800_0E89:
	sp = sp - 2
	Mem0[ss:sp:word16] = ds
	ax = 0x4541
	sp = sp - 2
	Mem0[ss:sp:word16] = ax
	call fn0800_0C93 (retsize: 2;)
	sp = sp + 0x0004
	SCZO = cond(sp)
	v20 = Mem0[ds:0x29E5:word16]
	sp = sp - 2
	Mem0[ss:sp:word16] = v20
	v21 = Mem0[ds:0x29E3:word16]
	sp = sp - 2
	Mem0[ss:sp:word16] = v21
	call fn0800_4194 (retsize: 2;)
	sp = sp + 0x0004
	SCZO = cond(sp)
	Mem0[ds:0x2A09:word16] = dx
	Mem0[ds:0x2A07:word16] = ax
	Mem0[ds:0x2A05:word16] = dx
	Mem0[ds:0x2A03:word16] = ax
	si = si ^ si
	SZO = cond(si)
	C = false
	SCZO = cond(Mem0[ds:0x2A09:word16] - 0x0000)
	branch Test(UGT,CZ) l0800_0ECF
	// succ:  l0800_0EB9 l0800_0ECF
l0800_0EB9:
	branch Test(NE,Z) l0800_0EC2
	// succ:  l0800_0EBB l0800_0EC2
l0800_0EBB:
	SCZO = cond(Mem0[ds:0x2A07:word16] - 0x0012)
	branch Test(UGT,CZ) l0800_0ECF
	// succ:  l0800_0EC2 l0800_0ECF
l0800_0EC2:
	SCZO = cond(Mem0[ds:0x2A15:word16] - 0x0000)
	branch Test(NE,Z) l0800_0ECF
	// succ:  l0800_0EC9 l0800_0ECF
l0800_0EC9:
	si = 0x0003
	goto l0800_105C
	// succ:  l0800_105C
l0800_0ECF:
	call fn0800_3992 (retsize: 2;)
	ax = ax | ax
	SZO = cond(ax)
	C = false
	branch Test(EQ,Z) l0800_0EDC
	// succ:  l0800_0ED6 l0800_0EDC
l0800_0ED6:
	si = 0x000E
	goto l0800_105C
	// succ:  l0800_105C
l0800_0EDC:
	bx = Mem0[ds:0x2A23:word16]
	SCZO = cond(bx - 0x0005)
	branch Test(ULE,CZ) l0800_0EE8
	// succ:  l0800_0EE5 l0800_0EE8
l0800_0EE5:
	goto l0800_1007
	// succ:  l0800_1007
l0800_0EE8:
	bx = bx << 0x0001
	SCZO = cond(bx)
	switch (bx) { l0800_0FF4 l0800_0EEF l0800_1002 l0800_0FFB l0800_0FCC l0800_0FED }
	// succ:  l0800_0FF4 l0800_0EEF l0800_1002 l0800_0FFB l0800_0FCC l0800_0FED
l0800_0EEF:
	SCZO = cond(Mem0[ds:0x2A09:word16] - 0x0000)
	branch Test(ULT,C) l0800_0F1F
	// succ:  l0800_0EF6 l0800_0F1F
l0800_0EF6:
	branch Test(NE,Z) l0800_0EFF
	// succ:  l0800_0EF8 l0800_0EFF
l0800_0EF8:
	SCZO = cond(Mem0[ds:0x2A07:word16] - 0x0012)
	branch Test(ULT,C) l0800_0F1F
	// succ:  l0800_0EFF l0800_0F1F
l0800_0EFF:
	v41 = Mem0[ds:0x29E5:word16]
	sp = sp - 2
	Mem0[ss:sp:word16] = v41
	v42 = Mem0[ds:0x29E3:word16]
	sp = sp - 2
	Mem0[ss:sp:word16] = v42
	call fn0800_3F58 (retsize: 2;)
	sp = sp + 0x0004
	SCZO = cond(sp)
	cl = 0x08
	call fn0800_8CAA (retsize: 2;)
	SCZO = cond(dx - 0x0052)
	branch Test(NE,Z) l0800_0F1F
	// succ:  l0800_0F17 l0800_0F1F
l0800_0F17:
	SCZO = cond(ax - 0x4E43)
	branch Test(NE,Z) l0800_0F1F
	// succ:  l0800_0F1C l0800_0F1F
l0800_0F1C:
	si = 0x0004
	// succ:  l0800_0F1F
l0800_0F1F:
	si = si | si
	SZO = cond(si)
	C = false
	branch Test(EQ,Z) l0800_0F26
	// succ:  l0800_0F23 l0800_0F26
l0800_0F23:
	goto l0800_1007
	// succ:  l0800_1007
l0800_0F26:
	v44 = Mem0[ds:0x2A09:word16]
	sp = sp - 2
	Mem0[ss:sp:word16] = v44
	v45 = Mem0[ds:0x2A07:word16]
	sp = sp - 2
	Mem0[ss:sp:word16] = v45
	v46 = Mem0[ds:0x2A09:word16]
	sp = sp - 2
	Mem0[ss:sp:word16] = v46
	v47 = Mem0[ds:0x2A07:word16]
	sp = sp - 2
	Mem0[ss:sp:word16] = v47
	call fn0800_75EA (retsize: 2;)
	sp = sp + 0x0008
	SCZO = cond(sp)
	ax = Mem0[ds:0x2A05:word16]
	dx = Mem0[ds:0x2A03:word16]
	SCZO = cond(ax - Mem0[ds:0x2A09:word16])
	branch Test(UGE,C) l0800_0F4C
	// succ:  l0800_0F49 l0800_0F4C
l0800_0F49:
	goto l0800_1007
	// succ:  l0800_1007
l0800_0F4C:
	branch Test(NE,Z) l0800_0F57
	// succ:  l0800_0F4E l0800_0F57
l0800_0F4E:
	SCZO = cond(dx - Mem0[ds:0x2A07:word16])
	branch Test(UGE,C) l0800_0F57
	// succ:  l0800_0F54 l0800_0F57
l0800_0F54:
	goto l0800_1007
	// succ:  l0800_1007
l0800_0F57:
	SCZO = cond(Mem0[ds:0x2A15:word16] - 0x0000)
	branch Test(NE,Z) l0800_0F61
	// succ:  l0800_0F5E l0800_0F61
l0800_0F5E:
	goto l0800_1007
	// succ:  l0800_1007
l0800_0F61:
	v48 = Mem0[ds:0x29E5:word16]
	sp = sp - 2
	Mem0[ss:sp:word16] = v48
	v49 = Mem0[ds:0x29E3:word16]
	sp = sp - 2
	Mem0[ss:sp:word16] = v49
	call fn0800_BA67 (retsize: 2;)
	sp = sp + 0x0004
	SCZO = cond(sp)
	v50 = Mem0[ds:0x29E1:word16]
	sp = sp - 2
	Mem0[ss:sp:word16] = v50
	v51 = Mem0[ds:0x29DF:word16]
	sp = sp - 2
	Mem0[ss:sp:word16] = v51
	call fn0800_BA67 (retsize: 2;)
	sp = sp + 0x0004
	SCZO = cond(sp)
	v52 = Mem0[ds:0x29E1:word16]
	sp = sp - 2
	Mem0[ss:sp:word16] = v52
	v53 = Mem0[ds:0x29DF:word16]
	sp = sp - 2
	Mem0[ss:sp:word16] = v53
	ax = 0x524E
	dx = 0x4300
	sp = sp - 2
	Mem0[ss:sp:word16] = ax
	sp = sp - 2
	Mem0[ss:sp:word16] = dx
	call fn0800_409C (retsize: 2;)
	sp = sp + 0x0008
	SCZO = cond(sp)
	v54 = Mem0[ds:0x29E1:word16]
	sp = sp - 2
	Mem0[ss:sp:word16] = v54
	v55 = Mem0[ds:0x29DF:word16]
	sp = sp - 2
	Mem0[ss:sp:word16] = v55
	v56 = Mem0[ds:0x2A09:word16]
	sp = sp - 2
	Mem0[ss:sp:word16] = v56
	v57 = Mem0[ds:0x2A07:word16]
	sp = sp - 2
	Mem0[ss:sp:word16] = v57
	call fn0800_409C (retsize: 2;)
	sp = sp + 0x0008
	SCZO = cond(sp)
	v58 = Mem0[ds:0x2A09:word16]
	sp = sp - 2
	Mem0[ss:sp:word16] = v58
	v59 = Mem0[ds:0x2A07:word16]
	sp = sp - 2
	Mem0[ss:sp:word16] = v59
	v60 = Mem0[ds:0x29E1:word16]
	sp = sp - 2
	Mem0[ss:sp:word16] = v60
	v61 = Mem0[ds:0x29DF:word16]
	sp = sp - 2
	Mem0[ss:sp:word16] = v61
	v62 = Mem0[ds:0x29E5:word16]
	sp = sp - 2
	Mem0[ss:sp:word16] = v62
	v63 = Mem0[ds:0x29E3:word16]
	sp = sp - 2
	Mem0[ss:sp:word16] = v63
	call fn0800_3B0A (retsize: 2;)
	sp = sp + 0x000C
	SCZO = cond(sp)
	si = 0x0002
	goto l0800_1007
	// succ:  l0800_1007
l0800_0FCC:
	v39 = Mem0[ds:0x29E5:word16]
	sp = sp - 2
	Mem0[ss:sp:word16] = v39
	v40 = Mem0[ds:0x29E3:word16]
	sp = sp - 2
	Mem0[ss:sp:word16] = v40
	call fn0800_3F0A (retsize: 2;)
	sp = sp + 0x0004
	SCZO = cond(sp)
	SCZO = cond(ax - 0x4D5A)
	branch Test(NE,Z) l0800_0FE6
	// succ:  l0800_0FDF l0800_0FE6
l0800_0FDF:
	call fn0800_5E64 (retsize: 2;)
	si = ax
	goto l0800_1007
	// succ:  l0800_1007
l0800_0FE6:
	call fn0800_669C (retsize: 2;)
	si = ax
	goto l0800_1007
	// succ:  l0800_1007
l0800_0FED:
	call fn0800_67BF (retsize: 2;)
	si = ax
	goto l0800_1007
	// succ:  l0800_1007
l0800_0FF4:
	call fn0800_6AD4 (retsize: 2;)
	si = ax
	goto l0800_1007
	// succ:  l0800_1007
l0800_0FFB:
	call fn0800_73AC (retsize: 2;)
	si = ax
	goto l0800_1007
	// succ:  l0800_1007
l0800_1002:
	call fn0800_741D (retsize: 2;)
	si = ax
	// succ:  l0800_1007
l0800_1007:
	v33 = Mem0[ds:0x29E1:word16]
	sp = sp - 2
	Mem0[ss:sp:word16] = v33
	v34 = Mem0[ds:0x29DF:word16]
	sp = sp - 2
	Mem0[ss:sp:word16] = v34
	call fn0800_4194 (retsize: 2;)
	sp = sp + 0x0004
	SCZO = cond(sp)
	Mem0[ds:0x2A05:word16] = dx
	Mem0[ds:0x2A03:word16] = ax
	ax = Mem0[ds:0x2A05:word16]
	dx = Mem0[ds:0x2A03:word16]
	SCZO = cond(ax - Mem0[ds:0x2A09:word16])
	branch Test(ULT,C) l0800_1049
	// succ:  l0800_1029 l0800_1049
l0800_1029:
	branch Test(NE,Z) l0800_1031
	// succ:  l0800_102B l0800_1031
l0800_102B:
	SCZO = cond(dx - Mem0[ds:0x2A07:word16])
	branch Test(ULT,C) l0800_1049
	// succ:  l0800_1031 l0800_1049
l0800_1031:
	SCZO = cond(Mem0[ds:0x2A15:word16] - 0x0000)
	branch Test(NE,Z) l0800_1049
	// succ:  l0800_1038 l0800_1049
l0800_1038:
	ax = Mem0[ds:0x2A09:word16]
	dx = Mem0[ds:0x2A07:word16]
	Mem0[ds:0x2A05:word16] = ax
	Mem0[ds:0x2A03:word16] = dx
	si = 0x0003
	// succ:  l0800_1049
l0800_1049:
	SCZO = cond(si - 0x0004)
	branch Test(NE,Z) l0800_105C
	// succ:  l0800_104E l0800_105C
l0800_104E:
	ax = Mem0[ds:0x2A09:word16]
	dx = Mem0[ds:0x2A07:word16]
	Mem0[ds:0x2A05:word16] = ax
	Mem0[ds:0x2A03:word16] = dx
	// succ:  l0800_105C
l0800_105C:
	SCZO = cond(Mem0[ds:0x427E:byte] - 0x00)
	branch Test(EQ,Z) l0800_10B7
	// succ:  l0800_1063 l0800_10B7
l0800_1063:
	SCZO = cond(si - 0x0003)
	branch Test(EQ,Z) l0800_106D
	// succ:  l0800_1068 l0800_106D
l0800_1068:
	SCZO = cond(si - 0x0004)
	branch Test(NE,Z) l0800_10B7
	// succ:  l0800_106D l0800_10B7
l0800_106D:
	ax = Mem0[ds:0x2A09:word16]
	dx = Mem0[ds:0x2A07:word16]
	Mem0[ds:0x2A05:word16] = ax
	Mem0[ds:0x2A03:word16] = dx
	v23 = Mem0[ds:0x29E5:word16]
	sp = sp - 2
	Mem0[ss:sp:word16] = v23
	v24 = Mem0[ds:0x29E3:word16]
	sp = sp - 2
	Mem0[ss:sp:word16] = v24
	call fn0800_BA67 (retsize: 2;)
	sp = sp + 0x0004
	SCZO = cond(sp)
	v25 = Mem0[ds:0x29E1:word16]
	sp = sp - 2
	Mem0[ss:sp:word16] = v25
	v26 = Mem0[ds:0x29DF:word16]
	sp = sp - 2
	Mem0[ss:sp:word16] = v26
	call fn0800_BA67 (retsize: 2;)
	sp = sp + 0x0004
	SCZO = cond(sp)
	v27 = Mem0[ds:0x2A09:word16]
	sp = sp - 2
	Mem0[ss:sp:word16] = v27
	v28 = Mem0[ds:0x2A07:word16]
	sp = sp - 2
	Mem0[ss:sp:word16] = v28
	v29 = Mem0[ds:0x29E1:word16]
	sp = sp - 2
	Mem0[ss:sp:word16] = v29
	v30 = Mem0[ds:0x29DF:word16]
	sp = sp - 2
	Mem0[ss:sp:word16] = v30
	v31 = Mem0[ds:0x29E5:word16]
	sp = sp - 2
	Mem0[ss:sp:word16] = v31
	v32 = Mem0[ds:0x29E3:word16]
	sp = sp - 2
	Mem0[ss:sp:word16] = v32
	call fn0800_3B0A (retsize: 2;)
	sp = sp + 0x000C
	SCZO = cond(sp)
	si = si ^ si
	SZO = cond(si)
	C = false
	// succ:  l0800_10B7
l0800_10B7:
	v35 = Mem0[ds:0x29E5:word16]
	sp = sp - 2
	Mem0[ss:sp:word16] = v35
	v36 = Mem0[ds:0x29E3:word16]
	sp = sp - 2
	Mem0[ss:sp:word16] = v36
	call fn0800_A614 (retsize: 2;)
	sp = sp + 0x0004
	SCZO = cond(sp)
	v37 = Mem0[ds:0x29E1:word16]
	sp = sp - 2
	Mem0[ss:sp:word16] = v37
	v38 = Mem0[ds:0x29DF:word16]
	sp = sp - 2
	Mem0[ss:sp:word16] = v38
	call fn0800_A614 (retsize: 2;)
	sp = sp + 0x0004
	SCZO = cond(sp)
	SCZO = cond(si - 0x0002)
	branch Test(LE,SZO) l0800_10E5
	// succ:  l0800_10D8 l0800_10E5
l0800_10D8:
	sp = sp - 2
	Mem0[ss:sp:word16] = ds
	ax = 0x44DC
	sp = sp - 2
	Mem0[ss:sp:word16] = ax
	call fn0800_8F7F (retsize: 2;)
	sp = sp + 0x0004
	SCZO = cond(sp)
	goto l0800_10E8
	// succ:  l0800_10E8
l0800_10E5:
	call fn0800_37DF (retsize: 2;)
	// succ:  l0800_10E8
l0800_10E8:
	sp = sp - 2
	Mem0[ss:sp:word16] = ds
	ax = 0x4541
	sp = sp - 2
	Mem0[ss:sp:word16] = ax
	sp = sp - 2
	Mem0[ss:sp:word16] = si
	call fn0800_0ABC (retsize: 2;)
	sp = sp + 0x0006
	SCZO = cond(sp)
	// succ:  l0800_10F4
l0800_10F4:
	sp = sp - 2
	Mem0[ss:sp:word16] = ds
	ax = 0x4541
	sp = sp - 2
	Mem0[ss:sp:word16] = ax
	call fn0800_2DE2 (retsize: 2;)
	sp = sp + 0x0004
	SCZO = cond(sp)
	ax = ax | ax
	SZO = cond(ax)
	C = false
	branch Test(EQ,Z) l0800_1106
	// succ:  l0800_1103 l0800_1106
l0800_1103:
	goto l0800_0E7C
	// succ:  l0800_0E7C
l0800_1106:
	v18 = Mem0[ds:0x29DD:word16]
	sp = sp - 2
	Mem0[ss:sp:word16] = v18
	v19 = Mem0[ds:0x29DB:word16]
	sp = sp - 2
	Mem0[ss:sp:word16] = v19
	call fn0800_A614 (retsize: 2;)
	sp = sp + 0x0004
	SCZO = cond(sp)
	sp = sp - 2
	Mem0[ss:sp:word16] = ds
	ax = 0x4477
	sp = sp - 2
	Mem0[ss:sp:word16] = ax
	call fn0800_8F7F (retsize: 2;)
	sp = sp + 0x0004
	SCZO = cond(sp)
	si = Mem0[ss:sp:word16]
	sp = sp + 2
	return
	// succ:  fn0800_0DE8_exit
fn0800_0DE8_exit:


// fn0800_112D
// Return size: 2
define fn0800_112D
fn0800_112D_entry:
	// succ:  l0800_112D
l0800_112D:
	sp = fp
	Top = 0
	sp = sp - 2
	Mem0[ss:sp:word16] = si
	bx = Mem0[ds:0x2A23:word16]
	bx = bx << 0x0001
	SCZO = cond(bx)
	bx = bx << 0x0001
	SCZO = cond(bx)
	v8 = Mem0[ds:bx + 0x052F:word16]
	sp = sp - 2
	Mem0[ss:sp:word16] = v8
	v9 = Mem0[ds:bx + 0x052D:word16]
	sp = sp - 2
	Mem0[ss:sp:word16] = v9
	bx = Mem0[ds:0x2A25:word16]
	bx = bx << 0x0001
	SCZO = cond(bx)
	bx = bx << 0x0001
	SCZO = cond(bx)
	v10 = Mem0[ds:bx + 0x050B:word16]
	sp = sp - 2
	Mem0[ss:sp:word16] = v10
	v11 = Mem0[ds:bx + 0x0509:word16]
	sp = sp - 2
	Mem0[ss:sp:word16] = v11
	sp = sp - 2
	Mem0[ss:sp:word16] = ds
	ax = 0x08F0
	sp = sp - 2
	Mem0[ss:sp:word16] = ax
	call fn0800_B2EF (retsize: 2;)
	sp = sp + 0x000C
	SCZO = cond(sp)
	SCZO = cond(Mem0[ds:0x2E4F:word16] - 0x0000)
	branch Test(EQ,Z) l0800_116F
	// succ:  l0800_1160 l0800_116F
l0800_1160:
	v14 = Mem0[ds:0x2E4F:word16]
	sp = sp - 2
	Mem0[ss:sp:word16] = v14
	sp = sp - 2
	Mem0[ss:sp:word16] = ds
	ax = 0x08FE
	sp = sp - 2
	Mem0[ss:sp:word16] = ax
	call fn0800_B2EF (retsize: 2;)
	sp = sp + 0x0006
	SCZO = cond(sp)
	// succ:  l0800_116F
l0800_116F:
	sp = sp - 2
	Mem0[ss:sp:word16] = ds
	ax = 0x0913
	sp = sp - 2
	Mem0[ss:sp:word16] = ax
	call fn0800_B2EF (retsize: 2;)
	sp = sp + 0x0004
	SCZO = cond(sp)
	SCZO = cond(Mem0[ds:0x2A25:word16] - 0x0001)
	branch Test(EQ,Z) l0800_1184
	// succ:  l0800_1181 l0800_1184
l0800_1181:
	goto l0800_12C2
	// succ:  l0800_12C2
l0800_1184:
	sp = sp - 2
	Mem0[ss:sp:word16] = ds
	ax = 0x427E
	sp = sp - 2
	Mem0[ss:sp:word16] = ax
	call fn0800_3678 (retsize: 2;)
	sp = sp + 0x0004
	SCZO = cond(sp)
	goto l0800_12C2
	// succ:  l0800_12C2
l0800_1192:
	call fn0800_3764 (retsize: 2;)
	call fn0800_388C (retsize: 2;)
	ax = ax | ax
	SZO = cond(ax)
	C = false
	branch Test(NE,Z) l0800_119F
	// succ:  l0800_119C l0800_119F
l0800_119C:
	goto l0800_12C2
	// succ:  l0800_12C2
l0800_119F:
	sp = sp - 2
	Mem0[ss:sp:word16] = ds
	ax = 0x4541
	sp = sp - 2
	Mem0[ss:sp:word16] = ax
	call fn0800_0C93 (retsize: 2;)
	sp = sp + 0x0004
	SCZO = cond(sp)
	v17 = Mem0[ds:0x29E5:word16]
	sp = sp - 2
	Mem0[ss:sp:word16] = v17
	v18 = Mem0[ds:0x29E3:word16]
	sp = sp - 2
	Mem0[ss:sp:word16] = v18
	call fn0800_4194 (retsize: 2;)
	sp = sp + 0x0004
	SCZO = cond(sp)
	Mem0[ds:0x2A05:word16] = dx
	Mem0[ds:0x2A03:word16] = ax
	dx = dx | dx
	SZO = cond(dx)
	C = false
	branch Test(UGT,CZ) l0800_11CF
	// succ:  l0800_11C3 l0800_11CF
l0800_11C3:
	branch Test(ULT,C) l0800_11CA
	// succ:  l0800_11C5 l0800_11CA
l0800_11C5:
	SCZO = cond(ax - 0x0012)
	branch Test(UGE,C) l0800_11CF
	// succ:  l0800_11CA l0800_11CF
l0800_11CA:
	si = 0x0007
	goto l0800_1243
	// succ:  l0800_1243
l0800_11CF:
	bx = Mem0[ds:0x2A23:word16]
	SCZO = cond(bx - 0x0005)
	branch Test(UGT,CZ) l0800_1243
	// succ:  l0800_11D8 l0800_1243
l0800_11D8:
	bx = bx << 0x0001
	SCZO = cond(bx)
	switch (bx) { l0800_1230 l0800_11DF l0800_123E l0800_1237 l0800_1208 l0800_1229 }
	// succ:  l0800_1230 l0800_11DF l0800_123E l0800_1237 l0800_1208 l0800_1229
l0800_11DF:
	v31 = Mem0[ds:0x29E5:word16]
	sp = sp - 2
	Mem0[ss:sp:word16] = v31
	v32 = Mem0[ds:0x29E3:word16]
	sp = sp - 2
	Mem0[ss:sp:word16] = v32
	call fn0800_3F58 (retsize: 2;)
	sp = sp + 0x0004
	SCZO = cond(sp)
	cl = 0x08
	call fn0800_8CAA (retsize: 2;)
	SCZO = cond(dx - 0x0052)
	branch Test(NE,Z) l0800_1203
	// succ:  l0800_11F7 l0800_1203
l0800_11F7:
	SCZO = cond(ax - 0x4E43)
	branch Test(NE,Z) l0800_1203
	// succ:  l0800_11FC l0800_1203
l0800_11FC:
	call fn0800_5374 (retsize: 2;)
	si = ax
	goto l0800_1243
	// succ:  l0800_1243
l0800_1203:
	si = 0x0007
	goto l0800_1243
	// succ:  l0800_1243
l0800_1208:
	v25 = Mem0[ds:0x29E5:word16]
	sp = sp - 2
	Mem0[ss:sp:word16] = v25
	v26 = Mem0[ds:0x29E3:word16]
	sp = sp - 2
	Mem0[ss:sp:word16] = v26
	call fn0800_3F0A (retsize: 2;)
	sp = sp + 0x0004
	SCZO = cond(sp)
	SCZO = cond(ax - 0x4D5A)
	branch Test(NE,Z) l0800_1222
	// succ:  l0800_121B l0800_1222
l0800_121B:
	call fn0800_46FE (retsize: 2;)
	si = ax
	goto l0800_1243
	// succ:  l0800_1243
l0800_1222:
	call fn0800_4B97 (retsize: 2;)
	si = ax
	goto l0800_1243
	// succ:  l0800_1243
l0800_1229:
	call fn0800_4BB1 (retsize: 2;)
	si = ax
	goto l0800_1243
	// succ:  l0800_1243
l0800_1230:
	call fn0800_4C55 (retsize: 2;)
	si = ax
	goto l0800_1243
	// succ:  l0800_1243
l0800_1237:
	call fn0800_518F (retsize: 2;)
	si = ax
	goto l0800_1243
	// succ:  l0800_1243
l0800_123E:
	call fn0800_51A9 (retsize: 2;)
	si = ax
	// succ:  l0800_1243
l0800_1243:
	v21 = Mem0[ds:0x29E1:word16]
	sp = sp - 2
	Mem0[ss:sp:word16] = v21
	v22 = Mem0[ds:0x29DF:word16]
	sp = sp - 2
	Mem0[ss:sp:word16] = v22
	call fn0800_4194 (retsize: 2;)
	sp = sp + 0x0004
	SCZO = cond(sp)
	Mem0[ds:0x2A09:word16] = dx
	Mem0[ds:0x2A07:word16] = ax
	v23 = Mem0[ds:0x29E5:word16]
	sp = sp - 2
	Mem0[ss:sp:word16] = v23
	v24 = Mem0[ds:0x29E3:word16]
	sp = sp - 2
	Mem0[ss:sp:word16] = v24
	call fn0800_4194 (retsize: 2;)
	sp = sp + 0x0004
	SCZO = cond(sp)
	Mem0[ds:0x2A05:word16] = dx
	Mem0[ds:0x2A03:word16] = ax
	si = si | si
	SZO = cond(si)
	C = false
	branch Test(EQ,Z) l0800_127F
	// succ:  l0800_1271 l0800_127F
l0800_1271:
	ax = Mem0[ds:0x2A05:word16]
	dx = Mem0[ds:0x2A03:word16]
	Mem0[ds:0x2A09:word16] = ax
	Mem0[ds:0x2A07:word16] = dx
	// succ:  l0800_127F
l0800_127F:
	v27 = Mem0[ds:0x29E5:word16]
	sp = sp - 2
	Mem0[ss:sp:word16] = v27
	v28 = Mem0[ds:0x29E3:word16]
	sp = sp - 2
	Mem0[ss:sp:word16] = v28
	call fn0800_A614 (retsize: 2;)
	sp = sp + 0x0004
	SCZO = cond(sp)
	v29 = Mem0[ds:0x29E1:word16]
	sp = sp - 2
	Mem0[ss:sp:word16] = v29
	v30 = Mem0[ds:0x29DF:word16]
	sp = sp - 2
	Mem0[ss:sp:word16] = v30
	call fn0800_A614 (retsize: 2;)
	sp = sp + 0x0004
	SCZO = cond(sp)
	SCZO = cond(Mem0[ds:0x2A25:word16] - 0x0002)
	branch Test(EQ,Z) l0800_12A6
	// succ:  l0800_12A2 l0800_12A6
l0800_12A2:
	si = si | si
	SZO = cond(si)
	C = false
	branch Test(EQ,Z) l0800_12B3
	// succ:  l0800_12A6 l0800_12B3
l0800_12A6:
	sp = sp - 2
	Mem0[ss:sp:word16] = ds
	ax = 0x44DC
	sp = sp - 2
	Mem0[ss:sp:word16] = ax
	call fn0800_8F7F (retsize: 2;)
	sp = sp + 0x0004
	SCZO = cond(sp)
	goto l0800_12B6
	// succ:  l0800_12B6
l0800_12B3:
	call fn0800_37DF (retsize: 2;)
	// succ:  l0800_12B6
l0800_12B6:
	sp = sp - 2
	Mem0[ss:sp:word16] = ds
	ax = 0x4541
	sp = sp - 2
	Mem0[ss:sp:word16] = ax
	sp = sp - 2
	Mem0[ss:sp:word16] = si
	call fn0800_0ABC (retsize: 2;)
	sp = sp + 0x0006
	SCZO = cond(sp)
	// succ:  l0800_12C2
l0800_12C2:
	sp = sp - 2
	Mem0[ss:sp:word16] = ds
	ax = 0x4541
	sp = sp - 2
	Mem0[ss:sp:word16] = ax
	call fn0800_2DE2 (retsize: 2;)
	sp = sp + 0x0004
	SCZO = cond(sp)
	ax = ax | ax
	SZO = cond(ax)
	C = false
	branch Test(EQ,Z) l0800_12D4
	// succ:  l0800_12D1 l0800_12D4
l0800_12D1:
	goto l0800_1192
	// succ:  l0800_1192
l0800_12D4:
	si = Mem0[ss:sp:word16]
	sp = sp + 2
	return
	// succ:  fn0800_112D_exit
fn0800_112D_exit:


// fn0800_12E2
// Return size: 2
define fn0800_12E2
fn0800_12E2_entry:
	// succ:  l0800_12E2
l0800_12E2:
	sp = fp
	Top = 0
	sp = sp - 2
	Mem0[ss:sp:word16] = bp
	bp = sp
	sp = sp - 0x0084
	SCZO = cond(sp)
	sp = sp - 2
	Mem0[ss:sp:word16] = si
	sp = sp - 2
	Mem0[ss:sp:word16] = di
	sp = sp - 2
	Mem0[ss:sp:word16] = ds
	ax = 0x4348
	sp = sp - 2
	Mem0[ss:sp:word16] = ax
	bx = Mem0[ds:0x2A25:word16]
	bx = bx << 0x0001
	SCZO = cond(bx)
	bx = bx << 0x0001
	SCZO = cond(bx)
	v11 = Mem0[ds:bx + 0x050B:word16]
	sp = sp - 2
	Mem0[ss:sp:word16] = v11
	v12 = Mem0[ds:bx + 0x0509:word16]
	sp = sp - 2
	Mem0[ss:sp:word16] = v12
	sp = sp - 2
	Mem0[ss:sp:word16] = ds
	ax = 0x0916
	sp = sp - 2
	Mem0[ss:sp:word16] = ax
	call fn0800_B2EF (retsize: 2;)
	sp = sp + 0x000C
	SCZO = cond(sp)
	SCZO = cond(Mem0[ds:0x2E4F:word16] - 0x0000)
	branch Test(EQ,Z) l0800_1321
	// succ:  l0800_1312 l0800_1321
l0800_1312:
	v14 = Mem0[ds:0x2E4F:word16]
	sp = sp - 2
	Mem0[ss:sp:word16] = v14
	sp = sp - 2
	Mem0[ss:sp:word16] = ds
	ax = 0x0925
	sp = sp - 2
	Mem0[ss:sp:word16] = ax
	call fn0800_B2EF (retsize: 2;)
	sp = sp + 0x0006
	SCZO = cond(sp)
	// succ:  l0800_1321
l0800_1321:
	sp = sp - 2
	Mem0[ss:sp:word16] = ds
	ax = 0x093A
	sp = sp - 2
	Mem0[ss:sp:word16] = ax
	call fn0800_B2EF (retsize: 2;)
	sp = sp + 0x0004
	SCZO = cond(sp)
	sp = sp - 2
	Mem0[ss:sp:word16] = ds
	ax = 0x093D
	sp = sp - 2
	Mem0[ss:sp:word16] = ax
	sp = sp - 2
	Mem0[ss:sp:word16] = ds
	ax = 0x4348
	sp = sp - 2
	Mem0[ss:sp:word16] = ax
	call fn0800_AA7E (retsize: 2;)
	sp = sp + 0x0008
	SCZO = cond(sp)
	Mem0[ds:0x29D1:word16] = dx
	Mem0[ds:0x29CF:word16] = ax
	ax = Mem0[ds:0x2A25:word16]
	SCZO = cond(ax - 0x0003)
	branch Test(EQ,Z) l0800_1353
	// succ:  l0800_134B l0800_1353
l0800_134B:
	SCZO = cond(ax - 0x0004)
	branch Test(EQ,Z) l0800_1371
	// succ:  l0800_1350 l0800_1371
l0800_1350:
	goto l0800_1478
	// succ:  l0800_1478
l0800_1353:
	ax = Mem0[ds:0x29CF:word16]
	ax = ax | Mem0[ds:0x29D1:word16]
	SZO = cond(ax)
	C = false
	branch Test(EQ,Z) l0800_135F
	// succ:  l0800_135C l0800_135F
l0800_135C:
	goto l0800_1478
	// succ:  l0800_1478
l0800_135F:
	sp = sp - 2
	Mem0[ss:sp:word16] = ds
	ax = 0x4348
	sp = sp - 2
	Mem0[ss:sp:word16] = ax
	ax = 0x0007
	sp = sp - 2
	Mem0[ss:sp:word16] = ax
	call fn0800_0D24 (retsize: 2;)
	sp = sp + 0x0006
	SCZO = cond(sp)
	goto l0800_1478
	// succ:  l0800_1478
l0800_1371:
	ax = Mem0[ds:0x29CF:word16]
	ax = ax | Mem0[ds:0x29D1:word16]
	SZO = cond(ax)
	C = false
	branch Test(EQ,Z) l0800_13C6
	// succ:  l0800_137A l0800_13C6
l0800_137A:
	v18 = Mem0[ds:0x29D1:word16]
	sp = sp - 2
	Mem0[ss:sp:word16] = v18
	v19 = Mem0[ds:0x29CF:word16]
	sp = sp - 2
	Mem0[ss:sp:word16] = v19
	call fn0800_3E27 (retsize: 2;)
	sp = sp + 0x0004
	SCZO = cond(sp)
	SCZO = cond(ax - 0x4D5A)
	branch Test(NE,Z) l0800_13BA
	// succ:  l0800_138D l0800_13BA
l0800_138D:
	ax = 0x0002
	sp = sp - 2
	Mem0[ss:sp:word16] = ax
	ax = ax ^ ax
	SZO = cond(ax)
	C = false
	sp = sp - 2
	Mem0[ss:sp:word16] = ax
	sp = sp - 2
	Mem0[ss:sp:word16] = ax
	v20 = Mem0[ds:0x29D1:word16]
	sp = sp - 2
	Mem0[ss:sp:word16] = v20
	v21 = Mem0[ds:0x29CF:word16]
	sp = sp - 2
	Mem0[ss:sp:word16] = v21
	call fn0800_ACB3 (retsize: 2;)
	sp = sp + 0x000A
	SCZO = cond(sp)
	v22 = Mem0[ds:0x29D1:word16]
	sp = sp - 2
	Mem0[ss:sp:word16] = v22
	v23 = Mem0[ds:0x29CF:word16]
	sp = sp - 2
	Mem0[ss:sp:word16] = v23
	call fn0800_AD2F (retsize: 2;)
	sp = sp + 0x0004
	SCZO = cond(sp)
	Mem0[ds:0x29ED:word16] = dx
	Mem0[ds:0x29EB:word16] = ax
	goto l0800_13C6
	// succ:  l0800_13C6
l0800_13BA:
	Mem0[ds:0x29D1:word16] = 0x0000
	Mem0[ds:0x29CF:word16] = 0x0000
	// succ:  l0800_13C6
l0800_13C6:
	ax = Mem0[ds:0x29CF:word16]
	ax = ax | Mem0[ds:0x29D1:word16]
	SZO = cond(ax)
	C = false
	branch Test(NE,Z) l0800_13F2
	// succ:  l0800_13CF l0800_13F2
l0800_13CF:
	sp = sp - 2
	Mem0[ss:sp:word16] = ds
	ax = 0x0941
	sp = sp - 2
	Mem0[ss:sp:word16] = ax
	sp = sp - 2
	Mem0[ss:sp:word16] = ds
	ax = 0x4348
	sp = sp - 2
	Mem0[ss:sp:word16] = ax
	call fn0800_4234 (retsize: 2;)
	sp = sp + 0x0008
	SCZO = cond(sp)
	Mem0[ds:0x29D1:word16] = dx
	Mem0[ds:0x29CF:word16] = ax
	Mem0[ds:0x29ED:word16] = 0x0000
	Mem0[ds:0x29EB:word16] = 0x0000
	// succ:  l0800_13F2
l0800_13F2:
	Mem0[ss:bp - 0x006E:byte] = 0x52
	Mem0[ss:bp - 0x006D:byte] = 0x4E
	Mem0[ss:bp - 0x006C:byte] = 0x43
	Mem0[ss:bp - 0x006B:byte] = 0x41
	Mem0[ss:bp - 0x006A:byte] = 0x00
	Mem0[ss:bp - 0x0069:byte] = 0x0C
	Mem0[ss:bp - 0x0066:byte] = 0x00
	Mem0[ss:bp - 0x0065:byte] = 0x0C
	Mem0[ss:bp - 0x0064:byte] = 0x00
	Mem0[ss:bp - 0x0063:byte] = 0x00
	ax = ax ^ ax
	SZO = cond(ax)
	C = false
	sp = sp - 2
	Mem0[ss:sp:word16] = ax
	ax = 0x0004
	sp = sp - 2
	Mem0[ss:sp:word16] = ax
	sp = sp - 2
	Mem0[ss:sp:word16] = ss
	ax = bp - 0x0066
	sp = sp - 2
	Mem0[ss:sp:word16] = ax
	call fn0800_2CCF (retsize: 2;)
	sp = sp + 0x0008
	SCZO = cond(sp)
	cl = 0x08
	ax = ax >>u cl
	SCZO = cond(ax)
	Mem0[ss:bp - 0x0068:byte] = al
	ax = ax ^ ax
	SZO = cond(ax)
	C = false
	sp = sp - 2
	Mem0[ss:sp:word16] = ax
	ax = 0x0004
	sp = sp - 2
	Mem0[ss:sp:word16] = ax
	sp = sp - 2
	Mem0[ss:sp:word16] = ss
	ax = bp - 0x0066
	sp = sp - 2
	Mem0[ss:sp:word16] = ax
	call fn0800_2CCF (retsize: 2;)
	sp = sp + 0x0008
	SCZO = cond(sp)
	Mem0[ss:bp - 0x0067:byte] = al
	v26 = Mem0[ds:0x29D1:word16]
	sp = sp - 2
	Mem0[ss:sp:word16] = v26
	v27 = Mem0[ds:0x29CF:word16]
	sp = sp - 2
	Mem0[ss:sp:word16] = v27
	ax = ax ^ ax
	SZO = cond(ax)
	C = false
	dx = 0x000C
	sp = sp - 2
	Mem0[ss:sp:word16] = ax
	sp = sp - 2
	Mem0[ss:sp:word16] = dx
	sp = sp - 2
	Mem0[ss:sp:word16] = ss
	ax = bp - 0x006E
	sp = sp - 2
	Mem0[ss:sp:word16] = ax
	call fn0800_4152 (retsize: 2;)
	sp = sp + 0x000C
	SCZO = cond(sp)
	v28 = Mem0[ds:0x29D1:word16]
	sp = sp - 2
	Mem0[ss:sp:word16] = v28
	v29 = Mem0[ds:0x29CF:word16]
	sp = sp - 2
	Mem0[ss:sp:word16] = v29
	v30 = Mem0[ds:0x29ED:word16]
	sp = sp - 2
	Mem0[ss:sp:word16] = v30
	v31 = Mem0[ds:0x29EB:word16]
	sp = sp - 2
	Mem0[ss:sp:word16] = v31
	call fn0800_409C (retsize: 2;)
	sp = sp + 0x0008
	SCZO = cond(sp)
	// succ:  l0800_1478
l0800_1478:
	ax = ax ^ ax
	SZO = cond(ax)
	C = false
	sp = sp - 2
	Mem0[ss:sp:word16] = ax
	call fn0800_1CF6 (retsize: 2;)
	sp = sp + 0x0002
	SCZO = cond(sp)
	si = si ^ si
	SZO = cond(si)
	C = false
	goto l0800_1527
	// succ:  l0800_1527
l0800_1486:
	sp = sp - 2
	Mem0[ss:sp:word16] = ds
	ax = 0x4541
	sp = sp - 2
	Mem0[ss:sp:word16] = ax
	sp = sp - 2
	Mem0[ss:sp:word16] = ss
	ax = bp - 0x006E
	sp = sp - 2
	Mem0[ss:sp:word16] = ax
	call fn0800_3509 (retsize: 2;)
	sp = sp + 0x0008
	SCZO = cond(sp)
	sp = sp - 2
	Mem0[ss:sp:word16] = ds
	ax = 0x4541
	sp = sp - 2
	Mem0[ss:sp:word16] = ax
	sp = sp - 2
	Mem0[ss:sp:word16] = ss
	ax = bp - 0x0084
	sp = sp - 2
	Mem0[ss:sp:word16] = ax
	call fn0800_35A3 (retsize: 2;)
	sp = sp + 0x0008
	SCZO = cond(sp)
	sp = sp - 2
	Mem0[ss:sp:word16] = ss
	ax = bp - 0x006E
	sp = sp - 2
	Mem0[ss:sp:word16] = ax
	call fn0800_283D (retsize: 2;)
	sp = sp + 0x0004
	SCZO = cond(sp)
	Mem0[ss:bp - 0x0002:word16] = dx
	Mem0[ss:bp - 0x0004:word16] = ax
	ax = ax | dx
	SZO = cond(ax)
	C = false
	branch Test(NE,Z) l0800_14CD
	// succ:  l0800_14BC l0800_14CD
l0800_14BC:
	sp = sp - 2
	Mem0[ss:sp:word16] = ss
	ax = bp - 0x006E
	sp = sp - 2
	Mem0[ss:sp:word16] = ax
	call fn0800_1F5C (retsize: 2;)
	sp = sp + 0x0004
	SCZO = cond(sp)
	Mem0[ss:bp - 0x0002:word16] = dx
	Mem0[ss:bp - 0x0004:word16] = ax
	// succ:  l0800_14CD
l0800_14CD:
	v32 = Mem0[ss:bp - 0x0002:word16]
	sp = sp - 2
	Mem0[ss:sp:word16] = v32
	v33 = Mem0[ss:bp - 0x0004:word16]
	sp = sp - 2
	Mem0[ss:sp:word16] = v33
	sp = sp - 2
	Mem0[ss:sp:word16] = ss
	ax = bp - 0x0084
	sp = sp - 2
	Mem0[ss:sp:word16] = ax
	call fn0800_2931 (retsize: 2;)
	sp = sp + 0x0008
	SCZO = cond(sp)
	Mem0[ss:bp - 0x0006:word16] = dx
	Mem0[ss:bp - 0x0008:word16] = ax
	ax = ax | dx
	SZO = cond(ax)
	C = false
	branch Test(NE,Z) l0800_14FD
	// succ:  l0800_14E9 l0800_14FD
l0800_14E9:
	v34 = Mem0[ss:bp - 0x0002:word16]
	sp = sp - 2
	Mem0[ss:sp:word16] = v34
	v35 = Mem0[ss:bp - 0x0004:word16]
	sp = sp - 2
	Mem0[ss:sp:word16] = v35
	sp = sp - 2
	Mem0[ss:sp:word16] = ss
	ax = bp - 0x0084
	sp = sp - 2
	Mem0[ss:sp:word16] = ax
	call fn0800_2085 (retsize: 2;)
	sp = sp + 0x0008
	SCZO = cond(sp)
	goto l0800_1509
	// succ:  l0800_1509
l0800_14FD:
	v43 = Mem0[ss:bp - 0x0006:word16]
	sp = sp - 2
	Mem0[ss:sp:word16] = v43
	v44 = Mem0[ss:bp - 0x0008:word16]
	sp = sp - 2
	Mem0[ss:sp:word16] = v44
	call fn0800_23EC (retsize: 2;)
	sp = sp + 0x0004
	SCZO = cond(sp)
	// succ:  l0800_1509
l0800_1509:
	si = 0x0001
	es_bx = Mem0[ds:0x2E51:segptr32]
	al = Mem0[es:bx + 0x0004:byte]
	ah = 0x00
	cl = 0x08
	ax = ax << cl
	SCZO = cond(ax)
	dl = Mem0[es:bx + 0x0005:byte]
	dh = 0x00
	ax = ax + dx
	SCZO = cond(ax)
	SCZO = cond(ax - 0xFF8C)
	branch Test(UGE,C) l0800_1539
	// succ:  l0800_1527 l0800_1539
l0800_1527:
	sp = sp - 2
	Mem0[ss:sp:word16] = ds
	ax = 0x4541
	sp = sp - 2
	Mem0[ss:sp:word16] = ax
	call fn0800_2DE2 (retsize: 2;)
	sp = sp + 0x0004
	SCZO = cond(sp)
	ax = ax | ax
	SZO = cond(ax)
	C = false
	branch Test(EQ,Z) l0800_1539
	// succ:  l0800_1536 l0800_1539
l0800_1536:
	goto l0800_1486
	// succ:  l0800_1486
l0800_1539:
	si = si | si
	SZO = cond(si)
	C = false
	branch Test(NE,Z) l0800_1551
	// succ:  l0800_153D l0800_1551
l0800_153D:
	v36 = Mem0[ds:0x29D1:word16]
	sp = sp - 2
	Mem0[ss:sp:word16] = v36
	v37 = Mem0[ds:0x29CF:word16]
	sp = sp - 2
	Mem0[ss:sp:word16] = v37
	call fn0800_A614 (retsize: 2;)
	sp = sp + 0x0004
	SCZO = cond(sp)
	di = Mem0[ss:sp:word16]
	sp = sp + 2
	si = Mem0[ss:sp:word16]
	sp = sp + 2
	sp = bp
	bp = Mem0[ss:sp:word16]
	sp = sp + 2
	return
	// succ:  fn0800_12E2_exit
l0800_1551:
	call fn0800_1E5E (retsize: 2;)
	ax = 0x0001
	sp = sp - 2
	Mem0[ss:sp:word16] = ax
	call fn0800_1CF6 (retsize: 2;)
	sp = sp + 0x0002
	SCZO = cond(sp)
	ax = 0x0001
	sp = sp - 2
	Mem0[ss:sp:word16] = ax
	ax = ax ^ ax
	SZO = cond(ax)
	C = false
	sp = sp - 2
	Mem0[ss:sp:word16] = ax
	call fn0800_2DBF (retsize: 2;)
	sp = sp + 0x0004
	SCZO = cond(sp)
	ax = Mem0[ds:0x29D1:word16]
	dx = Mem0[ds:0x29CF:word16]
	Mem0[ds:0x29E1:word16] = ax
	Mem0[ds:0x29DF:word16] = dx
	sp = sp - 2
	Mem0[ss:sp:word16] = ds
	ax = 0x0945
	sp = sp - 2
	Mem0[ss:sp:word16] = ax
	sp = sp - 2
	Mem0[ss:sp:word16] = ds
	ax = 0x4477
	sp = sp - 2
	Mem0[ss:sp:word16] = ax
	call fn0800_37BE (retsize: 2;)
	sp = sp + 0x0008
	SCZO = cond(sp)
	sp = sp - 2
	Mem0[ss:sp:word16] = ds
	ax = 0x0941
	sp = sp - 2
	Mem0[ss:sp:word16] = ax
	sp = sp - 2
	Mem0[ss:sp:word16] = ds
	ax = 0x4477
	sp = sp - 2
	Mem0[ss:sp:word16] = ax
	call fn0800_4234 (retsize: 2;)
	sp = sp + 0x0008
	SCZO = cond(sp)
	Mem0[ds:0x29DD:word16] = dx
	Mem0[ds:0x29DB:word16] = ax
	goto l0800_1897
	// succ:  l0800_1897
l0800_15A3:
	sp = sp - 2
	Mem0[ss:sp:word16] = ds
	ax = 0x093D
	sp = sp - 2
	Mem0[ss:sp:word16] = ax
	sp = sp - 2
	Mem0[ss:sp:word16] = ds
	ax = 0x4541
	sp = sp - 2
	Mem0[ss:sp:word16] = ax
	call fn0800_4234 (retsize: 2;)
	sp = sp + 0x0008
	SCZO = cond(sp)
	Mem0[ds:0x29E5:word16] = dx
	Mem0[ds:0x29E3:word16] = ax
	sp = sp - 2
	Mem0[ss:sp:word16] = ds
	ax = 0x4541
	sp = sp - 2
	Mem0[ss:sp:word16] = ax
	sp = sp - 2
	Mem0[ss:sp:word16] = ss
	ax = bp - 0x006E
	sp = sp - 2
	Mem0[ss:sp:word16] = ax
	call fn0800_3509 (retsize: 2;)
	sp = sp + 0x0008
	SCZO = cond(sp)
	sp = sp - 2
	Mem0[ss:sp:word16] = ds
	ax = 0x4541
	sp = sp - 2
	Mem0[ss:sp:word16] = ax
	sp = sp - 2
	Mem0[ss:sp:word16] = ss
	ax = bp - 0x0084
	sp = sp - 2
	Mem0[ss:sp:word16] = ax
	call fn0800_35A3 (retsize: 2;)
	sp = sp + 0x0008
	SCZO = cond(sp)
	sp = sp - 2
	Mem0[ss:sp:word16] = ds
	ax = 0x4541
	sp = sp - 2
	Mem0[ss:sp:word16] = ax
	call fn0800_0C93 (retsize: 2;)
	sp = sp + 0x0004
	SCZO = cond(sp)
	sp = sp - 2
	Mem0[ss:sp:word16] = ss
	ax = bp - 0x006E
	sp = sp - 2
	Mem0[ss:sp:word16] = ax
	call fn0800_283D (retsize: 2;)
	sp = sp + 0x0004
	SCZO = cond(sp)
	sp = sp - 2
	Mem0[ss:sp:word16] = dx
	sp = sp - 2
	Mem0[ss:sp:word16] = ax
	sp = sp - 2
	Mem0[ss:sp:word16] = ss
	ax = bp - 0x0084
	sp = sp - 2
	Mem0[ss:sp:word16] = ax
	call fn0800_2931 (retsize: 2;)
	sp = sp + 0x0008
	SCZO = cond(sp)
	Mem0[ss:bp - 0x0006:word16] = dx
	Mem0[ss:bp - 0x0008:word16] = ax
	v49 = Mem0[ds:0x29D1:word16]
	sp = sp - 2
	Mem0[ss:sp:word16] = v49
	v50 = Mem0[ds:0x29CF:word16]
	sp = sp - 2
	Mem0[ss:sp:word16] = v50
	call fn0800_4194 (retsize: 2;)
	sp = sp + 0x0004
	SCZO = cond(sp)
	ax = ax - 0x0004
	SCZO = cond(ax)
	dx = dx - 0x00 - C
	SCZO = cond(dx)
	Mem0[ds:0x29E9:word16] = dx
	Mem0[ds:0x29E7:word16] = ax
	ax = Mem0[ds:0x29E9:word16]
	dx_ax = (int32) ax
	cl = 0x08
	call fn0800_8C8A (retsize: 2;)
	es_di = Mem0[ss:bp - 0x0008:segptr32]
	sp = sp - 2
	Mem0[ss:sp:word16] = ax
	ax = ax ^ ax
	SZO = cond(ax)
	C = false
	cx = 0xFFFF
	// succ:  l0800_1632
l0800_1632:
	branch cx == 0x0000 l0800_1634
	// succ:  l0800_1632_1 l0800_1634
l0800_1632_1:
	SCZO = cond(al - Mem0[es:di:byte])
	di = di + 0x0001
	cx = cx - 0x0001
	branch Test(EQ,Z) l0800_1632
	// succ:  l0800_1634 l0800_1632
l0800_1634:
	cx = ~cx
	ax = ax ^ ax
	SZO = cond(ax)
	C = false
	di = di - cx
	SCZO = cond(di)
	// succ:  l0800_163A
l0800_163A:
	branch cx == 0x0000 l0800_163C
	// succ:  l0800_163A_2 l0800_163C
l0800_163A_2:
	SCZO = cond(al - Mem0[es:di:byte])
	di = di + 0x0001
	cx = cx - 0x0001
	branch Test(EQ,Z) l0800_163A
	// succ:  l0800_163C l0800_163A
l0800_163C:
	branch Test(EQ,Z) l0800_1645
	// succ:  l0800_163E l0800_1645
l0800_163E:
	di = 0x0001
	ax = ax ^ ax
	SZO = cond(ax)
	C = false
	es = ax
	// succ:  l0800_1645
l0800_1645:
	di = di - 0x0001
	SZO = cond(di)
	ax = es
	es = ax
	ax = Mem0[ss:sp:word16]
	sp = sp + 2
	Mem0[es:di + 0x0001:byte] = al
	ax = Mem0[ds:0x29E9:word16]
	dx_ax = (int32) ax
	es_di = Mem0[ss:bp - 0x0008:segptr32]
	sp = sp - 2
	Mem0[ss:sp:word16] = ax
	ax = ax ^ ax
	SZO = cond(ax)
	C = false
	cx = 0xFFFF
	// succ:  l0800_165C
l0800_165C:
	branch cx == 0x0000 l0800_165E
	// succ:  l0800_165C_1 l0800_165E
l0800_165C_1:
	SCZO = cond(al - Mem0[es:di:byte])
	di = di + 0x0001
	cx = cx - 0x0001
	branch Test(EQ,Z) l0800_165C
	// succ:  l0800_165E l0800_165C
l0800_165E:
	cx = ~cx
	ax = ax ^ ax
	SZO = cond(ax)
	C = false
	di = di - cx
	SCZO = cond(di)
	// succ:  l0800_1664
l0800_1664:
	branch cx == 0x0000 l0800_1666
	// succ:  l0800_1664_2 l0800_1666
l0800_1664_2:
	SCZO = cond(al - Mem0[es:di:byte])
	di = di + 0x0001
	cx = cx - 0x0001
	branch Test(EQ,Z) l0800_1664
	// succ:  l0800_1666 l0800_1664
l0800_1666:
	branch Test(EQ,Z) l0800_166F
	// succ:  l0800_1668 l0800_166F
l0800_1668:
	di = 0x0001
	ax = ax ^ ax
	SZO = cond(ax)
	C = false
	es = ax
	// succ:  l0800_166F
l0800_166F:
	di = di - 0x0001
	SZO = cond(di)
	ax = es
	es = ax
	ax = Mem0[ss:sp:word16]
	sp = sp + 2
	Mem0[es:di + 0x0002:byte] = al
	dx = Mem0[ds:0x29E9:word16]
	ax = Mem0[ds:0x29E7:word16]
	cl = 0x08
	call fn0800_8C8A (retsize: 2;)
	es_di = Mem0[ss:bp - 0x0008:segptr32]
	sp = sp - 2
	Mem0[ss:sp:word16] = ax
	ax = ax ^ ax
	SZO = cond(ax)
	C = false
	cx = 0xFFFF
	// succ:  l0800_168E
l0800_168E:
	branch cx == 0x0000 l0800_1690
	// succ:  l0800_168E_1 l0800_1690
l0800_168E_1:
	SCZO = cond(al - Mem0[es:di:byte])
	di = di + 0x0001
	cx = cx - 0x0001
	branch Test(EQ,Z) l0800_168E
	// succ:  l0800_1690 l0800_168E
l0800_1690:
	cx = ~cx
	ax = ax ^ ax
	SZO = cond(ax)
	C = false
	di = di - cx
	SCZO = cond(di)
	// succ:  l0800_1696
l0800_1696:
	branch cx == 0x0000 l0800_1698
	// succ:  l0800_1696_2 l0800_1698
l0800_1696_2:
	SCZO = cond(al - Mem0[es:di:byte])
	di = di + 0x0001
	cx = cx - 0x0001
	branch Test(EQ,Z) l0800_1696
	// succ:  l0800_1698 l0800_1696
l0800_1698:
	branch Test(EQ,Z) l0800_16A1
	// succ:  l0800_169A l0800_16A1
l0800_169A:
	di = 0x0001
	ax = ax ^ ax
	SZO = cond(ax)
	C = false
	es = ax
	// succ:  l0800_16A1
l0800_16A1:
	di = di - 0x0001
	SZO = cond(di)
	ax = es
	es = ax
	ax = Mem0[ss:sp:word16]
	sp = sp + 2
	Mem0[es:di + 0x0003:byte] = al
	es_di = Mem0[ss:bp - 0x0008:segptr32]
	ax = ax ^ ax
	SZO = cond(ax)
	C = false
	cx = 0xFFFF
	// succ:  l0800_16B3
l0800_16B3:
	branch cx == 0x0000 l0800_16B5
	// succ:  l0800_16B3_1 l0800_16B5
l0800_16B3_1:
	SCZO = cond(al - Mem0[es:di:byte])
	di = di + 0x0001
	cx = cx - 0x0001
	branch Test(EQ,Z) l0800_16B3
	// succ:  l0800_16B5 l0800_16B3
l0800_16B5:
	cx = ~cx
	ax = ax ^ ax
	SZO = cond(ax)
	C = false
	di = di - cx
	SCZO = cond(di)
	// succ:  l0800_16BB
l0800_16BB:
	branch cx == 0x0000 l0800_16BD
	// succ:  l0800_16BB_2 l0800_16BD
l0800_16BB_2:
	SCZO = cond(al - Mem0[es:di:byte])
	di = di + 0x0001
	cx = cx - 0x0001
	branch Test(EQ,Z) l0800_16BB
	// succ:  l0800_16BD l0800_16BB
l0800_16BD:
	branch Test(EQ,Z) l0800_16C6
	// succ:  l0800_16BF l0800_16C6
l0800_16BF:
	di = 0x0001
	ax = ax ^ ax
	SZO = cond(ax)
	C = false
	es = ax
	// succ:  l0800_16C6
l0800_16C6:
	di = di - 0x0001
	SZO = cond(di)
	ax = es
	dl = Mem0[ds:0x29E7:byte]
	es = ax
	Mem0[es:di + 0x0004:byte] = dl
	di = 0x0001
	ax = ax ^ ax
	SZO = cond(ax)
	C = false
	Mem0[ds:0x2A05:word16] = 0x0000
	Mem0[ds:0x2A03:word16] = ax
	si = ax
	v54 = Mem0[ds:0x29E5:word16]
	sp = sp - 2
	Mem0[ss:sp:word16] = v54
	v55 = Mem0[ds:0x29E3:word16]
	sp = sp - 2
	Mem0[ss:sp:word16] = v55
	call fn0800_4194 (retsize: 2;)
	sp = sp + 0x0004
	SCZO = cond(sp)
	Mem0[ds:0x2A09:word16] = dx
	Mem0[ds:0x2A07:word16] = ax
	ax = ax ^ ax
	SZO = cond(ax)
	C = false
	sp = sp - 2
	Mem0[ss:sp:word16] = ax
	v56 = Mem0[ds:0x29E9:word16]
	sp = sp - 2
	Mem0[ss:sp:word16] = v56
	v57 = Mem0[ds:0x29E7:word16]
	sp = sp - 2
	Mem0[ss:sp:word16] = v57
	v58 = Mem0[ds:0x29E1:word16]
	sp = sp - 2
	Mem0[ss:sp:word16] = v58
	v59 = Mem0[ds:0x29DF:word16]
	sp = sp - 2
	Mem0[ss:sp:word16] = v59
	call fn0800_ACB3 (retsize: 2;)
	sp = sp + 0x000A
	SCZO = cond(sp)
	SCZO = cond(Mem0[ds:0x2A09:word16] - 0x0000)
	branch Test(UGE,C) l0800_171B
	// succ:  l0800_1718 l0800_171B
l0800_1718:
	goto l0800_17A2
	// succ:  l0800_17A2
l0800_171B:
	branch Test(UGT,CZ) l0800_1724
	// succ:  l0800_171D l0800_1724
l0800_171D:
	SCZO = cond(Mem0[ds:0x2A07:word16] - 0x0012)
	branch Test(ULE,CZ) l0800_17A2
	// succ:  l0800_1724 l0800_17A2
l0800_1724:
	SCZO = cond(Mem0[ds:0x2A21:word16] - 0x0000)
	branch Test(EQ,Z) l0800_17A2
	// succ:  l0800_172B l0800_17A2
l0800_172B:
	v61 = Mem0[ds:0x29E5:word16]
	sp = sp - 2
	Mem0[ss:sp:word16] = v61
	v62 = Mem0[ds:0x29E3:word16]
	sp = sp - 2
	Mem0[ss:sp:word16] = v62
	call fn0800_3F58 (retsize: 2;)
	sp = sp + 0x0004
	SCZO = cond(sp)
	cl = 0x08
	call fn0800_8CAA (retsize: 2;)
	SCZO = cond(dx - 0x0052)
	branch Test(NE,Z) l0800_1748
	// succ:  l0800_1743 l0800_1748
l0800_1743:
	SCZO = cond(ax - 0x4E43)
	branch Test(EQ,Z) l0800_17A2
	// succ:  l0800_1748 l0800_17A2
l0800_1748:
	v63 = Mem0[ds:0x2A09:word16]
	sp = sp - 2
	Mem0[ss:sp:word16] = v63
	v64 = Mem0[ds:0x2A07:word16]
	sp = sp - 2
	Mem0[ss:sp:word16] = v64
	v65 = Mem0[ds:0x2A09:word16]
	sp = sp - 2
	Mem0[ss:sp:word16] = v65
	v66 = Mem0[ds:0x2A07:word16]
	sp = sp - 2
	Mem0[ss:sp:word16] = v66
	call fn0800_75EA (retsize: 2;)
	sp = sp + 0x0008
	SCZO = cond(sp)
	ax = Mem0[ds:0x2A05:word16]
	dx = Mem0[ds:0x2A03:word16]
	SCZO = cond(ax - Mem0[ds:0x2A09:word16])
	branch Test(ULT,C) l0800_1778
	// succ:  l0800_176B l0800_1778
l0800_176B:
	branch Test(NE,Z) l0800_1773
	// succ:  l0800_176D l0800_1773
l0800_176D:
	SCZO = cond(dx - Mem0[ds:0x2A07:word16])
	branch Test(ULT,C) l0800_1778
	// succ:  l0800_1773 l0800_1778
l0800_1773:
	ax = 0x0001
	goto l0800_177A
	// succ:  l0800_177A
l0800_1778:
	ax = ax ^ ax
	SZO = cond(ax)
	C = false
	// succ:  l0800_177A
l0800_177A:
	di = ax
	ax = ax | ax
	SZO = cond(ax)
	C = false
	branch Test(EQ,Z) l0800_17A2
	// succ:  l0800_1780 l0800_17A2
l0800_1780:
	ax = 0x0001
	sp = sp - 2
	Mem0[ss:sp:word16] = ax
	ax = Mem0[ds:0x2A05:word16]
	dx = Mem0[ds:0x2A03:word16]
	ax = -ax
	SCZO = cond(ax)
	C = ax == 0x0000
	dx = -dx
	SCZO = cond(dx)
	C = dx == 0x0000
	ax = ax - 0x0000 - C
	SCZO = cond(ax)
	sp = sp - 2
	Mem0[ss:sp:word16] = ax
	sp = sp - 2
	Mem0[ss:sp:word16] = dx
	v73 = Mem0[ds:0x29E1:word16]
	sp = sp - 2
	Mem0[ss:sp:word16] = v73
	v74 = Mem0[ds:0x29DF:word16]
	sp = sp - 2
	Mem0[ss:sp:word16] = v74
	call fn0800_ACB3 (retsize: 2;)
	sp = sp + 0x000A
	SCZO = cond(sp)
	// succ:  l0800_17A2
l0800_17A2:
	di = di | di
	SZO = cond(di)
	C = false
	branch Test(NE,Z) l0800_17A9
	// succ:  l0800_17A6 l0800_17A9
l0800_17A6:
	goto l0800_183F
	// succ:  l0800_183F
l0800_17A9:
	ax = Mem0[ds:0x2A09:word16]
	dx = Mem0[ds:0x2A07:word16]
	Mem0[ds:0x2A05:word16] = ax
	Mem0[ds:0x2A03:word16] = dx
	v75 = Mem0[ds:0x29E5:word16]
	sp = sp - 2
	Mem0[ss:sp:word16] = v75
	v76 = Mem0[ds:0x29E3:word16]
	sp = sp - 2
	Mem0[ss:sp:word16] = v76
	call fn0800_BA67 (retsize: 2;)
	sp = sp + 0x0004
	SCZO = cond(sp)
	SCZO = cond(Mem0[ds:0x2A09:word16] - 0x0000)
	branch Test(ULT,C) l0800_17F2
	// succ:  l0800_17CC l0800_17F2
l0800_17CC:
	branch Test(NE,Z) l0800_17D5
	// succ:  l0800_17CE l0800_17D5
l0800_17CE:
	SCZO = cond(Mem0[ds:0x2A07:word16] - 0x0012)
	branch Test(ULT,C) l0800_17F2
	// succ:  l0800_17D5 l0800_17F2
l0800_17D5:
	v77 = Mem0[ds:0x29E5:word16]
	sp = sp - 2
	Mem0[ss:sp:word16] = v77
	v78 = Mem0[ds:0x29E3:word16]
	sp = sp - 2
	Mem0[ss:sp:word16] = v78
	call fn0800_3F58 (retsize: 2;)
	sp = sp + 0x0004
	SCZO = cond(sp)
	cl = 0x08
	call fn0800_8CAA (retsize: 2;)
	SCZO = cond(dx - 0x0052)
	branch Test(NE,Z) l0800_17F2
	// succ:  l0800_17ED l0800_17F2
l0800_17ED:
	SCZO = cond(ax - 0x4E43)
	branch Test(EQ,Z) l0800_181E
	// succ:  l0800_17F2 l0800_181E
l0800_17F2:
	v79 = Mem0[ds:0x29D1:word16]
	sp = sp - 2
	Mem0[ss:sp:word16] = v79
	v80 = Mem0[ds:0x29CF:word16]
	sp = sp - 2
	Mem0[ss:sp:word16] = v80
	ax = 0x524E
	dx = 0x4300
	sp = sp - 2
	Mem0[ss:sp:word16] = ax
	sp = sp - 2
	Mem0[ss:sp:word16] = dx
	call fn0800_409C (retsize: 2;)
	sp = sp + 0x0008
	SCZO = cond(sp)
	v81 = Mem0[ds:0x29D1:word16]
	sp = sp - 2
	Mem0[ss:sp:word16] = v81
	v82 = Mem0[ds:0x29CF:word16]
	sp = sp - 2
	Mem0[ss:sp:word16] = v82
	v83 = Mem0[ds:0x2A09:word16]
	sp = sp - 2
	Mem0[ss:sp:word16] = v83
	v84 = Mem0[ds:0x2A07:word16]
	sp = sp - 2
	Mem0[ss:sp:word16] = v84
	call fn0800_409C (retsize: 2;)
	sp = sp + 0x0008
	SCZO = cond(sp)
	// succ:  l0800_181E
l0800_181E:
	v85 = Mem0[ds:0x2A09:word16]
	sp = sp - 2
	Mem0[ss:sp:word16] = v85
	v86 = Mem0[ds:0x2A07:word16]
	sp = sp - 2
	Mem0[ss:sp:word16] = v86
	v87 = Mem0[ds:0x29D1:word16]
	sp = sp - 2
	Mem0[ss:sp:word16] = v87
	v88 = Mem0[ds:0x29CF:word16]
	sp = sp - 2
	Mem0[ss:sp:word16] = v88
	v89 = Mem0[ds:0x29E5:word16]
	sp = sp - 2
	Mem0[ss:sp:word16] = v89
	v90 = Mem0[ds:0x29E3:word16]
	sp = sp - 2
	Mem0[ss:sp:word16] = v90
	call fn0800_3B0A (retsize: 2;)
	sp = sp + 0x000C
	SCZO = cond(sp)
	si = 0x0002
	// succ:  l0800_183F
l0800_183F:
	v67 = Mem0[ds:0x29D1:word16]
	sp = sp - 2
	Mem0[ss:sp:word16] = v67
	v68 = Mem0[ds:0x29CF:word16]
	sp = sp - 2
	Mem0[ss:sp:word16] = v68
	v69 = Mem0[ds:0x29ED:word16]
	sp = sp - 2
	Mem0[ss:sp:word16] = v69
	v70 = Mem0[ds:0x29EB:word16]
	sp = sp - 2
	Mem0[ss:sp:word16] = v70
	call fn0800_409C (retsize: 2;)
	sp = sp + 0x0008
	SCZO = cond(sp)
	v71 = Mem0[ds:0x29E5:word16]
	sp = sp - 2
	Mem0[ss:sp:word16] = v71
	v72 = Mem0[ds:0x29E3:word16]
	sp = sp - 2
	Mem0[ss:sp:word16] = v72
	call fn0800_A614 (retsize: 2;)
	sp = sp + 0x0004
	SCZO = cond(sp)
	sp = sp - 2
	Mem0[ss:sp:word16] = ds
	ax = 0x4541
	sp = sp - 2
	Mem0[ss:sp:word16] = ax
	sp = sp - 2
	Mem0[ss:sp:word16] = si
	call fn0800_0ABC (retsize: 2;)
	sp = sp + 0x0006
	SCZO = cond(sp)
	es_bx = Mem0[ds:0x2E51:segptr32]
	al = Mem0[es:bx + 0x0004:byte]
	ah = 0x00
	cl = 0x08
	ax = ax << cl
	SCZO = cond(ax)
	dl = Mem0[es:bx + 0x0005:byte]
	dh = 0x00
	ax = ax + dx
	SCZO = cond(ax)
	SCZO = cond(ax - 0xFF8C)
	branch Test(ULT,C) l0800_1897
	// succ:  l0800_188A l0800_1897
l0800_188A:
	sp = sp - 2
	Mem0[ss:sp:word16] = ds
	ax = 0x0952
	sp = sp - 2
	Mem0[ss:sp:word16] = ax
	call fn0800_B2EF (retsize: 2;)
	sp = sp + 0x0004
	SCZO = cond(sp)
	goto l0800_18A9
	// succ:  l0800_18A9
l0800_1897:
	sp = sp - 2
	Mem0[ss:sp:word16] = ds
	ax = 0x4541
	sp = sp - 2
	Mem0[ss:sp:word16] = ax
	call fn0800_2DE2 (retsize: 2;)
	sp = sp + 0x0004
	SCZO = cond(sp)
	ax = ax | ax
	SZO = cond(ax)
	C = false
	branch Test(EQ,Z) l0800_18A9
	// succ:  l0800_18A6 l0800_18A9
l0800_18A6:
	goto l0800_15A3
	// succ:  l0800_15A3
l0800_18A9:
	v45 = Mem0[ds:0x29DD:word16]
	sp = sp - 2
	Mem0[ss:sp:word16] = v45
	v46 = Mem0[ds:0x29DB:word16]
	sp = sp - 2
	Mem0[ss:sp:word16] = v46
	call fn0800_A614 (retsize: 2;)
	sp = sp + 0x0004
	SCZO = cond(sp)
	sp = sp - 2
	Mem0[ss:sp:word16] = ds
	ax = 0x4477
	sp = sp - 2
	Mem0[ss:sp:word16] = ax
	call fn0800_8F7F (retsize: 2;)
	sp = sp + 0x0004
	SCZO = cond(sp)
	call fn0800_1E5E (retsize: 2;)
	v47 = Mem0[ds:0x29D1:word16]
	sp = sp - 2
	Mem0[ss:sp:word16] = v47
	v48 = Mem0[ds:0x29CF:word16]
	sp = sp - 2
	Mem0[ss:sp:word16] = v48
	call fn0800_A614 (retsize: 2;)
	sp = sp + 0x0004
	SCZO = cond(sp)
	di = Mem0[ss:sp:word16]
	sp = sp + 2
	si = Mem0[ss:sp:word16]
	sp = sp + 2
	sp = bp
	bp = Mem0[ss:sp:word16]
	sp = sp + 2
	return
	// succ:  fn0800_12E2_exit
fn0800_12E2_exit:


// fn0800_18D9
// Return size: 2
define fn0800_18D9
fn0800_18D9_entry:
	// succ:  l0800_18D9
l0800_18D9:
	sp = fp
	Top = 0
	sp = sp - 2
	Mem0[ss:sp:word16] = bp
	bp = sp
	sp = sp - 0x006E
	SCZO = cond(sp)
	sp = sp - 2
	Mem0[ss:sp:word16] = di
	sp = sp - 2
	Mem0[ss:sp:word16] = ds
	ax = 0x4348
	sp = sp - 2
	Mem0[ss:sp:word16] = ax
	bx = Mem0[ds:0x2A25:word16]
	bx = bx << 0x0001
	SCZO = cond(bx)
	bx = bx << 0x0001
	SCZO = cond(bx)
	v10 = Mem0[ds:bx + 0x050B:word16]
	sp = sp - 2
	Mem0[ss:sp:word16] = v10
	v11 = Mem0[ds:bx + 0x0509:word16]
	sp = sp - 2
	Mem0[ss:sp:word16] = v11
	sp = sp - 2
	Mem0[ss:sp:word16] = ds
	ax = 0x096C
	sp = sp - 2
	Mem0[ss:sp:word16] = ax
	call fn0800_B2EF (retsize: 2;)
	sp = sp + 0x000C
	SCZO = cond(sp)
	sp = sp - 2
	Mem0[ss:sp:word16] = ds
	ax = 0x097D
	sp = sp - 2
	Mem0[ss:sp:word16] = ax
	sp = sp - 2
	Mem0[ss:sp:word16] = ds
	ax = 0x4348
	sp = sp - 2
	Mem0[ss:sp:word16] = ax
	call fn0800_AA7E (retsize: 2;)
	sp = sp + 0x0008
	SCZO = cond(sp)
	Mem0[ds:0x29D1:word16] = dx
	Mem0[ds:0x29CF:word16] = ax
	ax = ax | dx
	SZO = cond(ax)
	C = false
	branch Test(NE,Z) l0800_192A
	// succ:  l0800_191B l0800_192A
l0800_191B:
	sp = sp - 2
	Mem0[ss:sp:word16] = ds
	ax = 0x4348
	sp = sp - 2
	Mem0[ss:sp:word16] = ax
	ax = 0x0007
	sp = sp - 2
	Mem0[ss:sp:word16] = ax
	call fn0800_0D24 (retsize: 2;)
	sp = sp + 0x0006
	SCZO = cond(sp)
	// succ:  l0800_192A
l0800_192A:
	ax = 0x0001
	sp = sp - 2
	Mem0[ss:sp:word16] = ax
	call fn0800_1CF6 (retsize: 2;)
	sp = sp + 0x0002
	SCZO = cond(sp)
	ax = ax ^ ax
	SZO = cond(ax)
	C = false
	sp = sp - 2
	Mem0[ss:sp:word16] = ax
	sp = sp - 2
	Mem0[ss:sp:word16] = ax
	call fn0800_2DBF (retsize: 2;)
	sp = sp + 0x0004
	SCZO = cond(sp)
	goto l0800_19BC
	// succ:  l0800_19BC
l0800_1940:
	sp = sp - 2
	Mem0[ss:sp:word16] = ss
	ax = bp - 0x006E
	sp = sp - 2
	Mem0[ss:sp:word16] = ax
	call fn0800_0C93 (retsize: 2;)
	sp = sp + 0x0004
	SCZO = cond(sp)
	v18 = Mem0[ss:bp - 0x0006:word16]
	sp = sp - 2
	Mem0[ss:sp:word16] = v18
	v19 = Mem0[ss:bp - 0x0008:word16]
	sp = sp - 2
	Mem0[ss:sp:word16] = v19
	call fn0800_23EC (retsize: 2;)
	sp = sp + 0x0004
	SCZO = cond(sp)
	v20 = Mem0[ss:bp - 0x0006:word16]
	sp = sp - 2
	Mem0[ss:sp:word16] = v20
	v21 = Mem0[ss:bp - 0x0008:word16]
	sp = sp - 2
	Mem0[ss:sp:word16] = v21
	call fn0800_22FE (retsize: 2;)
	sp = sp + 0x0004
	SCZO = cond(sp)
	es_di = Mem0[ss:bp - 0x0004:segptr32]
	di = di + 0x0002
	SCZO = cond(di)
	ax = ax ^ ax
	SZO = cond(ax)
	C = false
	cx = 0xFFFF
	// succ:  l0800_196E
l0800_196E:
	branch cx == 0x0000 l0800_1970
	// succ:  l0800_196E_1 l0800_1970
l0800_196E_1:
	SCZO = cond(al - Mem0[es:di:byte])
	di = di + 0x0001
	cx = cx - 0x0001
	branch Test(EQ,Z) l0800_196E
	// succ:  l0800_1970 l0800_196E
l0800_1970:
	cx = ~cx
	ax = ax ^ ax
	SZO = cond(ax)
	C = false
	di = di - cx
	SCZO = cond(di)
	// succ:  l0800_1976
l0800_1976:
	branch cx == 0x0000 l0800_1978
	// succ:  l0800_1976_2 l0800_1978
l0800_1976_2:
	SCZO = cond(al - Mem0[es:di:byte])
	di = di + 0x0001
	cx = cx - 0x0001
	branch Test(EQ,Z) l0800_1976
	// succ:  l0800_1978 l0800_1976
l0800_1978:
	branch Test(EQ,Z) l0800_1981
	// succ:  l0800_197A l0800_1981
l0800_197A:
	di = 0x0001
	ax = ax ^ ax
	SZO = cond(ax)
	C = false
	es = ax
	// succ:  l0800_1981
l0800_1981:
	di = di - 0x0001
	SZO = cond(di)
	ax = es
	es = ax
	SCZO = cond(Mem0[es:di + 0x0001:byte] - 0x00)
	branch Test(NE,Z) l0800_19AD
	// succ:  l0800_198D l0800_19AD
l0800_198D:
	ax = Mem0[ds:0x2E53:word16]
	dx = Mem0[ds:0x2E51:word16]
	dx = dx + 0x0008
	SCZO = cond(dx)
	SCZO = cond(ax - Mem0[ss:bp - 0x0002:word16])
	branch Test(NE,Z) l0800_19A1
	// succ:  l0800_199C l0800_19A1
l0800_199C:
	SCZO = cond(dx - Mem0[ss:bp - 0x0004:word16])
	branch Test(EQ,Z) l0800_19AD
	// succ:  l0800_19A1 l0800_19AD
l0800_19A1:
	v26 = Mem0[ss:bp - 0x0002:word16]
	sp = sp - 2
	Mem0[ss:sp:word16] = v26
	v27 = Mem0[ss:bp - 0x0004:word16]
	sp = sp - 2
	Mem0[ss:sp:word16] = v27
	call fn0800_2201 (retsize: 2;)
	sp = sp + 0x0004
	SCZO = cond(sp)
	// succ:  l0800_19AD
l0800_19AD:
	sp = sp - 2
	Mem0[ss:sp:word16] = ss
	ax = bp - 0x006E
	sp = sp - 2
	Mem0[ss:sp:word16] = ax
	ax = 0x000D
	sp = sp - 2
	Mem0[ss:sp:word16] = ax
	call fn0800_0ABC (retsize: 2;)
	sp = sp + 0x0006
	SCZO = cond(sp)
	// succ:  l0800_19BC
l0800_19BC:
	sp = sp - 2
	Mem0[ss:sp:word16] = ss
	ax = bp - 0x006E
	sp = sp - 2
	Mem0[ss:sp:word16] = ax
	sp = sp - 2
	Mem0[ss:sp:word16] = ss
	ax = bp - 0x0008
	sp = sp - 2
	Mem0[ss:sp:word16] = ax
	sp = sp - 2
	Mem0[ss:sp:word16] = ss
	ax = bp - 0x0004
	sp = sp - 2
	Mem0[ss:sp:word16] = ax
	call fn0800_29C5 (retsize: 2;)
	sp = sp + 0x000C
	SCZO = cond(sp)
	ax = ax | ax
	SZO = cond(ax)
	C = false
	branch Test(EQ,Z) l0800_19D8
	// succ:  l0800_19D5 l0800_19D8
l0800_19D5:
	goto l0800_1940
	// succ:  l0800_1940
l0800_19D8:
	call fn0800_1E5E (retsize: 2;)
	v16 = Mem0[ds:0x29D1:word16]
	sp = sp - 2
	Mem0[ss:sp:word16] = v16
	v17 = Mem0[ds:0x29CF:word16]
	sp = sp - 2
	Mem0[ss:sp:word16] = v17
	call fn0800_A614 (retsize: 2;)
	sp = sp + 0x0004
	SCZO = cond(sp)
	di = Mem0[ss:sp:word16]
	sp = sp + 2
	sp = bp
	bp = Mem0[ss:sp:word16]
	sp = sp + 2
	return
	// succ:  fn0800_18D9_exit
fn0800_18D9_exit:


// fn0800_19EE
// Return size: 2
define fn0800_19EE
fn0800_19EE_entry:
	// succ:  l0800_19EE
l0800_19EE:
	sp = fp
	Top = 0
	sp = sp - 2
	Mem0[ss:sp:word16] = bp
	bp = sp
	sp = sp - 0x0072
	SCZO = cond(sp)
	sp = sp - 2
	Mem0[ss:sp:word16] = si
	sp = sp - 2
	Mem0[ss:sp:word16] = di
	sp = sp - 2
	Mem0[ss:sp:word16] = ds
	ax = 0x4348
	sp = sp - 2
	Mem0[ss:sp:word16] = ax
	bx = Mem0[ds:0x2A25:word16]
	bx = bx << 0x0001
	SCZO = cond(bx)
	bx = bx << 0x0001
	SCZO = cond(bx)
	v11 = Mem0[ds:bx + 0x050B:word16]
	sp = sp - 2
	Mem0[ss:sp:word16] = v11
	v12 = Mem0[ds:bx + 0x0509:word16]
	sp = sp - 2
	Mem0[ss:sp:word16] = v12
	sp = sp - 2
	Mem0[ss:sp:word16] = ds
	ax = 0x0986
	sp = sp - 2
	Mem0[ss:sp:word16] = ax
	call fn0800_B2EF (retsize: 2;)
	sp = sp + 0x000C
	SCZO = cond(sp)
	sp = sp - 2
	Mem0[ss:sp:word16] = ds
	ax = 0x0997
	sp = sp - 2
	Mem0[ss:sp:word16] = ax
	sp = sp - 2
	Mem0[ss:sp:word16] = ds
	ax = 0x4348
	sp = sp - 2
	Mem0[ss:sp:word16] = ax
	call fn0800_AA7E (retsize: 2;)
	sp = sp + 0x0008
	SCZO = cond(sp)
	Mem0[ds:0x29D1:word16] = dx
	Mem0[ds:0x29CF:word16] = ax
	ax = ax | dx
	SZO = cond(ax)
	C = false
	branch Test(NE,Z) l0800_1A40
	// succ:  l0800_1A31 l0800_1A40
l0800_1A31:
	sp = sp - 2
	Mem0[ss:sp:word16] = ds
	ax = 0x4348
	sp = sp - 2
	Mem0[ss:sp:word16] = ax
	ax = 0x0007
	sp = sp - 2
	Mem0[ss:sp:word16] = ax
	call fn0800_0D24 (retsize: 2;)
	sp = sp + 0x0006
	SCZO = cond(sp)
	// succ:  l0800_1A40
l0800_1A40:
	ax = Mem0[ds:0x2A27:word16]
	SCZO = cond(ax - Mem0[ds:0x269A:word16])
	branch Test(NE,Z) l0800_1A7D
	// succ:  l0800_1A49 l0800_1A7D
l0800_1A49:
	ax = Mem0[ds:0x0984:word16]
	dx = Mem0[ds:0x0982:word16]
	Mem0[ss:bp - 0x000A:word16] = ax
	Mem0[ss:bp - 0x000C:word16] = dx
	ax = Mem0[ss:bp - 0x000C:word16]
	dx = 0x0004
	es_bx = Mem0[ds:0x269C:segptr32]
	ax = bp - 0x000C
	Mem0[es:bx + 0x0006:word16] = ss
	Mem0[es:bx + 0x0004:word16] = ax
	Mem0[ds:0x2A27:word16] = 0x0001
	Mem0[ds:0x269A:word16] = 0x0002
	Mem0[ds:0x2A1B:word16] = 0x0001
	// succ:  l0800_1A7D
l0800_1A7D:
	ax = ax ^ ax
	SZO = cond(ax)
	C = false
	sp = sp - 2
	Mem0[ss:sp:word16] = ax
	ax = 0x0001
	sp = sp - 2
	Mem0[ss:sp:word16] = ax
	call fn0800_2DBF (retsize: 2;)
	sp = sp + 0x0004
	SCZO = cond(sp)
	ax = 0x0001
	sp = sp - 2
	Mem0[ss:sp:word16] = ax
	call fn0800_1CF6 (retsize: 2;)
	sp = sp + 0x0002
	SCZO = cond(sp)
	SCZO = cond(Mem0[ds:0x2A25:word16] - 0x0007)
	branch Test(EQ,Z) l0800_1A9E
	// succ:  l0800_1A9B l0800_1A9E
l0800_1A9B:
	goto l0800_1CB4
	// succ:  l0800_1CB4
l0800_1A9E:
	sp = sp - 2
	Mem0[ss:sp:word16] = ds
	ax = 0x099B
	sp = sp - 2
	Mem0[ss:sp:word16] = ax
	sp = sp - 2
	Mem0[ss:sp:word16] = ds
	ax = 0x44DC
	sp = sp - 2
	Mem0[ss:sp:word16] = ax
	call fn0800_37BE (retsize: 2;)
	sp = sp + 0x0008
	SCZO = cond(sp)
	goto l0800_1CB4
	// succ:  l0800_1CB4
l0800_1AB1:
	sp = sp - 2
	Mem0[ss:sp:word16] = ss
	ax = bp - 0x0072
	sp = sp - 2
	Mem0[ss:sp:word16] = ax
	call fn0800_0C93 (retsize: 2;)
	sp = sp + 0x0004
	SCZO = cond(sp)
	v21 = Mem0[ss:bp - 0x0006:word16]
	sp = sp - 2
	Mem0[ss:sp:word16] = v21
	v22 = Mem0[ss:bp - 0x0008:word16]
	sp = sp - 2
	Mem0[ss:sp:word16] = v22
	call fn0800_24FE (retsize: 2;)
	sp = sp + 0x0004
	SCZO = cond(sp)
	ax = ax ^ ax
	SZO = cond(ax)
	C = false
	sp = sp - 2
	Mem0[ss:sp:word16] = ax
	es_di = Mem0[ss:bp - 0x0008:segptr32]
	cx = 0xFFFF
	// succ:  l0800_1AD1
l0800_1AD1:
	branch cx == 0x0000 l0800_1AD3
	// succ:  l0800_1AD1_1 l0800_1AD3
l0800_1AD1_1:
	SCZO = cond(al - Mem0[es:di:byte])
	di = di + 0x0001
	cx = cx - 0x0001
	branch Test(EQ,Z) l0800_1AD1
	// succ:  l0800_1AD3 l0800_1AD1
l0800_1AD3:
	cx = ~cx
	ax = ax ^ ax
	SZO = cond(ax)
	C = false
	di = di - cx
	SCZO = cond(di)
	// succ:  l0800_1AD9
l0800_1AD9:
	branch cx == 0x0000 l0800_1ADB
	// succ:  l0800_1AD9_2 l0800_1ADB
l0800_1AD9_2:
	SCZO = cond(al - Mem0[es:di:byte])
	di = di + 0x0001
	cx = cx - 0x0001
	branch Test(EQ,Z) l0800_1AD9
	// succ:  l0800_1ADB l0800_1AD9
l0800_1ADB:
	branch Test(EQ,Z) l0800_1AE4
	// succ:  l0800_1ADD l0800_1AE4
l0800_1ADD:
	di = 0x0001
	ax = ax ^ ax
	SZO = cond(ax)
	C = false
	es = ax
	// succ:  l0800_1AE4
l0800_1AE4:
	di = di - 0x0001
	SZO = cond(di)
	ax = es
	es = ax
	al = Mem0[es:di + 0x0001:byte]
	ax = (int16) al
	cl = 0x08
	ax = ax << cl
	SCZO = cond(ax)
	es_di = Mem0[ss:bp - 0x0008:segptr32]
	sp = sp - 2
	Mem0[ss:sp:word16] = ax
	ax = ax ^ ax
	SZO = cond(ax)
	C = false
	cx = 0xFFFF
	// succ:  l0800_1AFB
l0800_1AFB:
	branch cx == 0x0000 l0800_1AFD
	// succ:  l0800_1AFB_1 l0800_1AFD
l0800_1AFB_1:
	SCZO = cond(al - Mem0[es:di:byte])
	di = di + 0x0001
	cx = cx - 0x0001
	branch Test(EQ,Z) l0800_1AFB
	// succ:  l0800_1AFD l0800_1AFB
l0800_1AFD:
	cx = ~cx
	ax = ax ^ ax
	SZO = cond(ax)
	C = false
	di = di - cx
	SCZO = cond(di)
	// succ:  l0800_1B03
l0800_1B03:
	branch cx == 0x0000 l0800_1B05
	// succ:  l0800_1B03_2 l0800_1B05
l0800_1B03_2:
	SCZO = cond(al - Mem0[es:di:byte])
	di = di + 0x0001
	cx = cx - 0x0001
	branch Test(EQ,Z) l0800_1B03
	// succ:  l0800_1B05 l0800_1B03
l0800_1B05:
	branch Test(EQ,Z) l0800_1B0E
	// succ:  l0800_1B07 l0800_1B0E
l0800_1B07:
	di = 0x0001
	ax = ax ^ ax
	SZO = cond(ax)
	C = false
	es = ax
	// succ:  l0800_1B0E
l0800_1B0E:
	di = di - 0x0001
	SZO = cond(di)
	ax = es
	es = ax
	al = Mem0[es:di + 0x0002:byte]
	ah = 0x00
	dx = Mem0[ss:sp:word16]
	sp = sp + 2
	dx = dx + ax
	SCZO = cond(dx)
	ax = ax ^ ax
	SZO = cond(ax)
	C = false
	es_di = Mem0[ss:bp - 0x0008:segptr32]
	sp = sp - 2
	Mem0[ss:sp:word16] = dx
	sp = sp - 2
	Mem0[ss:sp:word16] = ax
	cx = 0xFFFF
	// succ:  l0800_1B26
l0800_1B26:
	branch cx == 0x0000 l0800_1B28
	// succ:  l0800_1B26_1 l0800_1B28
l0800_1B26_1:
	SCZO = cond(al - Mem0[es:di:byte])
	di = di + 0x0001
	cx = cx - 0x0001
	branch Test(EQ,Z) l0800_1B26
	// succ:  l0800_1B28 l0800_1B26
l0800_1B28:
	cx = ~cx
	ax = ax ^ ax
	SZO = cond(ax)
	C = false
	di = di - cx
	SCZO = cond(di)
	// succ:  l0800_1B2E
l0800_1B2E:
	branch cx == 0x0000 l0800_1B30
	// succ:  l0800_1B2E_2 l0800_1B30
l0800_1B2E_2:
	SCZO = cond(al - Mem0[es:di:byte])
	di = di + 0x0001
	cx = cx - 0x0001
	branch Test(EQ,Z) l0800_1B2E
	// succ:  l0800_1B30 l0800_1B2E
l0800_1B30:
	branch Test(EQ,Z) l0800_1B39
	// succ:  l0800_1B32 l0800_1B39
l0800_1B32:
	di = 0x0001
	ax = ax ^ ax
	SZO = cond(ax)
	C = false
	es = ax
	// succ:  l0800_1B39
l0800_1B39:
	di = di - 0x0001
	SZO = cond(di)
	ax = es
	es = ax
	al = Mem0[es:di + 0x0003:byte]
	ax = (int16) al
	cl = 0x08
	ax = ax << cl
	SCZO = cond(ax)
	es_di = Mem0[ss:bp - 0x0008:segptr32]
	sp = sp - 2
	Mem0[ss:sp:word16] = ax
	ax = ax ^ ax
	SZO = cond(ax)
	C = false
	cx = 0xFFFF
	// succ:  l0800_1B50
l0800_1B50:
	branch cx == 0x0000 l0800_1B52
	// succ:  l0800_1B50_1 l0800_1B52
l0800_1B50_1:
	SCZO = cond(al - Mem0[es:di:byte])
	di = di + 0x0001
	cx = cx - 0x0001
	branch Test(EQ,Z) l0800_1B50
	// succ:  l0800_1B52 l0800_1B50
l0800_1B52:
	cx = ~cx
	ax = ax ^ ax
	SZO = cond(ax)
	C = false
	di = di - cx
	SCZO = cond(di)
	// succ:  l0800_1B58
l0800_1B58:
	branch cx == 0x0000 l0800_1B5A
	// succ:  l0800_1B58_2 l0800_1B5A
l0800_1B58_2:
	SCZO = cond(al - Mem0[es:di:byte])
	di = di + 0x0001
	cx = cx - 0x0001
	branch Test(EQ,Z) l0800_1B58
	// succ:  l0800_1B5A l0800_1B58
l0800_1B5A:
	branch Test(EQ,Z) l0800_1B63
	// succ:  l0800_1B5C l0800_1B63
l0800_1B5C:
	di = 0x0001
	ax = ax ^ ax
	SZO = cond(ax)
	C = false
	es = ax
	// succ:  l0800_1B63
l0800_1B63:
	di = di - 0x0001
	SZO = cond(di)
	ax = es
	es = ax
	al = Mem0[es:di + 0x0004:byte]
	ah = 0x00
	dx = Mem0[ss:sp:word16]
	sp = sp + 2
	dx = dx + ax
	SCZO = cond(dx)
	ax = Mem0[ss:sp:word16]
	sp = sp + 2
	ax = ax + dx
	SCZO = cond(ax)
	dx = Mem0[ss:sp:word16]
	sp = sp + 2
	dx = dx + 0x00 + C
	SCZO = cond(dx)
	sp = sp - 2
	Mem0[ss:sp:word16] = dx
	sp = sp - 2
	Mem0[ss:sp:word16] = ax
	v28 = Mem0[ds:0x29D1:word16]
	sp = sp - 2
	Mem0[ss:sp:word16] = v28
	v29 = Mem0[ds:0x29CF:word16]
	sp = sp - 2
	Mem0[ss:sp:word16] = v29
	call fn0800_ACB3 (retsize: 2;)
	sp = sp + 0x000A
	SCZO = cond(sp)
	SCZO = cond(Mem0[ds:0x2A25:word16] - 0x0007)
	branch Test(NE,Z) l0800_1B92
	// succ:  l0800_1B8F l0800_1B92
l0800_1B8F:
	goto l0800_1C61
	// succ:  l0800_1C61
l0800_1B92:
	sp = sp - 2
	Mem0[ss:sp:word16] = ds
	es = Mem0[ss:sp:selector]
	sp = sp + 2
	di = 0x44DC
	sp = sp - 2
	Mem0[ss:sp:word16] = es
	sp = sp - 2
	Mem0[ss:sp:word16] = di
	di = 0x427E
	ax = ax ^ ax
	SZO = cond(ax)
	C = false
	cx = 0xFFFF
	// succ:  l0800_1BA1
l0800_1BA1:
	branch cx == 0x0000 l0800_1BA3
	// succ:  l0800_1BA1_1 l0800_1BA3
l0800_1BA1_1:
	SCZO = cond(al - Mem0[es:di:byte])
	di = di + 0x0001
	cx = cx - 0x0001
	branch Test(EQ,Z) l0800_1BA1
	// succ:  l0800_1BA3 l0800_1BA1
l0800_1BA3:
	cx = ~cx
	di = di - cx
	SCZO = cond(di)
	cx = cx >>u 0x0001
	SCZO = cond(cx)
	si = di
	di = Mem0[ss:sp:word16]
	sp = sp + 2
	ax = es
	es = Mem0[ss:sp:selector]
	sp = sp + 2
	sp = sp - 2
	Mem0[ss:sp:word16] = ds
	ds = ax
	// succ:  l0800_1BB2
l0800_1BB2:
	branch cx == 0x0000 l0800_1BB4
	// succ:  l0800_1BB2_2 l0800_1BB4
l0800_1BB2_2:
	v32 = Mem0[ds:si:word16]
	Mem0[es:di:word16] = v32
	si = si + 0x0002
	di = di + 0x0002
	cx = cx - 0x0001
	goto l0800_1BB2
	// succ:  l0800_1BB2
l0800_1BB4:
	cx = cx + cx + C
	SCZO = cond(cx)
	// succ:  l0800_1BB6
l0800_1BB6:
	branch cx == 0x0000 l0800_1BB8
	// succ:  l0800_1BB6_1 l0800_1BB8
l0800_1BB6_1:
	v33 = Mem0[ds:si:byte]
	Mem0[es:di:byte] = v33
	si = si + 0x0001
	di = di + 0x0001
	cx = cx - 0x0001
	goto l0800_1BB6
	// succ:  l0800_1BB6
l0800_1BB8:
	ds = Mem0[ss:sp:selector]
	sp = sp + 2
	SCZO = cond(Mem0[ds:0x2A25:word16] - 0x0008)
	branch Test(NE,Z) l0800_1C29
	// succ:  l0800_1BC0 l0800_1C29
l0800_1BC0:
	SCZO = cond(Mem0[ds:0x427E:byte] - 0x00)
	branch Test(EQ,Z) l0800_1BFC
	// succ:  l0800_1BC7 l0800_1BFC
l0800_1BC7:
	SCZO = cond(Mem0[ss:bp - 0x0072:byte] - 0x5C)
	branch Test(NE,Z) l0800_1BFC
	// succ:  l0800_1BCD l0800_1BFC
l0800_1BCD:
	sp = sp - 2
	Mem0[ss:sp:word16] = ss
	ax = bp - 0x0071
	sp = sp - 2
	Mem0[ss:sp:word16] = ax
	sp = sp - 2
	Mem0[ss:sp:word16] = ds
	es = Mem0[ss:sp:selector]
	sp = sp + 2
	di = 0x44DC
	ax = ax ^ ax
	SZO = cond(ax)
	C = false
	cx = 0xFFFF
	// succ:  l0800_1BDC
l0800_1BDC:
	branch cx == 0x0000 l0800_1BDE
	// succ:  l0800_1BDC_1 l0800_1BDE
l0800_1BDC_1:
	SCZO = cond(al - Mem0[es:di:byte])
	di = di + 0x0001
	cx = cx - 0x0001
	branch Test(EQ,Z) l0800_1BDC
	// succ:  l0800_1BDE l0800_1BDC
l0800_1BDE:
	cx = ~cx
	ax = ax ^ ax
	SZO = cond(ax)
	C = false
	di = di - cx
	SCZO = cond(di)
	// succ:  l0800_1BE4
l0800_1BE4:
	branch cx == 0x0000 l0800_1BE6
	// succ:  l0800_1BE4_2 l0800_1BE6
l0800_1BE4_2:
	SCZO = cond(al - Mem0[es:di:byte])
	di = di + 0x0001
	cx = cx - 0x0001
	branch Test(EQ,Z) l0800_1BE4
	// succ:  l0800_1BE6 l0800_1BE4
l0800_1BE6:
	branch Test(EQ,Z) l0800_1BEF
	// succ:  l0800_1BE8 l0800_1BEF
l0800_1BE8:
	di = 0x0001
	ax = ax ^ ax
	SZO = cond(ax)
	C = false
	es = ax
	// succ:  l0800_1BEF
l0800_1BEF:
	di = di - 0x0001
	SZO = cond(di)
	ax = es
	sp = sp - 2
	Mem0[ss:sp:word16] = ax
	sp = sp - 2
	Mem0[ss:sp:word16] = di
	call fn0800_3509 (retsize: 2;)
	sp = sp + 0x0008
	SCZO = cond(sp)
	goto l0800_1C29
	// succ:  l0800_1C29
l0800_1BFC:
	sp = sp - 2
	Mem0[ss:sp:word16] = ss
	ax = bp - 0x0072
	sp = sp - 2
	Mem0[ss:sp:word16] = ax
	sp = sp - 2
	Mem0[ss:sp:word16] = ds
	es = Mem0[ss:sp:selector]
	sp = sp + 2
	di = 0x44DC
	ax = ax ^ ax
	SZO = cond(ax)
	C = false
	cx = 0xFFFF
	// succ:  l0800_1C0B
l0800_1C0B:
	branch cx == 0x0000 l0800_1C0D
	// succ:  l0800_1C0B_1 l0800_1C0D
l0800_1C0B_1:
	SCZO = cond(al - Mem0[es:di:byte])
	di = di + 0x0001
	cx = cx - 0x0001
	branch Test(EQ,Z) l0800_1C0B
	// succ:  l0800_1C0D l0800_1C0B
l0800_1C0D:
	cx = ~cx
	ax = ax ^ ax
	SZO = cond(ax)
	C = false
	di = di - cx
	SCZO = cond(di)
	// succ:  l0800_1C13
l0800_1C13:
	branch cx == 0x0000 l0800_1C15
	// succ:  l0800_1C13_2 l0800_1C15
l0800_1C13_2:
	SCZO = cond(al - Mem0[es:di:byte])
	di = di + 0x0001
	cx = cx - 0x0001
	branch Test(EQ,Z) l0800_1C13
	// succ:  l0800_1C15 l0800_1C13
l0800_1C15:
	branch Test(EQ,Z) l0800_1C1E
	// succ:  l0800_1C17 l0800_1C1E
l0800_1C17:
	di = 0x0001
	ax = ax ^ ax
	SZO = cond(ax)
	C = false
	es = ax
	// succ:  l0800_1C1E
l0800_1C1E:
	di = di - 0x0001
	SZO = cond(di)
	ax = es
	sp = sp - 2
	Mem0[ss:sp:word16] = ax
	sp = sp - 2
	Mem0[ss:sp:word16] = di
	call fn0800_3509 (retsize: 2;)
	sp = sp + 0x0008
	SCZO = cond(sp)
	// succ:  l0800_1C29
l0800_1C29:
	sp = sp - 2
	Mem0[ss:sp:word16] = ds
	ax = 0x44DC
	sp = sp - 2
	Mem0[ss:sp:word16] = ax
	call fn0800_3678 (retsize: 2;)
	sp = sp + 0x0004
	SCZO = cond(sp)
	sp = sp - 2
	Mem0[ss:sp:word16] = ss
	ax = bp - 0x0072
	sp = sp - 2
	Mem0[ss:sp:word16] = ax
	sp = sp - 2
	Mem0[ss:sp:word16] = ds
	es = Mem0[ss:sp:selector]
	sp = sp + 2
	di = 0x44DC
	ax = ax ^ ax
	SZO = cond(ax)
	C = false
	cx = 0xFFFF
	// succ:  l0800_1C43
l0800_1C43:
	branch cx == 0x0000 l0800_1C45
	// succ:  l0800_1C43_1 l0800_1C45
l0800_1C43_1:
	SCZO = cond(al - Mem0[es:di:byte])
	di = di + 0x0001
	cx = cx - 0x0001
	branch Test(EQ,Z) l0800_1C43
	// succ:  l0800_1C45 l0800_1C43
l0800_1C45:
	cx = ~cx
	ax = ax ^ ax
	SZO = cond(ax)
	C = false
	di = di - cx
	SCZO = cond(di)
	// succ:  l0800_1C4B
l0800_1C4B:
	branch cx == 0x0000 l0800_1C4D
	// succ:  l0800_1C4B_2 l0800_1C4D
l0800_1C4B_2:
	SCZO = cond(al - Mem0[es:di:byte])
	di = di + 0x0001
	cx = cx - 0x0001
	branch Test(EQ,Z) l0800_1C4B
	// succ:  l0800_1C4D l0800_1C4B
l0800_1C4D:
	branch Test(EQ,Z) l0800_1C56
	// succ:  l0800_1C4F l0800_1C56
l0800_1C4F:
	di = 0x0001
	ax = ax ^ ax
	SZO = cond(ax)
	C = false
	es = ax
	// succ:  l0800_1C56
l0800_1C56:
	di = di - 0x0001
	SZO = cond(di)
	ax = es
	sp = sp - 2
	Mem0[ss:sp:word16] = ax
	sp = sp - 2
	Mem0[ss:sp:word16] = di
	call fn0800_35A3 (retsize: 2;)
	sp = sp + 0x0008
	SCZO = cond(sp)
	// succ:  l0800_1C61
l0800_1C61:
	sp = sp - 2
	Mem0[ss:sp:word16] = ds
	ax = 0x09A8
	sp = sp - 2
	Mem0[ss:sp:word16] = ax
	sp = sp - 2
	Mem0[ss:sp:word16] = ds
	ax = 0x44DC
	sp = sp - 2
	Mem0[ss:sp:word16] = ax
	call fn0800_4234 (retsize: 2;)
	sp = sp + 0x0008
	SCZO = cond(sp)
	Mem0[ds:0x29E1:word16] = dx
	Mem0[ds:0x29DF:word16] = ax
	ax = Mem0[ds:0x29D1:word16]
	dx = Mem0[ds:0x29CF:word16]
	Mem0[ds:0x29E5:word16] = ax
	Mem0[ds:0x29E3:word16] = dx
	call fn0800_5374 (retsize: 2;)
	si = ax
	v30 = Mem0[ds:0x29E1:word16]
	sp = sp - 2
	Mem0[ss:sp:word16] = v30
	v31 = Mem0[ds:0x29DF:word16]
	sp = sp - 2
	Mem0[ss:sp:word16] = v31
	call fn0800_A614 (retsize: 2;)
	sp = sp + 0x0004
	SCZO = cond(sp)
	si = si | si
	SZO = cond(si)
	C = false
	branch Test(EQ,Z) l0800_1CA8
	// succ:  l0800_1C9D l0800_1CA8
l0800_1C9D:
	sp = sp - 2
	Mem0[ss:sp:word16] = ds
	ax = 0x44DC
	sp = sp - 2
	Mem0[ss:sp:word16] = ax
	call fn0800_8F7F (retsize: 2;)
	sp = sp + 0x0004
	SCZO = cond(sp)
	// succ:  l0800_1CA8
l0800_1CA8:
	sp = sp - 2
	Mem0[ss:sp:word16] = ss
	ax = bp - 0x0072
	sp = sp - 2
	Mem0[ss:sp:word16] = ax
	sp = sp - 2
	Mem0[ss:sp:word16] = si
	call fn0800_0ABC (retsize: 2;)
	sp = sp + 0x0006
	SCZO = cond(sp)
	// succ:  l0800_1CB4
l0800_1CB4:
	sp = sp - 2
	Mem0[ss:sp:word16] = ss
	ax = bp - 0x0072
	sp = sp - 2
	Mem0[ss:sp:word16] = ax
	sp = sp - 2
	Mem0[ss:sp:word16] = ss
	ax = bp - 0x0008
	sp = sp - 2
	Mem0[ss:sp:word16] = ax
	sp = sp - 2
	Mem0[ss:sp:word16] = ss
	ax = bp - 0x0004
	sp = sp - 2
	Mem0[ss:sp:word16] = ax
	call fn0800_29C5 (retsize: 2;)
	sp = sp + 0x000C
	SCZO = cond(sp)
	ax = ax | ax
	SZO = cond(ax)
	C = false
	branch Test(EQ,Z) l0800_1CD0
	// succ:  l0800_1CCD l0800_1CD0
l0800_1CCD:
	goto l0800_1AB1
	// succ:  l0800_1AB1
l0800_1CD0:
	v19 = Mem0[ds:0x29D1:word16]
	sp = sp - 2
	Mem0[ss:sp:word16] = v19
	v20 = Mem0[ds:0x29CF:word16]
	sp = sp - 2
	Mem0[ss:sp:word16] = v20
	call fn0800_A614 (retsize: 2;)
	sp = sp + 0x0004
	SCZO = cond(sp)
	SCZO = cond(Mem0[ds:0x2A25:word16] - 0x0007)
	branch Test(NE,Z) l0800_1CF0
	// succ:  l0800_1CE5 l0800_1CF0
l0800_1CE5:
	sp = sp - 2
	Mem0[ss:sp:word16] = ds
	ax = 0x44DC
	sp = sp - 2
	Mem0[ss:sp:word16] = ax
	call fn0800_8F7F (retsize: 2;)
	sp = sp + 0x0004
	SCZO = cond(sp)
	// succ:  l0800_1CF0
l0800_1CF0:
	di = Mem0[ss:sp:word16]
	sp = sp + 2
	si = Mem0[ss:sp:word16]
	sp = sp + 2
	sp = bp
	bp = Mem0[ss:sp:word16]
	sp = sp + 2
	return
	// succ:  fn0800_19EE_exit
fn0800_19EE_exit:


// fn0800_1CF6
// Return size: 2
define fn0800_1CF6
fn0800_1CF6_entry:
	// succ:  l0800_1CF6
l0800_1CF6:
	sp = fp
	Top = 0
	sp = sp - 2
	Mem0[ss:sp:word16] = bp
	bp = sp
	sp = sp - 0x0002
	SCZO = cond(sp)
	sp = sp - 2
	Mem0[ss:sp:word16] = si
	ax = ax ^ ax
	SZO = cond(ax)
	C = false
	dx = dx ^ dx
	SZO = cond(dx)
	C = false
	Mem0[ds:0x45A8:word16] = ax
	Mem0[ds:0x45A6:word16] = dx
	Mem0[ds:0x29ED:word16] = ax
	Mem0[ds:0x29EB:word16] = dx
	ax = 0x0002
	sp = sp - 2
	Mem0[ss:sp:word16] = ax
	ax = 0xFFFF
	dx = 0xFFFC
	sp = sp - 2
	Mem0[ss:sp:word16] = ax
	sp = sp - 2
	Mem0[ss:sp:word16] = dx
	v12 = Mem0[ds:0x29D1:word16]
	sp = sp - 2
	Mem0[ss:sp:word16] = v12
	v13 = Mem0[ds:0x29CF:word16]
	sp = sp - 2
	Mem0[ss:sp:word16] = v13
	call fn0800_ACB3 (retsize: 2;)
	sp = sp + 0x000A
	SCZO = cond(sp)
	v14 = Mem0[ds:0x29D1:word16]
	sp = sp - 2
	Mem0[ss:sp:word16] = v14
	v15 = Mem0[ds:0x29CF:word16]
	sp = sp - 2
	Mem0[ss:sp:word16] = v15
	call fn0800_3E5D (retsize: 2;)
	sp = sp + 0x0004
	SCZO = cond(sp)
	Mem0[ds:0x29ED:word16] = dx
	Mem0[ds:0x29EB:word16] = ax
	v16 = Mem0[ds:0x29D1:word16]
	sp = sp - 2
	Mem0[ss:sp:word16] = v16
	v17 = Mem0[ds:0x29CF:word16]
	sp = sp - 2
	Mem0[ss:sp:word16] = v17
	call fn0800_4194 (retsize: 2;)
	sp = sp + 0x0004
	SCZO = cond(sp)
	SCZO = cond(dx - Mem0[ds:0x29ED:word16])
	branch Test(UGT,CZ) l0800_1D69
	// succ:  l0800_1D52 l0800_1D69
l0800_1D52:
	branch Test(ULT,C) l0800_1D5A
	// succ:  l0800_1D54 l0800_1D5A
l0800_1D54:
	SCZO = cond(ax - Mem0[ds:0x29EB:word16])
	branch Test(UGE,C) l0800_1D69
	// succ:  l0800_1D5A l0800_1D69
l0800_1D5A:
	sp = sp - 2
	Mem0[ss:sp:word16] = ds
	ax = 0x4348
	sp = sp - 2
	Mem0[ss:sp:word16] = ax
	ax = 0x000B
	sp = sp - 2
	Mem0[ss:sp:word16] = ax
	call fn0800_0D24 (retsize: 2;)
	sp = sp + 0x0006
	SCZO = cond(sp)
	// succ:  l0800_1D69
l0800_1D69:
	ax = ax ^ ax
	SZO = cond(ax)
	C = false
	sp = sp - 2
	Mem0[ss:sp:word16] = ax
	v19 = Mem0[ds:0x29ED:word16]
	sp = sp - 2
	Mem0[ss:sp:word16] = v19
	v20 = Mem0[ds:0x29EB:word16]
	sp = sp - 2
	Mem0[ss:sp:word16] = v20
	v21 = Mem0[ds:0x29D1:word16]
	sp = sp - 2
	Mem0[ss:sp:word16] = v21
	v22 = Mem0[ds:0x29CF:word16]
	sp = sp - 2
	Mem0[ss:sp:word16] = v22
	call fn0800_ACB3 (retsize: 2;)
	sp = sp + 0x000A
	SCZO = cond(sp)
	v23 = Mem0[ds:0x29D1:word16]
	sp = sp - 2
	Mem0[ss:sp:word16] = v23
	v24 = Mem0[ds:0x29CF:word16]
	sp = sp - 2
	Mem0[ss:sp:word16] = v24
	call fn0800_3E5D (retsize: 2;)
	sp = sp + 0x0004
	SCZO = cond(sp)
	SCZO = cond(dx - 0x524E)
	branch Test(NE,Z) l0800_1D9B
	// succ:  l0800_1D96 l0800_1D9B
l0800_1D96:
	SCZO = cond(ax - 0x4341)
	branch Test(EQ,Z) l0800_1DAA
	// succ:  l0800_1D9B l0800_1DAA
l0800_1D9B:
	sp = sp - 2
	Mem0[ss:sp:word16] = ds
	ax = 0x4348
	sp = sp - 2
	Mem0[ss:sp:word16] = ax
	ax = 0x000B
	sp = sp - 2
	Mem0[ss:sp:word16] = ax
	call fn0800_0D24 (retsize: 2;)
	sp = sp + 0x0006
	SCZO = cond(sp)
	// succ:  l0800_1DAA
l0800_1DAA:
	v26 = Mem0[ds:0x29D1:word16]
	sp = sp - 2
	Mem0[ss:sp:word16] = v26
	v27 = Mem0[ds:0x29CF:word16]
	sp = sp - 2
	Mem0[ss:sp:word16] = v27
	call fn0800_3E27 (retsize: 2;)
	sp = sp + 0x0004
	SCZO = cond(sp)
	si = ax
	v28 = Mem0[ds:0x29D1:word16]
	sp = sp - 2
	Mem0[ss:sp:word16] = v28
	v29 = Mem0[ds:0x29CF:word16]
	sp = sp - 2
	Mem0[ss:sp:word16] = v29
	call fn0800_3E27 (retsize: 2;)
	sp = sp + 0x0004
	SCZO = cond(sp)
	Mem0[ss:bp - 0x0002:word16] = ax
	SCZO = cond(Mem0[ss:bp + 0x0004:word16] - 0x0000)
	branch Test(EQ,Z) l0800_1DE4
	// succ:  l0800_1DD1 l0800_1DE4
l0800_1DD1:
	ax = ax ^ ax
	SZO = cond(ax)
	C = false
	sp = sp - 2
	Mem0[ss:sp:word16] = ax
	sp = sp - 2
	Mem0[ss:sp:word16] = si
	call fn0800_4311 (retsize: 2;)
	sp = sp + 0x0004
	SCZO = cond(sp)
	Mem0[ds:0x2E53:word16] = dx
	Mem0[ds:0x2E51:word16] = ax
	goto l0800_1DF8
	// succ:  l0800_1DF8
l0800_1DE4:
	ax = ax ^ ax
	SZO = cond(ax)
	C = false
	dx = 0xFFF0
	sp = sp - 2
	Mem0[ss:sp:word16] = ax
	sp = sp - 2
	Mem0[ss:sp:word16] = dx
	call fn0800_4311 (retsize: 2;)
	sp = sp + 0x0004
	SCZO = cond(sp)
	Mem0[ds:0x2E53:word16] = dx
	Mem0[ds:0x2E51:word16] = ax
	// succ:  l0800_1DF8
l0800_1DF8:
	ax = ax ^ ax
	SZO = cond(ax)
	C = false
	sp = sp - 2
	Mem0[ss:sp:word16] = ax
	v30 = Mem0[ds:0x29ED:word16]
	sp = sp - 2
	Mem0[ss:sp:word16] = v30
	v31 = Mem0[ds:0x29EB:word16]
	sp = sp - 2
	Mem0[ss:sp:word16] = v31
	v32 = Mem0[ds:0x29D1:word16]
	sp = sp - 2
	Mem0[ss:sp:word16] = v32
	v33 = Mem0[ds:0x29CF:word16]
	sp = sp - 2
	Mem0[ss:sp:word16] = v33
	call fn0800_ACB3 (retsize: 2;)
	sp = sp + 0x000A
	SCZO = cond(sp)
	v34 = Mem0[ds:0x29D1:word16]
	sp = sp - 2
	Mem0[ss:sp:word16] = v34
	v35 = Mem0[ds:0x29CF:word16]
	sp = sp - 2
	Mem0[ss:sp:word16] = v35
	ax = ax ^ ax
	SZO = cond(ax)
	C = false
	sp = sp - 2
	Mem0[ss:sp:word16] = ax
	sp = sp - 2
	Mem0[ss:sp:word16] = si
	v36 = Mem0[ds:0x2E53:word16]
	sp = sp - 2
	Mem0[ss:sp:word16] = v36
	v37 = Mem0[ds:0x2E51:word16]
	sp = sp - 2
	Mem0[ss:sp:word16] = v37
	call fn0800_4110 (retsize: 2;)
	sp = sp + 0x000C
	SCZO = cond(sp)
	ax = ax ^ ax
	SZO = cond(ax)
	C = false
	sp = sp - 2
	Mem0[ss:sp:word16] = ax
	ax = si
	ax = ax - 0x0008
	SCZO = cond(ax)
	sp = sp - 2
	Mem0[ss:sp:word16] = ax
	ax = Mem0[ds:0x2E51:word16]
	ax = ax + 0x0008
	SCZO = cond(ax)
	v38 = Mem0[ds:0x2E53:word16]
	sp = sp - 2
	Mem0[ss:sp:word16] = v38
	sp = sp - 2
	Mem0[ss:sp:word16] = ax
	call fn0800_2CCF (retsize: 2;)
	sp = sp + 0x0008
	SCZO = cond(sp)
	SCZO = cond(ax - Mem0[ss:bp - 0x0002:word16])
	branch Test(EQ,Z) l0800_1E59
	// succ:  l0800_1E4A l0800_1E59
l0800_1E4A:
	sp = sp - 2
	Mem0[ss:sp:word16] = ds
	ax = 0x4348
	sp = sp - 2
	Mem0[ss:sp:word16] = ax
	ax = 0x000D
	sp = sp - 2
	Mem0[ss:sp:word16] = ax
	call fn0800_0D24 (retsize: 2;)
	sp = sp + 0x0006
	SCZO = cond(sp)
	// succ:  l0800_1E59
l0800_1E59:
	si = Mem0[ss:sp:word16]
	sp = sp + 2
	sp = bp
	bp = Mem0[ss:sp:word16]
	sp = sp + 2
	return
	// succ:  fn0800_1CF6_exit
fn0800_1CF6_exit:


// fn0800_1E5E
// Return size: 2
define fn0800_1E5E
fn0800_1E5E_entry:
	// succ:  l0800_1E5E
l0800_1E5E:
	sp = fp
	Top = 0
	sp = sp - 2
	Mem0[ss:sp:word16] = si
	es_bx = Mem0[ds:0x2E51:segptr32]
	al = Mem0[es:bx + 0x0004:byte]
	ah = 0x00
	cl = 0x08
	ax = ax << cl
	SCZO = cond(ax)
	dl = Mem0[es:bx + 0x0005:byte]
	dh = 0x00
	ax = ax + dx
	SCZO = cond(ax)
	si = ax
	ax = ax ^ ax
	SZO = cond(ax)
	C = false
	sp = sp - 2
	Mem0[ss:sp:word16] = ax
	ax = si
	ax = ax - 0x0008
	SCZO = cond(ax)
	sp = sp - 2
	Mem0[ss:sp:word16] = ax
	ax = Mem0[ds:0x2E51:word16]
	ax = ax + 0x0008
	SCZO = cond(ax)
	v19 = Mem0[ds:0x2E53:word16]
	sp = sp - 2
	Mem0[ss:sp:word16] = v19
	sp = sp - 2
	Mem0[ss:sp:word16] = ax
	call fn0800_2CCF (retsize: 2;)
	sp = sp + 0x0008
	SCZO = cond(sp)
	dx = ax
	cl = 0x08
	ax = ax >>u cl
	SCZO = cond(ax)
	es_bx = Mem0[ds:0x2E51:segptr32]
	Mem0[es:bx + 0x0006:byte] = al
	Mem0[es:bx + 0x0007:byte] = dl
	ax = ax ^ ax
	SZO = cond(ax)
	C = false
	sp = sp - 2
	Mem0[ss:sp:word16] = ax
	ax = Mem0[ds:0x29ED:word16]
	dx = Mem0[ds:0x29EB:word16]
	dx = dx + 0x0004
	SCZO = cond(dx)
	ax = ax + 0x0000 + C
	SCZO = cond(ax)
	sp = sp - 2
	Mem0[ss:sp:word16] = ax
	sp = sp - 2
	Mem0[ss:sp:word16] = dx
	v20 = Mem0[ds:0x29D1:word16]
	sp = sp - 2
	Mem0[ss:sp:word16] = v20
	v21 = Mem0[ds:0x29CF:word16]
	sp = sp - 2
	Mem0[ss:sp:word16] = v21
	call fn0800_ACB3 (retsize: 2;)
	sp = sp + 0x000A
	SCZO = cond(sp)
	v22 = Mem0[ds:0x29D1:word16]
	sp = sp - 2
	Mem0[ss:sp:word16] = v22
	v23 = Mem0[ds:0x29CF:word16]
	sp = sp - 2
	Mem0[ss:sp:word16] = v23
	call fn0800_3E27 (retsize: 2;)
	sp = sp + 0x0004
	SCZO = cond(sp)
	dx = ax
	SCZO = cond(si - dx)
	branch Test(ULE,CZ) l0800_1EF7
	// succ:  l0800_1ED7 l0800_1EF7
l0800_1ED7:
	ax = si
	ax = ax - dx
	SCZO = cond(ax)
	dx = dx ^ dx
	SZO = cond(dx)
	C = false
	sp = sp - 2
	Mem0[ss:sp:word16] = dx
	sp = sp - 2
	Mem0[ss:sp:word16] = ax
	v25 = Mem0[ds:0x29ED:word16]
	sp = sp - 2
	Mem0[ss:sp:word16] = v25
	v26 = Mem0[ds:0x29EB:word16]
	sp = sp - 2
	Mem0[ss:sp:word16] = v26
	v27 = Mem0[ds:0x29D1:word16]
	sp = sp - 2
	Mem0[ss:sp:word16] = v27
	v28 = Mem0[ds:0x29CF:word16]
	sp = sp - 2
	Mem0[ss:sp:word16] = v28
	call fn0800_3BC3 (retsize: 2;)
	sp = sp + 0x000C
	SCZO = cond(sp)
	goto l0800_1F19
	// succ:  l0800_1F19
l0800_1EF7:
	SCZO = cond(si - dx)
	branch Test(UGE,C) l0800_1F19
	// succ:  l0800_1EFB l0800_1F19
l0800_1EFB:
	ax = dx
	ax = ax - si
	SCZO = cond(ax)
	dx = dx ^ dx
	SZO = cond(dx)
	C = false
	sp = sp - 2
	Mem0[ss:sp:word16] = dx
	sp = sp - 2
	Mem0[ss:sp:word16] = ax
	v29 = Mem0[ds:0x29ED:word16]
	sp = sp - 2
	Mem0[ss:sp:word16] = v29
	v30 = Mem0[ds:0x29EB:word16]
	sp = sp - 2
	Mem0[ss:sp:word16] = v30
	v31 = Mem0[ds:0x29D1:word16]
	sp = sp - 2
	Mem0[ss:sp:word16] = v31
	v32 = Mem0[ds:0x29CF:word16]
	sp = sp - 2
	Mem0[ss:sp:word16] = v32
	call fn0800_3C99 (retsize: 2;)
	sp = sp + 0x000C
	SCZO = cond(sp)
	// succ:  l0800_1F19
l0800_1F19:
	ax = ax ^ ax
	SZO = cond(ax)
	C = false
	sp = sp - 2
	Mem0[ss:sp:word16] = ax
	v33 = Mem0[ds:0x29ED:word16]
	sp = sp - 2
	Mem0[ss:sp:word16] = v33
	v34 = Mem0[ds:0x29EB:word16]
	sp = sp - 2
	Mem0[ss:sp:word16] = v34
	v35 = Mem0[ds:0x29D1:word16]
	sp = sp - 2
	Mem0[ss:sp:word16] = v35
	v36 = Mem0[ds:0x29CF:word16]
	sp = sp - 2
	Mem0[ss:sp:word16] = v36
	call fn0800_ACB3 (retsize: 2;)
	sp = sp + 0x000A
	SCZO = cond(sp)
	v37 = Mem0[ds:0x29D1:word16]
	sp = sp - 2
	Mem0[ss:sp:word16] = v37
	v38 = Mem0[ds:0x29CF:word16]
	sp = sp - 2
	Mem0[ss:sp:word16] = v38
	ax = ax ^ ax
	SZO = cond(ax)
	C = false
	sp = sp - 2
	Mem0[ss:sp:word16] = ax
	sp = sp - 2
	Mem0[ss:sp:word16] = si
	v39 = Mem0[ds:0x2E53:word16]
	sp = sp - 2
	Mem0[ss:sp:word16] = v39
	v40 = Mem0[ds:0x2E51:word16]
	sp = sp - 2
	Mem0[ss:sp:word16] = v40
	call fn0800_4152 (retsize: 2;)
	sp = sp + 0x000C
	SCZO = cond(sp)
	v41 = Mem0[ds:0x2E53:word16]
	sp = sp - 2
	Mem0[ss:sp:word16] = v41
	v42 = Mem0[ds:0x2E51:word16]
	sp = sp - 2
	Mem0[ss:sp:word16] = v42
	call fn0800_4346 (retsize: 2;)
	sp = sp + 0x0004
	SCZO = cond(sp)
	si = Mem0[ss:sp:word16]
	sp = sp + 2
	return
	// succ:  fn0800_1E5E_exit
fn0800_1E5E_exit:


// fn0800_1F5C
// Return size: 2
define fn0800_1F5C
fn0800_1F5C_entry:
	// succ:  l0800_1F5C
l0800_1F5C:
	sp = fp
	Top = 0
	sp = sp - 2
	Mem0[ss:sp:word16] = bp
	bp = sp
	sp = sp - 0x0008
	SCZO = cond(sp)
	sp = sp - 2
	Mem0[ss:sp:word16] = si
	sp = sp - 2
	Mem0[ss:sp:word16] = di
	es_di = Mem0[ss:bp + 0x0004:segptr32]
	ax = ax ^ ax
	SZO = cond(ax)
	C = false
	cx = 0xFFFF
	// succ:  l0800_1F6C
l0800_1F6C:
	branch cx == 0x0000 l0800_1F6E
	// succ:  l0800_1F6C_1 l0800_1F6E
l0800_1F6C_1:
	SCZO = cond(al - Mem0[es:di:byte])
	di = di + 0x0001
	cx = cx - 0x0001
	branch Test(EQ,Z) l0800_1F6C
	// succ:  l0800_1F6E l0800_1F6C
l0800_1F6E:
	cx = ~cx
	ax = 0x003A
	di = di - cx
	SCZO = cond(di)
	// succ:  l0800_1F75
l0800_1F75:
	branch cx == 0x0000 l0800_1F77
	// succ:  l0800_1F75_2 l0800_1F77
l0800_1F75_2:
	SCZO = cond(al - Mem0[es:di:byte])
	di = di + 0x0001
	cx = cx - 0x0001
	branch Test(EQ,Z) l0800_1F75
	// succ:  l0800_1F77 l0800_1F75
l0800_1F77:
	branch Test(EQ,Z) l0800_1F80
	// succ:  l0800_1F79 l0800_1F80
l0800_1F79:
	di = 0x0001
	ax = ax ^ ax
	SZO = cond(ax)
	C = false
	es = ax
	// succ:  l0800_1F80
l0800_1F80:
	di = di - 0x0001
	SZO = cond(di)
	ax = es
	di = di | ax
	SZO = cond(di)
	C = false
	branch Test(EQ,Z) l0800_1FAD
	// succ:  l0800_1F87 l0800_1FAD
l0800_1F87:
	es_di = Mem0[ss:bp + 0x0004:segptr32]
	ax = ax ^ ax
	SZO = cond(ax)
	C = false
	cx = 0xFFFF
	// succ:  l0800_1F8F
l0800_1F8F:
	branch cx == 0x0000 l0800_1F91
	// succ:  l0800_1F8F_1 l0800_1F91
l0800_1F8F_1:
	SCZO = cond(al - Mem0[es:di:byte])
	di = di + 0x0001
	cx = cx - 0x0001
	branch Test(EQ,Z) l0800_1F8F
	// succ:  l0800_1F91 l0800_1F8F
l0800_1F91:
	cx = ~cx
	ax = 0x003A
	di = di - cx
	SCZO = cond(di)
	// succ:  l0800_1F98
l0800_1F98:
	branch cx == 0x0000 l0800_1F9A
	// succ:  l0800_1F98_2 l0800_1F9A
l0800_1F98_2:
	SCZO = cond(al - Mem0[es:di:byte])
	di = di + 0x0001
	cx = cx - 0x0001
	branch Test(EQ,Z) l0800_1F98
	// succ:  l0800_1F9A l0800_1F98
l0800_1F9A:
	branch Test(EQ,Z) l0800_1FA3
	// succ:  l0800_1F9C l0800_1FA3
l0800_1F9C:
	di = 0x0001
	ax = ax ^ ax
	SZO = cond(ax)
	C = false
	es = ax
	// succ:  l0800_1FA3
l0800_1FA3:
	di = di - 0x0001
	SZO = cond(di)
	ax = es
	di = di + 0x0001
	SZO = cond(di)
	Mem0[ss:bp + 0x0006:word16] = ax
	Mem0[ss:bp + 0x0004:word16] = di
	// succ:  l0800_1FAD
l0800_1FAD:
	es_bx = Mem0[ds:0x2E51:segptr32]
	al = Mem0[es:bx + 0x0004:byte]
	ah = 0x00
	cl = 0x08
	ax = ax << cl
	SCZO = cond(ax)
	dl = Mem0[es:bx + 0x0005:byte]
	dh = 0x00
	ax = ax + dx
	SCZO = cond(ax)
	Mem0[ss:bp - 0x0006:word16] = ax
	ax = Mem0[ds:0x2E53:word16]
	dx = Mem0[ds:0x2E51:word16]
	dx = dx + Mem0[ss:bp - 0x0006:word16]
	SCZO = cond(dx)
	Mem0[ss:bp - 0x0002:word16] = ax
	Mem0[ss:bp - 0x0004:word16] = dx
	es_di = Mem0[ss:bp + 0x0004:segptr32]
	ax = ax ^ ax
	SZO = cond(ax)
	C = false
	cx = 0xFFFF
	// succ:  l0800_1FDE
l0800_1FDE:
	branch cx == 0x0000 l0800_1FE0
	// succ:  l0800_1FDE_1 l0800_1FE0
l0800_1FDE_1:
	SCZO = cond(al - Mem0[es:di:byte])
	di = di + 0x0001
	cx = cx - 0x0001
	branch Test(EQ,Z) l0800_1FDE
	// succ:  l0800_1FE0 l0800_1FDE
l0800_1FE0:
	cx = ~cx
	cx = cx - 0x0001
	SZO = cond(cx)
	cx = cx + 0x0004
	SCZO = cond(cx)
	Mem0[ss:bp - 0x0008:word16] = cx
	ax = Mem0[ss:bp - 0x0004:word16]
	dx = dx ^ dx
	SZO = cond(dx)
	C = false
	ax = ax - Mem0[ds:0x2E51:word16]
	SCZO = cond(ax)
	dx = dx - 0x00 - C
	SCZO = cond(dx)
	ax = ax + Mem0[ss:bp - 0x0008:word16]
	SCZO = cond(ax)
	dx = dx + 0x00 + C
	SCZO = cond(dx)
	cl = 0x08
	call fn0800_8C8A (retsize: 2;)
	es_bx = Mem0[ss:bp - 0x0004:segptr32]
	Mem0[es:bx:byte] = al
	ax = Mem0[ss:bp - 0x0004:word16]
	dx = dx ^ dx
	SZO = cond(dx)
	C = false
	ax = ax - Mem0[ds:0x2E51:word16]
	SCZO = cond(ax)
	dx = dx - 0x00 - C
	SCZO = cond(dx)
	al = al + Mem0[ss:bp - 0x0008:byte]
	SCZO = cond(al)
	Mem0[es:bx + 0x0001:byte] = al
	di = Mem0[ss:bp - 0x0004:word16]
	di = di + 0x0002
	SCZO = cond(di)
	sp = sp - 2
	Mem0[ss:sp:word16] = es
	es = Mem0[ss:bp + 0x0006:selector]
	sp = sp - 2
	Mem0[ss:sp:word16] = di
	di = Mem0[ss:bp + 0x0004:word16]
	ax = ax ^ ax
	SZO = cond(ax)
	C = false
	cx = 0xFFFF
	// succ:  l0800_202C
l0800_202C:
	branch cx == 0x0000 l0800_202E
	// succ:  l0800_202C_2 l0800_202E
l0800_202C_2:
	SCZO = cond(al - Mem0[es:di:byte])
	di = di + 0x0001
	cx = cx - 0x0001
	branch Test(EQ,Z) l0800_202C
	// succ:  l0800_202E l0800_202C
l0800_202E:
	cx = ~cx
	di = di - cx
	SCZO = cond(di)
	cx = cx >>u 0x0001
	SCZO = cond(cx)
	si = di
	di = Mem0[ss:sp:word16]
	sp = sp + 2
	ax = es
	es = Mem0[ss:sp:selector]
	sp = sp + 2
	sp = sp - 2
	Mem0[ss:sp:word16] = ds
	ds = ax
	// succ:  l0800_203D
l0800_203D:
	branch cx == 0x0000 l0800_203F
	// succ:  l0800_203D_3 l0800_203F
l0800_203D_3:
	v24 = Mem0[ds:si:word16]
	Mem0[es:di:word16] = v24
	si = si + 0x0002
	di = di + 0x0002
	cx = cx - 0x0001
	goto l0800_203D
	// succ:  l0800_203D
l0800_203F:
	cx = cx + cx + C
	SCZO = cond(cx)
	// succ:  l0800_2041
l0800_2041:
	branch cx == 0x0000 l0800_2043
	// succ:  l0800_2041_1 l0800_2043
l0800_2041_1:
	v25 = Mem0[ds:si:byte]
	Mem0[es:di:byte] = v25
	si = si + 0x0001
	di = di + 0x0001
	cx = cx - 0x0001
	goto l0800_2041
	// succ:  l0800_2041
l0800_2043:
	ds = Mem0[ss:sp:selector]
	sp = sp + 2
	es = Mem0[ss:bp - 0x0002:selector]
	bx = bx + Mem0[ss:bp - 0x0008:word16]
	SCZO = cond(bx)
	Mem0[es:bx - 0x0001:byte] = 0x00
	ax = Mem0[ss:bp - 0x0006:word16]
	ax = ax + Mem0[ss:bp - 0x0008:word16]
	SCZO = cond(ax)
	cl = 0x08
	ax = ax >>u cl
	SCZO = cond(ax)
	es_bx = Mem0[ds:0x2E51:segptr32]
	Mem0[es:bx + 0x0004:byte] = al
	al = Mem0[ss:bp - 0x0006:byte]
	al = al + Mem0[ss:bp - 0x0008:byte]
	SCZO = cond(al)
	Mem0[es:bx + 0x0005:byte] = al
	ax = ax ^ ax
	SZO = cond(ax)
	C = false
	sp = sp - 2
	Mem0[ss:sp:word16] = ax
	sp = sp - 2
	Mem0[ss:sp:word16] = ax
	sp = sp - 2
	Mem0[ss:sp:word16] = ax
	v26 = Mem0[ss:bp - 0x0008:word16]
	sp = sp - 2
	Mem0[ss:sp:word16] = v26
	call fn0800_2688 (retsize: 2;)
	sp = sp + 0x0008
	SCZO = cond(sp)
	dx = Mem0[ss:bp - 0x0002:word16]
	ax = Mem0[ss:bp - 0x0004:word16]
	di = Mem0[ss:sp:word16]
	sp = sp + 2
	si = Mem0[ss:sp:word16]
	sp = sp + 2
	sp = bp
	bp = Mem0[ss:sp:word16]
	sp = sp + 2
	return
	// succ:  fn0800_1F5C_exit
fn0800_1F5C_exit:


// fn0800_2085
// Return size: 2
define fn0800_2085
fn0800_2085_entry:
	// succ:  l0800_2085
l0800_2085:
	sp = fp
	Top = 0
	sp = sp - 2
	Mem0[ss:sp:word16] = bp
	bp = sp
	sp = sp - 0x000C
	SCZO = cond(sp)
	sp = sp - 2
	Mem0[ss:sp:word16] = si
	sp = sp - 2
	Mem0[ss:sp:word16] = di
	es_bx = Mem0[ds:0x2E51:segptr32]
	al = Mem0[es:bx + 0x0004:byte]
	ah = 0x00
	cl = 0x08
	ax = ax << cl
	SCZO = cond(ax)
	dl = Mem0[es:bx + 0x0005:byte]
	dh = 0x00
	ax = ax + dx
	SCZO = cond(ax)
	Mem0[ss:bp - 0x000A:word16] = ax
	ax = Mem0[ds:0x2E53:word16]
	dx = Mem0[ds:0x2E51:word16]
	dx = dx + Mem0[ss:bp - 0x000A:word16]
	SCZO = cond(dx)
	Mem0[ss:bp - 0x0006:word16] = ax
	Mem0[ss:bp - 0x0008:word16] = dx
	es_di = Mem0[ss:bp + 0x0004:segptr32]
	ax = ax ^ ax
	SZO = cond(ax)
	C = false
	cx = 0xFFFF
	// succ:  l0800_20BE
l0800_20BE:
	branch cx == 0x0000 l0800_20C0
	// succ:  l0800_20BE_1 l0800_20C0
l0800_20BE_1:
	SCZO = cond(al - Mem0[es:di:byte])
	di = di + 0x0001
	cx = cx - 0x0001
	branch Test(EQ,Z) l0800_20BE
	// succ:  l0800_20C0 l0800_20BE
l0800_20C0:
	cx = ~cx
	cx = cx - 0x0001
	SZO = cond(cx)
	cx = cx + 0x0005
	SCZO = cond(cx)
	Mem0[ss:bp - 0x000C:word16] = cx
	es_bx = Mem0[ss:bp + 0x0008:segptr32]
	al = Mem0[es:bx:byte]
	ax = (int16) al
	cl = 0x08
	ax = ax << cl
	SCZO = cond(ax)
	dl = Mem0[es:bx + 0x0001:byte]
	dh = 0x00
	ax = ax + dx
	SCZO = cond(ax)
	dx = Mem0[ds:0x2E53:word16]
	bx = Mem0[ds:0x2E51:word16]
	bx = bx + ax
	SCZO = cond(bx)
	bx = bx - 0x0001
	SZO = cond(bx)
	Mem0[ss:bp - 0x0002:word16] = dx
	Mem0[ss:bp - 0x0004:word16] = bx
	ax = Mem0[ss:bp - 0x0008:word16]
	dx = dx ^ dx
	SZO = cond(dx)
	C = false
	ax = ax - Mem0[ss:bp - 0x0004:word16]
	SCZO = cond(ax)
	dx = dx - 0x00 - C
	SCZO = cond(dx)
	sp = sp - 2
	Mem0[ss:sp:word16] = ax
	v24 = Mem0[ds:0x2E53:word16]
	sp = sp - 2
	Mem0[ss:sp:word16] = v24
	sp = sp - 2
	Mem0[ss:sp:word16] = bx
	ax = Mem0[ss:bp - 0x0004:word16]
	ax = ax + Mem0[ss:bp - 0x000C:word16]
	SCZO = cond(ax)
	v25 = Mem0[ds:0x2E53:word16]
	sp = sp - 2
	Mem0[ss:sp:word16] = v25
	sp = sp - 2
	Mem0[ss:sp:word16] = ax
	call fn0800_B0F3 (retsize: 2;)
	sp = sp + 0x000A
	SCZO = cond(sp)
	es_di = Mem0[ss:bp - 0x0004:segptr32]
	sp = sp - 2
	Mem0[ss:sp:word16] = es
	es = Mem0[ss:bp + 0x0006:selector]
	sp = sp - 2
	Mem0[ss:sp:word16] = di
	di = Mem0[ss:bp + 0x0004:word16]
	ax = ax ^ ax
	SZO = cond(ax)
	C = false
	cx = 0xFFFF
	// succ:  l0800_211F
l0800_211F:
	branch cx == 0x0000 l0800_2121
	// succ:  l0800_211F_2 l0800_2121
l0800_211F_2:
	SCZO = cond(al - Mem0[es:di:byte])
	di = di + 0x0001
	cx = cx - 0x0001
	branch Test(EQ,Z) l0800_211F
	// succ:  l0800_2121 l0800_211F
l0800_2121:
	cx = ~cx
	di = di - cx
	SCZO = cond(di)
	cx = cx >>u 0x0001
	SCZO = cond(cx)
	si = di
	di = Mem0[ss:sp:word16]
	sp = sp + 2
	ax = es
	es = Mem0[ss:sp:selector]
	sp = sp + 2
	sp = sp - 2
	Mem0[ss:sp:word16] = ds
	ds = ax
	// succ:  l0800_2130
l0800_2130:
	branch cx == 0x0000 l0800_2132
	// succ:  l0800_2130_3 l0800_2132
l0800_2130_3:
	v26 = Mem0[ds:si:word16]
	Mem0[es:di:word16] = v26
	si = si + 0x0002
	di = di + 0x0002
	cx = cx - 0x0001
	goto l0800_2130
	// succ:  l0800_2130
l0800_2132:
	cx = cx + cx + C
	SCZO = cond(cx)
	// succ:  l0800_2134
l0800_2134:
	branch cx == 0x0000 l0800_2136
	// succ:  l0800_2134_1 l0800_2136
l0800_2134_1:
	v27 = Mem0[ds:si:byte]
	Mem0[es:di:byte] = v27
	si = si + 0x0001
	di = di + 0x0001
	cx = cx - 0x0001
	goto l0800_2134
	// succ:  l0800_2134
l0800_2136:
	ds = Mem0[ss:sp:selector]
	sp = sp + 2
	es_di = Mem0[ss:bp - 0x0004:segptr32]
	ax = ax ^ ax
	SZO = cond(ax)
	C = false
	cx = 0xFFFF
	// succ:  l0800_213F
l0800_213F:
	branch cx == 0x0000 l0800_2141
	// succ:  l0800_213F_1 l0800_2141
l0800_213F_1:
	SCZO = cond(al - Mem0[es:di:byte])
	di = di + 0x0001
	cx = cx - 0x0001
	branch Test(EQ,Z) l0800_213F
	// succ:  l0800_2141 l0800_213F
l0800_2141:
	cx = ~cx
	ax = ax ^ ax
	SZO = cond(ax)
	C = false
	di = di - cx
	SCZO = cond(di)
	// succ:  l0800_2147
l0800_2147:
	branch cx == 0x0000 l0800_2149
	// succ:  l0800_2147_2 l0800_2149
l0800_2147_2:
	SCZO = cond(al - Mem0[es:di:byte])
	di = di + 0x0001
	cx = cx - 0x0001
	branch Test(EQ,Z) l0800_2147
	// succ:  l0800_2149 l0800_2147
l0800_2149:
	branch Test(EQ,Z) l0800_2152
	// succ:  l0800_214B l0800_2152
l0800_214B:
	di = 0x0001
	ax = ax ^ ax
	SZO = cond(ax)
	C = false
	es = ax
	// succ:  l0800_2152
l0800_2152:
	di = di - 0x0001
	SZO = cond(di)
	ax = es
	es = ax
	Mem0[es:di + 0x0001:byte] = 0x00
	es_di = Mem0[ss:bp - 0x0004:segptr32]
	ax = ax ^ ax
	SZO = cond(ax)
	C = false
	cx = 0xFFFF
	// succ:  l0800_2164
l0800_2164:
	branch cx == 0x0000 l0800_2166
	// succ:  l0800_2164_1 l0800_2166
l0800_2164_1:
	SCZO = cond(al - Mem0[es:di:byte])
	di = di + 0x0001
	cx = cx - 0x0001
	branch Test(EQ,Z) l0800_2164
	// succ:  l0800_2166 l0800_2164
l0800_2166:
	cx = ~cx
	ax = ax ^ ax
	SZO = cond(ax)
	C = false
	di = di - cx
	SCZO = cond(di)
	// succ:  l0800_216C
l0800_216C:
	branch cx == 0x0000 l0800_216E
	// succ:  l0800_216C_2 l0800_216E
l0800_216C_2:
	SCZO = cond(al - Mem0[es:di:byte])
	di = di + 0x0001
	cx = cx - 0x0001
	branch Test(EQ,Z) l0800_216C
	// succ:  l0800_216E l0800_216C
l0800_216E:
	branch Test(EQ,Z) l0800_2177
	// succ:  l0800_2170 l0800_2177
l0800_2170:
	di = 0x0001
	ax = ax ^ ax
	SZO = cond(ax)
	C = false
	es = ax
	// succ:  l0800_2177
l0800_2177:
	di = di - 0x0001
	SZO = cond(di)
	ax = es
	es = ax
	Mem0[es:di + 0x0002:byte] = 0x00
	es_di = Mem0[ss:bp - 0x0004:segptr32]
	ax = ax ^ ax
	SZO = cond(ax)
	C = false
	cx = 0xFFFF
	// succ:  l0800_2189
l0800_2189:
	branch cx == 0x0000 l0800_218B
	// succ:  l0800_2189_1 l0800_218B
l0800_2189_1:
	SCZO = cond(al - Mem0[es:di:byte])
	di = di + 0x0001
	cx = cx - 0x0001
	branch Test(EQ,Z) l0800_2189
	// succ:  l0800_218B l0800_2189
l0800_218B:
	cx = ~cx
	ax = ax ^ ax
	SZO = cond(ax)
	C = false
	di = di - cx
	SCZO = cond(di)
	// succ:  l0800_2191
l0800_2191:
	branch cx == 0x0000 l0800_2193
	// succ:  l0800_2191_2 l0800_2193
l0800_2191_2:
	SCZO = cond(al - Mem0[es:di:byte])
	di = di + 0x0001
	cx = cx - 0x0001
	branch Test(EQ,Z) l0800_2191
	// succ:  l0800_2193 l0800_2191
l0800_2193:
	branch Test(EQ,Z) l0800_219C
	// succ:  l0800_2195 l0800_219C
l0800_2195:
	di = 0x0001
	ax = ax ^ ax
	SZO = cond(ax)
	C = false
	es = ax
	// succ:  l0800_219C
l0800_219C:
	di = di - 0x0001
	SZO = cond(di)
	ax = es
	es = ax
	Mem0[es:di + 0x0003:byte] = 0x00
	es_di = Mem0[ss:bp - 0x0004:segptr32]
	ax = ax ^ ax
	SZO = cond(ax)
	C = false
	cx = 0xFFFF
	// succ:  l0800_21AE
l0800_21AE:
	branch cx == 0x0000 l0800_21B0
	// succ:  l0800_21AE_1 l0800_21B0
l0800_21AE_1:
	SCZO = cond(al - Mem0[es:di:byte])
	di = di + 0x0001
	cx = cx - 0x0001
	branch Test(EQ,Z) l0800_21AE
	// succ:  l0800_21B0 l0800_21AE
l0800_21B0:
	cx = ~cx
	ax = ax ^ ax
	SZO = cond(ax)
	C = false
	di = di - cx
	SCZO = cond(di)
	// succ:  l0800_21B6
l0800_21B6:
	branch cx == 0x0000 l0800_21B8
	// succ:  l0800_21B6_2 l0800_21B8
l0800_21B6_2:
	SCZO = cond(al - Mem0[es:di:byte])
	di = di + 0x0001
	cx = cx - 0x0001
	branch Test(EQ,Z) l0800_21B6
	// succ:  l0800_21B8 l0800_21B6
l0800_21B8:
	branch Test(EQ,Z) l0800_21C1
	// succ:  l0800_21BA l0800_21C1
l0800_21BA:
	di = 0x0001
	ax = ax ^ ax
	SZO = cond(ax)
	C = false
	es = ax
	// succ:  l0800_21C1
l0800_21C1:
	di = di - 0x0001
	SZO = cond(di)
	ax = es
	es = ax
	Mem0[es:di + 0x0004:byte] = 0x00
	ax = Mem0[ss:bp - 0x000A:word16]
	ax = ax + Mem0[ss:bp - 0x000C:word16]
	SCZO = cond(ax)
	cl = 0x08
	ax = ax >>u cl
	SCZO = cond(ax)
	es_bx = Mem0[ds:0x2E51:segptr32]
	Mem0[es:bx + 0x0004:byte] = al
	al = Mem0[ss:bp - 0x000A:byte]
	al = al + Mem0[ss:bp - 0x000C:byte]
	SCZO = cond(al)
	Mem0[es:bx + 0x0005:byte] = al
	ax = ax ^ ax
	SZO = cond(ax)
	C = false
	sp = sp - 2
	Mem0[ss:sp:word16] = ax
	sp = sp - 2
	Mem0[ss:sp:word16] = ax
	sp = sp - 2
	Mem0[ss:sp:word16] = ax
	v28 = Mem0[ss:bp - 0x000C:word16]
	sp = sp - 2
	Mem0[ss:sp:word16] = v28
	call fn0800_2688 (retsize: 2;)
	sp = sp + 0x0008
	SCZO = cond(sp)
	dx = Mem0[ss:bp - 0x0002:word16]
	ax = Mem0[ss:bp - 0x0004:word16]
	di = Mem0[ss:sp:word16]
	sp = sp + 2
	si = Mem0[ss:sp:word16]
	sp = sp + 2
	sp = bp
	bp = Mem0[ss:sp:word16]
	sp = sp + 2
	return
	// succ:  fn0800_2085_exit
fn0800_2085_exit:


// fn0800_2201
// Return size: 2
define fn0800_2201
fn0800_2201_entry:
	// succ:  l0800_2201
l0800_2201:
	sp = fp
	Top = 0
	sp = sp - 2
	Mem0[ss:sp:word16] = bp
	bp = sp
	sp = sp - 0x000A
	SCZO = cond(sp)
	sp = sp - 2
	Mem0[ss:sp:word16] = di
	es_bx = Mem0[ds:0x2E51:segptr32]
	al = Mem0[es:bx + 0x0004:byte]
	ah = 0x00
	cl = 0x08
	ax = ax << cl
	SCZO = cond(ax)
	dl = Mem0[es:bx + 0x0005:byte]
	dh = 0x00
	ax = ax + dx
	SCZO = cond(ax)
	Mem0[ss:bp - 0x0006:word16] = ax
	ax = Mem0[ds:0x2E53:word16]
	dx = Mem0[ds:0x2E51:word16]
	dx = dx + Mem0[ss:bp - 0x0006:word16]
	SCZO = cond(dx)
	Mem0[ss:bp - 0x0002:word16] = ax
	Mem0[ss:bp - 0x0004:word16] = dx
	es_bx = Mem0[ss:bp + 0x0004:segptr32]
	al = Mem0[es:bx:byte]
	ax = (int16) al
	ax = ax << cl
	SCZO = cond(ax)
	dl = Mem0[es:bx + 0x0001:byte]
	dh = 0x00
	ax = ax + dx
	SCZO = cond(ax)
	dx = Mem0[ds:0x2E51:word16]
	dx = dx + ax
	SCZO = cond(dx)
	ax = ax ^ ax
	SZO = cond(ax)
	C = false
	dx = dx - Mem0[ss:bp + 0x0004:word16]
	SCZO = cond(dx)
	ax = ax - 0x0000 - C
	SCZO = cond(ax)
	Mem0[ss:bp - 0x0008:word16] = dx
	ax = Mem0[ss:bp + 0x0004:word16]
	ax = ax + Mem0[ss:bp - 0x0008:word16]
	SCZO = cond(ax)
	Mem0[ss:bp - 0x000A:word16] = ax
	dx = Mem0[ss:bp - 0x0004:word16]
	bx = bx ^ bx
	SZO = cond(bx)
	C = false
	dx = dx - ax
	SCZO = cond(dx)
	bx = bx - 0x00 - C
	SCZO = cond(bx)
	sp = sp - 2
	Mem0[ss:sp:word16] = dx
	v20 = Mem0[ss:bp + 0x0006:word16]
	sp = sp - 2
	Mem0[ss:sp:word16] = v20
	sp = sp - 2
	Mem0[ss:sp:word16] = ax
	v21 = Mem0[ss:bp + 0x0006:word16]
	sp = sp - 2
	Mem0[ss:sp:word16] = v21
	v22 = Mem0[ss:bp + 0x0004:word16]
	sp = sp - 2
	Mem0[ss:sp:word16] = v22
	call fn0800_B0F3 (retsize: 2;)
	sp = sp + 0x000A
	SCZO = cond(sp)
	ax = Mem0[ss:bp - 0x0006:word16]
	ax = ax - Mem0[ss:bp - 0x0008:word16]
	SCZO = cond(ax)
	cl = 0x08
	ax = ax >>u cl
	SCZO = cond(ax)
	es_bx = Mem0[ds:0x2E51:segptr32]
	Mem0[es:bx + 0x0004:byte] = al
	al = Mem0[ss:bp - 0x0006:byte]
	al = al - Mem0[ss:bp - 0x0008:byte]
	SCZO = cond(al)
	Mem0[es:bx + 0x0005:byte] = al
	ax = ax ^ ax
	SZO = cond(ax)
	C = false
	sp = sp - 2
	Mem0[ss:sp:word16] = ax
	sp = sp - 2
	Mem0[ss:sp:word16] = ax
	ax = Mem0[ss:bp - 0x0008:word16]
	dx = dx ^ dx
	SZO = cond(dx)
	C = false
	dx = -dx
	SCZO = cond(dx)
	C = dx == 0x0000
	ax = -ax
	SCZO = cond(ax)
	C = ax == 0x0000
	dx = dx - 0x00 - C
	SCZO = cond(dx)
	sp = sp - 2
	Mem0[ss:sp:word16] = dx
	sp = sp - 2
	Mem0[ss:sp:word16] = ax
	call fn0800_2688 (retsize: 2;)
	sp = sp + 0x0008
	SCZO = cond(sp)
	ax = Mem0[ds:0x45B0:word16]
	dx = Mem0[ds:0x45AE:word16]
	SCZO = cond(ax - Mem0[ss:bp + 0x0006:word16])
	branch Test(NE,Z) l0800_22EA
	// succ:  l0800_22B7 l0800_22EA
l0800_22B7:
	SCZO = cond(dx - Mem0[ss:bp + 0x0004:word16])
	branch Test(NE,Z) l0800_22EA
	// succ:  l0800_22BC l0800_22EA
l0800_22BC:
	es_di = Mem0[ss:bp + 0x0004:segptr32]
	di = di + 0x0002
	SCZO = cond(di)
	ax = ax ^ ax
	SZO = cond(ax)
	C = false
	cx = 0xFFFF
	// succ:  l0800_22C7
l0800_22C7:
	branch cx == 0x0000 l0800_22C9
	// succ:  l0800_22C7_1 l0800_22C9
l0800_22C7_1:
	SCZO = cond(al - Mem0[es:di:byte])
	di = di + 0x0001
	cx = cx - 0x0001
	branch Test(EQ,Z) l0800_22C7
	// succ:  l0800_22C9 l0800_22C7
l0800_22C9:
	cx = ~cx
	ax = ax ^ ax
	SZO = cond(ax)
	C = false
	di = di - cx
	SCZO = cond(di)
	// succ:  l0800_22CF
l0800_22CF:
	branch cx == 0x0000 l0800_22D1
	// succ:  l0800_22CF_2 l0800_22D1
l0800_22CF_2:
	SCZO = cond(al - Mem0[es:di:byte])
	di = di + 0x0001
	cx = cx - 0x0001
	branch Test(EQ,Z) l0800_22CF
	// succ:  l0800_22D1 l0800_22CF
l0800_22D1:
	branch Test(EQ,Z) l0800_22DA
	// succ:  l0800_22D3 l0800_22DA
l0800_22D3:
	di = 0x0001
	ax = ax ^ ax
	SZO = cond(ax)
	C = false
	es = ax
	// succ:  l0800_22DA
l0800_22DA:
	di = di - 0x0001
	SZO = cond(di)
	ax = es
	di = di + 0x0001
	SZO = cond(di)
	Mem0[ds:0x45AC:word16] = ax
	Mem0[ds:0x45AA:word16] = di
	di = Mem0[ss:sp:word16]
	sp = sp + 2
	sp = bp
	bp = Mem0[ss:sp:word16]
	sp = sp + 2
	return
	// succ:  fn0800_2201_exit
l0800_22EA:
	ax = Mem0[ds:0x45AE:word16]
	SCZO = cond(ax - Mem0[ss:bp + 0x0004:word16])
	branch Test(ULE,CZ) l0800_22F9
	// succ:  l0800_22F2 l0800_22F9
l0800_22F2:
	ax = Mem0[ss:bp - 0x0008:word16]
	v27 = Mem0[ds:0x45AA:word16] - ax
	Mem0[ds:0x45AA:word16] = v27
	SCZO = cond(v27)
	// succ:  l0800_22F9
l0800_22F9:
	di = Mem0[ss:sp:word16]
	sp = sp + 2
	sp = bp
	bp = Mem0[ss:sp:word16]
	sp = sp + 2
	return
	// succ:  fn0800_2201_exit
fn0800_2201_exit:


// fn0800_22FE
// Return size: 2
define fn0800_22FE
fn0800_22FE_entry:
	// succ:  l0800_22FE
l0800_22FE:
	sp = fp
	Top = 0
	sp = sp - 2
	Mem0[ss:sp:word16] = bp
	bp = sp
	sp = sp - 0x000A
	SCZO = cond(sp)
	sp = sp - 2
	Mem0[ss:sp:word16] = di
	es_bx = Mem0[ds:0x2E51:segptr32]
	al = Mem0[es:bx + 0x0004:byte]
	ah = 0x00
	cl = 0x08
	ax = ax << cl
	SCZO = cond(ax)
	dl = Mem0[es:bx + 0x0005:byte]
	dh = 0x00
	ax = ax + dx
	SCZO = cond(ax)
	Mem0[ss:bp - 0x0006:word16] = ax
	ax = Mem0[ds:0x2E53:word16]
	dx = Mem0[ds:0x2E51:word16]
	dx = dx + Mem0[ss:bp - 0x0006:word16]
	SCZO = cond(dx)
	Mem0[ss:bp - 0x0002:word16] = ax
	Mem0[ss:bp - 0x0004:word16] = dx
	es_di = Mem0[ss:bp + 0x0004:segptr32]
	ax = ax ^ ax
	SZO = cond(ax)
	C = false
	cx = 0xFFFF
	// succ:  l0800_2336
l0800_2336:
	branch cx == 0x0000 l0800_2338
	// succ:  l0800_2336_1 l0800_2338
l0800_2336_1:
	SCZO = cond(al - Mem0[es:di:byte])
	di = di + 0x0001
	cx = cx - 0x0001
	branch Test(EQ,Z) l0800_2336
	// succ:  l0800_2338 l0800_2336
l0800_2338:
	cx = ~cx
	ax = ax ^ ax
	SZO = cond(ax)
	C = false
	di = di - cx
	SCZO = cond(di)
	// succ:  l0800_233E
l0800_233E:
	branch cx == 0x0000 l0800_2340
	// succ:  l0800_233E_2 l0800_2340
l0800_233E_2:
	SCZO = cond(al - Mem0[es:di:byte])
	di = di + 0x0001
	cx = cx - 0x0001
	branch Test(EQ,Z) l0800_233E
	// succ:  l0800_2340 l0800_233E
l0800_2340:
	branch Test(EQ,Z) l0800_2349
	// succ:  l0800_2342 l0800_2349
l0800_2342:
	di = 0x0001
	ax = ax ^ ax
	SZO = cond(ax)
	C = false
	es = ax
	// succ:  l0800_2349
l0800_2349:
	di = di - 0x0001
	SZO = cond(di)
	ax = es
	di = di + 0x0005
	SCZO = cond(di)
	ax = ax ^ ax
	SZO = cond(ax)
	C = false
	di = di - Mem0[ss:bp + 0x0004:word16]
	SCZO = cond(di)
	ax = ax - 0x0000 - C
	SCZO = cond(ax)
	Mem0[ss:bp - 0x0008:word16] = di
	ax = Mem0[ss:bp + 0x0004:word16]
	ax = ax + Mem0[ss:bp - 0x0008:word16]
	SCZO = cond(ax)
	Mem0[ss:bp - 0x000A:word16] = ax
	dx = Mem0[ss:bp - 0x0004:word16]
	bx = bx ^ bx
	SZO = cond(bx)
	C = false
	dx = dx - ax
	SCZO = cond(dx)
	bx = bx - 0x00 - C
	SCZO = cond(bx)
	sp = sp - 2
	Mem0[ss:sp:word16] = dx
	v23 = Mem0[ss:bp + 0x0006:word16]
	sp = sp - 2
	Mem0[ss:sp:word16] = v23
	sp = sp - 2
	Mem0[ss:sp:word16] = ax
	v24 = Mem0[ss:bp + 0x0006:word16]
	sp = sp - 2
	Mem0[ss:sp:word16] = v24
	v25 = Mem0[ss:bp + 0x0004:word16]
	sp = sp - 2
	Mem0[ss:sp:word16] = v25
	call fn0800_B0F3 (retsize: 2;)
	sp = sp + 0x000A
	SCZO = cond(sp)
	ax = Mem0[ss:bp - 0x0006:word16]
	ax = ax - Mem0[ss:bp - 0x0008:word16]
	SCZO = cond(ax)
	cl = 0x08
	ax = ax >>u cl
	SCZO = cond(ax)
	es_bx = Mem0[ds:0x2E51:segptr32]
	Mem0[es:bx + 0x0004:byte] = al
	al = Mem0[ss:bp - 0x0006:byte]
	al = al - Mem0[ss:bp - 0x0008:byte]
	SCZO = cond(al)
	Mem0[es:bx + 0x0005:byte] = al
	ax = ax ^ ax
	SZO = cond(ax)
	C = false
	sp = sp - 2
	Mem0[ss:sp:word16] = ax
	sp = sp - 2
	Mem0[ss:sp:word16] = ax
	ax = Mem0[ss:bp - 0x0008:word16]
	dx = dx ^ dx
	SZO = cond(dx)
	C = false
	dx = -dx
	SCZO = cond(dx)
	C = dx == 0x0000
	ax = -ax
	SCZO = cond(ax)
	C = ax == 0x0000
	dx = dx - 0x00 - C
	SCZO = cond(dx)
	sp = sp - 2
	Mem0[ss:sp:word16] = dx
	sp = sp - 2
	Mem0[ss:sp:word16] = ax
	call fn0800_2688 (retsize: 2;)
	sp = sp + 0x0008
	SCZO = cond(sp)
	ax = Mem0[ss:bp + 0x0006:word16]
	dx = Mem0[ss:bp + 0x0004:word16]
	dx = dx + Mem0[ss:bp - 0x0008:word16]
	SCZO = cond(dx)
	Mem0[ds:0x45AC:word16] = ax
	Mem0[ds:0x45AA:word16] = dx
	dx = dx | ax
	SZO = cond(dx)
	C = false
	branch Test(EQ,Z) l0800_23D8
	// succ:  l0800_23C6 l0800_23D8
l0800_23C6:
	ax = Mem0[ss:bp + 0x0006:word16]
	dx = Mem0[ss:bp + 0x0004:word16]
	Mem0[ds:0x45AC:word16] = ax
	Mem0[ds:0x45AA:word16] = dx
	di = Mem0[ss:sp:word16]
	sp = sp + 2
	sp = bp
	bp = Mem0[ss:sp:word16]
	sp = sp + 2
	return
	// succ:  fn0800_22FE_exit
l0800_23D8:
	ax = Mem0[ds:0x45AA:word16]
	SCZO = cond(ax - Mem0[ss:bp + 0x0004:word16])
	branch Test(ULE,CZ) l0800_23E7
	// succ:  l0800_23E0 l0800_23E7
l0800_23E0:
	ax = Mem0[ss:bp - 0x0008:word16]
	v27 = Mem0[ds:0x45AA:word16] - ax
	Mem0[ds:0x45AA:word16] = v27
	SCZO = cond(v27)
	// succ:  l0800_23E7
l0800_23E7:
	di = Mem0[ss:sp:word16]
	sp = sp + 2
	sp = bp
	bp = Mem0[ss:sp:word16]
	sp = sp + 2
	return
	// succ:  fn0800_22FE_exit
fn0800_22FE_exit:


// fn0800_23EC
// Return size: 2
define fn0800_23EC
fn0800_23EC_entry:
	// succ:  l0800_23EC
l0800_23EC:
	sp = fp
	Top = 0
	sp = sp - 2
	Mem0[ss:sp:word16] = bp
	bp = sp
	sp = sp - 0x0008
	SCZO = cond(sp)
	sp = sp - 2
	Mem0[ss:sp:word16] = di
	v7 = Mem0[ss:bp + 0x0006:word16]
	sp = sp - 2
	Mem0[ss:sp:word16] = v7
	v8 = Mem0[ss:bp + 0x0004:word16]
	sp = sp - 2
	Mem0[ss:sp:word16] = v8
	call fn0800_24FE (retsize: 2;)
	sp = sp + 0x0004
	SCZO = cond(sp)
	Mem0[ss:bp - 0x0006:word16] = dx
	Mem0[ss:bp - 0x0008:word16] = ax
	es_di = Mem0[ss:bp + 0x0004:segptr32]
	ax = ax ^ ax
	SZO = cond(ax)
	C = false
	cx = 0xFFFF
	// succ:  l0800_240D
l0800_240D:
	branch cx == 0x0000 l0800_240F
	// succ:  l0800_240D_1 l0800_240F
l0800_240D_1:
	SCZO = cond(al - Mem0[es:di:byte])
	di = di + 0x0001
	cx = cx - 0x0001
	branch Test(EQ,Z) l0800_240D
	// succ:  l0800_240F l0800_240D
l0800_240F:
	cx = ~cx
	ax = ax ^ ax
	SZO = cond(ax)
	C = false
	di = di - cx
	SCZO = cond(di)
	// succ:  l0800_2415
l0800_2415:
	branch cx == 0x0000 l0800_2417
	// succ:  l0800_2415_2 l0800_2417
l0800_2415_2:
	SCZO = cond(al - Mem0[es:di:byte])
	di = di + 0x0001
	cx = cx - 0x0001
	branch Test(EQ,Z) l0800_2415
	// succ:  l0800_2417 l0800_2415
l0800_2417:
	branch Test(EQ,Z) l0800_2420
	// succ:  l0800_2419 l0800_2420
l0800_2419:
	di = 0x0001
	ax = ax ^ ax
	SZO = cond(ax)
	C = false
	es = ax
	// succ:  l0800_2420
l0800_2420:
	di = di - 0x0001
	SZO = cond(di)
	ax = es
	es = ax
	al = Mem0[es:di + 0x0001:byte]
	ax = (int16) al
	cl = 0x08
	ax = ax << cl
	SCZO = cond(ax)
	es_di = Mem0[ss:bp + 0x0004:segptr32]
	sp = sp - 2
	Mem0[ss:sp:word16] = ax
	ax = ax ^ ax
	SZO = cond(ax)
	C = false
	cx = 0xFFFF
	// succ:  l0800_2437
l0800_2437:
	branch cx == 0x0000 l0800_2439
	// succ:  l0800_2437_1 l0800_2439
l0800_2437_1:
	SCZO = cond(al - Mem0[es:di:byte])
	di = di + 0x0001
	cx = cx - 0x0001
	branch Test(EQ,Z) l0800_2437
	// succ:  l0800_2439 l0800_2437
l0800_2439:
	cx = ~cx
	ax = ax ^ ax
	SZO = cond(ax)
	C = false
	di = di - cx
	SCZO = cond(di)
	// succ:  l0800_243F
l0800_243F:
	branch cx == 0x0000 l0800_2441
	// succ:  l0800_243F_2 l0800_2441
l0800_243F_2:
	SCZO = cond(al - Mem0[es:di:byte])
	di = di + 0x0001
	cx = cx - 0x0001
	branch Test(EQ,Z) l0800_243F
	// succ:  l0800_2441 l0800_243F
l0800_2441:
	branch Test(EQ,Z) l0800_244A
	// succ:  l0800_2443 l0800_244A
l0800_2443:
	di = 0x0001
	ax = ax ^ ax
	SZO = cond(ax)
	C = false
	es = ax
	// succ:  l0800_244A
l0800_244A:
	di = di - 0x0001
	SZO = cond(di)
	ax = es
	es = ax
	al = Mem0[es:di + 0x0002:byte]
	ah = 0x00
	dx = Mem0[ss:sp:word16]
	sp = sp + 2
	dx = dx + ax
	SCZO = cond(dx)
	ax = ax ^ ax
	SZO = cond(ax)
	C = false
	es_di = Mem0[ss:bp + 0x0004:segptr32]
	sp = sp - 2
	Mem0[ss:sp:word16] = dx
	sp = sp - 2
	Mem0[ss:sp:word16] = ax
	cx = 0xFFFF
	// succ:  l0800_2462
l0800_2462:
	branch cx == 0x0000 l0800_2464
	// succ:  l0800_2462_1 l0800_2464
l0800_2462_1:
	SCZO = cond(al - Mem0[es:di:byte])
	di = di + 0x0001
	cx = cx - 0x0001
	branch Test(EQ,Z) l0800_2462
	// succ:  l0800_2464 l0800_2462
l0800_2464:
	cx = ~cx
	ax = ax ^ ax
	SZO = cond(ax)
	C = false
	di = di - cx
	SCZO = cond(di)
	// succ:  l0800_246A
l0800_246A:
	branch cx == 0x0000 l0800_246C
	// succ:  l0800_246A_2 l0800_246C
l0800_246A_2:
	SCZO = cond(al - Mem0[es:di:byte])
	di = di + 0x0001
	cx = cx - 0x0001
	branch Test(EQ,Z) l0800_246A
	// succ:  l0800_246C l0800_246A
l0800_246C:
	branch Test(EQ,Z) l0800_2475
	// succ:  l0800_246E l0800_2475
l0800_246E:
	di = 0x0001
	ax = ax ^ ax
	SZO = cond(ax)
	C = false
	es = ax
	// succ:  l0800_2475
l0800_2475:
	di = di - 0x0001
	SZO = cond(di)
	ax = es
	es = ax
	al = Mem0[es:di + 0x0003:byte]
	ax = (int16) al
	cl = 0x08
	ax = ax << cl
	SCZO = cond(ax)
	es_di = Mem0[ss:bp + 0x0004:segptr32]
	sp = sp - 2
	Mem0[ss:sp:word16] = ax
	ax = ax ^ ax
	SZO = cond(ax)
	C = false
	cx = 0xFFFF
	// succ:  l0800_248C
l0800_248C:
	branch cx == 0x0000 l0800_248E
	// succ:  l0800_248C_1 l0800_248E
l0800_248C_1:
	SCZO = cond(al - Mem0[es:di:byte])
	di = di + 0x0001
	cx = cx - 0x0001
	branch Test(EQ,Z) l0800_248C
	// succ:  l0800_248E l0800_248C
l0800_248E:
	cx = ~cx
	ax = ax ^ ax
	SZO = cond(ax)
	C = false
	di = di - cx
	SCZO = cond(di)
	// succ:  l0800_2494
l0800_2494:
	branch cx == 0x0000 l0800_2496
	// succ:  l0800_2494_2 l0800_2496
l0800_2494_2:
	SCZO = cond(al - Mem0[es:di:byte])
	di = di + 0x0001
	cx = cx - 0x0001
	branch Test(EQ,Z) l0800_2494
	// succ:  l0800_2496 l0800_2494
l0800_2496:
	branch Test(EQ,Z) l0800_249F
	// succ:  l0800_2498 l0800_249F
l0800_2498:
	di = 0x0001
	ax = ax ^ ax
	SZO = cond(ax)
	C = false
	es = ax
	// succ:  l0800_249F
l0800_249F:
	di = di - 0x0001
	SZO = cond(di)
	ax = es
	es = ax
	al = Mem0[es:di + 0x0004:byte]
	ah = 0x00
	dx = Mem0[ss:sp:word16]
	sp = sp + 2
	dx = dx + ax
	SCZO = cond(dx)
	ax = Mem0[ss:sp:word16]
	sp = sp + 2
	ax = ax + dx
	SCZO = cond(ax)
	dx = Mem0[ss:sp:word16]
	sp = sp + 2
	dx = dx + 0x00 + C
	SCZO = cond(dx)
	Mem0[ss:bp - 0x0002:word16] = dx
	Mem0[ss:bp - 0x0004:word16] = ax
	v20 = Mem0[ss:bp - 0x0006:word16]
	sp = sp - 2
	Mem0[ss:sp:word16] = v20
	v21 = Mem0[ss:bp - 0x0008:word16]
	sp = sp - 2
	Mem0[ss:sp:word16] = v21
	ax = Mem0[ss:bp - 0x0002:word16]
	dx = Mem0[ss:bp - 0x0004:word16]
	dx = dx - Mem0[ds:0x45A6:word16]
	SCZO = cond(dx)
	ax = ax - Mem0[ds:0x45A8:word16] - C
	SCZO = cond(ax)
	sp = sp - 2
	Mem0[ss:sp:word16] = ax
	sp = sp - 2
	Mem0[ss:sp:word16] = dx
	v23 = Mem0[ds:0x29D1:word16]
	sp = sp - 2
	Mem0[ss:sp:word16] = v23
	v24 = Mem0[ds:0x29CF:word16]
	sp = sp - 2
	Mem0[ss:sp:word16] = v24
	call fn0800_3C99 (retsize: 2;)
	sp = sp + 0x000C
	SCZO = cond(sp)
	v25 = Mem0[ss:bp - 0x0002:word16]
	sp = sp - 2
	Mem0[ss:sp:word16] = v25
	v26 = Mem0[ss:bp - 0x0004:word16]
	sp = sp - 2
	Mem0[ss:sp:word16] = v26
	ax = Mem0[ss:bp - 0x0006:word16]
	dx = Mem0[ss:bp - 0x0008:word16]
	ax = -ax
	SCZO = cond(ax)
	C = ax == 0x0000
	dx = -dx
	SCZO = cond(dx)
	C = dx == 0x0000
	ax = ax - 0x0000 - C
	SCZO = cond(ax)
	sp = sp - 2
	Mem0[ss:sp:word16] = ax
	sp = sp - 2
	Mem0[ss:sp:word16] = dx
	call fn0800_2688 (retsize: 2;)
	sp = sp + 0x0008
	SCZO = cond(sp)
	di = Mem0[ss:sp:word16]
	sp = sp + 2
	sp = bp
	bp = Mem0[ss:sp:word16]
	sp = sp + 2
	return
	// succ:  fn0800_23EC_exit
fn0800_23EC_exit:


// fn0800_24FE
// Return size: 2
define fn0800_24FE
fn0800_24FE_entry:
	// succ:  l0800_24FE
l0800_24FE:
	sp = fp
	Top = 0
	sp = sp - 2
	Mem0[ss:sp:word16] = bp
	bp = sp
	sp = sp - 0x000C
	SCZO = cond(sp)
	sp = sp - 2
	Mem0[ss:sp:word16] = di
	es_di = Mem0[ss:bp + 0x0004:segptr32]
	ax = ax ^ ax
	SZO = cond(ax)
	C = false
	cx = 0xFFFF
	// succ:  l0800_250D
l0800_250D:
	branch cx == 0x0000 l0800_250F
	// succ:  l0800_250D_1 l0800_250F
l0800_250D_1:
	SCZO = cond(al - Mem0[es:di:byte])
	di = di + 0x0001
	cx = cx - 0x0001
	branch Test(EQ,Z) l0800_250D
	// succ:  l0800_250F l0800_250D
l0800_250F:
	cx = ~cx
	ax = ax ^ ax
	SZO = cond(ax)
	C = false
	di = di - cx
	SCZO = cond(di)
	// succ:  l0800_2515
l0800_2515:
	branch cx == 0x0000 l0800_2517
	// succ:  l0800_2515_2 l0800_2517
l0800_2515_2:
	SCZO = cond(al - Mem0[es:di:byte])
	di = di + 0x0001
	cx = cx - 0x0001
	branch Test(EQ,Z) l0800_2515
	// succ:  l0800_2517 l0800_2515
l0800_2517:
	branch Test(EQ,Z) l0800_2520
	// succ:  l0800_2519 l0800_2520
l0800_2519:
	di = 0x0001
	ax = ax ^ ax
	SZO = cond(ax)
	C = false
	es = ax
	// succ:  l0800_2520
l0800_2520:
	di = di - 0x0001
	SZO = cond(di)
	ax = es
	es = ax
	al = Mem0[es:di + 0x0001:byte]
	ax = (int16) al
	cl = 0x08
	ax = ax << cl
	SCZO = cond(ax)
	es_di = Mem0[ss:bp + 0x0004:segptr32]
	sp = sp - 2
	Mem0[ss:sp:word16] = ax
	ax = ax ^ ax
	SZO = cond(ax)
	C = false
	cx = 0xFFFF
	// succ:  l0800_2537
l0800_2537:
	branch cx == 0x0000 l0800_2539
	// succ:  l0800_2537_1 l0800_2539
l0800_2537_1:
	SCZO = cond(al - Mem0[es:di:byte])
	di = di + 0x0001
	cx = cx - 0x0001
	branch Test(EQ,Z) l0800_2537
	// succ:  l0800_2539 l0800_2537
l0800_2539:
	cx = ~cx
	ax = ax ^ ax
	SZO = cond(ax)
	C = false
	di = di - cx
	SCZO = cond(di)
	// succ:  l0800_253F
l0800_253F:
	branch cx == 0x0000 l0800_2541
	// succ:  l0800_253F_2 l0800_2541
l0800_253F_2:
	SCZO = cond(al - Mem0[es:di:byte])
	di = di + 0x0001
	cx = cx - 0x0001
	branch Test(EQ,Z) l0800_253F
	// succ:  l0800_2541 l0800_253F
l0800_2541:
	branch Test(EQ,Z) l0800_254A
	// succ:  l0800_2543 l0800_254A
l0800_2543:
	di = 0x0001
	ax = ax ^ ax
	SZO = cond(ax)
	C = false
	es = ax
	// succ:  l0800_254A
l0800_254A:
	di = di - 0x0001
	SZO = cond(di)
	ax = es
	es = ax
	al = Mem0[es:di + 0x0002:byte]
	ah = 0x00
	dx = Mem0[ss:sp:word16]
	sp = sp + 2
	dx = dx + ax
	SCZO = cond(dx)
	ax = ax ^ ax
	SZO = cond(ax)
	C = false
	es_di = Mem0[ss:bp + 0x0004:segptr32]
	sp = sp - 2
	Mem0[ss:sp:word16] = dx
	sp = sp - 2
	Mem0[ss:sp:word16] = ax
	cx = 0xFFFF
	// succ:  l0800_2562
l0800_2562:
	branch cx == 0x0000 l0800_2564
	// succ:  l0800_2562_1 l0800_2564
l0800_2562_1:
	SCZO = cond(al - Mem0[es:di:byte])
	di = di + 0x0001
	cx = cx - 0x0001
	branch Test(EQ,Z) l0800_2562
	// succ:  l0800_2564 l0800_2562
l0800_2564:
	cx = ~cx
	ax = ax ^ ax
	SZO = cond(ax)
	C = false
	di = di - cx
	SCZO = cond(di)
	// succ:  l0800_256A
l0800_256A:
	branch cx == 0x0000 l0800_256C
	// succ:  l0800_256A_2 l0800_256C
l0800_256A_2:
	SCZO = cond(al - Mem0[es:di:byte])
	di = di + 0x0001
	cx = cx - 0x0001
	branch Test(EQ,Z) l0800_256A
	// succ:  l0800_256C l0800_256A
l0800_256C:
	branch Test(EQ,Z) l0800_2575
	// succ:  l0800_256E l0800_2575
l0800_256E:
	di = 0x0001
	ax = ax ^ ax
	SZO = cond(ax)
	C = false
	es = ax
	// succ:  l0800_2575
l0800_2575:
	di = di - 0x0001
	SZO = cond(di)
	ax = es
	es = ax
	al = Mem0[es:di + 0x0003:byte]
	ax = (int16) al
	cl = 0x08
	ax = ax << cl
	SCZO = cond(ax)
	es_di = Mem0[ss:bp + 0x0004:segptr32]
	sp = sp - 2
	Mem0[ss:sp:word16] = ax
	ax = ax ^ ax
	SZO = cond(ax)
	C = false
	cx = 0xFFFF
	// succ:  l0800_258C
l0800_258C:
	branch cx == 0x0000 l0800_258E
	// succ:  l0800_258C_1 l0800_258E
l0800_258C_1:
	SCZO = cond(al - Mem0[es:di:byte])
	di = di + 0x0001
	cx = cx - 0x0001
	branch Test(EQ,Z) l0800_258C
	// succ:  l0800_258E l0800_258C
l0800_258E:
	cx = ~cx
	ax = ax ^ ax
	SZO = cond(ax)
	C = false
	di = di - cx
	SCZO = cond(di)
	// succ:  l0800_2594
l0800_2594:
	branch cx == 0x0000 l0800_2596
	// succ:  l0800_2594_2 l0800_2596
l0800_2594_2:
	SCZO = cond(al - Mem0[es:di:byte])
	di = di + 0x0001
	cx = cx - 0x0001
	branch Test(EQ,Z) l0800_2594
	// succ:  l0800_2596 l0800_2594
l0800_2596:
	branch Test(EQ,Z) l0800_259F
	// succ:  l0800_2598 l0800_259F
l0800_2598:
	di = 0x0001
	ax = ax ^ ax
	SZO = cond(ax)
	C = false
	es = ax
	// succ:  l0800_259F
l0800_259F:
	di = di - 0x0001
	SZO = cond(di)
	ax = es
	es = ax
	al = Mem0[es:di + 0x0004:byte]
	ah = 0x00
	dx = Mem0[ss:sp:word16]
	sp = sp + 2
	dx = dx + ax
	SCZO = cond(dx)
	ax = Mem0[ss:sp:word16]
	sp = sp + 2
	ax = ax + dx
	SCZO = cond(ax)
	dx = Mem0[ss:sp:word16]
	sp = sp + 2
	dx = dx + 0x00 + C
	SCZO = cond(dx)
	ax = ax - Mem0[ds:0x45A6:word16]
	SCZO = cond(ax)
	dx = dx - Mem0[ds:0x45A8:word16] - C
	SCZO = cond(dx)
	Mem0[ss:bp - 0x0002:word16] = dx
	Mem0[ss:bp - 0x0004:word16] = ax
	ax = ax ^ ax
	SZO = cond(ax)
	C = false
	sp = sp - 2
	Mem0[ss:sp:word16] = ax
	v19 = Mem0[ss:bp - 0x0002:word16]
	sp = sp - 2
	Mem0[ss:sp:word16] = v19
	v20 = Mem0[ss:bp - 0x0004:word16]
	sp = sp - 2
	Mem0[ss:sp:word16] = v20
	v21 = Mem0[ds:0x29D1:word16]
	sp = sp - 2
	Mem0[ss:sp:word16] = v21
	v22 = Mem0[ds:0x29CF:word16]
	sp = sp - 2
	Mem0[ss:sp:word16] = v22
	call fn0800_ACB3 (retsize: 2;)
	sp = sp + 0x000A
	SCZO = cond(sp)
	v23 = Mem0[ds:0x29D1:word16]
	sp = sp - 2
	Mem0[ss:sp:word16] = v23
	v24 = Mem0[ds:0x29CF:word16]
	sp = sp - 2
	Mem0[ss:sp:word16] = v24
	call fn0800_3E5D (retsize: 2;)
	sp = sp + 0x0004
	SCZO = cond(sp)
	Mem0[ss:bp - 0x0006:word16] = dx
	Mem0[ss:bp - 0x0008:word16] = ax
	cl = 0x08
	call fn0800_8C8A (retsize: 2;)
	SCZO = cond(dx - 0x0052)
	branch Test(NE,Z) l0800_25FC
	// succ:  l0800_25F7 l0800_25FC
l0800_25F7:
	SCZO = cond(ax - 0x4E43)
	branch Test(EQ,Z) l0800_260B
	// succ:  l0800_25FC l0800_260B
l0800_25FC:
	sp = sp - 2
	Mem0[ss:sp:word16] = ds
	ax = 0x4348
	sp = sp - 2
	Mem0[ss:sp:word16] = ax
	ax = 0x000C
	sp = sp - 2
	Mem0[ss:sp:word16] = ax
	call fn0800_0D24 (retsize: 2;)
	sp = sp + 0x0006
	SCZO = cond(sp)
	// succ:  l0800_260B
l0800_260B:
	ax = Mem0[ss:bp - 0x0008:word16]
	ax = ax & 0x00FF
	SZO = cond(ax)
	C = false
	ax = ax | 0x0000
	SZO = cond(ax)
	C = false
	branch Test(EQ,Z) l0800_2655
	// succ:  l0800_2616 l0800_2655
l0800_2616:
	v25 = Mem0[ds:0x29D1:word16]
	sp = sp - 2
	Mem0[ss:sp:word16] = v25
	v26 = Mem0[ds:0x29CF:word16]
	sp = sp - 2
	Mem0[ss:sp:word16] = v26
	call fn0800_3E5D (retsize: 2;)
	sp = sp + 0x0004
	SCZO = cond(sp)
	Mem0[ds:0x2A09:word16] = dx
	Mem0[ds:0x2A07:word16] = ax
	v27 = Mem0[ds:0x29D1:word16]
	sp = sp - 2
	Mem0[ss:sp:word16] = v27
	v28 = Mem0[ds:0x29CF:word16]
	sp = sp - 2
	Mem0[ss:sp:word16] = v28
	call fn0800_3E5D (retsize: 2;)
	sp = sp + 0x0004
	SCZO = cond(sp)
	Mem0[ds:0x2A05:word16] = dx
	Mem0[ds:0x2A03:word16] = ax
	ax = Mem0[ds:0x2A05:word16]
	dx = Mem0[ds:0x2A03:word16]
	dx = dx + 0x0012
	SCZO = cond(dx)
	ax = ax + 0x0000 + C
	SCZO = cond(ax)
	Mem0[ss:bp - 0x000A:word16] = ax
	Mem0[ss:bp - 0x000C:word16] = dx
	goto l0800_267D
	// succ:  l0800_267D
l0800_2655:
	v29 = Mem0[ds:0x29D1:word16]
	sp = sp - 2
	Mem0[ss:sp:word16] = v29
	v30 = Mem0[ds:0x29CF:word16]
	sp = sp - 2
	Mem0[ss:sp:word16] = v30
	call fn0800_3E5D (retsize: 2;)
	sp = sp + 0x0004
	SCZO = cond(sp)
	Mem0[ds:0x2A05:word16] = dx
	Mem0[ds:0x2A03:word16] = ax
	Mem0[ds:0x2A09:word16] = dx
	Mem0[ds:0x2A07:word16] = ax
	ax = ax + 0x0008
	SCZO = cond(ax)
	dx = dx + 0x00 + C
	SCZO = cond(dx)
	Mem0[ss:bp - 0x000A:word16] = dx
	Mem0[ss:bp - 0x000C:word16] = ax
	// succ:  l0800_267D
l0800_267D:
	dx = Mem0[ss:bp - 0x000A:word16]
	ax = Mem0[ss:bp - 0x000C:word16]
	di = Mem0[ss:sp:word16]
	sp = sp + 2
	sp = bp
	bp = Mem0[ss:sp:word16]
	sp = sp + 2
	return
	// succ:  fn0800_24FE_exit
fn0800_24FE_exit:


// fn0800_2688
// Return size: 2
define fn0800_2688
fn0800_2688_entry:
	// succ:  l0800_2688
l0800_2688:
	sp = fp
	Top = 0
	sp = sp - 2
	Mem0[ss:sp:word16] = bp
	bp = sp
	sp = sp - 0x0010
	SCZO = cond(sp)
	es_bx = Mem0[ds:0x2E51:segptr32]
	al = Mem0[es:bx + 0x0004:byte]
	ah = 0x00
	cl = 0x08
	ax = ax << cl
	SCZO = cond(ax)
	dl = Mem0[es:bx + 0x0005:byte]
	dh = 0x00
	ax = ax + dx
	SCZO = cond(ax)
	dx = Mem0[ds:0x2E53:word16]
	bx = bx + ax
	SCZO = cond(bx)
	Mem0[ss:bp - 0x0006:word16] = dx
	Mem0[ss:bp - 0x0008:word16] = bx
	ax = Mem0[ds:0x2E53:word16]
	dx = Mem0[ds:0x2E51:word16]
	dx = dx + 0x0008
	SCZO = cond(dx)
	Mem0[ss:bp - 0x0002:word16] = ax
	Mem0[ss:bp - 0x0004:word16] = dx
	goto l0800_27B3
	// succ:  l0800_27B3
l0800_26C3:
	ax = Mem0[ss:bp - 0x0002:word16]
	dx = Mem0[ss:bp - 0x0004:word16]
	Mem0[ss:bp - 0x000A:word16] = ax
	Mem0[ss:bp - 0x000C:word16] = dx
	v18 = Mem0[ss:bp - 0x0004:word16] + 0x0002
	Mem0[ss:bp - 0x0004:word16] = v18
	SCZO = cond(v18)
	// succ:  l0800_26D3
l0800_26D3:
	es_bx = Mem0[ss:bp - 0x0004:segptr32]
	v19 = Mem0[ss:bp - 0x0004:word16] + 0x0001
	Mem0[ss:bp - 0x0004:word16] = v19
	SZO = cond(v19)
	SCZO = cond(Mem0[es:bx:byte] - 0x00)
	branch Test(NE,Z) l0800_26D3
	// succ:  l0800_26DF l0800_26D3
l0800_26DF:
	goto l0800_277D
	// succ:  l0800_277D
l0800_26E2:
	es_bx = Mem0[ss:bp - 0x0004:segptr32]
	v25 = Mem0[ss:bp - 0x0004:word16] + 0x0001
	Mem0[ss:bp - 0x0004:word16] = v25
	SZO = cond(v25)
	SCZO = cond(Mem0[es:bx:byte] - 0x00)
	branch Test(NE,Z) l0800_26E2
	// succ:  l0800_26EE l0800_26E2
l0800_26EE:
	es_bx = Mem0[ss:bp - 0x0004:segptr32]
	al = Mem0[es:bx:byte]
	ax = (int16) al
	cl = 0x08
	ax = ax << cl
	SCZO = cond(ax)
	dl = Mem0[es:bx + 0x0001:byte]
	dh = 0x00
	ax = ax + dx
	SCZO = cond(ax)
	dx = dx ^ dx
	SZO = cond(dx)
	C = false
	sp = sp - 2
	Mem0[ss:sp:word16] = ax
	al = Mem0[es:bx + 0x0002:byte]
	ax = (int16) al
	ax = ax << cl
	SCZO = cond(ax)
	bl = Mem0[es:bx + 0x0003:byte]
	bh = 0x00
	ax = ax + bx
	SCZO = cond(ax)
	dx = dx + ax
	SCZO = cond(dx)
	ax = Mem0[ss:sp:word16]
	sp = sp + 2
	ax = ax + 0x0000 + C
	SCZO = cond(ax)
	Mem0[ss:bp - 0x000E:word16] = ax
	Mem0[ss:bp - 0x0010:word16] = dx
	ax = Mem0[ss:bp - 0x000E:word16]
	SCZO = cond(ax - Mem0[ss:bp + 0x000A:word16])
	branch Test(LT,SO) l0800_2779
	// succ:  l0800_2727 l0800_2779
l0800_2727:
	branch Test(NE,Z) l0800_272E
	// succ:  l0800_2729 l0800_272E
l0800_2729:
	SCZO = cond(dx - Mem0[ss:bp + 0x0008:word16])
	branch Test(ULT,C) l0800_2779
	// succ:  l0800_272E l0800_2779
l0800_272E:
	ax = Mem0[ss:bp - 0x000E:word16]
	dx = Mem0[ss:bp - 0x0010:word16]
	dx = dx + Mem0[ss:bp + 0x0004:word16]
	SCZO = cond(dx)
	ax = ax + Mem0[ss:bp + 0x0006:word16] + C
	SCZO = cond(ax)
	dx_ax = (int32) ax
	cl = 0x08
	call fn0800_8C8A (retsize: 2;)
	es_bx = Mem0[ss:bp - 0x0004:segptr32]
	Mem0[es:bx:byte] = al
	ax = Mem0[ss:bp - 0x000E:word16]
	dx = Mem0[ss:bp - 0x0010:word16]
	dx = dx + Mem0[ss:bp + 0x0004:word16]
	SCZO = cond(dx)
	ax = ax + Mem0[ss:bp + 0x0006:word16] + C
	SCZO = cond(ax)
	dx_ax = (int32) ax
	Mem0[es:bx + 0x0001:byte] = al
	dx = Mem0[ss:bp - 0x000E:word16]
	ax = Mem0[ss:bp - 0x0010:word16]
	ax = ax + Mem0[ss:bp + 0x0004:word16]
	SCZO = cond(ax)
	dx = dx + Mem0[ss:bp + 0x0006:word16] + C
	SCZO = cond(dx)
	cl = 0x08
	call fn0800_8C8A (retsize: 2;)
	es_bx = Mem0[ss:bp - 0x0004:segptr32]
	Mem0[es:bx + 0x0002:byte] = al
	al = Mem0[ss:bp - 0x0010:byte]
	al = al + Mem0[ss:bp + 0x0004:byte]
	SCZO = cond(al)
	Mem0[es:bx + 0x0003:byte] = al
	// succ:  l0800_2779
l0800_2779:
	v30 = Mem0[ss:bp - 0x0004:word16] + 0x0004
	Mem0[ss:bp - 0x0004:word16] = v30
	SCZO = cond(v30)
	// succ:  l0800_277D
l0800_277D:
	es_bx = Mem0[ss:bp - 0x0004:segptr32]
	SCZO = cond(Mem0[es:bx:byte] - 0x00)
	branch Test(EQ,Z) l0800_2789
	// succ:  l0800_2786 l0800_2789
l0800_2786:
	goto l0800_26E2
	// succ:  l0800_26E2
l0800_2789:
	v24 = Mem0[ss:bp - 0x0004:word16] + 0x0001
	Mem0[ss:bp - 0x0004:word16] = v24
	SZO = cond(v24)
	ax = Mem0[ss:bp - 0x0004:word16]
	dx = dx ^ dx
	SZO = cond(dx)
	C = false
	ax = ax - Mem0[ds:0x2E51:word16]
	SCZO = cond(ax)
	dx = dx - 0x00 - C
	SCZO = cond(dx)
	cl = 0x08
	call fn0800_8C8A (retsize: 2;)
	es_bx = Mem0[ss:bp - 0x000C:segptr32]
	Mem0[es:bx:byte] = al
	ax = Mem0[ss:bp - 0x0004:word16]
	dx = dx ^ dx
	SZO = cond(dx)
	C = false
	ax = ax - Mem0[ds:0x2E51:word16]
	SCZO = cond(ax)
	dx = dx - 0x00 - C
	SCZO = cond(dx)
	Mem0[es:bx + 0x0001:byte] = al
	// succ:  l0800_27B3
l0800_27B3:
	ax = Mem0[ss:bp - 0x0002:word16]
	dx = Mem0[ss:bp - 0x0004:word16]
	SCZO = cond(ax - Mem0[ss:bp - 0x0006:word16])
	branch Test(EQ,Z) l0800_27C1
	// succ:  l0800_27BE l0800_27C1
l0800_27BE:
	goto l0800_26C3
	// succ:  l0800_26C3
l0800_27C1:
	SCZO = cond(dx - Mem0[ss:bp - 0x0008:word16])
	branch Test(EQ,Z) l0800_27C9
	// succ:  l0800_27C6 l0800_27C9
l0800_27C6:
	goto l0800_26C3
	// succ:  l0800_26C3
l0800_27C9:
	ax = Mem0[ss:bp + 0x0008:word16]
	ax = ax | Mem0[ss:bp + 0x000A:word16]
	SZO = cond(ax)
	C = false
	branch Test(NE,Z) l0800_27DF
	// succ:  l0800_27D1 l0800_27DF
l0800_27D1:
	ax = Mem0[ss:bp + 0x0006:word16]
	dx = Mem0[ss:bp + 0x0004:word16]
	v22 = Mem0[ds:0x45A6:word16] + dx
	Mem0[ds:0x45A6:word16] = v22
	SCZO = cond(v22)
	v23 = Mem0[ds:0x45A8:word16] + ax + C
	Mem0[ds:0x45A8:word16] = v23
	SCZO = cond(v23)
	// succ:  l0800_27DF
l0800_27DF:
	sp = bp
	bp = Mem0[ss:sp:word16]
	sp = sp + 2
	return
	// succ:  fn0800_2688_exit
fn0800_2688_exit:


// fn0800_283D
// Return size: 2
define fn0800_283D
fn0800_283D_entry:
	// succ:  l0800_283D
l0800_283D:
	sp = fp
	Top = 0
	sp = sp - 2
	Mem0[ss:sp:word16] = bp
	bp = sp
	sp = sp - 0x0008
	SCZO = cond(sp)
	sp = sp - 2
	Mem0[ss:sp:word16] = si
	sp = sp - 2
	Mem0[ss:sp:word16] = di
	es_di = Mem0[ss:bp + 0x0004:segptr32]
	ax = ax ^ ax
	SZO = cond(ax)
	C = false
	cx = 0xFFFF
	// succ:  l0800_284D
l0800_284D:
	branch cx == 0x0000 l0800_284F
	// succ:  l0800_284D_1 l0800_284F
l0800_284D_1:
	SCZO = cond(al - Mem0[es:di:byte])
	di = di + 0x0001
	cx = cx - 0x0001
	branch Test(EQ,Z) l0800_284D
	// succ:  l0800_284F l0800_284D
l0800_284F:
	cx = ~cx
	ax = 0x003A
	di = di - cx
	SCZO = cond(di)
	// succ:  l0800_2856
l0800_2856:
	branch cx == 0x0000 l0800_2858
	// succ:  l0800_2856_2 l0800_2858
l0800_2856_2:
	SCZO = cond(al - Mem0[es:di:byte])
	di = di + 0x0001
	cx = cx - 0x0001
	branch Test(EQ,Z) l0800_2856
	// succ:  l0800_2858 l0800_2856
l0800_2858:
	branch Test(EQ,Z) l0800_2861
	// succ:  l0800_285A l0800_2861
l0800_285A:
	di = 0x0001
	ax = ax ^ ax
	SZO = cond(ax)
	C = false
	es = ax
	// succ:  l0800_2861
l0800_2861:
	di = di - 0x0001
	SZO = cond(di)
	ax = es
	di = di | ax
	SZO = cond(di)
	C = false
	branch Test(EQ,Z) l0800_288E
	// succ:  l0800_2868 l0800_288E
l0800_2868:
	es_di = Mem0[ss:bp + 0x0004:segptr32]
	ax = ax ^ ax
	SZO = cond(ax)
	C = false
	cx = 0xFFFF
	// succ:  l0800_2870
l0800_2870:
	branch cx == 0x0000 l0800_2872
	// succ:  l0800_2870_1 l0800_2872
l0800_2870_1:
	SCZO = cond(al - Mem0[es:di:byte])
	di = di + 0x0001
	cx = cx - 0x0001
	branch Test(EQ,Z) l0800_2870
	// succ:  l0800_2872 l0800_2870
l0800_2872:
	cx = ~cx
	ax = 0x003A
	di = di - cx
	SCZO = cond(di)
	// succ:  l0800_2879
l0800_2879:
	branch cx == 0x0000 l0800_287B
	// succ:  l0800_2879_2 l0800_287B
l0800_2879_2:
	SCZO = cond(al - Mem0[es:di:byte])
	di = di + 0x0001
	cx = cx - 0x0001
	branch Test(EQ,Z) l0800_2879
	// succ:  l0800_287B l0800_2879
l0800_287B:
	branch Test(EQ,Z) l0800_2884
	// succ:  l0800_287D l0800_2884
l0800_287D:
	di = 0x0001
	ax = ax ^ ax
	SZO = cond(ax)
	C = false
	es = ax
	// succ:  l0800_2884
l0800_2884:
	di = di - 0x0001
	SZO = cond(di)
	ax = es
	di = di + 0x0001
	SZO = cond(di)
	Mem0[ss:bp + 0x0006:word16] = ax
	Mem0[ss:bp + 0x0004:word16] = di
	// succ:  l0800_288E
l0800_288E:
	es_bx = Mem0[ds:0x2E51:segptr32]
	al = Mem0[es:bx + 0x0004:byte]
	ah = 0x00
	cl = 0x08
	ax = ax << cl
	SCZO = cond(ax)
	dl = Mem0[es:bx + 0x0005:byte]
	dh = 0x00
	ax = ax + dx
	SCZO = cond(ax)
	dx = Mem0[ds:0x2E53:word16]
	bx = bx + ax
	SCZO = cond(bx)
	Mem0[ss:bp - 0x0002:word16] = dx
	Mem0[ss:bp - 0x0004:word16] = bx
	ax = Mem0[ds:0x2E53:word16]
	dx = Mem0[ds:0x2E51:word16]
	dx = dx + 0x0008
	SCZO = cond(dx)
	Mem0[ss:bp - 0x0006:word16] = ax
	Mem0[ss:bp - 0x0008:word16] = dx
	goto l0800_2917
	// succ:  l0800_2917
l0800_28C2:
	si = Mem0[ss:bp - 0x0008:word16]
	si = si + 0x0002
	SCZO = cond(si)
	sp = sp - 2
	Mem0[ss:sp:word16] = ds
	ds = Mem0[ss:bp - 0x0006:selector]
	es_di = Mem0[ss:bp + 0x0004:segptr32]
	ax = ax ^ ax
	SZO = cond(ax)
	C = false
	cx = 0xFFFF
	// succ:  l0800_28D4
l0800_28D4:
	branch cx == 0x0000 l0800_28D6
	// succ:  l0800_28D4_1 l0800_28D6
l0800_28D4_1:
	SCZO = cond(al - Mem0[es:di:byte])
	di = di + 0x0001
	cx = cx - 0x0001
	branch Test(EQ,Z) l0800_28D4
	// succ:  l0800_28D6 l0800_28D4
l0800_28D6:
	cx = ~cx
	di = di - cx
	SCZO = cond(di)
	// succ:  l0800_28DA
l0800_28DA:
	branch cx == 0x0000 l0800_28DC
	// succ:  l0800_28DA_2 l0800_28DC
l0800_28DA_2:
	SCZO = cond(Mem0[ds:si:byte] - Mem0[es:di:byte])
	si = si + 0x0001
	di = di + 0x0001
	cx = cx - 0x0001
	branch Test(NE,Z) l0800_28DA
	// succ:  l0800_28DC l0800_28DA
l0800_28DC:
	branch Test(EQ,Z) l0800_28E3
	// succ:  l0800_28DE l0800_28E3
l0800_28DE:
	ax = ax - ax - C
	SCZO = cond(ax)
	ax = ax - 0xFFFF - C
	SCZO = cond(ax)
	// succ:  l0800_28E3
l0800_28E3:
	ds = Mem0[ss:sp:selector]
	sp = sp + 2
	ax = ax | ax
	SZO = cond(ax)
	C = false
	branch Test(NE,Z) l0800_28F4
	// succ:  l0800_28E8 l0800_28F4
l0800_28E8:
	dx = Mem0[ss:bp - 0x0006:word16]
	ax = Mem0[ss:bp - 0x0008:word16]
	di = Mem0[ss:sp:word16]
	sp = sp + 2
	si = Mem0[ss:sp:word16]
	sp = sp + 2
	sp = bp
	bp = Mem0[ss:sp:word16]
	sp = sp + 2
	return
	// succ:  fn0800_283D_exit
l0800_28F4:
	es_bx = Mem0[ss:bp - 0x0008:segptr32]
	al = Mem0[es:bx:byte]
	ax = (int16) al
	cl = 0x08
	ax = ax << cl
	SCZO = cond(ax)
	dl = Mem0[es:bx + 0x0001:byte]
	dh = 0x00
	ax = ax + dx
	SCZO = cond(ax)
	dx = Mem0[ds:0x2E53:word16]
	bx = Mem0[ds:0x2E51:word16]
	bx = bx + ax
	SCZO = cond(bx)
	Mem0[ss:bp - 0x0006:word16] = dx
	Mem0[ss:bp - 0x0008:word16] = bx
	// succ:  l0800_2917
l0800_2917:
	ax = Mem0[ss:bp - 0x0006:word16]
	dx = Mem0[ss:bp - 0x0008:word16]
	SCZO = cond(ax - Mem0[ss:bp - 0x0002:word16])
	branch Test(NE,Z) l0800_28C2
	// succ:  l0800_2922 l0800_28C2
l0800_2922:
	SCZO = cond(dx - Mem0[ss:bp - 0x0004:word16])
	branch Test(NE,Z) l0800_28C2
	// succ:  l0800_2927 l0800_28C2
l0800_2927:
	dx = dx ^ dx
	SZO = cond(dx)
	C = false
	ax = ax ^ ax
	SZO = cond(ax)
	C = false
	di = Mem0[ss:sp:word16]
	sp = sp + 2
	si = Mem0[ss:sp:word16]
	sp = sp + 2
	sp = bp
	bp = Mem0[ss:sp:word16]
	sp = sp + 2
	return
	// succ:  fn0800_283D_exit
fn0800_283D_exit:


// fn0800_2931
// Return size: 2
define fn0800_2931
fn0800_2931_entry:
	// succ:  l0800_2931
l0800_2931:
	sp = fp
	Top = 0
	sp = sp - 2
	Mem0[ss:sp:word16] = bp
	bp = sp
	sp = sp - 2
	Mem0[ss:sp:word16] = si
	sp = sp - 2
	Mem0[ss:sp:word16] = di
	es_di = Mem0[ss:bp + 0x0008:segptr32]
	di = di + 0x0002
	SCZO = cond(di)
	ax = ax ^ ax
	SZO = cond(ax)
	C = false
	cx = 0xFFFF
	// succ:  l0800_2941
l0800_2941:
	branch cx == 0x0000 l0800_2943
	// succ:  l0800_2941_1 l0800_2943
l0800_2941_1:
	SCZO = cond(al - Mem0[es:di:byte])
	di = di + 0x0001
	cx = cx - 0x0001
	branch Test(EQ,Z) l0800_2941
	// succ:  l0800_2943 l0800_2941
l0800_2943:
	cx = ~cx
	ax = ax ^ ax
	SZO = cond(ax)
	C = false
	di = di - cx
	SCZO = cond(di)
	// succ:  l0800_2949
l0800_2949:
	branch cx == 0x0000 l0800_294B
	// succ:  l0800_2949_2 l0800_294B
l0800_2949_2:
	SCZO = cond(al - Mem0[es:di:byte])
	di = di + 0x0001
	cx = cx - 0x0001
	branch Test(EQ,Z) l0800_2949
	// succ:  l0800_294B l0800_2949
l0800_294B:
	branch Test(EQ,Z) l0800_2954
	// succ:  l0800_294D l0800_2954
l0800_294D:
	di = 0x0001
	ax = ax ^ ax
	SZO = cond(ax)
	C = false
	es = ax
	// succ:  l0800_2954
l0800_2954:
	di = di - 0x0001
	SZO = cond(di)
	ax = es
	di = di + 0x0001
	SZO = cond(di)
	Mem0[ss:bp + 0x000A:word16] = ax
	Mem0[ss:bp + 0x0008:word16] = di
	goto l0800_29B4
	// succ:  l0800_29B4
l0800_2960:
	si = Mem0[ss:bp + 0x0008:word16]
	sp = sp - 2
	Mem0[ss:sp:word16] = ds
	ds = Mem0[ss:bp + 0x000A:selector]
	es_di = Mem0[ss:bp + 0x0004:segptr32]
	ax = ax ^ ax
	SZO = cond(ax)
	C = false
	cx = 0xFFFF
	// succ:  l0800_296F
l0800_296F:
	branch cx == 0x0000 l0800_2971
	// succ:  l0800_296F_1 l0800_2971
l0800_296F_1:
	SCZO = cond(al - Mem0[es:di:byte])
	di = di + 0x0001
	cx = cx - 0x0001
	branch Test(EQ,Z) l0800_296F
	// succ:  l0800_2971 l0800_296F
l0800_2971:
	cx = ~cx
	di = di - cx
	SCZO = cond(di)
	// succ:  l0800_2975
l0800_2975:
	branch cx == 0x0000 l0800_2977
	// succ:  l0800_2975_2 l0800_2977
l0800_2975_2:
	SCZO = cond(Mem0[ds:si:byte] - Mem0[es:di:byte])
	si = si + 0x0001
	di = di + 0x0001
	cx = cx - 0x0001
	branch Test(NE,Z) l0800_2975
	// succ:  l0800_2977 l0800_2975
l0800_2977:
	branch Test(EQ,Z) l0800_297E
	// succ:  l0800_2979 l0800_297E
l0800_2979:
	ax = ax - ax - C
	SCZO = cond(ax)
	ax = ax - 0xFFFF - C
	SCZO = cond(ax)
	// succ:  l0800_297E
l0800_297E:
	ds = Mem0[ss:sp:selector]
	sp = sp + 2
	ax = ax | ax
	SZO = cond(ax)
	C = false
	branch Test(NE,Z) l0800_298D
	// succ:  l0800_2983 l0800_298D
l0800_2983:
	dx = Mem0[ss:bp + 0x000A:word16]
	ax = Mem0[ss:bp + 0x0008:word16]
	di = Mem0[ss:sp:word16]
	sp = sp + 2
	si = Mem0[ss:sp:word16]
	sp = sp + 2
	bp = Mem0[ss:sp:word16]
	sp = sp + 2
	return
	// succ:  fn0800_2931_exit
l0800_298D:
	es_di = Mem0[ss:bp + 0x0008:segptr32]
	ax = ax ^ ax
	SZO = cond(ax)
	C = false
	cx = 0xFFFF
	// succ:  l0800_2995
l0800_2995:
	branch cx == 0x0000 l0800_2997
	// succ:  l0800_2995_1 l0800_2997
l0800_2995_1:
	SCZO = cond(al - Mem0[es:di:byte])
	di = di + 0x0001
	cx = cx - 0x0001
	branch Test(EQ,Z) l0800_2995
	// succ:  l0800_2997 l0800_2995
l0800_2997:
	cx = ~cx
	ax = ax ^ ax
	SZO = cond(ax)
	C = false
	di = di - cx
	SCZO = cond(di)
	// succ:  l0800_299D
l0800_299D:
	branch cx == 0x0000 l0800_299F
	// succ:  l0800_299D_2 l0800_299F
l0800_299D_2:
	SCZO = cond(al - Mem0[es:di:byte])
	di = di + 0x0001
	cx = cx - 0x0001
	branch Test(EQ,Z) l0800_299D
	// succ:  l0800_299F l0800_299D
l0800_299F:
	branch Test(EQ,Z) l0800_29A8
	// succ:  l0800_29A1 l0800_29A8
l0800_29A1:
	di = 0x0001
	ax = ax ^ ax
	SZO = cond(ax)
	C = false
	es = ax
	// succ:  l0800_29A8
l0800_29A8:
	di = di - 0x0001
	SZO = cond(di)
	ax = es
	di = di + 0x0005
	SCZO = cond(di)
	Mem0[ss:bp + 0x000A:word16] = ax
	Mem0[ss:bp + 0x0008:word16] = di
	// succ:  l0800_29B4
l0800_29B4:
	es_bx = Mem0[ss:bp + 0x0008:segptr32]
	SCZO = cond(Mem0[es:bx:byte] - 0x00)
	branch Test(NE,Z) l0800_2960
	// succ:  l0800_29BD l0800_2960
l0800_29BD:
	dx = dx ^ dx
	SZO = cond(dx)
	C = false
	ax = ax ^ ax
	SZO = cond(ax)
	C = false
	di = Mem0[ss:sp:word16]
	sp = sp + 2
	si = Mem0[ss:sp:word16]
	sp = sp + 2
	bp = Mem0[ss:sp:word16]
	sp = sp + 2
	return
	// succ:  fn0800_2931_exit
fn0800_2931_exit:


// fn0800_29C5
// Return size: 2
define fn0800_29C5
fn0800_29C5_entry:
	// succ:  l0800_29C5
l0800_29C5:
	sp = fp
	Top = 0
	sp = sp - 2
	Mem0[ss:sp:word16] = bp
	bp = sp
	sp = sp - 0x0078
	SCZO = cond(sp)
	sp = sp - 2
	Mem0[ss:sp:word16] = si
	sp = sp - 2
	Mem0[ss:sp:word16] = di
	ax = Mem0[ds:0x45AE:word16]
	ax = ax | Mem0[ds:0x45B0:word16]
	SZO = cond(ax)
	C = false
	branch Test(NE,Z) l0800_2A07
	// succ:  l0800_29D6 l0800_2A07
l0800_29D6:
	ax = Mem0[ds:0x45AA:word16]
	ax = ax | Mem0[ds:0x45AC:word16]
	SZO = cond(ax)
	C = false
	branch Test(NE,Z) l0800_2A07
	// succ:  l0800_29DF l0800_2A07
l0800_29DF:
	sp = sp - 2
	Mem0[ss:sp:word16] = ds
	ax = 0x4541
	sp = sp - 2
	Mem0[ss:sp:word16] = ax
	call fn0800_2DE2 (retsize: 2;)
	sp = sp + 0x0004
	SCZO = cond(sp)
	ax = ax | ax
	SZO = cond(ax)
	C = false
	branch Test(NE,Z) l0800_29F6
	// succ:  l0800_29EE l0800_29F6
l0800_29EE:
	ax = ax ^ ax
	SZO = cond(ax)
	C = false
	di = Mem0[ss:sp:word16]
	sp = sp + 2
	si = Mem0[ss:sp:word16]
	sp = sp + 2
	sp = bp
	bp = Mem0[ss:sp:word16]
	sp = sp + 2
	return
	// succ:  fn0800_29C5_exit
l0800_29F6:
	ax = Mem0[ds:0x2E53:word16]
	dx = Mem0[ds:0x2E51:word16]
	dx = dx + 0x0008
	SCZO = cond(dx)
	Mem0[ds:0x45B0:word16] = ax
	Mem0[ds:0x45AE:word16] = dx
	// succ:  l0800_2A07
l0800_2A07:
	sp = sp - 2
	Mem0[ss:sp:word16] = ds
	ax = 0x4541
	sp = sp - 2
	Mem0[ss:sp:word16] = ax
	sp = sp - 2
	Mem0[ss:sp:word16] = ss
	ax = bp - 0x006A
	sp = sp - 2
	Mem0[ss:sp:word16] = ax
	call fn0800_3509 (retsize: 2;)
	sp = sp + 0x0008
	SCZO = cond(sp)
	sp = sp - 2
	Mem0[ss:sp:word16] = ds
	ax = 0x4541
	sp = sp - 2
	Mem0[ss:sp:word16] = ax
	sp = sp - 2
	Mem0[ss:sp:word16] = ss
	ax = bp - 0x0078
	sp = sp - 2
	Mem0[ss:sp:word16] = ax
	call fn0800_35A3 (retsize: 2;)
	sp = sp + 0x0008
	SCZO = cond(sp)
	es_bx = Mem0[ds:0x2E51:segptr32]
	al = Mem0[es:bx + 0x0004:byte]
	ah = 0x00
	cl = 0x08
	ax = ax << cl
	SCZO = cond(ax)
	dl = Mem0[es:bx + 0x0005:byte]
	dh = 0x00
	ax = ax + dx
	SCZO = cond(ax)
	dx = Mem0[ds:0x2E53:word16]
	bx = bx + ax
	SCZO = cond(bx)
	Mem0[ss:bp - 0x0002:word16] = dx
	Mem0[ss:bp - 0x0004:word16] = bx
	goto l0800_2C53
	// succ:  l0800_2C53
l0800_2A4C:
	ax = Mem0[ds:0x45AA:word16]
	ax = ax | Mem0[ds:0x45AC:word16]
	SZO = cond(ax)
	C = false
	branch Test(NE,Z) l0800_2A58
	// succ:  l0800_2A55 l0800_2A58
l0800_2A55:
	goto l0800_2C12
	// succ:  l0800_2C12
l0800_2A58:
	goto l0800_2B54
	// succ:  l0800_2B54
l0800_2A5B:
	sp = sp - 2
	Mem0[ss:sp:word16] = ss
	ax = bp - 0x0078
	sp = sp - 2
	Mem0[ss:sp:word16] = ax
	v24 = Mem0[ds:0x45AC:word16]
	sp = sp - 2
	Mem0[ss:sp:word16] = v24
	v25 = Mem0[ds:0x45AA:word16]
	sp = sp - 2
	Mem0[ss:sp:word16] = v25
	call fn0800_4357 (retsize: 2;)
	sp = sp + 0x0008
	SCZO = cond(sp)
	ax = ax | ax
	SZO = cond(ax)
	C = false
	branch Test(NE,Z) l0800_2A75
	// succ:  l0800_2A72 l0800_2A75
l0800_2A72:
	goto l0800_2B2B
	// succ:  l0800_2B2B
l0800_2A75:
	es_bx = Mem0[ss:bp + 0x0004:segptr32]
	ax = Mem0[ds:0x45B0:word16]
	dx = Mem0[ds:0x45AE:word16]
	Mem0[es:bx + 0x0002:word16] = ax
	Mem0[es:bx:word16] = dx
	es_bx = Mem0[ss:bp + 0x0008:segptr32]
	ax = Mem0[ds:0x45AC:word16]
	dx = Mem0[ds:0x45AA:word16]
	Mem0[es:bx + 0x0002:word16] = ax
	Mem0[es:bx:word16] = dx
	es_di = Mem0[ds:0x45AE:segptr32]
	di = di + 0x0002
	SCZO = cond(di)
	sp = sp - 2
	Mem0[ss:sp:word16] = es
	es = Mem0[ss:bp + 0x000E:selector]
	sp = sp - 2
	Mem0[ss:sp:word16] = di
	di = Mem0[ss:bp + 0x000C:word16]
	ax = di
	di = Mem0[ss:sp:word16]
	sp = sp + 2
	dx = es
	es = Mem0[ss:sp:selector]
	sp = sp + 2
	sp = sp - 2
	Mem0[ss:sp:word16] = dx
	sp = sp - 2
	Mem0[ss:sp:word16] = ax
	ax = ax ^ ax
	SZO = cond(ax)
	C = false
	cx = 0xFFFF
	// succ:  l0800_2AB3
l0800_2AB3:
	branch cx == 0x0000 l0800_2AB5
	// succ:  l0800_2AB3_1 l0800_2AB5
l0800_2AB3_1:
	SCZO = cond(al - Mem0[es:di:byte])
	di = di + 0x0001
	cx = cx - 0x0001
	branch Test(EQ,Z) l0800_2AB3
	// succ:  l0800_2AB5 l0800_2AB3
l0800_2AB5:
	cx = ~cx
	di = di - cx
	SCZO = cond(di)
	cx = cx >>u 0x0001
	SCZO = cond(cx)
	si = di
	di = Mem0[ss:sp:word16]
	sp = sp + 2
	ax = es
	es = Mem0[ss:sp:selector]
	sp = sp + 2
	sp = sp - 2
	Mem0[ss:sp:word16] = ds
	ds = ax
	// succ:  l0800_2AC4
l0800_2AC4:
	branch cx == 0x0000 l0800_2AC6
	// succ:  l0800_2AC4_2 l0800_2AC6
l0800_2AC4_2:
	v27 = Mem0[ds:si:word16]
	Mem0[es:di:word16] = v27
	si = si + 0x0002
	di = di + 0x0002
	cx = cx - 0x0001
	goto l0800_2AC4
	// succ:  l0800_2AC4
l0800_2AC6:
	cx = cx + cx + C
	SCZO = cond(cx)
	// succ:  l0800_2AC8
l0800_2AC8:
	branch cx == 0x0000 l0800_2ACA
	// succ:  l0800_2AC8_1 l0800_2ACA
l0800_2AC8_1:
	v28 = Mem0[ds:si:byte]
	Mem0[es:di:byte] = v28
	si = si + 0x0001
	di = di + 0x0001
	cx = cx - 0x0001
	goto l0800_2AC8
	// succ:  l0800_2AC8
l0800_2ACA:
	ds = Mem0[ss:sp:selector]
	sp = sp + 2
	es_di = Mem0[ss:bp + 0x000C:segptr32]
	sp = sp - 2
	Mem0[ss:sp:word16] = es
	es = Mem0[ds:0x45AC:selector]
	sp = sp - 2
	Mem0[ss:sp:word16] = di
	di = Mem0[ds:0x45AA:word16]
	ax = ax ^ ax
	SZO = cond(ax)
	C = false
	cx = 0xFFFF
	// succ:  l0800_2ADD
l0800_2ADD:
	branch cx == 0x0000 l0800_2ADF
	// succ:  l0800_2ADD_1 l0800_2ADF
l0800_2ADD_1:
	SCZO = cond(al - Mem0[es:di:byte])
	di = di + 0x0001
	cx = cx - 0x0001
	branch Test(EQ,Z) l0800_2ADD
	// succ:  l0800_2ADF l0800_2ADD
l0800_2ADF:
	cx = ~cx
	di = di - cx
	SCZO = cond(di)
	si = di
	di = Mem0[ss:sp:word16]
	sp = sp + 2
	ax = es
	es = Mem0[ss:sp:selector]
	sp = sp + 2
	dx = ds
	ds = ax
	sp = sp - 2
	Mem0[ss:sp:word16] = cx
	cx = 0xFFFF
	ax = ax ^ ax
	SZO = cond(ax)
	C = false
	// succ:  l0800_2AF3
l0800_2AF3:
	branch cx == 0x0000 l0800_2AF5
	// succ:  l0800_2AF3_2 l0800_2AF5
l0800_2AF3_2:
	SCZO = cond(al - Mem0[es:di:byte])
	di = di + 0x0001
	cx = cx - 0x0001
	branch Test(EQ,Z) l0800_2AF3
	// succ:  l0800_2AF5 l0800_2AF3
l0800_2AF5:
	di = di - 0x0001
	SZO = cond(di)
	cx = Mem0[ss:sp:word16]
	sp = sp + 2
	// succ:  l0800_2AF7
l0800_2AF7:
	branch cx == 0x0000 l0800_2AF9
	// succ:  l0800_2AF7_3 l0800_2AF9
l0800_2AF7_3:
	v29 = Mem0[ds:si:byte]
	Mem0[es:di:byte] = v29
	si = si + 0x0001
	di = di + 0x0001
	cx = cx - 0x0001
	goto l0800_2AF7
	// succ:  l0800_2AF7
l0800_2AF9:
	ds = dx
	es_di = Mem0[ds:0x45AA:segptr32]
	cx = 0xFFFF
	// succ:  l0800_2B02
l0800_2B02:
	branch cx == 0x0000 l0800_2B04
	// succ:  l0800_2B02_1 l0800_2B04
l0800_2B02_1:
	SCZO = cond(al - Mem0[es:di:byte])
	di = di + 0x0001
	cx = cx - 0x0001
	branch Test(EQ,Z) l0800_2B02
	// succ:  l0800_2B04 l0800_2B02
l0800_2B04:
	cx = ~cx
	ax = ax ^ ax
	SZO = cond(ax)
	C = false
	di = di - cx
	SCZO = cond(di)
	// succ:  l0800_2B0A
l0800_2B0A:
	branch cx == 0x0000 l0800_2B0C
	// succ:  l0800_2B0A_2 l0800_2B0C
l0800_2B0A_2:
	SCZO = cond(al - Mem0[es:di:byte])
	di = di + 0x0001
	cx = cx - 0x0001
	branch Test(EQ,Z) l0800_2B0A
	// succ:  l0800_2B0C l0800_2B0A
l0800_2B0C:
	branch Test(EQ,Z) l0800_2B15
	// succ:  l0800_2B0E l0800_2B15
l0800_2B0E:
	di = 0x0001
	ax = ax ^ ax
	SZO = cond(ax)
	C = false
	es = ax
	// succ:  l0800_2B15
l0800_2B15:
	di = di - 0x0001
	SZO = cond(di)
	ax = es
	di = di + 0x0005
	SCZO = cond(di)
	Mem0[ds:0x45AC:word16] = ax
	Mem0[ds:0x45AA:word16] = di
	ax = 0x0001
	di = Mem0[ss:sp:word16]
	sp = sp + 2
	si = Mem0[ss:sp:word16]
	sp = sp + 2
	sp = bp
	bp = Mem0[ss:sp:word16]
	sp = sp + 2
	return
	// succ:  fn0800_29C5_exit
l0800_2B2B:
	es_di = Mem0[ds:0x45AA:segptr32]
	ax = ax ^ ax
	SZO = cond(ax)
	C = false
	cx = 0xFFFF
	// succ:  l0800_2B34
l0800_2B34:
	branch cx == 0x0000 l0800_2B36
	// succ:  l0800_2B34_1 l0800_2B36
l0800_2B34_1:
	SCZO = cond(al - Mem0[es:di:byte])
	di = di + 0x0001
	cx = cx - 0x0001
	branch Test(EQ,Z) l0800_2B34
	// succ:  l0800_2B36 l0800_2B34
l0800_2B36:
	cx = ~cx
	ax = ax ^ ax
	SZO = cond(ax)
	C = false
	di = di - cx
	SCZO = cond(di)
	// succ:  l0800_2B3C
l0800_2B3C:
	branch cx == 0x0000 l0800_2B3E
	// succ:  l0800_2B3C_2 l0800_2B3E
l0800_2B3C_2:
	SCZO = cond(al - Mem0[es:di:byte])
	di = di + 0x0001
	cx = cx - 0x0001
	branch Test(EQ,Z) l0800_2B3C
	// succ:  l0800_2B3E l0800_2B3C
l0800_2B3E:
	branch Test(EQ,Z) l0800_2B47
	// succ:  l0800_2B40 l0800_2B47
l0800_2B40:
	di = 0x0001
	ax = ax ^ ax
	SZO = cond(ax)
	C = false
	es = ax
	// succ:  l0800_2B47
l0800_2B47:
	di = di - 0x0001
	SZO = cond(di)
	ax = es
	di = di + 0x0005
	SCZO = cond(di)
	Mem0[ds:0x45AC:word16] = ax
	Mem0[ds:0x45AA:word16] = di
	// succ:  l0800_2B54
l0800_2B54:
	es_bx = Mem0[ds:0x45AA:segptr32]
	SCZO = cond(Mem0[es:bx:byte] - 0x00)
	branch Test(EQ,Z) l0800_2B61
	// succ:  l0800_2B5E l0800_2B61
l0800_2B5E:
	goto l0800_2A5B
	// succ:  l0800_2A5B
l0800_2B61:
	es_bx = Mem0[ds:0x45AE:segptr32]
	al = Mem0[es:bx:byte]
	ax = (int16) al
	cl = 0x08
	ax = ax << cl
	SCZO = cond(ax)
	dl = Mem0[es:bx + 0x0001:byte]
	dh = 0x00
	ax = ax + dx
	SCZO = cond(ax)
	dx = Mem0[ds:0x2E53:word16]
	bx = Mem0[ds:0x2E51:word16]
	bx = bx + ax
	SCZO = cond(bx)
	Mem0[ds:0x45B0:word16] = dx
	Mem0[ds:0x45AE:word16] = bx
	goto l0800_2C12
	// succ:  l0800_2C12
l0800_2B8A:
	SCZO = cond(Mem0[ds:0x2A1B:word16] - 0x0000)
	branch Test(EQ,Z) l0800_2BBB
	// succ:  l0800_2B91 l0800_2BBB
l0800_2B91:
	sp = sp - 2
	Mem0[ss:sp:word16] = ss
	es = Mem0[ss:sp:selector]
	sp = sp + 2
	di = bp - 0x006A
	ax = ax ^ ax
	SZO = cond(ax)
	C = false
	cx = 0xFFFF
	// succ:  l0800_2B9B
l0800_2B9B:
	branch cx == 0x0000 l0800_2B9D
	// succ:  l0800_2B9B_1 l0800_2B9D
l0800_2B9B_1:
	SCZO = cond(al - Mem0[es:di:byte])
	di = di + 0x0001
	cx = cx - 0x0001
	branch Test(EQ,Z) l0800_2B9B
	// succ:  l0800_2B9D l0800_2B9B
l0800_2B9D:
	cx = ~cx
	cx = cx - 0x0001
	SZO = cond(cx)
	sp = sp - 2
	Mem0[ss:sp:word16] = cx
	sp = sp - 2
	Mem0[ss:sp:word16] = ss
	ax = bp - 0x006A
	sp = sp - 2
	Mem0[ss:sp:word16] = ax
	ax = Mem0[ds:0x45AE:word16]
	ax = ax + 0x0002
	SCZO = cond(ax)
	v23 = Mem0[ds:0x45B0:word16]
	sp = sp - 2
	Mem0[ss:sp:word16] = v23
	sp = sp - 2
	Mem0[ss:sp:word16] = ax
	call fn0800_BFE6 (retsize: 2;)
	sp = sp + 0x000A
	SCZO = cond(sp)
	ax = ax | ax
	SZO = cond(ax)
	C = false
	branch Test(EQ,Z) l0800_2C29
	// succ:  l0800_2BBB l0800_2C29
l0800_2BBB:
	SCZO = cond(Mem0[ds:0x2A1B:word16] - 0x0000)
	branch Test(NE,Z) l0800_2BEC
	// succ:  l0800_2BC2 l0800_2BEC
l0800_2BC2:
	si = Mem0[ds:0x45AE:word16]
	si = si + 0x0002
	SCZO = cond(si)
	sp = sp - 2
	Mem0[ss:sp:word16] = ds
	ds = Mem0[ds:0x45B0:selector]
	sp = sp - 2
	Mem0[ss:sp:word16] = ss
	es = Mem0[ss:sp:selector]
	sp = sp + 2
	di = bp - 0x006A
	ax = ax ^ ax
	SZO = cond(ax)
	C = false
	cx = 0xFFFF
	// succ:  l0800_2BD8
l0800_2BD8:
	branch cx == 0x0000 l0800_2BDA
	// succ:  l0800_2BD8_2 l0800_2BDA
l0800_2BD8_2:
	SCZO = cond(al - Mem0[es:di:byte])
	di = di + 0x0001
	cx = cx - 0x0001
	branch Test(EQ,Z) l0800_2BD8
	// succ:  l0800_2BDA l0800_2BD8
l0800_2BDA:
	cx = ~cx
	di = di - cx
	SCZO = cond(di)
	// succ:  l0800_2BDE
l0800_2BDE:
	branch cx == 0x0000 l0800_2BE0
	// succ:  l0800_2BDE_3 l0800_2BE0
l0800_2BDE_3:
	SCZO = cond(Mem0[ds:si:byte] - Mem0[es:di:byte])
	si = si + 0x0001
	di = di + 0x0001
	cx = cx - 0x0001
	branch Test(NE,Z) l0800_2BDE
	// succ:  l0800_2BE0 l0800_2BDE
l0800_2BE0:
	branch Test(EQ,Z) l0800_2BE7
	// succ:  l0800_2BE2 l0800_2BE7
l0800_2BE2:
	ax = ax - ax - C
	SCZO = cond(ax)
	ax = ax - 0xFFFF - C
	SCZO = cond(ax)
	// succ:  l0800_2BE7
l0800_2BE7:
	ds = Mem0[ss:sp:selector]
	sp = sp + 2
	ax = ax | ax
	SZO = cond(ax)
	C = false
	branch Test(EQ,Z) l0800_2C29
	// succ:  l0800_2BEC l0800_2C29
l0800_2BEC:
	es_bx = Mem0[ds:0x45AE:segptr32]
	al = Mem0[es:bx:byte]
	ax = (int16) al
	cl = 0x08
	ax = ax << cl
	SCZO = cond(ax)
	dl = Mem0[es:bx + 0x0001:byte]
	dh = 0x00
	ax = ax + dx
	SCZO = cond(ax)
	dx = Mem0[ds:0x2E53:word16]
	bx = Mem0[ds:0x2E51:word16]
	bx = bx + ax
	SCZO = cond(bx)
	Mem0[ds:0x45B0:word16] = dx
	Mem0[ds:0x45AE:word16] = bx
	// succ:  l0800_2C12
l0800_2C12:
	ax = Mem0[ds:0x45B0:word16]
	dx = Mem0[ds:0x45AE:word16]
	SCZO = cond(ax - Mem0[ss:bp - 0x0002:word16])
	branch Test(EQ,Z) l0800_2C21
	// succ:  l0800_2C1E l0800_2C21
l0800_2C1E:
	goto l0800_2B8A
	// succ:  l0800_2B8A
l0800_2C21:
	SCZO = cond(dx - Mem0[ss:bp - 0x0004:word16])
	branch Test(EQ,Z) l0800_2C29
	// succ:  l0800_2C26 l0800_2C29
l0800_2C26:
	goto l0800_2B8A
	// succ:  l0800_2B8A
l0800_2C29:
	es_di = Mem0[ds:0x45AE:segptr32]
	di = di + 0x0002
	SCZO = cond(di)
	ax = ax ^ ax
	SZO = cond(ax)
	C = false
	cx = 0xFFFF
	// succ:  l0800_2C35
l0800_2C35:
	branch cx == 0x0000 l0800_2C37
	// succ:  l0800_2C35_1 l0800_2C37
l0800_2C35_1:
	SCZO = cond(al - Mem0[es:di:byte])
	di = di + 0x0001
	cx = cx - 0x0001
	branch Test(EQ,Z) l0800_2C35
	// succ:  l0800_2C37 l0800_2C35
l0800_2C37:
	cx = ~cx
	ax = ax ^ ax
	SZO = cond(ax)
	C = false
	di = di - cx
	SCZO = cond(di)
	// succ:  l0800_2C3D
l0800_2C3D:
	branch cx == 0x0000 l0800_2C3F
	// succ:  l0800_2C3D_2 l0800_2C3F
l0800_2C3D_2:
	SCZO = cond(al - Mem0[es:di:byte])
	di = di + 0x0001
	cx = cx - 0x0001
	branch Test(EQ,Z) l0800_2C3D
	// succ:  l0800_2C3F l0800_2C3D
l0800_2C3F:
	branch Test(EQ,Z) l0800_2C48
	// succ:  l0800_2C41 l0800_2C48
l0800_2C41:
	di = 0x0001
	ax = ax ^ ax
	SZO = cond(ax)
	C = false
	es = ax
	// succ:  l0800_2C48
l0800_2C48:
	di = di - 0x0001
	SZO = cond(di)
	ax = es
	di = di + 0x0001
	SZO = cond(di)
	Mem0[ds:0x45AC:word16] = ax
	Mem0[ds:0x45AA:word16] = di
	// succ:  l0800_2C53
l0800_2C53:
	ax = Mem0[ds:0x45B0:word16]
	dx = Mem0[ds:0x45AE:word16]
	SCZO = cond(ax - Mem0[ss:bp - 0x0002:word16])
	branch Test(EQ,Z) l0800_2C62
	// succ:  l0800_2C5F l0800_2C62
l0800_2C5F:
	goto l0800_2A4C
	// succ:  l0800_2A4C
l0800_2C62:
	SCZO = cond(dx - Mem0[ss:bp - 0x0004:word16])
	branch Test(EQ,Z) l0800_2C6A
	// succ:  l0800_2C67 l0800_2C6A
l0800_2C67:
	goto l0800_2A4C
	// succ:  l0800_2A4C
l0800_2C6A:
	ax = ax ^ ax
	SZO = cond(ax)
	C = false
	dx = dx ^ dx
	SZO = cond(dx)
	C = false
	Mem0[ds:0x45AC:word16] = ax
	Mem0[ds:0x45AA:word16] = dx
	Mem0[ds:0x45B0:word16] = ax
	Mem0[ds:0x45AE:word16] = dx
	v30 = Mem0[ss:bp + 0x000E:word16]
	sp = sp - 2
	Mem0[ss:sp:word16] = v30
	v31 = Mem0[ss:bp + 0x000C:word16]
	sp = sp - 2
	Mem0[ss:sp:word16] = v31
	v32 = Mem0[ss:bp + 0x000A:word16]
	sp = sp - 2
	Mem0[ss:sp:word16] = v32
	v33 = Mem0[ss:bp + 0x0008:word16]
	sp = sp - 2
	Mem0[ss:sp:word16] = v33
	v34 = Mem0[ss:bp + 0x0006:word16]
	sp = sp - 2
	Mem0[ss:sp:word16] = v34
	v35 = Mem0[ss:bp + 0x0004:word16]
	sp = sp - 2
	Mem0[ss:sp:word16] = v35
	call fn0800_29C5 (retsize: 2;)
	sp = sp + 0x000C
	SCZO = cond(sp)
	di = Mem0[ss:sp:word16]
	sp = sp + 2
	si = Mem0[ss:sp:word16]
	sp = sp + 2
	sp = bp
	bp = Mem0[ss:sp:word16]
	sp = sp + 2
	return
	// succ:  fn0800_29C5_exit
fn0800_29C5_exit:


// fn0800_2C9A
// Return size: 2
define fn0800_2C9A
fn0800_2C9A_entry:
	// succ:  l0800_2C9A
l0800_2C9A:
	sp = fp
	Top = 0
	sp = sp - 2
	Mem0[ss:sp:word16] = si
	cx = cx ^ cx
	SZO = cond(cx)
	C = false
	si = 0x2A29
	// succ:  l0800_2CA0
l0800_2CA0:
	dx = cx
	bx = 0x0008
	goto l0800_2CBD
	// succ:  l0800_2CBD
l0800_2CA7:
	SZO = cond(dx & 0x0001)
	C = false
	branch Test(EQ,Z) l0800_2CB6
	// succ:  l0800_2CAD l0800_2CB6
l0800_2CAD:
	ax = dx
	ax = ax >>u 0x0001
	SCZO = cond(ax)
	ax = ax ^ 0xA001
	SZO = cond(ax)
	C = false
	goto l0800_2CBA
	// succ:  l0800_2CBA
l0800_2CB6:
	ax = dx
	ax = ax >>u 0x0001
	SCZO = cond(ax)
	// succ:  l0800_2CBA
l0800_2CBA:
	dx = ax
	bx = bx - 0x0001
	SZO = cond(bx)
	// succ:  l0800_2CBD
l0800_2CBD:
	bx = bx | bx
	SZO = cond(bx)
	C = false
	branch Test(NE,Z) l0800_2CA7
	// succ:  l0800_2CC1 l0800_2CA7
l0800_2CC1:
	Mem0[ds:si:word16] = dx
	si = si + 0x0002
	SCZO = cond(si)
	cx = cx + 0x0001
	SZO = cond(cx)
	SCZO = cond(cx - 0x0100)
	branch Test(ULT,C) l0800_2CA0
	// succ:  l0800_2CCD l0800_2CA0
l0800_2CCD:
	si = Mem0[ss:sp:word16]
	sp = sp + 2
	return
	// succ:  fn0800_2C9A_exit
fn0800_2C9A_exit:


// fn0800_2CCF
// Return size: 2
define fn0800_2CCF
fn0800_2CCF_entry:
	// succ:  l0800_2CCF
l0800_2CCF:
	sp = fp
	Top = 0
	sp = sp - 2
	Mem0[ss:sp:word16] = bp
	bp = sp
	sp = sp - 2
	Mem0[ss:sp:word16] = si
	si = Mem0[ss:bp + 0x0008:word16]
	goto l0800_2CFD
	// succ:  l0800_2CFD
l0800_2CD8:
	es_bx = Mem0[ss:bp + 0x0004:segptr32]
	al = Mem0[ss:bp + 0x000A:byte]
	al = al ^ Mem0[es:bx:byte]
	SZO = cond(al)
	C = false
	ah = 0x00
	ax = ax & 0x00FF
	SZO = cond(ax)
	C = false
	ax = ax << 0x0001
	SCZO = cond(ax)
	bx = ax
	ax = Mem0[ds:bx + 0x2A29:word16]
	dx = Mem0[ss:bp + 0x000A:word16]
	cl = 0x08
	dx = dx >>u cl
	SCZO = cond(dx)
	ax = ax ^ dx
	SZO = cond(ax)
	C = false
	Mem0[ss:bp + 0x000A:word16] = ax
	v19 = Mem0[ss:bp + 0x0004:word16] + 0x0001
	Mem0[ss:bp + 0x0004:word16] = v19
	SZO = cond(v19)
	// succ:  l0800_2CFD
l0800_2CFD:
	ax = si
	si = si - 0x0001
	SZO = cond(si)
	ax = ax | ax
	SZO = cond(ax)
	C = false
	branch Test(NE,Z) l0800_2CD8
	// succ:  l0800_2D04 l0800_2CD8
l0800_2D04:
	ax = Mem0[ss:bp + 0x000A:word16]
	si = Mem0[ss:sp:word16]
	sp = sp + 2
	bp = Mem0[ss:sp:word16]
	sp = sp + 2
	return
	// succ:  fn0800_2CCF_exit
fn0800_2CCF_exit:


// fn0800_2D0A
// Return size: 2
define fn0800_2D0A
fn0800_2D0A_entry:
	// succ:  l0800_2D0A
l0800_2D0A:
	sp = fp
	Top = 0
	sp = sp - 2
	Mem0[ss:sp:word16] = bp
	bp = sp
	sp = sp - 0x000C
	SCZO = cond(sp)
	sp = sp - 2
	Mem0[ss:sp:word16] = si
	ax = ax ^ ax
	SZO = cond(ax)
	C = false
	dx = 0xFFF0
	sp = sp - 2
	Mem0[ss:sp:word16] = ax
	sp = sp - 2
	Mem0[ss:sp:word16] = dx
	call fn0800_4311 (retsize: 2;)
	sp = sp + 0x0004
	SCZO = cond(sp)
	Mem0[ss:bp - 0x0002:word16] = dx
	Mem0[ss:bp - 0x0004:word16] = ax
	v11 = Mem0[ss:bp + 0x0006:word16]
	sp = sp - 2
	Mem0[ss:sp:word16] = v11
	v12 = Mem0[ss:bp + 0x0004:word16]
	sp = sp - 2
	Mem0[ss:sp:word16] = v12
	call fn0800_AD2F (retsize: 2;)
	sp = sp + 0x0004
	SCZO = cond(sp)
	Mem0[ss:bp - 0x000A:word16] = dx
	Mem0[ss:bp - 0x000C:word16] = ax
	si = si ^ si
	SZO = cond(si)
	C = false
	goto l0800_2D8F
	// succ:  l0800_2D8F
l0800_2D3A:
	SCZO = cond(Mem0[ss:bp + 0x000A:word16] - 0x0000)
	branch Test(ULT,C) l0800_2D4F
	// succ:  l0800_2D40 l0800_2D4F
l0800_2D40:
	branch Test(UGT,CZ) l0800_2D48
	// succ:  l0800_2D42 l0800_2D48
l0800_2D42:
	SCZO = cond(Mem0[ss:bp + 0x0008:word16] - 0xFFF0)
	branch Test(ULE,CZ) l0800_2D4F
	// succ:  l0800_2D48 l0800_2D4F
l0800_2D48:
	dx = dx ^ dx
	SZO = cond(dx)
	C = false
	ax = 0xFFF0
	goto l0800_2D55
	// succ:  l0800_2D55
l0800_2D4F:
	dx = Mem0[ss:bp + 0x000A:word16]
	ax = Mem0[ss:bp + 0x0008:word16]
	// succ:  l0800_2D55
l0800_2D55:
	Mem0[ss:bp - 0x0006:word16] = dx
	Mem0[ss:bp - 0x0008:word16] = ax
	v21 = Mem0[ss:bp + 0x0006:word16]
	sp = sp - 2
	Mem0[ss:sp:word16] = v21
	v22 = Mem0[ss:bp + 0x0004:word16]
	sp = sp - 2
	Mem0[ss:sp:word16] = v22
	v23 = Mem0[ss:bp - 0x0006:word16]
	sp = sp - 2
	Mem0[ss:sp:word16] = v23
	sp = sp - 2
	Mem0[ss:sp:word16] = ax
	v24 = Mem0[ss:bp - 0x0002:word16]
	sp = sp - 2
	Mem0[ss:sp:word16] = v24
	v25 = Mem0[ss:bp - 0x0004:word16]
	sp = sp - 2
	Mem0[ss:sp:word16] = v25
	call fn0800_4110 (retsize: 2;)
	sp = sp + 0x000C
	SCZO = cond(sp)
	sp = sp - 2
	Mem0[ss:sp:word16] = si
	v26 = Mem0[ss:bp - 0x0008:word16]
	sp = sp - 2
	Mem0[ss:sp:word16] = v26
	v27 = Mem0[ss:bp - 0x0002:word16]
	sp = sp - 2
	Mem0[ss:sp:word16] = v27
	v28 = Mem0[ss:bp - 0x0004:word16]
	sp = sp - 2
	Mem0[ss:sp:word16] = v28
	call fn0800_2CCF (retsize: 2;)
	sp = sp + 0x0008
	SCZO = cond(sp)
	si = ax
	ax = Mem0[ss:bp - 0x0006:word16]
	dx = Mem0[ss:bp - 0x0008:word16]
	v29 = Mem0[ss:bp + 0x0008:word16] - dx
	Mem0[ss:bp + 0x0008:word16] = v29
	SCZO = cond(v29)
	v30 = Mem0[ss:bp + 0x000A:word16] - ax - C
	Mem0[ss:bp + 0x000A:word16] = v30
	SCZO = cond(v30)
	// succ:  l0800_2D8F
l0800_2D8F:
	ax = Mem0[ss:bp + 0x0008:word16]
	ax = ax | Mem0[ss:bp + 0x000A:word16]
	SZO = cond(ax)
	C = false
	branch Test(NE,Z) l0800_2D3A
	// succ:  l0800_2D97 l0800_2D3A
l0800_2D97:
	ax = ax ^ ax
	SZO = cond(ax)
	C = false
	sp = sp - 2
	Mem0[ss:sp:word16] = ax
	v14 = Mem0[ss:bp - 0x000A:word16]
	sp = sp - 2
	Mem0[ss:sp:word16] = v14
	v15 = Mem0[ss:bp - 0x000C:word16]
	sp = sp - 2
	Mem0[ss:sp:word16] = v15
	v16 = Mem0[ss:bp + 0x0006:word16]
	sp = sp - 2
	Mem0[ss:sp:word16] = v16
	v17 = Mem0[ss:bp + 0x0004:word16]
	sp = sp - 2
	Mem0[ss:sp:word16] = v17
	call fn0800_ACB3 (retsize: 2;)
	sp = sp + 0x000A
	SCZO = cond(sp)
	v18 = Mem0[ss:bp - 0x0002:word16]
	sp = sp - 2
	Mem0[ss:sp:word16] = v18
	v19 = Mem0[ss:bp - 0x0004:word16]
	sp = sp - 2
	Mem0[ss:sp:word16] = v19
	call fn0800_4346 (retsize: 2;)
	sp = sp + 0x0004
	SCZO = cond(sp)
	ax = si
	si = Mem0[ss:sp:word16]
	sp = sp + 2
	sp = bp
	bp = Mem0[ss:sp:word16]
	sp = sp + 2
	return
	// succ:  fn0800_2D0A_exit
fn0800_2D0A_exit:


// fn0800_2DBF
// Return size: 2
define fn0800_2DBF
fn0800_2DBF_entry:
	// succ:  l0800_2DBF
l0800_2DBF:
	sp = fp
	Top = 0
	sp = sp - 2
	Mem0[ss:sp:word16] = bp
	bp = sp
	Mem0[ds:0x4656:word16] = 0xFFFF
	Mem0[ds:0x4654:word16] = 0x0000
	ax = Mem0[ds:0x2A27:word16]
	Mem0[ds:0x4652:word16] = ax
	ax = Mem0[ss:bp + 0x0004:word16]
	Mem0[ds:0x4650:word16] = ax
	ax = Mem0[ss:bp + 0x0006:word16]
	Mem0[ds:0x464E:word16] = ax
	bp = Mem0[ss:sp:word16]
	sp = sp + 2
	return
	// succ:  fn0800_2DBF_exit
fn0800_2DBF_exit:


// fn0800_2DE2
// Return size: 2
define fn0800_2DE2
fn0800_2DE2_entry:
	// succ:  l0800_2DE2
l0800_2DE2:
	sp = fp
	Top = 0
	sp = sp - 2
	Mem0[ss:sp:word16] = bp
	bp = sp
	sp = sp - 0x0010
	SCZO = cond(sp)
	sp = sp - 2
	Mem0[ss:sp:word16] = si
	sp = sp - 2
	Mem0[ss:sp:word16] = di
	SCZO = cond(Mem0[ds:0x4654:word16] - 0x0000)
	branch Test(NE,Z) l0800_2E11
	// succ:  l0800_2DF1 l0800_2E11
l0800_2DF1:
	ax = Mem0[ds:0x4652:word16]
	SCZO = cond(ax - Mem0[ds:0x4656:word16])
	branch Test(NE,Z) l0800_2E11
	// succ:  l0800_2DFA l0800_2E11
l0800_2DFA:
	SCZO = cond(Mem0[ds:0x464E:word16] - 0x0000)
	branch Test(EQ,Z) l0800_2E11
	// succ:  l0800_2E01 l0800_2E11
l0800_2E01:
	ax = ax ^ ax
	SZO = cond(ax)
	C = false
	sp = sp - 2
	Mem0[ss:sp:word16] = ax
	sp = sp - 2
	Mem0[ss:sp:word16] = ss
	ax = bp - 0x0010
	sp = sp - 2
	Mem0[ss:sp:word16] = ax
	call fn0800_3479 (retsize: 2;)
	sp = sp + 0x0006
	SCZO = cond(sp)
	si = ax
	// succ:  l0800_2E11
l0800_2E11:
	SCZO = cond(Mem0[ds:0x4654:word16] - 0x0000)
	branch Test(NE,Z) l0800_2E1B
	// succ:  l0800_2E18 l0800_2E1B
l0800_2E18:
	goto l0800_2F51
	// succ:  l0800_2F51
l0800_2E1B:
	Mem0[ds:0x4617:word16] = 0x0000
	v13 = Mem0[ds:0x461D:word16]
	sp = sp - 2
	Mem0[ss:sp:word16] = v13
	v14 = Mem0[ds:0x461B:word16]
	sp = sp - 2
	Mem0[ss:sp:word16] = v14
	ax = 0x0065
	sp = sp - 2
	Mem0[ss:sp:word16] = ax
	sp = sp - 2
	Mem0[ss:sp:word16] = ds
	ax = 0x45B2
	sp = sp - 2
	Mem0[ss:sp:word16] = ax
	call fn0800_A77D (retsize: 2;)
	sp = sp + 0x000A
	SCZO = cond(sp)
	ax = ax | dx
	SZO = cond(ax)
	C = false
	branch Test(NE,Z) l0800_2E3F
	// succ:  l0800_2E3C l0800_2E3F
l0800_2E3C:
	goto l0800_2F1B
	// succ:  l0800_2F1B
l0800_2E3F:
	sp = sp - 2
	Mem0[ss:sp:word16] = ds
	es = Mem0[ss:sp:selector]
	sp = sp + 2
	di = 0x45B2
	ax = ax ^ ax
	SZO = cond(ax)
	C = false
	cx = 0xFFFF
	// succ:  l0800_2E49
l0800_2E49:
	branch cx == 0x0000 l0800_2E4B
	// succ:  l0800_2E49_1 l0800_2E4B
l0800_2E49_1:
	SCZO = cond(al - Mem0[es:di:byte])
	di = di + 0x0001
	cx = cx - 0x0001
	branch Test(EQ,Z) l0800_2E49
	// succ:  l0800_2E4B l0800_2E49
l0800_2E4B:
	cx = ~cx
	ax = 0x000D
	di = di - cx
	SCZO = cond(di)
	// succ:  l0800_2E52
l0800_2E52:
	branch cx == 0x0000 l0800_2E54
	// succ:  l0800_2E52_2 l0800_2E54
l0800_2E52_2:
	SCZO = cond(al - Mem0[es:di:byte])
	di = di + 0x0001
	cx = cx - 0x0001
	branch Test(EQ,Z) l0800_2E52
	// succ:  l0800_2E54 l0800_2E52
l0800_2E54:
	branch Test(EQ,Z) l0800_2E5D
	// succ:  l0800_2E56 l0800_2E5D
l0800_2E56:
	di = 0x0001
	ax = ax ^ ax
	SZO = cond(ax)
	C = false
	es = ax
	// succ:  l0800_2E5D
l0800_2E5D:
	di = di - 0x0001
	SZO = cond(di)
	ax = es
	di = di | ax
	SZO = cond(di)
	C = false
	branch Test(EQ,Z) l0800_2E8B
	// succ:  l0800_2E64 l0800_2E8B
l0800_2E64:
	sp = sp - 2
	Mem0[ss:sp:word16] = ds
	es = Mem0[ss:sp:selector]
	sp = sp + 2
	di = 0x45B2
	ax = ax ^ ax
	SZO = cond(ax)
	C = false
	cx = 0xFFFF
	// succ:  l0800_2E6E
l0800_2E6E:
	branch cx == 0x0000 l0800_2E70
	// succ:  l0800_2E6E_1 l0800_2E70
l0800_2E6E_1:
	SCZO = cond(al - Mem0[es:di:byte])
	di = di + 0x0001
	cx = cx - 0x0001
	branch Test(EQ,Z) l0800_2E6E
	// succ:  l0800_2E70 l0800_2E6E
l0800_2E70:
	cx = ~cx
	ax = 0x000D
	di = di - cx
	SCZO = cond(di)
	// succ:  l0800_2E77
l0800_2E77:
	branch cx == 0x0000 l0800_2E79
	// succ:  l0800_2E77_2 l0800_2E79
l0800_2E77_2:
	SCZO = cond(al - Mem0[es:di:byte])
	di = di + 0x0001
	cx = cx - 0x0001
	branch Test(EQ,Z) l0800_2E77
	// succ:  l0800_2E79 l0800_2E77
l0800_2E79:
	branch Test(EQ,Z) l0800_2E82
	// succ:  l0800_2E7B l0800_2E82
l0800_2E7B:
	di = 0x0001
	ax = ax ^ ax
	SZO = cond(ax)
	C = false
	es = ax
	// succ:  l0800_2E82
l0800_2E82:
	di = di - 0x0001
	SZO = cond(di)
	ax = es
	es = ax
	Mem0[es:di:byte] = 0x00
	// succ:  l0800_2E8B
l0800_2E8B:
	al = Mem0[ds:0x45B2:byte]
	ax = (int16) al
	ax = ax | ax
	SZO = cond(ax)
	C = false
	branch Test(NE,Z) l0800_2EA5
	// succ:  l0800_2E93 l0800_2EA5
l0800_2E93:
	v36 = Mem0[ss:bp + 0x0006:word16]
	sp = sp - 2
	Mem0[ss:sp:word16] = v36
	v37 = Mem0[ss:bp + 0x0004:word16]
	sp = sp - 2
	Mem0[ss:sp:word16] = v37
	call fn0800_2DE2 (retsize: 2;)
	sp = sp + 0x0004
	SCZO = cond(sp)
	di = Mem0[ss:sp:word16]
	sp = sp + 2
	si = Mem0[ss:sp:word16]
	sp = sp + 2
	sp = bp
	bp = Mem0[ss:sp:word16]
	sp = sp + 2
	return
	// succ:  fn0800_2DE2_exit
l0800_2EA5:
	sp = sp - 2
	Mem0[ss:sp:word16] = ds
	es = Mem0[ss:sp:selector]
	sp = sp + 2
	di = 0x45B2
	ax = ax ^ ax
	SZO = cond(ax)
	C = false
	cx = 0xFFFF
	// succ:  l0800_2EAF
l0800_2EAF:
	branch cx == 0x0000 l0800_2EB1
	// succ:  l0800_2EAF_1 l0800_2EB1
l0800_2EAF_1:
	SCZO = cond(al - Mem0[es:di:byte])
	di = di + 0x0001
	cx = cx - 0x0001
	branch Test(EQ,Z) l0800_2EAF
	// succ:  l0800_2EB1 l0800_2EAF
l0800_2EB1:
	cx = ~cx
	cx = cx - 0x0001
	SZO = cond(cx)
	Mem0[ds:0x4619:word16] = cx
	sp = sp - 2
	Mem0[ss:sp:word16] = ds
	ax = 0x45B2
	sp = sp - 2
	Mem0[ss:sp:word16] = ax
	call fn0800_0C6C (retsize: 2;)
	sp = sp + 0x0004
	SCZO = cond(sp)
	SCZO = cond(Mem0[ds:0x464E:word16] - 0x0000)
	branch Test(NE,Z) l0800_2EFE
	// succ:  l0800_2ECA l0800_2EFE
l0800_2ECA:
	es_di = Mem0[ss:bp + 0x0004:segptr32]
	sp = sp - 2
	Mem0[ss:sp:word16] = es
	sp = sp - 2
	Mem0[ss:sp:word16] = ds
	es = Mem0[ss:sp:selector]
	sp = sp + 2
	sp = sp - 2
	Mem0[ss:sp:word16] = di
	di = 0x45B2
	ax = ax ^ ax
	SZO = cond(ax)
	C = false
	cx = 0xFFFF
	// succ:  l0800_2ED9
l0800_2ED9:
	branch cx == 0x0000 l0800_2EDB
	// succ:  l0800_2ED9_2 l0800_2EDB
l0800_2ED9_2:
	SCZO = cond(al - Mem0[es:di:byte])
	di = di + 0x0001
	cx = cx - 0x0001
	branch Test(EQ,Z) l0800_2ED9
	// succ:  l0800_2EDB l0800_2ED9
l0800_2EDB:
	cx = ~cx
	di = di - cx
	SCZO = cond(di)
	cx = cx >>u 0x0001
	SCZO = cond(cx)
	si = di
	di = Mem0[ss:sp:word16]
	sp = sp + 2
	ax = es
	es = Mem0[ss:sp:selector]
	sp = sp + 2
	sp = sp - 2
	Mem0[ss:sp:word16] = ds
	ds = ax
	// succ:  l0800_2EEA
l0800_2EEA:
	branch cx == 0x0000 l0800_2EEC
	// succ:  l0800_2EEA_3 l0800_2EEC
l0800_2EEA_3:
	v39 = Mem0[ds:si:word16]
	Mem0[es:di:word16] = v39
	si = si + 0x0002
	di = di + 0x0002
	cx = cx - 0x0001
	goto l0800_2EEA
	// succ:  l0800_2EEA
l0800_2EEC:
	cx = cx + cx + C
	SCZO = cond(cx)
	// succ:  l0800_2EEE
l0800_2EEE:
	branch cx == 0x0000 l0800_2EF0
	// succ:  l0800_2EEE_1 l0800_2EF0
l0800_2EEE_1:
	v46 = Mem0[ds:si:byte]
	Mem0[es:di:byte] = v46
	si = si + 0x0001
	di = di + 0x0001
	cx = cx - 0x0001
	goto l0800_2EEE
	// succ:  l0800_2EEE
l0800_2EF0:
	ds = Mem0[ss:sp:selector]
	sp = sp + 2
	v48 = Mem0[ds:0x4617:word16] + 0x0001
	Mem0[ds:0x4617:word16] = v48
	SZO = cond(v48)
	ax = 0x0001
	di = Mem0[ss:sp:word16]
	sp = sp + 2
	si = Mem0[ss:sp:word16]
	sp = sp + 2
	sp = bp
	bp = Mem0[ss:sp:word16]
	sp = sp + 2
	return
	// succ:  fn0800_2DE2_exit
l0800_2EFE:
	sp = sp - 2
	Mem0[ss:sp:word16] = ds
	ax = 0x45B2
	sp = sp - 2
	Mem0[ss:sp:word16] = ax
	ax = ax ^ ax
	SZO = cond(ax)
	C = false
	sp = sp - 2
	Mem0[ss:sp:word16] = ax
	sp = sp - 2
	Mem0[ss:sp:word16] = ss
	ax = bp - 0x0010
	sp = sp - 2
	Mem0[ss:sp:word16] = ax
	call fn0800_33CD (retsize: 2;)
	sp = sp + 0x000A
	SCZO = cond(sp)
	si = ax
	Mem0[ds:0x4654:word16] = 0x0000
	goto l0800_2F51
	// succ:  l0800_2F51
l0800_2F1B:
	v19 = Mem0[ds:0x461D:word16]
	sp = sp - 2
	Mem0[ss:sp:word16] = v19
	v20 = Mem0[ds:0x461B:word16]
	sp = sp - 2
	Mem0[ss:sp:word16] = v20
	call fn0800_A614 (retsize: 2;)
	sp = sp + 0x0004
	SCZO = cond(sp)
	Mem0[ds:0x4654:word16] = 0x0000
	Mem0[ds:0x461D:word16] = 0x0000
	Mem0[ds:0x461B:word16] = 0x0000
	v21 = Mem0[ds:0x4652:word16] + 0x0001
	Mem0[ds:0x4652:word16] = v21
	SZO = cond(v21)
	v22 = Mem0[ss:bp + 0x0006:word16]
	sp = sp - 2
	Mem0[ss:sp:word16] = v22
	v23 = Mem0[ss:bp + 0x0004:word16]
	sp = sp - 2
	Mem0[ss:sp:word16] = v23
	call fn0800_2DE2 (retsize: 2;)
	sp = sp + 0x0004
	SCZO = cond(sp)
	di = Mem0[ss:sp:word16]
	sp = sp + 2
	si = Mem0[ss:sp:word16]
	sp = sp + 2
	sp = bp
	bp = Mem0[ss:sp:word16]
	sp = sp + 2
	return
	// succ:  fn0800_2DE2_exit
l0800_2F51:
	ax = Mem0[ds:0x4652:word16]
	SCZO = cond(ax - Mem0[ds:0x4656:word16])
	branch Test(NE,Z) l0800_2F5D
	// succ:  l0800_2F5A l0800_2F5D
l0800_2F5A:
	goto l0800_3066
	// succ:  l0800_3066
l0800_2F5D:
	SCZO = cond(ax - Mem0[ds:0x269A:word16])
	branch Test(NE,Z) l0800_2F6B
	// succ:  l0800_2F63 l0800_2F6B
l0800_2F63:
	ax = ax ^ ax
	SZO = cond(ax)
	C = false
	di = Mem0[ss:sp:word16]
	sp = sp + 2
	si = Mem0[ss:sp:word16]
	sp = sp + 2
	sp = bp
	bp = Mem0[ss:sp:word16]
	sp = sp + 2
	return
	// succ:  fn0800_2DE2_exit
l0800_2F6B:
	ax = Mem0[ds:0x4652:word16]
	ax = ax << 0x0001
	SCZO = cond(ax)
	ax = ax << 0x0001
	SCZO = cond(ax)
	es_bx = Mem0[ds:0x269C:segptr32]
	bx = bx + ax
	SCZO = cond(bx)
	v41 = Mem0[es:bx + 0x0002:word16]
	sp = sp - 2
	Mem0[ss:sp:word16] = v41
	v42 = Mem0[es:bx:word16]
	sp = sp - 2
	Mem0[ss:sp:word16] = v42
	sp = sp - 2
	Mem0[ss:sp:word16] = ds
	ax = 0x45B2
	sp = sp - 2
	Mem0[ss:sp:word16] = ax
	call fn0800_BF9E (retsize: 2;)
	sp = sp + 0x0008
	SCZO = cond(sp)
	sp = sp - 2
	Mem0[ss:sp:word16] = ds
	es = Mem0[ss:sp:selector]
	sp = sp + 2
	di = 0x45B2
	ax = ax ^ ax
	SZO = cond(ax)
	C = false
	cx = 0xFFFF
	// succ:  l0800_2F94
l0800_2F94:
	branch cx == 0x0000 l0800_2F96
	// succ:  l0800_2F94_1 l0800_2F96
l0800_2F94_1:
	SCZO = cond(al - Mem0[es:di:byte])
	di = di + 0x0001
	cx = cx - 0x0001
	branch Test(EQ,Z) l0800_2F94
	// succ:  l0800_2F96 l0800_2F94
l0800_2F96:
	cx = ~cx
	cx = cx - 0x0001
	SZO = cond(cx)
	Mem0[ds:0x4619:word16] = cx
	sp = sp - 2
	Mem0[ss:sp:word16] = ds
	ax = 0x45B2
	sp = sp - 2
	Mem0[ss:sp:word16] = ax
	call fn0800_0C6C (retsize: 2;)
	sp = sp + 0x0004
	SCZO = cond(sp)
	ax = Mem0[ds:0x4652:word16]
	Mem0[ds:0x4656:word16] = ax
	Mem0[ds:0x4617:word16] = 0x0000
	ax = ax << 0x0001
	SCZO = cond(ax)
	ax = ax << 0x0001
	SCZO = cond(ax)
	es_bx = Mem0[ds:0x269C:segptr32]
	bx = bx + ax
	SCZO = cond(bx)
	es_bx = Mem0[ds:bx + 0x0000:segptr32]
	SCZO = cond(Mem0[es:bx:byte] - 0x40)
	branch Test(NE,Z) l0800_3007
	// succ:  l0800_2FC7 l0800_3007
l0800_2FC7:
	sp = sp - 2
	Mem0[ss:sp:word16] = ds
	ax = 0x0A13
	sp = sp - 2
	Mem0[ss:sp:word16] = ax
	ax = Mem0[ds:0x4652:word16]
	ax = ax << 0x0001
	SCZO = cond(ax)
	ax = ax << 0x0001
	SCZO = cond(ax)
	es_bx = Mem0[ds:0x269C:segptr32]
	bx = bx + ax
	SCZO = cond(bx)
	ax = Mem0[es:bx:word16]
	ax = ax + 0x0001
	SZO = cond(ax)
	v43 = Mem0[es:bx + 0x0002:word16]
	sp = sp - 2
	Mem0[ss:sp:word16] = v43
	sp = sp - 2
	Mem0[ss:sp:word16] = ax
	call fn0800_4234 (retsize: 2;)
	sp = sp + 0x0008
	SCZO = cond(sp)
	Mem0[ds:0x461D:word16] = dx
	Mem0[ds:0x461B:word16] = ax
	Mem0[ds:0x4654:word16] = 0x0001
	v44 = Mem0[ss:bp + 0x0006:word16]
	sp = sp - 2
	Mem0[ss:sp:word16] = v44
	v45 = Mem0[ss:bp + 0x0004:word16]
	sp = sp - 2
	Mem0[ss:sp:word16] = v45
	call fn0800_2DE2 (retsize: 2;)
	sp = sp + 0x0004
	SCZO = cond(sp)
	di = Mem0[ss:sp:word16]
	sp = sp + 2
	si = Mem0[ss:sp:word16]
	sp = sp + 2
	sp = bp
	bp = Mem0[ss:sp:word16]
	sp = sp + 2
	return
	// succ:  fn0800_2DE2_exit
l0800_3007:
	sp = sp - 2
	Mem0[ss:sp:word16] = ds
	ax = 0x45B2
	sp = sp - 2
	Mem0[ss:sp:word16] = ax
	call fn0800_335C (retsize: 2;)
	sp = sp + 0x0004
	SCZO = cond(sp)
	SCZO = cond(Mem0[ds:0x464E:word16] - 0x0000)
	branch Test(NE,Z) l0800_3051
	// succ:  l0800_3019 l0800_3051
l0800_3019:
	es_di = Mem0[ss:bp + 0x0004:segptr32]
	sp = sp - 2
	Mem0[ss:sp:word16] = es
	sp = sp - 2
	Mem0[ss:sp:word16] = ds
	es = Mem0[ss:sp:selector]
	sp = sp + 2
	sp = sp - 2
	Mem0[ss:sp:word16] = di
	di = 0x45B2
	ax = ax ^ ax
	SZO = cond(ax)
	C = false
	cx = 0xFFFF
	// succ:  l0800_3028
l0800_3028:
	branch cx == 0x0000 l0800_302A
	// succ:  l0800_3028_1 l0800_302A
l0800_3028_1:
	SCZO = cond(al - Mem0[es:di:byte])
	di = di + 0x0001
	cx = cx - 0x0001
	branch Test(EQ,Z) l0800_3028
	// succ:  l0800_302A l0800_3028
l0800_302A:
	cx = ~cx
	di = di - cx
	SCZO = cond(di)
	cx = cx >>u 0x0001
	SCZO = cond(cx)
	si = di
	di = Mem0[ss:sp:word16]
	sp = sp + 2
	ax = es
	es = Mem0[ss:sp:selector]
	sp = sp + 2
	sp = sp - 2
	Mem0[ss:sp:word16] = ds
	ds = ax
	// succ:  l0800_3039
l0800_3039:
	branch cx == 0x0000 l0800_303B
	// succ:  l0800_3039_2 l0800_303B
l0800_3039_2:
	v47 = Mem0[ds:si:word16]
	Mem0[es:di:word16] = v47
	si = si + 0x0002
	di = di + 0x0002
	cx = cx - 0x0001
	goto l0800_3039
	// succ:  l0800_3039
l0800_303B:
	cx = cx + cx + C
	SCZO = cond(cx)
	// succ:  l0800_303D
l0800_303D:
	branch cx == 0x0000 l0800_303F
	// succ:  l0800_303D_1 l0800_303F
l0800_303D_1:
	v49 = Mem0[ds:si:byte]
	Mem0[es:di:byte] = v49
	si = si + 0x0001
	di = di + 0x0001
	cx = cx - 0x0001
	goto l0800_303D
	// succ:  l0800_303D
l0800_303F:
	ds = Mem0[ss:sp:selector]
	sp = sp + 2
	v50 = Mem0[ds:0x4617:word16] + 0x0001
	Mem0[ds:0x4617:word16] = v50
	SZO = cond(v50)
	v51 = Mem0[ds:0x4652:word16] + 0x0001
	Mem0[ds:0x4652:word16] = v51
	SZO = cond(v51)
	ax = 0x0001
	di = Mem0[ss:sp:word16]
	sp = sp + 2
	si = Mem0[ss:sp:word16]
	sp = sp + 2
	sp = bp
	bp = Mem0[ss:sp:word16]
	sp = sp + 2
	return
	// succ:  fn0800_2DE2_exit
l0800_3051:
	sp = sp - 2
	Mem0[ss:sp:word16] = ds
	ax = 0x45B2
	sp = sp - 2
	Mem0[ss:sp:word16] = ax
	ax = ax ^ ax
	SZO = cond(ax)
	C = false
	sp = sp - 2
	Mem0[ss:sp:word16] = ax
	sp = sp - 2
	Mem0[ss:sp:word16] = ss
	ax = bp - 0x0010
	sp = sp - 2
	Mem0[ss:sp:word16] = ax
	call fn0800_33CD (retsize: 2;)
	sp = sp + 0x000A
	SCZO = cond(sp)
	si = ax
	// succ:  l0800_3066
l0800_3066:
	si = si | si
	SZO = cond(si)
	C = false
	branch Test(NE,Z) l0800_306D
	// succ:  l0800_306A l0800_306D
l0800_306A:
	goto l0800_30F0
	// succ:  l0800_30F0
l0800_306D:
	SCZO = cond(Mem0[ds:0x2A1B:word16] - 0x0000)
	branch Test(EQ,Z) l0800_309E
	// succ:  l0800_3074 l0800_309E
l0800_3074:
	goto l0800_309A
	// succ:  l0800_309A
l0800_3076:
	sp = sp - 2
	Mem0[ss:sp:word16] = ds
	ax = 0x45B2
	sp = sp - 2
	Mem0[ss:sp:word16] = ax
	call fn0800_31B4 (retsize: 2;)
	sp = sp + 0x0004
	SCZO = cond(sp)
	ax = ax | ax
	SZO = cond(ax)
	C = false
	branch Test(EQ,Z) l0800_309E
	// succ:  l0800_3085 l0800_309E
l0800_3085:
	sp = sp - 2
	Mem0[ss:sp:word16] = ds
	ax = 0x45B2
	sp = sp - 2
	Mem0[ss:sp:word16] = ax
	ax = ax ^ ax
	SZO = cond(ax)
	C = false
	sp = sp - 2
	Mem0[ss:sp:word16] = ax
	sp = sp - 2
	Mem0[ss:sp:word16] = ss
	ax = bp - 0x0010
	sp = sp - 2
	Mem0[ss:sp:word16] = ax
	call fn0800_33CD (retsize: 2;)
	sp = sp + 0x000A
	SCZO = cond(sp)
	si = ax
	// succ:  l0800_309A
l0800_309A:
	si = si | si
	SZO = cond(si)
	C = false
	branch Test(NE,Z) l0800_3076
	// succ:  l0800_309E l0800_3076
l0800_309E:
	si = si | si
	SZO = cond(si)
	C = false
	branch Test(EQ,Z) l0800_30F0
	// succ:  l0800_30A2 l0800_30F0
l0800_30A2:
	bx = Mem0[ds:0x4619:word16]
	Mem0[ds:bx + 0x45B2:byte] = 0x00
	SCZO = cond(Mem0[ds:0x4617:word16] - 0x0000)
	branch Test(NE,Z) l0800_30C9
	// succ:  l0800_30B2 l0800_30C9
l0800_30B2:
	SCZO = cond(Mem0[ds:0x4650:word16] - 0x0000)
	branch Test(EQ,Z) l0800_30C9
	// succ:  l0800_30B9 l0800_30C9
l0800_30B9:
	sp = sp - 2
	Mem0[ss:sp:word16] = ds
	ax = 0x45B2
	sp = sp - 2
	Mem0[ss:sp:word16] = ax
	sp = sp - 2
	Mem0[ss:sp:word16] = ds
	ax = 0x0A17
	sp = sp - 2
	Mem0[ss:sp:word16] = ax
	call fn0800_B2EF (retsize: 2;)
	sp = sp + 0x0008
	SCZO = cond(sp)
	// succ:  l0800_30C9
l0800_30C9:
	ax = Mem0[ds:0x461B:word16]
	ax = ax | Mem0[ds:0x461D:word16]
	SZO = cond(ax)
	C = false
	branch Test(EQ,Z) l0800_30DA
	// succ:  l0800_30D2 l0800_30DA
l0800_30D2:
	Mem0[ds:0x4654:word16] = 0x0001
	goto l0800_30DE
	// succ:  l0800_30DE
l0800_30DA:
	v35 = Mem0[ds:0x4652:word16] + 0x0001
	Mem0[ds:0x4652:word16] = v35
	SZO = cond(v35)
	// succ:  l0800_30DE
l0800_30DE:
	v30 = Mem0[ss:bp + 0x0006:word16]
	sp = sp - 2
	Mem0[ss:sp:word16] = v30
	v31 = Mem0[ss:bp + 0x0004:word16]
	sp = sp - 2
	Mem0[ss:sp:word16] = v31
	call fn0800_2DE2 (retsize: 2;)
	sp = sp + 0x0004
	SCZO = cond(sp)
	di = Mem0[ss:sp:word16]
	sp = sp + 2
	si = Mem0[ss:sp:word16]
	sp = sp + 2
	sp = bp
	bp = Mem0[ss:sp:word16]
	sp = sp + 2
	return
	// succ:  fn0800_2DE2_exit
l0800_30F0:
	sp = sp - 2
	Mem0[ss:sp:word16] = ds
	ax = 0x45B2
	sp = sp - 2
	Mem0[ss:sp:word16] = ax
	v24 = Mem0[ss:bp + 0x0006:word16]
	sp = sp - 2
	Mem0[ss:sp:word16] = v24
	v25 = Mem0[ss:bp + 0x0004:word16]
	sp = sp - 2
	Mem0[ss:sp:word16] = v25
	call fn0800_3509 (retsize: 2;)
	sp = sp + 0x0008
	SCZO = cond(sp)
	sp = sp - 2
	Mem0[ss:sp:word16] = ss
	es = Mem0[ss:sp:selector]
	sp = sp + 2
	di = bp - 0x0010
	sp = sp - 2
	Mem0[ss:sp:word16] = es
	es = Mem0[ss:bp + 0x0006:selector]
	sp = sp - 2
	Mem0[ss:sp:word16] = di
	di = Mem0[ss:bp + 0x0004:word16]
	ax = di
	di = Mem0[ss:sp:word16]
	sp = sp + 2
	dx = es
	es = Mem0[ss:sp:selector]
	sp = sp + 2
	sp = sp - 2
	Mem0[ss:sp:word16] = dx
	sp = sp - 2
	Mem0[ss:sp:word16] = ax
	ax = ax ^ ax
	SZO = cond(ax)
	C = false
	cx = 0xFFFF
	// succ:  l0800_311B
l0800_311B:
	branch cx == 0x0000 l0800_311D
	// succ:  l0800_311B_1 l0800_311D
l0800_311B_1:
	SCZO = cond(al - Mem0[es:di:byte])
	di = di + 0x0001
	cx = cx - 0x0001
	branch Test(EQ,Z) l0800_311B
	// succ:  l0800_311D l0800_311B
l0800_311D:
	cx = ~cx
	di = di - cx
	SCZO = cond(di)
	si = di
	di = Mem0[ss:sp:word16]
	sp = sp + 2
	ax = es
	es = Mem0[ss:sp:selector]
	sp = sp + 2
	Mem0[ss:bp - 0x0002:word16] = ds
	ds = ax
	sp = sp - 2
	Mem0[ss:sp:word16] = cx
	cx = 0xFFFF
	ax = ax ^ ax
	SZO = cond(ax)
	C = false
	// succ:  l0800_3132
l0800_3132:
	branch cx == 0x0000 l0800_3134
	// succ:  l0800_3132_2 l0800_3134
l0800_3132_2:
	SCZO = cond(al - Mem0[es:di:byte])
	di = di + 0x0001
	cx = cx - 0x0001
	branch Test(EQ,Z) l0800_3132
	// succ:  l0800_3134 l0800_3132
l0800_3134:
	di = di - 0x0001
	SZO = cond(di)
	cx = Mem0[ss:sp:word16]
	sp = sp + 2
	// succ:  l0800_3136
l0800_3136:
	branch cx == 0x0000 l0800_3138
	// succ:  l0800_3136_3 l0800_3138
l0800_3136_3:
	v26 = Mem0[ds:si:byte]
	Mem0[es:di:byte] = v26
	si = si + 0x0001
	di = di + 0x0001
	cx = cx - 0x0001
	goto l0800_3136
	// succ:  l0800_3136
l0800_3138:
	ds = Mem0[ss:bp - 0x0002:selector]
	v27 = Mem0[ss:bp + 0x0006:word16]
	sp = sp - 2
	Mem0[ss:sp:word16] = v27
	v28 = Mem0[ss:bp + 0x0004:word16]
	sp = sp - 2
	Mem0[ss:sp:word16] = v28
	call fn0800_0C6C (retsize: 2;)
	sp = sp + 0x0004
	SCZO = cond(sp)
	si = Mem0[ss:bp + 0x0004:word16]
	cx = Mem0[ss:bp + 0x0006:word16]
	sp = sp - 2
	Mem0[ss:sp:word16] = ds
	es = Mem0[ss:sp:selector]
	sp = sp + 2
	di = 0x4348
	sp = sp - 2
	Mem0[ss:sp:word16] = ds
	ds = cx
	ax = ax ^ ax
	SZO = cond(ax)
	C = false
	cx = 0xFFFF
	// succ:  l0800_315A
l0800_315A:
	branch cx == 0x0000 l0800_315C
	// succ:  l0800_315A_1 l0800_315C
l0800_315A_1:
	SCZO = cond(al - Mem0[es:di:byte])
	di = di + 0x0001
	cx = cx - 0x0001
	branch Test(EQ,Z) l0800_315A
	// succ:  l0800_315C l0800_315A
l0800_315C:
	cx = ~cx
	di = di - cx
	SCZO = cond(di)
	// succ:  l0800_3160
l0800_3160:
	branch cx == 0x0000 l0800_3162
	// succ:  l0800_3160_2 l0800_3162
l0800_3160_2:
	SCZO = cond(Mem0[ds:si:byte] - Mem0[es:di:byte])
	si = si + 0x0001
	di = di + 0x0001
	cx = cx - 0x0001
	branch Test(NE,Z) l0800_3160
	// succ:  l0800_3162 l0800_3160
l0800_3162:
	branch Test(EQ,Z) l0800_3169
	// succ:  l0800_3164 l0800_3169
l0800_3164:
	ax = ax - ax - C
	SCZO = cond(ax)
	ax = ax - 0xFFFF - C
	SCZO = cond(ax)
	// succ:  l0800_3169
l0800_3169:
	ds = Mem0[ss:sp:selector]
	sp = sp + 2
	ax = ax | ax
	SZO = cond(ax)
	C = false
	branch Test(EQ,Z) l0800_3195
	// succ:  l0800_316E l0800_3195
l0800_316E:
	si = Mem0[ss:bp + 0x0004:word16]
	cx = Mem0[ss:bp + 0x0006:word16]
	sp = sp - 2
	Mem0[ss:sp:word16] = ds
	es = Mem0[ss:sp:selector]
	sp = sp + 2
	di = 0x4477
	sp = sp - 2
	Mem0[ss:sp:word16] = ds
	ds = cx
	ax = ax ^ ax
	SZO = cond(ax)
	C = false
	cx = 0xFFFF
	// succ:  l0800_3181
l0800_3181:
	branch cx == 0x0000 l0800_3183
	// succ:  l0800_3181_1 l0800_3183
l0800_3181_1:
	SCZO = cond(al - Mem0[es:di:byte])
	di = di + 0x0001
	cx = cx - 0x0001
	branch Test(EQ,Z) l0800_3181
	// succ:  l0800_3183 l0800_3181
l0800_3183:
	cx = ~cx
	di = di - cx
	SCZO = cond(di)
	// succ:  l0800_3187
l0800_3187:
	branch cx == 0x0000 l0800_3189
	// succ:  l0800_3187_2 l0800_3189
l0800_3187_2:
	SCZO = cond(Mem0[ds:si:byte] - Mem0[es:di:byte])
	si = si + 0x0001
	di = di + 0x0001
	cx = cx - 0x0001
	branch Test(NE,Z) l0800_3187
	// succ:  l0800_3189 l0800_3187
l0800_3189:
	branch Test(EQ,Z) l0800_3190
	// succ:  l0800_318B l0800_3190
l0800_318B:
	ax = ax - ax - C
	SCZO = cond(ax)
	ax = ax - 0xFFFF - C
	SCZO = cond(ax)
	// succ:  l0800_3190
l0800_3190:
	ds = Mem0[ss:sp:selector]
	sp = sp + 2
	ax = ax | ax
	SZO = cond(ax)
	C = false
	branch Test(NE,Z) l0800_31A7
	// succ:  l0800_3195 l0800_31A7
l0800_3195:
	v32 = Mem0[ss:bp + 0x0006:word16]
	sp = sp - 2
	Mem0[ss:sp:word16] = v32
	v33 = Mem0[ss:bp + 0x0004:word16]
	sp = sp - 2
	Mem0[ss:sp:word16] = v33
	call fn0800_2DE2 (retsize: 2;)
	sp = sp + 0x0004
	SCZO = cond(sp)
	di = Mem0[ss:sp:word16]
	sp = sp + 2
	si = Mem0[ss:sp:word16]
	sp = sp + 2
	sp = bp
	bp = Mem0[ss:sp:word16]
	sp = sp + 2
	return
	// succ:  fn0800_2DE2_exit
l0800_31A7:
	v34 = Mem0[ds:0x4617:word16] + 0x0001
	Mem0[ds:0x4617:word16] = v34
	SZO = cond(v34)
	ax = 0x0001
	di = Mem0[ss:sp:word16]
	sp = sp + 2
	si = Mem0[ss:sp:word16]
	sp = sp + 2
	sp = bp
	bp = Mem0[ss:sp:word16]
	sp = sp + 2
	return
	// succ:  fn0800_2DE2_exit
fn0800_2DE2_exit:


// fn0800_31B4
// Return size: 2
define fn0800_31B4
fn0800_31B4_entry:
	// succ:  l0800_31B4
l0800_31B4:
	sp = fp
	Top = 0
	sp = sp - 2
	Mem0[ss:sp:word16] = bp
	bp = sp
	sp = sp - 0x0082
	SCZO = cond(sp)
	sp = sp - 2
	Mem0[ss:sp:word16] = si
	sp = sp - 2
	Mem0[ss:sp:word16] = di
	// succ:  l0800_31BD
l0800_31BD:
	v8 = Mem0[ss:bp + 0x0006:word16]
	sp = sp - 2
	Mem0[ss:sp:word16] = v8
	v9 = Mem0[ss:bp + 0x0004:word16]
	sp = sp - 2
	Mem0[ss:sp:word16] = v9
	sp = sp - 2
	Mem0[ss:sp:word16] = ss
	ax = bp - 0x0082
	sp = sp - 2
	Mem0[ss:sp:word16] = ax
	call fn0800_3509 (retsize: 2;)
	sp = sp + 0x0008
	SCZO = cond(sp)
	v11 = Mem0[ss:bp + 0x0006:word16]
	sp = sp - 2
	Mem0[ss:sp:word16] = v11
	v12 = Mem0[ss:bp + 0x0004:word16]
	sp = sp - 2
	Mem0[ss:sp:word16] = v12
	sp = sp - 2
	Mem0[ss:sp:word16] = ss
	ax = bp - 0x000E
	sp = sp - 2
	Mem0[ss:sp:word16] = ax
	call fn0800_35A3 (retsize: 2;)
	sp = sp + 0x0008
	SCZO = cond(sp)
	bx = Mem0[ds:0x09AC:word16]
	bx = bx << 0x0001
	SCZO = cond(bx)
	v15 = Mem0[ds:bx + 0x09AE:word16]
	sp = sp - 2
	Mem0[ss:sp:word16] = v15
	sp = sp - 2
	Mem0[ss:sp:word16] = ss
	ax = bp - 0x0082
	sp = sp - 2
	Mem0[ss:sp:word16] = ax
	sp = sp - 2
	Mem0[ss:sp:word16] = ss
	ax = bp - 0x001C
	sp = sp - 2
	Mem0[ss:sp:word16] = ax
	call fn0800_32CD (retsize: 2;)
	sp = sp + 0x000A
	SCZO = cond(sp)
	ax = ax | ax
	SZO = cond(ax)
	C = false
	branch Test(NE,Z) l0800_323E
	// succ:  l0800_31FF l0800_323E
l0800_31FF:
	sp = sp - 2
	Mem0[ss:sp:word16] = ss
	ax = bp - 0x000E
	sp = sp - 2
	Mem0[ss:sp:word16] = ax
	sp = sp - 2
	Mem0[ss:sp:word16] = ds
	ax = 0x0A30
	sp = sp - 2
	Mem0[ss:sp:word16] = ax
	sp = sp - 2
	Mem0[ss:sp:word16] = ss
	ax = bp - 0x001C
	sp = sp - 2
	Mem0[ss:sp:word16] = ax
	sp = sp - 2
	Mem0[ss:sp:word16] = ss
	ax = bp - 0x0082
	sp = sp - 2
	Mem0[ss:sp:word16] = ax
	sp = sp - 2
	Mem0[ss:sp:word16] = ds
	ax = 0x0A27
	sp = sp - 2
	Mem0[ss:sp:word16] = ax
	v19 = Mem0[ss:bp + 0x0006:word16]
	sp = sp - 2
	Mem0[ss:sp:word16] = v19
	v20 = Mem0[ss:bp + 0x0004:word16]
	sp = sp - 2
	Mem0[ss:sp:word16] = v20
	call fn0800_BEA2 (retsize: 2;)
	sp = sp + 0x0018
	SCZO = cond(sp)
	v21 = Mem0[ds:0x09AC:word16] + 0x0001
	Mem0[ds:0x09AC:word16] = v21
	SZO = cond(v21)
	bx = Mem0[ds:0x09AC:word16]
	bx = bx << 0x0001
	SCZO = cond(bx)
	Mem0[ds:bx + 0x09AE:word16] = 0x0000
	ax = 0x0001
	di = Mem0[ss:sp:word16]
	sp = sp + 2
	si = Mem0[ss:sp:word16]
	sp = sp + 2
	sp = bp
	bp = Mem0[ss:sp:word16]
	sp = sp + 2
	return
	// succ:  fn0800_31B4_exit
l0800_323E:
	SCZO = cond(Mem0[ds:0x09AC:word16] - 0x0000)
	branch Test(NE,Z) l0800_3253
	// succ:  l0800_3245 l0800_3253
l0800_3245:
	Mem0[ds:0x09AE:word16] = 0x0000
	ax = ax ^ ax
	SZO = cond(ax)
	C = false
	di = Mem0[ss:sp:word16]
	sp = sp + 2
	si = Mem0[ss:sp:word16]
	sp = sp + 2
	sp = bp
	bp = Mem0[ss:sp:word16]
	sp = sp + 2
	return
	// succ:  fn0800_31B4_exit
l0800_3253:
	sp = sp - 2
	Mem0[ss:sp:word16] = ss
	es = Mem0[ss:sp:selector]
	sp = sp + 2
	di = bp - 0x0082
	ax = ax ^ ax
	SZO = cond(ax)
	C = false
	cx = 0xFFFF
	// succ:  l0800_325E
l0800_325E:
	branch cx == 0x0000 l0800_3260
	// succ:  l0800_325E_1 l0800_3260
l0800_325E_1:
	SCZO = cond(al - Mem0[es:di:byte])
	di = di + 0x0001
	cx = cx - 0x0001
	branch Test(EQ,Z) l0800_325E
	// succ:  l0800_3260 l0800_325E
l0800_3260:
	cx = ~cx
	cx = cx - 0x0001
	SZO = cond(cx)
	cx = cx - 0x0001
	SZO = cond(cx)
	ax = bp - 0x0082
	cx = cx + ax
	SCZO = cond(cx)
	bx = cx
	Mem0[ss:bx:byte] = 0x00
	sp = sp - 2
	Mem0[ss:sp:word16] = ss
	sp = sp - 2
	Mem0[ss:sp:word16] = ax
	v25 = Mem0[ss:bp + 0x0006:word16]
	sp = sp - 2
	Mem0[ss:sp:word16] = v25
	v26 = Mem0[ss:bp + 0x0004:word16]
	sp = sp - 2
	Mem0[ss:sp:word16] = v26
	call fn0800_3509 (retsize: 2;)
	sp = sp + 0x0008
	SCZO = cond(sp)
	sp = sp - 2
	Mem0[ss:sp:word16] = ss
	es = Mem0[ss:sp:selector]
	sp = sp + 2
	di = bp - 0x000E
	sp = sp - 2
	Mem0[ss:sp:word16] = es
	es = Mem0[ss:bp + 0x0006:selector]
	sp = sp - 2
	Mem0[ss:sp:word16] = di
	di = Mem0[ss:bp + 0x0004:word16]
	ax = di
	di = Mem0[ss:sp:word16]
	sp = sp + 2
	dx = es
	es = Mem0[ss:sp:selector]
	sp = sp + 2
	sp = sp - 2
	Mem0[ss:sp:word16] = dx
	sp = sp - 2
	Mem0[ss:sp:word16] = ax
	ax = ax ^ ax
	SZO = cond(ax)
	C = false
	cx = 0xFFFF
	// succ:  l0800_3298
l0800_3298:
	branch cx == 0x0000 l0800_329A
	// succ:  l0800_3298_2 l0800_329A
l0800_3298_2:
	SCZO = cond(al - Mem0[es:di:byte])
	di = di + 0x0001
	cx = cx - 0x0001
	branch Test(EQ,Z) l0800_3298
	// succ:  l0800_329A l0800_3298
l0800_329A:
	cx = ~cx
	di = di - cx
	SCZO = cond(di)
	si = di
	di = Mem0[ss:sp:word16]
	sp = sp + 2
	ax = es
	es = Mem0[ss:sp:selector]
	sp = sp + 2
	dx = ds
	ds = ax
	sp = sp - 2
	Mem0[ss:sp:word16] = cx
	cx = 0xFFFF
	ax = ax ^ ax
	SZO = cond(ax)
	C = false
	// succ:  l0800_32AE
l0800_32AE:
	branch cx == 0x0000 l0800_32B0
	// succ:  l0800_32AE_3 l0800_32B0
l0800_32AE_3:
	SCZO = cond(al - Mem0[es:di:byte])
	di = di + 0x0001
	cx = cx - 0x0001
	branch Test(EQ,Z) l0800_32AE
	// succ:  l0800_32B0 l0800_32AE
l0800_32B0:
	di = di - 0x0001
	SZO = cond(di)
	cx = Mem0[ss:sp:word16]
	sp = sp + 2
	// succ:  l0800_32B2
l0800_32B2:
	branch cx == 0x0000 l0800_32B4
	// succ:  l0800_32B2_4 l0800_32B4
l0800_32B2_4:
	v28 = Mem0[ds:si:byte]
	Mem0[es:di:byte] = v28
	si = si + 0x0001
	di = di + 0x0001
	cx = cx - 0x0001
	goto l0800_32B2
	// succ:  l0800_32B2
l0800_32B4:
	ds = dx
	v29 = Mem0[ds:0x09AC:word16] - 0x0001
	Mem0[ds:0x09AC:word16] = v29
	SZO = cond(v29)
	bx = Mem0[ds:0x09AC:word16]
	bx = bx << 0x0001
	SCZO = cond(bx)
	v30 = Mem0[ds:bx + 0x09AE:word16] + 0x0001
	Mem0[ds:bx + 0x09AE:word16] = v30
	SZO = cond(v30)
	goto l0800_31BD
	// succ:  l0800_31BD
fn0800_31B4_exit:


// fn0800_32CD
// Return size: 2
define fn0800_32CD
fn0800_32CD_entry:
	// succ:  l0800_32CD
l0800_32CD:
	sp = fp
	Top = 0
	sp = sp - 2
	Mem0[ss:sp:word16] = bp
	bp = sp
	sp = sp - 0x0066
	SCZO = cond(sp)
	sp = sp - 2
	Mem0[ss:sp:word16] = si
	sp = sp - 2
	Mem0[ss:sp:word16] = di
	sp = sp - 2
	Mem0[ss:sp:word16] = ss
	es = Mem0[ss:sp:selector]
	sp = sp + 2
	di = bp - 0x0066
	sp = sp - 2
	Mem0[ss:sp:word16] = es
	es = Mem0[ss:bp + 0x000A:selector]
	sp = sp - 2
	Mem0[ss:sp:word16] = di
	di = Mem0[ss:bp + 0x0008:word16]
	ax = ax ^ ax
	SZO = cond(ax)
	C = false
	cx = 0xFFFF
	// succ:  l0800_32E7
l0800_32E7:
	branch cx == 0x0000 l0800_32E9
	// succ:  l0800_32E7_1 l0800_32E9
l0800_32E7_1:
	SCZO = cond(al - Mem0[es:di:byte])
	di = di + 0x0001
	cx = cx - 0x0001
	branch Test(EQ,Z) l0800_32E7
	// succ:  l0800_32E9 l0800_32E7
l0800_32E9:
	cx = ~cx
	di = di - cx
	SCZO = cond(di)
	cx = cx >>u 0x0001
	SCZO = cond(cx)
	si = di
	di = Mem0[ss:sp:word16]
	sp = sp + 2
	ax = es
	es = Mem0[ss:sp:selector]
	sp = sp + 2
	sp = sp - 2
	Mem0[ss:sp:word16] = ds
	ds = ax
	// succ:  l0800_32F8
l0800_32F8:
	branch cx == 0x0000 l0800_32FA
	// succ:  l0800_32F8_2 l0800_32FA
l0800_32F8_2:
	v16 = Mem0[ds:si:word16]
	Mem0[es:di:word16] = v16
	si = si + 0x0002
	di = di + 0x0002
	cx = cx - 0x0001
	goto l0800_32F8
	// succ:  l0800_32F8
l0800_32FA:
	cx = cx + cx + C
	SCZO = cond(cx)
	// succ:  l0800_32FC
l0800_32FC:
	branch cx == 0x0000 l0800_32FE
	// succ:  l0800_32FC_1 l0800_32FE
l0800_32FC_1:
	v17 = Mem0[ds:si:byte]
	Mem0[es:di:byte] = v17
	si = si + 0x0001
	di = di + 0x0001
	cx = cx - 0x0001
	goto l0800_32FC
	// succ:  l0800_32FC
l0800_32FE:
	ds = Mem0[ss:sp:selector]
	sp = sp + 2
	sp = sp - 2
	Mem0[ss:sp:word16] = ss
	es = Mem0[ss:sp:selector]
	sp = sp + 2
	di = bp - 0x0066
	si = 0x0A32
	cx = 0xFFFF
	ax = ax ^ ax
	SZO = cond(ax)
	C = false
	// succ:  l0800_330C
l0800_330C:
	branch cx == 0x0000 l0800_330E
	// succ:  l0800_330C_1 l0800_330E
l0800_330C_1:
	SCZO = cond(al - Mem0[es:di:byte])
	di = di + 0x0001
	cx = cx - 0x0001
	branch Test(EQ,Z) l0800_330C
	// succ:  l0800_330E l0800_330C
l0800_330E:
	di = di - 0x0001
	SZO = cond(di)
	cx = 0x0004
	// succ:  l0800_3312
l0800_3312:
	branch cx == 0x0000 l0800_3314
	// succ:  l0800_3312_2 l0800_3314
l0800_3312_2:
	v18 = Mem0[ds:si:byte]
	Mem0[es:di:byte] = v18
	si = si + 0x0001
	di = di + 0x0001
	cx = cx - 0x0001
	goto l0800_3312
	// succ:  l0800_3312
l0800_3314:
	sp = sp - 2
	Mem0[ss:sp:word16] = ss
	ax = bp - 0x0066
	sp = sp - 2
	Mem0[ss:sp:word16] = ax
	ax = 0x0010
	sp = sp - 2
	Mem0[ss:sp:word16] = ax
	v19 = Mem0[ss:bp + 0x0006:word16]
	sp = sp - 2
	Mem0[ss:sp:word16] = v19
	v20 = Mem0[ss:bp + 0x0004:word16]
	sp = sp - 2
	Mem0[ss:sp:word16] = v20
	call fn0800_33CD (retsize: 2;)
	sp = sp + 0x000A
	SCZO = cond(sp)
	ax = ax | ax
	SZO = cond(ax)
	C = false
	branch Test(EQ,Z) l0800_334D
	// succ:  l0800_332D l0800_334D
l0800_332D:
	ax = 0x0001
	di = Mem0[ss:sp:word16]
	sp = sp + 2
	si = Mem0[ss:sp:word16]
	sp = sp + 2
	sp = bp
	bp = Mem0[ss:sp:word16]
	sp = sp + 2
	return
	// succ:  fn0800_32CD_exit
l0800_3336:
	ax = 0x0010
	sp = sp - 2
	Mem0[ss:sp:word16] = ax
	v21 = Mem0[ss:bp + 0x0006:word16]
	sp = sp - 2
	Mem0[ss:sp:word16] = v21
	v22 = Mem0[ss:bp + 0x0004:word16]
	sp = sp - 2
	Mem0[ss:sp:word16] = v22
	call fn0800_3479 (retsize: 2;)
	sp = sp + 0x0006
	SCZO = cond(sp)
	ax = ax | ax
	SZO = cond(ax)
	C = false
	branch Test(NE,Z) l0800_3353
	// succ:  l0800_334A l0800_3353
l0800_334A:
	v23 = Mem0[ss:bp + 0x000C:word16] - 0x0001
	Mem0[ss:bp + 0x000C:word16] = v23
	SZO = cond(v23)
	// succ:  l0800_334D
l0800_334D:
	SCZO = cond(Mem0[ss:bp + 0x000C:word16] - 0x0000)
	branch Test(NE,Z) l0800_3336
	// succ:  l0800_3353 l0800_3336
l0800_3353:
	ax = Mem0[ss:bp + 0x000C:word16]
	di = Mem0[ss:sp:word16]
	sp = sp + 2
	si = Mem0[ss:sp:word16]
	sp = sp + 2
	sp = bp
	bp = Mem0[ss:sp:word16]
	sp = sp + 2
	return
	// succ:  fn0800_32CD_exit
fn0800_32CD_exit:


// fn0800_335C
// Return size: 2
define fn0800_335C
fn0800_335C_entry:
	// succ:  l0800_335C
l0800_335C:
	sp = fp
	Top = 0
	sp = sp - 2
	Mem0[ss:sp:word16] = bp
	bp = sp
	sp = sp - 0x001C
	SCZO = cond(sp)
	sp = sp - 2
	Mem0[ss:sp:word16] = si
	sp = sp - 2
	Mem0[ss:sp:word16] = di
	v8 = Mem0[ss:bp + 0x0006:word16]
	sp = sp - 2
	Mem0[ss:sp:word16] = v8
	v9 = Mem0[ss:bp + 0x0004:word16]
	sp = sp - 2
	Mem0[ss:sp:word16] = v9
	ax = 0x0010
	sp = sp - 2
	Mem0[ss:sp:word16] = ax
	sp = sp - 2
	Mem0[ss:sp:word16] = ss
	ax = bp - 0x000E
	sp = sp - 2
	Mem0[ss:sp:word16] = ax
	call fn0800_33CD (retsize: 2;)
	sp = sp + 0x000A
	SCZO = cond(sp)
	ax = ax | ax
	SZO = cond(ax)
	C = false
	branch Test(NE,Z) l0800_33C7
	// succ:  l0800_337D l0800_33C7
l0800_337D:
	v14 = Mem0[ss:bp + 0x0006:word16]
	sp = sp - 2
	Mem0[ss:sp:word16] = v14
	v15 = Mem0[ss:bp + 0x0004:word16]
	sp = sp - 2
	Mem0[ss:sp:word16] = v15
	sp = sp - 2
	Mem0[ss:sp:word16] = ss
	ax = bp - 0x001C
	sp = sp - 2
	Mem0[ss:sp:word16] = ax
	call fn0800_35A3 (retsize: 2;)
	sp = sp + 0x0008
	SCZO = cond(sp)
	ax = ss
	si = bp - 0x000E
	sp = sp - 2
	Mem0[ss:sp:word16] = ds
	ds = ax
	sp = sp - 2
	Mem0[ss:sp:word16] = ss
	es = Mem0[ss:sp:selector]
	sp = sp + 2
	di = bp - 0x001C
	ax = ax ^ ax
	SZO = cond(ax)
	C = false
	cx = 0xFFFF
	// succ:  l0800_33A0
l0800_33A0:
	branch cx == 0x0000 l0800_33A2
	// succ:  l0800_33A0_1 l0800_33A2
l0800_33A0_1:
	SCZO = cond(al - Mem0[es:di:byte])
	di = di + 0x0001
	cx = cx - 0x0001
	branch Test(EQ,Z) l0800_33A0
	// succ:  l0800_33A2 l0800_33A0
l0800_33A2:
	cx = ~cx
	di = di - cx
	SCZO = cond(di)
	// succ:  l0800_33A6
l0800_33A6:
	branch cx == 0x0000 l0800_33A8
	// succ:  l0800_33A6_2 l0800_33A8
l0800_33A6_2:
	SCZO = cond(Mem0[ds:si:byte] - Mem0[es:di:byte])
	si = si + 0x0001
	di = di + 0x0001
	cx = cx - 0x0001
	branch Test(NE,Z) l0800_33A6
	// succ:  l0800_33A8 l0800_33A6
l0800_33A8:
	branch Test(EQ,Z) l0800_33AF
	// succ:  l0800_33AA l0800_33AF
l0800_33AA:
	ax = ax - ax - C
	SCZO = cond(ax)
	ax = ax - 0xFFFF - C
	SCZO = cond(ax)
	// succ:  l0800_33AF
l0800_33AF:
	ds = Mem0[ss:sp:selector]
	sp = sp + 2
	ax = ax | ax
	SZO = cond(ax)
	C = false
	branch Test(NE,Z) l0800_33C7
	// succ:  l0800_33B4 l0800_33C7
l0800_33B4:
	es_di = Mem0[ss:bp + 0x0004:segptr32]
	si = 0x0A36
	cx = 0xFFFF
	ax = ax ^ ax
	SZO = cond(ax)
	C = false
	// succ:  l0800_33BF
l0800_33BF:
	branch cx == 0x0000 l0800_33C1
	// succ:  l0800_33BF_1 l0800_33C1
l0800_33BF_1:
	SCZO = cond(al - Mem0[es:di:byte])
	di = di + 0x0001
	cx = cx - 0x0001
	branch Test(EQ,Z) l0800_33BF
	// succ:  l0800_33C1 l0800_33BF
l0800_33C1:
	di = di - 0x0001
	SZO = cond(di)
	cx = 0x0005
	// succ:  l0800_33C5
l0800_33C5:
	branch cx == 0x0000 l0800_33C7
	// succ:  l0800_33C5_2 l0800_33C7
l0800_33C5_2:
	v21 = Mem0[ds:si:byte]
	Mem0[es:di:byte] = v21
	si = si + 0x0001
	di = di + 0x0001
	cx = cx - 0x0001
	goto l0800_33C5
	// succ:  l0800_33C5
l0800_33C7:
	di = Mem0[ss:sp:word16]
	sp = sp + 2
	si = Mem0[ss:sp:word16]
	sp = sp + 2
	sp = bp
	bp = Mem0[ss:sp:word16]
	sp = sp + 2
	return
	// succ:  fn0800_335C_exit
fn0800_335C_exit:


// fn0800_33CD
// Return size: 2
define fn0800_33CD
fn0800_33CD_entry:
	// succ:  l0800_33CD
l0800_33CD:
	sp = fp
	Top = 0
	sp = sp - 2
	Mem0[ss:sp:word16] = bp
	bp = sp
	sp = sp - 2
	Mem0[ss:sp:word16] = si
	sp = sp - 2
	Mem0[ss:sp:word16] = di
	v7 = Mem0[ss:bp + 0x0008:word16]
	sp = sp - 2
	Mem0[ss:sp:word16] = v7
	sp = sp - 2
	Mem0[ss:sp:word16] = ds
	ax = 0x4623
	sp = sp - 2
	Mem0[ss:sp:word16] = ax
	v10 = Mem0[ss:bp + 0x000C:word16]
	sp = sp - 2
	Mem0[ss:sp:word16] = v10
	v11 = Mem0[ss:bp + 0x000A:word16]
	sp = sp - 2
	Mem0[ss:sp:word16] = v11
	call fn0800_A817 (retsize: 2;)
	sp = sp + 0x000A
	SCZO = cond(sp)
	ax = ax | ax
	SZO = cond(ax)
	C = false
	branch Test(EQ,Z) l0800_33F1
	// succ:  l0800_33EA l0800_33F1
l0800_33EA:
	ax = 0x0001
	di = Mem0[ss:sp:word16]
	sp = sp + 2
	si = Mem0[ss:sp:word16]
	sp = sp + 2
	bp = Mem0[ss:sp:word16]
	sp = sp + 2
	return
	// succ:  fn0800_33CD_exit
l0800_33F1:
	sp = sp - 2
	Mem0[ss:sp:word16] = ds
	es = Mem0[ss:sp:selector]
	sp = sp + 2
	di = 0x0A3B
	si = 0x4641
	cx = 0x0002
	ax = ax ^ ax
	SZO = cond(ax)
	C = false
	// succ:  l0800_33FE
l0800_33FE:
	branch cx == 0x0000 l0800_3400
	// succ:  l0800_33FE_1 l0800_3400
l0800_33FE_1:
	SCZO = cond(Mem0[ds:si:byte] - Mem0[es:di:byte])
	si = si + 0x0001
	di = di + 0x0001
	cx = cx - 0x0001
	branch Test(NE,Z) l0800_33FE
	// succ:  l0800_3400 l0800_33FE
l0800_3400:
	branch Test(EQ,Z) l0800_3407
	// succ:  l0800_3402 l0800_3407
l0800_3402:
	ax = ax - ax - C
	SCZO = cond(ax)
	ax = ax - 0xFFFF - C
	SCZO = cond(ax)
	// succ:  l0800_3407
l0800_3407:
	ax = ax | ax
	SZO = cond(ax)
	C = false
	branch Test(EQ,Z) l0800_3431
	// succ:  l0800_340B l0800_3431
l0800_340B:
	sp = sp - 2
	Mem0[ss:sp:word16] = ds
	es = Mem0[ss:sp:selector]
	sp = sp + 2
	di = 0x0A3D
	si = 0x4641
	cx = 0x0003
	ax = ax ^ ax
	SZO = cond(ax)
	C = false
	// succ:  l0800_3418
l0800_3418:
	branch cx == 0x0000 l0800_341A
	// succ:  l0800_3418_1 l0800_341A
l0800_3418_1:
	SCZO = cond(Mem0[ds:si:byte] - Mem0[es:di:byte])
	si = si + 0x0001
	di = di + 0x0001
	cx = cx - 0x0001
	branch Test(NE,Z) l0800_3418
	// succ:  l0800_341A l0800_3418
l0800_341A:
	branch Test(EQ,Z) l0800_3421
	// succ:  l0800_341C l0800_3421
l0800_341C:
	ax = ax - ax - C
	SCZO = cond(ax)
	ax = ax - 0xFFFF - C
	SCZO = cond(ax)
	// succ:  l0800_3421
l0800_3421:
	ax = ax | ax
	SZO = cond(ax)
	C = false
	branch Test(EQ,Z) l0800_3431
	// succ:  l0800_3425 l0800_3431
l0800_3425:
	al = Mem0[ds:0x4638:byte]
	ax = (int16) al
	ax = ax & Mem0[ss:bp + 0x0008:word16]
	SZO = cond(ax)
	C = false
	SCZO = cond(ax - Mem0[ss:bp + 0x0008:word16])
	branch Test(EQ,Z) l0800_3444
	// succ:  l0800_3431 l0800_3444
l0800_3431:
	v19 = Mem0[ss:bp + 0x0008:word16]
	sp = sp - 2
	Mem0[ss:sp:word16] = v19
	v20 = Mem0[ss:bp + 0x0006:word16]
	sp = sp - 2
	Mem0[ss:sp:word16] = v20
	v21 = Mem0[ss:bp + 0x0004:word16]
	sp = sp - 2
	Mem0[ss:sp:word16] = v21
	call fn0800_3479 (retsize: 2;)
	sp = sp + 0x0006
	SCZO = cond(sp)
	di = Mem0[ss:sp:word16]
	sp = sp + 2
	si = Mem0[ss:sp:word16]
	sp = sp + 2
	bp = Mem0[ss:sp:word16]
	sp = sp + 2
	return
	// succ:  fn0800_33CD_exit
l0800_3444:
	ax = Mem0[ss:bp + 0x0004:word16]
	ax = ax | Mem0[ss:bp + 0x0006:word16]
	SZO = cond(ax)
	C = false
	branch Test(EQ,Z) l0800_3473
	// succ:  l0800_344C l0800_3473
l0800_344C:
	es_di = Mem0[ss:bp + 0x0004:segptr32]
	sp = sp - 2
	Mem0[ss:sp:word16] = es
	sp = sp - 2
	Mem0[ss:sp:word16] = ds
	es = Mem0[ss:sp:selector]
	sp = sp + 2
	sp = sp - 2
	Mem0[ss:sp:word16] = di
	di = 0x4641
	ax = ax ^ ax
	SZO = cond(ax)
	C = false
	cx = 0xFFFF
	// succ:  l0800_345B
l0800_345B:
	branch cx == 0x0000 l0800_345D
	// succ:  l0800_345B_1 l0800_345D
l0800_345B_1:
	SCZO = cond(al - Mem0[es:di:byte])
	di = di + 0x0001
	cx = cx - 0x0001
	branch Test(EQ,Z) l0800_345B
	// succ:  l0800_345D l0800_345B
l0800_345D:
	cx = ~cx
	di = di - cx
	SCZO = cond(di)
	cx = cx >>u 0x0001
	SCZO = cond(cx)
	si = di
	di = Mem0[ss:sp:word16]
	sp = sp + 2
	ax = es
	es = Mem0[ss:sp:selector]
	sp = sp + 2
	sp = sp - 2
	Mem0[ss:sp:word16] = ds
	ds = ax
	// succ:  l0800_346C
l0800_346C:
	branch cx == 0x0000 l0800_346E
	// succ:  l0800_346C_2 l0800_346E
l0800_346C_2:
	v23 = Mem0[ds:si:word16]
	Mem0[es:di:word16] = v23
	si = si + 0x0002
	di = di + 0x0002
	cx = cx - 0x0001
	goto l0800_346C
	// succ:  l0800_346C
l0800_346E:
	cx = cx + cx + C
	SCZO = cond(cx)
	// succ:  l0800_3470
l0800_3470:
	branch cx == 0x0000 l0800_3472
	// succ:  l0800_3470_1 l0800_3472
l0800_3470_1:
	v24 = Mem0[ds:si:byte]
	Mem0[es:di:byte] = v24
	si = si + 0x0001
	di = di + 0x0001
	cx = cx - 0x0001
	goto l0800_3470
	// succ:  l0800_3470
l0800_3472:
	ds = Mem0[ss:sp:selector]
	sp = sp + 2
	// succ:  l0800_3473
l0800_3473:
	ax = ax ^ ax
	SZO = cond(ax)
	C = false
	di = Mem0[ss:sp:word16]
	sp = sp + 2
	si = Mem0[ss:sp:word16]
	sp = sp + 2
	bp = Mem0[ss:sp:word16]
	sp = sp + 2
	return
	// succ:  fn0800_33CD_exit
fn0800_33CD_exit:


// fn0800_3479
// Return size: 2
define fn0800_3479
fn0800_3479_entry:
	// succ:  l0800_3479
l0800_3479:
	sp = fp
	Top = 0
	sp = sp - 2
	Mem0[ss:sp:word16] = bp
	bp = sp
	sp = sp - 2
	Mem0[ss:sp:word16] = si
	sp = sp - 2
	Mem0[ss:sp:word16] = di
	// succ:  l0800_347E
l0800_347E:
	sp = sp - 2
	Mem0[ss:sp:word16] = ds
	ax = 0x4623
	sp = sp - 2
	Mem0[ss:sp:word16] = ax
	call fn0800_A84A (retsize: 2;)
	sp = sp + 0x0004
	SCZO = cond(sp)
	ax = ax | ax
	SZO = cond(ax)
	C = false
	branch Test(EQ,Z) l0800_3494
	// succ:  l0800_348D l0800_3494
l0800_348D:
	ax = 0x0001
	di = Mem0[ss:sp:word16]
	sp = sp + 2
	si = Mem0[ss:sp:word16]
	sp = sp + 2
	bp = Mem0[ss:sp:word16]
	sp = sp + 2
	return
	// succ:  fn0800_3479_exit
l0800_3494:
	sp = sp - 2
	Mem0[ss:sp:word16] = ds
	es = Mem0[ss:sp:selector]
	sp = sp + 2
	di = 0x0A3B
	si = 0x4641
	cx = 0x0002
	ax = ax ^ ax
	SZO = cond(ax)
	C = false
	// succ:  l0800_34A1
l0800_34A1:
	branch cx == 0x0000 l0800_34A3
	// succ:  l0800_34A1_1 l0800_34A3
l0800_34A1_1:
	SCZO = cond(Mem0[ds:si:byte] - Mem0[es:di:byte])
	si = si + 0x0001
	di = di + 0x0001
	cx = cx - 0x0001
	branch Test(NE,Z) l0800_34A1
	// succ:  l0800_34A3 l0800_34A1
l0800_34A3:
	branch Test(EQ,Z) l0800_34AA
	// succ:  l0800_34A5 l0800_34AA
l0800_34A5:
	ax = ax - ax - C
	SCZO = cond(ax)
	ax = ax - 0xFFFF - C
	SCZO = cond(ax)
	// succ:  l0800_34AA
l0800_34AA:
	ax = ax | ax
	SZO = cond(ax)
	C = false
	branch Test(EQ,Z) l0800_347E
	// succ:  l0800_34AE l0800_347E
l0800_34AE:
	sp = sp - 2
	Mem0[ss:sp:word16] = ds
	es = Mem0[ss:sp:selector]
	sp = sp + 2
	di = 0x0A3D
	si = 0x4641
	cx = 0x0003
	ax = ax ^ ax
	SZO = cond(ax)
	C = false
	// succ:  l0800_34BB
l0800_34BB:
	branch cx == 0x0000 l0800_34BD
	// succ:  l0800_34BB_1 l0800_34BD
l0800_34BB_1:
	SCZO = cond(Mem0[ds:si:byte] - Mem0[es:di:byte])
	si = si + 0x0001
	di = di + 0x0001
	cx = cx - 0x0001
	branch Test(NE,Z) l0800_34BB
	// succ:  l0800_34BD l0800_34BB
l0800_34BD:
	branch Test(EQ,Z) l0800_34C4
	// succ:  l0800_34BF l0800_34C4
l0800_34BF:
	ax = ax - ax - C
	SCZO = cond(ax)
	ax = ax - 0xFFFF - C
	SCZO = cond(ax)
	// succ:  l0800_34C4
l0800_34C4:
	ax = ax | ax
	SZO = cond(ax)
	C = false
	branch Test(EQ,Z) l0800_347E
	// succ:  l0800_34C8 l0800_347E
l0800_34C8:
	al = Mem0[ds:0x4638:byte]
	ax = (int16) al
	ax = ax & Mem0[ss:bp + 0x0008:word16]
	SZO = cond(ax)
	C = false
	SCZO = cond(ax - Mem0[ss:bp + 0x0008:word16])
	branch Test(NE,Z) l0800_347E
	// succ:  l0800_34D4 l0800_347E
l0800_34D4:
	ax = Mem0[ss:bp + 0x0004:word16]
	ax = ax | Mem0[ss:bp + 0x0006:word16]
	SZO = cond(ax)
	C = false
	branch Test(EQ,Z) l0800_3503
	// succ:  l0800_34DC l0800_3503
l0800_34DC:
	es_di = Mem0[ss:bp + 0x0004:segptr32]
	sp = sp - 2
	Mem0[ss:sp:word16] = es
	sp = sp - 2
	Mem0[ss:sp:word16] = ds
	es = Mem0[ss:sp:selector]
	sp = sp + 2
	sp = sp - 2
	Mem0[ss:sp:word16] = di
	di = 0x4641
	ax = ax ^ ax
	SZO = cond(ax)
	C = false
	cx = 0xFFFF
	// succ:  l0800_34EB
l0800_34EB:
	branch cx == 0x0000 l0800_34ED
	// succ:  l0800_34EB_1 l0800_34ED
l0800_34EB_1:
	SCZO = cond(al - Mem0[es:di:byte])
	di = di + 0x0001
	cx = cx - 0x0001
	branch Test(EQ,Z) l0800_34EB
	// succ:  l0800_34ED l0800_34EB
l0800_34ED:
	cx = ~cx
	di = di - cx
	SCZO = cond(di)
	cx = cx >>u 0x0001
	SCZO = cond(cx)
	si = di
	di = Mem0[ss:sp:word16]
	sp = sp + 2
	ax = es
	es = Mem0[ss:sp:selector]
	sp = sp + 2
	sp = sp - 2
	Mem0[ss:sp:word16] = ds
	ds = ax
	// succ:  l0800_34FC
l0800_34FC:
	branch cx == 0x0000 l0800_34FE
	// succ:  l0800_34FC_2 l0800_34FE
l0800_34FC_2:
	v17 = Mem0[ds:si:word16]
	Mem0[es:di:word16] = v17
	si = si + 0x0002
	di = di + 0x0002
	cx = cx - 0x0001
	goto l0800_34FC
	// succ:  l0800_34FC
l0800_34FE:
	cx = cx + cx + C
	SCZO = cond(cx)
	// succ:  l0800_3500
l0800_3500:
	branch cx == 0x0000 l0800_3502
	// succ:  l0800_3500_1 l0800_3502
l0800_3500_1:
	v18 = Mem0[ds:si:byte]
	Mem0[es:di:byte] = v18
	si = si + 0x0001
	di = di + 0x0001
	cx = cx - 0x0001
	goto l0800_3500
	// succ:  l0800_3500
l0800_3502:
	ds = Mem0[ss:sp:selector]
	sp = sp + 2
	// succ:  l0800_3503
l0800_3503:
	ax = ax ^ ax
	SZO = cond(ax)
	C = false
	di = Mem0[ss:sp:word16]
	sp = sp + 2
	si = Mem0[ss:sp:word16]
	sp = sp + 2
	bp = Mem0[ss:sp:word16]
	sp = sp + 2
	return
	// succ:  fn0800_3479_exit
fn0800_3479_exit:


// fn0800_3509
// Return size: 2
define fn0800_3509
fn0800_3509_entry:
	// succ:  l0800_3509
l0800_3509:
	sp = fp
	Top = 0
	sp = sp - 2
	Mem0[ss:sp:word16] = bp
	bp = sp
	sp = sp - 0x0058
	SCZO = cond(sp)
	sp = sp - 2
	Mem0[ss:sp:word16] = si
	sp = sp - 2
	Mem0[ss:sp:word16] = di
	sp = sp - 2
	Mem0[ss:sp:word16] = ss
	ax = bp - 0x0014
	sp = sp - 2
	Mem0[ss:sp:word16] = ax
	sp = sp - 2
	Mem0[ss:sp:word16] = ss
	ax = bp - 0x000E
	sp = sp - 2
	Mem0[ss:sp:word16] = ax
	sp = sp - 2
	Mem0[ss:sp:word16] = ss
	ax = bp - 0x0058
	sp = sp - 2
	Mem0[ss:sp:word16] = ax
	sp = sp - 2
	Mem0[ss:sp:word16] = ss
	ax = bp - 0x0004
	sp = sp - 2
	Mem0[ss:sp:word16] = ax
	v9 = Mem0[ss:bp + 0x000A:word16]
	sp = sp - 2
	Mem0[ss:sp:word16] = v9
	v10 = Mem0[ss:bp + 0x0008:word16]
	sp = sp - 2
	Mem0[ss:sp:word16] = v10
	call fn0800_BE3B (retsize: 2;)
	sp = sp + 0x0014
	SCZO = cond(sp)
	sp = sp - 2
	Mem0[ss:sp:word16] = ss
	es = Mem0[ss:sp:selector]
	sp = sp + 2
	di = bp - 0x0004
	sp = sp - 2
	Mem0[ss:sp:word16] = es
	es = Mem0[ss:bp + 0x0006:selector]
	sp = sp - 2
	Mem0[ss:sp:word16] = di
	di = Mem0[ss:bp + 0x0004:word16]
	ax = di
	di = Mem0[ss:sp:word16]
	sp = sp + 2
	dx = es
	es = Mem0[ss:sp:selector]
	sp = sp + 2
	sp = sp - 2
	Mem0[ss:sp:word16] = dx
	sp = sp - 2
	Mem0[ss:sp:word16] = ax
	ax = ax ^ ax
	SZO = cond(ax)
	C = false
	cx = 0xFFFF
	// succ:  l0800_354B
l0800_354B:
	branch cx == 0x0000 l0800_354D
	// succ:  l0800_354B_1 l0800_354D
l0800_354B_1:
	SCZO = cond(al - Mem0[es:di:byte])
	di = di + 0x0001
	cx = cx - 0x0001
	branch Test(EQ,Z) l0800_354B
	// succ:  l0800_354D l0800_354B
l0800_354D:
	cx = ~cx
	di = di - cx
	SCZO = cond(di)
	cx = cx >>u 0x0001
	SCZO = cond(cx)
	si = di
	di = Mem0[ss:sp:word16]
	sp = sp + 2
	ax = es
	es = Mem0[ss:sp:selector]
	sp = sp + 2
	sp = sp - 2
	Mem0[ss:sp:word16] = ds
	ds = ax
	// succ:  l0800_355C
l0800_355C:
	branch cx == 0x0000 l0800_355E
	// succ:  l0800_355C_2 l0800_355E
l0800_355C_2:
	v19 = Mem0[ds:si:word16]
	Mem0[es:di:word16] = v19
	si = si + 0x0002
	di = di + 0x0002
	cx = cx - 0x0001
	goto l0800_355C
	// succ:  l0800_355C
l0800_355E:
	cx = cx + cx + C
	SCZO = cond(cx)
	// succ:  l0800_3560
l0800_3560:
	branch cx == 0x0000 l0800_3562
	// succ:  l0800_3560_1 l0800_3562
l0800_3560_1:
	v20 = Mem0[ds:si:byte]
	Mem0[es:di:byte] = v20
	si = si + 0x0001
	di = di + 0x0001
	cx = cx - 0x0001
	goto l0800_3560
	// succ:  l0800_3560
l0800_3562:
	ds = Mem0[ss:sp:selector]
	sp = sp + 2
	sp = sp - 2
	Mem0[ss:sp:word16] = ss
	es = Mem0[ss:sp:selector]
	sp = sp + 2
	di = bp - 0x0058
	sp = sp - 2
	Mem0[ss:sp:word16] = es
	es = Mem0[ss:bp + 0x0006:selector]
	sp = sp - 2
	Mem0[ss:sp:word16] = di
	di = Mem0[ss:bp + 0x0004:word16]
	ax = di
	di = Mem0[ss:sp:word16]
	sp = sp + 2
	dx = es
	es = Mem0[ss:sp:selector]
	sp = sp + 2
	sp = sp - 2
	Mem0[ss:sp:word16] = dx
	sp = sp - 2
	Mem0[ss:sp:word16] = ax
	ax = ax ^ ax
	SZO = cond(ax)
	C = false
	cx = 0xFFFF
	// succ:  l0800_357D
l0800_357D:
	branch cx == 0x0000 l0800_357F
	// succ:  l0800_357D_1 l0800_357F
l0800_357D_1:
	SCZO = cond(al - Mem0[es:di:byte])
	di = di + 0x0001
	cx = cx - 0x0001
	branch Test(EQ,Z) l0800_357D
	// succ:  l0800_357F l0800_357D
l0800_357F:
	cx = ~cx
	di = di - cx
	SCZO = cond(di)
	si = di
	di = Mem0[ss:sp:word16]
	sp = sp + 2
	ax = es
	es = Mem0[ss:sp:selector]
	sp = sp + 2
	Mem0[ss:bp - 0x0016:word16] = ds
	ds = ax
	sp = sp - 2
	Mem0[ss:sp:word16] = cx
	cx = 0xFFFF
	ax = ax ^ ax
	SZO = cond(ax)
	C = false
	// succ:  l0800_3594
l0800_3594:
	branch cx == 0x0000 l0800_3596
	// succ:  l0800_3594_2 l0800_3596
l0800_3594_2:
	SCZO = cond(al - Mem0[es:di:byte])
	di = di + 0x0001
	cx = cx - 0x0001
	branch Test(EQ,Z) l0800_3594
	// succ:  l0800_3596 l0800_3594
l0800_3596:
	di = di - 0x0001
	SZO = cond(di)
	cx = Mem0[ss:sp:word16]
	sp = sp + 2
	// succ:  l0800_3598
l0800_3598:
	branch cx == 0x0000 l0800_359A
	// succ:  l0800_3598_3 l0800_359A
l0800_3598_3:
	v21 = Mem0[ds:si:byte]
	Mem0[es:di:byte] = v21
	si = si + 0x0001
	di = di + 0x0001
	cx = cx - 0x0001
	goto l0800_3598
	// succ:  l0800_3598
l0800_359A:
	ds = Mem0[ss:bp - 0x0016:selector]
	di = Mem0[ss:sp:word16]
	sp = sp + 2
	si = Mem0[ss:sp:word16]
	sp = sp + 2
	sp = bp
	bp = Mem0[ss:sp:word16]
	sp = sp + 2
	return
	// succ:  fn0800_3509_exit
fn0800_3509_exit:


// fn0800_35A3
// Return size: 2
define fn0800_35A3
fn0800_35A3_entry:
	// succ:  l0800_35A3
l0800_35A3:
	sp = fp
	Top = 0
	sp = sp - 2
	Mem0[ss:sp:word16] = bp
	bp = sp
	sp = sp - 0x0058
	SCZO = cond(sp)
	sp = sp - 2
	Mem0[ss:sp:word16] = si
	sp = sp - 2
	Mem0[ss:sp:word16] = di
	sp = sp - 2
	Mem0[ss:sp:word16] = ss
	ax = bp - 0x0014
	sp = sp - 2
	Mem0[ss:sp:word16] = ax
	sp = sp - 2
	Mem0[ss:sp:word16] = ss
	ax = bp - 0x000E
	sp = sp - 2
	Mem0[ss:sp:word16] = ax
	sp = sp - 2
	Mem0[ss:sp:word16] = ss
	ax = bp - 0x0058
	sp = sp - 2
	Mem0[ss:sp:word16] = ax
	sp = sp - 2
	Mem0[ss:sp:word16] = ss
	ax = bp - 0x0004
	sp = sp - 2
	Mem0[ss:sp:word16] = ax
	v9 = Mem0[ss:bp + 0x000A:word16]
	sp = sp - 2
	Mem0[ss:sp:word16] = v9
	v10 = Mem0[ss:bp + 0x0008:word16]
	sp = sp - 2
	Mem0[ss:sp:word16] = v10
	call fn0800_BE3B (retsize: 2;)
	sp = sp + 0x0014
	SCZO = cond(sp)
	sp = sp - 2
	Mem0[ss:sp:word16] = ss
	es = Mem0[ss:sp:selector]
	sp = sp + 2
	di = bp - 0x000E
	sp = sp - 2
	Mem0[ss:sp:word16] = es
	es = Mem0[ss:bp + 0x0006:selector]
	sp = sp - 2
	Mem0[ss:sp:word16] = di
	di = Mem0[ss:bp + 0x0004:word16]
	ax = di
	di = Mem0[ss:sp:word16]
	sp = sp + 2
	dx = es
	es = Mem0[ss:sp:selector]
	sp = sp + 2
	sp = sp - 2
	Mem0[ss:sp:word16] = dx
	sp = sp - 2
	Mem0[ss:sp:word16] = ax
	ax = ax ^ ax
	SZO = cond(ax)
	C = false
	cx = 0xFFFF
	// succ:  l0800_35E5
l0800_35E5:
	branch cx == 0x0000 l0800_35E7
	// succ:  l0800_35E5_1 l0800_35E7
l0800_35E5_1:
	SCZO = cond(al - Mem0[es:di:byte])
	di = di + 0x0001
	cx = cx - 0x0001
	branch Test(EQ,Z) l0800_35E5
	// succ:  l0800_35E7 l0800_35E5
l0800_35E7:
	cx = ~cx
	di = di - cx
	SCZO = cond(di)
	cx = cx >>u 0x0001
	SCZO = cond(cx)
	si = di
	di = Mem0[ss:sp:word16]
	sp = sp + 2
	ax = es
	es = Mem0[ss:sp:selector]
	sp = sp + 2
	sp = sp - 2
	Mem0[ss:sp:word16] = ds
	ds = ax
	// succ:  l0800_35F6
l0800_35F6:
	branch cx == 0x0000 l0800_35F8
	// succ:  l0800_35F6_2 l0800_35F8
l0800_35F6_2:
	v19 = Mem0[ds:si:word16]
	Mem0[es:di:word16] = v19
	si = si + 0x0002
	di = di + 0x0002
	cx = cx - 0x0001
	goto l0800_35F6
	// succ:  l0800_35F6
l0800_35F8:
	cx = cx + cx + C
	SCZO = cond(cx)
	// succ:  l0800_35FA
l0800_35FA:
	branch cx == 0x0000 l0800_35FC
	// succ:  l0800_35FA_1 l0800_35FC
l0800_35FA_1:
	v20 = Mem0[ds:si:byte]
	Mem0[es:di:byte] = v20
	si = si + 0x0001
	di = di + 0x0001
	cx = cx - 0x0001
	goto l0800_35FA
	// succ:  l0800_35FA
l0800_35FC:
	ds = Mem0[ss:sp:selector]
	sp = sp + 2
	sp = sp - 2
	Mem0[ss:sp:word16] = ss
	es = Mem0[ss:sp:selector]
	sp = sp + 2
	di = bp - 0x0014
	sp = sp - 2
	Mem0[ss:sp:word16] = es
	es = Mem0[ss:bp + 0x0006:selector]
	sp = sp - 2
	Mem0[ss:sp:word16] = di
	di = Mem0[ss:bp + 0x0004:word16]
	ax = di
	di = Mem0[ss:sp:word16]
	sp = sp + 2
	dx = es
	es = Mem0[ss:sp:selector]
	sp = sp + 2
	sp = sp - 2
	Mem0[ss:sp:word16] = dx
	sp = sp - 2
	Mem0[ss:sp:word16] = ax
	ax = ax ^ ax
	SZO = cond(ax)
	C = false
	cx = 0xFFFF
	// succ:  l0800_3617
l0800_3617:
	branch cx == 0x0000 l0800_3619
	// succ:  l0800_3617_1 l0800_3619
l0800_3617_1:
	SCZO = cond(al - Mem0[es:di:byte])
	di = di + 0x0001
	cx = cx - 0x0001
	branch Test(EQ,Z) l0800_3617
	// succ:  l0800_3619 l0800_3617
l0800_3619:
	cx = ~cx
	di = di - cx
	SCZO = cond(di)
	si = di
	di = Mem0[ss:sp:word16]
	sp = sp + 2
	ax = es
	es = Mem0[ss:sp:selector]
	sp = sp + 2
	Mem0[ss:bp - 0x0016:word16] = ds
	ds = ax
	sp = sp - 2
	Mem0[ss:sp:word16] = cx
	cx = 0xFFFF
	ax = ax ^ ax
	SZO = cond(ax)
	C = false
	// succ:  l0800_362E
l0800_362E:
	branch cx == 0x0000 l0800_3630
	// succ:  l0800_362E_2 l0800_3630
l0800_362E_2:
	SCZO = cond(al - Mem0[es:di:byte])
	di = di + 0x0001
	cx = cx - 0x0001
	branch Test(EQ,Z) l0800_362E
	// succ:  l0800_3630 l0800_362E
l0800_3630:
	di = di - 0x0001
	SZO = cond(di)
	cx = Mem0[ss:sp:word16]
	sp = sp + 2
	// succ:  l0800_3632
l0800_3632:
	branch cx == 0x0000 l0800_3634
	// succ:  l0800_3632_3 l0800_3634
l0800_3632_3:
	v21 = Mem0[ds:si:byte]
	Mem0[es:di:byte] = v21
	si = si + 0x0001
	di = di + 0x0001
	cx = cx - 0x0001
	goto l0800_3632
	// succ:  l0800_3632
l0800_3634:
	ds = Mem0[ss:bp - 0x0016:selector]
	di = Mem0[ss:sp:word16]
	sp = sp + 2
	si = Mem0[ss:sp:word16]
	sp = sp + 2
	sp = bp
	bp = Mem0[ss:sp:word16]
	sp = sp + 2
	return
	// succ:  fn0800_35A3_exit
fn0800_35A3_exit:


// fn0800_363D
// Return size: 2
define fn0800_363D
fn0800_363D_entry:
	// succ:  l0800_363D
l0800_363D:
	sp = fp
	Top = 0
	sp = sp - 2
	Mem0[ss:sp:word16] = bp
	bp = sp
	sp = sp - 0x002C
	SCZO = cond(sp)
	ax = ax ^ ax
	SZO = cond(ax)
	C = false
	sp = sp - 2
	Mem0[ss:sp:word16] = ax
	sp = sp - 2
	Mem0[ss:sp:word16] = ss
	ax = bp - 0x002C
	sp = sp - 2
	Mem0[ss:sp:word16] = ax
	v9 = Mem0[ss:bp + 0x000A:word16]
	sp = sp - 2
	Mem0[ss:sp:word16] = v9
	v10 = Mem0[ss:bp + 0x0008:word16]
	sp = sp - 2
	Mem0[ss:sp:word16] = v10
	call fn0800_A817 (retsize: 2;)
	sp = sp + 0x000A
	SCZO = cond(sp)
	ax = ax | ax
	SZO = cond(ax)
	C = false
	branch Test(EQ,Z) l0800_3662
	// succ:  l0800_365B l0800_3662
l0800_365B:
	ax = 0x0001
	sp = bp
	bp = Mem0[ss:sp:word16]
	sp = sp + 2
	return
	// succ:  fn0800_363D_exit
l0800_3662:
	es_bx = Mem0[ss:bp + 0x0004:segptr32]
	ax = Mem0[ss:bp - 0x0016:word16]
	Mem0[es:bx:word16] = ax
	ax = Mem0[ss:bp - 0x0014:word16]
	Mem0[es:bx + 0x0002:word16] = ax
	ax = ax ^ ax
	SZO = cond(ax)
	C = false
	sp = bp
	bp = Mem0[ss:sp:word16]
	sp = sp + 2
	return
	// succ:  fn0800_363D_exit
fn0800_363D_exit:


// fn0800_3678
// Return size: 2
define fn0800_3678
fn0800_3678_entry:
	// succ:  l0800_3678
l0800_3678:
	sp = fp
	Top = 0
	sp = sp - 2
	Mem0[ss:sp:word16] = bp
	bp = sp
	sp = sp - 0x0008
	SCZO = cond(sp)
	sp = sp - 2
	Mem0[ss:sp:word16] = di
	ax = Mem0[ss:bp + 0x0006:word16]
	dx = Mem0[ss:bp + 0x0004:word16]
	Mem0[ss:bp - 0x0002:word16] = ax
	Mem0[ss:bp - 0x0004:word16] = dx
	es_di = Mem0[ss:bp + 0x0004:segptr32]
	ax = ax ^ ax
	SZO = cond(ax)
	C = false
	cx = 0xFFFF
	// succ:  l0800_3693
l0800_3693:
	branch cx == 0x0000 l0800_3695
	// succ:  l0800_3693_1 l0800_3695
l0800_3693_1:
	SCZO = cond(al - Mem0[es:di:byte])
	di = di + 0x0001
	cx = cx - 0x0001
	branch Test(EQ,Z) l0800_3693
	// succ:  l0800_3695 l0800_3693
l0800_3695:
	cx = ~cx
	ax = 0x005C
	di = di - cx
	SCZO = cond(di)
	// succ:  l0800_369C
l0800_369C:
	branch cx == 0x0000 l0800_369E
	// succ:  l0800_369C_2 l0800_369E
l0800_369C_2:
	SCZO = cond(al - Mem0[es:di:byte])
	di = di + 0x0001
	cx = cx - 0x0001
	branch Test(EQ,Z) l0800_369C
	// succ:  l0800_369E l0800_369C
l0800_369E:
	branch Test(EQ,Z) l0800_36A7
	// succ:  l0800_36A0 l0800_36A7
l0800_36A0:
	di = 0x0001
	ax = ax ^ ax
	SZO = cond(ax)
	C = false
	es = ax
	// succ:  l0800_36A7
l0800_36A7:
	di = di - 0x0001
	SZO = cond(di)
	ax = es
	Mem0[ss:bp - 0x0006:word16] = ax
	Mem0[ss:bp - 0x0008:word16] = di
	dx = di
	dx = dx | ax
	SZO = cond(dx)
	C = false
	branch Test(EQ,Z) l0800_3732
	// succ:  l0800_36B6 l0800_3732
l0800_36B6:
	ax = Mem0[ss:bp - 0x0006:word16]
	dx = Mem0[ss:bp - 0x0008:word16]
	SCZO = cond(ax - Mem0[ss:bp + 0x0006:word16])
	branch Test(NE,Z) l0800_36C6
	// succ:  l0800_36C1 l0800_36C6
l0800_36C1:
	SCZO = cond(dx - Mem0[ss:bp + 0x0004:word16])
	branch Test(EQ,Z) l0800_36D0
	// succ:  l0800_36C6 l0800_36D0
l0800_36C6:
	es_bx = Mem0[ss:bp - 0x0008:segptr32]
	SCZO = cond(Mem0[es:bx - 0x0001:byte] - 0x3A)
	branch Test(NE,Z) l0800_3732
	// succ:  l0800_36D0 l0800_3732
l0800_36D0:
	ax = Mem0[ss:bp - 0x0006:word16]
	dx = Mem0[ss:bp - 0x0008:word16]
	dx = dx + 0x0001
	SZO = cond(dx)
	Mem0[ss:bp - 0x0002:word16] = ax
	Mem0[ss:bp - 0x0004:word16] = dx
	goto l0800_3732
	// succ:  l0800_3732
l0800_36DF:
	es_bx = Mem0[ss:bp - 0x0008:segptr32]
	Mem0[es:bx:byte] = 0x00
	v18 = Mem0[ss:bp + 0x0006:word16]
	sp = sp - 2
	Mem0[ss:sp:word16] = v18
	v19 = Mem0[ss:bp + 0x0004:word16]
	sp = sp - 2
	Mem0[ss:sp:word16] = v19
	ax = 0x0010
	sp = sp - 2
	Mem0[ss:sp:word16] = ax
	ax = ax ^ ax
	SZO = cond(ax)
	C = false
	sp = sp - 2
	Mem0[ss:sp:word16] = ax
	sp = sp - 2
	Mem0[ss:sp:word16] = ax
	call fn0800_33CD (retsize: 2;)
	sp = sp + 0x000A
	SCZO = cond(sp)
	ax = ax | ax
	SZO = cond(ax)
	C = false
	branch Test(EQ,Z) l0800_371E
	// succ:  l0800_36FE l0800_371E
l0800_36FE:
	v20 = Mem0[ss:bp + 0x0006:word16]
	sp = sp - 2
	Mem0[ss:sp:word16] = v20
	v21 = Mem0[ss:bp + 0x0004:word16]
	sp = sp - 2
	Mem0[ss:sp:word16] = v21
	call fn0800_8E52 (retsize: 2;)
	sp = sp + 0x0004
	SCZO = cond(sp)
	ax = ax | ax
	SZO = cond(ax)
	C = false
	branch Test(EQ,Z) l0800_371E
	// succ:  l0800_370E l0800_371E
l0800_370E:
	v22 = Mem0[ss:bp + 0x0006:word16]
	sp = sp - 2
	Mem0[ss:sp:word16] = v22
	v23 = Mem0[ss:bp + 0x0004:word16]
	sp = sp - 2
	Mem0[ss:sp:word16] = v23
	ax = 0x000E
	sp = sp - 2
	Mem0[ss:sp:word16] = ax
	call fn0800_0D24 (retsize: 2;)
	sp = sp + 0x0006
	SCZO = cond(sp)
	// succ:  l0800_371E
l0800_371E:
	es_bx = Mem0[ss:bp - 0x0008:segptr32]
	Mem0[es:bx:byte] = 0x5C
	ax = Mem0[ss:bp - 0x0006:word16]
	dx = Mem0[ss:bp - 0x0008:word16]
	dx = dx + 0x0001
	SZO = cond(dx)
	Mem0[ss:bp - 0x0002:word16] = ax
	Mem0[ss:bp - 0x0004:word16] = dx
	// succ:  l0800_3732
l0800_3732:
	es_di = Mem0[ss:bp - 0x0004:segptr32]
	ax = ax ^ ax
	SZO = cond(ax)
	C = false
	cx = 0xFFFF
	// succ:  l0800_373A
l0800_373A:
	branch cx == 0x0000 l0800_373C
	// succ:  l0800_373A_1 l0800_373C
l0800_373A_1:
	SCZO = cond(al - Mem0[es:di:byte])
	di = di + 0x0001
	cx = cx - 0x0001
	branch Test(EQ,Z) l0800_373A
	// succ:  l0800_373C l0800_373A
l0800_373C:
	cx = ~cx
	ax = 0x005C
	di = di - cx
	SCZO = cond(di)
	// succ:  l0800_3743
l0800_3743:
	branch cx == 0x0000 l0800_3745
	// succ:  l0800_3743_2 l0800_3745
l0800_3743_2:
	SCZO = cond(al - Mem0[es:di:byte])
	di = di + 0x0001
	cx = cx - 0x0001
	branch Test(EQ,Z) l0800_3743
	// succ:  l0800_3745 l0800_3743
l0800_3745:
	branch Test(EQ,Z) l0800_374E
	// succ:  l0800_3747 l0800_374E
l0800_3747:
	di = 0x0001
	ax = ax ^ ax
	SZO = cond(ax)
	C = false
	es = ax
	// succ:  l0800_374E
l0800_374E:
	di = di - 0x0001
	SZO = cond(di)
	ax = es
	Mem0[ss:bp - 0x0006:word16] = ax
	Mem0[ss:bp - 0x0008:word16] = di
	dx = di
	dx = dx | ax
	SZO = cond(dx)
	C = false
	branch Test(NE,Z) l0800_36DF
	// succ:  l0800_375D l0800_36DF
l0800_375D:
	ax = ax ^ ax
	SZO = cond(ax)
	C = false
	di = Mem0[ss:sp:word16]
	sp = sp + 2
	sp = bp
	bp = Mem0[ss:sp:word16]
	sp = sp + 2
	return
	// succ:  fn0800_3678_exit
fn0800_3678_exit:


// fn0800_3764
// Return size: 2
define fn0800_3764
fn0800_3764_entry:
	// succ:  l0800_3764
l0800_3764:
	sp = fp
	Top = 0
	sp = sp - 2
	Mem0[ss:sp:word16] = si
	sp = sp - 2
	Mem0[ss:sp:word16] = di
	SCZO = cond(Mem0[ds:0x427E:byte] - 0x00)
	branch Test(EQ,Z) l0800_3796
	// succ:  l0800_376D l0800_3796
l0800_376D:
	sp = sp - 2
	Mem0[ss:sp:word16] = ds
	es = Mem0[ss:sp:selector]
	sp = sp + 2
	di = 0x44DC
	sp = sp - 2
	Mem0[ss:sp:word16] = es
	sp = sp - 2
	Mem0[ss:sp:word16] = di
	di = 0x427E
	ax = ax ^ ax
	SZO = cond(ax)
	C = false
	cx = 0xFFFF
	// succ:  l0800_377C
l0800_377C:
	branch cx == 0x0000 l0800_377E
	// succ:  l0800_377C_1 l0800_377E
l0800_377C_1:
	SCZO = cond(al - Mem0[es:di:byte])
	di = di + 0x0001
	cx = cx - 0x0001
	branch Test(EQ,Z) l0800_377C
	// succ:  l0800_377E l0800_377C
l0800_377E:
	cx = ~cx
	di = di - cx
	SCZO = cond(di)
	cx = cx >>u 0x0001
	SCZO = cond(cx)
	si = di
	di = Mem0[ss:sp:word16]
	sp = sp + 2
	ax = es
	es = Mem0[ss:sp:selector]
	sp = sp + 2
	sp = sp - 2
	Mem0[ss:sp:word16] = ds
	ds = ax
	// succ:  l0800_378D
l0800_378D:
	branch cx == 0x0000 l0800_378F
	// succ:  l0800_378D_2 l0800_378F
l0800_378D_2:
	v15 = Mem0[ds:si:word16]
	Mem0[es:di:word16] = v15
	si = si + 0x0002
	di = di + 0x0002
	cx = cx - 0x0001
	goto l0800_378D
	// succ:  l0800_378D
l0800_378F:
	cx = cx + cx + C
	SCZO = cond(cx)
	// succ:  l0800_3791
l0800_3791:
	branch cx == 0x0000 l0800_3793
	// succ:  l0800_3791_1 l0800_3793
l0800_3791_1:
	v17 = Mem0[ds:si:byte]
	Mem0[es:di:byte] = v17
	si = si + 0x0001
	di = di + 0x0001
	cx = cx - 0x0001
	goto l0800_3791
	// succ:  l0800_3791
l0800_3793:
	ds = Mem0[ss:sp:selector]
	sp = sp + 2
	goto l0800_37A6
	// succ:  l0800_37A6
l0800_3796:
	sp = sp - 2
	Mem0[ss:sp:word16] = ds
	ax = 0x4541
	sp = sp - 2
	Mem0[ss:sp:word16] = ax
	sp = sp - 2
	Mem0[ss:sp:word16] = ds
	ax = 0x44DC
	sp = sp - 2
	Mem0[ss:sp:word16] = ax
	call fn0800_3509 (retsize: 2;)
	sp = sp + 0x0008
	SCZO = cond(sp)
	// succ:  l0800_37A6
l0800_37A6:
	sp = sp - 2
	Mem0[ss:sp:word16] = ds
	es = Mem0[ss:sp:selector]
	sp = sp + 2
	di = 0x44DC
	si = 0x0A40
	cx = 0xFFFF
	ax = ax ^ ax
	SZO = cond(ax)
	C = false
	// succ:  l0800_37B3
l0800_37B3:
	branch cx == 0x0000 l0800_37B5
	// succ:  l0800_37B3_1 l0800_37B5
l0800_37B3_1:
	SCZO = cond(al - Mem0[es:di:byte])
	di = di + 0x0001
	cx = cx - 0x0001
	branch Test(EQ,Z) l0800_37B3
	// succ:  l0800_37B5 l0800_37B3
l0800_37B5:
	di = di - 0x0001
	SZO = cond(di)
	cx = 0x000D
	// succ:  l0800_37B9
l0800_37B9:
	branch cx == 0x0000 l0800_37BB
	// succ:  l0800_37B9_2 l0800_37BB
l0800_37B9_2:
	v16 = Mem0[ds:si:byte]
	Mem0[es:di:byte] = v16
	si = si + 0x0001
	di = di + 0x0001
	cx = cx - 0x0001
	goto l0800_37B9
	// succ:  l0800_37B9
l0800_37BB:
	di = Mem0[ss:sp:word16]
	sp = sp + 2
	si = Mem0[ss:sp:word16]
	sp = sp + 2
	return
	// succ:  fn0800_3764_exit
fn0800_3764_exit:


// fn0800_37BE
// Return size: 2
define fn0800_37BE
fn0800_37BE_entry:
	// succ:  l0800_37BE
l0800_37BE:
	sp = fp
	Top = 0
	sp = sp - 2
	Mem0[ss:sp:word16] = bp
	bp = sp
	v5 = Mem0[ss:bp + 0x000A:word16]
	sp = sp - 2
	Mem0[ss:sp:word16] = v5
	v6 = Mem0[ss:bp + 0x0008:word16]
	sp = sp - 2
	Mem0[ss:sp:word16] = v6
	sp = sp - 2
	Mem0[ss:sp:word16] = ds
	ax = 0x42E3
	sp = sp - 2
	Mem0[ss:sp:word16] = ax
	sp = sp - 2
	Mem0[ss:sp:word16] = ds
	ax = 0x0A2B
	sp = sp - 2
	Mem0[ss:sp:word16] = ax
	v9 = Mem0[ss:bp + 0x0006:word16]
	sp = sp - 2
	Mem0[ss:sp:word16] = v9
	v10 = Mem0[ss:bp + 0x0004:word16]
	sp = sp - 2
	Mem0[ss:sp:word16] = v10
	call fn0800_BEA2 (retsize: 2;)
	sp = sp + 0x0010
	SCZO = cond(sp)
	bp = Mem0[ss:sp:word16]
	sp = sp + 2
	return
	// succ:  fn0800_37BE_exit
fn0800_37BE_exit:


// fn0800_37DF
// Return size: 2
define fn0800_37DF
fn0800_37DF_entry:
	// succ:  l0800_37DF
l0800_37DF:
	sp = fp
	Top = 0
	sp = sp - 2
	Mem0[ss:sp:word16] = bp
	bp = sp
	sp = sp - 0x006A
	SCZO = cond(sp)
	sp = sp - 2
	Mem0[ss:sp:word16] = di
	sp = sp - 2
	Mem0[ss:sp:word16] = ds
	ax = 0x44DC
	sp = sp - 2
	Mem0[ss:sp:word16] = ax
	sp = sp - 2
	Mem0[ss:sp:word16] = ss
	ax = bp - 0x006A
	sp = sp - 2
	Mem0[ss:sp:word16] = ax
	call fn0800_3509 (retsize: 2;)
	sp = sp + 0x0008
	SCZO = cond(sp)
	sp = sp - 2
	Mem0[ss:sp:word16] = ds
	ax = 0x4541
	sp = sp - 2
	Mem0[ss:sp:word16] = ax
	sp = sp - 2
	Mem0[ss:sp:word16] = ss
	es = Mem0[ss:sp:selector]
	sp = sp + 2
	di = bp - 0x006A
	ax = ax ^ ax
	SZO = cond(ax)
	C = false
	cx = 0xFFFF
	// succ:  l0800_3805
l0800_3805:
	branch cx == 0x0000 l0800_3807
	// succ:  l0800_3805_1 l0800_3807
l0800_3805_1:
	SCZO = cond(al - Mem0[es:di:byte])
	di = di + 0x0001
	cx = cx - 0x0001
	branch Test(EQ,Z) l0800_3805
	// succ:  l0800_3807 l0800_3805
l0800_3807:
	cx = ~cx
	ax = ax ^ ax
	SZO = cond(ax)
	C = false
	di = di - cx
	SCZO = cond(di)
	// succ:  l0800_380D
l0800_380D:
	branch cx == 0x0000 l0800_380F
	// succ:  l0800_380D_2 l0800_380F
l0800_380D_2:
	SCZO = cond(al - Mem0[es:di:byte])
	di = di + 0x0001
	cx = cx - 0x0001
	branch Test(EQ,Z) l0800_380D
	// succ:  l0800_380F l0800_380D
l0800_380F:
	branch Test(EQ,Z) l0800_3818
	// succ:  l0800_3811 l0800_3818
l0800_3811:
	di = 0x0001
	ax = ax ^ ax
	SZO = cond(ax)
	C = false
	es = ax
	// succ:  l0800_3818
l0800_3818:
	di = di - 0x0001
	SZO = cond(di)
	ax = es
	sp = sp - 2
	Mem0[ss:sp:word16] = ax
	sp = sp - 2
	Mem0[ss:sp:word16] = di
	call fn0800_35A3 (retsize: 2;)
	sp = sp + 0x0008
	SCZO = cond(sp)
	sp = sp - 2
	Mem0[ss:sp:word16] = ds
	ax = 0x0A4D
	sp = sp - 2
	Mem0[ss:sp:word16] = ax
	sp = sp - 2
	Mem0[ss:sp:word16] = ss
	ax = bp - 0x006A
	sp = sp - 2
	Mem0[ss:sp:word16] = ax
	call fn0800_AA7E (retsize: 2;)
	sp = sp + 0x0008
	SCZO = cond(sp)
	Mem0[ss:bp - 0x0002:word16] = dx
	Mem0[ss:bp - 0x0004:word16] = ax
	ax = ax | dx
	SZO = cond(ax)
	C = false
	branch Test(EQ,Z) l0800_3863
	// succ:  l0800_383D l0800_3863
l0800_383D:
	v16 = Mem0[ss:bp - 0x0002:word16]
	sp = sp - 2
	Mem0[ss:sp:word16] = v16
	v17 = Mem0[ss:bp - 0x0004:word16]
	sp = sp - 2
	Mem0[ss:sp:word16] = v17
	call fn0800_A614 (retsize: 2;)
	sp = sp + 0x0004
	SCZO = cond(sp)
	ax = 0x0180
	sp = sp - 2
	Mem0[ss:sp:word16] = ax
	sp = sp - 2
	Mem0[ss:sp:word16] = ss
	ax = bp - 0x006A
	sp = sp - 2
	Mem0[ss:sp:word16] = ax
	call fn0800_A4F6 (retsize: 2;)
	sp = sp + 0x0006
	SCZO = cond(sp)
	sp = sp - 2
	Mem0[ss:sp:word16] = ss
	ax = bp - 0x006A
	sp = sp - 2
	Mem0[ss:sp:word16] = ax
	call fn0800_8F7F (retsize: 2;)
	sp = sp + 0x0004
	SCZO = cond(sp)
	// succ:  l0800_3863
l0800_3863:
	sp = sp - 2
	Mem0[ss:sp:word16] = ss
	ax = bp - 0x006A
	sp = sp - 2
	Mem0[ss:sp:word16] = ax
	sp = sp - 2
	Mem0[ss:sp:word16] = ds
	ax = 0x44DC
	sp = sp - 2
	Mem0[ss:sp:word16] = ax
	call fn0800_BA4A (retsize: 2;)
	sp = sp + 0x0008
	SCZO = cond(sp)
	SCZO = cond(ax - 0xFFFF)
	branch Test(NE,Z) l0800_3887
	// succ:  l0800_3878 l0800_3887
l0800_3878:
	sp = sp - 2
	Mem0[ss:sp:word16] = ds
	ax = 0x44DC
	sp = sp - 2
	Mem0[ss:sp:word16] = ax
	ax = 0x000A
	sp = sp - 2
	Mem0[ss:sp:word16] = ax
	call fn0800_0D24 (retsize: 2;)
	sp = sp + 0x0006
	SCZO = cond(sp)
	// succ:  l0800_3887
l0800_3887:
	di = Mem0[ss:sp:word16]
	sp = sp + 2
	sp = bp
	bp = Mem0[ss:sp:word16]
	sp = sp + 2
	return
	// succ:  fn0800_37DF_exit
fn0800_37DF_exit:


// fn0800_388C
// Return size: 2
define fn0800_388C
fn0800_388C_entry:
	// succ:  l0800_388C
l0800_388C:
	sp = fp
	Top = 0
	sp = sp - 2
	Mem0[ss:sp:word16] = bp
	bp = sp
	sp = sp - 0x0008
	SCZO = cond(sp)
	sp = sp - 2
	Mem0[ss:sp:word16] = ds
	ax = 0x0A13
	sp = sp - 2
	Mem0[ss:sp:word16] = ax
	sp = sp - 2
	Mem0[ss:sp:word16] = ds
	ax = 0x4541
	sp = sp - 2
	Mem0[ss:sp:word16] = ax
	call fn0800_4234 (retsize: 2;)
	sp = sp + 0x0008
	SCZO = cond(sp)
	Mem0[ds:0x29E5:word16] = dx
	Mem0[ds:0x29E3:word16] = ax
	sp = sp - 2
	Mem0[ss:sp:word16] = ds
	ax = 0x0A50
	sp = sp - 2
	Mem0[ss:sp:word16] = ax
	sp = sp - 2
	Mem0[ss:sp:word16] = ds
	ax = 0x44DC
	sp = sp - 2
	Mem0[ss:sp:word16] = ax
	call fn0800_4234 (retsize: 2;)
	sp = sp + 0x0008
	SCZO = cond(sp)
	Mem0[ds:0x29E1:word16] = dx
	Mem0[ds:0x29DF:word16] = ax
	sp = sp - 2
	Mem0[ss:sp:word16] = ds
	ax = 0x44DC
	sp = sp - 2
	Mem0[ss:sp:word16] = ax
	sp = sp - 2
	Mem0[ss:sp:word16] = ss
	ax = bp - 0x0004
	sp = sp - 2
	Mem0[ss:sp:word16] = ax
	call fn0800_363D (retsize: 2;)
	sp = sp + 0x0008
	SCZO = cond(sp)
	SCZO = cond(Mem0[ds:0x0A12:byte] - 0x00)
	branch Test(NE,Z) l0800_38EF
	// succ:  l0800_38D7 l0800_38EF
l0800_38D7:
	ax = Mem0[ss:bp - 0x0002:word16]
	Mem0[ds:0x4621:word16] = ax
	ax = Mem0[ss:bp - 0x0004:word16]
	Mem0[ds:0x461F:word16] = ax
	Mem0[ds:0x0A12:byte] = 0x01
	ax = 0x0001
	sp = bp
	bp = Mem0[ss:sp:word16]
	sp = sp + 2
	return
	// succ:  fn0800_388C_exit
l0800_38EF:
	sp = sp - 2
	Mem0[ss:sp:word16] = ds
	ax = 0x4541
	sp = sp - 2
	Mem0[ss:sp:word16] = ax
	sp = sp - 2
	Mem0[ss:sp:word16] = ss
	ax = bp - 0x0008
	sp = sp - 2
	Mem0[ss:sp:word16] = ax
	call fn0800_363D (retsize: 2;)
	sp = sp + 0x0008
	SCZO = cond(sp)
	sp = sp - 2
	Mem0[ss:sp:word16] = ds
	ax = 0x461F
	sp = sp - 2
	Mem0[ss:sp:word16] = ax
	sp = sp - 2
	Mem0[ss:sp:word16] = ss
	ax = bp - 0x0008
	sp = sp - 2
	Mem0[ss:sp:word16] = ax
	call fn0800_395B (retsize: 2;)
	sp = sp + 0x0008
	SCZO = cond(sp)
	ax = ax | ax
	SZO = cond(ax)
	C = false
	branch Test(LT,SO) l0800_3927
	// succ:  l0800_3913 l0800_3927
l0800_3913:
	sp = sp - 2
	Mem0[ss:sp:word16] = ss
	ax = bp - 0x0004
	sp = sp - 2
	Mem0[ss:sp:word16] = ax
	sp = sp - 2
	Mem0[ss:sp:word16] = ss
	ax = bp - 0x0008
	sp = sp - 2
	Mem0[ss:sp:word16] = ax
	call fn0800_395B (retsize: 2;)
	sp = sp + 0x0008
	SCZO = cond(sp)
	ax = ax | ax
	SZO = cond(ax)
	C = false
	branch Test(LE,SZO) l0800_392E
	// succ:  l0800_3927 l0800_392E
l0800_3927:
	ax = 0x0001
	sp = bp
	bp = Mem0[ss:sp:word16]
	sp = sp + 2
	return
	// succ:  fn0800_388C_exit
l0800_392E:
	v13 = Mem0[ds:0x29E5:word16]
	sp = sp - 2
	Mem0[ss:sp:word16] = v13
	v14 = Mem0[ds:0x29E3:word16]
	sp = sp - 2
	Mem0[ss:sp:word16] = v14
	call fn0800_A614 (retsize: 2;)
	sp = sp + 0x0004
	SCZO = cond(sp)
	v15 = Mem0[ds:0x29E1:word16]
	sp = sp - 2
	Mem0[ss:sp:word16] = v15
	v16 = Mem0[ds:0x29DF:word16]
	sp = sp - 2
	Mem0[ss:sp:word16] = v16
	call fn0800_A614 (retsize: 2;)
	sp = sp + 0x0004
	SCZO = cond(sp)
	sp = sp - 2
	Mem0[ss:sp:word16] = ds
	ax = 0x44DC
	sp = sp - 2
	Mem0[ss:sp:word16] = ax
	call fn0800_8F7F (retsize: 2;)
	sp = sp + 0x0004
	SCZO = cond(sp)
	ax = ax ^ ax
	SZO = cond(ax)
	C = false
	sp = bp
	bp = Mem0[ss:sp:word16]
	sp = sp + 2
	return
	// succ:  fn0800_388C_exit
fn0800_388C_exit:


// fn0800_395B
// Return size: 2
define fn0800_395B
fn0800_395B_entry:
	// succ:  l0800_395B
l0800_395B:
	sp = fp
	Top = 0
	sp = sp - 2
	Mem0[ss:sp:word16] = bp
	bp = sp
	sp = sp - 0x0002
	SCZO = cond(sp)
	es_bx = Mem0[ss:bp + 0x0004:segptr32]
	ax = Mem0[es:bx + 0x0002:word16]
	Mem0[ss:bp - 0x0002:word16] = ax
	es_bx = Mem0[ss:bp + 0x0008:segptr32]
	SCZO = cond(ax - Mem0[es:bx + 0x0002:word16])
	branch Test(NE,Z) l0800_3984
	// succ:  l0800_3974 l0800_3984
l0800_3974:
	es_bx = Mem0[ss:bp + 0x0004:segptr32]
	ax = Mem0[es:bx:word16]
	es_bx = Mem0[ss:bp + 0x0008:segptr32]
	ax = ax - Mem0[es:bx:word16]
	SCZO = cond(ax)
	sp = bp
	bp = Mem0[ss:sp:word16]
	sp = sp + 2
	return
	// succ:  fn0800_395B_exit
l0800_3984:
	ax = Mem0[ss:bp - 0x0002:word16]
	es_bx = Mem0[ss:bp + 0x0008:segptr32]
	ax = ax - Mem0[es:bx + 0x0002:word16]
	SCZO = cond(ax)
	sp = bp
	bp = Mem0[ss:sp:word16]
	sp = sp + 2
	return
	// succ:  fn0800_395B_exit
fn0800_395B_exit:


// fn0800_3992
// Return size: 2
define fn0800_3992
fn0800_3992_entry:
	// succ:  l0800_3992
l0800_3992:
	sp = fp
	Top = 0
	sp = sp - 2
	Mem0[ss:sp:word16] = bp
	bp = sp
	sp = sp - 0x0072
	SCZO = cond(sp)
	sp = sp - 2
	Mem0[ss:sp:word16] = di
	SCZO = cond(Mem0[ds:0x427E:byte] - 0x00)
	branch Test(EQ,Z) l0800_39AE
	// succ:  l0800_39A0 l0800_39AE
l0800_39A0:
	SCZO = cond(Mem0[ds:0x2A23:word16] - 0x0001)
	branch Test(NE,Z) l0800_39AE
	// succ:  l0800_39A7 l0800_39AE
l0800_39A7:
	SCZO = cond(Mem0[ds:0x2A17:word16] - 0x0000)
	branch Test(NE,Z) l0800_39B5
	// succ:  l0800_39AE l0800_39B5
l0800_39AE:
	ax = ax ^ ax
	SZO = cond(ax)
	C = false
	di = Mem0[ss:sp:word16]
	sp = sp + 2
	sp = bp
	bp = Mem0[ss:sp:word16]
	sp = sp + 2
	return
	// succ:  fn0800_3992_exit
l0800_39B5:
	sp = sp - 2
	Mem0[ss:sp:word16] = ds
	ax = 0x44DC
	sp = sp - 2
	Mem0[ss:sp:word16] = ax
	sp = sp - 2
	Mem0[ss:sp:word16] = ss
	ax = bp - 0x0072
	sp = sp - 2
	Mem0[ss:sp:word16] = ax
	call fn0800_3509 (retsize: 2;)
	sp = sp + 0x0008
	SCZO = cond(sp)
	sp = sp - 2
	Mem0[ss:sp:word16] = ds
	ax = 0x4541
	sp = sp - 2
	Mem0[ss:sp:word16] = ax
	sp = sp - 2
	Mem0[ss:sp:word16] = ss
	es = Mem0[ss:sp:selector]
	sp = sp + 2
	di = bp - 0x0072
	ax = ax ^ ax
	SZO = cond(ax)
	C = false
	cx = 0xFFFF
	// succ:  l0800_39D4
l0800_39D4:
	branch cx == 0x0000 l0800_39D6
	// succ:  l0800_39D4_1 l0800_39D6
l0800_39D4_1:
	SCZO = cond(al - Mem0[es:di:byte])
	di = di + 0x0001
	cx = cx - 0x0001
	branch Test(EQ,Z) l0800_39D4
	// succ:  l0800_39D6 l0800_39D4
l0800_39D6:
	cx = ~cx
	ax = ax ^ ax
	SZO = cond(ax)
	C = false
	di = di - cx
	SCZO = cond(di)
	// succ:  l0800_39DC
l0800_39DC:
	branch cx == 0x0000 l0800_39DE
	// succ:  l0800_39DC_2 l0800_39DE
l0800_39DC_2:
	SCZO = cond(al - Mem0[es:di:byte])
	di = di + 0x0001
	cx = cx - 0x0001
	branch Test(EQ,Z) l0800_39DC
	// succ:  l0800_39DE l0800_39DC
l0800_39DE:
	branch Test(EQ,Z) l0800_39E7
	// succ:  l0800_39E0 l0800_39E7
l0800_39E0:
	di = 0x0001
	ax = ax ^ ax
	SZO = cond(ax)
	C = false
	es = ax
	// succ:  l0800_39E7
l0800_39E7:
	di = di - 0x0001
	SZO = cond(di)
	ax = es
	sp = sp - 2
	Mem0[ss:sp:word16] = ax
	sp = sp - 2
	Mem0[ss:sp:word16] = di
	call fn0800_35A3 (retsize: 2;)
	sp = sp + 0x0008
	SCZO = cond(sp)
	sp = sp - 2
	Mem0[ss:sp:word16] = ds
	ax = 0x0A4D
	sp = sp - 2
	Mem0[ss:sp:word16] = ax
	sp = sp - 2
	Mem0[ss:sp:word16] = ss
	ax = bp - 0x0072
	sp = sp - 2
	Mem0[ss:sp:word16] = ax
	call fn0800_AA7E (retsize: 2;)
	sp = sp + 0x0008
	SCZO = cond(sp)
	Mem0[ss:bp - 0x0002:word16] = dx
	Mem0[ss:bp - 0x0004:word16] = ax
	ax = ax | dx
	SZO = cond(ax)
	C = false
	branch Test(NE,Z) l0800_3A13
	// succ:  l0800_3A0C l0800_3A13
l0800_3A0C:
	ax = ax ^ ax
	SZO = cond(ax)
	C = false
	di = Mem0[ss:sp:word16]
	sp = sp + 2
	sp = bp
	bp = Mem0[ss:sp:word16]
	sp = sp + 2
	return
	// succ:  fn0800_3992_exit
l0800_3A13:
	v16 = Mem0[ss:bp - 0x0002:word16]
	sp = sp - 2
	Mem0[ss:sp:word16] = v16
	v17 = Mem0[ss:bp - 0x0004:word16]
	sp = sp - 2
	Mem0[ss:sp:word16] = v17
	call fn0800_4194 (retsize: 2;)
	sp = sp + 0x0004
	SCZO = cond(sp)
	dx = dx | dx
	SZO = cond(dx)
	C = false
	branch Test(UGT,CZ) l0800_3A3D
	// succ:  l0800_3A23 l0800_3A3D
l0800_3A23:
	branch Test(NE,Z) l0800_3A2A
	// succ:  l0800_3A25 l0800_3A2A
l0800_3A25:
	SCZO = cond(ax - 0x0012)
	branch Test(UGT,CZ) l0800_3A3D
	// succ:  l0800_3A2A l0800_3A3D
l0800_3A2A:
	v19 = Mem0[ss:bp - 0x0002:word16]
	sp = sp - 2
	Mem0[ss:sp:word16] = v19
	v20 = Mem0[ss:bp - 0x0004:word16]
	sp = sp - 2
	Mem0[ss:sp:word16] = v20
	call fn0800_A614 (retsize: 2;)
	sp = sp + 0x0004
	SCZO = cond(sp)
	ax = ax ^ ax
	SZO = cond(ax)
	C = false
	di = Mem0[ss:sp:word16]
	sp = sp + 2
	sp = bp
	bp = Mem0[ss:sp:word16]
	sp = sp + 2
	return
	// succ:  fn0800_3992_exit
l0800_3A3D:
	v21 = Mem0[ss:bp - 0x0002:word16]
	sp = sp - 2
	Mem0[ss:sp:word16] = v21
	v22 = Mem0[ss:bp - 0x0004:word16]
	sp = sp - 2
	Mem0[ss:sp:word16] = v22
	call fn0800_3E5D (retsize: 2;)
	sp = sp + 0x0004
	SCZO = cond(sp)
	cl = 0x08
	call fn0800_8CAA (retsize: 2;)
	SCZO = cond(dx - 0x0052)
	branch Test(NE,Z) l0800_3A58
	// succ:  l0800_3A53 l0800_3A58
l0800_3A53:
	SCZO = cond(ax - 0x4E43)
	branch Test(EQ,Z) l0800_3A6B
	// succ:  l0800_3A58 l0800_3A6B
l0800_3A58:
	v24 = Mem0[ss:bp - 0x0002:word16]
	sp = sp - 2
	Mem0[ss:sp:word16] = v24
	v25 = Mem0[ss:bp - 0x0004:word16]
	sp = sp - 2
	Mem0[ss:sp:word16] = v25
	call fn0800_A614 (retsize: 2;)
	sp = sp + 0x0004
	SCZO = cond(sp)
	ax = ax ^ ax
	SZO = cond(ax)
	C = false
	di = Mem0[ss:sp:word16]
	sp = sp + 2
	sp = bp
	bp = Mem0[ss:sp:word16]
	sp = sp + 2
	return
	// succ:  fn0800_3992_exit
l0800_3A6B:
	v26 = Mem0[ss:bp - 0x0002:word16]
	sp = sp - 2
	Mem0[ss:sp:word16] = v26
	v27 = Mem0[ss:bp - 0x0004:word16]
	sp = sp - 2
	Mem0[ss:sp:word16] = v27
	call fn0800_3E5D (retsize: 2;)
	sp = sp + 0x0004
	SCZO = cond(sp)
	SCZO = cond(dx - Mem0[ds:0x2A09:word16])
	branch Test(NE,Z) l0800_3A83
	// succ:  l0800_3A7D l0800_3A83
l0800_3A7D:
	SCZO = cond(ax - Mem0[ds:0x2A07:word16])
	branch Test(EQ,Z) l0800_3A96
	// succ:  l0800_3A83 l0800_3A96
l0800_3A83:
	v28 = Mem0[ss:bp - 0x0002:word16]
	sp = sp - 2
	Mem0[ss:sp:word16] = v28
	v29 = Mem0[ss:bp - 0x0004:word16]
	sp = sp - 2
	Mem0[ss:sp:word16] = v29
	call fn0800_A614 (retsize: 2;)
	sp = sp + 0x0004
	SCZO = cond(sp)
	ax = ax ^ ax
	SZO = cond(ax)
	C = false
	di = Mem0[ss:sp:word16]
	sp = sp + 2
	sp = bp
	bp = Mem0[ss:sp:word16]
	sp = sp + 2
	return
	// succ:  fn0800_3992_exit
l0800_3A96:
	sp = sp - 2
	Mem0[ss:sp:word16] = ss
	ax = bp - 0x0072
	sp = sp - 2
	Mem0[ss:sp:word16] = ax
	sp = sp - 2
	Mem0[ss:sp:word16] = ss
	ax = bp - 0x000C
	sp = sp - 2
	Mem0[ss:sp:word16] = ax
	call fn0800_363D (retsize: 2;)
	sp = sp + 0x0008
	SCZO = cond(sp)
	sp = sp - 2
	Mem0[ss:sp:word16] = ds
	ax = 0x4541
	sp = sp - 2
	Mem0[ss:sp:word16] = ax
	sp = sp - 2
	Mem0[ss:sp:word16] = ss
	ax = bp - 0x0008
	sp = sp - 2
	Mem0[ss:sp:word16] = ax
	call fn0800_363D (retsize: 2;)
	sp = sp + 0x0008
	SCZO = cond(sp)
	sp = sp - 2
	Mem0[ss:sp:word16] = ss
	ax = bp - 0x0008
	sp = sp - 2
	Mem0[ss:sp:word16] = ax
	sp = sp - 2
	Mem0[ss:sp:word16] = ss
	ax = bp - 0x000C
	sp = sp - 2
	Mem0[ss:sp:word16] = ax
	call fn0800_395B (retsize: 2;)
	sp = sp + 0x0008
	SCZO = cond(sp)
	ax = ax | ax
	SZO = cond(ax)
	C = false
	branch Test(GE,SO) l0800_3ADD
	// succ:  l0800_3ACA l0800_3ADD
l0800_3ACA:
	v31 = Mem0[ss:bp - 0x0002:word16]
	sp = sp - 2
	Mem0[ss:sp:word16] = v31
	v32 = Mem0[ss:bp - 0x0004:word16]
	sp = sp - 2
	Mem0[ss:sp:word16] = v32
	call fn0800_A614 (retsize: 2;)
	sp = sp + 0x0004
	SCZO = cond(sp)
	ax = ax ^ ax
	SZO = cond(ax)
	C = false
	di = Mem0[ss:sp:word16]
	sp = sp + 2
	sp = bp
	bp = Mem0[ss:sp:word16]
	sp = sp + 2
	return
	// succ:  fn0800_3992_exit
l0800_3ADD:
	v33 = Mem0[ss:bp - 0x0002:word16]
	sp = sp - 2
	Mem0[ss:sp:word16] = v33
	v34 = Mem0[ss:bp - 0x0004:word16]
	sp = sp - 2
	Mem0[ss:sp:word16] = v34
	call fn0800_3E5D (retsize: 2;)
	sp = sp + 0x0004
	SCZO = cond(sp)
	ax = ax + 0x0012
	SCZO = cond(ax)
	dx = dx + 0x00 + C
	SCZO = cond(dx)
	Mem0[ds:0x2A05:word16] = dx
	Mem0[ds:0x2A03:word16] = ax
	v35 = Mem0[ss:bp - 0x0002:word16]
	sp = sp - 2
	Mem0[ss:sp:word16] = v35
	v36 = Mem0[ss:bp - 0x0004:word16]
	sp = sp - 2
	Mem0[ss:sp:word16] = v36
	call fn0800_A614 (retsize: 2;)
	sp = sp + 0x0004
	SCZO = cond(sp)
	ax = 0x0001
	di = Mem0[ss:sp:word16]
	sp = sp + 2
	sp = bp
	bp = Mem0[ss:sp:word16]
	sp = sp + 2
	return
	// succ:  fn0800_3992_exit
fn0800_3992_exit:


// fn0800_3B0A
// Return size: 2
define fn0800_3B0A
fn0800_3B0A_entry:
	// succ:  l0800_3B0A
l0800_3B0A:
	sp = fp
	Top = 0
	sp = sp - 2
	Mem0[ss:sp:word16] = bp
	bp = sp
	sp = sp - 0x0008
	SCZO = cond(sp)
	ax = Mem0[ss:bp + 0x000C:word16]
	ax = ax | Mem0[ss:bp + 0x000E:word16]
	SZO = cond(ax)
	C = false
	branch Test(NE,Z) l0800_3B1B
	// succ:  l0800_3B18 l0800_3B1B
l0800_3B18:
	goto l0800_3BBF
	// succ:  l0800_3BBF
l0800_3B1B:
	SCZO = cond(Mem0[ss:bp + 0x000E:word16] - 0x0000)
	branch Test(LT,SO) l0800_3B31
	// succ:  l0800_3B21 l0800_3B31
l0800_3B21:
	branch Test(GT,SZO) l0800_3B2A
	// succ:  l0800_3B23 l0800_3B2A
l0800_3B23:
	SCZO = cond(Mem0[ss:bp + 0x000C:word16] - 0xFDE8)
	branch Test(ULE,CZ) l0800_3B31
	// succ:  l0800_3B2A l0800_3B31
l0800_3B2A:
	dx = dx ^ dx
	SZO = cond(dx)
	C = false
	ax = 0xFDE8
	goto l0800_3B37
	// succ:  l0800_3B37
l0800_3B31:
	dx = Mem0[ss:bp + 0x000E:word16]
	ax = Mem0[ss:bp + 0x000C:word16]
	// succ:  l0800_3B37
l0800_3B37:
	Mem0[ss:bp - 0x0006:word16] = dx
	Mem0[ss:bp - 0x0008:word16] = ax
	v13 = Mem0[ss:bp - 0x0006:word16]
	sp = sp - 2
	Mem0[ss:sp:word16] = v13
	sp = sp - 2
	Mem0[ss:sp:word16] = ax
	call fn0800_4311 (retsize: 2;)
	sp = sp + 0x0004
	SCZO = cond(sp)
	Mem0[ss:bp - 0x0002:word16] = dx
	Mem0[ss:bp - 0x0004:word16] = ax
	goto l0800_3BAB
	// succ:  l0800_3BAB
l0800_3B4F:
	SCZO = cond(Mem0[ss:bp + 0x000E:word16] - 0x0000)
	branch Test(LT,SO) l0800_3B65
	// succ:  l0800_3B55 l0800_3B65
l0800_3B55:
	branch Test(GT,SZO) l0800_3B5E
	// succ:  l0800_3B57 l0800_3B5E
l0800_3B57:
	SCZO = cond(Mem0[ss:bp + 0x000C:word16] - 0xFDE8)
	branch Test(ULE,CZ) l0800_3B65
	// succ:  l0800_3B5E l0800_3B65
l0800_3B5E:
	dx = dx ^ dx
	SZO = cond(dx)
	C = false
	ax = 0xFDE8
	goto l0800_3B6B
	// succ:  l0800_3B6B
l0800_3B65:
	dx = Mem0[ss:bp + 0x000E:word16]
	ax = Mem0[ss:bp + 0x000C:word16]
	// succ:  l0800_3B6B
l0800_3B6B:
	Mem0[ss:bp - 0x0006:word16] = dx
	Mem0[ss:bp - 0x0008:word16] = ax
	v16 = Mem0[ss:bp + 0x0006:word16]
	sp = sp - 2
	Mem0[ss:sp:word16] = v16
	v17 = Mem0[ss:bp + 0x0004:word16]
	sp = sp - 2
	Mem0[ss:sp:word16] = v17
	v18 = Mem0[ss:bp - 0x0006:word16]
	sp = sp - 2
	Mem0[ss:sp:word16] = v18
	sp = sp - 2
	Mem0[ss:sp:word16] = ax
	v19 = Mem0[ss:bp - 0x0002:word16]
	sp = sp - 2
	Mem0[ss:sp:word16] = v19
	v20 = Mem0[ss:bp - 0x0004:word16]
	sp = sp - 2
	Mem0[ss:sp:word16] = v20
	call fn0800_4110 (retsize: 2;)
	sp = sp + 0x000C
	SCZO = cond(sp)
	v21 = Mem0[ss:bp + 0x000A:word16]
	sp = sp - 2
	Mem0[ss:sp:word16] = v21
	v22 = Mem0[ss:bp + 0x0008:word16]
	sp = sp - 2
	Mem0[ss:sp:word16] = v22
	v23 = Mem0[ss:bp - 0x0006:word16]
	sp = sp - 2
	Mem0[ss:sp:word16] = v23
	v24 = Mem0[ss:bp - 0x0008:word16]
	sp = sp - 2
	Mem0[ss:sp:word16] = v24
	v25 = Mem0[ss:bp - 0x0002:word16]
	sp = sp - 2
	Mem0[ss:sp:word16] = v25
	v26 = Mem0[ss:bp - 0x0004:word16]
	sp = sp - 2
	Mem0[ss:sp:word16] = v26
	call fn0800_4152 (retsize: 2;)
	sp = sp + 0x000C
	SCZO = cond(sp)
	ax = Mem0[ss:bp - 0x0006:word16]
	dx = Mem0[ss:bp - 0x0008:word16]
	v27 = Mem0[ss:bp + 0x000C:word16] - dx
	Mem0[ss:bp + 0x000C:word16] = v27
	SCZO = cond(v27)
	v28 = Mem0[ss:bp + 0x000E:word16] - ax - C
	Mem0[ss:bp + 0x000E:word16] = v28
	SCZO = cond(v28)
	// succ:  l0800_3BAB
l0800_3BAB:
	ax = Mem0[ss:bp + 0x000C:word16]
	ax = ax | Mem0[ss:bp + 0x000E:word16]
	SZO = cond(ax)
	C = false
	branch Test(NE,Z) l0800_3B4F
	// succ:  l0800_3BB3 l0800_3B4F
l0800_3BB3:
	v14 = Mem0[ss:bp - 0x0002:word16]
	sp = sp - 2
	Mem0[ss:sp:word16] = v14
	v15 = Mem0[ss:bp - 0x0004:word16]
	sp = sp - 2
	Mem0[ss:sp:word16] = v15
	call fn0800_4346 (retsize: 2;)
	sp = sp + 0x0004
	SCZO = cond(sp)
	// succ:  l0800_3BBF
l0800_3BBF:
	sp = bp
	bp = Mem0[ss:sp:word16]
	sp = sp + 2
	return
	// succ:  fn0800_3B0A_exit
fn0800_3B0A_exit:


// fn0800_3BC3
// Return size: 2
define fn0800_3BC3
fn0800_3BC3_entry:
	// succ:  l0800_3BC3
l0800_3BC3:
	sp = fp
	Top = 0
	sp = sp - 2
	Mem0[ss:sp:word16] = bp
	bp = sp
	sp = sp - 0x0004
	SCZO = cond(sp)
	sp = sp - 2
	Mem0[ss:sp:word16] = ds
	ax = 0x0A54
	sp = sp - 2
	Mem0[ss:sp:word16] = ax
	sp = sp - 2
	Mem0[ss:sp:word16] = ds
	ax = 0x43AD
	sp = sp - 2
	Mem0[ss:sp:word16] = ax
	call fn0800_37BE (retsize: 2;)
	sp = sp + 0x0008
	SCZO = cond(sp)
	sp = sp - 2
	Mem0[ss:sp:word16] = ds
	ax = 0x0A61
	sp = sp - 2
	Mem0[ss:sp:word16] = ax
	sp = sp - 2
	Mem0[ss:sp:word16] = ds
	ax = 0x43AD
	sp = sp - 2
	Mem0[ss:sp:word16] = ax
	call fn0800_4234 (retsize: 2;)
	sp = sp + 0x0008
	SCZO = cond(sp)
	Mem0[ds:0x29D5:word16] = dx
	Mem0[ds:0x29D3:word16] = ax
	v9 = Mem0[ss:bp + 0x0006:word16]
	sp = sp - 2
	Mem0[ss:sp:word16] = v9
	v10 = Mem0[ss:bp + 0x0004:word16]
	sp = sp - 2
	Mem0[ss:sp:word16] = v10
	call fn0800_4194 (retsize: 2;)
	sp = sp + 0x0004
	SCZO = cond(sp)
	ax = ax - Mem0[ss:bp + 0x0008:word16]
	SCZO = cond(ax)
	dx = dx - Mem0[ss:bp + 0x000A:word16] - C
	SCZO = cond(dx)
	Mem0[ss:bp - 0x0002:word16] = dx
	Mem0[ss:bp - 0x0004:word16] = ax
	ax = ax ^ ax
	SZO = cond(ax)
	C = false
	sp = sp - 2
	Mem0[ss:sp:word16] = ax
	v13 = Mem0[ss:bp + 0x000A:word16]
	sp = sp - 2
	Mem0[ss:sp:word16] = v13
	v14 = Mem0[ss:bp + 0x0008:word16]
	sp = sp - 2
	Mem0[ss:sp:word16] = v14
	v15 = Mem0[ss:bp + 0x0006:word16]
	sp = sp - 2
	Mem0[ss:sp:word16] = v15
	v16 = Mem0[ss:bp + 0x0004:word16]
	sp = sp - 2
	Mem0[ss:sp:word16] = v16
	call fn0800_ACB3 (retsize: 2;)
	sp = sp + 0x000A
	SCZO = cond(sp)
	v17 = Mem0[ss:bp - 0x0002:word16]
	sp = sp - 2
	Mem0[ss:sp:word16] = v17
	v18 = Mem0[ss:bp - 0x0004:word16]
	sp = sp - 2
	Mem0[ss:sp:word16] = v18
	v19 = Mem0[ds:0x29D5:word16]
	sp = sp - 2
	Mem0[ss:sp:word16] = v19
	v20 = Mem0[ds:0x29D3:word16]
	sp = sp - 2
	Mem0[ss:sp:word16] = v20
	v21 = Mem0[ss:bp + 0x0006:word16]
	sp = sp - 2
	Mem0[ss:sp:word16] = v21
	v22 = Mem0[ss:bp + 0x0004:word16]
	sp = sp - 2
	Mem0[ss:sp:word16] = v22
	call fn0800_3B0A (retsize: 2;)
	sp = sp + 0x000C
	SCZO = cond(sp)
	v23 = Mem0[ds:0x29D5:word16]
	sp = sp - 2
	Mem0[ss:sp:word16] = v23
	v24 = Mem0[ds:0x29D3:word16]
	sp = sp - 2
	Mem0[ss:sp:word16] = v24
	call fn0800_BA67 (retsize: 2;)
	sp = sp + 0x0004
	SCZO = cond(sp)
	ax = ax ^ ax
	SZO = cond(ax)
	C = false
	sp = sp - 2
	Mem0[ss:sp:word16] = ax
	ax = Mem0[ss:bp + 0x000A:word16]
	dx = Mem0[ss:bp + 0x0008:word16]
	dx = dx + Mem0[ss:bp + 0x000C:word16]
	SCZO = cond(dx)
	ax = ax + Mem0[ss:bp + 0x000E:word16] + C
	SCZO = cond(ax)
	sp = sp - 2
	Mem0[ss:sp:word16] = ax
	sp = sp - 2
	Mem0[ss:sp:word16] = dx
	v25 = Mem0[ss:bp + 0x0006:word16]
	sp = sp - 2
	Mem0[ss:sp:word16] = v25
	v26 = Mem0[ss:bp + 0x0004:word16]
	sp = sp - 2
	Mem0[ss:sp:word16] = v26
	call fn0800_ACB3 (retsize: 2;)
	sp = sp + 0x000A
	SCZO = cond(sp)
	v27 = Mem0[ss:bp - 0x0002:word16]
	sp = sp - 2
	Mem0[ss:sp:word16] = v27
	v28 = Mem0[ss:bp - 0x0004:word16]
	sp = sp - 2
	Mem0[ss:sp:word16] = v28
	v29 = Mem0[ss:bp + 0x0006:word16]
	sp = sp - 2
	Mem0[ss:sp:word16] = v29
	v30 = Mem0[ss:bp + 0x0004:word16]
	sp = sp - 2
	Mem0[ss:sp:word16] = v30
	v31 = Mem0[ds:0x29D5:word16]
	sp = sp - 2
	Mem0[ss:sp:word16] = v31
	v32 = Mem0[ds:0x29D3:word16]
	sp = sp - 2
	Mem0[ss:sp:word16] = v32
	call fn0800_3B0A (retsize: 2;)
	sp = sp + 0x000C
	SCZO = cond(sp)
	v33 = Mem0[ds:0x29D5:word16]
	sp = sp - 2
	Mem0[ss:sp:word16] = v33
	v34 = Mem0[ds:0x29D3:word16]
	sp = sp - 2
	Mem0[ss:sp:word16] = v34
	call fn0800_A614 (retsize: 2;)
	sp = sp + 0x0004
	SCZO = cond(sp)
	sp = sp - 2
	Mem0[ss:sp:word16] = ds
	ax = 0x43AD
	sp = sp - 2
	Mem0[ss:sp:word16] = ax
	call fn0800_8F7F (retsize: 2;)
	sp = sp + 0x0004
	SCZO = cond(sp)
	sp = bp
	bp = Mem0[ss:sp:word16]
	sp = sp + 2
	return
	// succ:  fn0800_3BC3_exit
fn0800_3BC3_exit:


// fn0800_3C99
// Return size: 2
define fn0800_3C99
fn0800_3C99_entry:
	// succ:  l0800_3C99
l0800_3C99:
	sp = fp
	Top = 0
	sp = sp - 2
	Mem0[ss:sp:word16] = bp
	bp = sp
	sp = sp - 0x006A
	SCZO = cond(sp)
	sp = sp - 2
	Mem0[ss:sp:word16] = si
	sp = sp - 2
	Mem0[ss:sp:word16] = di
	sp = sp - 2
	Mem0[ss:sp:word16] = ds
	ax = 0x4348
	sp = sp - 2
	Mem0[ss:sp:word16] = ax
	sp = sp - 2
	Mem0[ss:sp:word16] = ss
	ax = bp - 0x006A
	sp = sp - 2
	Mem0[ss:sp:word16] = ax
	call fn0800_3509 (retsize: 2;)
	sp = sp + 0x0008
	SCZO = cond(sp)
	sp = sp - 2
	Mem0[ss:sp:word16] = ss
	es = Mem0[ss:sp:selector]
	sp = sp + 2
	di = bp - 0x006A
	si = 0x0A54
	cx = 0xFFFF
	ax = ax ^ ax
	SZO = cond(ax)
	C = false
	// succ:  l0800_3CBE
l0800_3CBE:
	branch cx == 0x0000 l0800_3CC0
	// succ:  l0800_3CBE_1 l0800_3CC0
l0800_3CBE_1:
	SCZO = cond(al - Mem0[es:di:byte])
	di = di + 0x0001
	cx = cx - 0x0001
	branch Test(EQ,Z) l0800_3CBE
	// succ:  l0800_3CC0 l0800_3CBE
l0800_3CC0:
	di = di - 0x0001
	SZO = cond(di)
	cx = 0x000D
	// succ:  l0800_3CC4
l0800_3CC4:
	branch cx == 0x0000 l0800_3CC6
	// succ:  l0800_3CC4_2 l0800_3CC6
l0800_3CC4_2:
	v16 = Mem0[ds:si:byte]
	Mem0[es:di:byte] = v16
	si = si + 0x0001
	di = di + 0x0001
	cx = cx - 0x0001
	goto l0800_3CC4
	// succ:  l0800_3CC4
l0800_3CC6:
	sp = sp - 2
	Mem0[ss:sp:word16] = ds
	ax = 0x0A61
	sp = sp - 2
	Mem0[ss:sp:word16] = ax
	sp = sp - 2
	Mem0[ss:sp:word16] = ss
	ax = bp - 0x006A
	sp = sp - 2
	Mem0[ss:sp:word16] = ax
	call fn0800_4234 (retsize: 2;)
	sp = sp + 0x0008
	SCZO = cond(sp)
	Mem0[ss:bp - 0x0002:word16] = dx
	Mem0[ss:bp - 0x0004:word16] = ax
	ax = ax ^ ax
	SZO = cond(ax)
	C = false
	sp = sp - 2
	Mem0[ss:sp:word16] = ax
	sp = sp - 2
	Mem0[ss:sp:word16] = ax
	sp = sp - 2
	Mem0[ss:sp:word16] = ax
	v18 = Mem0[ss:bp + 0x0006:word16]
	sp = sp - 2
	Mem0[ss:sp:word16] = v18
	v19 = Mem0[ss:bp + 0x0004:word16]
	sp = sp - 2
	Mem0[ss:sp:word16] = v19
	call fn0800_ACB3 (retsize: 2;)
	sp = sp + 0x000A
	SCZO = cond(sp)
	v20 = Mem0[ss:bp + 0x000A:word16]
	sp = sp - 2
	Mem0[ss:sp:word16] = v20
	v21 = Mem0[ss:bp + 0x0008:word16]
	sp = sp - 2
	Mem0[ss:sp:word16] = v21
	v22 = Mem0[ss:bp - 0x0002:word16]
	sp = sp - 2
	Mem0[ss:sp:word16] = v22
	v23 = Mem0[ss:bp - 0x0004:word16]
	sp = sp - 2
	Mem0[ss:sp:word16] = v23
	v24 = Mem0[ss:bp + 0x0006:word16]
	sp = sp - 2
	Mem0[ss:sp:word16] = v24
	v25 = Mem0[ss:bp + 0x0004:word16]
	sp = sp - 2
	Mem0[ss:sp:word16] = v25
	call fn0800_3B0A (retsize: 2;)
	sp = sp + 0x000C
	SCZO = cond(sp)
	ax = ax ^ ax
	SZO = cond(ax)
	C = false
	sp = sp - 2
	Mem0[ss:sp:word16] = ax
	ax = Mem0[ss:bp + 0x000A:word16]
	dx = Mem0[ss:bp + 0x0008:word16]
	dx = dx + Mem0[ss:bp + 0x000C:word16]
	SCZO = cond(dx)
	ax = ax + Mem0[ss:bp + 0x000E:word16] + C
	SCZO = cond(ax)
	sp = sp - 2
	Mem0[ss:sp:word16] = ax
	sp = sp - 2
	Mem0[ss:sp:word16] = dx
	v26 = Mem0[ss:bp + 0x0006:word16]
	sp = sp - 2
	Mem0[ss:sp:word16] = v26
	v27 = Mem0[ss:bp + 0x0004:word16]
	sp = sp - 2
	Mem0[ss:sp:word16] = v27
	call fn0800_ACB3 (retsize: 2;)
	sp = sp + 0x000A
	SCZO = cond(sp)
	v28 = Mem0[ss:bp + 0x0006:word16]
	sp = sp - 2
	Mem0[ss:sp:word16] = v28
	v29 = Mem0[ss:bp + 0x0004:word16]
	sp = sp - 2
	Mem0[ss:sp:word16] = v29
	call fn0800_4194 (retsize: 2;)
	sp = sp + 0x0004
	SCZO = cond(sp)
	bx = Mem0[ss:bp + 0x000A:word16]
	cx = Mem0[ss:bp + 0x0008:word16]
	cx = cx + Mem0[ss:bp + 0x000C:word16]
	SCZO = cond(cx)
	bx = bx + Mem0[ss:bp + 0x000E:word16] + C
	SCZO = cond(bx)
	ax = ax - cx
	SCZO = cond(ax)
	dx = dx - bx - C
	SCZO = cond(dx)
	Mem0[ss:bp + 0x000E:word16] = dx
	Mem0[ss:bp + 0x000C:word16] = ax
	v31 = Mem0[ss:bp + 0x000E:word16]
	sp = sp - 2
	Mem0[ss:sp:word16] = v31
	sp = sp - 2
	Mem0[ss:sp:word16] = ax
	v32 = Mem0[ss:bp - 0x0002:word16]
	sp = sp - 2
	Mem0[ss:sp:word16] = v32
	v33 = Mem0[ss:bp - 0x0004:word16]
	sp = sp - 2
	Mem0[ss:sp:word16] = v33
	v34 = Mem0[ss:bp + 0x0006:word16]
	sp = sp - 2
	Mem0[ss:sp:word16] = v34
	v35 = Mem0[ss:bp + 0x0004:word16]
	sp = sp - 2
	Mem0[ss:sp:word16] = v35
	call fn0800_3B0A (retsize: 2;)
	sp = sp + 0x000C
	SCZO = cond(sp)
	v36 = Mem0[ss:bp - 0x0002:word16]
	sp = sp - 2
	Mem0[ss:sp:word16] = v36
	v37 = Mem0[ss:bp - 0x0004:word16]
	sp = sp - 2
	Mem0[ss:sp:word16] = v37
	call fn0800_A614 (retsize: 2;)
	sp = sp + 0x0004
	SCZO = cond(sp)
	v38 = Mem0[ds:0x29D1:word16]
	sp = sp - 2
	Mem0[ss:sp:word16] = v38
	v39 = Mem0[ds:0x29CF:word16]
	sp = sp - 2
	Mem0[ss:sp:word16] = v39
	call fn0800_A614 (retsize: 2;)
	sp = sp + 0x0004
	SCZO = cond(sp)
	ax = 0x0180
	sp = sp - 2
	Mem0[ss:sp:word16] = ax
	sp = sp - 2
	Mem0[ss:sp:word16] = ds
	ax = 0x4348
	sp = sp - 2
	Mem0[ss:sp:word16] = ax
	call fn0800_A4F6 (retsize: 2;)
	sp = sp + 0x0006
	SCZO = cond(sp)
	sp = sp - 2
	Mem0[ss:sp:word16] = ds
	ax = 0x4348
	sp = sp - 2
	Mem0[ss:sp:word16] = ax
	call fn0800_8F7F (retsize: 2;)
	sp = sp + 0x0004
	SCZO = cond(sp)
	sp = sp - 2
	Mem0[ss:sp:word16] = ds
	ax = 0x4348
	sp = sp - 2
	Mem0[ss:sp:word16] = ax
	sp = sp - 2
	Mem0[ss:sp:word16] = ss
	ax = bp - 0x006A
	sp = sp - 2
	Mem0[ss:sp:word16] = ax
	call fn0800_BA4A (retsize: 2;)
	sp = sp + 0x0008
	SCZO = cond(sp)
	SCZO = cond(ax - 0xFFFF)
	branch Test(NE,Z) l0800_3DB2
	// succ:  l0800_3DA3 l0800_3DB2
l0800_3DA3:
	sp = sp - 2
	Mem0[ss:sp:word16] = ss
	ax = bp - 0x006A
	sp = sp - 2
	Mem0[ss:sp:word16] = ax
	ax = 0x000A
	sp = sp - 2
	Mem0[ss:sp:word16] = ax
	call fn0800_0D24 (retsize: 2;)
	sp = sp + 0x0006
	SCZO = cond(sp)
	// succ:  l0800_3DB2
l0800_3DB2:
	sp = sp - 2
	Mem0[ss:sp:word16] = ds
	ax = 0x0A65
	sp = sp - 2
	Mem0[ss:sp:word16] = ax
	sp = sp - 2
	Mem0[ss:sp:word16] = ds
	ax = 0x4348
	sp = sp - 2
	Mem0[ss:sp:word16] = ax
	call fn0800_4234 (retsize: 2;)
	sp = sp + 0x0008
	SCZO = cond(sp)
	Mem0[ds:0x29D1:word16] = dx
	Mem0[ds:0x29CF:word16] = ax
	di = Mem0[ss:sp:word16]
	sp = sp + 2
	si = Mem0[ss:sp:word16]
	sp = sp + 2
	sp = bp
	bp = Mem0[ss:sp:word16]
	sp = sp + 2
	return
	// succ:  fn0800_3C99_exit
fn0800_3C99_exit:


// fn0800_3DCF
// Return size: 2
define fn0800_3DCF
fn0800_3DCF_entry:
	// succ:  l0800_3DCF
l0800_3DCF:
	sp = fp
	Top = 0
	sp = sp - 2
	Mem0[ss:sp:word16] = bp
	bp = sp
	sp = sp - 0x0002
	SCZO = cond(sp)
	sp = sp - 2
	Mem0[ss:sp:word16] = si
	es_bx = Mem0[ss:bp + 0x0004:segptr32]
	v10 = Mem0[es:bx:word16] - 0x0001
	Mem0[es:bx:word16] = v10
	SZO = cond(v10)
	branch Test(LT,SO) l0800_3DF3
	// succ:  l0800_3DDE l0800_3DF3
l0800_3DDE:
	ax = Mem0[es:bx + 0x000E:word16]
	si = Mem0[es:bx + 0x000C:word16]
	v14 = Mem0[es:bx + 0x000C:word16] + 0x0001
	Mem0[es:bx + 0x000C:word16] = v14
	SZO = cond(v14)
	es = ax
	al = Mem0[es:si:byte]
	ah = 0x00
	goto l0800_3DFF
	// succ:  l0800_3DFF
l0800_3DF3:
	v17 = Mem0[ss:bp + 0x0006:word16]
	sp = sp - 2
	Mem0[ss:sp:word16] = v17
	v18 = Mem0[ss:bp + 0x0004:word16]
	sp = sp - 2
	Mem0[ss:sp:word16] = v18
	call fn0800_AEC2 (retsize: 2;)
	sp = sp + 0x0004
	SCZO = cond(sp)
	// succ:  l0800_3DFF
l0800_3DFF:
	Mem0[ss:bp - 0x0002:word16] = ax
	SCZO = cond(ax - 0xFFFF)
	branch Test(NE,Z) l0800_3E1F
	// succ:  l0800_3E07 l0800_3E1F
l0800_3E07:
	v20 = Mem0[ss:bp + 0x0006:word16]
	sp = sp - 2
	Mem0[ss:sp:word16] = v20
	v21 = Mem0[ss:bp + 0x0004:word16]
	sp = sp - 2
	Mem0[ss:sp:word16] = v21
	call fn0800_4271 (retsize: 2;)
	sp = sp + 0x0004
	SCZO = cond(sp)
	sp = sp - 2
	Mem0[ss:sp:word16] = dx
	sp = sp - 2
	Mem0[ss:sp:word16] = ax
	ax = 0x0008
	sp = sp - 2
	Mem0[ss:sp:word16] = ax
	call fn0800_0D24 (retsize: 2;)
	sp = sp + 0x0006
	SCZO = cond(sp)
	// succ:  l0800_3E1F
l0800_3E1F:
	al = Mem0[ss:bp - 0x0002:byte]
	si = Mem0[ss:sp:word16]
	sp = sp + 2
	sp = bp
	bp = Mem0[ss:sp:word16]
	sp = sp + 2
	return
	// succ:  fn0800_3DCF_exit
fn0800_3DCF_exit:


// fn0800_3E27
// Return size: 2
define fn0800_3E27
fn0800_3E27_entry:
	// succ:  l0800_3E27
l0800_3E27:
	sp = fp
	Top = 0
	sp = sp - 2
	Mem0[ss:sp:word16] = bp
	bp = sp
	sp = sp - 0x0004
	SCZO = cond(sp)
	v6 = Mem0[ss:bp + 0x0006:word16]
	sp = sp - 2
	Mem0[ss:sp:word16] = v6
	v7 = Mem0[ss:bp + 0x0004:word16]
	sp = sp - 2
	Mem0[ss:sp:word16] = v7
	call fn0800_3DCF (retsize: 2;)
	sp = sp + 0x0004
	SCZO = cond(sp)
	ah = 0x00
	Mem0[ss:bp - 0x0002:word16] = ax
	v10 = Mem0[ss:bp + 0x0006:word16]
	sp = sp - 2
	Mem0[ss:sp:word16] = v10
	v11 = Mem0[ss:bp + 0x0004:word16]
	sp = sp - 2
	Mem0[ss:sp:word16] = v11
	call fn0800_3DCF (retsize: 2;)
	sp = sp + 0x0004
	SCZO = cond(sp)
	ah = 0x00
	Mem0[ss:bp - 0x0004:word16] = ax
	ax = Mem0[ss:bp - 0x0002:word16]
	cl = 0x08
	ax = ax << cl
	SCZO = cond(ax)
	ax = ax + Mem0[ss:bp - 0x0004:word16]
	SCZO = cond(ax)
	sp = bp
	bp = Mem0[ss:sp:word16]
	sp = sp + 2
	return
	// succ:  fn0800_3E27_exit
fn0800_3E27_exit:


// fn0800_3E5D
// Return size: 2
define fn0800_3E5D
fn0800_3E5D_entry:
	// succ:  l0800_3E5D
l0800_3E5D:
	sp = fp
	Top = 0
	sp = sp - 2
	Mem0[ss:sp:word16] = bp
	bp = sp
	sp = sp - 0x0008
	SCZO = cond(sp)
	v6 = Mem0[ss:bp + 0x0006:word16]
	sp = sp - 2
	Mem0[ss:sp:word16] = v6
	v7 = Mem0[ss:bp + 0x0004:word16]
	sp = sp - 2
	Mem0[ss:sp:word16] = v7
	call fn0800_3E27 (retsize: 2;)
	sp = sp + 0x0004
	SCZO = cond(sp)
	Mem0[ss:bp - 0x0002:word16] = 0x0000
	Mem0[ss:bp - 0x0004:word16] = ax
	v9 = Mem0[ss:bp + 0x0006:word16]
	sp = sp - 2
	Mem0[ss:sp:word16] = v9
	v10 = Mem0[ss:bp + 0x0004:word16]
	sp = sp - 2
	Mem0[ss:sp:word16] = v10
	call fn0800_3E27 (retsize: 2;)
	sp = sp + 0x0004
	SCZO = cond(sp)
	Mem0[ss:bp - 0x0006:word16] = 0x0000
	Mem0[ss:bp - 0x0008:word16] = ax
	dx = Mem0[ss:bp - 0x0004:word16]
	ax = ax ^ ax
	SZO = cond(ax)
	C = false
	ax = ax + Mem0[ss:bp - 0x0008:word16]
	SCZO = cond(ax)
	dx = dx + 0x00 + C
	SCZO = cond(dx)
	sp = bp
	bp = Mem0[ss:sp:word16]
	sp = sp + 2
	return
	// succ:  fn0800_3E5D_exit
fn0800_3E5D_exit:


// fn0800_3E9A
// Return size: 2
define fn0800_3E9A
fn0800_3E9A_entry:
	// succ:  l0800_3E9A
l0800_3E9A:
	sp = fp
	Top = 0
	sp = sp - 2
	Mem0[ss:sp:word16] = bp
	bp = sp
	sp = sp - 0x0002
	SCZO = cond(sp)
	sp = sp - 2
	Mem0[ss:sp:word16] = si
	es_bx = Mem0[ss:bp + 0x0004:segptr32]
	v10 = Mem0[es:bx:word16] - 0x0001
	Mem0[es:bx:word16] = v10
	SZO = cond(v10)
	branch Test(LT,SO) l0800_3EBE
	// succ:  l0800_3EA9 l0800_3EBE
l0800_3EA9:
	ax = Mem0[es:bx + 0x000E:word16]
	si = Mem0[es:bx + 0x000C:word16]
	v14 = Mem0[es:bx + 0x000C:word16] + 0x0001
	Mem0[es:bx + 0x000C:word16] = v14
	SZO = cond(v14)
	es = ax
	al = Mem0[es:si:byte]
	ah = 0x00
	goto l0800_3ECA
	// succ:  l0800_3ECA
l0800_3EBE:
	v17 = Mem0[ss:bp + 0x0006:word16]
	sp = sp - 2
	Mem0[ss:sp:word16] = v17
	v18 = Mem0[ss:bp + 0x0004:word16]
	sp = sp - 2
	Mem0[ss:sp:word16] = v18
	call fn0800_AEC2 (retsize: 2;)
	sp = sp + 0x0004
	SCZO = cond(sp)
	// succ:  l0800_3ECA
l0800_3ECA:
	Mem0[ss:bp - 0x0002:word16] = ax
	SCZO = cond(ax - 0xFFFF)
	branch Test(NE,Z) l0800_3EEA
	// succ:  l0800_3ED2 l0800_3EEA
l0800_3ED2:
	v20 = Mem0[ss:bp + 0x0006:word16]
	sp = sp - 2
	Mem0[ss:sp:word16] = v20
	v21 = Mem0[ss:bp + 0x0004:word16]
	sp = sp - 2
	Mem0[ss:sp:word16] = v21
	call fn0800_4271 (retsize: 2;)
	sp = sp + 0x0004
	SCZO = cond(sp)
	sp = sp - 2
	Mem0[ss:sp:word16] = dx
	sp = sp - 2
	Mem0[ss:sp:word16] = ax
	ax = 0x0008
	sp = sp - 2
	Mem0[ss:sp:word16] = ax
	call fn0800_0D24 (retsize: 2;)
	sp = sp + 0x0006
	SCZO = cond(sp)
	// succ:  l0800_3EEA
l0800_3EEA:
	ax = 0x0001
	sp = sp - 2
	Mem0[ss:sp:word16] = ax
	ax = 0xFFFF
	dx = 0xFFFF
	sp = sp - 2
	Mem0[ss:sp:word16] = ax
	sp = sp - 2
	Mem0[ss:sp:word16] = dx
	v23 = Mem0[ss:bp + 0x0006:word16]
	sp = sp - 2
	Mem0[ss:sp:word16] = v23
	v24 = Mem0[ss:bp + 0x0004:word16]
	sp = sp - 2
	Mem0[ss:sp:word16] = v24
	call fn0800_ACB3 (retsize: 2;)
	sp = sp + 0x000A
	SCZO = cond(sp)
	al = Mem0[ss:bp - 0x0002:byte]
	si = Mem0[ss:sp:word16]
	sp = sp + 2
	sp = bp
	bp = Mem0[ss:sp:word16]
	sp = sp + 2
	return
	// succ:  fn0800_3E9A_exit
fn0800_3E9A_exit:


// fn0800_3F0A
// Return size: 2
define fn0800_3F0A
fn0800_3F0A_entry:
	// succ:  l0800_3F0A
l0800_3F0A:
	sp = fp
	Top = 0
	sp = sp - 2
	Mem0[ss:sp:word16] = bp
	bp = sp
	sp = sp - 0x0004
	SCZO = cond(sp)
	v6 = Mem0[ss:bp + 0x0006:word16]
	sp = sp - 2
	Mem0[ss:sp:word16] = v6
	v7 = Mem0[ss:bp + 0x0004:word16]
	sp = sp - 2
	Mem0[ss:sp:word16] = v7
	call fn0800_3DCF (retsize: 2;)
	sp = sp + 0x0004
	SCZO = cond(sp)
	ah = 0x00
	Mem0[ss:bp - 0x0002:word16] = ax
	v10 = Mem0[ss:bp + 0x0006:word16]
	sp = sp - 2
	Mem0[ss:sp:word16] = v10
	v11 = Mem0[ss:bp + 0x0004:word16]
	sp = sp - 2
	Mem0[ss:sp:word16] = v11
	call fn0800_3DCF (retsize: 2;)
	sp = sp + 0x0004
	SCZO = cond(sp)
	ah = 0x00
	Mem0[ss:bp - 0x0004:word16] = ax
	ax = 0x0001
	sp = sp - 2
	Mem0[ss:sp:word16] = ax
	ax = 0xFFFF
	dx = 0xFFFE
	sp = sp - 2
	Mem0[ss:sp:word16] = ax
	sp = sp - 2
	Mem0[ss:sp:word16] = dx
	v13 = Mem0[ss:bp + 0x0006:word16]
	sp = sp - 2
	Mem0[ss:sp:word16] = v13
	v14 = Mem0[ss:bp + 0x0004:word16]
	sp = sp - 2
	Mem0[ss:sp:word16] = v14
	call fn0800_ACB3 (retsize: 2;)
	sp = sp + 0x000A
	SCZO = cond(sp)
	ax = Mem0[ss:bp - 0x0002:word16]
	cl = 0x08
	ax = ax << cl
	SCZO = cond(ax)
	ax = ax + Mem0[ss:bp - 0x0004:word16]
	SCZO = cond(ax)
	sp = bp
	bp = Mem0[ss:sp:word16]
	sp = sp + 2
	return
	// succ:  fn0800_3F0A_exit
fn0800_3F0A_exit:


// fn0800_3F58
// Return size: 2
define fn0800_3F58
fn0800_3F58_entry:
	// succ:  l0800_3F58
l0800_3F58:
	sp = fp
	Top = 0
	sp = sp - 2
	Mem0[ss:sp:word16] = bp
	bp = sp
	sp = sp - 0x0008
	SCZO = cond(sp)
	v6 = Mem0[ss:bp + 0x0006:word16]
	sp = sp - 2
	Mem0[ss:sp:word16] = v6
	v7 = Mem0[ss:bp + 0x0004:word16]
	sp = sp - 2
	Mem0[ss:sp:word16] = v7
	call fn0800_3E27 (retsize: 2;)
	sp = sp + 0x0004
	SCZO = cond(sp)
	Mem0[ss:bp - 0x0002:word16] = 0x0000
	Mem0[ss:bp - 0x0004:word16] = ax
	v9 = Mem0[ss:bp + 0x0006:word16]
	sp = sp - 2
	Mem0[ss:sp:word16] = v9
	v10 = Mem0[ss:bp + 0x0004:word16]
	sp = sp - 2
	Mem0[ss:sp:word16] = v10
	call fn0800_3E27 (retsize: 2;)
	sp = sp + 0x0004
	SCZO = cond(sp)
	Mem0[ss:bp - 0x0006:word16] = 0x0000
	Mem0[ss:bp - 0x0008:word16] = ax
	ax = 0x0001
	sp = sp - 2
	Mem0[ss:sp:word16] = ax
	ax = 0xFFFF
	dx = 0xFFFC
	sp = sp - 2
	Mem0[ss:sp:word16] = ax
	sp = sp - 2
	Mem0[ss:sp:word16] = dx
	v12 = Mem0[ss:bp + 0x0006:word16]
	sp = sp - 2
	Mem0[ss:sp:word16] = v12
	v13 = Mem0[ss:bp + 0x0004:word16]
	sp = sp - 2
	Mem0[ss:sp:word16] = v13
	call fn0800_ACB3 (retsize: 2;)
	sp = sp + 0x000A
	SCZO = cond(sp)
	dx = Mem0[ss:bp - 0x0004:word16]
	ax = ax ^ ax
	SZO = cond(ax)
	C = false
	ax = ax + Mem0[ss:bp - 0x0008:word16]
	SCZO = cond(ax)
	dx = dx + Mem0[ss:bp - 0x0006:word16] + C
	SCZO = cond(dx)
	sp = bp
	bp = Mem0[ss:sp:word16]
	sp = sp + 2
	return
	// succ:  fn0800_3F58_exit
fn0800_3F58_exit:


// fn0800_3FAD
// Return size: 2
define fn0800_3FAD
fn0800_3FAD_entry:
	// succ:  l0800_3FAD
l0800_3FAD:
	sp = fp
	Top = 0
	sp = sp - 2
	Mem0[ss:sp:word16] = bp
	bp = sp
	sp = sp - 0x0004
	SCZO = cond(sp)
	v6 = Mem0[ss:bp + 0x0006:word16]
	sp = sp - 2
	Mem0[ss:sp:word16] = v6
	v7 = Mem0[ss:bp + 0x0004:word16]
	sp = sp - 2
	Mem0[ss:sp:word16] = v7
	call fn0800_3DCF (retsize: 2;)
	sp = sp + 0x0004
	SCZO = cond(sp)
	ah = 0x00
	Mem0[ss:bp - 0x0002:word16] = ax
	v10 = Mem0[ss:bp + 0x0006:word16]
	sp = sp - 2
	Mem0[ss:sp:word16] = v10
	v11 = Mem0[ss:bp + 0x0004:word16]
	sp = sp - 2
	Mem0[ss:sp:word16] = v11
	call fn0800_3DCF (retsize: 2;)
	sp = sp + 0x0004
	SCZO = cond(sp)
	ah = 0x00
	Mem0[ss:bp - 0x0004:word16] = ax
	cl = 0x08
	ax = ax << cl
	SCZO = cond(ax)
	ax = ax + Mem0[ss:bp - 0x0002:word16]
	SCZO = cond(ax)
	sp = bp
	bp = Mem0[ss:sp:word16]
	sp = sp + 2
	return
	// succ:  fn0800_3FAD_exit
fn0800_3FAD_exit:


// fn0800_401E
// Return size: 2
define fn0800_401E
fn0800_401E_entry:
	// succ:  l0800_401E
l0800_401E:
	sp = fp
	Top = 0
	sp = sp - 2
	Mem0[ss:sp:word16] = bp
	bp = sp
	v5 = Mem0[ss:bp + 0x0008:word16]
	sp = sp - 2
	Mem0[ss:sp:word16] = v5
	v6 = Mem0[ss:bp + 0x0006:word16]
	sp = sp - 2
	Mem0[ss:sp:word16] = v6
	ax = Mem0[ss:bp + 0x0004:word16]
	cl = 0x08
	ax = ax >>u cl
	SCZO = cond(ax)
	sp = sp - 2
	Mem0[ss:sp:word16] = ax
	call fn0800_4047 (retsize: 2;)
	sp = sp + 0x0006
	SCZO = cond(sp)
	v10 = Mem0[ss:bp + 0x0008:word16]
	sp = sp - 2
	Mem0[ss:sp:word16] = v10
	v11 = Mem0[ss:bp + 0x0006:word16]
	sp = sp - 2
	Mem0[ss:sp:word16] = v11
	al = Mem0[ss:bp + 0x0004:byte]
	sp = sp - 2
	Mem0[ss:sp:word16] = ax
	call fn0800_4047 (retsize: 2;)
	sp = sp + 0x0006
	SCZO = cond(sp)
	bp = Mem0[ss:sp:word16]
	sp = sp + 2
	return
	// succ:  fn0800_401E_exit
fn0800_401E_exit:


// fn0800_4047
// Return size: 2
define fn0800_4047
fn0800_4047_entry:
	// succ:  l0800_4047
l0800_4047:
	sp = fp
	Top = 0
	sp = sp - 2
	Mem0[ss:sp:word16] = bp
	bp = sp
	sp = sp - 2
	Mem0[ss:sp:word16] = si
	cl = Mem0[ss:bp + 0x0004:byte]
	es_bx = Mem0[ss:bp + 0x0006:segptr32]
	v10 = Mem0[es:bx:word16] + 0x0001
	Mem0[es:bx:word16] = v10
	SZO = cond(v10)
	branch Test(GE,SO) l0800_406F
	// succ:  l0800_4056 l0800_406F
l0800_4056:
	ax = Mem0[es:bx + 0x000E:word16]
	si = Mem0[es:bx + 0x000C:word16]
	v14 = Mem0[es:bx + 0x000C:word16] + 0x0001
	Mem0[es:bx + 0x000C:word16] = v14
	SZO = cond(v14)
	dl = cl
	es = ax
	Mem0[es:si:byte] = dl
	al = dl
	ah = 0x00
	goto l0800_407C
	// succ:  l0800_407C
l0800_406F:
	v18 = Mem0[ss:bp + 0x0008:word16]
	sp = sp - 2
	Mem0[ss:sp:word16] = v18
	v19 = Mem0[ss:bp + 0x0006:word16]
	sp = sp - 2
	Mem0[ss:sp:word16] = v19
	sp = sp - 2
	Mem0[ss:sp:word16] = cx
	call fn0800_B30A (retsize: 2;)
	sp = sp + 0x0006
	SCZO = cond(sp)
	// succ:  l0800_407C
l0800_407C:
	SCZO = cond(ax - 0xFFFF)
	branch Test(NE,Z) l0800_4099
	// succ:  l0800_4081 l0800_4099
l0800_4081:
	v23 = Mem0[ss:bp + 0x0008:word16]
	sp = sp - 2
	Mem0[ss:sp:word16] = v23
	v24 = Mem0[ss:bp + 0x0006:word16]
	sp = sp - 2
	Mem0[ss:sp:word16] = v24
	call fn0800_4271 (retsize: 2;)
	sp = sp + 0x0004
	SCZO = cond(sp)
	sp = sp - 2
	Mem0[ss:sp:word16] = dx
	sp = sp - 2
	Mem0[ss:sp:word16] = ax
	ax = 0x0009
	sp = sp - 2
	Mem0[ss:sp:word16] = ax
	call fn0800_0D24 (retsize: 2;)
	sp = sp + 0x0006
	SCZO = cond(sp)
	// succ:  l0800_4099
l0800_4099:
	si = Mem0[ss:sp:word16]
	sp = sp + 2
	bp = Mem0[ss:sp:word16]
	sp = sp + 2
	return
	// succ:  fn0800_4047_exit
fn0800_4047_exit:


// fn0800_409C
// Return size: 2
define fn0800_409C
fn0800_409C_entry:
	// succ:  l0800_409C
l0800_409C:
	sp = fp
	Top = 0
	sp = sp - 2
	Mem0[ss:sp:word16] = bp
	bp = sp
	v5 = Mem0[ss:bp + 0x000A:word16]
	sp = sp - 2
	Mem0[ss:sp:word16] = v5
	v6 = Mem0[ss:bp + 0x0008:word16]
	sp = sp - 2
	Mem0[ss:sp:word16] = v6
	v7 = Mem0[ss:bp + 0x0006:word16]
	sp = sp - 2
	Mem0[ss:sp:word16] = v7
	call fn0800_401E (retsize: 2;)
	sp = sp + 0x0006
	SCZO = cond(sp)
	v9 = Mem0[ss:bp + 0x000A:word16]
	sp = sp - 2
	Mem0[ss:sp:word16] = v9
	v10 = Mem0[ss:bp + 0x0008:word16]
	sp = sp - 2
	Mem0[ss:sp:word16] = v10
	v11 = Mem0[ss:bp + 0x0004:word16]
	sp = sp - 2
	Mem0[ss:sp:word16] = v11
	call fn0800_401E (retsize: 2;)
	sp = sp + 0x0006
	SCZO = cond(sp)
	bp = Mem0[ss:sp:word16]
	sp = sp + 2
	return
	// succ:  fn0800_409C_exit
fn0800_409C_exit:


// fn0800_40BF
// Return size: 2
define fn0800_40BF
fn0800_40BF_entry:
	// succ:  l0800_40BF
l0800_40BF:
	sp = fp
	Top = 0
	sp = sp - 2
	Mem0[ss:sp:word16] = bp
	bp = sp
	v5 = Mem0[ss:bp + 0x0008:word16]
	sp = sp - 2
	Mem0[ss:sp:word16] = v5
	v6 = Mem0[ss:bp + 0x0006:word16]
	sp = sp - 2
	Mem0[ss:sp:word16] = v6
	al = Mem0[ss:bp + 0x0004:byte]
	al = al & 0xFF
	SZO = cond(al)
	C = false
	sp = sp - 2
	Mem0[ss:sp:word16] = ax
	call fn0800_4047 (retsize: 2;)
	sp = sp + 0x0006
	SCZO = cond(sp)
	v12 = Mem0[ss:bp + 0x0008:word16]
	sp = sp - 2
	Mem0[ss:sp:word16] = v12
	v13 = Mem0[ss:bp + 0x0006:word16]
	sp = sp - 2
	Mem0[ss:sp:word16] = v13
	ax = Mem0[ss:bp + 0x0004:word16]
	cl = 0x08
	ax = ax >>u cl
	SCZO = cond(ax)
	al = al & 0xFF
	SZO = cond(al)
	C = false
	sp = sp - 2
	Mem0[ss:sp:word16] = ax
	call fn0800_4047 (retsize: 2;)
	sp = sp + 0x0006
	SCZO = cond(sp)
	bp = Mem0[ss:sp:word16]
	sp = sp + 2
	return
	// succ:  fn0800_40BF_exit
fn0800_40BF_exit:


// fn0800_4110
// Return size: 2
define fn0800_4110
fn0800_4110_entry:
	// succ:  l0800_4110
l0800_4110:
	sp = fp
	Top = 0
	sp = sp - 2
	Mem0[ss:sp:word16] = bp
	bp = sp
	v5 = Mem0[ss:bp + 0x000E:word16]
	sp = sp - 2
	Mem0[ss:sp:word16] = v5
	v6 = Mem0[ss:bp + 0x000C:word16]
	sp = sp - 2
	Mem0[ss:sp:word16] = v6
	v7 = Mem0[ss:bp + 0x0008:word16]
	sp = sp - 2
	Mem0[ss:sp:word16] = v7
	ax = 0x0001
	sp = sp - 2
	Mem0[ss:sp:word16] = ax
	v9 = Mem0[ss:bp + 0x0006:word16]
	sp = sp - 2
	Mem0[ss:sp:word16] = v9
	v10 = Mem0[ss:bp + 0x0004:word16]
	sp = sp - 2
	Mem0[ss:sp:word16] = v10
	call fn0800_ABA3 (retsize: 2;)
	sp = sp + 0x000C
	SCZO = cond(sp)
	dx = dx ^ dx
	SZO = cond(dx)
	C = false
	SCZO = cond(dx - Mem0[ss:bp + 0x000A:word16])
	branch Test(NE,Z) l0800_4138
	// succ:  l0800_4133 l0800_4138
l0800_4133:
	SCZO = cond(ax - Mem0[ss:bp + 0x0008:word16])
	branch Test(EQ,Z) l0800_4150
	// succ:  l0800_4138 l0800_4150
l0800_4138:
	v16 = Mem0[ss:bp + 0x000E:word16]
	sp = sp - 2
	Mem0[ss:sp:word16] = v16
	v17 = Mem0[ss:bp + 0x000C:word16]
	sp = sp - 2
	Mem0[ss:sp:word16] = v17
	call fn0800_4271 (retsize: 2;)
	sp = sp + 0x0004
	SCZO = cond(sp)
	sp = sp - 2
	Mem0[ss:sp:word16] = dx
	sp = sp - 2
	Mem0[ss:sp:word16] = ax
	ax = 0x0008
	sp = sp - 2
	Mem0[ss:sp:word16] = ax
	call fn0800_0D24 (retsize: 2;)
	sp = sp + 0x0006
	SCZO = cond(sp)
	// succ:  l0800_4150
l0800_4150:
	bp = Mem0[ss:sp:word16]
	sp = sp + 2
	return
	// succ:  fn0800_4110_exit
fn0800_4110_exit:


// fn0800_4152
// Return size: 2
define fn0800_4152
fn0800_4152_entry:
	// succ:  l0800_4152
l0800_4152:
	sp = fp
	Top = 0
	sp = sp - 2
	Mem0[ss:sp:word16] = bp
	bp = sp
	v5 = Mem0[ss:bp + 0x000E:word16]
	sp = sp - 2
	Mem0[ss:sp:word16] = v5
	v6 = Mem0[ss:bp + 0x000C:word16]
	sp = sp - 2
	Mem0[ss:sp:word16] = v6
	v7 = Mem0[ss:bp + 0x0008:word16]
	sp = sp - 2
	Mem0[ss:sp:word16] = v7
	ax = 0x0001
	sp = sp - 2
	Mem0[ss:sp:word16] = ax
	v9 = Mem0[ss:bp + 0x0006:word16]
	sp = sp - 2
	Mem0[ss:sp:word16] = v9
	v10 = Mem0[ss:bp + 0x0004:word16]
	sp = sp - 2
	Mem0[ss:sp:word16] = v10
	call fn0800_AD85 (retsize: 2;)
	sp = sp + 0x000C
	SCZO = cond(sp)
	dx = dx ^ dx
	SZO = cond(dx)
	C = false
	SCZO = cond(dx - Mem0[ss:bp + 0x000A:word16])
	branch Test(NE,Z) l0800_417A
	// succ:  l0800_4175 l0800_417A
l0800_4175:
	SCZO = cond(ax - Mem0[ss:bp + 0x0008:word16])
	branch Test(EQ,Z) l0800_4192
	// succ:  l0800_417A l0800_4192
l0800_417A:
	v16 = Mem0[ss:bp + 0x000E:word16]
	sp = sp - 2
	Mem0[ss:sp:word16] = v16
	v17 = Mem0[ss:bp + 0x000C:word16]
	sp = sp - 2
	Mem0[ss:sp:word16] = v17
	call fn0800_4271 (retsize: 2;)
	sp = sp + 0x0004
	SCZO = cond(sp)
	sp = sp - 2
	Mem0[ss:sp:word16] = dx
	sp = sp - 2
	Mem0[ss:sp:word16] = ax
	ax = 0x0009
	sp = sp - 2
	Mem0[ss:sp:word16] = ax
	call fn0800_0D24 (retsize: 2;)
	sp = sp + 0x0006
	SCZO = cond(sp)
	// succ:  l0800_4192
l0800_4192:
	bp = Mem0[ss:sp:word16]
	sp = sp + 2
	return
	// succ:  fn0800_4152_exit
fn0800_4152_exit:


// fn0800_4194
// Return size: 2
define fn0800_4194
fn0800_4194_entry:
	// succ:  l0800_4194
l0800_4194:
	sp = fp
	Top = 0
	sp = sp - 2
	Mem0[ss:sp:word16] = bp
	bp = sp
	sp = sp - 0x0008
	SCZO = cond(sp)
	v6 = Mem0[ss:bp + 0x0006:word16]
	sp = sp - 2
	Mem0[ss:sp:word16] = v6
	v7 = Mem0[ss:bp + 0x0004:word16]
	sp = sp - 2
	Mem0[ss:sp:word16] = v7
	call fn0800_AD2F (retsize: 2;)
	sp = sp + 0x0004
	SCZO = cond(sp)
	Mem0[ss:bp - 0x0002:word16] = dx
	Mem0[ss:bp - 0x0004:word16] = ax
	ax = 0x0002
	sp = sp - 2
	Mem0[ss:sp:word16] = ax
	ax = ax ^ ax
	SZO = cond(ax)
	C = false
	sp = sp - 2
	Mem0[ss:sp:word16] = ax
	sp = sp - 2
	Mem0[ss:sp:word16] = ax
	v12 = Mem0[ss:bp + 0x0006:word16]
	sp = sp - 2
	Mem0[ss:sp:word16] = v12
	v13 = Mem0[ss:bp + 0x0004:word16]
	sp = sp - 2
	Mem0[ss:sp:word16] = v13
	call fn0800_ACB3 (retsize: 2;)
	sp = sp + 0x000A
	SCZO = cond(sp)
	v14 = Mem0[ss:bp + 0x0006:word16]
	sp = sp - 2
	Mem0[ss:sp:word16] = v14
	v15 = Mem0[ss:bp + 0x0004:word16]
	sp = sp - 2
	Mem0[ss:sp:word16] = v15
	call fn0800_AD2F (retsize: 2;)
	sp = sp + 0x0004
	SCZO = cond(sp)
	Mem0[ss:bp - 0x0006:word16] = dx
	Mem0[ss:bp - 0x0008:word16] = ax
	ax = ax ^ ax
	SZO = cond(ax)
	C = false
	sp = sp - 2
	Mem0[ss:sp:word16] = ax
	v16 = Mem0[ss:bp - 0x0002:word16]
	sp = sp - 2
	Mem0[ss:sp:word16] = v16
	v17 = Mem0[ss:bp - 0x0004:word16]
	sp = sp - 2
	Mem0[ss:sp:word16] = v17
	v18 = Mem0[ss:bp + 0x0006:word16]
	sp = sp - 2
	Mem0[ss:sp:word16] = v18
	v19 = Mem0[ss:bp + 0x0004:word16]
	sp = sp - 2
	Mem0[ss:sp:word16] = v19
	call fn0800_ACB3 (retsize: 2;)
	sp = sp + 0x000A
	SCZO = cond(sp)
	dx = Mem0[ss:bp - 0x0006:word16]
	ax = Mem0[ss:bp - 0x0008:word16]
	sp = bp
	bp = Mem0[ss:sp:word16]
	sp = sp + 2
	return
	// succ:  fn0800_4194_exit
fn0800_4194_exit:


// fn0800_4234
// Return size: 2
define fn0800_4234
fn0800_4234_entry:
	// succ:  l0800_4234
l0800_4234:
	sp = fp
	Top = 0
	sp = sp - 2
	Mem0[ss:sp:word16] = bp
	bp = sp
	sp = sp - 0x0004
	SCZO = cond(sp)
	v6 = Mem0[ss:bp + 0x000A:word16]
	sp = sp - 2
	Mem0[ss:sp:word16] = v6
	v7 = Mem0[ss:bp + 0x0008:word16]
	sp = sp - 2
	Mem0[ss:sp:word16] = v7
	v8 = Mem0[ss:bp + 0x0006:word16]
	sp = sp - 2
	Mem0[ss:sp:word16] = v8
	v9 = Mem0[ss:bp + 0x0004:word16]
	sp = sp - 2
	Mem0[ss:sp:word16] = v9
	call fn0800_AA7E (retsize: 2;)
	sp = sp + 0x0008
	SCZO = cond(sp)
	Mem0[ss:bp - 0x0002:word16] = dx
	Mem0[ss:bp - 0x0004:word16] = ax
	ax = ax | Mem0[ss:bp - 0x0002:word16]
	SZO = cond(ax)
	C = false
	branch Test(NE,Z) l0800_4267
	// succ:  l0800_4257 l0800_4267
l0800_4257:
	v15 = Mem0[ss:bp + 0x0006:word16]
	sp = sp - 2
	Mem0[ss:sp:word16] = v15
	v16 = Mem0[ss:bp + 0x0004:word16]
	sp = sp - 2
	Mem0[ss:sp:word16] = v16
	ax = 0x0007
	sp = sp - 2
	Mem0[ss:sp:word16] = ax
	call fn0800_0D24 (retsize: 2;)
	sp = sp + 0x0006
	SCZO = cond(sp)
	// succ:  l0800_4267
l0800_4267:
	dx = Mem0[ss:bp - 0x0002:word16]
	ax = Mem0[ss:bp - 0x0004:word16]
	sp = bp
	bp = Mem0[ss:sp:word16]
	sp = sp + 2
	return
	// succ:  fn0800_4234_exit
fn0800_4234_exit:


// fn0800_4271
// Return size: 2
define fn0800_4271
fn0800_4271_entry:
	// succ:  l0800_4271
l0800_4271:
	sp = fp
	Top = 0
	sp = sp - 2
	Mem0[ss:sp:word16] = bp
	bp = sp
	ax = Mem0[ss:bp + 0x0006:word16]
	dx = Mem0[ss:bp + 0x0004:word16]
	SCZO = cond(ax - Mem0[ds:0x29E5:word16])
	branch Test(NE,Z) l0800_428D
	// succ:  l0800_4280 l0800_428D
l0800_4280:
	SCZO = cond(dx - Mem0[ds:0x29E3:word16])
	branch Test(NE,Z) l0800_428D
	// succ:  l0800_4286 l0800_428D
l0800_4286:
	dx = ds
	ax = 0x4541
	bp = Mem0[ss:sp:word16]
	sp = sp + 2
	return
	// succ:  fn0800_4271_exit
l0800_428D:
	ax = Mem0[ss:bp + 0x0006:word16]
	dx = Mem0[ss:bp + 0x0004:word16]
	SCZO = cond(ax - Mem0[ds:0x29E1:word16])
	branch Test(NE,Z) l0800_42A6
	// succ:  l0800_4299 l0800_42A6
l0800_4299:
	SCZO = cond(dx - Mem0[ds:0x29DF:word16])
	branch Test(NE,Z) l0800_42A6
	// succ:  l0800_429F l0800_42A6
l0800_429F:
	dx = ds
	ax = 0x44DC
	bp = Mem0[ss:sp:word16]
	sp = sp + 2
	return
	// succ:  fn0800_4271_exit
l0800_42A6:
	ax = Mem0[ss:bp + 0x0006:word16]
	dx = Mem0[ss:bp + 0x0004:word16]
	SCZO = cond(ax - Mem0[ds:0x29D1:word16])
	branch Test(NE,Z) l0800_42BF
	// succ:  l0800_42B2 l0800_42BF
l0800_42B2:
	SCZO = cond(dx - Mem0[ds:0x29CF:word16])
	branch Test(NE,Z) l0800_42BF
	// succ:  l0800_42B8 l0800_42BF
l0800_42B8:
	dx = ds
	ax = 0x4348
	bp = Mem0[ss:sp:word16]
	sp = sp + 2
	return
	// succ:  fn0800_4271_exit
l0800_42BF:
	ax = Mem0[ss:bp + 0x0006:word16]
	dx = Mem0[ss:bp + 0x0004:word16]
	SCZO = cond(ax - Mem0[ds:0x29DD:word16])
	branch Test(NE,Z) l0800_42D8
	// succ:  l0800_42CB l0800_42D8
l0800_42CB:
	SCZO = cond(dx - Mem0[ds:0x29DB:word16])
	branch Test(NE,Z) l0800_42D8
	// succ:  l0800_42D1 l0800_42D8
l0800_42D1:
	dx = ds
	ax = 0x4477
	bp = Mem0[ss:sp:word16]
	sp = sp + 2
	return
	// succ:  fn0800_4271_exit
l0800_42D8:
	ax = Mem0[ss:bp + 0x0006:word16]
	dx = Mem0[ss:bp + 0x0004:word16]
	SCZO = cond(ax - Mem0[ds:0x29D9:word16])
	branch Test(NE,Z) l0800_42F1
	// succ:  l0800_42E4 l0800_42F1
l0800_42E4:
	SCZO = cond(dx - Mem0[ds:0x29D7:word16])
	branch Test(NE,Z) l0800_42F1
	// succ:  l0800_42EA l0800_42F1
l0800_42EA:
	dx = ds
	ax = 0x4412
	bp = Mem0[ss:sp:word16]
	sp = sp + 2
	return
	// succ:  fn0800_4271_exit
l0800_42F1:
	ax = Mem0[ss:bp + 0x0006:word16]
	dx = Mem0[ss:bp + 0x0004:word16]
	SCZO = cond(ax - Mem0[ds:0x29D5:word16])
	branch Test(NE,Z) l0800_430A
	// succ:  l0800_42FD l0800_430A
l0800_42FD:
	SCZO = cond(dx - Mem0[ds:0x29D3:word16])
	branch Test(NE,Z) l0800_430A
	// succ:  l0800_4303 l0800_430A
l0800_4303:
	dx = ds
	ax = 0x43AD
	bp = Mem0[ss:sp:word16]
	sp = sp + 2
	return
	// succ:  fn0800_4271_exit
l0800_430A:
	dx = ds
	ax = 0x0A60
	bp = Mem0[ss:sp:word16]
	sp = sp + 2
	return
	// succ:  fn0800_4271_exit
fn0800_4271_exit:


// fn0800_4311
// Return size: 2
define fn0800_4311
fn0800_4311_entry:
	// succ:  l0800_4311
l0800_4311:
	sp = fp
	Top = 0
	sp = sp - 2
	Mem0[ss:sp:word16] = bp
	bp = sp
	sp = sp - 0x0004
	SCZO = cond(sp)
	v6 = Mem0[ss:bp + 0x0006:word16]
	sp = sp - 2
	Mem0[ss:sp:word16] = v6
	v7 = Mem0[ss:bp + 0x0004:word16]
	sp = sp - 2
	Mem0[ss:sp:word16] = v7
	call fn0800_9F89 (retsize: 2;)
	sp = sp + 0x0004
	SCZO = cond(sp)
	Mem0[ss:bp - 0x0002:word16] = dx
	Mem0[ss:bp - 0x0004:word16] = ax
	ax = ax | dx
	SZO = cond(ax)
	C = false
	branch Test(NE,Z) l0800_433C
	// succ:  l0800_432D l0800_433C
l0800_432D:
	sp = sp - 2
	Mem0[ss:sp:word16] = ds
	ax = 0x0A6C
	sp = sp - 2
	Mem0[ss:sp:word16] = ax
	ax = 0x0006
	sp = sp - 2
	Mem0[ss:sp:word16] = ax
	call fn0800_0D24 (retsize: 2;)
	sp = sp + 0x0006
	SCZO = cond(sp)
	// succ:  l0800_433C
l0800_433C:
	dx = Mem0[ss:bp - 0x0002:word16]
	ax = Mem0[ss:bp - 0x0004:word16]
	sp = bp
	bp = Mem0[ss:sp:word16]
	sp = sp + 2
	return
	// succ:  fn0800_4311_exit
fn0800_4311_exit:


// fn0800_4346
// Return size: 2
define fn0800_4346
fn0800_4346_entry:
	// succ:  l0800_4346
l0800_4346:
	sp = fp
	Top = 0
	sp = sp - 2
	Mem0[ss:sp:word16] = bp
	bp = sp
	v5 = Mem0[ss:bp + 0x0006:word16]
	sp = sp - 2
	Mem0[ss:sp:word16] = v5
	v6 = Mem0[ss:bp + 0x0004:word16]
	sp = sp - 2
	Mem0[ss:sp:word16] = v6
	call fn0800_9E75 (retsize: 2;)
	sp = sp + 0x0004
	SCZO = cond(sp)
	bp = Mem0[ss:sp:word16]
	sp = sp + 2
	return
	// succ:  fn0800_4346_exit
fn0800_4346_exit:


// fn0800_4357
// Return size: 2
define fn0800_4357
fn0800_4357_entry:
	// succ:  l0800_4357
l0800_4357:
	sp = fp
	Top = 0
	sp = sp - 2
	Mem0[ss:sp:word16] = bp
	bp = sp
	goto l0800_43B9
	// succ:  l0800_43B9
l0800_435C:
	es_bx = Mem0[ss:bp + 0x0008:segptr32]
	al = Mem0[es:bx:byte]
	dl = al
	ax = (int16) al
	SCZO = cond(ax - 0x002A)
	branch Test(EQ,Z) l0800_4379
	// succ:  l0800_436A l0800_4379
l0800_436A:
	SCZO = cond(ax - 0x002E)
	branch Test(EQ,Z) l0800_439E
	// succ:  l0800_436F l0800_439E
l0800_436F:
	SCZO = cond(ax - 0x003F)
	branch Test(EQ,Z) l0800_438A
	// succ:  l0800_4374 l0800_438A
l0800_4374:
	goto l0800_43A7
	// succ:  l0800_43A7
l0800_4376:
	v18 = Mem0[ss:bp + 0x0004:word16] + 0x0001
	Mem0[ss:bp + 0x0004:word16] = v18
	SZO = cond(v18)
	// succ:  l0800_4379
l0800_4379:
	es_bx = Mem0[ss:bp + 0x0004:segptr32]
	SCZO = cond(Mem0[es:bx:byte] - 0x2E)
	branch Test(EQ,Z) l0800_43B6
	// succ:  l0800_4382 l0800_43B6
l0800_4382:
	SCZO = cond(Mem0[es:bx:byte] - 0x00)
	branch Test(NE,Z) l0800_4376
	// succ:  l0800_4388 l0800_4376
l0800_4388:
	goto l0800_43B6
	// succ:  l0800_43B6
l0800_438A:
	es_bx = Mem0[ss:bp + 0x0004:segptr32]
	SCZO = cond(Mem0[es:bx:byte] - 0x2E)
	branch Test(EQ,Z) l0800_43B6
	// succ:  l0800_4393 l0800_43B6
l0800_4393:
	SCZO = cond(Mem0[es:bx:byte] - 0x00)
	branch Test(EQ,Z) l0800_43B6
	// succ:  l0800_4399 l0800_43B6
l0800_4399:
	v15 = Mem0[ss:bp + 0x0004:word16] + 0x0001
	Mem0[ss:bp + 0x0004:word16] = v15
	SZO = cond(v15)
	goto l0800_43B6
	// succ:  l0800_43B6
l0800_439E:
	es_bx = Mem0[ss:bp + 0x0004:segptr32]
	SCZO = cond(Mem0[es:bx:byte] - 0x00)
	branch Test(EQ,Z) l0800_43B6
	// succ:  l0800_43A7 l0800_43B6
l0800_43A7:
	es_bx = Mem0[ss:bp + 0x0004:segptr32]
	SCZO = cond(dl - Mem0[es:bx:byte])
	branch Test(EQ,Z) l0800_43B3
	// succ:  l0800_43AF l0800_43B3
l0800_43AF:
	ax = ax ^ ax
	SZO = cond(ax)
	C = false
	bp = Mem0[ss:sp:word16]
	sp = sp + 2
	return
	// succ:  fn0800_4357_exit
l0800_43B3:
	v16 = Mem0[ss:bp + 0x0004:word16] + 0x0001
	Mem0[ss:bp + 0x0004:word16] = v16
	SZO = cond(v16)
	// succ:  l0800_43B6
l0800_43B6:
	v17 = Mem0[ss:bp + 0x0008:word16] + 0x0001
	Mem0[ss:bp + 0x0008:word16] = v17
	SZO = cond(v17)
	// succ:  l0800_43B9
l0800_43B9:
	es_bx = Mem0[ss:bp + 0x0008:segptr32]
	SCZO = cond(Mem0[es:bx:byte] - 0x00)
	branch Test(NE,Z) l0800_435C
	// succ:  l0800_43C2 l0800_435C
l0800_43C2:
	es_bx = Mem0[ss:bp + 0x0004:segptr32]
	SCZO = cond(Mem0[es:bx:byte] - 0x00)
	branch Test(NE,Z) l0800_43D0
	// succ:  l0800_43CB l0800_43D0
l0800_43CB:
	ax = 0x0001
	goto l0800_43D2
	// succ:  l0800_43D2
l0800_43D0:
	ax = ax ^ ax
	SZO = cond(ax)
	C = false
	// succ:  l0800_43D2
l0800_43D2:
	bp = Mem0[ss:sp:word16]
	sp = sp + 2
	return
	// succ:  fn0800_4357_exit
fn0800_4357_exit:


// fn0800_43D4
// Return size: 2
define fn0800_43D4
fn0800_43D4_entry:
	// succ:  l0800_43D4
l0800_43D4:
	sp = fp
	Top = 0
	sp = sp - 2
	Mem0[ss:sp:word16] = bp
	bp = sp
	sp = sp - 2
	Mem0[ss:sp:word16] = si
	cx = Mem0[ss:bp + 0x0008:word16]
	si = Mem0[ss:bp + 0x0004:word16]
	ax = cx
	dx = 0x000C
	dx_ax = dx *s ax
	SCZO = cond(dx_ax)
	si = si + ax
	SCZO = cond(si)
	goto l0800_440F
	// succ:  l0800_440F
l0800_43E9:
	es = Mem0[ss:bp + 0x0006:selector]
	Mem0[es:si + 0x0002:word16] = 0x0000
	Mem0[es:si:word16] = 0x0000
	Mem0[es:si + 0x0004:word16] = 0xFFFF
	Mem0[es:si + 0x0008:word16] = 0x0000
	Mem0[es:si + 0x0006:word16] = 0x0000
	Mem0[es:si + 0x000A:word16] = 0x0000
	// succ:  l0800_440F
l0800_440F:
	si = si - 0x000C
	SCZO = cond(si)
	ax = cx
	cx = cx - 0x0001
	SZO = cond(cx)
	ax = ax | ax
	SZO = cond(ax)
	C = false
	branch Test(NE,Z) l0800_43E9
	// succ:  l0800_4419 l0800_43E9
l0800_4419:
	si = Mem0[ss:sp:word16]
	sp = sp + 2
	bp = Mem0[ss:sp:word16]
	sp = sp + 2
	return
	// succ:  fn0800_43D4_exit
fn0800_43D4_exit:


// fn0800_441C
// Return size: 2
define fn0800_441C
fn0800_441C_entry:
	// succ:  l0800_441C
l0800_441C:
	sp = fp
	Top = 0
	sp = sp - 2
	Mem0[ss:sp:word16] = bp
	bp = sp
	sp = sp - 0x0002
	SCZO = cond(sp)
	sp = sp - 2
	Mem0[ss:sp:word16] = si
	sp = sp - 2
	Mem0[ss:sp:word16] = di
	di = di ^ di
	SZO = cond(di)
	C = false
	cx = di
	si = Mem0[ss:bp + 0x0004:word16]
	ax = cx
	dx = 0x000C
	dx_ax = dx *s ax
	SCZO = cond(dx_ax)
	si = si + ax
	SCZO = cond(si)
	SCZO = cond(cx - Mem0[ss:bp + 0x0008:word16])
	branch Test(UGE,C) l0800_4452
	// succ:  l0800_4439 l0800_4452
l0800_4439:
	es = Mem0[ss:bp + 0x0006:selector]
	ax = Mem0[es:si:word16]
	ax = ax | Mem0[es:si + 0x0002:word16]
	SZO = cond(ax)
	C = false
	branch Test(EQ,Z) l0800_4449
	// succ:  l0800_4445 l0800_4449
l0800_4445:
	di = di + 0x0001
	SZO = cond(di)
	Mem0[ss:bp - 0x0002:word16] = cx
	// succ:  l0800_4449
l0800_4449:
	si = si + 0x000C
	SCZO = cond(si)
	cx = cx + 0x0001
	SZO = cond(cx)
	SCZO = cond(cx - Mem0[ss:bp + 0x0008:word16])
	branch Test(ULT,C) l0800_4439
	// succ:  l0800_4452 l0800_4439
l0800_4452:
	di = di | di
	SZO = cond(di)
	C = false
	branch Test(NE,Z) l0800_4459
	// succ:  l0800_4456 l0800_4459
l0800_4456:
	goto l0800_454A
	// succ:  l0800_454A
l0800_4459:
	SCZO = cond(di - 0x0001)
	branch Test(EQ,Z) l0800_4461
	// succ:  l0800_445E l0800_4461
l0800_445E:
	goto l0800_4525
	// succ:  l0800_4525
l0800_4461:
	ax = Mem0[ss:bp - 0x0002:word16]
	dx = 0x000C
	dx_ax = dx *s ax
	SCZO = cond(dx_ax)
	es_bx = Mem0[ss:bp + 0x0004:segptr32]
	bx = bx + ax
	SCZO = cond(bx)
	v18 = Mem0[es:bx + 0x000A:word16] + 0x0001
	Mem0[es:bx + 0x000A:word16] = v18
	SZO = cond(v18)
	di = Mem0[ss:sp:word16]
	sp = sp + 2
	si = Mem0[ss:sp:word16]
	sp = sp + 2
	sp = bp
	bp = Mem0[ss:sp:word16]
	sp = sp + 2
	return
	// succ:  fn0800_441C_exit
l0800_4478:
	ax = Mem0[ds:0x4658:word16]
	dx = 0x000C
	dx_ax = dx *s ax
	SCZO = cond(dx_ax)
	cx = ax
	es_bx = Mem0[ss:bp + 0x0004:segptr32]
	bx = bx + ax
	SCZO = cond(bx)
	ax = Mem0[es:bx + 0x0002:word16]
	dx = Mem0[es:bx:word16]
	sp = sp - 2
	Mem0[ss:sp:word16] = ax
	ax = Mem0[ds:0x465A:word16]
	bx = 0x000C
	sp = sp - 2
	Mem0[ss:sp:word16] = dx
	dx_ax = bx *s ax
	SCZO = cond(dx_ax)
	dx = ax
	bx = Mem0[ss:bp + 0x0004:word16]
	bx = bx + ax
	SCZO = cond(bx)
	ax = Mem0[ss:sp:word16]
	sp = sp + 2
	v23 = Mem0[es:bx:word16] + ax
	Mem0[es:bx:word16] = v23
	SCZO = cond(v23)
	ax = Mem0[ss:sp:word16]
	sp = sp + 2
	v24 = Mem0[es:bx + 0x0002:word16] + ax + C
	Mem0[es:bx + 0x0002:word16] = v24
	SCZO = cond(v24)
	bx = Mem0[ss:bp + 0x0004:word16]
	bx = bx + cx
	SCZO = cond(bx)
	Mem0[es:bx + 0x0002:word16] = 0x0000
	Mem0[es:bx:word16] = 0x0000
	bx = Mem0[ss:bp + 0x0004:word16]
	bx = bx + dx
	SCZO = cond(bx)
	v25 = Mem0[es:bx + 0x000A:word16] + 0x0001
	Mem0[es:bx + 0x000A:word16] = v25
	SZO = cond(v25)
	goto l0800_44DD
	// succ:  l0800_44DD
l0800_44C3:
	es = Mem0[ss:bp + 0x0006:selector]
	ax = Mem0[es:si + 0x0004:word16]
	Mem0[ds:0x465A:word16] = ax
	dx = 0x000C
	dx_ax = dx *s ax
	SCZO = cond(dx_ax)
	dx = ax
	bx = Mem0[ss:bp + 0x0004:word16]
	bx = bx + ax
	SCZO = cond(bx)
	v30 = Mem0[es:bx + 0x000A:word16] + 0x0001
	Mem0[es:bx + 0x000A:word16] = v30
	SZO = cond(v30)
	// succ:  l0800_44DD
l0800_44DD:
	es_bx = Mem0[ss:bp + 0x0004:segptr32]
	bx = bx + dx
	SCZO = cond(bx)
	si = bx
	SCZO = cond(Mem0[es:bx + 0x0004:word16] - 0xFFFF)
	branch Test(NE,Z) l0800_44C3
	// succ:  l0800_44EB l0800_44C3
l0800_44EB:
	ax = Mem0[ds:0x4658:word16]
	Mem0[es:si + 0x0004:word16] = ax
	bx = Mem0[ss:bp + 0x0004:word16]
	bx = bx + cx
	SCZO = cond(bx)
	v29 = Mem0[es:bx + 0x000A:word16] + 0x0001
	Mem0[es:bx + 0x000A:word16] = v29
	SZO = cond(v29)
	goto l0800_4517
	// succ:  l0800_4517
l0800_44FD:
	es = Mem0[ss:bp + 0x0006:selector]
	ax = Mem0[es:si + 0x0004:word16]
	Mem0[ds:0x4658:word16] = ax
	dx = 0x000C
	dx_ax = dx *s ax
	SCZO = cond(dx_ax)
	cx = ax
	bx = Mem0[ss:bp + 0x0004:word16]
	bx = bx + ax
	SCZO = cond(bx)
	v31 = Mem0[es:bx + 0x000A:word16] + 0x0001
	Mem0[es:bx + 0x000A:word16] = v31
	SZO = cond(v31)
	// succ:  l0800_4517
l0800_4517:
	es_bx = Mem0[ss:bp + 0x0004:segptr32]
	bx = bx + cx
	SCZO = cond(bx)
	si = bx
	SCZO = cond(Mem0[es:bx + 0x0004:word16] - 0xFFFF)
	branch Test(NE,Z) l0800_44FD
	// succ:  l0800_4525 l0800_44FD
l0800_4525:
	v19 = Mem0[ss:bp + 0x0008:word16]
	sp = sp - 2
	Mem0[ss:sp:word16] = v19
	v20 = Mem0[ss:bp + 0x0006:word16]
	sp = sp - 2
	Mem0[ss:sp:word16] = v20
	v21 = Mem0[ss:bp + 0x0004:word16]
	sp = sp - 2
	Mem0[ss:sp:word16] = v21
	call fn0800_463B (retsize: 2;)
	sp = sp + 0x0006
	SCZO = cond(sp)
	ax = ax | ax
	SZO = cond(ax)
	C = false
	branch Test(EQ,Z) l0800_453B
	// succ:  l0800_4538 l0800_453B
l0800_4538:
	goto l0800_4478
	// succ:  l0800_4478
l0800_453B:
	v26 = Mem0[ss:bp + 0x0008:word16]
	sp = sp - 2
	Mem0[ss:sp:word16] = v26
	v27 = Mem0[ss:bp + 0x0006:word16]
	sp = sp - 2
	Mem0[ss:sp:word16] = v27
	v28 = Mem0[ss:bp + 0x0004:word16]
	sp = sp - 2
	Mem0[ss:sp:word16] = v28
	call fn0800_4550 (retsize: 2;)
	sp = sp + 0x0006
	SCZO = cond(sp)
	// succ:  l0800_454A
l0800_454A:
	di = Mem0[ss:sp:word16]
	sp = sp + 2
	si = Mem0[ss:sp:word16]
	sp = sp + 2
	sp = bp
	bp = Mem0[ss:sp:word16]
	sp = sp + 2
	return
	// succ:  fn0800_441C_exit
fn0800_441C_exit:


// fn0800_4550
// Return size: 2
define fn0800_4550
fn0800_4550_entry:
	// succ:  l0800_4550
l0800_4550:
	sp = fp
	Top = 0
	sp = sp - 2
	Mem0[ss:sp:word16] = bp
	bp = sp
	sp = sp - 0x000A
	SCZO = cond(sp)
	sp = sp - 2
	Mem0[ss:sp:word16] = si
	sp = sp - 2
	Mem0[ss:sp:word16] = di
	Mem0[ss:bp - 0x0002:word16] = 0x0000
	Mem0[ss:bp - 0x0004:word16] = 0x0000
	Mem0[ss:bp - 0x0006:word16] = 0x8000
	Mem0[ss:bp - 0x0008:word16] = 0x0000
	Mem0[ss:bp - 0x000A:word16] = 0x0001
	goto l0800_45D6
	// succ:  l0800_45D6
l0800_4573:
	di = di ^ di
	SZO = cond(di)
	C = false
	si = Mem0[ss:bp + 0x0004:word16]
	SCZO = cond(di - Mem0[ss:bp + 0x0008:word16])
	branch Test(UGE,C) l0800_45C3
	// succ:  l0800_457D l0800_45C3
l0800_457D:
	es = Mem0[ss:bp + 0x0006:selector]
	ax = Mem0[es:si + 0x000A:word16]
	SCZO = cond(ax - Mem0[ss:bp - 0x000A:word16])
	branch Test(NE,Z) l0800_45BA
	// succ:  l0800_4589 l0800_45BA
l0800_4589:
	v14 = Mem0[ss:bp - 0x000A:word16]
	sp = sp - 2
	Mem0[ss:sp:word16] = v14
	v15 = Mem0[ss:bp - 0x0006:word16]
	sp = sp - 2
	Mem0[ss:sp:word16] = v15
	v16 = Mem0[ss:bp - 0x0008:word16]
	sp = sp - 2
	Mem0[ss:sp:word16] = v16
	v17 = Mem0[ss:bp - 0x0002:word16]
	sp = sp - 2
	Mem0[ss:sp:word16] = v17
	v18 = Mem0[ss:bp - 0x0004:word16]
	sp = sp - 2
	Mem0[ss:sp:word16] = v18
	call fn0800_8BC2 (retsize: 2;)
	sp = sp + 0x0008
	sp = sp - 2
	Mem0[ss:sp:word16] = dx
	sp = sp - 2
	Mem0[ss:sp:word16] = ax
	call fn0800_45E2 (retsize: 2;)
	sp = sp + 0x0006
	SCZO = cond(sp)
	es = Mem0[ss:bp + 0x0006:selector]
	Mem0[es:si + 0x0008:word16] = dx
	Mem0[es:si + 0x0006:word16] = ax
	ax = Mem0[ss:bp - 0x0006:word16]
	dx = Mem0[ss:bp - 0x0008:word16]
	v20 = Mem0[ss:bp - 0x0004:word16] + dx
	Mem0[ss:bp - 0x0004:word16] = v20
	SCZO = cond(v20)
	v21 = Mem0[ss:bp - 0x0002:word16] + ax + C
	Mem0[ss:bp - 0x0002:word16] = v21
	SCZO = cond(v21)
	// succ:  l0800_45BA
l0800_45BA:
	si = si + 0x000C
	SCZO = cond(si)
	di = di + 0x0001
	SZO = cond(di)
	SCZO = cond(di - Mem0[ss:bp + 0x0008:word16])
	branch Test(ULT,C) l0800_457D
	// succ:  l0800_45C3 l0800_457D
l0800_45C3:
	v22 = Mem0[ss:bp - 0x000A:word16] + 0x0001
	Mem0[ss:bp - 0x000A:word16] = v22
	SZO = cond(v22)
	ax = Mem0[ss:bp - 0x0006:word16]
	dx = Mem0[ss:bp - 0x0008:word16]
	ax = ax >>u 0x0001
	SCZO = cond(ax)
	v23 = (dx & 0x0001 << 0x01) != 0x0000
	dx = __rcr(dx, 0x01, C)
	C = v23
	Mem0[ss:bp - 0x0006:word16] = ax
	Mem0[ss:bp - 0x0008:word16] = dx
	// succ:  l0800_45D6
l0800_45D6:
	SCZO = cond(Mem0[ss:bp - 0x000A:word16] - 0x0010)
	branch Test(ULE,CZ) l0800_4573
	// succ:  l0800_45DC l0800_4573
l0800_45DC:
	di = Mem0[ss:sp:word16]
	sp = sp + 2
	si = Mem0[ss:sp:word16]
	sp = sp + 2
	sp = bp
	bp = Mem0[ss:sp:word16]
	sp = sp + 2
	return
	// succ:  fn0800_4550_exit
fn0800_4550_exit:


// fn0800_45E2
// Return size: 2
define fn0800_45E2
fn0800_45E2_entry:
	// succ:  l0800_45E2
l0800_45E2:
	sp = fp
	Top = 0
	sp = sp - 2
	Mem0[ss:sp:word16] = bp
	bp = sp
	sp = sp - 0x0004
	SCZO = cond(sp)
	bx = Mem0[ss:bp + 0x0008:word16]
	Mem0[ss:bp - 0x0002:word16] = 0x0000
	Mem0[ss:bp - 0x0004:word16] = 0x0000
	goto l0800_462A
	// succ:  l0800_462A
l0800_45F7:
	ax = Mem0[ss:bp - 0x0002:word16]
	dx = Mem0[ss:bp - 0x0004:word16]
	dx = dx << 0x0001
	SCZO = cond(dx)
	v12 = (ax & 0x0001 << 0x10 - 0x01) != 0x0000
	ax = __rcl(ax, 0x01, C)
	C = v12
	Mem0[ss:bp - 0x0002:word16] = ax
	Mem0[ss:bp - 0x0004:word16] = dx
	ax = Mem0[ss:bp + 0x0004:word16]
	ax = ax & 0x0001
	SZO = cond(ax)
	C = false
	ax = ax | 0x0000
	SZO = cond(ax)
	C = false
	branch Test(EQ,Z) l0800_461A
	// succ:  l0800_4612 l0800_461A
l0800_4612:
	v13 = Mem0[ss:bp - 0x0004:word16] | 0x0001
	Mem0[ss:bp - 0x0004:word16] = v13
	SZO = cond(Mem0[ss:bp - 0x0004:word16])
	C = false
	v14 = Mem0[ss:bp - 0x0002:word16] | 0x0000
	Mem0[ss:bp - 0x0002:word16] = v14
	SZO = cond(Mem0[ss:bp - 0x0002:word16])
	C = false
	// succ:  l0800_461A
l0800_461A:
	ax = Mem0[ss:bp + 0x0006:word16]
	dx = Mem0[ss:bp + 0x0004:word16]
	ax = ax >>u 0x0001
	SCZO = cond(ax)
	v15 = (dx & 0x0001 << 0x01) != 0x0000
	dx = __rcr(dx, 0x01, C)
	C = v15
	Mem0[ss:bp + 0x0006:word16] = ax
	Mem0[ss:bp + 0x0004:word16] = dx
	// succ:  l0800_462A
l0800_462A:
	ax = bx
	bx = bx - 0x0001
	SZO = cond(bx)
	ax = ax | ax
	SZO = cond(ax)
	C = false
	branch Test(NE,Z) l0800_45F7
	// succ:  l0800_4631 l0800_45F7
l0800_4631:
	dx = Mem0[ss:bp - 0x0002:word16]
	ax = Mem0[ss:bp - 0x0004:word16]
	sp = bp
	bp = Mem0[ss:sp:word16]
	sp = sp + 2
	return
	// succ:  fn0800_45E2_exit
fn0800_45E2_exit:


// fn0800_463B
// Return size: 2
define fn0800_463B
fn0800_463B_entry:
	// succ:  l0800_463B
l0800_463B:
	sp = fp
	Top = 0
	sp = sp - 2
	Mem0[ss:sp:word16] = bp
	bp = sp
	sp = sp - 0x000C
	SCZO = cond(sp)
	sp = sp - 2
	Mem0[ss:sp:word16] = si
	sp = sp - 2
	Mem0[ss:sp:word16] = di
	di = Mem0[ss:bp + 0x0008:word16]
	ax = 0xFFFF
	dx = 0xFFFF
	Mem0[ss:bp - 0x000A:word16] = ax
	Mem0[ss:bp - 0x000C:word16] = dx
	Mem0[ss:bp - 0x0006:word16] = ax
	Mem0[ss:bp - 0x0008:word16] = dx
	cx = cx ^ cx
	SZO = cond(cx)
	C = false
	si = Mem0[ss:bp + 0x0004:word16]
	SCZO = cond(cx - di)
	branch Test(UGE,C) l0800_46D5
	// succ:  l0800_4661 l0800_46D5
l0800_4661:
	es = Mem0[ss:bp + 0x0006:selector]
	ax = Mem0[es:si + 0x0002:word16]
	dx = Mem0[es:si:word16]
	Mem0[ss:bp - 0x0002:word16] = ax
	Mem0[ss:bp - 0x0004:word16] = dx
	dx = dx | ax
	SZO = cond(dx)
	C = false
	branch Test(EQ,Z) l0800_46CD
	// succ:  l0800_4675 l0800_46CD
l0800_4675:
	ax = Mem0[ss:bp - 0x0002:word16]
	dx = Mem0[ss:bp - 0x0004:word16]
	SCZO = cond(ax - Mem0[ss:bp - 0x0006:word16])
	branch Test(UGT,CZ) l0800_46AB
	// succ:  l0800_4680 l0800_46AB
l0800_4680:
	branch Test(ULT,C) l0800_4687
	// succ:  l0800_4682 l0800_4687
l0800_4682:
	SCZO = cond(dx - Mem0[ss:bp - 0x0008:word16])
	branch Test(UGE,C) l0800_46AB
	// succ:  l0800_4687 l0800_46AB
l0800_4687:
	ax = Mem0[ss:bp - 0x0006:word16]
	dx = Mem0[ss:bp - 0x0008:word16]
	Mem0[ss:bp - 0x000A:word16] = ax
	Mem0[ss:bp - 0x000C:word16] = dx
	ax = Mem0[ds:0x465A:word16]
	Mem0[ds:0x4658:word16] = ax
	ax = Mem0[ss:bp - 0x0002:word16]
	dx = Mem0[ss:bp - 0x0004:word16]
	Mem0[ss:bp - 0x0006:word16] = ax
	Mem0[ss:bp - 0x0008:word16] = dx
	Mem0[ds:0x465A:word16] = cx
	goto l0800_46CD
	// succ:  l0800_46CD
l0800_46AB:
	ax = Mem0[ss:bp - 0x0002:word16]
	dx = Mem0[ss:bp - 0x0004:word16]
	SCZO = cond(ax - Mem0[ss:bp - 0x000A:word16])
	branch Test(UGT,CZ) l0800_46CD
	// succ:  l0800_46B6 l0800_46CD
l0800_46B6:
	branch Test(ULT,C) l0800_46BD
	// succ:  l0800_46B8 l0800_46BD
l0800_46B8:
	SCZO = cond(dx - Mem0[ss:bp - 0x000C:word16])
	branch Test(UGE,C) l0800_46CD
	// succ:  l0800_46BD l0800_46CD
l0800_46BD:
	ax = Mem0[ss:bp - 0x0002:word16]
	dx = Mem0[ss:bp - 0x0004:word16]
	Mem0[ss:bp - 0x000A:word16] = ax
	Mem0[ss:bp - 0x000C:word16] = dx
	Mem0[ds:0x4658:word16] = cx
	// succ:  l0800_46CD
l0800_46CD:
	si = si + 0x000C
	SCZO = cond(si)
	cx = cx + 0x0001
	SZO = cond(cx)
	SCZO = cond(cx - di)
	branch Test(ULT,C) l0800_4661
	// succ:  l0800_46D5 l0800_4661
l0800_46D5:
	SCZO = cond(Mem0[ss:bp - 0x0006:word16] - 0xFFFF)
	branch Test(NE,Z) l0800_46E1
	// succ:  l0800_46DB l0800_46E1
l0800_46DB:
	SCZO = cond(Mem0[ss:bp - 0x0008:word16] - 0xFFFF)
	branch Test(EQ,Z) l0800_46ED
	// succ:  l0800_46E1 l0800_46ED
l0800_46E1:
	SCZO = cond(Mem0[ss:bp - 0x000A:word16] - 0xFFFF)
	branch Test(NE,Z) l0800_46F5
	// succ:  l0800_46E7 l0800_46F5
l0800_46E7:
	SCZO = cond(Mem0[ss:bp - 0x000C:word16] - 0xFFFF)
	branch Test(NE,Z) l0800_46F5
	// succ:  l0800_46ED l0800_46F5
l0800_46ED:
	ax = ax ^ ax
	SZO = cond(ax)
	C = false
	di = Mem0[ss:sp:word16]
	sp = sp + 2
	si = Mem0[ss:sp:word16]
	sp = sp + 2
	sp = bp
	bp = Mem0[ss:sp:word16]
	sp = sp + 2
	return
	// succ:  fn0800_463B_exit
l0800_46F5:
	ax = 0x0001
	di = Mem0[ss:sp:word16]
	sp = sp + 2
	si = Mem0[ss:sp:word16]
	sp = sp + 2
	sp = bp
	bp = Mem0[ss:sp:word16]
	sp = sp + 2
	return
	// succ:  fn0800_463B_exit
fn0800_463B_exit:


// fn0800_46FE
// Return size: 2
define fn0800_46FE
fn0800_46FE_entry:
	// succ:  l0800_46FE
l0800_46FE:
	sp = fp
	Top = 0
	sp = sp - 2
	Mem0[ss:sp:word16] = bp
	bp = sp
	sp = sp - 0x0020
	SCZO = cond(sp)
	sp = sp - 2
	Mem0[ss:sp:word16] = si
	sp = sp - 2
	Mem0[ss:sp:word16] = di
	SCZO = cond(Mem0[ds:0x2A05:word16] - 0x0000)
	branch Test(UGT,CZ) l0800_471F
	// succ:  l0800_470D l0800_471F
l0800_470D:
	branch Test(ULT,C) l0800_4716
	// succ:  l0800_470F l0800_4716
l0800_470F:
	SCZO = cond(Mem0[ds:0x2A03:word16] - 0x002A)
	branch Test(UGE,C) l0800_471F
	// succ:  l0800_4716 l0800_471F
l0800_4716:
	ax = 0x0007
	di = Mem0[ss:sp:word16]
	sp = sp + 2
	si = Mem0[ss:sp:word16]
	sp = sp + 2
	sp = bp
	bp = Mem0[ss:sp:word16]
	sp = sp + 2
	return
	// succ:  fn0800_46FE_exit
l0800_471F:
	ax = ax ^ ax
	SZO = cond(ax)
	C = false
	sp = sp - 2
	Mem0[ss:sp:word16] = ax
	dx = 0x0028
	sp = sp - 2
	Mem0[ss:sp:word16] = ax
	sp = sp - 2
	Mem0[ss:sp:word16] = dx
	v14 = Mem0[ds:0x29E5:word16]
	sp = sp - 2
	Mem0[ss:sp:word16] = v14
	v15 = Mem0[ds:0x29E3:word16]
	sp = sp - 2
	Mem0[ss:sp:word16] = v15
	call fn0800_ACB3 (retsize: 2;)
	sp = sp + 0x000A
	SCZO = cond(sp)
	v16 = Mem0[ds:0x29E5:word16]
	sp = sp - 2
	Mem0[ss:sp:word16] = v16
	v17 = Mem0[ds:0x29E3:word16]
	sp = sp - 2
	Mem0[ss:sp:word16] = v17
	call fn0800_3FAD (retsize: 2;)
	sp = sp + 0x0004
	SCZO = cond(sp)
	di = ax
	ax = ax + 0x0024
	SCZO = cond(ax)
	dx = dx ^ dx
	SZO = cond(dx)
	C = false
	SCZO = cond(dx - Mem0[ds:0x2A05:word16])
	branch Test(ULT,C) l0800_4761
	// succ:  l0800_4750 l0800_4761
l0800_4750:
	branch Test(UGT,CZ) l0800_4758
	// succ:  l0800_4752 l0800_4758
l0800_4752:
	SCZO = cond(ax - Mem0[ds:0x2A03:word16])
	branch Test(ULE,CZ) l0800_4761
	// succ:  l0800_4758 l0800_4761
l0800_4758:
	ax = 0x0007
	di = Mem0[ss:sp:word16]
	sp = sp + 2
	si = Mem0[ss:sp:word16]
	sp = sp + 2
	sp = bp
	bp = Mem0[ss:sp:word16]
	sp = sp + 2
	return
	// succ:  fn0800_46FE_exit
l0800_4761:
	ax = ax ^ ax
	SZO = cond(ax)
	C = false
	sp = sp - 2
	Mem0[ss:sp:word16] = ax
	ax = di
	ax = ax + 0x0020
	SCZO = cond(ax)
	dx = dx ^ dx
	SZO = cond(dx)
	C = false
	sp = sp - 2
	Mem0[ss:sp:word16] = dx
	sp = sp - 2
	Mem0[ss:sp:word16] = ax
	v18 = Mem0[ds:0x29E5:word16]
	sp = sp - 2
	Mem0[ss:sp:word16] = v18
	v19 = Mem0[ds:0x29E3:word16]
	sp = sp - 2
	Mem0[ss:sp:word16] = v19
	call fn0800_ACB3 (retsize: 2;)
	sp = sp + 0x000A
	SCZO = cond(sp)
	v20 = Mem0[ds:0x29E5:word16]
	sp = sp - 2
	Mem0[ss:sp:word16] = v20
	v21 = Mem0[ds:0x29E3:word16]
	sp = sp - 2
	Mem0[ss:sp:word16] = v21
	call fn0800_3F58 (retsize: 2;)
	sp = sp + 0x0004
	SCZO = cond(sp)
	cl = 0x08
	call fn0800_8CAA (retsize: 2;)
	SCZO = cond(dx - 0x0052)
	branch Test(NE,Z) l0800_4798
	// succ:  l0800_4793 l0800_4798
l0800_4793:
	SCZO = cond(ax - 0x4E43)
	branch Test(EQ,Z) l0800_47A1
	// succ:  l0800_4798 l0800_47A1
l0800_4798:
	ax = 0x0007
	di = Mem0[ss:sp:word16]
	sp = sp + 2
	si = Mem0[ss:sp:word16]
	sp = sp + 2
	sp = bp
	bp = Mem0[ss:sp:word16]
	sp = sp + 2
	return
	// succ:  fn0800_46FE_exit
l0800_47A1:
	v24 = Mem0[ds:0x29E5:word16]
	sp = sp - 2
	Mem0[ss:sp:word16] = v24
	v25 = Mem0[ds:0x29E3:word16]
	sp = sp - 2
	Mem0[ss:sp:word16] = v25
	call fn0800_AD2F (retsize: 2;)
	sp = sp + 0x0004
	SCZO = cond(sp)
	Mem0[ss:bp - 0x0006:word16] = dx
	Mem0[ss:bp - 0x0008:word16] = ax
	ax = ax ^ ax
	SZO = cond(ax)
	C = false
	sp = sp - 2
	Mem0[ss:sp:word16] = ax
	dx = 0x0002
	sp = sp - 2
	Mem0[ss:sp:word16] = ax
	sp = sp - 2
	Mem0[ss:sp:word16] = dx
	v26 = Mem0[ds:0x29E5:word16]
	sp = sp - 2
	Mem0[ss:sp:word16] = v26
	v27 = Mem0[ds:0x29E3:word16]
	sp = sp - 2
	Mem0[ss:sp:word16] = v27
	call fn0800_ACB3 (retsize: 2;)
	sp = sp + 0x000A
	SCZO = cond(sp)
	v28 = Mem0[ds:0x29E5:word16]
	sp = sp - 2
	Mem0[ss:sp:word16] = v28
	v29 = Mem0[ds:0x29E3:word16]
	sp = sp - 2
	Mem0[ss:sp:word16] = v29
	call fn0800_3FAD (retsize: 2;)
	sp = sp + 0x0004
	SCZO = cond(sp)
	di = ax
	v30 = Mem0[ds:0x29E5:word16]
	sp = sp - 2
	Mem0[ss:sp:word16] = v30
	v31 = Mem0[ds:0x29E3:word16]
	sp = sp - 2
	Mem0[ss:sp:word16] = v31
	call fn0800_3FAD (retsize: 2;)
	sp = sp + 0x0004
	SCZO = cond(sp)
	Mem0[ss:bp - 0x000A:word16] = ax
	di = di | di
	SZO = cond(di)
	C = false
	branch Test(EQ,Z) l0800_47F3
	// succ:  l0800_47F0 l0800_47F3
l0800_47F0:
	v32 = Mem0[ss:bp - 0x000A:word16] - 0x0001
	Mem0[ss:bp - 0x000A:word16] = v32
	SZO = cond(v32)
	// succ:  l0800_47F3
l0800_47F3:
	ax = Mem0[ss:bp - 0x000A:word16]
	dx = dx ^ dx
	SZO = cond(dx)
	C = false
	cl = 0x09
	call fn0800_8C69 (retsize: 2;)
	ax = ax + di
	SCZO = cond(ax)
	dx = dx + 0x00 + C
	SCZO = cond(dx)
	Mem0[ss:bp - 0x0002:word16] = dx
	Mem0[ss:bp - 0x0004:word16] = ax
	ax = ax ^ ax
	SZO = cond(ax)
	C = false
	sp = sp - 2
	Mem0[ss:sp:word16] = ax
	dx = 0x0016
	sp = sp - 2
	Mem0[ss:sp:word16] = ax
	sp = sp - 2
	Mem0[ss:sp:word16] = dx
	v33 = Mem0[ds:0x29E5:word16]
	sp = sp - 2
	Mem0[ss:sp:word16] = v33
	v34 = Mem0[ds:0x29E3:word16]
	sp = sp - 2
	Mem0[ss:sp:word16] = v34
	call fn0800_ACB3 (retsize: 2;)
	sp = sp + 0x000A
	SCZO = cond(sp)
	v35 = Mem0[ds:0x29E5:word16]
	sp = sp - 2
	Mem0[ss:sp:word16] = v35
	v36 = Mem0[ds:0x29E3:word16]
	sp = sp - 2
	Mem0[ss:sp:word16] = v36
	call fn0800_3FAD (retsize: 2;)
	sp = sp + 0x0004
	SCZO = cond(sp)
	v37 = Mem0[ds:0x29E5:word16]
	sp = sp - 2
	Mem0[ss:sp:word16] = v37
	v38 = Mem0[ds:0x29E3:word16]
	sp = sp - 2
	Mem0[ss:sp:word16] = v38
	call fn0800_3FAD (retsize: 2;)
	sp = sp + 0x0004
	SCZO = cond(sp)
	Mem0[ss:bp - 0x001C:word16] = ax
	v39 = Mem0[ds:0x29E5:word16]
	sp = sp - 2
	Mem0[ss:sp:word16] = v39
	v40 = Mem0[ds:0x29E3:word16]
	sp = sp - 2
	Mem0[ss:sp:word16] = v40
	call fn0800_3FAD (retsize: 2;)
	sp = sp + 0x0004
	SCZO = cond(sp)
	Mem0[ss:bp - 0x001E:word16] = ax
	v41 = Mem0[ds:0x29E5:word16]
	sp = sp - 2
	Mem0[ss:sp:word16] = v41
	v42 = Mem0[ds:0x29E3:word16]
	sp = sp - 2
	Mem0[ss:sp:word16] = v42
	call fn0800_3FAD (retsize: 2;)
	sp = sp + 0x0004
	SCZO = cond(sp)
	Mem0[ss:bp - 0x0010:word16] = ax
	v43 = Mem0[ds:0x29E5:word16]
	sp = sp - 2
	Mem0[ss:sp:word16] = v43
	v44 = Mem0[ds:0x29E3:word16]
	sp = sp - 2
	Mem0[ss:sp:word16] = v44
	call fn0800_3FAD (retsize: 2;)
	sp = sp + 0x0004
	SCZO = cond(sp)
	Mem0[ss:bp - 0x0012:word16] = ax
	v45 = Mem0[ds:0x29E5:word16]
	sp = sp - 2
	Mem0[ss:sp:word16] = v45
	v46 = Mem0[ds:0x29E3:word16]
	sp = sp - 2
	Mem0[ss:sp:word16] = v46
	call fn0800_3FAD (retsize: 2;)
	sp = sp + 0x0004
	SCZO = cond(sp)
	Mem0[ss:bp - 0x0018:word16] = ax
	v47 = Mem0[ds:0x29E5:word16]
	sp = sp - 2
	Mem0[ss:sp:word16] = v47
	v48 = Mem0[ds:0x29E3:word16]
	sp = sp - 2
	Mem0[ss:sp:word16] = v48
	call fn0800_3FAD (retsize: 2;)
	sp = sp + 0x0004
	SCZO = cond(sp)
	Mem0[ss:bp - 0x001A:word16] = ax
	v49 = Mem0[ds:0x29E5:word16]
	sp = sp - 2
	Mem0[ss:sp:word16] = v49
	v50 = Mem0[ds:0x29E3:word16]
	sp = sp - 2
	Mem0[ss:sp:word16] = v50
	call fn0800_3FAD (retsize: 2;)
	sp = sp + 0x0004
	SCZO = cond(sp)
	Mem0[ss:bp - 0x0016:word16] = ax
	v51 = Mem0[ds:0x29E5:word16]
	sp = sp - 2
	Mem0[ss:sp:word16] = v51
	v52 = Mem0[ds:0x29E3:word16]
	sp = sp - 2
	Mem0[ss:sp:word16] = v52
	call fn0800_3FAD (retsize: 2;)
	sp = sp + 0x0004
	SCZO = cond(sp)
	Mem0[ss:bp - 0x0014:word16] = ax
	v53 = Mem0[ds:0x29E1:word16]
	sp = sp - 2
	Mem0[ss:sp:word16] = v53
	v54 = Mem0[ds:0x29DF:word16]
	sp = sp - 2
	Mem0[ss:sp:word16] = v54
	ax = 0x4D5A
	sp = sp - 2
	Mem0[ss:sp:word16] = ax
	call fn0800_401E (retsize: 2;)
	sp = sp + 0x0006
	SCZO = cond(sp)
	v55 = Mem0[ds:0x29E1:word16]
	sp = sp - 2
	Mem0[ss:sp:word16] = v55
	v56 = Mem0[ds:0x29DF:word16]
	sp = sp - 2
	Mem0[ss:sp:word16] = v56
	ax = ax ^ ax
	SZO = cond(ax)
	C = false
	sp = sp - 2
	Mem0[ss:sp:word16] = ax
	sp = sp - 2
	Mem0[ss:sp:word16] = ax
	call fn0800_409C (retsize: 2;)
	sp = sp + 0x0008
	SCZO = cond(sp)
	v57 = Mem0[ds:0x29E1:word16]
	sp = sp - 2
	Mem0[ss:sp:word16] = v57
	v58 = Mem0[ds:0x29DF:word16]
	sp = sp - 2
	Mem0[ss:sp:word16] = v58
	ax = ax ^ ax
	SZO = cond(ax)
	C = false
	sp = sp - 2
	Mem0[ss:sp:word16] = ax
	sp = sp - 2
	Mem0[ss:sp:word16] = ax
	call fn0800_409C (retsize: 2;)
	sp = sp + 0x0008
	SCZO = cond(sp)
	v59 = Mem0[ds:0x29E1:word16]
	sp = sp - 2
	Mem0[ss:sp:word16] = v59
	v60 = Mem0[ds:0x29DF:word16]
	sp = sp - 2
	Mem0[ss:sp:word16] = v60
	v61 = Mem0[ss:bp - 0x0010:word16]
	sp = sp - 2
	Mem0[ss:sp:word16] = v61
	call fn0800_40BF (retsize: 2;)
	sp = sp + 0x0006
	SCZO = cond(sp)
	v62 = Mem0[ds:0x29E1:word16]
	sp = sp - 2
	Mem0[ss:sp:word16] = v62
	v63 = Mem0[ds:0x29DF:word16]
	sp = sp - 2
	Mem0[ss:sp:word16] = v63
	v64 = Mem0[ss:bp - 0x0012:word16]
	sp = sp - 2
	Mem0[ss:sp:word16] = v64
	call fn0800_40BF (retsize: 2;)
	sp = sp + 0x0006
	SCZO = cond(sp)
	v65 = Mem0[ds:0x29E1:word16]
	sp = sp - 2
	Mem0[ss:sp:word16] = v65
	v66 = Mem0[ds:0x29DF:word16]
	sp = sp - 2
	Mem0[ss:sp:word16] = v66
	v67 = Mem0[ss:bp - 0x0014:word16]
	sp = sp - 2
	Mem0[ss:sp:word16] = v67
	call fn0800_40BF (retsize: 2;)
	sp = sp + 0x0006
	SCZO = cond(sp)
	v68 = Mem0[ds:0x29E1:word16]
	sp = sp - 2
	Mem0[ss:sp:word16] = v68
	v69 = Mem0[ds:0x29DF:word16]
	sp = sp - 2
	Mem0[ss:sp:word16] = v69
	v70 = Mem0[ss:bp - 0x0016:word16]
	sp = sp - 2
	Mem0[ss:sp:word16] = v70
	call fn0800_40BF (retsize: 2;)
	sp = sp + 0x0006
	SCZO = cond(sp)
	v71 = Mem0[ds:0x29E1:word16]
	sp = sp - 2
	Mem0[ss:sp:word16] = v71
	v72 = Mem0[ds:0x29DF:word16]
	sp = sp - 2
	Mem0[ss:sp:word16] = v72
	ax = ax ^ ax
	SZO = cond(ax)
	C = false
	sp = sp - 2
	Mem0[ss:sp:word16] = ax
	call fn0800_401E (retsize: 2;)
	sp = sp + 0x0006
	SCZO = cond(sp)
	v73 = Mem0[ds:0x29E1:word16]
	sp = sp - 2
	Mem0[ss:sp:word16] = v73
	v74 = Mem0[ds:0x29DF:word16]
	sp = sp - 2
	Mem0[ss:sp:word16] = v74
	v75 = Mem0[ss:bp - 0x0018:word16]
	sp = sp - 2
	Mem0[ss:sp:word16] = v75
	call fn0800_40BF (retsize: 2;)
	sp = sp + 0x0006
	SCZO = cond(sp)
	v76 = Mem0[ds:0x29E1:word16]
	sp = sp - 2
	Mem0[ss:sp:word16] = v76
	v77 = Mem0[ds:0x29DF:word16]
	sp = sp - 2
	Mem0[ss:sp:word16] = v77
	v78 = Mem0[ss:bp - 0x001A:word16]
	sp = sp - 2
	Mem0[ss:sp:word16] = v78
	call fn0800_40BF (retsize: 2;)
	sp = sp + 0x0006
	SCZO = cond(sp)
	v79 = Mem0[ds:0x29E1:word16]
	sp = sp - 2
	Mem0[ss:sp:word16] = v79
	v80 = Mem0[ds:0x29DF:word16]
	sp = sp - 2
	Mem0[ss:sp:word16] = v80
	ax = 0x001E
	sp = sp - 2
	Mem0[ss:sp:word16] = ax
	call fn0800_40BF (retsize: 2;)
	sp = sp + 0x0006
	SCZO = cond(sp)
	v81 = Mem0[ds:0x29E1:word16]
	sp = sp - 2
	Mem0[ss:sp:word16] = v81
	v82 = Mem0[ds:0x29DF:word16]
	sp = sp - 2
	Mem0[ss:sp:word16] = v82
	v83 = Mem0[ss:bp - 0x001E:word16]
	sp = sp - 2
	Mem0[ss:sp:word16] = v83
	call fn0800_40BF (retsize: 2;)
	sp = sp + 0x0006
	SCZO = cond(sp)
	v84 = Mem0[ds:0x29E1:word16]
	sp = sp - 2
	Mem0[ss:sp:word16] = v84
	v85 = Mem0[ds:0x29DF:word16]
	sp = sp - 2
	Mem0[ss:sp:word16] = v85
	ax = ax ^ ax
	SZO = cond(ax)
	C = false
	sp = sp - 2
	Mem0[ss:sp:word16] = ax
	call fn0800_401E (retsize: 2;)
	sp = sp + 0x0006
	SCZO = cond(sp)
	ax = ax ^ ax
	SZO = cond(ax)
	C = false
	sp = sp - 2
	Mem0[ss:sp:word16] = ax
	ax = Mem0[ss:bp - 0x001C:word16]
	ax = ax + 0x0020
	SCZO = cond(ax)
	dx = dx ^ dx
	SZO = cond(dx)
	C = false
	sp = sp - 2
	Mem0[ss:sp:word16] = dx
	sp = sp - 2
	Mem0[ss:sp:word16] = ax
	v86 = Mem0[ds:0x29E5:word16]
	sp = sp - 2
	Mem0[ss:sp:word16] = v86
	v87 = Mem0[ds:0x29E3:word16]
	sp = sp - 2
	Mem0[ss:sp:word16] = v87
	call fn0800_ACB3 (retsize: 2;)
	sp = sp + 0x000A
	SCZO = cond(sp)
	Mem0[ss:bp - 0x000C:word16] = 0x0000
	// succ:  l0800_49B5
l0800_49B5:
	v88 = Mem0[ds:0x29E5:word16]
	sp = sp - 2
	Mem0[ss:sp:word16] = v88
	v89 = Mem0[ds:0x29E3:word16]
	sp = sp - 2
	Mem0[ss:sp:word16] = v89
	call fn0800_3DCF (retsize: 2;)
	sp = sp + 0x0004
	SCZO = cond(sp)
	ah = 0x00
	di = ax
	di = di | di
	SZO = cond(di)
	C = false
	branch Test(EQ,Z) l0800_4A22
	// succ:  l0800_49CB l0800_4A22
l0800_49CB:
	v91 = Mem0[ds:0x29E5:word16]
	sp = sp - 2
	Mem0[ss:sp:word16] = v91
	v92 = Mem0[ds:0x29E3:word16]
	sp = sp - 2
	Mem0[ss:sp:word16] = v92
	call fn0800_3FAD (retsize: 2;)
	sp = sp + 0x0004
	SCZO = cond(sp)
	Mem0[ss:bp - 0x0020:word16] = ax
	si = si ^ si
	SZO = cond(si)
	C = false
	Mem0[ss:bp - 0x000A:word16] = di
	goto l0800_4A15
	// succ:  l0800_4A15
l0800_49E3:
	v100 = Mem0[ds:0x29E5:word16]
	sp = sp - 2
	Mem0[ss:sp:word16] = v100
	v101 = Mem0[ds:0x29E3:word16]
	sp = sp - 2
	Mem0[ss:sp:word16] = v101
	call fn0800_3DCF (retsize: 2;)
	sp = sp + 0x0004
	SCZO = cond(sp)
	ah = 0x00
	si = si + ax
	SCZO = cond(si)
	v102 = Mem0[ds:0x29E1:word16]
	sp = sp - 2
	Mem0[ss:sp:word16] = v102
	v103 = Mem0[ds:0x29DF:word16]
	sp = sp - 2
	Mem0[ss:sp:word16] = v103
	sp = sp - 2
	Mem0[ss:sp:word16] = si
	call fn0800_40BF (retsize: 2;)
	sp = sp + 0x0006
	SCZO = cond(sp)
	v104 = Mem0[ds:0x29E1:word16]
	sp = sp - 2
	Mem0[ss:sp:word16] = v104
	v105 = Mem0[ds:0x29DF:word16]
	sp = sp - 2
	Mem0[ss:sp:word16] = v105
	v106 = Mem0[ss:bp - 0x0020:word16]
	sp = sp - 2
	Mem0[ss:sp:word16] = v106
	call fn0800_40BF (retsize: 2;)
	sp = sp + 0x0006
	SCZO = cond(sp)
	// succ:  l0800_4A15
l0800_4A15:
	ax = Mem0[ss:bp - 0x000A:word16]
	v93 = Mem0[ss:bp - 0x000A:word16] - 0x0001
	Mem0[ss:bp - 0x000A:word16] = v93
	SZO = cond(v93)
	ax = ax | ax
	SZO = cond(ax)
	C = false
	branch Test(NE,Z) l0800_49E3
	// succ:  l0800_4A1F l0800_49E3
l0800_4A1F:
	v94 = Mem0[ss:bp - 0x000C:word16] + di
	Mem0[ss:bp - 0x000C:word16] = v94
	SCZO = cond(v94)
	// succ:  l0800_4A22
l0800_4A22:
	di = di | di
	SZO = cond(di)
	C = false
	branch Test(NE,Z) l0800_49B5
	// succ:  l0800_4A26 l0800_49B5
l0800_4A26:
	v95 = Mem0[ds:0x29E1:word16]
	sp = sp - 2
	Mem0[ss:sp:word16] = v95
	v96 = Mem0[ds:0x29DF:word16]
	sp = sp - 2
	Mem0[ss:sp:word16] = v96
	call fn0800_AD2F (retsize: 2;)
	sp = sp + 0x0004
	SCZO = cond(sp)
	dx = dx | dx
	SZO = cond(dx)
	C = false
	branch Test(GT,SZO) l0800_4A56
	// succ:  l0800_4A38 l0800_4A56
l0800_4A38:
	branch Test(LT,SO) l0800_4A3F
	// succ:  l0800_4A3A l0800_4A3F
l0800_4A3A:
	SCZO = cond(ax - 0x0200)
	branch Test(UGE,C) l0800_4A56
	// succ:  l0800_4A3F l0800_4A56
l0800_4A3F:
	v98 = Mem0[ds:0x29E1:word16]
	sp = sp - 2
	Mem0[ss:sp:word16] = v98
	v99 = Mem0[ds:0x29DF:word16]
	sp = sp - 2
	Mem0[ss:sp:word16] = v99
	call fn0800_AD2F (retsize: 2;)
	sp = sp + 0x0004
	SCZO = cond(sp)
	dx = 0x0200
	dx = dx - ax
	SCZO = cond(dx)
	di = dx
	goto l0800_4A81
	// succ:  l0800_4A81
l0800_4A56:
	v113 = Mem0[ds:0x29E1:word16]
	sp = sp - 2
	Mem0[ss:sp:word16] = v113
	v114 = Mem0[ds:0x29DF:word16]
	sp = sp - 2
	Mem0[ss:sp:word16] = v114
	call fn0800_AD2F (retsize: 2;)
	sp = sp + 0x0004
	SCZO = cond(sp)
	dx = 0x0010
	dx = dx - ax
	SCZO = cond(dx)
	dx = dx & 0x000F
	SZO = cond(dx)
	C = false
	di = dx
	goto l0800_4A81
	// succ:  l0800_4A81
l0800_4A70:
	v128 = Mem0[ds:0x29E1:word16]
	sp = sp - 2
	Mem0[ss:sp:word16] = v128
	v129 = Mem0[ds:0x29DF:word16]
	sp = sp - 2
	Mem0[ss:sp:word16] = v129
	al = 0x00
	sp = sp - 2
	Mem0[ss:sp:word16] = ax
	call fn0800_4047 (retsize: 2;)
	sp = sp + 0x0006
	SCZO = cond(sp)
	// succ:  l0800_4A81
l0800_4A81:
	ax = di
	di = di - 0x0001
	SZO = cond(di)
	ax = ax | ax
	SZO = cond(ax)
	C = false
	branch Test(NE,Z) l0800_4A70
	// succ:  l0800_4A88 l0800_4A70
l0800_4A88:
	v107 = Mem0[ds:0x29E1:word16]
	sp = sp - 2
	Mem0[ss:sp:word16] = v107
	v108 = Mem0[ds:0x29DF:word16]
	sp = sp - 2
	Mem0[ss:sp:word16] = v108
	call fn0800_AD2F (retsize: 2;)
	sp = sp + 0x0004
	SCZO = cond(sp)
	cl = 0x04
	call fn0800_8C8A (retsize: 2;)
	Mem0[ss:bp - 0x000E:word16] = ax
	ax = ax ^ ax
	SZO = cond(ax)
	C = false
	sp = sp - 2
	Mem0[ss:sp:word16] = ax
	v109 = Mem0[ss:bp - 0x0006:word16]
	sp = sp - 2
	Mem0[ss:sp:word16] = v109
	v110 = Mem0[ss:bp - 0x0008:word16]
	sp = sp - 2
	Mem0[ss:sp:word16] = v110
	v111 = Mem0[ds:0x29E5:word16]
	sp = sp - 2
	Mem0[ss:sp:word16] = v111
	v112 = Mem0[ds:0x29E3:word16]
	sp = sp - 2
	Mem0[ss:sp:word16] = v112
	call fn0800_ACB3 (retsize: 2;)
	sp = sp + 0x000A
	SCZO = cond(sp)
	call fn0800_5374 (retsize: 2;)
	dx = ax
	dx = dx | dx
	SZO = cond(dx)
	C = false
	branch Test(EQ,Z) l0800_4AC4
	// succ:  l0800_4ABE l0800_4AC4
l0800_4ABE:
	di = Mem0[ss:sp:word16]
	sp = sp + 2
	si = Mem0[ss:sp:word16]
	sp = sp + 2
	sp = bp
	bp = Mem0[ss:sp:word16]
	sp = sp + 2
	return
	// succ:  fn0800_46FE_exit
l0800_4AC4:
	v115 = Mem0[ds:0x29E1:word16]
	sp = sp - 2
	Mem0[ss:sp:word16] = v115
	v116 = Mem0[ds:0x29DF:word16]
	sp = sp - 2
	Mem0[ss:sp:word16] = v116
	call fn0800_AD2F (retsize: 2;)
	sp = sp + 0x0004
	SCZO = cond(sp)
	Mem0[ss:bp - 0x0006:word16] = dx
	Mem0[ss:bp - 0x0008:word16] = ax
	ax = ax ^ ax
	SZO = cond(ax)
	C = false
	sp = sp - 2
	Mem0[ss:sp:word16] = ax
	v117 = Mem0[ss:bp - 0x0002:word16]
	sp = sp - 2
	Mem0[ss:sp:word16] = v117
	v118 = Mem0[ss:bp - 0x0004:word16]
	sp = sp - 2
	Mem0[ss:sp:word16] = v118
	v119 = Mem0[ds:0x29E5:word16]
	sp = sp - 2
	Mem0[ss:sp:word16] = v119
	v120 = Mem0[ds:0x29E3:word16]
	sp = sp - 2
	Mem0[ss:sp:word16] = v120
	call fn0800_ACB3 (retsize: 2;)
	sp = sp + 0x000A
	SCZO = cond(sp)
	v121 = Mem0[ds:0x29E5:word16]
	sp = sp - 2
	Mem0[ss:sp:word16] = v121
	v122 = Mem0[ds:0x29E3:word16]
	sp = sp - 2
	Mem0[ss:sp:word16] = v122
	call fn0800_4194 (retsize: 2;)
	sp = sp + 0x0004
	SCZO = cond(sp)
	ax = ax - Mem0[ss:bp - 0x0004:word16]
	SCZO = cond(ax)
	dx = dx - Mem0[ss:bp - 0x0002:word16] - C
	SCZO = cond(dx)
	sp = sp - 2
	Mem0[ss:sp:word16] = dx
	sp = sp - 2
	Mem0[ss:sp:word16] = ax
	v123 = Mem0[ds:0x29E1:word16]
	sp = sp - 2
	Mem0[ss:sp:word16] = v123
	v124 = Mem0[ds:0x29DF:word16]
	sp = sp - 2
	Mem0[ss:sp:word16] = v124
	v125 = Mem0[ds:0x29E5:word16]
	sp = sp - 2
	Mem0[ss:sp:word16] = v125
	v126 = Mem0[ds:0x29E3:word16]
	sp = sp - 2
	Mem0[ss:sp:word16] = v126
	call fn0800_3B0A (retsize: 2;)
	sp = sp + 0x000C
	SCZO = cond(sp)
	di = Mem0[ss:bp - 0x0008:word16]
	di = di & 0x01FF
	SZO = cond(di)
	C = false
	dx = Mem0[ss:bp - 0x0006:word16]
	ax = Mem0[ss:bp - 0x0008:word16]
	cl = 0x09
	call fn0800_8CAA (retsize: 2;)
	Mem0[ss:bp - 0x000A:word16] = ax
	di = di | di
	SZO = cond(di)
	C = false
	branch Test(EQ,Z) l0800_4B37
	// succ:  l0800_4B34 l0800_4B37
l0800_4B34:
	v127 = Mem0[ss:bp - 0x000A:word16] + 0x0001
	Mem0[ss:bp - 0x000A:word16] = v127
	SZO = cond(v127)
	// succ:  l0800_4B37
l0800_4B37:
	ax = ax ^ ax
	SZO = cond(ax)
	C = false
	sp = sp - 2
	Mem0[ss:sp:word16] = ax
	dx = 0x0002
	sp = sp - 2
	Mem0[ss:sp:word16] = ax
	sp = sp - 2
	Mem0[ss:sp:word16] = dx
	v131 = Mem0[ds:0x29E1:word16]
	sp = sp - 2
	Mem0[ss:sp:word16] = v131
	v132 = Mem0[ds:0x29DF:word16]
	sp = sp - 2
	Mem0[ss:sp:word16] = v132
	call fn0800_ACB3 (retsize: 2;)
	sp = sp + 0x000A
	SCZO = cond(sp)
	v133 = Mem0[ds:0x29E1:word16]
	sp = sp - 2
	Mem0[ss:sp:word16] = v133
	v134 = Mem0[ds:0x29DF:word16]
	sp = sp - 2
	Mem0[ss:sp:word16] = v134
	sp = sp - 2
	Mem0[ss:sp:word16] = di
	call fn0800_40BF (retsize: 2;)
	sp = sp + 0x0006
	SCZO = cond(sp)
	v135 = Mem0[ds:0x29E1:word16]
	sp = sp - 2
	Mem0[ss:sp:word16] = v135
	v136 = Mem0[ds:0x29DF:word16]
	sp = sp - 2
	Mem0[ss:sp:word16] = v136
	v137 = Mem0[ss:bp - 0x000A:word16]
	sp = sp - 2
	Mem0[ss:sp:word16] = v137
	call fn0800_40BF (retsize: 2;)
	sp = sp + 0x0006
	SCZO = cond(sp)
	v138 = Mem0[ds:0x29E1:word16]
	sp = sp - 2
	Mem0[ss:sp:word16] = v138
	v139 = Mem0[ds:0x29DF:word16]
	sp = sp - 2
	Mem0[ss:sp:word16] = v139
	v140 = Mem0[ss:bp - 0x000C:word16]
	sp = sp - 2
	Mem0[ss:sp:word16] = v140
	call fn0800_40BF (retsize: 2;)
	sp = sp + 0x0006
	SCZO = cond(sp)
	v141 = Mem0[ds:0x29E1:word16]
	sp = sp - 2
	Mem0[ss:sp:word16] = v141
	v142 = Mem0[ds:0x29DF:word16]
	sp = sp - 2
	Mem0[ss:sp:word16] = v142
	v143 = Mem0[ss:bp - 0x000E:word16]
	sp = sp - 2
	Mem0[ss:sp:word16] = v143
	call fn0800_40BF (retsize: 2;)
	sp = sp + 0x0006
	SCZO = cond(sp)
	ax = ax ^ ax
	SZO = cond(ax)
	C = false
	di = Mem0[ss:sp:word16]
	sp = sp + 2
	si = Mem0[ss:sp:word16]
	sp = sp + 2
	sp = bp
	bp = Mem0[ss:sp:word16]
	sp = sp + 2
	return
	// succ:  fn0800_46FE_exit
fn0800_46FE_exit:


// fn0800_4B97
// Return size: 2
define fn0800_4B97
fn0800_4B97_entry:
	// succ:  l0800_4B97
l0800_4B97:
	sp = fp
	Top = 0
	v4 = Mem0[ds:0x29E5:word16]
	sp = sp - 2
	Mem0[ss:sp:word16] = v4
	v6 = Mem0[ds:0x29E3:word16]
	sp = sp - 2
	Mem0[ss:sp:word16] = v6
	call fn0800_5DCE (retsize: 2;)
	sp = sp + 0x0004
	SCZO = cond(sp)
	ax = ax | ax
	SZO = cond(ax)
	C = false
	branch Test(NE,Z) l0800_4BAD
	// succ:  l0800_4BA9 l0800_4BAD
l0800_4BA9:
	ax = 0x0007
	return
	// succ:  fn0800_4B97_exit
l0800_4BAD:
	call fn0800_5374 (retsize: 2;)
	return
	// succ:  fn0800_4B97_exit
fn0800_4B97_exit:


// fn0800_4BB1
// Return size: 2
define fn0800_4BB1
fn0800_4BB1_entry:
	// succ:  l0800_4BB1
l0800_4BB1:
	sp = fp
	Top = 0
	v4 = Mem0[ds:0x29E5:word16]
	sp = sp - 2
	Mem0[ss:sp:word16] = v4
	v6 = Mem0[ds:0x29E3:word16]
	sp = sp - 2
	Mem0[ss:sp:word16] = v6
	call fn0800_5DCE (retsize: 2;)
	sp = sp + 0x0004
	SCZO = cond(sp)
	ax = ax | ax
	SZO = cond(ax)
	C = false
	branch Test(NE,Z) l0800_4BC7
	// succ:  l0800_4BC3 l0800_4BC7
l0800_4BC3:
	ax = 0x0007
	return
	// succ:  fn0800_4BB1_exit
l0800_4BC7:
	ax = 0x0001
	sp = sp - 2
	Mem0[ss:sp:word16] = ax
	ax = 0xFFFF
	dx = 0xFFEE
	sp = sp - 2
	Mem0[ss:sp:word16] = ax
	sp = sp - 2
	Mem0[ss:sp:word16] = dx
	v13 = Mem0[ds:0x29E5:word16]
	sp = sp - 2
	Mem0[ss:sp:word16] = v13
	v14 = Mem0[ds:0x29E3:word16]
	sp = sp - 2
	Mem0[ss:sp:word16] = v14
	call fn0800_ACB3 (retsize: 2;)
	sp = sp + 0x000A
	SCZO = cond(sp)
	v15 = Mem0[ds:0x29E1:word16]
	sp = sp - 2
	Mem0[ss:sp:word16] = v15
	v16 = Mem0[ds:0x29DF:word16]
	sp = sp - 2
	Mem0[ss:sp:word16] = v16
	ax = 0x601A
	sp = sp - 2
	Mem0[ss:sp:word16] = ax
	call fn0800_401E (retsize: 2;)
	sp = sp + 0x0006
	SCZO = cond(sp)
	ax = ax ^ ax
	SZO = cond(ax)
	C = false
	dx = 0x0010
	sp = sp - 2
	Mem0[ss:sp:word16] = ax
	sp = sp - 2
	Mem0[ss:sp:word16] = dx
	v17 = Mem0[ds:0x29E1:word16]
	sp = sp - 2
	Mem0[ss:sp:word16] = v17
	v18 = Mem0[ds:0x29DF:word16]
	sp = sp - 2
	Mem0[ss:sp:word16] = v18
	v19 = Mem0[ds:0x29E5:word16]
	sp = sp - 2
	Mem0[ss:sp:word16] = v19
	v20 = Mem0[ds:0x29E3:word16]
	sp = sp - 2
	Mem0[ss:sp:word16] = v20
	call fn0800_3B0A (retsize: 2;)
	sp = sp + 0x000C
	SCZO = cond(sp)
	v21 = Mem0[ds:0x29E1:word16]
	sp = sp - 2
	Mem0[ss:sp:word16] = v21
	v22 = Mem0[ds:0x29DF:word16]
	sp = sp - 2
	Mem0[ss:sp:word16] = v22
	ax = ax ^ ax
	SZO = cond(ax)
	C = false
	sp = sp - 2
	Mem0[ss:sp:word16] = ax
	sp = sp - 2
	Mem0[ss:sp:word16] = ax
	call fn0800_409C (retsize: 2;)
	sp = sp + 0x0008
	SCZO = cond(sp)
	v23 = Mem0[ds:0x29E1:word16]
	sp = sp - 2
	Mem0[ss:sp:word16] = v23
	v24 = Mem0[ds:0x29DF:word16]
	sp = sp - 2
	Mem0[ss:sp:word16] = v24
	ax = ax ^ ax
	SZO = cond(ax)
	C = false
	sp = sp - 2
	Mem0[ss:sp:word16] = ax
	sp = sp - 2
	Mem0[ss:sp:word16] = ax
	call fn0800_409C (retsize: 2;)
	sp = sp + 0x0008
	SCZO = cond(sp)
	v25 = Mem0[ds:0x29E1:word16]
	sp = sp - 2
	Mem0[ss:sp:word16] = v25
	v26 = Mem0[ds:0x29DF:word16]
	sp = sp - 2
	Mem0[ss:sp:word16] = v26
	v27 = Mem0[ds:0x29E5:word16]
	sp = sp - 2
	Mem0[ss:sp:word16] = v27
	v28 = Mem0[ds:0x29E3:word16]
	sp = sp - 2
	Mem0[ss:sp:word16] = v28
	call fn0800_3E27 (retsize: 2;)
	sp = sp + 0x0004
	SCZO = cond(sp)
	sp = sp - 2
	Mem0[ss:sp:word16] = ax
	call fn0800_401E (retsize: 2;)
	sp = sp + 0x0006
	SCZO = cond(sp)
	call fn0800_5374 (retsize: 2;)
	return
	// succ:  fn0800_4BB1_exit
fn0800_4BB1_exit:


// fn0800_4C55
// Return size: 2
define fn0800_4C55
fn0800_4C55_entry:
	// succ:  l0800_4C55
l0800_4C55:
	sp = fp
	Top = 0
	sp = sp - 2
	Mem0[ss:sp:word16] = bp
	bp = sp
	sp = sp - 0x0018
	SCZO = cond(sp)
	v7 = Mem0[ds:0x29E5:word16]
	sp = sp - 2
	Mem0[ss:sp:word16] = v7
	v8 = Mem0[ds:0x29E3:word16]
	sp = sp - 2
	Mem0[ss:sp:word16] = v8
	call fn0800_3E5D (retsize: 2;)
	sp = sp + 0x0004
	SCZO = cond(sp)
	dx = dx | dx
	SZO = cond(dx)
	C = false
	branch Test(NE,Z) l0800_4C72
	// succ:  l0800_4C6D l0800_4C72
l0800_4C6D:
	SCZO = cond(ax - 0x03F3)
	branch Test(EQ,Z) l0800_4C79
	// succ:  l0800_4C72 l0800_4C79
l0800_4C72:
	ax = 0x0007
	sp = bp
	bp = Mem0[ss:sp:word16]
	sp = sp + 2
	return
	// succ:  fn0800_4C55_exit
l0800_4C79:
	v14 = Mem0[ds:0x29E1:word16]
	sp = sp - 2
	Mem0[ss:sp:word16] = v14
	v15 = Mem0[ds:0x29DF:word16]
	sp = sp - 2
	Mem0[ss:sp:word16] = v15
	ax = ax ^ ax
	SZO = cond(ax)
	C = false
	dx = 0x03F3
	sp = sp - 2
	Mem0[ss:sp:word16] = ax
	sp = sp - 2
	Mem0[ss:sp:word16] = dx
	call fn0800_409C (retsize: 2;)
	sp = sp + 0x0008
	SCZO = cond(sp)
	// succ:  l0800_4C8E
l0800_4C8E:
	v16 = Mem0[ds:0x29E5:word16]
	sp = sp - 2
	Mem0[ss:sp:word16] = v16
	v17 = Mem0[ds:0x29E3:word16]
	sp = sp - 2
	Mem0[ss:sp:word16] = v17
	call fn0800_3E5D (retsize: 2;)
	sp = sp + 0x0004
	SCZO = cond(sp)
	Mem0[ss:bp - 0x0006:word16] = dx
	Mem0[ss:bp - 0x0008:word16] = ax
	Mem0[ss:bp - 0x0002:word16] = dx
	Mem0[ss:bp - 0x0004:word16] = ax
	v18 = Mem0[ds:0x29E1:word16]
	sp = sp - 2
	Mem0[ss:sp:word16] = v18
	v19 = Mem0[ds:0x29DF:word16]
	sp = sp - 2
	Mem0[ss:sp:word16] = v19
	v20 = Mem0[ss:bp - 0x0002:word16]
	sp = sp - 2
	Mem0[ss:sp:word16] = v20
	sp = sp - 2
	Mem0[ss:sp:word16] = ax
	call fn0800_409C (retsize: 2;)
	sp = sp + 0x0008
	SCZO = cond(sp)
	goto l0800_4CDA
	// succ:  l0800_4CDA
l0800_4CBC:
	v41 = Mem0[ds:0x29E1:word16]
	sp = sp - 2
	Mem0[ss:sp:word16] = v41
	v42 = Mem0[ds:0x29DF:word16]
	sp = sp - 2
	Mem0[ss:sp:word16] = v42
	v43 = Mem0[ds:0x29E5:word16]
	sp = sp - 2
	Mem0[ss:sp:word16] = v43
	v44 = Mem0[ds:0x29E3:word16]
	sp = sp - 2
	Mem0[ss:sp:word16] = v44
	call fn0800_3E5D (retsize: 2;)
	sp = sp + 0x0004
	SCZO = cond(sp)
	sp = sp - 2
	Mem0[ss:sp:word16] = dx
	sp = sp - 2
	Mem0[ss:sp:word16] = ax
	call fn0800_409C (retsize: 2;)
	sp = sp + 0x0008
	SCZO = cond(sp)
	// succ:  l0800_4CDA
l0800_4CDA:
	ax = Mem0[ss:bp - 0x0008:word16]
	dx = Mem0[ss:bp - 0x0006:word16]
	v21 = Mem0[ss:bp - 0x0008:word16] - 0x0001
	Mem0[ss:bp - 0x0008:word16] = v21
	SCZO = cond(v21)
	v22 = Mem0[ss:bp - 0x0006:word16] - 0x00 - C
	Mem0[ss:bp - 0x0006:word16] = v22
	SCZO = cond(v22)
	ax = ax | dx
	SZO = cond(ax)
	C = false
	branch Test(NE,Z) l0800_4CBC
	// succ:  l0800_4CEC l0800_4CBC
l0800_4CEC:
	ax = Mem0[ss:bp - 0x0004:word16]
	ax = ax | Mem0[ss:bp - 0x0002:word16]
	SZO = cond(ax)
	C = false
	branch Test(NE,Z) l0800_4C8E
	// succ:  l0800_4CF4 l0800_4C8E
l0800_4CF4:
	v23 = Mem0[ds:0x29E1:word16]
	sp = sp - 2
	Mem0[ss:sp:word16] = v23
	v24 = Mem0[ds:0x29DF:word16]
	sp = sp - 2
	Mem0[ss:sp:word16] = v24
	v25 = Mem0[ds:0x29E5:word16]
	sp = sp - 2
	Mem0[ss:sp:word16] = v25
	v26 = Mem0[ds:0x29E3:word16]
	sp = sp - 2
	Mem0[ss:sp:word16] = v26
	call fn0800_3E5D (retsize: 2;)
	sp = sp + 0x0004
	SCZO = cond(sp)
	ax = ax - 0x0001
	SCZO = cond(ax)
	dx = dx - 0x00 - C
	SCZO = cond(dx)
	sp = sp - 2
	Mem0[ss:sp:word16] = dx
	sp = sp - 2
	Mem0[ss:sp:word16] = ax
	call fn0800_409C (retsize: 2;)
	sp = sp + 0x0008
	SCZO = cond(sp)
	v27 = Mem0[ds:0x29E5:word16]
	sp = sp - 2
	Mem0[ss:sp:word16] = v27
	v28 = Mem0[ds:0x29E3:word16]
	sp = sp - 2
	Mem0[ss:sp:word16] = v28
	call fn0800_3E5D (retsize: 2;)
	sp = sp + 0x0004
	SCZO = cond(sp)
	Mem0[ss:bp - 0x000A:word16] = dx
	Mem0[ss:bp - 0x000C:word16] = ax
	v29 = Mem0[ds:0x29E5:word16]
	sp = sp - 2
	Mem0[ss:sp:word16] = v29
	v30 = Mem0[ds:0x29E3:word16]
	sp = sp - 2
	Mem0[ss:sp:word16] = v30
	call fn0800_3E5D (retsize: 2;)
	sp = sp + 0x0004
	SCZO = cond(sp)
	Mem0[ss:bp - 0x000E:word16] = dx
	Mem0[ss:bp - 0x0010:word16] = ax
	ax = Mem0[ss:bp - 0x000E:word16]
	dx = Mem0[ss:bp - 0x0010:word16]
	dx = dx - Mem0[ss:bp - 0x000C:word16]
	SCZO = cond(dx)
	ax = ax - Mem0[ss:bp - 0x000A:word16] - C
	SCZO = cond(ax)
	Mem0[ss:bp - 0x0012:word16] = ax
	Mem0[ss:bp - 0x0014:word16] = dx
	v31 = Mem0[ds:0x29E1:word16]
	sp = sp - 2
	Mem0[ss:sp:word16] = v31
	v32 = Mem0[ds:0x29DF:word16]
	sp = sp - 2
	Mem0[ss:sp:word16] = v32
	v33 = Mem0[ss:bp - 0x000A:word16]
	sp = sp - 2
	Mem0[ss:sp:word16] = v33
	v34 = Mem0[ss:bp - 0x000C:word16]
	sp = sp - 2
	Mem0[ss:sp:word16] = v34
	call fn0800_409C (retsize: 2;)
	sp = sp + 0x0008
	SCZO = cond(sp)
	v35 = Mem0[ds:0x29E1:word16]
	sp = sp - 2
	Mem0[ss:sp:word16] = v35
	v36 = Mem0[ds:0x29DF:word16]
	sp = sp - 2
	Mem0[ss:sp:word16] = v36
	ax = Mem0[ss:bp - 0x000E:word16]
	dx = Mem0[ss:bp - 0x0010:word16]
	dx = dx - 0x0001
	SCZO = cond(dx)
	ax = ax - 0x0000 - C
	SCZO = cond(ax)
	sp = sp - 2
	Mem0[ss:sp:word16] = ax
	sp = sp - 2
	Mem0[ss:sp:word16] = dx
	call fn0800_409C (retsize: 2;)
	sp = sp + 0x0008
	SCZO = cond(sp)
	v37 = Mem0[ds:0x29E1:word16]
	sp = sp - 2
	Mem0[ss:sp:word16] = v37
	v38 = Mem0[ds:0x29DF:word16]
	sp = sp - 2
	Mem0[ss:sp:word16] = v38
	call fn0800_AD2F (retsize: 2;)
	sp = sp + 0x0004
	SCZO = cond(sp)
	Mem0[ds:0x4E8E:word16] = dx
	Mem0[ds:0x4E8C:word16] = ax
	ax = 0x0001
	sp = sp - 2
	Mem0[ss:sp:word16] = ax
	ax = ax ^ ax
	SZO = cond(ax)
	C = false
	dx = 0x0004
	sp = sp - 2
	Mem0[ss:sp:word16] = ax
	sp = sp - 2
	Mem0[ss:sp:word16] = dx
	v39 = Mem0[ds:0x29E5:word16]
	sp = sp - 2
	Mem0[ss:sp:word16] = v39
	v40 = Mem0[ds:0x29E3:word16]
	sp = sp - 2
	Mem0[ss:sp:word16] = v40
	call fn0800_ACB3 (retsize: 2;)
	sp = sp + 0x000A
	SCZO = cond(sp)
	ax = Mem0[ss:bp - 0x0012:word16]
	dx = Mem0[ss:bp - 0x0014:word16]
	Mem0[ss:bp - 0x0002:word16] = ax
	Mem0[ss:bp - 0x0004:word16] = dx
	goto l0800_4DE4
	// succ:  l0800_4DE4
l0800_4DBE:
	v52 = Mem0[ds:0x29E1:word16]
	sp = sp - 2
	Mem0[ss:sp:word16] = v52
	v53 = Mem0[ds:0x29DF:word16]
	sp = sp - 2
	Mem0[ss:sp:word16] = v53
	v54 = Mem0[ds:0x29E5:word16]
	sp = sp - 2
	Mem0[ss:sp:word16] = v54
	v55 = Mem0[ds:0x29E3:word16]
	sp = sp - 2
	Mem0[ss:sp:word16] = v55
	call fn0800_3E5D (retsize: 2;)
	sp = sp + 0x0004
	SCZO = cond(sp)
	sp = sp - 2
	Mem0[ss:sp:word16] = dx
	sp = sp - 2
	Mem0[ss:sp:word16] = ax
	call fn0800_409C (retsize: 2;)
	sp = sp + 0x0008
	SCZO = cond(sp)
	v56 = Mem0[ss:bp - 0x0004:word16] - 0x0001
	Mem0[ss:bp - 0x0004:word16] = v56
	SCZO = cond(v56)
	v57 = Mem0[ss:bp - 0x0002:word16] - 0x00 - C
	Mem0[ss:bp - 0x0002:word16] = v57
	SCZO = cond(v57)
	// succ:  l0800_4DE4
l0800_4DE4:
	ax = Mem0[ss:bp - 0x0004:word16]
	ax = ax | Mem0[ss:bp - 0x0002:word16]
	SZO = cond(ax)
	C = false
	branch Test(NE,Z) l0800_4DBE
	// succ:  l0800_4DEC l0800_4DBE
l0800_4DEC:
	ax = 0x0001
	sp = sp - 2
	Mem0[ss:sp:word16] = ax
	ax = ax ^ ax
	SZO = cond(ax)
	C = false
	dx = 0x0004
	sp = sp - 2
	Mem0[ss:sp:word16] = ax
	sp = sp - 2
	Mem0[ss:sp:word16] = dx
	v45 = Mem0[ds:0x29E5:word16]
	sp = sp - 2
	Mem0[ss:sp:word16] = v45
	v46 = Mem0[ds:0x29E3:word16]
	sp = sp - 2
	Mem0[ss:sp:word16] = v46
	call fn0800_ACB3 (retsize: 2;)
	sp = sp + 0x000A
	SCZO = cond(sp)
	v47 = Mem0[ds:0x29E5:word16]
	sp = sp - 2
	Mem0[ss:sp:word16] = v47
	v48 = Mem0[ds:0x29E3:word16]
	sp = sp - 2
	Mem0[ss:sp:word16] = v48
	call fn0800_3E5D (retsize: 2;)
	sp = sp + 0x0004
	SCZO = cond(sp)
	ax = ax + 0x0001
	SCZO = cond(ax)
	dx = dx + 0x00 + C
	SCZO = cond(dx)
	Mem0[ss:bp - 0x0002:word16] = dx
	Mem0[ss:bp - 0x0004:word16] = ax
	ax = 0x0001
	sp = sp - 2
	Mem0[ss:sp:word16] = ax
	dx = Mem0[ss:bp - 0x0002:word16]
	ax = Mem0[ss:bp - 0x0004:word16]
	cl = 0x02
	call fn0800_8C69 (retsize: 2;)
	sp = sp - 2
	Mem0[ss:sp:word16] = dx
	sp = sp - 2
	Mem0[ss:sp:word16] = ax
	v50 = Mem0[ds:0x29E5:word16]
	sp = sp - 2
	Mem0[ss:sp:word16] = v50
	v51 = Mem0[ds:0x29E3:word16]
	sp = sp - 2
	Mem0[ss:sp:word16] = v51
	call fn0800_ACB3 (retsize: 2;)
	sp = sp + 0x000A
	SCZO = cond(sp)
	goto l0800_4EDE
	// succ:  l0800_4EDE
l0800_4E41:
	v63 = Mem0[ds:0x29E5:word16]
	sp = sp - 2
	Mem0[ss:sp:word16] = v63
	v64 = Mem0[ds:0x29E3:word16]
	sp = sp - 2
	Mem0[ss:sp:word16] = v64
	call fn0800_3E5D (retsize: 2;)
	sp = sp + 0x0004
	SCZO = cond(sp)
	Mem0[ss:bp - 0x0006:word16] = dx
	Mem0[ss:bp - 0x0008:word16] = ax
	v65 = Mem0[ds:0x29E1:word16]
	sp = sp - 2
	Mem0[ss:sp:word16] = v65
	v66 = Mem0[ds:0x29DF:word16]
	sp = sp - 2
	Mem0[ss:sp:word16] = v66
	v67 = Mem0[ss:bp - 0x0006:word16]
	sp = sp - 2
	Mem0[ss:sp:word16] = v67
	sp = sp - 2
	Mem0[ss:sp:word16] = ax
	call fn0800_409C (retsize: 2;)
	sp = sp + 0x0008
	SCZO = cond(sp)
	ax = Mem0[ss:bp - 0x0006:word16]
	dx = Mem0[ss:bp - 0x0008:word16]
	ax = ax & 0x3FFF
	SZO = cond(ax)
	C = false
	Mem0[ss:bp - 0x0018:word16] = dx
	Mem0[ss:bp - 0x0016:word16] = ax
	cx = 0x0004
	bx = 0x4F14
	// succ:  l0800_4E7C
l0800_4E7C:
	ax = Mem0[0x0800:bx:word16]
	SCZO = cond(ax - Mem0[ss:bp - 0x0008:word16])
	branch Test(NE,Z) l0800_4E8D
	// succ:  l0800_4E84 l0800_4E8D
l0800_4E84:
	ax = Mem0[0x0800:bx + 0x0008:word16]
	SCZO = cond(ax - Mem0[ss:bp - 0x0016:word16])
	branch Test(EQ,Z) l0800_4E94
	// succ:  l0800_4E8D l0800_4E94
l0800_4E8D:
	bx = bx + 0x0002
	SCZO = cond(bx)
	cx = cx - 0x0001
	branch cx != 0x0000 l0800_4E7C
	// succ:  l0800_4E92 l0800_4E7C
l0800_4E92:
	goto l0800_4ED7
	// succ:  l0800_4ED7
l0800_4E94:
	call Mem0[0x0800:bx + 0x0010:word16] (retsize: 2;)
	return
	// succ:  fn0800_4C55_exit
l0800_4ED7:
	ax = 0x0009
	sp = bp
	bp = Mem0[ss:sp:word16]
	sp = sp + 2
	return
	// succ:  fn0800_4C55_exit
l0800_4EDE:
	v58 = Mem0[ds:0x29E5:word16]
	sp = sp - 2
	Mem0[ss:sp:word16] = v58
	v59 = Mem0[ds:0x29E3:word16]
	sp = sp - 2
	Mem0[ss:sp:word16] = v59
	call fn0800_AD2F (retsize: 2;)
	sp = sp + 0x0004
	SCZO = cond(sp)
	sp = sp - 2
	Mem0[ss:sp:word16] = ax
	sp = sp - 2
	Mem0[ss:sp:word16] = dx
	v60 = Mem0[ds:0x29E5:word16]
	sp = sp - 2
	Mem0[ss:sp:word16] = v60
	v61 = Mem0[ds:0x29E3:word16]
	sp = sp - 2
	Mem0[ss:sp:word16] = v61
	call fn0800_4194 (retsize: 2;)
	sp = sp + 0x0004
	SCZO = cond(sp)
	bx = Mem0[ss:sp:word16]
	sp = sp + 2
	SCZO = cond(bx - dx)
	dx = Mem0[ss:sp:word16]
	sp = sp + 2
	branch Test(UGE,C) l0800_4F05
	// succ:  l0800_4F02 l0800_4F05
l0800_4F02:
	goto l0800_4E41
	// succ:  l0800_4E41
l0800_4F05:
	branch Test(NE,Z) l0800_4F0E
	// succ:  l0800_4F07 l0800_4F0E
l0800_4F07:
	SCZO = cond(dx - ax)
	branch Test(UGE,C) l0800_4F0E
	// succ:  l0800_4F0B l0800_4F0E
l0800_4F0B:
	goto l0800_4E41
	// succ:  l0800_4E41
l0800_4F0E:
	ax = ax ^ ax
	SZO = cond(ax)
	C = false
	sp = bp
	bp = Mem0[ss:sp:word16]
	sp = sp + 2
	return
	// succ:  fn0800_4C55_exit
fn0800_4C55_exit:


// fn0800_4F2C
// Return size: 2
define fn0800_4F2C
fn0800_4F2C_entry:
	// succ:  l0800_4F2C
l0800_4F2C:
	sp = fp
	Top = 0
	sp = sp - 2
	Mem0[ss:sp:word16] = bp
	bp = sp
	sp = sp - 0x001A
	SCZO = cond(sp)
	v7 = Mem0[ds:0x29E5:word16]
	sp = sp - 2
	Mem0[ss:sp:word16] = v7
	v8 = Mem0[ds:0x29E3:word16]
	sp = sp - 2
	Mem0[ss:sp:word16] = v8
	call fn0800_3E5D (retsize: 2;)
	sp = sp + 0x0004
	SCZO = cond(sp)
	cl = 0x02
	call fn0800_8C69 (retsize: 2;)
	Mem0[ss:bp - 0x0010:word16] = dx
	Mem0[ss:bp - 0x0012:word16] = ax
	v12 = Mem0[ds:0x29E5:word16]
	sp = sp - 2
	Mem0[ss:sp:word16] = v12
	v13 = Mem0[ds:0x29E3:word16]
	sp = sp - 2
	Mem0[ss:sp:word16] = v13
	call fn0800_AD2F (retsize: 2;)
	sp = sp + 0x0004
	SCZO = cond(sp)
	Mem0[ss:bp - 0x0018:word16] = dx
	Mem0[ss:bp - 0x001A:word16] = ax
	SCZO = cond(Mem0[ss:bp - 0x0010:word16] - 0x0000)
	branch Test(ULT,C) l0800_4F95
	// succ:  l0800_4F65 l0800_4F95
l0800_4F65:
	branch Test(UGT,CZ) l0800_4F6D
	// succ:  l0800_4F67 l0800_4F6D
l0800_4F67:
	SCZO = cond(Mem0[ss:bp - 0x0012:word16] - 0x0012)
	branch Test(ULE,CZ) l0800_4F95
	// succ:  l0800_4F6D l0800_4F95
l0800_4F6D:
	v16 = Mem0[ds:0x29E5:word16]
	sp = sp - 2
	Mem0[ss:sp:word16] = v16
	v17 = Mem0[ds:0x29E3:word16]
	sp = sp - 2
	Mem0[ss:sp:word16] = v17
	call fn0800_3E5D (retsize: 2;)
	sp = sp + 0x0004
	SCZO = cond(sp)
	Mem0[ss:bp - 0x0014:word16] = dx
	Mem0[ss:bp - 0x0016:word16] = ax
	v18 = Mem0[ds:0x29E5:word16]
	sp = sp - 2
	Mem0[ss:sp:word16] = v18
	v19 = Mem0[ds:0x29E3:word16]
	sp = sp - 2
	Mem0[ss:sp:word16] = v19
	call fn0800_3E5D (retsize: 2;)
	sp = sp + 0x0004
	SCZO = cond(sp)
	Mem0[ss:bp - 0x000C:word16] = dx
	Mem0[ss:bp - 0x000E:word16] = ax
	// succ:  l0800_4F95
l0800_4F95:
	v20 = Mem0[ds:0x29E5:word16]
	sp = sp - 2
	Mem0[ss:sp:word16] = v20
	v21 = Mem0[ds:0x29E3:word16]
	sp = sp - 2
	Mem0[ss:sp:word16] = v21
	call fn0800_3F58 (retsize: 2;)
	sp = sp + 0x0004
	SCZO = cond(sp)
	cl = 0x08
	call fn0800_8CAA (retsize: 2;)
	SCZO = cond(dx - 0x0052)
	branch Test(NE,Z) l0800_4FB5
	// succ:  l0800_4FAD l0800_4FB5
l0800_4FAD:
	SCZO = cond(ax - 0x4E43)
	branch Test(NE,Z) l0800_4FB5
	// succ:  l0800_4FB2 l0800_4FB5
l0800_4FB2:
	goto l0800_50E6
	// succ:  l0800_50E6
l0800_4FB5:
	v23 = Mem0[ds:0x29E1:word16]
	sp = sp - 2
	Mem0[ss:sp:word16] = v23
	v24 = Mem0[ds:0x29DF:word16]
	sp = sp - 2
	Mem0[ss:sp:word16] = v24
	dx = Mem0[ss:bp - 0x0010:word16]
	ax = Mem0[ss:bp - 0x0012:word16]
	cl = 0x02
	call fn0800_8CAA (retsize: 2;)
	sp = sp - 2
	Mem0[ss:sp:word16] = dx
	sp = sp - 2
	Mem0[ss:sp:word16] = ax
	call fn0800_409C (retsize: 2;)
	sp = sp + 0x0008
	SCZO = cond(sp)
	ax = ax ^ ax
	SZO = cond(ax)
	C = false
	sp = sp - 2
	Mem0[ss:sp:word16] = ax
	v26 = Mem0[ss:bp - 0x0018:word16]
	sp = sp - 2
	Mem0[ss:sp:word16] = v26
	v27 = Mem0[ss:bp - 0x001A:word16]
	sp = sp - 2
	Mem0[ss:sp:word16] = v27
	v28 = Mem0[ds:0x29E5:word16]
	sp = sp - 2
	Mem0[ss:sp:word16] = v28
	v29 = Mem0[ds:0x29E3:word16]
	sp = sp - 2
	Mem0[ss:sp:word16] = v29
	call fn0800_ACB3 (retsize: 2;)
	sp = sp + 0x000A
	SCZO = cond(sp)
	v30 = Mem0[ss:bp - 0x0010:word16]
	sp = sp - 2
	Mem0[ss:sp:word16] = v30
	v31 = Mem0[ss:bp - 0x0012:word16]
	sp = sp - 2
	Mem0[ss:sp:word16] = v31
	v32 = Mem0[ds:0x29E1:word16]
	sp = sp - 2
	Mem0[ss:sp:word16] = v32
	v33 = Mem0[ds:0x29DF:word16]
	sp = sp - 2
	Mem0[ss:sp:word16] = v33
	v34 = Mem0[ds:0x29E5:word16]
	sp = sp - 2
	Mem0[ss:sp:word16] = v34
	v35 = Mem0[ds:0x29E3:word16]
	sp = sp - 2
	Mem0[ss:sp:word16] = v35
	call fn0800_3B0A (retsize: 2;)
	sp = sp + 0x000C
	SCZO = cond(sp)
	goto l0800_50BC
	// succ:  l0800_50BC
l0800_5006:
	ax = 0x0001
	sp = sp - 2
	Mem0[ss:sp:word16] = ax
	ax = ax ^ ax
	SZO = cond(ax)
	C = false
	dx = 0x0004
	sp = sp - 2
	Mem0[ss:sp:word16] = ax
	sp = sp - 2
	Mem0[ss:sp:word16] = dx
	v60 = Mem0[ds:0x29E5:word16]
	sp = sp - 2
	Mem0[ss:sp:word16] = v60
	v61 = Mem0[ds:0x29E3:word16]
	sp = sp - 2
	Mem0[ss:sp:word16] = v61
	call fn0800_ACB3 (retsize: 2;)
	sp = sp + 0x000A
	SCZO = cond(sp)
	v62 = Mem0[ds:0x29E1:word16]
	sp = sp - 2
	Mem0[ss:sp:word16] = v62
	v63 = Mem0[ds:0x29DF:word16]
	sp = sp - 2
	Mem0[ss:sp:word16] = v63
	ax = ax ^ ax
	SZO = cond(ax)
	C = false
	dx = 0x03EC
	sp = sp - 2
	Mem0[ss:sp:word16] = ax
	sp = sp - 2
	Mem0[ss:sp:word16] = dx
	call fn0800_409C (retsize: 2;)
	sp = sp + 0x0008
	SCZO = cond(sp)
	// succ:  l0800_5034
l0800_5034:
	v64 = Mem0[ds:0x29E5:word16]
	sp = sp - 2
	Mem0[ss:sp:word16] = v64
	v65 = Mem0[ds:0x29E3:word16]
	sp = sp - 2
	Mem0[ss:sp:word16] = v65
	call fn0800_3E5D (retsize: 2;)
	sp = sp + 0x0004
	SCZO = cond(sp)
	Mem0[ss:bp - 0x0004:word16] = dx
	Mem0[ss:bp - 0x0006:word16] = ax
	v66 = Mem0[ds:0x29E1:word16]
	sp = sp - 2
	Mem0[ss:sp:word16] = v66
	v67 = Mem0[ds:0x29DF:word16]
	sp = sp - 2
	Mem0[ss:sp:word16] = v67
	v68 = Mem0[ss:bp - 0x0004:word16]
	sp = sp - 2
	Mem0[ss:sp:word16] = v68
	sp = sp - 2
	Mem0[ss:sp:word16] = ax
	call fn0800_409C (retsize: 2;)
	sp = sp + 0x0008
	SCZO = cond(sp)
	ax = Mem0[ss:bp - 0x0006:word16]
	ax = ax | Mem0[ss:bp - 0x0004:word16]
	SZO = cond(ax)
	C = false
	branch Test(EQ,Z) l0800_50B1
	// succ:  l0800_5062 l0800_50B1
l0800_5062:
	v69 = Mem0[ds:0x29E5:word16]
	sp = sp - 2
	Mem0[ss:sp:word16] = v69
	v70 = Mem0[ds:0x29E3:word16]
	sp = sp - 2
	Mem0[ss:sp:word16] = v70
	call fn0800_3E5D (retsize: 2;)
	sp = sp + 0x0004
	SCZO = cond(sp)
	ax = ax - 0x0001
	SCZO = cond(ax)
	dx = dx - 0x00 - C
	SCZO = cond(dx)
	Mem0[ss:bp - 0x0008:word16] = dx
	Mem0[ss:bp - 0x000A:word16] = ax
	v71 = Mem0[ds:0x29E1:word16]
	sp = sp - 2
	Mem0[ss:sp:word16] = v71
	v72 = Mem0[ds:0x29DF:word16]
	sp = sp - 2
	Mem0[ss:sp:word16] = v72
	v73 = Mem0[ss:bp - 0x0008:word16]
	sp = sp - 2
	Mem0[ss:sp:word16] = v73
	sp = sp - 2
	Mem0[ss:sp:word16] = ax
	call fn0800_409C (retsize: 2;)
	sp = sp + 0x0008
	SCZO = cond(sp)
	dx = Mem0[ss:bp - 0x0004:word16]
	ax = Mem0[ss:bp - 0x0006:word16]
	cl = 0x02
	call fn0800_8C69 (retsize: 2;)
	sp = sp - 2
	Mem0[ss:sp:word16] = dx
	sp = sp - 2
	Mem0[ss:sp:word16] = ax
	v74 = Mem0[ds:0x29E1:word16]
	sp = sp - 2
	Mem0[ss:sp:word16] = v74
	v75 = Mem0[ds:0x29DF:word16]
	sp = sp - 2
	Mem0[ss:sp:word16] = v75
	v76 = Mem0[ds:0x29E5:word16]
	sp = sp - 2
	Mem0[ss:sp:word16] = v76
	v77 = Mem0[ds:0x29E3:word16]
	sp = sp - 2
	Mem0[ss:sp:word16] = v77
	call fn0800_3B0A (retsize: 2;)
	sp = sp + 0x000C
	SCZO = cond(sp)
	// succ:  l0800_50B1
l0800_50B1:
	ax = Mem0[ss:bp - 0x0006:word16]
	ax = ax | Mem0[ss:bp - 0x0004:word16]
	SZO = cond(ax)
	C = false
	branch Test(EQ,Z) l0800_50BC
	// succ:  l0800_50B9 l0800_50BC
l0800_50B9:
	goto l0800_5034
	// succ:  l0800_5034
l0800_50BC:
	v56 = Mem0[ds:0x29E5:word16]
	sp = sp - 2
	Mem0[ss:sp:word16] = v56
	v57 = Mem0[ds:0x29E3:word16]
	sp = sp - 2
	Mem0[ss:sp:word16] = v57
	call fn0800_3F58 (retsize: 2;)
	sp = sp + 0x0004
	SCZO = cond(sp)
	dx = dx | dx
	SZO = cond(dx)
	C = false
	branch Test(NE,Z) l0800_50D6
	// succ:  l0800_50CE l0800_50D6
l0800_50CE:
	SCZO = cond(ax - 0x03EC)
	branch Test(NE,Z) l0800_50D6
	// succ:  l0800_50D3 l0800_50D6
l0800_50D3:
	goto l0800_5006
	// succ:  l0800_5006
l0800_50D6:
	v58 = Mem0[ds:0x4E8C:word16] + 0x0004
	Mem0[ds:0x4E8C:word16] = v58
	SCZO = cond(v58)
	v59 = Mem0[ds:0x4E8E:word16] + 0x00 + C
	Mem0[ds:0x4E8E:word16] = v59
	SCZO = cond(v59)
	ax = ax ^ ax
	SZO = cond(ax)
	C = false
	sp = bp
	bp = Mem0[ss:sp:word16]
	sp = sp + 2
	return
	// succ:  fn0800_4F2C_exit
l0800_50E6:
	v36 = Mem0[ds:0x29E1:word16]
	sp = sp - 2
	Mem0[ss:sp:word16] = v36
	v37 = Mem0[ds:0x29DF:word16]
	sp = sp - 2
	Mem0[ss:sp:word16] = v37
	dx = Mem0[ss:bp - 0x0014:word16]
	ax = Mem0[ss:bp - 0x0016:word16]
	cl = 0x02
	call fn0800_8CAA (retsize: 2;)
	sp = sp - 2
	Mem0[ss:sp:word16] = dx
	sp = sp - 2
	Mem0[ss:sp:word16] = ax
	call fn0800_409C (retsize: 2;)
	sp = sp + 0x0008
	SCZO = cond(sp)
	v38 = Mem0[ds:0x29E1:word16]
	sp = sp - 2
	Mem0[ss:sp:word16] = v38
	v39 = Mem0[ds:0x29DF:word16]
	sp = sp - 2
	Mem0[ss:sp:word16] = v39
	call fn0800_AD2F (retsize: 2;)
	sp = sp + 0x0004
	SCZO = cond(sp)
	Mem0[ss:bp - 0x0004:word16] = dx
	Mem0[ss:bp - 0x0006:word16] = ax
	ax = ax ^ ax
	SZO = cond(ax)
	C = false
	sp = sp - 2
	Mem0[ss:sp:word16] = ax
	v40 = Mem0[ds:0x4E8E:word16]
	sp = sp - 2
	Mem0[ss:sp:word16] = v40
	v41 = Mem0[ds:0x4E8C:word16]
	sp = sp - 2
	Mem0[ss:sp:word16] = v41
	v42 = Mem0[ds:0x29E1:word16]
	sp = sp - 2
	Mem0[ss:sp:word16] = v42
	v43 = Mem0[ds:0x29DF:word16]
	sp = sp - 2
	Mem0[ss:sp:word16] = v43
	call fn0800_ACB3 (retsize: 2;)
	sp = sp + 0x000A
	SCZO = cond(sp)
	v44 = Mem0[ds:0x29E1:word16]
	sp = sp - 2
	Mem0[ss:sp:word16] = v44
	v45 = Mem0[ds:0x29DF:word16]
	sp = sp - 2
	Mem0[ss:sp:word16] = v45
	v46 = Mem0[ss:bp - 0x000C:word16]
	sp = sp - 2
	Mem0[ss:sp:word16] = v46
	v47 = Mem0[ss:bp - 0x000E:word16]
	sp = sp - 2
	Mem0[ss:sp:word16] = v47
	call fn0800_409C (retsize: 2;)
	sp = sp + 0x0008
	SCZO = cond(sp)
	v48 = Mem0[ds:0x4E8C:word16] + 0x0004
	Mem0[ds:0x4E8C:word16] = v48
	SCZO = cond(v48)
	v49 = Mem0[ds:0x4E8E:word16] + 0x00 + C
	Mem0[ds:0x4E8E:word16] = v49
	SCZO = cond(v49)
	ax = ax ^ ax
	SZO = cond(ax)
	C = false
	sp = sp - 2
	Mem0[ss:sp:word16] = ax
	v50 = Mem0[ss:bp - 0x0004:word16]
	sp = sp - 2
	Mem0[ss:sp:word16] = v50
	v51 = Mem0[ss:bp - 0x0006:word16]
	sp = sp - 2
	Mem0[ss:sp:word16] = v51
	v52 = Mem0[ds:0x29E1:word16]
	sp = sp - 2
	Mem0[ss:sp:word16] = v52
	v53 = Mem0[ds:0x29DF:word16]
	sp = sp - 2
	Mem0[ss:sp:word16] = v53
	call fn0800_ACB3 (retsize: 2;)
	sp = sp + 0x000A
	SCZO = cond(sp)
	call fn0800_5374 (retsize: 2;)
	Mem0[ss:bp - 0x0002:word16] = ax
	ax = ax ^ ax
	SZO = cond(ax)
	C = false
	sp = sp - 2
	Mem0[ss:sp:word16] = ax
	ax = Mem0[ss:bp - 0x0018:word16]
	dx = Mem0[ss:bp - 0x001A:word16]
	dx = dx + Mem0[ss:bp - 0x0012:word16]
	SCZO = cond(dx)
	ax = ax + Mem0[ss:bp - 0x0010:word16] + C
	SCZO = cond(ax)
	sp = sp - 2
	Mem0[ss:sp:word16] = ax
	sp = sp - 2
	Mem0[ss:sp:word16] = dx
	v54 = Mem0[ds:0x29E5:word16]
	sp = sp - 2
	Mem0[ss:sp:word16] = v54
	v55 = Mem0[ds:0x29E3:word16]
	sp = sp - 2
	Mem0[ss:sp:word16] = v55
	call fn0800_ACB3 (retsize: 2;)
	sp = sp + 0x000A
	SCZO = cond(sp)
	ax = Mem0[ss:bp - 0x0002:word16]
	sp = bp
	bp = Mem0[ss:sp:word16]
	sp = sp + 2
	return
	// succ:  fn0800_4F2C_exit
fn0800_4F2C_exit:


// fn0800_518F
// Return size: 2
define fn0800_518F
fn0800_518F_entry:
	// succ:  l0800_518F
l0800_518F:
	sp = fp
	Top = 0
	v4 = Mem0[ds:0x29E5:word16]
	sp = sp - 2
	Mem0[ss:sp:word16] = v4
	v6 = Mem0[ds:0x29E3:word16]
	sp = sp - 2
	Mem0[ss:sp:word16] = v6
	call fn0800_5DCE (retsize: 2;)
	sp = sp + 0x0004
	SCZO = cond(sp)
	ax = ax | ax
	SZO = cond(ax)
	C = false
	branch Test(NE,Z) l0800_51A5
	// succ:  l0800_51A1 l0800_51A5
l0800_51A1:
	ax = 0x0007
	return
	// succ:  fn0800_518F_exit
l0800_51A5:
	call fn0800_5374 (retsize: 2;)
	return
	// succ:  fn0800_518F_exit
fn0800_518F_exit:


// fn0800_51A9
// Return size: 2
define fn0800_51A9
fn0800_51A9_entry:
	// succ:  l0800_51A9
l0800_51A9:
	sp = fp
	Top = 0
	sp = sp - 2
	Mem0[ss:sp:word16] = bp
	bp = sp
	sp = sp - 0x0004
	SCZO = cond(sp)
	sp = sp - 2
	Mem0[ss:sp:word16] = si
	goto l0800_533D
	// succ:  l0800_533D
l0800_51B3:
	v17 = Mem0[ds:0x29E5:word16]
	sp = sp - 2
	Mem0[ss:sp:word16] = v17
	v18 = Mem0[ds:0x29E3:word16]
	sp = sp - 2
	Mem0[ss:sp:word16] = v18
	call fn0800_3E9A (retsize: 2;)
	sp = sp + 0x0004
	SCZO = cond(sp)
	ax = ax | ax
	SZO = cond(ax)
	C = false
	branch Test(EQ,Z) l0800_51D5
	// succ:  l0800_51C5 l0800_51D5
l0800_51C5:
	SCZO = cond(ax - 0x0001)
	branch Test(EQ,Z) l0800_51F5
	// succ:  l0800_51CA l0800_51F5
l0800_51CA:
	SCZO = cond(ax - 0x0003)
	branch Test(NE,Z) l0800_51D2
	// succ:  l0800_51CF l0800_51D2
l0800_51CF:
	goto l0800_52D8
	// succ:  l0800_52D8
l0800_51D2:
	goto l0800_5301
	// succ:  l0800_5301
l0800_51D5:
	v20 = Mem0[ds:0x29E1:word16]
	sp = sp - 2
	Mem0[ss:sp:word16] = v20
	v21 = Mem0[ds:0x29DF:word16]
	sp = sp - 2
	Mem0[ss:sp:word16] = v21
	v22 = Mem0[ds:0x29E5:word16]
	sp = sp - 2
	Mem0[ss:sp:word16] = v22
	v23 = Mem0[ds:0x29E3:word16]
	sp = sp - 2
	Mem0[ss:sp:word16] = v23
	call fn0800_3DCF (retsize: 2;)
	sp = sp + 0x0004
	SCZO = cond(sp)
	sp = sp - 2
	Mem0[ss:sp:word16] = ax
	call fn0800_4047 (retsize: 2;)
	sp = sp + 0x0006
	SCZO = cond(sp)
	goto l0800_533D
	// succ:  l0800_533D
l0800_51F5:
	v33 = Mem0[ds:0x29E1:word16]
	sp = sp - 2
	Mem0[ss:sp:word16] = v33
	v34 = Mem0[ds:0x29DF:word16]
	sp = sp - 2
	Mem0[ss:sp:word16] = v34
	v35 = Mem0[ds:0x29E5:word16]
	sp = sp - 2
	Mem0[ss:sp:word16] = v35
	v36 = Mem0[ds:0x29E3:word16]
	sp = sp - 2
	Mem0[ss:sp:word16] = v36
	call fn0800_3E5D (retsize: 2;)
	sp = sp + 0x0004
	SCZO = cond(sp)
	sp = sp - 2
	Mem0[ss:sp:word16] = dx
	sp = sp - 2
	Mem0[ss:sp:word16] = ax
	call fn0800_409C (retsize: 2;)
	sp = sp + 0x0008
	SCZO = cond(sp)
	v37 = Mem0[ds:0x29E5:word16]
	sp = sp - 2
	Mem0[ss:sp:word16] = v37
	v38 = Mem0[ds:0x29E3:word16]
	sp = sp - 2
	Mem0[ss:sp:word16] = v38
	call fn0800_3FAD (retsize: 2;)
	sp = sp + 0x0004
	SCZO = cond(sp)
	Mem0[ss:bp - 0x0002:word16] = 0x0000
	Mem0[ss:bp - 0x0004:word16] = ax
	v39 = Mem0[ds:0x29E1:word16]
	sp = sp - 2
	Mem0[ss:sp:word16] = v39
	v40 = Mem0[ds:0x29DF:word16]
	sp = sp - 2
	Mem0[ss:sp:word16] = v40
	sp = sp - 2
	Mem0[ss:sp:word16] = ax
	call fn0800_40BF (retsize: 2;)
	sp = sp + 0x0006
	SCZO = cond(sp)
	v41 = Mem0[ds:0x29E5:word16]
	sp = sp - 2
	Mem0[ss:sp:word16] = v41
	v42 = Mem0[ds:0x29E3:word16]
	sp = sp - 2
	Mem0[ss:sp:word16] = v42
	call fn0800_3F58 (retsize: 2;)
	sp = sp + 0x0004
	SCZO = cond(sp)
	cl = 0x08
	call fn0800_8CAA (retsize: 2;)
	SCZO = cond(dx - 0x0052)
	branch Test(NE,Z) l0800_52BA
	// succ:  l0800_5250 l0800_52BA
l0800_5250:
	SCZO = cond(ax - 0x4E43)
	branch Test(NE,Z) l0800_52BA
	// succ:  l0800_5255 l0800_52BA
l0800_5255:
	call fn0800_5374 (retsize: 2;)
	si = ax
	si = si | si
	SZO = cond(si)
	C = false
	branch Test(EQ,Z) l0800_5263
	// succ:  l0800_525E l0800_5263
l0800_525E:
	si = Mem0[ss:sp:word16]
	sp = sp + 2
	sp = bp
	bp = Mem0[ss:sp:word16]
	sp = sp + 2
	return
	// succ:  fn0800_51A9_exit
l0800_5263:
	ax = 0x0001
	sp = sp - 2
	Mem0[ss:sp:word16] = ax
	ax = Mem0[ds:0x2A09:word16]
	dx = Mem0[ds:0x2A07:word16]
	dx = dx + 0x0002
	SCZO = cond(dx)
	ax = ax + 0x0000 + C
	SCZO = cond(ax)
	ax = -ax
	SCZO = cond(ax)
	C = ax == 0x0000
	dx = -dx
	SCZO = cond(dx)
	C = dx == 0x0000
	ax = ax - 0x0000 - C
	SCZO = cond(ax)
	sp = sp - 2
	Mem0[ss:sp:word16] = ax
	sp = sp - 2
	Mem0[ss:sp:word16] = dx
	v48 = Mem0[ds:0x29E1:word16]
	sp = sp - 2
	Mem0[ss:sp:word16] = v48
	v49 = Mem0[ds:0x29DF:word16]
	sp = sp - 2
	Mem0[ss:sp:word16] = v49
	call fn0800_ACB3 (retsize: 2;)
	sp = sp + 0x000A
	SCZO = cond(sp)
	v50 = Mem0[ds:0x29E1:word16]
	sp = sp - 2
	Mem0[ss:sp:word16] = v50
	v51 = Mem0[ds:0x29DF:word16]
	sp = sp - 2
	Mem0[ss:sp:word16] = v51
	v52 = Mem0[ds:0x2A07:word16]
	sp = sp - 2
	Mem0[ss:sp:word16] = v52
	call fn0800_40BF (retsize: 2;)
	sp = sp + 0x0006
	SCZO = cond(sp)
	ax = 0x0001
	sp = sp - 2
	Mem0[ss:sp:word16] = ax
	v53 = Mem0[ds:0x2A09:word16]
	sp = sp - 2
	Mem0[ss:sp:word16] = v53
	v54 = Mem0[ds:0x2A07:word16]
	sp = sp - 2
	Mem0[ss:sp:word16] = v54
	v55 = Mem0[ds:0x29E1:word16]
	sp = sp - 2
	Mem0[ss:sp:word16] = v55
	v56 = Mem0[ds:0x29DF:word16]
	sp = sp - 2
	Mem0[ss:sp:word16] = v56
	call fn0800_ACB3 (retsize: 2;)
	sp = sp + 0x000A
	SCZO = cond(sp)
	goto l0800_533D
	// succ:  l0800_533D
l0800_52BA:
	v57 = Mem0[ss:bp - 0x0002:word16]
	sp = sp - 2
	Mem0[ss:sp:word16] = v57
	v58 = Mem0[ss:bp - 0x0004:word16]
	sp = sp - 2
	Mem0[ss:sp:word16] = v58
	v59 = Mem0[ds:0x29E1:word16]
	sp = sp - 2
	Mem0[ss:sp:word16] = v59
	v60 = Mem0[ds:0x29DF:word16]
	sp = sp - 2
	Mem0[ss:sp:word16] = v60
	v61 = Mem0[ds:0x29E5:word16]
	sp = sp - 2
	Mem0[ss:sp:word16] = v61
	v62 = Mem0[ds:0x29E3:word16]
	sp = sp - 2
	Mem0[ss:sp:word16] = v62
	call fn0800_3B0A (retsize: 2;)
	sp = sp + 0x000C
	SCZO = cond(sp)
	goto l0800_533D
	// succ:  l0800_533D
l0800_52D8:
	si = si ^ si
	SZO = cond(si)
	C = false
	goto l0800_52FA
	// succ:  l0800_52FA
l0800_52DC:
	v44 = Mem0[ds:0x29E1:word16]
	sp = sp - 2
	Mem0[ss:sp:word16] = v44
	v45 = Mem0[ds:0x29DF:word16]
	sp = sp - 2
	Mem0[ss:sp:word16] = v45
	v46 = Mem0[ds:0x29E5:word16]
	sp = sp - 2
	Mem0[ss:sp:word16] = v46
	v47 = Mem0[ds:0x29E3:word16]
	sp = sp - 2
	Mem0[ss:sp:word16] = v47
	call fn0800_3DCF (retsize: 2;)
	sp = sp + 0x0004
	SCZO = cond(sp)
	sp = sp - 2
	Mem0[ss:sp:word16] = ax
	call fn0800_4047 (retsize: 2;)
	sp = sp + 0x0006
	SCZO = cond(sp)
	si = si + 0x0001
	SZO = cond(si)
	// succ:  l0800_52FA
l0800_52FA:
	SCZO = cond(si - 0x0003)
	branch Test(NE,Z) l0800_52DC
	// succ:  l0800_52FF l0800_52DC
l0800_52FF:
	goto l0800_533D
	// succ:  l0800_533D
l0800_5301:
	v24 = Mem0[ds:0x29E5:word16]
	sp = sp - 2
	Mem0[ss:sp:word16] = v24
	v25 = Mem0[ds:0x29E3:word16]
	sp = sp - 2
	Mem0[ss:sp:word16] = v25
	call fn0800_4194 (retsize: 2;)
	sp = sp + 0x0004
	SCZO = cond(sp)
	sp = sp - 2
	Mem0[ss:sp:word16] = ax
	sp = sp - 2
	Mem0[ss:sp:word16] = dx
	v26 = Mem0[ds:0x29E5:word16]
	sp = sp - 2
	Mem0[ss:sp:word16] = v26
	v27 = Mem0[ds:0x29E3:word16]
	sp = sp - 2
	Mem0[ss:sp:word16] = v27
	call fn0800_AD2F (retsize: 2;)
	sp = sp + 0x0004
	SCZO = cond(sp)
	bx = Mem0[ss:sp:word16]
	sp = sp + 2
	cx = Mem0[ss:sp:word16]
	sp = sp + 2
	cx = cx - ax
	SCZO = cond(cx)
	bx = bx - dx - C
	SCZO = cond(bx)
	sp = sp - 2
	Mem0[ss:sp:word16] = bx
	sp = sp - 2
	Mem0[ss:sp:word16] = cx
	v29 = Mem0[ds:0x29E1:word16]
	sp = sp - 2
	Mem0[ss:sp:word16] = v29
	v30 = Mem0[ds:0x29DF:word16]
	sp = sp - 2
	Mem0[ss:sp:word16] = v30
	v31 = Mem0[ds:0x29E5:word16]
	sp = sp - 2
	Mem0[ss:sp:word16] = v31
	v32 = Mem0[ds:0x29E3:word16]
	sp = sp - 2
	Mem0[ss:sp:word16] = v32
	call fn0800_3B0A (retsize: 2;)
	sp = sp + 0x000C
	SCZO = cond(sp)
	// succ:  l0800_533D
l0800_533D:
	v8 = Mem0[ds:0x29E5:word16]
	sp = sp - 2
	Mem0[ss:sp:word16] = v8
	v9 = Mem0[ds:0x29E3:word16]
	sp = sp - 2
	Mem0[ss:sp:word16] = v9
	call fn0800_AD2F (retsize: 2;)
	sp = sp + 0x0004
	SCZO = cond(sp)
	sp = sp - 2
	Mem0[ss:sp:word16] = ax
	sp = sp - 2
	Mem0[ss:sp:word16] = dx
	v12 = Mem0[ds:0x29E5:word16]
	sp = sp - 2
	Mem0[ss:sp:word16] = v12
	v13 = Mem0[ds:0x29E3:word16]
	sp = sp - 2
	Mem0[ss:sp:word16] = v13
	call fn0800_4194 (retsize: 2;)
	sp = sp + 0x0004
	SCZO = cond(sp)
	bx = Mem0[ss:sp:word16]
	sp = sp + 2
	SCZO = cond(bx - dx)
	dx = Mem0[ss:sp:word16]
	sp = sp + 2
	branch Test(UGE,C) l0800_5364
	// succ:  l0800_5361 l0800_5364
l0800_5361:
	goto l0800_51B3
	// succ:  l0800_51B3
l0800_5364:
	branch Test(NE,Z) l0800_536D
	// succ:  l0800_5366 l0800_536D
l0800_5366:
	SCZO = cond(dx - ax)
	branch Test(UGE,C) l0800_536D
	// succ:  l0800_536A l0800_536D
l0800_536A:
	goto l0800_51B3
	// succ:  l0800_51B3
l0800_536D:
	ax = ax ^ ax
	SZO = cond(ax)
	C = false
	si = Mem0[ss:sp:word16]
	sp = sp + 2
	sp = bp
	bp = Mem0[ss:sp:word16]
	sp = sp + 2
	return
	// succ:  fn0800_51A9_exit
fn0800_51A9_exit:


// fn0800_5374
// Return size: 2
define fn0800_5374
fn0800_5374_entry:
	// succ:  l0800_5374
l0800_5374:
	sp = fp
	Top = 0
	sp = sp - 2
	Mem0[ss:sp:word16] = bp
	bp = sp
	sp = sp - 0x000E
	SCZO = cond(sp)
	sp = sp - 2
	Mem0[ss:sp:word16] = si
	v8 = Mem0[ds:0x29E5:word16]
	sp = sp - 2
	Mem0[ss:sp:word16] = v8
	v9 = Mem0[ds:0x29E3:word16]
	sp = sp - 2
	Mem0[ss:sp:word16] = v9
	call fn0800_AD2F (retsize: 2;)
	sp = sp + 0x0004
	SCZO = cond(sp)
	Mem0[ss:bp - 0x000A:word16] = dx
	Mem0[ss:bp - 0x000C:word16] = ax
	v12 = Mem0[ds:0x29E5:word16]
	sp = sp - 2
	Mem0[ss:sp:word16] = v12
	v13 = Mem0[ds:0x29E3:word16]
	sp = sp - 2
	Mem0[ss:sp:word16] = v13
	call fn0800_3E5D (retsize: 2;)
	sp = sp + 0x0004
	SCZO = cond(sp)
	ax = ax & 0x0003
	SZO = cond(ax)
	C = false
	Mem0[ds:0x2A21:word16] = ax
	v16 = Mem0[ds:0x29E5:word16]
	sp = sp - 2
	Mem0[ss:sp:word16] = v16
	v17 = Mem0[ds:0x29E3:word16]
	sp = sp - 2
	Mem0[ss:sp:word16] = v17
	call fn0800_3E5D (retsize: 2;)
	sp = sp + 0x0004
	SCZO = cond(sp)
	Mem0[ds:0x2A09:word16] = dx
	Mem0[ds:0x2A07:word16] = ax
	SCZO = cond(Mem0[ds:0x2A21:word16] - 0x0000)
	branch Test(NE,Z) l0800_53EF
	// succ:  l0800_53BF l0800_53EF
l0800_53BF:
	v19 = Mem0[ds:0x2A09:word16]
	sp = sp - 2
	Mem0[ss:sp:word16] = v19
	sp = sp - 2
	Mem0[ss:sp:word16] = ax
	v20 = Mem0[ds:0x29E1:word16]
	sp = sp - 2
	Mem0[ss:sp:word16] = v20
	v21 = Mem0[ds:0x29DF:word16]
	sp = sp - 2
	Mem0[ss:sp:word16] = v21
	v22 = Mem0[ds:0x29E5:word16]
	sp = sp - 2
	Mem0[ss:sp:word16] = v22
	v23 = Mem0[ds:0x29E3:word16]
	sp = sp - 2
	Mem0[ss:sp:word16] = v23
	call fn0800_3B0A (retsize: 2;)
	sp = sp + 0x000C
	SCZO = cond(sp)
	ax = Mem0[ds:0x2A09:word16]
	dx = Mem0[ds:0x2A07:word16]
	Mem0[ds:0x2A05:word16] = ax
	Mem0[ds:0x2A03:word16] = dx
	ax = ax ^ ax
	SZO = cond(ax)
	C = false
	si = Mem0[ss:sp:word16]
	sp = sp + 2
	sp = bp
	bp = Mem0[ss:sp:word16]
	sp = sp + 2
	return
	// succ:  fn0800_5374_exit
l0800_53EF:
	v24 = Mem0[ds:0x29E5:word16]
	sp = sp - 2
	Mem0[ss:sp:word16] = v24
	v25 = Mem0[ds:0x29E3:word16]
	sp = sp - 2
	Mem0[ss:sp:word16] = v25
	call fn0800_3E5D (retsize: 2;)
	sp = sp + 0x0004
	SCZO = cond(sp)
	Mem0[ds:0x2A05:word16] = dx
	Mem0[ds:0x2A03:word16] = ax
	v26 = Mem0[ds:0x29E5:word16]
	sp = sp - 2
	Mem0[ss:sp:word16] = v26
	v27 = Mem0[ds:0x29E3:word16]
	sp = sp - 2
	Mem0[ss:sp:word16] = v27
	call fn0800_3E27 (retsize: 2;)
	sp = sp + 0x0004
	SCZO = cond(sp)
	Mem0[ds:0x2E4B:word16] = ax
	v28 = Mem0[ds:0x29E5:word16]
	sp = sp - 2
	Mem0[ss:sp:word16] = v28
	v29 = Mem0[ds:0x29E3:word16]
	sp = sp - 2
	Mem0[ss:sp:word16] = v29
	call fn0800_3E27 (retsize: 2;)
	sp = sp + 0x0004
	SCZO = cond(sp)
	Mem0[ds:0x2E49:word16] = ax
	v30 = Mem0[ds:0x29E5:word16]
	sp = sp - 2
	Mem0[ss:sp:word16] = v30
	v31 = Mem0[ds:0x29E3:word16]
	sp = sp - 2
	Mem0[ss:sp:word16] = v31
	call fn0800_3E27 (retsize: 2;)
	sp = sp + 0x0004
	SCZO = cond(sp)
	v32 = Mem0[ds:0x2A05:word16]
	sp = sp - 2
	Mem0[ss:sp:word16] = v32
	v33 = Mem0[ds:0x2A03:word16]
	sp = sp - 2
	Mem0[ss:sp:word16] = v33
	v34 = Mem0[ds:0x29E5:word16]
	sp = sp - 2
	Mem0[ss:sp:word16] = v34
	v35 = Mem0[ds:0x29E3:word16]
	sp = sp - 2
	Mem0[ss:sp:word16] = v35
	call fn0800_2D0A (retsize: 2;)
	sp = sp + 0x0008
	SCZO = cond(sp)
	SCZO = cond(ax - Mem0[ds:0x2E49:word16])
	branch Test(EQ,Z) l0800_5458
	// succ:  l0800_5450 l0800_5458
l0800_5450:
	ax = 0x0005
	si = Mem0[ss:sp:word16]
	sp = sp + 2
	sp = bp
	bp = Mem0[ss:sp:word16]
	sp = sp + 2
	return
	// succ:  fn0800_5374_exit
l0800_5458:
	ax = 0x0001
	dx = 0x000F
	sp = sp - 2
	Mem0[ss:sp:word16] = ax
	sp = sp - 2
	Mem0[ss:sp:word16] = dx
	call fn0800_4311 (retsize: 2;)
	sp = sp + 0x0004
	SCZO = cond(sp)
	Mem0[ss:bp - 0x0006:word16] = dx
	Mem0[ss:bp - 0x0008:word16] = ax
	dx = dx + 0x0001
	SZO = cond(dx)
	Mem0[ds:0x2E73:word16] = dx
	Mem0[ds:0x2E71:word16] = 0x0000
	ax = 0x0001
	dx = 0x000F
	sp = sp - 2
	Mem0[ss:sp:word16] = ax
	sp = sp - 2
	Mem0[ss:sp:word16] = dx
	call fn0800_4311 (retsize: 2;)
	sp = sp + 0x0004
	SCZO = cond(sp)
	Mem0[ss:bp - 0x0002:word16] = dx
	Mem0[ss:bp - 0x0004:word16] = ax
	dx = dx + 0x0001
	SZO = cond(dx)
	Mem0[ds:0x2E5B:word16] = dx
	Mem0[ds:0x2E59:word16] = 0x0000
	ax = Mem0[ds:0x2E73:word16]
	dx = Mem0[ds:0x2E71:word16]
	dx = dx + 0xFFFD
	SCZO = cond(dx)
	Mem0[ds:0x2E6F:word16] = ax
	Mem0[ds:0x2E6D:word16] = dx
	ax = Mem0[ds:0x2E5B:word16]
	dx = Mem0[ds:0x2E59:word16]
	dx = dx + Mem0[ds:0x2E31:word16]
	SCZO = cond(dx)
	Mem0[ds:0x2E57:word16] = ax
	Mem0[ds:0x2E55:word16] = dx
	Mem0[ds:0x2E4D:word16] = 0x0000
	si = si ^ si
	SZO = cond(si)
	C = false
	Mem0[ds:0x2E45:word16] = 0x0000
	Mem0[ds:0x29FD:word16] = 0x0000
	Mem0[ds:0x29FB:word16] = 0x0000
	Mem0[ds:0x2A01:word16] = 0x0000
	Mem0[ds:0x29FF:word16] = 0x0000
	ax = Mem0[ds:0x2E4F:word16]
	Mem0[ss:bp - 0x000E:word16] = ax
	ax = 0x0001
	sp = sp - 2
	Mem0[ss:sp:word16] = ax
	call fn0800_5C1A (retsize: 2;)
	sp = sp + 0x0002
	SCZO = cond(sp)
	ax = ax | ax
	SZO = cond(ax)
	C = false
	branch Test(EQ,Z) l0800_5504
	// succ:  l0800_54F3 l0800_5504
l0800_54F3:
	SCZO = cond(Mem0[ds:0x2A25:word16] - 0x0002)
	branch Test(EQ,Z) l0800_5504
	// succ:  l0800_54FA l0800_5504
l0800_54FA:
	SCZO = cond(Mem0[ds:0x2A25:word16] - 0x0007)
	branch Test(EQ,Z) l0800_5504
	// succ:  l0800_5501 l0800_5504
l0800_5501:
	si = 0x000A
	// succ:  l0800_5504
l0800_5504:
	si = si | si
	SZO = cond(si)
	C = false
	branch Test(NE,Z) l0800_555D
	// succ:  l0800_5508 l0800_555D
l0800_5508:
	ax = 0x0001
	sp = sp - 2
	Mem0[ss:sp:word16] = ax
	call fn0800_5C1A (retsize: 2;)
	sp = sp + 0x0002
	SCZO = cond(sp)
	ax = ax | ax
	SZO = cond(ax)
	C = false
	branch Test(EQ,Z) l0800_5557
	// succ:  l0800_5516 l0800_5557
l0800_5516:
	SCZO = cond(Mem0[ds:0x2A23:word16] - 0x0001)
	branch Test(EQ,Z) l0800_554B
	// succ:  l0800_551D l0800_554B
l0800_551D:
	ax = 0x0010
	sp = sp - 2
	Mem0[ss:sp:word16] = ax
	call fn0800_5C1A (retsize: 2;)
	sp = sp + 0x0002
	SCZO = cond(sp)
	dx = ax
	SCZO = cond(Mem0[ds:0x2A25:word16] - 0x0002)
	branch Test(NE,Z) l0800_553B
	// succ:  l0800_5530 l0800_553B
l0800_5530:
	SCZO = cond(Mem0[ds:0x2E4F:word16] - 0x0000)
	branch Test(NE,Z) l0800_553B
	// succ:  l0800_5537 l0800_553B
l0800_5537:
	Mem0[ds:0x2E4F:word16] = dx
	// succ:  l0800_553B
l0800_553B:
	SCZO = cond(Mem0[ds:0x2E4F:word16] - dx)
	branch Test(EQ,Z) l0800_554B
	// succ:  l0800_5541 l0800_554B
l0800_5541:
	SCZO = cond(Mem0[ds:0x2E4F:word16] - 0x0000)
	branch Test(EQ,Z) l0800_554B
	// succ:  l0800_5548 l0800_554B
l0800_5548:
	si = 0x000C
	// succ:  l0800_554B
l0800_554B:
	SCZO = cond(Mem0[ds:0x2E4F:word16] - 0x0000)
	branch Test(NE,Z) l0800_555D
	// succ:  l0800_5552 l0800_555D
l0800_5552:
	si = 0x000B
	goto l0800_555D
	// succ:  l0800_555D
l0800_5557:
	Mem0[ds:0x2E4F:word16] = 0x0000
	// succ:  l0800_555D
l0800_555D:
	si = si | si
	SZO = cond(si)
	C = false
	branch Test(NE,Z) l0800_557C
	// succ:  l0800_5561 l0800_557C
l0800_5561:
	ax = Mem0[ds:0x2A21:word16]
	SCZO = cond(ax - 0x0001)
	branch Test(EQ,Z) l0800_5570
	// succ:  l0800_5569 l0800_5570
l0800_5569:
	SCZO = cond(ax - 0x0002)
	branch Test(EQ,Z) l0800_5577
	// succ:  l0800_556E l0800_5577
l0800_556E:
	goto l0800_557C
	// succ:  l0800_557C
l0800_5570:
	call fn0800_55E8 (retsize: 2;)
	si = ax
	goto l0800_557C
	// succ:  l0800_557C
l0800_5577:
	call fn0800_579B (retsize: 2;)
	si = ax
	// succ:  l0800_557C
l0800_557C:
	ax = Mem0[ss:bp - 0x000E:word16]
	Mem0[ds:0x2E4F:word16] = ax
	v36 = Mem0[ss:bp - 0x0006:word16]
	sp = sp - 2
	Mem0[ss:sp:word16] = v36
	v37 = Mem0[ss:bp - 0x0008:word16]
	sp = sp - 2
	Mem0[ss:sp:word16] = v37
	call fn0800_4346 (retsize: 2;)
	sp = sp + 0x0004
	SCZO = cond(sp)
	v38 = Mem0[ss:bp - 0x0002:word16]
	sp = sp - 2
	Mem0[ss:sp:word16] = v38
	v39 = Mem0[ss:bp - 0x0004:word16]
	sp = sp - 2
	Mem0[ss:sp:word16] = v39
	call fn0800_4346 (retsize: 2;)
	sp = sp + 0x0004
	SCZO = cond(sp)
	v40 = Mem0[ds:0x2A03:word16] + 0x0012
	Mem0[ds:0x2A03:word16] = v40
	SCZO = cond(v40)
	v41 = Mem0[ds:0x2A05:word16] + 0x00 + C
	Mem0[ds:0x2A05:word16] = v41
	SCZO = cond(v41)
	ax = ax ^ ax
	SZO = cond(ax)
	C = false
	sp = sp - 2
	Mem0[ss:sp:word16] = ax
	ax = Mem0[ss:bp - 0x000A:word16]
	dx = Mem0[ss:bp - 0x000C:word16]
	dx = dx + Mem0[ds:0x2A03:word16]
	SCZO = cond(dx)
	ax = ax + Mem0[ds:0x2A05:word16] + C
	SCZO = cond(ax)
	sp = sp - 2
	Mem0[ss:sp:word16] = ax
	sp = sp - 2
	Mem0[ss:sp:word16] = dx
	v42 = Mem0[ds:0x29E5:word16]
	sp = sp - 2
	Mem0[ss:sp:word16] = v42
	v43 = Mem0[ds:0x29E3:word16]
	sp = sp - 2
	Mem0[ss:sp:word16] = v43
	call fn0800_ACB3 (retsize: 2;)
	sp = sp + 0x000A
	SCZO = cond(sp)
	si = si | si
	SZO = cond(si)
	C = false
	branch Test(EQ,Z) l0800_55D0
	// succ:  l0800_55C9 l0800_55D0
l0800_55C9:
	ax = si
	si = Mem0[ss:sp:word16]
	sp = sp + 2
	sp = bp
	bp = Mem0[ss:sp:word16]
	sp = sp + 2
	return
	// succ:  fn0800_5374_exit
l0800_55D0:
	ax = Mem0[ds:0x2E4D:word16]
	SCZO = cond(ax - Mem0[ds:0x2E4B:word16])
	branch Test(EQ,Z) l0800_55E1
	// succ:  l0800_55D9 l0800_55E1
l0800_55D9:
	ax = 0x0006
	si = Mem0[ss:sp:word16]
	sp = sp + 2
	sp = bp
	bp = Mem0[ss:sp:word16]
	sp = sp + 2
	return
	// succ:  fn0800_5374_exit
l0800_55E1:
	ax = ax ^ ax
	SZO = cond(ax)
	C = false
	si = Mem0[ss:sp:word16]
	sp = sp + 2
	sp = bp
	bp = Mem0[ss:sp:word16]
	sp = sp + 2
	return
	// succ:  fn0800_5374_exit
fn0800_5374_exit:


// fn0800_55E8
// Return size: 2
define fn0800_55E8
fn0800_55E8_entry:
	// succ:  l0800_55E8
l0800_55E8:
	sp = fp
	Top = 0
	sp = sp - 2
	Mem0[ss:sp:word16] = bp
	bp = sp
	sp = sp - 0x0004
	SCZO = cond(sp)
	goto l0800_574B
	// succ:  l0800_574B
l0800_55F1:
	ax = 0x0010
	sp = sp - 2
	Mem0[ss:sp:word16] = ax
	sp = sp - 2
	Mem0[ss:sp:word16] = ds
	ax = 0x290F
	sp = sp - 2
	Mem0[ss:sp:word16] = ax
	call fn0800_5A24 (retsize: 2;)
	sp = sp + 0x0006
	SCZO = cond(sp)
	ax = 0x0010
	sp = sp - 2
	Mem0[ss:sp:word16] = ax
	sp = sp - 2
	Mem0[ss:sp:word16] = ds
	ax = 0x284F
	sp = sp - 2
	Mem0[ss:sp:word16] = ax
	call fn0800_5A24 (retsize: 2;)
	sp = sp + 0x0006
	SCZO = cond(sp)
	ax = 0x0010
	sp = sp - 2
	Mem0[ss:sp:word16] = ax
	sp = sp - 2
	Mem0[ss:sp:word16] = ds
	ax = 0x278F
	sp = sp - 2
	Mem0[ss:sp:word16] = ax
	call fn0800_5A24 (retsize: 2;)
	sp = sp + 0x0006
	SCZO = cond(sp)
	ax = 0x0010
	sp = sp - 2
	Mem0[ss:sp:word16] = ax
	call fn0800_5C39 (retsize: 2;)
	sp = sp + 0x0002
	SCZO = cond(sp)
	Mem0[ss:bp - 0x0002:word16] = 0x0000
	Mem0[ss:bp - 0x0004:word16] = ax
	goto l0800_5736
	// succ:  l0800_5736
l0800_5633:
	sp = sp - 2
	Mem0[ss:sp:word16] = ds
	ax = 0x290F
	sp = sp - 2
	Mem0[ss:sp:word16] = ax
	call fn0800_5A8D (retsize: 2;)
	sp = sp + 0x0004
	SCZO = cond(sp)
	Mem0[ds:0x2E47:word16] = ax
	v17 = Mem0[ds:0x29FF:word16] + ax
	Mem0[ds:0x29FF:word16] = v17
	SCZO = cond(v17)
	v18 = Mem0[ds:0x2A01:word16] + 0x00 + C
	Mem0[ds:0x2A01:word16] = v18
	SCZO = cond(v18)
	SCZO = cond(Mem0[ds:0x2E47:word16] - 0x0000)
	branch Test(NE,Z) l0800_5654
	// succ:  l0800_5651 l0800_5654
l0800_5651:
	goto l0800_56E6
	// succ:  l0800_56E6
l0800_5654:
	goto l0800_5664
	// succ:  l0800_5664
l0800_5656:
	call fn0800_5B15 (retsize: 2;)
	al = al ^ Mem0[ds:0x2E4F:byte]
	SZO = cond(al)
	C = false
	sp = sp - 2
	Mem0[ss:sp:word16] = ax
	call fn0800_5D2F (retsize: 2;)
	sp = sp + 0x0002
	SCZO = cond(sp)
	// succ:  l0800_5664
l0800_5664:
	ax = Mem0[ds:0x2E47:word16]
	v21 = Mem0[ds:0x2E47:word16] - 0x0001
	Mem0[ds:0x2E47:word16] = v21
	SZO = cond(v21)
	ax = ax | ax
	SZO = cond(ax)
	C = false
	branch Test(NE,Z) l0800_5656
	// succ:  l0800_566F l0800_5656
l0800_566F:
	SZO = cond(Mem0[ds:0x2E4F:word16] & 0x0001)
	C = false
	branch Test(EQ,Z) l0800_5684
	// succ:  l0800_5677 l0800_5684
l0800_5677:
	ax = Mem0[ds:0x2E4F:word16]
	ax = ax >>u 0x0001
	SCZO = cond(ax)
	ax = ax | 0x8000
	SZO = cond(ax)
	C = false
	Mem0[ds:0x2E4F:word16] = ax
	goto l0800_5688
	// succ:  l0800_5688
l0800_5684:
	v35 = Mem0[ds:0x2E4F:word16] >>u 0x0001
	Mem0[ds:0x2E4F:word16] = v35
	SCZO = cond(v35)
	// succ:  l0800_5688
l0800_5688:
	es_bx = Mem0[ds:0x2E6D:segptr32]
	al = Mem0[es:bx + 0x0002:byte]
	ah = 0x00
	sp = sp - 2
	Mem0[ss:sp:word16] = ax
	ax = ax ^ ax
	SZO = cond(ax)
	C = false
	dl = Mem0[es:bx + 0x0001:byte]
	dh = 0x00
	cl = 0x08
	dx = dx << cl
	SCZO = cond(dx)
	ax = ax + dx
	SCZO = cond(ax)
	dx = Mem0[ss:sp:word16]
	sp = sp + 2
	dx = dx + 0x00 + C
	SCZO = cond(dx)
	bl = Mem0[es:bx:byte]
	bh = 0x00
	sp = sp - 2
	Mem0[ss:sp:word16] = ax
	ax = bx
	sp = sp - 2
	Mem0[ss:sp:word16] = dx
	dx_ax = (int32) ax
	bx = dx
	dx = Mem0[ss:sp:word16]
	sp = sp + 2
	cx = ax
	ax = Mem0[ss:sp:word16]
	sp = sp + 2
	ax = ax + cx
	SCZO = cond(ax)
	dx = dx + bx + C
	SCZO = cond(dx)
	cl = Mem0[ds:0x2E45:byte]
	call fn0800_8C69 (retsize: 2;)
	sp = sp - 2
	Mem0[ss:sp:word16] = ax
	ax = 0x0001
	cl = Mem0[ds:0x2E45:byte]
	ax = ax << cl
	SCZO = cond(ax)
	ax = ax - 0x0001
	SZO = cond(ax)
	sp = sp - 2
	Mem0[ss:sp:word16] = dx
	dx_ax = (int32) ax
	bx = Mem0[ds:0x29FD:word16]
	cx = Mem0[ds:0x29FB:word16]
	cx = cx & ax
	SZO = cond(cx)
	C = false
	bx = bx & dx
	SZO = cond(bx)
	C = false
	ax = Mem0[ss:sp:word16]
	sp = sp + 2
	dx = Mem0[ss:sp:word16]
	sp = sp + 2
	dx = dx + cx
	SCZO = cond(dx)
	ax = ax + bx + C
	SCZO = cond(ax)
	Mem0[ds:0x29FD:word16] = ax
	Mem0[ds:0x29FB:word16] = dx
	// succ:  l0800_56E6
l0800_56E6:
	ax = Mem0[ss:bp - 0x0004:word16]
	ax = ax | Mem0[ss:bp - 0x0002:word16]
	SZO = cond(ax)
	C = false
	branch Test(EQ,Z) l0800_574B
	// succ:  l0800_56EE l0800_574B
l0800_56EE:
	sp = sp - 2
	Mem0[ss:sp:word16] = ds
	ax = 0x284F
	sp = sp - 2
	Mem0[ss:sp:word16] = ax
	call fn0800_5A8D (retsize: 2;)
	sp = sp + 0x0004
	SCZO = cond(sp)
	ax = ax + 0x0001
	SZO = cond(ax)
	Mem0[ds:0x2E2B:word16] = ax
	sp = sp - 2
	Mem0[ss:sp:word16] = ds
	ax = 0x278F
	sp = sp - 2
	Mem0[ss:sp:word16] = ax
	call fn0800_5A8D (retsize: 2;)
	sp = sp + 0x0004
	SCZO = cond(sp)
	ax = ax + 0x0002
	SCZO = cond(ax)
	Mem0[ds:0x2E29:word16] = ax
	v19 = Mem0[ds:0x29FF:word16] + ax
	Mem0[ds:0x29FF:word16] = v19
	SCZO = cond(v19)
	v20 = Mem0[ds:0x2A01:word16] + 0x00 + C
	Mem0[ds:0x2A01:word16] = v20
	SCZO = cond(v20)
	goto l0800_572B
	// succ:  l0800_572B
l0800_5719:
	es_bx = Mem0[ds:0x2E55:segptr32]
	bx = bx - Mem0[ds:0x2E2B:word16]
	SCZO = cond(bx)
	al = Mem0[es:bx:byte]
	sp = sp - 2
	Mem0[ss:sp:word16] = ax
	call fn0800_5D2F (retsize: 2;)
	sp = sp + 0x0002
	SCZO = cond(sp)
	// succ:  l0800_572B
l0800_572B:
	ax = Mem0[ds:0x2E29:word16]
	v22 = Mem0[ds:0x2E29:word16] - 0x0001
	Mem0[ds:0x2E29:word16] = v22
	SZO = cond(v22)
	ax = ax | ax
	SZO = cond(ax)
	C = false
	branch Test(NE,Z) l0800_5719
	// succ:  l0800_5736 l0800_5719
l0800_5736:
	ax = Mem0[ss:bp - 0x0004:word16]
	dx = Mem0[ss:bp - 0x0002:word16]
	v11 = Mem0[ss:bp - 0x0004:word16] - 0x0001
	Mem0[ss:bp - 0x0004:word16] = v11
	SCZO = cond(v11)
	v12 = Mem0[ss:bp - 0x0002:word16] - 0x00 - C
	Mem0[ss:bp - 0x0002:word16] = v12
	SCZO = cond(v12)
	ax = ax | dx
	SZO = cond(ax)
	C = false
	branch Test(EQ,Z) l0800_574B
	// succ:  l0800_5748 l0800_574B
l0800_5748:
	goto l0800_5633
	// succ:  l0800_5633
l0800_574B:
	ax = Mem0[ds:0x2A01:word16]
	dx = Mem0[ds:0x29FF:word16]
	SCZO = cond(ax - Mem0[ds:0x2A09:word16])
	branch Test(UGE,C) l0800_575B
	// succ:  l0800_5758 l0800_575B
l0800_5758:
	goto l0800_55F1
	// succ:  l0800_55F1
l0800_575B:
	branch Test(NE,Z) l0800_5766
	// succ:  l0800_575D l0800_5766
l0800_575D:
	SCZO = cond(dx - Mem0[ds:0x2A07:word16])
	branch Test(UGE,C) l0800_5766
	// succ:  l0800_5763 l0800_5766
l0800_5763:
	goto l0800_55F1
	// succ:  l0800_55F1
l0800_5766:
	v14 = Mem0[ds:0x29E1:word16]
	sp = sp - 2
	Mem0[ss:sp:word16] = v14
	v15 = Mem0[ds:0x29DF:word16]
	sp = sp - 2
	Mem0[ss:sp:word16] = v15
	ax = Mem0[ds:0x2E55:word16]
	dx = dx ^ dx
	SZO = cond(dx)
	C = false
	ax = ax - Mem0[ds:0x2E59:word16]
	SCZO = cond(ax)
	dx = dx - 0x00 - C
	SCZO = cond(dx)
	ax = ax - Mem0[ds:0x2E31:word16]
	SCZO = cond(ax)
	dx = dx - 0x00 - C
	SCZO = cond(dx)
	sp = sp - 2
	Mem0[ss:sp:word16] = dx
	sp = sp - 2
	Mem0[ss:sp:word16] = ax
	ax = Mem0[ds:0x2E59:word16]
	ax = ax + Mem0[ds:0x2E31:word16]
	SCZO = cond(ax)
	v16 = Mem0[ds:0x2E5B:word16]
	sp = sp - 2
	Mem0[ss:sp:word16] = v16
	sp = sp - 2
	Mem0[ss:sp:word16] = ax
	call fn0800_4152 (retsize: 2;)
	sp = sp + 0x000C
	SCZO = cond(sp)
	ax = ax ^ ax
	SZO = cond(ax)
	C = false
	sp = bp
	bp = Mem0[ss:sp:word16]
	sp = sp + 2
	return
	// succ:  fn0800_55E8_exit
fn0800_55E8_exit:


// fn0800_579B
// Return size: 2
define fn0800_579B
fn0800_579B_entry:
	// succ:  l0800_579B
l0800_579B:
	sp = fp
	Top = 0
	goto l0800_58F2
	// succ:  l0800_58F2
l0800_579E:
	call fn0800_5B15 (retsize: 2;)
	al = al ^ Mem0[ds:0x2E4F:byte]
	SZO = cond(al)
	C = false
	sp = sp - 2
	Mem0[ss:sp:word16] = ax
	call fn0800_5D2F (retsize: 2;)
	sp = sp + 0x0002
	SCZO = cond(sp)
	SZO = cond(Mem0[ds:0x2E4F:word16] & 0x0001)
	C = false
	branch Test(EQ,Z) l0800_57C1
	// succ:  l0800_57B4 l0800_57C1
l0800_57B4:
	ax = Mem0[ds:0x2E4F:word16]
	ax = ax >>u 0x0001
	SCZO = cond(ax)
	ax = ax | 0x8000
	SZO = cond(ax)
	C = false
	Mem0[ds:0x2E4F:word16] = ax
	goto l0800_57C5
	// succ:  l0800_57C5
l0800_57C1:
	v15 = Mem0[ds:0x2E4F:word16] >>u 0x0001
	Mem0[ds:0x2E4F:word16] = v15
	SCZO = cond(v15)
	// succ:  l0800_57C5
l0800_57C5:
	v16 = Mem0[ds:0x29FF:word16] + 0x0001
	Mem0[ds:0x29FF:word16] = v16
	SCZO = cond(v16)
	v17 = Mem0[ds:0x2A01:word16] + 0x00 + C
	Mem0[ds:0x2A01:word16] = v17
	SCZO = cond(v17)
	// succ:  l0800_57CF
l0800_57CF:
	ax = 0x0001
	sp = sp - 2
	Mem0[ss:sp:word16] = ax
	call fn0800_5CD9 (retsize: 2;)
	sp = sp + 0x0002
	SCZO = cond(sp)
	ax = ax | ax
	SZO = cond(ax)
	C = false
	branch Test(EQ,Z) l0800_579E
	// succ:  l0800_57DD l0800_579E
l0800_57DD:
	ax = 0x0001
	sp = sp - 2
	Mem0[ss:sp:word16] = ax
	call fn0800_5CD9 (retsize: 2;)
	sp = sp + 0x0002
	SCZO = cond(sp)
	ax = ax | ax
	SZO = cond(ax)
	C = false
	branch Test(EQ,Z) l0800_5866
	// succ:  l0800_57EB l0800_5866
l0800_57EB:
	ax = 0x0001
	sp = sp - 2
	Mem0[ss:sp:word16] = ax
	call fn0800_5CD9 (retsize: 2;)
	sp = sp + 0x0002
	SCZO = cond(sp)
	ax = ax | ax
	SZO = cond(ax)
	C = false
	branch Test(NE,Z) l0800_580A
	// succ:  l0800_57F9 l0800_580A
l0800_57F9:
	Mem0[ds:0x2E29:word16] = 0x0002
	call fn0800_5B15 (retsize: 2;)
	ah = 0x00
	ax = ax + 0x0001
	SZO = cond(ax)
	Mem0[ds:0x2E2B:word16] = ax
	goto l0800_5838
	// succ:  l0800_5838
l0800_580A:
	ax = 0x0001
	sp = sp - 2
	Mem0[ss:sp:word16] = ax
	call fn0800_5CD9 (retsize: 2;)
	sp = sp + 0x0002
	SCZO = cond(sp)
	ax = ax | ax
	SZO = cond(ax)
	C = false
	branch Test(NE,Z) l0800_5820
	// succ:  l0800_5818 l0800_5820
l0800_5818:
	Mem0[ds:0x2E29:word16] = 0x0003
	goto l0800_5835
	// succ:  l0800_5835
l0800_5820:
	call fn0800_5B15 (retsize: 2;)
	ah = 0x00
	ax = ax + 0x0008
	SCZO = cond(ax)
	Mem0[ds:0x2E29:word16] = ax
	SCZO = cond(Mem0[ds:0x2E29:word16] - 0x0008)
	branch Test(NE,Z) l0800_5835
	// succ:  l0800_5832 l0800_5835
l0800_5832:
	goto l0800_58E8
	// succ:  l0800_58E8
l0800_5835:
	call fn0800_5975 (retsize: 2;)
	// succ:  l0800_5838
l0800_5838:
	ax = Mem0[ds:0x2E29:word16]
	v13 = Mem0[ds:0x29FF:word16] + ax
	Mem0[ds:0x29FF:word16] = v13
	SCZO = cond(v13)
	v14 = Mem0[ds:0x2A01:word16] + 0x00 + C
	Mem0[ds:0x2A01:word16] = v14
	SCZO = cond(v14)
	goto l0800_5858
	// succ:  l0800_5858
l0800_5846:
	es_bx = Mem0[ds:0x2E55:segptr32]
	bx = bx - Mem0[ds:0x2E2B:word16]
	SCZO = cond(bx)
	al = Mem0[es:bx:byte]
	sp = sp - 2
	Mem0[ss:sp:word16] = ax
	call fn0800_5D2F (retsize: 2;)
	sp = sp + 0x0002
	SCZO = cond(sp)
	// succ:  l0800_5858
l0800_5858:
	ax = Mem0[ds:0x2E29:word16]
	v18 = Mem0[ds:0x2E29:word16] - 0x0001
	Mem0[ds:0x2E29:word16] = v18
	SZO = cond(v18)
	ax = ax | ax
	SZO = cond(ax)
	C = false
	branch Test(NE,Z) l0800_5846
	// succ:  l0800_5863 l0800_5846
l0800_5863:
	goto l0800_57CF
	// succ:  l0800_57CF
l0800_5866:
	call fn0800_593F (retsize: 2;)
	SCZO = cond(Mem0[ds:0x2E29:word16] - 0x0009)
	branch Test(NE,Z) l0800_58B7
	// succ:  l0800_5870 l0800_58B7
l0800_5870:
	call fn0800_5A0F (retsize: 2;)
	ax = Mem0[ds:0x2E47:word16]
	v22 = Mem0[ds:0x29FF:word16] + ax
	Mem0[ds:0x29FF:word16] = v22
	SCZO = cond(v22)
	v23 = Mem0[ds:0x2A01:word16] + 0x00 + C
	Mem0[ds:0x2A01:word16] = v23
	SCZO = cond(v23)
	goto l0800_588F
	// succ:  l0800_588F
l0800_5881:
	call fn0800_5B15 (retsize: 2;)
	al = al ^ Mem0[ds:0x2E4F:byte]
	SZO = cond(al)
	C = false
	sp = sp - 2
	Mem0[ss:sp:word16] = ax
	call fn0800_5D2F (retsize: 2;)
	sp = sp + 0x0002
	SCZO = cond(sp)
	// succ:  l0800_588F
l0800_588F:
	ax = Mem0[ds:0x2E47:word16]
	v27 = Mem0[ds:0x2E47:word16] - 0x0001
	Mem0[ds:0x2E47:word16] = v27
	SZO = cond(v27)
	ax = ax | ax
	SZO = cond(ax)
	C = false
	branch Test(NE,Z) l0800_5881
	// succ:  l0800_589A l0800_5881
l0800_589A:
	SZO = cond(Mem0[ds:0x2E4F:word16] & 0x0001)
	C = false
	branch Test(EQ,Z) l0800_58B0
	// succ:  l0800_58A2 l0800_58B0
l0800_58A2:
	ax = Mem0[ds:0x2E4F:word16]
	ax = ax >>u 0x0001
	SCZO = cond(ax)
	ax = ax | 0x8000
	SZO = cond(ax)
	C = false
	Mem0[ds:0x2E4F:word16] = ax
	goto l0800_57CF
	// succ:  l0800_57CF
l0800_58B0:
	v30 = Mem0[ds:0x2E4F:word16] >>u 0x0001
	Mem0[ds:0x2E4F:word16] = v30
	SCZO = cond(v30)
	goto l0800_57CF
	// succ:  l0800_57CF
l0800_58B7:
	call fn0800_5975 (retsize: 2;)
	ax = Mem0[ds:0x2E29:word16]
	v28 = Mem0[ds:0x29FF:word16] + ax
	Mem0[ds:0x29FF:word16] = v28
	SCZO = cond(v28)
	v29 = Mem0[ds:0x2A01:word16] + 0x00 + C
	Mem0[ds:0x2A01:word16] = v29
	SCZO = cond(v29)
	goto l0800_58DA
	// succ:  l0800_58DA
l0800_58C8:
	es_bx = Mem0[ds:0x2E55:segptr32]
	bx = bx - Mem0[ds:0x2E2B:word16]
	SCZO = cond(bx)
	al = Mem0[es:bx:byte]
	sp = sp - 2
	Mem0[ss:sp:word16] = ax
	call fn0800_5D2F (retsize: 2;)
	sp = sp + 0x0002
	SCZO = cond(sp)
	// succ:  l0800_58DA
l0800_58DA:
	ax = Mem0[ds:0x2E29:word16]
	v31 = Mem0[ds:0x2E29:word16] - 0x0001
	Mem0[ds:0x2E29:word16] = v31
	SZO = cond(v31)
	ax = ax | ax
	SZO = cond(ax)
	C = false
	branch Test(NE,Z) l0800_58C8
	// succ:  l0800_58E5 l0800_58C8
l0800_58E5:
	goto l0800_57CF
	// succ:  l0800_57CF
l0800_58E8:
	ax = 0x0001
	sp = sp - 2
	Mem0[ss:sp:word16] = ax
	call fn0800_5CD9 (retsize: 2;)
	sp = sp + 0x0002
	SCZO = cond(sp)
	// succ:  l0800_58F2
l0800_58F2:
	ax = Mem0[ds:0x2A01:word16]
	dx = Mem0[ds:0x29FF:word16]
	SCZO = cond(ax - Mem0[ds:0x2A09:word16])
	branch Test(UGE,C) l0800_5902
	// succ:  l0800_58FF l0800_5902
l0800_58FF:
	goto l0800_57CF
	// succ:  l0800_57CF
l0800_5902:
	branch Test(NE,Z) l0800_590D
	// succ:  l0800_5904 l0800_590D
l0800_5904:
	SCZO = cond(dx - Mem0[ds:0x2A07:word16])
	branch Test(UGE,C) l0800_590D
	// succ:  l0800_590A l0800_590D
l0800_590A:
	goto l0800_57CF
	// succ:  l0800_57CF
l0800_590D:
	v24 = Mem0[ds:0x29E1:word16]
	sp = sp - 2
	Mem0[ss:sp:word16] = v24
	v25 = Mem0[ds:0x29DF:word16]
	sp = sp - 2
	Mem0[ss:sp:word16] = v25
	ax = Mem0[ds:0x2E55:word16]
	dx = dx ^ dx
	SZO = cond(dx)
	C = false
	ax = ax - Mem0[ds:0x2E59:word16]
	SCZO = cond(ax)
	dx = dx - 0x00 - C
	SCZO = cond(dx)
	ax = ax - Mem0[ds:0x2E31:word16]
	SCZO = cond(ax)
	dx = dx - 0x00 - C
	SCZO = cond(dx)
	sp = sp - 2
	Mem0[ss:sp:word16] = dx
	sp = sp - 2
	Mem0[ss:sp:word16] = ax
	ax = Mem0[ds:0x2E59:word16]
	ax = ax + Mem0[ds:0x2E31:word16]
	SCZO = cond(ax)
	v26 = Mem0[ds:0x2E5B:word16]
	sp = sp - 2
	Mem0[ss:sp:word16] = v26
	sp = sp - 2
	Mem0[ss:sp:word16] = ax
	call fn0800_4152 (retsize: 2;)
	sp = sp + 0x000C
	SCZO = cond(sp)
	ax = ax ^ ax
	SZO = cond(ax)
	C = false
	return
	// succ:  fn0800_579B_exit
fn0800_579B_exit:


// fn0800_593F
// Return size: 2
define fn0800_593F
fn0800_593F_entry:
	// succ:  l0800_593F
l0800_593F:
	sp = fp
	Top = 0
	ax = 0x0001
	sp = sp - 2
	Mem0[ss:sp:word16] = ax
	call fn0800_5CD9 (retsize: 2;)
	sp = sp + 0x0002
	SCZO = cond(sp)
	ax = ax + 0x0004
	SCZO = cond(ax)
	Mem0[ds:0x2E29:word16] = ax
	ax = 0x0001
	sp = sp - 2
	Mem0[ss:sp:word16] = ax
	call fn0800_5CD9 (retsize: 2;)
	sp = sp + 0x0002
	SCZO = cond(sp)
	ax = ax | ax
	SZO = cond(ax)
	C = false
	branch Test(EQ,Z) l0800_5974
	// succ:  l0800_595D l0800_5974
l0800_595D:
	ax = 0x0001
	sp = sp - 2
	Mem0[ss:sp:word16] = ax
	call fn0800_5CD9 (retsize: 2;)
	sp = sp + 0x0002
	SCZO = cond(sp)
	dx = Mem0[ds:0x2E29:word16]
	dx = dx - 0x0001
	SZO = cond(dx)
	dx = dx << 0x0001
	SCZO = cond(dx)
	dx = dx + ax
	SCZO = cond(dx)
	Mem0[ds:0x2E29:word16] = dx
	// succ:  l0800_5974
l0800_5974:
	return
	// succ:  fn0800_593F_exit
fn0800_593F_exit:


// fn0800_5975
// Return size: 2
define fn0800_5975
fn0800_5975_entry:
	// succ:  l0800_5975
l0800_5975:
	sp = fp
	Top = 0
	Mem0[ds:0x2E2B:word16] = 0x0000
	ax = 0x0001
	sp = sp - 2
	Mem0[ss:sp:word16] = ax
	call fn0800_5CD9 (retsize: 2;)
	sp = sp + 0x0002
	SCZO = cond(sp)
	ax = ax | ax
	SZO = cond(ax)
	C = false
	branch Test(EQ,Z) l0800_59FA
	// succ:  l0800_5989 l0800_59FA
l0800_5989:
	ax = 0x0001
	sp = sp - 2
	Mem0[ss:sp:word16] = ax
	call fn0800_5CD9 (retsize: 2;)
	sp = sp + 0x0002
	SCZO = cond(sp)
	Mem0[ds:0x2E2B:word16] = ax
	ax = 0x0001
	sp = sp - 2
	Mem0[ss:sp:word16] = ax
	call fn0800_5CD9 (retsize: 2;)
	sp = sp + 0x0002
	SCZO = cond(sp)
	ax = ax | ax
	SZO = cond(ax)
	C = false
	branch Test(EQ,Z) l0800_59E3
	// succ:  l0800_59A4 l0800_59E3
l0800_59A4:
	ax = 0x0001
	sp = sp - 2
	Mem0[ss:sp:word16] = ax
	call fn0800_5CD9 (retsize: 2;)
	sp = sp + 0x0002
	SCZO = cond(sp)
	dx = Mem0[ds:0x2E2B:word16]
	dx = dx << 0x0001
	SCZO = cond(dx)
	dx = dx + ax
	SCZO = cond(dx)
	dx = dx | 0x0004
	SZO = cond(dx)
	C = false
	Mem0[ds:0x2E2B:word16] = dx
	ax = 0x0001
	sp = sp - 2
	Mem0[ss:sp:word16] = ax
	call fn0800_5CD9 (retsize: 2;)
	sp = sp + 0x0002
	SCZO = cond(sp)
	ax = ax | ax
	SZO = cond(ax)
	C = false
	branch Test(NE,Z) l0800_59FA
	// succ:  l0800_59CB l0800_59FA
l0800_59CB:
	ax = 0x0001
	sp = sp - 2
	Mem0[ss:sp:word16] = ax
	call fn0800_5CD9 (retsize: 2;)
	sp = sp + 0x0002
	SCZO = cond(sp)
	dx = Mem0[ds:0x2E2B:word16]
	dx = dx << 0x0001
	SCZO = cond(dx)
	dx = dx + ax
	SCZO = cond(dx)
	Mem0[ds:0x2E2B:word16] = dx
	goto l0800_59FA
	// succ:  l0800_59FA
l0800_59E3:
	SCZO = cond(Mem0[ds:0x2E2B:word16] - 0x0000)
	branch Test(NE,Z) l0800_59FA
	// succ:  l0800_59EA l0800_59FA
l0800_59EA:
	ax = 0x0001
	sp = sp - 2
	Mem0[ss:sp:word16] = ax
	call fn0800_5CD9 (retsize: 2;)
	sp = sp + 0x0002
	SCZO = cond(sp)
	ax = ax + 0x0002
	SCZO = cond(ax)
	Mem0[ds:0x2E2B:word16] = ax
	// succ:  l0800_59FA
l0800_59FA:
	call fn0800_5B15 (retsize: 2;)
	ah = 0x00
	dx = Mem0[ds:0x2E2B:word16]
	cl = 0x08
	dx = dx << cl
	SCZO = cond(dx)
	dx = dx + ax
	SCZO = cond(dx)
	dx = dx + 0x0001
	SZO = cond(dx)
	Mem0[ds:0x2E2B:word16] = dx
	return
	// succ:  fn0800_5975_exit
fn0800_5975_exit:


// fn0800_5A0F
// Return size: 2
define fn0800_5A0F
fn0800_5A0F_entry:
	// succ:  l0800_5A0F
l0800_5A0F:
	sp = fp
	Top = 0
	ax = 0x0004
	sp = sp - 2
	Mem0[ss:sp:word16] = ax
	call fn0800_5CD9 (retsize: 2;)
	sp = sp + 0x0002
	SCZO = cond(sp)
	ax = ax << 0x0001
	SCZO = cond(ax)
	ax = ax << 0x0001
	SCZO = cond(ax)
	ax = ax + 0x000C
	SCZO = cond(ax)
	Mem0[ds:0x2E47:word16] = ax
	return
	// succ:  fn0800_5A0F_exit
fn0800_5A0F_exit:


// fn0800_5A24
// Return size: 2
define fn0800_5A24
fn0800_5A24_entry:
	// succ:  l0800_5A24
l0800_5A24:
	sp = fp
	Top = 0
	sp = sp - 2
	Mem0[ss:sp:word16] = bp
	bp = sp
	sp = sp - 2
	Mem0[ss:sp:word16] = si
	sp = sp - 2
	Mem0[ss:sp:word16] = di
	v7 = Mem0[ss:bp + 0x0008:word16]
	sp = sp - 2
	Mem0[ss:sp:word16] = v7
	v8 = Mem0[ss:bp + 0x0006:word16]
	sp = sp - 2
	Mem0[ss:sp:word16] = v8
	v9 = Mem0[ss:bp + 0x0004:word16]
	sp = sp - 2
	Mem0[ss:sp:word16] = v9
	call fn0800_43D4 (retsize: 2;)
	sp = sp + 0x0006
	SCZO = cond(sp)
	ax = 0x0005
	sp = sp - 2
	Mem0[ss:sp:word16] = ax
	call fn0800_5C39 (retsize: 2;)
	sp = sp + 0x0002
	SCZO = cond(sp)
	Mem0[ss:bp + 0x0008:word16] = ax
	ax = ax | ax
	SZO = cond(ax)
	C = false
	branch Test(EQ,Z) l0800_5A89
	// succ:  l0800_5A49 l0800_5A89
l0800_5A49:
	SCZO = cond(Mem0[ss:bp + 0x0008:word16] - 0x0010)
	branch Test(ULE,CZ) l0800_5A54
	// succ:  l0800_5A4F l0800_5A54
l0800_5A4F:
	Mem0[ss:bp + 0x0008:word16] = 0x0010
	// succ:  l0800_5A54
l0800_5A54:
	di = di ^ di
	SZO = cond(di)
	C = false
	si = Mem0[ss:bp + 0x0004:word16]
	si = si + 0x000A
	SCZO = cond(si)
	SCZO = cond(di - Mem0[ss:bp + 0x0008:word16])
	branch Test(UGE,C) l0800_5A7A
	// succ:  l0800_5A61 l0800_5A7A
l0800_5A61:
	ax = 0x0004
	sp = sp - 2
	Mem0[ss:sp:word16] = ax
	call fn0800_5C39 (retsize: 2;)
	sp = sp + 0x0002
	SCZO = cond(sp)
	es = Mem0[ss:bp + 0x0006:selector]
	Mem0[es:si:word16] = ax
	si = si + 0x000C
	SCZO = cond(si)
	di = di + 0x0001
	SZO = cond(di)
	SCZO = cond(di - Mem0[ss:bp + 0x0008:word16])
	branch Test(ULT,C) l0800_5A61
	// succ:  l0800_5A7A l0800_5A61
l0800_5A7A:
	v17 = Mem0[ss:bp + 0x0008:word16]
	sp = sp - 2
	Mem0[ss:sp:word16] = v17
	v18 = Mem0[ss:bp + 0x0006:word16]
	sp = sp - 2
	Mem0[ss:sp:word16] = v18
	v19 = Mem0[ss:bp + 0x0004:word16]
	sp = sp - 2
	Mem0[ss:sp:word16] = v19
	call fn0800_4550 (retsize: 2;)
	sp = sp + 0x0006
	SCZO = cond(sp)
	// succ:  l0800_5A89
l0800_5A89:
	di = Mem0[ss:sp:word16]
	sp = sp + 2
	si = Mem0[ss:sp:word16]
	sp = sp + 2
	bp = Mem0[ss:sp:word16]
	sp = sp + 2
	return
	// succ:  fn0800_5A24_exit
fn0800_5A24_exit:


// fn0800_5A8D
// Return size: 2
define fn0800_5A8D
fn0800_5A8D_entry:
	// succ:  l0800_5A8D
l0800_5A8D:
	sp = fp
	Top = 0
	sp = sp - 2
	Mem0[ss:sp:word16] = bp
	bp = sp
	sp = sp - 0x0002
	SCZO = cond(sp)
	sp = sp - 2
	Mem0[ss:sp:word16] = si
	sp = sp - 2
	Mem0[ss:sp:word16] = di
	Mem0[ss:bp - 0x0002:word16] = 0x0000
	di = Mem0[ss:bp + 0x0004:word16]
	goto l0800_5AA5
	// succ:  l0800_5AA5
l0800_5A9F:
	di = di + 0x000C
	SCZO = cond(di)
	v20 = Mem0[ss:bp - 0x0002:word16] + 0x0001
	Mem0[ss:bp - 0x0002:word16] = v20
	SZO = cond(v20)
	// succ:  l0800_5AA5
l0800_5AA5:
	es = Mem0[ss:bp + 0x0006:selector]
	SCZO = cond(Mem0[es:di + 0x000A:word16] - 0x0000)
	branch Test(EQ,Z) l0800_5A9F
	// succ:  l0800_5AAF l0800_5A9F
l0800_5AAF:
	cl = Mem0[es:di + 0x000A:byte]
	ax = 0x0001
	ax = ax << cl
	SCZO = cond(ax)
	ax = ax - 0x0001
	SZO = cond(ax)
	dx_ax = (int32) ax
	bx = Mem0[ds:0x29FD:word16]
	cx = Mem0[ds:0x29FB:word16]
	cx = cx & ax
	SZO = cond(cx)
	C = false
	bx = bx & dx
	SZO = cond(bx)
	C = false
	SCZO = cond(bx - Mem0[es:di + 0x0008:word16])
	branch Test(NE,Z) l0800_5A9F
	// succ:  l0800_5ACC l0800_5A9F
l0800_5ACC:
	SCZO = cond(cx - Mem0[es:di + 0x0006:word16])
	branch Test(NE,Z) l0800_5A9F
	// succ:  l0800_5AD2 l0800_5A9F
l0800_5AD2:
	ax = Mem0[ss:bp - 0x0002:word16]
	dx = 0x000C
	dx_ax = dx *s ax
	SCZO = cond(dx_ax)
	bx = Mem0[ss:bp + 0x0004:word16]
	bx = bx + ax
	SCZO = cond(bx)
	v19 = Mem0[es:bx + 0x000A:word16]
	sp = sp - 2
	Mem0[ss:sp:word16] = v19
	call fn0800_5C39 (retsize: 2;)
	sp = sp + 0x0002
	SCZO = cond(sp)
	SCZO = cond(Mem0[ss:bp - 0x0002:word16] - 0x0002)
	branch Test(UGE,C) l0800_5AF8
	// succ:  l0800_5AEF l0800_5AF8
l0800_5AEF:
	ax = Mem0[ss:bp - 0x0002:word16]
	di = Mem0[ss:sp:word16]
	sp = sp + 2
	si = Mem0[ss:sp:word16]
	sp = sp + 2
	sp = bp
	bp = Mem0[ss:sp:word16]
	sp = sp + 2
	return
	// succ:  fn0800_5A8D_exit
l0800_5AF8:
	ax = Mem0[ss:bp - 0x0002:word16]
	ax = ax - 0x0001
	SZO = cond(ax)
	sp = sp - 2
	Mem0[ss:sp:word16] = ax
	call fn0800_5C39 (retsize: 2;)
	sp = sp + 0x0002
	SCZO = cond(sp)
	cl = Mem0[ss:bp - 0x0002:byte]
	cl = cl - 0x01
	SZO = cond(cl)
	dx = 0x0001
	dx = dx << cl
	SCZO = cond(dx)
	ax = ax | dx
	SZO = cond(ax)
	C = false
	di = Mem0[ss:sp:word16]
	sp = sp + 2
	si = Mem0[ss:sp:word16]
	sp = sp + 2
	sp = bp
	bp = Mem0[ss:sp:word16]
	sp = sp + 2
	return
	// succ:  fn0800_5A8D_exit
fn0800_5A8D_exit:


// fn0800_5B15
// Return size: 2
define fn0800_5B15
fn0800_5B15_entry:
	// succ:  l0800_5B15
l0800_5B15:
	sp = fp
	Top = 0
	sp = sp - 2
	Mem0[ss:sp:word16] = bp
	bp = sp
	sp = sp - 0x0008
	SCZO = cond(sp)
	ax = Mem0[ds:0x2E73:word16]
	dx = Mem0[ds:0x2E71:word16]
	dx = dx + 0xFFFD
	SCZO = cond(dx)
	SCZO = cond(ax - Mem0[ds:0x2E6F:word16])
	branch Test(EQ,Z) l0800_5B2E
	// succ:  l0800_5B2B l0800_5B2E
l0800_5B2B:
	goto l0800_5C0B
	// succ:  l0800_5C0B
l0800_5B2E:
	SCZO = cond(dx - Mem0[ds:0x2E6D:word16])
	branch Test(EQ,Z) l0800_5B37
	// succ:  l0800_5B34 l0800_5B37
l0800_5B34:
	goto l0800_5C0B
	// succ:  l0800_5C0B
l0800_5B37:
	v16 = Mem0[ds:0x29E5:word16]
	sp = sp - 2
	Mem0[ss:sp:word16] = v16
	v17 = Mem0[ds:0x29E3:word16]
	sp = sp - 2
	Mem0[ss:sp:word16] = v17
	call fn0800_4194 (retsize: 2;)
	sp = sp + 0x0004
	SCZO = cond(sp)
	sp = sp - 2
	Mem0[ss:sp:word16] = ax
	sp = sp - 2
	Mem0[ss:sp:word16] = dx
	v18 = Mem0[ds:0x29E5:word16]
	sp = sp - 2
	Mem0[ss:sp:word16] = v18
	v19 = Mem0[ds:0x29E3:word16]
	sp = sp - 2
	Mem0[ss:sp:word16] = v19
	call fn0800_AD2F (retsize: 2;)
	sp = sp + 0x0004
	SCZO = cond(sp)
	bx = Mem0[ss:sp:word16]
	sp = sp + 2
	cx = Mem0[ss:sp:word16]
	sp = sp + 2
	cx = cx - ax
	SCZO = cond(cx)
	bx = bx - dx - C
	SCZO = cond(bx)
	Mem0[ss:bp - 0x0002:word16] = bx
	Mem0[ss:bp - 0x0004:word16] = cx
	SCZO = cond(Mem0[ss:bp - 0x0002:word16] - 0x0000)
	branch Test(ULT,C) l0800_5B76
	// succ:  l0800_5B67 l0800_5B76
l0800_5B67:
	branch Test(UGT,CZ) l0800_5B6F
	// succ:  l0800_5B69 l0800_5B6F
l0800_5B69:
	SCZO = cond(Mem0[ss:bp - 0x0004:word16] - 0xFFFD)
	branch Test(ULE,CZ) l0800_5B76
	// succ:  l0800_5B6F l0800_5B76
l0800_5B6F:
	dx = dx ^ dx
	SZO = cond(dx)
	C = false
	ax = 0xFFFD
	goto l0800_5B7C
	// succ:  l0800_5B7C
l0800_5B76:
	dx = Mem0[ss:bp - 0x0002:word16]
	ax = Mem0[ss:bp - 0x0004:word16]
	// succ:  l0800_5B7C
l0800_5B7C:
	Mem0[ss:bp - 0x0006:word16] = dx
	Mem0[ss:bp - 0x0008:word16] = ax
	v23 = Mem0[ds:0x29E5:word16]
	sp = sp - 2
	Mem0[ss:sp:word16] = v23
	v24 = Mem0[ds:0x29E3:word16]
	sp = sp - 2
	Mem0[ss:sp:word16] = v24
	v25 = Mem0[ss:bp - 0x0006:word16]
	sp = sp - 2
	Mem0[ss:sp:word16] = v25
	sp = sp - 2
	Mem0[ss:sp:word16] = ax
	ax = Mem0[ds:0x2E73:word16]
	dx = Mem0[ds:0x2E71:word16]
	Mem0[ds:0x2E6F:word16] = ax
	Mem0[ds:0x2E6D:word16] = dx
	sp = sp - 2
	Mem0[ss:sp:word16] = ax
	sp = sp - 2
	Mem0[ss:sp:word16] = dx
	call fn0800_4110 (retsize: 2;)
	sp = sp + 0x000C
	SCZO = cond(sp)
	ax = Mem0[ss:bp - 0x0006:word16]
	dx = Mem0[ss:bp - 0x0008:word16]
	v26 = Mem0[ss:bp - 0x0004:word16] - dx
	Mem0[ss:bp - 0x0004:word16] = v26
	SCZO = cond(v26)
	dx = Mem0[ss:bp - 0x0004:word16]
	v27 = Mem0[ss:bp - 0x0002:word16] - ax - C
	Mem0[ss:bp - 0x0002:word16] = v27
	SCZO = cond(v27)
	ax = Mem0[ss:bp - 0x0002:word16]
	ax = ax | ax
	SZO = cond(ax)
	C = false
	branch Test(ULT,C) l0800_5BCB
	// succ:  l0800_5BBA l0800_5BCB
l0800_5BBA:
	branch Test(UGT,CZ) l0800_5BC1
	// succ:  l0800_5BBC l0800_5BC1
l0800_5BBC:
	SCZO = cond(dx - 0x0002)
	branch Test(ULE,CZ) l0800_5BCB
	// succ:  l0800_5BC1 l0800_5BCB
l0800_5BC1:
	Mem0[ss:bp - 0x0002:word16] = 0x0000
	Mem0[ss:bp - 0x0004:word16] = 0x0002
	// succ:  l0800_5BCB
l0800_5BCB:
	v28 = Mem0[ds:0x29E5:word16]
	sp = sp - 2
	Mem0[ss:sp:word16] = v28
	v29 = Mem0[ds:0x29E3:word16]
	sp = sp - 2
	Mem0[ss:sp:word16] = v29
	v30 = Mem0[ss:bp - 0x0002:word16]
	sp = sp - 2
	Mem0[ss:sp:word16] = v30
	v31 = Mem0[ss:bp - 0x0004:word16]
	sp = sp - 2
	Mem0[ss:sp:word16] = v31
	ax = Mem0[ds:0x2E71:word16]
	ax = ax + Mem0[ss:bp - 0x0008:word16]
	SCZO = cond(ax)
	v32 = Mem0[ds:0x2E73:word16]
	sp = sp - 2
	Mem0[ss:sp:word16] = v32
	sp = sp - 2
	Mem0[ss:sp:word16] = ax
	call fn0800_4110 (retsize: 2;)
	sp = sp + 0x000C
	SCZO = cond(sp)
	ax = 0x0001
	sp = sp - 2
	Mem0[ss:sp:word16] = ax
	ax = Mem0[ss:bp - 0x0002:word16]
	dx = Mem0[ss:bp - 0x0004:word16]
	ax = -ax
	SCZO = cond(ax)
	C = ax == 0x0000
	dx = -dx
	SCZO = cond(dx)
	C = dx == 0x0000
	ax = ax - 0x0000 - C
	SCZO = cond(ax)
	sp = sp - 2
	Mem0[ss:sp:word16] = ax
	sp = sp - 2
	Mem0[ss:sp:word16] = dx
	v33 = Mem0[ds:0x29E5:word16]
	sp = sp - 2
	Mem0[ss:sp:word16] = v33
	v34 = Mem0[ds:0x29E3:word16]
	sp = sp - 2
	Mem0[ss:sp:word16] = v34
	call fn0800_ACB3 (retsize: 2;)
	sp = sp + 0x000A
	SCZO = cond(sp)
	// succ:  l0800_5C0B
l0800_5C0B:
	es_bx = Mem0[ds:0x2E6D:segptr32]
	v11 = Mem0[ds:0x2E6D:word16] + 0x0001
	Mem0[ds:0x2E6D:word16] = v11
	SZO = cond(v11)
	al = Mem0[es:bx:byte]
	sp = bp
	bp = Mem0[ss:sp:word16]
	sp = sp + 2
	return
	// succ:  fn0800_5B15_exit
fn0800_5B15_exit:


// fn0800_5C1A
// Return size: 2
define fn0800_5C1A
fn0800_5C1A_entry:
	// succ:  l0800_5C1A
l0800_5C1A:
	sp = fp
	Top = 0
	sp = sp - 2
	Mem0[ss:sp:word16] = bp
	bp = sp
	ax = Mem0[ss:bp + 0x0004:word16]
	SCZO = cond(Mem0[ds:0x2A21:word16] - 0x0002)
	branch Test(NE,Z) l0800_5C30
	// succ:  l0800_5C27 l0800_5C30
l0800_5C27:
	sp = sp - 2
	Mem0[ss:sp:word16] = ax
	call fn0800_5CD9 (retsize: 2;)
	sp = sp + 0x0002
	SCZO = cond(sp)
	bp = Mem0[ss:sp:word16]
	sp = sp + 2
	return
	// succ:  fn0800_5C1A_exit
l0800_5C30:
	sp = sp - 2
	Mem0[ss:sp:word16] = ax
	call fn0800_5C39 (retsize: 2;)
	sp = sp + 0x0002
	SCZO = cond(sp)
	bp = Mem0[ss:sp:word16]
	sp = sp + 2
	return
	// succ:  fn0800_5C1A_exit
fn0800_5C1A_exit:


// fn0800_5C39
// Return size: 2
define fn0800_5C39
fn0800_5C39_entry:
	// succ:  l0800_5C39
l0800_5C39:
	sp = fp
	Top = 0
	sp = sp - 2
	Mem0[ss:sp:word16] = bp
	bp = sp
	sp = sp - 0x0006
	SCZO = cond(sp)
	sp = sp - 2
	Mem0[ss:sp:word16] = si
	sp = sp - 2
	Mem0[ss:sp:word16] = di
	si = Mem0[ss:bp + 0x0004:word16]
	di = di ^ di
	SZO = cond(di)
	C = false
	Mem0[ss:bp - 0x0006:word16] = 0x0001
	goto l0800_5CCA
	// succ:  l0800_5CCA
l0800_5C4D:
	SCZO = cond(Mem0[ds:0x2E45:word16] - 0x0000)
	branch Test(NE,Z) l0800_5CA2
	// succ:  l0800_5C54 l0800_5CA2
l0800_5C54:
	call fn0800_5B15 (retsize: 2;)
	ah = 0x00
	Mem0[ss:bp - 0x0002:word16] = ax
	call fn0800_5B15 (retsize: 2;)
	ah = 0x00
	Mem0[ss:bp - 0x0004:word16] = ax
	es_bx = Mem0[ds:0x2E6D:segptr32]
	al = Mem0[es:bx + 0x0001:byte]
	ah = 0x00
	dx = dx ^ dx
	SZO = cond(dx)
	C = false
	cl = 0x18
	call fn0800_8C69 (retsize: 2;)
	es_bx = Mem0[ds:0x2E6D:segptr32]
	bl = Mem0[es:bx:byte]
	bh = 0x00
	ax = ax + 0x0000
	SCZO = cond(ax)
	dx = dx + bx + C
	SCZO = cond(dx)
	bx = Mem0[ss:bp - 0x0004:word16]
	cl = 0x08
	bx = bx << cl
	SCZO = cond(bx)
	ax = ax + bx
	SCZO = cond(ax)
	dx = dx + 0x00 + C
	SCZO = cond(dx)
	ax = ax + Mem0[ss:bp - 0x0002:word16]
	SCZO = cond(ax)
	dx = dx + 0x00 + C
	SCZO = cond(dx)
	Mem0[ds:0x29FD:word16] = dx
	Mem0[ds:0x29FB:word16] = ax
	Mem0[ds:0x2E45:word16] = 0x0010
	// succ:  l0800_5CA2
l0800_5CA2:
	ax = Mem0[ds:0x29FB:word16]
	ax = ax & 0x0001
	SZO = cond(ax)
	C = false
	ax = ax | 0x0000
	SZO = cond(ax)
	C = false
	branch Test(EQ,Z) l0800_5CB0
	// succ:  l0800_5CAD l0800_5CB0
l0800_5CAD:
	di = di | Mem0[ss:bp - 0x0006:word16]
	SZO = cond(di)
	C = false
	// succ:  l0800_5CB0
l0800_5CB0:
	ax = Mem0[ds:0x29FD:word16]
	dx = Mem0[ds:0x29FB:word16]
	ax = ax >>u 0x0001
	SCZO = cond(ax)
	v22 = (dx & 0x0001 << 0x01) != 0x0000
	dx = __rcr(dx, 0x01, C)
	C = v22
	Mem0[ds:0x29FD:word16] = ax
	Mem0[ds:0x29FB:word16] = dx
	v23 = Mem0[ss:bp - 0x0006:word16] << 0x0001
	Mem0[ss:bp - 0x0006:word16] = v23
	SCZO = cond(v23)
	v24 = Mem0[ds:0x2E45:word16] - 0x0001
	Mem0[ds:0x2E45:word16] = v24
	SZO = cond(v24)
	si = si - 0x0001
	SZO = cond(si)
	// succ:  l0800_5CCA
l0800_5CCA:
	si = si | si
	SZO = cond(si)
	C = false
	branch Test(EQ,Z) l0800_5CD1
	// succ:  l0800_5CCE l0800_5CD1
l0800_5CCE:
	goto l0800_5C4D
	// succ:  l0800_5C4D
l0800_5CD1:
	ax = di
	di = Mem0[ss:sp:word16]
	sp = sp + 2
	si = Mem0[ss:sp:word16]
	sp = sp + 2
	sp = bp
	bp = Mem0[ss:sp:word16]
	sp = sp + 2
	return
	// succ:  fn0800_5C39_exit
fn0800_5C39_exit:


// fn0800_5CD9
// Return size: 2
define fn0800_5CD9
fn0800_5CD9_entry:
	// succ:  l0800_5CD9
l0800_5CD9:
	sp = fp
	Top = 0
	sp = sp - 2
	Mem0[ss:sp:word16] = bp
	bp = sp
	sp = sp - 2
	Mem0[ss:sp:word16] = si
	sp = sp - 2
	Mem0[ss:sp:word16] = di
	di = Mem0[ss:bp + 0x0004:word16]
	si = si ^ si
	SZO = cond(si)
	C = false
	goto l0800_5D25
	// succ:  l0800_5D25
l0800_5CE5:
	SCZO = cond(Mem0[ds:0x2E45:word16] - 0x0000)
	branch Test(NE,Z) l0800_5D00
	// succ:  l0800_5CEC l0800_5D00
l0800_5CEC:
	call fn0800_5B15 (retsize: 2;)
	ah = 0x00
	Mem0[ds:0x29FD:word16] = 0x0000
	Mem0[ds:0x29FB:word16] = ax
	Mem0[ds:0x2E45:word16] = 0x0008
	// succ:  l0800_5D00
l0800_5D00:
	si = si << 0x0001
	SCZO = cond(si)
	ax = Mem0[ds:0x29FB:word16]
	ax = ax & 0x0080
	SZO = cond(ax)
	C = false
	ax = ax | 0x0000
	SZO = cond(ax)
	C = false
	branch Test(EQ,Z) l0800_5D0E
	// succ:  l0800_5D0D l0800_5D0E
l0800_5D0D:
	si = si + 0x0001
	SZO = cond(si)
	// succ:  l0800_5D0E
l0800_5D0E:
	ax = Mem0[ds:0x29FD:word16]
	dx = Mem0[ds:0x29FB:word16]
	dx = dx << 0x0001
	SCZO = cond(dx)
	v15 = (ax & 0x0001 << 0x10 - 0x01) != 0x0000
	ax = __rcl(ax, 0x01, C)
	C = v15
	Mem0[ds:0x29FD:word16] = ax
	Mem0[ds:0x29FB:word16] = dx
	v16 = Mem0[ds:0x2E45:word16] - 0x0001
	Mem0[ds:0x2E45:word16] = v16
	SZO = cond(v16)
	di = di - 0x0001
	SZO = cond(di)
	// succ:  l0800_5D25
l0800_5D25:
	di = di | di
	SZO = cond(di)
	C = false
	branch Test(NE,Z) l0800_5CE5
	// succ:  l0800_5D29 l0800_5CE5
l0800_5D29:
	ax = si
	di = Mem0[ss:sp:word16]
	sp = sp + 2
	si = Mem0[ss:sp:word16]
	sp = sp + 2
	bp = Mem0[ss:sp:word16]
	sp = sp + 2
	return
	// succ:  fn0800_5CD9_exit
fn0800_5CD9_exit:


// fn0800_5D2F
// Return size: 2
define fn0800_5D2F
fn0800_5D2F_entry:
	// succ:  l0800_5D2F
l0800_5D2F:
	sp = fp
	Top = 0
	sp = sp - 2
	Mem0[ss:sp:word16] = bp
	bp = sp
	ax = Mem0[ds:0x2E5B:word16]
	dx = Mem0[ds:0x2E59:word16]
	dx = dx - 0x0001
	SZO = cond(dx)
	SCZO = cond(ax - Mem0[ds:0x2E57:word16])
	branch Test(NE,Z) l0800_5D9E
	// succ:  l0800_5D40 l0800_5D9E
l0800_5D40:
	SCZO = cond(dx - Mem0[ds:0x2E55:word16])
	branch Test(NE,Z) l0800_5D9E
	// succ:  l0800_5D46 l0800_5D9E
l0800_5D46:
	v11 = Mem0[ds:0x29E1:word16]
	sp = sp - 2
	Mem0[ss:sp:word16] = v11
	v12 = Mem0[ds:0x29DF:word16]
	sp = sp - 2
	Mem0[ss:sp:word16] = v12
	ax = ax ^ ax
	SZO = cond(ax)
	C = false
	dx = 0xFFFF
	dx = dx - Mem0[ds:0x2E31:word16]
	SCZO = cond(dx)
	ax = ax - 0x0000 - C
	SCZO = cond(ax)
	sp = sp - 2
	Mem0[ss:sp:word16] = ax
	sp = sp - 2
	Mem0[ss:sp:word16] = dx
	ax = Mem0[ds:0x2E59:word16]
	ax = ax + Mem0[ds:0x2E31:word16]
	SCZO = cond(ax)
	v14 = Mem0[ds:0x2E5B:word16]
	sp = sp - 2
	Mem0[ss:sp:word16] = v14
	sp = sp - 2
	Mem0[ss:sp:word16] = ax
	call fn0800_4152 (retsize: 2;)
	sp = sp + 0x000C
	SCZO = cond(sp)
	v15 = Mem0[ds:0x2E31:word16]
	sp = sp - 2
	Mem0[ss:sp:word16] = v15
	ax = Mem0[ds:0x2E55:word16]
	ax = ax - Mem0[ds:0x2E31:word16]
	SCZO = cond(ax)
	v16 = Mem0[ds:0x2E57:word16]
	sp = sp - 2
	Mem0[ss:sp:word16] = v16
	sp = sp - 2
	Mem0[ss:sp:word16] = ax
	v17 = Mem0[ds:0x2E5B:word16]
	sp = sp - 2
	Mem0[ss:sp:word16] = v17
	v18 = Mem0[ds:0x2E59:word16]
	sp = sp - 2
	Mem0[ss:sp:word16] = v18
	call fn0800_B0F3 (retsize: 2;)
	sp = sp + 0x000A
	SCZO = cond(sp)
	ax = Mem0[ds:0x2E5B:word16]
	dx = Mem0[ds:0x2E59:word16]
	dx = dx + Mem0[ds:0x2E31:word16]
	SCZO = cond(dx)
	Mem0[ds:0x2E57:word16] = ax
	Mem0[ds:0x2E55:word16] = dx
	// succ:  l0800_5D9E
l0800_5D9E:
	es_bx = Mem0[ds:0x2E55:segptr32]
	al = Mem0[ss:bp + 0x0004:byte]
	Mem0[es:bx:byte] = al
	v23 = Mem0[ds:0x2E55:word16] + 0x0001
	Mem0[ds:0x2E55:word16] = v23
	SZO = cond(v23)
	al = Mem0[ds:0x2E4D:byte]
	al = al ^ Mem0[ss:bp + 0x0004:byte]
	SZO = cond(al)
	C = false
	ah = 0x00
	ax = ax & 0x00FF
	SZO = cond(ax)
	C = false
	ax = ax << 0x0001
	SCZO = cond(ax)
	bx = ax
	ax = Mem0[ds:bx + 0x2A29:word16]
	dx = Mem0[ds:0x2E4D:word16]
	cl = 0x08
	dx = dx >>u cl
	SCZO = cond(dx)
	ax = ax ^ dx
	SZO = cond(ax)
	C = false
	Mem0[ds:0x2E4D:word16] = ax
	bp = Mem0[ss:sp:word16]
	sp = sp + 2
	return
	// succ:  fn0800_5D2F_exit
fn0800_5D2F_exit:


// fn0800_5DCE
// Return size: 2
define fn0800_5DCE
fn0800_5DCE_entry:
	// succ:  l0800_5DCE
l0800_5DCE:
	sp = fp
	Top = 0
	sp = sp - 2
	Mem0[ss:sp:word16] = bp
	bp = sp
	sp = sp - 2
	Mem0[ss:sp:word16] = si
	v6 = Mem0[ss:bp + 0x0006:word16]
	sp = sp - 2
	Mem0[ss:sp:word16] = v6
	v7 = Mem0[ss:bp + 0x0004:word16]
	sp = sp - 2
	Mem0[ss:sp:word16] = v7
	call fn0800_4194 (retsize: 2;)
	sp = sp + 0x0004
	SCZO = cond(sp)
	dx = dx | dx
	SZO = cond(dx)
	C = false
	branch Test(ULT,C) l0800_5DEE
	// succ:  l0800_5DE2 l0800_5DEE
l0800_5DE2:
	branch Test(NE,Z) l0800_5DE9
	// succ:  l0800_5DE4 l0800_5DE9
l0800_5DE4:
	SCZO = cond(ax - 0x0400)
	branch Test(ULT,C) l0800_5DEE
	// succ:  l0800_5DE9 l0800_5DEE
l0800_5DE9:
	ax = 0x0400
	goto l0800_5DFD
	// succ:  l0800_5DFD
l0800_5DEE:
	v14 = Mem0[ss:bp + 0x0006:word16]
	sp = sp - 2
	Mem0[ss:sp:word16] = v14
	v15 = Mem0[ss:bp + 0x0004:word16]
	sp = sp - 2
	Mem0[ss:sp:word16] = v15
	call fn0800_4194 (retsize: 2;)
	sp = sp + 0x0004
	SCZO = cond(sp)
	ax = ax & 0xFFFC
	SZO = cond(ax)
	C = false
	// succ:  l0800_5DFD
l0800_5DFD:
	si = ax
	goto l0800_5E5B
	// succ:  l0800_5E5B
l0800_5E01:
	v16 = Mem0[ss:bp + 0x0006:word16]
	sp = sp - 2
	Mem0[ss:sp:word16] = v16
	v17 = Mem0[ss:bp + 0x0004:word16]
	sp = sp - 2
	Mem0[ss:sp:word16] = v17
	call fn0800_3E27 (retsize: 2;)
	sp = sp + 0x0004
	SCZO = cond(sp)
	SCZO = cond(ax - 0x524E)
	branch Test(NE,Z) l0800_5E58
	// succ:  l0800_5E12 l0800_5E58
l0800_5E12:
	v18 = Mem0[ss:bp + 0x0006:word16]
	sp = sp - 2
	Mem0[ss:sp:word16] = v18
	v19 = Mem0[ss:bp + 0x0004:word16]
	sp = sp - 2
	Mem0[ss:sp:word16] = v19
	call fn0800_3E27 (retsize: 2;)
	sp = sp + 0x0004
	SCZO = cond(sp)
	ax = ax & 0xFF00
	SZO = cond(ax)
	C = false
	SCZO = cond(ax - 0x4300)
	branch Test(NE,Z) l0800_5E40
	// succ:  l0800_5E26 l0800_5E40
l0800_5E26:
	ax = 0x0001
	sp = sp - 2
	Mem0[ss:sp:word16] = ax
	ax = 0xFFFF
	dx = 0xFFFC
	sp = sp - 2
	Mem0[ss:sp:word16] = ax
	sp = sp - 2
	Mem0[ss:sp:word16] = dx
	v20 = Mem0[ss:bp + 0x0006:word16]
	sp = sp - 2
	Mem0[ss:sp:word16] = v20
	v21 = Mem0[ss:bp + 0x0004:word16]
	sp = sp - 2
	Mem0[ss:sp:word16] = v21
	call fn0800_ACB3 (retsize: 2;)
	sp = sp + 0x000A
	SCZO = cond(sp)
	goto l0800_5E5F
	// succ:  l0800_5E5F
l0800_5E40:
	ax = 0x0001
	sp = sp - 2
	Mem0[ss:sp:word16] = ax
	ax = 0xFFFF
	dx = 0xFFFE
	sp = sp - 2
	Mem0[ss:sp:word16] = ax
	sp = sp - 2
	Mem0[ss:sp:word16] = dx
	v22 = Mem0[ss:bp + 0x0006:word16]
	sp = sp - 2
	Mem0[ss:sp:word16] = v22
	v23 = Mem0[ss:bp + 0x0004:word16]
	sp = sp - 2
	Mem0[ss:sp:word16] = v23
	call fn0800_ACB3 (retsize: 2;)
	sp = sp + 0x000A
	SCZO = cond(sp)
	// succ:  l0800_5E58
l0800_5E58:
	si = si - 0x0002
	SCZO = cond(si)
	// succ:  l0800_5E5B
l0800_5E5B:
	si = si | si
	SZO = cond(si)
	C = false
	branch Test(NE,Z) l0800_5E01
	// succ:  l0800_5E5F l0800_5E01
l0800_5E5F:
	ax = si
	si = Mem0[ss:sp:word16]
	sp = sp + 2
	bp = Mem0[ss:sp:word16]
	sp = sp + 2
	return
	// succ:  fn0800_5DCE_exit
fn0800_5DCE_exit:


// fn0800_5E64
// Return size: 2
define fn0800_5E64
fn0800_5E64_entry:
	// succ:  l0800_5E64
l0800_5E64:
	sp = fp
	Top = 0
	sp = sp - 2
	Mem0[ss:sp:word16] = bp
	bp = sp
	sp = sp - 0x0038
	SCZO = cond(sp)
	sp = sp - 2
	Mem0[ss:sp:word16] = si
	sp = sp - 2
	Mem0[ss:sp:word16] = di
	sp = sp - 2
	Mem0[ss:sp:word16] = ds
	es = Mem0[ss:sp:selector]
	sp = sp + 2
	di = 0x2202
	si = 0x4271
	cx = 0x0004
	dx = 0x0003
	SCZO = cond(dx - cx)
	branch Test(UGE,C) l0800_5E80
	// succ:  l0800_5E7E l0800_5E80
l0800_5E7E:
	cx = dx
	// succ:  l0800_5E80
l0800_5E80:
	ax = ax ^ ax
	SZO = cond(ax)
	C = false
	// succ:  l0800_5E82
l0800_5E82:
	branch cx == 0x0000 l0800_5E84
	// succ:  l0800_5E82_1 l0800_5E84
l0800_5E82_1:
	SCZO = cond(Mem0[ds:si:byte] - Mem0[es:di:byte])
	si = si + 0x0001
	di = di + 0x0001
	cx = cx - 0x0001
	branch Test(NE,Z) l0800_5E82
	// succ:  l0800_5E84 l0800_5E82
l0800_5E84:
	branch Test(EQ,Z) l0800_5E8B
	// succ:  l0800_5E86 l0800_5E8B
l0800_5E86:
	ax = ax - ax - C
	SCZO = cond(ax)
	ax = ax - 0xFFFF - C
	SCZO = cond(ax)
	// succ:  l0800_5E8B
l0800_5E8B:
	ax = ax | ax
	SZO = cond(ax)
	C = false
	branch Test(EQ,Z) l0800_5EC3
	// succ:  l0800_5E8F l0800_5EC3
l0800_5E8F:
	sp = sp - 2
	Mem0[ss:sp:word16] = ds
	es = Mem0[ss:sp:selector]
	sp = sp + 2
	di = 0x4271
	si = 0x2202
	dx = 0x0003
	cx = 0x0004
	dx = dx - cx
	SCZO = cond(dx)
	branch Test(UGE,C) l0800_5EA5
	// succ:  l0800_5EA1 l0800_5EA5
l0800_5EA1:
	cx = cx + dx
	SCZO = cond(cx)
	dx = dx ^ dx
	SZO = cond(dx)
	C = false
	// succ:  l0800_5EA5
l0800_5EA5:
	cx = cx >>u 0x0001
	SCZO = cond(cx)
	// succ:  l0800_5EA7
l0800_5EA7:
	branch cx == 0x0000 l0800_5EA9
	// succ:  l0800_5EA7_1 l0800_5EA9
l0800_5EA7_1:
	v16 = Mem0[ds:si:word16]
	Mem0[es:di:word16] = v16
	si = si + 0x0002
	di = di + 0x0002
	cx = cx - 0x0001
	goto l0800_5EA7
	// succ:  l0800_5EA7
l0800_5EA9:
	cx = cx + cx + C
	SCZO = cond(cx)
	// succ:  l0800_5EAB
l0800_5EAB:
	branch cx == 0x0000 l0800_5EAD
	// succ:  l0800_5EAB_1 l0800_5EAD
l0800_5EAB_1:
	v22 = Mem0[ds:si:byte]
	Mem0[es:di:byte] = v22
	si = si + 0x0001
	di = di + 0x0001
	cx = cx - 0x0001
	goto l0800_5EAB
	// succ:  l0800_5EAB
l0800_5EAD:
	cx = dx
	ax = ax ^ ax
	SZO = cond(ax)
	C = false
	// succ:  l0800_5EB1
l0800_5EB1:
	branch cx == 0x0000 l0800_5EB3
	// succ:  l0800_5EB1_1 l0800_5EB3
l0800_5EB1_1:
	Mem0[es:di:byte] = al
	di = di + 0x0001
	cx = cx - 0x0001
	goto l0800_5EB1
	// succ:  l0800_5EB1
l0800_5EB3:
	sp = sp - 2
	Mem0[ss:sp:word16] = ds
	ax = 0x2E75
	sp = sp - 2
	Mem0[ss:sp:word16] = ax
	sp = sp - 2
	Mem0[ss:sp:word16] = ds
	ax = 0x4271
	sp = sp - 2
	Mem0[ss:sp:word16] = ax
	call fn0800_09A3 (retsize: 2;)
	sp = sp + 0x0008
	SCZO = cond(sp)
	// succ:  l0800_5EC3
l0800_5EC3:
	al = Mem0[ds:0x2E75:byte]
	ah = 0x00
	cl = 0x08
	ax = ax << cl
	SCZO = cond(ax)
	dl = Mem0[ds:0x2E76:byte]
	dh = 0x00
	ax = ax + dx
	SCZO = cond(ax)
	dx = dx ^ dx
	SZO = cond(dx)
	C = false
	SCZO = cond(dx - Mem0[ds:0x2A09:word16])
	branch Test(ULT,C) l0800_5EED
	// succ:  l0800_5EDC l0800_5EED
l0800_5EDC:
	branch Test(NE,Z) l0800_5EE4
	// succ:  l0800_5EDE l0800_5EE4
l0800_5EDE:
	SCZO = cond(ax - Mem0[ds:0x2A07:word16])
	branch Test(ULT,C) l0800_5EED
	// succ:  l0800_5EE4 l0800_5EED
l0800_5EE4:
	ax = 0x0003
	di = Mem0[ss:sp:word16]
	sp = sp + 2
	si = Mem0[ss:sp:word16]
	sp = sp + 2
	sp = bp
	bp = Mem0[ss:sp:word16]
	sp = sp + 2
	return
	// succ:  fn0800_5E64_exit
l0800_5EED:
	SCZO = cond(Mem0[ds:0x2A0D:word16] - 0x0000)
	branch Test(ULT,C) l0800_5F0A
	// succ:  l0800_5EF4 l0800_5F0A
l0800_5EF4:
	branch Test(UGT,CZ) l0800_5EFE
	// succ:  l0800_5EF6 l0800_5EFE
l0800_5EF6:
	SCZO = cond(Mem0[ds:0x2A0B:word16] - 0x7FF0)
	branch Test(ULE,CZ) l0800_5F0A
	// succ:  l0800_5EFE l0800_5F0A
l0800_5EFE:
	Mem0[ds:0x2A0D:word16] = 0x0000
	Mem0[ds:0x2A0B:word16] = 0x7FF0
	// succ:  l0800_5F0A
l0800_5F0A:
	ax = ax ^ ax
	SZO = cond(ax)
	C = false
	sp = sp - 2
	Mem0[ss:sp:word16] = ax
	dx = 0x0002
	sp = sp - 2
	Mem0[ss:sp:word16] = ax
	sp = sp - 2
	Mem0[ss:sp:word16] = dx
	v24 = Mem0[ds:0x29E5:word16]
	sp = sp - 2
	Mem0[ss:sp:word16] = v24
	v25 = Mem0[ds:0x29E3:word16]
	sp = sp - 2
	Mem0[ss:sp:word16] = v25
	call fn0800_ACB3 (retsize: 2;)
	sp = sp + 0x000A
	SCZO = cond(sp)
	v26 = Mem0[ds:0x29E5:word16]
	sp = sp - 2
	Mem0[ss:sp:word16] = v26
	v27 = Mem0[ds:0x29E3:word16]
	sp = sp - 2
	Mem0[ss:sp:word16] = v27
	call fn0800_3FAD (retsize: 2;)
	sp = sp + 0x0004
	SCZO = cond(sp)
	Mem0[ss:bp - 0x0022:word16] = ax
	v28 = Mem0[ds:0x29E5:word16]
	sp = sp - 2
	Mem0[ss:sp:word16] = v28
	v29 = Mem0[ds:0x29E3:word16]
	sp = sp - 2
	Mem0[ss:sp:word16] = v29
	call fn0800_3FAD (retsize: 2;)
	sp = sp + 0x0004
	SCZO = cond(sp)
	di = ax
	SCZO = cond(Mem0[ss:bp - 0x0022:word16] - 0x0000)
	branch Test(EQ,Z) l0800_5F48
	// succ:  l0800_5F47 l0800_5F48
l0800_5F47:
	di = di - 0x0001
	SZO = cond(di)
	// succ:  l0800_5F48
l0800_5F48:
	ax = di
	dx = dx ^ dx
	SZO = cond(dx)
	C = false
	cl = 0x09
	call fn0800_8C69 (retsize: 2;)
	ax = ax + Mem0[ss:bp - 0x0022:word16]
	SCZO = cond(ax)
	dx = dx + 0x00 + C
	SCZO = cond(dx)
	Mem0[ss:bp - 0x0002:word16] = dx
	Mem0[ss:bp - 0x0004:word16] = ax
	ax = Mem0[ss:bp - 0x0002:word16]
	dx = Mem0[ss:bp - 0x0004:word16]
	SCZO = cond(ax - Mem0[ds:0x2A09:word16])
	branch Test(ULT,C) l0800_5F7E
	// succ:  l0800_5F69 l0800_5F7E
l0800_5F69:
	branch Test(UGT,CZ) l0800_5F71
	// succ:  l0800_5F6B l0800_5F71
l0800_5F6B:
	SCZO = cond(dx - Mem0[ds:0x2A07:word16])
	branch Test(ULE,CZ) l0800_5F7E
	// succ:  l0800_5F71 l0800_5F7E
l0800_5F71:
	ax = Mem0[ds:0x2A09:word16]
	dx = Mem0[ds:0x2A07:word16]
	Mem0[ss:bp - 0x0002:word16] = ax
	Mem0[ss:bp - 0x0004:word16] = dx
	// succ:  l0800_5F7E
l0800_5F7E:
	v30 = Mem0[ds:0x29E5:word16]
	sp = sp - 2
	Mem0[ss:sp:word16] = v30
	v31 = Mem0[ds:0x29E3:word16]
	sp = sp - 2
	Mem0[ss:sp:word16] = v31
	call fn0800_3FAD (retsize: 2;)
	sp = sp + 0x0004
	SCZO = cond(sp)
	Mem0[ss:bp - 0x0024:word16] = ax
	v32 = Mem0[ds:0x29E5:word16]
	sp = sp - 2
	Mem0[ss:sp:word16] = v32
	v33 = Mem0[ds:0x29E3:word16]
	sp = sp - 2
	Mem0[ss:sp:word16] = v33
	call fn0800_3FAD (retsize: 2;)
	sp = sp + 0x0004
	SCZO = cond(sp)
	Mem0[ss:bp - 0x0026:word16] = ax
	v34 = Mem0[ds:0x29E5:word16]
	sp = sp - 2
	Mem0[ss:sp:word16] = v34
	v35 = Mem0[ds:0x29E3:word16]
	sp = sp - 2
	Mem0[ss:sp:word16] = v35
	call fn0800_3FAD (retsize: 2;)
	sp = sp + 0x0004
	SCZO = cond(sp)
	Mem0[ss:bp - 0x0028:word16] = ax
	v36 = Mem0[ds:0x29E5:word16]
	sp = sp - 2
	Mem0[ss:sp:word16] = v36
	v37 = Mem0[ds:0x29E3:word16]
	sp = sp - 2
	Mem0[ss:sp:word16] = v37
	call fn0800_3FAD (retsize: 2;)
	sp = sp + 0x0004
	SCZO = cond(sp)
	Mem0[ss:bp - 0x002A:word16] = ax
	v38 = Mem0[ds:0x29E5:word16]
	sp = sp - 2
	Mem0[ss:sp:word16] = v38
	v39 = Mem0[ds:0x29E3:word16]
	sp = sp - 2
	Mem0[ss:sp:word16] = v39
	call fn0800_3FAD (retsize: 2;)
	sp = sp + 0x0004
	SCZO = cond(sp)
	Mem0[ss:bp - 0x002C:word16] = ax
	v40 = Mem0[ds:0x29E5:word16]
	sp = sp - 2
	Mem0[ss:sp:word16] = v40
	v41 = Mem0[ds:0x29E3:word16]
	sp = sp - 2
	Mem0[ss:sp:word16] = v41
	call fn0800_3FAD (retsize: 2;)
	sp = sp + 0x0004
	SCZO = cond(sp)
	Mem0[ss:bp - 0x002E:word16] = ax
	v42 = Mem0[ds:0x29E5:word16]
	sp = sp - 2
	Mem0[ss:sp:word16] = v42
	v43 = Mem0[ds:0x29E3:word16]
	sp = sp - 2
	Mem0[ss:sp:word16] = v43
	call fn0800_3FAD (retsize: 2;)
	sp = sp + 0x0004
	SCZO = cond(sp)
	v44 = Mem0[ds:0x29E5:word16]
	sp = sp - 2
	Mem0[ss:sp:word16] = v44
	v45 = Mem0[ds:0x29E3:word16]
	sp = sp - 2
	Mem0[ss:sp:word16] = v45
	call fn0800_3FAD (retsize: 2;)
	sp = sp + 0x0004
	SCZO = cond(sp)
	Mem0[ss:bp - 0x0030:word16] = ax
	v46 = Mem0[ds:0x29E5:word16]
	sp = sp - 2
	Mem0[ss:sp:word16] = v46
	v47 = Mem0[ds:0x29E3:word16]
	sp = sp - 2
	Mem0[ss:sp:word16] = v47
	call fn0800_3FAD (retsize: 2;)
	sp = sp + 0x0004
	SCZO = cond(sp)
	Mem0[ss:bp - 0x0032:word16] = ax
	v48 = Mem0[ds:0x29E5:word16]
	sp = sp - 2
	Mem0[ss:sp:word16] = v48
	v49 = Mem0[ds:0x29E3:word16]
	sp = sp - 2
	Mem0[ss:sp:word16] = v49
	call fn0800_3FAD (retsize: 2;)
	sp = sp + 0x0004
	SCZO = cond(sp)
	Mem0[ss:bp - 0x0034:word16] = ax
	v50 = Mem0[ds:0x29E5:word16]
	sp = sp - 2
	Mem0[ss:sp:word16] = v50
	v51 = Mem0[ds:0x29E3:word16]
	sp = sp - 2
	Mem0[ss:sp:word16] = v51
	call fn0800_3FAD (retsize: 2;)
	sp = sp + 0x0004
	SCZO = cond(sp)
	v52 = Mem0[ds:0x29E1:word16]
	sp = sp - 2
	Mem0[ss:sp:word16] = v52
	v53 = Mem0[ds:0x29DF:word16]
	sp = sp - 2
	Mem0[ss:sp:word16] = v53
	al = Mem0[ds:0x2E75:byte]
	ah = 0x00
	cl = 0x08
	ax = ax << cl
	SCZO = cond(ax)
	dl = Mem0[ds:0x2E76:byte]
	dh = 0x00
	ax = ax + dx
	SCZO = cond(ax)
	dx = dx ^ dx
	SZO = cond(dx)
	C = false
	sp = sp - 2
	Mem0[ss:sp:word16] = dx
	sp = sp - 2
	Mem0[ss:sp:word16] = ax
	sp = sp - 2
	Mem0[ss:sp:word16] = ds
	ax = 0x2E77
	sp = sp - 2
	Mem0[ss:sp:word16] = ax
	call fn0800_4152 (retsize: 2;)
	sp = sp + 0x000C
	SCZO = cond(sp)
	SCZO = cond(Mem0[ss:bp - 0x0024:word16] - 0x0000)
	branch Test(NE,Z) l0800_6064
	// succ:  l0800_6061 l0800_6064
l0800_6061:
	goto l0800_6220
	// succ:  l0800_6220
l0800_6064:
	ax = ax ^ ax
	SZO = cond(ax)
	C = false
	dx = 0xFFFF
	sp = sp - 2
	Mem0[ss:sp:word16] = ax
	sp = sp - 2
	Mem0[ss:sp:word16] = dx
	call fn0800_4311 (retsize: 2;)
	sp = sp + 0x0004
	SCZO = cond(sp)
	Mem0[ss:bp - 0x000A:word16] = dx
	Mem0[ss:bp - 0x000C:word16] = ax
	ax = ax ^ ax
	SZO = cond(ax)
	C = false
	sp = sp - 2
	Mem0[ss:sp:word16] = ax
	sp = sp - 2
	Mem0[ss:sp:word16] = ax
	v54 = Mem0[ss:bp - 0x0034:word16]
	sp = sp - 2
	Mem0[ss:sp:word16] = v54
	v55 = Mem0[ds:0x29E5:word16]
	sp = sp - 2
	Mem0[ss:sp:word16] = v55
	v56 = Mem0[ds:0x29E3:word16]
	sp = sp - 2
	Mem0[ss:sp:word16] = v56
	call fn0800_ACB3 (retsize: 2;)
	sp = sp + 0x000A
	SCZO = cond(sp)
	si = si ^ si
	SZO = cond(si)
	C = false
	ax = Mem0[ss:bp - 0x000C:word16]
	Mem0[ss:bp - 0x0036:word16] = ax
	goto l0800_60D6
	// succ:  l0800_60D6
l0800_6096:
	v165 = Mem0[ds:0x29E5:word16]
	sp = sp - 2
	Mem0[ss:sp:word16] = v165
	v166 = Mem0[ds:0x29E3:word16]
	sp = sp - 2
	Mem0[ss:sp:word16] = v166
	call fn0800_3FAD (retsize: 2;)
	sp = sp + 0x0004
	SCZO = cond(sp)
	Mem0[ss:bp - 0x0022:word16] = ax
	v167 = Mem0[ds:0x29E5:word16]
	sp = sp - 2
	Mem0[ss:sp:word16] = v167
	v168 = Mem0[ds:0x29E3:word16]
	sp = sp - 2
	Mem0[ss:sp:word16] = v168
	call fn0800_3FAD (retsize: 2;)
	sp = sp + 0x0004
	SCZO = cond(sp)
	di = ax
	dx = dx ^ dx
	SZO = cond(dx)
	C = false
	cl = 0x04
	call fn0800_8C69 (retsize: 2;)
	ax = ax + Mem0[ss:bp - 0x0022:word16]
	SCZO = cond(ax)
	dx = dx + 0x00 + C
	SCZO = cond(dx)
	es = Mem0[ss:bp - 0x000A:selector]
	bx = Mem0[ss:bp - 0x0036:word16]
	Mem0[es:bx + 0x0002:word16] = dx
	Mem0[es:bx:word16] = ax
	v169 = Mem0[ss:bp - 0x0036:word16] + 0x0004
	Mem0[ss:bp - 0x0036:word16] = v169
	SCZO = cond(v169)
	si = si + 0x0001
	SZO = cond(si)
	// succ:  l0800_60D6
l0800_60D6:
	SCZO = cond(si - Mem0[ss:bp - 0x0024:word16])
	branch Test(NE,Z) l0800_6096
	// succ:  l0800_60DB l0800_6096
l0800_60DB:
	ax = 0x667B
	sp = sp - 2
	Mem0[ss:sp:word16] = ax
	ax = 0x0004
	sp = sp - 2
	Mem0[ss:sp:word16] = ax
	v61 = Mem0[ss:bp - 0x0024:word16]
	sp = sp - 2
	Mem0[ss:sp:word16] = v61
	v62 = Mem0[ss:bp - 0x000A:word16]
	sp = sp - 2
	Mem0[ss:sp:word16] = v62
	v63 = Mem0[ss:bp - 0x000C:word16]
	sp = sp - 2
	Mem0[ss:sp:word16] = v63
	call fn0800_B95E (retsize: 2;)
	sp = sp + 0x000A
	SCZO = cond(sp)
	si = si ^ si
	SZO = cond(si)
	C = false
	di = Mem0[ss:bp - 0x000C:word16]
	ax = ax ^ ax
	SZO = cond(ax)
	C = false
	ax = ax + 0x0000 + C
	SCZO = cond(ax)
	ax = -ax
	SCZO = cond(ax)
	C = ax == 0x0000
	Mem0[ss:bp - 0x0038:word16] = ax
	goto l0800_620C
	// succ:  l0800_620C
l0800_6104:
	es = Mem0[ss:bp - 0x000A:selector]
	ax = Mem0[es:di + 0x0002:word16]
	dx = Mem0[es:di:word16]
	Mem0[ss:bp - 0x0012:word16] = ax
	Mem0[ss:bp - 0x0014:word16] = dx
	dx = dx & 0xFFF0
	SZO = cond(dx)
	C = false
	ax = ax & 0x000F
	SZO = cond(ax)
	C = false
	Mem0[ss:bp - 0x000E:word16] = ax
	Mem0[ss:bp - 0x0010:word16] = dx
	v97 = Mem0[ds:0x29E1:word16]
	sp = sp - 2
	Mem0[ss:sp:word16] = v97
	v98 = Mem0[ds:0x29DF:word16]
	sp = sp - 2
	Mem0[ss:sp:word16] = v98
	al = 0x00
	sp = sp - 2
	Mem0[ss:sp:word16] = ax
	call fn0800_4047 (retsize: 2;)
	sp = sp + 0x0006
	SCZO = cond(sp)
	v99 = Mem0[ds:0x29E1:word16]
	sp = sp - 2
	Mem0[ss:sp:word16] = v99
	v100 = Mem0[ds:0x29DF:word16]
	sp = sp - 2
	Mem0[ss:sp:word16] = v100
	dx = Mem0[ss:bp - 0x000E:word16]
	ax = Mem0[ss:bp - 0x0010:word16]
	cl = 0x04
	call fn0800_8CAA (retsize: 2;)
	sp = sp - 2
	Mem0[ss:sp:word16] = ax
	call fn0800_40BF (retsize: 2;)
	sp = sp + 0x0006
	SCZO = cond(sp)
	Mem0[ss:bp - 0x0022:word16] = 0x0000
	// succ:  l0800_6150
l0800_6150:
	es = Mem0[ss:bp - 0x000A:selector]
	ax = Mem0[es:di + 0x0002:word16]
	dx = Mem0[es:di:word16]
	dx = dx - Mem0[ss:bp - 0x0010:word16]
	SCZO = cond(dx)
	ax = ax - Mem0[ss:bp - 0x000E:word16] - C
	SCZO = cond(ax)
	Mem0[ss:bp - 0x0016:word16] = ax
	Mem0[ss:bp - 0x0018:word16] = dx
	v101 = Mem0[ss:bp - 0x0010:word16] + dx
	Mem0[ss:bp - 0x0010:word16] = v101
	SCZO = cond(v101)
	v102 = Mem0[ss:bp - 0x000E:word16] + ax + C
	Mem0[ss:bp - 0x000E:word16] = v102
	SCZO = cond(v102)
	SCZO = cond(Mem0[ss:bp - 0x0016:word16] - 0x0000)
	branch Test(UGT,CZ) l0800_61B9
	// succ:  l0800_6172 l0800_61B9
l0800_6172:
	branch Test(NE,Z) l0800_617B
	// succ:  l0800_6174 l0800_617B
l0800_6174:
	SCZO = cond(Mem0[ss:bp - 0x0018:word16] - 0x00FF)
	branch Test(UGT,CZ) l0800_61B9
	// succ:  l0800_617B l0800_61B9
l0800_617B:
	ax = Mem0[ss:bp - 0x000E:word16]
	dx = Mem0[ss:bp - 0x0010:word16]
	dx = dx - Mem0[ss:bp - 0x0014:word16]
	SCZO = cond(dx)
	ax = ax - Mem0[ss:bp - 0x0012:word16] - C
	SCZO = cond(ax)
	ax = ax | ax
	SZO = cond(ax)
	C = false
	branch Test(UGT,CZ) l0800_61B9
	// succ:  l0800_618B l0800_61B9
l0800_618B:
	branch Test(ULT,C) l0800_6192
	// succ:  l0800_618D l0800_6192
l0800_618D:
	SCZO = cond(dx - 0xFFF0)
	branch Test(UGE,C) l0800_61B9
	// succ:  l0800_6192 l0800_61B9
l0800_6192:
	SCZO = cond(Mem0[ss:bp - 0x0022:word16] - 0x00FF)
	branch Test(EQ,Z) l0800_61B9
	// succ:  l0800_6199 l0800_61B9
l0800_6199:
	v103 = Mem0[ds:0x29E1:word16]
	sp = sp - 2
	Mem0[ss:sp:word16] = v103
	v104 = Mem0[ds:0x29DF:word16]
	sp = sp - 2
	Mem0[ss:sp:word16] = v104
	al = Mem0[ss:bp - 0x0018:byte]
	sp = sp - 2
	Mem0[ss:sp:word16] = ax
	call fn0800_4047 (retsize: 2;)
	sp = sp + 0x0006
	SCZO = cond(sp)
	v105 = Mem0[ss:bp - 0x0022:word16] + 0x0001
	Mem0[ss:bp - 0x0022:word16] = v105
	SZO = cond(v105)
	di = di + 0x0004
	SCZO = cond(di)
	si = si + 0x0001
	SZO = cond(si)
	ax = si
	SCZO = cond(ax - Mem0[ss:bp - 0x0024:word16])
	branch Test(NE,Z) l0800_6150
	// succ:  l0800_61B9 l0800_6150
l0800_61B9:
	ax = 0x0001
	sp = sp - 2
	Mem0[ss:sp:word16] = ax
	ax = Mem0[ss:bp - 0x0022:word16]
	ax = ax + 0x0003
	SCZO = cond(ax)
	dx = Mem0[ss:bp - 0x0038:word16]
	ax = -ax
	SCZO = cond(ax)
	C = ax == 0x0000
	dx = dx - 0x00 - C
	SCZO = cond(dx)
	sp = sp - 2
	Mem0[ss:sp:word16] = dx
	sp = sp - 2
	Mem0[ss:sp:word16] = ax
	v106 = Mem0[ds:0x29E1:word16]
	sp = sp - 2
	Mem0[ss:sp:word16] = v106
	v107 = Mem0[ds:0x29DF:word16]
	sp = sp - 2
	Mem0[ss:sp:word16] = v107
	call fn0800_ACB3 (retsize: 2;)
	sp = sp + 0x000A
	SCZO = cond(sp)
	v108 = Mem0[ds:0x29E1:word16]
	sp = sp - 2
	Mem0[ss:sp:word16] = v108
	v109 = Mem0[ds:0x29DF:word16]
	sp = sp - 2
	Mem0[ss:sp:word16] = v109
	al = Mem0[ss:bp - 0x0022:byte]
	sp = sp - 2
	Mem0[ss:sp:word16] = ax
	call fn0800_4047 (retsize: 2;)
	sp = sp + 0x0006
	SCZO = cond(sp)
	ax = 0x0001
	sp = sp - 2
	Mem0[ss:sp:word16] = ax
	ax = Mem0[ss:bp - 0x0022:word16]
	dx = dx ^ dx
	SZO = cond(dx)
	C = false
	ax = ax + 0x0002
	SCZO = cond(ax)
	dx = dx + 0x00 + C
	SCZO = cond(dx)
	sp = sp - 2
	Mem0[ss:sp:word16] = dx
	sp = sp - 2
	Mem0[ss:sp:word16] = ax
	v110 = Mem0[ds:0x29E1:word16]
	sp = sp - 2
	Mem0[ss:sp:word16] = v110
	v111 = Mem0[ds:0x29DF:word16]
	sp = sp - 2
	Mem0[ss:sp:word16] = v111
	call fn0800_ACB3 (retsize: 2;)
	sp = sp + 0x000A
	SCZO = cond(sp)
	// succ:  l0800_620C
l0800_620C:
	SCZO = cond(si - Mem0[ss:bp - 0x0024:word16])
	branch Test(EQ,Z) l0800_6214
	// succ:  l0800_6211 l0800_6214
l0800_6211:
	goto l0800_6104
	// succ:  l0800_6104
l0800_6214:
	v155 = Mem0[ss:bp - 0x000A:word16]
	sp = sp - 2
	Mem0[ss:sp:word16] = v155
	v156 = Mem0[ss:bp - 0x000C:word16]
	sp = sp - 2
	Mem0[ss:sp:word16] = v156
	call fn0800_4346 (retsize: 2;)
	sp = sp + 0x0004
	SCZO = cond(sp)
	// succ:  l0800_6220
l0800_6220:
	v57 = Mem0[ds:0x29E1:word16]
	sp = sp - 2
	Mem0[ss:sp:word16] = v57
	v58 = Mem0[ds:0x29DF:word16]
	sp = sp - 2
	Mem0[ss:sp:word16] = v58
	al = 0x00
	sp = sp - 2
	Mem0[ss:sp:word16] = ax
	call fn0800_4047 (retsize: 2;)
	sp = sp + 0x0006
	SCZO = cond(sp)
	v59 = Mem0[ds:0x29E1:word16]
	sp = sp - 2
	Mem0[ss:sp:word16] = v59
	v60 = Mem0[ds:0x29DF:word16]
	sp = sp - 2
	Mem0[ss:sp:word16] = v60
	call fn0800_AD2F (retsize: 2;)
	sp = sp + 0x0004
	SCZO = cond(sp)
	ax = ax + 0xFFE0
	SCZO = cond(ax)
	dx = dx + 0xFF + C
	SCZO = cond(dx)
	Mem0[ss:bp - 0x001A:word16] = dx
	Mem0[ss:bp - 0x001C:word16] = ax
	goto l0800_6266
	// succ:  l0800_6266
l0800_624D:
	v161 = Mem0[ds:0x29E1:word16]
	sp = sp - 2
	Mem0[ss:sp:word16] = v161
	v162 = Mem0[ds:0x29DF:word16]
	sp = sp - 2
	Mem0[ss:sp:word16] = v162
	al = 0x00
	sp = sp - 2
	Mem0[ss:sp:word16] = ax
	call fn0800_4047 (retsize: 2;)
	sp = sp + 0x0006
	SCZO = cond(sp)
	v163 = Mem0[ss:bp - 0x001C:word16] + 0x0001
	Mem0[ss:bp - 0x001C:word16] = v163
	SCZO = cond(v163)
	v164 = Mem0[ss:bp - 0x001A:word16] + 0x00 + C
	Mem0[ss:bp - 0x001A:word16] = v164
	SCZO = cond(v164)
	// succ:  l0800_6266
l0800_6266:
	ax = Mem0[ss:bp - 0x001C:word16]
	ax = ax & 0x000F
	SZO = cond(ax)
	C = false
	ax = ax | 0x0000
	SZO = cond(ax)
	C = false
	branch Test(NE,Z) l0800_624D
	// succ:  l0800_6271 l0800_624D
l0800_6271:
	ax = Mem0[ss:bp - 0x0026:word16]
	cl = 0x04
	ax = ax << cl
	SCZO = cond(ax)
	v64 = Mem0[ss:bp - 0x0004:word16] - ax
	Mem0[ss:bp - 0x0004:word16] = v64
	SCZO = cond(v64)
	v65 = Mem0[ss:bp - 0x0002:word16] - 0x00 - C
	Mem0[ss:bp - 0x0002:word16] = v65
	SCZO = cond(v65)
	ax = ax ^ ax
	SZO = cond(ax)
	C = false
	sp = sp - 2
	Mem0[ss:sp:word16] = ax
	ax = Mem0[ss:bp - 0x0026:word16]
	ax = ax << cl
	SCZO = cond(ax)
	dx = dx ^ dx
	SZO = cond(dx)
	C = false
	sp = sp - 2
	Mem0[ss:sp:word16] = dx
	sp = sp - 2
	Mem0[ss:sp:word16] = ax
	v66 = Mem0[ds:0x29E5:word16]
	sp = sp - 2
	Mem0[ss:sp:word16] = v66
	v67 = Mem0[ds:0x29E3:word16]
	sp = sp - 2
	Mem0[ss:sp:word16] = v67
	call fn0800_ACB3 (retsize: 2;)
	sp = sp + 0x000A
	SCZO = cond(sp)
	v68 = Mem0[ss:bp - 0x0002:word16]
	sp = sp - 2
	Mem0[ss:sp:word16] = v68
	v69 = Mem0[ss:bp - 0x0004:word16]
	sp = sp - 2
	Mem0[ss:sp:word16] = v69
	v70 = Mem0[ss:bp - 0x0002:word16]
	sp = sp - 2
	Mem0[ss:sp:word16] = v70
	v71 = Mem0[ss:bp - 0x0004:word16]
	sp = sp - 2
	Mem0[ss:sp:word16] = v71
	call fn0800_75EA (retsize: 2;)
	sp = sp + 0x0008
	SCZO = cond(sp)
	ax = ax ^ ax
	SZO = cond(ax)
	C = false
	sp = sp - 2
	Mem0[ss:sp:word16] = ax
	dx = 0x0020
	sp = sp - 2
	Mem0[ss:sp:word16] = ax
	sp = sp - 2
	Mem0[ss:sp:word16] = dx
	v72 = Mem0[ds:0x29E1:word16]
	sp = sp - 2
	Mem0[ss:sp:word16] = v72
	v73 = Mem0[ds:0x29DF:word16]
	sp = sp - 2
	Mem0[ss:sp:word16] = v73
	call fn0800_ACB3 (retsize: 2;)
	sp = sp + 0x000A
	SCZO = cond(sp)
	v74 = Mem0[ds:0x29E1:word16]
	sp = sp - 2
	Mem0[ss:sp:word16] = v74
	v75 = Mem0[ds:0x29DF:word16]
	sp = sp - 2
	Mem0[ss:sp:word16] = v75
	v76 = Mem0[ss:bp - 0x0030:word16]
	sp = sp - 2
	Mem0[ss:sp:word16] = v76
	call fn0800_40BF (retsize: 2;)
	sp = sp + 0x0006
	SCZO = cond(sp)
	v77 = Mem0[ds:0x29E1:word16]
	sp = sp - 2
	Mem0[ss:sp:word16] = v77
	v78 = Mem0[ds:0x29DF:word16]
	sp = sp - 2
	Mem0[ss:sp:word16] = v78
	v79 = Mem0[ss:bp - 0x0032:word16]
	sp = sp - 2
	Mem0[ss:sp:word16] = v79
	call fn0800_40BF (retsize: 2;)
	sp = sp + 0x0006
	SCZO = cond(sp)
	v80 = Mem0[ds:0x29E1:word16]
	sp = sp - 2
	Mem0[ss:sp:word16] = v80
	v81 = Mem0[ds:0x29DF:word16]
	sp = sp - 2
	Mem0[ss:sp:word16] = v81
	v82 = Mem0[ss:bp - 0x002E:word16]
	sp = sp - 2
	Mem0[ss:sp:word16] = v82
	call fn0800_40BF (retsize: 2;)
	sp = sp + 0x0006
	SCZO = cond(sp)
	v83 = Mem0[ds:0x29E1:word16]
	sp = sp - 2
	Mem0[ss:sp:word16] = v83
	v84 = Mem0[ds:0x29DF:word16]
	sp = sp - 2
	Mem0[ss:sp:word16] = v84
	v85 = Mem0[ss:bp - 0x002C:word16]
	sp = sp - 2
	Mem0[ss:sp:word16] = v85
	call fn0800_40BF (retsize: 2;)
	sp = sp + 0x0006
	SCZO = cond(sp)
	v86 = Mem0[ds:0x29E1:word16]
	sp = sp - 2
	Mem0[ss:sp:word16] = v86
	v87 = Mem0[ds:0x29DF:word16]
	sp = sp - 2
	Mem0[ss:sp:word16] = v87
	v88 = Mem0[ss:bp - 0x001C:word16]
	sp = sp - 2
	Mem0[ss:sp:word16] = v88
	call fn0800_40BF (retsize: 2;)
	sp = sp + 0x0006
	SCZO = cond(sp)
	dx = Mem0[ds:0x2A05:word16]
	ax = Mem0[ds:0x2A03:word16]
	cl = 0x04
	call fn0800_8CAA (retsize: 2;)
	Mem0[ss:bp - 0x0022:word16] = ax
	ax = Mem0[ds:0x2A03:word16]
	ax = ax & 0x000F
	SZO = cond(ax)
	C = false
	ax = ax | 0x0000
	SZO = cond(ax)
	C = false
	branch Test(EQ,Z) l0800_6333
	// succ:  l0800_6330 l0800_6333
l0800_6330:
	v89 = Mem0[ss:bp - 0x0022:word16] + 0x0001
	Mem0[ss:bp - 0x0022:word16] = v89
	SZO = cond(v89)
	// succ:  l0800_6333
l0800_6333:
	v90 = Mem0[ds:0x29E1:word16]
	sp = sp - 2
	Mem0[ss:sp:word16] = v90
	v91 = Mem0[ds:0x29DF:word16]
	sp = sp - 2
	Mem0[ss:sp:word16] = v91
	v92 = Mem0[ss:bp - 0x0022:word16]
	sp = sp - 2
	Mem0[ss:sp:word16] = v92
	call fn0800_40BF (retsize: 2;)
	sp = sp + 0x0006
	SCZO = cond(sp)
	v93 = Mem0[ds:0x29E1:word16]
	sp = sp - 2
	Mem0[ss:sp:word16] = v93
	v94 = Mem0[ds:0x29DF:word16]
	sp = sp - 2
	Mem0[ss:sp:word16] = v94
	dx = Mem0[ss:bp - 0x001A:word16]
	ax = Mem0[ss:bp - 0x001C:word16]
	cl = 0x04
	call fn0800_8CAA (retsize: 2;)
	dx = Mem0[ss:bp - 0x0022:word16]
	dx = dx + ax
	SCZO = cond(dx)
	sp = sp - 2
	Mem0[ss:sp:word16] = dx
	call fn0800_40BF (retsize: 2;)
	sp = sp + 0x0006
	SCZO = cond(sp)
	ax = Mem0[ss:bp - 0x0002:word16]
	dx = Mem0[ss:bp - 0x0004:word16]
	dx = dx - Mem0[ds:0x2A03:word16]
	SCZO = cond(dx)
	ax = ax - Mem0[ds:0x2A05:word16] - C
	SCZO = cond(ax)
	dx = dx + Mem0[ds:0x4E88:word16]
	SCZO = cond(dx)
	ax = ax + Mem0[ds:0x4E8A:word16] + C
	SCZO = cond(ax)
	dx = dx + 0x0080
	SCZO = cond(dx)
	ax = ax + 0x0000 + C
	SCZO = cond(ax)
	Mem0[ss:bp - 0x0006:word16] = ax
	Mem0[ss:bp - 0x0008:word16] = dx
	SCZO = cond(Mem0[ds:0x2A1D:word16] - 0x0000)
	branch Test(EQ,Z) l0800_6398
	// succ:  l0800_638D l0800_6398
l0800_638D:
	v95 = Mem0[ss:bp - 0x0008:word16] + 0x0200
	Mem0[ss:bp - 0x0008:word16] = v95
	SCZO = cond(v95)
	v96 = Mem0[ss:bp - 0x0006:word16] + 0x00 + C
	Mem0[ss:bp - 0x0006:word16] = v96
	SCZO = cond(v96)
	goto l0800_63A8
	// succ:  l0800_63A8
l0800_6398:
	SCZO = cond(Mem0[ds:0x2A21:word16] - 0x0001)
	branch Test(NE,Z) l0800_63A8
	// succ:  l0800_639F l0800_63A8
l0800_639F:
	v153 = Mem0[ss:bp - 0x0008:word16] + 0x0180
	Mem0[ss:bp - 0x0008:word16] = v153
	SCZO = cond(v153)
	v154 = Mem0[ss:bp - 0x0006:word16] + 0x00 + C
	Mem0[ss:bp - 0x0006:word16] = v154
	SCZO = cond(v154)
	// succ:  l0800_63A8
l0800_63A8:
	ax = ax ^ ax
	SZO = cond(ax)
	C = false
	sp = sp - 2
	Mem0[ss:sp:word16] = ax
	ax = Mem0[ss:bp - 0x0026:word16]
	cl = 0x04
	ax = ax << cl
	SCZO = cond(ax)
	dx = Mem0[ss:bp - 0x0002:word16]
	bx = Mem0[ss:bp - 0x0004:word16]
	bx = bx + ax
	SCZO = cond(bx)
	dx = dx + 0x00 + C
	SCZO = cond(dx)
	sp = sp - 2
	Mem0[ss:sp:word16] = dx
	sp = sp - 2
	Mem0[ss:sp:word16] = bx
	v113 = Mem0[ds:0x29E5:word16]
	sp = sp - 2
	Mem0[ss:sp:word16] = v113
	v114 = Mem0[ds:0x29E3:word16]
	sp = sp - 2
	Mem0[ss:sp:word16] = v114
	call fn0800_ACB3 (retsize: 2;)
	sp = sp + 0x000A
	SCZO = cond(sp)
	ax = 0x0002
	sp = sp - 2
	Mem0[ss:sp:word16] = ax
	ax = ax ^ ax
	SZO = cond(ax)
	C = false
	sp = sp - 2
	Mem0[ss:sp:word16] = ax
	sp = sp - 2
	Mem0[ss:sp:word16] = ax
	v115 = Mem0[ds:0x29E1:word16]
	sp = sp - 2
	Mem0[ss:sp:word16] = v115
	v116 = Mem0[ds:0x29DF:word16]
	sp = sp - 2
	Mem0[ss:sp:word16] = v116
	call fn0800_ACB3 (retsize: 2;)
	sp = sp + 0x000A
	SCZO = cond(sp)
	v117 = Mem0[ds:0x29E1:word16]
	sp = sp - 2
	Mem0[ss:sp:word16] = v117
	v118 = Mem0[ds:0x29DF:word16]
	sp = sp - 2
	Mem0[ss:sp:word16] = v118
	call fn0800_AD2F (retsize: 2;)
	sp = sp + 0x0004
	SCZO = cond(sp)
	Mem0[ss:bp - 0x001E:word16] = dx
	Mem0[ss:bp - 0x0020:word16] = ax
	ax = Mem0[ss:bp - 0x0026:word16]
	cl = 0x04
	ax = ax << cl
	SCZO = cond(ax)
	dx = Mem0[ds:0x2A09:word16]
	bx = Mem0[ds:0x2A07:word16]
	bx = bx - Mem0[ss:bp - 0x0004:word16]
	SCZO = cond(bx)
	dx = dx - Mem0[ss:bp - 0x0002:word16] - C
	SCZO = cond(dx)
	bx = bx - ax
	SCZO = cond(bx)
	dx = dx - 0x00 - C
	SCZO = cond(dx)
	sp = sp - 2
	Mem0[ss:sp:word16] = dx
	sp = sp - 2
	Mem0[ss:sp:word16] = bx
	v119 = Mem0[ds:0x29E1:word16]
	sp = sp - 2
	Mem0[ss:sp:word16] = v119
	v120 = Mem0[ds:0x29DF:word16]
	sp = sp - 2
	Mem0[ss:sp:word16] = v120
	v121 = Mem0[ds:0x29E5:word16]
	sp = sp - 2
	Mem0[ss:sp:word16] = v121
	v122 = Mem0[ds:0x29E3:word16]
	sp = sp - 2
	Mem0[ss:sp:word16] = v122
	call fn0800_3B0A (retsize: 2;)
	sp = sp + 0x000C
	SCZO = cond(sp)
	ax = Mem0[ss:bp - 0x0020:word16]
	ax = ax & 0x01FF
	SZO = cond(ax)
	C = false
	Mem0[ss:bp - 0x0022:word16] = ax
	dx = Mem0[ss:bp - 0x001E:word16]
	ax = Mem0[ss:bp - 0x0020:word16]
	cl = 0x09
	call fn0800_8CAA (retsize: 2;)
	di = ax
	SCZO = cond(Mem0[ss:bp - 0x0022:word16] - 0x0000)
	branch Test(EQ,Z) l0800_6446
	// succ:  l0800_6445 l0800_6446
l0800_6445:
	di = di + 0x0001
	SZO = cond(di)
	// succ:  l0800_6446
l0800_6446:
	ax = ax ^ ax
	SZO = cond(ax)
	C = false
	sp = sp - 2
	Mem0[ss:sp:word16] = ax
	dx = 0x0002
	sp = sp - 2
	Mem0[ss:sp:word16] = ax
	sp = sp - 2
	Mem0[ss:sp:word16] = dx
	v123 = Mem0[ds:0x29E1:word16]
	sp = sp - 2
	Mem0[ss:sp:word16] = v123
	v124 = Mem0[ds:0x29DF:word16]
	sp = sp - 2
	Mem0[ss:sp:word16] = v124
	call fn0800_ACB3 (retsize: 2;)
	sp = sp + 0x000A
	SCZO = cond(sp)
	v125 = Mem0[ds:0x29E1:word16]
	sp = sp - 2
	Mem0[ss:sp:word16] = v125
	v126 = Mem0[ds:0x29DF:word16]
	sp = sp - 2
	Mem0[ss:sp:word16] = v126
	v127 = Mem0[ss:bp - 0x0022:word16]
	sp = sp - 2
	Mem0[ss:sp:word16] = v127
	call fn0800_40BF (retsize: 2;)
	sp = sp + 0x0006
	SCZO = cond(sp)
	v128 = Mem0[ds:0x29E1:word16]
	sp = sp - 2
	Mem0[ss:sp:word16] = v128
	v129 = Mem0[ds:0x29DF:word16]
	sp = sp - 2
	Mem0[ss:sp:word16] = v129
	sp = sp - 2
	Mem0[ss:sp:word16] = di
	call fn0800_40BF (retsize: 2;)
	sp = sp + 0x0006
	SCZO = cond(sp)
	SCZO = cond(Mem0[ds:0x2A1D:word16] - 0x0000)
	branch Test(EQ,Z) l0800_64B9
	// succ:  l0800_6483 l0800_64B9
l0800_6483:
	ax = ax ^ ax
	SZO = cond(ax)
	C = false
	sp = sp - 2
	Mem0[ss:sp:word16] = ax
	dx = 0x002E
	sp = sp - 2
	Mem0[ss:sp:word16] = ax
	sp = sp - 2
	Mem0[ss:sp:word16] = dx
	v130 = Mem0[ds:0x29E1:word16]
	sp = sp - 2
	Mem0[ss:sp:word16] = v130
	v131 = Mem0[ds:0x29DF:word16]
	sp = sp - 2
	Mem0[ss:sp:word16] = v131
	call fn0800_ACB3 (retsize: 2;)
	sp = sp + 0x000A
	SCZO = cond(sp)
	v132 = Mem0[ds:0x29E1:word16]
	sp = sp - 2
	Mem0[ss:sp:word16] = v132
	v133 = Mem0[ds:0x29DF:word16]
	sp = sp - 2
	Mem0[ss:sp:word16] = v133
	v134 = Mem0[ss:bp - 0x0022:word16]
	sp = sp - 2
	Mem0[ss:sp:word16] = v134
	call fn0800_40BF (retsize: 2;)
	sp = sp + 0x0006
	SCZO = cond(sp)
	v135 = Mem0[ds:0x29E1:word16]
	sp = sp - 2
	Mem0[ss:sp:word16] = v135
	v136 = Mem0[ds:0x29DF:word16]
	sp = sp - 2
	Mem0[ss:sp:word16] = v136
	sp = sp - 2
	Mem0[ss:sp:word16] = di
	call fn0800_40BF (retsize: 2;)
	sp = sp + 0x0006
	SCZO = cond(sp)
	// succ:  l0800_64B9
l0800_64B9:
	ax = ax ^ ax
	SZO = cond(ax)
	C = false
	sp = sp - 2
	Mem0[ss:sp:word16] = ax
	dx = 0x0018
	sp = sp - 2
	Mem0[ss:sp:word16] = ax
	sp = sp - 2
	Mem0[ss:sp:word16] = dx
	v137 = Mem0[ds:0x29E1:word16]
	sp = sp - 2
	Mem0[ss:sp:word16] = v137
	v138 = Mem0[ds:0x29DF:word16]
	sp = sp - 2
	Mem0[ss:sp:word16] = v138
	call fn0800_ACB3 (retsize: 2;)
	sp = sp + 0x000A
	SCZO = cond(sp)
	v139 = Mem0[ds:0x29E1:word16]
	sp = sp - 2
	Mem0[ss:sp:word16] = v139
	v140 = Mem0[ds:0x29DF:word16]
	sp = sp - 2
	Mem0[ss:sp:word16] = v140
	al = Mem0[ds:0x2E75:byte]
	ah = 0x00
	cl = 0x08
	ax = ax << cl
	SCZO = cond(ax)
	dl = Mem0[ds:0x2E76:byte]
	dh = 0x00
	ax = ax + dx
	SCZO = cond(ax)
	ax = ax - 0x0020
	SCZO = cond(ax)
	sp = sp - 2
	Mem0[ss:sp:word16] = ax
	call fn0800_40BF (retsize: 2;)
	sp = sp + 0x0006
	SCZO = cond(sp)
	ax = ax ^ ax
	SZO = cond(ax)
	C = false
	sp = sp - 2
	Mem0[ss:sp:word16] = ax
	dx = 0x001C
	sp = sp - 2
	Mem0[ss:sp:word16] = ax
	sp = sp - 2
	Mem0[ss:sp:word16] = dx
	v141 = Mem0[ds:0x29E1:word16]
	sp = sp - 2
	Mem0[ss:sp:word16] = v141
	v142 = Mem0[ds:0x29DF:word16]
	sp = sp - 2
	Mem0[ss:sp:word16] = v142
	call fn0800_ACB3 (retsize: 2;)
	sp = sp + 0x000A
	SCZO = cond(sp)
	v143 = Mem0[ds:0x29E1:word16]
	sp = sp - 2
	Mem0[ss:sp:word16] = v143
	v144 = Mem0[ds:0x29DF:word16]
	sp = sp - 2
	Mem0[ss:sp:word16] = v144
	v145 = Mem0[ss:bp - 0x0028:word16]
	sp = sp - 2
	Mem0[ss:sp:word16] = v145
	call fn0800_40BF (retsize: 2;)
	sp = sp + 0x0006
	SCZO = cond(sp)
	v146 = Mem0[ds:0x29E1:word16]
	sp = sp - 2
	Mem0[ss:sp:word16] = v146
	v147 = Mem0[ds:0x29DF:word16]
	sp = sp - 2
	Mem0[ss:sp:word16] = v147
	v148 = Mem0[ss:bp - 0x002A:word16]
	sp = sp - 2
	Mem0[ss:sp:word16] = v148
	call fn0800_40BF (retsize: 2;)
	sp = sp + 0x0006
	SCZO = cond(sp)
	ax = ax ^ ax
	SZO = cond(ax)
	C = false
	sp = sp - 2
	Mem0[ss:sp:word16] = ax
	dx = 0x000A
	sp = sp - 2
	Mem0[ss:sp:word16] = ax
	sp = sp - 2
	Mem0[ss:sp:word16] = dx
	v149 = Mem0[ds:0x29E1:word16]
	sp = sp - 2
	Mem0[ss:sp:word16] = v149
	v150 = Mem0[ds:0x29DF:word16]
	sp = sp - 2
	Mem0[ss:sp:word16] = v150
	call fn0800_ACB3 (retsize: 2;)
	sp = sp + 0x000A
	SCZO = cond(sp)
	ax = Mem0[ss:bp - 0x0028:word16]
	cl = 0x04
	ax = ax << cl
	SCZO = cond(ax)
	dx = Mem0[ss:bp - 0x0002:word16]
	bx = Mem0[ss:bp - 0x0004:word16]
	bx = bx + ax
	SCZO = cond(bx)
	dx = dx + 0x00 + C
	SCZO = cond(dx)
	ax = Mem0[ss:bp - 0x001E:word16]
	cx = Mem0[ss:bp - 0x0020:word16]
	cx = cx - 0x0020
	SCZO = cond(cx)
	ax = ax - 0x0000 - C
	SCZO = cond(ax)
	cx = cx + Mem0[ss:bp - 0x0008:word16]
	SCZO = cond(cx)
	ax = ax + Mem0[ss:bp - 0x0006:word16] + C
	SCZO = cond(ax)
	SCZO = cond(dx - ax)
	branch Test(ULT,C) l0800_659C
	// succ:  l0800_6568 l0800_659C
l0800_6568:
	branch Test(UGT,CZ) l0800_656E
	// succ:  l0800_656A l0800_656E
l0800_656A:
	SCZO = cond(bx - cx)
	branch Test(ULE,CZ) l0800_659C
	// succ:  l0800_656E l0800_659C
l0800_656E:
	ax = Mem0[ss:bp - 0x0028:word16]
	cl = 0x04
	ax = ax << cl
	SCZO = cond(ax)
	dx = Mem0[ss:bp - 0x0002:word16]
	bx = Mem0[ss:bp - 0x0004:word16]
	bx = bx + ax
	SCZO = cond(bx)
	dx = dx + 0x00 + C
	SCZO = cond(dx)
	ax = Mem0[ss:bp - 0x001E:word16]
	cx = Mem0[ss:bp - 0x0020:word16]
	cx = cx - 0x0020
	SCZO = cond(cx)
	ax = ax - 0x0000 - C
	SCZO = cond(ax)
	cx = cx + Mem0[ss:bp - 0x0008:word16]
	SCZO = cond(cx)
	ax = ax + Mem0[ss:bp - 0x0006:word16] + C
	SCZO = cond(ax)
	bx = bx - cx
	SCZO = cond(bx)
	dx = dx - ax - C
	SCZO = cond(dx)
	v151 = Mem0[ss:bp - 0x0008:word16] + bx
	Mem0[ss:bp - 0x0008:word16] = v151
	SCZO = cond(v151)
	v152 = Mem0[ss:bp - 0x0006:word16] + dx + C
	Mem0[ss:bp - 0x0006:word16] = v152
	SCZO = cond(v152)
	// succ:  l0800_659C
l0800_659C:
	ax = ax ^ ax
	SZO = cond(ax)
	C = false
	dx = 0x0010
	dx = dx - Mem0[ss:bp - 0x0008:word16]
	SCZO = cond(dx)
	ax = ax - Mem0[ss:bp - 0x0006:word16] - C
	SCZO = cond(ax)
	dx = dx & 0x000F
	SZO = cond(dx)
	C = false
	v157 = Mem0[ss:bp - 0x0008:word16] + dx
	Mem0[ss:bp - 0x0008:word16] = v157
	SCZO = cond(v157)
	v158 = Mem0[ss:bp - 0x0006:word16] + 0x00 + C
	Mem0[ss:bp - 0x0006:word16] = v158
	SCZO = cond(v158)
	dx = Mem0[ss:bp - 0x0006:word16]
	ax = Mem0[ss:bp - 0x0008:word16]
	cl = 0x04
	call fn0800_8CAA (retsize: 2;)
	Mem0[ss:bp - 0x0028:word16] = ax
	v159 = Mem0[ds:0x29E1:word16]
	sp = sp - 2
	Mem0[ss:sp:word16] = v159
	v160 = Mem0[ds:0x29DF:word16]
	sp = sp - 2
	Mem0[ss:sp:word16] = v160
	sp = sp - 2
	Mem0[ss:sp:word16] = ax
	call fn0800_40BF (retsize: 2;)
	sp = sp + 0x0006
	SCZO = cond(sp)
	ax = Mem0[ss:bp - 0x002A:word16]
	SCZO = cond(ax - Mem0[ss:bp - 0x0028:word16])
	branch Test(UGE,C) l0800_65DC
	// succ:  l0800_65D6 l0800_65DC
l0800_65D6:
	ax = Mem0[ss:bp - 0x0028:word16]
	Mem0[ss:bp - 0x002A:word16] = ax
	// succ:  l0800_65DC
l0800_65DC:
	v170 = Mem0[ds:0x29E1:word16]
	sp = sp - 2
	Mem0[ss:sp:word16] = v170
	v171 = Mem0[ds:0x29DF:word16]
	sp = sp - 2
	Mem0[ss:sp:word16] = v171
	v172 = Mem0[ss:bp - 0x002A:word16]
	sp = sp - 2
	Mem0[ss:sp:word16] = v172
	call fn0800_40BF (retsize: 2;)
	sp = sp + 0x0006
	SCZO = cond(sp)
	dx = Mem0[ss:bp - 0x0002:word16]
	ax = Mem0[ss:bp - 0x0004:word16]
	ax = ax + Mem0[ds:0x4E88:word16]
	SCZO = cond(ax)
	dx = dx + Mem0[ds:0x4E8A:word16] + C
	SCZO = cond(dx)
	ax = ax + 0x0020
	SCZO = cond(ax)
	dx = dx + 0x00 + C
	SCZO = cond(dx)
	cl = 0x04
	call fn0800_8CAA (retsize: 2;)
	Mem0[ss:bp - 0x002C:word16] = ax
	v173 = Mem0[ds:0x29E1:word16]
	sp = sp - 2
	Mem0[ss:sp:word16] = v173
	v174 = Mem0[ds:0x29DF:word16]
	sp = sp - 2
	Mem0[ss:sp:word16] = v174
	sp = sp - 2
	Mem0[ss:sp:word16] = ax
	call fn0800_40BF (retsize: 2;)
	sp = sp + 0x0006
	SCZO = cond(sp)
	ax = Mem0[ss:bp - 0x001C:word16]
	ax = ax + 0x0080
	SCZO = cond(ax)
	Mem0[ss:bp - 0x002E:word16] = ax
	SCZO = cond(Mem0[ds:0x2A1D:word16] - 0x0000)
	branch Test(EQ,Z) l0800_662F
	// succ:  l0800_6628 l0800_662F
l0800_6628:
	v175 = Mem0[ss:bp - 0x002E:word16] + 0x0200
	Mem0[ss:bp - 0x002E:word16] = v175
	SCZO = cond(v175)
	goto l0800_663B
	// succ:  l0800_663B
l0800_662F:
	SCZO = cond(Mem0[ds:0x2A21:word16] - 0x0001)
	branch Test(NE,Z) l0800_663B
	// succ:  l0800_6636 l0800_663B
l0800_6636:
	v176 = Mem0[ss:bp - 0x002E:word16] + 0x0180
	Mem0[ss:bp - 0x002E:word16] = v176
	SCZO = cond(v176)
	// succ:  l0800_663B
l0800_663B:
	v177 = Mem0[ds:0x29E1:word16]
	sp = sp - 2
	Mem0[ss:sp:word16] = v177
	v178 = Mem0[ds:0x29DF:word16]
	sp = sp - 2
	Mem0[ss:sp:word16] = v178
	v179 = Mem0[ss:bp - 0x002E:word16]
	sp = sp - 2
	Mem0[ss:sp:word16] = v179
	call fn0800_40BF (retsize: 2;)
	sp = sp + 0x0006
	SCZO = cond(sp)
	ax = Mem0[ss:bp - 0x0026:word16]
	cl = 0x04
	ax = ax << cl
	SCZO = cond(ax)
	dx = Mem0[ds:0x2A09:word16]
	bx = Mem0[ds:0x2A07:word16]
	bx = bx - Mem0[ss:bp - 0x0004:word16]
	SCZO = cond(bx)
	dx = dx - Mem0[ss:bp - 0x0002:word16] - C
	SCZO = cond(dx)
	bx = bx - ax
	SCZO = cond(bx)
	dx = dx - 0x00 - C
	SCZO = cond(dx)
	bx = bx | dx
	SZO = cond(bx)
	C = false
	branch Test(EQ,Z) l0800_6673
	// succ:  l0800_666A l0800_6673
l0800_666A:
	ax = 0x0001
	di = Mem0[ss:sp:word16]
	sp = sp + 2
	si = Mem0[ss:sp:word16]
	sp = sp + 2
	sp = bp
	bp = Mem0[ss:sp:word16]
	sp = sp + 2
	return
	// succ:  fn0800_5E64_exit
l0800_6673:
	ax = ax ^ ax
	SZO = cond(ax)
	C = false
	di = Mem0[ss:sp:word16]
	sp = sp + 2
	si = Mem0[ss:sp:word16]
	sp = sp + 2
	sp = bp
	bp = Mem0[ss:sp:word16]
	sp = sp + 2
	return
	// succ:  fn0800_5E64_exit
fn0800_5E64_exit:


// fn0800_669C
// Return size: 2
define fn0800_669C
fn0800_669C_entry:
	// succ:  l0800_669C
l0800_669C:
	sp = fp
	Top = 0
	sp = sp - 2
	Mem0[ss:sp:word16] = bp
	bp = sp
	sp = sp - 0x0004
	SCZO = cond(sp)
	sp = sp - 2
	Mem0[ss:sp:word16] = si
	sp = sp - 2
	Mem0[ss:sp:word16] = di
	SCZO = cond(Mem0[ds:0x2A09:word16] - 0x0000)
	branch Test(ULT,C) l0800_66BE
	// succ:  l0800_66AB l0800_66BE
l0800_66AB:
	branch Test(UGT,CZ) l0800_66B5
	// succ:  l0800_66AD l0800_66B5
l0800_66AD:
	SCZO = cond(Mem0[ds:0x2A07:word16] - 0xFEFE)
	branch Test(ULE,CZ) l0800_66BE
	// succ:  l0800_66B5 l0800_66BE
l0800_66B5:
	ax = 0x0003
	di = Mem0[ss:sp:word16]
	sp = sp + 2
	si = Mem0[ss:sp:word16]
	sp = sp + 2
	sp = bp
	bp = Mem0[ss:sp:word16]
	sp = sp + 2
	return
	// succ:  fn0800_669C_exit
l0800_66BE:
	sp = sp - 2
	Mem0[ss:sp:word16] = ds
	es = Mem0[ss:sp:selector]
	sp = sp + 2
	di = 0x2206
	si = 0x4271
	cx = 0x0004
	dx = 0x0003
	SCZO = cond(dx - cx)
	branch Test(UGE,C) l0800_66D2
	// succ:  l0800_66D0 l0800_66D2
l0800_66D0:
	cx = dx
	// succ:  l0800_66D2
l0800_66D2:
	ax = ax ^ ax
	SZO = cond(ax)
	C = false
	// succ:  l0800_66D4
l0800_66D4:
	branch cx == 0x0000 l0800_66D6
	// succ:  l0800_66D4_1 l0800_66D6
l0800_66D4_1:
	SCZO = cond(Mem0[ds:si:byte] - Mem0[es:di:byte])
	si = si + 0x0001
	di = di + 0x0001
	cx = cx - 0x0001
	branch Test(NE,Z) l0800_66D4
	// succ:  l0800_66D6 l0800_66D4
l0800_66D6:
	branch Test(EQ,Z) l0800_66DD
	// succ:  l0800_66D8 l0800_66DD
l0800_66D8:
	ax = ax - ax - C
	SCZO = cond(ax)
	ax = ax - 0xFFFF - C
	SCZO = cond(ax)
	// succ:  l0800_66DD
l0800_66DD:
	ax = ax | ax
	SZO = cond(ax)
	C = false
	branch Test(EQ,Z) l0800_6715
	// succ:  l0800_66E1 l0800_6715
l0800_66E1:
	sp = sp - 2
	Mem0[ss:sp:word16] = ds
	es = Mem0[ss:sp:selector]
	sp = sp + 2
	di = 0x4271
	si = 0x2206
	dx = 0x0003
	cx = 0x0004
	dx = dx - cx
	SCZO = cond(dx)
	branch Test(UGE,C) l0800_66F7
	// succ:  l0800_66F3 l0800_66F7
l0800_66F3:
	cx = cx + dx
	SCZO = cond(cx)
	dx = dx ^ dx
	SZO = cond(dx)
	C = false
	// succ:  l0800_66F7
l0800_66F7:
	cx = cx >>u 0x0001
	SCZO = cond(cx)
	// succ:  l0800_66F9
l0800_66F9:
	branch cx == 0x0000 l0800_66FB
	// succ:  l0800_66F9_1 l0800_66FB
l0800_66F9_1:
	v27 = Mem0[ds:si:word16]
	Mem0[es:di:word16] = v27
	si = si + 0x0002
	di = di + 0x0002
	cx = cx - 0x0001
	goto l0800_66F9
	// succ:  l0800_66F9
l0800_66FB:
	cx = cx + cx + C
	SCZO = cond(cx)
	// succ:  l0800_66FD
l0800_66FD:
	branch cx == 0x0000 l0800_66FF
	// succ:  l0800_66FD_1 l0800_66FF
l0800_66FD_1:
	v30 = Mem0[ds:si:byte]
	Mem0[es:di:byte] = v30
	si = si + 0x0001
	di = di + 0x0001
	cx = cx - 0x0001
	goto l0800_66FD
	// succ:  l0800_66FD
l0800_66FF:
	cx = dx
	ax = ax ^ ax
	SZO = cond(ax)
	C = false
	// succ:  l0800_6703
l0800_6703:
	branch cx == 0x0000 l0800_6705
	// succ:  l0800_6703_1 l0800_6705
l0800_6703_1:
	Mem0[es:di:byte] = al
	di = di + 0x0001
	cx = cx - 0x0001
	goto l0800_6703
	// succ:  l0800_6703
l0800_6705:
	sp = sp - 2
	Mem0[ss:sp:word16] = ds
	ax = 0x2E75
	sp = sp - 2
	Mem0[ss:sp:word16] = ax
	sp = sp - 2
	Mem0[ss:sp:word16] = ds
	ax = 0x4271
	sp = sp - 2
	Mem0[ss:sp:word16] = ax
	call fn0800_09A3 (retsize: 2;)
	sp = sp + 0x0008
	SCZO = cond(sp)
	// succ:  l0800_6715
l0800_6715:
	v17 = Mem0[ds:0x29E1:word16]
	sp = sp - 2
	Mem0[ss:sp:word16] = v17
	v18 = Mem0[ds:0x29DF:word16]
	sp = sp - 2
	Mem0[ss:sp:word16] = v18
	al = Mem0[ds:0x2E75:byte]
	ah = 0x00
	cl = 0x08
	ax = ax << cl
	SCZO = cond(ax)
	dl = Mem0[ds:0x2E76:byte]
	dh = 0x00
	ax = ax + dx
	SCZO = cond(ax)
	dx = dx ^ dx
	SZO = cond(dx)
	C = false
	sp = sp - 2
	Mem0[ss:sp:word16] = dx
	sp = sp - 2
	Mem0[ss:sp:word16] = ax
	sp = sp - 2
	Mem0[ss:sp:word16] = ds
	ax = 0x2E77
	sp = sp - 2
	Mem0[ss:sp:word16] = ax
	call fn0800_4152 (retsize: 2;)
	sp = sp + 0x000C
	SCZO = cond(sp)
	al = Mem0[ds:0x2E75:byte]
	ah = 0x00
	cl = 0x08
	ax = ax << cl
	SCZO = cond(ax)
	dl = Mem0[ds:0x2E76:byte]
	dh = 0x00
	ax = ax + dx
	SCZO = cond(ax)
	dx = Mem0[ds:0x2A09:word16]
	bx = Mem0[ds:0x2A07:word16]
	bx = bx + ax
	SCZO = cond(bx)
	dx = dx + 0x00 + C
	SCZO = cond(dx)
	bx = bx + 0x0040
	SCZO = cond(bx)
	dx = dx + 0x00 + C
	SCZO = cond(dx)
	Mem0[ss:bp - 0x0002:word16] = dx
	Mem0[ss:bp - 0x0004:word16] = bx
	SCZO = cond(Mem0[ds:0x2A1D:word16] - 0x0000)
	branch Test(EQ,Z) l0800_6779
	// succ:  l0800_676E l0800_6779
l0800_676E:
	v25 = Mem0[ss:bp - 0x0004:word16] + 0x0200
	Mem0[ss:bp - 0x0004:word16] = v25
	SCZO = cond(v25)
	v26 = Mem0[ss:bp - 0x0002:word16] + 0x00 + C
	Mem0[ss:bp - 0x0002:word16] = v26
	SCZO = cond(v26)
	goto l0800_6789
	// succ:  l0800_6789
l0800_6779:
	SCZO = cond(Mem0[ds:0x2A21:word16] - 0x0001)
	branch Test(NE,Z) l0800_6789
	// succ:  l0800_6780 l0800_6789
l0800_6780:
	v28 = Mem0[ss:bp - 0x0004:word16] + 0x0180
	Mem0[ss:bp - 0x0004:word16] = v28
	SCZO = cond(v28)
	v29 = Mem0[ss:bp - 0x0002:word16] + 0x00 + C
	Mem0[ss:bp - 0x0002:word16] = v29
	SCZO = cond(v29)
	// succ:  l0800_6789
l0800_6789:
	SCZO = cond(Mem0[ss:bp - 0x0002:word16] - 0x0000)
	branch Test(ULT,C) l0800_67A1
	// succ:  l0800_678F l0800_67A1
l0800_678F:
	branch Test(UGT,CZ) l0800_6798
	// succ:  l0800_6791 l0800_6798
l0800_6791:
	SCZO = cond(Mem0[ss:bp - 0x0004:word16] - 0xFEFE)
	branch Test(ULE,CZ) l0800_67A1
	// succ:  l0800_6798 l0800_67A1
l0800_6798:
	ax = 0x0003
	di = Mem0[ss:sp:word16]
	sp = sp + 2
	si = Mem0[ss:sp:word16]
	sp = sp + 2
	sp = bp
	bp = Mem0[ss:sp:word16]
	sp = sp + 2
	return
	// succ:  fn0800_669C_exit
l0800_67A1:
	v31 = Mem0[ds:0x2A09:word16]
	sp = sp - 2
	Mem0[ss:sp:word16] = v31
	v32 = Mem0[ds:0x2A07:word16]
	sp = sp - 2
	Mem0[ss:sp:word16] = v32
	v33 = Mem0[ds:0x2A09:word16]
	sp = sp - 2
	Mem0[ss:sp:word16] = v33
	v34 = Mem0[ds:0x2A07:word16]
	sp = sp - 2
	Mem0[ss:sp:word16] = v34
	call fn0800_75EA (retsize: 2;)
	sp = sp + 0x0008
	SCZO = cond(sp)
	ax = ax ^ ax
	SZO = cond(ax)
	C = false
	di = Mem0[ss:sp:word16]
	sp = sp + 2
	si = Mem0[ss:sp:word16]
	sp = sp + 2
	sp = bp
	bp = Mem0[ss:sp:word16]
	sp = sp + 2
	return
	// succ:  fn0800_669C_exit
fn0800_669C_exit:


// fn0800_67BF
// Return size: 2
define fn0800_67BF
fn0800_67BF_entry:
	// succ:  l0800_67BF
l0800_67BF:
	sp = fp
	Top = 0
	sp = sp - 2
	Mem0[ss:sp:word16] = bp
	bp = sp
	sp = sp - 0x000E
	SCZO = cond(sp)
	al = Mem0[ds:0x2E75:byte]
	ah = 0x00
	cl = 0x08
	ax = ax << cl
	SCZO = cond(ax)
	dl = Mem0[ds:0x2E76:byte]
	dh = 0x00
	ax = ax + dx
	SCZO = cond(ax)
	Mem0[ss:bp - 0x000E:word16] = ax
	dx = dx ^ dx
	SZO = cond(dx)
	C = false
	SCZO = cond(dx - Mem0[ds:0x2A09:word16])
	branch Test(ULT,C) l0800_67F0
	// succ:  l0800_67E1 l0800_67F0
l0800_67E1:
	branch Test(NE,Z) l0800_67E9
	// succ:  l0800_67E3 l0800_67E9
l0800_67E3:
	SCZO = cond(ax - Mem0[ds:0x2A07:word16])
	branch Test(ULT,C) l0800_67F0
	// succ:  l0800_67E9 l0800_67F0
l0800_67E9:
	ax = 0x0003
	sp = bp
	bp = Mem0[ss:sp:word16]
	sp = sp + 2
	return
	// succ:  fn0800_67BF_exit
l0800_67F0:
	v17 = Mem0[ds:0x29E1:word16]
	sp = sp - 2
	Mem0[ss:sp:word16] = v17
	v18 = Mem0[ds:0x29DF:word16]
	sp = sp - 2
	Mem0[ss:sp:word16] = v18
	ax = ax ^ ax
	SZO = cond(ax)
	C = false
	sp = sp - 2
	Mem0[ss:sp:word16] = ax
	v19 = Mem0[ss:bp - 0x000E:word16]
	sp = sp - 2
	Mem0[ss:sp:word16] = v19
	sp = sp - 2
	Mem0[ss:sp:word16] = ds
	ax = 0x2E77
	sp = sp - 2
	Mem0[ss:sp:word16] = ax
	call fn0800_4152 (retsize: 2;)
	sp = sp + 0x000C
	SCZO = cond(sp)
	ax = 0x0001
	sp = sp - 2
	Mem0[ss:sp:word16] = ax
	ax = 0xFFFF
	dx = 0xFFEE
	sp = sp - 2
	Mem0[ss:sp:word16] = ax
	sp = sp - 2
	Mem0[ss:sp:word16] = dx
	v20 = Mem0[ds:0x29E1:word16]
	sp = sp - 2
	Mem0[ss:sp:word16] = v20
	v21 = Mem0[ds:0x29DF:word16]
	sp = sp - 2
	Mem0[ss:sp:word16] = v21
	call fn0800_ACB3 (retsize: 2;)
	sp = sp + 0x000A
	SCZO = cond(sp)
	v22 = Mem0[ds:0x29E5:word16]
	sp = sp - 2
	Mem0[ss:sp:word16] = v22
	v23 = Mem0[ds:0x29E3:word16]
	sp = sp - 2
	Mem0[ss:sp:word16] = v23
	call fn0800_3F0A (retsize: 2;)
	sp = sp + 0x0004
	SCZO = cond(sp)
	SCZO = cond(ax - 0x601A)
	branch Test(EQ,Z) l0800_6839
	// succ:  l0800_6836 l0800_6839
l0800_6836:
	goto l0800_68F1
	// succ:  l0800_68F1
l0800_6839:
	ax = 0x0001
	sp = sp - 2
	Mem0[ss:sp:word16] = ax
	ax = ax ^ ax
	SZO = cond(ax)
	C = false
	dx = 0x0002
	sp = sp - 2
	Mem0[ss:sp:word16] = ax
	sp = sp - 2
	Mem0[ss:sp:word16] = dx
	v24 = Mem0[ds:0x29E5:word16]
	sp = sp - 2
	Mem0[ss:sp:word16] = v24
	v25 = Mem0[ds:0x29E3:word16]
	sp = sp - 2
	Mem0[ss:sp:word16] = v25
	call fn0800_ACB3 (retsize: 2;)
	sp = sp + 0x000A
	SCZO = cond(sp)
	ax = ax ^ ax
	SZO = cond(ax)
	C = false
	dx = 0x0010
	sp = sp - 2
	Mem0[ss:sp:word16] = ax
	sp = sp - 2
	Mem0[ss:sp:word16] = dx
	v26 = Mem0[ds:0x29E1:word16]
	sp = sp - 2
	Mem0[ss:sp:word16] = v26
	v27 = Mem0[ds:0x29DF:word16]
	sp = sp - 2
	Mem0[ss:sp:word16] = v27
	v28 = Mem0[ds:0x29E5:word16]
	sp = sp - 2
	Mem0[ss:sp:word16] = v28
	v29 = Mem0[ds:0x29E3:word16]
	sp = sp - 2
	Mem0[ss:sp:word16] = v29
	call fn0800_3B0A (retsize: 2;)
	sp = sp + 0x000C
	SCZO = cond(sp)
	ax = ax ^ ax
	SZO = cond(ax)
	C = false
	sp = sp - 2
	Mem0[ss:sp:word16] = ax
	dx = 0x001A
	sp = sp - 2
	Mem0[ss:sp:word16] = ax
	sp = sp - 2
	Mem0[ss:sp:word16] = dx
	v30 = Mem0[ds:0x29E5:word16]
	sp = sp - 2
	Mem0[ss:sp:word16] = v30
	v31 = Mem0[ds:0x29E3:word16]
	sp = sp - 2
	Mem0[ss:sp:word16] = v31
	call fn0800_ACB3 (retsize: 2;)
	sp = sp + 0x000A
	SCZO = cond(sp)
	v32 = Mem0[ds:0x29E1:word16]
	sp = sp - 2
	Mem0[ss:sp:word16] = v32
	v33 = Mem0[ds:0x29DF:word16]
	sp = sp - 2
	Mem0[ss:sp:word16] = v33
	v34 = Mem0[ds:0x29E5:word16]
	sp = sp - 2
	Mem0[ss:sp:word16] = v34
	v35 = Mem0[ds:0x29E3:word16]
	sp = sp - 2
	Mem0[ss:sp:word16] = v35
	call fn0800_3E27 (retsize: 2;)
	sp = sp + 0x0004
	SCZO = cond(sp)
	sp = sp - 2
	Mem0[ss:sp:word16] = ax
	call fn0800_401E (retsize: 2;)
	sp = sp + 0x0006
	SCZO = cond(sp)
	ax = Mem0[ds:0x2A09:word16]
	dx = Mem0[ds:0x2A07:word16]
	dx = dx - 0x001C
	SCZO = cond(dx)
	ax = ax - 0x0000 - C
	SCZO = cond(ax)
	sp = sp - 2
	Mem0[ss:sp:word16] = ax
	sp = sp - 2
	Mem0[ss:sp:word16] = dx
	ax = Mem0[ds:0x2A09:word16]
	dx = Mem0[ds:0x2A07:word16]
	dx = dx - 0x001C
	SCZO = cond(dx)
	ax = ax - 0x0000 - C
	SCZO = cond(ax)
	sp = sp - 2
	Mem0[ss:sp:word16] = ax
	sp = sp - 2
	Mem0[ss:sp:word16] = dx
	call fn0800_75EA (retsize: 2;)
	sp = sp + 0x0008
	SCZO = cond(sp)
	ax = Mem0[ds:0x2A09:word16]
	dx = Mem0[ds:0x2A07:word16]
	dx = dx - 0x001C
	SCZO = cond(dx)
	ax = ax - 0x0000 - C
	SCZO = cond(ax)
	dx = dx - Mem0[ds:0x2A03:word16]
	SCZO = cond(dx)
	ax = ax - Mem0[ds:0x2A05:word16] - C
	SCZO = cond(ax)
	dx = dx + Mem0[ds:0x4E88:word16]
	SCZO = cond(dx)
	ax = ax + Mem0[ds:0x4E8A:word16] + C
	SCZO = cond(ax)
	dx = dx + 0x000E
	SCZO = cond(dx)
	ax = ax + 0x0000 + C
	SCZO = cond(ax)
	Mem0[ss:bp - 0x0006:word16] = ax
	Mem0[ss:bp - 0x0008:word16] = dx
	goto l0800_6959
	// succ:  l0800_6959
l0800_68F1:
	v36 = Mem0[ds:0x29E1:word16]
	sp = sp - 2
	Mem0[ss:sp:word16] = v36
	v37 = Mem0[ds:0x29DF:word16]
	sp = sp - 2
	Mem0[ss:sp:word16] = v37
	v38 = Mem0[ds:0x2A09:word16]
	sp = sp - 2
	Mem0[ss:sp:word16] = v38
	v39 = Mem0[ds:0x2A07:word16]
	sp = sp - 2
	Mem0[ss:sp:word16] = v39
	call fn0800_409C (retsize: 2;)
	sp = sp + 0x0008
	SCZO = cond(sp)
	ax = 0x0001
	sp = sp - 2
	Mem0[ss:sp:word16] = ax
	ax = ax ^ ax
	SZO = cond(ax)
	C = false
	dx = 0x000E
	sp = sp - 2
	Mem0[ss:sp:word16] = ax
	sp = sp - 2
	Mem0[ss:sp:word16] = dx
	v40 = Mem0[ds:0x29E1:word16]
	sp = sp - 2
	Mem0[ss:sp:word16] = v40
	v41 = Mem0[ds:0x29DF:word16]
	sp = sp - 2
	Mem0[ss:sp:word16] = v41
	call fn0800_ACB3 (retsize: 2;)
	sp = sp + 0x000A
	SCZO = cond(sp)
	v42 = Mem0[ds:0x2A09:word16]
	sp = sp - 2
	Mem0[ss:sp:word16] = v42
	v43 = Mem0[ds:0x2A07:word16]
	sp = sp - 2
	Mem0[ss:sp:word16] = v43
	v44 = Mem0[ds:0x2A09:word16]
	sp = sp - 2
	Mem0[ss:sp:word16] = v44
	v45 = Mem0[ds:0x2A07:word16]
	sp = sp - 2
	Mem0[ss:sp:word16] = v45
	call fn0800_75EA (retsize: 2;)
	sp = sp + 0x0008
	SCZO = cond(sp)
	ax = Mem0[ds:0x2A09:word16]
	dx = Mem0[ds:0x2A07:word16]
	dx = dx - Mem0[ds:0x2A03:word16]
	SCZO = cond(dx)
	ax = ax - Mem0[ds:0x2A05:word16] - C
	SCZO = cond(ax)
	dx = dx + Mem0[ds:0x4E88:word16]
	SCZO = cond(dx)
	ax = ax + Mem0[ds:0x4E8A:word16] + C
	SCZO = cond(ax)
	dx = dx + 0x000E
	SCZO = cond(dx)
	ax = ax + 0x0000 + C
	SCZO = cond(ax)
	Mem0[ss:bp - 0x0006:word16] = ax
	Mem0[ss:bp - 0x0008:word16] = dx
	// succ:  l0800_6959
l0800_6959:
	v46 = Mem0[ds:0x29E1:word16]
	sp = sp - 2
	Mem0[ss:sp:word16] = v46
	v47 = Mem0[ds:0x29DF:word16]
	sp = sp - 2
	Mem0[ss:sp:word16] = v47
	call fn0800_AD2F (retsize: 2;)
	sp = sp + 0x0004
	SCZO = cond(sp)
	ax = ax & 0x0001
	SZO = cond(ax)
	C = false
	ax = ax | 0x0000
	SZO = cond(ax)
	C = false
	branch Test(EQ,Z) l0800_6988
	// succ:  l0800_696F l0800_6988
l0800_696F:
	v48 = Mem0[ds:0x29E1:word16]
	sp = sp - 2
	Mem0[ss:sp:word16] = v48
	v49 = Mem0[ds:0x29DF:word16]
	sp = sp - 2
	Mem0[ss:sp:word16] = v49
	al = 0x90
	sp = sp - 2
	Mem0[ss:sp:word16] = ax
	call fn0800_4047 (retsize: 2;)
	sp = sp + 0x0006
	SCZO = cond(sp)
	v50 = Mem0[ss:bp - 0x0008:word16] + 0x0001
	Mem0[ss:bp - 0x0008:word16] = v50
	SCZO = cond(v50)
	v51 = Mem0[ss:bp - 0x0006:word16] + 0x00 + C
	Mem0[ss:bp - 0x0006:word16] = v51
	SCZO = cond(v51)
	// succ:  l0800_6988
l0800_6988:
	v52 = Mem0[ds:0x29E1:word16]
	sp = sp - 2
	Mem0[ss:sp:word16] = v52
	v53 = Mem0[ds:0x29DF:word16]
	sp = sp - 2
	Mem0[ss:sp:word16] = v53
	ax = ax ^ ax
	SZO = cond(ax)
	C = false
	sp = sp - 2
	Mem0[ss:sp:word16] = ax
	sp = sp - 2
	Mem0[ss:sp:word16] = ax
	call fn0800_409C (retsize: 2;)
	sp = sp + 0x0008
	SCZO = cond(sp)
	v54 = Mem0[ds:0x29E1:word16]
	sp = sp - 2
	Mem0[ss:sp:word16] = v54
	v55 = Mem0[ds:0x29DF:word16]
	sp = sp - 2
	Mem0[ss:sp:word16] = v55
	call fn0800_AD2F (retsize: 2;)
	sp = sp + 0x0004
	SCZO = cond(sp)
	ax = ax + 0xFFE0
	SCZO = cond(ax)
	dx = dx + 0xFF + C
	SCZO = cond(dx)
	Mem0[ds:0x2A05:word16] = dx
	Mem0[ds:0x2A03:word16] = ax
	ax = ax ^ ax
	SZO = cond(ax)
	C = false
	sp = sp - 2
	Mem0[ss:sp:word16] = ax
	dx = 0x0002
	sp = sp - 2
	Mem0[ss:sp:word16] = ax
	sp = sp - 2
	Mem0[ss:sp:word16] = dx
	v56 = Mem0[ds:0x29E1:word16]
	sp = sp - 2
	Mem0[ss:sp:word16] = v56
	v57 = Mem0[ds:0x29DF:word16]
	sp = sp - 2
	Mem0[ss:sp:word16] = v57
	call fn0800_ACB3 (retsize: 2;)
	sp = sp + 0x000A
	SCZO = cond(sp)
	v58 = Mem0[ds:0x29E1:word16]
	sp = sp - 2
	Mem0[ss:sp:word16] = v58
	v59 = Mem0[ds:0x29DF:word16]
	sp = sp - 2
	Mem0[ss:sp:word16] = v59
	call fn0800_3F58 (retsize: 2;)
	sp = sp + 0x0004
	SCZO = cond(sp)
	v60 = Mem0[ss:bp - 0x0008:word16] - ax
	Mem0[ss:bp - 0x0008:word16] = v60
	SCZO = cond(v60)
	v61 = Mem0[ss:bp - 0x0006:word16] - dx - C
	Mem0[ss:bp - 0x0006:word16] = v61
	SCZO = cond(v61)
	v62 = Mem0[ds:0x29E1:word16]
	sp = sp - 2
	Mem0[ss:sp:word16] = v62
	v63 = Mem0[ds:0x29DF:word16]
	sp = sp - 2
	Mem0[ss:sp:word16] = v63
	v64 = Mem0[ds:0x2A05:word16]
	sp = sp - 2
	Mem0[ss:sp:word16] = v64
	v65 = Mem0[ds:0x2A03:word16]
	sp = sp - 2
	Mem0[ss:sp:word16] = v65
	call fn0800_409C (retsize: 2;)
	sp = sp + 0x0008
	SCZO = cond(sp)
	ax = ax ^ ax
	SZO = cond(ax)
	C = false
	sp = sp - 2
	Mem0[ss:sp:word16] = ax
	sp = sp - 2
	Mem0[ss:sp:word16] = ax
	sp = sp - 2
	Mem0[ss:sp:word16] = ax
	v66 = Mem0[ds:0x29E5:word16]
	sp = sp - 2
	Mem0[ss:sp:word16] = v66
	v67 = Mem0[ds:0x29E3:word16]
	sp = sp - 2
	Mem0[ss:sp:word16] = v67
	call fn0800_ACB3 (retsize: 2;)
	sp = sp + 0x000A
	SCZO = cond(sp)
	v68 = Mem0[ds:0x29E5:word16]
	sp = sp - 2
	Mem0[ss:sp:word16] = v68
	v69 = Mem0[ds:0x29E3:word16]
	sp = sp - 2
	Mem0[ss:sp:word16] = v69
	call fn0800_3E27 (retsize: 2;)
	sp = sp + 0x0004
	SCZO = cond(sp)
	SCZO = cond(ax - 0x601A)
	branch Test(EQ,Z) l0800_6A1E
	// succ:  l0800_6A1B l0800_6A1E
l0800_6A1B:
	goto l0800_6AA4
	// succ:  l0800_6AA4
l0800_6A1E:
	v70 = Mem0[ds:0x29E5:word16]
	sp = sp - 2
	Mem0[ss:sp:word16] = v70
	v71 = Mem0[ds:0x29E3:word16]
	sp = sp - 2
	Mem0[ss:sp:word16] = v71
	call fn0800_3E5D (retsize: 2;)
	sp = sp + 0x0004
	SCZO = cond(sp)
	sp = sp - 2
	Mem0[ss:sp:word16] = ax
	sp = sp - 2
	Mem0[ss:sp:word16] = dx
	v72 = Mem0[ds:0x29E5:word16]
	sp = sp - 2
	Mem0[ss:sp:word16] = v72
	v73 = Mem0[ds:0x29E3:word16]
	sp = sp - 2
	Mem0[ss:sp:word16] = v73
	call fn0800_3E5D (retsize: 2;)
	sp = sp + 0x0004
	SCZO = cond(sp)
	bx = Mem0[ss:sp:word16]
	sp = sp + 2
	cx = Mem0[ss:sp:word16]
	sp = sp + 2
	cx = cx + ax
	SCZO = cond(cx)
	bx = bx + dx + C
	SCZO = cond(bx)
	Mem0[ss:bp - 0x0002:word16] = bx
	Mem0[ss:bp - 0x0004:word16] = cx
	v76 = Mem0[ds:0x29E5:word16]
	sp = sp - 2
	Mem0[ss:sp:word16] = v76
	v77 = Mem0[ds:0x29E3:word16]
	sp = sp - 2
	Mem0[ss:sp:word16] = v77
	call fn0800_3E5D (retsize: 2;)
	sp = sp + 0x0004
	SCZO = cond(sp)
	Mem0[ss:bp - 0x000A:word16] = dx
	Mem0[ss:bp - 0x000C:word16] = ax
	ax = Mem0[ss:bp - 0x0002:word16]
	dx = Mem0[ss:bp - 0x0004:word16]
	dx = dx + Mem0[ss:bp - 0x000C:word16]
	SCZO = cond(dx)
	ax = ax + Mem0[ss:bp - 0x000A:word16] + C
	SCZO = cond(ax)
	bx = Mem0[ds:0x2A05:word16]
	cx = Mem0[ds:0x2A03:word16]
	cx = cx + Mem0[ss:bp - 0x0008:word16]
	SCZO = cond(cx)
	bx = bx + Mem0[ss:bp - 0x0006:word16] + C
	SCZO = cond(bx)
	SCZO = cond(ax - bx)
	branch Test(ULT,C) l0800_6AA4
	// succ:  l0800_6A7A l0800_6AA4
l0800_6A7A:
	branch Test(UGT,CZ) l0800_6A80
	// succ:  l0800_6A7C l0800_6A80
l0800_6A7C:
	SCZO = cond(dx - cx)
	branch Test(ULE,CZ) l0800_6AA4
	// succ:  l0800_6A80 l0800_6AA4
l0800_6A80:
	ax = Mem0[ss:bp - 0x0002:word16]
	dx = Mem0[ss:bp - 0x0004:word16]
	dx = dx + Mem0[ss:bp - 0x000C:word16]
	SCZO = cond(dx)
	ax = ax + Mem0[ss:bp - 0x000A:word16] + C
	SCZO = cond(ax)
	bx = Mem0[ds:0x2A05:word16]
	cx = Mem0[ds:0x2A03:word16]
	cx = cx + Mem0[ss:bp - 0x0008:word16]
	SCZO = cond(cx)
	bx = bx + Mem0[ss:bp - 0x0006:word16] + C
	SCZO = cond(bx)
	dx = dx - cx
	SCZO = cond(dx)
	ax = ax - bx - C
	SCZO = cond(ax)
	v79 = Mem0[ss:bp - 0x0008:word16] + dx
	Mem0[ss:bp - 0x0008:word16] = v79
	SCZO = cond(v79)
	v80 = Mem0[ss:bp - 0x0006:word16] + ax + C
	Mem0[ss:bp - 0x0006:word16] = v80
	SCZO = cond(v80)
	// succ:  l0800_6AA4
l0800_6AA4:
	ax = ax ^ ax
	SZO = cond(ax)
	C = false
	sp = sp - 2
	Mem0[ss:sp:word16] = ax
	dx = 0x000A
	sp = sp - 2
	Mem0[ss:sp:word16] = ax
	sp = sp - 2
	Mem0[ss:sp:word16] = dx
	v81 = Mem0[ds:0x29E1:word16]
	sp = sp - 2
	Mem0[ss:sp:word16] = v81
	v82 = Mem0[ds:0x29DF:word16]
	sp = sp - 2
	Mem0[ss:sp:word16] = v82
	call fn0800_ACB3 (retsize: 2;)
	sp = sp + 0x000A
	SCZO = cond(sp)
	v83 = Mem0[ds:0x29E1:word16]
	sp = sp - 2
	Mem0[ss:sp:word16] = v83
	v84 = Mem0[ds:0x29DF:word16]
	sp = sp - 2
	Mem0[ss:sp:word16] = v84
	v85 = Mem0[ss:bp - 0x0006:word16]
	sp = sp - 2
	Mem0[ss:sp:word16] = v85
	v86 = Mem0[ss:bp - 0x0008:word16]
	sp = sp - 2
	Mem0[ss:sp:word16] = v86
	call fn0800_409C (retsize: 2;)
	sp = sp + 0x0008
	SCZO = cond(sp)
	ax = ax ^ ax
	SZO = cond(ax)
	C = false
	sp = bp
	bp = Mem0[ss:sp:word16]
	sp = sp + 2
	return
	// succ:  fn0800_67BF_exit
fn0800_67BF_exit:


// fn0800_6AD4
// Return size: 2
define fn0800_6AD4
fn0800_6AD4_entry:
	// succ:  l0800_6AD4
l0800_6AD4:
	sp = fp
	Top = 0
	sp = sp - 2
	Mem0[ss:sp:word16] = bp
	bp = sp
	sp = sp - 0x0018
	SCZO = cond(sp)
	sp = sp - 2
	Mem0[ss:sp:word16] = si
	al = Mem0[ds:0x2E75:byte]
	ah = 0x00
	cl = 0x08
	ax = ax << cl
	SCZO = cond(ax)
	dl = Mem0[ds:0x2E76:byte]
	dh = 0x00
	ax = ax + dx
	SCZO = cond(ax)
	dx = dx ^ dx
	SZO = cond(dx)
	C = false
	SCZO = cond(dx - Mem0[ds:0x2A09:word16])
	branch Test(ULT,C) l0800_6B04
	// succ:  l0800_6AF4 l0800_6B04
l0800_6AF4:
	branch Test(NE,Z) l0800_6AFC
	// succ:  l0800_6AF6 l0800_6AFC
l0800_6AF6:
	SCZO = cond(ax - Mem0[ds:0x2A07:word16])
	branch Test(ULT,C) l0800_6B04
	// succ:  l0800_6AFC l0800_6B04
l0800_6AFC:
	ax = 0x0003
	si = Mem0[ss:sp:word16]
	sp = sp + 2
	sp = bp
	bp = Mem0[ss:sp:word16]
	sp = sp + 2
	return
	// succ:  fn0800_6AD4_exit
l0800_6B04:
	v18 = Mem0[ds:0x29E5:word16]
	sp = sp - 2
	Mem0[ss:sp:word16] = v18
	v19 = Mem0[ds:0x29E3:word16]
	sp = sp - 2
	Mem0[ss:sp:word16] = v19
	call fn0800_3E5D (retsize: 2;)
	sp = sp + 0x0004
	SCZO = cond(sp)
	dx = dx | dx
	SZO = cond(dx)
	C = false
	branch Test(NE,Z) l0800_6B1B
	// succ:  l0800_6B16 l0800_6B1B
l0800_6B16:
	SCZO = cond(ax - 0x03F3)
	branch Test(EQ,Z) l0800_6B23
	// succ:  l0800_6B1B l0800_6B23
l0800_6B1B:
	ax = 0x0003
	si = Mem0[ss:sp:word16]
	sp = sp + 2
	sp = bp
	bp = Mem0[ss:sp:word16]
	sp = sp + 2
	return
	// succ:  fn0800_6AD4_exit
l0800_6B23:
	v20 = Mem0[ds:0x29E1:word16]
	sp = sp - 2
	Mem0[ss:sp:word16] = v20
	v21 = Mem0[ds:0x29DF:word16]
	sp = sp - 2
	Mem0[ss:sp:word16] = v21
	ax = ax ^ ax
	SZO = cond(ax)
	C = false
	dx = 0x03F3
	sp = sp - 2
	Mem0[ss:sp:word16] = ax
	sp = sp - 2
	Mem0[ss:sp:word16] = dx
	call fn0800_409C (retsize: 2;)
	sp = sp + 0x0008
	SCZO = cond(sp)
	// succ:  l0800_6B38
l0800_6B38:
	v22 = Mem0[ds:0x29E5:word16]
	sp = sp - 2
	Mem0[ss:sp:word16] = v22
	v23 = Mem0[ds:0x29E3:word16]
	sp = sp - 2
	Mem0[ss:sp:word16] = v23
	call fn0800_3E5D (retsize: 2;)
	sp = sp + 0x0004
	SCZO = cond(sp)
	Mem0[ss:bp - 0x0006:word16] = dx
	Mem0[ss:bp - 0x0008:word16] = ax
	Mem0[ss:bp - 0x0002:word16] = dx
	Mem0[ss:bp - 0x0004:word16] = ax
	v24 = Mem0[ds:0x29E1:word16]
	sp = sp - 2
	Mem0[ss:sp:word16] = v24
	v25 = Mem0[ds:0x29DF:word16]
	sp = sp - 2
	Mem0[ss:sp:word16] = v25
	v26 = Mem0[ss:bp - 0x0002:word16]
	sp = sp - 2
	Mem0[ss:sp:word16] = v26
	sp = sp - 2
	Mem0[ss:sp:word16] = ax
	call fn0800_409C (retsize: 2;)
	sp = sp + 0x0008
	SCZO = cond(sp)
	goto l0800_6B84
	// succ:  l0800_6B84
l0800_6B66:
	v48 = Mem0[ds:0x29E1:word16]
	sp = sp - 2
	Mem0[ss:sp:word16] = v48
	v49 = Mem0[ds:0x29DF:word16]
	sp = sp - 2
	Mem0[ss:sp:word16] = v49
	v50 = Mem0[ds:0x29E5:word16]
	sp = sp - 2
	Mem0[ss:sp:word16] = v50
	v51 = Mem0[ds:0x29E3:word16]
	sp = sp - 2
	Mem0[ss:sp:word16] = v51
	call fn0800_3E5D (retsize: 2;)
	sp = sp + 0x0004
	SCZO = cond(sp)
	sp = sp - 2
	Mem0[ss:sp:word16] = dx
	sp = sp - 2
	Mem0[ss:sp:word16] = ax
	call fn0800_409C (retsize: 2;)
	sp = sp + 0x0008
	SCZO = cond(sp)
	// succ:  l0800_6B84
l0800_6B84:
	ax = Mem0[ss:bp - 0x0008:word16]
	dx = Mem0[ss:bp - 0x0006:word16]
	v27 = Mem0[ss:bp - 0x0008:word16] - 0x0001
	Mem0[ss:bp - 0x0008:word16] = v27
	SCZO = cond(v27)
	v28 = Mem0[ss:bp - 0x0006:word16] - 0x00 - C
	Mem0[ss:bp - 0x0006:word16] = v28
	SCZO = cond(v28)
	ax = ax | dx
	SZO = cond(ax)
	C = false
	branch Test(NE,Z) l0800_6B66
	// succ:  l0800_6B96 l0800_6B66
l0800_6B96:
	ax = Mem0[ss:bp - 0x0004:word16]
	ax = ax | Mem0[ss:bp - 0x0002:word16]
	SZO = cond(ax)
	C = false
	branch Test(NE,Z) l0800_6B38
	// succ:  l0800_6B9E l0800_6B38
l0800_6B9E:
	v29 = Mem0[ds:0x29E1:word16]
	sp = sp - 2
	Mem0[ss:sp:word16] = v29
	v30 = Mem0[ds:0x29DF:word16]
	sp = sp - 2
	Mem0[ss:sp:word16] = v30
	v31 = Mem0[ds:0x29E5:word16]
	sp = sp - 2
	Mem0[ss:sp:word16] = v31
	v32 = Mem0[ds:0x29E3:word16]
	sp = sp - 2
	Mem0[ss:sp:word16] = v32
	call fn0800_3E5D (retsize: 2;)
	sp = sp + 0x0004
	SCZO = cond(sp)
	ax = ax + 0x0001
	SCZO = cond(ax)
	dx = dx + 0x00 + C
	SCZO = cond(dx)
	sp = sp - 2
	Mem0[ss:sp:word16] = dx
	sp = sp - 2
	Mem0[ss:sp:word16] = ax
	call fn0800_409C (retsize: 2;)
	sp = sp + 0x0008
	SCZO = cond(sp)
	v33 = Mem0[ds:0x29E5:word16]
	sp = sp - 2
	Mem0[ss:sp:word16] = v33
	v34 = Mem0[ds:0x29E3:word16]
	sp = sp - 2
	Mem0[ss:sp:word16] = v34
	call fn0800_3E5D (retsize: 2;)
	sp = sp + 0x0004
	SCZO = cond(sp)
	Mem0[ss:bp - 0x000A:word16] = dx
	Mem0[ss:bp - 0x000C:word16] = ax
	v35 = Mem0[ds:0x29E5:word16]
	sp = sp - 2
	Mem0[ss:sp:word16] = v35
	v36 = Mem0[ds:0x29E3:word16]
	sp = sp - 2
	Mem0[ss:sp:word16] = v36
	call fn0800_3E5D (retsize: 2;)
	sp = sp + 0x0004
	SCZO = cond(sp)
	Mem0[ss:bp - 0x000E:word16] = dx
	Mem0[ss:bp - 0x0010:word16] = ax
	ax = Mem0[ss:bp - 0x000E:word16]
	dx = Mem0[ss:bp - 0x0010:word16]
	dx = dx - Mem0[ss:bp - 0x000C:word16]
	SCZO = cond(dx)
	ax = ax - Mem0[ss:bp - 0x000A:word16] - C
	SCZO = cond(ax)
	dx = dx + 0x0001
	SCZO = cond(dx)
	ax = ax + 0x0000 + C
	SCZO = cond(ax)
	Mem0[ss:bp - 0x0012:word16] = ax
	Mem0[ss:bp - 0x0014:word16] = dx
	v37 = Mem0[ds:0x29E1:word16]
	sp = sp - 2
	Mem0[ss:sp:word16] = v37
	v38 = Mem0[ds:0x29DF:word16]
	sp = sp - 2
	Mem0[ss:sp:word16] = v38
	v39 = Mem0[ss:bp - 0x000A:word16]
	sp = sp - 2
	Mem0[ss:sp:word16] = v39
	v40 = Mem0[ss:bp - 0x000C:word16]
	sp = sp - 2
	Mem0[ss:sp:word16] = v40
	call fn0800_409C (retsize: 2;)
	sp = sp + 0x0008
	SCZO = cond(sp)
	v41 = Mem0[ds:0x29E1:word16]
	sp = sp - 2
	Mem0[ss:sp:word16] = v41
	v42 = Mem0[ds:0x29DF:word16]
	sp = sp - 2
	Mem0[ss:sp:word16] = v42
	ax = Mem0[ss:bp - 0x000E:word16]
	dx = Mem0[ss:bp - 0x0010:word16]
	dx = dx + 0x0001
	SCZO = cond(dx)
	ax = ax + 0x0000 + C
	SCZO = cond(ax)
	sp = sp - 2
	Mem0[ss:sp:word16] = ax
	sp = sp - 2
	Mem0[ss:sp:word16] = dx
	call fn0800_409C (retsize: 2;)
	sp = sp + 0x0008
	SCZO = cond(sp)
	al = Mem0[ds:0x2E75:byte]
	ah = 0x00
	cl = 0x08
	ax = ax << cl
	SCZO = cond(ax)
	dl = Mem0[ds:0x2E76:byte]
	dh = 0x00
	ax = ax + dx
	SCZO = cond(ax)
	ax = ax - 0x000C
	SCZO = cond(ax)
	ax = ax >>u 0x0001
	SCZO = cond(ax)
	ax = ax >>u 0x0001
	SCZO = cond(ax)
	Mem0[ss:bp - 0x0002:word16] = 0x0000
	Mem0[ss:bp - 0x0004:word16] = ax
	v43 = Mem0[ds:0x29E1:word16]
	sp = sp - 2
	Mem0[ss:sp:word16] = v43
	v44 = Mem0[ds:0x29DF:word16]
	sp = sp - 2
	Mem0[ss:sp:word16] = v44
	ax = ax ^ ax
	SZO = cond(ax)
	C = false
	sp = sp - 2
	Mem0[ss:sp:word16] = ax
	v45 = Mem0[ss:bp - 0x0004:word16]
	sp = sp - 2
	Mem0[ss:sp:word16] = v45
	call fn0800_409C (retsize: 2;)
	sp = sp + 0x0008
	SCZO = cond(sp)
	v46 = Mem0[ds:0x29E1:word16]
	sp = sp - 2
	Mem0[ss:sp:word16] = v46
	v47 = Mem0[ds:0x29DF:word16]
	sp = sp - 2
	Mem0[ss:sp:word16] = v47
	call fn0800_AD2F (retsize: 2;)
	sp = sp + 0x0004
	SCZO = cond(sp)
	Mem0[ds:0x4E8E:word16] = dx
	Mem0[ds:0x4E8C:word16] = ax
	ax = Mem0[ss:bp - 0x0012:word16]
	dx = Mem0[ss:bp - 0x0014:word16]
	Mem0[ss:bp - 0x0002:word16] = ax
	Mem0[ss:bp - 0x0004:word16] = dx
	goto l0800_6CAF
	// succ:  l0800_6CAF
l0800_6C89:
	v54 = Mem0[ds:0x29E1:word16]
	sp = sp - 2
	Mem0[ss:sp:word16] = v54
	v55 = Mem0[ds:0x29DF:word16]
	sp = sp - 2
	Mem0[ss:sp:word16] = v55
	v56 = Mem0[ds:0x29E5:word16]
	sp = sp - 2
	Mem0[ss:sp:word16] = v56
	v57 = Mem0[ds:0x29E3:word16]
	sp = sp - 2
	Mem0[ss:sp:word16] = v57
	call fn0800_3E5D (retsize: 2;)
	sp = sp + 0x0004
	SCZO = cond(sp)
	sp = sp - 2
	Mem0[ss:sp:word16] = dx
	sp = sp - 2
	Mem0[ss:sp:word16] = ax
	call fn0800_409C (retsize: 2;)
	sp = sp + 0x0008
	SCZO = cond(sp)
	v58 = Mem0[ss:bp - 0x0004:word16] - 0x0001
	Mem0[ss:bp - 0x0004:word16] = v58
	SCZO = cond(v58)
	v59 = Mem0[ss:bp - 0x0002:word16] - 0x00 - C
	Mem0[ss:bp - 0x0002:word16] = v59
	SCZO = cond(v59)
	// succ:  l0800_6CAF
l0800_6CAF:
	ax = Mem0[ss:bp - 0x0004:word16]
	ax = ax | Mem0[ss:bp - 0x0002:word16]
	SZO = cond(ax)
	C = false
	branch Test(NE,Z) l0800_6C89
	// succ:  l0800_6CB7 l0800_6C89
l0800_6CB7:
	v52 = Mem0[ds:0x29E1:word16]
	sp = sp - 2
	Mem0[ss:sp:word16] = v52
	v53 = Mem0[ds:0x29DF:word16]
	sp = sp - 2
	Mem0[ss:sp:word16] = v53
	al = Mem0[ds:0x2E75:byte]
	ah = 0x00
	cl = 0x08
	ax = ax << cl
	SCZO = cond(ax)
	dl = Mem0[ds:0x2E76:byte]
	dh = 0x00
	ax = ax + dx
	SCZO = cond(ax)
	dx = dx ^ dx
	SZO = cond(dx)
	C = false
	sp = sp - 2
	Mem0[ss:sp:word16] = dx
	sp = sp - 2
	Mem0[ss:sp:word16] = ax
	sp = sp - 2
	Mem0[ss:sp:word16] = ds
	ax = 0x2E77
	sp = sp - 2
	Mem0[ss:sp:word16] = ax
	call fn0800_4152 (retsize: 2;)
	sp = sp + 0x000C
	SCZO = cond(sp)
	si = si ^ si
	SZO = cond(si)
	C = false
	goto l0800_6E93
	// succ:  l0800_6E93
l0800_6CE4:
	v62 = Mem0[ds:0x29E5:word16]
	sp = sp - 2
	Mem0[ss:sp:word16] = v62
	v63 = Mem0[ds:0x29E3:word16]
	sp = sp - 2
	Mem0[ss:sp:word16] = v63
	call fn0800_3E5D (retsize: 2;)
	sp = sp + 0x0004
	SCZO = cond(sp)
	Mem0[ss:bp - 0x0006:word16] = dx
	Mem0[ss:bp - 0x0008:word16] = ax
	ax = Mem0[ss:bp - 0x0006:word16]
	dx = Mem0[ss:bp - 0x0008:word16]
	ax = ax & 0x3FFF
	SZO = cond(ax)
	C = false
	Mem0[ss:bp - 0x0018:word16] = dx
	Mem0[ss:bp - 0x0016:word16] = ax
	cx = 0x0007
	bx = 0x6EBC
	// succ:  l0800_6D0D
l0800_6D0D:
	ax = Mem0[0x0800:bx:word16]
	SCZO = cond(ax - Mem0[ss:bp - 0x0008:word16])
	branch Test(NE,Z) l0800_6D1E
	// succ:  l0800_6D15 l0800_6D1E
l0800_6D15:
	ax = Mem0[0x0800:bx + 0x000E:word16]
	SCZO = cond(ax - Mem0[ss:bp - 0x0016:word16])
	branch Test(EQ,Z) l0800_6D26
	// succ:  l0800_6D1E l0800_6D26
l0800_6D1E:
	bx = bx + 0x0002
	SCZO = cond(bx)
	cx = cx - 0x0001
	branch cx != 0x0000 l0800_6D0D
	// succ:  l0800_6D23 l0800_6D0D
l0800_6D23:
	goto l0800_6E8B
	// succ:  l0800_6E8B
l0800_6D26:
	call Mem0[0x0800:bx + 0x001C:word16] (retsize: 2;)
	return
	// succ:  fn0800_6AD4_exit
l0800_6E8B:
	ax = 0x0009
	si = Mem0[ss:sp:word16]
	sp = sp + 2
	sp = bp
	bp = Mem0[ss:sp:word16]
	sp = sp + 2
	return
	// succ:  fn0800_6AD4_exit
l0800_6E93:
	v60 = Mem0[ds:0x29E5:word16]
	sp = sp - 2
	Mem0[ss:sp:word16] = v60
	v61 = Mem0[ds:0x29E3:word16]
	sp = sp - 2
	Mem0[ss:sp:word16] = v61
	call fn0800_AD2F (retsize: 2;)
	sp = sp + 0x0004
	SCZO = cond(sp)
	SCZO = cond(dx - Mem0[ds:0x2A09:word16])
	branch Test(UGE,C) l0800_6EAA
	// succ:  l0800_6EA7 l0800_6EAA
l0800_6EA7:
	goto l0800_6CE4
	// succ:  l0800_6CE4
l0800_6EAA:
	branch Test(NE,Z) l0800_6EB5
	// succ:  l0800_6EAC l0800_6EB5
l0800_6EAC:
	SCZO = cond(ax - Mem0[ds:0x2A07:word16])
	branch Test(UGE,C) l0800_6EB5
	// succ:  l0800_6EB2 l0800_6EB5
l0800_6EB2:
	goto l0800_6CE4
	// succ:  l0800_6CE4
l0800_6EB5:
	ax = ax ^ ax
	SZO = cond(ax)
	C = false
	si = Mem0[ss:sp:word16]
	sp = sp + 2
	sp = bp
	bp = Mem0[ss:sp:word16]
	sp = sp + 2
	return
	// succ:  fn0800_6AD4_exit
fn0800_6AD4_exit:


// fn0800_6EE6
// Return size: 2
define fn0800_6EE6
fn0800_6EE6_entry:
	// succ:  l0800_6EE6
l0800_6EE6:
	sp = fp
	Top = 0
	sp = sp - 2
	Mem0[ss:sp:word16] = bp
	bp = sp
	v5 = Mem0[ss:bp + 0x0008:word16]
	sp = sp - 2
	Mem0[ss:sp:word16] = v5
	v6 = Mem0[ss:bp + 0x0006:word16]
	sp = sp - 2
	Mem0[ss:sp:word16] = v6
	v7 = Mem0[ss:bp + 0x0004:word16]
	sp = sp - 2
	Mem0[ss:sp:word16] = v7
	sp = sp - 2
	Mem0[ss:sp:word16] = ds
	ax = 0x2223
	sp = sp - 2
	Mem0[ss:sp:word16] = ax
	call fn0800_B2EF (retsize: 2;)
	sp = sp + 0x000A
	SCZO = cond(sp)
	bp = Mem0[ss:sp:word16]
	sp = sp + 2
	return
	// succ:  fn0800_6EE6_exit
fn0800_6EE6_exit:


// fn0800_6EFF
// Return size: 2
define fn0800_6EFF
fn0800_6EFF_entry:
	// succ:  l0800_6EFF
l0800_6EFF:
	sp = fp
	Top = 0
	sp = sp - 2
	Mem0[ss:sp:word16] = bp
	bp = sp
	sp = sp - 2
	Mem0[ss:sp:word16] = ds
	ax = 0x2231
	sp = sp - 2
	Mem0[ss:sp:word16] = ax
	call fn0800_B2EF (retsize: 2;)
	sp = sp + 0x0004
	SCZO = cond(sp)
	SCZO = cond(Mem0[ss:bp + 0x0004:word16] - 0x0009)
	branch Test(ULE,CZ) l0800_6F1E
	// succ:  l0800_6F13 l0800_6F1E
l0800_6F13:
	sp = sp - 2
	Mem0[ss:sp:word16] = ds
	ax = 0x223E
	sp = sp - 2
	Mem0[ss:sp:word16] = ax
	call fn0800_B2EF (retsize: 2;)
	sp = sp + 0x0004
	SCZO = cond(sp)
	// succ:  l0800_6F1E
l0800_6F1E:
	bp = Mem0[ss:sp:word16]
	sp = sp + 2
	return
	// succ:  fn0800_6EFF_exit
fn0800_6EFF_exit:


// fn0800_6F20
// Return size: 2
define fn0800_6F20
fn0800_6F20_entry:
	// succ:  l0800_6F20
l0800_6F20:
	sp = fp
	Top = 0
	sp = sp - 2
	Mem0[ss:sp:word16] = bp
	bp = sp
	sp = sp - 0x001A
	SCZO = cond(sp)
	v7 = Mem0[ds:0x29E5:word16]
	sp = sp - 2
	Mem0[ss:sp:word16] = v7
	v8 = Mem0[ds:0x29E3:word16]
	sp = sp - 2
	Mem0[ss:sp:word16] = v8
	call fn0800_3E5D (retsize: 2;)
	sp = sp + 0x0004
	SCZO = cond(sp)
	cl = 0x02
	call fn0800_8C69 (retsize: 2;)
	Mem0[ss:bp - 0x000E:word16] = dx
	Mem0[ss:bp - 0x0010:word16] = ax
	v12 = Mem0[ds:0x29E5:word16]
	sp = sp - 2
	Mem0[ss:sp:word16] = v12
	v13 = Mem0[ds:0x29E3:word16]
	sp = sp - 2
	Mem0[ss:sp:word16] = v13
	call fn0800_AD2F (retsize: 2;)
	sp = sp + 0x0004
	SCZO = cond(sp)
	Mem0[ss:bp - 0x0012:word16] = dx
	Mem0[ss:bp - 0x0014:word16] = ax
	ax = 0x0001
	sp = sp - 2
	Mem0[ss:sp:word16] = ax
	v14 = Mem0[ss:bp - 0x000E:word16]
	sp = sp - 2
	Mem0[ss:sp:word16] = v14
	v15 = Mem0[ss:bp - 0x0010:word16]
	sp = sp - 2
	Mem0[ss:sp:word16] = v15
	v16 = Mem0[ds:0x29E5:word16]
	sp = sp - 2
	Mem0[ss:sp:word16] = v16
	v17 = Mem0[ds:0x29E3:word16]
	sp = sp - 2
	Mem0[ss:sp:word16] = v17
	call fn0800_ACB3 (retsize: 2;)
	sp = sp + 0x000A
	SCZO = cond(sp)
	goto l0800_6FCC
	// succ:  l0800_6FCC
l0800_6F6D:
	ax = 0x0001
	sp = sp - 2
	Mem0[ss:sp:word16] = ax
	ax = ax ^ ax
	SZO = cond(ax)
	C = false
	dx = 0x0004
	sp = sp - 2
	Mem0[ss:sp:word16] = ax
	sp = sp - 2
	Mem0[ss:sp:word16] = dx
	v103 = Mem0[ds:0x29E5:word16]
	sp = sp - 2
	Mem0[ss:sp:word16] = v103
	v104 = Mem0[ds:0x29E3:word16]
	sp = sp - 2
	Mem0[ss:sp:word16] = v104
	call fn0800_ACB3 (retsize: 2;)
	sp = sp + 0x000A
	SCZO = cond(sp)
	// succ:  l0800_6F86
l0800_6F86:
	v105 = Mem0[ds:0x29E5:word16]
	sp = sp - 2
	Mem0[ss:sp:word16] = v105
	v106 = Mem0[ds:0x29E3:word16]
	sp = sp - 2
	Mem0[ss:sp:word16] = v106
	call fn0800_3E5D (retsize: 2;)
	sp = sp + 0x0004
	SCZO = cond(sp)
	cl = 0x02
	call fn0800_8C69 (retsize: 2;)
	Mem0[ss:bp - 0x0002:word16] = dx
	Mem0[ss:bp - 0x0004:word16] = ax
	ax = ax | Mem0[ss:bp - 0x0002:word16]
	SZO = cond(ax)
	C = false
	branch Test(EQ,Z) l0800_6FC4
	// succ:  l0800_6FA4 l0800_6FC4
l0800_6FA4:
	ax = 0x0001
	sp = sp - 2
	Mem0[ss:sp:word16] = ax
	ax = Mem0[ss:bp - 0x0002:word16]
	dx = Mem0[ss:bp - 0x0004:word16]
	dx = dx + 0x0004
	SCZO = cond(dx)
	ax = ax + 0x0000 + C
	SCZO = cond(ax)
	sp = sp - 2
	Mem0[ss:sp:word16] = ax
	sp = sp - 2
	Mem0[ss:sp:word16] = dx
	v107 = Mem0[ds:0x29E5:word16]
	sp = sp - 2
	Mem0[ss:sp:word16] = v107
	v108 = Mem0[ds:0x29E3:word16]
	sp = sp - 2
	Mem0[ss:sp:word16] = v108
	call fn0800_ACB3 (retsize: 2;)
	sp = sp + 0x000A
	SCZO = cond(sp)
	// succ:  l0800_6FC4
l0800_6FC4:
	ax = Mem0[ss:bp - 0x0004:word16]
	ax = ax | Mem0[ss:bp - 0x0002:word16]
	SZO = cond(ax)
	C = false
	branch Test(NE,Z) l0800_6F86
	// succ:  l0800_6FCC l0800_6F86
l0800_6FCC:
	v18 = Mem0[ds:0x29E5:word16]
	sp = sp - 2
	Mem0[ss:sp:word16] = v18
	v19 = Mem0[ds:0x29E3:word16]
	sp = sp - 2
	Mem0[ss:sp:word16] = v19
	call fn0800_3F58 (retsize: 2;)
	sp = sp + 0x0004
	SCZO = cond(sp)
	dx = dx | dx
	SZO = cond(dx)
	C = false
	branch Test(NE,Z) l0800_6FE3
	// succ:  l0800_6FDE l0800_6FE3
l0800_6FDE:
	SCZO = cond(ax - 0x03EC)
	branch Test(EQ,Z) l0800_6F6D
	// succ:  l0800_6FE3 l0800_6F6D
l0800_6FE3:
	v23 = Mem0[ds:0x29E5:word16]
	sp = sp - 2
	Mem0[ss:sp:word16] = v23
	v24 = Mem0[ds:0x29E3:word16]
	sp = sp - 2
	Mem0[ss:sp:word16] = v24
	call fn0800_AD2F (retsize: 2;)
	sp = sp + 0x0004
	SCZO = cond(sp)
	ax = ax - Mem0[ss:bp - 0x0014:word16]
	SCZO = cond(ax)
	dx = dx - Mem0[ss:bp - 0x0012:word16] - C
	SCZO = cond(dx)
	Mem0[ss:bp - 0x0016:word16] = dx
	Mem0[ss:bp - 0x0018:word16] = ax
	Mem0[ds:0x2A05:word16] = dx
	Mem0[ds:0x2A03:word16] = ax
	v25 = Mem0[ds:0x29E1:word16]
	sp = sp - 2
	Mem0[ss:sp:word16] = v25
	v26 = Mem0[ds:0x29DF:word16]
	sp = sp - 2
	Mem0[ss:sp:word16] = v26
	v27 = Mem0[ss:bp + 0x0006:word16]
	sp = sp - 2
	Mem0[ss:sp:word16] = v27
	v28 = Mem0[ss:bp + 0x0004:word16]
	sp = sp - 2
	Mem0[ss:sp:word16] = v28
	call fn0800_409C (retsize: 2;)
	sp = sp + 0x0008
	SCZO = cond(sp)
	v29 = Mem0[ds:0x29E1:word16]
	sp = sp - 2
	Mem0[ss:sp:word16] = v29
	v30 = Mem0[ds:0x29DF:word16]
	sp = sp - 2
	Mem0[ss:sp:word16] = v30
	call fn0800_AD2F (retsize: 2;)
	sp = sp + 0x0004
	SCZO = cond(sp)
	Mem0[ss:bp - 0x0002:word16] = dx
	Mem0[ss:bp - 0x0004:word16] = ax
	SCZO = cond(Mem0[ss:bp - 0x0016:word16] - 0x0000)
	branch Test(UGE,C) l0800_7035
	// succ:  l0800_7032 l0800_7035
l0800_7032:
	goto l0800_70F9
	// succ:  l0800_70F9
l0800_7035:
	branch Test(UGT,CZ) l0800_7040
	// succ:  l0800_7037 l0800_7040
l0800_7037:
	SCZO = cond(Mem0[ss:bp - 0x0018:word16] - 0x0012)
	branch Test(UGT,CZ) l0800_7040
	// succ:  l0800_703D l0800_7040
l0800_703D:
	goto l0800_70F9
	// succ:  l0800_70F9
l0800_7040:
	ax = ax ^ ax
	SZO = cond(ax)
	C = false
	sp = sp - 2
	Mem0[ss:sp:word16] = ax
	v32 = Mem0[ds:0x4E8E:word16]
	sp = sp - 2
	Mem0[ss:sp:word16] = v32
	v33 = Mem0[ds:0x4E8C:word16]
	sp = sp - 2
	Mem0[ss:sp:word16] = v33
	v34 = Mem0[ds:0x29E1:word16]
	sp = sp - 2
	Mem0[ss:sp:word16] = v34
	v35 = Mem0[ds:0x29DF:word16]
	sp = sp - 2
	Mem0[ss:sp:word16] = v35
	call fn0800_ACB3 (retsize: 2;)
	sp = sp + 0x000A
	SCZO = cond(sp)
	v36 = Mem0[ds:0x29E1:word16]
	sp = sp - 2
	Mem0[ss:sp:word16] = v36
	v37 = Mem0[ds:0x29DF:word16]
	sp = sp - 2
	Mem0[ss:sp:word16] = v37
	call fn0800_3E5D (retsize: 2;)
	sp = sp + 0x0004
	SCZO = cond(sp)
	Mem0[ss:bp - 0x000A:word16] = dx
	Mem0[ss:bp - 0x000C:word16] = ax
	ax = ax ^ ax
	SZO = cond(ax)
	C = false
	sp = sp - 2
	Mem0[ss:sp:word16] = ax
	v38 = Mem0[ss:bp - 0x0002:word16]
	sp = sp - 2
	Mem0[ss:sp:word16] = v38
	v39 = Mem0[ss:bp - 0x0004:word16]
	sp = sp - 2
	Mem0[ss:sp:word16] = v39
	v40 = Mem0[ds:0x29E1:word16]
	sp = sp - 2
	Mem0[ss:sp:word16] = v40
	v41 = Mem0[ds:0x29DF:word16]
	sp = sp - 2
	Mem0[ss:sp:word16] = v41
	call fn0800_ACB3 (retsize: 2;)
	sp = sp + 0x000A
	SCZO = cond(sp)
	v42 = Mem0[ds:0x29E1:word16]
	sp = sp - 2
	Mem0[ss:sp:word16] = v42
	v43 = Mem0[ds:0x29DF:word16]
	sp = sp - 2
	Mem0[ss:sp:word16] = v43
	ax = ax ^ ax
	SZO = cond(ax)
	C = false
	sp = sp - 2
	Mem0[ss:sp:word16] = ax
	sp = sp - 2
	Mem0[ss:sp:word16] = ax
	call fn0800_409C (retsize: 2;)
	sp = sp + 0x0008
	SCZO = cond(sp)
	v44 = Mem0[ds:0x29E1:word16]
	sp = sp - 2
	Mem0[ss:sp:word16] = v44
	v45 = Mem0[ds:0x29DF:word16]
	sp = sp - 2
	Mem0[ss:sp:word16] = v45
	v46 = Mem0[ss:bp - 0x000E:word16]
	sp = sp - 2
	Mem0[ss:sp:word16] = v46
	v47 = Mem0[ss:bp - 0x0010:word16]
	sp = sp - 2
	Mem0[ss:sp:word16] = v47
	call fn0800_409C (retsize: 2;)
	sp = sp + 0x0008
	SCZO = cond(sp)
	v48 = Mem0[ds:0x29E1:word16]
	sp = sp - 2
	Mem0[ss:sp:word16] = v48
	v49 = Mem0[ds:0x29DF:word16]
	sp = sp - 2
	Mem0[ss:sp:word16] = v49
	v50 = Mem0[ss:bp - 0x000A:word16]
	sp = sp - 2
	Mem0[ss:sp:word16] = v50
	v51 = Mem0[ss:bp - 0x000C:word16]
	sp = sp - 2
	Mem0[ss:sp:word16] = v51
	call fn0800_409C (retsize: 2;)
	sp = sp + 0x0008
	SCZO = cond(sp)
	ax = ax ^ ax
	SZO = cond(ax)
	C = false
	sp = sp - 2
	Mem0[ss:sp:word16] = ax
	v52 = Mem0[ss:bp - 0x0012:word16]
	sp = sp - 2
	Mem0[ss:sp:word16] = v52
	v53 = Mem0[ss:bp - 0x0014:word16]
	sp = sp - 2
	Mem0[ss:sp:word16] = v53
	v54 = Mem0[ds:0x29E5:word16]
	sp = sp - 2
	Mem0[ss:sp:word16] = v54
	v55 = Mem0[ds:0x29E3:word16]
	sp = sp - 2
	Mem0[ss:sp:word16] = v55
	call fn0800_ACB3 (retsize: 2;)
	sp = sp + 0x000A
	SCZO = cond(sp)
	ax = Mem0[ss:bp - 0x0016:word16]
	dx = Mem0[ss:bp - 0x0018:word16]
	dx = dx - 0x0008
	SCZO = cond(dx)
	ax = ax - 0x0000 - C
	SCZO = cond(ax)
	sp = sp - 2
	Mem0[ss:sp:word16] = ax
	sp = sp - 2
	Mem0[ss:sp:word16] = dx
	v56 = Mem0[ss:bp - 0x0016:word16]
	sp = sp - 2
	Mem0[ss:sp:word16] = v56
	v57 = Mem0[ss:bp - 0x0018:word16]
	sp = sp - 2
	Mem0[ss:sp:word16] = v57
	call fn0800_75EA (retsize: 2;)
	sp = sp + 0x0008
	SCZO = cond(sp)
	v58 = Mem0[ds:0x2A03:word16] + 0x0008
	Mem0[ds:0x2A03:word16] = v58
	SCZO = cond(v58)
	v59 = Mem0[ds:0x2A05:word16] + 0x00 + C
	Mem0[ds:0x2A05:word16] = v59
	SCZO = cond(v59)
	// succ:  l0800_70F9
l0800_70F9:
	ax = Mem0[ds:0x2A05:word16]
	dx = Mem0[ds:0x2A03:word16]
	SCZO = cond(ax - Mem0[ss:bp - 0x0016:word16])
	branch Test(UGE,C) l0800_7108
	// succ:  l0800_7105 l0800_7108
l0800_7105:
	goto l0800_724D
	// succ:  l0800_724D
l0800_7108:
	branch Test(NE,Z) l0800_7112
	// succ:  l0800_710A l0800_7112
l0800_710A:
	SCZO = cond(dx - Mem0[ss:bp - 0x0018:word16])
	branch Test(UGE,C) l0800_7112
	// succ:  l0800_710F l0800_7112
l0800_710F:
	goto l0800_724D
	// succ:  l0800_724D
l0800_7112:
	ax = ax ^ ax
	SZO = cond(ax)
	C = false
	sp = sp - 2
	Mem0[ss:sp:word16] = ax
	v62 = Mem0[ss:bp - 0x0002:word16]
	sp = sp - 2
	Mem0[ss:sp:word16] = v62
	v63 = Mem0[ss:bp - 0x0004:word16]
	sp = sp - 2
	Mem0[ss:sp:word16] = v63
	v64 = Mem0[ds:0x29E1:word16]
	sp = sp - 2
	Mem0[ss:sp:word16] = v64
	v65 = Mem0[ds:0x29DF:word16]
	sp = sp - 2
	Mem0[ss:sp:word16] = v65
	call fn0800_ACB3 (retsize: 2;)
	sp = sp + 0x000A
	SCZO = cond(sp)
	ax = ax ^ ax
	SZO = cond(ax)
	C = false
	sp = sp - 2
	Mem0[ss:sp:word16] = ax
	ax = Mem0[ss:bp - 0x0012:word16]
	dx = Mem0[ss:bp - 0x0014:word16]
	dx = dx - 0x0004
	SCZO = cond(dx)
	ax = ax - 0x0000 - C
	SCZO = cond(ax)
	sp = sp - 2
	Mem0[ss:sp:word16] = ax
	sp = sp - 2
	Mem0[ss:sp:word16] = dx
	v66 = Mem0[ds:0x29E5:word16]
	sp = sp - 2
	Mem0[ss:sp:word16] = v66
	v67 = Mem0[ds:0x29E3:word16]
	sp = sp - 2
	Mem0[ss:sp:word16] = v67
	call fn0800_ACB3 (retsize: 2;)
	sp = sp + 0x000A
	SCZO = cond(sp)
	ax = Mem0[ss:bp - 0x000E:word16]
	dx = Mem0[ss:bp - 0x0010:word16]
	dx = dx + 0x0004
	SCZO = cond(dx)
	ax = ax + 0x0000 + C
	SCZO = cond(ax)
	sp = sp - 2
	Mem0[ss:sp:word16] = ax
	sp = sp - 2
	Mem0[ss:sp:word16] = dx
	v68 = Mem0[ds:0x29E1:word16]
	sp = sp - 2
	Mem0[ss:sp:word16] = v68
	v69 = Mem0[ds:0x29DF:word16]
	sp = sp - 2
	Mem0[ss:sp:word16] = v69
	v70 = Mem0[ds:0x29E5:word16]
	sp = sp - 2
	Mem0[ss:sp:word16] = v70
	v71 = Mem0[ds:0x29E3:word16]
	sp = sp - 2
	Mem0[ss:sp:word16] = v71
	call fn0800_3B0A (retsize: 2;)
	sp = sp + 0x000C
	SCZO = cond(sp)
	v72 = Mem0[ds:0x29E5:word16]
	sp = sp - 2
	Mem0[ss:sp:word16] = v72
	v73 = Mem0[ds:0x29E3:word16]
	sp = sp - 2
	Mem0[ss:sp:word16] = v73
	call fn0800_3F58 (retsize: 2;)
	sp = sp + 0x0004
	SCZO = cond(sp)
	dx = dx | dx
	SZO = cond(dx)
	C = false
	branch Test(EQ,Z) l0800_7181
	// succ:  l0800_717E l0800_7181
l0800_717E:
	goto l0800_723F
	// succ:  l0800_723F
l0800_7181:
	SCZO = cond(ax - 0x03EC)
	branch Test(EQ,Z) l0800_7189
	// succ:  l0800_7186 l0800_7189
l0800_7186:
	goto l0800_723F
	// succ:  l0800_723F
l0800_7189:
	ax = 0x0001
	sp = sp - 2
	Mem0[ss:sp:word16] = ax
	ax = ax ^ ax
	SZO = cond(ax)
	C = false
	dx = 0x0004
	sp = sp - 2
	Mem0[ss:sp:word16] = ax
	sp = sp - 2
	Mem0[ss:sp:word16] = dx
	v109 = Mem0[ds:0x29E5:word16]
	sp = sp - 2
	Mem0[ss:sp:word16] = v109
	v110 = Mem0[ds:0x29E3:word16]
	sp = sp - 2
	Mem0[ss:sp:word16] = v110
	call fn0800_ACB3 (retsize: 2;)
	sp = sp + 0x000A
	SCZO = cond(sp)
	v111 = Mem0[ds:0x29E1:word16]
	sp = sp - 2
	Mem0[ss:sp:word16] = v111
	v112 = Mem0[ds:0x29DF:word16]
	sp = sp - 2
	Mem0[ss:sp:word16] = v112
	ax = ax ^ ax
	SZO = cond(ax)
	C = false
	dx = 0x03EC
	sp = sp - 2
	Mem0[ss:sp:word16] = ax
	sp = sp - 2
	Mem0[ss:sp:word16] = dx
	call fn0800_409C (retsize: 2;)
	sp = sp + 0x0008
	SCZO = cond(sp)
	// succ:  l0800_71B7
l0800_71B7:
	v113 = Mem0[ds:0x29E5:word16]
	sp = sp - 2
	Mem0[ss:sp:word16] = v113
	v114 = Mem0[ds:0x29E3:word16]
	sp = sp - 2
	Mem0[ss:sp:word16] = v114
	call fn0800_3E5D (retsize: 2;)
	sp = sp + 0x0004
	SCZO = cond(sp)
	Mem0[ss:bp - 0x0002:word16] = dx
	Mem0[ss:bp - 0x0004:word16] = ax
	v115 = Mem0[ds:0x29E1:word16]
	sp = sp - 2
	Mem0[ss:sp:word16] = v115
	v116 = Mem0[ds:0x29DF:word16]
	sp = sp - 2
	Mem0[ss:sp:word16] = v116
	v117 = Mem0[ss:bp - 0x0002:word16]
	sp = sp - 2
	Mem0[ss:sp:word16] = v117
	sp = sp - 2
	Mem0[ss:sp:word16] = ax
	call fn0800_409C (retsize: 2;)
	sp = sp + 0x0008
	SCZO = cond(sp)
	ax = Mem0[ss:bp - 0x0004:word16]
	ax = ax | Mem0[ss:bp - 0x0002:word16]
	SZO = cond(ax)
	C = false
	branch Test(EQ,Z) l0800_7234
	// succ:  l0800_71E5 l0800_7234
l0800_71E5:
	v118 = Mem0[ds:0x29E5:word16]
	sp = sp - 2
	Mem0[ss:sp:word16] = v118
	v119 = Mem0[ds:0x29E3:word16]
	sp = sp - 2
	Mem0[ss:sp:word16] = v119
	call fn0800_3E5D (retsize: 2;)
	sp = sp + 0x0004
	SCZO = cond(sp)
	ax = ax + 0x0001
	SCZO = cond(ax)
	dx = dx + 0x00 + C
	SCZO = cond(dx)
	Mem0[ss:bp - 0x0006:word16] = dx
	Mem0[ss:bp - 0x0008:word16] = ax
	v120 = Mem0[ds:0x29E1:word16]
	sp = sp - 2
	Mem0[ss:sp:word16] = v120
	v121 = Mem0[ds:0x29DF:word16]
	sp = sp - 2
	Mem0[ss:sp:word16] = v121
	v122 = Mem0[ss:bp - 0x0006:word16]
	sp = sp - 2
	Mem0[ss:sp:word16] = v122
	sp = sp - 2
	Mem0[ss:sp:word16] = ax
	call fn0800_409C (retsize: 2;)
	sp = sp + 0x0008
	SCZO = cond(sp)
	dx = Mem0[ss:bp - 0x0002:word16]
	ax = Mem0[ss:bp - 0x0004:word16]
	cl = 0x02
	call fn0800_8C69 (retsize: 2;)
	sp = sp - 2
	Mem0[ss:sp:word16] = dx
	sp = sp - 2
	Mem0[ss:sp:word16] = ax
	v123 = Mem0[ds:0x29E1:word16]
	sp = sp - 2
	Mem0[ss:sp:word16] = v123
	v124 = Mem0[ds:0x29DF:word16]
	sp = sp - 2
	Mem0[ss:sp:word16] = v124
	v125 = Mem0[ds:0x29E5:word16]
	sp = sp - 2
	Mem0[ss:sp:word16] = v125
	v126 = Mem0[ds:0x29E3:word16]
	sp = sp - 2
	Mem0[ss:sp:word16] = v126
	call fn0800_3B0A (retsize: 2;)
	sp = sp + 0x000C
	SCZO = cond(sp)
	// succ:  l0800_7234
l0800_7234:
	ax = Mem0[ss:bp - 0x0004:word16]
	ax = ax | Mem0[ss:bp - 0x0002:word16]
	SZO = cond(ax)
	C = false
	branch Test(EQ,Z) l0800_723F
	// succ:  l0800_723C l0800_723F
l0800_723C:
	goto l0800_71B7
	// succ:  l0800_71B7
l0800_723F:
	v80 = Mem0[ds:0x4E8C:word16] + 0x0004
	Mem0[ds:0x4E8C:word16] = v80
	SCZO = cond(v80)
	v81 = Mem0[ds:0x4E8E:word16] + 0x00 + C
	Mem0[ds:0x4E8E:word16] = v81
	SCZO = cond(v81)
	sp = bp
	bp = Mem0[ss:sp:word16]
	sp = sp + 2
	return
	// succ:  fn0800_6F20_exit
l0800_724D:
	ax = Mem0[ss:bp - 0x0016:word16]
	dx = Mem0[ss:bp - 0x0018:word16]
	dx = dx + Mem0[ds:0x4E88:word16]
	SCZO = cond(dx)
	ax = ax + Mem0[ds:0x4E8A:word16] + C
	SCZO = cond(ax)
	Mem0[ss:bp - 0x0002:word16] = ax
	Mem0[ss:bp - 0x0004:word16] = dx
	ax = Mem0[ds:0x2A03:word16]
	ax = ax & 0x0003
	SZO = cond(ax)
	C = false
	ax = ax | 0x0000
	SZO = cond(ax)
	C = false
	branch Test(EQ,Z) l0800_7274
	// succ:  l0800_726C l0800_7274
l0800_726C:
	v60 = Mem0[ss:bp - 0x0004:word16] + 0x0002
	Mem0[ss:bp - 0x0004:word16] = v60
	SCZO = cond(v60)
	v61 = Mem0[ss:bp - 0x0002:word16] + 0x00 + C
	Mem0[ss:bp - 0x0002:word16] = v61
	SCZO = cond(v61)
	// succ:  l0800_7274
l0800_7274:
	ax = Mem0[ss:bp - 0x0004:word16]
	ax = ax & 0x0003
	SZO = cond(ax)
	C = false
	ax = ax | 0x0000
	SZO = cond(ax)
	C = false
	branch Test(EQ,Z) l0800_7298
	// succ:  l0800_727F l0800_7298
l0800_727F:
	dx = Mem0[ss:bp - 0x0002:word16]
	ax = Mem0[ss:bp - 0x0004:word16]
	cl = 0x02
	call fn0800_8CAA (retsize: 2;)
	ax = ax + 0x0001
	SCZO = cond(ax)
	dx = dx + 0x00 + C
	SCZO = cond(dx)
	Mem0[ss:bp - 0x0002:word16] = dx
	Mem0[ss:bp - 0x0004:word16] = ax
	goto l0800_72C6
	// succ:  l0800_72C6
l0800_7298:
	dx = Mem0[ss:bp - 0x0002:word16]
	ax = Mem0[ss:bp - 0x0004:word16]
	cl = 0x02
	call fn0800_8CAA (retsize: 2;)
	Mem0[ss:bp - 0x0002:word16] = dx
	Mem0[ss:bp - 0x0004:word16] = ax
	goto l0800_72C6
	// succ:  l0800_72C6
l0800_72AB:
	v98 = Mem0[ds:0x29E1:word16]
	sp = sp - 2
	Mem0[ss:sp:word16] = v98
	v99 = Mem0[ds:0x29DF:word16]
	sp = sp - 2
	Mem0[ss:sp:word16] = v99
	al = 0x00
	sp = sp - 2
	Mem0[ss:sp:word16] = ax
	call fn0800_4047 (retsize: 2;)
	sp = sp + 0x0006
	SCZO = cond(sp)
	v101 = Mem0[ds:0x2A03:word16] + 0x0001
	Mem0[ds:0x2A03:word16] = v101
	SCZO = cond(v101)
	v102 = Mem0[ds:0x2A05:word16] + 0x00 + C
	Mem0[ds:0x2A05:word16] = v102
	SCZO = cond(v102)
	// succ:  l0800_72C6
l0800_72C6:
	ax = Mem0[ds:0x2A03:word16]
	ax = ax & 0x0003
	SZO = cond(ax)
	C = false
	ax = ax | 0x0000
	SZO = cond(ax)
	C = false
	branch Test(NE,Z) l0800_72AB
	// succ:  l0800_72D1 l0800_72AB
l0800_72D1:
	v74 = Mem0[ds:0x29E1:word16]
	sp = sp - 2
	Mem0[ss:sp:word16] = v74
	v75 = Mem0[ds:0x29DF:word16]
	sp = sp - 2
	Mem0[ss:sp:word16] = v75
	call fn0800_AD2F (retsize: 2;)
	sp = sp + 0x0004
	SCZO = cond(sp)
	Mem0[ss:bp - 0x0006:word16] = dx
	Mem0[ss:bp - 0x0008:word16] = ax
	ax = 0x0001
	sp = sp - 2
	Mem0[ss:sp:word16] = ax
	ax = Mem0[ds:0x2A05:word16]
	dx = Mem0[ds:0x2A03:word16]
	ax = -ax
	SCZO = cond(ax)
	C = ax == 0x0000
	dx = -dx
	SCZO = cond(dx)
	C = dx == 0x0000
	ax = ax - 0x0000 - C
	SCZO = cond(ax)
	dx = dx - 0x0004
	SCZO = cond(dx)
	ax = ax - 0x0000 - C
	SCZO = cond(ax)
	sp = sp - 2
	Mem0[ss:sp:word16] = ax
	sp = sp - 2
	Mem0[ss:sp:word16] = dx
	v76 = Mem0[ds:0x29E1:word16]
	sp = sp - 2
	Mem0[ss:sp:word16] = v76
	v77 = Mem0[ds:0x29DF:word16]
	sp = sp - 2
	Mem0[ss:sp:word16] = v77
	call fn0800_ACB3 (retsize: 2;)
	sp = sp + 0x000A
	SCZO = cond(sp)
	v78 = Mem0[ds:0x29E1:word16]
	sp = sp - 2
	Mem0[ss:sp:word16] = v78
	v79 = Mem0[ds:0x29DF:word16]
	sp = sp - 2
	Mem0[ss:sp:word16] = v79
	dx = Mem0[ds:0x2A05:word16]
	ax = Mem0[ds:0x2A03:word16]
	cl = 0x02
	call fn0800_8CAA (retsize: 2;)
	sp = sp - 2
	Mem0[ss:sp:word16] = dx
	sp = sp - 2
	Mem0[ss:sp:word16] = ax
	call fn0800_409C (retsize: 2;)
	sp = sp + 0x0008
	SCZO = cond(sp)
	ax = Mem0[ss:bp - 0x000A:word16]
	dx = Mem0[ss:bp - 0x000C:word16]
	ax = ax & 0x3FFF
	SZO = cond(ax)
	C = false
	Mem0[ss:bp - 0x001A:word16] = ax
	SCZO = cond(ax - Mem0[ss:bp - 0x0002:word16])
	branch Test(ULT,C) l0800_734D
	// succ:  l0800_733A l0800_734D
l0800_733A:
	branch Test(UGT,CZ) l0800_7341
	// succ:  l0800_733C l0800_7341
l0800_733C:
	SCZO = cond(dx - Mem0[ss:bp - 0x0004:word16])
	branch Test(ULE,CZ) l0800_734D
	// succ:  l0800_7341 l0800_734D
l0800_7341:
	ax = Mem0[ss:bp - 0x000C:word16]
	dx = Mem0[ss:bp - 0x001A:word16]
	Mem0[ss:bp - 0x0002:word16] = dx
	Mem0[ss:bp - 0x0004:word16] = ax
	// succ:  l0800_734D
l0800_734D:
	ax = Mem0[ss:bp - 0x000A:word16]
	ax = ax & 0xC000
	SZO = cond(ax)
	C = false
	v82 = Mem0[ss:bp - 0x0004:word16] | 0x0000
	Mem0[ss:bp - 0x0004:word16] = v82
	SZO = cond(Mem0[ss:bp - 0x0004:word16])
	C = false
	v83 = Mem0[ss:bp - 0x0002:word16] | ax
	Mem0[ss:bp - 0x0002:word16] = v83
	SZO = cond(Mem0[ss:bp - 0x0002:word16])
	C = false
	ax = ax ^ ax
	SZO = cond(ax)
	C = false
	sp = sp - 2
	Mem0[ss:sp:word16] = ax
	v84 = Mem0[ds:0x4E8E:word16]
	sp = sp - 2
	Mem0[ss:sp:word16] = v84
	v85 = Mem0[ds:0x4E8C:word16]
	sp = sp - 2
	Mem0[ss:sp:word16] = v85
	v86 = Mem0[ds:0x29E1:word16]
	sp = sp - 2
	Mem0[ss:sp:word16] = v86
	v87 = Mem0[ds:0x29DF:word16]
	sp = sp - 2
	Mem0[ss:sp:word16] = v87
	call fn0800_ACB3 (retsize: 2;)
	sp = sp + 0x000A
	SCZO = cond(sp)
	v88 = Mem0[ds:0x29E1:word16]
	sp = sp - 2
	Mem0[ss:sp:word16] = v88
	v89 = Mem0[ds:0x29DF:word16]
	sp = sp - 2
	Mem0[ss:sp:word16] = v89
	v90 = Mem0[ss:bp - 0x0002:word16]
	sp = sp - 2
	Mem0[ss:sp:word16] = v90
	v91 = Mem0[ss:bp - 0x0004:word16]
	sp = sp - 2
	Mem0[ss:sp:word16] = v91
	call fn0800_409C (retsize: 2;)
	sp = sp + 0x0008
	SCZO = cond(sp)
	ax = ax ^ ax
	SZO = cond(ax)
	C = false
	sp = sp - 2
	Mem0[ss:sp:word16] = ax
	v92 = Mem0[ss:bp - 0x0006:word16]
	sp = sp - 2
	Mem0[ss:sp:word16] = v92
	v93 = Mem0[ss:bp - 0x0008:word16]
	sp = sp - 2
	Mem0[ss:sp:word16] = v93
	v94 = Mem0[ds:0x29E1:word16]
	sp = sp - 2
	Mem0[ss:sp:word16] = v94
	v95 = Mem0[ds:0x29DF:word16]
	sp = sp - 2
	Mem0[ss:sp:word16] = v95
	call fn0800_ACB3 (retsize: 2;)
	sp = sp + 0x000A
	SCZO = cond(sp)
	v96 = Mem0[ds:0x4E8C:word16] + 0x0004
	Mem0[ds:0x4E8C:word16] = v96
	SCZO = cond(v96)
	v97 = Mem0[ds:0x4E8E:word16] + 0x00 + C
	Mem0[ds:0x4E8E:word16] = v97
	SCZO = cond(v97)
	sp = bp
	bp = Mem0[ss:sp:word16]
	sp = sp + 2
	return
	// succ:  fn0800_6F20_exit
fn0800_6F20_exit:


// fn0800_73AC
// Return size: 2
define fn0800_73AC
fn0800_73AC_entry:
	// succ:  l0800_73AC
l0800_73AC:
	sp = fp
	Top = 0
	v4 = Mem0[ds:0x29E1:word16]
	sp = sp - 2
	Mem0[ss:sp:word16] = v4
	v6 = Mem0[ds:0x29DF:word16]
	sp = sp - 2
	Mem0[ss:sp:word16] = v6
	al = Mem0[ds:0x2E75:byte]
	ah = 0x00
	cl = 0x08
	ax = ax << cl
	SCZO = cond(ax)
	dl = Mem0[ds:0x2E76:byte]
	dh = 0x00
	ax = ax + dx
	SCZO = cond(ax)
	dx = dx ^ dx
	SZO = cond(dx)
	C = false
	sp = sp - 2
	Mem0[ss:sp:word16] = dx
	sp = sp - 2
	Mem0[ss:sp:word16] = ax
	sp = sp - 2
	Mem0[ss:sp:word16] = ds
	ax = 0x2E77
	sp = sp - 2
	Mem0[ss:sp:word16] = ax
	call fn0800_4152 (retsize: 2;)
	sp = sp + 0x000C
	SCZO = cond(sp)
	ax = 0x0001
	sp = sp - 2
	Mem0[ss:sp:word16] = ax
	ax = 0xFFFF
	dx = 0xFFFC
	sp = sp - 2
	Mem0[ss:sp:word16] = ax
	sp = sp - 2
	Mem0[ss:sp:word16] = dx
	v17 = Mem0[ds:0x29E1:word16]
	sp = sp - 2
	Mem0[ss:sp:word16] = v17
	v18 = Mem0[ds:0x29DF:word16]
	sp = sp - 2
	Mem0[ss:sp:word16] = v18
	call fn0800_ACB3 (retsize: 2;)
	sp = sp + 0x000A
	SCZO = cond(sp)
	v19 = Mem0[ds:0x29E1:word16]
	sp = sp - 2
	Mem0[ss:sp:word16] = v19
	v20 = Mem0[ds:0x29DF:word16]
	sp = sp - 2
	Mem0[ss:sp:word16] = v20
	v21 = Mem0[ds:0x2A11:word16]
	sp = sp - 2
	Mem0[ss:sp:word16] = v21
	v22 = Mem0[ds:0x2A0F:word16]
	sp = sp - 2
	Mem0[ss:sp:word16] = v22
	call fn0800_409C (retsize: 2;)
	sp = sp + 0x0008
	SCZO = cond(sp)
	v23 = Mem0[ds:0x2A09:word16]
	sp = sp - 2
	Mem0[ss:sp:word16] = v23
	v24 = Mem0[ds:0x2A07:word16]
	sp = sp - 2
	Mem0[ss:sp:word16] = v24
	v25 = Mem0[ds:0x2A09:word16]
	sp = sp - 2
	Mem0[ss:sp:word16] = v25
	v26 = Mem0[ds:0x2A07:word16]
	sp = sp - 2
	Mem0[ss:sp:word16] = v26
	call fn0800_75EA (retsize: 2;)
	sp = sp + 0x0008
	SCZO = cond(sp)
	ax = ax ^ ax
	SZO = cond(ax)
	C = false
	return
	// succ:  fn0800_73AC_exit
fn0800_73AC_exit:


// fn0800_741D
// Return size: 2
define fn0800_741D
fn0800_741D_entry:
	// succ:  l0800_741D
l0800_741D:
	sp = fp
	Top = 0
	sp = sp - 2
	Mem0[ss:sp:word16] = bp
	bp = sp
	sp = sp - 0x0004
	SCZO = cond(sp)
	sp = sp - 2
	Mem0[ss:sp:word16] = si
	goto l0800_75C1
	// succ:  l0800_75C1
l0800_7427:
	v14 = Mem0[ds:0x29E5:word16]
	sp = sp - 2
	Mem0[ss:sp:word16] = v14
	v15 = Mem0[ds:0x29E3:word16]
	sp = sp - 2
	Mem0[ss:sp:word16] = v15
	call fn0800_3E9A (retsize: 2;)
	sp = sp + 0x0004
	SCZO = cond(sp)
	ax = ax | ax
	SZO = cond(ax)
	C = false
	branch Test(EQ,Z) l0800_7449
	// succ:  l0800_7439 l0800_7449
l0800_7439:
	SCZO = cond(ax - 0x0001)
	branch Test(EQ,Z) l0800_7469
	// succ:  l0800_743E l0800_7469
l0800_743E:
	SCZO = cond(ax - 0x0003)
	branch Test(NE,Z) l0800_7446
	// succ:  l0800_7443 l0800_7446
l0800_7443:
	goto l0800_7566
	// succ:  l0800_7566
l0800_7446:
	goto l0800_758F
	// succ:  l0800_758F
l0800_7449:
	v17 = Mem0[ds:0x29E1:word16]
	sp = sp - 2
	Mem0[ss:sp:word16] = v17
	v18 = Mem0[ds:0x29DF:word16]
	sp = sp - 2
	Mem0[ss:sp:word16] = v18
	v19 = Mem0[ds:0x29E5:word16]
	sp = sp - 2
	Mem0[ss:sp:word16] = v19
	v20 = Mem0[ds:0x29E3:word16]
	sp = sp - 2
	Mem0[ss:sp:word16] = v20
	call fn0800_3DCF (retsize: 2;)
	sp = sp + 0x0004
	SCZO = cond(sp)
	sp = sp - 2
	Mem0[ss:sp:word16] = ax
	call fn0800_4047 (retsize: 2;)
	sp = sp + 0x0006
	SCZO = cond(sp)
	goto l0800_75C1
	// succ:  l0800_75C1
l0800_7469:
	v29 = Mem0[ds:0x29E1:word16]
	sp = sp - 2
	Mem0[ss:sp:word16] = v29
	v30 = Mem0[ds:0x29DF:word16]
	sp = sp - 2
	Mem0[ss:sp:word16] = v30
	v31 = Mem0[ds:0x29E5:word16]
	sp = sp - 2
	Mem0[ss:sp:word16] = v31
	v32 = Mem0[ds:0x29E3:word16]
	sp = sp - 2
	Mem0[ss:sp:word16] = v32
	call fn0800_3E5D (retsize: 2;)
	sp = sp + 0x0004
	SCZO = cond(sp)
	sp = sp - 2
	Mem0[ss:sp:word16] = dx
	sp = sp - 2
	Mem0[ss:sp:word16] = ax
	call fn0800_409C (retsize: 2;)
	sp = sp + 0x0008
	SCZO = cond(sp)
	v33 = Mem0[ds:0x29E5:word16]
	sp = sp - 2
	Mem0[ss:sp:word16] = v33
	v34 = Mem0[ds:0x29E3:word16]
	sp = sp - 2
	Mem0[ss:sp:word16] = v34
	call fn0800_3FAD (retsize: 2;)
	sp = sp + 0x0004
	SCZO = cond(sp)
	Mem0[ss:bp - 0x0002:word16] = 0x0000
	Mem0[ss:bp - 0x0004:word16] = ax
	v35 = Mem0[ds:0x29E1:word16]
	sp = sp - 2
	Mem0[ss:sp:word16] = v35
	v36 = Mem0[ds:0x29DF:word16]
	sp = sp - 2
	Mem0[ss:sp:word16] = v36
	ax = ax ^ ax
	SZO = cond(ax)
	C = false
	sp = sp - 2
	Mem0[ss:sp:word16] = ax
	call fn0800_401E (retsize: 2;)
	sp = sp + 0x0006
	SCZO = cond(sp)
	v37 = Mem0[ss:bp - 0x0002:word16]
	sp = sp - 2
	Mem0[ss:sp:word16] = v37
	v38 = Mem0[ss:bp - 0x0004:word16]
	sp = sp - 2
	Mem0[ss:sp:word16] = v38
	v39 = Mem0[ss:bp - 0x0002:word16]
	sp = sp - 2
	Mem0[ss:sp:word16] = v39
	v40 = Mem0[ss:bp - 0x0004:word16]
	sp = sp - 2
	Mem0[ss:sp:word16] = v40
	call fn0800_75EA (retsize: 2;)
	sp = sp + 0x0008
	SCZO = cond(sp)
	ax = 0x0001
	sp = sp - 2
	Mem0[ss:sp:word16] = ax
	ax = Mem0[ds:0x2A05:word16]
	dx = Mem0[ds:0x2A03:word16]
	dx = dx + 0x0002
	SCZO = cond(dx)
	ax = ax + 0x0000 + C
	SCZO = cond(ax)
	ax = -ax
	SCZO = cond(ax)
	C = ax == 0x0000
	dx = -dx
	SCZO = cond(dx)
	C = dx == 0x0000
	ax = ax - 0x0000 - C
	SCZO = cond(ax)
	sp = sp - 2
	Mem0[ss:sp:word16] = ax
	sp = sp - 2
	Mem0[ss:sp:word16] = dx
	v41 = Mem0[ds:0x29E1:word16]
	sp = sp - 2
	Mem0[ss:sp:word16] = v41
	v42 = Mem0[ds:0x29DF:word16]
	sp = sp - 2
	Mem0[ss:sp:word16] = v42
	call fn0800_ACB3 (retsize: 2;)
	sp = sp + 0x000A
	SCZO = cond(sp)
	v43 = Mem0[ds:0x29E1:word16]
	sp = sp - 2
	Mem0[ss:sp:word16] = v43
	v44 = Mem0[ds:0x29DF:word16]
	sp = sp - 2
	Mem0[ss:sp:word16] = v44
	v45 = Mem0[ds:0x2A03:word16]
	sp = sp - 2
	Mem0[ss:sp:word16] = v45
	call fn0800_40BF (retsize: 2;)
	sp = sp + 0x0006
	SCZO = cond(sp)
	ax = Mem0[ds:0x2A05:word16]
	dx = Mem0[ds:0x2A03:word16]
	SCZO = cond(ax - Mem0[ss:bp - 0x0002:word16])
	branch Test(NE,Z) l0800_754A
	// succ:  l0800_7506 l0800_754A
l0800_7506:
	SCZO = cond(dx - Mem0[ss:bp - 0x0004:word16])
	branch Test(NE,Z) l0800_754A
	// succ:  l0800_750B l0800_754A
l0800_750B:
	ax = 0x0001
	sp = sp - 2
	Mem0[ss:sp:word16] = ax
	ax = Mem0[ss:bp - 0x0002:word16]
	dx = Mem0[ss:bp - 0x0004:word16]
	ax = -ax
	SCZO = cond(ax)
	C = ax == 0x0000
	dx = -dx
	SCZO = cond(dx)
	C = dx == 0x0000
	ax = ax - 0x0000 - C
	SCZO = cond(ax)
	sp = sp - 2
	Mem0[ss:sp:word16] = ax
	sp = sp - 2
	Mem0[ss:sp:word16] = dx
	v46 = Mem0[ds:0x29E5:word16]
	sp = sp - 2
	Mem0[ss:sp:word16] = v46
	v47 = Mem0[ds:0x29E3:word16]
	sp = sp - 2
	Mem0[ss:sp:word16] = v47
	call fn0800_ACB3 (retsize: 2;)
	sp = sp + 0x000A
	SCZO = cond(sp)
	v48 = Mem0[ss:bp - 0x0002:word16]
	sp = sp - 2
	Mem0[ss:sp:word16] = v48
	v49 = Mem0[ss:bp - 0x0004:word16]
	sp = sp - 2
	Mem0[ss:sp:word16] = v49
	v50 = Mem0[ds:0x29E1:word16]
	sp = sp - 2
	Mem0[ss:sp:word16] = v50
	v51 = Mem0[ds:0x29DF:word16]
	sp = sp - 2
	Mem0[ss:sp:word16] = v51
	v52 = Mem0[ds:0x29E5:word16]
	sp = sp - 2
	Mem0[ss:sp:word16] = v52
	v53 = Mem0[ds:0x29E3:word16]
	sp = sp - 2
	Mem0[ss:sp:word16] = v53
	call fn0800_3B0A (retsize: 2;)
	sp = sp + 0x000C
	SCZO = cond(sp)
	goto l0800_75C1
	// succ:  l0800_75C1
l0800_754A:
	ax = 0x0001
	sp = sp - 2
	Mem0[ss:sp:word16] = ax
	v58 = Mem0[ds:0x2A05:word16]
	sp = sp - 2
	Mem0[ss:sp:word16] = v58
	v59 = Mem0[ds:0x2A03:word16]
	sp = sp - 2
	Mem0[ss:sp:word16] = v59
	v60 = Mem0[ds:0x29E1:word16]
	sp = sp - 2
	Mem0[ss:sp:word16] = v60
	v61 = Mem0[ds:0x29DF:word16]
	sp = sp - 2
	Mem0[ss:sp:word16] = v61
	call fn0800_ACB3 (retsize: 2;)
	sp = sp + 0x000A
	SCZO = cond(sp)
	goto l0800_75C1
	// succ:  l0800_75C1
l0800_7566:
	si = si ^ si
	SZO = cond(si)
	C = false
	goto l0800_7588
	// succ:  l0800_7588
l0800_756A:
	v54 = Mem0[ds:0x29E1:word16]
	sp = sp - 2
	Mem0[ss:sp:word16] = v54
	v55 = Mem0[ds:0x29DF:word16]
	sp = sp - 2
	Mem0[ss:sp:word16] = v55
	v56 = Mem0[ds:0x29E5:word16]
	sp = sp - 2
	Mem0[ss:sp:word16] = v56
	v57 = Mem0[ds:0x29E3:word16]
	sp = sp - 2
	Mem0[ss:sp:word16] = v57
	call fn0800_3DCF (retsize: 2;)
	sp = sp + 0x0004
	SCZO = cond(sp)
	sp = sp - 2
	Mem0[ss:sp:word16] = ax
	call fn0800_4047 (retsize: 2;)
	sp = sp + 0x0006
	SCZO = cond(sp)
	si = si + 0x0001
	SZO = cond(si)
	// succ:  l0800_7588
l0800_7588:
	SCZO = cond(si - 0x0003)
	branch Test(NE,Z) l0800_756A
	// succ:  l0800_758D l0800_756A
l0800_758D:
	goto l0800_75C1
	// succ:  l0800_75C1
l0800_758F:
	v21 = Mem0[ds:0x29E5:word16]
	sp = sp - 2
	Mem0[ss:sp:word16] = v21
	v22 = Mem0[ds:0x29E3:word16]
	sp = sp - 2
	Mem0[ss:sp:word16] = v22
	call fn0800_AD2F (retsize: 2;)
	sp = sp + 0x0004
	SCZO = cond(sp)
	bx = Mem0[ds:0x2A09:word16]
	cx = Mem0[ds:0x2A07:word16]
	cx = cx - ax
	SCZO = cond(cx)
	bx = bx - dx - C
	SCZO = cond(bx)
	sp = sp - 2
	Mem0[ss:sp:word16] = bx
	sp = sp - 2
	Mem0[ss:sp:word16] = cx
	v25 = Mem0[ds:0x29E1:word16]
	sp = sp - 2
	Mem0[ss:sp:word16] = v25
	v26 = Mem0[ds:0x29DF:word16]
	sp = sp - 2
	Mem0[ss:sp:word16] = v26
	v27 = Mem0[ds:0x29E5:word16]
	sp = sp - 2
	Mem0[ss:sp:word16] = v27
	v28 = Mem0[ds:0x29E3:word16]
	sp = sp - 2
	Mem0[ss:sp:word16] = v28
	call fn0800_3B0A (retsize: 2;)
	sp = sp + 0x000C
	SCZO = cond(sp)
	// succ:  l0800_75C1
l0800_75C1:
	v8 = Mem0[ds:0x29E5:word16]
	sp = sp - 2
	Mem0[ss:sp:word16] = v8
	v9 = Mem0[ds:0x29E3:word16]
	sp = sp - 2
	Mem0[ss:sp:word16] = v9
	call fn0800_AD2F (retsize: 2;)
	sp = sp + 0x0004
	SCZO = cond(sp)
	SCZO = cond(dx - Mem0[ds:0x2A09:word16])
	branch Test(UGE,C) l0800_75D8
	// succ:  l0800_75D5 l0800_75D8
l0800_75D5:
	goto l0800_7427
	// succ:  l0800_7427
l0800_75D8:
	branch Test(NE,Z) l0800_75E3
	// succ:  l0800_75DA l0800_75E3
l0800_75DA:
	SCZO = cond(ax - Mem0[ds:0x2A07:word16])
	branch Test(UGE,C) l0800_75E3
	// succ:  l0800_75E0 l0800_75E3
l0800_75E0:
	goto l0800_7427
	// succ:  l0800_7427
l0800_75E3:
	ax = ax ^ ax
	SZO = cond(ax)
	C = false
	si = Mem0[ss:sp:word16]
	sp = sp + 2
	sp = bp
	bp = Mem0[ss:sp:word16]
	sp = sp + 2
	return
	// succ:  fn0800_741D_exit
fn0800_741D_exit:


// fn0800_75EA
// Return size: 2
define fn0800_75EA
fn0800_75EA_entry:
	// succ:  l0800_75EA
l0800_75EA:
	sp = fp
	Top = 0
	sp = sp - 2
	Mem0[ss:sp:word16] = bp
	bp = sp
	sp = sp - 0x0016
	SCZO = cond(sp)
	sp = sp - 2
	Mem0[ss:sp:word16] = si
	ax = Mem0[ss:bp + 0x0006:word16]
	dx = Mem0[ss:bp + 0x0004:word16]
	Mem0[ds:0x4680:word16] = ax
	Mem0[ds:0x467E:word16] = dx
	Mem0[ds:0x2A05:word16] = ax
	Mem0[ds:0x2A03:word16] = dx
	Mem0[ds:0x4678:word16] = ax
	Mem0[ds:0x4676:word16] = dx
	ax = Mem0[ss:bp + 0x000A:word16]
	dx = Mem0[ss:bp + 0x0008:word16]
	dx = dx - 0x0012
	SCZO = cond(dx)
	ax = ax - 0x0000 - C
	SCZO = cond(ax)
	Mem0[ds:0x4E86:word16] = ax
	Mem0[ds:0x4E84:word16] = dx
	SCZO = cond(Mem0[ds:0x4680:word16] - 0x0000)
	branch Test(UGT,CZ) l0800_7634
	// succ:  l0800_7626 l0800_7634
l0800_7626:
	branch Test(EQ,Z) l0800_762B
	// succ:  l0800_7628 l0800_762B
l0800_7628:
	goto l0800_79FD
	// succ:  l0800_79FD
l0800_762B:
	SCZO = cond(Mem0[ss:bp + 0x0004:word16] - 0x0012)
	branch Test(UGT,CZ) l0800_7634
	// succ:  l0800_7631 l0800_7634
l0800_7631:
	goto l0800_79FD
	// succ:  l0800_79FD
l0800_7634:
	Mem0[ds:0x2E4B:word16] = 0x0000
	Mem0[ds:0x2E49:word16] = 0x0000
	Mem0[ds:0x465C:word16] = 0x0000
	Mem0[ds:0x4668:word16] = 0x0000
	Mem0[ds:0x4666:word16] = 0x0000
	Mem0[ds:0x2A05:word16] = 0x0000
	Mem0[ds:0x2A03:word16] = 0x0000
	Mem0[ds:0x2A01:word16] = 0x0000
	Mem0[ds:0x29FF:word16] = 0x0000
	Mem0[ds:0x467C:word16] = 0x0000
	Mem0[ds:0x467A:word16] = 0x0000
	Mem0[ds:0x4674:word16] = 0x0000
	Mem0[ds:0x4672:word16] = 0x0000
	Mem0[ds:0x2E43:word16] = 0x0000
	Mem0[ds:0x2E45:word16] = 0x0000
	Mem0[ds:0x4E82:word16] = 0x0000
	Mem0[ds:0x4E8A:word16] = 0x0000
	Mem0[ds:0x4E88:word16] = 0x0000
	Mem0[ds:0x29F9:word16] = 0x0000
	Mem0[ds:0x29F7:word16] = 0x0000
	ax = 0x0001
	dx = 0x000F
	sp = sp - 2
	Mem0[ss:sp:word16] = ax
	sp = sp - 2
	Mem0[ss:sp:word16] = dx
	call fn0800_4311 (retsize: 2;)
	sp = sp + 0x0004
	SCZO = cond(sp)
	Mem0[ss:bp - 0x0014:word16] = dx
	Mem0[ss:bp - 0x0016:word16] = ax
	dx = dx + 0x0001
	SZO = cond(dx)
	Mem0[ds:0x2E73:word16] = dx
	Mem0[ds:0x2E71:word16] = 0x0000
	ax = 0x0001
	dx = 0x0010
	sp = sp - 2
	Mem0[ss:sp:word16] = ax
	sp = sp - 2
	Mem0[ss:sp:word16] = dx
	call fn0800_4311 (retsize: 2;)
	sp = sp + 0x0004
	SCZO = cond(sp)
	Mem0[ss:bp - 0x0010:word16] = dx
	Mem0[ss:bp - 0x0012:word16] = ax
	dx = dx + 0x0001
	SZO = cond(dx)
	Mem0[ds:0x2E39:word16] = dx
	Mem0[ds:0x2E37:word16] = 0x0000
	ax = 0x0001
	dx = 0x0010
	sp = sp - 2
	Mem0[ss:sp:word16] = ax
	sp = sp - 2
	Mem0[ss:sp:word16] = dx
	call fn0800_4311 (retsize: 2;)
	sp = sp + 0x0004
	SCZO = cond(sp)
	Mem0[ss:bp - 0x000C:word16] = dx
	Mem0[ss:bp - 0x000E:word16] = ax
	dx = dx + 0x0001
	SZO = cond(dx)
	Mem0[ds:0x2E35:word16] = dx
	Mem0[ds:0x2E33:word16] = 0x0000
	ax = 0x0001
	dx = 0x0010
	sp = sp - 2
	Mem0[ss:sp:word16] = ax
	sp = sp - 2
	Mem0[ss:sp:word16] = dx
	call fn0800_4311 (retsize: 2;)
	sp = sp + 0x0004
	SCZO = cond(sp)
	Mem0[ss:bp - 0x0008:word16] = dx
	Mem0[ss:bp - 0x000A:word16] = ax
	dx = dx + 0x0001
	SZO = cond(dx)
	Mem0[ds:0x2E41:word16] = dx
	Mem0[ds:0x2E3F:word16] = 0x0000
	ax = 0x0001
	dx = 0x0010
	sp = sp - 2
	Mem0[ss:sp:word16] = ax
	sp = sp - 2
	Mem0[ss:sp:word16] = dx
	call fn0800_4311 (retsize: 2;)
	sp = sp + 0x0004
	SCZO = cond(sp)
	Mem0[ss:bp - 0x0004:word16] = dx
	Mem0[ss:bp - 0x0006:word16] = ax
	dx = dx + 0x0001
	SZO = cond(dx)
	Mem0[ds:0x2E3D:word16] = dx
	Mem0[ds:0x2E3B:word16] = 0x0000
	call fn0800_87F8 (retsize: 2;)
	v14 = Mem0[ds:0x29E5:word16]
	sp = sp - 2
	Mem0[ss:sp:word16] = v14
	v15 = Mem0[ds:0x29E3:word16]
	sp = sp - 2
	Mem0[ss:sp:word16] = v15
	call fn0800_AD2F (retsize: 2;)
	sp = sp + 0x0004
	SCZO = cond(sp)
	Mem0[ds:0x4664:word16] = dx
	Mem0[ds:0x4662:word16] = ax
	v16 = Mem0[ds:0x29E1:word16]
	sp = sp - 2
	Mem0[ss:sp:word16] = v16
	v17 = Mem0[ds:0x29DF:word16]
	sp = sp - 2
	Mem0[ss:sp:word16] = v17
	call fn0800_AD2F (retsize: 2;)
	sp = sp + 0x0004
	SCZO = cond(sp)
	Mem0[ds:0x4660:word16] = dx
	Mem0[ds:0x465E:word16] = ax
	v18 = Mem0[ds:0x29E1:word16]
	sp = sp - 2
	Mem0[ss:sp:word16] = v18
	v19 = Mem0[ds:0x29DF:word16]
	sp = sp - 2
	Mem0[ss:sp:word16] = v19
	ax = Mem0[ds:0x2A21:word16]
	dx_ax = (int32) ax
	ax = ax + 0x4300
	SCZO = cond(ax)
	dx = dx + 0x524E + C
	SCZO = cond(dx)
	sp = sp - 2
	Mem0[ss:sp:word16] = dx
	sp = sp - 2
	Mem0[ss:sp:word16] = ax
	call fn0800_409C (retsize: 2;)
	sp = sp + 0x0008
	SCZO = cond(sp)
	v21 = Mem0[ds:0x29E1:word16]
	sp = sp - 2
	Mem0[ss:sp:word16] = v21
	v22 = Mem0[ds:0x29DF:word16]
	sp = sp - 2
	Mem0[ss:sp:word16] = v22
	v23 = Mem0[ds:0x4680:word16]
	sp = sp - 2
	Mem0[ss:sp:word16] = v23
	v24 = Mem0[ds:0x467E:word16]
	sp = sp - 2
	Mem0[ss:sp:word16] = v24
	call fn0800_409C (retsize: 2;)
	sp = sp + 0x0008
	SCZO = cond(sp)
	v25 = Mem0[ds:0x29E1:word16]
	sp = sp - 2
	Mem0[ss:sp:word16] = v25
	v26 = Mem0[ds:0x29DF:word16]
	sp = sp - 2
	Mem0[ss:sp:word16] = v26
	ax = ax ^ ax
	SZO = cond(ax)
	C = false
	sp = sp - 2
	Mem0[ss:sp:word16] = ax
	sp = sp - 2
	Mem0[ss:sp:word16] = ax
	call fn0800_409C (retsize: 2;)
	sp = sp + 0x0008
	SCZO = cond(sp)
	v27 = Mem0[ds:0x29E1:word16]
	sp = sp - 2
	Mem0[ss:sp:word16] = v27
	v28 = Mem0[ds:0x29DF:word16]
	sp = sp - 2
	Mem0[ss:sp:word16] = v28
	ax = ax ^ ax
	SZO = cond(ax)
	C = false
	sp = sp - 2
	Mem0[ss:sp:word16] = ax
	call fn0800_401E (retsize: 2;)
	sp = sp + 0x0006
	SCZO = cond(sp)
	v29 = Mem0[ds:0x29E1:word16]
	sp = sp - 2
	Mem0[ss:sp:word16] = v29
	v30 = Mem0[ds:0x29DF:word16]
	sp = sp - 2
	Mem0[ss:sp:word16] = v30
	ax = ax ^ ax
	SZO = cond(ax)
	C = false
	sp = sp - 2
	Mem0[ss:sp:word16] = ax
	call fn0800_401E (retsize: 2;)
	sp = sp + 0x0006
	SCZO = cond(sp)
	v31 = Mem0[ds:0x29E1:word16]
	sp = sp - 2
	Mem0[ss:sp:word16] = v31
	v32 = Mem0[ds:0x29DF:word16]
	sp = sp - 2
	Mem0[ss:sp:word16] = v32
	ax = ax ^ ax
	SZO = cond(ax)
	C = false
	sp = sp - 2
	Mem0[ss:sp:word16] = ax
	call fn0800_401E (retsize: 2;)
	sp = sp + 0x0006
	SCZO = cond(sp)
	sp = sp - 2
	Mem0[ss:sp:word16] = ds
	ax = 0x2240
	sp = sp - 2
	Mem0[ss:sp:word16] = ax
	call fn0800_B2EF (retsize: 2;)
	sp = sp + 0x0004
	SCZO = cond(sp)
	ax = Mem0[ds:0x2E4F:word16]
	Mem0[ss:bp - 0x0002:word16] = ax
	ax = 0x0001
	sp = sp - 2
	Mem0[ss:sp:word16] = ax
	SCZO = cond(Mem0[ds:0x2A1F:word16] - 0x0000)
	branch Test(EQ,Z) l0800_7808
	// succ:  l0800_7806 l0800_7808
l0800_7806:
	goto l0800_780A
	// succ:  l0800_780A
l0800_7808:
	ax = ax ^ ax
	SZO = cond(ax)
	C = false
	// succ:  l0800_780A
l0800_780A:
	sp = sp - 2
	Mem0[ss:sp:word16] = ax
	call fn0800_8465 (retsize: 2;)
	sp = sp + 0x0004
	SCZO = cond(sp)
	ax = 0x0001
	sp = sp - 2
	Mem0[ss:sp:word16] = ax
	SCZO = cond(Mem0[ds:0x2E4F:word16] - 0x0000)
	branch Test(EQ,Z) l0800_781E
	// succ:  l0800_781C l0800_781E
l0800_781C:
	goto l0800_7820
	// succ:  l0800_7820
l0800_781E:
	ax = ax ^ ax
	SZO = cond(ax)
	C = false
	// succ:  l0800_7820
l0800_7820:
	sp = sp - 2
	Mem0[ss:sp:word16] = ax
	call fn0800_8465 (retsize: 2;)
	sp = sp + 0x0004
	SCZO = cond(sp)
	SCZO = cond(Mem0[ds:0x2A23:word16] - 0x0001)
	branch Test(EQ,Z) l0800_7843
	// succ:  l0800_782E l0800_7843
l0800_782E:
	SCZO = cond(Mem0[ds:0x2E4F:word16] - 0x0000)
	branch Test(EQ,Z) l0800_7843
	// succ:  l0800_7835 l0800_7843
l0800_7835:
	ax = 0x0010
	sp = sp - 2
	Mem0[ss:sp:word16] = ax
	v33 = Mem0[ds:0x2E4F:word16]
	sp = sp - 2
	Mem0[ss:sp:word16] = v33
	call fn0800_8465 (retsize: 2;)
	sp = sp + 0x0004
	SCZO = cond(sp)
	// succ:  l0800_7843
l0800_7843:
	ax = Mem0[ds:0x2A21:word16]
	SCZO = cond(ax - 0x0001)
	branch Test(EQ,Z) l0800_7852
	// succ:  l0800_784B l0800_7852
l0800_784B:
	SCZO = cond(ax - 0x0002)
	branch Test(EQ,Z) l0800_7857
	// succ:  l0800_7850 l0800_7857
l0800_7850:
	goto l0800_785A
	// succ:  l0800_785A
l0800_7852:
	call fn0800_7A02 (retsize: 2;)
	goto l0800_785A
	// succ:  l0800_785A
l0800_7857:
	call fn0800_7C78 (retsize: 2;)
	// succ:  l0800_785A
l0800_785A:
	si = si ^ si
	SZO = cond(si)
	C = false
	goto l0800_7870
	// succ:  l0800_7870
l0800_785E:
	bx = si
	si = si + 0x0001
	SZO = cond(si)
	al = Mem0[ds:bx + 0x4682:byte]
	sp = sp - 2
	Mem0[ss:sp:word16] = ax
	call fn0800_8624 (retsize: 2;)
	sp = sp + 0x0002
	SCZO = cond(sp)
	v38 = Mem0[ds:0x4E82:word16] - 0x0001
	Mem0[ds:0x4E82:word16] = v38
	SZO = cond(v38)
	// succ:  l0800_7870
l0800_7870:
	SCZO = cond(Mem0[ds:0x4E82:word16] - 0x0000)
	branch Test(NE,Z) l0800_785E
	// succ:  l0800_7877 l0800_785E
l0800_7877:
	ax = Mem0[ss:bp - 0x0002:word16]
	Mem0[ds:0x2E4F:word16] = ax
	ax = Mem0[ds:0x4680:word16]
	dx = Mem0[ds:0x467E:word16]
	dx = dx - Mem0[ds:0x2A03:word16]
	SCZO = cond(dx)
	ax = ax - Mem0[ds:0x2A05:word16] - C
	SCZO = cond(ax)
	SCZO = cond(ax - Mem0[ds:0x4E8A:word16])
	branch Test(UGT,CZ) l0800_78B3
	// succ:  l0800_7892 l0800_78B3
l0800_7892:
	branch Test(ULT,C) l0800_789A
	// succ:  l0800_7894 l0800_789A
l0800_7894:
	SCZO = cond(dx - Mem0[ds:0x4E88:word16])
	branch Test(UGE,C) l0800_78B3
	// succ:  l0800_789A l0800_78B3
l0800_789A:
	ax = Mem0[ds:0x4680:word16]
	dx = Mem0[ds:0x467E:word16]
	dx = dx - Mem0[ds:0x2A03:word16]
	SCZO = cond(dx)
	ax = ax - Mem0[ds:0x2A05:word16] - C
	SCZO = cond(ax)
	v34 = Mem0[ds:0x4E88:word16] - dx
	Mem0[ds:0x4E88:word16] = v34
	SCZO = cond(v34)
	v35 = Mem0[ds:0x4E8A:word16] - ax - C
	Mem0[ds:0x4E8A:word16] = v35
	SCZO = cond(v35)
	goto l0800_78BF
	// succ:  l0800_78BF
l0800_78B3:
	Mem0[ds:0x4E8A:word16] = 0x0000
	Mem0[ds:0x4E88:word16] = 0x0000
	// succ:  l0800_78BF
l0800_78BF:
	SCZO = cond(Mem0[ds:0x2A21:word16] - 0x0002)
	branch Test(NE,Z) l0800_78D0
	// succ:  l0800_78C6 l0800_78D0
l0800_78C6:
	v39 = Mem0[ds:0x4E88:word16] + 0x0002
	Mem0[ds:0x4E88:word16] = v39
	SCZO = cond(v39)
	v40 = Mem0[ds:0x4E8A:word16] + 0x00 + C
	Mem0[ds:0x4E8A:word16] = v40
	SCZO = cond(v40)
	// succ:  l0800_78D0
l0800_78D0:
	v41 = Mem0[ds:0x29E1:word16]
	sp = sp - 2
	Mem0[ss:sp:word16] = v41
	v42 = Mem0[ds:0x29DF:word16]
	sp = sp - 2
	Mem0[ss:sp:word16] = v42
	call fn0800_AD2F (retsize: 2;)
	sp = sp + 0x0004
	SCZO = cond(sp)
	ax = ax - Mem0[ds:0x465E:word16]
	SCZO = cond(ax)
	dx = dx - Mem0[ds:0x4660:word16] - C
	SCZO = cond(dx)
	Mem0[ds:0x2A05:word16] = dx
	Mem0[ds:0x2A03:word16] = ax
	ax = ax ^ ax
	SZO = cond(ax)
	C = false
	sp = sp - 2
	Mem0[ss:sp:word16] = ax
	ax = Mem0[ds:0x4660:word16]
	dx = Mem0[ds:0x465E:word16]
	dx = dx + 0x0008
	SCZO = cond(dx)
	ax = ax + 0x0000 + C
	SCZO = cond(ax)
	sp = sp - 2
	Mem0[ss:sp:word16] = ax
	sp = sp - 2
	Mem0[ss:sp:word16] = dx
	v43 = Mem0[ds:0x29E1:word16]
	sp = sp - 2
	Mem0[ss:sp:word16] = v43
	v44 = Mem0[ds:0x29DF:word16]
	sp = sp - 2
	Mem0[ss:sp:word16] = v44
	call fn0800_ACB3 (retsize: 2;)
	sp = sp + 0x000A
	SCZO = cond(sp)
	v45 = Mem0[ds:0x29E1:word16]
	sp = sp - 2
	Mem0[ss:sp:word16] = v45
	v46 = Mem0[ds:0x29DF:word16]
	sp = sp - 2
	Mem0[ss:sp:word16] = v46
	ax = Mem0[ds:0x2A05:word16]
	dx = Mem0[ds:0x2A03:word16]
	dx = dx - 0x0012
	SCZO = cond(dx)
	ax = ax - 0x0000 - C
	SCZO = cond(ax)
	sp = sp - 2
	Mem0[ss:sp:word16] = ax
	sp = sp - 2
	Mem0[ss:sp:word16] = dx
	call fn0800_409C (retsize: 2;)
	sp = sp + 0x0008
	SCZO = cond(sp)
	v47 = Mem0[ds:0x29E1:word16]
	sp = sp - 2
	Mem0[ss:sp:word16] = v47
	v48 = Mem0[ds:0x29DF:word16]
	sp = sp - 2
	Mem0[ss:sp:word16] = v48
	v49 = Mem0[ds:0x2E4B:word16]
	sp = sp - 2
	Mem0[ss:sp:word16] = v49
	call fn0800_401E (retsize: 2;)
	sp = sp + 0x0006
	SCZO = cond(sp)
	v50 = Mem0[ds:0x29E1:word16]
	sp = sp - 2
	Mem0[ss:sp:word16] = v50
	v51 = Mem0[ds:0x29DF:word16]
	sp = sp - 2
	Mem0[ss:sp:word16] = v51
	v52 = Mem0[ds:0x2E49:word16]
	sp = sp - 2
	Mem0[ss:sp:word16] = v52
	call fn0800_401E (retsize: 2;)
	sp = sp + 0x0006
	SCZO = cond(sp)
	v53 = Mem0[ds:0x29E1:word16]
	sp = sp - 2
	Mem0[ss:sp:word16] = v53
	v54 = Mem0[ds:0x29DF:word16]
	sp = sp - 2
	Mem0[ss:sp:word16] = v54
	al = Mem0[ds:0x4E88:byte]
	sp = sp - 2
	Mem0[ss:sp:word16] = ax
	call fn0800_4047 (retsize: 2;)
	sp = sp + 0x0006
	SCZO = cond(sp)
	v55 = Mem0[ds:0x29E1:word16]
	sp = sp - 2
	Mem0[ss:sp:word16] = v55
	v56 = Mem0[ds:0x29DF:word16]
	sp = sp - 2
	Mem0[ss:sp:word16] = v56
	al = Mem0[ds:0x29F7:byte]
	sp = sp - 2
	Mem0[ss:sp:word16] = ax
	call fn0800_4047 (retsize: 2;)
	sp = sp + 0x0006
	SCZO = cond(sp)
	ax = ax ^ ax
	SZO = cond(ax)
	C = false
	sp = sp - 2
	Mem0[ss:sp:word16] = ax
	ax = Mem0[ds:0x4660:word16]
	dx = Mem0[ds:0x465E:word16]
	dx = dx + Mem0[ds:0x2A03:word16]
	SCZO = cond(dx)
	ax = ax + Mem0[ds:0x2A05:word16] + C
	SCZO = cond(ax)
	sp = sp - 2
	Mem0[ss:sp:word16] = ax
	sp = sp - 2
	Mem0[ss:sp:word16] = dx
	v57 = Mem0[ds:0x29E1:word16]
	sp = sp - 2
	Mem0[ss:sp:word16] = v57
	v58 = Mem0[ds:0x29DF:word16]
	sp = sp - 2
	Mem0[ss:sp:word16] = v58
	call fn0800_ACB3 (retsize: 2;)
	sp = sp + 0x000A
	SCZO = cond(sp)
	ax = ax ^ ax
	SZO = cond(ax)
	C = false
	sp = sp - 2
	Mem0[ss:sp:word16] = ax
	ax = Mem0[ds:0x4664:word16]
	dx = Mem0[ds:0x4662:word16]
	dx = dx + Mem0[ds:0x467E:word16]
	SCZO = cond(dx)
	ax = ax + Mem0[ds:0x4680:word16] + C
	SCZO = cond(ax)
	sp = sp - 2
	Mem0[ss:sp:word16] = ax
	sp = sp - 2
	Mem0[ss:sp:word16] = dx
	v59 = Mem0[ds:0x29E5:word16]
	sp = sp - 2
	Mem0[ss:sp:word16] = v59
	v60 = Mem0[ds:0x29E3:word16]
	sp = sp - 2
	Mem0[ss:sp:word16] = v60
	call fn0800_ACB3 (retsize: 2;)
	sp = sp + 0x000A
	SCZO = cond(sp)
	v61 = Mem0[ss:bp - 0x0014:word16]
	sp = sp - 2
	Mem0[ss:sp:word16] = v61
	v62 = Mem0[ss:bp - 0x0016:word16]
	sp = sp - 2
	Mem0[ss:sp:word16] = v62
	call fn0800_4346 (retsize: 2;)
	sp = sp + 0x0004
	SCZO = cond(sp)
	v63 = Mem0[ss:bp - 0x0010:word16]
	sp = sp - 2
	Mem0[ss:sp:word16] = v63
	v64 = Mem0[ss:bp - 0x0012:word16]
	sp = sp - 2
	Mem0[ss:sp:word16] = v64
	call fn0800_4346 (retsize: 2;)
	sp = sp + 0x0004
	SCZO = cond(sp)
	v65 = Mem0[ss:bp - 0x000C:word16]
	sp = sp - 2
	Mem0[ss:sp:word16] = v65
	v66 = Mem0[ss:bp - 0x000E:word16]
	sp = sp - 2
	Mem0[ss:sp:word16] = v66
	call fn0800_4346 (retsize: 2;)
	sp = sp + 0x0004
	SCZO = cond(sp)
	v67 = Mem0[ss:bp - 0x0008:word16]
	sp = sp - 2
	Mem0[ss:sp:word16] = v67
	v68 = Mem0[ss:bp - 0x000A:word16]
	sp = sp - 2
	Mem0[ss:sp:word16] = v68
	call fn0800_4346 (retsize: 2;)
	sp = sp + 0x0004
	SCZO = cond(sp)
	v69 = Mem0[ss:bp - 0x0004:word16]
	sp = sp - 2
	Mem0[ss:sp:word16] = v69
	v70 = Mem0[ss:bp - 0x0006:word16]
	sp = sp - 2
	Mem0[ss:sp:word16] = v70
	call fn0800_4346 (retsize: 2;)
	sp = sp + 0x0004
	SCZO = cond(sp)
	sp = sp - 2
	Mem0[ss:sp:word16] = ds
	ax = 0x223C
	sp = sp - 2
	Mem0[ss:sp:word16] = ax
	call fn0800_B2EF (retsize: 2;)
	sp = sp + 0x0004
	SCZO = cond(sp)
	// succ:  l0800_79FD
l0800_79FD:
	si = Mem0[ss:sp:word16]
	sp = sp + 2
	sp = bp
	bp = Mem0[ss:sp:word16]
	sp = sp + 2
	return
	// succ:  fn0800_75EA_exit
fn0800_75EA_exit:


// fn0800_7A02
// Return size: 2
define fn0800_7A02
fn0800_7A02_entry:
	// succ:  l0800_7A02
l0800_7A02:
	sp = fp
	Top = 0
	sp = sp - 2
	Mem0[ss:sp:word16] = bp
	bp = sp
	sp = sp - 0x0004
	SCZO = cond(sp)
	sp = sp - 2
	Mem0[ss:sp:word16] = si
	ax = Mem0[ds:0x4664:word16]
	dx = Mem0[ds:0x4662:word16]
	Mem0[ss:bp - 0x0002:word16] = ax
	Mem0[ss:bp - 0x0004:word16] = dx
	goto l0800_7C1A
	// succ:  l0800_7C1A
l0800_7A19:
	ax = 0x0010
	sp = sp - 2
	Mem0[ss:sp:word16] = ax
	sp = sp - 2
	Mem0[ss:sp:word16] = ds
	ax = 0x284F
	sp = sp - 2
	Mem0[ss:sp:word16] = ax
	call fn0800_43D4 (retsize: 2;)
	sp = sp + 0x0006
	SCZO = cond(sp)
	ax = 0x0010
	sp = sp - 2
	Mem0[ss:sp:word16] = ax
	sp = sp - 2
	Mem0[ss:sp:word16] = ds
	ax = 0x278F
	sp = sp - 2
	Mem0[ss:sp:word16] = ax
	call fn0800_43D4 (retsize: 2;)
	sp = sp + 0x0006
	SCZO = cond(sp)
	ax = 0x0010
	sp = sp - 2
	Mem0[ss:sp:word16] = ax
	sp = sp - 2
	Mem0[ss:sp:word16] = ds
	ax = 0x290F
	sp = sp - 2
	Mem0[ss:sp:word16] = ax
	call fn0800_43D4 (retsize: 2;)
	sp = sp + 0x0006
	SCZO = cond(sp)
	call fn0800_7FDC (retsize: 2;)
	ax = ax ^ ax
	SZO = cond(ax)
	C = false
	sp = sp - 2
	Mem0[ss:sp:word16] = ax
	v13 = Mem0[ss:bp - 0x0002:word16]
	sp = sp - 2
	Mem0[ss:sp:word16] = v13
	v14 = Mem0[ss:bp - 0x0004:word16]
	sp = sp - 2
	Mem0[ss:sp:word16] = v14
	v15 = Mem0[ds:0x29E5:word16]
	sp = sp - 2
	Mem0[ss:sp:word16] = v15
	v16 = Mem0[ds:0x29E3:word16]
	sp = sp - 2
	Mem0[ss:sp:word16] = v16
	call fn0800_ACB3 (retsize: 2;)
	sp = sp + 0x000A
	SCZO = cond(sp)
	ax = 0x0010
	sp = sp - 2
	Mem0[ss:sp:word16] = ax
	sp = sp - 2
	Mem0[ss:sp:word16] = ds
	ax = 0x290F
	sp = sp - 2
	Mem0[ss:sp:word16] = ax
	call fn0800_441C (retsize: 2;)
	sp = sp + 0x0006
	SCZO = cond(sp)
	ax = 0x0010
	sp = sp - 2
	Mem0[ss:sp:word16] = ax
	sp = sp - 2
	Mem0[ss:sp:word16] = ds
	ax = 0x284F
	sp = sp - 2
	Mem0[ss:sp:word16] = ax
	call fn0800_441C (retsize: 2;)
	sp = sp + 0x0006
	SCZO = cond(sp)
	ax = 0x0010
	sp = sp - 2
	Mem0[ss:sp:word16] = ax
	sp = sp - 2
	Mem0[ss:sp:word16] = ds
	ax = 0x278F
	sp = sp - 2
	Mem0[ss:sp:word16] = ax
	call fn0800_441C (retsize: 2;)
	sp = sp + 0x0006
	SCZO = cond(sp)
	ax = 0x0010
	sp = sp - 2
	Mem0[ss:sp:word16] = ax
	sp = sp - 2
	Mem0[ss:sp:word16] = ds
	ax = 0x290F
	sp = sp - 2
	Mem0[ss:sp:word16] = ax
	call fn0800_83A1 (retsize: 2;)
	sp = sp + 0x0006
	SCZO = cond(sp)
	ax = 0x0010
	sp = sp - 2
	Mem0[ss:sp:word16] = ax
	sp = sp - 2
	Mem0[ss:sp:word16] = ds
	ax = 0x284F
	sp = sp - 2
	Mem0[ss:sp:word16] = ax
	call fn0800_83A1 (retsize: 2;)
	sp = sp + 0x0006
	SCZO = cond(sp)
	ax = 0x0010
	sp = sp - 2
	Mem0[ss:sp:word16] = ax
	sp = sp - 2
	Mem0[ss:sp:word16] = ds
	ax = 0x278F
	sp = sp - 2
	Mem0[ss:sp:word16] = ax
	call fn0800_83A1 (retsize: 2;)
	sp = sp + 0x0006
	SCZO = cond(sp)
	ax = 0x0010
	sp = sp - 2
	Mem0[ss:sp:word16] = ax
	v17 = Mem0[ds:0x466A:word16]
	sp = sp - 2
	Mem0[ss:sp:word16] = v17
	call fn0800_8489 (retsize: 2;)
	sp = sp + 0x0004
	SCZO = cond(sp)
	goto l0800_7BC0
	// succ:  l0800_7BC0
l0800_7ACB:
	v23 = Mem0[ds:0x29DD:word16]
	sp = sp - 2
	Mem0[ss:sp:word16] = v23
	v24 = Mem0[ds:0x29DB:word16]
	sp = sp - 2
	Mem0[ss:sp:word16] = v24
	call fn0800_3E27 (retsize: 2;)
	sp = sp + 0x0004
	SCZO = cond(sp)
	Mem0[ds:0x2E47:word16] = ax
	v25 = Mem0[ds:0x467A:word16] + ax
	Mem0[ds:0x467A:word16] = v25
	SCZO = cond(v25)
	v26 = Mem0[ds:0x467C:word16] + 0x00 + C
	Mem0[ds:0x467C:word16] = v26
	SCZO = cond(v26)
	sp = sp - 2
	Mem0[ss:sp:word16] = ds
	ax = 0x290F
	sp = sp - 2
	Mem0[ss:sp:word16] = ax
	v27 = Mem0[ds:0x2E47:word16]
	sp = sp - 2
	Mem0[ss:sp:word16] = v27
	call fn0800_8407 (retsize: 2;)
	sp = sp + 0x0006
	SCZO = cond(sp)
	SCZO = cond(Mem0[ds:0x2E47:word16] - 0x0000)
	branch Test(EQ,Z) l0800_7B56
	// succ:  l0800_7AFB l0800_7B56
l0800_7AFB:
	SCZO = cond(Mem0[ds:0x2E45:word16] - 0x0000)
	branch Test(EQ,Z) l0800_7B32
	// succ:  l0800_7B02 l0800_7B32
l0800_7B02:
	goto l0800_7B17
	// succ:  l0800_7B17
l0800_7B04:
	call fn0800_8359 (retsize: 2;)
	al = al ^ Mem0[ds:0x2E4F:byte]
	SZO = cond(al)
	C = false
	bx = Mem0[ds:0x4E82:word16]
	Mem0[ds:bx + 0x4682:byte] = al
	v46 = Mem0[ds:0x4E82:word16] + 0x0001
	Mem0[ds:0x4E82:word16] = v46
	SZO = cond(v46)
	// succ:  l0800_7B17
l0800_7B17:
	ax = Mem0[ds:0x2E47:word16]
	v42 = Mem0[ds:0x2E47:word16] - 0x0001
	Mem0[ds:0x2E47:word16] = v42
	SZO = cond(v42)
	ax = ax | ax
	SZO = cond(ax)
	C = false
	branch Test(NE,Z) l0800_7B04
	// succ:  l0800_7B22 l0800_7B04
l0800_7B22:
	goto l0800_7B3D
	// succ:  l0800_7B3D
l0800_7B24:
	call fn0800_8359 (retsize: 2;)
	al = al ^ Mem0[ds:0x2E4F:byte]
	SZO = cond(al)
	C = false
	sp = sp - 2
	Mem0[ss:sp:word16] = ax
	call fn0800_8624 (retsize: 2;)
	sp = sp + 0x0002
	SCZO = cond(sp)
	// succ:  l0800_7B32
l0800_7B32:
	ax = Mem0[ds:0x2E47:word16]
	v48 = Mem0[ds:0x2E47:word16] - 0x0001
	Mem0[ds:0x2E47:word16] = v48
	SZO = cond(v48)
	ax = ax | ax
	SZO = cond(ax)
	C = false
	branch Test(NE,Z) l0800_7B24
	// succ:  l0800_7B3D l0800_7B24
l0800_7B3D:
	SZO = cond(Mem0[ds:0x2E4F:word16] & 0x0001)
	C = false
	branch Test(EQ,Z) l0800_7B52
	// succ:  l0800_7B45 l0800_7B52
l0800_7B45:
	ax = Mem0[ds:0x2E4F:word16]
	ax = ax >>u 0x0001
	SCZO = cond(ax)
	ax = ax | 0x8000
	SZO = cond(ax)
	C = false
	Mem0[ds:0x2E4F:word16] = ax
	goto l0800_7B56
	// succ:  l0800_7B56
l0800_7B52:
	v47 = Mem0[ds:0x2E4F:word16] >>u 0x0001
	Mem0[ds:0x2E4F:word16] = v47
	SCZO = cond(v47)
	// succ:  l0800_7B56
l0800_7B56:
	ax = Mem0[ds:0x466A:word16]
	ax = ax | Mem0[ds:0x466C:word16]
	SZO = cond(ax)
	C = false
	branch Test(EQ,Z) l0800_7BC0
	// succ:  l0800_7B5F l0800_7BC0
l0800_7B5F:
	v33 = Mem0[ds:0x29DD:word16]
	sp = sp - 2
	Mem0[ss:sp:word16] = v33
	v34 = Mem0[ds:0x29DB:word16]
	sp = sp - 2
	Mem0[ss:sp:word16] = v34
	call fn0800_3E27 (retsize: 2;)
	sp = sp + 0x0004
	SCZO = cond(sp)
	Mem0[ds:0x2E29:word16] = ax
	v35 = Mem0[ds:0x29DD:word16]
	sp = sp - 2
	Mem0[ss:sp:word16] = v35
	v36 = Mem0[ds:0x29DB:word16]
	sp = sp - 2
	Mem0[ss:sp:word16] = v36
	call fn0800_3E27 (retsize: 2;)
	sp = sp + 0x0004
	SCZO = cond(sp)
	Mem0[ds:0x2E2B:word16] = ax
	sp = sp - 2
	Mem0[ss:sp:word16] = ds
	ax = 0x284F
	sp = sp - 2
	Mem0[ss:sp:word16] = ax
	v37 = Mem0[ds:0x2E2B:word16]
	sp = sp - 2
	Mem0[ss:sp:word16] = v37
	call fn0800_8407 (retsize: 2;)
	sp = sp + 0x0006
	SCZO = cond(sp)
	sp = sp - 2
	Mem0[ss:sp:word16] = ds
	ax = 0x278F
	sp = sp - 2
	Mem0[ss:sp:word16] = ax
	v38 = Mem0[ds:0x2E29:word16]
	sp = sp - 2
	Mem0[ss:sp:word16] = v38
	call fn0800_8407 (retsize: 2;)
	sp = sp + 0x0006
	SCZO = cond(sp)
	v39 = Mem0[ds:0x2E29:word16] + 0x0002
	Mem0[ds:0x2E29:word16] = v39
	SCZO = cond(v39)
	ax = Mem0[ds:0x2E29:word16]
	v40 = Mem0[ds:0x467A:word16] + ax
	Mem0[ds:0x467A:word16] = v40
	SCZO = cond(v40)
	v41 = Mem0[ds:0x467C:word16] + 0x00 + C
	Mem0[ds:0x467C:word16] = v41
	SCZO = cond(v41)
	goto l0800_7BB5
	// succ:  l0800_7BB5
l0800_7BB2:
	call fn0800_8359 (retsize: 2;)
	// succ:  l0800_7BB5
l0800_7BB5:
	ax = Mem0[ds:0x2E29:word16]
	v45 = Mem0[ds:0x2E29:word16] - 0x0001
	Mem0[ds:0x2E29:word16] = v45
	SZO = cond(v45)
	ax = ax | ax
	SZO = cond(ax)
	C = false
	branch Test(NE,Z) l0800_7BB2
	// succ:  l0800_7BC0 l0800_7BB2
l0800_7BC0:
	ax = Mem0[ds:0x466A:word16]
	dx = Mem0[ds:0x466C:word16]
	v18 = Mem0[ds:0x466A:word16] - 0x0001
	Mem0[ds:0x466A:word16] = v18
	SCZO = cond(v18)
	v19 = Mem0[ds:0x466C:word16] - 0x00 - C
	Mem0[ds:0x466C:word16] = v19
	SCZO = cond(v19)
	ax = ax | dx
	SZO = cond(ax)
	C = false
	branch Test(EQ,Z) l0800_7BD8
	// succ:  l0800_7BD5 l0800_7BD8
l0800_7BD5:
	goto l0800_7ACB
	// succ:  l0800_7ACB
l0800_7BD8:
	SCZO = cond(Mem0[ds:0x2E45:word16] - 0x0000)
	branch Test(NE,Z) l0800_7BFC
	// succ:  l0800_7BDF l0800_7BFC
l0800_7BDF:
	si = si ^ si
	SZO = cond(si)
	C = false
	goto l0800_7BF5
	// succ:  l0800_7BF5
l0800_7BE3:
	bx = si
	si = si + 0x0001
	SZO = cond(si)
	al = Mem0[ds:bx + 0x4682:byte]
	sp = sp - 2
	Mem0[ss:sp:word16] = ax
	call fn0800_8624 (retsize: 2;)
	sp = sp + 0x0002
	SCZO = cond(sp)
	v44 = Mem0[ds:0x4E82:word16] - 0x0001
	Mem0[ds:0x4E82:word16] = v44
	SZO = cond(v44)
	// succ:  l0800_7BF5
l0800_7BF5:
	SCZO = cond(Mem0[ds:0x4E82:word16] - 0x0000)
	branch Test(NE,Z) l0800_7BE3
	// succ:  l0800_7BFC l0800_7BE3
l0800_7BFC:
	v29 = Mem0[ds:0x29F7:word16] + 0x0001
	Mem0[ds:0x29F7:word16] = v29
	SCZO = cond(v29)
	v30 = Mem0[ds:0x29F9:word16] + 0x00 + C
	Mem0[ds:0x29F9:word16] = v30
	SCZO = cond(v30)
	v31 = Mem0[ds:0x29E5:word16]
	sp = sp - 2
	Mem0[ss:sp:word16] = v31
	v32 = Mem0[ds:0x29E3:word16]
	sp = sp - 2
	Mem0[ss:sp:word16] = v32
	call fn0800_AD2F (retsize: 2;)
	sp = sp + 0x0004
	SCZO = cond(sp)
	Mem0[ss:bp - 0x0002:word16] = dx
	Mem0[ss:bp - 0x0004:word16] = ax
	// succ:  l0800_7C1A
l0800_7C1A:
	ax = Mem0[ds:0x467C:word16]
	dx = Mem0[ds:0x467A:word16]
	SCZO = cond(ax - Mem0[ds:0x4680:word16])
	branch Test(UGE,C) l0800_7C2A
	// succ:  l0800_7C27 l0800_7C2A
l0800_7C27:
	goto l0800_7A19
	// succ:  l0800_7A19
l0800_7C2A:
	branch Test(NE,Z) l0800_7C35
	// succ:  l0800_7C2C l0800_7C35
l0800_7C2C:
	SCZO = cond(dx - Mem0[ds:0x467E:word16])
	branch Test(UGE,C) l0800_7C35
	// succ:  l0800_7C32 l0800_7C35
l0800_7C32:
	goto l0800_7A19
	// succ:  l0800_7A19
l0800_7C35:
	cl = 0x10
	cl = cl - Mem0[ds:0x2E45:byte]
	SCZO = cond(cl)
	v21 = Mem0[ds:0x2E43:word16] >>u cl
	Mem0[ds:0x2E43:word16] = v21
	SCZO = cond(v21)
	SCZO = cond(Mem0[ds:0x2E45:word16] - 0x0000)
	branch Test(NE,Z) l0800_7C4D
	// succ:  l0800_7C46 l0800_7C4D
l0800_7C46:
	SCZO = cond(Mem0[ds:0x4E82:word16] - 0x0000)
	branch Test(EQ,Z) l0800_7C57
	// succ:  l0800_7C4D l0800_7C57
l0800_7C4D:
	al = Mem0[ds:0x2E43:byte]
	sp = sp - 2
	Mem0[ss:sp:word16] = ax
	call fn0800_8624 (retsize: 2;)
	sp = sp + 0x0002
	SCZO = cond(sp)
	// succ:  l0800_7C57
l0800_7C57:
	SCZO = cond(Mem0[ds:0x2E45:word16] - 0x0008)
	branch Test(UGT,CZ) l0800_7C65
	// succ:  l0800_7C5E l0800_7C65
l0800_7C5E:
	SCZO = cond(Mem0[ds:0x4E82:word16] - 0x0000)
	branch Test(EQ,Z) l0800_7C73
	// succ:  l0800_7C65 l0800_7C73
l0800_7C65:
	ax = Mem0[ds:0x2E43:word16]
	cl = 0x08
	ax = ax >>u cl
	SCZO = cond(ax)
	sp = sp - 2
	Mem0[ss:sp:word16] = ax
	call fn0800_8624 (retsize: 2;)
	sp = sp + 0x0002
	SCZO = cond(sp)
	// succ:  l0800_7C73
l0800_7C73:
	si = Mem0[ss:sp:word16]
	sp = sp + 2
	sp = bp
	bp = Mem0[ss:sp:word16]
	sp = sp + 2
	return
	// succ:  fn0800_7A02_exit
fn0800_7A02_exit:


// fn0800_7C78
// Return size: 2
define fn0800_7C78
fn0800_7C78_entry:
	// succ:  l0800_7C78
l0800_7C78:
	sp = fp
	Top = 0
	sp = sp - 2
	Mem0[ss:sp:word16] = bp
	bp = sp
	sp = sp - 0x0004
	SCZO = cond(sp)
	sp = sp - 2
	Mem0[ss:sp:word16] = si
	ax = Mem0[ds:0x4664:word16]
	dx = Mem0[ds:0x4662:word16]
	Mem0[ss:bp - 0x0002:word16] = ax
	Mem0[ss:bp - 0x0004:word16] = dx
	goto l0800_7E6D
	// succ:  l0800_7E6D
l0800_7C8F:
	call fn0800_7FDC (retsize: 2;)
	ax = ax ^ ax
	SZO = cond(ax)
	C = false
	sp = sp - 2
	Mem0[ss:sp:word16] = ax
	v13 = Mem0[ss:bp - 0x0002:word16]
	sp = sp - 2
	Mem0[ss:sp:word16] = v13
	v14 = Mem0[ss:bp - 0x0004:word16]
	sp = sp - 2
	Mem0[ss:sp:word16] = v14
	v15 = Mem0[ds:0x29E5:word16]
	sp = sp - 2
	Mem0[ss:sp:word16] = v15
	v16 = Mem0[ds:0x29E3:word16]
	sp = sp - 2
	Mem0[ss:sp:word16] = v16
	call fn0800_ACB3 (retsize: 2;)
	sp = sp + 0x000A
	SCZO = cond(sp)
	goto l0800_7DCD
	// succ:  l0800_7DCD
l0800_7CAC:
	v23 = Mem0[ds:0x29DD:word16]
	sp = sp - 2
	Mem0[ss:sp:word16] = v23
	v24 = Mem0[ds:0x29DB:word16]
	sp = sp - 2
	Mem0[ss:sp:word16] = v24
	call fn0800_3E27 (retsize: 2;)
	sp = sp + 0x0004
	SCZO = cond(sp)
	Mem0[ds:0x2E47:word16] = ax
	v25 = Mem0[ds:0x467A:word16] + ax
	Mem0[ds:0x467A:word16] = v25
	SCZO = cond(v25)
	v26 = Mem0[ds:0x467C:word16] + 0x00 + C
	Mem0[ds:0x467C:word16] = v26
	SCZO = cond(v26)
	sp = sp - 2
	Mem0[ss:sp:word16] = ax
	call fn0800_7EAF (retsize: 2;)
	sp = sp + 0x0002
	SCZO = cond(sp)
	ax = Mem0[ds:0x466A:word16]
	ax = ax | Mem0[ds:0x466C:word16]
	SZO = cond(ax)
	C = false
	branch Test(NE,Z) l0800_7CD9
	// succ:  l0800_7CD6 l0800_7CD9
l0800_7CD6:
	goto l0800_7DCD
	// succ:  l0800_7DCD
l0800_7CD9:
	v27 = Mem0[ds:0x29DD:word16]
	sp = sp - 2
	Mem0[ss:sp:word16] = v27
	v28 = Mem0[ds:0x29DB:word16]
	sp = sp - 2
	Mem0[ss:sp:word16] = v28
	call fn0800_3E27 (retsize: 2;)
	sp = sp + 0x0004
	SCZO = cond(sp)
	Mem0[ds:0x2E29:word16] = ax
	v29 = Mem0[ds:0x29DD:word16]
	sp = sp - 2
	Mem0[ss:sp:word16] = v29
	v30 = Mem0[ds:0x29DB:word16]
	sp = sp - 2
	Mem0[ss:sp:word16] = v30
	call fn0800_3E27 (retsize: 2;)
	sp = sp + 0x0004
	SCZO = cond(sp)
	Mem0[ds:0x2E2B:word16] = ax
	SCZO = cond(Mem0[ds:0x2E29:word16] - 0x0000)
	branch Test(NE,Z) l0800_7D1D
	// succ:  l0800_7D02 l0800_7D1D
l0800_7D02:
	ax = 0x0003
	sp = sp - 2
	Mem0[ss:sp:word16] = ax
	ax = 0x0006
	sp = sp - 2
	Mem0[ss:sp:word16] = ax
	call fn0800_854B (retsize: 2;)
	sp = sp + 0x0004
	SCZO = cond(sp)
	al = Mem0[ds:0x2E2B:byte]
	sp = sp - 2
	Mem0[ss:sp:word16] = ax
	call fn0800_8600 (retsize: 2;)
	sp = sp + 0x0002
	SCZO = cond(sp)
	goto l0800_7DAC
	// succ:  l0800_7DAC
l0800_7D1D:
	SCZO = cond(Mem0[ds:0x2E29:word16] - 0x0007)
	branch Test(UGE,C) l0800_7D68
	// succ:  l0800_7D24 l0800_7D68
l0800_7D24:
	bx = Mem0[ds:0x2E29:word16]
	al = Mem0[ds:bx + 0x21DB:byte]
	ah = 0x00
	sp = sp - 2
	Mem0[ss:sp:word16] = ax
	al = Mem0[ds:bx + 0x21D4:byte]
	ah = 0x00
	sp = sp - 2
	Mem0[ss:sp:word16] = ax
	call fn0800_854B (retsize: 2;)
	sp = sp + 0x0004
	SCZO = cond(sp)
	bx = Mem0[ds:0x2E2B:word16]
	cl = 0x08
	bx = bx >>u cl
	SCZO = cond(bx)
	si = bx
	al = Mem0[ds:bx + 0x21F2:byte]
	ah = 0x00
	sp = sp - 2
	Mem0[ss:sp:word16] = ax
	al = Mem0[ds:si + 0x21E2:byte]
	ah = 0x00
	sp = sp - 2
	Mem0[ss:sp:word16] = ax
	call fn0800_854B (retsize: 2;)
	sp = sp + 0x0004
	SCZO = cond(sp)
	al = Mem0[ds:0x2E2B:byte]
	al = al & 0xFF
	SZO = cond(al)
	C = false
	sp = sp - 2
	Mem0[ss:sp:word16] = ax
	call fn0800_8600 (retsize: 2;)
	sp = sp + 0x0002
	SCZO = cond(sp)
	goto l0800_7DAC
	// succ:  l0800_7DAC
l0800_7D68:
	ax = 0x0004
	sp = sp - 2
	Mem0[ss:sp:word16] = ax
	ax = 0x000F
	sp = sp - 2
	Mem0[ss:sp:word16] = ax
	call fn0800_854B (retsize: 2;)
	sp = sp + 0x0004
	SCZO = cond(sp)
	al = Mem0[ds:0x2E29:byte]
	al = al - 0x06
	SCZO = cond(al)
	sp = sp - 2
	Mem0[ss:sp:word16] = ax
	call fn0800_8600 (retsize: 2;)
	sp = sp + 0x0002
	SCZO = cond(sp)
	bx = Mem0[ds:0x2E2B:word16]
	cl = 0x08
	bx = bx >>u cl
	SCZO = cond(bx)
	si = bx
	al = Mem0[ds:bx + 0x21F2:byte]
	ah = 0x00
	sp = sp - 2
	Mem0[ss:sp:word16] = ax
	al = Mem0[ds:si + 0x21E2:byte]
	ah = 0x00
	sp = sp - 2
	Mem0[ss:sp:word16] = ax
	call fn0800_854B (retsize: 2;)
	sp = sp + 0x0004
	SCZO = cond(sp)
	al = Mem0[ds:0x2E2B:byte]
	al = al & 0xFF
	SZO = cond(al)
	C = false
	sp = sp - 2
	Mem0[ss:sp:word16] = ax
	call fn0800_8600 (retsize: 2;)
	sp = sp + 0x0002
	SCZO = cond(sp)
	// succ:  l0800_7DAC
l0800_7DAC:
	v35 = Mem0[ds:0x2E29:word16] + 0x0002
	Mem0[ds:0x2E29:word16] = v35
	SCZO = cond(v35)
	ax = Mem0[ds:0x2E29:word16]
	v36 = Mem0[ds:0x467A:word16] + ax
	Mem0[ds:0x467A:word16] = v36
	SCZO = cond(v36)
	v37 = Mem0[ds:0x467C:word16] + 0x00 + C
	Mem0[ds:0x467C:word16] = v37
	SCZO = cond(v37)
	goto l0800_7DC2
	// succ:  l0800_7DC2
l0800_7DBF:
	call fn0800_8359 (retsize: 2;)
	// succ:  l0800_7DC2
l0800_7DC2:
	ax = Mem0[ds:0x2E29:word16]
	v41 = Mem0[ds:0x2E29:word16] - 0x0001
	Mem0[ds:0x2E29:word16] = v41
	SZO = cond(v41)
	ax = ax | ax
	SZO = cond(ax)
	C = false
	branch Test(NE,Z) l0800_7DBF
	// succ:  l0800_7DCD l0800_7DBF
l0800_7DCD:
	ax = Mem0[ds:0x466A:word16]
	dx = Mem0[ds:0x466C:word16]
	v17 = Mem0[ds:0x466A:word16] - 0x0001
	Mem0[ds:0x466A:word16] = v17
	SCZO = cond(v17)
	v18 = Mem0[ds:0x466C:word16] - 0x00 - C
	Mem0[ds:0x466C:word16] = v18
	SCZO = cond(v18)
	ax = ax | dx
	SZO = cond(ax)
	C = false
	branch Test(EQ,Z) l0800_7DE5
	// succ:  l0800_7DE2 l0800_7DE5
l0800_7DE2:
	goto l0800_7CAC
	// succ:  l0800_7CAC
l0800_7DE5:
	ax = 0x0004
	sp = sp - 2
	Mem0[ss:sp:word16] = ax
	ax = 0x000F
	sp = sp - 2
	Mem0[ss:sp:word16] = ax
	call fn0800_854B (retsize: 2;)
	sp = sp + 0x0004
	SCZO = cond(sp)
	al = 0x00
	sp = sp - 2
	Mem0[ss:sp:word16] = ax
	call fn0800_8600 (retsize: 2;)
	sp = sp + 0x0002
	SCZO = cond(sp)
	ax = Mem0[ds:0x467C:word16]
	dx = Mem0[ds:0x467A:word16]
	SCZO = cond(ax - Mem0[ds:0x4680:word16])
	branch Test(UGT,CZ) l0800_7E1E
	// succ:  l0800_7E09 l0800_7E1E
l0800_7E09:
	branch Test(ULT,C) l0800_7E11
	// succ:  l0800_7E0B l0800_7E11
l0800_7E0B:
	SCZO = cond(dx - Mem0[ds:0x467E:word16])
	branch Test(UGE,C) l0800_7E1E
	// succ:  l0800_7E11 l0800_7E1E
l0800_7E11:
	ax = 0x0001
	sp = sp - 2
	Mem0[ss:sp:word16] = ax
	sp = sp - 2
	Mem0[ss:sp:word16] = ax
	call fn0800_854B (retsize: 2;)
	sp = sp + 0x0004
	SCZO = cond(sp)
	goto l0800_7E2B
	// succ:  l0800_7E2B
l0800_7E1E:
	ax = 0x0001
	sp = sp - 2
	Mem0[ss:sp:word16] = ax
	ax = ax ^ ax
	SZO = cond(ax)
	C = false
	sp = sp - 2
	Mem0[ss:sp:word16] = ax
	call fn0800_854B (retsize: 2;)
	sp = sp + 0x0004
	SCZO = cond(sp)
	// succ:  l0800_7E2B
l0800_7E2B:
	SCZO = cond(Mem0[ds:0x2E45:word16] - 0x0000)
	branch Test(NE,Z) l0800_7E4F
	// succ:  l0800_7E32 l0800_7E4F
l0800_7E32:
	si = si ^ si
	SZO = cond(si)
	C = false
	goto l0800_7E48
	// succ:  l0800_7E48
l0800_7E36:
	bx = si
	si = si + 0x0001
	SZO = cond(si)
	al = Mem0[ds:bx + 0x4682:byte]
	sp = sp - 2
	Mem0[ss:sp:word16] = ax
	call fn0800_8624 (retsize: 2;)
	sp = sp + 0x0002
	SCZO = cond(sp)
	v40 = Mem0[ds:0x4E82:word16] - 0x0001
	Mem0[ds:0x4E82:word16] = v40
	SZO = cond(v40)
	// succ:  l0800_7E48
l0800_7E48:
	SCZO = cond(Mem0[ds:0x4E82:word16] - 0x0000)
	branch Test(NE,Z) l0800_7E36
	// succ:  l0800_7E4F l0800_7E36
l0800_7E4F:
	v31 = Mem0[ds:0x29F7:word16] + 0x0001
	Mem0[ds:0x29F7:word16] = v31
	SCZO = cond(v31)
	v32 = Mem0[ds:0x29F9:word16] + 0x00 + C
	Mem0[ds:0x29F9:word16] = v32
	SCZO = cond(v32)
	v33 = Mem0[ds:0x29E5:word16]
	sp = sp - 2
	Mem0[ss:sp:word16] = v33
	v34 = Mem0[ds:0x29E3:word16]
	sp = sp - 2
	Mem0[ss:sp:word16] = v34
	call fn0800_AD2F (retsize: 2;)
	sp = sp + 0x0004
	SCZO = cond(sp)
	Mem0[ss:bp - 0x0002:word16] = dx
	Mem0[ss:bp - 0x0004:word16] = ax
	// succ:  l0800_7E6D
l0800_7E6D:
	ax = Mem0[ds:0x467C:word16]
	dx = Mem0[ds:0x467A:word16]
	SCZO = cond(ax - Mem0[ds:0x4680:word16])
	branch Test(UGE,C) l0800_7E7D
	// succ:  l0800_7E7A l0800_7E7D
l0800_7E7A:
	goto l0800_7C8F
	// succ:  l0800_7C8F
l0800_7E7D:
	branch Test(NE,Z) l0800_7E88
	// succ:  l0800_7E7F l0800_7E88
l0800_7E7F:
	SCZO = cond(dx - Mem0[ds:0x467E:word16])
	branch Test(UGE,C) l0800_7E88
	// succ:  l0800_7E85 l0800_7E88
l0800_7E85:
	goto l0800_7C8F
	// succ:  l0800_7C8F
l0800_7E88:
	cl = 0x08
	cl = cl - Mem0[ds:0x2E45:byte]
	SCZO = cond(cl)
	v20 = Mem0[ds:0x2E43:word16] << cl
	Mem0[ds:0x2E43:word16] = v20
	SCZO = cond(v20)
	SCZO = cond(Mem0[ds:0x2E45:word16] - 0x0000)
	branch Test(NE,Z) l0800_7EA0
	// succ:  l0800_7E99 l0800_7EA0
l0800_7E99:
	SCZO = cond(Mem0[ds:0x4E82:word16] - 0x0000)
	branch Test(EQ,Z) l0800_7EAA
	// succ:  l0800_7EA0 l0800_7EAA
l0800_7EA0:
	al = Mem0[ds:0x2E43:byte]
	sp = sp - 2
	Mem0[ss:sp:word16] = ax
	call fn0800_8624 (retsize: 2;)
	sp = sp + 0x0002
	SCZO = cond(sp)
	// succ:  l0800_7EAA
l0800_7EAA:
	si = Mem0[ss:sp:word16]
	sp = sp + 2
	sp = bp
	bp = Mem0[ss:sp:word16]
	sp = sp + 2
	return
	// succ:  fn0800_7C78_exit
fn0800_7C78_exit:


// fn0800_7EAF
// Return size: 2
define fn0800_7EAF
fn0800_7EAF_entry:
	// succ:  l0800_7EAF
l0800_7EAF:
	sp = fp
	Top = 0
	sp = sp - 2
	Mem0[ss:sp:word16] = bp
	bp = sp
	sp = sp - 2
	Mem0[ss:sp:word16] = si
	sp = sp - 2
	Mem0[ss:sp:word16] = di
	si = Mem0[ss:bp + 0x0004:word16]
	goto l0800_7FD1
	// succ:  l0800_7FD1
l0800_7EBA:
	SCZO = cond(si - 0x000C)
	branch Test(UGE,C) l0800_7F32
	// succ:  l0800_7EBF l0800_7F32
l0800_7EBF:
	goto l0800_7EF6
	// succ:  l0800_7EF6
l0800_7EC1:
	ax = 0x0001
	sp = sp - 2
	Mem0[ss:sp:word16] = ax
	ax = ax ^ ax
	SZO = cond(ax)
	C = false
	sp = sp - 2
	Mem0[ss:sp:word16] = ax
	call fn0800_854B (retsize: 2;)
	sp = sp + 0x0004
	SCZO = cond(sp)
	call fn0800_8359 (retsize: 2;)
	al = al ^ Mem0[ds:0x2E4F:byte]
	SZO = cond(al)
	C = false
	sp = sp - 2
	Mem0[ss:sp:word16] = ax
	call fn0800_8600 (retsize: 2;)
	sp = sp + 0x0002
	SCZO = cond(sp)
	SZO = cond(Mem0[ds:0x2E4F:word16] & 0x0001)
	C = false
	branch Test(EQ,Z) l0800_7EF1
	// succ:  l0800_7EE4 l0800_7EF1
l0800_7EE4:
	ax = Mem0[ds:0x2E4F:word16]
	ax = ax >>u 0x0001
	SCZO = cond(ax)
	ax = ax | 0x8000
	SZO = cond(ax)
	C = false
	Mem0[ds:0x2E4F:word16] = ax
	goto l0800_7EF5
	// succ:  l0800_7EF5
l0800_7EF1:
	v15 = Mem0[ds:0x2E4F:word16] >>u 0x0001
	Mem0[ds:0x2E4F:word16] = v15
	SCZO = cond(v15)
	// succ:  l0800_7EF5
l0800_7EF5:
	si = si - 0x0001
	SZO = cond(si)
	// succ:  l0800_7EF6
l0800_7EF6:
	si = si | si
	SZO = cond(si)
	C = false
	branch Test(NE,Z) l0800_7EC1
	// succ:  l0800_7EFA l0800_7EC1
l0800_7EFA:
	goto l0800_7FD1
	// succ:  l0800_7FD1
l0800_7EFD:
	ax = 0x0001
	sp = sp - 2
	Mem0[ss:sp:word16] = ax
	ax = ax ^ ax
	SZO = cond(ax)
	C = false
	sp = sp - 2
	Mem0[ss:sp:word16] = ax
	call fn0800_854B (retsize: 2;)
	sp = sp + 0x0004
	SCZO = cond(sp)
	call fn0800_8359 (retsize: 2;)
	al = al ^ Mem0[ds:0x2E4F:byte]
	SZO = cond(al)
	C = false
	sp = sp - 2
	Mem0[ss:sp:word16] = ax
	call fn0800_8600 (retsize: 2;)
	sp = sp + 0x0002
	SCZO = cond(sp)
	SZO = cond(Mem0[ds:0x2E4F:word16] & 0x0001)
	C = false
	branch Test(EQ,Z) l0800_7F2D
	// succ:  l0800_7F20 l0800_7F2D
l0800_7F20:
	ax = Mem0[ds:0x2E4F:word16]
	ax = ax >>u 0x0001
	SCZO = cond(ax)
	ax = ax | 0x8000
	SZO = cond(ax)
	C = false
	Mem0[ds:0x2E4F:word16] = ax
	goto l0800_7F31
	// succ:  l0800_7F31
l0800_7F2D:
	v16 = Mem0[ds:0x2E4F:word16] >>u 0x0001
	Mem0[ds:0x2E4F:word16] = v16
	SCZO = cond(v16)
	// succ:  l0800_7F31
l0800_7F31:
	si = si - 0x0001
	SZO = cond(si)
	// succ:  l0800_7F32
l0800_7F32:
	SZO = cond(si & 0x0003)
	C = false
	branch Test(NE,Z) l0800_7EFD
	// succ:  l0800_7F38 l0800_7EFD
l0800_7F38:
	ax = 0x0005
	sp = sp - 2
	Mem0[ss:sp:word16] = ax
	ax = 0x0017
	sp = sp - 2
	Mem0[ss:sp:word16] = ax
	call fn0800_854B (retsize: 2;)
	sp = sp + 0x0004
	SCZO = cond(sp)
	SCZO = cond(si - 0x0048)
	branch Test(ULT,C) l0800_7F8F
	// succ:  l0800_7F4B l0800_7F8F
l0800_7F4B:
	ax = 0x0004
	sp = sp - 2
	Mem0[ss:sp:word16] = ax
	ax = 0x000F
	sp = sp - 2
	Mem0[ss:sp:word16] = ax
	call fn0800_854B (retsize: 2;)
	sp = sp + 0x0004
	SCZO = cond(sp)
	di = di ^ di
	SZO = cond(di)
	C = false
	goto l0800_7F6C
	// succ:  l0800_7F6C
l0800_7F5D:
	call fn0800_8359 (retsize: 2;)
	al = al ^ Mem0[ds:0x2E4F:byte]
	SZO = cond(al)
	C = false
	sp = sp - 2
	Mem0[ss:sp:word16] = ax
	call fn0800_8600 (retsize: 2;)
	sp = sp + 0x0002
	SCZO = cond(sp)
	di = di + 0x0001
	SZO = cond(di)
	// succ:  l0800_7F6C
l0800_7F6C:
	SCZO = cond(di - 0x0048)
	branch Test(NE,Z) l0800_7F5D
	// succ:  l0800_7F71 l0800_7F5D
l0800_7F71:
	SZO = cond(Mem0[ds:0x2E4F:word16] & 0x0001)
	C = false
	branch Test(EQ,Z) l0800_7F86
	// succ:  l0800_7F79 l0800_7F86
l0800_7F79:
	ax = Mem0[ds:0x2E4F:word16]
	ax = ax >>u 0x0001
	SCZO = cond(ax)
	ax = ax | 0x8000
	SZO = cond(ax)
	C = false
	Mem0[ds:0x2E4F:word16] = ax
	goto l0800_7F8A
	// succ:  l0800_7F8A
l0800_7F86:
	v14 = Mem0[ds:0x2E4F:word16] >>u 0x0001
	Mem0[ds:0x2E4F:word16] = v14
	SCZO = cond(v14)
	// succ:  l0800_7F8A
l0800_7F8A:
	si = si - 0x0048
	SCZO = cond(si)
	goto l0800_7FD1
	// succ:  l0800_7FD1
l0800_7F8F:
	ax = 0x0004
	sp = sp - 2
	Mem0[ss:sp:word16] = ax
	ax = si
	ax = ax - 0x000C
	SCZO = cond(ax)
	ax = ax >>u 0x0001
	SCZO = cond(ax)
	ax = ax >>u 0x0001
	SCZO = cond(ax)
	sp = sp - 2
	Mem0[ss:sp:word16] = ax
	call fn0800_854B (retsize: 2;)
	sp = sp + 0x0004
	SCZO = cond(sp)
	goto l0800_7FB4
	// succ:  l0800_7FB4
l0800_7FA5:
	call fn0800_8359 (retsize: 2;)
	al = al ^ Mem0[ds:0x2E4F:byte]
	SZO = cond(al)
	C = false
	sp = sp - 2
	Mem0[ss:sp:word16] = ax
	call fn0800_8600 (retsize: 2;)
	sp = sp + 0x0002
	SCZO = cond(sp)
	si = si - 0x0001
	SZO = cond(si)
	// succ:  l0800_7FB4
l0800_7FB4:
	si = si | si
	SZO = cond(si)
	C = false
	branch Test(NE,Z) l0800_7FA5
	// succ:  l0800_7FB8 l0800_7FA5
l0800_7FB8:
	SZO = cond(Mem0[ds:0x2E4F:word16] & 0x0001)
	C = false
	branch Test(EQ,Z) l0800_7FCD
	// succ:  l0800_7FC0 l0800_7FCD
l0800_7FC0:
	ax = Mem0[ds:0x2E4F:word16]
	ax = ax >>u 0x0001
	SCZO = cond(ax)
	ax = ax | 0x8000
	SZO = cond(ax)
	C = false
	Mem0[ds:0x2E4F:word16] = ax
	goto l0800_7FD1
	// succ:  l0800_7FD1
l0800_7FCD:
	v17 = Mem0[ds:0x2E4F:word16] >>u 0x0001
	Mem0[ds:0x2E4F:word16] = v17
	SCZO = cond(v17)
	// succ:  l0800_7FD1
l0800_7FD1:
	si = si | si
	SZO = cond(si)
	C = false
	branch Test(EQ,Z) l0800_7FD8
	// succ:  l0800_7FD5 l0800_7FD8
l0800_7FD5:
	goto l0800_7EBA
	// succ:  l0800_7EBA
l0800_7FD8:
	di = Mem0[ss:sp:word16]
	sp = sp + 2
	si = Mem0[ss:sp:word16]
	sp = sp + 2
	bp = Mem0[ss:sp:word16]
	sp = sp + 2
	return
	// succ:  fn0800_7EAF_exit
fn0800_7EAF_exit:


// fn0800_7FDC
// Return size: 2
define fn0800_7FDC
fn0800_7FDC_entry:
	// succ:  l0800_7FDC
l0800_7FDC:
	sp = fp
	Top = 0
	sp = sp - 2
	Mem0[ss:sp:word16] = bp
	bp = sp
	sp = sp - 0x0004
	SCZO = cond(sp)
	Mem0[ds:0x466C:word16] = 0x0000
	Mem0[ds:0x466A:word16] = 0x0000
	Mem0[ds:0x2E47:word16] = 0x0000
	ax = Mem0[ds:0x2A0D:word16]
	dx = Mem0[ds:0x2A0B:word16]
	Mem0[ds:0x4670:word16] = ax
	Mem0[ds:0x466E:word16] = dx
	ax = ax ^ ax
	SZO = cond(ax)
	C = false
	sp = sp - 2
	Mem0[ss:sp:word16] = ax
	ax = Mem0[ds:0x4664:word16]
	dx = Mem0[ds:0x4662:word16]
	dx = dx + Mem0[ds:0x467A:word16]
	SCZO = cond(dx)
	ax = ax + Mem0[ds:0x467C:word16] + C
	SCZO = cond(ax)
	dx = dx + Mem0[ds:0x4672:word16]
	SCZO = cond(dx)
	ax = ax + Mem0[ds:0x4674:word16] + C
	SCZO = cond(ax)
	sp = sp - 2
	Mem0[ss:sp:word16] = ax
	sp = sp - 2
	Mem0[ss:sp:word16] = dx
	v11 = Mem0[ds:0x29E5:word16]
	sp = sp - 2
	Mem0[ss:sp:word16] = v11
	v12 = Mem0[ds:0x29E3:word16]
	sp = sp - 2
	Mem0[ss:sp:word16] = v12
	call fn0800_ACB3 (retsize: 2;)
	sp = sp + 0x000A
	SCZO = cond(sp)
	ax = ax ^ ax
	SZO = cond(ax)
	C = false
	sp = sp - 2
	Mem0[ss:sp:word16] = ax
	sp = sp - 2
	Mem0[ss:sp:word16] = ax
	sp = sp - 2
	Mem0[ss:sp:word16] = ax
	v13 = Mem0[ds:0x29DD:word16]
	sp = sp - 2
	Mem0[ss:sp:word16] = v13
	v14 = Mem0[ds:0x29DB:word16]
	sp = sp - 2
	Mem0[ss:sp:word16] = v14
	call fn0800_ACB3 (retsize: 2;)
	sp = sp + 0x000A
	SCZO = cond(sp)
	goto l0800_82A1
	// succ:  l0800_82A1
l0800_8042:
	ax = ax ^ ax
	SZO = cond(ax)
	C = false
	dx = 0xFFFF
	dx = dx - Mem0[ds:0x2E31:word16]
	SCZO = cond(dx)
	ax = ax - 0x0000 - C
	SCZO = cond(ax)
	dx = dx - Mem0[ds:0x4672:word16]
	SCZO = cond(dx)
	ax = ax - Mem0[ds:0x4674:word16] - C
	SCZO = cond(ax)
	Mem0[ss:bp - 0x0002:word16] = ax
	Mem0[ss:bp - 0x0004:word16] = dx
	ax = Mem0[ds:0x4678:word16]
	dx = Mem0[ds:0x4676:word16]
	SCZO = cond(ax - Mem0[ss:bp - 0x0002:word16])
	branch Test(UGT,CZ) l0800_807C
	// succ:  l0800_8068 l0800_807C
l0800_8068:
	branch Test(ULT,C) l0800_806F
	// succ:  l0800_806A l0800_806F
l0800_806A:
	SCZO = cond(dx - Mem0[ss:bp - 0x0004:word16])
	branch Test(UGE,C) l0800_807C
	// succ:  l0800_806F l0800_807C
l0800_806F:
	ax = Mem0[ds:0x4678:word16]
	dx = Mem0[ds:0x4676:word16]
	Mem0[ss:bp - 0x0002:word16] = ax
	Mem0[ss:bp - 0x0004:word16] = dx
	// succ:  l0800_807C
l0800_807C:
	ax = Mem0[ds:0x2E73:word16]
	dx = Mem0[ds:0x2E71:word16]
	dx = dx + Mem0[ds:0x2E31:word16]
	SCZO = cond(dx)
	Mem0[ds:0x2E6F:word16] = ax
	Mem0[ds:0x2E6D:word16] = dx
	v22 = Mem0[ds:0x29E5:word16]
	sp = sp - 2
	Mem0[ss:sp:word16] = v22
	v23 = Mem0[ds:0x29E3:word16]
	sp = sp - 2
	Mem0[ss:sp:word16] = v23
	v24 = Mem0[ss:bp - 0x0002:word16]
	sp = sp - 2
	Mem0[ss:sp:word16] = v24
	v25 = Mem0[ss:bp - 0x0004:word16]
	sp = sp - 2
	Mem0[ss:sp:word16] = v25
	ax = Mem0[ds:0x2E6D:word16]
	ax = ax + Mem0[ds:0x4672:word16]
	SCZO = cond(ax)
	v26 = Mem0[ds:0x2E73:word16]
	sp = sp - 2
	Mem0[ss:sp:word16] = v26
	sp = sp - 2
	Mem0[ss:sp:word16] = ax
	call fn0800_4110 (retsize: 2;)
	sp = sp + 0x000C
	SCZO = cond(sp)
	ax = Mem0[ss:bp - 0x0002:word16]
	dx = Mem0[ss:bp - 0x0004:word16]
	v27 = Mem0[ds:0x4676:word16] - dx
	Mem0[ds:0x4676:word16] = v27
	SCZO = cond(v27)
	v28 = Mem0[ds:0x4678:word16] - ax - C
	Mem0[ds:0x4678:word16] = v28
	SCZO = cond(v28)
	v29 = Mem0[ds:0x4672:word16] + dx
	Mem0[ds:0x4672:word16] = v29
	SCZO = cond(v29)
	v30 = Mem0[ds:0x4674:word16] + ax + C
	Mem0[ds:0x4674:word16] = v30
	SCZO = cond(v30)
	ax = Mem0[ds:0x2E6F:word16]
	dx = Mem0[ds:0x2E6D:word16]
	dx = dx + Mem0[ds:0x4672:word16]
	SCZO = cond(dx)
	Mem0[ds:0x2E67:word16] = ax
	Mem0[ds:0x2E65:word16] = dx
	Mem0[ds:0x2E6B:word16] = ax
	Mem0[ds:0x2E69:word16] = dx
	ax = Mem0[ds:0x4670:word16]
	dx = Mem0[ds:0x466E:word16]
	SCZO = cond(ax - Mem0[ds:0x4674:word16])
	branch Test(ULE,CZ) l0800_80ED
	// succ:  l0800_80EA l0800_80ED
l0800_80EA:
	goto l0800_81E9
	// succ:  l0800_81E9
l0800_80ED:
	branch Test(ULT,C) l0800_80F8
	// succ:  l0800_80EF l0800_80F8
l0800_80EF:
	SCZO = cond(dx - Mem0[ds:0x4672:word16])
	branch Test(ULT,C) l0800_80F8
	// succ:  l0800_80F5 l0800_80F8
l0800_80F5:
	goto l0800_81E9
	// succ:  l0800_81E9
l0800_80F8:
	ax = Mem0[ds:0x2E6F:word16]
	dx = Mem0[ds:0x2E6D:word16]
	dx = dx + Mem0[ds:0x466E:word16]
	SCZO = cond(dx)
	Mem0[ds:0x2E67:word16] = ax
	Mem0[ds:0x2E65:word16] = dx
	goto l0800_81E9
	// succ:  l0800_81E9
l0800_810D:
	call fn0800_8832 (retsize: 2;)
	SCZO = cond(Mem0[ds:0x2E29:word16] - 0x0002)
	branch Test(ULT,C) l0800_8193
	// succ:  l0800_8117 l0800_8193
l0800_8117:
	ax = Mem0[ds:0x2E6D:word16]
	ax = ax + Mem0[ds:0x2E29:word16]
	SCZO = cond(ax)
	SCZO = cond(ax - Mem0[ds:0x2E65:word16])
	branch Test(ULE,CZ) l0800_813F
	// succ:  l0800_8124 l0800_813F
l0800_8124:
	ax = Mem0[ds:0x466A:word16]
	ax = ax | Mem0[ds:0x466C:word16]
	SZO = cond(ax)
	C = false
	branch Test(EQ,Z) l0800_8130
	// succ:  l0800_812D l0800_8130
l0800_812D:
	goto l0800_8209
	// succ:  l0800_8209
l0800_8130:
	ax = Mem0[ds:0x2E65:word16]
	dx = dx ^ dx
	SZO = cond(dx)
	C = false
	ax = ax - Mem0[ds:0x2E6D:word16]
	SCZO = cond(ax)
	dx = dx - 0x00 - C
	SCZO = cond(dx)
	Mem0[ds:0x2E29:word16] = ax
	// succ:  l0800_813F
l0800_813F:
	sp = sp - 2
	Mem0[ss:sp:word16] = ds
	ax = 0x290F
	sp = sp - 2
	Mem0[ss:sp:word16] = ax
	v38 = Mem0[ds:0x2E47:word16]
	sp = sp - 2
	Mem0[ss:sp:word16] = v38
	call fn0800_831D (retsize: 2;)
	sp = sp + 0x0006
	SCZO = cond(sp)
	sp = sp - 2
	Mem0[ss:sp:word16] = ds
	ax = 0x278F
	sp = sp - 2
	Mem0[ss:sp:word16] = ax
	ax = Mem0[ds:0x2E29:word16]
	ax = ax - 0x0002
	SCZO = cond(ax)
	sp = sp - 2
	Mem0[ss:sp:word16] = ax
	call fn0800_831D (retsize: 2;)
	sp = sp + 0x0006
	SCZO = cond(sp)
	sp = sp - 2
	Mem0[ss:sp:word16] = ds
	ax = 0x284F
	sp = sp - 2
	Mem0[ss:sp:word16] = ax
	ax = Mem0[ds:0x2E2B:word16]
	ax = ax - 0x0001
	SZO = cond(ax)
	sp = sp - 2
	Mem0[ss:sp:word16] = ax
	call fn0800_831D (retsize: 2;)
	sp = sp + 0x0006
	SCZO = cond(sp)
	v39 = Mem0[ds:0x2E29:word16]
	sp = sp - 2
	Mem0[ss:sp:word16] = v39
	call fn0800_89A8 (retsize: 2;)
	sp = sp + 0x0002
	SCZO = cond(sp)
	v40 = Mem0[ds:0x466A:word16] + 0x0001
	Mem0[ds:0x466A:word16] = v40
	SCZO = cond(v40)
	v41 = Mem0[ds:0x466C:word16] + 0x00 + C
	Mem0[ds:0x466C:word16] = v41
	SCZO = cond(v41)
	Mem0[ds:0x2E47:word16] = 0x0000
	ax = Mem0[ds:0x2E29:word16]
	v42 = Mem0[ds:0x465C:word16] + ax
	Mem0[ds:0x465C:word16] = v42
	SCZO = cond(v42)
	goto l0800_81A5
	// succ:  l0800_81A5
l0800_8193:
	ax = 0x0001
	sp = sp - 2
	Mem0[ss:sp:word16] = ax
	call fn0800_89A8 (retsize: 2;)
	sp = sp + 0x0002
	SCZO = cond(sp)
	v43 = Mem0[ds:0x2E47:word16] + 0x0001
	Mem0[ds:0x2E47:word16] = v43
	SZO = cond(v43)
	v44 = Mem0[ds:0x465C:word16] + 0x0001
	Mem0[ds:0x465C:word16] = v44
	SZO = cond(v44)
	// succ:  l0800_81A5
l0800_81A5:
	SCZO = cond(Mem0[ds:0x465C:word16] - 0x0400)
	branch Test(ULT,C) l0800_81E9
	// succ:  l0800_81AD l0800_81E9
l0800_81AD:
	ax = Mem0[ds:0x465C:word16]
	v45 = Mem0[ds:0x4666:word16] + ax
	Mem0[ds:0x4666:word16] = v45
	SCZO = cond(v45)
	v46 = Mem0[ds:0x4668:word16] + 0x00 + C
	Mem0[ds:0x4668:word16] = v46
	SCZO = cond(v46)
	v47 = Mem0[ds:0x4680:word16]
	sp = sp - 2
	Mem0[ss:sp:word16] = v47
	v48 = Mem0[ds:0x467E:word16]
	sp = sp - 2
	Mem0[ss:sp:word16] = v48
	cx = Mem0[ds:0x4668:word16]
	bx = Mem0[ds:0x4666:word16]
	dx = dx ^ dx
	SZO = cond(dx)
	C = false
	ax = 0x0063
	call fn0800_8F18 (retsize: 2;)
	sp = sp - 2
	Mem0[ss:sp:word16] = dx
	sp = sp - 2
	Mem0[ss:sp:word16] = ax
	call fn0800_8BC2 (retsize: 2;)
	sp = sp + 0x0008
	sp = sp - 2
	Mem0[ss:sp:word16] = dx
	sp = sp - 2
	Mem0[ss:sp:word16] = ax
	sp = sp - 2
	Mem0[ss:sp:word16] = ds
	ax = 0x2244
	sp = sp - 2
	Mem0[ss:sp:word16] = ax
	call fn0800_B2EF (retsize: 2;)
	sp = sp + 0x0008
	SCZO = cond(sp)
	Mem0[ds:0x465C:word16] = 0x0000
	// succ:  l0800_81E9
l0800_81E9:
	ax = Mem0[ds:0x2E65:word16]
	ax = ax - 0x0001
	SZO = cond(ax)
	SCZO = cond(ax - Mem0[ds:0x2E6D:word16])
	branch Test(ULE,CZ) l0800_8209
	// succ:  l0800_81F3 l0800_8209
l0800_81F3:
	SCZO = cond(Mem0[ds:0x466C:word16] - 0x0000)
	branch Test(UGE,C) l0800_81FD
	// succ:  l0800_81FA l0800_81FD
l0800_81FA:
	goto l0800_810D
	// succ:  l0800_810D
l0800_81FD:
	branch Test(NE,Z) l0800_8209
	// succ:  l0800_81FF l0800_8209
l0800_81FF:
	SCZO = cond(Mem0[ds:0x466A:word16] - 0xFFFE)
	branch Test(UGE,C) l0800_8209
	// succ:  l0800_8206 l0800_8209
l0800_8206:
	goto l0800_810D
	// succ:  l0800_810D
l0800_8209:
	ax = Mem0[ds:0x2E69:word16]
	dx = dx ^ dx
	SZO = cond(dx)
	C = false
	ax = ax - Mem0[ds:0x2E6D:word16]
	SCZO = cond(ax)
	dx = dx - 0x00 - C
	SCZO = cond(dx)
	Mem0[ds:0x4674:word16] = dx
	Mem0[ds:0x4672:word16] = ax
	ax = Mem0[ds:0x2E6D:word16]
	dx = dx ^ dx
	SZO = cond(dx)
	C = false
	ax = ax - Mem0[ds:0x2E71:word16]
	SCZO = cond(ax)
	dx = dx - 0x00 - C
	SCZO = cond(dx)
	ax = ax - Mem0[ds:0x2E31:word16]
	SCZO = cond(ax)
	dx = dx - 0x00 - C
	SCZO = cond(dx)
	Mem0[ss:bp - 0x0002:word16] = dx
	Mem0[ss:bp - 0x0004:word16] = ax
	ax = Mem0[ds:0x2E71:word16]
	ax = ax + Mem0[ss:bp - 0x0004:word16]
	SCZO = cond(ax)
	cx = ax
	dx = Mem0[ds:0x2E6D:word16]
	bx = bx ^ bx
	SZO = cond(bx)
	C = false
	dx = dx - ax
	SCZO = cond(dx)
	bx = bx - 0x00 - C
	SCZO = cond(bx)
	dx = dx + Mem0[ds:0x4672:word16]
	SCZO = cond(dx)
	sp = sp - 2
	Mem0[ss:sp:word16] = dx
	v33 = Mem0[ds:0x2E73:word16]
	sp = sp - 2
	Mem0[ss:sp:word16] = v33
	sp = sp - 2
	Mem0[ss:sp:word16] = ax
	v34 = Mem0[ds:0x2E73:word16]
	sp = sp - 2
	Mem0[ss:sp:word16] = v34
	v35 = Mem0[ds:0x2E71:word16]
	sp = sp - 2
	Mem0[ss:sp:word16] = v35
	call fn0800_B0F3 (retsize: 2;)
	sp = sp + 0x000A
	SCZO = cond(sp)
	ax = Mem0[ds:0x2E65:word16]
	SCZO = cond(ax - Mem0[ds:0x2E69:word16])
	branch Test(ULT,C) l0800_82B9
	// succ:  l0800_8269 l0800_82B9
l0800_8269:
	ax = Mem0[ds:0x2E67:word16]
	dx = Mem0[ds:0x2E65:word16]
	SCZO = cond(ax - Mem0[ds:0x2E6B:word16])
	branch Test(NE,Z) l0800_8285
	// succ:  l0800_8276 l0800_8285
l0800_8276:
	SCZO = cond(dx - Mem0[ds:0x2E69:word16])
	branch Test(NE,Z) l0800_8285
	// succ:  l0800_827C l0800_8285
l0800_827C:
	ax = Mem0[ds:0x4676:word16]
	ax = ax | Mem0[ds:0x4678:word16]
	SZO = cond(ax)
	C = false
	branch Test(EQ,Z) l0800_82B9
	// succ:  l0800_8285 l0800_82B9
l0800_8285:
	SCZO = cond(Mem0[ds:0x466C:word16] - 0x0000)
	branch Test(NE,Z) l0800_8293
	// succ:  l0800_828C l0800_8293
l0800_828C:
	SCZO = cond(Mem0[ds:0x466A:word16] - 0xFFFE)
	branch Test(EQ,Z) l0800_82B9
	// succ:  l0800_8293 l0800_82B9
l0800_8293:
	ax = Mem0[ss:bp - 0x0002:word16]
	dx = Mem0[ss:bp - 0x0004:word16]
	v36 = Mem0[ds:0x466E:word16] - dx
	Mem0[ds:0x466E:word16] = v36
	SCZO = cond(v36)
	v37 = Mem0[ds:0x4670:word16] - ax - C
	Mem0[ds:0x4670:word16] = v37
	SCZO = cond(v37)
	// succ:  l0800_82A1
l0800_82A1:
	ax = Mem0[ds:0x4676:word16]
	ax = ax | Mem0[ds:0x4678:word16]
	SZO = cond(ax)
	C = false
	branch Test(EQ,Z) l0800_82AD
	// succ:  l0800_82AA l0800_82AD
l0800_82AA:
	goto l0800_8042
	// succ:  l0800_8042
l0800_82AD:
	ax = Mem0[ds:0x4672:word16]
	ax = ax | Mem0[ds:0x4674:word16]
	SZO = cond(ax)
	C = false
	branch Test(EQ,Z) l0800_82B9
	// succ:  l0800_82B6 l0800_82B9
l0800_82B6:
	goto l0800_8042
	// succ:  l0800_8042
l0800_82B9:
	ax = Mem0[ds:0x2E67:word16]
	dx = Mem0[ds:0x2E65:word16]
	SCZO = cond(ax - Mem0[ds:0x2E6B:word16])
	branch Test(NE,Z) l0800_82ED
	// succ:  l0800_82C6 l0800_82ED
l0800_82C6:
	SCZO = cond(dx - Mem0[ds:0x2E69:word16])
	branch Test(NE,Z) l0800_82ED
	// succ:  l0800_82CC l0800_82ED
l0800_82CC:
	ax = Mem0[ds:0x4676:word16]
	ax = ax | Mem0[ds:0x4678:word16]
	SZO = cond(ax)
	C = false
	branch Test(NE,Z) l0800_82ED
	// succ:  l0800_82D5 l0800_82ED
l0800_82D5:
	SCZO = cond(Mem0[ds:0x466C:word16] - 0x0000)
	branch Test(NE,Z) l0800_82E3
	// succ:  l0800_82DC l0800_82E3
l0800_82DC:
	SCZO = cond(Mem0[ds:0x466A:word16] - 0xFFFE)
	branch Test(EQ,Z) l0800_82ED
	// succ:  l0800_82E3 l0800_82ED
l0800_82E3:
	ax = Mem0[ds:0x2E47:word16]
	ax = ax + Mem0[ds:0x4672:word16]
	SCZO = cond(ax)
	Mem0[ds:0x2E47:word16] = ax
	// succ:  l0800_82ED
l0800_82ED:
	sp = sp - 2
	Mem0[ss:sp:word16] = ds
	ax = 0x290F
	sp = sp - 2
	Mem0[ss:sp:word16] = ax
	v17 = Mem0[ds:0x2E47:word16]
	sp = sp - 2
	Mem0[ss:sp:word16] = v17
	call fn0800_831D (retsize: 2;)
	sp = sp + 0x0006
	SCZO = cond(sp)
	v18 = Mem0[ds:0x466A:word16] + 0x0001
	Mem0[ds:0x466A:word16] = v18
	SCZO = cond(v18)
	v19 = Mem0[ds:0x466C:word16] + 0x00 + C
	Mem0[ds:0x466C:word16] = v19
	SCZO = cond(v19)
	ax = ax ^ ax
	SZO = cond(ax)
	C = false
	sp = sp - 2
	Mem0[ss:sp:word16] = ax
	sp = sp - 2
	Mem0[ss:sp:word16] = ax
	sp = sp - 2
	Mem0[ss:sp:word16] = ax
	v20 = Mem0[ds:0x29DD:word16]
	sp = sp - 2
	Mem0[ss:sp:word16] = v20
	v21 = Mem0[ds:0x29DB:word16]
	sp = sp - 2
	Mem0[ss:sp:word16] = v21
	call fn0800_ACB3 (retsize: 2;)
	sp = sp + 0x000A
	SCZO = cond(sp)
	sp = bp
	bp = Mem0[ss:sp:word16]
	sp = sp + 2
	return
	// succ:  fn0800_7FDC_exit
fn0800_7FDC_exit:


// fn0800_831D
// Return size: 2
define fn0800_831D
fn0800_831D_entry:
	// succ:  l0800_831D
l0800_831D:
	sp = fp
	Top = 0
	sp = sp - 2
	Mem0[ss:sp:word16] = bp
	bp = sp
	sp = sp - 2
	Mem0[ss:sp:word16] = si
	si = Mem0[ss:bp + 0x0004:word16]
	SCZO = cond(si - 0x0001)
	branch Test(ULE,CZ) l0800_8332
	// succ:  l0800_8329 l0800_8332
l0800_8329:
	sp = sp - 2
	Mem0[ss:sp:word16] = si
	call fn0800_0C08 (retsize: 2;)
	sp = sp + 0x0002
	SCZO = cond(sp)
	goto l0800_8334
	// succ:  l0800_8334
l0800_8332:
	ax = si
	// succ:  l0800_8334
l0800_8334:
	dx = 0x000C
	dx_ax = dx *s ax
	SCZO = cond(dx_ax)
	es_bx = Mem0[ss:bp + 0x0006:segptr32]
	bx = bx + ax
	SCZO = cond(bx)
	v14 = Mem0[es:bx:word16] + 0x0001
	Mem0[es:bx:word16] = v14
	SCZO = cond(v14)
	v16 = Mem0[es:bx + 0x0002:word16] + 0x00 + C
	Mem0[es:bx + 0x0002:word16] = v16
	SCZO = cond(v16)
	v18 = Mem0[ds:0x29DD:word16]
	sp = sp - 2
	Mem0[ss:sp:word16] = v18
	v19 = Mem0[ds:0x29DB:word16]
	sp = sp - 2
	Mem0[ss:sp:word16] = v19
	sp = sp - 2
	Mem0[ss:sp:word16] = si
	call fn0800_401E (retsize: 2;)
	sp = sp + 0x0006
	SCZO = cond(sp)
	si = Mem0[ss:sp:word16]
	sp = sp + 2
	bp = Mem0[ss:sp:word16]
	sp = sp + 2
	return
	// succ:  fn0800_831D_exit
fn0800_831D_exit:


// fn0800_8359
// Return size: 2
define fn0800_8359
fn0800_8359_entry:
	// succ:  l0800_8359
l0800_8359:
	sp = fp
	Top = 0
	sp = sp - 2
	Mem0[ss:sp:word16] = bp
	bp = sp
	sp = sp - 0x0002
	SCZO = cond(sp)
	v7 = Mem0[ds:0x29E5:word16]
	sp = sp - 2
	Mem0[ss:sp:word16] = v7
	v8 = Mem0[ds:0x29E3:word16]
	sp = sp - 2
	Mem0[ss:sp:word16] = v8
	call fn0800_3DCF (retsize: 2;)
	sp = sp + 0x0004
	SCZO = cond(sp)
	Mem0[ss:bp - 0x0001:byte] = al
	al = Mem0[ds:0x2E4B:byte]
	al = al ^ Mem0[ss:bp - 0x0001:byte]
	SZO = cond(al)
	C = false
	ah = 0x00
	ax = ax & 0x00FF
	SZO = cond(ax)
	C = false
	ax = ax << 0x0001
	SCZO = cond(ax)
	bx = ax
	ax = Mem0[ds:bx + 0x2A29:word16]
	dx = Mem0[ds:0x2E4B:word16]
	cl = 0x08
	dx = dx >>u cl
	SCZO = cond(dx)
	ax = ax ^ dx
	SZO = cond(ax)
	C = false
	Mem0[ds:0x2E4B:word16] = ax
	v17 = Mem0[ds:0x29FF:word16] + 0x0001
	Mem0[ds:0x29FF:word16] = v17
	SCZO = cond(v17)
	v18 = Mem0[ds:0x2A01:word16] + 0x00 + C
	Mem0[ds:0x2A01:word16] = v18
	SCZO = cond(v18)
	al = Mem0[ss:bp - 0x0001:byte]
	sp = bp
	bp = Mem0[ss:sp:word16]
	sp = sp + 2
	return
	// succ:  fn0800_8359_exit
fn0800_8359_exit:


// fn0800_83A1
// Return size: 2
define fn0800_83A1
fn0800_83A1_entry:
	// succ:  l0800_83A1
l0800_83A1:
	sp = fp
	Top = 0
	sp = sp - 2
	Mem0[ss:sp:word16] = bp
	bp = sp
	sp = sp - 0x0002
	SCZO = cond(sp)
	sp = sp - 2
	Mem0[ss:sp:word16] = si
	sp = sp - 2
	Mem0[ss:sp:word16] = di
	di = Mem0[ss:bp + 0x0008:word16]
	si = di
	goto l0800_83C4
	// succ:  l0800_83C4
l0800_83B0:
	ax = si
	dx = 0x000C
	dx_ax = dx *s ax
	SCZO = cond(dx_ax)
	es_bx = Mem0[ss:bp + 0x0004:segptr32]
	bx = bx + ax
	SCZO = cond(bx)
	SCZO = cond(Mem0[es:bx + 0x000A:word16] - 0x0000)
	branch Test(NE,Z) l0800_83CB
	// succ:  l0800_83C3 l0800_83CB
l0800_83C3:
	di = di - 0x0001
	SZO = cond(di)
	// succ:  l0800_83C4
l0800_83C4:
	ax = si
	si = si - 0x0001
	SZO = cond(si)
	ax = ax | ax
	SZO = cond(ax)
	C = false
	branch Test(NE,Z) l0800_83B0
	// succ:  l0800_83CB l0800_83B0
l0800_83CB:
	ax = 0x0005
	sp = sp - 2
	Mem0[ss:sp:word16] = ax
	sp = sp - 2
	Mem0[ss:sp:word16] = di
	call fn0800_8489 (retsize: 2;)
	sp = sp + 0x0004
	SCZO = cond(sp)
	si = si ^ si
	SZO = cond(si)
	C = false
	ax = Mem0[ss:bp + 0x0004:word16]
	ax = ax + 0x000A
	SCZO = cond(ax)
	Mem0[ss:bp - 0x0002:word16] = ax
	SCZO = cond(si - di)
	branch Test(UGE,C) l0800_8401
	// succ:  l0800_83E5 l0800_8401
l0800_83E5:
	ax = 0x0004
	sp = sp - 2
	Mem0[ss:sp:word16] = ax
	es = Mem0[ss:bp + 0x0006:selector]
	bx = Mem0[ss:bp - 0x0002:word16]
	v14 = Mem0[es:bx:word16]
	sp = sp - 2
	Mem0[ss:sp:word16] = v14
	call fn0800_8489 (retsize: 2;)
	sp = sp + 0x0004
	SCZO = cond(sp)
	v15 = Mem0[ss:bp - 0x0002:word16] + 0x000C
	Mem0[ss:bp - 0x0002:word16] = v15
	SCZO = cond(v15)
	si = si + 0x0001
	SZO = cond(si)
	SCZO = cond(si - di)
	branch Test(ULT,C) l0800_83E5
	// succ:  l0800_8401 l0800_83E5
l0800_8401:
	di = Mem0[ss:sp:word16]
	sp = sp + 2
	si = Mem0[ss:sp:word16]
	sp = sp + 2
	sp = bp
	bp = Mem0[ss:sp:word16]
	sp = sp + 2
	return
	// succ:  fn0800_83A1_exit
fn0800_83A1_exit:


// fn0800_8407
// Return size: 2
define fn0800_8407
fn0800_8407_entry:
	// succ:  l0800_8407
l0800_8407:
	sp = fp
	Top = 0
	sp = sp - 2
	Mem0[ss:sp:word16] = bp
	bp = sp
	sp = sp - 0x0002
	SCZO = cond(sp)
	sp = sp - 2
	Mem0[ss:sp:word16] = si
	sp = sp - 2
	Mem0[ss:sp:word16] = di
	si = Mem0[ss:bp + 0x0004:word16]
	SCZO = cond(si - 0x0001)
	branch Test(ULE,CZ) l0800_8420
	// succ:  l0800_8417 l0800_8420
l0800_8417:
	sp = sp - 2
	Mem0[ss:sp:word16] = si
	call fn0800_0C08 (retsize: 2;)
	sp = sp + 0x0002
	SCZO = cond(sp)
	goto l0800_8422
	// succ:  l0800_8422
l0800_8420:
	ax = si
	// succ:  l0800_8422
l0800_8422:
	Mem0[ss:bp - 0x0002:word16] = ax
	dx = 0x000C
	dx_ax = dx *s ax
	SCZO = cond(dx_ax)
	es_bx = Mem0[ss:bp + 0x0006:segptr32]
	bx = bx + ax
	SCZO = cond(bx)
	di = bx
	v15 = Mem0[es:bx + 0x000A:word16]
	sp = sp - 2
	Mem0[ss:sp:word16] = v15
	v16 = Mem0[es:di + 0x0006:word16]
	sp = sp - 2
	Mem0[ss:sp:word16] = v16
	call fn0800_8489 (retsize: 2;)
	sp = sp + 0x0004
	SCZO = cond(sp)
	SCZO = cond(Mem0[ss:bp - 0x0002:word16] - 0x0001)
	branch Test(ULE,CZ) l0800_845F
	// succ:  l0800_8445 l0800_845F
l0800_8445:
	ax = Mem0[ss:bp - 0x0002:word16]
	ax = ax - 0x0001
	SZO = cond(ax)
	sp = sp - 2
	Mem0[ss:sp:word16] = ax
	cl = Mem0[ss:bp - 0x0002:byte]
	cl = cl - 0x01
	SZO = cond(cl)
	ax = 0x0001
	ax = ax << cl
	SCZO = cond(ax)
	dx = si
	dx = dx - ax
	SCZO = cond(dx)
	sp = sp - 2
	Mem0[ss:sp:word16] = dx
	call fn0800_8489 (retsize: 2;)
	sp = sp + 0x0004
	SCZO = cond(sp)
	// succ:  l0800_845F
l0800_845F:
	di = Mem0[ss:sp:word16]
	sp = sp + 2
	si = Mem0[ss:sp:word16]
	sp = sp + 2
	sp = bp
	bp = Mem0[ss:sp:word16]
	sp = sp + 2
	return
	// succ:  fn0800_8407_exit
fn0800_8407_exit:


// fn0800_8465
// Return size: 2
define fn0800_8465
fn0800_8465_entry:
	// succ:  l0800_8465
l0800_8465:
	sp = fp
	Top = 0
	sp = sp - 2
	Mem0[ss:sp:word16] = bp
	bp = sp
	ax = Mem0[ss:bp + 0x0004:word16]
	dx = Mem0[ss:bp + 0x0006:word16]
	SCZO = cond(Mem0[ds:0x2A21:word16] - 0x0002)
	branch Test(NE,Z) l0800_847F
	// succ:  l0800_8475 l0800_847F
l0800_8475:
	sp = sp - 2
	Mem0[ss:sp:word16] = dx
	sp = sp - 2
	Mem0[ss:sp:word16] = ax
	call fn0800_854B (retsize: 2;)
	sp = sp + 0x0004
	SCZO = cond(sp)
	bp = Mem0[ss:sp:word16]
	sp = sp + 2
	return
	// succ:  fn0800_8465_exit
l0800_847F:
	sp = sp - 2
	Mem0[ss:sp:word16] = dx
	sp = sp - 2
	Mem0[ss:sp:word16] = ax
	call fn0800_8489 (retsize: 2;)
	sp = sp + 0x0004
	SCZO = cond(sp)
	bp = Mem0[ss:sp:word16]
	sp = sp + 2
	return
	// succ:  fn0800_8465_exit
fn0800_8465_exit:


// fn0800_8489
// Return size: 2
define fn0800_8489
fn0800_8489_entry:
	// succ:  l0800_8489
l0800_8489:
	sp = fp
	Top = 0
	sp = sp - 2
	Mem0[ss:sp:word16] = bp
	bp = sp
	sp = sp - 2
	Mem0[ss:sp:word16] = si
	sp = sp - 2
	Mem0[ss:sp:word16] = di
	di = Mem0[ss:bp + 0x0004:word16]
	goto l0800_853A
	// succ:  l0800_853A
l0800_8494:
	v13 = Mem0[ds:0x2E43:word16] >>u 0x0001
	Mem0[ds:0x2E43:word16] = v13
	SCZO = cond(v13)
	SZO = cond(di & 0x0001)
	C = false
	branch Test(EQ,Z) l0800_84A4
	// succ:  l0800_849E l0800_84A4
l0800_849E:
	v15 = Mem0[ds:0x2E43:word16] | 0x8000
	Mem0[ds:0x2E43:word16] = v15
	SZO = cond(Mem0[ds:0x2E43:word16])
	C = false
	// succ:  l0800_84A4
l0800_84A4:
	di = di >>u 0x0001
	SCZO = cond(di)
	v16 = Mem0[ds:0x2E45:word16] + 0x0001
	Mem0[ds:0x2E45:word16] = v16
	SZO = cond(v16)
	ax = Mem0[ds:0x2E45:word16]
	SCZO = cond(ax - 0x0010)
	branch Test(EQ,Z) l0800_84B5
	// succ:  l0800_84B2 l0800_84B5
l0800_84B2:
	goto l0800_853A
	// succ:  l0800_853A
l0800_84B5:
	al = Mem0[ds:0x2E43:byte]
	sp = sp - 2
	Mem0[ss:sp:word16] = ax
	call fn0800_8624 (retsize: 2;)
	sp = sp + 0x0002
	SCZO = cond(sp)
	ax = Mem0[ds:0x2E43:word16]
	cl = 0x08
	ax = ax >>u cl
	SCZO = cond(ax)
	sp = sp - 2
	Mem0[ss:sp:word16] = ax
	call fn0800_8624 (retsize: 2;)
	sp = sp + 0x0002
	SCZO = cond(sp)
	si = si ^ si
	SZO = cond(si)
	C = false
	goto l0800_84E3
	// succ:  l0800_84E3
l0800_84D1:
	bx = si
	si = si + 0x0001
	SZO = cond(si)
	al = Mem0[ds:bx + 0x4682:byte]
	sp = sp - 2
	Mem0[ss:sp:word16] = ax
	call fn0800_8624 (retsize: 2;)
	sp = sp + 0x0002
	SCZO = cond(sp)
	v22 = Mem0[ds:0x4E82:word16] - 0x0001
	Mem0[ds:0x4E82:word16] = v22
	SZO = cond(v22)
	// succ:  l0800_84E3
l0800_84E3:
	SCZO = cond(Mem0[ds:0x4E82:word16] - 0x0000)
	branch Test(NE,Z) l0800_84D1
	// succ:  l0800_84EA l0800_84D1
l0800_84EA:
	ax = Mem0[ds:0x2A01:word16]
	dx = Mem0[ds:0x29FF:word16]
	SCZO = cond(ax - Mem0[ds:0x2A05:word16])
	branch Test(ULT,C) l0800_8532
	// succ:  l0800_84F7 l0800_8532
l0800_84F7:
	branch Test(UGT,CZ) l0800_84FF
	// succ:  l0800_84F9 l0800_84FF
l0800_84F9:
	SCZO = cond(dx - Mem0[ds:0x2A03:word16])
	branch Test(ULE,CZ) l0800_8532
	// succ:  l0800_84FF l0800_8532
l0800_84FF:
	ax = Mem0[ds:0x2A01:word16]
	dx = Mem0[ds:0x29FF:word16]
	dx = dx - Mem0[ds:0x2A03:word16]
	SCZO = cond(dx)
	ax = ax - Mem0[ds:0x2A05:word16] - C
	SCZO = cond(ax)
	SCZO = cond(ax - Mem0[ds:0x4E8A:word16])
	branch Test(ULT,C) l0800_8532
	// succ:  l0800_8514 l0800_8532
l0800_8514:
	branch Test(UGT,CZ) l0800_851C
	// succ:  l0800_8516 l0800_851C
l0800_8516:
	SCZO = cond(dx - Mem0[ds:0x4E88:word16])
	branch Test(ULE,CZ) l0800_8532
	// succ:  l0800_851C l0800_8532
l0800_851C:
	ax = Mem0[ds:0x2A01:word16]
	dx = Mem0[ds:0x29FF:word16]
	dx = dx - Mem0[ds:0x2A03:word16]
	SCZO = cond(dx)
	ax = ax - Mem0[ds:0x2A05:word16] - C
	SCZO = cond(ax)
	Mem0[ds:0x4E8A:word16] = ax
	Mem0[ds:0x4E88:word16] = dx
	// succ:  l0800_8532
l0800_8532:
	ax = ax ^ ax
	SZO = cond(ax)
	C = false
	Mem0[ds:0x2E45:word16] = ax
	Mem0[ds:0x2E43:word16] = ax
	// succ:  l0800_853A
l0800_853A:
	ax = Mem0[ss:bp + 0x0006:word16]
	v8 = Mem0[ss:bp + 0x0006:word16] - 0x0001
	Mem0[ss:bp + 0x0006:word16] = v8
	SZO = cond(v8)
	ax = ax | ax
	SZO = cond(ax)
	C = false
	branch Test(EQ,Z) l0800_8547
	// succ:  l0800_8544 l0800_8547
l0800_8544:
	goto l0800_8494
	// succ:  l0800_8494
l0800_8547:
	di = Mem0[ss:sp:word16]
	sp = sp + 2
	si = Mem0[ss:sp:word16]
	sp = sp + 2
	bp = Mem0[ss:sp:word16]
	sp = sp + 2
	return
	// succ:  fn0800_8489_exit
fn0800_8489_exit:


// fn0800_854B
// Return size: 2
define fn0800_854B
fn0800_854B_entry:
	// succ:  l0800_854B
l0800_854B:
	sp = fp
	Top = 0
	sp = sp - 2
	Mem0[ss:sp:word16] = bp
	bp = sp
	sp = sp - 2
	Mem0[ss:sp:word16] = si
	sp = sp - 2
	Mem0[ss:sp:word16] = di
	cl = Mem0[ss:bp + 0x0006:byte]
	cl = cl - 0x01
	SZO = cond(cl)
	di = 0x0001
	di = di << cl
	SCZO = cond(di)
	goto l0800_85EF
	// succ:  l0800_85EF
l0800_855D:
	v15 = Mem0[ds:0x2E43:word16] << 0x0001
	Mem0[ds:0x2E43:word16] = v15
	SCZO = cond(v15)
	SZO = cond(Mem0[ss:bp + 0x0004:word16] & di)
	C = false
	branch Test(EQ,Z) l0800_856A
	// succ:  l0800_8566 l0800_856A
l0800_8566:
	v16 = Mem0[ds:0x2E43:word16] + 0x0001
	Mem0[ds:0x2E43:word16] = v16
	SZO = cond(v16)
	// succ:  l0800_856A
l0800_856A:
	di = di >>u 0x0001
	SCZO = cond(di)
	v17 = Mem0[ds:0x2E45:word16] + 0x0001
	Mem0[ds:0x2E45:word16] = v17
	SZO = cond(v17)
	ax = Mem0[ds:0x2E45:word16]
	SCZO = cond(ax - 0x0008)
	branch Test(NE,Z) l0800_85EF
	// succ:  l0800_8578 l0800_85EF
l0800_8578:
	al = Mem0[ds:0x2E43:byte]
	sp = sp - 2
	Mem0[ss:sp:word16] = ax
	call fn0800_8624 (retsize: 2;)
	sp = sp + 0x0002
	SCZO = cond(sp)
	si = si ^ si
	SZO = cond(si)
	C = false
	goto l0800_8598
	// succ:  l0800_8598
l0800_8586:
	bx = si
	si = si + 0x0001
	SZO = cond(si)
	al = Mem0[ds:bx + 0x4682:byte]
	sp = sp - 2
	Mem0[ss:sp:word16] = ax
	call fn0800_8624 (retsize: 2;)
	sp = sp + 0x0002
	SCZO = cond(sp)
	v22 = Mem0[ds:0x4E82:word16] - 0x0001
	Mem0[ds:0x4E82:word16] = v22
	SZO = cond(v22)
	// succ:  l0800_8598
l0800_8598:
	SCZO = cond(Mem0[ds:0x4E82:word16] - 0x0000)
	branch Test(NE,Z) l0800_8586
	// succ:  l0800_859F l0800_8586
l0800_859F:
	ax = Mem0[ds:0x2A01:word16]
	dx = Mem0[ds:0x29FF:word16]
	SCZO = cond(ax - Mem0[ds:0x2A05:word16])
	branch Test(ULT,C) l0800_85E7
	// succ:  l0800_85AC l0800_85E7
l0800_85AC:
	branch Test(UGT,CZ) l0800_85B4
	// succ:  l0800_85AE l0800_85B4
l0800_85AE:
	SCZO = cond(dx - Mem0[ds:0x2A03:word16])
	branch Test(ULE,CZ) l0800_85E7
	// succ:  l0800_85B4 l0800_85E7
l0800_85B4:
	ax = Mem0[ds:0x2A01:word16]
	dx = Mem0[ds:0x29FF:word16]
	dx = dx - Mem0[ds:0x2A03:word16]
	SCZO = cond(dx)
	ax = ax - Mem0[ds:0x2A05:word16] - C
	SCZO = cond(ax)
	SCZO = cond(ax - Mem0[ds:0x4E8A:word16])
	branch Test(ULT,C) l0800_85E7
	// succ:  l0800_85C9 l0800_85E7
l0800_85C9:
	branch Test(UGT,CZ) l0800_85D1
	// succ:  l0800_85CB l0800_85D1
l0800_85CB:
	SCZO = cond(dx - Mem0[ds:0x4E88:word16])
	branch Test(ULE,CZ) l0800_85E7
	// succ:  l0800_85D1 l0800_85E7
l0800_85D1:
	ax = Mem0[ds:0x2A01:word16]
	dx = Mem0[ds:0x29FF:word16]
	dx = dx - Mem0[ds:0x2A03:word16]
	SCZO = cond(dx)
	ax = ax - Mem0[ds:0x2A05:word16] - C
	SCZO = cond(ax)
	Mem0[ds:0x4E8A:word16] = ax
	Mem0[ds:0x4E88:word16] = dx
	// succ:  l0800_85E7
l0800_85E7:
	ax = ax ^ ax
	SZO = cond(ax)
	C = false
	Mem0[ds:0x2E45:word16] = ax
	Mem0[ds:0x2E43:word16] = ax
	// succ:  l0800_85EF
l0800_85EF:
	ax = Mem0[ss:bp + 0x0006:word16]
	v11 = Mem0[ss:bp + 0x0006:word16] - 0x0001
	Mem0[ss:bp + 0x0006:word16] = v11
	SZO = cond(v11)
	ax = ax | ax
	SZO = cond(ax)
	C = false
	branch Test(EQ,Z) l0800_85FC
	// succ:  l0800_85F9 l0800_85FC
l0800_85F9:
	goto l0800_855D
	// succ:  l0800_855D
l0800_85FC:
	di = Mem0[ss:sp:word16]
	sp = sp + 2
	si = Mem0[ss:sp:word16]
	sp = sp + 2
	bp = Mem0[ss:sp:word16]
	sp = sp + 2
	return
	// succ:  fn0800_854B_exit
fn0800_854B_exit:


// fn0800_8600
// Return size: 2
define fn0800_8600
fn0800_8600_entry:
	// succ:  l0800_8600
l0800_8600:
	sp = fp
	Top = 0
	sp = sp - 2
	Mem0[ss:sp:word16] = bp
	bp = sp
	dl = Mem0[ss:bp + 0x0004:byte]
	SCZO = cond(Mem0[ds:0x2E45:word16] - 0x0000)
	branch Test(EQ,Z) l0800_861B
	// succ:  l0800_860D l0800_861B
l0800_860D:
	bx = Mem0[ds:0x4E82:word16]
	Mem0[ds:bx + 0x4682:byte] = dl
	v10 = Mem0[ds:0x4E82:word16] + 0x0001
	Mem0[ds:0x4E82:word16] = v10
	SZO = cond(v10)
	bp = Mem0[ss:sp:word16]
	sp = sp + 2
	return
	// succ:  fn0800_8600_exit
l0800_861B:
	sp = sp - 2
	Mem0[ss:sp:word16] = dx
	call fn0800_8624 (retsize: 2;)
	sp = sp + 0x0002
	SCZO = cond(sp)
	bp = Mem0[ss:sp:word16]
	sp = sp + 2
	return
	// succ:  fn0800_8600_exit
fn0800_8600_exit:


// fn0800_8624
// Return size: 2
define fn0800_8624
fn0800_8624_entry:
	// succ:  l0800_8624
l0800_8624:
	sp = fp
	Top = 0
	sp = sp - 2
	Mem0[ss:sp:word16] = bp
	bp = sp
	ax = Mem0[ds:0x2A05:word16]
	dx = Mem0[ds:0x2A03:word16]
	SCZO = cond(ax - Mem0[ds:0x4E86:word16])
	branch Test(UGT,CZ) l0800_8678
	// succ:  l0800_8634 l0800_8678
l0800_8634:
	branch Test(ULT,C) l0800_863C
	// succ:  l0800_8636 l0800_863C
l0800_8636:
	SCZO = cond(dx - Mem0[ds:0x4E84:word16])
	branch Test(UGE,C) l0800_8678
	// succ:  l0800_863C l0800_8678
l0800_863C:
	v11 = Mem0[ds:0x29E1:word16]
	sp = sp - 2
	Mem0[ss:sp:word16] = v11
	v12 = Mem0[ds:0x29DF:word16]
	sp = sp - 2
	Mem0[ss:sp:word16] = v12
	al = Mem0[ss:bp + 0x0004:byte]
	sp = sp - 2
	Mem0[ss:sp:word16] = ax
	call fn0800_4047 (retsize: 2;)
	sp = sp + 0x0006
	SCZO = cond(sp)
	al = Mem0[ds:0x2E49:byte]
	al = al ^ Mem0[ss:bp + 0x0004:byte]
	SZO = cond(al)
	C = false
	ah = 0x00
	ax = ax & 0x00FF
	SZO = cond(ax)
	C = false
	ax = ax << 0x0001
	SCZO = cond(ax)
	bx = ax
	ax = Mem0[ds:bx + 0x2A29:word16]
	dx = Mem0[ds:0x2E49:word16]
	cl = 0x08
	dx = dx >>u cl
	SCZO = cond(dx)
	ax = ax ^ dx
	SZO = cond(ax)
	C = false
	Mem0[ds:0x2E49:word16] = ax
	v18 = Mem0[ds:0x2A03:word16] + 0x0001
	Mem0[ds:0x2A03:word16] = v18
	SCZO = cond(v18)
	v19 = Mem0[ds:0x2A05:word16] + 0x00 + C
	Mem0[ds:0x2A05:word16] = v19
	SCZO = cond(v19)
	// succ:  l0800_8678
l0800_8678:
	bp = Mem0[ss:sp:word16]
	sp = sp + 2
	return
	// succ:  fn0800_8624_exit
fn0800_8624_exit:


// fn0800_867A
// Return size: 4
define fn0800_867A
fn0800_867A_entry:
	// succ:  l0800_867A
l0800_867A:
	sp = fp
	Top = 0
	sp = sp - 2
	Mem0[ss:sp:word16] = bp
	bp = sp
	sp = sp - 2
	Mem0[ss:sp:word16] = si
	sp = sp - 2
	Mem0[ss:sp:word16] = di
	sp = sp - 2
	Mem0[ss:sp:word16] = ds
	D = false
	si = Mem0[ss:bp + 0x0006:word16]
	ds = Mem0[ss:bp + 0x0008:selector]
	di = Mem0[ss:bp + 0x000A:word16]
	es = Mem0[ss:bp + 0x000C:selector]
	si = si + 0x0004
	SCZO = cond(si)
	call fn0800_87EF (retsize: 2;)
	sp = sp + 0xFFFE
	sp = sp - 2
	Mem0[ss:sp:word16] = ax
	sp = sp - 2
	Mem0[ss:sp:word16] = bx
	si = si + 0x000A
	SCZO = cond(si)
	C = true
	al = Mem0[ds:si:byte]
	si = si + 0x0001
	al = al + al + C
	SCZO = cond(al)
	al = al + al
	SCZO = cond(al)
	goto l0800_8745
	// succ:  l0800_8745
l0800_86A1:
	al = Mem0[ds:si:byte]
	si = si + 0x0001
	al = al + al + C
	SCZO = cond(al)
	goto l0800_86AD
	// succ:  l0800_86AD
l0800_86A7:
	cl = 0x04
	// succ:  l0800_86A9
l0800_86A9:
	al = al + al
	SCZO = cond(al)
	branch Test(EQ,Z) l0800_86A1
	// succ:  l0800_86AD l0800_86A1
l0800_86AD:
	bh = bh + bh + C
	SCZO = cond(bh)
	cx = cx - 0x0001
	branch cx != 0x0000 l0800_86A9
	// succ:  l0800_86B1 l0800_86A9
l0800_86B1:
	cl = 0x03
	cl = cl + bh
	SCZO = cond(cl)
	cl = cl + cl
	SCZO = cond(cl)
	// succ:  l0800_86B7
l0800_86B7:
	branch cx == 0x0000 l0800_86B9
	// succ:  l0800_86B7_1 l0800_86B9
l0800_86B7_1:
	v22 = Mem0[ds:si:word16]
	Mem0[es:di:word16] = v22
	si = si + 0x0002
	di = di + 0x0002
	cx = cx - 0x0001
	goto l0800_86B7
	// succ:  l0800_86B7
l0800_86B9:
	goto l0800_8745
	// succ:  l0800_8745
l0800_86BC:
	al = Mem0[ds:si:byte]
	si = si + 0x0001
	al = al + al + C
	SCZO = cond(al)
	goto l0800_86EA
	// succ:  l0800_86EA
l0800_86C2:
	al = Mem0[ds:si:byte]
	si = si + 0x0001
	al = al + al + C
	SCZO = cond(al)
	goto l0800_86F0
	// succ:  l0800_86F0
l0800_86C8:
	al = Mem0[ds:si:byte]
	si = si + 0x0001
	al = al + al + C
	SCZO = cond(al)
	goto l0800_86F9
	// succ:  l0800_86F9
l0800_86CE:
	al = Mem0[ds:si:byte]
	si = si + 0x0001
	al = al + al + C
	SCZO = cond(al)
	goto l0800_8705
	// succ:  l0800_8705
l0800_86D4:
	al = Mem0[ds:si:byte]
	si = si + 0x0001
	al = al + al + C
	SCZO = cond(al)
	goto l0800_870E
	// succ:  l0800_870E
l0800_86DA:
	al = Mem0[ds:si:byte]
	si = si + 0x0001
	al = al + al + C
	SCZO = cond(al)
	goto l0800_8714
	// succ:  l0800_8714
l0800_86E0:
	al = Mem0[ds:si:byte]
	si = si + 0x0001
	al = al + al + C
	SCZO = cond(al)
	goto l0800_8726
	// succ:  l0800_8726
l0800_86E6:
	al = al + al
	SCZO = cond(al)
	branch Test(EQ,Z) l0800_86BC
	// succ:  l0800_86EA l0800_86BC
l0800_86EA:
	cl = cl + cl + C
	SCZO = cond(cl)
	al = al + al
	SCZO = cond(al)
	branch Test(EQ,Z) l0800_86C2
	// succ:  l0800_86F0 l0800_86C2
l0800_86F0:
	branch Test(UGE,C) l0800_8701
	// succ:  l0800_86F2 l0800_8701
l0800_86F2:
	al = al + al
	SCZO = cond(al)
	branch Test(EQ,Z) l0800_86C8
	// succ:  l0800_86F9 l0800_86C8
l0800_86F9:
	cx = cx - 0x0001
	SZO = cond(cx)
	cl = cl + cl + C
	SCZO = cond(cl)
	SCZO = cond(cl - 0x09)
	branch Test(EQ,Z) l0800_86A7
	// succ:  l0800_8701 l0800_86A7
l0800_8701:
	al = al + al
	SCZO = cond(al)
	branch Test(EQ,Z) l0800_86CE
	// succ:  l0800_8705 l0800_86CE
l0800_8705:
	branch Test(UGE,C) l0800_8728
	// succ:  l0800_8707 l0800_8728
l0800_8707:
	al = al + al
	SCZO = cond(al)
	branch Test(EQ,Z) l0800_86D4
	// succ:  l0800_870E l0800_86D4
l0800_870E:
	bh = bh + bh + C
	SCZO = cond(bh)
	al = al + al
	SCZO = cond(al)
	branch Test(EQ,Z) l0800_86DA
	// succ:  l0800_8714 l0800_86DA
l0800_8714:
	branch Test(ULT,C) l0800_8784
	// succ:  l0800_8716 l0800_8784
l0800_8716:
	bh = bh | bh
	SZO = cond(bh)
	C = false
	branch Test(NE,Z) l0800_8728
	// succ:  l0800_871D l0800_8728
l0800_871D:
	bh = bh + 0x01
	SZO = cond(bh)
	// succ:  l0800_8722
l0800_8722:
	al = al + al
	SCZO = cond(al)
	branch Test(EQ,Z) l0800_86E0
	// succ:  l0800_8726 l0800_86E0
l0800_8726:
	bh = bh + bh + C
	SCZO = cond(bh)
	// succ:  l0800_8728
l0800_8728:
	bl = Mem0[ds:si:byte]
	si = si + 0x0001
	SZO = cond(si)
	bp = si
	si = di
	si = si - 0x0001
	SZO = cond(si)
	si = si - bx
	SCZO = cond(si)
	__cli()
	// succ:  l0800_8733
l0800_8733:
	branch cx == 0x0000 l0800_8736
	// succ:  l0800_8733_1 l0800_8736
l0800_8733_1:
	v24 = Mem0[ds:si:byte]
	Mem0[es:di:byte] = v24
	si = si + 0x0001
	di = di + 0x0001
	cx = cx - 0x0001
	goto l0800_8733
	// succ:  l0800_8733
l0800_8736:
	__sti()
	si = bp
	goto l0800_8745
	// succ:  l0800_8745
l0800_873C:
	al = Mem0[ds:si:byte]
	si = si + 0x0001
	al = al + al + C
	SCZO = cond(al)
	branch Test(ULT,C) l0800_8753
	// succ:  l0800_8741 l0800_8753
l0800_8741:
	// succ:  l0800_8744
l0800_8744:
	v25 = Mem0[ds:si:byte]
	Mem0[es:di:byte] = v25
	si = si + 0x0001
	di = di + 0x0001
	// succ:  l0800_8745
l0800_8745:
	al = al + al
	SCZO = cond(al)
	branch Test(ULT,C) l0800_8751
	// succ:  l0800_8749 l0800_8751
l0800_8749:
	v15 = Mem0[ds:si:byte]
	Mem0[es:di:byte] = v15
	si = si + 0x0001
	di = di + 0x0001
	al = al + al
	SCZO = cond(al)
	branch Test(UGE,C) l0800_8744
	// succ:  l0800_8751 l0800_8744
l0800_8751:
	branch Test(EQ,Z) l0800_873C
	// succ:  l0800_8753 l0800_873C
l0800_8753:
	cx = 0x0002
	bh = bh - bh
	SCZO = cond(bh)
	al = al + al
	SCZO = cond(al)
	branch Test(EQ,Z) l0800_879B
	// succ:  l0800_875C l0800_879B
l0800_875C:
	// succ:  l0800_875F
l0800_875F:
	branch Test(UGE,C) l0800_86E6
	// succ:  l0800_8761 l0800_86E6
l0800_8761:
	al = al + al
	SCZO = cond(al)
	branch Test(EQ,Z) l0800_87A0
	// succ:  l0800_8765 l0800_87A0
l0800_8765:
	// succ:  l0800_8768
l0800_8768:
	branch Test(UGE,C) l0800_8728
	// succ:  l0800_876A l0800_8728
l0800_876A:
	cx = cx + 0x0001
	SZO = cond(cx)
	al = al + al
	SCZO = cond(al)
	branch Test(EQ,Z) l0800_87A5
	// succ:  l0800_876F l0800_87A5
l0800_876F:
	// succ:  l0800_8772
l0800_8772:
	branch Test(UGE,C) l0800_8701
	// succ:  l0800_8774 l0800_8701
l0800_8774:
	cl = Mem0[ds:si:byte]
	si = si + 0x0001
	SZO = cond(si)
	cl = cl | cl
	SZO = cond(cl)
	C = false
	branch Test(EQ,Z) l0800_87B4
	// succ:  l0800_877B l0800_87B4
l0800_877B:
	cx = cx + 0x0008
	SCZO = cond(cx)
	goto l0800_8701
	// succ:  l0800_8701
l0800_8784:
	al = al + al
	SCZO = cond(al)
	branch Test(EQ,Z) l0800_87AA
	// succ:  l0800_8788 l0800_87AA
l0800_8788:
	// succ:  l0800_878B
l0800_878B:
	bh = bh + bh + C
	SCZO = cond(bh)
	bh = bh | 0x04
	SZO = cond(bh)
	C = false
	al = al + al
	SCZO = cond(al)
	branch Test(EQ,Z) l0800_87AF
	// succ:  l0800_8794 l0800_87AF
l0800_8794:
	// succ:  l0800_8797
l0800_8797:
	branch Test(ULT,C) l0800_8728
	// succ:  l0800_8799 l0800_8728
l0800_8799:
	goto l0800_8722
	// succ:  l0800_8722
l0800_879B:
	al = Mem0[ds:si:byte]
	si = si + 0x0001
	al = al + al + C
	SCZO = cond(al)
	goto l0800_875F
	// succ:  l0800_875F
l0800_87A0:
	al = Mem0[ds:si:byte]
	si = si + 0x0001
	al = al + al + C
	SCZO = cond(al)
	goto l0800_8768
	// succ:  l0800_8768
l0800_87A5:
	al = Mem0[ds:si:byte]
	si = si + 0x0001
	al = al + al + C
	SCZO = cond(al)
	goto l0800_8772
	// succ:  l0800_8772
l0800_87AA:
	al = Mem0[ds:si:byte]
	si = si + 0x0001
	al = al + al + C
	SCZO = cond(al)
	goto l0800_878B
	// succ:  l0800_878B
l0800_87AF:
	al = Mem0[ds:si:byte]
	si = si + 0x0001
	al = al + al + C
	SCZO = cond(al)
	goto l0800_8797
	// succ:  l0800_8797
l0800_87B4:
	sp = sp - 2
	Mem0[ss:sp:word16] = ax
	bx = di
	di = di & 0x000F
	SZO = cond(di)
	C = false
	di = di + 0x8000
	SCZO = cond(di)
	cl = 0x04
	bx = bx >>u cl
	SCZO = cond(bx)
	ax = es
	ax = ax + bx
	SCZO = cond(ax)
	ax = ax - 0x0800
	SCZO = cond(ax)
	es = ax
	bx = si
	si = si & 0x000F
	SZO = cond(si)
	C = false
	bx = bx >>u cl
	SCZO = cond(bx)
	ax = ds
	ax = ax + bx
	SCZO = cond(ax)
	ds = ax
	ax = Mem0[ss:sp:word16]
	sp = sp + 2
	al = al + al
	SCZO = cond(al)
	branch Test(NE,Z) l0800_87E3
	// succ:  l0800_87DD l0800_87E3
l0800_87DD:
	al = Mem0[ds:si:byte]
	si = si + 0x0001
	al = al + al + C
	SCZO = cond(al)
	// succ:  l0800_87E3
l0800_87E3:
	branch Test(UGE,C) l0800_87E8
	// succ:  l0800_87E5 l0800_87E8
l0800_87E5:
	goto l0800_8745
	// succ:  l0800_8745
l0800_87E8:
	dx = Mem0[ss:sp:word16]
	sp = sp + 2
	ax = Mem0[ss:sp:word16]
	sp = sp + 2
	ds = Mem0[ss:sp:selector]
	sp = sp + 2
	di = Mem0[ss:sp:word16]
	sp = sp + 2
	si = Mem0[ss:sp:word16]
	sp = sp + 2
	bp = Mem0[ss:sp:word16]
	sp = sp + 2
	return
	// succ:  fn0800_867A_exit
fn0800_867A_exit:


// fn0800_87EF
// Return size: 2
define fn0800_87EF
fn0800_87EF_entry:
	// succ:  l0800_87EF
l0800_87EF:
	sp = fp
	Top = 0
	call fn0800_87F4 (retsize: 2;)
	bx = ax
	// succ:  l0800_87F2_thunk_fn0800_87F4
l0800_87F2_thunk_fn0800_87F4:
	call fn0800_87F4 (retsize: 0;)
	return
	// succ:  fn0800_87EF_exit
fn0800_87EF_exit:


// fn0800_87F4
// Return size: 2
define fn0800_87F4
fn0800_87F4_entry:
	// succ:  l0800_87F4
l0800_87F4:
	sp = fp
	Top = 0
	ax = Mem0[ds:si:word16]
	si = si + 0x0002
	v6 = al
	al = ah
	ah = v6
	return
	// succ:  fn0800_87F4_exit
fn0800_87F4_exit:


// fn0800_87F8
// Return size: 2
define fn0800_87F8
fn0800_87F8_entry:
	// succ:  l0800_87F8
l0800_87F8:
	sp = fp
	Top = 0
	sp = sp - 2
	Mem0[ss:sp:word16] = di
	D = false
	es_di = Mem0[ds:0x2E37:segptr32]
	ax = Mem0[ds:0x2E31:word16]
	cx = 0x8000
	// succ:  l0800_8804
l0800_8804:
	branch cx == 0x0000 l0800_8806
	// succ:  l0800_8804_1 l0800_8806
l0800_8804_1:
	Mem0[es:di:word16] = ax
	di = di + 0x0002
	cx = cx - 0x0001
	goto l0800_8804
	// succ:  l0800_8804
l0800_8806:
	es_di = Mem0[ds:0x2E33:segptr32]
	ax = Mem0[ds:0x2E31:word16]
	cx = 0x8000
	// succ:  l0800_8810
l0800_8810:
	branch cx == 0x0000 l0800_8812
	// succ:  l0800_8810_1 l0800_8812
l0800_8810_1:
	Mem0[es:di:word16] = ax
	di = di + 0x0002
	cx = cx - 0x0001
	goto l0800_8810
	// succ:  l0800_8810
l0800_8812:
	es_di = Mem0[ds:0x2E3B:segptr32]
	cx = Mem0[ds:0x2E31:word16]
	ax = ax ^ ax
	SZO = cond(ax)
	C = false
	// succ:  l0800_881C
l0800_881C:
	branch cx == 0x0000 l0800_881E
	// succ:  l0800_881C_1 l0800_881E
l0800_881C_1:
	Mem0[es:di:word16] = ax
	di = di + 0x0002
	cx = cx - 0x0001
	goto l0800_881C
	// succ:  l0800_881C
l0800_881E:
	es_di = Mem0[ds:0x2E3F:segptr32]
	ax = ax ^ ax
	SZO = cond(ax)
	C = false
	cx = Mem0[ds:0x2E31:word16]
	// succ:  l0800_8828
l0800_8828:
	Mem0[es:di:word16] = ax
	di = di + 0x0002
	ax = ax + 0x0001
	SZO = cond(ax)
	cx = cx - 0x0001
	branch cx != 0x0000 l0800_8828
	// succ:  l0800_882C l0800_8828
l0800_882C:
	Mem0[ds:0x2E2D:word16] = cx
	di = Mem0[ss:sp:word16]
	sp = sp + 2
	return
	// succ:  fn0800_87F8_exit
fn0800_87F8_exit:


// fn0800_8832
// Return size: 2
define fn0800_8832
fn0800_8832_entry:
	// succ:  l0800_8832
l0800_8832:
	sp = fp
	Top = 0
	sp = sp - 2
	Mem0[ss:sp:word16] = si
	sp = sp - 2
	Mem0[ss:sp:word16] = di
	call fn0800_889A (retsize: 2;)
	SCZO = cond(Mem0[ds:0x2E29:word16] - 0x0002)
	branch Test(ULT,C) l0800_8897
	// succ:  l0800_883E l0800_8897
l0800_883E:
	ax = Mem0[ds:0x2E65:word16]
	ax = ax - Mem0[ds:0x2E6D:word16]
	SCZO = cond(ax)
	SCZO = cond(ax - 0x0003)
	branch Test(ULT,C) l0800_8897
	// succ:  l0800_884D l0800_8897
l0800_884D:
	si = Mem0[ds:0x2E29:word16]
	di = Mem0[ds:0x2E2B:word16]
	ax = Mem0[ds:0x2E2D:word16]
	sp = sp - 2
	Mem0[ss:sp:word16] = ax
	ax = ax + 0x0001
	SZO = cond(ax)
	SCZO = cond(ax - Mem0[ds:0x2E31:word16])
	branch Test(NE,Z) l0800_8865
	// succ:  l0800_8863 l0800_8865
l0800_8863:
	ax = ax ^ ax
	SZO = cond(ax)
	C = false
	// succ:  l0800_8865
l0800_8865:
	Mem0[ds:0x2E2D:word16] = ax
	v12 = Mem0[ds:0x2E6D:word16] + 0x0001
	Mem0[ds:0x2E6D:word16] = v12
	SZO = cond(v12)
	call fn0800_889A (retsize: 2;)
	v13 = Mem0[ds:0x2E6D:word16] - 0x0001
	Mem0[ds:0x2E6D:word16] = v13
	SZO = cond(v13)
	Mem0[ds:0x2E2D:word16] = Mem0[ss:sp:word16]
	sp = sp + 2
	SCZO = cond(Mem0[ds:0x2E29:word16] - si)
	branch Test(ULE,CZ) l0800_888F
	// succ:  l0800_887D l0800_888F
l0800_887D:
	Mem0[ds:0x2E29:word16] = 0x0001
	Mem0[ds:0x2E2B:word16] = 0x0000
	goto l0800_8897
	// succ:  l0800_8897
l0800_888F:
	Mem0[ds:0x2E29:word16] = si
	Mem0[ds:0x2E2B:word16] = di
	// succ:  l0800_8897
l0800_8897:
	di = Mem0[ss:sp:word16]
	sp = sp + 2
	si = Mem0[ss:sp:word16]
	sp = sp + 2
	return
	// succ:  fn0800_8832_exit
fn0800_8832_exit:


// fn0800_889A
// Return size: 2
define fn0800_889A
fn0800_889A_entry:
	// succ:  l0800_889A
l0800_889A:
	sp = fp
	Top = 0
	sp = sp - 2
	Mem0[ss:sp:word16] = si
	sp = sp - 2
	Mem0[ss:sp:word16] = di
	D = false
	Mem0[ds:0x2E2B:word16] = 0x0000
	Mem0[ds:0x2E29:word16] = 0x0001
	es_di = Mem0[ds:0x2E6D:segptr32]
	ax = Mem0[es:di:word16]
	Mem0[ds:0x4E90:word16] = ax
	di = di + 0x0001
	SZO = cond(di)
	dx = Mem0[ds:0x2E69:word16]
	dx = dx - di
	SCZO = cond(dx)
	cx = dx
	// succ:  l0800_88BC
l0800_88BC:
	branch cx == 0x0000 l0800_88BE
	// succ:  l0800_88BC_1 l0800_88BE
l0800_88BC_1:
	SCZO = cond(al - Mem0[es:di:byte])
	di = di + 0x0001
	cx = cx - 0x0001
	branch Test(NE,Z) l0800_88BC
	// succ:  l0800_88BE l0800_88BC
l0800_88BE:
	branch Test(NE,Z) l0800_88C1
	// succ:  l0800_88C0 l0800_88C1
l0800_88C0:
	cx = cx - 0x0001
	SZO = cond(cx)
	// succ:  l0800_88C1
l0800_88C1:
	dx = dx - cx
	SCZO = cond(dx)
	es_di = Mem0[ds:0x2E6D:segptr32]
	ax = Mem0[ds:0x2E69:word16]
	ax = ax - di
	SCZO = cond(ax)
	Mem0[ds:0x4E94:word16] = ax
	di = Mem0[ds:0x4E90:word16]
	di = di << 0x0001
	SCZO = cond(di)
	es = Mem0[ds:0x2E39:selector]
	ax = Mem0[es:di:word16]
	// succ:  l0800_88DC
l0800_88DC:
	SCZO = cond(ax - Mem0[ds:0x2E31:word16])
	branch Test(NE,Z) l0800_88E5
	// succ:  l0800_88E2 l0800_88E5
l0800_88E2:
	goto l0800_8984
	// succ:  l0800_8984
l0800_88E5:
	di = ax
	di = di << 0x0001
	SCZO = cond(di)
	es = Mem0[ds:0x2E41:selector]
	bx = Mem0[es:di:word16]
	Mem0[ds:0x4E92:word16] = bx
	bx = Mem0[ds:0x2E2D:word16]
	SCZO = cond(bx - ax)
	branch Test(UGT,CZ) l0800_8903
	// succ:  l0800_88FC l0800_8903
l0800_88FC:
	bx = bx + Mem0[ds:0x2E31:word16]
	SCZO = cond(bx)
	// succ:  l0800_8903
l0800_8903:
	bx = bx - ax
	SCZO = cond(bx)
	es_si = Mem0[ds:0x2E6D:segptr32]
	si = si - bx
	SCZO = cond(si)
	ax = Mem0[es:si:word16]
	SCZO = cond(Mem0[ds:0x4E90:word16] - ax)
	branch Test(NE,Z) l0800_897E
	// succ:  l0800_8914 l0800_897E
l0800_8914:
	es = Mem0[ds:0x2E3D:selector]
	cx = Mem0[es:di:word16]
	SCZO = cond(cx - bx)
	branch Test(ULE,CZ) l0800_892D
	// succ:  l0800_8922 l0800_892D
l0800_8922:
	bx = 0x0001
	cx = dx
	goto l0800_8963
	// succ:  l0800_8963
l0800_892D:
	SCZO = cond(cx - dx)
	branch Test(ULE,CZ) l0800_893A
	// succ:  l0800_8931 l0800_893A
l0800_8931:
	cx = cx - dx
	SCZO = cond(cx)
	bx = bx - cx
	SCZO = cond(bx)
	cx = dx
	// succ:  l0800_893A
l0800_893A:
	SCZO = cond(cx - dx)
	branch Test(NE,Z) l0800_8963
	// succ:  l0800_893E l0800_8963
l0800_893E:
	es_di = Mem0[ds:0x2E6D:segptr32]
	di = di + cx
	SCZO = cond(di)
	si = di
	si = si - bx
	SCZO = cond(si)
	ax = Mem0[ds:0x4E94:word16]
	ax = ax - cx
	SCZO = cond(ax)
	cx = ax
	sp = sp - 2
	Mem0[ss:sp:word16] = ds
	ds = Mem0[ds:0x2E6F:selector]
	// succ:  l0800_8957
l0800_8957:
	branch cx == 0x0000 l0800_8959
	// succ:  l0800_8957_1 l0800_8959
l0800_8957_1:
	SCZO = cond(Mem0[ds:si:byte] - Mem0[es:di:byte])
	si = si + 0x0001
	di = di + 0x0001
	cx = cx - 0x0001
	branch Test(NE,Z) l0800_8957
	// succ:  l0800_8959 l0800_8957
l0800_8959:
	branch Test(EQ,Z) l0800_895C
	// succ:  l0800_895B l0800_895C
l0800_895B:
	cx = cx + 0x0001
	SZO = cond(cx)
	// succ:  l0800_895C
l0800_895C:
	ds = Mem0[ss:sp:selector]
	sp = sp + 2
	ax = ax - cx
	SCZO = cond(ax)
	cx = dx
	cx = cx + ax
	SCZO = cond(cx)
	// succ:  l0800_8963
l0800_8963:
	SCZO = cond(cx - Mem0[ds:0x2E2F:word16])
	branch Test(ULE,CZ) l0800_896D
	// succ:  l0800_8969 l0800_896D
l0800_8969:
	cx = Mem0[ds:0x2E2F:word16]
	// succ:  l0800_896D
l0800_896D:
	SCZO = cond(cx - Mem0[ds:0x2E29:word16])
	branch Test(ULT,C) l0800_897E
	// succ:  l0800_8973 l0800_897E
l0800_8973:
	Mem0[ds:0x2E29:word16] = cx
	Mem0[ds:0x2E2B:word16] = bx
	// succ:  l0800_897E
l0800_897E:
	ax = Mem0[ds:0x4E92:word16]
	goto l0800_88DC
	// succ:  l0800_88DC
l0800_8984:
	SCZO = cond(Mem0[ds:0x2E29:word16] - 0x0002)
	branch Test(NE,Z) l0800_89A5
	// succ:  l0800_898B l0800_89A5
l0800_898B:
	SCZO = cond(Mem0[ds:0x2E2B:word16] - 0x0100)
	branch Test(ULE,CZ) l0800_89A5
	// succ:  l0800_8996 l0800_89A5
l0800_8996:
	Mem0[ds:0x2E29:word16] = 0x0001
	Mem0[ds:0x2E2B:word16] = 0x0000
	// succ:  l0800_89A5
l0800_89A5:
	di = Mem0[ss:sp:word16]
	sp = sp + 2
	si = Mem0[ss:sp:word16]
	sp = sp + 2
	return
	// succ:  fn0800_889A_exit
fn0800_889A_exit:


// fn0800_89A8
// Return size: 2
define fn0800_89A8
fn0800_89A8_entry:
	// succ:  l0800_89A8
l0800_89A8:
	sp = fp
	Top = 0
	sp = sp - 2
	Mem0[ss:sp:word16] = bp
	bp = sp
	sp = sp - 2
	Mem0[ss:sp:word16] = di
	dx = Mem0[ds:0x2E31:word16]
	D = false
	// succ:  l0800_89B1
l0800_89B1:
	di = Mem0[ds:0x2E2D:word16]
	di = di << 0x0001
	SCZO = cond(di)
	es = Mem0[ds:0x2E41:selector]
	ax = Mem0[es:di:word16]
	Mem0[es:di:word16] = dx
	SCZO = cond(Mem0[ds:0x2E2D:word16] - ax)
	branch Test(EQ,Z) l0800_89EA
	// succ:  l0800_89C7 l0800_89EA
l0800_89C7:
	es_di = Mem0[ds:0x2E6D:segptr32]
	di = di - dx
	SCZO = cond(di)
	di = Mem0[es:di:word16]
	di = di << 0x0001
	SCZO = cond(di)
	es = Mem0[ds:0x2E39:selector]
	Mem0[es:di:word16] = ax
	SCZO = cond(ax - dx)
	branch Test(NE,Z) l0800_89EA
	// succ:  l0800_89E0 l0800_89EA
l0800_89E0:
	es = Mem0[ds:0x2E35:selector]
	Mem0[es:di:word16] = dx
	// succ:  l0800_89EA
l0800_89EA:
	es_di = Mem0[ds:0x2E6D:segptr32]
	di = Mem0[es:di:word16]
	di = di << 0x0001
	SCZO = cond(di)
	ax = Mem0[ds:0x2E2D:word16]
	es = Mem0[ds:0x2E39:selector]
	SCZO = cond(Mem0[es:di:word16] - dx)
	branch Test(NE,Z) l0800_8A08
	// succ:  l0800_89FF l0800_8A08
l0800_89FF:
	Mem0[es:di:word16] = ax
	goto l0800_8A18
	// succ:  l0800_8A18
l0800_8A08:
	es = Mem0[ds:0x2E35:selector]
	bx = Mem0[es:di:word16]
	bx = bx << 0x0001
	SCZO = cond(bx)
	es = Mem0[ds:0x2E41:selector]
	Mem0[es:bx:word16] = ax
	// succ:  l0800_8A18
l0800_8A18:
	es = Mem0[ds:0x2E35:selector]
	Mem0[es:di:word16] = ax
	es_di = Mem0[ds:0x2E6D:segptr32]
	al = Mem0[es:di:byte]
	di = di + 0x0001
	SZO = cond(di)
	bx = Mem0[ds:0x2E69:word16]
	bx = bx - di
	SCZO = cond(bx)
	cx = bx
	// succ:  l0800_8A2F
l0800_8A2F:
	branch cx == 0x0000 l0800_8A31
	// succ:  l0800_8A2F_1 l0800_8A31
l0800_8A2F_1:
	SCZO = cond(al - Mem0[es:di:byte])
	di = di + 0x0001
	cx = cx - 0x0001
	branch Test(NE,Z) l0800_8A2F
	// succ:  l0800_8A31 l0800_8A2F
l0800_8A31:
	branch Test(NE,Z) l0800_8A34
	// succ:  l0800_8A33 l0800_8A34
l0800_8A33:
	cx = cx - 0x0001
	SZO = cond(cx)
	// succ:  l0800_8A34
l0800_8A34:
	bx = bx - cx
	SCZO = cond(bx)
	di = Mem0[ds:0x2E2D:word16]
	di = di << 0x0001
	SCZO = cond(di)
	es = Mem0[ds:0x2E3D:selector]
	Mem0[es:di:word16] = bx
	goto l0800_8A86
	// succ:  l0800_8A86
l0800_8A46:
	di = Mem0[ds:0x2E2D:word16]
	di = di << 0x0001
	SCZO = cond(di)
	es = Mem0[ds:0x2E3D:selector]
	Mem0[es:di:word16] = bx
	es = Mem0[ds:0x2E41:selector]
	ax = Mem0[ds:0x2E2D:word16]
	v22 = Mem0[es:di:word16]
	Mem0[es:di:word16] = ax
	ax = v22
	SCZO = cond(Mem0[ds:0x2E2D:word16] - ax)
	branch Test(EQ,Z) l0800_8A86
	// succ:  l0800_8A63 l0800_8A86
l0800_8A63:
	es_di = Mem0[ds:0x2E6D:segptr32]
	di = di - dx
	SCZO = cond(di)
	di = Mem0[es:di:word16]
	di = di << 0x0001
	SCZO = cond(di)
	es = Mem0[ds:0x2E39:selector]
	Mem0[es:di:word16] = ax
	SCZO = cond(ax - dx)
	branch Test(NE,Z) l0800_8A86
	// succ:  l0800_8A7C l0800_8A86
l0800_8A7C:
	es = Mem0[ds:0x2E35:selector]
	Mem0[es:di:word16] = dx
	// succ:  l0800_8A86
l0800_8A86:
	ax = Mem0[ds:0x2E2D:word16]
	ax = ax + 0x0001
	SZO = cond(ax)
	SCZO = cond(ax - dx)
	branch Test(NE,Z) l0800_8A90
	// succ:  l0800_8A8E l0800_8A90
l0800_8A8E:
	ax = ax ^ ax
	SZO = cond(ax)
	C = false
	// succ:  l0800_8A90
l0800_8A90:
	Mem0[ds:0x2E2D:word16] = ax
	v19 = Mem0[ds:0x2E6D:word16] + 0x0001
	Mem0[ds:0x2E6D:word16] = v19
	SZO = cond(v19)
	v20 = Mem0[ss:bp + 0x0004:word16] - 0x0001
	Mem0[ss:bp + 0x0004:word16] = v20
	SZO = cond(v20)
	branch Test(EQ,Z) l0800_8AA8
	// succ:  l0800_8A9C l0800_8AA8
l0800_8A9C:
	bx = bx - 0x0001
	SZO = cond(bx)
	SCZO = cond(bx - 0x0001)
	branch Test(UGT,CZ) l0800_8A46
	// succ:  l0800_8AA5 l0800_8A46
l0800_8AA5:
	goto l0800_89B1
	// succ:  l0800_89B1
l0800_8AA8:
	di = Mem0[ss:sp:word16]
	sp = sp + 2
	bp = Mem0[ss:sp:word16]
	sp = sp + 2
	return
	// succ:  fn0800_89A8_exit
fn0800_89A8_exit:


// fn0800_8ACF
// Return size: 2
define fn0800_8ACF
fn0800_8ACF_entry:
	// succ:  l0800_8ACF
l0800_8ACF:
	sp = fp
	Top = 0
	sp = sp - 2
	Mem0[ss:sp:word16] = bp
	bp = sp
	sp = sp - 2
	Mem0[ss:sp:word16] = ds
	ah = 0x43
	al = al ^ al
	SZO = cond(al)
	C = false
	ds_dx = Mem0[ss:bp + 0x0004:segptr32]
	msdos_unknown_2143()
	ds = Mem0[ss:sp:selector]
	sp = sp + 2
	branch Test(ULT,C) l0800_8AE9
	// succ:  l0800_8ADF l0800_8AE9
l0800_8ADF:
	es_bx = Mem0[ss:bp + 0x0008:segptr32]
	Mem0[es:bx:word16] = cx
	ax = ax ^ ax
	SZO = cond(ax)
	C = false
	goto l0800_8AED
	// succ:  l0800_8AED
l0800_8AE9:
	sp = sp - 2
	Mem0[ss:sp:word16] = ax
	call fn0800_8D64 (retsize: 2;)
	sp = sp + 0x0002
	// succ:  l0800_8AED
l0800_8AED:
	bp = Mem0[ss:sp:word16]
	sp = sp + 2
	return
	// succ:  fn0800_8ACF_exit
fn0800_8ACF_exit:


// fn0800_8B0D
// Return size: 2
define fn0800_8B0D
fn0800_8B0D_entry:
	// succ:  l0800_8B0D
l0800_8B0D:
	sp = fp
	Top = 0
	sp = sp - 2
	Mem0[ss:sp:word16] = bp
	bp = sp
	sp = sp - 2
	Mem0[ss:sp:word16] = si
	si = Mem0[ss:bp + 0x0008:word16]
	si = si | si
	SZO = cond(si)
	C = false
	branch Test(NE,Z) l0800_8B36
	// succ:  l0800_8B18 l0800_8B36
l0800_8B18:
	goto l0800_8B28
	// succ:  l0800_8B28
l0800_8B1A:
	v13 = Mem0[ds:0x224E:word16] - 0x0001
	Mem0[ds:0x224E:word16] = v13
	SZO = cond(v13)
	bx = Mem0[ds:0x224E:word16]
	bx = bx << 0x0001
	SCZO = cond(bx)
	call SEQ(0x0800, Mem0[ds:bx + 0x4E96:word16]) (retsize: 2;)
	// succ:  l0800_8B28
l0800_8B28:
	SCZO = cond(Mem0[ds:0x224E:word16] - 0x0000)
	branch Test(NE,Z) l0800_8B1A
	// succ:  l0800_8B2F l0800_8B1A
l0800_8B2F:
	call fn0800_0150 (retsize: 2;)
	call SEQ(0x0800, Mem0[ds:0x2352:word16]) (retsize: 2;)
	// succ:  l0800_8B36
l0800_8B36:
	call fn0800_01B9 (retsize: 2;)
	call fn0800_0163 (retsize: 2;)
	SCZO = cond(Mem0[ss:bp + 0x0006:word16] - 0x0000)
	branch Test(NE,Z) l0800_8B55
	// succ:  l0800_8B42 l0800_8B55
l0800_8B42:
	si = si | si
	SZO = cond(si)
	C = false
	branch Test(NE,Z) l0800_8B4E
	// succ:  l0800_8B46 l0800_8B4E
l0800_8B46:
	call SEQ(0x0800, Mem0[ds:0x2354:word16]) (retsize: 2;)
	call SEQ(0x0800, Mem0[ds:0x2356:word16]) (retsize: 2;)
	// succ:  l0800_8B4E
l0800_8B4E:
	v11 = Mem0[ss:bp + 0x0004:word16]
	sp = sp - 2
	Mem0[ss:sp:word16] = v11
	call fn0800_0164 (retsize: 2;)
	cx = Mem0[ss:sp:word16]
	sp = sp + 2
	// succ:  l0800_8B55
l0800_8B55:
	si = Mem0[ss:sp:word16]
	sp = sp + 2
	bp = Mem0[ss:sp:word16]
	sp = sp + 2
	return
	// succ:  fn0800_8B0D_exit
fn0800_8B0D_exit:


// fn0800_8B5A
// Return size: 2
define fn0800_8B5A
fn0800_8B5A_entry:
	// succ:  l0800_8B5A
l0800_8B5A:
	sp = fp
	Top = 0
	sp = sp - 2
	Mem0[ss:sp:word16] = bp
	bp = sp
	ax = ax ^ ax
	SZO = cond(ax)
	C = false
	sp = sp - 2
	Mem0[ss:sp:word16] = ax
	sp = sp - 2
	Mem0[ss:sp:word16] = ax
	v8 = Mem0[ss:bp + 0x0004:word16]
	sp = sp - 2
	Mem0[ss:sp:word16] = v8
	call fn0800_8B0D (retsize: 2;)
	sp = sp + 0x0006
	bp = Mem0[ss:sp:word16]
	sp = sp + 2
	return
	// succ:  fn0800_8B5A_exit
fn0800_8B5A_exit:


// fn0800_8B69
// Return size: 2
define fn0800_8B69
fn0800_8B69_entry:
	// succ:  l0800_8B69
l0800_8B69:
	sp = fp
	Top = 0
	sp = sp - 2
	Mem0[ss:sp:word16] = bp
	bp = sp
	ax = 0x0001
	sp = sp - 2
	Mem0[ss:sp:word16] = ax
	ax = ax ^ ax
	SZO = cond(ax)
	C = false
	sp = sp - 2
	Mem0[ss:sp:word16] = ax
	v8 = Mem0[ss:bp + 0x0004:word16]
	sp = sp - 2
	Mem0[ss:sp:word16] = v8
	call fn0800_8B0D (retsize: 2;)
	sp = sp + 0x0006
	bp = Mem0[ss:sp:word16]
	sp = sp + 2
	return
	// succ:  fn0800_8B69_exit
fn0800_8B69_exit:


// fn0800_8B95
// Return size: 2
define fn0800_8B95
fn0800_8B95_entry:
	// succ:  l0800_8B95
l0800_8B95:
	sp = fp
	Top = 0
	sp = sp - 2
	Mem0[ss:sp:word16] = bp
	bp = sp
	ah = 0x2A
	dl = msdos_get_system_date(out dh, out cx)
	es_bx = Mem0[ss:bp + 0x0004:segptr32]
	Mem0[es:bx:word16] = cx
	Mem0[es:bx + 0x0002:word16] = dx
	bp = Mem0[ss:sp:word16]
	sp = sp + 2
	return
	// succ:  fn0800_8B95_exit
fn0800_8B95_exit:


// fn0800_8BA8
// Return size: 2
define fn0800_8BA8
fn0800_8BA8_entry:
	// succ:  l0800_8BA8
l0800_8BA8:
	sp = fp
	Top = 0
	sp = sp - 2
	Mem0[ss:sp:word16] = bp
	bp = sp
	ah = 0x2C
	cl = msdos_get_system_time(out ch, out dh, out dl)
	es_bx = Mem0[ss:bp + 0x0004:segptr32]
	Mem0[es:bx:word16] = cx
	Mem0[es:bx + 0x0002:word16] = dx
	bp = Mem0[ss:sp:word16]
	sp = sp + 2
	return
	// succ:  fn0800_8BA8_exit
fn0800_8BA8_exit:


// fn0800_8BBB
// Return size: 0
define fn0800_8BBB
fn0800_8BBB_entry:
	// succ:  l0800_8BBB
l0800_8BBB:
	sp = fp
	Top = 0
	cx = Mem0[ss:sp:word16]
	sp = sp + 2
	sp = sp - 2
	Mem0[ss:sp:word16] = cs
	sp = sp - 2
	Mem0[ss:sp:word16] = cx
	cx = cx ^ cx
	SZO = cond(cx)
	C = false
	// succ:  l0800_8BC0_thunk_fn0800_8BD8
l0800_8BC0_thunk_fn0800_8BD8:
	call fn0800_8BD8 (retsize: 0;)
	return
	// succ:  fn0800_8BBB_exit
fn0800_8BBB_exit:


// fn0800_8BC2
// Return size: 4
define fn0800_8BC2
fn0800_8BC2_entry:
	// succ:  l0800_8BC2
l0800_8BC2:
	sp = fp
	Top = 0
	cx = Mem0[ss:sp:word16]
	sp = sp + 2
	sp = sp - 2
	Mem0[ss:sp:word16] = cs
	sp = sp - 2
	Mem0[ss:sp:word16] = cx
	cx = 0x0001
	// succ:  l0800_8BC8_thunk_fn0800_8BD8
l0800_8BC8_thunk_fn0800_8BD8:
	call fn0800_8BD8 (retsize: 0;)
	return
	// succ:  fn0800_8BC2_exit
fn0800_8BC2_exit:


// fn0800_8BCA
// Return size: 0
define fn0800_8BCA
fn0800_8BCA_entry:
	// succ:  l0800_8BCA
l0800_8BCA:
	sp = fp
	Top = 0
	cx = Mem0[ss:sp:word16]
	sp = sp + 2
	sp = sp - 2
	Mem0[ss:sp:word16] = cs
	sp = sp - 2
	Mem0[ss:sp:word16] = cx
	cx = 0x0002
	// succ:  l0800_8BD0_thunk_fn0800_8BD8
l0800_8BD0_thunk_fn0800_8BD8:
	call fn0800_8BD8 (retsize: 0;)
	return
	// succ:  fn0800_8BCA_exit
fn0800_8BCA_exit:


// fn0800_8BD8
// Return size: 0
define fn0800_8BD8
fn0800_8BD8_entry:
	// succ:  l0800_8BD8
l0800_8BD8:
	sp = v4
	Top = 0
	sp = sp - 2
	Mem0[ss:sp:word16] = bp
	sp = sp - 2
	Mem0[ss:sp:word16] = si
	sp = sp - 2
	Mem0[ss:sp:word16] = di
	bp = sp
	di = cx
	ax = Mem0[ss:bp + 0x000A:word16]
	dx = Mem0[ss:bp + 0x000C:word16]
	bx = Mem0[ss:bp + 0x000E:word16]
	cx = Mem0[ss:bp + 0x0010:word16]
	cx = cx | cx
	SZO = cond(cx)
	C = false
	branch Test(NE,Z) l0800_8BF7
	// succ:  l0800_8BEF l0800_8BF7
l0800_8BEF:
	dx = dx | dx
	SZO = cond(dx)
	C = false
	branch Test(EQ,Z) l0800_8C5C
	// succ:  l0800_8BF3 l0800_8C5C
l0800_8BF3:
	bx = bx | bx
	SZO = cond(bx)
	C = false
	branch Test(EQ,Z) l0800_8C5C
	// succ:  l0800_8BF7 l0800_8C5C
l0800_8BF7:
	SZO = cond(di & 0x0001)
	C = false
	branch Test(NE,Z) l0800_8C19
	// succ:  l0800_8BFD l0800_8C19
l0800_8BFD:
	dx = dx | dx
	SZO = cond(dx)
	C = false
	branch Test(NS,S) l0800_8C0B
	// succ:  l0800_8C01 l0800_8C0B
l0800_8C01:
	dx = -dx
	SCZO = cond(dx)
	C = dx == 0x0000
	ax = -ax
	SCZO = cond(ax)
	C = ax == 0x0000
	dx = dx - 0x00 - C
	SCZO = cond(dx)
	di = di | 0x000C
	SZO = cond(di)
	C = false
	// succ:  l0800_8C0B
l0800_8C0B:
	cx = cx | cx
	SZO = cond(cx)
	C = false
	branch Test(NS,S) l0800_8C19
	// succ:  l0800_8C0F l0800_8C19
l0800_8C0F:
	cx = -cx
	SCZO = cond(cx)
	C = cx == 0x0000
	bx = -bx
	SCZO = cond(bx)
	C = bx == 0x0000
	cx = cx - 0x00 - C
	SCZO = cond(cx)
	di = di ^ 0x0004
	SZO = cond(di)
	C = false
	// succ:  l0800_8C19
l0800_8C19:
	bp = cx
	cx = 0x0020
	sp = sp - 2
	Mem0[ss:sp:word16] = di
	di = di ^ di
	SZO = cond(di)
	C = false
	si = si ^ si
	SZO = cond(si)
	C = false
	// succ:  l0800_8C23
l0800_8C23:
	ax = ax << 0x0001
	SCZO = cond(ax)
	v18 = (dx & 0x0001 << 0x10 - 0x01) != 0x0000
	dx = __rcl(dx, 0x01, C)
	C = v18
	v19 = (si & 0x0001 << 0x10 - 0x01) != 0x0000
	si = __rcl(si, 0x01, C)
	C = v19
	v20 = (di & 0x0001 << 0x10 - 0x01) != 0x0000
	di = __rcl(di, 0x01, C)
	C = v20
	SCZO = cond(di - bp)
	branch Test(ULT,C) l0800_8C3A
	// succ:  l0800_8C2F l0800_8C3A
l0800_8C2F:
	branch Test(UGT,CZ) l0800_8C35
	// succ:  l0800_8C31 l0800_8C35
l0800_8C31:
	SCZO = cond(si - bx)
	branch Test(ULT,C) l0800_8C3A
	// succ:  l0800_8C35 l0800_8C3A
l0800_8C35:
	si = si - bx
	SCZO = cond(si)
	di = di - bp - C
	SCZO = cond(di)
	ax = ax + 0x0001
	SZO = cond(ax)
	// succ:  l0800_8C3A
l0800_8C3A:
	cx = cx - 0x0001
	branch cx != 0x0000 l0800_8C23
	// succ:  l0800_8C3C l0800_8C23
l0800_8C3C:
	bx = Mem0[ss:sp:word16]
	sp = sp + 2
	SZO = cond(bx & 0x0002)
	C = false
	branch Test(EQ,Z) l0800_8C49
	// succ:  l0800_8C43 l0800_8C49
l0800_8C43:
	ax = si
	dx = di
	bx = bx >>u 0x0001
	SCZO = cond(bx)
	// succ:  l0800_8C49
l0800_8C49:
	SZO = cond(bx & 0x0004)
	C = false
	branch Test(EQ,Z) l0800_8C56
	// succ:  l0800_8C4F l0800_8C56
l0800_8C4F:
	dx = -dx
	SCZO = cond(dx)
	C = dx == 0x0000
	ax = -ax
	SCZO = cond(ax)
	C = ax == 0x0000
	dx = dx - 0x00 - C
	SCZO = cond(dx)
	// succ:  l0800_8C56
l0800_8C56:
	di = Mem0[ss:sp:word16]
	sp = sp + 2
	si = Mem0[ss:sp:word16]
	sp = sp + 2
	bp = Mem0[ss:sp:word16]
	sp = sp + 2
	return
	// succ:  fn0800_8BD8_exit
l0800_8C5C:
	v23 = dx_ax
	dx = (uint16) (v23 % bx)
	ax = (uint16) (v23 /u bx)
	SCZO = cond(ax)
	SZO = cond(di & 0x0002)
	C = false
	branch Test(EQ,Z) l0800_8C65
	// succ:  l0800_8C64 l0800_8C65
l0800_8C64:
	v24 = ax
	ax = dx
	dx = v24
	// succ:  l0800_8C65
l0800_8C65:
	dx = dx ^ dx
	SZO = cond(dx)
	C = false
	goto l0800_8C56
	// succ:  l0800_8C56
fn0800_8BD8_exit:


// fn0800_8C69
// Return size: 4
define fn0800_8C69
fn0800_8C69_entry:
	// succ:  l0800_8C69
l0800_8C69:
	sp = fp
	Top = 0
	bx = Mem0[ss:sp:word16]
	sp = sp + 2
	sp = sp - 2
	Mem0[ss:sp:word16] = cs
	sp = sp - 2
	Mem0[ss:sp:word16] = bx
	SCZO = cond(cl - 0x10)
	branch Test(UGE,C) l0800_8C81
	// succ:  l0800_8C71 l0800_8C81
l0800_8C71:
	bx = ax
	ax = ax << cl
	SCZO = cond(ax)
	dx = dx << cl
	SCZO = cond(dx)
	cl = -cl
	SCZO = cond(cl)
	C = cl == 0x00
	cl = cl + 0x10
	SCZO = cond(cl)
	bx = bx >>u cl
	SCZO = cond(bx)
	dx = dx | bx
	SZO = cond(dx)
	C = false
	return
	// succ:  fn0800_8C69_exit
l0800_8C81:
	cl = cl - 0x10
	SCZO = cond(cl)
	v12 = ax
	ax = dx
	dx = v12
	ax = ax ^ ax
	SZO = cond(ax)
	C = false
	dx = dx << cl
	SCZO = cond(dx)
	return
	// succ:  fn0800_8C69_exit
fn0800_8C69_exit:


// fn0800_8C8A
// Return size: 4
define fn0800_8C8A
fn0800_8C8A_entry:
	// succ:  l0800_8C8A
l0800_8C8A:
	sp = fp
	Top = 0
	bx = Mem0[ss:sp:word16]
	sp = sp + 2
	sp = sp - 2
	Mem0[ss:sp:word16] = cs
	sp = sp - 2
	Mem0[ss:sp:word16] = bx
	SCZO = cond(cl - 0x10)
	branch Test(UGE,C) l0800_8CA2
	// succ:  l0800_8C92 l0800_8CA2
l0800_8C92:
	bx = dx
	ax = ax >>u cl
	SCZO = cond(ax)
	dx = dx >> cl
	SCZO = cond(dx)
	cl = -cl
	SCZO = cond(cl)
	C = cl == 0x00
	cl = cl + 0x10
	SCZO = cond(cl)
	bx = bx << cl
	SCZO = cond(bx)
	ax = ax | bx
	SZO = cond(ax)
	C = false
	return
	// succ:  fn0800_8C8A_exit
l0800_8CA2:
	cl = cl - 0x10
	SCZO = cond(cl)
	v12 = ax
	ax = dx
	dx = v12
	dx_ax = (int32) ax
	ax = ax >> cl
	SCZO = cond(ax)
	return
	// succ:  fn0800_8C8A_exit
fn0800_8C8A_exit:


// fn0800_8CAA
// Return size: 4
define fn0800_8CAA
fn0800_8CAA_entry:
	// succ:  l0800_8CAA
l0800_8CAA:
	sp = fp
	Top = 0
	bx = Mem0[ss:sp:word16]
	sp = sp + 2
	sp = sp - 2
	Mem0[ss:sp:word16] = cs
	sp = sp - 2
	Mem0[ss:sp:word16] = bx
	SCZO = cond(cl - 0x10)
	branch Test(UGE,C) l0800_8CC2
	// succ:  l0800_8CB2 l0800_8CC2
l0800_8CB2:
	bx = dx
	ax = ax >>u cl
	SCZO = cond(ax)
	dx = dx >>u cl
	SCZO = cond(dx)
	cl = -cl
	SCZO = cond(cl)
	C = cl == 0x00
	cl = cl + 0x10
	SCZO = cond(cl)
	bx = bx << cl
	SCZO = cond(bx)
	ax = ax | bx
	SZO = cond(ax)
	C = false
	return
	// succ:  fn0800_8CAA_exit
l0800_8CC2:
	cl = cl - 0x10
	SCZO = cond(cl)
	v12 = ax
	ax = dx
	dx = v12
	dx = dx ^ dx
	SZO = cond(dx)
	C = false
	ax = ax >>u cl
	SCZO = cond(ax)
	return
	// succ:  fn0800_8CAA_exit
fn0800_8CAA_exit:


// fn0800_8CCB
// Return size: 4
define fn0800_8CCB
fn0800_8CCB_entry:
	// succ:  l0800_8CCB
l0800_8CCB:
	sp = fp
	Top = 0
	es = Mem0[ss:sp:selector]
	sp = sp + 2
	sp = sp - 2
	Mem0[ss:sp:word16] = cs
	sp = sp - 2
	Mem0[ss:sp:word16] = es
	cx = cx | cx
	SZO = cond(cx)
	C = false
	branch Test(GE,SO) l0800_8CDE
	// succ:  l0800_8CD2 l0800_8CDE
l0800_8CD2:
	bx = ~bx
	cx = ~cx
	bx = bx + 0x0001
	SCZO = cond(bx)
	cx = cx + 0x00 + C
	SCZO = cond(cx)
	goto l0800_8D0D
	// succ:  l0800_8D0D
l0800_8CDE:
	ax = ax + bx
	SCZO = cond(ax)
	branch Test(UGE,C) l0800_8CE6
	// succ:  l0800_8CE2 l0800_8CE6
l0800_8CE2:
	dx = dx + 0x1000
	SCZO = cond(dx)
	// succ:  l0800_8CE6
l0800_8CE6:
	ch = cl
	cl = 0x04
	ch = ch << cl
	SCZO = cond(ch)
	dh = dh + ch
	SCZO = cond(dh)
	ch = al
	ax = ax >>u cl
	SCZO = cond(ax)
	dx = dx + ax
	SCZO = cond(dx)
	al = ch
	ax = ax & 0x000F
	SZO = cond(ax)
	C = false
	return
	// succ:  fn0800_8CCB_exit
l0800_8D0D:
	ax = ax - bx
	SCZO = cond(ax)
	branch Test(UGE,C) l0800_8D15
	// succ:  l0800_8D11 l0800_8D15
l0800_8D11:
	dx = dx - 0x1000
	SCZO = cond(dx)
	// succ:  l0800_8D15
l0800_8D15:
	bh = cl
	cl = 0x04
	bh = bh << cl
	SCZO = cond(bh)
	bl = bl ^ bl
	SZO = cond(bl)
	C = false
	dx = dx - bx
	SCZO = cond(dx)
	ch = al
	ax = ax >>u cl
	SCZO = cond(ax)
	dx = dx + ax
	SCZO = cond(dx)
	al = ch
	ax = ax & 0x000F
	SZO = cond(ax)
	C = false
	return
	// succ:  fn0800_8CCB_exit
fn0800_8CCB_exit:


// fn0800_8D2B
// Return size: 2
define fn0800_8D2B
fn0800_8D2B_entry:
	// succ:  l0800_8D2B
l0800_8D2B:
	sp = fp
	Top = 0
	sp = sp - 2
	Mem0[ss:sp:word16] = bp
	bp = sp
	sp = sp - 2
	Mem0[ss:sp:word16] = si
	si = Mem0[ss:bp + 0x0004:word16]
	si = si | si
	SZO = cond(si)
	C = false
	branch Test(LT,SO) l0800_8D4B
	// succ:  l0800_8D36 l0800_8D4B
l0800_8D36:
	SCZO = cond(si - 0x0058)
	branch Test(LE,SZO) l0800_8D3E
	// succ:  l0800_8D3B l0800_8D3E
l0800_8D3B:
	si = 0x0057
	// succ:  l0800_8D3E
l0800_8D3E:
	Mem0[ds:0x2516:word16] = si
	al = Mem0[ds:si + 0x2518:byte]
	ax = (int16) al
	si = ax
	goto l0800_8D58
	// succ:  l0800_8D58
l0800_8D4B:
	si = -si
	SCZO = cond(si)
	C = si == 0x0000
	SCZO = cond(si - 0x0023)
	branch Test(GT,SZO) l0800_8D3B
	// succ:  l0800_8D52 l0800_8D3B
l0800_8D52:
	Mem0[ds:0x2516:word16] = 0xFFFF
	// succ:  l0800_8D58
l0800_8D58:
	Mem0[ds:0x007F:word16] = si
	ax = 0xFFFF
	si = Mem0[ss:sp:word16]
	sp = sp + 2
	bp = Mem0[ss:sp:word16]
	sp = sp + 2
	return
	// succ:  fn0800_8D2B_exit
fn0800_8D2B_exit:


// fn0800_8D64
// Return size: 2
define fn0800_8D64
fn0800_8D64_entry:
	// succ:  l0800_8D64
l0800_8D64:
	sp = fp
	Top = 0
	sp = sp - 2
	Mem0[ss:sp:word16] = bp
	bp = sp
	sp = sp - 2
	Mem0[ss:sp:word16] = si
	si = Mem0[ss:bp + 0x0004:word16]
	sp = sp - 2
	Mem0[ss:sp:word16] = si
	call fn0800_8D2B (retsize: 2;)
	sp = sp + 0x0002
	ax = si
	si = Mem0[ss:sp:word16]
	sp = sp + 2
	bp = Mem0[ss:sp:word16]
	sp = sp + 2
	return
	// succ:  fn0800_8D64_exit
fn0800_8D64_exit:


// fn0800_8D76
// Return size: 2
define fn0800_8D76
fn0800_8D76_entry:
	// succ:  l0800_8D76
l0800_8D76:
	sp = fp
	Top = 0
	sp = sp - 2
	Mem0[ss:sp:word16] = bp
	bp = sp
	ax = 0x4400
	bx = Mem0[ss:bp + 0x0004:word16]
	C = msdos_ioctl_get_device_info(bx, out dx)
	v9 = ax
	ax = dx
	dx = v9
	ax = ax & 0x0080
	SZO = cond(ax)
	C = false
	bp = Mem0[ss:sp:word16]
	sp = sp + 2
	return
	// succ:  fn0800_8D76_exit
fn0800_8D76_exit:


// fn0800_8D87
// Return size: 2
define fn0800_8D87
fn0800_8D87_entry:
	// succ:  l0800_8D87
l0800_8D87:
	sp = fp
	Top = 0
	sp = sp - 2
	Mem0[ss:sp:word16] = bp
	bp = sp
	sp = sp - 0x0022
	SCZO = cond(sp)
	sp = sp - 2
	Mem0[ss:sp:word16] = si
	sp = sp - 2
	Mem0[ss:sp:word16] = di
	sp = sp - 2
	Mem0[ss:sp:word16] = es
	es_di = Mem0[ss:bp + 0x000A:segptr32]
	bx = Mem0[ss:bp + 0x0008:word16]
	SCZO = cond(bx - 0x0024)
	branch Test(UGT,CZ) l0800_8DF7
	// succ:  l0800_8D9B l0800_8DF7
l0800_8D9B:
	SCZO = cond(bl - 0x02)
	branch Test(ULT,C) l0800_8DF7
	// succ:  l0800_8DA0 l0800_8DF7
l0800_8DA0:
	ax = Mem0[ss:bp + 0x000E:word16]
	cx = Mem0[ss:bp + 0x0010:word16]
	cx = cx | cx
	SZO = cond(cx)
	C = false
	branch Test(GE,SO) l0800_8DBC
	// succ:  l0800_8DAA l0800_8DBC
l0800_8DAA:
	SCZO = cond(Mem0[ss:bp + 0x0006:byte] - 0x00)
	branch Test(EQ,Z) l0800_8DBC
	// succ:  l0800_8DB0 l0800_8DBC
l0800_8DB0:
	Mem0[es:di:byte] = 0x2D
	di = di + 0x0001
	SZO = cond(di)
	cx = -cx
	SCZO = cond(cx)
	C = cx == 0x0000
	ax = -ax
	SCZO = cond(ax)
	C = ax == 0x0000
	cx = cx - 0x00 - C
	SCZO = cond(cx)
	// succ:  l0800_8DBC
l0800_8DBC:
	si = bp - 0x0022
	branch cx == 0x0000 l0800_8DD1
	// succ:  l0800_8DC1 l0800_8DD1
l0800_8DC1:
	v21 = ax
	ax = cx
	cx = v21
	dx = dx - dx
	SCZO = cond(dx)
	v23 = dx_ax
	dx = (uint16) (v23 % bx)
	ax = (uint16) (v23 /u bx)
	SCZO = cond(ax)
	v24 = ax
	ax = cx
	cx = v24
	v25 = dx_ax
	dx = (uint16) (v25 % bx)
	ax = (uint16) (v25 /u bx)
	SCZO = cond(ax)
	Mem0[ss:si:byte] = dl
	si = si + 0x0001
	SZO = cond(si)
	branch cx == 0x0000 l0800_8DD9
	// succ:  l0800_8DCF l0800_8DD9
l0800_8DCF:
	goto l0800_8DC1
	// succ:  l0800_8DC1
l0800_8DD1:
	dx = dx - dx
	SCZO = cond(dx)
	v27 = dx_ax
	dx = (uint16) (v27 % bx)
	ax = (uint16) (v27 /u bx)
	SCZO = cond(ax)
	Mem0[ss:si:byte] = dl
	si = si + 0x0001
	SZO = cond(si)
	// succ:  l0800_8DD9
l0800_8DD9:
	ax = ax | ax
	SZO = cond(ax)
	C = false
	branch Test(NE,Z) l0800_8DD1
	// succ:  l0800_8DDD l0800_8DD1
l0800_8DDD:
	cx = bp - 0x0022
	cx = -cx
	SCZO = cond(cx)
	C = cx == 0x0000
	cx = cx + si
	SCZO = cond(cx)
	D = false
	// succ:  l0800_8DE5
l0800_8DE5:
	si = si - 0x0001
	SZO = cond(si)
	al = Mem0[ss:si:byte]
	al = al - 0x0A
	SCZO = cond(al)
	branch Test(UGE,C) l0800_8DF1
	// succ:  l0800_8DED l0800_8DF1
l0800_8DED:
	al = al + 0x3A
	SCZO = cond(al)
	goto l0800_8DF4
	// succ:  l0800_8DF4
l0800_8DF1:
	al = al + Mem0[ss:bp + 0x0004:byte]
	SCZO = cond(al)
	// succ:  l0800_8DF4
l0800_8DF4:
	Mem0[es:di:byte] = al
	di = di + 0x0001
	cx = cx - 0x0001
	branch cx != 0x0000 l0800_8DE5
	// succ:  l0800_8DF7 l0800_8DE5
l0800_8DF7:
	al = 0x00
	Mem0[es:di:byte] = al
	di = di + 0x0001
	es = Mem0[ss:sp:selector]
	sp = sp + 2
	dx = Mem0[ss:bp + 0x000C:word16]
	ax = Mem0[ss:bp + 0x000A:word16]
	di = Mem0[ss:sp:word16]
	sp = sp + 2
	si = Mem0[ss:sp:word16]
	sp = sp + 2
	sp = bp
	bp = Mem0[ss:sp:word16]
	sp = sp + 2
	return
	// succ:  fn0800_8D87_exit
fn0800_8D87_exit:


// fn0800_8E09
// Return size: 2
define fn0800_8E09
fn0800_8E09_entry:
	// succ:  l0800_8E09
l0800_8E09:
	sp = fp
	Top = 0
	sp = sp - 2
	Mem0[ss:sp:word16] = bp
	bp = sp
	ax = ax ^ ax
	SZO = cond(ax)
	C = false
	sp = sp - 2
	Mem0[ss:sp:word16] = ax
	v8 = Mem0[ss:bp + 0x0008:word16]
	sp = sp - 2
	Mem0[ss:sp:word16] = v8
	v9 = Mem0[ss:bp + 0x0006:word16]
	sp = sp - 2
	Mem0[ss:sp:word16] = v9
	v10 = Mem0[ss:bp + 0x0004:word16]
	sp = sp - 2
	Mem0[ss:sp:word16] = v10
	ax = 0x000A
	sp = sp - 2
	Mem0[ss:sp:word16] = ax
	al = 0x00
	sp = sp - 2
	Mem0[ss:sp:word16] = ax
	al = 0x61
	sp = sp - 2
	Mem0[ss:sp:word16] = ax
	call fn0800_8D87 (retsize: 2;)
	sp = sp + 0x000E
	bp = Mem0[ss:sp:word16]
	sp = sp + 2
	return
	// succ:  fn0800_8E09_exit
fn0800_8E09_exit:


// fn0800_8E29
// Return size: 2
define fn0800_8E29
fn0800_8E29_entry:
	// succ:  l0800_8E29
l0800_8E29:
	sp = fp
	Top = 0
	sp = sp - 2
	Mem0[ss:sp:word16] = bp
	bp = sp
	bx = Mem0[ss:bp + 0x0004:word16]
	bx = bx << 0x0001
	SCZO = cond(bx)
	v8 = Mem0[ds:bx + 0x24EA:word16] & 0xFDFF
	Mem0[ds:bx + 0x24EA:word16] = v8
	SZO = cond(Mem0[ds:bx + 0x24EA:word16])
	C = false
	ah = 0x42
	al = Mem0[ss:bp + 0x000A:byte]
	bx = Mem0[ss:bp + 0x0004:word16]
	cx = Mem0[ss:bp + 0x0008:word16]
	dx = Mem0[ss:bp + 0x0006:word16]
	C = msdos_set_file_position(bx, cx_dx, al, dx_ax)
	branch Test(ULT,C) l0800_8E4B
	// succ:  l0800_8E49 l0800_8E4B
l0800_8E49:
	goto l0800_8E50
	// succ:  l0800_8E50
l0800_8E4B:
	sp = sp - 2
	Mem0[ss:sp:word16] = ax
	call fn0800_8D2B (retsize: 2;)
	sp = sp + 0x0002
	dx_ax = (word32) ax
	// succ:  l0800_8E50
l0800_8E50:
	bp = Mem0[ss:sp:word16]
	sp = sp + 2
	return
	// succ:  fn0800_8E29_exit
fn0800_8E29_exit:


// fn0800_8E52
// Return size: 2
define fn0800_8E52
fn0800_8E52_entry:
	// succ:  l0800_8E52
l0800_8E52:
	sp = fp
	Top = 0
	sp = sp - 2
	Mem0[ss:sp:word16] = bp
	bp = sp
	sp = sp - 2
	Mem0[ss:sp:word16] = ds
	ah = 0x39
	ds_dx = Mem0[ss:bp + 0x0004:segptr32]
	__syscall(0x21)
	ds = Mem0[ss:sp:selector]
	sp = sp + 2
	branch Test(ULT,C) l0800_8E64
	// succ:  l0800_8E60 l0800_8E64
l0800_8E60:
	ax = ax ^ ax
	SZO = cond(ax)
	C = false
	goto l0800_8E68
	// succ:  l0800_8E68
l0800_8E64:
	sp = sp - 2
	Mem0[ss:sp:word16] = ax
	call fn0800_8D2B (retsize: 2;)
	sp = sp + 0x0002
	// succ:  l0800_8E68
l0800_8E68:
	bp = Mem0[ss:sp:word16]
	sp = sp + 2
	return
	// succ:  fn0800_8E52_exit
fn0800_8E52_exit:


// fn0800_8E6A
// Return size: 2
define fn0800_8E6A
fn0800_8E6A_entry:
	// succ:  l0800_8E6A
l0800_8E6A:
	sp = fp
	Top = 0
	sp = sp - 2
	Mem0[ss:sp:word16] = bp
	bp = sp
	ax = Mem0[ss:bp + 0x000A:word16]
	ax = ax | Mem0[ss:bp + 0x000C:word16]
	SZO = cond(ax)
	C = false
	branch Test(NE,Z) l0800_8E7D
	// succ:  l0800_8E75 l0800_8E7D
l0800_8E75:
	Mem0[ss:bp + 0x000C:word16] = ds
	Mem0[ss:bp + 0x000A:word16] = 0x4ED6
	// succ:  l0800_8E7D
l0800_8E7D:
	v10 = Mem0[ss:bp + 0x0004:word16]
	sp = sp - 2
	Mem0[ss:sp:word16] = v10
	ax = Mem0[ss:bp + 0x0006:word16]
	ax = ax | Mem0[ss:bp + 0x0008:word16]
	SZO = cond(ax)
	C = false
	branch Test(NE,Z) l0800_8E8F
	// succ:  l0800_8E88 l0800_8E8F
l0800_8E88:
	dx = ds
	ax = 0x2572
	goto l0800_8E95
	// succ:  l0800_8E95
l0800_8E8F:
	dx = Mem0[ss:bp + 0x0008:word16]
	ax = Mem0[ss:bp + 0x0006:word16]
	// succ:  l0800_8E95
l0800_8E95:
	sp = sp - 2
	Mem0[ss:sp:word16] = dx
	sp = sp - 2
	Mem0[ss:sp:word16] = ax
	v12 = Mem0[ss:bp + 0x000C:word16]
	sp = sp - 2
	Mem0[ss:sp:word16] = v12
	v13 = Mem0[ss:bp + 0x000A:word16]
	sp = sp - 2
	Mem0[ss:sp:word16] = v13
	call fn0800_9CE6 (retsize: 2;)
	sp = sp + 0x0008
	SCZO = cond(sp)
	sp = sp - 2
	Mem0[ss:sp:word16] = dx
	sp = sp - 2
	Mem0[ss:sp:word16] = ax
	call fn0800_8E09 (retsize: 2;)
	sp = sp + 0x0006
	sp = sp - 2
	Mem0[ss:sp:word16] = ds
	ax = 0x2576
	sp = sp - 2
	Mem0[ss:sp:word16] = ax
	v15 = Mem0[ss:bp + 0x000C:word16]
	sp = sp - 2
	Mem0[ss:sp:word16] = v15
	v16 = Mem0[ss:bp + 0x000A:word16]
	sp = sp - 2
	Mem0[ss:sp:word16] = v16
	call fn0800_BF5F (retsize: 2;)
	sp = sp + 0x0008
	SCZO = cond(sp)
	dx = Mem0[ss:bp + 0x000C:word16]
	ax = Mem0[ss:bp + 0x000A:word16]
	bp = Mem0[ss:sp:word16]
	sp = sp + 2
	return
	// succ:  fn0800_8E6A_exit
fn0800_8E6A_exit:


// fn0800_8F18
// Return size: 2
define fn0800_8F18
fn0800_8F18_entry:
	// succ:  l0800_8F18
l0800_8F18:
	sp = fp
	Top = 0
	sp = sp - 2
	Mem0[ss:sp:word16] = si
	v5 = ax
	ax = si
	si = v5
	v7 = ax
	ax = dx
	dx = v7
	SZO = cond(ax & ax)
	C = false
	branch Test(EQ,Z) l0800_8F21
	// succ:  l0800_8F1F l0800_8F21
l0800_8F1F:
	dx_ax = bx *u ax
	SCZO = cond(dx_ax)
	// succ:  l0800_8F21
l0800_8F21:
	branch cx == 0x0000 l0800_8F28
	// succ:  l0800_8F23 l0800_8F28
l0800_8F23:
	v16 = ax
	ax = cx
	cx = v16
	dx_ax = si *u ax
	SCZO = cond(dx_ax)
	ax = ax + cx
	SCZO = cond(ax)
	// succ:  l0800_8F28
l0800_8F28:
	v17 = ax
	ax = si
	si = v17
	dx_ax = bx *u ax
	SCZO = cond(dx_ax)
	dx = dx + si
	SCZO = cond(dx)
	si = Mem0[ss:sp:word16]
	sp = sp + 2
	return
	// succ:  fn0800_8F18_exit
fn0800_8F18_exit:


// fn0800_8F2F
// Return size: 2
define fn0800_8F2F
fn0800_8F2F_entry:
	// succ:  l0800_8F2F
l0800_8F2F:
	sp = fp
	Top = 0
	sp = sp - 2
	Mem0[ss:sp:word16] = cx
	ch = al
	cl = 0x04
	ax = ax >>u cl
	SCZO = cond(ax)
	dx = dx + ax
	SCZO = cond(dx)
	al = ch
	ah = bl
	bx = bx >>u cl
	SCZO = cond(bx)
	cx = Mem0[ss:sp:word16]
	sp = sp + 2
	cx = cx + bx
	SCZO = cond(cx)
	bl = ah
	ax = ax & 0x000F
	SZO = cond(ax)
	C = false
	bx = bx & 0x000F
	SZO = cond(bx)
	C = false
	SCZO = cond(dx - cx)
	branch Test(NE,Z) l0800_8F4F
	// succ:  l0800_8F4D l0800_8F4F
l0800_8F4D:
	SCZO = cond(ax - bx)
	// succ:  l0800_8F4F
l0800_8F4F:
	return
	// succ:  fn0800_8F2F_exit
fn0800_8F2F_exit:


// fn0800_8F50
// Return size: 2
define fn0800_8F50
fn0800_8F50_entry:
	// succ:  l0800_8F50
l0800_8F50:
	sp = fp
	Top = 0
	sp = sp - 2
	Mem0[ss:sp:word16] = bp
	bp = sp
	bx = Mem0[ss:bp + 0x0004:word16]
	bx = bx << 0x0001
	SCZO = cond(bx)
	SZO = cond(Mem0[ds:bx + 0x24EA:word16] & 0x0002)
	C = false
	branch Test(EQ,Z) l0800_8F66
	// succ:  l0800_8F60 l0800_8F66
l0800_8F60:
	ax = 0x0005
	sp = sp - 2
	Mem0[ss:sp:word16] = ax
	goto l0800_8F7A
	// succ:  l0800_8F7A
l0800_8F66:
	sp = sp - 2
	Mem0[ss:sp:word16] = ds
	ah = 0x3F
	bx = Mem0[ss:bp + 0x0004:word16]
	cx = Mem0[ss:bp + 0x000A:word16]
	ds_dx = Mem0[ss:bp + 0x0006:segptr32]
	C = msdos_read_file(bx, cx, ds_dx, out ax)
	ds = Mem0[ss:sp:selector]
	sp = sp + 2
	branch Test(ULT,C) l0800_8F79
	// succ:  l0800_8F77 l0800_8F79
l0800_8F77:
	goto l0800_8F7D
	// succ:  l0800_8F7D
l0800_8F79:
	sp = sp - 2
	Mem0[ss:sp:word16] = ax
	// succ:  l0800_8F7A
l0800_8F7A:
	call fn0800_8D2B (retsize: 2;)
	sp = sp + 0x0002
	// succ:  l0800_8F7D
l0800_8F7D:
	bp = Mem0[ss:sp:word16]
	sp = sp + 2
	return
	// succ:  fn0800_8F50_exit
fn0800_8F50_exit:


// fn0800_8F7F
// Return size: 2
define fn0800_8F7F
fn0800_8F7F_entry:
	// succ:  l0800_8F7F
l0800_8F7F:
	sp = fp
	Top = 0
	sp = sp - 2
	Mem0[ss:sp:word16] = bp
	bp = sp
	sp = sp - 2
	Mem0[ss:sp:word16] = ds
	ah = 0x41
	ds_dx = Mem0[ss:bp + 0x0004:segptr32]
	C = msdos_delete_file(ds, dx)
	ds = Mem0[ss:sp:selector]
	sp = sp + 2
	branch Test(ULT,C) l0800_8F91
	// succ:  l0800_8F8D l0800_8F91
l0800_8F8D:
	ax = ax ^ ax
	SZO = cond(ax)
	C = false
	goto l0800_8F95
	// succ:  l0800_8F95
l0800_8F91:
	sp = sp - 2
	Mem0[ss:sp:word16] = ax
	call fn0800_8D2B (retsize: 2;)
	sp = sp + 0x0002
	// succ:  l0800_8F95
l0800_8F95:
	bp = Mem0[ss:sp:word16]
	sp = sp + 2
	return
	// succ:  fn0800_8F7F_exit
fn0800_8F7F_exit:


// fn0800_8F97
// Return size: 2
define fn0800_8F97
fn0800_8F97_entry:
	// succ:  l0800_8F97
l0800_8F97:
	sp = fp
	Top = 0
	sp = sp - 2
	Mem0[ss:sp:word16] = bp
	bp = sp
	sp = sp - 0x002A
	SCZO = cond(sp)
	sp = sp - 2
	Mem0[ss:sp:word16] = si
	sp = sp - 2
	Mem0[ss:sp:word16] = di
	Mem0[ss:bp - 0x0004:word16] = 0x0000
	Mem0[ss:bp - 0x0006:word16] = 0x0000
	// succ:  l0800_8FC6
l0800_8FC6:
	sp = sp - 2
	Mem0[ss:sp:word16] = es
	D = false
	// succ:  l0800_8FC8
l0800_8FC8:
	si = Mem0[ss:bp + 0x000C:word16]
	// succ:  l0800_8FCB
l0800_8FCB:
	es = Mem0[ss:bp + 0x000E:selector]
	al = Mem0[ds:si:byte]
	si = si + 0x0001
	al = al | al
	SZO = cond(al)
	C = false
	branch Test(EQ,Z) l0800_9042
	// succ:  l0800_8FD4 l0800_9042
l0800_8FD4:
	SCZO = cond(al - 0x25)
	branch Test(EQ,Z) l0800_9045
	// succ:  l0800_8FD8 l0800_9045
l0800_8FD8:
	ax = (int16) al
	v16 = ax
	ax = di
	di = v16
	v17 = Mem0[ss:bp - 0x0006:word16] + 0x0001
	Mem0[ss:bp - 0x0006:word16] = v17
	SZO = cond(v17)
	v18 = Mem0[ss:bp + 0x000A:word16]
	sp = sp - 2
	Mem0[ss:sp:word16] = v18
	v19 = Mem0[ss:bp + 0x0008:word16]
	sp = sp - 2
	Mem0[ss:sp:word16] = v19
	call SEQ(0x0800, Mem0[ss:bp + 0x0004:word16]) (retsize: 2;)
	cx = Mem0[ss:sp:word16]
	sp = sp + 2
	cx = Mem0[ss:sp:word16]
	sp = sp + 2
	ax = ax | ax
	SZO = cond(ax)
	C = false
	branch Test(LT,SO) l0800_9016
	// succ:  l0800_8FEC l0800_9016
l0800_8FEC:
	ax = (int16) al
	di = di | di
	SZO = cond(di)
	C = false
	branch Test(SG,S) l0800_902B
	// succ:  l0800_8FF1 l0800_902B
l0800_8FF1:
	SCZO = cond(Mem0[ds:di + 0x257C:byte] - 0x01)
	branch Test(NE,Z) l0800_902B
	// succ:  l0800_8FF8 l0800_902B
l0800_8FF8:
	v23 = ax
	ax = bx
	bx = v23
	bl = bl | bl
	SZO = cond(bl)
	C = false
	branch Test(SG,S) l0800_9019
	// succ:  l0800_8FFD l0800_9019
l0800_8FFD:
	SCZO = cond(Mem0[ds:bx + 0x257C:byte] - 0x01)
	branch Test(NE,Z) l0800_9019
	// succ:  l0800_9004 l0800_9019
l0800_9004:
	v26 = Mem0[ss:bp - 0x0006:word16] + 0x0001
	Mem0[ss:bp - 0x0006:word16] = v26
	SZO = cond(v26)
	v27 = Mem0[ss:bp + 0x000A:word16]
	sp = sp - 2
	Mem0[ss:sp:word16] = v27
	v28 = Mem0[ss:bp + 0x0008:word16]
	sp = sp - 2
	Mem0[ss:sp:word16] = v28
	call SEQ(0x0800, Mem0[ss:bp + 0x0004:word16]) (retsize: 2;)
	cx = Mem0[ss:sp:word16]
	sp = sp + 2
	cx = Mem0[ss:sp:word16]
	sp = sp + 2
	ax = ax | ax
	SZO = cond(ax)
	C = false
	branch Test(GT,SZO) l0800_8FF8
	// succ:  l0800_9016 l0800_8FF8
l0800_9016:
	// succ:  l0800_9016_thunk_fn0800_93A6
l0800_9016_thunk_fn0800_93A6:
	call fn0800_93A6 (retsize: 0;)
	return
	// succ:  fn0800_8F97_exit
l0800_9019:
	v32 = Mem0[ss:bp + 0x000A:word16]
	sp = sp - 2
	Mem0[ss:sp:word16] = v32
	v33 = Mem0[ss:bp + 0x0008:word16]
	sp = sp - 2
	Mem0[ss:sp:word16] = v33
	sp = sp - 2
	Mem0[ss:sp:word16] = bx
	call SEQ(0x0800, Mem0[ss:bp + 0x0006:word16]) (retsize: 2;)
	sp = sp + 0x0006
	SCZO = cond(sp)
	v34 = Mem0[ss:bp - 0x0006:word16] - 0x0001
	Mem0[ss:bp - 0x0006:word16] = v34
	SZO = cond(v34)
	goto l0800_8FCB
	// succ:  l0800_8FCB
l0800_902B:
	SCZO = cond(ax - di)
	branch Test(EQ,Z) l0800_8FCB
	// succ:  l0800_902F l0800_8FCB
l0800_902F:
	v35 = Mem0[ss:bp + 0x000A:word16]
	sp = sp - 2
	Mem0[ss:sp:word16] = v35
	v36 = Mem0[ss:bp + 0x0008:word16]
	sp = sp - 2
	Mem0[ss:sp:word16] = v36
	sp = sp - 2
	Mem0[ss:sp:word16] = ax
	call SEQ(0x0800, Mem0[ss:bp + 0x0006:word16]) (retsize: 2;)
	sp = sp + 0x0006
	SCZO = cond(sp)
	v37 = Mem0[ss:bp - 0x0006:word16] - 0x0001
	Mem0[ss:bp - 0x0006:word16] = v37
	SZO = cond(v37)
	// succ:  l0800_903F_thunk_fn0800_93A6
l0800_903F_thunk_fn0800_93A6:
	call fn0800_93A6 (retsize: 0;)
	return
	// succ:  fn0800_8F97_exit
l0800_9042:
	// succ:  l0800_9042_thunk_fn0800_93A6
l0800_9042_thunk_fn0800_93A6:
	call fn0800_93A6 (retsize: 0;)
	return
	// succ:  fn0800_8F97_exit
l0800_9045:
	Mem0[ss:bp - 0x000A:word16] = 0xFFFF
	es = Mem0[ss:bp + 0x000E:selector]
	Mem0[ss:bp - 0x0001:byte] = 0x20
	// succ:  l0800_9051
l0800_9051:
	al = Mem0[ds:si:byte]
	si = si + 0x0001
	ax = (int16) al
	Mem0[ss:bp + 0x000C:word16] = si
	v38 = ax
	ax = di
	di = v38
	di = di | di
	SZO = cond(di)
	C = false
	branch Test(LT,SO) l0800_9075
	// succ:  l0800_905C l0800_9075
l0800_905C:
	bl = Mem0[ds:di + 0x257C:byte]
	bh = bh ^ bh
	SZO = cond(bh)
	C = false
	SCZO = cond(bx - 0x0015)
	branch Test(ULE,CZ) l0800_906A
	// succ:  l0800_9067 l0800_906A
l0800_9067:
	// succ:  l0800_9067_thunk_fn0800_93A6
l0800_9067_thunk_fn0800_93A6:
	call fn0800_93A6 (retsize: 0;)
	return
	// succ:  fn0800_8F97_exit
l0800_906A:
	bx = bx << 0x0001
	SCZO = cond(bx)
	switch (bx) { l0800_93BE l0800_93BE l0800_93BE l0800_9071 l0800_9078 l0800_907E l0800_926F l0800_90C2 l0800_90C2 l0800_90CC l0800_91A1 l0800_9092 l0800_909E l0800_9098 l0800_90BD l0800_920B l0800_92B1 l0800_90B0 l0800_90C7 l0800_9127 l0800_90A4 l0800_90AA }
	// succ:  l0800_906C_thunk_fn0800_93A6 l0800_906C_thunk_fn0800_93A6 l0800_906C_thunk_fn0800_93A6 l0800_9071 l0800_9078 l0800_907E l0800_926F l0800_90C2 l0800_90C2 l0800_90CC l0800_91A1 l0800_9092 l0800_909E l0800_9098 l0800_90BD l0800_920B l0800_92B1 l0800_90B0 l0800_90C7 l0800_9127 l0800_90A4 l0800_90AA
l0800_906C_thunk_fn0800_93A6:
	call fn0800_93A6 (retsize: 0;)
	return
	// succ:  fn0800_8F97_exit
l0800_906C_thunk_fn0800_93A6:
	call fn0800_93A6 (retsize: 0;)
	return
	// succ:  fn0800_8F97_exit
l0800_906C_thunk_fn0800_93A6:
	call fn0800_93A6 (retsize: 0;)
	return
	// succ:  fn0800_8F97_exit
l0800_9071:
	v41 = ax
	ax = di
	di = v41
	goto l0800_8FD8
	// succ:  l0800_8FD8
l0800_9075:
	// succ:  l0800_9075_thunk_fn0800_93A6
l0800_9075_thunk_fn0800_93A6:
	call fn0800_93A6 (retsize: 0;)
	return
	// succ:  fn0800_8F97_exit
l0800_9078:
	v42 = Mem0[ss:bp - 0x0001:byte] | 0x01
	Mem0[ss:bp - 0x0001:byte] = v42
	SZO = cond(Mem0[ss:bp - 0x0001:byte])
	C = false
	goto l0800_9051
	// succ:  l0800_9051
l0800_907E:
	di = di - 0x0030
	SCZO = cond(di)
	v86 = Mem0[ss:bp - 0x000A:word16]
	Mem0[ss:bp - 0x000A:word16] = di
	di = v86
	di = di | di
	SZO = cond(di)
	C = false
	branch Test(LT,SO) l0800_9051
	// succ:  l0800_9088 l0800_9051
l0800_9088:
	ax = 0x000A
	dx_ax = di *u ax
	SCZO = cond(dx_ax)
	v88 = Mem0[ss:bp - 0x000A:word16] + ax
	Mem0[ss:bp - 0x000A:word16] = v88
	SCZO = cond(v88)
	goto l0800_9051
	// succ:  l0800_9051
l0800_9092:
	v43 = Mem0[ss:bp - 0x0001:byte] | 0x08
	Mem0[ss:bp - 0x0001:byte] = v43
	SZO = cond(Mem0[ss:bp - 0x0001:byte])
	C = false
	goto l0800_9051
	// succ:  l0800_9051
l0800_9098:
	v74 = Mem0[ss:bp - 0x0001:byte] | 0x04
	Mem0[ss:bp - 0x0001:byte] = v74
	SZO = cond(Mem0[ss:bp - 0x0001:byte])
	C = false
	goto l0800_9051
	// succ:  l0800_9051
l0800_909E:
	v63 = Mem0[ss:bp - 0x0001:byte] | 0x02
	Mem0[ss:bp - 0x0001:byte] = v63
	SZO = cond(Mem0[ss:bp - 0x0001:byte])
	C = false
	goto l0800_9051
	// succ:  l0800_9051
l0800_90A4:
	v45 = Mem0[ss:bp - 0x0001:byte] & 0xDF
	Mem0[ss:bp - 0x0001:byte] = v45
	SZO = cond(Mem0[ss:bp - 0x0001:byte])
	C = false
	goto l0800_9051
	// succ:  l0800_9051
l0800_90AA:
	v44 = Mem0[ss:bp - 0x0001:byte] | 0x20
	Mem0[ss:bp - 0x0001:byte] = v44
	SZO = cond(Mem0[ss:bp - 0x0001:byte])
	C = false
	goto l0800_9051
	// succ:  l0800_9051
l0800_90B0:
	ax = Mem0[ss:bp - 0x0006:word16]
	dx = dx - dx
	SCZO = cond(dx)
	SZO = cond(Mem0[ss:bp - 0x0001:byte] & 0x01)
	C = false
	branch Test(EQ,Z) l0800_9110
	// succ:  l0800_90BB l0800_9110
l0800_90BB:
	goto l0800_9051
	// succ:  l0800_9051
l0800_90BD:
	si = 0x0008
	goto l0800_90CE
	// succ:  l0800_90CE
l0800_90C2:
	si = 0x000A
	goto l0800_90CE
	// succ:  l0800_90CE
l0800_90C7:
	si = 0x0010
	goto l0800_90CE
	// succ:  l0800_90CE
l0800_90CC:
	si = si ^ si
	SZO = cond(si)
	C = false
	// succ:  l0800_90CE
l0800_90CE:
	SZO = cond(di & 0x0020)
	C = false
	branch Test(NE,Z) l0800_90DD
	// succ:  l0800_90D4 l0800_90DD
l0800_90D4:
	SCZO = cond(di - 0x0058)
	branch Test(EQ,Z) l0800_90DD
	// succ:  l0800_90D9 l0800_90DD
l0800_90D9:
	v47 = Mem0[ss:bp - 0x0001:byte] | 0x04
	Mem0[ss:bp - 0x0001:byte] = v47
	SZO = cond(Mem0[ss:bp - 0x0001:byte])
	C = false
	// succ:  l0800_90DD
l0800_90DD:
	sp = sp - 2
	Mem0[ss:sp:word16] = ss
	ax = bp - 0x0008
	sp = sp - 2
	Mem0[ss:sp:word16] = ax
	sp = sp - 2
	Mem0[ss:sp:word16] = ss
	ax = bp - 0x0006
	sp = sp - 2
	Mem0[ss:sp:word16] = ax
	ax = Mem0[ss:bp - 0x000A:word16]
	ax = ax & 0x7FFF
	SZO = cond(ax)
	C = false
	sp = sp - 2
	Mem0[ss:sp:word16] = ax
	sp = sp - 2
	Mem0[ss:sp:word16] = si
	v51 = Mem0[ss:bp + 0x000A:word16]
	sp = sp - 2
	Mem0[ss:sp:word16] = v51
	v52 = Mem0[ss:bp + 0x0008:word16]
	sp = sp - 2
	Mem0[ss:sp:word16] = v52
	v53 = Mem0[ss:bp + 0x0006:word16]
	sp = sp - 2
	Mem0[ss:sp:word16] = v53
	v54 = Mem0[ss:bp + 0x0004:word16]
	sp = sp - 2
	Mem0[ss:sp:word16] = v54
	call fn0800_94B0 (retsize: 2;)
	sp = sp + 0x0014
	SCZO = cond(sp)
	SCZO = cond(Mem0[ss:bp - 0x0008:word16] - 0x0000)
	branch Test(LE,SZO) l0800_911F
	// succ:  l0800_9107 l0800_911F
l0800_9107:
	SZO = cond(Mem0[ss:bp - 0x0001:byte] & 0x01)
	C = false
	branch Test(NE,Z) l0800_911C
	// succ:  l0800_910D l0800_911C
l0800_910D:
	v55 = Mem0[ss:bp - 0x0004:word16] + 0x0001
	Mem0[ss:bp - 0x0004:word16] = v55
	SZO = cond(v55)
	// succ:  l0800_9110
l0800_9110:
	call fn0800_8FAB (retsize: 2;)
	Mem0[es:di:word16] = ax
	di = di + 0x0002
	SZO = cond(Mem0[ss:bp - 0x0001:byte] & 0x04)
	C = false
	branch Test(EQ,Z) l0800_911C
	// succ:  l0800_911A l0800_911C
l0800_911A:
	v50 = ax
	ax = dx
	dx = v50
	Mem0[es:di:word16] = ax
	di = di + 0x0002
	// succ:  l0800_911C
l0800_911C:
	goto l0800_8FC8
	// succ:  l0800_8FC8
l0800_911F:
	branch Test(LT,SO) l0800_9124
	// succ:  l0800_9121 l0800_9124
l0800_9121:
	// succ:  l0800_9121_thunk_fn0800_93BE
l0800_9121_thunk_fn0800_93BE:
	call fn0800_93BE (retsize: 0;)
	return
	// succ:  fn0800_8F97_exit
l0800_9124:
	// succ:  l0800_9124_thunk_fn0800_93A6
l0800_9124_thunk_fn0800_93A6:
	call fn0800_93A6 (retsize: 0;)
	return
	// succ:  fn0800_8F97_exit
l0800_9127:
	call fn0800_912A (retsize: 2;)
	// succ:  l0800_9127_thunk_fn0800_912A
l0800_9127_thunk_fn0800_912A:
	call fn0800_912A (retsize: 0;)
	return
	// succ:  fn0800_8F97_exit
l0800_919E:
	// succ:  l0800_919E_thunk_fn0800_93A6
l0800_919E_thunk_fn0800_93A6:
	call fn0800_93A6 (retsize: 0;)
	return
	// succ:  fn0800_8F97_exit
l0800_91A1:
	sp = sp - 2
	Mem0[ss:sp:word16] = ss
	ax = bp - 0x0008
	sp = sp - 2
	Mem0[ss:sp:word16] = ax
	sp = sp - 2
	Mem0[ss:sp:word16] = ss
	ax = bp - 0x0006
	sp = sp - 2
	Mem0[ss:sp:word16] = ax
	ax = 0x7FFF
	ax = ax & Mem0[ss:bp - 0x000A:word16]
	SZO = cond(ax)
	C = false
	sp = sp - 2
	Mem0[ss:sp:word16] = ax
	v81 = Mem0[ss:bp + 0x000A:word16]
	sp = sp - 2
	Mem0[ss:sp:word16] = v81
	v82 = Mem0[ss:bp + 0x0008:word16]
	sp = sp - 2
	Mem0[ss:sp:word16] = v82
	v83 = Mem0[ss:bp + 0x0006:word16]
	sp = sp - 2
	Mem0[ss:sp:word16] = v83
	v84 = Mem0[ss:bp + 0x0004:word16]
	sp = sp - 2
	Mem0[ss:sp:word16] = v84
	call fn0800_A2D0 (retsize: 2;)
	sp = sp + 0x0012
	SCZO = cond(sp)
	SCZO = cond(Mem0[ss:bp - 0x0008:word16] - 0x0000)
	branch Test(LE,SZO) l0800_9203
	// succ:  l0800_91CA l0800_9203
l0800_91CA:
	al = Mem0[ss:bp - 0x0001:byte]
	ax = (int16) al
	SZO = cond(ax & 0x0001)
	C = false
	branch Test(NE,Z) l0800_91FD
	// succ:  l0800_91D3 l0800_91FD
l0800_91D3:
	call fn0800_8FAB (retsize: 2;)
	v85 = Mem0[ss:bp - 0x0004:word16] + 0x0001
	Mem0[ss:bp - 0x0004:word16] = v85
	SZO = cond(v85)
	SZO = cond(Mem0[ss:bp - 0x0001:byte] & 0x04)
	C = false
	branch Test(EQ,Z) l0800_91E4
	// succ:  l0800_91DF l0800_91E4
l0800_91DF:
	ax = 0x0004
	goto l0800_91F1
	// succ:  l0800_91F1
l0800_91E4:
	SZO = cond(Mem0[ss:bp - 0x0001:byte] & 0x08)
	C = false
	branch Test(EQ,Z) l0800_91EF
	// succ:  l0800_91EA l0800_91EF
l0800_91EA:
	ax = 0x0008
	goto l0800_91F1
	// succ:  l0800_91F1
l0800_91EF:
	ax = ax ^ ax
	SZO = cond(ax)
	C = false
	// succ:  l0800_91F1
l0800_91F1:
	sp = sp - 2
	Mem0[ss:sp:word16] = ax
	sp = sp - 2
	Mem0[ss:sp:word16] = es
	sp = sp - 2
	Mem0[ss:sp:word16] = di
	call fn0800_A2D4 (retsize: 2;)
	sp = sp + 0x0006
	SCZO = cond(sp)
	goto l0800_8FC8
	// succ:  l0800_8FC8
l0800_91FD:
	call fn0800_A2D8 (retsize: 2;)
	goto l0800_8FC8
	// succ:  l0800_8FC8
l0800_9203:
	call fn0800_A2D8 (retsize: 2;)
	branch Test(LT,SO) l0800_919E
	// succ:  l0800_9208 l0800_919E
l0800_9208:
	// succ:  l0800_9208_thunk_fn0800_93BE
l0800_9208_thunk_fn0800_93BE:
	call fn0800_93BE (retsize: 0;)
	return
	// succ:  fn0800_8F97_exit
l0800_920B:
	call fn0800_920E (retsize: 2;)
	// succ:  l0800_920B_thunk_fn0800_920E
l0800_920B_thunk_fn0800_920E:
	call fn0800_920E (retsize: 0;)
	return
	// succ:  fn0800_8F97_exit
l0800_926F:
	SZO = cond(Mem0[ss:bp - 0x0001:byte] & 0x01)
	C = false
	branch Test(NE,Z) l0800_9278
	// succ:  l0800_9275 l0800_9278
l0800_9275:
	call fn0800_8FAB (retsize: 2;)
	// succ:  l0800_9278
l0800_9278:
	si = Mem0[ss:bp - 0x000A:word16]
	si = si | si
	SZO = cond(si)
	C = false
	branch Test(GE,SO) l0800_9282
	// succ:  l0800_927F l0800_9282
l0800_927F:
	si = 0x0001
	// succ:  l0800_9282
l0800_9282:
	branch Test(EQ,Z) l0800_92A2
	// succ:  l0800_9284 l0800_92A2
l0800_9284:
	v65 = Mem0[ss:bp - 0x0006:word16] + 0x0001
	Mem0[ss:bp - 0x0006:word16] = v65
	SZO = cond(v65)
	sp = sp - 2
	Mem0[ss:sp:word16] = es
	v66 = Mem0[ss:bp + 0x000A:word16]
	sp = sp - 2
	Mem0[ss:sp:word16] = v66
	v67 = Mem0[ss:bp + 0x0008:word16]
	sp = sp - 2
	Mem0[ss:sp:word16] = v67
	call SEQ(0x0800, Mem0[ss:bp + 0x0004:word16]) (retsize: 2;)
	cx = Mem0[ss:sp:word16]
	sp = sp + 2
	cx = Mem0[ss:sp:word16]
	sp = sp + 2
	es = Mem0[ss:sp:selector]
	sp = sp + 2
	ax = ax | ax
	SZO = cond(ax)
	C = false
	branch Test(LT,SO) l0800_92AE
	// succ:  l0800_9298 l0800_92AE
l0800_9298:
	SZO = cond(Mem0[ss:bp - 0x0001:byte] & 0x01)
	C = false
	branch Test(NE,Z) l0800_929F
	// succ:  l0800_929E l0800_929F
l0800_929E:
	Mem0[es:di:byte] = al
	di = di + 0x0001
	// succ:  l0800_929F
l0800_929F:
	si = si - 0x0001
	SZO = cond(si)
	branch Test(GT,SZO) l0800_9284
	// succ:  l0800_92A2 l0800_9284
l0800_92A2:
	SZO = cond(Mem0[ss:bp - 0x0001:byte] & 0x01)
	C = false
	branch Test(NE,Z) l0800_92AB
	// succ:  l0800_92A8 l0800_92AB
l0800_92A8:
	v75 = Mem0[ss:bp - 0x0004:word16] + 0x0001
	Mem0[ss:bp - 0x0004:word16] = v75
	SZO = cond(v75)
	// succ:  l0800_92AB
l0800_92AB:
	goto l0800_8FC8
	// succ:  l0800_8FC8
l0800_92AE:
	// succ:  l0800_92AE_thunk_fn0800_93A6
l0800_92AE_thunk_fn0800_93A6:
	call fn0800_93A6 (retsize: 0;)
	return
	// succ:  fn0800_8F97_exit
l0800_92B1:
	sp = sp - 2
	Mem0[ss:sp:word16] = es
	ax = ax - ax
	SCZO = cond(ax)
	D = false
	sp = sp - 2
	Mem0[ss:sp:word16] = ss
	es = Mem0[ss:sp:selector]
	sp = sp + 2
	di = bp - 0x002A
	cx = 0x0010
	// succ:  l0800_92BD
l0800_92BD:
	branch cx == 0x0000 l0800_92BF
	// succ:  l0800_92BD_1 l0800_92BF
l0800_92BD_1:
	Mem0[es:di:word16] = ax
	di = di + 0x0002
	cx = cx - 0x0001
	goto l0800_92BD
	// succ:  l0800_92BD
l0800_92BF:
	es = Mem0[ss:sp:selector]
	sp = sp + 2
	al = Mem0[ds:si:byte]
	si = si + 0x0001
	v48 = Mem0[ss:bp - 0x0001:byte] & 0xEF
	Mem0[ss:bp - 0x0001:byte] = v48
	SZO = cond(Mem0[ss:bp - 0x0001:byte])
	C = false
	SCZO = cond(al - 0x5E)
	branch Test(NE,Z) l0800_92D0
	// succ:  l0800_92CA l0800_92D0
l0800_92CA:
	v49 = Mem0[ss:bp - 0x0001:byte] | 0x10
	Mem0[ss:bp - 0x0001:byte] = v49
	SZO = cond(Mem0[ss:bp - 0x0001:byte])
	C = false
	al = Mem0[ds:si:byte]
	si = si + 0x0001
	// succ:  l0800_92D0
l0800_92D0:
	ah = 0x00
	// succ:  l0800_92D2
l0800_92D2:
	dl = al
	di = ax
	cl = 0x03
	di = di >>u cl
	SCZO = cond(di)
	cx = 0x0107
	cl = cl & dl
	SZO = cond(cl)
	C = false
	ch = ch << cl
	SCZO = cond(ch)
	v60 = Mem0[ss:bp - 0x002A + di:byte] | ch
	Mem0[ss:bp - 0x002A + di:byte] = v60
	SZO = cond(Mem0[ss:bp - 0x002A + di:byte])
	C = false
	// succ:  l0800_92E4
l0800_92E4:
	al = Mem0[ds:si:byte]
	si = si + 0x0001
	SCZO = cond(al - 0x00)
	branch Test(EQ,Z) l0800_9313
	// succ:  l0800_92EA l0800_9313
l0800_92EA:
	SCZO = cond(al - 0x5D)
	branch Test(EQ,Z) l0800_9316
	// succ:  l0800_92EE l0800_9316
l0800_92EE:
	SCZO = cond(al - 0x2D)
	branch Test(NE,Z) l0800_92D2
	// succ:  l0800_92F2 l0800_92D2
l0800_92F2:
	SCZO = cond(dl - Mem0[es:si:byte])
	branch Test(UGT,CZ) l0800_92D2
	// succ:  l0800_92F7 l0800_92D2
l0800_92F7:
	SCZO = cond(Mem0[es:si:byte] - 0x5D)
	branch Test(EQ,Z) l0800_92D2
	// succ:  l0800_92FD l0800_92D2
l0800_92FD:
	al = Mem0[ds:si:byte]
	si = si + 0x0001
	al = al - dl
	SCZO = cond(al)
	branch Test(EQ,Z) l0800_92E4
	// succ:  l0800_9303 l0800_92E4
l0800_9303:
	dl = dl + al
	SCZO = cond(dl)
	// succ:  l0800_9305
l0800_9305:
	v61 = (ch & 0x01 << 0x08 - 0x01) != 0x00
	ch = __rol(ch, 0x01)
	C = v61
	di = di + 0x00 + C
	SCZO = cond(di)
	v62 = Mem0[ss:bp - 0x002A + di:byte] | ch
	Mem0[ss:bp - 0x002A + di:byte] = v62
	SZO = cond(Mem0[ss:bp - 0x002A + di:byte])
	C = false
	al = al - 0x01
	SZO = cond(al)
	branch Test(NE,Z) l0800_9305
	// succ:  l0800_9311 l0800_9305
l0800_9311:
	goto l0800_92E4
	// succ:  l0800_92E4
l0800_9313:
	// succ:  l0800_9313_thunk_fn0800_93BE
l0800_9313_thunk_fn0800_93BE:
	call fn0800_93BE (retsize: 0;)
	return
	// succ:  fn0800_8F97_exit
l0800_9316:
	Mem0[ss:bp + 0x000C:word16] = si
	v64 = Mem0[ss:bp - 0x000A:word16] & 0x7FFF
	Mem0[ss:bp - 0x000A:word16] = v64
	SZO = cond(Mem0[ss:bp - 0x000A:word16])
	C = false
	si = Mem0[ss:bp - 0x000A:word16]
	SZO = cond(Mem0[ss:bp - 0x0001:byte] & 0x01)
	C = false
	branch Test(NE,Z) l0800_932A
	// succ:  l0800_9327 l0800_932A
l0800_9327:
	call fn0800_8FAB (retsize: 2;)
	// succ:  l0800_932A
l0800_932A:
	si = si - 0x0001
	SZO = cond(si)
	branch Test(LT,SO) l0800_9385
	// succ:  l0800_932D l0800_9385
l0800_932D:
	v68 = Mem0[ss:bp - 0x0006:word16] + 0x0001
	Mem0[ss:bp - 0x0006:word16] = v68
	SZO = cond(v68)
	sp = sp - 2
	Mem0[ss:sp:word16] = es
	v69 = Mem0[ss:bp + 0x000A:word16]
	sp = sp - 2
	Mem0[ss:sp:word16] = v69
	v70 = Mem0[ss:bp + 0x0008:word16]
	sp = sp - 2
	Mem0[ss:sp:word16] = v70
	call SEQ(0x0800, Mem0[ss:bp + 0x0004:word16]) (retsize: 2;)
	cx = Mem0[ss:sp:word16]
	sp = sp + 2
	cx = Mem0[ss:sp:word16]
	sp = sp + 2
	es = Mem0[ss:sp:selector]
	sp = sp + 2
	ax = ax | ax
	SZO = cond(ax)
	C = false
	branch Test(LT,SO) l0800_9394
	// succ:  l0800_9341 l0800_9394
l0800_9341:
	v71 = ax
	ax = si
	si = v71
	bx = si
	cl = 0x03
	si = si >>u cl
	SCZO = cond(si)
	cx = 0x0107
	cl = cl & bl
	SZO = cond(cl)
	C = false
	ch = ch << cl
	SCZO = cond(ch)
	SZO = cond(Mem0[ss:bp - 0x002A + si:byte] & ch)
	C = false
	v72 = ax
	ax = si
	si = v72
	v73 = ax
	ax = bx
	bx = v73
	branch Test(EQ,Z) l0800_935E
	// succ:  l0800_9356 l0800_935E
l0800_9356:
	SZO = cond(Mem0[ss:bp - 0x0001:byte] & 0x10)
	C = false
	branch Test(EQ,Z) l0800_9364
	// succ:  l0800_935C l0800_9364
l0800_935C:
	goto l0800_936D
	// succ:  l0800_936D
l0800_935E:
	SZO = cond(Mem0[ss:bp - 0x0001:byte] & 0x10)
	C = false
	branch Test(EQ,Z) l0800_936D
	// succ:  l0800_9364 l0800_936D
l0800_9364:
	SZO = cond(Mem0[ss:bp - 0x0001:byte] & 0x01)
	C = false
	branch Test(NE,Z) l0800_932A
	// succ:  l0800_936A l0800_932A
l0800_936A:
	Mem0[es:di:byte] = al
	di = di + 0x0001
	goto l0800_932A
	// succ:  l0800_932A
l0800_936D:
	sp = sp - 2
	Mem0[ss:sp:word16] = es
	v76 = Mem0[ss:bp + 0x000A:word16]
	sp = sp - 2
	Mem0[ss:sp:word16] = v76
	v77 = Mem0[ss:bp + 0x0008:word16]
	sp = sp - 2
	Mem0[ss:sp:word16] = v77
	sp = sp - 2
	Mem0[ss:sp:word16] = ax
	call SEQ(0x0800, Mem0[ss:bp + 0x0006:word16]) (retsize: 2;)
	sp = sp + 0x0006
	SCZO = cond(sp)
	es = Mem0[ss:sp:selector]
	sp = sp + 2
	v78 = Mem0[ss:bp - 0x0006:word16] - 0x0001
	Mem0[ss:bp - 0x0006:word16] = v78
	SZO = cond(v78)
	si = si + 0x0001
	SZO = cond(si)
	SCZO = cond(si - Mem0[ss:bp - 0x000A:word16])
	branch Test(GE,SO) l0800_938E
	// succ:  l0800_9385 l0800_938E
l0800_9385:
	SZO = cond(Mem0[ss:bp - 0x0001:byte] & 0x01)
	C = false
	branch Test(NE,Z) l0800_9391
	// succ:  l0800_938B l0800_9391
l0800_938B:
	v79 = Mem0[ss:bp - 0x0004:word16] + 0x0001
	Mem0[ss:bp - 0x0004:word16] = v79
	SZO = cond(v79)
	// succ:  l0800_938E
l0800_938E:
	al = 0x00
	Mem0[es:di:byte] = al
	di = di + 0x0001
	// succ:  l0800_9391
l0800_9391:
	goto l0800_8FC8
	// succ:  l0800_8FC8
l0800_9394:
	si = si + 0x0001
	SZO = cond(si)
	SCZO = cond(si - Mem0[ss:bp - 0x000A:word16])
	branch Test(GE,SO) l0800_9398_thunk_fn0800_93A6
	goto l0800_939A
	// succ:  l0800_939A l0800_9398_thunk_fn0800_93A6
l0800_9398_thunk_fn0800_93A6:
	call fn0800_93A6 (retsize: 0;)
	return
	// succ:  fn0800_8F97_exit
l0800_939A:
	SZO = cond(Mem0[ss:bp - 0x0001:byte] & 0x01)
	C = false
	branch Test(NE,Z) l0800_939E_thunk_fn0800_93A6
	goto l0800_93A0
	// succ:  l0800_93A0 l0800_939E_thunk_fn0800_93A6
l0800_939E_thunk_fn0800_93A6:
	call fn0800_93A6 (retsize: 0;)
	return
	// succ:  fn0800_8F97_exit
l0800_93A0:
	al = 0x00
	Mem0[es:di:byte] = al
	di = di + 0x0001
	v80 = Mem0[ss:bp - 0x0004:word16] + 0x0001
	Mem0[ss:bp - 0x0004:word16] = v80
	SZO = cond(v80)
	// succ:  l0800_93A3_thunk_fn0800_93A6
l0800_93A3_thunk_fn0800_93A6:
	call fn0800_93A6 (retsize: 0;)
	return
	// succ:  fn0800_8F97_exit
fn0800_8F97_exit:


// fn0800_8FAB
// Return size: 2
define fn0800_8FAB
fn0800_8FAB_entry:
	// succ:  l0800_8FAB
l0800_8FAB:
	sp = fp
	Top = 0
	es_di = Mem0[ss:bp + 0x0010:segptr32]
	SZO = cond(Mem0[ss:bp - 0x0001:byte] & 0x20)
	C = false
	branch Test(EQ,Z) l0800_8FBC
	// succ:  l0800_8FB4 l0800_8FBC
l0800_8FB4:
	es_di = Mem0[ds:di + 0x0000:segptr32]
	v11 = Mem0[ss:bp + 0x0010:word16] + 0x0004
	Mem0[ss:bp + 0x0010:word16] = v11
	SCZO = cond(v11)
	return
	// succ:  fn0800_8FAB_exit
l0800_8FBC:
	di = Mem0[es:di:word16]
	sp = sp - 2
	Mem0[ss:sp:word16] = ds
	es = Mem0[ss:sp:selector]
	sp = sp + 2
	v14 = Mem0[ss:bp + 0x0010:word16] + 0x0002
	Mem0[ss:bp + 0x0010:word16] = v14
	SCZO = cond(v14)
	return
	// succ:  fn0800_8FAB_exit
fn0800_8FAB_exit:


// fn0800_912A
// Return size: 0
define fn0800_912A
fn0800_912A_entry:
	// succ:  l0800_912A
l0800_912A:
	sp = fp
	Top = 0
	// succ:  l0800_912A_thunk_fn0800_93C5
l0800_912A_thunk_fn0800_93C5:
	call fn0800_93C5 (retsize: 0;)
	return
	// succ:  fn0800_912A_exit
fn0800_912A_exit:


// fn0800_9145
// Return size: 0
define fn0800_9145
fn0800_9145_entry:
	// succ:  l0800_9145
l0800_9145:
	sp = fp
	Top = 0
	// succ:  l0800_9145_thunk_fn0800_93EF
l0800_9145_thunk_fn0800_93EF:
	call fn0800_93EF (retsize: 0;)
	return
	// succ:  fn0800_9145_exit
fn0800_9145_exit:


// fn0800_9169
// Return size: 0
define fn0800_9169
fn0800_9169_entry:
	// succ:  l0800_9169
l0800_9169:
	sp = fp
	Top = 0
	// succ:  l0800_9169_thunk_fn0800_93EF
l0800_9169_thunk_fn0800_93EF:
	call fn0800_93EF (retsize: 0;)
	return
	// succ:  fn0800_9169_exit
fn0800_9169_exit:


// fn0800_920E
// Return size: 0
define fn0800_920E
fn0800_920E_entry:
	// succ:  l0800_920E
l0800_920E:
	sp = fp
	Top = 0
	// succ:  l0800_920E_thunk_fn0800_93C5
l0800_920E_thunk_fn0800_93C5:
	call fn0800_93C5 (retsize: 0;)
	return
	// succ:  fn0800_920E_exit
fn0800_920E_exit:


// fn0800_93A6
// Return size: 0
define fn0800_93A6
fn0800_93A6_entry:
	// succ:  l0800_93A6
l0800_93A6:
	sp = v4
	Top = 0
	v7 = Mem0[ss:bp + 0x000A:word16]
	sp = sp - 2
	Mem0[ss:sp:word16] = v7
	v8 = Mem0[ss:bp + 0x0008:word16]
	sp = sp - 2
	Mem0[ss:sp:word16] = v8
	ax = 0xFFFF
	sp = sp - 2
	Mem0[ss:sp:word16] = ax
	call SEQ(0x0800, Mem0[ss:bp + 0x0006:word16]) (retsize: 2;)
	sp = sp + 0x0006
	SCZO = cond(sp)
	SCZO = cond(Mem0[ss:bp - 0x0004:word16] - 0x0001)
	v12 = Mem0[ss:bp - 0x0004:word16] - 0x00 - C
	Mem0[ss:bp - 0x0004:word16] = v12
	SCZO = cond(v12)
	// succ:  l0800_93BA_thunk_fn0800_93BE
l0800_93BA_thunk_fn0800_93BE:
	call fn0800_93BE (retsize: 0;)
	return
	// succ:  fn0800_93A6_exit
fn0800_93A6_exit:


// fn0800_93BE
// Return size: 0
define fn0800_93BE
fn0800_93BE_entry:
	// succ:  l0800_93BE
l0800_93BE:
	sp = v4
	Top = 0
	es = Mem0[ss:sp:selector]
	sp = sp + 2
	ax = Mem0[ss:bp - 0x0004:word16]
	// succ:  l0800_9453
l0800_9453:
	di = Mem0[ss:sp:word16]
	sp = sp + 2
	si = Mem0[ss:sp:word16]
	sp = sp + 2
	sp = bp
	bp = Mem0[ss:sp:word16]
	sp = sp + 2
	return
	// succ:  fn0800_93BE_exit
fn0800_93BE_exit:


// fn0800_93C5
// Return size: 0
define fn0800_93C5
fn0800_93C5_entry:
	// succ:  l0800_93C5
l0800_93C5:
	sp = v4
	Top = 0
	v7 = Mem0[ss:bp - 0x0006:word16] + 0x0001
	Mem0[ss:bp - 0x0006:word16] = v7
	SZO = cond(v7)
	v9 = Mem0[ss:bp + 0x000A:word16]
	sp = sp - 2
	Mem0[ss:sp:word16] = v9
	v10 = Mem0[ss:bp + 0x0008:word16]
	sp = sp - 2
	Mem0[ss:sp:word16] = v10
	call SEQ(0x0800, Mem0[ss:bp + 0x0004:word16]) (retsize: 2;)
	cx = Mem0[ss:sp:word16]
	sp = sp + 2
	cx = Mem0[ss:sp:word16]
	sp = sp + 2
	ax = ax | ax
	SZO = cond(ax)
	C = false
	branch Test(LE,SZO) l0800_93EA
	// succ:  l0800_93D7 l0800_93EA
l0800_93D7:
	al = al | al
	SZO = cond(al)
	C = false
	branch Test(SG,S) l0800_93E4
	// succ:  l0800_93DB l0800_93E4
l0800_93DB:
	v16 = ax
	ax = bx
	bx = v16
	SCZO = cond(Mem0[ds:bx + 0x257C:byte] - 0x01)
	v20 = ax
	ax = bx
	bx = v20
	branch Test(EQ,Z) l0800_93C5
	// succ:  l0800_93E4 l0800_93C5
l0800_93E4:
	cx = Mem0[ss:sp:word16]
	sp = sp + 2
	cx = cx + 0x0003
	SCZO = cond(cx)
	call cx (retsize: 2;)
	return
	// succ:  fn0800_93C5_exit
l0800_93EA:
	branch Test(EQ,Z) l0800_93E4
	// succ:  l0800_93EC l0800_93E4
l0800_93EC:
	cx = Mem0[ss:sp:word16]
	sp = sp + 2
	// succ:  l0800_93ED_thunk_fn0800_93A6
l0800_93ED_thunk_fn0800_93A6:
	call fn0800_93A6 (retsize: 0;)
	return
	// succ:  fn0800_93C5_exit
fn0800_93C5_exit:


// fn0800_93EF
// Return size: 0
define fn0800_93EF
fn0800_93EF_entry:
	// succ:  l0800_93EF
l0800_93EF:
	sp = fp
	Top = 0
	dx = dx - dx
	SCZO = cond(dx)
	cx = 0x0004
	// succ:  l0800_93F4
l0800_93F4:
	v8 = Mem0[ss:bp - 0x000A:word16] - 0x0001
	Mem0[ss:bp - 0x000A:word16] = v8
	SZO = cond(v8)
	branch Test(LT,SO) l0800_9442
	// succ:  l0800_93F9 l0800_9442
l0800_93F9:
	sp = sp - 2
	Mem0[ss:sp:word16] = dx
	sp = sp - 2
	Mem0[ss:sp:word16] = cx
	v11 = Mem0[ss:bp - 0x0006:word16] + 0x0001
	Mem0[ss:bp - 0x0006:word16] = v11
	SZO = cond(v11)
	v12 = Mem0[ss:bp + 0x000A:word16]
	sp = sp - 2
	Mem0[ss:sp:word16] = v12
	v13 = Mem0[ss:bp + 0x0008:word16]
	sp = sp - 2
	Mem0[ss:sp:word16] = v13
	call SEQ(0x0800, Mem0[ss:bp + 0x0004:word16]) (retsize: 2;)
	cx = Mem0[ss:sp:word16]
	sp = sp + 2
	cx = Mem0[ss:sp:word16]
	sp = sp + 2
	cx = Mem0[ss:sp:word16]
	sp = sp + 2
	dx = Mem0[ss:sp:word16]
	sp = sp + 2
	ax = ax | ax
	SZO = cond(ax)
	C = false
	branch Test(LE,SZO) l0800_9444
	// succ:  l0800_940F l0800_9444
l0800_940F:
	cl = cl - 0x01
	SZO = cond(cl)
	branch Test(LT,SO) l0800_9444
	// succ:  l0800_9413 l0800_9444
l0800_9413:
	ch = al
	ch = ch - 0x30
	SCZO = cond(ch)
	branch Test(ULT,C) l0800_9444
	// succ:  l0800_941A l0800_9444
l0800_941A:
	SCZO = cond(ch - 0x0A)
	branch Test(ULT,C) l0800_9436
	// succ:  l0800_941F l0800_9436
l0800_941F:
	ch = ch - 0x11
	SCZO = cond(ch)
	branch Test(ULT,C) l0800_9444
	// succ:  l0800_9424 l0800_9444
l0800_9424:
	SCZO = cond(ch - 0x06)
	branch Test(ULT,C) l0800_9433
	// succ:  l0800_9429 l0800_9433
l0800_9429:
	ch = ch - 0x20
	SCZO = cond(ch)
	branch Test(ULT,C) l0800_9444
	// succ:  l0800_942E l0800_9444
l0800_942E:
	SCZO = cond(ch - 0x06)
	branch Test(UGE,C) l0800_9444
	// succ:  l0800_9433 l0800_9444
l0800_9433:
	ch = ch + 0x0A
	SCZO = cond(ch)
	// succ:  l0800_9436
l0800_9436:
	dx = dx << 0x0001
	SCZO = cond(dx)
	dx = dx << 0x0001
	SCZO = cond(dx)
	dx = dx << 0x0001
	SCZO = cond(dx)
	dx = dx << 0x0001
	SCZO = cond(dx)
	dl = dl + ch
	SCZO = cond(dl)
	goto l0800_93F4
	// succ:  l0800_93F4
l0800_9442:
	ax = ax - ax
	SCZO = cond(ax)
	// succ:  l0800_9444
l0800_9444:
	SCZO = cond(cl - 0x04)
	branch Test(EQ,Z) l0800_944F
	// succ:  l0800_9449 l0800_944F
l0800_9449:
	cx = Mem0[ss:sp:word16]
	sp = sp + 2
	cx = cx + 0x0003
	SCZO = cond(cx)
	call cx (retsize: 2;)
	return
	// succ:  fn0800_93EF_exit
l0800_944F:
	cx = Mem0[ss:sp:word16]
	sp = sp + 2
	// succ:  l0800_9450_thunk_fn0800_93A6
l0800_9450_thunk_fn0800_93A6:
	call fn0800_93A6 (retsize: 0;)
	return
	// succ:  fn0800_93EF_exit
fn0800_93EF_exit:


// fn0800_9485
// Return size: 2
define fn0800_9485
fn0800_9485_entry:
	// succ:  l0800_9485
l0800_9485:
	sp = fp
	Top = 0
	sp = sp - 2
	Mem0[ss:sp:word16] = bx
	bl = bl - 0x30
	SCZO = cond(bl)
	branch Test(ULT,C) l0800_94AD
	// succ:  l0800_948B l0800_94AD
l0800_948B:
	SCZO = cond(bl - 0x09)
	branch Test(ULE,CZ) l0800_94A2
	// succ:  l0800_9490 l0800_94A2
l0800_9490:
	SCZO = cond(bl - 0x2A)
	branch Test(UGT,CZ) l0800_949A
	// succ:  l0800_9495 l0800_949A
l0800_9495:
	bl = bl - 0x07
	SCZO = cond(bl)
	goto l0800_949D
	// succ:  l0800_949D
l0800_949A:
	bl = bl - 0x27
	SCZO = cond(bl)
	// succ:  l0800_949D
l0800_949D:
	SCZO = cond(bl - 0x09)
	branch Test(ULE,CZ) l0800_94AD
	// succ:  l0800_94A2 l0800_94AD
l0800_94A2:
	SCZO = cond(bl - cl)
	branch Test(UGE,C) l0800_94AD
	// succ:  l0800_94A6 l0800_94AD
l0800_94A6:
	sp = sp + 0x0001
	SZO = cond(sp)
	sp = sp + 0x0001
	SZO = cond(sp)
	C = false
	bh = 0x00
	goto l0800_94AF
	// succ:  l0800_94AF
l0800_94AD:
	bx = Mem0[ss:sp:word16]
	sp = sp + 2
	C = true
	// succ:  l0800_94AF
l0800_94AF:
	return
	// succ:  fn0800_9485_exit
fn0800_9485_exit:


// fn0800_94B0
// Return size: 2
define fn0800_94B0
fn0800_94B0_entry:
	// succ:  l0800_94B0
l0800_94B0:
	sp = fp
	Top = 0
	sp = sp - 2
	Mem0[ss:sp:word16] = bp
	bp = sp
	sp = sp - 0x0006
	SCZO = cond(sp)
	sp = sp - 2
	Mem0[ss:sp:word16] = si
	sp = sp - 2
	Mem0[ss:sp:word16] = di
	Mem0[ss:bp - 0x0001:byte] = 0x00
	Mem0[ss:bp - 0x0004:word16] = 0x0000
	Mem0[ss:bp - 0x0006:word16] = 0x0001
	// succ:  l0800_94C6
l0800_94C6:
	v8 = Mem0[ss:bp - 0x0004:word16] + 0x0001
	Mem0[ss:bp - 0x0004:word16] = v8
	SZO = cond(v8)
	v10 = Mem0[ss:bp + 0x000A:word16]
	sp = sp - 2
	Mem0[ss:sp:word16] = v10
	v11 = Mem0[ss:bp + 0x0008:word16]
	sp = sp - 2
	Mem0[ss:sp:word16] = v11
	call SEQ(0x0800, Mem0[ss:bp + 0x0004:word16]) (retsize: 2;)
	cx = Mem0[ss:sp:word16]
	sp = sp + 2
	cx = Mem0[ss:sp:word16]
	sp = sp + 2
	ax = ax | ax
	SZO = cond(ax)
	C = false
	branch Test(LT,SO) l0800_9549
	// succ:  l0800_94D8 l0800_9549
l0800_94D8:
	ax = (int16) al
	v17 = ax
	ax = bx
	bx = v17
	SZO = cond(bl & 0x80)
	C = false
	branch Test(NE,Z) l0800_94E7
	// succ:  l0800_94DF l0800_94E7
l0800_94DF:
	di = 0x2251
	SZO = cond(Mem0[ds:bx + di:byte] & 0x01)
	C = false
	branch Test(NE,Z) l0800_94C6
	// succ:  l0800_94E7 l0800_94C6
l0800_94E7:
	v22 = ax
	ax = bx
	bx = v22
	v23 = Mem0[ss:bp + 0x000E:word16] - 0x0001
	Mem0[ss:bp + 0x000E:word16] = v23
	SZO = cond(v23)
	branch Test(LT,SO) l0800_9550
	// succ:  l0800_94ED l0800_9550
l0800_94ED:
	SCZO = cond(al - 0x2B)
	branch Test(EQ,Z) l0800_94F8
	// succ:  l0800_94F1 l0800_94F8
l0800_94F1:
	SCZO = cond(al - 0x2D)
	branch Test(NE,Z) l0800_950F
	// succ:  l0800_94F5 l0800_950F
l0800_94F5:
	v24 = Mem0[ss:bp - 0x0001:byte] + 0x01
	Mem0[ss:bp - 0x0001:byte] = v24
	SZO = cond(v24)
	// succ:  l0800_94F8
l0800_94F8:
	v25 = Mem0[ss:bp + 0x000E:word16] - 0x0001
	Mem0[ss:bp + 0x000E:word16] = v25
	SZO = cond(v25)
	branch Test(LT,SO) l0800_9550
	// succ:  l0800_94FD l0800_9550
l0800_94FD:
	v26 = Mem0[ss:bp - 0x0004:word16] + 0x0001
	Mem0[ss:bp - 0x0004:word16] = v26
	SZO = cond(v26)
	v27 = Mem0[ss:bp + 0x000A:word16]
	sp = sp - 2
	Mem0[ss:sp:word16] = v27
	v28 = Mem0[ss:bp + 0x0008:word16]
	sp = sp - 2
	Mem0[ss:sp:word16] = v28
	call SEQ(0x0800, Mem0[ss:bp + 0x0004:word16]) (retsize: 2;)
	cx = Mem0[ss:sp:word16]
	sp = sp + 2
	cx = Mem0[ss:sp:word16]
	sp = sp + 2
	ax = ax | ax
	SZO = cond(ax)
	C = false
	branch Test(LT,SO) l0800_9549
	// succ:  l0800_950F l0800_9549
l0800_950F:
	si = si - si
	SCZO = cond(si)
	di = si
	cx = Mem0[ss:bp + 0x000C:word16]
	branch cx == 0x0000 l0800_956E
	// succ:  l0800_9518 l0800_956E
l0800_9518:
	SCZO = cond(cx - 0x0024)
	branch Test(UGT,CZ) l0800_9550
	// succ:  l0800_951D l0800_9550
l0800_951D:
	SCZO = cond(cl - 0x02)
	branch Test(ULT,C) l0800_9550
	// succ:  l0800_9522 l0800_9550
l0800_9522:
	SCZO = cond(al - 0x30)
	branch Test(NE,Z) l0800_959E
	// succ:  l0800_9526 l0800_959E
l0800_9526:
	SCZO = cond(cl - 0x10)
	branch Test(NE,Z) l0800_959C
	// succ:  l0800_952B l0800_959C
l0800_952B:
	v31 = Mem0[ss:bp + 0x000E:word16] - 0x0001
	Mem0[ss:bp + 0x000E:word16] = v31
	SZO = cond(v31)
	branch Test(LT,SO) l0800_956B
	// succ:  l0800_9530 l0800_956B
l0800_9530:
	v32 = Mem0[ss:bp - 0x0004:word16] + 0x0001
	Mem0[ss:bp - 0x0004:word16] = v32
	SZO = cond(v32)
	v33 = Mem0[ss:bp + 0x000A:word16]
	sp = sp - 2
	Mem0[ss:sp:word16] = v33
	v34 = Mem0[ss:bp + 0x0008:word16]
	sp = sp - 2
	Mem0[ss:sp:word16] = v34
	call SEQ(0x0800, Mem0[ss:bp + 0x0004:word16]) (retsize: 2;)
	cx = Mem0[ss:sp:word16]
	sp = sp + 2
	cx = Mem0[ss:sp:word16]
	sp = sp + 2
	SCZO = cond(al - 0x78)
	branch Test(EQ,Z) l0800_959C
	// succ:  l0800_9542 l0800_959C
l0800_9542:
	SCZO = cond(al - 0x58)
	branch Test(EQ,Z) l0800_959C
	// succ:  l0800_9546 l0800_959C
l0800_9546:
	goto l0800_95C8
	// succ:  l0800_95C8
l0800_9549:
	Mem0[ss:bp - 0x0006:word16] = 0xFFFF
	goto l0800_9555
	// succ:  l0800_9555
l0800_9550:
	Mem0[ss:bp - 0x0006:word16] = 0x0000
	// succ:  l0800_9555
l0800_9555:
	v35 = Mem0[ss:bp + 0x000A:word16]
	sp = sp - 2
	Mem0[ss:sp:word16] = v35
	v36 = Mem0[ss:bp + 0x0008:word16]
	sp = sp - 2
	Mem0[ss:sp:word16] = v36
	sp = sp - 2
	Mem0[ss:sp:word16] = ax
	call SEQ(0x0800, Mem0[ss:bp + 0x0006:word16]) (retsize: 2;)
	sp = sp + 0x0006
	SCZO = cond(sp)
	v37 = Mem0[ss:bp - 0x0004:word16] - 0x0001
	Mem0[ss:bp - 0x0004:word16] = v37
	SZO = cond(v37)
	ax = ax - ax
	SCZO = cond(ax)
	dx_ax = (int32) ax
	goto l0800_9622
	// succ:  l0800_9622
l0800_956B:
	goto l0800_9612
	// succ:  l0800_9612
l0800_956E:
	SCZO = cond(al - 0x30)
	Mem0[ss:bp + 0x000C:word16] = 0x000A
	branch Test(NE,Z) l0800_959E
	// succ:  l0800_9577 l0800_959E
l0800_9577:
	v70 = Mem0[ss:bp + 0x000E:word16] - 0x0001
	Mem0[ss:bp + 0x000E:word16] = v70
	SZO = cond(v70)
	branch Test(LT,SO) l0800_956B
	// succ:  l0800_957C l0800_956B
l0800_957C:
	v71 = Mem0[ss:bp - 0x0004:word16] + 0x0001
	Mem0[ss:bp - 0x0004:word16] = v71
	SZO = cond(v71)
	v72 = Mem0[ss:bp + 0x000A:word16]
	sp = sp - 2
	Mem0[ss:sp:word16] = v72
	v73 = Mem0[ss:bp + 0x0008:word16]
	sp = sp - 2
	Mem0[ss:sp:word16] = v73
	call SEQ(0x0800, Mem0[ss:bp + 0x0004:word16]) (retsize: 2;)
	cx = Mem0[ss:sp:word16]
	sp = sp + 2
	cx = Mem0[ss:sp:word16]
	sp = sp + 2
	Mem0[ss:bp + 0x000C:word16] = 0x0008
	SCZO = cond(al - 0x78)
	branch Test(EQ,Z) l0800_9597
	// succ:  l0800_9593 l0800_9597
l0800_9593:
	SCZO = cond(al - 0x58)
	branch Test(NE,Z) l0800_95C8
	// succ:  l0800_9597 l0800_95C8
l0800_9597:
	Mem0[ss:bp + 0x000C:word16] = 0x0010
	// succ:  l0800_959C
l0800_959C:
	goto l0800_95B5
	// succ:  l0800_95B5
l0800_959E:
	cx = Mem0[ss:bp + 0x000C:word16]
	v60 = ax
	ax = bx
	bx = v60
	call fn0800_9485 (retsize: 2;)
	v61 = ax
	ax = bx
	bx = v61
	branch Test(ULT,C) l0800_9550
	// succ:  l0800_95A8 l0800_9550
l0800_95A8:
	v62 = ax
	ax = si
	si = v62
	goto l0800_95B5
	// succ:  l0800_95B5
l0800_95AB:
	v51 = ax
	ax = si
	si = v51
	dx_ax = Mem0[ss:bp + 0x000C:word16] *u ax
	SCZO = cond(dx_ax)
	si = si + ax
	SCZO = cond(si)
	di = di + dx + C
	SCZO = cond(di)
	branch Test(NE,Z) l0800_95E5
	// succ:  l0800_95B5 l0800_95E5
l0800_95B5:
	v44 = Mem0[ss:bp + 0x000E:word16] - 0x0001
	Mem0[ss:bp + 0x000E:word16] = v44
	SZO = cond(v44)
	branch Test(LT,SO) l0800_9612
	// succ:  l0800_95BA l0800_9612
l0800_95BA:
	v45 = Mem0[ss:bp - 0x0004:word16] + 0x0001
	Mem0[ss:bp - 0x0004:word16] = v45
	SZO = cond(v45)
	v46 = Mem0[ss:bp + 0x000A:word16]
	sp = sp - 2
	Mem0[ss:sp:word16] = v46
	v47 = Mem0[ss:bp + 0x0008:word16]
	sp = sp - 2
	Mem0[ss:sp:word16] = v47
	call SEQ(0x0800, Mem0[ss:bp + 0x0004:word16]) (retsize: 2;)
	cx = Mem0[ss:sp:word16]
	sp = sp + 2
	cx = Mem0[ss:sp:word16]
	sp = sp + 2
	// succ:  l0800_95C8
l0800_95C8:
	cx = Mem0[ss:bp + 0x000C:word16]
	v39 = ax
	ax = bx
	bx = v39
	call fn0800_9485 (retsize: 2;)
	v40 = ax
	ax = bx
	bx = v40
	branch Test(UGE,C) l0800_95AB
	// succ:  l0800_95D2 l0800_95AB
l0800_95D2:
	goto l0800_9602
	// succ:  l0800_9602
l0800_95D4:
	v63 = ax
	ax = si
	si = v63
	dx_ax = cx *u ax
	SCZO = cond(dx_ax)
	v64 = ax
	ax = di
	di = v64
	v65 = dx
	dx = cx
	cx = v65
	dx_ax = dx *u ax
	SCZO = cond(dx_ax)
	si = si + di
	SCZO = cond(si)
	ax = ax + cx + C
	SCZO = cond(ax)
	v66 = ax
	ax = di
	di = v66
	dl = dl + dh + C
	SCZO = cond(dl)
	branch Test(NE,Z) l0800_9636
	// succ:  l0800_95E5 l0800_9636
l0800_95E5:
	v54 = Mem0[ss:bp + 0x000E:word16] - 0x0001
	Mem0[ss:bp + 0x000E:word16] = v54
	SZO = cond(v54)
	branch Test(LT,SO) l0800_9612
	// succ:  l0800_95EA l0800_9612
l0800_95EA:
	v55 = Mem0[ss:bp - 0x0004:word16] + 0x0001
	Mem0[ss:bp - 0x0004:word16] = v55
	SZO = cond(v55)
	v56 = Mem0[ss:bp + 0x000A:word16]
	sp = sp - 2
	Mem0[ss:sp:word16] = v56
	v57 = Mem0[ss:bp + 0x0008:word16]
	sp = sp - 2
	Mem0[ss:sp:word16] = v57
	call SEQ(0x0800, Mem0[ss:bp + 0x0004:word16]) (retsize: 2;)
	cx = Mem0[ss:sp:word16]
	sp = sp + 2
	cx = Mem0[ss:sp:word16]
	sp = sp + 2
	cx = Mem0[ss:bp + 0x000C:word16]
	v58 = ax
	ax = bx
	bx = v58
	call fn0800_9485 (retsize: 2;)
	v59 = ax
	ax = bx
	bx = v59
	branch Test(UGE,C) l0800_95D4
	// succ:  l0800_9602 l0800_95D4
l0800_9602:
	v48 = Mem0[ss:bp + 0x000A:word16]
	sp = sp - 2
	Mem0[ss:sp:word16] = v48
	v49 = Mem0[ss:bp + 0x0008:word16]
	sp = sp - 2
	Mem0[ss:sp:word16] = v49
	sp = sp - 2
	Mem0[ss:sp:word16] = ax
	call SEQ(0x0800, Mem0[ss:bp + 0x0006:word16]) (retsize: 2;)
	sp = sp + 0x0006
	SCZO = cond(sp)
	v50 = Mem0[ss:bp - 0x0004:word16] - 0x0001
	Mem0[ss:bp - 0x0004:word16] = v50
	SZO = cond(v50)
	// succ:  l0800_9612
l0800_9612:
	dx = di
	v53 = ax
	ax = si
	si = v53
	SCZO = cond(Mem0[ss:bp - 0x0001:byte] - 0x00)
	branch Test(EQ,Z) l0800_9622
	// succ:  l0800_961B l0800_9622
l0800_961B:
	dx = -dx
	SCZO = cond(dx)
	C = dx == 0x0000
	ax = -ax
	SCZO = cond(ax)
	C = ax == 0x0000
	dx = dx - 0x00 - C
	SCZO = cond(dx)
	// succ:  l0800_9622
l0800_9622:
	es_di = Mem0[ss:bp + 0x0010:segptr32]
	bx = Mem0[ss:bp - 0x0004:word16]
	v43 = Mem0[es:di:word16] + bx
	Mem0[es:di:word16] = v43
	SCZO = cond(v43)
	es_di = Mem0[ss:bp + 0x0014:segptr32]
	bx = Mem0[ss:bp - 0x0006:word16]
	Mem0[es:di:word16] = bx
	goto l0800_964C
	// succ:  l0800_964C
l0800_9636:
	ax = 0xFFFF
	dx = 0x7FFF
	al = al + Mem0[ss:bp - 0x0001:byte]
	SCZO = cond(al)
	ah = ah + 0x00 + C
	SCZO = cond(ah)
	dx = dx + 0x00 + C
	SCZO = cond(dx)
	Mem0[ss:bp - 0x0006:word16] = 0x0002
	goto l0800_9622
	// succ:  l0800_9622
l0800_964C:
	di = Mem0[ss:sp:word16]
	sp = sp + 2
	si = Mem0[ss:sp:word16]
	sp = sp + 2
	sp = bp
	bp = Mem0[ss:sp:word16]
	sp = sp + 2
	return
	// succ:  fn0800_94B0_exit
fn0800_94B0_exit:


// fn0800_9652
// Return size: 2
define fn0800_9652
fn0800_9652_entry:
	// succ:  l0800_9652
l0800_9652:
	sp = fp
	Top = 0
	sp = sp - 2
	Mem0[ss:sp:word16] = bp
	bp = sp
	sp = sp - 2
	Mem0[ss:sp:word16] = si
	ah = 0x2B
	es_si = Mem0[ss:bp + 0x0004:segptr32]
	cx = Mem0[es:si:word16]
	dx = Mem0[es:si + 0x0002:word16]
	__syscall(0x21)
	si = Mem0[ss:sp:word16]
	sp = sp + 2
	bp = Mem0[ss:sp:word16]
	sp = sp + 2
	return
	// succ:  fn0800_9652_exit
fn0800_9652_exit:


// fn0800_9667
// Return size: 2
define fn0800_9667
fn0800_9667_entry:
	// succ:  l0800_9667
l0800_9667:
	sp = fp
	Top = 0
	sp = sp - 2
	Mem0[ss:sp:word16] = bp
	bp = sp
	sp = sp - 2
	Mem0[ss:sp:word16] = si
	ah = 0x2D
	es_si = Mem0[ss:bp + 0x0004:segptr32]
	cx = Mem0[es:si:word16]
	dx = Mem0[es:si + 0x0002:word16]
	__syscall(0x21)
	si = Mem0[ss:sp:word16]
	sp = sp + 2
	bp = Mem0[ss:sp:word16]
	sp = sp + 2
	return
	// succ:  fn0800_9667_exit
fn0800_9667_exit:


// fn0800_9764
// Return size: 2
define fn0800_9764
fn0800_9764_entry:
	// succ:  l0800_9764
l0800_9764:
	sp = fp
	Top = 0
	sp = sp - 2
	Mem0[ss:sp:word16] = bp
	bp = sp
	sp = sp - 0x000C
	SCZO = cond(sp)
	sp = sp - 2
	Mem0[ss:sp:word16] = ss
	ax = bp - 0x0004
	sp = sp - 2
	Mem0[ss:sp:word16] = ax
	call fn0800_8B95 (retsize: 2;)
	cx = Mem0[ss:sp:word16]
	sp = sp + 2
	cx = Mem0[ss:sp:word16]
	sp = sp + 2
	sp = sp - 2
	Mem0[ss:sp:word16] = ss
	ax = bp - 0x0008
	sp = sp - 2
	Mem0[ss:sp:word16] = ax
	call fn0800_8BA8 (retsize: 2;)
	cx = Mem0[ss:sp:word16]
	sp = sp + 2
	cx = Mem0[ss:sp:word16]
	sp = sp + 2
	sp = sp - 2
	Mem0[ss:sp:word16] = ss
	ax = bp - 0x0008
	sp = sp - 2
	Mem0[ss:sp:word16] = ax
	sp = sp - 2
	Mem0[ss:sp:word16] = ss
	ax = bp - 0x0004
	sp = sp - 2
	Mem0[ss:sp:word16] = ax
	call fn0800_C04F (retsize: 2;)
	sp = sp + 0x0008
	SCZO = cond(sp)
	Mem0[ss:bp - 0x000A:word16] = dx
	Mem0[ss:bp - 0x000C:word16] = ax
	ax = Mem0[ss:bp + 0x0004:word16]
	ax = ax | Mem0[ss:bp + 0x0006:word16]
	SZO = cond(ax)
	C = false
	branch Test(EQ,Z) l0800_97AC
	// succ:  l0800_979C l0800_97AC
l0800_979C:
	es_bx = Mem0[ss:bp + 0x0004:segptr32]
	ax = Mem0[ss:bp - 0x000A:word16]
	dx = Mem0[ss:bp - 0x000C:word16]
	Mem0[es:bx + 0x0002:word16] = ax
	Mem0[es:bx:word16] = dx
	// succ:  l0800_97AC
l0800_97AC:
	dx = Mem0[ss:bp - 0x000A:word16]
	ax = Mem0[ss:bp - 0x000C:word16]
	sp = bp
	bp = Mem0[ss:sp:word16]
	sp = sp + 2
	return
	// succ:  fn0800_9764_exit
fn0800_9764_exit:


// fn0800_97B6
// Return size: 2
define fn0800_97B6
fn0800_97B6_entry:
	// succ:  l0800_97B6
l0800_97B6:
	sp = fp
	Top = 0
	sp = sp - 2
	Mem0[ss:sp:word16] = bp
	bp = sp
	ax = 0x0001
	sp = sp - 2
	Mem0[ss:sp:word16] = ax
	ax = ax ^ ax
	SZO = cond(ax)
	C = false
	sp = sp - 2
	Mem0[ss:sp:word16] = ax
	sp = sp - 2
	Mem0[ss:sp:word16] = ax
	v8 = Mem0[ss:bp + 0x0004:word16]
	sp = sp - 2
	Mem0[ss:sp:word16] = v8
	call fn0800_8E29 (retsize: 2;)
	sp = sp + 0x0008
	SCZO = cond(sp)
	bp = Mem0[ss:sp:word16]
	sp = sp + 2
	return
	// succ:  fn0800_97B6_exit
fn0800_97B6_exit:


// fn0800_97CC
// Return size: 2
define fn0800_97CC
fn0800_97CC_entry:
	// succ:  l0800_97CC
l0800_97CC:
	sp = fp
	Top = 0
	sp = sp - 2
	Mem0[ss:sp:word16] = bp
	bp = sp
	dx = Mem0[ss:bp + 0x0004:word16]
	SCZO = cond(dx - 0xFFFF)
	branch Test(NE,Z) l0800_97DC
	// succ:  l0800_97D7 l0800_97DC
l0800_97D7:
	ax = 0xFFFF
	goto l0800_97F6
	// succ:  l0800_97F6
l0800_97DC:
	al = dl
	ah = 0x00
	bx = ax
	SZO = cond(Mem0[ds:bx + 0x2251:byte] & 0x08)
	C = false
	branch Test(EQ,Z) l0800_97F2
	// succ:  l0800_97E9 l0800_97F2
l0800_97E9:
	al = dl
	ah = 0x00
	ax = ax + 0xFFE0
	SCZO = cond(ax)
	goto l0800_97F6
	// succ:  l0800_97F6
l0800_97F2:
	al = dl
	ah = 0x00
	// succ:  l0800_97F6
l0800_97F6:
	bp = Mem0[ss:sp:word16]
	sp = sp + 2
	return
	// succ:  fn0800_97CC_exit
fn0800_97CC_exit:


// fn0800_97F8
// Return size: 2
define fn0800_97F8
fn0800_97F8_entry:
	// succ:  l0800_97F8
l0800_97F8:
	sp = fp
	Top = 0
	sp = sp - 2
	Mem0[ss:sp:word16] = bp
	bp = sp
	sp = sp - 2
	Mem0[ss:sp:word16] = ds
	ah = 0x41
	ds_dx = Mem0[ss:bp + 0x0004:segptr32]
	C = msdos_delete_file(ds, dx)
	ds = Mem0[ss:sp:selector]
	sp = sp + 2
	branch Test(ULT,C) l0800_980A
	// succ:  l0800_9806 l0800_980A
l0800_9806:
	ax = ax ^ ax
	SZO = cond(ax)
	C = false
	goto l0800_980E
	// succ:  l0800_980E
l0800_980A:
	sp = sp - 2
	Mem0[ss:sp:word16] = ax
	call fn0800_8D2B (retsize: 2;)
	sp = sp + 0x0002
	// succ:  l0800_980E
l0800_980E:
	bp = Mem0[ss:sp:word16]
	sp = sp + 2
	return
	// succ:  fn0800_97F8_exit
fn0800_97F8_exit:


// fn0800_9810
// Return size: 2
define fn0800_9810
fn0800_9810_entry:
	// succ:  l0800_9810
l0800_9810:
	sp = fp
	Top = 0
	al = dh
	call fn0800_9817 (retsize: 2;)
	sp = sp + 0xFFFE
	al = dl
	// succ:  l0800_9815_thunk_fn0800_9817
l0800_9815_thunk_fn0800_9817:
	call fn0800_9817 (retsize: 0;)
	return
	// succ:  fn0800_9810_exit
fn0800_9810_exit:


// fn0800_9817
// Return size: 2
define fn0800_9817
fn0800_9817_entry:
	// succ:  l0800_9817
l0800_9817:
	sp = fp
	Top = 0
	ax = __aam(al)
	v5 = al
	al = ah
	ah = v5
	call fn0800_9820 (retsize: 2;)
	v7 = al
	al = ah
	ah = v7
	// succ:  l0800_981E_thunk_fn0800_9820
l0800_981E_thunk_fn0800_9820:
	call fn0800_9820 (retsize: 0;)
	return
	// succ:  fn0800_9817_exit
fn0800_9817_exit:


// fn0800_9820
// Return size: 2
define fn0800_9820
fn0800_9820_entry:
	// succ:  l0800_9820
l0800_9820:
	sp = fp
	Top = 0
	al = al + 0x90
	SCZO = cond(al)
	C = __daa(al, &al)
	al = al + 0x40 + C
	SCZO = cond(al)
	C = __daa(al, &al)
	Mem0[es:di:byte] = al
	di = di + 0x0001
	return
	// succ:  fn0800_9820_exit
fn0800_9820_exit:


// fn0800_9828
// Return size: 2
define fn0800_9828
fn0800_9828_entry:
	// succ:  l0800_9828
l0800_9828:
	sp = fp
	Top = 0
	sp = sp - 2
	Mem0[ss:sp:word16] = bp
	bp = sp
	sp = sp - 0x0096
	SCZO = cond(sp)
	sp = sp - 2
	Mem0[ss:sp:word16] = si
	sp = sp - 2
	Mem0[ss:sp:word16] = di
	Mem0[ss:bp - 0x0012:word16] = 0x0000
	Mem0[ss:bp - 0x0014:word16] = 0x0050
	Mem0[ss:bp - 0x0016:word16] = 0x0000
	// succ:  l0800_988C
l0800_988C:
	sp = sp - 2
	Mem0[ss:sp:word16] = es
	D = false
	di = bp - 0x0096
	Mem0[ss:bp - 0x0004:word16] = di
	// succ:  l0800_9895
l0800_9895:
	di = Mem0[ss:bp - 0x0004:word16]
	// succ:  l0800_9898
l0800_9898:
	es_si = Mem0[ss:bp + 0x0006:segptr32]
	// succ:  l0800_989B
l0800_989B:
	al = Mem0[ds:si:byte]
	si = si + 0x0001
	al = al | al
	SZO = cond(al)
	C = false
	branch Test(EQ,Z) l0800_98B3
	// succ:  l0800_98A1 l0800_98B3
l0800_98A1:
	SCZO = cond(al - 0x25)
	branch Test(EQ,Z) l0800_98B6
	// succ:  l0800_98A5 l0800_98B6
l0800_98A5:
	Mem0[ss:di:byte] = al
	di = di + 0x0001
	SZO = cond(di)
	v16 = Mem0[ss:bp - 0x0014:byte] - 0x01
	Mem0[ss:bp - 0x0014:byte] = v16
	SZO = cond(v16)
	branch Test(GT,SZO) l0800_989B
	// succ:  l0800_98AE l0800_989B
l0800_98AE:
	call fn0800_9858 (retsize: 2;)
	goto l0800_989B
	// succ:  l0800_989B
l0800_98B3:
	goto l0800_9C96
	// succ:  l0800_9C96
l0800_98B6:
	Mem0[ss:bp - 0x0010:word16] = si
	al = Mem0[ds:si:byte]
	si = si + 0x0001
	SCZO = cond(al - 0x25)
	branch Test(EQ,Z) l0800_98A5
	// succ:  l0800_98BF l0800_98A5
l0800_98BF:
	Mem0[ss:bp - 0x0004:word16] = di
	cx = cx ^ cx
	SZO = cond(cx)
	C = false
	Mem0[ss:bp - 0x000E:word16] = cx
	Mem0[ss:bp - 0x0002:word16] = 0x0020
	Mem0[ss:bp - 0x000B:byte] = cl
	Mem0[ss:bp - 0x0008:word16] = 0xFFFF
	Mem0[ss:bp - 0x000A:word16] = 0xFFFF
	goto l0800_98DD
	// succ:  l0800_98DD
l0800_98DB:
	al = Mem0[ds:si:byte]
	si = si + 0x0001
	// succ:  l0800_98DD
l0800_98DD:
	ah = ah ^ ah
	SZO = cond(ah)
	C = false
	dx = ax
	bx = ax
	bl = bl - 0x20
	SCZO = cond(bl)
	SCZO = cond(bl - 0x60)
	branch Test(UGE,C) l0800_98FE
	// succ:  l0800_98EB l0800_98FE
l0800_98EB:
	bl = Mem0[ds:bx + 0x2605:byte]
	SCZO = cond(bx - 0x0017)
	branch Test(ULE,CZ) l0800_98F7
	// succ:  l0800_98F4 l0800_98F7
l0800_98F4:
	goto l0800_9C82
	// succ:  l0800_9C82
l0800_98F7:
	bx = bx << 0x0001
	SCZO = cond(bx)
	switch (bx) { l0800_9917 l0800_9901 l0800_994C l0800_990C l0800_997A l0800_9987 l0800_99C5 l0800_99CC l0800_99D1 l0800_9935 l0800_99FA l0800_99D8 l0800_99DC l0800_99E0 l0800_9A55 l0800_9B02 l0800_9AA5 l0800_9AC5 l0800_9C46 l0800_9C82 l0800_9C82 l0800_9C82 l0800_9927 l0800_992D }
	// succ:  l0800_9917 l0800_9901 l0800_994C l0800_990C l0800_997A l0800_9987 l0800_99C5 l0800_99CC l0800_99D1 l0800_9935 l0800_99FA l0800_99D8 l0800_99DC l0800_99E0 l0800_9A55 l0800_9B02 l0800_9AA5 l0800_9AC5 l0800_9C46 l0800_9C82 l0800_9C82 l0800_9C82 l0800_9927 l0800_992D
l0800_98FE:
	goto l0800_9C82
	// succ:  l0800_9C82
l0800_9901:
	SCZO = cond(ch - 0x00)
	branch Test(UGT,CZ) l0800_98FE
	// succ:  l0800_9906 l0800_98FE
l0800_9906:
	v62 = Mem0[ss:bp - 0x0002:word16] | 0x0001
	Mem0[ss:bp - 0x0002:word16] = v62
	SZO = cond(Mem0[ss:bp - 0x0002:word16])
	C = false
	goto l0800_98DB
	// succ:  l0800_98DB
l0800_990C:
	SCZO = cond(ch - 0x00)
	branch Test(UGT,CZ) l0800_98FE
	// succ:  l0800_9911 l0800_98FE
l0800_9911:
	v27 = Mem0[ss:bp - 0x0002:word16] | 0x0002
	Mem0[ss:bp - 0x0002:word16] = v27
	SZO = cond(Mem0[ss:bp - 0x0002:word16])
	C = false
	goto l0800_98DB
	// succ:  l0800_98DB
l0800_9917:
	SCZO = cond(ch - 0x00)
	branch Test(UGT,CZ) l0800_98FE
	// succ:  l0800_991C l0800_98FE
l0800_991C:
	SCZO = cond(Mem0[ss:bp - 0x000B:byte] - 0x2B)
	branch Test(EQ,Z) l0800_9925
	// succ:  l0800_9922 l0800_9925
l0800_9922:
	Mem0[ss:bp - 0x000B:byte] = dl
	// succ:  l0800_9925
l0800_9925:
	goto l0800_98DB
	// succ:  l0800_98DB
l0800_9927:
	v30 = Mem0[ss:bp - 0x0002:word16] & 0xFFDF
	Mem0[ss:bp - 0x0002:word16] = v30
	SZO = cond(Mem0[ss:bp - 0x0002:word16])
	C = false
	goto l0800_9931
	// succ:  l0800_9931
l0800_992D:
	v29 = Mem0[ss:bp - 0x0002:word16] | 0x0020
	Mem0[ss:bp - 0x0002:word16] = v29
	SZO = cond(Mem0[ss:bp - 0x0002:word16])
	C = false
	// succ:  l0800_9931
l0800_9931:
	ch = 0x05
	goto l0800_98DB
	// succ:  l0800_98DB
l0800_9935:
	SCZO = cond(ch - 0x00)
	branch Test(UGT,CZ) l0800_9987
	// succ:  l0800_993A l0800_9987
l0800_993A:
	SZO = cond(Mem0[ss:bp - 0x0002:word16] & 0x0002)
	C = false
	branch Test(NE,Z) l0800_996A
	// succ:  l0800_9941 l0800_996A
l0800_9941:
	v49 = Mem0[ss:bp - 0x0002:word16] | 0x0008
	Mem0[ss:bp - 0x0002:word16] = v49
	SZO = cond(Mem0[ss:bp - 0x0002:word16])
	C = false
	ch = 0x01
	goto l0800_98DB
	// succ:  l0800_98DB
l0800_9949:
	goto l0800_9C82
	// succ:  l0800_9C82
l0800_994C:
	di = Mem0[ss:bp + 0x0004:word16]
	ax = Mem0[ss:di:word16]
	v59 = Mem0[ss:bp + 0x0004:word16] + 0x0002
	Mem0[ss:bp + 0x0004:word16] = v59
	SCZO = cond(v59)
	SCZO = cond(ch - 0x02)
	branch Test(UGE,C) l0800_996D
	// succ:  l0800_995B l0800_996D
l0800_995B:
	ax = ax | ax
	SZO = cond(ax)
	C = false
	branch Test(NS,S) l0800_9965
	// succ:  l0800_995F l0800_9965
l0800_995F:
	ax = -ax
	SCZO = cond(ax)
	C = ax == 0x0000
	v61 = Mem0[ss:bp - 0x0002:word16] | 0x0002
	Mem0[ss:bp - 0x0002:word16] = v61
	SZO = cond(Mem0[ss:bp - 0x0002:word16])
	C = false
	// succ:  l0800_9965
l0800_9965:
	Mem0[ss:bp - 0x0008:word16] = ax
	ch = 0x03
	// succ:  l0800_996A
l0800_996A:
	goto l0800_98DB
	// succ:  l0800_98DB
l0800_996D:
	SCZO = cond(ch - 0x04)
	branch Test(NE,Z) l0800_9949
	// succ:  l0800_9972 l0800_9949
l0800_9972:
	Mem0[ss:bp - 0x000A:word16] = ax
	ch = ch + 0x01
	SZO = cond(ch)
	goto l0800_98DB
	// succ:  l0800_98DB
l0800_997A:
	SCZO = cond(ch - 0x04)
	branch Test(UGE,C) l0800_9949
	// succ:  l0800_997F l0800_9949
l0800_997F:
	ch = 0x04
	v58 = Mem0[ss:bp - 0x000A:word16] + 0x0001
	Mem0[ss:bp - 0x000A:word16] = v58
	SZO = cond(v58)
	goto l0800_98DB
	// succ:  l0800_98DB
l0800_9987:
	v55 = ax
	ax = dx
	dx = v55
	al = al - 0x30
	SCZO = cond(al)
	ax = (int16) al
	SCZO = cond(ch - 0x02)
	branch Test(UGT,CZ) l0800_99A9
	// succ:  l0800_9990 l0800_99A9
l0800_9990:
	ch = 0x02
	v56 = Mem0[ss:bp - 0x0008:word16]
	Mem0[ss:bp - 0x0008:word16] = ax
	ax = v56
	ax = ax | ax
	SZO = cond(ax)
	C = false
	branch Test(LT,SO) l0800_996A
	// succ:  l0800_9999 l0800_996A
l0800_9999:
	ax = ax << 0x0001
	SCZO = cond(ax)
	dx = ax
	ax = ax << 0x0001
	SCZO = cond(ax)
	ax = ax << 0x0001
	SCZO = cond(ax)
	ax = ax + dx
	SCZO = cond(ax)
	v57 = Mem0[ss:bp - 0x0008:word16] + ax
	Mem0[ss:bp - 0x0008:word16] = v57
	SCZO = cond(v57)
	goto l0800_98DB
	// succ:  l0800_98DB
l0800_99A9:
	SCZO = cond(ch - 0x04)
	branch Test(NE,Z) l0800_9949
	// succ:  l0800_99AE l0800_9949
l0800_99AE:
	v63 = Mem0[ss:bp - 0x000A:word16]
	Mem0[ss:bp - 0x000A:word16] = ax
	ax = v63
	ax = ax | ax
	SZO = cond(ax)
	C = false
	branch Test(EQ,Z) l0800_996A
	// succ:  l0800_99B5 l0800_996A
l0800_99B5:
	ax = ax << 0x0001
	SCZO = cond(ax)
	dx = ax
	ax = ax << 0x0001
	SCZO = cond(ax)
	ax = ax << 0x0001
	SCZO = cond(ax)
	ax = ax + dx
	SCZO = cond(ax)
	v64 = Mem0[ss:bp - 0x000A:word16] + ax
	Mem0[ss:bp - 0x000A:word16] = v64
	SCZO = cond(v64)
	goto l0800_98DB
	// succ:  l0800_98DB
l0800_99C5:
	v54 = Mem0[ss:bp - 0x0002:word16] | 0x0010
	Mem0[ss:bp - 0x0002:word16] = v54
	SZO = cond(Mem0[ss:bp - 0x0002:word16])
	C = false
	goto l0800_9931
	// succ:  l0800_9931
l0800_99CC:
	v53 = Mem0[ss:bp - 0x0002:word16] | 0x0100
	Mem0[ss:bp - 0x0002:word16] = v53
	SZO = cond(Mem0[ss:bp - 0x0002:word16])
	C = false
	// succ:  l0800_99D1
l0800_99D1:
	v52 = Mem0[ss:bp - 0x0002:word16] & 0xFFEF
	Mem0[ss:bp - 0x0002:word16] = v52
	SZO = cond(Mem0[ss:bp - 0x0002:word16])
	C = false
	goto l0800_9931
	// succ:  l0800_9931
l0800_99D8:
	bh = 0x08
	goto l0800_99E6
	// succ:  l0800_99E6
l0800_99DC:
	bh = 0x0A
	goto l0800_99EA
	// succ:  l0800_99EA
l0800_99E0:
	bh = 0x10
	bl = 0xE9
	bl = bl + dl
	SCZO = cond(bl)
	// succ:  l0800_99E6
l0800_99E6:
	Mem0[ss:bp - 0x000B:byte] = 0x00
	// succ:  l0800_99EA
l0800_99EA:
	Mem0[ss:bp - 0x0005:byte] = dl
	dx = dx ^ dx
	SZO = cond(dx)
	C = false
	Mem0[ss:bp - 0x0006:byte] = dl
	di = Mem0[ss:bp + 0x0004:word16]
	ax = Mem0[ss:di:word16]
	goto l0800_9A0A
	// succ:  l0800_9A0A
l0800_99FA:
	bh = 0x0A
	Mem0[ss:bp - 0x0006:byte] = 0x01
	Mem0[ss:bp - 0x0005:byte] = dl
	di = Mem0[ss:bp + 0x0004:word16]
	ax = Mem0[ss:di:word16]
	dx_ax = (int32) ax
	// succ:  l0800_9A0A
l0800_9A0A:
	di = di + 0x0001
	SZO = cond(di)
	di = di + 0x0001
	SZO = cond(di)
	Mem0[ss:bp + 0x0006:word16] = si
	SZO = cond(Mem0[ss:bp - 0x0002:word16] & 0x0010)
	C = false
	branch Test(EQ,Z) l0800_9A1B
	// succ:  l0800_9A16 l0800_9A1B
l0800_9A16:
	dx = Mem0[ss:di:word16]
	di = di + 0x0001
	SZO = cond(di)
	di = di + 0x0001
	SZO = cond(di)
	// succ:  l0800_9A1B
l0800_9A1B:
	Mem0[ss:bp + 0x0004:word16] = di
	di = bp - 0x0045
	ax = ax | ax
	SZO = cond(ax)
	C = false
	branch Test(NE,Z) l0800_9A32
	// succ:  l0800_9A25 l0800_9A32
l0800_9A25:
	dx = dx | dx
	SZO = cond(dx)
	C = false
	branch Test(NE,Z) l0800_9A32
	// succ:  l0800_9A29 l0800_9A32
l0800_9A29:
	SCZO = cond(Mem0[ss:bp - 0x000A:word16] - 0x0000)
	branch Test(NE,Z) l0800_9A36
	// succ:  l0800_9A2F l0800_9A36
l0800_9A2F:
	goto l0800_9895
	// succ:  l0800_9895
l0800_9A32:
	v38 = Mem0[ss:bp - 0x0002:word16] | 0x0004
	Mem0[ss:bp - 0x0002:word16] = v38
	SZO = cond(Mem0[ss:bp - 0x0002:word16])
	C = false
	// succ:  l0800_9A36
l0800_9A36:
	sp = sp - 2
	Mem0[ss:sp:word16] = dx
	sp = sp - 2
	Mem0[ss:sp:word16] = ax
	sp = sp - 2
	Mem0[ss:sp:word16] = ss
	sp = sp - 2
	Mem0[ss:sp:word16] = di
	al = bh
	ax = (int16) al
	sp = sp - 2
	Mem0[ss:sp:word16] = ax
	al = Mem0[ss:bp - 0x0006:byte]
	sp = sp - 2
	Mem0[ss:sp:word16] = ax
	sp = sp - 2
	Mem0[ss:sp:word16] = bx
	call fn0800_8D87 (retsize: 2;)
	sp = sp + 0x000E
	sp = sp - 2
	Mem0[ss:sp:word16] = ss
	es = Mem0[ss:sp:selector]
	sp = sp + 2
	dx = Mem0[ss:bp - 0x000A:word16]
	dx = dx | dx
	SZO = cond(dx)
	C = false
	branch Test(GE,SO) l0800_9A52
	// succ:  l0800_9A4F l0800_9A52
l0800_9A4F:
	goto l0800_9B46
	// succ:  l0800_9B46
l0800_9A52:
	goto l0800_9B54
	// succ:  l0800_9B54
l0800_9A55:
	Mem0[ss:bp - 0x0005:byte] = dl
	Mem0[ss:bp + 0x0006:word16] = si
	di = bp - 0x0046
	bx = Mem0[ss:bp + 0x0004:word16]
	v47 = Mem0[ss:bx:word16]
	sp = sp - 2
	Mem0[ss:sp:word16] = v47
	bx = bx + 0x0001
	SZO = cond(bx)
	bx = bx + 0x0001
	SZO = cond(bx)
	Mem0[ss:bp + 0x0004:word16] = bx
	SZO = cond(Mem0[ss:bp - 0x0002:word16] & 0x0020)
	C = false
	branch Test(EQ,Z) l0800_9A80
	// succ:  l0800_9A70 l0800_9A80
l0800_9A70:
	dx = Mem0[ss:bx:word16]
	bx = bx + 0x0001
	SZO = cond(bx)
	bx = bx + 0x0001
	SZO = cond(bx)
	Mem0[ss:bp + 0x0004:word16] = bx
	sp = sp - 2
	Mem0[ss:sp:word16] = ss
	es = Mem0[ss:sp:selector]
	sp = sp + 2
	call fn0800_9810 (retsize: 2;)
	sp = sp + 0xFFFE
	al = 0x3A
	Mem0[es:di:byte] = al
	di = di + 0x0001
	// succ:  l0800_9A80
l0800_9A80:
	sp = sp - 2
	Mem0[ss:sp:word16] = ss
	es = Mem0[ss:sp:selector]
	sp = sp + 2
	dx = Mem0[ss:sp:word16]
	sp = sp + 2
	call fn0800_9810 (retsize: 2;)
	sp = sp + 0xFFFE
	Mem0[ss:di:byte] = 0x00
	Mem0[ss:bp - 0x0006:byte] = 0x00
	v50 = Mem0[ss:bp - 0x0002:word16] & 0xFFFB
	Mem0[ss:bp - 0x0002:word16] = v50
	SZO = cond(Mem0[ss:bp - 0x0002:word16])
	C = false
	cx = bp - 0x0046
	di = di - cx
	SCZO = cond(di)
	v51 = di
	di = cx
	cx = v51
	dx = Mem0[ss:bp - 0x000A:word16]
	SCZO = cond(dx - cx)
	branch Test(GT,SZO) l0800_9AA2
	// succ:  l0800_9AA0 l0800_9AA2
l0800_9AA0:
	dx = cx
	// succ:  l0800_9AA2
l0800_9AA2:
	goto l0800_9B46
	// succ:  l0800_9B46
l0800_9AA5:
	Mem0[ss:bp + 0x0006:word16] = si
	Mem0[ss:bp - 0x0005:byte] = dl
	di = Mem0[ss:bp + 0x0004:word16]
	ax = Mem0[ss:di:word16]
	v37 = Mem0[ss:bp + 0x0004:word16] + 0x0002
	Mem0[ss:bp + 0x0004:word16] = v37
	SCZO = cond(v37)
	sp = sp - 2
	Mem0[ss:sp:word16] = ss
	es = Mem0[ss:sp:selector]
	sp = sp + 2
	di = bp - 0x0045
	ah = ah ^ ah
	SZO = cond(ah)
	C = false
	Mem0[ss:di:word16] = ax
	cx = 0x0001
	goto l0800_9B89
	// succ:  l0800_9B89
l0800_9AC5:
	Mem0[ss:bp + 0x0006:word16] = si
	Mem0[ss:bp - 0x0005:byte] = dl
	di = Mem0[ss:bp + 0x0004:word16]
	SZO = cond(Mem0[ss:bp - 0x0002:word16] & 0x0020)
	C = false
	branch Test(NE,Z) l0800_9AE2
	// succ:  l0800_9AD5 l0800_9AE2
l0800_9AD5:
	di = Mem0[ss:di:word16]
	v33 = Mem0[ss:bp + 0x0004:word16] + 0x0002
	Mem0[ss:bp + 0x0004:word16] = v33
	SCZO = cond(v33)
	sp = sp - 2
	Mem0[ss:sp:word16] = ds
	es = Mem0[ss:sp:selector]
	sp = sp + 2
	di = di | di
	SZO = cond(di)
	C = false
	goto l0800_9AED
	// succ:  l0800_9AED
l0800_9AE2:
	es_di = Mem0[ds:di + 0x0000:segptr32]
	v35 = Mem0[ss:bp + 0x0004:word16] + 0x0004
	Mem0[ss:bp + 0x0004:word16] = v35
	SCZO = cond(v35)
	ax = es
	ax = ax | di
	SZO = cond(ax)
	C = false
	// succ:  l0800_9AED
l0800_9AED:
	branch Test(NE,Z) l0800_9AF4
	// succ:  l0800_9AEF l0800_9AF4
l0800_9AEF:
	sp = sp - 2
	Mem0[ss:sp:word16] = ds
	es = Mem0[ss:sp:selector]
	sp = sp + 2
	di = 0x25FE
	// succ:  l0800_9AF4
l0800_9AF4:
	call fn0800_9842 (retsize: 2;)
	SCZO = cond(cx - Mem0[ss:bp - 0x000A:word16])
	branch Test(ULE,CZ) l0800_9AFF
	// succ:  l0800_9AFC l0800_9AFF
l0800_9AFC:
	cx = Mem0[ss:bp - 0x000A:word16]
	// succ:  l0800_9AFF
l0800_9AFF:
	goto l0800_9B89
	// succ:  l0800_9B89
l0800_9B02:
	Mem0[ss:bp + 0x0006:word16] = si
	Mem0[ss:bp - 0x0005:byte] = dl
	di = Mem0[ss:bp + 0x0004:word16]
	cx = Mem0[ss:bp - 0x000A:word16]
	cx = cx | cx
	SZO = cond(cx)
	C = false
	branch Test(GE,SO) l0800_9B15
	// succ:  l0800_9B12 l0800_9B15
l0800_9B12:
	cx = 0x0006
	// succ:  l0800_9B15
l0800_9B15:
	sp = sp - 2
	Mem0[ss:sp:word16] = ss
	sp = sp - 2
	Mem0[ss:sp:word16] = di
	sp = sp - 2
	Mem0[ss:sp:word16] = cx
	sp = sp - 2
	Mem0[ss:sp:word16] = ss
	bx = bp - 0x0045
	sp = sp - 2
	Mem0[ss:sp:word16] = bx
	sp = sp - 2
	Mem0[ss:sp:word16] = dx
	ax = 0x0001
	ax = ax & Mem0[ss:bp - 0x0002:word16]
	SZO = cond(ax)
	C = false
	sp = sp - 2
	Mem0[ss:sp:word16] = ax
	ax = Mem0[ss:bp - 0x0002:word16]
	SZO = cond(ax & 0x0100)
	C = false
	branch Test(EQ,Z) l0800_9B36
	// succ:  l0800_9B2D l0800_9B36
l0800_9B2D:
	ax = 0x0008
	v41 = Mem0[ss:bp + 0x0004:word16] + 0x000A
	Mem0[ss:bp + 0x0004:word16] = v41
	SCZO = cond(v41)
	goto l0800_9B3D
	// succ:  l0800_9B3D
l0800_9B36:
	v42 = Mem0[ss:bp + 0x0004:word16] + 0x0008
	Mem0[ss:bp + 0x0004:word16] = v42
	SCZO = cond(v42)
	ax = 0x0006
	// succ:  l0800_9B3D
l0800_9B3D:
	sp = sp - 2
	Mem0[ss:sp:word16] = ax
	call fn0800_A2CC (retsize: 2;)
	sp = sp - 2
	Mem0[ss:sp:word16] = ss
	es = Mem0[ss:sp:selector]
	sp = sp + 2
	di = bp - 0x0045
	// succ:  l0800_9B46
l0800_9B46:
	SZO = cond(Mem0[ss:bp - 0x0002:word16] & 0x0008)
	C = false
	branch Test(EQ,Z) l0800_9B65
	// succ:  l0800_9B4D l0800_9B65
l0800_9B4D:
	dx = Mem0[ss:bp - 0x0008:word16]
	dx = dx | dx
	SZO = cond(dx)
	C = false
	branch Test(LE,SZO) l0800_9B65
	// succ:  l0800_9B54 l0800_9B65
l0800_9B54:
	call fn0800_9842 (retsize: 2;)
	SCZO = cond(Mem0[es:di:byte] - 0x2D)
	branch Test(NE,Z) l0800_9B5E
	// succ:  l0800_9B5D l0800_9B5E
l0800_9B5D:
	cx = cx - 0x0001
	SZO = cond(cx)
	// succ:  l0800_9B5E
l0800_9B5E:
	dx = dx - cx
	SCZO = cond(dx)
	branch Test(LE,SZO) l0800_9B65
	// succ:  l0800_9B62 l0800_9B65
l0800_9B62:
	Mem0[ss:bp - 0x000E:word16] = dx
	// succ:  l0800_9B65
l0800_9B65:
	SCZO = cond(Mem0[es:di:byte] - 0x2D)
	branch Test(EQ,Z) l0800_9B76
	// succ:  l0800_9B6B l0800_9B76
l0800_9B6B:
	al = Mem0[ss:bp - 0x000B:byte]
	al = al | al
	SZO = cond(al)
	C = false
	branch Test(EQ,Z) l0800_9B86
	// succ:  l0800_9B72 l0800_9B86
l0800_9B72:
	di = di - 0x0001
	SZO = cond(di)
	Mem0[es:di:byte] = al
	// succ:  l0800_9B76
l0800_9B76:
	SCZO = cond(Mem0[ss:bp - 0x000E:word16] - 0x0000)
	branch Test(LE,SZO) l0800_9B86
	// succ:  l0800_9B7C l0800_9B86
l0800_9B7C:
	cx = Mem0[ss:bp - 0x000A:word16]
	cx = cx | cx
	SZO = cond(cx)
	C = false
	branch Test(GE,SO) l0800_9B86
	// succ:  l0800_9B83 l0800_9B86
l0800_9B83:
	v46 = Mem0[ss:bp - 0x000E:word16] - 0x0001
	Mem0[ss:bp - 0x000E:word16] = v46
	SZO = cond(v46)
	// succ:  l0800_9B86
l0800_9B86:
	call fn0800_9842 (retsize: 2;)
	// succ:  l0800_9B89
l0800_9B89:
	si = di
	di = Mem0[ss:bp - 0x0004:word16]
	bx = Mem0[ss:bp - 0x0008:word16]
	ax = 0x0005
	ax = ax & Mem0[ss:bp - 0x0002:word16]
	SZO = cond(ax)
	C = false
	SCZO = cond(ax - 0x0005)
	branch Test(NE,Z) l0800_9BAF
	// succ:  l0800_9B9C l0800_9BAF
l0800_9B9C:
	ah = Mem0[ss:bp - 0x0005:byte]
	SCZO = cond(ah - 0x6F)
	branch Test(NE,Z) l0800_9BB1
	// succ:  l0800_9BA4 l0800_9BB1
l0800_9BA4:
	SCZO = cond(Mem0[ss:bp - 0x000E:word16] - 0x0000)
	branch Test(GT,SZO) l0800_9BAF
	// succ:  l0800_9BAA l0800_9BAF
l0800_9BAA:
	Mem0[ss:bp - 0x000E:word16] = 0x0001
	// succ:  l0800_9BAF
l0800_9BAF:
	goto l0800_9BCC
	// succ:  l0800_9BCC
l0800_9BB1:
	SCZO = cond(ah - 0x78)
	branch Test(EQ,Z) l0800_9BBB
	// succ:  l0800_9BB6 l0800_9BBB
l0800_9BB6:
	SCZO = cond(ah - 0x58)
	branch Test(NE,Z) l0800_9BCC
	// succ:  l0800_9BBB l0800_9BCC
l0800_9BBB:
	v39 = Mem0[ss:bp - 0x0002:word16] | 0x0040
	Mem0[ss:bp - 0x0002:word16] = v39
	SZO = cond(Mem0[ss:bp - 0x0002:word16])
	C = false
	bx = bx - 0x0001
	SZO = cond(bx)
	bx = bx - 0x0001
	SZO = cond(bx)
	v40 = Mem0[ss:bp - 0x000E:word16] - 0x0002
	Mem0[ss:bp - 0x000E:word16] = v40
	SCZO = cond(v40)
	branch Test(GE,SO) l0800_9BCC
	// succ:  l0800_9BC7 l0800_9BCC
l0800_9BC7:
	Mem0[ss:bp - 0x000E:word16] = 0x0000
	// succ:  l0800_9BCC
l0800_9BCC:
	cx = cx + Mem0[ss:bp - 0x000E:word16]
	SCZO = cond(cx)
	SZO = cond(Mem0[ss:bp - 0x0002:word16] & 0x0002)
	C = false
	branch Test(NE,Z) l0800_9BE2
	// succ:  l0800_9BD6 l0800_9BE2
l0800_9BD6:
	goto l0800_9BDE
	// succ:  l0800_9BDE
l0800_9BD8:
	al = 0x20
	call fn0800_984F (retsize: 2;)
	sp = sp + 0xFFFE
	bx = bx - 0x0001
	SZO = cond(bx)
	// succ:  l0800_9BDE
l0800_9BDE:
	SCZO = cond(bx - cx)
	branch Test(GT,SZO) l0800_9BD8
	// succ:  l0800_9BE2 l0800_9BD8
l0800_9BE2:
	SZO = cond(Mem0[ss:bp - 0x0002:word16] & 0x0040)
	C = false
	branch Test(EQ,Z) l0800_9BF4
	// succ:  l0800_9BE9 l0800_9BF4
l0800_9BE9:
	al = 0x30
	call fn0800_984F (retsize: 2;)
	sp = sp + 0xFFFE
	al = Mem0[ss:bp - 0x0005:byte]
	call fn0800_984F (retsize: 2;)
	sp = sp + 0xFFFE
	// succ:  l0800_9BF4
l0800_9BF4:
	dx = Mem0[ss:bp - 0x000E:word16]
	dx = dx | dx
	SZO = cond(dx)
	C = false
	branch Test(LE,SZO) l0800_9C22
	// succ:  l0800_9BFB l0800_9C22
l0800_9BFB:
	cx = cx - dx
	SCZO = cond(cx)
	bx = bx - dx
	SCZO = cond(bx)
	al = Mem0[es:si:byte]
	SCZO = cond(al - 0x2D)
	branch Test(EQ,Z) l0800_9C0E
	// succ:  l0800_9C06 l0800_9C0E
l0800_9C06:
	SCZO = cond(al - 0x20)
	branch Test(EQ,Z) l0800_9C0E
	// succ:  l0800_9C0A l0800_9C0E
l0800_9C0A:
	SCZO = cond(al - 0x2B)
	branch Test(NE,Z) l0800_9C15
	// succ:  l0800_9C0E l0800_9C15
l0800_9C0E:
	al = Mem0[ds:si:byte]
	si = si + 0x0001
	call fn0800_984F (retsize: 2;)
	sp = sp + 0xFFFE
	cx = cx - 0x0001
	SZO = cond(cx)
	bx = bx - 0x0001
	SZO = cond(bx)
	// succ:  l0800_9C15
l0800_9C15:
	v43 = dx
	dx = cx
	cx = v43
	branch cx == 0x0000 l0800_9C20
	// succ:  l0800_9C19 l0800_9C20
l0800_9C19:
	al = 0x30
	call fn0800_984F (retsize: 2;)
	sp = sp + 0xFFFE
	cx = cx - 0x0001
	branch cx != 0x0000 l0800_9C19
	// succ:  l0800_9C20 l0800_9C19
l0800_9C20:
	v44 = dx
	dx = cx
	cx = v44
	// succ:  l0800_9C22
l0800_9C22:
	branch cx == 0x0000 l0800_9C36
	// succ:  l0800_9C24 l0800_9C36
l0800_9C24:
	bx = bx - cx
	SCZO = cond(bx)
	// succ:  l0800_9C26
l0800_9C26:
	al = Mem0[ds:si:byte]
	si = si + 0x0001
	Mem0[ss:di:byte] = al
	di = di + 0x0001
	SZO = cond(di)
	v45 = Mem0[ss:bp - 0x0014:byte] - 0x01
	Mem0[ss:bp - 0x0014:byte] = v45
	SZO = cond(v45)
	branch Test(GT,SZO) l0800_9C34
	// succ:  l0800_9C31 l0800_9C34
l0800_9C31:
	call fn0800_9858 (retsize: 2;)
	// succ:  l0800_9C34
l0800_9C34:
	cx = cx - 0x0001
	branch cx != 0x0000 l0800_9C26
	// succ:  l0800_9C36 l0800_9C26
l0800_9C36:
	bx = bx | bx
	SZO = cond(bx)
	C = false
	branch Test(LE,SZO) l0800_9C43
	// succ:  l0800_9C3A l0800_9C43
l0800_9C3A:
	cx = bx
	// succ:  l0800_9C3C
l0800_9C3C:
	al = 0x20
	call fn0800_984F (retsize: 2;)
	sp = sp + 0xFFFE
	cx = cx - 0x0001
	branch cx != 0x0000 l0800_9C3C
	// succ:  l0800_9C43 l0800_9C3C
l0800_9C43:
	goto l0800_9898
	// succ:  l0800_9898
l0800_9C46:
	Mem0[ss:bp + 0x0006:word16] = si
	di = Mem0[ss:bp + 0x0004:word16]
	SZO = cond(Mem0[ss:bp - 0x0002:word16] & 0x0020)
	C = false
	branch Test(NE,Z) l0800_9C5E
	// succ:  l0800_9C53 l0800_9C5E
l0800_9C53:
	di = Mem0[ss:di:word16]
	v31 = Mem0[ss:bp + 0x0004:word16] + 0x0002
	Mem0[ss:bp + 0x0004:word16] = v31
	SCZO = cond(v31)
	sp = sp - 2
	Mem0[ss:sp:word16] = ds
	es = Mem0[ss:sp:selector]
	sp = sp + 2
	goto l0800_9C65
	// succ:  l0800_9C65
l0800_9C5E:
	es_di = Mem0[ds:di + 0x0000:segptr32]
	v36 = Mem0[ss:bp + 0x0004:word16] + 0x0004
	Mem0[ss:bp + 0x0004:word16] = v36
	SCZO = cond(v36)
	// succ:  l0800_9C65
l0800_9C65:
	ax = 0x0050
	al = al - Mem0[ss:bp - 0x0014:byte]
	SCZO = cond(al)
	ax = ax + Mem0[ss:bp - 0x0012:word16]
	SCZO = cond(ax)
	Mem0[es:di:word16] = ax
	SZO = cond(Mem0[ss:bp - 0x0002:word16] & 0x0010)
	C = false
	branch Test(EQ,Z) l0800_9C7F
	// succ:  l0800_9C78 l0800_9C7F
l0800_9C78:
	di = di + 0x0001
	SZO = cond(di)
	di = di + 0x0001
	SZO = cond(di)
	Mem0[es:di:word16] = 0x0000
	// succ:  l0800_9C7F
l0800_9C7F:
	goto l0800_9895
	// succ:  l0800_9895
l0800_9C82:
	si = Mem0[ss:bp - 0x0010:word16]
	es = Mem0[ss:bp + 0x0008:selector]
	di = Mem0[ss:bp - 0x0004:word16]
	al = 0x25
	// succ:  l0800_9C8D
l0800_9C8D:
	call fn0800_984F (retsize: 2;)
	sp = sp + 0xFFFE
	al = Mem0[ds:si:byte]
	si = si + 0x0001
	al = al | al
	SZO = cond(al)
	C = false
	branch Test(NE,Z) l0800_9C8D
	// succ:  l0800_9C96 l0800_9C8D
l0800_9C96:
	SCZO = cond(Mem0[ss:bp - 0x0014:byte] - 0x50)
	branch Test(GE,SO) l0800_9C9F
	// succ:  l0800_9C9C l0800_9C9F
l0800_9C9C:
	call fn0800_9858 (retsize: 2;)
	// succ:  l0800_9C9F
l0800_9C9F:
	es = Mem0[ss:sp:selector]
	sp = sp + 2
	SCZO = cond(Mem0[ss:bp - 0x0016:word16] - 0x0000)
	branch Test(EQ,Z) l0800_9CAB
	// succ:  l0800_9CA6 l0800_9CAB
l0800_9CA6:
	ax = 0xFFFF
	goto l0800_9CAE
	// succ:  l0800_9CAE
l0800_9CAB:
	ax = Mem0[ss:bp - 0x0012:word16]
	// succ:  l0800_9CAE
l0800_9CAE:
	di = Mem0[ss:sp:word16]
	sp = sp + 2
	si = Mem0[ss:sp:word16]
	sp = sp + 2
	sp = bp
	bp = Mem0[ss:sp:word16]
	sp = sp + 2
	return
	// succ:  fn0800_9828_exit
fn0800_9828_exit:


// fn0800_9842
// Return size: 2
define fn0800_9842
fn0800_9842_entry:
	// succ:  l0800_9842
l0800_9842:
	sp = fp
	Top = 0
	sp = sp - 2
	Mem0[ss:sp:word16] = di
	cx = 0xFFFF
	al = al ^ al
	SZO = cond(al)
	C = false
	// succ:  l0800_9848
l0800_9848:
	branch cx == 0x0000 l0800_984A
	// succ:  l0800_9848_1 l0800_984A
l0800_9848_1:
	SCZO = cond(al - Mem0[es:di:byte])
	di = di + 0x0001
	cx = cx - 0x0001
	branch Test(EQ,Z) l0800_9848
	// succ:  l0800_984A l0800_9848
l0800_984A:
	cx = ~cx
	cx = cx - 0x0001
	SZO = cond(cx)
	di = Mem0[ss:sp:word16]
	sp = sp + 2
	return
	// succ:  fn0800_9842_exit
fn0800_9842_exit:


// fn0800_984F
// Return size: 2
define fn0800_984F
fn0800_984F_entry:
	// succ:  l0800_984F
l0800_984F:
	sp = fp
	Top = 0
	Mem0[ss:di:byte] = al
	di = di + 0x0001
	SZO = cond(di)
	v8 = Mem0[ss:bp - 0x0014:byte] - 0x01
	Mem0[ss:bp - 0x0014:byte] = v8
	SZO = cond(v8)
	branch Test(NE,Z) l0800_988B_in_fn0800_984F
	// succ:  l0800_9856_thunk_fn0800_9858 l0800_988B_in_fn0800_984F
l0800_9856_thunk_fn0800_9858:
	call fn0800_9858 (retsize: 0;)
	return
	// succ:  fn0800_984F_exit
l0800_988B_in_fn0800_984F:
	return
	// succ:  fn0800_984F_exit
fn0800_984F_exit:


// fn0800_9858
// Return size: 2
define fn0800_9858
fn0800_9858_entry:
	// succ:  l0800_9858
l0800_9858:
	sp = fp
	Top = 0
	sp = sp - 2
	Mem0[ss:sp:word16] = bx
	sp = sp - 2
	Mem0[ss:sp:word16] = cx
	sp = sp - 2
	Mem0[ss:sp:word16] = dx
	sp = sp - 2
	Mem0[ss:sp:word16] = es
	ax = bp - 0x0096
	di = di - ax
	SCZO = cond(di)
	sp = sp - 2
	Mem0[ss:sp:word16] = ss
	ax = bp - 0x0096
	sp = sp - 2
	Mem0[ss:sp:word16] = ax
	sp = sp - 2
	Mem0[ss:sp:word16] = di
	v12 = Mem0[ss:bp + 0x000C:word16]
	sp = sp - 2
	Mem0[ss:sp:word16] = v12
	v13 = Mem0[ss:bp + 0x000A:word16]
	sp = sp - 2
	Mem0[ss:sp:word16] = v13
	call SEQ(0x0800, Mem0[ss:bp + 0x000E:word16]) (retsize: 2;)
	ax = ax | ax
	SZO = cond(ax)
	C = false
	branch Test(NE,Z) l0800_987B
	// succ:  l0800_9876 l0800_987B
l0800_9876:
	Mem0[ss:bp - 0x0016:word16] = 0x0001
	// succ:  l0800_987B
l0800_987B:
	Mem0[ss:bp - 0x0014:word16] = 0x0050
	v17 = Mem0[ss:bp - 0x0012:word16] + di
	Mem0[ss:bp - 0x0012:word16] = v17
	SCZO = cond(v17)
	di = bp - 0x0096
	es = Mem0[ss:sp:selector]
	sp = sp + 2
	dx = Mem0[ss:sp:word16]
	sp = sp + 2
	cx = Mem0[ss:sp:word16]
	sp = sp + 2
	bx = Mem0[ss:sp:word16]
	sp = sp + 2
	// succ:  l0800_988B
l0800_988B:
	return
	// succ:  fn0800_9858_exit
fn0800_9858_exit:


// fn0800_9CE6
// Return size: 2
define fn0800_9CE6
fn0800_9CE6_entry:
	// succ:  l0800_9CE6
l0800_9CE6:
	sp = fp
	Top = 0
	sp = sp - 2
	Mem0[ss:sp:word16] = bp
	bp = sp
	sp = sp - 2
	Mem0[ss:sp:word16] = si
	v6 = Mem0[ss:bp + 0x000A:word16]
	sp = sp - 2
	Mem0[ss:sp:word16] = v6
	v7 = Mem0[ss:bp + 0x0008:word16]
	sp = sp - 2
	Mem0[ss:sp:word16] = v7
	call fn0800_BFC7 (retsize: 2;)
	cx = Mem0[ss:sp:word16]
	sp = sp + 2
	cx = Mem0[ss:sp:word16]
	sp = sp + 2
	si = ax
	ax = ax + 0x0001
	SZO = cond(ax)
	sp = sp - 2
	Mem0[ss:sp:word16] = ax
	v11 = Mem0[ss:bp + 0x000A:word16]
	sp = sp - 2
	Mem0[ss:sp:word16] = v11
	v12 = Mem0[ss:bp + 0x0008:word16]
	sp = sp - 2
	Mem0[ss:sp:word16] = v12
	v13 = Mem0[ss:bp + 0x0006:word16]
	sp = sp - 2
	Mem0[ss:sp:word16] = v13
	v14 = Mem0[ss:bp + 0x0004:word16]
	sp = sp - 2
	Mem0[ss:sp:word16] = v14
	call fn0800_B03B (retsize: 2;)
	sp = sp + 0x000A
	SCZO = cond(sp)
	dx = Mem0[ss:bp + 0x0006:word16]
	ax = Mem0[ss:bp + 0x0004:word16]
	ax = ax + si
	SCZO = cond(ax)
	si = Mem0[ss:sp:word16]
	sp = sp + 2
	bp = Mem0[ss:sp:word16]
	sp = sp + 2
	return
	// succ:  fn0800_9CE6_exit
fn0800_9CE6_exit:


// fn0800_9D41
// Return size: 2
define fn0800_9D41
fn0800_9D41_entry:
	// succ:  l0800_9D41
l0800_9D41:
	sp = fp
	Top = 0
	SCZO = cond(dx - Mem0[0x0800:0x9D35:word16])
	branch Test(EQ,Z) l0800_9D7F
	// succ:  l0800_9D48 l0800_9D7F
l0800_9D48:
	ds = dx
	ds = Mem0[ds:0x0002:selector]
	SCZO = cond(Mem0[ds:0x0002:word16] - 0x0000)
	branch Test(EQ,Z) l0800_9D5C
	// succ:  l0800_9D55 l0800_9D5C
l0800_9D55:
	Mem0[0x0800:0x9D37:word16] = ds
	goto l0800_9D94
	// succ:  l0800_9D94
l0800_9D5C:
	ax = ds
	SCZO = cond(ax - Mem0[0x0800:0x9D35:word16])
	branch Test(EQ,Z) l0800_9D7A
	// succ:  l0800_9D65 l0800_9D7A
l0800_9D65:
	ax = Mem0[ds:0x0008:word16]
	Mem0[0x0800:0x9D37:word16] = ax
	sp = sp - 2
	Mem0[ss:sp:word16] = ds
	ax = ax ^ ax
	SZO = cond(ax)
	C = false
	sp = sp - 2
	Mem0[ss:sp:word16] = ax
	call fn0800_9E15 (retsize: 2;)
	ds = Mem0[0x0800:0x9D3B:selector]
	goto l0800_9D9D
	// succ:  l0800_9D9D
l0800_9D7A:
	dx = Mem0[0x0800:0x9D35:word16]
	// succ:  l0800_9D7F
l0800_9D7F:
	Mem0[0x0800:0x9D35:word16] = 0x0000
	Mem0[0x0800:0x9D37:word16] = 0x0000
	Mem0[0x0800:0x9D39:word16] = 0x0000
	// succ:  l0800_9D94
l0800_9D94:
	ds = Mem0[0x0800:0x9D3B:selector]
	sp = sp - 2
	Mem0[ss:sp:word16] = dx
	ax = ax ^ ax
	SZO = cond(ax)
	C = false
	sp = sp - 2
	Mem0[ss:sp:word16] = ax
	// succ:  l0800_9D9D
l0800_9D9D:
	call fn0800_A1D6 (retsize: 2;)
	sp = sp + 0x0004
	SCZO = cond(sp)
	return
	// succ:  fn0800_9D41_exit
fn0800_9D41_exit:


// fn0800_9DA4
// Return size: 2
define fn0800_9DA4
fn0800_9DA4_entry:
	// succ:  l0800_9DA4
l0800_9DA4:
	sp = fp
	Top = 0
	ds = dx
	sp = sp - 2
	Mem0[ss:sp:word16] = ds
	es = Mem0[ds:0x0002:selector]
	Mem0[ds:0x0002:word16] = 0x0000
	Mem0[ds:0x0008:word16] = es
	SCZO = cond(dx - Mem0[0x0800:0x9D35:word16])
	branch Test(EQ,Z) l0800_9DEA
	// succ:  l0800_9DBC l0800_9DEA
l0800_9DBC:
	SCZO = cond(Mem0[es:0x0002:word16] - 0x0000)
	branch Test(NE,Z) l0800_9DEA
	// succ:  l0800_9DC4 l0800_9DEA
l0800_9DC4:
	ax = Mem0[ds:0x0000:word16]
	bx = Mem0[ss:sp:word16]
	sp = sp + 2
	sp = sp - 2
	Mem0[ss:sp:word16] = es
	v11 = Mem0[es:0x0000:word16] + ax
	Mem0[es:0x0000:word16] = v11
	SCZO = cond(v11)
	cx = es
	dx = dx + ax
	SCZO = cond(dx)
	es = dx
	SCZO = cond(Mem0[es:0x0002:word16] - 0x0000)
	branch Test(NE,Z) l0800_9DE3
	// succ:  l0800_9DDC l0800_9DE3
l0800_9DDC:
	Mem0[es:0x0008:word16] = cx
	goto l0800_9DED
	// succ:  l0800_9DED
l0800_9DE3:
	Mem0[es:0x0002:word16] = cx
	goto l0800_9DED
	// succ:  l0800_9DED
l0800_9DEA:
	call fn0800_9E3E (retsize: 2;)
	// succ:  l0800_9DED
l0800_9DED:
	es = Mem0[ss:sp:selector]
	sp = sp + 2
	ax = es
	ax = ax + Mem0[es:0x0000:word16]
	SCZO = cond(ax)
	ds = ax
	SCZO = cond(Mem0[ds:0x0002:word16] - 0x0000)
	branch Test(EQ,Z) l0800_9DFF
	// succ:  l0800_9DFE l0800_9DFF
l0800_9DFE:
	return
	// succ:  fn0800_9DA4_exit
l0800_9DFF:
	ax = Mem0[ds:0x0000:word16]
	v13 = Mem0[es:0x0000:word16] + ax
	Mem0[es:0x0000:word16] = v13
	SCZO = cond(v13)
	ax = es
	bx = ds
	bx = bx + Mem0[ds:0x0000:word16]
	SCZO = cond(bx)
	es = bx
	Mem0[es:0x0002:word16] = ax
	// succ:  l0800_9E11_thunk_fn0800_9E15
l0800_9E11_thunk_fn0800_9E15:
	call fn0800_9E15 (retsize: 0;)
	return
	// succ:  fn0800_9DA4_exit
fn0800_9DA4_exit:


// fn0800_9E15
// Return size: 2
define fn0800_9E15
fn0800_9E15_entry:
	// succ:  l0800_9E15
l0800_9E15:
	sp = fp
	Top = 0
	bx = ds
	SCZO = cond(bx - Mem0[ds:0x0006:word16])
	branch Test(EQ,Z) l0800_9E36
	// succ:  l0800_9E1D l0800_9E36
l0800_9E1D:
	es = Mem0[ds:0x0006:selector]
	ds = Mem0[ds:0x0004:selector]
	Mem0[ds:0x0006:word16] = es
	Mem0[es:0x0004:word16] = ds
	Mem0[0x0800:0x9D39:word16] = ds
	ds = bx
	return
	// succ:  fn0800_9E15_exit
l0800_9E36:
	Mem0[0x0800:0x9D39:word16] = 0x0000
	return
	// succ:  fn0800_9E15_exit
fn0800_9E15_exit:


// fn0800_9E3E
// Return size: 2
define fn0800_9E3E
fn0800_9E3E_entry:
	// succ:  l0800_9E3E
l0800_9E3E:
	sp = fp
	Top = 0
	ax = Mem0[0x0800:0x9D39:word16]
	ax = ax | ax
	SZO = cond(ax)
	C = false
	branch Test(EQ,Z) l0800_9E67
	// succ:  l0800_9E46 l0800_9E67
l0800_9E46:
	bx = ss
	sp = sp - 2
	Mem0[ss:sp:word16] = SCZDOP
	__cli()
	ss = ax
	es = Mem0[ss:0x0006:selector]
	Mem0[ss:0x0006:word16] = ds
	Mem0[ds:0x0004:word16] = ss
	ss = bx
	SCZDOP = Mem0[ss:sp:word16]
	sp = sp + 2
	Mem0[es:0x0004:word16] = ds
	Mem0[ds:0x0006:word16] = es
	return
	// succ:  fn0800_9E3E_exit
l0800_9E67:
	Mem0[0x0800:0x9D39:word16] = ds
	Mem0[ds:0x0004:word16] = ds
	Mem0[ds:0x0006:word16] = ds
	return
	// succ:  fn0800_9E3E_exit
fn0800_9E3E_exit:


// fn0800_9E75
// Return size: 2
define fn0800_9E75
fn0800_9E75_entry:
	// succ:  l0800_9E75
l0800_9E75:
	sp = fp
	Top = 0
	sp = sp - 2
	Mem0[ss:sp:word16] = bp
	bp = sp
	sp = sp - 2
	Mem0[ss:sp:word16] = si
	sp = sp - 2
	Mem0[ss:sp:word16] = di
	Mem0[0x0800:0x9D3B:word16] = ds
	dx = Mem0[ss:bp + 0x0006:word16]
	dx = dx | dx
	SZO = cond(dx)
	C = false
	branch Test(EQ,Z) l0800_9E95
	// succ:  l0800_9E86 l0800_9E95
l0800_9E86:
	SCZO = cond(dx - Mem0[0x0800:0x9D37:word16])
	branch Test(NE,Z) l0800_9E92
	// succ:  l0800_9E8D l0800_9E92
l0800_9E8D:
	call fn0800_9D41 (retsize: 2;)
	goto l0800_9E95
	// succ:  l0800_9E95
l0800_9E92:
	call fn0800_9DA4 (retsize: 2;)
	// succ:  l0800_9E95
l0800_9E95:
	ds = Mem0[0x0800:0x9D3B:selector]
	di = Mem0[ss:sp:word16]
	sp = sp + 2
	si = Mem0[ss:sp:word16]
	sp = sp + 2
	bp = Mem0[ss:sp:word16]
	sp = sp + 2
	return
	// succ:  fn0800_9E75_exit
fn0800_9E75_exit:


// fn0800_9E9E
// Return size: 2
define fn0800_9E9E
fn0800_9E9E_entry:
	// succ:  l0800_9E9E
l0800_9E9E:
	sp = fp
	Top = 0
	sp = sp - 2
	Mem0[ss:sp:word16] = ax
	ds = Mem0[0x0800:0x9D3B:selector]
	ax = ax ^ ax
	SZO = cond(ax)
	C = false
	sp = sp - 2
	Mem0[ss:sp:word16] = ax
	sp = sp - 2
	Mem0[ss:sp:word16] = ax
	call fn0800_A215 (retsize: 2;)
	sp = sp + 0x0004
	SCZO = cond(sp)
	ax = ax & 0x000F
	SZO = cond(ax)
	C = false
	branch Test(EQ,Z) l0800_9EC7
	// succ:  l0800_9EB3 l0800_9EC7
l0800_9EB3:
	dx = 0x0010
	dx = dx - ax
	SCZO = cond(dx)
	ax = ax ^ ax
	SZO = cond(ax)
	C = false
	ds = Mem0[0x0800:0x9D3B:selector]
	sp = sp - 2
	Mem0[ss:sp:word16] = ax
	sp = sp - 2
	Mem0[ss:sp:word16] = dx
	call fn0800_A215 (retsize: 2;)
	sp = sp + 0x0004
	SCZO = cond(sp)
	// succ:  l0800_9EC7
l0800_9EC7:
	ax = Mem0[ss:sp:word16]
	sp = sp + 2
	sp = sp - 2
	Mem0[ss:sp:word16] = ax
	bx = bx ^ bx
	SZO = cond(bx)
	C = false
	bl = ah
	cl = 0x04
	bx = bx >>u cl
	SCZO = cond(bx)
	ax = ax << cl
	SCZO = cond(ax)
	ds = Mem0[0x0800:0x9D3B:selector]
	sp = sp - 2
	Mem0[ss:sp:word16] = bx
	sp = sp - 2
	Mem0[ss:sp:word16] = ax
	call fn0800_A215 (retsize: 2;)
	sp = sp + 0x0004
	SCZO = cond(sp)
	bx = Mem0[ss:sp:word16]
	sp = sp + 2
	SCZO = cond(ax - 0xFFFF)
	branch Test(EQ,Z) l0800_9EFE
	// succ:  l0800_9EE6 l0800_9EFE
l0800_9EE6:
	Mem0[0x0800:0x9D35:word16] = dx
	Mem0[0x0800:0x9D37:word16] = dx
	ds = dx
	Mem0[ds:0x0000:word16] = bx
	Mem0[ds:0x0002:word16] = dx
	ax = 0x0004
	return
	// succ:  fn0800_9E9E_exit
l0800_9EFE:
	ax = ax ^ ax
	SZO = cond(ax)
	C = false
	dx_ax = (int32) ax
	return
	// succ:  fn0800_9E9E_exit
fn0800_9E9E_exit:


// fn0800_9F02
// Return size: 2
define fn0800_9F02
fn0800_9F02_entry:
	// succ:  l0800_9F02
l0800_9F02:
	sp = fp
	Top = 0
	sp = sp - 2
	Mem0[ss:sp:word16] = ax
	bx = bx ^ bx
	SZO = cond(bx)
	C = false
	bl = ah
	cl = 0x04
	bx = bx >>u cl
	SCZO = cond(bx)
	ax = ax << cl
	SCZO = cond(ax)
	ds = Mem0[0x0800:0x9D3B:selector]
	sp = sp - 2
	Mem0[ss:sp:word16] = bx
	sp = sp - 2
	Mem0[ss:sp:word16] = ax
	call fn0800_A215 (retsize: 2;)
	sp = sp + 0x0004
	SCZO = cond(sp)
	bx = Mem0[ss:sp:word16]
	sp = sp + 2
	SCZO = cond(ax - 0xFFFF)
	branch Test(EQ,Z) l0800_9F58
	// succ:  l0800_9F20 l0800_9F58
l0800_9F20:
	ax = ax & 0x000F
	SZO = cond(ax)
	C = false
	branch Test(NE,Z) l0800_9F3D
	// succ:  l0800_9F25 l0800_9F3D
l0800_9F25:
	cx = Mem0[0x0800:0x9D37:word16]
	Mem0[0x0800:0x9D37:word16] = dx
	ds = dx
	Mem0[ds:0x0000:word16] = bx
	Mem0[ds:0x0002:word16] = cx
	ax = 0x0004
	return
	// succ:  fn0800_9F02_exit
l0800_9F3D:
	sp = sp - 2
	Mem0[ss:sp:word16] = bx
	sp = sp - 2
	Mem0[ss:sp:word16] = dx
	ax = -ax
	SCZO = cond(ax)
	C = ax == 0x0000
	ax = ax + 0x0010
	SCZO = cond(ax)
	bx = bx ^ bx
	SZO = cond(bx)
	C = false
	sp = sp - 2
	Mem0[ss:sp:word16] = bx
	sp = sp - 2
	Mem0[ss:sp:word16] = ax
	call fn0800_A215 (retsize: 2;)
	sp = sp + 0x0004
	SCZO = cond(sp)
	dx = Mem0[ss:sp:word16]
	sp = sp + 2
	bx = Mem0[ss:sp:word16]
	sp = sp + 2
	SCZO = cond(ax - 0xFFFF)
	branch Test(EQ,Z) l0800_9F58
	// succ:  l0800_9F55 l0800_9F58
l0800_9F55:
	dx = dx + 0x0001
	SZO = cond(dx)
	goto l0800_9F25
	// succ:  l0800_9F25
l0800_9F58:
	ax = ax ^ ax
	SZO = cond(ax)
	C = false
	dx_ax = (int32) ax
	return
	// succ:  fn0800_9F02_exit
fn0800_9F02_exit:


// fn0800_9F5C
// Return size: 2
define fn0800_9F5C
fn0800_9F5C_entry:
	// succ:  l0800_9F5C
l0800_9F5C:
	sp = fp
	Top = 0
	bx = dx
	v7 = Mem0[ds:0x0000:word16] - ax
	Mem0[ds:0x0000:word16] = v7
	SCZO = cond(v7)
	dx = dx + Mem0[ds:0x0000:word16]
	SCZO = cond(dx)
	ds = dx
	Mem0[ds:0x0000:word16] = ax
	Mem0[ds:0x0002:word16] = bx
	bx = dx
	bx = bx + Mem0[ds:0x0000:word16]
	SCZO = cond(bx)
	ds = bx
	Mem0[ds:0x0002:word16] = dx
	ax = 0x0004
	return
	// succ:  fn0800_9F5C_exit
fn0800_9F5C_exit:


// fn0800_9F7F
// Return size: 0
define fn0800_9F7F
fn0800_9F7F_entry:
	// succ:  l0800_9F7F
l0800_9F7F:
	sp = fp
	Top = 0
	sp = sp - 2
	Mem0[ss:sp:word16] = bp
	bp = sp
	dx = dx ^ dx
	SZO = cond(dx)
	C = false
	ax = Mem0[ss:bp + 0x0004:word16]
	// succ:  l0800_9F87_thunk_fn0800_9F92
l0800_9F87_thunk_fn0800_9F92:
	call fn0800_9F92 (retsize: 0;)
	return
	// succ:  fn0800_9F7F_exit
fn0800_9F7F_exit:


// fn0800_9F89
// Return size: 2
define fn0800_9F89
fn0800_9F89_entry:
	// succ:  l0800_9F89
l0800_9F89:
	sp = fp
	Top = 0
	sp = sp - 2
	Mem0[ss:sp:word16] = bp
	bp = sp
	dx = Mem0[ss:bp + 0x0006:word16]
	ax = Mem0[ss:bp + 0x0004:word16]
	// succ:  l0800_9F8F_thunk_fn0800_9F92
l0800_9F8F_thunk_fn0800_9F92:
	call fn0800_9F92 (retsize: 0;)
	return
	// succ:  fn0800_9F89_exit
fn0800_9F89_exit:


// fn0800_9F92
// Return size: 0
define fn0800_9F92
fn0800_9F92_entry:
	// succ:  l0800_9F92
l0800_9F92:
	sp = fp
	Top = 0
	cx = ax
	cx = cx | dx
	SZO = cond(cx)
	C = false
	sp = sp - 2
	Mem0[ss:sp:word16] = si
	sp = sp - 2
	Mem0[ss:sp:word16] = di
	Mem0[0x0800:0x9D3B:word16] = ds
	branch Test(EQ,Z) l0800_9FFD_in_fn0800_9F92
	goto l0800_9F9D_thunk_fn0800_9F9F
	// succ:  l0800_9F9D_thunk_fn0800_9F9F l0800_9FFD_in_fn0800_9F92
l0800_9F92:
	cx = ax
	cx = cx | dx
	SZO = cond(cx)
	C = false
	sp = sp - 2
	Mem0[ss:sp:word16] = si
	sp = sp - 2
	Mem0[ss:sp:word16] = di
	Mem0[0x0800:0x9D3B:word16] = ds
	branch Test(EQ,Z) l0800_9FFD
	goto l0800_9F9D_thunk_fn0800_9F9F
	// succ:  l0800_9F9D_thunk_fn0800_9F9F l0800_9F9D_thunk_fn0800_9F9F
l0800_9F9D_thunk_fn0800_9F9F:
	call fn0800_9F9F (retsize: 0;)
	return
	// succ:  fn0800_9F92_exit
l0800_9F9D_thunk_fn0800_9F9F:
	call fn0800_9F9F (retsize: 0;)
	return
	// succ:  fn0800_9F92_exit
l0800_9F9D_thunk_fn0800_9F9F:
	call fn0800_9F9F (retsize: 0;)
	return
	// succ:  fn0800_9F92_exit
l0800_9FFD_in_fn0800_9F92:
	ds = Mem0[0x0800:0x9D3B:selector]
	di = Mem0[ss:sp:word16]
	sp = sp + 2
	si = Mem0[ss:sp:word16]
	sp = sp + 2
	bp = Mem0[ss:sp:word16]
	sp = sp + 2
	return
	// succ:  fn0800_9F92_exit
fn0800_9F92_exit:


// fn0800_9F9F
// Return size: 0
define fn0800_9F9F
fn0800_9F9F_entry:
	// succ:  l0800_9F9F
l0800_9F9F:
	sp = v4
	Top = 0
	ax = ax + 0x0013
	SCZO = cond(ax)
	dx = dx + 0x00 + C
	SCZO = cond(dx)
	branch Test(ULT,C) l0800_9FE8
	// succ:  l0800_9FA7 l0800_9FE8
l0800_9FA7:
	SZO = cond(dx & 0xFFF0)
	C = false
	branch Test(NE,Z) l0800_9FE8
	// succ:  l0800_9FAD l0800_9FE8
l0800_9FAD:
	cl = 0x04
	ax = ax >>u cl
	SCZO = cond(ax)
	dx = dx << cl
	SCZO = cond(dx)
	ah = ah | dl
	SZO = cond(ah)
	C = false
	dx = Mem0[0x0800:0x9D35:word16]
	dx = dx | dx
	SZO = cond(dx)
	C = false
	branch Test(EQ,Z) l0800_9FDE
	// succ:  l0800_9FBE l0800_9FDE
l0800_9FBE:
	dx = Mem0[0x0800:0x9D39:word16]
	dx = dx | dx
	SZO = cond(dx)
	C = false
	branch Test(EQ,Z) l0800_9FD9
	// succ:  l0800_9FC7 l0800_9FD9
l0800_9FC7:
	bx = dx
	// succ:  l0800_9FC9
l0800_9FC9:
	ds = dx
	SCZO = cond(Mem0[ds:0x0000:word16] - ax)
	branch Test(UGE,C) l0800_9FED
	// succ:  l0800_9FD1 l0800_9FED
l0800_9FD1:
	dx = Mem0[ds:0x0006:word16]
	SCZO = cond(dx - bx)
	branch Test(NE,Z) l0800_9FC9
	// succ:  l0800_9FD9 l0800_9FC9
l0800_9FD9:
	call fn0800_9F02 (retsize: 2;)
	goto l0800_9FFD
	// succ:  l0800_9FFD
l0800_9FDE:
	call fn0800_9E9E (retsize: 2;)
	goto l0800_9FFD
	// succ:  l0800_9FFD
l0800_9FE3:
	call fn0800_9F5C (retsize: 2;)
	goto l0800_9FFD
	// succ:  l0800_9FFD
l0800_9FE8:
	ax = ax ^ ax
	SZO = cond(ax)
	C = false
	dx_ax = (int32) ax
	goto l0800_9FFD
	// succ:  l0800_9FFD
l0800_9FED:
	branch Test(UGT,CZ) l0800_9FE3
	// succ:  l0800_9FEF l0800_9FE3
l0800_9FEF:
	call fn0800_9E15 (retsize: 2;)
	bx = Mem0[ds:0x0008:word16]
	Mem0[ds:0x0002:word16] = bx
	ax = 0x0004
	// succ:  l0800_9FFD
l0800_9FFD:
	ds = Mem0[0x0800:0x9D3B:selector]
	di = Mem0[ss:sp:word16]
	sp = sp + 2
	si = Mem0[ss:sp:word16]
	sp = sp + 2
	bp = Mem0[ss:sp:word16]
	sp = sp + 2
	return
	// succ:  fn0800_9F9F_exit
fn0800_9F9F_exit:


// fn0800_A006
// Return size: 2
define fn0800_A006
fn0800_A006_entry:
	// succ:  l0800_A006
l0800_A006:
	sp = fp
	Top = 0
	sp = sp - 2
	Mem0[ss:sp:word16] = bx
	si = Mem0[0x0800:0x9D3D:word16]
	sp = sp - 2
	Mem0[ss:sp:word16] = si
	si = Mem0[0x0800:0x9D3F:word16]
	sp = sp - 2
	Mem0[ss:sp:word16] = si
	call fn0800_9F89 (retsize: 2;)
	sp = sp + 0x0004
	SCZO = cond(sp)
	dx = dx | dx
	SZO = cond(dx)
	C = false
	branch Test(NE,Z) l0800_A01F
	// succ:  l0800_A01D l0800_A01F
l0800_A01D:
	bx = Mem0[ss:sp:word16]
	sp = sp + 2
	return
	// succ:  fn0800_A006_exit
l0800_A01F:
	ds = Mem0[ss:sp:selector]
	sp = sp + 2
	es = dx
	sp = sp - 2
	Mem0[ss:sp:word16] = es
	sp = sp - 2
	Mem0[ss:sp:word16] = ds
	sp = sp - 2
	Mem0[ss:sp:word16] = bx
	dx = Mem0[ds:0x0000:word16]
	D = false
	dx = dx - 0x0001
	SZO = cond(dx)
	di = 0x0004
	si = di
	cx = 0x0006
	// succ:  l0800_A033
l0800_A033:
	branch cx == 0x0000 l0800_A035
	// succ:  l0800_A033_1 l0800_A035
l0800_A033_1:
	v16 = Mem0[ds:si:word16]
	Mem0[es:di:word16] = v16
	si = si + 0x0002
	di = di + 0x0002
	cx = cx - 0x0001
	goto l0800_A033
	// succ:  l0800_A033
l0800_A035:
	dx = dx | dx
	SZO = cond(dx)
	C = false
	branch Test(EQ,Z) l0800_A070
	// succ:  l0800_A039 l0800_A070
l0800_A039:
	ax = es
	ax = ax + 0x0001
	SZO = cond(ax)
	es = ax
	ax = ds
	ax = ax + 0x0001
	SZO = cond(ax)
	ds = ax
	// succ:  l0800_A043
l0800_A043:
	di = di ^ di
	SZO = cond(di)
	C = false
	si = di
	cx = dx
	SCZO = cond(cx - 0x1000)
	branch Test(ULE,CZ) l0800_A052
	// succ:  l0800_A04F l0800_A052
l0800_A04F:
	cx = 0x1000
	// succ:  l0800_A052
l0800_A052:
	cx = cx << 0x0001
	SCZO = cond(cx)
	cx = cx << 0x0001
	SCZO = cond(cx)
	cx = cx << 0x0001
	SCZO = cond(cx)
	// succ:  l0800_A058
l0800_A058:
	branch cx == 0x0000 l0800_A05A
	// succ:  l0800_A058_1 l0800_A05A
l0800_A058_1:
	v19 = Mem0[ds:si:word16]
	Mem0[es:di:word16] = v19
	si = si + 0x0002
	di = di + 0x0002
	cx = cx - 0x0001
	goto l0800_A058
	// succ:  l0800_A058
l0800_A05A:
	dx = dx - 0x1000
	SCZO = cond(dx)
	branch Test(ULE,CZ) l0800_A070
	// succ:  l0800_A060 l0800_A070
l0800_A060:
	ax = es
	ax = ax + 0x1000
	SCZO = cond(ax)
	es = ax
	ax = ds
	ax = ax + 0x1000
	SCZO = cond(ax)
	ds = ax
	goto l0800_A043
	// succ:  l0800_A043
l0800_A070:
	ds = Mem0[0x0800:0x9D3B:selector]
	call fn0800_9E75 (retsize: 2;)
	sp = sp + 0x0004
	SCZO = cond(sp)
	dx = Mem0[ss:sp:word16]
	sp = sp + 2
	ax = 0x0004
	return
	// succ:  fn0800_A006_exit
fn0800_A006_exit:


// fn0800_A080
// Return size: 2
define fn0800_A080
fn0800_A080_entry:
	// succ:  l0800_A080
l0800_A080:
	sp = fp
	Top = 0
	SCZO = cond(bx - Mem0[0x0800:0x9D37:word16])
	branch Test(EQ,Z) l0800_A0CB
	// succ:  l0800_A087 l0800_A0CB
l0800_A087:
	di = bx
	di = di + ax
	SCZO = cond(di)
	es = di
	si = cx
	si = si - ax
	SCZO = cond(si)
	Mem0[es:0x0000:word16] = si
	Mem0[es:0x0002:word16] = bx
	sp = sp - 2
	Mem0[ss:sp:word16] = es
	sp = sp - 2
	Mem0[ss:sp:word16] = ax
	es = bx
	Mem0[es:0x0000:word16] = ax
	dx = bx
	dx = dx + cx
	SCZO = cond(dx)
	es = dx
	SCZO = cond(Mem0[es:0x0002:word16] - 0x0000)
	branch Test(EQ,Z) l0800_A0B8
	// succ:  l0800_A0B1 l0800_A0B8
l0800_A0B1:
	Mem0[es:0x0002:word16] = di
	goto l0800_A0BD
	// succ:  l0800_A0BD
l0800_A0B8:
	Mem0[es:0x0008:word16] = di
	// succ:  l0800_A0BD
l0800_A0BD:
	si = bx
	call fn0800_9E75 (retsize: 2;)
	sp = sp + 0x0004
	SCZO = cond(sp)
	dx = si
	ax = 0x0004
	return
	// succ:  fn0800_A080_exit
l0800_A0CB:
	sp = sp - 2
	Mem0[ss:sp:word16] = bx
	es = bx
	Mem0[es:0x0000:word16] = ax
	bx = bx + ax
	SCZO = cond(bx)
	sp = sp - 2
	Mem0[ss:sp:word16] = bx
	ax = ax ^ ax
	SZO = cond(ax)
	C = false
	sp = sp - 2
	Mem0[ss:sp:word16] = ax
	call fn0800_A1D6 (retsize: 2;)
	sp = sp + 0x0004
	SCZO = cond(sp)
	dx = Mem0[ss:sp:word16]
	sp = sp + 2
	ax = 0x0004
	return
	// succ:  fn0800_A080_exit
fn0800_A080_exit:


// fn0800_A162
// Return size: 2
define fn0800_A162
fn0800_A162_entry:
	// succ:  l0800_A162
l0800_A162:
	sp = fp
	Top = 0
	sp = sp - 2
	Mem0[ss:sp:word16] = bp
	bp = sp
	sp = sp - 2
	Mem0[ss:sp:word16] = si
	si = Mem0[ss:bp + 0x0006:word16]
	si = si + 0x0001
	SZO = cond(si)
	si = si - Mem0[ds:0x007B:word16]
	SCZO = cond(si)
	si = si + 0x003F
	SCZO = cond(si)
	cl = 0x06
	si = si >>u cl
	SCZO = cond(si)
	SCZO = cond(si - Mem0[ds:0x2698:word16])
	branch Test(NE,Z) l0800_A18D
	// succ:  l0800_A17B l0800_A18D
l0800_A17B:
	ax = Mem0[ss:bp + 0x0006:word16]
	dx = Mem0[ss:bp + 0x0004:word16]
	Mem0[ds:0x008D:word16] = ax
	Mem0[ds:0x008B:word16] = dx
	ax = 0x0001
	goto l0800_A1D1
	// succ:  l0800_A1D1
l0800_A18D:
	cl = 0x06
	si = si << cl
	SCZO = cond(si)
	dx = Mem0[ds:0x0091:word16]
	ax = si
	ax = ax + Mem0[ds:0x007B:word16]
	SCZO = cond(ax)
	SCZO = cond(ax - dx)
	branch Test(ULE,CZ) l0800_A1A5
	// succ:  l0800_A19F l0800_A1A5
l0800_A19F:
	si = dx
	si = si - Mem0[ds:0x007B:word16]
	SCZO = cond(si)
	// succ:  l0800_A1A5
l0800_A1A5:
	sp = sp - 2
	Mem0[ss:sp:word16] = si
	v14 = Mem0[ds:0x007B:word16]
	sp = sp - 2
	Mem0[ss:sp:word16] = v14
	call fn0800_A401 (retsize: 2;)
	cx = Mem0[ss:sp:word16]
	sp = sp + 2
	cx = Mem0[ss:sp:word16]
	sp = sp + 2
	dx = ax
	SCZO = cond(dx - 0xFFFF)
	branch Test(NE,Z) l0800_A1C1
	// succ:  l0800_A1B6 l0800_A1C1
l0800_A1B6:
	ax = si
	cl = 0x06
	ax = ax >>u cl
	SCZO = cond(ax)
	Mem0[ds:0x2698:word16] = ax
	goto l0800_A17B
	// succ:  l0800_A17B
l0800_A1C1:
	ax = Mem0[ds:0x007B:word16]
	ax = ax + dx
	SCZO = cond(ax)
	Mem0[ds:0x0091:word16] = ax
	Mem0[ds:0x008F:word16] = 0x0000
	ax = ax ^ ax
	SZO = cond(ax)
	C = false
	// succ:  l0800_A1D1
l0800_A1D1:
	si = Mem0[ss:sp:word16]
	sp = sp + 2
	bp = Mem0[ss:sp:word16]
	sp = sp + 2
	return
	// succ:  fn0800_A162_exit
fn0800_A162_exit:


// fn0800_A1D6
// Return size: 2
define fn0800_A1D6
fn0800_A1D6_entry:
	// succ:  l0800_A1D6
l0800_A1D6:
	sp = fp
	Top = 0
	sp = sp - 2
	Mem0[ss:sp:word16] = bp
	bp = sp
	cx = Mem0[ds:0x0089:word16]
	bx = Mem0[ds:0x0087:word16]
	dx = Mem0[ss:bp + 0x0006:word16]
	ax = Mem0[ss:bp + 0x0004:word16]
	call fn0800_8F2F (retsize: 2;)
	branch Test(ULT,C) l0800_A20C
	// succ:  l0800_A1EC l0800_A20C
l0800_A1EC:
	cx = Mem0[ds:0x0091:word16]
	bx = Mem0[ds:0x008F:word16]
	dx = Mem0[ss:bp + 0x0006:word16]
	ax = Mem0[ss:bp + 0x0004:word16]
	call fn0800_8F2F (retsize: 2;)
	branch Test(UGT,CZ) l0800_A20C
	// succ:  l0800_A1FF l0800_A20C
l0800_A1FF:
	v12 = Mem0[ss:bp + 0x0006:word16]
	sp = sp - 2
	Mem0[ss:sp:word16] = v12
	v13 = Mem0[ss:bp + 0x0004:word16]
	sp = sp - 2
	Mem0[ss:sp:word16] = v13
	call fn0800_A162 (retsize: 2;)
	sp = sp + 0x0004
	ax = ax | ax
	SZO = cond(ax)
	C = false
	branch Test(NE,Z) l0800_A211
	// succ:  l0800_A20C l0800_A211
l0800_A20C:
	ax = 0xFFFF
	goto l0800_A213
	// succ:  l0800_A213
l0800_A211:
	ax = ax ^ ax
	SZO = cond(ax)
	C = false
	// succ:  l0800_A213
l0800_A213:
	bp = Mem0[ss:sp:word16]
	sp = sp + 2
	return
	// succ:  fn0800_A1D6_exit
fn0800_A1D6_exit:


// fn0800_A215
// Return size: 2
define fn0800_A215
fn0800_A215_entry:
	// succ:  l0800_A215
l0800_A215:
	sp = fp
	Top = 0
	sp = sp - 2
	Mem0[ss:sp:word16] = bp
	bp = sp
	sp = sp - 0x0008
	SCZO = cond(sp)
	ax = Mem0[ds:0x008D:word16]
	dx = dx ^ dx
	SZO = cond(dx)
	C = false
	cl = 0x04
	call fn0800_8C69 (retsize: 2;)
	ax = ax + Mem0[ds:0x008B:word16]
	SCZO = cond(ax)
	dx = dx + 0x00 + C
	SCZO = cond(dx)
	ax = ax + Mem0[ss:bp + 0x0004:word16]
	SCZO = cond(ax)
	dx = dx + Mem0[ss:bp + 0x0006:word16] + C
	SCZO = cond(dx)
	SCZO = cond(dx - 0x000F)
	branch Test(LT,SO) l0800_A246
	// succ:  l0800_A237 l0800_A246
l0800_A237:
	branch Test(GT,SZO) l0800_A23E
	// succ:  l0800_A239 l0800_A23E
l0800_A239:
	SCZO = cond(ax - 0xFFFF)
	branch Test(ULE,CZ) l0800_A246
	// succ:  l0800_A23E l0800_A246
l0800_A23E:
	dx = 0xFFFF
	ax = 0xFFFF
	goto l0800_A29F
	// succ:  l0800_A29F
l0800_A246:
	dx = Mem0[ds:0x008D:word16]
	ax = Mem0[ds:0x008B:word16]
	cx = Mem0[ss:bp + 0x0006:word16]
	bx = Mem0[ss:bp + 0x0004:word16]
	call fn0800_8CCB (retsize: 2;)
	Mem0[ss:bp - 0x0002:word16] = dx
	Mem0[ss:bp - 0x0004:word16] = ax
	cx = Mem0[ds:0x0089:word16]
	bx = Mem0[ds:0x0087:word16]
	dx = Mem0[ss:bp - 0x0002:word16]
	call fn0800_8F2F (retsize: 2;)
	branch Test(ULT,C) l0800_A23E
	// succ:  l0800_A26C l0800_A23E
l0800_A26C:
	cx = Mem0[ds:0x0091:word16]
	bx = Mem0[ds:0x008F:word16]
	dx = Mem0[ss:bp - 0x0002:word16]
	ax = Mem0[ss:bp - 0x0004:word16]
	call fn0800_8F2F (retsize: 2;)
	branch Test(UGT,CZ) l0800_A23E
	// succ:  l0800_A27F l0800_A23E
l0800_A27F:
	ax = Mem0[ds:0x008D:word16]
	dx = Mem0[ds:0x008B:word16]
	Mem0[ss:bp - 0x0006:word16] = ax
	Mem0[ss:bp - 0x0008:word16] = dx
	v16 = Mem0[ss:bp - 0x0002:word16]
	sp = sp - 2
	Mem0[ss:sp:word16] = v16
	v17 = Mem0[ss:bp - 0x0004:word16]
	sp = sp - 2
	Mem0[ss:sp:word16] = v17
	call fn0800_A162 (retsize: 2;)
	sp = sp + 0x0004
	ax = ax | ax
	SZO = cond(ax)
	C = false
	branch Test(EQ,Z) l0800_A23E
	// succ:  l0800_A299 l0800_A23E
l0800_A299:
	dx = Mem0[ss:bp - 0x0006:word16]
	ax = Mem0[ss:bp - 0x0008:word16]
	// succ:  l0800_A29F
l0800_A29F:
	sp = bp
	bp = Mem0[ss:sp:word16]
	sp = sp + 2
	return
	// succ:  fn0800_A215_exit
fn0800_A215_exit:


// fn0800_A2A3
// Return size: 2
define fn0800_A2A3
fn0800_A2A3_entry:
	// succ:  l0800_A2A3
l0800_A2A3:
	sp = fp
	Top = 0
	sp = sp - 2
	Mem0[ss:sp:word16] = bp
	bp = sp
	sp = sp - 2
	Mem0[ss:sp:word16] = ds
	ds_dx = Mem0[ss:bp + 0x0008:segptr32]
	ah = 0x44
	al = Mem0[ss:bp + 0x0006:byte]
	bx = Mem0[ss:bp + 0x0004:word16]
	cx = Mem0[ss:bp + 0x000C:word16]
	msdos_unknown_2144()
	ds = Mem0[ss:sp:selector]
	sp = sp + 2
	branch Test(ULT,C) l0800_A2C6
	// succ:  l0800_A2BA l0800_A2C6
l0800_A2BA:
	SCZO = cond(Mem0[ss:bp + 0x0006:word16] - 0x0000)
	branch Test(NE,Z) l0800_A2C4
	// succ:  l0800_A2C0 l0800_A2C4
l0800_A2C0:
	ax = dx
	goto l0800_A2CA
	// succ:  l0800_A2CA
l0800_A2C4:
	goto l0800_A2CA
	// succ:  l0800_A2CA
l0800_A2C6:
	sp = sp - 2
	Mem0[ss:sp:word16] = ax
	call fn0800_8D2B (retsize: 2;)
	sp = sp + 0x0002
	// succ:  l0800_A2CA
l0800_A2CA:
	bp = Mem0[ss:sp:word16]
	sp = sp + 2
	return
	// succ:  fn0800_A2A3_exit
fn0800_A2A3_exit:


// fn0800_A2CC
// Return size: 0
define fn0800_A2CC
fn0800_A2CC_entry:
	// succ:  l0800_A2CC
l0800_A2CC:
	sp = fp
	Top = 0
	call Mem0[ds:0x26F4:word16] (retsize: 2;)
	return
	// succ:  fn0800_A2CC_exit
fn0800_A2CC_exit:


// fn0800_A2D0
// Return size: 0
define fn0800_A2D0
fn0800_A2D0_entry:
	// succ:  l0800_A2D0
l0800_A2D0:
	sp = fp
	Top = 0
	call Mem0[ds:0x26F6:word16] (retsize: 2;)
	return
	// succ:  fn0800_A2D0_exit
fn0800_A2D0_exit:


// fn0800_A2D4
// Return size: 0
define fn0800_A2D4
fn0800_A2D4_entry:
	// succ:  l0800_A2D4
l0800_A2D4:
	sp = fp
	Top = 0
	call Mem0[ds:0x26F8:word16] (retsize: 2;)
	return
	// succ:  fn0800_A2D4_exit
fn0800_A2D4_exit:


// fn0800_A2D8
// Return size: 0
define fn0800_A2D8
fn0800_A2D8_entry:
	// succ:  l0800_A2D8
l0800_A2D8:
	sp = fp
	Top = 0
	call Mem0[ds:0x26FA:word16] (retsize: 2;)
	return
	// succ:  fn0800_A2D8_exit
fn0800_A2D8_exit:


// fn0800_A36D
// Return size: 2
define fn0800_A36D
fn0800_A36D_entry:
	// succ:  l0800_A36D
l0800_A36D:
	sp = fp
	Top = 0
	ax = ax | ax
	SZO = cond(ax)
	C = false
	branch Test(EQ,Z) l0800_A378
	// succ:  l0800_A371 l0800_A378
l0800_A371:
	dx = dx + 0x0001
	SZO = cond(dx)
	Mem0[es:di:byte] = al
	di = di + 0x0001
	al = al | al
	SZO = cond(al)
	C = false
	branch Test(NE,Z) l0800_A378
	// succ:  l0800_A377 l0800_A378
l0800_A377:
	bx = bx + 0x0001
	SZO = cond(bx)
	// succ:  l0800_A378
l0800_A378:
	v12 = al
	al = ah
	ah = v12
	al = al ^ al
	SZO = cond(al)
	C = false
	C = true
	branch cx == 0x0000 l0800_A394
	// succ:  l0800_A37F l0800_A394
l0800_A37F:
	al = Mem0[ds:si:byte]
	si = si + 0x0001
	cx = cx - 0x0001
	SZO = cond(cx)
	al = al - 0x22
	SCZO = cond(al)
	branch Test(EQ,Z) l0800_A394
	// succ:  l0800_A385 l0800_A394
l0800_A385:
	al = al + 0x22
	SCZO = cond(al)
	SCZO = cond(al - 0x5C)
	branch Test(NE,Z) l0800_A392
	// succ:  l0800_A38B l0800_A392
l0800_A38B:
	SCZO = cond(Mem0[ds:si:byte] - 0x22)
	branch Test(NE,Z) l0800_A392
	// succ:  l0800_A390 l0800_A392
l0800_A390:
	al = Mem0[ds:si:byte]
	si = si + 0x0001
	cx = cx - 0x0001
	SZO = cond(cx)
	// succ:  l0800_A392
l0800_A392:
	si = si | si
	SZO = cond(si)
	C = false
	// succ:  l0800_A394
l0800_A394:
	return
	// succ:  fn0800_A36D_exit
fn0800_A36D_exit:


// fn0800_A401
// Return size: 2
define fn0800_A401
fn0800_A401_entry:
	// succ:  l0800_A401
l0800_A401:
	sp = fp
	Top = 0
	sp = sp - 2
	Mem0[ss:sp:word16] = bp
	bp = sp
	ah = 0x4A
	bx = Mem0[ss:bp + 0x0006:word16]
	es = Mem0[ss:bp + 0x0004:selector]
	C = msdos_resize_memory_block(es, bx, out bx)
	branch Test(ULT,C) l0800_A415
	// succ:  l0800_A410 l0800_A415
l0800_A410:
	ax = 0xFFFF
	goto l0800_A41B
	// succ:  l0800_A41B
l0800_A415:
	sp = sp - 2
	Mem0[ss:sp:word16] = bx
	sp = sp - 2
	Mem0[ss:sp:word16] = ax
	call fn0800_8D2B (retsize: 2;)
	sp = sp + 0x0002
	ax = Mem0[ss:sp:word16]
	sp = sp + 2
	// succ:  l0800_A41B
l0800_A41B:
	bp = Mem0[ss:sp:word16]
	sp = sp + 2
	return
	// succ:  fn0800_A401_exit
fn0800_A401_exit:


// fn0800_A471
// Return size: 2
define fn0800_A471
fn0800_A471_entry:
	// succ:  l0800_A471
l0800_A471:
	sp = fp
	Top = 0
	sp = sp - 2
	Mem0[ss:sp:word16] = bp
	bp = sp
	sp = sp - 2
	Mem0[ss:sp:word16] = si
	sp = sp - 2
	Mem0[ss:sp:word16] = di
	sp = sp - 2
	Mem0[ss:sp:word16] = es
	sp = sp - 2
	Mem0[ss:sp:word16] = bp
	es_si = Mem0[ss:bp + 0x0004:segptr32]
	D = false
	ax = ax - ax
	SCZO = cond(ax)
	dx_ax = (int32) ax
	cx = 0x000A
	bh = 0x00
	di = 0x2251
	// succ:  l0800_A487
l0800_A487:
	bl = Mem0[es:si:byte]
	si = si + 0x0001
	SZO = cond(si)
	SZO = cond(Mem0[ds:bx + di:byte] & 0x01)
	C = false
	branch Test(NE,Z) l0800_A487
	// succ:  l0800_A490 l0800_A487
l0800_A490:
	bp = 0x0000
	SCZO = cond(bl - 0x2B)
	branch Test(EQ,Z) l0800_A49E
	// succ:  l0800_A498 l0800_A49E
l0800_A498:
	SCZO = cond(bl - 0x2D)
	branch Test(NE,Z) l0800_A4A2
	// succ:  l0800_A49D l0800_A4A2
l0800_A49D:
	bp = bp + 0x0001
	SZO = cond(bp)
	// succ:  l0800_A49E
l0800_A49E:
	bl = Mem0[es:si:byte]
	si = si + 0x0001
	SZO = cond(si)
	// succ:  l0800_A4A2
l0800_A4A2:
	SCZO = cond(bl - 0x39)
	branch Test(UGT,CZ) l0800_A4D6
	// succ:  l0800_A4A7 l0800_A4D6
l0800_A4A7:
	bl = bl - 0x30
	SCZO = cond(bl)
	branch Test(ULT,C) l0800_A4D6
	// succ:  l0800_A4AC l0800_A4D6
l0800_A4AC:
	dx_ax = cx *u ax
	SCZO = cond(dx_ax)
	ax = ax + bx
	SCZO = cond(ax)
	dl = dl + dh + C
	SCZO = cond(dl)
	branch Test(EQ,Z) l0800_A49E
	// succ:  l0800_A4B4 l0800_A49E
l0800_A4B4:
	goto l0800_A4C8
	// succ:  l0800_A4C8
l0800_A4B6:
	di = dx
	cx = 0x000A
	dx_ax = cx *u ax
	SCZO = cond(dx_ax)
	v26 = ax
	ax = di
	di = v26
	v27 = cx
	cx = dx
	dx = v27
	dx_ax = dx *u ax
	SCZO = cond(dx_ax)
	v28 = ax
	ax = dx
	dx = v28
	v29 = ax
	ax = di
	di = v29
	ax = ax + bx
	SCZO = cond(ax)
	dx = dx + cx + C
	SCZO = cond(dx)
	// succ:  l0800_A4C8
l0800_A4C8:
	bl = Mem0[es:si:byte]
	si = si + 0x0001
	SZO = cond(si)
	SCZO = cond(bl - 0x39)
	branch Test(UGT,CZ) l0800_A4D6
	// succ:  l0800_A4D1 l0800_A4D6
l0800_A4D1:
	bl = bl - 0x30
	SCZO = cond(bl)
	branch Test(UGE,C) l0800_A4B6
	// succ:  l0800_A4D6 l0800_A4B6
l0800_A4D6:
	bp = bp - 0x0001
	SZO = cond(bp)
	branch Test(LT,SO) l0800_A4E0
	// succ:  l0800_A4D9 l0800_A4E0
l0800_A4D9:
	dx = -dx
	SCZO = cond(dx)
	C = dx == 0x0000
	ax = -ax
	SCZO = cond(ax)
	C = ax == 0x0000
	dx = dx - 0x00 - C
	SCZO = cond(dx)
	// succ:  l0800_A4E0
l0800_A4E0:
	bp = Mem0[ss:sp:word16]
	sp = sp + 2
	es = Mem0[ss:sp:selector]
	sp = sp + 2
	di = Mem0[ss:sp:word16]
	sp = sp + 2
	si = Mem0[ss:sp:word16]
	sp = sp + 2
	bp = Mem0[ss:sp:word16]
	sp = sp + 2
	return
	// succ:  fn0800_A471_exit
fn0800_A471_exit:


// fn0800_A4F6
// Return size: 2
define fn0800_A4F6
fn0800_A4F6_entry:
	// succ:  l0800_A4F6
l0800_A4F6:
	sp = fp
	Top = 0
	sp = sp - 2
	Mem0[ss:sp:word16] = bp
	bp = sp
	ax = ax ^ ax
	SZO = cond(ax)
	C = false
	sp = sp - 2
	Mem0[ss:sp:word16] = ax
	v8 = Mem0[ss:bp + 0x0006:word16]
	sp = sp - 2
	Mem0[ss:sp:word16] = v8
	v9 = Mem0[ss:bp + 0x0004:word16]
	sp = sp - 2
	Mem0[ss:sp:word16] = v9
	call fn0800_A53C (retsize: 2;)
	sp = sp + 0x0006
	SCZO = cond(sp)
	dx = ax
	SCZO = cond(dx - 0xFFFF)
	branch Test(NE,Z) l0800_A513
	// succ:  l0800_A50F l0800_A513
l0800_A50F:
	ax = dx
	goto l0800_A53A
	// succ:  l0800_A53A
l0800_A513:
	dx = dx & 0xFFFE
	SZO = cond(dx)
	C = false
	SZO = cond(Mem0[ss:bp + 0x0008:word16] & 0x0080)
	C = false
	branch Test(NE,Z) l0800_A520
	// succ:  l0800_A51D l0800_A520
l0800_A51D:
	dx = dx | 0x0001
	SZO = cond(dx)
	C = false
	// succ:  l0800_A520
l0800_A520:
	sp = sp - 2
	Mem0[ss:sp:word16] = dx
	ax = 0x0001
	sp = sp - 2
	Mem0[ss:sp:word16] = ax
	v13 = Mem0[ss:bp + 0x0006:word16]
	sp = sp - 2
	Mem0[ss:sp:word16] = v13
	v14 = Mem0[ss:bp + 0x0004:word16]
	sp = sp - 2
	Mem0[ss:sp:word16] = v14
	call fn0800_A53C (retsize: 2;)
	sp = sp + 0x0008
	SCZO = cond(sp)
	dx = ax
	SCZO = cond(dx - 0xFFFF)
	branch Test(EQ,Z) l0800_A50F
	// succ:  l0800_A538 l0800_A50F
l0800_A538:
	ax = ax ^ ax
	SZO = cond(ax)
	C = false
	// succ:  l0800_A53A
l0800_A53A:
	bp = Mem0[ss:sp:word16]
	sp = sp + 2
	return
	// succ:  fn0800_A4F6_exit
fn0800_A4F6_exit:


// fn0800_A53C
// Return size: 2
define fn0800_A53C
fn0800_A53C_entry:
	// succ:  l0800_A53C
l0800_A53C:
	sp = fp
	Top = 0
	sp = sp - 2
	Mem0[ss:sp:word16] = bp
	bp = sp
	sp = sp - 2
	Mem0[ss:sp:word16] = ds
	cx = Mem0[ss:bp + 0x000A:word16]
	ah = 0x43
	al = Mem0[ss:bp + 0x0008:byte]
	ds_dx = Mem0[ss:bp + 0x0004:segptr32]
	msdos_unknown_2143()
	ds = Mem0[ss:sp:selector]
	sp = sp + 2
	branch Test(ULT,C) l0800_A553
	// succ:  l0800_A550 l0800_A553
l0800_A550:
	v11 = ax
	ax = cx
	cx = v11
	goto l0800_A557
	// succ:  l0800_A557
l0800_A553:
	sp = sp - 2
	Mem0[ss:sp:word16] = ax
	call fn0800_8D2B (retsize: 2;)
	sp = sp + 0x0002
	// succ:  l0800_A557
l0800_A557:
	bp = Mem0[ss:sp:word16]
	sp = sp + 2
	return
	// succ:  fn0800_A53C_exit
fn0800_A53C_exit:


// fn0800_A559
// Return size: 2
define fn0800_A559
fn0800_A559_entry:
	// succ:  l0800_A559
l0800_A559:
	sp = fp
	Top = 0
	sp = sp - 2
	Mem0[ss:sp:word16] = bp
	bp = sp
	dx = Mem0[ss:bp + 0x0004:word16]
	SCZO = cond(dx - Mem0[ds:0x24E8:word16])
	branch Test(ULT,C) l0800_A56E
	// succ:  l0800_A565 l0800_A56E
l0800_A565:
	ax = 0x0006
	sp = sp - 2
	Mem0[ss:sp:word16] = ax
	call fn0800_8D2B (retsize: 2;)
	sp = sp + 0x0002
	goto l0800_A57D
	// succ:  l0800_A57D
l0800_A56E:
	bx = dx
	bx = bx << 0x0001
	SCZO = cond(bx)
	Mem0[ds:bx + 0x24EA:word16] = 0x0000
	sp = sp - 2
	Mem0[ss:sp:word16] = dx
	call fn0800_A57F (retsize: 2;)
	cx = Mem0[ss:sp:word16]
	sp = sp + 2
	// succ:  l0800_A57D
l0800_A57D:
	bp = Mem0[ss:sp:word16]
	sp = sp + 2
	return
	// succ:  fn0800_A559_exit
fn0800_A559_exit:


// fn0800_A57F
// Return size: 2
define fn0800_A57F
fn0800_A57F_entry:
	// succ:  l0800_A57F
l0800_A57F:
	sp = fp
	Top = 0
	sp = sp - 2
	Mem0[ss:sp:word16] = bp
	bp = sp
	ah = 0x3E
	bx = Mem0[ss:bp + 0x0004:word16]
	C = msdos_close_file(bx)
	branch Test(ULT,C) l0800_A597
	// succ:  l0800_A58B l0800_A597
l0800_A58B:
	bx = bx << 0x0001
	SCZO = cond(bx)
	Mem0[ds:bx + 0x24EA:word16] = 0x0000
	ax = ax ^ ax
	SZO = cond(ax)
	C = false
	goto l0800_A59B
	// succ:  l0800_A59B
l0800_A597:
	sp = sp - 2
	Mem0[ss:sp:word16] = ax
	call fn0800_8D2B (retsize: 2;)
	sp = sp + 0x0002
	// succ:  l0800_A59B
l0800_A59B:
	bp = Mem0[ss:sp:word16]
	sp = sp + 2
	return
	// succ:  fn0800_A57F_exit
fn0800_A57F_exit:


// fn0800_A59D
// Return size: 2
define fn0800_A59D
fn0800_A59D_entry:
	// succ:  l0800_A59D
l0800_A59D:
	sp = fp
	Top = 0
	sp = sp - 2
	Mem0[ss:sp:word16] = bp
	bp = sp
	sp = sp - 0x0004
	SCZO = cond(sp)
	ax = Mem0[ss:bp + 0x0004:word16]
	SCZO = cond(ax - Mem0[ds:0x24E8:word16])
	branch Test(ULT,C) l0800_A5B2
	// succ:  l0800_A5AC l0800_A5B2
l0800_A5AC:
	ax = 0x0006
	sp = sp - 2
	Mem0[ss:sp:word16] = ax
	goto l0800_A60D
	// succ:  l0800_A60D
l0800_A5B2:
	bx = Mem0[ss:bp + 0x0004:word16]
	bx = bx << 0x0001
	SCZO = cond(bx)
	SZO = cond(Mem0[ds:bx + 0x24EA:word16] & 0x0200)
	C = false
	branch Test(EQ,Z) l0800_A5C4
	// succ:  l0800_A5BF l0800_A5C4
l0800_A5BF:
	ax = 0x0001
	goto l0800_A610
	// succ:  l0800_A610
l0800_A5C4:
	ax = 0x4400
	bx = Mem0[ss:bp + 0x0004:word16]
	C = msdos_ioctl_get_device_info(bx, out dx)
	branch Test(ULT,C) l0800_A60C
	// succ:  l0800_A5CE l0800_A60C
l0800_A5CE:
	SZO = cond(dl & 0x80)
	C = false
	branch Test(NE,Z) l0800_A608
	// succ:  l0800_A5D3 l0800_A608
l0800_A5D3:
	ax = 0x4201
	cx = cx ^ cx
	SZO = cond(cx)
	C = false
	dx = cx
	C = msdos_set_file_position(bx, cx_dx, al, dx_ax)
	branch Test(ULT,C) l0800_A60C
	// succ:  l0800_A5DE l0800_A60C
l0800_A5DE:
	sp = sp - 2
	Mem0[ss:sp:word16] = dx
	sp = sp - 2
	Mem0[ss:sp:word16] = ax
	ax = 0x4202
	cx = cx ^ cx
	SZO = cond(cx)
	C = false
	dx = cx
	C = msdos_set_file_position(bx, cx_dx, al, dx_ax)
	Mem0[ss:bp - 0x0004:word16] = ax
	Mem0[ss:bp - 0x0002:word16] = dx
	dx = Mem0[ss:sp:word16]
	sp = sp + 2
	cx = Mem0[ss:sp:word16]
	sp = sp + 2
	branch Test(ULT,C) l0800_A60C
	// succ:  l0800_A5F3 l0800_A60C
l0800_A5F3:
	ax = 0x4200
	C = msdos_set_file_position(bx, cx_dx, al, dx_ax)
	branch Test(ULT,C) l0800_A60C
	// succ:  l0800_A5FA l0800_A60C
l0800_A5FA:
	SCZO = cond(dx - Mem0[ss:bp - 0x0002:word16])
	branch Test(ULT,C) l0800_A608
	// succ:  l0800_A5FF l0800_A608
l0800_A5FF:
	branch Test(UGT,CZ) l0800_A606
	// succ:  l0800_A601 l0800_A606
l0800_A601:
	SCZO = cond(ax - Mem0[ss:bp - 0x0004:word16])
	branch Test(ULT,C) l0800_A608
	// succ:  l0800_A606 l0800_A608
l0800_A606:
	goto l0800_A5BF
	// succ:  l0800_A5BF
l0800_A608:
	ax = ax ^ ax
	SZO = cond(ax)
	C = false
	goto l0800_A610
	// succ:  l0800_A610
l0800_A60C:
	sp = sp - 2
	Mem0[ss:sp:word16] = ax
	// succ:  l0800_A60D
l0800_A60D:
	call fn0800_8D2B (retsize: 2;)
	sp = sp + 0x0002
	// succ:  l0800_A610
l0800_A610:
	sp = bp
	bp = Mem0[ss:sp:word16]
	sp = sp + 2
	return
	// succ:  fn0800_A59D_exit
fn0800_A59D_exit:


// fn0800_A614
// Return size: 2
define fn0800_A614
fn0800_A614_entry:
	// succ:  l0800_A614
l0800_A614:
	sp = fp
	Top = 0
	sp = sp - 2
	Mem0[ss:sp:word16] = bp
	bp = sp
	sp = sp - 2
	Mem0[ss:sp:word16] = si
	si = 0xFFFF
	es_bx = Mem0[ss:bp + 0x0004:segptr32]
	ax = Mem0[es:bx + 0x0012:word16]
	SCZO = cond(ax - Mem0[ss:bp + 0x0004:word16])
	branch Test(EQ,Z) l0800_A62A
	// succ:  l0800_A627 l0800_A62A
l0800_A627:
	goto l0800_A6B2
	// succ:  l0800_A6B2
l0800_A62A:
	es_bx = Mem0[ss:bp + 0x0004:segptr32]
	SCZO = cond(Mem0[es:bx + 0x0006:word16] - 0x0000)
	branch Test(EQ,Z) l0800_A65F
	// succ:  l0800_A634 l0800_A65F
l0800_A634:
	SCZO = cond(Mem0[es:bx:word16] - 0x0000)
	branch Test(GE,SO) l0800_A647
	// succ:  l0800_A63A l0800_A647
l0800_A63A:
	v13 = Mem0[ss:bp + 0x0006:word16]
	sp = sp - 2
	Mem0[ss:sp:word16] = v13
	sp = sp - 2
	Mem0[ss:sp:word16] = bx
	call fn0800_A6B7 (retsize: 2;)
	cx = Mem0[ss:sp:word16]
	sp = sp + 2
	cx = Mem0[ss:sp:word16]
	sp = sp + 2
	ax = ax | ax
	SZO = cond(ax)
	C = false
	branch Test(NE,Z) l0800_A6B2
	// succ:  l0800_A647 l0800_A6B2
l0800_A647:
	es_bx = Mem0[ss:bp + 0x0004:segptr32]
	SZO = cond(Mem0[es:bx + 0x0002:word16] & 0x0004)
	C = false
	branch Test(EQ,Z) l0800_A65F
	// succ:  l0800_A652 l0800_A65F
l0800_A652:
	v17 = Mem0[es:bx + 0x000A:word16]
	sp = sp - 2
	Mem0[ss:sp:word16] = v17
	v18 = Mem0[es:bx + 0x0008:word16]
	sp = sp - 2
	Mem0[ss:sp:word16] = v18
	call fn0800_9E75 (retsize: 2;)
	cx = Mem0[ss:sp:word16]
	sp = sp + 2
	cx = Mem0[ss:sp:word16]
	sp = sp + 2
	// succ:  l0800_A65F
l0800_A65F:
	es_bx = Mem0[ss:bp + 0x0004:segptr32]
	SCZO = cond(Mem0[es:bx + 0x0004:byte] - 0x00)
	branch Test(LT,SO) l0800_A675
	// succ:  l0800_A669 l0800_A675
l0800_A669:
	al = Mem0[es:bx + 0x0004:byte]
	ax = (int16) al
	sp = sp - 2
	Mem0[ss:sp:word16] = ax
	call fn0800_A559 (retsize: 2;)
	cx = Mem0[ss:sp:word16]
	sp = sp + 2
	si = ax
	// succ:  l0800_A675
l0800_A675:
	es_bx = Mem0[ss:bp + 0x0004:segptr32]
	Mem0[es:bx + 0x0002:word16] = 0x0000
	Mem0[es:bx + 0x0006:word16] = 0x0000
	Mem0[es:bx:word16] = 0x0000
	Mem0[es:bx + 0x0004:byte] = 0xFF
	SCZO = cond(Mem0[es:bx + 0x0010:word16] - 0x0000)
	branch Test(EQ,Z) l0800_A6B2
	// succ:  l0800_A695 l0800_A6B2
l0800_A695:
	ax = ax ^ ax
	SZO = cond(ax)
	C = false
	sp = sp - 2
	Mem0[ss:sp:word16] = ax
	sp = sp - 2
	Mem0[ss:sp:word16] = ax
	sp = sp - 2
	Mem0[ss:sp:word16] = ax
	sp = sp - 2
	Mem0[ss:sp:word16] = ax
	v20 = Mem0[es:bx + 0x0010:word16]
	sp = sp - 2
	Mem0[ss:sp:word16] = v20
	call fn0800_8E6A (retsize: 2;)
	sp = sp + 0x000A
	sp = sp - 2
	Mem0[ss:sp:word16] = dx
	sp = sp - 2
	Mem0[ss:sp:word16] = ax
	call fn0800_97F8 (retsize: 2;)
	cx = Mem0[ss:sp:word16]
	sp = sp + 2
	cx = Mem0[ss:sp:word16]
	sp = sp + 2
	es_bx = Mem0[ss:bp + 0x0004:segptr32]
	Mem0[es:bx + 0x0010:word16] = 0x0000
	// succ:  l0800_A6B2
l0800_A6B2:
	ax = si
	si = Mem0[ss:sp:word16]
	sp = sp + 2
	bp = Mem0[ss:sp:word16]
	sp = sp + 2
	return
	// succ:  fn0800_A614_exit
fn0800_A614_exit:


// fn0800_A6B7
// Return size: 2
define fn0800_A6B7
fn0800_A6B7_entry:
	// succ:  l0800_A6B7
l0800_A6B7:
	sp = fp
	Top = 0
	sp = sp - 2
	Mem0[ss:sp:word16] = bp
	bp = sp
	sp = sp - 2
	Mem0[ss:sp:word16] = si
	ax = Mem0[ss:bp + 0x0004:word16]
	ax = ax | Mem0[ss:bp + 0x0006:word16]
	SZO = cond(ax)
	C = false
	branch Test(NE,Z) l0800_A6C9
	// succ:  l0800_A6C3 l0800_A6C9
l0800_A6C3:
	call fn0800_A877 (retsize: 2;)
	goto l0800_A778
	// succ:  l0800_A778
l0800_A6C9:
	es_bx = Mem0[ss:bp + 0x0004:segptr32]
	ax = Mem0[es:bx + 0x0012:word16]
	SCZO = cond(ax - Mem0[ss:bp + 0x0004:word16])
	branch Test(EQ,Z) l0800_A6DB
	// succ:  l0800_A6D5 l0800_A6DB
l0800_A6D5:
	ax = 0xFFFF
	goto l0800_A77A
	// succ:  l0800_A77A
l0800_A6DB:
	es_bx = Mem0[ss:bp + 0x0004:segptr32]
	SCZO = cond(Mem0[es:bx:word16] - 0x0000)
	branch Test(LT,SO) l0800_A732
	// succ:  l0800_A6E4 l0800_A732
l0800_A6E4:
	SZO = cond(Mem0[es:bx + 0x0002:word16] & 0x0008)
	C = false
	branch Test(NE,Z) l0800_A701
	// succ:  l0800_A6EC l0800_A701
l0800_A6EC:
	ax = Mem0[es:bx + 0x000E:word16]
	dx = Mem0[ss:bp + 0x0004:word16]
	dx = dx + 0x0005
	SCZO = cond(dx)
	SCZO = cond(ax - Mem0[ss:bp + 0x0006:word16])
	branch Test(NE,Z) l0800_A778
	// succ:  l0800_A6FB l0800_A778
l0800_A6FB:
	SCZO = cond(Mem0[es:bx + 0x000C:word16] - dx)
	branch Test(NE,Z) l0800_A778
	// succ:  l0800_A701 l0800_A778
l0800_A701:
	es_bx = Mem0[ss:bp + 0x0004:segptr32]
	Mem0[es:bx:word16] = 0x0000
	ax = Mem0[es:bx + 0x000E:word16]
	dx = Mem0[ss:bp + 0x0004:word16]
	dx = dx + 0x0005
	SCZO = cond(dx)
	SCZO = cond(ax - Mem0[ss:bp + 0x0006:word16])
	branch Test(NE,Z) l0800_A778
	// succ:  l0800_A718 l0800_A778
l0800_A718:
	SCZO = cond(Mem0[es:bx + 0x000C:word16] - dx)
	branch Test(NE,Z) l0800_A778
	// succ:  l0800_A71E l0800_A778
l0800_A71E:
	ax = Mem0[es:bx + 0x000A:word16]
	dx = Mem0[es:bx + 0x0008:word16]
	Mem0[es:bx + 0x000E:word16] = ax
	Mem0[es:bx + 0x000C:word16] = dx
	goto l0800_A778
	// succ:  l0800_A778
l0800_A732:
	es_bx = Mem0[ss:bp + 0x0004:segptr32]
	ax = Mem0[es:bx + 0x0006:word16]
	ax = ax + Mem0[es:bx:word16]
	SCZO = cond(ax)
	ax = ax + 0x0001
	SZO = cond(ax)
	si = ax
	v16 = Mem0[es:bx:word16] - si
	Mem0[es:bx:word16] = v16
	SCZO = cond(v16)
	sp = sp - 2
	Mem0[ss:sp:word16] = ax
	ax = Mem0[es:bx + 0x000A:word16]
	dx = Mem0[es:bx + 0x0008:word16]
	Mem0[es:bx + 0x000E:word16] = ax
	Mem0[es:bx + 0x000C:word16] = dx
	sp = sp - 2
	Mem0[ss:sp:word16] = ax
	sp = sp - 2
	Mem0[ss:sp:word16] = dx
	al = Mem0[es:bx + 0x0004:byte]
	ax = (int16) al
	sp = sp - 2
	Mem0[ss:sp:word16] = ax
	call fn0800_C632 (retsize: 2;)
	sp = sp + 0x0008
	SCZO = cond(sp)
	SCZO = cond(ax - si)
	branch Test(EQ,Z) l0800_A778
	// succ:  l0800_A765 l0800_A778
l0800_A765:
	es_bx = Mem0[ss:bp + 0x0004:segptr32]
	SZO = cond(Mem0[es:bx + 0x0002:word16] & 0x0200)
	C = false
	branch Test(NE,Z) l0800_A778
	// succ:  l0800_A770 l0800_A778
l0800_A770:
	v18 = Mem0[es:bx + 0x0002:word16] | 0x0010
	Mem0[es:bx + 0x0002:word16] = v18
	SZO = cond(Mem0[es:bx + 0x0002:word16])
	C = false
	goto l0800_A6D5
	// succ:  l0800_A6D5
l0800_A778:
	ax = ax ^ ax
	SZO = cond(ax)
	C = false
	// succ:  l0800_A77A
l0800_A77A:
	si = Mem0[ss:sp:word16]
	sp = sp + 2
	bp = Mem0[ss:sp:word16]
	sp = sp + 2
	return
	// succ:  fn0800_A6B7_exit
fn0800_A6B7_exit:


// fn0800_A77D
// Return size: 2
define fn0800_A77D
fn0800_A77D_entry:
	// succ:  l0800_A77D
l0800_A77D:
	sp = fp
	Top = 0
	sp = sp - 2
	Mem0[ss:sp:word16] = bp
	bp = sp
	sp = sp - 0x0004
	SCZO = cond(sp)
	sp = sp - 2
	Mem0[ss:sp:word16] = si
	sp = sp - 2
	Mem0[ss:sp:word16] = di
	di = Mem0[ss:bp + 0x0008:word16]
	cx = cx ^ cx
	SZO = cond(cx)
	C = false
	ax = Mem0[ss:bp + 0x0006:word16]
	dx = Mem0[ss:bp + 0x0004:word16]
	Mem0[ss:bp - 0x0002:word16] = ax
	Mem0[ss:bp - 0x0004:word16] = dx
	goto l0800_A7A1
	// succ:  l0800_A7A1
l0800_A798:
	es_bx = Mem0[ss:bp - 0x0004:segptr32]
	Mem0[es:bx:byte] = cl
	v25 = Mem0[ss:bp - 0x0004:word16] + 0x0001
	Mem0[ss:bp - 0x0004:word16] = v25
	SZO = cond(v25)
	// succ:  l0800_A7A1
l0800_A7A1:
	SCZO = cond(cx - 0x000A)
	branch Test(EQ,Z) l0800_A7D8
	// succ:  l0800_A7A6 l0800_A7D8
l0800_A7A6:
	di = di - 0x0001
	SZO = cond(di)
	branch Test(LE,SZO) l0800_A7D8
	// succ:  l0800_A7A9 l0800_A7D8
l0800_A7A9:
	es_bx = Mem0[ss:bp + 0x000A:segptr32]
	v17 = Mem0[es:bx:word16] - 0x0001
	Mem0[es:bx:word16] = v17
	SZO = cond(v17)
	branch Test(LT,SO) l0800_A7C6
	// succ:  l0800_A7B1 l0800_A7C6
l0800_A7B1:
	ax = Mem0[es:bx + 0x000E:word16]
	si = Mem0[es:bx + 0x000C:word16]
	v19 = Mem0[es:bx + 0x000C:word16] + 0x0001
	Mem0[es:bx + 0x000C:word16] = v19
	SZO = cond(v19)
	es = ax
	al = Mem0[es:si:byte]
	ah = 0x00
	goto l0800_A7D1
	// succ:  l0800_A7D1
l0800_A7C6:
	v22 = Mem0[ss:bp + 0x000C:word16]
	sp = sp - 2
	Mem0[ss:sp:word16] = v22
	v23 = Mem0[ss:bp + 0x000A:word16]
	sp = sp - 2
	Mem0[ss:sp:word16] = v23
	call fn0800_AEC2 (retsize: 2;)
	cx = Mem0[ss:sp:word16]
	sp = sp + 2
	cx = Mem0[ss:sp:word16]
	sp = sp + 2
	// succ:  l0800_A7D1
l0800_A7D1:
	cx = ax
	SCZO = cond(ax - 0xFFFF)
	branch Test(NE,Z) l0800_A798
	// succ:  l0800_A7D8 l0800_A798
l0800_A7D8:
	SCZO = cond(cx - 0xFFFF)
	branch Test(NE,Z) l0800_A7F3
	// succ:  l0800_A7DD l0800_A7F3
l0800_A7DD:
	ax = Mem0[ss:bp - 0x0002:word16]
	dx = Mem0[ss:bp - 0x0004:word16]
	SCZO = cond(ax - Mem0[ss:bp + 0x0006:word16])
	branch Test(NE,Z) l0800_A7F3
	// succ:  l0800_A7E8 l0800_A7F3
l0800_A7E8:
	SCZO = cond(dx - Mem0[ss:bp + 0x0004:word16])
	branch Test(NE,Z) l0800_A7F3
	// succ:  l0800_A7ED l0800_A7F3
l0800_A7ED:
	dx = dx ^ dx
	SZO = cond(dx)
	C = false
	ax = ax ^ ax
	SZO = cond(ax)
	C = false
	goto l0800_A811
	// succ:  l0800_A811
l0800_A7F3:
	es_bx = Mem0[ss:bp - 0x0004:segptr32]
	Mem0[es:bx:byte] = 0x00
	es_bx = Mem0[ss:bp + 0x000A:segptr32]
	SZO = cond(Mem0[es:bx + 0x0002:word16] & 0x0010)
	C = false
	branch Test(EQ,Z) l0800_A80B
	// succ:  l0800_A805 l0800_A80B
l0800_A805:
	dx = dx ^ dx
	SZO = cond(dx)
	C = false
	ax = ax ^ ax
	SZO = cond(ax)
	C = false
	goto l0800_A811
	// succ:  l0800_A811
l0800_A80B:
	dx = Mem0[ss:bp + 0x0006:word16]
	ax = Mem0[ss:bp + 0x0004:word16]
	// succ:  l0800_A811
l0800_A811:
	di = Mem0[ss:sp:word16]
	sp = sp + 2
	si = Mem0[ss:sp:word16]
	sp = sp + 2
	sp = bp
	bp = Mem0[ss:sp:word16]
	sp = sp + 2
	return
	// succ:  fn0800_A77D_exit
fn0800_A77D_exit:


// fn0800_A817
// Return size: 2
define fn0800_A817
fn0800_A817_entry:
	// succ:  l0800_A817
l0800_A817:
	sp = fp
	Top = 0
	sp = sp - 2
	Mem0[ss:sp:word16] = bp
	bp = sp
	sp = sp - 2
	Mem0[ss:sp:word16] = ds
	ah = 0x2F
	es_bx = msdos_get_disk_transfer_area_address()
	sp = sp - 2
	Mem0[ss:sp:word16] = es
	sp = sp - 2
	Mem0[ss:sp:word16] = bx
	ah = 0x1A
	ds_dx = Mem0[ss:bp + 0x0008:segptr32]
	msdos_set_DTA(ds, dx)
	ah = 0x4E
	cx = Mem0[ss:bp + 0x000C:word16]
	ds_dx = Mem0[ss:bp + 0x0004:segptr32]
	C = msdos_find_first_file(cx, ds, dx)
	sp = sp - 2
	Mem0[ss:sp:word16] = SCZDOP
	cx = Mem0[ss:sp:word16]
	sp = sp + 2
	v15 = ax
	ax = bx
	bx = v15
	ah = 0x1A
	dx = Mem0[ss:sp:word16]
	sp = sp + 2
	ds = Mem0[ss:sp:selector]
	sp = sp + 2
	msdos_set_DTA(ds, dx)
	sp = sp - 2
	Mem0[ss:sp:word16] = cx
	SCZDOP = Mem0[ss:sp:word16]
	sp = sp + 2
	ds = Mem0[ss:sp:selector]
	sp = sp + 2
	branch Test(ULT,C) l0800_A844
	// succ:  l0800_A840 l0800_A844
l0800_A840:
	ax = ax ^ ax
	SZO = cond(ax)
	C = false
	goto l0800_A848
	// succ:  l0800_A848
l0800_A844:
	sp = sp - 2
	Mem0[ss:sp:word16] = bx
	call fn0800_8D2B (retsize: 2;)
	sp = sp + 0x0002
	// succ:  l0800_A848
l0800_A848:
	bp = Mem0[ss:sp:word16]
	sp = sp + 2
	return
	// succ:  fn0800_A817_exit
fn0800_A817_exit:


// fn0800_A84A
// Return size: 2
define fn0800_A84A
fn0800_A84A_entry:
	// succ:  l0800_A84A
l0800_A84A:
	sp = fp
	Top = 0
	sp = sp - 2
	Mem0[ss:sp:word16] = bp
	bp = sp
	sp = sp - 2
	Mem0[ss:sp:word16] = ds
	ah = 0x2F
	es_bx = msdos_get_disk_transfer_area_address()
	sp = sp - 2
	Mem0[ss:sp:word16] = es
	sp = sp - 2
	Mem0[ss:sp:word16] = bx
	ah = 0x1A
	ds_dx = Mem0[ss:bp + 0x0004:segptr32]
	msdos_set_DTA(ds, dx)
	ah = 0x4F
	C = msdos_find_next_file()
	sp = sp - 2
	Mem0[ss:sp:word16] = SCZDOP
	cx = Mem0[ss:sp:word16]
	sp = sp + 2
	v15 = ax
	ax = bx
	bx = v15
	ah = 0x1A
	dx = Mem0[ss:sp:word16]
	sp = sp + 2
	ds = Mem0[ss:sp:selector]
	sp = sp + 2
	msdos_set_DTA(ds, dx)
	sp = sp - 2
	Mem0[ss:sp:word16] = cx
	SCZDOP = Mem0[ss:sp:word16]
	sp = sp + 2
	ds = Mem0[ss:sp:selector]
	sp = sp + 2
	branch Test(ULT,C) l0800_A871
	// succ:  l0800_A86D l0800_A871
l0800_A86D:
	ax = ax ^ ax
	SZO = cond(ax)
	C = false
	goto l0800_A875
	// succ:  l0800_A875
l0800_A871:
	sp = sp - 2
	Mem0[ss:sp:word16] = bx
	call fn0800_8D2B (retsize: 2;)
	sp = sp + 0x0002
	// succ:  l0800_A875
l0800_A875:
	bp = Mem0[ss:sp:word16]
	sp = sp + 2
	return
	// succ:  fn0800_A84A_exit
fn0800_A84A_exit:


// fn0800_A877
// Return size: 2
define fn0800_A877
fn0800_A877_entry:
	// succ:  l0800_A877
l0800_A877:
	sp = fp
	Top = 0
	sp = sp - 2
	Mem0[ss:sp:word16] = bp
	bp = sp
	sp = sp - 0x0004
	SCZO = cond(sp)
	sp = sp - 2
	Mem0[ss:sp:word16] = si
	sp = sp - 2
	Mem0[ss:sp:word16] = di
	di = di ^ di
	SZO = cond(di)
	C = false
	si = Mem0[ds:0x24E8:word16]
	Mem0[ss:bp - 0x0002:word16] = ds
	Mem0[ss:bp - 0x0004:word16] = 0x2358
	goto l0800_A8A8
	// succ:  l0800_A8A8
l0800_A88F:
	es_bx = Mem0[ss:bp - 0x0004:segptr32]
	SZO = cond(Mem0[es:bx + 0x0002:word16] & 0x0003)
	C = false
	branch Test(EQ,Z) l0800_A8A4
	// succ:  l0800_A89A l0800_A8A4
l0800_A89A:
	v16 = Mem0[ss:bp - 0x0002:word16]
	sp = sp - 2
	Mem0[ss:sp:word16] = v16
	sp = sp - 2
	Mem0[ss:sp:word16] = bx
	call fn0800_A6B7 (retsize: 2;)
	cx = Mem0[ss:sp:word16]
	sp = sp + 2
	cx = Mem0[ss:sp:word16]
	sp = sp + 2
	di = di + 0x0001
	SZO = cond(di)
	// succ:  l0800_A8A4
l0800_A8A4:
	v18 = Mem0[ss:bp - 0x0004:word16] + 0x0014
	Mem0[ss:bp - 0x0004:word16] = v18
	SCZO = cond(v18)
	// succ:  l0800_A8A8
l0800_A8A8:
	ax = si
	si = si - 0x0001
	SZO = cond(si)
	ax = ax | ax
	SZO = cond(ax)
	C = false
	branch Test(NE,Z) l0800_A88F
	// succ:  l0800_A8AF l0800_A88F
l0800_A8AF:
	ax = di
	di = Mem0[ss:sp:word16]
	sp = sp + 2
	si = Mem0[ss:sp:word16]
	sp = sp + 2
	sp = bp
	bp = Mem0[ss:sp:word16]
	sp = sp + 2
	return
	// succ:  fn0800_A877_exit
fn0800_A877_exit:


// fn0800_A8B7
// Return size: 2
define fn0800_A8B7
fn0800_A8B7_entry:
	// succ:  l0800_A8B7
l0800_A8B7:
	sp = fp
	Top = 0
	sp = sp - 2
	Mem0[ss:sp:word16] = bp
	bp = sp
	sp = sp - 2
	Mem0[ss:sp:word16] = si
	sp = sp - 2
	Mem0[ss:sp:word16] = di
	di = di ^ di
	SZO = cond(di)
	C = false
	es_bx = Mem0[ss:bp + 0x000C:segptr32]
	v10 = Mem0[ss:bp + 0x000C:word16] + 0x0001
	Mem0[ss:bp + 0x000C:word16] = v10
	SZO = cond(v10)
	cl = Mem0[es:bx:byte]
	al = cl
	SCZO = cond(al - 0x72)
	branch Test(NE,Z) l0800_A8D5
	// succ:  l0800_A8CD l0800_A8D5
l0800_A8CD:
	dx = 0x0001
	si = 0x0001
	goto l0800_A8F3
	// succ:  l0800_A8F3
l0800_A8D5:
	SCZO = cond(cl - 0x77)
	branch Test(NE,Z) l0800_A8DF
	// succ:  l0800_A8DA l0800_A8DF
l0800_A8DA:
	dx = 0x0302
	goto l0800_A8E7
	// succ:  l0800_A8E7
l0800_A8DF:
	SCZO = cond(cl - 0x61)
	branch Test(NE,Z) l0800_A8EF
	// succ:  l0800_A8E4 l0800_A8EF
l0800_A8E4:
	dx = 0x0902
	// succ:  l0800_A8E7
l0800_A8E7:
	di = 0x0080
	si = 0x0002
	goto l0800_A8F3
	// succ:  l0800_A8F3
l0800_A8EF:
	ax = ax ^ ax
	SZO = cond(ax)
	C = false
	goto l0800_A967
	// succ:  l0800_A967
l0800_A8F3:
	es_bx = Mem0[ss:bp + 0x000C:segptr32]
	cl = Mem0[es:bx:byte]
	v18 = Mem0[ss:bp + 0x000C:word16] + 0x0001
	Mem0[ss:bp + 0x000C:word16] = v18
	SZO = cond(v18)
	SCZO = cond(cl - 0x2B)
	branch Test(EQ,Z) l0800_A914
	// succ:  l0800_A901 l0800_A914
l0800_A901:
	es_bx = Mem0[ss:bp + 0x000C:segptr32]
	SCZO = cond(Mem0[es:bx:byte] - 0x2B)
	branch Test(NE,Z) l0800_A92B
	// succ:  l0800_A90A l0800_A92B
l0800_A90A:
	SCZO = cond(cl - 0x74)
	branch Test(EQ,Z) l0800_A914
	// succ:  l0800_A90F l0800_A914
l0800_A90F:
	SCZO = cond(cl - 0x62)
	branch Test(NE,Z) l0800_A92B
	// succ:  l0800_A914 l0800_A92B
l0800_A914:
	SCZO = cond(cl - 0x2B)
	branch Test(NE,Z) l0800_A91F
	// succ:  l0800_A919 l0800_A91F
l0800_A919:
	es_bx = Mem0[ss:bp + 0x000C:segptr32]
	cl = Mem0[es:bx:byte]
	// succ:  l0800_A91F
l0800_A91F:
	dx = dx & 0xFFFC
	SZO = cond(dx)
	C = false
	dx = dx | 0x0004
	SZO = cond(dx)
	C = false
	di = 0x0180
	si = 0x0003
	// succ:  l0800_A92B
l0800_A92B:
	SCZO = cond(cl - 0x74)
	branch Test(NE,Z) l0800_A936
	// succ:  l0800_A930 l0800_A936
l0800_A930:
	dx = dx | 0x4000
	SZO = cond(dx)
	C = false
	goto l0800_A953
	// succ:  l0800_A953
l0800_A936:
	SCZO = cond(cl - 0x62)
	branch Test(NE,Z) l0800_A941
	// succ:  l0800_A93B l0800_A941
l0800_A93B:
	dx = dx | 0x8000
	SZO = cond(dx)
	C = false
	goto l0800_A950
	// succ:  l0800_A950
l0800_A941:
	ax = Mem0[ds:0x2512:word16]
	ax = ax & 0xC000
	SZO = cond(ax)
	C = false
	dx = dx | ax
	SZO = cond(dx)
	C = false
	ax = dx
	SZO = cond(ax & 0x8000)
	C = false
	branch Test(EQ,Z) l0800_A953
	// succ:  l0800_A950 l0800_A953
l0800_A950:
	si = si | 0x0040
	SZO = cond(si)
	C = false
	// succ:  l0800_A953
l0800_A953:
	Mem0[ds:0x2354:word16] = 0xC7B5
	es_bx = Mem0[ss:bp + 0x0008:segptr32]
	Mem0[es:bx:word16] = dx
	es_bx = Mem0[ss:bp + 0x0004:segptr32]
	Mem0[es:bx:word16] = di
	ax = si
	// succ:  l0800_A967
l0800_A967:
	di = Mem0[ss:sp:word16]
	sp = sp + 2
	si = Mem0[ss:sp:word16]
	sp = sp + 2
	bp = Mem0[ss:sp:word16]
	sp = sp + 2
	return
	// succ:  fn0800_A8B7_exit
fn0800_A8B7_exit:


// fn0800_A96D
// Return size: 2
define fn0800_A96D
fn0800_A96D_entry:
	// succ:  l0800_A96D
l0800_A96D:
	sp = fp
	Top = 0
	sp = sp - 2
	Mem0[ss:sp:word16] = bp
	bp = sp
	sp = sp - 0x0004
	SCZO = cond(sp)
	v6 = Mem0[ss:bp + 0x0008:word16]
	sp = sp - 2
	Mem0[ss:sp:word16] = v6
	v7 = Mem0[ss:bp + 0x0006:word16]
	sp = sp - 2
	Mem0[ss:sp:word16] = v7
	sp = sp - 2
	Mem0[ss:sp:word16] = ss
	ax = bp - 0x0002
	sp = sp - 2
	Mem0[ss:sp:word16] = ax
	sp = sp - 2
	Mem0[ss:sp:word16] = ss
	ax = bp - 0x0004
	sp = sp - 2
	Mem0[ss:sp:word16] = ax
	call fn0800_A8B7 (retsize: 2;)
	sp = sp + 0x000C
	es_bx = Mem0[ss:bp + 0x000E:segptr32]
	Mem0[es:bx + 0x0002:word16] = ax
	ax = ax | ax
	SZO = cond(ax)
	C = false
	branch Test(EQ,Z) l0800_A9B9
	// succ:  l0800_A991 l0800_A9B9
l0800_A991:
	SCZO = cond(Mem0[es:bx + 0x0004:byte] - 0x00)
	branch Test(GE,SO) l0800_A9CD
	// succ:  l0800_A998 l0800_A9CD
l0800_A998:
	v16 = Mem0[ss:bp - 0x0004:word16]
	sp = sp - 2
	Mem0[ss:sp:word16] = v16
	ax = Mem0[ss:bp - 0x0002:word16]
	ax = ax | Mem0[ss:bp + 0x0004:word16]
	SZO = cond(ax)
	C = false
	sp = sp - 2
	Mem0[ss:sp:word16] = ax
	v17 = Mem0[ss:bp + 0x000C:word16]
	sp = sp - 2
	Mem0[ss:sp:word16] = v17
	v18 = Mem0[ss:bp + 0x000A:word16]
	sp = sp - 2
	Mem0[ss:sp:word16] = v18
	call fn0800_B140 (retsize: 2;)
	sp = sp + 0x0008
	SCZO = cond(sp)
	es_bx = Mem0[ss:bp + 0x000E:segptr32]
	Mem0[es:bx + 0x0004:byte] = al
	al = al | al
	SZO = cond(al)
	C = false
	branch Test(GE,SO) l0800_A9CD
	// succ:  l0800_A9B9 l0800_A9CD
l0800_A9B9:
	es_bx = Mem0[ss:bp + 0x000E:segptr32]
	Mem0[es:bx + 0x0004:byte] = 0xFF
	Mem0[es:bx + 0x0002:word16] = 0x0000
	// succ:  l0800_A9C7
l0800_A9C7:
	dx = dx ^ dx
	SZO = cond(dx)
	C = false
	ax = ax ^ ax
	SZO = cond(ax)
	C = false
	goto l0800_AA2E
	// succ:  l0800_AA2E
l0800_A9CD:
	es_bx = Mem0[ss:bp + 0x000E:segptr32]
	al = Mem0[es:bx + 0x0004:byte]
	ax = (int16) al
	sp = sp - 2
	Mem0[ss:sp:word16] = ax
	call fn0800_8D76 (retsize: 2;)
	cx = Mem0[ss:sp:word16]
	sp = sp + 2
	ax = ax | ax
	SZO = cond(ax)
	C = false
	branch Test(EQ,Z) l0800_A9E7
	// succ:  l0800_A9DE l0800_A9E7
l0800_A9DE:
	es_bx = Mem0[ss:bp + 0x000E:segptr32]
	v22 = Mem0[es:bx + 0x0002:word16] | 0x0200
	Mem0[es:bx + 0x0002:word16] = v22
	SZO = cond(Mem0[es:bx + 0x0002:word16])
	C = false
	// succ:  l0800_A9E7
l0800_A9E7:
	ax = 0x0200
	sp = sp - 2
	Mem0[ss:sp:word16] = ax
	es_bx = Mem0[ss:bp + 0x000E:segptr32]
	SZO = cond(Mem0[es:bx + 0x0002:word16] & 0x0200)
	C = false
	branch Test(EQ,Z) l0800_A9FB
	// succ:  l0800_A9F6 l0800_A9FB
l0800_A9F6:
	ax = 0x0001
	goto l0800_A9FD
	// succ:  l0800_A9FD
l0800_A9FB:
	ax = ax ^ ax
	SZO = cond(ax)
	C = false
	// succ:  l0800_A9FD
l0800_A9FD:
	sp = sp - 2
	Mem0[ss:sp:word16] = ax
	ax = ax ^ ax
	SZO = cond(ax)
	C = false
	sp = sp - 2
	Mem0[ss:sp:word16] = ax
	sp = sp - 2
	Mem0[ss:sp:word16] = ax
	v23 = Mem0[ss:bp + 0x0010:word16]
	sp = sp - 2
	Mem0[ss:sp:word16] = v23
	v24 = Mem0[ss:bp + 0x000E:word16]
	sp = sp - 2
	Mem0[ss:sp:word16] = v24
	call fn0800_BA89 (retsize: 2;)
	sp = sp + 0x000C
	SCZO = cond(sp)
	ax = ax | ax
	SZO = cond(ax)
	C = false
	branch Test(EQ,Z) l0800_AA1F
	// succ:  l0800_AA12 l0800_AA1F
l0800_AA12:
	v25 = Mem0[ss:bp + 0x0010:word16]
	sp = sp - 2
	Mem0[ss:sp:word16] = v25
	v26 = Mem0[ss:bp + 0x000E:word16]
	sp = sp - 2
	Mem0[ss:sp:word16] = v26
	call fn0800_A614 (retsize: 2;)
	cx = Mem0[ss:sp:word16]
	sp = sp + 2
	cx = Mem0[ss:sp:word16]
	sp = sp + 2
	goto l0800_A9C7
	// succ:  l0800_A9C7
l0800_AA1F:
	es_bx = Mem0[ss:bp + 0x000E:segptr32]
	Mem0[es:bx + 0x0010:word16] = 0x0000
	dx = Mem0[ss:bp + 0x0010:word16]
	ax = Mem0[ss:bp + 0x000E:word16]
	// succ:  l0800_AA2E
l0800_AA2E:
	sp = bp
	bp = Mem0[ss:sp:word16]
	sp = sp + 2
	return
	// succ:  fn0800_A96D_exit
fn0800_A96D_exit:


// fn0800_AA34
// Return size: 2
define fn0800_AA34
fn0800_AA34_entry:
	// succ:  l0800_AA34
l0800_AA34:
	sp = fp
	Top = 0
	sp = sp - 2
	Mem0[ss:sp:word16] = bp
	bp = sp
	sp = sp - 0x0004
	SCZO = cond(sp)
	Mem0[ss:bp - 0x0002:word16] = ds
	Mem0[ss:bp - 0x0004:word16] = 0x2358
	// succ:  l0800_AA42
l0800_AA42:
	es_bx = Mem0[ss:bp - 0x0004:segptr32]
	SCZO = cond(Mem0[es:bx + 0x0004:byte] - 0x00)
	branch Test(LT,SO) l0800_AA64
	// succ:  l0800_AA4C l0800_AA64
l0800_AA4C:
	ax = Mem0[ss:bp - 0x0004:word16]
	v12 = Mem0[ss:bp - 0x0004:word16] + 0x0014
	Mem0[ss:bp - 0x0004:word16] = v12
	SCZO = cond(v12)
	sp = sp - 2
	Mem0[ss:sp:word16] = ax
	ax = Mem0[ds:0x24E8:word16]
	dx = 0x0014
	dx_ax = dx *s ax
	SCZO = cond(dx_ax)
	ax = ax + 0x2358
	SCZO = cond(ax)
	dx = Mem0[ss:sp:word16]
	sp = sp + 2
	SCZO = cond(dx - ax)
	branch Test(ULT,C) l0800_AA42
	// succ:  l0800_AA64 l0800_AA42
l0800_AA64:
	es_bx = Mem0[ss:bp - 0x0004:segptr32]
	SCZO = cond(Mem0[es:bx + 0x0004:byte] - 0x00)
	branch Test(LT,SO) l0800_AA74
	// succ:  l0800_AA6E l0800_AA74
l0800_AA6E:
	dx = dx ^ dx
	SZO = cond(dx)
	C = false
	ax = ax ^ ax
	SZO = cond(ax)
	C = false
	goto l0800_AA7A
	// succ:  l0800_AA7A
l0800_AA74:
	dx = Mem0[ss:bp - 0x0002:word16]
	ax = Mem0[ss:bp - 0x0004:word16]
	// succ:  l0800_AA7A
l0800_AA7A:
	sp = bp
	bp = Mem0[ss:sp:word16]
	sp = sp + 2
	return
	// succ:  fn0800_AA34_exit
fn0800_AA34_exit:


// fn0800_AA7E
// Return size: 2
define fn0800_AA7E
fn0800_AA7E_entry:
	// succ:  l0800_AA7E
l0800_AA7E:
	sp = fp
	Top = 0
	sp = sp - 2
	Mem0[ss:sp:word16] = bp
	bp = sp
	sp = sp - 0x0004
	SCZO = cond(sp)
	call fn0800_AA34 (retsize: 2;)
	Mem0[ss:bp - 0x0002:word16] = dx
	Mem0[ss:bp - 0x0004:word16] = ax
	ax = ax | dx
	SZO = cond(ax)
	C = false
	branch Test(NE,Z) l0800_AA97
	// succ:  l0800_AA91 l0800_AA97
l0800_AA91:
	dx = dx ^ dx
	SZO = cond(dx)
	C = false
	ax = ax ^ ax
	SZO = cond(ax)
	C = false
	goto l0800_AAAF
	// succ:  l0800_AAAF
l0800_AA97:
	v11 = Mem0[ss:bp - 0x0002:word16]
	sp = sp - 2
	Mem0[ss:sp:word16] = v11
	v12 = Mem0[ss:bp - 0x0004:word16]
	sp = sp - 2
	Mem0[ss:sp:word16] = v12
	v13 = Mem0[ss:bp + 0x0006:word16]
	sp = sp - 2
	Mem0[ss:sp:word16] = v13
	v14 = Mem0[ss:bp + 0x0004:word16]
	sp = sp - 2
	Mem0[ss:sp:word16] = v14
	v15 = Mem0[ss:bp + 0x000A:word16]
	sp = sp - 2
	Mem0[ss:sp:word16] = v15
	v16 = Mem0[ss:bp + 0x0008:word16]
	sp = sp - 2
	Mem0[ss:sp:word16] = v16
	ax = ax ^ ax
	SZO = cond(ax)
	C = false
	sp = sp - 2
	Mem0[ss:sp:word16] = ax
	call fn0800_A96D (retsize: 2;)
	sp = sp + 0x000E
	// succ:  l0800_AAAF
l0800_AAAF:
	sp = bp
	bp = Mem0[ss:sp:word16]
	sp = sp + 2
	return
	// succ:  fn0800_AA7E_exit
fn0800_AA7E_exit:


// fn0800_AAB3
// Return size: 2
define fn0800_AAB3
fn0800_AAB3_entry:
	// succ:  l0800_AAB3
l0800_AAB3:
	sp = fp
	Top = 0
	sp = sp - 2
	Mem0[ss:sp:word16] = bp
	bp = sp
	sp = sp - 2
	Mem0[ss:sp:word16] = si
	sp = sp - 2
	Mem0[ss:sp:word16] = di
	goto l0800_AB91
	// succ:  l0800_AB91
l0800_AABB:
	v10 = Mem0[ss:bp + 0x0008:word16] + 0x0001
	Mem0[ss:bp + 0x0008:word16] = v10
	SZO = cond(v10)
	es_bx = Mem0[ss:bp + 0x0004:segptr32]
	ax = Mem0[es:bx + 0x0006:word16]
	SCZO = cond(ax - Mem0[ss:bp + 0x0008:word16])
	branch Test(ULE,CZ) l0800_AACF
	// succ:  l0800_AACA l0800_AACF
l0800_AACA:
	ax = Mem0[ss:bp + 0x0008:word16]
	goto l0800_AAD6
	// succ:  l0800_AAD6
l0800_AACF:
	es_bx = Mem0[ss:bp + 0x0004:segptr32]
	ax = Mem0[es:bx + 0x0006:word16]
	// succ:  l0800_AAD6
l0800_AAD6:
	di = ax
	es_bx = Mem0[ss:bp + 0x0004:segptr32]
	SZO = cond(Mem0[es:bx + 0x0002:word16] & 0x0040)
	C = false
	branch Test(EQ,Z) l0800_AB50
	// succ:  l0800_AAE3 l0800_AB50
l0800_AAE3:
	SCZO = cond(Mem0[es:bx + 0x0006:word16] - 0x0000)
	branch Test(EQ,Z) l0800_AB50
	// succ:  l0800_AAEA l0800_AB50
l0800_AAEA:
	ax = Mem0[es:bx + 0x0006:word16]
	SCZO = cond(ax - Mem0[ss:bp + 0x0008:word16])
	branch Test(UGE,C) l0800_AB50
	// succ:  l0800_AAF3 l0800_AB50
l0800_AAF3:
	SCZO = cond(Mem0[es:bx:word16] - 0x0000)
	branch Test(NE,Z) l0800_AB50
	// succ:  l0800_AAF9 l0800_AB50
l0800_AAF9:
	v17 = Mem0[ss:bp + 0x0008:word16] - 0x0001
	Mem0[ss:bp + 0x0008:word16] = v17
	SZO = cond(v17)
	di = di ^ di
	SZO = cond(di)
	C = false
	goto l0800_AB0E
	// succ:  l0800_AB0E
l0800_AB00:
	es_bx = Mem0[ss:bp + 0x0004:segptr32]
	di = di + Mem0[es:bx + 0x0006:word16]
	SCZO = cond(di)
	ax = Mem0[es:bx + 0x0006:word16]
	v35 = Mem0[ss:bp + 0x0008:word16] - ax
	Mem0[ss:bp + 0x0008:word16] = v35
	SCZO = cond(v35)
	// succ:  l0800_AB0E
l0800_AB0E:
	es_bx = Mem0[ss:bp + 0x0004:segptr32]
	ax = Mem0[es:bx + 0x0006:word16]
	SCZO = cond(ax - Mem0[ss:bp + 0x0008:word16])
	branch Test(ULE,CZ) l0800_AB00
	// succ:  l0800_AB1A l0800_AB00
l0800_AB1A:
	sp = sp - 2
	Mem0[ss:sp:word16] = di
	v24 = Mem0[ss:bp + 0x000C:word16]
	sp = sp - 2
	Mem0[ss:sp:word16] = v24
	v25 = Mem0[ss:bp + 0x000A:word16]
	sp = sp - 2
	Mem0[ss:sp:word16] = v25
	al = Mem0[es:bx + 0x0004:byte]
	ax = (int16) al
	sp = sp - 2
	Mem0[ss:sp:word16] = ax
	call fn0800_8F50 (retsize: 2;)
	sp = sp + 0x0008
	SCZO = cond(sp)
	dx = ax
	v27 = Mem0[ss:bp + 0x000A:word16] + dx
	Mem0[ss:bp + 0x000A:word16] = v27
	SCZO = cond(v27)
	SCZO = cond(dx - di)
	branch Test(EQ,Z) l0800_AB91
	// succ:  l0800_AB36 l0800_AB91
l0800_AB36:
	ax = di
	ax = ax - dx
	SCZO = cond(ax)
	v28 = Mem0[ss:bp + 0x0008:word16] + ax
	Mem0[ss:bp + 0x0008:word16] = v28
	SCZO = cond(v28)
	// succ:  l0800_AB3D
l0800_AB3D:
	es_bx = Mem0[ss:bp + 0x0004:segptr32]
	v29 = Mem0[es:bx + 0x0002:word16] | 0x0020
	Mem0[es:bx + 0x0002:word16] = v29
	SZO = cond(Mem0[es:bx + 0x0002:word16])
	C = false
	goto l0800_AB9A
	// succ:  l0800_AB9A
l0800_AB47:
	es_bx = Mem0[ss:bp + 0x000A:segptr32]
	Mem0[es:bx:byte] = dl
	v34 = Mem0[ss:bp + 0x000A:word16] + 0x0001
	Mem0[ss:bp + 0x000A:word16] = v34
	SZO = cond(v34)
	// succ:  l0800_AB50
l0800_AB50:
	v18 = Mem0[ss:bp + 0x0008:word16] - 0x0001
	Mem0[ss:bp + 0x0008:word16] = v18
	SZO = cond(v18)
	ax = Mem0[ss:bp + 0x0008:word16]
	ax = ax | ax
	SZO = cond(ax)
	C = false
	branch Test(EQ,Z) l0800_AB8C
	// succ:  l0800_AB5A l0800_AB8C
l0800_AB5A:
	di = di - 0x0001
	SZO = cond(di)
	branch Test(EQ,Z) l0800_AB8C
	// succ:  l0800_AB5D l0800_AB8C
l0800_AB5D:
	es_bx = Mem0[ss:bp + 0x0004:segptr32]
	v19 = Mem0[es:bx:word16] - 0x0001
	Mem0[es:bx:word16] = v19
	SZO = cond(v19)
	branch Test(LT,SO) l0800_AB7A
	// succ:  l0800_AB65 l0800_AB7A
l0800_AB65:
	ax = Mem0[es:bx + 0x000E:word16]
	si = Mem0[es:bx + 0x000C:word16]
	v21 = Mem0[es:bx + 0x000C:word16] + 0x0001
	Mem0[es:bx + 0x000C:word16] = v21
	SZO = cond(v21)
	es = ax
	al = Mem0[es:si:byte]
	ah = 0x00
	goto l0800_AB85
	// succ:  l0800_AB85
l0800_AB7A:
	v30 = Mem0[ss:bp + 0x0006:word16]
	sp = sp - 2
	Mem0[ss:sp:word16] = v30
	v31 = Mem0[ss:bp + 0x0004:word16]
	sp = sp - 2
	Mem0[ss:sp:word16] = v31
	call fn0800_AEC2 (retsize: 2;)
	cx = Mem0[ss:sp:word16]
	sp = sp + 2
	cx = Mem0[ss:sp:word16]
	sp = sp + 2
	// succ:  l0800_AB85
l0800_AB85:
	dx = ax
	SCZO = cond(ax - 0xFFFF)
	branch Test(NE,Z) l0800_AB47
	// succ:  l0800_AB8C l0800_AB47
l0800_AB8C:
	SCZO = cond(dx - 0xFFFF)
	branch Test(EQ,Z) l0800_AB3D
	// succ:  l0800_AB91 l0800_AB3D
l0800_AB91:
	SCZO = cond(Mem0[ss:bp + 0x0008:word16] - 0x0000)
	branch Test(EQ,Z) l0800_AB9A
	// succ:  l0800_AB97 l0800_AB9A
l0800_AB97:
	goto l0800_AABB
	// succ:  l0800_AABB
l0800_AB9A:
	ax = Mem0[ss:bp + 0x0008:word16]
	di = Mem0[ss:sp:word16]
	sp = sp + 2
	si = Mem0[ss:sp:word16]
	sp = sp + 2
	bp = Mem0[ss:sp:word16]
	sp = sp + 2
	return
	// succ:  fn0800_AAB3_exit
fn0800_AAB3_exit:


// fn0800_ABA3
// Return size: 2
define fn0800_ABA3
fn0800_ABA3_entry:
	// succ:  l0800_ABA3
l0800_ABA3:
	sp = fp
	Top = 0
	sp = sp - 2
	Mem0[ss:sp:word16] = bp
	bp = sp
	sp = sp - 0x0004
	SCZO = cond(sp)
	sp = sp - 2
	Mem0[ss:sp:word16] = si
	sp = sp - 2
	Mem0[ss:sp:word16] = di
	di = Mem0[ss:bp + 0x0008:word16]
	di = di | di
	SZO = cond(di)
	C = false
	branch Test(NE,Z) l0800_ABB6
	// succ:  l0800_ABB2 l0800_ABB6
l0800_ABB2:
	ax = ax ^ ax
	SZO = cond(ax)
	C = false
	goto l0800_AC2B
	// succ:  l0800_AC2B
l0800_ABB6:
	bx = di
	cx = cx ^ cx
	SZO = cond(cx)
	C = false
	ax = Mem0[ss:bp + 0x000A:word16]
	dx = dx ^ dx
	SZO = cond(dx)
	C = false
	call fn0800_8F18 (retsize: 2;)
	Mem0[ss:bp - 0x0002:word16] = dx
	Mem0[ss:bp - 0x0004:word16] = ax
	SCZO = cond(dx - 0x0001)
	branch Test(UGT,CZ) l0800_ABF2
	// succ:  l0800_ABCD l0800_ABF2
l0800_ABCD:
	branch Test(ULT,C) l0800_ABD3
	// succ:  l0800_ABCF l0800_ABD3
l0800_ABCF:
	ax = ax | ax
	SZO = cond(ax)
	C = false
	branch Test(UGE,C) l0800_ABF2
	// succ:  l0800_ABD3 l0800_ABF2
l0800_ABD3:
	v16 = Mem0[ss:bp + 0x0006:word16]
	sp = sp - 2
	Mem0[ss:sp:word16] = v16
	v17 = Mem0[ss:bp + 0x0004:word16]
	sp = sp - 2
	Mem0[ss:sp:word16] = v17
	v18 = Mem0[ss:bp - 0x0004:word16]
	sp = sp - 2
	Mem0[ss:sp:word16] = v18
	v19 = Mem0[ss:bp + 0x000E:word16]
	sp = sp - 2
	Mem0[ss:sp:word16] = v19
	v20 = Mem0[ss:bp + 0x000C:word16]
	sp = sp - 2
	Mem0[ss:sp:word16] = v20
	call fn0800_AAB3 (retsize: 2;)
	sp = sp + 0x000A
	dx = Mem0[ss:bp - 0x0004:word16]
	dx = dx - ax
	SCZO = cond(dx)
	sp = sp - 2
	Mem0[ss:sp:word16] = dx
	dx = dx ^ dx
	SZO = cond(dx)
	C = false
	ax = Mem0[ss:sp:word16]
	sp = sp + 2
	v22 = dx_ax
	dx = (uint16) (v22 % di)
	ax = (uint16) (v22 /u di)
	SCZO = cond(ax)
	goto l0800_AC2B
	// succ:  l0800_AC2B
l0800_ABF2:
	si = Mem0[ss:bp + 0x000A:word16]
	si = si + 0x0001
	SZO = cond(si)
	goto l0800_AC0B
	// succ:  l0800_AC0B
l0800_ABF8:
	bx = di
	cx = cx ^ cx
	SZO = cond(cx)
	C = false
	dx = Mem0[ss:bp + 0x0006:word16]
	ax = Mem0[ss:bp + 0x0004:word16]
	call fn0800_8CCB (retsize: 2;)
	Mem0[ss:bp + 0x0006:word16] = dx
	Mem0[ss:bp + 0x0004:word16] = ax
	// succ:  l0800_AC0B
l0800_AC0B:
	si = si - 0x0001
	SZO = cond(si)
	ax = si
	ax = ax | ax
	SZO = cond(ax)
	C = false
	branch Test(EQ,Z) l0800_AC26
	// succ:  l0800_AC12 l0800_AC26
l0800_AC12:
	v23 = Mem0[ss:bp + 0x0006:word16]
	sp = sp - 2
	Mem0[ss:sp:word16] = v23
	v24 = Mem0[ss:bp + 0x0004:word16]
	sp = sp - 2
	Mem0[ss:sp:word16] = v24
	sp = sp - 2
	Mem0[ss:sp:word16] = di
	v25 = Mem0[ss:bp + 0x000E:word16]
	sp = sp - 2
	Mem0[ss:sp:word16] = v25
	v26 = Mem0[ss:bp + 0x000C:word16]
	sp = sp - 2
	Mem0[ss:sp:word16] = v26
	call fn0800_AAB3 (retsize: 2;)
	sp = sp + 0x000A
	ax = ax | ax
	SZO = cond(ax)
	C = false
	branch Test(EQ,Z) l0800_ABF8
	// succ:  l0800_AC26 l0800_ABF8
l0800_AC26:
	ax = Mem0[ss:bp + 0x000A:word16]
	ax = ax - si
	SCZO = cond(ax)
	// succ:  l0800_AC2B
l0800_AC2B:
	di = Mem0[ss:sp:word16]
	sp = sp + 2
	si = Mem0[ss:sp:word16]
	sp = sp + 2
	sp = bp
	bp = Mem0[ss:sp:word16]
	sp = sp + 2
	return
	// succ:  fn0800_ABA3_exit
fn0800_ABA3_exit:


// fn0800_AC31
// Return size: 2
define fn0800_AC31
fn0800_AC31_entry:
	// succ:  l0800_AC31
l0800_AC31:
	sp = fp
	Top = 0
	sp = sp - 2
	Mem0[ss:sp:word16] = bp
	bp = sp
	sp = sp - 0x0004
	SCZO = cond(sp)
	sp = sp - 2
	Mem0[ss:sp:word16] = si
	es_bx = Mem0[ss:bp + 0x0004:segptr32]
	SCZO = cond(Mem0[es:bx:word16] - 0x0000)
	branch Test(GE,SO) l0800_AC4D
	// succ:  l0800_AC41 l0800_AC4D
l0800_AC41:
	cx = Mem0[es:bx + 0x0006:word16]
	cx = cx + Mem0[es:bx:word16]
	SCZO = cond(cx)
	cx = cx + 0x0001
	SZO = cond(cx)
	si = cx
	goto l0800_AC5C
	// succ:  l0800_AC5C
l0800_AC4D:
	es_bx = Mem0[ss:bp + 0x0004:segptr32]
	ax = Mem0[es:bx:word16]
	dx_ax = (int32) ax
	ax = ax ^ dx
	SZO = cond(ax)
	C = false
	ax = ax - dx
	SCZO = cond(ax)
	cx = ax
	si = ax
	// succ:  l0800_AC5C
l0800_AC5C:
	es_bx = Mem0[ss:bp + 0x0004:segptr32]
	SZO = cond(Mem0[es:bx + 0x0002:word16] & 0x0040)
	C = false
	branch Test(NE,Z) l0800_ACAA
	// succ:  l0800_AC67 l0800_ACAA
l0800_AC67:
	es_bx = Mem0[ss:bp + 0x0004:segptr32]
	ax = Mem0[es:bx + 0x000E:word16]
	dx = Mem0[es:bx + 0x000C:word16]
	Mem0[ss:bp - 0x0002:word16] = ax
	Mem0[ss:bp - 0x0004:word16] = dx
	SCZO = cond(Mem0[es:bx:word16] - 0x0000)
	branch Test(GE,SO) l0800_ACA3
	// succ:  l0800_AC7E l0800_ACA3
l0800_AC7E:
	goto l0800_AC8D
	// succ:  l0800_AC8D
l0800_AC80:
	v18 = Mem0[ss:bp - 0x0004:word16] - 0x0001
	Mem0[ss:bp - 0x0004:word16] = v18
	SZO = cond(v18)
	es_bx = Mem0[ss:bp - 0x0004:segptr32]
	SCZO = cond(Mem0[es:bx:byte] - 0x0A)
	branch Test(NE,Z) l0800_AC8D
	// succ:  l0800_AC8C l0800_AC8D
l0800_AC8C:
	si = si + 0x0001
	SZO = cond(si)
	// succ:  l0800_AC8D
l0800_AC8D:
	ax = cx
	cx = cx - 0x0001
	SZO = cond(cx)
	ax = ax | ax
	SZO = cond(ax)
	C = false
	branch Test(NE,Z) l0800_AC80
	// succ:  l0800_AC94 l0800_AC80
l0800_AC94:
	goto l0800_ACAA
	// succ:  l0800_ACAA
l0800_AC96:
	es_bx = Mem0[ss:bp - 0x0004:segptr32]
	v19 = Mem0[ss:bp - 0x0004:word16] + 0x0001
	Mem0[ss:bp - 0x0004:word16] = v19
	SZO = cond(v19)
	SCZO = cond(Mem0[es:bx:byte] - 0x0A)
	branch Test(NE,Z) l0800_ACA3
	// succ:  l0800_ACA2 l0800_ACA3
l0800_ACA2:
	si = si + 0x0001
	SZO = cond(si)
	// succ:  l0800_ACA3
l0800_ACA3:
	ax = cx
	cx = cx - 0x0001
	SZO = cond(cx)
	ax = ax | ax
	SZO = cond(ax)
	C = false
	branch Test(NE,Z) l0800_AC96
	// succ:  l0800_ACAA l0800_AC96
l0800_ACAA:
	ax = si
	si = Mem0[ss:sp:word16]
	sp = sp + 2
	sp = bp
	bp = Mem0[ss:sp:word16]
	sp = sp + 2
	return
	// succ:  fn0800_AC31_exit
fn0800_AC31_exit:


// fn0800_ACB3
// Return size: 2
define fn0800_ACB3
fn0800_ACB3_entry:
	// succ:  l0800_ACB3
l0800_ACB3:
	sp = fp
	Top = 0
	sp = sp - 2
	Mem0[ss:sp:word16] = bp
	bp = sp
	sp = sp - 2
	Mem0[ss:sp:word16] = si
	si = Mem0[ss:bp + 0x000C:word16]
	v6 = Mem0[ss:bp + 0x0006:word16]
	sp = sp - 2
	Mem0[ss:sp:word16] = v6
	v7 = Mem0[ss:bp + 0x0004:word16]
	sp = sp - 2
	Mem0[ss:sp:word16] = v7
	call fn0800_A6B7 (retsize: 2;)
	cx = Mem0[ss:sp:word16]
	sp = sp + 2
	cx = Mem0[ss:sp:word16]
	sp = sp + 2
	ax = ax | ax
	SZO = cond(ax)
	C = false
	branch Test(EQ,Z) l0800_ACCE
	// succ:  l0800_ACC9 l0800_ACCE
l0800_ACC9:
	ax = 0xFFFF
	goto l0800_AD2C
	// succ:  l0800_AD2C
l0800_ACCE:
	SCZO = cond(si - 0x0001)
	branch Test(NE,Z) l0800_ACEA
	// succ:  l0800_ACD3 l0800_ACEA
l0800_ACD3:
	es_bx = Mem0[ss:bp + 0x0004:segptr32]
	SCZO = cond(Mem0[es:bx:word16] - 0x0000)
	branch Test(LE,SZO) l0800_ACEA
	// succ:  l0800_ACDC l0800_ACEA
l0800_ACDC:
	v17 = Mem0[ss:bp + 0x0006:word16]
	sp = sp - 2
	Mem0[ss:sp:word16] = v17
	sp = sp - 2
	Mem0[ss:sp:word16] = bx
	call fn0800_AC31 (retsize: 2;)
	sp = sp + 0x0004
	dx_ax = (int32) ax
	v19 = Mem0[ss:bp + 0x0008:word16] - ax
	Mem0[ss:bp + 0x0008:word16] = v19
	SCZO = cond(v19)
	v21 = Mem0[ss:bp + 0x000A:word16] - dx - C
	Mem0[ss:bp + 0x000A:word16] = v21
	SCZO = cond(v21)
	// succ:  l0800_ACEA
l0800_ACEA:
	es_bx = Mem0[ss:bp + 0x0004:segptr32]
	v22 = Mem0[es:bx + 0x0002:word16] & 0xFE5F
	Mem0[es:bx + 0x0002:word16] = v22
	SZO = cond(Mem0[es:bx + 0x0002:word16])
	C = false
	Mem0[es:bx:word16] = 0x0000
	ax = Mem0[es:bx + 0x000A:word16]
	dx = Mem0[es:bx + 0x0008:word16]
	Mem0[es:bx + 0x000E:word16] = ax
	Mem0[es:bx + 0x000C:word16] = dx
	sp = sp - 2
	Mem0[ss:sp:word16] = si
	v23 = Mem0[ss:bp + 0x000A:word16]
	sp = sp - 2
	Mem0[ss:sp:word16] = v23
	v24 = Mem0[ss:bp + 0x0008:word16]
	sp = sp - 2
	Mem0[ss:sp:word16] = v24
	al = Mem0[es:bx + 0x0004:byte]
	ax = (int16) al
	sp = sp - 2
	Mem0[ss:sp:word16] = ax
	call fn0800_8E29 (retsize: 2;)
	sp = sp + 0x0008
	SCZO = cond(sp)
	SCZO = cond(dx - 0xFFFF)
	branch Test(NE,Z) l0800_AD2A
	// succ:  l0800_AD20 l0800_AD2A
l0800_AD20:
	SCZO = cond(ax - 0xFFFF)
	branch Test(NE,Z) l0800_AD2A
	// succ:  l0800_AD25 l0800_AD2A
l0800_AD25:
	ax = 0xFFFF
	goto l0800_AD2C
	// succ:  l0800_AD2C
l0800_AD2A:
	ax = ax ^ ax
	SZO = cond(ax)
	C = false
	// succ:  l0800_AD2C
l0800_AD2C:
	si = Mem0[ss:sp:word16]
	sp = sp + 2
	bp = Mem0[ss:sp:word16]
	sp = sp + 2
	return
	// succ:  fn0800_ACB3_exit
fn0800_ACB3_exit:


// fn0800_AD2F
// Return size: 2
define fn0800_AD2F
fn0800_AD2F_entry:
	// succ:  l0800_AD2F
l0800_AD2F:
	sp = fp
	Top = 0
	sp = sp - 2
	Mem0[ss:sp:word16] = bp
	bp = sp
	sp = sp - 0x0004
	SCZO = cond(sp)
	es_bx = Mem0[ss:bp + 0x0004:segptr32]
	al = Mem0[es:bx + 0x0004:byte]
	ax = (int16) al
	sp = sp - 2
	Mem0[ss:sp:word16] = ax
	call fn0800_97B6 (retsize: 2;)
	cx = Mem0[ss:sp:word16]
	sp = sp + 2
	Mem0[ss:bp - 0x0002:word16] = dx
	Mem0[ss:bp - 0x0004:word16] = ax
	SCZO = cond(dx - 0xFFFF)
	branch Test(NE,Z) l0800_AD52
	// succ:  l0800_AD4D l0800_AD52
l0800_AD4D:
	SCZO = cond(ax - 0xFFFF)
	branch Test(EQ,Z) l0800_AD7B
	// succ:  l0800_AD52 l0800_AD7B
l0800_AD52:
	es_bx = Mem0[ss:bp + 0x0004:segptr32]
	SCZO = cond(Mem0[es:bx:word16] - 0x0000)
	branch Test(GE,SO) l0800_AD6B
	// succ:  l0800_AD5B l0800_AD6B
l0800_AD5B:
	v15 = Mem0[ss:bp + 0x0006:word16]
	sp = sp - 2
	Mem0[ss:sp:word16] = v15
	sp = sp - 2
	Mem0[ss:sp:word16] = bx
	call fn0800_AC31 (retsize: 2;)
	sp = sp + 0x0004
	dx_ax = (int32) ax
	v17 = Mem0[ss:bp - 0x0004:word16] + ax
	Mem0[ss:bp - 0x0004:word16] = v17
	SCZO = cond(v17)
	v19 = Mem0[ss:bp - 0x0002:word16] + dx + C
	Mem0[ss:bp - 0x0002:word16] = v19
	SCZO = cond(v19)
	goto l0800_AD7B
	// succ:  l0800_AD7B
l0800_AD6B:
	v20 = Mem0[ss:bp + 0x0006:word16]
	sp = sp - 2
	Mem0[ss:sp:word16] = v20
	v21 = Mem0[ss:bp + 0x0004:word16]
	sp = sp - 2
	Mem0[ss:sp:word16] = v21
	call fn0800_AC31 (retsize: 2;)
	sp = sp + 0x0004
	dx_ax = (int32) ax
	v22 = Mem0[ss:bp - 0x0004:word16] - ax
	Mem0[ss:bp - 0x0004:word16] = v22
	SCZO = cond(v22)
	v23 = Mem0[ss:bp - 0x0002:word16] - dx - C
	Mem0[ss:bp - 0x0002:word16] = v23
	SCZO = cond(v23)
	// succ:  l0800_AD7B
l0800_AD7B:
	dx = Mem0[ss:bp - 0x0002:word16]
	ax = Mem0[ss:bp - 0x0004:word16]
	sp = bp
	bp = Mem0[ss:sp:word16]
	sp = sp + 2
	return
	// succ:  fn0800_AD2F_exit
fn0800_AD2F_exit:


// fn0800_AD85
// Return size: 2
define fn0800_AD85
fn0800_AD85_entry:
	// succ:  l0800_AD85
l0800_AD85:
	sp = fp
	Top = 0
	sp = sp - 2
	Mem0[ss:sp:word16] = bp
	bp = sp
	sp = sp - 0x0004
	SCZO = cond(sp)
	sp = sp - 2
	Mem0[ss:sp:word16] = si
	sp = sp - 2
	Mem0[ss:sp:word16] = di
	di = Mem0[ss:bp + 0x0008:word16]
	di = di | di
	SZO = cond(di)
	C = false
	branch Test(EQ,Z) l0800_AE07
	// succ:  l0800_AD94 l0800_AE07
l0800_AD94:
	bx = di
	cx = cx ^ cx
	SZO = cond(cx)
	C = false
	ax = Mem0[ss:bp + 0x000A:word16]
	dx = dx ^ dx
	SZO = cond(dx)
	C = false
	call fn0800_8F18 (retsize: 2;)
	Mem0[ss:bp - 0x0002:word16] = dx
	Mem0[ss:bp - 0x0004:word16] = ax
	SCZO = cond(dx - 0x0001)
	branch Test(UGT,CZ) l0800_ADC9
	// succ:  l0800_ADAB l0800_ADC9
l0800_ADAB:
	branch Test(ULT,C) l0800_ADB1
	// succ:  l0800_ADAD l0800_ADB1
l0800_ADAD:
	ax = ax | ax
	SZO = cond(ax)
	C = false
	branch Test(UGE,C) l0800_ADC9
	// succ:  l0800_ADB1 l0800_ADC9
l0800_ADB1:
	v16 = Mem0[ss:bp + 0x0006:word16]
	sp = sp - 2
	Mem0[ss:sp:word16] = v16
	v17 = Mem0[ss:bp + 0x0004:word16]
	sp = sp - 2
	Mem0[ss:sp:word16] = v17
	v18 = Mem0[ss:bp - 0x0004:word16]
	sp = sp - 2
	Mem0[ss:sp:word16] = v18
	v19 = Mem0[ss:bp + 0x000E:word16]
	sp = sp - 2
	Mem0[ss:sp:word16] = v19
	v20 = Mem0[ss:bp + 0x000C:word16]
	sp = sp - 2
	Mem0[ss:sp:word16] = v20
	call fn0800_B4BE (retsize: 2;)
	sp = sp + 0x000A
	dx = dx ^ dx
	SZO = cond(dx)
	C = false
	v22 = dx_ax
	dx = (uint16) (v22 % di)
	ax = (uint16) (v22 /u di)
	SCZO = cond(ax)
	goto l0800_AE0A
	// succ:  l0800_AE0A
l0800_ADC9:
	si = si ^ si
	SZO = cond(si)
	C = false
	SCZO = cond(si - Mem0[ss:bp + 0x000A:word16])
	branch Test(UGE,C) l0800_AE07
	// succ:  l0800_ADD0 l0800_AE07
l0800_ADD0:
	v23 = Mem0[ss:bp + 0x0006:word16]
	sp = sp - 2
	Mem0[ss:sp:word16] = v23
	v24 = Mem0[ss:bp + 0x0004:word16]
	sp = sp - 2
	Mem0[ss:sp:word16] = v24
	sp = sp - 2
	Mem0[ss:sp:word16] = di
	v25 = Mem0[ss:bp + 0x000E:word16]
	sp = sp - 2
	Mem0[ss:sp:word16] = v25
	v26 = Mem0[ss:bp + 0x000C:word16]
	sp = sp - 2
	Mem0[ss:sp:word16] = v26
	call fn0800_B4BE (retsize: 2;)
	sp = sp + 0x000A
	dx = dx ^ dx
	SZO = cond(dx)
	C = false
	dx = dx | dx
	SZO = cond(dx)
	C = false
	branch Test(NE,Z) l0800_ADEA
	// succ:  l0800_ADE6 l0800_ADEA
l0800_ADE6:
	SCZO = cond(ax - di)
	branch Test(EQ,Z) l0800_ADEE
	// succ:  l0800_ADEA l0800_ADEE
l0800_ADEA:
	ax = si
	goto l0800_AE0A
	// succ:  l0800_AE0A
l0800_ADEE:
	bx = di
	cx = cx ^ cx
	SZO = cond(cx)
	C = false
	dx = Mem0[ss:bp + 0x0006:word16]
	ax = Mem0[ss:bp + 0x0004:word16]
	call fn0800_8CCB (retsize: 2;)
	Mem0[ss:bp + 0x0006:word16] = dx
	Mem0[ss:bp + 0x0004:word16] = ax
	si = si + 0x0001
	SZO = cond(si)
	SCZO = cond(si - Mem0[ss:bp + 0x000A:word16])
	branch Test(ULT,C) l0800_ADD0
	// succ:  l0800_AE07 l0800_ADD0
l0800_AE07:
	ax = Mem0[ss:bp + 0x000A:word16]
	// succ:  l0800_AE0A
l0800_AE0A:
	di = Mem0[ss:sp:word16]
	sp = sp + 2
	si = Mem0[ss:sp:word16]
	sp = sp + 2
	sp = bp
	bp = Mem0[ss:sp:word16]
	sp = sp + 2
	return
	// succ:  fn0800_AD85_exit
fn0800_AD85_exit:


// fn0800_AE10
// Return size: 2
define fn0800_AE10
fn0800_AE10_entry:
	// succ:  l0800_AE10
l0800_AE10:
	sp = fp
	Top = 0
	sp = sp - 2
	Mem0[ss:sp:word16] = bp
	bp = sp
	sp = sp - 0x0004
	SCZO = cond(sp)
	sp = sp - 2
	Mem0[ss:sp:word16] = si
	si = 0x0014
	Mem0[ss:bp - 0x0002:word16] = ds
	Mem0[ss:bp - 0x0004:word16] = 0x2358
	goto l0800_AE40
	// succ:  l0800_AE40
l0800_AE24:
	es_bx = Mem0[ss:bp - 0x0004:segptr32]
	ax = Mem0[es:bx + 0x0002:word16]
	ax = ax & 0x0300
	SZO = cond(ax)
	C = false
	SCZO = cond(ax - 0x0300)
	branch Test(NE,Z) l0800_AE3C
	// succ:  l0800_AE33 l0800_AE3C
l0800_AE33:
	v15 = Mem0[ss:bp - 0x0002:word16]
	sp = sp - 2
	Mem0[ss:sp:word16] = v15
	sp = sp - 2
	Mem0[ss:sp:word16] = bx
	call fn0800_A6B7 (retsize: 2;)
	cx = Mem0[ss:sp:word16]
	sp = sp + 2
	cx = Mem0[ss:sp:word16]
	sp = sp + 2
	// succ:  l0800_AE3C
l0800_AE3C:
	v17 = Mem0[ss:bp - 0x0004:word16] + 0x0014
	Mem0[ss:bp - 0x0004:word16] = v17
	SCZO = cond(v17)
	// succ:  l0800_AE40
l0800_AE40:
	ax = si
	si = si - 0x0001
	SZO = cond(si)
	ax = ax | ax
	SZO = cond(ax)
	C = false
	branch Test(NE,Z) l0800_AE24
	// succ:  l0800_AE47 l0800_AE24
l0800_AE47:
	si = Mem0[ss:sp:word16]
	sp = sp + 2
	sp = bp
	bp = Mem0[ss:sp:word16]
	sp = sp + 2
	return
	// succ:  fn0800_AE10_exit
fn0800_AE10_exit:


// fn0800_AE4C
// Return size: 2
define fn0800_AE4C
fn0800_AE4C_entry:
	// succ:  l0800_AE4C
l0800_AE4C:
	sp = fp
	Top = 0
	sp = sp - 2
	Mem0[ss:sp:word16] = bp
	bp = sp
	es_bx = Mem0[ss:bp + 0x0004:segptr32]
	SZO = cond(Mem0[es:bx + 0x0002:word16] & 0x0200)
	C = false
	branch Test(EQ,Z) l0800_AE5D
	// succ:  l0800_AE5A l0800_AE5D
l0800_AE5A:
	call fn0800_AE10 (retsize: 2;)
	// succ:  l0800_AE5D
l0800_AE5D:
	es_bx = Mem0[ss:bp + 0x0004:segptr32]
	v11 = Mem0[es:bx + 0x0006:word16]
	sp = sp - 2
	Mem0[ss:sp:word16] = v11
	ax = Mem0[es:bx + 0x000A:word16]
	dx = Mem0[es:bx + 0x0008:word16]
	Mem0[es:bx + 0x000E:word16] = ax
	Mem0[es:bx + 0x000C:word16] = dx
	sp = sp - 2
	Mem0[ss:sp:word16] = ax
	sp = sp - 2
	Mem0[ss:sp:word16] = dx
	al = Mem0[es:bx + 0x0004:byte]
	ax = (int16) al
	sp = sp - 2
	Mem0[ss:sp:word16] = ax
	call fn0800_B97F (retsize: 2;)
	sp = sp + 0x0008
	SCZO = cond(sp)
	es_bx = Mem0[ss:bp + 0x0004:segptr32]
	Mem0[es:bx:word16] = ax
	ax = ax | ax
	SZO = cond(ax)
	C = false
	branch Test(LE,SZO) l0800_AE95
	// succ:  l0800_AE8C l0800_AE95
l0800_AE8C:
	v16 = Mem0[es:bx + 0x0002:word16] & 0xFFDF
	Mem0[es:bx + 0x0002:word16] = v16
	SZO = cond(Mem0[es:bx + 0x0002:word16])
	C = false
	ax = ax ^ ax
	SZO = cond(ax)
	C = false
	goto l0800_AEBE
	// succ:  l0800_AEBE
l0800_AE95:
	es_bx = Mem0[ss:bp + 0x0004:segptr32]
	SCZO = cond(Mem0[es:bx:word16] - 0x0000)
	branch Test(NE,Z) l0800_AEAE
	// succ:  l0800_AE9E l0800_AEAE
l0800_AE9E:
	ax = Mem0[es:bx + 0x0002:word16]
	ax = ax & 0xFE7F
	SZO = cond(ax)
	C = false
	ax = ax | 0x0020
	SZO = cond(ax)
	C = false
	Mem0[es:bx + 0x0002:word16] = ax
	goto l0800_AEBB
	// succ:  l0800_AEBB
l0800_AEAE:
	es_bx = Mem0[ss:bp + 0x0004:segptr32]
	Mem0[es:bx:word16] = 0x0000
	v17 = Mem0[es:bx + 0x0002:word16] | 0x0010
	Mem0[es:bx + 0x0002:word16] = v17
	SZO = cond(Mem0[es:bx + 0x0002:word16])
	C = false
	// succ:  l0800_AEBB
l0800_AEBB:
	ax = 0xFFFF
	// succ:  l0800_AEBE
l0800_AEBE:
	bp = Mem0[ss:sp:word16]
	sp = sp + 2
	return
	// succ:  fn0800_AE4C_exit
fn0800_AE4C_exit:


// fn0800_AEC2
// Return size: 2
define fn0800_AEC2
fn0800_AEC2_entry:
	// succ:  l0800_AEC2
l0800_AEC2:
	sp = fp
	Top = 0
	sp = sp - 2
	Mem0[ss:sp:word16] = bp
	bp = sp
	es_bx = Mem0[ss:bp + 0x0004:segptr32]
	v8 = Mem0[es:bx:word16] + 0x0001
	Mem0[es:bx:word16] = v8
	SZO = cond(v8)
	v10 = Mem0[ss:bp + 0x0006:word16]
	sp = sp - 2
	Mem0[ss:sp:word16] = v10
	sp = sp - 2
	Mem0[ss:sp:word16] = bx
	call fn0800_AED6 (retsize: 2;)
	cx = Mem0[ss:sp:word16]
	sp = sp + 2
	cx = Mem0[ss:sp:word16]
	sp = sp + 2
	bp = Mem0[ss:sp:word16]
	sp = sp + 2
	return
	// succ:  fn0800_AEC2_exit
fn0800_AEC2_exit:


// fn0800_AED6
// Return size: 2
define fn0800_AED6
fn0800_AED6_entry:
	// succ:  l0800_AED6
l0800_AED6:
	sp = fp
	Top = 0
	sp = sp - 2
	Mem0[ss:sp:word16] = bp
	bp = sp
	sp = sp - 2
	Mem0[ss:sp:word16] = si
	ax = Mem0[ss:bp + 0x0004:word16]
	ax = ax | Mem0[ss:bp + 0x0006:word16]
	SZO = cond(ax)
	C = false
	branch Test(NE,Z) l0800_AEE8
	// succ:  l0800_AEE2 l0800_AEE8
l0800_AEE2:
	ax = 0xFFFF
	goto l0800_AFBD
	// succ:  l0800_AFBD
l0800_AEE8:
	es_bx = Mem0[ss:bp + 0x0004:segptr32]
	SCZO = cond(Mem0[es:bx:word16] - 0x0000)
	branch Test(LE,SZO) l0800_AF0B
	// succ:  l0800_AEF1 l0800_AF0B
l0800_AEF1:
	es_bx = Mem0[ss:bp + 0x0004:segptr32]
	v14 = Mem0[es:bx:word16] - 0x0001
	Mem0[es:bx:word16] = v14
	SZO = cond(v14)
	ax = Mem0[es:bx + 0x000E:word16]
	si = Mem0[es:bx + 0x000C:word16]
	v15 = Mem0[es:bx + 0x000C:word16] + 0x0001
	Mem0[es:bx + 0x000C:word16] = v15
	SZO = cond(v15)
	es = ax
	al = Mem0[es:si:byte]
	goto l0800_AFBB
	// succ:  l0800_AFBB
l0800_AF0B:
	es_bx = Mem0[ss:bp + 0x0004:segptr32]
	SCZO = cond(Mem0[es:bx:word16] - 0x0000)
	branch Test(LT,SO) l0800_AF7F
	// succ:  l0800_AF14 l0800_AF7F
l0800_AF14:
	SZO = cond(Mem0[es:bx + 0x0002:word16] & 0x0110)
	C = false
	branch Test(NE,Z) l0800_AF7F
	// succ:  l0800_AF1C l0800_AF7F
l0800_AF1C:
	SZO = cond(Mem0[es:bx + 0x0002:word16] & 0x0001)
	C = false
	branch Test(EQ,Z) l0800_AF7F
	// succ:  l0800_AF24 l0800_AF7F
l0800_AF24:
	es_bx = Mem0[ss:bp + 0x0004:segptr32]
	v19 = Mem0[es:bx + 0x0002:word16] | 0x0080
	Mem0[es:bx + 0x0002:word16] = v19
	SZO = cond(Mem0[es:bx + 0x0002:word16])
	C = false
	SCZO = cond(Mem0[es:bx + 0x0006:word16] - 0x0000)
	branch Test(EQ,Z) l0800_AF43
	// succ:  l0800_AF34 l0800_AF43
l0800_AF34:
	v20 = Mem0[ss:bp + 0x0006:word16]
	sp = sp - 2
	Mem0[ss:sp:word16] = v20
	sp = sp - 2
	Mem0[ss:sp:word16] = bx
	call fn0800_AE4C (retsize: 2;)
	sp = sp + 0x0004
	ax = ax | ax
	SZO = cond(ax)
	C = false
	branch Test(EQ,Z) l0800_AEF1
	// succ:  l0800_AF3F l0800_AEF1
l0800_AF3F:
	goto l0800_AEE2
	// succ:  l0800_AEE2
l0800_AF43:
	es_bx = Mem0[ss:bp + 0x0004:segptr32]
	SZO = cond(Mem0[es:bx + 0x0002:word16] & 0x0200)
	C = false
	branch Test(EQ,Z) l0800_AF51
	// succ:  l0800_AF4E l0800_AF51
l0800_AF4E:
	call fn0800_AE10 (retsize: 2;)
	// succ:  l0800_AF51
l0800_AF51:
	ax = 0x0001
	sp = sp - 2
	Mem0[ss:sp:word16] = ax
	sp = sp - 2
	Mem0[ss:sp:word16] = ds
	ax = 0x4EE4
	sp = sp - 2
	Mem0[ss:sp:word16] = ax
	es_bx = Mem0[ss:bp + 0x0004:segptr32]
	al = Mem0[es:bx + 0x0004:byte]
	ax = (int16) al
	sp = sp - 2
	Mem0[ss:sp:word16] = ax
	call fn0800_B97F (retsize: 2;)
	sp = sp + 0x0008
	SCZO = cond(sp)
	ax = ax | ax
	SZO = cond(ax)
	C = false
	branch Test(NE,Z) l0800_AF9E
	// succ:  l0800_AF6D l0800_AF9E
l0800_AF6D:
	es_bx = Mem0[ss:bp + 0x0004:segptr32]
	al = Mem0[es:bx + 0x0004:byte]
	ax = (int16) al
	sp = sp - 2
	Mem0[ss:sp:word16] = ax
	call fn0800_A59D (retsize: 2;)
	cx = Mem0[ss:sp:word16]
	sp = sp + 2
	SCZO = cond(ax - 0x0001)
	branch Test(EQ,Z) l0800_AF8A
	// succ:  l0800_AF7F l0800_AF8A
l0800_AF7F:
	es_bx = Mem0[ss:bp + 0x0004:segptr32]
	v21 = Mem0[es:bx + 0x0002:word16] | 0x0010
	Mem0[es:bx + 0x0002:word16] = v21
	SZO = cond(Mem0[es:bx + 0x0002:word16])
	C = false
	goto l0800_AEE2
	// succ:  l0800_AEE2
l0800_AF8A:
	es_bx = Mem0[ss:bp + 0x0004:segptr32]
	ax = Mem0[es:bx + 0x0002:word16]
	ax = ax & 0xFE7F
	SZO = cond(ax)
	C = false
	ax = ax | 0x0020
	SZO = cond(ax)
	C = false
	Mem0[es:bx + 0x0002:word16] = ax
	goto l0800_AEE2
	// succ:  l0800_AEE2
l0800_AF9E:
	SCZO = cond(Mem0[ds:0x4EE4:byte] - 0x0D)
	branch Test(NE,Z) l0800_AFB0
	// succ:  l0800_AFA5 l0800_AFB0
l0800_AFA5:
	es_bx = Mem0[ss:bp + 0x0004:segptr32]
	SZO = cond(Mem0[es:bx + 0x0002:word16] & 0x0040)
	C = false
	branch Test(EQ,Z) l0800_AF43
	// succ:  l0800_AFB0 l0800_AF43
l0800_AFB0:
	es_bx = Mem0[ss:bp + 0x0004:segptr32]
	v24 = Mem0[es:bx + 0x0002:word16] & 0xFFDF
	Mem0[es:bx + 0x0002:word16] = v24
	SZO = cond(Mem0[es:bx + 0x0002:word16])
	C = false
	al = Mem0[ds:0x4EE4:byte]
	// succ:  l0800_AFBB
l0800_AFBB:
	ah = 0x00
	// succ:  l0800_AFBD
l0800_AFBD:
	si = Mem0[ss:sp:word16]
	sp = sp + 2
	bp = Mem0[ss:sp:word16]
	sp = sp + 2
	return
	// succ:  fn0800_AED6_exit
fn0800_AED6_exit:


// fn0800_AFCB
// Return size: 2
define fn0800_AFCB
fn0800_AFCB_entry:
	// succ:  l0800_AFCB
l0800_AFCB:
	sp = fp
	Top = 0
	sp = sp - 2
	Mem0[ss:sp:word16] = bp
	bp = sp
	sp = sp - 0x0004
	SCZO = cond(sp)
	sp = sp - 2
	Mem0[ss:sp:word16] = si
	sp = sp - 2
	Mem0[ss:sp:word16] = di
	es_di = Mem0[ss:bp + 0x0004:segptr32]
	ax = es
	ax = ax | di
	SZO = cond(ax)
	C = false
	branch Test(EQ,Z) l0800_AFFC
	// succ:  l0800_AFDC l0800_AFFC
l0800_AFDC:
	al = 0x00
	ah = Mem0[es:di:byte]
	cx = 0xFFFF
	D = false
	// succ:  l0800_AFE5
l0800_AFE5:
	branch cx == 0x0000 l0800_AFE7
	// succ:  l0800_AFE5_1 l0800_AFE7
l0800_AFE5_1:
	SCZO = cond(al - Mem0[es:di:byte])
	di = di + 0x0001
	cx = cx - 0x0001
	branch Test(EQ,Z) l0800_AFE5
	// succ:  l0800_AFE7 l0800_AFE5
l0800_AFE7:
	cx = ~cx
	cx = cx - 0x0001
	SZO = cond(cx)
	branch Test(EQ,Z) l0800_AFFC
	// succ:  l0800_AFEC l0800_AFFC
l0800_AFEC:
	es_di = Mem0[ds:0x26AA:segptr32]
	Mem0[ss:bp - 0x0002:word16] = es
	bx = es
	bx = bx | di
	SZO = cond(bx)
	C = false
	Mem0[ss:bp - 0x0004:word16] = di
	branch Test(NE,Z) l0800_B009
	// succ:  l0800_AFFC l0800_B009
l0800_AFFC:
	dx = dx ^ dx
	SZO = cond(dx)
	C = false
	ax = ax ^ ax
	SZO = cond(ax)
	C = false
	goto l0800_B035
	// succ:  l0800_B035
l0800_B002:
	v23 = Mem0[ss:bp - 0x0004:word16] + 0x0004
	Mem0[ss:bp - 0x0004:word16] = v23
	SCZO = cond(v23)
	es_di = Mem0[ss:bp - 0x0004:segptr32]
	// succ:  l0800_B009
l0800_B009:
	es_di = Mem0[ds:di + 0x0000:segptr32]
	bx = es
	bx = bx | di
	SZO = cond(bx)
	C = false
	branch Test(EQ,Z) l0800_AFFC
	// succ:  l0800_B012 l0800_AFFC
l0800_B012:
	al = Mem0[es:di:byte]
	al = al | al
	SZO = cond(al)
	C = false
	branch Test(EQ,Z) l0800_AFFC
	// succ:  l0800_B019 l0800_AFFC
l0800_B019:
	SCZO = cond(ah - al)
	branch Test(NE,Z) l0800_B002
	// succ:  l0800_B01D l0800_B002
l0800_B01D:
	bx = cx
	SCZO = cond(Mem0[es:bx + di:byte] - 0x3D)
	branch Test(NE,Z) l0800_B002
	// succ:  l0800_B025 l0800_B002
l0800_B025:
	sp = sp - 2
	Mem0[ss:sp:word16] = ds
	ds_si = Mem0[ss:bp + 0x0004:segptr32]
	// succ:  l0800_B029
l0800_B029:
	branch cx == 0x0000 l0800_B02B
	// succ:  l0800_B029_1 l0800_B02B
l0800_B029_1:
	SCZO = cond(Mem0[ds:si:byte] - Mem0[es:di:byte])
	si = si + 0x0001
	di = di + 0x0001
	cx = cx - 0x0001
	branch Test(NE,Z) l0800_B029
	// succ:  l0800_B02B l0800_B029
l0800_B02B:
	ds = Mem0[ss:sp:selector]
	sp = sp + 2
	v22 = bx
	bx = cx
	cx = v22
	branch Test(NE,Z) l0800_B002
	// succ:  l0800_B030 l0800_B002
l0800_B030:
	di = di + 0x0001
	SZO = cond(di)
	ax = di
	dx = es
	// succ:  l0800_B035
l0800_B035:
	di = Mem0[ss:sp:word16]
	sp = sp + 2
	si = Mem0[ss:sp:word16]
	sp = sp + 2
	sp = bp
	bp = Mem0[ss:sp:word16]
	sp = sp + 2
	return
	// succ:  fn0800_AFCB_exit
fn0800_AFCB_exit:


// fn0800_B03B
// Return size: 2
define fn0800_B03B
fn0800_B03B_entry:
	// succ:  l0800_B03B
l0800_B03B:
	sp = fp
	Top = 0
	sp = sp - 2
	Mem0[ss:sp:word16] = bp
	bp = sp
	sp = sp - 2
	Mem0[ss:sp:word16] = si
	sp = sp - 2
	Mem0[ss:sp:word16] = di
	dx = ds
	es_di = Mem0[ss:bp + 0x0004:segptr32]
	ds_si = Mem0[ss:bp + 0x0008:segptr32]
	cx = Mem0[ss:bp + 0x000C:word16]
	cx = cx >>u 0x0001
	SCZO = cond(cx)
	D = false
	// succ:  l0800_B04E
l0800_B04E:
	branch cx == 0x0000 l0800_B050
	// succ:  l0800_B04E_1 l0800_B050
l0800_B04E_1:
	v14 = Mem0[ds:si:word16]
	Mem0[es:di:word16] = v14
	si = si + 0x0002
	di = di + 0x0002
	cx = cx - 0x0001
	goto l0800_B04E
	// succ:  l0800_B04E
l0800_B050:
	branch Test(UGE,C) l0800_B053
	// succ:  l0800_B052 l0800_B053
l0800_B052:
	v17 = Mem0[ds:si:byte]
	Mem0[es:di:byte] = v17
	si = si + 0x0001
	di = di + 0x0001
	// succ:  l0800_B053
l0800_B053:
	ds = dx
	dx = Mem0[ss:bp + 0x0006:word16]
	ax = Mem0[ss:bp + 0x0004:word16]
	di = Mem0[ss:sp:word16]
	sp = sp + 2
	si = Mem0[ss:sp:word16]
	sp = sp + 2
	bp = Mem0[ss:sp:word16]
	sp = sp + 2
	return
	// succ:  fn0800_B03B_exit
fn0800_B03B_exit:


// fn0800_B05F
// Return size: 2
define fn0800_B05F
fn0800_B05F_entry:
	// succ:  l0800_B05F
l0800_B05F:
	sp = fp
	Top = 0
	sp = sp - 2
	Mem0[ss:sp:word16] = bp
	bp = sp
	sp = sp - 2
	Mem0[ss:sp:word16] = di
	es_di = Mem0[ss:bp + 0x0004:segptr32]
	cx = Mem0[ss:bp + 0x0008:word16]
	al = Mem0[ss:bp + 0x000A:byte]
	ah = al
	D = false
	SZO = cond(di & 0x0001)
	C = false
	branch Test(EQ,Z) l0800_B079
	// succ:  l0800_B075 l0800_B079
l0800_B075:
	branch cx == 0x0000 l0800_B080
	// succ:  l0800_B077 l0800_B080
l0800_B077:
	Mem0[es:di:byte] = al
	di = di + 0x0001
	cx = cx - 0x0001
	SZO = cond(cx)
	// succ:  l0800_B079
l0800_B079:
	cx = cx >>u 0x0001
	SCZO = cond(cx)
	// succ:  l0800_B07B
l0800_B07B:
	branch cx == 0x0000 l0800_B07D
	// succ:  l0800_B07B_1 l0800_B07D
l0800_B07B_1:
	Mem0[es:di:word16] = ax
	di = di + 0x0002
	cx = cx - 0x0001
	goto l0800_B07B
	// succ:  l0800_B07B
l0800_B07D:
	branch Test(UGE,C) l0800_B080
	// succ:  l0800_B07F l0800_B080
l0800_B07F:
	Mem0[es:di:byte] = al
	di = di + 0x0001
	// succ:  l0800_B080
l0800_B080:
	di = Mem0[ss:sp:word16]
	sp = sp + 2
	bp = Mem0[ss:sp:word16]
	sp = sp + 2
	return
	// succ:  fn0800_B05F_exit
fn0800_B05F_exit:


// fn0800_B083
// Return size: 2
define fn0800_B083
fn0800_B083_entry:
	// succ:  l0800_B083
l0800_B083:
	sp = fp
	Top = 0
	sp = sp - 2
	Mem0[ss:sp:word16] = bp
	bp = sp
	al = Mem0[ss:bp + 0x0008:byte]
	sp = sp - 2
	Mem0[ss:sp:word16] = ax
	v7 = Mem0[ss:bp + 0x000A:word16]
	sp = sp - 2
	Mem0[ss:sp:word16] = v7
	v8 = Mem0[ss:bp + 0x0006:word16]
	sp = sp - 2
	Mem0[ss:sp:word16] = v8
	v9 = Mem0[ss:bp + 0x0004:word16]
	sp = sp - 2
	Mem0[ss:sp:word16] = v9
	call fn0800_B05F (retsize: 2;)
	sp = sp + 0x0008
	SCZO = cond(sp)
	dx = Mem0[ss:bp + 0x0006:word16]
	ax = Mem0[ss:bp + 0x0004:word16]
	bp = Mem0[ss:sp:word16]
	sp = sp + 2
	return
	// succ:  fn0800_B083_exit
fn0800_B083_exit:


// fn0800_B0A1
// Return size: 2
define fn0800_B0A1
fn0800_B0A1_entry:
	// succ:  l0800_B0A1
l0800_B0A1:
	sp = fp
	Top = 0
	sp = sp - 2
	Mem0[ss:sp:word16] = bp
	bp = sp
	sp = sp - 2
	Mem0[ss:sp:word16] = si
	sp = sp - 2
	Mem0[ss:sp:word16] = di
	sp = sp - 2
	Mem0[ss:sp:word16] = ds
	cx = Mem0[ss:bp + 0x000A:word16]
	bx = Mem0[ss:bp + 0x0008:word16]
	dx = Mem0[ss:bp + 0x0006:word16]
	ax = Mem0[ss:bp + 0x0004:word16]
	call fn0800_8F2F (retsize: 2;)
	branch Test(UGE,C) l0800_B0BE
	// succ:  l0800_B0B8 l0800_B0BE
l0800_B0B8:
	D = true
	ax = 0x0001
	goto l0800_B0C1
	// succ:  l0800_B0C1
l0800_B0BE:
	D = false
	ax = ax ^ ax
	SZO = cond(ax)
	C = false
	// succ:  l0800_B0C1
l0800_B0C1:
	ds_si = Mem0[ss:bp + 0x0004:segptr32]
	es_di = Mem0[ss:bp + 0x0008:segptr32]
	cx = Mem0[ss:bp + 0x000C:word16]
	ax = ax | ax
	SZO = cond(ax)
	C = false
	branch Test(EQ,Z) l0800_B0D4
	// succ:  l0800_B0CE l0800_B0D4
l0800_B0CE:
	si = si + cx
	SCZO = cond(si)
	si = si - 0x0001
	SZO = cond(si)
	di = di + cx
	SCZO = cond(di)
	di = di - 0x0001
	SZO = cond(di)
	// succ:  l0800_B0D4
l0800_B0D4:
	SZO = cond(di & 0x0001)
	C = false
	branch Test(EQ,Z) l0800_B0DE
	// succ:  l0800_B0DA l0800_B0DE
l0800_B0DA:
	branch cx == 0x0000 l0800_B0ED
	// succ:  l0800_B0DC l0800_B0ED
l0800_B0DC:
	v19 = Mem0[ds:si:byte]
	Mem0[es:di:byte] = v19
	si = si + 0x0001
	di = di + 0x0001
	cx = cx - 0x0001
	SZO = cond(cx)
	// succ:  l0800_B0DE
l0800_B0DE:
	si = si - ax
	SCZO = cond(si)
	di = di - ax
	SCZO = cond(di)
	cx = cx >>u 0x0001
	SCZO = cond(cx)
	// succ:  l0800_B0E4
l0800_B0E4:
	branch cx == 0x0000 l0800_B0E6
	// succ:  l0800_B0E4_1 l0800_B0E6
l0800_B0E4_1:
	v21 = Mem0[ds:si:word16]
	Mem0[es:di:word16] = v21
	si = si + 0x0002
	di = di + 0x0002
	cx = cx - 0x0001
	goto l0800_B0E4
	// succ:  l0800_B0E4
l0800_B0E6:
	branch Test(UGE,C) l0800_B0ED
	// succ:  l0800_B0E8 l0800_B0ED
l0800_B0E8:
	si = si + ax
	SCZO = cond(si)
	di = di + ax
	SCZO = cond(di)
	v22 = Mem0[ds:si:byte]
	Mem0[es:di:byte] = v22
	si = si + 0x0001
	di = di + 0x0001
	// succ:  l0800_B0ED
l0800_B0ED:
	D = false
	ds = Mem0[ss:sp:selector]
	sp = sp + 2
	di = Mem0[ss:sp:word16]
	sp = sp + 2
	si = Mem0[ss:sp:word16]
	sp = sp + 2
	bp = Mem0[ss:sp:word16]
	sp = sp + 2
	return
	// succ:  fn0800_B0A1_exit
fn0800_B0A1_exit:


// fn0800_B0F3
// Return size: 2
define fn0800_B0F3
fn0800_B0F3_entry:
	// succ:  l0800_B0F3
l0800_B0F3:
	sp = fp
	Top = 0
	sp = sp - 2
	Mem0[ss:sp:word16] = bp
	bp = sp
	v5 = Mem0[ss:bp + 0x000C:word16]
	sp = sp - 2
	Mem0[ss:sp:word16] = v5
	v6 = Mem0[ss:bp + 0x0006:word16]
	sp = sp - 2
	Mem0[ss:sp:word16] = v6
	v7 = Mem0[ss:bp + 0x0004:word16]
	sp = sp - 2
	Mem0[ss:sp:word16] = v7
	v8 = Mem0[ss:bp + 0x000A:word16]
	sp = sp - 2
	Mem0[ss:sp:word16] = v8
	v9 = Mem0[ss:bp + 0x0008:word16]
	sp = sp - 2
	Mem0[ss:sp:word16] = v9
	call fn0800_B0A1 (retsize: 2;)
	sp = sp + 0x000A
	SCZO = cond(sp)
	dx = Mem0[ss:bp + 0x0006:word16]
	ax = Mem0[ss:bp + 0x0004:word16]
	bp = Mem0[ss:sp:word16]
	sp = sp + 2
	return
	// succ:  fn0800_B0F3_exit
fn0800_B0F3_exit:


// fn0800_B113
// Return size: 2
define fn0800_B113
fn0800_B113_entry:
	// succ:  l0800_B113
l0800_B113:
	sp = fp
	Top = 0
	sp = sp - 2
	Mem0[ss:sp:word16] = bp
	bp = sp
	sp = sp - 2
	Mem0[ss:sp:word16] = ds
	cx = Mem0[ss:bp + 0x0004:word16]
	ah = 0x3C
	ds_dx = Mem0[ss:bp + 0x0006:segptr32]
	C = msdos_create_truncate_file(cx, ds, dx, out ax)
	ds = Mem0[ss:sp:selector]
	sp = sp + 2
	branch Test(ULT,C) l0800_B126
	// succ:  l0800_B124 l0800_B126
l0800_B124:
	goto l0800_B12A
	// succ:  l0800_B12A
l0800_B126:
	sp = sp - 2
	Mem0[ss:sp:word16] = ax
	call fn0800_8D2B (retsize: 2;)
	sp = sp + 0x0002
	// succ:  l0800_B12A
l0800_B12A:
	bp = Mem0[ss:sp:word16]
	sp = sp + 2
	return
	// succ:  fn0800_B113_exit
fn0800_B113_exit:


// fn0800_B12E
// Return size: 2
define fn0800_B12E
fn0800_B12E_entry:
	// succ:  l0800_B12E
l0800_B12E:
	sp = fp
	Top = 0
	sp = sp - 2
	Mem0[ss:sp:word16] = bp
	bp = sp
	bx = Mem0[ss:bp + 0x0004:word16]
	cx = cx - cx
	SCZO = cond(cx)
	dx = dx - dx
	SCZO = cond(dx)
	ah = 0x40
	C = msdos_write_file(bx, cx, ds_dx, out ax)
	bp = Mem0[ss:sp:word16]
	sp = sp + 2
	return
	// succ:  fn0800_B12E_exit
fn0800_B12E_exit:


// fn0800_B140
// Return size: 2
define fn0800_B140
fn0800_B140_entry:
	// succ:  l0800_B140
l0800_B140:
	sp = fp
	Top = 0
	sp = sp - 2
	Mem0[ss:sp:word16] = bp
	bp = sp
	sp = sp - 0x0004
	SCZO = cond(sp)
	sp = sp - 2
	Mem0[ss:sp:word16] = si
	sp = sp - 2
	Mem0[ss:sp:word16] = di
	si = Mem0[ss:bp + 0x0008:word16]
	di = Mem0[ss:bp + 0x000A:word16]
	SZO = cond(si & 0xC000)
	C = false
	branch Test(NE,Z) l0800_B15C
	// succ:  l0800_B154 l0800_B15C
l0800_B154:
	ax = Mem0[ds:0x2512:word16]
	ax = ax & 0xC000
	SZO = cond(ax)
	C = false
	si = si | ax
	SZO = cond(si)
	C = false
	// succ:  l0800_B15C
l0800_B15C:
	ax = ax ^ ax
	SZO = cond(ax)
	C = false
	sp = sp - 2
	Mem0[ss:sp:word16] = ax
	v13 = Mem0[ss:bp + 0x0006:word16]
	sp = sp - 2
	Mem0[ss:sp:word16] = v13
	v14 = Mem0[ss:bp + 0x0004:word16]
	sp = sp - 2
	Mem0[ss:sp:word16] = v14
	call fn0800_A53C (retsize: 2;)
	sp = sp + 0x0006
	SCZO = cond(sp)
	Mem0[ss:bp - 0x0002:word16] = ax
	SZO = cond(si & 0x0100)
	C = false
	branch Test(EQ,Z) l0800_B1F2
	// succ:  l0800_B174 l0800_B1F2
l0800_B174:
	di = di & Mem0[ds:0x2514:word16]
	SZO = cond(di)
	C = false
	ax = di
	SZO = cond(ax & 0x0180)
	C = false
	branch Test(NE,Z) l0800_B186
	// succ:  l0800_B17F l0800_B186
l0800_B17F:
	ax = 0x0001
	sp = sp - 2
	Mem0[ss:sp:word16] = ax
	call fn0800_8D2B (retsize: 2;)
	sp = sp + 0x0002
	// succ:  l0800_B186
l0800_B186:
	SCZO = cond(Mem0[ss:bp - 0x0002:word16] - 0xFFFF)
	branch Test(NE,Z) l0800_B1AF
	// succ:  l0800_B18C l0800_B1AF
l0800_B18C:
	SCZO = cond(Mem0[ds:0x2516:word16] - 0x0002)
	branch Test(EQ,Z) l0800_B19D
	// succ:  l0800_B193 l0800_B19D
l0800_B193:
	v20 = Mem0[ds:0x2516:word16]
	sp = sp - 2
	Mem0[ss:sp:word16] = v20
	// succ:  l0800_B197
l0800_B197:
	call fn0800_8D2B (retsize: 2;)
	sp = sp + 0x0002
	goto l0800_B29A
	// succ:  l0800_B29A
l0800_B19D:
	SZO = cond(di & 0x0080)
	C = false
	branch Test(EQ,Z) l0800_B1A7
	// succ:  l0800_B1A3 l0800_B1A7
l0800_B1A3:
	ax = ax ^ ax
	SZO = cond(ax)
	C = false
	goto l0800_B1AA
	// succ:  l0800_B1AA
l0800_B1A7:
	ax = 0x0001
	// succ:  l0800_B1AA
l0800_B1AA:
	Mem0[ss:bp - 0x0002:word16] = ax
	goto l0800_B1BB
	// succ:  l0800_B1BB
l0800_B1AF:
	SZO = cond(si & 0x0400)
	C = false
	branch Test(EQ,Z) l0800_B1F2
	// succ:  l0800_B1B5 l0800_B1F2
l0800_B1B5:
	ax = 0x0050
	sp = sp - 2
	Mem0[ss:sp:word16] = ax
	goto l0800_B197
	// succ:  l0800_B197
l0800_B1BB:
	SZO = cond(si & 0x00F0)
	C = false
	branch Test(EQ,Z) l0800_B1DD
	// succ:  l0800_B1C1 l0800_B1DD
l0800_B1C1:
	v24 = Mem0[ss:bp + 0x0006:word16]
	sp = sp - 2
	Mem0[ss:sp:word16] = v24
	v25 = Mem0[ss:bp + 0x0004:word16]
	sp = sp - 2
	Mem0[ss:sp:word16] = v25
	ax = ax ^ ax
	SZO = cond(ax)
	C = false
	sp = sp - 2
	Mem0[ss:sp:word16] = ax
	call fn0800_B113 (retsize: 2;)
	sp = sp + 0x0006
	di = ax
	ax = ax | ax
	SZO = cond(ax)
	C = false
	branch Test(GE,SO) l0800_B1D6
	// succ:  l0800_B1D3 l0800_B1D6
l0800_B1D3:
	goto l0800_B298
	// succ:  l0800_B298
l0800_B1D6:
	sp = sp - 2
	Mem0[ss:sp:word16] = di
	call fn0800_A57F (retsize: 2;)
	cx = Mem0[ss:sp:word16]
	sp = sp + 2
	goto l0800_B1F2
	// succ:  l0800_B1F2
l0800_B1DD:
	v26 = Mem0[ss:bp + 0x0006:word16]
	sp = sp - 2
	Mem0[ss:sp:word16] = v26
	v27 = Mem0[ss:bp + 0x0004:word16]
	sp = sp - 2
	Mem0[ss:sp:word16] = v27
	v28 = Mem0[ss:bp - 0x0002:word16]
	sp = sp - 2
	Mem0[ss:sp:word16] = v28
	call fn0800_B113 (retsize: 2;)
	sp = sp + 0x0006
	di = ax
	ax = ax | ax
	SZO = cond(ax)
	C = false
	branch Test(GE,SO) l0800_B265
	// succ:  l0800_B1EF l0800_B265
l0800_B1EF:
	goto l0800_B298
	// succ:  l0800_B298
l0800_B1F2:
	sp = sp - 2
	Mem0[ss:sp:word16] = si
	v15 = Mem0[ss:bp + 0x0006:word16]
	sp = sp - 2
	Mem0[ss:sp:word16] = v15
	v16 = Mem0[ss:bp + 0x0004:word16]
	sp = sp - 2
	Mem0[ss:sp:word16] = v16
	call fn0800_B2A0 (retsize: 2;)
	sp = sp + 0x0006
	SCZO = cond(sp)
	di = ax
	ax = ax | ax
	SZO = cond(ax)
	C = false
	branch Test(LT,SO) l0800_B265
	// succ:  l0800_B205 l0800_B265
l0800_B205:
	ax = ax ^ ax
	SZO = cond(ax)
	C = false
	sp = sp - 2
	Mem0[ss:sp:word16] = ax
	sp = sp - 2
	Mem0[ss:sp:word16] = di
	call fn0800_A2A3 (retsize: 2;)
	cx = Mem0[ss:sp:word16]
	sp = sp + 2
	cx = Mem0[ss:sp:word16]
	sp = sp + 2
	Mem0[ss:bp - 0x0004:word16] = ax
	SZO = cond(ax & 0x0080)
	C = false
	branch Test(EQ,Z) l0800_B237
	// succ:  l0800_B216 l0800_B237
l0800_B216:
	si = si | 0x2000
	SZO = cond(si)
	C = false
	SZO = cond(si & 0x8000)
	C = false
	branch Test(EQ,Z) l0800_B241
	// succ:  l0800_B220 l0800_B241
l0800_B220:
	ax = ax & 0x00FF
	SZO = cond(ax)
	C = false
	ax = ax | 0x0020
	SZO = cond(ax)
	C = false
	dx = dx ^ dx
	SZO = cond(dx)
	C = false
	sp = sp - 2
	Mem0[ss:sp:word16] = dx
	sp = sp - 2
	Mem0[ss:sp:word16] = ax
	ax = 0x0001
	sp = sp - 2
	Mem0[ss:sp:word16] = ax
	sp = sp - 2
	Mem0[ss:sp:word16] = di
	call fn0800_A2A3 (retsize: 2;)
	sp = sp + 0x0008
	SCZO = cond(sp)
	goto l0800_B241
	// succ:  l0800_B241
l0800_B237:
	SZO = cond(si & 0x0200)
	C = false
	branch Test(EQ,Z) l0800_B241
	// succ:  l0800_B23D l0800_B241
l0800_B23D:
	sp = sp - 2
	Mem0[ss:sp:word16] = di
	call fn0800_B12E (retsize: 2;)
	sp = sp + 0x0002
	// succ:  l0800_B241
l0800_B241:
	SZO = cond(Mem0[ss:bp - 0x0002:word16] & 0x0001)
	C = false
	branch Test(EQ,Z) l0800_B265
	// succ:  l0800_B248 l0800_B265
l0800_B248:
	SZO = cond(si & 0x0100)
	C = false
	branch Test(EQ,Z) l0800_B265
	// succ:  l0800_B24E l0800_B265
l0800_B24E:
	SZO = cond(si & 0x00F0)
	C = false
	branch Test(EQ,Z) l0800_B265
	// succ:  l0800_B254 l0800_B265
l0800_B254:
	ax = 0x0001
	sp = sp - 2
	Mem0[ss:sp:word16] = ax
	sp = sp - 2
	Mem0[ss:sp:word16] = ax
	v21 = Mem0[ss:bp + 0x0006:word16]
	sp = sp - 2
	Mem0[ss:sp:word16] = v21
	v22 = Mem0[ss:bp + 0x0004:word16]
	sp = sp - 2
	Mem0[ss:sp:word16] = v22
	call fn0800_A53C (retsize: 2;)
	sp = sp + 0x0008
	SCZO = cond(sp)
	// succ:  l0800_B265
l0800_B265:
	di = di | di
	SZO = cond(di)
	C = false
	branch Test(LT,SO) l0800_B298
	// succ:  l0800_B269 l0800_B298
l0800_B269:
	SZO = cond(si & 0x0300)
	C = false
	branch Test(EQ,Z) l0800_B274
	// succ:  l0800_B26F l0800_B274
l0800_B26F:
	ax = 0x1000
	goto l0800_B276
	// succ:  l0800_B276
l0800_B274:
	ax = ax ^ ax
	SZO = cond(ax)
	C = false
	// succ:  l0800_B276
l0800_B276:
	dx = si
	dx = dx & 0xF8FF
	SZO = cond(dx)
	C = false
	dx = dx | ax
	SZO = cond(dx)
	C = false
	sp = sp - 2
	Mem0[ss:sp:word16] = dx
	SZO = cond(Mem0[ss:bp - 0x0002:word16] & 0x0001)
	C = false
	branch Test(EQ,Z) l0800_B28A
	// succ:  l0800_B286 l0800_B28A
l0800_B286:
	ax = ax ^ ax
	SZO = cond(ax)
	C = false
	goto l0800_B28D
	// succ:  l0800_B28D
l0800_B28A:
	ax = 0x0100
	// succ:  l0800_B28D
l0800_B28D:
	dx = Mem0[ss:sp:word16]
	sp = sp + 2
	dx = dx | ax
	SZO = cond(dx)
	C = false
	bx = di
	bx = bx << 0x0001
	SCZO = cond(bx)
	Mem0[ds:bx + 0x24EA:word16] = dx
	// succ:  l0800_B298
l0800_B298:
	ax = di
	// succ:  l0800_B29A
l0800_B29A:
	di = Mem0[ss:sp:word16]
	sp = sp + 2
	si = Mem0[ss:sp:word16]
	sp = sp + 2
	sp = bp
	bp = Mem0[ss:sp:word16]
	sp = sp + 2
	return
	// succ:  fn0800_B140_exit
fn0800_B140_exit:


// fn0800_B2A0
// Return size: 2
define fn0800_B2A0
fn0800_B2A0_entry:
	// succ:  l0800_B2A0
l0800_B2A0:
	sp = fp
	Top = 0
	sp = sp - 2
	Mem0[ss:sp:word16] = bp
	bp = sp
	sp = sp - 0x0002
	SCZO = cond(sp)
	al = 0x01
	cx = Mem0[ss:bp + 0x0008:word16]
	SZO = cond(cx & 0x0002)
	C = false
	branch Test(NE,Z) l0800_B2BB
	// succ:  l0800_B2B1 l0800_B2BB
l0800_B2B1:
	al = 0x02
	SZO = cond(cx & 0x0004)
	C = false
	branch Test(NE,Z) l0800_B2BB
	// succ:  l0800_B2B9 l0800_B2BB
l0800_B2B9:
	al = 0x00
	// succ:  l0800_B2BB
l0800_B2BB:
	sp = sp - 2
	Mem0[ss:sp:word16] = ds
	ds_dx = Mem0[ss:bp + 0x0004:segptr32]
	cl = 0xF0
	cl = cl & Mem0[ss:bp + 0x0008:byte]
	SZO = cond(cl)
	C = false
	al = al | cl
	SZO = cond(al)
	C = false
	ah = 0x3D
	C = msdos_open_file(ds_dx, al, out ax)
	ds = Mem0[ss:sp:selector]
	sp = sp + 2
	branch Test(ULT,C) l0800_B2E7
	// succ:  l0800_B2CD l0800_B2E7
l0800_B2CD:
	Mem0[ss:bp - 0x0002:word16] = ax
	ax = Mem0[ss:bp + 0x0008:word16]
	ax = ax & 0xB8FF
	SZO = cond(ax)
	C = false
	ax = ax | 0x8000
	SZO = cond(ax)
	C = false
	bx = Mem0[ss:bp - 0x0002:word16]
	bx = bx << 0x0001
	SCZO = cond(bx)
	Mem0[ds:bx + 0x24EA:word16] = ax
	ax = Mem0[ss:bp - 0x0002:word16]
	goto l0800_B2EB
	// succ:  l0800_B2EB
l0800_B2E7:
	sp = sp - 2
	Mem0[ss:sp:word16] = ax
	call fn0800_8D2B (retsize: 2;)
	sp = sp + 0x0002
	// succ:  l0800_B2EB
l0800_B2EB:
	sp = bp
	bp = Mem0[ss:sp:word16]
	sp = sp + 2
	return
	// succ:  fn0800_B2A0_exit
fn0800_B2A0_exit:


// fn0800_B2EF
// Return size: 2
define fn0800_B2EF
fn0800_B2EF_entry:
	// succ:  l0800_B2EF
l0800_B2EF:
	sp = fp
	Top = 0
	sp = sp - 2
	Mem0[ss:sp:word16] = bp
	bp = sp
	ax = 0xB4BE
	sp = sp - 2
	Mem0[ss:sp:word16] = ax
	sp = sp - 2
	Mem0[ss:sp:word16] = ds
	ax = 0x236C
	sp = sp - 2
	Mem0[ss:sp:word16] = ax
	v7 = Mem0[ss:bp + 0x0006:word16]
	sp = sp - 2
	Mem0[ss:sp:word16] = v7
	v8 = Mem0[ss:bp + 0x0004:word16]
	sp = sp - 2
	Mem0[ss:sp:word16] = v8
	ax = bp + 0x0008
	sp = sp - 2
	Mem0[ss:sp:word16] = ax
	call fn0800_9828 (retsize: 2;)
	sp = sp + 0x000C
	bp = Mem0[ss:sp:word16]
	sp = sp + 2
	return
	// succ:  fn0800_B2EF_exit
fn0800_B2EF_exit:


// fn0800_B30A
// Return size: 2
define fn0800_B30A
fn0800_B30A_entry:
	// succ:  l0800_B30A
l0800_B30A:
	sp = fp
	Top = 0
	sp = sp - 2
	Mem0[ss:sp:word16] = bp
	bp = sp
	es_bx = Mem0[ss:bp + 0x0006:segptr32]
	v8 = Mem0[es:bx:word16] - 0x0001
	Mem0[es:bx:word16] = v8
	SZO = cond(v8)
	v10 = Mem0[ss:bp + 0x0008:word16]
	sp = sp - 2
	Mem0[ss:sp:word16] = v10
	sp = sp - 2
	Mem0[ss:sp:word16] = bx
	al = Mem0[ss:bp + 0x0004:byte]
	ax = (int16) al
	sp = sp - 2
	Mem0[ss:sp:word16] = ax
	call fn0800_B324 (retsize: 2;)
	sp = sp + 0x0006
	SCZO = cond(sp)
	bp = Mem0[ss:sp:word16]
	sp = sp + 2
	return
	// succ:  fn0800_B30A_exit
fn0800_B30A_exit:


// fn0800_B324
// Return size: 2
define fn0800_B324
fn0800_B324_entry:
	// succ:  l0800_B324
l0800_B324:
	sp = fp
	Top = 0
	sp = sp - 2
	Mem0[ss:sp:word16] = bp
	bp = sp
	sp = sp - 2
	Mem0[ss:sp:word16] = si
	al = Mem0[ss:bp + 0x0004:byte]
	Mem0[ds:0x4EE6:byte] = al
	es_bx = Mem0[ss:bp + 0x0006:segptr32]
	SCZO = cond(Mem0[es:bx:word16] - 0xFFFF)
	branch Test(GE,SO) l0800_B389
	// succ:  l0800_B337 l0800_B389
l0800_B337:
	v13 = Mem0[es:bx:word16] + 0x0001
	Mem0[es:bx:word16] = v13
	SZO = cond(v13)
	ax = Mem0[es:bx + 0x000E:word16]
	si = Mem0[es:bx + 0x000C:word16]
	v16 = Mem0[es:bx + 0x000C:word16] + 0x0001
	Mem0[es:bx + 0x000C:word16] = v16
	SZO = cond(v16)
	dl = Mem0[ds:0x4EE6:byte]
	es = ax
	Mem0[es:si:byte] = dl
	es = Mem0[ss:bp + 0x0008:selector]
	SZO = cond(Mem0[es:bx + 0x0002:word16] & 0x0008)
	C = false
	branch Test(NE,Z) l0800_B35D
	// succ:  l0800_B35A l0800_B35D
l0800_B35A:
	goto l0800_B4A3
	// succ:  l0800_B4A3
l0800_B35D:
	SCZO = cond(Mem0[ds:0x4EE6:byte] - 0x0A)
	branch Test(EQ,Z) l0800_B36E
	// succ:  l0800_B364 l0800_B36E
l0800_B364:
	SCZO = cond(Mem0[ds:0x4EE6:byte] - 0x0D)
	branch Test(EQ,Z) l0800_B36E
	// succ:  l0800_B36B l0800_B36E
l0800_B36B:
	goto l0800_B4A3
	// succ:  l0800_B4A3
l0800_B36E:
	v28 = Mem0[ss:bp + 0x0008:word16]
	sp = sp - 2
	Mem0[ss:sp:word16] = v28
	v29 = Mem0[ss:bp + 0x0006:word16]
	sp = sp - 2
	Mem0[ss:sp:word16] = v29
	call fn0800_A6B7 (retsize: 2;)
	cx = Mem0[ss:sp:word16]
	sp = sp + 2
	cx = Mem0[ss:sp:word16]
	sp = sp + 2
	ax = ax | ax
	SZO = cond(ax)
	C = false
	branch Test(NE,Z) l0800_B380
	// succ:  l0800_B37D l0800_B380
l0800_B37D:
	goto l0800_B4A3
	// succ:  l0800_B4A3
l0800_B380:
	ax = 0xFFFF
	goto l0800_B4A8
	// succ:  l0800_B4A8
l0800_B389:
	es_bx = Mem0[ss:bp + 0x0006:segptr32]
	SZO = cond(Mem0[es:bx + 0x0002:word16] & 0x0090)
	C = false
	branch Test(NE,Z) l0800_B39C
	// succ:  l0800_B394 l0800_B39C
l0800_B394:
	SZO = cond(Mem0[es:bx + 0x0002:word16] & 0x0002)
	C = false
	branch Test(NE,Z) l0800_B3A6
	// succ:  l0800_B39C l0800_B3A6
l0800_B39C:
	es_bx = Mem0[ss:bp + 0x0006:segptr32]
	v20 = Mem0[es:bx + 0x0002:word16] | 0x0010
	Mem0[es:bx + 0x0002:word16] = v20
	SZO = cond(Mem0[es:bx + 0x0002:word16])
	C = false
	goto l0800_B380
	// succ:  l0800_B380
l0800_B3A6:
	es_bx = Mem0[ss:bp + 0x0006:segptr32]
	v22 = Mem0[es:bx + 0x0002:word16] | 0x0100
	Mem0[es:bx + 0x0002:word16] = v22
	SZO = cond(Mem0[es:bx + 0x0002:word16])
	C = false
	SCZO = cond(Mem0[es:bx + 0x0006:word16] - 0x0000)
	branch Test(EQ,Z) l0800_B421
	// succ:  l0800_B3B6 l0800_B421
l0800_B3B6:
	SCZO = cond(Mem0[es:bx:word16] - 0x0000)
	branch Test(EQ,Z) l0800_B3C9
	// succ:  l0800_B3BC l0800_B3C9
l0800_B3BC:
	v23 = Mem0[ss:bp + 0x0008:word16]
	sp = sp - 2
	Mem0[ss:sp:word16] = v23
	sp = sp - 2
	Mem0[ss:sp:word16] = bx
	call fn0800_A6B7 (retsize: 2;)
	cx = Mem0[ss:sp:word16]
	sp = sp + 2
	cx = Mem0[ss:sp:word16]
	sp = sp + 2
	ax = ax | ax
	SZO = cond(ax)
	C = false
	branch Test(NE,Z) l0800_B380
	// succ:  l0800_B3C9 l0800_B380
l0800_B3C9:
	es_bx = Mem0[ss:bp + 0x0006:segptr32]
	ax = Mem0[es:bx + 0x0006:word16]
	ax = -ax
	SCZO = cond(ax)
	C = ax == 0x0000
	Mem0[es:bx:word16] = ax
	ax = Mem0[es:bx + 0x000E:word16]
	si = Mem0[es:bx + 0x000C:word16]
	v25 = Mem0[es:bx + 0x000C:word16] + 0x0001
	Mem0[es:bx + 0x000C:word16] = v25
	SZO = cond(v25)
	dl = Mem0[ds:0x4EE6:byte]
	es = ax
	Mem0[es:si:byte] = dl
	es = Mem0[ss:bp + 0x0008:selector]
	SZO = cond(Mem0[es:bx + 0x0002:word16] & 0x0008)
	C = false
	branch Test(NE,Z) l0800_B3F8
	// succ:  l0800_B3F5 l0800_B3F8
l0800_B3F5:
	goto l0800_B4A3
	// succ:  l0800_B4A3
l0800_B3F8:
	SCZO = cond(Mem0[ds:0x4EE6:byte] - 0x0A)
	branch Test(EQ,Z) l0800_B409
	// succ:  l0800_B3FF l0800_B409
l0800_B3FF:
	SCZO = cond(Mem0[ds:0x4EE6:byte] - 0x0D)
	branch Test(EQ,Z) l0800_B409
	// succ:  l0800_B406 l0800_B409
l0800_B406:
	goto l0800_B4A3
	// succ:  l0800_B4A3
l0800_B409:
	v26 = Mem0[ss:bp + 0x0008:word16]
	sp = sp - 2
	Mem0[ss:sp:word16] = v26
	v27 = Mem0[ss:bp + 0x0006:word16]
	sp = sp - 2
	Mem0[ss:sp:word16] = v27
	call fn0800_A6B7 (retsize: 2;)
	cx = Mem0[ss:sp:word16]
	sp = sp + 2
	cx = Mem0[ss:sp:word16]
	sp = sp + 2
	ax = ax | ax
	SZO = cond(ax)
	C = false
	branch Test(NE,Z) l0800_B41B
	// succ:  l0800_B418 l0800_B41B
l0800_B418:
	goto l0800_B4A3
	// succ:  l0800_B4A3
l0800_B41B:
	goto l0800_B380
	// succ:  l0800_B380
l0800_B421:
	es_bx = Mem0[ss:bp + 0x0006:segptr32]
	al = Mem0[es:bx + 0x0004:byte]
	ax = (int16) al
	ax = ax << 0x0001
	SCZO = cond(ax)
	bx = ax
	SZO = cond(Mem0[ds:bx + 0x24EA:word16] & 0x0800)
	C = false
	branch Test(EQ,Z) l0800_B44C
	// succ:  l0800_B435 l0800_B44C
l0800_B435:
	ax = 0x0002
	sp = sp - 2
	Mem0[ss:sp:word16] = ax
	ax = ax ^ ax
	SZO = cond(ax)
	C = false
	sp = sp - 2
	Mem0[ss:sp:word16] = ax
	sp = sp - 2
	Mem0[ss:sp:word16] = ax
	bx = Mem0[ss:bp + 0x0006:word16]
	al = Mem0[es:bx + 0x0004:byte]
	ax = (int16) al
	sp = sp - 2
	Mem0[ss:sp:word16] = ax
	call fn0800_8E29 (retsize: 2;)
	sp = sp + 0x0008
	SCZO = cond(sp)
	// succ:  l0800_B44C
l0800_B44C:
	SCZO = cond(Mem0[ds:0x4EE6:byte] - 0x0A)
	branch Test(NE,Z) l0800_B478
	// succ:  l0800_B453 l0800_B478
l0800_B453:
	es_bx = Mem0[ss:bp + 0x0006:segptr32]
	SZO = cond(Mem0[es:bx + 0x0002:word16] & 0x0040)
	C = false
	branch Test(NE,Z) l0800_B478
	// succ:  l0800_B45E l0800_B478
l0800_B45E:
	ax = 0x0001
	sp = sp - 2
	Mem0[ss:sp:word16] = ax
	sp = sp - 2
	Mem0[ss:sp:word16] = ds
	ax = 0x26AE
	sp = sp - 2
	Mem0[ss:sp:word16] = ax
	al = Mem0[es:bx + 0x0004:byte]
	ax = (int16) al
	sp = sp - 2
	Mem0[ss:sp:word16] = ax
	call fn0800_C779 (retsize: 2;)
	sp = sp + 0x0008
	SCZO = cond(sp)
	SCZO = cond(ax - 0x0001)
	branch Test(NE,Z) l0800_B495
	// succ:  l0800_B478 l0800_B495
l0800_B478:
	ax = 0x0001
	sp = sp - 2
	Mem0[ss:sp:word16] = ax
	sp = sp - 2
	Mem0[ss:sp:word16] = ds
	ax = 0x4EE6
	sp = sp - 2
	Mem0[ss:sp:word16] = ax
	es_bx = Mem0[ss:bp + 0x0006:segptr32]
	al = Mem0[es:bx + 0x0004:byte]
	ax = (int16) al
	sp = sp - 2
	Mem0[ss:sp:word16] = ax
	call fn0800_C779 (retsize: 2;)
	sp = sp + 0x0008
	SCZO = cond(sp)
	SCZO = cond(ax - 0x0001)
	branch Test(EQ,Z) l0800_B4A3
	// succ:  l0800_B495 l0800_B4A3
l0800_B495:
	es_bx = Mem0[ss:bp + 0x0006:segptr32]
	SZO = cond(Mem0[es:bx + 0x0002:word16] & 0x0200)
	C = false
	branch Test(NE,Z) l0800_B4A3
	// succ:  l0800_B4A0 l0800_B4A3
l0800_B4A0:
	goto l0800_B39C
	// succ:  l0800_B39C
l0800_B4A3:
	al = Mem0[ds:0x4EE6:byte]
	ah = 0x00
	// succ:  l0800_B4A8
l0800_B4A8:
	si = Mem0[ss:sp:word16]
	sp = sp + 2
	bp = Mem0[ss:sp:word16]
	sp = sp + 2
	return
	// succ:  fn0800_B324_exit
fn0800_B324_exit:


// fn0800_B4BE
// Return size: 2
define fn0800_B4BE
fn0800_B4BE_entry:
	// succ:  l0800_B4BE
l0800_B4BE:
	sp = fp
	Top = 0
	sp = sp - 2
	Mem0[ss:sp:word16] = bp
	bp = sp
	sp = sp - 0x0002
	SCZO = cond(sp)
	sp = sp - 2
	Mem0[ss:sp:word16] = si
	sp = sp - 2
	Mem0[ss:sp:word16] = di
	di = Mem0[ss:bp + 0x0008:word16]
	Mem0[ss:bp - 0x0002:word16] = di
	es_bx = Mem0[ss:bp + 0x0004:segptr32]
	SZO = cond(Mem0[es:bx + 0x0002:word16] & 0x0008)
	C = false
	branch Test(EQ,Z) l0800_B504
	// succ:  l0800_B4D7 l0800_B504
l0800_B4D7:
	goto l0800_B4FA
	// succ:  l0800_B4FA
l0800_B4D9:
	v15 = Mem0[ss:bp + 0x0006:word16]
	sp = sp - 2
	Mem0[ss:sp:word16] = v15
	v16 = Mem0[ss:bp + 0x0004:word16]
	sp = sp - 2
	Mem0[ss:sp:word16] = v16
	es_bx = Mem0[ss:bp + 0x000A:segptr32]
	v17 = Mem0[ss:bp + 0x000A:word16] + 0x0001
	Mem0[ss:bp + 0x000A:word16] = v17
	SZO = cond(v17)
	al = Mem0[es:bx:byte]
	ax = (int16) al
	sp = sp - 2
	Mem0[ss:sp:word16] = ax
	call fn0800_B324 (retsize: 2;)
	sp = sp + 0x0006
	SCZO = cond(sp)
	SCZO = cond(ax - 0xFFFF)
	branch Test(NE,Z) l0800_B4FA
	// succ:  l0800_B4F5 l0800_B4FA
l0800_B4F5:
	ax = ax ^ ax
	SZO = cond(ax)
	C = false
	goto l0800_B6A0
	// succ:  l0800_B6A0
l0800_B4FA:
	ax = di
	di = di - 0x0001
	SZO = cond(di)
	ax = ax | ax
	SZO = cond(ax)
	C = false
	branch Test(NE,Z) l0800_B4D9
	// succ:  l0800_B501 l0800_B4D9
l0800_B501:
	goto l0800_B69D
	// succ:  l0800_B69D
l0800_B504:
	es_bx = Mem0[ss:bp + 0x0004:segptr32]
	SZO = cond(Mem0[es:bx + 0x0002:word16] & 0x0040)
	C = false
	branch Test(NE,Z) l0800_B512
	// succ:  l0800_B50F l0800_B512
l0800_B50F:
	goto l0800_B625
	// succ:  l0800_B625
l0800_B512:
	SCZO = cond(Mem0[es:bx + 0x0006:word16] - 0x0000)
	branch Test(NE,Z) l0800_B51C
	// succ:  l0800_B519 l0800_B51C
l0800_B519:
	goto l0800_B5DB
	// succ:  l0800_B5DB
l0800_B51C:
	SCZO = cond(Mem0[es:bx + 0x0006:word16] - di)
	branch Test(UGE,C) l0800_B583
	// succ:  l0800_B522 l0800_B583
l0800_B522:
	SCZO = cond(Mem0[es:bx:word16] - 0x0000)
	branch Test(EQ,Z) l0800_B535
	// succ:  l0800_B528 l0800_B535
l0800_B528:
	v28 = Mem0[ss:bp + 0x0006:word16]
	sp = sp - 2
	Mem0[ss:sp:word16] = v28
	sp = sp - 2
	Mem0[ss:sp:word16] = bx
	call fn0800_A6B7 (retsize: 2;)
	cx = Mem0[ss:sp:word16]
	sp = sp + 2
	cx = Mem0[ss:sp:word16]
	sp = sp + 2
	ax = ax | ax
	SZO = cond(ax)
	C = false
	branch Test(NE,Z) l0800_B4F5
	// succ:  l0800_B535 l0800_B4F5
l0800_B535:
	es_bx = Mem0[ss:bp + 0x0004:segptr32]
	al = Mem0[es:bx + 0x0004:byte]
	ax = (int16) al
	ax = ax << 0x0001
	SCZO = cond(ax)
	bx = ax
	SZO = cond(Mem0[ds:bx + 0x24EA:word16] & 0x0800)
	C = false
	branch Test(EQ,Z) l0800_B560
	// succ:  l0800_B549 l0800_B560
l0800_B549:
	ax = 0x0002
	sp = sp - 2
	Mem0[ss:sp:word16] = ax
	ax = ax ^ ax
	SZO = cond(ax)
	C = false
	sp = sp - 2
	Mem0[ss:sp:word16] = ax
	sp = sp - 2
	Mem0[ss:sp:word16] = ax
	bx = Mem0[ss:bp + 0x0004:word16]
	al = Mem0[es:bx + 0x0004:byte]
	ax = (int16) al
	sp = sp - 2
	Mem0[ss:sp:word16] = ax
	call fn0800_8E29 (retsize: 2;)
	sp = sp + 0x0008
	SCZO = cond(sp)
	// succ:  l0800_B560
l0800_B560:
	sp = sp - 2
	Mem0[ss:sp:word16] = di
	v32 = Mem0[ss:bp + 0x000C:word16]
	sp = sp - 2
	Mem0[ss:sp:word16] = v32
	v33 = Mem0[ss:bp + 0x000A:word16]
	sp = sp - 2
	Mem0[ss:sp:word16] = v33
	es_bx = Mem0[ss:bp + 0x0004:segptr32]
	al = Mem0[es:bx + 0x0004:byte]
	ax = (int16) al
	sp = sp - 2
	Mem0[ss:sp:word16] = ax
	call fn0800_C779 (retsize: 2;)
	sp = sp + 0x0008
	SCZO = cond(sp)
	SCZO = cond(ax - di)
	branch Test(ULT,C) l0800_B57D
	// succ:  l0800_B57A l0800_B57D
l0800_B57A:
	goto l0800_B69D
	// succ:  l0800_B69D
l0800_B57D:
	goto l0800_B4F5
	// succ:  l0800_B4F5
l0800_B583:
	es_bx = Mem0[ss:bp + 0x0004:segptr32]
	ax = Mem0[es:bx:word16]
	ax = ax + di
	SCZO = cond(ax)
	branch Test(LT,SO) l0800_B5B1
	// succ:  l0800_B58D l0800_B5B1
l0800_B58D:
	SCZO = cond(Mem0[es:bx:word16] - 0x0000)
	branch Test(NE,Z) l0800_B59F
	// succ:  l0800_B593 l0800_B59F
l0800_B593:
	ax = 0xFFFF
	ax = ax - Mem0[es:bx + 0x0006:word16]
	SCZO = cond(ax)
	Mem0[es:bx:word16] = ax
	goto l0800_B5B1
	// succ:  l0800_B5B1
l0800_B59F:
	v39 = Mem0[ss:bp + 0x0006:word16]
	sp = sp - 2
	Mem0[ss:sp:word16] = v39
	v40 = Mem0[ss:bp + 0x0004:word16]
	sp = sp - 2
	Mem0[ss:sp:word16] = v40
	call fn0800_A6B7 (retsize: 2;)
	cx = Mem0[ss:sp:word16]
	sp = sp + 2
	cx = Mem0[ss:sp:word16]
	sp = sp + 2
	ax = ax | ax
	SZO = cond(ax)
	C = false
	branch Test(EQ,Z) l0800_B5B1
	// succ:  l0800_B5AE l0800_B5B1
l0800_B5AE:
	goto l0800_B4F5
	// succ:  l0800_B4F5
l0800_B5B1:
	sp = sp - 2
	Mem0[ss:sp:word16] = di
	v34 = Mem0[ss:bp + 0x000C:word16]
	sp = sp - 2
	Mem0[ss:sp:word16] = v34
	v35 = Mem0[ss:bp + 0x000A:word16]
	sp = sp - 2
	Mem0[ss:sp:word16] = v35
	es_bx = Mem0[ss:bp + 0x0004:segptr32]
	v36 = Mem0[es:bx + 0x000E:word16]
	sp = sp - 2
	Mem0[ss:sp:word16] = v36
	v37 = Mem0[es:bx + 0x000C:word16]
	sp = sp - 2
	Mem0[ss:sp:word16] = v37
	call fn0800_B03B (retsize: 2;)
	sp = sp + 0x000A
	SCZO = cond(sp)
	es_bx = Mem0[ss:bp + 0x0004:segptr32]
	ax = Mem0[es:bx:word16]
	ax = ax + di
	SCZO = cond(ax)
	Mem0[es:bx:word16] = ax
	v38 = Mem0[es:bx + 0x000C:word16] + di
	Mem0[es:bx + 0x000C:word16] = v38
	SCZO = cond(v38)
	goto l0800_B69D
	// succ:  l0800_B69D
l0800_B5DB:
	es_bx = Mem0[ss:bp + 0x0004:segptr32]
	al = Mem0[es:bx + 0x0004:byte]
	ax = (int16) al
	ax = ax << 0x0001
	SCZO = cond(ax)
	bx = ax
	SZO = cond(Mem0[ds:bx + 0x24EA:word16] & 0x0800)
	C = false
	branch Test(EQ,Z) l0800_B606
	// succ:  l0800_B5EF l0800_B606
l0800_B5EF:
	ax = 0x0002
	sp = sp - 2
	Mem0[ss:sp:word16] = ax
	ax = ax ^ ax
	SZO = cond(ax)
	C = false
	sp = sp - 2
	Mem0[ss:sp:word16] = ax
	sp = sp - 2
	Mem0[ss:sp:word16] = ax
	bx = Mem0[ss:bp + 0x0004:word16]
	al = Mem0[es:bx + 0x0004:byte]
	ax = (int16) al
	sp = sp - 2
	Mem0[ss:sp:word16] = ax
	call fn0800_8E29 (retsize: 2;)
	sp = sp + 0x0008
	SCZO = cond(sp)
	// succ:  l0800_B606
l0800_B606:
	sp = sp - 2
	Mem0[ss:sp:word16] = di
	v30 = Mem0[ss:bp + 0x000C:word16]
	sp = sp - 2
	Mem0[ss:sp:word16] = v30
	v31 = Mem0[ss:bp + 0x000A:word16]
	sp = sp - 2
	Mem0[ss:sp:word16] = v31
	es_bx = Mem0[ss:bp + 0x0004:segptr32]
	al = Mem0[es:bx + 0x0004:byte]
	ax = (int16) al
	sp = sp - 2
	Mem0[ss:sp:word16] = ax
	call fn0800_C779 (retsize: 2;)
	sp = sp + 0x0008
	SCZO = cond(sp)
	SCZO = cond(ax - di)
	branch Test(UGE,C) l0800_B69D
	// succ:  l0800_B620 l0800_B69D
l0800_B620:
	goto l0800_B4F5
	// succ:  l0800_B4F5
l0800_B625:
	es_bx = Mem0[ss:bp + 0x0004:segptr32]
	SCZO = cond(Mem0[es:bx + 0x0006:word16] - 0x0000)
	branch Test(EQ,Z) l0800_B680
	// succ:  l0800_B62F l0800_B680
l0800_B62F:
	goto l0800_B677
	// succ:  l0800_B677
l0800_B631:
	es_bx = Mem0[ss:bp + 0x0004:segptr32]
	v19 = Mem0[es:bx:word16] + 0x0001
	Mem0[es:bx:word16] = v19
	SZO = cond(v19)
	branch Test(GE,SO) l0800_B659
	// succ:  l0800_B639 l0800_B659
l0800_B639:
	ax = Mem0[es:bx + 0x000E:word16]
	si = Mem0[es:bx + 0x000C:word16]
	v21 = Mem0[es:bx + 0x000C:word16] + 0x0001
	Mem0[es:bx + 0x000C:word16] = v21
	SZO = cond(v21)
	es_bx = Mem0[ss:bp + 0x000A:segptr32]
	v22 = Mem0[ss:bp + 0x000A:word16] + 0x0001
	Mem0[ss:bp + 0x000A:word16] = v22
	SZO = cond(v22)
	dl = Mem0[es:bx:byte]
	es = ax
	Mem0[es:si:byte] = dl
	al = dl
	ah = 0x00
	goto l0800_B66F
	// succ:  l0800_B66F
l0800_B659:
	v41 = Mem0[ss:bp + 0x0006:word16]
	sp = sp - 2
	Mem0[ss:sp:word16] = v41
	v42 = Mem0[ss:bp + 0x0004:word16]
	sp = sp - 2
	Mem0[ss:sp:word16] = v42
	es_bx = Mem0[ss:bp + 0x000A:segptr32]
	v43 = Mem0[ss:bp + 0x000A:word16] + 0x0001
	Mem0[ss:bp + 0x000A:word16] = v43
	SZO = cond(v43)
	al = Mem0[es:bx:byte]
	sp = sp - 2
	Mem0[ss:sp:word16] = ax
	call fn0800_B30A (retsize: 2;)
	sp = sp + 0x0006
	SCZO = cond(sp)
	// succ:  l0800_B66F
l0800_B66F:
	SCZO = cond(ax - 0xFFFF)
	branch Test(NE,Z) l0800_B677
	// succ:  l0800_B674 l0800_B677
l0800_B674:
	goto l0800_B4F5
	// succ:  l0800_B4F5
l0800_B677:
	ax = di
	di = di - 0x0001
	SZO = cond(di)
	ax = ax | ax
	SZO = cond(ax)
	C = false
	branch Test(NE,Z) l0800_B631
	// succ:  l0800_B67E l0800_B631
l0800_B67E:
	goto l0800_B69D
	// succ:  l0800_B69D
l0800_B680:
	sp = sp - 2
	Mem0[ss:sp:word16] = di
	v25 = Mem0[ss:bp + 0x000C:word16]
	sp = sp - 2
	Mem0[ss:sp:word16] = v25
	v26 = Mem0[ss:bp + 0x000A:word16]
	sp = sp - 2
	Mem0[ss:sp:word16] = v26
	es_bx = Mem0[ss:bp + 0x0004:segptr32]
	al = Mem0[es:bx + 0x0004:byte]
	ax = (int16) al
	sp = sp - 2
	Mem0[ss:sp:word16] = ax
	call fn0800_C632 (retsize: 2;)
	sp = sp + 0x0008
	SCZO = cond(sp)
	SCZO = cond(ax - di)
	branch Test(UGE,C) l0800_B69D
	// succ:  l0800_B69A l0800_B69D
l0800_B69A:
	goto l0800_B4F5
	// succ:  l0800_B4F5
l0800_B69D:
	ax = Mem0[ss:bp - 0x0002:word16]
	// succ:  l0800_B6A0
l0800_B6A0:
	di = Mem0[ss:sp:word16]
	sp = sp + 2
	si = Mem0[ss:sp:word16]
	sp = sp + 2
	sp = bp
	bp = Mem0[ss:sp:word16]
	sp = sp + 2
	return
	// succ:  fn0800_B4BE_exit
fn0800_B4BE_exit:


// fn0800_B6A8
// Return size: 2
define fn0800_B6A8
fn0800_B6A8_entry:
	// succ:  l0800_B6A8
l0800_B6A8:
	sp = fp
	Top = 0
	sp = sp - 2
	Mem0[ss:sp:word16] = bp
	bp = sp
	sp = sp - 2
	Mem0[ss:sp:word16] = si
	sp = sp - 2
	Mem0[ss:sp:word16] = di
	sp = sp - 2
	Mem0[ss:sp:word16] = ds
	D = false
	cx = Mem0[ds:0x4EE8:word16]
	es_di = Mem0[ss:bp + 0x0004:segptr32]
	ds_si = Mem0[ss:bp + 0x0008:segptr32]
	cx = cx >>u 0x0001
	SCZO = cond(cx)
	branch Test(UGE,C) l0800_B6C6
	// succ:  l0800_B6BD l0800_B6C6
l0800_B6BD:
	al = Mem0[es:di:byte]
	v16 = Mem0[ds:si:byte]
	Mem0[es:di:byte] = v16
	si = si + 0x0001
	di = di + 0x0001
	Mem0[ds:si - 0x0001:byte] = al
	branch Test(EQ,Z) l0800_B6CF
	// succ:  l0800_B6C6 l0800_B6CF
l0800_B6C6:
	ax = Mem0[es:di:word16]
	v19 = Mem0[ds:si:word16]
	Mem0[es:di:word16] = v19
	si = si + 0x0002
	di = di + 0x0002
	Mem0[ds:si - 0x0002:word16] = ax
	cx = cx - 0x0001
	branch cx != 0x0000 l0800_B6C6
	// succ:  l0800_B6CF l0800_B6C6
l0800_B6CF:
	ds = Mem0[ss:sp:selector]
	sp = sp + 2
	di = Mem0[ss:sp:word16]
	sp = sp + 2
	si = Mem0[ss:sp:word16]
	sp = sp + 2
	bp = Mem0[ss:sp:word16]
	sp = sp + 2
	return
	// succ:  fn0800_B6A8_exit
fn0800_B6A8_exit:


// fn0800_B6D6
// Return size: 2
define fn0800_B6D6
fn0800_B6D6_entry:
	// succ:  l0800_B6D6
l0800_B6D6:
	sp = fp
	Top = 0
	sp = sp - 2
	Mem0[ss:sp:word16] = bp
	bp = sp
	sp = sp - 0x0014
	SCZO = cond(sp)
	sp = sp - 2
	Mem0[ss:sp:word16] = si
	sp = sp - 2
	Mem0[ss:sp:word16] = di
	si = Mem0[ss:bp + 0x0004:word16]
	// succ:  l0800_B6E1
l0800_B6E1:
	SCZO = cond(si - 0x0002)
	branch Test(UGT,CZ) l0800_B726
	// succ:  l0800_B6E6 l0800_B726
l0800_B6E6:
	SCZO = cond(si - 0x0002)
	branch Test(EQ,Z) l0800_B6EE
	// succ:  l0800_B6EB l0800_B6EE
l0800_B6EB:
	goto l0800_B956
	// succ:  l0800_B956
l0800_B6EE:
	ax = Mem0[ss:bp + 0x0008:word16]
	dx = Mem0[ss:bp + 0x0006:word16]
	dx = dx + Mem0[ds:0x4EE8:word16]
	SCZO = cond(dx)
	Mem0[ss:bp - 0x0006:word16] = ax
	Mem0[ss:bp - 0x0008:word16] = dx
	sp = sp - 2
	Mem0[ss:sp:word16] = ax
	sp = sp - 2
	Mem0[ss:sp:word16] = dx
	v32 = Mem0[ss:bp + 0x0008:word16]
	sp = sp - 2
	Mem0[ss:sp:word16] = v32
	v33 = Mem0[ss:bp + 0x0006:word16]
	sp = sp - 2
	Mem0[ss:sp:word16] = v33
	call SEQ(0x0800, Mem0[ds:0x4EEA:word16]) (retsize: 2;)
	sp = sp + 0x0008
	SCZO = cond(sp)
	ax = ax | ax
	SZO = cond(ax)
	C = false
	branch Test(GT,SZO) l0800_B714
	// succ:  l0800_B711 l0800_B714
l0800_B711:
	goto l0800_B956
	// succ:  l0800_B956
l0800_B714:
	v42 = Mem0[ss:bp + 0x0008:word16]
	sp = sp - 2
	Mem0[ss:sp:word16] = v42
	v43 = Mem0[ss:bp + 0x0006:word16]
	sp = sp - 2
	Mem0[ss:sp:word16] = v43
	v44 = Mem0[ss:bp - 0x0006:word16]
	sp = sp - 2
	Mem0[ss:sp:word16] = v44
	v45 = Mem0[ss:bp - 0x0008:word16]
	sp = sp - 2
	Mem0[ss:sp:word16] = v45
	// succ:  l0800_B720
l0800_B720:
	call fn0800_B6A8 (retsize: 2;)
	sp = sp + 0x0008
	goto l0800_B956
	// succ:  l0800_B956
l0800_B726:
	ax = si
	ax = ax - 0x0001
	SZO = cond(ax)
	dx_ax = Mem0[ds:0x4EE8:word16] *s ax
	SCZO = cond(dx_ax)
	dx = Mem0[ss:bp + 0x0008:word16]
	bx = Mem0[ss:bp + 0x0006:word16]
	bx = bx + ax
	SCZO = cond(bx)
	Mem0[ss:bp - 0x0006:word16] = dx
	Mem0[ss:bp - 0x0008:word16] = bx
	ax = si
	ax = ax >>u 0x0001
	SCZO = cond(ax)
	dx_ax = Mem0[ds:0x4EE8:word16] *s ax
	SCZO = cond(dx_ax)
	dx = Mem0[ss:bp + 0x0008:word16]
	bx = Mem0[ss:bp + 0x0006:word16]
	bx = bx + ax
	SCZO = cond(bx)
	Mem0[ss:bp - 0x0002:word16] = dx
	Mem0[ss:bp - 0x0004:word16] = bx
	v16 = Mem0[ss:bp - 0x0006:word16]
	sp = sp - 2
	Mem0[ss:sp:word16] = v16
	v17 = Mem0[ss:bp - 0x0008:word16]
	sp = sp - 2
	Mem0[ss:sp:word16] = v17
	v18 = Mem0[ss:bp - 0x0002:word16]
	sp = sp - 2
	Mem0[ss:sp:word16] = v18
	sp = sp - 2
	Mem0[ss:sp:word16] = bx
	call SEQ(0x0800, Mem0[ds:0x4EEA:word16]) (retsize: 2;)
	sp = sp + 0x0008
	SCZO = cond(sp)
	ax = ax | ax
	SZO = cond(ax)
	C = false
	branch Test(LE,SZO) l0800_B775
	// succ:  l0800_B766 l0800_B775
l0800_B766:
	v20 = Mem0[ss:bp - 0x0002:word16]
	sp = sp - 2
	Mem0[ss:sp:word16] = v20
	v21 = Mem0[ss:bp - 0x0004:word16]
	sp = sp - 2
	Mem0[ss:sp:word16] = v21
	v22 = Mem0[ss:bp - 0x0006:word16]
	sp = sp - 2
	Mem0[ss:sp:word16] = v22
	v23 = Mem0[ss:bp - 0x0008:word16]
	sp = sp - 2
	Mem0[ss:sp:word16] = v23
	call fn0800_B6A8 (retsize: 2;)
	sp = sp + 0x0008
	// succ:  l0800_B775
l0800_B775:
	v24 = Mem0[ss:bp + 0x0008:word16]
	sp = sp - 2
	Mem0[ss:sp:word16] = v24
	v25 = Mem0[ss:bp + 0x0006:word16]
	sp = sp - 2
	Mem0[ss:sp:word16] = v25
	v26 = Mem0[ss:bp - 0x0002:word16]
	sp = sp - 2
	Mem0[ss:sp:word16] = v26
	v27 = Mem0[ss:bp - 0x0004:word16]
	sp = sp - 2
	Mem0[ss:sp:word16] = v27
	call SEQ(0x0800, Mem0[ds:0x4EEA:word16]) (retsize: 2;)
	sp = sp + 0x0008
	SCZO = cond(sp)
	ax = ax | ax
	SZO = cond(ax)
	C = false
	branch Test(LE,SZO) l0800_B79A
	// succ:  l0800_B78C l0800_B79A
l0800_B78C:
	v28 = Mem0[ss:bp - 0x0002:word16]
	sp = sp - 2
	Mem0[ss:sp:word16] = v28
	v29 = Mem0[ss:bp - 0x0004:word16]
	sp = sp - 2
	Mem0[ss:sp:word16] = v29
	v30 = Mem0[ss:bp + 0x0008:word16]
	sp = sp - 2
	Mem0[ss:sp:word16] = v30
	v31 = Mem0[ss:bp + 0x0006:word16]
	sp = sp - 2
	Mem0[ss:sp:word16] = v31
	goto l0800_B7BD
	// succ:  l0800_B7BD
l0800_B79A:
	v34 = Mem0[ss:bp - 0x0006:word16]
	sp = sp - 2
	Mem0[ss:sp:word16] = v34
	v35 = Mem0[ss:bp - 0x0008:word16]
	sp = sp - 2
	Mem0[ss:sp:word16] = v35
	v36 = Mem0[ss:bp + 0x0008:word16]
	sp = sp - 2
	Mem0[ss:sp:word16] = v36
	v37 = Mem0[ss:bp + 0x0006:word16]
	sp = sp - 2
	Mem0[ss:sp:word16] = v37
	call SEQ(0x0800, Mem0[ds:0x4EEA:word16]) (retsize: 2;)
	sp = sp + 0x0008
	SCZO = cond(sp)
	ax = ax | ax
	SZO = cond(ax)
	C = false
	branch Test(LE,SZO) l0800_B7C0
	// succ:  l0800_B7B1 l0800_B7C0
l0800_B7B1:
	v38 = Mem0[ss:bp + 0x0008:word16]
	sp = sp - 2
	Mem0[ss:sp:word16] = v38
	v39 = Mem0[ss:bp + 0x0006:word16]
	sp = sp - 2
	Mem0[ss:sp:word16] = v39
	v40 = Mem0[ss:bp - 0x0006:word16]
	sp = sp - 2
	Mem0[ss:sp:word16] = v40
	v41 = Mem0[ss:bp - 0x0008:word16]
	sp = sp - 2
	Mem0[ss:sp:word16] = v41
	// succ:  l0800_B7BD
l0800_B7BD:
	call fn0800_B6A8 (retsize: 2;)
	sp = sp + 0x0008
	// succ:  l0800_B7C0
l0800_B7C0:
	SCZO = cond(si - 0x0003)
	branch Test(NE,Z) l0800_B7D4
	// succ:  l0800_B7C5 l0800_B7D4
l0800_B7C5:
	v46 = Mem0[ss:bp + 0x0008:word16]
	sp = sp - 2
	Mem0[ss:sp:word16] = v46
	v47 = Mem0[ss:bp + 0x0006:word16]
	sp = sp - 2
	Mem0[ss:sp:word16] = v47
	v48 = Mem0[ss:bp - 0x0002:word16]
	sp = sp - 2
	Mem0[ss:sp:word16] = v48
	v49 = Mem0[ss:bp - 0x0004:word16]
	sp = sp - 2
	Mem0[ss:sp:word16] = v49
	goto l0800_B720
	// succ:  l0800_B720
l0800_B7D4:
	ax = Mem0[ss:bp + 0x0008:word16]
	dx = Mem0[ss:bp + 0x0006:word16]
	dx = dx + Mem0[ds:0x4EE8:word16]
	SCZO = cond(dx)
	Mem0[ss:bp - 0x000A:word16] = ax
	Mem0[ss:bp - 0x000C:word16] = dx
	Mem0[ss:bp - 0x0002:word16] = ax
	Mem0[ss:bp - 0x0004:word16] = dx
	goto l0800_B813
	// succ:  l0800_B813
l0800_B7EC:
	di = di | di
	SZO = cond(di)
	C = false
	branch Test(NE,Z) l0800_B805
	// succ:  l0800_B7F0 l0800_B805
l0800_B7F0:
	v60 = Mem0[ss:bp - 0x0002:word16]
	sp = sp - 2
	Mem0[ss:sp:word16] = v60
	v61 = Mem0[ss:bp - 0x0004:word16]
	sp = sp - 2
	Mem0[ss:sp:word16] = v61
	v62 = Mem0[ss:bp - 0x000A:word16]
	sp = sp - 2
	Mem0[ss:sp:word16] = v62
	v63 = Mem0[ss:bp - 0x000C:word16]
	sp = sp - 2
	Mem0[ss:sp:word16] = v63
	call fn0800_B6A8 (retsize: 2;)
	sp = sp + 0x0008
	ax = Mem0[ds:0x4EE8:word16]
	v64 = Mem0[ss:bp - 0x000C:word16] + ax
	Mem0[ss:bp - 0x000C:word16] = v64
	SCZO = cond(v64)
	// succ:  l0800_B805
l0800_B805:
	ax = Mem0[ss:bp - 0x0004:word16]
	SCZO = cond(ax - Mem0[ss:bp - 0x0008:word16])
	branch Test(UGE,C) l0800_B883
	// succ:  l0800_B80D l0800_B883
l0800_B80D:
	ax = Mem0[ds:0x4EE8:word16]
	v69 = Mem0[ss:bp - 0x0004:word16] + ax
	Mem0[ss:bp - 0x0004:word16] = v69
	SCZO = cond(v69)
	// succ:  l0800_B813
l0800_B813:
	v50 = Mem0[ss:bp + 0x0008:word16]
	sp = sp - 2
	Mem0[ss:sp:word16] = v50
	v51 = Mem0[ss:bp + 0x0006:word16]
	sp = sp - 2
	Mem0[ss:sp:word16] = v51
	v52 = Mem0[ss:bp - 0x0002:word16]
	sp = sp - 2
	Mem0[ss:sp:word16] = v52
	v53 = Mem0[ss:bp - 0x0004:word16]
	sp = sp - 2
	Mem0[ss:sp:word16] = v53
	call SEQ(0x0800, Mem0[ds:0x4EEA:word16]) (retsize: 2;)
	sp = sp + 0x0008
	SCZO = cond(sp)
	di = ax
	ax = ax | ax
	SZO = cond(ax)
	C = false
	branch Test(LE,SZO) l0800_B7EC
	// succ:  l0800_B82C l0800_B7EC
l0800_B82C:
	ax = Mem0[ss:bp - 0x0004:word16]
	SCZO = cond(ax - Mem0[ss:bp - 0x0008:word16])
	branch Test(UGE,C) l0800_B87B
	// succ:  l0800_B834 l0800_B87B
l0800_B834:
	v54 = Mem0[ss:bp - 0x0006:word16]
	sp = sp - 2
	Mem0[ss:sp:word16] = v54
	v55 = Mem0[ss:bp - 0x0008:word16]
	sp = sp - 2
	Mem0[ss:sp:word16] = v55
	v56 = Mem0[ss:bp + 0x0008:word16]
	sp = sp - 2
	Mem0[ss:sp:word16] = v56
	v57 = Mem0[ss:bp + 0x0006:word16]
	sp = sp - 2
	Mem0[ss:sp:word16] = v57
	call SEQ(0x0800, Mem0[ds:0x4EEA:word16]) (retsize: 2;)
	sp = sp + 0x0008
	SCZO = cond(sp)
	di = ax
	ax = ax | ax
	SZO = cond(ax)
	C = false
	branch Test(GE,SO) l0800_B855
	// succ:  l0800_B84D l0800_B855
l0800_B84D:
	ax = Mem0[ds:0x4EE8:word16]
	v59 = Mem0[ss:bp - 0x0008:word16] - ax
	Mem0[ss:bp - 0x0008:word16] = v59
	SCZO = cond(v59)
	goto l0800_B873
	// succ:  l0800_B873
l0800_B855:
	v70 = Mem0[ss:bp - 0x0002:word16]
	sp = sp - 2
	Mem0[ss:sp:word16] = v70
	v71 = Mem0[ss:bp - 0x0004:word16]
	sp = sp - 2
	Mem0[ss:sp:word16] = v71
	v72 = Mem0[ss:bp - 0x0006:word16]
	sp = sp - 2
	Mem0[ss:sp:word16] = v72
	v73 = Mem0[ss:bp - 0x0008:word16]
	sp = sp - 2
	Mem0[ss:sp:word16] = v73
	call fn0800_B6A8 (retsize: 2;)
	sp = sp + 0x0008
	di = di | di
	SZO = cond(di)
	C = false
	branch Test(EQ,Z) l0800_B87B
	// succ:  l0800_B868 l0800_B87B
l0800_B868:
	ax = Mem0[ds:0x4EE8:word16]
	v74 = Mem0[ss:bp - 0x0004:word16] + ax
	Mem0[ss:bp - 0x0004:word16] = v74
	SCZO = cond(v74)
	v75 = Mem0[ss:bp - 0x0008:word16] - ax
	Mem0[ss:bp - 0x0008:word16] = v75
	SCZO = cond(v75)
	goto l0800_B87B
	// succ:  l0800_B87B
l0800_B873:
	ax = Mem0[ss:bp - 0x0004:word16]
	SCZO = cond(ax - Mem0[ss:bp - 0x0008:word16])
	branch Test(ULT,C) l0800_B834
	// succ:  l0800_B87B l0800_B834
l0800_B87B:
	ax = Mem0[ss:bp - 0x0004:word16]
	SCZO = cond(ax - Mem0[ss:bp - 0x0008:word16])
	branch Test(ULT,C) l0800_B813
	// succ:  l0800_B883 l0800_B813
l0800_B883:
	v65 = Mem0[ss:bp + 0x0008:word16]
	sp = sp - 2
	Mem0[ss:sp:word16] = v65
	v66 = Mem0[ss:bp + 0x0006:word16]
	sp = sp - 2
	Mem0[ss:sp:word16] = v66
	v67 = Mem0[ss:bp - 0x0002:word16]
	sp = sp - 2
	Mem0[ss:sp:word16] = v67
	v68 = Mem0[ss:bp - 0x0004:word16]
	sp = sp - 2
	Mem0[ss:sp:word16] = v68
	call SEQ(0x0800, Mem0[ds:0x4EEA:word16]) (retsize: 2;)
	sp = sp + 0x0008
	SCZO = cond(sp)
	ax = ax | ax
	SZO = cond(ax)
	C = false
	branch Test(GT,SZO) l0800_B8AA
	// succ:  l0800_B89A l0800_B8AA
l0800_B89A:
	ax = Mem0[ss:bp - 0x0002:word16]
	dx = Mem0[ss:bp - 0x0004:word16]
	dx = dx + Mem0[ds:0x4EE8:word16]
	SCZO = cond(dx)
	Mem0[ss:bp - 0x0002:word16] = ax
	Mem0[ss:bp - 0x0004:word16] = dx
	// succ:  l0800_B8AA
l0800_B8AA:
	ax = Mem0[ss:bp - 0x0002:word16]
	dx = Mem0[ss:bp - 0x0004:word16]
	dx = dx - Mem0[ds:0x4EE8:word16]
	SCZO = cond(dx)
	Mem0[ss:bp - 0x0012:word16] = ax
	Mem0[ss:bp - 0x0014:word16] = dx
	ax = Mem0[ss:bp + 0x0008:word16]
	dx = Mem0[ss:bp + 0x0006:word16]
	Mem0[ss:bp - 0x000E:word16] = ax
	Mem0[ss:bp - 0x0010:word16] = dx
	goto l0800_B8E0
	// succ:  l0800_B8E0
l0800_B8C8:
	v82 = Mem0[ss:bp - 0x000E:word16]
	sp = sp - 2
	Mem0[ss:sp:word16] = v82
	v83 = Mem0[ss:bp - 0x0010:word16]
	sp = sp - 2
	Mem0[ss:sp:word16] = v83
	v84 = Mem0[ss:bp - 0x0012:word16]
	sp = sp - 2
	Mem0[ss:sp:word16] = v84
	v85 = Mem0[ss:bp - 0x0014:word16]
	sp = sp - 2
	Mem0[ss:sp:word16] = v85
	call fn0800_B6A8 (retsize: 2;)
	sp = sp + 0x0008
	ax = Mem0[ds:0x4EE8:word16]
	v86 = Mem0[ss:bp - 0x0010:word16] + ax
	Mem0[ss:bp - 0x0010:word16] = v86
	SCZO = cond(v86)
	v87 = Mem0[ss:bp - 0x0014:word16] - ax
	Mem0[ss:bp - 0x0014:word16] = v87
	SCZO = cond(v87)
	// succ:  l0800_B8E0
l0800_B8E0:
	ax = Mem0[ss:bp - 0x0010:word16]
	SCZO = cond(ax - Mem0[ss:bp - 0x000C:word16])
	branch Test(UGE,C) l0800_B8F0
	// succ:  l0800_B8E8 l0800_B8F0
l0800_B8E8:
	ax = Mem0[ss:bp - 0x0014:word16]
	SCZO = cond(ax - Mem0[ss:bp - 0x000C:word16])
	branch Test(UGE,C) l0800_B8C8
	// succ:  l0800_B8F0 l0800_B8C8
l0800_B8F0:
	ax = ax ^ ax
	SZO = cond(ax)
	C = false
	sp = sp - 2
	Mem0[ss:sp:word16] = ax
	v76 = Mem0[ds:0x4EE8:word16]
	sp = sp - 2
	Mem0[ss:sp:word16] = v76
	ax = Mem0[ss:bp - 0x0004:word16]
	dx = dx ^ dx
	SZO = cond(dx)
	C = false
	ax = ax - Mem0[ss:bp - 0x000C:word16]
	SCZO = cond(ax)
	dx = dx - 0x00 - C
	SCZO = cond(dx)
	sp = sp - 2
	Mem0[ss:sp:word16] = dx
	sp = sp - 2
	Mem0[ss:sp:word16] = ax
	call fn0800_8BBB (retsize: 2;)
	di = ax
	ax = ax ^ ax
	SZO = cond(ax)
	C = false
	sp = sp - 2
	Mem0[ss:sp:word16] = ax
	v77 = Mem0[ds:0x4EE8:word16]
	sp = sp - 2
	Mem0[ss:sp:word16] = v77
	ax = si
	dx_ax = Mem0[ds:0x4EE8:word16] *s ax
	SCZO = cond(dx_ax)
	dx = Mem0[ss:bp + 0x0006:word16]
	dx = dx + ax
	SCZO = cond(dx)
	ax = ax ^ ax
	SZO = cond(ax)
	C = false
	dx = dx - Mem0[ss:bp - 0x0004:word16]
	SCZO = cond(dx)
	ax = ax - 0x0000 - C
	SCZO = cond(ax)
	sp = sp - 2
	Mem0[ss:sp:word16] = ax
	sp = sp - 2
	Mem0[ss:sp:word16] = dx
	call fn0800_8BBB (retsize: 2;)
	si = ax
	SCZO = cond(si - di)
	branch Test(UGE,C) l0800_B93D
	// succ:  l0800_B92E l0800_B93D
l0800_B92E:
	v78 = Mem0[ss:bp - 0x0002:word16]
	sp = sp - 2
	Mem0[ss:sp:word16] = v78
	v79 = Mem0[ss:bp - 0x0004:word16]
	sp = sp - 2
	Mem0[ss:sp:word16] = v79
	sp = sp - 2
	Mem0[ss:sp:word16] = ax
	call fn0800_B6D6 (retsize: 2;)
	sp = sp + 0x0006
	si = di
	goto l0800_B6E1
	// succ:  l0800_B6E1
l0800_B93D:
	v80 = Mem0[ss:bp + 0x0008:word16]
	sp = sp - 2
	Mem0[ss:sp:word16] = v80
	v81 = Mem0[ss:bp + 0x0006:word16]
	sp = sp - 2
	Mem0[ss:sp:word16] = v81
	sp = sp - 2
	Mem0[ss:sp:word16] = di
	call fn0800_B6D6 (retsize: 2;)
	sp = sp + 0x0006
	ax = Mem0[ss:bp - 0x0002:word16]
	dx = Mem0[ss:bp - 0x0004:word16]
	Mem0[ss:bp + 0x0008:word16] = ax
	Mem0[ss:bp + 0x0006:word16] = dx
	goto l0800_B6E1
	// succ:  l0800_B6E1
l0800_B956:
	di = Mem0[ss:sp:word16]
	sp = sp + 2
	si = Mem0[ss:sp:word16]
	sp = sp + 2
	sp = bp
	bp = Mem0[ss:sp:word16]
	sp = sp + 2
	return
	// succ:  fn0800_B6D6_exit
fn0800_B6D6_exit:


// fn0800_B95E
// Return size: 2
define fn0800_B95E
fn0800_B95E_entry:
	// succ:  l0800_B95E
l0800_B95E:
	sp = fp
	Top = 0
	sp = sp - 2
	Mem0[ss:sp:word16] = bp
	bp = sp
	ax = Mem0[ss:bp + 0x000A:word16]
	Mem0[ds:0x4EE8:word16] = ax
	ax = ax | ax
	SZO = cond(ax)
	C = false
	branch Test(EQ,Z) l0800_B97D
	// succ:  l0800_B96B l0800_B97D
l0800_B96B:
	ax = Mem0[ss:bp + 0x000C:word16]
	Mem0[ds:0x4EEA:word16] = ax
	v10 = Mem0[ss:bp + 0x0006:word16]
	sp = sp - 2
	Mem0[ss:sp:word16] = v10
	v11 = Mem0[ss:bp + 0x0004:word16]
	sp = sp - 2
	Mem0[ss:sp:word16] = v11
	v12 = Mem0[ss:bp + 0x0008:word16]
	sp = sp - 2
	Mem0[ss:sp:word16] = v12
	call fn0800_B6D6 (retsize: 2;)
	sp = sp + 0x0006
	// succ:  l0800_B97D
l0800_B97D:
	bp = Mem0[ss:sp:word16]
	sp = sp + 2
	return
	// succ:  fn0800_B95E_exit
fn0800_B95E_exit:


// fn0800_B97F
// Return size: 2
define fn0800_B97F
fn0800_B97F_entry:
	// succ:  l0800_B97F
l0800_B97F:
	sp = fp
	Top = 0
	sp = sp - 2
	Mem0[ss:sp:word16] = bp
	bp = sp
	sp = sp - 0x0004
	SCZO = cond(sp)
	sp = sp - 2
	Mem0[ss:sp:word16] = si
	sp = sp - 2
	Mem0[ss:sp:word16] = di
	ax = Mem0[ss:bp + 0x0004:word16]
	SCZO = cond(ax - Mem0[ds:0x24E8:word16])
	branch Test(ULT,C) l0800_B99A
	// succ:  l0800_B990 l0800_B99A
l0800_B990:
	ax = 0x0006
	sp = sp - 2
	Mem0[ss:sp:word16] = ax
	call fn0800_8D2B (retsize: 2;)
	sp = sp + 0x0002
	goto l0800_BA44
	// succ:  l0800_BA44
l0800_B99A:
	ax = Mem0[ss:bp + 0x000A:word16]
	ax = ax + 0x0001
	SZO = cond(ax)
	SCZO = cond(ax - 0x0002)
	branch Test(ULT,C) l0800_B9B0
	// succ:  l0800_B9A3 l0800_B9B0
l0800_B9A3:
	bx = Mem0[ss:bp + 0x0004:word16]
	bx = bx << 0x0001
	SCZO = cond(bx)
	SZO = cond(Mem0[ds:bx + 0x24EA:word16] & 0x0200)
	C = false
	branch Test(EQ,Z) l0800_B9B5
	// succ:  l0800_B9B0 l0800_B9B5
l0800_B9B0:
	ax = ax ^ ax
	SZO = cond(ax)
	C = false
	goto l0800_BA44
	// succ:  l0800_BA44
l0800_B9B5:
	v14 = Mem0[ss:bp + 0x000A:word16]
	sp = sp - 2
	Mem0[ss:sp:word16] = v14
	v15 = Mem0[ss:bp + 0x0008:word16]
	sp = sp - 2
	Mem0[ss:sp:word16] = v15
	v16 = Mem0[ss:bp + 0x0006:word16]
	sp = sp - 2
	Mem0[ss:sp:word16] = v16
	v17 = Mem0[ss:bp + 0x0004:word16]
	sp = sp - 2
	Mem0[ss:sp:word16] = v17
	call fn0800_8F50 (retsize: 2;)
	sp = sp + 0x0008
	SCZO = cond(sp)
	Mem0[ss:bp - 0x0002:word16] = ax
	ax = ax + 0x0001
	SZO = cond(ax)
	SCZO = cond(ax - 0x0002)
	branch Test(ULT,C) l0800_B9DD
	// succ:  l0800_B9D0 l0800_B9DD
l0800_B9D0:
	bx = Mem0[ss:bp + 0x0004:word16]
	bx = bx << 0x0001
	SCZO = cond(bx)
	SZO = cond(Mem0[ds:bx + 0x24EA:word16] & 0x4000)
	C = false
	branch Test(NE,Z) l0800_B9E2
	// succ:  l0800_B9DD l0800_B9E2
l0800_B9DD:
	ax = Mem0[ss:bp - 0x0002:word16]
	goto l0800_BA44
	// succ:  l0800_BA44
l0800_B9E2:
	cx = Mem0[ss:bp - 0x0002:word16]
	es_si = Mem0[ss:bp + 0x0006:segptr32]
	di = si
	bx = si
	D = false
	// succ:  l0800_B9ED
l0800_B9ED:
	al = Mem0[ds:si:byte]
	si = si + 0x0001
	SCZO = cond(al - 0x1A)
	branch Test(EQ,Z) l0800_BA21
	// succ:  l0800_B9F3 l0800_BA21
l0800_B9F3:
	SCZO = cond(al - 0x0D)
	branch Test(EQ,Z) l0800_B9FC
	// succ:  l0800_B9F7 l0800_B9FC
l0800_B9F7:
	Mem0[es:di:byte] = al
	di = di + 0x0001
	cx = cx - 0x0001
	branch cx != 0x0000 l0800_B9ED
	// succ:  l0800_B9FA l0800_B9ED
l0800_B9FA:
	goto l0800_BA19
	// succ:  l0800_BA19
l0800_B9FC:
	cx = cx - 0x0001
	branch cx != 0x0000 l0800_B9ED
	// succ:  l0800_B9FE l0800_B9ED
l0800_B9FE:
	sp = sp - 2
	Mem0[ss:sp:word16] = es
	sp = sp - 2
	Mem0[ss:sp:word16] = bx
	ax = 0x0001
	sp = sp - 2
	Mem0[ss:sp:word16] = ax
	ax = bp - 0x0003
	sp = sp - 2
	Mem0[ss:sp:word16] = ss
	sp = sp - 2
	Mem0[ss:sp:word16] = ax
	v26 = Mem0[ss:bp + 0x0004:word16]
	sp = sp - 2
	Mem0[ss:sp:word16] = v26
	call fn0800_8F50 (retsize: 2;)
	sp = sp + 0x0008
	SCZO = cond(sp)
	bx = Mem0[ss:sp:word16]
	sp = sp + 2
	es = Mem0[ss:sp:selector]
	sp = sp + 2
	D = false
	al = Mem0[ss:bp - 0x0003:byte]
	Mem0[es:di:byte] = al
	di = di + 0x0001
	// succ:  l0800_BA19
l0800_BA19:
	SCZO = cond(di - bx)
	branch Test(NE,Z) l0800_BA1F
	// succ:  l0800_BA1D l0800_BA1F
l0800_BA1D:
	goto l0800_B9B5
	// succ:  l0800_B9B5
l0800_BA1F:
	goto l0800_BA41
	// succ:  l0800_BA41
l0800_BA21:
	sp = sp - 2
	Mem0[ss:sp:word16] = bx
	ax = 0x0001
	sp = sp - 2
	Mem0[ss:sp:word16] = ax
	cx = -cx
	SCZO = cond(cx)
	C = cx == 0x0000
	ax = ax - ax - C
	SCZO = cond(ax)
	sp = sp - 2
	Mem0[ss:sp:word16] = ax
	sp = sp - 2
	Mem0[ss:sp:word16] = cx
	v23 = Mem0[ss:bp + 0x0004:word16]
	sp = sp - 2
	Mem0[ss:sp:word16] = v23
	call fn0800_8E29 (retsize: 2;)
	sp = sp + 0x0008
	SCZO = cond(sp)
	bx = Mem0[ss:bp + 0x0004:word16]
	bx = bx << 0x0001
	SCZO = cond(bx)
	v24 = Mem0[ds:bx + 0x24EA:word16] | 0x0200
	Mem0[ds:bx + 0x24EA:word16] = v24
	SZO = cond(Mem0[ds:bx + 0x24EA:word16])
	C = false
	bx = Mem0[ss:sp:word16]
	sp = sp + 2
	// succ:  l0800_BA41
l0800_BA41:
	di = di - bx
	SCZO = cond(di)
	v25 = ax
	ax = di
	di = v25
	// succ:  l0800_BA44
l0800_BA44:
	di = Mem0[ss:sp:word16]
	sp = sp + 2
	si = Mem0[ss:sp:word16]
	sp = sp + 2
	sp = bp
	bp = Mem0[ss:sp:word16]
	sp = sp + 2
	return
	// succ:  fn0800_B97F_exit
fn0800_B97F_exit:


// fn0800_BA4A
// Return size: 2
define fn0800_BA4A
fn0800_BA4A_entry:
	// succ:  l0800_BA4A
l0800_BA4A:
	sp = fp
	Top = 0
	sp = sp - 2
	Mem0[ss:sp:word16] = bp
	bp = sp
	sp = sp - 2
	Mem0[ss:sp:word16] = di
	sp = sp - 2
	Mem0[ss:sp:word16] = ds
	ah = 0x56
	ds_dx = Mem0[ss:bp + 0x0004:segptr32]
	es_di = Mem0[ss:bp + 0x0008:segptr32]
	C = msdos_rename_file(ds_dx, es_di, out ax)
	ds = Mem0[ss:sp:selector]
	sp = sp + 2
	branch Test(ULT,C) l0800_BA60
	// succ:  l0800_BA5C l0800_BA60
l0800_BA5C:
	ax = ax ^ ax
	SZO = cond(ax)
	C = false
	goto l0800_BA64
	// succ:  l0800_BA64
l0800_BA60:
	sp = sp - 2
	Mem0[ss:sp:word16] = ax
	call fn0800_8D2B (retsize: 2;)
	sp = sp + 0x0002
	// succ:  l0800_BA64
l0800_BA64:
	di = Mem0[ss:sp:word16]
	sp = sp + 2
	bp = Mem0[ss:sp:word16]
	sp = sp + 2
	return
	// succ:  fn0800_BA4A_exit
fn0800_BA4A_exit:


// fn0800_BA67
// Return size: 2
define fn0800_BA67
fn0800_BA67_entry:
	// succ:  l0800_BA67
l0800_BA67:
	sp = fp
	Top = 0
	sp = sp - 2
	Mem0[ss:sp:word16] = bp
	bp = sp
	ax = ax ^ ax
	SZO = cond(ax)
	C = false
	sp = sp - 2
	Mem0[ss:sp:word16] = ax
	sp = sp - 2
	Mem0[ss:sp:word16] = ax
	sp = sp - 2
	Mem0[ss:sp:word16] = ax
	v8 = Mem0[ss:bp + 0x0006:word16]
	sp = sp - 2
	Mem0[ss:sp:word16] = v8
	v9 = Mem0[ss:bp + 0x0004:word16]
	sp = sp - 2
	Mem0[ss:sp:word16] = v9
	call fn0800_ACB3 (retsize: 2;)
	sp = sp + 0x000A
	SCZO = cond(sp)
	ax = ax | ax
	SZO = cond(ax)
	C = false
	branch Test(NE,Z) l0800_BA87
	// succ:  l0800_BA7F l0800_BA87
l0800_BA7F:
	es_bx = Mem0[ss:bp + 0x0004:segptr32]
	v15 = Mem0[es:bx + 0x0002:word16] & 0xFFEF
	Mem0[es:bx + 0x0002:word16] = v15
	SZO = cond(Mem0[es:bx + 0x0002:word16])
	C = false
	// succ:  l0800_BA87
l0800_BA87:
	bp = Mem0[ss:sp:word16]
	sp = sp + 2
	return
	// succ:  fn0800_BA67_exit
fn0800_BA67_exit:


// fn0800_BA89
// Return size: 2
define fn0800_BA89
fn0800_BA89_entry:
	// succ:  l0800_BA89
l0800_BA89:
	sp = fp
	Top = 0
	sp = sp - 2
	Mem0[ss:sp:word16] = bp
	bp = sp
	sp = sp - 2
	Mem0[ss:sp:word16] = si
	sp = sp - 2
	Mem0[ss:sp:word16] = di
	di = Mem0[ss:bp + 0x000C:word16]
	si = Mem0[ss:bp + 0x000E:word16]
	es_bx = Mem0[ss:bp + 0x0004:segptr32]
	ax = Mem0[es:bx + 0x0012:word16]
	SCZO = cond(ax - Mem0[ss:bp + 0x0004:word16])
	branch Test(NE,Z) l0800_BAAB
	// succ:  l0800_BAA0 l0800_BAAB
l0800_BAA0:
	SCZO = cond(di - 0x0002)
	branch Test(GT,SZO) l0800_BAAB
	// succ:  l0800_BAA5 l0800_BAAB
l0800_BAA5:
	SCZO = cond(si - 0x7FFF)
	branch Test(ULE,CZ) l0800_BAB1
	// succ:  l0800_BAAB l0800_BAB1
l0800_BAAB:
	ax = 0xFFFF
	goto l0800_BB94
	// succ:  l0800_BB94
l0800_BAB1:
	SCZO = cond(Mem0[ds:0x26B2:word16] - 0x0000)
	branch Test(NE,Z) l0800_BAC7
	// succ:  l0800_BAB8 l0800_BAC7
l0800_BAB8:
	SCZO = cond(Mem0[ss:bp + 0x0004:word16] - 0x236C)
	branch Test(NE,Z) l0800_BAC7
	// succ:  l0800_BABF l0800_BAC7
l0800_BABF:
	Mem0[ds:0x26B2:word16] = 0x0001
	goto l0800_BADB
	// succ:  l0800_BADB
l0800_BAC7:
	SCZO = cond(Mem0[ds:0x26B0:word16] - 0x0000)
	branch Test(NE,Z) l0800_BADB
	// succ:  l0800_BACE l0800_BADB
l0800_BACE:
	SCZO = cond(Mem0[ss:bp + 0x0004:word16] - 0x2358)
	branch Test(NE,Z) l0800_BADB
	// succ:  l0800_BAD5 l0800_BADB
l0800_BAD5:
	Mem0[ds:0x26B0:word16] = 0x0001
	// succ:  l0800_BADB
l0800_BADB:
	es_bx = Mem0[ss:bp + 0x0004:segptr32]
	SCZO = cond(Mem0[es:bx:word16] - 0x0000)
	branch Test(EQ,Z) l0800_BAF6
	// succ:  l0800_BAE4 l0800_BAF6
l0800_BAE4:
	ax = 0x0001
	sp = sp - 2
	Mem0[ss:sp:word16] = ax
	ax = ax ^ ax
	SZO = cond(ax)
	C = false
	sp = sp - 2
	Mem0[ss:sp:word16] = ax
	sp = sp - 2
	Mem0[ss:sp:word16] = ax
	v17 = Mem0[ss:bp + 0x0006:word16]
	sp = sp - 2
	Mem0[ss:sp:word16] = v17
	sp = sp - 2
	Mem0[ss:sp:word16] = bx
	call fn0800_ACB3 (retsize: 2;)
	sp = sp + 0x000A
	SCZO = cond(sp)
	// succ:  l0800_BAF6
l0800_BAF6:
	es_bx = Mem0[ss:bp + 0x0004:segptr32]
	SZO = cond(Mem0[es:bx + 0x0002:word16] & 0x0004)
	C = false
	branch Test(EQ,Z) l0800_BB0E
	// succ:  l0800_BB01 l0800_BB0E
l0800_BB01:
	v18 = Mem0[es:bx + 0x000A:word16]
	sp = sp - 2
	Mem0[ss:sp:word16] = v18
	v19 = Mem0[es:bx + 0x0008:word16]
	sp = sp - 2
	Mem0[ss:sp:word16] = v19
	call fn0800_9E75 (retsize: 2;)
	cx = Mem0[ss:sp:word16]
	sp = sp + 2
	cx = Mem0[ss:sp:word16]
	sp = sp + 2
	// succ:  l0800_BB0E
l0800_BB0E:
	es_bx = Mem0[ss:bp + 0x0004:segptr32]
	v21 = Mem0[es:bx + 0x0002:word16] & 0xFFF3
	Mem0[es:bx + 0x0002:word16] = v21
	SZO = cond(Mem0[es:bx + 0x0002:word16])
	C = false
	Mem0[es:bx + 0x0006:word16] = 0x0000
	ax = Mem0[ss:bp + 0x0006:word16]
	dx = Mem0[ss:bp + 0x0004:word16]
	dx = dx + 0x0005
	SCZO = cond(dx)
	Mem0[es:bx + 0x000A:word16] = ax
	Mem0[es:bx + 0x0008:word16] = dx
	Mem0[es:bx + 0x000E:word16] = ax
	Mem0[es:bx + 0x000C:word16] = dx
	SCZO = cond(di - 0x0002)
	branch Test(EQ,Z) l0800_BB92
	// succ:  l0800_BB3A l0800_BB92
l0800_BB3A:
	si = si | si
	SZO = cond(si)
	C = false
	branch Test(ULE,CZ) l0800_BB92
	// succ:  l0800_BB3E l0800_BB92
l0800_BB3E:
	Mem0[ds:0x2352:word16] = 0xC7F0
	ax = Mem0[ss:bp + 0x0008:word16]
	ax = ax | Mem0[ss:bp + 0x000A:word16]
	SZO = cond(ax)
	C = false
	branch Test(NE,Z) l0800_BB6B
	// succ:  l0800_BB4C l0800_BB6B
l0800_BB4C:
	sp = sp - 2
	Mem0[ss:sp:word16] = si
	call fn0800_9F7F (retsize: 2;)
	cx = Mem0[ss:sp:word16]
	sp = sp + 2
	Mem0[ss:bp + 0x000A:word16] = dx
	Mem0[ss:bp + 0x0008:word16] = ax
	ax = ax | dx
	SZO = cond(ax)
	C = false
	branch Test(NE,Z) l0800_BB5E
	// succ:  l0800_BB5B l0800_BB5E
l0800_BB5B:
	goto l0800_BAAB
	// succ:  l0800_BAAB
l0800_BB5E:
	es_bx = Mem0[ss:bp + 0x0004:segptr32]
	v24 = Mem0[es:bx + 0x0002:word16] | 0x0004
	Mem0[es:bx + 0x0002:word16] = v24
	SZO = cond(Mem0[es:bx + 0x0002:word16])
	C = false
	// succ:  l0800_BB6B
l0800_BB6B:
	es_bx = Mem0[ss:bp + 0x0004:segptr32]
	ax = Mem0[ss:bp + 0x000A:word16]
	dx = Mem0[ss:bp + 0x0008:word16]
	Mem0[es:bx + 0x000E:word16] = ax
	Mem0[es:bx + 0x000C:word16] = dx
	Mem0[es:bx + 0x000A:word16] = ax
	Mem0[es:bx + 0x0008:word16] = dx
	Mem0[es:bx + 0x0006:word16] = si
	SCZO = cond(di - 0x0001)
	branch Test(NE,Z) l0800_BB92
	// succ:  l0800_BB8D l0800_BB92
l0800_BB8D:
	v23 = Mem0[es:bx + 0x0002:word16] | 0x0008
	Mem0[es:bx + 0x0002:word16] = v23
	SZO = cond(Mem0[es:bx + 0x0002:word16])
	C = false
	// succ:  l0800_BB92
l0800_BB92:
	ax = ax ^ ax
	SZO = cond(ax)
	C = false
	// succ:  l0800_BB94
l0800_BB94:
	di = Mem0[ss:sp:word16]
	sp = sp + 2
	si = Mem0[ss:sp:word16]
	sp = sp + 2
	bp = Mem0[ss:sp:word16]
	sp = sp + 2
	return
	// succ:  fn0800_BA89_exit
fn0800_BA89_exit:


// fn0800_BB98
// Return size: 2
define fn0800_BB98
fn0800_BB98_entry:
	// succ:  l0800_BB98
l0800_BB98:
	sp = fp
	Top = 0
	sp = sp - 2
	Mem0[ss:sp:word16] = bp
	bp = sp
	sp = sp - 2
	Mem0[ss:sp:word16] = si
	si = Mem0[ss:bp + 0x0004:word16]
	ax = Mem0[ss:bp + 0x000A:word16]
	ax = ax | Mem0[ss:bp + 0x000C:word16]
	SZO = cond(ax)
	C = false
	branch Test(EQ,Z) l0800_BBE4
	// succ:  l0800_BBA7 l0800_BBE4
l0800_BBA7:
	v10 = Mem0[ss:bp + 0x0008:word16]
	sp = sp - 2
	Mem0[ss:sp:word16] = v10
	v11 = Mem0[ss:bp + 0x0006:word16]
	sp = sp - 2
	Mem0[ss:sp:word16] = v11
	call fn0800_BFC7 (retsize: 2;)
	cx = Mem0[ss:sp:word16]
	sp = sp + 2
	cx = Mem0[ss:sp:word16]
	sp = sp + 2
	SCZO = cond(ax - si)
	branch Test(ULT,C) l0800_BBD2
	// succ:  l0800_BBB6 l0800_BBD2
l0800_BBB6:
	sp = sp - 2
	Mem0[ss:sp:word16] = si
	v14 = Mem0[ss:bp + 0x0008:word16]
	sp = sp - 2
	Mem0[ss:sp:word16] = v14
	v15 = Mem0[ss:bp + 0x0006:word16]
	sp = sp - 2
	Mem0[ss:sp:word16] = v15
	v16 = Mem0[ss:bp + 0x000C:word16]
	sp = sp - 2
	Mem0[ss:sp:word16] = v16
	v17 = Mem0[ss:bp + 0x000A:word16]
	sp = sp - 2
	Mem0[ss:sp:word16] = v17
	call fn0800_C01E (retsize: 2;)
	sp = sp + 0x000A
	SCZO = cond(sp)
	es_bx = Mem0[ss:bp + 0x000A:segptr32]
	Mem0[es:bx + si:byte] = 0x00
	goto l0800_BBE4
	// succ:  l0800_BBE4
l0800_BBD2:
	v21 = Mem0[ss:bp + 0x0008:word16]
	sp = sp - 2
	Mem0[ss:sp:word16] = v21
	v22 = Mem0[ss:bp + 0x0006:word16]
	sp = sp - 2
	Mem0[ss:sp:word16] = v22
	v23 = Mem0[ss:bp + 0x000C:word16]
	sp = sp - 2
	Mem0[ss:sp:word16] = v23
	v24 = Mem0[ss:bp + 0x000A:word16]
	sp = sp - 2
	Mem0[ss:sp:word16] = v24
	call fn0800_BF9E (retsize: 2;)
	sp = sp + 0x0008
	SCZO = cond(sp)
	// succ:  l0800_BBE4
l0800_BBE4:
	si = Mem0[ss:sp:word16]
	sp = sp + 2
	bp = Mem0[ss:sp:word16]
	sp = sp + 2
	return
	// succ:  fn0800_BB98_exit
fn0800_BB98_exit:


// fn0800_BBE9
// Return size: 2
define fn0800_BBE9
fn0800_BBE9_entry:
	// succ:  l0800_BBE9
l0800_BBE9:
	sp = fp
	Top = 0
	sp = sp - 2
	Mem0[ss:sp:word16] = bp
	bp = sp
	sp = sp - 0x0002
	SCZO = cond(sp)
	es_bx = Mem0[ss:bp + 0x0004:segptr32]
	SCZO = cond(Mem0[es:bx - 0x0001:byte] - 0x2E)
	branch Test(NE,Z) l0800_BBFC
	// succ:  l0800_BBF9 l0800_BBFC
l0800_BBF9:
	v10 = Mem0[ss:bp + 0x0004:word16] - 0x0001
	Mem0[ss:bp + 0x0004:word16] = v10
	SZO = cond(v10)
	// succ:  l0800_BBFC
l0800_BBFC:
	v12 = Mem0[ss:bp + 0x0004:word16] - 0x0001
	Mem0[ss:bp + 0x0004:word16] = v12
	SZO = cond(v12)
	es_bx = Mem0[ss:bp + 0x0004:segptr32]
	al = Mem0[es:bx:byte]
	ax = (int16) al
	Mem0[ss:bp - 0x0002:word16] = ax
	cx = 0x0004
	bx = 0xBC39
	// succ:  l0800_BC0F
l0800_BC0F:
	ax = Mem0[0x0800:bx:word16]
	SCZO = cond(ax - Mem0[ss:bp - 0x0002:word16])
	branch Test(EQ,Z) l0800_BC1E
	// succ:  l0800_BC17 l0800_BC1E
l0800_BC17:
	bx = bx + 0x0002
	SCZO = cond(bx)
	cx = cx - 0x0001
	branch cx != 0x0000 l0800_BC0F
	// succ:  l0800_BC1C l0800_BC0F
l0800_BC1C:
	goto l0800_BC31
	// succ:  l0800_BC31
l0800_BC1E:
	call Mem0[0x0800:bx + 0x0008:word16] (retsize: 2;)
	return
	// succ:  fn0800_BBE9_exit
l0800_BC31:
	ax = ax ^ ax
	SZO = cond(ax)
	C = false
	sp = bp
	bp = Mem0[ss:sp:word16]
	sp = sp + 2
	return
	// succ:  fn0800_BBE9_exit
fn0800_BBE9_exit:


// fn0800_BC49
// Return size: 0
define fn0800_BC49
fn0800_BC49_entry:
	// succ:  l0800_BC49
l0800_BC49:
	sp = fp
	Top = 0
	sp = sp - 2
	Mem0[ss:sp:word16] = bp
	bp = sp
	sp = sp - 0x0058
	SCZO = cond(sp)
	sp = sp - 2
	Mem0[ss:sp:word16] = si
	sp = sp - 2
	Mem0[ss:sp:word16] = di
	di = di ^ di
	SZO = cond(di)
	C = false
	ax = Mem0[ss:bp + 0x0008:word16]
	ax = ax | Mem0[ss:bp + 0x000A:word16]
	SZO = cond(ax)
	C = false
	branch Test(EQ,Z) l0800_BC62
	// succ:  l0800_BC5B l0800_BC62
l0800_BC5B:
	es_bx = Mem0[ss:bp + 0x0008:segptr32]
	Mem0[es:bx:byte] = 0x00
	// succ:  l0800_BC62
l0800_BC62:
	ax = Mem0[ss:bp + 0x000C:word16]
	ax = ax | Mem0[ss:bp + 0x000E:word16]
	SZO = cond(ax)
	C = false
	branch Test(EQ,Z) l0800_BC71
	// succ:  l0800_BC6A l0800_BC71
l0800_BC6A:
	es_bx = Mem0[ss:bp + 0x000C:segptr32]
	Mem0[es:bx:byte] = 0x00
	// succ:  l0800_BC71
l0800_BC71:
	ax = Mem0[ss:bp + 0x0010:word16]
	ax = ax | Mem0[ss:bp + 0x0012:word16]
	SZO = cond(ax)
	C = false
	branch Test(EQ,Z) l0800_BC80
	// succ:  l0800_BC79 l0800_BC80
l0800_BC79:
	es_bx = Mem0[ss:bp + 0x0010:segptr32]
	Mem0[es:bx:byte] = 0x00
	// succ:  l0800_BC80
l0800_BC80:
	ax = Mem0[ss:bp + 0x0014:word16]
	ax = ax | Mem0[ss:bp + 0x0016:word16]
	SZO = cond(ax)
	C = false
	branch Test(EQ,Z) l0800_BC8F
	// succ:  l0800_BC88 l0800_BC8F
l0800_BC88:
	es_bx = Mem0[ss:bp + 0x0014:segptr32]
	Mem0[es:bx:byte] = 0x00
	// succ:  l0800_BC8F
l0800_BC8F:
	ax = bp - 0x0058
	Mem0[ss:bp - 0x0002:word16] = ss
	Mem0[ss:bp - 0x0004:word16] = ax
	goto l0800_BC9D
	// succ:  l0800_BC9D
l0800_BC9A:
	v17 = Mem0[ss:bp + 0x0004:word16] + 0x0001
	Mem0[ss:bp + 0x0004:word16] = v17
	SZO = cond(v17)
	// succ:  l0800_BC9D
l0800_BC9D:
	es_bx = Mem0[ss:bp + 0x0004:segptr32]
	SCZO = cond(Mem0[es:bx:byte] - 0x20)
	branch Test(EQ,Z) l0800_BC9A
	// succ:  l0800_BCA6 l0800_BC9A
l0800_BCA6:
	v15 = Mem0[ss:bp + 0x0006:word16]
	sp = sp - 2
	Mem0[ss:sp:word16] = v15
	sp = sp - 2
	Mem0[ss:sp:word16] = bx
	call fn0800_BFC7 (retsize: 2;)
	cx = Mem0[ss:sp:word16]
	sp = sp + 2
	cx = Mem0[ss:sp:word16]
	sp = sp + 2
	si = ax
	SCZO = cond(ax - 0x0050)
	branch Test(LE,SZO) l0800_BCB9
	// succ:  l0800_BCB6 l0800_BCB9
l0800_BCB6:
	si = 0x0050
	// succ:  l0800_BCB9
l0800_BCB9:
	es_bx = Mem0[ss:bp - 0x0004:segptr32]
	Mem0[es:bx:byte] = 0x00
	v18 = Mem0[ss:bp - 0x0004:word16] + 0x0001
	Mem0[ss:bp - 0x0004:word16] = v18
	SZO = cond(v18)
	sp = sp - 2
	Mem0[ss:sp:word16] = si
	v19 = Mem0[ss:bp + 0x0006:word16]
	sp = sp - 2
	Mem0[ss:sp:word16] = v19
	v20 = Mem0[ss:bp + 0x0004:word16]
	sp = sp - 2
	Mem0[ss:sp:word16] = v20
	v21 = Mem0[ss:bp - 0x0002:word16]
	sp = sp - 2
	Mem0[ss:sp:word16] = v21
	v22 = Mem0[ss:bp - 0x0004:word16]
	sp = sp - 2
	Mem0[ss:sp:word16] = v22
	call fn0800_C01E (retsize: 2;)
	sp = sp + 0x000A
	SCZO = cond(sp)
	v23 = Mem0[ss:bp - 0x0004:word16] + si
	Mem0[ss:bp - 0x0004:word16] = v23
	SCZO = cond(v23)
	es_bx = Mem0[ss:bp - 0x0004:segptr32]
	Mem0[es:bx:byte] = 0x00
	si = si ^ si
	SZO = cond(si)
	C = false
	// succ:  l0800_BCE2
l0800_BCE2:
	v24 = Mem0[ss:bp - 0x0004:word16] - 0x0001
	Mem0[ss:bp - 0x0004:word16] = v24
	SZO = cond(v24)
	es_bx = Mem0[ss:bp - 0x0004:segptr32]
	al = Mem0[es:bx:byte]
	ax = (int16) al
	Mem0[ss:bp - 0x0006:word16] = ax
	cx = 0x0007
	bx = 0xBE1F
	// succ:  l0800_BCF5
l0800_BCF5:
	ax = Mem0[0x0800:bx:word16]
	SCZO = cond(ax - Mem0[ss:bp - 0x0006:word16])
	branch Test(EQ,Z) l0800_BD04
	// succ:  l0800_BCFD l0800_BD04
l0800_BCFD:
	bx = bx + 0x0002
	SCZO = cond(bx)
	cx = cx - 0x0001
	branch cx != 0x0000 l0800_BCF5
	// succ:  l0800_BD02 l0800_BCF5
l0800_BD02:
	goto l0800_BCE2
	// succ:  l0800_BCE2
l0800_BD04:
	call Mem0[0x0800:bx + 0x000E:word16] (retsize: 2;)
	return
	// succ:  fn0800_BC49_exit
fn0800_BC49_exit:


// fn0800_BE3B
// Return size: 2
define fn0800_BE3B
fn0800_BE3B_entry:
	// succ:  l0800_BE3B
l0800_BE3B:
	sp = fp
	Top = 0
	sp = sp - 2
	Mem0[ss:sp:word16] = bp
	bp = sp
	v5 = Mem0[ss:bp + 0x0016:word16]
	sp = sp - 2
	Mem0[ss:sp:word16] = v5
	v6 = Mem0[ss:bp + 0x0014:word16]
	sp = sp - 2
	Mem0[ss:sp:word16] = v6
	v7 = Mem0[ss:bp + 0x0012:word16]
	sp = sp - 2
	Mem0[ss:sp:word16] = v7
	v8 = Mem0[ss:bp + 0x0010:word16]
	sp = sp - 2
	Mem0[ss:sp:word16] = v8
	v9 = Mem0[ss:bp + 0x000E:word16]
	sp = sp - 2
	Mem0[ss:sp:word16] = v9
	v10 = Mem0[ss:bp + 0x000C:word16]
	sp = sp - 2
	Mem0[ss:sp:word16] = v10
	v11 = Mem0[ss:bp + 0x000A:word16]
	sp = sp - 2
	Mem0[ss:sp:word16] = v11
	v12 = Mem0[ss:bp + 0x0008:word16]
	sp = sp - 2
	Mem0[ss:sp:word16] = v12
	v13 = Mem0[ss:bp + 0x0006:word16]
	sp = sp - 2
	Mem0[ss:sp:word16] = v13
	v14 = Mem0[ss:bp + 0x0004:word16]
	sp = sp - 2
	Mem0[ss:sp:word16] = v14
	call fn0800_BC49 (retsize: 2;)
	sp = sp + 0x0014
	SCZO = cond(sp)
	bp = Mem0[ss:sp:word16]
	sp = sp + 2
	return
	// succ:  fn0800_BE3B_exit
fn0800_BE3B_exit:


// fn0800_BEA2
// Return size: 2
define fn0800_BEA2
fn0800_BEA2_entry:
	// succ:  l0800_BEA2
l0800_BEA2:
	sp = fp
	Top = 0
	sp = sp - 2
	Mem0[ss:sp:word16] = bp
	bp = sp
	es_bx = Mem0[ss:bp + 0x0004:segptr32]
	Mem0[es:bx:byte] = 0x00
	ax = 0xBE64
	sp = sp - 2
	Mem0[ss:sp:word16] = ax
	sp = sp - 2
	Mem0[ss:sp:word16] = ss
	ax = bp + 0x0004
	sp = sp - 2
	Mem0[ss:sp:word16] = ax
	v9 = Mem0[ss:bp + 0x000A:word16]
	sp = sp - 2
	Mem0[ss:sp:word16] = v9
	v10 = Mem0[ss:bp + 0x0008:word16]
	sp = sp - 2
	Mem0[ss:sp:word16] = v10
	ax = bp + 0x000C
	sp = sp - 2
	Mem0[ss:sp:word16] = ax
	call fn0800_9828 (retsize: 2;)
	sp = sp + 0x000C
	bp = Mem0[ss:sp:word16]
	sp = sp + 2
	return
	// succ:  fn0800_BEA2_exit
fn0800_BEA2_exit:


// fn0800_BF18
// Return size: 2
define fn0800_BF18
fn0800_BF18_entry:
	// succ:  l0800_BF18
l0800_BF18:
	sp = fp
	Top = 0
	sp = sp - 2
	Mem0[ss:sp:word16] = bp
	bp = sp
	sp = sp - 2
	Mem0[ss:sp:word16] = ss
	ax = bp + 0x000C
	sp = sp - 2
	Mem0[ss:sp:word16] = ax
	v6 = Mem0[ss:bp + 0x000A:word16]
	sp = sp - 2
	Mem0[ss:sp:word16] = v6
	v7 = Mem0[ss:bp + 0x0008:word16]
	sp = sp - 2
	Mem0[ss:sp:word16] = v7
	sp = sp - 2
	Mem0[ss:sp:word16] = ss
	ax = bp + 0x0004
	sp = sp - 2
	Mem0[ss:sp:word16] = ax
	ax = 0xBF0D
	sp = sp - 2
	Mem0[ss:sp:word16] = ax
	ax = 0xBEE5
	sp = sp - 2
	Mem0[ss:sp:word16] = ax
	call fn0800_8F97 (retsize: 2;)
	sp = sp + 0x0010
	SCZO = cond(sp)
	bp = Mem0[ss:sp:word16]
	sp = sp + 2
	return
	// succ:  fn0800_BF18_exit
fn0800_BF18_exit:


// fn0800_BF5F
// Return size: 2
define fn0800_BF5F
fn0800_BF5F_entry:
	// succ:  l0800_BF5F
l0800_BF5F:
	sp = fp
	Top = 0
	sp = sp - 2
	Mem0[ss:sp:word16] = bp
	bp = sp
	sp = sp - 2
	Mem0[ss:sp:word16] = si
	sp = sp - 2
	Mem0[ss:sp:word16] = di
	D = false
	sp = sp - 2
	Mem0[ss:sp:word16] = ds
	es_di = Mem0[ss:bp + 0x0004:segptr32]
	dx = di
	al = al ^ al
	SZO = cond(al)
	C = false
	cx = 0xFFFF
	// succ:  l0800_BF70
l0800_BF70:
	branch cx == 0x0000 l0800_BF72
	// succ:  l0800_BF70_1 l0800_BF72
l0800_BF70_1:
	SCZO = cond(al - Mem0[es:di:byte])
	di = di + 0x0001
	cx = cx - 0x0001
	branch Test(EQ,Z) l0800_BF70
	// succ:  l0800_BF72 l0800_BF70
l0800_BF72:
	sp = sp - 2
	Mem0[ss:sp:word16] = es
	si = di - 0x0001
	es_di = Mem0[ss:bp + 0x0008:segptr32]
	cx = 0xFFFF
	// succ:  l0800_BF7C
l0800_BF7C:
	branch cx == 0x0000 l0800_BF7E
	// succ:  l0800_BF7C_2 l0800_BF7E
l0800_BF7C_2:
	SCZO = cond(al - Mem0[es:di:byte])
	di = di + 0x0001
	cx = cx - 0x0001
	branch Test(EQ,Z) l0800_BF7C
	// succ:  l0800_BF7E l0800_BF7C
l0800_BF7E:
	cx = ~cx
	di = di - cx
	SCZO = cond(di)
	sp = sp - 2
	Mem0[ss:sp:word16] = es
	ds = Mem0[ss:sp:selector]
	sp = sp + 2
	es = Mem0[ss:sp:selector]
	sp = sp + 2
	v18 = di
	di = si
	si = v18
	SZO = cond(si & 0x0001)
	C = false
	branch Test(EQ,Z) l0800_BF8F
	// succ:  l0800_BF8D l0800_BF8F
l0800_BF8D:
	v19 = Mem0[ds:si:byte]
	Mem0[es:di:byte] = v19
	si = si + 0x0001
	di = di + 0x0001
	cx = cx - 0x0001
	SZO = cond(cx)
	// succ:  l0800_BF8F
l0800_BF8F:
	cx = cx >>u 0x0001
	SCZO = cond(cx)
	// succ:  l0800_BF91
l0800_BF91:
	branch cx == 0x0000 l0800_BF93
	// succ:  l0800_BF91_1 l0800_BF93
l0800_BF91_1:
	v20 = Mem0[ds:si:word16]
	Mem0[es:di:word16] = v20
	si = si + 0x0002
	di = di + 0x0002
	cx = cx - 0x0001
	goto l0800_BF91
	// succ:  l0800_BF91
l0800_BF93:
	branch Test(UGE,C) l0800_BF96
	// succ:  l0800_BF95 l0800_BF96
l0800_BF95:
	v21 = Mem0[ds:si:byte]
	Mem0[es:di:byte] = v21
	si = si + 0x0001
	di = di + 0x0001
	// succ:  l0800_BF96
l0800_BF96:
	v22 = ax
	ax = dx
	dx = v22
	dx = es
	ds = Mem0[ss:sp:selector]
	sp = sp + 2
	di = Mem0[ss:sp:word16]
	sp = sp + 2
	si = Mem0[ss:sp:word16]
	sp = sp + 2
	bp = Mem0[ss:sp:word16]
	sp = sp + 2
	return
	// succ:  fn0800_BF5F_exit
fn0800_BF5F_exit:


// fn0800_BF9E
// Return size: 2
define fn0800_BF9E
fn0800_BF9E_entry:
	// succ:  l0800_BF9E
l0800_BF9E:
	sp = fp
	Top = 0
	sp = sp - 2
	Mem0[ss:sp:word16] = bp
	bp = sp
	sp = sp - 2
	Mem0[ss:sp:word16] = si
	sp = sp - 2
	Mem0[ss:sp:word16] = di
	D = false
	es_di = Mem0[ss:bp + 0x0008:segptr32]
	si = di
	al = al ^ al
	SZO = cond(al)
	C = false
	cx = 0xFFFF
	// succ:  l0800_BFAE
l0800_BFAE:
	branch cx == 0x0000 l0800_BFB0
	// succ:  l0800_BFAE_1 l0800_BFB0
l0800_BFAE_1:
	SCZO = cond(al - Mem0[es:di:byte])
	di = di + 0x0001
	cx = cx - 0x0001
	branch Test(EQ,Z) l0800_BFAE
	// succ:  l0800_BFB0 l0800_BFAE
l0800_BFB0:
	cx = ~cx
	sp = sp - 2
	Mem0[ss:sp:word16] = ds
	ax = es
	ds = ax
	es_di = Mem0[ss:bp + 0x0004:segptr32]
	// succ:  l0800_BFBA
l0800_BFBA:
	branch cx == 0x0000 l0800_BFBC
	// succ:  l0800_BFBA_2 l0800_BFBC
l0800_BFBA_2:
	v18 = Mem0[ds:si:byte]
	Mem0[es:di:byte] = v18
	si = si + 0x0001
	di = di + 0x0001
	cx = cx - 0x0001
	goto l0800_BFBA
	// succ:  l0800_BFBA
l0800_BFBC:
	ds = Mem0[ss:sp:selector]
	sp = sp + 2
	dx = Mem0[ss:bp + 0x0006:word16]
	ax = Mem0[ss:bp + 0x0004:word16]
	di = Mem0[ss:sp:word16]
	sp = sp + 2
	si = Mem0[ss:sp:word16]
	sp = sp + 2
	bp = Mem0[ss:sp:word16]
	sp = sp + 2
	return
	// succ:  fn0800_BF9E_exit
fn0800_BF9E_exit:


// fn0800_BFC7
// Return size: 2
define fn0800_BFC7
fn0800_BFC7_entry:
	// succ:  l0800_BFC7
l0800_BFC7:
	sp = fp
	Top = 0
	sp = sp - 2
	Mem0[ss:sp:word16] = bp
	bp = sp
	sp = sp - 2
	Mem0[ss:sp:word16] = di
	es_di = Mem0[ss:bp + 0x0004:segptr32]
	ax = ax ^ ax
	SZO = cond(ax)
	C = false
	SCZO = cond(ax - Mem0[ss:bp + 0x0006:word16])
	branch Test(NE,Z) l0800_BFD9
	// succ:  l0800_BFD5 l0800_BFD9
l0800_BFD5:
	SCZO = cond(ax - di)
	branch Test(EQ,Z) l0800_BFE3
	// succ:  l0800_BFD9 l0800_BFE3
l0800_BFD9:
	D = false
	cx = 0xFFFF
	// succ:  l0800_BFDD
l0800_BFDD:
	branch cx == 0x0000 l0800_BFDF
	// succ:  l0800_BFDD_1 l0800_BFDF
l0800_BFDD_1:
	SCZO = cond(al - Mem0[es:di:byte])
	di = di + 0x0001
	cx = cx - 0x0001
	branch Test(EQ,Z) l0800_BFDD
	// succ:  l0800_BFDF l0800_BFDD
l0800_BFDF:
	v16 = ax
	ax = cx
	cx = v16
	ax = ~ax
	ax = ax - 0x0001
	SZO = cond(ax)
	// succ:  l0800_BFE3
l0800_BFE3:
	di = Mem0[ss:sp:word16]
	sp = sp + 2
	bp = Mem0[ss:sp:word16]
	sp = sp + 2
	return
	// succ:  fn0800_BFC7_exit
fn0800_BFC7_exit:


// fn0800_BFE6
// Return size: 2
define fn0800_BFE6
fn0800_BFE6_entry:
	// succ:  l0800_BFE6
l0800_BFE6:
	sp = fp
	Top = 0
	sp = sp - 2
	Mem0[ss:sp:word16] = bp
	bp = sp
	sp = sp - 2
	Mem0[ss:sp:word16] = si
	sp = sp - 2
	Mem0[ss:sp:word16] = di
	dx = ds
	D = false
	es_di = Mem0[ss:bp + 0x0008:segptr32]
	si = di
	ax = Mem0[ss:bp + 0x000C:word16]
	cx = ax
	branch cx == 0x0000 l0800_C018
	// succ:  l0800_BFFA l0800_C018
l0800_BFFA:
	bx = ax
	al = al ^ al
	SZO = cond(al)
	C = false
	// succ:  l0800_BFFE
l0800_BFFE:
	branch cx == 0x0000 l0800_C000
	// succ:  l0800_BFFE_1 l0800_C000
l0800_BFFE_1:
	SCZO = cond(al - Mem0[es:di:byte])
	di = di + 0x0001
	cx = cx - 0x0001
	branch Test(EQ,Z) l0800_BFFE
	// succ:  l0800_C000 l0800_BFFE
l0800_C000:
	bx = bx - cx
	SCZO = cond(bx)
	cx = bx
	di = si
	ds_si = Mem0[ss:bp + 0x0004:segptr32]
	// succ:  l0800_C009
l0800_C009:
	branch cx == 0x0000 l0800_C00B
	// succ:  l0800_C009_2 l0800_C00B
l0800_C009_2:
	SCZO = cond(Mem0[ds:si:byte] - Mem0[es:di:byte])
	si = si + 0x0001
	di = di + 0x0001
	cx = cx - 0x0001
	branch Test(NE,Z) l0800_C009
	// succ:  l0800_C00B l0800_C009
l0800_C00B:
	al = Mem0[ds:si - 0x0001:byte]
	bl = Mem0[es:di - 0x0001:byte]
	ah = ah ^ ah
	SZO = cond(ah)
	C = false
	bh = ah
	ax = ax - bx
	SCZO = cond(ax)
	// succ:  l0800_C018
l0800_C018:
	ds = dx
	di = Mem0[ss:sp:word16]
	sp = sp + 2
	si = Mem0[ss:sp:word16]
	sp = sp + 2
	bp = Mem0[ss:sp:word16]
	sp = sp + 2
	return
	// succ:  fn0800_BFE6_exit
fn0800_BFE6_exit:


// fn0800_C01E
// Return size: 2
define fn0800_C01E
fn0800_C01E_entry:
	// succ:  l0800_C01E
l0800_C01E:
	sp = fp
	Top = 0
	sp = sp - 2
	Mem0[ss:sp:word16] = bp
	bp = sp
	sp = sp - 2
	Mem0[ss:sp:word16] = si
	sp = sp - 2
	Mem0[ss:sp:word16] = di
	D = false
	es_di = Mem0[ss:bp + 0x0008:segptr32]
	si = di
	al = al ^ al
	SZO = cond(al)
	C = false
	bx = Mem0[ss:bp + 0x000C:word16]
	cx = bx
	// succ:  l0800_C030
l0800_C030:
	branch cx == 0x0000 l0800_C032
	// succ:  l0800_C030_1 l0800_C032
l0800_C030_1:
	SCZO = cond(al - Mem0[es:di:byte])
	di = di + 0x0001
	cx = cx - 0x0001
	branch Test(EQ,Z) l0800_C030
	// succ:  l0800_C032 l0800_C030
l0800_C032:
	bx = bx - cx
	SCZO = cond(bx)
	sp = sp - 2
	Mem0[ss:sp:word16] = ds
	di = es
	ds = di
	es_di = Mem0[ss:bp + 0x0004:segptr32]
	v18 = bx
	bx = cx
	cx = v18
	// succ:  l0800_C03E
l0800_C03E:
	branch cx == 0x0000 l0800_C040
	// succ:  l0800_C03E_2 l0800_C040
l0800_C03E_2:
	v19 = Mem0[ds:si:byte]
	Mem0[es:di:byte] = v19
	si = si + 0x0001
	di = di + 0x0001
	cx = cx - 0x0001
	goto l0800_C03E
	// succ:  l0800_C03E
l0800_C040:
	cx = bx
	// succ:  l0800_C042
l0800_C042:
	branch cx == 0x0000 l0800_C044
	// succ:  l0800_C042_1 l0800_C044
l0800_C042_1:
	Mem0[es:di:byte] = al
	di = di + 0x0001
	cx = cx - 0x0001
	goto l0800_C042
	// succ:  l0800_C042
l0800_C044:
	ds = Mem0[ss:sp:selector]
	sp = sp + 2
	dx = Mem0[ss:bp + 0x0006:word16]
	ax = Mem0[ss:bp + 0x0004:word16]
	di = Mem0[ss:sp:word16]
	sp = sp + 2
	si = Mem0[ss:sp:word16]
	sp = sp + 2
	bp = Mem0[ss:sp:word16]
	sp = sp + 2
	return
	// succ:  fn0800_C01E_exit
fn0800_C01E_exit:


// fn0800_C04F
// Return size: 2
define fn0800_C04F
fn0800_C04F_entry:
	// succ:  l0800_C04F
l0800_C04F:
	sp = fp
	Top = 0
	sp = sp - 2
	Mem0[ss:sp:word16] = bp
	bp = sp
	sp = sp - 0x0004
	SCZO = cond(sp)
	sp = sp - 2
	Mem0[ss:sp:word16] = si
	call fn0800_C379 (retsize: 2;)
	ax = Mem0[ds:0x26E4:word16]
	dx = Mem0[ds:0x26E2:word16]
	dx = dx + 0xA600
	SCZO = cond(dx)
	ax = ax + 0x12CE + C
	SCZO = cond(ax)
	Mem0[ss:bp - 0x0002:word16] = ax
	Mem0[ss:bp - 0x0004:word16] = dx
	es_bx = Mem0[ss:bp + 0x0004:segptr32]
	si = Mem0[es:bx:word16]
	si = si + 0xF844
	SCZO = cond(si)
	ax = si
	ax = ax >> 0x0001
	SCZO = cond(ax)
	ax = ax >> 0x0001
	SCZO = cond(ax)
	dx_ax = (int32) ax
	sp = sp - 2
	Mem0[ss:sp:word16] = ax
	sp = sp - 2
	Mem0[ss:sp:word16] = dx
	dx = 0x0786
	ax = 0x1F80
	cx = Mem0[ss:sp:word16]
	sp = sp + 2
	bx = Mem0[ss:sp:word16]
	sp = sp + 2
	call fn0800_8F18 (retsize: 2;)
	v16 = Mem0[ss:bp - 0x0004:word16] + ax
	Mem0[ss:bp - 0x0004:word16] = v16
	SCZO = cond(v16)
	v17 = Mem0[ss:bp - 0x0002:word16] + dx + C
	Mem0[ss:bp - 0x0002:word16] = v17
	SCZO = cond(v17)
	ax = si
	ax = ax & 0x0003
	SZO = cond(ax)
	C = false
	dx_ax = (int32) ax
	sp = sp - 2
	Mem0[ss:sp:word16] = ax
	sp = sp - 2
	Mem0[ss:sp:word16] = dx
	dx = 0x01E1
	ax = 0x3380
	cx = Mem0[ss:sp:word16]
	sp = sp + 2
	bx = Mem0[ss:sp:word16]
	sp = sp + 2
	call fn0800_8F18 (retsize: 2;)
	v19 = Mem0[ss:bp - 0x0004:word16] + ax
	Mem0[ss:bp - 0x0004:word16] = v19
	SCZO = cond(v19)
	v20 = Mem0[ss:bp - 0x0002:word16] + dx + C
	Mem0[ss:bp - 0x0002:word16] = v20
	SCZO = cond(v20)
	SZO = cond(si & 0x0003)
	C = false
	branch Test(EQ,Z) l0800_C0B9
	// succ:  l0800_C0B0 l0800_C0B9
l0800_C0B0:
	v22 = Mem0[ss:bp - 0x0004:word16] + 0x5180
	Mem0[ss:bp - 0x0004:word16] = v22
	SCZO = cond(v22)
	v23 = Mem0[ss:bp - 0x0002:word16] + 0x01 + C
	Mem0[ss:bp - 0x0002:word16] = v23
	SCZO = cond(v23)
	// succ:  l0800_C0B9
l0800_C0B9:
	cx = cx ^ cx
	SZO = cond(cx)
	C = false
	es_bx = Mem0[ss:bp + 0x0004:segptr32]
	al = Mem0[es:bx + 0x0003:byte]
	ax = (int16) al
	ax = ax - 0x0001
	SZO = cond(ax)
	si = ax
	goto l0800_C0D0
	// succ:  l0800_C0D0
l0800_C0C8:
	si = si - 0x0001
	SZO = cond(si)
	al = Mem0[ds:si + 0x26B4:byte]
	ax = (int16) al
	cx = cx + ax
	SCZO = cond(cx)
	// succ:  l0800_C0D0
l0800_C0D0:
	si = si | si
	SZO = cond(si)
	C = false
	branch Test(GT,SZO) l0800_C0C8
	// succ:  l0800_C0D4 l0800_C0C8
l0800_C0D4:
	es_bx = Mem0[ss:bp + 0x0004:segptr32]
	al = Mem0[es:bx + 0x0002:byte]
	ax = (int16) al
	ax = ax - 0x0001
	SZO = cond(ax)
	cx = cx + ax
	SCZO = cond(cx)
	SCZO = cond(Mem0[es:bx + 0x0003:byte] - 0x02)
	branch Test(LE,SZO) l0800_C0EE
	// succ:  l0800_C0E6 l0800_C0EE
l0800_C0E6:
	SZO = cond(Mem0[es:bx:word16] & 0x0003)
	C = false
	branch Test(NE,Z) l0800_C0EE
	// succ:  l0800_C0ED l0800_C0EE
l0800_C0ED:
	cx = cx + 0x0001
	SZO = cond(cx)
	// succ:  l0800_C0EE
l0800_C0EE:
	es_bx = Mem0[ss:bp + 0x0008:segptr32]
	al = Mem0[es:bx + 0x0001:byte]
	ah = 0x00
	sp = sp - 2
	Mem0[ss:sp:word16] = ax
	ax = cx
	dx = 0x0018
	dx_ax = dx *s ax
	SCZO = cond(dx_ax)
	dx = Mem0[ss:sp:word16]
	sp = sp + 2
	ax = ax + dx
	SCZO = cond(ax)
	si = ax
	SCZO = cond(Mem0[ds:0x26E6:word16] - 0x0000)
	branch Test(EQ,Z) l0800_C128
	// succ:  l0800_C10B l0800_C128
l0800_C10B:
	al = Mem0[es:bx + 0x0001:byte]
	ah = 0x00
	sp = sp - 2
	Mem0[ss:sp:word16] = ax
	sp = sp - 2
	Mem0[ss:sp:word16] = cx
	ax = ax ^ ax
	SZO = cond(ax)
	C = false
	sp = sp - 2
	Mem0[ss:sp:word16] = ax
	es_bx = Mem0[ss:bp + 0x0004:segptr32]
	ax = Mem0[es:bx:word16]
	ax = ax + 0xF84E
	SCZO = cond(ax)
	sp = sp - 2
	Mem0[ss:sp:word16] = ax
	call fn0800_C553 (retsize: 2;)
	sp = sp + 0x0008
	ax = ax | ax
	SZO = cond(ax)
	C = false
	branch Test(EQ,Z) l0800_C128
	// succ:  l0800_C127 l0800_C128
l0800_C127:
	si = si - 0x0001
	SZO = cond(si)
	// succ:  l0800_C128
l0800_C128:
	ax = si
	dx_ax = (int32) ax
	sp = sp - 2
	Mem0[ss:sp:word16] = ax
	sp = sp - 2
	Mem0[ss:sp:word16] = dx
	dx = dx ^ dx
	SZO = cond(dx)
	C = false
	ax = 0x0E10
	cx = Mem0[ss:sp:word16]
	sp = sp + 2
	bx = Mem0[ss:sp:word16]
	sp = sp + 2
	call fn0800_8F18 (retsize: 2;)
	v26 = Mem0[ss:bp - 0x0004:word16] + ax
	Mem0[ss:bp - 0x0004:word16] = v26
	SCZO = cond(v26)
	v27 = Mem0[ss:bp - 0x0002:word16] + dx + C
	Mem0[ss:bp - 0x0002:word16] = v27
	SCZO = cond(v27)
	es_bx = Mem0[ss:bp + 0x0008:segptr32]
	al = Mem0[es:bx:byte]
	ah = 0x00
	dx_ax = (int32) ax
	sp = sp - 2
	Mem0[ss:sp:word16] = ax
	sp = sp - 2
	Mem0[ss:sp:word16] = dx
	dx = dx ^ dx
	SZO = cond(dx)
	C = false
	ax = 0x003C
	cx = Mem0[ss:sp:word16]
	sp = sp + 2
	bx = Mem0[ss:sp:word16]
	sp = sp + 2
	call fn0800_8F18 (retsize: 2;)
	es_bx = Mem0[ss:bp + 0x0008:segptr32]
	bl = Mem0[es:bx + 0x0003:byte]
	bh = 0x00
	sp = sp - 2
	Mem0[ss:sp:word16] = ax
	ax = bx
	sp = sp - 2
	Mem0[ss:sp:word16] = dx
	dx_ax = (int32) ax
	bx = Mem0[ss:sp:word16]
	sp = sp + 2
	cx = Mem0[ss:sp:word16]
	sp = sp + 2
	cx = cx + ax
	SCZO = cond(cx)
	bx = bx + dx + C
	SCZO = cond(bx)
	v30 = Mem0[ss:bp - 0x0004:word16] + cx
	Mem0[ss:bp - 0x0004:word16] = v30
	SCZO = cond(v30)
	v31 = Mem0[ss:bp - 0x0002:word16] + bx + C
	Mem0[ss:bp - 0x0002:word16] = v31
	SCZO = cond(v31)
	dx = Mem0[ss:bp - 0x0002:word16]
	ax = Mem0[ss:bp - 0x0004:word16]
	si = Mem0[ss:sp:word16]
	sp = sp + 2
	sp = bp
	bp = Mem0[ss:sp:word16]
	sp = sp + 2
	return
	// succ:  fn0800_C04F_exit
fn0800_C04F_exit:


// fn0800_C177
// Return size: 2
define fn0800_C177
fn0800_C177_entry:
	// succ:  l0800_C177
l0800_C177:
	sp = fp
	Top = 0
	sp = sp - 2
	Mem0[ss:sp:word16] = bp
	bp = sp
	call fn0800_C379 (retsize: 2;)
	ax = Mem0[ds:0x26E4:word16]
	dx = Mem0[ds:0x26E2:word16]
	dx = dx + 0xA600
	SCZO = cond(dx)
	ax = ax + 0x12CE + C
	SCZO = cond(ax)
	v10 = Mem0[ss:bp + 0x0004:word16] - dx
	Mem0[ss:bp + 0x0004:word16] = v10
	SCZO = cond(v10)
	v11 = Mem0[ss:bp + 0x0006:word16] - ax - C
	Mem0[ss:bp + 0x0006:word16] = v11
	SCZO = cond(v11)
	es_bx = Mem0[ss:bp + 0x000C:segptr32]
	Mem0[es:bx + 0x0002:byte] = 0x00
	ax = ax ^ ax
	SZO = cond(ax)
	C = false
	dx = 0x003C
	sp = sp - 2
	Mem0[ss:sp:word16] = ax
	sp = sp - 2
	Mem0[ss:sp:word16] = dx
	v16 = Mem0[ss:bp + 0x0006:word16]
	sp = sp - 2
	Mem0[ss:sp:word16] = v16
	v17 = Mem0[ss:bp + 0x0004:word16]
	sp = sp - 2
	Mem0[ss:sp:word16] = v17
	call fn0800_8BCA (retsize: 2;)
	es_bx = Mem0[ss:bp + 0x000C:segptr32]
	Mem0[es:bx + 0x0003:byte] = al
	ax = ax ^ ax
	SZO = cond(ax)
	C = false
	dx = 0x003C
	sp = sp - 2
	Mem0[ss:sp:word16] = ax
	sp = sp - 2
	Mem0[ss:sp:word16] = dx
	v19 = Mem0[ss:bp + 0x0006:word16]
	sp = sp - 2
	Mem0[ss:sp:word16] = v19
	v20 = Mem0[ss:bp + 0x0004:word16]
	sp = sp - 2
	Mem0[ss:sp:word16] = v20
	call fn0800_8BBB (retsize: 2;)
	Mem0[ss:bp + 0x0006:word16] = dx
	Mem0[ss:bp + 0x0004:word16] = ax
	ax = ax ^ ax
	SZO = cond(ax)
	C = false
	dx = 0x003C
	sp = sp - 2
	Mem0[ss:sp:word16] = ax
	sp = sp - 2
	Mem0[ss:sp:word16] = dx
	v21 = Mem0[ss:bp + 0x0006:word16]
	sp = sp - 2
	Mem0[ss:sp:word16] = v21
	v22 = Mem0[ss:bp + 0x0004:word16]
	sp = sp - 2
	Mem0[ss:sp:word16] = v22
	call fn0800_8BCA (retsize: 2;)
	es_bx = Mem0[ss:bp + 0x000C:segptr32]
	Mem0[es:bx:byte] = al
	ax = ax ^ ax
	SZO = cond(ax)
	C = false
	dx = 0x003C
	sp = sp - 2
	Mem0[ss:sp:word16] = ax
	sp = sp - 2
	Mem0[ss:sp:word16] = dx
	v23 = Mem0[ss:bp + 0x0006:word16]
	sp = sp - 2
	Mem0[ss:sp:word16] = v23
	v24 = Mem0[ss:bp + 0x0004:word16]
	sp = sp - 2
	Mem0[ss:sp:word16] = v24
	call fn0800_8BBB (retsize: 2;)
	Mem0[ss:bp + 0x0006:word16] = dx
	Mem0[ss:bp + 0x0004:word16] = ax
	ax = ax ^ ax
	SZO = cond(ax)
	C = false
	dx = 0x88F8
	sp = sp - 2
	Mem0[ss:sp:word16] = ax
	sp = sp - 2
	Mem0[ss:sp:word16] = dx
	v25 = Mem0[ss:bp + 0x0006:word16]
	sp = sp - 2
	Mem0[ss:sp:word16] = v25
	v26 = Mem0[ss:bp + 0x0004:word16]
	sp = sp - 2
	Mem0[ss:sp:word16] = v26
	call fn0800_8BBB (retsize: 2;)
	ax = ax << 0x0001
	SCZO = cond(ax)
	ax = ax << 0x0001
	SCZO = cond(ax)
	ax = ax + 0x07BC
	SCZO = cond(ax)
	es_bx = Mem0[ss:bp + 0x0008:segptr32]
	Mem0[es:bx:word16] = ax
	ax = ax ^ ax
	SZO = cond(ax)
	C = false
	dx = 0x88F8
	sp = sp - 2
	Mem0[ss:sp:word16] = ax
	sp = sp - 2
	Mem0[ss:sp:word16] = dx
	v27 = Mem0[ss:bp + 0x0006:word16]
	sp = sp - 2
	Mem0[ss:sp:word16] = v27
	v28 = Mem0[ss:bp + 0x0004:word16]
	sp = sp - 2
	Mem0[ss:sp:word16] = v28
	call fn0800_8BCA (retsize: 2;)
	Mem0[ss:bp + 0x0006:word16] = dx
	Mem0[ss:bp + 0x0004:word16] = ax
	SCZO = cond(Mem0[ss:bp + 0x0006:word16] - 0x0000)
	branch Test(LT,SO) l0800_C26F
	// succ:  l0800_C22B l0800_C26F
l0800_C22B:
	branch Test(NE,Z) l0800_C234
	// succ:  l0800_C22D l0800_C234
l0800_C22D:
	SCZO = cond(Mem0[ss:bp + 0x0004:word16] - 0x2250)
	branch Test(ULT,C) l0800_C26F
	// succ:  l0800_C234 l0800_C26F
l0800_C234:
	v31 = Mem0[ss:bp + 0x0004:word16] - 0x2250
	Mem0[ss:bp + 0x0004:word16] = v31
	SCZO = cond(v31)
	v32 = Mem0[ss:bp + 0x0006:word16] - 0x00 - C
	Mem0[ss:bp + 0x0006:word16] = v32
	SCZO = cond(v32)
	es_bx = Mem0[ss:bp + 0x0008:segptr32]
	v33 = Mem0[es:bx:word16] + 0x0001
	Mem0[es:bx:word16] = v33
	SZO = cond(v33)
	ax = ax ^ ax
	SZO = cond(ax)
	C = false
	dx = 0x2238
	sp = sp - 2
	Mem0[ss:sp:word16] = ax
	sp = sp - 2
	Mem0[ss:sp:word16] = dx
	v34 = Mem0[ss:bp + 0x0006:word16]
	sp = sp - 2
	Mem0[ss:sp:word16] = v34
	v35 = Mem0[ss:bp + 0x0004:word16]
	sp = sp - 2
	Mem0[ss:sp:word16] = v35
	call fn0800_8BBB (retsize: 2;)
	es_bx = Mem0[ss:bp + 0x0008:segptr32]
	v36 = Mem0[es:bx:word16] + ax
	Mem0[es:bx:word16] = v36
	SCZO = cond(v36)
	ax = ax ^ ax
	SZO = cond(ax)
	C = false
	dx = 0x2238
	sp = sp - 2
	Mem0[ss:sp:word16] = ax
	sp = sp - 2
	Mem0[ss:sp:word16] = dx
	v37 = Mem0[ss:bp + 0x0006:word16]
	sp = sp - 2
	Mem0[ss:sp:word16] = v37
	v38 = Mem0[ss:bp + 0x0004:word16]
	sp = sp - 2
	Mem0[ss:sp:word16] = v38
	call fn0800_8BCA (retsize: 2;)
	Mem0[ss:bp + 0x0006:word16] = dx
	Mem0[ss:bp + 0x0004:word16] = ax
	// succ:  l0800_C26F
l0800_C26F:
	SCZO = cond(Mem0[ds:0x26E6:word16] - 0x0000)
	branch Test(EQ,Z) l0800_C2B4
	// succ:  l0800_C276 l0800_C2B4
l0800_C276:
	ax = ax ^ ax
	SZO = cond(ax)
	C = false
	dx = 0x0018
	sp = sp - 2
	Mem0[ss:sp:word16] = ax
	sp = sp - 2
	Mem0[ss:sp:word16] = dx
	v39 = Mem0[ss:bp + 0x0006:word16]
	sp = sp - 2
	Mem0[ss:sp:word16] = v39
	v40 = Mem0[ss:bp + 0x0004:word16]
	sp = sp - 2
	Mem0[ss:sp:word16] = v40
	call fn0800_8BCA (retsize: 2;)
	sp = sp - 2
	Mem0[ss:sp:word16] = ax
	ax = ax ^ ax
	SZO = cond(ax)
	C = false
	dx = 0x0018
	sp = sp - 2
	Mem0[ss:sp:word16] = ax
	sp = sp - 2
	Mem0[ss:sp:word16] = dx
	v41 = Mem0[ss:bp + 0x0006:word16]
	sp = sp - 2
	Mem0[ss:sp:word16] = v41
	v42 = Mem0[ss:bp + 0x0004:word16]
	sp = sp - 2
	Mem0[ss:sp:word16] = v42
	call fn0800_8BBB (retsize: 2;)
	sp = sp - 2
	Mem0[ss:sp:word16] = ax
	ax = ax ^ ax
	SZO = cond(ax)
	C = false
	sp = sp - 2
	Mem0[ss:sp:word16] = ax
	es_bx = Mem0[ss:bp + 0x0008:segptr32]
	ax = Mem0[es:bx:word16]
	ax = ax + 0xF84E
	SCZO = cond(ax)
	sp = sp - 2
	Mem0[ss:sp:word16] = ax
	call fn0800_C553 (retsize: 2;)
	sp = sp + 0x0008
	ax = ax | ax
	SZO = cond(ax)
	C = false
	branch Test(EQ,Z) l0800_C2B4
	// succ:  l0800_C2AC l0800_C2B4
l0800_C2AC:
	v43 = Mem0[ss:bp + 0x0004:word16] + 0x0001
	Mem0[ss:bp + 0x0004:word16] = v43
	SCZO = cond(v43)
	v44 = Mem0[ss:bp + 0x0006:word16] + 0x00 + C
	Mem0[ss:bp + 0x0006:word16] = v44
	SCZO = cond(v44)
	// succ:  l0800_C2B4
l0800_C2B4:
	ax = ax ^ ax
	SZO = cond(ax)
	C = false
	dx = 0x0018
	sp = sp - 2
	Mem0[ss:sp:word16] = ax
	sp = sp - 2
	Mem0[ss:sp:word16] = dx
	v45 = Mem0[ss:bp + 0x0006:word16]
	sp = sp - 2
	Mem0[ss:sp:word16] = v45
	v46 = Mem0[ss:bp + 0x0004:word16]
	sp = sp - 2
	Mem0[ss:sp:word16] = v46
	call fn0800_8BCA (retsize: 2;)
	es_bx = Mem0[ss:bp + 0x000C:segptr32]
	Mem0[es:bx + 0x0001:byte] = al
	ax = ax ^ ax
	SZO = cond(ax)
	C = false
	dx = 0x0018
	sp = sp - 2
	Mem0[ss:sp:word16] = ax
	sp = sp - 2
	Mem0[ss:sp:word16] = dx
	v47 = Mem0[ss:bp + 0x0006:word16]
	sp = sp - 2
	Mem0[ss:sp:word16] = v47
	v48 = Mem0[ss:bp + 0x0004:word16]
	sp = sp - 2
	Mem0[ss:sp:word16] = v48
	call fn0800_8BBB (retsize: 2;)
	Mem0[ss:bp + 0x0006:word16] = dx
	Mem0[ss:bp + 0x0004:word16] = ax
	v49 = Mem0[ss:bp + 0x0004:word16] + 0x0001
	Mem0[ss:bp + 0x0004:word16] = v49
	SCZO = cond(v49)
	v50 = Mem0[ss:bp + 0x0006:word16] + 0x00 + C
	Mem0[ss:bp + 0x0006:word16] = v50
	SCZO = cond(v50)
	es_bx = Mem0[ss:bp + 0x0008:segptr32]
	SZO = cond(Mem0[es:bx:word16] & 0x0003)
	C = false
	branch Test(NE,Z) l0800_C326
	// succ:  l0800_C2F3 l0800_C326
l0800_C2F3:
	SCZO = cond(Mem0[ss:bp + 0x0006:word16] - 0x0000)
	branch Test(LT,SO) l0800_C30B
	// succ:  l0800_C2F9 l0800_C30B
l0800_C2F9:
	branch Test(GT,SZO) l0800_C301
	// succ:  l0800_C2FB l0800_C301
l0800_C2FB:
	SCZO = cond(Mem0[ss:bp + 0x0004:word16] - 0x003C)
	branch Test(ULE,CZ) l0800_C30B
	// succ:  l0800_C301 l0800_C30B
l0800_C301:
	v52 = Mem0[ss:bp + 0x0004:word16] - 0x0001
	Mem0[ss:bp + 0x0004:word16] = v52
	SCZO = cond(v52)
	v53 = Mem0[ss:bp + 0x0006:word16] - 0x00 - C
	Mem0[ss:bp + 0x0006:word16] = v53
	SCZO = cond(v53)
	goto l0800_C326
	// succ:  l0800_C326
l0800_C30B:
	SCZO = cond(Mem0[ss:bp + 0x0006:word16] - 0x0000)
	branch Test(NE,Z) l0800_C326
	// succ:  l0800_C311 l0800_C326
l0800_C311:
	SCZO = cond(Mem0[ss:bp + 0x0004:word16] - 0x003C)
	branch Test(NE,Z) l0800_C326
	// succ:  l0800_C317 l0800_C326
l0800_C317:
	es_bx = Mem0[ss:bp + 0x0008:segptr32]
	Mem0[es:bx + 0x0003:byte] = 0x02
	Mem0[es:bx + 0x0002:byte] = 0x1D
	goto l0800_C377
	// succ:  l0800_C377
l0800_C326:
	es_bx = Mem0[ss:bp + 0x0008:segptr32]
	Mem0[es:bx + 0x0003:byte] = 0x00
	goto l0800_C34D
	// succ:  l0800_C34D
l0800_C330:
	es_bx = Mem0[ss:bp + 0x0008:segptr32]
	al = Mem0[es:bx + 0x0003:byte]
	ax = (int16) al
	bx = ax
	al = Mem0[ds:bx + 0x26B4:byte]
	ax = (int16) al
	dx_ax = (int32) ax
	v56 = Mem0[ss:bp + 0x0004:word16] - ax
	Mem0[ss:bp + 0x0004:word16] = v56
	SCZO = cond(v56)
	v57 = Mem0[ss:bp + 0x0006:word16] - dx - C
	Mem0[ss:bp + 0x0006:word16] = v57
	SCZO = cond(v57)
	bx = Mem0[ss:bp + 0x0008:word16]
	v58 = Mem0[es:bx + 0x0003:byte] + 0x01
	Mem0[es:bx + 0x0003:byte] = v58
	SZO = cond(v58)
	// succ:  l0800_C34D
l0800_C34D:
	es_bx = Mem0[ss:bp + 0x0008:segptr32]
	al = Mem0[es:bx + 0x0003:byte]
	ax = (int16) al
	bx = ax
	al = Mem0[ds:bx + 0x26B4:byte]
	ax = (int16) al
	dx_ax = (int32) ax
	SCZO = cond(dx - Mem0[ss:bp + 0x0006:word16])
	branch Test(LT,SO) l0800_C330
	// succ:  l0800_C362 l0800_C330
l0800_C362:
	branch Test(NE,Z) l0800_C369
	// succ:  l0800_C364 l0800_C369
l0800_C364:
	SCZO = cond(ax - Mem0[ss:bp + 0x0004:word16])
	branch Test(ULT,C) l0800_C330
	// succ:  l0800_C369 l0800_C330
l0800_C369:
	es_bx = Mem0[ss:bp + 0x0008:segptr32]
	v55 = Mem0[es:bx + 0x0003:byte] + 0x01
	Mem0[es:bx + 0x0003:byte] = v55
	SZO = cond(v55)
	al = Mem0[ss:bp + 0x0004:byte]
	Mem0[es:bx + 0x0002:byte] = al
	// succ:  l0800_C377
l0800_C377:
	bp = Mem0[ss:sp:word16]
	sp = sp + 2
	return
	// succ:  fn0800_C177_exit
fn0800_C177_exit:


// fn0800_C379
// Return size: 2
define fn0800_C379
fn0800_C379_entry:
	// succ:  l0800_C379
l0800_C379:
	sp = fp
	Top = 0
	sp = sp - 2
	Mem0[ss:sp:word16] = bp
	bp = sp
	sp = sp - 0x0004
	SCZO = cond(sp)
	sp = sp - 2
	Mem0[ss:sp:word16] = si
	sp = sp - 2
	Mem0[ss:sp:word16] = ds
	ax = 0x26E8
	sp = sp - 2
	Mem0[ss:sp:word16] = ax
	call fn0800_AFCB (retsize: 2;)
	cx = Mem0[ss:sp:word16]
	sp = sp + 2
	cx = Mem0[ss:sp:word16]
	sp = sp + 2
	Mem0[ss:bp - 0x0002:word16] = dx
	Mem0[ss:bp - 0x0004:word16] = ax
	ax = ax | dx
	SZO = cond(ax)
	C = false
	branch Test(NE,Z) l0800_C397
	// succ:  l0800_C394 l0800_C397
l0800_C394:
	goto l0800_C42C
	// succ:  l0800_C42C
l0800_C397:
	v14 = Mem0[ss:bp - 0x0002:word16]
	sp = sp - 2
	Mem0[ss:sp:word16] = v14
	v15 = Mem0[ss:bp - 0x0004:word16]
	sp = sp - 2
	Mem0[ss:sp:word16] = v15
	call fn0800_BFC7 (retsize: 2;)
	cx = Mem0[ss:sp:word16]
	sp = sp + 2
	cx = Mem0[ss:sp:word16]
	sp = sp + 2
	SCZO = cond(ax - 0x0004)
	branch Test(UGE,C) l0800_C3AA
	// succ:  l0800_C3A7 l0800_C3AA
l0800_C3A7:
	goto l0800_C42C
	// succ:  l0800_C42C
l0800_C3AA:
	es_bx = Mem0[ss:bp - 0x0004:segptr32]
	al = Mem0[es:bx:byte]
	ax = (int16) al
	bx = ax
	al = Mem0[ds:bx + 0x2251:byte]
	ax = (int16) al
	SZO = cond(ax & 0x000C)
	C = false
	branch Test(EQ,Z) l0800_C42C
	// succ:  l0800_C3BD l0800_C42C
l0800_C3BD:
	bx = Mem0[ss:bp - 0x0004:word16]
	al = Mem0[es:bx + 0x0001:byte]
	ax = (int16) al
	bx = ax
	al = Mem0[ds:bx + 0x2251:byte]
	ax = (int16) al
	SZO = cond(ax & 0x000C)
	C = false
	branch Test(EQ,Z) l0800_C42C
	// succ:  l0800_C3D1 l0800_C42C
l0800_C3D1:
	bx = Mem0[ss:bp - 0x0004:word16]
	al = Mem0[es:bx + 0x0002:byte]
	ax = (int16) al
	bx = ax
	al = Mem0[ds:bx + 0x2251:byte]
	ax = (int16) al
	SZO = cond(ax & 0x000C)
	C = false
	branch Test(EQ,Z) l0800_C42C
	// succ:  l0800_C3E5 l0800_C42C
l0800_C3E5:
	bx = Mem0[ss:bp - 0x0004:word16]
	SCZO = cond(Mem0[es:bx + 0x0003:byte] - 0x2D)
	branch Test(EQ,Z) l0800_C404
	// succ:  l0800_C3EF l0800_C404
l0800_C3EF:
	SCZO = cond(Mem0[es:bx + 0x0003:byte] - 0x2B)
	branch Test(EQ,Z) l0800_C404
	// succ:  l0800_C3F6 l0800_C404
l0800_C3F6:
	al = Mem0[es:bx + 0x0003:byte]
	ax = (int16) al
	bx = ax
	SZO = cond(Mem0[ds:bx + 0x2251:byte] & 0x02)
	C = false
	branch Test(EQ,Z) l0800_C42C
	// succ:  l0800_C404 l0800_C42C
l0800_C404:
	es_bx = Mem0[ss:bp - 0x0004:segptr32]
	al = Mem0[es:bx + 0x0003:byte]
	ax = (int16) al
	bx = ax
	al = Mem0[ds:bx + 0x2251:byte]
	ax = (int16) al
	SZO = cond(ax & 0x0002)
	C = false
	branch Test(NE,Z) l0800_C467
	// succ:  l0800_C418 l0800_C467
l0800_C418:
	bx = Mem0[ss:bp - 0x0004:word16]
	al = Mem0[es:bx + 0x0004:byte]
	ax = (int16) al
	bx = ax
	al = Mem0[ds:bx + 0x2251:byte]
	ax = (int16) al
	SZO = cond(ax & 0x0002)
	C = false
	branch Test(NE,Z) l0800_C467
	// succ:  l0800_C42C l0800_C467
l0800_C42C:
	Mem0[ds:0x26E6:word16] = 0x0001
	Mem0[ds:0x26E4:word16] = 0x0000
	Mem0[ds:0x26E2:word16] = 0x4650
	sp = sp - 2
	Mem0[ss:sp:word16] = ds
	ax = 0x26EB
	sp = sp - 2
	Mem0[ss:sp:word16] = ax
	v16 = Mem0[ds:0x26DC:word16]
	sp = sp - 2
	Mem0[ss:sp:word16] = v16
	v17 = Mem0[ds:0x26DA:word16]
	sp = sp - 2
	Mem0[ss:sp:word16] = v17
	call fn0800_BF9E (retsize: 2;)
	sp = sp + 0x0008
	SCZO = cond(sp)
	sp = sp - 2
	Mem0[ss:sp:word16] = ds
	ax = 0x26EF
	sp = sp - 2
	Mem0[ss:sp:word16] = ax
	v18 = Mem0[ds:0x26E0:word16]
	sp = sp - 2
	Mem0[ss:sp:word16] = v18
	v19 = Mem0[ds:0x26DE:word16]
	sp = sp - 2
	Mem0[ss:sp:word16] = v19
	call fn0800_BF9E (retsize: 2;)
	sp = sp + 0x0008
	SCZO = cond(sp)
	goto l0800_C54E
	// succ:  l0800_C54E
l0800_C467:
	ax = 0x0004
	sp = sp - 2
	Mem0[ss:sp:word16] = ax
	ax = ax ^ ax
	SZO = cond(ax)
	C = false
	sp = sp - 2
	Mem0[ss:sp:word16] = ax
	v24 = Mem0[ds:0x26E0:word16]
	sp = sp - 2
	Mem0[ss:sp:word16] = v24
	v25 = Mem0[ds:0x26DE:word16]
	sp = sp - 2
	Mem0[ss:sp:word16] = v25
	call fn0800_B083 (retsize: 2;)
	sp = sp + 0x0008
	SCZO = cond(sp)
	ax = 0x0003
	sp = sp - 2
	Mem0[ss:sp:word16] = ax
	v26 = Mem0[ss:bp - 0x0002:word16]
	sp = sp - 2
	Mem0[ss:sp:word16] = v26
	v27 = Mem0[ss:bp - 0x0004:word16]
	sp = sp - 2
	Mem0[ss:sp:word16] = v27
	v28 = Mem0[ds:0x26DC:word16]
	sp = sp - 2
	Mem0[ss:sp:word16] = v28
	v29 = Mem0[ds:0x26DA:word16]
	sp = sp - 2
	Mem0[ss:sp:word16] = v29
	call fn0800_C01E (retsize: 2;)
	sp = sp + 0x000A
	SCZO = cond(sp)
	es_bx = Mem0[ds:0x26DA:segptr32]
	Mem0[es:bx + 0x0003:byte] = 0x00
	ax = Mem0[ss:bp - 0x0004:word16]
	ax = ax + 0x0003
	SCZO = cond(ax)
	v30 = Mem0[ss:bp - 0x0002:word16]
	sp = sp - 2
	Mem0[ss:sp:word16] = v30
	sp = sp - 2
	Mem0[ss:sp:word16] = ax
	call fn0800_A471 (retsize: 2;)
	cx = Mem0[ss:sp:word16]
	sp = sp + 2
	cx = Mem0[ss:sp:word16]
	sp = sp + 2
	sp = sp - 2
	Mem0[ss:sp:word16] = ax
	sp = sp - 2
	Mem0[ss:sp:word16] = dx
	dx = dx ^ dx
	SZO = cond(dx)
	C = false
	ax = 0x0E10
	cx = Mem0[ss:sp:word16]
	sp = sp + 2
	bx = Mem0[ss:sp:word16]
	sp = sp + 2
	call fn0800_8F18 (retsize: 2;)
	Mem0[ds:0x26E4:word16] = dx
	Mem0[ds:0x26E2:word16] = ax
	Mem0[ds:0x26E6:word16] = 0x0000
	si = 0x0003
	goto l0800_C542
	// succ:  l0800_C542
l0800_C4CA:
	es_bx = Mem0[ss:bp - 0x0004:segptr32]
	al = Mem0[es:bx + si:byte]
	ax = (int16) al
	bx = ax
	SZO = cond(Mem0[ds:bx + 0x2251:byte] & 0x0C)
	C = false
	branch Test(EQ,Z) l0800_C541
	// succ:  l0800_C4DA l0800_C541
l0800_C4DA:
	ax = Mem0[ss:bp - 0x0004:word16]
	ax = ax + si
	SCZO = cond(ax)
	v31 = Mem0[ss:bp - 0x0002:word16]
	sp = sp - 2
	Mem0[ss:sp:word16] = v31
	sp = sp - 2
	Mem0[ss:sp:word16] = ax
	call fn0800_BFC7 (retsize: 2;)
	cx = Mem0[ss:sp:word16]
	sp = sp + 2
	cx = Mem0[ss:sp:word16]
	sp = sp + 2
	SCZO = cond(ax - 0x0003)
	branch Test(ULT,C) l0800_C54E
	// succ:  l0800_C4ED l0800_C54E
l0800_C4ED:
	es_bx = Mem0[ss:bp - 0x0004:segptr32]
	al = Mem0[es:bx + 0x0001 + si:byte]
	ax = (int16) al
	bx = ax
	al = Mem0[ds:bx + 0x2251:byte]
	ax = (int16) al
	SZO = cond(ax & 0x000C)
	C = false
	branch Test(EQ,Z) l0800_C54E
	// succ:  l0800_C501 l0800_C54E
l0800_C501:
	bx = Mem0[ss:bp - 0x0004:word16]
	al = Mem0[es:bx + 0x0002 + si:byte]
	ax = (int16) al
	bx = ax
	al = Mem0[ds:bx + 0x2251:byte]
	ax = (int16) al
	SZO = cond(ax & 0x000C)
	C = false
	branch Test(EQ,Z) l0800_C54E
	// succ:  l0800_C515 l0800_C54E
l0800_C515:
	ax = 0x0003
	sp = sp - 2
	Mem0[ss:sp:word16] = ax
	ax = Mem0[ss:bp - 0x0004:word16]
	ax = ax + si
	SCZO = cond(ax)
	v32 = Mem0[ss:bp - 0x0002:word16]
	sp = sp - 2
	Mem0[ss:sp:word16] = v32
	sp = sp - 2
	Mem0[ss:sp:word16] = ax
	v33 = Mem0[ds:0x26E0:word16]
	sp = sp - 2
	Mem0[ss:sp:word16] = v33
	v34 = Mem0[ds:0x26DE:word16]
	sp = sp - 2
	Mem0[ss:sp:word16] = v34
	call fn0800_C01E (retsize: 2;)
	sp = sp + 0x000A
	SCZO = cond(sp)
	es_bx = Mem0[ds:0x26DE:segptr32]
	Mem0[es:bx + 0x0003:byte] = 0x00
	Mem0[ds:0x26E6:word16] = 0x0001
	goto l0800_C54E
	// succ:  l0800_C54E
l0800_C541:
	si = si + 0x0001
	SZO = cond(si)
	// succ:  l0800_C542
l0800_C542:
	es_bx = Mem0[ss:bp - 0x0004:segptr32]
	SCZO = cond(Mem0[es:bx + si:byte] - 0x00)
	branch Test(EQ,Z) l0800_C54E
	// succ:  l0800_C54B l0800_C54E
l0800_C54B:
	goto l0800_C4CA
	// succ:  l0800_C4CA
l0800_C54E:
	si = Mem0[ss:sp:word16]
	sp = sp + 2
	sp = bp
	bp = Mem0[ss:sp:word16]
	sp = sp + 2
	return
	// succ:  fn0800_C379_exit
fn0800_C379_exit:


// fn0800_C553
// Return size: 2
define fn0800_C553
fn0800_C553_entry:
	// succ:  l0800_C553
l0800_C553:
	sp = fp
	Top = 0
	sp = sp - 2
	Mem0[ss:sp:word16] = bp
	bp = sp
	sp = sp - 2
	Mem0[ss:sp:word16] = si
	SCZO = cond(Mem0[ss:bp + 0x0006:word16] - 0x0000)
	branch Test(NE,Z) l0800_C589
	// succ:  l0800_C55D l0800_C589
l0800_C55D:
	si = Mem0[ss:bp + 0x0008:word16]
	SCZO = cond(Mem0[ss:bp + 0x0008:word16] - 0x003B)
	branch Test(ULT,C) l0800_C572
	// succ:  l0800_C566 l0800_C572
l0800_C566:
	ax = Mem0[ss:bp + 0x0004:word16]
	ax = ax + 0x0046
	SCZO = cond(ax)
	SZO = cond(ax & 0x0003)
	C = false
	branch Test(NE,Z) l0800_C572
	// succ:  l0800_C571 l0800_C572
l0800_C571:
	si = si - 0x0001
	SZO = cond(si)
	// succ:  l0800_C572
l0800_C572:
	Mem0[ss:bp + 0x0006:word16] = 0x0000
	goto l0800_C57C
	// succ:  l0800_C57C
l0800_C579:
	v21 = Mem0[ss:bp + 0x0006:word16] + 0x0001
	Mem0[ss:bp + 0x0006:word16] = v21
	SZO = cond(v21)
	// succ:  l0800_C57C
l0800_C57C:
	bx = Mem0[ss:bp + 0x0006:word16]
	bx = bx << 0x0001
	SCZO = cond(bx)
	SCZO = cond(Mem0[ds:bx + 0x26C0:word16] - si)
	branch Test(ULE,CZ) l0800_C579
	// succ:  l0800_C587 l0800_C579
l0800_C587:
	goto l0800_C5AA
	// succ:  l0800_C5AA
l0800_C589:
	SCZO = cond(Mem0[ss:bp + 0x0006:word16] - 0x0003)
	branch Test(ULT,C) l0800_C59A
	// succ:  l0800_C58F l0800_C59A
l0800_C58F:
	ax = Mem0[ss:bp + 0x0004:word16]
	ax = ax + 0x0046
	SCZO = cond(ax)
	SZO = cond(ax & 0x0003)
	C = false
	branch Test(EQ,Z) l0800_C59D
	// succ:  l0800_C59A l0800_C59D
l0800_C59A:
	v11 = Mem0[ss:bp + 0x0008:word16] - 0x0001
	Mem0[ss:bp + 0x0008:word16] = v11
	SZO = cond(v11)
	// succ:  l0800_C59D
l0800_C59D:
	bx = Mem0[ss:bp + 0x0006:word16]
	bx = bx - 0x0001
	SZO = cond(bx)
	bx = bx << 0x0001
	SCZO = cond(bx)
	ax = Mem0[ds:bx + 0x26C0:word16]
	v14 = Mem0[ss:bp + 0x0008:word16] + ax
	Mem0[ss:bp + 0x0008:word16] = v14
	SCZO = cond(v14)
	// succ:  l0800_C5AA
l0800_C5AA:
	SCZO = cond(Mem0[ss:bp + 0x0006:word16] - 0x0004)
	branch Test(ULT,C) l0800_C62B
	// succ:  l0800_C5B0 l0800_C62B
l0800_C5B0:
	branch Test(EQ,Z) l0800_C5BA
	// succ:  l0800_C5B2 l0800_C5BA
l0800_C5B2:
	SCZO = cond(Mem0[ss:bp + 0x0006:word16] - 0x000A)
	branch Test(UGT,CZ) l0800_C62B
	// succ:  l0800_C5B8 l0800_C62B
l0800_C5B8:
	branch Test(NE,Z) l0800_C626
	// succ:  l0800_C5BA l0800_C626
l0800_C5BA:
	bx = Mem0[ss:bp + 0x0006:word16]
	bx = bx << 0x0001
	SCZO = cond(bx)
	SCZO = cond(Mem0[ss:bp + 0x0004:word16] - 0x0010)
	branch Test(LE,SZO) l0800_C5D4
	// succ:  l0800_C5C5 l0800_C5D4
l0800_C5C5:
	SCZO = cond(Mem0[ss:bp + 0x0006:word16] - 0x0004)
	branch Test(NE,Z) l0800_C5D4
	// succ:  l0800_C5CB l0800_C5D4
l0800_C5CB:
	cx = Mem0[ds:bx + 0x26BE:word16]
	cx = cx + 0x0007
	SCZO = cond(cx)
	goto l0800_C5D8
	// succ:  l0800_C5D8
l0800_C5D4:
	cx = Mem0[ds:bx + 0x26C0:word16]
	// succ:  l0800_C5D8
l0800_C5D8:
	bx = Mem0[ss:bp + 0x0004:word16]
	bx = bx + 0x07B2
	SCZO = cond(bx)
	SZO = cond(bl & 0x03)
	C = false
	branch Test(EQ,Z) l0800_C5E5
	// succ:  l0800_C5E4 l0800_C5E5
l0800_C5E4:
	cx = cx - 0x0001
	SZO = cond(cx)
	// succ:  l0800_C5E5
l0800_C5E5:
	bx = Mem0[ss:bp + 0x0004:word16]
	bx = bx + 0x0001
	SZO = cond(bx)
	bx = bx >> 0x0001
	SCZO = cond(bx)
	bx = bx >> 0x0001
	SCZO = cond(bx)
	bx = bx + cx
	SCZO = cond(bx)
	ax = 0x016D
	dx_ax = Mem0[ss:bp + 0x0004:word16] *u ax
	SCZO = cond(dx_ax)
	ax = ax + bx
	SCZO = cond(ax)
	ax = ax + 0x0004
	SCZO = cond(ax)
	dx = dx ^ dx
	SZO = cond(dx)
	C = false
	bx = 0x0007
	v20 = dx_ax
	dx = (uint16) (v20 % bx)
	ax = (uint16) (v20 /u bx)
	SCZO = cond(ax)
	cx = cx - dx
	SCZO = cond(cx)
	ax = Mem0[ss:bp + 0x0008:word16]
	SCZO = cond(Mem0[ss:bp + 0x0006:word16] - 0x0004)
	branch Test(NE,Z) l0800_C61A
	// succ:  l0800_C60C l0800_C61A
l0800_C60C:
	SCZO = cond(ax - cx)
	branch Test(UGT,CZ) l0800_C626
	// succ:  l0800_C610 l0800_C626
l0800_C610:
	branch Test(NE,Z) l0800_C62B
	// succ:  l0800_C612 l0800_C62B
l0800_C612:
	SCZO = cond(Mem0[ss:bp + 0x000A:byte] - 0x02)
	branch Test(ULT,C) l0800_C62B
	// succ:  l0800_C618 l0800_C62B
l0800_C618:
	goto l0800_C626
	// succ:  l0800_C626
l0800_C61A:
	SCZO = cond(ax - cx)
	branch Test(ULT,C) l0800_C626
	// succ:  l0800_C61E l0800_C626
l0800_C61E:
	branch Test(NE,Z) l0800_C62B
	// succ:  l0800_C620 l0800_C62B
l0800_C620:
	SCZO = cond(Mem0[ss:bp + 0x000A:byte] - 0x01)
	branch Test(UGT,CZ) l0800_C62B
	// succ:  l0800_C626 l0800_C62B
l0800_C626:
	ax = 0x0001
	goto l0800_C62D
	// succ:  l0800_C62D
l0800_C62B:
	ax = ax ^ ax
	SZO = cond(ax)
	C = false
	// succ:  l0800_C62D
l0800_C62D:
	si = Mem0[ss:sp:word16]
	sp = sp + 2
	bp = Mem0[ss:sp:word16]
	sp = sp + 2
	return
	// succ:  fn0800_C553_exit
fn0800_C553_exit:


// fn0800_C632
// Return size: 2
define fn0800_C632
fn0800_C632_entry:
	// succ:  l0800_C632
l0800_C632:
	sp = fp
	Top = 0
	sp = sp - 2
	Mem0[ss:sp:word16] = bp
	bp = sp
	sp = sp - 0x008E
	SCZO = cond(sp)
	sp = sp - 2
	Mem0[ss:sp:word16] = si
	sp = sp - 2
	Mem0[ss:sp:word16] = di
	di = Mem0[ss:bp + 0x0004:word16]
	SCZO = cond(di - Mem0[ds:0x24E8:word16])
	branch Test(ULT,C) l0800_C64E
	// succ:  l0800_C644 l0800_C64E
l0800_C644:
	ax = 0x0006
	sp = sp - 2
	Mem0[ss:sp:word16] = ax
	call fn0800_8D2B (retsize: 2;)
	sp = sp + 0x0002
	goto l0800_C773
	// succ:  l0800_C773
l0800_C64E:
	ax = Mem0[ss:bp + 0x000A:word16]
	ax = ax + 0x0001
	SZO = cond(ax)
	SCZO = cond(ax - 0x0002)
	branch Test(UGE,C) l0800_C65C
	// succ:  l0800_C657 l0800_C65C
l0800_C657:
	ax = ax ^ ax
	SZO = cond(ax)
	C = false
	goto l0800_C773
	// succ:  l0800_C773
l0800_C65C:
	bx = di
	bx = bx << 0x0001
	SCZO = cond(bx)
	SZO = cond(Mem0[ds:bx + 0x24EA:word16] & 0x0800)
	C = false
	branch Test(EQ,Z) l0800_C677
	// succ:  l0800_C668 l0800_C677
l0800_C668:
	ax = 0x0002
	sp = sp - 2
	Mem0[ss:sp:word16] = ax
	ax = ax ^ ax
	SZO = cond(ax)
	C = false
	sp = sp - 2
	Mem0[ss:sp:word16] = ax
	sp = sp - 2
	Mem0[ss:sp:word16] = ax
	sp = sp - 2
	Mem0[ss:sp:word16] = di
	call fn0800_8E29 (retsize: 2;)
	sp = sp + 0x0008
	SCZO = cond(sp)
	// succ:  l0800_C677
l0800_C677:
	bx = di
	bx = bx << 0x0001
	SCZO = cond(bx)
	SZO = cond(Mem0[ds:bx + 0x24EA:word16] & 0x4000)
	C = false
	branch Test(NE,Z) l0800_C696
	// succ:  l0800_C683 l0800_C696
l0800_C683:
	v14 = Mem0[ss:bp + 0x000A:word16]
	sp = sp - 2
	Mem0[ss:sp:word16] = v14
	v15 = Mem0[ss:bp + 0x0008:word16]
	sp = sp - 2
	Mem0[ss:sp:word16] = v15
	v16 = Mem0[ss:bp + 0x0006:word16]
	sp = sp - 2
	Mem0[ss:sp:word16] = v16
	sp = sp - 2
	Mem0[ss:sp:word16] = di
	call fn0800_C779 (retsize: 2;)
	sp = sp + 0x0008
	SCZO = cond(sp)
	goto l0800_C773
	// succ:  l0800_C773
l0800_C696:
	bx = di
	bx = bx << 0x0001
	SCZO = cond(bx)
	v17 = Mem0[ds:bx + 0x24EA:word16] & 0xFDFF
	Mem0[ds:bx + 0x24EA:word16] = v17
	SZO = cond(Mem0[ds:bx + 0x24EA:word16])
	C = false
	ax = Mem0[ss:bp + 0x0008:word16]
	dx = Mem0[ss:bp + 0x0006:word16]
	Mem0[ss:bp - 0x000A:word16] = ax
	Mem0[ss:bp - 0x000C:word16] = dx
	ax = Mem0[ss:bp + 0x000A:word16]
	Mem0[ss:bp - 0x0006:word16] = ax
	goto l0800_C727
	// succ:  l0800_C727
l0800_C6B4:
	v20 = Mem0[ss:bp - 0x0006:word16] - 0x0001
	Mem0[ss:bp - 0x0006:word16] = v20
	SZO = cond(v20)
	es_bx = Mem0[ss:bp - 0x000C:segptr32]
	v22 = Mem0[ss:bp - 0x000C:word16] + 0x0001
	Mem0[ss:bp - 0x000C:word16] = v22
	SZO = cond(v22)
	al = Mem0[es:bx:byte]
	Mem0[ss:bp - 0x0007:byte] = al
	SCZO = cond(al - 0x0A)
	branch Test(NE,Z) l0800_C6D1
	// succ:  l0800_C6C7 l0800_C6D1
l0800_C6C7:
	es_bx = Mem0[ss:bp - 0x0004:segptr32]
	Mem0[es:bx:byte] = 0x0D
	v25 = Mem0[ss:bp - 0x0004:word16] + 0x0001
	Mem0[ss:bp - 0x0004:word16] = v25
	SZO = cond(v25)
	// succ:  l0800_C6D1
l0800_C6D1:
	es_bx = Mem0[ss:bp - 0x0004:segptr32]
	al = Mem0[ss:bp - 0x0007:byte]
	Mem0[es:bx:byte] = al
	v26 = Mem0[ss:bp - 0x0004:word16] + 0x0001
	Mem0[ss:bp - 0x0004:word16] = v26
	SZO = cond(v26)
	ax = bp - 0x008E
	dx = Mem0[ss:bp - 0x0004:word16]
	bx = bx ^ bx
	SZO = cond(bx)
	C = false
	dx = dx - ax
	SCZO = cond(dx)
	bx = bx - 0x00 - C
	SCZO = cond(bx)
	bx = bx | bx
	SZO = cond(bx)
	C = false
	branch Test(LT,SO) l0800_C731
	// succ:  l0800_C6EF l0800_C731
l0800_C6EF:
	branch Test(NE,Z) l0800_C6F7
	// succ:  l0800_C6F1 l0800_C6F7
l0800_C6F1:
	SCZO = cond(dx - 0x0080)
	branch Test(ULT,C) l0800_C731
	// succ:  l0800_C6F7 l0800_C731
l0800_C6F7:
	ax = bp - 0x008E
	si = Mem0[ss:bp - 0x0004:word16]
	dx = dx ^ dx
	SZO = cond(dx)
	C = false
	si = si - ax
	SCZO = cond(si)
	dx = dx - 0x00 - C
	SCZO = cond(dx)
	sp = sp - 2
	Mem0[ss:sp:word16] = si
	sp = sp - 2
	Mem0[ss:sp:word16] = ss
	sp = sp - 2
	Mem0[ss:sp:word16] = ax
	sp = sp - 2
	Mem0[ss:sp:word16] = di
	call fn0800_C779 (retsize: 2;)
	sp = sp + 0x0008
	SCZO = cond(sp)
	dx = ax
	SCZO = cond(ax - si)
	branch Test(EQ,Z) l0800_C727
	// succ:  l0800_C715 l0800_C727
l0800_C715:
	SCZO = cond(dx - 0xFFFF)
	branch Test(NE,Z) l0800_C71F
	// succ:  l0800_C71A l0800_C71F
l0800_C71A:
	ax = 0xFFFF
	goto l0800_C76E
	// succ:  l0800_C76E
l0800_C71F:
	ax = Mem0[ss:bp + 0x000A:word16]
	ax = ax - Mem0[ss:bp - 0x0006:word16]
	SCZO = cond(ax)
	goto l0800_C76A
	// succ:  l0800_C76A
l0800_C727:
	ax = bp - 0x008E
	Mem0[ss:bp - 0x0002:word16] = ss
	Mem0[ss:bp - 0x0004:word16] = ax
	// succ:  l0800_C731
l0800_C731:
	SCZO = cond(Mem0[ss:bp - 0x0006:word16] - 0x0000)
	branch Test(EQ,Z) l0800_C73A
	// succ:  l0800_C737 l0800_C73A
l0800_C737:
	goto l0800_C6B4
	// succ:  l0800_C6B4
l0800_C73A:
	ax = bp - 0x008E
	si = Mem0[ss:bp - 0x0004:word16]
	dx = dx ^ dx
	SZO = cond(dx)
	C = false
	si = si - ax
	SCZO = cond(si)
	dx = dx - 0x00 - C
	SCZO = cond(dx)
	ax = si
	ax = ax | ax
	SZO = cond(ax)
	C = false
	branch Test(ULE,CZ) l0800_C770
	// succ:  l0800_C74E l0800_C770
l0800_C74E:
	sp = sp - 2
	Mem0[ss:sp:word16] = si
	sp = sp - 2
	Mem0[ss:sp:word16] = ss
	ax = bp - 0x008E
	sp = sp - 2
	Mem0[ss:sp:word16] = ax
	sp = sp - 2
	Mem0[ss:sp:word16] = di
	call fn0800_C779 (retsize: 2;)
	sp = sp + 0x0008
	SCZO = cond(sp)
	dx = ax
	SCZO = cond(ax - si)
	branch Test(EQ,Z) l0800_C770
	// succ:  l0800_C762 l0800_C770
l0800_C762:
	SCZO = cond(dx - 0xFFFF)
	branch Test(EQ,Z) l0800_C71A
	// succ:  l0800_C767 l0800_C71A
l0800_C767:
	ax = Mem0[ss:bp + 0x000A:word16]
	// succ:  l0800_C76A
l0800_C76A:
	ax = ax + dx
	SCZO = cond(ax)
	ax = ax - si
	SCZO = cond(ax)
	// succ:  l0800_C76E
l0800_C76E:
	goto l0800_C773
	// succ:  l0800_C773
l0800_C770:
	ax = Mem0[ss:bp + 0x000A:word16]
	// succ:  l0800_C773
l0800_C773:
	di = Mem0[ss:sp:word16]
	sp = sp + 2
	si = Mem0[ss:sp:word16]
	sp = sp + 2
	sp = bp
	bp = Mem0[ss:sp:word16]
	sp = sp + 2
	return
	// succ:  fn0800_C632_exit
fn0800_C632_exit:


// fn0800_C779
// Return size: 2
define fn0800_C779
fn0800_C779_entry:
	// succ:  l0800_C779
l0800_C779:
	sp = fp
	Top = 0
	sp = sp - 2
	Mem0[ss:sp:word16] = bp
	bp = sp
	bx = Mem0[ss:bp + 0x0004:word16]
	bx = bx << 0x0001
	SCZO = cond(bx)
	SZO = cond(Mem0[ds:bx + 0x24EA:word16] & 0x0001)
	C = false
	branch Test(EQ,Z) l0800_C78F
	// succ:  l0800_C789 l0800_C78F
l0800_C789:
	ax = 0x0005
	sp = sp - 2
	Mem0[ss:sp:word16] = ax
	goto l0800_C7B0
	// succ:  l0800_C7B0
l0800_C78F:
	sp = sp - 2
	Mem0[ss:sp:word16] = ds
	ah = 0x40
	bx = Mem0[ss:bp + 0x0004:word16]
	cx = Mem0[ss:bp + 0x000A:word16]
	ds_dx = Mem0[ss:bp + 0x0006:segptr32]
	C = msdos_write_file(bx, cx, ds_dx, out ax)
	ds = Mem0[ss:sp:selector]
	sp = sp + 2
	branch Test(ULT,C) l0800_C7AF
	// succ:  l0800_C7A0 l0800_C7AF
l0800_C7A0:
	sp = sp - 2
	Mem0[ss:sp:word16] = ax
	bx = Mem0[ss:bp + 0x0004:word16]
	bx = bx << 0x0001
	SCZO = cond(bx)
	v16 = Mem0[ds:bx + 0x24EA:word16] | 0x1000
	Mem0[ds:bx + 0x24EA:word16] = v16
	SZO = cond(Mem0[ds:bx + 0x24EA:word16])
	C = false
	ax = Mem0[ss:sp:word16]
	sp = sp + 2
	goto l0800_C7B3
	// succ:  l0800_C7B3
l0800_C7AF:
	sp = sp - 2
	Mem0[ss:sp:word16] = ax
	// succ:  l0800_C7B0
l0800_C7B0:
	call fn0800_8D2B (retsize: 2;)
	sp = sp + 0x0002
	// succ:  l0800_C7B3
l0800_C7B3:
	bp = Mem0[ss:sp:word16]
	sp = sp + 2
	return
	// succ:  fn0800_C779_exit
fn0800_C779_exit:


// fn1483_0ADB
// Return size: 2
define fn1483_0ADB
fn1483_0ADB_entry:
	// succ:  l1483_0ADB
l1483_0ADB:
	sp = fp
	Top = 0
	return
	// succ:  fn1483_0ADB_exit
fn1483_0ADB_exit:


// fn1483_0ADC
// Return size: 2
define fn1483_0ADC
fn1483_0ADC_entry:
	// succ:  l1483_0ADC
l1483_0ADC:
	sp = fp
	Top = 0
	call fn1483_0D3F (retsize: 2;)
	ST[Top:real64] = Mem0[es:di + 0xE086:real32] - ST[Top:real64]
	v6 = sp
	sp = sp - 2
	Mem0[ss:sp:word16] = ax
	sp = sp - 2
	Mem0[ss:sp:word16] = cx
	sp = sp - 2
	Mem0[ss:sp:word16] = dx
	sp = sp - 2
	Mem0[ss:sp:word16] = bx
	sp = sp - 2
	Mem0[ss:sp:word16] = v6
	sp = sp - 2
	Mem0[ss:sp:word16] = bp
	sp = sp - 2
	Mem0[ss:sp:word16] = si
	sp = sp - 2
	Mem0[ss:sp:word16] = di
	return
	// succ:  fn1483_0ADC_exit
fn1483_0ADC_exit:


// fn1483_0C11
// Return size: 2
define fn1483_0C11
fn1483_0C11_entry:
	// succ:  l1483_0C11
l1483_0C11:
	sp = fp
	Top = 0
	dx = 0x8000
	sp = sp - 2
	Mem0[ss:sp:word16] = cx
	sp = sp - 2
	Mem0[ss:sp:word16] = si
	SCZO = cond(al - Mem0[ss:si:byte])
	branch Test(NE,Z) l1483_0C4D
	goto l1483_0C1B
	// succ:  l1483_0C1B l1483_0C4D
l1483_0C11:
l1483_0C1B:
	sp = sp - 2
	Mem0[ss:sp:word16] = ax
	sp = sp - 2
	Mem0[ss:sp:word16] = bx
	al = al - 0x8C - C
	SCZO = cond(al)
	ax = 0x1955
	cx = cx - 0x0001
	branch Test(NE,Z) && cx != 0x0000 l1483_0C22_thunk_fn1483_0C6C
	goto l1483_0C24
	// succ:  l1483_0C24 l1483_0C22_thunk_fn1483_0C6C
l1483_0C22_thunk_fn1483_0C6C:
	call fn1483_0C6C (retsize: 0;)
	return
	// succ:  fn1483_0C11_exit
l1483_0C24:
	Mem0[es:di:word16] = ax
	di = di + 0x0002
	SCZO = cond(Mem0[ds:si:word16] - Mem0[es:di:word16])
	si = si + 0x0002
	di = di + 0x0002
	cl = 0x9B
l1483_0C4D:
	si = Mem0[ss:sp:word16]
	sp = sp + 2
	cx = Mem0[ss:sp:word16]
	sp = sp + 2
	dx = dx >>u 0x0001
	SCZO = cond(dx)
	al = al + 0x01
	SZO = cond(al)
	SCZO = cond(al - 0x11)
	// succ:  l1483_0C53_thunk_fn1483_0C55
l1483_0C53_thunk_fn1483_0C55:
	call fn1483_0C55 (retsize: 0;)
	return
	// succ:  fn1483_0C11_exit
fn1483_0C11_exit:


// fn1483_0C55
// Return size: 2
define fn1483_0C55
fn1483_0C55_entry:
	// succ:  l1483_0C55
l1483_0C55:
	sp = fp
	Top = 0
	branch Test(NE,Z) l1483_0C55_thunk_fn1483_0C11
	goto l1483_0C57
	// succ:  l1483_0C57 l1483_0C55_thunk_fn1483_0C11
l1483_0C55:
l1483_0C55_thunk_fn1483_0C11:
	call fn1483_0C11 (retsize: 0;)
	return
	// succ:  fn1483_0C55_exit
l1483_0C57:
	si = Mem0[ss:sp:word16]
	sp = sp + 2
	SZO = cond(Mem0[ds:si:word16] & ax)
	C = false
	dx = Mem0[ss:sp:word16]
	sp = sp + 2
	di = Mem0[ss:sp:word16]
	sp = sp + 2
	return
	// succ:  fn1483_0C55_exit
fn1483_0C55_exit:


// fn1483_0C6C
// Return size: 2
define fn1483_0C6C
fn1483_0C6C_entry:
	// succ:  l1483_0C6C
l1483_0C6C:
	sp = fp
	Top = 0
	D = false
	C = __daa(al, &al)
	call fn1483_1BB8 (retsize: 2;)
	di = di + Mem0[ds:bx:word16]
	SCZO = cond(di)
	ax = ax + Mem0[ds:bx + 0x3303:word16]
	SCZO = cond(ax)
	v11 = eax
	eax = ebx
	ebx = v11
	dh = dh + Mem0[ds:si + 0x147C:byte] + C
	SCZO = cond(dh)
	ax = ax - 0x0903 - C
	SCZO = cond(ax)
	sp = Mem0[ss:sp:word16]
	sp = sp + 2
	v17 = Mem0[ds:bx + 0x020E + di:word16] + di
	Mem0[ds:bx + 0x020E + di:word16] = v17
	SCZO = cond(v17)
	cx = cx - 0x0001
	branch Test(NE,Z) && cx != 0x0000 l1483_0C85_thunk_fn1483_0CA0
	goto l1483_0C87
	// succ:  l1483_0C87 l1483_0C85_thunk_fn1483_0CA0
l1483_0C6C:
l1483_0C85_thunk_fn1483_0CA0:
	call fn1483_0CA0 (retsize: 0;)
	return
	// succ:  fn1483_0C6C_exit
l1483_0C87:
	dx = dx | cx
	SZO = cond(dx)
	C = false
	ax = Mem0[ds:bx:word16]
	sp = sp - 2
	Mem0[ss:sp:word16] = si
	ch = ch + al + C
	SCZO = cond(ch)
	v23 = Mem0[ds:si:byte]
	Mem0[es:di:byte] = v23
	si = si + 0x0001
	di = di + 0x0001
	ax = ax + ax
	SCZO = cond(ax)
	// succ:  l1483_0C8F_thunk_fn1483_0C91
l1483_0C8F_thunk_fn1483_0C91:
	call fn1483_0C91 (retsize: 0;)
	return
	// succ:  fn1483_0C6C_exit
fn1483_0C6C_exit:


// fn1483_0C91
// Return size: 2
define fn1483_0C91
fn1483_0C91_entry:
	// succ:  l1483_0C91
l1483_0C91:
	sp = fp
	Top = 0
	es = Mem0[ss:sp:selector]
	sp = sp + 2
	dx = dx + ax + C
	SCZO = cond(dx)
	al = al + ch
	SCZO = cond(al)
	branch Test(NO,O) l1483_0C96_thunk_fn1483_0C55
	goto l1483_0C98
	// succ:  l1483_0C98 l1483_0C96_thunk_fn1483_0C55
l1483_0C91:
l1483_0C96_thunk_fn1483_0C55:
	call fn1483_0C55 (retsize: 0;)
	return
	// succ:  fn1483_0C91_exit
l1483_0C98:
	dx = Mem0[ds:bx + si:word16] *s 0x0018
	SCZO = cond(dx)
	cx = cx - 0x0001
	branch Test(EQ,Z) && cx != 0x0000 l1483_0CA9_in_fn1483_0C91
	// succ:  l1483_0C9D l1483_0CA9_in_fn1483_0C91
l1483_0C9D:
	v45 = Mem0[ds:bx + 0x2203 + si:word16] + cx
	Mem0[ds:bx + 0x2203 + si:word16] = v45
	SCZO = cond(v45)
	// succ:  l1483_0C9D_thunk_fn1483_0CA1
l1483_0C9D_thunk_fn1483_0CA1:
	call fn1483_0CA1 (retsize: 0;)
	return
	// succ:  fn1483_0C91_exit
l1483_0CA9_in_fn1483_0C91:
	dl = dl + Mem0[ds:bx:byte]
	SCZO = cond(dl)
	dx = Mem0[ds:si + 0x173E:word16] *s 0x0C62
	SCZO = cond(dx)
	v13 = Mem0[ds:bx:byte] + dl
	Mem0[ds:bx:byte] = v13
	SCZO = cond(v13)
	bp = bp - 0x0001
	SZO = cond(bp)
	bl = bl + ah
	SCZO = cond(bl)
	ax = ax - 0x32AC
	SCZO = cond(ax)
	v17 = (Mem0[ds:bx - 0x0056 + di:byte] & 0x01 << 0x08 - 0xE2) != 0x00
	Mem0[ds:bx - 0x0056 + di:byte] = __rol(Mem0[ds:bx - 0x0056 + di:byte], 0xE2)
	C = v17
	C = true
	v19 = (Mem0[ss:bp + 0x007C:word16] & 0x0001 << 0x01) != 0x0000
	Mem0[ss:bp + 0x007C:word16] = __ror(Mem0[ss:bp + 0x007C:word16], 0x01)
	C = v19
	v21 = Mem0[ds:bx:byte] + bl + C
	Mem0[ds:bx:byte] = v21
	SCZO = cond(v21)
	bl = bl & Mem0[ds:bx:byte]
	SZO = cond(bl)
	C = false
	Mem0[es:di:byte] = al
	di = di + 0x0001
	ax = ax - 0x8B1F - C
	SCZO = cond(ax)
	v23 = Mem0[ds:bx:word16] + bx
	Mem0[ds:bx:word16] = v23
	SCZO = cond(v23)
	cx = di
	cx = cx - si
	SCZO = cond(cx)
	v25 = Mem0[ds:di + 0x0014:word16]
	Mem0[ds:di + 0x0014:word16] = ax
	ax = v25
	call fn1483_4FE0 (retsize: 2;)
	v26 = Mem0[ds:0xF7E3:word16] - dx
	Mem0[ds:0xF7E3:word16] = v26
	SCZO = cond(v26)
	ax = ax - sp
	SCZO = cond(ax)
	v27 = Mem0[ds:bx + di:word16] + bp
	Mem0[ds:bx + di:word16] = v27
	SCZO = cond(v27)
	sp = sp - 2
	Mem0[ss:sp:word16] = si
	sp = sp - 2
	Mem0[ss:sp:word16] = cx
	cl = cl - Mem0[ss:(bp + 0x027E) + di:byte] - C
	SCZO = cond(cl)
	sp = sp - 2
	Mem0[ss:sp:word16] = si
	ax = __inw(0x8B)
	return
	// succ:  fn1483_0C91_exit
fn1483_0C91_exit:


// fn1483_0CA0
// Return size: 2
define fn1483_0CA0
fn1483_0CA0_entry:
	// succ:  l1483_0CA0
l1483_0CA0:
	sp = fp
	Top = 0
	al = al & Mem0[ds:0x3101:byte]
	SZO = cond(al)
	C = false
	goto l1483_0CA0_thunk_fn1483_0CA1
	// succ:  l1483_0CA0_thunk_fn1483_0CA1
l1483_0CA0:
l1483_0CA0_thunk_fn1483_0CA1:
	call fn1483_0CA1 (retsize: 0;)
	return
	// succ:  fn1483_0CA0_exit
fn1483_0CA0_exit:


// fn1483_0CA1
// Return size: 0
define fn1483_0CA1
fn1483_0CA1_entry:
	// succ:  l1483_0CA1
l1483_0CA1:
	sp = fp
	Top = 0
	sp = sp - 2
	Mem0[ss:sp:word16] = es
	v9 = Mem0[ds:bx + di:word16] + si
	Mem0[ds:bx + di:word16] = v9
	SCZO = cond(v9)
	ah = ah + Mem0[ds:bx + si:byte]
	SCZO = cond(ah)
	call fn1483_FD4E (retsize: 2;)
	goto l1483_0CA9_in_fn1483_0CA1
	// succ:  l1483_0CA9_in_fn1483_0CA1
l1483_0CA1:
	ah = ah + Mem0[ds:bx + si:byte]
	SCZO = cond(ah)
	call fn1483_FD4E (retsize: 2;)
	// succ:  l1483_0CA9
l1483_0CA9:
	dl = dl + Mem0[ds:bx:byte]
	SCZO = cond(dl)
	dx = Mem0[ds:si + 0x173E:word16] *s 0x0C62
	SCZO = cond(dx)
	v44 = Mem0[ds:bx:byte] + dl
	Mem0[ds:bx:byte] = v44
	SCZO = cond(v44)
	bp = bp - 0x0001
	SZO = cond(bp)
	bl = bl + ah
	SCZO = cond(bl)
	ax = ax - 0x32AC
	SCZO = cond(ax)
	v45 = (Mem0[ds:bx - 0x0056 + di:byte] & 0x01 << 0x08 - 0xE2) != 0x00
	Mem0[ds:bx - 0x0056 + di:byte] = __rol(Mem0[ds:bx - 0x0056 + di:byte], 0xE2)
	C = v45
	C = true
	v46 = (Mem0[ss:bp + 0x007C:word16] & 0x0001 << 0x01) != 0x0000
	Mem0[ss:bp + 0x007C:word16] = __ror(Mem0[ss:bp + 0x007C:word16], 0x01)
	C = v46
	v47 = Mem0[ds:bx:byte] + bl + C
	Mem0[ds:bx:byte] = v47
	SCZO = cond(v47)
	bl = bl & Mem0[ds:bx:byte]
	SZO = cond(bl)
	C = false
	Mem0[es:di:byte] = al
	di = di + 0x0001
	ax = ax - 0x8B1F - C
	SCZO = cond(ax)
	v48 = Mem0[ds:bx:word16] + bx
	Mem0[ds:bx:word16] = v48
	SCZO = cond(v48)
	cx = di
	cx = cx - si
	SCZO = cond(cx)
	v49 = Mem0[ds:di + 0x0014:word16]
	Mem0[ds:di + 0x0014:word16] = ax
	ax = v49
	call fn1483_4FE0 (retsize: 2;)
	v50 = Mem0[ds:0xF7E3:word16] - dx
	Mem0[ds:0xF7E3:word16] = v50
	SCZO = cond(v50)
	ax = ax - sp
	SCZO = cond(ax)
	v51 = Mem0[ds:bx + di:word16] + bp
	Mem0[ds:bx + di:word16] = v51
	SCZO = cond(v51)
	sp = sp - 2
	Mem0[ss:sp:word16] = si
	sp = sp - 2
	Mem0[ss:sp:word16] = cx
	cl = cl - Mem0[ss:(bp + 0x027E) + di:byte] - C
	SCZO = cond(cl)
	sp = sp - 2
	Mem0[ss:sp:word16] = si
	ax = __inw(0x8B)
	goto l1483_0CE5
	// succ:  l1483_0CE5
l1483_0CA9_in_fn1483_0CA1:
	dl = dl + Mem0[ds:bx:byte]
	SCZO = cond(dl)
	dx = Mem0[ds:si + 0x173E:word16] *s 0x0C62
	SCZO = cond(dx)
	v13 = Mem0[ds:bx:byte] + dl
	Mem0[ds:bx:byte] = v13
	SCZO = cond(v13)
	bp = bp - 0x0001
	SZO = cond(bp)
	bl = bl + ah
	SCZO = cond(bl)
	ax = ax - 0x32AC
	SCZO = cond(ax)
	v17 = (Mem0[ds:bx - 0x0056 + di:byte] & 0x01 << 0x08 - 0xE2) != 0x00
	Mem0[ds:bx - 0x0056 + di:byte] = __rol(Mem0[ds:bx - 0x0056 + di:byte], 0xE2)
	C = v17
	C = true
	v19 = (Mem0[ss:bp + 0x007C:word16] & 0x0001 << 0x01) != 0x0000
	Mem0[ss:bp + 0x007C:word16] = __ror(Mem0[ss:bp + 0x007C:word16], 0x01)
	C = v19
	v21 = Mem0[ds:bx:byte] + bl + C
	Mem0[ds:bx:byte] = v21
	SCZO = cond(v21)
	bl = bl & Mem0[ds:bx:byte]
	SZO = cond(bl)
	C = false
	Mem0[es:di:byte] = al
	di = di + 0x0001
	ax = ax - 0x8B1F - C
	SCZO = cond(ax)
	v23 = Mem0[ds:bx:word16] + bx
	Mem0[ds:bx:word16] = v23
	SCZO = cond(v23)
	cx = di
	cx = cx - si
	SCZO = cond(cx)
	v25 = Mem0[ds:di + 0x0014:word16]
	Mem0[ds:di + 0x0014:word16] = ax
	ax = v25
	call fn1483_4FE0 (retsize: 2;)
	v26 = Mem0[ds:0xF7E3:word16] - dx
	Mem0[ds:0xF7E3:word16] = v26
	SCZO = cond(v26)
	ax = ax - sp
	SCZO = cond(ax)
	v27 = Mem0[ds:bx + di:word16] + bp
	Mem0[ds:bx + di:word16] = v27
	SCZO = cond(v27)
	sp = sp - 2
	Mem0[ss:sp:word16] = si
	sp = sp - 2
	Mem0[ss:sp:word16] = cx
	cl = cl - Mem0[ss:(bp + 0x027E) + di:byte] - C
	SCZO = cond(cl)
	sp = sp - 2
	Mem0[ss:sp:word16] = si
	ax = __inw(0x8B)
	return
	// succ:  fn1483_0CA1_exit
l1483_0CE5:
	return
	// succ:  fn1483_0CA1_exit
fn1483_0CA1_exit:


// fn1483_0CFA
// Return size: 2
define fn1483_0CFA
fn1483_0CFA_entry:
	// succ:  l1483_0CFA
l1483_0CFA:
	sp = fp
	Top = 0
	v7 = Mem0[ds:si + 0xD832:byte] - ch - C
	Mem0[ds:si + 0xD832:byte] = v7
	SCZO = cond(v7)
	goto l1483_0CFA_thunk_fn1483_0CFC
	// succ:  l1483_0CFA_thunk_fn1483_0CFC
l1483_0CFA:
l1483_0CFA_thunk_fn1483_0CFC:
	call fn1483_0CFC (retsize: 0;)
	return
	// succ:  fn1483_0CFA_exit
fn1483_0CFA_exit:


// fn1483_0CFC
// Return size: 2
define fn1483_0CFC
fn1483_0CFC_entry:
	// succ:  l1483_0CFC
l1483_0CFC:
	sp = fp
	Top = 0
	bl = bl ^ al
	SZO = cond(bl)
	C = false
	al = Mem0[ds:bx + di:byte]
	Mem0[ss:bp + si:word16] = 0xD1FF
	branch cx == 0x0000 l1483_0D04_thunk_fn1483_0C91
	goto l1483_0D04_thunk_fn1483_0D06
	// succ:  l1483_0D04_thunk_fn1483_0D06 l1483_0D04_thunk_fn1483_0C91
l1483_0CFC:
	al = Mem0[ds:bx + di:byte]
	Mem0[ss:bp + si:word16] = 0xD1FF
	branch cx == 0x0000 l1483_0D04_thunk_fn1483_0C91
	// succ:  l1483_0D02_thunk_fn1483_0D06 l1483_0D04_thunk_fn1483_0C91
l1483_0D02_thunk_fn1483_0D06:
	call fn1483_0D06 (retsize: 0;)
	return
	// succ:  fn1483_0CFC_exit
l1483_0D04_thunk_fn1483_0C91:
	call fn1483_0C91 (retsize: 0;)
	return
	// succ:  fn1483_0CFC_exit
l1483_0D04_thunk_fn1483_0C91:
	call fn1483_0C91 (retsize: 0;)
	return
	// succ:  fn1483_0CFC_exit
l1483_0D04_thunk_fn1483_0D06:
	call fn1483_0D06 (retsize: 0;)
	return
	// succ:  fn1483_0CFC_exit
fn1483_0CFC_exit:


// fn1483_0D06
// Return size: 0
define fn1483_0D06
fn1483_0D06_entry:
	// succ:  l1483_0D06
l1483_0D06:
	sp = v4
	Top = 0
	v9 = Mem0[ds:bx + 0xE209:word16] - dx - C
	Mem0[ds:bx + 0xE209:word16] = v9
	SCZO = cond(v9)
	ax = ax - 0x5EF1
	SCZO = cond(ax)
	SCZO = cond(bx - dx)
	branch Test(EQ,Z) l1483_0D2B
	// succ:  l1483_0D11 l1483_0D2B
l1483_0D11:
	dx = 0x0D14
	dx = dx + 0x000D
	SCZO = cond(dx)
	ah = 0x09
	msdos_display_string(ds_dx)
	ax = 0x4CFF
	al = al + 0x70
	SCZO = cond(al)
	dx = dx + 0x0001
	SZO = cond(dx)
	di = Mem0[ss:sp:word16]
	sp = sp + 0x0002
	si = Mem0[ss:sp:word16]
	sp = sp + 0x0002
	bp = Mem0[ss:sp:word16]
	sp = sp + 0x0002
	sp = sp + 0x0002
	bx = Mem0[ss:sp:word16]
	sp = sp + 0x0002
	dx = Mem0[ss:sp:word16]
	sp = sp + 0x0002
	cx = Mem0[ss:sp:word16]
	sp = sp + 0x0002
	ax = Mem0[ss:sp:word16]
	sp = sp + 0x0002
	v23 = Mem0[fs:bp + 0x0052 + di:byte] & al
	Mem0[fs:bp + 0x0052 + di:byte] = v23
	SZO = cond(Mem0[fs:bp + 0x0052 + di:byte])
	C = false
	bx = bx + 0x0001
	SZO = cond(bx)
	ax = ax | 0x240A
	SZO = cond(ax)
	C = false
	// succ:  l1483_0D2B
l1483_0D2B:
	return
	// succ:  fn1483_0D06_exit
fn1483_0D06_exit:


// fn1483_0D3F
// Return size: 2
define fn1483_0D3F
fn1483_0D3F_entry:
	goto l1483_0D3F
	// succ:  l1483_0D3F
l1483_0CE5_in_fn1483_0D3F:
	return
	// succ:  fn1483_0D3F_exit
l1483_0CED:
	si = si + Mem0[ds:di:word16]
	SCZO = cond(si)
	v37 = Mem0[ds:bx + 0xF7E2 + si:word16] + sp
	Mem0[ds:bx + 0xF7E2 + si:word16] = v37
	SCZO = cond(v37)
	Mem0[es:di:word16] = ax
	di = di + 0x0002
	bl = bl + 0x01
	SZO = cond(bl)
	branch Test(NE,Z) l1483_0CE5_in_fn1483_0D3F
	// succ:  l1483_0CF8 l1483_0CE5_in_fn1483_0D3F
l1483_0CF8:
	cx = Mem0[ss:sp:word16]
	sp = sp + 2
	v38 = (Mem0[ds:bx + si:byte] & 0x01 << 0xAC) != 0x00
	Mem0[ds:bx + si:byte] = __rcr(Mem0[ds:bx + si:byte], 0xAC, C)
	C = v38
	// succ:  l1483_0CF9_thunk_fn1483_0CFC
l1483_0CF9_thunk_fn1483_0CFC:
	call fn1483_0CFC (retsize: 0;)
	return
	// succ:  fn1483_0D3F_exit
l1483_0D3F:
	sp = fp
	Top = 0
	sp = sp - 2
	Mem0[ss:sp:word16] = ax
	branch Test(PE,P) l1483_0D40_thunk_fn1483_0CFA
	goto l1483_0D42
	// succ:  l1483_0D42 l1483_0D40_thunk_fn1483_0CFA
l1483_0D40_thunk_fn1483_0CFA:
	call fn1483_0CFA (retsize: 0;)
	return
	// succ:  fn1483_0D3F_exit
l1483_0D42:
	al = al + ch
	SCZO = cond(al)
	bl = 0xB4
	ch = ch - Mem0[ds:(bx + 0x0002) + si:byte]
	SCZO = cond(ch)
	ax = ax + 0xFC68 + C
	SCZO = cond(ax)
	sp = sp - 2
	Mem0[ss:sp:word16] = si
	dh = dh ^ 0x17
	SZO = cond(dh)
	C = false
	branch Test(LT,SO) l1483_0CED
	// succ:  l1483_0D52 l1483_0CED
l1483_0D52:
	ah = ah + Mem0[ds:di:byte]
	SCZO = cond(ah)
	sp = sp - 2
	Mem0[ss:sp:word16] = 0x0F5F
	sp = sp - 2
	Mem0[ss:sp:word16] = 0x0C58
	v19 = Mem0[ds:bx + 0x0043 + si:word16]
	Mem0[ds:bx + 0x0043 + si:word16] = bp
	bp = v19
	v21 = Mem0[ds:di:byte] << 0x68
	Mem0[ds:di:byte] = v21
	SCZO = cond(v21)
	sp = sp + 0x0012
	SCZO = cond(sp)
	C = false
	v22 = -Mem0[ss:bp - 0x0006:word16]
	Mem0[ss:bp - 0x0006:word16] = v22
	SCZO = cond(v22)
	C = v22 == 0x0000
	sp = sp - 2
	Mem0[ss:sp:word16] = es
	branch Test(NO,O) l1483_0D69
	// succ:  l1483_0D68_1 l1483_0D69
l1483_0D68_1:
	__syscall(0x04)
	// succ:  l1483_0D69
l1483_0D69:
	Mem0[ds:si + 0x5C87:byte] = ch
	SZO = cond(Mem0[ds:si:word16] & dx)
	C = false
	call fn1483_8A82 (retsize: 2;)
	v26 = sp
	sp = sp - 2
	Mem0[ss:sp:word16] = ax
	sp = sp - 2
	Mem0[ss:sp:word16] = cx
	sp = sp - 2
	Mem0[ss:sp:word16] = dx
	sp = sp - 2
	Mem0[ss:sp:word16] = bx
	sp = sp - 2
	Mem0[ss:sp:word16] = v26
	sp = sp - 2
	Mem0[ss:sp:word16] = bp
	sp = sp - 2
	Mem0[ss:sp:word16] = si
	sp = sp - 2
	Mem0[ss:sp:word16] = di
	bx = bx + Mem0[ds:(bx - 0x0079) + di:word16] + C
	SCZO = cond(bx)
	v28 = Mem0[ss:bp + 0xF512 + di:byte] + dh + C
	Mem0[ss:bp + 0xF512 + di:byte] = v28
	SCZO = cond(v28)
	v29 = Mem0[ds:bx + 0x007D:byte] & al
	Mem0[ds:bx + 0x007D:byte] = v29
	SZO = cond(Mem0[ds:bx + 0x007D:byte])
	C = false
	ax = ax - 0x8747 - C
	SCZO = cond(ax)
	al = al + ch + C
	SCZO = cond(al)
	v30 = ax
	ax = si
	si = v30
	ax = __aad(ax)
	v31 = Mem0[ds:si + 0x995D:word16]
	Mem0[ds:si + 0x995D:word16] = si
	si = v31
	v32 = sp
	sp = sp - 2
	Mem0[ss:sp:word16] = v32
	al = al + 0x2A
	SCZO = cond(al)
	dh = dh - bh - C
	SCZO = cond(dh)
	bx = bx + Mem0[ds:bx + si:word16]
	SCZO = cond(bx)
	C = false
	al = al + ch
	SCZO = cond(al)
	SCZDOP = Mem0[ss:sp:word16]
	sp = sp + 2
	cx = cx - 0x0001
	branch Test(EQ,Z) && cx != 0x0000 l1483_0D99
	// succ:  l1483_0D97 l1483_0D99
l1483_0D97:
	v36 = Mem0[ds:bx + 0x0028 + di:byte] - ah - C
	Mem0[ds:bx + 0x0028 + di:byte] = v36
	SCZO = cond(v36)
	goto l1483_0D9A
	// succ:  l1483_0D9A
l1483_0D99:
	v53 = Mem0[ds:bx + si:byte] - bl
	Mem0[ds:bx + si:byte] = v53
	SCZO = cond(v53)
	goto l1483_0D9B
	// succ:  l1483_0D9B
l1483_0D9A:
	v39 = Mem0[ds:si + 0x005A:byte] - bh - C
	Mem0[ds:si + 0x005A:byte] = v39
	SCZO = cond(v39)
	// succ:  l1483_0D9B
l1483_0D9B:
	al = al | 0x3F
	SZO = cond(al)
	C = false
	v40 = Mem0[ds:di + 0x002D:byte] - al - C
	Mem0[ds:di + 0x002D:byte] = v40
	SCZO = cond(v40)
	dl = 0x99
	Mem0[es:di:byte] = al
	di = di + 0x0001
	branch Test(NS,S) l1483_0DB9
	// succ:  l1483_0DA7 l1483_0DB9
l1483_0DA7:
	Mem0[es:di:byte] = al
	di = di + 0x0001
	branch Test(NS,S) l1483_0DBE
	// succ:  l1483_0DAA l1483_0DBE
l1483_0DAA:
	C = false
	v43 = -Mem0[ss:bp + si:word16]
	Mem0[ss:bp + si:word16] = v43
	SCZO = cond(v43)
	C = v43 == 0x0000
	__cli()
	di = di - 0x0001
	SZO = cond(di)
	Mem0[ds:bx + 0x0045 + di:word16] = Mem0[ss:sp:word16]
	sp = sp + 2
	ax = Mem0[ss:sp:word16]
	sp = sp + 2
	bp = bp + 0x0001
	SZO = cond(bp)
	v44 = Mem0[ds:bx + 0xC079 + si:word16] + bp
	Mem0[ds:bx + 0xC079 + si:word16] = v44
	SCZO = cond(v44)
	bp = bp - 0x0001
	SZO = cond(bp)
	// succ:  l1483_0DB9
l1483_0DB9:
	dx = Mem0[ss:sp:word16]
	sp = sp + 2
	v45 = Mem0[ds:bx + di:byte] >>u 0x01
	Mem0[ds:bx + di:byte] = v45
	SCZO = cond(v45)
	v47 = Mem0[ds:bx + 0x0002 + di:byte] + cl
	Mem0[ds:bx + 0x0002 + di:byte] = v47
	SCZO = cond(v47)
	goto l1483_0DBF
	// succ:  l1483_0DBF
l1483_0DBE:
	al = al + Mem0[ds:0x0047:byte]
	SCZO = cond(al)
	goto l1483_0DC2
	// succ:  l1483_0DC2
l1483_0DBF:
	sp = sp - 2
	Mem0[ss:sp:word16] = es
	di = di + 0x0001
	SZO = cond(di)
	v48 = Mem0[ds:0x03BC:byte] + cl
	Mem0[ds:0x03BC:byte] = v48
	SCZO = cond(v48)
	goto l1483_0DC5
	// succ:  l1483_0DC5
l1483_0DC2:
	sp = sp - 2
	Mem0[ss:sp:word16] = cs
	sp = 0x0B03
	goto l1483_0DC6
	// succ:  l1483_0DC6
l1483_0DC5:
	ax = ax | Mem0[ds:0x0E00:word16]
	SZO = cond(ax)
	C = false
	goto l1483_0DC9
	// succ:  l1483_0DC9
l1483_0DC6:
	sp = sp - 2
	Mem0[ss:sp:word16] = es
	v50 = Mem0[ds:0x8C00:byte] + cl
	Mem0[ds:0x8C00:byte] = v50
	SCZO = cond(v50)
	goto l1483_0DCB
	// succ:  l1483_0DCB
l1483_0DC9:
	v51 = Mem0[ds:si + 0x8ED3:byte] + cl
	Mem0[ds:si + 0x8ED3:byte] = v51
	SCZO = cond(v51)
	goto l1483_0DCD
	// succ:  l1483_0DCD
l1483_0DCB:
	v52 = (Mem0[ss:bp + 0x8CC3:word16] & 0x0001 << cl) != 0x0000
	Mem0[ss:bp + 0x8CC3:word16] = __ror(Mem0[ss:bp + 0x8CC3:word16], cl)
	C = v52
	goto l1483_0DCF
	// succ:  l1483_0DCF
l1483_0DCD:
	return
	// succ:  fn1483_0D3F_exit
l1483_0DCF:
	return
	// succ:  fn1483_0D3F_exit
fn1483_0D3F_exit:


// fn1483_1104
// Return size: 0
define fn1483_1104
fn1483_1104_entry:
	// succ:  l1483_1104
l1483_1104:
	sp = fp
	Top = 0
	ax = ax - 0x5D97
	SCZO = cond(ax)
	dh = 0x26
	ax = __aam(al)
	al = al - 0x75 - C
	SCZO = cond(al)
	// succ:  l1483_110D
l1483_110D:
	dh = 0x34
	D = true
	v12 = Mem0[ss:bp + 0x450F:word16] + si + C
	Mem0[ss:bp + 0x450F:word16] = v12
	SCZO = cond(v12)
	ax = ax + bp
	SCZO = cond(ax)
	ax = ax + 0x0001
	SZO = cond(ax)
	sp = sp - 2
	Mem0[ss:sp:word16] = es
	cl = 0x1C
	Mem0[ss:bp + 0x005E + si:word16] = dx
	v20 = Mem0[ds:bx + 0x675E + di:word16] - 0x007D
	Mem0[ds:bx + 0x675E + di:word16] = v20
	SCZO = cond(v20)
	ax = ax - 0xCA22 - C
	SCZO = cond(ax)
	bl = bl + Mem0[ss:bp - 0x0020:byte]
	SCZO = cond(bl)
	sp = sp - 2
	Mem0[ss:sp:word16] = dx
	si = Mem0[ss:sp:word16]
	sp = sp + 2
	ST[Top + 1:real64] = ST[Top + 1:real64] * lg2(ST[Top:real64] + 1.0)
	FPUF = cond(ST[Top + 1:real64])
	Top = Top + 1
	bl = bl + Mem0[ss:bp + 0x007D:byte] + C
	SCZO = cond(bl)
	si = 0x9F59
	al = al - 0x02 - C
	SCZO = cond(al)
	al = Mem0[ds:bx + (uint16) al:byte]
	es_bx = Mem0[ds:si + 0x0000:segptr32]
	C = !C
	al = al + 0xC4
	SCZO = cond(al)
	ST[Top:real64] = scalbn(ST[Top:real64], ST[Top + 1:real64])
	SZO = cond(sp & 0x99FE)
	C = false
	di = 0xBFC4
	v25 = Mem0[ss:bp + 0x1EC4:word16] + bp
	Mem0[ss:bp + 0x1EC4:word16] = v25
	SCZO = cond(v25)
	goto l1483_110D
	// succ:  l1483_110D
fn1483_1104_exit:


// fn1483_1B91
// Return size: 0
define fn1483_1B91
fn1483_1B91_entry:
	// succ:  l1483_1B91
l1483_1B91:
	sp = fp
	Top = 0
	al = al - 0x28
	SCZO = cond(al)
	ax = ax ^ 0x2EF9
	SZO = cond(ax)
	C = false
	al = al - bh
	SCZO = cond(al)
	v12 = ~Mem0[ds:bx + 0x10F8 + di:word16]
	Mem0[ds:bx + 0x10F8 + di:word16] = v12
	v13 = ax
	ax = cx
	cx = v13
	v15 = sp
	sp = sp - 2
	Mem0[ss:sp:word16] = v15
	dx = Mem0[ss:sp:word16]
	sp = sp + 2
	ds = Mem0[ss:sp:selector]
	sp = sp + 2
	v18 = Mem0[ds:bx + 0x3201 + di:word16]
	Mem0[ds:bx + 0x3201 + di:word16] = di
	di = v18
	ax = ax + 0xA587 + C
	SCZO = cond(ax)
	al = __inb(0x41)
	al = al + Mem0[ds:ecx:byte]
	SCZO = cond(al)
	__sti()
	SZO = cond(ch & ah)
	C = false
	v22 = Mem0[ds:0xFF1F:word16] + 0x0001
	Mem0[ds:0xFF1F:word16] = v22
	SZO = cond(v22)
	al = __inb(dx)
	al = al - 0xF8 - C
	SCZO = cond(al)
	al = al & 0x0A
	SZO = cond(al)
	C = false
	// succ:  l1483_1BB7_thunk_fn1483_1BB9
l1483_1BB7_thunk_fn1483_1BB9:
	call fn1483_1BB9 (retsize: 0;)
	return
	// succ:  fn1483_1B91_exit
fn1483_1B91_exit:


// fn1483_1BB8
// Return size: 0
define fn1483_1BB8
fn1483_1BB8_entry:
	// succ:  l1483_1BB8
l1483_1BB8:
	sp = fp
	Top = 0
	al = al | Mem0[ds:si:byte]
	SZO = cond(al)
	C = false
	// succ:  l1483_1BB8_thunk_fn1483_1BB9
l1483_1BB8_thunk_fn1483_1BB9:
	call fn1483_1BB9 (retsize: 0;)
	return
	// succ:  fn1483_1BB8_exit
fn1483_1BB8_exit:


// fn1483_1BB9
// Return size: 4
define fn1483_1BB9
fn1483_1BB9_entry:
	goto l1483_1BB9
	// succ:  l1483_1BB9
l1483_1B13:
	ss = di
	__sti()
	call Mem0[0x1483:bx:ptr32] (retsize: 4;)
	return
	// succ:  fn1483_1BB9_exit
l1483_1B38:
	dx = dx - 0x0001
	SZO = cond(dx)
	branch Test(NE,Z) l1483_1B7F
	// succ:  l1483_1B3B l1483_1B7F
l1483_1B3B:
	cx = cx - 0x0001
	branch Test(EQ,Z) && cx != 0x0000 l1483_1B6D
	// succ:  l1483_1B3D l1483_1B6D
l1483_1B3D:
	C = false
	es = Mem0[ss:sp:selector]
	sp = sp + 2
	v13 = ax
	ax = si
	si = v13
	SCZO = cond(ax - bx)
	branch Test(EQ,Z) l1483_1B51
	// succ:  l1483_1B44 l1483_1B51
l1483_1B44:
	ax = ax - 0x0001
	SZO = cond(ax)
	dx = 0x02E2
	v17 = ax
	ax = sp
	sp = v17
	al = al + bh + C
	SCZO = cond(al)
	branch Test(EQ,Z) l1483_1B13
	// succ:  l1483_1B4E l1483_1B13
l1483_1B4E:
	v22 = Mem0[ds:si:byte] + ah
	Mem0[ds:si:byte] = v22
	SCZO = cond(v22)
	sp = sp - 2
	Mem0[ss:sp:word16] = cs
	// succ:  l1483_1B51
l1483_1B51:
	es = Mem0[ss:sp:selector]
	sp = sp + 2
	di = 0x02FB
	al = Mem0[ds:si:byte]
	si = si + 0x0001
	Mem0[es:di:byte] = al
	di = di + 0x0001
	call fn1483_1B91 (retsize: 2;)
	__cli()
	di = di - 0x0001
	SZO = cond(di)
	ax = 0x0A0D
	Mem0[es:di:word16] = ax
	di = di + 0x0002
	al = 0x24
	di = Mem0[ss:sp:word16]
	sp = sp + 0x0002
	si = Mem0[ss:sp:word16]
	sp = sp + 0x0002
	bp = Mem0[ss:sp:word16]
	sp = sp + 0x0002
	sp = sp + 0x0002
	bx = Mem0[ss:sp:word16]
	sp = sp + 0x0002
	dx = Mem0[ss:sp:word16]
	sp = sp + 0x0002
	cx = Mem0[ss:sp:word16]
	sp = sp + 0x0002
	ax = Mem0[ss:sp:word16]
	sp = sp + 0x0002
	Mem0[es:di:byte] = al
	di = di + 0x0001
	ax = ax - 0xECBA - C
	SCZO = cond(ax)
	dh = dh + bl
	SCZO = cond(dh)
	v37 = Mem0[ds:bx + di:word16] + bx
	Mem0[ds:bx + di:word16] = v37
	SCZO = cond(v37)
	v38 = (Mem0[ds:di:byte] & 0x01 << 0x08 - cl) != 0x00
	Mem0[ds:di:byte] = __rcl(Mem0[ds:di:byte], cl, C)
	C = v38
	// succ:  l1483_1B6D
l1483_1B6D:
	al = al & 0x5C
	SZO = cond(al)
	C = false
	sp = sp - 2
	Mem0[ss:sp:word16] = si
	si = 0x7269
	branch Test(NE,Z) l1483_1BE8
	// succ:  l1483_1B75 l1483_1BE8
l1483_1B75:
	al = al & 0x20
	SZO = cond(al)
	C = false
	bx = bx + 0x0001
	SZO = cond(bx)
	sp = sp - 2
	Mem0[ss:sp:word16] = 0x6365
	sp = Mem0[ds:bx + si:word16] *s 0x0046
	SCZO = cond(sp)
	di = Mem0[ss:sp:word16]
	sp = sp + 0x0002
	si = Mem0[ss:sp:word16]
	sp = sp + 0x0002
	bp = Mem0[ss:sp:word16]
	sp = sp + 0x0002
	sp = sp + 0x0002
	bx = Mem0[ss:sp:word16]
	sp = sp + 0x0002
	dx = Mem0[ss:sp:word16]
	sp = sp + 0x0002
	cx = Mem0[ss:sp:word16]
	sp = sp + 0x0002
	ax = Mem0[ss:sp:word16]
	sp = sp + 0x0002
	// succ:  l1483_1B7F
l1483_1B7F:
	bp = Mem0[ds:si + 0x0065:word16] *s 0x3A64
	SCZO = cond(bp)
	v26 = Mem0[ss:bp + si:byte] & al
	Mem0[ss:bp + si:byte] = v26
	SZO = cond(Mem0[ss:bp + si:byte])
	C = false
	ch = 0xAF
	dh = dh ^ Mem0[ds:bx + di:byte]
	SZO = cond(dh)
	C = false
	bx = 0xD909
	ax = __inw(0x0C)
	v30 = Mem0[ds:0x2CF2:byte] ^ cl
	Mem0[ds:0x2CF2:byte] = v30
	SZO = cond(Mem0[ds:0x2CF2:byte])
	C = false
	v31 = Mem0[ds:di:byte] - dh
	Mem0[ds:di:byte] = v31
	SCZO = cond(v31)
	C = true
	al = al - bh
	SCZO = cond(al)
	v32 = ~Mem0[ds:bx + 0x10F8 + di:word16]
	Mem0[ds:bx + 0x10F8 + di:word16] = v32
	v33 = ax
	ax = cx
	cx = v33
	v34 = sp
	sp = sp - 2
	Mem0[ss:sp:word16] = v34
	dx = Mem0[ss:sp:word16]
	sp = sp + 2
	ds = Mem0[ss:sp:selector]
	sp = sp + 2
	v35 = Mem0[ds:bx + 0x3201 + di:word16]
	Mem0[ds:bx + 0x3201 + di:word16] = di
	di = v35
	ax = ax + 0xA587 + C
	SCZO = cond(ax)
	al = __inb(0x41)
	al = al + Mem0[ds:ecx:byte]
	SCZO = cond(al)
	__sti()
	SZO = cond(ch & ah)
	C = false
	v37 = Mem0[ds:0xFF1F:word16] + 0x0001
	Mem0[ds:0xFF1F:word16] = v37
	SZO = cond(v37)
	al = __inb(dx)
	al = al - 0xF8 - C
	SCZO = cond(al)
	al = al & 0x0A
	SZO = cond(al)
	C = false
	// succ:  l1483_1BB9
l1483_1BB9:
	sp = v4
	Top = 0
	branch Test(UGE,C) l1483_1BBF
	// succ:  l1483_1BBC l1483_1BBF
l1483_1BBC:
	goto l1483_1B38
	// succ:  l1483_1B38
l1483_1BBF:
	ax = Mem0[ds:0xE10D:word16]
l1483_1BE8:
	bp = bp - 0x0001
	SZO = cond(bp)
	ax = ax - 0x85FE
	SCZO = cond(ax)
	bp = bp - 0x0001
	SZO = cond(bp)
	bh = bh | Mem0[ds:bx + 0x0003:byte]
	SZO = cond(bh)
	C = false
	sp = sp - 2
	Mem0[ss:sp:word16] = es
	SCZO = Mem0[ss:sp:word16]
	sp = sp + 0x0002
	return
	// succ:  fn1483_1BB9_exit
fn1483_1BB9_exit:


// fn1483_1C50
// Return size: 0
define fn1483_1C50
fn1483_1C50_entry:
	// succ:  l1483_1C50
l1483_1C50:
	sp = fp
	Top = 0
	al = __inb(dx)
	call ax (retsize: 2;)
	return
	// succ:  fn1483_1C50_exit
fn1483_1C50_exit:


// fn1483_261E
// Return size: 0
define fn1483_261E
fn1483_261E_entry:
	// succ:  l1483_261E
l1483_261E:
	sp = fp
	Top = 0
	ax = ax + 0x1414
	SCZO = cond(ax)
	al = al + 0x14 + C
	SCZO = cond(al)
	al = al + 0x14 + C
	SCZO = cond(al)
	al = al + 0x14 + C
	SCZO = cond(al)
	al = al + 0x14 + C
	SCZO = cond(al)
	al = al + 0x0F + C
	SCZO = cond(al)
	ss = Mem0[ss:sp:selector]
	sp = sp + 2
	__invd()
	al = al + 0x14 + C
	SCZO = cond(al)
	al = al + 0x07 + C
	SCZO = cond(al)
	al = al + 0x16 + C
	SCZO = cond(al)
	al = al + 0x14 + C
	SCZO = cond(al)
	al = al + 0x14 + C
	SCZO = cond(al)
	al = al + 0x14 + C
	SCZO = cond(al)
	al = al + 0x14 + C
	SCZO = cond(al)
	al = al + 0x0D + C
	SCZO = cond(al)
	al = al + 0x14 + C
	SCZO = cond(al)
	al = al + 0x14 + C
	SCZO = cond(al)
	al = al + 0x14 + C
	SCZO = cond(al)
	al = al + 0x14 + C
	SCZO = cond(al)
	al = al + 0x14 + C
	SCZO = cond(al)
	v11 = Mem0[ss:bp + si:byte] + cl + C
	Mem0[ss:bp + si:byte] = v11
	SCZO = cond(v11)
fn1483_261E_exit:


